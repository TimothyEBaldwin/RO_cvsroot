head	4.5;
access;
symbols
	Kernel-6_15:4.5
	Kernel-6_14:4.5
	Kernel-6_01-3:4.5
	Kernel-6_13:4.5
	Kernel-6_12:4.5
	Kernel-6_11:4.5
	Kernel-6_10:4.5
	Kernel-6_09:4.5
	Kernel-6_08-4_129_2_10:4.5
	Kernel-6_08-4_129_2_9:4.5
	Kernel-6_08:4.5
	Kernel-6_07:4.5
	Kernel-6_06:4.5
	Kernel-6_05-4_129_2_8:4.5
	Kernel-6_05:4.5
	Kernel-6_04:4.5
	Kernel-6_03:4.5
	Kernel-6_01-2:4.5
	Kernel-6_01-4_146_2_1:4.5
	Kernel-6_02:4.5
	Kernel-6_01-1:4.5
	Kernel-6_01:4.5
	Kernel-6_00:4.5
	Kernel-5_99:4.5
	Kernel-5_98:4.5
	Kernel-5_97-4_129_2_7:4.5
	Kernel-5_97:4.5
	Kernel-5_96:4.5
	Kernel-5_95:4.5
	Kernel-5_94:4.5
	Kernel-5_93:4.5
	Kernel-5_92:4.5
	Kernel-5_91:4.5
	Kernel-5_90:4.5
	Kernel-5_89-4_129_2_6:4.5
	Kernel-5_89:4.5
	Kernel-5_88-4_129_2_5:4.5
	Kernel-5_88-4_129_2_4:4.5
	Kernel-5_88:4.5
	Kernel-5_87:4.5
	Kernel-5_86-4_129_2_3:4.5
	Kernel-5_86-4_129_2_2:4.5
	Kernel-5_86-4_129_2_1:4.5
	Kernel-5_86:4.5
	SMP:4.5.0.2
	SMP_bp:4.5
	Kernel-5_85:4.5
	Kernel-5_54-1:4.5
	Kernel-5_84:4.5
	Kernel-5_83:4.5
	Kernel-5_82:4.5
	Kernel-5_81:4.5
	Kernel-5_80:4.5
	Kernel-5_79:4.5
	Kernel-5_78:4.5
	Kernel-5_77:4.5
	Kernel-5_76:4.5
	Kernel-5_75:4.5
	Kernel-5_74:4.5
	Kernel-5_73:4.5
	Kernel-5_72:4.5
	Kernel-5_71:4.5
	Kernel-5_70:4.5
	Kernel-5_69:4.5
	Kernel-5_68:4.5
	Kernel-5_67:4.5
	Kernel-5_66:4.5
	Kernel-5_65:4.5
	Kernel-5_64:4.5
	Kernel-5_63:4.5
	Kernel-5_62:4.5
	Kernel-5_61:4.5
	Kernel-5_60:4.5
	Kernel-5_59:4.5
	Kernel-5_58:4.5
	Kernel-5_57:4.5
	Kernel-5_56:4.5
	Kernel-5_55:4.5
	Kernel-5_54:4.5
	Kernel-5_53:4.5
	Kernel-5_52:4.5
	Kernel-5_51:4.5
	Kernel-5_50:4.4
	Kernel-5_49:4.4
	HAL_merge:4.3.2.2
	Kernel-5_48:4.4
	Kernel-5_35-4_79_2_327:4.3.2.2
	Kernel-5_35-4_79_2_326:4.3.2.2
	Kernel-5_35-4_79_2_325:4.3.2.2
	Kernel-5_35-4_79_2_324:4.3.2.2
	Kernel-5_35-4_79_2_323:4.3.2.2
	Kernel-5_35-4_79_2_322:4.3.2.2
	Kernel-5_35-4_79_2_321:4.3.2.2
	Kernel-5_35-4_79_2_320:4.3.2.2
	Kernel-5_35-4_79_2_319:4.3.2.2
	Kernel-5_35-4_79_2_318:4.3.2.2
	Kernel-5_35-4_79_2_317:4.3.2.2
	Kernel-5_35-4_79_2_316:4.3.2.2
	Kernel-5_35-4_79_2_315:4.3.2.2
	Kernel-5_35-4_79_2_314:4.3.2.2
	Kernel-5_35-4_79_2_313:4.3.2.2
	Kernel-5_35-4_79_2_312:4.3.2.2
	Kernel-5_35-4_79_2_311:4.3.2.2
	Kernel-5_35-4_79_2_310:4.3.2.2
	Kernel-5_35-4_79_2_309:4.3.2.2
	Kernel-5_35-4_79_2_308:4.3.2.2
	Kernel-5_35-4_79_2_307:4.3.2.2
	Kernel-5_35-4_79_2_306:4.3.2.2
	Kernel-5_35-4_79_2_305:4.3.2.2
	Kernel-5_35-4_79_2_304:4.3.2.2
	Kernel-5_35-4_79_2_303:4.3.2.2
	Kernel-5_35-4_79_2_302:4.3.2.2
	Kernel-5_35-4_79_2_301:4.3.2.2
	Kernel-5_35-4_79_2_300:4.3.2.2
	Kernel-5_35-4_79_2_299:4.3.2.2
	Kernel-5_35-4_79_2_298:4.3.2.2
	Kernel-5_35-4_79_2_297:4.3.2.2
	Kernel-5_35-4_79_2_296:4.3.2.2
	Kernel-5_35-4_79_2_295:4.3.2.2
	Kernel-5_35-4_79_2_294:4.3.2.2
	Kernel-5_35-4_79_2_293:4.3.2.2
	Kernel-5_35-4_79_2_292:4.3.2.2
	Kernel-5_35-4_79_2_291:4.3.2.2
	Kernel-5_35-4_79_2_290:4.3.2.2
	Kernel-5_35-4_79_2_289:4.3.2.2
	Kernel-5_35-4_79_2_288:4.3.2.2
	Kernel-5_35-4_79_2_287:4.3.2.2
	Kernel-5_35-4_79_2_286:4.3.2.2
	Kernel-5_35-4_79_2_285:4.3.2.2
	Kernel-5_35-4_79_2_284:4.3.2.2
	Kernel-5_35-4_79_2_283:4.3.2.2
	Kernel-5_35-4_79_2_282:4.3.2.2
	Kernel-5_35-4_79_2_281:4.3.2.2
	Kernel-5_35-4_79_2_280:4.3.2.2
	Kernel-5_35-4_79_2_279:4.3.2.2
	Kernel-5_35-4_79_2_278:4.3.2.2
	Kernel-5_35-4_79_2_277:4.3.2.2
	Kernel-5_35-4_79_2_276:4.3.2.2
	Kernel-5_35-4_79_2_275:4.3.2.2
	Kernel-5_35-4_79_2_274:4.3.2.2
	Kernel-5_35-4_79_2_273:4.3.2.2
	Kernel-5_35-4_79_2_272:4.3.2.2
	Kernel-5_35-4_79_2_271:4.3.2.2
	Kernel-5_35-4_79_2_270:4.3.2.2
	Kernel-5_35-4_79_2_269:4.3.2.2
	Kernel-5_35-4_79_2_268:4.3.2.2
	Kernel-5_35-4_79_2_267:4.3.2.2
	Kernel-5_35-4_79_2_266:4.3.2.2
	Kernel-5_35-4_79_2_265:4.3.2.2
	Kernel-5_35-4_79_2_264:4.3.2.2
	Kernel-5_35-4_79_2_263:4.3.2.2
	Kernel-5_35-4_79_2_262:4.3.2.2
	Kernel-5_35-4_79_2_261:4.3.2.2
	Kernel-5_35-4_79_2_260:4.3.2.2
	Kernel-5_35-4_79_2_259:4.3.2.2
	Kernel-5_35-4_79_2_258:4.3.2.2
	Kernel-5_35-4_79_2_257:4.3.2.2
	Kernel-5_35-4_79_2_256:4.3.2.2
	Kernel-5_35-4_79_2_255:4.3.2.2
	Kernel-5_35-4_79_2_254:4.3.2.2
	Kernel-5_35-4_79_2_253:4.3.2.2
	Kernel-5_35-4_79_2_252:4.3.2.2
	Kernel-5_35-4_79_2_251:4.3.2.2
	Kernel-5_35-4_79_2_250:4.3.2.2
	Kernel-5_35-4_79_2_249:4.3.2.2
	Kernel-5_35-4_79_2_248:4.3.2.2
	Kernel-5_35-4_79_2_247:4.3.2.2
	Kernel-5_35-4_79_2_246:4.3.2.2
	Kernel-5_35-4_79_2_245:4.3.2.2
	Kernel-5_35-4_79_2_244:4.3.2.2
	Kernel-5_35-4_79_2_243:4.3.2.2
	Kernel-5_35-4_79_2_242:4.3.2.2
	Kernel-5_35-4_79_2_241:4.3.2.2
	Kernel-5_35-4_79_2_240:4.3.2.2
	Kernel-5_35-4_79_2_239:4.3.2.2
	Kernel-5_35-4_79_2_238:4.3.2.2
	Kernel-5_35-4_79_2_237:4.3.2.2
	Kernel-5_35-4_79_2_236:4.3.2.2
	Kernel-5_35-4_79_2_235:4.3.2.2
	Kernel-5_35-4_79_2_234:4.3.2.2
	Kernel-5_35-4_79_2_233:4.3.2.2
	Kernel-5_35-4_79_2_232:4.3.2.2
	Kernel-5_35-4_79_2_231:4.3.2.2
	Kernel-5_35-4_79_2_230:4.3.2.2
	Kernel-5_35-4_79_2_229:4.3.2.2
	Kernel-5_35-4_79_2_228:4.3.2.2
	Kernel-5_35-4_79_2_227:4.3.2.2
	Kernel-5_35-4_79_2_226:4.3.2.2
	Kernel-5_35-4_79_2_225:4.3.2.2
	Kernel-5_35-4_79_2_224:4.3.2.2
	Kernel-5_35-4_79_2_223:4.3.2.2
	Kernel-5_35-4_79_2_222:4.3.2.2
	Kernel-5_35-4_79_2_221:4.3.2.2
	Kernel-5_35-4_79_2_220:4.3.2.2
	Kernel-5_35-4_79_2_219:4.3.2.2
	Kernel-5_35-4_79_2_218:4.3.2.2
	Kernel-5_35-4_79_2_217:4.3.2.2
	Kernel-5_35-4_79_2_216:4.3.2.2
	Kernel-5_35-4_79_2_215:4.3.2.2
	Kernel-5_35-4_79_2_214:4.3.2.2
	Kernel-5_35-4_79_2_213:4.3.2.2
	Kernel-5_35-4_79_2_212:4.3.2.2
	Kernel-5_35-4_79_2_211:4.3.2.2
	Kernel-5_35-4_79_2_210:4.3.2.2
	Kernel-5_35-4_79_2_209:4.3.2.2
	Kernel-5_35-4_79_2_208:4.3.2.2
	Kernel-5_35-4_79_2_207:4.3.2.2
	Kernel-5_35-4_79_2_206:4.3.2.2
	Kernel-5_35-4_79_2_205:4.3.2.2
	Kernel-5_35-4_79_2_204:4.3.2.2
	Kernel-5_35-4_79_2_203:4.3.2.2
	Kernel-5_35-4_79_2_202:4.3.2.2
	Kernel-5_35-4_79_2_201:4.3.2.2
	Kernel-5_35-4_79_2_200:4.3.2.2
	Kernel-5_35-4_79_2_199:4.3.2.2
	Kernel-5_35-4_79_2_198:4.3.2.2
	Kernel-5_35-4_79_2_197:4.3.2.2
	Kernel-5_35-4_79_2_196:4.3.2.2
	Kernel-5_35-4_79_2_195:4.3.2.2
	Kernel-5_35-4_79_2_194:4.3.2.2
	Kernel-5_35-4_79_2_193:4.3.2.2
	Kernel-5_35-4_79_2_192:4.3.2.2
	Kernel-5_35-4_79_2_191:4.3.2.2
	Kernel-5_35-4_79_2_190:4.3.2.2
	Kernel-5_35-4_79_2_189:4.3.2.2
	Kernel-5_35-4_79_2_188:4.3.2.2
	Kernel-5_35-4_79_2_187:4.3.2.2
	Kernel-5_35-4_79_2_186:4.3.2.2
	Kernel-5_35-4_79_2_185:4.3.2.2
	Kernel-5_35-4_79_2_184:4.3.2.2
	Kernel-5_35-4_79_2_183:4.3.2.2
	Kernel-5_35-4_79_2_182:4.3.2.2
	Kernel-5_35-4_79_2_181:4.3.2.2
	Kernel-5_35-4_79_2_180:4.3.2.2
	Kernel-5_35-4_79_2_179:4.3.2.2
	Kernel-5_35-4_79_2_178:4.3.2.2
	Kernel-5_35-4_79_2_177:4.3.2.2
	Kernel-5_35-4_79_2_176:4.3.2.2
	Kernel-5_35-4_79_2_175:4.3.2.2
	Kernel-5_35-4_79_2_174:4.3.2.2
	Kernel-5_35-4_79_2_173:4.3.2.2
	Kernel-5_35-4_79_2_172:4.3.2.2
	Kernel-5_35-4_79_2_171:4.3.2.2
	Kernel-5_35-4_79_2_170:4.3.2.2
	Kernel-5_35-4_79_2_169:4.3.2.2
	Kernel-5_35-4_79_2_168:4.3.2.2
	Kernel-5_35-4_79_2_167:4.3.2.2
	Kernel-5_35-4_79_2_166:4.3.2.1
	Kernel-5_35-4_79_2_165:4.3.2.1
	RPi_merge:4.3.2.1
	Kernel-5_35-4_79_2_147_2_23:4.3.2.1
	Kernel-5_35-4_79_2_147_2_22:4.3.2.1
	Kernel-5_35-4_79_2_147_2_21:4.3.2.1
	Kernel-5_35-4_79_2_147_2_20:4.3.2.1
	Kernel-5_35-4_79_2_147_2_19:4.3.2.1
	Kernel-5_35-4_79_2_147_2_18:4.3.2.1
	Kernel-5_35-4_79_2_164:4.3.2.1
	Kernel-5_35-4_79_2_163:4.3.2.1
	Kernel-5_35-4_79_2_147_2_17:4.3.2.1
	Kernel-5_35-4_79_2_147_2_16:4.3.2.1
	Kernel-5_35-4_79_2_147_2_15:4.3.2.1
	Kernel-5_35-4_79_2_162:4.3.2.1
	Kernel-5_35-4_79_2_161:4.3.2.1
	Kernel-5_35-4_79_2_147_2_14:4.3.2.1
	Kernel-5_35-4_79_2_147_2_13:4.3.2.1
	Kernel-5_35-4_79_2_160:4.3.2.1
	Kernel-5_35-4_79_2_159:4.3.2.1
	Kernel-5_35-4_79_2_158:4.3.2.1
	Kernel-5_35-4_79_2_157:4.3.2.1
	Kernel-5_35-4_79_2_156:4.3.2.1
	Kernel-5_35-4_79_2_147_2_12:4.3.2.1
	Kernel-5_35-4_79_2_147_2_11:4.3.2.1
	Kernel-5_35-4_79_2_155:4.3.2.1
	Kernel-5_35-4_79_2_147_2_10:4.3.2.1
	Kernel-5_35-4_79_2_154:4.3.2.1
	Kernel-5_35-4_79_2_153:4.3.2.1
	Kernel-5_35-4_79_2_147_2_9:4.3.2.1
	Kernel-5_35-4_79_2_152:4.3.2.1
	Kernel-5_35-4_79_2_151:4.3.2.1
	Kernel-5_35-4_79_2_147_2_8:4.3.2.1
	Kernel-5_35-4_79_2_147_2_7:4.3.2.1
	Kernel-5_35-4_79_2_150:4.3.2.1
	Kernel-5_35-4_79_2_147_2_6:4.3.2.1
	Kernel-5_35-4_79_2_147_2_5:4.3.2.1
	Kernel-5_35-4_79_2_149:4.3.2.1
	Kernel-5_35-4_79_2_147_2_4:4.3.2.1
	Kernel-5_35-4_79_2_147_2_3:4.3.2.1
	Kernel-5_35-4_79_2_148:4.3.2.1
	Kernel-5_35-4_79_2_147_2_2:4.3.2.1
	Kernel-5_35-4_79_2_147_2_1:4.3.2.1
	RPi:4.3.2.1.0.2
	RPi_bp:4.3.2.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.3.4.1
	alees_Kernel_dev:4.3.4.1.0.2
	alees_Kernel_dev_bp:4.3.4.1
	Kernel-5_35-4_79_2_147:4.3.2.1
	Kernel-5_35-4_79_2_146:4.3.2.1
	Kernel-5_35-4_79_2_145:4.3.2.1
	Kernel-5_35-4_79_2_144:4.3.2.1
	Kernel-5_35-4_79_2_143:4.3.2.1
	Kernel-5_35-4_79_2_142:4.3.2.1
	Kernel-5_35-4_79_2_141:4.3.2.1
	Kernel-5_35-4_79_2_140:4.3.2.1
	Kernel-5_35-4_79_2_139:4.3.2.1
	Kernel-5_35-4_79_2_138:4.3.2.1
	Kernel-5_35-4_79_2_137:4.3.2.1
	Kernel-5_35-4_79_2_136:4.3.2.1
	Kernel-5_35-4_79_2_135:4.3.2.1
	Kernel-5_35-4_79_2_134:4.3.2.1
	Kernel-5_35-4_79_2_133:4.3.2.1
	Kernel-5_35-4_79_2_132:4.3.2.1
	Kernel-5_35-4_79_2_131:4.3.2.1
	Kernel-5_35-4_79_2_130:4.3.2.1
	Kernel-5_35-4_79_2_129:4.3.2.1
	Kernel-5_35-4_79_2_128:4.3.2.1
	Kernel-5_35-4_79_2_127:4.3.2.1
	Kernel-5_35-4_79_2_126:4.3.2.1
	Kernel-5_35-4_79_2_125:4.3.2.1
	Kernel-5_35-4_79_2_124:4.3.2.1
	Kernel-5_35-4_79_2_123:4.3.2.1
	Cortex_merge:4.3.4.2
	Kernel-5_35-4_79_2_122:4.3
	Kernel-5_35-4_79_2_98_2_54:4.3.4.2
	Kernel-5_35-4_79_2_98_2_53:4.3.4.2
	Kernel-5_35-4_79_2_98_2_52:4.3.4.1
	Kernel-5_35-4_79_2_98_2_51:4.3.4.1
	Kernel-5_35-4_79_2_98_2_50:4.3.4.1
	Kernel-5_35-4_79_2_98_2_49:4.3.4.1
	Kernel-5_35-4_79_2_98_2_48:4.3.4.1
	Kernel-5_35-4_79_2_121:4.3
	Kernel-5_35-4_79_2_98_2_47:4.3
	Kernel-5_35-4_79_2_120:4.3
	Kernel-5_35-4_79_2_98_2_46:4.3
	Kernel-5_35-4_79_2_119:4.3
	Kernel-5_35-4_79_2_98_2_45:4.3
	Kernel-5_35-4_79_2_98_2_44:4.3
	Kernel-5_35-4_79_2_118:4.3
	Kernel-5_35-4_79_2_98_2_43:4.3
	Kernel-5_35-4_79_2_117:4.3
	Kernel-5_35-4_79_2_116:4.3
	Kernel-5_35-4_79_2_98_2_42:4.3
	Kernel-5_35-4_79_2_115:4.3
	Kernel-5_35-4_79_2_98_2_41:4.3
	Kernel-5_35-4_79_2_98_2_40:4.3
	Kernel-5_35-4_79_2_114:4.3
	Kernel-5_35-4_79_2_98_2_39:4.3
	Kernel-5_35-4_79_2_98_2_38:4.3
	Kernel-5_35-4_79_2_113:4.3
	Kernel-5_35-4_79_2_112:4.3
	Kernel-5_35-4_79_2_98_2_37:4.3
	Kernel-5_35-4_79_2_98_2_36:4.3
	Kernel-5_35-4_79_2_98_2_35:4.3
	Kernel-5_35-4_79_2_98_2_34:4.3
	Kernel-5_35-4_79_2_98_2_33:4.3
	Kernel-5_35-4_79_2_98_2_32:4.3
	Kernel-5_35-4_79_2_98_2_31:4.3
	Kernel-5_35-4_79_2_98_2_30:4.3
	Kernel-5_35-4_79_2_98_2_29:4.3
	Kernel-5_35-4_79_2_98_2_28:4.3
	Kernel-5_35-4_79_2_98_2_27:4.3
	Kernel-5_35-4_79_2_98_2_26:4.3
	Kernel-5_35-4_79_2_111:4.3
	Kernel-5_35-4_79_2_98_2_25:4.3
	Kernel-5_35-4_79_2_98_2_24:4.3
	Kernel-5_35-4_79_2_98_2_23:4.3
	Kernel-5_35-4_79_2_110:4.3
	Kernel-5_35-4_79_2_98_2_22:4.3
	Kernel-5_35-4_79_2_109:4.3
	Kernel-5_35-4_79_2_98_2_21:4.3
	Kernel-5_35-4_79_2_98_2_20:4.3
	Kernel-5_35-4_79_2_108:4.3
	Kernel-5_35-4_79_2_107:4.3
	Kernel-5_35-4_79_2_98_2_19:4.3
	Kernel-5_35-4_79_2_98_2_18:4.3
	Kernel-5_35-4_79_2_98_2_17:4.3
	Kernel-5_35-4_79_2_98_2_16:4.3
	Kernel-5_35-4_79_2_98_2_15:4.3
	Kernel-5_35-4_79_2_106:4.3
	Kernel-5_35-4_79_2_105:4.3
	Kernel-5_35-4_79_2_104:4.3
	Kernel-5_35-4_79_2_98_2_14:4.3
	Kernel-5_35-4_79_2_98_2_13:4.3
	Kernel-5_35-4_79_2_98_2_12:4.3
	Kernel-5_35-4_79_2_98_2_11:4.3
	Kernel-5_35-4_79_2_98_2_10:4.3
	Kernel-5_35-4_79_2_98_2_9:4.3
	Kernel-5_35-4_79_2_103:4.3
	Kernel-5_35-4_79_2_102:4.3
	Kernel-5_35-4_79_2_98_2_8:4.3
	Kernel-5_35-4_79_2_98_2_7:4.3
	Kernel-5_35-4_79_2_98_2_6:4.3
	Kernel-5_35-4_79_2_98_2_5:4.3
	Kernel-5_35-4_79_2_98_2_4:4.3
	Kernel-5_35-4_79_2_101:4.3
	Kernel-5_35-4_79_2_100:4.3
	Kernel-5_35-4_79_2_99:4.3
	Kernel-5_35-4_79_2_98_2_3:4.3
	Kernel-5_35-4_79_2_98_2_2:4.3
	Kernel-5_35-4_79_2_98_2_1:4.3
	Cortex:4.3.0.4
	Cortex_bp:4.3
	Kernel-5_35-4_79_2_98:4.3
	Kernel-5_35-4_79_2_97:4.3
	Kernel-5_35-4_79_2_96:4.3
	Kernel-5_35-4_79_2_95:4.3
	Kernel-5_35-4_79_2_94:4.3
	Kernel-5_35-4_79_2_93:4.3
	Kernel-5_35-4_79_2_92:4.3
	Kernel-5_35-4_79_2_91:4.3
	Kernel-5_35-4_79_2_90:4.3
	Kernel-5_35-4_79_2_89:4.3
	Kernel-5_35-4_79_2_88:4.3
	Kernel-5_35-4_79_2_87:4.3
	Kernel-5_35-4_79_2_86:4.3
	Kernel-5_35-4_79_2_85:4.3
	Kernel-5_35-4_79_2_84:4.3
	Kernel-5_35-4_79_2_83:4.3
	Kernel-5_35-4_79_2_82:4.3
	Kernel-5_35-4_79_2_81:4.3
	Kernel-5_35-4_79_2_80:4.3
	Kernel-5_35-4_79_2_79:4.3
	Kernel-5_35-4_79_2_78:4.3
	Kernel-5_35-4_79_2_77:4.3
	RO_5_07:4.3
	Kernel-5_35-4_79_2_76:4.3
	Kernel-5_35-4_79_2_75:4.3
	Kernel-5_35-4_79_2_74:4.3
	Kernel-5_35-4_79_2_73:4.3
	Kernel-5_35-4_79_2_72:4.3
	Kernel-5_35-4_79_2_71:4.3
	Kernel-5_35-4_79_2_70:4.3
	Kernel-5_35-4_79_2_69:4.3
	Kernel-5_35-4_79_2_68:4.3
	Kernel-5_35-4_79_2_67:4.3
	Kernel-5_35-4_79_2_66:4.3
	Kernel-5_35-4_79_2_65:4.3
	Kernel-5_35-4_79_2_64:4.3
	Kernel-5_35-4_79_2_63:4.3
	Kernel-5_35-4_79_2_62:4.3
	Kernel-5_35-4_79_2_61:4.3
	Kernel-5_35-4_79_2_59:4.3
	Kernel-5_35-4_79_2_58:4.3
	Kernel-5_35-4_79_2_57:4.3
	Kernel-5_35-4_79_2_56:4.3
	Kernel-5_35-4_79_2_55:4.3
	Kernel-5_35-4_79_2_54:4.3
	Kernel-5_35-4_79_2_53:4.3
	Kernel-5_35-4_79_2_52:4.3
	Kernel-5_35-4_79_2_51:4.3
	Kernel-5_35-4_79_2_50:4.3
	Kernel-5_35-4_79_2_49:4.3
	Kernel-5_35-4_79_2_48:4.3
	Kernel-5_47:4.3
	Kernel-5_46-4_90_2_1:4.3
	nbingham_Kernel_FastNC_dev_bp:4.3
	nbingham_Kernel_FastNC_dev:4.3.0.6
	Kernel-5_46:4.3
	Kernel-5_45:4.3
	Kernel-5_35-4_79_2_47:4.3
	Kernel-5_35-4_79_2_46:4.3
	Kernel-5_35-4_79_2_45:4.3
	Kernel-5_35-4_79_2_44:4.3
	Kernel-5_35-4_79_2_25_2_2:4.3
	Kernel-5_35-4_79_2_43:4.3
	Kernel-5_35-4_79_2_42:4.3
	Kernel-5_35-4_79_2_41:4.3
	Kernel-5_35-4_79_2_40:4.3
	Kernel-5_35-4_79_2_39:4.3
	Kernel-5_35-4_79_2_38:4.3
	Kernel-5_35-4_79_2_37:4.3
	Kernel-5_35-4_79_2_36:4.3
	Kernel-5_35-4_79_2_35:4.3
	Kernel-5_35-4_79_2_34:4.3
	Kernel-5_35-4_79_2_33:4.3
	Kernel-5_35-4_79_2_32:4.3
	Kernel-5_44:4.3
	Kernel-5_35-4_79_2_25_2_1:4.3
	Kernel-5_43:4.3
	Kernel-5_35-4_79_2_31:4.3
	Kernel-5_35-4_79_2_30:4.3
	Kernel-5_35-4_79_2_29:4.3
	Kernel-5_35-4_79_2_28:4.3
	Kernel-5_35-4_79_2_27:4.3
	Kernel-5_35-4_79_2_26:4.3
	Kernel-5_42:4.3
	Kernel-5_41:4.3
	Kernel-5_40:4.3
	Kernel-5_35-4_79_2_25:4.3
	Kernel-5_35-4_79_2_24:4.3
	Kernel-5_35-4_79_2_23:4.3
	Kernel-5_35-4_79_2_22:4.3
	Kernel-5_35-4_79_2_21:4.3
	Kernel-5_35-4_79_2_20:4.3
	Kernel-5_35-4_79_2_19:4.3
	Kernel-5_35-4_79_2_18:4.3
	Kernel-5_35-4_79_2_17:4.3
	Kernel-5_35-4_79_2_16:4.3
	Kernel-5_35-4_79_2_15:4.3
	Kernel-5_35-4_79_2_14:4.3
	Kernel-5_39:4.3
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.8
	Kernel-5_38:4.3
	Kernel-5_35-4_79_2_13:4.3
	Kernel-5_35-4_79_2_12:4.3
	Kernel-5_35-4_79_2_11:4.3
	Kernel-5_37:4.3
	Kernel-5_35-4_79_2_10:4.3
	Kernel-5_35-4_79_2_9:4.3
	Kernel-5_36:4.3
	Kernel-5_35-4_79_2_8:4.3
	Kernel-5_35-4_79_2_7:4.3
	Kernel-5_35-4_79_2_6:4.3
	Kernel-5_35-4_79_2_5:4.3
	Kernel-5_35-4_79_2_4:4.3
	Kernel-5_35-4_79_2_3:4.3
	Kernel-5_35-4_79_2_2:4.3
	dellis_autobuild_BaseSW:4.3
	Kernel-5_35-4_79_2_1:4.3
	HAL:4.3.0.2
	Kernel-5_35:4.3
	Kernel-5_34:4.3
	Kernel-5_33:4.3
	Kernel-5_32:4.3
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.3
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.4.1
	Ursula_RiscPC_bp:4.1.4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1.4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	mstphens_Kernel-3_80:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2016.06.30.20.59.50;	author jlee;	state Exp;
branches;
next	4.4;
commitid	skOEjp3ipLHx6xcz;

4.4
date	2016.06.30.20.08.16;	author jlee;	state Exp;
branches;
next	4.3;
commitid	IWoXxARWeuLDOwcz;

4.3
date	2000.08.18.09.31.45;	author sbrodie;	state Exp;
branches
	4.3.2.1
	4.3.4.1;
next	4.2;

4.2
date	2000.04.04.14.27.38;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.31;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.3.2.1
date	2011.11.26.21.11.24;	author jlee;	state Exp;
branches;
next	4.3.2.2;
commitid	cI3W0zbtALQG6TIv;

4.3.2.2
date	2012.09.30.08.46.20;	author rsprowson;	state Exp;
branches;
next	;
commitid	oaVP9UztPt2m3xmw;

4.3.4.1
date	2011.08.08.23.28.34;	author jlee;	state Exp;
branches;
next	4.3.4.2;
commitid	D7rzILnwRRSXoLuv;

4.3.4.2
date	2011.09.24.19.55.56;	author jlee;	state Exp;
branches;
next	;
commitid	kEjQnYmCIZvfIMAv;

4.1.1.1
date	96.11.05.09.41.31;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.02.09;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.09.09.13.34.17;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.12.34;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.04.21;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Delete lots of old switches
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * FixCallBacks
  * UseProcessTransfer
  * CanLiveOnROMCard
  * BleedinDaveBell
  * NewStyleEcfs
  * DoVdu23_0_12
  * LCDPowerCtrl
  * HostVdu
  * Print
  * EmulatorSupport
  * TubeInfo
  * AddTubeBashers
  * TubeChar, TubeString, TubeDumpNoStack, TubeNewlNoStack macros
  * FIQDebug
  * VCOstartfix
  * AssemblingArthur (n.b. still defined for safety with anything in Hdr: which uses it, but not used explicitly by the kernel)
  * MouseBufferFix
  * LCDInvert
  * LCDSupport
  * DoInitialiseMode
  * Interruptible32bitModes
  * MouseBufferManager
  * StrongARM (new CacheCleanerHack and InterruptDelay switches added to hdr/Options to cover some functionality that StrongARM previously covered)
  * SAcleanflushbroken
  * StrongARM_POST
  * IrqsInClaimRelease
  * CheckProtectionLink
  * GSWorkspaceInKernelBuffers
  * EarlierReentrancyInDAShrink
  * LongCommandLines
  * ECC
  * NoSPSRcorruption
  * RMTidyDoesNowt
  * RogerEXEY
  * StorkPowerSave
  * DebugForcedReset
  * AssembleKEYV
  * AssemblePointerV
  * ProcessorVectors
  * Keyboard_Type
  Assorted old files have also been deleted.
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.51. Tagged as 'Kernel-5_51'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > $.Source.PMF.oswrch

        GBLS    WrchLimReg

; *****************************************************************************
;
;       PMFWrch - Entry point for WriteC vector
;       This routine used to be nice and structured before I
;       optimised it for plain wrch !
;
; in:   R0 = character
;
; out:  All registers preserved
;

        [ {FALSE}
WrchLimReg      SETS    "R9"            ; would like to only push R0-R9, but
                                        ; PMFWrchDirect is called by SWIs like
                                        ; OS_WriteN etc, which need R10-R12

PMFWrchDirect
        BYTEWS  WsPtr                   ; if called direct, then set up R12
PMFWrch ROUT
        Push    "R0-$WrchLimReg"        ; if called thru vec, already set up
        |
WrchLimReg      SETS    "R12"           ; 0.046N, so need to save R0-R12

PMFWrchDirect
PMFWrch ROUT
        Push    "R0-$WrchLimReg"
        BYTEWS  WsPtr
        ]

        LDRB    R1, WrchDest
        LDRB    R2, SpoolFileH
        ORRS    R3, R1, R2
        BNE     %FT10

        VDWS    WsPtr
        BL      Vdu
        BVS     %FT45
        Pull    "R0-$WrchLimReg,PC", CC
        B       %FT15

10
        TST     R1, #&22                ; branch if wrch not to VDU
        BNE     %FT50                   ; or wrch to extension vector

        VDWS    WsPtr
        BL      Vdu
15
        BVS     %FT45                   ; error from VDU
        LDR     R0,[R13]                ; reload R0 with character
        BYTEWS  WsPtr                   ; reload workspace pointer
        LDRB    R1, WrchDest            ; and wrch destinations
        BCS     PrintVdu                ; VDU says "Print it"
20
        TST     R1, #8                  ; printer enabled, independent of
                                        ; CTRL-B and CTRL-C ?
        BNE     PrintVdu                ; yes, then branch
40
        TST     R1, #1                  ; output to RS423 ?
        BNE     RS423Vdu                ; yes, then do it
42
        LDRB    R2, SpoolFileH          ; spool file open ?
        CMP     R2, #0                  ; (set V=0 for if we drop thru)
        BLNE    SpoolVdu                ; yes, then go
45
        Pull    "R0-$WrchLimReg, PC", VC
        ADD     R13, R13, #4
        Pull    "R1-$WrchLimReg, PC"

; Come here when Wrch not to VDU or Wrch to VDUXV

50
        TST     R1, #&02                ; wrch not to VDU at all ?
        BNE     %BT20                   ; then skip
                                        ; else must be VDU sent thru VDUXV
        MOV     R10, #VDUXV
        BL      GoVec2                  ; call vector
        B       %BT15

; *****************************************************************************

PrintVdu
        TST     R1, #&40                ; only print via VDU 1 ?
        BNE     %BT40                   ; yes, then skip

        LDRB    R2, PrinterIgnore       ; is it ignore character ?
        TEQ     R0, R2
        LDREQB  R2, NoIgnore            ; and ignoring enabled ?
        TSTEQ   R2, #&80
        BEQ     %BT40                   ; yes, then don't print it

        BL      MOSDoPrintWS            ; else print it (R12 -> ByteWS)
        BVS     %BT45                   ; error in printing
        LDR     R0, [R13]               ; reload R0 with character
        LDRB    R1, WrchDest            ; and reload wrchdest
        B       %BT40

RS423Vdu
        Push    "r0,r1"
        LDRB    r1, SerialOutHandle
        TEQ     r1, #0
        BNE     %FT60
        MOV     r0, #open_write
        ADR     r1, SerialOutFilename
        SWI     XOS_Find
        BVS     %FT70                   ; if can't open serial output stream, report error
                                        ; and don't put anything in buffer
        STRB    r0, SerialOutHandle
        LDR     r0, [sp]                ; get char back
60
        PHPSEI
        Push    "r14"                   ; save IRQ indication
        MOV     r1, #Buff_RS423Out      ; RS423 output buffer id
        BL      WRITE                   ; write to buffer (waiting)
        Pull    "r14"
        PLP                             ; restore IRQ state from lr
        Pull    "r0,r1"
        B       %BT42

; we got an error from the open, so in order to report it,
; we'd better stop outputting to RS423

70
        ADD     sp, sp, #4              ; junk stacked r0
        Pull    "r1"
        BIC     r1, r1, #1              ; clear RS423 output bit
        STRB    r1, WrchDest            ; write back to OS_Byte
        B       %BT45                   ; report error

SerialOutFilename
        =       "Serial#Buffer2:", 0
        ALIGN

SpoolVdu                                ; entered with V=0
        TST     R1, #&10                ; spooling enabled ?
        MOVNE   PC, R14                 ; no, then return

        Push    R14                     ; cos we're doing a SWI in SVC mode
        MOV     R1, R2                  ; put handle in R1
        SWI     XOS_BPut                ; put byte to file
        Pull    PC, VC                  ; if no error, return with V clear
                                        ; (no need to reload R1, since SPOOL
                                        ; is done last)
SpoolBadExit
        Push    R0
        MOV     R0, #0                  ; stop spooling FIRST
        STRB    R0, SpoolFileH
        SWI     XOS_Find                ; and close file (R0=0, R1=handle)
        Pull    "R1, R14"
        MOVVC   R0, R1                  ; if closed OK, then restore old error
        RETURNVS                        ; still indicate error

        LTORG

        END
@


4.4
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@a52 1
        [ AssemblingArthur
a54 3
        |
        BL      WrchVdu                 ; call VDU
        ]
a62 1
        [ AssemblingArthur
a64 3
        |
        BL      WrchVdu                 ; call VDU
        ]
a82 1
        [ AssemblingArthur :LOR: Module
a85 3
        |
        Pull    "R0-$WrchLimReg, PC"            ; that's it (phew!)
        ]
@


4.3
log
@  Improved the error cacheing.
  Removed DriversInKernel conditional.
Detail:
  If the territory changes or the resource file changes, the kernel
    will now decache all the cached error blocks so that next time
    they are required, they will be looked up again.
  The error cacheing is now a kernel build option and is always set
    to on.
  Removed one of the 5 error messages to be cached - it never seems
    to happen.  The remaining 4 are more frequent.
Admin:
  Tested in Ursula build.
  Cannot be used with HdrSrc 0.94.  HdrSrc 0.95 and later is required
    (or HdrSrc 0.93 and earlier subject to other kernel requirements)
  Requires MessageTrans 0.42 or later for correct operation when a
    replacement messages file is loaded.

Version 5.32. Tagged as 'Kernel-5_32'
@
text
@d75 1
a75 1
        LDMFD   R13, {R0}               ; reload R0 with character
d91 1
a91 1
        [ AssemblingArthur :LOR: ErrorsInR0
d123 1
a123 1
        LDMFD   R13, {R0}               ; reload R0 with character
d138 1
a138 1
        LDMFD   sp, {r0}                ; get char back
d182 2
@


4.3.2.1
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d75 1
a75 1
        LDR     R0,[R13]                ; reload R0 with character
d123 1
a123 1
        LDR     R0, [R13]               ; reload R0 with character
d138 1
a138 1
        LDR     r0, [sp]                ; get char back
a181 2
        LTORG

@


4.3.2.2
log
@Add *CONFIGURE [No]Num for control over the num lock state
STB default = off, desktop default = on.
Collapsed single use of 'ErrorsInR0' switch.

Version 5.35, 4.79.2.167. Tagged as 'Kernel-5_35-4_79_2_167'
@
text
@d91 1
a91 1
        [ AssemblingArthur :LOR: Module
@


4.3.4.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@a181 2
        LTORG

@


4.3.4.2
log
@Fix objasm 4 warnings
Detail:
  s/Arthur3, s/ChangeDyn, s/HAL, s/HeapMan, s/Middle, s/MoreSWIs, s/NewIRQs, s/Utility, s/VMSAv6, s/PMF/key, s/PMF/osbyte, s/PMF/osword, s/vdu/vdudecl, s/vdu/vdudriver, s/vdu/vduplot, s/vdu/vduwrch - Tweaked lots of LDM/STM instructions in order to get rid of the depracation/performance warnings
Admin:
  Tested on rev A2 BB-xM


Version 5.35, 4.79.2.98.2.53. Tagged as 'Kernel-5_35-4_79_2_98_2_53'
@
text
@d75 1
a75 1
        LDR     R0,[R13]                ; reload R0 with character
d123 1
a123 1
        LDR     R0, [R13]               ; reload R0 with character
d138 1
a138 1
        LDR     r0, [sp]                ; get char back
@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@a127 14
 [ DriversInKernel
        PHPSEI
        Push    "R0,R1,R14"             ; I know what I'm doing, honest!
        MOV     R1, #Buff_RS423Out      ; RS423 output buffer id
        SETV                            ; indicate examine buffer
        BL      REMOVE
        BLCS    RSBUSY                  ; buff empty, so reawaken TXIRQ
        LDMFD   R13, {R0}               ; get char back
        MOV     R1, #Buff_RS423Out      ; RS423 output buffer id
        BL      WRITE                   ; write to buffer (waiting)
        Pull    "R0,R1,R14"
        PLP                             ; restore interrupt state (V preserved)
        B       %BT42                   ; carry on with rest
 |
a157 1
 ]
a158 1
 [ :LNOT: DriversInKernel
a161 1
 ]
@


4.1
log
@Initial revision
@
text
@d99 1
a99 1
; Come here when Wrch not to VDU or Wrch to VDUXV 
d197 1
a197 1
        ORRS    PC, R14, #V_bit         ; still indicate error
@


4.1.4.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d30 10
d46 1
d53 1
d56 3
d67 1
d70 3
d91 1
d95 3
d128 14
d172 1
d174 1
d178 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
