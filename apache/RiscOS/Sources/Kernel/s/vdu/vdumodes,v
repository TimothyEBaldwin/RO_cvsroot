head	4.11;
access;
symbols
	Kernel-6_15:4.11
	Kernel-6_14:4.11
	Kernel-6_01-3:4.9
	Kernel-6_13:4.10
	Kernel-6_12:4.10
	Kernel-6_11:4.10
	Kernel-6_10:4.9
	Kernel-6_09:4.9
	Kernel-6_08-4_129_2_10:4.9
	Kernel-6_08-4_129_2_9:4.9
	Kernel-6_08:4.9
	Kernel-6_07:4.9
	Kernel-6_06:4.9
	Kernel-6_05-4_129_2_8:4.9
	Kernel-6_05:4.9
	Kernel-6_04:4.9
	Kernel-6_03:4.9
	Kernel-6_01-2:4.9
	Kernel-6_01-4_146_2_1:4.9
	Kernel-6_02:4.9
	Kernel-6_01-1:4.9
	Kernel-6_01:4.9
	Kernel-6_00:4.9
	Kernel-5_99:4.9
	Kernel-5_98:4.9
	Kernel-5_97-4_129_2_7:4.9
	Kernel-5_97:4.9
	Kernel-5_96:4.9
	Kernel-5_95:4.9
	Kernel-5_94:4.9
	Kernel-5_93:4.9
	Kernel-5_92:4.9
	Kernel-5_91:4.9
	Kernel-5_90:4.9
	Kernel-5_89-4_129_2_6:4.9
	Kernel-5_89:4.9
	Kernel-5_88-4_129_2_5:4.9
	Kernel-5_88-4_129_2_4:4.9
	Kernel-5_88:4.9
	Kernel-5_87:4.9
	Kernel-5_86-4_129_2_3:4.9
	Kernel-5_86-4_129_2_2:4.9
	Kernel-5_86-4_129_2_1:4.9
	Kernel-5_86:4.9
	SMP:4.9.0.2
	SMP_bp:4.9
	Kernel-5_85:4.9
	Kernel-5_54-1:4.7
	Kernel-5_84:4.9
	Kernel-5_83:4.9
	Kernel-5_82:4.9
	Kernel-5_81:4.9
	Kernel-5_80:4.9
	Kernel-5_79:4.9
	Kernel-5_78:4.9
	Kernel-5_77:4.9
	Kernel-5_76:4.9
	Kernel-5_75:4.9
	Kernel-5_74:4.9
	Kernel-5_73:4.7
	Kernel-5_72:4.7
	Kernel-5_71:4.7
	Kernel-5_70:4.7
	Kernel-5_69:4.7
	Kernel-5_68:4.7
	Kernel-5_67:4.7
	Kernel-5_66:4.7
	Kernel-5_65:4.7
	Kernel-5_64:4.7
	Kernel-5_63:4.7
	Kernel-5_62:4.7
	Kernel-5_61:4.7
	Kernel-5_60:4.7
	Kernel-5_59:4.7
	Kernel-5_58:4.7
	Kernel-5_57:4.7
	Kernel-5_56:4.7
	Kernel-5_55:4.7
	Kernel-5_54:4.7
	Kernel-5_53:4.7
	Kernel-5_52:4.7
	Kernel-5_51:4.7
	Kernel-5_50:4.6
	Kernel-5_49:4.6
	HAL_merge:4.5.2.13
	Kernel-5_48:4.6
	Kernel-5_35-4_79_2_327:4.5.2.13
	Kernel-5_35-4_79_2_326:4.5.2.13
	Kernel-5_35-4_79_2_325:4.5.2.13
	Kernel-5_35-4_79_2_324:4.5.2.13
	Kernel-5_35-4_79_2_323:4.5.2.13
	Kernel-5_35-4_79_2_322:4.5.2.13
	Kernel-5_35-4_79_2_321:4.5.2.13
	Kernel-5_35-4_79_2_320:4.5.2.13
	Kernel-5_35-4_79_2_319:4.5.2.13
	Kernel-5_35-4_79_2_318:4.5.2.13
	Kernel-5_35-4_79_2_317:4.5.2.13
	Kernel-5_35-4_79_2_316:4.5.2.13
	Kernel-5_35-4_79_2_315:4.5.2.13
	Kernel-5_35-4_79_2_314:4.5.2.13
	Kernel-5_35-4_79_2_313:4.5.2.13
	Kernel-5_35-4_79_2_312:4.5.2.13
	Kernel-5_35-4_79_2_311:4.5.2.13
	Kernel-5_35-4_79_2_310:4.5.2.13
	Kernel-5_35-4_79_2_309:4.5.2.13
	Kernel-5_35-4_79_2_308:4.5.2.13
	Kernel-5_35-4_79_2_307:4.5.2.13
	Kernel-5_35-4_79_2_306:4.5.2.13
	Kernel-5_35-4_79_2_305:4.5.2.13
	Kernel-5_35-4_79_2_304:4.5.2.13
	Kernel-5_35-4_79_2_303:4.5.2.13
	Kernel-5_35-4_79_2_302:4.5.2.13
	Kernel-5_35-4_79_2_301:4.5.2.13
	Kernel-5_35-4_79_2_300:4.5.2.13
	Kernel-5_35-4_79_2_299:4.5.2.13
	Kernel-5_35-4_79_2_298:4.5.2.13
	Kernel-5_35-4_79_2_297:4.5.2.13
	Kernel-5_35-4_79_2_296:4.5.2.13
	Kernel-5_35-4_79_2_295:4.5.2.13
	Kernel-5_35-4_79_2_294:4.5.2.13
	Kernel-5_35-4_79_2_293:4.5.2.13
	Kernel-5_35-4_79_2_292:4.5.2.13
	Kernel-5_35-4_79_2_291:4.5.2.13
	Kernel-5_35-4_79_2_290:4.5.2.13
	Kernel-5_35-4_79_2_289:4.5.2.13
	Kernel-5_35-4_79_2_288:4.5.2.13
	Kernel-5_35-4_79_2_287:4.5.2.13
	Kernel-5_35-4_79_2_286:4.5.2.13
	Kernel-5_35-4_79_2_285:4.5.2.13
	Kernel-5_35-4_79_2_284:4.5.2.13
	Kernel-5_35-4_79_2_283:4.5.2.13
	Kernel-5_35-4_79_2_282:4.5.2.13
	Kernel-5_35-4_79_2_281:4.5.2.13
	Kernel-5_35-4_79_2_280:4.5.2.13
	Kernel-5_35-4_79_2_279:4.5.2.13
	Kernel-5_35-4_79_2_278:4.5.2.13
	Kernel-5_35-4_79_2_277:4.5.2.13
	Kernel-5_35-4_79_2_276:4.5.2.13
	Kernel-5_35-4_79_2_275:4.5.2.13
	Kernel-5_35-4_79_2_274:4.5.2.13
	Kernel-5_35-4_79_2_273:4.5.2.13
	Kernel-5_35-4_79_2_272:4.5.2.13
	Kernel-5_35-4_79_2_271:4.5.2.13
	Kernel-5_35-4_79_2_270:4.5.2.13
	Kernel-5_35-4_79_2_269:4.5.2.13
	Kernel-5_35-4_79_2_268:4.5.2.13
	Kernel-5_35-4_79_2_267:4.5.2.13
	Kernel-5_35-4_79_2_266:4.5.2.13
	Kernel-5_35-4_79_2_265:4.5.2.13
	Kernel-5_35-4_79_2_264:4.5.2.13
	Kernel-5_35-4_79_2_263:4.5.2.13
	Kernel-5_35-4_79_2_262:4.5.2.13
	Kernel-5_35-4_79_2_261:4.5.2.13
	Kernel-5_35-4_79_2_260:4.5.2.13
	Kernel-5_35-4_79_2_259:4.5.2.13
	Kernel-5_35-4_79_2_258:4.5.2.13
	Kernel-5_35-4_79_2_257:4.5.2.13
	Kernel-5_35-4_79_2_256:4.5.2.13
	Kernel-5_35-4_79_2_255:4.5.2.13
	Kernel-5_35-4_79_2_254:4.5.2.13
	Kernel-5_35-4_79_2_253:4.5.2.13
	Kernel-5_35-4_79_2_252:4.5.2.13
	Kernel-5_35-4_79_2_251:4.5.2.13
	Kernel-5_35-4_79_2_250:4.5.2.13
	Kernel-5_35-4_79_2_249:4.5.2.13
	Kernel-5_35-4_79_2_248:4.5.2.13
	Kernel-5_35-4_79_2_247:4.5.2.13
	Kernel-5_35-4_79_2_246:4.5.2.13
	Kernel-5_35-4_79_2_245:4.5.2.13
	Kernel-5_35-4_79_2_244:4.5.2.13
	Kernel-5_35-4_79_2_243:4.5.2.13
	Kernel-5_35-4_79_2_242:4.5.2.13
	Kernel-5_35-4_79_2_241:4.5.2.13
	Kernel-5_35-4_79_2_240:4.5.2.13
	Kernel-5_35-4_79_2_239:4.5.2.13
	Kernel-5_35-4_79_2_238:4.5.2.13
	Kernel-5_35-4_79_2_237:4.5.2.13
	Kernel-5_35-4_79_2_236:4.5.2.13
	Kernel-5_35-4_79_2_235:4.5.2.13
	Kernel-5_35-4_79_2_234:4.5.2.13
	Kernel-5_35-4_79_2_233:4.5.2.13
	Kernel-5_35-4_79_2_232:4.5.2.13
	Kernel-5_35-4_79_2_231:4.5.2.13
	Kernel-5_35-4_79_2_230:4.5.2.13
	Kernel-5_35-4_79_2_229:4.5.2.13
	Kernel-5_35-4_79_2_228:4.5.2.13
	Kernel-5_35-4_79_2_227:4.5.2.13
	Kernel-5_35-4_79_2_226:4.5.2.13
	Kernel-5_35-4_79_2_225:4.5.2.13
	Kernel-5_35-4_79_2_224:4.5.2.13
	Kernel-5_35-4_79_2_223:4.5.2.13
	Kernel-5_35-4_79_2_222:4.5.2.13
	Kernel-5_35-4_79_2_221:4.5.2.13
	Kernel-5_35-4_79_2_220:4.5.2.13
	Kernel-5_35-4_79_2_219:4.5.2.13
	Kernel-5_35-4_79_2_218:4.5.2.12
	Kernel-5_35-4_79_2_217:4.5.2.12
	Kernel-5_35-4_79_2_216:4.5.2.12
	Kernel-5_35-4_79_2_215:4.5.2.12
	Kernel-5_35-4_79_2_214:4.5.2.12
	Kernel-5_35-4_79_2_213:4.5.2.12
	Kernel-5_35-4_79_2_212:4.5.2.12
	Kernel-5_35-4_79_2_211:4.5.2.12
	Kernel-5_35-4_79_2_210:4.5.2.12
	Kernel-5_35-4_79_2_209:4.5.2.12
	Kernel-5_35-4_79_2_208:4.5.2.12
	Kernel-5_35-4_79_2_207:4.5.2.12
	Kernel-5_35-4_79_2_206:4.5.2.12
	Kernel-5_35-4_79_2_205:4.5.2.12
	Kernel-5_35-4_79_2_204:4.5.2.12
	Kernel-5_35-4_79_2_203:4.5.2.11
	Kernel-5_35-4_79_2_202:4.5.2.10
	Kernel-5_35-4_79_2_201:4.5.2.10
	Kernel-5_35-4_79_2_200:4.5.2.10
	Kernel-5_35-4_79_2_199:4.5.2.10
	Kernel-5_35-4_79_2_198:4.5.2.10
	Kernel-5_35-4_79_2_197:4.5.2.10
	Kernel-5_35-4_79_2_196:4.5.2.10
	Kernel-5_35-4_79_2_195:4.5.2.10
	Kernel-5_35-4_79_2_194:4.5.2.10
	Kernel-5_35-4_79_2_193:4.5.2.9
	Kernel-5_35-4_79_2_192:4.5.2.9
	Kernel-5_35-4_79_2_191:4.5.2.9
	Kernel-5_35-4_79_2_190:4.5.2.9
	Kernel-5_35-4_79_2_189:4.5.2.9
	Kernel-5_35-4_79_2_188:4.5.2.9
	Kernel-5_35-4_79_2_187:4.5.2.9
	Kernel-5_35-4_79_2_186:4.5.2.9
	Kernel-5_35-4_79_2_185:4.5.2.9
	Kernel-5_35-4_79_2_184:4.5.2.9
	Kernel-5_35-4_79_2_183:4.5.2.9
	Kernel-5_35-4_79_2_182:4.5.2.9
	Kernel-5_35-4_79_2_181:4.5.2.9
	Kernel-5_35-4_79_2_180:4.5.2.9
	Kernel-5_35-4_79_2_179:4.5.2.9
	Kernel-5_35-4_79_2_178:4.5.2.9
	Kernel-5_35-4_79_2_177:4.5.2.9
	Kernel-5_35-4_79_2_176:4.5.2.9
	Kernel-5_35-4_79_2_175:4.5.2.9
	Kernel-5_35-4_79_2_174:4.5.2.9
	Kernel-5_35-4_79_2_173:4.5.2.9
	Kernel-5_35-4_79_2_172:4.5.2.9
	Kernel-5_35-4_79_2_171:4.5.2.9
	Kernel-5_35-4_79_2_170:4.5.2.9
	Kernel-5_35-4_79_2_169:4.5.2.9
	Kernel-5_35-4_79_2_168:4.5.2.9
	Kernel-5_35-4_79_2_167:4.5.2.9
	Kernel-5_35-4_79_2_166:4.5.2.9
	Kernel-5_35-4_79_2_165:4.5.2.9
	RPi_merge:4.5.2.9
	Kernel-5_35-4_79_2_147_2_23:4.5.2.9
	Kernel-5_35-4_79_2_147_2_22:4.5.2.9
	Kernel-5_35-4_79_2_147_2_21:4.5.2.9
	Kernel-5_35-4_79_2_147_2_20:4.5.2.9
	Kernel-5_35-4_79_2_147_2_19:4.5.2.9
	Kernel-5_35-4_79_2_147_2_18:4.5.2.9
	Kernel-5_35-4_79_2_164:4.5.2.9
	Kernel-5_35-4_79_2_163:4.5.2.9
	Kernel-5_35-4_79_2_147_2_17:4.5.2.9
	Kernel-5_35-4_79_2_147_2_16:4.5.2.9
	Kernel-5_35-4_79_2_147_2_15:4.5.2.9
	Kernel-5_35-4_79_2_162:4.5.2.9
	Kernel-5_35-4_79_2_161:4.5.2.9
	Kernel-5_35-4_79_2_147_2_14:4.5.2.9
	Kernel-5_35-4_79_2_147_2_13:4.5.2.9
	Kernel-5_35-4_79_2_160:4.5.2.9
	Kernel-5_35-4_79_2_159:4.5.2.9
	Kernel-5_35-4_79_2_158:4.5.2.9
	Kernel-5_35-4_79_2_157:4.5.2.9
	Kernel-5_35-4_79_2_156:4.5.2.9
	Kernel-5_35-4_79_2_147_2_12:4.5.2.9
	Kernel-5_35-4_79_2_147_2_11:4.5.2.9
	Kernel-5_35-4_79_2_155:4.5.2.9
	Kernel-5_35-4_79_2_147_2_10:4.5.2.9
	Kernel-5_35-4_79_2_154:4.5.2.9
	Kernel-5_35-4_79_2_153:4.5.2.9
	Kernel-5_35-4_79_2_147_2_9:4.5.2.9
	Kernel-5_35-4_79_2_152:4.5.2.9
	Kernel-5_35-4_79_2_151:4.5.2.9
	Kernel-5_35-4_79_2_147_2_8:4.5.2.9
	Kernel-5_35-4_79_2_147_2_7:4.5.2.9
	Kernel-5_35-4_79_2_150:4.5.2.9
	Kernel-5_35-4_79_2_147_2_6:4.5.2.9
	Kernel-5_35-4_79_2_147_2_5:4.5.2.9
	Kernel-5_35-4_79_2_149:4.5.2.9
	Kernel-5_35-4_79_2_147_2_4:4.5.2.9
	Kernel-5_35-4_79_2_147_2_3:4.5.2.9
	Kernel-5_35-4_79_2_148:4.5.2.9
	Kernel-5_35-4_79_2_147_2_2:4.5.2.9
	Kernel-5_35-4_79_2_147_2_1:4.5.2.9
	RPi:4.5.2.9.0.2
	RPi_bp:4.5.2.9
	Kernel-5_35-4_79_2_98_2_52_2_1:4.5.2.8
	alees_Kernel_dev:4.5.2.8.0.4
	alees_Kernel_dev_bp:4.5.2.8
	Kernel-5_35-4_79_2_147:4.5.2.9
	Kernel-5_35-4_79_2_146:4.5.2.9
	Kernel-5_35-4_79_2_145:4.5.2.9
	Kernel-5_35-4_79_2_144:4.5.2.9
	Kernel-5_35-4_79_2_143:4.5.2.9
	Kernel-5_35-4_79_2_142:4.5.2.9
	Kernel-5_35-4_79_2_141:4.5.2.9
	Kernel-5_35-4_79_2_140:4.5.2.9
	Kernel-5_35-4_79_2_139:4.5.2.8
	Kernel-5_35-4_79_2_138:4.5.2.8
	Kernel-5_35-4_79_2_137:4.5.2.8
	Kernel-5_35-4_79_2_136:4.5.2.8
	Kernel-5_35-4_79_2_135:4.5.2.8
	Kernel-5_35-4_79_2_134:4.5.2.8
	Kernel-5_35-4_79_2_133:4.5.2.8
	Kernel-5_35-4_79_2_132:4.5.2.8
	Kernel-5_35-4_79_2_131:4.5.2.8
	Kernel-5_35-4_79_2_130:4.5.2.8
	Kernel-5_35-4_79_2_129:4.5.2.8
	Kernel-5_35-4_79_2_128:4.5.2.8
	Kernel-5_35-4_79_2_127:4.5.2.8
	Kernel-5_35-4_79_2_126:4.5.2.8
	Kernel-5_35-4_79_2_125:4.5.2.8
	Kernel-5_35-4_79_2_124:4.5.2.8
	Kernel-5_35-4_79_2_123:4.5.2.8
	Cortex_merge:4.5.2.8
	Kernel-5_35-4_79_2_122:4.5.2.8
	Kernel-5_35-4_79_2_98_2_54:4.5.2.8
	Kernel-5_35-4_79_2_98_2_53:4.5.2.8
	Kernel-5_35-4_79_2_98_2_52:4.5.2.8
	Kernel-5_35-4_79_2_98_2_51:4.5.2.8
	Kernel-5_35-4_79_2_98_2_50:4.5.2.8
	Kernel-5_35-4_79_2_98_2_49:4.5.2.8
	Kernel-5_35-4_79_2_98_2_48:4.5.2.8
	Kernel-5_35-4_79_2_121:4.5.2.8
	Kernel-5_35-4_79_2_98_2_47:4.5.2.8
	Kernel-5_35-4_79_2_120:4.5.2.8
	Kernel-5_35-4_79_2_98_2_46:4.5.2.8
	Kernel-5_35-4_79_2_119:4.5.2.8
	Kernel-5_35-4_79_2_98_2_45:4.5.2.8
	Kernel-5_35-4_79_2_98_2_44:4.5.2.8
	Kernel-5_35-4_79_2_118:4.5.2.8
	Kernel-5_35-4_79_2_98_2_43:4.5.2.8
	Kernel-5_35-4_79_2_117:4.5.2.8
	Kernel-5_35-4_79_2_116:4.5.2.8
	Kernel-5_35-4_79_2_98_2_42:4.5.2.8
	Kernel-5_35-4_79_2_115:4.5.2.8
	Kernel-5_35-4_79_2_98_2_41:4.5.2.8
	Kernel-5_35-4_79_2_98_2_40:4.5.2.8
	Kernel-5_35-4_79_2_114:4.5.2.8
	Kernel-5_35-4_79_2_98_2_39:4.5.2.8
	Kernel-5_35-4_79_2_98_2_38:4.5.2.8
	Kernel-5_35-4_79_2_113:4.5.2.8
	Kernel-5_35-4_79_2_112:4.5.2.8
	Kernel-5_35-4_79_2_98_2_37:4.5.2.8
	Kernel-5_35-4_79_2_98_2_36:4.5.2.8
	Kernel-5_35-4_79_2_98_2_35:4.5.2.8
	Kernel-5_35-4_79_2_98_2_34:4.5.2.8
	Kernel-5_35-4_79_2_98_2_33:4.5.2.8
	Kernel-5_35-4_79_2_98_2_32:4.5.2.8
	Kernel-5_35-4_79_2_98_2_31:4.5.2.8
	Kernel-5_35-4_79_2_98_2_30:4.5.2.8
	Kernel-5_35-4_79_2_98_2_29:4.5.2.8
	Kernel-5_35-4_79_2_98_2_28:4.5.2.8
	Kernel-5_35-4_79_2_98_2_27:4.5.2.8
	Kernel-5_35-4_79_2_98_2_26:4.5.2.8
	Kernel-5_35-4_79_2_111:4.5.2.8
	Kernel-5_35-4_79_2_98_2_25:4.5.2.8
	Kernel-5_35-4_79_2_98_2_24:4.5.2.8
	Kernel-5_35-4_79_2_98_2_23:4.5.2.8
	Kernel-5_35-4_79_2_110:4.5.2.8
	Kernel-5_35-4_79_2_98_2_22:4.5.2.8
	Kernel-5_35-4_79_2_109:4.5.2.8
	Kernel-5_35-4_79_2_98_2_21:4.5.2.8
	Kernel-5_35-4_79_2_98_2_20:4.5.2.8
	Kernel-5_35-4_79_2_108:4.5.2.8
	Kernel-5_35-4_79_2_107:4.5.2.8
	Kernel-5_35-4_79_2_98_2_19:4.5.2.8
	Kernel-5_35-4_79_2_98_2_18:4.5.2.8
	Kernel-5_35-4_79_2_98_2_17:4.5.2.8
	Kernel-5_35-4_79_2_98_2_16:4.5.2.8
	Kernel-5_35-4_79_2_98_2_15:4.5.2.8
	Kernel-5_35-4_79_2_106:4.5.2.8
	Kernel-5_35-4_79_2_105:4.5.2.8
	Kernel-5_35-4_79_2_104:4.5.2.8
	Kernel-5_35-4_79_2_98_2_14:4.5.2.8
	Kernel-5_35-4_79_2_98_2_13:4.5.2.8
	Kernel-5_35-4_79_2_98_2_12:4.5.2.8
	Kernel-5_35-4_79_2_98_2_11:4.5.2.8
	Kernel-5_35-4_79_2_98_2_10:4.5.2.8
	Kernel-5_35-4_79_2_98_2_9:4.5.2.8
	Kernel-5_35-4_79_2_103:4.5.2.8
	Kernel-5_35-4_79_2_102:4.5.2.8
	Kernel-5_35-4_79_2_98_2_8:4.5.2.8
	Kernel-5_35-4_79_2_98_2_7:4.5.2.8
	Kernel-5_35-4_79_2_98_2_6:4.5.2.8
	Kernel-5_35-4_79_2_98_2_5:4.5.2.8
	Kernel-5_35-4_79_2_98_2_4:4.5.2.8
	Kernel-5_35-4_79_2_101:4.5.2.8
	Kernel-5_35-4_79_2_100:4.5.2.8
	Kernel-5_35-4_79_2_99:4.5.2.8
	Kernel-5_35-4_79_2_98_2_3:4.5.2.8
	Kernel-5_35-4_79_2_98_2_2:4.5.2.8
	Kernel-5_35-4_79_2_98_2_1:4.5.2.8
	Cortex:4.5.2.8.0.2
	Cortex_bp:4.5.2.8
	Kernel-5_35-4_79_2_98:4.5.2.8
	Kernel-5_35-4_79_2_97:4.5.2.8
	Kernel-5_35-4_79_2_96:4.5.2.8
	Kernel-5_35-4_79_2_95:4.5.2.8
	Kernel-5_35-4_79_2_94:4.5.2.8
	Kernel-5_35-4_79_2_93:4.5.2.8
	Kernel-5_35-4_79_2_92:4.5.2.8
	Kernel-5_35-4_79_2_91:4.5.2.8
	Kernel-5_35-4_79_2_90:4.5.2.7
	Kernel-5_35-4_79_2_89:4.5.2.7
	Kernel-5_35-4_79_2_88:4.5.2.7
	Kernel-5_35-4_79_2_87:4.5.2.7
	Kernel-5_35-4_79_2_86:4.5.2.7
	Kernel-5_35-4_79_2_85:4.5.2.7
	Kernel-5_35-4_79_2_84:4.5.2.7
	Kernel-5_35-4_79_2_83:4.5.2.7
	Kernel-5_35-4_79_2_82:4.5.2.7
	Kernel-5_35-4_79_2_81:4.5.2.7
	Kernel-5_35-4_79_2_80:4.5.2.7
	Kernel-5_35-4_79_2_79:4.5.2.7
	Kernel-5_35-4_79_2_78:4.5.2.7
	Kernel-5_35-4_79_2_77:4.5.2.7
	RO_5_07:4.5.2.7
	Kernel-5_35-4_79_2_76:4.5.2.7
	Kernel-5_35-4_79_2_75:4.5.2.7
	Kernel-5_35-4_79_2_74:4.5.2.7
	Kernel-5_35-4_79_2_73:4.5.2.7
	Kernel-5_35-4_79_2_72:4.5.2.7
	Kernel-5_35-4_79_2_71:4.5.2.7
	Kernel-5_35-4_79_2_70:4.5.2.7
	Kernel-5_35-4_79_2_69:4.5.2.7
	Kernel-5_35-4_79_2_68:4.5.2.7
	Kernel-5_35-4_79_2_67:4.5.2.7
	Kernel-5_35-4_79_2_66:4.5.2.7
	Kernel-5_35-4_79_2_65:4.5.2.6
	Kernel-5_35-4_79_2_64:4.5.2.6
	Kernel-5_35-4_79_2_63:4.5.2.6
	Kernel-5_35-4_79_2_62:4.5.2.6
	Kernel-5_35-4_79_2_61:4.5.2.6
	Kernel-5_35-4_79_2_59:4.5.2.6
	Kernel-5_35-4_79_2_58:4.5.2.6
	Kernel-5_35-4_79_2_57:4.5.2.6
	Kernel-5_35-4_79_2_56:4.5.2.6
	Kernel-5_35-4_79_2_55:4.5.2.6
	Kernel-5_35-4_79_2_54:4.5.2.6
	Kernel-5_35-4_79_2_53:4.5.2.6
	Kernel-5_35-4_79_2_52:4.5.2.5
	Kernel-5_35-4_79_2_51:4.5.2.5
	Kernel-5_35-4_79_2_50:4.5.2.5
	Kernel-5_35-4_79_2_49:4.5.2.5
	Kernel-5_35-4_79_2_48:4.5.2.5
	Kernel-5_47:4.5
	Kernel-5_46-4_90_2_1:4.5
	nbingham_Kernel_FastNC_dev_bp:4.5
	nbingham_Kernel_FastNC_dev:4.5.0.4
	Kernel-5_46:4.5
	Kernel-5_45:4.5
	Kernel-5_35-4_79_2_47:4.5.2.5
	Kernel-5_35-4_79_2_46:4.5.2.5
	Kernel-5_35-4_79_2_45:4.5.2.5
	Kernel-5_35-4_79_2_44:4.5.2.5
	Kernel-5_35-4_79_2_25_2_2:4.5.2.5
	Kernel-5_35-4_79_2_43:4.5.2.5
	Kernel-5_35-4_79_2_42:4.5.2.5
	Kernel-5_35-4_79_2_41:4.5.2.5
	Kernel-5_35-4_79_2_40:4.5.2.5
	Kernel-5_35-4_79_2_39:4.5.2.5
	Kernel-5_35-4_79_2_38:4.5.2.5
	Kernel-5_35-4_79_2_37:4.5.2.5
	Kernel-5_35-4_79_2_36:4.5.2.5
	Kernel-5_35-4_79_2_35:4.5.2.5
	Kernel-5_35-4_79_2_34:4.5.2.5
	Kernel-5_35-4_79_2_33:4.5.2.5
	Kernel-5_35-4_79_2_32:4.5.2.5
	Kernel-5_44:4.5
	Kernel-5_35-4_79_2_25_2_1:4.5.2.5
	Kernel-5_43:4.5
	Kernel-5_35-4_79_2_31:4.5.2.5
	Kernel-5_35-4_79_2_30:4.5.2.5
	Kernel-5_35-4_79_2_29:4.5.2.5
	Kernel-5_35-4_79_2_28:4.5.2.5
	Kernel-5_35-4_79_2_27:4.5.2.5
	Kernel-5_35-4_79_2_26:4.5.2.5
	Kernel-5_42:4.5
	Kernel-5_41:4.5
	Kernel-5_40:4.5
	Kernel-5_35-4_79_2_25:4.5.2.5
	Kernel-5_35-4_79_2_24:4.5.2.5
	Kernel-5_35-4_79_2_23:4.5.2.5
	Kernel-5_35-4_79_2_22:4.5.2.5
	Kernel-5_35-4_79_2_21:4.5.2.5
	Kernel-5_35-4_79_2_20:4.5.2.5
	Kernel-5_35-4_79_2_19:4.5.2.5
	Kernel-5_35-4_79_2_18:4.5.2.5
	Kernel-5_35-4_79_2_17:4.5.2.4
	Kernel-5_35-4_79_2_16:4.5.2.4
	Kernel-5_35-4_79_2_15:4.5.2.4
	Kernel-5_35-4_79_2_14:4.5.2.4
	Kernel-5_39:4.5
	Kernel-5_13-4_52_2_1:4.4
	Bethany:4.4.0.2
	Kernel-5_38:4.5
	Kernel-5_35-4_79_2_13:4.5.2.4
	Kernel-5_35-4_79_2_12:4.5.2.4
	Kernel-5_35-4_79_2_11:4.5.2.4
	Kernel-5_37:4.5
	Kernel-5_35-4_79_2_10:4.5.2.4
	Kernel-5_35-4_79_2_9:4.5.2.3
	Kernel-5_36:4.5
	Kernel-5_35-4_79_2_8:4.5.2.2
	Kernel-5_35-4_79_2_7:4.5.2.1
	Kernel-5_35-4_79_2_6:4.5.2.1
	Kernel-5_35-4_79_2_5:4.5.2.1
	Kernel-5_35-4_79_2_4:4.5.2.1
	Kernel-5_35-4_79_2_3:4.5.2.1
	Kernel-5_35-4_79_2_2:4.5
	dellis_autobuild_BaseSW:4.5
	Kernel-5_35-4_79_2_1:4.5
	HAL:4.5.0.2
	Kernel-5_35:4.5
	Kernel-5_34:4.5
	Kernel-5_33:4.5
	Kernel-5_32:4.5
	Kernel-5_31:4.5
	Kernel-5_30:4.5
	Kernel-5_29:4.4
	Kernel-5_28:4.4
	Kernel-5_27:4.4
	Kernel-5_26:4.4
	Kernel-5_25:4.4
	Kernel-5_24:4.4
	Kernel-5_23:4.4
	Kernel-5_22:4.4
	sbrodie_sedwards_16Mar2000:4.4
	Kernel-5_21:4.4
	Kernel-5_20:4.4
	Kernel-5_19:4.4
	Kernel-5_18:4.4
	Kernel-5_17:4.4
	Kernel-5_16:4.4
	Kernel-5_15:4.4
	Kernel-5_14:4.4
	Kernel-5_13:4.4
	Kernel-5_12:4.4
	Kernel-5_11:4.4
	Kernel-5_10:4.4
	Kernel-5_09:4.4
	Kernel-5_08:4.4
	Kernel-5_07:4.4
	Kernel-5_06:4.4
	Kernel-5_05:4.4
	Kernel-5_04:4.4
	Kernel-5_03:4.4
	Kernel-5_02:4.4
	Kernel-5_01:4.4
	Kernel-5_00:4.4
	Kernel-4_99:4.4
	Kernel-4_98:4.4
	Kernel-4_97:4.4
	Kernel-4_96:4.4
	Kernel-4_95:4.4
	Kernel-4_94:4.4
	Kernel-4_93:4.4
	Kernel-4_92:4.4
	Kernel-4_91:4.4
	Kernel-4_90:4.4
	dcotton_autobuild_BaseSW:4.5
	Kernel-4_89:4.3
	Kernel-4_88:4.3
	Kernel-4_87:4.3
	Kernel-4_86:4.3
	Kernel-4_85:4.3
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.2.2.1.2.1
	Kernel-4_84:4.3
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.2.2.1.2.1
	Ursula_RiscPC_bp:4.2.2.1
	Kernel-4_83:4.3
	Kernel-4_82:4.3
	Kernel-4_81:4.3
	Kernel-4_80:4.3
	Kernel-4_79:4.3
	Kernel-4_78:4.3
	Kernel-4_77:4.3
	Kernel-4_76:4.3
	Kernel-4_75:4.3
	Kernel-4_74:4.3
	Kernel-4_73:4.3
	Kernel-4_72:4.3
	Kernel-4_71:4.3
	Kernel-4_70:4.3
	Kernel-4_69:4.3
	Kernel-4_68:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2.2.1.2.1
	Ursula_RiscPC:4.2.2.1.0.2
	Kernel-4_63-1_1_2_5:4.1.7.4
	Kernel-4_63-1_1_2_4:4.1.7.4
	Kernel-4_67:4.3
	Kernel-4_66:4.3
	Kernel-4_63-1_1_2_3:4.1.7.4
	Kernel-4_65:4.3
	Ursula_merge:4.2
	Kernel-4_64:4.3
	mstphens_Kernel-3_81:4.2.2.2
	Kernel-4_63-1_1_2_2:4.1.7.4
	nicke_Kernel_4_62:4.1.7.4
	rthornb_UrsulaBuild-19Aug1998:4.2.2.1
	UrsulaBuild_FinalSoftload:4.2.2.1
	rthornb_UrsulaBuild-12Aug1998:4.2.2.1
	aglover_UrsulaBuild-05Aug1998:4.2.2.1
	rthornb_UrsulaBuild-29Jul1998:4.2.2.1
	rthornb_UrsulaBuild-22Jul1998:4.2.2.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.2
	rthornb_UrsulaBuild-15Jul1998:4.2.2.1
	rthornb_UrsulaBuild-07Jul1998:4.2.2.1
	rthornb_UrsulaBuild-17Jun1998:4.2.2.1
	rthornb_UrsulaBuild-03Jun1998:4.2.2.1
	rthornb_UrsulaBuild-27May1998:4.2.2.1
	mstphens_Kernel-3_80:4.2.2.1
	rthornb_UrsulaBuild-21May1998:4.2.2.1
	afrost_Boca-1_2-Beta:4.1.7.3
	rthornb_UrsulaBuild_01May1998:4.2.2.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.11
date	2018.11.07.22.28.13;	author jlee;	state Exp;
branches;
next	4.10;
commitid	Ub9LVqEF46x8X3ZA;

4.10
date	2018.07.14.19.02.27;	author jlee;	state Exp;
branches;
next	4.9;
commitid	DsDtaR4YavfJx8KA;

4.9
date	2016.12.15.18.33.33;	author jlee;	state Exp;
branches;
next	4.8;
commitid	ATZJJqFZmHhMT6yz;

4.8
date	2016.12.15.15.27.03;	author jlee;	state Exp;
branches;
next	4.7;
commitid	SNoEvPlWCrTKR5yz;

4.7
date	2016.06.30.20.59.54;	author jlee;	state Exp;
branches;
next	4.6;
commitid	skOEjp3ipLHx6xcz;

4.6
date	2016.06.30.20.08.20;	author jlee;	state Exp;
branches;
next	4.5;
commitid	IWoXxARWeuLDOwcz;

4.5
date	2000.06.28.16.12.26;	author bavison;	state Exp;
branches
	4.5.2.1;
next	4.4;

4.4
date	99.09.29.17.09.33;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	98.09.30.08.42.57;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.14.07.38;	author nturton;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.41.40;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.5.2.1
date	2000.10.03.12.05.59;	author mstephen;	state Exp;
branches;
next	4.5.2.2;

4.5.2.2
date	2000.10.05.16.37.33;	author mstephen;	state Exp;
branches;
next	4.5.2.3;

4.5.2.3
date	2000.10.10.10.54.18;	author mstephen;	state Exp;
branches;
next	4.5.2.4;

4.5.2.4
date	2000.10.16.11.55.38;	author kbracey;	state Exp;
branches;
next	4.5.2.5;

4.5.2.5
date	2001.03.01.09.49.22;	author mstephen;	state Exp;
branches;
next	4.5.2.6;

4.5.2.6
date	2002.12.18.22.18.33;	author bavison;	state Exp;
branches;
next	4.5.2.7;

4.5.2.7
date	2004.05.06.16.02.05;	author kbracey;	state Exp;
branches;
next	4.5.2.8;

4.5.2.8
date	2005.09.23.23.57.37;	author jballance;	state Exp;
branches;
next	4.5.2.9;

4.5.2.9
date	2012.03.17.17.33.28;	author jlee;	state Exp;
branches;
next	4.5.2.10;
commitid	VTsi1KZmbCAQigXv;

4.5.2.10
date	2013.08.06.22.43.10;	author jlee;	state Exp;
branches;
next	4.5.2.11;
commitid	TOIaeUf2Q4rBIr0x;

4.5.2.11
date	2013.12.15.21.34.13;	author jlee;	state Exp;
branches;
next	4.5.2.12;
commitid	KwuK29hKRyXO7hhx;

4.5.2.12
date	2013.12.17.19.08.57;	author jlee;	state Exp;
branches;
next	4.5.2.13;
commitid	mr92WavK9Mu4gwhx;

4.5.2.13
date	2014.04.16.20.58.28;	author jlee;	state Exp;
branches;
next	;
commitid	NnUb0QqeMdvy0Xwx;

4.2.2.1
date	97.09.09.13.34.47;	author mstphens;	state Exp;
branches
	4.2.2.1.2.1;
next	4.2.2.2;

4.2.2.2
date	98.09.24.13.17.51;	author mstphens;	state Exp;
branches;
next	;

4.2.2.1.2.1
date	98.11.23.14.59.45;	author mstphens;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.41.40;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.03.33;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.13.24;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.04.51;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.12.11.14.01.39;	author nturton;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	98.06.05.09.31.58;	author afrost;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	98.07.21.17.57.50;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.11
log
@Attempt to tidy up substitute screen mode selection logic
Detail:
  Over the years the OS's substitute screen mode selection logic has grown to be a tangled mess, and the logic it does implement isn't always very useful. Additionally, the kernel is structured in such a way that it can be hard for modules to override it.
  This set of changes aims to fix the many of the problems, by doing the following:
  - Moving all substitute mode selection logic out of the core VDU driver code and into a Service_ModeTranslation handler. This means you now only have one place in the kernel to look instead of several, and modules can override the behaviour by claiming/blocking the service call as appropriate.
  - Moving handling of the built-in VIDC lists out of the core VDU driver code and into a Service_ModeExtension handler. This means programs can now inspect these VIDC lists by issuing the right service call (although you are essentially limited to lists which the GraphicsV driver is OK with)
  - Moving *TV interlace & offset adjustment logic into the Service_ModeExtension handler, since they're legacy things which can be handled more cleanly for MDF/EDID (and the old code was poking memory the kernel didn't own)
  - Adding a Service_EnumerateScreenModes implementation, so that if you end up in the desktop with ScreenModes non-functional, the display manager at least has something useful to show you
  - Enhancing the handling of the built-in numbered modes so that they are now available in any colour depth; the Service_ModeExtension handler (and related handlers) treat the builtin VIDC lists as a set of mode timings, not a discrete set of modes
  - Substitute mode selection logic is a complete re-write. Instead of trying a handful of numbered fallback modes, it now tries:
    - Same mode but at higher colour depths
    - Same mode but at lower colour depths
    - Alternate resolutions (half-width mode with no double-pixel if original request was for double-pixel, and default resolution for monitor type)
  - Combined with the logic to allow the builtin VIDC lists to be used at any colour depth, this means that the kernel should now be able to find substitute modes for machines which lack support for <=8bpp modes (e.g. OMAP5)
  - Additionally the mode substitution code will attempt to retain as many properties of the originally requested mode as possible (eigen values, gap mode type, etc.)
  Other improvements:
  - The kernel now actually vets the builtin VIDC lists instead of assuming that they'll work (which also means they'll have the correct ExtraBytes value, where applicable)
  - The kernel now uses GraphicsV 19 (VetMode2) to vet the mode during the mode switch process, using the result to detect where the framebuffer will be placed. This allows for GraphicsV drivers to switch between DA 2 and external framestores on a per-mode basis.
  - The kernel now supports mode selectors which specify LineLength values which are larger than necessary; this will get translated to a suitable ExtraBytes control list item (+ combined with whatever padding the driver indicates is necessary via the VetMode2 result)
  File changes:
  - hdr/KernelWS - Reserve space for a VIDC list, since the Service_ModeExtension implementation typically can't use the built-in list as-is
  - s/Arthur3 - Issue Service_ModeFileChanged when the configured monitor type is changed, so that DisplayManager + friends are aware that the set of available modes has changed
  - s/GetAll - Fiddle with GETs a bit
  - s/MemMap2 - Extra LTORG
  - s/NewIRQs - Small routine to install/uninstall false VSync routine (previously from PushModeInfo, which wasn't really the appropriate place for it)
  - s/Utility - Hook up the extra service call handlers
  - s/vdu/legacymodes - New file containing the new service call implementations, and some related code
  - s/vdu/vdudecl - Move mode workspace definition here, from vdumodes
  - s/vdu/vdudriver - Remove assorted bits of mode substitution code. Plug in new bits for calling GraphicsV 19 during mode set, and deal with ExtraBytes/LineLength during PushModeInfo
  - s/vdu/vdumodes - Move some workspace definitions to s/vdu/vdudecl. Tweak how the builtin VIDC lists are stored.
  - s/vdu/vduswis - Rip out more mode substitution code. Issue Service_ModeFileChanged when monitor type is changed by OS_ScreenMode.
Admin:
  Tested on Raspberry Pi 3, Iyonix, IGEPv5


Version 6.14. Tagged as 'Kernel-6_14'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > $.Kernel.Source.VduModes
;

; general purpose mode macros

; mjs Kernel/HAL split
;
; BigVIDCTable is now in hardware independent format, ie. a VIDC list type 3
;
; Macro VIDC_List10 removed - hardware specific, and very old anyway! (VIDC1 is pre Medusa)
; Macro VIDC_List20 removed - hardware specific, not needed in HAL either
; Macro VIDC_ListT3 newly defined

        MACRO
$label  VIDC_List $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp,$int
$label  VIDC_ListT3 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp,$int
        MEND


; Macro VIDC_ListT3 - for hardware independent table (using 'VIDC' list type 3 format, see PRM 5a-125)
;
        MACRO
$label  VIDC_ListT3 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp,$int

        LCLA    sp
        LCLA    dwidth
        GBLA    framerate
        LCLA    framepixels

 [ "$sp"=""
sp      SETA    0                               ; normal sync polarity
 |
        ASSERT $sp<=3
sp      SETA    $sp
 ]

; just to check width is whole number of words (to suit rendering code)
dwidth  SETA    $hdisp :SHL: $lbpp
        ASSERT  (dwidth :AND: 31) = 0

framepixels SETA ($hsync+$hbpch+$hlbdr+$hdisp+$hrbdr+$hfpch)*($vsync+$vbpch+$vlbdr+$vdisp+$vrbdr+$vfpch)
framerate SETA  ($pixrate*1000+framepixels/2)/framepixels

F_$label *      framerate       ; set up frame rate symbol

;
        &       framerate        ; stash framerate before VIDC list, F_ labels are inaccurate because different monitor types use different timings
$label
        &       3                ; format (type 3)
        &       $lbpp            ; log2 bits per pixel
; Horizontal (in pixels)
        &       $hsync           ; sync width
        &       $hbpch           ; back porch
        &       $hlbdr           ; left border
        &       $hdisp           ; display size
        &       $hrbdr           ; right border
        &       $hfpch           ; front porch
; Vertical (in rasters)
        &       $vsync           ; sync width
        &       $vbpch           ; back porch
        &       $vlbdr           ; top border
        &       $vdisp           ; display size
        &       $vrbdr           ; bottom border
        &       $vfpch           ; front porch
;
        &       $pixrate         ; pixel rate (kHz)
        &       sp               ; sync polarity
 [ "$int"<>""
        &       ControlList_Interlaced
        &       1
 ]
        &       -1               ; terminator (no video control parameters)

        MEND   ; MACRO VIDC_ListT3



NumMonitorTypes *       9

; These macro are used by various routines in the kernel to check for a valid mode number
; MUST be kept up-to-date with the list of invalid modes between 0 and maxmode

        MACRO
        BranchIfKnownMode $reg, $address
        CMP     $reg, #NumModes
        BCC     $address                ; then branch
        MEND

        MACRO
        BranchIfNotKnownMode $reg, $address
        CMP     $reg, #NumModes
        BCS     $address                ; branch if *NOT* known
        MEND


BigVIDCTable

;
;       monitor type 0, 50Hz TV
;
 [ Only13500kHzTV
        &       VLN_0  - BigVIDCTable   ; 0
        &       -1                      ; 1
        &       -1                      ; 2
        &       VLN_3  - BigVIDCTable   ; 3
        &       VLN_4  - BigVIDCTable   ; 4
        &       -1                      ; 5
        &       -1                      ; 6
        &       -1                      ; 7
        &       VLN_8  - BigVIDCTable   ; 8
        &       -1                      ; 9
        &       -1                      ; 10
        &       VLN_11 - BigVIDCTable   ; 11
        &       VLN_12 - BigVIDCTable   ; 12
        &       -1                      ; 13
        &       VLN_14 - BigVIDCTable   ; 14
        &       VLN_15 - BigVIDCTable   ; 15
        &       -1                      ; 16
        &       -1                      ; 17
   [ HWInterlace
        &       VLN_18 - BigVIDCTable   ; 18
        &       VLN_19 - BigVIDCTable   ; 19
        &       VLN_20 - BigVIDCTable   ; 20
        &       VLN_21 - BigVIDCTable   ; 21
   |
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
   ]
        &       -1                      ; 22
        &       -1                      ; 23
        &       -1                      ; 24
   [ HWInterlace
        &       VLN_25 - BigVIDCTable   ; 25
        &       VLN_26 - BigVIDCTable   ; 26
        &       VLN_27 - BigVIDCTable   ; 27
        &       VLN_28 - BigVIDCTable   ; 28
   |
        &       -1                      ; 25
        &       -1                      ; 26
        &       -1                      ; 27
        &       -1                      ; 28
   ]
        &       -1                      ; 29
        &       -1                      ; 30
        &       -1                      ; 31
        &       -1                      ; 32
        &       -1                      ; 33
        &       -1                      ; 34
        &       -1                      ; 35
        &       -1                      ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &       -1                      ; 41
        &       -1                      ; 42
        &       -1                      ; 43
        &       -1                      ; 44
        &       -1                      ; 45
        &       -1                      ; 46
        &       -1                      ; 47
        &       -1                      ; 48
        &       -1                      ; 49
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53
 |
        &       VLN_0  - BigVIDCTable   ; 0
        &       VLN_1  - BigVIDCTable   ; 1
        &       VLN_2  - BigVIDCTable   ; 2
        &       VLN_3  - BigVIDCTable   ; 3
        &       VLN_4  - BigVIDCTable   ; 4
        &       VLN_5  - BigVIDCTable   ; 5
        &       VLN_6  - BigVIDCTable   ; 6
 [ HiResTTX
        &       -1                      ; 7
 |
        &       VLN_7  - BigVIDCTable   ; 7
 ]
        &       VLN_8  - BigVIDCTable   ; 8
        &       VLN_9  - BigVIDCTable   ; 9
        &       VLN_10 - BigVIDCTable   ; 10
        &       VLN_11 - BigVIDCTable   ; 11
        &       VLN_12 - BigVIDCTable   ; 12
        &       VLN_13 - BigVIDCTable   ; 13
        &       VLN_14 - BigVIDCTable   ; 14
        &       VLN_15 - BigVIDCTable   ; 15
        &       VLN_16 - BigVIDCTable   ; 16
        &       VLN_17 - BigVIDCTable   ; 17
   [ HWInterlace
        &       VLN_18 - BigVIDCTable   ; 18
        &       VLN_19 - BigVIDCTable   ; 19
        &       VLN_20 - BigVIDCTable   ; 20
        &       VLN_21 - BigVIDCTable   ; 21
   |
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
   ]
        &       VLN_22 - BigVIDCTable   ; 22
        &       -1                      ; 23
        &       VLN_24 - BigVIDCTable   ; 24
   [ HWInterlace
        &       VLN_25 - BigVIDCTable   ; 25
        &       VLN_26 - BigVIDCTable   ; 26
        &       VLN_27 - BigVIDCTable   ; 27
        &       VLN_28 - BigVIDCTable   ; 28
   |
        &       -1                      ; 25
        &       -1                      ; 26
        &       -1                      ; 27
        &       -1                      ; 28
   ]
        &       -1                      ; 29
        &       -1                      ; 30
        &       -1                      ; 31
        &       -1                      ; 32
        &       VLN_33 - BigVIDCTable   ; 33
        &       VLN_34 - BigVIDCTable   ; 34
        &       VLN_35 - BigVIDCTable   ; 35
        &       VLN_36 - BigVIDCTable   ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &       -1                      ; 41
        &       -1                      ; 42
        &       -1                      ; 43
        &       -1                      ; 44
        &       -1                      ; 45
        &       -1                      ; 46
        &       -1                      ; 47
        &       -1                      ; 48
        &       -1                      ; 49
        &       VLN_50 - BigVIDCTable   ; 50
        &       VLN_51 - BigVIDCTable   ; 51
        &       VLN_52 - BigVIDCTable   ; 52
        &       VLN_53 - BigVIDCTable   ; 53
 ]

;
;       monitor type 1, multiscan
;
        ASSERT  (.-BigVIDCTable)=((NumModes*1):SHL:2)

        &       VLM_0  - BigVIDCTable   ; 0
        &       VLM_1  - BigVIDCTable   ; 1
        &       VLM_2  - BigVIDCTable   ; 2
        &       VLM_3  - BigVIDCTable   ; 3
        &       VLM_4  - BigVIDCTable   ; 4
        &       VLM_5  - BigVIDCTable   ; 5
        &       VLM_6  - BigVIDCTable   ; 6
        &       VLM_7  - BigVIDCTable   ; 7
        &       VLM_8  - BigVIDCTable   ; 8
        &       VLM_9  - BigVIDCTable   ; 9
        &       VLM_10 - BigVIDCTable   ; 10
        &       VLM_11 - BigVIDCTable   ; 11
        &       VLM_12 - BigVIDCTable   ; 12
        &       VLM_13 - BigVIDCTable   ; 13
        &       VLM_14 - BigVIDCTable   ; 14
        &       VLM_15 - BigVIDCTable   ; 15
        &       VLM_16 - BigVIDCTable   ; 16
        &       VLM_17 - BigVIDCTable   ; 17
        &       VLM_18 - BigVIDCTable   ; 18
        &       VLM_19 - BigVIDCTable   ; 19
        &       VLM_20 - BigVIDCTable   ; 20
        &       VLM_21 - BigVIDCTable   ; 21
        &       VLM_22 - BigVIDCTable   ; 22
        &       -1                      ; 23
        &       VLM_24 - BigVIDCTable   ; 24
        &       VLM_25 - BigVIDCTable   ; 25
        &       VLM_26 - BigVIDCTable   ; 26
        &       VLM_27 - BigVIDCTable   ; 27
        &       VLM_28 - BigVIDCTable   ; 28
        &       VLM_29 - BigVIDCTable   ; 29
        &       VLM_30 - BigVIDCTable   ; 30
        &       VLM_31 - BigVIDCTable   ; 31
        &       VLM_32 - BigVIDCTable   ; 32
        &       VLM_33 - BigVIDCTable   ; 33 Ovscn
        &       VLM_34 - BigVIDCTable   ; 34
        &       VLM_35 - BigVIDCTable   ; 35
        &       VLM_36 - BigVIDCTable   ; 36
        &       VLM_37 - BigVIDCTable   ; 37 dtp
        &       VLM_38 - BigVIDCTable   ; 38
        &       VLM_39 - BigVIDCTable   ; 39
        &       VLM_40 - BigVIDCTable   ; 40
        &       VLM_41 - BigVIDCTable   ; 41 EGA
        &       VLM_42 - BigVIDCTable   ; 42
        &       VLM_43 - BigVIDCTable   ; 43
        &       VLM_44 - BigVIDCTable   ; 44 CGA
        &       VLM_45 - BigVIDCTable   ; 45
        &       VLM_46 - BigVIDCTable   ; 46
        &       VLM_47 - BigVIDCTable   ; 47 PCSoft
        &       VLM_48 - BigVIDCTable   ; 48 Games mode
        &       VLM_49 - BigVIDCTable   ; 49 Games mode
        &       VLM_50 - BigVIDCTable   ; 50
        &       VLM_51 - BigVIDCTable   ; 51
        &       VLM_52 - BigVIDCTable   ; 52
        &       VLM_53 - BigVIDCTable   ; 53


;
;       monitor type 2, HiRes
;
        ASSERT  (.-BigVIDCTable)=((NumModes*2):SHL:2)

        &       -1                      ; 0
        &       -1                      ; 1
        &       -1                      ; 2
        &       -1                      ; 3
        &       -1                      ; 4
        &       -1                      ; 5
        &       -1                      ; 6
        &       -1                      ; 7
        &       -1                      ; 8
        &       -1                      ; 9
        &       -1                      ; 10
        &       -1                      ; 11
        &       -1                      ; 12
        &       -1                      ; 13
        &       -1                      ; 14
        &       -1                      ; 15
        &       -1                      ; 16
        &       -1                      ; 17
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
        &       -1                      ; 22
        &       VLH_23 - BigVIDCTable   ; 23
        &       -1                      ; 24
        &       -1                      ; 25
        &       -1                      ; 26
        &       -1                      ; 27
        &       -1                      ; 28
        &       -1                      ; 29
        &       -1                      ; 30
        &       -1                      ; 31
        &       -1                      ; 32
        &       -1                      ; 33
        &       -1                      ; 34
        &       -1                      ; 35
        &       -1                      ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &       -1                      ; 41
        &       -1                      ; 42
        &       -1                      ; 43
        &       -1                      ; 44
        &       -1                      ; 45
        &       -1                      ; 46
        &       -1                      ; 47
        &       -1                      ; 48
        &       -1                      ; 49
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53

;
;       monitor type 3, VGA
;
        ASSERT  (.-BigVIDCTable)=((NumModes*3):SHL:2)

        &       VgaX_0  - BigVIDCTable  ; 0
        &       VgaX_1  - BigVIDCTable  ; 1
        &       VgaX_2  - BigVIDCTable  ; 2
        &       VgaX_3  - BigVIDCTable  ; 3
        &       VgaX_4  - BigVIDCTable  ; 4
        &       VgaX_5  - BigVIDCTable  ; 5
        &       VgaX_6  - BigVIDCTable  ; 6
        &       VgaX_7  - BigVIDCTable  ; 7
        &       VgaX_8  - BigVIDCTable  ; 8
        &       VgaX_9  - BigVIDCTable  ; 9
        &       VgaX_10 - BigVIDCTable  ; 10
        &       VgaX_11 - BigVIDCTable  ; 11
        &       VgaX_12 - BigVIDCTable  ; 12
        &       VgaX_13 - BigVIDCTable  ; 13
        &       VgaX_14 - BigVIDCTable  ; 14
        &       VgaX_15 - BigVIDCTable  ; 15
        &       -1                      ; 16
        &       -1                      ; 17
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
        &       -1                      ; 22
        &       -1                      ; 23
        &       -1                      ; 24
        &       VLM_25 - BigVIDCTable   ; 25
        &       VLM_26 - BigVIDCTable   ; 26
        &       VLM_27 - BigVIDCTable   ; 27
        &       VLM_28 - BigVIDCTable   ; 28
        &       -1                      ; 29
        &       -1                      ; 30
        &       -1                      ; 31
        &       -1                      ; 32
        &       -1                      ; 33
        &       -1                      ; 34
        &       -1                      ; 35
        &       -1                      ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &      VgaX_41 - BigVIDCTable   ; 41 EGA
        &      VgaX_42 - BigVIDCTable   ; 42
        &      VgaX_43 - BigVIDCTable   ; 43
        &      VgaX_44 - BigVIDCTable   ; 44 CGA
        &      VgaX_45 - BigVIDCTable   ; 45
        &      VgaX_46 - BigVIDCTable   ; 46
        &       VLM_47 - BigVIDCTable   ; 47 PCSoft
        &       VLM_48 - BigVIDCTable   ; 48 Games mode
        &       VLM_49 - BigVIDCTable   ; 49 Games mode
        &       VgaX_50 - BigVIDCTable  ; 50
        &       VgaX_51 - BigVIDCTable  ; 51
        &       VgaX_52 - BigVIDCTable  ; 52
        &       VgaX_53 - BigVIDCTable  ; 53

;
;       monitor type 4, SVGA
;
        ASSERT  (.-BigVIDCTable)=((NumModes*4):SHL:2)

        &       VgaX_0  - BigVIDCTable  ; 0
        &       VgaX_1  - BigVIDCTable  ; 1
        &       VgaX_2  - BigVIDCTable  ; 2
        &       VgaX_3  - BigVIDCTable  ; 3
        &       VgaX_4  - BigVIDCTable  ; 4
        &       VgaX_5  - BigVIDCTable  ; 5
        &       VgaX_6  - BigVIDCTable  ; 6
        &       VgaX_7  - BigVIDCTable  ; 7
        &       VgaX_8  - BigVIDCTable  ; 8
        &       VgaX_9  - BigVIDCTable  ; 9
        &       VgaX_10 - BigVIDCTable  ; 10
        &       VgaX_11 - BigVIDCTable  ; 11
        &       VgaX_12 - BigVIDCTable  ; 12
        &       VgaX_13 - BigVIDCTable  ; 13
        &       VgaX_14 - BigVIDCTable  ; 14
        &       VgaX_15 - BigVIDCTable  ; 15
        &       -1                      ; 16
        &       -1                      ; 17
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
        &       -1                      ; 22
        &       -1                      ; 23
        &       -1                      ; 24
        &       VLM_25 - BigVIDCTable   ; 25
        &       VLM_26 - BigVIDCTable   ; 26
        &       VLM_27 - BigVIDCTable   ; 27
        &       VLM_28 - BigVIDCTable   ; 28
        &       VLM_29 - BigVIDCTable   ; 29
        &       VLM_30 - BigVIDCTable   ; 30
        &       VLM_31 - BigVIDCTable   ; 31
        &       VLM_32 - BigVIDCTable   ; 32
        &       -1                      ; 33
        &       -1                      ; 34
        &       -1                      ; 35
        &       -1                      ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &      VgaX_41 - BigVIDCTable   ; 41 EGA
        &      VgaX_42 - BigVIDCTable   ; 42
        &      VgaX_43 - BigVIDCTable   ; 43
        &      VgaX_44 - BigVIDCTable   ; 44 CGA
        &      VgaX_45 - BigVIDCTable   ; 45
        &      VgaX_46 - BigVIDCTable   ; 46
        &       VLM_47 - BigVIDCTable   ; 47 PCSoft
        &       VLM_48 - BigVIDCTable   ; 48 Games mode
        &       VLM_49 - BigVIDCTable   ; 49 Games mode
        &       VgaX_50 - BigVIDCTable  ; 50
        &       VgaX_51 - BigVIDCTable  ; 51
        &       VgaX_52 - BigVIDCTable  ; 52
        &       VgaX_53 - BigVIDCTable  ; 53

;
;       monitor type 5, LCD
;
        ASSERT  (.-BigVIDCTable)=((NumModes*5):SHL:2)

        &       -1                      ; 0
        &       -1                      ; 1
        &       -1                      ; 2
        &       -1                      ; 3
        &       -1                      ; 4
        &       -1                      ; 5
        &       -1                      ; 6
        &       -1                      ; 7
        &       -1                      ; 8
        &       -1                      ; 9
        &       -1                      ; 10
        &       -1                      ; 11
        &       -1                      ; 12
        &       -1                      ; 13
        &       -1                      ; 14
        &       -1                      ; 15
        &       -1                      ; 16
        &       -1                      ; 17
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
        &       -1                      ; 22
        &       -1                      ; 23
        &       -1                      ; 24
        &       LCD_25 - BigVIDCTable   ; 25
        &       LCD_26 - BigVIDCTable   ; 26
        &       LCD_27 - BigVIDCTable   ; 27
        &       LCD_28 - BigVIDCTable   ; 28
        &       -1                      ; 29
        &       -1                      ; 30
        &       -1                      ; 31
        &       -1                      ; 32
        &       -1                      ; 33
        &       -1                      ; 34
        &       -1                      ; 35
        &       -1                      ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &       -1                      ; 41
        &       -1                      ; 42
        &       -1                      ; 43
        &       -1                      ; 44
        &       -1                      ; 45
        &       -1                      ; 46
        &       -1                      ; 47
        &       -1                      ; 48
        &       -1                      ; 49
        &       LCD_50 - BigVIDCTable   ; 50
        &       LCD_51 - BigVIDCTable   ; 51
        &       LCD_52 - BigVIDCTable   ; 52
        &       LCD_53 - BigVIDCTable   ; 53

;
;       monitor type 6, reserved?
;
        ASSERT  (.-BigVIDCTable)=((NumModes*6):SHL:2)

        &       -1                      ; 0
        &       -1                      ; 1
        &       -1                      ; 2
        &       -1                      ; 3
        &       -1                      ; 4
        &       -1                      ; 5
        &       -1                      ; 6
        &       -1                      ; 7
        &       -1                      ; 8
        &       -1                      ; 9
        &       -1                      ; 10
        &       -1                      ; 11
        &       -1                      ; 12
        &       -1                      ; 13
        &       -1                      ; 14
        &       -1                      ; 15
        &       -1                      ; 16
        &       -1                      ; 17
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
        &       -1                      ; 22
        &       -1                      ; 23
        &       -1                      ; 24
        &       -1                      ; 25
        &       -1                      ; 26
        &       -1                      ; 27
        &       -1                      ; 28
        &       -1                      ; 29
        &       -1                      ; 30
        &       -1                      ; 31
        &       -1                      ; 32
        &       -1                      ; 33
        &       -1                      ; 34
        &       -1                      ; 35
        &       -1                      ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &       -1                      ; 41
        &       -1                      ; 42
        &       -1                      ; 43
        &       -1                      ; 44
        &       -1                      ; 45
        &       -1                      ; 46
        &       -1                      ; 47
        &       -1                      ; 48
        &       -1                      ; 49
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53

;
;       monitor type 7, file
;
        ASSERT  (.-BigVIDCTable)=((NumModes*7):SHL:2)

        &       -1                      ; 0
        &       -1                      ; 1
        &       -1                      ; 2
        &       -1                      ; 3
        &       -1                      ; 4
        &       -1                      ; 5
        &       -1                      ; 6
        &       -1                      ; 7
        &       -1                      ; 8
        &       -1                      ; 9
        &       -1                      ; 10
        &       -1                      ; 11
        &       -1                      ; 12
        &       -1                      ; 13
        &       -1                      ; 14
        &       -1                      ; 15
        &       -1                      ; 16
        &       -1                      ; 17
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
        &       -1                      ; 22
        &       -1                      ; 23
        &       -1                      ; 24
        &       -1                      ; 25
        &       -1                      ; 26
        &       -1                      ; 27
        &       -1                      ; 28
        &       -1                      ; 29
        &       -1                      ; 30
        &       -1                      ; 31
        &       -1                      ; 32
        &       -1                      ; 33
        &       -1                      ; 34
        &       -1                      ; 35
        &       -1                      ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &       -1                      ; 41
        &       -1                      ; 42
        &       -1                      ; 43
        &       -1                      ; 44
        &       -1                      ; 45
        &       -1                      ; 46
        &       -1                      ; 47
        &       -1                      ; 48
        &       -1                      ; 49
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53

;
;       monitor type 8, 60Hz TV
;
        ASSERT  (.-BigVIDCTable)=((NumModes*8):SHL:2)

        &       -1                      ; 0
        &       -1                      ; 1
        &       -1                      ; 2
        &       -1                      ; 3
        &       -1                      ; 4
        &       -1                      ; 5
        &       -1                      ; 6
        &       -1                      ; 7
        &       -1                      ; 8
        &       -1                      ; 9
        &       -1                      ; 10
        &       -1                      ; 11
        &       -1                      ; 12
        &       -1                      ; 13
        &       -1                      ; 14
        &       -1                      ; 15
        &       -1                      ; 16
        &       -1                      ; 17
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
        &       -1                      ; 22
        &       -1                      ; 23
        &       -1                      ; 24
        &       -1                      ; 25
        &       -1                      ; 26
        &       -1                      ; 27
        &       -1                      ; 28
        &       -1                      ; 29
        &       -1                      ; 30
        &       -1                      ; 31
        &       -1                      ; 32
        &       -1                      ; 33
        &       -1                      ; 34
        &       -1                      ; 35
        &       -1                      ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &       -1                      ; 41
        &       -1                      ; 42
        &       -1                      ; 43
        &       VLM_44 - BigVIDCTable   ; 44 CGA
        &       VLM_45 - BigVIDCTable   ; 45
        &       VLM_46 - BigVIDCTable   ; 46
        &       -1                      ; 47
        &       -1                      ; 48
        &       -1                      ; 49
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53

        ASSERT  (.-BigVIDCTable)=((NumModes*NumMonitorTypes):SHL:2)

 ; Now supply an alternate 13.5MHz-based (wide)
 [ Only13500kHzTV
VLN_0   VIDC_List 0, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 0
F_VLN_1 * 50
F_VLN_2 * 50
VLN_3   VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,19,250,19, 2,13500,0         ; MODE 3
VLN_4   VIDC_List 0, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 4
F_VLN_5 * 50
F_VLN_6 * 50
F_VLN_7 * 50
VLN_8   VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 8
F_VLN_9 * 50
F_VLN_10 * 50
VLN_11  VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,19,250,19, 2,13500,0         ; MODE 11
VLN_12  VIDC_List 2, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 12
F_VLN_13 * 50
VLN_14  VIDC_List 2, 64, 62, 40, 640, 40, 18, 3,19,19,250,19, 2,13500,0         ; MODE 14
VLN_15  VIDC_List 3, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 15
F_VLN_16 * 50
F_VLN_17 * 50
   [ HWInterlace
VLN_18  VIDC_List 0, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0,int     ; MODE 18
VLN_19  VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0,int     ; MODE 19
VLN_20  VIDC_List 2, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0,int     ; MODE 20
VLN_21  VIDC_List 3, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0,int     ; MODE 21
   ]
F_VLN_22 * 50
F_VLN_24 * 50
   [ HWInterlace
VLN_25  VIDC_List 0, 64, 62, 40, 640, 40, 18, 3,19,24,240,24, 2,13500,0,int     ; MODE 25
VLN_26  VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,24,240,24, 2,13500,0,int     ; MODE 26
VLN_27  VIDC_List 2, 64, 62, 40, 640, 40, 18, 3,19,24,240,24, 2,13500,0,int     ; MODE 27
VLN_28  VIDC_List 3, 64, 62, 40, 640, 40, 18, 3,19,24,240,24, 2,13500,0,int     ; MODE 28
   ]
F_VLN_33 * 50
F_VLN_34 * 50
F_VLN_35 * 50
F_VLN_36 * 50
 |
VLN_0   VIDC_List 0, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0         ; MODE 0
VLN_1   VIDC_List 1, 38, 44, 48, 320, 48, 14, 3,19,16,256,16, 2, 8000,0         ; MODE 1
VLN_2   VIDC_List 2, 38, 44, 48, 320, 48, 14, 3,19,16,256,16, 2, 8000,0         ; MODE 2
VLN_3   VIDC_List 1, 76, 88, 96, 640, 96, 28, 3,19,19,250,19, 2,16000,0         ; MODE 3
VLN_4   VIDC_List 0, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0         ; MODE 4
VLN_5   VIDC_List 1, 38, 44, 48, 320, 48, 14, 3,19,16,256,16, 2, 8000,0         ; MODE 5
VLN_6   VIDC_List 1, 38, 44, 48, 320, 48, 14, 3,19,19,250,19, 2, 8000,0         ; MODE 6
   [ :LNOT: HiResTTX
VLN_7   VIDC_List 2, 38, 44, 48, 320, 48, 14, 3,19,19,250,19, 2, 8000,0         ; MODE 7
   ]
VLN_8   VIDC_List 1, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0         ; MODE 8
VLN_9   VIDC_List 2, 38, 44, 48, 320, 48, 14, 3,19,16,256,16, 2, 8000,0         ; MODE 9
VLN_10  VIDC_List 3, 38, 44, 48, 320, 48, 14, 3,19,16,256,16, 2, 8000,0         ; MODE 10
VLN_11  VIDC_List 1, 76, 88, 96, 640, 96, 28, 3,19,19,250,19, 2,16000,0         ; MODE 11
VLN_12  VIDC_List 2, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0         ; MODE 12
VLN_13  VIDC_List 3, 38, 44, 48, 320, 48, 14, 3,19,16,256,16, 2, 8000,0         ; MODE 13
VLN_14  VIDC_List 2, 76, 88, 96, 640, 96, 28, 3,19,19,250,19, 2,16000,0         ; MODE 14
VLN_15  VIDC_List 3, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0         ; MODE 15
VLN_16  VIDC_List 2,114,132, 96,1056, 96, 42, 3,19,16,256,16, 2,24000,0         ; MODE 16
VLN_17  VIDC_List 2,114,132, 96,1056, 96, 42, 3,19,19,250,19, 2,24000,0         ; MODE 17
   [ HWInterlace
VLN_18  VIDC_List 0, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0,int     ; MODE 18
VLN_19  VIDC_List 1, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0,int     ; MODE 19
VLN_20  VIDC_List 2, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0,int     ; MODE 20
VLN_21  VIDC_List 3, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0,int     ; MODE 21
   ]
VLN_22  VIDC_List 2, 76,120,  0, 768,  0, 60, 3,19, 0,288, 0, 2,16000,0         ; MODE 22
VLN_24  VIDC_List 3,114,132, 96,1056, 96, 42, 3,19,16,256,16, 2,24000,0         ; MODE 24
   [ HWInterlace
VLN_25  VIDC_List 0, 76, 88, 96, 640, 96, 28, 3,19,24,240,24, 2,16000,0,int     ; MODE 25
VLN_26  VIDC_List 1, 76, 88, 96, 640, 96, 28, 3,19,24,240,24, 2,16000,0,int     ; MODE 26
VLN_27  VIDC_List 2, 76, 88, 96, 640, 96, 28, 3,19,24,240,24, 2,16000,0,int     ; MODE 27
VLN_28  VIDC_List 3, 76, 88, 96, 640, 96, 28, 3,19,24,240,24, 2,16000,0,int     ; MODE 28
   ]
VLN_33  VIDC_List 0, 76,120,  0, 768,  0, 60, 3,19, 0,288, 0, 2,16000,0         ; MODE 33
VLN_34  VIDC_List 1, 76,120,  0, 768,  0, 60, 3,19, 0,288, 0, 2,16000,0         ; MODE 34
VLN_35  VIDC_List 2, 76,120,  0, 768,  0, 60, 3,19, 0,288, 0, 2,16000,0         ; MODE 35
VLN_36  VIDC_List 3, 76,120,  0, 768,  0, 60, 3,19, 0,288, 0, 2,16000,0         ; MODE 36
VLN_50  VIDC_List 0, 38, 44, 48, 320, 48, 14, 3,19,24,240,24, 2, 8000,0         ; MODE 50
VLN_51  VIDC_List 1, 38, 44, 48, 320, 48, 14, 3,19,24,240,24, 2, 8000,0         ; MODE 51
VLN_52  VIDC_List 2, 38, 44, 48, 320, 48, 14, 3,19,24,240,24, 2, 8000,0         ; MODE 52
VLN_53  VIDC_List 3, 38, 44, 48, 320, 48, 14, 3,19,24,240,24, 2, 8000,0         ; MODE 53
 ]

VLM_0   VIDC_List 0, 72, 62, 88, 640, 88, 74, 3,16,17,256,17, 3,16000,0         ; MODE 0
VLM_1   VIDC_List 1, 36, 30, 44, 320, 44, 38, 3,16,17,256,17, 3, 8000,0         ; MODE 1
VLM_2   VIDC_List 2, 36, 30, 44, 320, 44, 38, 3,16,17,256,17, 3, 8000,0         ; MODE 2
VLM_3   VIDC_List 1, 72, 62, 88, 640, 88, 74, 3,16,20,250,20, 3,16000,0         ; MODE 3
VLM_4   VIDC_List 0, 72, 62, 88, 640, 88, 74, 3,16,17,256,17, 3,16000,0         ; MODE 4
VLM_5   VIDC_List 1, 36, 30, 44, 320, 44, 38, 3,16,17,256,17, 3, 8000,0         ; MODE 5
VLM_6   VIDC_List 1, 36, 30, 44, 320, 44, 38, 3,16,20,250,20, 3, 8000,0         ; MODE 6
 [ TTX256
 ASSERT HiResTTX
VLM_7   VIDC_List 3, 56,112,  0, 640,  0, 88, 3,18, 6,500, 6, 1,24000,0         ; MODE 7
 |
 [ HiResTTX
VLM_7   VIDC_List 2, 56,112,  0, 640,  0, 88, 3,18, 6,500, 6, 1,24000,0         ; MODE 7
 |
VLM_7   VIDC_List 2, 36, 30, 44, 320, 44, 38, 3,16,20,250,20, 3, 8000,0         ; MODE 7
 ]
 ]
VLM_8   VIDC_List 1, 72, 62, 88, 640, 88, 74, 3,16,17,256,17, 3,16000,0         ; MODE 8
VLM_9   VIDC_List 2, 36, 30, 44, 320, 44, 38, 3,16,17,256,17, 3, 8000,0         ; MODE 9
VLM_10  VIDC_List 3, 36, 30, 44, 320, 44, 38, 3,16,17,256,17, 3, 8000,0         ; MODE 10
VLM_11  VIDC_List 1, 72, 62, 88, 640, 88, 74, 3,16,20,250,20, 3,16000,0         ; MODE 11
VLM_12  VIDC_List 2, 72, 62, 88, 640, 88, 74, 3,16,17,256,17, 3,16000,0         ; MODE 12
VLM_13  VIDC_List 3, 36, 30, 44, 320, 44, 38, 3,16,17,256,17, 3, 8000,0         ; MODE 13
VLM_14  VIDC_List 2, 72, 62, 88, 640, 88, 74, 3,16,20,250,20, 3,16000,0         ; MODE 14
VLM_15  VIDC_List 3, 72, 62, 88, 640, 88, 74, 3,16,17,256,17, 3,16000,0         ; MODE 15
VLM_16  VIDC_List 2,108, 72,106,1056,106, 88, 3,16,17,256,17, 3,24000,0         ; MODE 16
VLM_17  VIDC_List 2,108, 72,106,1056,106, 88, 3,16,20,250,20, 3,24000,0         ; MODE 17
VLM_18  VIDC_List 0, 56,112,  0, 640,  0, 88, 3,18, 0,512, 0, 1,24000,0         ; MODE 18
VLM_19  VIDC_List 1, 56,112,  0, 640,  0, 88, 3,18, 0,512, 0, 1,24000,0         ; MODE 19
VLM_20  VIDC_List 2, 56,112,  0, 640,  0, 88, 3,18, 0,512, 0, 1,24000,0         ; MODE 20
VLM_21  VIDC_List 3, 56,112,  0, 640,  0, 88, 3,18, 0,512, 0, 1,24000,0         ; MODE 21
VLM_22  VIDC_List 2, 76, 82,  0, 768,  0, 98, 3,19, 0,288, 0, 2,16000,0         ; MODE 22
VLM_24  VIDC_List 3,108, 72,106,1056,106, 88, 3,16,17,256,17, 3,24000,0         ; MODE 24
VLM_25  VIDC_List 0, 96, 46,  0, 640,  0, 18, 2,32, 0,480, 0,11,25175,3         ; MODE 25
VLM_26  VIDC_List 1, 96, 46,  0, 640,  0, 18, 2,32, 0,480, 0,11,25175,3         ; MODE 26
VLM_27  VIDC_List 2, 96, 46,  0, 640,  0, 18, 2,32, 0,480, 0,11,25175,3         ; MODE 27
VLM_28  VIDC_List 3, 96, 46,  0, 640,  0, 18, 2,32, 0,480, 0,11,25175,3         ; MODE 28
VLM_29  VIDC_List 0, 72,128,  0, 800,  0, 24, 2,22, 0,600, 0, 1,36000,0         ; MODE 29
VLM_30  VIDC_List 1, 72,128,  0, 800,  0, 24, 2,22, 0,600, 0, 1,36000,0         ; MODE 30
VLM_31  VIDC_List 2, 72,128,  0, 800,  0, 24, 2,22, 0,600, 0, 1,36000,0         ; MODE 31

VLM_33  VIDC_List 0, 76,82,  0, 768,  0, 98, 3,19, 0,288, 0, 2,16000,0         ; MODE 33
VLM_34  VIDC_List 1, 76,82,  0, 768,  0, 98, 3,19, 0,288, 0, 2,16000,0         ; MODE 34
VLM_35  VIDC_List 2, 76,82,  0, 768,  0, 98, 3,19, 0,288, 0, 2,16000,0         ; MODE 35
VLM_36  VIDC_List 3, 76,82,  0, 768,  0, 98, 3,19, 0,288, 0, 2,16000,0         ; MODE 36

VLM_37  VIDC_List 0,118, 58,  0, 896,  0, 28, 3, 9, 0,352, 0, 0,24000,2         ; DTP 896x352
VLM_38  VIDC_List 1,118, 58,  0, 896,  0, 28, 3, 9, 0,352, 0, 0,24000,2         ; EGA std
VLM_39  VIDC_List 2,118, 58,  0, 896,  0, 28, 3, 9, 0,352, 0, 0,24000,2
VLM_40  VIDC_List 3,118, 58,  0, 896,  0, 28, 3, 9, 0,352, 0, 0,24000,2

VLM_41  VIDC_List 0, 76, 36,  0, 640,  0, 16, 3, 9, 0,352, 0, 0,16783,2         ; EGA
VLM_42  VIDC_List 1, 76, 36,  0, 640,  0, 16, 3, 9, 0,352, 0, 0,16783,2
VLM_43  VIDC_List 2, 76, 36,  0, 640,  0, 16, 3, 9, 0,352, 0, 0,16783,2

VLM_44  VIDC_List 0, 72,162,  0, 640,  0,146, 3,34, 0,200, 0,25,16000,0         ; CGA
VLM_45  VIDC_List 1, 72,162,  0, 640,  0,146, 3,34, 0,200, 0,25,16000,0
VLM_46  VIDC_List 2, 72,162,  0, 640,  0,146, 3,34, 0,200, 0,25,16000,0

VLM_47  VIDC_List 3, 64, 62,  0, 360,  0, 46, 2,32, 0,480, 0,11,16783,3         ; PC Soft

VLM_48  VIDC_List 2, 48, 22,  0, 320,  0, 10, 2,32, 0,480, 0,11,12587,3         ; Games mode
VLM_49  VIDC_List 3, 48, 22,  0, 320,  0, 10, 2,32, 0,480, 0,11,12587,3         ; Games mode
VLM_50  VIDC_List 0, 36, 30, 44, 320, 44, 38, 3,16,25,240,25, 3, 8000,0
VLM_51  VIDC_List 1, 36, 30, 44, 320, 44, 38, 3,16,25,240,25, 3, 8000,0
VLM_52  VIDC_List 2, 36, 30, 44, 320, 44, 38, 3,16,25,240,25, 3, 8000,0
VLM_53  VIDC_List 3, 36, 30, 44, 320, 44, 38, 3,16,25,240,25, 3, 8000,0

; New modes for VIDC20

VLM_32  VIDC_List 3, 72,128,  0, 800,  0, 24, 2,22, 0,600, 0, 1,36000,0         ; MODE 32 (800 x 600 x 8bpp)


VLH_23  VIDC_List 2, 52, 46,  2, 288,  2,  2, 3,43, 4,896, 4, 0,24000,0         ; MODE 23

VgaX_0   VIDC_List 0, 96, 46,  0, 640,  0,18, 2,106,0,256, 0,85,25175,2         ; TV modes in VGA_350)
VgaX_1   VIDC_List 1, 48, 22,  0, 320,  0,10, 2,106,0,256, 0,85,12587,2
VgaX_2   VIDC_List 2, 48, 22,  0, 320,  0,10, 2,106,0,256, 0,85,12587,2
VgaX_3   VIDC_List 1, 96, 46,  0, 640,  0,18, 2,109,0,250, 0,88,25175,2
VgaX_4   VIDC_List 0, 96, 46,  0, 640,  0,18, 2,106,0,256, 0,85,25175,2
VgaX_5   VIDC_List 1, 48, 22,  0, 320,  0,10, 2,106,0,256, 0,85,12587,2
VgaX_6   VIDC_List 1, 48, 22,  0, 320,  0,10, 2,109,0,250, 0,88,12587,2
 [ HiResTTX
VgaX_7 * VLM_7
 |
VgaX_7   VIDC_List 2, 48, 22,  0, 320,  0,10, 2,109,0,250, 0,88,12587,2
 ]
VgaX_8   VIDC_List 1, 96, 46,  0, 640,  0,18, 2,106,0,256, 0,85,25175,2
VgaX_9   VIDC_List 2, 48, 22,  0, 320,  0,10, 2,106,0,256, 0,85,12587,2
VgaX_10  VIDC_List 3, 48, 22,  0, 320,  0,10, 2,106,0,256, 0,85,12587,2
VgaX_11  VIDC_List 1, 96, 46,  0, 640,  0,18, 2,109,0,250, 0,88,25175,2
VgaX_12  VIDC_List 2, 96, 46,  0, 640,  0,18, 2,106,0,256, 0,85,25175,2
VgaX_13  VIDC_List 3, 48, 22,  0, 320,  0,10, 2,106,0,256, 0,85,12587,2
VgaX_14  VIDC_List 2, 96, 46,  0, 640,  0,18, 2,109,0,250, 0,88,25175,2
VgaX_15  VIDC_List 3, 96, 46,  0, 640,  0,18, 2,106,0,256, 0,85,25175,2

VgaX_41  VIDC_List 0, 96, 46,  0, 640,  0,18, 2,58, 0,352, 0,37,25175,2         ; EGA
VgaX_42  VIDC_List 1, 96, 46,  0, 640,  0,18, 2,58, 0,352, 0,37,25175,2
VgaX_43  VIDC_List 2, 96, 46,  0, 640,  0,18, 2,58, 0,352, 0,37,25175,2

VgaX_44  VIDC_List 0, 96, 46,  0, 640,  0,18,2,134, 0,200,0,113,25175,2         ; CGA
VgaX_45  VIDC_List 1, 96, 46,  0, 640,  0,18,2,134, 0,200,0,113,25175,2
VgaX_46  VIDC_List 2, 96, 46,  0, 640,  0,18,2,134, 0,200,0,113,25175,2

VgaX_50  VIDC_List 0, 48, 22,  0, 320,  0,10, 2,58,56,240,56,37,12587,2
VgaX_51  VIDC_List 1, 48, 22,  0, 320,  0,10, 2,58,56,240,56,37,12587,2
VgaX_52  VIDC_List 2, 48, 22,  0, 320,  0,10, 2,58,56,240,56,37,12587,2
VgaX_53  VIDC_List 3, 48, 22,  0, 320,  0,10, 2,58,56,240,56,37,12587,2

LCD_25   VIDC_List 0,  8, 32,  0, 640,  0,16,1,  0, 0,480,0,  0,27000,0
LCD_26   VIDC_List 1,  8, 32,  0, 640,  0,16,1,  0, 0,480,0,  0,27000,0
LCD_27   VIDC_List 2,  8, 32,  0, 640,  0,16,1,  0, 0,480,0,  0,27000,0
LCD_28   VIDC_List 3,  8, 32,  0, 640,  0,16,1,  0, 0,480,0,  0,27000,0
LCD_50   VIDC_List 0,132,220,  0, 320, 0,220,1,  3, 0,240,0,  4,16000,0
LCD_51   VIDC_List 1,132,220,  0, 320, 0,220,1,  3, 0,240,0,  4,16000,0
LCD_52   VIDC_List 2,132,220,  0, 320, 0,220,1,  3, 0,240,0,  4,16000,0
LCD_53   VIDC_List 3,132,220,  0, 320, 0,220,1,  3, 0,240,0,  4,16000,0

; Table of ideal frame rate for each numbered mode, to put in dummy mode selector
; if numbered mode number is not directly available on this monitortype


FrameRateTable
 [ HiResTTX
        =       F_VLN_0, F_VLN_1, F_VLN_2, F_VLN_3, F_VLN_4, F_VLN_5, F_VLN_6, F_VLM_7
 |
        =       F_VLN_0, F_VLN_1, F_VLN_2, F_VLN_3, F_VLN_4, F_VLN_5, F_VLN_6, F_VLN_7
 ]
        =       F_VLN_8, F_VLN_9, F_VLN_10, F_VLN_11, F_VLN_12, F_VLN_13, F_VLN_14, F_VLN_15
        =       F_VLN_16, F_VLN_17, F_VLM_18, F_VLM_19, F_VLM_20, F_VLM_21, F_VLN_22, F_VLH_23
        =       F_VLN_24, F_VLM_25, F_VLM_26, F_VLM_27, F_VLM_28, F_VLM_29, F_VLM_30, F_VLM_31
        =       F_VLM_32, F_VLN_33, F_VLN_34, F_VLN_35, F_VLN_36, F_VLM_37, F_VLM_38, F_VLM_39
        =       F_VLM_40, F_VLM_41, F_VLM_42, F_VLM_43, F_VLM_44, F_VLM_45, F_VLM_46, F_VLM_47
        =       F_VLM_48, F_VLM_49, F_LCD_50, F_LCD_51, F_LCD_52, F_LCD_53
        ASSERT  . - FrameRateTable = NumModes
        ALIGN

Vwstab
 & VW_0  - Vwstab      ; MODE  0
 & VW_1  - Vwstab      ; MODE  1
 & VW_2  - Vwstab      ; MODE  2
 & VW_3  - Vwstab      ; MODE  3
 & VW_4  - Vwstab      ; MODE  4
 & VW_5  - Vwstab      ; MODE  5
 & VW_6  - Vwstab      ; MODE  6
 & VW_7  - Vwstab      ; MODE  7
 & VW_8  - Vwstab      ; MODE  8
 & VW_9  - Vwstab      ; MODE  9
 & VW_10 - Vwstab      ; MODE  10
 & VW_11 - Vwstab      ; MODE  11
 & VW_12 - Vwstab      ; MODE  12
 & VW_13 - Vwstab      ; MODE  13
 & VW_14 - Vwstab      ; MODE  14
 & VW_15 - Vwstab      ; MODE  15
 & VW_16 - Vwstab      ; MODE  16
 & VW_17 - Vwstab      ; MODE  17
 & VW_18 - Vwstab      ; MODE  18
 & VW_19 - Vwstab      ; MODE  19
 & VW_20 - Vwstab      ; MODE  20
 & VW_21 - Vwstab      ; MODE  21
 & VW_22 - Vwstab      ; MODE  22 (new mode for visually handicapped)
 & VW_23 - Vwstab      ; MODE  23
 & VW_24 - Vwstab      ; MODE  24
 & VW_25 - Vwstab      ; MODE  25
 & VW_26 - Vwstab      ; MODE  26
 & VW_27 - Vwstab      ; MODE  27
 & VW_28 - Vwstab      ; MODE  28
 & VW_29 - Vwstab      ; MODE  29 exp
 & VW_30 - Vwstab      ; MODE  30 exp
 & VW_31 - Vwstab      ; MODE  31
 & VW_32 - Vwstab      ; MODE  32
 & VW_33 - Vwstab      ; MODE  33
 & VW_34 - Vwstab      ; MODE  34
 & VW_35 - Vwstab      ; MODE  35
 & VW_36 - Vwstab      ; MODE  36
 & VW_37 - Vwstab      ; MODE  37
 & VW_38 - Vwstab      ; MODE  38
 & VW_39 - Vwstab      ; MODE  39
 & VW_40 - Vwstab      ; MODE  40
 & VW_41 - Vwstab      ; MODE  41
 & VW_42 - Vwstab      ; MODE  42
 & VW_43 - Vwstab      ; MODE  43
 & VW_44 - Vwstab      ; MODE  44
 & VW_45 - Vwstab      ; MODE  45
 & VW_46 - Vwstab      ; MODE  46
 & VW_47 - Vwstab      ; MODE  47
 & VW_48 - Vwstab      ; MODE  48
 & VW_49 - Vwstab      ; MODE  49
 & VW_50 - Vwstab      ; MODE  50
 & VW_51 - Vwstab      ; MODE  51
 & VW_52 - Vwstab      ; MODE  52
 & VW_53 - Vwstab      ; MODE  53

M22S * 1280*976/8  ;  screen size
M23S * 1152*896/8
M25S *  640*480/8
M31S *  800*600/8
M37S *  896*352/8
M41S *  640*352/8
M44S *  640*200/8
M47S *  360*480/8
M50S *  320*240/8

        MACRO
$label  VWSTAB  $BaseMode, $ScreenSize,$LineLength,$XWindLimit,$YWindLimit,$YShftFactor,    $XEigFactor,$YEigFactor,$NColour,$ScrRCol,$ScrBRow,$Log2BPC,$Log2BPP,$ModeFlags
$label
        LCLS    ScrSize
        LCLA    xres
        LCLA    yres
        LCLA    pixdepth
        LCLA    yeig
        LCLA    scrsz
        [ ("$ScreenSize" :RIGHT: 1) = "K"
ScrSize SETS ("$ScreenSize" :LEFT: ((:LEN: "$ScreenSize")-1))
scrsz   SETA    $ScrSize * 1024
        |
scrsz   SETA    $ScreenSize
        ]
        &       scrsz
        &       $XWindLimit, $YWindLimit, $LineLength, $NColour
        &       $YShftFactor, $ModeFlags, $XEigFactor, $YEigFactor
        &       $Log2BPC, $Log2BPP
        &       $ScrRCol, $ScrBRow
        ALIGN
        &       0, $BaseMode, -1 ; Dummy mode workspace block for Service_ModeExtension
        MEND

VW_0    VWSTAB  0, 20K, 80, 639,255,4,1,2, 1, 79, 31,0,0,0                                             ; MODE 0
VW_1    VWSTAB  1, 20K, 80, 319,255,4,2,2, 3, 39, 31,1,1,0                                             ; MODE 1
VW_2    VWSTAB  2, 40K,160, 159,255,5,3,2,15, 19, 31,3,2,0                                             ; MODE 2
VW_3    VWSTAB  3, 40K,160, 639,249,5,1,2, 1, 79, 24,1,1,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_BBCGapMode  ; MODE 3
VW_4    VWSTAB  4, 20K, 80, 319,255,4,2,2, 1, 39, 31,1,0,0                                             ; MODE 4
VW_5    VWSTAB  5, 20K, 80, 159,255,4,3,2, 3, 19, 31,2,1,0                                             ; MODE 5
VW_6    VWSTAB  6, 20K, 80, 319,249,4,2,2, 1, 39, 24,1,1,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_BBCGapMode  ; MODE 6
 [ TTX256
 ASSERT HiResTTX
VW_7    VWSTAB  7,640K,640, 639,499,5,1,1,255,39, 24,3,3,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext+ModeFlag_DoubleVertical+ModeFlag_FullPalette ; MODE 7
 |
 [ HiResTTX
VW_7    VWSTAB  7,320K,320, 639,499,5,1,1,15, 39, 24,2,2,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext+ModeFlag_DoubleVertical ; MODE 7
 |
VW_7    VWSTAB  7, 80K,160, 319,249,5,2,2,15, 39, 24,2,2,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext    ; MODE 7
 ]
 ]
VW_8    VWSTAB  8, 40K,160, 639,255,5,1,2, 3, 79, 31,1,1,0                                             ; MODE 8
VW_9    VWSTAB  9, 40K,160, 319,255,5,2,2,15, 39, 31,2,2,0                                             ; MODE 9
VW_10   VWSTAB 10, 80K,320, 159,255,6,3,2,63, 19, 31,4,3,0                                             ; MODE 10
VW_11   VWSTAB 11, 40K,160, 639,249,5,1,2, 3, 79, 24,1,1,ModeFlag_GapMode                                  ; MODE 11
VW_12   VWSTAB 12, 80K,320, 639,255,6,1,2,15, 79, 31,2,2,0                                             ; MODE 12
VW_13   VWSTAB 13, 80K,320, 319,255,6,2,2,63, 39, 31,3,3,0                                             ; MODE 13
VW_14   VWSTAB 14, 80K,320, 639,249,6,1,2,15, 79, 24,2,2,ModeFlag_GapMode                                  ; MODE 14
VW_15   VWSTAB 15,160K,640, 639,255,7,1,2,63, 79, 31,3,3,0                                             ; MODE 15
VW_16   VWSTAB 16,132K,528,1055,255,0,1,2,15,131, 31,2,2,0                                             ; MODE 16
VW_17   VWSTAB 17,132K,528,1055,249,0,1,2,15,131, 24,2,2,ModeFlag_GapMode                                  ; MODE 17
VW_18   VWSTAB 18, 40K, 80, 639,511,4,1,1, 1, 79, 63,0,0,0                                             ; MODE 18
VW_19   VWSTAB 19, 80K,160, 639,511,5,1,1, 3, 79, 63,1,1,0                                             ; MODE 19
VW_20   VWSTAB 20,160K,320, 639,511,6,1,1,15, 79, 63,2,2,0                                             ; MODE 20
VW_21   VWSTAB 21,320K,640, 639,511,7,1,1,63, 79, 63,3,3,0                                             ; MODE 21
VW_22   VWSTAB 22,108K,384, 767,287,0,0,1,15, 95, 35,2,2,0                                             ; MODE 22
VW_23   VWSTAB 23,M23S,144,1151,895,0,1,1, 1,143, 55,0,0,ModeFlag_HiResMono+ModeFlag_DoubleVertical            ; MODE 23
VW_24   VWSTAB 24,264K,1056,1055,255,0,1,2,63,131,31,3,3,0                                             ; MODE 24
VW_25 VWSTAB 25,M25S  , 80, 639,479,4,1,1, 1, 79, 59,0,0,0                                             ; MODE 25
VW_26 VWSTAB 26,M25S*2,160, 639,479,5,1,1, 3, 79, 59,1,1,0                                             ; MODE 26
VW_27 VWSTAB 27,M25S*4,320, 639,479,6,1,1,15, 79, 59,2,2,0                                             ; MODE 27
VW_28 VWSTAB 28,M25S*8,640, 639,479,7,1,1,63, 79, 59,3,3,0                                             ; MODE 28

VW_29 VWSTAB 29,M31S  ,100, 799,599,0,1,1, 1, 99, 74,0,0,0                                             ; MODE 29
VW_30 VWSTAB 30,M31S*2,200, 799,599,0,1,1, 3, 99, 74,1,1,0                                             ; MODE 30
VW_31 VWSTAB 31,M31S*4,400, 799,599,0,1,1,15, 99, 74,2,2,0                                             ; MODE 31
VW_32 VWSTAB 32,M31S*8,800, 799,599,0,1,1,63, 99, 74,3,3,0                                             ; MODE 32

VW_33   VWSTAB 33, 27K, 96, 767,287,0,1,2, 1, 95, 35,0,0,0                                             ; MODE 33
VW_34   VWSTAB 34, 54K,192, 767,287,0,1,2, 3, 95, 35,1,1,0                                             ; MODE 34
VW_35   VWSTAB 35,108K,384, 767,287,0,1,2,15, 95, 35,2,2,0                                             ; MODE 35
VW_36   VWSTAB 36,216K,768, 767,287,0,1,2,63, 95, 35,3,3,0                                             ; MODE 36

VW_37 VWSTAB 37,M37S  ,112, 895,351,0,1,2, 1,111, 43,0,0,0                                             ; MODE 37
VW_38 VWSTAB 38,M37S*2,224, 895,351,0,1,2, 3,111, 43,1,1,0                                             ; MODE 38
VW_39 VWSTAB 39,M37S*4,448, 895,351,0,1,2,15,111, 43,2,2,0                                             ; MODE 39
VW_40 VWSTAB 40,M37S*8,896, 895,351,0,1,2,63,111, 43,3,3,0                                             ; MODE 40

VW_41 VWSTAB 41,M41S  , 80, 639,351,0,1,2, 1, 79, 43,0,0,0                                             ; EGA 1,2,4bpp
VW_42 VWSTAB 42,M41S*2,160, 639,351,0,1,2, 3, 79, 43,1,1,0                                             ;
VW_43 VWSTAB 43,M41S*4,320, 639,351,0,1,2,15, 79, 43,2,2,0                                             ; 640x352

VW_44 VWSTAB 44,M44S  , 80, 639,199,0,1,2, 1, 79, 24,0,0,0                                             ; CGA 1,2,4bpp
VW_45 VWSTAB 45,M44S*2,160, 639,199,0,1,2, 3, 79, 24,1,1,0                                             ;
VW_46 VWSTAB 46,M44S*4,320, 639,199,0,1,2,15, 79, 24,2,2,0                                             ; 640x200

VW_47 VWSTAB 47,M47S*8,360, 359,479,0,2,2,63, 44, 59,3,3,0                                             ; PCSoft 360 x 480 x 8bpp
VW_48 VWSTAB 48,   75K,160, 319,479,0,2,1,15, 39, 59,2,2,0                                             ; Games 320 x 480 x 4bpp
VW_49 VWSTAB 49,  150K,320, 319,479,0,2,1,63, 39, 59,3,3,0                                             ; Games 320 x 480 x 8bpp

VW_50 VWSTAB 50,M50S  , 40, 319,239,0,2,2, 1, 39, 29,0,0,0
VW_51 VWSTAB 51,M50S*2, 80, 319,239,0,2,2, 3, 39, 29,1,1,0
VW_52 VWSTAB 52,M50S*4,160, 319,239,0,2,2,15, 39, 29,2,2,0
VW_53 VWSTAB 53,M50S*8,320, 319,239,0,2,2,63, 39, 29,3,3,0

;            $BaseMode              $YShftFactor  $ScrBRow
;               $ScreenSize           $XEigFactor    $Log2BPC
;                      $LineLength      $YEigFactor    $Log2BPP
;                           $XWindLimit   $NColour       $ModeFlags
;                               $YWindLimit   $ScrRCol

        END
@


4.10
log
@Evict ECFIndex and PalIndex from VDU workspace
Detail:
  ECFIndex and PalIndex claim to be mode variables, but it's impossible for extension modes to specify their values.
  Since they're easy to calculate from the ModeFlags and Log2BPP values, drop them from the mode workspace (+ table of builtin modes) and calculate them on the fly instead.
  File changes:
  - hdr/KernelWS - Drop ECFIndex & PalIndex from workspace
  - s/vdu/vdumodes - Adjust workspace definition, drop ECFIndex & PalIndex values from VWSTAB
  - s/vdu/vdudriver - Remove now-redundant copy loop from ModeChangeSub. Remove code from GenerateModeSelectorVars that sets up the ECFIndex & PalIndex values on the stack
  - s/vdu/vdugrafl - Adjust copy loop in SwitchOutputToSprite/Mask
  - s/vdu/vdupalette, s/vdu/vdupalxx - Add GetPalIndex routine to generate PalIndex on the fly. Drop the obsolete 16bpp palette/gamma table and shuffle the other entries to simplify GetPalIndex a bit.
  - s/vdu/vduplot - Add GetECFIndex routine to generate ECFIndex on the fly. Also, fix things so that mode 0 isn't the only rectangular-pixel mode which uses the special rectangular-pixel ECF patterns (index 0 vs. index 4). Fiddle with ExportedHLine a bit to avoid an out-of-range ADR.
  - s/NewReset - Fix UAL warning for MOV R0, AppSpaceStart. Adjust memset to not assume 512KB is the correct amount
Admin:
  Tested on Raspberry Pi 3


Version 6.11. Tagged as 'Kernel-6_11'
@
text
@a38 1
$label
d61 2
a92 3
NumModes        *       54
maxmode         *       NumModes-1
minmode         *       0
a1017 36
; To change the order of mode variables, change the following:-
;  a)   The order of the 'wk' labels below
;  b)   The order of the output variables in macro VWSTAB below
;  c)   The order of the variables in '$.Hdr.Workspace' and '$.Hdr.NewSpace'

        ^ 0
wkstart         # 0
; values which are calculated from sprite header when switching to sprite
wkScreenSize    # 4
wkXWindLimit    # 4
wkYWindLimit    # 4
wkLineLength    # 4
wkmiddle        # 0
; values which are taken from pushed mode info (from wkmiddle ... wkmidend)
wkNColour       # 4
wkYShftFactor   # 4
wkModeFlags     # 4
wkXEigFactor    # 4
wkYEigFactor    # 4
wkLog2BPC       # 4
wkLog2BPP       # 4
wkmidend        # 0
; these are also taken from sprite header
wkScrRCol       # 4
wkScrBRow       # 4
wkend           # 0
wksize * wkend-wkstart
wkwordsize * (wksize + 3) :AND: :NOT: 3

;VIDC list type 3 size (hardware independent video controller list)
;
VIDCList3BaseSize * 64
VIDCList3Size * (VIDCList3BaseSize + 16*8 + 4) ; primary params, up to 16 video control params, terminator

PushedInfoSize * wkwordsize + VIDCList3Size

d1049 1
@


4.9
log
@Teletext fixes
Detail:
  s/vdu/vdudriver, s/vdu/vdumodes - Re-introduce TTX256 so that 8bpp teletext will be used if no MDF is loaded
  s/vdu/vdudriver - If the video driver didn't support the native mode 7 colour depth, ModePromoTable was swapping it for another mode number, preventing the AltTTX code in FindOKMode from operating. So, skip the ModePromoTable check for mode 7.
  s/vdu/vduswis - Minor correction to alternate teletext mode search; 1<<5 = 32bpp, so stop search at log2bpp of 6
Admin:
  Tested on Raspberry Pi


Version 5.74. Retagged as 'Kernel-5_74'
@
text
@d1027 1
a1031 1
wkNColour       # 4             ; DDV; defined to be a word (17-Sep-92)
d1033 2
a1040 1
wkECFIndex      # 4
d1042 1
a1044 2
wkdispstart     # 0
wkPalIndex      # 4
a1047 1
wklim * wksize-(wkmiddle-wkstart)
d1067 1
a1067 1
$label  VWSTAB  $BaseMode, $ScreenSize,$LineLength,$XWindLimit,$YWindLimit,$YShftFactor,    $XEigFactor,$YEigFactor,$NColour,$ScrRCol,$ScrBRow,$Log2BPC,$Log2BPP,$PalIndex, $ECFIndex,$ModeFlags
d1084 2
a1085 2
        &       $Log2BPC, $Log2BPP, $ECFIndex
        &       $ScrRCol, $ScrBRow, $PalIndex
d1089 7
a1095 7
VW_0    VWSTAB  0, 20K, 80, 639,255,4,1,2, 1, 79, 31,0,0,0,1,0                                             ; MODE 0
VW_1    VWSTAB  1, 20K, 80, 319,255,4,2,2, 3, 39, 31,1,1,1,2,0                                             ; MODE 1
VW_2    VWSTAB  2, 40K,160, 159,255,5,3,2,15, 19, 31,3,2,2,3,0                                             ; MODE 2
VW_3    VWSTAB  3, 40K,160, 639,249,5,1,2, 1, 79, 24,1,1,0,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_BBCGapMode  ; MODE 3
VW_4    VWSTAB  4, 20K, 80, 319,255,4,2,2, 1, 39, 31,1,0,0,4,0                                             ; MODE 4
VW_5    VWSTAB  5, 20K, 80, 159,255,4,3,2, 3, 19, 31,2,1,1,2,0                                             ; MODE 5
VW_6    VWSTAB  6, 20K, 80, 319,249,4,2,2, 1, 39, 24,1,1,0,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_BBCGapMode  ; MODE 6
d1098 1
a1098 1
VW_7    VWSTAB  7,640K,640, 639,499,5,1,1,255,39, 24,3,3,4,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext+ModeFlag_DoubleVertical+ModeFlag_FullPalette ; MODE 7
d1101 1
a1101 1
VW_7    VWSTAB  7,320K,320, 639,499,5,1,1,15, 39, 24,2,2,4,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext+ModeFlag_DoubleVertical ; MODE 7
d1103 1
a1103 1
VW_7    VWSTAB  7, 80K,160, 319,249,5,2,2,15, 39, 24,2,2,4,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext    ; MODE 7
d1106 59
a1164 59
VW_8    VWSTAB  8, 40K,160, 639,255,5,1,2, 3, 79, 31,1,1,1,2,0                                             ; MODE 8
VW_9    VWSTAB  9, 40K,160, 319,255,5,2,2,15, 39, 31,2,2,2,3,0                                             ; MODE 9
VW_10   VWSTAB 10, 80K,320, 159,255,6,3,2,63, 19, 31,4,3,3,5,0                                             ; MODE 10
VW_11   VWSTAB 11, 40K,160, 639,249,5,1,2, 3, 79, 24,1,1,1,2,ModeFlag_GapMode                                  ; MODE 11
VW_12   VWSTAB 12, 80K,320, 639,255,6,1,2,15, 79, 31,2,2,2,3,0                                             ; MODE 12
VW_13   VWSTAB 13, 80K,320, 319,255,6,2,2,63, 39, 31,3,3,3,5,0                                             ; MODE 13
VW_14   VWSTAB 14, 80K,320, 639,249,6,1,2,15, 79, 24,2,2,2,3,ModeFlag_GapMode                                  ; MODE 14
VW_15   VWSTAB 15,160K,640, 639,255,7,1,2,63, 79, 31,3,3,3,5,0                                             ; MODE 15
VW_16   VWSTAB 16,132K,528,1055,255,0,1,2,15,131, 31,2,2,2,3,0                                             ; MODE 16
VW_17   VWSTAB 17,132K,528,1055,249,0,1,2,15,131, 24,2,2,2,3,ModeFlag_GapMode                                  ; MODE 17
VW_18   VWSTAB 18, 40K, 80, 639,511,4,1,1, 1, 79, 63,0,0,0,4,0                                             ; MODE 18
VW_19   VWSTAB 19, 80K,160, 639,511,5,1,1, 3, 79, 63,1,1,1,2,0                                             ; MODE 19
VW_20   VWSTAB 20,160K,320, 639,511,6,1,1,15, 79, 63,2,2,2,3,0                                             ; MODE 20
VW_21   VWSTAB 21,320K,640, 639,511,7,1,1,63, 79, 63,3,3,3,5,0                                             ; MODE 21
VW_22   VWSTAB 22,108K,384, 767,287,0,0,1,15, 95, 35,2,2,2,3,0                                             ; MODE 22
VW_23   VWSTAB 23,M23S,144,1151,895,0,1,1, 1,143, 55,0,0,5,4,ModeFlag_HiResMono+ModeFlag_DoubleVertical            ; MODE 23
VW_24   VWSTAB 24,264K,1056,1055,255,0,1,2,63,131,31,3,3,3,5,0                                             ; MODE 24
VW_25 VWSTAB 25,M25S  , 80, 639,479,4,1,1, 1, 79, 59,0,0,0,4,0                                             ; MODE 25
VW_26 VWSTAB 26,M25S*2,160, 639,479,5,1,1, 3, 79, 59,1,1,1,2,0                                             ; MODE 26
VW_27 VWSTAB 27,M25S*4,320, 639,479,6,1,1,15, 79, 59,2,2,2,3,0                                             ; MODE 27
VW_28 VWSTAB 28,M25S*8,640, 639,479,7,1,1,63, 79, 59,3,3,3,5,0                                             ; MODE 28

VW_29 VWSTAB 29,M31S  ,100, 799,599,0,1,1, 1, 99, 74,0,0,0,4,0                                             ; MODE 29
VW_30 VWSTAB 30,M31S*2,200, 799,599,0,1,1, 3, 99, 74,1,1,1,2,0                                             ; MODE 30
VW_31 VWSTAB 31,M31S*4,400, 799,599,0,1,1,15, 99, 74,2,2,2,3,0                                             ; MODE 31
VW_32 VWSTAB 32,M31S*8,800, 799,599,0,1,1,63, 99, 74,3,3,3,5,0                                             ; MODE 32

VW_33   VWSTAB 33, 27K, 96, 767,287,0,1,2, 1, 95, 35,0,0,0,4,0                                             ; MODE 33
VW_34   VWSTAB 34, 54K,192, 767,287,0,1,2, 3, 95, 35,1,1,1,2,0                                             ; MODE 34
VW_35   VWSTAB 35,108K,384, 767,287,0,1,2,15, 95, 35,2,2,2,3,0                                             ; MODE 35
VW_36   VWSTAB 36,216K,768, 767,287,0,1,2,63, 95, 35,3,3,3,5,0                                             ; MODE 36

VW_37 VWSTAB 37,M37S  ,112, 895,351,0,1,2, 1,111, 43,0,0,0,4,0                                             ; MODE 37
VW_38 VWSTAB 38,M37S*2,224, 895,351,0,1,2, 3,111, 43,1,1,1,2,0                                             ; MODE 38
VW_39 VWSTAB 39,M37S*4,448, 895,351,0,1,2,15,111, 43,2,2,2,3,0                                             ; MODE 39
VW_40 VWSTAB 40,M37S*8,896, 895,351,0,1,2,63,111, 43,3,3,3,5,0                                             ; MODE 40

VW_41 VWSTAB 41,M41S  , 80, 639,351,0,1,2, 1, 79, 43,0,0,0,4,0                                             ; EGA 1,2,4bpp
VW_42 VWSTAB 42,M41S*2,160, 639,351,0,1,2, 3, 79, 43,1,1,1,2,0                                             ;
VW_43 VWSTAB 43,M41S*4,320, 639,351,0,1,2,15, 79, 43,2,2,2,3,0                                             ; 640x352

VW_44 VWSTAB 44,M44S  , 80, 639,199,0,1,2, 1, 79, 24,0,0,0,4,0                                             ; CGA 1,2,4bpp
VW_45 VWSTAB 45,M44S*2,160, 639,199,0,1,2, 3, 79, 24,1,1,1,2,0                                             ;
VW_46 VWSTAB 46,M44S*4,320, 639,199,0,1,2,15, 79, 24,2,2,2,3,0                                             ; 640x200

VW_47 VWSTAB 47,M47S*8,360, 359,479,0,2,2,63, 44, 59,3,3,3,5,0                                             ; PCSoft 360 x 480 x 8bpp
VW_48 VWSTAB 48,   75K,160, 319,479,0,2,1,15, 39, 59,2,2,2,3,0                                             ; Games 320 x 480 x 4bpp
VW_49 VWSTAB 49,  150K,320, 319,479,0,2,1,63, 39, 59,3,3,3,5,0                                             ; Games 320 x 480 x 8bpp

VW_50 VWSTAB 50,M50S  , 40, 319,239,0,2,2, 1, 39, 29,0,0,0,4,0
VW_51 VWSTAB 51,M50S*2, 80, 319,239,0,2,2, 3, 39, 29,1,1,1,2,0
VW_52 VWSTAB 52,M50S*4,160, 319,239,0,2,2,15, 39, 29,2,2,2,3,0
VW_53 VWSTAB 53,M50S*8,320, 319,239,0,2,2,63, 39, 29,3,3,3,5,0

;            $BaseMode               $YShftFactor  $ScrBRow   $ModeFlags
;               $ScreenSize            $XEigFactor    $Log2BPC
;                      $LineLength       $YEigFactor    $Log2BPP
;                           $XWindLimit    $NColour       $PalIndex
;                                $YWindLimit  $ScrRCol      $ECFIndex
@


4.8
log
@Add support for custom teletext modes
Detail:
  This set of changes:
  * Adds support for the T, TX and TY mode string elements (as per RISCOS Ltd)
  * Adds support for entering arbitrary-resolution teletext modes by using mode selector blocks with the Teletext mode flag set
  * ScrRCol and ScrBRow mode variables can be provided in the mode selector in order to restrict the number of text rows/columns in teletext modes (as per RISCOS Ltd)
  * If the rows / columns are restricted in this manner then the text window will be centered on the screen, to try and avoid things looking too ugly (no variable text scaling implemented)
  * For HiResTTX, all colour depths >= 4bpp are now supported by teletext. This essentially makes the TTX256 switch obsolete.
  * If the "native" mode 7 is unavailable then the kernel will try a series of fallback resolutions & colour depths in an effort to find a combination that works
  Known bugs/issues:
  * Teletext column count has a max limit of 255 due to TTXDoubleCounts being a byte array
  * If there's a border around the text window, the border will not be refreshed when changing transparency modes using a VDU 23,18,0 sequence
  * ScreenLoad looks like it can overflow the LargeCommon buffer (no buffer size check) - needs fixing before LargeCommon can be safely shrunk below (Old)TTXMapSize
  File changes:
  - hdr/KernelWS - Make CharWidth non-conditional. Adjust handling of teletext workspace; it's now allocated from the system heap to allow it to cope with arbitrary screen sizes
  - s/vdu/vdu23 - Make CharWidth non-conditional
  - s/vdu/vducursoft - Make CursorTeletext cope with arbitrary colour depths, make CharWidth non-conditional, remove hard-coded teletext values
  - s/vdu/vdudriver - Deal with teletext workspace allocation during ModeChangeSub. Deal with selecting teletext modes (and validating colour depth) in GenerateModeSelectorVars.
  - s/vdu/vdugrafl - Make CharWidth non-conditional. Calculate offset required for text window centering.
  - s/vdu/vdumodes - Remove TTX256
  - s/vdu/vduswis - Try other teletext modes if native mode 7 not available. Extend OS_ScreenMode reason codes to cope with teletext mode strings.
  - s/vdu/vduttx - Update to use dynamic workspace. Replace various hardcoded values with variable lookups. Update character plotting + colour/palette selection to work with true-colour modes if HiResTTX.
  - s/vdu/vduwrch - Move some useful code into a subroutine. Update FastCLS to cope with true-colour teletext. Update AddressR0R1 to cope with text window centering offset. Make CharWidth non-conditional.
Admin:
  Tested on Raspberry Pi, BB-xM
  VDU 23,18,0 in 256-colour teletext now works correctly (previously 64-colour mode was in use, causing palette update to be ruined by VIDC1-mangling)


Version 5.74. Tagged as 'Kernel-5_74'
@
text
@d834 4
d843 1
d1097 4
d1106 1
@


4.7
log
@Delete lots of old switches
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * FixCallBacks
  * UseProcessTransfer
  * CanLiveOnROMCard
  * BleedinDaveBell
  * NewStyleEcfs
  * DoVdu23_0_12
  * LCDPowerCtrl
  * HostVdu
  * Print
  * EmulatorSupport
  * TubeInfo
  * AddTubeBashers
  * TubeChar, TubeString, TubeDumpNoStack, TubeNewlNoStack macros
  * FIQDebug
  * VCOstartfix
  * AssemblingArthur (n.b. still defined for safety with anything in Hdr: which uses it, but not used explicitly by the kernel)
  * MouseBufferFix
  * LCDInvert
  * LCDSupport
  * DoInitialiseMode
  * Interruptible32bitModes
  * MouseBufferManager
  * StrongARM (new CacheCleanerHack and InterruptDelay switches added to hdr/Options to cover some functionality that StrongARM previously covered)
  * SAcleanflushbroken
  * StrongARM_POST
  * IrqsInClaimRelease
  * CheckProtectionLink
  * GSWorkspaceInKernelBuffers
  * EarlierReentrancyInDAShrink
  * LongCommandLines
  * ECC
  * NoSPSRcorruption
  * RMTidyDoesNowt
  * RogerEXEY
  * StorkPowerSave
  * DebugForcedReset
  * AssembleKEYV
  * AssemblePointerV
  * ProcessorVectors
  * Keyboard_Type
  Assorted old files have also been deleted.
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.51. Tagged as 'Kernel-5_51'
@
text
@a833 4
 [ TTX256
 ASSERT HiResTTX
VLM_7   VIDC_List 3, 56,112,  0, 640,  0, 88, 3,18, 6,500, 6, 1,24000,0         ; MODE 7
 |
a838 1
 ]
a1091 4
 [ TTX256
 ASSERT HiResTTX
VW_7    VWSTAB  7,640K,640, 639,499,5,1,1,63, 39, 24,3,3,4,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext+ModeFlag_DoubleVertical ; MODE 7
 |
a1096 1
 ]
@


4.6
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@a944 2
 [ ModeSelectors

a963 2
 ]

d1068 1
a1068 1
$label  VWSTAB1 $BaseMode, $ScreenSize,$LineLength,$XWindLimit,$YWindLimit,$YShftFactor,    $XEigFactor,$YEigFactor,$NColour,$ScrRCol,$ScrBRow,$Log2BPC,$Log2BPP,$PalIndex, $ECFIndex,$ModeFlags
a1089 36
        MACRO
$label  VWSTAB2 $BaseMode, $ScreenSize,$LineLength,$XWindLimit,$YWindLimit,$YShftFactor,    $XEigFactor,$YEigFactor,$NColour,$ScrRCol,$ScrBRow,$Log2BPC,$Log2BPP,$PalIndex, $ECFIndex,$ModeFlags
$label
        LCLS ScrSize
        &       0       ; wslist type (default)
        &       $BaseMode
        [ ("$ScreenSize" :RIGHT: 1) = "K"
ScrSize SETS ("$ScreenSize" :LEFT: ((:LEN: "$ScreenSize")-1))
        &       VduExt_ScreenSize, $ScrSize * 1024
        |
        &       VduExt_ScreenSize, $ScreenSize
        ]
        &       VduExt_LineLength, $LineLength
        &       VduExt_XWindLimit, $XWindLimit
        &       VduExt_YWindLimit, $YWindLimit
        &       VduExt_YShftFactor, $YShftFactor
        &       VduExt_XEigFactor, $XEigFactor
        &       VduExt_YEigFactor, $YEigFactor
        &       VduExt_NColour, $NColour
        &       VduExt_ScrRCol, $ScrRCol
        &       VduExt_ScrBRow, $ScrBRow
        &       VduExt_Log2BPC, $Log2BPC
        &       VduExt_Log2BPP, $Log2BPP
        &       VduExt_ModeFlags, $ModeFlags
        &       -1
        MEND

        MACRO
$label  VWSTAB $BaseMode, $ScreenSize,$LineLength,$XWindLimit,$YWindLimit,$YShftFactor,    $XEigFactor,$YEigFactor,$NColour,$ScrRCol,$ScrBRow,$Log2BPC,$Log2BPP,$PalIndex, $ECFIndex,$ModeFlags
        [ AssemblingArthur
$label  VWSTAB1 $BaseMode, $ScreenSize,$LineLength,$XWindLimit,$YWindLimit,$YShftFactor,    $XEigFactor,$YEigFactor,$NColour,$ScrRCol,$ScrBRow,$Log2BPC,$Log2BPP,$PalIndex, $ECFIndex,$ModeFlags
        |
$label  VWSTAB2 $BaseMode, $ScreenSize,$LineLength,$XWindLimit,$YWindLimit,$YShftFactor,    $XEigFactor,$YEigFactor,$NColour,$ScrRCol,$ScrBRow,$Log2BPC,$Log2BPP,$PalIndex, $ECFIndex,$ModeFlags
        ]
        MEND

@


4.5
log
@  Added compile-time support for full-resolution teletext characters in
  teletext emulation mode (MODE 7) for that authentic BBC Micro feel.
  Also introduced a few useful teletext control features via VDU 23,18.
  Unrelatedly, fixed *ScreenLoad to work for interlaced displays.

Detail:
  The new typeface is designed on a 16x20 grid (previously we had used 8x10),
  so it uses a screen resolution of 640x500 pixels (rather than 320x250).
  Since we have been unable to source a genuine teletext font, and since
  examination of a BBC Micro suggests that the genuine font may not have been
  a power-of-2 pixels wide, I have designed one specially, based upon the one
  supplied in Zap distributions (a 12x20 font). Rather than increase the
  amount of workspace that the kernel requires for cacheing graphic
  characters, it now generates them on the fly, as they are required; this
  should only add about 25% to their rendering time.

  The new VDU 23 sequences are as follows:

  VDU 23,18,0,mode,0,0,0,0,0,0
    Switch transparency mode
      mode = 0: "Text" mode: the whole display is set opaque
      mode = 1: "Mix" mode: foreground colours, and both foreground and
        background of boxed text are opaque; non-boxed background colours are
        all transparent
      mode = 2: "Box" mode: boxed regions are opaque, others are transparent
      mode = 3: "TV" mode: the whole display is set transparent
    Default is mode = 0.

  VDU 23,18,1,suspend,0,0,0,0,0,0
    Suspend or resume bitmap updates
    This call allows an application to request that the kernel suspends
    updates to the framebuffer bitmap. This allows for a significant speed
    increase in the rendering time for a large amount of text, for example
    when redrawing a complete teletext page, because each time you plot a
    single character, it can cause the whole of the rest of the line to be
    re-rendered. When you switch out of suspend mode, the whole screen is
    refreshed in a single pass. Note that the appearance of the display is
    undefined is you cause a hardware scroll while in suspend mode.
      suspend = 0: screen update is enabled
      suspend = 1: screen update is suspended
    Default is suspend = 0.

  VDU 23,18,2,reveal,0,0,0,0,0,0
    Reveal/conceal
      reveal = 0: characters between the Conceal control code and the next
        colour control code are replaced by spaces
      reveal = 1: all characters are displayed
    Default is reveal = 0.

  VDU 23,18,3,black_emable,0,0,0,0,0,0
    Enable/disable black foreground colour control codes
      black_enable = 0: control codes &80 and &90 do nothing
      black_enable = 1: control code &80 selects black text, control code
        &90 selects black graphics
    Default is black_enable = 0.

  I have performed some timing tests on the rendering of complete teletext
  pages grabbed from the teletext server. These show that the new code
  generally imposes a 2x speed hit. However, when using the VDU 23,18,1
  suspend function, this improves to a 20% speed increase when compared to
  the old low-resolution code. Better still, because the framebuffer is only
  being updated for the final stage of this process, the screen *appears* to
  be updated some 3x faster than with the old code!

  A comment on the VDU variable Log2BPC is in order: in previous kernels,
  this was able unambiguously to refer to both the framebuffer width of a
  character in bytes, and the framebuffer width of an "addressable pixel" in
  bits; this no longer works with the 16-pixel wide teletext font. Bearing
  in mind that future kernels may support Unicode system fonts where the
  width varies from character to character, I have chosen to fix Log2BPC to
  the "addressable pixel" definition.

Admin:
  Requires HdrSrc 0.89 and (for non-desktop builds) Interlace 0.61. A monitor
  definition file containing a definition for a 640x500 screen mode is also
  required; version 0.40 of ModeFiles contains a suitable mode for STB-400.

  Tested fairly rigourously on an Ursula build, a Lazarus build and an
  STB-400 build, using genuine teletext pages and Yellow River Kingdom.

Version 5.30. Tagged as 'Kernel-5_30'
@
text
@d16 1
a16 1
; 24-May-91
d20 1
a20 49
; pixel rate specifiers

 [ VIDC_Type = "VIDC20"

        MACRO
        Moduli  $pixrate, $v, $r, $d
  [ ChrontelSupport
CRPix_$pixrate	*	CR_HCLK :OR: ((1-1) :SHL: CR_PixelDivShift)
FSyn_$pixrate	*	(63 :SHL: FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
  |
   [ ($v=$r)
CRPix_$pixrate  *       CR_RCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn_$pixrate   *       ((64-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
   |
CRPix_$pixrate  *       CR_VCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn_$pixrate   *       (($v-1):SHL:FSyn_VShift) :OR: (($r-1):SHL:FSyn_RShift)
   ]
  ]
        MEND

  [ MorrisSupport
; Morris only values by RCM 28-Oct-94

        MACRO
        Moduli32  $pixrate, $v, $r, $d
   [ ChrontelSupport
CRPix32_$pixrate  *	CR_HCLK :OR: ((1-1) :SHL: CR_PixelDivShift)
FSyn32_$pixrate	  *	(63 :SHL: FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
   |
    [ {FALSE}
     [ $pixrate >= 12500
CRPix32_$pixrate  *	CR_HCLK :OR: (1-1) :SHL: CR_PixelDivShift	; if pixrate > 12.5MHz then use divide-by-1, and HCLK
     |
CRPix32_$pixrate  *	CR_HCLK :OR: (2-1) :SHL: CR_PixelDivShift	; else use divide-by-2, and HCLK
     ]
FSyn32_$pixrate   *	((2-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift) ; moduli irrelevant, so set to min V, max R
    |
     [ ($v=$r)
CRPix32_$pixrate  *	CR_RCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *	((64-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
     |
CRPix32_$pixrate  *	CR_VCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *	(($v-1):SHL:FSyn_VShift) :OR: (($r-1):SHL:FSyn_RShift)
     ]
    ]
   ]
        MEND


d22 1
a22 1
; Values suitable for any machine with rclk=32MHz (eg Morris based machines)
d24 3
a26 51
        Moduli32  24000,  6,  2,  4
        Moduli32  16000,  2,  2,  2
        Moduli32  12000,  6,  2,  8
        Moduli32   8000,  2,  2,  4
        Moduli32   6000,  2,  2,  5       ;  6.4000000

        Moduli32  25175, 22,  7,  4       ; 25.1428571
        Moduli32  16783, 21,  8,  5       ; 16.8000000
        Moduli32  12587, 11,  4,  7       ; 12.5714286
        Moduli32   8392, 21, 10,  8       ;  8.4000000

        Moduli32  36000,  9,  4,  2

        Moduli32   8800, 11, 5,  8        ;  8.8000000
        Moduli32  17600, 11, 4,  5        ; 17.6000000
        Moduli32  35200, 11, 5,  2        ; 35.3000000
  ] ; MorrisSupport
;
; Updated by TMD 28-Jan-94 to use new VCO range 55-110MHz
;
; Values suitable for any machine with rclk=24MHz (eg Medussa)
;
        Moduli  24000,  2,  2,  1
        Moduli  16000,  8,  2,  6
        Moduli  12000,  2,  2,  2
        Moduli   8000,  2,  2,  3
        Moduli   6000,  2,  2,  4

        Moduli  25175, 21,  5,  4       ; 25.2000000
        Moduli  16783,  7,  2,  5       ; 16.8000000
        Moduli  12587, 21,  5,  8       ; 12.6000000
        Moduli   8392, 14,  5,  8       ;  8.4000000

        Moduli  36000,  6,  2,  2

        Moduli   8800, 44, 15,  8       ;  8.8
        Moduli  17600, 11,  3,  5       ; 17.6
        Moduli  35200, 22,  5,  3       ; 35.2


 | ; VIDC_Type = "VIDC20"
CRPix_24000 * 3 :OR: (0 :SHL: ClockControlShift)
CRPix_16783 * 2 :OR: (1 :SHL: ClockControlShift)
CRPix_16000 * 2 :OR: (0 :SHL: ClockControlShift)
CRPix_12587 * 1 :OR: (1 :SHL: ClockControlShift)
CRPix_12000 * 1 :OR: (0 :SHL: ClockControlShift)
CRPix_8392  * 0 :OR: (1 :SHL: ClockControlShift)
CRPix_8000  * 0 :OR: (0 :SHL: ClockControlShift)
CRPix_25175 * 3 :OR: (1 :SHL: ClockControlShift)
CRPix_36000 * 3 :OR: (2 :SHL: ClockControlShift)
 ]
d29 2
a30 6
$label  VIDC_List $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp
        [ VIDC_Type = "VIDC20"
$label  VIDC_List20 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp
        |
$label  VIDC_List10 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp
        ]
a32 1
; VIDC1 format VIDC list
d34 2
d37 1
a37 1
$label  VIDC_List10 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp
a39 1
        LCLA    sub
a40 71
        LCLA    syncpol
        LCLA    hbpch
        LCLA    hfpch
        [ :LNOT: AssemblingArthur
        &       0       ; VIDC list type (default)
        &       0       ; base mode (irrelevant, all entries overwritten)
        ]
 [ $lbpp = 3
sub     SETA    5
 ]
 [ $lbpp = 2
sub     SETA    7
 ]
 [ $lbpp = 1
sub     SETA    11
 ]
 [ $lbpp = 0
sub     SETA    19
 ]

 [ "$sp"=""
syncpol SETA    0 :SHL: SyncControlShift               ; normal sync polarity
 |
        ASSERT $sp<=3
syncpol SETA    $sp :SHL: SyncControlShift
 ]

; Note that on VIDC1, hbpch and hfpch must be odd, and on VIDC20 they must be even
; The macro now specifies them as even.
; So increase back porch and reduce front porch by 1

        ASSERT  ($hsync :AND: 1)=0
        ASSERT  ($hbpch :AND: 1)=0
hbpch   SETA    ($hbpch) + 1
        ASSERT  ($hlbdr :AND: 1)=0
        ASSERT  ($hdisp :AND: 1)=0
        ASSERT  ($hrbdr :AND: 1)=0
        ASSERT  ($hfpch :AND: 1)=0
hfpch   SETA    ($hfpch) - 1
 [ (($hsync+hbpch+$hlbdr+$hdisp+$hrbdr+hfpch) :AND: 3)<>0
        ! 0, "Warning: mode unsuitable for interlaced use"
 ]
; Horizontal
        &       (&80:SHL:24) :OR: ((($hsync+hbpch+$hlbdr+$hdisp+$hrbdr+hfpch -2  )/2) :SHL: 14) ; HCR
        &       (&84:SHL:24) :OR: ((($hsync                                    -2  )/2) :SHL: 14) ; HSWR
        &       (&88:SHL:24) :OR: ((($hsync+hbpch                             -1  )/2) :SHL: 14) ; HBSR
        &       (&8C:SHL:24) :OR: ((($hsync+hbpch+$hlbdr                      -sub)/2) :SHL: 14) ; HDSR
        &       (&90:SHL:24) :OR: ((($hsync+hbpch+$hlbdr+$hdisp               -sub)/2) :SHL: 14) ; HDER
        &       (&94:SHL:24) :OR: ((($hsync+hbpch+$hlbdr+$hdisp+$hrbdr        -1  )/2) :SHL: 14) ; HBER
        &       (&9C:SHL:24) :OR: (((($hsync+hbpch+$hlbdr+$hdisp+$hrbdr+hfpch-2)/2+1)/2):SHL:14); HIR
; Vertical
        &       (&A0:SHL:24) :OR: (($vsync+$vbpch+$vlbdr+$vdisp+$vrbdr+$vfpch    -1)    :SHL: 14) ; VCR
        &       (&A4:SHL:24) :OR: (($vsync                                       -1)    :SHL: 14) ; VSWR
        &       (&A8:SHL:24) :OR: (($vsync+$vbpch                                -1)    :SHL: 14) ; VBSR
        &       (&AC:SHL:24) :OR: (($vsync+$vbpch+$vlbdr                         -1)    :SHL: 14) ; VDSR
        &       (&B0:SHL:24) :OR: (($vsync+$vbpch+$vlbdr+$vdisp                  -1)    :SHL: 14) ; VDER
        &       (&B4:SHL:24) :OR: (($vsync+$vbpch+$vlbdr+$vdisp+$vrbdr           -1)    :SHL: 14) ; VBER
; Control Register
        &       (&E0:SHL:24) :OR: (CRPix_$pixrate) :OR: ($lbpp :SHL: 2) :OR: syncpol
 [ ChrontelSupport
        &       PseudoRegister_PixelRate :OR: $pixrate
 ]
        &       -1
        MEND

        MACRO
$label  VIDC_List20 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp

$label
        LCLA    sp
        LCLA    syncpol
d44 1
a44 4
        [ :LNOT: AssemblingArthur
        &       0       ; VIDC list type (default)
        &       0       ; base mode (irrelevant, all entries overwritten)
        ]
a50 16
syncpol SETA    0
 [ (sp :AND: 1) <> 0
syncpol SETA    syncpol :OR: Ext_InvertHSYNC
 ]
 [ (sp :AND: 2) <> 0
syncpol SETA    syncpol :OR: Ext_InvertVSYNC
 ]

        ASSERT  ($hsync :AND: 1)=0
        ASSERT  ($hbpch :AND: 1)=0
        ASSERT  ($hlbdr :AND: 1)=0
        ASSERT  ($hdisp :AND: 1)=0
        ASSERT  ($hrbdr :AND: 1)=0
        ASSERT  ($hfpch :AND: 1)=0

        ASSERT (($hsync+$hbpch+$hlbdr+$hdisp+$hrbdr+$hfpch) :AND: 3)=0
d52 1
a54 1
dwidth  SETA    dwidth / 32
d61 23
a83 21
; Horizontal
        &       (&80:SHL:24) :OR: ($hsync+$hbpch+$hlbdr+$hdisp+$hrbdr+$hfpch-8)         ; HCR
        &       (&81:SHL:24) :OR: ($hsync                                   -8)         ; HSWR
        &       (&82:SHL:24) :OR: ($hsync+$hbpch                           -12)         ; HBSR
        &       (&83:SHL:24) :OR: ($hsync+$hbpch+$hlbdr                    -18)         ; HDSR
        &       (&84:SHL:24) :OR: ($hsync+$hbpch+$hlbdr+$hdisp             -18)         ; HDER
        &       (&85:SHL:24) :OR: ($hsync+$hbpch+$hlbdr+$hdisp+$hrbdr      -12)         ; HBER
        &       (&87:SHL:24) :OR: ($hsync+$hbpch+$hlbdr+$hdisp+$hrbdr+$hfpch  )/2       ; HIR
; Vertical
        &       (&90:SHL:24) :OR: ($vsync+$vbpch+$vlbdr+$vdisp+$vrbdr+$vfpch -2)        ; VCR
        &       (&91:SHL:24) :OR: ($vsync                                    -2)        ; VSWR
        &       (&92:SHL:24) :OR: ($vsync+$vbpch                             -2)        ; VBSR
        &       (&93:SHL:24) :OR: ($vsync+$vbpch+$vlbdr                      -2)        ; VDSR
        &       (&94:SHL:24) :OR: ($vsync+$vbpch+$vlbdr+$vdisp               -2)        ; VDER
        &       (&95:SHL:24) :OR: ($vsync+$vbpch+$vlbdr+$vdisp+$vrbdr        -2)        ; VBER
; Data Control Register
 [ MEMC_Type = "IOMD"
; Note: the bus bits get overwritten by the mode change code, to set it up correctly for 1 or 2 MBytes of VRAM
        &       VIDCDataControl :OR: DCR_VRAMOff :OR: DCR_Bus31_0 :OR: (dwidth :SHL: DCR_HDWRShift) :OR: DCR_Sync
 |
        &       VIDCDataControl :OR: DCR_VRAMOff :OR: DCR_Bus31_0 :OR: (dwidth :SHL: DCR_HDWRShift)
d85 5
a89 18
; External Register
        &       VIDCExternal :OR: Ext_DACsOn :OR: Ext_ERegExt :OR: syncpol
; Frequency Synthesizer Register (rclk=24MHz)
        &       VIDCFSyn :OR: (FSyn_$pixrate)
; Control Register (rclk=24MHz)
        &       VIDCControl :OR: (4 :SHL: CR_FIFOLoadShift) :OR: (CR_LBPP$lbpp) :OR: (CRPix_$pixrate)
 [ ChrontelSupport
        &       PseudoRegister_PixelRate :OR: $pixrate
 ]
        &       -1
 [ MorrisSupport
; Frequency Synthesizer Register (32MHz)
        &       VIDCFSyn :OR: (FSyn32_$pixrate)
; Control Register (32MHz)
        &       VIDCControl :OR: (4 :SHL: CR_FIFOLoadShift) :OR: (CR_LBPP$lbpp) :OR: (CRPix32_$pixrate)
        &       -1
 ]
        MEND
d92 1
a92 1
NumModes        *       50
a100 1
 [ VIDC_Type = "VIDC20"
a101 4
 |
        CMP     $reg, #32               ; if not 32 (EQ => CS)
        CMPNE   $reg, #NumModes         ; and less than ??
 ]
a106 1
 [ VIDC_Type = "VIDC20"
a107 4
 |
        CMP     $reg, #32               ; if not 32 (EQ => CS)
        CMPNE   $reg, #NumModes         ; and less than ??
 ]
d111 1
d113 74
d209 6
d219 1
d223 6
d233 1
d255 5
d261 3
a297 1
 [ VIDC_Type = "VIDC20"
a298 3
 |
        &       -1                      ; 32
 ]
d316 4
d321 4
d377 4
d382 3
d437 4
d442 3
a478 1
 [ VIDC_Type = "VIDC20"
a479 3
 |
        &       -1                      ; 32
 ]
d497 4
d502 3
d532 4
a535 4
        &       -1                      ; 25
        &       -1                      ; 26
        &       -1                      ; 27
        &       -1                      ; 28
d557 4
d562 3
d617 4
d622 3
d677 4
d682 3
d737 4
d744 39
d790 1
a790 1
 [ :LNOT: HiResTTX
d792 1
a792 1
 ]
d803 6
d811 6
d821 5
d834 4
d843 1
d890 4
a896 1
 [ VIDC_Type = "VIDC20"
a897 1
 ]
d909 3
d913 1
d931 14
a949 3
  [ VIDC_Type <> "VIDC20"
F_VLM_32 * 0
  ]
d962 1
a962 1
        =       F_VLM_48, F_VLM_49
d1019 4
d1054 4
a1057 5
 [ VIDC_Type = "VIDC20"
VIDCParmsSize * (128*4) ; 128 words from 80xxxxxx to FFxxxxxx step 01000000
 |
VIDCParmsSize * (32*4)  ; 32 words from 80xxxxxx to FCxxxxxx step 04000000
 ]
d1059 1
a1059 1
PushedInfoSize * wkwordsize + VIDCParmsSize
d1069 1
a1091 44
 [ MakeModeSelectorsForModeNumbers
xres    SETA    (($XWindLimit+1):SHL:($Log2BPC)):SHR:($Log2BPP)
yres    SETA    ($YWindLimit)+1
pixdepth SETA   $Log2BPP
  [ yres < xres/2
yeig    SETA    2
  |
yeig    SETA    1
  ]

ModeSelector_$label
        &       1, xres, yres, pixdepth
        &       -1                                              ; frame rate (is this going to be OK?)
  [ {FALSE} ; don't need any of this stuff - we're only getting the VIDC stuff via this mechanism
   [ ($ModeFlags)<>0
        &       VduExt_ModeFlags, $ModeFlags
   ]
   [ ($ScrRCol) <> (xres :SHR: 3)-1
        &       VduExt_ScrRCol, $ScrRCol
   ]
   [ ($ScrBRow) <> (yres :SHR: 3)-1
        &       VduExt_ScrBRow, $ScrBRow
   ]
   [ ($NColour) <> NColour_$Log2BPP
        &       VduExt_NColour, $NColour
   ]
   [ ($XEigFactor) <> 1
        &       VduExt_XEigFactor, $XEigFactor
   ]
   [ ($YEigFactor) <> yeig
        &       VduExt_YEigFactor, $YEigFactor
   ]
   [ ($LineLength) <> (xres :SHL: pixdepth) :SHR: 3
        &       VduExt_LineLength, $LineLength
   ]
   [ scrsz <> ((xres * yres) :SHL: pixdepth) :SHR: 3
        &       VduExt_ScreenSize, scrsz
   ]
   [ ($Log2BPC) <> pixdepth
        &       VduExt_Log2BPC, $Log2BPC
   ]
  ]
        &       -1                                              ; terminator
 ]
d1133 1
a1133 1
VW_3    VWSTAB  3, 40K,160, 639,249,5,1,2, 1, 79, 24,1,1,0,0,Flag_NonGraphic+Flag_GapMode+Flag_BBCGapMode  ; MODE 3
d1136 5
a1140 1
VW_6    VWSTAB  6, 20K, 80, 319,249,4,2,2, 1, 39, 24,1,1,0,0,Flag_NonGraphic+Flag_GapMode+Flag_BBCGapMode  ; MODE 6
d1142 1
a1142 1
VW_7    VWSTAB  7,320K,320, 639,499,5,1,1,15, 39, 24,2,2,4,0,Flag_NonGraphic+Flag_GapMode+Flag_Teletext+Flag_DoubleVertical ; MODE 7
d1144 2
a1145 1
VW_7    VWSTAB  7, 80K,160, 319,249,5,2,2,15, 39, 24,2,2,4,0,Flag_NonGraphic+Flag_GapMode+Flag_Teletext    ; MODE 7
d1150 1
a1150 1
VW_11   VWSTAB 11, 40K,160, 639,249,5,1,2, 3, 79, 24,1,1,1,2,Flag_GapMode                                  ; MODE 11
d1153 1
a1153 1
VW_14   VWSTAB 14, 80K,320, 639,249,6,1,2,15, 79, 24,2,2,2,3,Flag_GapMode                                  ; MODE 14
d1156 1
a1156 1
VW_17   VWSTAB 17,132K,528,1055,249,0,1,2,15,131, 24,2,2,2,3,Flag_GapMode                                  ; MODE 17
d1162 1
a1162 1
VW_23   VWSTAB 23,M23S,144,1151,895,0,1,1, 1,143, 55,0,0,5,4,Flag_HiResMono+Flag_DoubleVertical            ; MODE 23
a1171 1
 [ VIDC_Type = "VIDC20"
a1172 3
 |
VW_32 * VW_31
 ]
d1192 1
a1192 1
VW_47 VWSTAB 47,M47S*8,360, 359,479,0,2,2,63, 89, 59,3,3,3,5,0                                             ; PCSoft 360 x 480 x 8bpp
d1196 5
a1206 21
 [ MakeModeSelectorsForModeNumbers
ModeSelectorTable
        GBLA    modecount
        GBLS    h
        GBLS    l
modecount SETA  0
        ASSERT  NumModes <= 100
        WHILE   modecount < NumModes
  [ modecount >= 10
h       SETS    :CHR:(&30 + modecount/10)
  |
h       SETS    ""
  ]
l       SETS    :CHR:(&30 + modecount :MOD: 10)
        &       ModeSelector_VW_$h$l-ModeSelectorTable
modecount SETA  modecount + 1
        WEND

        ! 0,    "Mode selector table at ":CC: :STR: ModeSelectorTable
 ]

@


4.5.2.1
log
@partial video changes for kernel/HAL split
near-HAL code for VIDC/IOMD in vdu.vduhint
briefly tested in Ursula desktop build
still some kernel workspace dependency in near-HAL code

Version 5.35, 4.79.2.3. Tagged as 'Kernel-5_35-4_79_2_3'
@
text
@d22 1
d27 2
a28 2
CRPix_$pixrate  *       CR_HCLK :OR: ((1-1) :SHL: CR_PixelDivShift)
FSyn_$pixrate   *       (63 :SHL: FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
d46 2
a47 2
CRPix32_$pixrate  *     CR_HCLK :OR: ((1-1) :SHL: CR_PixelDivShift)
FSyn32_$pixrate   *     (63 :SHL: FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
d51 1
a51 1
CRPix32_$pixrate  *     CR_HCLK :OR: (1-1) :SHL: CR_PixelDivShift       ; if pixrate > 12.5MHz then use divide-by-1, and HCLK
d53 1
a53 1
CRPix32_$pixrate  *     CR_HCLK :OR: (2-1) :SHL: CR_PixelDivShift       ; else use divide-by-2, and HCLK
d55 1
a55 1
FSyn32_$pixrate   *     ((2-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift) ; moduli irrelevant, so set to min V, max R
d58 2
a59 2
CRPix32_$pixrate  *     CR_RCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *     ((64-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
d61 2
a62 2
CRPix32_$pixrate  *     CR_VCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *     (($v-1):SHL:FSyn_VShift) :OR: (($r-1):SHL:FSyn_RShift)
d92 1
a92 1
; Values suitable for any machine with rclk=24MHz (eg Medusa)
d111 12
a122 7
; mjs Kernel/HAL split
;
; BigVIDCTable is now in hardware independent format, ie. a VIDC list type 3
;
; Macro VIDC_List10 removed - hardware specific, and very old anyway! (VIDC1 is pre Medusa)
; Macro VIDC_List20 removed - hardware specific, not needed in HAL either
; Macro VIDC_ListT3 newly defined
d126 5
a130 1
$label  VIDC_ListT3 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp
d133 27
a159 39
;
; format of a VIDC list type 3
;
                                ^       4
VIDCList3_PixelDepth            #       4
VIDCList3_HorizSyncWidth        #       4
VIDCList3_HorizBackPorch        #       4
VIDCList3_HorizLeftBorder       #       4
VIDCList3_HorizDisplaySize      #       4
VIDCList3_HorizRightBorder      #       4
VIDCList3_HorizFrontPorch       #       4
VIDCList3_VertiSyncWidth        #       4
VIDCList3_VertiBackPorch        #       4
VIDCList3_VertiTopBorder        #       4
VIDCList3_VertiDisplaySize      #       4
VIDCList3_VertiBottomBorder     #       4
VIDCList3_VertiFrontPorch       #       4
VIDCList3_PixelRate             #       4
VIDCList3_SyncPol               #       4  ; sync polarity/flag bits
VIDCList3_ControlList           #       0  ; possibly empty list of pairs of index,value words
;
; and VIDCList3 is terminated by a -1 word
;
; Indices in VIDCList3_ControlList
;
                                ^       1
ControlList_LCDMode             #       1
ControlList_LCDDualPanelMode    #       1
ControlList_LCDOffset0          #       1
ControlList_LCDOffset1          #       1
ControlList_HiResMode           #       1
ControlList_DACControl          #       1
ControlList_RGBPedestals        #       1
ControlList_ExternalRegister    #       1
ControlList_HClockSelect        #       1
ControlList_RClockFrequency     #       1
ControlList_DPMSState           #       1
ControlList_Interlaced          #       1
ControlList_InvalidReason       #       0
d161 6
a166 6
; bits/flags in VIDCList3_SyncPol word:
;
SyncPol_InvertHSync        *  1
SyncPol_InvertVSync        *  2
SyncPol_InterlaceSpecified *  4   ; if set, interlace bit has been specified, else filled in by kernel
SyncPol_Interlace          *  8   ; set=interlaced, either specified by service call claimant or filled in from *TV by kernel
d168 37
a205 2
; Macro VIDC_ListT3 - for hardware independent table (using 'VIDC' list type 3 format, see PRM 5a-125)
; 
d207 1
a207 1
$label  VIDC_ListT3 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp
d211 1
d215 4
a218 1

d225 16
a241 1
; just to check width is whole number of words (to suit rendering code)
d244 1
d251 40
a290 25
;
        &       3                ; format (type 3)
        &       $lbpp            ; log2 bits per pixel
; Horizontal (in pixels)
        &       $hsync           ; sync width
        &       $hbpch           ; back porch
        &       $hlbdr           ; left border
        &       $hdisp           ; display size
        &       $hrbdr           ; right border
        &       $hfpch           ; front porch
; Vertical (in rasters)
        &       $vsync           ; sync width
        &       $vbpch           ; back porch
        &       $vlbdr           ; top border
        &       $vdisp           ; display size
        &       $vrbdr           ; bottom border
        &       $vfpch           ; front porch
;
        &       $pixrate         ; pixel rate (kHz)
        &       sp               ; sync polarity
        &       -1               ; terminator (no video control parameters)

        MEND   ; MACRO VIDC_ListT3


d302 1
d304 4
d313 1
d315 4
a322 1
 ! 0,"BigVIDCTable at ":CC:(:STR:BigVIDCTable)
d412 1
d414 3
d575 1
d577 3
d900 1
d902 1
d937 3
d1040 5
a1044 3
;VIDC list type 3 size (hardware independent video controller list)
;
VIDCList3Size * (64 + 16*8 + 4) ; primary params, up to 16 video control params, terminator
d1046 1
a1046 1
PushedInfoSize * wkwordsize + VIDCList3Size
d1197 1
d1199 3
@


4.5.2.2
log
@first attemp at mjs video code in real HAL
@
text
@d16 1
a16 1
; 
d19 90
@


4.5.2.3
log
@set mode working with LCD
@
text
@a153 1

d155 1
a155 4

;
;       monitor type 0, 50Hz TV
;
a210 3
;
;       monitor type 1, multiscan
;
a263 4

;
;       monitor type 2, HiRes
;
a316 3
;
;       monitor type 3, VGA
;
a369 3
;
;       monitor type 4, SVGA
;
a422 3
;
;       monitor type 5, LCD
;
d450 4
a453 4
        &       LCD_25 - BigVIDCTable   ; 25
        &       LCD_26 - BigVIDCTable   ; 26
        &       LCD_27 - BigVIDCTable   ; 27
        &       LCD_28 - BigVIDCTable   ; 28
a475 3
;
;       monitor type 6, reserved?
;
a528 3
;
;       monitor type 7, file
;
a581 3
;
;       monitor type 8, 60Hz TV
;
a753 5

LCD_25   VIDC_List 0,  8, 32,  0, 640,  0,16,1,  1, 0,480,0,  1,30000,0
LCD_26   VIDC_List 1,  8, 32,  0, 640,  0,16,1,  1, 0,480,0,  1,30000,0
LCD_27   VIDC_List 2,  8, 32,  0, 640,  0,16,1,  1, 0,480,0,  1,30000,0
LCD_28   VIDC_List 3,  8, 32,  0, 640,  0,16,1,  1, 0,480,0,  1,30000,0
@


4.5.2.4
log
@More stuff. Up to the desktop now; cache on, working keyboard. Some source
restructuring to start to make splitting it up into several object files more
feasible.
@
text
@d16 1
a16 1
;
d82 1
a82 1
;
d784 4
a787 4
LCD_25   VIDC_List 0,  8, 32,  0, 640,  0,16,1,  0, 0,480,0,  0,27000,0
LCD_26   VIDC_List 1,  8, 32,  0, 640,  0,16,1,  0, 0,480,0,  0,27000,0
LCD_27   VIDC_List 2,  8, 32,  0, 640,  0,16,1,  0, 0,480,0,  0,27000,0
LCD_28   VIDC_List 3,  8, 32,  0, 640,  0,16,1,  0, 0,480,0,  0,27000,0
@


4.5.2.5
log
@minor changes towards Chrontel support for Customer L demo
untested

Version 5.35, 4.79.2.18. Tagged as 'Kernel-5_35-4_79_2_18'
@
text
@a70 1
ControlList_OutputFormat        #       1
@


4.5.2.6
log
@Added 256-colour version of the (high-resolution only) teletext code,
and support for teletext when hardware scroll is disabled. Both are required
for Tungsten.
Turned off the module init/final service calls, since we still don't have an
allocation for them.
Upped the OS version number to 5.01.

Version 5.35, 4.79.2.53. Tagged as 'Kernel-5_35-4_79_2_53'
@
text
@a700 4
 [ TTX256
 ASSERT HiResTTX
VLM_7   VIDC_List 3, 56,112,  0, 640,  0, 88, 3,18, 6,500, 6, 1,24000,0         ; MODE 7
 |
a705 1
 ]
a1019 4
 [ TTX256
 ASSERT HiResTTX
VW_7    VWSTAB  7,640K,640, 639,499,5,1,1,63, 39, 24,3,3,4,0,Flag_NonGraphic+Flag_GapMode+Flag_Teletext+Flag_DoubleVertical ; MODE 7
 |
a1023 1
 ]
@


4.5.2.7
log
@* HAL can choose to limit amount of screen memory to allocate
  [Not fully implemented - for now leaves at least 16MB free if only
  one RAM area; was 1MB].
* Added HAL_USBControllerInfo, HAL_MonitorLeadID and HAL_Video_Render.
* Added HAL->OS call OS_IICOpV.
* OS_MMUControl now allows independent control of I and C bits.
* Added facility to deactivate keyboard debounce (magic word "NoKd" in
  R2 in KeyV 0).
* Fixed problem with RAM amounts not a multiple of 4MB.
* Supremacy bit (in VDU 19) now sets all 8 bits of supremacy.
* Added PaletteV 14 (reads gamma tables).
* Added Supremacy transfer functions (like gamma correction, but for
  supremacy). Allows easy global supremacy effects in a mode-independent
  fashion. Controlled with PaletteV 15,16.
* Added modes 50-53 (320x240, 1,2,4,8bpp). Intended for small LCD.
* Added 13.5kHz versions of TV modes (selected by Hdr:Machine).
* Upped desktop version to 5.06.

Version 5.35, 4.79.2.66. Tagged as 'Kernel-5_35-4_79_2_66'
@
text
@d29 2
a30 2
$label  VIDC_List $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp,$int
$label  VIDC_ListT3 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp,$int
d85 1
a85 1
$label  VIDC_ListT3 $lbpp,$hsync,$hbpch,$hlbdr,$hdisp,$hrbdr,$hfpch, $vsync,$vbpch,$vlbdr,$vdisp,$vrbdr,$vfpch,$pixrate,$sp,$int
a128 4
 [ "$int"<>""
        &       ControlList_Interlaced
        &       1
 ]
d136 1
a136 1
NumModes        *       54
a160 70
 [ Only13500kHzTV
        &       VLN_0  - BigVIDCTable   ; 0
        &       -1                      ; 1
        &       -1                      ; 2
        &       VLN_3  - BigVIDCTable   ; 3
        &       VLN_4  - BigVIDCTable   ; 4
        &       -1                      ; 5
        &       -1                      ; 6
        &       -1                      ; 7
        &       VLN_8  - BigVIDCTable   ; 8
        &       -1                      ; 9
        &       -1                      ; 10
        &       VLN_11 - BigVIDCTable   ; 11
        &       VLN_12 - BigVIDCTable   ; 12
        &       -1                      ; 13
        &       VLN_14 - BigVIDCTable   ; 14
        &       VLN_15 - BigVIDCTable   ; 15
        &       -1                      ; 16
        &       -1                      ; 17
   [ HWInterlace
        &       VLN_18 - BigVIDCTable   ; 18
        &       VLN_19 - BigVIDCTable   ; 19
        &       VLN_20 - BigVIDCTable   ; 20
        &       VLN_21 - BigVIDCTable   ; 21
   |
        &       -1                      ; 18
        &       -1                      ; 19
        &       -1                      ; 20
        &       -1                      ; 21
   ]
        &       -1                      ; 22
        &       -1                      ; 23
        &       -1                      ; 24
   [ HWInterlace
        &       VLN_25 - BigVIDCTable   ; 25
        &       VLN_26 - BigVIDCTable   ; 26
        &       VLN_27 - BigVIDCTable   ; 27
        &       VLN_28 - BigVIDCTable   ; 28
   |
        &       -1                      ; 25
        &       -1                      ; 26
        &       -1                      ; 27
        &       -1                      ; 28
   ]
        &       -1                      ; 29
        &       -1                      ; 30
        &       -1                      ; 31
        &       -1                      ; 32
        &       -1                      ; 33
        &       -1                      ; 34
        &       -1                      ; 35
        &       -1                      ; 36
        &       -1                      ; 37
        &       -1                      ; 38
        &       -1                      ; 39
        &       -1                      ; 40
        &       -1                      ; 41
        &       -1                      ; 42
        &       -1                      ; 43
        &       -1                      ; 44
        &       -1                      ; 45
        &       -1                      ; 46
        &       -1                      ; 47
        &       -1                      ; 48
        &       -1                      ; 49
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53
 |
a182 6
   [ HWInterlace
        &       VLN_18 - BigVIDCTable   ; 18
        &       VLN_19 - BigVIDCTable   ; 19
        &       VLN_20 - BigVIDCTable   ; 20
        &       VLN_21 - BigVIDCTable   ; 21
   |
a186 1
   ]
a189 6
   [ HWInterlace
        &       VLN_25 - BigVIDCTable   ; 25
        &       VLN_26 - BigVIDCTable   ; 26
        &       VLN_27 - BigVIDCTable   ; 27
        &       VLN_28 - BigVIDCTable   ; 28
   |
a193 1
   ]
a214 5
        &       VLN_50 - BigVIDCTable   ; 50
        &       VLN_51 - BigVIDCTable   ; 51
        &       VLN_52 - BigVIDCTable   ; 52
        &       VLN_53 - BigVIDCTable   ; 53
 ]
a270 4
        &       VLM_50 - BigVIDCTable   ; 50
        &       VLM_51 - BigVIDCTable   ; 51
        &       VLM_52 - BigVIDCTable   ; 52
        &       VLM_53 - BigVIDCTable   ; 53
a327 4
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53
a383 4
        &       VgaX_50 - BigVIDCTable  ; 50
        &       VgaX_51 - BigVIDCTable  ; 51
        &       VgaX_52 - BigVIDCTable  ; 52
        &       VgaX_53 - BigVIDCTable  ; 53
a439 4
        &       VgaX_50 - BigVIDCTable  ; 50
        &       VgaX_51 - BigVIDCTable  ; 51
        &       VgaX_52 - BigVIDCTable  ; 52
        &       VgaX_53 - BigVIDCTable  ; 53
a495 4
        &       LCD_50 - BigVIDCTable   ; 50
        &       LCD_51 - BigVIDCTable   ; 51
        &       LCD_52 - BigVIDCTable   ; 52
        &       LCD_53 - BigVIDCTable   ; 53
a551 4
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53
a607 4
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53
a663 4
        &       -1                      ; 50
        &       -1                      ; 51
        &       -1                      ; 52
        &       -1                      ; 53
a666 39
 ; Now supply an alternate 13.5MHz-based (wide)
 [ Only13500kHzTV
VLN_0   VIDC_List 0, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 0
F_VLN_1 * 50
F_VLN_2 * 50
VLN_3   VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,19,250,19, 2,13500,0         ; MODE 3
VLN_4   VIDC_List 0, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 4
F_VLN_5 * 50
F_VLN_6 * 50
F_VLN_7 * 50
VLN_8   VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 8
F_VLN_9 * 50
F_VLN_10 * 50
VLN_11  VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,19,250,19, 2,13500,0         ; MODE 11
VLN_12  VIDC_List 2, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 12
F_VLN_13 * 50
VLN_14  VIDC_List 2, 64, 62, 40, 640, 40, 18, 3,19,19,250,19, 2,13500,0         ; MODE 14
VLN_15  VIDC_List 3, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0         ; MODE 15
F_VLN_16 * 50
F_VLN_17 * 50
   [ HWInterlace
VLN_18  VIDC_List 0, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0,int     ; MODE 18
VLN_19  VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0,int     ; MODE 19
VLN_20  VIDC_List 2, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0,int     ; MODE 20
VLN_21  VIDC_List 3, 64, 62, 40, 640, 40, 18, 3,19,16,256,16, 2,13500,0,int     ; MODE 21
   ]
F_VLN_22 * 50
F_VLN_24 * 50
   [ HWInterlace
VLN_25  VIDC_List 0, 64, 62, 40, 640, 40, 18, 3,19,24,240,24, 2,13500,0,int     ; MODE 25
VLN_26  VIDC_List 1, 64, 62, 40, 640, 40, 18, 3,19,24,240,24, 2,13500,0,int     ; MODE 26
VLN_27  VIDC_List 2, 64, 62, 40, 640, 40, 18, 3,19,24,240,24, 2,13500,0,int     ; MODE 27
VLN_28  VIDC_List 3, 64, 62, 40, 640, 40, 18, 3,19,24,240,24, 2,13500,0,int     ; MODE 28
   ]
F_VLN_33 * 50
F_VLN_34 * 50
F_VLN_35 * 50
F_VLN_36 * 50
 |
d674 1
a674 1
   [ :LNOT: HiResTTX
d676 1
a676 1
   ]
a686 6
   [ HWInterlace
VLN_18  VIDC_List 0, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0,int     ; MODE 18
VLN_19  VIDC_List 1, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0,int     ; MODE 19
VLN_20  VIDC_List 2, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0,int     ; MODE 20
VLN_21  VIDC_List 3, 76, 88, 96, 640, 96, 28, 3,19,16,256,16, 2,16000,0,int     ; MODE 21
   ]
a688 6
   [ HWInterlace
VLN_25  VIDC_List 0, 76, 88, 96, 640, 96, 28, 3,19,24,240,24, 2,16000,0,int     ; MODE 25
VLN_26  VIDC_List 1, 76, 88, 96, 640, 96, 28, 3,19,24,240,24, 2,16000,0,int     ; MODE 26
VLN_27  VIDC_List 2, 76, 88, 96, 640, 96, 28, 3,19,24,240,24, 2,16000,0,int     ; MODE 27
VLN_28  VIDC_List 3, 76, 88, 96, 640, 96, 28, 3,19,24,240,24, 2,16000,0,int     ; MODE 28
   ]
a692 5
VLN_50  VIDC_List 0, 38, 44, 48, 320, 48, 14, 3,19,24,240,24, 2, 8000,0         ; MODE 50
VLN_51  VIDC_List 1, 38, 44, 48, 320, 48, 14, 3,19,24,240,24, 2, 8000,0         ; MODE 51
VLN_52  VIDC_List 2, 38, 44, 48, 320, 48, 14, 3,19,24,240,24, 2, 8000,0         ; MODE 52
VLN_53  VIDC_List 3, 38, 44, 48, 320, 48, 14, 3,19,24,240,24, 2, 8000,0         ; MODE 53
 ]
a756 4
VLM_50  VIDC_List 0, 36, 30, 44, 320, 44, 38, 3,16,25,240,25, 3, 8000,0
VLM_51  VIDC_List 1, 36, 30, 44, 320, 44, 38, 3,16,25,240,25, 3, 8000,0
VLM_52  VIDC_List 2, 36, 30, 44, 320, 44, 38, 3,16,25,240,25, 3, 8000,0
VLM_53  VIDC_List 3, 36, 30, 44, 320, 44, 38, 3,16,25,240,25, 3, 8000,0
a789 5
VgaX_50  VIDC_List 0, 48, 22,  0, 320,  0,10, 2,58,56,240,56,37,12587,2
VgaX_51  VIDC_List 1, 48, 22,  0, 320,  0,10, 2,58,56,240,56,37,12587,2
VgaX_52  VIDC_List 2, 48, 22,  0, 320,  0,10, 2,58,56,240,56,37,12587,2
VgaX_53  VIDC_List 3, 48, 22,  0, 320,  0,10, 2,58,56,240,56,37,12587,2

a793 4
LCD_50   VIDC_List 0,132,220,  0, 320, 0,220,1,  3, 0,240,0,  4,16000,0
LCD_51   VIDC_List 1,132,220,  0, 320, 0,220,1,  3, 0,240,0,  4,16000,0
LCD_52   VIDC_List 2,132,220,  0, 320, 0,220,1,  3, 0,240,0,  4,16000,0
LCD_53   VIDC_List 3,132,220,  0, 320, 0,220,1,  3, 0,240,0,  4,16000,0
d812 1
a812 1
        =       F_VLM_48, F_VLM_49, F_LCD_50, F_LCD_51, F_LCD_52, F_LCD_53
a868 4
 & VW_50 - Vwstab      ; MODE  50
 & VW_51 - Vwstab      ; MODE  51
 & VW_52 - Vwstab      ; MODE  52
 & VW_53 - Vwstab      ; MODE  53
a913 1
M50S *  320*240/8
a1082 5

VW_50 VWSTAB 50,M50S  , 40, 319,239,0,2,2, 1, 39, 29,0,0,0,4,0
VW_51 VWSTAB 51,M50S*2, 80, 319,239,0,2,2, 3, 39, 29,1,1,1,2,0
VW_52 VWSTAB 52,M50S*4,160, 319,239,0,2,2,15, 39, 29,2,2,2,3,0
VW_53 VWSTAB 53,M50S*8,320, 319,239,0,2,2,63, 39, 29,3,3,3,5,0
@


4.5.2.8
log
@	told kernel of ControlList_ExtraBytes reason code.
	no other changes
Detail:
Admin:


Version 5.35, 4.79.2.91. Tagged as 'Kernel-5_35-4_79_2_91'
@
text
@a71 1
ControlList_ExtraBytes          #       1
@


4.5.2.9
log
@Correct mode 47 parameters
Detail:
  s/vdu/vdumodes - Mode 47 is 360 pixels wide, so should be 45 text columns, not 90
Admin:
  Tested in Iyonix ROM softload


Version 5.35, 4.79.2.140. Tagged as 'Kernel-5_35-4_79_2_140'
@
text
@d1280 1
a1280 1
VW_47 VWSTAB 47,M47S*8,360, 359,479,0,2,2,63, 44, 59,3,3,3,5,0                                             ; PCSoft 360 x 480 x 8bpp
@


4.5.2.10
log
@Add support for the new RISC OS 5 style sprite mode word. Add partial support for alpha channel sprite masks. Implement OS_ScreenMode reasons 13-15
Detail:
  ECFShift/ECFYOffset:
  - hdr/PublicWS - Add ECFShift and ECFYOffset to list of public exports (SpriteExtend was using hardcoded values). Rearrange exports so that VduWorkspace exports are now labelled as such.
  - hdr/KernelWS - Make sure ECFShift & ECFYOffset match their exported locations
  - hdr/OSRSI6, s/Middle - Add OS_ReadSysInfo 6 items 83 & 84, for reading ECFYOffset and ECFShift locations
  Mode flags/VDU variables:
  - Makefile - Add hdr/VduExt to the C header exports
  - hdr/VduExt - Get rid of NotRVVTBarWobblyBits macro and defined VDU variables manually so that Hdr2H will handle them. Begin replacing overly generic 'Flag_*' mode flag definitions with 'ModeFlag_*' instead. Define new flags as required by the new screen/sprite modes. Add OS_ScreenMode reason codes and mode selector format (from s.vdu.vdudecl)
  - NewModes/NEWF2, NewModes/OldPSSrc, NewModes/PSSrc, s.vdu.vdu23, s.vdu.vducursoft, s.vdu.vdudriver, s.vdu.vdugrafg, s.vdu.vdugrafj, s.vdu.vdugrafl, s.vdu.vdumodes, s.vdu.vdupal10, s.vdu.vdupal20, s.vdu.vdupalette, s.vdu.vdupalxx, s.vdu.vduwrch - Renaming Flag_* to ModeFlag_*
  - s.vdu.vdudecl - Remove OS_ScreenMode reason codes & mode selector format definitions; these are now in hdr/VduExt. Flag_* -> ModeFlag_* renaming.
  - s.vdu.vdupalxx - Apply a greyscale palette in PV_SetDefaultPalette if the greyscale mode flag is set
  New sprite types:
  - s.vdu.vdudriver - Extend GenerateModeSelectorVars to deal with the wide mask flag, 64K sprites, and the new RISC OS 5 sprite mode word format.
  - s.vdu.vdugrafdec - Store more information about the sprite in the SprReadNColour ... SprLog2BPC block.
  - s.vdu.vdugrafg - Update SpriteVecHandler to be able to detect whether RISC OS 5 format sprites are allowed palettes. Update SetupSprModeData to store the extra sprite info that's defined in vdugrafdec. Update PutSprite to fault any sprites with wide masks - SpriteExtend must be used for that (once implemented!)
  - s.vdu.vdugrafh - Update WritePixelColour to avoid temporary poking of NColour VDU variable for 8bpp sprites. Correctly replicate data when writing to RISC OS 5 format sprites. Update ReadPixelMask, WritePixelMask, SpriteMaskAddr, GetMaskspWidth to deal with wide masks. Delete obsolete bounce_new_format_masks routine.
  - s.vdu.vdugrafi - Comment updated to reflect new reality
  - s.vdu.vdugrafj - Get rid of unused code block in CreateHeader/PostCreateHeader. Update SanitizeSGetMode to generate RISC OS 5 style sprite mode words where applicable. Update DecideMaskSize to rely on GetMaskspWidth for calculating mask width.
  - s.vdu.vdugrafl - Update SwitchOutputToSprite/SwitchOutputToMask to deal with the new sprite formats. Allow PushModeInfoAnyMonitor to fail.
  - s.vdu.vduswis - Extended OS_ReadModeVariable to cope with new sprite types
  Misc:
  - s.vdu.vdudriver - Fixed bug with VIDCList copying where any -1 value in the structure would terminate the copy, instead of only -1 as a control item number
  - s.vdu.vduswis - Implemented OS_ScreenMode 13 (Mode string to specifier), 14 (mode specifier to string), and 15 (set mode by string). Mostly as per ROL's specs, but minus support for teletext attributes, and plus support for new RISC OS 5 attributes (L... layout specifier, 4096 & 24bpp packed modes, etc.)
  - s.vdu.vduwrch - Pick correct default text colours for the new modes
Admin:
  Tested on BB-xM
  Part of an implementation of the Extended Framebuffer Format spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification


Version 5.35, 4.79.2.194. Tagged as 'Kernel-5_35-4_79_2_194'
@
text
@d1101 1
a1101 2
VIDCList3BaseSize * 64
VIDCList3Size * (VIDCList3BaseSize + 16*8 + 4) ; primary params, up to 16 video control params, terminator
d1221 1
a1221 1
VW_3    VWSTAB  3, 40K,160, 639,249,5,1,2, 1, 79, 24,1,1,0,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_BBCGapMode  ; MODE 3
d1224 1
a1224 1
VW_6    VWSTAB  6, 20K, 80, 319,249,4,2,2, 1, 39, 24,1,1,0,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_BBCGapMode  ; MODE 6
d1227 1
a1227 1
VW_7    VWSTAB  7,640K,640, 639,499,5,1,1,63, 39, 24,3,3,4,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext+ModeFlag_DoubleVertical ; MODE 7
d1230 1
a1230 1
VW_7    VWSTAB  7,320K,320, 639,499,5,1,1,15, 39, 24,2,2,4,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext+ModeFlag_DoubleVertical ; MODE 7
d1232 1
a1232 1
VW_7    VWSTAB  7, 80K,160, 319,249,5,2,2,15, 39, 24,2,2,4,0,ModeFlag_NonGraphic+ModeFlag_GapMode+ModeFlag_Teletext    ; MODE 7
d1238 1
a1238 1
VW_11   VWSTAB 11, 40K,160, 639,249,5,1,2, 3, 79, 24,1,1,1,2,ModeFlag_GapMode                                  ; MODE 11
d1241 1
a1241 1
VW_14   VWSTAB 14, 80K,320, 639,249,6,1,2,15, 79, 24,2,2,2,3,ModeFlag_GapMode                                  ; MODE 14
d1244 1
a1244 1
VW_17   VWSTAB 17,132K,528,1055,249,0,1,2,15,131, 24,2,2,2,3,ModeFlag_GapMode                                  ; MODE 17
d1250 1
a1250 1
VW_23   VWSTAB 23,M23S,144,1151,895,0,1,1, 1,143, 55,0,0,5,4,ModeFlag_HiResMono+ModeFlag_DoubleVertical            ; MODE 23
@


4.5.2.11
log
@Assorted GraphicsV improvements
Detail:
  This set of changes:
  * Adds basic support for multiple GraphicsV drivers, by way of some new OS_ScreenMode reason codes for registering/deregistering, selecting and enumerating drivers (11, 64-68)
  * Tidies up handling of HAL video calls so that the HAL calls will be transformed into a bona fide GraphicsV driver if they're implemented
  * Changes handling of 16bpp gamma table entries so that they're sent to GraphicsV in a generic form instead of in a VIDC-specific form
  * Adds a new GraphicsV call and defines new VIDC list items to allow GraphicsV drivers to utilise the new pixel formats
  File changes:
  * h/VIDCList, hdr/VIDCList, Makefile - Add new header export containing VIDC list type 3 definitions, to avoid repeated definitions in other components
  * Resources/UK/Messages - Add new GraphicsV/OS_ScreenMode error strings and some missing processor type strings
  * hdr/KernelWS - Clean up some pre-GraphicsV definitions, and add new workspace locations for storing the current GraphicsV driver number and the driver list
  * hdr/Options - Remove obsolete InverseTextTransparency option
  * hdr/VduExt - Add VDU variable 192 for storing GraphicsV driver number (same as ROL's VideoV driver number). Remove old 'Flag_*' mode flag definitions (use new 'ModeFlag_*' defintions instead). Add new OS_ScreenMode reason codes.
  * s/ARM600, s/VMSAv6, s/vdu/vdu23, s/vdu/vdugrafa, s/vdu/vdugrafd, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduwrch - Strip out pre-GraphicsV code. Update GraphicsV code to use correct driver number.
  * s/ArthurSWIs - Pass the default GraphicsV claimant the VduDriverWorkSpace instead of ZeroPage
  * s/Getall - Add Hdr:VIDCList and s/vdu/VduGrafHAL to list of GETs
  * s/NewIRQs - Remove HAL VSync IRQ initialisation, is now handled by grafvhal. Remove old HAL VsyncIRQ entry point, all VSyncs are now handled by VsyncIRQ_ExtEntry.
  * s/PMF/osbyte - Stop OS_Byte 19 waiting forever if no video driver is active
  * s/PMF/osinit - Remove HAL VSync IRQ initialisation, is now handled by grafvhal
  * s/vdu/vducursoft - Use new workspace variable names and flag names
  * s/vdu/vdudecl - Remove old HALDAG_* definitions, GVDAG_* definitions are used instead. Add definition of the per-driver workspace structure and flags.
  * s/vdu/vdudriver - Remove pre-GraphicsV code. Update InitialiseMode to check for and initialise a HAL driver. Use cached driver features word in a few places instead of calling GraphicsV each time. Update PalIndexTable to disable VIDC mangling of 16bpp gamma tables.
  * s/vdu/vdugrafv, s/vdu/vdugrafhal - HAL<->GraphicsV code split off into its own file (vdugrafhal). Default GraphicsV claimant now only deals with VSync events for the active driver.
  * s/vdu/vdumodes - Get rid of old VIDC List type 3 definiton; now in hdr/VIDCList
  * s/vdu/vduswis - Added OS_ScreenMode reason codes 11 and 64-68 for registering, deregistering, selecting and enumerating GraphicsV drivers. Update mode set code to not bother checking if the driver supports the pixel format; instead we assume that the driver's vet mode call will do the check for us.
Admin:
  Tested in Tungsten, IOMD, OMAP3 & BCM2835 ROMs
  Requires HdrSrc-2_38 and updated video driver modes


Version 5.35, 4.79.2.203. Tagged as 'Kernel-5_35-4_79_2_203'
@
text
@d33 49
@


4.5.2.12
log
@Strip out some old build switches
Detail:
  hdr/Options, s/ArthurSWIs, s/ChangeDyn, s/PMF/KbdDrA1, s/PMF/key, s/vdu/vdugrafa, s/vdu/vdugrafd, s/vdu/vdugrafhal, s/vdu/vdugrafv, s/vdu/vdumodes, s/vdu/vduwrch:
  - Strip out DoingVdu build switch (did nothing)
  - Strip out Japanese16BitSound switch (did nothing)
  - Strip out MakeModeSelectorsForModeNUmbers switch (altered the mode list structures, but there wasn't any code to do anything with the new data)
  - Strip out remaining uses of UseGraphicsV switch (now hardwired to {TRUE})
  - Strip out ShadowROM switch (altered FixedAreasTable to show the shadow mapping, but code to create the mapping is missing)
  - Strip out PollMouse switch (old Archimedes-era debug/development option)
Admin:
  Tested on BB-xM
  Builds to same binary as previous version


Version 5.35, 4.79.2.204. Tagged as 'Kernel-5_35-4_79_2_204'
@
text
@d1088 44
d1247 21
@


4.5.2.13
log
@Fix VGA/SVGA mode 7 VIDC list to be correct resolution/BPP when HiResTTX/TTX256 in use
Detail:
  s/vdu/vdumodes - Redefine VgaX_7 to be VLM_7 if HiResTTX/TTX256 in use
Admin:
  Tested on Raspberry Pi
  Fixes nasty crash when selecting mode 7 without an MDF loaded due to VIDC list being mismatched with code/VWSTAB


Version 5.35, 4.79.2.219. Tagged as 'Kernel-5_35-4_79_2_219'
@
text
@a908 3
 [ HiResTTX
VgaX_7 * VLM_7
 |
a909 1
 ]
@


4.4
log
@* Meaning of FEIOSpeedHalf was accidentally inverted.
* Wasn't allowing writes to most of EEPROM.
* Old prototype OS_SetTime SWI code removed.
* MPEGPoduleNTSCNotPALMask option support removed to simplify things a bit.
* Now can cope with a system with a PAL/NTSC link, but no monitor detect line.
* Default PAL & NTSC modes now always 12 & 46 respectively.
* Kernel now knows about monitor type 8 (NTSC) - modes 44-46 (640x200) are
  available.
* STB/NC CMOS test removed from POST pending further investigation.

Version 4.90. Tagged as 'Kernel-4_90'
@
text
@d330 3
d334 1
d819 1
d821 1
d846 3
d850 1
d942 3
d946 1
d1167 3
d1171 1
@


4.3
log
@Spinner branch merged.
Bandwidth limit for 7500FE fixed.
RO371Timings flag set to :LNOT:STB

Version 4.64. Tagged as 'Kernel-4_64'
@
text
@d292 1
a292 1
NumMonitorTypes *       5
d595 212
@


4.2
log
@Kernel merged
@
text
@d26 5
a30 1
  [ ($v=$r)
d33 1
a33 1
  |
d36 1
d45 6
a50 2
   [ {FALSE}
    [ $pixrate >= 12500
d52 1
a52 1
    |
d54 1
a54 1
    ]
d56 2
a57 2
   |
    [ ($v=$r)
d60 1
a60 1
    |
d63 1
d200 3
d279 3
@


4.2.2.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d40 8
d55 1
d103 9
d119 1
d134 4
d202 4
d258 1
d289 2
d300 2
d395 1
d558 1
d694 1
d700 1
d714 1
d801 1
d849 29
d911 1
d913 3
d954 1
@


4.2.2.1.2.1
log
@Changed compile switches, to build Ursula kernel for RPC and A7000(+),
switches now set as follows:
  ARM67Support      TRUE  (for 610,710,7500,7500FE)
  ARMSASupport      TRUE  (for StrongARM)
  ARMSASupport_RevS FALSE (for StrongARMs before rev S)
  IOMD1Support      TRUE  (for old machines)
  IOMD2Support      FALSE (They killed Phoebe!)
Version set to 4.00 (RISC OS 4)
This is the same as my last commit to the Ursula branch
@
text
@d20 76
d98 1
d100 68
d227 1
d230 2
d234 10
a243 4
; Frequency Synthesizer Register (excluding moduli, to be provided by ComputeModuli routine)
        &       VIDCFSyn
; Control Register (excluding pixel divider and pixel source, to be provided by ComputeModuli routine)
        &       VIDCControl :OR: (4 :SHL: CR_FIFOLoadShift) :OR: (CR_LBPP$lbpp)
d245 1
a245 3
; pixrate planted after terminator, to be used by ComputeModuli
        &       $pixrate

d258 1
d260 2
d267 1
d269 2
d360 1
d362 2
d522 1
d524 2
d628 1
d630 2
d664 3
d761 1
d763 2
d880 1
a880 1

d882 2
@


4.2.2.2
log
@Phoebe aware version of kernel
Source currently builds for Phoebe only. Flipping source switches will
build for Risc PC and/or A7000(+) as well (or instead). Not tested
much on older platforms.
Known issues remaining:
 - on Phoebe, kernel does not always set up the video (new VCO)
   properly. It appears that anything via the display manager is ok,
   old modes are ok before a monitor definition is seen, but mode
   changes via applications in the desktop always/often (?) aren't.
   Most likely area for investigation is whether kernel catches all
   mode change routes for ensuring it programs the new VCO.
 - on Phoebe, kernel does not yet have the hooks to support multiple
   CPU(s) (to park the slaves and allow them to be used later). I
   have a technical note on this, which should be archived as part of
   the Ursula burial work.
 - on older platforms, the areas that need checking most are CMOS
   power on reset (when in ROM) and mode changes by all routes (since
   these areas are bent by Phoebe support)
Note that kernel currently builds for rev S or better StrongARM. The
switch ARMSASupport_RevS should be set false if building for Risc PC.
@
text
@d20 76
d98 1
d100 68
d227 1
d230 2
d234 10
a243 4
; Frequency Synthesizer Register (excluding moduli, to be provided by ComputeModuli routine)
        &       VIDCFSyn
; Control Register (excluding pixel divider and pixel source, to be provided by ComputeModuli routine)
        &       VIDCControl :OR: (4 :SHL: CR_FIFOLoadShift) :OR: (CR_LBPP$lbpp)
d245 1
a245 3
; pixrate planted after terminator, to be used by ComputeModuli
        &       $pixrate

d258 1
d260 2
d267 1
d269 2
d360 1
d362 2
d522 1
d524 2
d628 1
d630 2
d664 3
d761 1
d763 2
d880 1
a880 1

d882 2
@


4.1
log
@Initial revision
@
text
@d26 1
a26 1
 [ ($v=$r)
d29 1
a29 1
 |
d32 1
a32 1
 ]
d40 16
a55 7
 [ ($v=$r)
CRPix32_$pixrate  *     CR_RCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *     ((64-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
 |
CRPix32_$pixrate  *     CR_VCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *     (($v-1):SHL:FSyn_VShift) :OR: (($r-1):SHL:FSyn_RShift)
 ]
d65 1
a65 1
        Moduli32   8000,  2,  2,  4  
d73 1
a73 1
        Moduli32  36000,  9,  4,  2 
d78 1
a78 1
  ]
d102 1
a102 1
 |
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@d26 1
a26 1
  [ ($v=$r)
d29 1
a29 1
  |
d32 1
a32 1
  ]
d40 7
a46 16
   [ {FALSE}
    [ $pixrate >= 12500
CRPix32_$pixrate  *	CR_HCLK :OR: (1-1) :SHL: CR_PixelDivShift	; if pixrate > 12.5MHz then use divide-by-1, and HCLK
    |
CRPix32_$pixrate  *	CR_HCLK :OR: (2-1) :SHL: CR_PixelDivShift	; else use divide-by-2, and HCLK
    ]
FSyn32_$pixrate   *	((2-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift) ; moduli irrelevant, so set to min V, max R
   |
    [ ($v=$r)
CRPix32_$pixrate  *	CR_RCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *	((64-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
    |
CRPix32_$pixrate  *	CR_VCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *	(($v-1):SHL:FSyn_VShift) :OR: (($r-1):SHL:FSyn_RShift)
    ]
   ]
d56 1
a56 1
        Moduli32   8000,  2,  2,  4
d64 1
a64 1
        Moduli32  36000,  9,  4,  2
d69 1
a69 1
  ] ; MorrisSupport
d93 1
a93 1
 | ; VIDC_Type = "VIDC20"
@


4.1.7.2
log
@Fixed to use HCLK for built-in video modes on NC with Chrontel
@
text
@d26 1
a26 5
  [ ChrontelSupport
CRPix_$pixrate	*	CR_HCLK :OR: ((1-1) :SHL: CR_PixelDivShift)
FSyn_$pixrate	*	(63 :SHL: FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
  |
   [ ($v=$r)
d29 1
a29 1
   |
a31 1
   ]
d40 2
a41 6
   [ ChrontelSupport
CRPix32_$pixrate  *	CR_HCLK :OR: ((1-1) :SHL: CR_PixelDivShift)
FSyn32_$pixrate	  *	(63 :SHL: FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
   |
    [ {FALSE}
     [ $pixrate >= 12500
d43 1
a43 1
     |
d45 1
a45 1
     ]
d47 2
a48 2
    |
     [ ($v=$r)
d51 1
a51 1
     |
a53 1
     ]
@


4.1.7.3
log
@Compile time option for TV display HCLK divider added
@
text
@a26 3
    [ BuildForPAL
CRPix_$pixrate	*	CR_HCLK :OR: ((4-1) :SHL: CR_PixelDivShift)
    |
a27 1
    ]
d46 1
a46 5
    [ BuildForPAL
CRPix32_$pixrate	*	CR_HCLK :OR: ((4-1) :SHL: CR_PixelDivShift)
    |
CRPix32_$pixrate	*	CR_HCLK :OR: ((1-1) :SHL: CR_PixelDivShift)
    ]
@


4.1.7.4
log
@Added SWI OS_VIDCDivider, and vdu variable PixelRate for better video mode
support.  Fixed to build for Risc PC.
@
text
@d27 3
d31 1
d50 5
a54 1
CRPix32_$pixrate  *	CR_HCLK :OR: ((1-1) :SHL: CR_PixelDivShift)
a207 3
 [ ChrontelSupport
        &       PseudoRegister_PixelRate :OR: $pixrate
 ]
a283 3
 [ ChrontelSupport
        &       PseudoRegister_PixelRate :OR: $pixrate
 ]
@


4.1.5.1
log
@Import from SrcFiler
@
text
@d26 1
a26 1
  [ ($v=$r)
d29 1
a29 1
  |
d32 1
a32 1
  ]
d40 7
a46 16
   [ {FALSE}
    [ $pixrate >= 12500
CRPix32_$pixrate  *	CR_HCLK :OR: (1-1) :SHL: CR_PixelDivShift	; if pixrate > 12.5MHz then use divide-by-1, and HCLK
    |
CRPix32_$pixrate  *	CR_HCLK :OR: (2-1) :SHL: CR_PixelDivShift	; else use divide-by-2, and HCLK
    ]
FSyn32_$pixrate   *	((2-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift) ; moduli irrelevant, so set to min V, max R
   |
    [ ($v=$r)
CRPix32_$pixrate  *	CR_RCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *	((64-1):SHL:FSyn_VShift) :OR: ((64-1):SHL:FSyn_RShift)
    |
CRPix32_$pixrate  *	CR_VCLK :OR: ($d-1) :SHL: CR_PixelDivShift
FSyn32_$pixrate   *	(($v-1):SHL:FSyn_VShift) :OR: (($r-1):SHL:FSyn_RShift)
    ]
   ]
d56 1
a56 1
        Moduli32   8000,  2,  2,  4
d64 1
a64 1
        Moduli32  36000,  9,  4,  2
d69 1
a69 1
  ] ; MorrisSupport
d93 1
a93 1
 | ; VIDC_Type = "VIDC20"
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
