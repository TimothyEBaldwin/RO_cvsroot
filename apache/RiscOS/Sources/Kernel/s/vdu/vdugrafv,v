head	4.2;
access;
symbols
	Kernel-6_14:4.2
	Kernel-6_01-3:4.2
	Kernel-6_13:4.2
	Kernel-6_12:4.2
	Kernel-6_11:4.2
	Kernel-6_10:4.2
	Kernel-6_09:4.2
	Kernel-6_08-4_129_2_10:4.2
	Kernel-6_08-4_129_2_9:4.2
	Kernel-6_08:4.2
	Kernel-6_07:4.2
	Kernel-6_06:4.2
	Kernel-6_05-4_129_2_8:4.2
	Kernel-6_05:4.2
	Kernel-6_04:4.2
	Kernel-6_03:4.2
	Kernel-6_01-2:4.2
	Kernel-6_01-4_146_2_1:4.2
	Kernel-6_02:4.2
	Kernel-6_01-1:4.2
	Kernel-6_01:4.2
	Kernel-6_00:4.2
	Kernel-5_99:4.2
	Kernel-5_98:4.2
	Kernel-5_97-4_129_2_7:4.2
	Kernel-5_97:4.2
	Kernel-5_96:4.2
	Kernel-5_95:4.2
	Kernel-5_94:4.2
	Kernel-5_93:4.2
	Kernel-5_92:4.2
	Kernel-5_91:4.2
	Kernel-5_90:4.2
	Kernel-5_89-4_129_2_6:4.2
	Kernel-5_89:4.2
	Kernel-5_88-4_129_2_5:4.2
	Kernel-5_88-4_129_2_4:4.2
	Kernel-5_88:4.2
	Kernel-5_87:4.2
	Kernel-5_86-4_129_2_3:4.2
	Kernel-5_86-4_129_2_2:4.2
	Kernel-5_86-4_129_2_1:4.2
	Kernel-5_86:4.2
	SMP:4.2.0.2
	SMP_bp:4.2
	Kernel-5_85:4.2
	Kernel-5_54-1:4.2
	Kernel-5_84:4.2
	Kernel-5_83:4.2
	Kernel-5_82:4.2
	Kernel-5_81:4.2
	Kernel-5_80:4.2
	Kernel-5_79:4.2
	Kernel-5_78:4.2
	Kernel-5_77:4.2
	Kernel-5_76:4.2
	Kernel-5_75:4.2
	Kernel-5_74:4.2
	Kernel-5_73:4.2
	Kernel-5_72:4.2
	Kernel-5_71:4.2
	Kernel-5_70:4.2
	Kernel-5_69:4.2
	Kernel-5_68:4.2
	Kernel-5_67:4.2
	Kernel-5_66:4.2
	Kernel-5_65:4.2
	Kernel-5_64:4.2
	Kernel-5_63:4.2
	Kernel-5_62:4.2
	Kernel-5_61:4.2
	Kernel-5_60:4.2
	Kernel-5_59:4.2
	Kernel-5_58:4.2
	Kernel-5_57:4.2
	Kernel-5_56:4.2
	Kernel-5_55:4.2
	Kernel-5_54:4.2
	Kernel-5_53:4.2
	Kernel-5_52:4.2
	Kernel-5_51:4.2
	Kernel-5_50:4.2
	Kernel-5_49:4.2
	HAL_merge:1.1.2.13
	Kernel-5_48:4.1
	Kernel-5_35-4_79_2_327:1.1.2.13
	Kernel-5_35-4_79_2_326:1.1.2.13
	Kernel-5_35-4_79_2_325:1.1.2.13
	Kernel-5_35-4_79_2_324:1.1.2.13
	Kernel-5_35-4_79_2_323:1.1.2.13
	Kernel-5_35-4_79_2_322:1.1.2.13
	Kernel-5_35-4_79_2_321:1.1.2.13
	Kernel-5_35-4_79_2_320:1.1.2.13
	Kernel-5_35-4_79_2_319:1.1.2.13
	Kernel-5_35-4_79_2_318:1.1.2.13
	Kernel-5_35-4_79_2_317:1.1.2.13
	Kernel-5_35-4_79_2_316:1.1.2.13
	Kernel-5_35-4_79_2_315:1.1.2.13
	Kernel-5_35-4_79_2_314:1.1.2.13
	Kernel-5_35-4_79_2_313:1.1.2.13
	Kernel-5_35-4_79_2_312:1.1.2.13
	Kernel-5_35-4_79_2_311:1.1.2.13
	Kernel-5_35-4_79_2_310:1.1.2.13
	Kernel-5_35-4_79_2_309:1.1.2.13
	Kernel-5_35-4_79_2_308:1.1.2.13
	Kernel-5_35-4_79_2_307:1.1.2.13
	Kernel-5_35-4_79_2_306:1.1.2.13
	Kernel-5_35-4_79_2_305:1.1.2.13
	Kernel-5_35-4_79_2_304:1.1.2.13
	Kernel-5_35-4_79_2_303:1.1.2.13
	Kernel-5_35-4_79_2_302:1.1.2.13
	Kernel-5_35-4_79_2_301:1.1.2.13
	Kernel-5_35-4_79_2_300:1.1.2.13
	Kernel-5_35-4_79_2_299:1.1.2.13
	Kernel-5_35-4_79_2_298:1.1.2.13
	Kernel-5_35-4_79_2_297:1.1.2.13
	Kernel-5_35-4_79_2_296:1.1.2.13
	Kernel-5_35-4_79_2_295:1.1.2.13
	Kernel-5_35-4_79_2_294:1.1.2.13
	Kernel-5_35-4_79_2_293:1.1.2.13
	Kernel-5_35-4_79_2_292:1.1.2.13
	Kernel-5_35-4_79_2_291:1.1.2.13
	Kernel-5_35-4_79_2_290:1.1.2.13
	Kernel-5_35-4_79_2_289:1.1.2.13
	Kernel-5_35-4_79_2_288:1.1.2.13
	Kernel-5_35-4_79_2_287:1.1.2.13
	Kernel-5_35-4_79_2_286:1.1.2.13
	Kernel-5_35-4_79_2_285:1.1.2.13
	Kernel-5_35-4_79_2_284:1.1.2.13
	Kernel-5_35-4_79_2_283:1.1.2.13
	Kernel-5_35-4_79_2_282:1.1.2.13
	Kernel-5_35-4_79_2_281:1.1.2.13
	Kernel-5_35-4_79_2_280:1.1.2.13
	Kernel-5_35-4_79_2_279:1.1.2.13
	Kernel-5_35-4_79_2_278:1.1.2.13
	Kernel-5_35-4_79_2_277:1.1.2.13
	Kernel-5_35-4_79_2_276:1.1.2.13
	Kernel-5_35-4_79_2_275:1.1.2.13
	Kernel-5_35-4_79_2_274:1.1.2.13
	Kernel-5_35-4_79_2_273:1.1.2.13
	Kernel-5_35-4_79_2_272:1.1.2.13
	Kernel-5_35-4_79_2_271:1.1.2.13
	Kernel-5_35-4_79_2_270:1.1.2.13
	Kernel-5_35-4_79_2_269:1.1.2.13
	Kernel-5_35-4_79_2_268:1.1.2.13
	Kernel-5_35-4_79_2_267:1.1.2.13
	Kernel-5_35-4_79_2_266:1.1.2.13
	Kernel-5_35-4_79_2_265:1.1.2.13
	Kernel-5_35-4_79_2_264:1.1.2.13
	Kernel-5_35-4_79_2_263:1.1.2.13
	Kernel-5_35-4_79_2_262:1.1.2.13
	Kernel-5_35-4_79_2_261:1.1.2.13
	Kernel-5_35-4_79_2_260:1.1.2.13
	Kernel-5_35-4_79_2_259:1.1.2.13
	Kernel-5_35-4_79_2_258:1.1.2.13
	Kernel-5_35-4_79_2_257:1.1.2.13
	Kernel-5_35-4_79_2_256:1.1.2.13
	Kernel-5_35-4_79_2_255:1.1.2.13
	Kernel-5_35-4_79_2_254:1.1.2.13
	Kernel-5_35-4_79_2_253:1.1.2.13
	Kernel-5_35-4_79_2_252:1.1.2.13
	Kernel-5_35-4_79_2_251:1.1.2.13
	Kernel-5_35-4_79_2_250:1.1.2.13
	Kernel-5_35-4_79_2_249:1.1.2.13
	Kernel-5_35-4_79_2_248:1.1.2.13
	Kernel-5_35-4_79_2_247:1.1.2.13
	Kernel-5_35-4_79_2_246:1.1.2.13
	Kernel-5_35-4_79_2_245:1.1.2.13
	Kernel-5_35-4_79_2_244:1.1.2.13
	Kernel-5_35-4_79_2_243:1.1.2.13
	Kernel-5_35-4_79_2_242:1.1.2.13
	Kernel-5_35-4_79_2_241:1.1.2.13
	Kernel-5_35-4_79_2_240:1.1.2.13
	Kernel-5_35-4_79_2_239:1.1.2.13
	Kernel-5_35-4_79_2_238:1.1.2.13
	Kernel-5_35-4_79_2_237:1.1.2.13
	Kernel-5_35-4_79_2_236:1.1.2.13
	Kernel-5_35-4_79_2_235:1.1.2.13
	Kernel-5_35-4_79_2_234:1.1.2.13
	Kernel-5_35-4_79_2_233:1.1.2.13
	Kernel-5_35-4_79_2_232:1.1.2.13
	Kernel-5_35-4_79_2_231:1.1.2.13
	Kernel-5_35-4_79_2_230:1.1.2.13
	Kernel-5_35-4_79_2_229:1.1.2.13
	Kernel-5_35-4_79_2_228:1.1.2.13
	Kernel-5_35-4_79_2_227:1.1.2.13
	Kernel-5_35-4_79_2_226:1.1.2.13
	Kernel-5_35-4_79_2_225:1.1.2.13
	Kernel-5_35-4_79_2_224:1.1.2.13
	Kernel-5_35-4_79_2_223:1.1.2.13
	Kernel-5_35-4_79_2_222:1.1.2.13
	Kernel-5_35-4_79_2_221:1.1.2.13
	Kernel-5_35-4_79_2_220:1.1.2.13
	Kernel-5_35-4_79_2_219:1.1.2.13
	Kernel-5_35-4_79_2_218:1.1.2.13
	Kernel-5_35-4_79_2_217:1.1.2.13
	Kernel-5_35-4_79_2_216:1.1.2.13
	Kernel-5_35-4_79_2_215:1.1.2.13
	Kernel-5_35-4_79_2_214:1.1.2.13
	Kernel-5_35-4_79_2_213:1.1.2.13
	Kernel-5_35-4_79_2_212:1.1.2.13
	Kernel-5_35-4_79_2_211:1.1.2.13
	Kernel-5_35-4_79_2_210:1.1.2.13
	Kernel-5_35-4_79_2_209:1.1.2.13
	Kernel-5_35-4_79_2_208:1.1.2.13
	Kernel-5_35-4_79_2_207:1.1.2.13
	Kernel-5_35-4_79_2_206:1.1.2.13
	Kernel-5_35-4_79_2_205:1.1.2.12
	Kernel-5_35-4_79_2_204:1.1.2.12
	Kernel-5_35-4_79_2_203:1.1.2.11
	Kernel-5_35-4_79_2_202:1.1.2.10
	Kernel-5_35-4_79_2_201:1.1.2.10
	Kernel-5_35-4_79_2_200:1.1.2.10
	Kernel-5_35-4_79_2_199:1.1.2.10
	Kernel-5_35-4_79_2_198:1.1.2.10
	Kernel-5_35-4_79_2_197:1.1.2.10
	Kernel-5_35-4_79_2_196:1.1.2.10
	Kernel-5_35-4_79_2_195:1.1.2.10
	Kernel-5_35-4_79_2_194:1.1.2.10
	Kernel-5_35-4_79_2_193:1.1.2.10
	Kernel-5_35-4_79_2_192:1.1.2.10
	Kernel-5_35-4_79_2_191:1.1.2.10
	Kernel-5_35-4_79_2_190:1.1.2.10
	Kernel-5_35-4_79_2_189:1.1.2.10
	Kernel-5_35-4_79_2_188:1.1.2.10
	Kernel-5_35-4_79_2_187:1.1.2.10
	Kernel-5_35-4_79_2_186:1.1.2.10
	Kernel-5_35-4_79_2_185:1.1.2.10
	Kernel-5_35-4_79_2_184:1.1.2.10
	Kernel-5_35-4_79_2_183:1.1.2.10
	Kernel-5_35-4_79_2_182:1.1.2.10
	Kernel-5_35-4_79_2_181:1.1.2.10
	Kernel-5_35-4_79_2_180:1.1.2.10
	Kernel-5_35-4_79_2_179:1.1.2.10
	Kernel-5_35-4_79_2_178:1.1.2.10
	Kernel-5_35-4_79_2_177:1.1.2.10
	Kernel-5_35-4_79_2_176:1.1.2.10
	Kernel-5_35-4_79_2_175:1.1.2.10
	Kernel-5_35-4_79_2_174:1.1.2.10
	Kernel-5_35-4_79_2_173:1.1.2.10
	Kernel-5_35-4_79_2_172:1.1.2.10
	Kernel-5_35-4_79_2_171:1.1.2.10
	Kernel-5_35-4_79_2_170:1.1.2.10
	Kernel-5_35-4_79_2_169:1.1.2.10
	Kernel-5_35-4_79_2_168:1.1.2.10
	Kernel-5_35-4_79_2_167:1.1.2.10
	Kernel-5_35-4_79_2_166:1.1.2.10
	Kernel-5_35-4_79_2_165:1.1.2.10
	RPi_merge:1.1.2.7.2.3
	Kernel-5_35-4_79_2_147_2_23:1.1.2.7.2.3
	Kernel-5_35-4_79_2_147_2_22:1.1.2.7.2.2
	Kernel-5_35-4_79_2_147_2_21:1.1.2.7.2.2
	Kernel-5_35-4_79_2_147_2_20:1.1.2.7.2.2
	Kernel-5_35-4_79_2_147_2_19:1.1.2.7.2.2
	Kernel-5_35-4_79_2_147_2_18:1.1.2.7.2.2
	Kernel-5_35-4_79_2_164:1.1.2.9
	Kernel-5_35-4_79_2_163:1.1.2.9
	Kernel-5_35-4_79_2_147_2_17:1.1.2.7.2.1
	Kernel-5_35-4_79_2_147_2_16:1.1.2.7.2.1
	Kernel-5_35-4_79_2_147_2_15:1.1.2.7.2.1
	Kernel-5_35-4_79_2_162:1.1.2.9
	Kernel-5_35-4_79_2_161:1.1.2.9
	Kernel-5_35-4_79_2_147_2_14:1.1.2.7.2.1
	Kernel-5_35-4_79_2_147_2_13:1.1.2.7.2.1
	Kernel-5_35-4_79_2_160:1.1.2.9
	Kernel-5_35-4_79_2_159:1.1.2.9
	Kernel-5_35-4_79_2_158:1.1.2.8
	Kernel-5_35-4_79_2_157:1.1.2.8
	Kernel-5_35-4_79_2_156:1.1.2.8
	Kernel-5_35-4_79_2_147_2_12:1.1.2.7.2.1
	Kernel-5_35-4_79_2_147_2_11:1.1.2.7.2.1
	Kernel-5_35-4_79_2_155:1.1.2.8
	Kernel-5_35-4_79_2_147_2_10:1.1.2.7.2.1
	Kernel-5_35-4_79_2_154:1.1.2.8
	Kernel-5_35-4_79_2_153:1.1.2.8
	Kernel-5_35-4_79_2_147_2_9:1.1.2.7.2.1
	Kernel-5_35-4_79_2_152:1.1.2.8
	Kernel-5_35-4_79_2_151:1.1.2.8
	Kernel-5_35-4_79_2_147_2_8:1.1.2.7.2.1
	Kernel-5_35-4_79_2_147_2_7:1.1.2.7.2.1
	Kernel-5_35-4_79_2_150:1.1.2.8
	Kernel-5_35-4_79_2_147_2_6:1.1.2.7.2.1
	Kernel-5_35-4_79_2_147_2_5:1.1.2.7.2.1
	Kernel-5_35-4_79_2_149:1.1.2.7
	Kernel-5_35-4_79_2_147_2_4:1.1.2.7
	Kernel-5_35-4_79_2_147_2_3:1.1.2.7
	Kernel-5_35-4_79_2_148:1.1.2.7
	Kernel-5_35-4_79_2_147_2_2:1.1.2.7
	Kernel-5_35-4_79_2_147_2_1:1.1.2.7
	RPi:1.1.2.7.0.2
	RPi_bp:1.1.2.7
	Kernel-5_35-4_79_2_98_2_52_2_1:1.1.2.5.2.1
	alees_Kernel_dev:1.1.2.5.2.1.0.2
	alees_Kernel_dev_bp:1.1.2.5.2.1
	Kernel-5_35-4_79_2_147:1.1.2.7
	Kernel-5_35-4_79_2_146:1.1.2.7
	Kernel-5_35-4_79_2_145:1.1.2.7
	Kernel-5_35-4_79_2_144:1.1.2.7
	Kernel-5_35-4_79_2_143:1.1.2.7
	Kernel-5_35-4_79_2_142:1.1.2.7
	Kernel-5_35-4_79_2_141:1.1.2.7
	Kernel-5_35-4_79_2_140:1.1.2.7
	Kernel-5_35-4_79_2_139:1.1.2.7
	Kernel-5_35-4_79_2_138:1.1.2.7
	Kernel-5_35-4_79_2_137:1.1.2.6
	Kernel-5_35-4_79_2_136:1.1.2.6
	Kernel-5_35-4_79_2_135:1.1.2.6
	Kernel-5_35-4_79_2_134:1.1.2.6
	Kernel-5_35-4_79_2_133:1.1.2.6
	Kernel-5_35-4_79_2_132:1.1.2.6
	Kernel-5_35-4_79_2_131:1.1.2.6
	Kernel-5_35-4_79_2_130:1.1.2.6
	Kernel-5_35-4_79_2_129:1.1.2.6
	Kernel-5_35-4_79_2_128:1.1.2.6
	Kernel-5_35-4_79_2_127:1.1.2.6
	Kernel-5_35-4_79_2_126:1.1.2.6
	Kernel-5_35-4_79_2_125:1.1.2.6
	Kernel-5_35-4_79_2_124:1.1.2.6
	Kernel-5_35-4_79_2_123:1.1.2.6
	Cortex_merge:1.1.2.5.2.1
	Kernel-5_35-4_79_2_122:1.1.2.5
	Kernel-5_35-4_79_2_98_2_54:1.1.2.5.2.1
	Kernel-5_35-4_79_2_98_2_53:1.1.2.5.2.1
	Kernel-5_35-4_79_2_98_2_52:1.1.2.5.2.1
	Kernel-5_35-4_79_2_98_2_51:1.1.2.5.2.1
	Kernel-5_35-4_79_2_98_2_50:1.1.2.5.2.1
	Kernel-5_35-4_79_2_98_2_49:1.1.2.5.2.1
	Kernel-5_35-4_79_2_98_2_48:1.1.2.5.2.1
	Kernel-5_35-4_79_2_121:1.1.2.5
	Kernel-5_35-4_79_2_98_2_47:1.1.2.5
	Kernel-5_35-4_79_2_120:1.1.2.5
	Kernel-5_35-4_79_2_98_2_46:1.1.2.5
	Kernel-5_35-4_79_2_119:1.1.2.5
	Kernel-5_35-4_79_2_98_2_45:1.1.2.5
	Kernel-5_35-4_79_2_98_2_44:1.1.2.5
	Kernel-5_35-4_79_2_118:1.1.2.5
	Kernel-5_35-4_79_2_98_2_43:1.1.2.5
	Kernel-5_35-4_79_2_117:1.1.2.5
	Kernel-5_35-4_79_2_116:1.1.2.5
	Kernel-5_35-4_79_2_98_2_42:1.1.2.5
	Kernel-5_35-4_79_2_115:1.1.2.5
	Kernel-5_35-4_79_2_98_2_41:1.1.2.5
	Kernel-5_35-4_79_2_98_2_40:1.1.2.5
	Kernel-5_35-4_79_2_114:1.1.2.5
	Kernel-5_35-4_79_2_98_2_39:1.1.2.5
	Kernel-5_35-4_79_2_98_2_38:1.1.2.5
	Kernel-5_35-4_79_2_113:1.1.2.5
	Kernel-5_35-4_79_2_112:1.1.2.5
	Kernel-5_35-4_79_2_98_2_37:1.1.2.5
	Kernel-5_35-4_79_2_98_2_36:1.1.2.5
	Kernel-5_35-4_79_2_98_2_35:1.1.2.5
	Kernel-5_35-4_79_2_98_2_34:1.1.2.5
	Kernel-5_35-4_79_2_98_2_33:1.1.2.5
	Kernel-5_35-4_79_2_98_2_32:1.1.2.5
	Kernel-5_35-4_79_2_98_2_31:1.1.2.5
	Kernel-5_35-4_79_2_98_2_30:1.1.2.5
	Kernel-5_35-4_79_2_98_2_29:1.1.2.5
	Kernel-5_35-4_79_2_98_2_28:1.1.2.5
	Kernel-5_35-4_79_2_98_2_27:1.1.2.5
	Kernel-5_35-4_79_2_98_2_26:1.1.2.5
	Kernel-5_35-4_79_2_111:1.1.2.5
	Kernel-5_35-4_79_2_98_2_25:1.1.2.5
	Kernel-5_35-4_79_2_98_2_24:1.1.2.5
	Kernel-5_35-4_79_2_98_2_23:1.1.2.5
	Kernel-5_35-4_79_2_110:1.1.2.5
	Kernel-5_35-4_79_2_98_2_22:1.1.2.5
	Kernel-5_35-4_79_2_109:1.1.2.5
	Kernel-5_35-4_79_2_98_2_21:1.1.2.5
	Kernel-5_35-4_79_2_98_2_20:1.1.2.5
	Kernel-5_35-4_79_2_108:1.1.2.5
	Kernel-5_35-4_79_2_107:1.1.2.5
	Kernel-5_35-4_79_2_98_2_19:1.1.2.5
	Kernel-5_35-4_79_2_98_2_18:1.1.2.5
	Kernel-5_35-4_79_2_98_2_17:1.1.2.5
	Kernel-5_35-4_79_2_98_2_16:1.1.2.5
	Kernel-5_35-4_79_2_98_2_15:1.1.2.5
	Kernel-5_35-4_79_2_106:1.1.2.5
	Kernel-5_35-4_79_2_105:1.1.2.5
	Kernel-5_35-4_79_2_104:1.1.2.5
	Kernel-5_35-4_79_2_98_2_14:1.1.2.5
	Kernel-5_35-4_79_2_98_2_13:1.1.2.5
	Kernel-5_35-4_79_2_98_2_12:1.1.2.5
	Kernel-5_35-4_79_2_98_2_11:1.1.2.5
	Kernel-5_35-4_79_2_98_2_10:1.1.2.5
	Kernel-5_35-4_79_2_98_2_9:1.1.2.5
	Kernel-5_35-4_79_2_103:1.1.2.5
	Kernel-5_35-4_79_2_102:1.1.2.5
	Kernel-5_35-4_79_2_98_2_8:1.1.2.5
	Kernel-5_35-4_79_2_98_2_7:1.1.2.5
	Kernel-5_35-4_79_2_98_2_6:1.1.2.5
	Kernel-5_35-4_79_2_98_2_5:1.1.2.5
	Kernel-5_35-4_79_2_98_2_4:1.1.2.5
	Kernel-5_35-4_79_2_101:1.1.2.5
	Kernel-5_35-4_79_2_100:1.1.2.5
	Kernel-5_35-4_79_2_99:1.1.2.5
	Kernel-5_35-4_79_2_98_2_3:1.1.2.5
	Kernel-5_35-4_79_2_98_2_2:1.1.2.5
	Kernel-5_35-4_79_2_98_2_1:1.1.2.5
	Cortex:1.1.2.5.0.2
	Cortex_bp:1.1.2.5
	Kernel-5_35-4_79_2_98:1.1.2.5
	Kernel-5_35-4_79_2_97:1.1.2.5
	Kernel-5_35-4_79_2_96:1.1.2.5
	Kernel-5_35-4_79_2_95:1.1.2.5
	Kernel-5_35-4_79_2_94:1.1.2.5
	Kernel-5_35-4_79_2_93:1.1.2.5
	Kernel-5_35-4_79_2_92:1.1.2.5
	Kernel-5_35-4_79_2_91:1.1.2.5
	Kernel-5_35-4_79_2_90:1.1.2.5
	Kernel-5_35-4_79_2_89:1.1.2.5
	Kernel-5_35-4_79_2_88:1.1.2.5
	Kernel-5_35-4_79_2_87:1.1.2.5
	Kernel-5_35-4_79_2_86:1.1.2.5
	Kernel-5_35-4_79_2_85:1.1.2.5
	Kernel-5_35-4_79_2_84:1.1.2.5
	Kernel-5_35-4_79_2_83:1.1.2.5
	Kernel-5_35-4_79_2_82:1.1.2.5
	Kernel-5_35-4_79_2_81:1.1.2.5
	Kernel-5_35-4_79_2_80:1.1.2.4
	Kernel-5_35-4_79_2_79:1.1.2.4
	Kernel-5_35-4_79_2_78:1.1.2.3
	Kernel-5_35-4_79_2_77:1.1.2.3
	RO_5_07:1.1.2.3
	Kernel-5_35-4_79_2_76:1.1.2.3
	Kernel-5_35-4_79_2_75:1.1.2.3
	Kernel-5_35-4_79_2_74:1.1.2.3
	Kernel-5_35-4_79_2_73:1.1.2.3
	Kernel-5_35-4_79_2_72:1.1.2.3
	Kernel-5_35-4_79_2_71:1.1.2.3
	Kernel-5_35-4_79_2_70:1.1.2.3
	Kernel-5_35-4_79_2_69:1.1.2.3
	Kernel-5_35-4_79_2_68:1.1.2.3
	Kernel-5_35-4_79_2_67:1.1.2.3
	Kernel-5_35-4_79_2_66:1.1.2.3
	Kernel-5_35-4_79_2_65:1.1.2.2
	Kernel-5_35-4_79_2_64:1.1.2.2
	Kernel-5_35-4_79_2_63:1.1.2.2
	Kernel-5_35-4_79_2_62:1.1.2.2
	Kernel-5_35-4_79_2_61:1.1.2.2
	Kernel-5_35-4_79_2_59:1.1.2.2
	Kernel-5_35-4_79_2_58:1.1.2.2
	Kernel-5_35-4_79_2_57:1.1.2.2
	Kernel-5_35-4_79_2_56:1.1.2.2
	Kernel-5_35-4_79_2_55:1.1.2.2
	Kernel-5_35-4_79_2_54:1.1.2.2
	Kernel-5_35-4_79_2_53:1.1.2.2
	Kernel-5_35-4_79_2_52:1.1.2.2
	Kernel-5_35-4_79_2_51:1.1.2.2
	Kernel-5_35-4_79_2_50:1.1.2.1
	Kernel-5_35-4_79_2_49:1.1.2.1
	Kernel-5_35-4_79_2_48:1.1.2.1
	HAL:1.1.0.2;
locks; strict;
comment	@# @;


4.2
date	2016.06.30.20.29.05;	author jlee;	state Exp;
branches;
next	4.1;
commitid	lMnWzoE9eJz3Wwcz;

4.1
date	2016.06.30.20.08.20;	author jlee;	state Exp;
branches;
next	1.1;
commitid	IWoXxARWeuLDOwcz;

1.1
date	2002.10.07.17.29.45;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.10.07.17.29.45;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.11.30.00.31.14;	author bavison;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.05.06.16.02.05;	author kbracey;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2004.10.29.00.42.00;	author jballance;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2004.11.02.00.48.05;	author jballance;	state Exp;
branches
	1.1.2.5.2.1;
next	1.1.2.6;

1.1.2.6
date	2011.11.26.21.11.28;	author jlee;	state Exp;
branches;
next	1.1.2.7;
commitid	cI3W0zbtALQG6TIv;

1.1.2.7
date	2012.02.25.16.19.42;	author jlee;	state Exp;
branches
	1.1.2.7.2.1;
next	1.1.2.8;
commitid	ad3WnPntkzrizyUv;

1.1.2.8
date	2012.05.21.19.31.44;	author rsprowson;	state Exp;
branches;
next	1.1.2.9;
commitid	oEtPURiKNEPMRC5w;

1.1.2.9
date	2012.07.04.17.50.57;	author rsprowson;	state Exp;
branches;
next	1.1.2.10;
commitid	BwjRc3GMlaDwTgbw;

1.1.2.10
date	2012.09.18.22.01.22;	author jlee;	state Exp;
branches;
next	1.1.2.11;
commitid	eFa3Y1QY0MjZP3lw;

1.1.2.11
date	2013.12.15.21.34.12;	author jlee;	state Exp;
branches;
next	1.1.2.12;
commitid	KwuK29hKRyXO7hhx;

1.1.2.12
date	2013.12.17.19.08.57;	author jlee;	state Exp;
branches;
next	1.1.2.13;
commitid	mr92WavK9Mu4gwhx;

1.1.2.13
date	2013.12.19.00.09.00;	author jlee;	state Exp;
branches;
next	;
commitid	sFhm1gbZFIB4TFhx;

1.1.2.5.2.1
date	2011.08.08.23.28.38;	author jlee;	state Exp;
branches;
next	;
commitid	D7rzILnwRRSXoLuv;

1.1.2.7.2.1
date	2012.05.20.21.21.39;	author jballance;	state Exp;
branches;
next	1.1.2.7.2.2;
commitid	neZVFdyw3wNwvv5w;

1.1.2.7.2.2
date	2012.09.02.19.56.55;	author jlee;	state Exp;
branches;
next	1.1.2.7.2.3;
commitid	q3Bny0G3EqBdFZiw;

1.1.2.7.2.3
date	2012.09.18.15.50.10;	author jlee;	state Exp;
branches;
next	;
commitid	jeuxYpI6CQUxM1lw;


desc
@@


4.2
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > $.Source.VduGrafV
;
; ARTHUR OPERATING SYSTEM - Vdu Drivers
; =======================
;
; Vdu driver code - Default GraphicsV claimant
;
; Author K J Bracey
; Date   30.8.02
;

        MACRO
        GVEntry $name
        ASSERT  . - MOSGraphicsV_Table = GraphicsV_$name * 4
        B       GV_$name
        MEND

MOSGraphicsV ROUT
        ; We only care about VSync events, and only for the current driver
        LDR     WsPtr, [WsPtr, #CurrentGraphicsVDriver]
        ADD     WsPtr, WsPtr, #GraphicsV_VSync :SHL: 8
        TEQ     r4, WsPtr, ROR #8
        MOVNE   pc, lr
; Switch to interrupt mode to process this.
        LDR     WsPtr, =ZeroPage+OsbyteVars
        MRS     r4, CPSR
        Push    "lr"
        MSR     CPSR_c, #I32_bit + IRQ32_mode
        Push    "r4, lr"
        Push    "pc"
        B       VsyncIRQ_ExtEntry
        NOP
        Pull    "r4, lr"
        MSR     CPSR_c, r4
        MOV     r4, #0
        Pull    "pc"

CallGraphicsV
        Push    "r10,r12,lr"
        MOV     r10, #GraphicsV
        BL      CallVector
        Pull    "r10,r12,pc"

; Corrupts R9-R11
; returns EQ if acceleration valid
CheckAcceleration
        ASSERT  Log2BPP = Log2BPC +4
        ADD     R9, WsPtr, #Log2BPC
        LDMIA   R9, {R9, R10}                   ; R9 = Log2BPC; R10 = Log2BPP
        LDR     R11, [WsPtr, #VduSprite]
        TEQ     R9, R10                         ; BPC must equal BPP
        TEQEQ   R11, #0                         ; Must not be redirected
        MOV     PC, R14

        END
@


4.1
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@a38 1
        ASSERT  No26bitCode
a43 1
     [ HAL
a46 3
     |
        BL      VsyncIRQ_ExtEntry
     ]
@


1.1
log
@file vdugrafv was initially added on branch HAL.
@
text
@d1 74
@


1.1.2.1
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@a0 161
; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > $.Source.VduGrafV
;
; ARTHUR OPERATING SYSTEM - Vdu Drivers
; =======================
;
; Vdu driver code - Default GraphicsV claimant
;
; Author K J Bracey
; Date   30.8.02
;

 [ UseGraphicsV

        ASSERT  GraphicsV_VSync = 1
        ASSERT  GraphicsV_SetMode = 2
        ASSERT  GraphicsV_SetInterlace = 3
        ASSERT  GraphicsV_SetBlank = 4
        ASSERT  GraphicsV_UpdatePointer = 5
        ASSERT  GraphicsV_SetDMAAddress = 6
        ASSERT  GraphicsV_VetMode = 7
        ASSERT  GraphicsV_DisplayFeatures = 8
        ASSERT  GraphicsV_WritePaletteEntry = 10
        ASSERT  GraphicsV_WritePaletteEntries = 11

MOSGraphicsV ROUT
        CMP     r4, #11
        ADDLS   pc, pc, r4, LSL #2
        MOV     pc, lr                  ; reason code not known, so pass it on
        MOV     pc, lr                  ; 0
        B       GV_VSync                ; 1
        B       GV_SetMode              ; 2
        B       GV_SetInterlace         ; 3
        B       GV_SetBlank             ; 4
        B       GV_UpdatePointer        ; 5
        B       GV_SetAddress           ; 6
        B       GV_VetMode              ; 7
        B       GV_Features             ; 8
        MOV     pc, lr                  ; 9
        B       GV_WritePaletteEntry    ; 10
        B       GV_WritePaletteEntries  ; 11

GV_VSync        ROUT
 [ {FALSE}
  [ HAL
        Push    "lr"
  ]
        LDR     WsPtr, =OsbyteVars
        MOV     r4, #0
        B       VsyncIRQ_ExtEntry
 |
; Switch to interrupt mode to process this.
        ASSERT  No26bitCode
        LDR     WsPtr, =OsbyteVars
        MRS     r4, CPSR
        Push    "lr"
        MSR     CPSR_c, #I32_bit + IRQ32_mode
        Push    "r4, lr"
     [ HAL
        Push    "pc"
        B       VsyncIRQ_ExtEntry
        NOP
     |
        BL      VsyncIRQ_ExtEntry
     ]
        Pull    "r4, lr"
        MSR     CPSR_c, r4
        MOV     r4, #0
        Pull    "pc"
 ]

GV_SetMode
        Push    "r0-r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_SetMode
        Pull    "r0-r3, r9, pc"

GV_SetInterlace
        Push    "r0-r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_SetInterlace
        Pull    "r0-r3, r9, pc"

GV_SetBlank
        Push    "r0-r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_SetBlank
        Pull    "r0-r3, r9, pc"

GV_UpdatePointer
        Push    "r0-r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_UpdatePointer
        Pull    "r0-r3, r9, pc"

GV_SetAddress
        Push    "r0-r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_SetDAG
        Pull    "r0-r3, r9, pc"

GV_VetMode
        Push    "r1-r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_VetMode
        Pull    "r1-r3, r9, pc"

GV_Features
        Push    "r0,r1,r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_Features
        STR     r0, [sp, #0]
        mjsCallHAL HAL_Video_PixelFormats
        STR     r0, [sp, #4]
        mjsCallHAL HAL_Video_BufferAlignment
        MOV     r2, r0
        Pull    "r0,r1,r3, r9, pc"

GV_WritePaletteEntry
        Push    "r0-r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_WritePaletteEntry
        Pull    "r0-r3, r9, pc"

GV_WritePaletteEntries
        Push    "r0-r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_WritePaletteEntries
        Pull    "r0-r3, r9, pc"

CallGraphicsV
        Push    "r10,r12,lr"
        MOV     r10, #GraphicsV
        BL      CallVector
        Pull    "r10,r12,pc"

 ] ; UseGraphicsV

        END
@


1.1.2.2
log
@  Commit of kernel as featured in release 5.00.
Detail:
  Lots of changes since last version, at least the following:
  * Updated OS timestamp, removed alpha status
  * Negative INKEY OS version changed to &AA
  * GraphicsV is now alocated vector number &2A
  * ROM moved up to &FC000000
  * Max application slot increased to 512 Mbytes (for now)
  * Max size of RMA increased to 256 Mbytes
  * RMA is now first-created dynamic area (so it gets lowest address after
    top of application slot)
  * OS_Memory 10 reimplemeted
  * New OS_ReadSysInfo 6 values 18-22 added
  * OS_ReadSysInfo 8 gains flag bit to indicate soft power-off
  * Misc internal top-bit-set-address fixes
  * *ChangeDynamicArea can take sizes in megabytes or gigabytes
  * Magic word "&off" in R0 passed to OS_Reset powers down if possible
  * Added acceleration: block copy; CLS; text window scroll up; rectangle
    fill
  * Disabled LED flashing in page mode (liable to crash)
  * Masked sprite plot and VDU 5 text avoids reading the screen if possible
  * Framestore made USR mode accessible
  * Fix for VDU 5,127 bug - now relies on font definitions being in extreme
    quarters of memory, rather than bottom half
  * Allocated 64-bit OS_Convert... SWIs
  * IIC errors use allocated error numbers
  * Looks for Dallas RTC before Philips RTC because we're using a Philips
    NVRAM device with the same ID
  * Fix to bug that meant the oscillator in the Dallas RTC wasn't enabled
  * Default mouse type (USB) changed to allocated number
  * Ram disc max size increased to 128 Mbytes (Ursula merge) and made
    cacheable for StrongARMs (not XScale)
  * Branch through zero handler now works in USR mode, by use of a
    trampoline in the system stack to allow PC-relative register storage
  * Address exception handler changed to not use 0 as workspace
  * OS_Memory 13 extended to allow specification of cacheability and access
    privileges
  * Added OS_Memory 16 to return important memory addresses
  * RISCOS_MapInIO() takes cacheable flag in bit 3, access permissions in
    bits 10 and 11, doubly-mapped flag in bit 20, and access permissions
    specified flag in bit 21
  * Bug fix in last version for application abort handlers didn't quite
    work; register shuffle required
  * "Module is not 32-bit compatible" error now reports the module name
  * Default configured language changed from 10 to 11 (now Desktop again)

Version 5.35, 4.79.2.51. Tagged as 'Kernel-5_35-4_79_2_51'
@
text
@a158 11
; Corrupts R9-R11
; returns EQ if acceleration valid
CheckAcceleration
        ASSERT  Log2BPP = Log2BPC +4
        ADD     R9, WsPtr, #Log2BPC
        LDMIA   R9, {R9, R10}                   ; R9 = Log2BPC; R10 = Log2BPP
        LDR     R11, [WsPtr, #VduSprite]
        TEQ     R9, R10                         ; BPC must equal BPP
        TEQEQ   R11, #0                         ; Must not be redirected
        MOV     PC, R14

@


1.1.2.3
log
@* HAL can choose to limit amount of screen memory to allocate
  [Not fully implemented - for now leaves at least 16MB free if only
  one RAM area; was 1MB].
* Added HAL_USBControllerInfo, HAL_MonitorLeadID and HAL_Video_Render.
* Added HAL->OS call OS_IICOpV.
* OS_MMUControl now allows independent control of I and C bits.
* Added facility to deactivate keyboard debounce (magic word "NoKd" in
  R2 in KeyV 0).
* Fixed problem with RAM amounts not a multiple of 4MB.
* Supremacy bit (in VDU 19) now sets all 8 bits of supremacy.
* Added PaletteV 14 (reads gamma tables).
* Added Supremacy transfer functions (like gamma correction, but for
  supremacy). Allows easy global supremacy effects in a mode-independent
  fashion. Controlled with PaletteV 15,16.
* Added modes 50-53 (320x240, 1,2,4,8bpp). Intended for small LCD.
* Added 13.5kHz versions of TV modes (selected by Hdr:Machine).
* Upped desktop version to 5.06.

Version 5.35, 4.79.2.66. Tagged as 'Kernel-5_35-4_79_2_66'
@
text
@a37 1
        ASSERT  GraphicsV_Render = 13
d40 1
a40 1
        CMP     r4, #13
a54 2
        MOV     pc, lr                  ; 12
        B       GV_Render               ; 13
a150 13
        Pull    "r0-r3, r9, pc"

GV_Render
        VDWS    WsPtr
        LDR     WsPtr, [WsPtr, #HALVideoFeatures]
        TST     WsPtr, #1:SHL:4
        MOVEQ   pc, lr
        Push    "r0-r3, r9, lr"
        ORR     r0, r0, #1:SHL:31
        mjsAddressHAL
        mjsCallHAL HAL_Video_Render
        TEQ     r0, #0
        MOVPL   r4, #0
@


1.1.2.4
log
@        added knowledge of GraphicsV_IICOp and default call to
        HAL_Video_IIC_Op
Detail:
Admin:
     JB  Castle IP

Version 5.35, 4.79.2.79. Tagged as 'Kernel-5_35-4_79_2_79'
@
text
@a38 1
        ASSERT  GraphicsV_IICOp = 14
a57 1
        B       GV_IICOp                ; 14
a167 7

GV_IICOp
        Push    "r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_IICOp
        Pull    "r9, pc"
@


1.1.2.5
log
@     several mode:
     1: default ticker based vsync generated whenever no device present to do so
     2: graphicsv handling and spec updated to use the hi 8 bits in the
        reason code (R4) to define the display number. Kernel only knows
        of display 0
Detail:
Admin:
     tested castle  castle added ip


Version 5.35, 4.79.2.81. Tagged as 'Kernel-5_35-4_79_2_81'
@
text
@a40 1

d42 1
a42 1
        CMP     r4, #(MOSGraphicsV_TableEnd - MOSGraphicsV_Table) / 4
a43 1
MOSGraphicsV_Table
a59 1
MOSGraphicsV_TableEnd
@


1.1.2.6
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d69 1
a69 1
        LDR     WsPtr, =ZeroPage+OsbyteVars
d75 1
a75 1
        LDR     WsPtr, =ZeroPage+OsbyteVars
@


1.1.2.7
log
@Add compressed ROM support. Make more use of ARMv5+ instructions. Other misc tweaks.
Detail:
  hdr/OSEntries, s/HAL, s/Kernel - Add compressed ROM support.
  With the current scheme, a compressed ROM will have everything except the HAL and kernel compressed.
  During the keyboard scan period the kernel will allocate some temporary decompression workspace and call the decompression stub that was appended to the ROM.
  The decompression stub is expected to perform in-place decompression of the ROM. Once decompression is complete the workspace will be freed and the page tables updated to make the ROM image readonly.
  It's the HAL's responsibility to make sure any compressed ROM is located in an area of physically contiguous RAM large enough to hold the uncompressed image.
  More info here: http://www.riscosopen.org/wiki/documentation/show/Compressed%20ROMs
  Makefile, h/OSEntries - Add C export of hdr/OSEntries
  hdr/HALDevice - Add device ID for Tungsten video device. Convert tabs to spaces for consistency.
  hdr/HALEntries, s/NewReset - Moved KbdFlag_* definitions to hdr/HALEntries so HALs can use them in their keyboard scan code
  s/ArthurSWIs, S/HAL, s/HeapSort, s/Kernel, s/MemInfo, s/Middle, s/NewIRQs, s/TickEvents, s/vdu/vdugrafb - Make use of BLX, BFI and long multiplies if the CPU supports them. Don't support SWI calls from thumb mode if the CPU doesn't support thumb.
  s/HAL - Made the LDMIA in Init_MapInRAM more sensible (register order was backwards). The old code did work, but wasn't doing what the comments described. Removed unused/unfinished HAL_Write0 function. Improve RISCOS_LogToPhys to check L1PT for any section mappings if the logical_to_physical call fails
  s/ModHand - Save one instruction by using ADR instead of MOV+ADD to compute lr
  s/NewReset, s/PMF/key - Pass L1PT to HAL_Reset to allow machines without hardware reset (e.g. IOMD) to perform resets by manually disabling the MMU and restarting the ROM
  s/vdu/vdudriver, s/vdu/vdugrafv - Use GVEntry macro borrowed from NVidia module for setting up the GraphicsV jump table. Make GraphicsV_ReadPaletteEntry call HAL_Video_ReadPaletteEntry if left unclaimed. Fixup GV_Render to only call HAL_Video_Render if the HAL call is implemented.
Admin:
  Tested with OMAP3, IOMD & Tungsten ROMs/softloads.


Version 5.35, 4.79.2.138. Tagged as 'Kernel-5_35-4_79_2_138'
@
text
@d28 13
a40 5
        MACRO
        GVEntry $name
        ASSERT  . - MOSGraphicsV_Table = GraphicsV_$name * 4
        B       GV_$name
        MEND
d45 1
a46 1
MOSGraphicsV_Table
d48 8
a55 8
        GVEntry VSync                   ; 1
        GVEntry SetMode                 ; 2
        GVEntry SetInterlace            ; 3
        GVEntry SetBlank                ; 4
        GVEntry UpdatePointer           ; 5
        GVEntry SetDMAAddress           ; 6
        GVEntry VetMode                 ; 7
        GVEntry DisplayFeatures         ; 8
d57 5
a61 5
        GVEntry WritePaletteEntry       ; 10
        GVEntry WritePaletteEntries     ; 11
        GVEntry ReadPaletteEntry        ; 12
        GVEntry Render                  ; 13
        GVEntry IICOp                   ; 14
d121 1
a121 1
GV_SetDMAAddress
d135 1
a135 1
GV_DisplayFeatures
a160 15
GV_ReadPaletteEntry
        Push    "r0,r2-r3, r9, lr"
        mjsAddressHAL WsPtr
        CheckHAL HAL_Video_ReadPaletteEntry, r3
        Pull    "r0,r2-r3, r9, pc", EQ
        MOV     r4, #0
      [ NoARMv5
        MOV     lr, pc
        MOV     pc, r3
      |
        BLX     r3
      ]
        MOV     r1,r0
        Pull    "r0,r2-r3, r9, pc"

d164 1
a164 1
        TST     WsPtr, #1:SHL:31 ; Fake flag set during VduInit
@


1.1.2.8
log
@Make Mike's macros permanent.
While the HAL and kernel were being split some temporary macros were used for the bits being worked on, after 12 years of use they're probably safe to adopt.
mjsCallHAL -> CallHAL; mjsAddressHAL -> AddressHAL; mjsHAL -> HAL.
OS_VIDCDividerSWI code now always does NoSuchSWI (had been switched out previously).
File vduhint.s no longer assembled (was empty).


Version 5.35, 4.79.2.150. Tagged as 'Kernel-5_35-4_79_2_150'
@
text
@d87 1
a87 1
        AddressHAL WsPtr
d89 1
a89 1
        CallHAL HAL_Video_SetMode
d94 1
a94 1
        AddressHAL WsPtr
d96 1
a96 1
        CallHAL HAL_Video_SetInterlace
d101 1
a101 1
        AddressHAL WsPtr
d103 1
a103 1
        CallHAL HAL_Video_SetBlank
d108 1
a108 1
        AddressHAL WsPtr
d110 1
a110 1
        CallHAL HAL_Video_UpdatePointer
d115 1
a115 1
        AddressHAL WsPtr
d117 1
a117 1
        CallHAL HAL_Video_SetDAG
d122 1
a122 1
        AddressHAL WsPtr
d124 1
a124 1
        CallHAL HAL_Video_VetMode
d129 1
a129 1
        AddressHAL WsPtr
d131 1
a131 1
        CallHAL HAL_Video_Features
d133 1
a133 1
        CallHAL HAL_Video_PixelFormats
d135 1
a135 1
        CallHAL HAL_Video_BufferAlignment
d141 1
a141 1
        AddressHAL WsPtr
d143 1
a143 1
        CallHAL HAL_Video_WritePaletteEntry
d148 1
a148 1
        AddressHAL WsPtr
d150 1
a150 1
        CallHAL HAL_Video_WritePaletteEntries
d155 1
a155 1
        AddressHAL WsPtr
d175 2
a176 2
        AddressHAL
        CallHAL HAL_Video_Render
d183 1
a183 1
        AddressHAL WsPtr
d185 1
a185 1
        CallHAL HAL_Video_IICOp
@


1.1.2.9
log
@Make GraphicsV_IICOp more consistent
No accepts  r0 = b31-24 set 0
                 b23-16 fully qualified IIC address
                 b15-0  starting offset
            r1 = buffer pointer
            r2 = number of bytes to tranfer
            r4 = b31-24 display number
                 b23-16 head
                 b15-0  reason code (=14)
Now returns r0 = result codes as per HAL_IICTransfer()
            r1 = buffer pointer incremented by number of bytes transferred
            r2 = number of bytes *not* transferred
            r4 = 0
Removed '_' after Video in entry numbers to be consistent with other HAL entry naming, and HAL_VideoFlybackDevice.
Added IICStatus return numbers to Hdr:HALEntries.
Stop calling HAL_MonitorLeadID as only IOMD implemented it - just guess VGA until the graphics driver says otherwise.

Version 5.35, 4.79.2.159. Tagged as 'Kernel-5_35-4_79_2_159'
@
text
@d89 1
a89 1
        CallHAL HAL_VideoSetMode
d96 1
a96 1
        CallHAL HAL_VideoSetInterlace
d103 1
a103 1
        CallHAL HAL_VideoSetBlank
d110 1
a110 1
        CallHAL HAL_VideoUpdatePointer
d117 1
a117 1
        CallHAL HAL_VideoSetDAG
d124 1
a124 1
        CallHAL HAL_VideoVetMode
d131 1
a131 1
        CallHAL HAL_VideoFeatures
d133 1
a133 1
        CallHAL HAL_VideoPixelFormats
d135 1
a135 1
        CallHAL HAL_VideoBufferAlignment
d143 1
a143 1
        CallHAL HAL_VideoWritePaletteEntry
d150 1
a150 1
        CallHAL HAL_VideoWritePaletteEntries
d156 1
a156 1
        CheckHAL HAL_VideoReadPaletteEntry, r3
d176 1
a176 1
        CallHAL HAL_VideoRender
d182 1
a182 1
        Push    "r1-r3, r9, lr"
a183 7
        Push    "r2"                            ; Bytes desired to tranfer
        MOV     r2, sp                          
        CallHAL HAL_VideoIICOp
        Pull    "r4"                            ; Bytes actually transferred
        Pull    "r1-r3, r9, lr"
        ADD     r1, r1, r4                      ; Advance pointer
        SUB     r2, r2, r4                      ; Bytes not transferred
d185 2
a186 1
        MOV     pc, lr
@


1.1.2.10
log
@Merge with RPi branch
Detail:
  Merge the RPi branch with the HAL branch, ending RPi branch development
  Brief summary of changes brought in:
  * Added HAL_VideoStartupMode to allow the HAL to specify a startup mode for the OS
  * Fixed addresses being sent to GraphicsV_SetDMAAddress being wrong for external framestores (addresses were given as if internal framestore was in use)
  * Add InverseTextTransparency option for limited compile-time support for targets where framebuffer alpha channel is important
  * Fix ConfiguredLanguage for non-Tungsten builds
  * Update ARMv6 CPU detection to read cache parameters from cache type register instead of using KnownCPUTable
  * Add HALDebugHexTX/TX2/TX4 debug routines for writing out numbers via HAL
  * Use HAL_TimerIRQClear when clearing timer 0 interrupt instead of just HAL_IRQClear
  * Initialise FileLangCMOS using defines from Hdr:FSNumbers instead of magic numbers. Use SDFS on M_ARM11ZF.
  * Improved software mouse pointer support; software pointer now removed & restored in some of the same places the text cursor is
  * Improve support for external framestores; driver is now able to grow/shrink/move the framestore on mode changes if bit 5 of GraphicsV_DisplayFeatures R0 is set
  * GraphicsV_FramestoreAddress now has a default claimant which calls HAL_VideoFramestoreAddress
Admin:
  Tested on Raspberry Pi, Iyonix, OMAP3, IOMD


Version 5.35, 4.79.2.165. Tagged as 'Kernel-5_35-4_79_2_165'
@
text
@d48 1
a48 1
        GVEntry FramestoreAddress       ; 9
a138 10
GV_FramestoreAddress
        Push    "r3, r9, lr"
        AddressHAL WsPtr
        MOV     r0, #0
        MOV     r1, #0
        CallHAL HAL_VideoFramestoreAddress
        ORRS    r2, r0, r1
        MOVNE   r4, #0
        Pull    "r3, r9, pc"

@


1.1.2.11
log
@Assorted GraphicsV improvements
Detail:
  This set of changes:
  * Adds basic support for multiple GraphicsV drivers, by way of some new OS_ScreenMode reason codes for registering/deregistering, selecting and enumerating drivers (11, 64-68)
  * Tidies up handling of HAL video calls so that the HAL calls will be transformed into a bona fide GraphicsV driver if they're implemented
  * Changes handling of 16bpp gamma table entries so that they're sent to GraphicsV in a generic form instead of in a VIDC-specific form
  * Adds a new GraphicsV call and defines new VIDC list items to allow GraphicsV drivers to utilise the new pixel formats
  File changes:
  * h/VIDCList, hdr/VIDCList, Makefile - Add new header export containing VIDC list type 3 definitions, to avoid repeated definitions in other components
  * Resources/UK/Messages - Add new GraphicsV/OS_ScreenMode error strings and some missing processor type strings
  * hdr/KernelWS - Clean up some pre-GraphicsV definitions, and add new workspace locations for storing the current GraphicsV driver number and the driver list
  * hdr/Options - Remove obsolete InverseTextTransparency option
  * hdr/VduExt - Add VDU variable 192 for storing GraphicsV driver number (same as ROL's VideoV driver number). Remove old 'Flag_*' mode flag definitions (use new 'ModeFlag_*' defintions instead). Add new OS_ScreenMode reason codes.
  * s/ARM600, s/VMSAv6, s/vdu/vdu23, s/vdu/vdugrafa, s/vdu/vdugrafd, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduwrch - Strip out pre-GraphicsV code. Update GraphicsV code to use correct driver number.
  * s/ArthurSWIs - Pass the default GraphicsV claimant the VduDriverWorkSpace instead of ZeroPage
  * s/Getall - Add Hdr:VIDCList and s/vdu/VduGrafHAL to list of GETs
  * s/NewIRQs - Remove HAL VSync IRQ initialisation, is now handled by grafvhal. Remove old HAL VsyncIRQ entry point, all VSyncs are now handled by VsyncIRQ_ExtEntry.
  * s/PMF/osbyte - Stop OS_Byte 19 waiting forever if no video driver is active
  * s/PMF/osinit - Remove HAL VSync IRQ initialisation, is now handled by grafvhal
  * s/vdu/vducursoft - Use new workspace variable names and flag names
  * s/vdu/vdudecl - Remove old HALDAG_* definitions, GVDAG_* definitions are used instead. Add definition of the per-driver workspace structure and flags.
  * s/vdu/vdudriver - Remove pre-GraphicsV code. Update InitialiseMode to check for and initialise a HAL driver. Use cached driver features word in a few places instead of calling GraphicsV each time. Update PalIndexTable to disable VIDC mangling of 16bpp gamma tables.
  * s/vdu/vdugrafv, s/vdu/vdugrafhal - HAL<->GraphicsV code split off into its own file (vdugrafhal). Default GraphicsV claimant now only deals with VSync events for the active driver.
  * s/vdu/vdumodes - Get rid of old VIDC List type 3 definiton; now in hdr/VIDCList
  * s/vdu/vduswis - Added OS_ScreenMode reason codes 11 and 64-68 for registering, deregistering, selecting and enumerating GraphicsV drivers. Update mode set code to not bother checking if the driver supports the pixel format; instead we assume that the driver's vet mode call will do the check for us.
Admin:
  Tested in Tungsten, IOMD, OMAP3 & BCM2835 ROMs
  Requires HdrSrc-2_38 and updated video driver modes


Version 5.35, 4.79.2.203. Tagged as 'Kernel-5_35-4_79_2_203'
@
text
@d35 30
a64 5
        ; We only care about VSync events, and only for the current driver
        LDR     WsPtr, [WsPtr, #CurrentGraphicsVDriver]
        ADD     WsPtr, WsPtr, #GraphicsV_VSync :SHL: 8
        TEQ     r4, WsPtr, ASR #8
        MOVNE   pc, lr
d83 120
@


1.1.2.12
log
@Strip out some old build switches
Detail:
  hdr/Options, s/ArthurSWIs, s/ChangeDyn, s/PMF/KbdDrA1, s/PMF/key, s/vdu/vdugrafa, s/vdu/vdugrafd, s/vdu/vdugrafhal, s/vdu/vdugrafv, s/vdu/vdumodes, s/vdu/vduwrch:
  - Strip out DoingVdu build switch (did nothing)
  - Strip out Japanese16BitSound switch (did nothing)
  - Strip out MakeModeSelectorsForModeNUmbers switch (altered the mode list structures, but there wasn't any code to do anything with the new data)
  - Strip out remaining uses of UseGraphicsV switch (now hardwired to {TRUE})
  - Strip out ShadowROM switch (altered FixedAreasTable to show the shadow mapping, but code to create the mapping is missing)
  - Strip out PollMouse switch (old Archimedes-era debug/development option)
Admin:
  Tested on BB-xM
  Builds to same binary as previous version


Version 5.35, 4.79.2.204. Tagged as 'Kernel-5_35-4_79_2_204'
@
text
@d26 2
d76 2
@


1.1.2.13
log
@Miscellaneous fixes
Detail:
  s/MemInfo - Fix OS_Memory 0 physical-to-logical conversion returning bad addresses for most cases due to R5 being modified by physical_to_ppn (bug introduced in revision 4.4.2.20)
  s/vdu/vdudriver - Fix some VDU driver variables not being initialised correctly when switching GraphicsV driver
  s/vdu/vdugrafv - Fix handling of VSync events from GraphicsV drivers other than driver zero
  s/vdu/vduswis - Fix abort when OS_ScreenMode 11 is passed a bad driver number
Admin:
  Tested on Raspberry Pi
  There still seems to be a bug lurking somewhere when switching to a GraphicsV driver that uses DA2; the system will crash horribly unless DA2 is already a suitable size for the initial mode change


Version 5.35, 4.79.2.206. Tagged as 'Kernel-5_35-4_79_2_206'
@
text
@d36 1
a36 1
        TEQ     r4, WsPtr, ROR #8
@


1.1.2.7.2.1
log
@  Changes to resolve some of the BCM2835 initial hacks
  1: Added HAL_FramebufferAddress entry.
  2: Minor mod the NoIrqVecSwiDispatch mods recently submitted. Improved coverage
  3: Added compile time switch InverseTextTransparency to toggle sense of text
  (pre-wimp) for use until correct transparency behaviour is introduced in the RPi
  start.elf.
  4: Ensured that if a non aligned frame buffer is reported, ALL of the space
  is actually mapped in.
Detail:
  (list files and functions that have changed)
Admin:
  builds and runs .. Still needs service_mode extension work to replace hard
  coded mode definition files
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)


Version 5.35, 4.79.2.147.2.5. Tagged as 'Kernel-5_35-4_79_2_147_2_5'
@
text
@d48 1
a48 1
        GVEntry FramestoreAddress       ; 9
a138 7
GV_FramestoreAddress
        Push    "r3, r9, lr"
        mjsAddressHAL WsPtr
        MOV     r4, #0
        mjsCallHAL HAL_Video_FramestoreAddress
        Pull    "r3, r9, pc"

@


1.1.2.7.2.2
log
@Preperation for working Raspberry Pi video driver
Detail:
  hdr/HALEntries - Add new HAL_Video_StartupMode HAL entry to allow the HAL to specify a startup mode
  s/HAL, s/Kernel - Tweaked debug routines
  s/vdu/vdudriver - Make use of HAL_Video_StartupMode in InitialiseMode to decide what initial mode should be. Clean up some hacks & debug. Improve handling of external framestores; if bit 5 of GraphicsV_DisplayFeatures r0 is set, the kernel will now allow the display driver to grow/shrink/move its framestore in response to mode changes.
  s/vdu/vdugrafv - Adjust default GV_FramestoreAddress implementation to only claim vector if HAL returns a framestore
  s/vdu/vduswis - Re-enable FindOKMode
Admin:
  Tested on Raspberry Pi with high processor vectors


Version 5.35, 4.79.2.147.2.18. Tagged as 'Kernel-5_35-4_79_2_147_2_18'
@
text
@d142 1
a142 2
        MOV     r0, #0
        MOV     r1, #0
a143 2
        ORRS    r2, r0, r1
        MOVNE   r4, #0
@


1.1.2.7.2.3
log
@Merge with HAL branch
Detail:
  Merge the HAL branch into the RPi branch, prior to merging RPi to HAL
  Brief summary of main changes brought in:
  * Added *cache functionality previously provided by ARM module
  * Added "CMOS RAM reset" message on startup when CMOS has been wiped by keypress
  * Renamed HAL Video entries from HAL_Video_XXX to HAL_VideoXXX
  * Dropped mjsHAL macros, GRAB/STASH macros
  * Fixed pseudo-VRAM allocation when machine has exactly 16MB of RAM
  * Added OS_Hardware 5
  * Use OS_SerialOp GetDeviceName for getting serial device name
  * Drop HAL_MonitorLeadID
  * Rework default GraphicsV_IICOp handler
Admin:
  Tested on Raspberry Pi with high processor vectors


Version 5.35, 4.79.2.147.2.23. Tagged as 'Kernel-5_35-4_79_2_147_2_23'
@
text
@d87 1
a87 1
        AddressHAL WsPtr
d89 1
a89 1
        CallHAL HAL_VideoSetMode
d94 1
a94 1
        AddressHAL WsPtr
d96 1
a96 1
        CallHAL HAL_VideoSetInterlace
d101 1
a101 1
        AddressHAL WsPtr
d103 1
a103 1
        CallHAL HAL_VideoSetBlank
d108 1
a108 1
        AddressHAL WsPtr
d110 1
a110 1
        CallHAL HAL_VideoUpdatePointer
d115 1
a115 1
        AddressHAL WsPtr
d117 1
a117 1
        CallHAL HAL_VideoSetDAG
d122 1
a122 1
        AddressHAL WsPtr
d124 1
a124 1
        CallHAL HAL_VideoVetMode
d129 1
a129 1
        AddressHAL WsPtr
d131 1
a131 1
        CallHAL HAL_VideoFeatures
d133 1
a133 1
        CallHAL HAL_VideoPixelFormats
d135 1
a135 1
        CallHAL HAL_VideoBufferAlignment
d141 1
a141 1
        AddressHAL WsPtr
d144 1
a144 1
        CallHAL HAL_VideoFramestoreAddress
d151 1
a151 1
        AddressHAL WsPtr
d153 1
a153 1
        CallHAL HAL_VideoWritePaletteEntry
d158 1
a158 1
        AddressHAL WsPtr
d160 1
a160 1
        CallHAL HAL_VideoWritePaletteEntries
d165 2
a166 2
        AddressHAL WsPtr
        CheckHAL HAL_VideoReadPaletteEntry, r3
d185 2
a186 2
        AddressHAL
        CallHAL HAL_VideoRender
d192 2
a193 9
        Push    "r1-r3, r9, lr"
        AddressHAL WsPtr
        Push    "r2"                            ; Bytes desired to tranfer
        MOV     r2, sp                          
        CallHAL HAL_VideoIICOp
        Pull    "r4"                            ; Bytes actually transferred
        Pull    "r1-r3, r9, lr"
        ADD     r1, r1, r4                      ; Advance pointer
        SUB     r2, r2, r4                      ; Bytes not transferred
d195 2
a196 1
        MOV     pc, lr
@


1.1.2.5.2.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@d69 1
a69 1
        LDR     WsPtr, =ZeroPage+OsbyteVars
d75 1
a75 1
        LDR     WsPtr, =ZeroPage+OsbyteVars
@


