head	4.4;
access;
symbols
	Kernel-6_15:4.4
	Kernel-6_14:4.4
	Kernel-6_01-3:4.4
	Kernel-6_13:4.4
	Kernel-6_12:4.4
	Kernel-6_11:4.4
	Kernel-6_10:4.4
	Kernel-6_09:4.4
	Kernel-6_08-4_129_2_10:4.4
	Kernel-6_08-4_129_2_9:4.4
	Kernel-6_08:4.4
	Kernel-6_07:4.4
	Kernel-6_06:4.4
	Kernel-6_05-4_129_2_8:4.4
	Kernel-6_05:4.4
	Kernel-6_04:4.4
	Kernel-6_03:4.4
	Kernel-6_01-2:4.4
	Kernel-6_01-4_146_2_1:4.4
	Kernel-6_02:4.4
	Kernel-6_01-1:4.4
	Kernel-6_01:4.4
	Kernel-6_00:4.4
	Kernel-5_99:4.4
	Kernel-5_98:4.4
	Kernel-5_97-4_129_2_7:4.4
	Kernel-5_97:4.4
	Kernel-5_96:4.4
	Kernel-5_95:4.4
	Kernel-5_94:4.4
	Kernel-5_93:4.4
	Kernel-5_92:4.4
	Kernel-5_91:4.4
	Kernel-5_90:4.4
	Kernel-5_89-4_129_2_6:4.4
	Kernel-5_89:4.4
	Kernel-5_88-4_129_2_5:4.4
	Kernel-5_88-4_129_2_4:4.4
	Kernel-5_88:4.4
	Kernel-5_87:4.4
	Kernel-5_86-4_129_2_3:4.4
	Kernel-5_86-4_129_2_2:4.4
	Kernel-5_86-4_129_2_1:4.4
	Kernel-5_86:4.4
	SMP:4.4.0.2
	SMP_bp:4.4
	Kernel-5_85:4.4
	Kernel-5_54-1:4.4
	Kernel-5_84:4.4
	Kernel-5_83:4.4
	Kernel-5_82:4.4
	Kernel-5_81:4.4
	Kernel-5_80:4.4
	Kernel-5_79:4.4
	Kernel-5_78:4.4
	Kernel-5_77:4.4
	Kernel-5_76:4.4
	Kernel-5_75:4.4
	Kernel-5_74:4.4
	Kernel-5_73:4.4
	Kernel-5_72:4.4
	Kernel-5_71:4.4
	Kernel-5_70:4.4
	Kernel-5_69:4.4
	Kernel-5_68:4.4
	Kernel-5_67:4.4
	Kernel-5_66:4.4
	Kernel-5_65:4.4
	Kernel-5_64:4.4
	Kernel-5_63:4.4
	Kernel-5_62:4.4
	Kernel-5_61:4.4
	Kernel-5_60:4.4
	Kernel-5_59:4.4
	Kernel-5_58:4.4
	Kernel-5_57:4.4
	Kernel-5_56:4.4
	Kernel-5_55:4.4
	Kernel-5_54:4.4
	Kernel-5_53:4.4
	Kernel-5_52:4.4
	Kernel-5_51:4.4
	Kernel-5_50:4.4
	Kernel-5_49:4.4
	HAL_merge:4.3.2.2
	Kernel-5_48:4.4
	Kernel-5_35-4_79_2_327:4.3.2.2
	Kernel-5_35-4_79_2_326:4.3.2.2
	Kernel-5_35-4_79_2_325:4.3.2.2
	Kernel-5_35-4_79_2_324:4.3.2.2
	Kernel-5_35-4_79_2_323:4.3.2.2
	Kernel-5_35-4_79_2_322:4.3.2.2
	Kernel-5_35-4_79_2_321:4.3.2.2
	Kernel-5_35-4_79_2_320:4.3.2.2
	Kernel-5_35-4_79_2_319:4.3.2.2
	Kernel-5_35-4_79_2_318:4.3.2.2
	Kernel-5_35-4_79_2_317:4.3.2.2
	Kernel-5_35-4_79_2_316:4.3.2.2
	Kernel-5_35-4_79_2_315:4.3.2.2
	Kernel-5_35-4_79_2_314:4.3.2.2
	Kernel-5_35-4_79_2_313:4.3.2.2
	Kernel-5_35-4_79_2_312:4.3.2.2
	Kernel-5_35-4_79_2_311:4.3.2.2
	Kernel-5_35-4_79_2_310:4.3.2.2
	Kernel-5_35-4_79_2_309:4.3.2.2
	Kernel-5_35-4_79_2_308:4.3.2.2
	Kernel-5_35-4_79_2_307:4.3.2.2
	Kernel-5_35-4_79_2_306:4.3.2.2
	Kernel-5_35-4_79_2_305:4.3.2.2
	Kernel-5_35-4_79_2_304:4.3.2.2
	Kernel-5_35-4_79_2_303:4.3.2.2
	Kernel-5_35-4_79_2_302:4.3.2.2
	Kernel-5_35-4_79_2_301:4.3.2.2
	Kernel-5_35-4_79_2_300:4.3.2.2
	Kernel-5_35-4_79_2_299:4.3.2.2
	Kernel-5_35-4_79_2_298:4.3.2.2
	Kernel-5_35-4_79_2_297:4.3.2.2
	Kernel-5_35-4_79_2_296:4.3.2.2
	Kernel-5_35-4_79_2_295:4.3.2.2
	Kernel-5_35-4_79_2_294:4.3.2.2
	Kernel-5_35-4_79_2_293:4.3.2.2
	Kernel-5_35-4_79_2_292:4.3.2.2
	Kernel-5_35-4_79_2_291:4.3.2.2
	Kernel-5_35-4_79_2_290:4.3.2.2
	Kernel-5_35-4_79_2_289:4.3.2.2
	Kernel-5_35-4_79_2_288:4.3.2.2
	Kernel-5_35-4_79_2_287:4.3.2.2
	Kernel-5_35-4_79_2_286:4.3.2.2
	Kernel-5_35-4_79_2_285:4.3.2.2
	Kernel-5_35-4_79_2_284:4.3.2.2
	Kernel-5_35-4_79_2_283:4.3.2.2
	Kernel-5_35-4_79_2_282:4.3.2.2
	Kernel-5_35-4_79_2_281:4.3.2.2
	Kernel-5_35-4_79_2_280:4.3.2.2
	Kernel-5_35-4_79_2_279:4.3.2.2
	Kernel-5_35-4_79_2_278:4.3.2.2
	Kernel-5_35-4_79_2_277:4.3.2.2
	Kernel-5_35-4_79_2_276:4.3.2.2
	Kernel-5_35-4_79_2_275:4.3.2.2
	Kernel-5_35-4_79_2_274:4.3.2.2
	Kernel-5_35-4_79_2_273:4.3.2.2
	Kernel-5_35-4_79_2_272:4.3.2.2
	Kernel-5_35-4_79_2_271:4.3.2.2
	Kernel-5_35-4_79_2_270:4.3.2.2
	Kernel-5_35-4_79_2_269:4.3.2.2
	Kernel-5_35-4_79_2_268:4.3.2.2
	Kernel-5_35-4_79_2_267:4.3.2.2
	Kernel-5_35-4_79_2_266:4.3.2.2
	Kernel-5_35-4_79_2_265:4.3.2.2
	Kernel-5_35-4_79_2_264:4.3.2.2
	Kernel-5_35-4_79_2_263:4.3.2.2
	Kernel-5_35-4_79_2_262:4.3.2.2
	Kernel-5_35-4_79_2_261:4.3.2.2
	Kernel-5_35-4_79_2_260:4.3.2.2
	Kernel-5_35-4_79_2_259:4.3.2.2
	Kernel-5_35-4_79_2_258:4.3.2.2
	Kernel-5_35-4_79_2_257:4.3.2.2
	Kernel-5_35-4_79_2_256:4.3.2.2
	Kernel-5_35-4_79_2_255:4.3.2.2
	Kernel-5_35-4_79_2_254:4.3.2.2
	Kernel-5_35-4_79_2_253:4.3.2.2
	Kernel-5_35-4_79_2_252:4.3.2.2
	Kernel-5_35-4_79_2_251:4.3.2.2
	Kernel-5_35-4_79_2_250:4.3.2.2
	Kernel-5_35-4_79_2_249:4.3.2.2
	Kernel-5_35-4_79_2_248:4.3.2.2
	Kernel-5_35-4_79_2_247:4.3.2.2
	Kernel-5_35-4_79_2_246:4.3.2.2
	Kernel-5_35-4_79_2_245:4.3.2.2
	Kernel-5_35-4_79_2_244:4.3.2.2
	Kernel-5_35-4_79_2_243:4.3.2.2
	Kernel-5_35-4_79_2_242:4.3.2.2
	Kernel-5_35-4_79_2_241:4.3.2.2
	Kernel-5_35-4_79_2_240:4.3.2.2
	Kernel-5_35-4_79_2_239:4.3.2.2
	Kernel-5_35-4_79_2_238:4.3.2.2
	Kernel-5_35-4_79_2_237:4.3.2.2
	Kernel-5_35-4_79_2_236:4.3.2.2
	Kernel-5_35-4_79_2_235:4.3.2.2
	Kernel-5_35-4_79_2_234:4.3.2.2
	Kernel-5_35-4_79_2_233:4.3.2.2
	Kernel-5_35-4_79_2_232:4.3.2.2
	Kernel-5_35-4_79_2_231:4.3.2.2
	Kernel-5_35-4_79_2_230:4.3.2.2
	Kernel-5_35-4_79_2_229:4.3.2.2
	Kernel-5_35-4_79_2_228:4.3.2.2
	Kernel-5_35-4_79_2_227:4.3.2.2
	Kernel-5_35-4_79_2_226:4.3.2.2
	Kernel-5_35-4_79_2_225:4.3.2.2
	Kernel-5_35-4_79_2_224:4.3.2.2
	Kernel-5_35-4_79_2_223:4.3.2.2
	Kernel-5_35-4_79_2_222:4.3.2.2
	Kernel-5_35-4_79_2_221:4.3.2.2
	Kernel-5_35-4_79_2_220:4.3.2.2
	Kernel-5_35-4_79_2_219:4.3.2.2
	Kernel-5_35-4_79_2_218:4.3.2.2
	Kernel-5_35-4_79_2_217:4.3.2.2
	Kernel-5_35-4_79_2_216:4.3.2.2
	Kernel-5_35-4_79_2_215:4.3.2.2
	Kernel-5_35-4_79_2_214:4.3.2.2
	Kernel-5_35-4_79_2_213:4.3.2.2
	Kernel-5_35-4_79_2_212:4.3.2.2
	Kernel-5_35-4_79_2_211:4.3.2.2
	Kernel-5_35-4_79_2_210:4.3.2.2
	Kernel-5_35-4_79_2_209:4.3.2.2
	Kernel-5_35-4_79_2_208:4.3.2.2
	Kernel-5_35-4_79_2_207:4.3.2.2
	Kernel-5_35-4_79_2_206:4.3.2.2
	Kernel-5_35-4_79_2_205:4.3.2.2
	Kernel-5_35-4_79_2_204:4.3.2.2
	Kernel-5_35-4_79_2_203:4.3.2.2
	Kernel-5_35-4_79_2_202:4.3.2.2
	Kernel-5_35-4_79_2_201:4.3.2.2
	Kernel-5_35-4_79_2_200:4.3.2.2
	Kernel-5_35-4_79_2_199:4.3.2.2
	Kernel-5_35-4_79_2_198:4.3.2.2
	Kernel-5_35-4_79_2_197:4.3.2.2
	Kernel-5_35-4_79_2_196:4.3.2.2
	Kernel-5_35-4_79_2_195:4.3.2.2
	Kernel-5_35-4_79_2_194:4.3.2.2
	Kernel-5_35-4_79_2_193:4.3.2.1
	Kernel-5_35-4_79_2_192:4.3.2.1
	Kernel-5_35-4_79_2_191:4.3.2.1
	Kernel-5_35-4_79_2_190:4.3.2.1
	Kernel-5_35-4_79_2_189:4.3.2.1
	Kernel-5_35-4_79_2_188:4.3.2.1
	Kernel-5_35-4_79_2_187:4.3.2.1
	Kernel-5_35-4_79_2_186:4.3.2.1
	Kernel-5_35-4_79_2_185:4.3.2.1
	Kernel-5_35-4_79_2_184:4.3.2.1
	Kernel-5_35-4_79_2_183:4.3.2.1
	Kernel-5_35-4_79_2_182:4.3.2.1
	Kernel-5_35-4_79_2_181:4.3.2.1
	Kernel-5_35-4_79_2_180:4.3.2.1
	Kernel-5_35-4_79_2_179:4.3.2.1
	Kernel-5_35-4_79_2_178:4.3.2.1
	Kernel-5_35-4_79_2_177:4.3.2.1
	Kernel-5_35-4_79_2_176:4.3.2.1
	Kernel-5_35-4_79_2_175:4.3.2.1
	Kernel-5_35-4_79_2_174:4.3.2.1
	Kernel-5_35-4_79_2_173:4.3.2.1
	Kernel-5_35-4_79_2_172:4.3.2.1
	Kernel-5_35-4_79_2_171:4.3.2.1
	Kernel-5_35-4_79_2_170:4.3.2.1
	Kernel-5_35-4_79_2_169:4.3.2.1
	Kernel-5_35-4_79_2_168:4.3.2.1
	Kernel-5_35-4_79_2_167:4.3.2.1
	Kernel-5_35-4_79_2_166:4.3.2.1
	Kernel-5_35-4_79_2_165:4.3.2.1
	RPi_merge:4.3.2.1
	Kernel-5_35-4_79_2_147_2_23:4.3.2.1
	Kernel-5_35-4_79_2_147_2_22:4.3.2.1
	Kernel-5_35-4_79_2_147_2_21:4.3.2.1
	Kernel-5_35-4_79_2_147_2_20:4.3.2.1
	Kernel-5_35-4_79_2_147_2_19:4.3.2.1
	Kernel-5_35-4_79_2_147_2_18:4.3.2.1
	Kernel-5_35-4_79_2_164:4.3.2.1
	Kernel-5_35-4_79_2_163:4.3.2.1
	Kernel-5_35-4_79_2_147_2_17:4.3.2.1
	Kernel-5_35-4_79_2_147_2_16:4.3.2.1
	Kernel-5_35-4_79_2_147_2_15:4.3.2.1
	Kernel-5_35-4_79_2_162:4.3.2.1
	Kernel-5_35-4_79_2_161:4.3.2.1
	Kernel-5_35-4_79_2_147_2_14:4.3.2.1
	Kernel-5_35-4_79_2_147_2_13:4.3.2.1
	Kernel-5_35-4_79_2_160:4.3.2.1
	Kernel-5_35-4_79_2_159:4.3.2.1
	Kernel-5_35-4_79_2_158:4.3.2.1
	Kernel-5_35-4_79_2_157:4.3.2.1
	Kernel-5_35-4_79_2_156:4.3.2.1
	Kernel-5_35-4_79_2_147_2_12:4.3.2.1
	Kernel-5_35-4_79_2_147_2_11:4.3.2.1
	Kernel-5_35-4_79_2_155:4.3.2.1
	Kernel-5_35-4_79_2_147_2_10:4.3.2.1
	Kernel-5_35-4_79_2_154:4.3.2.1
	Kernel-5_35-4_79_2_153:4.3.2.1
	Kernel-5_35-4_79_2_147_2_9:4.3.2.1
	Kernel-5_35-4_79_2_152:4.3.2.1
	Kernel-5_35-4_79_2_151:4.3.2.1
	Kernel-5_35-4_79_2_147_2_8:4.3.2.1
	Kernel-5_35-4_79_2_147_2_7:4.3.2.1
	Kernel-5_35-4_79_2_150:4.3.2.1
	Kernel-5_35-4_79_2_147_2_6:4.3.2.1
	Kernel-5_35-4_79_2_147_2_5:4.3.2.1
	Kernel-5_35-4_79_2_149:4.3.2.1
	Kernel-5_35-4_79_2_147_2_4:4.3.2.1
	Kernel-5_35-4_79_2_147_2_3:4.3.2.1
	Kernel-5_35-4_79_2_148:4.3.2.1
	Kernel-5_35-4_79_2_147_2_2:4.3.2.1
	Kernel-5_35-4_79_2_147_2_1:4.3.2.1
	RPi:4.3.2.1.0.2
	RPi_bp:4.3.2.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.3
	alees_Kernel_dev:4.3.0.8
	alees_Kernel_dev_bp:4.3
	Kernel-5_35-4_79_2_147:4.3.2.1
	Kernel-5_35-4_79_2_146:4.3.2.1
	Kernel-5_35-4_79_2_145:4.3.2.1
	Kernel-5_35-4_79_2_144:4.3.2.1
	Kernel-5_35-4_79_2_143:4.3.2.1
	Kernel-5_35-4_79_2_142:4.3.2.1
	Kernel-5_35-4_79_2_141:4.3.2.1
	Kernel-5_35-4_79_2_140:4.3.2.1
	Kernel-5_35-4_79_2_139:4.3.2.1
	Kernel-5_35-4_79_2_138:4.3.2.1
	Kernel-5_35-4_79_2_137:4.3.2.1
	Kernel-5_35-4_79_2_136:4.3.2.1
	Kernel-5_35-4_79_2_135:4.3.2.1
	Kernel-5_35-4_79_2_134:4.3.2.1
	Kernel-5_35-4_79_2_133:4.3.2.1
	Kernel-5_35-4_79_2_132:4.3.2.1
	Kernel-5_35-4_79_2_131:4.3.2.1
	Kernel-5_35-4_79_2_130:4.3.2.1
	Kernel-5_35-4_79_2_129:4.3.2.1
	Kernel-5_35-4_79_2_128:4.3.2.1
	Kernel-5_35-4_79_2_127:4.3.2.1
	Kernel-5_35-4_79_2_126:4.3.2.1
	Kernel-5_35-4_79_2_125:4.3.2.1
	Kernel-5_35-4_79_2_124:4.3.2.1
	Kernel-5_35-4_79_2_123:4.3
	Cortex_merge:4.3
	Kernel-5_35-4_79_2_122:4.3
	Kernel-5_35-4_79_2_98_2_54:4.3
	Kernel-5_35-4_79_2_98_2_53:4.3
	Kernel-5_35-4_79_2_98_2_52:4.3
	Kernel-5_35-4_79_2_98_2_51:4.3
	Kernel-5_35-4_79_2_98_2_50:4.3
	Kernel-5_35-4_79_2_98_2_49:4.3
	Kernel-5_35-4_79_2_98_2_48:4.3
	Kernel-5_35-4_79_2_121:4.3
	Kernel-5_35-4_79_2_98_2_47:4.3
	Kernel-5_35-4_79_2_120:4.3
	Kernel-5_35-4_79_2_98_2_46:4.3
	Kernel-5_35-4_79_2_119:4.3
	Kernel-5_35-4_79_2_98_2_45:4.3
	Kernel-5_35-4_79_2_98_2_44:4.3
	Kernel-5_35-4_79_2_118:4.3
	Kernel-5_35-4_79_2_98_2_43:4.3
	Kernel-5_35-4_79_2_117:4.3
	Kernel-5_35-4_79_2_116:4.3
	Kernel-5_35-4_79_2_98_2_42:4.3
	Kernel-5_35-4_79_2_115:4.3
	Kernel-5_35-4_79_2_98_2_41:4.3
	Kernel-5_35-4_79_2_98_2_40:4.3
	Kernel-5_35-4_79_2_114:4.3
	Kernel-5_35-4_79_2_98_2_39:4.3
	Kernel-5_35-4_79_2_98_2_38:4.3
	Kernel-5_35-4_79_2_113:4.3
	Kernel-5_35-4_79_2_112:4.3
	Kernel-5_35-4_79_2_98_2_37:4.3
	Kernel-5_35-4_79_2_98_2_36:4.3
	Kernel-5_35-4_79_2_98_2_35:4.3
	Kernel-5_35-4_79_2_98_2_34:4.3
	Kernel-5_35-4_79_2_98_2_33:4.3
	Kernel-5_35-4_79_2_98_2_32:4.3
	Kernel-5_35-4_79_2_98_2_31:4.3
	Kernel-5_35-4_79_2_98_2_30:4.3
	Kernel-5_35-4_79_2_98_2_29:4.3
	Kernel-5_35-4_79_2_98_2_28:4.3
	Kernel-5_35-4_79_2_98_2_27:4.3
	Kernel-5_35-4_79_2_98_2_26:4.3
	Kernel-5_35-4_79_2_111:4.3
	Kernel-5_35-4_79_2_98_2_25:4.3
	Kernel-5_35-4_79_2_98_2_24:4.3
	Kernel-5_35-4_79_2_98_2_23:4.3
	Kernel-5_35-4_79_2_110:4.3
	Kernel-5_35-4_79_2_98_2_22:4.3
	Kernel-5_35-4_79_2_109:4.3
	Kernel-5_35-4_79_2_98_2_21:4.3
	Kernel-5_35-4_79_2_98_2_20:4.3
	Kernel-5_35-4_79_2_108:4.3
	Kernel-5_35-4_79_2_107:4.3
	Kernel-5_35-4_79_2_98_2_19:4.3
	Kernel-5_35-4_79_2_98_2_18:4.3
	Kernel-5_35-4_79_2_98_2_17:4.3
	Kernel-5_35-4_79_2_98_2_16:4.3
	Kernel-5_35-4_79_2_98_2_15:4.3
	Kernel-5_35-4_79_2_106:4.3
	Kernel-5_35-4_79_2_105:4.3
	Kernel-5_35-4_79_2_104:4.3
	Kernel-5_35-4_79_2_98_2_14:4.3
	Kernel-5_35-4_79_2_98_2_13:4.3
	Kernel-5_35-4_79_2_98_2_12:4.3
	Kernel-5_35-4_79_2_98_2_11:4.3
	Kernel-5_35-4_79_2_98_2_10:4.3
	Kernel-5_35-4_79_2_98_2_9:4.3
	Kernel-5_35-4_79_2_103:4.3
	Kernel-5_35-4_79_2_102:4.3
	Kernel-5_35-4_79_2_98_2_8:4.3
	Kernel-5_35-4_79_2_98_2_7:4.3
	Kernel-5_35-4_79_2_98_2_6:4.3
	Kernel-5_35-4_79_2_98_2_5:4.3
	Kernel-5_35-4_79_2_98_2_4:4.3
	Kernel-5_35-4_79_2_101:4.3
	Kernel-5_35-4_79_2_100:4.3
	Kernel-5_35-4_79_2_99:4.3
	Kernel-5_35-4_79_2_98_2_3:4.3
	Kernel-5_35-4_79_2_98_2_2:4.3
	Kernel-5_35-4_79_2_98_2_1:4.3
	Cortex:4.3.0.4
	Cortex_bp:4.3
	Kernel-5_35-4_79_2_98:4.3
	Kernel-5_35-4_79_2_97:4.3
	Kernel-5_35-4_79_2_96:4.3
	Kernel-5_35-4_79_2_95:4.3
	Kernel-5_35-4_79_2_94:4.3
	Kernel-5_35-4_79_2_93:4.3
	Kernel-5_35-4_79_2_92:4.3
	Kernel-5_35-4_79_2_91:4.3
	Kernel-5_35-4_79_2_90:4.3
	Kernel-5_35-4_79_2_89:4.3
	Kernel-5_35-4_79_2_88:4.3
	Kernel-5_35-4_79_2_87:4.3
	Kernel-5_35-4_79_2_86:4.3
	Kernel-5_35-4_79_2_85:4.3
	Kernel-5_35-4_79_2_84:4.3
	Kernel-5_35-4_79_2_83:4.3
	Kernel-5_35-4_79_2_82:4.3
	Kernel-5_35-4_79_2_81:4.3
	Kernel-5_35-4_79_2_80:4.3
	Kernel-5_35-4_79_2_79:4.3
	Kernel-5_35-4_79_2_78:4.3
	Kernel-5_35-4_79_2_77:4.3
	RO_5_07:4.3
	Kernel-5_35-4_79_2_76:4.3
	Kernel-5_35-4_79_2_75:4.3
	Kernel-5_35-4_79_2_74:4.3
	Kernel-5_35-4_79_2_73:4.3
	Kernel-5_35-4_79_2_72:4.3
	Kernel-5_35-4_79_2_71:4.3
	Kernel-5_35-4_79_2_70:4.3
	Kernel-5_35-4_79_2_69:4.3
	Kernel-5_35-4_79_2_68:4.3
	Kernel-5_35-4_79_2_67:4.3
	Kernel-5_35-4_79_2_66:4.3
	Kernel-5_35-4_79_2_65:4.3
	Kernel-5_35-4_79_2_64:4.3
	Kernel-5_35-4_79_2_63:4.3
	Kernel-5_35-4_79_2_62:4.3
	Kernel-5_35-4_79_2_61:4.3
	Kernel-5_35-4_79_2_59:4.3
	Kernel-5_35-4_79_2_58:4.3
	Kernel-5_35-4_79_2_57:4.3
	Kernel-5_35-4_79_2_56:4.3
	Kernel-5_35-4_79_2_55:4.3
	Kernel-5_35-4_79_2_54:4.3
	Kernel-5_35-4_79_2_53:4.3
	Kernel-5_35-4_79_2_52:4.3
	Kernel-5_35-4_79_2_51:4.3
	Kernel-5_35-4_79_2_50:4.3
	Kernel-5_35-4_79_2_49:4.3
	Kernel-5_35-4_79_2_48:4.3
	Kernel-5_47:4.3
	Kernel-5_46-4_90_2_1:4.3
	nbingham_Kernel_FastNC_dev_bp:4.3
	nbingham_Kernel_FastNC_dev:4.3.0.6
	Kernel-5_46:4.3
	Kernel-5_45:4.3
	Kernel-5_35-4_79_2_47:4.3
	Kernel-5_35-4_79_2_46:4.3
	Kernel-5_35-4_79_2_45:4.3
	Kernel-5_35-4_79_2_44:4.3
	Kernel-5_35-4_79_2_25_2_2:4.3
	Kernel-5_35-4_79_2_43:4.3
	Kernel-5_35-4_79_2_42:4.3
	Kernel-5_35-4_79_2_41:4.3
	Kernel-5_35-4_79_2_40:4.3
	Kernel-5_35-4_79_2_39:4.3
	Kernel-5_35-4_79_2_38:4.3
	Kernel-5_35-4_79_2_37:4.3
	Kernel-5_35-4_79_2_36:4.3
	Kernel-5_35-4_79_2_35:4.3
	Kernel-5_35-4_79_2_34:4.3
	Kernel-5_35-4_79_2_33:4.3
	Kernel-5_35-4_79_2_32:4.3
	Kernel-5_44:4.3
	Kernel-5_35-4_79_2_25_2_1:4.3
	Kernel-5_43:4.3
	Kernel-5_35-4_79_2_31:4.3
	Kernel-5_35-4_79_2_30:4.3
	Kernel-5_35-4_79_2_29:4.3
	Kernel-5_35-4_79_2_28:4.3
	Kernel-5_35-4_79_2_27:4.3
	Kernel-5_35-4_79_2_26:4.3
	Kernel-5_42:4.3
	Kernel-5_41:4.3
	Kernel-5_40:4.3
	Kernel-5_35-4_79_2_25:4.3
	Kernel-5_35-4_79_2_24:4.3
	Kernel-5_35-4_79_2_23:4.3
	Kernel-5_35-4_79_2_22:4.3
	Kernel-5_35-4_79_2_21:4.3
	Kernel-5_35-4_79_2_20:4.3
	Kernel-5_35-4_79_2_19:4.3
	Kernel-5_35-4_79_2_18:4.3
	Kernel-5_35-4_79_2_17:4.3
	Kernel-5_35-4_79_2_16:4.3
	Kernel-5_35-4_79_2_15:4.3
	Kernel-5_35-4_79_2_14:4.3
	Kernel-5_39:4.3
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.10
	Kernel-5_38:4.3
	Kernel-5_35-4_79_2_13:4.3
	Kernel-5_35-4_79_2_12:4.3
	Kernel-5_35-4_79_2_11:4.3
	Kernel-5_37:4.3
	Kernel-5_35-4_79_2_10:4.3
	Kernel-5_35-4_79_2_9:4.3
	Kernel-5_36:4.3
	Kernel-5_35-4_79_2_8:4.3
	Kernel-5_35-4_79_2_7:4.3
	Kernel-5_35-4_79_2_6:4.3
	Kernel-5_35-4_79_2_5:4.3
	Kernel-5_35-4_79_2_4:4.3
	Kernel-5_35-4_79_2_3:4.3
	Kernel-5_35-4_79_2_2:4.3
	dellis_autobuild_BaseSW:4.3
	Kernel-5_35-4_79_2_1:4.3
	HAL:4.3.0.2
	Kernel-5_35:4.3
	Kernel-5_34:4.3
	Kernel-5_33:4.3
	Kernel-5_32:4.3
	Kernel-5_31:4.3
	Kernel-5_30:4.3
	Kernel-5_29:4.3
	Kernel-5_28:4.3
	Kernel-5_27:4.3
	Kernel-5_26:4.3
	Kernel-5_25:4.3
	Kernel-5_24:4.3
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.3
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2016.06.30.20.08.19;	author jlee;	state Exp;
branches;
next	4.3;
commitid	IWoXxARWeuLDOwcz;

4.3
date	2000.04.13.10.37.30;	author kbracey;	state Exp;
branches
	4.3.2.1;
next	4.2;

4.2
date	2000.04.04.14.27.41;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.39;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.3.2.1
date	2011.11.27.11.48.21;	author rsprowson;	state Exp;
branches;
next	4.3.2.2;
commitid	OFgqaKhOb6swXXIv;

4.3.2.2
date	2013.08.06.22.43.10;	author jlee;	state Exp;
branches;
next	;
commitid	TOIaeUf2Q4rBIr0x;

4.1.1.1
date	96.11.05.09.41.39;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.03.20;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.13.16;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.04.46;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > $.Source.VduGrafI
;
; ARTHUR OPERATING SYSTEM - Vdu Drivers
; =======================
;
; Vdu driver code - Sprite stuff
;
; Author R C Manby
; Date   10.11.86
;
; CHANGES
; -------
; 12.04.94   W Turner   Updated to allow the use of 1bpp masks
; 12.01.95   G Simms    Fixed MED-04130 where New format sprites with
;                       LH wastage were being created.

; *****************************************************************************
;
;       FlipAboutXAxis - Flip sprite about X axis
;
;       External routine
;
; in:   R2 -> sprite
;

FlipAboutXAxis ROUT
        Push    R14

        BL      MaskOffset
        MOV     R7, R0                  ; 0/offset for nomask/mask
        LDR     R4, [R2, #spWidth]      ; width-1
        LDR     R5, [R2, #spHeight]     ; height-1
        LDR     R6, [R2, #spImage]
        TEQ     R5, #0
        BEQ     %FT05                   ; nothing to do, if only 1 row

        ADD     R0, R2, R6              ; R0 -> top row in image
        ADD     R3, R4, #1              ; width
        MUL     R1, R5, R3              ; R1 = word offset to bottom row
        ADD     R1, R0, R1, LSL #2      ; R1 -> bottom row in image

        Push    "R0-R1, R2, R4-R5, R7"      ; preserve ptrs & mask offset
        BL      FlipAbX10               ; flip main image
        Pull    "R0-R1, R2, R4-R5, R7"

        CMP     R7, #0
        BEQ     %FT05                   ; No mask so skip this bit

        ADD     R0, R0, R7              ; Update the start pointer

        ;If a new format sprite (we know it has a mask)
        ;redo R1 & call the 'GetMaskspWidth' routine to alter R3

        LDR     R8, [R2, #spMode]       ; Get sprite mode
        MOVS    R8, R8, LSR #27         ; Isolate sprite type & test for 0

        ADDEQ   R1, R1, R7              ; Old format, so simple
        BEQ     %FT04

        ;Here, we know it is a 1bpp or alpha mask
        MOV     R6, R5                  ; Better keep R5 safe, we'll need it in a bit
        MOV     R5, R4                  ; The sub wants R4 in r5
        BL      GetMaskspWidth          ; Update the 'width' if needed
        ADD     R3, R5, #1              ; R3=width in words

        MUL     R1, R6, R3              ; R1 = word offset to bottom row
        ADD     R1, R0, R1, LSL #2      ; R1 -> Bottom row in image
04
        BL      FlipAbX10               ; flip mask
05
        Pull    R14
        RETURNVC

; *****************************************************************************
;
;       FlipAbX10 - Flip area given ptrs and width
;
;       Internal routine, called by FlipAboutXAxis
;
; in:   R0 -> top row
;       R1 -> bottom row
;       R3 = width in words
;
; out:  R0-R2,R4-R11 corrupted
;       R3 preserved
;

FlipAbX10 ROUT
10
        SUBS    R2, R3, #4              ; initialise width count
        BLT     %FT30
20                                      ; flip in blocks of 4 words
        LDMIA   R0, {R4-R7}
        LDMIA   R1, {R8-R11}
        STMIA   R1!, {R4-R7}
        STMIA   R0!, {R8-R11}
        SUBS    R2, R2, #4
        BGE     %BT20
30
        ADDS    R2, R2, #4
        BLE     %FT50
40                                      ; do remaining words one by one
        LDR     R4, [R0]
        LDR     R8, [R1]
        STR     R4, [R1], #4
        STR     R8, [R0], #4
        SUBS    R2, R2, #1
        BNE     %BT40
50
        SUB     R1, R1, R3, LSL #3      ; point to previous row
        CMP     R1, R0
        BHI     %BT10                   ; loop until pointers meet or cross
        MOV     PC, R14                 ; only R3 preserved

; *****************************************************************************
;
;       FlipAboutYAxis - Flip a sprite about Y axis
;
;       External routine
;
; in:   R2 -> sprite
;

FlipAboutYAxis ROUT
        Push    R14

        BL      MaskOffset
        MOV     R8, R0                  ;Bung result in R8 'till we want it...

        ADD     R3, R2, #spWidth
        LDMIA   R3, {R3-R7}     ; R3     ,R4      ,R5    ,R6    ,R7
                                ; spWidth,spHeight,spLBit,spRBit,spImage
        ADD     R3, R3, #1              ; use width as row offset (words)

        MUL     R4, R3, R4              ; R4=width x (height-1) in words
        ADD     R4, R4, R3              ; R4=width x height in words
        ADD     R4, R7, R4, LSL #2      ; offset past end of sprite image
        ADD     R4, R4, R2              ; address past end of image

        RSB     R5, R5, #31             ; reflect LBit & RBit
        RSB     R6, R6, #31
        STR     R5, [R2, #spRBit]       ; new RBit := 31- old LBit
        STR     R6, [R2, #spLBit]       ; new LBit := 31- old RBit
        ADD     R0, R2, R7              ; R0 -> start of first row
        LDR     R11, [WsPtr, #SprBytesPerChar]  ; shift factor to
                                                ; reach next pixel
        LDR     R9, [WsPtr, #SprWriteNColour]   ; mask for leftmost pixel
        MOV     R10, R9, ROR R11                ; mask for rightmost pixel

        Push    "R0, R2, R5-R8"
        BL      FlipAbY10               ; Do the sprite image
        Pull    "R0, R2, R5-R8"

        Push    "R0,R8"
        LDR     R8, [R2, #spMode]       ; Get sprite mode
        MOVS    R8, R8, LSR #27         ; Isolate sprite type & test for 0
        BEQ     %FT03                   ; If old format ignore next bit

        ; If this is a new format sprite we may have to remove any LH
        ; wastage that was created by the flip.
        CMP     R6, #0                  ; Is there any LH wastage?
        BEQ     %FT03                   ; If not skip the next bit.
        MOV     R8, R6
        BL      RemLHWastage
        ; If this is a new format sprite then LH wastage = 0 and the RH wastage
        ; is the same as it was to start with.
        RSB     R5, R6, #31             ; restore old RBit
        MOV     R6, #0
        STR     R5, [R2, #spRBit]       ; new RBit := 31- old LBit
        STR     R6, [R2, #spLBit]       ; new LBit := 0
03
        Pull    "R0,R8"
        CMP     R8, #0                  ; Does the sprite have a mask?
        BEQ     %FT05                   ; Nope, so skip the mask flip!

        ;Now, is it an old or new sprite?
        LDR     R1, [R2, #spMode]       ; Get sprite mode
        ADD     R0, R0, R8              ; R0 points to start of mask
        MOVS    R1, R1, LSR #27         ; Isolate sprite type & test for 0

        ADDEQ   R4, R4, R8              ;R4 points to end of mask now
        BEQ     %FT04                   ;Skip the next bit (it's for new format only)

        Push    "R5"
        LDR     R5, [R2, #spWidth]
        BL      GetMaskspWidth
        ADD     R3, R5, #1              ;R3 is new row offset (words)
        Pull    "R5"

        Push    "R8"                    ;Last Bit used for mask, this will enable
                                        ;us to remove the left hand wastage after
                                        ;the flip

        LDR     R4, [R2, #spHeight]
        LDR     R8, [R2, #spTrans]
        MUL     R4, R3, R4              ; R4=width x (height-1) in words
        ADD     R4, R4, R3              ; R4=width x height in words
        ADD     R4, R8, R4, LSL #2      ; offset past end of sprite mask
        ADD     R4, R4, R2              ; address past end of mask

        ADD     R0, R2, R8              ; R0 -> start of first row of mask
;        LDR     R11, [WsPtr, #SprBytesPerChar]  ; shift factor to
                                                ; reach next pixel
;        LDR     R9, [WsPtr, #SprWriteNColour]   ; mask for leftmost pixel

        MOV     R11, #1
        MOV     R9, #1

        MOV     R10, R9, ROR R11                ; mask for rightmost pixel

        Push    "R0"
        BL      FlipAbY10               ; Now do the mask
        Pull    "R0"
        Pull    "R8"                    ; Retrieve last bit used to find LHwastage
        RSB     R8, R8, #31
        CMP     R8, #0
        BEQ     %FT05
        BL      RemLHWastage
        B       %FT05
04
        BL      FlipAbY10               ; Now do the mask
05
        Pull    R14
        RETURNVC

; *****************************************************************************
;
;       FlipAbY10 - Flip area given ptrs and width
;
;       Internal routine, called by FlipAboutYAxis
;
; N.B. This reflects 'user pixels', ie in double pixel modes it
;      reflects pairs of screen pixels, this should not matter.
;
; ON ENTRY, we have R0, R3-R4, R9-R11
; ON EXIT, of these, only R0 is corrupted

; Internally:
;       R0  RowPtr, R1 LPtr , R2 RPtr , R3 Row offset, R4 EndAdr
;       R5  LWord , R6 RWord, R7 LTemp, R8 RTemp     , R9 LPixMask
;       R10 RPixMask, R11 ShftFactor, R14 Cnt

; R0-R2, R5-R8 get corrupted

FlipAbY10
        Push    R14
10
        MOV     R1, R0                  ; R1 -> left end of row
        ADD     R0, R0, R3, LSL #2      ; R0 -> past right end of row
        MOV     R2, R0                  ; R2 := R0
20
        LDR     R5, [R1]
        LDR     R6, [R2, #-4]!
        MOV     R14, #32                ; total number of bits to process
30                                      ; circular pixel shift of LWord & RWord
        AND     R7, R5, R9              ; leftmost pixel (LSPart of LWord)
        AND     R8, R6, R10             ; rightmost pixel (MSPart of RWord)
        ORR     R5, R8, R5, LSR R11
        ORR     R6, R7, R6, LSL R11
        SUBS    R14, R14, R11           ; process next pixel
        BNE     %BT30                   ; TMD 12-Jan-88 bug fixed here
                                        ; I had changed RCM's code and put BCS

        STR     R5, [R1], #4
        STR     R6, [R2]
        CMP     R2, R1
        BHI     %BT20                   ; loop until pointers meet or cross

        CMP     R0, R4
        BCC     %BT10                   ; if address < end, reflect next row

        Pull    R14
        MOV     PC, R14

; *****************************************************************************
;
;       RemLHWastage - Dedicated routine to remove x bits of LH wastage
;                      after a new format Sprite has been flipped
;
;       On Entry:    R0 = Start of data
;                    R3 = Row Offset
;                    R4 = End of data
;                    R8 = No. Bits to Remove
;       R0  RowPtr, R1 LPtr , R2 RPtr , R3 Row offset, R4 EndAdr

RemLHWastage
        Push    "R1,R2,R5-R8,R14"
10
;start of loop for each line
        MOV     R1, R0                  ; R1 -> left end of row
        ADD     R0, R0, R3, LSL #2      ; R0 -> past right end of row
        SUB     R2, R0, #4              ; R2 -> last word in row
                                        ;         (used for loop check)
        LDR     R5, [R1]                ; load current word
20
;Start of loop for each word
        CMP     R2, R1
        ;If we have reached the last word then just shift and store
        MOVEQ   R5, R5, LSR R8
        STREQ   R5, [R1]
        BEQ     %FT99
        ;There are more words left so we need to shift in the LSBits from the next
        ;word.
        LDR     R6, [R1, #4]           ; load next word
        MOV     R5, R5, LSR R8         ; Throw away wastage bits in current word
        RSB     R14, R8, #32
        MOV     R7, R6, LSL R14        ; Move LSBs from next word to current
        ORR     R5, R5, R7
        STR     R5, [R1],#4            ; store current word
        MOV     R5, R6                 ; move next word to current word ready for
                                       ; next loop iteration.

        B       %BT20
;        CMP     R2, R1
;        BHI     %BT20                   ; loop until pointers meet or cross

99
        CMP     R0, R4
        BCC     %BT10                   ; if address < end, reflect next row

        Pull    "R1,R2,R5-R8,R14"
        MOV     PC, R14


        END
@


4.3
log
@* Run-time emulator detection added (no need for separate images). Needs an
  RPCEm update.
* Register allocation in default ErrorV handler fixed - problems occured when
  callbacks were triggered on way out.
* OS_Byte 19 didn't manipulate interrupt disable flag correctly in 26-bit
  builds.
* Stray bit of debugging left in sprite code many years ago removed.

Version 5.23. Not tagged
@
text
@d74 1
a74 1
        ;Here, we know it is a 1bpp mask
d225 1
a225 1
	Push    "R0"
d324 2
a325 2
	MOV     R5, R6                 ; move next word to current word ready for
	                               ; next loop iteration.
@


4.3.2.1
log
@Reindent Arthur2.
Expand tabs.
Swap DCI for instructions now Objasm 4 is out.
Symbols for FSControl_CAT/RUN/OPT changed to non Arthur definitions.
Still boots on IOMD class, no other testing.

Version 5.35, 4.79.2.124. Tagged as 'Kernel-5_35-4_79_2_124'
@
text
@d225 1
a225 1
        Push    "R0"
d324 2
a325 2
        MOV     R5, R6                 ; move next word to current word ready for
                                       ; next loop iteration.
@


4.3.2.2
log
@Add support for the new RISC OS 5 style sprite mode word. Add partial support for alpha channel sprite masks. Implement OS_ScreenMode reasons 13-15
Detail:
  ECFShift/ECFYOffset:
  - hdr/PublicWS - Add ECFShift and ECFYOffset to list of public exports (SpriteExtend was using hardcoded values). Rearrange exports so that VduWorkspace exports are now labelled as such.
  - hdr/KernelWS - Make sure ECFShift & ECFYOffset match their exported locations
  - hdr/OSRSI6, s/Middle - Add OS_ReadSysInfo 6 items 83 & 84, for reading ECFYOffset and ECFShift locations
  Mode flags/VDU variables:
  - Makefile - Add hdr/VduExt to the C header exports
  - hdr/VduExt - Get rid of NotRVVTBarWobblyBits macro and defined VDU variables manually so that Hdr2H will handle them. Begin replacing overly generic 'Flag_*' mode flag definitions with 'ModeFlag_*' instead. Define new flags as required by the new screen/sprite modes. Add OS_ScreenMode reason codes and mode selector format (from s.vdu.vdudecl)
  - NewModes/NEWF2, NewModes/OldPSSrc, NewModes/PSSrc, s.vdu.vdu23, s.vdu.vducursoft, s.vdu.vdudriver, s.vdu.vdugrafg, s.vdu.vdugrafj, s.vdu.vdugrafl, s.vdu.vdumodes, s.vdu.vdupal10, s.vdu.vdupal20, s.vdu.vdupalette, s.vdu.vdupalxx, s.vdu.vduwrch - Renaming Flag_* to ModeFlag_*
  - s.vdu.vdudecl - Remove OS_ScreenMode reason codes & mode selector format definitions; these are now in hdr/VduExt. Flag_* -> ModeFlag_* renaming.
  - s.vdu.vdupalxx - Apply a greyscale palette in PV_SetDefaultPalette if the greyscale mode flag is set
  New sprite types:
  - s.vdu.vdudriver - Extend GenerateModeSelectorVars to deal with the wide mask flag, 64K sprites, and the new RISC OS 5 sprite mode word format.
  - s.vdu.vdugrafdec - Store more information about the sprite in the SprReadNColour ... SprLog2BPC block.
  - s.vdu.vdugrafg - Update SpriteVecHandler to be able to detect whether RISC OS 5 format sprites are allowed palettes. Update SetupSprModeData to store the extra sprite info that's defined in vdugrafdec. Update PutSprite to fault any sprites with wide masks - SpriteExtend must be used for that (once implemented!)
  - s.vdu.vdugrafh - Update WritePixelColour to avoid temporary poking of NColour VDU variable for 8bpp sprites. Correctly replicate data when writing to RISC OS 5 format sprites. Update ReadPixelMask, WritePixelMask, SpriteMaskAddr, GetMaskspWidth to deal with wide masks. Delete obsolete bounce_new_format_masks routine.
  - s.vdu.vdugrafi - Comment updated to reflect new reality
  - s.vdu.vdugrafj - Get rid of unused code block in CreateHeader/PostCreateHeader. Update SanitizeSGetMode to generate RISC OS 5 style sprite mode words where applicable. Update DecideMaskSize to rely on GetMaskspWidth for calculating mask width.
  - s.vdu.vdugrafl - Update SwitchOutputToSprite/SwitchOutputToMask to deal with the new sprite formats. Allow PushModeInfoAnyMonitor to fail.
  - s.vdu.vduswis - Extended OS_ReadModeVariable to cope with new sprite types
  Misc:
  - s.vdu.vdudriver - Fixed bug with VIDCList copying where any -1 value in the structure would terminate the copy, instead of only -1 as a control item number
  - s.vdu.vduswis - Implemented OS_ScreenMode 13 (Mode string to specifier), 14 (mode specifier to string), and 15 (set mode by string). Mostly as per ROL's specs, but minus support for teletext attributes, and plus support for new RISC OS 5 attributes (L... layout specifier, 4096 & 24bpp packed modes, etc.)
  - s.vdu.vduwrch - Pick correct default text colours for the new modes
Admin:
  Tested on BB-xM
  Part of an implementation of the Extended Framebuffer Format spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification


Version 5.35, 4.79.2.194. Tagged as 'Kernel-5_35-4_79_2_194'
@
text
@d74 1
a74 1
        ;Here, we know it is a 1bpp or alpha mask
@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@a221 7
;**************
        Push    R0
        MOV     R0, #&6000
        STR     R9, [R0]
        STR     R11, [R0, #4]
        Pull    R0
;**************
@


4.1
log
@Initial revision
@
text
@d65 1
a65 1
        ;If a new format sprite (we know it has a mask) 
d86 1
a86 1
        BICS    PC, R14, #V_bit
d127 1
a127 1
        MOVS    PC, R14                 ; only R3 preserved
d167 1
a167 1
        
d172 1
a172 1
        
d245 1
a245 1
        BICS    PC, R14, #V_bit
d262 1
a262 1
;       R10 RPixMask, R11 ShftFactor, R14 Cnt 
d294 1
a294 1
        MOVS    PC, R14
d300 1
a300 1
;       
d343 1
a343 1
        MOVS    PC, R14
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
