head	4.4;
access;
symbols
	Kernel-6_15:4.4
	Kernel-6_14:4.4
	Kernel-6_01-3:4.3
	Kernel-6_13:4.4
	Kernel-6_12:4.4
	Kernel-6_11:4.4
	Kernel-6_10:4.3
	Kernel-6_09:4.3
	Kernel-6_08-4_129_2_10:4.3
	Kernel-6_08-4_129_2_9:4.3
	Kernel-6_08:4.3
	Kernel-6_07:4.3
	Kernel-6_06:4.3
	Kernel-6_05-4_129_2_8:4.3
	Kernel-6_05:4.3
	Kernel-6_04:4.3
	Kernel-6_03:4.3
	Kernel-6_01-2:4.3
	Kernel-6_01-4_146_2_1:4.3
	Kernel-6_02:4.3
	Kernel-6_01-1:4.3
	Kernel-6_01:4.3
	Kernel-6_00:4.3
	Kernel-5_99:4.3
	Kernel-5_98:4.3
	Kernel-5_97-4_129_2_7:4.3
	Kernel-5_97:4.3
	Kernel-5_96:4.3
	Kernel-5_95:4.3
	Kernel-5_94:4.3
	Kernel-5_93:4.3
	Kernel-5_92:4.3
	Kernel-5_91:4.3
	Kernel-5_90:4.3
	Kernel-5_89-4_129_2_6:4.3
	Kernel-5_89:4.3
	Kernel-5_88-4_129_2_5:4.3
	Kernel-5_88-4_129_2_4:4.3
	Kernel-5_88:4.3
	Kernel-5_87:4.3
	Kernel-5_86-4_129_2_3:4.3
	Kernel-5_86-4_129_2_2:4.3
	Kernel-5_86-4_129_2_1:4.3
	Kernel-5_86:4.3
	SMP:4.3.0.2
	SMP_bp:4.3
	Kernel-5_85:4.3
	Kernel-5_54-1:4.3
	Kernel-5_84:4.3
	Kernel-5_83:4.3
	Kernel-5_82:4.3
	Kernel-5_81:4.3
	Kernel-5_80:4.3
	Kernel-5_79:4.3
	Kernel-5_78:4.3
	Kernel-5_77:4.3
	Kernel-5_76:4.3
	Kernel-5_75:4.3
	Kernel-5_74:4.3
	Kernel-5_73:4.3
	Kernel-5_72:4.3
	Kernel-5_71:4.3
	Kernel-5_70:4.3
	Kernel-5_69:4.3
	Kernel-5_68:4.3
	Kernel-5_67:4.3
	Kernel-5_66:4.3
	Kernel-5_65:4.3
	Kernel-5_64:4.3
	Kernel-5_63:4.3
	Kernel-5_62:4.3
	Kernel-5_61:4.3
	Kernel-5_60:4.3
	Kernel-5_59:4.3
	Kernel-5_58:4.3
	Kernel-5_57:4.3
	Kernel-5_56:4.3
	Kernel-5_55:4.3
	Kernel-5_54:4.3
	Kernel-5_53:4.3
	Kernel-5_52:4.3
	Kernel-5_51:4.3
	Kernel-5_50:4.3
	Kernel-5_49:4.3
	HAL_merge:4.2.2.4
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.2.2.4
	Kernel-5_35-4_79_2_326:4.2.2.4
	Kernel-5_35-4_79_2_325:4.2.2.4
	Kernel-5_35-4_79_2_324:4.2.2.4
	Kernel-5_35-4_79_2_323:4.2.2.4
	Kernel-5_35-4_79_2_322:4.2.2.4
	Kernel-5_35-4_79_2_321:4.2.2.4
	Kernel-5_35-4_79_2_320:4.2.2.4
	Kernel-5_35-4_79_2_319:4.2.2.4
	Kernel-5_35-4_79_2_318:4.2.2.4
	Kernel-5_35-4_79_2_317:4.2.2.4
	Kernel-5_35-4_79_2_316:4.2.2.4
	Kernel-5_35-4_79_2_315:4.2.2.4
	Kernel-5_35-4_79_2_314:4.2.2.4
	Kernel-5_35-4_79_2_313:4.2.2.4
	Kernel-5_35-4_79_2_312:4.2.2.4
	Kernel-5_35-4_79_2_311:4.2.2.4
	Kernel-5_35-4_79_2_310:4.2.2.4
	Kernel-5_35-4_79_2_309:4.2.2.4
	Kernel-5_35-4_79_2_308:4.2.2.4
	Kernel-5_35-4_79_2_307:4.2.2.4
	Kernel-5_35-4_79_2_306:4.2.2.4
	Kernel-5_35-4_79_2_305:4.2.2.4
	Kernel-5_35-4_79_2_304:4.2.2.4
	Kernel-5_35-4_79_2_303:4.2.2.4
	Kernel-5_35-4_79_2_302:4.2.2.4
	Kernel-5_35-4_79_2_301:4.2.2.4
	Kernel-5_35-4_79_2_300:4.2.2.4
	Kernel-5_35-4_79_2_299:4.2.2.4
	Kernel-5_35-4_79_2_298:4.2.2.4
	Kernel-5_35-4_79_2_297:4.2.2.4
	Kernel-5_35-4_79_2_296:4.2.2.4
	Kernel-5_35-4_79_2_295:4.2.2.4
	Kernel-5_35-4_79_2_294:4.2.2.4
	Kernel-5_35-4_79_2_293:4.2.2.4
	Kernel-5_35-4_79_2_292:4.2.2.4
	Kernel-5_35-4_79_2_291:4.2.2.4
	Kernel-5_35-4_79_2_290:4.2.2.4
	Kernel-5_35-4_79_2_289:4.2.2.4
	Kernel-5_35-4_79_2_288:4.2.2.4
	Kernel-5_35-4_79_2_287:4.2.2.4
	Kernel-5_35-4_79_2_286:4.2.2.4
	Kernel-5_35-4_79_2_285:4.2.2.4
	Kernel-5_35-4_79_2_284:4.2.2.4
	Kernel-5_35-4_79_2_283:4.2.2.4
	Kernel-5_35-4_79_2_282:4.2.2.4
	Kernel-5_35-4_79_2_281:4.2.2.4
	Kernel-5_35-4_79_2_280:4.2.2.4
	Kernel-5_35-4_79_2_279:4.2.2.4
	Kernel-5_35-4_79_2_278:4.2.2.4
	Kernel-5_35-4_79_2_277:4.2.2.4
	Kernel-5_35-4_79_2_276:4.2.2.4
	Kernel-5_35-4_79_2_275:4.2.2.4
	Kernel-5_35-4_79_2_274:4.2.2.4
	Kernel-5_35-4_79_2_273:4.2.2.4
	Kernel-5_35-4_79_2_272:4.2.2.4
	Kernel-5_35-4_79_2_271:4.2.2.4
	Kernel-5_35-4_79_2_270:4.2.2.4
	Kernel-5_35-4_79_2_269:4.2.2.4
	Kernel-5_35-4_79_2_268:4.2.2.4
	Kernel-5_35-4_79_2_267:4.2.2.4
	Kernel-5_35-4_79_2_266:4.2.2.4
	Kernel-5_35-4_79_2_265:4.2.2.4
	Kernel-5_35-4_79_2_264:4.2.2.4
	Kernel-5_35-4_79_2_263:4.2.2.4
	Kernel-5_35-4_79_2_262:4.2.2.4
	Kernel-5_35-4_79_2_261:4.2.2.4
	Kernel-5_35-4_79_2_260:4.2.2.4
	Kernel-5_35-4_79_2_259:4.2.2.4
	Kernel-5_35-4_79_2_258:4.2.2.4
	Kernel-5_35-4_79_2_257:4.2.2.4
	Kernel-5_35-4_79_2_256:4.2.2.4
	Kernel-5_35-4_79_2_255:4.2.2.4
	Kernel-5_35-4_79_2_254:4.2.2.4
	Kernel-5_35-4_79_2_253:4.2.2.4
	Kernel-5_35-4_79_2_252:4.2.2.4
	Kernel-5_35-4_79_2_251:4.2.2.4
	Kernel-5_35-4_79_2_250:4.2.2.4
	Kernel-5_35-4_79_2_249:4.2.2.4
	Kernel-5_35-4_79_2_248:4.2.2.4
	Kernel-5_35-4_79_2_247:4.2.2.4
	Kernel-5_35-4_79_2_246:4.2.2.4
	Kernel-5_35-4_79_2_245:4.2.2.4
	Kernel-5_35-4_79_2_244:4.2.2.4
	Kernel-5_35-4_79_2_243:4.2.2.4
	Kernel-5_35-4_79_2_242:4.2.2.4
	Kernel-5_35-4_79_2_241:4.2.2.4
	Kernel-5_35-4_79_2_240:4.2.2.4
	Kernel-5_35-4_79_2_239:4.2.2.4
	Kernel-5_35-4_79_2_238:4.2.2.4
	Kernel-5_35-4_79_2_237:4.2.2.4
	Kernel-5_35-4_79_2_236:4.2.2.4
	Kernel-5_35-4_79_2_235:4.2.2.4
	Kernel-5_35-4_79_2_234:4.2.2.4
	Kernel-5_35-4_79_2_233:4.2.2.4
	Kernel-5_35-4_79_2_232:4.2.2.4
	Kernel-5_35-4_79_2_231:4.2.2.4
	Kernel-5_35-4_79_2_230:4.2.2.4
	Kernel-5_35-4_79_2_229:4.2.2.4
	Kernel-5_35-4_79_2_228:4.2.2.4
	Kernel-5_35-4_79_2_227:4.2.2.4
	Kernel-5_35-4_79_2_226:4.2.2.4
	Kernel-5_35-4_79_2_225:4.2.2.4
	Kernel-5_35-4_79_2_224:4.2.2.4
	Kernel-5_35-4_79_2_223:4.2.2.4
	Kernel-5_35-4_79_2_222:4.2.2.4
	Kernel-5_35-4_79_2_221:4.2.2.4
	Kernel-5_35-4_79_2_220:4.2.2.4
	Kernel-5_35-4_79_2_219:4.2.2.4
	Kernel-5_35-4_79_2_218:4.2.2.4
	Kernel-5_35-4_79_2_217:4.2.2.4
	Kernel-5_35-4_79_2_216:4.2.2.4
	Kernel-5_35-4_79_2_215:4.2.2.4
	Kernel-5_35-4_79_2_214:4.2.2.4
	Kernel-5_35-4_79_2_213:4.2.2.4
	Kernel-5_35-4_79_2_212:4.2.2.4
	Kernel-5_35-4_79_2_211:4.2.2.4
	Kernel-5_35-4_79_2_210:4.2.2.4
	Kernel-5_35-4_79_2_209:4.2.2.4
	Kernel-5_35-4_79_2_208:4.2.2.4
	Kernel-5_35-4_79_2_207:4.2.2.4
	Kernel-5_35-4_79_2_206:4.2.2.4
	Kernel-5_35-4_79_2_205:4.2.2.4
	Kernel-5_35-4_79_2_204:4.2.2.4
	Kernel-5_35-4_79_2_203:4.2.2.4
	Kernel-5_35-4_79_2_202:4.2.2.4
	Kernel-5_35-4_79_2_201:4.2.2.4
	Kernel-5_35-4_79_2_200:4.2.2.4
	Kernel-5_35-4_79_2_199:4.2.2.4
	Kernel-5_35-4_79_2_198:4.2.2.4
	Kernel-5_35-4_79_2_197:4.2.2.4
	Kernel-5_35-4_79_2_196:4.2.2.4
	Kernel-5_35-4_79_2_195:4.2.2.4
	Kernel-5_35-4_79_2_194:4.2.2.4
	Kernel-5_35-4_79_2_193:4.2.2.3
	Kernel-5_35-4_79_2_192:4.2.2.3
	Kernel-5_35-4_79_2_191:4.2.2.3
	Kernel-5_35-4_79_2_190:4.2.2.3
	Kernel-5_35-4_79_2_189:4.2.2.3
	Kernel-5_35-4_79_2_188:4.2.2.3
	Kernel-5_35-4_79_2_187:4.2.2.3
	Kernel-5_35-4_79_2_186:4.2.2.3
	Kernel-5_35-4_79_2_185:4.2.2.3
	Kernel-5_35-4_79_2_184:4.2.2.3
	Kernel-5_35-4_79_2_183:4.2.2.3
	Kernel-5_35-4_79_2_182:4.2.2.3
	Kernel-5_35-4_79_2_181:4.2.2.3
	Kernel-5_35-4_79_2_180:4.2.2.3
	Kernel-5_35-4_79_2_179:4.2.2.3
	Kernel-5_35-4_79_2_178:4.2.2.3
	Kernel-5_35-4_79_2_177:4.2.2.3
	Kernel-5_35-4_79_2_176:4.2.2.3
	Kernel-5_35-4_79_2_175:4.2.2.3
	Kernel-5_35-4_79_2_174:4.2.2.3
	Kernel-5_35-4_79_2_173:4.2.2.3
	Kernel-5_35-4_79_2_172:4.2.2.3
	Kernel-5_35-4_79_2_171:4.2.2.3
	Kernel-5_35-4_79_2_170:4.2.2.3
	Kernel-5_35-4_79_2_169:4.2.2.3
	Kernel-5_35-4_79_2_168:4.2.2.3
	Kernel-5_35-4_79_2_167:4.2.2.3
	Kernel-5_35-4_79_2_166:4.2.2.3
	Kernel-5_35-4_79_2_165:4.2.2.3
	RPi_merge:4.2.2.3
	Kernel-5_35-4_79_2_147_2_23:4.2.2.3
	Kernel-5_35-4_79_2_147_2_22:4.2.2.3
	Kernel-5_35-4_79_2_147_2_21:4.2.2.3
	Kernel-5_35-4_79_2_147_2_20:4.2.2.3
	Kernel-5_35-4_79_2_147_2_19:4.2.2.3
	Kernel-5_35-4_79_2_147_2_18:4.2.2.3
	Kernel-5_35-4_79_2_164:4.2.2.3
	Kernel-5_35-4_79_2_163:4.2.2.3
	Kernel-5_35-4_79_2_147_2_17:4.2.2.3
	Kernel-5_35-4_79_2_147_2_16:4.2.2.3
	Kernel-5_35-4_79_2_147_2_15:4.2.2.3
	Kernel-5_35-4_79_2_162:4.2.2.3
	Kernel-5_35-4_79_2_161:4.2.2.3
	Kernel-5_35-4_79_2_147_2_14:4.2.2.3
	Kernel-5_35-4_79_2_147_2_13:4.2.2.3
	Kernel-5_35-4_79_2_160:4.2.2.3
	Kernel-5_35-4_79_2_159:4.2.2.3
	Kernel-5_35-4_79_2_158:4.2.2.3
	Kernel-5_35-4_79_2_157:4.2.2.3
	Kernel-5_35-4_79_2_156:4.2.2.3
	Kernel-5_35-4_79_2_147_2_12:4.2.2.3
	Kernel-5_35-4_79_2_147_2_11:4.2.2.3
	Kernel-5_35-4_79_2_155:4.2.2.3
	Kernel-5_35-4_79_2_147_2_10:4.2.2.3
	Kernel-5_35-4_79_2_154:4.2.2.3
	Kernel-5_35-4_79_2_153:4.2.2.3
	Kernel-5_35-4_79_2_147_2_9:4.2.2.3
	Kernel-5_35-4_79_2_152:4.2.2.3
	Kernel-5_35-4_79_2_151:4.2.2.3
	Kernel-5_35-4_79_2_147_2_8:4.2.2.3
	Kernel-5_35-4_79_2_147_2_7:4.2.2.3
	Kernel-5_35-4_79_2_150:4.2.2.3
	Kernel-5_35-4_79_2_147_2_6:4.2.2.3
	Kernel-5_35-4_79_2_147_2_5:4.2.2.3
	Kernel-5_35-4_79_2_149:4.2.2.3
	Kernel-5_35-4_79_2_147_2_4:4.2.2.3
	Kernel-5_35-4_79_2_147_2_3:4.2.2.3
	Kernel-5_35-4_79_2_148:4.2.2.3
	Kernel-5_35-4_79_2_147_2_2:4.2.2.3
	Kernel-5_35-4_79_2_147_2_1:4.2.2.3
	RPi:4.2.2.3.0.2
	RPi_bp:4.2.2.3
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2.2.2.2.2
	alees_Kernel_dev:4.2.2.2.2.2.0.2
	alees_Kernel_dev_bp:4.2.2.2.2.2
	Kernel-5_35-4_79_2_147:4.2.2.3
	Kernel-5_35-4_79_2_146:4.2.2.3
	Kernel-5_35-4_79_2_145:4.2.2.3
	Kernel-5_35-4_79_2_144:4.2.2.3
	Kernel-5_35-4_79_2_143:4.2.2.3
	Kernel-5_35-4_79_2_142:4.2.2.3
	Kernel-5_35-4_79_2_141:4.2.2.3
	Kernel-5_35-4_79_2_140:4.2.2.3
	Kernel-5_35-4_79_2_139:4.2.2.3
	Kernel-5_35-4_79_2_138:4.2.2.3
	Kernel-5_35-4_79_2_137:4.2.2.3
	Kernel-5_35-4_79_2_136:4.2.2.3
	Kernel-5_35-4_79_2_135:4.2.2.3
	Kernel-5_35-4_79_2_134:4.2.2.3
	Kernel-5_35-4_79_2_133:4.2.2.3
	Kernel-5_35-4_79_2_132:4.2.2.3
	Kernel-5_35-4_79_2_131:4.2.2.3
	Kernel-5_35-4_79_2_130:4.2.2.3
	Kernel-5_35-4_79_2_129:4.2.2.3
	Kernel-5_35-4_79_2_128:4.2.2.3
	Kernel-5_35-4_79_2_127:4.2.2.3
	Kernel-5_35-4_79_2_126:4.2.2.3
	Kernel-5_35-4_79_2_125:4.2.2.3
	Kernel-5_35-4_79_2_124:4.2.2.3
	Kernel-5_35-4_79_2_123:4.2.2.3
	Cortex_merge:4.2.2.2.2.2
	Kernel-5_35-4_79_2_122:4.2.2.2
	Kernel-5_35-4_79_2_98_2_54:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_53:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_52:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_51:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_50:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_49:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_48:4.2.2.2.2.2
	Kernel-5_35-4_79_2_121:4.2.2.2
	Kernel-5_35-4_79_2_98_2_47:4.2.2.2.2.2
	Kernel-5_35-4_79_2_120:4.2.2.2
	Kernel-5_35-4_79_2_98_2_46:4.2.2.2.2.2
	Kernel-5_35-4_79_2_119:4.2.2.2
	Kernel-5_35-4_79_2_98_2_45:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_44:4.2.2.2.2.2
	Kernel-5_35-4_79_2_118:4.2.2.2
	Kernel-5_35-4_79_2_98_2_43:4.2.2.2.2.2
	Kernel-5_35-4_79_2_117:4.2.2.2
	Kernel-5_35-4_79_2_116:4.2.2.2
	Kernel-5_35-4_79_2_98_2_42:4.2.2.2.2.2
	Kernel-5_35-4_79_2_115:4.2.2.2
	Kernel-5_35-4_79_2_98_2_41:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_40:4.2.2.2.2.2
	Kernel-5_35-4_79_2_114:4.2.2.2
	Kernel-5_35-4_79_2_98_2_39:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_38:4.2.2.2.2.2
	Kernel-5_35-4_79_2_113:4.2.2.2
	Kernel-5_35-4_79_2_112:4.2.2.2
	Kernel-5_35-4_79_2_98_2_37:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_36:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_35:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_34:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_33:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_32:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_31:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_30:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_29:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_28:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_27:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_26:4.2.2.2.2.2
	Kernel-5_35-4_79_2_111:4.2.2.2
	Kernel-5_35-4_79_2_98_2_25:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_24:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_23:4.2.2.2.2.2
	Kernel-5_35-4_79_2_110:4.2.2.2
	Kernel-5_35-4_79_2_98_2_22:4.2.2.2.2.2
	Kernel-5_35-4_79_2_109:4.2.2.2
	Kernel-5_35-4_79_2_98_2_21:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_20:4.2.2.2.2.2
	Kernel-5_35-4_79_2_108:4.2.2.2
	Kernel-5_35-4_79_2_107:4.2.2.2
	Kernel-5_35-4_79_2_98_2_19:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_18:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_17:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_16:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_15:4.2.2.2.2.2
	Kernel-5_35-4_79_2_106:4.2.2.2
	Kernel-5_35-4_79_2_105:4.2.2.2
	Kernel-5_35-4_79_2_104:4.2.2.2
	Kernel-5_35-4_79_2_98_2_14:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_13:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_12:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_11:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_10:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_9:4.2.2.2.2.2
	Kernel-5_35-4_79_2_103:4.2.2.2
	Kernel-5_35-4_79_2_102:4.2.2.2
	Kernel-5_35-4_79_2_98_2_8:4.2.2.2.2.2
	Kernel-5_35-4_79_2_98_2_7:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_6:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_5:4.2.2.2
	Kernel-5_35-4_79_2_98_2_4:4.2.2.2
	Kernel-5_35-4_79_2_101:4.2.2.2
	Kernel-5_35-4_79_2_100:4.2.2.2
	Kernel-5_35-4_79_2_99:4.2.2.2
	Kernel-5_35-4_79_2_98_2_3:4.2.2.2
	Kernel-5_35-4_79_2_98_2_2:4.2.2.2
	Kernel-5_35-4_79_2_98_2_1:4.2.2.2
	Cortex:4.2.2.2.0.2
	Cortex_bp:4.2.2.2
	Kernel-5_35-4_79_2_98:4.2.2.2
	Kernel-5_35-4_79_2_97:4.2.2.2
	Kernel-5_35-4_79_2_96:4.2.2.2
	Kernel-5_35-4_79_2_95:4.2.2.2
	Kernel-5_35-4_79_2_94:4.2.2.2
	Kernel-5_35-4_79_2_93:4.2.2.2
	Kernel-5_35-4_79_2_92:4.2.2.2
	Kernel-5_35-4_79_2_91:4.2.2.2
	Kernel-5_35-4_79_2_90:4.2.2.2
	Kernel-5_35-4_79_2_89:4.2.2.2
	Kernel-5_35-4_79_2_88:4.2.2.2
	Kernel-5_35-4_79_2_87:4.2.2.2
	Kernel-5_35-4_79_2_86:4.2.2.2
	Kernel-5_35-4_79_2_85:4.2.2.2
	Kernel-5_35-4_79_2_84:4.2.2.2
	Kernel-5_35-4_79_2_83:4.2.2.2
	Kernel-5_35-4_79_2_82:4.2.2.2
	Kernel-5_35-4_79_2_81:4.2.2.2
	Kernel-5_35-4_79_2_80:4.2.2.2
	Kernel-5_35-4_79_2_79:4.2.2.2
	Kernel-5_35-4_79_2_78:4.2.2.2
	Kernel-5_35-4_79_2_77:4.2.2.2
	RO_5_07:4.2.2.2
	Kernel-5_35-4_79_2_76:4.2.2.2
	Kernel-5_35-4_79_2_75:4.2.2.2
	Kernel-5_35-4_79_2_74:4.2.2.2
	Kernel-5_35-4_79_2_73:4.2.2.2
	Kernel-5_35-4_79_2_72:4.2.2.2
	Kernel-5_35-4_79_2_71:4.2.2.2
	Kernel-5_35-4_79_2_70:4.2.2.2
	Kernel-5_35-4_79_2_69:4.2.2.2
	Kernel-5_35-4_79_2_68:4.2.2.2
	Kernel-5_35-4_79_2_67:4.2.2.2
	Kernel-5_35-4_79_2_66:4.2.2.2
	Kernel-5_35-4_79_2_65:4.2.2.1
	Kernel-5_35-4_79_2_64:4.2.2.1
	Kernel-5_35-4_79_2_63:4.2.2.1
	Kernel-5_35-4_79_2_62:4.2.2.1
	Kernel-5_35-4_79_2_61:4.2.2.1
	Kernel-5_35-4_79_2_59:4.2.2.1
	Kernel-5_35-4_79_2_58:4.2.2.1
	Kernel-5_35-4_79_2_57:4.2.2.1
	Kernel-5_35-4_79_2_56:4.2.2.1
	Kernel-5_35-4_79_2_55:4.2.2.1
	Kernel-5_35-4_79_2_54:4.2.2.1
	Kernel-5_35-4_79_2_53:4.2.2.1
	Kernel-5_35-4_79_2_52:4.2.2.1
	Kernel-5_35-4_79_2_51:4.2.2.1
	Kernel-5_35-4_79_2_50:4.2.2.1
	Kernel-5_35-4_79_2_49:4.2.2.1
	Kernel-5_35-4_79_2_48:4.2.2.1
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.4
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2.2.1
	Kernel-5_35-4_79_2_46:4.2.2.1
	Kernel-5_35-4_79_2_45:4.2.2.1
	Kernel-5_35-4_79_2_44:4.2.2.1
	Kernel-5_35-4_79_2_25_2_2:4.2.2.1
	Kernel-5_35-4_79_2_43:4.2.2.1
	Kernel-5_35-4_79_2_42:4.2.2.1
	Kernel-5_35-4_79_2_41:4.2.2.1
	Kernel-5_35-4_79_2_40:4.2.2.1
	Kernel-5_35-4_79_2_39:4.2.2.1
	Kernel-5_35-4_79_2_38:4.2.2.1
	Kernel-5_35-4_79_2_37:4.2.2.1
	Kernel-5_35-4_79_2_36:4.2.2.1
	Kernel-5_35-4_79_2_35:4.2.2.1
	Kernel-5_35-4_79_2_34:4.2.2.1
	Kernel-5_35-4_79_2_33:4.2.2.1
	Kernel-5_35-4_79_2_32:4.2.2.1
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2.2.1
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2.2.1
	Kernel-5_35-4_79_2_30:4.2.2.1
	Kernel-5_35-4_79_2_29:4.2.2.1
	Kernel-5_35-4_79_2_28:4.2.2.1
	Kernel-5_35-4_79_2_27:4.2.2.1
	Kernel-5_35-4_79_2_26:4.2.2.1
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2.2.1
	Kernel-5_35-4_79_2_24:4.2.2.1
	Kernel-5_35-4_79_2_23:4.2.2.1
	Kernel-5_35-4_79_2_22:4.2.2.1
	Kernel-5_35-4_79_2_21:4.2.2.1
	Kernel-5_35-4_79_2_20:4.2.2.1
	Kernel-5_35-4_79_2_19:4.2.2.1
	Kernel-5_35-4_79_2_18:4.2.2.1
	Kernel-5_35-4_79_2_17:4.2.2.1
	Kernel-5_35-4_79_2_16:4.2.2.1
	Kernel-5_35-4_79_2_15:4.2.2.1
	Kernel-5_35-4_79_2_14:4.2.2.1
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.10
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2.2.1
	Kernel-5_35-4_79_2_12:4.2.2.1
	Kernel-5_35-4_79_2_11:4.2.2.1
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2.2.1
	Kernel-5_35-4_79_2_9:4.2.2.1
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2.2.1
	Kernel-5_35-4_79_2_7:4.2.2.1
	Kernel-5_35-4_79_2_6:4.2.2.1
	Kernel-5_35-4_79_2_5:4.2.2.1
	Kernel-5_35-4_79_2_4:4.2.2.1
	Kernel-5_35-4_79_2_3:4.2.2.1
	Kernel-5_35-4_79_2_2:4.2.2.1
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2.2.1
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2018.07.14.19.02.27;	author jlee;	state Exp;
branches;
next	4.3;
commitid	DsDtaR4YavfJx8KA;

4.3
date	2016.06.30.20.08.20;	author jlee;	state Exp;
branches;
next	4.2;
commitid	IWoXxARWeuLDOwcz;

4.2
date	2000.04.04.14.27.42;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.41.41;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2000.09.15.12.38.02;	author kbracey;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2004.05.06.16.02.05;	author kbracey;	state Exp;
branches
	4.2.2.2.2.1;
next	4.2.2.3;

4.2.2.3
date	2011.11.26.21.11.28;	author jlee;	state Exp;
branches;
next	4.2.2.4;
commitid	cI3W0zbtALQG6TIv;

4.2.2.4
date	2013.08.06.22.43.10;	author jlee;	state Exp;
branches;
next	;
commitid	TOIaeUf2Q4rBIr0x;

4.2.2.2.2.1
date	2009.05.10.20.22.33;	author bavison;	state Exp;
branches;
next	4.2.2.2.2.2;

4.2.2.2.2.2
date	2009.05.17.01.34.43;	author bavison;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.41.41;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.03.48;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.13.31;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.04.55;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Evict ECFIndex and PalIndex from VDU workspace
Detail:
  ECFIndex and PalIndex claim to be mode variables, but it's impossible for extension modes to specify their values.
  Since they're easy to calculate from the ModeFlags and Log2BPP values, drop them from the mode workspace (+ table of builtin modes) and calculate them on the fly instead.
  File changes:
  - hdr/KernelWS - Drop ECFIndex & PalIndex from workspace
  - s/vdu/vdumodes - Adjust workspace definition, drop ECFIndex & PalIndex values from VWSTAB
  - s/vdu/vdudriver - Remove now-redundant copy loop from ModeChangeSub. Remove code from GenerateModeSelectorVars that sets up the ECFIndex & PalIndex values on the stack
  - s/vdu/vdugrafl - Adjust copy loop in SwitchOutputToSprite/Mask
  - s/vdu/vdupalette, s/vdu/vdupalxx - Add GetPalIndex routine to generate PalIndex on the fly. Drop the obsolete 16bpp palette/gamma table and shuffle the other entries to simplify GetPalIndex a bit.
  - s/vdu/vduplot - Add GetECFIndex routine to generate ECFIndex on the fly. Also, fix things so that mode 0 isn't the only rectangular-pixel mode which uses the special rectangular-pixel ECF patterns (index 0 vs. index 4). Fiddle with ExportedHLine a bit to avoid an out-of-range ADR.
  - s/NewReset - Fix UAL warning for MOV R0, AppSpaceStart. Adjust memset to not assume 512KB is the correct amount
Admin:
  Tested on Raspberry Pi 3


Version 6.11. Tagged as 'Kernel-6_11'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > VduPalette
;
; ARTHUR OPERATING SYSTEM - Vdu Drivers
; =======================
;
; Vdu driver code - Palette setting (VIDC independent parts)
;
; *****************************************************************************

; Routines above PaletteV
; -----------------------

; *****************************************************************************
;
;       PalInit - Restore default palette for the displayed mode
;
; out:  R6 is preserved (may contain CursorFlags)
;

PalInit ROUT
        MOV     r4, #paletteV_SetDefaultPalette
        B       CallPaletteV

; *****************************************************************************
;
;       UnblankScreen - Unblank screen (called on mode change)
;

UnblankScreen ROUT
        MOV     r0, #0
        MOV     r4, #paletteV_BlankScreen
        B       CallPaletteV

; *****************************************************************************
;
;       DoSetPalette - Entry point for OSWORD 12 (program palette)
;
; in:   R1 -> Control block
;       [R1, #0] = logical colour
;       [R1, #1] = physical colour or action
;       [R1, #2] = red
;       [R1, #3] = green
;       [R1, #4] = blue
;
;       R12 -> VDUWS
;
;       R0-R4, R11, R12 may be corrupted
;
;
DoSetPalette
        Push    "R5-R10,R14"
        BL      SetPal
        Pull    "R5-R10,PC"

; *****************************************************************************
;
;       DC3 - Entry point for VDU 19 (program palette)
;
; in:   QQ+0..QQ+4 contain the parameters in the same format as OSWORD
;

DC3     ROUT
        ADD     R1, WsPtr, #QQ          ; Point R1 at the queued data
                                        ; and drop thru to Palette OSWORD code
SetPal  EntryS
        LDR     R6, [WsPtr, #DisplayModeFlags]
        TST     R6, #ModeFlag_Teletext  ; if teletext mode
        EXITS   NE                      ; then ignore VDU 19

; Now we must check for BBC style colours (VDU 19,n,0..15,...) and map these onto
; 16 or (17 and 18)

        MOV     lr, r1
        LDRB    r0, [lr, #0]            ; r0 = logical colour
        LDRB    r1, [lr, #1]
        ANDS    r2, r1, #&80
        MOVNE   r2, #&FF                ; r2 = supremacy (&00 or &FF)
        BIC     r1, r1, #&80            ; r1 = type of colour
        CMP     r1, #16                 ; r1 < 16 => BBC style colour
        BCS     %FT10

        TST     r1, #1                  ; bit 0 set => red full on
        ORRNE   r2, r2, #&0000FF00
        TST     r1, #2                  ; bit 1 set => green full on
        ORRNE   r2, r2, #&00FF0000
        TST     r1, #4                  ; bit 2 set => blue full on
        ORRNE   r2, r2, #&FF000000

        BL      GetPalIndex
        CMP     r6, #3                  ; only flash colours if PalIndex = 0, 1 or 2
        BICCS   r1, r1, #8

        TST     r1, #8
        MOVEQ   r1, #16
        BEQ     %FT20                   ; not a flashing colour, so just set it once

        MOV     r1, #17                 ; set first flash colour
        BL      CallSetPalette
        MVN     r2, r2                  ; then toggle all bits of R, G and B
        EOR     r2, r2, #&FF            ; (don't toggle supremacy)
        MOV     r1, #18                 ; set second flash colour
        B       %FT20

10
      [ NoARMv6 :LOR: NoUnaligned
        LDRB    r3, [lr, #2]            ; r3 = red
        ORR     r2, r2, r3, LSL #8      ; r2 = &0000RRSS
        LDRB    r3, [lr, #3]            ; r3 = green
        ORR     r2, r2, r3, LSL #16     ; r2 = &00GGRRSS
        LDRB    r3, [lr, #4]            ; r3 = blue
        ORR     r2, r2, r3, LSL #24     ; r2 = &BBGGRRSS
      |
        ; Use unaligned load from ARMv6
        LDR     r3, [lr, #2]            ; r3 = &??BBGGRR
        ORR     r2, r2, r3, LSL #8      ; r2 = &BBGGRRSS
      ]
20
        BL      CallSetPalette
        EXITS


CallSetPalette
        MOV     r4, #paletteV_Set
CallPaletteV
        EntryS  r9
        MOV     r9, #PaletteV
        SWI     XOS_CallAVector
        EXITS


; *****************************************************************************
;
;       GetPalIndex - return index of default palette, for VDU hardware
;                     
;
;       out: R6 = palette index
;            R3 corrupt
;
GetPalIndex ROUT
        ; Normally maps to log2bpp
        LDRB    R6, [WsPtr, #DisplayLog2BPP]
        CMP     R6, #4
        MOVHI   R6, #4
        MOVHS   PC, LR
        ; BBC gap modes run at lower logical BPP than physical BPP, so palette index needs adjusting too
        LDR     R3, [WsPtr, #DisplayModeFlags]
        TEQ     R6, #0
        TSTNE   R3, #ModeFlag_BBCGapMode
        SUBNE   R6, R6, #1
        ; Hi-res mono & (<=8bpp) teletext have special ones too
        TST     R3, #ModeFlag_Teletext
        MOVNE   R6, #5
        TST     R3, #ModeFlag_HiResMono
        MOVNE   R6, #6
        MOV     PC, LR
        

; *****************************************************************************
;
;       SWIReadPalette - SWI ReadPalette handler
;
; in:   R0 = logical colour
;       R1 = 16 (read normal colour)
;            24 (read border colour)
;            25 (read cursor colour)
;
; out:  R2 = first flash setting   (B0G0R0PP), supremacy bit 7
;       R3 = second flash setting  (B0G0R0PP), supremacy bit 7
;       R10-R12 corrupted (preserved by Sam), all others preserved
;

SWIReadPalette Entry "r4"
        VDWS    WsPtr
        MOV     r4, #paletteV_Read
        BL      CallPaletteV
        BIC     r2, r2, #&7F            ; knock out any weird bits
        BIC     r3, r3, #&7F
        ORR     r2, r2, r1              ; put in nominal PP field
        ORR     r3, r3, r1
        TEQ     r1, #16                 ; if reading normal colour
        BNE     %FT10
        TEQ     r2, r3                  ; and colours different
        ORRNE   r2, r2, #1              ; then make 1st PP field 17
        ORRNE   r3, r3, #2              ; and 2nd PP field 18
10
        PullEnv
        ExitSWIHandler

; *****************************************************************************
;
;       DoReadPalette - Entry point from OSWORD 11 (read palette)
;
; in:   R1 -> control block
;       [R1, #0] = logical colour to read
;
; out:  [R1, #1] (bits 0..6) = physical colour 0..15 or 16; (bit 7) = supremacy
;       [R1, #2] = red   (in bits 4..7)
;       [R1, #3] = green (-----""-----)
;       [R1, #4] = blue  (-----""-----)
;       R0-R4, R11, R12 can be corrupted
;

DoReadPalette Entry
        MOV     r4, r1                  ; save pointer to block
        LDRB    r0, [r4]                ; r0 = logical colour
        MOV     r1, #16
        SWI     XOS_ReadPalette
        LDROSB  r0, FlashState
        CMP     r0, #1                  ; CS => 1st state, CC => 2nd state
        MOVCC   r2, r3                  ; r2 = current state
      [ NoARMv6 :LOR: NoUnaligned
        MOV     r1, #4
10
        STRB    r2, [r4, #1]!           ; store 4 bytes of data in block, starting R1+1
        MOV     r2, r2, LSR #8
        SUBS    r1, r1, #1
        BNE     %BT10
      |
        ; Use unaligned store from ARMv6
        STR     r2, [r4]
      ]
        EXIT

; *****************************************************************************
;
;       DoFirstFlash - Set palette to first palette setting
;                      Called in either SVC or IRQ mode
;

DoFirstFlash EntryS "r0,r4"
        MOV     r4, #paletteV_1stFlashState
SetFlashState
        MRS     r0, CPSR
        ORR     r1, r0, #I32_bit + SVC_mode     ; to SVC26/32 mode
        MSR     CPSR_c, r1
        Push    "lr"
        BL      CallPaletteV
        Pull    "lr"
        MSR     CPSR_c, r0
        EXITS

; *****************************************************************************
;
;       DoSecondFlash - Set palette to second palette setting
;                       Called in either SVC or IRQ mode
;

DoSecondFlash ALTENTRY
        MOV     r4, #paletteV_2ndFlashState
        B       SetFlashState

        END
@


4.3
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@d103 2
a104 2
        LDRB    lr, [WsPtr, #PalIndex]
        CMP     lr, #3                  ; only flash colours if PalIndex = 0, 1 or 2
d144 28
@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d81 1
a81 1
        TST     R6, #Flag_Teletext      ; if teletext mode
d90 2
a91 1
        AND     r2, r1, #&80            ; r2 = sup bit
d119 1
d121 1
a121 1
        ORR     r2, r2, r3, LSL #8      ; r2 = &0000RRS0
d123 1
a123 1
        ORR     r2, r2, r3, LSL #16     ; r2 = &00GGRRS0
d125 6
a130 1
        ORR     r2, r2, r3, LSL #24     ; r2 = &BBGGRRS0
d158 1
a158 1
SWIReadPalette ENTRY "r4"
d189 1
a189 1
DoReadPalette ENTRY
d197 1
d204 4
d219 1
a219 1
        mrs    ,r0, CPSR
d221 1
a221 1
        msr    ,CPSR_c, r1
d225 1
a225 1
        msr    ,CPSR_c, r0
@


4.2.2.1
log
@* Converted to building with ObjAsm (but still a single object file using ORG).
* Added ARM_IMB and ARM_IMBRange SWIs as recommended by ARMv5.
* Some early prototype HAL bits popped in - a lot of source restructuring still
  to come.
* New debug target creates an AIF image with debug information, and translates
  this into an ASCII object file for the 16702B logic analyser.

Version 5.35, 4.79.2.1. Tagged as 'Kernel-5_35-4_79_2_1'
@
text
@d151 1
a151 1
SWIReadPalette Entry "r4"
d182 1
a182 1
DoReadPalette Entry
d207 1
a207 1
        MRS     r0, CPSR
d209 1
a209 1
        MSR     CPSR_c, r1
d213 1
a213 1
        MSR     CPSR_c, r0
@


4.2.2.2
log
@* HAL can choose to limit amount of screen memory to allocate
  [Not fully implemented - for now leaves at least 16MB free if only
  one RAM area; was 1MB].
* Added HAL_USBControllerInfo, HAL_MonitorLeadID and HAL_Video_Render.
* Added HAL->OS call OS_IICOpV.
* OS_MMUControl now allows independent control of I and C bits.
* Added facility to deactivate keyboard debounce (magic word "NoKd" in
  R2 in KeyV 0).
* Fixed problem with RAM amounts not a multiple of 4MB.
* Supremacy bit (in VDU 19) now sets all 8 bits of supremacy.
* Added PaletteV 14 (reads gamma tables).
* Added Supremacy transfer functions (like gamma correction, but for
  supremacy). Allows easy global supremacy effects in a mode-independent
  fashion. Controlled with PaletteV 15,16.
* Added modes 50-53 (320x240, 1,2,4,8bpp). Intended for small LCD.
* Added 13.5kHz versions of TV modes (selected by Hdr:Machine).
* Upped desktop version to 5.06.

Version 5.35, 4.79.2.66. Tagged as 'Kernel-5_35-4_79_2_66'
@
text
@d90 1
a90 2
        ANDS    r2, r1, #&80
        MOVNE   r2, #&FF                ; r2 = supremacy (&00 or &FF)
d119 1
a119 1
        ORR     r2, r2, r3, LSL #8      ; r2 = &0000RRSS
d121 1
a121 1
        ORR     r2, r2, r3, LSL #16     ; r2 = &00GGRRSS
d123 1
a123 1
        ORR     r2, r2, r3, LSL #24     ; r2 = &BBGGRRSS
@


4.2.2.3
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@a118 1
      [ NoARMv6 :LOR: NoUnaligned
a124 5
      |
        ; Use unaligned load from ARMv6
        LDR     r3, [lr, #2]            ; r3 = &??BBGGRR
        ORR     r2, r2, r3, LSL #8      ; r2 = &BBGGRRSS
      ]
a190 1
      [ NoARMv6 :LOR: NoUnaligned
a196 4
      |
        ; Use unaligned store from ARMv6
        STR     r2, [r4]
      ]
@


4.2.2.4
log
@Add support for the new RISC OS 5 style sprite mode word. Add partial support for alpha channel sprite masks. Implement OS_ScreenMode reasons 13-15
Detail:
  ECFShift/ECFYOffset:
  - hdr/PublicWS - Add ECFShift and ECFYOffset to list of public exports (SpriteExtend was using hardcoded values). Rearrange exports so that VduWorkspace exports are now labelled as such.
  - hdr/KernelWS - Make sure ECFShift & ECFYOffset match their exported locations
  - hdr/OSRSI6, s/Middle - Add OS_ReadSysInfo 6 items 83 & 84, for reading ECFYOffset and ECFShift locations
  Mode flags/VDU variables:
  - Makefile - Add hdr/VduExt to the C header exports
  - hdr/VduExt - Get rid of NotRVVTBarWobblyBits macro and defined VDU variables manually so that Hdr2H will handle them. Begin replacing overly generic 'Flag_*' mode flag definitions with 'ModeFlag_*' instead. Define new flags as required by the new screen/sprite modes. Add OS_ScreenMode reason codes and mode selector format (from s.vdu.vdudecl)
  - NewModes/NEWF2, NewModes/OldPSSrc, NewModes/PSSrc, s.vdu.vdu23, s.vdu.vducursoft, s.vdu.vdudriver, s.vdu.vdugrafg, s.vdu.vdugrafj, s.vdu.vdugrafl, s.vdu.vdumodes, s.vdu.vdupal10, s.vdu.vdupal20, s.vdu.vdupalette, s.vdu.vdupalxx, s.vdu.vduwrch - Renaming Flag_* to ModeFlag_*
  - s.vdu.vdudecl - Remove OS_ScreenMode reason codes & mode selector format definitions; these are now in hdr/VduExt. Flag_* -> ModeFlag_* renaming.
  - s.vdu.vdupalxx - Apply a greyscale palette in PV_SetDefaultPalette if the greyscale mode flag is set
  New sprite types:
  - s.vdu.vdudriver - Extend GenerateModeSelectorVars to deal with the wide mask flag, 64K sprites, and the new RISC OS 5 sprite mode word format.
  - s.vdu.vdugrafdec - Store more information about the sprite in the SprReadNColour ... SprLog2BPC block.
  - s.vdu.vdugrafg - Update SpriteVecHandler to be able to detect whether RISC OS 5 format sprites are allowed palettes. Update SetupSprModeData to store the extra sprite info that's defined in vdugrafdec. Update PutSprite to fault any sprites with wide masks - SpriteExtend must be used for that (once implemented!)
  - s.vdu.vdugrafh - Update WritePixelColour to avoid temporary poking of NColour VDU variable for 8bpp sprites. Correctly replicate data when writing to RISC OS 5 format sprites. Update ReadPixelMask, WritePixelMask, SpriteMaskAddr, GetMaskspWidth to deal with wide masks. Delete obsolete bounce_new_format_masks routine.
  - s.vdu.vdugrafi - Comment updated to reflect new reality
  - s.vdu.vdugrafj - Get rid of unused code block in CreateHeader/PostCreateHeader. Update SanitizeSGetMode to generate RISC OS 5 style sprite mode words where applicable. Update DecideMaskSize to rely on GetMaskspWidth for calculating mask width.
  - s.vdu.vdugrafl - Update SwitchOutputToSprite/SwitchOutputToMask to deal with the new sprite formats. Allow PushModeInfoAnyMonitor to fail.
  - s.vdu.vduswis - Extended OS_ReadModeVariable to cope with new sprite types
  Misc:
  - s.vdu.vdudriver - Fixed bug with VIDCList copying where any -1 value in the structure would terminate the copy, instead of only -1 as a control item number
  - s.vdu.vduswis - Implemented OS_ScreenMode 13 (Mode string to specifier), 14 (mode specifier to string), and 15 (set mode by string). Mostly as per ROL's specs, but minus support for teletext attributes, and plus support for new RISC OS 5 attributes (L... layout specifier, 4096 & 24bpp packed modes, etc.)
  - s.vdu.vduwrch - Pick correct default text colours for the new modes
Admin:
  Tested on BB-xM
  Part of an implementation of the Extended Framebuffer Format spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification


Version 5.35, 4.79.2.194. Tagged as 'Kernel-5_35-4_79_2_194'
@
text
@d81 1
a81 1
        TST     R6, #ModeFlag_Teletext  ; if teletext mode
@


4.2.2.2.2.1
log
@  Unaligned loads/stores optimised for ARMv6+
Detail:
  Having scanned the kernel source for unaligned load code fragments which
  would abort on ARMv6 and v7 and not having found any, I took the opportunity
  to give them build-time switches to use unaligned LDR((S)H)/STR(H)
  instructions if built for a new enough platform. Also added a couple of
  cases of LDRSB that will benefit v4 CPUs and a few instances of the v6
  SXTH instruction, but since objasm doesn't yet understand it (and when it
  does, not everyone will have upgraded) they are currently written as
  DCI statements.
  Most of the changes are to OS_Word handlers, which are notorious in that
  their input/output block is not word-aligned.
Admin:
  Not tested, but it should at least build.

Version 5.35, 4.79.2.98.2.6. Tagged as 'Kernel-5_35-4_79_2_98_2_6'
@
text
@a118 1
      [ NoARMv6
a124 5
      |
        ; Use unaligned load from ARMv6
        LDR     r3, [lr, #2]            ; r3 = &??BBGGRR
        ORR     r2, r2, r3, LSL #8      ; r2 = &BBGGRRSS
      ]
a190 1
      [ NoARMv6
a196 4
      |
        ; Use unaligned store from ARMv6
        STR     r2, [r4]
      ]
@


4.2.2.2.2.2
log
@  Miscellaneous v6-related updates
Detail:
 * Stopped calling the broken abort fixup code when running under VMSAv6.
   Might be desirable to update it, possibly farmed out to a separate module -
   still need to think about this.
 * Unaligned load optimisations can now be disabled by the global NoUnaligned
   flag for testing purposes.
 * Extended OS_ReadUnsigned to permit reading of 64-bit unsigned integers.
   See Docs.ReadUnsigned for more details. Also sped it up by using MLA
   (or UMLAL) for most digits rather than repeated addition.
 * Bugfix is OS_GSRead: an uninitialised r0 was being passed to
   OS_ReadUnsigned, causing undesirable effects on rare occasions.
Admin:
  Tested on a rev B7 beagleboard.

Version 5.35, 4.79.2.98.2.8. Tagged as 'Kernel-5_35-4_79_2_98_2_8'
@
text
@d119 1
a119 1
      [ NoARMv6 :LOR: NoUnaligned
d197 1
a197 1
      [ NoARMv6 :LOR: NoUnaligned
@


4.1
log
@Initial revision
@
text
@d79 1
a79 1
SetPal  ENTRY
d132 1
a132 1
        Push    "r9,lr"
d135 1
a135 1
        Pull    "r9,pc",,^
d204 1
a204 1
DoFirstFlash ENTRY "r0,r4"
d207 3
a209 3
        MOV     r0, pc
        TEQP    pc, #SVC_mode + I_bit
        NOP
d213 1
a213 2
        TEQP    r0, #0
        NOP
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
