head	4.3;
access;
symbols
	Kernel-6_15:4.3
	Kernel-6_14:4.3
	Kernel-6_01-3:4.3
	Kernel-6_13:4.3
	Kernel-6_12:4.3
	Kernel-6_11:4.3
	Kernel-6_10:4.3
	Kernel-6_09:4.3
	Kernel-6_08-4_129_2_10:4.3
	Kernel-6_08-4_129_2_9:4.3
	Kernel-6_08:4.3
	Kernel-6_07:4.3
	Kernel-6_06:4.3
	Kernel-6_05-4_129_2_8:4.3
	Kernel-6_05:4.3
	Kernel-6_04:4.3
	Kernel-6_03:4.3
	Kernel-6_01-2:4.3
	Kernel-6_01-4_146_2_1:4.3
	Kernel-6_02:4.3
	Kernel-6_01-1:4.3
	Kernel-6_01:4.3
	Kernel-6_00:4.3
	Kernel-5_99:4.3
	Kernel-5_98:4.3
	Kernel-5_97-4_129_2_7:4.3
	Kernel-5_97:4.3
	Kernel-5_96:4.3
	Kernel-5_95:4.3
	Kernel-5_94:4.3
	Kernel-5_93:4.3
	Kernel-5_92:4.3
	Kernel-5_91:4.3
	Kernel-5_90:4.3
	Kernel-5_89-4_129_2_6:4.3
	Kernel-5_89:4.3
	Kernel-5_88-4_129_2_5:4.3
	Kernel-5_88-4_129_2_4:4.3
	Kernel-5_88:4.3
	Kernel-5_87:4.3
	Kernel-5_86-4_129_2_3:4.3
	Kernel-5_86-4_129_2_2:4.3
	Kernel-5_86-4_129_2_1:4.3
	Kernel-5_86:4.3
	SMP:4.3.0.2
	SMP_bp:4.3
	Kernel-5_85:4.3
	Kernel-5_54-1:4.3
	Kernel-5_84:4.3
	Kernel-5_83:4.3
	Kernel-5_82:4.3
	Kernel-5_81:4.3
	Kernel-5_80:4.3
	Kernel-5_79:4.3
	Kernel-5_78:4.3
	Kernel-5_77:4.3
	Kernel-5_76:4.3
	Kernel-5_75:4.3
	Kernel-5_74:4.3
	Kernel-5_73:4.3
	Kernel-5_72:4.3
	Kernel-5_71:4.3
	Kernel-5_70:4.3
	Kernel-5_69:4.3
	Kernel-5_68:4.3
	Kernel-5_67:4.3
	Kernel-5_66:4.3
	Kernel-5_65:4.3
	Kernel-5_64:4.3
	Kernel-5_63:4.3
	Kernel-5_62:4.3
	Kernel-5_61:4.3
	Kernel-5_60:4.3
	Kernel-5_59:4.3
	Kernel-5_58:4.3
	Kernel-5_57:4.3
	Kernel-5_56:4.3
	Kernel-5_55:4.3
	Kernel-5_54:4.3
	Kernel-5_53:4.3
	Kernel-5_52:4.3
	Kernel-5_51:4.3
	Kernel-5_50:4.3
	Kernel-5_49:4.3
	HAL_merge:4.2.2.3
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.2.2.3
	Kernel-5_35-4_79_2_326:4.2.2.3
	Kernel-5_35-4_79_2_325:4.2.2.3
	Kernel-5_35-4_79_2_324:4.2.2.3
	Kernel-5_35-4_79_2_323:4.2.2.3
	Kernel-5_35-4_79_2_322:4.2.2.3
	Kernel-5_35-4_79_2_321:4.2.2.3
	Kernel-5_35-4_79_2_320:4.2.2.3
	Kernel-5_35-4_79_2_319:4.2.2.3
	Kernel-5_35-4_79_2_318:4.2.2.3
	Kernel-5_35-4_79_2_317:4.2.2.3
	Kernel-5_35-4_79_2_316:4.2.2.3
	Kernel-5_35-4_79_2_315:4.2.2.3
	Kernel-5_35-4_79_2_314:4.2.2.3
	Kernel-5_35-4_79_2_313:4.2.2.3
	Kernel-5_35-4_79_2_312:4.2.2.3
	Kernel-5_35-4_79_2_311:4.2.2.3
	Kernel-5_35-4_79_2_310:4.2.2.3
	Kernel-5_35-4_79_2_309:4.2.2.3
	Kernel-5_35-4_79_2_308:4.2.2.3
	Kernel-5_35-4_79_2_307:4.2.2.3
	Kernel-5_35-4_79_2_306:4.2.2.3
	Kernel-5_35-4_79_2_305:4.2.2.3
	Kernel-5_35-4_79_2_304:4.2.2.3
	Kernel-5_35-4_79_2_303:4.2.2.3
	Kernel-5_35-4_79_2_302:4.2.2.3
	Kernel-5_35-4_79_2_301:4.2.2.3
	Kernel-5_35-4_79_2_300:4.2.2.3
	Kernel-5_35-4_79_2_299:4.2.2.3
	Kernel-5_35-4_79_2_298:4.2.2.3
	Kernel-5_35-4_79_2_297:4.2.2.3
	Kernel-5_35-4_79_2_296:4.2.2.3
	Kernel-5_35-4_79_2_295:4.2.2.3
	Kernel-5_35-4_79_2_294:4.2.2.3
	Kernel-5_35-4_79_2_293:4.2.2.3
	Kernel-5_35-4_79_2_292:4.2.2.3
	Kernel-5_35-4_79_2_291:4.2.2.3
	Kernel-5_35-4_79_2_290:4.2.2.3
	Kernel-5_35-4_79_2_289:4.2.2.3
	Kernel-5_35-4_79_2_288:4.2.2.3
	Kernel-5_35-4_79_2_287:4.2.2.3
	Kernel-5_35-4_79_2_286:4.2.2.3
	Kernel-5_35-4_79_2_285:4.2.2.3
	Kernel-5_35-4_79_2_284:4.2.2.3
	Kernel-5_35-4_79_2_283:4.2.2.3
	Kernel-5_35-4_79_2_282:4.2.2.3
	Kernel-5_35-4_79_2_281:4.2.2.3
	Kernel-5_35-4_79_2_280:4.2.2.3
	Kernel-5_35-4_79_2_279:4.2.2.3
	Kernel-5_35-4_79_2_278:4.2.2.3
	Kernel-5_35-4_79_2_277:4.2.2.3
	Kernel-5_35-4_79_2_276:4.2.2.3
	Kernel-5_35-4_79_2_275:4.2.2.3
	Kernel-5_35-4_79_2_274:4.2.2.3
	Kernel-5_35-4_79_2_273:4.2.2.3
	Kernel-5_35-4_79_2_272:4.2.2.3
	Kernel-5_35-4_79_2_271:4.2.2.3
	Kernel-5_35-4_79_2_270:4.2.2.3
	Kernel-5_35-4_79_2_269:4.2.2.3
	Kernel-5_35-4_79_2_268:4.2.2.3
	Kernel-5_35-4_79_2_267:4.2.2.3
	Kernel-5_35-4_79_2_266:4.2.2.3
	Kernel-5_35-4_79_2_265:4.2.2.3
	Kernel-5_35-4_79_2_264:4.2.2.3
	Kernel-5_35-4_79_2_263:4.2.2.3
	Kernel-5_35-4_79_2_262:4.2.2.3
	Kernel-5_35-4_79_2_261:4.2.2.3
	Kernel-5_35-4_79_2_260:4.2.2.3
	Kernel-5_35-4_79_2_259:4.2.2.3
	Kernel-5_35-4_79_2_258:4.2.2.3
	Kernel-5_35-4_79_2_257:4.2.2.3
	Kernel-5_35-4_79_2_256:4.2.2.3
	Kernel-5_35-4_79_2_255:4.2.2.3
	Kernel-5_35-4_79_2_254:4.2.2.3
	Kernel-5_35-4_79_2_253:4.2.2.3
	Kernel-5_35-4_79_2_252:4.2.2.3
	Kernel-5_35-4_79_2_251:4.2.2.3
	Kernel-5_35-4_79_2_250:4.2.2.3
	Kernel-5_35-4_79_2_249:4.2.2.3
	Kernel-5_35-4_79_2_248:4.2.2.3
	Kernel-5_35-4_79_2_247:4.2.2.3
	Kernel-5_35-4_79_2_246:4.2.2.3
	Kernel-5_35-4_79_2_245:4.2.2.3
	Kernel-5_35-4_79_2_244:4.2.2.3
	Kernel-5_35-4_79_2_243:4.2.2.3
	Kernel-5_35-4_79_2_242:4.2.2.3
	Kernel-5_35-4_79_2_241:4.2.2.3
	Kernel-5_35-4_79_2_240:4.2.2.3
	Kernel-5_35-4_79_2_239:4.2.2.3
	Kernel-5_35-4_79_2_238:4.2.2.3
	Kernel-5_35-4_79_2_237:4.2.2.3
	Kernel-5_35-4_79_2_236:4.2.2.3
	Kernel-5_35-4_79_2_235:4.2.2.3
	Kernel-5_35-4_79_2_234:4.2.2.3
	Kernel-5_35-4_79_2_233:4.2.2.3
	Kernel-5_35-4_79_2_232:4.2.2.3
	Kernel-5_35-4_79_2_231:4.2.2.3
	Kernel-5_35-4_79_2_230:4.2.2.3
	Kernel-5_35-4_79_2_229:4.2.2.3
	Kernel-5_35-4_79_2_228:4.2.2.3
	Kernel-5_35-4_79_2_227:4.2.2.3
	Kernel-5_35-4_79_2_226:4.2.2.3
	Kernel-5_35-4_79_2_225:4.2.2.3
	Kernel-5_35-4_79_2_224:4.2.2.3
	Kernel-5_35-4_79_2_223:4.2.2.3
	Kernel-5_35-4_79_2_222:4.2.2.3
	Kernel-5_35-4_79_2_221:4.2.2.3
	Kernel-5_35-4_79_2_220:4.2.2.3
	Kernel-5_35-4_79_2_219:4.2.2.3
	Kernel-5_35-4_79_2_218:4.2.2.3
	Kernel-5_35-4_79_2_217:4.2.2.3
	Kernel-5_35-4_79_2_216:4.2.2.3
	Kernel-5_35-4_79_2_215:4.2.2.3
	Kernel-5_35-4_79_2_214:4.2.2.3
	Kernel-5_35-4_79_2_213:4.2.2.3
	Kernel-5_35-4_79_2_212:4.2.2.3
	Kernel-5_35-4_79_2_211:4.2.2.3
	Kernel-5_35-4_79_2_210:4.2.2.3
	Kernel-5_35-4_79_2_209:4.2.2.3
	Kernel-5_35-4_79_2_208:4.2.2.3
	Kernel-5_35-4_79_2_207:4.2.2.3
	Kernel-5_35-4_79_2_206:4.2.2.3
	Kernel-5_35-4_79_2_205:4.2.2.3
	Kernel-5_35-4_79_2_204:4.2.2.3
	Kernel-5_35-4_79_2_203:4.2.2.2
	Kernel-5_35-4_79_2_202:4.2.2.1
	Kernel-5_35-4_79_2_201:4.2.2.1
	Kernel-5_35-4_79_2_200:4.2.2.1
	Kernel-5_35-4_79_2_199:4.2.2.1
	Kernel-5_35-4_79_2_198:4.2.2.1
	Kernel-5_35-4_79_2_197:4.2.2.1
	Kernel-5_35-4_79_2_196:4.2.2.1
	Kernel-5_35-4_79_2_195:4.2.2.1
	Kernel-5_35-4_79_2_194:4.2.2.1
	Kernel-5_35-4_79_2_193:4.2.2.1
	Kernel-5_35-4_79_2_192:4.2.2.1
	Kernel-5_35-4_79_2_191:4.2.2.1
	Kernel-5_35-4_79_2_190:4.2.2.1
	Kernel-5_35-4_79_2_189:4.2.2.1
	Kernel-5_35-4_79_2_188:4.2.2.1
	Kernel-5_35-4_79_2_187:4.2.2.1
	Kernel-5_35-4_79_2_186:4.2.2.1
	Kernel-5_35-4_79_2_185:4.2.2.1
	Kernel-5_35-4_79_2_184:4.2.2.1
	Kernel-5_35-4_79_2_183:4.2.2.1
	Kernel-5_35-4_79_2_182:4.2.2.1
	Kernel-5_35-4_79_2_181:4.2.2.1
	Kernel-5_35-4_79_2_180:4.2.2.1
	Kernel-5_35-4_79_2_179:4.2.2.1
	Kernel-5_35-4_79_2_178:4.2.2.1
	Kernel-5_35-4_79_2_177:4.2.2.1
	Kernel-5_35-4_79_2_176:4.2.2.1
	Kernel-5_35-4_79_2_175:4.2.2.1
	Kernel-5_35-4_79_2_174:4.2.2.1
	Kernel-5_35-4_79_2_173:4.2.2.1
	Kernel-5_35-4_79_2_172:4.2.2.1
	Kernel-5_35-4_79_2_171:4.2.2.1
	Kernel-5_35-4_79_2_170:4.2.2.1
	Kernel-5_35-4_79_2_169:4.2.2.1
	Kernel-5_35-4_79_2_168:4.2.2.1
	Kernel-5_35-4_79_2_167:4.2.2.1
	Kernel-5_35-4_79_2_166:4.2.2.1
	Kernel-5_35-4_79_2_165:4.2.2.1
	RPi_merge:4.2.2.1
	Kernel-5_35-4_79_2_147_2_23:4.2.2.1
	Kernel-5_35-4_79_2_147_2_22:4.2.2.1
	Kernel-5_35-4_79_2_147_2_21:4.2.2.1
	Kernel-5_35-4_79_2_147_2_20:4.2.2.1
	Kernel-5_35-4_79_2_147_2_19:4.2.2.1
	Kernel-5_35-4_79_2_147_2_18:4.2.2.1
	Kernel-5_35-4_79_2_164:4.2.2.1
	Kernel-5_35-4_79_2_163:4.2.2.1
	Kernel-5_35-4_79_2_147_2_17:4.2.2.1
	Kernel-5_35-4_79_2_147_2_16:4.2.2.1
	Kernel-5_35-4_79_2_147_2_15:4.2.2.1
	Kernel-5_35-4_79_2_162:4.2.2.1
	Kernel-5_35-4_79_2_161:4.2.2.1
	Kernel-5_35-4_79_2_147_2_14:4.2.2.1
	Kernel-5_35-4_79_2_147_2_13:4.2.2.1
	Kernel-5_35-4_79_2_160:4.2.2.1
	Kernel-5_35-4_79_2_159:4.2.2.1
	Kernel-5_35-4_79_2_158:4.2.2.1
	Kernel-5_35-4_79_2_157:4.2.2.1
	Kernel-5_35-4_79_2_156:4.2.2.1
	Kernel-5_35-4_79_2_147_2_12:4.2.2.1
	Kernel-5_35-4_79_2_147_2_11:4.2.2.1
	Kernel-5_35-4_79_2_155:4.2.2.1
	Kernel-5_35-4_79_2_147_2_10:4.2.2.1
	Kernel-5_35-4_79_2_154:4.2.2.1
	Kernel-5_35-4_79_2_153:4.2.2.1
	Kernel-5_35-4_79_2_147_2_9:4.2.2.1
	Kernel-5_35-4_79_2_152:4.2.2.1
	Kernel-5_35-4_79_2_151:4.2.2.1
	Kernel-5_35-4_79_2_147_2_8:4.2.2.1
	Kernel-5_35-4_79_2_147_2_7:4.2.2.1
	Kernel-5_35-4_79_2_150:4.2.2.1
	Kernel-5_35-4_79_2_147_2_6:4.2.2.1
	Kernel-5_35-4_79_2_147_2_5:4.2.2.1
	Kernel-5_35-4_79_2_149:4.2.2.1
	Kernel-5_35-4_79_2_147_2_4:4.2.2.1
	Kernel-5_35-4_79_2_147_2_3:4.2.2.1
	Kernel-5_35-4_79_2_148:4.2.2.1
	Kernel-5_35-4_79_2_147_2_2:4.2.2.1
	Kernel-5_35-4_79_2_147_2_1:4.2.2.1
	RPi:4.2.2.1.0.6
	RPi_bp:4.2.2.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2.2.1
	alees_Kernel_dev:4.2.2.1.0.4
	alees_Kernel_dev_bp:4.2.2.1
	Kernel-5_35-4_79_2_147:4.2.2.1
	Kernel-5_35-4_79_2_146:4.2.2.1
	Kernel-5_35-4_79_2_145:4.2.2.1
	Kernel-5_35-4_79_2_144:4.2.2.1
	Kernel-5_35-4_79_2_143:4.2.2.1
	Kernel-5_35-4_79_2_142:4.2.2.1
	Kernel-5_35-4_79_2_141:4.2.2.1
	Kernel-5_35-4_79_2_140:4.2.2.1
	Kernel-5_35-4_79_2_139:4.2.2.1
	Kernel-5_35-4_79_2_138:4.2.2.1
	Kernel-5_35-4_79_2_137:4.2.2.1
	Kernel-5_35-4_79_2_136:4.2.2.1
	Kernel-5_35-4_79_2_135:4.2.2.1
	Kernel-5_35-4_79_2_134:4.2.2.1
	Kernel-5_35-4_79_2_133:4.2.2.1
	Kernel-5_35-4_79_2_132:4.2.2.1
	Kernel-5_35-4_79_2_131:4.2.2.1
	Kernel-5_35-4_79_2_130:4.2.2.1
	Kernel-5_35-4_79_2_129:4.2.2.1
	Kernel-5_35-4_79_2_128:4.2.2.1
	Kernel-5_35-4_79_2_127:4.2.2.1
	Kernel-5_35-4_79_2_126:4.2.2.1
	Kernel-5_35-4_79_2_125:4.2.2.1
	Kernel-5_35-4_79_2_124:4.2.2.1
	Kernel-5_35-4_79_2_123:4.2.2.1
	Cortex_merge:4.2.2.1
	Kernel-5_35-4_79_2_122:4.2.2.1
	Kernel-5_35-4_79_2_98_2_54:4.2.2.1
	Kernel-5_35-4_79_2_98_2_53:4.2.2.1
	Kernel-5_35-4_79_2_98_2_52:4.2.2.1
	Kernel-5_35-4_79_2_98_2_51:4.2.2.1
	Kernel-5_35-4_79_2_98_2_50:4.2.2.1
	Kernel-5_35-4_79_2_98_2_49:4.2.2.1
	Kernel-5_35-4_79_2_98_2_48:4.2.2.1
	Kernel-5_35-4_79_2_121:4.2.2.1
	Kernel-5_35-4_79_2_98_2_47:4.2.2.1
	Kernel-5_35-4_79_2_120:4.2.2.1
	Kernel-5_35-4_79_2_98_2_46:4.2.2.1
	Kernel-5_35-4_79_2_119:4.2.2.1
	Kernel-5_35-4_79_2_98_2_45:4.2.2.1
	Kernel-5_35-4_79_2_98_2_44:4.2.2.1
	Kernel-5_35-4_79_2_118:4.2.2.1
	Kernel-5_35-4_79_2_98_2_43:4.2.2.1
	Kernel-5_35-4_79_2_117:4.2.2.1
	Kernel-5_35-4_79_2_116:4.2.2.1
	Kernel-5_35-4_79_2_98_2_42:4.2.2.1
	Kernel-5_35-4_79_2_115:4.2.2.1
	Kernel-5_35-4_79_2_98_2_41:4.2.2.1
	Kernel-5_35-4_79_2_98_2_40:4.2.2.1
	Kernel-5_35-4_79_2_114:4.2.2.1
	Kernel-5_35-4_79_2_98_2_39:4.2.2.1
	Kernel-5_35-4_79_2_98_2_38:4.2.2.1
	Kernel-5_35-4_79_2_113:4.2.2.1
	Kernel-5_35-4_79_2_112:4.2.2.1
	Kernel-5_35-4_79_2_98_2_37:4.2.2.1
	Kernel-5_35-4_79_2_98_2_36:4.2.2.1
	Kernel-5_35-4_79_2_98_2_35:4.2.2.1
	Kernel-5_35-4_79_2_98_2_34:4.2.2.1
	Kernel-5_35-4_79_2_98_2_33:4.2.2.1
	Kernel-5_35-4_79_2_98_2_32:4.2.2.1
	Kernel-5_35-4_79_2_98_2_31:4.2.2.1
	Kernel-5_35-4_79_2_98_2_30:4.2.2.1
	Kernel-5_35-4_79_2_98_2_29:4.2.2.1
	Kernel-5_35-4_79_2_98_2_28:4.2.2.1
	Kernel-5_35-4_79_2_98_2_27:4.2.2.1
	Kernel-5_35-4_79_2_98_2_26:4.2.2.1
	Kernel-5_35-4_79_2_111:4.2.2.1
	Kernel-5_35-4_79_2_98_2_25:4.2.2.1
	Kernel-5_35-4_79_2_98_2_24:4.2.2.1
	Kernel-5_35-4_79_2_98_2_23:4.2.2.1
	Kernel-5_35-4_79_2_110:4.2.2.1
	Kernel-5_35-4_79_2_98_2_22:4.2.2.1
	Kernel-5_35-4_79_2_109:4.2.2.1
	Kernel-5_35-4_79_2_98_2_21:4.2.2.1
	Kernel-5_35-4_79_2_98_2_20:4.2.2.1
	Kernel-5_35-4_79_2_108:4.2.2.1
	Kernel-5_35-4_79_2_107:4.2.2.1
	Kernel-5_35-4_79_2_98_2_19:4.2.2.1
	Kernel-5_35-4_79_2_98_2_18:4.2.2.1
	Kernel-5_35-4_79_2_98_2_17:4.2.2.1
	Kernel-5_35-4_79_2_98_2_16:4.2.2.1
	Kernel-5_35-4_79_2_98_2_15:4.2.2.1
	Kernel-5_35-4_79_2_106:4.2.2.1
	Kernel-5_35-4_79_2_105:4.2.2.1
	Kernel-5_35-4_79_2_104:4.2.2.1
	Kernel-5_35-4_79_2_98_2_14:4.2.2.1
	Kernel-5_35-4_79_2_98_2_13:4.2.2.1
	Kernel-5_35-4_79_2_98_2_12:4.2.2.1
	Kernel-5_35-4_79_2_98_2_11:4.2.2.1
	Kernel-5_35-4_79_2_98_2_10:4.2.2.1
	Kernel-5_35-4_79_2_98_2_9:4.2.2.1
	Kernel-5_35-4_79_2_103:4.2.2.1
	Kernel-5_35-4_79_2_102:4.2.2.1
	Kernel-5_35-4_79_2_98_2_8:4.2.2.1
	Kernel-5_35-4_79_2_98_2_7:4.2.2.1
	Kernel-5_35-4_79_2_98_2_6:4.2.2.1
	Kernel-5_35-4_79_2_98_2_5:4.2.2.1
	Kernel-5_35-4_79_2_98_2_4:4.2.2.1
	Kernel-5_35-4_79_2_101:4.2.2.1
	Kernel-5_35-4_79_2_100:4.2.2.1
	Kernel-5_35-4_79_2_99:4.2.2.1
	Kernel-5_35-4_79_2_98_2_3:4.2.2.1
	Kernel-5_35-4_79_2_98_2_2:4.2.2.1
	Kernel-5_35-4_79_2_98_2_1:4.2.2.1
	Cortex:4.2.2.1.0.2
	Cortex_bp:4.2.2.1
	Kernel-5_35-4_79_2_98:4.2.2.1
	Kernel-5_35-4_79_2_97:4.2.2.1
	Kernel-5_35-4_79_2_96:4.2.2.1
	Kernel-5_35-4_79_2_95:4.2.2.1
	Kernel-5_35-4_79_2_94:4.2.2.1
	Kernel-5_35-4_79_2_93:4.2.2.1
	Kernel-5_35-4_79_2_92:4.2.2.1
	Kernel-5_35-4_79_2_91:4.2.2.1
	Kernel-5_35-4_79_2_90:4.2.2.1
	Kernel-5_35-4_79_2_89:4.2.2.1
	Kernel-5_35-4_79_2_88:4.2.2.1
	Kernel-5_35-4_79_2_87:4.2.2.1
	Kernel-5_35-4_79_2_86:4.2.2.1
	Kernel-5_35-4_79_2_85:4.2.2.1
	Kernel-5_35-4_79_2_84:4.2.2.1
	Kernel-5_35-4_79_2_83:4.2.2.1
	Kernel-5_35-4_79_2_82:4.2.2.1
	Kernel-5_35-4_79_2_81:4.2.2.1
	Kernel-5_35-4_79_2_80:4.2.2.1
	Kernel-5_35-4_79_2_79:4.2.2.1
	Kernel-5_35-4_79_2_78:4.2.2.1
	Kernel-5_35-4_79_2_77:4.2.2.1
	RO_5_07:4.2.2.1
	Kernel-5_35-4_79_2_76:4.2.2.1
	Kernel-5_35-4_79_2_75:4.2.2.1
	Kernel-5_35-4_79_2_74:4.2.2.1
	Kernel-5_35-4_79_2_73:4.2.2.1
	Kernel-5_35-4_79_2_72:4.2.2.1
	Kernel-5_35-4_79_2_71:4.2.2.1
	Kernel-5_35-4_79_2_70:4.2.2.1
	Kernel-5_35-4_79_2_69:4.2.2.1
	Kernel-5_35-4_79_2_68:4.2.2.1
	Kernel-5_35-4_79_2_67:4.2.2.1
	Kernel-5_35-4_79_2_66:4.2.2.1
	Kernel-5_35-4_79_2_65:4.2.2.1
	Kernel-5_35-4_79_2_64:4.2.2.1
	Kernel-5_35-4_79_2_63:4.2.2.1
	Kernel-5_35-4_79_2_62:4.2.2.1
	Kernel-5_35-4_79_2_61:4.2.2.1
	Kernel-5_35-4_79_2_59:4.2.2.1
	Kernel-5_35-4_79_2_58:4.2.2.1
	Kernel-5_35-4_79_2_57:4.2.2.1
	Kernel-5_35-4_79_2_56:4.2.2.1
	Kernel-5_35-4_79_2_55:4.2.2.1
	Kernel-5_35-4_79_2_54:4.2.2.1
	Kernel-5_35-4_79_2_53:4.2.2.1
	Kernel-5_35-4_79_2_52:4.2.2.1
	Kernel-5_35-4_79_2_51:4.2.2.1
	Kernel-5_35-4_79_2_50:4.2
	Kernel-5_35-4_79_2_49:4.2
	Kernel-5_35-4_79_2_48:4.2
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.6
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2
	Kernel-5_35-4_79_2_46:4.2
	Kernel-5_35-4_79_2_45:4.2
	Kernel-5_35-4_79_2_44:4.2
	Kernel-5_35-4_79_2_25_2_2:4.2
	Kernel-5_35-4_79_2_43:4.2
	Kernel-5_35-4_79_2_42:4.2
	Kernel-5_35-4_79_2_41:4.2
	Kernel-5_35-4_79_2_40:4.2
	Kernel-5_35-4_79_2_39:4.2
	Kernel-5_35-4_79_2_38:4.2
	Kernel-5_35-4_79_2_37:4.2
	Kernel-5_35-4_79_2_36:4.2
	Kernel-5_35-4_79_2_35:4.2
	Kernel-5_35-4_79_2_34:4.2
	Kernel-5_35-4_79_2_33:4.2
	Kernel-5_35-4_79_2_32:4.2
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2
	Kernel-5_35-4_79_2_30:4.2
	Kernel-5_35-4_79_2_29:4.2
	Kernel-5_35-4_79_2_28:4.2
	Kernel-5_35-4_79_2_27:4.2
	Kernel-5_35-4_79_2_26:4.2
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2
	Kernel-5_35-4_79_2_24:4.2
	Kernel-5_35-4_79_2_23:4.2
	Kernel-5_35-4_79_2_22:4.2
	Kernel-5_35-4_79_2_21:4.2
	Kernel-5_35-4_79_2_20:4.2
	Kernel-5_35-4_79_2_19:4.2
	Kernel-5_35-4_79_2_18:4.2
	Kernel-5_35-4_79_2_17:4.2
	Kernel-5_35-4_79_2_16:4.2
	Kernel-5_35-4_79_2_15:4.2
	Kernel-5_35-4_79_2_14:4.2
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.10
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2
	Kernel-5_35-4_79_2_12:4.2
	Kernel-5_35-4_79_2_11:4.2
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2
	Kernel-5_35-4_79_2_9:4.2
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2
	Kernel-5_35-4_79_2_7:4.2
	Kernel-5_35-4_79_2_6:4.2
	Kernel-5_35-4_79_2_5:4.2
	Kernel-5_35-4_79_2_4:4.2
	Kernel-5_35-4_79_2_3:4.2
	Kernel-5_35-4_79_2_2:4.2
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2016.06.30.20.08.19;	author jlee;	state Exp;
branches;
next	4.2;
commitid	IWoXxARWeuLDOwcz;

4.2
date	2000.04.04.14.27.40;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.41.35;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2002.11.30.00.31.13;	author bavison;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2013.12.15.21.34.11;	author jlee;	state Exp;
branches;
next	4.2.2.3;
commitid	KwuK29hKRyXO7hhx;

4.2.2.3
date	2013.12.17.19.08.56;	author jlee;	state Exp;
branches;
next	;
commitid	mr92WavK9Mu4gwhx;

4.1.1.1
date	96.11.05.09.41.35;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.02.56;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.12.56;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.04.34;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > $.Source.VduGrafA
;
; ARTHUR OPERATING SYSTEM - Vdu Drivers
; =======================
;
; Vdu driver code - Graphics rectangle, triangle
;
; Author R C Manby
; Date   5.9.86
;

; *****************************************************************************
;
;       GenLineParm - Generate a control block for a line
;
;       Internal routine, called by TriangleFill, LowerTri, ParallelogramFill,
;        SegmentLineO5, GenArcParmBlk, GenSegParmBlk, LineDraw
;
; in:   R0 (X), R1(Y) hold start of line
;       R2 (X), R3(Y) hold end of line
;
; out:  R0..R6 hold the following control block
;         R0 - StartX
;         R1 - StartY
;         R2 - Bres
;         R3 - DeltaX
;         R4 - DeltaY
;         R5 - StepX (+1/-1) (Equv bit6 of Sign in 6502 version)
;         R6 - StepY (+1/-1) (Equv bit7 of Sign in 6502 version)
;         R7 - EndX
;         R8 - EndY
;

GenLineParm ROUT
        MOV     R7, R2          ; EndX,EndY - might be worth passing them
        MOV     R8, R3          ;            in R7,R8 not R2,R3

        SUB     R3, R7, R0      ; Crude deltaX
        SUB     R4, R8, R1      ; Crude deltaY

        CMP     R4, R3
        MOVLT   R2, #0          ; if deltaY >= deltaX R2 := -1
        MOVGE   R2, #-1         ;                else R2 := 0
                                ; this is used to fudge the bres
                                ; variable so lines of grad -1 are
                                ; the same as lines of grad 1

        MOVS    R5, R3, ASR #31 ; R5 := SGN(DeltaX)
        MOVPL   R5, #1
        RSBMI   R3, R3, #0      ; DeltaX := ABS(DeltaX)

        MOVS    R6, R4, ASR #31 ; R6 := SGN(DeltaY)
        MOVPL   R6, #1
        RSBMI   R4, R4, #0      ; DeltaY := ABS(DeltaY)

        CMP     R4, R3          ; Bres = MAX(DeltaX,DeltaY) + fudge factor
        ADDPL   R2, R4, R2
        ADDMI   R2, R3, R2

        RSB     R2, R4, R2, ASR #1 ; Bres = Bres/2 - DeltaY
        MOV     PC, R14         ; Return

; *****************************************************************************
;
;       AdvLineParm - Advance a set of line parameters
;
;       Internal routine, called by TrapFill, SegLineStep, ArcLineStep,
;        LineDraw, InYWind, InXWind
;
; in:   R0..R6, (R7,R8) hold a line parameter block
;
; out:  R0 (X), R1 (Y) R2 (Bres) updated
;
; Format of a control block
;       R0 - StartX (CurrentX)
;       R1 - StartY (CurrentY)
;       R2 - Bres
;       R3 - DeltaX
;       R4 - DeltaY
;       R5 - StepX (+1/-1) (Equv bit6 of Sign in 6502 version)
;       R6 - StepY (+1/-1) (Equv bit7 of Sign in 6502 version)
;       R7 - EndX            (Not used in this routine, so)
;       R8 - EndY            (doesnt need to be passed in)
;

AdvLineParm ROUT
        CMP     R2, #0          ; If Bres +ve, advance in X dirn only
        ADDLT   R1, R1, R6      ; Advance in Y dirn
        ADDLTS  R2, R2, R3      ; Add DeltaX to Bres
                                ; If new Bres +ve advance X as well
                                ; Advance X
        SUBGE   R2, R2, R4      ; Sub DeltaY from Bres to advance in X dirn
        ADDGE   R0, R0, R5      ; Add or subtract 1 dependent on sign DeltaX
        MOV     PC, R14

; *****************************************************************************
;
;       AdvLineParm_GE - Macro to advance line in XDirn if flags are GE
;
;       Used by Triangles,Parallelograms,Arcs etc
;
; Use:          CMP R2,#0
;               AdvLineParm_GE
;
; Instead of:   CMP R2,#0
;               BLGE AdvLineParm
;

        MACRO
        AdvLineParm_GE
        SUBGE   R2, R2, R4
        ADDGE   R0, R0, R5
        MEND

; *****************************************************************************
;
;       RectangleFill - Fill a rectangle
;
;       External routine, and RectFillA entry point used by BlockCopyMove, CLG
;        and RectFillB entry point used by PlotMask
;
; in:   ICursor & NewPt mark a diagonal of the rectangle
;
; out:  R0-R11 corrupt
;
;

RectangleFill ROUT
        ADD     R11,WsPtr,#GCsIX        ; load ICursor & NewPt
        LDMIA   R11, {R0-R3}
RectFillA
        Push    R14
RectFillB
        SortT   R0, R2, R11             ; ensure R0 holds the lesser X value
        SortT   R3, R1, R11             ; ensure R1 holds the higher Y value

        BL      CheckAcceleration
        BNE     RectFillC

; try calling GraphicsV for some acceleration

; R0 = left, R1 = top, R2 = right, R3 = bottom

        ADD     R4, WsPtr, #GWLCol
        LDMIA   R4, {R4-R7}             ; GWLCol,GWBRow,GWRCol,GWTRow

        CMP     R6, R0                  ; Test xcoords against window
        CMPGE   R2, R4
        CMPGE   R7, R3                  ; Test ycoords against window
        CMPGE   R1, R5
        MOVLT   PC, R14                 ; Quit if above,below,left or right

        Greatest R0, R0, R4             ; Clip all coords to window
        Greatest R3, R3, R5
        Least   R2, R2, R6
        Least   R1, R1, R7

        LDR     R4, [WsPtr, #GColAdr]
        Push    "R0-R4"
        MOV     R0, #GVRender_Sync
        MOV     R1, #GVRender_FillRectangle
        MOV     R2, R13
        LDR     R4, [WsPtr, #CurrentGraphicsVDriver]
        MOV     R4, R4, LSL #24
        ORR     R4, R4, #GraphicsV_Render
        BL      CallGraphicsV
        TEQ     R4, #GraphicsV_Complete
        Pull    "R0-R4"
        Pull    PC, EQ

; if it didn't claim, we proceed with the pre-clipped coordinates

RectFillC
        MOV     R11, R3                 ; place end Y out of harm's way
10
        BL      NewHLine
        SUB     R1, R1, #1              ; step Y down a line
        CMP     R1, R11
        BGE     %BT10
        Pull    PC

; *****************************************************************************
;
;       TriangleFill - Triangular area fill
;
;       External routine
;
; in:   OldCs, ICursor & NewPt are verticies of the triangle
;
; out:  R0-R11 corrupt
;

TriangleFill ROUT
        Push    R14
        ADD     R11, WsPtr, #OldCsX             ; vertices are OldCs,ICursor
        LDMIA   R11, {R0-R5}                    ; and NewPt
        BL      LowerTri                        ; sort vertices and fill the
                                                ; lower triangle
        ADD     R11, WsPtr, #Vertex2X           ; restart TLine1 to run from
        LDMIA   R11, {R0-R3}                    ; Vertex2 to Vertex3
        ADD     R11, WsPtr, #TLine1
TriangleFil5                                    ; entry point from par fill
        BL      GenLineParm
        STMIA   R11, {R0-R8}                    ; initialise parameter block
        STR     R8, [WsPtr, #TEndY]             ; end Y point for both lines
        BL      TrapFill                        ; fill the upper trapezoid
        MOV     R0, R9                          ; fill top line LeftX,RightX
        MOV     R2, R10                         ; leftY already in R1
        BL      NewHLine
        Pull    PC

; *****************************************************************************
;
;       LowerTri - Sort 3 vertices and fill the lower triangle between the
;        points up to but excluding the horizontal through the middle point
;
;       Internal routine, called by TriangleFill and ParallelogramFill
;

LowerTri ROUT
        Push    R14
        CompSwapT R0,R1, R2,R3, R14 ; bubble highest vertex into R4,R5
        CompSwapT R2,R3 ,R4,R5, R14

        CompSwapT R0,R1, R2,R3, R14 ; place lowest in R0,R1 and middle in R2,R3

        ADD     R11, WsPtr, #Vertex1X
        STMIA   R11, {R0-R7}                    ; save all our vertices

        MOV     R9, R0                          ; initalise TLeftX,TRightX
        MOV     R10, R0                         ; to lowest point
        BL      GenLineParm                     ; Run TLine1 from lowest to
        ADD     R11, WsPtr, #TLine1             ; middle point
        STMIA   R11, {R0-R8}
        STR     R8, [WsPtr, #TEndY]             ; this line ends first

        ADD     R2, WsPtr, #Vertex3X            ; run TLine2 from lowest to
        LDMIA   R2, {R2, R3}                    ; highest point
        BL      GenLineParm
        ADD     R11, WsPtr, #TLine2
        STMIA   R11, {R0-R8}
        BL      TrapFill                        ; fill the lower trapezoid

        Pull    PC

; *****************************************************************************
;
;       ParallelogramFill - Fill a parallelogram
;
;       External routine
;
; in:   OldCs, ICursor & NewPt are 3 vertices of the parallelogram
;
; out:  R0-R11 corrupt
;

ParallelogramFill ROUT
        Push    R14
        ADD     R11, WsPtr, #OldCsX             ; vertices are OldCs,ICursor
        LDMIA   R11, {R0-R5}                    ; and NewPt

; now calculate Vertex4 from other three

        ADD     R6, R0, R4      ; Vertex4X := Vertex1X + Vertex3X - Vertex2X
        SUB     R6, R6, R2

        ADD     R7, R1, R5      ; Vertex4Y := Vertex1Y + Vertex3Y - Vertex2Y
        SUB     R7, R7, R3

        CompSwapT R0,R1, R2,R3, R14 ; Bubble the highest point into R6,R7
        CompSwapT R2,R3 ,R4,R5, R14
        CompSwapT R4,R5 ,R6,R7, R14

        BL      LowerTri        ; sort other vertices and draw lower triangle

        ADD     R11, WsPtr, #Vertex2X           ; restart TLine1 to run from
        LDMIA   R11!, {R0-R3}                   ; Vertex2 to Vertex4
        STR     R3, [WsPtr, #TEndY]             ; and indicate line Vertex1 to
        LDMIA   R11, {R2,R3}                    ; Vertex3 as the next to finish

        BL      GenLineParm
        ADD     R11, WsPtr, #TLine1
        STMIA   R11, {R0-R8}                    ; TLine1 parameter block

        BL      TrapFill                        ; fill the middle trapezoid

        ADD     R11, WsPtr, #Vertex3X           ; restart TLine2 to run from
        LDMIA   R11, {R0-R3}                    ; Vertex3 to Vertex4
        ADD     R11, WsPtr, #TLine2
        B       TriangleFil5                    ; Use common code with
                                                ; triangles to initialise and
                                                ; fill upper trapezoid

; *****************************************************************************
;
;       TrapFill - Fill a trapezoid
;
;       Internal routine, called by TriangleFill, LowerTri, ParallelogramFill
;
; in:   R9  = TLeftX    }  the line limits for this scanline
;       R10 = TRightX   }
;
; out:  R9,R10 updated
;

TrapFill ROUT
        Push    R14
10
        ADD     R11, WsPtr, #TLine1     ; Advance TLine1 until currentY about
        BL      TrapLineStep            ; to change, or end of line reached

        ADD     R11, WsPtr, #TLine2     ; ditto TLine2
        BL      TrapLineStep

        LDR     R11, [WsPtr, #TEndY]
        CMP     R11, R1                 ; if CurrentY = EndY
        Pull    PC, EQ                  ; then quit

        MOV     R0, R9                  ; LeftX
        MOV     R2, R10                 ; RightX
                                        ; LeftY already in R1
        BL      NewHLine                ; Plot current scanline

        ADD     R11, WsPtr, #TLine1     ; advance TLine1 to next scanline
        LDMIA   R11, {R0-R6}
        BL      AdvLineParm
        STMIA   R11, {R0-R2}            ; save the changes

        MOV     R9, R0                  ; assume currentX will be LeftX

        ADD     R11, WsPtr, #TLine2     ; advance TLine2 to next scanline
        LDMIA   R11, {R0-R6}
        BL      AdvLineParm
        STMIA   R11, {R0-R2}            ; save the changes

        CMP     R0, R9                  ; LeftX=Min(CurrentX,CurrentY)
        MOVGE   R10, R0                 ; RightX=Max(CurrentX,CurrentY)
        MOVLT   R10, R9
        MOVLT   R9, R0
        B       %BT10                   ; continue with next scanline


; *****************************************************************************
;
;       TrapLineStep - Step line parameters until CurrentY about to change
;        or end of line reached - compares CurrentX with line limits
;        (LeftX,RightX) and widens them if needed
;
;       Internal routine, called by TrapFill
;
; in:   R9  = LeftX
;       R10 = RightX
;       R11 = address of parameter block
;
; out:  R0-R8 parameter block for this line
;       R9, R10 updated
;       R11 preserved
;

TrapLineStep ROUT
        Push    R14
        LDMIA   R11, {R0-R8}            ; get line parameter block
        CMP     R8, R1                  ; if on last scanline
        MOVEQ   R0, R7                  ; then set currentX to EndX
        BEQ     TrapLin20               ;     (bres unchanged, but who cares)

        CMP     R2, #0                  ; else While bres >= 0 do AdvLineParm
TrapLin10                               ;      {step until Y about to change}
        ADDGE   R0, R0, R5
        SUBGES  R2, R2, R4
        BGE     TrapLin10

TrapLin20
        STMIA   R11, {R0-R2}            ; update the changes to parameter block
        CMP     R0, R9                  ; LeftX=Min(LeftX,CurrentX)
        MOVLT   R9, R0
        CMP     R0, R10
        MOVGT   R10, R0                 ; RightX=Max(RightX,CurrentX)
        Pull    PC



        END
@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d150 38
@


4.2.2.1
log
@  Commit of kernel as featured in release 5.00.
Detail:
  Lots of changes since last version, at least the following:
  * Updated OS timestamp, removed alpha status
  * Negative INKEY OS version changed to &AA
  * GraphicsV is now alocated vector number &2A
  * ROM moved up to &FC000000
  * Max application slot increased to 512 Mbytes (for now)
  * Max size of RMA increased to 256 Mbytes
  * RMA is now first-created dynamic area (so it gets lowest address after
    top of application slot)
  * OS_Memory 10 reimplemeted
  * New OS_ReadSysInfo 6 values 18-22 added
  * OS_ReadSysInfo 8 gains flag bit to indicate soft power-off
  * Misc internal top-bit-set-address fixes
  * *ChangeDynamicArea can take sizes in megabytes or gigabytes
  * Magic word "&off" in R0 passed to OS_Reset powers down if possible
  * Added acceleration: block copy; CLS; text window scroll up; rectangle
    fill
  * Disabled LED flashing in page mode (liable to crash)
  * Masked sprite plot and VDU 5 text avoids reading the screen if possible
  * Framestore made USR mode accessible
  * Fix for VDU 5,127 bug - now relies on font definitions being in extreme
    quarters of memory, rather than bottom half
  * Allocated 64-bit OS_Convert... SWIs
  * IIC errors use allocated error numbers
  * Looks for Dallas RTC before Philips RTC because we're using a Philips
    NVRAM device with the same ID
  * Fix to bug that meant the oscillator in the Dallas RTC wasn't enabled
  * Default mouse type (USB) changed to allocated number
  * Ram disc max size increased to 128 Mbytes (Ursula merge) and made
    cacheable for StrongARMs (not XScale)
  * Branch through zero handler now works in USR mode, by use of a
    trampoline in the system stack to allow PC-relative register storage
  * Address exception handler changed to not use 0 as workspace
  * OS_Memory 13 extended to allow specification of cacheability and access
    privileges
  * Added OS_Memory 16 to return important memory addresses
  * RISCOS_MapInIO() takes cacheable flag in bit 3, access permissions in
    bits 10 and 11, doubly-mapped flag in bit 20, and access permissions
    specified flag in bit 21
  * Bug fix in last version for application abort handlers didn't quite
    work; register shuffle required
  * "Module is not 32-bit compatible" error now reports the module name
  * Default configured language changed from 10 to 11 (now Desktop again)

Version 5.35, 4.79.2.51. Tagged as 'Kernel-5_35-4_79_2_51'
@
text
@a149 37
 [ UseGraphicsV
        BL      CheckAcceleration
        BNE     RectFillC

; try calling GraphicsV for some acceleration

; R0 = left, R1 = top, R2 = right, R3 = bottom

        ADD     R4, WsPtr, #GWLCol
        LDMIA   R4, {R4-R7}             ; GWLCol,GWBRow,GWRCol,GWTRow

        CMP     R6, R0                  ; Test xcoords against window
        CMPGE   R2, R4
        CMPGE   R7, R3                  ; Test ycoords against window
        CMPGE   R1, R5
        MOVLT   PC, R14                 ; Quit if above,below,left or right

        Greatest R0, R0, R4             ; Clip all coords to window
        Greatest R3, R3, R5
        Least   R2, R2, R6
        Least   R1, R1, R7

        LDR     R4, [WsPtr, #GColAdr]
        Push    "R0-R4"
        MOV     R0, #GVRender_Sync
        MOV     R1, #GVRender_FillRectangle
        MOV     R2, R13
        MOV     R4, #GraphicsV_Render
        BL      CallGraphicsV
        TEQ     R4, #GraphicsV_Complete
        Pull    "R0-R4"
        Pull    PC, EQ

; if it didn't claim, we proceed with the pre-clipped coordinates

 ]
RectFillC
@


4.2.2.2
log
@Assorted GraphicsV improvements
Detail:
  This set of changes:
  * Adds basic support for multiple GraphicsV drivers, by way of some new OS_ScreenMode reason codes for registering/deregistering, selecting and enumerating drivers (11, 64-68)
  * Tidies up handling of HAL video calls so that the HAL calls will be transformed into a bona fide GraphicsV driver if they're implemented
  * Changes handling of 16bpp gamma table entries so that they're sent to GraphicsV in a generic form instead of in a VIDC-specific form
  * Adds a new GraphicsV call and defines new VIDC list items to allow GraphicsV drivers to utilise the new pixel formats
  File changes:
  * h/VIDCList, hdr/VIDCList, Makefile - Add new header export containing VIDC list type 3 definitions, to avoid repeated definitions in other components
  * Resources/UK/Messages - Add new GraphicsV/OS_ScreenMode error strings and some missing processor type strings
  * hdr/KernelWS - Clean up some pre-GraphicsV definitions, and add new workspace locations for storing the current GraphicsV driver number and the driver list
  * hdr/Options - Remove obsolete InverseTextTransparency option
  * hdr/VduExt - Add VDU variable 192 for storing GraphicsV driver number (same as ROL's VideoV driver number). Remove old 'Flag_*' mode flag definitions (use new 'ModeFlag_*' defintions instead). Add new OS_ScreenMode reason codes.
  * s/ARM600, s/VMSAv6, s/vdu/vdu23, s/vdu/vdugrafa, s/vdu/vdugrafd, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduwrch - Strip out pre-GraphicsV code. Update GraphicsV code to use correct driver number.
  * s/ArthurSWIs - Pass the default GraphicsV claimant the VduDriverWorkSpace instead of ZeroPage
  * s/Getall - Add Hdr:VIDCList and s/vdu/VduGrafHAL to list of GETs
  * s/NewIRQs - Remove HAL VSync IRQ initialisation, is now handled by grafvhal. Remove old HAL VsyncIRQ entry point, all VSyncs are now handled by VsyncIRQ_ExtEntry.
  * s/PMF/osbyte - Stop OS_Byte 19 waiting forever if no video driver is active
  * s/PMF/osinit - Remove HAL VSync IRQ initialisation, is now handled by grafvhal
  * s/vdu/vducursoft - Use new workspace variable names and flag names
  * s/vdu/vdudecl - Remove old HALDAG_* definitions, GVDAG_* definitions are used instead. Add definition of the per-driver workspace structure and flags.
  * s/vdu/vdudriver - Remove pre-GraphicsV code. Update InitialiseMode to check for and initialise a HAL driver. Use cached driver features word in a few places instead of calling GraphicsV each time. Update PalIndexTable to disable VIDC mangling of 16bpp gamma tables.
  * s/vdu/vdugrafv, s/vdu/vdugrafhal - HAL<->GraphicsV code split off into its own file (vdugrafhal). Default GraphicsV claimant now only deals with VSync events for the active driver.
  * s/vdu/vdumodes - Get rid of old VIDC List type 3 definiton; now in hdr/VIDCList
  * s/vdu/vduswis - Added OS_ScreenMode reason codes 11 and 64-68 for registering, deregistering, selecting and enumerating GraphicsV drivers. Update mode set code to not bother checking if the driver supports the pixel format; instead we assume that the driver's vet mode call will do the check for us.
Admin:
  Tested in Tungsten, IOMD, OMAP3 & BCM2835 ROMs
  Requires HdrSrc-2_38 and updated video driver modes


Version 5.35, 4.79.2.203. Tagged as 'Kernel-5_35-4_79_2_203'
@
text
@d177 1
a177 3
        LDR     R4, [WsPtr, #CurrentGraphicsVDriver]
        MOV     R4, R4, LSL #24
        ORR     R4, R4, #GraphicsV_Render
@


4.2.2.3
log
@Strip out some old build switches
Detail:
  hdr/Options, s/ArthurSWIs, s/ChangeDyn, s/PMF/KbdDrA1, s/PMF/key, s/vdu/vdugrafa, s/vdu/vdugrafd, s/vdu/vdugrafhal, s/vdu/vdugrafv, s/vdu/vdumodes, s/vdu/vduwrch:
  - Strip out DoingVdu build switch (did nothing)
  - Strip out Japanese16BitSound switch (did nothing)
  - Strip out MakeModeSelectorsForModeNUmbers switch (altered the mode list structures, but there wasn't any code to do anything with the new data)
  - Strip out remaining uses of UseGraphicsV switch (now hardwired to {TRUE})
  - Strip out ShadowROM switch (altered FixedAreasTable to show the shadow mapping, but code to create the mapping is missing)
  - Strip out PollMouse switch (old Archimedes-era debug/development option)
Admin:
  Tested on BB-xM
  Builds to same binary as previous version


Version 5.35, 4.79.2.204. Tagged as 'Kernel-5_35-4_79_2_204'
@
text
@d150 1
a150 1

d187 1
@


4.1
log
@Initial revision
@
text
@d29 1
a29 1
; 
d75 1
a75 1
        MOVS    PC, R14         ; Return
d108 1
a108 1
        MOVS    PC, R14
d198 1
a198 1
        CompSwapT R0,R1, R2,R3, R14 ; bubble highest vertex into R4,R5 
d246 2
a247 2
        CompSwapT R0,R1, R2,R3, R14 ; Bubble the highest point into R6,R7 
        CompSwapT R2,R3 ,R4,R5, R14 
d301 1
a301 1
        LDMIA   R11, {R0-R6} 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
