head	4.7;
access;
symbols
	Kernel-6_14:4.7
	Kernel-6_01-3:4.7
	Kernel-6_13:4.7
	Kernel-6_12:4.7
	Kernel-6_11:4.7
	Kernel-6_10:4.7
	Kernel-6_09:4.7
	Kernel-6_08-4_129_2_10:4.7
	Kernel-6_08-4_129_2_9:4.7
	Kernel-6_08:4.7
	Kernel-6_07:4.7
	Kernel-6_06:4.7
	Kernel-6_05-4_129_2_8:4.7
	Kernel-6_05:4.7
	Kernel-6_04:4.7
	Kernel-6_03:4.7
	Kernel-6_01-2:4.7
	Kernel-6_01-4_146_2_1:4.7
	Kernel-6_02:4.7
	Kernel-6_01-1:4.7
	Kernel-6_01:4.7
	Kernel-6_00:4.7
	Kernel-5_99:4.7
	Kernel-5_98:4.7
	Kernel-5_97-4_129_2_7:4.7
	Kernel-5_97:4.7
	Kernel-5_96:4.7
	Kernel-5_95:4.7
	Kernel-5_94:4.7
	Kernel-5_93:4.7
	Kernel-5_92:4.7
	Kernel-5_91:4.7
	Kernel-5_90:4.7
	Kernel-5_89-4_129_2_6:4.7
	Kernel-5_89:4.7
	Kernel-5_88-4_129_2_5:4.7
	Kernel-5_88-4_129_2_4:4.7
	Kernel-5_88:4.7
	Kernel-5_87:4.7
	Kernel-5_86-4_129_2_3:4.7
	Kernel-5_86-4_129_2_2:4.7
	Kernel-5_86-4_129_2_1:4.7
	Kernel-5_86:4.7
	SMP:4.7.0.2
	SMP_bp:4.7
	Kernel-5_85:4.7
	Kernel-5_54-1:4.7
	Kernel-5_84:4.7
	Kernel-5_83:4.7
	Kernel-5_82:4.7
	Kernel-5_81:4.7
	Kernel-5_80:4.7
	Kernel-5_79:4.7
	Kernel-5_78:4.7
	Kernel-5_77:4.7
	Kernel-5_76:4.7
	Kernel-5_75:4.7
	Kernel-5_74:4.7
	Kernel-5_73:4.7
	Kernel-5_72:4.7
	Kernel-5_71:4.7
	Kernel-5_70:4.7
	Kernel-5_69:4.7
	Kernel-5_68:4.7
	Kernel-5_67:4.7
	Kernel-5_66:4.7
	Kernel-5_65:4.7
	Kernel-5_64:4.7
	Kernel-5_63:4.7
	Kernel-5_62:4.7
	Kernel-5_61:4.7
	Kernel-5_60:4.7
	Kernel-5_59:4.7
	Kernel-5_58:4.7
	Kernel-5_57:4.7
	Kernel-5_56:4.7
	Kernel-5_55:4.7
	Kernel-5_54:4.7
	Kernel-5_53:4.6
	Kernel-5_52:4.6
	Kernel-5_51:4.6
	Kernel-5_50:4.6
	Kernel-5_49:4.6
	HAL_merge:4.5.2.8
	Kernel-5_48:4.6
	Kernel-5_35-4_79_2_327:4.5.2.8
	Kernel-5_35-4_79_2_326:4.5.2.8
	Kernel-5_35-4_79_2_325:4.5.2.8
	Kernel-5_35-4_79_2_324:4.5.2.8
	Kernel-5_35-4_79_2_323:4.5.2.8
	Kernel-5_35-4_79_2_322:4.5.2.8
	Kernel-5_35-4_79_2_321:4.5.2.8
	Kernel-5_35-4_79_2_320:4.5.2.8
	Kernel-5_35-4_79_2_319:4.5.2.8
	Kernel-5_35-4_79_2_318:4.5.2.8
	Kernel-5_35-4_79_2_317:4.5.2.8
	Kernel-5_35-4_79_2_316:4.5.2.8
	Kernel-5_35-4_79_2_315:4.5.2.8
	Kernel-5_35-4_79_2_314:4.5.2.8
	Kernel-5_35-4_79_2_313:4.5.2.8
	Kernel-5_35-4_79_2_312:4.5.2.8
	Kernel-5_35-4_79_2_311:4.5.2.8
	Kernel-5_35-4_79_2_310:4.5.2.8
	Kernel-5_35-4_79_2_309:4.5.2.8
	Kernel-5_35-4_79_2_308:4.5.2.8
	Kernel-5_35-4_79_2_307:4.5.2.8
	Kernel-5_35-4_79_2_306:4.5.2.8
	Kernel-5_35-4_79_2_305:4.5.2.8
	Kernel-5_35-4_79_2_304:4.5.2.8
	Kernel-5_35-4_79_2_303:4.5.2.8
	Kernel-5_35-4_79_2_302:4.5.2.8
	Kernel-5_35-4_79_2_301:4.5.2.8
	Kernel-5_35-4_79_2_300:4.5.2.8
	Kernel-5_35-4_79_2_299:4.5.2.8
	Kernel-5_35-4_79_2_298:4.5.2.8
	Kernel-5_35-4_79_2_297:4.5.2.8
	Kernel-5_35-4_79_2_296:4.5.2.8
	Kernel-5_35-4_79_2_295:4.5.2.8
	Kernel-5_35-4_79_2_294:4.5.2.8
	Kernel-5_35-4_79_2_293:4.5.2.8
	Kernel-5_35-4_79_2_292:4.5.2.8
	Kernel-5_35-4_79_2_291:4.5.2.8
	Kernel-5_35-4_79_2_290:4.5.2.8
	Kernel-5_35-4_79_2_289:4.5.2.8
	Kernel-5_35-4_79_2_288:4.5.2.8
	Kernel-5_35-4_79_2_287:4.5.2.8
	Kernel-5_35-4_79_2_286:4.5.2.8
	Kernel-5_35-4_79_2_285:4.5.2.8
	Kernel-5_35-4_79_2_284:4.5.2.8
	Kernel-5_35-4_79_2_283:4.5.2.8
	Kernel-5_35-4_79_2_282:4.5.2.8
	Kernel-5_35-4_79_2_281:4.5.2.8
	Kernel-5_35-4_79_2_280:4.5.2.8
	Kernel-5_35-4_79_2_279:4.5.2.8
	Kernel-5_35-4_79_2_278:4.5.2.8
	Kernel-5_35-4_79_2_277:4.5.2.8
	Kernel-5_35-4_79_2_276:4.5.2.8
	Kernel-5_35-4_79_2_275:4.5.2.8
	Kernel-5_35-4_79_2_274:4.5.2.8
	Kernel-5_35-4_79_2_273:4.5.2.8
	Kernel-5_35-4_79_2_272:4.5.2.8
	Kernel-5_35-4_79_2_271:4.5.2.8
	Kernel-5_35-4_79_2_270:4.5.2.8
	Kernel-5_35-4_79_2_269:4.5.2.8
	Kernel-5_35-4_79_2_268:4.5.2.8
	Kernel-5_35-4_79_2_267:4.5.2.8
	Kernel-5_35-4_79_2_266:4.5.2.8
	Kernel-5_35-4_79_2_265:4.5.2.8
	Kernel-5_35-4_79_2_264:4.5.2.8
	Kernel-5_35-4_79_2_263:4.5.2.8
	Kernel-5_35-4_79_2_262:4.5.2.8
	Kernel-5_35-4_79_2_261:4.5.2.8
	Kernel-5_35-4_79_2_260:4.5.2.8
	Kernel-5_35-4_79_2_259:4.5.2.8
	Kernel-5_35-4_79_2_258:4.5.2.8
	Kernel-5_35-4_79_2_257:4.5.2.8
	Kernel-5_35-4_79_2_256:4.5.2.8
	Kernel-5_35-4_79_2_255:4.5.2.8
	Kernel-5_35-4_79_2_254:4.5.2.8
	Kernel-5_35-4_79_2_253:4.5.2.8
	Kernel-5_35-4_79_2_252:4.5.2.8
	Kernel-5_35-4_79_2_251:4.5.2.8
	Kernel-5_35-4_79_2_250:4.5.2.8
	Kernel-5_35-4_79_2_249:4.5.2.8
	Kernel-5_35-4_79_2_248:4.5.2.8
	Kernel-5_35-4_79_2_247:4.5.2.8
	Kernel-5_35-4_79_2_246:4.5.2.8
	Kernel-5_35-4_79_2_245:4.5.2.8
	Kernel-5_35-4_79_2_244:4.5.2.8
	Kernel-5_35-4_79_2_243:4.5.2.8
	Kernel-5_35-4_79_2_242:4.5.2.8
	Kernel-5_35-4_79_2_241:4.5.2.8
	Kernel-5_35-4_79_2_240:4.5.2.8
	Kernel-5_35-4_79_2_239:4.5.2.8
	Kernel-5_35-4_79_2_238:4.5.2.8
	Kernel-5_35-4_79_2_237:4.5.2.8
	Kernel-5_35-4_79_2_236:4.5.2.8
	Kernel-5_35-4_79_2_235:4.5.2.8
	Kernel-5_35-4_79_2_234:4.5.2.8
	Kernel-5_35-4_79_2_233:4.5.2.8
	Kernel-5_35-4_79_2_232:4.5.2.8
	Kernel-5_35-4_79_2_231:4.5.2.8
	Kernel-5_35-4_79_2_230:4.5.2.8
	Kernel-5_35-4_79_2_229:4.5.2.8
	Kernel-5_35-4_79_2_228:4.5.2.8
	Kernel-5_35-4_79_2_227:4.5.2.8
	Kernel-5_35-4_79_2_226:4.5.2.8
	Kernel-5_35-4_79_2_225:4.5.2.8
	Kernel-5_35-4_79_2_224:4.5.2.8
	Kernel-5_35-4_79_2_223:4.5.2.8
	Kernel-5_35-4_79_2_222:4.5.2.8
	Kernel-5_35-4_79_2_221:4.5.2.8
	Kernel-5_35-4_79_2_220:4.5.2.8
	Kernel-5_35-4_79_2_219:4.5.2.8
	Kernel-5_35-4_79_2_218:4.5.2.8
	Kernel-5_35-4_79_2_217:4.5.2.8
	Kernel-5_35-4_79_2_216:4.5.2.8
	Kernel-5_35-4_79_2_215:4.5.2.8
	Kernel-5_35-4_79_2_214:4.5.2.8
	Kernel-5_35-4_79_2_213:4.5.2.8
	Kernel-5_35-4_79_2_212:4.5.2.8
	Kernel-5_35-4_79_2_211:4.5.2.8
	Kernel-5_35-4_79_2_210:4.5.2.8
	Kernel-5_35-4_79_2_209:4.5.2.8
	Kernel-5_35-4_79_2_208:4.5.2.8
	Kernel-5_35-4_79_2_207:4.5.2.8
	Kernel-5_35-4_79_2_206:4.5.2.8
	Kernel-5_35-4_79_2_205:4.5.2.8
	Kernel-5_35-4_79_2_204:4.5.2.8
	Kernel-5_35-4_79_2_203:4.5.2.8
	Kernel-5_35-4_79_2_202:4.5.2.8
	Kernel-5_35-4_79_2_201:4.5.2.8
	Kernel-5_35-4_79_2_200:4.5.2.8
	Kernel-5_35-4_79_2_199:4.5.2.8
	Kernel-5_35-4_79_2_198:4.5.2.8
	Kernel-5_35-4_79_2_197:4.5.2.8
	Kernel-5_35-4_79_2_196:4.5.2.8
	Kernel-5_35-4_79_2_195:4.5.2.8
	Kernel-5_35-4_79_2_194:4.5.2.8
	Kernel-5_35-4_79_2_193:4.5.2.8
	Kernel-5_35-4_79_2_192:4.5.2.8
	Kernel-5_35-4_79_2_191:4.5.2.8
	Kernel-5_35-4_79_2_190:4.5.2.8
	Kernel-5_35-4_79_2_189:4.5.2.8
	Kernel-5_35-4_79_2_188:4.5.2.8
	Kernel-5_35-4_79_2_187:4.5.2.8
	Kernel-5_35-4_79_2_186:4.5.2.8
	Kernel-5_35-4_79_2_185:4.5.2.8
	Kernel-5_35-4_79_2_184:4.5.2.8
	Kernel-5_35-4_79_2_183:4.5.2.8
	Kernel-5_35-4_79_2_182:4.5.2.8
	Kernel-5_35-4_79_2_181:4.5.2.8
	Kernel-5_35-4_79_2_180:4.5.2.8
	Kernel-5_35-4_79_2_179:4.5.2.8
	Kernel-5_35-4_79_2_178:4.5.2.8
	Kernel-5_35-4_79_2_177:4.5.2.8
	Kernel-5_35-4_79_2_176:4.5.2.8
	Kernel-5_35-4_79_2_175:4.5.2.8
	Kernel-5_35-4_79_2_174:4.5.2.8
	Kernel-5_35-4_79_2_173:4.5.2.8
	Kernel-5_35-4_79_2_172:4.5.2.8
	Kernel-5_35-4_79_2_171:4.5.2.8
	Kernel-5_35-4_79_2_170:4.5.2.8
	Kernel-5_35-4_79_2_169:4.5.2.8
	Kernel-5_35-4_79_2_168:4.5.2.8
	Kernel-5_35-4_79_2_167:4.5.2.8
	Kernel-5_35-4_79_2_166:4.5.2.8
	Kernel-5_35-4_79_2_165:4.5.2.8
	RPi_merge:4.5.2.8
	Kernel-5_35-4_79_2_147_2_23:4.5.2.8
	Kernel-5_35-4_79_2_147_2_22:4.5.2.8
	Kernel-5_35-4_79_2_147_2_21:4.5.2.8
	Kernel-5_35-4_79_2_147_2_20:4.5.2.8
	Kernel-5_35-4_79_2_147_2_19:4.5.2.8
	Kernel-5_35-4_79_2_147_2_18:4.5.2.8
	Kernel-5_35-4_79_2_164:4.5.2.8
	Kernel-5_35-4_79_2_163:4.5.2.8
	Kernel-5_35-4_79_2_147_2_17:4.5.2.8
	Kernel-5_35-4_79_2_147_2_16:4.5.2.8
	Kernel-5_35-4_79_2_147_2_15:4.5.2.8
	Kernel-5_35-4_79_2_162:4.5.2.8
	Kernel-5_35-4_79_2_161:4.5.2.8
	Kernel-5_35-4_79_2_147_2_14:4.5.2.8
	Kernel-5_35-4_79_2_147_2_13:4.5.2.8
	Kernel-5_35-4_79_2_160:4.5.2.8
	Kernel-5_35-4_79_2_159:4.5.2.8
	Kernel-5_35-4_79_2_158:4.5.2.8
	Kernel-5_35-4_79_2_157:4.5.2.8
	Kernel-5_35-4_79_2_156:4.5.2.8
	Kernel-5_35-4_79_2_147_2_12:4.5.2.8
	Kernel-5_35-4_79_2_147_2_11:4.5.2.8
	Kernel-5_35-4_79_2_155:4.5.2.8
	Kernel-5_35-4_79_2_147_2_10:4.5.2.8
	Kernel-5_35-4_79_2_154:4.5.2.8
	Kernel-5_35-4_79_2_153:4.5.2.8
	Kernel-5_35-4_79_2_147_2_9:4.5.2.8
	Kernel-5_35-4_79_2_152:4.5.2.8
	Kernel-5_35-4_79_2_151:4.5.2.8
	Kernel-5_35-4_79_2_147_2_8:4.5.2.8
	Kernel-5_35-4_79_2_147_2_7:4.5.2.8
	Kernel-5_35-4_79_2_150:4.5.2.8
	Kernel-5_35-4_79_2_147_2_6:4.5.2.8
	Kernel-5_35-4_79_2_147_2_5:4.5.2.8
	Kernel-5_35-4_79_2_149:4.5.2.8
	Kernel-5_35-4_79_2_147_2_4:4.5.2.8
	Kernel-5_35-4_79_2_147_2_3:4.5.2.8
	Kernel-5_35-4_79_2_148:4.5.2.8
	Kernel-5_35-4_79_2_147_2_2:4.5.2.8
	Kernel-5_35-4_79_2_147_2_1:4.5.2.8
	RPi:4.5.2.8.0.2
	RPi_bp:4.5.2.8
	Kernel-5_35-4_79_2_98_2_52_2_1:4.5.2.5.2.1
	alees_Kernel_dev:4.5.2.5.2.1.0.2
	alees_Kernel_dev_bp:4.5.2.5.2.1
	Kernel-5_35-4_79_2_147:4.5.2.8
	Kernel-5_35-4_79_2_146:4.5.2.8
	Kernel-5_35-4_79_2_145:4.5.2.8
	Kernel-5_35-4_79_2_144:4.5.2.8
	Kernel-5_35-4_79_2_143:4.5.2.8
	Kernel-5_35-4_79_2_142:4.5.2.8
	Kernel-5_35-4_79_2_141:4.5.2.8
	Kernel-5_35-4_79_2_140:4.5.2.8
	Kernel-5_35-4_79_2_139:4.5.2.8
	Kernel-5_35-4_79_2_138:4.5.2.8
	Kernel-5_35-4_79_2_137:4.5.2.8
	Kernel-5_35-4_79_2_136:4.5.2.8
	Kernel-5_35-4_79_2_135:4.5.2.8
	Kernel-5_35-4_79_2_134:4.5.2.8
	Kernel-5_35-4_79_2_133:4.5.2.8
	Kernel-5_35-4_79_2_132:4.5.2.8
	Kernel-5_35-4_79_2_131:4.5.2.8
	Kernel-5_35-4_79_2_130:4.5.2.8
	Kernel-5_35-4_79_2_129:4.5.2.8
	Kernel-5_35-4_79_2_128:4.5.2.8
	Kernel-5_35-4_79_2_127:4.5.2.8
	Kernel-5_35-4_79_2_126:4.5.2.7
	Kernel-5_35-4_79_2_125:4.5.2.7
	Kernel-5_35-4_79_2_124:4.5.2.6
	Kernel-5_35-4_79_2_123:4.5.2.6
	Cortex_merge:4.5.2.5.2.1
	Kernel-5_35-4_79_2_122:4.5.2.5
	Kernel-5_35-4_79_2_98_2_54:4.5.2.5.2.1
	Kernel-5_35-4_79_2_98_2_53:4.5.2.5.2.1
	Kernel-5_35-4_79_2_98_2_52:4.5.2.5.2.1
	Kernel-5_35-4_79_2_98_2_51:4.5.2.5.2.1
	Kernel-5_35-4_79_2_98_2_50:4.5.2.5.2.1
	Kernel-5_35-4_79_2_98_2_49:4.5.2.5.2.1
	Kernel-5_35-4_79_2_98_2_48:4.5.2.5.2.1
	Kernel-5_35-4_79_2_121:4.5.2.5
	Kernel-5_35-4_79_2_98_2_47:4.5.2.5
	Kernel-5_35-4_79_2_120:4.5.2.5
	Kernel-5_35-4_79_2_98_2_46:4.5.2.5
	Kernel-5_35-4_79_2_119:4.5.2.5
	Kernel-5_35-4_79_2_98_2_45:4.5.2.5
	Kernel-5_35-4_79_2_98_2_44:4.5.2.5
	Kernel-5_35-4_79_2_118:4.5.2.5
	Kernel-5_35-4_79_2_98_2_43:4.5.2.5
	Kernel-5_35-4_79_2_117:4.5.2.5
	Kernel-5_35-4_79_2_116:4.5.2.5
	Kernel-5_35-4_79_2_98_2_42:4.5.2.5
	Kernel-5_35-4_79_2_115:4.5.2.5
	Kernel-5_35-4_79_2_98_2_41:4.5.2.5
	Kernel-5_35-4_79_2_98_2_40:4.5.2.5
	Kernel-5_35-4_79_2_114:4.5.2.5
	Kernel-5_35-4_79_2_98_2_39:4.5.2.5
	Kernel-5_35-4_79_2_98_2_38:4.5.2.5
	Kernel-5_35-4_79_2_113:4.5.2.5
	Kernel-5_35-4_79_2_112:4.5.2.5
	Kernel-5_35-4_79_2_98_2_37:4.5.2.5
	Kernel-5_35-4_79_2_98_2_36:4.5.2.5
	Kernel-5_35-4_79_2_98_2_35:4.5.2.5
	Kernel-5_35-4_79_2_98_2_34:4.5.2.5
	Kernel-5_35-4_79_2_98_2_33:4.5.2.5
	Kernel-5_35-4_79_2_98_2_32:4.5.2.5
	Kernel-5_35-4_79_2_98_2_31:4.5.2.5
	Kernel-5_35-4_79_2_98_2_30:4.5.2.5
	Kernel-5_35-4_79_2_98_2_29:4.5.2.5
	Kernel-5_35-4_79_2_98_2_28:4.5.2.5
	Kernel-5_35-4_79_2_98_2_27:4.5.2.5
	Kernel-5_35-4_79_2_98_2_26:4.5.2.5
	Kernel-5_35-4_79_2_111:4.5.2.5
	Kernel-5_35-4_79_2_98_2_25:4.5.2.5
	Kernel-5_35-4_79_2_98_2_24:4.5.2.5
	Kernel-5_35-4_79_2_98_2_23:4.5.2.5
	Kernel-5_35-4_79_2_110:4.5.2.5
	Kernel-5_35-4_79_2_98_2_22:4.5.2.5
	Kernel-5_35-4_79_2_109:4.5.2.5
	Kernel-5_35-4_79_2_98_2_21:4.5.2.5
	Kernel-5_35-4_79_2_98_2_20:4.5.2.5
	Kernel-5_35-4_79_2_108:4.5.2.5
	Kernel-5_35-4_79_2_107:4.5.2.5
	Kernel-5_35-4_79_2_98_2_19:4.5.2.5
	Kernel-5_35-4_79_2_98_2_18:4.5.2.5
	Kernel-5_35-4_79_2_98_2_17:4.5.2.5
	Kernel-5_35-4_79_2_98_2_16:4.5.2.5
	Kernel-5_35-4_79_2_98_2_15:4.5.2.5
	Kernel-5_35-4_79_2_106:4.5.2.5
	Kernel-5_35-4_79_2_105:4.5.2.5
	Kernel-5_35-4_79_2_104:4.5.2.5
	Kernel-5_35-4_79_2_98_2_14:4.5.2.5
	Kernel-5_35-4_79_2_98_2_13:4.5.2.5
	Kernel-5_35-4_79_2_98_2_12:4.5.2.5
	Kernel-5_35-4_79_2_98_2_11:4.5.2.5
	Kernel-5_35-4_79_2_98_2_10:4.5.2.5
	Kernel-5_35-4_79_2_98_2_9:4.5.2.5
	Kernel-5_35-4_79_2_103:4.5.2.5
	Kernel-5_35-4_79_2_102:4.5.2.5
	Kernel-5_35-4_79_2_98_2_8:4.5.2.5
	Kernel-5_35-4_79_2_98_2_7:4.5.2.5
	Kernel-5_35-4_79_2_98_2_6:4.5.2.5
	Kernel-5_35-4_79_2_98_2_5:4.5.2.5
	Kernel-5_35-4_79_2_98_2_4:4.5.2.5
	Kernel-5_35-4_79_2_101:4.5.2.5
	Kernel-5_35-4_79_2_100:4.5.2.5
	Kernel-5_35-4_79_2_99:4.5.2.5
	Kernel-5_35-4_79_2_98_2_3:4.5.2.5
	Kernel-5_35-4_79_2_98_2_2:4.5.2.5
	Kernel-5_35-4_79_2_98_2_1:4.5.2.5
	Cortex:4.5.2.5.0.2
	Cortex_bp:4.5.2.5
	Kernel-5_35-4_79_2_98:4.5.2.5
	Kernel-5_35-4_79_2_97:4.5.2.5
	Kernel-5_35-4_79_2_96:4.5.2.5
	Kernel-5_35-4_79_2_95:4.5.2.5
	Kernel-5_35-4_79_2_94:4.5.2.5
	Kernel-5_35-4_79_2_93:4.5.2.5
	Kernel-5_35-4_79_2_92:4.5.2.5
	Kernel-5_35-4_79_2_91:4.5.2.5
	Kernel-5_35-4_79_2_90:4.5.2.5
	Kernel-5_35-4_79_2_89:4.5.2.5
	Kernel-5_35-4_79_2_88:4.5.2.5
	Kernel-5_35-4_79_2_87:4.5.2.5
	Kernel-5_35-4_79_2_86:4.5.2.5
	Kernel-5_35-4_79_2_85:4.5.2.5
	Kernel-5_35-4_79_2_84:4.5.2.5
	Kernel-5_35-4_79_2_83:4.5.2.5
	Kernel-5_35-4_79_2_82:4.5.2.5
	Kernel-5_35-4_79_2_81:4.5.2.5
	Kernel-5_35-4_79_2_80:4.5.2.5
	Kernel-5_35-4_79_2_79:4.5.2.5
	Kernel-5_35-4_79_2_78:4.5.2.5
	Kernel-5_35-4_79_2_77:4.5.2.5
	RO_5_07:4.5.2.5
	Kernel-5_35-4_79_2_76:4.5.2.5
	Kernel-5_35-4_79_2_75:4.5.2.5
	Kernel-5_35-4_79_2_74:4.5.2.5
	Kernel-5_35-4_79_2_73:4.5.2.5
	Kernel-5_35-4_79_2_72:4.5.2.5
	Kernel-5_35-4_79_2_71:4.5.2.5
	Kernel-5_35-4_79_2_70:4.5.2.5
	Kernel-5_35-4_79_2_69:4.5.2.5
	Kernel-5_35-4_79_2_68:4.5.2.5
	Kernel-5_35-4_79_2_67:4.5.2.5
	Kernel-5_35-4_79_2_66:4.5.2.5
	Kernel-5_35-4_79_2_65:4.5.2.5
	Kernel-5_35-4_79_2_64:4.5.2.5
	Kernel-5_35-4_79_2_63:4.5.2.5
	Kernel-5_35-4_79_2_62:4.5.2.5
	Kernel-5_35-4_79_2_61:4.5.2.5
	Kernel-5_35-4_79_2_59:4.5.2.5
	Kernel-5_35-4_79_2_58:4.5.2.5
	Kernel-5_35-4_79_2_57:4.5.2.5
	Kernel-5_35-4_79_2_56:4.5.2.5
	Kernel-5_35-4_79_2_55:4.5.2.5
	Kernel-5_35-4_79_2_54:4.5.2.5
	Kernel-5_35-4_79_2_53:4.5.2.5
	Kernel-5_35-4_79_2_52:4.5.2.5
	Kernel-5_35-4_79_2_51:4.5.2.5
	Kernel-5_35-4_79_2_50:4.5.2.4
	Kernel-5_35-4_79_2_49:4.5.2.4
	Kernel-5_35-4_79_2_48:4.5.2.4
	Kernel-5_47:4.5
	Kernel-5_46-4_90_2_1:4.5
	nbingham_Kernel_FastNC_dev_bp:4.5
	nbingham_Kernel_FastNC_dev:4.5.0.4
	Kernel-5_46:4.5
	Kernel-5_45:4.5
	Kernel-5_35-4_79_2_47:4.5.2.3
	Kernel-5_35-4_79_2_46:4.5.2.3
	Kernel-5_35-4_79_2_45:4.5.2.3
	Kernel-5_35-4_79_2_44:4.5.2.3
	Kernel-5_35-4_79_2_25_2_2:4.5.2.3
	Kernel-5_35-4_79_2_43:4.5.2.3
	Kernel-5_35-4_79_2_42:4.5.2.3
	Kernel-5_35-4_79_2_41:4.5.2.3
	Kernel-5_35-4_79_2_40:4.5.2.3
	Kernel-5_35-4_79_2_39:4.5.2.3
	Kernel-5_35-4_79_2_38:4.5.2.3
	Kernel-5_35-4_79_2_37:4.5.2.3
	Kernel-5_35-4_79_2_36:4.5.2.3
	Kernel-5_35-4_79_2_35:4.5.2.3
	Kernel-5_35-4_79_2_34:4.5.2.3
	Kernel-5_35-4_79_2_33:4.5.2.3
	Kernel-5_35-4_79_2_32:4.5.2.3
	Kernel-5_44:4.5
	Kernel-5_35-4_79_2_25_2_1:4.5.2.3
	Kernel-5_43:4.5
	Kernel-5_35-4_79_2_31:4.5.2.3
	Kernel-5_35-4_79_2_30:4.5.2.3
	Kernel-5_35-4_79_2_29:4.5.2.3
	Kernel-5_35-4_79_2_28:4.5.2.3
	Kernel-5_35-4_79_2_27:4.5.2.3
	Kernel-5_35-4_79_2_26:4.5.2.3
	Kernel-5_42:4.5
	Kernel-5_41:4.5
	Kernel-5_40:4.5
	Kernel-5_35-4_79_2_25:4.5.2.3
	Kernel-5_35-4_79_2_24:4.5.2.3
	Kernel-5_35-4_79_2_23:4.5.2.3
	Kernel-5_35-4_79_2_22:4.5.2.3
	Kernel-5_35-4_79_2_21:4.5.2.3
	Kernel-5_35-4_79_2_20:4.5.2.3
	Kernel-5_35-4_79_2_19:4.5.2.3
	Kernel-5_35-4_79_2_18:4.5.2.2
	Kernel-5_35-4_79_2_17:4.5.2.2
	Kernel-5_35-4_79_2_16:4.5.2.2
	Kernel-5_35-4_79_2_15:4.5.2.2
	Kernel-5_35-4_79_2_14:4.5.2.2
	Kernel-5_39:4.5
	Kernel-5_13-4_52_2_1:4.4
	Bethany:4.4.0.2
	Kernel-5_38:4.5
	Kernel-5_35-4_79_2_13:4.5.2.2
	Kernel-5_35-4_79_2_12:4.5.2.2
	Kernel-5_35-4_79_2_11:4.5.2.2
	Kernel-5_37:4.5
	Kernel-5_35-4_79_2_10:4.5.2.2
	Kernel-5_35-4_79_2_9:4.5.2.2
	Kernel-5_36:4.5
	Kernel-5_35-4_79_2_8:4.5.2.1
	Kernel-5_35-4_79_2_7:4.5.2.1
	Kernel-5_35-4_79_2_6:4.5.2.1
	Kernel-5_35-4_79_2_5:4.5.2.1
	Kernel-5_35-4_79_2_4:4.5.2.1
	Kernel-5_35-4_79_2_3:4.5.2.1
	Kernel-5_35-4_79_2_2:4.5.2.1
	dellis_autobuild_BaseSW:4.5
	Kernel-5_35-4_79_2_1:4.5.2.1
	HAL:4.5.0.2
	Kernel-5_35:4.5
	Kernel-5_34:4.5
	Kernel-5_33:4.5
	Kernel-5_32:4.5
	Kernel-5_31:4.5
	Kernel-5_30:4.5
	Kernel-5_29:4.5
	Kernel-5_28:4.5
	Kernel-5_27:4.5
	Kernel-5_26:4.5
	Kernel-5_25:4.5
	Kernel-5_24:4.5
	Kernel-5_23:4.5
	Kernel-5_22:4.4
	sbrodie_sedwards_16Mar2000:4.4
	Kernel-5_21:4.4
	Kernel-5_20:4.4
	Kernel-5_19:4.4
	Kernel-5_18:4.4
	Kernel-5_17:4.4
	Kernel-5_16:4.4
	Kernel-5_15:4.4
	Kernel-5_14:4.4
	Kernel-5_13:4.4
	Kernel-5_12:4.4
	Kernel-5_11:4.4
	Kernel-5_10:4.4
	Kernel-5_09:4.4
	Kernel-5_08:4.4
	Kernel-5_07:4.4
	Kernel-5_06:4.4
	Kernel-5_05:4.4
	Kernel-5_04:4.4
	Kernel-5_03:4.4
	Kernel-5_02:4.4
	Kernel-5_01:4.4
	Kernel-5_00:4.4
	Kernel-4_99:4.4
	Kernel-4_98:4.4
	Kernel-4_97:4.4
	Kernel-4_96:4.4
	Kernel-4_95:4.4
	Kernel-4_94:4.4
	Kernel-4_93:4.4
	Kernel-4_92:4.4
	Kernel-4_91:4.4
	Kernel-4_90:4.4
	dcotton_autobuild_BaseSW:4.5
	Kernel-4_89:4.4
	Kernel-4_88:4.4
	Kernel-4_87:4.4
	Kernel-4_86:4.4
	Kernel-4_85:4.4
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.2.2.2
	Kernel-4_84:4.4
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.2.2.2
	Ursula_RiscPC_bp:4.2.2.2
	Kernel-4_83:4.4
	Kernel-4_82:4.4
	Kernel-4_81:4.4
	Kernel-4_80:4.4
	Kernel-4_79:4.4
	Kernel-4_78:4.4
	Kernel-4_77:4.4
	Kernel-4_76:4.4
	Kernel-4_75:4.4
	Kernel-4_74:4.4
	Kernel-4_73:4.4
	Kernel-4_72:4.4
	Kernel-4_71:4.4
	Kernel-4_70:4.4
	Kernel-4_69:4.4
	Kernel-4_68:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2.2.2
	Ursula_RiscPC:4.2.2.2.0.2
	Kernel-4_63-1_1_2_5:4.1.7.3
	Kernel-4_63-1_1_2_4:4.1.7.3
	Kernel-4_67:4.4
	Kernel-4_66:4.4
	Kernel-4_63-1_1_2_3:4.1.7.3
	Kernel-4_65:4.4
	Ursula_merge:4.2
	Kernel-4_64:4.4
	mstphens_Kernel-3_81:4.2.2.2
	Kernel-4_63-1_1_2_2:4.1.7.3
	nicke_Kernel_4_62:4.1.7.2
	rthornb_UrsulaBuild-19Aug1998:4.2.2.2
	UrsulaBuild_FinalSoftload:4.2.2.2
	rthornb_UrsulaBuild-12Aug1998:4.2.2.2
	aglover_UrsulaBuild-05Aug1998:4.2.2.2
	rthornb_UrsulaBuild-29Jul1998:4.2.2.2
	rthornb_UrsulaBuild-22Jul1998:4.2.2.2
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.2.2.2
	rthornb_UrsulaBuild-07Jul1998:4.2.2.2
	rthornb_UrsulaBuild-17Jun1998:4.2.2.2
	rthornb_UrsulaBuild-03Jun1998:4.2.2.2
	rthornb_UrsulaBuild-27May1998:4.2.2.2
	mstphens_Kernel-3_80:4.2.2.2
	rthornb_UrsulaBuild-21May1998:4.2.2.2
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.2.2.2
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2016.07.24.10.50.44;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	x4yCuRzf90zVXyfz;

4.6
date	2016.06.30.20.08.09;	author jlee;	state Exp;
branches;
next	4.5;
commitid	IWoXxARWeuLDOwcz;

4.5
date	2000.04.04.14.27.33;	author kbracey;	state Exp;
branches
	4.5.2.1;
next	4.4;

4.4
date	98.09.30.08.42.42;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	98.07.21.15.56.56;	author nturton;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.14.07.18;	author nturton;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.41.25;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.5.2.1
date	2000.09.15.12.38.01;	author kbracey;	state Exp;
branches;
next	4.5.2.2;

4.5.2.2
date	2000.10.09.15.59.16;	author kbracey;	state Exp;
branches;
next	4.5.2.3;

4.5.2.3
date	2001.03.07.15.12.57;	author kbracey;	state Exp;
branches;
next	4.5.2.4;

4.5.2.4
date	2002.10.07.17.29.43;	author kbracey;	state Exp;
branches;
next	4.5.2.5;

4.5.2.5
date	2002.11.30.00.31.10;	author bavison;	state Exp;
branches
	4.5.2.5.2.1;
next	4.5.2.6;

4.5.2.6
date	2011.11.26.21.11.16;	author jlee;	state Exp;
branches;
next	4.5.2.7;
commitid	cI3W0zbtALQG6TIv;

4.5.2.7
date	2011.11.27.12.34.46;	author rsprowson;	state Exp;
branches;
next	4.5.2.8;
commitid	QtdLV6zjuPNxdYIv;

4.5.2.8
date	2011.11.27.19.18.16;	author rsprowson;	state Exp;
branches;
next	;
commitid	iuIXfUOByAFYr0Jv;

4.5.2.5.2.1
date	2011.08.08.23.28.26;	author jlee;	state Exp;
branches;
next	;
commitid	D7rzILnwRRSXoLuv;

4.2.2.1
date	97.09.09.13.33.33;	author mstphens;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	98.03.26.11.26.04;	author mstphens;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.41.25;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.01.05;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.11.44;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.03.56;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	98.07.21.17.57.41;	author nturton;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	98.09.24.12.36.45;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Resolve 2x header clashes
hdr/AHCIDevice:
  Remove this, since it clashes with the (differing API version number) copy exported by SATADriver. Post merging the Kernel back to the trunk the newer file datestamp has meant the wrong one gets exported during any ROM build which includes both components. Since the Kernel doesn't need AHCIDevice itself, it is left to the respective client (SATADriver or AHCIDriver in this case) to export them.
hdr/ModHand:
  Resolve the longstanding clash of Module_Title with the same named symbol that CMHG uses. There are very few assembler needing to look at the module header (Kernel, FileCore, Debugger, Podule) directly, but every C module which uses CMHG and wants one of the ModHandReason values ends up with a duplicate define.
  Obsolete Arthur era Module_LoadAddr value.
ArthurSWIs.s/MoreComms.s/NewReset.s/SWINaming.s/SysComms.s/Utility.s:
  Module_Title->Module_TitleStr.
ModHand.s:
  Module_Title->Module_TitleStr.
  Recode Module_LoadAddr using the file type from Hdr:FileTypes.
GetAlls.s:
  Drop unused NVRAM and PortMan headers. Add Hdr:FileTypes.

Version 5.54. Tagged as 'Kernel-5_54'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        TTL     => SWINaming

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        MACRO
$l      AddSwiNameToDecodeTab   $name
$l      = "$name", 0
SwisInSystemTable SETA SwisInSystemTable+1
        MEND

;***********************************************************************
;
;       SWI OS_SWINumberToString
;
; in:   R0 = SWI number
;       R1 = buffer pointer
;       R2 = buffer length
;
; out:  Buffer holds SWI name, null-terminated
;

SWINumberToString_Code    ROUT
        WritePSRc SVC_mode, r12         ; interrupts on!
        MOV     r12, lr                 ; keep here so subroutines can update flags
        Push    "r3, r9"
        MOV     r9, r0                  ; r0 to pass back
        MOV     r3, r2                  ; buffer limit
        MOV     r2, #0                  ; characters so far

        TST     r0, #Auto_Error_SWI_bit
        MOVNE   r10, #"X"
        BLNE    AddChar
        BIC     r0, r0, #Auto_Error_SWI_bit
        CMP     r0, #512
        BCS     NotASystemSWI           ; TMD 11-May-89: changed from GE

        ADR     r11, OS_Prefix
        BL      AddString
        MOV     r10, #"_"
        BL      AddChar

        CMP     r0, #256
        BCS     Swi_Is_WriteI           ; TMD 11-May-89: changed from GE
        CMP     r0, #NCORESWIS
        BCS     SWINotInTable           ; TMD 11-May-89: changed from GE

        ADR     r11, System_Swi_Names
        BL      GetStringFromTable

AddStringAndExit
        BL      AddString

ExitSwiSwi
        MOV     r10, #0
        BL      AddChar

        MOV     r0, r9                  ; error pointer or restoration
        Pull    "r3, r9"
        MOV     lr, r12
        ExitSWIHandler

                  GBLA SwisInSystemTable
SwisInSystemTable SETA -1

OS_Prefix =    "OS",0

System_Swi_Names
        AddSwiNameToDecodeTab WriteC
        AddSwiNameToDecodeTab WriteS
        AddSwiNameToDecodeTab Write0
        AddSwiNameToDecodeTab NewLine
        AddSwiNameToDecodeTab ReadC
        AddSwiNameToDecodeTab CLI
        AddSwiNameToDecodeTab Byte
        AddSwiNameToDecodeTab Word
        AddSwiNameToDecodeTab File
        AddSwiNameToDecodeTab Args
        AddSwiNameToDecodeTab BGet
        AddSwiNameToDecodeTab BPut
        AddSwiNameToDecodeTab GBPB
        AddSwiNameToDecodeTab Find
        AddSwiNameToDecodeTab ReadLine
        AddSwiNameToDecodeTab Control
        AddSwiNameToDecodeTab GetEnv
        AddSwiNameToDecodeTab Exit
        AddSwiNameToDecodeTab SetEnv
        AddSwiNameToDecodeTab IntOn
        AddSwiNameToDecodeTab IntOff
        AddSwiNameToDecodeTab CallBack
        AddSwiNameToDecodeTab EnterOS
        AddSwiNameToDecodeTab BreakPt
        AddSwiNameToDecodeTab BreakCtrl
        AddSwiNameToDecodeTab UnusedSWI
        AddSwiNameToDecodeTab UpdateMEMC
        AddSwiNameToDecodeTab SetCallBack
        AddSwiNameToDecodeTab Mouse

        AddSwiNameToDecodeTab Heap
        AddSwiNameToDecodeTab Module
        AddSwiNameToDecodeTab Claim
        AddSwiNameToDecodeTab Release
        AddSwiNameToDecodeTab ReadUnsigned
        AddSwiNameToDecodeTab GenerateEvent
        AddSwiNameToDecodeTab ReadVarVal
        AddSwiNameToDecodeTab SetVarVal
        AddSwiNameToDecodeTab GSInit
        AddSwiNameToDecodeTab GSRead
        AddSwiNameToDecodeTab GSTrans
        AddSwiNameToDecodeTab BinaryToDecimal
        AddSwiNameToDecodeTab FSControl
        AddSwiNameToDecodeTab ChangeDynamicArea
        AddSwiNameToDecodeTab GenerateError
        AddSwiNameToDecodeTab ReadEscapeState
        AddSwiNameToDecodeTab EvaluateExpression
        AddSwiNameToDecodeTab SpriteOp
        AddSwiNameToDecodeTab ReadPalette
        AddSwiNameToDecodeTab ServiceCall
        AddSwiNameToDecodeTab ReadVduVariables
        AddSwiNameToDecodeTab ReadPoint
        AddSwiNameToDecodeTab UpCall
        AddSwiNameToDecodeTab CallAVector
        AddSwiNameToDecodeTab ReadModeVariable
        AddSwiNameToDecodeTab RemoveCursors
        AddSwiNameToDecodeTab RestoreCursors
        AddSwiNameToDecodeTab SWINumberToString
        AddSwiNameToDecodeTab SWINumberFromString
        AddSwiNameToDecodeTab ValidateAddress
        AddSwiNameToDecodeTab CallAfter
        AddSwiNameToDecodeTab CallEvery
        AddSwiNameToDecodeTab RemoveTickerEvent
        AddSwiNameToDecodeTab InstallKeyHandler
        AddSwiNameToDecodeTab CheckModeValid
        AddSwiNameToDecodeTab ChangeEnvironment
        AddSwiNameToDecodeTab ClaimScreenMemory
        AddSwiNameToDecodeTab ReadMonotonicTime
        AddSwiNameToDecodeTab SubstituteArgs
        AddSwiNameToDecodeTab PrettyPrint
        AddSwiNameToDecodeTab Plot
        AddSwiNameToDecodeTab WriteN
        AddSwiNameToDecodeTab AddToVector
        AddSwiNameToDecodeTab WriteEnv
        AddSwiNameToDecodeTab ReadArgs
        AddSwiNameToDecodeTab ReadRAMFsLimits
        AddSwiNameToDecodeTab ClaimDeviceVector
        AddSwiNameToDecodeTab ReleaseDeviceVector
        AddSwiNameToDecodeTab DelinkApplication
        AddSwiNameToDecodeTab RelinkApplication
        AddSwiNameToDecodeTab HeapSort
        AddSwiNameToDecodeTab ExitAndDie
        AddSwiNameToDecodeTab ReadMemMapInfo
        AddSwiNameToDecodeTab ReadMemMapEntries
        AddSwiNameToDecodeTab SetMemMapEntries
        AddSwiNameToDecodeTab AddCallBack
        AddSwiNameToDecodeTab ReadDefaultHandler
        AddSwiNameToDecodeTab SetECFOrigin
        AddSwiNameToDecodeTab SerialOp
        AddSwiNameToDecodeTab ReadSysInfo
        AddSwiNameToDecodeTab Confirm
        AddSwiNameToDecodeTab ChangedBox
        AddSwiNameToDecodeTab CRC
        AddSwiNameToDecodeTab ReadDynamicArea
        AddSwiNameToDecodeTab PrintChar
        AddSwiNameToDecodeTab ChangeRedirection
        AddSwiNameToDecodeTab RemoveCallBack
        AddSwiNameToDecodeTab FindMemMapEntries
        AddSwiNameToDecodeTab SetColour
        AddSwiNameToDecodeTab ClaimSWI          ; These two are not actually
        AddSwiNameToDecodeTab ReleaseSWI        ; kernel SWIs.
        AddSwiNameToDecodeTab Pointer
        AddSwiNameToDecodeTab ScreenMode
        AddSwiNameToDecodeTab DynamicArea
        AddSwiNameToDecodeTab AbortTrap
        AddSwiNameToDecodeTab Memory
        AddSwiNameToDecodeTab ClaimProcessorVector
        AddSwiNameToDecodeTab Reset
        AddSwiNameToDecodeTab MMUControl
        AddSwiNameToDecodeTab ResyncTime
        AddSwiNameToDecodeTab PlatformFeatures
        AddSwiNameToDecodeTab SynchroniseCodeAreas
        AddSwiNameToDecodeTab CallASWI
        AddSwiNameToDecodeTab AMBControl
        AddSwiNameToDecodeTab CallASWIR12
        AddSwiNameToDecodeTab SpecialControl
        AddSwiNameToDecodeTab EnterUSR32
        AddSwiNameToDecodeTab EnterUSR26
        AddSwiNameToDecodeTab VIDCDivider
        AddSwiNameToDecodeTab NVMemory
        AddSwiNameToDecodeTab ClaimOSSWI
        AddSwiNameToDecodeTab TaskControl
        AddSwiNameToDecodeTab DeviceDriver
        AddSwiNameToDecodeTab Hardware
        AddSwiNameToDecodeTab IICOp
        AddSwiNameToDecodeTab LeaveOS
        AddSwiNameToDecodeTab ReadLine32
        AddSwiNameToDecodeTab SubstituteArgs32
        AddSwiNameToDecodeTab HeapSort32
        = 0

 [ SwisInSystemTable+1 <> NCORESWIS
 ! 1, :CHR:10:CC::CHR:13:CC::CHR:7:CC::CHR:7:CC:"Swi Disassembly table not consistent with despatch table":CC::CHR:10:CC::CHR:13
 ]

convswitab = "OS",0

Conversion_Swi_Names
        AddSwiNameToDecodeTab  ConvertHex1
        AddSwiNameToDecodeTab  ConvertHex2
        AddSwiNameToDecodeTab  ConvertHex4
        AddSwiNameToDecodeTab  ConvertHex6
        AddSwiNameToDecodeTab  ConvertHex8
        AddSwiNameToDecodeTab  ConvertCardinal1
        AddSwiNameToDecodeTab  ConvertCardinal2
        AddSwiNameToDecodeTab  ConvertCardinal3
        AddSwiNameToDecodeTab  ConvertCardinal4
        AddSwiNameToDecodeTab  ConvertInteger1
        AddSwiNameToDecodeTab  ConvertInteger2
        AddSwiNameToDecodeTab  ConvertInteger3
        AddSwiNameToDecodeTab  ConvertInteger4
        AddSwiNameToDecodeTab  ConvertBinary1
        AddSwiNameToDecodeTab  ConvertBinary2
        AddSwiNameToDecodeTab  ConvertBinary3
        AddSwiNameToDecodeTab  ConvertBinary4
        AddSwiNameToDecodeTab  ConvertSpacedCardinal1
        AddSwiNameToDecodeTab  ConvertSpacedCardinal2
        AddSwiNameToDecodeTab  ConvertSpacedCardinal3
        AddSwiNameToDecodeTab  ConvertSpacedCardinal4
        AddSwiNameToDecodeTab  ConvertSpacedInteger1
        AddSwiNameToDecodeTab  ConvertSpacedInteger2
        AddSwiNameToDecodeTab  ConvertSpacedInteger3
        AddSwiNameToDecodeTab  ConvertSpacedInteger4
        AddSwiNameToDecodeTab  ConvertFixedNetStation
        AddSwiNameToDecodeTab  ConvertNetStation
        AddSwiNameToDecodeTab  ConvertFixedFileSize
        AddSwiNameToDecodeTab  ConvertFileSize
        AddSwiNameToDecodeTab  ConvertVariform
        =  0
        ALIGN


SWINotInTable
        SUB     r11, r0, #OS_ConvertHex1
        CMP     r11, #OS_ConvertVariform - OS_ConvertHex1
        BHI     %FT10

        MOV     r0, r11
        addr    r11, Conversion_Swi_Names
        BL      GetStringFromTable
        B       AddStringAndExit

10
        ADR     r11, %FT01
        CMP     r0, #OS_ConvertStandardDateAndTime
        ADREQ   r11, %FT05
        CMP     r0, #OS_ConvertDateAndTime
        ADREQ   r11, %FT06
        B       AddStringAndExit
01
        =       "Undefined", 0

othersysswitab
        =       "OS", 0
05
        =       "ConvertStandardDateAndTime", 0
06
        =       "ConvertDateAndTime", 0
        =       0

02
        =       "User", 0

andfiddleaboutwithWriteI
        =       "OS", 0
        =       "WriteI", 0
        =       0
03
        =       "WriteI+", 0

        ALIGN

NotASystemSWI
        Push    "r9, r12"
        BIC     r10, r0, #Module_SWIChunkSize-1
        ModSWIHashvalOffset r9, r10
      [ ZeroPage = 0
        LDR     r9, [r9, #ModuleSWI_HashTab]
      |
        LDR     r12, =ZeroPage+ModuleSWI_HashTab
        LDR     r9, [r9, r12]
      ]
lohc
        CMP     r9, #0
        BEQ     giveemaboringname
        LDR     r12, [r9, #ModSWINode_Number]
        CMP     r10, r12
        LDRNE   r9, [r9, #ModSWINode_Link]
        BNE     lohc

        LDR     r12, [r9, #ModSWINode_MListNode]
        LDR     r9, [r12, #Module_code_pointer]
        LDR     r10, [r9, #Module_NameTable]
        LDR     r14, [r9, #-4]                          ; get module size
        CMP     r10, #1                                 ; must be non-zero
        CMPCS   r14, r10                                ; and must be within code
        BLS     trymodule_SWIdecode_code
        ADD     r11, r10, r9
        Pull    "r9, r12"
        BL      AddString
        MOV     r10, #"_"
        BL      AddChar
        AND     r0, r0, #Module_SWIChunkSize-1
        Push    "r0"
        BL      GetStringFromTable
        Pull    "r0"
        BVC     AddStringAndExit
        B       AddNumericBit                           ; not in table

trymodule_SWIdecode_code
        LDR     r10, [r9, #Module_NameCode]
        TST     r10, #12,2                              ; test bottom 2 bits and clear carry
        CMPEQ   r10, #1                                 ; must be non-zero
        CMPCS   r14, r10                                ; and must be within code
        BLS     usethemoduletitle

; got r0 is SWI number, r1 buffer pointer, r2 is buffer offset to use
; r3 is buffer limit
        CMP     r2, r3
        BGE     dont_confuse_the_poor_dears
        Push    "r4-r6"
        AND     r0, r0, #Module_SWIChunkSize - 1
        LDR     r12, [r12, #Module_incarnation_list]
        ADDS    r12, r12, #Incarnation_Workspace        ; force V clear
        MOV     lr, pc
        ADD     pc, r9, r10
        Pull    "r4-r6, r9, r12"
        BVC     ExitSwiSwi

dont_confuse_the_poor_dears
      [ International
        Push    "r0"
        ADRL    r0, BufferOFloError
        BL      TranslateError
        MOV     r9,r0
        Pull    "r0"
      |
        ADRL    r9, BufferOFloError
      ]
        ORR     r12, r12, #V_bit
        B       ExitSwiSwi

usethemoduletitle
        LDR     r10, [r9, #Module_TitleStr]
        ADD     r11, r10, r9
        Pull    "r9, r12"
        BL      AddString
        MOV     r10, #"_"
        BL      AddChar
        AND     r0, r0, #Module_SWIChunkSize-1
        B       AddNumericBit

giveemaboringname                       ; not found anywhere interesting
        Pull    "r9, r12"
        ADR     r11, %BT02
        B       AddStringAndExit

Swi_Is_WriteI
        ADR     r11, %BT03
        BL      AddString

        AND     r0, r0, #255
        CMP     r0, #32
        BLT     AddNumericBit
        CMP     r0, #127
        BCS     AddNumericBit
        MOV     r10, #""""
        BL      AddChar
        MOV     r10, r0
        BL      AddChar
        MOV     r10, #""""
        BL      AddChar
        B       ExitSwiSwi

AddNumericBit
        Push    "r1, r2"
        ADD     r1, r1, r2              ; point at remaining buffer
        SUB     r2, r3, r2              ; buffer left
        SWI     XOS_BinaryToDecimal
        ORRVS   r12, r12, #V_bit
        MOVVS   r9, r0
        MOV     r0, r2
        Pull    "r1, r2"
        ADD     r2, r2, r0              ; adjust chars given
        B       ExitSwiSwi

; AddChar
;
; in:   R1 = buffer pointer
;       R2 = buffer position
;       R3 = buffer size
;       R10 = character
;
; out:  If overflow, V_bit set in R12, and R9 -> error
;       PSR preserved

AddChar ROUT
        EntryS
        CMP     r2, r3
        BGE     %FT01
        STRB    r10, [r1, r2]
        ADD     r2, r2, #1
        EXITS

01
      [ International
        Push    "r0,lr"
        ADRL    r0, BufferOFloError
        BL      TranslateError
        MOV     r9,r0
        Pull    "r0,lr"
      |
        ADRL    r9, BufferOFloError
      ]
        EXITVS

; AddString
;
; in:   R11 points at string to add
;
; out:  R10, R11 corrupted

AddString Entry
01
        LDRB    r10, [r11], #1
        CMP     r10, #0
        BLNE    AddChar
        BNE     %BT01
        EXIT

; GetStringFromTable
;
; in:   R0 is table offset
;       R11 points at first SWI name in table
;
; out:  R11 -> string or V set if not in table
;       R0, R10 corrupted

GetStringFromTable ROUT
        LDRB    r10, [r11]
        CMP     r10, #0
        BEQ     %FT02                   ; end of table
        SUBS    r0, r0, #1
        BPL     %FT01
        CLRV
        MOV     pc, lr
01
        LDRB    r10, [r11], #1
        CMP     r10, #0
        BNE     %BT01
        B       GetStringFromTable
02
        SETV
        MOV     pc, lr

;***********************************************************************

; R1 pointer to name terminated by char <= " "
; return R0 as SWI number

SWINumberFromString_Code Entry "r1,r2"

        WritePSRc SVC_mode, r10                 ; enable interrupts
        LDRB    R10, [R1]
        CMP     R10, #"X"
        MOVEQ   R0, #Auto_Error_SWI_bit
        ADDEQ   R1, R1, #1
        MOVNE   R0, #0

        MOV     r10, #0                         ; indicate doing OS SWIs, so disallow OS_<number>
        ADRL    r11, OS_Prefix                  ; point at system table
        BL      LookForSwiName
        BVC     GotTheSWIName

        BIC     r0, r0, #255
        ADRL    r11, othersysswitab
        BL      LookForSwiName
        ORRVC   r0, r0, #OS_ConvertStandardDateAndTime
        BVC     GotTheSWIName

        BIC     r0, r0, #255
        ADRL    r11, convswitab
        BL      LookForSwiName
        ADDVC   r0, r0, #OS_ConvertHex1
        BVC     GotTheSWIName

        BIC     r0, r0, #255
        ADRL    r11, andfiddleaboutwithWriteI
        BL      LookForSwiName
        ORRVC   r0, r0, #OS_WriteI
        BVC     GotTheSWIName

        LDR     r12, =ZeroPage+Module_List
10
        LDR     r12, [r12]
        CMP     r12, #0
        BEQ     this_swi_nexiste_pas
        LDR     r10, [r12, #Module_code_pointer]
        LDR     r11, [r10, #Module_SWIChunk]            ; first validate swi chunk
        BICS    r11, r11, #Auto_Error_SWI_bit
        BEQ     %BT10                                   ; SWI chunk zero not allowed
        TST     r11, #Module_SWIChunkSize-1
        TSTEQ   r11, #&FF000000
        BNE     %BT10                                   ; invalid SWI chunk

        LDR     r2, [r10, #-4]
        LDR     r11, [r10, #Module_SWIEntry]
        TST     r11, #12,2                              ; test bottom 2 bits and clear carry
        CMPEQ   r11, #1                                 ; must be non-zero
        CMPCS   r2, r11                                 ; and must be within code
        BLS     %BT10

        LDR     r11, [r10, #Module_NameTable]
        CMP     r11, #1                                 ; must be non-zero
        CMPCS   r2, r11                                 ; and must be within code
        BLS     %FT20                                   ; if no name table, try name code

        ADD     r11, r10, r11
        BIC     r0, r0, #Module_SWIChunkSize-1
        BL      LookForSwiName
        BVS     %FT20
gotmodulejobbie
        LDR     r11, [r10, #Module_SWIChunk]
        BIC     r11, r11, #Auto_Error_SWI_bit
        ORR     r0, r0, r11
        B       GotTheSWIName

; call module code if it exists

20
        LDR     r11, [r10, #Module_NameCode]
        TST     r11, #12,2                              ; test bottom 2 bits and clear carry
        CMPEQ   r11, #1                                 ; must be non-zero
        CMPCS   r2, r11                                 ; and must be within code
        BLS     %FT30                                   ; try <module-title>_<numeric>

; got R1 string pointer

        Push    "r0-r6, r12"
        MOV     r0, #-1                                 ; indicate string being given
        LDR     r12, [r12, #Module_incarnation_list]
        ADDS    r12, r12, #Incarnation_Workspace        ; force V clear
        MOV     lr, pc
        ADD     pc, r11, r10
        ADDS    r2, r0, #0                              ; NB clears V for SWI return
        Pull    "r0"
        ADDPL   r0, r0, r2
        Pull    "r1-r6, r12"
        BPL     gotmodulejobbie

; check against module title

30
        LDR     r11, [r10, #Module_TitleStr]
        ADD     r11, r10, r11
        Push    r10
        MOV     r10, #1                                 ; indicate only check for prefix_numeric
        BL      LookForSwiName
        Pull    r10
        BVS     %BT10
        B       gotmodulejobbie

this_swi_nexiste_pas
        SETV
GotTheSWIName
        PullEnv
        ADRVS   r0, ErrorBlock_NoSuchSWI2
      [ International
        Push    "lr",VS
        BLVS    TranslateError
        Pull    "lr",VS
      ]
        B       SLVK_TestV

        MakeErrorBlock NoSuchSWI2


LookForSwiName ROUT
; R11 points at name table
; R1 points at name
; R10 = 0 => allow only prefix_name (for OS_SWI)
; R10 = 1 => allow only prefix_numeric (for checking moduletitle_numeric)
;       otherwise => allow prefix_name or prefix_numeric
; return R0 ORed with number if found
; V set if not

        Entry   "r8,r9, r12"
        MOV     r12, #0                                 ; offset in name

; first check that prefix matches
10
        LDRB    r14, [r1, r12]
        CMP     r14, #" "                               ; if we terminate before we get an "_", then fail
        BLE     %FT50
        ADD     r12, r12, #1
        LDRB    r9, [r11], #1
        CMP     r9, r14
        BEQ     %BT10

        CMP     r14, #"_"                               ; check correct terminators
        CMPEQ   r9,  #0
        BNE     %FT50

; prefix OK: scan table for rest of name

        TEQ     r10, #1                                 ; if doing modulename_numeric
        BEQ     CheckForNumericPostFix                  ; don't look for any names
        MOV     r8, r12                                 ; keep pointer to after prefix
20
        LDRB    r14, [r11], #1
        CMP     r14, #0
        BEQ     CheckForNumericPostFix
30
        LDRB    r9, [r1, r12]
        ADD     r12, r12, #1
        CMP     r14, #0
        CMPEQ   r9, #" "
        BGT     %FT35
        CLRV
        EXIT

35
        CMP     r9, r14
        LDREQB  r14, [r11], #1
        BEQ     %BT30

        MOV     r12, r8                                 ; restore name pointer
        ADD     r0, r0, #1                              ; step SWI number
40
        CMP     r14, #0                                 ; find end of failed name
        LDRNEB  r14, [r11], #1
        BNE     %BT40
        B       %BT20
50
        SETV
        EXIT

CheckForNumericPostFix
; [R1, R12] points at postfix
        Push    "r0-r2"
        ADD     r1, r1, r12
        CMP     r10, #0                                 ; if OS SWI then EQ,VC else NE,VC
        SETV    EQ                                      ; if OS SWI then VS else VC
        MOVVC   r0, #10 + (1 :SHL: 29)
        MOVVC   r2, #Module_SWIChunkSize -1
        SWIVC   XOS_ReadUnsigned
        Pull    "r0"
        BIC     r0, r0, #Module_SWIChunkSize -1
        ADDVC   r0, r0, r2
        Pull    "r1, r2, r8,r9, r12, pc"

        END
@


4.6
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@d365 1
a365 1
        LDR     r10, [r9, #Module_Title]
d575 1
a575 1
        LDR     r11, [r10, #Module_Title]
@


4.5
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d58 1
a58 1
        CMP     r0, #MaxSwi
d202 9
d213 1
a213 1
 [ SwisInSystemTable+1 <> MaxSwi
d249 1
d256 1
a256 1
        CMP     r11, #OS_ConvertFileSize - OS_ConvertHex1
d298 1
d300 4
d444 1
a444 1
AddString ENTRY
d482 1
a482 1
SWINumberFromString_Code ENTRY "r1,r2"
d514 1
a514 1
        MOV     r12, #Module_List
@


4.5.2.1
log
@* Converted to building with ObjAsm (but still a single object file using ORG).
* Added ARM_IMB and ARM_IMBRange SWIs as recommended by ARMv5.
* Some early prototype HAL bits popped in - a lot of source restructuring still
  to come.
* New debug target creates an AIF image with debug information, and translates
  this into an ASCII object file for the 16702B logic analyser.

Version 5.35, 4.79.2.1. Tagged as 'Kernel-5_35-4_79_2_1'
@
text
@d429 1
a429 1
AddString Entry
d467 1
a467 1
SWINumberFromString_Code Entry "r1,r2"
@


4.5.2.2
log
@More L7200 HAL work
@
text
@a201 4
        AddSwiNameToDecodeTab ClaimOSSWI
        AddSwiNameToDecodeTab TaskControl
        AddSwiNameToDecodeTab DeviceDriver
        AddSwiNameToDecodeTab Hardware
@


4.5.2.3
log
@Customer L-y HAL-y IIC-y type stuff. It's great.
@
text
@a205 1
        AddSwiNameToDecodeTab IICOp
@


4.5.2.4
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@a206 4
        AddSwiNameToDecodeTab LeaveOS
        AddSwiNameToDecodeTab ReadLine32
        AddSwiNameToDecodeTab SubstituteArgs32
        AddSwiNameToDecodeTab HeapSort32
@


4.5.2.5
log
@  Commit of kernel as featured in release 5.00.
Detail:
  Lots of changes since last version, at least the following:
  * Updated OS timestamp, removed alpha status
  * Negative INKEY OS version changed to &AA
  * GraphicsV is now alocated vector number &2A
  * ROM moved up to &FC000000
  * Max application slot increased to 512 Mbytes (for now)
  * Max size of RMA increased to 256 Mbytes
  * RMA is now first-created dynamic area (so it gets lowest address after
    top of application slot)
  * OS_Memory 10 reimplemeted
  * New OS_ReadSysInfo 6 values 18-22 added
  * OS_ReadSysInfo 8 gains flag bit to indicate soft power-off
  * Misc internal top-bit-set-address fixes
  * *ChangeDynamicArea can take sizes in megabytes or gigabytes
  * Magic word "&off" in R0 passed to OS_Reset powers down if possible
  * Added acceleration: block copy; CLS; text window scroll up; rectangle
    fill
  * Disabled LED flashing in page mode (liable to crash)
  * Masked sprite plot and VDU 5 text avoids reading the screen if possible
  * Framestore made USR mode accessible
  * Fix for VDU 5,127 bug - now relies on font definitions being in extreme
    quarters of memory, rather than bottom half
  * Allocated 64-bit OS_Convert... SWIs
  * IIC errors use allocated error numbers
  * Looks for Dallas RTC before Philips RTC because we're using a Philips
    NVRAM device with the same ID
  * Fix to bug that meant the oscillator in the Dallas RTC wasn't enabled
  * Default mouse type (USB) changed to allocated number
  * Ram disc max size increased to 128 Mbytes (Ursula merge) and made
    cacheable for StrongARMs (not XScale)
  * Branch through zero handler now works in USR mode, by use of a
    trampoline in the system stack to allow PC-relative register storage
  * Address exception handler changed to not use 0 as workspace
  * OS_Memory 13 extended to allow specification of cacheability and access
    privileges
  * Added OS_Memory 16 to return important memory addresses
  * RISCOS_MapInIO() takes cacheable flag in bit 3, access permissions in
    bits 10 and 11, doubly-mapped flag in bit 20, and access permissions
    specified flag in bit 21
  * Bug fix in last version for application abort handlers didn't quite
    work; register shuffle required
  * "Module is not 32-bit compatible" error now reports the module name
  * Default configured language changed from 10 to 11 (now Desktop again)

Version 5.35, 4.79.2.51. Tagged as 'Kernel-5_35-4_79_2_51'
@
text
@a248 8
        AddSwiNameToDecodeTab  ConvertHex16
        AddSwiNameToDecodeTab  ConvertCardinal8
        AddSwiNameToDecodeTab  ConvertInteger8
        AddSwiNameToDecodeTab  ConvertBinary8
        AddSwiNameToDecodeTab  ConvertSpacedCardinal8
        AddSwiNameToDecodeTab  ConvertSpacedInteger8
        AddSwiNameToDecodeTab  ConvertFixedFileSize64
        AddSwiNameToDecodeTab  ConvertFileSize64
@


4.5.2.6
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@a304 1
      [ ZeroPage = 0
a305 4
      |
        LDR     r12, =ZeroPage+ModuleSWI_HashTab
        LDR     r9, [r9, r12]
      ]
d516 1
a516 1
        LDR     r12, =ZeroPage+Module_List
@


4.5.2.7
log
@Conversions rationalisation.
Delete pmf/convdate, moved to conversions.
Moved OS_BinaryToDecimal to conversions.
Remove OS_ConvertHex16 and friends.
Add OS_ConvertVariform skeleton.
Tidied conversions.

Version 5.35, 4.79.2.125. Tagged as 'Kernel-5_35-4_79_2_125'
@
text
@d249 8
a256 1
        AddSwiNameToDecodeTab  ConvertVariform
d263 1
a263 1
        CMP     r11, #OS_ConvertVariform - OS_ConvertHex1
@


4.5.2.8
log
@Rationalise some old switches.
Export less in hdr:RISCOS.
Delete unused GetDecimalPair routine.
Move CheckYear with other RTC stuff out of PMF/osword.
Hide DebugROMInit and DebugROMErrors in release (even numbered) versions.

Version 5.35, 4.79.2.127. Tagged as 'Kernel-5_35-4_79_2_127'
@
text
@d58 1
a58 1
        CMP     r0, #NCORESWIS
d213 1
a213 1
 [ SwisInSystemTable+1 <> NCORESWIS
@


4.5.2.5.2.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@a304 1
      [ ZeroPage = 0
a305 4
      |
        LDR     r12, =ZeroPage+ModuleSWI_HashTab
        LDR     r9, [r9, r12]
      ]
d516 1
a516 1
        LDR     r12, =ZeroPage+Module_List
@


4.4
log
@Spinner branch merged.
Bandwidth limit for 7500FE fixed.
RO371Timings flag set to :LNOT:STB

Version 4.64. Tagged as 'Kernel-4_64'
@
text
@d37 1
a37 1
        TEQP    pc, #SVC_mode           ; interrupts on!
d404 1
d409 1
a409 1
        MOVS    pc, lr
d421 1
a421 2
        ORR     r12, r12, #V_bit
        MOVS    pc, lr
d448 1
a448 1
        ORREQS  pc, lr, #V_bit           ; end of table
d450 3
a452 1
        BICMIS  pc, lr, #V_bit
d458 3
d469 1
a469 1
        TEQP    pc, #SVC_mode                   ; enable interrupts
d593 1
a593 1
        Push    "r8,r9, r12, lr"
d624 3
a626 2
        Pull    "r8,r9, r12, lr", LE
        BICLES  pc, lr, #V_bit
d628 1
a639 1

d641 2
a642 2
        Pull    "r8,r9, r12, lr"                        ; restore registers
        ORRS    pc, lr, #V_bit                          ; and exit V set
@


4.3
log
@Added a VDU variable, and 4 SWIs (3 from Ursula, 1 from Spinner)
@
text
@d201 1
@


4.2
log
@Kernel merged
@
text
@d197 4
@


4.2.2.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d332 1
d338 3
d406 1
d412 3
d564 1
d568 1
@


4.2.2.2
log
@added support for Sparse dynamic areas
fixed performance disaster caused by naff API for Shrinkable areas
implemented clamps for dynamic areas max size
configured kernel to not own or create RAMFS area (needs new RAMFS)
AMBControl now uses system heap for space, not RMA
AMBControl enables Lazy task swapping if running on rev T or better SA
kernel now assumes there could be code above 64M
SWIS for limited 32 bit user code support implemented
Long command lines implemented (1k instead of 256)
Fast service call distribution implemented (uses Ursula module format)
*fx,*key etc now allow missing space before first parameter
*configure is reinstated (bug fix)
@
text
@a196 3
        AddSwiNameToDecodeTab SpecialControl
        AddSwiNameToDecodeTab EnterUSR32
        AddSwiNameToDecodeTab EnterUSR26
@


4.1
log
@Initial revision
@
text
@d191 6
d317 1
a317 1
        
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Added SWI OS_VIDCDivider, and vdu variable PixelRate for better video mode
support.  Fixed to build for Risc PC.
@
text
@a190 10
        AddSwiNameToDecodeTab ResyncTime
        AddSwiNameToDecodeTab PlatformFeatures
        AddSwiNameToDecodeTab SynchroniseCodeAreas
        AddSwiNameToDecodeTab CallASWI
        AddSwiNameToDecodeTab AMBControl
        AddSwiNameToDecodeTab CallASWIR12
        AddSwiNameToDecodeTab SpecialControl
        AddSwiNameToDecodeTab EnterUSR32
        AddSwiNameToDecodeTab EnterUSR26
        AddSwiNameToDecodeTab VIDCDivider
@


4.1.7.3
log
@Support added for 24LC128 16K EEPROM device.
OS_NVMemory SWI added to allow block operations on non-volatile memory.
Kernel can clock memory device at 400kHz for greater throughput.
Safeguards added to stop the device being accessed when the clock is changed
and the device doesn't have an RTC.
Changed to use srccommit.

Version 4.63, 1.1.2.2. Tagged as 'Kernel-4_63-1_1_2_2'
@
text
@a200 1
        AddSwiNameToDecodeTab NVMemory
d321 1
a321 1

@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a190 8
        AddSwiNameToDecodeTab ResyncTime
 [ StrongARM
        AddSwiNameToDecodeTab PlatformFeatures
        AddSwiNameToDecodeTab SynchroniseCodeAreas
        AddSwiNameToDecodeTab CallASWI
        AddSwiNameToDecodeTab AMBControl
        AddSwiNameToDecodeTab CallASWIR12
 ]
d311 1
a311 1

@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
