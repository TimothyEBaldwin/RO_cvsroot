head	4.4;
access;
symbols
	Kernel-6_14:4.4
	Kernel-6_01-3:4.4
	Kernel-6_13:4.4
	Kernel-6_12:4.4
	Kernel-6_11:4.4
	Kernel-6_10:4.4
	Kernel-6_09:4.4
	Kernel-6_08-4_129_2_10:4.4
	Kernel-6_08-4_129_2_9:4.4
	Kernel-6_08:4.4
	Kernel-6_07:4.4
	Kernel-6_06:4.4
	Kernel-6_05-4_129_2_8:4.4
	Kernel-6_05:4.4
	Kernel-6_04:4.4
	Kernel-6_03:4.4
	Kernel-6_01-2:4.4
	Kernel-6_01-4_146_2_1:4.4
	Kernel-6_02:4.4
	Kernel-6_01-1:4.4
	Kernel-6_01:4.4
	Kernel-6_00:4.4
	Kernel-5_99:4.4
	Kernel-5_98:4.4
	Kernel-5_97-4_129_2_7:4.4
	Kernel-5_97:4.4
	Kernel-5_96:4.4
	Kernel-5_95:4.4
	Kernel-5_94:4.4
	Kernel-5_93:4.4
	Kernel-5_92:4.4
	Kernel-5_91:4.4
	Kernel-5_90:4.4
	Kernel-5_89-4_129_2_6:4.4
	Kernel-5_89:4.4
	Kernel-5_88-4_129_2_5:4.4
	Kernel-5_88-4_129_2_4:4.4
	Kernel-5_88:4.4
	Kernel-5_87:4.4
	Kernel-5_86-4_129_2_3:4.4
	Kernel-5_86-4_129_2_2:4.4
	Kernel-5_86-4_129_2_1:4.4
	Kernel-5_86:4.4
	SMP:4.4.0.2
	SMP_bp:4.4
	Kernel-5_85:4.4
	Kernel-5_54-1:4.3
	Kernel-5_84:4.4
	Kernel-5_83:4.4
	Kernel-5_82:4.4
	Kernel-5_81:4.4
	Kernel-5_80:4.4
	Kernel-5_79:4.4
	Kernel-5_78:4.4
	Kernel-5_77:4.4
	Kernel-5_76:4.4
	Kernel-5_75:4.4
	Kernel-5_74:4.4
	Kernel-5_73:4.4
	Kernel-5_72:4.4
	Kernel-5_71:4.4
	Kernel-5_70:4.4
	Kernel-5_69:4.4
	Kernel-5_68:4.4
	Kernel-5_67:4.4
	Kernel-5_66:4.4
	Kernel-5_65:4.3
	Kernel-5_64:4.3
	Kernel-5_63:4.3
	Kernel-5_62:4.3
	Kernel-5_61:4.3
	Kernel-5_60:4.3
	Kernel-5_59:4.3
	Kernel-5_58:4.3
	Kernel-5_57:4.3
	Kernel-5_56:4.3
	Kernel-5_55:4.3
	Kernel-5_54:4.3
	Kernel-5_53:4.3
	Kernel-5_52:4.3
	Kernel-5_51:4.3
	Kernel-5_50:4.3
	Kernel-5_49:4.3
	HAL_merge:4.2.2.3
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.2.2.3
	Kernel-5_35-4_79_2_326:4.2.2.3
	Kernel-5_35-4_79_2_325:4.2.2.3
	Kernel-5_35-4_79_2_324:4.2.2.3
	Kernel-5_35-4_79_2_323:4.2.2.3
	Kernel-5_35-4_79_2_322:4.2.2.3
	Kernel-5_35-4_79_2_321:4.2.2.3
	Kernel-5_35-4_79_2_320:4.2.2.3
	Kernel-5_35-4_79_2_319:4.2.2.3
	Kernel-5_35-4_79_2_318:4.2.2.3
	Kernel-5_35-4_79_2_317:4.2.2.3
	Kernel-5_35-4_79_2_316:4.2.2.3
	Kernel-5_35-4_79_2_315:4.2.2.3
	Kernel-5_35-4_79_2_314:4.2.2.3
	Kernel-5_35-4_79_2_313:4.2.2.3
	Kernel-5_35-4_79_2_312:4.2.2.3
	Kernel-5_35-4_79_2_311:4.2.2.3
	Kernel-5_35-4_79_2_310:4.2.2.3
	Kernel-5_35-4_79_2_309:4.2.2.3
	Kernel-5_35-4_79_2_308:4.2.2.3
	Kernel-5_35-4_79_2_307:4.2.2.3
	Kernel-5_35-4_79_2_306:4.2.2.3
	Kernel-5_35-4_79_2_305:4.2.2.3
	Kernel-5_35-4_79_2_304:4.2.2.3
	Kernel-5_35-4_79_2_303:4.2.2.3
	Kernel-5_35-4_79_2_302:4.2.2.3
	Kernel-5_35-4_79_2_301:4.2.2.3
	Kernel-5_35-4_79_2_300:4.2.2.3
	Kernel-5_35-4_79_2_299:4.2.2.3
	Kernel-5_35-4_79_2_298:4.2.2.3
	Kernel-5_35-4_79_2_297:4.2.2.3
	Kernel-5_35-4_79_2_296:4.2.2.3
	Kernel-5_35-4_79_2_295:4.2.2.3
	Kernel-5_35-4_79_2_294:4.2.2.3
	Kernel-5_35-4_79_2_293:4.2.2.3
	Kernel-5_35-4_79_2_292:4.2.2.3
	Kernel-5_35-4_79_2_291:4.2.2.3
	Kernel-5_35-4_79_2_290:4.2.2.3
	Kernel-5_35-4_79_2_289:4.2.2.3
	Kernel-5_35-4_79_2_288:4.2.2.3
	Kernel-5_35-4_79_2_287:4.2.2.3
	Kernel-5_35-4_79_2_286:4.2.2.3
	Kernel-5_35-4_79_2_285:4.2.2.3
	Kernel-5_35-4_79_2_284:4.2.2.3
	Kernel-5_35-4_79_2_283:4.2.2.3
	Kernel-5_35-4_79_2_282:4.2.2.3
	Kernel-5_35-4_79_2_281:4.2.2.3
	Kernel-5_35-4_79_2_280:4.2.2.3
	Kernel-5_35-4_79_2_279:4.2.2.3
	Kernel-5_35-4_79_2_278:4.2.2.3
	Kernel-5_35-4_79_2_277:4.2.2.3
	Kernel-5_35-4_79_2_276:4.2.2.3
	Kernel-5_35-4_79_2_275:4.2.2.3
	Kernel-5_35-4_79_2_274:4.2.2.3
	Kernel-5_35-4_79_2_273:4.2.2.3
	Kernel-5_35-4_79_2_272:4.2.2.3
	Kernel-5_35-4_79_2_271:4.2.2.3
	Kernel-5_35-4_79_2_270:4.2.2.3
	Kernel-5_35-4_79_2_269:4.2.2.3
	Kernel-5_35-4_79_2_268:4.2.2.3
	Kernel-5_35-4_79_2_267:4.2.2.3
	Kernel-5_35-4_79_2_266:4.2.2.3
	Kernel-5_35-4_79_2_265:4.2.2.3
	Kernel-5_35-4_79_2_264:4.2.2.3
	Kernel-5_35-4_79_2_263:4.2.2.3
	Kernel-5_35-4_79_2_262:4.2.2.3
	Kernel-5_35-4_79_2_261:4.2.2.3
	Kernel-5_35-4_79_2_260:4.2.2.3
	Kernel-5_35-4_79_2_259:4.2.2.3
	Kernel-5_35-4_79_2_258:4.2.2.3
	Kernel-5_35-4_79_2_257:4.2.2.3
	Kernel-5_35-4_79_2_256:4.2.2.3
	Kernel-5_35-4_79_2_255:4.2.2.3
	Kernel-5_35-4_79_2_254:4.2.2.3
	Kernel-5_35-4_79_2_253:4.2.2.3
	Kernel-5_35-4_79_2_252:4.2.2.3
	Kernel-5_35-4_79_2_251:4.2.2.3
	Kernel-5_35-4_79_2_250:4.2.2.3
	Kernel-5_35-4_79_2_249:4.2.2.3
	Kernel-5_35-4_79_2_248:4.2.2.3
	Kernel-5_35-4_79_2_247:4.2.2.3
	Kernel-5_35-4_79_2_246:4.2.2.3
	Kernel-5_35-4_79_2_245:4.2.2.3
	Kernel-5_35-4_79_2_244:4.2.2.3
	Kernel-5_35-4_79_2_243:4.2.2.3
	Kernel-5_35-4_79_2_242:4.2.2.3
	Kernel-5_35-4_79_2_241:4.2.2.3
	Kernel-5_35-4_79_2_240:4.2.2.3
	Kernel-5_35-4_79_2_239:4.2.2.3
	Kernel-5_35-4_79_2_238:4.2.2.3
	Kernel-5_35-4_79_2_237:4.2.2.3
	Kernel-5_35-4_79_2_236:4.2.2.3
	Kernel-5_35-4_79_2_235:4.2.2.3
	Kernel-5_35-4_79_2_234:4.2.2.3
	Kernel-5_35-4_79_2_233:4.2.2.3
	Kernel-5_35-4_79_2_232:4.2.2.3
	Kernel-5_35-4_79_2_231:4.2.2.3
	Kernel-5_35-4_79_2_230:4.2.2.3
	Kernel-5_35-4_79_2_229:4.2.2.3
	Kernel-5_35-4_79_2_228:4.2.2.3
	Kernel-5_35-4_79_2_227:4.2.2.3
	Kernel-5_35-4_79_2_226:4.2.2.3
	Kernel-5_35-4_79_2_225:4.2.2.3
	Kernel-5_35-4_79_2_224:4.2.2.3
	Kernel-5_35-4_79_2_223:4.2.2.3
	Kernel-5_35-4_79_2_222:4.2.2.3
	Kernel-5_35-4_79_2_221:4.2.2.3
	Kernel-5_35-4_79_2_220:4.2.2.3
	Kernel-5_35-4_79_2_219:4.2.2.3
	Kernel-5_35-4_79_2_218:4.2.2.3
	Kernel-5_35-4_79_2_217:4.2.2.3
	Kernel-5_35-4_79_2_216:4.2.2.3
	Kernel-5_35-4_79_2_215:4.2.2.3
	Kernel-5_35-4_79_2_214:4.2.2.3
	Kernel-5_35-4_79_2_213:4.2.2.3
	Kernel-5_35-4_79_2_212:4.2.2.3
	Kernel-5_35-4_79_2_211:4.2.2.3
	Kernel-5_35-4_79_2_210:4.2.2.3
	Kernel-5_35-4_79_2_209:4.2.2.3
	Kernel-5_35-4_79_2_208:4.2.2.3
	Kernel-5_35-4_79_2_207:4.2.2.3
	Kernel-5_35-4_79_2_206:4.2.2.3
	Kernel-5_35-4_79_2_205:4.2.2.3
	Kernel-5_35-4_79_2_204:4.2.2.3
	Kernel-5_35-4_79_2_203:4.2.2.3
	Kernel-5_35-4_79_2_202:4.2.2.3
	Kernel-5_35-4_79_2_201:4.2.2.3
	Kernel-5_35-4_79_2_200:4.2.2.3
	Kernel-5_35-4_79_2_199:4.2.2.3
	Kernel-5_35-4_79_2_198:4.2.2.3
	Kernel-5_35-4_79_2_197:4.2.2.3
	Kernel-5_35-4_79_2_196:4.2.2.3
	Kernel-5_35-4_79_2_195:4.2.2.3
	Kernel-5_35-4_79_2_194:4.2.2.3
	Kernel-5_35-4_79_2_193:4.2.2.3
	Kernel-5_35-4_79_2_192:4.2.2.3
	Kernel-5_35-4_79_2_191:4.2.2.3
	Kernel-5_35-4_79_2_190:4.2.2.3
	Kernel-5_35-4_79_2_189:4.2.2.3
	Kernel-5_35-4_79_2_188:4.2.2.3
	Kernel-5_35-4_79_2_187:4.2.2.3
	Kernel-5_35-4_79_2_186:4.2.2.3
	Kernel-5_35-4_79_2_185:4.2.2.3
	Kernel-5_35-4_79_2_184:4.2.2.3
	Kernel-5_35-4_79_2_183:4.2.2.3
	Kernel-5_35-4_79_2_182:4.2.2.3
	Kernel-5_35-4_79_2_181:4.2.2.3
	Kernel-5_35-4_79_2_180:4.2.2.3
	Kernel-5_35-4_79_2_179:4.2.2.3
	Kernel-5_35-4_79_2_178:4.2.2.3
	Kernel-5_35-4_79_2_177:4.2.2.3
	Kernel-5_35-4_79_2_176:4.2.2.3
	Kernel-5_35-4_79_2_175:4.2.2.3
	Kernel-5_35-4_79_2_174:4.2.2.3
	Kernel-5_35-4_79_2_173:4.2.2.3
	Kernel-5_35-4_79_2_172:4.2.2.3
	Kernel-5_35-4_79_2_171:4.2.2.3
	Kernel-5_35-4_79_2_170:4.2.2.3
	Kernel-5_35-4_79_2_169:4.2.2.3
	Kernel-5_35-4_79_2_168:4.2.2.3
	Kernel-5_35-4_79_2_167:4.2.2.3
	Kernel-5_35-4_79_2_166:4.2.2.3
	Kernel-5_35-4_79_2_165:4.2.2.3
	RPi_merge:4.2.2.3
	Kernel-5_35-4_79_2_147_2_23:4.2.2.3
	Kernel-5_35-4_79_2_147_2_22:4.2.2.3
	Kernel-5_35-4_79_2_147_2_21:4.2.2.3
	Kernel-5_35-4_79_2_147_2_20:4.2.2.3
	Kernel-5_35-4_79_2_147_2_19:4.2.2.3
	Kernel-5_35-4_79_2_147_2_18:4.2.2.3
	Kernel-5_35-4_79_2_164:4.2.2.3
	Kernel-5_35-4_79_2_163:4.2.2.3
	Kernel-5_35-4_79_2_147_2_17:4.2.2.3
	Kernel-5_35-4_79_2_147_2_16:4.2.2.3
	Kernel-5_35-4_79_2_147_2_15:4.2.2.3
	Kernel-5_35-4_79_2_162:4.2.2.3
	Kernel-5_35-4_79_2_161:4.2.2.3
	Kernel-5_35-4_79_2_147_2_14:4.2.2.3
	Kernel-5_35-4_79_2_147_2_13:4.2.2.3
	Kernel-5_35-4_79_2_160:4.2.2.3
	Kernel-5_35-4_79_2_159:4.2.2.3
	Kernel-5_35-4_79_2_158:4.2.2.3
	Kernel-5_35-4_79_2_157:4.2.2.3
	Kernel-5_35-4_79_2_156:4.2.2.3
	Kernel-5_35-4_79_2_147_2_12:4.2.2.3
	Kernel-5_35-4_79_2_147_2_11:4.2.2.3
	Kernel-5_35-4_79_2_155:4.2.2.3
	Kernel-5_35-4_79_2_147_2_10:4.2.2.3
	Kernel-5_35-4_79_2_154:4.2.2.3
	Kernel-5_35-4_79_2_153:4.2.2.3
	Kernel-5_35-4_79_2_147_2_9:4.2.2.3
	Kernel-5_35-4_79_2_152:4.2.2.3
	Kernel-5_35-4_79_2_151:4.2.2.3
	Kernel-5_35-4_79_2_147_2_8:4.2.2.3
	Kernel-5_35-4_79_2_147_2_7:4.2.2.3
	Kernel-5_35-4_79_2_150:4.2.2.3
	Kernel-5_35-4_79_2_147_2_6:4.2.2.3
	Kernel-5_35-4_79_2_147_2_5:4.2.2.3
	Kernel-5_35-4_79_2_149:4.2.2.3
	Kernel-5_35-4_79_2_147_2_4:4.2.2.3
	Kernel-5_35-4_79_2_147_2_3:4.2.2.3
	Kernel-5_35-4_79_2_148:4.2.2.3
	Kernel-5_35-4_79_2_147_2_2:4.2.2.3
	Kernel-5_35-4_79_2_147_2_1:4.2.2.3
	RPi:4.2.2.3.0.2
	RPi_bp:4.2.2.3
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2.2.2
	alees_Kernel_dev:4.2.2.2.0.4
	alees_Kernel_dev_bp:4.2.2.2
	Kernel-5_35-4_79_2_147:4.2.2.3
	Kernel-5_35-4_79_2_146:4.2.2.3
	Kernel-5_35-4_79_2_145:4.2.2.2
	Kernel-5_35-4_79_2_144:4.2.2.2
	Kernel-5_35-4_79_2_143:4.2.2.2
	Kernel-5_35-4_79_2_142:4.2.2.2
	Kernel-5_35-4_79_2_141:4.2.2.2
	Kernel-5_35-4_79_2_140:4.2.2.2
	Kernel-5_35-4_79_2_139:4.2.2.2
	Kernel-5_35-4_79_2_138:4.2.2.2
	Kernel-5_35-4_79_2_137:4.2.2.2
	Kernel-5_35-4_79_2_136:4.2.2.2
	Kernel-5_35-4_79_2_135:4.2.2.2
	Kernel-5_35-4_79_2_134:4.2.2.2
	Kernel-5_35-4_79_2_133:4.2.2.2
	Kernel-5_35-4_79_2_132:4.2.2.2
	Kernel-5_35-4_79_2_131:4.2.2.2
	Kernel-5_35-4_79_2_130:4.2.2.2
	Kernel-5_35-4_79_2_129:4.2.2.2
	Kernel-5_35-4_79_2_128:4.2.2.2
	Kernel-5_35-4_79_2_127:4.2.2.2
	Kernel-5_35-4_79_2_126:4.2.2.2
	Kernel-5_35-4_79_2_125:4.2.2.2
	Kernel-5_35-4_79_2_124:4.2.2.2
	Kernel-5_35-4_79_2_123:4.2.2.2
	Cortex_merge:4.2.2.2
	Kernel-5_35-4_79_2_122:4.2.2.2
	Kernel-5_35-4_79_2_98_2_54:4.2.2.2
	Kernel-5_35-4_79_2_98_2_53:4.2.2.2
	Kernel-5_35-4_79_2_98_2_52:4.2.2.2
	Kernel-5_35-4_79_2_98_2_51:4.2.2.2
	Kernel-5_35-4_79_2_98_2_50:4.2.2.2
	Kernel-5_35-4_79_2_98_2_49:4.2.2.2
	Kernel-5_35-4_79_2_98_2_48:4.2.2.2
	Kernel-5_35-4_79_2_121:4.2.2.2
	Kernel-5_35-4_79_2_98_2_47:4.2.2.2
	Kernel-5_35-4_79_2_120:4.2.2.2
	Kernel-5_35-4_79_2_98_2_46:4.2.2.2
	Kernel-5_35-4_79_2_119:4.2.2.2
	Kernel-5_35-4_79_2_98_2_45:4.2.2.2
	Kernel-5_35-4_79_2_98_2_44:4.2.2.2
	Kernel-5_35-4_79_2_118:4.2.2.2
	Kernel-5_35-4_79_2_98_2_43:4.2.2.2
	Kernel-5_35-4_79_2_117:4.2.2.2
	Kernel-5_35-4_79_2_116:4.2.2.2
	Kernel-5_35-4_79_2_98_2_42:4.2.2.2
	Kernel-5_35-4_79_2_115:4.2.2.2
	Kernel-5_35-4_79_2_98_2_41:4.2.2.2
	Kernel-5_35-4_79_2_98_2_40:4.2.2.2
	Kernel-5_35-4_79_2_114:4.2.2.2
	Kernel-5_35-4_79_2_98_2_39:4.2.2.2
	Kernel-5_35-4_79_2_98_2_38:4.2.2.2
	Kernel-5_35-4_79_2_113:4.2.2.2
	Kernel-5_35-4_79_2_112:4.2.2.2
	Kernel-5_35-4_79_2_98_2_37:4.2.2.2
	Kernel-5_35-4_79_2_98_2_36:4.2.2.2
	Kernel-5_35-4_79_2_98_2_35:4.2.2.2
	Kernel-5_35-4_79_2_98_2_34:4.2.2.2
	Kernel-5_35-4_79_2_98_2_33:4.2.2.2
	Kernel-5_35-4_79_2_98_2_32:4.2.2.2
	Kernel-5_35-4_79_2_98_2_31:4.2.2.2
	Kernel-5_35-4_79_2_98_2_30:4.2.2.2
	Kernel-5_35-4_79_2_98_2_29:4.2.2.2
	Kernel-5_35-4_79_2_98_2_28:4.2.2.2
	Kernel-5_35-4_79_2_98_2_27:4.2.2.2
	Kernel-5_35-4_79_2_98_2_26:4.2.2.2
	Kernel-5_35-4_79_2_111:4.2.2.2
	Kernel-5_35-4_79_2_98_2_25:4.2.2.2
	Kernel-5_35-4_79_2_98_2_24:4.2.2.2
	Kernel-5_35-4_79_2_98_2_23:4.2.2.2
	Kernel-5_35-4_79_2_110:4.2.2.2
	Kernel-5_35-4_79_2_98_2_22:4.2.2.2
	Kernel-5_35-4_79_2_109:4.2.2.2
	Kernel-5_35-4_79_2_98_2_21:4.2.2.2
	Kernel-5_35-4_79_2_98_2_20:4.2.2.2
	Kernel-5_35-4_79_2_108:4.2.2.2
	Kernel-5_35-4_79_2_107:4.2.2.2
	Kernel-5_35-4_79_2_98_2_19:4.2.2.2
	Kernel-5_35-4_79_2_98_2_18:4.2.2.2
	Kernel-5_35-4_79_2_98_2_17:4.2.2.2
	Kernel-5_35-4_79_2_98_2_16:4.2.2.2
	Kernel-5_35-4_79_2_98_2_15:4.2.2.2
	Kernel-5_35-4_79_2_106:4.2.2.2
	Kernel-5_35-4_79_2_105:4.2.2.2
	Kernel-5_35-4_79_2_104:4.2.2.2
	Kernel-5_35-4_79_2_98_2_14:4.2.2.2
	Kernel-5_35-4_79_2_98_2_13:4.2.2.2
	Kernel-5_35-4_79_2_98_2_12:4.2.2.2
	Kernel-5_35-4_79_2_98_2_11:4.2.2.2
	Kernel-5_35-4_79_2_98_2_10:4.2.2.2
	Kernel-5_35-4_79_2_98_2_9:4.2.2.2
	Kernel-5_35-4_79_2_103:4.2.2.2
	Kernel-5_35-4_79_2_102:4.2.2.2
	Kernel-5_35-4_79_2_98_2_8:4.2.2.2
	Kernel-5_35-4_79_2_98_2_7:4.2.2.2
	Kernel-5_35-4_79_2_98_2_6:4.2.2.2
	Kernel-5_35-4_79_2_98_2_5:4.2.2.2
	Kernel-5_35-4_79_2_98_2_4:4.2.2.2
	Kernel-5_35-4_79_2_101:4.2.2.2
	Kernel-5_35-4_79_2_100:4.2.2.2
	Kernel-5_35-4_79_2_99:4.2.2.2
	Kernel-5_35-4_79_2_98_2_3:4.2.2.2
	Kernel-5_35-4_79_2_98_2_2:4.2.2.2
	Kernel-5_35-4_79_2_98_2_1:4.2.2.2
	Cortex:4.2.2.2.0.2
	Cortex_bp:4.2.2.2
	Kernel-5_35-4_79_2_98:4.2.2.2
	Kernel-5_35-4_79_2_97:4.2.2.2
	Kernel-5_35-4_79_2_96:4.2.2.2
	Kernel-5_35-4_79_2_95:4.2.2.2
	Kernel-5_35-4_79_2_94:4.2.2.2
	Kernel-5_35-4_79_2_93:4.2.2.2
	Kernel-5_35-4_79_2_92:4.2.2.2
	Kernel-5_35-4_79_2_91:4.2.2.2
	Kernel-5_35-4_79_2_90:4.2.2.2
	Kernel-5_35-4_79_2_89:4.2.2.2
	Kernel-5_35-4_79_2_88:4.2.2.2
	Kernel-5_35-4_79_2_87:4.2.2.2
	Kernel-5_35-4_79_2_86:4.2.2.2
	Kernel-5_35-4_79_2_85:4.2.2.2
	Kernel-5_35-4_79_2_84:4.2.2.2
	Kernel-5_35-4_79_2_83:4.2.2.2
	Kernel-5_35-4_79_2_82:4.2.2.2
	Kernel-5_35-4_79_2_81:4.2.2.2
	Kernel-5_35-4_79_2_80:4.2.2.2
	Kernel-5_35-4_79_2_79:4.2.2.2
	Kernel-5_35-4_79_2_78:4.2.2.2
	Kernel-5_35-4_79_2_77:4.2.2.2
	RO_5_07:4.2.2.2
	Kernel-5_35-4_79_2_76:4.2.2.2
	Kernel-5_35-4_79_2_75:4.2.2.2
	Kernel-5_35-4_79_2_74:4.2.2.2
	Kernel-5_35-4_79_2_73:4.2.2.2
	Kernel-5_35-4_79_2_72:4.2.2.2
	Kernel-5_35-4_79_2_71:4.2.2.2
	Kernel-5_35-4_79_2_70:4.2.2.2
	Kernel-5_35-4_79_2_69:4.2.2.2
	Kernel-5_35-4_79_2_68:4.2.2.2
	Kernel-5_35-4_79_2_67:4.2.2.2
	Kernel-5_35-4_79_2_66:4.2.2.2
	Kernel-5_35-4_79_2_65:4.2.2.2
	Kernel-5_35-4_79_2_64:4.2.2.2
	Kernel-5_35-4_79_2_63:4.2.2.2
	Kernel-5_35-4_79_2_62:4.2.2.2
	Kernel-5_35-4_79_2_61:4.2.2.2
	Kernel-5_35-4_79_2_59:4.2.2.2
	Kernel-5_35-4_79_2_58:4.2.2.2
	Kernel-5_35-4_79_2_57:4.2.2.2
	Kernel-5_35-4_79_2_56:4.2.2.2
	Kernel-5_35-4_79_2_55:4.2.2.2
	Kernel-5_35-4_79_2_54:4.2.2.2
	Kernel-5_35-4_79_2_53:4.2.2.2
	Kernel-5_35-4_79_2_52:4.2.2.2
	Kernel-5_35-4_79_2_51:4.2.2.2
	Kernel-5_35-4_79_2_50:4.2.2.2
	Kernel-5_35-4_79_2_49:4.2.2.2
	Kernel-5_35-4_79_2_48:4.2.2.2
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.4
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2.2.2
	Kernel-5_35-4_79_2_46:4.2.2.2
	Kernel-5_35-4_79_2_45:4.2.2.2
	Kernel-5_35-4_79_2_44:4.2.2.2
	Kernel-5_35-4_79_2_25_2_2:4.2.2.2
	Kernel-5_35-4_79_2_43:4.2.2.2
	Kernel-5_35-4_79_2_42:4.2.2.2
	Kernel-5_35-4_79_2_41:4.2.2.2
	Kernel-5_35-4_79_2_40:4.2.2.2
	Kernel-5_35-4_79_2_39:4.2.2.2
	Kernel-5_35-4_79_2_38:4.2.2.2
	Kernel-5_35-4_79_2_37:4.2.2.2
	Kernel-5_35-4_79_2_36:4.2.2.2
	Kernel-5_35-4_79_2_35:4.2.2.2
	Kernel-5_35-4_79_2_34:4.2.2.2
	Kernel-5_35-4_79_2_33:4.2.2.2
	Kernel-5_35-4_79_2_32:4.2.2.2
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2.2.2
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2.2.2
	Kernel-5_35-4_79_2_30:4.2.2.2
	Kernel-5_35-4_79_2_29:4.2.2.2
	Kernel-5_35-4_79_2_28:4.2.2.2
	Kernel-5_35-4_79_2_27:4.2.2.2
	Kernel-5_35-4_79_2_26:4.2.2.2
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2.2.2
	Kernel-5_35-4_79_2_24:4.2.2.2
	Kernel-5_35-4_79_2_23:4.2.2.2
	Kernel-5_35-4_79_2_22:4.2.2.2
	Kernel-5_35-4_79_2_21:4.2.2.2
	Kernel-5_35-4_79_2_20:4.2.2.2
	Kernel-5_35-4_79_2_19:4.2.2.2
	Kernel-5_35-4_79_2_18:4.2.2.2
	Kernel-5_35-4_79_2_17:4.2.2.2
	Kernel-5_35-4_79_2_16:4.2.2.2
	Kernel-5_35-4_79_2_15:4.2.2.2
	Kernel-5_35-4_79_2_14:4.2.2.2
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.1.3.1
	Bethany:4.1.3.1.0.8
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2.2.2
	Kernel-5_35-4_79_2_12:4.2.2.2
	Kernel-5_35-4_79_2_11:4.2.2.1
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2.2.1
	Kernel-5_35-4_79_2_9:4.2.2.1
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2.2.1
	Kernel-5_35-4_79_2_7:4.2.2.1
	Kernel-5_35-4_79_2_6:4.2.2.1
	Kernel-5_35-4_79_2_5:4.2.2.1
	Kernel-5_35-4_79_2_4:4.2.2.1
	Kernel-5_35-4_79_2_3:4.2.2.1
	Kernel-5_35-4_79_2_2:4.2.2.1
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2.2.1
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1.3.1
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Kernel-5_21:4.1.3.1
	Kernel-5_20:4.1.3.1
	Kernel-5_19:4.1.3.1
	Kernel-5_18:4.1.3.1
	Kernel-5_17:4.1.3.1
	Kernel-5_16:4.1.3.1
	Kernel-5_15:4.1.3.1
	Kernel-5_14:4.1.3.1
	Kernel-5_13:4.1.3.1
	Kernel-5_12:4.1.3.1
	Kernel-5_11:4.1.3.1
	Kernel-5_10:4.1.3.1
	Kernel-5_09:4.1.3.1
	Kernel-5_08:4.1.3.1
	Kernel-5_07:4.1.3.1
	Kernel-5_06:4.1.3.1
	Kernel-5_05:4.1.3.1
	Kernel-5_04:4.1.3.1
	Kernel-5_03:4.1.3.1
	Kernel-5_02:4.1.3.1
	Kernel-5_01:4.1.3.1
	Kernel-5_00:4.1.3.1
	Kernel-4_99:4.1.3.1
	Kernel-4_98:4.1.3.1
	Kernel-4_97:4.1.3.1
	Kernel-4_96:4.1.3.1
	Kernel-4_95:4.1.3.1
	Kernel-4_94:4.1.3.1
	Kernel-4_93:4.1.3.1
	Kernel-4_92:4.1.3.1
	Kernel-4_91:4.1.3.1
	Kernel-4_90:4.1.3.1
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.1.3.1
	Kernel-4_88:4.1.3.1
	Kernel-4_87:4.1.3.1
	Kernel-4_86:4.1.3.1
	Kernel-4_85:4.1.3.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.3.1.2.1
	Kernel-4_84:4.1.3.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.3.1.2.1
	Ursula_RiscPC_bp:4.1.3.1.2.1
	Kernel-4_83:4.1.3.1
	Kernel-4_82:4.1.3.1
	Kernel-4_81:4.1.3.1
	Kernel-4_80:4.1.3.1
	Kernel-4_79:4.1.3.1
	Kernel-4_78:4.1.3.1
	Kernel-4_77:4.1.3.1
	Kernel-4_76:4.1.3.1
	Kernel-4_75:4.1.3.1
	Kernel-4_74:4.1.3.1
	Kernel-4_73:4.1.3.1
	Kernel-4_72:4.1.3.1
	Kernel-4_71:4.1.3.1
	Kernel-4_70:4.1.3.1
	Kernel-4_69:4.1.3.1
	Kernel-4_68:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1.2.1
	Ursula_RiscPC:4.1.3.1.2.1.0.2
	Kernel-4_67:4.1.3.1
	Kernel-4_66:4.1.3.1
	Kernel-4_65:4.1.3.1
	Ursula_merge:4.1.3.1
	Kernel-4_64:4.1.3.1
	mstphens_Kernel-3_81:4.1.3.1.2.1
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1.2.1
	UrsulaBuild_FinalSoftload:4.1.3.1.2.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1.2.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1.2.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1.2.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1.2.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1.2.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1.2.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1.2.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1.2.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1.2.1
	mstphens_Kernel-3_80:4.1.3.1.2.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1.2.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1.2.1
	afrost_NC2_Generic:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.4
date	2016.12.13.16.42.53;	author jlee;	state Exp;
branches;
next	4.3;
commitid	aGog9bB8f4QKlQxz;

4.3
date	2016.06.30.20.08.12;	author jlee;	state Exp;
branches;
next	4.2;
commitid	IWoXxARWeuLDOwcz;

4.2
date	2000.04.04.14.27.34;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.06.02.01.36;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.2.2.1
date	2000.09.15.12.38.01;	author kbracey;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2000.11.10.14.41.16;	author mstephen;	state Exp;
branches;
next	4.2.2.3;

4.2.2.3
date	2012.04.15.19.48.09;	author jlee;	state Exp;
branches;
next	;
commitid	95iLwHSxemPb701w;

4.1.3.1
date	96.11.06.02.01.36;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	;

4.1.3.1.2.1
date	98.03.26.11.26.10;	author mstphens;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Reimplement AMBControl ontop of the PMP system
Detail:
  With this set of changes, each AMB node is now the owner of a fake DANode which is linked to a PMP.
  From a user's perspective the behaviour of AMBControl is the same as before, but rewriting it to use PMPs internally offers the following (potential) benefits:
  * Reduction in the amount of code which messes with the CAM & page tables, simplifying future work/maintenance. Some of the AMB ops (grow, shrink) now just call through to OS_ChangeDynamicArea. However all of the old AMB routines were well-optimised, so to avoid a big performance hit for common operations not all of them have been removed (e.g. mapslot / mapsome). Maybe one day these optimal routines will be made available for use by regular PMP DAs.
  * Removal of the slow Service_MemoryMoved / Service_PagesSafe handlers that had to do page list fixup after the core kernel had reclaimed/moved pages. Since everything is a PMP, the kernel will now deal with this on behalf of AMB.
  * Removal of a couple of other slow code paths (e.g. Do_AMB_MakeUnsparse calls from OS_ChangeDynamicArea)
  * Potential for more flexible mapping of application space in future, e.g. sparse allocation of memory to the wimp slot
  * Simpler transition to an ASID-based task swapping scheme on ARMv6+?
  Other changes of note:
  * AMB_LazyMapIn switch has been fixed up to work correctly (i.e. turning it off now disables lazy task swapping and all associated code instead of producing a build error)
  * The DANode for the current app should be accessed via the GetAppSpaceDANode macro. This will either return the current AMB DANode, or AppSpaceDANode (if e.g. pre-Wimp). However be aware that AppSpaceDANode retains the legacy behaviour of having a base + size relative to &0, while the AMB DANodes (identifiable via the PMP flag) are sane and have their base + size relative to &8000.
  * Mostly-useless DebugAborts switch removed
  * AMBPhysBin (page number -> phys addr lookup table) removed. Didn't seem to give any tangible performance benefit, and was imposing hidden restrictions on memory usage (all phys RAM fragments in PhysRamTable must be multiple of 512k). And if it really was a good optimisation, surely it should have been applied to all areas of the kernel, not just AMB!
  Other potential future improvements:
  * Turn the fake DANodes into real dynamic areas, reducing the amount of special code needed in some places, but allow the DAs to be hidden from OS_DynamicArea 3 so that apps/users won't get too confused
  * Add a generic abort trapping system to PMPs/DAs (lazy task swapping abort handler is still a special case)
  File changes:
  - s/ARM600, s/VMSAv6, s/ExtraSWIs - Remove DebugAborts
  - s/ArthurSWIs - Remove AMB service call handler dispatch
  - s/ChangeDyn - AMB_LazyMapIn switch fixes. Add alternate internal entry points for some PMP ops to allow the DANode to be specified (used by AMB)
  - s/Exceptions - Remove DebugAborts, AMB_LazyMapIn switch fixes
  - s/Kernel - Define GetAppSpaceDANode macro, AMB_LazyMapIn switch fix
  - s/MemInfo - AMB_LazyMapIn switch fixes
  - s/AMBControl/AMB - Update GETs
  - s/AMBControl/Memory - Remove block size quantisation, AMB_BlockResize (page list blocks are now allocated by PMP code)
  - s/AMBControl/Options - Remove PhysBin definitions, AMBMIRegWords (moved to Workspace file), AMB_LimpidFreePool switch. Add AMB_Debug switch.
  - s/AMBControl/Workspace - Update AMBNode to contain an embedded DANode. Move AMBMIRegWords here from Options file.
  - s/AMBControl/allocate - Fake DA node initialisation
  - s/AMBControl/deallocate - Add debug output
  - s/AMBControl/growp, growshrink, mapslot, mapsome, shrinkp - Rewrite to use PMP ops where possible, add debug output
  - s/AMBControl/main - Remove PhysBin initialisation. Update the enumerate/mjs_info call.
  - s/AMBControl/memmap - Low-level memory mapping routines updated or rewritten as appropriate.
  - s/AMBControl/readinfo - Update to cope with DANode
  - s/AMBControl/service - Remove old service call handlers
  - s/AMBControl/handler - DA handler for responding to PMP calls from OS_ChangeDynamicArea; just calls through to growpages/shrinkpages as appropriate.
Admin:
  Tested on pretty much everything currently supported


Version 5.66. Tagged as 'Kernel-5_66'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.Memory

; Small veneer between AMBControl's memory block requirements and OS_Heap,
; using system heap. This is changed since Ursula - old code called OS_Module
; and claimed blocks from RMA, which is an anachronism since code is in
; the kernel.

;in:  r3=size
;out: r2 -> block, r0 corrupted
;
AMB_BlockClaim ROUT
        Push    "r1,r3,lr"
        BL      ClaimSysHeapNode
        Pull    "r1,r3,pc"

;in:  r2 -> block
;out: r0 corrupted
;
AMB_BlockFree ROUT
        Push    "r1,lr"
        BL      FreeSysHeapNode
        Pull    "r1,pc"


        END
@


4.3
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@a21 5
; quantise sizes to reduce heap stress
;
AMBblockQ  * 64


a26 2
        ADD     r3,r3,#AMBblockQ - 1
        BIC     r3,r3,#AMBblockQ - 1 
a37 14
;in:  r2 -> block, r3 = new size
;out: r2 -> new block, r0 corrupted
;
AMB_BlockResize ROUT
        Push    "r1,r3,lr"
        ADD     r3,r3,#AMBblockQ - 1
        BIC     r3,r3,#AMBblockQ - 1 
        LDR     r1,[r2,#-4]                  ;pick up OS_Heap's size word (naughty!)
        SUB     r1,r1,#4                     ;heap size will be (at least) 4 more than quantised size 
        SUBS    r3,r3,r1                     ;required size change
        MOVNE   r0, #HeapReason_ExtendBlock
        BLNE    DoSysHeapOpWithExtension
        Pull    "r1,r3,pc"

@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d17 41
a57 51
; lifted from Wimp source (v3.67)

; this OS_Module equivalent looks at ptr-4 which the Heap Manager uses
; to store the real size of the block. In this way the memory use is
; more efficient (especially when extending a block) and RMA should
; fragment less often.


XROS_Module ENTRY
        TEQ     R0,#6
        TEQNE   R0,#7
        TEQNE   R0,#13
        SWINE   XOS_Module
        EXIT    NE
        TEQ     R0,#6
        BEQ     ros_claim
        TEQ     R0,#7
        BEQ     ros_free
; extend
        Push    "R3-R5"
        LDR     R4,[R2,#-8]
        LDR     R5,[R2,#-4]!
        ADD     R5,R5,R3                        ; R5 is proposed new size
        SUB     R4,R4,#4
        CMP     R4,R5
        CMPGE   R3,#0
        BLT     %FT02
        STR     R5,[R2],#4                      ; enough space so just store
        Pull    "R3-R5"
; can never error
        CLRV
        EXIT
02
        SUB     R3,R5,R4
        SWI     XOS_Module
        STRVC   R5,[R2],#4
        Pull    "R3-R5"
        EXIT


ros_free
        SUB     R2,R2,#4
        SWI     XOS_Module
        EXIT

ros_claim
        ADD     R3,R3,#4
        SWI     XOS_Module
        STRVC   R3,[R2],#4                      ; so modptr-4 = amount asked for + 4
        SUB     R3,R3,#4                        ; needs to be preserved
        EXIT
@


4.2.2.1
log
@* Converted to building with ObjAsm (but still a single object file using ORG).
* Added ARM_IMB and ARM_IMBRange SWIs as recommended by ARMv5.
* Some early prototype HAL bits popped in - a lot of source restructuring still
  to come.
* New debug target creates an AIF image with debug information, and translates
  this into an ASCII object file for the 16702B logic analyser.

Version 5.35, 4.79.2.1. Tagged as 'Kernel-5_35-4_79_2_1'
@
text
@d25 1
a25 1
XROS_Module Entry
@


4.2.2.2
log
@reintroduce Ursula AMBControl, recoded with generic ARMop style, not debugged yet

Version 5.35, 4.79.2.12. Tagged as 'Kernel-5_35-4_79_2_12'
@
text
@d17 51
a67 41
; Small veneer between AMBControl's memory block requirements and OS_Heap,
; using system heap. This is changed since Ursula - old code called OS_Module
; and claimed blocks from RMA, which is an anachronism since code is in
; the kernel.

; quantise sizes to reduce heap stress
;
AMBblockQ  * 64


;in:  r3=size
;out: r2 -> block, r0 corrupted
;
AMB_BlockClaim ROUT
        Push    "r1,r3,lr"
        ADD     r3,r3,#AMBblockQ - 1
        BIC     r3,r3,#AMBblockQ - 1 
        BL      ClaimSysHeapNode
        Pull    "r1,r3,pc"

;in:  r2 -> block
;out: r0 corrupted
;
AMB_BlockFree ROUT
        Push    "r1,lr"
        BL      FreeSysHeapNode
        Pull    "r1,pc"

;in:  r2 -> block, r3 = new size
;out: r2 -> new block, r0 corrupted
;
AMB_BlockResize ROUT
        Push    "r1,r3,lr"
        ADD     r3,r3,#AMBblockQ - 1
        BIC     r3,r3,#AMBblockQ - 1 
        LDR     r1,[r2,#-4]                  ;pick up OS_Heap's size word (naughty!)
        SUB     r1,r1,#8                     ;heap size will be 8 more than quantised size 
        SUBS    r3,r3,r1                     ;required size change
        MOVNE   r0, #HeapReason_ExtendBlock
        BLNE    DoSysHeapOpWithExtension
        Pull    "r1,r3,pc"
@


4.2.2.3
log
@OS_ChangeDynamicArea performance optimisations
Detail:
  s/ChangeDyn:
    - Apply various optimisations to OS_ChangeDynamicArea to reduce the execution time when performing large grows/shrinks.
    - Optimisations can be toggled on/off with FastCDA_* flags for debugging.
    - On a 1GHz 512MB BB-xM, the initial *FreePool call now takes 0.15s instead of 13.46s. On a 512MB Iyonix the time has dropped from 1.18s to 0.23s.
    - Growing screen memory (on BB-xM) has also seen significant gains - between 2x and 4x speedup, depending on what state the source pages are in.
    - Added/updated documentation for a few functions and made more use of ROUTs for safety
  s/ARM600, s/VMSAv6:
    - Update BangCamUpdate, etc. to add support for the PageFlags_Unsafe flag that OS_ChangeDynamicArea uses to bypass cache/TLB maintenance in some situations
    - Avoid BangCamUpdate calling BangL2PT to map out the page if the page isn't mapped in (avoids unnecessary cache/TLB flush)
  s/ArthurSWIs:
    - Add extra ASSERT for safety
  s/AMBcontrol/memory
    - Fix incorrect assumption that the usable size of a heap block is always 8 less than the value stored in the header. Even with the old 8 byte aligned allocations the usable size will always be 4 bytes less than the value in the header. This code would have resulted in some slight memory wasteage, as AMBcontrol will have always tried growing the block four bytes bigger than needed.
Admin:
  Tested on Iyonix & BB-xM


Version 5.35, 4.79.2.146. Tagged as 'Kernel-5_35-4_79_2_146'
@
text
@d53 1
a53 1
        SUB     r1,r1,#4                     ;heap size will be (at least) 4 more than quantised size 
@


4.1
log
@Initial revision
@
text
@d47 2
a48 1
        EXITS
a53 1
        EXITS   VC
a59 1
        EXITS   VC
a66 1
        EXITS   VC
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.1.2.1
log
@added support for Sparse dynamic areas
fixed performance disaster caused by naff API for Shrinkable areas
implemented clamps for dynamic areas max size
configured kernel to not own or create RAMFS area (needs new RAMFS)
AMBControl now uses system heap for space, not RMA
AMBControl enables Lazy task swapping if running on rev T or better SA
kernel now assumes there could be code above 64M
SWIS for limited 32 bit user code support implemented
Long command lines implemented (1k instead of 256)
Fast service call distribution implemented (uses Ursula module format)
*fx,*key etc now allow missing space before first parameter
*configure is reinstated (bug fix)
@
text
@d17 53
a69 41
; Small veneer between AMBControl's memory block requirements and OS_Heap,
; using system heap. This is changed since Ursula - used to call OS_Module
; and claim blocks from RMA, which is an anachronism since code is in
; the kernel.

; quantise sizes to reduce heap stress
;
AMBblockQ  * 64


;in:  r3=size
;out: r2 -> block, r0 corrupted
;
AMB_BlockClaim ROUT
        Push    "r1,r3,lr"
        ADD     r3,r3,#AMBblockQ - 1
        BIC     r3,r3,#AMBblockQ - 1 
        BL      ClaimSysHeapNode
        Pull    "r1,r3,pc"

;in:  r2 -> block
;out: r0 corrupted
;
AMB_BlockFree ROUT
        Push    "r1,lr"
        BL      FreeSysHeapNode
        Pull    "r1,pc"

;in:  r2 -> block, r3 = new size
;out: r2 -> new block, r0 corrupted
;
AMB_BlockResize ROUT
        Push    "r1,r3,lr"
        ADD     r3,r3,#AMBblockQ - 1
        BIC     r3,r3,#AMBblockQ - 1 
        LDR     r1,[r2,#-4]                  ;pick up OS_Heap's size word (naughty!)
        SUB     r1,r1,#8                     ;heap size will be 8 more than quantised size 
        SUBS    r3,r3,r1                     ;required size change
        MOVNE   r0, #HeapReason_ExtendBlock
        BLNE    DoSysHeapOpWithExtension
        Pull    "r1,r3,pc"
@
