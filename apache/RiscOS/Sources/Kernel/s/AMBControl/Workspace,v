head	4.4;
access;
symbols
	Kernel-6_15:4.4
	Kernel-6_14:4.4
	Kernel-6_01-3:4.4
	Kernel-6_13:4.4
	Kernel-6_12:4.4
	Kernel-6_11:4.4
	Kernel-6_10:4.4
	Kernel-6_09:4.4
	Kernel-6_08-4_129_2_10:4.4
	Kernel-6_08-4_129_2_9:4.4
	Kernel-6_08:4.4
	Kernel-6_07:4.4
	Kernel-6_06:4.4
	Kernel-6_05-4_129_2_8:4.4
	Kernel-6_05:4.4
	Kernel-6_04:4.4
	Kernel-6_03:4.4
	Kernel-6_01-2:4.4
	Kernel-6_01-4_146_2_1:4.4
	Kernel-6_02:4.4
	Kernel-6_01-1:4.4
	Kernel-6_01:4.4
	Kernel-6_00:4.4
	Kernel-5_99:4.4
	Kernel-5_98:4.4
	Kernel-5_97-4_129_2_7:4.4
	Kernel-5_97:4.4
	Kernel-5_96:4.4
	Kernel-5_95:4.4
	Kernel-5_94:4.4
	Kernel-5_93:4.4
	Kernel-5_92:4.4
	Kernel-5_91:4.4
	Kernel-5_90:4.4
	Kernel-5_89-4_129_2_6:4.4
	Kernel-5_89:4.4
	Kernel-5_88-4_129_2_5:4.4
	Kernel-5_88-4_129_2_4:4.4
	Kernel-5_88:4.4
	Kernel-5_87:4.4
	Kernel-5_86-4_129_2_3:4.4
	Kernel-5_86-4_129_2_2:4.4
	Kernel-5_86-4_129_2_1:4.4
	Kernel-5_86:4.4
	SMP:4.4.0.2
	SMP_bp:4.4
	Kernel-5_85:4.4
	Kernel-5_54-1:4.2
	Kernel-5_84:4.4
	Kernel-5_83:4.4
	Kernel-5_82:4.4
	Kernel-5_81:4.4
	Kernel-5_80:4.4
	Kernel-5_79:4.4
	Kernel-5_78:4.4
	Kernel-5_77:4.4
	Kernel-5_76:4.4
	Kernel-5_75:4.4
	Kernel-5_74:4.4
	Kernel-5_73:4.4
	Kernel-5_72:4.4
	Kernel-5_71:4.4
	Kernel-5_70:4.4
	Kernel-5_69:4.4
	Kernel-5_68:4.4
	Kernel-5_67:4.4
	Kernel-5_66:4.4
	Kernel-5_65:4.3
	Kernel-5_64:4.3
	Kernel-5_63:4.3
	Kernel-5_62:4.3
	Kernel-5_61:4.3
	Kernel-5_60:4.3
	Kernel-5_59:4.3
	Kernel-5_58:4.3
	Kernel-5_57:4.3
	Kernel-5_56:4.3
	Kernel-5_55:4.3
	Kernel-5_54:4.2
	Kernel-5_53:4.2
	Kernel-5_52:4.2
	Kernel-5_51:4.2
	Kernel-5_50:4.2
	Kernel-5_49:4.2
	HAL_merge:4.1.3.1.8.3
	Kernel-5_48:4.2
	Kernel-5_35-4_79_2_327:4.1.3.1.8.3
	Kernel-5_35-4_79_2_326:4.1.3.1.8.3
	Kernel-5_35-4_79_2_325:4.1.3.1.8.3
	Kernel-5_35-4_79_2_324:4.1.3.1.8.3
	Kernel-5_35-4_79_2_323:4.1.3.1.8.3
	Kernel-5_35-4_79_2_322:4.1.3.1.8.3
	Kernel-5_35-4_79_2_321:4.1.3.1.8.3
	Kernel-5_35-4_79_2_320:4.1.3.1.8.3
	Kernel-5_35-4_79_2_319:4.1.3.1.8.3
	Kernel-5_35-4_79_2_318:4.1.3.1.8.3
	Kernel-5_35-4_79_2_317:4.1.3.1.8.3
	Kernel-5_35-4_79_2_316:4.1.3.1.8.3
	Kernel-5_35-4_79_2_315:4.1.3.1.8.3
	Kernel-5_35-4_79_2_314:4.1.3.1.8.3
	Kernel-5_35-4_79_2_313:4.1.3.1.8.3
	Kernel-5_35-4_79_2_312:4.1.3.1.8.3
	Kernel-5_35-4_79_2_311:4.1.3.1.8.3
	Kernel-5_35-4_79_2_310:4.1.3.1.8.3
	Kernel-5_35-4_79_2_309:4.1.3.1.8.3
	Kernel-5_35-4_79_2_308:4.1.3.1.8.3
	Kernel-5_35-4_79_2_307:4.1.3.1.8.3
	Kernel-5_35-4_79_2_306:4.1.3.1.8.3
	Kernel-5_35-4_79_2_305:4.1.3.1.8.3
	Kernel-5_35-4_79_2_304:4.1.3.1.8.3
	Kernel-5_35-4_79_2_303:4.1.3.1.8.3
	Kernel-5_35-4_79_2_302:4.1.3.1.8.3
	Kernel-5_35-4_79_2_301:4.1.3.1.8.3
	Kernel-5_35-4_79_2_300:4.1.3.1.8.3
	Kernel-5_35-4_79_2_299:4.1.3.1.8.3
	Kernel-5_35-4_79_2_298:4.1.3.1.8.3
	Kernel-5_35-4_79_2_297:4.1.3.1.8.3
	Kernel-5_35-4_79_2_296:4.1.3.1.8.3
	Kernel-5_35-4_79_2_295:4.1.3.1.8.3
	Kernel-5_35-4_79_2_294:4.1.3.1.8.3
	Kernel-5_35-4_79_2_293:4.1.3.1.8.3
	Kernel-5_35-4_79_2_292:4.1.3.1.8.3
	Kernel-5_35-4_79_2_291:4.1.3.1.8.3
	Kernel-5_35-4_79_2_290:4.1.3.1.8.3
	Kernel-5_35-4_79_2_289:4.1.3.1.8.3
	Kernel-5_35-4_79_2_288:4.1.3.1.8.3
	Kernel-5_35-4_79_2_287:4.1.3.1.8.3
	Kernel-5_35-4_79_2_286:4.1.3.1.8.2
	Kernel-5_35-4_79_2_285:4.1.3.1.8.2
	Kernel-5_35-4_79_2_284:4.1.3.1.8.2
	Kernel-5_35-4_79_2_283:4.1.3.1.8.2
	Kernel-5_35-4_79_2_282:4.1.3.1.8.2
	Kernel-5_35-4_79_2_281:4.1.3.1.8.2
	Kernel-5_35-4_79_2_280:4.1.3.1.8.2
	Kernel-5_35-4_79_2_279:4.1.3.1.8.2
	Kernel-5_35-4_79_2_278:4.1.3.1.8.2
	Kernel-5_35-4_79_2_277:4.1.3.1.8.2
	Kernel-5_35-4_79_2_276:4.1.3.1.8.2
	Kernel-5_35-4_79_2_275:4.1.3.1.8.2
	Kernel-5_35-4_79_2_274:4.1.3.1.8.2
	Kernel-5_35-4_79_2_273:4.1.3.1.8.2
	Kernel-5_35-4_79_2_272:4.1.3.1.8.2
	Kernel-5_35-4_79_2_271:4.1.3.1.8.2
	Kernel-5_35-4_79_2_270:4.1.3.1.8.2
	Kernel-5_35-4_79_2_269:4.1.3.1.8.2
	Kernel-5_35-4_79_2_268:4.1.3.1.8.2
	Kernel-5_35-4_79_2_267:4.1.3.1.8.2
	Kernel-5_35-4_79_2_266:4.1.3.1.8.2
	Kernel-5_35-4_79_2_265:4.1.3.1.8.2
	Kernel-5_35-4_79_2_264:4.1.3.1.8.2
	Kernel-5_35-4_79_2_263:4.1.3.1.8.2
	Kernel-5_35-4_79_2_262:4.1.3.1.8.2
	Kernel-5_35-4_79_2_261:4.1.3.1.8.2
	Kernel-5_35-4_79_2_260:4.1.3.1.8.2
	Kernel-5_35-4_79_2_259:4.1.3.1.8.2
	Kernel-5_35-4_79_2_258:4.1.3.1.8.2
	Kernel-5_35-4_79_2_257:4.1.3.1.8.2
	Kernel-5_35-4_79_2_256:4.1.3.1.8.2
	Kernel-5_35-4_79_2_255:4.1.3.1.8.2
	Kernel-5_35-4_79_2_254:4.1.3.1.8.2
	Kernel-5_35-4_79_2_253:4.1.3.1.8.2
	Kernel-5_35-4_79_2_252:4.1.3.1.8.2
	Kernel-5_35-4_79_2_251:4.1.3.1.8.2
	Kernel-5_35-4_79_2_250:4.1.3.1.8.2
	Kernel-5_35-4_79_2_249:4.1.3.1.8.2
	Kernel-5_35-4_79_2_248:4.1.3.1.8.2
	Kernel-5_35-4_79_2_247:4.1.3.1.8.2
	Kernel-5_35-4_79_2_246:4.1.3.1.8.2
	Kernel-5_35-4_79_2_245:4.1.3.1.8.2
	Kernel-5_35-4_79_2_244:4.1.3.1.8.2
	Kernel-5_35-4_79_2_243:4.1.3.1.8.2
	Kernel-5_35-4_79_2_242:4.1.3.1.8.2
	Kernel-5_35-4_79_2_241:4.1.3.1.8.2
	Kernel-5_35-4_79_2_240:4.1.3.1.8.2
	Kernel-5_35-4_79_2_239:4.1.3.1.8.2
	Kernel-5_35-4_79_2_238:4.1.3.1.8.2
	Kernel-5_35-4_79_2_237:4.1.3.1.8.2
	Kernel-5_35-4_79_2_236:4.1.3.1.8.2
	Kernel-5_35-4_79_2_235:4.1.3.1.8.2
	Kernel-5_35-4_79_2_234:4.1.3.1.8.2
	Kernel-5_35-4_79_2_233:4.1.3.1.8.2
	Kernel-5_35-4_79_2_232:4.1.3.1.8.2
	Kernel-5_35-4_79_2_231:4.1.3.1.8.2
	Kernel-5_35-4_79_2_230:4.1.3.1.8.2
	Kernel-5_35-4_79_2_229:4.1.3.1.8.2
	Kernel-5_35-4_79_2_228:4.1.3.1.8.2
	Kernel-5_35-4_79_2_227:4.1.3.1.8.2
	Kernel-5_35-4_79_2_226:4.1.3.1.8.2
	Kernel-5_35-4_79_2_225:4.1.3.1.8.2
	Kernel-5_35-4_79_2_224:4.1.3.1.8.2
	Kernel-5_35-4_79_2_223:4.1.3.1.8.2
	Kernel-5_35-4_79_2_222:4.1.3.1.8.2
	Kernel-5_35-4_79_2_221:4.1.3.1.8.2
	Kernel-5_35-4_79_2_220:4.1.3.1.8.2
	Kernel-5_35-4_79_2_219:4.1.3.1.8.2
	Kernel-5_35-4_79_2_218:4.1.3.1.8.2
	Kernel-5_35-4_79_2_217:4.1.3.1.8.2
	Kernel-5_35-4_79_2_216:4.1.3.1.8.2
	Kernel-5_35-4_79_2_215:4.1.3.1.8.2
	Kernel-5_35-4_79_2_214:4.1.3.1.8.2
	Kernel-5_35-4_79_2_213:4.1.3.1.8.2
	Kernel-5_35-4_79_2_212:4.1.3.1.8.2
	Kernel-5_35-4_79_2_211:4.1.3.1.8.2
	Kernel-5_35-4_79_2_210:4.1.3.1.8.2
	Kernel-5_35-4_79_2_209:4.1.3.1.8.2
	Kernel-5_35-4_79_2_208:4.1.3.1.8.2
	Kernel-5_35-4_79_2_207:4.1.3.1.8.2
	Kernel-5_35-4_79_2_206:4.1.3.1.8.2
	Kernel-5_35-4_79_2_205:4.1.3.1.8.2
	Kernel-5_35-4_79_2_204:4.1.3.1.8.2
	Kernel-5_35-4_79_2_203:4.1.3.1.8.2
	Kernel-5_35-4_79_2_202:4.1.3.1.8.2
	Kernel-5_35-4_79_2_201:4.1.3.1.8.2
	Kernel-5_35-4_79_2_200:4.1.3.1.8.2
	Kernel-5_35-4_79_2_199:4.1.3.1.8.2
	Kernel-5_35-4_79_2_198:4.1.3.1.8.2
	Kernel-5_35-4_79_2_197:4.1.3.1.8.2
	Kernel-5_35-4_79_2_196:4.1.3.1.8.2
	Kernel-5_35-4_79_2_195:4.1.3.1.8.2
	Kernel-5_35-4_79_2_194:4.1.3.1.8.2
	Kernel-5_35-4_79_2_193:4.1.3.1.8.2
	Kernel-5_35-4_79_2_192:4.1.3.1.8.2
	Kernel-5_35-4_79_2_191:4.1.3.1.8.2
	Kernel-5_35-4_79_2_190:4.1.3.1.8.2
	Kernel-5_35-4_79_2_189:4.1.3.1.8.2
	Kernel-5_35-4_79_2_188:4.1.3.1.8.2
	Kernel-5_35-4_79_2_187:4.1.3.1.8.2
	Kernel-5_35-4_79_2_186:4.1.3.1.8.2
	Kernel-5_35-4_79_2_185:4.1.3.1.8.2
	Kernel-5_35-4_79_2_184:4.1.3.1.8.2
	Kernel-5_35-4_79_2_183:4.1.3.1.8.2
	Kernel-5_35-4_79_2_182:4.1.3.1.8.2
	Kernel-5_35-4_79_2_181:4.1.3.1.8.2
	Kernel-5_35-4_79_2_180:4.1.3.1.8.2
	Kernel-5_35-4_79_2_179:4.1.3.1.8.2
	Kernel-5_35-4_79_2_178:4.1.3.1.8.2
	Kernel-5_35-4_79_2_177:4.1.3.1.8.2
	Kernel-5_35-4_79_2_176:4.1.3.1.8.2
	Kernel-5_35-4_79_2_175:4.1.3.1.8.2
	Kernel-5_35-4_79_2_174:4.1.3.1.8.2
	Kernel-5_35-4_79_2_173:4.1.3.1.8.2
	Kernel-5_35-4_79_2_172:4.1.3.1.8.2
	Kernel-5_35-4_79_2_171:4.1.3.1.8.2
	Kernel-5_35-4_79_2_170:4.1.3.1.8.2
	Kernel-5_35-4_79_2_169:4.1.3.1.8.2
	Kernel-5_35-4_79_2_168:4.1.3.1.8.2
	Kernel-5_35-4_79_2_167:4.1.3.1.8.2
	Kernel-5_35-4_79_2_166:4.1.3.1.8.2
	Kernel-5_35-4_79_2_165:4.1.3.1.8.2
	RPi_merge:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_23:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_22:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_21:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_20:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_19:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_18:4.1.3.1.8.2
	Kernel-5_35-4_79_2_164:4.1.3.1.8.2
	Kernel-5_35-4_79_2_163:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_17:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_16:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_15:4.1.3.1.8.2
	Kernel-5_35-4_79_2_162:4.1.3.1.8.2
	Kernel-5_35-4_79_2_161:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_14:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_13:4.1.3.1.8.2
	Kernel-5_35-4_79_2_160:4.1.3.1.8.2
	Kernel-5_35-4_79_2_159:4.1.3.1.8.2
	Kernel-5_35-4_79_2_158:4.1.3.1.8.2
	Kernel-5_35-4_79_2_157:4.1.3.1.8.2
	Kernel-5_35-4_79_2_156:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_12:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_11:4.1.3.1.8.2
	Kernel-5_35-4_79_2_155:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_10:4.1.3.1.8.2
	Kernel-5_35-4_79_2_154:4.1.3.1.8.2
	Kernel-5_35-4_79_2_153:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_9:4.1.3.1.8.2
	Kernel-5_35-4_79_2_152:4.1.3.1.8.2
	Kernel-5_35-4_79_2_151:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_8:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_7:4.1.3.1.8.2
	Kernel-5_35-4_79_2_150:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_6:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_5:4.1.3.1.8.2
	Kernel-5_35-4_79_2_149:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_4:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_3:4.1.3.1.8.2
	Kernel-5_35-4_79_2_148:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_2:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147_2_1:4.1.3.1.8.2
	RPi:4.1.3.1.8.2.0.6
	RPi_bp:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_52_2_1:4.1.3.1.8.2
	alees_Kernel_dev:4.1.3.1.8.2.0.4
	alees_Kernel_dev_bp:4.1.3.1.8.2
	Kernel-5_35-4_79_2_147:4.1.3.1.8.2
	Kernel-5_35-4_79_2_146:4.1.3.1.8.2
	Kernel-5_35-4_79_2_145:4.1.3.1.8.2
	Kernel-5_35-4_79_2_144:4.1.3.1.8.2
	Kernel-5_35-4_79_2_143:4.1.3.1.8.2
	Kernel-5_35-4_79_2_142:4.1.3.1.8.2
	Kernel-5_35-4_79_2_141:4.1.3.1.8.2
	Kernel-5_35-4_79_2_140:4.1.3.1.8.2
	Kernel-5_35-4_79_2_139:4.1.3.1.8.2
	Kernel-5_35-4_79_2_138:4.1.3.1.8.2
	Kernel-5_35-4_79_2_137:4.1.3.1.8.2
	Kernel-5_35-4_79_2_136:4.1.3.1.8.2
	Kernel-5_35-4_79_2_135:4.1.3.1.8.2
	Kernel-5_35-4_79_2_134:4.1.3.1.8.2
	Kernel-5_35-4_79_2_133:4.1.3.1.8.2
	Kernel-5_35-4_79_2_132:4.1.3.1.8.2
	Kernel-5_35-4_79_2_131:4.1.3.1.8.2
	Kernel-5_35-4_79_2_130:4.1.3.1.8.2
	Kernel-5_35-4_79_2_129:4.1.3.1.8.2
	Kernel-5_35-4_79_2_128:4.1.3.1.8.2
	Kernel-5_35-4_79_2_127:4.1.3.1.8.2
	Kernel-5_35-4_79_2_126:4.1.3.1.8.2
	Kernel-5_35-4_79_2_125:4.1.3.1.8.2
	Kernel-5_35-4_79_2_124:4.1.3.1.8.2
	Kernel-5_35-4_79_2_123:4.1.3.1.8.2
	Cortex_merge:4.1.3.1.8.2
	Kernel-5_35-4_79_2_122:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_54:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_53:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_52:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_51:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_50:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_49:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_48:4.1.3.1.8.2
	Kernel-5_35-4_79_2_121:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_47:4.1.3.1.8.2
	Kernel-5_35-4_79_2_120:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_46:4.1.3.1.8.2
	Kernel-5_35-4_79_2_119:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_45:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_44:4.1.3.1.8.2
	Kernel-5_35-4_79_2_118:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_43:4.1.3.1.8.2
	Kernel-5_35-4_79_2_117:4.1.3.1.8.2
	Kernel-5_35-4_79_2_116:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_42:4.1.3.1.8.2
	Kernel-5_35-4_79_2_115:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_41:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_40:4.1.3.1.8.2
	Kernel-5_35-4_79_2_114:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_39:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_38:4.1.3.1.8.2
	Kernel-5_35-4_79_2_113:4.1.3.1.8.2
	Kernel-5_35-4_79_2_112:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_37:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_36:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_35:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_34:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_33:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_32:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_31:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_30:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_29:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_28:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_27:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_26:4.1.3.1.8.2
	Kernel-5_35-4_79_2_111:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_25:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_24:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_23:4.1.3.1.8.2
	Kernel-5_35-4_79_2_110:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_22:4.1.3.1.8.2
	Kernel-5_35-4_79_2_109:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_21:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_20:4.1.3.1.8.2
	Kernel-5_35-4_79_2_108:4.1.3.1.8.2
	Kernel-5_35-4_79_2_107:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_19:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_18:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_17:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_16:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_15:4.1.3.1.8.2
	Kernel-5_35-4_79_2_106:4.1.3.1.8.2
	Kernel-5_35-4_79_2_105:4.1.3.1.8.2
	Kernel-5_35-4_79_2_104:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_14:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_13:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_12:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_11:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_10:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_9:4.1.3.1.8.2
	Kernel-5_35-4_79_2_103:4.1.3.1.8.2
	Kernel-5_35-4_79_2_102:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_8:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_7:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_6:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_5:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_4:4.1.3.1.8.2
	Kernel-5_35-4_79_2_101:4.1.3.1.8.2
	Kernel-5_35-4_79_2_100:4.1.3.1.8.2
	Kernel-5_35-4_79_2_99:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_3:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_2:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98_2_1:4.1.3.1.8.2
	Cortex:4.1.3.1.8.2.0.2
	Cortex_bp:4.1.3.1.8.2
	Kernel-5_35-4_79_2_98:4.1.3.1.8.2
	Kernel-5_35-4_79_2_97:4.1.3.1.8.2
	Kernel-5_35-4_79_2_96:4.1.3.1.8.2
	Kernel-5_35-4_79_2_95:4.1.3.1.8.2
	Kernel-5_35-4_79_2_94:4.1.3.1.8.2
	Kernel-5_35-4_79_2_93:4.1.3.1.8.2
	Kernel-5_35-4_79_2_92:4.1.3.1.8.2
	Kernel-5_35-4_79_2_91:4.1.3.1.8.2
	Kernel-5_35-4_79_2_90:4.1.3.1.8.2
	Kernel-5_35-4_79_2_89:4.1.3.1.8.2
	Kernel-5_35-4_79_2_88:4.1.3.1.8.2
	Kernel-5_35-4_79_2_87:4.1.3.1.8.2
	Kernel-5_35-4_79_2_86:4.1.3.1.8.2
	Kernel-5_35-4_79_2_85:4.1.3.1.8.2
	Kernel-5_35-4_79_2_84:4.1.3.1.8.2
	Kernel-5_35-4_79_2_83:4.1.3.1.8.2
	Kernel-5_35-4_79_2_82:4.1.3.1.8.2
	Kernel-5_35-4_79_2_81:4.1.3.1.8.2
	Kernel-5_35-4_79_2_80:4.1.3.1.8.2
	Kernel-5_35-4_79_2_79:4.1.3.1.8.2
	Kernel-5_35-4_79_2_78:4.1.3.1.8.2
	Kernel-5_35-4_79_2_77:4.1.3.1.8.2
	RO_5_07:4.1.3.1.8.2
	Kernel-5_35-4_79_2_76:4.1.3.1.8.2
	Kernel-5_35-4_79_2_75:4.1.3.1.8.2
	Kernel-5_35-4_79_2_74:4.1.3.1.8.2
	Kernel-5_35-4_79_2_73:4.1.3.1.8.2
	Kernel-5_35-4_79_2_72:4.1.3.1.8.2
	Kernel-5_35-4_79_2_71:4.1.3.1.8.2
	Kernel-5_35-4_79_2_70:4.1.3.1.8.2
	Kernel-5_35-4_79_2_69:4.1.3.1.8.2
	Kernel-5_35-4_79_2_68:4.1.3.1.8.2
	Kernel-5_35-4_79_2_67:4.1.3.1.8.2
	Kernel-5_35-4_79_2_66:4.1.3.1.8.2
	Kernel-5_35-4_79_2_65:4.1.3.1.8.2
	Kernel-5_35-4_79_2_64:4.1.3.1.8.2
	Kernel-5_35-4_79_2_63:4.1.3.1.8.2
	Kernel-5_35-4_79_2_62:4.1.3.1.8.2
	Kernel-5_35-4_79_2_61:4.1.3.1.8.2
	Kernel-5_35-4_79_2_59:4.1.3.1.8.2
	Kernel-5_35-4_79_2_58:4.1.3.1.8.2
	Kernel-5_35-4_79_2_57:4.1.3.1.8.2
	Kernel-5_35-4_79_2_56:4.1.3.1.8.2
	Kernel-5_35-4_79_2_55:4.1.3.1.8.2
	Kernel-5_35-4_79_2_54:4.1.3.1.8.2
	Kernel-5_35-4_79_2_53:4.1.3.1.8.2
	Kernel-5_35-4_79_2_52:4.1.3.1.8.2
	Kernel-5_35-4_79_2_51:4.1.3.1.8.2
	Kernel-5_35-4_79_2_50:4.1.3.1.8.2
	Kernel-5_35-4_79_2_49:4.1.3.1.8.2
	Kernel-5_35-4_79_2_48:4.1.3.1.8.2
	Kernel-5_47:4.1.3.1
	Kernel-5_46-4_90_2_1:4.1.3.1
	nbingham_Kernel_FastNC_dev_bp:4.1.3.1
	nbingham_Kernel_FastNC_dev:4.1.3.1.0.12
	Kernel-5_46:4.1.3.1
	Kernel-5_45:4.1.3.1
	Kernel-5_35-4_79_2_47:4.1.3.1.8.2
	Kernel-5_35-4_79_2_46:4.1.3.1.8.2
	Kernel-5_35-4_79_2_45:4.1.3.1.8.2
	Kernel-5_35-4_79_2_44:4.1.3.1.8.2
	Kernel-5_35-4_79_2_25_2_2:4.1.3.1.8.1
	Kernel-5_35-4_79_2_43:4.1.3.1.8.2
	Kernel-5_35-4_79_2_42:4.1.3.1.8.2
	Kernel-5_35-4_79_2_41:4.1.3.1.8.2
	Kernel-5_35-4_79_2_40:4.1.3.1.8.2
	Kernel-5_35-4_79_2_39:4.1.3.1.8.2
	Kernel-5_35-4_79_2_38:4.1.3.1.8.2
	Kernel-5_35-4_79_2_37:4.1.3.1.8.2
	Kernel-5_35-4_79_2_36:4.1.3.1.8.2
	Kernel-5_35-4_79_2_35:4.1.3.1.8.2
	Kernel-5_35-4_79_2_34:4.1.3.1.8.2
	Kernel-5_35-4_79_2_33:4.1.3.1.8.2
	Kernel-5_35-4_79_2_32:4.1.3.1.8.2
	Kernel-5_44:4.1.3.1
	Kernel-5_35-4_79_2_25_2_1:4.1.3.1.8.1
	Kernel-5_43:4.1.3.1
	Kernel-5_35-4_79_2_31:4.1.3.1.8.1
	Kernel-5_35-4_79_2_30:4.1.3.1.8.1
	Kernel-5_35-4_79_2_29:4.1.3.1.8.1
	Kernel-5_35-4_79_2_28:4.1.3.1.8.1
	Kernel-5_35-4_79_2_27:4.1.3.1.8.1
	Kernel-5_35-4_79_2_26:4.1.3.1.8.1
	Kernel-5_42:4.1.3.1
	Kernel-5_41:4.1.3.1
	Kernel-5_40:4.1.3.1
	Kernel-5_35-4_79_2_25:4.1.3.1.8.1
	Kernel-5_35-4_79_2_24:4.1.3.1.8.1
	Kernel-5_35-4_79_2_23:4.1.3.1.8.1
	Kernel-5_35-4_79_2_22:4.1.3.1.8.1
	Kernel-5_35-4_79_2_21:4.1.3.1.8.1
	Kernel-5_35-4_79_2_20:4.1.3.1.8.1
	Kernel-5_35-4_79_2_19:4.1.3.1.8.1
	Kernel-5_35-4_79_2_18:4.1.3.1.8.1
	Kernel-5_35-4_79_2_17:4.1.3.1.8.1
	Kernel-5_35-4_79_2_16:4.1.3.1.8.1
	Kernel-5_35-4_79_2_15:4.1.3.1.8.1
	Kernel-5_35-4_79_2_14:4.1.3.1.8.1
	Kernel-5_39:4.1.3.1
	Kernel-5_13-4_52_2_1:4.1.3.1
	Bethany:4.1.3.1.0.10
	Kernel-5_38:4.1.3.1
	Kernel-5_35-4_79_2_13:4.1.3.1.8.1
	Kernel-5_35-4_79_2_12:4.1.3.1.8.1
	Kernel-5_35-4_79_2_11:4.1.3.1
	Kernel-5_37:4.1.3.1
	Kernel-5_35-4_79_2_10:4.1.3.1
	Kernel-5_35-4_79_2_9:4.1.3.1
	Kernel-5_36:4.1.3.1
	Kernel-5_35-4_79_2_8:4.1.3.1
	Kernel-5_35-4_79_2_7:4.1.3.1
	Kernel-5_35-4_79_2_6:4.1.3.1
	Kernel-5_35-4_79_2_5:4.1.3.1
	Kernel-5_35-4_79_2_4:4.1.3.1
	Kernel-5_35-4_79_2_3:4.1.3.1
	Kernel-5_35-4_79_2_2:4.1.3.1
	dellis_autobuild_BaseSW:4.1.3.1
	Kernel-5_35-4_79_2_1:4.1.3.1
	HAL:4.1.3.1.0.8
	Kernel-5_35:4.1.3.1
	Kernel-5_34:4.1.3.1
	Kernel-5_33:4.1.3.1
	Kernel-5_32:4.1.3.1
	Kernel-5_31:4.1.3.1
	Kernel-5_30:4.1.3.1
	Kernel-5_29:4.1.3.1
	Kernel-5_28:4.1.3.1
	Kernel-5_27:4.1.3.1
	Kernel-5_26:4.1.3.1
	Kernel-5_25:4.1.3.1
	Kernel-5_24:4.1.3.1
	Kernel-5_23:4.1.3.1
	Kernel-5_22:4.1.3.1
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Kernel-5_21:4.1.3.1
	Kernel-5_20:4.1.3.1
	Kernel-5_19:4.1.3.1
	Kernel-5_18:4.1.3.1
	Kernel-5_17:4.1.3.1
	Kernel-5_16:4.1.3.1
	Kernel-5_15:4.1.3.1
	Kernel-5_14:4.1.3.1
	Kernel-5_13:4.1.3.1
	Kernel-5_12:4.1.3.1
	Kernel-5_11:4.1.3.1
	Kernel-5_10:4.1.3.1
	Kernel-5_09:4.1.3.1
	Kernel-5_08:4.1.3.1
	Kernel-5_07:4.1.3.1
	Kernel-5_06:4.1.3.1
	Kernel-5_05:4.1.3.1
	Kernel-5_04:4.1.3.1
	Kernel-5_03:4.1.3.1
	Kernel-5_02:4.1.3.1
	Kernel-5_01:4.1.3.1
	Kernel-5_00:4.1.3.1
	Kernel-4_99:4.1.3.1
	Kernel-4_98:4.1.3.1
	Kernel-4_97:4.1.3.1
	Kernel-4_96:4.1.3.1
	Kernel-4_95:4.1.3.1
	Kernel-4_94:4.1.3.1
	Kernel-4_93:4.1.3.1
	Kernel-4_92:4.1.3.1
	Kernel-4_91:4.1.3.1
	Kernel-4_90:4.1.3.1
	dcotton_autobuild_BaseSW:4.1.3.1
	Kernel-4_89:4.1.3.1
	Kernel-4_88:4.1.3.1
	Kernel-4_87:4.1.3.1
	Kernel-4_86:4.1.3.1
	Kernel-4_85:4.1.3.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.3.1.2.3
	Kernel-4_84:4.1.3.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.3.1.2.3
	Ursula_RiscPC_bp:4.1.3.1.2.3
	Kernel-4_83:4.1.3.1
	Kernel-4_82:4.1.3.1
	Kernel-4_81:4.1.3.1
	Kernel-4_80:4.1.3.1
	Kernel-4_79:4.1.3.1
	Kernel-4_78:4.1.3.1
	Kernel-4_77:4.1.3.1
	Kernel-4_76:4.1.3.1
	Kernel-4_75:4.1.3.1
	Kernel-4_74:4.1.3.1
	Kernel-4_73:4.1.3.1
	Kernel-4_72:4.1.3.1
	Kernel-4_71:4.1.3.1
	Kernel-4_70:4.1.3.1
	Kernel-4_69:4.1.3.1
	Kernel-4_68:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1.2.3
	Ursula_RiscPC:4.1.3.1.2.3.0.2
	Kernel-4_67:4.1.3.1
	Kernel-4_66:4.1.3.1
	Kernel-4_65:4.1.3.1
	Ursula_merge:4.1.3.1
	Kernel-4_64:4.1.3.1
	mstphens_Kernel-3_81:4.1.3.1.2.3
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1.2.3
	UrsulaBuild_FinalSoftload:4.1.3.1.2.3
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1.2.3
	aglover_UrsulaBuild-05Aug1998:4.1.3.1.2.3
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1.2.3
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1.2.3
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1.2.3
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1.2.3
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1.2.3
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1.2.3
	rthornb_UrsulaBuild-27May1998:4.1.3.1.2.3
	mstphens_Kernel-3_80:4.1.3.1.2.3
	rthornb_UrsulaBuild-21May1998:4.1.3.1.2.3
	rthornb_UrsulaBuild_01May1998:4.1.3.1.2.3
	afrost_NC2_Generic:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.4
date	2016.12.13.16.42.53;	author jlee;	state Exp;
branches;
next	4.3;
commitid	aGog9bB8f4QKlQxz;

4.3
date	2016.08.02.22.10.47;	author jlee;	state Exp;
branches;
next	4.2;
commitid	CnQYuUGzojQfrMgz;

4.2
date	2016.06.30.20.08.12;	author jlee;	state Exp;
branches;
next	4.1;
commitid	IWoXxARWeuLDOwcz;

4.1
date	96.11.06.02.01.39;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.02.01.39;	author nturton;	state Exp;
branches
	4.1.3.1.2.1
	4.1.3.1.8.1;
next	;

4.1.3.1.2.1
date	97.05.21.09.30.25;	author mstphens;	state Exp;
branches;
next	4.1.3.1.2.2;

4.1.3.1.2.2
date	97.09.09.13.33.50;	author mstphens;	state Exp;
branches;
next	4.1.3.1.2.3;

4.1.3.1.2.3
date	97.10.21.15.31.31;	author mstphens;	state Exp;
branches;
next	;

4.1.3.1.8.1
date	2000.11.10.14.41.16;	author mstephen;	state Exp;
branches;
next	4.1.3.1.8.2;

4.1.3.1.8.2
date	2001.06.06.14.24.01;	author mstephen;	state Exp;
branches;
next	4.1.3.1.8.3;

4.1.3.1.8.3
date	2015.09.06.18.45.16;	author jlee;	state Exp;
branches;
next	;
commitid	9JoJW3FhqXIqWdAy;


desc
@@


4.4
log
@Reimplement AMBControl ontop of the PMP system
Detail:
  With this set of changes, each AMB node is now the owner of a fake DANode which is linked to a PMP.
  From a user's perspective the behaviour of AMBControl is the same as before, but rewriting it to use PMPs internally offers the following (potential) benefits:
  * Reduction in the amount of code which messes with the CAM & page tables, simplifying future work/maintenance. Some of the AMB ops (grow, shrink) now just call through to OS_ChangeDynamicArea. However all of the old AMB routines were well-optimised, so to avoid a big performance hit for common operations not all of them have been removed (e.g. mapslot / mapsome). Maybe one day these optimal routines will be made available for use by regular PMP DAs.
  * Removal of the slow Service_MemoryMoved / Service_PagesSafe handlers that had to do page list fixup after the core kernel had reclaimed/moved pages. Since everything is a PMP, the kernel will now deal with this on behalf of AMB.
  * Removal of a couple of other slow code paths (e.g. Do_AMB_MakeUnsparse calls from OS_ChangeDynamicArea)
  * Potential for more flexible mapping of application space in future, e.g. sparse allocation of memory to the wimp slot
  * Simpler transition to an ASID-based task swapping scheme on ARMv6+?
  Other changes of note:
  * AMB_LazyMapIn switch has been fixed up to work correctly (i.e. turning it off now disables lazy task swapping and all associated code instead of producing a build error)
  * The DANode for the current app should be accessed via the GetAppSpaceDANode macro. This will either return the current AMB DANode, or AppSpaceDANode (if e.g. pre-Wimp). However be aware that AppSpaceDANode retains the legacy behaviour of having a base + size relative to &0, while the AMB DANodes (identifiable via the PMP flag) are sane and have their base + size relative to &8000.
  * Mostly-useless DebugAborts switch removed
  * AMBPhysBin (page number -> phys addr lookup table) removed. Didn't seem to give any tangible performance benefit, and was imposing hidden restrictions on memory usage (all phys RAM fragments in PhysRamTable must be multiple of 512k). And if it really was a good optimisation, surely it should have been applied to all areas of the kernel, not just AMB!
  Other potential future improvements:
  * Turn the fake DANodes into real dynamic areas, reducing the amount of special code needed in some places, but allow the DAs to be hidden from OS_DynamicArea 3 so that apps/users won't get too confused
  * Add a generic abort trapping system to PMPs/DAs (lazy task swapping abort handler is still a special case)
  File changes:
  - s/ARM600, s/VMSAv6, s/ExtraSWIs - Remove DebugAborts
  - s/ArthurSWIs - Remove AMB service call handler dispatch
  - s/ChangeDyn - AMB_LazyMapIn switch fixes. Add alternate internal entry points for some PMP ops to allow the DANode to be specified (used by AMB)
  - s/Exceptions - Remove DebugAborts, AMB_LazyMapIn switch fixes
  - s/Kernel - Define GetAppSpaceDANode macro, AMB_LazyMapIn switch fix
  - s/MemInfo - AMB_LazyMapIn switch fixes
  - s/AMBControl/AMB - Update GETs
  - s/AMBControl/Memory - Remove block size quantisation, AMB_BlockResize (page list blocks are now allocated by PMP code)
  - s/AMBControl/Options - Remove PhysBin definitions, AMBMIRegWords (moved to Workspace file), AMB_LimpidFreePool switch. Add AMB_Debug switch.
  - s/AMBControl/Workspace - Update AMBNode to contain an embedded DANode. Move AMBMIRegWords here from Options file.
  - s/AMBControl/allocate - Fake DA node initialisation
  - s/AMBControl/deallocate - Add debug output
  - s/AMBControl/growp, growshrink, mapslot, mapsome, shrinkp - Rewrite to use PMP ops where possible, add debug output
  - s/AMBControl/main - Remove PhysBin initialisation. Update the enumerate/mjs_info call.
  - s/AMBControl/memmap - Low-level memory mapping routines updated or rewritten as appropriate.
  - s/AMBControl/readinfo - Update to cope with DANode
  - s/AMBControl/service - Remove old service call handlers
  - s/AMBControl/handler - DA handler for responding to PMP calls from OS_ChangeDynamicArea; just calls through to growpages/shrinkpages as appropriate.
Admin:
  Tested on pretty much everything currently supported


Version 5.66. Tagged as 'Kernel-5_66'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.Workspace


  [ AMB_LazyMapIn
AMBMIRegWords      * (AbsMaxAppPages+31) :SHR: 5     ;no. of words for AMBMappedInRegister
                                                     ;convenient to set this at fixed max size
                                                     ;(only 896 bytes for 28Mb AppSpace)
  ]

;
;task node format
;
                   ^  0
AMBNode_HdrStart   #  0
AMBNode_id         #  4               ;magic identifier
AMBNode_handle     #  4               ;handle for external reference
AMBNode_prev       #  4               ;ptr to previous node
AMBNode_next       #  4               ;ptr to next node
AMBNode_DANode     #  DANode_NodeSize ;DANode/PMP
AMBNode_HdrEnd     #  0
;
AMBNode_HdrSize    *  AMBNode_HdrEnd - AMBNode_HdrStart


;
;main workspace
;
                    ^  0,R12
AMBNhandles         #  4               ;total handles available
AMBNtasks           #  4               ;no. of tasks currently allocated
AMBMappedInNode     #  4               ;node ptr of mapped-in task, or 0 for none
AMBNodeHandles      #  4               ;ptr to node handle array (1 word per entry)
  [ AMB_LazyMapIn
AMBPageFlags        #  4               ;L2PT page flags to use when (lazily) mapping in pages
  ]
AMBAnchorNode       #  AMBNode_HdrSize ;dummy node - see note (1) below
;
  [ ChocolateAMB
AMBFlags            #  4               ;bits defined as below
    [ AMB_ChocTrace
AMBNmakeunsparse    #  4               ;count of no. of calls to AMB_MakeUnsparse
    ]
    [ AMB_LazyMapIn
AMBMappedInRegister #  AMBMIRegWords*4 ;1 bit per page - see note (2) below
    ]
  ]
;
AMBmaxwork          *  :INDEX:@@        ;size of main workspace (assumed to be multiple of 4 bytes)


  [ ChocolateAMB
;
;definition of bits in AMBFlags
;
AMBFlag_LazyMapIn_disable  * &80000000 ;bit  31    LazyMapIn permanent disable (eg. not running on StrongARM)
AMBFlag_LazyMapIn_suspend  * &40000000 ;bit  30    LazyMapIn suspend (controlled via AMB SWI)
                                       ;bits 29..0 reserved (0)
;
  ]

;Notes:
;
; (1) AMBAnchorNode is a dummy node with 0 page entries that forms the anchor of a
;     circular node list. This averts the need for any special case for adding or
;     removing nodes.
;
; (2) AMBMappedInRegister is a 'bitmap' of the current page mapping status of the
;     MappedInNode. This supports AMB_LazyMapIn. Bit n corresponds to the n'th page
;     of the MappedInNode; if it is set, then that page is currently mapped in. The
;     bits are packed 'little endian', so bit 0 is the LSB of word 0, bit 31 is
;     the MSB of word 0, bit 32 is the LSB of word 1 and so on.


    END
@


4.3
log
@Add support for shareable pages and additional access privileges
Detail:
  This set of changes:
  * Refactors page table entry encoding/decoding so that it's (mostly) performed via functions in the MMU files (s.ARM600, s.VMSAv6) rather than on an ad-hoc basis as was the case previously
  * Page table entry encoding/decoding performed during ROM init is also handled via the MMU functions, which resolves some cases where the wrong cache policy was in use on ARMv6+
  * Adds basic support for shareable pages - on non-uniprocessor systems all pages will be marked as shareable (however, we are currently lacking ARMops which broadcast cache maintenance operations to other cores, so safe sharing of cacheable regions isn't possible yet)
  * Adds support for the VMSA XN flag and the "privileged ROM" access permission. These are exposed via RISC OS access privileges 4 and above, taking advantage of the fact that 4 bits have always been reserved for AP values but only 4 values were defined
  * Adds OS_Memory 17 and 18 to convert RWX-style access flags to and from RISC OS access privelege numbers; this allows us to make arbitrary changes to the mappings of AP values 4+ between different OS/hardware versions, and allows software to more easily cope with cases where the most precise AP isn't available (e.g. no XN on <=ARMv5)
  * Extends OS_Memory 24 (CheckMemoryAccess) to return executability information
  * Adds exported OSMem header containing definitions for OS_Memory and OS_DynamicArea
  File changes:
  - Makefile - export C and assembler versions of hdr/OSMem
  - Resources/UK/Messages - Add more text for OS_Memory errors
  - hdr/KernelWS - Correct comment regarding DCacheCleanAddress. Allocate workspace for MMU_PPLTrans and MMU_PPLAccess.
  - hdr/OSMem - New file containing exported OS_Memory and OS_DynamicArea constants, and public page flags
  - hdr/Options - Reduce scope of ARM6support to only cover builds which require ARMv3 support
  - s/AMBControl/Workspace - Clarify AMBNode_PPL usage
  - s/AMBControl/growp, mapslot, mapsome, memmap - Use AreaFlags_ instead of AP_
  - s/AMBControl/main, memmap - Use GetPTE instead of generating page table entry manually
  - s/ARM600 - Remove old coments relating to lack of stack. Update BangCam to use GetPTE. Update PPL tables, removing PPLTransL1 (L1 entries are now derived from L2 table on demand) and adding a separate table for ARM6. Implement the ARM600 versions of the Get*PTE ('get page table entry') and Decode*Entry functions
  - s/ARMops - Add Init_PCBTrans function to allow relevant MMU_PPLTrans/MMU_PCBTrans pointers to be set up during the pre-MMU stage of ROM init. Update ARM_Analyse to set up the pointers that are used post MMU init.
  - s/ChangeDyn - Move a bunch of flags to hdr/OSMem. Rename the AP_ dynamic area flags to AreaFlags_ to avoid name clashes and confusion with the page table AP_ values exported by Hdr:MEMM.ARM600/Hdr:MEMM.VMSAv6. Also generate the relevant flags for OS_Memory 24 so that it can refer to the fixed areas by their name instead of hardcoding the permissions.
  - s/GetAll - GET Hdr:OSMem
  - s/HAL - Change initial page table setup to use DA/page flags and GetPTE instead of building page table entries manually. Simplify AllocateL2PT by removing the requirement for the user to supply the access perimssions that will be used for the area; instead for ARM6 we just assume that cacheable memory is the norm and set L1_U for any L1 entry we create here.
  - s/Kernel - Add GetPTE macro (for easier integration of Get*PTE functions) and GenPPLAccess macro (for easy generation of OS_Memory 24 flags)
  - s/MemInfo - Fixup OS_Memory 0 to not fail on seeing non-executable pages. Implement OS_Memory 17 & 18. Tidy up some error generation. Make OS_Memory 13 use GetPTE. Extend OS_Memory 24 to return (non-) executability information, to use the named CMA_ constants generated by s/ChangeDyn, and to use the Decode*Entry functions when it's necessary to decode page table entries.
  - s/NewReset - Use AreaFlags_ instead of AP_
  - s/VMSAv6 - Remove old comments relating to lack of stack. Update BangCam to use GetPTE. Update PPL tables, removing PPLTransL1 (L1 entries are now derived from L2 table on demand) and adding a separate table for shareable pages. Implement the VMSAv6 versions of the Get*PTE and Decode*Entry functions.
Admin:
  Tested on Raspberry Pi 1, Raspberry Pi 3, Iyonix, RPCEmu (ARM6 & ARM7), comparing before and after CAM and page table dumps to check for any unexpected differences


Version 5.55. Tagged as 'Kernel-5_55'
@
text
@d18 6
d33 1
a33 5
AMBNode_pagetable  #  0               ;data comprising page table from here on
AMBNode_Npages     #  4               ;no. of pages in page list
AMBNode_startaddr  #  4               ;logical address of first page (-1 means nowhere)
AMBNode_PPL        #  4               ;Page flags, as limited by DynAreaFlags_AccessMask
AMBNode_pages      #  0               ;list of page numbers from here on (1 word per page)
a46 2
AMBPhysBin          #  4               ;ptr to physical page bin array
AMBPhysBinEntries   #  4               ;no. of entries in physical page bin array
a53 1
AMBNContextSwitches #  4               ;monotonic count of total no. of task map-in's (eg. for performance tracing)
a55 2
AMBNmemmoveshrink   #  4               ;count of no. of Service_MemoryMoved shrink fixups
AMBNmemmovegrow     #  4               ;count of no. of Service_MemoryMoved grow fixups
d57 1
a57 1
AMBMappedInNpages   #  4               ;no. of pages of MappedInNode really mapped in
d59 1
@


4.2
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@d30 1
a30 1
AMBNode_PPL        #  4               ;PPL ('page protection level') for pages
@


4.1
log
@Initial revision
@
text
@a16 29
; task node format
                  ^       0
AMBNode_id        #       4     ; magic identifier
AMBNode_handle    #       4     ; handle for external reference
AMBNode_prev      #       4     ; -> previous node
AMBNode_next      #       4     ; -> next node
AMBNode_pagetable #       0     ; data comprising page table from here on
AMBNode_Npages    #       4     ; no. of pages in page list
AMBNode_startaddr #       4     ; logical address of first page (-1 means nowhere)
AMBNode_PPL       #       4     ; PPL ('page protection level') for pages
AMBNode_pages     #       0     ; list of pages from here on (1 word per page no.)


; main workspace
                ^       0,R12
AMBNhandles     #       4       ; total handles available
AMBNtasks       #       4       ; No. of tasks currently allocated
AMBMappedInNode #       4       ; node ptr of mapped-in task, or 0 for none

;ptr to node handle array (1 word per entry)
AMBNodeHandles  #       4

;ptr to physical page bin array
AMBPhysBin         #       4
AMBPhysBinEntries  #       4

;dummy node (0 page entries) forms anchor of circular node list
;this averts the need for any special case for add or remove node
AMBAnchorNode   #       (AMBNode_pages - AMBNode_id)
d18 71
a88 1
AMBmaxwork      *       :INDEX:@@
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.1.8.1
log
@reintroduce Ursula AMBControl, recoded with generic ARMop style, not debugged yet

Version 5.35, 4.79.2.12. Tagged as 'Kernel-5_35-4_79_2_12'
@
text
@d17 29
d47 1
a47 70
;
;task node format
;
                   ^  0
AMBNode_HdrStart   #  0
AMBNode_id         #  4               ;magic identifier
AMBNode_handle     #  4               ;handle for external reference
AMBNode_prev       #  4               ;ptr to previous node
AMBNode_next       #  4               ;ptr to next node
AMBNode_pagetable  #  0               ;data comprising page table from here on
AMBNode_Npages     #  4               ;no. of pages in page list
AMBNode_startaddr  #  4               ;logical address of first page (-1 means nowhere)
AMBNode_PPL        #  4               ;PPL ('page protection level') for pages
AMBNode_pages      #  0               ;list of page numbers from here on (1 word per page)
AMBNode_HdrEnd     #  0
;
AMBNode_HdrSize    *  AMBNode_HdrEnd - AMBNode_HdrStart


;
;main workspace
;
                    ^  0,R12
AMBNhandles         #  4               ;total handles available
AMBNtasks           #  4               ;no. of tasks currently allocated
AMBMappedInNode     #  4               ;node ptr of mapped-in task, or 0 for none
AMBNodeHandles      #  4               ;ptr to node handle array (1 word per entry)
AMBPhysBin          #  4               ;ptr to physical page bin array
AMBPhysBinEntries   #  4               ;no. of entries in physical page bin array
AMBAnchorNode       #  AMBNode_HdrSize ;dummy node - see note (1) below
;
  [ ChocolateAMB
AMBFlags            #  4               ;bits defined as below
AMBNContextSwitches #  4               ;monotonic count of total no. of task map-in's (eg. for performance tracing)
    [ AMB_ChocTrace
AMBNmakeunsparse    #  4               ;count of no. of calls to AMB_MakeUnsparse
AMBNmemmoveshrink   #  4               ;count of no. of Service_MemoryMoved shrink fixups
AMBNmemmovegrow     #  4               ;count of no. of Service_MemoryMoved grow fixups
    ]
AMBMappedInNpages   #  4               ;no. of pages of MappedInNode really mapped in
AMBMappedInRegister #  AMBMIRegWords*4 ;1 bit per page - see note (2) below
  ]
;
AMBmaxwork          *  :INDEX:@@        ;size of main workspace (assumed to be multiple of 4 bytes)


  [ ChocolateAMB
;
;definition of bits in AMBFlags
;
AMBFlag_LazyMapIn_disable  * &80000000 ;bit  31    LazyMapIn permanent disable (eg. not running on StrongARM)
AMBFlag_LazyMapIn_suspend  * &40000000 ;bit  30    LazyMapIn suspend (controlled via AMB SWI)
                                       ;bits 29..0 reserved (0)
;
  ]

;Notes:
;
; (1) AMBAnchorNode is a dummy node with 0 page entries that forms the anchor of a
;     circular node list. This averts the need for any special case for adding or
;     removing nodes.
;
; (2) AMBMappedInRegister is a 'bitmap' of the current page mapping status of the
;     MappedInNode. This supports AMB_LazyMapIn. Bit n corresponds to the n'th page
;     of the MappedInNode; if it is set, then that page is currently mapped in. The
;     bits are packed 'little endian', so bit 0 is the LSB of word 0, bit 31 is
;     the MSB of word 0, bit 32 is the LSB of word 1 and so on. The bits are only
;     significant when AMBMappedInNpages is > 0 (and then all AMBNode_Npages bits
;     for the MappedInNode are significant).

@


4.1.3.1.8.2
log
@Further work on Lazy task swapping:
  hooks to give correct mapping info for OS_Memory 0
  same for OS_ReadMemMapEntries
  same for OS_FindMemMapEntries
  Lazy fixup routine no longer assumes an abort in current
  app space must be a truant page. However, work in this
  area not complete (no support yet for abort handler code
  in app space itself, eg. for C trampoline)
Good to know this will be a big performance boost when
our products use one monolithic application (sarcasm).
Ta

Version 5.35, 4.79.2.32. Tagged as 'Kernel-5_35-4_79_2_32'
@
text
@d84 3
a86 1
;     the MSB of word 0, bit 32 is the LSB of word 1 and so on.
@


4.1.3.1.8.3
log
@Misc memory management tweaks & fixes
Detail:
  s/ChangeDyn - Fix OS_DynamicArea 20 to work properly with sparse & PMP DAs. It now checks against the max extent of the area rather than the current size; this matches the logic used for checking fixed system workspace areas. The call only determines the ownership of a logical address, and it's considered the caller's responsibility to check if there's actually a page at the given address.
  s/ChangeDyn - Revise OS_DynamicArea 25 to remove the redundant 'PMP page flags' entry, and to allow pages to be looked up by either PMP page index, phys page number, or DA page index
  s/ChangeDyn - Tidy up InitDynamicAreas by adding the NextFreePage routine to help determine the next page to be added to the free pool.
  s/AMBControl/Workspace, s/AMBControl/main, s/AMBControl/memmap - Fix lazy mapping in of pages to use the correct L2PT flags for the default CB cache policy
  s/AMBControl/allocate - Get rid of magic constant when extracting page flags from DA flags, and make note of the fact that assorted bits of code ignore the flags
  s/AMBControl/growp, s/AMBControl/shrinkp - Reverse the page order when growing/shrinking areas, to match OS_ChangeDynamicArea. This helps both DAs and application space to have pages allocated to them in contiguous physical order - which in turn helps produce shorter, more optimal scatter lists for DMA
Admin:
  Tested on Pandaboard


Version 5.35, 4.79.2.287. Tagged as 'Kernel-5_35-4_79_2_287'
@
text
@a46 3
  [ AMB_LazyMapIn
AMBPageFlags        #  4               ;L2PT page flags to use when (lazily) mapping in pages
  ]
@


4.1.3.1.2.1
log
@Added following enhancements:

 - Chocolate screen mapping (section mapped and cached), StrongARM only
   Phoebe h/w (IOMD 2) will have register to assist this, but code currently
   relies on data abort mechanism to keep screen up to date wrt write-back
   data cache.

 - Chocolate AMBControl task switching (lazy page mapping), StrongARM only
   Improves task swapping speed. There appears to be a StrongAEM silicon
   bug rev 2 and 3) which means that LDMIB rn, {regs includind rn} cannot
   be reliably restarted after a data abort. This stuffs Chocolate AMBControl
   (awaiting response from Digital).

Both enhancements need more work to complete for Phoebe. Chocolate AMBControl
may well have to be made dormant because of silicon bug.

Note that this kernel *will* cause problems with task switching on StrongARM,
unless Chocolate task switching is disabled via !Flavour application.
@
text
@d17 29
d47 1
a47 70
;
;task node format
;
                   ^  0
AMBNode_HdrStart   #  0
AMBNode_id         #  4               ;magic identifier
AMBNode_handle     #  4               ;handle for external reference
AMBNode_prev       #  4               ;ptr to previous node
AMBNode_next       #  4               ;ptr to next node
AMBNode_pagetable  #  0               ;data comprising page table from here on
AMBNode_Npages     #  4               ;no. of pages in page list
AMBNode_startaddr  #  4               ;logical address of first page (-1 means nowhere)
AMBNode_PPL        #  4               ;PPL ('page protection level') for pages
AMBNode_pages      #  0               ;list of page numbers from here on (1 word per page)
AMBNode_HdrEnd     #  0
;
AMBNode_HdrSize    *  AMBNode_HdrEnd - AMBNode_HdrStart


;
;main workspace
;
                    ^  0,R12
AMBNhandles         #  4               ;total handles available
AMBNtasks           #  4               ;no. of tasks currently allocated
AMBMappedInNode     #  4               ;node ptr of mapped-in task, or 0 for none
AMBNodeHandles      #  4               ;ptr to node handle array (1 word per entry)
AMBPhysBin          #  4               ;ptr to physical page bin array
AMBPhysBinEntries   #  4               ;no. of entries in physical page bin array
AMBAnchorNode       #  AMBNode_HdrSize ;dummy node - see note (1) below
;
  [ ChocolateAMB
AMBFlags            #  4               ;bits defined as below
AMBNContextSwitches #  4               ;monotonic count of total no. of task map-in's (eg. for performance tracing)
    [ AMB_ChocTrace
AMBNmakeunsparse    #  4               ;count of no. of calls to AMB_MakeUnsparse
AMBNmemmoveshrink   #  4               ;count of no. of Service_MemoryMoved shrink fixups
AMBNmemmovegrow     #  4               ;count of no. of Service_MemoryMoved grow fixups
    ]
AMBMappedInNpages   #  4               ;no. of pages of MappedInNode really mapped in
AMBMappedInRegister #  AMBMIRegWords*4 ;1 bit per page - see note (2) below
  ]
;
AMBmaxwork          *  :INDEX:@@        ;size of main workspace (assumed to be multiple of 4 bytes)


  [ ChocolateAMB
;
;definition of bits in AMBFlags
;
AMBFlag_LazyMapIn_disable  * &80000000 ;bit  32    permanent disable (eg. not running on StrongARM)
AMBFlag_LazyMapIn_suspend  * &40000000 ;bit  30    suspend (controlled via AMB SWI)
                                       ;bits 29..0 reserved (0)
;
  ]

;Notes:
;
; (1) AMBAnchorNode is a dummy node with 0 page entries that forms the anchor of a
;     circular node list. This averts the need for any special case for adding or
;     removing nodes.
;
; (2) AMBMappedInRegister is a 'bitmap' of the current page mapping status of the
;     MappedInNode. This supports AMB_LazyMapIn. Bit n corresponds to the n'th page
;     of the MappedInNode; if it is set, then that page is currently mapped in. The
;     bits are packed 'little endian', so bit 0 is the LSB of word 0, bit 31 is
;     the MSB of word 0, bit 32 is the LSB of word 1 and so on. The bits are only
;     significant when AMBMappedInNpages is > 0 (and then all AMBNode_Npages bits
;     for the MappedInNode are significant).

@


4.1.3.1.2.2
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d68 1
a68 1
AMBFlag_LazyMapIn_disable  * &80000000 ;bit  31    permanent disable (eg. not running on StrongARM)
@


4.1.3.1.2.3
log
@1) Fixes and tidy ups:
   - mapping of Cur/Sys/Sound area done more elegantly, and soft CAM info
     is now consistent with it
   - cached screen cleaning on VSync performed *after* VSync events
   - comments at top of ARM600 modernised
   - Pages_Unsafe/Safe code fixed to work properly on StrongARM with
     pages that are involved in interrupts (there is no fix for ARM8,
     since that is unlikely to be needed - an ASSERT checks use of ARM8
   - OS_DynamicArea code souped up, to be much more efficient for large
     numbers of dynamic areas (see comments near top of ChangeDyn)
   - cached screen is now suspended on h/w scroll (avoids possible cache
     incoherency)
2) API changes:
   - new OS_Memory reason code (10) allows Wimp to inform kernel of
     Wimp_ClaimFreeMemory, and can control VRAM rescue (see below)
   - new OS_ReadSysInfo reason code (6) allows reading of kernel values
     (reserved for Acorn use, eg. for SoftLoad, ROMPatch)
   - new OS_DynamicArea reason codes (6 and 7) allow for more efficient
     monitoring of dynamic areas by TaskManager (reserved for Acorn use)
3) Changes for Phoebe:
   - kernel runs a VRAM rescue process, which ensures that any VRAM not
     used for the screen is reclaimed if necessary and sinks to the bottom
     of the Free Pool. This is important for Phoebe, where VRAM is slower
     than SDRAM, but does no harm on other platforms.
   - logical copy of physical RAM is removed from memory map. This frees
     up 256M of address space that will later be used for PCI on Phoebe,
     but should do no harm on other platforms (this space is marked
     private in PRMs, so 3rd parties should not use it).
@
text
@d68 2
a69 2
AMBFlag_LazyMapIn_disable  * &80000000 ;bit  31    LazyMapIn permanent disable (eg. not running on StrongARM)
AMBFlag_LazyMapIn_suspend  * &40000000 ;bit  30    LazyMapIn suspend (controlled via AMB SWI)
@
