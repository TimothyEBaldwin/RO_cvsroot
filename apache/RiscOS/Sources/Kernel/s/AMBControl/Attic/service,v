head	4.4;
access;
symbols
	Kernel-5_54-1:4.3
	Kernel-5_65:4.3
	Kernel-5_64:4.3
	Kernel-5_63:4.3
	Kernel-5_62:4.3
	Kernel-5_61:4.3
	Kernel-5_60:4.3
	Kernel-5_59:4.3
	Kernel-5_58:4.3
	Kernel-5_57:4.3
	Kernel-5_56:4.3
	Kernel-5_55:4.3
	Kernel-5_54:4.3
	Kernel-5_53:4.3
	Kernel-5_52:4.3
	Kernel-5_51:4.3
	Kernel-5_50:4.3
	Kernel-5_49:4.3
	HAL_merge:4.2.2.4
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.2.2.4
	Kernel-5_35-4_79_2_326:4.2.2.4
	Kernel-5_35-4_79_2_325:4.2.2.4
	Kernel-5_35-4_79_2_324:4.2.2.4
	Kernel-5_35-4_79_2_323:4.2.2.4
	Kernel-5_35-4_79_2_322:4.2.2.4
	Kernel-5_35-4_79_2_321:4.2.2.4
	Kernel-5_35-4_79_2_320:4.2.2.4
	Kernel-5_35-4_79_2_319:4.2.2.4
	Kernel-5_35-4_79_2_318:4.2.2.4
	Kernel-5_35-4_79_2_317:4.2.2.4
	Kernel-5_35-4_79_2_316:4.2.2.4
	Kernel-5_35-4_79_2_315:4.2.2.4
	Kernel-5_35-4_79_2_314:4.2.2.4
	Kernel-5_35-4_79_2_313:4.2.2.4
	Kernel-5_35-4_79_2_312:4.2.2.4
	Kernel-5_35-4_79_2_311:4.2.2.4
	Kernel-5_35-4_79_2_310:4.2.2.4
	Kernel-5_35-4_79_2_309:4.2.2.4
	Kernel-5_35-4_79_2_308:4.2.2.4
	Kernel-5_35-4_79_2_307:4.2.2.4
	Kernel-5_35-4_79_2_306:4.2.2.4
	Kernel-5_35-4_79_2_305:4.2.2.4
	Kernel-5_35-4_79_2_304:4.2.2.4
	Kernel-5_35-4_79_2_303:4.2.2.4
	Kernel-5_35-4_79_2_302:4.2.2.4
	Kernel-5_35-4_79_2_301:4.2.2.4
	Kernel-5_35-4_79_2_300:4.2.2.4
	Kernel-5_35-4_79_2_299:4.2.2.4
	Kernel-5_35-4_79_2_298:4.2.2.4
	Kernel-5_35-4_79_2_297:4.2.2.4
	Kernel-5_35-4_79_2_296:4.2.2.4
	Kernel-5_35-4_79_2_295:4.2.2.4
	Kernel-5_35-4_79_2_294:4.2.2.4
	Kernel-5_35-4_79_2_293:4.2.2.4
	Kernel-5_35-4_79_2_292:4.2.2.4
	Kernel-5_35-4_79_2_291:4.2.2.4
	Kernel-5_35-4_79_2_290:4.2.2.4
	Kernel-5_35-4_79_2_289:4.2.2.4
	Kernel-5_35-4_79_2_288:4.2.2.4
	Kernel-5_35-4_79_2_287:4.2.2.4
	Kernel-5_35-4_79_2_286:4.2.2.4
	Kernel-5_35-4_79_2_285:4.2.2.4
	Kernel-5_35-4_79_2_284:4.2.2.4
	Kernel-5_35-4_79_2_283:4.2.2.4
	Kernel-5_35-4_79_2_282:4.2.2.4
	Kernel-5_35-4_79_2_281:4.2.2.4
	Kernel-5_35-4_79_2_280:4.2.2.4
	Kernel-5_35-4_79_2_279:4.2.2.4
	Kernel-5_35-4_79_2_278:4.2.2.4
	Kernel-5_35-4_79_2_277:4.2.2.4
	Kernel-5_35-4_79_2_276:4.2.2.4
	Kernel-5_35-4_79_2_275:4.2.2.4
	Kernel-5_35-4_79_2_274:4.2.2.4
	Kernel-5_35-4_79_2_273:4.2.2.4
	Kernel-5_35-4_79_2_272:4.2.2.4
	Kernel-5_35-4_79_2_271:4.2.2.4
	Kernel-5_35-4_79_2_270:4.2.2.4
	Kernel-5_35-4_79_2_269:4.2.2.4
	Kernel-5_35-4_79_2_268:4.2.2.4
	Kernel-5_35-4_79_2_267:4.2.2.4
	Kernel-5_35-4_79_2_266:4.2.2.4
	Kernel-5_35-4_79_2_265:4.2.2.4
	Kernel-5_35-4_79_2_264:4.2.2.4
	Kernel-5_35-4_79_2_263:4.2.2.4
	Kernel-5_35-4_79_2_262:4.2.2.4
	Kernel-5_35-4_79_2_261:4.2.2.4
	Kernel-5_35-4_79_2_260:4.2.2.4
	Kernel-5_35-4_79_2_259:4.2.2.4
	Kernel-5_35-4_79_2_258:4.2.2.4
	Kernel-5_35-4_79_2_257:4.2.2.4
	Kernel-5_35-4_79_2_256:4.2.2.4
	Kernel-5_35-4_79_2_255:4.2.2.4
	Kernel-5_35-4_79_2_254:4.2.2.4
	Kernel-5_35-4_79_2_253:4.2.2.4
	Kernel-5_35-4_79_2_252:4.2.2.4
	Kernel-5_35-4_79_2_251:4.2.2.4
	Kernel-5_35-4_79_2_250:4.2.2.4
	Kernel-5_35-4_79_2_249:4.2.2.4
	Kernel-5_35-4_79_2_248:4.2.2.4
	Kernel-5_35-4_79_2_247:4.2.2.4
	Kernel-5_35-4_79_2_246:4.2.2.4
	Kernel-5_35-4_79_2_245:4.2.2.4
	Kernel-5_35-4_79_2_244:4.2.2.4
	Kernel-5_35-4_79_2_243:4.2.2.4
	Kernel-5_35-4_79_2_242:4.2.2.4
	Kernel-5_35-4_79_2_241:4.2.2.4
	Kernel-5_35-4_79_2_240:4.2.2.4
	Kernel-5_35-4_79_2_239:4.2.2.4
	Kernel-5_35-4_79_2_238:4.2.2.4
	Kernel-5_35-4_79_2_237:4.2.2.4
	Kernel-5_35-4_79_2_236:4.2.2.4
	Kernel-5_35-4_79_2_235:4.2.2.4
	Kernel-5_35-4_79_2_234:4.2.2.4
	Kernel-5_35-4_79_2_233:4.2.2.4
	Kernel-5_35-4_79_2_232:4.2.2.4
	Kernel-5_35-4_79_2_231:4.2.2.4
	Kernel-5_35-4_79_2_230:4.2.2.4
	Kernel-5_35-4_79_2_229:4.2.2.4
	Kernel-5_35-4_79_2_228:4.2.2.4
	Kernel-5_35-4_79_2_227:4.2.2.4
	Kernel-5_35-4_79_2_226:4.2.2.4
	Kernel-5_35-4_79_2_225:4.2.2.4
	Kernel-5_35-4_79_2_224:4.2.2.4
	Kernel-5_35-4_79_2_223:4.2.2.4
	Kernel-5_35-4_79_2_222:4.2.2.4
	Kernel-5_35-4_79_2_221:4.2.2.4
	Kernel-5_35-4_79_2_220:4.2.2.4
	Kernel-5_35-4_79_2_219:4.2.2.4
	Kernel-5_35-4_79_2_218:4.2.2.4
	Kernel-5_35-4_79_2_217:4.2.2.4
	Kernel-5_35-4_79_2_216:4.2.2.4
	Kernel-5_35-4_79_2_215:4.2.2.4
	Kernel-5_35-4_79_2_214:4.2.2.4
	Kernel-5_35-4_79_2_213:4.2.2.4
	Kernel-5_35-4_79_2_212:4.2.2.4
	Kernel-5_35-4_79_2_211:4.2.2.4
	Kernel-5_35-4_79_2_210:4.2.2.4
	Kernel-5_35-4_79_2_209:4.2.2.4
	Kernel-5_35-4_79_2_208:4.2.2.4
	Kernel-5_35-4_79_2_207:4.2.2.4
	Kernel-5_35-4_79_2_206:4.2.2.4
	Kernel-5_35-4_79_2_205:4.2.2.4
	Kernel-5_35-4_79_2_204:4.2.2.4
	Kernel-5_35-4_79_2_203:4.2.2.4
	Kernel-5_35-4_79_2_202:4.2.2.4
	Kernel-5_35-4_79_2_201:4.2.2.4
	Kernel-5_35-4_79_2_200:4.2.2.4
	Kernel-5_35-4_79_2_199:4.2.2.4
	Kernel-5_35-4_79_2_198:4.2.2.4
	Kernel-5_35-4_79_2_197:4.2.2.4
	Kernel-5_35-4_79_2_196:4.2.2.4
	Kernel-5_35-4_79_2_195:4.2.2.4
	Kernel-5_35-4_79_2_194:4.2.2.4
	Kernel-5_35-4_79_2_193:4.2.2.4
	Kernel-5_35-4_79_2_192:4.2.2.4
	Kernel-5_35-4_79_2_191:4.2.2.4
	Kernel-5_35-4_79_2_190:4.2.2.4
	Kernel-5_35-4_79_2_189:4.2.2.4
	Kernel-5_35-4_79_2_188:4.2.2.4
	Kernel-5_35-4_79_2_187:4.2.2.4
	Kernel-5_35-4_79_2_186:4.2.2.4
	Kernel-5_35-4_79_2_185:4.2.2.4
	Kernel-5_35-4_79_2_184:4.2.2.4
	Kernel-5_35-4_79_2_183:4.2.2.4
	Kernel-5_35-4_79_2_182:4.2.2.4
	Kernel-5_35-4_79_2_181:4.2.2.4
	Kernel-5_35-4_79_2_180:4.2.2.4
	Kernel-5_35-4_79_2_179:4.2.2.4
	Kernel-5_35-4_79_2_178:4.2.2.4
	Kernel-5_35-4_79_2_177:4.2.2.4
	Kernel-5_35-4_79_2_176:4.2.2.4
	Kernel-5_35-4_79_2_175:4.2.2.4
	Kernel-5_35-4_79_2_174:4.2.2.4
	Kernel-5_35-4_79_2_173:4.2.2.4
	Kernel-5_35-4_79_2_172:4.2.2.4
	Kernel-5_35-4_79_2_171:4.2.2.4
	Kernel-5_35-4_79_2_170:4.2.2.4
	Kernel-5_35-4_79_2_169:4.2.2.4
	Kernel-5_35-4_79_2_168:4.2.2.4
	Kernel-5_35-4_79_2_167:4.2.2.4
	Kernel-5_35-4_79_2_166:4.2.2.4
	Kernel-5_35-4_79_2_165:4.2.2.4
	RPi_merge:4.2.2.4
	Kernel-5_35-4_79_2_147_2_23:4.2.2.4
	Kernel-5_35-4_79_2_147_2_22:4.2.2.4
	Kernel-5_35-4_79_2_147_2_21:4.2.2.4
	Kernel-5_35-4_79_2_147_2_20:4.2.2.4
	Kernel-5_35-4_79_2_147_2_19:4.2.2.4
	Kernel-5_35-4_79_2_147_2_18:4.2.2.4
	Kernel-5_35-4_79_2_164:4.2.2.4
	Kernel-5_35-4_79_2_163:4.2.2.4
	Kernel-5_35-4_79_2_147_2_17:4.2.2.4
	Kernel-5_35-4_79_2_147_2_16:4.2.2.4
	Kernel-5_35-4_79_2_147_2_15:4.2.2.4
	Kernel-5_35-4_79_2_162:4.2.2.4
	Kernel-5_35-4_79_2_161:4.2.2.4
	Kernel-5_35-4_79_2_147_2_14:4.2.2.4
	Kernel-5_35-4_79_2_147_2_13:4.2.2.4
	Kernel-5_35-4_79_2_160:4.2.2.4
	Kernel-5_35-4_79_2_159:4.2.2.4
	Kernel-5_35-4_79_2_158:4.2.2.4
	Kernel-5_35-4_79_2_157:4.2.2.4
	Kernel-5_35-4_79_2_156:4.2.2.4
	Kernel-5_35-4_79_2_147_2_12:4.2.2.4
	Kernel-5_35-4_79_2_147_2_11:4.2.2.4
	Kernel-5_35-4_79_2_155:4.2.2.4
	Kernel-5_35-4_79_2_147_2_10:4.2.2.4
	Kernel-5_35-4_79_2_154:4.2.2.4
	Kernel-5_35-4_79_2_153:4.2.2.4
	Kernel-5_35-4_79_2_147_2_9:4.2.2.4
	Kernel-5_35-4_79_2_152:4.2.2.4
	Kernel-5_35-4_79_2_151:4.2.2.4
	Kernel-5_35-4_79_2_147_2_8:4.2.2.4
	Kernel-5_35-4_79_2_147_2_7:4.2.2.4
	Kernel-5_35-4_79_2_150:4.2.2.4
	Kernel-5_35-4_79_2_147_2_6:4.2.2.4
	Kernel-5_35-4_79_2_147_2_5:4.2.2.4
	Kernel-5_35-4_79_2_149:4.2.2.4
	Kernel-5_35-4_79_2_147_2_4:4.2.2.4
	Kernel-5_35-4_79_2_147_2_3:4.2.2.4
	Kernel-5_35-4_79_2_148:4.2.2.4
	Kernel-5_35-4_79_2_147_2_2:4.2.2.4
	Kernel-5_35-4_79_2_147_2_1:4.2.2.4
	RPi:4.2.2.4.0.2
	RPi_bp:4.2.2.4
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2.2.2.2.1
	alees_Kernel_dev:4.2.2.2.2.1.0.2
	alees_Kernel_dev_bp:4.2.2.2.2.1
	Kernel-5_35-4_79_2_147:4.2.2.4
	Kernel-5_35-4_79_2_146:4.2.2.4
	Kernel-5_35-4_79_2_145:4.2.2.4
	Kernel-5_35-4_79_2_144:4.2.2.4
	Kernel-5_35-4_79_2_143:4.2.2.4
	Kernel-5_35-4_79_2_142:4.2.2.4
	Kernel-5_35-4_79_2_141:4.2.2.3
	Kernel-5_35-4_79_2_140:4.2.2.3
	Kernel-5_35-4_79_2_139:4.2.2.3
	Kernel-5_35-4_79_2_138:4.2.2.3
	Kernel-5_35-4_79_2_137:4.2.2.3
	Kernel-5_35-4_79_2_136:4.2.2.3
	Kernel-5_35-4_79_2_135:4.2.2.3
	Kernel-5_35-4_79_2_134:4.2.2.3
	Kernel-5_35-4_79_2_133:4.2.2.3
	Kernel-5_35-4_79_2_132:4.2.2.3
	Kernel-5_35-4_79_2_131:4.2.2.3
	Kernel-5_35-4_79_2_130:4.2.2.3
	Kernel-5_35-4_79_2_129:4.2.2.3
	Kernel-5_35-4_79_2_128:4.2.2.3
	Kernel-5_35-4_79_2_127:4.2.2.3
	Kernel-5_35-4_79_2_126:4.2.2.3
	Kernel-5_35-4_79_2_125:4.2.2.3
	Kernel-5_35-4_79_2_124:4.2.2.3
	Kernel-5_35-4_79_2_123:4.2.2.3
	Cortex_merge:4.2.2.2.2.1
	Kernel-5_35-4_79_2_122:4.2.2.2
	Kernel-5_35-4_79_2_98_2_54:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_53:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_52:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_51:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_50:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_49:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_48:4.2.2.2.2.1
	Kernel-5_35-4_79_2_121:4.2.2.2
	Kernel-5_35-4_79_2_98_2_47:4.2.2.2
	Kernel-5_35-4_79_2_120:4.2.2.2
	Kernel-5_35-4_79_2_98_2_46:4.2.2.2
	Kernel-5_35-4_79_2_119:4.2.2.2
	Kernel-5_35-4_79_2_98_2_45:4.2.2.2
	Kernel-5_35-4_79_2_98_2_44:4.2.2.2
	Kernel-5_35-4_79_2_118:4.2.2.2
	Kernel-5_35-4_79_2_98_2_43:4.2.2.2
	Kernel-5_35-4_79_2_117:4.2.2.2
	Kernel-5_35-4_79_2_116:4.2.2.2
	Kernel-5_35-4_79_2_98_2_42:4.2.2.2
	Kernel-5_35-4_79_2_115:4.2.2.2
	Kernel-5_35-4_79_2_98_2_41:4.2.2.2
	Kernel-5_35-4_79_2_98_2_40:4.2.2.2
	Kernel-5_35-4_79_2_114:4.2.2.2
	Kernel-5_35-4_79_2_98_2_39:4.2.2.2
	Kernel-5_35-4_79_2_98_2_38:4.2.2.2
	Kernel-5_35-4_79_2_113:4.2.2.2
	Kernel-5_35-4_79_2_112:4.2.2.2
	Kernel-5_35-4_79_2_98_2_37:4.2.2.2
	Kernel-5_35-4_79_2_98_2_36:4.2.2.2
	Kernel-5_35-4_79_2_98_2_35:4.2.2.2
	Kernel-5_35-4_79_2_98_2_34:4.2.2.2
	Kernel-5_35-4_79_2_98_2_33:4.2.2.2
	Kernel-5_35-4_79_2_98_2_32:4.2.2.2
	Kernel-5_35-4_79_2_98_2_31:4.2.2.2
	Kernel-5_35-4_79_2_98_2_30:4.2.2.2
	Kernel-5_35-4_79_2_98_2_29:4.2.2.2
	Kernel-5_35-4_79_2_98_2_28:4.2.2.2
	Kernel-5_35-4_79_2_98_2_27:4.2.2.2
	Kernel-5_35-4_79_2_98_2_26:4.2.2.2
	Kernel-5_35-4_79_2_111:4.2.2.2
	Kernel-5_35-4_79_2_98_2_25:4.2.2.2
	Kernel-5_35-4_79_2_98_2_24:4.2.2.2
	Kernel-5_35-4_79_2_98_2_23:4.2.2.2
	Kernel-5_35-4_79_2_110:4.2.2.2
	Kernel-5_35-4_79_2_98_2_22:4.2.2.2
	Kernel-5_35-4_79_2_109:4.2.2.2
	Kernel-5_35-4_79_2_98_2_21:4.2.2.2
	Kernel-5_35-4_79_2_98_2_20:4.2.2.2
	Kernel-5_35-4_79_2_108:4.2.2.2
	Kernel-5_35-4_79_2_107:4.2.2.2
	Kernel-5_35-4_79_2_98_2_19:4.2.2.2
	Kernel-5_35-4_79_2_98_2_18:4.2.2.2
	Kernel-5_35-4_79_2_98_2_17:4.2.2.2
	Kernel-5_35-4_79_2_98_2_16:4.2.2.2
	Kernel-5_35-4_79_2_98_2_15:4.2.2.2
	Kernel-5_35-4_79_2_106:4.2.2.2
	Kernel-5_35-4_79_2_105:4.2.2.2
	Kernel-5_35-4_79_2_104:4.2.2.2
	Kernel-5_35-4_79_2_98_2_14:4.2.2.2
	Kernel-5_35-4_79_2_98_2_13:4.2.2.2
	Kernel-5_35-4_79_2_98_2_12:4.2.2.2
	Kernel-5_35-4_79_2_98_2_11:4.2.2.2
	Kernel-5_35-4_79_2_98_2_10:4.2.2.2
	Kernel-5_35-4_79_2_98_2_9:4.2.2.2
	Kernel-5_35-4_79_2_103:4.2.2.2
	Kernel-5_35-4_79_2_102:4.2.2.2
	Kernel-5_35-4_79_2_98_2_8:4.2.2.2
	Kernel-5_35-4_79_2_98_2_7:4.2.2.2
	Kernel-5_35-4_79_2_98_2_6:4.2.2.2
	Kernel-5_35-4_79_2_98_2_5:4.2.2.2
	Kernel-5_35-4_79_2_98_2_4:4.2.2.2
	Kernel-5_35-4_79_2_101:4.2.2.2
	Kernel-5_35-4_79_2_100:4.2.2.2
	Kernel-5_35-4_79_2_99:4.2.2.2
	Kernel-5_35-4_79_2_98_2_3:4.2.2.2
	Kernel-5_35-4_79_2_98_2_2:4.2.2.2
	Kernel-5_35-4_79_2_98_2_1:4.2.2.2
	Cortex:4.2.2.2.0.2
	Cortex_bp:4.2.2.2
	Kernel-5_35-4_79_2_98:4.2.2.2
	Kernel-5_35-4_79_2_97:4.2.2.2
	Kernel-5_35-4_79_2_96:4.2.2.2
	Kernel-5_35-4_79_2_95:4.2.2.2
	Kernel-5_35-4_79_2_94:4.2.2.2
	Kernel-5_35-4_79_2_93:4.2.2.2
	Kernel-5_35-4_79_2_92:4.2.2.2
	Kernel-5_35-4_79_2_91:4.2.2.2
	Kernel-5_35-4_79_2_90:4.2.2.2
	Kernel-5_35-4_79_2_89:4.2.2.2
	Kernel-5_35-4_79_2_88:4.2.2.2
	Kernel-5_35-4_79_2_87:4.2.2.2
	Kernel-5_35-4_79_2_86:4.2.2.2
	Kernel-5_35-4_79_2_85:4.2.2.2
	Kernel-5_35-4_79_2_84:4.2.2.2
	Kernel-5_35-4_79_2_83:4.2.2.2
	Kernel-5_35-4_79_2_82:4.2.2.2
	Kernel-5_35-4_79_2_81:4.2.2.2
	Kernel-5_35-4_79_2_80:4.2.2.2
	Kernel-5_35-4_79_2_79:4.2.2.2
	Kernel-5_35-4_79_2_78:4.2.2.2
	Kernel-5_35-4_79_2_77:4.2.2.2
	RO_5_07:4.2.2.2
	Kernel-5_35-4_79_2_76:4.2.2.2
	Kernel-5_35-4_79_2_75:4.2.2.2
	Kernel-5_35-4_79_2_74:4.2.2.2
	Kernel-5_35-4_79_2_73:4.2.2.2
	Kernel-5_35-4_79_2_72:4.2.2.2
	Kernel-5_35-4_79_2_71:4.2.2.2
	Kernel-5_35-4_79_2_70:4.2.2.2
	Kernel-5_35-4_79_2_69:4.2.2.2
	Kernel-5_35-4_79_2_68:4.2.2.2
	Kernel-5_35-4_79_2_67:4.2.2.2
	Kernel-5_35-4_79_2_66:4.2.2.2
	Kernel-5_35-4_79_2_65:4.2.2.2
	Kernel-5_35-4_79_2_64:4.2.2.2
	Kernel-5_35-4_79_2_63:4.2.2.2
	Kernel-5_35-4_79_2_62:4.2.2.2
	Kernel-5_35-4_79_2_61:4.2.2.2
	Kernel-5_35-4_79_2_59:4.2.2.2
	Kernel-5_35-4_79_2_58:4.2.2.2
	Kernel-5_35-4_79_2_57:4.2.2.2
	Kernel-5_35-4_79_2_56:4.2.2.2
	Kernel-5_35-4_79_2_55:4.2.2.2
	Kernel-5_35-4_79_2_54:4.2.2.2
	Kernel-5_35-4_79_2_53:4.2.2.2
	Kernel-5_35-4_79_2_52:4.2.2.2
	Kernel-5_35-4_79_2_51:4.2.2.2
	Kernel-5_35-4_79_2_50:4.2.2.2
	Kernel-5_35-4_79_2_49:4.2.2.2
	Kernel-5_35-4_79_2_48:4.2.2.2
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.4
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2.2.2
	Kernel-5_35-4_79_2_46:4.2.2.2
	Kernel-5_35-4_79_2_45:4.2.2.2
	Kernel-5_35-4_79_2_44:4.2.2.2
	Kernel-5_35-4_79_2_25_2_2:4.2.2.2
	Kernel-5_35-4_79_2_43:4.2.2.2
	Kernel-5_35-4_79_2_42:4.2.2.2
	Kernel-5_35-4_79_2_41:4.2.2.2
	Kernel-5_35-4_79_2_40:4.2.2.2
	Kernel-5_35-4_79_2_39:4.2.2.2
	Kernel-5_35-4_79_2_38:4.2.2.2
	Kernel-5_35-4_79_2_37:4.2.2.2
	Kernel-5_35-4_79_2_36:4.2.2.2
	Kernel-5_35-4_79_2_35:4.2.2.2
	Kernel-5_35-4_79_2_34:4.2.2.2
	Kernel-5_35-4_79_2_33:4.2.2.2
	Kernel-5_35-4_79_2_32:4.2.2.2
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2.2.2
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2.2.2
	Kernel-5_35-4_79_2_30:4.2.2.2
	Kernel-5_35-4_79_2_29:4.2.2.2
	Kernel-5_35-4_79_2_28:4.2.2.2
	Kernel-5_35-4_79_2_27:4.2.2.2
	Kernel-5_35-4_79_2_26:4.2.2.2
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2.2.2
	Kernel-5_35-4_79_2_24:4.2.2.2
	Kernel-5_35-4_79_2_23:4.2.2.2
	Kernel-5_35-4_79_2_22:4.2.2.2
	Kernel-5_35-4_79_2_21:4.2.2.2
	Kernel-5_35-4_79_2_20:4.2.2.2
	Kernel-5_35-4_79_2_19:4.2.2.2
	Kernel-5_35-4_79_2_18:4.2.2.1
	Kernel-5_35-4_79_2_17:4.2.2.1
	Kernel-5_35-4_79_2_16:4.2.2.1
	Kernel-5_35-4_79_2_15:4.2.2.1
	Kernel-5_35-4_79_2_14:4.2.2.1
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.1.3.1
	Bethany:4.1.3.1.0.8
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2.2.1
	Kernel-5_35-4_79_2_12:4.2.2.1
	Kernel-5_35-4_79_2_11:4.2
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2
	Kernel-5_35-4_79_2_9:4.2
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2
	Kernel-5_35-4_79_2_7:4.2
	Kernel-5_35-4_79_2_6:4.2
	Kernel-5_35-4_79_2_5:4.2
	Kernel-5_35-4_79_2_4:4.2
	Kernel-5_35-4_79_2_3:4.2
	Kernel-5_35-4_79_2_2:4.2
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1.3.1
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Kernel-5_21:4.1.3.1
	Kernel-5_20:4.1.3.1
	Kernel-5_19:4.1.3.1
	Kernel-5_18:4.1.3.1
	Kernel-5_17:4.1.3.1
	Kernel-5_16:4.1.3.1
	Kernel-5_15:4.1.3.1
	Kernel-5_14:4.1.3.1
	Kernel-5_13:4.1.3.1
	Kernel-5_12:4.1.3.1
	Kernel-5_11:4.1.3.1
	Kernel-5_10:4.1.3.1
	Kernel-5_09:4.1.3.1
	Kernel-5_08:4.1.3.1
	Kernel-5_07:4.1.3.1
	Kernel-5_06:4.1.3.1
	Kernel-5_05:4.1.3.1
	Kernel-5_04:4.1.3.1
	Kernel-5_03:4.1.3.1
	Kernel-5_02:4.1.3.1
	Kernel-5_01:4.1.3.1
	Kernel-5_00:4.1.3.1
	Kernel-4_99:4.1.3.1
	Kernel-4_98:4.1.3.1
	Kernel-4_97:4.1.3.1
	Kernel-4_96:4.1.3.1
	Kernel-4_95:4.1.3.1
	Kernel-4_94:4.1.3.1
	Kernel-4_93:4.1.3.1
	Kernel-4_92:4.1.3.1
	Kernel-4_91:4.1.3.1
	Kernel-4_90:4.1.3.1
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.1.3.1
	Kernel-4_88:4.1.3.1
	Kernel-4_87:4.1.3.1
	Kernel-4_86:4.1.3.1
	Kernel-4_85:4.1.3.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.3.1.2.2
	Kernel-4_84:4.1.3.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.3.1.2.2
	Ursula_RiscPC_bp:4.1.3.1.2.2
	Kernel-4_83:4.1.3.1
	Kernel-4_82:4.1.3.1
	Kernel-4_81:4.1.3.1
	Kernel-4_80:4.1.3.1
	Kernel-4_79:4.1.3.1
	Kernel-4_78:4.1.3.1
	Kernel-4_77:4.1.3.1
	Kernel-4_76:4.1.3.1
	Kernel-4_75:4.1.3.1
	Kernel-4_74:4.1.3.1
	Kernel-4_73:4.1.3.1
	Kernel-4_72:4.1.3.1
	Kernel-4_71:4.1.3.1
	Kernel-4_70:4.1.3.1
	Kernel-4_69:4.1.3.1
	Kernel-4_68:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1.2.2
	Ursula_RiscPC:4.1.3.1.2.2.0.2
	Kernel-4_67:4.1.3.1
	Kernel-4_66:4.1.3.1
	Kernel-4_65:4.1.3.1
	Ursula_merge:4.1.3.1
	Kernel-4_64:4.1.3.1
	mstphens_Kernel-3_81:4.1.3.1.2.2
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1.2.2
	UrsulaBuild_FinalSoftload:4.1.3.1.2.2
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1.2.2
	aglover_UrsulaBuild-05Aug1998:4.1.3.1.2.2
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1.2.2
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1.2.2
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1.2.2
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1.2.2
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1.2.2
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1.2.2
	rthornb_UrsulaBuild-27May1998:4.1.3.1.2.2
	mstphens_Kernel-3_80:4.1.3.1.2.2
	rthornb_UrsulaBuild-21May1998:4.1.3.1.2.2
	rthornb_UrsulaBuild_01May1998:4.1.3.1.2.2
	afrost_NC2_Generic:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.4
date	2016.12.13.16.42.54;	author jlee;	state dead;
branches;
next	4.3;
commitid	aGog9bB8f4QKlQxz;

4.3
date	2016.06.30.20.08.12;	author jlee;	state Exp;
branches;
next	4.2;
commitid	IWoXxARWeuLDOwcz;

4.2
date	2000.04.04.14.27.34;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.06.02.01.38;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.2.2.1
date	2000.11.10.14.41.16;	author mstephen;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2001.03.07.15.12.58;	author kbracey;	state Exp;
branches
	4.2.2.2.2.1;
next	4.2.2.3;

4.2.2.3
date	2011.11.26.21.11.20;	author jlee;	state Exp;
branches;
next	4.2.2.4;
commitid	cI3W0zbtALQG6TIv;

4.2.2.4
date	2012.03.24.10.53.06;	author jlee;	state Exp;
branches;
next	;
commitid	EOHPEfMPeKCxR7Yv;

4.2.2.2.2.1
date	2011.08.08.23.28.30;	author jlee;	state Exp;
branches;
next	;
commitid	D7rzILnwRRSXoLuv;

4.1.3.1
date	96.11.06.02.01.38;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	;

4.1.3.1.2.1
date	97.05.21.09.30.36;	author mstphens;	state Exp;
branches;
next	4.1.3.1.2.2;

4.1.3.1.2.2
date	97.09.09.13.33.55;	author mstphens;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Reimplement AMBControl ontop of the PMP system
Detail:
  With this set of changes, each AMB node is now the owner of a fake DANode which is linked to a PMP.
  From a user's perspective the behaviour of AMBControl is the same as before, but rewriting it to use PMPs internally offers the following (potential) benefits:
  * Reduction in the amount of code which messes with the CAM & page tables, simplifying future work/maintenance. Some of the AMB ops (grow, shrink) now just call through to OS_ChangeDynamicArea. However all of the old AMB routines were well-optimised, so to avoid a big performance hit for common operations not all of them have been removed (e.g. mapslot / mapsome). Maybe one day these optimal routines will be made available for use by regular PMP DAs.
  * Removal of the slow Service_MemoryMoved / Service_PagesSafe handlers that had to do page list fixup after the core kernel had reclaimed/moved pages. Since everything is a PMP, the kernel will now deal with this on behalf of AMB.
  * Removal of a couple of other slow code paths (e.g. Do_AMB_MakeUnsparse calls from OS_ChangeDynamicArea)
  * Potential for more flexible mapping of application space in future, e.g. sparse allocation of memory to the wimp slot
  * Simpler transition to an ASID-based task swapping scheme on ARMv6+?
  Other changes of note:
  * AMB_LazyMapIn switch has been fixed up to work correctly (i.e. turning it off now disables lazy task swapping and all associated code instead of producing a build error)
  * The DANode for the current app should be accessed via the GetAppSpaceDANode macro. This will either return the current AMB DANode, or AppSpaceDANode (if e.g. pre-Wimp). However be aware that AppSpaceDANode retains the legacy behaviour of having a base + size relative to &0, while the AMB DANodes (identifiable via the PMP flag) are sane and have their base + size relative to &8000.
  * Mostly-useless DebugAborts switch removed
  * AMBPhysBin (page number -> phys addr lookup table) removed. Didn't seem to give any tangible performance benefit, and was imposing hidden restrictions on memory usage (all phys RAM fragments in PhysRamTable must be multiple of 512k). And if it really was a good optimisation, surely it should have been applied to all areas of the kernel, not just AMB!
  Other potential future improvements:
  * Turn the fake DANodes into real dynamic areas, reducing the amount of special code needed in some places, but allow the DAs to be hidden from OS_DynamicArea 3 so that apps/users won't get too confused
  * Add a generic abort trapping system to PMPs/DAs (lazy task swapping abort handler is still a special case)
  File changes:
  - s/ARM600, s/VMSAv6, s/ExtraSWIs - Remove DebugAborts
  - s/ArthurSWIs - Remove AMB service call handler dispatch
  - s/ChangeDyn - AMB_LazyMapIn switch fixes. Add alternate internal entry points for some PMP ops to allow the DANode to be specified (used by AMB)
  - s/Exceptions - Remove DebugAborts, AMB_LazyMapIn switch fixes
  - s/Kernel - Define GetAppSpaceDANode macro, AMB_LazyMapIn switch fix
  - s/MemInfo - AMB_LazyMapIn switch fixes
  - s/AMBControl/AMB - Update GETs
  - s/AMBControl/Memory - Remove block size quantisation, AMB_BlockResize (page list blocks are now allocated by PMP code)
  - s/AMBControl/Options - Remove PhysBin definitions, AMBMIRegWords (moved to Workspace file), AMB_LimpidFreePool switch. Add AMB_Debug switch.
  - s/AMBControl/Workspace - Update AMBNode to contain an embedded DANode. Move AMBMIRegWords here from Options file.
  - s/AMBControl/allocate - Fake DA node initialisation
  - s/AMBControl/deallocate - Add debug output
  - s/AMBControl/growp, growshrink, mapslot, mapsome, shrinkp - Rewrite to use PMP ops where possible, add debug output
  - s/AMBControl/main - Remove PhysBin initialisation. Update the enumerate/mjs_info call.
  - s/AMBControl/memmap - Low-level memory mapping routines updated or rewritten as appropriate.
  - s/AMBControl/readinfo - Update to cope with DANode
  - s/AMBControl/service - Remove old service call handlers
  - s/AMBControl/handler - DA handler for responding to PMP calls from OS_ChangeDynamicArea; just calls through to growpages/shrinkpages as appropriate.
Admin:
  Tested on pretty much everything currently supported


Version 5.66. Tagged as 'Kernel-5_66'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.service

; routines hanging on (kernel direct equiv. of) memory service calls


;Service_MemoryMoved
;
;  if there is a mapped-in node then recheck which and how many pages it owns
;
;  it is only necessary to:
;    1) reset node's idea of Npages to agree with no. of pages in app space
;    2) if Npages has increased, find the page numbers for new pages [and update
;       the mapped in list, if LazyMapIn]
;  ie. page numbers of existing pages are not messed with
;
AMBsrv_memorymoved ROUT
        Push   "R3-R6,R12,LR"

        LDR     R12,=ZeroPage+AMBControl_ws
        LDR     R12,[R12]
        CMP     R12,#0
        Pull    "R3-R6,R12,PC",EQ          ;AMBControl not initialised yet!

        LDR     R4,AMBMappedInNode
        CMP     R4,#0
        Pull    "R3-R6,R12,PC",EQ          ;done if nothing mapped in

        LDR     R3,[R4,#AMBNode_Npages]

        LDR     R6,=ZeroPage+AppSpaceDANode
        LDR     R6,[R6,#DANode_Size]
        SUB     R6,R6,#ApplicationStart
        MOV     R6,R6,LSR #Log2PageSize

        CMP     R6,R3
        STRNE   R6,[R4,#AMBNode_Npages]    ;update Npages
  [ AMB_LazyMapIn
        Pull    "R3-R6,R12,PC",EQ          ;done if Npages same
        BLT     %FT22                      ;shrink
  |
        Pull    "R3-R6,R12,PC",LE          ;done if Npages same, or shrink
  ]

        MOV     R5,#ApplicationStart
        ADD     R5,R5,R3,LSL #Log2PageSize ;first logical address to find
        ADD     R4,R4,#AMBNode_pages
        ADD     R4,R4,R3,LSL #2            ;first page number word to use
        SUB     R3,R6,R3                   ;no. of pages to find (grow number)
        BL      AMB_FindMemMapEntries

  [ AMB_LazyMapIn
        ;if Npages has grown, update AMBMappedInNpages and set bits in bitmap for
        ;new pages, since these will be mapped in.
        ;
;  Debug AMB,"AMBsrv +Npages ",R3
    [ AMB_ChocTrace
        LDR     R5,AMBNmemmovegrow
        ADD     R5,R5,#1
        STR     R5,AMBNmemmovegrow
    ]
        LDR     R5,AMBFlags
        TST     R5,#AMBFlag_LazyMapIn_disable :OR: AMBFlag_LazyMapIn_suspend
        BNE     %FT21
        LDR     R5,AMBMappedInNpages
        ADD     R5,R5,R3
        STR     R5,AMBMappedInNpages
        LDR     R4,AMBMappedInNode
        LDR     R5,[R4,#AMBNode_Npages]
        SUB     R5,R5,R3
        ADR     R6,AMBMappedInRegister
        ADD     R6,R6,R5,LSR #5-2        ;first word of bitmap affected
        BIC     R6,R6,#3
        AND     R5,R5,#31                ;first bit of word
        MOV     R4,#1
        MOV     R5,R4,LSL R5             ;bitmap mask
        LDR     R4,[R6],#4
10
        ORR     R4,R4,R5
        SUBS    R3,R3,#1
        STREQ   R4,[R6,#-4]
        BEQ     %FT20
        MOVS    R5,R5,LSL #1
        BNE     %BT10
        STR     R4,[R6,#-4]
        MOV     R4,#-1
12
        CMP     R3,#32
        BLT     %FT14
        STR     R4,[R6],#4
        SUBS    R3,R3,#32
        BEQ     %FT20
        B       %BT12
14
        MOV     R5,#1
        LDR     R4,[R6],#4
        B       %BT10
20
21
        Pull    "R3-R6,R12,PC"

22
        SUB     R3,R3,R6                 ;no. of pages removed from app space (known unsparse before removal)
;  Debug AMB,"AMBsrv -Npages ",R3
    [ AMB_ChocTrace
        LDR     R5,AMBNmemmoveshrink
        ADD     R5,R5,#1
        STR     R5,AMBNmemmoveshrink
    ]
        LDR     R5,AMBFlags
        TST     R5,#AMBFlag_LazyMapIn_disable :OR: AMBFlag_LazyMapIn_suspend
        BNE     %FT41
        LDR     R5,AMBMappedInNpages
        SUB     R5,R5,R3
        STR     R5,AMBMappedInNpages
        LDR     R4,AMBMappedInNode
        LDR     R5,[R4,#AMBNode_Npages]
        ADR     R6,AMBMappedInRegister
        ADD     R6,R6,R5,LSR #5-2        ;first word of bitmap affected
        BIC     R6,R6,#3
        AND     R5,R5,#31                ;first bit of word
        MOV     R4,#1
        MOV     R5,R4,LSL R5             ;bitmap mask
        LDR     R4,[R6],#4
30
        BIC     R4,R4,R5
        SUBS    R3,R3,#1
        STREQ   R4,[R6,#-4]
        BEQ     %FT40
        MOVS    R5,R5,LSL #1
        BNE     %BT30
        STR     R4,[R6,#-4]
        MOV     R4,#0
32
        CMP     R3,#32
        BLT     %FT34
        STR     R4,[R6],#4
        SUBS    R3,R3,#32
        BEQ     %FT40
        B       %BT32
34
        MOV     R5,#1
        LDR     R4,[R6],#4
        B       %BT30
40
41
  ] ;AMB_LazyMapIn

        Pull    "R3-R6,R12,PC"


;Service_PagesSafe
;  entry: R2 =  no. pages involved,
;         R3 -> page block describing state before
;         R4 -> page block describing state after
;
; action: fix-up page numbers in page lists of nodes as necessary
;
AMBsrv_pagessafe ROUT
        Push   "R0-R1,R5-R10,R12,LR"

        LDR     R12,=ZeroPage+AMBControl_ws
        LDR     R12,[R12]
        CMP     R12,#0
        Pull   "R0-R1,R5-R10,R12,PC",EQ    ;AMBControl not initialised yet!

        LDR    R0,AMBNtasks
        CMP    R0,#0
        Pull   "R0-R1,R5-R10,R12,PC",EQ    ;no nodes to check

;speed-up - list of pages tends to span a narrow range of page numbers, so
;            use min,max limits to skip search
        MOV    R9,#&7FFFFFFF
        MOV    R10,#0
        MOV    R0,R3
        MOV    R1,R2
00
        LDR    R5,[R0],#12
        CMP    R9,R5
        MOVGT  R9,R5         ;remember minimum 'before' page no. in R9
        CMP    R10,R5
        MOVLT  R10,R5        ;remember maximum 'before' page no. in R10
        SUBS   R1,R1,#1
        BNE    %BT00

        ADR    R0,AMBAnchorNode
        MOV    R1,R0
        Push   "R0,R1"
        B      %FT03
01
;check pages for this node
        LDR    R5,[R0,#AMBNode_Npages]
        CMP    R5,#0
        BEQ    %FT04         ;skip if node has zero pages
        ADD    R6,R0,#AMBNode_pages
        Push   "R0,R1"
02
;for each page in node
        LDR     R7,[R6]      ;page no. from node
        CMP     R7,R9
        BLT     %FT13        ;not in list ( < 'before' min)
        CMP     R7,R10
        BGT     %FT13        ;not in list ( > 'before' max)
;oh dear! search of before,after lists required
        MOV     LR,R2
        MOV     R0,R3
        MOV     R1,R4
11
        LDR     R8,[R0],#12  ;next page from before list
        CMP     R8,R7        ;matches node page?
        BEQ     %FT12
        ADD     R1,R1,#12    ;step the after list
        SUBS    LR,LR,#1
        BNE     %BT11
        B       %FT13        ;done pages in node,not matched
12
        LDR     R8,[R1]      ;fetch new page number from after list
        STR     R8,[R6]      ;store it for node
13
        ADD    R6,R6,#4      ;next page in node
        SUBS   R5,R5,#1
        BNE    %BT02
03
        Pull   "R0,R1"
04
;next node
        LDR    R0,[R0,#AMBNode_next]
        CMP    R0,R1                 ;done if back at anchor node
        BNE    %BT01
        Pull    "R0-R1,R5-R10,R12,PC"

    END

@


4.3
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d24 1
a24 1
;  I believe it should only be necessary to
d26 3
a28 2
;    2) find the page numbers for new pages, if Npages has increased
;  ie. I believe it is not necessary to recheck page numbers for whole node
d30 1
a30 1
AMBsrv_memorymoved
d33 1
a33 1
        MOV     R12,#AMBControl_ws
d44 1
a44 1
        LDR     R6,=AppSpaceDANode
d51 4
d56 1
d64 98
d172 1
a172 1
AMBsrv_pagessafe
d175 1
a175 1
        MOV     R12,#AMBControl_ws
@


4.2.2.1
log
@reintroduce Ursula AMBControl, recoded with generic ARMop style, not debugged yet

Version 5.35, 4.79.2.12. Tagged as 'Kernel-5_35-4_79_2_12'
@
text
@d24 1
a24 1
;  it is only necessary to:
d26 2
a27 3
;    2) if Npages has increased, find the page numbers for new pages [and update
;       the mapped in list, if LazyMapIn]
;  ie. page numbers of existing pages are not messed with
d29 1
a29 1
AMBsrv_memorymoved ROUT
d35 1
a35 1
        Pull    "R3-R6,R12,PC",EQ,^        ;AMBControl not initialised yet!
d39 1
a39 1
        Pull    "R3-R6,R12,PC",EQ,^        ;done if nothing mapped in
d50 1
a50 6
  [ AMB_LazyMapIn
        Pull    "R3-R6,R12,PC",EQ,^        ;done if Npages same
        BLT     %FT22                      ;shrink
  |
        Pull    "R3-R6,R12,PC",LE,^        ;done if Npages same, or shrink
  ]
d58 1
a58 99

  [ AMB_LazyMapIn
        ;if Npages has grown, update AMBMappedInNpages and set bits in bitmap for
        ;new pages, since these will be mapped in.
        ;
;  Debug AMB,"AMBsrv +Npages ",R3
    [ AMB_ChocTrace
        LDR     R5,AMBNmemmovegrow
        ADD     R5,R5,#1
        STR     R5,AMBNmemmovegrow
    ]
        LDR     R5,AMBFlags
        TST     R5,#AMBFlag_LazyMapIn_disable :OR AMBFlag_LazyMapIn_suspend
        BNE     %FT21
        LDR     R5,AMBMappedInNpages
        ADD     R5,R5,R3
        STR     R5,AMBMappedInNpages
        LDR     R4,AMBMappedInNode
        LDR     R5,[R4,#AMBNode_Npages]
        SUB     R5,R5,R3
        ADR     R6,AMBMappedInRegister
        ADD     R6,R6,R5,LSR #5-2        ;first word of bitmap affected
        BIC     R6,R6,#3
        AND     R5,R5,#31                ;first bit of word
        MOV     R4,#1
        MOV     R5,R4,LSL R5             ;bitmap mask
        LDR     R4,[R6],#4
10
        ORR     R4,R4,R5
        SUBS    R3,R3,#1
        STREQ   R4,[R6,#-4]
        BEQ     %FT20
        MOVS    R5,R5,LSL #1
        BNE     %BT10
        STR     R4,[R6,#-4]
        MOV     R4,#-1
12
        CMP     R3,#32
        BLT     %FT14
        STR     R4,[R6],#4
        SUBS    R3,R3,#32
        BEQ     %FT20
        B       %BT12
14
        MOV     R5,#1
        LDR     R4,[R6],#4
        B       %BT10
20
21
        Pull    "R3-R6,R12,PC",,^

22
        SUB     R3,R3,R6                 ;no. of pages removed from app space (known unsparse before removal)
;  Debug AMB,"AMBsrv -Npages ",R3
    [ AMB_ChocTrace
        LDR     R5,AMBNmemmoveshrink
        ADD     R5,R5,#1
        STR     R5,AMBNmemmoveshrink
    ]
        LDR     R5,AMBFlags
        TST     R5,#AMBFlag_LazyMapIn_disable :OR AMBFlag_LazyMapIn_suspend
        BNE     %FT41
        LDR     R5,AMBMappedInNpages
        SUB     R5,R5,R3
        STR     R5,AMBMappedInNpages
        LDR     R4,AMBMappedInNode
        LDR     R5,[R4,#AMBNode_Npages]
        ADR     R6,AMBMappedInRegister
        ADD     R6,R6,R5,LSR #5-2        ;first word of bitmap affected
        BIC     R6,R6,#3
        AND     R5,R5,#31                ;first bit of word
        MOV     R4,#1
        MOV     R5,R4,LSL R5             ;bitmap mask
        LDR     R4,[R6],#4
30
        BIC     R4,R4,R5
        SUBS    R3,R3,#1
        STREQ   R4,[R6,#-4]
        BEQ     %FT40
        MOVS    R5,R5,LSL #1
        BNE     %BT30
        STR     R4,[R6,#-4]
        MOV     R4,#0
32
        CMP     R3,#32
        BLT     %FT34
        STR     R4,[R6],#4
        SUBS    R3,R3,#32
        BEQ     %FT40
        B       %BT32
34
        MOV     R5,#1
        LDR     R4,[R6],#4
        B       %BT30
40
41
  ] ;AMB_LazyMapIn

        Pull    "R3-R6,R12,PC",,^
d68 1
a68 1
AMBsrv_pagessafe ROUT
d74 1
a74 1
        Pull   "R0-R1,R5-R10,R12,PC",EQ,^  ;AMBControl not initialised yet!
d78 1
a78 1
        Pull   "R0-R1,R5-R10,R12,PC",EQ,^  ;no nodes to check
d91 1
a91 1
        MOVLT  R10,R5        ;remember maximum 'before' page no. in R10  
d130 1
a130 1
        SUBS   R5,R5,#1        
d139 1
a139 1
        Pull    "R0-R1,R5-R10,R12,PC",,^
@


4.2.2.2
log
@Customer L-y HAL-y IIC-y type stuff. It's great.
@
text
@d36 1
a36 1
        Pull    "R3-R6,R12,PC",EQ          ;AMBControl not initialised yet!
d40 1
a40 1
        Pull    "R3-R6,R12,PC",EQ          ;done if nothing mapped in
d52 1
a52 1
        Pull    "R3-R6,R12,PC",EQ          ;done if Npages same
d55 1
a55 1
        Pull    "R3-R6,R12,PC",LE          ;done if Npages same, or shrink
d76 1
a76 1
        TST     R5,#AMBFlag_LazyMapIn_disable :OR: AMBFlag_LazyMapIn_suspend
d113 1
a113 1
        Pull    "R3-R6,R12,PC"
d162 1
a162 1
        Pull    "R3-R6,R12,PC"
d178 1
a178 1
        Pull   "R0-R1,R5-R10,R12,PC",EQ    ;AMBControl not initialised yet!
d182 1
a182 1
        Pull   "R0-R1,R5-R10,R12,PC",EQ    ;no nodes to check
d195 1
a195 1
        MOVLT  R10,R5        ;remember maximum 'before' page no. in R10
d234 1
a234 1
        SUBS   R5,R5,#1
d243 1
a243 1
        Pull    "R0-R1,R5-R10,R12,PC"
@


4.2.2.3
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d33 1
a33 1
        LDR     R12,=ZeroPage+AMBControl_ws
d44 1
a44 1
        LDR     R6,=ZeroPage+AppSpaceDANode
d175 1
a175 1
        LDR     R12,=ZeroPage+AMBControl_ws
@


4.2.2.4
log
@Fix asasm 2.00 error
Detail:
  s/AMBControl/service - Fix missing colon on end of :OR: operator
Admin:
  Identical binary under objasm


Version 5.35, 4.79.2.142. Tagged as 'Kernel-5_35-4_79_2_142'
@
text
@d124 1
a124 1
        TST     R5,#AMBFlag_LazyMapIn_disable :OR: AMBFlag_LazyMapIn_suspend
@


4.2.2.2.2.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@d33 1
a33 1
        LDR     R12,=ZeroPage+AMBControl_ws
d44 1
a44 1
        LDR     R6,=ZeroPage+AppSpaceDANode
d175 1
a175 1
        LDR     R12,=ZeroPage+AMBControl_ws
@


4.1
log
@Initial revision
@
text
@d35 1
a35 1
        Pull    "R3-R6,R12,PC",EQ,^        ;AMBControl not initialised yet!
d39 1
a39 1
        Pull    "R3-R6,R12,PC",EQ,^        ;done if nothing mapped in
d50 1
a50 1
        Pull    "R3-R6,R12,PC",LE,^        ;done if Npages same, or shrink
d58 1
a58 1
        Pull    "R3-R6,R12,PC",,^
d74 1
a74 1
        Pull   "R0-R1,R5-R10,R12,PC",EQ,^  ;AMBControl not initialised yet!
d78 1
a78 1
        Pull   "R0-R1,R5-R10,R12,PC",EQ,^  ;no nodes to check
d91 1
a91 1
        MOVLT  R10,R5        ;remember maximum 'before' page no. in R10  
d130 1
a130 1
        SUBS   R5,R5,#1        
d139 1
a139 1
        Pull    "R0-R1,R5-R10,R12,PC",,^
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.1.2.1
log
@Added following enhancements:

 - Chocolate screen mapping (section mapped and cached), StrongARM only
   Phoebe h/w (IOMD 2) will have register to assist this, but code currently
   relies on data abort mechanism to keep screen up to date wrt write-back
   data cache.

 - Chocolate AMBControl task switching (lazy page mapping), StrongARM only
   Improves task swapping speed. There appears to be a StrongAEM silicon
   bug rev 2 and 3) which means that LDMIB rn, {regs includind rn} cannot
   be reliably restarted after a data abort. This stuffs Chocolate AMBControl
   (awaiting response from Digital).

Both enhancements need more work to complete for Phoebe. Chocolate AMBControl
may well have to be made dormant because of silicon bug.

Note that this kernel *will* cause problems with task switching on StrongARM,
unless Chocolate task switching is disabled via !Flavour application.
@
text
@d24 1
a24 1
;  it is only necessary to:
d26 2
a27 3
;    2) if Npages has increased, find the page numbers for new pages [and update
;       the mapped in list, if LazyMapIn]
;  ie. page numbers of existing pages are not messed with
d29 1
a29 1
AMBsrv_memorymoved ROUT
a49 9
  [ AMB_LazyMapIn
        Pull    "R3-R6,R12,PC",EQ,^        ;done if Npages same
    [ {FALSE} ;debug
      LDR r5,[r4,#AMBNode_handle]
      Debug AMB,"AMBsrv MappedInNode handle",R5
      Debug AMB,"AMBsrv Npages old new",R3,R6
    ]
        BLT     %FT22                      ;shrink
  |
a50 1
  ]
a57 110

  [ AMB_LazyMapIn
        ;if Npages has grown, update AMBMappedInNpages and set bits in bitmap for
        ;new pages, since these will be mapped in.
        ;
;  Debug AMB,"AMBsrv +Npages ",R3
    [ AMB_ChocTrace
        LDR     R5,AMBNmemmovegrow
        ADD     R5,R5,#1
        STR     R5,AMBNmemmovegrow
    ]
        LDR     R5,AMBFlags
        TST     R5,#AMBFlag_LazyMapIn_disable :OR AMBFlag_LazyMapIn_suspend
        BNE     %FT21
        LDR     R5,AMBMappedInNpages
        ADD     R5,R5,R3
        STR     R5,AMBMappedInNpages
        LDR     R4,AMBMappedInNode
        LDR     R5,[R4,#AMBNode_Npages]
        SUB     R5,R5,R3
        ADR     R6,AMBMappedInRegister
        ADD     R6,R6,R5,LSR #5-2        ;first word of bitmap affected
        BIC     R6,R6,#3
        AND     R5,R5,#31                ;first bit of word
        MOV     R4,#1
        MOV     R5,R4,LSL R5             ;bitmap mask
        LDR     R4,[R6],#4
10
        ORR     R4,R4,R5
        SUBS    R3,R3,#1
        STREQ   R4,[R6,#-4]
        BEQ     %FT20
        MOVS    R5,R5,LSL #1
        BNE     %BT10
        STR     R4,[R6,#-4]
        MOV     R4,#-1
12
        CMP     R3,#32
        BLT     %FT14
        STR     R4,[R6],#4
        SUBS    R3,R3,#32
        BEQ     %FT20
        B       %BT12
14
        MOV     R5,#1
        LDR     R4,[R6],#4
        B       %BT10
20
    [ {FALSE} ; debug :LAND: debugAMB
        Push    "r0,lr"
        MOV     r0,#2
        BL      AMB_ConsistencyCheck
        Pull    "r0,lr"
    ]
21
        Pull    "R3-R6,R12,PC",,^

22
        SUB     R3,R3,R6                 ;no. of pages removed from app space (known unsparse before removal)
;  Debug AMB,"AMBsrv -Npages ",R3
    [ AMB_ChocTrace
        LDR     R5,AMBNmemmoveshrink
        ADD     R5,R5,#1
        STR     R5,AMBNmemmoveshrink
    ]
        LDR     R5,AMBFlags
        TST     R5,#AMBFlag_LazyMapIn_disable :OR AMBFlag_LazyMapIn_suspend
        BNE     %FT41
        LDR     R5,AMBMappedInNpages
        SUB     R5,R5,R3
        STR     R5,AMBMappedInNpages
        LDR     R4,AMBMappedInNode
        LDR     R5,[R4,#AMBNode_Npages]
        ADR     R6,AMBMappedInRegister
        ADD     R6,R6,R5,LSR #5-2        ;first word of bitmap affected
        BIC     R6,R6,#3
        AND     R5,R5,#31                ;first bit of word
        MOV     R4,#1
        MOV     R5,R4,LSL R5             ;bitmap mask
        LDR     R4,[R6],#4
30
        BIC     R4,R4,R5
        SUBS    R3,R3,#1
        STREQ   R4,[R6,#-4]
        BEQ     %FT40
        MOVS    R5,R5,LSL #1
        BNE     %BT30
        STR     R4,[R6,#-4]
        MOV     R4,#0
32
        CMP     R3,#32
        BLT     %FT34
        STR     R4,[R6],#4
        SUBS    R3,R3,#32
        BEQ     %FT40
        B       %BT32
34
        MOV     R5,#1
        LDR     R4,[R6],#4
        B       %BT30
40
    [ {FALSE} ;debug :LAND: debugAMB
        Push    "r0,lr"
        MOV     r0,#3
        BL      AMB_ConsistencyCheck
        Pull    "r0,lr"
    ]
41
  ] ;AMB_LazyMapIn

d68 1
a68 1
AMBsrv_pagessafe ROUT
@


4.1.3.1.2.2
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d53 5
d117 6
d170 6
@
