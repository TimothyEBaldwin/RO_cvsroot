head	4.9;
access;
symbols
	Kernel-6_14:4.9
	Kernel-6_01-3:4.8
	Kernel-6_13:4.9
	Kernel-6_12:4.9
	Kernel-6_11:4.9
	Kernel-6_10:4.9
	Kernel-6_09:4.9
	Kernel-6_08-4_129_2_10:4.8.2.1
	Kernel-6_08-4_129_2_9:4.8.2.1
	Kernel-6_08:4.9
	Kernel-6_07:4.9
	Kernel-6_06:4.8
	Kernel-6_05-4_129_2_8:4.8
	Kernel-6_05:4.8
	Kernel-6_04:4.8
	Kernel-6_03:4.8
	Kernel-6_01-2:4.8
	Kernel-6_01-4_146_2_1:4.8
	Kernel-6_02:4.8
	Kernel-6_01-1:4.8
	Kernel-6_01:4.8
	Kernel-6_00:4.8
	Kernel-5_99:4.8
	Kernel-5_98:4.8
	Kernel-5_97-4_129_2_7:4.8
	Kernel-5_97:4.8
	Kernel-5_96:4.8
	Kernel-5_95:4.8
	Kernel-5_94:4.8
	Kernel-5_93:4.8
	Kernel-5_92:4.8
	Kernel-5_91:4.8
	Kernel-5_90:4.8
	Kernel-5_89-4_129_2_6:4.8
	Kernel-5_89:4.8
	Kernel-5_88-4_129_2_5:4.8
	Kernel-5_88-4_129_2_4:4.8
	Kernel-5_88:4.8
	Kernel-5_87:4.8
	Kernel-5_86-4_129_2_3:4.8
	Kernel-5_86-4_129_2_2:4.8
	Kernel-5_86-4_129_2_1:4.8
	Kernel-5_86:4.8
	SMP:4.8.0.2
	SMP_bp:4.8
	Kernel-5_85:4.8
	Kernel-5_54-1:4.8
	Kernel-5_84:4.8
	Kernel-5_83:4.8
	Kernel-5_82:4.8
	Kernel-5_81:4.8
	Kernel-5_80:4.8
	Kernel-5_79:4.8
	Kernel-5_78:4.8
	Kernel-5_77:4.8
	Kernel-5_76:4.8
	Kernel-5_75:4.8
	Kernel-5_74:4.8
	Kernel-5_73:4.8
	Kernel-5_72:4.8
	Kernel-5_71:4.8
	Kernel-5_70:4.8
	Kernel-5_69:4.8
	Kernel-5_68:4.8
	Kernel-5_67:4.8
	Kernel-5_66:4.8
	Kernel-5_65:4.8
	Kernel-5_64:4.8
	Kernel-5_63:4.8
	Kernel-5_62:4.8
	Kernel-5_61:4.8
	Kernel-5_60:4.8
	Kernel-5_59:4.8
	Kernel-5_58:4.8
	Kernel-5_57:4.8
	Kernel-5_56:4.8
	Kernel-5_55:4.8
	Kernel-5_54:4.8
	Kernel-5_53:4.8
	Kernel-5_52:4.8
	Kernel-5_51:4.8
	Kernel-5_50:4.8
	Kernel-5_49:4.8
	HAL_merge:4.5.2.3
	Kernel-5_48:4.7
	Kernel-5_35-4_79_2_327:4.5.2.3
	Kernel-5_35-4_79_2_326:4.5.2.3
	Kernel-5_35-4_79_2_325:4.5.2.3
	Kernel-5_35-4_79_2_324:4.5.2.3
	Kernel-5_35-4_79_2_323:4.5.2.3
	Kernel-5_35-4_79_2_322:4.5.2.3
	Kernel-5_35-4_79_2_321:4.5.2.3
	Kernel-5_35-4_79_2_320:4.5.2.3
	Kernel-5_35-4_79_2_319:4.5.2.3
	Kernel-5_35-4_79_2_318:4.5.2.3
	Kernel-5_35-4_79_2_317:4.5.2.3
	Kernel-5_35-4_79_2_316:4.5.2.3
	Kernel-5_35-4_79_2_315:4.5.2.3
	Kernel-5_35-4_79_2_314:4.5.2.3
	Kernel-5_35-4_79_2_313:4.5.2.3
	Kernel-5_35-4_79_2_312:4.5.2.3
	Kernel-5_35-4_79_2_311:4.5.2.3
	Kernel-5_35-4_79_2_310:4.5.2.3
	Kernel-5_35-4_79_2_309:4.5.2.3
	Kernel-5_35-4_79_2_308:4.5.2.3
	Kernel-5_35-4_79_2_307:4.5.2.3
	Kernel-5_35-4_79_2_306:4.5.2.3
	Kernel-5_35-4_79_2_305:4.5.2.3
	Kernel-5_35-4_79_2_304:4.5.2.3
	Kernel-5_35-4_79_2_303:4.5.2.3
	Kernel-5_35-4_79_2_302:4.5.2.3
	Kernel-5_35-4_79_2_301:4.5.2.3
	Kernel-5_35-4_79_2_300:4.5.2.3
	Kernel-5_35-4_79_2_299:4.5.2.3
	Kernel-5_35-4_79_2_298:4.5.2.3
	Kernel-5_35-4_79_2_297:4.5.2.3
	Kernel-5_35-4_79_2_296:4.5.2.3
	Kernel-5_35-4_79_2_295:4.5.2.3
	Kernel-5_35-4_79_2_294:4.5.2.3
	Kernel-5_35-4_79_2_293:4.5.2.3
	Kernel-5_35-4_79_2_292:4.5.2.3
	Kernel-5_35-4_79_2_291:4.5.2.3
	Kernel-5_35-4_79_2_290:4.5.2.3
	Kernel-5_35-4_79_2_289:4.5.2.3
	Kernel-5_35-4_79_2_288:4.5.2.3
	Kernel-5_35-4_79_2_287:4.5.2.3
	Kernel-5_35-4_79_2_286:4.5.2.3
	Kernel-5_35-4_79_2_285:4.5.2.3
	Kernel-5_35-4_79_2_284:4.5.2.3
	Kernel-5_35-4_79_2_283:4.5.2.3
	Kernel-5_35-4_79_2_282:4.5.2.3
	Kernel-5_35-4_79_2_281:4.5.2.3
	Kernel-5_35-4_79_2_280:4.5.2.3
	Kernel-5_35-4_79_2_279:4.5.2.3
	Kernel-5_35-4_79_2_278:4.5.2.3
	Kernel-5_35-4_79_2_277:4.5.2.3
	Kernel-5_35-4_79_2_276:4.5.2.3
	Kernel-5_35-4_79_2_275:4.5.2.3
	Kernel-5_35-4_79_2_274:4.5.2.3
	Kernel-5_35-4_79_2_273:4.5.2.3
	Kernel-5_35-4_79_2_272:4.5.2.3
	Kernel-5_35-4_79_2_271:4.5.2.3
	Kernel-5_35-4_79_2_270:4.5.2.3
	Kernel-5_35-4_79_2_269:4.5.2.3
	Kernel-5_35-4_79_2_268:4.5.2.3
	Kernel-5_35-4_79_2_267:4.5.2.3
	Kernel-5_35-4_79_2_266:4.5.2.3
	Kernel-5_35-4_79_2_265:4.5.2.3
	Kernel-5_35-4_79_2_264:4.5.2.3
	Kernel-5_35-4_79_2_263:4.5.2.3
	Kernel-5_35-4_79_2_262:4.5.2.3
	Kernel-5_35-4_79_2_261:4.5.2.3
	Kernel-5_35-4_79_2_260:4.5.2.3
	Kernel-5_35-4_79_2_259:4.5.2.3
	Kernel-5_35-4_79_2_258:4.5.2.3
	Kernel-5_35-4_79_2_257:4.5.2.3
	Kernel-5_35-4_79_2_256:4.5.2.3
	Kernel-5_35-4_79_2_255:4.5.2.3
	Kernel-5_35-4_79_2_254:4.5.2.3
	Kernel-5_35-4_79_2_253:4.5.2.3
	Kernel-5_35-4_79_2_252:4.5.2.3
	Kernel-5_35-4_79_2_251:4.5.2.3
	Kernel-5_35-4_79_2_250:4.5.2.3
	Kernel-5_35-4_79_2_249:4.5.2.3
	Kernel-5_35-4_79_2_248:4.5.2.3
	Kernel-5_35-4_79_2_247:4.5.2.3
	Kernel-5_35-4_79_2_246:4.5.2.3
	Kernel-5_35-4_79_2_245:4.5.2.3
	Kernel-5_35-4_79_2_244:4.5.2.3
	Kernel-5_35-4_79_2_243:4.5.2.3
	Kernel-5_35-4_79_2_242:4.5.2.3
	Kernel-5_35-4_79_2_241:4.5.2.3
	Kernel-5_35-4_79_2_240:4.5.2.3
	Kernel-5_35-4_79_2_239:4.5.2.3
	Kernel-5_35-4_79_2_238:4.5.2.3
	Kernel-5_35-4_79_2_237:4.5.2.3
	Kernel-5_35-4_79_2_236:4.5.2.3
	Kernel-5_35-4_79_2_235:4.5.2.3
	Kernel-5_35-4_79_2_234:4.5.2.3
	Kernel-5_35-4_79_2_233:4.5.2.3
	Kernel-5_35-4_79_2_232:4.5.2.3
	Kernel-5_35-4_79_2_231:4.5.2.3
	Kernel-5_35-4_79_2_230:4.5.2.3
	Kernel-5_35-4_79_2_229:4.5.2.3
	Kernel-5_35-4_79_2_228:4.5.2.3
	Kernel-5_35-4_79_2_227:4.5.2.3
	Kernel-5_35-4_79_2_226:4.5.2.3
	Kernel-5_35-4_79_2_225:4.5.2.3
	Kernel-5_35-4_79_2_224:4.5.2.3
	Kernel-5_35-4_79_2_223:4.5.2.3
	Kernel-5_35-4_79_2_222:4.5.2.3
	Kernel-5_35-4_79_2_221:4.5.2.3
	Kernel-5_35-4_79_2_220:4.5.2.3
	Kernel-5_35-4_79_2_219:4.5.2.3
	Kernel-5_35-4_79_2_218:4.5.2.3
	Kernel-5_35-4_79_2_217:4.5.2.3
	Kernel-5_35-4_79_2_216:4.5.2.3
	Kernel-5_35-4_79_2_215:4.5.2.3
	Kernel-5_35-4_79_2_214:4.5.2.3
	Kernel-5_35-4_79_2_213:4.5.2.3
	Kernel-5_35-4_79_2_212:4.5.2.3
	Kernel-5_35-4_79_2_211:4.5.2.3
	Kernel-5_35-4_79_2_210:4.5.2.3
	Kernel-5_35-4_79_2_209:4.5.2.3
	Kernel-5_35-4_79_2_208:4.5.2.3
	Kernel-5_35-4_79_2_207:4.5.2.3
	Kernel-5_35-4_79_2_206:4.5.2.3
	Kernel-5_35-4_79_2_205:4.5.2.3
	Kernel-5_35-4_79_2_204:4.5.2.3
	Kernel-5_35-4_79_2_203:4.5.2.3
	Kernel-5_35-4_79_2_202:4.5.2.3
	Kernel-5_35-4_79_2_201:4.5.2.3
	Kernel-5_35-4_79_2_200:4.5.2.3
	Kernel-5_35-4_79_2_199:4.5.2.3
	Kernel-5_35-4_79_2_198:4.5.2.3
	Kernel-5_35-4_79_2_197:4.5.2.3
	Kernel-5_35-4_79_2_196:4.5.2.3
	Kernel-5_35-4_79_2_195:4.5.2.3
	Kernel-5_35-4_79_2_194:4.5.2.3
	Kernel-5_35-4_79_2_193:4.5.2.3
	Kernel-5_35-4_79_2_192:4.5.2.3
	Kernel-5_35-4_79_2_191:4.5.2.3
	Kernel-5_35-4_79_2_190:4.5.2.3
	Kernel-5_35-4_79_2_189:4.5.2.3
	Kernel-5_35-4_79_2_188:4.5.2.3
	Kernel-5_35-4_79_2_187:4.5.2.3
	Kernel-5_35-4_79_2_186:4.5.2.3
	Kernel-5_35-4_79_2_185:4.5.2.3
	Kernel-5_35-4_79_2_184:4.5.2.3
	Kernel-5_35-4_79_2_183:4.5.2.3
	Kernel-5_35-4_79_2_182:4.5.2.3
	Kernel-5_35-4_79_2_181:4.5.2.3
	Kernel-5_35-4_79_2_180:4.5.2.3
	Kernel-5_35-4_79_2_179:4.5.2.3
	Kernel-5_35-4_79_2_178:4.5.2.3
	Kernel-5_35-4_79_2_177:4.5.2.3
	Kernel-5_35-4_79_2_176:4.5.2.3
	Kernel-5_35-4_79_2_175:4.5.2.3
	Kernel-5_35-4_79_2_174:4.5.2.3
	Kernel-5_35-4_79_2_173:4.5.2.3
	Kernel-5_35-4_79_2_172:4.5.2.3
	Kernel-5_35-4_79_2_171:4.5.2.3
	Kernel-5_35-4_79_2_170:4.5.2.3
	Kernel-5_35-4_79_2_169:4.5.2.3
	Kernel-5_35-4_79_2_168:4.5.2.3
	Kernel-5_35-4_79_2_167:4.5.2.3
	Kernel-5_35-4_79_2_166:4.5.2.3
	Kernel-5_35-4_79_2_165:4.5.2.3
	RPi_merge:4.5.2.3
	Kernel-5_35-4_79_2_147_2_23:4.5.2.3
	Kernel-5_35-4_79_2_147_2_22:4.5.2.3
	Kernel-5_35-4_79_2_147_2_21:4.5.2.3
	Kernel-5_35-4_79_2_147_2_20:4.5.2.3
	Kernel-5_35-4_79_2_147_2_19:4.5.2.3
	Kernel-5_35-4_79_2_147_2_18:4.5.2.3
	Kernel-5_35-4_79_2_164:4.5.2.3
	Kernel-5_35-4_79_2_163:4.5.2.3
	Kernel-5_35-4_79_2_147_2_17:4.5.2.3
	Kernel-5_35-4_79_2_147_2_16:4.5.2.3
	Kernel-5_35-4_79_2_147_2_15:4.5.2.3
	Kernel-5_35-4_79_2_162:4.5.2.3
	Kernel-5_35-4_79_2_161:4.5.2.3
	Kernel-5_35-4_79_2_147_2_14:4.5.2.3
	Kernel-5_35-4_79_2_147_2_13:4.5.2.3
	Kernel-5_35-4_79_2_160:4.5.2.3
	Kernel-5_35-4_79_2_159:4.5.2.3
	Kernel-5_35-4_79_2_158:4.5.2.3
	Kernel-5_35-4_79_2_157:4.5.2.3
	Kernel-5_35-4_79_2_156:4.5.2.3
	Kernel-5_35-4_79_2_147_2_12:4.5.2.3
	Kernel-5_35-4_79_2_147_2_11:4.5.2.3
	Kernel-5_35-4_79_2_155:4.5.2.3
	Kernel-5_35-4_79_2_147_2_10:4.5.2.3
	Kernel-5_35-4_79_2_154:4.5.2.3
	Kernel-5_35-4_79_2_153:4.5.2.3
	Kernel-5_35-4_79_2_147_2_9:4.5.2.3
	Kernel-5_35-4_79_2_152:4.5.2.3
	Kernel-5_35-4_79_2_151:4.5.2.3
	Kernel-5_35-4_79_2_147_2_8:4.5.2.3
	Kernel-5_35-4_79_2_147_2_7:4.5.2.3
	Kernel-5_35-4_79_2_150:4.5.2.3
	Kernel-5_35-4_79_2_147_2_6:4.5.2.3
	Kernel-5_35-4_79_2_147_2_5:4.5.2.3
	Kernel-5_35-4_79_2_149:4.5.2.3
	Kernel-5_35-4_79_2_147_2_4:4.5.2.3
	Kernel-5_35-4_79_2_147_2_3:4.5.2.3
	Kernel-5_35-4_79_2_148:4.5.2.3
	Kernel-5_35-4_79_2_147_2_2:4.5.2.3
	Kernel-5_35-4_79_2_147_2_1:4.5.2.3
	RPi:4.5.2.3.0.2
	RPi_bp:4.5.2.3
	Kernel-5_35-4_79_2_98_2_52_2_1:4.5.2.2.2.1
	alees_Kernel_dev:4.5.2.2.2.1.0.2
	alees_Kernel_dev_bp:4.5.2.2.2.1
	Kernel-5_35-4_79_2_147:4.5.2.3
	Kernel-5_35-4_79_2_146:4.5.2.3
	Kernel-5_35-4_79_2_145:4.5.2.3
	Kernel-5_35-4_79_2_144:4.5.2.3
	Kernel-5_35-4_79_2_143:4.5.2.3
	Kernel-5_35-4_79_2_142:4.5.2.3
	Kernel-5_35-4_79_2_141:4.5.2.3
	Kernel-5_35-4_79_2_140:4.5.2.3
	Kernel-5_35-4_79_2_139:4.5.2.3
	Kernel-5_35-4_79_2_138:4.5.2.3
	Kernel-5_35-4_79_2_137:4.5.2.3
	Kernel-5_35-4_79_2_136:4.5.2.3
	Kernel-5_35-4_79_2_135:4.5.2.3
	Kernel-5_35-4_79_2_134:4.5.2.3
	Kernel-5_35-4_79_2_133:4.5.2.3
	Kernel-5_35-4_79_2_132:4.5.2.3
	Kernel-5_35-4_79_2_131:4.5.2.3
	Kernel-5_35-4_79_2_130:4.5.2.3
	Kernel-5_35-4_79_2_129:4.5.2.3
	Kernel-5_35-4_79_2_128:4.5.2.3
	Kernel-5_35-4_79_2_127:4.5.2.3
	Kernel-5_35-4_79_2_126:4.5.2.3
	Kernel-5_35-4_79_2_125:4.5.2.3
	Kernel-5_35-4_79_2_124:4.5.2.3
	Kernel-5_35-4_79_2_123:4.5.2.3
	Cortex_merge:4.5.2.2.2.1
	Kernel-5_35-4_79_2_122:4.5.2.2
	Kernel-5_35-4_79_2_98_2_54:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_53:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_52:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_51:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_50:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_49:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_48:4.5.2.2.2.1
	Kernel-5_35-4_79_2_121:4.5.2.2
	Kernel-5_35-4_79_2_98_2_47:4.5.2.2
	Kernel-5_35-4_79_2_120:4.5.2.2
	Kernel-5_35-4_79_2_98_2_46:4.5.2.2
	Kernel-5_35-4_79_2_119:4.5.2.2
	Kernel-5_35-4_79_2_98_2_45:4.5.2.2
	Kernel-5_35-4_79_2_98_2_44:4.5.2.2
	Kernel-5_35-4_79_2_118:4.5.2.2
	Kernel-5_35-4_79_2_98_2_43:4.5.2.2
	Kernel-5_35-4_79_2_117:4.5.2.2
	Kernel-5_35-4_79_2_116:4.5.2.2
	Kernel-5_35-4_79_2_98_2_42:4.5.2.2
	Kernel-5_35-4_79_2_115:4.5.2.2
	Kernel-5_35-4_79_2_98_2_41:4.5.2.2
	Kernel-5_35-4_79_2_98_2_40:4.5.2.2
	Kernel-5_35-4_79_2_114:4.5.2.2
	Kernel-5_35-4_79_2_98_2_39:4.5.2.2
	Kernel-5_35-4_79_2_98_2_38:4.5.2.2
	Kernel-5_35-4_79_2_113:4.5.2.2
	Kernel-5_35-4_79_2_112:4.5.2.2
	Kernel-5_35-4_79_2_98_2_37:4.5.2.2
	Kernel-5_35-4_79_2_98_2_36:4.5.2.2
	Kernel-5_35-4_79_2_98_2_35:4.5.2.2
	Kernel-5_35-4_79_2_98_2_34:4.5.2.2
	Kernel-5_35-4_79_2_98_2_33:4.5.2.2
	Kernel-5_35-4_79_2_98_2_32:4.5.2.2
	Kernel-5_35-4_79_2_98_2_31:4.5.2.2
	Kernel-5_35-4_79_2_98_2_30:4.5.2.2
	Kernel-5_35-4_79_2_98_2_29:4.5.2.2
	Kernel-5_35-4_79_2_98_2_28:4.5.2.2
	Kernel-5_35-4_79_2_98_2_27:4.5.2.2
	Kernel-5_35-4_79_2_98_2_26:4.5.2.2
	Kernel-5_35-4_79_2_111:4.5.2.2
	Kernel-5_35-4_79_2_98_2_25:4.5.2.2
	Kernel-5_35-4_79_2_98_2_24:4.5.2.2
	Kernel-5_35-4_79_2_98_2_23:4.5.2.2
	Kernel-5_35-4_79_2_110:4.5.2.2
	Kernel-5_35-4_79_2_98_2_22:4.5.2.2
	Kernel-5_35-4_79_2_109:4.5.2.2
	Kernel-5_35-4_79_2_98_2_21:4.5.2.2
	Kernel-5_35-4_79_2_98_2_20:4.5.2.2
	Kernel-5_35-4_79_2_108:4.5.2.2
	Kernel-5_35-4_79_2_107:4.5.2.2
	Kernel-5_35-4_79_2_98_2_19:4.5.2.2
	Kernel-5_35-4_79_2_98_2_18:4.5.2.2
	Kernel-5_35-4_79_2_98_2_17:4.5.2.2
	Kernel-5_35-4_79_2_98_2_16:4.5.2.2
	Kernel-5_35-4_79_2_98_2_15:4.5.2.2
	Kernel-5_35-4_79_2_106:4.5.2.2
	Kernel-5_35-4_79_2_105:4.5.2.2
	Kernel-5_35-4_79_2_104:4.5.2.2
	Kernel-5_35-4_79_2_98_2_14:4.5.2.2
	Kernel-5_35-4_79_2_98_2_13:4.5.2.2
	Kernel-5_35-4_79_2_98_2_12:4.5.2.2
	Kernel-5_35-4_79_2_98_2_11:4.5.2.2
	Kernel-5_35-4_79_2_98_2_10:4.5.2.2
	Kernel-5_35-4_79_2_98_2_9:4.5.2.2
	Kernel-5_35-4_79_2_103:4.5.2.2
	Kernel-5_35-4_79_2_102:4.5.2.2
	Kernel-5_35-4_79_2_98_2_8:4.5.2.2
	Kernel-5_35-4_79_2_98_2_7:4.5.2.2
	Kernel-5_35-4_79_2_98_2_6:4.5.2.2
	Kernel-5_35-4_79_2_98_2_5:4.5.2.2
	Kernel-5_35-4_79_2_98_2_4:4.5.2.2
	Kernel-5_35-4_79_2_101:4.5.2.2
	Kernel-5_35-4_79_2_100:4.5.2.2
	Kernel-5_35-4_79_2_99:4.5.2.2
	Kernel-5_35-4_79_2_98_2_3:4.5.2.2
	Kernel-5_35-4_79_2_98_2_2:4.5.2.2
	Kernel-5_35-4_79_2_98_2_1:4.5.2.2
	Cortex:4.5.2.2.0.2
	Cortex_bp:4.5.2.2
	Kernel-5_35-4_79_2_98:4.5.2.2
	Kernel-5_35-4_79_2_97:4.5.2.2
	Kernel-5_35-4_79_2_96:4.5.2.2
	Kernel-5_35-4_79_2_95:4.5.2.2
	Kernel-5_35-4_79_2_94:4.5.2.2
	Kernel-5_35-4_79_2_93:4.5.2.2
	Kernel-5_35-4_79_2_92:4.5.2.2
	Kernel-5_35-4_79_2_91:4.5.2.2
	Kernel-5_35-4_79_2_90:4.5.2.2
	Kernel-5_35-4_79_2_89:4.5.2.2
	Kernel-5_35-4_79_2_88:4.5.2.2
	Kernel-5_35-4_79_2_87:4.5.2.2
	Kernel-5_35-4_79_2_86:4.5.2.2
	Kernel-5_35-4_79_2_85:4.5.2.2
	Kernel-5_35-4_79_2_84:4.5.2.2
	Kernel-5_35-4_79_2_83:4.5.2.2
	Kernel-5_35-4_79_2_82:4.5.2.2
	Kernel-5_35-4_79_2_81:4.5.2.2
	Kernel-5_35-4_79_2_80:4.5.2.2
	Kernel-5_35-4_79_2_79:4.5.2.2
	Kernel-5_35-4_79_2_78:4.5.2.2
	Kernel-5_35-4_79_2_77:4.5.2.2
	RO_5_07:4.5.2.2
	Kernel-5_35-4_79_2_76:4.5.2.2
	Kernel-5_35-4_79_2_75:4.5.2.2
	Kernel-5_35-4_79_2_74:4.5.2.2
	Kernel-5_35-4_79_2_73:4.5.2.2
	Kernel-5_35-4_79_2_72:4.5.2.2
	Kernel-5_35-4_79_2_71:4.5.2.2
	Kernel-5_35-4_79_2_70:4.5.2.2
	Kernel-5_35-4_79_2_69:4.5.2.2
	Kernel-5_35-4_79_2_68:4.5.2.2
	Kernel-5_35-4_79_2_67:4.5.2.2
	Kernel-5_35-4_79_2_66:4.5.2.2
	Kernel-5_35-4_79_2_65:4.5.2.2
	Kernel-5_35-4_79_2_64:4.5.2.2
	Kernel-5_35-4_79_2_63:4.5.2.2
	Kernel-5_35-4_79_2_62:4.5.2.2
	Kernel-5_35-4_79_2_61:4.5.2.2
	Kernel-5_35-4_79_2_59:4.5.2.2
	Kernel-5_35-4_79_2_58:4.5.2.2
	Kernel-5_35-4_79_2_57:4.5.2.2
	Kernel-5_35-4_79_2_56:4.5.2.2
	Kernel-5_35-4_79_2_55:4.5.2.2
	Kernel-5_35-4_79_2_54:4.5.2.2
	Kernel-5_35-4_79_2_53:4.5.2.2
	Kernel-5_35-4_79_2_52:4.5.2.2
	Kernel-5_35-4_79_2_51:4.5.2.2
	Kernel-5_35-4_79_2_50:4.5.2.2
	Kernel-5_35-4_79_2_49:4.5.2.2
	Kernel-5_35-4_79_2_48:4.5.2.2
	Kernel-5_47:4.6
	Kernel-5_46-4_90_2_1:4.6
	nbingham_Kernel_FastNC_dev_bp:4.6
	nbingham_Kernel_FastNC_dev:4.6.0.2
	Kernel-5_46:4.6
	Kernel-5_45:4.6
	Kernel-5_35-4_79_2_47:4.5.2.2
	Kernel-5_35-4_79_2_46:4.5.2.2
	Kernel-5_35-4_79_2_45:4.5.2.2
	Kernel-5_35-4_79_2_44:4.5.2.2
	Kernel-5_35-4_79_2_25_2_2:4.5.2.2
	Kernel-5_35-4_79_2_43:4.5.2.2
	Kernel-5_35-4_79_2_42:4.5.2.2
	Kernel-5_35-4_79_2_41:4.5.2.2
	Kernel-5_35-4_79_2_40:4.5.2.2
	Kernel-5_35-4_79_2_39:4.5.2.2
	Kernel-5_35-4_79_2_38:4.5.2.2
	Kernel-5_35-4_79_2_37:4.5.2.2
	Kernel-5_35-4_79_2_36:4.5.2.2
	Kernel-5_35-4_79_2_35:4.5.2.2
	Kernel-5_35-4_79_2_34:4.5.2.2
	Kernel-5_35-4_79_2_33:4.5.2.2
	Kernel-5_35-4_79_2_32:4.5.2.2
	Kernel-5_44:4.6
	Kernel-5_35-4_79_2_25_2_1:4.5.2.2
	Kernel-5_43:4.6
	Kernel-5_35-4_79_2_31:4.5.2.2
	Kernel-5_35-4_79_2_30:4.5.2.2
	Kernel-5_35-4_79_2_29:4.5.2.2
	Kernel-5_35-4_79_2_28:4.5.2.2
	Kernel-5_35-4_79_2_27:4.5.2.2
	Kernel-5_35-4_79_2_26:4.5.2.2
	Kernel-5_42:4.6
	Kernel-5_41:4.6
	Kernel-5_40:4.6
	Kernel-5_35-4_79_2_25:4.5.2.2
	Kernel-5_35-4_79_2_24:4.5.2.2
	Kernel-5_35-4_79_2_23:4.5.2.2
	Kernel-5_35-4_79_2_22:4.5.2.2
	Kernel-5_35-4_79_2_21:4.5.2.2
	Kernel-5_35-4_79_2_20:4.5.2.2
	Kernel-5_35-4_79_2_19:4.5.2.2
	Kernel-5_35-4_79_2_18:4.5.2.2
	Kernel-5_35-4_79_2_17:4.5.2.2
	Kernel-5_35-4_79_2_16:4.5.2.2
	Kernel-5_35-4_79_2_15:4.5.2.2
	Kernel-5_35-4_79_2_14:4.5.2.2
	Kernel-5_39:4.6
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.8
	Kernel-5_38:4.6
	Kernel-5_35-4_79_2_13:4.5.2.2
	Kernel-5_35-4_79_2_12:4.5.2.2
	Kernel-5_35-4_79_2_11:4.5.2.2
	Kernel-5_37:4.5
	Kernel-5_35-4_79_2_10:4.5.2.2
	Kernel-5_35-4_79_2_9:4.5.2.1
	Kernel-5_36:4.5
	Kernel-5_35-4_79_2_8:4.5.2.1
	Kernel-5_35-4_79_2_7:4.5.2.1
	Kernel-5_35-4_79_2_6:4.5.2.1
	Kernel-5_35-4_79_2_5:4.5.2.1
	Kernel-5_35-4_79_2_4:4.5.2.1
	Kernel-5_35-4_79_2_3:4.5.2.1
	Kernel-5_35-4_79_2_2:4.5.2.1
	dellis_autobuild_BaseSW:4.5
	Kernel-5_35-4_79_2_1:4.5.2.1
	HAL:4.5.0.2
	Kernel-5_35:4.5
	Kernel-5_34:4.5
	Kernel-5_33:4.5
	Kernel-5_32:4.4
	Kernel-5_31:4.3
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.6
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.4.1
	Ursula_RiscPC_bp:4.1.4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1.4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	mstphens_Kernel-3_80:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.9
date	2018.06.16.13.29.42;	author rool;	state Exp;
branches;
next	4.8;
commitid	k3HPMJpkVeRoBvGA;

4.8
date	2016.06.30.20.28.56;	author jlee;	state Exp;
branches
	4.8.2.1;
next	4.7;
commitid	lMnWzoE9eJz3Wwcz;

4.7
date	2016.06.30.20.08.09;	author jlee;	state Exp;
branches;
next	4.6;
commitid	IWoXxARWeuLDOwcz;

4.6
date	2000.11.21.15.19.54;	author sbrodie;	state Exp;
branches;
next	4.5;

4.5
date	2000.08.18.12.23.18;	author sbrodie;	state Exp;
branches
	4.5.2.1;
next	4.4;

4.4
date	2000.08.18.09.31.45;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	2000.08.15.16.47.24;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.04.04.14.27.32;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.23;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.8.2.1
date	2018.07.07.13.15.13;	author jlee;	state Exp;
branches;
next	;
commitid	xZcbvu8u7pqAQcJA;

4.5.2.1
date	2000.09.15.12.38.01;	author kbracey;	state Exp;
branches;
next	4.5.2.2;

4.5.2.2
date	2000.10.16.11.55.38;	author kbracey;	state Exp;
branches
	4.5.2.2.2.1;
next	4.5.2.3;

4.5.2.3
date	2011.11.26.21.11.16;	author jlee;	state Exp;
branches;
next	;
commitid	cI3W0zbtALQG6TIv;

4.5.2.2.2.1
date	2011.08.08.23.28.26;	author jlee;	state Exp;
branches;
next	;
commitid	D7rzILnwRRSXoLuv;

4.1.1.1
date	96.11.05.09.41.23;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.00.50;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.09.09.13.33.27;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.11.34;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.03.49;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.9
log
@Various kernel cleanups
Detail:
  NewReset.s: Remove warning about soft reset, this is not supported any longer
  MsgCode.s: Reload LR after potentially changing mode
  PMF/osinit.s: Delete vestiges of soft reset support
Admin:
  Submission from Timothy Baldwin.

Version 6.07. Tagged as 'Kernel-6_07'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Kernel.Messages
;
; This file deals with translating text and errors in an international
; kernel.
;
;
; TranslateError
; Entry:
;       R0 = Pointer to error block (Error number followed by token:default).
; Exit
;       R0 = pointer to error block to use.
;            If the error semaphore is set a pointer to the original block is
;            returned.
;       V Set.
;

;        EXPORT  Write0_Translated

        GBLL    countmsgusage
countmsgusage SETL {FALSE}
     [ countmsgusage
        ! 0,    "*** WARNING: Cacheing *ALL* messages - even those with substitutions"
     ]

TranslateError_VClear  ROUT
        Push    "r4,LR"
        MOV     r4,#0
        BL      TranslateError_UseR4
        CLRV
        Pull    "r4,PC"

TranslateError  ROUT
        Push    "r4,LR"
        MOV     r4,#0
        BL      TranslateError_UseR4
        Pull    "r4,PC"

TranslateError_UseR4
        Push    "R8,R9,LR"
        MRS     R8,CPSR
        ORR     R8,R8,#V_bit                    ; V set ready :)

        LDR     LR, =ZeroPage
        LDRB    R9, [LR, #ErrorSemaphore]
        TEQ     R9,#0
        BNE     %FT90

        BIC     R9, R8, #&0F
        ORR     R9, R9, #SVC_mode               ; SVC mode, preserve IRQ state
        MSR     CPSR_c, R9

        Push    "R0-R7"

        MOV     R5,#0
        MOV     R6,#0
        MOV     R7,#0
        MOV     R1,#-1                          
        LDR     LR, =ZeroPage                   ; We are looking up an error, don't bother
        STRB    R1, [LR, #ErrorSemaphore]       ; translating other errors.

  [ CacheCommonErrors
        BL      CheckCommonErrorCache           ; sets R9 to memory address for cached result
      [ ZeroPage = 0
        MOVNE   R1,#0
      ]
        STRNE   R9,[SP]
        BNE     %FT80
        MOV     R2,R9                           ; 0 - or our cached area!
        MOV     R3,#256
  |
        MOV     R2,#0
  ]

        LDR     R1,=ZeroPage+KernelMessagesBlock+4
        SWI     XMessageTrans_ErrorLookup
        LDR     R14,[R0]
        LDR     R1,[SP]
        LDR     R1,[R1]
        CMP     R14,R1
        STREQ   R0,[SP]
      [ (ZeroPage = 0) :LOR: CacheCommonErrors
        MOV     R1,#0                           ; To clear the semaphore
      ]
  [ CacheCommonErrors
        TEQNE   R9,#0                           ; Did we try to cache this message?
        STRNE   R1,[R9]                         ; blat out the error number
80
  ]
      [ ZeroPage <> 0
        ASSERT  (ZeroPage :AND: 255) = 0
        LDR     R1, =ZeroPage
      ]
        STRB    R1, [R1 ,#ErrorSemaphore]       ; Clear error semaphore

        Pull    "R0-R7"
90
        MSR     CPSR_cf, R8                     ; Back to original mode, V set
        Pull    "R8,R9,PC"

  [ CacheCommonErrors
   ; This block MUST not be empty
CommonErrorAddresses
    [ countmsgusage
        &       ErrorBlock_RMNot32bit
        &       ErrorBlock_RCExc
        &       ErrorBlock_RCNegative
        &       ErrorBlock_BadString
        &       ErrorBlock_VarCantFind
        &       ErrorBlock_BadVarType
        &       ErrorBlock_BadVarNam
        &       ErrorBlock_VarTooLong
        &       ErrorBlock_BadMacVal
        &       ErrorBlock_VarNoRoom
        &       ErrorBlock_BadBra
        &       ErrorBlock_StkOFlo
        &       ErrorBlock_MissOpn
        &       ErrorBlock_MissOpr
        &       ErrorBlock_BadInt
        &       ErrorBlock_StrOFlo
        &       ErrorBlock_NaffItm
        &       ErrorBlock_DivZero
        &       ErrorBlock_BadBase
        &       ErrorBlock_NumbTooBig
        &       ErrorBlock_BadClaimNum
        &       ErrorBlock_SysHeapFull
        &       ErrorBlock_BadDynamicArea
        &       ErrorBlock_AreaAlreadyExists
        &       ErrorBlock_AreaNotOnPageBdy
        &       ErrorBlock_OverlappingAreas
        &       ErrorBlock_CantAllocateArea
        &       ErrorBlock_CantAllocateLevel2
        &       ErrorBlock_UnknownAreaHandler
        &       ErrorBlock_CantGetPhysMem
        &       ErrorBlock_AplWSpaceInUse
        &       ErrorBlock_ChDynamCAO
        &       ErrorBlock_RAMFsUnchangeable
        &       ErrorBlock_HeapBadReason
        &       ErrorBlock_HeapFail_Init
        &       ErrorBlock_HeapFail_BadDesc
        &       ErrorBlock_HeapFail_BadLink
        &       ErrorBlock_HeapFail_Alloc
        &       ErrorBlock_HeapFail_NotABlock
        &       ErrorBlock_HeapFail_BadExtend
        &       ErrorBlock_HeapFail_ExcessiveShrink
        &       ErrorBlock_NoSuchSWI1
        &       ErrorBlock_NoSuchSWI
        &       ErrorBlock_UndefinedInstruction
        &       ErrorBlock_InstructionAbort
        &       ErrorBlock_DataAbort
        &       ErrorBlock_AddressException
        &       ErrorBlock_BranchThrough0
        &       ErrorBlock_BadEnvNumber
        &       ErrorBlock_BadReadSysInfo
        &       ErrorBlock_BadModuleReason
        &       ErrorBlock_NoMoreModules
        &       ErrorBlock_NoMoreIncarnations
        &       ErrorBlock_PostfixNeeded
        &       ErrorBlock_IncarnationExists
        &       ErrorBlock_ChunkNotRM
        &       ErrorBlock_MHNoRoom
        &       ErrorBlock_ModulePostfix
        &       ErrorBlock_NotMod
        &       ErrorBlock_BadRMHeaderField
        &       ErrorBlock_CantKill
        &       ErrorBlock_RMNotFound
        &       ErrorBlock_IncarnationNotFound
        &       ErrorBlock_RMNotFoundInROM
        &       ErrorBlock_ModuleTooOld
        &       ErrorBlock_BadParameters
        &       ErrorBlock_ArgRepeated
        &       ErrorBlock_NaffDevNo
        &       ErrorBlock_BadDevVecRel
        &       ErrorBlock_RedirectFail
        &       ErrorBlock_StackFull
        &       ErrorBlock_OscliLongLine
        &       ErrorBlock_NoOscliSpecials
        &       ErrorBlock_OscliTooHard
        &       ErrorBlock_BadParmString
        &       ErrorBlock_CoreNotWriteable
        &       ErrorBlock_CoreNotReadable
        &       ErrorBlock_BadCommand
        &       ErrorBlock_NoSuchSWI2
        &       ErrorBlock_TooManyParms
        &       ErrorBlock_BadKey
        &       ErrorBlock_BadAddress
        &       ErrorBlock_OutsideFile
        &       ErrorBlock_Escape
        &       ErrorBlock_BadTime
        &       ErrorBlock_BadMODE
        &       ErrorBlock_ModeNotAvailable
        &       ErrorBlock_BadPixelDepth
        &       ErrorBlock_Sprite_BadDPI
        &       ErrorBlock_BadMSFlags
        &       SpriteErr_NoWorkSpace
        &       SpriteErr_NoRoom
        &       SpriteErr_DoesntExist
        &       SpriteErr_NoSprites
        &       SpriteErr_NotGraphics
        &       SpriteErr_NotEnoughRoom
        &       SpriteErr_BadSpriteFile
        &       SpriteErr_NoRoomToMerge
        &       SpriteErr_Bad2ndPtr
        &       SpriteErr_InvalidRowOrCol
        &       SpriteErr_InvalidHeight
        &       SpriteErr_InvalidWidth
        &       SpriteErr_NoRoomToInsert
        &       SpriteErr_SpriteAlreadyExists
        &       SpriteErr_InvalidSpriteMode
        &       SpriteErr_BadReasonCode
        &       SpriteErr_CantInTeletext
        &       SpriteErr_InvalidSaveArea
        &       SpriteErr_SpriteIsCurrentDest
        &       SpriteErr_NoMaskOrPaletteAllowedInThisDepth
     ]
        &       ErrorBlock_ChDynamNotAllMoved
        &       ErrorBlock_NaffRelease
        &       ErrorBlock_BuffOverflow
        &       ErrorBlock_BadNumb
EndCommonErrorAddresses

        GBLA    ECEACount
ECEACount SETA  (EndCommonErrorAddresses-CommonErrorAddresses)/4
        ASSERT  (EndCommonErrorAddresses <> CommonErrorAddresses)

        ! 0, "Requiring ":CC:(:STR:(ECEACount*256)):CC:" bytes for error cache"
        ! 0, "Cached error block pointer at ":CC::STR:CachedErrorBlocks
        ! 0, "Cacheing ":CC:(:STR:ECEACount):CC:" error messages"

; This routine exits with Z clear if it can supply a cached translation; else must set Z
; so that the TranslateError_UseR4 routine continues to function and set R9 to the cache
; block to use for the result (or set R9 to zero to indicate no cacheing for this error)
CheckCommonErrorCache ROUT
        Entry   "r1-r3"
    [ countmsgusage
        MOV     r4, #0                      ; prevents substitutions
    |
        CMP     r4, #1                      ; is R4 = 0?  If so, clear C for next instruction
        SBCS    r9, r4, r4                  ; R9=0,Z set - if R4 was >0, else R9=-1, Z clear
        EXIT    EQ
    ]
      [ ZeroPage = 0
        LDR     r9, [r4, #KernelMessagesBlock] ; R4 guaranteed zero from above
      |
        LDR     r1, =ZeroPage
        LDR     r9, [r1, #KernelMessagesBlock]
      ]
        TEQ     r9, #0
        EXIT    EQ                          ; not initialised messages yet!  Exit R9=0, Z set
      [ ZeroPage = 0
        LDR     r9, [r4, #CachedErrorBlocks]
      |
        LDR     r9, [r1, #CachedErrorBlocks]
      ]
        TEQ     r9, #0
        ; in:  R9=cached error blocks memory pointer
        BLEQ    CommonErrorCacheInit
        ; out: R9=0 and EQ on error; else NE and R9 valid (also case if routine wasn't called)
        EXIT    EQ                          ; not initialised cache yet
        ADR     lr, CommonErrorAddresses
        MOV     r2, #ECEACount - 1
10
        LDR     r1, [lr, r2, LSL #2]
        TEQ     r1, r0
        BEQ     %FT20
        SUBS    r2, r2, #1
        BPL     %BT10
        ; Set Z if message not found, set R9 zero to mark we don't want to cache this
        MOVS    r9, #0
        EXIT
20
    [ countmsgusage
        ADD     r3, r9, #ECEACount*256
        LDR     r1, [r3, r2, LSL #2]
        ADD     r1, r1, #1
        STR     r1, [r3, r2, LSL #2]
    ]
        ; Read the cached error number (0 = we don't have this cached or we have uncached it)
        ; Update R9 to point to the actual error buffer at the same time.
        LDR     r1, [r9, r2, LSL #8]!
        ; Set Z if we don't have that error cached yet, clear it and copy the cached
        ; block to R0 if we do already have this message.
        TEQ     r1, #0
        MOVNE   r0, r9
        EXIT

; On entry, R9 points to the error cache memory, or 0 to indicate we don't have it yet.
; If this routine exits Z clear (NE), it MUST have pointed R9 at the sys heap memory
CommonErrorCacheInit ROUT
        Entry   "r0-r8"
        MOVS    r2, r9                          ; copy R9 to R2 - only claim memory if it was 0
        BNE     %FT10
    [ countmsgusage
        LDR     r3, =ECEACount*260              ; size of block required
    |
        LDR     r3, =ECEACount*256              ; size of block required
    ]
        BL      ClaimSysHeapNode
        MOVS    r9, #0                          ; set Z for STREQ below and for return
        EXIT    VS
10
        MOV     r3, #0
      [ ZeroPage = 0
        STREQ   r2, [R3, #CachedErrorBlocks]
      |
        LDREQ   r4, =ZeroPage
        STREQ   r2, [r4, #CachedErrorBlocks]
      ]

        GBLA    CECLoop
CECLoop SETA    0
     [ countmsgusage
        LDR     r4, =ECEACount*260
90
        SUBS    r4, r4, #4
        STR     r3, [r2, r4]
        BNE     %BT90
     |
        WHILE CECLoop < ECEACount
          STR   r3, [r2, #CECLoop * 256]
CECLoop SETA    CECLoop+1
        WEND
     ]

        MOVS    r9, r2                          ; set up R9; clear Z
        EXIT

; Invoked by the service call handler in the UtilityModule to clear out our cache
; whenever the territory changes or messagetrans says that a messages file was changed.
CacheCommonErrorsReinit
        Entry   "r9"
        LDR     r9, =ZeroPage
        LDR     r9, [r9, #CachedErrorBlocks]
        TEQ     r9, #0
        BLNE    CommonErrorCacheInit
        EXIT
  ]

;----------------------------------------------------------------------------------------
;
;WriteS_Translated
;Entry:
;       R14 -> Token.
;*NOTE*
;      MUST BE TOKEN:DEFAULT
;
;Exit:
;       Message printed
;       Returns to word after end of token.
;
WriteS_Translated       ROUT
        Push    "r0-r8,LR"
        MOV     r4,#0
        B       Int_WriteS_Translated_UseR4

WriteS_Translated_UseR4

        Push    "r0-r8,LR"

Int_WriteS_Translated_UseR4
        MRS     r8,CPSR
        MOV     r1,LR
        LDR     r2,=ZeroPage
        LDR     r0,[r2,#KernelMessagesBlock]
        CMP     r0,#0                           ; If no messages file, try the global one.
        ADDNE   r0,r2,#KernelMessagesBlock+4
        MOV     r2,#0                           ; Use message in place.
        MOV     r3,#0
        MOV     r5,#0
        MOV     r6,#0
        MOV     r7,#0                           ; No arguments.
        SWI     XMessageTrans_Lookup
        BVC     %FT01

        MOV     R2,R1                           ; MessageTrans not present or token not found.
00
        LDRB    r0,[r2],#1                      ; Skip to after ":"
        CMP     r0,#":"
        BNE     %BT00

; Now
; r1 -> terminator
; r2 -> message
; Print the message.

01
        LDRB    r0,[r2],#1                      ; Print all characters of message
        CMP     r0,#" "
        BLT     %FT02
        CMP     r0,#"%"
        SWINE   XOS_WriteC
        BNE     %BT01

        LDRB    r0,[r2],#1                      ; Found a %
        CMP     r0,#" "
        BLT     %FT02                           ; Trailing % sign!
        CMP     r0,#"0"
        SWINE   XOS_WriteI+"%"
        SWINE   XOS_WriteC
        BNE     %BT01                           ; Just in case it isn't %0

        CMP     r4,#0                           ; r4 = original parameter
        BEQ     %BT01

11
        LDRB    R0,[R4],#1
        CMP     R0,#" "
        SWIGE   XOS_WriteC
        BGE     %BT11
        B       %BT01
                                                ; Now skip to end of token.
02
        LDR     r1,[sp,#9*4]                    ; Get original token pointer
03
        LDRB    r0,[r1],#1
        CMP     r0,#32
        BGE     %BT03                           ; Skip to control character.
04
        CMP     r0,#0                           ; Print all control characters to terminating 0.
        SWINE   XOS_WriteC
        LDRNEB  r0,[r1],#1
        BNE     %BT04

; r1 now points at byte after end of token.

        ADD     r1,r1,#3                        ; Round up to next word.
        BIC     r1,r1,#3

        STR     r1,[sp,#9*4]                    ; Store back as return address on stack
        ORRVS   r8,r8,#V_bit
        MSR     CPSR_f,r8

        Pull    "r0-r8,PC"                       ;Return.

;----------------------------------------------------------------------------------------
;
;GSWriteS_Translated
;Entry:
;       R14 -> Token.
;*NOTE*
;      MUST BE TOKEN:DEFAULT
;
;Exit:
;       Message printed
;       Returns to word after end of token.
;
GSWriteS_Translated       ROUT
        Push    "r0-r8,LR"
        MOV     r4,#0
        B       Int_GSWriteS_Translated_UseR4

GSWriteS_Translated_UseR4

        Push    "r0-r8,LR"

Int_GSWriteS_Translated_UseR4
        MRS     r8,CPSR
        MOV     r1,LR
        LDR     r2,=ZeroPage
        LDR     r0,[r2,#KernelMessagesBlock]
        CMP     r0,#0                           ; If no messages file, try the global one.
        ADDNE   r0,r2,#KernelMessagesBlock+4
        LDR     r2,=GeneralMOSBuffer
        MOV     r3,#256
        MOV     r5,#0
        MOV     r6,#0
        MOV     r7,#0                           ; No arguments.
        SWI     XMessageTrans_GSLookup
        BVC     %FT01

        MOV     R2,R1                           ; MessageTrans not present or token not found.
00
        LDRB    r0,[r2],#1                      ; Skip to after ":"
        CMP     r0,#":"
        BNE     %BT00

; Now
; r1 -> terminator
; r2 -> message
; Print the message using OS_PrettyPrint.

01
        LDR     r0, =GeneralMOSBuffer
        MOV     r1, #0
        SWI     XOS_PrettyPrint
                                                ; Now skip to end of token.
02
        LDR     r1,[sp,#9*4]                    ; Get original token pointer
03
        LDRB    r0,[r1],#1
        CMP     r0,#0
        BNE     %BT03                           ; Skip to 0.

; r1 now points at byte after end of token.

        ADD     r1,r1,#3                        ; Round up to next word.
        BIC     r1,r1,#3

        STR     r1,[sp,#9*4]                    ; Store back as return address on stack
        ORRVS   r8,r8,#V_bit
        MSR     CPSR_f,r8

        Pull    "r0-r8,PC"                       ;Return.

;----------------------------------------------------------------------------------------
;FindToken
;
;Entry:
;       R0 -> Token.
;*NOTE*
;      MUST BE TOKEN:DEFAULT
;
;Exit:
;       r0 -> Message, or after the : if MessageTrans is dead.
;
;
FindToken      ROUT
        Push    "r0-r8,LR"
        MRS     r8,CPSR

        MOV     r1,r0
        LDR     r2,=ZeroPage
        LDR     r0,[r2,#KernelMessagesBlock]
        CMP     r0,#0                           ; If no messages file, try the global one.
        ADDNE   r0,r2,#KernelMessagesBlock+4
        MOV     r2,#0
        MOV     r3,#0
        MOV     r4,#0
        MOV     r5,#0
        MOV     r6,#0
        MOV     r7,#0                           ; No arguments.
        SWI     XMessageTrans_Lookup
        BVC     %FT01

        MOV     R2,R1                           ; MessageTrans not present or token not found.
00
        LDRB    r0,[r2],#1                      ; Skip to after ":"
        CMP     r0,#":"
        BNE     %BT00
01
        STR     r2,[sp]

        MSR     CPSR_f,r8
        Pull    "r0-r8,PC"

;----------------------------------------------------------------------------------------
;Write0_Translated
;
;Entry:
;       R0 -> Token.
;*NOTE*
;      MUST BE TOKEN:DEFAULT
;
;Exit:
;        Message printed, r0->Message.
;
Write0_Translated ROUT
        EntryS  "r0,r1"
        BL      FindToken
        MOV     R1,R0
01
        LDRB    R0,[R1],#1
        CMP     R0,#31
        SWIGT   XOS_WriteC
        STRVS   r0,[SP]
        EXIT    VS
        BGT     %BT01

        EXITS

        END





@


4.8
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@d71 2
a72 1
        MOV     R1,#-1                          ; We are looking up an error, don't bother
@


4.8.2.1
log
@Merge latest changes from HEAD

Version 6.08, 4.129.2.9. Tagged as 'Kernel-6_08-4_129_2_9'
@
text
@d71 1
a71 2
        MOV     R1,#-1                          
        LDR     LR, =ZeroPage                   ; We are looking up an error, don't bother
@


4.7
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@a42 1
 [ No26bitCode
a44 3
 |
        Pull    "r4,PC",,^
 ]
a363 1
 [ No26bitCode
a364 3
 |
        Push    "r0-r7,LR"
 ]
a369 1
 [ No26bitCode
a370 3
 |
        Push    "r0-r7,LR"
 ]
a372 1
 [ No26bitCode
a374 3
 |
        BIC     r1,LR,#ARM_CC_Mask              ; r1 -> Token.
 ]
a424 1
 [ No26bitCode
a425 4
 |
        LDR     r1,[sp,#8*4]                    ; Get original token pointer
        BIC     r1,r1,#ARM_CC_Mask              ; r1 -> Token.
 ]
a440 1
 [ No26bitCode
a445 9
 |
        LDR     r2,[sp,#8*4]
        AND     r2,r2,#ARM_CC_Mask              ; Just the flags and mode bits.
        ORR     r1,r1,r2
        ORRVS   r1,r1,#V_bit
        STR     r1,[sp,#8*4]                    ; Store back as return address on stack

        Pull    "r0-r7,PC",,^                    ;Return.
 ]
a459 1
 [ No26bitCode
a460 3
 |
        Push    "r0-r7,LR"
 ]
a465 1
 [ No26bitCode
a466 3
 |
        Push    "r0-r7,LR"
 ]
a468 1
 [ No26bitCode
a470 3
 |
        BIC     r1,LR,#ARM_CC_Mask              ; r1 -> Token.
 ]
a499 1
 [ No26bitCode
a500 4
 |
        LDR     r1,[sp,#8*4]                    ; Get original token pointer
        BIC     r1,r1,#ARM_CC_Mask              ; r1 -> Token.
 ]
a510 1
 [ No26bitCode
a515 9
 |
        LDR     r2,[sp,#8*4]
        AND     r2,r2,#ARM_CC_Mask              ; Just the flags and mode bits.
        ORR     r1,r1,r2
        ORRVS   r1,r1,#V_bit
        STR     r1,[sp,#8*4]                    ; Store back as return address on stack

        Pull    "r0-r7,PC",,^                    ;Return.
 ]
a529 1
 [ No26bitCode
a531 3
 |
        Push    "r0-r7,LR"
 ]
a554 1
 [ No26bitCode
a556 3
 |
        Pull    "r0-r7,PC",,^
 ]
@


4.6
log
@  32-bit kernels will refuse to initialise non 32-bit modules.
Detail:
  The kernel will examine all modules that it is requested to initialise
    and will refuse to initialise any module without a module flags word
    entry in its module header or with bit 0 the first flags word being
    clear (bit 0 being ModuleFlag_32bit)
  Error message added to all the messages files.
  New error block added to message counting block.  The Non-32-bit module
    message is not a cached error message, though.
Admin:
  Tested in 32-bit Lazarus build.

Version 5.38. Tagged as 'Kernel-5_38'
@
text
@d31 2
d58 1
a58 1
        mrs    ,R8,CPSR
d61 3
a63 3
        MOV     LR,#0
        LDRB    LR, [LR, #ErrorSemaphore]
        TEQ     LR,#0
d68 1
a68 1
        msr    ,CPSR_c, R9
d70 1
a70 1
        Push    "R0-R7,R8,R9,LR"
d76 1
a76 1
        STRB    R1, [R5, #ErrorSemaphore]       ; translating other errors.
d80 1
d82 1
d91 1
a91 1
        ADR     R1,KernelMessagesBlock+4
d98 1
a98 1

d100 1
d106 4
d112 1
a112 1
        Pull    "R0-R7,R8,R9,LR"
d114 1
a114 1
        msr    ,CPSR_cf, R8                     ; Back to original mode, V set
d258 1
d260 4
d266 1
d268 3
d319 1
d321 4
d348 1
a348 1
        MOV     r9, #0
d386 1
a386 1
        mrs    ,r8,CPSR
d391 2
a392 2
        MOV     r0,#0
        LDR     r0,[r0,#KernelMessagesBlock]
d394 1
a394 1
        ADRNE   r0,KernelMessagesBlock+4
d465 1
a465 1
        msr    ,CPSR_f,r8
d509 1
a509 1
        mrs    ,r8,CPSR
d514 2
a515 2
        MOV     r0,#0
        LDR     r0,[r0,#KernelMessagesBlock]
d517 1
a517 1
        ADRNE   r0,KernelMessagesBlock+4
d562 1
a562 1
        msr    ,CPSR_f,r8
d590 1
a590 1
        mrs    ,r8,CPSR
d596 2
a597 2
        MOV     r0,#0
        LDR     r0,[r0,#KernelMessagesBlock]
d599 1
a599 1
        ADRNE   r0,KernelMessagesBlock+4
d618 1
a618 1
        msr    ,CPSR_f,r8
@


4.5
log
@  Added a test program and profiling for messages.
Detail:
  The kernel can now disable all substitutions into error messages that
    it generates and count the number of times each error is looked up.
    The ErrorCount BASIC program then displays that information so that
    you can see if any odd errors are occurring or weird errors that you
    would not be expecting.
  It is not sensible to build a release with countmsgusage enabled.
Admin:
  Tested in Ursula build.

Version 5.32. Not tagged
@
text
@d112 1
@


4.5.2.1
log
@* Converted to building with ObjAsm (but still a single object file using ORG).
* Added ARM_IMB and ARM_IMBRange SWIs as recommended by ARMv5.
* Some early prototype HAL bits popped in - a lot of source restructuring still
  to come.
* New debug target creates an AIF image with debug information, and translates
  this into an ASCII object file for the 16702B logic analyser.

Version 5.35, 4.79.2.1. Tagged as 'Kernel-5_35-4_79_2_1'
@
text
@d56 1
a56 1
        MRS     R8,CPSR
d66 1
a66 1
        MSR     CPSR_c, R9
d68 1
a68 1
        Push    "R0-R7"
d103 1
a103 1
        Pull    "R0-R7"
d105 1
a105 1
        MSR     CPSR_cf, R8                     ; Back to original mode, V set
d362 1
a362 1
        MRS     r8,CPSR
d441 1
a441 1
        MSR     CPSR_f,r8
d485 1
a485 1
        MRS     r8,CPSR
d538 1
a538 1
        MSR     CPSR_f,r8
d566 1
a566 1
        MRS     r8,CPSR
d594 1
a594 1
        MSR     CPSR_f,r8
@


4.5.2.2
log
@More stuff. Up to the desktop now; cache on, working keyboard. Some source
restructuring to start to make splitting it up into several object files more
feasible.
@
text
@a30 2
;        EXPORT  Write0_Translated

@


4.5.2.3
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d61 3
a63 3
        LDR     LR, =ZeroPage
        LDRB    R9, [LR, #ErrorSemaphore]
        TEQ     R9,#0
d76 1
a76 1
        STRB    R1, [LR, #ErrorSemaphore]       ; translating other errors.
a79 1
      [ ZeroPage = 0
a80 1
      ]
d89 1
a89 1
        LDR     R1,=ZeroPage+KernelMessagesBlock+4
d96 1
a96 1
      [ (ZeroPage = 0) :LOR: CacheCommonErrors
a97 1
      ]
a102 4
      [ ZeroPage <> 0
        ASSERT  (ZeroPage :AND: 255) = 0
        LDR     R1, =ZeroPage
      ]
a249 1
      [ ZeroPage = 0
a250 4
      |
        LDR     r1, =ZeroPage
        LDR     r9, [r1, #KernelMessagesBlock]
      ]
a252 1
      [ ZeroPage = 0
a253 3
      |
        LDR     r9, [r1, #CachedErrorBlocks]
      ]
a301 1
      [ ZeroPage = 0
a302 4
      |
        LDREQ   r4, =ZeroPage
        STREQ   r2, [r4, #CachedErrorBlocks]
      ]
d326 1
a326 1
        LDR     r9, =ZeroPage
d369 2
a370 2
        LDR     r2,=ZeroPage
        LDR     r0,[r2,#KernelMessagesBlock]
d372 1
a372 1
        ADDNE   r0,r2,#KernelMessagesBlock+4
d492 2
a493 2
        LDR     r2,=ZeroPage
        LDR     r0,[r2,#KernelMessagesBlock]
d495 1
a495 1
        ADDNE   r0,r2,#KernelMessagesBlock+4
d574 2
a575 2
        LDR     r2,=ZeroPage
        LDR     r0,[r2,#KernelMessagesBlock]
d577 1
a577 1
        ADDNE   r0,r2,#KernelMessagesBlock+4
@


4.5.2.2.2.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@d61 3
a63 3
        LDR     LR, =ZeroPage
        LDRB    R9, [LR, #ErrorSemaphore]
        TEQ     R9,#0
d76 1
a76 1
        STRB    R1, [LR, #ErrorSemaphore]       ; translating other errors.
a79 1
      [ ZeroPage = 0
a80 1
      ]
d89 1
a89 1
        LDR     R1,=ZeroPage+KernelMessagesBlock+4
d96 1
a96 1
      [ (ZeroPage = 0) :LOR: CacheCommonErrors
a97 1
      ]
a102 4
      [ ZeroPage <> 0
        ASSERT  (ZeroPage :AND: 255) = 0
        LDR     R1, =ZeroPage
      ]
a249 1
      [ ZeroPage = 0
a250 4
      |
        LDR     r1, =ZeroPage
        LDR     r9, [r1, #KernelMessagesBlock]
      ]
a252 1
      [ ZeroPage = 0
a253 3
      |
        LDR     r9, [r1, #CachedErrorBlocks]
      ]
a301 1
      [ ZeroPage = 0
a302 4
      |
        LDREQ   r4, =ZeroPage
        STREQ   r2, [r4, #CachedErrorBlocks]
      ]
d326 1
a326 1
        LDR     r9, =ZeroPage
d369 2
a370 2
        LDR     r2,=ZeroPage
        LDR     r0,[r2,#KernelMessagesBlock]
d372 1
a372 1
        ADDNE   r0,r2,#KernelMessagesBlock+4
d492 2
a493 2
        LDR     r2,=ZeroPage
        LDR     r0,[r2,#KernelMessagesBlock]
d495 1
a495 1
        ADDNE   r0,r2,#KernelMessagesBlock+4
d574 2
a575 2
        LDR     r2,=ZeroPage
        LDR     r0,[r2,#KernelMessagesBlock]
d577 1
a577 1
        ADDNE   r0,r2,#KernelMessagesBlock+4
@


4.4
log
@  Improved the error cacheing.
  Removed DriversInKernel conditional.
Detail:
  If the territory changes or the resource file changes, the kernel
    will now decache all the cached error blocks so that next time
    they are required, they will be looked up again.
  The error cacheing is now a kernel build option and is always set
    to on.
  Removed one of the 5 error messages to be cached - it never seems
    to happen.  The remaining 4 are more frequent.
Admin:
  Tested in Ursula build.
  Cannot be used with HdrSrc 0.94.  HdrSrc 0.95 and later is required
    (or HdrSrc 0.93 and earlier subject to other kernel requirements)
  Requires MessageTrans 0.42 or later for correct operation when a
    replacement messages file is loaded.

Version 5.32. Tagged as 'Kernel-5_32'
@
text
@d30 7
d111 111
a221 2
        &       ErrorBlock_BadNumb
        &       ErrorBlock_BuffOverflow
d224 2
d234 1
d241 3
d247 1
d269 6
d290 3
d294 1
d304 7
d315 1
@


4.3
log
@  Fixed minor bug in module initialisation.
  Added common error cache.
Detail:
  Fixed module header validation code which was broken in 5.22.  This
    shouldn't have caused much of a problem as it was only a bizarre
    check (SWI chunk looked valid but SWI handler was 0) that would
    have failed - but be reported as a valid set of SWI entries.
  Added common error message cache.  Several common errors (Buffer
    overflow; Number not recognised; Bad vector release; and a couple
    of others) are now cached the first time they are translated into
    a block of memory in the system heap.
Admin:
  Tested in Ursula build - cacheing only active in Ursula build - change
    HdrSrc if you want it in your products too.
  Requires HdrSrc 0.94

Version 5.31. Tagged as 'Kernel-5_31'
@
text
@d72 1
a105 1
        &       ErrorBlock_VarNoRoom
d130 1
d132 2
a133 1
        EXIT    EQ
d146 2
d150 1
a150 1
        ; block to R0 if we do already have this message
d155 7
a161 3
CommonErrorCacheInit
        Entry   "r0-r9"
        LDR     r3, =ECEACount*256
d163 3
a165 1
        MOVVS   r2, #0
d167 1
a167 1
        STR     r2, [R3, #CachedErrorBlocks]
d172 1
a172 1
          STRVC r3, [r2, #CECLoop * 256]
d176 11
a186 1
        TEQ     r2, #0
@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d48 1
a48 1
        Push    "R8,LR"
d57 3
a59 3
        BIC     R8, R8, #&0F
        ORR     R8, R8, #SVC_mode               ; SVC mode, preserve IRQ state
        msr    ,CPSR_c, R8
d61 1
a61 1
        Push    "R0-R7,LR"
d63 13
d77 1
a77 2
        MOV     R1,#-1                          ; We are looking up an error, don't bother
        STRB    R1, [R2, #ErrorSemaphore]       ; translating other errors.
a79 3
        MOV     R5,#0
        MOV     R6,#0
        MOV     R7,#0
d87 6
a92 1
        MOV     R1,#0
d95 1
a95 1
        Pull    "R0-R7,LR"
d98 71
a168 1
        Pull    "R8,PC"
@


4.1
log
@Initial revision
@
text
@d34 4
d39 1
d49 11
a60 14
        MOV     R8,#0
        LDRB    R8, [R8, #ErrorSemaphore]
        CMP     R8,#0
        Pull    "R8,LR",NE
        ORRNES  PC,LR,#V_bit

        MOV     R8,LR
 [ {TRUE}
        ORR     LR, LR, #SVC_mode               ; SVC mode, preserve IRQ state
        TEQP    PC, LR
 |
        TEQP    PC,#SVC_mode
 ]
        MOV     R0,R0
d66 1
a66 1
        
d81 4
a84 6
        Pull    "R0-R7,LR"                      ; Exit with new block and V set.

        TEQP    PC,R8                           ; Back to original mode.
        MOV     R0,R0
        Pull    "R8,LR"
        ORRS    PC,R14,#V_bit                   ; original R0.
d90 1
a90 1
;       R14 -> Token.   
d99 3
d103 1
d109 3
d113 1
d116 6
a121 2
        BIC     r1,LR,#3                        ; r1 -> Token.
        BIC     r1,r1,#2_111111 :SHL: 26
d132 1
a132 1
        BVC     %FT01                           
d156 1
a156 1
        CMP     r0,#"0"         
d172 3
d176 2
a177 2
        BIC     r1,r1,#3                        ; r1 -> Token.
        BIC     r1,r1,#2_111111 :SHL: 26
d182 1
a182 1
04      
d189 1
a189 1
        
d193 7
d201 2
a202 4
        MOV     r3,#2_111111 :SHL:26
        ORR     r3,r3,#2_11
        AND     r2,r2,r3                        ; Just the flags and mode bits.
        ORR     r1,r1,r2                        
d205 3
a207 2
        
        Pull    "r0-r7,PC",,^                   ;Return.
d213 1
a213 1
;       R14 -> Token.   
d222 3
d226 1
d232 3
d236 1
d239 6
a244 2
        BIC     r1,LR,#3                        ; r1 -> Token.
        BIC     r1,r1,#2_111111 :SHL: 26
d255 1
a255 1
        BVC     %FT01                           
d274 3
d278 2
a279 2
        BIC     r1,r1,#3                        ; r1 -> Token.
        BIC     r1,r1,#2_111111 :SHL: 26
d286 1
a286 1
        
d290 7
d298 2
a299 4
        MOV     r3,#2_111111 :SHL:26
        ORR     r3,r3,#2_11
        AND     r2,r2,r3                        ; Just the flags and mode bits.
        ORR     r1,r1,r2                        
d302 1
a302 1
        
d304 1
d310 1
a310 1
;       R0 -> Token.   
d316 1
a316 1
;       
d319 4
d324 1
d338 1
a338 1
        BVC     %FT01                           
d348 4
d353 2
d359 1
a359 1
;       R0 -> Token.   
d365 1
a365 1
;       
d367 1
a367 1
        Push    "r0,r1,LR"
d375 1
a375 1
        Pull    "r0,r1,PC",VS
d378 1
a378 1
        Pull    "r0,r1,PC",,^
@


4.1.4.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d52 1
d55 3
a57 1

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
