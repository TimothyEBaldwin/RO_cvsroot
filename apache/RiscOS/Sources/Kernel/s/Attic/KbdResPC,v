head	4.7;
access;
symbols
	HAL_merge:4.5.2.4
	Kernel-5_48:4.6
	Kernel-5_35-4_79_2_327:4.5.2.4
	Kernel-5_35-4_79_2_326:4.5.2.4
	Kernel-5_35-4_79_2_325:4.5.2.4
	Kernel-5_35-4_79_2_324:4.5.2.4
	Kernel-5_35-4_79_2_323:4.5.2.4
	Kernel-5_35-4_79_2_322:4.5.2.4
	Kernel-5_35-4_79_2_321:4.5.2.4
	Kernel-5_35-4_79_2_320:4.5.2.4
	Kernel-5_35-4_79_2_319:4.5.2.4
	Kernel-5_35-4_79_2_318:4.5.2.4
	Kernel-5_35-4_79_2_317:4.5.2.4
	Kernel-5_35-4_79_2_316:4.5.2.4
	Kernel-5_35-4_79_2_315:4.5.2.4
	Kernel-5_35-4_79_2_314:4.5.2.4
	Kernel-5_35-4_79_2_313:4.5.2.4
	Kernel-5_35-4_79_2_312:4.5.2.4
	Kernel-5_35-4_79_2_311:4.5.2.4
	Kernel-5_35-4_79_2_310:4.5.2.4
	Kernel-5_35-4_79_2_309:4.5.2.4
	Kernel-5_35-4_79_2_308:4.5.2.4
	Kernel-5_35-4_79_2_307:4.5.2.4
	Kernel-5_35-4_79_2_306:4.5.2.4
	Kernel-5_35-4_79_2_305:4.5.2.4
	Kernel-5_35-4_79_2_304:4.5.2.4
	Kernel-5_35-4_79_2_303:4.5.2.4
	Kernel-5_35-4_79_2_302:4.5.2.4
	Kernel-5_35-4_79_2_301:4.5.2.4
	Kernel-5_35-4_79_2_300:4.5.2.4
	Kernel-5_35-4_79_2_299:4.5.2.4
	Kernel-5_35-4_79_2_298:4.5.2.4
	Kernel-5_35-4_79_2_297:4.5.2.4
	Kernel-5_35-4_79_2_296:4.5.2.4
	Kernel-5_35-4_79_2_295:4.5.2.4
	Kernel-5_35-4_79_2_294:4.5.2.4
	Kernel-5_35-4_79_2_293:4.5.2.4
	Kernel-5_35-4_79_2_292:4.5.2.4
	Kernel-5_35-4_79_2_291:4.5.2.4
	Kernel-5_35-4_79_2_290:4.5.2.4
	Kernel-5_35-4_79_2_289:4.5.2.4
	Kernel-5_35-4_79_2_288:4.5.2.4
	Kernel-5_35-4_79_2_287:4.5.2.4
	Kernel-5_35-4_79_2_286:4.5.2.4
	Kernel-5_35-4_79_2_285:4.5.2.4
	Kernel-5_35-4_79_2_284:4.5.2.4
	Kernel-5_35-4_79_2_283:4.5.2.4
	Kernel-5_35-4_79_2_282:4.5.2.4
	Kernel-5_35-4_79_2_281:4.5.2.4
	Kernel-5_35-4_79_2_280:4.5.2.4
	Kernel-5_35-4_79_2_279:4.5.2.4
	Kernel-5_35-4_79_2_278:4.5.2.4
	Kernel-5_35-4_79_2_277:4.5.2.4
	Kernel-5_35-4_79_2_276:4.5.2.4
	Kernel-5_35-4_79_2_275:4.5.2.4
	Kernel-5_35-4_79_2_274:4.5.2.4
	Kernel-5_35-4_79_2_273:4.5.2.4
	Kernel-5_35-4_79_2_272:4.5.2.4
	Kernel-5_35-4_79_2_271:4.5.2.4
	Kernel-5_35-4_79_2_270:4.5.2.4
	Kernel-5_35-4_79_2_269:4.5.2.4
	Kernel-5_35-4_79_2_268:4.5.2.4
	Kernel-5_35-4_79_2_267:4.5.2.4
	Kernel-5_35-4_79_2_266:4.5.2.4
	Kernel-5_35-4_79_2_265:4.5.2.4
	Kernel-5_35-4_79_2_264:4.5.2.4
	Kernel-5_35-4_79_2_263:4.5.2.4
	Kernel-5_35-4_79_2_262:4.5.2.4
	Kernel-5_35-4_79_2_261:4.5.2.4
	Kernel-5_35-4_79_2_260:4.5.2.4
	Kernel-5_35-4_79_2_259:4.5.2.4
	Kernel-5_35-4_79_2_258:4.5.2.4
	Kernel-5_35-4_79_2_257:4.5.2.4
	Kernel-5_35-4_79_2_256:4.5.2.4
	Kernel-5_35-4_79_2_255:4.5.2.4
	Kernel-5_35-4_79_2_254:4.5.2.4
	Kernel-5_35-4_79_2_253:4.5.2.4
	Kernel-5_35-4_79_2_252:4.5.2.4
	Kernel-5_35-4_79_2_251:4.5.2.4
	Kernel-5_35-4_79_2_250:4.5.2.4
	Kernel-5_35-4_79_2_249:4.5.2.4
	Kernel-5_35-4_79_2_248:4.5.2.4
	Kernel-5_35-4_79_2_247:4.5.2.4
	Kernel-5_35-4_79_2_246:4.5.2.4
	Kernel-5_35-4_79_2_245:4.5.2.4
	Kernel-5_35-4_79_2_244:4.5.2.4
	Kernel-5_35-4_79_2_243:4.5.2.4
	Kernel-5_35-4_79_2_242:4.5.2.4
	Kernel-5_35-4_79_2_241:4.5.2.4
	Kernel-5_35-4_79_2_240:4.5.2.4
	Kernel-5_35-4_79_2_239:4.5.2.4
	Kernel-5_35-4_79_2_238:4.5.2.4
	Kernel-5_35-4_79_2_237:4.5.2.4
	Kernel-5_35-4_79_2_236:4.5.2.4
	Kernel-5_35-4_79_2_235:4.5.2.4
	Kernel-5_35-4_79_2_234:4.5.2.4
	Kernel-5_35-4_79_2_233:4.5.2.4
	Kernel-5_35-4_79_2_232:4.5.2.4
	Kernel-5_35-4_79_2_231:4.5.2.4
	Kernel-5_35-4_79_2_230:4.5.2.4
	Kernel-5_35-4_79_2_229:4.5.2.4
	Kernel-5_35-4_79_2_228:4.5.2.4
	Kernel-5_35-4_79_2_227:4.5.2.4
	Kernel-5_35-4_79_2_226:4.5.2.4
	Kernel-5_35-4_79_2_225:4.5.2.4
	Kernel-5_35-4_79_2_224:4.5.2.4
	Kernel-5_35-4_79_2_223:4.5.2.4
	Kernel-5_35-4_79_2_222:4.5.2.4
	Kernel-5_35-4_79_2_221:4.5.2.4
	Kernel-5_35-4_79_2_220:4.5.2.4
	Kernel-5_35-4_79_2_219:4.5.2.4
	Kernel-5_35-4_79_2_218:4.5.2.4
	Kernel-5_35-4_79_2_217:4.5.2.4
	Kernel-5_35-4_79_2_216:4.5.2.4
	Kernel-5_35-4_79_2_215:4.5.2.4
	Kernel-5_35-4_79_2_214:4.5.2.4
	Kernel-5_35-4_79_2_213:4.5.2.4
	Kernel-5_35-4_79_2_212:4.5.2.4
	Kernel-5_35-4_79_2_211:4.5.2.4
	Kernel-5_35-4_79_2_210:4.5.2.4
	Kernel-5_35-4_79_2_209:4.5.2.4
	Kernel-5_35-4_79_2_208:4.5.2.4
	Kernel-5_35-4_79_2_207:4.5.2.4
	Kernel-5_35-4_79_2_206:4.5.2.4
	Kernel-5_35-4_79_2_205:4.5.2.4
	Kernel-5_35-4_79_2_204:4.5.2.4
	Kernel-5_35-4_79_2_203:4.5.2.4
	Kernel-5_35-4_79_2_202:4.5.2.4
	Kernel-5_35-4_79_2_201:4.5.2.4
	Kernel-5_35-4_79_2_200:4.5.2.4
	Kernel-5_35-4_79_2_199:4.5.2.4
	Kernel-5_35-4_79_2_198:4.5.2.4
	Kernel-5_35-4_79_2_197:4.5.2.4
	Kernel-5_35-4_79_2_196:4.5.2.4
	Kernel-5_35-4_79_2_195:4.5.2.4
	Kernel-5_35-4_79_2_194:4.5.2.4
	Kernel-5_35-4_79_2_193:4.5.2.4
	Kernel-5_35-4_79_2_192:4.5.2.4
	Kernel-5_35-4_79_2_191:4.5.2.4
	Kernel-5_35-4_79_2_190:4.5.2.4
	Kernel-5_35-4_79_2_189:4.5.2.4
	Kernel-5_35-4_79_2_188:4.5.2.4
	Kernel-5_35-4_79_2_187:4.5.2.4
	Kernel-5_35-4_79_2_186:4.5.2.4
	Kernel-5_35-4_79_2_185:4.5.2.4
	Kernel-5_35-4_79_2_184:4.5.2.4
	Kernel-5_35-4_79_2_183:4.5.2.4
	Kernel-5_35-4_79_2_182:4.5.2.4
	Kernel-5_35-4_79_2_181:4.5.2.4
	Kernel-5_35-4_79_2_180:4.5.2.4
	Kernel-5_35-4_79_2_179:4.5.2.4
	Kernel-5_35-4_79_2_178:4.5.2.4
	Kernel-5_35-4_79_2_177:4.5.2.4
	Kernel-5_35-4_79_2_176:4.5.2.4
	Kernel-5_35-4_79_2_175:4.5.2.4
	Kernel-5_35-4_79_2_174:4.5.2.4
	Kernel-5_35-4_79_2_173:4.5.2.4
	Kernel-5_35-4_79_2_172:4.5.2.4
	Kernel-5_35-4_79_2_171:4.5.2.4
	Kernel-5_35-4_79_2_170:4.5.2.4
	Kernel-5_35-4_79_2_169:4.5.2.4
	Kernel-5_35-4_79_2_168:4.5.2.4
	Kernel-5_35-4_79_2_167:4.5.2.4
	Kernel-5_35-4_79_2_166:4.5.2.4
	Kernel-5_35-4_79_2_165:4.5.2.4
	RPi_merge:4.5.2.4
	Kernel-5_35-4_79_2_147_2_23:4.5.2.4
	Kernel-5_35-4_79_2_147_2_22:4.5.2.4
	Kernel-5_35-4_79_2_147_2_21:4.5.2.4
	Kernel-5_35-4_79_2_147_2_20:4.5.2.4
	Kernel-5_35-4_79_2_147_2_19:4.5.2.4
	Kernel-5_35-4_79_2_147_2_18:4.5.2.4
	Kernel-5_35-4_79_2_164:4.5.2.4
	Kernel-5_35-4_79_2_163:4.5.2.4
	Kernel-5_35-4_79_2_147_2_17:4.5.2.4
	Kernel-5_35-4_79_2_147_2_16:4.5.2.4
	Kernel-5_35-4_79_2_147_2_15:4.5.2.4
	Kernel-5_35-4_79_2_162:4.5.2.4
	Kernel-5_35-4_79_2_161:4.5.2.4
	Kernel-5_35-4_79_2_147_2_14:4.5.2.4
	Kernel-5_35-4_79_2_147_2_13:4.5.2.4
	Kernel-5_35-4_79_2_160:4.5.2.4
	Kernel-5_35-4_79_2_159:4.5.2.4
	Kernel-5_35-4_79_2_158:4.5.2.4
	Kernel-5_35-4_79_2_157:4.5.2.4
	Kernel-5_35-4_79_2_156:4.5.2.4
	Kernel-5_35-4_79_2_147_2_12:4.5.2.4
	Kernel-5_35-4_79_2_147_2_11:4.5.2.4
	Kernel-5_35-4_79_2_155:4.5.2.4
	Kernel-5_35-4_79_2_147_2_10:4.5.2.4
	Kernel-5_35-4_79_2_154:4.5.2.4
	Kernel-5_35-4_79_2_153:4.5.2.4
	Kernel-5_35-4_79_2_147_2_9:4.5.2.4
	Kernel-5_35-4_79_2_152:4.5.2.4
	Kernel-5_35-4_79_2_151:4.5.2.4
	Kernel-5_35-4_79_2_147_2_8:4.5.2.4
	Kernel-5_35-4_79_2_147_2_7:4.5.2.4
	Kernel-5_35-4_79_2_150:4.5.2.4
	Kernel-5_35-4_79_2_147_2_6:4.5.2.4
	Kernel-5_35-4_79_2_147_2_5:4.5.2.4
	Kernel-5_35-4_79_2_149:4.5.2.4
	Kernel-5_35-4_79_2_147_2_4:4.5.2.4
	Kernel-5_35-4_79_2_147_2_3:4.5.2.4
	Kernel-5_35-4_79_2_148:4.5.2.4
	Kernel-5_35-4_79_2_147_2_2:4.5.2.4
	Kernel-5_35-4_79_2_147_2_1:4.5.2.4
	RPi:4.5.2.4.0.2
	RPi_bp:4.5.2.4
	Kernel-5_35-4_79_2_98_2_52_2_1:4.5.2.3.2.1
	alees_Kernel_dev:4.5.2.3.2.1.0.2
	alees_Kernel_dev_bp:4.5.2.3.2.1
	Kernel-5_35-4_79_2_147:4.5.2.4
	Kernel-5_35-4_79_2_146:4.5.2.4
	Kernel-5_35-4_79_2_145:4.5.2.4
	Kernel-5_35-4_79_2_144:4.5.2.4
	Kernel-5_35-4_79_2_143:4.5.2.4
	Kernel-5_35-4_79_2_142:4.5.2.4
	Kernel-5_35-4_79_2_141:4.5.2.4
	Kernel-5_35-4_79_2_140:4.5.2.4
	Kernel-5_35-4_79_2_139:4.5.2.4
	Kernel-5_35-4_79_2_138:4.5.2.4
	Kernel-5_35-4_79_2_137:4.5.2.4
	Kernel-5_35-4_79_2_136:4.5.2.4
	Kernel-5_35-4_79_2_135:4.5.2.4
	Kernel-5_35-4_79_2_134:4.5.2.4
	Kernel-5_35-4_79_2_133:4.5.2.4
	Kernel-5_35-4_79_2_132:4.5.2.4
	Kernel-5_35-4_79_2_131:4.5.2.4
	Kernel-5_35-4_79_2_130:4.5.2.4
	Kernel-5_35-4_79_2_129:4.5.2.4
	Kernel-5_35-4_79_2_128:4.5.2.4
	Kernel-5_35-4_79_2_127:4.5.2.4
	Kernel-5_35-4_79_2_126:4.5.2.4
	Kernel-5_35-4_79_2_125:4.5.2.4
	Kernel-5_35-4_79_2_124:4.5.2.4
	Kernel-5_35-4_79_2_123:4.5.2.4
	Cortex_merge:4.5.2.3.2.1
	Kernel-5_35-4_79_2_122:4.5.2.3
	Kernel-5_35-4_79_2_98_2_54:4.5.2.3.2.1
	Kernel-5_35-4_79_2_98_2_53:4.5.2.3.2.1
	Kernel-5_35-4_79_2_98_2_52:4.5.2.3.2.1
	Kernel-5_35-4_79_2_98_2_51:4.5.2.3.2.1
	Kernel-5_35-4_79_2_98_2_50:4.5.2.3.2.1
	Kernel-5_35-4_79_2_98_2_49:4.5.2.3.2.1
	Kernel-5_35-4_79_2_98_2_48:4.5.2.3.2.1
	Kernel-5_35-4_79_2_121:4.5.2.3
	Kernel-5_35-4_79_2_98_2_47:4.5.2.3
	Kernel-5_35-4_79_2_120:4.5.2.3
	Kernel-5_35-4_79_2_98_2_46:4.5.2.3
	Kernel-5_35-4_79_2_119:4.5.2.3
	Kernel-5_35-4_79_2_98_2_45:4.5.2.3
	Kernel-5_35-4_79_2_98_2_44:4.5.2.3
	Kernel-5_35-4_79_2_118:4.5.2.3
	Kernel-5_35-4_79_2_98_2_43:4.5.2.3
	Kernel-5_35-4_79_2_117:4.5.2.3
	Kernel-5_35-4_79_2_116:4.5.2.3
	Kernel-5_35-4_79_2_98_2_42:4.5.2.3
	Kernel-5_35-4_79_2_115:4.5.2.3
	Kernel-5_35-4_79_2_98_2_41:4.5.2.3
	Kernel-5_35-4_79_2_98_2_40:4.5.2.3
	Kernel-5_35-4_79_2_114:4.5.2.3
	Kernel-5_35-4_79_2_98_2_39:4.5.2.3
	Kernel-5_35-4_79_2_98_2_38:4.5.2.3
	Kernel-5_35-4_79_2_113:4.5.2.3
	Kernel-5_35-4_79_2_112:4.5.2.3
	Kernel-5_35-4_79_2_98_2_37:4.5.2.3
	Kernel-5_35-4_79_2_98_2_36:4.5.2.3
	Kernel-5_35-4_79_2_98_2_35:4.5.2.3
	Kernel-5_35-4_79_2_98_2_34:4.5.2.3
	Kernel-5_35-4_79_2_98_2_33:4.5.2.3
	Kernel-5_35-4_79_2_98_2_32:4.5.2.3
	Kernel-5_35-4_79_2_98_2_31:4.5.2.3
	Kernel-5_35-4_79_2_98_2_30:4.5.2.3
	Kernel-5_35-4_79_2_98_2_29:4.5.2.3
	Kernel-5_35-4_79_2_98_2_28:4.5.2.3
	Kernel-5_35-4_79_2_98_2_27:4.5.2.3
	Kernel-5_35-4_79_2_98_2_26:4.5.2.3
	Kernel-5_35-4_79_2_111:4.5.2.3
	Kernel-5_35-4_79_2_98_2_25:4.5.2.3
	Kernel-5_35-4_79_2_98_2_24:4.5.2.3
	Kernel-5_35-4_79_2_98_2_23:4.5.2.3
	Kernel-5_35-4_79_2_110:4.5.2.3
	Kernel-5_35-4_79_2_98_2_22:4.5.2.3
	Kernel-5_35-4_79_2_109:4.5.2.3
	Kernel-5_35-4_79_2_98_2_21:4.5.2.3
	Kernel-5_35-4_79_2_98_2_20:4.5.2.3
	Kernel-5_35-4_79_2_108:4.5.2.3
	Kernel-5_35-4_79_2_107:4.5.2.3
	Kernel-5_35-4_79_2_98_2_19:4.5.2.3
	Kernel-5_35-4_79_2_98_2_18:4.5.2.3
	Kernel-5_35-4_79_2_98_2_17:4.5.2.3
	Kernel-5_35-4_79_2_98_2_16:4.5.2.3
	Kernel-5_35-4_79_2_98_2_15:4.5.2.3
	Kernel-5_35-4_79_2_106:4.5.2.3
	Kernel-5_35-4_79_2_105:4.5.2.3
	Kernel-5_35-4_79_2_104:4.5.2.3
	Kernel-5_35-4_79_2_98_2_14:4.5.2.3
	Kernel-5_35-4_79_2_98_2_13:4.5.2.3
	Kernel-5_35-4_79_2_98_2_12:4.5.2.3
	Kernel-5_35-4_79_2_98_2_11:4.5.2.3
	Kernel-5_35-4_79_2_98_2_10:4.5.2.3
	Kernel-5_35-4_79_2_98_2_9:4.5.2.3
	Kernel-5_35-4_79_2_103:4.5.2.3
	Kernel-5_35-4_79_2_102:4.5.2.3
	Kernel-5_35-4_79_2_98_2_8:4.5.2.3
	Kernel-5_35-4_79_2_98_2_7:4.5.2.3
	Kernel-5_35-4_79_2_98_2_6:4.5.2.3
	Kernel-5_35-4_79_2_98_2_5:4.5.2.3
	Kernel-5_35-4_79_2_98_2_4:4.5.2.3
	Kernel-5_35-4_79_2_101:4.5.2.3
	Kernel-5_35-4_79_2_100:4.5.2.3
	Kernel-5_35-4_79_2_99:4.5.2.3
	Kernel-5_35-4_79_2_98_2_3:4.5.2.3
	Kernel-5_35-4_79_2_98_2_2:4.5.2.3
	Kernel-5_35-4_79_2_98_2_1:4.5.2.3
	Cortex:4.5.2.3.0.2
	Cortex_bp:4.5.2.3
	Kernel-5_35-4_79_2_98:4.5.2.3
	Kernel-5_35-4_79_2_97:4.5.2.3
	Kernel-5_35-4_79_2_96:4.5.2.3
	Kernel-5_35-4_79_2_95:4.5.2.3
	Kernel-5_35-4_79_2_94:4.5.2.3
	Kernel-5_35-4_79_2_93:4.5.2.3
	Kernel-5_35-4_79_2_92:4.5.2.3
	Kernel-5_35-4_79_2_91:4.5.2.3
	Kernel-5_35-4_79_2_90:4.5.2.3
	Kernel-5_35-4_79_2_89:4.5.2.3
	Kernel-5_35-4_79_2_88:4.5.2.3
	Kernel-5_35-4_79_2_87:4.5.2.3
	Kernel-5_35-4_79_2_86:4.5.2.3
	Kernel-5_35-4_79_2_85:4.5.2.3
	Kernel-5_35-4_79_2_84:4.5.2.3
	Kernel-5_35-4_79_2_83:4.5.2.3
	Kernel-5_35-4_79_2_82:4.5.2.3
	Kernel-5_35-4_79_2_81:4.5.2.3
	Kernel-5_35-4_79_2_80:4.5.2.3
	Kernel-5_35-4_79_2_79:4.5.2.3
	Kernel-5_35-4_79_2_78:4.5.2.3
	Kernel-5_35-4_79_2_77:4.5.2.3
	RO_5_07:4.5.2.3
	Kernel-5_35-4_79_2_76:4.5.2.3
	Kernel-5_35-4_79_2_75:4.5.2.3
	Kernel-5_35-4_79_2_74:4.5.2.3
	Kernel-5_35-4_79_2_73:4.5.2.3
	Kernel-5_35-4_79_2_72:4.5.2.3
	Kernel-5_35-4_79_2_71:4.5.2.3
	Kernel-5_35-4_79_2_70:4.5.2.3
	Kernel-5_35-4_79_2_69:4.5.2.3
	Kernel-5_35-4_79_2_68:4.5.2.3
	Kernel-5_35-4_79_2_67:4.5.2.3
	Kernel-5_35-4_79_2_66:4.5.2.3
	Kernel-5_35-4_79_2_65:4.5.2.3
	Kernel-5_35-4_79_2_64:4.5.2.3
	Kernel-5_35-4_79_2_63:4.5.2.3
	Kernel-5_35-4_79_2_62:4.5.2.3
	Kernel-5_35-4_79_2_61:4.5.2.3
	Kernel-5_35-4_79_2_59:4.5.2.3
	Kernel-5_35-4_79_2_58:4.5.2.3
	Kernel-5_35-4_79_2_57:4.5.2.3
	Kernel-5_35-4_79_2_56:4.5.2.3
	Kernel-5_35-4_79_2_55:4.5.2.3
	Kernel-5_35-4_79_2_54:4.5.2.3
	Kernel-5_35-4_79_2_53:4.5.2.3
	Kernel-5_35-4_79_2_52:4.5.2.3
	Kernel-5_35-4_79_2_51:4.5.2.3
	Kernel-5_35-4_79_2_50:4.5.2.3
	Kernel-5_35-4_79_2_49:4.5.2.3
	Kernel-5_35-4_79_2_48:4.5.2.3
	Kernel-5_47:4.5
	Kernel-5_46-4_90_2_1:4.5
	nbingham_Kernel_FastNC_dev_bp:4.5
	nbingham_Kernel_FastNC_dev:4.5.0.4
	Kernel-5_46:4.5
	Kernel-5_45:4.5
	Kernel-5_35-4_79_2_47:4.5.2.2
	Kernel-5_35-4_79_2_46:4.5.2.2
	Kernel-5_35-4_79_2_45:4.5.2.2
	Kernel-5_35-4_79_2_44:4.5.2.2
	Kernel-5_35-4_79_2_25_2_2:4.5.2.1
	Kernel-5_35-4_79_2_43:4.5.2.2
	Kernel-5_35-4_79_2_42:4.5.2.2
	Kernel-5_35-4_79_2_41:4.5.2.2
	Kernel-5_35-4_79_2_40:4.5.2.2
	Kernel-5_35-4_79_2_39:4.5.2.2
	Kernel-5_35-4_79_2_38:4.5.2.2
	Kernel-5_35-4_79_2_37:4.5.2.1
	Kernel-5_35-4_79_2_36:4.5.2.1
	Kernel-5_35-4_79_2_35:4.5.2.1
	Kernel-5_35-4_79_2_34:4.5.2.1
	Kernel-5_35-4_79_2_33:4.5.2.1
	Kernel-5_35-4_79_2_32:4.5.2.1
	Kernel-5_44:4.5
	Kernel-5_35-4_79_2_25_2_1:4.5.2.1
	Kernel-5_43:4.5
	Kernel-5_35-4_79_2_31:4.5.2.1
	Kernel-5_35-4_79_2_30:4.5.2.1
	Kernel-5_35-4_79_2_29:4.5.2.1
	Kernel-5_35-4_79_2_28:4.5.2.1
	Kernel-5_35-4_79_2_27:4.5.2.1
	Kernel-5_35-4_79_2_26:4.5.2.1
	Kernel-5_42:4.5
	Kernel-5_41:4.5
	Kernel-5_40:4.5
	Kernel-5_35-4_79_2_25:4.5.2.1
	Kernel-5_35-4_79_2_24:4.5.2.1
	Kernel-5_35-4_79_2_23:4.5.2.1
	Kernel-5_35-4_79_2_22:4.5.2.1
	Kernel-5_35-4_79_2_21:4.5.2.1
	Kernel-5_35-4_79_2_20:4.5.2.1
	Kernel-5_35-4_79_2_19:4.5.2.1
	Kernel-5_35-4_79_2_18:4.5.2.1
	Kernel-5_35-4_79_2_17:4.5.2.1
	Kernel-5_35-4_79_2_16:4.5.2.1
	Kernel-5_35-4_79_2_15:4.5.2.1
	Kernel-5_35-4_79_2_14:4.5.2.1
	Kernel-5_39:4.5
	Kernel-5_13-4_52_2_1:4.4
	Bethany:4.4.0.2
	Kernel-5_38:4.5
	Kernel-5_35-4_79_2_13:4.5
	Kernel-5_35-4_79_2_12:4.5
	Kernel-5_35-4_79_2_11:4.5
	Kernel-5_37:4.5
	Kernel-5_35-4_79_2_10:4.5
	Kernel-5_35-4_79_2_9:4.5
	Kernel-5_36:4.5
	Kernel-5_35-4_79_2_8:4.5
	Kernel-5_35-4_79_2_7:4.5
	Kernel-5_35-4_79_2_6:4.5
	Kernel-5_35-4_79_2_5:4.5
	Kernel-5_35-4_79_2_4:4.5
	Kernel-5_35-4_79_2_3:4.5
	Kernel-5_35-4_79_2_2:4.5
	dellis_autobuild_BaseSW:4.5
	Kernel-5_35-4_79_2_1:4.5
	HAL:4.5.0.2
	Kernel-5_35:4.5
	Kernel-5_34:4.5
	Kernel-5_33:4.5
	Kernel-5_32:4.5
	Kernel-5_31:4.5
	Kernel-5_30:4.5
	Kernel-5_29:4.5
	Kernel-5_28:4.5
	Kernel-5_27:4.5
	Kernel-5_26:4.5
	Kernel-5_25:4.5
	Kernel-5_24:4.5
	Kernel-5_23:4.5
	Kernel-5_22:4.4
	sbrodie_sedwards_16Mar2000:4.4
	Kernel-5_21:4.4
	Kernel-5_20:4.4
	Kernel-5_19:4.4
	Kernel-5_18:4.4
	Kernel-5_17:4.4
	Kernel-5_16:4.4
	Kernel-5_15:4.4
	Kernel-5_14:4.4
	Kernel-5_13:4.4
	Kernel-5_12:4.4
	Kernel-5_11:4.4
	Kernel-5_10:4.4
	Kernel-5_09:4.4
	Kernel-5_08:4.4
	Kernel-5_07:4.4
	Kernel-5_06:4.4
	Kernel-5_05:4.4
	Kernel-5_04:4.4
	Kernel-5_03:4.4
	Kernel-5_02:4.4
	Kernel-5_01:4.4
	Kernel-5_00:4.4
	Kernel-4_99:4.4
	Kernel-4_98:4.4
	Kernel-4_97:4.4
	Kernel-4_96:4.4
	Kernel-4_95:4.4
	Kernel-4_94:4.4
	Kernel-4_93:4.4
	Kernel-4_92:4.4
	Kernel-4_91:4.4
	Kernel-4_90:4.4
	dcotton_autobuild_BaseSW:4.5
	Kernel-4_89:4.4
	Kernel-4_88:4.4
	Kernel-4_87:4.4
	Kernel-4_86:4.4
	Kernel-4_85:4.4
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.3.2.2.2.1
	Kernel-4_84:4.4
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.3.2.2.2.1
	Ursula_RiscPC_bp:4.3.2.2
	Kernel-4_83:4.4
	Kernel-4_82:4.4
	Kernel-4_81:4.4
	Kernel-4_80:4.4
	Kernel-4_79:4.4
	Kernel-4_78:4.4
	Kernel-4_77:4.4
	Kernel-4_76:4.4
	Kernel-4_75:4.4
	Kernel-4_74:4.4
	Kernel-4_73:4.4
	Kernel-4_72:4.4
	Kernel-4_71:4.4
	Kernel-4_70:4.4
	Kernel-4_69:4.4
	Kernel-4_68:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3.2.2.2.1
	Ursula_RiscPC:4.3.2.2.0.2
	Kernel-4_63-1_1_2_5:4.1.7.2
	Kernel-4_63-1_1_2_4:4.1.7.2
	Kernel-4_67:4.4
	Kernel-4_66:4.4
	Kernel-4_63-1_1_2_3:4.1.7.2
	Kernel-4_65:4.3
	Ursula_merge:4.3
	Kernel-4_64:4.3
	mstphens_Kernel-3_81:4.3.2.3
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.3.2.2
	UrsulaBuild_FinalSoftload:4.3.2.2
	rthornb_UrsulaBuild-12Aug1998:4.3.2.2
	aglover_UrsulaBuild-05Aug1998:4.3.2.2
	rthornb_UrsulaBuild-29Jul1998:4.3.2.2
	rthornb_UrsulaBuild-22Jul1998:4.3.2.2
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.3.2.2
	rthornb_UrsulaBuild-07Jul1998:4.3.2.2
	rthornb_UrsulaBuild-17Jun1998:4.3.2.2
	rthornb_UrsulaBuild-03Jun1998:4.3.2.2
	rthornb_UrsulaBuild-27May1998:4.3.2.2
	mstphens_Kernel-3_80:4.3.2.2
	rthornb_UrsulaBuild-21May1998:4.3.2.2
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.3.2.2
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.3.0.4
	Daytona_bp:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.3
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2016.06.30.20.28.55;	author jlee;	state dead;
branches;
next	4.6;
commitid	lMnWzoE9eJz3Wwcz;

4.6
date	2016.06.30.20.08.08;	author jlee;	state Exp;
branches;
next	4.5;
commitid	IWoXxARWeuLDOwcz;

4.5
date	2000.04.04.14.27.30;	author kbracey;	state Exp;
branches
	4.5.2.1;
next	4.4;

4.4
date	98.10.22.09.24.25;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	97.05.07.05.51.50;	author kbracey;	state Exp;
branches
	4.3.2.1;
next	4.2;

4.2
date	97.01.21.14.07.04;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.19;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.5.2.1
date	2001.01.09.17.17.32;	author mstephen;	state Exp;
branches;
next	4.5.2.2;

4.5.2.2
date	2001.06.18.14.49.44;	author mstephen;	state Exp;
branches;
next	4.5.2.3;

4.5.2.3
date	2002.10.07.17.29.41;	author kbracey;	state Exp;
branches
	4.5.2.3.2.1;
next	4.5.2.4;

4.5.2.4
date	2011.11.26.21.11.15;	author jlee;	state Exp;
branches;
next	;
commitid	cI3W0zbtALQG6TIv;

4.5.2.3.2.1
date	2011.08.08.23.28.26;	author jlee;	state Exp;
branches;
next	;
commitid	D7rzILnwRRSXoLuv;

4.3.2.1
date	97.09.09.13.33.12;	author mstphens;	state Exp;
branches;
next	4.3.2.2;

4.3.2.2
date	97.12.08.14.34.27;	author mstphens;	state Exp;
branches
	4.3.2.2.2.1;
next	4.3.2.3;

4.3.2.3
date	98.09.24.13.17.10;	author mstphens;	state Exp;
branches;
next	;

4.3.2.2.2.1
date	98.11.23.14.59.09;	author mstphens;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.41.19;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.00.19;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	4.1.3.2;

4.1.3.2
date	97.05.01.08.09.25;	author kbracey;	state Exp;
branches;
next	4.1.3.3;

4.1.3.3
date	97.05.07.06.25.07;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1.2.1
date	97.04.30.16.46.03;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.11.05;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.03.35;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	98.10.19.13.30.25;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > KbdResPC

; This file contains the minimal PC keyboard control stuff that the kernel does on reset.
; The only two hooks in this file used externally are IRQ_Test_CTRL_or_R_Pressed
; and SetUpKbd.

; For now, use development podule in slot 0.
IOBase          *       IOMD_Base
IOData          *       IOCSERTX
IOStatus        *       IOMD_KBDCR
IOControl       *       IOMD_KBDCR
stat_RXF        *       IOMD_KBDCR_RxF
stat_TXE        *       IOMD_KBDCR_TxE
ctl_Enable      *       IOMD_KBDCR_Enable
ctl_EnableIRQ   *       0       ; not needed on IOMD


; PC keyboard codes we are interested in.
PCReset         *       &AA
PCSpecial       *       &E0
PCCTRLL         *       &14
PCCTRLR         *       &14     ; Preceded by &E0
PCSHIFTL        *       &12
PCSHIFTR        *       &59
PCR             *       &2D
PCT             *       &2C
PCDelete        *       &71     ; Preceded by &E0
PCBSpace        *       &66
PCEnd           *       &69     ; Preceded by &E0

KeyData
        DCB     PCCTRLL,  CTRL_Down_Flag
        DCB     PCSHIFTL, SHIFT_Down_Flag
        DCB     PCSHIFTR, SHIFT_Down_Flag
        DCB     PCR,      R_Down_Flag
        DCB     PCT,      T_Down_Flag
        DCB     PCBSpace, Del_Down_Flag
        DCB     0
        ALIGN

SpecialData
        DCB     PCCTRLR,  CTRL_Down_Flag
        DCB     PCDelete, Del_Down_Flag
        DCB     PCEnd,    Copy_Down_Flag
        DCB     0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  [ :LNOT HAL

SetUpKbd
        MOV     r0, #IOBase
        MOV     r1, #ctl_Enable + ctl_EnableIRQ
        STRB    r1, [r0, #IOControl]
10
        LDRB    r1, [r0, #IOStatus]
        TST     r1, #stat_TXE
        MOVNE   r1, #&FF
        STRNEB  r1, [r0, #IOData]
        BEQ     %BT10

 [ MorrisSupport
  [ {TRUE} ; ARM7500FE support
; Change test to check for IOMD_Original, rather than IOMD_7500, so we include IOMD_7500FE
; in the latter category

        LDRB    r1, [r0, #IOMD_ID0]
        LDRB    r2, [r0, #IOMD_ID1]             ; safe to use r2, since SetUpKbdReturn corrupts it
        ORR     r1, r1, r2, LSL #8              ; straight away
        LDR     r2, =IOMD_Original
        TEQ     r1, r2
        BEQ     %FT30
  |
        LDRB    R1, [R0, #IOMD_ID0]             ;Are we running on Morris
        CMP     R1, #&E7
        LDRB    R1, [R0, #IOMD_ID1]
        CMPEQ   R1, #&5B
        BNE     %FT30                           ;NE: no, assume IOMD, so only one PS2 port
  ]

        MOV     R1, #IOMD_MSECR_Enable          ;yes, so initialise 2nd PS2 (mouse) port cos
        STRB    R1, [R0, #IOMD_MSECR]           ;keyboard may be connected there instead
20
        LDRB    R1, [R0, #IOMD_MSECR]
        TST     R1, #IOMD_MSECR_TxE             ;Is port ready to accept data
        MOVNE   R1, #&FF                        ;NE: port ready, so send 'reset' command
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ;
        BEQ     %BT20                           ;EQ: loop til port ready

        MOV     R1, #IOMD_MouseRxFull_IRQ_bit
        STRB    R1, [R0, #IOMD_IRQMSKD]

        MOV     R0, #InitKbdWs
        MOV     R1, #2
        STRB    R1, [R0, #Port2Present]
30
 ]
        MOV     r0, #InitKbdWs
        ADR     r1, KeyData
        STR     r1, [r0, #KeyDataPtr]

        B       SetUpKbdReturn

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; On ARM600, this routine must work in IRQ32 mode

IRQ_Test_CTRL_or_R_Pressed ROUT
        SUB     lr, lr, #4
        Push    "r0-r2,lr"

        MOV     r2, #IOBase
 [ MorrisSupport
        MOV     lr, #InitIRQWs
        LDRB    r1, [lr, #Port2Present] ;Check if 2nd PS2 port (in Morris) is available
        TEQ     r1, #0

        LDRNEB  r0, [r2, #IOMD_MSECR]   ;NE: yes, so check if interrupt is from it
        TSTNE   r0, #IOMD_MSECR_RxF     ;
        LDRNEB  r2, [r2, #IOMD_MSEDAT]  ;NE: 2nd port present and interrupting, get scan code
        MOVNE   r1, #2                  ;NE: indicate which port
        BNE     %FT5                    ;NE: process it
                                        ;EQ: 2nd port not present or interrupting
                                        ;    drop through and check 1st port
 ]
        LDRB    r0, [r2, #IOStatus]
        TST     r0, #stat_RXF           ; If not keyboard then
        Pull    "r0-r2,pc",EQ,^         ;   exit.

        LDRB    r2, [r2, #IOData]       ; Get scan code.

 [ MorrisSupport
        MOV     r1, #1
5
        LDRB    r0, [lr, #KB_There_Flag]

        TEQ     r2, #0                  ;Assume that zero is the end of a mouse AA 00 start up
        BICEQ   r0, r0, r1              ; sequence, so clear keyboard present indication.
        STREQB  r0, [lr, #KB_There_Flag]
        Pull    "r0-r2,pc",EQ,^         ; and exit

        ORRNE   r0, r0, r1              ;Not zero, mark keyboard present
 ]

        MOV     lr, #InitIRQWs

        STRB    r0, [lr, #KB_There_Flag]        ; Keyboard must be there (r0<>0 from above).

        ADR     r1, SpecialData

        TEQ     r2, #PCSpecial          ; If special code then
        STREQ   r1, [lr, #KeyDataPtr]   ;   switch tables
        Pull    "r0-r2,pc",EQ,^         ;   and exit.

        LDR     r0, [lr, #KeyDataPtr]   ; Get pointer to current table.

        TEQ     r0, r1                  ; Only use special table once, then
        ADREQ   r1, KeyData             ;   switch back to normal table.
        STREQ   r1, [lr, #KeyDataPtr]
10
        LDRB    r1, [r0], #2            ; Get key code from table.
        TEQ     r1, #0                  ; If at end of table then
        Pull    "r0-r2,pc",EQ,^         ;   ignore key.

        TEQ     r1, r2                  ; If not this key then
        BNE     %BT10                   ;   try the next.

        LDRB    r1, [r0, #-1]           ; Get flag.
        STRB    r1, [lr, r1]            ; Non-zero means pressed.

        Pull    "r0-r2,pc",,^

  ] ; :LNOT: HAL

        END
@


4.6
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@@


4.5
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@a21 1
 [ IO_Type = "IOMD"
a29 10
 |
IOBase          *       &03000000
IOData          *       0
IOStatus        *       4
IOControl       *       4
stat_RXF        *       &20
stat_TXE        *       &80
ctl_Enable      *       &08
ctl_EnableIRQ   *       &80
 ]
d64 2
d82 6
a87 6
	LDRB	r1, [r0, #IOMD_ID0]
	LDRB	r2, [r0, #IOMD_ID1]		; safe to use r2, since SetUpKbdReturn corrupts it
	ORR	r1, r1, r2, LSL #8		; straight away
	LDR	r2, =IOMD_Original
	TEQ	r1, r2
	BEQ	%FT30
d129 1
a129 1
        MOV     lr, #InitKbdWs
d160 1
a160 1
        MOV     lr, #InitKbdWs
d188 2
@


4.5.2.1
log
@First attempt at ARM9 support, and general clean-up of old ARM-specific
code, now using vectored ARMops.
Not tested.

Version 5.35, 4.79.2.14. Tagged as 'Kernel-5_35-4_79_2_14'
@
text
@a74 2
  [ :LNOT HAL

d91 6
a96 6
        LDRB    r1, [r0, #IOMD_ID0]
        LDRB    r2, [r0, #IOMD_ID1]             ; safe to use r2, since SetUpKbdReturn corrupts it
        ORR     r1, r1, r2, LSL #8              ; straight away
        LDR     r2, =IOMD_Original
        TEQ     r1, r2
        BEQ     %FT30
a126 2

  ] ; :LNOT: HAL
@


4.5.2.2
log
@Reimplement enhancements to kernel Dynamic Area support from
Ursula. Quite a hairy code merge really, so let's hope it is
worth it to someone. What you get (back after 2 or 3 years):
- much more efficient for largish numbers of DAs (relevance
  to current build = approx 0)
- fancy reason codes to support fast update of
  Switcher bar display (relevance = 0)
- support for clamped maximum area sizes, to avoid address
  space exhaustion with big memory (relevance = 0)
- better implementation of shrinkable DAs, performance
  wise (if lots of DAs, relevance = approx 0)
- support for 'Sparse' DAs. Holey dynamic areas, Batman!
  (relevance, go on someone use the darned things)
Moderately development tested on HAL/32bit ARM9 desktop.
Note the Switcher should be compiled to use the new
reason codes 6&7, for fabled desktop builds.

Also, during this work, so I could see the wood for the
trees, redid some source code clean up, removing pre-Medusa
stuff (like I did about 3 years ago on Ursula, sigh). That's
why loads of source files have changed. The new DA stuff
is confined pretty much to hdr.KernelWS and s.ChangeDyn.

Ta.

Version 5.35, 4.79.2.38. Tagged as 'Kernel-5_35-4_79_2_38'
@
text
@d22 1
d31 10
@


4.5.2.3
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@d131 1
a131 1
        MOV     lr, #InitIRQWs
d162 1
a162 1
        MOV     lr, #InitIRQWs
@


4.5.2.4
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d119 2
a189 2
  ] ; :LNOT: HAL

@


4.5.2.3.2.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@d119 2
a189 2
  ] ; :LNOT: HAL

@


4.4
log
@Spinner branch (Backspace-Power On addition) merged.

Version 4.66. Tagged as 'Kernel-4_66'
@
text
@a132 4
 [ CPU_Type = "ARM600"
        BIC     pc, pc, #&FC000000      ; take us out of the shadow ROM area
        NOP                             ; (this instruction skipped)
 ]
@


4.3
log
@RISC OS 3.71 kernel changes merged.
Not fully tested on all hardware permutations.
@
text
@d53 1
d62 1
@


4.3.2.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d32 8
d85 2
a86 2

; check for IOMD_Original, rather than IOMD_7500, so we include IOMD_7500FE
d89 13
a101 6
        LDRB    r1, [r0, #IOMD_ID0]
        LDRB    r2, [r0, #IOMD_ID1]             ; safe to use r2, since SetUpKbdReturn corrupts it
        ORR     r1, r1, r2, LSL #8              ; straight away
        LDR     r2, =IOMD_Original
        TEQ     r1, r2
        BEQ     %FT30
d131 1
a131 1

d134 1
a134 1

@


4.3.2.2
log
@Various speed ups
Memory map changes:
remove shadow ROM
move UNDEF stack, SoftCAM and MMU tables above 64M
expand RMA limit to 15M from 11M
expand SysHeap limit to 3M-32k from 2M-8k
expand SVC stack to 32k from 8k
partially protect kernel workspace from user access
protect SVC stack from user access
@
text
@d117 3
@


4.3.2.2.2.1
log
@Changed compile switches, to build Ursula kernel for RPC and A7000(+),
switches now set as follows:
  ARM67Support      TRUE  (for 610,710,7500,7500FE)
  ARMSASupport      TRUE  (for StrongARM)
  ARMSASupport_RevS FALSE (for StrongARMs before rev S)
  IOMD1Support      TRUE  (for old machines)
  IOMD2Support      FALSE (They killed Phoebe!)
Version set to 4.00 (RISC OS 4)
This is the same as my last commit to the Ursula branch
@
text
@d22 1
d31 2
a66 10

        LDRB    r1, [r0, #IOMD_ID0]
        TEQ     r1, #IOMD_IOMD2    :AND: &FF        ; we don't do kernel kbd stuff on Phoebe
        BEQ     %FT30
        TEQ     r1, #IOMD_Original :AND: &FF
        TEQNE   r1, #IOMD_7500     :AND: &FF
        TEQNE   r1, #IOMD_7500FE   :AND: &FF
        BNE     SetUpKbd                            ; deliberate panic hang up

;
d76 5
a80 2
12
        ;note that we know we are not on IOMD2 here
d82 5
a86 6
        TEQ     r1, #IOMD_Original :AND: &FF
        BEQ     %FT30                                 ; IOMD1 (Risc PC)
        TEQ     r1, #IOMD_7500     :AND: &FF
        TEQNE   r1, #IOMD_7500FE   :AND: &FF
        BEQ     %FT14                                 ; 7500 (A7000) or 7500FE (A7000+)
        B       %BT12                                 ; deliberate panic hang-up (unrecognised IOMD)
d88 1
a88 2
14
        MOV     R1, #IOMD_MSECR_Enable          ;initialise 2nd PS2 (mouse) port cos
d104 1
d121 1
d133 1
d140 1
d151 1
@


4.3.2.3
log
@Phoebe aware version of kernel
Source currently builds for Phoebe only. Flipping source switches will
build for Risc PC and/or A7000(+) as well (or instead). Not tested
much on older platforms.
Known issues remaining:
 - on Phoebe, kernel does not always set up the video (new VCO)
   properly. It appears that anything via the display manager is ok,
   old modes are ok before a monitor definition is seen, but mode
   changes via applications in the desktop always/often (?) aren't.
   Most likely area for investigation is whether kernel catches all
   mode change routes for ensuring it programs the new VCO.
 - on Phoebe, kernel does not yet have the hooks to support multiple
   CPU(s) (to park the slaves and allow them to be used later). I
   have a technical note on this, which should be archived as part of
   the Ursula burial work.
 - on older platforms, the areas that need checking most are CMOS
   power on reset (when in ROM) and mode changes by all routes (since
   these areas are bent by Phoebe support)
Note that kernel currently builds for rev S or better StrongARM. The
switch ARMSASupport_RevS should be set false if building for Risc PC.
@
text
@d22 1
d31 2
a66 10

        LDRB    r1, [r0, #IOMD_ID0]
        TEQ     r1, #IOMD_IOMD2    :AND: &FF        ; we don't do kernel kbd stuff on Phoebe
        BEQ     %FT30
        TEQ     r1, #IOMD_Original :AND: &FF
        TEQNE   r1, #IOMD_7500     :AND: &FF
        TEQNE   r1, #IOMD_7500FE   :AND: &FF
        BNE     SetUpKbd                            ; deliberate panic hang up

;
d76 5
a80 2
12
        ;note that we know we are not on IOMD2 here
d82 5
a86 6
        TEQ     r1, #IOMD_Original :AND: &FF
        BEQ     %FT30                                 ; IOMD1 (Risc PC)
        TEQ     r1, #IOMD_7500     :AND: &FF
        TEQNE   r1, #IOMD_7500FE   :AND: &FF
        BEQ     %FT14                                 ; 7500 (A7000) or 7500FE (A7000+)
        B       %BT12                                 ; deliberate panic hang-up (unrecognised IOMD)
d88 1
a88 2
14
        MOV     R1, #IOMD_MSECR_Enable          ;initialise 2nd PS2 (mouse) port cos
d104 1
d121 1
d133 1
d140 1
d151 1
@


4.2
log
@Kernel merged
@
text
@d97 1
a97 1
        CMP     R1, #&98
@


4.1
log
@Initial revision
@
text
@d85 11
d101 1
d109 1
a109 1
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ; 
d145 1
a145 1
        TSTNE   r0, #IOMD_MSECR_RxF     ;   
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@a84 11
  [ {TRUE} ; ARM7500FE support
; Change test to check for IOMD_Original, rather than IOMD_7500, so we include IOMD_7500FE
; in the latter category

	LDRB	r1, [r0, #IOMD_ID0]
	LDRB	r2, [r0, #IOMD_ID1]		; safe to use r2, since SetUpKbdReturn corrupts it
	ORR	r1, r1, r2, LSL #8		; straight away
	LDR	r2, =IOMD_Original
	TEQ	r1, r2
	BEQ	%FT30
  |
a89 1
  ]
d97 1
a97 1
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ;
d133 1
a133 1
        TSTNE   r0, #IOMD_MSECR_RxF     ;
@


4.1.7.2
log
@Allow Backspace-Power On as a synonym for Delete-Power On.

Version 4.63, 1.1.2.3. Tagged as 'Kernel-4_63-1_1_2_3'
@
text
@a52 1
PCBSpace        *       &66
a60 1
        DCB     PCBSpace, Del_Down_Flag
@


4.1.5.1
log
@Import from SrcFiler
@
text
@a84 11
  [ {TRUE} ; ARM7500FE support
; Change test to check for IOMD_Original, rather than IOMD_7500, so we include IOMD_7500FE
; in the latter category

	LDRB	r1, [r0, #IOMD_ID0]
	LDRB	r2, [r0, #IOMD_ID1]		; safe to use r2, since SetUpKbdReturn corrupts it
	ORR	r1, r1, r2, LSL #8		; straight away
	LDR	r2, =IOMD_Original
	TEQ	r1, r2
	BEQ	%FT30
  |
a89 1
  ]
d97 1
a97 1
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ;
d133 1
a133 1
        TSTNE   r0, #IOMD_MSECR_RxF     ;
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a71 10
 [ 1 = 1
SetUpKbd
        MOV     r0, #IOBase

 [ MorrisSupport
        LDRB    R1, [R0, #IOMD_ID0]             ;Are we running on Morris
        CMP     R1, #&98
        LDRB    R1, [R0, #IOMD_ID1]
        CMPEQ   R1, #&5B
        BNE     %FT30                           ;NE: no, assume IOMD, so only one PS2 port
a72 85
  [ 1 = 1
;
; Addresses and bit meanings for the Stork keyboard/battery-manager controller
;
uC_Base                         EQU     &302B800

uC_DataRxReg                    EQU     uC_Base         ;Read only
uC_KeyDataTxReg                 EQU     uC_Base         ;Write only

uC_StatusReg                    EQU     uC_Base + 4     ;Read only

;Status register bits
uC_Status_IBF                   EQU     1 :SHL: 0       ;Set data waiting in DataRxReg
uC_Status_OBF                   EQU     1 :SHL: 1       ;

;
; On Kryten, Morris pin Event2 is tied low so bit Nevent2 is a ONE
; On Stork, Morris pin Event2 is tied high so bit Nevent2 is a ZERO
;
       ;MOV     r0, #IOBase
        LDRB    R1, [R0, #IOMD_IRQSTD]
        TST     R1, #IOMD_Nevent2_bit
        BNE     %FT35                           ;NE: Not Stork, so two PS2 ports
                                                ;EQ, Stork
;
; Must ensure external keyboard and mouse are selected and powered
;
        LDR     r0, =HWLatchPB
        MOV     r1, #InitLatchPB
        STRB    r1, [r0]

        MOV     r0, #IOBase
        LDR     R0, =uC_StatusReg               ;Get Tx buffer status bit
25                                              ;
        LDRB    R1, [R0]                        ;
        TST     R1, #uC_Status_OBF              ;
        BNE     %BT25                           ;Loop until buffer empties

        MOV     R1, #&FF                        ;EQ: port ready, so send 'reset' command
        LDR     R0, =uC_KeyDataTxReg
        STRB    R1, [R0]                        ;Write byte to keyboard

        MOV     R0, #IOBase                     ;Enable Ints from Storks keyboard/battery
        MOV     R1, #IOMD_Network_IRQ_bit       ; manager
        STRB    R1, [R0, #IOCIRQMSKB]

        MOV     R0, #InitKbdWs
        MOV     R1, #4
        STRB    R1, [R0, #Port3Present]
35
  ]
        MOV     r0, #IOBase
        MOV     R1, #IOMD_MSECR_Enable          ;initialise 2nd PS2 (mouse) port cos
        STRB    R1, [R0, #IOMD_MSECR]           ;keyboard may be connected there
20
        LDRB    R1, [R0, #IOMD_MSECR]
        TST     R1, #IOMD_MSECR_TxE             ;Is port ready to accept data
        MOVNE   R1, #&FF                        ;NE: port ready, so send 'reset' command
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ; 
        BEQ     %BT20                           ;EQ: loop til port ready

        MOV     R1, #IOMD_MouseRxFull_IRQ_bit
        STRB    R1, [R0, #IOMD_IRQMSKD]

        MOV     R0, #InitKbdWs
        MOV     R1, #2
        STRB    R1, [R0, #Port2Present]
30
 ]
        MOV     r0, #IOBase
        MOV     r1, #ctl_Enable + ctl_EnableIRQ
        STRB    r1, [r0, #IOControl]
10
        LDRB    r1, [r0, #IOStatus]
        TST     r1, #stat_TXE
        MOVNE   r1, #&FF
        STRNEB  r1, [r0, #IOData]
        BEQ     %BT10

        MOV     r0, #InitKbdWs
        ADR     r1, KeyData
        STR     r1, [r0, #KeyDataPtr]

        B       SetUpKbdReturn
 |
a105 43
  [ 1 = 1
;
; Addresses and bit meanings for the Stork keyboard/battery-manager controller
;
uC_Base                         EQU     &302B800

uC_DataRxReg                    EQU     uC_Base         ;Read only
uC_KeyDataTxReg                 EQU     uC_Base         ;Write only

uC_StatusReg                    EQU     uC_Base + 4     ;Read only

;Status register bits
uC_Status_IBF                   EQU     1 :SHL: 0       ;Set data waiting in DataRxReg
uC_Status_OBF                   EQU     1 :SHL: 1       ;

;
; On Kryten, Morris pin Event2 is tied low so bit Nevent2 is a ONE
; On Stork, Morris pin Event2 is tied high so bit Nevent2 is a ZERO
;
        MOV     r0, #IOBase
        LDRB    R1, [R0, #IOMD_IRQSTD]
        TST     R1, #IOMD_Nevent2_bit
        BNE     %FT30                           ;NE: Not Stork, so two PS2 ports (which we've dealt with)
                                                ;EQ, Stork

        LDR     R0, =uC_StatusReg               ;Get Tx buffer status bit
25                                              ;
        LDRB    R1, [R0]                        ;
        TST     R1, #uC_Status_OBF              ;
        BNE     %BT25                           ;Loop until buffer empties

        MOV     R1, #&FF                        ;EQ: port ready, so send 'reset' command
        LDR     R0, =uC_KeyDataTxReg
        STRB    R1, [R0]                        ;Write byte to keyboard

        MOV     R0, #IOBase                     ;Enable Ints from Storks keyboard/battery
        MOV     R1, #IOMD_Network_IRQ_bit       ; manager
        STRB    R1, [R0, #IOCIRQMSKB]

        MOV     R0, #InitKbdWs
        MOV     R1, #4
        STRB    R1, [R0, #Port3Present]
  ]
d113 1
a113 1
 ]
a127 15
  [ 1 = 1
        MOV     lr, #InitKbdWs
        LDRB    r1, [lr, #Port3Present] ;Check if 3rd PS2 port (battery micro) is available
        TEQ     r1, #0

        LDRNE   lr, =uC_StatusReg       ;NE: yes, so check if interrupt is from it
        LDRNEB  r1, [lr]                ;
        TSTNE   r1, #uC_Status_IBF      ;
        LDRNE   r2, =uC_DataRxReg       ;
        LDRNEB  r2, [r2]                ;NE: 3rd port present and interrupting, get scan code
        MOVNE   r1, #4                  ;NE: indicate which port
        BNE     %FT5                    ;NE: process it
                                        ;EQ: 3rd port not present or not interrupting
                                        ;    drop through and check 2nd port
  ]
d137 1
a137 1
                                        ;EQ: 2nd port not present or not interrupting
@


4.1.3.2
log
@RISC OS 3.71 version taken
@
text
@d77 2
a78 2
        LDRB    R1, [R0, #IOMD_ID0]             ;Are we running on Medusa
        CMP     R1, #&E7
d80 2
a81 2
        CMPEQ   R1, #&D4
        BEQ     %FT30                           ;EQ: yes, it is IOMD, so only one PS2 port
d141 1
a141 1
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ;
d181 1
a181 1
        CMP     R1, #&E7
d183 2
a184 2
        CMPEQ   R1, #&D4
        BEQ     %FT30                           ;EQ: yes, it is IOMD, so only one PS2 port
d192 1
a192 1
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ;
d286 1
a286 1
        TSTNE   r0, #IOMD_MSECR_RxF     ;
@


4.1.3.3
log
@RISC OS 3.71 import corrected
@
text
@d180 1
a180 1
        LDRB    R1, [R0, #IOMD_ID0]             ;Are we running on Medusa
@


4.1.3.1.2.1
log
@Merged from 3.71 CD
@
text
@d77 2
a78 2
        LDRB    R1, [R0, #IOMD_ID0]             ;Are we running on Medusa
        CMP     R1, #&E7
d80 2
a81 2
        CMPEQ   R1, #&D4
        BEQ     %FT30                           ;EQ: yes, it is IOMD, so only one PS2 port
d141 1
a141 1
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ;
d181 1
a181 1
        CMP     R1, #&E7
d183 2
a184 2
        CMPEQ   R1, #&D4
        BEQ     %FT30                           ;EQ: yes, it is IOMD, so only one PS2 port
d192 1
a192 1
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ;
d286 1
a286 1
        TSTNE   r0, #IOMD_MSECR_RxF     ;
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
