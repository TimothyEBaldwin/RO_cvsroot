head	4.3;
access;
symbols
	HAL_merge:4.2
	Kernel-5_48:4.2
	Kernel-5_35-4_79_2_327:4.2
	Kernel-5_35-4_79_2_326:4.2
	Kernel-5_35-4_79_2_325:4.2
	Kernel-5_35-4_79_2_324:4.2
	Kernel-5_35-4_79_2_323:4.2
	Kernel-5_35-4_79_2_322:4.2
	Kernel-5_35-4_79_2_321:4.2
	Kernel-5_35-4_79_2_320:4.2
	Kernel-5_35-4_79_2_319:4.2
	Kernel-5_35-4_79_2_318:4.2
	Kernel-5_35-4_79_2_317:4.2
	Kernel-5_35-4_79_2_316:4.2
	Kernel-5_35-4_79_2_315:4.2
	Kernel-5_35-4_79_2_314:4.2
	Kernel-5_35-4_79_2_313:4.2
	Kernel-5_35-4_79_2_312:4.2
	Kernel-5_35-4_79_2_311:4.2
	Kernel-5_35-4_79_2_310:4.2
	Kernel-5_35-4_79_2_309:4.2
	Kernel-5_35-4_79_2_308:4.2
	Kernel-5_35-4_79_2_307:4.2
	Kernel-5_35-4_79_2_306:4.2
	Kernel-5_35-4_79_2_305:4.2
	Kernel-5_35-4_79_2_304:4.2
	Kernel-5_35-4_79_2_303:4.2
	Kernel-5_35-4_79_2_302:4.2
	Kernel-5_35-4_79_2_301:4.2
	Kernel-5_35-4_79_2_300:4.2
	Kernel-5_35-4_79_2_299:4.2
	Kernel-5_35-4_79_2_298:4.2
	Kernel-5_35-4_79_2_297:4.2
	Kernel-5_35-4_79_2_296:4.2
	Kernel-5_35-4_79_2_295:4.2
	Kernel-5_35-4_79_2_294:4.2
	Kernel-5_35-4_79_2_293:4.2
	Kernel-5_35-4_79_2_292:4.2
	Kernel-5_35-4_79_2_291:4.2
	Kernel-5_35-4_79_2_290:4.2
	Kernel-5_35-4_79_2_289:4.2
	Kernel-5_35-4_79_2_288:4.2
	Kernel-5_35-4_79_2_287:4.2
	Kernel-5_35-4_79_2_286:4.2
	Kernel-5_35-4_79_2_285:4.2
	Kernel-5_35-4_79_2_284:4.2
	Kernel-5_35-4_79_2_283:4.2
	Kernel-5_35-4_79_2_282:4.2
	Kernel-5_35-4_79_2_281:4.2
	Kernel-5_35-4_79_2_280:4.2
	Kernel-5_35-4_79_2_279:4.2
	Kernel-5_35-4_79_2_278:4.2
	Kernel-5_35-4_79_2_277:4.2
	Kernel-5_35-4_79_2_276:4.2
	Kernel-5_35-4_79_2_275:4.2
	Kernel-5_35-4_79_2_274:4.2
	Kernel-5_35-4_79_2_273:4.2
	Kernel-5_35-4_79_2_272:4.2
	Kernel-5_35-4_79_2_271:4.2
	Kernel-5_35-4_79_2_270:4.2
	Kernel-5_35-4_79_2_269:4.2
	Kernel-5_35-4_79_2_268:4.2
	Kernel-5_35-4_79_2_267:4.2
	Kernel-5_35-4_79_2_266:4.2
	Kernel-5_35-4_79_2_265:4.2
	Kernel-5_35-4_79_2_264:4.2
	Kernel-5_35-4_79_2_263:4.2
	Kernel-5_35-4_79_2_262:4.2
	Kernel-5_35-4_79_2_261:4.2
	Kernel-5_35-4_79_2_260:4.2
	Kernel-5_35-4_79_2_259:4.2
	Kernel-5_35-4_79_2_258:4.2
	Kernel-5_35-4_79_2_257:4.2
	Kernel-5_35-4_79_2_256:4.2
	Kernel-5_35-4_79_2_255:4.2
	Kernel-5_35-4_79_2_254:4.2
	Kernel-5_35-4_79_2_253:4.2
	Kernel-5_35-4_79_2_252:4.2
	Kernel-5_35-4_79_2_251:4.2
	Kernel-5_35-4_79_2_250:4.2
	Kernel-5_35-4_79_2_249:4.2
	Kernel-5_35-4_79_2_248:4.2
	Kernel-5_35-4_79_2_247:4.2
	Kernel-5_35-4_79_2_246:4.2
	Kernel-5_35-4_79_2_245:4.2
	Kernel-5_35-4_79_2_244:4.2
	Kernel-5_35-4_79_2_243:4.2
	Kernel-5_35-4_79_2_242:4.2
	Kernel-5_35-4_79_2_241:4.2
	Kernel-5_35-4_79_2_240:4.2
	Kernel-5_35-4_79_2_239:4.2
	Kernel-5_35-4_79_2_238:4.2
	Kernel-5_35-4_79_2_237:4.2
	Kernel-5_35-4_79_2_236:4.2
	Kernel-5_35-4_79_2_235:4.2
	Kernel-5_35-4_79_2_234:4.2
	Kernel-5_35-4_79_2_233:4.2
	Kernel-5_35-4_79_2_232:4.2
	Kernel-5_35-4_79_2_231:4.2
	Kernel-5_35-4_79_2_230:4.2
	Kernel-5_35-4_79_2_229:4.2
	Kernel-5_35-4_79_2_228:4.2
	Kernel-5_35-4_79_2_227:4.2
	Kernel-5_35-4_79_2_226:4.2
	Kernel-5_35-4_79_2_225:4.2
	Kernel-5_35-4_79_2_224:4.2
	Kernel-5_35-4_79_2_223:4.2
	Kernel-5_35-4_79_2_222:4.2
	Kernel-5_35-4_79_2_221:4.2
	Kernel-5_35-4_79_2_220:4.2
	Kernel-5_35-4_79_2_219:4.2
	Kernel-5_35-4_79_2_218:4.2
	Kernel-5_35-4_79_2_217:4.2
	Kernel-5_35-4_79_2_216:4.2
	Kernel-5_35-4_79_2_215:4.2
	Kernel-5_35-4_79_2_214:4.2
	Kernel-5_35-4_79_2_213:4.2
	Kernel-5_35-4_79_2_212:4.2
	Kernel-5_35-4_79_2_211:4.2
	Kernel-5_35-4_79_2_210:4.2
	Kernel-5_35-4_79_2_209:4.2
	Kernel-5_35-4_79_2_208:4.2
	Kernel-5_35-4_79_2_207:4.2
	Kernel-5_35-4_79_2_206:4.2
	Kernel-5_35-4_79_2_205:4.2
	Kernel-5_35-4_79_2_204:4.2
	Kernel-5_35-4_79_2_203:4.2
	Kernel-5_35-4_79_2_202:4.2
	Kernel-5_35-4_79_2_201:4.2
	Kernel-5_35-4_79_2_200:4.2
	Kernel-5_35-4_79_2_199:4.2
	Kernel-5_35-4_79_2_198:4.2
	Kernel-5_35-4_79_2_197:4.2
	Kernel-5_35-4_79_2_196:4.2
	Kernel-5_35-4_79_2_195:4.2
	Kernel-5_35-4_79_2_194:4.2
	Kernel-5_35-4_79_2_193:4.2
	Kernel-5_35-4_79_2_192:4.2
	Kernel-5_35-4_79_2_191:4.2
	Kernel-5_35-4_79_2_190:4.2
	Kernel-5_35-4_79_2_189:4.2
	Kernel-5_35-4_79_2_188:4.2
	Kernel-5_35-4_79_2_187:4.2
	Kernel-5_35-4_79_2_186:4.2
	Kernel-5_35-4_79_2_185:4.2
	Kernel-5_35-4_79_2_184:4.2
	Kernel-5_35-4_79_2_183:4.2
	Kernel-5_35-4_79_2_182:4.2
	Kernel-5_35-4_79_2_181:4.2
	Kernel-5_35-4_79_2_180:4.2
	Kernel-5_35-4_79_2_179:4.2
	Kernel-5_35-4_79_2_178:4.2
	Kernel-5_35-4_79_2_177:4.2
	Kernel-5_35-4_79_2_176:4.2
	Kernel-5_35-4_79_2_175:4.2
	Kernel-5_35-4_79_2_174:4.2
	Kernel-5_35-4_79_2_173:4.2
	Kernel-5_35-4_79_2_172:4.2
	Kernel-5_35-4_79_2_171:4.2
	Kernel-5_35-4_79_2_170:4.2
	Kernel-5_35-4_79_2_169:4.2
	Kernel-5_35-4_79_2_168:4.2
	Kernel-5_35-4_79_2_167:4.2
	Kernel-5_35-4_79_2_166:4.2
	Kernel-5_35-4_79_2_165:4.2
	RPi_merge:4.2
	Kernel-5_35-4_79_2_147_2_23:4.2
	Kernel-5_35-4_79_2_147_2_22:4.2
	Kernel-5_35-4_79_2_147_2_21:4.2
	Kernel-5_35-4_79_2_147_2_20:4.2
	Kernel-5_35-4_79_2_147_2_19:4.2
	Kernel-5_35-4_79_2_147_2_18:4.2
	Kernel-5_35-4_79_2_164:4.2
	Kernel-5_35-4_79_2_163:4.2
	Kernel-5_35-4_79_2_147_2_17:4.2
	Kernel-5_35-4_79_2_147_2_16:4.2
	Kernel-5_35-4_79_2_147_2_15:4.2
	Kernel-5_35-4_79_2_162:4.2
	Kernel-5_35-4_79_2_161:4.2
	Kernel-5_35-4_79_2_147_2_14:4.2
	Kernel-5_35-4_79_2_147_2_13:4.2
	Kernel-5_35-4_79_2_160:4.2
	Kernel-5_35-4_79_2_159:4.2
	Kernel-5_35-4_79_2_158:4.2
	Kernel-5_35-4_79_2_157:4.2
	Kernel-5_35-4_79_2_156:4.2
	Kernel-5_35-4_79_2_147_2_12:4.2
	Kernel-5_35-4_79_2_147_2_11:4.2
	Kernel-5_35-4_79_2_155:4.2
	Kernel-5_35-4_79_2_147_2_10:4.2
	Kernel-5_35-4_79_2_154:4.2
	Kernel-5_35-4_79_2_153:4.2
	Kernel-5_35-4_79_2_147_2_9:4.2
	Kernel-5_35-4_79_2_152:4.2
	Kernel-5_35-4_79_2_151:4.2
	Kernel-5_35-4_79_2_147_2_8:4.2
	Kernel-5_35-4_79_2_147_2_7:4.2
	Kernel-5_35-4_79_2_150:4.2
	Kernel-5_35-4_79_2_147_2_6:4.2
	Kernel-5_35-4_79_2_147_2_5:4.2
	Kernel-5_35-4_79_2_149:4.2
	Kernel-5_35-4_79_2_147_2_4:4.2
	Kernel-5_35-4_79_2_147_2_3:4.2
	Kernel-5_35-4_79_2_148:4.2
	Kernel-5_35-4_79_2_147_2_2:4.2
	Kernel-5_35-4_79_2_147_2_1:4.2
	RPi:4.2.0.10
	RPi_bp:4.2
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2
	alees_Kernel_dev:4.2.0.8
	alees_Kernel_dev_bp:4.2
	Kernel-5_35-4_79_2_147:4.2
	Kernel-5_35-4_79_2_146:4.2
	Kernel-5_35-4_79_2_145:4.2
	Kernel-5_35-4_79_2_144:4.2
	Kernel-5_35-4_79_2_143:4.2
	Kernel-5_35-4_79_2_142:4.2
	Kernel-5_35-4_79_2_141:4.2
	Kernel-5_35-4_79_2_140:4.2
	Kernel-5_35-4_79_2_139:4.2
	Kernel-5_35-4_79_2_138:4.2
	Kernel-5_35-4_79_2_137:4.2
	Kernel-5_35-4_79_2_136:4.2
	Kernel-5_35-4_79_2_135:4.2
	Kernel-5_35-4_79_2_134:4.2
	Kernel-5_35-4_79_2_133:4.2
	Kernel-5_35-4_79_2_132:4.2
	Kernel-5_35-4_79_2_131:4.2
	Kernel-5_35-4_79_2_130:4.2
	Kernel-5_35-4_79_2_129:4.2
	Kernel-5_35-4_79_2_128:4.2
	Kernel-5_35-4_79_2_127:4.2
	Kernel-5_35-4_79_2_126:4.2
	Kernel-5_35-4_79_2_125:4.2
	Kernel-5_35-4_79_2_124:4.2
	Kernel-5_35-4_79_2_123:4.2
	Cortex_merge:4.2
	Kernel-5_35-4_79_2_122:4.2
	Kernel-5_35-4_79_2_98_2_54:4.2
	Kernel-5_35-4_79_2_98_2_53:4.2
	Kernel-5_35-4_79_2_98_2_52:4.2
	Kernel-5_35-4_79_2_98_2_51:4.2
	Kernel-5_35-4_79_2_98_2_50:4.2
	Kernel-5_35-4_79_2_98_2_49:4.2
	Kernel-5_35-4_79_2_98_2_48:4.2
	Kernel-5_35-4_79_2_121:4.2
	Kernel-5_35-4_79_2_98_2_47:4.2
	Kernel-5_35-4_79_2_120:4.2
	Kernel-5_35-4_79_2_98_2_46:4.2
	Kernel-5_35-4_79_2_119:4.2
	Kernel-5_35-4_79_2_98_2_45:4.2
	Kernel-5_35-4_79_2_98_2_44:4.2
	Kernel-5_35-4_79_2_118:4.2
	Kernel-5_35-4_79_2_98_2_43:4.2
	Kernel-5_35-4_79_2_117:4.2
	Kernel-5_35-4_79_2_116:4.2
	Kernel-5_35-4_79_2_98_2_42:4.2
	Kernel-5_35-4_79_2_115:4.2
	Kernel-5_35-4_79_2_98_2_41:4.2
	Kernel-5_35-4_79_2_98_2_40:4.2
	Kernel-5_35-4_79_2_114:4.2
	Kernel-5_35-4_79_2_98_2_39:4.2
	Kernel-5_35-4_79_2_98_2_38:4.2
	Kernel-5_35-4_79_2_113:4.2
	Kernel-5_35-4_79_2_112:4.2
	Kernel-5_35-4_79_2_98_2_37:4.2
	Kernel-5_35-4_79_2_98_2_36:4.2
	Kernel-5_35-4_79_2_98_2_35:4.2
	Kernel-5_35-4_79_2_98_2_34:4.2
	Kernel-5_35-4_79_2_98_2_33:4.2
	Kernel-5_35-4_79_2_98_2_32:4.2
	Kernel-5_35-4_79_2_98_2_31:4.2
	Kernel-5_35-4_79_2_98_2_30:4.2
	Kernel-5_35-4_79_2_98_2_29:4.2
	Kernel-5_35-4_79_2_98_2_28:4.2
	Kernel-5_35-4_79_2_98_2_27:4.2
	Kernel-5_35-4_79_2_98_2_26:4.2
	Kernel-5_35-4_79_2_111:4.2
	Kernel-5_35-4_79_2_98_2_25:4.2
	Kernel-5_35-4_79_2_98_2_24:4.2
	Kernel-5_35-4_79_2_98_2_23:4.2
	Kernel-5_35-4_79_2_110:4.2
	Kernel-5_35-4_79_2_98_2_22:4.2
	Kernel-5_35-4_79_2_109:4.2
	Kernel-5_35-4_79_2_98_2_21:4.2
	Kernel-5_35-4_79_2_98_2_20:4.2
	Kernel-5_35-4_79_2_108:4.2
	Kernel-5_35-4_79_2_107:4.2
	Kernel-5_35-4_79_2_98_2_19:4.2
	Kernel-5_35-4_79_2_98_2_18:4.2
	Kernel-5_35-4_79_2_98_2_17:4.2
	Kernel-5_35-4_79_2_98_2_16:4.2
	Kernel-5_35-4_79_2_98_2_15:4.2
	Kernel-5_35-4_79_2_106:4.2
	Kernel-5_35-4_79_2_105:4.2
	Kernel-5_35-4_79_2_104:4.2
	Kernel-5_35-4_79_2_98_2_14:4.2
	Kernel-5_35-4_79_2_98_2_13:4.2
	Kernel-5_35-4_79_2_98_2_12:4.2
	Kernel-5_35-4_79_2_98_2_11:4.2
	Kernel-5_35-4_79_2_98_2_10:4.2
	Kernel-5_35-4_79_2_98_2_9:4.2
	Kernel-5_35-4_79_2_103:4.2
	Kernel-5_35-4_79_2_102:4.2
	Kernel-5_35-4_79_2_98_2_8:4.2
	Kernel-5_35-4_79_2_98_2_7:4.2
	Kernel-5_35-4_79_2_98_2_6:4.2
	Kernel-5_35-4_79_2_98_2_5:4.2
	Kernel-5_35-4_79_2_98_2_4:4.2
	Kernel-5_35-4_79_2_101:4.2
	Kernel-5_35-4_79_2_100:4.2
	Kernel-5_35-4_79_2_99:4.2
	Kernel-5_35-4_79_2_98_2_3:4.2
	Kernel-5_35-4_79_2_98_2_2:4.2
	Kernel-5_35-4_79_2_98_2_1:4.2
	Cortex:4.2.0.4
	Cortex_bp:4.2
	Kernel-5_35-4_79_2_98:4.2
	Kernel-5_35-4_79_2_97:4.2
	Kernel-5_35-4_79_2_96:4.2
	Kernel-5_35-4_79_2_95:4.2
	Kernel-5_35-4_79_2_94:4.2
	Kernel-5_35-4_79_2_93:4.2
	Kernel-5_35-4_79_2_92:4.2
	Kernel-5_35-4_79_2_91:4.2
	Kernel-5_35-4_79_2_90:4.2
	Kernel-5_35-4_79_2_89:4.2
	Kernel-5_35-4_79_2_88:4.2
	Kernel-5_35-4_79_2_87:4.2
	Kernel-5_35-4_79_2_86:4.2
	Kernel-5_35-4_79_2_85:4.2
	Kernel-5_35-4_79_2_84:4.2
	Kernel-5_35-4_79_2_83:4.2
	Kernel-5_35-4_79_2_82:4.2
	Kernel-5_35-4_79_2_81:4.2
	Kernel-5_35-4_79_2_80:4.2
	Kernel-5_35-4_79_2_79:4.2
	Kernel-5_35-4_79_2_78:4.2
	Kernel-5_35-4_79_2_77:4.2
	RO_5_07:4.2
	Kernel-5_35-4_79_2_76:4.2
	Kernel-5_35-4_79_2_75:4.2
	Kernel-5_35-4_79_2_74:4.2
	Kernel-5_35-4_79_2_73:4.2
	Kernel-5_35-4_79_2_72:4.2
	Kernel-5_35-4_79_2_71:4.2
	Kernel-5_35-4_79_2_70:4.2
	Kernel-5_35-4_79_2_69:4.2
	Kernel-5_35-4_79_2_68:4.2
	Kernel-5_35-4_79_2_67:4.2
	Kernel-5_35-4_79_2_66:4.2
	Kernel-5_35-4_79_2_65:4.2
	Kernel-5_35-4_79_2_64:4.2
	Kernel-5_35-4_79_2_63:4.2
	Kernel-5_35-4_79_2_62:4.2
	Kernel-5_35-4_79_2_61:4.2
	Kernel-5_35-4_79_2_59:4.2
	Kernel-5_35-4_79_2_58:4.2
	Kernel-5_35-4_79_2_57:4.2
	Kernel-5_35-4_79_2_56:4.2
	Kernel-5_35-4_79_2_55:4.2
	Kernel-5_35-4_79_2_54:4.2
	Kernel-5_35-4_79_2_53:4.2
	Kernel-5_35-4_79_2_52:4.2
	Kernel-5_35-4_79_2_51:4.2
	Kernel-5_35-4_79_2_50:4.2
	Kernel-5_35-4_79_2_49:4.2
	Kernel-5_35-4_79_2_48:4.2
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.6
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2
	Kernel-5_35-4_79_2_46:4.2
	Kernel-5_35-4_79_2_45:4.2
	Kernel-5_35-4_79_2_44:4.2
	Kernel-5_35-4_79_2_25_2_2:4.2
	Kernel-5_35-4_79_2_43:4.2
	Kernel-5_35-4_79_2_42:4.2
	Kernel-5_35-4_79_2_41:4.2
	Kernel-5_35-4_79_2_40:4.2
	Kernel-5_35-4_79_2_39:4.2
	Kernel-5_35-4_79_2_38:4.2
	Kernel-5_35-4_79_2_37:4.2
	Kernel-5_35-4_79_2_36:4.2
	Kernel-5_35-4_79_2_35:4.2
	Kernel-5_35-4_79_2_34:4.2
	Kernel-5_35-4_79_2_33:4.2
	Kernel-5_35-4_79_2_32:4.2
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2
	Kernel-5_35-4_79_2_30:4.2
	Kernel-5_35-4_79_2_29:4.2
	Kernel-5_35-4_79_2_28:4.2
	Kernel-5_35-4_79_2_27:4.2
	Kernel-5_35-4_79_2_26:4.2
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2
	Kernel-5_35-4_79_2_24:4.2
	Kernel-5_35-4_79_2_23:4.2
	Kernel-5_35-4_79_2_22:4.2
	Kernel-5_35-4_79_2_21:4.2
	Kernel-5_35-4_79_2_20:4.2
	Kernel-5_35-4_79_2_19:4.2
	Kernel-5_35-4_79_2_18:4.2
	Kernel-5_35-4_79_2_17:4.2
	Kernel-5_35-4_79_2_16:4.2
	Kernel-5_35-4_79_2_15:4.2
	Kernel-5_35-4_79_2_14:4.2
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.8
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2
	Kernel-5_35-4_79_2_12:4.2
	Kernel-5_35-4_79_2_11:4.2
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2
	Kernel-5_35-4_79_2_9:4.2
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2
	Kernel-5_35-4_79_2_7:4.2
	Kernel-5_35-4_79_2_6:4.2
	Kernel-5_35-4_79_2_5:4.2
	Kernel-5_35-4_79_2_4:4.2
	Kernel-5_35-4_79_2_3:4.2
	Kernel-5_35-4_79_2_2:4.2
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.4.2
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.4.2
	Ursula_RiscPC_bp:4.1.4.2
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.2
	Ursula_RiscPC:4.1.4.2.0.2
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1.4.2
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.2
	UrsulaBuild_FinalSoftload:4.1.4.2
	rthornb_UrsulaBuild-12Aug1998:4.1.4.2
	aglover_UrsulaBuild-05Aug1998:4.1.4.2
	rthornb_UrsulaBuild-29Jul1998:4.1.4.2
	rthornb_UrsulaBuild-22Jul1998:4.1.4.2
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.2
	rthornb_UrsulaBuild-07Jul1998:4.1.4.2
	rthornb_UrsulaBuild-17Jun1998:4.1.4.2
	rthornb_UrsulaBuild-03Jun1998:4.1.4.2
	rthornb_UrsulaBuild-27May1998:4.1.4.2
	mstphens_Kernel-3_80:4.1.4.2
	rthornb_UrsulaBuild-21May1998:4.1.4.2
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.4.2
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2016.06.30.20.28.55;	author jlee;	state dead;
branches;
next	4.2;
commitid	lMnWzoE9eJz3Wwcz;

4.2
date	2000.04.04.14.27.30;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.19;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.41.19;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.00.15;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.09.09.13.33.11;	author mstphens;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	97.12.08.14.34.26;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.11.03;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.03.34;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > KbdResA1

; This file contains all the old-style keyboard control stuff that the kernel does on reset
; The only two hooks in this file used externally are IRQ_Test_CTRL_or_R_Pressed
; and SetUpKbd.

                   GBLL   KeyboardDebungling
KeyboardDebungling SETL   {FALSE}

; reset code needs to know where CTRL, SHIFT and R are in the kbd matrix
; these are codes given by the keyboard

     [ Keyboard_Type = "A1A500"
A1CtrlLeft      * &3B
A1CtrlRight     * &61
A1ShiftLeft     * &4C
A1ShiftRight    * &58
A1CTRLLCol   *  K1kdda + (A1CtrlLeft :AND: 15)
A1CTRLLRow   *  K1kdda + (A1CtrlLeft :SHR: 4)
A1CTRLRCol   *  K1kdda + (A1CtrlRight :AND: 15)
A1CTRLRRow   *  K1kdda + (A1CtrlRight :SHR: 4)
A1SHIFTLCol  *  K1kdda + (A1ShiftLeft :AND: 15)
A1SHIFTLRow  *  K1kdda + (A1ShiftLeft :SHR: 4)
A1SHIFTRCol  *  K1kdda + (A1ShiftRight :AND: 15)
A1SHIFTRRow  *  K1kdda + (A1ShiftRight :SHR: 4)
A1R_Col      *  K1kdda +  10
A1R_Row      *  K1kdda +  2
A1T_Col      *  K1kdda +  11
A1T_Row      *  K1kdda +  2
A1Del_Col    *  K1kdda +  4
A1Del_Row    *  K1kdda +  3
A1Copy_Col   *  K1kdda +  5
A1Copy_Row   *  K1kdda +  3
     ]

     [ Keyboard_Type = "A1A500"
; old (A500) keyboard positions

A500CTRLRow    *   KEYDOWN + &C
A500CTRLCol    *   KEYDOWN +  0
A500SHIFTRow   *   KEYDOWN + &A
A500SHIFTCol   *   KEYDOWN +  0
A500R_Row      *   KEYDOWN +  2
A500R_Col      *   KEYDOWN +  7
A500T_Row      *   KEYDOWN +  2
A500T_Col      *   KEYDOWN +  6
A500Del_Row    *   KEYDOWN +  5
A500Del_Col    *   KEYDOWN +  7
A500Copy_Row   *   KEYDOWN +  0
A500Copy_Col   *   KEYDOWN +  8
    ]

; On ARM600, this routine must work in IRQ32 mode

IRQ_Test_CTRL_or_R_Pressed ROUT
        Push    "r0-r2, R10-R12, lr"

        MOV     R12, #IOC

        MOV     r2, #IOC
        MOV     r0, #32
        BL      DoMicroDelay    ; quick thumb twiddle until it's REALLY there
        LDRB    R11, KARTRx     ; read byte transmitted by keyboard

     [ KeyboardDebungling
   Push  R12
   MOV   R12, R11, LSR #4
   TubeChar  R10, R11, "MOV R11, #""R"""
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   AND   R12, R11, #&F
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   Pull  R12
     ]

        CMP     R11, #HRDRESET  ; first check for part of reset sequence and reply accordingly

        BEQ     fartaboutfornewkbd

        CMP     R11, #RST1ACK
        MOVEQ   R10, #RST2ACK
        BEQ     send_ack_byte

        CMP     R11, #RST2ACK
        BNE     keytransmission

        MOV     R10, #InitKbdWs
        LDR     R10, [R10, #KeyDataPtr]
        CMP     R10, #0
        MOVNE   R10, #ACK+SCAN
        BNE     send_ack_byte
        MOV     R10, #ACK

  [ KeyboardDebungling
   Push  R12
   MOV   R12, R10, LSR #4
   TubeChar  R10, R11, "MOV R11, #""k"""
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   AND   R12, R10, #&F
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   Pull  R12
 ]

        STRB    R10, KARTTx
        BL      PollTxBit
        MOV     R11, #K1rqid
        BL      SendAndPollRxBit

  [ Keyboard_Type = "A1A500"
        AND     r10, r11, #&F0
        CMP     R11, #IDTYPE            ; a500 kbd?
        ADREQ   R10, DataA500Kbd
        BEQ     gotkbdid
  ]
        SUB     r11, r11, #K1kbid + 1
        CMP     r11, #30
        ADRLSL  R10, DataA1Kbd          ; only accept ID 1-31
        MOVHI   R10, #0                 ; else don't know

gotkbdid
        MOV     R11, #InitKbdWs
        STR     R10, [R11, #KeyDataPtr]
 [ Keyboard_Type = "A1A500"
 ASSERT (DataA1Kbd :AND: 255) <> 0
 ]
 [ Keyboard_Type = "A1A500"
 ASSERT (DataA500Kbd :AND: 255) <> 0
 ]
        STRB    R10, [R11, #KB_There_Flag]
                                        ; only there once ID understood
        MOV     R10, #HRDRESET          ; and from the top
        B       send_ack_byte

keytransmission
; assume it's key info
        MOV     R10, #InitKbdWs
        LDRB    R10, [R10]      ; the "had a byte" flag
        CMP     R10, #0
        BNE     hadabyteofkey
        MOV     R10, #InitKbdWs
        STRB    R11, [R10]      ; first part of 2 byte protocol: set flag
        MOV     R10, #ACK+&F
        B       send_ack_byte

fartaboutfornewkbd

kickitagain
        MOV     R11, #HRDRESET
        BL      SendAndPollRxBit        ; get a byte to R11
        BL      PollTxBit
        CMP     R11, #HRDRESET
        BNE     kickitagain
        MOV     R11, #RST1ACK
        BL      SendAndPollRxBit        ; get a byte to R11
        BL      PollTxBit
        CMP     R11, #RST1ACK
        BNE     kickitagain
        MOV     R10, #RST2ACK
        B       send_ack_byte

hadabyteofkey
; now got 1st byte in R10, second byte in R11 : test for CTRL or R
        MOV     R0, #InitKbdWs
        LDR     R0, [R0, #KeyDataPtr]
10      LDRB    R1, [R0], #1
        CMP     R1, #0
        BEQ     %FT11
        CMP     R1, R10
        LDRB    R1, [R0], #1
        CMPEQ   R1, R11
        LDRB    R1, [R0], #1
        BNE     %BT10
        MOV     R11, #InitKbdWs
        STRB    R1, [R11, R1]           ; non-zero means pressed
11
        MOV     R10, #ACK+SCAN
send_ack_byte

     [ KeyboardDebungling
   Push  R12
   MOV   R12, R10, LSR #4
   TubeChar  R10, R11, "MOV R11, #""T"""
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   AND   R12, R10, #&F
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   Pull  R12
     ]

        STRB    R10, KARTTx             ; assume always able to transmit?
        CMP     R10, #ACK+&F
        MOVNE   R11, #InitKbdWs
        STRNEB  R11, [R11]            ; clear "one byte of 2 byte seq had" flag

        Pull    "r0-r2, R10-R12, lr"
        SUBS    PC, R14, #4

 DCD 0 ; temp fudge

 [ Keyboard_Type = "A1A500"
  [ . :AND: 255 = 0
 DCB "S" ; Odd length, should throw us
  ]
DataA1Kbd
    =   A1CTRLLRow,  A1CTRLLCol,  CTRL_Down_Flag
    =   A1CTRLRRow,  A1CTRLRCol,  CTRL_Down_Flag
    =   A1SHIFTRRow, A1SHIFTRCol, SHIFT_Down_Flag
    =   A1SHIFTLRow, A1SHIFTLCol, SHIFT_Down_Flag
    =   A1R_Row,     A1R_Col,     R_Down_Flag
    =   A1T_Row,     A1T_Col,     T_Down_Flag
    =   A1Del_Row,   A1Del_Col,   Del_Down_Flag
    =   A1Copy_Row,  A1Copy_Col,  Copy_Down_Flag
    =   0
 ]

 [ Keyboard_Type = "A1A500"
  [ . :AND: 255 = 0
 DCB "K"
  ]
DataA500Kbd
    =   A500CTRLRow,  A500CTRLCol,  CTRL_Down_Flag
    =   A500SHIFTRow, A500SHIFTCol, SHIFT_Down_Flag
    =   A500R_Row,    A500R_Col,    R_Down_Flag
    =   A500T_Row,    A500T_Col,    T_Down_Flag
    =   A500Del_Row,  A500Del_Col,  Del_Down_Flag
    =   A500Copy_Row, A500Copy_Col, Copy_Down_Flag
    =   0
 ]

    ALIGN

        LTORG

PollTxBit ROUT

01      LDRB    R10, [R12, #IOCIRQSTAB]
        TST     R10, #KARTTxBit
        BEQ     %BT01
        MOV     pc, lr


SendAndPollRxBit ROUT

        Push    lr

     [ KeyboardDebungling
   Push  R12
   MOV   R12, R11, LSR #4
   TubeChar  R10, R11, "MOV R11, #""t"""
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   AND   R12, R11, #&F
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   Pull  R12
     ]

        STRB    R11, KARTTx

01      LDRB    R10, [R12, #IOCIRQSTAB]
        TST     R10, #KARTRxBit
        BEQ     %BT01

        MOV    r2, #IOC
        MOV    r0, #32
        BL     DoMicroDelay
        LDRB   R11, KARTRx              ; purge KART, or get reply

     [ KeyboardDebungling
   Push  R12
   MOV   R12, R11, LSR #4
   TubeChar  R10, R11, "MOV R11, #""r"""
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   AND   R12, R11, #&F
   TubeChar  R10, R11, "ADD R11, R12, #""0"""
   Pull  R12
     ]

        Pull   pc

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SetUpKbd
; set up keyboard: initialise baud rate, send dummy, read dummy
        MOV     R12, #IOC               ; code ripped off from pmf.Key
        MOV     R0, #1
        STRB    R0, Timer3Low
        MOV     R0, #0
        STRB    R0, Timer3High
        STRB    R0, Timer3Go            ; baud rate set and going

        STRB    R0, KARTTx              ; send dummy

        MOV     r1, r13
        MOV     r13, #&8000             ; need a quick stack - scratchspace
        Push    r1                      ; probably the best bet.

        MOV     r0, #&800*2             ; magic delay
        MOV     r2, #IOC
        BL      DoMicroDelay

        LDMFD   r13, {r13}              ; finished with stack

        LDRB    R0, KARTRx              ; ensure no wally byte in KARTRx

        BL      PollTxBit
        MOV     R0, #HRDRESET           ; start reset protocol
        STRB    R0, KARTTx

        B       SetUpKbdReturn

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

KeyboardDebungling SETL {FALSE}

        END
@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@@


4.1
log
@Initial revision
@
text
@a69 4
 [ CPU_Type = "ARM600"
        BIC     pc, pc, #&FC000000      ; take us out of the shadow ROM area
        NOP                             ; (this instruction skipped)
 ]
d211 1
a211 1
 
@


4.1.4.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d70 1
a70 1

d73 1
a73 1

@


4.1.4.2
log
@Various speed ups
Memory map changes:
remove shadow ROM
move UNDEF stack, SoftCAM and MMU tables above 64M
expand RMA limit to 15M from 11M
expand SysHeap limit to 3M-32k from 2M-8k
expand SVC stack to 32k from 8k
partially protect kernel workspace from user access
protect SVC stack from user access
@
text
@d71 3
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
