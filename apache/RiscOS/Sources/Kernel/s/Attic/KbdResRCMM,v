head	4.6;
access;
symbols
	HAL_merge:4.4.2.1
	Kernel-5_48:4.5
	Kernel-5_35-4_79_2_327:4.4.2.1
	Kernel-5_35-4_79_2_326:4.4.2.1
	Kernel-5_35-4_79_2_325:4.4.2.1
	Kernel-5_35-4_79_2_324:4.4.2.1
	Kernel-5_35-4_79_2_323:4.4.2.1
	Kernel-5_35-4_79_2_322:4.4.2.1
	Kernel-5_35-4_79_2_321:4.4.2.1
	Kernel-5_35-4_79_2_320:4.4.2.1
	Kernel-5_35-4_79_2_319:4.4.2.1
	Kernel-5_35-4_79_2_318:4.4.2.1
	Kernel-5_35-4_79_2_317:4.4.2.1
	Kernel-5_35-4_79_2_316:4.4.2.1
	Kernel-5_35-4_79_2_315:4.4.2.1
	Kernel-5_35-4_79_2_314:4.4.2.1
	Kernel-5_35-4_79_2_313:4.4.2.1
	Kernel-5_35-4_79_2_312:4.4.2.1
	Kernel-5_35-4_79_2_311:4.4.2.1
	Kernel-5_35-4_79_2_310:4.4.2.1
	Kernel-5_35-4_79_2_309:4.4.2.1
	Kernel-5_35-4_79_2_308:4.4.2.1
	Kernel-5_35-4_79_2_307:4.4.2.1
	Kernel-5_35-4_79_2_306:4.4.2.1
	Kernel-5_35-4_79_2_305:4.4.2.1
	Kernel-5_35-4_79_2_304:4.4.2.1
	Kernel-5_35-4_79_2_303:4.4.2.1
	Kernel-5_35-4_79_2_302:4.4.2.1
	Kernel-5_35-4_79_2_301:4.4.2.1
	Kernel-5_35-4_79_2_300:4.4.2.1
	Kernel-5_35-4_79_2_299:4.4.2.1
	Kernel-5_35-4_79_2_298:4.4.2.1
	Kernel-5_35-4_79_2_297:4.4.2.1
	Kernel-5_35-4_79_2_296:4.4.2.1
	Kernel-5_35-4_79_2_295:4.4.2.1
	Kernel-5_35-4_79_2_294:4.4.2.1
	Kernel-5_35-4_79_2_293:4.4.2.1
	Kernel-5_35-4_79_2_292:4.4.2.1
	Kernel-5_35-4_79_2_291:4.4.2.1
	Kernel-5_35-4_79_2_290:4.4.2.1
	Kernel-5_35-4_79_2_289:4.4.2.1
	Kernel-5_35-4_79_2_288:4.4.2.1
	Kernel-5_35-4_79_2_287:4.4.2.1
	Kernel-5_35-4_79_2_286:4.4.2.1
	Kernel-5_35-4_79_2_285:4.4.2.1
	Kernel-5_35-4_79_2_284:4.4.2.1
	Kernel-5_35-4_79_2_283:4.4.2.1
	Kernel-5_35-4_79_2_282:4.4.2.1
	Kernel-5_35-4_79_2_281:4.4.2.1
	Kernel-5_35-4_79_2_280:4.4.2.1
	Kernel-5_35-4_79_2_279:4.4.2.1
	Kernel-5_35-4_79_2_278:4.4.2.1
	Kernel-5_35-4_79_2_277:4.4.2.1
	Kernel-5_35-4_79_2_276:4.4.2.1
	Kernel-5_35-4_79_2_275:4.4.2.1
	Kernel-5_35-4_79_2_274:4.4.2.1
	Kernel-5_35-4_79_2_273:4.4.2.1
	Kernel-5_35-4_79_2_272:4.4.2.1
	Kernel-5_35-4_79_2_271:4.4.2.1
	Kernel-5_35-4_79_2_270:4.4.2.1
	Kernel-5_35-4_79_2_269:4.4.2.1
	Kernel-5_35-4_79_2_268:4.4.2.1
	Kernel-5_35-4_79_2_267:4.4.2.1
	Kernel-5_35-4_79_2_266:4.4.2.1
	Kernel-5_35-4_79_2_265:4.4.2.1
	Kernel-5_35-4_79_2_264:4.4.2.1
	Kernel-5_35-4_79_2_263:4.4.2.1
	Kernel-5_35-4_79_2_262:4.4.2.1
	Kernel-5_35-4_79_2_261:4.4.2.1
	Kernel-5_35-4_79_2_260:4.4.2.1
	Kernel-5_35-4_79_2_259:4.4.2.1
	Kernel-5_35-4_79_2_258:4.4.2.1
	Kernel-5_35-4_79_2_257:4.4.2.1
	Kernel-5_35-4_79_2_256:4.4.2.1
	Kernel-5_35-4_79_2_255:4.4.2.1
	Kernel-5_35-4_79_2_254:4.4.2.1
	Kernel-5_35-4_79_2_253:4.4.2.1
	Kernel-5_35-4_79_2_252:4.4.2.1
	Kernel-5_35-4_79_2_251:4.4.2.1
	Kernel-5_35-4_79_2_250:4.4.2.1
	Kernel-5_35-4_79_2_249:4.4.2.1
	Kernel-5_35-4_79_2_248:4.4.2.1
	Kernel-5_35-4_79_2_247:4.4.2.1
	Kernel-5_35-4_79_2_246:4.4.2.1
	Kernel-5_35-4_79_2_245:4.4.2.1
	Kernel-5_35-4_79_2_244:4.4.2.1
	Kernel-5_35-4_79_2_243:4.4.2.1
	Kernel-5_35-4_79_2_242:4.4.2.1
	Kernel-5_35-4_79_2_241:4.4.2.1
	Kernel-5_35-4_79_2_240:4.4.2.1
	Kernel-5_35-4_79_2_239:4.4.2.1
	Kernel-5_35-4_79_2_238:4.4.2.1
	Kernel-5_35-4_79_2_237:4.4.2.1
	Kernel-5_35-4_79_2_236:4.4.2.1
	Kernel-5_35-4_79_2_235:4.4.2.1
	Kernel-5_35-4_79_2_234:4.4.2.1
	Kernel-5_35-4_79_2_233:4.4.2.1
	Kernel-5_35-4_79_2_232:4.4.2.1
	Kernel-5_35-4_79_2_231:4.4.2.1
	Kernel-5_35-4_79_2_230:4.4.2.1
	Kernel-5_35-4_79_2_229:4.4.2.1
	Kernel-5_35-4_79_2_228:4.4.2.1
	Kernel-5_35-4_79_2_227:4.4.2.1
	Kernel-5_35-4_79_2_226:4.4.2.1
	Kernel-5_35-4_79_2_225:4.4.2.1
	Kernel-5_35-4_79_2_224:4.4.2.1
	Kernel-5_35-4_79_2_223:4.4.2.1
	Kernel-5_35-4_79_2_222:4.4.2.1
	Kernel-5_35-4_79_2_221:4.4.2.1
	Kernel-5_35-4_79_2_220:4.4.2.1
	Kernel-5_35-4_79_2_219:4.4.2.1
	Kernel-5_35-4_79_2_218:4.4.2.1
	Kernel-5_35-4_79_2_217:4.4.2.1
	Kernel-5_35-4_79_2_216:4.4.2.1
	Kernel-5_35-4_79_2_215:4.4.2.1
	Kernel-5_35-4_79_2_214:4.4.2.1
	Kernel-5_35-4_79_2_213:4.4.2.1
	Kernel-5_35-4_79_2_212:4.4.2.1
	Kernel-5_35-4_79_2_211:4.4.2.1
	Kernel-5_35-4_79_2_210:4.4.2.1
	Kernel-5_35-4_79_2_209:4.4.2.1
	Kernel-5_35-4_79_2_208:4.4.2.1
	Kernel-5_35-4_79_2_207:4.4.2.1
	Kernel-5_35-4_79_2_206:4.4.2.1
	Kernel-5_35-4_79_2_205:4.4.2.1
	Kernel-5_35-4_79_2_204:4.4.2.1
	Kernel-5_35-4_79_2_203:4.4.2.1
	Kernel-5_35-4_79_2_202:4.4.2.1
	Kernel-5_35-4_79_2_201:4.4.2.1
	Kernel-5_35-4_79_2_200:4.4.2.1
	Kernel-5_35-4_79_2_199:4.4.2.1
	Kernel-5_35-4_79_2_198:4.4.2.1
	Kernel-5_35-4_79_2_197:4.4.2.1
	Kernel-5_35-4_79_2_196:4.4.2.1
	Kernel-5_35-4_79_2_195:4.4.2.1
	Kernel-5_35-4_79_2_194:4.4.2.1
	Kernel-5_35-4_79_2_193:4.4.2.1
	Kernel-5_35-4_79_2_192:4.4.2.1
	Kernel-5_35-4_79_2_191:4.4.2.1
	Kernel-5_35-4_79_2_190:4.4.2.1
	Kernel-5_35-4_79_2_189:4.4.2.1
	Kernel-5_35-4_79_2_188:4.4.2.1
	Kernel-5_35-4_79_2_187:4.4.2.1
	Kernel-5_35-4_79_2_186:4.4.2.1
	Kernel-5_35-4_79_2_185:4.4.2.1
	Kernel-5_35-4_79_2_184:4.4.2.1
	Kernel-5_35-4_79_2_183:4.4.2.1
	Kernel-5_35-4_79_2_182:4.4.2.1
	Kernel-5_35-4_79_2_181:4.4.2.1
	Kernel-5_35-4_79_2_180:4.4.2.1
	Kernel-5_35-4_79_2_179:4.4.2.1
	Kernel-5_35-4_79_2_178:4.4.2.1
	Kernel-5_35-4_79_2_177:4.4.2.1
	Kernel-5_35-4_79_2_176:4.4.2.1
	Kernel-5_35-4_79_2_175:4.4.2.1
	Kernel-5_35-4_79_2_174:4.4.2.1
	Kernel-5_35-4_79_2_173:4.4.2.1
	Kernel-5_35-4_79_2_172:4.4.2.1
	Kernel-5_35-4_79_2_171:4.4.2.1
	Kernel-5_35-4_79_2_170:4.4.2.1
	Kernel-5_35-4_79_2_169:4.4.2.1
	Kernel-5_35-4_79_2_168:4.4.2.1
	Kernel-5_35-4_79_2_167:4.4.2.1
	Kernel-5_35-4_79_2_166:4.4.2.1
	Kernel-5_35-4_79_2_165:4.4.2.1
	RPi_merge:4.4.2.1
	Kernel-5_35-4_79_2_147_2_23:4.4.2.1
	Kernel-5_35-4_79_2_147_2_22:4.4.2.1
	Kernel-5_35-4_79_2_147_2_21:4.4.2.1
	Kernel-5_35-4_79_2_147_2_20:4.4.2.1
	Kernel-5_35-4_79_2_147_2_19:4.4.2.1
	Kernel-5_35-4_79_2_147_2_18:4.4.2.1
	Kernel-5_35-4_79_2_164:4.4.2.1
	Kernel-5_35-4_79_2_163:4.4.2.1
	Kernel-5_35-4_79_2_147_2_17:4.4.2.1
	Kernel-5_35-4_79_2_147_2_16:4.4.2.1
	Kernel-5_35-4_79_2_147_2_15:4.4.2.1
	Kernel-5_35-4_79_2_162:4.4.2.1
	Kernel-5_35-4_79_2_161:4.4.2.1
	Kernel-5_35-4_79_2_147_2_14:4.4.2.1
	Kernel-5_35-4_79_2_147_2_13:4.4.2.1
	Kernel-5_35-4_79_2_160:4.4.2.1
	Kernel-5_35-4_79_2_159:4.4.2.1
	Kernel-5_35-4_79_2_158:4.4.2.1
	Kernel-5_35-4_79_2_157:4.4.2.1
	Kernel-5_35-4_79_2_156:4.4.2.1
	Kernel-5_35-4_79_2_147_2_12:4.4.2.1
	Kernel-5_35-4_79_2_147_2_11:4.4.2.1
	Kernel-5_35-4_79_2_155:4.4.2.1
	Kernel-5_35-4_79_2_147_2_10:4.4.2.1
	Kernel-5_35-4_79_2_154:4.4.2.1
	Kernel-5_35-4_79_2_153:4.4.2.1
	Kernel-5_35-4_79_2_147_2_9:4.4.2.1
	Kernel-5_35-4_79_2_152:4.4.2.1
	Kernel-5_35-4_79_2_151:4.4.2.1
	Kernel-5_35-4_79_2_147_2_8:4.4.2.1
	Kernel-5_35-4_79_2_147_2_7:4.4.2.1
	Kernel-5_35-4_79_2_150:4.4.2.1
	Kernel-5_35-4_79_2_147_2_6:4.4.2.1
	Kernel-5_35-4_79_2_147_2_5:4.4.2.1
	Kernel-5_35-4_79_2_149:4.4.2.1
	Kernel-5_35-4_79_2_147_2_4:4.4.2.1
	Kernel-5_35-4_79_2_147_2_3:4.4.2.1
	Kernel-5_35-4_79_2_148:4.4.2.1
	Kernel-5_35-4_79_2_147_2_2:4.4.2.1
	Kernel-5_35-4_79_2_147_2_1:4.4.2.1
	RPi:4.4.2.1.0.6
	RPi_bp:4.4.2.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.4.2.1
	alees_Kernel_dev:4.4.2.1.0.4
	alees_Kernel_dev_bp:4.4.2.1
	Kernel-5_35-4_79_2_147:4.4.2.1
	Kernel-5_35-4_79_2_146:4.4.2.1
	Kernel-5_35-4_79_2_145:4.4.2.1
	Kernel-5_35-4_79_2_144:4.4.2.1
	Kernel-5_35-4_79_2_143:4.4.2.1
	Kernel-5_35-4_79_2_142:4.4.2.1
	Kernel-5_35-4_79_2_141:4.4.2.1
	Kernel-5_35-4_79_2_140:4.4.2.1
	Kernel-5_35-4_79_2_139:4.4.2.1
	Kernel-5_35-4_79_2_138:4.4.2.1
	Kernel-5_35-4_79_2_137:4.4.2.1
	Kernel-5_35-4_79_2_136:4.4.2.1
	Kernel-5_35-4_79_2_135:4.4.2.1
	Kernel-5_35-4_79_2_134:4.4.2.1
	Kernel-5_35-4_79_2_133:4.4.2.1
	Kernel-5_35-4_79_2_132:4.4.2.1
	Kernel-5_35-4_79_2_131:4.4.2.1
	Kernel-5_35-4_79_2_130:4.4.2.1
	Kernel-5_35-4_79_2_129:4.4.2.1
	Kernel-5_35-4_79_2_128:4.4.2.1
	Kernel-5_35-4_79_2_127:4.4.2.1
	Kernel-5_35-4_79_2_126:4.4.2.1
	Kernel-5_35-4_79_2_125:4.4.2.1
	Kernel-5_35-4_79_2_124:4.4.2.1
	Kernel-5_35-4_79_2_123:4.4.2.1
	Cortex_merge:4.4.2.1
	Kernel-5_35-4_79_2_122:4.4.2.1
	Kernel-5_35-4_79_2_98_2_54:4.4.2.1
	Kernel-5_35-4_79_2_98_2_53:4.4.2.1
	Kernel-5_35-4_79_2_98_2_52:4.4.2.1
	Kernel-5_35-4_79_2_98_2_51:4.4.2.1
	Kernel-5_35-4_79_2_98_2_50:4.4.2.1
	Kernel-5_35-4_79_2_98_2_49:4.4.2.1
	Kernel-5_35-4_79_2_98_2_48:4.4.2.1
	Kernel-5_35-4_79_2_121:4.4.2.1
	Kernel-5_35-4_79_2_98_2_47:4.4.2.1
	Kernel-5_35-4_79_2_120:4.4.2.1
	Kernel-5_35-4_79_2_98_2_46:4.4.2.1
	Kernel-5_35-4_79_2_119:4.4.2.1
	Kernel-5_35-4_79_2_98_2_45:4.4.2.1
	Kernel-5_35-4_79_2_98_2_44:4.4.2.1
	Kernel-5_35-4_79_2_118:4.4.2.1
	Kernel-5_35-4_79_2_98_2_43:4.4.2.1
	Kernel-5_35-4_79_2_117:4.4.2.1
	Kernel-5_35-4_79_2_116:4.4.2.1
	Kernel-5_35-4_79_2_98_2_42:4.4.2.1
	Kernel-5_35-4_79_2_115:4.4.2.1
	Kernel-5_35-4_79_2_98_2_41:4.4.2.1
	Kernel-5_35-4_79_2_98_2_40:4.4.2.1
	Kernel-5_35-4_79_2_114:4.4.2.1
	Kernel-5_35-4_79_2_98_2_39:4.4.2.1
	Kernel-5_35-4_79_2_98_2_38:4.4.2.1
	Kernel-5_35-4_79_2_113:4.4.2.1
	Kernel-5_35-4_79_2_112:4.4.2.1
	Kernel-5_35-4_79_2_98_2_37:4.4.2.1
	Kernel-5_35-4_79_2_98_2_36:4.4.2.1
	Kernel-5_35-4_79_2_98_2_35:4.4.2.1
	Kernel-5_35-4_79_2_98_2_34:4.4.2.1
	Kernel-5_35-4_79_2_98_2_33:4.4.2.1
	Kernel-5_35-4_79_2_98_2_32:4.4.2.1
	Kernel-5_35-4_79_2_98_2_31:4.4.2.1
	Kernel-5_35-4_79_2_98_2_30:4.4.2.1
	Kernel-5_35-4_79_2_98_2_29:4.4.2.1
	Kernel-5_35-4_79_2_98_2_28:4.4.2.1
	Kernel-5_35-4_79_2_98_2_27:4.4.2.1
	Kernel-5_35-4_79_2_98_2_26:4.4.2.1
	Kernel-5_35-4_79_2_111:4.4.2.1
	Kernel-5_35-4_79_2_98_2_25:4.4.2.1
	Kernel-5_35-4_79_2_98_2_24:4.4.2.1
	Kernel-5_35-4_79_2_98_2_23:4.4.2.1
	Kernel-5_35-4_79_2_110:4.4.2.1
	Kernel-5_35-4_79_2_98_2_22:4.4.2.1
	Kernel-5_35-4_79_2_109:4.4.2.1
	Kernel-5_35-4_79_2_98_2_21:4.4.2.1
	Kernel-5_35-4_79_2_98_2_20:4.4.2.1
	Kernel-5_35-4_79_2_108:4.4.2.1
	Kernel-5_35-4_79_2_107:4.4.2.1
	Kernel-5_35-4_79_2_98_2_19:4.4.2.1
	Kernel-5_35-4_79_2_98_2_18:4.4.2.1
	Kernel-5_35-4_79_2_98_2_17:4.4.2.1
	Kernel-5_35-4_79_2_98_2_16:4.4.2.1
	Kernel-5_35-4_79_2_98_2_15:4.4.2.1
	Kernel-5_35-4_79_2_106:4.4.2.1
	Kernel-5_35-4_79_2_105:4.4.2.1
	Kernel-5_35-4_79_2_104:4.4.2.1
	Kernel-5_35-4_79_2_98_2_14:4.4.2.1
	Kernel-5_35-4_79_2_98_2_13:4.4.2.1
	Kernel-5_35-4_79_2_98_2_12:4.4.2.1
	Kernel-5_35-4_79_2_98_2_11:4.4.2.1
	Kernel-5_35-4_79_2_98_2_10:4.4.2.1
	Kernel-5_35-4_79_2_98_2_9:4.4.2.1
	Kernel-5_35-4_79_2_103:4.4.2.1
	Kernel-5_35-4_79_2_102:4.4.2.1
	Kernel-5_35-4_79_2_98_2_8:4.4.2.1
	Kernel-5_35-4_79_2_98_2_7:4.4.2.1
	Kernel-5_35-4_79_2_98_2_6:4.4.2.1
	Kernel-5_35-4_79_2_98_2_5:4.4.2.1
	Kernel-5_35-4_79_2_98_2_4:4.4.2.1
	Kernel-5_35-4_79_2_101:4.4.2.1
	Kernel-5_35-4_79_2_100:4.4.2.1
	Kernel-5_35-4_79_2_99:4.4.2.1
	Kernel-5_35-4_79_2_98_2_3:4.4.2.1
	Kernel-5_35-4_79_2_98_2_2:4.4.2.1
	Kernel-5_35-4_79_2_98_2_1:4.4.2.1
	Cortex:4.4.2.1.0.2
	Cortex_bp:4.4.2.1
	Kernel-5_35-4_79_2_98:4.4.2.1
	Kernel-5_35-4_79_2_97:4.4.2.1
	Kernel-5_35-4_79_2_96:4.4.2.1
	Kernel-5_35-4_79_2_95:4.4.2.1
	Kernel-5_35-4_79_2_94:4.4.2.1
	Kernel-5_35-4_79_2_93:4.4.2.1
	Kernel-5_35-4_79_2_92:4.4.2.1
	Kernel-5_35-4_79_2_91:4.4.2.1
	Kernel-5_35-4_79_2_90:4.4.2.1
	Kernel-5_35-4_79_2_89:4.4.2.1
	Kernel-5_35-4_79_2_88:4.4.2.1
	Kernel-5_35-4_79_2_87:4.4.2.1
	Kernel-5_35-4_79_2_86:4.4.2.1
	Kernel-5_35-4_79_2_85:4.4.2.1
	Kernel-5_35-4_79_2_84:4.4.2.1
	Kernel-5_35-4_79_2_83:4.4.2.1
	Kernel-5_35-4_79_2_82:4.4.2.1
	Kernel-5_35-4_79_2_81:4.4.2.1
	Kernel-5_35-4_79_2_80:4.4.2.1
	Kernel-5_35-4_79_2_79:4.4.2.1
	Kernel-5_35-4_79_2_78:4.4.2.1
	Kernel-5_35-4_79_2_77:4.4.2.1
	RO_5_07:4.4.2.1
	Kernel-5_35-4_79_2_76:4.4.2.1
	Kernel-5_35-4_79_2_75:4.4.2.1
	Kernel-5_35-4_79_2_74:4.4.2.1
	Kernel-5_35-4_79_2_73:4.4.2.1
	Kernel-5_35-4_79_2_72:4.4.2.1
	Kernel-5_35-4_79_2_71:4.4.2.1
	Kernel-5_35-4_79_2_70:4.4.2.1
	Kernel-5_35-4_79_2_69:4.4.2.1
	Kernel-5_35-4_79_2_68:4.4.2.1
	Kernel-5_35-4_79_2_67:4.4.2.1
	Kernel-5_35-4_79_2_66:4.4.2.1
	Kernel-5_35-4_79_2_65:4.4.2.1
	Kernel-5_35-4_79_2_64:4.4.2.1
	Kernel-5_35-4_79_2_63:4.4.2.1
	Kernel-5_35-4_79_2_62:4.4.2.1
	Kernel-5_35-4_79_2_61:4.4.2.1
	Kernel-5_35-4_79_2_59:4.4.2.1
	Kernel-5_35-4_79_2_58:4.4.2.1
	Kernel-5_35-4_79_2_57:4.4.2.1
	Kernel-5_35-4_79_2_56:4.4.2.1
	Kernel-5_35-4_79_2_55:4.4.2.1
	Kernel-5_35-4_79_2_54:4.4.2.1
	Kernel-5_35-4_79_2_53:4.4.2.1
	Kernel-5_35-4_79_2_52:4.4.2.1
	Kernel-5_35-4_79_2_51:4.4.2.1
	Kernel-5_35-4_79_2_50:4.4.2.1
	Kernel-5_35-4_79_2_49:4.4.2.1
	Kernel-5_35-4_79_2_48:4.4.2.1
	Kernel-5_47:4.4
	Kernel-5_46-4_90_2_1:4.4
	nbingham_Kernel_FastNC_dev_bp:4.4
	nbingham_Kernel_FastNC_dev:4.4.0.8
	Kernel-5_46:4.4
	Kernel-5_45:4.4
	Kernel-5_35-4_79_2_47:4.4.2.1
	Kernel-5_35-4_79_2_46:4.4.2.1
	Kernel-5_35-4_79_2_45:4.4.2.1
	Kernel-5_35-4_79_2_44:4.4.2.1
	Kernel-5_35-4_79_2_25_2_2:4.4
	Kernel-5_35-4_79_2_43:4.4.2.1
	Kernel-5_35-4_79_2_42:4.4.2.1
	Kernel-5_35-4_79_2_41:4.4.2.1
	Kernel-5_35-4_79_2_40:4.4.2.1
	Kernel-5_35-4_79_2_39:4.4.2.1
	Kernel-5_35-4_79_2_38:4.4.2.1
	Kernel-5_35-4_79_2_37:4.4
	Kernel-5_35-4_79_2_36:4.4
	Kernel-5_35-4_79_2_35:4.4
	Kernel-5_35-4_79_2_34:4.4
	Kernel-5_35-4_79_2_33:4.4
	Kernel-5_35-4_79_2_32:4.4
	Kernel-5_44:4.4
	Kernel-5_35-4_79_2_25_2_1:4.4
	Kernel-5_43:4.4
	Kernel-5_35-4_79_2_31:4.4
	Kernel-5_35-4_79_2_30:4.4
	Kernel-5_35-4_79_2_29:4.4
	Kernel-5_35-4_79_2_28:4.4
	Kernel-5_35-4_79_2_27:4.4
	Kernel-5_35-4_79_2_26:4.4
	Kernel-5_42:4.4
	Kernel-5_41:4.4
	Kernel-5_40:4.4
	Kernel-5_35-4_79_2_25:4.4
	Kernel-5_35-4_79_2_24:4.4
	Kernel-5_35-4_79_2_23:4.4
	Kernel-5_35-4_79_2_22:4.4
	Kernel-5_35-4_79_2_21:4.4
	Kernel-5_35-4_79_2_20:4.4
	Kernel-5_35-4_79_2_19:4.4
	Kernel-5_35-4_79_2_18:4.4
	Kernel-5_35-4_79_2_17:4.4
	Kernel-5_35-4_79_2_16:4.4
	Kernel-5_35-4_79_2_15:4.4
	Kernel-5_35-4_79_2_14:4.4
	Kernel-5_39:4.4
	Kernel-5_13-4_52_2_1:4.4.4.1
	Bethany:4.4.0.4
	Kernel-5_38:4.4
	Kernel-5_35-4_79_2_13:4.4
	Kernel-5_35-4_79_2_12:4.4
	Kernel-5_35-4_79_2_11:4.4
	Kernel-5_37:4.4
	Kernel-5_35-4_79_2_10:4.4
	Kernel-5_35-4_79_2_9:4.4
	Kernel-5_36:4.4
	Kernel-5_35-4_79_2_8:4.4
	Kernel-5_35-4_79_2_7:4.4
	Kernel-5_35-4_79_2_6:4.4
	Kernel-5_35-4_79_2_5:4.4
	Kernel-5_35-4_79_2_4:4.4
	Kernel-5_35-4_79_2_3:4.4
	Kernel-5_35-4_79_2_2:4.4
	dellis_autobuild_BaseSW:4.4
	Kernel-5_35-4_79_2_1:4.4
	HAL:4.4.0.2
	Kernel-5_35:4.4
	Kernel-5_34:4.4
	Kernel-5_33:4.4
	Kernel-5_32:4.4
	Kernel-5_31:4.4
	Kernel-5_30:4.4
	Kernel-5_29:4.4
	Kernel-5_28:4.4
	Kernel-5_27:4.4
	Kernel-5_26:4.4
	Kernel-5_25:4.4
	Kernel-5_24:4.4
	Kernel-5_23:4.4
	Kernel-5_22:4.4
	sbrodie_sedwards_16Mar2000:4.4
	Kernel-5_21:4.4
	Kernel-5_20:4.4
	Kernel-5_19:4.4
	Kernel-5_18:4.4
	Kernel-5_17:4.4
	Kernel-5_16:4.4
	Kernel-5_15:4.4
	Kernel-5_14:4.4
	Kernel-5_13:4.4
	Kernel-5_12:4.4
	Kernel-5_11:4.4
	Kernel-5_10:4.4
	Kernel-5_09:4.4
	Kernel-5_08:4.4
	Kernel-5_07:4.4
	dcotton_autobuild_BaseSW:4.4
	Kernel-5_06:4.4
	Kernel-5_05:4.4
	Kernel-5_04:4.4
	Kernel-5_03:4.4
	Kernel-5_02:4.3
	Kernel-5_01:4.3
	Kernel-5_00:4.2
	Kernel-4_99:4.1
	Kernel-4_98:4.1;
locks; strict;
comment	@# @;


4.6
date	2016.06.30.20.28.55;	author jlee;	state dead;
branches;
next	4.5;
commitid	lMnWzoE9eJz3Wwcz;

4.5
date	2016.06.30.20.08.08;	author jlee;	state Exp;
branches;
next	4.4;
commitid	IWoXxARWeuLDOwcz;

4.4
date	99.10.25.17.17.08;	author kbracey;	state Exp;
branches
	4.4.2.1
	4.4.4.1;
next	4.3;

4.3
date	99.10.25.16.48.57;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	99.10.19.14.47.59;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	99.10.18.16.15.31;	author kbracey;	state Exp;
branches;
next	;

4.4.2.1
date	2001.06.18.14.49.44;	author mstephen;	state Exp;
branches;
next	;

4.4.4.1
date	2000.12.04.17.37.10;	author sforrest;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@; Copyright 1999 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > KbdResRCMM

; This file contains the minimal RCMM keyboard control stuff that the kernel does on reset.
; The only two hooks in this file used externally are IRQ_Test_CTRL_or_R_Pressed
; and SetUpKbd.

; These asserts are to do with the need to pull forward the combo chip configuration.
; As the code presently stands, ConfigureCombo will only work without calling
; ReadMachineType and PowerHardware in these conditions.
;
; The reason for not calling them is that they mess with variables and VIDC things
; that aren't ready yet.
;
; ConfigureCombo etc only write to IOSystemType, which has now been moved to SkippedTables
; so it doesn't get wiped by ClearPhysRam.

        ASSERT  :LNOT: BatManSupport

UART2                   * ComboBase + &2F8*4 ; -> base of UART 2

                        ^ 0, R2
UART_RBR                # 0     ; 0 Receive buffer register (read only)    { DLAB=0 }
UART_THR                # 4     ; 0 Transmit holding register (write only) { DLAB=0 }
UART_IER                # 4     ; 1 Interrupt enable register (RW)         { DLAB=0 }
UART_FCR                # 0     ; 2 FIFO control register (write only)
UART_IIR                # 4     ; 2 Interrupt identification register (read only)
UART_LCR                # 4     ; 3 Line control register
UART_MCR                # 4     ; 4 Modem control register
UART_LSR                # 4     ; 5 Line status register
UART_MSR                # 4     ; 6 Modem status register
UART_SCR                # 4     ; 7 Scratchpad register

                        ^ 0, R2
UART_DLL                # 4     ; 0 Divisor latch (LS)                     { DLAB=1 }
UART_DLH                # 4     ; 1 Divisor latch (MS)                     { DLAB=1 }


; States
                        ^ 0
RCMM_HaveNowt           # 1
RCMM_HaveBasic          # 1
RCMM_HaveOEM            # 1
RCMM_HaveOEM_Key        # 1
RCMM_HaveOEM_Remote     # 1
RCMM_HaveOEM_Remote_2   # 1

; RCMM keyboard codes we are interested in.
RCMMCtrlL       *       74
RCMMCtrlR       *       81
RCMMShiftL      *       61
RCMMShiftR      *       72
RCMMR           *       38
RCMMT           *       39
RCMMDelete      *       88
RCMMBSpace      *       33
RCMMEnd         *       89

; RCMM remote control codes we are interested in.

RCMMRemRight    *       91+128

KeyData
        DCB     RCMMCtrlL,    CTRL_Down_Flag
        DCB     RCMMCtrlR,    CTRL_Down_Flag
        DCB     RCMMShiftL,   SHIFT_Down_Flag
        DCB     RCMMShiftR,   SHIFT_Down_Flag
        DCB     RCMMR,        R_Down_Flag
        DCB     RCMMT,        T_Down_Flag
        DCB     RCMMDelete,   Del_Down_Flag
        DCB     RCMMBSpace,   Del_Down_Flag
        DCB     RCMMEnd,      Copy_Down_Flag
        DCB     RCMMRemRight, Del_Down_Flag
        DCB     0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SetUpKbd
; Tricky - we don't have R13_svc set up yet - indeed it contains the RAM size
; and musn't be corrupted. These calls will need it though. The SVC stack does
; exist, so we can use it temporarily.
        MOV     R3, R13
        LDR     R13, =SVCSTK

; We're going to be using the serial port on the combo chip, so we need to
; pull forward the combo chip initialisation from PMF.osinit.
        [ STB
        BL      ConfigureCombo
        |
        BL      Configure37C665         ;RiscPC, Kryten and Stork use only SMC 37C665
        ]

; Set up the serial port

        LDR     R2, =UART2              ; R2 -> UART

        LDRB    R0, UART_LCR
        ORR     R1, R0, #2_10000000     ; set DLAB (enable Divisor Latch Access)
        STRB    R1, UART_LCR

        MOV     R1, #12                 ; divisor latch := 12 (9600 baud)
        STRB    R1, UART_DLL
        MOV     R1, #0
        STRB    R1, UART_DLH

        MOV     R0, #2_00000011         ; 8N1, DLAB off
        STRB    R0, UART_LCR

        STRB    R1, UART_FCR            ; FIFOs off

        LDRB    R0, UART_RBR            ; clear the receive buffer
        LDRB    R0, UART_RBR
        LDRB    R0, UART_LSR            ; clear any error condition

        MOV     R0, #2_00000101         ; received data and line status interrupts only
        STRB    R0, UART_IER

        MOV     R0, #2_00001011         ; enable IRQ; RTS and DTR on
        STRB    R0, UART_MCR

        MOV     R0, #IOMD_Base
 [ ReassignedIOMDInterrupts
        MOV     R1, #IOMDr_serial_IRQ_bit
 |
        MOV     R1, #IOMD_serial_IRQ_bit
 ]
        STRB    R1, [R0, #IOCIRQMSKB]

        MOV     R0, #InitKbdWs
        STRB    R1, [R0, #KB_There_Flag] ; keyboard is always there (it's infra-red...)

        MOV     R13, R3                 ; restore R13

        B       SetUpKbdReturn

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; On ARM600, this routine must work in IRQ32 mode

; This is called on receipt of a serial interrupt.

IRQ_Test_CTRL_or_R_Pressed ROUT
        SUB     lr, lr, #4
        Push    "r0-r2,lr"

        LDR     R2, =UART2
        LDRB    R0, UART_IIR
        AND     R1, R0, #2_00000111     ; check the interrupt source
        TEQ     R1, #2_100
        BEQ     IRQ_RCMM_Receive
        TEQ     R1, #2_110
        BEQ     IRQ_RCMM_LineStatus
        Pull    "R0-R2,PC",,^           ; shouldn't happen. Hope it goes away :)

IRQ_RCMM_LineStatus
        LDRB    R0, UART_LSR            ; this clears the interrupt
        TST     R0, #2_00011110         ; overrun, parity, framing or break error?
        Pull    "R0-R2,PC",EQ,^         ; no? then why did you call us?

        TST     R0, #2_00000001         ; data ready?
        LDRNEB  R0, UART_RBR            ; junk it then.

        MOV     R0, #RCMM_HaveNowt
        MOV     LR, #InitKbdWs
        STRB    R0, [LR, #KeyState]
        Pull    "R0-R2,PC",,^


; Problem we have is no flow control; we could be looking at any
; part of a message. Deal with this by resynchronising every time
; we get something we don't expect.

; Basic mode keypress is binary  10xx0kkk kkkk0000
; OEM mode keypress is binary    000011xx xxxx10xx 0kkkkkkk
;                             or 001xxxxx xxxx10xx 0kkkkkkk
; Remote control press is binary 000011xx xxxx00xx xxxxxxxx 0rrrrrrr
;                             or 001xxxxx xxxx00xx xxxxxxxx 0rrrrrrr

IRQ_RCMM_Receive
        LDRB    R0, UART_RBR            ; received data in R0 (interrupt cleared)
        MOV     R2, #InitKbdWs
        LDRB    LR, [R2, #KeyState]
        ADD     PC, PC, LR, LSL #2
        NOP
        B       IRQ_RCMM_Nowt
        B       IRQ_RCMM_Basic
        B       IRQ_RCMM_OEM
        B       IRQ_RCMM_OEM_Key
        B       IRQ_RCMM_OEM_Remote
        B       IRQ_RCMM_OEM_Remote_2

IRQ_RCMM_Nowt
        AND     LR, R0, #2_11001000
        TEQ     LR, #2_10000000         ; is it a basic mode keypress?
        BNE     %FT10

        MOV     LR, #RCMM_HaveBasic
        STRB    LR, [R2, #KeyState]
        AND     LR, R0, #2_00000111
        STRB    LR, [R2, #KeyMSB]

10      AND     LR, R0, #2_11111100     ; is it a short ID OEM message?
        TEQ     LR, #2_00001100
        ANDNE   LR, R0, #2_11100000     ; or a long ID one?
        TEQNE   LR, #2_00100000
        MOVEQ   LR, #RCMM_HaveOEM
        STREQB  LR, [R2, #KeyState]
        Pull    "R0-R2,PC",,^

IRQ_RCMM_Basic
        TST     R0, #2_00001111
        BNE     ResyncRCMM
        LDRB    LR, [R2, #KeyMSB]
        MOV     R0, R0, LSR #4
        ORR     R0, R0, LR, LSL #4      ; R0 = key code
        B       GotRCMMKey

IRQ_RCMM_OEM
        AND     LR, R0, #2_00001100
        TEQ     LR, #2_00000000         ; Remote control?
        TEQNE   LR, #2_00001000         ; Keyboard?
        BNE     ResyncRCMM
        TEQ     LR, #2_00000000
        MOVEQ   LR, #RCMM_HaveOEM_Remote
        MOVNE   LR, #RCMM_HaveOEM_Key
        B       UpdateRCMMState

IRQ_RCMM_OEM_Key
        TST     R0, #2_10000000         ; Key up rather than down?
        BNE     ResyncRCMM
        B       GotRCMMKey

IRQ_RCMM_OEM_Remote
        MOV     LR, #RCMM_HaveOEM_Remote_2
        B       UpdateRCMMState         ; This byte can be anything :)

IRQ_RCMM_OEM_Remote_2
        TST     R0, #2_10000000         ; Key up rather than down?
        BNE     ResyncRCMM
        ADD     R0, R0, #128            ; Indicate a remote code
        B       GotRCMMKey

ResyncRCMM
        MOV     LR, #RCMM_HaveNowt
UpdateRCMMState
        STRB    LR, [R2, #KeyState]
        Pull    "R0-R2,PC",,^

; In: R0 = key code, R2 = InitKbdWs
GotRCMMKey

        ADR     R1, KeyData
10
        LDRB    LR, [R1], #2            ; Get key code from table.
        TEQ     LR, #0                  ; If at end of table then
        Pull    "R0-R2,PC",EQ,^         ;   ignore key.

        TEQ     LR, R0                  ; If not this key then
        BNE     %BT10                   ;   try the next.

        LDRB    LR, [R1, #-1]           ; Get flag.
        STRB    LR, [R2, LR]            ; Non-zero means pressed.

        B       ResyncRCMM

        END
@


4.5
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@@


4.4
log
@And IRQs tweaked one more time.

Version 5.03. Tagged as 'Kernel-5_03'
@
text
@a30 1
        ASSERT  IO_Type = "IOMD"
@


4.4.2.1
log
@Reimplement enhancements to kernel Dynamic Area support from
Ursula. Quite a hairy code merge really, so let's hope it is
worth it to someone. What you get (back after 2 or 3 years):
- much more efficient for largish numbers of DAs (relevance
  to current build = approx 0)
- fancy reason codes to support fast update of
  Switcher bar display (relevance = 0)
- support for clamped maximum area sizes, to avoid address
  space exhaustion with big memory (relevance = 0)
- better implementation of shrinkable DAs, performance
  wise (if lots of DAs, relevance = approx 0)
- support for 'Sparse' DAs. Holey dynamic areas, Batman!
  (relevance, go on someone use the darned things)
Moderately development tested on HAL/32bit ARM9 desktop.
Note the Switcher should be compiled to use the new
reason codes 6&7, for fabled desktop builds.

Also, during this work, so I could see the wood for the
trees, redid some source code clean up, removing pre-Medusa
stuff (like I did about 3 years ago on Ursula, sigh). That's
why loads of source files have changed. The new DA stuff
is confined pretty much to hdr.KernelWS and s.ChangeDyn.

Ta.

Version 5.35, 4.79.2.38. Tagged as 'Kernel-5_35-4_79_2_38'
@
text
@d31 1
@


4.4.4.1
log
@
  * Kernel change for Lazarus/Bethany projects.

Detail:

  * Power-on keyboard options now restricted to "Delete", "Backspace"
    and "-->" (right arrow).  This disables the other standard power-on
    options such as "CTRL", "SHIFT", "COPY", "R" and "T" and means that
    the boot sequence can't be disabled by holding down "SHIFT" whilst
    booting, for example.

Admin:

  * Untested.  Changes applied to Bethany branch only.

Version 5.13, 4.52.2.1. Tagged as 'Kernel-5_13-4_52_2_1'
@
text
@d78 6
a83 6
;        DCB     RCMMCtrlL,    CTRL_Down_Flag
;        DCB     RCMMCtrlR,    CTRL_Down_Flag
;        DCB     RCMMShiftL,   SHIFT_Down_Flag
;        DCB     RCMMShiftR,   SHIFT_Down_Flag
;        DCB     RCMMR,        R_Down_Flag
;        DCB     RCMMT,        T_Down_Flag
d86 1
a86 1
;        DCB     RCMMEnd,      Copy_Down_Flag
@


4.3
log
@First attempt at a Kernel that handles ReassignedIOMDInterrupts.
If reassigned, ReadSysInfo3 returns &00x22200 in R0, to indicate that the
serial and parallel ports aren't compatible, and IDE and floppy are
unavailable.

Version 5.01. Tagged as 'Kernel-5_01'
@
text
@d137 3
d141 1
@


4.2
log
@RCMM changes made the Kernel not report the type of I/O chip fitted correctly.
This has been fixed. In addition, SMC669 and UMC669 chips are reported as
a different chip configuration by OS_ReadSysInfo 3 (values 4 and 5
respectively).
A few assertions added to catch the remaining cases where the RCMM stuff
won't work - those cases will involve a bit more reordering of hardware
initialisation.

Version 5.00. Tagged as 'Kernel-5_00'
@
text
@d137 1
a137 1
        MOV     R1, #serial_bit
@


4.1
log
@Added RCMM keyboard support for Delete-power on, Ctrl-reset etc etc.
Right arrow on a remote also acts as Delete.

Version 4.98. Tagged as 'Kernel-4_98'
@
text
@d21 13
a101 3
 [ StorkPowerSave
        BL      PowerHardware           ;On Stork, ensure Combo chip, Winnie, Floppy etc are powered
 ]
a104 1
 [ IO_Type = "IOMD"
a105 3
 |
        BL      Configure82C710         ;Earlier code copes with 82C710,82C711 and 37C665
 ]
@
