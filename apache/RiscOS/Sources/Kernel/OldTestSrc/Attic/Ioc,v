head	4.2;
access;
symbols
	RO_5_07:4.2
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	99.05.04.13.41.08;	author kbracey;	state dead;
branches;
next	4.1;

4.1
date	96.11.05.09.40.57;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.40.57;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.10.12;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.03.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@First attempt to get POST working with >8M ROMs.

Version 4.77. Tagged as 'Kernel-4_77'
@
text
@; > TestSrc.IOC

        TTL RISC OS 2+ POST IO controller
;
; This initial IOC test simply reports the content of the IRQ and FIRQ
; registers, to show any unexpected pending IRQs. 
; Certain of these should really be cleared, and the effect of an
; interrupt tested.
;
;------------------------------------------------------------------------
; History
;
; Date          Name            Comment
; ----          ----            -------
; 18-Dec-89     ArtG            Initial version
; 29-Nov-91     ArtG            Added IOC bus test using mask registers
; 20-Jun-93     ArtG            Modified for 29-bit IOMD test
;
;
;------------------------------------------------------------------------

        [ IO_Type = "IOMD"
ts_IObase       *       IOMD_Base
ts_IOmask       *       &1fffffff
ts_IOreg1       *       IOMD_VIDCUR
ts_IOreg2       *       IOMD_VIDSTART
ts_IObswap      *       32
ts_IOMD_ID      *       &D4E7
        |
ts_IObase       *       IOC
ts_IOmask       *       &ff0000
ts_IOreg1       *       IOCIRQMSKA
ts_IOreg2       *       IOCIRQMSKB
ts_IObswap      *       16
        ]

ts_IOCreg
        MOV     r0,#0                   ; zero error accumulator
        LDR     r3, =ts_IObase
        MOV     r1,#(1 :SHL: 31)          ; initialise bit-set test mask
0
        MVN     r2,r1                   ; make bit-clear test mask
        ANDS    r4,r1,#ts_IOmask
        BEQ     %FT1                    ; skip if this bit isn't tested
        STR     r1,[r3,#ts_IOreg1]
        STR     r2,[r3,#ts_IOreg2]
        LDR     r4,[r3,#ts_IOreg1]
;        EOR     r4, r4, r1, LSR #ts_IObswap     ; check bit-set test was OK
        EOR     r4, r4, r1           ; check bit-set test was OK
        ORR     r0, r0, r4              ; accumulate errors in r0
        LDR     r4,[r3,#ts_IOreg2]
;        EOR     r4, r4, r2, LSR #ts_IObswap     ; check bit-clear test was OK
        EOR     r4, r4, r2           ; check bit-clear test was OK
        ORR     r0, r0, r4              ; accumulate errors in r0
1
        MOV     r1, r1, LSR #1          ; shift mask downwards
        TEQ     r1,#0
        BNE     %BT0                    ; and loop until all bits tested

        ANDS    r8, r0, #ts_IOmask
        MOV     pc,r14                   ; return error if any bit failed

ts_IOCstat
        LDR     r3, =ts_IObase
        MOV     r0,#0
        [ IO_Type = "IOMD"
        LDRB    r1,[r3,#IOMD_ID1]
        ORR     r0,r0,r1, LSL #(32-24)
        LDRB    r1,[r3,#IOMD_ID0]
        ORR     r0,r0,r1
        LDR     r1,=ts_IOMD_ID
        CMPS    r0,r1                   ; check IOMD identity
        MOV     r0,r0,LSL #16
        LDRB    r1,[r3,#IOMD_VERSION]
        ORR     r8,r0,r1, LSL #12
        MOV     pc,r14
        |
        LDRB    r1,[r3,#IOCControl]
        ORR     r0,r0,r1, LSL #(32 - 8)
        LDRB    r1,[r3,#IOCIRQSTAA]
        ORR     r0,r0,r1, LSL #(32 - 16)
        LDRB    r1,[r3,#IOCIRQSTAB]
        ORR     r0,r0,r1, LSL #(32 - 24)
        LDRB    r1,[r3,#IOCFIQSTA]
        ORR     r8,r0,r1
        ANDS    r1,r1,#0                ; return zero flag (OK)

        MOV     pc,r14
        ]

        END 
 
@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
