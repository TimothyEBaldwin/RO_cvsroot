head	4.1;
access;
symbols
	RO_5_07:4.1
	PCCardFS-0_10:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.33.25;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.25;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.58.52;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.39.19;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.35.44;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    debug.c
 * Purpose: debugging routines for the Toolbox
 * Author:  Ian Johnson
 * History: 16-Sep-93: IDJ:   created
 *          07-Jul-94: WT :   changed fn names
 *          05-Aug-94: WT :   added ability to colourise output
 *
 */

#include "swis.h"
#include "kernel.h"
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

#define BLACK           0x00
#define DARK_BLUE       0x04
#define RED             0x01
#define GREEN           0x02
#define MAGENTA         0x05
#define CYAN            0x06
#define YELLOW          0x03
#define WHITE           0x07

static char output_buffer[256];
static char var_val[256];
static char debug_var[256] = "";


extern void Set_DebugVar_Name (char *var_name)
{
    strcpy (debug_var, var_name);
}


extern void DebugMessage (char *allow, char *string, ...)
{
    /*
     * Function to output the given variable list down the tube.  String is a
     * printf format string.  String is only printed if the given colour id char
     * appears in the system variable debug_var
     *
     */

    _kernel_swi_regs regs;
    _kernel_oserror *e;
    va_list args;
    char *p;

    va_start(args, string);

    regs.r[0] = (int)debug_var;
    regs.r[1] = 0;
    regs.r[2] = 0x80000000;     /* check variable exists */
    regs.r[3] = 0;
    regs.r[4] = 3;
    _kernel_swi (OS_ReadVarVal, &regs, &regs);
    if (regs.r[2] == 0)
        return;

    regs.r[0] = (int)debug_var;
    regs.r[1] = (int)var_val;
    regs.r[2] = 255;     /* check variable exists */
    regs.r[3] = 0;
    regs.r[4] = 3;
    if ((e = _kernel_swi (OS_ReadVarVal, &regs, &regs)) != NULL)
        return;
    if (regs.r[2] == 0)
        return;
    var_val[regs.r[2]] = '\0';

    if (strstr (var_val, allow) != NULL)
    {
/** Mod to colourise by W.Turner **/
        switch(allow[0]) {
            case 'b': regs.r[1] = DARK_BLUE;
                      break;
            case 'r': regs.r[1] = RED;
                      break;
            case 'g': regs.r[1] = GREEN;
                      break;
            case 'm': regs.r[1] = MAGENTA;
                      break;
            case 'c': regs.r[1] = CYAN;
                      break;
            case 'y': regs.r[1] = YELLOW;
                      break;
            case 'w': regs.r[1] = WHITE;
                      break;
            default: regs.r[1] = BLACK;
        }
        regs.r[0] = 17; /** VDU 17 - change text colour **/
        _kernel_swi (HostFS_WriteC, &regs, &regs);
        regs.r[0] = (int)regs.r[1]; /** And this is the colour **/
        _kernel_swi (HostFS_WriteC, &regs, &regs);
        switch(allow[1]) {
            case 'B': regs.r[1] = DARK_BLUE;
                      break;
            case 'R': regs.r[1] = RED;
                      break;
            case 'G': regs.r[1] = GREEN;
                      break;
            case 'M': regs.r[1] = MAGENTA;
                      break;
            case 'C': regs.r[1] = CYAN;
                      break;
            case 'Y': regs.r[1] = YELLOW;
                      break;
            case 'K': regs.r[1] = BLACK;
                      break;
            default: regs.r[1] = WHITE;
        }
        regs.r[0] = 17; /** VDU 17 - change text colour **/
        _kernel_swi (HostFS_WriteC, &regs, &regs);
        regs.r[0] = ((int)regs.r[1])+128; /** And this is the background colour **/
        _kernel_swi (HostFS_WriteC, &regs, &regs);
/** End of mod **/

        vsprintf (output_buffer, string, args);

        for (p = output_buffer; *p != '\0'; p++)
        {
            if ((*p >= ' ' && *p <= '~') || *p == '\n')
                regs.r[0] = (int)*p;
            else
                regs.r[0] = '*';
            _kernel_swi (HostFS_WriteC, &regs, &regs);
            if (*p == '\n')
            {
                regs.r[0] = '\r';
                _kernel_swi (HostFS_WriteC, &regs, &regs);
            }
        }
    }

    va_end(args);
}


@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
