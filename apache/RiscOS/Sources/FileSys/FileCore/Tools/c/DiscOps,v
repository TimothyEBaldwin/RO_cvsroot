head	4.1;
access;
symbols
	FileCore-3_75:4.1
	FileCore-3_74:4.1
	FileCore-3_73:4.1
	FileCore-3_72:4.1
	FileCore-3_71:4.1
	FileCore-3_70:4.1
	FileCore-3_69:4.1
	FileCore-3_68:4.1
	FileCore-3_67:4.1
	FileCore-3_66:4.1
	FileCore-3_65:4.1
	FileCore-3_64:4.1
	FileCore-3_63:4.1
	FileCore-3_62:4.1
	FileCore-3_61:4.1
	FileCore-3_60:4.1
	FileCore-3_59:4.1
	FileCore-3_58:4.1
	FileCore-3_57:4.1
	FileCore-3_56:4.1
	FileCore-3_55:4.1
	FileCore-3_54:4.1
	FileCore-3_53:4.1
	FileCore-3_52:4.1
	FileCore-3_51:4.1
	FileCore-3_50:4.1
	FileCore-3_49:4.1
	FileCore-3_48:4.1
	FileCore-3_47:4.1
	FileCore-3_46:4.1
	FileCore-3_45:4.1
	FileCore-3_44:4.1
	FileCore-3_43:4.1
	FileCore-3_42:4.1
	FileCore-3_41:4.1
	FileCore-3_40:4.1
	FileCore-3_39:4.1
	FileCore-3_38:4.1
	FileCore-3_37:4.1
	FileCore-3_36:4.1
	FileCore-3_35:4.1
	FileCore-3_34:4.1
	FileCore-3_33:4.1
	RO_5_07:4.1
	FileCore-3_32:4.1
	FileCore-3_31:4.1
	FileCore-3_30:4.1
	FileCore-3_29:4.1
	FileCore-3_28:4.1
	FileCore-3_25-4_9_2_2:4.1
	FileCore-3_27:4.1
	FileCore-3_26:4.1
	FileCore-3_22-4_6_2_1:4.1
	bavison_FileCore-3_22_dev_bp:4.1
	bavison_FileCore-3_22:4.1.0.14
	FileCore-3_25-4_9_2_1:4.1
	HAL:4.1.0.12
	FileCore-3_25:4.1
	FileCore-3_24:4.1
	FileCore-3_23:4.1
	dellis_autobuild_BaseSW:4.1
	FileCore-3_22:4.1
	Ursula_merge:4.1
	ROL_merge:4.1
	FileCore-3_21:4.1
	ROL_Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	ROL_FileCore-3_21:4.1
	ROL_FileCore-3_20:4.1
	ROL:4.1.0.10
	ROL_bp:4.1
	Ursula_RiscPC_bp:4.1
	FileCore-3_18:4.1
	FileCore-3_01:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	FileCore-3_00:4.1
	FileCore-2_99:4.1
	aglover_FileCore-3_17:4.1
	sproven_FileCore-3_16:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	sproven_FileCore-3_15:4.1
	sproven_314:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_313:4.1
	sproven_3_11:4.1
	sproven_3_10:4.1
	sproven_Ursula_3_09:4.1
	sproven_3_07:4.1
	sproven_3_06:4.1
	sproven_3_05:4.1
	sproven_3_04:4.1
	Spinner_RCA116:4.1.7.1
	sproven_3_03:4.1
	sproven_3_02:4.1
	sproven_3_01:4.1
	sproven_2_99:4.1
	sproven_2_98:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.32.34;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.34;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.47.05;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.35.25;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.32.08;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
        Basic DiscOp interface routines
*/

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "typedefs.h"
#include "EMaps.h"
#include "DiscOps.h"


int discop_to_use = ADFS_DiscOp;

_kernel_oserror *adfs_discop_read
(
        void ** const destination,
        disc_record const * const discrec,
        direct_disc_address * const source_start,
        unsigned int * const source_len
)
{
        _kernel_swi_regs r;
        _kernel_oserror *err;

        r.r[0] = 0;
        r.r[1] = 0x11 | ((int)discrec << 6);
/*        r.r[1] = 1;*/
        r.r[2] = *(int *)source_start;
        r.r[3] = (int)*destination;
        r.r[4] = (int)*source_len;
        r.r[5] = 0;
        r.r[6] = 0;
        r.r[7] = 0;
        r.r[8] = 0;
        r.r[9] = 0;
/*
        printf( "Reading (op %d, SWI %#x) to &%08X from disc address &%08X, length &%08X >>", r.r[1], discop_to_use, r.r[3], r.r[2], r.r[4] );
        (void)getchar();
        printf( "\n" );
*/
        err = _kernel_swi( XOS_Bit | discop_to_use, &r, &r );

/*if ( err ) printf( "%s\n", err->errmess );*/

        *source_start = *(direct_disc_address *)&r.r[2];
        *destination = (void *)r.r[3];
        *source_len = (unsigned int)r.r[4];

        return err;
}

_kernel_oserror *adfs_discop_write
(
        void ** const source,
        disc_record const * const discrec,
        direct_disc_address * const destination,
        unsigned int * const source_len
)
{
        _kernel_swi_regs r;
        _kernel_oserror *err;

        r.r[0] = 0;
        r.r[1] = 0x12 | ((int)discrec << 6);
/*        r.r[1] = 2;*/
        r.r[2] = *(int *)destination;
        r.r[3] = (int)*source;
        r.r[4] = (int)*source_len;
        r.r[5] = 0;
        r.r[6] = 0;
        r.r[7] = 0;
        r.r[8] = 0;
        r.r[9] = 0;
/*
        printf( "Writing (op %d, SWI %#x) to &%08X from disc address &%08X, length &%08X >>", r.r[1], discop_to_use, r.r[3], r.r[2], r.r[4] );
        (void)getchar();
        printf( "\n" );
*/
        err = _kernel_swi( XOS_Bit | discop_to_use, &r, &r );

/*if ( err ) printf( "%s\n", err->errmess );*/

        *destination = *(direct_disc_address *)&r.r[2];
        *source = (void *)r.r[3];
        *source_len = (unsigned int)r.r[4];

        return err;
}

disc_record floppy_boot_record =
{
        10, /* SectorSize */
        5, /* SecsPerTrk */
        1, /* Heads */
        2, /* Density */
        0, /* LinkBits */
        0, /* BitSize */
        0, /* RAskew */
        0, /* BootOptions */
        0, /* reserved */
        0, /* Zones */
        0, /* ZoneSpare */
        {0,0}, /* RootDir */
        640*1024, /* DiscSize */
        0, /* DiscId */
        {0,0,0,0,0,0,0,0,0,0}, /* DiscName */
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* unused */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, /* unused */
        {   0,   0,   0,0x20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 000 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 010 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 020 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 030 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 040 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 050 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 060 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 070 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 080 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 090 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0a0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0b0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0c0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0d0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0e0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0f0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 100 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 110 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 120 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 130 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 140 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 150 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 160 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 170 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 180 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 190 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1a0 */
            0,   0,   0,0x16,0x0d,0x0c,0xa9,0x0a,0x80,0x00,0xff,0x03,0x00,0x00,0x00,0x00, /* 1b0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1c0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1d0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1e0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0} /* 1f0 */
};

disc_record winnie_boot_record =
{
        8, /* SectorSize */
        32, /* SecsPerTrk */
        1, /* Heads */
        0, /* Density */
        0, /* LinkBits */
        0, /* BitSize */
        0, /* RAskew */
        0, /* BootOptions */
        0, /* reserved */
        0, /* Zones */
        0, /* ZoneSpare */
        {0,0}, /* RootDir */
        640*1024, /* DiscSize */
        0, /* DiscId */
        {0,0,0,0,0,0,0,0,0,0}, /* DiscName */
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* unused */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, /* unused */
        {   0,   0,   0,0x20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 000 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 010 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 020 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 030 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 040 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 050 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 060 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 070 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 080 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 090 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0a0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0b0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0c0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0d0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0e0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0f0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 100 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 110 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 120 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 130 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 140 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 150 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 160 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 170 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 180 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 190 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1a0 */
            0,   0,   0,0x16,0x0d,0x0c,0xa9,0x0a,0x80,0x00,0xff,0x03,0x00,0x00,0x00,0x00, /* 1b0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1c0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1d0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1e0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0} /* 1f0 */
};

_kernel_oserror *read_disc_record
(
        char const * const disc_specifier,
        disc_record * const discrec
)
{
        direct_disc_address a;
        unsigned int dummy = 0x400;
        char dummy_area[ 0x400 ];
        char *dummyp = dummy_area;
        _kernel_oserror *err;
        _kernel_swi_regs r;

        a.disc_number = disc_specifier[1]-'0';

        if ( a.disc_number < 4 )
        {
                /*
                        Boot floppy
                */
                a.byte_offset = 0;

                err = adfs_discop_read( (void **)&dummyp, &floppy_boot_record, &a, &dummy );

                if ( !err )
                        memcpy( discrec, &dummy_area[4], 64);
        }
        else
        {
                /*
                        Boot winnie
                */
                a.byte_offset = 0xc00 + 0x200 - 0x200;
                dummyp = &discrec->bad_block_list[0];
                dummy = 512;

                err = adfs_discop_read( (void **)&dummyp, &winnie_boot_record, &a, &dummy );

                if ( !err )
                {
/*printf( "1st half of read succeeded\n" );
{int i,j;for(i=0;i<512;i+=16){for(j=0;j<16;j++)printf(" %02x",((char *)discrec)[i+j]);printf("\n");}}*/
                        memcpy( discrec, &discrec->bad_block_list[ 0x200 - 64 ], 64);
/*{int i,j;for(i=0;i<512;i+=16){for(j=0;j<16;j++)printf(" %02x",((char *)discrec)[i+j]);printf("\n");}}*/

                        discrec->root_directory.indirect.disc_number = a.disc_number;

                        /*
                                Specify the winnie
                        */
                        r.r[1] = 0x1f | ((int)discrec<<6);
                        r.r[2] = a.disc_number << (32-3);
                        err = _kernel_swi( XOS_Bit | discop_to_use, &r, &r );
                        if ( !err || err )      /* ie ignore error */
                        {
/*printf( "Specify worked\n" );*/
                                a = map_start( discrec );
                                dummyp = dummy_area;
                                dummy = 0x400;
                                err = adfs_discop_read( (void **)&dummyp, discrec, &a, &dummy );

                                if ( !err )
                                {
                                        memcpy( discrec, &dummy_area[4], 64);
                                }
                        }
                }
        }

        if ( !err )
        {
                discrec->root_directory.indirect.disc_number = a.disc_number;
                *(int *)&discrec->bad_block_list = 0x20000000;
        }

        return err;
}
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
