head	4.7;
access;
symbols
	FileCore-3_75:4.7
	FileCore-3_74:4.7
	FileCore-3_73:4.7
	FileCore-3_72:4.7
	FileCore-3_71:4.7
	FileCore-3_70:4.7
	FileCore-3_69:4.7
	FileCore-3_68:4.7
	FileCore-3_67:4.7
	FileCore-3_66:4.7
	FileCore-3_65:4.7
	FileCore-3_64:4.7
	FileCore-3_63:4.7
	FileCore-3_62:4.7
	FileCore-3_61:4.6
	FileCore-3_60:4.6
	FileCore-3_59:4.6
	FileCore-3_58:4.6
	FileCore-3_57:4.6
	FileCore-3_56:4.6
	FileCore-3_55:4.5
	FileCore-3_54:4.5
	FileCore-3_53:4.5
	FileCore-3_52:4.5
	FileCore-3_51:4.5
	FileCore-3_50:4.5
	FileCore-3_49:4.4
	FileCore-3_48:4.4
	FileCore-3_47:4.4
	FileCore-3_46:4.4
	FileCore-3_45:4.4
	FileCore-3_44:4.3
	FileCore-3_43:4.3
	FileCore-3_42:4.3
	FileCore-3_41:4.3
	FileCore-3_40:4.2
	FileCore-3_39:4.2
	FileCore-3_38:4.2
	FileCore-3_37:4.2
	FileCore-3_36:4.2
	FileCore-3_35:4.2
	FileCore-3_34:4.2
	FileCore-3_33:4.2
	RO_5_07:4.2
	FileCore-3_32:4.2
	FileCore-3_31:4.2
	FileCore-3_30:4.1
	FileCore-3_29:4.1
	FileCore-3_28:4.1
	FileCore-3_25-4_9_2_2:4.1
	FileCore-3_27:4.1
	FileCore-3_26:4.1
	FileCore-3_22-4_6_2_1:4.1
	bavison_FileCore-3_22_dev_bp:4.1
	bavison_FileCore-3_22:4.1.0.14
	FileCore-3_25-4_9_2_1:4.1
	HAL:4.1.0.12
	FileCore-3_25:4.1
	FileCore-3_24:4.1
	FileCore-3_23:4.1
	dellis_autobuild_BaseSW:4.1
	FileCore-3_22:4.1
	Ursula_merge:4.1
	ROL_merge:4.1
	FileCore-3_21:4.1
	ROL_Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	ROL_FileCore-3_21:4.1
	ROL_FileCore-3_20:4.1
	ROL:4.1.0.10
	ROL_bp:4.1
	Ursula_RiscPC_bp:4.1
	FileCore-3_18:4.1
	FileCore-3_01:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	FileCore-3_00:4.1
	FileCore-2_99:4.1
	aglover_FileCore-3_17:4.1
	sproven_FileCore-3_16:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	sproven_FileCore-3_15:4.1
	sproven_314:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_313:4.1
	sproven_3_11:4.1
	sproven_3_10:4.1
	sproven_Ursula_3_09:4.1
	sproven_3_07:4.1
	sproven_3_06:4.1
	sproven_3_05:4.1
	sproven_3_04:4.1
	Spinner_RCA116:4.1.7.1
	sproven_3_03:4.1
	sproven_3_02:4.1
	sproven_3_01:4.1
	sproven_2_99:4.1
	sproven_2_98:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2013.07.18.21.04.14;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	Em91CJgLrlPBMZXw;

4.6
date	2013.02.24.21.09.12;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	rgJG8ZFRF8o9ruFw;

4.5
date	2012.04.14.00.43.14;	author bavison;	state Exp;
branches;
next	4.4;
commitid	xkSKw5i9HVYqOL0w;

4.4
date	2011.10.14.07.23.43;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	D2Id4aPp4zmuUhDv;

4.3
date	2011.09.13.19.13.13;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	PKTDORFkNFRVOmzv;

4.2
date	2003.04.03.18.33.27;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.32.13;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.13;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.03.03;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.33.43;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.30.32;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Minor tidy ups
Service call table made unconditional.
Typo in Hdr:FileCore corrected.
Comments improved, and other misc housekeeping.

Version 3.62. Tagged as 'FileCore-3_62'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;


        SUBT    Exported FileCore constants

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Name  Description
; ----       ----  -----------
; 28-Nov-90  JSR   Created
; 28-Jan-91  JSR   Added FileCore_DiscFormat and FileCore_LayoutStructure
;                       Added Format_Floppy and Format_ D, E, F and L
; 14-May-91  JSR   Added WinnieMounts and WinniePollChanges
; 14-Jul-93  JSR   Added G format to list
; 17-May-94  AMcC  Changed to using the preferred SWI base and name symbols
; 21-Sep-94  SBP   Added BigDiscSupport flag
; 14-Mar-95  SBP   Added Misc_DriveStatus and DriveStatusWorks

SWIClass        SETS    FileCoreSWI_Name

        ^       FileCoreSWI_Base

        AddSWI  DiscOp
        AddSWI  Create
        AddSWI  Drives
        AddSWI  FreeSpace
        AddSWI  FloppyStructure
        AddSWI  DescribeDisc
        AddSWI  DiscardReadSectorsCache
        AddSWI  DiscFormat
        AddSWI  LayoutStructure
        AddSWI  MiscOp
        AddSWI  SectorDiscOp
        AddSWI  FreeSpace64
        AddSWI  DiscOp64
        AddSWI  Features

;
; FileCore_Create layout of incarnation descriptor block
                                        ^ 0
Create_Flags                            # 3
CreateFlag_FixedDiscNeedsFIQ            * 1:SHL:0  
CreateFlag_FloppyNeedsFIQ               * 1:SHL:1  
CreateFlag_Reserved                     * 1:SHL:2  ; Was background transfer supported in RO2
CreateFlag_NoBigBuf                     * 1:SHL:3  ; Use scratch space for small data moves
CreateFlag_FixedDiscsMountLikeFloppy    * 1:SHL:4  ; And fill the geometry in the disc record
CreateFlag_FixedDiscPollChangeSupport   * 1:SHL:5  ; Support poll change calls and lock calls
CreateFlag_FloppyEjects                 * 1:SHL:6  ; Floppies support MiscOp_Eject
CreateFlag_FixedDiscEjects              * 1:SHL:7  ; Fixed discs support MiscOp_Eject
CreateFlag_DriveStatusWorks             * 1:SHL:8  ; Drive status supported MiscOp_DriveStatus
CreateFlag_BigDiscSupport               * 1:SHL:9  ; Uses sector addresses not byte addresses
CreateFlag_NewErrorSupport              * 1:SHL:10 ; Errors in top bit set addresses
CreateFlag_FloppyDiscsMountLikeFixed    * 1:SHL:11 ; Floppy driver only reads the boot block, FileCore validates it and sets up the disc record
CreateFlag_MiscOp8Support               * 1:SHL:12 ; Filing system supports MiscOp 8
Create_Id                               # 1
Create_Title                            # 4
Create_BootText                         # 4
Create_LowLevel                         # 4
Create_Misc                             # 4
SzCreateDesc                            # 0

;
; FileCore_Create drive configuration register R3
DriveConfig_FloppyCount_Mask            * &FF
DriveConfig_FloppyCount_Shift           * 0
DriveConfig_FixedDiscCount_Mask         * &FF
DriveConfig_FixedDiscCount_Shift        * 8
DriveConfig_DefaultDrive_Mask           * &FF
DriveConfig_DefaultDrive_Shift          * 16
DriveConfig_StartupOpt_Mask             * &FF
DriveConfig_StartupOpt_Shift            * 24
DriveConfig_StartupOpt_NoDir            * 1:SHL:30 ; Start with no directory

;
; FileCore_Create map size guesses in register R6 (unused with big discs)
MapSizeEstimate_Drive4_Mask             * &FF
MapSizeEstimate_Drive4_Shift            * 0
MapSizeEstimate_Drive5_Mask             * &FF
MapSizeEstimate_Drive5_Shift            * 8
MapSizeEstimate_Drive6_Mask             * &FF
MapSizeEstimate_Drive6_Shift            * 16
MapSizeEstimate_Drive7_Mask             * &FF
MapSizeEstimate_Drive7_Shift            * 24

;
; FileCore_DiscFormat format densities
DensityFixedDisc                        * 0
DensitySingle                           * 1
DensityDouble                           * 2        ; 250kbps
DensityDoublePlus                       * 3        ; 300kbps
DensityQuad                             * 4
DensityOctal                            * 8

;
; FileCore_DiscFormat format specifiers
Format_L                                * 0
Format_D                                * 1
Format_E                                * 2
Format_F                                * 3
Format_G                                * 4
Format_Floppy                           * 1:SHL:7

;
; FileCore_FloppyStructure flags in R2
FloppyStructure_Force_OldMap            * 1:SHL:6
FloppyStructure_Force_OldDir            * 1:SHL:7

;
; Defect list end markers
DefectList_End                          * &20000000
DefectList_BigMap_End                   * &40000000

;
; FileCore_Features bits
Feature_NewErrors                       * 1:SHL:0
Feature_FloppyDiscsCanMountLikeFixed    * 1:SHL:1

;
; FileCore_DiscOp and FileCore_SectorDiscOp legacy disc addresses
LegacyDiscAddress_DriveNumber_Mask      * 2_111
LegacyDiscAddress_DriveNumber_Shift     * (32 - 3)
LegacyDiscAddress_SectorOffset_Mask     * &1FFFFFFF
LegacyDiscAddress_SectorOffset_Shift    * 0
LegacyDiscAddress_ByteOffset_Mask       * &1FFFFFFF
LegacyDiscAddress_ByteOffset_Shift      * 0

;
; FileCore_DiscOp64 extended address block
                                        ^ 0
ExtendedDiscAddress_DriveNumber         # 1
ExtendedDiscAddress_Reserved            # 3        ; Must be zero
ExtendedDiscAddress_LowWord             # 4
ExtendedDiscAddress_HighWord            # 4
SzExtendedDiscAddress                   # 0

;
; FileCore disc record
                                        ^ 0
DiscRecord_Log2SectorSize               # 1        ; log2 sector size
DiscRecord_SecsPerTrk                   # 1
DiscRecord_Heads                        # 1        ; n-1 for old adfs floppy format
DiscRecord_Density                      # 1        ; 0/1/2/3/4/8 fixed/single/double/double+/quad/octal
DiscRecord_IdLen                        # 1        ; Length in bits of id field in the map          
DiscRecord_Log2bpmb                     # 1        ; log2 bytes for each bit in map, 0 for old format
DiscRecord_Skew                         # 1        ; track to track sector skew for random access
DiscRecord_BootOpt                      # 1        ; boot option for *OPT4
DiscRecord_LowSector                    # 1        ; Lowest sector number on a track and flags:
DiscRecord_LowSector_Shift              * 0
DiscRecord_LowSector_Mask               * &3F      ; 0-5  Lowest numbered sector on a track
DiscRecord_SequenceSides_Flag           * 1:SHL:6  ; 6    Tracks are numbered 0..s-1 on side 0, then s..2s-1 on side 1, etc
DiscRecord_DoubleStep_Flag              * 1:SHL:7  ; 7    Double step
DiscRecord_NZones                       # 1        ; # zones in map
DiscRecord_ZoneSpare                    # 2        ; # bits in zones after 0 which are not map bits
DiscRecord_Root                         # 4        ; Disc address of the root directory
DiscRecord_DiscSize                     # 4        ; in bytes
DiscRecord_DiscId                       # 2        ; Cycle number
DiscRecord_DiscName                     # 10
SzDiscRecSig                            # 0
DiscRecord_DiscType                     # 4        ; FileType of disc: FileType_Data indicates
                                                   ; that the disc is, as yet, unidentified.
                                                   ; This may occur as a result of the identification
                                                   ; process failing, or the identification process
                                                   ; not yet happening. FileType_Data discs have no
                                                   ; concept of a unique identifier so drive independance
                                                   ; when accessing them is not possible.
DiscRecord_BigMap_DiscSize2             # 4        ; top 32bits of the disc size.  This combines with
                                                   ; DiscSize to give the full size of the disc.
DiscRecord_BigMap_ShareSize             # 1        ; sharing granularity, in sectors
DiscRecord_BigMap_Log2ShareSize_Mask    * &F
DiscRecord_BigMap_Log2ShareSize_Shift   * 0
DiscRecord_BigMap_Flags                 # 1        ; flags
DiscRecord_BigMap_BigFlag               * 1        ; 0 for small disc, 1 for big
DiscRecord_BigMap_NZones2               # 1        ; high byte of number of zones
DiscRecord_BigMap_Reserved              # 1
DiscRecord_BigDir_DiscVersion           # 4        ; version number of disc format
DiscRecord_BigDir_RootDirSize           # 4        ; size of root dir
SzDiscRecSig2                           # 0
DiscRecord_BigDir_Reserved              # 8
SzDiscRecSigSpace                       # 0
        ASSERT  (DiscRecord_ZoneSpare :MOD: 4)=2

;
; FileCore_DiscOp reason codes
                                        ^ 0
DiscOp_Verify                           # 1
DiscOp_ReadSecs                         # 1      
DiscOp_WriteSecs                        # 1      
DiscOp_ReadTrk                          # 1      
DiscOp_WriteTrk                         # 1      
DiscOp_Seek                             # 1      
DiscOp_Restore                          # 1      
DiscOp_StepIn                           # 1        ; floppy only
DiscOp_StepOut                          # 1        ; floppy only
DiscOp_CachedReadSecs                   # 1      
DiscOp_Reserved0                        # 1      
DiscOp_Reserved1                        # 1      
DiscOp_Reserved2                        # 1      
DiscOp_Reserved3                        # 1      
DiscOp_Reserved4                        # 1      
DiscOp_Specify                          # 1        ; fixed disc only
DiscOp_Op_Mask                          * &F
DiscOp_Op_AltDefectList_Flag            * 1:SHL:4
DiscOp_Op_ScatterList_Flag              * 1:SHL:5
DiscOp_Op_IgnoreEscape_Flag             * 1:SHL:6
DiscOp_Op_IgnoreTimeout_Flag            * 1:SHL:7
DiscOp_Op_Atomic_Flag                   * 3:SHL:6  ; ignore both escape and timeout
DiscOp_Op_BackgroundOp_Flag             * 1:SHL:8  ; internal use only

;
; FileCore_MiscOp reason codes
                                        ^ 0
MiscOp_Mount                            # 1
MiscOp_PollChanged                      # 1
MiscOp_PollChanged_NotChanged_Flag      * 1:SHL:0
MiscOp_PollChanged_MaybeChanged_Flag    * 1:SHL:1
MiscOp_PollChanged_Changed_Flag         * 1:SHL:2
MiscOp_PollChanged_Empty_Flag           * 1:SHL:3
MiscOp_PollChanged_Ready_Flag           * 1:SHL:4
MiscOp_PollChanged_40Track_Flag         * 1:SHL:5
MiscOp_PollChanged_EmptyWorks_Flag      * 1:SHL:6
MiscOp_PollChanged_ChangedWorks_Flag    * 1:SHL:7
MiscOp_PollChanged_HiDensity_Flag       * 1:SHL:8
MiscOp_PollChanged_DensityWorks_Flag    * 1:SHL:9
MiscOp_PollChanged_ReadyWorks_Flag      * 1:SHL:10
MiscOp_LockDrive                        # 1
MiscOp_UnlockDrive                      # 1
MiscOp_PollPeriod                       # 1
MiscOp_Eject                            # 1
MiscOp_ReadInfo                         # 1
MiscOp_DriveStatus                      # 1     ; for checking status of a drive
MiscOp_DriveLocked_Flag                 * 1:SHL:0
MiscOp_DriveHidden_Flag                 * 1:SHL:1
MiscOp_PostMount                        # 1
MiscOp_FirstUnknown                     # 0

        OPT     OldOpt
        END
@


4.6
log
@Extend upper permissable file size to 4GB-1
Tested for ~200,000 cycles in various configurations with FSBash, with no integrity problems, nor bad maps. However, background transfers (currently only used by ADFS) is still being endurance tested, hence is currently disabled.
Users should note that they can create big files without needing to reformat their drives, however if reverting to an older copy of FileCore the files must not be opened, loaded, or deleted (it's fine to view the directory, just don't expect old FileCore to know how to parse such long fragment runs).
Current versions of DiscKnight (1.49) do not understand long fragment runs.

FSBash
------
* Reviewed and expunged various signed comparisons of file pointers in the existing tests
* Added new tests for big files which attempt to aggrevate all the usual problems passing over and up to important boundaries
* Makefile recreated from fragments
* Some compiler warning squashed

Docs
----
* Some notes added for big file support

Misc
----
Commands: swapped to using Command macro
HelpText: labels renamed to help Command macro
GenSWIs: text table name for SectorDiscOp ammended to match exported header and corresponding secondary module names (ADFS_SectorDiscOp et al). The usefulness of calling the base instantiation of FileCore_SectorDiscOp is minimal, especially from BASIC.
Messages: message for attempting to check an old map disc made less terse
hdr/FileCore: typo

Version 3.56. Tagged as 'FileCore-3_56'
@
text
@d197 1
a197 1
SzDiscRegSigSpace                       # 0
@


4.5
log
@  Miscellaneous improvements
Detail:
  * Added the ability for a filing system to specify to FileCore that floppy
    discs should be mounted like hard discs, to complement the existing flag
    that specifies the opposite. SDFS requires this. Ideally SCSIFS should
    start using this as well, to encapsulate boot block handling within
    FileCore.
  * Added header definitions so the FileCore and the filing systems can
    negotiate the use of a new MiscOp entry, needed as part of partitioning
    support, especially important for filing systems that use the hardware-
    specific section of the boot block, like ADFS. At present, FileCore
    doesn't do anything different (it still doesn't support partitions) but
    this enables filing systems to be modified in preparation.
  * Removed the only place where FileCore paid any attention to the
    EmptyWorks flag returned by MiscOp 1 - an obscure and not very useful
    edge case not used by any current filing systems.
  * Added 650 lines of documentation for the MiscOp SWI and low-level entry
    to the Doc directory, giving the information you need in order to
    implement a FileCore filing system.
  * Added missing header file definitions for the low-level background DiscOp
    reason code and the hot-plug drive removed flag to MiscOp 7.
  * Removed some RISC OS 2 legacy code whereby FileCore maintained its idea
    of the internal disc address of the CSD @@, PSD \, Library % and URD & for
    each filing system. Since RISC OS 3.00, FileSwitch handles these
    internally and passes canonicalised paths to FileCore, so FileCore's disc
    addresses for these directories remained unset. This allows some
    considerable simplification of FileCore's path parser in particular, but
    also affects other code like that which decides how to expire disc
    records. Also note that FileCore has been unable to generate certain
    errors (like "Can't delete current directory") since RISC OS 3.00 for the
    same reason.
  * Changed loading of the map for FileCore-format discs so that the map is
    loaded into the dynamic area during the Service_IdentifyDisc handler in
    one big DiscOp rather than loading it twice, sector-by-sector, via one
    big sector cache. For one thing, the sector cache is implemented
    inefficiently - O(n^2) - and for another thing, single-sector DiscOps are
    relatively inefficient on many filing systems, especially on SD cards.
    Some example speed-ups measured for mounting discs are:
      SCSIFS,   1GB drive: was 0.62 sec, now 0.40 sec (1.55 x speedup)
      SCSIFS, 256GB drive: was 1.44 sec, now 0.52 sec (2.77 x speedup)
      SDFS,     2GB drive: was 1.25 sec, now 0.14 sec (8.93 x speedup)
Admin:
  Tested on a beagleboard, with SCSIFS and SDFS.

Version 3.50. Tagged as 'FileCore-3_50'
@
text
@d71 1
a71 1
CreateFlag_FloppyDiscsMountLikeFixed    * 1:SHL:11 ; Floppy driver only reads the boot block, FileCore validates if and sets up the disc record
d137 1
a137 1
; FileCore_DiscOp and FileCore_SectorOp legacy disc addresses
@


4.4
log
@Revise exports in "hdr.FileCore".
Now, for each SWI call there is a definition of any pertinent structures it asks for and definitions of any bitfields within those flags. This avoids the need for clients to endlessly redefine these locally (in practice it looks like sections of FileCore were simply copy and pasted into clients RAMFS/SCSIFS/ADFS). Delete private definitions.
This binary was carefully checked to be identical since so many locations were changed.
Then, the following additional changes:
* InitDieSvc line 74, the floppy config is extracted using a mask and shift rather than reaching up the stack
* Identify lin 1254, the superfluous instruction marked as such deleted
* FileCore15 line 762 recoded the check for background op to not need the bit number defined any more
* FileCore00 moved the label 'anull' to be word aligned guaranteed
The duff pointer marker ('nowt' = &40000000) is no longer used to mark territory translation tables as invalid as that address is now quite reasonable. -1 is used instead.

Version 3.45. Tagged as 'FileCore-3_45'
@
text
@d71 2
d134 1
d225 1
d250 2
@


4.3
log
@Delete s.AsmHdr, s.DevVersion, Version, s.ModHand
Delete Doc.!ReadMe, update Doc.!Implement
Collapse dead switches.
s.MyMacros:
 Remove 'nop' macro, use NOP.
s.Defns:
 Some definitions taken from global headers.
s.Commands:
 Indentation and function calling parameter comments reviewed.

Still produces the same binary as 3.40.
@
text
@d51 2
a52 2
        AddSWI	SectorDiscOp
        AddSWI	FreeSpace64
d56 191
a246 86
;Layout of create FileCore incarnation descriptor block

                ^ 0
Create_Flags    # 3
WinnieNeedsFiq  * 1 :SHL: 0
FloppyNeedsFiq  * 1 :SHL: 1
BackGroundTransfer * 1 :SHL: 2 ; background transfer supported (seems to be deprecated but now defined to avoid embarassment)
NoBigBuf        * 1 :SHL: 3 ;set by RAM filing system, small data move buffer size
WinnieMounts    * 1 :SHL: 4 ;Winnies mount like floppies
WinniePollChanges * 1 :SHL: 5 ; Winnies support poll change calls and lock calls
FloppyEjects    * 1 :SHL: 6 ; Floppies support MiscOp_Eject
WinnieEjects    * 1 :SHL: 7 ; Winnies support MiscOp_Eject
DriveStatusWorks * 1 :SHL: 8 ; Drive status supported
BigDiscSupport  * 1 :SHL: 9
NewErrorSupport * 1 :SHL: 10
Create_Id       # 1
Create_Title    # 4
Create_BootText # 4
Create_LowLevel # 4
Create_Misc     # 4

Create_Size     # 0

; reason codes for DiscOp call
Param4Op                * 0
VerifyOp                * 0
ReadSecsOp              * 1
WriteSecsOp             * 2
Param3Op                * 3
ReadTrkOp               * 3
WriteTrkOp              * 4
Param2Op                * 5
FirstHeadMoveOp         * 5
SeekOp                  * 5
Param1Op                * 6
RestoreOp               * 6
StepInOp                * 7     ;floppy only
StepOutOp               * 8     ;floppy only
CachedReadSecsOp        * 9
SpecifyOp               * 15    ;winnie only

; reason codes for misc call

                        ^ 0
Misc_Mount              # 1
Misc_PollChanged        # 1
Misc_LockDrive          # 1
Misc_UnlockDrive        # 1
Misc_PollPeriod         # 1
Misc_Eject              # 1
Misc_ReadInfo           # 1
Misc_DriveStatus        # 1     ; for checking status of a drive

Misc_Unused             # 0

; Poll changed status

Drv_NotChanged          * 1 :SHL: 0
Drv_MaybeChanged        * 1 :SHL: 1
Drv_Changed             * 1 :SHL: 2
Drv_Empty               * 1 :SHL: 3
Drv_Ready               * 1 :SHL: 4
Drv_40Track             * 1 :SHL: 5
Drv_EmptyWorks          * 1 :SHL: 6
Drv_ChangedWorks        * 1 :SHL: 7
Drv_HiDensity           * 1 :SHL: 8
Drv_DensityWorks        * 1 :SHL: 9
Drv_ReadyWorks          * 1 :SHL: 10

NoDirBit                * 1 :SHL: 6     ; If set *configure NoDir

; DiscFormat and LayoutStructure parameters
Format_L                * 0
Format_D                * 1
Format_E                * 2
Format_F                * 3
Format_G                * 4
Format_Floppy           * 1 :SHL: 7

; drive status bits

DriveReserved           * 1 :SHL: 0

; features bits

Feature_NewErrors       * 1 :SHL: 0
@


4.2
log
@* Various 32-bit compatibility fixes.
* Can use HAL for FIQ+timer manipulations.
* FileCore_DiscOp64 added (as user API - currently just converted to the
  standard byte or sector DiscOp call to the underlying module). See
  Doc.32bitAPIs for full details.
* New error-passing scheme to modules added (for full 32-bit addressing).
* FileCore_Features added (indicates new error scheme).
* OS_FSControl 49 (read 32-bit free space) now reports sensible clamped
  values for large discs, rather than values modulo 2^32.
* Accessing the end of files near 2GB in size could cause lock-ups in
  background transfers.
* F(+) and G(+) disc formats adjusted to have a little more skew to
  help the rather poor Iyonix floppy controller.

Version 3.31. Tagged as 'FileCore-3_31'
@
text
@d80 1
a80 1
Param4Op               * 0
d84 1
a84 1
Param3Op               * 3
d87 2
a88 2
Param2Op               * 5
FirstHeadMoveOp        * 5
d90 1
a90 1
Param1Op               * 6
@


4.1
log
@Initial revision
@
text
@d53 2
d70 1
d138 5
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
