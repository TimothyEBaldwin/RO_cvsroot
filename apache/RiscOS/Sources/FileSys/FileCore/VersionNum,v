head	4.61;
access;
symbols
	FileCore-3_75:4.61
	FileCore-3_74:4.60
	FileCore-3_73:4.59
	FileCore-3_72:4.58
	FileCore-3_71:4.57
	FileCore-3_70:4.56
	FileCore-3_69:4.55
	FileCore-3_68:4.54
	FileCore-3_67:4.53
	FileCore-3_66:4.52
	FileCore-3_65:4.51
	FileCore-3_64:4.50
	FileCore-3_63:4.49
	FileCore-3_62:4.48
	FileCore-3_61:4.47
	FileCore-3_60:4.46
	FileCore-3_59:4.45
	FileCore-3_58:4.44
	FileCore-3_57:4.43
	FileCore-3_56:4.42
	FileCore-3_55:4.41
	FileCore-3_54:4.40
	FileCore-3_53:4.38
	FileCore-3_52:4.37
	FileCore-3_51:4.36
	FileCore-3_50:4.35
	FileCore-3_49:4.34
	FileCore-3_48:4.33
	FileCore-3_47:4.32
	FileCore-3_46:4.31
	FileCore-3_45:4.30
	FileCore-3_44:4.29
	FileCore-3_43:4.28
	FileCore-3_42:4.27
	FileCore-3_41:4.26
	FileCore-3_40:4.25
	FileCore-3_39:4.24
	FileCore-3_38:4.23
	FileCore-3_37:4.22
	FileCore-3_36:4.21
	FileCore-3_35:4.20
	FileCore-3_34:4.19
	FileCore-3_33:4.17
	RO_5_07:4.16
	FileCore-3_32:4.16
	FileCore-3_31:4.15
	FileCore-3_30:4.14
	FileCore-3_29:4.13
	FileCore-3_28:4.12
	FileCore-3_25-4_9_2_2:4.9.2.2
	FileCore-3_27:4.11
	FileCore-3_26:4.10
	FileCore-3_22-4_6_2_1:4.6.2.1
	bavison_FileCore-3_22_dev_bp:4.6
	bavison_FileCore-3_22:4.6.0.2
	FileCore-3_25-4_9_2_1:4.9.2.1
	HAL:4.9.0.2
	FileCore-3_25:4.9
	FileCore-3_24:4.8
	FileCore-3_23:4.7
	dellis_autobuild_BaseSW:4.6
	FileCore-3_22:4.6
	FileCore-3_21:4.5
	sbrodie_sedwards_16Mar2000:4.4
	dcotton_autobuild_BaseSW:4.14
	FileCore-3_01:4.4
	FileCore-3_00:4.3
	FileCore-2_99:4.2;
locks; strict;
comment	@# @;


4.61
date	2017.07.06.14.36.47;	author rsprowson;	state Exp;
branches;
next	4.60;
commitid	glaSUStjQCVZ3bYz;

4.60
date	2017.06.16.11.00.32;	author rsprowson;	state Exp;
branches;
next	4.59;
commitid	izYr8Uu33U8FvAVz;

4.59
date	2017.04.29.08.49.38;	author rool;	state Exp;
branches;
next	4.58;
commitid	Ze6vG68B8T6qkpPz;

4.58
date	2017.04.09.22.17.09;	author rsprowson;	state Exp;
branches;
next	4.57;
commitid	0hBpFTzNopSirUMz;

4.57
date	2016.12.16.20.35.52;	author rsprowson;	state Exp;
branches;
next	4.56;
commitid	oFQm0vPIJ4zKxfyz;

4.56
date	2016.07.24.10.55.10;	author rsprowson;	state Exp;
branches;
next	4.55;
commitid	CCTrYcRnnZTvZyfz;

4.55
date	2016.05.08.16.55.15;	author jlee;	state Exp;
branches;
next	4.54;
commitid	7NNp0vqkWUkusH5z;

4.54
date	2015.10.28.21.13.02;	author rsprowson;	state Exp;
branches;
next	4.53;
commitid	qv1t5E2AqM2y5VGy;

4.53
date	2015.10.02.00.25.04;	author jlee;	state Exp;
branches;
next	4.52;
commitid	aP9CFLSrSFje1tDy;

4.52
date	2015.03.28.20.30.43;	author jlee;	state Exp;
branches;
next	4.51;
commitid	zES7Bir23rCvJpfy;

4.51
date	2015.02.02.15.19.42;	author bavison;	state Exp;
branches;
next	4.50;
commitid	GC6RWzDQ9CNqKr8y;

4.50
date	2014.07.14.10.17.05;	author bavison;	state Exp;
branches;
next	4.49;
commitid	F4g0Km5lRubbBkIx;

4.49
date	2013.07.20.14.09.53;	author rsprowson;	state Exp;
branches;
next	4.48;
commitid	qZtNVkGjzh5uqdYw;

4.48
date	2013.07.18.21.04.12;	author rsprowson;	state Exp;
branches;
next	4.47;
commitid	Em91CJgLrlPBMZXw;

4.47
date	2013.06.19.08.35.32;	author rsprowson;	state Exp;
branches;
next	4.46;
commitid	8jRrRJAECsDyzcUw;

4.46
date	2013.05.04.07.07.10;	author rsprowson;	state Exp;
branches;
next	4.45;
commitid	421z4e9jUNIVyhOw;

4.45
date	2013.04.06.18.35.37;	author rsprowson;	state Exp;
branches;
next	4.44;
commitid	26nZM35RwOvUgKKw;

4.44
date	2013.04.01.16.40.45;	author rsprowson;	state Exp;
branches;
next	4.43;
commitid	tkUggU6sItgtN5Kw;

4.43
date	2013.03.25.20.30.58;	author rsprowson;	state Exp;
branches;
next	4.42;
commitid	vCGDXb1zgPQnidJw;

4.42
date	2013.02.24.21.08.48;	author rsprowson;	state Exp;
branches;
next	4.41;
commitid	rgJG8ZFRF8o9ruFw;

4.41
date	2013.02.21.16.52.51;	author rsprowson;	state Exp;
branches;
next	4.40;
commitid	CCuV2tngKttj75Fw;

4.40
date	2012.11.12.00.15.35;	author bavison;	state Exp;
branches;
next	4.39;
commitid	A6mFJQE23h9vQ0sw;

4.39
date	2012.10.28.08.52.26;	author rsprowson;	state Exp;
branches;
next	4.38;
commitid	6n5fY77YU7JEb8qw;

4.38
date	2012.10.21.16.45.28;	author rsprowson;	state Exp;
branches;
next	4.37;
commitid	FoJ3R0fb1IiW1hpw;

4.37
date	2012.07.09.00.24.13;	author jlee;	state Exp;
branches;
next	4.36;
commitid	AAUAG5JA6TmzWObw;

4.36
date	2012.05.13.12.19.04;	author bavison;	state Exp;
branches;
next	4.35;
commitid	GnrEUqq2l9npJy4w;

4.35
date	2012.04.14.00.43.08;	author bavison;	state Exp;
branches;
next	4.34;
commitid	xkSKw5i9HVYqOL0w;

4.34
date	2012.03.19.01.02.10;	author bavison;	state Exp;
branches;
next	4.33;
commitid	kiHA1sAUGttNKqXv;

4.33
date	2012.01.07.16.37.06;	author rsprowson;	state Exp;
branches;
next	4.32;
commitid	YI8ftYE07fC1fgOv;

4.32
date	2011.11.25.08.50.12;	author rsprowson;	state Exp;
branches;
next	4.31;
commitid	Wvsb4iMJaWIw2HIv;

4.31
date	2011.11.25.08.25.45;	author rsprowson;	state Exp;
branches;
next	4.30;
commitid	IoNdwgrOKH29UGIv;

4.30
date	2011.10.14.07.23.36;	author rsprowson;	state Exp;
branches;
next	4.29;
commitid	D2Id4aPp4zmuUhDv;

4.29
date	2011.10.12.20.21.47;	author rsprowson;	state Exp;
branches;
next	4.28;
commitid	BoinxgqWMKLth6Dv;

4.28
date	2011.10.02.20.28.09;	author rsprowson;	state Exp;
branches;
next	4.27;
commitid	uhh7MIROZ5lBDOBv;

4.27
date	2011.10.02.20.25.30;	author rsprowson;	state Exp;
branches;
next	4.26;
commitid	A9Zxco9ydo9FCOBv;

4.26
date	2011.09.13.19.23.26;	author rsprowson;	state Exp;
branches;
next	4.25;
commitid	ihD4ZDAv3emgTmzv;

4.25
date	2011.09.12.19.45.07;	author bavison;	state Exp;
branches;
next	4.24;
commitid	hf8KRMduNnpH2fzv;

4.24
date	2011.08.04.20.43.05;	author jlee;	state Exp;
branches;
next	4.23;
commitid	zcIknvqdwARiCeuv;

4.23
date	2011.03.14.23.31.27;	author srevill;	state Exp;
branches;
next	4.22;
commitid	gTwa18MLJQi39Sbv;

4.22
date	2011.01.25.23.56.06;	author jlee;	state Exp;
branches;
next	4.21;

4.21
date	2009.11.14.21.18.47;	author jlee;	state Exp;
branches;
next	4.20;

4.20
date	2009.11.06.23.40.43;	author jlee;	state Exp;
branches;
next	4.19;

4.19
date	2009.06.15.23.25.33;	author bavison;	state Exp;
branches;
next	4.18;

4.18
date	2009.06.11.20.59.29;	author bavison;	state Exp;
branches;
next	4.17;

4.17
date	2009.05.17.01.48.28;	author bavison;	state Exp;
branches;
next	4.16;

4.16
date	2003.08.08.09.42.48;	author kbracey;	state Exp;
branches;
next	4.15;

4.15
date	2003.04.03.18.33.26;	author kbracey;	state Exp;
branches;
next	4.14;

4.14
date	2001.05.14.16.26.35;	author kbracey;	state Exp;
branches;
next	4.13;

4.13
date	2001.05.14.14.27.07;	author sbrodie;	state Exp;
branches;
next	4.12;

4.12
date	2001.05.10.15.10.26;	author kbracey;	state Exp;
branches;
next	4.11;

4.11
date	2001.03.01.13.38.54;	author sforrest;	state Exp;
branches;
next	4.10;

4.10
date	2000.12.07.17.25.27;	author bavison;	state Exp;
branches;
next	4.9;

4.9
date	2000.10.31.17.05.06;	author sbrodie;	state Exp;
branches
	4.9.2.1;
next	4.8;

4.8
date	2000.10.31.09.32.30;	author sbrodie;	state Exp;
branches;
next	4.7;

4.7
date	2000.10.30.13.26.34;	author kbracey;	state Exp;
branches;
next	4.6;

4.6
date	2000.05.10.09.53.20;	author sforrest;	state Exp;
branches
	4.6.2.1;
next	4.5;

4.5
date	2000.05.09.11.36.42;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	99.08.05.10.32.11;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	98.10.19.15.51.51;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	98.09.21.12.07.00;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	98.09.21.11.42.41;	author kbracey;	state Exp;
branches;
next	;

4.9.2.1
date	2000.11.30.17.04.35;	author kbracey;	state Exp;
branches;
next	4.9.2.2;

4.9.2.2
date	2001.05.10.15.04.35;	author kbracey;	state Exp;
branches;
next	;

4.6.2.1
date	2000.12.07.17.11.13;	author bavison;	state Exp;
branches;
next	;


desc
@@


4.61
log
@Increase upper range of idlen to 21 bits
When 'BigMap' support was added drive sizes were such that (see table and discussion in Doc/BigDisc/BigDiscs) an upper maximum of 19 bits for idlen was appropriate. Now that drives of 2^29 sectors are readily available (the limit of 'BigDisc' support) the idlen limit of 19 has meant the minimum object size has grown too. This change uses the remaining 2 indirect disc address bits to get a factor x4 reduction in minimum object size, at the expense of a 4x larger map.

Defns.s: Parameterise idlen for big and small maps. Small's limit remains 15, big's limit raised from 19 to 21.
Identify.s: When mounting, use the parameterised idlen upper limits to decide whether it's a valid disc or not.
FileCore32.s: Adjust the BIC masks to knock out the extra 2 bits when forming the hash of the object id. Fix long standing bug updating the wrong entry in the hash table (due to LSL #2 giving 5x the entry index, rather than 3x).
FileCore15.s: Take care not to shift b20 of idlen into C as a side effect of a flags changing opcode. An audit of FileCore showed this to be the only site where the subsequent condition code(s) depended on C.
Tools/basic/DispMap: Updated to support BigMaps at all, previously it only worked with NewMap discs.

Tested with an assortment of drives with FSBash for 300k cycles of scrambling for idlen = 17, 19, 20 & 21.

Version 3.75. Tagged as 'FileCore-3_75'
@
text
@/* (3.75)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        3.75
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                06 Jul 2017

#define Module_MajorVersion             "3.75"
#define Module_Version                  375
#define Module_MinorVersion             ""
#define Module_Date                     "06 Jul 2017"

#define Module_ApplicationDate          "06-Jul-17"

#define Module_ComponentName            "FileCore"
#define Module_ComponentPath            "castle/RiscOS/Sources/FileSys/FileCore"

#define Module_FullVersion              "3.75"
#define Module_HelpVersion              "3.75 (06 Jul 2017)"
#define Module_LibraryVersionInfo       "3:75"
@


4.60
log
@Fixes in BigSectors option
Previous testing with RAMFS was limited by the size of RAM disc, and hence complexity of layout, meaning some cases with BigSectors were missed.
FileCore20.s: During mount, when loading the defect list from the boot block at &C00, take care to round down the source sector address to account for it only being aligned up to 1k sectors (but not for 2k and 4k).
FileCore25.s: When loading the head of a BigDir (to find out its actual size) and finding it to be > 2k, skip loading the bit from 2k-4k, since that was already loaded when the head was read in, and reading it a second time offset by 2k fails the head/tail check.
FileCore31.s: When building a table to decide which zones to compact, use FindBuffer() to get some temporary store if too large to fit into ScratchSpace.
Identify.s: Comment updated.
BigDirCode.s: (Unrelated) Fix for bad error pointer being passed back, due to R0 being restored on encountering an error during directory rename.

FSBashed for 300k cycles on Titanium with an assortment of manufacturer drives, capacities, and sector sizes.

Version 3.74. Tagged as 'FileCore-3_74'
@
text
@d1 1
a1 1
/* (3.74)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.74
d9 1
a9 1
#define Module_Date_CMHG                16 Jun 2017
d11 2
a12 2
#define Module_MajorVersion             "3.74"
#define Module_Version                  374
d14 1
a14 1
#define Module_Date                     "16 Jun 2017"
d16 1
a16 1
#define Module_ApplicationDate          "16-Jun-17"
d21 3
a23 3
#define Module_FullVersion              "3.74"
#define Module_HelpVersion              "3.74 (16 Jun 2017)"
#define Module_LibraryVersionInfo       "3:74"
@


4.59
log
@Fix to sort dirs correctly when no territory is loaded
Detail:
  FileCore is defined as a case insensitive FS (ie. MyFile can't coexist in the same directory as mYfILE).
  Prior to a territory being selected the BigDir binary chop sort would (via the Internat_UpperCase macro) abandon a directory search once it mismatched, and so would never find !Territory in order to select the territory in the first place.
  Have Internat_UpperCase use ASCII uppercase until that time.
Admin:
  Based on a submission from Colin Granville, with modifications.

Version 3.73. Tagged as 'FileCore-3_73'
@
text
@d1 1
a1 1
/* (3.73)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.73
d9 1
a9 1
#define Module_Date_CMHG                29 Apr 2017
d11 2
a12 2
#define Module_MajorVersion             "3.73"
#define Module_Version                  373
d14 1
a14 1
#define Module_Date                     "29 Apr 2017"
d16 1
a16 1
#define Module_ApplicationDate          "29-Apr-17"
d21 3
a23 3
#define Module_FullVersion              "3.73"
#define Module_HelpVersion              "3.73 (29 Apr 2017)"
#define Module_LibraryVersionInfo       "3:73"
@


4.58
log
@[415] Report dir full when hitting dir size limit
FileCore would allow objects to be added to BigDir extensible directories until eventually failing and leaving an unopenable broken directory behind.
In fact, the on disc directory was sound, but after updating the parent in GrowBigDir it would reload the child into the dir cache with FindDir, FindDir called SanityCheckBigDirHeader which was rejecting BigDir's of exactly 4MB that was created moments earlier.
Now, during the initial attempt grow, a check is made for exceeding BigDirMaxSize before trying to enlarge the dynamic area (while it would be possible to translate the error from maxing out the dynamic area, there could be situations where there genuinely isn't enough memory to enlarge the area) and a more polite "Dir full" error returned.
Tested with an initially empty drive (so the dynamic area must grow) and with one that previously created a maximal directory (dynamic area already large enough).

Also tightened up a couple of places loading byte wide variables using LDR, relying on the modulo 31 properties of LSR/LSL, when we can simply load the value as a byte for the same cost.

Version 3.72. Tagged as 'FileCore-3_72'
@
text
@d1 1
a1 1
/* (3.72)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.72
d9 1
a9 1
#define Module_Date_CMHG                09 Apr 2017
d11 2
a12 2
#define Module_MajorVersion             "3.72"
#define Module_Version                  372
d14 1
a14 1
#define Module_Date                     "09 Apr 2017"
d16 1
a16 1
#define Module_ApplicationDate          "09-Apr-17"
d21 3
a23 3
#define Module_FullVersion              "3.72"
#define Module_HelpVersion              "3.72 (09 Apr 2017)"
#define Module_LibraryVersionInfo       "3:72"
@


4.57
log
@Fix for nonsense sector offsets (and abort) with *Map of old map disc
For new map discs NextFs returns the address of the map zone in R10, which was being used to lookup entries in the disc record. However, for old map discs R10 is a multiple-of-3 offset into the free space map. This was aborting on the 2nd call due to an unaligned LDR at line 3205.
Even on platforms that permit unaligned loads the printed results were wrong because the disc address for an old map disc is in bytes but the value printed out was shifted up by Log2SectorSize. A DD floppy disc could have free space fragments starting at 7M - nonsense.
Fixed by checking the DiscFlags and only reading from the map zone/sector shifting for new map.
Tested with an ADFS-L floppy disc.

Version 3.71. Tagged as 'FileCore-3_71'
@
text
@d1 1
a1 1
/* (3.71)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.71
d9 1
a9 1
#define Module_Date_CMHG                16 Dec 2016
d11 2
a12 2
#define Module_MajorVersion             "3.71"
#define Module_Version                  371
d14 1
a14 1
#define Module_Date                     "16 Dec 2016"
d16 1
a16 1
#define Module_ApplicationDate          "16-Dec-16"
d21 3
a23 3
#define Module_FullVersion              "3.71"
#define Module_HelpVersion              "3.71 (16 Dec 2016)"
#define Module_LibraryVersionInfo       "3:71"
@


4.56
log
@Build fix
Module_Title->Module_TitleStr from Kernel-5_54.

Version 3.70. Tagged as 'FileCore-3_70'
@
text
@d1 1
a1 1
/* (3.70)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.70
d9 1
a9 1
#define Module_Date_CMHG                24 Jul 2016
d11 2
a12 2
#define Module_MajorVersion             "3.70"
#define Module_Version                  370
d14 1
a14 1
#define Module_Date                     "24 Jul 2016"
d16 1
a16 1
#define Module_ApplicationDate          "24-Jul-16"
d21 3
a23 3
#define Module_FullVersion              "3.70"
#define Module_HelpVersion              "3.70 (24 Jul 2016)"
#define Module_LibraryVersionInfo       "3:70"
@


4.55
log
@Avoid unnecessary remainder calculations
Detail:
  s/BigDirCode, s/Identify - Avoid unnecessary remainder calculation in DivRem macro
Admin:
  Tested on Cortex-A15


Version 3.69. Tagged as 'FileCore-3_69'
@
text
@d1 1
a1 1
/* (3.69)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.69
d9 1
a9 1
#define Module_Date_CMHG                08 May 2016
d11 2
a12 2
#define Module_MajorVersion             "3.69"
#define Module_Version                  369
d14 1
a14 1
#define Module_Date                     "08 May 2016"
d16 1
a16 1
#define Module_ApplicationDate          "08-May-16"
d21 3
a23 3
#define Module_FullVersion              "3.69"
#define Module_HelpVersion              "3.69 (08 May 2016)"
#define Module_LibraryVersionInfo       "3:69"
@


4.54
log
@Refactor unaligned STM in old style error return
Don't rely on an STM with either of the bottom 2 bits set to store on a word aligned boundary any more.
Fixes abort when an old style error is reported to FileCore on ARMv7.
Spotted by Jon Abbott, ref https://www.riscosopen.org/forum/forums/4/topics/3682

Version 3.68. Tagged as 'FileCore-3_68'
@
text
@d1 1
a1 1
/* (3.68)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.68
d9 1
a9 1
#define Module_Date_CMHG                28 Oct 2015
d11 2
a12 2
#define Module_MajorVersion             "3.68"
#define Module_Version                  368
d14 1
a14 1
#define Module_Date                     "28 Oct 2015"
d16 1
a16 1
#define Module_ApplicationDate          "28-Oct-15"
d21 3
a23 3
#define Module_FullVersion              "3.68"
#define Module_HelpVersion              "3.68 (28 Oct 2015)"
#define Module_LibraryVersionInfo       "3:68"
@


4.53
log
@Try harder when looking for buffer space
Detail:
  s/FileCore30 - Update FindBuffer so that if it failed to find enough spare memory for the buffer (and the RMA is allowed) it will try and grow the RMA dynamic area (current code just aims to use the spare heap space without expanding the DA).
Admin:
  Tested on Raspberry Pi
  Fixes "No room for buffer" error being generated in some situations, following the removal of Wimp_ClaimFreeMemory/free pool locking


Version 3.67. Tagged as 'FileCore-3_67'
@
text
@d1 1
a1 1
/* (3.67)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.67
d9 1
a9 1
#define Module_Date_CMHG                02 Oct 2015
d11 2
a12 2
#define Module_MajorVersion             "3.67"
#define Module_Version                  367
d14 1
a14 1
#define Module_Date                     "02 Oct 2015"
d16 1
a16 1
#define Module_ApplicationDate          "02-Oct-15"
d21 3
a23 3
#define Module_FullVersion              "3.67"
#define Module_HelpVersion              "3.67 (02 Oct 2015)"
#define Module_LibraryVersionInfo       "3:67"
@


4.52
log
@Fix stack imbalance in big directory error handling
Detail:
  s/BigDirCode - Fix stack imbalance in GrowBigDir when DefaultMoveData returns an error
Admin:
  Tested on Raspberry Pi


Version 3.66. Tagged as 'FileCore-3_66'
@
text
@d1 1
a1 1
/* (3.66)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.66
d9 1
a9 1
#define Module_Date_CMHG                28 Mar 2015
d11 2
a12 2
#define Module_MajorVersion             "3.66"
#define Module_Version                  366
d14 1
a14 1
#define Module_Date                     "28 Mar 2015"
d16 1
a16 1
#define Module_ApplicationDate          "28-Mar-15"
d21 3
a23 3
#define Module_FullVersion              "3.66"
#define Module_HelpVersion              "3.66 (28 Mar 2015)"
#define Module_LibraryVersionInfo       "3:66"
@


4.51
log
@  Fix abort affecting Raspberry Pi B+ and Raspberry Pi 2
Detail:
  These two boards don't have functional card detect lines on their microSD
  slots, so follow a different code path from most other RISC OS platforms.
  There was an issue when you accessed an object (other than the root
  directory) for which it (if it was a directory) or any of its parent
  directories were not in the directory cache, and it is specified by
  reference to disc name rather than drive number, and where the disc is not
  currently in a drive (or it's in a drive but hasn't been mounted since it
  was inserted). The additional PollChange inserted by DiscOp with a
  specified boot block (as used to identify the disc format when scanning
  drives to see if the disc in each drive has changed) which was intended to
  support some ADFS floppy drives had the side-effect with SDFS-type
  card-detect-less change detection (which has to wait until at least one
  DiscOp has been issued before it can tell if the card has changed) that
  FileCore's disc and drive records became unlinked part-way through the
  FullLookup routine. In later subroutines, this meant we ended up
  misidentifying the controller to which the disc was attached, and because
  SDFS didn't (until recently) have any hard discs, the hard disc controller
  was uninitialised, resulting in a data abort. This is fixed by making
  WhatDisc check for whether the disc record it's about to return has been
  delinked from the drive record, and repeat the process if so. Also removed
  some dead code (an alternate entry to WhatDiscCommon) while I was at it.
Admin:
  Tested on Raspberry Pi B+ and 2.

Version 3.65. Tagged as 'FileCore-3_65'
@
text
@d1 1
a1 1
/* (3.65)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.65
d9 1
a9 1
#define Module_Date_CMHG                02 Feb 2015
d11 2
a12 2
#define Module_MajorVersion             "3.65"
#define Module_Version                  365
d14 1
a14 1
#define Module_Date                     "02 Feb 2015"
d16 1
a16 1
#define Module_ApplicationDate          "02-Feb-15"
d21 3
a23 3
#define Module_FullVersion              "3.65"
#define Module_HelpVersion              "3.65 (02 Feb 2015)"
#define Module_LibraryVersionInfo       "3:65"
@


4.50
log
@  Support the Raspberry Pi model B+
Detail:
  There's some questionable code in DoSwi[Sector]DiscOp[64] where it calls
  PollChange in an apparent attempt to support the ADFS floppy state machine.
  In the no-card-detect SDFS case, we can detect from a card's state whether
  it has been changed or not; to be able to signal this to software that
  cares about such things, we increment the sequence number late in the
  process. The downside is that when the card *has* changed, two consecutive
  PollChanged calls will differ from the steady state: the first because
  MaybeChanged is signalled, the second because the sequence number
  mismatches. DetermineDiscType didn't handle this gracefully, ending up
  pointing off the internal array of disc records, resulting in a string of
  gibberish when canonicalising a drive-based file spec. Fixed by having
  DetermineDiscType double-check that the drive is not empty.

  Fixed UpCall_MediaNotPresent and UpCall_MediaNotKnown to actually use the
  media type string from MiscOp 4. For example, you'll now see "Please insert
  card 'RISCOSpi'" being generated by the Wimp under SDFS.

  Improved documentation of MiscOps 4 and 5.

Admin:
  Already in use in RC12a.

Version 3.64. Tagged as 'FileCore-3_64'
@
text
@d1 1
a1 1
/* (3.64)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.64
d9 1
a9 1
#define Module_Date_CMHG                14 Jul 2014
d11 2
a12 2
#define Module_MajorVersion             "3.64"
#define Module_Version                  364
d14 1
a14 1
#define Module_Date                     "14 Jul 2014"
d16 1
a16 1
#define Module_ApplicationDate          "14-Jul-14"
d21 3
a23 3
#define Module_FullVersion              "3.64"
#define Module_HelpVersion              "3.64 (14 Jul 2014)"
#define Module_LibraryVersionInfo       "3:64"
@


4.49
log
@Add support for 2k and 4k sector sizes
s/Commands:
Make sure the defect list (via *DEFECT) does a read/modify/write of the boot block on 2k and 4k drives.
The checksum generation code was largely common and although commented to be called as though it was common wasn't actually due to a cut and paste mistake on label 37. Deleted common/uncalled code.
s/DebugOpts; s/FileCore15:
Peripheral changes.
s/FileCore20:
Read in the defect list via an intermediate buffer then copy out into the dynamic area.
s/FileCore70:
Declare the buffer size as 4k to FileSwitch, internally FileCore expresses this in a single byte * 32 so is now at the limit of the range of FcbBufSz.
s/FileCore80:
Perform transfers in the foreground when the sector size exceeds FileCore's 1k buffers. It's not worth bothering.
s/FormSWIs; s/Identify:
Vet and reject attempts to layout invalid zone/sector size combos (see Doc/1Zone).
Doc/MiscOp:
Correct a couple of calculation mistakes.
Doc/1Zone:
New documentation detailing the possible valid combinations of a 1 zone fixed disc, and why for 2k and 4k sectors this is rejected.
Test/BigSectors:
Patch to apply to RAMFS to make it a 4k filing system. Note, the smallest 2 zone RAM disc with 4k sectors is 4052kB, in which case the map is at +3F0000; copy at +3F2000; root directory object at +3F4000.

Version 3.63. Tagged as 'FileCore-3_63'
@
text
@d1 1
a1 1
/* (3.63)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.63
d9 1
a9 1
#define Module_Date_CMHG                20 Jul 2013
d11 2
a12 2
#define Module_MajorVersion             "3.63"
#define Module_Version                  363
d14 1
a14 1
#define Module_Date                     "20 Jul 2013"
d16 1
a16 1
#define Module_ApplicationDate          "20-Jul-13"
d21 3
a23 3
#define Module_FullVersion              "3.63"
#define Module_HelpVersion              "3.63 (20 Jul 2013)"
#define Module_LibraryVersionInfo       "3:63"
@


4.48
log
@Minor tidy ups
Service call table made unconditional.
Typo in Hdr:FileCore corrected.
Comments improved, and other misc housekeeping.

Version 3.62. Tagged as 'FileCore-3_62'
@
text
@d1 1
a1 1
/* (3.62)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.62
d9 1
a9 1
#define Module_Date_CMHG                18 Jul 2013
d11 2
a12 2
#define Module_MajorVersion             "3.62"
#define Module_Version                  362
d14 1
a14 1
#define Module_Date                     "18 Jul 2013"
d16 1
a16 1
#define Module_ApplicationDate          "18-Jul-13"
d21 3
a23 3
#define Module_FullVersion              "3.62"
#define Module_HelpVersion              "3.62 (18 Jul 2013)"
#define Module_LibraryVersionInfo       "3:62"
@


4.47
log
@Fix for stuck in loop doing background transfers to floppies
FileCore80.s: The check for whether write behind could proceed only succeeded for fixed discs ('winnie'), but failed for floppies. So, on trying to flush to close the file being written you'd get stuck in a loop trying to write the buffers.
Commands.s: Magic number swapped for defect list marker

Tested with fsbash, and a simple BASIC program writing 128x1K to a floppy.

Version 3.61. Tagged as 'FileCore-3_61'
@
text
@d1 1
a1 1
/* (3.61)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.61
d9 1
a9 1
#define Module_Date_CMHG                19 Jun 2013
d11 2
a12 2
#define Module_MajorVersion             "3.61"
#define Module_Version                  361
d14 1
a14 1
#define Module_Date                     "19 Jun 2013"
d16 1
a16 1
#define Module_ApplicationDate          "19-Jun-13"
d21 3
a23 3
#define Module_FullVersion              "3.61"
#define Module_HelpVersion              "3.61 (19 Jun 2013)"
#define Module_LibraryVersionInfo       "3:61"
@


4.46
log
@Be cautious about cylinder rounding
Although the fragment clamping is likely to kick in first, be more careful when rounding up/down to cylinder boundaries (for read ahead/write behind).

Version 3.60. Tagged as 'FileCore-3_60'
@
text
@d1 1
a1 1
/* (3.60)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.60
d9 1
a9 1
#define Module_Date_CMHG                04 May 2013
d11 2
a12 2
#define Module_MajorVersion             "3.60"
#define Module_Version                  360
d14 1
a14 1
#define Module_Date                     "04 May 2013"
d16 1
a16 1
#define Module_ApplicationDate          "04-May-13"
d21 3
a23 3
#define Module_FullVersion              "3.60"
#define Module_HelpVersion              "3.60 (04 May 2013)"
#define Module_LibraryVersionInfo       "3:60"
@


4.45
log
@Fix for writes spanning a fragment
FileCore80.s: Revision 4.14 accidentally lost the calculation at line 1324 after FragLeft, so when a large write occurred it didn't get split either side of the fragment, and then an impossibly long scatter list would be emitted.
Tidied some DebugG debug messages.

Version 3.59. Tagged as 'FileCore-3_59'
@
text
@d1 1
a1 1
/* (3.59)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.59
d9 1
a9 1
#define Module_Date_CMHG                06 Apr 2013
d11 2
a12 2
#define Module_MajorVersion             "3.59"
#define Module_Version                  359
d14 1
a14 1
#define Module_Date                     "06 Apr 2013"
d16 1
a16 1
#define Module_ApplicationDate          "06-Apr-13"
d21 3
a23 3
#define Module_FullVersion              "3.59"
#define Module_HelpVersion              "3.59 (06 Apr 2013)"
#define Module_LibraryVersionInfo       "3:59"
@


4.44
log
@Fix for mistargetted write with a file size > 2G when a background scatter list straddles a fragment
When large transfers are being buffered to be written in the background they are attached to the Fcb without considering how the underlying disc fragments are lined up.
When the background process grabs a handful of buffers to build into a scatter list to pass to the low level DiscOp it picks the head of the list and goes forward (SkipWriteBehind) to the fragment end and back (BackwardSkipWriteBehind).
However, BackwardsSkipWriteBehind uses DefFileFrag which substitutes a default offset of 0, and the signed compare resulted in this being left as the believed start of fragment.
In turn, far too many buffers got associated with the fragment, and written to the wrong place on the disc.
In general this doesn't occur, but if the group of buffers happens to straddle a fragment, and that group of buffers is > 2G, the signed compare would trip up.
As fsbash uses the same random number seed this conspired that testing the same drive twice (with and without background transfers enabled) would appear to pass the integrity check step. A new harddisc was used to show this up.

FileCore80.s: Recoded the compare to be in sectors, so 4G files aren't top bit set, but shared files not at the fragment start still are.
Docs/AdfsBuffers: Added some notes before I forget what I just wrote meant.


Version 3.58. Tagged as 'FileCore-3_58'
@
text
@d1 1
a1 1
/* (3.58)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.58
d9 1
a9 1
#define Module_Date_CMHG                01 Apr 2013
d11 2
a12 2
#define Module_MajorVersion             "3.58"
#define Module_Version                  358
d14 1
a14 1
#define Module_Date                     "01 Apr 2013"
d16 1
a16 1
#define Module_ApplicationDate          "01-Apr-13"
d21 3
a23 3
#define Module_FullVersion              "3.58"
#define Module_HelpVersion              "3.58 (01 Apr 2013)"
#define Module_LibraryVersionInfo       "3:58"
@


4.43
log
@Reenable background transfer support when BigFiles is {TRUE}
BigDirCode.s: Retire BigDirFix switch, it wasn't actually a fix, it was more that the directory format was changed early in development, but there's no point keeping support for the prototype any more
FileCore45.s/FileCore25.s/FileCore31.s/FileCore35.s/DebugOpts.s: Retire BigDirFix
Defns.s: Shock addition of some comments
FileCore.s: Manual inclusion of CPU/Arch no longer needed
FileCore70.s: Crucially apply the same 1k dead band to the FileSwitch "write zeros" entry point, since it (along with Get/PutBytes) are the only places file offsets get passed
FileCore80.s: Lots of tedious and subtle boundary cases fixed
InitDieSvc.s: Removed the disabling switch
doc/BigDisc/ADFSBuffer: Detail what the BufFlags mean

Tested on ADFS (the only background-transferring filing system about) with LFAUs of 2k, 4k, 8k, 16k and bashing 65536 iterations.

Version 3.57. Tagged as 'FileCore-3_57'
@
text
@d1 1
a1 1
/* (3.57)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.57
d9 1
a9 1
#define Module_Date_CMHG                25 Mar 2013
d11 2
a12 2
#define Module_MajorVersion             "3.57"
#define Module_Version                  357
d14 1
a14 1
#define Module_Date                     "25 Mar 2013"
d16 1
a16 1
#define Module_ApplicationDate          "25-Mar-13"
d21 3
a23 3
#define Module_FullVersion              "3.57"
#define Module_HelpVersion              "3.57 (25 Mar 2013)"
#define Module_LibraryVersionInfo       "3:57"
@


4.42
log
@Extend upper permissable file size to 4GB-1
Tested for ~200,000 cycles in various configurations with FSBash, with no integrity problems, nor bad maps. However, background transfers (currently only used by ADFS) is still being endurance tested, hence is currently disabled.
Users should note that they can create big files without needing to reformat their drives, however if reverting to an older copy of FileCore the files must not be opened, loaded, or deleted (it's fine to view the directory, just don't expect old FileCore to know how to parse such long fragment runs).
Current versions of DiscKnight (1.49) do not understand long fragment runs.

FSBash
------
* Reviewed and expunged various signed comparisons of file pointers in the existing tests
* Added new tests for big files which attempt to aggrevate all the usual problems passing over and up to important boundaries
* Makefile recreated from fragments
* Some compiler warning squashed

Docs
----
* Some notes added for big file support

Misc
----
Commands: swapped to using Command macro
HelpText: labels renamed to help Command macro
GenSWIs: text table name for SectorDiscOp ammended to match exported header and corresponding secondary module names (ADFS_SectorDiscOp et al). The usefulness of calling the base instantiation of FileCore_SectorDiscOp is minimal, especially from BASIC.
Messages: message for attempting to check an old map disc made less terse
hdr/FileCore: typo

Version 3.56. Tagged as 'FileCore-3_56'
@
text
@d1 1
a1 1
/* (3.56)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.56
d9 1
a9 1
#define Module_Date_CMHG                24 Feb 2013
d11 2
a12 2
#define Module_MajorVersion             "3.56"
#define Module_Version                  356
d14 1
a14 1
#define Module_Date                     "24 Feb 2013"
d16 1
a16 1
#define Module_ApplicationDate          "24-Feb-13"
d21 3
a23 3
#define Module_FullVersion              "3.56"
#define Module_HelpVersion              "3.56 (24 Feb 2013)"
#define Module_LibraryVersionInfo       "3:56"
@


4.41
log
@Comment clarifications and tidy up
Lots of missing function entry/exit register comments added/corrected.
Drive number extraction all now (32-3) to help see where changes are needed in future for more drives.
Removed redundant Tools/basic/BASH (see Test/BASH).
InitDieSvc/BigDirCode/DebugOpts/FileCore25: Comments
FileCore05: Use of DREG with no preceding text
FileCore15: Use of 'mess' with too few arguments
FileCore20: Fetching of NZones made consistent, 3 bit drive number made consistent
FileCore30/FileCore32: Simplify debug switches, driver number extraction, comments
FileCore31: Fetching of NZones made consistent
FileCore40/FileCore33/FileCore35: NZones, function arguments commented
FileCore45: Function arguments commented, debug reinstated
FileCore70/FileCore60: Function arguments commented, drive number extraction
FormSWIs: NZones
Identify/GenSWIs: Drive number extraction, debug tidy
MyMacros: Unused Align16 removed. Hacked DebugError macro to not try loading from internal error numbers all the time, which are often not aligned, or not in sensible memory places

Relatively few code changes, no expected issues.


Version 3.55. Tagged as 'FileCore-3_55'
@
text
@d1 1
a1 1
/* (3.55)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.55
d9 1
a9 1
#define Module_Date_CMHG                21 Feb 2013
d11 2
a12 2
#define Module_MajorVersion             "3.55"
#define Module_Version                  355
d14 1
a14 1
#define Module_Date                     "21 Feb 2013"
d16 1
a16 1
#define Module_ApplicationDate          "21-Feb-13"
d21 3
a23 3
#define Module_FullVersion              "3.55"
#define Module_HelpVersion              "3.55 (21 Feb 2013)"
#define Module_LibraryVersionInfo       "3:55"
@


4.40
log
@  Fix FSEntry_Func 33
Detail:
  It appears that this entry (Get usage of offset) was never updated to
  support the "BigDir" directory format (E+/F+, long filenames, >77 entries
  per directory) at RISC OS 4. This results in OS_FSControl 52 also failing
  for such discs.
Admin:
  Tested using SDFS, but should apply equally to any other FileCore filing
  system.

Version 3.54. Tagged as 'FileCore-3_54'
@
text
@d1 1
a1 1
/* (3.54)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.54
d9 1
a9 1
#define Module_Date_CMHG                12 Nov 2012
d11 2
a12 2
#define Module_MajorVersion             "3.54"
#define Module_Version                  354
d14 1
a14 1
#define Module_Date                     "12 Nov 2012"
d16 1
a16 1
#define Module_ApplicationDate          "12-Nov-12"
d21 3
a23 3
#define Module_FullVersion              "3.54"
#define Module_HelpVersion              "3.54 (12 Nov 2012)"
#define Module_LibraryVersionInfo       "3:54"
@


4.39
log
@Swap out some more constants for symbolic names
* OsBytes
* Application start &8000
* Fixed disc density
* Unused a4 macro deleted
* Redundant 'todo', 'Help, 'Syntax' removed

Version 3.53. Not tagged
@
text
@d1 1
a1 1
/* (3.53)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.53
d9 1
a9 1
#define Module_Date_CMHG                28 Oct 2012
d11 2
a12 2
#define Module_MajorVersion             "3.53"
#define Module_Version                  353
d14 1
a14 1
#define Module_Date                     "28 Oct 2012"
d16 1
a16 1
#define Module_ApplicationDate          "28-Oct-12"
d21 3
a23 3
#define Module_FullVersion              "3.53"
#define Module_HelpVersion              "3.53 (28 Oct 2012)"
#define Module_LibraryVersionInfo       "3:53"
@


4.38
log
@Fix abort mounting old map discs
The massive speedup in FileCore 3.50 by not loading the map sector wise (twice) on mounting meant that the code path to resize the dynamic area for the map had changed.
So, with DynamicMaps = {TRUE} mounting an old map disc would try to load the map into a zero size area (the area had an allocated address but was 0 bytes long).
Aside: reading a new map disc first, then swapping to an old map disc would mask the problem since the dynamic area is only shrunk on an active dismount.


Version 3.53. Tagged as 'FileCore-3_53'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                21 Oct 2012
d14 1
a14 1
#define Module_Date                     "21 Oct 2012"
d16 1
a16 1
#define Module_ApplicationDate          "21-Oct-12"
d22 1
a22 1
#define Module_HelpVersion              "3.53 (21 Oct 2012)"
@


4.37
log
@Fix search limits in FillGap
Detail:
  s/FileCore32 - The "try double exact fit" bit of the FillGap routine wasn't ensuring the search end address was word aligned, sometimes causing the search to run off the end of the FragSize array and into the memory before it.
This itself is mostly harmless (there's a check at line 1161 against the exact bit address at which the search should stop), except that check only gets perfomed once a nonzero bit is encountered.
Sometimes this check doesn't get performed at all, causing the search to fall off the start of ScratchSpace, and - with relocated zero page - into the unmapped memory beyond.
By rounding the search end address down, we ensure it's word aligned, without altering the actual size of the area.
Admin:
  Tested on BB-xM with high processor vectors


Version 3.52. Tagged as 'FileCore-3_52'
@
text
@d1 1
a1 1
/* (3.52)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.52
d9 1
a9 1
#define Module_Date_CMHG                09 Jul 2012
d11 2
a12 2
#define Module_MajorVersion             "3.52"
#define Module_Version                  352
d14 1
a14 1
#define Module_Date                     "09 Jul 2012"
d16 1
a16 1
#define Module_ApplicationDate          "09-Jul-12"
d21 3
a23 3
#define Module_FullVersion              "3.52"
#define Module_HelpVersion              "3.52 (09 Jul 2012)"
#define Module_LibraryVersionInfo       "3:52"
@


4.36
log
@  Allow booting from DOS-formatted media
Detail:
  Rather than use its internal idea of the disc's boot option, FileCore now
  asks FileSwitch, which ends up asking either DOSFS or FileCore for the
  boot option, as appropriate for the format in use.
Admin:
  Tested on a beagleboard.

Version 3.51. Tagged as 'FileCore-3_51'
@
text
@d1 1
a1 1
/* (3.51)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.51
d9 1
a9 1
#define Module_Date_CMHG                13 May 2012
d11 2
a12 2
#define Module_MajorVersion             "3.51"
#define Module_Version                  351
d14 1
a14 1
#define Module_Date                     "13 May 2012"
d16 1
a16 1
#define Module_ApplicationDate          "13-May-12"
d21 3
a23 3
#define Module_FullVersion              "3.51"
#define Module_HelpVersion              "3.51 (13 May 2012)"
#define Module_LibraryVersionInfo       "3:51"
@


4.35
log
@  Miscellaneous improvements
Detail:
  * Added the ability for a filing system to specify to FileCore that floppy
    discs should be mounted like hard discs, to complement the existing flag
    that specifies the opposite. SDFS requires this. Ideally SCSIFS should
    start using this as well, to encapsulate boot block handling within
    FileCore.
  * Added header definitions so the FileCore and the filing systems can
    negotiate the use of a new MiscOp entry, needed as part of partitioning
    support, especially important for filing systems that use the hardware-
    specific section of the boot block, like ADFS. At present, FileCore
    doesn't do anything different (it still doesn't support partitions) but
    this enables filing systems to be modified in preparation.
  * Removed the only place where FileCore paid any attention to the
    EmptyWorks flag returned by MiscOp 1 - an obscure and not very useful
    edge case not used by any current filing systems.
  * Added 650 lines of documentation for the MiscOp SWI and low-level entry
    to the Doc directory, giving the information you need in order to
    implement a FileCore filing system.
  * Added missing header file definitions for the low-level background DiscOp
    reason code and the hot-plug drive removed flag to MiscOp 7.
  * Removed some RISC OS 2 legacy code whereby FileCore maintained its idea
    of the internal disc address of the CSD @@, PSD \, Library % and URD & for
    each filing system. Since RISC OS 3.00, FileSwitch handles these
    internally and passes canonicalised paths to FileCore, so FileCore's disc
    addresses for these directories remained unset. This allows some
    considerable simplification of FileCore's path parser in particular, but
    also affects other code like that which decides how to expire disc
    records. Also note that FileCore has been unable to generate certain
    errors (like "Can't delete current directory") since RISC OS 3.00 for the
    same reason.
  * Changed loading of the map for FileCore-format discs so that the map is
    loaded into the dynamic area during the Service_IdentifyDisc handler in
    one big DiscOp rather than loading it twice, sector-by-sector, via one
    big sector cache. For one thing, the sector cache is implemented
    inefficiently - O(n^2) - and for another thing, single-sector DiscOps are
    relatively inefficient on many filing systems, especially on SD cards.
    Some example speed-ups measured for mounting discs are:
      SCSIFS,   1GB drive: was 0.62 sec, now 0.40 sec (1.55 x speedup)
      SCSIFS, 256GB drive: was 1.44 sec, now 0.52 sec (2.77 x speedup)
      SDFS,     2GB drive: was 1.25 sec, now 0.14 sec (8.93 x speedup)
Admin:
  Tested on a beagleboard, with SCSIFS and SDFS.

Version 3.50. Tagged as 'FileCore-3_50'
@
text
@d1 1
a1 1
/* (3.50)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.50
d9 1
a9 1
#define Module_Date_CMHG                14 Apr 2012
d11 2
a12 2
#define Module_MajorVersion             "3.50"
#define Module_Version                  350
d14 1
a14 1
#define Module_Date                     "14 Apr 2012"
d16 1
a16 1
#define Module_ApplicationDate          "14-Apr-12"
d21 3
a23 3
#define Module_FullVersion              "3.50"
#define Module_HelpVersion              "3.50 (14 Apr 2012)"
#define Module_LibraryVersionInfo       "3:50"
@


4.34
log
@  Reworked error code
Detail:
  Created a new exported header file, Hdr:FileCoreErr, which will serve as
  the single centralised location that defines the error numbers used in the
  low-level FileCore interfaces. s.Errors is now only used for allocating
  error blocks, not for defining error numbers. Also now exports C versions
  of both the pre-existing Hdr:FileCore and the new header.
Admin:
  No changes to the binary.

Version 3.49. Tagged as 'FileCore-3_49'
@
text
@d1 1
a1 1
/* (3.49)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.49
d9 1
a9 1
#define Module_Date_CMHG                19 Mar 2012
d11 2
a12 2
#define Module_MajorVersion             "3.49"
#define Module_Version                  349
d14 1
a14 1
#define Module_Date                     "19 Mar 2012"
d16 1
a16 1
#define Module_ApplicationDate          "19-Mar-12"
d21 3
a23 3
#define Module_FullVersion              "3.49"
#define Module_HelpVersion              "3.49 (19 Mar 2012)"
#define Module_LibraryVersionInfo       "3:49"
@


4.33
log
@Fix abort on unaligned LDR of DiscRecord_ZoneSpare.
Looks like a typo because there's a valid ASSERT above, and an LSR#16 below.

Version 3.48. Tagged as 'FileCore-3_48'
@
text
@d1 1
a1 1
/* (3.48)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.48
d9 1
a9 1
#define Module_Date_CMHG                07 Jan 2012
d11 2
a12 2
#define Module_MajorVersion             "3.48"
#define Module_Version                  348
d14 1
a14 1
#define Module_Date                     "07 Jan 2012"
d16 1
a16 1
#define Module_ApplicationDate          "07-Jan-12"
d21 3
a23 3
#define Module_FullVersion              "3.48"
#define Module_HelpVersion              "3.48 (07 Jan 2012)"
#define Module_LibraryVersionInfo       "3:48"
@


4.32
log
@Fold in old fixes.
From 1989, probably safe to keep them. Binary unchanged.

Version 3.47. Tagged as 'FileCore-3_47'
@
text
@d1 1
a1 1
/* (3.47)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.47
d9 1
a9 1
#define Module_Date_CMHG                25 Nov 2011
d11 2
a12 2
#define Module_MajorVersion             "3.47"
#define Module_Version                  347
d14 1
a14 1
#define Module_Date                     "25 Nov 2011"
d16 1
a16 1
#define Module_ApplicationDate          "25-Nov-11"
d21 3
a23 3
#define Module_FullVersion              "3.47"
#define Module_HelpVersion              "3.47 (25 Nov 2011)"
#define Module_LibraryVersionInfo       "3:47"
@


4.31
log
@Teach FileCore_LayoutStructure and Service_IdentifyDisc how to do 1 zone fixed discs.
From the change logs it was last fixed sometime around FileCore 2.50 era, but has been long broken.
The boot block was in the right place, but was overwritten by the root directory, and the wrong size entry was claimed in the map, amongst other errors.
Free'd up R6 in LayoutFreeSpaceMap to avoid having to keep reevaluating the number of zones - makes it a bit more readable. Corrected inaccurate comments. Checked the code paths for new map with and without boot block, with and without long filenames.
Test app 'Make1Zone' generates a small disc image which can be inspected in a hex editor for correctness.
In the identify code, be more strict about looking for a boot block only on fixed discs since they cannot occur on floppies (saves time, wasn't necessarily wrong).
The concept of a boot block at &C00 only works when 2 copies of the map can be fitted underneath that address, for future 2k and 4k sector sizes these do not fit and it is likely that 1 zone fixed discs are forbidden (a drive with 4k sectors would typically be > 512GB and 1 zone would be ~32MB so spilling into a second zone would waste < 0.01%).
Other minor changes:
* Free command now groups the 'K' with 'bytes' to match OS_ConvertFileSize.
* FileCore20 debug didn't assemble.
* FileCore33 beefed up comments.
* GenSWIs debug didn't assemble.
Tested with a special cut of RAMFS manually loading various 1 zone images into its dynamic area and checking they mount, have a sensible *MAP and *FREE result, can be written to, and don't have broken directories.

Version 3.46. Tagged as 'FileCore-3_46'
@
text
@d1 1
a1 1
/* (3.46)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.46
d11 2
a12 2
#define Module_MajorVersion             "3.46"
#define Module_Version                  346
d21 3
a23 3
#define Module_FullVersion              "3.46"
#define Module_HelpVersion              "3.46 (25 Nov 2011)"
#define Module_LibraryVersionInfo       "3:46"
@


4.30
log
@Revise exports in "hdr.FileCore".
Now, for each SWI call there is a definition of any pertinent structures it asks for and definitions of any bitfields within those flags. This avoids the need for clients to endlessly redefine these locally (in practice it looks like sections of FileCore were simply copy and pasted into clients RAMFS/SCSIFS/ADFS). Delete private definitions.
This binary was carefully checked to be identical since so many locations were changed.
Then, the following additional changes:
* InitDieSvc line 74, the floppy config is extracted using a mask and shift rather than reaching up the stack
* Identify lin 1254, the superfluous instruction marked as such deleted
* FileCore15 line 762 recoded the check for background op to not need the bit number defined any more
* FileCore00 moved the label 'anull' to be word aligned guaranteed
The duff pointer marker ('nowt' = &40000000) is no longer used to mark territory translation tables as invalid as that address is now quite reasonable. -1 is used instead.

Version 3.45. Tagged as 'FileCore-3_45'
@
text
@d1 1
a1 1
/* (3.45)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.45
d9 1
a9 1
#define Module_Date_CMHG                14 Oct 2011
d11 2
a12 2
#define Module_MajorVersion             "3.45"
#define Module_Version                  345
d14 1
a14 1
#define Module_Date                     "14 Oct 2011"
d16 1
a16 1
#define Module_ApplicationDate          "14-Oct-11"
d21 3
a23 3
#define Module_FullVersion              "3.45"
#define Module_HelpVersion              "3.45 (14 Oct 2011)"
#define Module_LibraryVersionInfo       "3:45"
@


4.29
log
@Fix bug in DetermineDiscType.
When failed to identify, and the last operation was format, the DiscSize2 field was not being copied (instead DiscSize is copied twice).
Fix up some warnings from the assembler.
Tested briefly with a RAM disc, still works.

Version 3.44. Tagged as 'FileCore-3_44'
@
text
@d1 1
a1 1
/* (3.44)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.44
d9 1
a9 1
#define Module_Date_CMHG                12 Oct 2011
d11 2
a12 2
#define Module_MajorVersion             "3.44"
#define Module_Version                  344
d14 1
a14 1
#define Module_Date                     "12 Oct 2011"
d16 1
a16 1
#define Module_ApplicationDate          "12-Oct-11"
d21 3
a23 3
#define Module_FullVersion              "3.44"
#define Module_HelpVersion              "3.44 (12 Oct 2011)"
#define Module_LibraryVersionInfo       "3:44"
@


4.28
log
@Suspicious PC fiddling exorcised.
R8 was being used to remember the C bit, by copying from the PC. Swapped to use RRX instead.

Version 3.43. Tagged as 'FileCore-3_43'
@
text
@d1 1
a1 1
/* (3.43)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.43
d9 1
a9 1
#define Module_Date_CMHG                02 Oct 2011
d11 2
a12 2
#define Module_MajorVersion             "3.43"
#define Module_Version                  343
d14 1
a14 1
#define Module_Date                     "02 Oct 2011"
d16 1
a16 1
#define Module_ApplicationDate          "02-Oct-11"
d21 3
a23 3
#define Module_FullVersion              "3.43"
#define Module_HelpVersion              "3.43 (02 Oct 2011)"
#define Module_LibraryVersionInfo       "3:43"
@


4.27
log
@Make debug versions assemble again.
Entry macro renamed as SemEntry to avoid conflict with Hdr:Proc.
Other macro bit rot fixed up.
Tidy up switches.
DebugFx switch is the only one that doesn't work.
Non debug binary same as 3.41.

Version 3.42. Tagged as 'FileCore-3_42'
@
text
@d1 1
a1 1
/* (3.42)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.42
d11 2
a12 2
#define Module_MajorVersion             "3.42"
#define Module_Version                  342
d21 3
a23 3
#define Module_FullVersion              "3.42"
#define Module_HelpVersion              "3.42 (02 Oct 2011)"
#define Module_LibraryVersionInfo       "3:42"
@


4.26
log
@Fix *DEFECT crashing when an object occupies the defect disc address.
R5 was being reused as the loop exit instead of R9.
Synced code with *CHECKMAP a bit since they have the same heritage.
Untangle the spaghetti around TermCommon and UnTermCommon.
In the module init, skip a store when the flags don't change.
Tested with a RAM disc filled with autogenerated nested directories and a loop blindly trying to defect everything - works fine now. Ticket #114.

Version 3.41. Tagged as 'FileCore-3_41'
@
text
@d1 1
a1 1
/* (3.41)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.41
d9 1
a9 1
#define Module_Date_CMHG                13 Sep 2011
d11 2
a12 2
#define Module_MajorVersion             "3.41"
#define Module_Version                  341
d14 1
a14 1
#define Module_Date                     "13 Sep 2011"
d16 1
a16 1
#define Module_ApplicationDate          "13-Sep-11"
d21 3
a23 3
#define Module_FullVersion              "3.41"
#define Module_HelpVersion              "3.41 (13 Sep 2011)"
#define Module_LibraryVersionInfo       "3:41"
@


4.25
log
@  Fix for alignment exception on ARMv7
Detail:
  The Density field in the disc record is a byte at a non-word-aligned address
  but it was being loaded here with an LDR instruction. There is actually a
  pre-existing bug here, since the code at lines 904-905 would only have been
  executed on earlier CPUs if SectorSize, SecsPerTrk and Heads were all zero
  too. This would correspond to an implausibly small hard disc, so arguably
  this part of the branch should perhaps be removed altogether?
Admin:
  Untested at ROOL.
  Submission from Willi Theiß [comments above are my own - BA]

Version 3.40. Tagged as 'FileCore-3_40'
@
text
@d1 1
a1 1
/* (3.40)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.40
d9 1
a9 1
#define Module_Date_CMHG                12 Sep 2011
d11 2
a12 2
#define Module_MajorVersion             "3.40"
#define Module_Version                  340
d14 1
a14 1
#define Module_Date                     "12 Sep 2011"
d16 1
a16 1
#define Module_ApplicationDate          "12-Sep-11"
d21 3
a23 3
#define Module_FullVersion              "3.40"
#define Module_HelpVersion              "3.40 (12 Sep 2011)"
#define Module_LibraryVersionInfo       "3:40"
@


4.24
log
@Update to work with zero page relocation
Detail:
  s/FileCore, s/FileCore00, s/InitDieSvc - Try using OS_ReadSysInfo 6 to get IRQsema & CannotReset locations before falling back on legacy values. Store results in module workspace.
  s/FileCore05 - Commented out unused CheckEscape routine to avoid having to update it
  s/FileCore15 - Debugging code updated to use OS_ReadSysInfo 6 to fetch IRQsema ptr. Can't always rely on workspace version since workspace might not be set up yet.
  s/FileCore25, s/FileCore30, s/FileCore80 - Use IRQsema & CannotReset pointers from workspace
Admin:
  Tested on rev A2 BB-xM


Version 3.39. Tagged as 'FileCore-3_39'
@
text
@d1 1
a1 1
/* (3.39)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.39
d9 1
a9 1
#define Module_Date_CMHG                04 Aug 2011
d11 2
a12 2
#define Module_MajorVersion             "3.39"
#define Module_Version                  339
d14 1
a14 1
#define Module_Date                     "04 Aug 2011"
d16 1
a16 1
#define Module_ApplicationDate          "04-Aug-11"
d21 3
a23 3
#define Module_FullVersion              "3.39"
#define Module_HelpVersion              "3.39 (04 Aug 2011)"
#define Module_LibraryVersionInfo       "3:39"
@


4.23
log
@Fixed some code which could have unpredictable behaviour on 26 bit ARMs.

Version 3.38. Tagged as 'FileCore-3_38'
@
text
@d1 1
a1 1
/* (3.38)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.38
d9 1
a9 1
#define Module_Date_CMHG                14 Mar 2011
d11 2
a12 2
#define Module_MajorVersion             "3.38"
#define Module_Version                  338
d14 1
a14 1
#define Module_Date                     "14 Mar 2011"
d16 1
a16 1
#define Module_ApplicationDate          "14-Mar-11"
d21 3
a23 3
#define Module_FullVersion              "3.38"
#define Module_HelpVersion              "3.38 (14 Mar 2011)"
#define Module_LibraryVersionInfo       "3:38"
@


4.22
log
@Combat slow USB devices on boot by making OS_FSControl 15 auto-retry when SCSIFS "drive empty" errors are generated
Detail:
  s/FileCore60 - DoOsFunBootup now detects when a SCSIFS "drive empty" error is returned by IdentifyCurrentDisc. Instead of returning with an error, the boot operation will instead be retried, to give slow/unlucky USB devices a chance to finish initialising. Escape can be used to cancel the retry loop, just in case.
  Resources/UK/Messages - Added new 'RetryBoot' message which is shown when the retry loop starts
Admin:
  Tested on rev A2 BB-xM. Machine now boots correctly in situations where the required USB device hasn't initialised by the time OS_FSControl 15 is called.
  New message token (RetryBoot) needs translating.


Version 3.37. Tagged as 'FileCore-3_37'
@
text
@d1 1
a1 1
/* (3.37)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.37
d9 1
a9 1
#define Module_Date_CMHG                25 Jan 2011
d11 2
a12 2
#define Module_MajorVersion             "3.37"
#define Module_Version                  337
d14 1
a14 1
#define Module_Date                     "25 Jan 2011"
d16 1
a16 1
#define Module_ApplicationDate          "25-Jan-11"
d21 3
a23 3
#define Module_FullVersion              "3.37"
#define Module_HelpVersion              "3.37 (25 Jan 2011)"
#define Module_LibraryVersionInfo       "3:37"
@


4.21
log
@Fix erroneous unaligned load in FileCore
Detail:
  FindDiscRec was erroneously using LDR to load DiscsDrv when it should have used LDRB. Apart from the potential for disc record priorities to be incorrectly evaluated, this was also causing an abort when alignment exceptions were turned on.
Admin:
  Tested on rev C2 beagleboard. FAT formatted USB drives now seem to work OK.


Version 3.36. Tagged as 'FileCore-3_36'
@
text
@d1 1
a1 1
/* (3.36)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.36
d9 1
a9 1
#define Module_Date_CMHG                14 Nov 2009
d11 2
a12 2
#define Module_MajorVersion             "3.36"
#define Module_Version                  336
d14 1
a14 1
#define Module_Date                     "14 Nov 2009"
d16 1
a16 1
#define Module_ApplicationDate          "14-Nov-09"
d21 3
a23 3
#define Module_FullVersion              "3.36"
#define Module_HelpVersion              "3.36 (14 Nov 2009)"
#define Module_LibraryVersionInfo       "3:36"
@


4.20
log
@Fix bug in FileCore's CompactZone hash table handling
Detail:
  The code which protects against hash table overflows in the CompactZone routine has been broken ever since BigMaps was introduced. With BigMaps each hash table entry is three bytes, not two; but the overflow fixup code which restores the word following the hash table to its original value wasn't updated to take this into account, and so was restoring the data to the wrong position.
  Presumably this isn't a critical problem since it's been there so long, but since it causes an alignment exception when NoUnaligned is in use it's now been fixed.
Admin:
  Tested on rev C2 beagleboard


Version 3.35. Tagged as 'FileCore-3_35'
@
text
@d1 1
a1 1
/* (3.35)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.35
d9 1
a9 1
#define Module_Date_CMHG                06 Nov 2009
d11 2
a12 2
#define Module_MajorVersion             "3.35"
#define Module_Version                  335
d14 1
a14 1
#define Module_Date                     "06 Nov 2009"
d16 1
a16 1
#define Module_ApplicationDate          "06-Nov-09"
d21 3
a23 3
#define Module_FullVersion              "3.35"
#define Module_HelpVersion              "3.35 (06 Nov 2009)"
#define Module_LibraryVersionInfo       "3:35"
@


4.19
log
@  Fix bugs and inefficiencies revealed by unaligned data audit
Detail:
  Many of these are unaligned LDRs where only bits 0-7 of the result are used
  (tested against a bitmask or used as an input to the barrel shifter) but
  they have all been moved to byte operations because they are faster on
  ARMv6 and won't cause false positives if unaligned aborts are enabled.

  s.BigDirCode line 104: not wrong as such, but changed to use aligned LDR
    for speed on ARMv6.
  s.BigDirCode line 1727: LDR of an unaligned 1-byte variable. Only used as
    input to shifter.
  s.Commands line 129: STR to an unaligned 1-byte variable. Harmless because
    all overlapping variables are initialised later on.
  s.Commands line 539: LDR of an unaligned 1-byte variable. Only used for
    testing bit 6.
  s.FileCore31 line 1359: LDR of an unaligned 1-byte variable. Only used as
    input to shifter.
  s.FileCore32 lines 1483 and 1825: LDR of an unaligned 1-byte variable. Only
    used as input to shifter.
  s.FormSWIs line 1403: bugfix: incorrect load of 16-bit zone_spare field of
    disc record - uses lowsector and nzones fields instead! This is used to
    terminate the search of free space fragments within the allocation bytes
    of the current map block for the one containing a bad block found during
    formatting. Would manifest itself as a "Can't map defect out" error.
  s.GenSWIs lines 1182,1195: bugfix: LDR of 1-byte variables. Effect of this
    was that range-checking of the drive number passed to FileCore_MiscOp 5
    (eject) wasn't performed.
  Added ENTRY directive to permit building of GPA debug listing.
Admin:
  Builds, but untested.

Version 3.34. Tagged as 'FileCore-3_34'
@
text
@d1 1
a1 1
/* (3.34)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.34
d9 1
a9 1
#define Module_Date_CMHG                16 Jun 2009
d11 2
a12 2
#define Module_MajorVersion             "3.34"
#define Module_Version                  334
d14 1
a14 1
#define Module_Date                     "16 Jun 2009"
d16 1
a16 1
#define Module_ApplicationDate          "16-Jun-09"
d21 3
a23 3
#define Module_FullVersion              "3.34"
#define Module_HelpVersion              "3.34 (16 Jun 2009)"
#define Module_LibraryVersionInfo       "3:34"
@


4.18
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 3.33. Not tagged
@
text
@d1 1
a1 1
/* (3.33)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.33
d9 1
a9 1
#define Module_Date_CMHG                11 Jun 2009
d11 2
a12 2
#define Module_MajorVersion             "3.33"
#define Module_Version                  333
d14 1
a14 1
#define Module_Date                     "11 Jun 2009"
d16 1
a16 1
#define Module_ApplicationDate          "11-Jun-09"
d21 3
a23 3
#define Module_FullVersion              "3.33"
#define Module_HelpVersion              "3.33 (11 Jun 2009)"
#define Module_LibraryVersionInfo       "3:33"
@


4.17
log
@  Various archiecture-based optimisations
Detail:
  * ARMv6+ builds use unaligned halfword and word loads and stores (unless
    pre-ARMv6 compatibility is required or NoUnaligned is set)
  * In many cases, one unnecessary BIC instruction has been removed from
    pre-ARMv6 builds
  * ARMv5+ builds (so Tungsten and OMAP) make use of CLZ instruction when
    parsing fragment blocks
Admin:
  Built and included in an OMAP3 ROM. But be warned, this has not received
  the rigorous testing normally required of filesystem code, use at your
  own risk.

Version 3.33. Tagged as 'FileCore-3_33'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                17 May 2009
d14 1
a14 1
#define Module_Date                     "17 May 2009"
d16 1
a16 1
#define Module_ApplicationDate          "17-May-09"
d22 1
a22 1
#define Module_HelpVersion              "3.33 (17 May 2009)"
@


4.16
log
@Skip "Disc drive empty" error on shutdown - if the drive's empty there's
not much you can do about it.
Dir cache flushing fixed.

Version 3.32. Tagged as 'FileCore-3_32'
@
text
@d1 1
a1 1
/* (3.32)
d4 1
a4 1
 * Last processed by srccommit version: 1.68.
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.32
d9 1
a9 1
#define Module_Date_CMHG                08 Aug 2003
d11 2
a12 2
#define Module_MajorVersion             "3.32"
#define Module_Version                  332
d14 1
a14 1
#define Module_Date                     "08 Aug 2003"
d16 1
a16 1
#define Module_ApplicationDate          "08-Aug-03"
d19 1
a19 1
#define Module_ComponentPath            "RiscOS/Sources/FileSys/FileCore"
d21 3
a23 3
#define Module_FullVersion              "3.32"
#define Module_HelpVersion              "3.32 (08 Aug 2003)"
#define Module_LibraryVersionInfo       "3:32"
@


4.15
log
@* Various 32-bit compatibility fixes.
* Can use HAL for FIQ+timer manipulations.
* FileCore_DiscOp64 added (as user API - currently just converted to the
  standard byte or sector DiscOp call to the underlying module). See
  Doc.32bitAPIs for full details.
* New error-passing scheme to modules added (for full 32-bit addressing).
* FileCore_Features added (indicates new error scheme).
* OS_FSControl 49 (read 32-bit free space) now reports sensible clamped
  values for large discs, rather than values modulo 2^32.
* Accessing the end of files near 2GB in size could cause lock-ups in
  background transfers.
* F(+) and G(+) disc formats adjusted to have a little more skew to
  help the rather poor Iyonix floppy controller.

Version 3.31. Tagged as 'FileCore-3_31'
@
text
@d1 1
a1 1
/* (3.31)
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.31
d9 1
a9 1
#define Module_Date_CMHG                03 Apr 2003
d11 2
a12 2
#define Module_MajorVersion             "3.31"
#define Module_Version                  331
d14 1
a14 1
#define Module_Date                     "03 Apr 2003"
d16 1
a16 1
#define Module_ApplicationDate          "03-Apr-03"
d21 3
a23 3
#define Module_FullVersion              "3.31"
#define Module_HelpVersion              "3.31 (03 Apr 2003)"
#define Module_LibraryVersionInfo       "3:31"
@


4.14
log
@Fixed some mrs and msr macros for ObjAsm.

Version 3.30. Tagged as 'FileCore-3_30'
@
text
@d1 1
a1 1
/* (3.30)
d4 1
d7 1
a7 1
#define Module_MajorVersion_CMHG        3.30
d9 1
a9 1
#define Module_Date_CMHG                14 May 2001
d11 2
a12 2
#define Module_MajorVersion             "3.30"
#define Module_Version                  330
d14 1
a14 1
#define Module_Date                     "14 May 2001"
d16 1
a16 2
#define Module_ApplicationDate2         "14-May-01"
#define Module_ApplicationDate4         "14-May-2001"
d21 3
a23 2
#define Module_FullVersion              "3.30"
#define Module_HelpVersion              "3.30 (14 May 2001)"
@


4.13
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 3.29. Tagged as 'FileCore-3_29'
@
text
@d1 1
a1 1
/* (3.29)
d6 1
a6 1
#define Module_MajorVersion_CMHG        3.29
d10 2
a11 2
#define Module_MajorVersion             "3.29"
#define Module_Version                  329
d21 2
a22 2
#define Module_FullVersion              "3.29"
#define Module_HelpVersion              "3.29 (14 May 2001)"
@


4.12
log
@HAL branch changes (to code to read Timer0) merged. Should still assemble
on non-HAL builds.

Version 3.28. Tagged as 'FileCore-3_28'
@
text
@d1 1
a1 1
/* (3.28)
d6 1
a6 1
#define Module_MajorVersion_CMHG        3.28
d8 1
a8 1
#define Module_Date_CMHG                10 May 2001
d10 2
a11 2
#define Module_MajorVersion             "3.28"
#define Module_Version                  328
d13 1
a13 1
#define Module_Date                     "10 May 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "10-May-01"
#define Module_ApplicationDate4         "10-May-2001"
d21 2
a22 2
#define Module_FullVersion              "3.28"
#define Module_HelpVersion              "3.28 (10 May 2001)"
@


4.11
log
@
  * Removed dependency on obsolete STB and StrongARM flags.

Detail:

  * No longer reliant on STB flag.  Now both Desktop and Embedded builds
    are the same (which, of course, they should be).

Admin:

  * StripDepnd support moved to MkClean file.

  * The "What'sHere" file has been renamed to "ReadMe", since the existence
    of the single-quote causes problems with some Unix commands (notably
    'xargs').

  * Built and tested in a Lazarus 32-bit build.

Version 3.27. Tagged as 'FileCore-3_27'
@
text
@d1 1
a1 1
/* (3.27)
d6 1
a6 1
#define Module_MajorVersion_CMHG        3.27
d8 1
a8 1
#define Module_Date_CMHG                01 Mar 2001
d10 2
a11 2
#define Module_MajorVersion             "3.27"
#define Module_Version                  327
d13 1
a13 1
#define Module_Date                     "01 Mar 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "01-Mar-01"
#define Module_ApplicationDate4         "01-Mar-2001"
d21 2
a22 2
#define Module_FullVersion              "3.27"
#define Module_HelpVersion              "3.27 (01 Mar 2001)"
@


4.10
log
@  Re-applied fixes from FileCore-3_22-4_6_2_1 to the trunk.
Detail:
  Scatter list wrap condition updated to allow top-bit-set memory accesses.
Admin:
  Not tested - any issues related to the 32-bit conversion have not been
  addressed. I'd suggest that you use the branched version mentioned above,
  except in test builds.

Version 3.26. Tagged as 'FileCore-3_26'
@
text
@d1 1
a1 1
/* (3.26)
d6 1
a6 1
#define Module_MajorVersion_CMHG        3.26
d8 1
a8 1
#define Module_Date_CMHG                07 Dec 2000
d10 2
a11 2
#define Module_MajorVersion             "3.26"
#define Module_Version                  326
d13 1
a13 1
#define Module_Date                     "07 Dec 2000"
d15 2
a16 2
#define Module_ApplicationDate2         "07-Dec-00"
#define Module_ApplicationDate4         "07-Dec-2000"
d21 2
a22 2
#define Module_FullVersion              "3.26"
#define Module_HelpVersion              "3.26 (07 Dec 2000)"
@


4.9
log
@  More 32-bit fixes.
Detail:
  Flag preservation added to 7 routines that require it.  Docs.32-bit
    updated to remove the names of the functions that have been made
    to preserve flags again.
Admin:
  This version needs more testing, but at least this version does not
    appear to stiff the machine, corrupt discs, go bang under light
    testing with ADFS and RAMFS.
  26-bit and 32-bit builds slightly tested.
  Do not use in products - Do use in test builds.

Version 3.25. Tagged as 'FileCore-3_25'
@
text
@d1 1
a1 1
/* (3.25)
d6 1
a6 1
#define Module_MajorVersion_CMHG        3.25
d8 1
a8 1
#define Module_Date_CMHG                31 Oct 2000
d10 2
a11 2
#define Module_MajorVersion             "3.25"
#define Module_Version                  325
d13 1
a13 1
#define Module_Date                     "31 Oct 2000"
d15 2
a16 2
#define Module_ApplicationDate2         "31-Oct-00"
#define Module_ApplicationDate4         "31-Oct-2000"
d21 2
a22 2
#define Module_FullVersion              "3.25"
#define Module_HelpVersion              "3.25 (31 Oct 2000)"
@


4.9.2.1
log
@Simple HAL changes to stop it accessing Timer0 directly. Nowhere near
actually accessing other than a RAM disc on a non-IOMD machine.

Version 3.25, 4.9.2.1. Tagged as 'FileCore-3_25-4_9_2_1'
@
text
@d7 2
a8 2
#define Module_MinorVersion_CMHG        4.9.2.1
#define Module_Date_CMHG                30 Nov 2000
d12 2
a13 2
#define Module_MinorVersion             "4.9.2.1"
#define Module_Date                     "30 Nov 2000"
d15 2
a16 2
#define Module_ApplicationDate2         "30-Nov-00"
#define Module_ApplicationDate4         "30-Nov-2000"
d21 2
a22 2
#define Module_FullVersion              "3.25 (4.9.2.1)"
#define Module_HelpVersion              "3.25 (30 Nov 2000) (4.9.2.1)"
@


4.9.2.2
log
@HAL changes conditionalised, so it should be possible to move it onto the
trunk.

Version 3.25, 4.9.2.2. Tagged as 'FileCore-3_25-4_9_2_2'
@
text
@d7 2
a8 2
#define Module_MinorVersion_CMHG        4.9.2.2
#define Module_Date_CMHG                10 May 2001
d12 2
a13 2
#define Module_MinorVersion             "4.9.2.2"
#define Module_Date                     "10 May 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "10-May-01"
#define Module_ApplicationDate4         "10-May-2001"
d21 2
a22 2
#define Module_FullVersion              "3.25 (4.9.2.2)"
#define Module_HelpVersion              "3.25 (10 May 2001) (4.9.2.2)"
@


4.8
log
@  32-bit fixes
Detail:
  Some stack offsets were wrong - now fixed.
  More PSR preservation added.
Admin:
  26-bit builds of this module still stiff the machine when ADFS is
    used.
  Do not use - except for testing.

Version 3.24. Tagged as 'FileCore-3_24'
@
text
@d1 1
a1 1
/* (3.24)
d6 1
a6 1
#define Module_MajorVersion_CMHG        3.24
d10 2
a11 2
#define Module_MajorVersion             "3.24"
#define Module_Version                  324
d18 5
a22 2
#define Module_FullVersion              "3.24"
#define Module_HelpVersion              "3.24 (31 Oct 2000)"
@


4.7
log
@32-bit compatible. Some known issues remaining - don't use, except for
testing.

Version 3.23. Tagged as 'FileCore-3_23'
@
text
@d1 1
a1 1
/* (3.23)
d6 1
a6 1
#define Module_MajorVersion_CMHG        3.23
d8 1
a8 1
#define Module_Date_CMHG                30 Oct 2000
d10 2
a11 2
#define Module_MajorVersion             "3.23"
#define Module_Version                  323
d13 1
a13 1
#define Module_Date                     "30 Oct 2000"
d15 2
a16 2
#define Module_ApplicationDate2         "30-Oct-00"
#define Module_ApplicationDate4         "30-Oct-2000"
d18 2
a19 2
#define Module_FullVersion              "3.23"
#define Module_HelpVersion              "3.23 (30 Oct 2000)"
@


4.6
log
@
  * Failed to assemble on Lazarus build due to missing symbol.

Detail:

  * The latest merge appeared to have missed one of the "Module_Version"
    symbol changes.  It failed to assemble:

      s.FileCore40: Serious error  Undefined symbol

    "Version" changed to "Module_Version" to correct this, in line with
    the other related changes.

Admin:

  * Untested; to be built into next Lazarus development build.

Version 3.22. Tagged as 'FileCore-3_22'
@
text
@d1 1
a1 1
/* (3.22)
d6 1
a6 1
#define Module_MajorVersion_CMHG        3.22
d8 1
a8 1
#define Module_Date_CMHG                10 May 2000
d10 2
a11 2
#define Module_MajorVersion             "3.22"
#define Module_Version                  322
d13 1
a13 1
#define Module_Date                     "10 May 2000"
d15 5
a19 1
#define Module_FullVersion              "3.22"
@


4.6.2.1
log
@  Fixes to allow loading to/saving from top-bit-set addresses.
Detail:
  Updated to use the new conditions for wrapping around scatter lists, as
  first used in ADFS 3.33, viz that the address word is >= &FFFF0000, rather
  than just being negative.
Admin:
  Tested briefly - at least the one reproducable data abort that I had is now
  fixed.

Version 3.22, 4.6.2.1. Tagged as 'FileCore-3_22-4_6_2_1'
@
text
@d7 2
a8 2
#define Module_MinorVersion_CMHG        4.6.2.1
#define Module_Date_CMHG                07 Dec 2000
d12 2
a13 2
#define Module_MinorVersion             "4.6.2.1"
#define Module_Date                     "07 Dec 2000"
d15 1
a15 8
#define Module_ApplicationDate2         "07-Dec-00"
#define Module_ApplicationDate4         "07-Dec-2000"

#define Module_ComponentName            "FileCore"
#define Module_ComponentPath            "RiscOS/Sources/FileSys/FileCore"

#define Module_FullVersion              "3.22 (4.6.2.1)"
#define Module_HelpVersion              "3.22 (07 Dec 2000) (4.6.2.1)"
@


4.5
log
@  Merge of Ursula branch to the trunk.
Detail:
  This module represents the latest version of FileCore incorporating
    both the Ursula changes and the ROL changes as we have them to date.
  Changes from ROL-FileCore-3_21 are basically the stripping of trailling
    spaces and the change of Version to Module_Version in the conditionals.
    No other changes.
Admin:
  ROL branch tagged ROL_merge
  Ursula branch tagged Ursula_merge.
  Untested, but essentially the same as ROL-FileCore-3_21, so no problems
    expected.

Version 3.21. Tagged as 'FileCore-3_21'
@
text
@d1 1
a1 1
/* (3.21)
d6 1
a6 1
#define Module_MajorVersion_CMHG        3.21
d8 1
a8 1
#define Module_Date_CMHG                09 May 2000
d10 2
a11 2
#define Module_MajorVersion             "3.21"
#define Module_Version                  321
d13 1
a13 1
#define Module_Date                     "09 May 2000"
d15 1
a15 1
#define Module_FullVersion              "3.21"
@


4.4
log
@Service call table change only merged in from Ursula branch.

Version 3.01. Tagged as 'FileCore-3_01'
@
text
@d1 1
a1 1
/* (3.01)
d6 3
a8 3
#define Module_MajorVersion_CMHG     	3.01
#define Module_MinorVersion_CMHG	
#define Module_Date_CMHG      		05 Aug 1999
d10 4
a13 4
#define Module_MajorVersion     	"3.01"
#define Module_Version                  301
#define Module_MinorVersion		""
#define Module_Date      		"05 Aug 1999"
d15 1
a15 1
#define Module_FullVersion              "3.01"
@


4.3
log
@Changed to cope with new Hdr:CMOS

Version 3.00. Tagged as 'FileCore-3_00'
@
text
@d1 1
a1 1
/* (3.00)
d6 1
a6 1
#define Module_MajorVersion_CMHG     	3.00
d8 1
a8 1
#define Module_Date_CMHG      		19 Oct 1998
d10 2
a11 2
#define Module_MajorVersion     	"3.00"
#define Module_Version                  300
d13 1
a13 1
#define Module_Date      		"19 Oct 1998"
d15 1
@


4.2
log
@Spinner branch merged.
Makefile changed to use LocalRes$Path.
Changed to use srccommit.
StrongARM flag now set to :LNOT:STB

Version 2.99. Tagged as 'FileCore-2_99'
@
text
@d1 1
a1 1
/* (2.99)
d6 1
a6 1
#define Module_MajorVersion_CMHG     	2.99
d8 1
a8 1
#define Module_Date_CMHG      		21 Sep 1998
d10 2
a11 2
#define Module_MajorVersion     	"2.99"
#define Module_Version                  299
d13 1
a13 1
#define Module_Date      		"21 Sep 1998"
@


4.1
log
@created by srccommit.
@
text
@d1 1
a1 1
/* (2.98)
d6 1
a6 1
#define Module_MajorVersion_CMHG     	2.98
d10 2
a11 2
#define Module_MajorVersion     	"2.98"
#define Module_Version                  298
@
