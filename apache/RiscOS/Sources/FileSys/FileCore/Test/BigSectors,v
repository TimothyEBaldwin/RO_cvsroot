head	1.1;
access;
symbols
	FileCore-3_75:1.1
	FileCore-3_74:1.1
	FileCore-3_73:1.1
	FileCore-3_72:1.1
	FileCore-3_71:1.1
	FileCore-3_70:1.1
	FileCore-3_69:1.1
	FileCore-3_68:1.1
	FileCore-3_67:1.1
	FileCore-3_66:1.1
	FileCore-3_65:1.1
	FileCore-3_64:1.1
	FileCore-3_63:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.20.14.09.58;	author rsprowson;	state Exp;
branches;
next	;
commitid	qZtNVkGjzh5uqdYw;


desc
@@


1.1
log
@Add support for 2k and 4k sector sizes
s/Commands:
Make sure the defect list (via *DEFECT) does a read/modify/write of the boot block on 2k and 4k drives.
The checksum generation code was largely common and although commented to be called as though it was common wasn't actually due to a cut and paste mistake on label 37. Deleted common/uncalled code.
s/DebugOpts; s/FileCore15:
Peripheral changes.
s/FileCore20:
Read in the defect list via an intermediate buffer then copy out into the dynamic area.
s/FileCore70:
Declare the buffer size as 4k to FileSwitch, internally FileCore expresses this in a single byte * 32 so is now at the limit of the range of FcbBufSz.
s/FileCore80:
Perform transfers in the foreground when the sector size exceeds FileCore's 1k buffers. It's not worth bothering.
s/FormSWIs; s/Identify:
Vet and reject attempts to layout invalid zone/sector size combos (see Doc/1Zone).
Doc/MiscOp:
Correct a couple of calculation mistakes.
Doc/1Zone:
New documentation detailing the possible valid combinations of a 1 zone fixed disc, and why for 2k and 4k sectors this is rejected.
Test/BigSectors:
Patch to apply to RAMFS to make it a 4k filing system. Note, the smallest 2 zone RAM disc with 4k sectors is 4052kB, in which case the map is at +3F0000; copy at +3F2000; root directory object at +3F4000.

Version 3.63. Tagged as 'FileCore-3_63'
@
text
@--- RAMFS.RAMFS.s.RamFS50	Revision-4.14
+++ RAMFS.RAMFS.s.RamFS50	Test-RAMFS-with-4k-sectors
@@@@ -19,8 +19,15 @@@@
 
         TTL     "Initialisation and FS star commands"
 
+        GBLL FourKay
+FourKay SETL {TRUE}
+
 SkeletonDiscRec         ; fields marked * need filling in
+      [ FourKay
+        DCB     12      ; Log2SectorSize
+      |
         DCB     10      ; Log2SectorSize
+      ]
         DCB     1       ; SecPerTrk (this is a RAM disc, after all)
         DCB     1       ; Heads
         DCB     DensitySingle  ; Density
@@@@ -117,7 +124,11 @@@@
         MOV     r4, #0
         STMIA   r2, {r0,r3,r4}                  ; byte address 0 on drive 0
         MOV     r3, #0
+      [ FourKay
+        MOV     r4, #4096
+      |
         MOV     r4, #1024
+      ]
         LDR     r8, FileCorePrivate
         SWI     XFileCore_DiscOp64
         ADD     sp, sp, #SzExtendedDiscAddress
@@@@ -194,7 +205,11 @@@@
         ; r6 = number of bits in a zone
         ; r7 = number of allocation bits in the map
         ; r8 = ids per zone
+      [ FourKay
+Min_IdLen       *       12+3    ; min allowed idlen (with 4096 byte zones)
+      |
 Min_IdLen       *       10+3    ; min allowed idlen (with 1024 byte zones)
+      ]
       [ BigMaps
 Max_IdLen       *       19      ; max allowed idlen
       |
@@@@ -204,7 +219,11 @@@@
 Max_Log2bpmb    *       12      ; max allowed bytes per map bit
 Min_ZoneSpare   *       32      ; min allowed zonespare
 Max_ZoneSpare   *       64      ; max allowed zonespare
+      [ FourKay
+Min_Zones       *       2       ; min allowed zones
+      |
 Min_Zones       *       1       ; min allowed zones
+      ]
 Max_Zones       *       16      ; max allowed zones
 
         MOV     r0, #Min_Log2bpmb                ; init log2bpmb
@
