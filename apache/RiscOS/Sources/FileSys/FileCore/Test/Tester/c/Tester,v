head	4.3;
access;
symbols
	FileCore-3_75:4.3
	FileCore-3_74:4.3
	FileCore-3_73:4.3
	FileCore-3_72:4.3
	FileCore-3_71:4.3
	FileCore-3_70:4.3
	FileCore-3_69:4.3
	FileCore-3_68:4.3
	FileCore-3_67:4.3
	FileCore-3_66:4.2
	FileCore-3_65:4.2
	FileCore-3_64:4.2
	FileCore-3_63:4.2
	FileCore-3_62:4.2
	FileCore-3_61:4.2
	FileCore-3_60:4.2
	FileCore-3_59:4.2
	FileCore-3_58:4.2
	FileCore-3_57:4.2
	FileCore-3_56:4.2
	FileCore-3_55:4.1
	FileCore-3_54:4.1
	FileCore-3_53:4.1
	FileCore-3_52:4.1
	FileCore-3_51:4.1
	FileCore-3_50:4.1
	FileCore-3_49:4.1
	FileCore-3_48:4.1
	FileCore-3_47:4.1
	FileCore-3_46:4.1
	FileCore-3_45:4.1
	FileCore-3_44:4.1
	FileCore-3_43:4.1
	FileCore-3_42:4.1
	FileCore-3_41:4.1
	FileCore-3_40:4.1
	FileCore-3_39:4.1
	FileCore-3_38:4.1
	FileCore-3_37:4.1
	FileCore-3_36:4.1
	FileCore-3_35:4.1
	FileCore-3_34:4.1
	FileCore-3_33:4.1
	RO_5_07:4.1
	FileCore-3_32:4.1
	FileCore-3_31:4.1
	FileCore-3_30:4.1
	FileCore-3_29:4.1
	FileCore-3_28:4.1
	FileCore-3_25-4_9_2_2:4.1
	FileCore-3_27:4.1
	FileCore-3_26:4.1
	FileCore-3_22-4_6_2_1:4.1
	bavison_FileCore-3_22_dev_bp:4.1
	bavison_FileCore-3_22:4.1.0.14
	FileCore-3_25-4_9_2_1:4.1
	HAL:4.1.0.12
	FileCore-3_25:4.1
	FileCore-3_24:4.1
	FileCore-3_23:4.1
	dellis_autobuild_BaseSW:4.1
	FileCore-3_22:4.1
	Ursula_merge:4.1
	ROL_merge:4.1
	FileCore-3_21:4.1
	ROL_Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	ROL_FileCore-3_21:4.1
	ROL_FileCore-3_20:4.1
	ROL:4.1.0.10
	ROL_bp:4.1
	Ursula_RiscPC_bp:4.1
	FileCore-3_18:4.1
	FileCore-3_01:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	FileCore-3_00:4.1
	FileCore-2_99:4.1
	aglover_FileCore-3_17:4.1
	sproven_FileCore-3_16:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	sproven_FileCore-3_15:4.1
	sproven_314:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_313:4.1
	sproven_3_11:4.1
	sproven_3_10:4.1
	sproven_Ursula_3_09:4.1
	sproven_3_07:4.1
	sproven_3_06:4.1
	sproven_3_05:4.1
	sproven_3_04:4.1
	Spinner_RCA116:4.1.7.1
	sproven_3_03:4.1
	sproven_3_02:4.1
	sproven_3_01:4.1
	sproven_2_99:4.1
	sproven_2_98:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.06.02.17.02.35;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	gnlSG4qu5t4tqSny;

4.2
date	2013.02.24.21.09.03;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	rgJG8ZFRF8o9ruFw;

4.1
date	96.11.05.09.32.30;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.30;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.42.43;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.35.03;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.31.48;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Delete erroneous debug
FSBash shouldn't stop after 65536 goes, it should continue until the drive is full or Escape pressed.
Not tagged.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"
#include "tester.h"
#include "logger.h"
#include "version.h"
#include "mymalloc.h"

char **path_roots;
int number_of_paths;
int problems;
static int gotfull = No;
int nest_probability = 0x200;
char random_data_area[ RandomDataAmount ];
char random_write_result[ RandomDataAmount ];

void pout_error( _kernel_oserror *err )
{
        if ( (err->errnum & FileError_Mask) == Error_Full )
        {
                gotfull = Yes;
        }
        else
        {
                problems++;
        }
        logprintf( "error number %x: %s ", err->errnum, err->errmess );
}

void check_regs_unchanged( _kernel_swi_regs *oldr, _kernel_swi_regs *newr, int mask )
{
        int i;

        for ( i = 0;
              mask;
              i++, (mask = mask >> 1) )
        {
                if ( (mask & 1) &&
                        oldr->r[i] != newr->r[i] )
                {
                        problems++;
                        logprintf( "r%d changed from %x to %x ", i, oldr->r[i], newr->r[i] );
                }
        }
}

/*
        mask controls what is checked:
        Bit     info
        0       object type
        1       load address
        2       exec address
        3       file length
        4       attributes
        5       file type
        6       date stamp
*/
void check_catalogue_info( char *name, int type, int load, int exec, unsigned int length, int attributes, int mask )
{
        _kernel_oserror *err;
        _kernel_swi_regs r;

        r.r[0] = 17;
        r.r[1] = (int)name;
        err = _kernel_swi( OS_File, &r, &r );
        if ( err )
        {
                problems++;
                pout_error( err );
        }
        else
        {
                if ( (mask & 1) &&
                        ((type == 0 && r.r[0] != 0) ||
                         (type == 1 && r.r[0] != 1 && r.r[0] != 3) ||
                         (type == 2 && r.r[0] != 2)) )
                {
                        problems++;
                        logprintf( "object type is %d, but expected %d ", r.r[0], type );
                }
                if ( (mask & 2) &&
                        r.r[2] != load &&
                        (r.r[2] & 0xfff00000) != 0xfff00000 )
                {
                        problems++;
                        logprintf( "load address is %#x, but expected %#x ", r.r[2], load );
                }
                if ( (mask & 4) &&
                        r.r[3] != exec &&
                        (r.r[2] & 0xfff00000) != 0xfff00000 )
                {
                        problems++;
                        logprintf( "execute address is %#x, but expected %#x ", r.r[3], exec );
                }
                if ( (mask & 8) &&
                        (unsigned int)r.r[4] != length )
                {
                        problems++;
                        logprintf( "length is %u, but expected %u ", (unsigned int)r.r[4], length );
                }
                if ( (mask & 16) &&
                        ((r.r[0] == 1 && (r.r[5] & 0xfffffff7) != (attributes & 0xfffffff7)) ||
                         (r.r[0] == 2 && (r.r[5] & 0xfffffff4) != (attributes & 0xfffffff4))) )
                {
                        /*
                                Mismatched attributes are only a problem if wr are wrong on a file
                        */
                        if ( r.r[0] == 1 && (r.r[5] & 0x00000003) != (attributes & 0x00000003) )
                        {
                                problems++;
                        }

                        logprintf( "attributes are %#x, but expected %#x ", r.r[5], attributes );
                }
                if ( (mask & 32) &&
                        (r.r[2] & 0xfff00) != (load & 0xfff00) )
                {
                        problems++;
                        logprintf( "file type is %#x, but expected %#x ", (r.r[2]>>8) & 0xfff, (load>>8) & 0xfff );
                }
                if ( mask & 64 )
                {
                        unsigned nh1;
                        unsigned nl1;
                        unsigned nh2;
                        unsigned nl2;

                        nh1 = load & 0xff;
                        nl1 = exec;
                        nh1 = (nh1 << 12) | (nl1 >> 20);           /* separate off the top 20 bits into nh */
                        nl1 = (nl1 & 0xfffff) | ((nh1%100)<<20);   /* place the low 20 bits plus the remainder of the high 20 bits in nl */
                        nh1 = ((nh1/100)<<20) + (nl1/100);         /* divide nh and shift back to top bits, and divide nl */
                        nl1 = (nl1%100);                          /* get the remainder and scale to 1/1000000 ths of a second */
                        nh2 = r.r[2] & 0xff;
                        nl2 = r.r[3];
                        nh2 = (nh2 << 12) | (nl2 >> 20);           /* separate off the top 20 bits into nh */
                        nl2 = (nl2 & 0xfffff) | ((nh2%100)<<20);   /* place the low 20 bits plus the remainder of the high 20 bits in nl */
                        nh2 = ((nh2/100)<<20) + (nl2/100);         /* divide nh and shift back to top bits, and divide nl */
                        nl2 = (nl2%100);                           /* get the remainder */

                        if ( nh1 != nh2 )
                        {
                                problems++;
                                logprintf( "date stamp is %#02x%08x, but expected %#02x%08x ", r.r[2] & 0xff, r.r[3], load & 0xff, exec );
                        }
                }
        }
}

static void check_openfiles( void )
{
        int i;
        _kernel_oserror *err;
        _kernel_swi_regs r;

        for ( i = 0; i < NumberOfOpenFiles; i++ )
        {
                if ( open_files[i].file )
                {
                        r.r[0] = 0;
                        r.r[1] = open_files[i].file;
                        err = _kernel_swi( OS_Args, &r, &r );

                        if ( err )
                        {
                                pout_error( err );
                                logprintf( "whilst checking open files on file %d\n", open_files[i].file );
                        }
                }
        }
}

int main( int argc, char *argv[] )
{
        int i = 0;
        char *name;
        int temp;
        int *file;
        char *from;
        char *to;
        char *attribs;
        _kernel_swi_regs r;
        char *dummy;
        int delcount = 0;
        int whichswitch;

        if ( argc < 4 )
        {
                printf( "%s <log file> <log file size> <test dir>[ <test dir>]*\n", argv[0] );
                printf( "Will bash those directories until one of the discs gets full\n" );
                printf( "The results will be placed in the log file, wrapping\n" );
                printf( "as soon as the specified size is reached. A 'END' string\n" );
                printf( "indicates the log file's end\n" );
                return 0;
        }

        path_roots = &argv[3];
        number_of_paths = argc-3;

        if ( !logger_start( argv[1], strtol( argv[2], &dummy, 0 )))
        {
                printf( "Logging failed to start\n" );
                return 1;
        }

        logprintf( "%s\n", version );

        while( 1 )
        {
                problems = 0;

                check_openfiles();

                logprintf( "%d) ", i );

                whichswitch = delcount ? (delcount--, 0) : (myrand() * 50) / 0x1000;
                switch( whichswitch )
                {
                case 0: /* delete object */
                        name = random_closed_object();
                        if ( name )
                        {
                                os_file6( name );
                                myfree( name );
                        }
                        break;

                case 1: /* create file load + execute */
                        name = new_random_path();
                        if ( name )
                        {
                                temp = (myrand() ^ (myrand()<<8));
                                os_file7( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        temp,
                                        temp + myrand() );
                                myfree( name );
                        }
                        break;

                case 2: /* create directory with default number of entries */
                        name = new_random_path();
                        if ( name )
                        {
                                os_file8( name, 0 );
                                myfree( name );
                        }
                        break;

                case 3:
                        name = random_object();
                        if ( name )
                        {
                                os_file1( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        random_attributes() );
                                myfree( name );
                        }
                        break;

                case 4:
                        name = random_object();
                        if ( name )
                        {
                                os_file2( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20) );
                                myfree( name );
                        }
                        break;

                case 5:
                        name = random_object();
                        if ( name )
                        {
                                os_file3( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20) );
                                myfree( name );
                        }
                        break;

                case 6:
                        name = random_object();
                        if ( name )
                        {
                                os_file4( name,
                                        random_attributes() );
                                myfree( name );
                        }
                        break;

                case 7:
                        name = random_file();
                        if ( name )
                        {
                                os_file9( name );
                                myfree( name );
                        }
                        break;

                case 8:
                        name = random_file();
                        if ( name )
                        {
                                os_file18( name,
                                        myrand() );
                                myfree( name );
                        }
                        break;

                case 9:
                        name = new_random_path();
                        if ( name )
                        {
                                os_file0( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        myrand() );
                                myfree( name );
                        }
                        break;

                case 10:
                        name = new_random_path();
                        if ( name )
                        {
                                os_file10( name,
                                        myrand(),
                                        myrand() );
                                myfree( name );
                        }
                        break;

                case 11:
                        name = new_random_path();
                        if ( name )
                        {
                                temp = (myrand() ^ (myrand()<<8));
                                os_file11( name,
                                        myrand(),
                                        temp,
                                        temp + myrand() );
                                myfree( name );
                        }
                        break;

                case 12:
                        name = random_object();
                        if ( name )
                        {
                                os_file17( name );
                                myfree( name );
                        }
                        break;

                case 13:
                        name = random_closed_file();
                        if ( name )
                        {
                                os_file16( name );
                                myfree( name );
                        }
                        break;

                case 14:
                        name = random_directory();
                        if ( name )
                        {
                                os_fscontrol0( name );
                                myfree( name );
                        }
                        break;

                case 15:
                        name = random_directory();
                        if ( name )
                        {
                                os_fscontrol1( name );
                                myfree( name );
                        }
                        break;

                case 16:
                        name = random_directory();
                        if ( name )
                        {
                                os_fscontrol5( name );
                                myfree( name );
                        }
                        break;

                case 17:
                        name = random_directory();
                        if ( name )
                        {
                                os_fscontrol6( name );
                                myfree( name );
                        }
                        break;

                case 18:
                        os_fscontrol7();
                        break;

                case 19:
                        os_fscontrol8();
                        break;

                case 20:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args0( file );
                        }
                        break;

                case 21:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args1( file, myrand() * 2 ^ myrand() );
                        }
                        break;

                case 22:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args2( file );
                        }
                        break;

                case 23:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args3( file, myrand() * 2 ^ myrand() );
                        }
                        break;

                case 24:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args4( file );
                        }
                        break;

                case 25:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args5( file );
                        }
                        break;

                case 26:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args6( file, myrand() * 2 ^ myrand() );
                        }
                        break;

                case 27:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args255( file );
                        }
                        break;

                case 28:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_bget( file );
                        }
                        break;

                case 29:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_bput( file, (char)(myrand() & 0xff) );
                        }
                        break;

                case 30:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_gbpb2( file, myrand());
                        }
                        break;

                case 31:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_gbpb1( file, myrand(), myrand() );
                        }
                        break;

                case 32:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_gbpb4( file, myrand() );
                        }
                        break;

                case 33:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_gbpb3( file, myrand(), myrand() );
                        }
                        break;

                case 34:
                        os_gbpb5();
                        break;

                case 35:
                        os_gbpb6();
                        break;

                case 36:
                        os_gbpb7();
                        break;

                case 37:
                        os_gbpb8( myrand() & 0x3f );
                        break;

                case 38:
                        name = random_directory();
                        if ( name )
                        {
                                os_gbpb9( name, myrand() & 0x3f );
                                myfree( name );
                        }
                        break;

                case 39:
                        name = random_directory();
                        if ( name )
                        {
                                os_gbpb10( name, myrand() & 0x3f );
                                myfree( name );
                        }
                        break;

                case 40:
                        name = random_directory();
                        if ( name )
                        {
                                os_gbpb11( name, myrand() & 0x3f );
                                myfree( name );
                        }
                        break;

                case 41:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_findclose( file );
                                *file = 0;
                        }
                        break;

                case 42:
                        name = random_closed_file();
                        if ( name )
                        {
                                os_findin( name );
                                myfree( name );
                        }
                        break;

                case 43:
                        name = random_closed_file();
                        if ( name )
                        {
                                os_findout( name );
                                myfree( name );
                        }
                        break;

                case 44:
                        name = random_closed_file();
                        if ( name )
                        {
                                os_findup( name );
                                myfree( name );
                        }
                        break;

                case 45:
                        name = random_object();
                        if ( name )
                        {
                                os_fscontrol9( name );
                                myfree( name );
                        }
                        break;

                case 46:
                        name = random_object();
                        if ( name )
                        {
                                attribs = random_attribs();
                                if ( attribs )
                                {
                                        os_fscontrol24( name, attribs );
                                        myfree( attribs );
                                }
                                myfree( name );
                        }
                        break;

                case 47:
                        from = random_object();
                        if ( from )
                        {
                                to = new_random_path();
                                if ( to )
                                {
                                        os_fscontrol25( from, to );
                                        myfree( to );
                                }
                                myfree( from );
                        }
                        break;

                case 48:
                        name = random_object();
                        if ( name )
                        {
                                os_fscontrol32( name );
                                myfree( name );
                        }
                        break;

                case 49:
                        name = new_random_path();
                        if ( name )
                        {
#if BigFiles
                                big_file_test( name );
#endif                                
                                myfree( name );
                        }
                        break;

                }

                if ( problems )
                        break;

                if ( gotfull )
                {
                        gotfull = No;
                        delcount = 100 + myrand()>>4;
                }

                i++;
        }

        logprintf( "current open files are:\nHandle  Name\n" );

        for ( i = 0;
              i < NumberOfOpenFiles;
              i++ )
        {
                if ( open_files[ i ].file )
                {
                        logprintf( "%-8d%s\n", open_files[ i ].file, open_files[ i ].name );

                        r.r[0] = 0;
                        r.r[1] = open_files[ i ].file;

                        _kernel_swi( OS_Find, &r, &r );
                }
        }

        logger_stop();

        return 0;
}
@


4.2
log
@Extend upper permissable file size to 4GB-1
Tested for ~200,000 cycles in various configurations with FSBash, with no integrity problems, nor bad maps. However, background transfers (currently only used by ADFS) is still being endurance tested, hence is currently disabled.
Users should note that they can create big files without needing to reformat their drives, however if reverting to an older copy of FileCore the files must not be opened, loaded, or deleted (it's fine to view the directory, just don't expect old FileCore to know how to parse such long fragment runs).
Current versions of DiscKnight (1.49) do not understand long fragment runs.

FSBash
------
* Reviewed and expunged various signed comparisons of file pointers in the existing tests
* Added new tests for big files which attempt to aggrevate all the usual problems passing over and up to important boundaries
* Makefile recreated from fragments
* Some compiler warning squashed

Docs
----
* Some notes added for big file support

Misc
----
Commands: swapped to using Command macro
HelpText: labels renamed to help Command macro
GenSWIs: text table name for SectorDiscOp ammended to match exported header and corresponding secondary module names (ADFS_SectorDiscOp et al). The usefulness of calling the base instantiation of FileCore_SectorDiscOp is minimal, especially from BASIC.
Messages: message for attempting to check an old map disc made less terse
hdr/FileCore: typo

Version 3.56. Tagged as 'FileCore-3_56'
@
text
@a686 1
if(i==65536) break;//131 wierd file x{5}PG
@


4.1
log
@Initial revision
@
text
@d29 1
a29 1
int gotfull = No;
d31 2
a32 3

char random_data_area[ 50000 ];
char random_write_result[ 50000 ];
d52 2
a53 2
                mask;
                i++, (mask = mask >> 1) )
d75 1
a75 1
void check_catalogue_info( char *name, int type, int load, int exec, int length, int attributes, int mask )
d82 1
a82 1
        err = _kernel_swi( XOS_Bit | OS_File, &r, &r );
d113 1
a113 1
                        r.r[4] != length )
d116 1
a116 1
                        logprintf( "length is %d, but expected %d ", r.r[4], length );
d167 1
a167 1
void check_openfiles( void )
d179 1
a179 1
                        err = _kernel_swi( XOS_Bit | OS_Args, &r, &r );
d233 1
a233 1
                whichswitch = delcount ? (delcount--, 0) : (myrand() * 49) / 0x1000;
d664 11
d687 1
d693 2
a694 2
                i < NumberOfOpenFiles;
                i++ )
d703 1
a703 1
                        _kernel_swi( XOS_Bit | OS_Find, &r, &r );
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
