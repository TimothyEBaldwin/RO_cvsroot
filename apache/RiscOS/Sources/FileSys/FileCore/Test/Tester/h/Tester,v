head	4.2;
access;
symbols
	FileCore-3_75:4.2
	FileCore-3_74:4.2
	FileCore-3_73:4.2
	FileCore-3_72:4.2
	FileCore-3_71:4.2
	FileCore-3_70:4.2
	FileCore-3_69:4.2
	FileCore-3_68:4.2
	FileCore-3_67:4.2
	FileCore-3_66:4.2
	FileCore-3_65:4.2
	FileCore-3_64:4.2
	FileCore-3_63:4.2
	FileCore-3_62:4.2
	FileCore-3_61:4.2
	FileCore-3_60:4.2
	FileCore-3_59:4.2
	FileCore-3_58:4.2
	FileCore-3_57:4.2
	FileCore-3_56:4.2
	FileCore-3_55:4.1
	FileCore-3_54:4.1
	FileCore-3_53:4.1
	FileCore-3_52:4.1
	FileCore-3_51:4.1
	FileCore-3_50:4.1
	FileCore-3_49:4.1
	FileCore-3_48:4.1
	FileCore-3_47:4.1
	FileCore-3_46:4.1
	FileCore-3_45:4.1
	FileCore-3_44:4.1
	FileCore-3_43:4.1
	FileCore-3_42:4.1
	FileCore-3_41:4.1
	FileCore-3_40:4.1
	FileCore-3_39:4.1
	FileCore-3_38:4.1
	FileCore-3_37:4.1
	FileCore-3_36:4.1
	FileCore-3_35:4.1
	FileCore-3_34:4.1
	FileCore-3_33:4.1
	RO_5_07:4.1
	FileCore-3_32:4.1
	FileCore-3_31:4.1
	FileCore-3_30:4.1
	FileCore-3_29:4.1
	FileCore-3_28:4.1
	FileCore-3_25-4_9_2_2:4.1
	FileCore-3_27:4.1
	FileCore-3_26:4.1
	FileCore-3_22-4_6_2_1:4.1
	bavison_FileCore-3_22_dev_bp:4.1
	bavison_FileCore-3_22:4.1.0.14
	FileCore-3_25-4_9_2_1:4.1
	HAL:4.1.0.12
	FileCore-3_25:4.1
	FileCore-3_24:4.1
	FileCore-3_23:4.1
	dellis_autobuild_BaseSW:4.1
	FileCore-3_22:4.1
	Ursula_merge:4.1
	ROL_merge:4.1
	FileCore-3_21:4.1
	ROL_Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	ROL_FileCore-3_21:4.1
	ROL_FileCore-3_20:4.1
	ROL:4.1.0.10
	ROL_bp:4.1
	Ursula_RiscPC_bp:4.1
	FileCore-3_18:4.1
	FileCore-3_01:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	FileCore-3_00:4.1
	FileCore-2_99:4.1
	aglover_FileCore-3_17:4.1
	sproven_FileCore-3_16:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	sproven_FileCore-3_15:4.1
	sproven_314:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_313:4.1
	sproven_3_11:4.1
	sproven_3_10:4.1
	sproven_Ursula_3_09:4.1
	sproven_3_07:4.1
	sproven_3_06:4.1
	sproven_3_05:4.1
	sproven_3_04:4.1
	Spinner_RCA116:4.1.7.1
	sproven_3_03:4.1
	sproven_3_02:4.1
	sproven_3_01:4.1
	sproven_2_99:4.1
	sproven_2_98:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2013.02.24.21.09.06;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	rgJG8ZFRF8o9ruFw;

4.1
date	96.11.05.09.32.31;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.31;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.42.56;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.35.08;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.31.52;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Extend upper permissable file size to 4GB-1
Tested for ~200,000 cycles in various configurations with FSBash, with no integrity problems, nor bad maps. However, background transfers (currently only used by ADFS) is still being endurance tested, hence is currently disabled.
Users should note that they can create big files without needing to reformat their drives, however if reverting to an older copy of FileCore the files must not be opened, loaded, or deleted (it's fine to view the directory, just don't expect old FileCore to know how to parse such long fragment runs).
Current versions of DiscKnight (1.49) do not understand long fragment runs.

FSBash
------
* Reviewed and expunged various signed comparisons of file pointers in the existing tests
* Added new tests for big files which attempt to aggrevate all the usual problems passing over and up to important boundaries
* Makefile recreated from fragments
* Some compiler warning squashed

Docs
----
* Some notes added for big file support

Misc
----
Commands: swapped to using Command macro
HelpText: labels renamed to help Command macro
GenSWIs: text table name for SectorDiscOp ammended to match exported header and corresponding secondary module names (ADFS_SectorDiscOp et al). The usefulness of calling the base instantiation of FileCore_SectorDiscOp is minimal, especially from BASIC.
Messages: message for attempting to check an old map disc made less terse
hdr/FileCore: typo

Version 3.56. Tagged as 'FileCore-3_56'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
extern void pout_error( _kernel_oserror *err );
extern void check_regs_unchanged( _kernel_swi_regs *oldr, _kernel_swi_regs *newr, int mask );
extern void check_catalogue_info( char *name, int type, int load, int exec, unsigned int length, int attributes, int mask );
extern void big_file_test( char *name );
extern int myrand( void );
extern char *random_filename( void );
extern int random_attributes( void );
extern char *random_attribs( void );
extern char *random_directory( void );
extern char *random_file( void );
extern char *random_object( void );
extern char *new_random_path( void );

#define Yes               1
#define No                0
#define BigFiles          Yes
#define NumberOfOpenFiles 20
#define RandomDataAmount  50000
typedef struct OpenFile
{
        int file;
        char *name;
}       OpenFile;
extern OpenFile open_files[ NumberOfOpenFiles ];

extern OpenFile *random_open( void );
extern void close_open( OpenFile *f );
extern int *random_closed( void );
extern void ensure_closed( char *name );
extern int *random_open_file( void );
extern char *random_closed_file( void );
extern char *random_closed_object( void );
extern int problems;
extern char **path_roots;
extern int number_of_paths;
extern int nest_probability;
extern char random_data_area[ RandomDataAmount ];
extern char random_write_result[ RandomDataAmount ];
extern void os_file0( char *name, int load, int exec, unsigned int length );
extern void os_file1( char *name, int load, int exec, int attributes );
extern void os_file2( char *name, int load );
extern void os_file3( char *name, int exec );
extern void os_file4( char *name, int attributes );
extern void os_file6( char *name );
extern void os_file7( char *name, int load, int exec, unsigned int start, unsigned int end );
extern void os_file8( char *name, int ents );
extern void os_file9( char *name );
extern void os_file10( char *name, int type, unsigned int length );
extern void os_file11( char *name, int type, unsigned int start, unsigned int end );
extern void os_file16( char *name );
extern void os_file17( char *name );
extern void os_file18( char *name, int type );
extern void os_args0( int *file );
extern void os_args1( int *file, unsigned int pointer );
extern void os_args2( int *file );
extern void os_args3( int *file, unsigned int extent );
extern void os_args4( int *file );
extern void os_args5( int *file );
extern void os_args6( int *file, unsigned int ensure );
extern void os_args255( int *file );
extern void os_bget( int *file );
extern void os_bput( int *file, char byte );
extern void os_gbpb1( int *file, unsigned int size, unsigned int location );
extern void os_gbpb2( int *file, unsigned int size );
extern void os_gbpb3( int *file, unsigned int size, unsigned int location );
extern void os_gbpb4( int *file, unsigned int size );
extern void os_gbpb5( void );
extern void os_gbpb6( void );
extern void os_gbpb7( void );
extern void os_gbpb8( int number );
extern void os_gbpb9( char *name, int number );
extern void os_gbpb10( char *name, int number );
extern void os_gbpb11( char *name, int number );
extern void os_findclose( int *file );
extern void os_findin( char *file );
extern void os_findout( char *file );
extern void os_findup( char *file );
extern void os_fscontrol0( char *name );
extern void os_fscontrol1( char *name );
extern void os_fscontrol5( char *name );
extern void os_fscontrol6( char *name );
extern void os_fscontrol7( void );
extern void os_fscontrol8( void );
extern void os_fscontrol9( char *file );
extern void os_fscontrol24( char *file, char *opts );
extern void os_fscontrol25( char *from, char *to );
extern void os_fscontrol32( char *file );
#define FileError_Mask                  0xff00ff
#define Error_AccessViolation           0xbd
#define Error_FSAccessViolation         0x0100bd
#define Error_NotOpenForUpdate          0xc1
#define Error_OutsideFile               0xb7
#define Error_Locked                    0x100c3
#define Error_FSLocked                  0xc3
#define Error_TypesDontMatch            0x100c5
#define Error_DirNotEmpty               0x100b4
#define Error_EndOfFile                 0xdf
#define Error_CantDeleteCurrent         0x10096
#define Error_CantDeleteLibrary         0x10097
#define Error_NotSameDisc               0x1009f
#define Error_DoesNotExist              0x0100d6
#define Error_FSDoesNotExist            0xd6
#define Error_NotOpenForReading         0x413
#define ErrorNumber_NFS_directory_unset 0x012114
#define Error_NotFound                  0xd6
#define Error_BadRENAME                 0x0100b0
#define Error_DirectoryFull             0x0100b3
#define Error_FileOpen                  0x0100c2
#define Error_Full                      0x0100c6
@


4.1
log
@Initial revision
@
text
@d17 2
a18 1
extern void check_catalogue_info( char *name, int type, int load, int exec, int length, int attributes, int mask );
d28 3
d32 1
d51 3
a53 3
extern char random_data_area[ 50000 ];
extern char random_write_result[ 50000 ];
extern void os_file0( char *name, int load, int exec, int length );
d59 1
a59 1
extern void os_file7( char *name, int load, int exec, int start, int end );
d62 2
a63 2
extern void os_file10( char *name, int type, int length );
extern void os_file11( char *name, int type, int start, int end );
d68 1
a68 1
extern void os_args1( int *file, int pointer );
d70 1
a70 1
extern void os_args3( int *file, int extent );
d73 1
a73 1
extern void os_args6( int *file, int ensure );
d77 4
a80 4
extern void os_gbpb2( int *file, int size );
extern void os_gbpb1( int *file, int size, int location );
extern void os_gbpb4( int *file, int size );
extern void os_gbpb3( int *file, int size, int location );
d102 16
a117 17
#define FileError_Mask 0xff00ff
#define Error_AccessViolation 0xbd
#define Error_FSAccessViolation 0x0100bd
#define Error_NotOpenForUpdate 0xc1
#define Error_OutsideFile 0xb7
#define Error_FileOpen 0x0100c2
#define Error_Locked 0x100c3
#define Error_FSLocked 0xc3
#define Error_TypesDontMatch 0x100c5
#define Error_DirNotEmpty 0x100b4
#define Error_EndOfFile 0xdf
#define Error_CantDeleteCurrent 0x10096
#define Error_CantDeleteLibrary 0x10097
#define Error_NotSameDisc 0x1009f
#define Error_DoesNotExist 0x0100d6
#define Error_FSDoesNotExist 0xd6
#define Error_NotOpenForReading 0x413
d119 5
a123 7
#define Error_NotFound 0xd6
#define Error_BadRENAME 0x0100b0
#define Error_DirectoryFull 0x0100b3
#define Error_FileOpen 0x0100c2
#define Error_Full 0x0100c6
#define Yes 1
#define No 0
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
