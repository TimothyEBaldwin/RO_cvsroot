head	4.17;
access;
symbols
	FileCore-3_75:4.17
	FileCore-3_74:4.17
	FileCore-3_73:4.17
	FileCore-3_72:4.17
	FileCore-3_71:4.17
	FileCore-3_70:4.17
	FileCore-3_69:4.17
	FileCore-3_68:4.17
	FileCore-3_67:4.17
	FileCore-3_66:4.17
	FileCore-3_65:4.17
	FileCore-3_64:4.16
	FileCore-3_63:4.15
	FileCore-3_62:4.13
	FileCore-3_61:4.12
	FileCore-3_60:4.12
	FileCore-3_59:4.12
	FileCore-3_58:4.12
	FileCore-3_57:4.12
	FileCore-3_56:4.11
	FileCore-3_55:4.10
	FileCore-3_54:4.9
	FileCore-3_53:4.9
	FileCore-3_52:4.9
	FileCore-3_51:4.9
	FileCore-3_50:4.9
	FileCore-3_49:4.8
	FileCore-3_48:4.8
	FileCore-3_47:4.8
	FileCore-3_46:4.7
	FileCore-3_45:4.7
	FileCore-3_44:4.7
	FileCore-3_43:4.7
	FileCore-3_42:4.7
	FileCore-3_41:4.6
	FileCore-3_40:4.5
	FileCore-3_39:4.5
	FileCore-3_38:4.5
	FileCore-3_37:4.5
	FileCore-3_36:4.5
	FileCore-3_35:4.5
	FileCore-3_34:4.5
	FileCore-3_33:4.5
	RO_5_07:4.5
	FileCore-3_32:4.5
	FileCore-3_31:4.5
	FileCore-3_30:4.4
	FileCore-3_29:4.4
	FileCore-3_28:4.4
	FileCore-3_25-4_9_2_2:4.4
	FileCore-3_27:4.4
	FileCore-3_26:4.4
	FileCore-3_22-4_6_2_1:4.3
	bavison_FileCore-3_22_dev_bp:4.3
	bavison_FileCore-3_22:4.3.0.2
	FileCore-3_25-4_9_2_1:4.4
	HAL:4.4.0.2
	FileCore-3_25:4.4
	FileCore-3_24:4.4
	FileCore-3_23:4.4
	dellis_autobuild_BaseSW:4.3
	FileCore-3_22:4.3
	Ursula_merge:4.1.4.18
	ROL_merge:4.1.4.17.2.1
	FileCore-3_21:4.3
	ROL_Ursula_merge:4.1.4.17.2.1
	Ursula_RiscPC_merge:4.1.4.16
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.4
	ROL_FileCore-3_21:4.1.4.17.2.1
	ROL_FileCore-3_20:4.1.4.17.2.1
	ROL:4.1.4.17.0.2
	ROL_bp:4.1.4.17
	Ursula_RiscPC_bp:4.1.4.16
	FileCore-3_18:4.1.4.17
	FileCore-3_01:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.16
	Ursula_RiscPC:4.1.4.16.0.2
	FileCore-3_00:4.1
	FileCore-2_99:4.1
	aglover_FileCore-3_17:4.1.4.17
	sproven_FileCore-3_16:4.1.4.17
	rthornb_UrsulaBuild-19Aug1998:4.1.4.16
	UrsulaBuild_FinalSoftload:4.1.4.16
	rthornb_UrsulaBuild-12Aug1998:4.1.4.16
	aglover_UrsulaBuild-05Aug1998:4.1.4.16
	rthornb_UrsulaBuild-29Jul1998:4.1.4.16
	rthornb_UrsulaBuild-22Jul1998:4.1.4.16
	rthornb_UrsulaBuild-15Jul1998:4.1.4.16
	rthornb_UrsulaBuild-07Jul1998:4.1.4.16
	rthornb_UrsulaBuild-17Jun1998:4.1.4.16
	rthornb_UrsulaBuild-03Jun1998:4.1.4.16
	rthornb_UrsulaBuild-27May1998:4.1.4.16
	rthornb_UrsulaBuild-21May1998:4.1.4.16
	sproven_FileCore-3_15:4.1.4.16
	sproven_314:4.1.4.15
	rthornb_UrsulaBuild_01May1998:4.1.4.14
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_313:4.1.4.14
	sproven_3_11:4.1.4.12
	sproven_3_10:4.1.4.11
	sproven_Ursula_3_09:4.1.4.10
	sproven_3_07:4.1.4.8
	sproven_3_06:4.1.4.7
	sproven_3_05:4.1.4.6
	sproven_3_04:4.1.4.5
	Spinner_RCA116:4.1.7.1
	sproven_3_03:4.1.4.4
	sproven_3_02:4.1.4.3
	sproven_3_01:4.1.4.2
	sproven_2_99:4.1.4.1
	sproven_2_98:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.17
date	2015.02.02.15.19.45;	author bavison;	state Exp;
branches;
next	4.16;
commitid	GC6RWzDQ9CNqKr8y;

4.16
date	2014.11.02.17.25.24;	author rsprowson;	state Exp;
branches;
next	4.15;
commitid	afoCgwcyXTmkoDWx;

4.15
date	2013.07.20.14.10.01;	author rsprowson;	state Exp;
branches;
next	4.14;
commitid	qZtNVkGjzh5uqdYw;

4.14
date	2013.07.20.13.50.28;	author rsprowson;	state Exp;
branches;
next	4.13;
commitid	juzhxIfz9aZzjdYw;

4.13
date	2013.07.18.21.04.17;	author rsprowson;	state Exp;
branches;
next	4.12;
commitid	Em91CJgLrlPBMZXw;

4.12
date	2013.03.25.20.31.07;	author rsprowson;	state Exp;
branches;
next	4.11;
commitid	vCGDXb1zgPQnidJw;

4.11
date	2013.02.24.21.09.15;	author rsprowson;	state Exp;
branches;
next	4.10;
commitid	rgJG8ZFRF8o9ruFw;

4.10
date	2013.02.21.16.53.06;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	CCuV2tngKttj75Fw;

4.9
date	2012.04.14.00.43.17;	author bavison;	state Exp;
branches;
next	4.8;
commitid	xkSKw5i9HVYqOL0w;

4.8
date	2011.11.25.08.50.21;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	Wvsb4iMJaWIw2HIv;

4.7
date	2011.10.02.20.25.33;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	A9Zxco9ydo9FCOBv;

4.6
date	2011.09.13.19.13.15;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	PKTDORFkNFRVOmzv;

4.5
date	2003.04.03.18.33.28;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	2000.10.30.13.26.34;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2000.05.09.11.36.51;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.08.05.10.32.12;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.32.15;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.15;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.09.24;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.08.14.13.13.04;	author sproven;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	97.09.16.14.46.36;	author sproven;	state Exp;
branches;
next	4.1.4.3;

4.1.4.3
date	97.11.17.13.32.18;	author sproven;	state Exp;
branches;
next	4.1.4.4;

4.1.4.4
date	97.12.01.12.02.57;	author sproven;	state Exp;
branches;
next	4.1.4.5;

4.1.4.5
date	97.12.11.23.21.34;	author sproven;	state Exp;
branches;
next	4.1.4.6;

4.1.4.6
date	98.01.09.11.44.57;	author sproven;	state Exp;
branches;
next	4.1.4.7;

4.1.4.7
date	98.01.19.12.26.33;	author sproven;	state Exp;
branches;
next	4.1.4.8;

4.1.4.8
date	98.01.23.16.41.15;	author sproven;	state Exp;
branches;
next	4.1.4.9;

4.1.4.9
date	98.01.30.17.53.04;	author sproven;	state Exp;
branches;
next	4.1.4.10;

4.1.4.10
date	98.02.11.16.49.13;	author sproven;	state Exp;
branches;
next	4.1.4.11;

4.1.4.11
date	98.02.17.14.59.38;	author sproven;	state Exp;
branches;
next	4.1.4.12;

4.1.4.12
date	98.03.18.11.09.27;	author sproven;	state Exp;
branches;
next	4.1.4.13;

4.1.4.13
date	98.04.02.15.46.50;	author sproven;	state Exp;
branches;
next	4.1.4.14;

4.1.4.14
date	98.04.16.15.26.33;	author sproven;	state Exp;
branches;
next	4.1.4.15;

4.1.4.15
date	98.05.07.16.58.05;	author sproven;	state Exp;
branches;
next	4.1.4.16;

4.1.4.16
date	98.05.08.12.33.04;	author sproven;	state Exp;
branches;
next	4.1.4.17;

4.1.4.17
date	98.09.02.16.14.55;	author sproven;	state Exp;
branches
	4.1.4.17.2.1;
next	4.1.4.18;

4.1.4.18
date	2000.05.09.10.55.19;	author sbrodie;	state Exp;
branches;
next	;

4.1.4.17.2.1
date	99.08.24.12.41.17;	author sbrodie;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.33.50;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.30.45;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.17
log
@  Fix abort affecting Raspberry Pi B+ and Raspberry Pi 2
Detail:
  These two boards don't have functional card detect lines on their microSD
  slots, so follow a different code path from most other RISC OS platforms.
  There was an issue when you accessed an object (other than the root
  directory) for which it (if it was a directory) or any of its parent
  directories were not in the directory cache, and it is specified by
  reference to disc name rather than drive number, and where the disc is not
  currently in a drive (or it's in a drive but hasn't been mounted since it
  was inserted). The additional PollChange inserted by DiscOp with a
  specified boot block (as used to identify the disc format when scanning
  drives to see if the disc in each drive has changed) which was intended to
  support some ADFS floppy drives had the side-effect with SDFS-type
  card-detect-less change detection (which has to wait until at least one
  DiscOp has been issued before it can tell if the card has changed) that
  FileCore's disc and drive records became unlinked part-way through the
  FullLookup routine. In later subroutines, this meant we ended up
  misidentifying the controller to which the disc was attached, and because
  SDFS didn't (until recently) have any hard discs, the hard disc controller
  was uninitialised, resulting in a data abort. This is fixed by making
  WhatDisc check for whether the disc record it's about to return has been
  delinked from the drive record, and repeat the process if so. Also removed
  some dead code (an alternate entry to WhatDiscCommon) while I was at it.
Admin:
  Tested on Raspberry Pi B+ and 2.

Version 3.65. Tagged as 'FileCore-3_65'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >DebugOpts

        TTL     "Debugging options"

        GBLL    BigDisc                 ; Increased space efficiency
BigDisc         SETL {TRUE}

        GBLL    BigShare                ; Look at share size in disc record
BigShare        SETL {TRUE}

        GBLL    BigFiles                ; Allow files up to 4G-1 in size
BigFiles        SETL {TRUE}

        GBLL    BigMaps                 ; Big free space maps (allowing idlen to be more than 15)
BigMaps         SETL {TRUE}

        GBLL    BigDir                  ; Big directories
BigDir          SETL {TRUE}

        GBLL    BigSectors              ; Allow sector sizes of 2kB and 4kB
BigSectors      SETL {TRUE}

        GBLL    DynamicMaps             ; Maps go in dynamic areas
DynamicMaps     SETL {TRUE}

        GBLL    BinaryChop              ; Faster search in big directories
BinaryChop      SETL {TRUE}

        GBLL    WriteCacheDir           ; Cached directories
WriteCacheDir   SETL {FALSE}

        GBLL    BigDirFullBackup
BigDirFullBackup SETL {FALSE}

        GBLL    DriveStatus             ; Use MiscOp_DriveStatus
DriveStatus     SETL {TRUE}

        GBLL    FullAtts                ; Extended attributes for new format dirs
FullAtts        SETL {TRUE}

        GBLL    NewErrors               ; Errors can be in top bit set addresses
NewErrors       SETL {TRUE}

        GBLL    ExtraSkew               ; Extra skew in F/G format floppies to suit Tungsten better
ExtraSkew       SETL {TRUE}

        GBLL    UseRMAForFCBs           ; Whether RMA or System heap is used for fcbs
UseRMAForFCBs   SETL {TRUE}

        GBLL    FixTBSAddrs             ; Updated semantics of scatter list to allow background transfer
FixTBSAddrs     SETL    {TRUE}          ; to/from top-bit set logical addresses
ScatterListNegThresh    *       &10000

        GBLL    FixTruncateOnBigDiscs
FixTruncateOnBigDiscs SETL {TRUE}

        GBLL    RO3Paths                ; Assume fileswitch does path resolution
RO3Paths SETL {TRUE}

        GBLL    ReadMapDuringIdentify   ; Save time by prereading the map
ReadMapDuringIdentify SETL {TRUE}

        GBLL    Dev                     ; Extra code to do postmortem when things go bang
Dev     SETL    {FALSE}

        GBLL    Debug                   ; Debugging printout
Debug   SETL    {FALSE} :LOR: Dev

        GBLL    ExceptionTrap
        GBLL    VduTrap
        GBLL    SpoolOff
        GBLL    IrqDebug
        GBLL    DebugSwitch
ExceptionTrap   SETL Dev :LAND: {FALSE}
ExceptionTrap   SETL Dev :LAND: {FALSE}
VduTrap         SETL Dev :LAND: {FALSE}
SpoolOff        SETL Dev :LAND: {TRUE}
IrqDebug        SETL Dev :LAND: {TRUE}
DebugSwitch     SETL Dev :LAND: {FALSE}

        MACRO
$a      switch  $b
        GBLL    $a
$a      SETL    $b :LAND: Debug
        MEND

Debug1  switch  {FALSE} ; communication with parent module
Debug2  switch  {FALSE} ; SWI call processing
Debug2D switch  {FALSE} ; DiscOp SWI call processing
Debug3  switch  {FALSE} ; disc accesses
Debug3L switch  {FALSE} ; low level discops into parent
Debug4  switch  {FALSE} ; disc and drive record operations
Debug5  switch  {FALSE} ; old free space map operations
Debug6  switch  {FALSE} ; pathname and directory operations
Debug6f switch  {FALSE} ; FindDiscByName
Debug7  switch  {FALSE} ; OsFile operations
Debug8  switch  {FALSE} ; File Level Disc Ops
Debug9  switch  {FALSE} ; Misc useful routines
DebugA  switch  {FALSE} ; OsFun operations
DebugB  switch  {FALSE} ; Random access files
DebugBA switch  {FALSE} ; OS_Args specifically
DebugBE switch  {FALSE} ; BPut/BGet entry
DebugBc switch  {FALSE} ; CloseAllByDisc
DebugBe switch  {FALSE} ; Ensure file size
DebugBv switch  {FALSE} ; Random access files verbose - details of PutBytes and GetBytes
DebugBs switch  {FALSE} ; Open file new map allocated size
DebugBt switch  {FALSE} ; Random access file I/O terse
DebugC  switch  {FALSE} ; Directory cache
DebugD  switch  {FALSE} ; Scatter buffer
DebugE  switch  {FALSE} ; new free space map
DebugEa switch  {FALSE} ; new free space map random extension
DebugEx switch  {FALSE} ; verbose new free space map
DebugEs switch  {FALSE} ; debugging of SortDir use in NewClaimFree
DebugF  switch  {FALSE} ; new free space map: auto compact
DebugFx switch  {FALSE} ; new free space map: check for this bug [switch broken!]
DebugG  switch  {FALSE} ; verbose file cache
DebugGu switch  {FALSE} ; UpdateProcess only
DebugGs switch  {FALSE} ; UpdateProcess scatter list ends only
DebugH  switch  {FALSE} ; terse file cache
DebugI  switch  {FALSE} ; terse FIQ claim/release
DebugJ  switch  {FALSE} ; file cache consistency checks
DebugK  switch  {FALSE} ; setting of Interlocks
DebugL  switch  {FALSE} ; Mounting/Identifying/Dismounting/Verifying
DebugLi switch  {FALSE} ; Changes to DiscId information in disc records
DebugLm switch  {FALSE} ; matching disc against other records
DebugM  switch  {FALSE} ; CachedReadSector disc op
DebugMt switch  {FALSE} ; MultiFS extensions (terse)
DebugN  switch  {FALSE} ; Disc insertion / request for insertion thread
DebugO  switch  {FALSE} ; MultiFS extensions - formatting SWIs
DebugP  switch  {FALSE} ; Process activation/deactivation
DebugQ  switch  {FALSE} ; *-commands
DebugR  switch  {FALSE} ; reentrance
DebugU  switch  {FALSE} ; UpCall
Debugb  switch  {FALSE} ; break key action updates
DebugDR switch  {FALSE} ; check array bounds on drive and disc record ptr calculation
DebugDL switch  {FALSE} ; check for data lost problems with atapi
DebugX  switch  {FALSE} ; debug long filenames
DebugXg switch  {FALSE} ; debug long filenames - growin dirs
DebugXm switch  {FALSE} ; debug long filenames - memory problems
DebugXb switch  {FALSE} ; debug long filenames - binary chop dir search
DebugXr switch  {FALSE} ; debug long filenames - rename
DebugXd switch  {FALSE} ; debug long filenames - directory names
DebugCW switch  {FALSE} ; debug write cacheing of dirs

        MACRO
        DumpDiscRecs
        Push    "r0-r2"
        MOV     r0,#0
01
        BREG    r0,"DiscRec ",cc
        DiscRecPtr r1,r0
        LDRB    r2,[r1,#DiscFlags]
        BREG    r2," DiscFlags ",cc
        LDRB    r2,[r1,#Priority]
        BREG    r2," Priority ",cc
        LDRB    r2,[r1,#DiscsDrv]
        BREG    r2," DiscsDrv ",cc
        LDRB    r2,[r1,#DiscUsage]
        BREG    r2," DiscUsage "
        ADD     r0,r0,#1
        CMP     r0,#8
        BNE     %BT01
        Pull    "r0-r2"
        MEND

        MACRO
        DumpDrvRecs
        Push    "r0-r2"
        MOV     r0,#0
01
        BREG    r0,"DrvRec ",cc
        DrvRecPtr r1,r0
        LDRB    r2,[r1,#DrvsDisc]
        BREG    r2," DrvsDisc ",cc
        LDRB    r2,[r1,#DrvFlags]
        BREG    r2," DrvFlags ",cc
        LDRB    r2,[r1,#LockCount]
        BREG    r2," LockCount ",cc
        LDR     r2,[r1,#ChangedSeqNum]
        DREG    r2, " ChangedSeqNum "
        ADD     r0,r0,#1
        CMP     r0,#8
        BNE     %BT01
        Pull    "r0-r2"
        MEND

        GBLS    NeedHdrDebug
        GBLS    NeedHdrProc
        GBLS    NeedHdrHostFS
      [ Debug
NeedHdrProc     SETS "GET Hdr:Proc"
NeedHdrDebug    SETS "GET Hdr:Debug"
      |
NeedHdrDebug    SETS "; No"
NeedHdrProc     SETS "; No"
      ]
      [ :DEF: Host_Debug
Host_Debug      SETL {FALSE}
Debug_MaybeIRQ  SETL {FALSE}
NeedHdrHostFS   SETS "GET Hdr:HostFS"
      |
NeedHdrHostFS   SETS "; No"
      ]
        $NeedHdrProc
        $NeedHdrDebug
        $NeedHdrHostFS

        END
@


4.16
log
@Regroup some debug, comment corrections
Switch 'DebugM' now used exclusively for the read cached sectors disc op, and DebugMt for multifs extensions.
Various spelling mistakes corrected in passing.
Same (non debug) binary, retagged as FileCore-3_64.
@
text
@d159 42
@


4.15
log
@Add support for 2k and 4k sector sizes
s/Commands:
Make sure the defect list (via *DEFECT) does a read/modify/write of the boot block on 2k and 4k drives.
The checksum generation code was largely common and although commented to be called as though it was common wasn't actually due to a cut and paste mistake on label 37. Deleted common/uncalled code.
s/DebugOpts; s/FileCore15:
Peripheral changes.
s/FileCore20:
Read in the defect list via an intermediate buffer then copy out into the dynamic area.
s/FileCore70:
Declare the buffer size as 4k to FileSwitch, internally FileCore expresses this in a single byte * 32 so is now at the limit of the range of FcbBufSz.
s/FileCore80:
Perform transfers in the foreground when the sector size exceeds FileCore's 1k buffers. It's not worth bothering.
s/FormSWIs; s/Identify:
Vet and reject attempts to layout invalid zone/sector size combos (see Doc/1Zone).
Doc/MiscOp:
Correct a couple of calculation mistakes.
Doc/1Zone:
New documentation detailing the possible valid combinations of a 1 zone fixed disc, and why for 2k and 4k sectors this is rejected.
Test/BigSectors:
Patch to apply to RAMFS to make it a 4k filing system. Note, the smallest 2 zone RAM disc with 4k sectors is 4052kB, in which case the map is at +3F0000; copy at +3F2000; root directory object at +3F4000.

Version 3.63. Tagged as 'FileCore-3_63'
@
text
@d140 1
a140 1
DebugM  switch  {FALSE} ; MultiFS extensions
@


4.14
log
@Always UseBigFlag
Conditional now set in stone.
Not tagged.
@
text
@d34 3
@


4.13
log
@Minor tidy ups
Service call table made unconditional.
Typo in Hdr:FileCore corrected.
Comments improved, and other misc housekeeping.

Version 3.62. Tagged as 'FileCore-3_62'
@
text
@a24 3
        GBLL    UseBigFlag              ; Look at big flag in disc record
UseBigFlag      SETL {TRUE}

@


4.12
log
@Reenable background transfer support when BigFiles is {TRUE}
BigDirCode.s: Retire BigDirFix switch, it wasn't actually a fix, it was more that the directory format was changed early in development, but there's no point keeping support for the prototype any more
FileCore45.s/FileCore25.s/FileCore31.s/FileCore35.s/DebugOpts.s: Retire BigDirFix
Defns.s: Shock addition of some comments
FileCore.s: Manual inclusion of CPU/Arch no longer needed
FileCore70.s: Crucially apply the same 1k dead band to the FileSwitch "write zeros" entry point, since it (along with Get/PutBytes) are the only places file offsets get passed
FileCore80.s: Lots of tedious and subtle boundary cases fixed
InitDieSvc.s: Removed the disabling switch
doc/BigDisc/ADFSBuffer: Detail what the BufFlags mean

Tested on ADFS (the only background-transferring filing system about) with LFAUs of 2k, 4k, 8k, 16k and bashing 65536 iterations.

Version 3.57. Tagged as 'FileCore-3_57'
@
text
@a30 3
        GBLL    ServicePolice           ; Fast despatch table for service calls
ServicePolice   SETL {TRUE}

@


4.11
log
@Extend upper permissable file size to 4GB-1
Tested for ~200,000 cycles in various configurations with FSBash, with no integrity problems, nor bad maps. However, background transfers (currently only used by ADFS) is still being endurance tested, hence is currently disabled.
Users should note that they can create big files without needing to reformat their drives, however if reverting to an older copy of FileCore the files must not be opened, loaded, or deleted (it's fine to view the directory, just don't expect old FileCore to know how to parse such long fragment runs).
Current versions of DiscKnight (1.49) do not understand long fragment runs.

FSBash
------
* Reviewed and expunged various signed comparisons of file pointers in the existing tests
* Added new tests for big files which attempt to aggrevate all the usual problems passing over and up to important boundaries
* Makefile recreated from fragments
* Some compiler warning squashed

Docs
----
* Some notes added for big file support

Misc
----
Commands: swapped to using Command macro
HelpText: labels renamed to help Command macro
GenSWIs: text table name for SectorDiscOp ammended to match exported header and corresponding secondary module names (ADFS_SectorDiscOp et al). The usefulness of calling the base instantiation of FileCore_SectorDiscOp is minimal, especially from BASIC.
Messages: message for attempting to check an old map disc made less terse
hdr/FileCore: typo

Version 3.56. Tagged as 'FileCore-3_56'
@
text
@a48 3
        GBLL    BigDirFix               ; Get the size of big directories right
BigDirFix       SETL {TRUE}

@


4.10
log
@Comment clarifications and tidy up
Lots of missing function entry/exit register comments added/corrected.
Drive number extraction all now (32-3) to help see where changes are needed in future for more drives.
Removed redundant Tools/basic/BASH (see Test/BASH).
InitDieSvc/BigDirCode/DebugOpts/FileCore25: Comments
FileCore05: Use of DREG with no preceding text
FileCore15: Use of 'mess' with too few arguments
FileCore20: Fetching of NZones made consistent, 3 bit drive number made consistent
FileCore30/FileCore32: Simplify debug switches, driver number extraction, comments
FileCore31: Fetching of NZones made consistent
FileCore40/FileCore33/FileCore35: NZones, function arguments commented
FileCore45: Function arguments commented, debug reinstated
FileCore70/FileCore60: Function arguments commented, drive number extraction
FormSWIs: NZones
Identify/GenSWIs: Drive number extraction, debug tidy
MyMacros: Unused Align16 removed. Hacked DebugError macro to not try loading from internal error numbers all the time, which are often not aligned, or not in sensible memory places

Relatively few code changes, no expected issues.


Version 3.55. Tagged as 'FileCore-3_55'
@
text
@d28 2
a29 2
        GBLL    TwoGigFix               ; Clamp OS_Args at 2^31
TwoGigFix       SETL {TRUE}
a66 1

@


4.9
log
@  Miscellaneous improvements
Detail:
  * Added the ability for a filing system to specify to FileCore that floppy
    discs should be mounted like hard discs, to complement the existing flag
    that specifies the opposite. SDFS requires this. Ideally SCSIFS should
    start using this as well, to encapsulate boot block handling within
    FileCore.
  * Added header definitions so the FileCore and the filing systems can
    negotiate the use of a new MiscOp entry, needed as part of partitioning
    support, especially important for filing systems that use the hardware-
    specific section of the boot block, like ADFS. At present, FileCore
    doesn't do anything different (it still doesn't support partitions) but
    this enables filing systems to be modified in preparation.
  * Removed the only place where FileCore paid any attention to the
    EmptyWorks flag returned by MiscOp 1 - an obscure and not very useful
    edge case not used by any current filing systems.
  * Added 650 lines of documentation for the MiscOp SWI and low-level entry
    to the Doc directory, giving the information you need in order to
    implement a FileCore filing system.
  * Added missing header file definitions for the low-level background DiscOp
    reason code and the hot-plug drive removed flag to MiscOp 7.
  * Removed some RISC OS 2 legacy code whereby FileCore maintained its idea
    of the internal disc address of the CSD @@, PSD \, Library % and URD & for
    each filing system. Since RISC OS 3.00, FileSwitch handles these
    internally and passes canonicalised paths to FileCore, so FileCore's disc
    addresses for these directories remained unset. This allows some
    considerable simplification of FileCore's path parser in particular, but
    also affects other code like that which decides how to expire disc
    records. Also note that FileCore has been unable to generate certain
    errors (like "Can't delete current directory") since RISC OS 3.00 for the
    same reason.
  * Changed loading of the map for FileCore-format discs so that the map is
    loaded into the dynamic area during the Service_IdentifyDisc handler in
    one big DiscOp rather than loading it twice, sector-by-sector, via one
    big sector cache. For one thing, the sector cache is implemented
    inefficiently - O(n^2) - and for another thing, single-sector DiscOps are
    relatively inefficient on many filing systems, especially on SD cards.
    Some example speed-ups measured for mounting discs are:
      SCSIFS,   1GB drive: was 0.62 sec, now 0.40 sec (1.55 x speedup)
      SCSIFS, 256GB drive: was 1.44 sec, now 0.52 sec (2.77 x speedup)
      SDFS,     2GB drive: was 1.25 sec, now 0.14 sec (8.93 x speedup)
Admin:
  Tested on a beagleboard, with SCSIFS and SDFS.

Version 3.50. Tagged as 'FileCore-3_50'
@
text
@d78 1
a78 1
        GBLL    RO3Paths
d81 1
a81 1
        GBLL    ReadMapDuringIdentify
d144 1
a144 1
DebugL  switch  {TRUE}  ; Mounting/Identifying/Dismounting/Verifying
d146 1
a146 1
DebugLm switch  {FALSE} ; matching disc agianst other records
@


4.8
log
@Fold in old fixes.
From 1989, probably safe to keep them. Binary unchanged.

Version 3.47. Tagged as 'FileCore-3_47'
@
text
@d78 6
@


4.7
log
@Make debug versions assemble again.
Entry macro renamed as SemEntry to avoid conflict with Hdr:Proc.
Other macro bit rot fixed up.
Tidy up switches.
DebugFx switch is the only one that doesn't work.
Non debug binary same as 3.41.

Version 3.42. Tagged as 'FileCore-3_42'
@
text
@d67 11
@


4.6
log
@Delete s.AsmHdr, s.DevVersion, Version, s.ModHand
Delete Doc.!ReadMe, update Doc.!Implement
Collapse dead switches.
s.MyMacros:
 Remove 'nop' macro, use NOP.
s.Defns:
 Some definitions taken from global headers.
s.Commands:
 Indentation and function calling parameter comments reviewed.

Still produces the same binary as 3.40.
@
text
@d17 1
a17 3
; change log.

; 15 May 1997: SBP: Added change log.  Added BigMaps flag.
d19 2
a20 1
        TTL     "Debugging options"
d22 2
a23 4
        GBLL    T
T       SETL    {TRUE}
        GBLL    F
F       SETL    {FALSE}
d25 2
a26 11
        GBLL    test_version
test_version SETL {FALSE}
        GBLL    BigDisc
BigDisc	SETL    T
        GBLL    BigShare
BigShare SETL   T
        GBLL    UseBigFlag
        GBLL    TwoGigFix
TwoGigFix SETL  T
UseBigFlag SETL	T
        GBLL    DriveStatus
d28 2
a29 2
	GBLL	ServicePolice
ServicePolice	SETL	T
d31 2
a32 1
; for Big free space maps (allowing idlen to be more than 15):
d34 2
a35 2
	GBLL	BigMaps
BigMaps	SETL	T
d37 2
a38 1
; for big directories
d40 2
a41 2
	GBLL	BigDir
BigDir	SETL	T
d43 2
a44 2
	GBLL	DynamicMaps
DynamicMaps	SETL	T
d46 2
a47 2
	GBLL	BinaryChop
BinaryChop	SETL	T
d49 2
a50 2
	GBLL	WriteCacheDir
WriteCacheDir	SETL	F
d52 2
a53 1
; increased space efficiency
d55 2
a56 2
	GBLL	BigDirFix
BigDirFix	SETL	T
d58 2
a59 2
	GBLL	BigDirFullBackup
BigDirFullBackup	SETL	F
d61 2
a62 3
DriveStatus SETL   T
        GBLL    FullAtts        ;T for extended attributes for new format dirs
FullAtts SETL   T
d64 2
a65 2
        GBLL    NewErrors
NewErrors SETL  T
d67 2
a68 2
        GBLL    ExtraSkew
ExtraSkew SETL  T               ;T for F/G formats to suit Iyonix better
d70 2
a71 2
        GBLL    Dev
Dev     SETL    test_version
d73 11
a83 6
        GBLL    Debug
        [ Dev
Debug   SETL    T
        |
Debug   SETL    F
        ]
d88 1
a88 10
       [ Dev
        [ Debug ;>>>F
$a      SETL    $b
        |
$a      SETL    F
        ]
       |
$a      SETL    F
       ]

d91 78
a168 112
Debug1  switch  F       ;communication with parent module
Debug2  switch  F       ;SWI call processing
Debug2D switch  T       ;DiscOp SWI call processing
Debug3  switch  F       ;disc accesses
Debug3L switch  F       ;low level discops into parent
Debug4  switch  F       ;disc and drive record operations
Debug5  switch  F       ;old free space map operations
Debug6  switch  F       ;pathname and directory operations
Debug6f switch  F       ; FindDiscByName
Debug7  switch  F       ;OsFile operations
Debug8  switch  F       ;File Level Disc Ops
Debug9  switch  F       ;Misc useful routines
DebugA  switch  F       ;OsFun operations
DebugB  switch  F       ;Random access files
DebugBA switch  F       ;OS_Args specifically
DebugBE switch  F       ;BPut/BGet entry
DebugBc switch  F       ;CloseAllByDisc
DebugBe switch  F       ;Ensure file size
DebugBv switch  F       ;Random access files verbose - details of PutBytes and GetBytes
DebugBs switch  F       ;Open file new map allocated size
DebugBt switch  F       ;Random access file I/O terse
DebugC  switch  F       ;Directory cache
DebugD  switch  F       ;Scatter buffer
DebugE  switch  F       ;new free space map
DebugEa switch  F       ;new free space map random extension
DebugEx switch  F       ; verbose new free space map
DebugEs switch	F	; debugging of SortDir use in NewClaimFree
DebugF  switch  F       ;new free space map: auto compact
DebugFx switch  F       ;new free space map: check for this bug
DebugG  switch  F       ;verbose file cache
DebugGu switch  F	;UpdateProcess only
DebugGs switch  F       ; UpdateProcess scatter list ends only
DebugH  switch  F       ;terse file cache
DebugI  switch  F       ;terse FIQ claim/release
DebugJ  switch  F       ;file cache consistency checks
DebugK  switch  F       ;setting of Interlocks
DebugL  switch  F       ; Mounting/Identifying/Dismounting/Verifying
DebugLi switch  F       ; Changes to DiscId information in disc records
DebugLm switch  F       ; matching disc agianst other records
DebugM  switch  F       ; MultiFS extensions
DebugMt switch  F       ; MultiFS extensions (terse)
DebugN  switch  F       ; Disc insertion / request for insertion thread
DebugO  switch  F       ; MultiFS extensions - formatting SWIs
DebugP  switch  F       ; Process activation/deactivation
DebugQ  switch  F       ; *-commands
DebugR  switch  F       ; reentrance
DebugU  switch  F       ; UpCall
Debugb  switch  F       ; break key action updates
DebugDR switch  F       ; check array bounds on drive and disc record ptr calculation
DebugDL switch  F       ; check for data lost problems with atapi

DebugX	switch	F	; debug long filenames
DebugXg	switch	F	; debug long filenames - growin dirs
DebugXm	switch	F	; debug long filenames - memory problems
DebugXb	switch	F	; debug long filenames - binary chop dir search
DebugXr	switch	F	; debug long filenames - rename
DebugXd	switch	F	; debug long filenames - directory names

DebugCW	switch	F	; debug write cacheing of dirs

                GBLL    ExceptionTrap
                GBLL    VduTrap

                [ Dev

                 [ Debug
ExceptionTrap   SETL    F
                 |
ExceptionTrap   SETL    F
                 ]
VduTrap         SETL    F ;RCM>>> was T
                GBLL    SpoolOff
SpoolOff        SETL    F       ;T <=> disable spooling for debug messages
                GBLL    IrqDebug
IrqDebug        SETL    F
                GBLL    DebugSwitch
DebugSwitch     SETL    F

                |

ExceptionTrap   SETL    F
VduTrap         SETL    F

                ]


        GBLS    GetAroundBleedingAAsmYetAgain
 [ Debug
GetAroundBleedingAAsmYetAgain SETS " GET Hdr:Debug"
 |
GetAroundBleedingAAsmYetAgain SETS "; No debug required"
 ]
$GetAroundBleedingAAsmYetAgain


; +++++++++++++++++++++++ For Tube work: ++++++++++++++++++++++++++++++++++++++

 [ Debug
; Set to true for dubugging through the tube
Host_Debug SETL T

Debug_MaybeIRQ SETL T
 ]

        GBLS    Host_Inclusion
Host_Inclusion SETS "; No Host debug wanted"
 [ Debug
  [ Host_Debug
Host_Inclusion SETS " GET Hdr:HostFS"
  ]
 ]
$Host_Inclusion
@


4.5
log
@* Various 32-bit compatibility fixes.
* Can use HAL for FIQ+timer manipulations.
* FileCore_DiscOp64 added (as user API - currently just converted to the
  standard byte or sector DiscOp call to the underlying module). See
  Doc.32bitAPIs for full details.
* New error-passing scheme to modules added (for full 32-bit addressing).
* FileCore_Features added (indicates new error scheme).
* OS_FSControl 49 (read 32-bit free space) now reports sensible clamped
  values for large discs, rather than values modulo 2^32.
* Accessing the end of files near 2GB in size could cause lock-ups in
  background transfers.
* F(+) and G(+) disc formats adjusted to have a little more skew to
  help the rather poor Iyonix floppy controller.

Version 3.31. Tagged as 'FileCore-3_31'
@
text
@d28 2
@


4.4
log
@32-bit compatible. Some known issues remaining - don't use, except for
testing.

Version 3.23. Tagged as 'FileCore-3_23'
@
text
@d72 6
d105 2
a106 2
Debug2D switch  F       ;DiscOp SWI call processing
Debug3  switch  T       ;disc accesses
d110 1
a110 1
Debug6  switch  T       ;pathname and directory operations
d116 1
a116 1
DebugB  switch  T       ;Random access files
@


4.3
log
@  Merge of Ursula branch to the trunk.
Detail:
  This module represents the latest version of FileCore incorporating
    both the Ursula changes and the ROL changes as we have them to date.
  Changes from ROL-FileCore-3_21 are basically the stripping of trailling
    spaces and the change of Version to Module_Version in the conditionals.
    No other changes.
Admin:
  ROL branch tagged ROL_merge
  Ursula branch tagged Ursula_merge.
  Untested, but essentially the same as ROL-FileCore-3_21, so no problems
    expected.

Version 3.21. Tagged as 'FileCore-3_21'
@
text
@a27 2
        GBLL    NewFs
NewFs   SETL    T
a71 3
        [ FileCache
        ASSERT  MOS_Version > 120
        ]
@


4.2
log
@Service call table change only merged in from Ursula branch.

Version 3.01. Tagged as 'FileCore-3_01'
@
text
@d17 4
d37 1
a37 1
UseBigFlag SETL   T
d43 27
d73 1
d109 1
a109 1
Debug6  switch  F       ;pathname and directory operations
d115 1
a115 1
DebugB  switch  F       ;Random access files
d128 1
d141 1
a141 1
DebugM  switch  T       ; MultiFS extensions
d150 1
a150 1
DebugDR switch  T       ; check array bounds on drive and disc record ptr calculation
d153 9
d201 1
a201 1
Host_Debug SETL True
d203 1
a203 1
Debug_MaybeIRQ SETL True
@


4.1
log
@Initial revision
@
text
@d35 4
@


4.1.4.1
log
@Changes made to FileCore to support allowing idlen more than 15.  This allows
smaller LFAUs on discs.  The changes are not yet complete.  In particular, the
number of disc zones is limited to 255.  Some development testing has been
peformed, and the filing system is generally stable.  Areas which haven't
been fully tested include things like *Defect, FileCore_LayoutStructure,
FileCore_FloppyStructure, and the FileSwitch APIs for reading and examining
a disc's used space.

This version should not be used for any OS Builds with the BigMaps flag set
to true.  It should build as a normal version of FileCore with BigMaps and
BigDirs set to false.
@
text
@a16 4
; change log.

; 15 May 1997: SBP: Added change log.  Added BigMaps flag.

a34 6
        
; for Big free space maps (allowing idlen to be more than 15):

	GBLL	BigMaps
BigMaps	SETL	T

d69 1
a69 1
Debug3  switch  F       ;disc accesses
d76 1
a76 1
Debug8  switch  T       ;File Level Disc Ops
d89 2
a90 2
DebugE  switch  T       ;new free space map
DebugEa switch  T       ;new free space map random extension
d92 1
a92 1
DebugF  switch  T       ;new free space map auto compact
d104 1
a104 1
DebugM  switch  F       ; MultiFS extensions
d113 1
a113 1
DebugDR switch  F       ; check array bounds on drive and disc record ptr calculation
@


4.1.4.2
log
@Fixed a bug with NewClaimFree (and its use of SortDir) which caused problems
with 16 bit object ids.  Now copes with long ids correctly.

Started on bits of code for the long file names work.
@
text
@a44 5
; for big directories

	GBLL	BigDir
BigDir	SETL	F

d86 1
a86 1
Debug8  switch  F       ;File Level Disc Ops
d99 2
a100 2
DebugE  switch  F       ;new free space map
DebugEa switch  F       ;new free space map random extension
d102 1
a102 2
DebugEs switch	T	; debugging of SortDir use in NewClaimFree
DebugF  switch  F       ;new free space map auto compact
a124 2

DebugX	switch	T	; debug long filenames
@


4.1.4.3
log
@Long file names changes nearly completed.

Only FileCore_LayoutStructure and FileCore_FloppyStructure remain to
updated for long file names.
@
text
@d48 1
a48 1
BigDir	SETL	T
d81 1
a81 1
Debug1  switch  T       ;communication with parent module
d87 2
a88 2
Debug5  switch  T       ;old free space map operations
Debug6  switch  T       ;pathname and directory operations
d90 1
a90 1
Debug7  switch  T       ;OsFile operations
d93 1
a93 1
DebugA  switch  T       ;OsFun operations
d104 1
a104 1
DebugE  switch  T       ;new free space map
d107 1
a107 1
DebugEs switch	F	; debugging of SortDir use in NewClaimFree
d117 1
a117 1
DebugL  switch  T       ; Mounting/Identifying/Dismounting/Verifying
d125 1
a125 1
DebugQ  switch  T       ; *-commands
@


4.1.4.4
log
@Altered directory format (change backup dir entries to be one word instead
of an entire copy of the entry).  Also reduced size of a directory entry
by one word.  Also fixed a number of small bugs.
@
text
@a49 8
; increased space efficiency

	GBLL	BigDirFix
BigDirFix	SETL	T

	GBLL	BigDirFullBackup
BigDirFullBackup	SETL	F

d81 1
a81 1
Debug1  switch  F       ;communication with parent module
d93 1
a93 1
DebugA  switch  F       ;OsFun operations
d104 1
a104 1
DebugE  switch  F       ;new free space map
d117 1
a117 1
DebugL  switch  F       ; Mounting/Identifying/Dismounting/Verifying
d125 1
a125 1
DebugQ  switch  F       ; *-commands
@


4.1.4.5
log
@Fixed bugs in handling of growing directories, and made the directory
backup entries come back but only be one word long each.
@
text
@d95 2
a96 2
Debug5  switch  F       ;old free space map operations
Debug6  switch  F       ;pathname and directory operations
d98 1
a98 1
Debug7  switch  F       ;OsFile operations
d131 1
a131 1
DebugO  switch  T       ; MultiFS extensions - formatting SWIs
d140 1
a140 2
DebugX	switch	F	; debug long filenames
DebugXg	switch	T	; debug long filenames - growin dirs
@


4.1.4.6
log
@Fixed s.BigDirCode (GrowBigDir and ShrinkBigDir) to cope with BitSize<SecSize
and rewrote free space map memory management to place free space maps in
dynamic areas.
@
text
@a49 3
	GBLL	DynamicMaps
DynamicMaps	SETL	T

d89 1
a89 1
Debug1  switch  T       ;communication with parent module
d95 1
a95 1
Debug5  switch  T       ;old free space map operations
d112 1
a112 1
DebugE  switch  T       ;new free space map
d125 1
a125 1
DebugL  switch  T       ; Mounting/Identifying/Dismounting/Verifying
d131 1
a131 1
DebugO  switch  F       ; MultiFS extensions - formatting SWIs
d140 2
a141 2
DebugX	switch	T	; debug long filenames
DebugXg	switch	F	; debug long filenames - growin dirs
@


4.1.4.7
log
@Now supports formatting of floppies with long file names.
@
text
@d92 1
a92 1
Debug1  switch  F       ;communication with parent module
d98 1
a98 1
Debug5  switch  F       ;old free space map operations
d115 1
a115 1
DebugE  switch  F       ;new free space map
d134 1
a134 1
DebugO  switch  T       ; MultiFS extensions - formatting SWIs
d143 1
a143 1
DebugX	switch	F	; debug long filenames
a144 1
DebugXm	switch	F	; debug long filenames - memory problems
@


4.1.4.8
log
@Fixed:

DoOsFunRenameBigDir to work when renaming a shared file between dirs where
the file ends up as the last object in the target dir.

SanityCheckEDiscRecord to allow idlen>15 when DiscVersion=0

GrowBigDir to round up desired size to a multiple of the disc allocation
size.

Also:

Implemented non-working code to write cache the dir buffer.  WriteCacheDir
compile switch set to FALSE in s.DebugOpts.  Don't set it to TRUE unless
I tell you it's working.

Made SortDir not attempt to sort more than 2047 entries in a dir, to
avoid it overflowing ScratchSpace.

Made SortPair do one extra shell on the sort (makes it more efficient).
@
text
@d39 1
a39 1

a52 3
	GBLL	WriteCacheDir
WriteCacheDir	SETL	F

d118 1
a118 1
DebugEs switch	T	; debugging of SortDir use in NewClaimFree
d128 1
a128 1
DebugL  switch  F       ; Mounting/Identifying/Dismounting/Verifying
d134 1
a134 1
DebugO  switch  F       ; MultiFS extensions - formatting SWIs
d143 2
a144 2
DebugX	switch	T	; debug long filenames
DebugXg	switch	T	; debug long filenames - growin dirs
a145 2

DebugCW	switch	F	; debug write cacheing of dirs
@


4.1.4.9
log
@Two bugs fixed:

1) Fixed ReallyShared so that it doesn't omit to check the first
   object in the directory being scanned.

2) Fixed a long-standing ADFSBuffers problem.  This involves the
   UpdateBufState function attempting to attach a buffer as the
   Older or Younger buffer of the previous or next buffer in a
   file respectively.  Unfortunately, if there's only one buffer
   for a file, then it may attempt to attach it to the file
   control block - which is wrong.  Modified UpdateBufState to
   only attempt this when there are more than one objects in
   the chain.  Note:  there still may be problems in certain
   cases; this may need further looking into.

   This problem probably doesn't occur without long file names
   support enabled, because the fcb's contents look different
   then (name field is 10 chars instead of 256) so the problem
   is less likely to occur accidentally.
@
text
@a52 3
	GBLL	BinaryChop
BinaryChop	SETL	T

d102 1
a102 1
Debug6  switch  T       ;pathname and directory operations
d104 1
a104 1
Debug7  switch  T       ;OsFile operations
d108 1
a108 1
DebugB  switch  T       ;Random access files
d121 1
a121 1
DebugEs switch	F	; debugging of SortDir use in NewClaimFree
d124 3
a126 3
DebugG  switch  T       ;verbose file cache
DebugGu switch  T	;UpdateProcess only
DebugGs switch  T       ; UpdateProcess scatter list ends only
d129 1
a129 1
DebugJ  switch  T       ;file cache consistency checks
d146 2
a147 2
DebugX	switch	F	; debug long filenames
DebugXg	switch	F	; debug long filenames - growin dirs
a148 1
DebugXb	switch	F	; debug long filenames - binary chop dir search
@


4.1.4.10
log
@Binary-chop dir scanning fixed.  (BigLexEqv fixed so that it doesn't
try to compare the dir separator '.' in eg "Default.Thing" with another
object called "Default+" (was breaking binary chop dir search).

Fixed IdentifyDisc (s.Identify); old behaviour left the RootDir field
invalid (the disc bits were an external drive number, instead of an
internal disc number).  This causes problems if the disc fails to mount
due to, for example, memory problems, as the illegal value never gets
fixed (normally, MountDiscOnDrive would end up correcting the problem).
@
text
@d98 1
a98 1
Debug1  switch  T       ;communication with parent module
d103 2
a104 2
Debug4  switch  T       ;disc and drive record operations
Debug5  switch  T       ;old free space map operations
d106 1
a106 1
Debug6f switch  T       ; FindDiscByName
d110 2
a111 2
DebugA  switch  T       ;OsFun operations
DebugB  switch  F       ;Random access files
d127 3
a129 3
DebugG  switch  F       ;verbose file cache
DebugGu switch  F	;UpdateProcess only
DebugGs switch  F       ; UpdateProcess scatter list ends only
d132 1
a132 1
DebugJ  switch  F       ;file cache consistency checks
d134 3
a136 3
DebugL  switch  T       ; Mounting/Identifying/Dismounting/Verifying
DebugLi switch  T       ; Changes to DiscId information in disc records
DebugLm switch  T       ; matching disc agianst other records
d152 1
a152 1
DebugXb	switch	T	; debug long filenames - binary chop dir search
d195 1
a195 1
Host_Debug SETL T
d197 1
a197 1
Debug_MaybeIRQ SETL T
@


4.1.4.11
log
@Fixed 4 bugs in DoOsFunRenameBigDir involving renameing of objects
between dirs with long filenames.

Fixed bug in OsFunResolveWildcard on long filenames.
@
text
@d98 1
a98 1
Debug1  switch  F       ;communication with parent module
d103 5
a107 5
Debug4  switch  F       ;disc and drive record operations
Debug5  switch  F       ;old free space map operations
Debug6  switch  F       ;pathname and directory operations
Debug6f switch  F       ; FindDiscByName
Debug7  switch  F       ;OsFile operations
d110 1
a110 1
DebugA  switch  F       ;OsFun operations
d134 3
a136 3
DebugL  switch  F       ; Mounting/Identifying/Dismounting/Verifying
DebugLi switch  F       ; Changes to DiscId information in disc records
DebugLm switch  F       ; matching disc agianst other records
d150 1
a150 1
DebugXg	switch	T	; debug long filenames - growin dirs
d152 1
a152 2
DebugXb	switch	F	; debug long filenames - binary chop dir search
DebugXr	switch	T	; debug long filenames - rename
@


4.1.4.12
log
@Fixed parent directory handling for big dirs (was filling in the Disc part
of the field, which should be left as 0000s because the value of the disc
changes over time).

Further fix for ADFSBuffers (illegal pointer accessing) as it was found that
the previous fix wasn't good enough.  New fix appears to work where previous
failed.
@
text
@d105 1
a105 1
Debug6  switch  T       ;pathname and directory operations
d121 1
a121 1
DebugE  switch  T       ;new free space map
d142 1
a142 1
DebugQ  switch  T       ; *-commands
d149 2
a150 2
DebugX	switch	T	; debug long filenames
DebugXg	switch	F	; debug long filenames - growin dirs
d153 1
a153 1
DebugXr	switch	F	; debug long filenames - rename
@


4.1.4.13
log
@Fixed bug in handling of Service_EnumerateFormats which was preventing all
formats being listed by ADFSFiler.
@
text
@d107 1
a107 1
Debug7  switch  T       ;OsFile operations
d121 1
a121 1
DebugE  switch  F       ;new free space map
d153 1
a153 1
DebugXr	switch	T	; debug long filenames - rename
@


4.1.4.14
log
@Now uses new Ursula service call mechanism.
@
text
@d37 1
a37 1
UseBigFlag SETL	T
a39 3
	GBLL	ServicePolice
ServicePolice	SETL	T

d105 1
a105 1
Debug6  switch  F       ;pathname and directory operations
d149 1
a149 1
DebugX	switch	F	; debug long filenames
d153 1
a153 2
DebugXr	switch	F	; debug long filenames - rename
DebugXd	switch	T	; debug long filenames - directory names
@


4.1.4.15
log
@Found a major inefficiency in the handling of file creation, closing of files
and other uses of the NextFree function.  In the case of file creation, the
problem was particularly bad on large free space maps, as the function was
of order N^2 on the size of the map, when the disc was nearly full.  As the
disc gets fuller, the problem gets worse; with 1400 zones in the map, N^2
is very large indeed.  This resulted in *cdir sometimes taking 1sec.

Now, a new function NextFree_Quick exists which performs similarly to NextFree,
but does not consider free spaces in zones beyond the current zone.  This
can be used by functions which need only examine free spaces in a given zone,
such as is the case in ClaimFreeSpace where it is stepping throigh zones to
find a single gap large enough for the entire file.

For other functions which work on a single zone, the speedup is less dramatic,
of the order N instead of N^2.
@
text
@d107 1
a107 1
Debug5  switch  T       ;old free space map operations
d110 1
a110 1
Debug7  switch  F       ;OsFile operations
d124 1
a124 1
DebugE  switch  T       ;new free space map
d126 1
a126 1
DebugEx switch  T       ; verbose new free space map
d145 1
a145 1
DebugQ  switch  F       ; *-commands
d157 1
a157 1
DebugXd	switch	F	; debug long filenames - directory names
@


4.1.4.16
log
@Altered s.Identify; wasn't correctly returning a string describing the disc
format for F+ discs.

Altered s.Commands; *map now correctly reports big directories and a big
free space map.
@
text
@d107 2
a108 2
Debug5  switch  F       ;old free space map operations
Debug6  switch  T       ;pathname and directory operations
d124 1
a124 1
DebugE  switch  F       ;new free space map
d126 1
a126 1
DebugEx switch  F       ; verbose new free space map
@


4.1.4.17
log
@Fixed bug with zone compaction with idlen>15, in CompactZone.
@
text
@d104 1
a104 1
Debug3  switch  T       ;disc accesses
d114 1
a114 1
DebugB  switch  T       ;Random access files
@


4.1.4.18
log
@  Merge of ROL branch to the Ursula branch.
Admin:
  Lots of bugfixes - see ROL branch logs for details.
@
text
@a72 1

@


4.1.4.17.2.1
log
@  Import of RISC OS Ltd version of FileCore.
Admin:
  These sources are imported for interest only and must NOT be merged
    without wide prior consultation.

Tagged as ROL_FileCore-3_20
@
text
@a72 1

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
