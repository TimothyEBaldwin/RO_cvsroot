head	4.4;
access;
symbols
	FileCore-3_75:4.4
	FileCore-3_74:4.4
	FileCore-3_73:4.4
	FileCore-3_72:4.4
	FileCore-3_71:4.4
	FileCore-3_70:4.4
	FileCore-3_69:4.4
	FileCore-3_68:4.4
	FileCore-3_67:4.4
	FileCore-3_66:4.4
	FileCore-3_65:4.4
	FileCore-3_64:4.4
	FileCore-3_63:4.4
	FileCore-3_62:4.4
	FileCore-3_61:4.4
	FileCore-3_60:4.4
	FileCore-3_59:4.4
	FileCore-3_58:4.4
	FileCore-3_57:4.4
	FileCore-3_56:4.4
	FileCore-3_55:4.4
	FileCore-3_54:4.4
	FileCore-3_53:4.4
	FileCore-3_52:4.4
	FileCore-3_51:4.4
	FileCore-3_50:4.4
	FileCore-3_49:4.4
	FileCore-3_48:4.4
	FileCore-3_47:4.4
	FileCore-3_46:4.4
	FileCore-3_45:4.4
	FileCore-3_44:4.3
	FileCore-3_43:4.3
	FileCore-3_42:4.3
	FileCore-3_41:4.3
	FileCore-3_40:4.3
	FileCore-3_39:4.3
	FileCore-3_38:4.3
	FileCore-3_37:4.3
	FileCore-3_36:4.3
	FileCore-3_35:4.3
	FileCore-3_34:4.3
	FileCore-3_33:4.3
	RO_5_07:4.3
	FileCore-3_32:4.3
	FileCore-3_31:4.3
	FileCore-3_30:4.3
	FileCore-3_29:4.3
	FileCore-3_28:4.3
	FileCore-3_25-4_9_2_2:4.3
	FileCore-3_27:4.3
	FileCore-3_26:4.3
	FileCore-3_22-4_6_2_1:4.2
	bavison_FileCore-3_22_dev_bp:4.2
	bavison_FileCore-3_22:4.2.0.2
	FileCore-3_25-4_9_2_1:4.3
	HAL:4.3.0.2
	FileCore-3_25:4.3
	FileCore-3_24:4.3
	FileCore-3_23:4.3
	dellis_autobuild_BaseSW:4.2
	FileCore-3_22:4.2
	Ursula_merge:4.1.4.2
	ROL_merge:4.1.4.2
	FileCore-3_21:4.2
	ROL_Ursula_merge:4.1.4.2
	Ursula_RiscPC_merge:4.1.4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	ROL_FileCore-3_21:4.1.4.2
	ROL_FileCore-3_20:4.1.4.2
	ROL:4.1.4.2.0.4
	ROL_bp:4.1.4.2
	Ursula_RiscPC_bp:4.1.4.2
	FileCore-3_18:4.1.4.2
	FileCore-3_01:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.2
	Ursula_RiscPC:4.1.4.2.0.2
	FileCore-3_00:4.1
	FileCore-2_99:4.1
	aglover_FileCore-3_17:4.1.4.2
	sproven_FileCore-3_16:4.1.4.2
	rthornb_UrsulaBuild-19Aug1998:4.1.4.2
	UrsulaBuild_FinalSoftload:4.1.4.2
	rthornb_UrsulaBuild-12Aug1998:4.1.4.2
	aglover_UrsulaBuild-05Aug1998:4.1.4.2
	rthornb_UrsulaBuild-29Jul1998:4.1.4.2
	rthornb_UrsulaBuild-22Jul1998:4.1.4.2
	rthornb_UrsulaBuild-15Jul1998:4.1.4.2
	rthornb_UrsulaBuild-07Jul1998:4.1.4.2
	rthornb_UrsulaBuild-17Jun1998:4.1.4.2
	rthornb_UrsulaBuild-03Jun1998:4.1.4.2
	rthornb_UrsulaBuild-27May1998:4.1.4.2
	rthornb_UrsulaBuild-21May1998:4.1.4.2
	sproven_FileCore-3_15:4.1.4.2
	sproven_314:4.1.4.2
	rthornb_UrsulaBuild_01May1998:4.1.4.2
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_313:4.1.4.2
	sproven_3_11:4.1.4.1
	sproven_3_10:4.1.4.1
	sproven_Ursula_3_09:4.1.4.1
	sproven_3_07:4.1.4.1
	sproven_3_06:4.1.4.1
	sproven_3_05:4.1
	sproven_3_04:4.1
	Spinner_RCA116:4.1.7.1
	sproven_3_03:4.1
	sproven_3_02:4.1
	sproven_3_01:4.1
	sproven_2_99:4.1
	sproven_2_98:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2011.10.14.07.23.52;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	D2Id4aPp4zmuUhDv;

4.3
date	2000.10.30.13.26.35;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.09.11.37.00;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.32.23;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.23;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.39.07;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.01.19.12.26.42;	author sproven;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	98.04.02.15.46.51;	author sproven;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.34.20;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.31.12;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Revise exports in "hdr.FileCore".
Now, for each SWI call there is a definition of any pertinent structures it asks for and definitions of any bitfields within those flags. This avoids the need for clients to endlessly redefine these locally (in practice it looks like sections of FileCore were simply copy and pasted into clients RAMFS/SCSIFS/ADFS). Delete private definitions.
This binary was carefully checked to be identical since so many locations were changed.
Then, the following additional changes:
* InitDieSvc line 74, the floppy config is extracted using a mask and shift rather than reaching up the stack
* Identify lin 1254, the superfluous instruction marked as such deleted
* FileCore15 line 762 recoded the check for background op to not need the bit number defined any more
* FileCore00 moved the label 'anull' to be word aligned guaranteed
The duff pointer marker ('nowt' = &40000000) is no longer used to mark territory translation tables as invalid as that address is now quite reasonable. -1 is used instead.

Version 3.45. Tagged as 'FileCore-3_45'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; FileCore responses to MultiFS format service requests

; These are expected to be called only by FileCore's base incarnation


; entry: r1 = Service_EnumerateFormats
;        r2 = pointer to list of formats so far
;        SB *invalid*


; exit:
;   error:
;        r0 = error pointer
;        r1 = Service_Serviced
;   no error:
;        r1 unchanged (still Service_EnuerateFormats)
;        r2 updated to point to the extended list

FileCoreService_EnumerateFormats ROUT
        Push    "r0-r11,lr"
        MOV     r11, r2

        SUB     sp, sp, #16
        MOV     r0, sp
        baddr   r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        BVS     %FT90

        ADR     r10, EnumFormats
        B       %FT20

10
        ; Claim an RMA block for the format
        MOV     r3, #SzEnumFormatsBlock
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        BVS     %FT80

        ; Zero out 2 string links
        MOV     lr, #0
        STR     lr, [r2, #EnumFormats_MenuString]
        STR     lr, [r2, #EnumFormats_MenuHelp]

        ; Copy the SWI fields across
        LDR     lr, [r10, #0*4]
        STR     lr, [r2, #EnumFormats_Flags]
        LDR     lr, =XFileCore_DiscFormat
        STR     lr, [r2, #EnumFormats_DiscFormatSWI]
        LDR     lr, [r10, #1*4]
        STR     lr, [r2, #EnumFormats_DiscFormatParam]
        LDR     lr, [r10, #2*4]
        STR     lr, [r2, #EnumFormats_LayoutStructureSWI]
        LDR     lr, [r10, #3*4]
        ADRL    r0, Module_BaseAddr
        ADD     lr, lr, r0
        STR     lr, [r2, #EnumFormats_LayoutStructureParam]

        ; Link block to chain
        STR     r11, [r2, #EnumFormats_Link]
        MOV     r11, r2

        ; Claim 1st string
        ADD     r1, r10, #4*4
        BL      %FT95
        STRVC   r1, [r11, #EnumFormats_MenuString]

        ; Advance to 2nd string
        ADDVC   r1, r10, #4*4
        BLVC    strlen
        ADDVC   r3, r3, #1
        ADDVC   r1, r1, r3

        ; Get values to advance to next block
        MOVVC   r2, r1
        BLVC    strlen
        ADDVC   r3, r3, #1

        ; Copy 2nd string
        BLVC    %FT95
        STRVC   r1, [r11, #EnumFormats_MenuHelp]
        BVS     %FT80

        ; Advance to format descriptor
        ADD     r10, r2, r3
        STR     r10, [r11, #EnumFormats_FormatParam]

        MOV     r1, r10
        BL      strlen
        ADD     r10, r10, r3
        ADD     r10, r10, #1
        ADD     r10, r10, #3
        BIC     r10, r10, #3

20
        ; End of list?
        LDR     lr, [r10]
        TEQ     lr, #0
        BNE     %BT10

80
        Push    "r0"
        ADD     r0, sp, #4
        SWI     XMessageTrans_CloseFile
        STRVS   r0, [sp]
        Pull    "r0"

90
        ADD     sp, sp, #16

        MOVVS   lr, #Service_Serviced
        STRVS   lr, [sp, #1*4]
        STRVS   r0, [sp]

        STR     r11, [sp, #2*4]         ; returned r2

        Pull    "r0-r11, pc"

; entry r1 -> message tag
; exit  r0 trashed or error
;       r1 -> RMA block containing looked-up message or error
95
        Push    "r2-r7,lr"
        ADD     r0, sp, #7*4            ; MessageTrans block on stack
        MOV     r2, #0
        MOV     r3, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        MOVVC   r1, r2
        ADDVC   r3, r3, #1
        MOVVC   r0, #ModHandReason_Claim
        SWIVC   XOS_Module
        Swap    r1, r2, VC
        BLVC    strcpy
        Pull    "r2-r7,pc"

EnumFormats
        DCD     EnumFormats_IsNative :OR: EnumFormats_HasFormatParam
        DCD     Format_Floppy :OR: Format_L
        DCD     XFileCore_LayoutStructure
        DCD     Format_LFloppyDiscRecord - Module_BaseAddr
LFormat_DescribeTag
        DCB     "FS0",0         ; Format description for a menu
        DCB     "FS1",0         ; accompanying !help
        DCB     "L",0
        ALIGN

        DCD     EnumFormats_IsNative :OR: EnumFormats_HasFormatParam
        DCD     Format_Floppy :OR: Format_D
        DCD     XFileCore_LayoutStructure
        DCD     Format_DFloppyDiscRecord - Module_BaseAddr
DFormat_DescribeTag
        DCB     "FS2", 0
        DCB     "FS3", 0
        DCB     "D",0
        ALIGN

        DCD     EnumFormats_IsNative :OR: EnumFormats_HasFormatParam
        DCD     Format_Floppy :OR: Format_E
        DCD     XFileCore_LayoutStructure
        DCD     Format_EFloppyDiscRecord - Module_BaseAddr
EFormat_DescribeTag
        DCB     "FS4",0
        DCB     "FS5", 0
        DCB     "E",0
        ALIGN

 [ BigDir
        DCD     EnumFormats_IsNative :OR: EnumFormats_HasFormatParam
        DCD     Format_Floppy :OR: Format_E
        DCD     XFileCore_LayoutStructure
        DCD     Format_EXFloppyDiscRecord - Module_BaseAddr
EXFormat_DescribeTag
        DCB     "FS11",0
        DCB     "FS12", 0
        DCB     "E+",0
        ALIGN
 ]

        DCD     EnumFormats_IsNative :OR: EnumFormats_HasFormatParam
        DCD     Format_Floppy :OR: Format_F
        DCD     XFileCore_LayoutStructure
        DCD     Format_FFloppyDiscRecord - Module_BaseAddr
FFormat_DescribeTag
        DCB     "FS6", 0
        DCB     "FS7", 0
        DCB     "F",0
        ALIGN

 [ BigMaps
        DCD     EnumFormats_IsNative :OR: EnumFormats_HasFormatParam
        DCD     Format_Floppy :OR: Format_F
        DCD     XFileCore_LayoutStructure
        DCD     Format_FXFloppyDiscRecord - Module_BaseAddr
FXFormat_DescribeTag
        DCB     "FS13", 0
        DCB     "FS14", 0
        DCB     "F+",0
        ALIGN
 ]

        DCD     EnumFormats_IsNative :OR: EnumFormats_HasFormatParam
        DCD     Format_Floppy :OR: Format_G
        DCD     XFileCore_LayoutStructure
        DCD     Format_GFloppyDiscRecord - Module_BaseAddr
GFormat_DescribeTag
        DCB     "FS9", 0
        DCB     "FS10", 0
        DCB     "G",0
        ALIGN

        DCD     0

Format_LFloppyDiscRecord
        ; * means gets filled in before being used
        DCB     8       ; Log2 Sector Size
        DCB     16      ; sectors per track
        DCB     1       ; Heads (adjusted)
        DCB     DensityDouble  ; Density
        DCB     0       ; Length of Id field
        DCB     0       ; Bytes per map bit
        DCB     0       ; Side/Side sector skew
        DCB     0       ; Boot option
        DCB     DiscRecord_SequenceSides_Flag
        DCB     0       ; Zones
        DCW     0       ; ZoneSpare
        DCD     L_Root  ; Root dir disc address
        DCD     640*K   ; Disc size
        DCW     0       ; DiscId *
        DCB     "          " ; DiscName *
 [ BigDir
        DCD     0       ; DiscType
        DCD     0       ; DiscSize2
        DCB     0       ; ShareSize
        DCB     0       ; BigFlag
        DCB     0       ; Zones2
        DCB     0       ; reserved
        DCD     0       ; version
        DCD     0       ; not used

        ASSERT  ({PC} - Format_LFloppyDiscRecord) = SzDiscRecSig2
 |
        ASSERT  ({PC} - Format_LFloppyDiscRecord) = SzDiscRecSig
 ]

Format_DFloppyDiscRecord
        ; * means gets filled in before being used
        DCB     10      ; Log2 Sector Size
        DCB     5       ; sectors per track
        DCB     2       ; Heads
        DCB     DensityDouble
        DCB     0       ; Length of Id field
        DCB     0       ; Bytes per map bit
        DCB     0       ; Side/Side sector skew
        DCB     0       ; Boot option
        DCB     0       ; Neither sequence sides nor double step
        DCB     0       ; Zones
        DCW     0       ; ZoneSpare
        DCD     D_Root  ; Root dir disc address
        DCD     800*K   ; Disc size
        DCW     0       ; DiscId *
        DCB     "          " ; DiscName *
 [ BigDir
        DCD     0       ; DiscType
        DCD     0       ; DiscSize2
        DCB     0       ; ShareSize
        DCB     0       ; BigFlag
        DCB     0       ; Zones2
        DCB     0       ; reserved
        DCD     0       ; version
        DCD     0       ; not used

        ASSERT  ({PC} - Format_DFloppyDiscRecord) = SzDiscRecSig2
 |
        ASSERT  ({PC} - Format_DFloppyDiscRecord) = SzDiscRecSig
 ]

Format_EFloppyDiscRecord
        ; * means gets filled in before being used
        DCB     10      ; Log2 Sector Size
        DCB     5       ; sectors per track
        DCB     2       ; Heads
        DCB     DensityDouble
        DCB     15      ; Length of Id field (map bits)
        DCB     7       ; Bytes per map bit
        DCB     1       ; Side/Side sector skew
        DCB     0       ; Boot option
        DCB     0       ; Neither sequence sides nor double step
        DCB     1       ; Zone
        DCW     &520    ; ZoneSpare
        DCD     NewMapRoot ; Root dir ind. disc address
        DCD     800*K   ; Disc size
        DCW     0       ; DiscId *
        DCB     "          " ; DiscName *
 [ BigDir
        DCD     0       ; DiscType
        DCD     0       ; DiscSize2
        DCB     0       ; ShareSize
        DCB     0       ; BigFlag
        DCB     0       ; Zones2
        DCB     0       ; reserved
        DCD     0       ; version
        DCD     0       ; not used

        ASSERT  ({PC} - Format_EFloppyDiscRecord) = SzDiscRecSig2
 |
        ASSERT  ({PC} - Format_EFloppyDiscRecord) = SzDiscRecSig
 ]

 [ BigDir

EXRoot  * &301          ; indirect disc address of root dir

Format_EXFloppyDiscRecord
        ; * means gets filled in before being used
        DCB     10      ; Log2 Sector Size
        DCB     5       ; sectors per track
        DCB     2       ; Heads
        DCB     DensityDouble
        DCB     15      ; Length of Id field (map bits)
        DCB     7       ; Bytes per map bit
        DCB     1       ; Side/Side sector skew
        DCB     0       ; Boot option
        DCB     0       ; Neither sequence sides nor double step
        DCB     1       ; Zone
        DCW     &520    ; ZoneSpare
        DCD     EXRoot  ; Root dir ind. disc address
        DCD     800*K   ; Disc size
        DCW     0       ; DiscId *
        DCB     "          " ; DiscName *
        DCD     0       ; DiscType
        DCD     0       ; DiscSize2
        DCB     0       ; ShareSize
        DCB     0       ; BigFlag
        DCB     0       ; Zones2
        DCB     0       ; reserved
        DCD     1       ; format version
        DCD     BigDirMinSize   ; size of root dir

        ASSERT  ({PC} - Format_EXFloppyDiscRecord) = SzDiscRecSig2
 ]

Format_FFloppyDiscRecord
        ; * means gets filled in before being used
        DCB     10      ; Log2 Sector Size
        DCB     10      ; sectors per track
        DCB     2       ; Heads
        DCB     DensityQuad
        DCB     15      ; Length of Id field (map bits)
        DCB     6       ; Bytes per map bit
        DCB     1       ; Side/Side sector skew
        DCB     0       ; Boot option
        DCB     0       ; Neither sequence sides nor double step
        DCB     4       ; Zone
        DCW     1600    ; ZoneSpare
        DCD     &209    ; Root dir ind. disc address
        DCD     1600*K  ; Disc size
        DCW     0       ; DiscId *
        DCB     "          " ; DiscName *
 [ BigDir
        DCD     0       ; DiscType
        DCD     0       ; DiscSize2
        DCB     0       ; ShareSize
        DCB     0       ; BigFlag
        DCB     0       ; Zones2
        DCB     0       ; reserved
        DCD     0       ; format version
        DCD     0       ; not used

        ASSERT  ({PC} - Format_FFloppyDiscRecord) = SzDiscRecSig2
 |
        ASSERT  ({PC} - Format_FFloppyDiscRecord) = SzDiscRecSig
 ]

 [ BigDir

Format_FXFloppyDiscRecord
        ; * means gets filled in before being used
        DCB     10      ; Log2 Sector Size
        DCB     10      ; sectors per track
        DCB     2       ; Heads
        DCB     DensityQuad
        DCB     15      ; Length of Id field (map bits)
        DCB     6       ; Bytes per map bit
        DCB     1       ; Side/Side sector skew
        DCB     0       ; Boot option
        DCB     0       ; Neither sequence sides nor double step
        DCB     4       ; Zone
        DCW     1600    ; ZoneSpare
        DCD     &33801  ; Root dir ind. disc address
        DCD     1600*K  ; Disc size
        DCW     0       ; DiscId *
        DCB     "          " ; DiscName *
        DCD     0       ; DiscType
        DCD     0       ; DiscSize2
        DCB     0       ; ShareSize
        DCB     0       ; BigFlag
        DCB     0       ; Zones2
        DCB     0       ; reserved
        DCD     1       ; format version
        DCD     BigDirMinSize   ; size of root dir
        ASSERT  ({PC} - Format_FXFloppyDiscRecord) = SzDiscRecSig2
 ]

Format_GFloppyDiscRecord
        ; * means gets filled in before being used
        DCB     10      ; Log2 Sector Size
        DCB     20      ; sectors per track
        DCB     2       ; Heads
        DCB     DensityOctal
        DCB     15      ; Length of Id field (map bits)
        DCB     6       ; Bytes per map bit
        DCB     1       ; Side/Side sector skew
        DCB     0       ; Boot option
        DCB     0       ; Neither sequence sides nor double step
        DCB     7       ; Zone
        DCW     800     ; ZoneSpare
        DCD     &20f    ; Root dir ind. disc address
        DCD     3200*K  ; Disc size
        DCW     0       ; DiscId *
        DCB     "          " ; DiscName *
 [ BigDir
        DCD     0       ; DiscType
        DCD     0       ; DiscSize2
        DCB     0       ; ShareSize
        DCB     0       ; BigFlag
        DCB     0       ; Zones2
        DCB     0       ; reserved
        DCD     0       ; format version
        DCD     0       ; not used

        ASSERT  ({PC} - Format_GFloppyDiscRecord) = SzDiscRecSig2
 |
        ASSERT  ({PC} - Format_GFloppyDiscRecord) = SzDiscRecSig
 ]

FileCoreService_IdentifyFormat ROUT
        Push    "r2,lr"

        LDRB    r2, [r0, #0]
        TEQ     r2, #0
        Pull    "r2,pc",EQ              ; Length 0

        TEQ     r2, #"L"
        TEQNE   r2, #"l"
        TEQNE   r2, #"D"
        TEQNE   r2, #"d"
        TEQNE   r2, #"E"
        TEQNE   r2, #"e"
        TEQNE   r2, #"F"
        TEQNE   r2, #"f"
        TEQNE   r2, #"G"
        TEQNE   r2, #"g"
        Pull    "r2,pc",NE              ; Doesn't start L, D, E or F

 [ BigMaps
        LDRB    r2, [r0, #1]
        TEQ     r2, #0
        BEQ     %FT02

        ; is it EX or FX?

        TEQ     r2, #"+"
        TEQNE   r2, #"+"
        Pull    "r2,pc",NE              ; second char not X or x

        LDRB    r2, [r0, #2]            ; check length
        TEQ     r2, #0

        Pull    "r2,pc",NE              ; Length > 2
        LDRB    r2, [r0, #0]

        TEQ     r2, #"E"
        TEQNE   r2, #"e"
        MOVEQ   r3, #Format_Floppy :OR: Format_E
        ADREQ   r5, Format_EXFloppyDiscRecord

        BEQ     %FT01

        TEQNE   r2, #"F"
        TEQNE   r2, #"f"
        MOVEQ   r3, #Format_Floppy :OR: Format_F
        ADREQ   r5, Format_FXFloppyDiscRecord

        Pull    "r2,pc",NE              ; not EX or FX

01
        LDR     r2, =XFileCore_DiscFormat
        LDR     r4, =XFileCore_LayoutStructure

        ; Claim service and return
        MOV     r1, #Service_Serviced
        ADD     sp, sp, #1*4
        Pull    "pc"

02
        Pull    "r2,pc",NE              ; Length > 1
 ]

        ; Determine which it is
        LDRB    r2, [r0, #0]
        TEQ     r2, #"L"
        TEQNE   r2, #"l"
        MOVEQ   r3, #Format_Floppy :OR: Format_L
        ADREQ   r5, Format_LFloppyDiscRecord
        TEQ     r2, #"D"
        TEQNE   r2, #"d"
        MOVEQ   r3, #Format_Floppy :OR: Format_D
        ADREQ   r5, Format_DFloppyDiscRecord
        TEQ     r2, #"E"
        TEQNE   r2, #"e"
        MOVEQ   r3, #Format_Floppy :OR: Format_E
        ADREQ   r5, Format_EFloppyDiscRecord
        TEQ     r2, #"F"
        TEQNE   r2, #"f"
        MOVEQ   r3, #Format_Floppy :OR: Format_F
        ADREQ   r5, Format_FFloppyDiscRecord
        TEQ     r2, #"G"
        TEQNE   r2, #"g"
        MOVEQ   r3, #Format_Floppy :OR: Format_G
        ADREQ   r5, Format_GFloppyDiscRecord

        LDR     r2, =XFileCore_DiscFormat
        LDR     r4, =XFileCore_LayoutStructure

        ; Claim service and return
        MOV     r1, #Service_Serviced
        ADD     sp, sp, #1*4
        Pull    "pc"

FileCoreService_DisplayFormatHelp ROUT
        Push    "r0-r7,lr"

        SUB     sp, sp, #16+1024        ; Message block and buffer

        ; Open the message file
        MOV     r0, sp
        ADRL    r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        BVS     %FT90

        ; Lookup the message
        MOV     r0, sp
        ADR     r1, FormatHelp
        ADD     r2, sp, #16
        MOV     r3, #1024
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_GSLookup
        BVS     %FT80

        ; Write it out
        MOV     r0, r2
        MOV     r1, r3
        SWI     XOS_WriteN

80
        ; Close the message file, preserving the error
        MOV     r9, #0
        MOVVS   r9, r0
        MOV     r0, sp
        SWI     XMessageTrans_CloseFile
        MOVVS   r9, r0
        MOVS    r0, r9
        SETPSR  V_bit,lr,NE
90
        ; Drop the stack frame and return error if generated.
        ADD     sp, sp, #16+1024
        STRVS   r0, [sp, #0*4]
        MOVVS   r1, #Service_Serviced
        STRVS   r1, [sp, #1*4]
        Pull    "r0-r7,pc"

FormatHelp
        DCB     "FS8", 0
        ALIGN

; ======
; strlen
; ======

; entry: r1->string (\0 terminated)

; exit: r3 = len

strlen ROUT
        Push    "r1,r2,lr"
        SavePSR r2
        MOV     r3, #0
10
        LDRB    lr, [r1], #1
        TEQ     lr, #0
        ADDNE   r3, r3, #1
        BNE     %BT10
        RestPSR r2,,f
        Pull    "r1,r2,pc"

; ======
; strcpy
; ======

; entry: r1->destination
;        r2->source (ctrl char terminated)

; exit:

strcpy ROUT
        Push    "r1-r3,lr"
        SavePSR r3
10
        LDRB    lr, [r2], #1
        CMP     lr, #" "
        MOVLO   lr, #0
        STRB    lr, [r1], #1
        BHS     %BT10
        RestPSR r3,,f
        Pull    "r1-r3,pc"

        END
@


4.3
log
@32-bit compatible. Some known issues remaining - don't use, except for
testing.

Version 3.23. Tagged as 'FileCore-3_23'
@
text
@d102 4
a105 4
	MOV	r1, r10
	BL	strlen
	ADD	r10, r10, r3
	ADD	r10, r10, #1
d236 1
a236 1
        DCB     Double  ; Density
d241 1
a241 1
        DCB     SequenceSides
d245 1
a245 1
        DCD     640*1024 ; Disc size
d249 8
a256 8
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; version
        DCD	0	; not used
d258 1
a258 1
        ASSERT  ({PC} - Format_LFloppyDiscRecord) = DiscRecSig2
d260 1
a260 1
        ASSERT  ({PC} - Format_LFloppyDiscRecord) = DiscRecSig
d268 1
a268 1
        DCB     Double  ; Density
d277 1
a277 1
        DCD     800*1024 ; Disc size
d281 8
a288 8
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; version
        DCD	0	; not used
d290 1
a290 1
        ASSERT  ({PC} - Format_DFloppyDiscRecord) = DiscRecSig2
d292 1
a292 1
        ASSERT  ({PC} - Format_DFloppyDiscRecord) = DiscRecSig
a293 1
;        ASSERT  ({PC} - Format_DFloppyDiscRecord) = DiscRecSig
d300 1
a300 1
        DCB     Double  ; Density
d309 1
a309 1
        DCD     800*1024 ; Disc size
d313 8
a320 8
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; version
        DCD	0	; not used
d322 1
a322 1
        ASSERT  ({PC} - Format_EFloppyDiscRecord) = DiscRecSig2
d324 1
a324 1
        ASSERT  ({PC} - Format_EFloppyDiscRecord) = DiscRecSig
a325 1
;        ASSERT  ({PC} - Format_EFloppyDiscRecord) = DiscRecSig
d329 1
a329 1
EXRoot	* &301		; indirect disc address of root dir
d336 1
a336 1
        DCB     Double  ; Density
d345 1
a345 1
        DCD     800*1024 ; Disc size
d348 8
a355 8
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	1	; format version
        DCD	BigDirMinSize	; size of root dir
d357 1
a357 1
        ASSERT  ({PC} - Format_EXFloppyDiscRecord) = DiscRecSig2
d365 1
a365 1
        DCB     Quad    ; Density
d374 1
a374 1
        DCD     1600*1024 ; Disc size
d378 8
a385 8
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; format version
        DCD	0	; not used
d387 1
a387 1
        ASSERT  ({PC} - Format_FFloppyDiscRecord) = DiscRecSig2
d389 1
a389 1
        ASSERT  ({PC} - Format_FFloppyDiscRecord) = DiscRecSig
a390 1
;        ASSERT  ({PC} - Format_FFloppyDiscRecord) = DiscRecSig
d399 1
a399 1
        DCB     Quad    ; Density
d408 1
a408 1
        DCD     1600*1024 ; Disc size
d411 9
a419 9
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	1	; format version
        DCD	BigDirMinSize	; size of root dir
        ASSERT  ({PC} - Format_FXFloppyDiscRecord) = DiscRecSig2
d427 1
a427 1
        DCB     Octal   ; Density
d436 1
a436 1
        DCD     3200*1024 ; Disc size
d440 8
a447 8
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; format version
        DCD	0	; not used
d449 1
a449 1
        ASSERT  ({PC} - Format_GFloppyDiscRecord) = DiscRecSig2
d451 1
a451 1
        ASSERT  ({PC} - Format_GFloppyDiscRecord) = DiscRecSig
a452 1
;        ASSERT  ({PC} - Format_GFloppyDiscRecord) = DiscRecSig
d476 1
a476 1
        BEQ	%FT02
d480 2
a481 2
        TEQ	r2, #"+"
        TEQNE	r2, #"+"
d484 2
a485 2
        LDRB	r2, [r0, #2]		; check length
        TEQ	r2, #0
d488 1
a488 1
        LDRB	r2, [r0, #0]
d490 2
a491 2
        TEQ	r2, #"E"
        TEQNE	r2, #"e"
d495 1
a495 1
        BEQ	%FT01
d497 2
a498 2
        TEQNE	r2, #"F"
        TEQNE	r2, #"f"
d502 1
a502 1
        Pull	"r2,pc",NE		; not EX or FX
@


4.2
log
@  Merge of Ursula branch to the trunk.
Detail:
  This module represents the latest version of FileCore incorporating
    both the Ursula changes and the ROL changes as we have them to date.
  Changes from ROL-FileCore-3_21 are basically the stripping of trailling
    spaces and the change of Version to Module_Version in the conditionals.
    No other changes.
Admin:
  ROL branch tagged ROL_merge
  Ursula branch tagged Ursula_merge.
  Untested, but essentially the same as ROL-FileCore-3_21, so no problems
    expected.

Version 3.21. Tagged as 'FileCore-3_21'
@
text
@d131 1
a131 1
        Pull    "r0-r11, pc",,^
d463 1
a463 1
        Pull    "r2,pc",EQ,^            ; Length 0
d475 1
a475 1
        Pull    "r2,pc",NE,^            ; Doesn't start L, D, E or F
d486 1
a486 1
        Pull    "r2,pc",NE,^            ; second char not X or x
d491 1
a491 1
        Pull    "r2,pc",NE,^            ; Length > 2
d506 1
a506 1
        Pull	"r2,pc",NE,^		; not EX or FX
d515 1
a515 1
        Pull    "pc",,^
d518 1
a518 1
        Pull    "r2,pc",NE,^            ; Length > 1
d550 1
a550 1
        Pull    "pc",,^
d589 1
a589 3
        MOVNE   lr, pc
        ORRNE   lr, lr, #V_bit
        TEQNEP  pc, lr
d596 1
a596 1
        Pull    "r0-r7,pc",,^
d611 2
a612 1
        Push    "r1, lr"
d619 2
a620 1
        Pull    "r1,pc",,^
d632 2
a633 1
        Push    "r1,r2,lr"
d640 2
a641 1
        Pull    "r1,r2,pc",,^
@


4.1
log
@Initial revision
@
text
@d101 6
a106 1
        ADD     r10, r10, #3+2
d185 12
d207 12
d248 12
d261 1
d280 12
d293 2
d313 12
d326 35
d379 12
d392 32
d442 12
d455 2
d477 1
d480 38
d519 1
d579 1
a579 1
        SWI     XOS_WriteN 
@


4.1.4.1
log
@Now supports formatting of floppies with long file names.
@
text
@a179 12
 [ BigDir
        DCD     EnumFormats_IsNative :OR: EnumFormats_HasFormatParam
        DCD     Format_Floppy :OR: Format_E
        DCD     XFileCore_LayoutStructure
        DCD     Format_EXFloppyDiscRecord - Module_BaseAddr
EXFormat_DescribeTag
        DCB     "FS11",0
        DCB     "FS12", 0
        DCB     "E+",0
        ALIGN
 ]

a189 12
 [ BigMaps
        DCD     EnumFormats_IsNative :OR: EnumFormats_HasFormatParam
        DCD     Format_Floppy :OR: Format_F
        DCD     XFileCore_LayoutStructure
        DCD     Format_FXFloppyDiscRecord - Module_BaseAddr
FXFormat_DescribeTag
        DCB     "FS13", 0
        DCB     "FS14", 0
        DCB     "F+",0
        ALIGN
 ]

a218 12
 [ BigDir
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; version
        DCD	0	; not used
        
        ASSERT  ({PC} - Format_LFloppyDiscRecord) = DiscRecSig2
 |
a219 1
 ]
a237 12
 [ BigDir
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; version
        DCD	0	; not used
        
        ASSERT  ({PC} - Format_DFloppyDiscRecord) = DiscRecSig2
 |
a238 2
 ]
;        ASSERT  ({PC} - Format_DFloppyDiscRecord) = DiscRecSig
a256 12
 [ BigDir
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; version
        DCD	0	; not used
        
        ASSERT  ({PC} - Format_EFloppyDiscRecord) = DiscRecSig2
 |
a257 35
 ]
;        ASSERT  ({PC} - Format_EFloppyDiscRecord) = DiscRecSig
 
 [ BigDir
 
EXRoot	* &301		; indirect disc address of root dir

Format_EXFloppyDiscRecord
        ; * means gets filled in before being used
        DCB     10      ; Log2 Sector Size
        DCB     5       ; sectors per track
        DCB     2       ; Heads
        DCB     Double  ; Density
        DCB     15      ; Length of Id field (map bits)
        DCB     7       ; Bytes per map bit
        DCB     1       ; Side/Side sector skew
        DCB     0       ; Boot option
        DCB     0       ; Neither sequence sides nor double step
        DCB     1       ; Zone
        DCW     &520    ; ZoneSpare
        DCD     EXRoot  ; Root dir ind. disc address
        DCD     800*1024 ; Disc size
        DCW     0       ; DiscId *
        DCB     "          " ; DiscName *
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	1	; format version
        DCD	BigDirMinSize	; size of root dir
        
        ASSERT  ({PC} - Format_EXFloppyDiscRecord) = DiscRecSig2
 ]
a275 12
 [ BigDir
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; format version
        DCD	0	; not used
        
        ASSERT  ({PC} - Format_FFloppyDiscRecord) = DiscRecSig2
 |
a276 32
 ]
;        ASSERT  ({PC} - Format_FFloppyDiscRecord) = DiscRecSig

 [ BigDir
 
Format_FXFloppyDiscRecord
        ; * means gets filled in before being used
        DCB     10      ; Log2 Sector Size
        DCB     10      ; sectors per track
        DCB     2       ; Heads
        DCB     Quad    ; Density
        DCB     15      ; Length of Id field (map bits)
        DCB     6       ; Bytes per map bit
        DCB     1       ; Side/Side sector skew
        DCB     0       ; Boot option
        DCB     0       ; Neither sequence sides nor double step
        DCB     4       ; Zone
        DCW     1600    ; ZoneSpare
        DCD     &33801  ; Root dir ind. disc address
        DCD     1600*1024 ; Disc size
        DCW     0       ; DiscId *
        DCB     "          " ; DiscName *
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	1	; format version
        DCD	BigDirMinSize	; size of root dir
        ASSERT  ({PC} - Format_FXFloppyDiscRecord) = DiscRecSig2
 ]
a294 12
 [ BigDir
        DCD	0	; DiscType
        DCD	0	; DiscSize2
        DCB	0	; ShareSize
        DCB	0	; BigFlag
        DCB	0	; Zones2
        DCB	0	; reserved
        DCD	0	; format version
        DCD	0	; not used
        
        ASSERT  ({PC} - Format_GFloppyDiscRecord) = DiscRecSig2
 |
a295 2
 ]
;        ASSERT  ({PC} - Format_GFloppyDiscRecord) = DiscRecSig
a315 1
 [ BigMaps
a317 38
        BEQ	%FT02
        
        ; is it EX or FX?
        
        TEQ	r2, #"+"
        TEQNE	r2, #"+"
        Pull    "r2,pc",NE,^            ; second char not X or x
        
        LDRB	r2, [r0, #2]		; check length
        TEQ	r2, #0
        
        Pull    "r2,pc",NE,^            ; Length > 2
        LDRB	r2, [r0, #0]		
        
        TEQ	r2, #"E"
        TEQNE	r2, #"e"
        MOVEQ   r3, #Format_Floppy :OR: Format_E
        ADREQ   r5, Format_EXFloppyDiscRecord
        
        BEQ	%FT01
        
        TEQNE	r2, #"F"
        TEQNE	r2, #"f"
        MOVEQ   r3, #Format_Floppy :OR: Format_F
        ADREQ   r5, Format_FXFloppyDiscRecord
        
        Pull	"r2,pc",NE,^		; not EX or FX

01
        LDR     r2, =XFileCore_DiscFormat
        LDR     r4, =XFileCore_LayoutStructure

        ; Claim service and return
        MOV     r1, #Service_Serviced
        ADD     sp, sp, #1*4
        Pull    "pc",,^

02
a318 1
 ]
@


4.1.4.2
log
@Fixed bug in handling of Service_EnumerateFormats which was preventing all
formats being listed by ADFSFiler.
@
text
@d101 1
a101 6

	MOV	r1, r10
	BL	strlen
	ADD	r10, r10, r3
	ADD	r10, r10, #1
        ADD     r10, r10, #3
d252 1
a252 1

d284 1
a284 1

d317 1
a317 1

d323 1
a323 1

d325 1
a325 1

d353 1
a353 1

d383 1
a383 1

d391 1
a391 1

d446 1
a446 1

d476 1
a476 1

d478 1
a478 1

d482 1
a482 1

d485 1
a485 1

d487 2
a488 2
        LDRB	r2, [r0, #0]

d493 1
a493 1

d495 1
a495 1

d500 1
a500 1

d574 1
a574 1
        SWI     XOS_WriteN
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
