head	4.1;
access;
symbols
	FileCore-3_75:4.1
	FileCore-3_74:4.1
	FileCore-3_73:4.1
	FileCore-3_72:4.1
	FileCore-3_71:4.1
	FileCore-3_70:4.1
	FileCore-3_69:4.1
	FileCore-3_68:4.1
	FileCore-3_67:4.1
	FileCore-3_66:4.1
	FileCore-3_65:4.1
	FileCore-3_64:4.1
	FileCore-3_63:4.1
	FileCore-3_62:4.1
	FileCore-3_61:4.1
	FileCore-3_60:4.1
	FileCore-3_59:4.1
	FileCore-3_58:4.1
	FileCore-3_57:4.1
	FileCore-3_56:4.1
	FileCore-3_55:4.1
	FileCore-3_54:4.1
	FileCore-3_53:4.1
	FileCore-3_52:4.1
	FileCore-3_51:4.1
	FileCore-3_50:4.1
	FileCore-3_49:4.1
	FileCore-3_48:4.1
	FileCore-3_47:4.1
	FileCore-3_46:4.1
	FileCore-3_45:4.1
	FileCore-3_44:4.1
	FileCore-3_43:4.1
	FileCore-3_42:4.1
	FileCore-3_41:4.1
	FileCore-3_40:4.1
	FileCore-3_39:4.1
	FileCore-3_38:4.1
	FileCore-3_37:4.1
	FileCore-3_36:4.1
	FileCore-3_35:4.1
	FileCore-3_34:4.1
	FileCore-3_33:4.1
	RO_5_07:4.1
	FileCore-3_32:4.1
	FileCore-3_31:4.1
	FileCore-3_30:4.1
	FileCore-3_29:4.1
	FileCore-3_28:4.1
	FileCore-3_25-4_9_2_2:4.1
	FileCore-3_27:4.1
	FileCore-3_26:4.1
	FileCore-3_22-4_6_2_1:4.1
	bavison_FileCore-3_22_dev_bp:4.1
	bavison_FileCore-3_22:4.1.0.14
	FileCore-3_25-4_9_2_1:4.1
	HAL:4.1.0.12
	FileCore-3_25:4.1
	FileCore-3_24:4.1
	FileCore-3_23:4.1
	dellis_autobuild_BaseSW:4.1
	FileCore-3_22:4.1
	Ursula_merge:4.1
	ROL_merge:4.1
	FileCore-3_21:4.1
	ROL_Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	ROL_FileCore-3_21:4.1
	ROL_FileCore-3_20:4.1
	ROL:4.1.0.10
	ROL_bp:4.1
	Ursula_RiscPC_bp:4.1
	FileCore-3_18:4.1
	FileCore-3_01:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	FileCore-3_00:4.1
	FileCore-2_99:4.1
	aglover_FileCore-3_17:4.1
	sproven_FileCore-3_16:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	sproven_FileCore-3_15:4.1
	sproven_314:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_313:4.1
	sproven_3_11:4.1
	sproven_3_10:4.1
	sproven_Ursula_3_09:4.1
	sproven_3_07:4.1
	sproven_3_06:4.1
	sproven_3_05:4.1
	sproven_3_04:4.1
	Spinner_RCA116:4.1.7.1
	sproven_3_03:4.1
	sproven_3_02:4.1
	sproven_3_01:4.1
	sproven_2_99:4.1
	sproven_2_98:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.32.12;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.12;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.02.39;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.33.36;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.30.26;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@Roger,
  remember you got me thinking about how to do big discs in FileCore the
other day? Well, here's the result:

Answer: Yes, probably feasible in a not unreasonable amount of time.

How:
  Two parts to change here:
  * The map format needs adjusting to cope better with monster discs. The
        limiting factor in the map is the header field which gives the
        link to the first free fragment in a zone. This is currently 2
        bytes big which limits the disc to being divided into 32766
        pieces. On a 4G disc this will give 128K byte directories! This is
        silly. There's three approaches to sorting this out: stretch the
        field to 4 bytes; deal with the 2-byte first free link specially;
        free links are 15 bits or LinkBits (a field in the disc record)
        long, whichever is the shorter. All of these are practical and
        reasonable - it just needs a day or so of analysis to choose which
        is best. Instant analysis gives: new disc format - awkward; special
        case at start of free lists - awkward; doesn't seem to have obvious
        problems. Once the limit has been removed discs can be divided into
        more parts and so are somewhat more sensible. Unfortunately, this
        means monster maps too:
        LinkBits        Max Map Size    Disc Size
        15              ~64K            ~512M (dirs 16K)
        16              ~136K           ~1G (dirs 17K)
        17              ~288K           ~2G (dirs 18K)
        18              ~608K           ~4G (dirs 19K)
        19              ~1280K          ~8G (dirs 20K)
        Note the map size approximate values are low by about 1%.
        Each halving of the directory size takes you into the next higher
        map size.
  * The conversion from indirect disc addresses (Object ID,offest) to
        direct disc addresses (disc offset) needs to convert to sector
        offsets instead. Indeed, FileCore will always deal with sector
        offsets internally and will convert to these when a DiscOp is given
        and from these if the low level filing system can't cope with sector
        offsets. An analysis is given below of the impact of such a change.

I'd definitely do and finish the first change before the second because it
gives some benefits early (smaller directories) and has less of a global
impact throughout FileCore.


Convert FileCore to big discs:

Externally the world sees big files (up to 4GBytes) and a new low level API
where a filing system (eg SCSIFS) can request to be given sector numbers,
not byte numbers as disc addresses. On these filing systems FileCore_DiscOp
will reject non-sector aligned requests with non-sector transfer amounts.

Internally IndDisc addresses are still passed around with offsets, but get
converted to sector addresses before DiscOp is called.

IndDiscAdd:
bit     use
0-7     sector offset within shared object (usually 0)
8-28    Object ID (21 bits)
29-31   disc number

Routines to be changed (Files with routines listed have been analysed, those
without haven't):

Commands
FileCore15
  GenIndDiscOp - convert to sector shifted
  RetryDriveOp - convert to sector shifted scheme
  DoCachedReadSecs - convert (yuck!)
  DoCachedReadSector - convert (yuck!)
FileCore20
  ReadFsMap - convert
  Mount - convert defect address for sect size
FileCore30
  MoveData - convert to shifted quantities
FileCore31
  NewRandomClaim - convert to shifted form
FileCore32
  DoCompMoves - convert to shifted form
FileCore33
  FindFileFragment - Add offset shifted by sector size
  MapDiscApp - work in sector shifted quantities
  MapPtrToDiscAdd - work in sector shifted quantities
  DiscAddToMapPtr - work in sector shifted quantities
FileCore45
  CriticalWriteFsMap - switch to shifted
FileCore80
  Shifting for DiscOp calling
GenSWIs
Identify
InitDieSvc
ModHand
MsgsStuff
MyMacros

Files which won't change:
DebugOpts
Defns
DevVersion
Errors
FileCore00
FileCore05
FileCore25
FileCore35
FileCore40
FileCore60
FileCore70
Fixes
FormSrvcs
FormSWIs
HelpText
TokenHelp
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
