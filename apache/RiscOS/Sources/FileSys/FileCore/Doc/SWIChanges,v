head	4.1;
access;
symbols
	FileCore-3_75:4.1
	FileCore-3_74:4.1
	FileCore-3_73:4.1
	FileCore-3_72:4.1
	FileCore-3_71:4.1
	FileCore-3_70:4.1
	FileCore-3_69:4.1
	FileCore-3_68:4.1
	FileCore-3_67:4.1
	FileCore-3_66:4.1
	FileCore-3_65:4.1
	FileCore-3_64:4.1
	FileCore-3_63:4.1
	FileCore-3_62:4.1
	FileCore-3_61:4.1
	FileCore-3_60:4.1
	FileCore-3_59:4.1
	FileCore-3_58:4.1
	FileCore-3_57:4.1
	FileCore-3_56:4.1
	FileCore-3_55:4.1
	FileCore-3_54:4.1
	FileCore-3_53:4.1
	FileCore-3_52:4.1
	FileCore-3_51:4.1
	FileCore-3_50:4.1
	FileCore-3_49:4.1
	FileCore-3_48:4.1
	FileCore-3_47:4.1
	FileCore-3_46:4.1
	FileCore-3_45:4.1
	FileCore-3_44:4.1
	FileCore-3_43:4.1
	FileCore-3_42:4.1
	FileCore-3_41:4.1
	FileCore-3_40:4.1
	FileCore-3_39:4.1
	FileCore-3_38:4.1
	FileCore-3_37:4.1
	FileCore-3_36:4.1
	FileCore-3_35:4.1
	FileCore-3_34:4.1
	FileCore-3_33:4.1
	RO_5_07:4.1
	FileCore-3_32:4.1
	FileCore-3_31:4.1
	FileCore-3_30:4.1
	FileCore-3_29:4.1
	FileCore-3_28:4.1
	FileCore-3_25-4_9_2_2:4.1
	FileCore-3_27:4.1
	FileCore-3_26:4.1
	FileCore-3_22-4_6_2_1:4.1
	bavison_FileCore-3_22_dev_bp:4.1
	bavison_FileCore-3_22:4.1.0.14
	FileCore-3_25-4_9_2_1:4.1
	HAL:4.1.0.12
	FileCore-3_25:4.1
	FileCore-3_24:4.1
	FileCore-3_23:4.1
	dellis_autobuild_BaseSW:4.1
	FileCore-3_22:4.1
	Ursula_merge:4.1
	ROL_merge:4.1
	FileCore-3_21:4.1
	ROL_Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	ROL_FileCore-3_21:4.1
	ROL_FileCore-3_20:4.1
	ROL:4.1.0.10
	ROL_bp:4.1
	Ursula_RiscPC_bp:4.1
	FileCore-3_18:4.1
	FileCore-3_01:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	FileCore-3_00:4.1
	FileCore-2_99:4.1
	aglover_FileCore-3_17:4.1
	sproven_FileCore-3_16:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	sproven_FileCore-3_15:4.1
	sproven_314:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_313:4.1
	sproven_3_11:4.1
	sproven_3_10:4.1
	sproven_Ursula_3_09:4.1
	sproven_3_07:4.1
	sproven_3_06:4.1
	sproven_3_05:4.1
	sproven_3_04:4.1
	Spinner_RCA116:4.1.7.1
	sproven_3_03:4.1
	sproven_3_02:4.1
	sproven_3_01:4.1
	sproven_2_99:4.1
	sproven_2_98:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.32.08;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.08;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.02.11;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.33.12;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.30.05;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@This is a documentation of the changes to the SWI interface to FileCore made
between version 2.04 and 2.05.

Changes to old SWIs.
--------------------

FileCore_DiscOp

Extended reason code, Write Track (4)

On entry
  R1 = &000000o4
  R2 = Disc address of start of track
  R3 = 0 (this distinguishes it from a normal Write track)
  R4 = Pointer to disc format structure
On exit
  All regs preserved, except in an error.

The disc format structure is as follows:
Offset  Length  Meaning
0       4       Sector size (bytes)
4       4       Gap1 side 0
8       4       Gap1 side 1
12      4       Gap3
16      1       Sectors per track
17      1       Density:
                1 - single (125Kbps FM)
                2 - double (250Kbps MFM)
                3 - Double+ (300Kbps MFM)
                4 - quad (500Kbps MFM)
                8 - octal (1000Mbps MFM)
18      1       Options:
                Bit 0   1 - index mark required
                Bit 1   1 - double step
                Bit 2-3 0 - alternate sides
                        1 - Format side 1 only
                        2 - format side 2 only
                        3 - Sequence sides
                Bit 4-7 reserved, should be 0
19      1       Sector fill value
20      4       cylinders per drive
24      12      Reserved, should be 0
36      ?       Sector ID buffer, 1 word per sector:
                bits    use
                0-7     Cylinder number mod 256
                8-15    Head (0 for side 1, 1 for side 2)
                16-23   Sector number
                24-31   Log2 sector size - 7, eg 1 for 256 byte sector

The o nibble in R1 is the flags nibble as normal. The SWI will format a
track of the specified disc. An error will occur if the specified format is
not possible to generate, or if the track requested is outside the valid
range. The tracks are numbered from 0, so the valid track numbers are 0 to
number of track minus one. The mapping of the address is controlled by the
disc structure record.

New reason code, CachedReadSectors (9)

In
  R1 = 9 (CachedReadSectors) 
  R2 = disc address
  R3 = pointer to buffer
  R4 = length in bytes
  R6 = Cache handle
  R8 = Pointer to FileCore instance private word

Out
  R1 preserved
  R2 = disc address of next byte to be transfered
  R3 = pointer to next buffer location to be transfered
  R4 = number of bytes not transfered
  R6 = New cache handle

This DiscOp reason code will read sectors via a cache held in the RMA. To
start a sequence of these operations call this with R6=0. The following
options apply when this reason is used:

An alternate defect list cannot be specified
A scatter list can not be specified
Escape can not be ignored
A 1 second timeout on floppy discs applies

Setting these options bits will have no effect. Multiple calls to this may
update R6, the cache handle. The new value of R6 must be used in subsequent
calls of CachedReadSectors. To discard the cache once finished call
FileCore_DiscardReadSectorsCache.

FileCore_Create

Notes on the PRM:
In the desciptor block the flag bits have the following meanings:
Bit     Meaning when set
0       Winnie needs FIQ
1       Floppy needs FIQ
2       Unused (The PRM incorrectly described this bit)
3       Use scratch space only when a temporary buffer is needed
        (The PRM did not describe this bit). Other areas
        which are sometimes used are:
                Spare screen memory
                Wimp free pool
                RMA heap
                System heap
                Application area
                Dir cache
        Here is a table of usage:

                Area:   SS      VDU     WF      RH      SH      AA      DC
        Usage:
        Rename          *       *       *       *       *
        Close           *       *       *       *       *
        EnsureSize      *       *       *       *       *
        AllocCompact    *       *       *       *       *
        Compact         *       *       *       *       *
        *Backup X X                     *       *       *               *
        *backup X Y     *       *       *       *       *
        *backup X X q                   *       *       *       *       *
        *backup X Y q   *       *       *       *       *       *
        *compact        *       *       *       *       *

        Key:
        SS      Scratch space
        VDU     Spare screen area
        WF      Wimp free pool
        RH      RMA heap
        SH      System heap
        AA      Application area
        DC      Directory cache
        Rename  fsfunc_Rename
        Close   fsentry_Close
        EnsureSize fsargs_EnsureSize
        AllocCompact Auto-compact triggered when allocating space for a file
        Compact Auto-compact
        *backup The *Backup command
        *Compact The *Compact command

4       Winnies support mount like floppies do, ie they fill in sector size,
        heads, sectors per track and density.
5       Winnies support poll change. This means the poll change call on a
        winnie will work and return a sensible value. This also means that
        locking winnies will have a sensible result.

New SWIs.
---------

FileCore_DiscardReadSectorsCache (&40546)

In
  R6 = Cache handle
Out
  Cache discarded


FileCore_DiscFormat (&40547)

In
  R0 = pointer to the disc format structure to be filled in (64 bytes)
  R1 = number of SWI to vet the format
  R2 = parameter to pass to the vetting SWI
  R3 = format specifier
Out
  regs preserved

This SWI fills in the format structure with the parameters for the specified
format. Once filled in the format structure will be vetted by the given SWI
before this SWI returns. The following format specifiers are defined:
        &80     L format floppy
        &81     D format floppy
        &82     E format floppy
        &83     F format floppy

FileCore_LayoutStructure (&40548)

In
  R0 = identifier of particular format to lay out
  R1 = pointer to bad block list
  R2 = pointer to nul-terminated disc name
  R3 = file handle
Out
  Regs preserved

This SWI will lay out into the specified file a set of structures
corresponding to the identified format. The format identifier is a pointer
to a disc record. An error will be returned if the specified format can not
map out defects and there were defects in the defect list.


FileCore_MiscOp

In
  R0 = reason
  R1 = drive
  R2..R5 depend on reason
  R8 = pointer to FileCore instance private word

Out
  R0..R6 depend on reason

This SWI provides various miscellaneous functions for accessing drives:

Misc_Mount
In
  R0 = 0
  R1 = drive
  R2 = disc address to read from
  R3 = pointer to buffer
  R4 = length to read into buffer
  R5 = pointer to disc record to fill in

Out
  R0..R5 preserved

This will mount the disc in the specified drive and fill in, where possible,
the physical details of the disc in the supplied disc record. The disc
record need only be 32 bytes long.

Misc_PollChanged
In
  R0 = 1
  R1 = drive
  R2 = sequence number
Out
  R2 = new sequence number
  R3 = result flags

This will sence the status of the drive. The sequence number is used to
prevent a user of Misc_PollChanged missing a change of disc in the drive.
The bits in the resul flags have the following meanings:
Bit     Meaning when set
0       Disc hasn't changed since last poll
1       Disc may have changed since last poll
2       Disc changed since last poll
3       Drive is empty
4       Drive is ready
5       Drive is 40-track
6       Drive has empty detection
7       Drive has disc changed detection
8       Disc in drive is high density
9       Disc density detection works
10      Drive ready works
11-31   Reserved for future use - will be 0.
Only one of bits 0-3 will be set at any time. To use this quote a sequence
number of 0 first time round and quote back the returned sequence number
from the last poll in each further poll.

Misc_LockDrive
In
  R0 = 2
  R1 = drive
Out
  -

This locks the disc in the drive. For floppy discs this causes the drive
light to remain illuminated until the drive is unlocked. Note that locks are
counted so that each LockDrive must be matched by an UnlockDrive.

Misc_UnlockDrive
In
  R0 = 3
  R1 = drive
Out
  -

This reverses the LockDrive miscellaneous operation.

Misc_PollPeriod
In
  R0 = 4
  R1 = drive
Out
  R5 = minimum polling period (in centi-seconds), or -1 if disc changed
        doesn't work.
  R6 = pointer to media type string eg 'disc' for ADFS.
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
