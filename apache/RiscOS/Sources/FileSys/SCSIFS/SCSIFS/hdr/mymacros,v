head	4.5;
access;
symbols
	SCSIFS-1_35:4.5
	SCSIFS-1_34:4.5
	SCSIFS-1_33:4.5
	SCSIFS-1_32:4.5
	SCSIFS-1_31:4.5
	SCSIFS-1_30:4.4
	SCSIFS-1_29:4.3
	SCSIFS-1_28:4.3
	SCSIFS-1_27:4.2
	SCSIFS-1_26:4.2
	SCSIFS-1_25:4.2
	SCSIFS-1_24:4.2
	SCSIFS-1_23:4.2
	SCSIFS-1_22:4.2
	SCSIFS-1_21:4.2
	SCSIFS-1_20:4.2
	SCSIFS-1_19:4.2
	SCSIFS-1_18:4.2
	SCSIFS-1_17:4.2
	SCSIFS-1_16:4.2
	SCSIFS-1_15:4.2
	SCSIFS-1_14:4.2
	SCSIFS-1_13:4.2
	SCSIFS-1_12:4.2
	RO_5_07:4.2
	SCSIFS-1_11:4.2
	dellis_autobuild_BaseSW:4.1
	SCSIFS-0_25:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SCSIFS-0_25:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	RCA:4.1.0.2
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2017.09.09.20.36.34;	author jlee;	state Exp;
branches;
next	4.4;
commitid	R0KtP8j50xURXy6A;

4.4
date	2017.09.09.20.29.58;	author jlee;	state Exp;
branches;
next	4.3;
commitid	bB8BD6OBVuZBVy6A;

4.3
date	2013.10.06.13.49.18;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	8D9mMcKPmGAXNe8x;

4.2
date	2003.05.23.13.05.38;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.34.09;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.34.09;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.04.42;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.42.02;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.38.22;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Minor improvements
Detail:
  hdr/mymacros, s/ScsiFs05 - Remove some unused 26bit-only macros. Use REV instruction in RevBytes macro when possible. Replace most manual PSR manipulation with common macros.
  s/Hdr_fst, s/ScsiFs15 - Use Portable_Idle within 1s wait loop, to avoid thrashing the CPU
Admin:
  Tested on Raspberry Pi


Version 1.31. Tagged as 'SCSIFS-1_31'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >AdfsMacros


;do an operation with 16 bit width const as an 8 bit width if possible
        MACRO
$lab    Try8    $op,$dreg,$sreg,$const
        LCLA    bit
        LCLA    bits8
        WHILE   ($const:MOD:(1:SHL:(bit+2))=0) :LAND: bit<24
bit     SETA    bit+2
        WEND
        ASSERT  $const :SHR: bit < &10000
bits8   SETA    $const :AND: ( &FF :SHL: bit )
$lab    $op     $dreg,$sreg,#bits8
        [ $const<>bits8
bits8   SETA    $const :AND: ( &FF :SHL: ( bit+8 ) )
        $op     $dreg,$dreg,#bits8
        ]
        MEND


;put absolute address of $sboff in $reg
        MACRO
$lab    sbaddr  $reg,$sboff,$cond
$lab    Try8    ADD$cond,$reg,SB,(:INDEX:$sboff)
        MEND


        MACRO
$lab    aw      $size           ;allocate word aligned
        ASSERT  {VAR} :MOD: 4=0
$lab    #       $size
        MEND


        MACRO
$lab    a4      $size           ;allocate word aligned register relative
        ASSERT  (:INDEX: {VAR}) :MOD: 4=0
$lab    #       $size
        MEND


        MACRO
$lab    bit     $bitnum
$lab    *       1 :SHL: ($bitnum)
        MEND


        MACRO
        getSB
        LDR     SB, [SB]
        MEND


        MACRO
        Align16 $base
        ASSERT  (.-($base)) :MOD: 4 = 0
        WHILE   (.-($base)) :MOD: 16 <> 0
        MOV     R0, R0
        WEND
        MEND


;------------------------------------------------------------------------------
;
; Macro RevBytes - reverse the bytes in a register
;
        MACRO
$label  RevBytes $arm, $t1,$t2
      [ NoARMv6
$label  MVN $t1,#&FF00          ;a3=&FFFF00FF
        EOR $t2,$arm,$arm,ROR #16
        AND $t2,$t1,$t2,LSR #8
        EOR $arm,$t2,$arm,ROR #8
      |
$label  REV $arm,$arm
      ]
        MEND

;------------------------------------------------------------------------------
;
; Macro DoSCSIOp - call SCSI_Op, quietly handling "Unit Attention" sense codes
;
        MACRO
$label  DoSCSIOp
$label  BL      SCSIOp_HandlingAtn
        MEND

;
;
;------------------------------------------------------------------------------


;FOLLOWING MACROS ONLY FOR DEBUG

        MACRO
        mess    $cond,$s1,$s2,$s3,$s4,$s5
 [ {TRUE}
        B$cond  %F11
        BAL     %F21
11
        Push    "R0,R1,LR"
        BL      Mess1

        [ :LNOT: IrqDebug
        BNE     %FT15           ;skip if IRQ thread
        ]

        SWI     OS_WriteS
 [ "$s1"="NL"
 = CR,LF
 |
 = "ScsiFs: $s1"
 ]
 [ "$s2"=""
 |
  [ "$s2"="NL"
  = CR,LF
  |
  = "$s2"
  ]
  [ "$s3"=""
  |
   [ "$s3"="NL"
   = CR,LF
   |
   = "$s3"
   ]
   [ "$s4"=""
   |
    [ "$s4"="NL"
    = CR,LF
    |
    = "$s4"
    ]
    [ "$s5"=""
    |
     [ "$s5"="NL"
     = CR,LF
     |
     = "$s5"
     ]
    ]
   ]
  ]
 ]
        =       0
        ALIGN
        [ SpoolOff
        BL      SpoolOn
        ]
        Pull    "LR"
15
        RestPSR R0,,cf
        Pull    "R0,R1,LR"
21
 ]
        MEND

        MACRO
        wrhex   $reg,$cond
        Push    "R0-R4,LR",$cond
        MOV$cond R2,$reg
        BL$cond PHEX
        Pull    "R0-R4,LR",$cond
        MEND


        MACRO
        Tword   $reg,$cond
        Push    "R0-R3,LR",$cond
        MOV$cond R2,$reg
        BL$cond TubeWrHexWord
        Pull    "R0-R3,LR",$cond
        MEND


        MACRO
        regdump $cond
        mess    $cond,"R0       R1       R2       R3       R4       R5       R6       R7",NL
        wrhex   R0, $cond
        wrhex   R1, $cond
        wrhex   R2, $cond
        wrhex   R3, $cond
        wrhex   R4, $cond
        wrhex   R5, $cond
        wrhex   R6, $cond
        wrhex   R7, $cond
        mess    $cond,NL,"R8       R9       R10      R11      R12      R13      R14      R15",NL
        wrhex   R8, $cond
        wrhex   R9, $cond
        wrhex   R10,$cond
        wrhex   R11,$cond
        wrhex   R12,$cond
        wrhex   R13,$cond
        wrhex   R14,$cond
        wrhex   R15,$cond
        mess    $cond,NL
        MEND

        END
@


4.4
log
@Strip some old code and options
Detail:
  Since we only really care about the RISC OS 5 version of this module, there are various old switches stretching back 20+ years which can be removed to make the sources a bit easier on the eye:
  * OpticalMemorySupport (-> {TRUE})
  * IgnoreRecoveredError (-> {TRUE})
  * FloppySupport (-> {TRUE})
  * MediaLocking (-> {TRUE})
  * BigDisc (-> {TRUE})
  * AutoDetect (-> {TRUE})
  * HotPlug (-> {TRUE})
  Files changed:
  HelpText, hdr/mymacros, s/Fixes, s/Hdr_fst, s/ScsiFs00, s/ScsiFs05, s/ScsiFs15, s/ScsiFs20, s/ScsiFs50
Admin:
  Resulting binary unchanged (for default options, at least)


Version 1.29. Not tagged
@
text
@a16 45
        MACRO
        SetBorder  $r,$g,$b,$cond
        Push    "R0,R1",$cond
        LDR$cond R0, =VIDC
        MOV$cond R1, #bit30
        ORR$cond R1, R1, #$g * 16 + $r
        ORR$cond R1, R1, #$b * 256
        STR$cond R1, [R0]
        Pull    "R0,R1",$cond
        MEND


        MACRO                           ;set some PSR bits
$lab    setpsr     $bits,$tempreg,$cond
$lab    MOV$cond   $tempreg,#$bits
        ORR$cond   $tempreg,$tempreg,PC
        TEQ$cond.P PC,$tempreg
        MEND


        MACRO                           ;clear some PSR bits
$lab    clrpsr     $bits,$tempreg,$cond
$lab    MVN$cond   $tempreg,#$bits
        TST$cond.P $tempreg,PC
        MEND


        MACRO                           ;toggle some PSR bits
$lab    togpsr     $bits,$tempreg,$cond
$lab    MOV$cond   $tempreg,#$bits
        TEQ$cond.P $tempreg,PC
        MEND


        MACRO
$lab    retfiq   $cc
$lab    SUB$cc.S PC, LR, #4
        MEND


        MACRO
        nop
        MOVNV   R0,R0
        MEND

d84 1
d89 3
d168 1
a168 6
        [ No32bitCode
        TEQP    PC, R0          ;restore PSR
        nop                     ;delay in case mode change
        |
        MSR     CPSR_cf, R0
        ]
@


4.3
log
@Internationalised
In addition
 - simplify WrDec to just use OS_ConvertCardinal1 hence not need a division routine
 - change the Hide check to at least use Choices: correctly, if you must
 - macros Text and baddr eliminated

Tested in an OMAP3 ROM build.

Version 1.28. Tagged as 'SCSIFS-1_28'
@
text
@a140 1
 [ FloppySupport
a141 3
 |
$label  SWI     XSCSI_Op
 ]
@


4.2
log
@* Activated "floppy" (removable) support.
* Added big disc support.
* Added new error reporting scheme.
* Added autoconfiguration, and new SCSIdriver hotplugging.
* Added eject functionality (currently disabled due to issues with some USB
  devices).
* 32-bit compatible.

Version 1.11. Tagged as 'SCSIFS-1_11'
@
text
@a80 20
;put address of $dest in $reg
;        MACRO
;$lab    addr    $reg,$dest,$cond
;        ASSERT  $reg<>PC
;        ASSERT  ($dest-{PC}-8)<&10000
;$lab    ADD$cond $reg,PC,#($dest-{PC}-8) :AND: &FF
;        ADD$cond $reg,$reg,#($dest-{PC}-4) :AND: &FF00
;        MEND


        GBLA    boff
        MACRO
$lab    baddr   $reg,$dest,$cond
        ASSERT  $reg<>PC
boff    SETA    {PC}+8-($dest)
        ASSERT  boff<&10000
$lab    Try8    SUB$cond,$reg,PC,(boff)
        MEND


a88 7
$l      Text    $str
$l      =       "$str",0
        ALIGN
        MEND


        MACRO
@


4.1
log
@Initial revision
@
text
@d145 1
a145 1
        MOVNV   R0, R0
d161 14
d240 1
d243 3
d253 1
a253 1
        Push    "R0-R3,LR",$cond
d256 1
a256 1
        Pull    "R0-R3,LR",$cond
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
