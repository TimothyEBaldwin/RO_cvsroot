head	4.17;
access;
symbols
	SCSIFS-1_35:4.17
	SCSIFS-1_34:4.17
	SCSIFS-1_33:4.17
	SCSIFS-1_32:4.16
	SCSIFS-1_31:4.16
	SCSIFS-1_30:4.16
	SCSIFS-1_29:4.14
	SCSIFS-1_28:4.13
	SCSIFS-1_27:4.11
	SCSIFS-1_26:4.10
	SCSIFS-1_25:4.9
	SCSIFS-1_24:4.7
	SCSIFS-1_23:4.7
	SCSIFS-1_22:4.7
	SCSIFS-1_21:4.6
	SCSIFS-1_20:4.6
	SCSIFS-1_19:4.6
	SCSIFS-1_18:4.6
	SCSIFS-1_17:4.5
	SCSIFS-1_16:4.5
	SCSIFS-1_15:4.5
	SCSIFS-1_14:4.4
	SCSIFS-1_13:4.4
	SCSIFS-1_12:4.3
	RO_5_07:4.2
	SCSIFS-1_11:4.2
	dellis_autobuild_BaseSW:4.1
	SCSIFS-0_25:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SCSIFS-0_25:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	RCA:4.1.0.2
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.17
date	2018.07.13.22.53.48;	author jballance;	state Exp;
branches;
next	4.16;
commitid	aFrQNZfF8zc8R1KA;

4.16
date	2017.09.09.20.30.01;	author jlee;	state Exp;
branches;
next	4.15;
commitid	bB8BD6OBVuZBVy6A;

4.15
date	2017.09.09.20.23.53;	author jlee;	state Exp;
branches;
next	4.14;
commitid	urDJ2k0Cof4xTy6A;

4.14
date	2016.11.28.21.31.27;	author jballance;	state Exp;
branches;
next	4.13;
commitid	TW8MDzs0EPmFqWvz;

4.13
date	2013.10.06.13.49.20;	author rsprowson;	state Exp;
branches;
next	4.12;
commitid	8D9mMcKPmGAXNe8x;

4.12
date	2013.10.06.13.28.24;	author rsprowson;	state Exp;
branches;
next	4.11;
commitid	y16pwkkQv9juGe8x;

4.11
date	2013.08.23.07.00.55;	author rsprowson;	state Exp;
branches;
next	4.10;
commitid	7jw3CbjLYaGwXx2x;

4.10
date	2012.06.26.20.32.55;	author jlee;	state Exp;
branches;
next	4.9;
commitid	vuxe05m9OBG73gaw;

4.9
date	2012.04.13.23.40.25;	author bavison;	state Exp;
branches;
next	4.8;
commitid	03WlS5gEaKPUsL0w;

4.8
date	2012.03.21.01.59.37;	author bavison;	state Exp;
branches;
next	4.7;
commitid	Ds1Q6pzW6vPu0HXv;

4.7
date	2011.10.14.07.28.20;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	EhWGDLE3kx67WhDv;

4.6
date	2010.12.15.21.10.02;	author jlee;	state Exp;
branches;
next	4.5;

4.5
date	2005.03.05.02.00.15;	author jballance;	state Exp;
branches;
next	4.4;

4.4
date	2005.02.01.01.22.01;	author jballance;	state Exp;
branches;
next	4.3;

4.3
date	2005.01.31.13.37.39;	author jballance;	state Exp;
branches;
next	4.2;

4.2
date	2003.05.23.13.05.38;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.34.11;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.34.11;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.04.52;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.42.08;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.38.27;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.17
log
@  Altered interaction with PartMan. PartMan now tells SCSIFS when it can
  attempt to mount a newly connected disc.
Detail:
  In order to be certain that the partition table has been fully analysed
  before SCSIFS attempts to mount a newly connected disc, if Partman is
  detected, SCSIFS waits for a service call from PartMan before it attempts
  to mount any partitions on the disc. If PartMan interaction is not compiled,
  in, or PartMan is not detected, SCSIFS behaviour is unaltered.
Admin:
 tested on iMx6

Version 1.33. Tagged as 'SCSIFS-1_33'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >ScsiFs00

        TTL     "Declarations and workspace allocation"

        GBLL    UseSpecialScatterBlk
UseSpecialScatterBlk   SETL {TRUE}

        GBLL    DoBuffering
DoBuffering     SETL {FALSE}    ;Read-ahead/write-behind not supported

        GBLL    SeekIsNOP
SeekIsNOP       SETL {TRUE}     ;Because Rodime RO3000S objects to seek command

        GBLL    CheckXferLen
CheckXferLen    SETL {TRUE}

        GBLL    XferLenMax64K
XferLenMax64K   SETL {TRUE}

        GBLL    RetryIfBusy
RetryIfBusy     SETL {TRUE}

        GBLL    AllowPartitions
AllowPartitions SETL {TRUE}

      [ :LNOT: :DEF: PartitionManager
        GBLL    PartitionManager
PartitionManager SETL {FALSE}
      ]
        GBLL    Ejecting
Ejecting        SETL {FALSE}

      [ :LNOT: :DEF: standalone
        GBLL    standalone
standalone      SETL {FALSE}            ; Build-in Messages file and i/f to ResourceFS
      ]
      [ :LNOT: :DEF: international_help
        GBLL    international_help
international_help SETL {TRUE}          ; Default to RISC OS 3.60+ internationalisation
      ]
        GBLL    Dev
Dev     SETL    test_version


;Debug message switches
      [ Dev
        GBLL    Debug
Debug   SETL    {TRUE}
        GBLL    SpoolOff
SpoolOff SETL   {FALSE}         ; True to disable spooling for debug messages
        GBLL    IrqDebug
IrqDebug SETL   {FALSE}
      ]

        GBLL    Debug1
        GBLL    Debug2
        GBLL    Debug3
        GBLL    Debug4
        GBLL    Debug5
        GBLL    Debug6
        GBLL    Debug7
        GBLL    Debug9

        MACRO
$a      switch  $b
      [ Dev
$a      SETL    $b
      |
$a      SETL    {FALSE}
      ]
        MEND

Debug1  switch  {FALSE}         ;Init/Die/Service entries
Debug2  switch  {FALSE}         ;SCSI drivers
Debug3  switch  {FALSE}         ;low level disc op
Debug4  switch  {FALSE}         ;misc op
Debug5  switch  {FALSE}         ;SCSI drivers border colours
Debug6  switch  {FALSE}         ;SCSI drivers tube debug
Debug7  switch  {FALSE}         ;autodetection
Debug9  switch  {FALSE}         ;useful routines

        GET     hdr.MyMacros

bit0    bit 0
bit1    bit 1
bit2    bit 2
bit3    bit 3
bit4    bit 4
bit5    bit 5
bit6    bit 6
bit7    bit 7
bit8    bit 8
bit9    bit 9
bit10   bit 10
bit11   bit 11
bit12   bit 12
bit13   bit 13
bit14   bit 14
bit15   bit 15
bit16   bit 16
bit17   bit 17
bit18   bit 18
bit19   bit 19
bit20   bit 20
bit21   bit 21
bit22   bit 22
bit23   bit 23
bit24   bit 24
bit25   bit 25
bit26   bit 26
bit27   bit 27
bit28   bit 28
bit29   bit 29
bit30   bit 30
bit31   bit 31

EscapeBit       bit 6           ;escape if this bit set in ESC_Status

K       * 1024
M       * K*K

BigBit  * CreateFlag_BigDiscSupport
NewErrorBit * CreateFlag_NewErrorSupport

      [ Ejecting
EjectBit * CreateFlag_FloppyEjects
      |
EjectBit * 0
      ]


;Register allocation

SB      RN 12

LF              * 10
CR              * 13
DeleteChar      * 127


PollPeriod * 100  ;centi seconds between upcalls when disc changed works

        ASSERT  EscapeBit=&40

AltDefectBit    bit 4   ;use alternative defect map, winnies only
ScatterBit      bit 5
NoEscape        bit 6
NoTimeOut       bit 7
Atomic          * NoEscape :OR: NoTimeOut
BackBitNo       * 8     ;internal use only
BackgroundOp    bit BackBitNo
OpMask          * 2_1111 ;ops 0-15

DiscBits        * 2_111 :SHL: (32-3)    ;In all disc addresses

MaxDriveNo      * 8 ; FileCore drive numbers 0-7

; CMOS allocation

                ^ ScsiFsCMOS
CMOSflags       # 1
; b0-b2 number of SCSI discs 0-4
; b3-b5 default drive number - 4   ie  0-3
; b6    unused
; b7    unused
FileCMOS        # 1     ;number of additional file cache buffers
DirCMOS         # 1     ;dir cache size
                # 4     ;spare (was used for map sizes, pre-BigDisc)

Service_SCSIAttached * &20102
Service_SCSIDetached * &20103
      [ AllowPartitions
Service_SCSIMounting * &20104
      ]
      [ PartitionManager
XPartMan_MorePartitions * &79AC0
Service_MorePartitions * &59AC0
      ]

        AREA    |!!!SCSIFSModule|, CODE, READONLY, PIC

        ENTRY

        ; Module Header
Module_BaseAddr
        DCD     0                       ; no start entry
        DCD     InitEntry        - Module_BaseAddr
        DCD     DieEntry         - Module_BaseAddr
        DCD     ServiceEntry     - Module_BaseAddr
        DCD     ScsiFsTitle      - Module_BaseAddr
        DCD     ScsiFsHelpString - Module_BaseAddr
        DCD     ComTab           - Module_BaseAddr
        DCD     SCSIFSSWI_Base
        DCD     SwiEntry         - Module_BaseAddr
        DCD     SwiNames         - Module_BaseAddr
        DCD     0                       ; no SWI name decoding code
      [ international_help
        DCD     ScsiMsgFileName  - Module_BaseAddr
      |
        DCD     0                       ; no international help
      ]
        DCD     ModFlags         - Module_BaseAddr
        ASSERT  {PC} - Module_BaseAddr = 52

ScsiFsBootText
        DCB     "Acorn "                ; includes ScsiTitle
ScsiFsTitle
        DCB     "SCSIFS", 0
        ALIGN

DieTitle
        DCB     "FileCore%"
CreateTitle
        DCB     "SCSI", 0
        ALIGN

ScsiFsHelpString
        DCB     "SCSIFS",9,9
      [ Dev
        DCB     " DEVELOPMENT VERSION",0
      |
        DCB     Module_MajorVersion," (",Module_Date,")",0
      ]
        ALIGN

        LTORG

ModFlags
        DCD     ModuleFlag_32bit

        GET     hdr.MyErrors

; Disc Record

                ^ 0
;
SectorSize      # 1     ;log2 sector size
SecsPerTrk      # 1
Heads           # 1     ;1 for old adfs floppy format
Density         # 1     ;1/2/4 single double quad

;only those above needed for low level drivers

LinkBits        # 1
BitSize         # 1     ;log2 bytes for each bit in map, 0 for old format
RAskew          # 1     ;track to track sector skew for random access
        ;file   allocation
BootOpt         # 1     ;boot option for this disc

LowSector       # 1
Zones           # 1     ;# zones in map
ZoneSpare       # 2     ;# bits in zones after 0 which are not map bits
        ASSERT  (ZoneSpare :MOD: 4)=2
RootDir         aw 4
DiscSize        aw 4

DiscStruc       # 0     ;above entries (except BootOpt) define disc structure

DiscId          aw 2
DiscName        # 10
DiscRecSig      # 0     ;above entries form signature of disc

DiscFlags       # 1
FloppyFlag      bit 0
NeedNewIdFlag   bit 1
AltMapFlag      bit 5
OldMapFlag      bit 6
OldDirFlag      bit 7   ;set <=> old small dirs


;entries below must be valid even when disc rec is not in use
Priority        # 1     ;0 DISC REC UNUSED
        ;1      to # floppies -> floppy priority level
        ;&FF    good winnie
DiscsDrv        # 1     ;0-7 => drive in, 8 => not in drive, OR DISC REC UNUSED
DiscUsage       # 1     ;tasks using this disc, if >0 disc cant be forgotten
SzDiscRec       # 0

;default last word of disc record
;DiscFlags      0  FLOPPIES NEED NeedNewIdFlag SET INITIALLY
;Priority       0
;DiscsDrv       8
;DiscUsage      0
DefDiscRecEnd   * &00080000


; Drive Record

                ^ 0

DrvFlags        # 1
LostUnitAtn     bit 0
;ResetChangedByStep      bit 3
;ResetChangedByWrite     bit 4
;QuadDrv                 bit 5  ;set if quad
        ASSERT  MiscOp_PollChanged_EmptyWorks_Flag = bit6
        ASSERT  MiscOp_PollChanged_ChangedWorks_Flag = bit7

DevNo                   # 3 ; SCSI device ID
;HeadPosition            # 4
;PositionUnknown         * bit31
DrvSequenceNum          # 4
SzDrvRec                # 0

; $rdr = drive record ptr
; $rd = SCSI device ID
        MACRO
$lab    STDevNo $rd,$rdr,$rtemp,$c
        ASSERT  $rtemp<>$rdr
        ASSERT  $rtemp<>$rd
$lab    LDRB$c  $rtemp,[$rdr,#DrvFlags]
        ORR$c   $rtemp,$rtemp,$rd,LSL #8
        STR$c   $rtemp,[$rdr,#DrvFlags]
        MEND


;point Rptr to start of drive record Rindex, must preserve flags
; $Rindex = FileCore drive number

        MACRO
$lab    DrvRecPtr $Rptr,$Rindex,$cond
        ASSERT  $Rptr<>SB
        ASSERT  $Rptr<>PC
        ASSERT  SzDrvRec=8
        ADD$cond $Rptr,SB,$Rindex, LSL #3
        Try8    ADD$cond,$Rptr,$Rptr,(:INDEX:DrvRecs)
        MEND


; DEFECT LIST

; The list consists of words containing the disc address ( in bytes ) of bad
; sectors, the end is marked by a value &200000xx, where &xx forms a check
; byte on the earlier list. The last 64 bytes describe the disc to ADFS.
; Any other bytes may be used as params for the low level drivers

DefectListDiscAdd       * &400+&800
SzDefectList            * &200
DefectEndMark           bit 29
MaxStruc                * 64
        ASSERT  SzDiscRec<=MaxStruc

                ^ 0
                # SzDefectList-MaxStruc-4
ParkDiscAdd     # 4

;MAIN WORKSPACE ALLOCATION

                ^ 0, SB
SCSIFSWorkBase  # 0
BlockSizes      a4 MaxDriveNo ;log2 of block size for device or 0 if not mounted yet
FileCorePrivate a4 4
WinnieCallAfter a4 4
FCFeatures      a4 4
FC_Big          * bit0
FC_NewErrors    * bit1
      [ AllowPartitions
PartitionBaseAdd a4 4*MaxDriveNo
      ]
      [ UseSpecialScatterBlk
ScatterFlag    a4 4                         ;Are we converting a save to use scatterblk ?
ScatterData    a4 4                         ;New Length (=Old Length rounded up to next block)
WriteScatBlk   a4 6*4           ;Here is the scatter special block
      ]

MsgFileOpen     a4 4
MsgFileBlock    a4 4*4

AttCBCount      #  1
DetCBCount      #  1
Dieing          #  1
      [ AllowPartitions
allowdupID      #  1            ; next time through the loop will use same scsi id
      |
myalign         #  1
      ]
;Low level workspace

Winnies         # 1
Floppies        # 1
        #       2
DrvRecs         # SzDrvRec*MaxDriveNo

      [ UseSpecialScatterBlk
; Block of 0's used for padding writes in special scatter blocks
; Previously SCSIFS used to just source the padding data from &00000000, but
; (a) that's not very nice
; (b) it doesn't work if zero page is relocated
; (c) other alternative locations (e.g. start of RMA) could contain sensitive information the user doesn't want storing to disc
; So as a compromise, sacrifice some RMA to give us a nice safe buffer to use, at least for devices with standard block sizes.
PaddingBlock    # 512
      ]
WorkSize        # 0

        ALIGN
        LTORG


;==============================================================================
;
; Scsi Peripheral Device Types
;
DevDirectAccess                 EQU &00
DevOpticalMemory                EQU &07

;==============================================================================
;
; Control bits in R0 for SWI SCSI_Op
;
CTL_TXNONE                      EQU &00 :SHL: 24
CTL_TXREAD                      EQU &01 :SHL: 24
CTL_TXWRITE                     EQU &02 :SHL: 24
CTL_TXRESERVED                  EQU &03 :SHL: 24
CTL_SCATTER                     EQU &01 :SHL: 26
CTL_NOESCAPE                    EQU &01 :SHL: 27
CTL_RETRYONTIMEOUT              EQU &01 :SHL: 28
CTL_BACKGROUND                  EQU &01 :SHL: 29

;
; Shift factor to convert Filecore control bits into SCSIdriver equivalants
;   ScatterBit   -> CTL_SCATTER
;   NoEscape     -> CTL_NOESCAPE
;   NoTimeOut    -> CTL_RETRYONTIMEOUT
;   BackgroundOp -> CTL_BACKGROUND
;
CTL_cnvt                        EQU 21  ;Shift (left) factor

; mapDrvToDevLo:
; In:
;  $rs = FileCore drive number
;  $rdr = Drive record ptr (optional)
; Out:
;  $rd = SCSI device ID
        MACRO
$lab    mapDrvToDevLo $rd, $rs, $rdr
      [ "$rdr" = ""
        AND     $rd, $rs, #&FF
        DrvRecPtr $rd, $rd
        ASSERT  DevNo :AND: 3 = 1
        LDR     $rd, [$rd, #DevNo :AND::NOT:3]
      |
        LDR     $rd, [$rdr, #DevNo :AND::NOT:3]
      ]
        MOV     $rd, $rd, ASR #8
        MEND

; mapDevToDrvLo:
; In:
;  $rs = SCSI device ID
; Out:
;  $rd = FileCore drive number, or MaxDriveNo if not found
        MACRO
$lab    mapDevToDrvLo $rd, $rs
        ASSERT  $rd = R1
        ASSERT  $rs = R1
$lab    BIC    R1, R1, #&FF000000
        BL      MapDevToDrv
        MEND


        LNK     ScsiFs05.s
@


4.16
log
@Strip some old code and options
Detail:
  Since we only really care about the RISC OS 5 version of this module, there are various old switches stretching back 20+ years which can be removed to make the sources a bit easier on the eye:
  * OpticalMemorySupport (-> {TRUE})
  * IgnoreRecoveredError (-> {TRUE})
  * FloppySupport (-> {TRUE})
  * MediaLocking (-> {TRUE})
  * BigDisc (-> {TRUE})
  * AutoDetect (-> {TRUE})
  * HotPlug (-> {TRUE})
  Files changed:
  HelpText, hdr/mymacros, s/Fixes, s/Hdr_fst, s/ScsiFs00, s/ScsiFs05, s/ScsiFs15, s/ScsiFs20, s/ScsiFs50
Admin:
  Resulting binary unchanged (for default options, at least)


Version 1.29. Not tagged
@
text
@d191 1
@


4.15
log
@Tidy things up a bit
Detail:
  s/ScsiFs00, ScsiFs05, ScsiFs15, ScsiFs20, ScsiFs50 - Add comments for some of the different IDs which are used. Add MaxDriveNo constant, and make use of it where appropriate. Make BlockSizes non-braindead.
Admin:
  Cosmetic changes only, binary unchanged.


Version 1.29. Not tagged
@
text
@a18 6
        GBLL    OpticalMemorySupport
OpticalMemorySupport  SETL fix_1

        GBLL    IgnoreRecoveredError
IgnoreRecoveredError   SETL fix_3

d20 1
a20 7
UseSpecialScatterBlk   SETL fix_11

        GBLL    FloppySupport
FloppySupport   SETL fix_10

        GBLL    MediaLocking
MediaLocking    SETL {TRUE}
a36 9
        GBLL    BigDisc
BigDisc         SETL {TRUE}

        GBLL    AutoDetect
AutoDetect      SETL {TRUE}

        GBLL    HotPlug
HotPlug         SETL AutoDetect :LAND: {TRUE}

a135 1
      [ BigDisc
a137 4
      |
BigBit  * 0
NewErrorBit * 0
      ]
d182 1
a182 3
      [ :LNOT: BigDisc
MapSizeCMOS     # 4     ;map sizes of discs in units of 256 bytes
      ]
a364 3
      [ :LNOT: BigDisc
MapSizes        a4 4
      ]
a366 1
      [ BigDisc
a369 1
      ]
a381 1
      [ HotPlug
a389 1
      ]
a392 1
      [ FloppySupport:LOR:AutoDetect
a395 1
      ]
a446 8

; mapDevToDrvLo:
; In:
;  $rs = SCSI device ID
; Out:
;  $rd = FileCore drive number, or MaxDriveNo if not found

    [ AutoDetect
d460 5
a471 25
    |
; Non-AutoDetect uses a fixed mapping of drives 4-7 to SCSI devices 0-3
        MACRO
$lab    mapDrvToDevLo $rd, $rs
      [ fix_2
$lab    EOR    $rd, $rs, #4
      |
$lab    BIC    $rd, $rs, #4              ;map drives 4 to 7 to devices 0 to 3
      ]
        MEND

        MACRO
$lab    mapDevToDrvLo $rd, $rs
      [ fix_2
$lab    EOR    $rd, $rs, #4
      |
$lab    ORR    $rd, $rs, #4              ;map drives 4 to 7 to devices 0 to 3
      ]
        MEND

        MACRO
$lab    mapDrvToDevImm $rd, $im
$lab    MOV    $rd, $im :EOR: 4
        MEND
    ]
@


4.14
log
@  Small changes to enable interaction with PartMan module
Detail:
  Changes are compile time enabled with the compile time option
  PartitionManager set TRUE
Admin:


Version 1.29. Tagged as 'SCSIFS-1_29'
@
text
@d196 2
d340 1
a340 1
DevNo                   # 3
d346 2
d359 1
d392 1
a392 3
Padding         # 4    ;>>>RCM stop 'sbaddr R7, BlockSizes-4' in ScsiFs15 from failing
BlockSizes      a4 4   ;log to base two of block size for device or 0 if not
        ;mounted yet
d404 1
a404 1
PartitionBaseAdd a4 4*8
d431 1
a431 1
DrvRecs         # SzDrvRec*8
d478 13
d513 1
@


4.13
log
@Internationalised
In addition
 - simplify WrDec to just use OS_ConvertCardinal1 hence not need a division routine
 - change the Hide check to at least use Choices: correctly, if you must
 - macros Text and baddr eliminated

Tested in an OMAP3 ROM build.

Version 1.28. Tagged as 'SCSIFS-1_28'
@
text
@d61 4
d79 1
d215 3
d416 3
d421 1
@


4.12
log
@Sources lined up to be more readable
One pass through AsmTidy, then a manual inspection.
Builds binary identical version. No tagged.
@
text
@d64 8
d211 1
a211 5
        AREA    |!!!Module|, CODE, READONLY

        ORG     0

org
d215 2
a216 2
;Module Header
        ASSERT  {PC}-org=0
d218 6
a223 6
        DCD     InitEntry               ; initialisation entry
        DCD     DieEntry
        DCD     ServiceEntry
        DCD     ScsiFsTitle
        DCD     ScsiFsHelpString
        DCD     ComTab
d225 2
a226 2
        DCD     SwiEntry
        DCD     SwiNames
d228 7
a234 4
        DCD     0
        DCD     ModFlags

        ASSERT  {PC}-org=52
d239 2
a240 2
        Text    "SCSIFS"

d245 2
a246 2
        Text    "SCSI"

d401 3
@


4.11
log
@Minor cleanups
* Upcall and OsByte symbols used from central headers
* T and F swapped for ObjAsm built in variables
* Deleted some unused CPU and hardware definitions
* Put unused files in the attic
Tested briefly, still worked.

Version 1.27. Tagged as 'SCSIFS-1_27'
@
text
@d58 1
a58 1
        GBLL    AllowPartitions 
d68 1
a68 1
        [ Dev
d75 1
a75 1
        ]
d88 1
a88 1
       [ Dev
d90 1
a90 1
       |
d92 1
a92 1
       ]
d144 1
a144 1
       [ BigDisc
d147 1
a147 1
       |
d150 1
a150 1
       ]
d152 1
a152 1
       [ Ejecting
d154 1
a154 1
       |
d156 1
a156 1
       ]
a161 1
StkPtr  RN 13
d163 2
a164 2
LF      * 10
CR      * 13
d170 1
a170 1
        ASSERT EscapeBit=&40
d193 1
a193 1
 [ :LNOT: BigDisc
d195 1
a195 1
 ]
d199 1
a199 1
 [ AllowPartitions
d201 1
a201 1
 ] 
d213 13
a225 13
        & 0             ;no start entry
        & InitEntry     ;initialisation entry
        & DieEntry
        & ServiceEntry
        & ScsiFsTitle
        & ScsiFsHelpString
        & ComTab
        & SCSIFSSWI_Base
        & SwiEntry
        & SwiNames
        & 0             ;no SWI name decoding code
        & 0
        & ModFlags
d230 1
a230 1
        =       "Acorn "        ;includes AdfsTitle
d236 1
a236 1
        =       "FileCore%"
d242 6
a247 6
        =       "SCSIFS",9,9
        [ Dev
        =       " DEVELOPMENT VERSION",0
        |
        =       Module_MajorVersion," (",Module_Date,")",0
        ]
d259 1
a259 1
        ^ 0
d271 1
a271 1
                        ;file allocation
d297 2
a298 2
                        ;1 to # floppies -> floppy priority level
                        ;&FF good winnie
d313 1
a313 1
        ^ 0
d315 2
a316 2
DrvFlags                # 1
LostUnitAtn             bit 0
d320 2
a321 2
                        ASSERT  MiscOp_PollChanged_EmptyWorks_Flag = bit6
                        ASSERT  MiscOp_PollChanged_ChangedWorks_Flag = bit7
d364 1
a364 1
        ^ 0
a367 142
; OLD FS MAP
        ^ 0
FreeStart       # 82*3  ;table of free space start sectors
EndSpaceList    # 0
                # 1     ;reserved
OldName0        # 5     ;              RETRO DEFINITION
OldSize         # 3     ;size in sectors
Check0          # 1     ;checksum on sector 0

FreeLen         # 82*3  ;table of free space lengths
OldName1        # 5     ;              RETRO DEFINITION
OldId           # 2     ;disc id
OldBoot         # 1     ;boot option
FreeEnd         # 1     ;ptr to end of free space list
Check1          # 1     ;checksum on sector 1

        ASSERT  {VAR}=&200

; New map

                ^ 0
ZoneCheck       # 1
FreeLink        # 2     ;15 bit free space start link
CrossCheck      # 1     ;EORing this byte for all zones should yield &FF

DummyLenBit     bit 31  ;always set

ZoneDiscRecSz   * 60    ;reserve additional bytes
                ASSERT ZoneDiscRecSz>=SzDiscRec

ZoneHead        # ZoneDiscRecSz

Zone0Bits       * ZoneDiscRecSz*8

;zones are followed in RAM by table of one byte of flags per zone

ZoneValid       bit 0
ZoneCompacted   bit 1


; Dir entry
                ^ 0
NameLen         * 10
DirObName       # NameLen
DirLoad         # 4
DirExec         # 4
DirLen          # 4
DirIndDiscAdd   # 3
OldDirObSeq     # 1

OldDirEntrySz   * {VAR}
        ASSERT  OldDirEntrySz=26

NewDirAtts      * OldDirObSeq
ReadBit         * 1
WriteBit        * 2
IntLockedBit    * 4     ;the locked bit is held in bit 2 internally
ExtLockedBit    * 8     ;but is returned in bit 3 externally
DirBit          * 8
NewDirEntrySz   * {VAR}


; Directory Start
                ^ 0
StartMasSeq     # 1
StartHugo       # 4
DirFirstEntry   # 0

; Old Directory End
                ^ 0
                # -1
DirCheckByte    # 0     ;RETRO DEFINITION was reserved

                # -4
EndHugo         # 0

                # -1
EndMasSeq       # 0

                # -14   ;reserved

DirTitleSz      * 19
                # -DirTitleSz
OldDirTitle     # 0

                # -3
OldDirParent    # 0

                # -NameLen
OldDirName      # 0

                # -1
OldDirLastMark  # 0     ;dummy last entry marker

; New Directory End
                ^ 0
                # -1
        ASSERT  DirCheckByte=@@

                # -4
        ASSERT  EndHugo=@@

                # -1
        ASSERT  EndMasSeq=@@

                # -NameLen
NewDirName      # 0

                # -DirTitleSz
NewDirTitle     # 0

                # -3
NewDirParent    # 0

                # -1    ;reserved
                # -1    ;reserved

                # -1
NewDirLastMark  # 0     ;dummy last entry marker

OldDirSize      * &500
NewDirSize      * &800

OldDirTabSz     * (OldDirSize-DirFirstEntry+OldDirLastMark)
NewDirTabSz     * (NewDirSize-DirFirstEntry+NewDirLastMark)
                ASSERT  OldDirTabSz :MOD: OldDirEntrySz = 0
                ASSERT  NewDirTabSz :MOD: NewDirEntrySz = 0
OldDirEntries   * OldDirTabSz / OldDirEntrySz
NewDirEntries   * NewDirTabSz / NewDirEntrySz

        ASSERT  OldDirEntries=47
        ASSERT  NewDirEntries=77

;Filing system control reason codes

FscAddFs        * 12
FscSelectFs     * 14
FscRemoveFs     * 16
FscAdd2ndFs     * 17
FscReadFileType * 18


d370 6
a375 6
        ^ 0, SB
SCSIFSWorkBase   # 0
Padding          # 4    ;>>>RCM stop 'sbaddr R7, BlockSizes-4' in ScsiFs15 from failing
BlockSizes      a4 4    ;log to base two of block size for device or 0 if not
                        ;mounted yet
 [ :LNOT: BigDisc
d377 1
a377 1
 ]
d380 1
a380 1
 [ BigDisc
d384 2
a385 2
 ]
 [ AllowPartitions
d387 2
a388 2
 ]                 
 [ UseSpecialScatterBlk
d392 1
a392 1
 ]
d394 1
a394 1
 [ HotPlug
d399 1
a399 1
 ]
d403 1
a403 1
 [ FloppySupport:LOR:AutoDetect
d405 1
a405 1
                # 2
d407 1
a407 1
 ]
d409 1
a409 1
 [ UseSpecialScatterBlk
d415 1
a415 1
; So as a compromise, sacrifice some RMA to give us a nice safe buffer to use, at least for devices with standard block sizes. 
d417 1
a417 1
 ]
d453 1
a453 1
 [ AutoDetect
d456 2
a457 2
 [ "$rdr" = ""
        AND    $rd, $rs, #&FF
d459 6
a464 6
        ASSERT DevNo :AND: 3 = 1
        LDR    $rd, [$rd, #DevNo :AND::NOT:3]
 |
        LDR    $rd, [$rdr, #DevNo :AND::NOT:3]
 ]
        MOV    $rd, $rd, ASR #8
d469 2
a470 2
        ASSERT $rd = R1
        ASSERT $rs = R1
d472 1
a472 1
        BL     MapDevToDrv
d474 1
a474 1
 |
d477 1
a477 1
 [ fix_2
d479 1
a479 1
 |
d481 1
a481 1
 ]
d486 1
a486 1
 [ fix_2
d488 1
a488 1
 |
d490 1
a490 1
 ]
d497 1
a497 1
 ]
d500 1
a500 1
        LNK     s.ScsiFs05
@


4.10
log
@Don't source padding data from zero page
Detail:
  s/ScsiFs00, s/ScsiFs15, s/ScsiFs50 - When UseSpecialScatterBlk, pad writes out to device block size by using an empty block of RMA instead of the contents of zero page.
Admin:
  Fixes crashes when high processor vectors are in use


Version 1.26. Tagged as 'SCSIFS-1_26'
@
text
@a18 6
        GBLL    T
T       SETL    {TRUE}
        GBLL    F
F       SETL    {FALSE}


d32 1
a32 1
MediaLocking    SETL T
d35 1
a35 1
DoBuffering     SETL F          ;Read-ahead/write-behind not supported
d38 1
a38 1
SeekIsNOP       SETL T          ;Because Rodime RO3000S objects to seek command
d41 1
a41 5
CheckXferLen    SETL T

;        GBLL    CheckSpareRMA    ; check enough stack before op?
;CheckSpareRMA   SETL F
;ExtraRMA        * 1024 * 33      ; usb mak pkt of 32k, + 1k ???
d44 1
a44 1
XferLenMax64K   SETL T
d47 1
a47 1
RetryIfBusy     SETL T
d50 1
a50 1
BigDisc         SETL T
d53 1
a53 1
AutoDetect      SETL T
d56 1
a56 1
HotPlug         SETL AutoDetect :LAND: T
d59 1
a59 1
AllowPartitions SETL T
d62 1
a62 4
Ejecting        SETL F

        GBLL    LeftToDo        ;marker for bits requiring further refinement
LeftToDo        SETL F
d70 1
a70 1
Debug   SETL    T
d72 1
a72 1
SpoolOff SETL   F       ;T to disable spooling for debug messages
d74 1
a74 1
IrqDebug SETL   F
a88 1
        [ T ;>>>RCM was F
a89 3
        |
$a      SETL    F
        ]
d91 1
a91 1
$a      SETL    F
a92 1

d95 8
a102 8
Debug1  switch  F       ;Init/Die/Service entries
Debug2  switch  F       ;SCSI drivers
Debug3  switch  T       ;low level disc op
Debug4  switch  T       ;misc op
Debug5  switch  F       ;SCSI drivers border colours
Debug6  switch  F       ;SCSI drivers tube debug
Debug7  switch  T       ;autodetection
Debug9  switch  F       ;useful routines
a104 1
;        GET     hdr.CoreHdr
a140 8
; Hardware addresses

;IoChip          * &03200000     ;IO controller
;IoControl       * 0


;Cpu

a143 3
PsrMask         * &FC000003
NZCV            * N_bit :OR: Z_bit :OR: C_bit :OR: V_bit

a183 11
Podule_DevNo    * 13

; osbyte numbers

OsbyteReadCMOS          * &A1
OsbyteWriteCMOS         * &A2
OsbyteReadResetType     * &FD

; osword numbers
OswordReadClock * 14

a202 2
Upcall_DriveAdded    * 24
Upcall_DriveRemoved  * 25
d245 1
a245 1
        =       DevVersion," DEVELOPMENT VERSION",0
d247 1
a247 1
        =       version," (",date,")",0
@


4.9
log
@  Minor change in line with cleanup to FileCore
Detail:
  Removed confusingly-named DefectStruc symbol (actually the offset into
  the boot block where the disc record is held) - was only used in one place
Admin:
  No code change - retagged as SCSIFS-1_25

Version 1.25. Not tagged
@
text
@d594 10
@


4.8
log
@  Support for FileCore API relaxations
Detail:
  * Previously, SCSIFS always set the "No directory state" startup option
    bit in FileCore_Create, even though from the PRM's description of the
    *Configure Dir/NoDir options, it should have been setting it according
    to the shared bit in CMOS byte &0B. However, since RISC OS 3.00, FileCore
    has not done anything with this information, so I'm retiring the bit.
  * No longer passes hard disc map sizes in R6 to FileCore_Create. This means
    it no longer reads them from CMOS, and nor does it update the CMOS when
    discs are mounted. This is safe because FileCore hasn't actually used
    these values since RISC OS 4.00. For consistency with ADFS (which stopped
    using its equivalent CMOS at RISC OS 5.00) the code is switched out via
    the BigDisc switch. This means we can free up a whole 4 bytes of CMOS!
Admin:
  Tested briefly via a softload on an OMAP3 machine.

Version 1.25. Tagged as 'SCSIFS-1_25'
@
text
@a410 3
DefectStruc     # MaxStruc-1
DefectCheck     # 1
        ASSERT  @@=SzDefectList
@


4.7
log
@Update to use some of the exported FileCore headers.
There are still a large number of local copies that should be visited, but this change at least allows it to assemble again FileCore-3_45.

Version 1.22. Tagged as 'SCSIFS-1_22'
@
text
@d235 1
d237 1
d253 2
d564 1
d566 1
@


4.6
log
@Limit max transfer length to 64K, fix issues with transfer lengths being incorrectly modified
Detail:
  s/ScsiFs00, s/ScsiFs15 - As a workaround for numerous USB devices that fail when asked to transfer large amounts of data, SCSIFS now limits the maximum transfer length to 64K.
  This length seems to match the limit used by most operating systems. If necessary this code can be turned off via the XferLenMax64K switch.
  Additionally, a couple of bugs with the CheckXferLen and UseSpecialScatterBlk code have been fixed:
  - When CheckXferLen (and XferLenMax64K) limit the block count in the CDB, the code now calculates a new value of R4 to send to the SCSI driver instead of using the original. This ensures there's no ambiguity in the transfer length.
  - After the SCSI op is completed, the returned value of R4 is then adjusted to represent the real amount of untransferred data from FileCore's perspective.
  - When the special scatter block is in use, the code now returns to FileCore with R3 pointing to the correct location in the source buffer, and with R4 adjusted to take into account the extra padding that had been inserted. Previously the old code would have returned with R3 and R4 left unmodified (i.e. R3 would have been pointing at SCSIFS's temp scatter list)
Admin:
  Tested in ROM on a rev C2 beagleboard over the course of a few hours with the help of an automated test script.
  No more 'no sense' errors when attempting large block transfers to USB devices, and no sign of data corruption for large or small transfers.
  See the forums for more discussion of these issues: http://www.riscosopen.org/forum/forums/4/topics/470


Version 1.18. Tagged as 'SCSIFS-1_18'
@
text
@d175 2
a176 2
BigBit  * BigDiscSupport
NewErrorBit * NewErrorSupport
d183 1
a183 1
EjectBit * FloppiesEject
d360 2
a361 2
                        ASSERT  Drv_EmptyWorks   = bit6
                        ASSERT  Drv_ChangedWorks = bit7
@


4.5
log
@	Added note on SCSIFS_Partitions swi.
	Committing correct files this time.
        previous version, 1.14 failed to include these

Detail:
Admin:  castle added IP. to be beta tested


Version 1.14. Tagged as 'SCSIFS-1_14'
@
text
@d53 2
a54 2
        GBLL    XferLenMax255
XferLenMax255   SETL F
@


4.4
log
@        found unexpected data workspace embedded in code .. moved to
        module RMA. module now builds into ROM
Detail:
Admin:  castle added IP ..


Version 1.13. Tagged as 'SCSIFS-1_13'
@
text
@d49 4
@


4.3
log
@          fixed a memory leak /unstable callback removal in scsifs.
          Added in detect needed for dosfs partitions.. didnt seem to make it
          into cvs in 1.11.
          Added SWI_SCSIFSPartitions and Service_SCSIMounting to permit external
          partition manger to provide partition handling

Detail:

Admin:    tested at castle.. castle added IP


Version 1.12. Tagged as 'SCSIFS-1_12'
@
text
@d567 6
@


4.2
log
@* Activated "floppy" (removable) support.
* Added big disc support.
* Added new error reporting scheme.
* Added autoconfiguration, and new SCSIdriver hotplugging.
* Added eject functionality (currently disabled due to issues with some USB
  devices).
* 32-bit compatible.

Version 1.11. Tagged as 'SCSIFS-1_11'
@
text
@d49 3
d64 3
d158 2
a159 2
IoChip          * &03200000     ;IO controller
IoControl       * 0
d235 3
d552 1
a552 1

d564 9
a572 1

d579 1
a579 1
DrvRecs         a4 SzDrvRec*8
@


4.1
log
@Initial revision
@
text
@a36 3
        GBLL    Remap
Remap           SETL T

a45 3
        GBLL    ProperScatter
ProperScatter   SETL T

d47 1
a47 1
CheckXferLen    SETL T 
d52 12
d73 1
a73 1
Debug   SETL    F
d86 1
d103 4
a106 4
Debug1  switch  F ;>>>RCM should be F ;Init/Die/Service entries
Debug2  switch  F ;>>>RCM was F       ;SCSI drivers
Debug3  switch  F ;>>>RCM was F       ;low level disc op
Debug4  switch  F ;>>>RCM was F       ;misc op
d109 1
d113 1
a113 1
        GET     hdr.CoreHdr
d164 14
d189 1
a189 23
PollPeriod * -1 ;>>>100  ;centi seconds between upcalls when disc changed works

;Disc Operation Reason Codes
                ^ 0

Param4Op        # 0
VerifyOp        # 1     ;0
ReadSecsOp      # 1     ;1
WriteSecsOp     # 1     ;2

Param3Op        # 0
ReadTrkOp       # 1     ;3 read id for winnie ???
WriteTrkOp      # 1     ;4

Param2Op        # 0
FirstHeadMoveOp # 0
SeekOp          # 1     ;5

Param1Op        # 0
RestoreOp       # 1     ;6

                # 9     ;7-F
                ASSERT @@=&10
d227 4
a230 1
ScsiFsSwiBase   * Module_SWISystemBase + Module_SWIChunkSize * ScsiFsSWI
d232 3
a234 7
                        ^ ScsiFsSwiBase :OR 1 :SHL: 17
XSCSIFS_DiscOp          # 1
                        # 1 ;XADFS_HDC
XSCSIFS_Drives          # 1
XSCSIFS_FreeSpace       # 1
                        # 1 ;XADFS_FloppyStructure
XSCSIFS_DescribeDisc    # 1
a235 2
        LEADR   Module_LoadAddr
        ORG     0 ; ADDED alan glover 4/11/91
d247 1
a247 1
        & ScsiFsSwiBase
d251 4
a254 1
        ASSERT  {PC}-org=44
d278 4
d301 1
a301 1
                # 1
d350 1
a350 1
                        # 3
d356 9
d373 1
a373 2
        MOV$cond $Rptr,$Rindex, LSL #3
        ADD$cond $Rptr,SB,$Rptr
d550 5
d559 1
a559 3
 [ FloppySupport
                # 3
DrvRecs         a4 SzDrvRec*4
d561 2
d599 13
d614 8
d643 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
