head	1.3;
access;
symbols
	PartMan-0_16:1.3
	PartMan-0_15:1.3
	PartMan-0_14:1.3
	PartMan-0_13:1.2
	PartMan-0_12:1.2
	PartMan-0_11:1.2
	PartMan-0_10:1.1.1.1
	PartMan-0_09:1.1.1.1
	start:1.1.1.1
	INITIAL:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2018.07.13.22.58.28;	author jballance;	state Exp;
branches;
next	1.2;
commitid	tBYQcy1tZbkGS1KA;

1.2
date	2016.12.06.08.24.21;	author jballance;	state Exp;
branches;
next	1.1;
commitid	n7zTGodkOF8GOTwz;

1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	HKcQ8iJU5OQNCWvz;

1.1.1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches;
next	;
commitid	HKcQ8iJU5OQNCWvz;


desc
@@


1.3
log
@  Extend PartMan behaviour and add SWI and *command to list the
  detected partition start addresses and lengths. Improve
  interaction with SCSIFS.
Detail:
  Improved robustness. Made tolerant of some obstinate USB SD card
  readers that previously would cause the system to lock whilst the device
  was plugged in.
Admin:
  tested on iMx6

Version 0.14. Tagged as 'PartMan-0_14'
@
text
@; Copyright 2016 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        AREA    |Asm$$Data|,DATA,READWRITE
DMBWrPtr DCD    0

        AREA    |Asm$$Code|,CODE,READONLY

        GET     ListOpts
        GET     Macros
        GET     System
        GET     OSMisc
        GET     Hdr:SCSI
;
;
;        EXPORT  asm_ReadDMB
;        EXPORT  asm_DMBInit
;
;; insert DMBWrite pointer in supplied pointer
;asm_DMBInit
;        STMFD   R13!, {R0,R4-R11,LR}
;        LDR     R0, =(ARMop_DMB_Write:SHL:8)+MMUCReason_GetARMop
;        SWI     XOS_MMUControl
;        ADRVS   R0, My_DMB_Write        ; old kernel?
;        LDR     LR, [r13], #4
;        STR     R0, [LR]
;        LDMFD   R13!, {R4-R11,PC}
;
;My_DMB_Write
;        DMB     ST
;        MOV     pc, lr
;asm_ReadDMB
;        DMB
;        mov     pc, lr


        EXPORT  asm_Inquiry
; Do a SCSI Inquiry command as a sort of 'noop'
; on entry r0 = SCSI ID, r1 -> 36 byte buffer
; on exit if r0 = NULL then r1 filled in
; if error r0 -> error block
; timeout is 1 second
asm_Inquiry
        Push   "r1-r12,lr"
        MOV     R3, R1
        ORR     R0, R0, #&01000000
        MOV     R1, #6
        ADR     R2, CDB_Inquiry
        MOV     R4, #36
        MOV     R5, #100
        MOV     R8, #&fc000003          ; magic access key
        SWI     XSCSI_Op
        MOVVC   r0, #0
        Pull    "r1-r12,pc"
CDB_Inquiry
        DCB     &12                     ; INQUIRY
        DCB     0
        DCB     0
        DCB     0
        DCB     36
        DCB     0
        ALIGN

        EXPORT  asm_ReadCapacity
; Do a SCSI ReadCapacity command
; on entry r0 = SCSI ID, r1 -> 8 byte buffer
; on exit if r0 = NULL then buffer filled in
; if error r0 -> error block
; timeout is .75 second
asm_ReadCapacity
        Push   "r1-r12,lr"
        MOV     R3, R1
        ORR     R0, R0, #&01000000
        MOV     R1, #10
        ADR     R2, CDB_ReadCapacity
        MOV     R4, #8
        MOV     R5, #75
        MOV     R8, #&fc000003          ; magic access key
        SWI     XSCSI_Op
        MOVVC   r0, #0
        Pull    "r1-r12,pc"
CDB_ReadCapacity
        DCB     &25                     ; ReadCapacity
        DCB     0
        DCB     0
        DCB     0
        DCB     0
        DCB     0
        DCB     0
        DCB     0
        DCB     8
        DCB     0
        ALIGN

        END
@


1.2
log
@   progress, bug fixes, and improved diagnostics
Detail:
  still needs optimisation of formatter element
Admin:


Version 0.11. Tagged as 'PartMan-0_11'
@
text
@d56 1
a56 1
        Push   "r1-r5,r8,lr"
d66 1
a66 1
        Pull    "r1-r5,r8,pc"
d83 1
a83 1
        Push   "r1-r8,lr"
d93 1
a93 1
        Pull    "r1-r8,pc"
@


1.1
log
@Initial revision
@
text
@d79 1
a79 1
; on exit if r0 = NULL then r2 filled in
d81 1
a81 1
; timeout is 1 second
d83 1
a83 1
        Push   "r1-r5,r8,lr"
d89 1
a89 1
        MOV     R5, #100
d93 1
a93 1
        Pull    "r1-r5,r8,pc"
@


1.1.1.1
log
@  Initial import of PartMan module
Detail:
  This is early work. It can be used 'manually' to format up a disc using
  the GPT partition header system. Current working format is filecore, though
  with a non optimal format. Functional, but work in progress.
Admin:
@
text
@@
