head	1.4;
access;
symbols
	PartMan-0_16:1.4
	PartMan-0_15:1.3
	PartMan-0_14:1.3
	PartMan-0_13:1.3
	PartMan-0_12:1.2
	PartMan-0_11:1.1.1.1
	PartMan-0_10:1.1.1.1
	PartMan-0_09:1.1.1.1
	start:1.1.1.1
	INITIAL:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2018.07.19.23.40.04;	author jballance;	state Exp;
branches;
next	1.3;
commitid	zYSuPY5l4rV2VNKA;

1.3
date	2017.01.09.21.24.54;	author jballance;	state Exp;
branches;
next	1.2;
commitid	yFxEcnSEVzAI2lBz;

1.2
date	2016.12.11.21.27.50;	author jballance;	state Exp;
branches;
next	1.1;
commitid	Gg0AAlw0femwZBxz;

1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	HKcQ8iJU5OQNCWvz;

1.1.1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches;
next	;
commitid	HKcQ8iJU5OQNCWvz;


desc
@@


1.4
log
@  Improved reboot behaviour, and added routines to check for boot disc.
Detail:
  Various routines added to detect and help prevent formatting of
  current boot disc. Also improved detection of already mounted discs
  when PartMan is rebooted.
Admin:
 tested on iMx6

Version 0.16. Tagged as 'PartMan-0_16'
@
text
@/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include        "PMInclude.h"
#include        "FormatBits.h"
#include        "Format.h"
#include        "GPThdr.h"
#include        "scsisvce.h"
#include        "Diagnostic.h"

#define task_name "ftst"          /* the name of our task */
static _kernel_swi_regs reg;
// ID of our working disk
#define preventID 0


int main (int argc,char* argv[])
{
  _kernel_oserror * e=NULL;
  static int capacity=0;
  static int sectorsize=0;
  int ID,start;
  int dospart = 0;// dos partition to use
  int defect[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

 testfileinit ();

 if(argc<3)
 {
   printf("Syntax: *fmat_tst <ID> <Offset> [<size>]\n\
   Where ID is SCSI drive ID, Offset is start LBA in drive\n\
   and size is the (optional) LBA size to format\n");
 }

 if(CheckBootDiscID(ID=atoi(argv[1]),start=atoi(argv[2]),true))
 {
   printf("Target drive contains the boot disc - aborting\n");
   return 0;
 }

 ReadDiscCapacity(ID=atoi(argv[1]), OverrideKey,&capacity,&sectorsize);


 if(argc==4)
   {
   int param=0;
   sscanf(argv[3],"%x",&param);
   if (!((param)&&(param>((2<<20)/sectorsize))&&(param<capacity)))
   {
     printf("If no size is given, to format the disc full size\n or set size (in hex) between %x and %x\n",((2<<20)/sectorsize),capacity);
     return NULL;
   }
   else
   {
     capacity=param;
   }
 }

 if(sectorsize>0)
 {
//   buf[0]=0;
//   ReadAcornPartitionName(ID,OverrideKey,04,buf,sectorsize);
//   testprint("buf:%s\n",buf);
   testprint("capacity to be used %x\n",capacity);
   printf("Formatting disc with single partition size %x sectors\n",capacity);

   //_swix(OS_Module,_INR(0,1) ,3, "SCSIFS");
   _swix(OS_ServiceCall,_INR(0,2),ID,Service_SCSIDetached,0x7);
   // write a empty MBR dos header just to ensure we're in control
   e=NukeBootSectors(ID);
   if(e) wimp_error(e);
   MakeAcornFormat(ID,OverrideKey,sectorsize,0,capacity,"SingleAcrn", defect,2,1);


   _swix(OS_ServiceCall,_INR(0,2),ID,Service_SCSIAttached,0x7);

 }
 else
 {
 printf("Suspect sector size %x found \n",sectorsize);
 }
(void) argc;
(void) argv;
(void) dospart;
printf("Completed\n");
}

void wimp_error(_kernel_oserror *er)
{
  /*
   * Generic routine to handle error reporting
   * through the wimp
   */

  if(er!=(_kernel_oserror *)NULL)
  {
   reg.r[0] = (int) er;
   reg.r[1] =       0;
   reg.r[2] = (int) task_name;
   _kernel_swi(Wimp_ReportError, &reg, &reg);
  }
}
@


1.3
log
@   More work on filecore format routine.
Detail:
   The routine embedded in the sources will now write a correct filecore format
   across the full range of IDLen values, though in use it will generally select
   the largest IDLen value as this permits the most files to be stored on disc.
Admin:
   tested in iMx6


Version 0.13. Tagged as 'PartMan-0_13'
@
text
@d33 1
a33 1
  int ID = 1;
a35 4
//  char buf[256];
// defect[0] = 0x123;
//
// defect[1] = 0x115000;
d39 30
a68 15
 ReadDiscCapacity(ID, OverrideKey,&capacity,&sectorsize);
  if(argc==2)
    {
    int param=0;
    sscanf(argv[1],"%x",&param);
    if (!((param)&&(param>((2<<20)/sectorsize))&&(param<capacity)))
      {
        printf("Either *fmat_tst with no parameters to format the disc full size\n or *fmat_tst <n> where n is between %x and %x\n",((2<<20)/sectorsize),capacity);
        return NULL;
      }
      else
      {
        capacity=param;
      }
  }
d70 1
a70 1
 if(sectorsize>0&&ID!=preventID)
d78 1
a78 1
   _swix(OS_Module,_INR(0,1) ,3, "SCSIFS");
@


1.2
log
@  Further work to the filecore formatter routine
Detail:
  The formatter now produces a layout comparable to the !HForm one
  (The 16 bit zonecount was erroneously cast to 8bit)
Admin:
  produces a layout that passes DiscKnight validation. After copyint 15Gig
  of data in sone 250000 files the disc usage is comparable.

Version 0.12. Tagged as 'PartMan-0_12'
@
text
@d44 14
d64 4
a69 1
   // 0 means write
d73 2
a74 3
// MakeDosFormat(ID,OverrideKey,sectorsize,0,capacity-1,capacity-1,"testdosx", defect,dospart,1);
 //MakeDosFormat  (1,0xfc000003,0x200,0xf4000, 0xf4000,0xf4000,"testdos",defect,1,2);
// MakeAcornFormat(1,0xfc000003,0x200,0xf4000<<1,0xf40,"test2",defect,2,1);
d78 4
d85 1
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1

d47 3
d55 1
a55 1
   MakeAcornFormat(ID,OverrideKey,sectorsize,0,capacity,"SingleAcorn", defect,2,1);
@


1.1.1.1
log
@  Initial import of PartMan module
Detail:
  This is early work. It can be used 'manually' to format up a disc using
  the GPT partition header system. Current working format is filecore, though
  with a non optimal format. Functional, but work in progress.
Admin:
@
text
@@
