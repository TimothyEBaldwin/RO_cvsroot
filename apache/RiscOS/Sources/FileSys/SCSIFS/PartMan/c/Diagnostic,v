head	1.5;
access;
symbols
	PartMan-0_16:1.5
	PartMan-0_15:1.5
	PartMan-0_14:1.5
	PartMan-0_13:1.4
	PartMan-0_12:1.3
	PartMan-0_11:1.2
	PartMan-0_10:1.1.1.1
	PartMan-0_09:1.1.1.1
	start:1.1.1.1
	INITIAL:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2018.07.13.22.58.19;	author jballance;	state Exp;
branches;
next	1.4;
commitid	tBYQcy1tZbkGS1KA;

1.4
date	2017.01.09.21.24.54;	author jballance;	state Exp;
branches;
next	1.3;
commitid	yFxEcnSEVzAI2lBz;

1.3
date	2016.12.11.21.27.50;	author jballance;	state Exp;
branches;
next	1.2;
commitid	Gg0AAlw0femwZBxz;

1.2
date	2016.12.06.08.24.15;	author jballance;	state Exp;
branches;
next	1.1;
commitid	n7zTGodkOF8GOTwz;

1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	HKcQ8iJU5OQNCWvz;

1.1.1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches;
next	;
commitid	HKcQ8iJU5OQNCWvz;


desc
@@


1.5
log
@  Extend PartMan behaviour and add SWI and *command to list the
  detected partition start addresses and lengths. Improve
  interaction with SCSIFS.
Detail:
  Improved robustness. Made tolerant of some obstinate USB SD card
  readers that previously would cause the system to lock whilst the device
  was plugged in.
Admin:
  tested on iMx6

Version 0.14. Tagged as 'PartMan-0_14'
@
text
@/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// c.diagnostic
//
//  various diagnostic routines

#include        "PMInclude.h"
#include        "FormatDef.h"
#include        "Diagnostic.h"


#if Debug

//#define debugfile "ram:$.TestFile"
#define debugfile "RAM:$.TestFile"
#define datafile  "RAM:$.DataFile"

// init testfile to zero length
void testfileinit (void)
{
  FILE * fp;
  if((fp = fopen( debugfile,"w")) != NULL)
  {
    fclose(fp);
  }
  if((fp = fopen( datafile,"w")) != NULL)
  {
    fclose(fp);
  }
}
// save item to disc appended to end of testfile
void testsave (char* title, char * data, int size)
{
  FILE * fp;
  if((fp = fopen( datafile,"ab")) != NULL)
  {
    fprintf(fp,"\n\n%s:\n\n",title);
    fwrite(data,size,1,fp);
    fclose(fp);
  }
}
// print item to disc appended to end of testfile
void testprint (char * fmt, ...)
{
  FILE * fp;
  va_list arg;
  va_start (arg,fmt);
  _kernel_swi_regs rr;
  if((fp = fopen( debugfile,"ab")) != NULL)
  {
    _kernel_swi(OS_ReadMonotonicTime,&rr,&rr);
    fprintf(fp," %d: ",rr.r[0]);
    vfprintf(fp,fmt,arg);
    fclose(fp);
  }
  va_end(arg);
}
void testprintGUID (char * ptr)
{
  testprint(" %02x%02x%02x%02x-",ptr[3],ptr[2],ptr[1],ptr[0]);
  testprint("%02x%02x-",ptr[5],ptr[4]);
  testprint("%02x%02x-",ptr[7],ptr[6]);
  testprint("%02x%02x-",ptr[8],ptr[9]);
  testprint("%02x%02x%02x",ptr[10],ptr[11],ptr[12]);
  testprint("%02x%02x%02x ",ptr[13],ptr[14],ptr[15]);
}
void reportfmt(FormatArray* fmt)
{

  testprint("\nfmt->log2secsize %x",fmt->log2secsize);
  testprint("\nfmt->idlen       %x",fmt->idlen);
  testprint("\nfmt->log2bpmb    %x",fmt->log2bpmb );
  testprint("\n     (LFAU)      %x",1<<fmt->log2bpmb );
  testprint("\nfmt->zonecount   %x",fmt->zonecount);
  testprint("\nfmt->zonecount2  %x",fmt->zonecount2);
  testprint("\nfmt->zonetotal  &%x %d",fmt->zonec,fmt->zonec);
  testprint("\nfmt->bigdisc     %x",fmt->bigdisc);
  testprint("\nfmt->bigdir      %x",fmt->bigdir);
  testprint("\nfmt->zonespare   %x",fmt->zonespare);
  testprint("\nfmt->SecSize     %x",fmt->SecSize);
  testprint("\nfmt->SecCount    %x",fmt->SecCount);
  testprint("\nfmt->endzonebits %x",fmt->endzonebits);
  testprint("\nfmt->rootaddress %x",fmt->rootaddress);
  testprint("\nfmt->rootdiradd  %x",fmt->rootdiradd);
  testprint("\nfmt->newrootaddr %x",fmt->newrootaddress);
  testprint("\nfmt->mapbase     %x",fmt->mapbase);
  testprint("\nfmt->discsize    %x",fmt->discsize);
  testprint("\nfmt->discsizehi  %x",fmt->discsizehi);
  testprint("\nfmt->log2zsize   %x",fmt->log2zsize);
  testprint("\nfmt->newshsize   %x",fmt->newsharesize);
  testprint("\nfmt->mapbits     %x",fmt->mapbits);
  testprint("\nfmt->dirbits     %x",fmt->dirbits);
  testprint("\nfmt->bootsecbits %x",fmt->bootsecbits);
  testprint("\nfmt->fragcount   %x",fmt->fragmentcount);
  testprint("\nfmt->fragmissed  %x",fmt->fragmentmissed);
  testprint("\nfmt->fragsZ0     %x",fmt->fragmentzone0);
  testprint("\nfmt->fragsZnorm  %x",fmt->fragmentzonenorm);
  testprint("\nfmt->fragsZlast  %x",fmt->fragmentzonelast);
  testprint("\nfmt->z0sparefnd  %x",fmt->zone0sparefound);
  testprint("\nfmt->zsparefnd   %x",fmt->zonesparefound);
  testprint("\nfmt->cyls        %d",fmt->cyls);
  testprint("\nfmt->spt         %d",fmt->spt);
  testprint("\nfmt->heads       %d",fmt->heads);
  testprint("\nfmt->density     %x",fmt->density);
  testprint("\nfmt->skew        %x",fmt->skew);
  testprint("\n");
}
void reportAcornBootSec(disc_record* dr)
{
  testprint("\nlog2secsize %x",dr->l2secsize);
  testprint("\nHeads      %3d\nspt         %2d",dr->heads,dr->spt);
  testprint("\ndensity     %d",dr->density);
  testprint("\nidlen       %d",dr->idlen);
  testprint("\nl2bpmb      %d",dr->l2bpmb);
  testprint("\nskew        %d",dr->skew);
  testprint("\nbootoption  %d",dr->bootoption);
  testprint("\nlowsector   %x",dr->lowsector);
  testprint("\nnzones      %04x",dr->nzones+(dr->nzones2<<8));
  testprint("\nzonespare   %x",dr->zonespare[0]+(dr->zonespare[1]<<8));
  testprint("\nroot        %x",dr->root);
  testprint("\ndiscsize    %08x%08x",dr->discsizehi,dr->discsize);
  testprint("\ndiscid      %04x",dr->discid[0]+(dr->discid[1]<<8));
  testprint("\ndiscname    %10s",dr->discname);
  testprint("\nlog2zsize   %d",dr->log2zsize);
  testprint("\nbigflag     %d",dr->bigflag);
  testprint("\nformatversn %x",dr->formatversion);
  testprint("\nrootdirsize %x\n",dr->rootdirsize);
}


#else

#define _UU(x) ((void)(x))

void testfileinit (void){}
void testsave (char* title, char * data, int size){_UU(title);_UU(data);_UU(size); }
void testprint (char * data, ...){_UU(data);}
void reportfmt(FormatArray* fmt){_UU(fmt);}
void testprintGUID (char * ptr) {_UU(ptr);}
void reportAcornBootSec(disc_record* dr){_UU(dr);}




#endif

@


1.4
log
@   More work on filecore format routine.
Detail:
   The routine embedded in the sources will now write a correct filecore format
   across the full range of IDLen values, though in use it will generally select
   the largest IDLen value as this permits the most files to be stored on disc.
Admin:
   tested in iMx6


Version 0.13. Tagged as 'PartMan-0_13'
@
text
@d60 1
d63 2
@


1.3
log
@  Further work to the filecore formatter routine
Detail:
  The formatter now produces a layout comparable to the !HForm one
  (The 16 bit zonecount was erroneously cast to 8bit)
Admin:
  produces a layout that passes DiscKnight validation. After copyint 15Gig
  of data in sone 250000 files the disc usage is comparable.

Version 0.12. Tagged as 'PartMan-0_12'
@
text
@d80 1
a80 1
  testprint("\nfmt->idlen       %d",fmt->idlen);
d83 1
a83 1
  testprint("\nfmt->zonecount   %d",fmt->zonecount);
d88 2
a89 2
  testprint("\nfmt->zonespare   %d",fmt->zonespare);
  testprint("\nfmt->SecSize     %d",fmt->SecSize);
d98 1
a98 1
  testprint("\nfmt->sharesize   %d",fmt->sharesize);
d115 1
a115 1

d131 1
a131 1
  testprint("\ndiscid      %04x",dr->discid[1]+(dr->discid[0]<<8));
d133 1
a133 1
  testprint("\nsharesize   %d",dr->sharesize);
@


1.2
log
@   progress, bug fixes, and improved diagnostics
Detail:
  still needs optimisation of formatter element
Admin:


Version 0.11. Tagged as 'PartMan-0_11'
@
text
@d85 1
d117 21
a137 1

d149 1
@


1.1
log
@Initial revision
@
text
@d55 1
a55 1
void testprint (char * data)
d58 2
d62 1
a62 56
    fprintf(fp,data);
    fclose(fp);
  }
}
// print item to disc appended to end of testfile
void testprint1 (char * data, int format)
{
  FILE * fp;
  if((fp = fopen( debugfile,"ab")) != NULL)
  {
    fprintf(fp,data,format);
    fclose(fp);
  }
}
void testprint2 (char * data, int format, int a1)
{
  FILE * fp;
  if((fp = fopen( debugfile,"ab")) != NULL)
  {
    fprintf(fp,data,format, a1);
    fclose(fp);
  }
}
void testprint3 (char * data, int format, int a1, int a2)
{
  FILE * fp;
  if((fp = fopen( debugfile,"ab")) != NULL)
  {
    fprintf(fp,data,format, a1,a2);
    fclose(fp);
  }
}
void testprint4 (char * data, int format, int a1, int a2, int a3)
{
  FILE * fp;
  if((fp = fopen( debugfile,"ab")) != NULL)
  {
    fprintf(fp,data,format, a1,a2,a3);
    fclose(fp);
  }
}
void testprint5 (char * data, int format, int a1, int a2, int a3, int a4)
{
  FILE * fp;
  if((fp = fopen( debugfile,"ab")) != NULL)
  {
    fprintf(fp,data,format, a1,a2,a3,a4);
    fclose(fp);
  }
}
void testprint6 (char * data, int format, int a1, int a2, int a3, int a4, int a5)
{
  FILE * fp;
  if((fp = fopen( debugfile,"ab")) != NULL)
  {
    fprintf(fp,data,format, a1,a2,a3,a4,a5);
d65 1
d69 6
a74 6
  testprint4(" %02x%02x%02x%02x-",ptr[3],ptr[2],ptr[1],ptr[0]);
  testprint2("%02x%02x-",ptr[5],ptr[4]);
  testprint2("%02x%02x-",ptr[7],ptr[6]);
  testprint2("%02x%02x-",ptr[8],ptr[9]);
  testprint3("%02x%02x%02x",ptr[10],ptr[11],ptr[12]);
  testprint3("%02x%02x%02x ",ptr[13],ptr[14],ptr[15]);
d79 35
a113 35
  testprint1("\nfmt->log2secsize %x",fmt->log2secsize);
  testprint1("\nfmt->idlen       %d",fmt->idlen);
  testprint1("\nfmt->log2bpmb    %x",fmt->log2bpmb );
  testprint1("\n     (LFAU)      %x",1<<fmt->log2bpmb );
  testprint1("\nfmt->zonecount   %d",fmt->zonecount);
  testprint1("\nfmt->zonecount2  %x",fmt->zonecount2);
  testprint1("\nfmt->bigdisc     %x",fmt->bigdisc);
  testprint1("\nfmt->bigdir      %x",fmt->bigdir);
  testprint1("\nfmt->zonespare   %d",fmt->zonespare);
  testprint1("\nfmt->SecSize     %d",fmt->SecSize);
  testprint1("\nfmt->SecCount    %x",fmt->SecCount);
  testprint1("\nfmt->endzonebits %x",fmt->endzonebits);
  testprint1("\nfmt->rootaddress %x",fmt->rootaddress);
  testprint1("\nfmt->rootdiradd  %x",fmt->rootdiradd);
  testprint1("\nfmt->newrootaddr %x",fmt->newrootaddress);
  testprint1("\nfmt->mapbase     %x",fmt->mapbase);
  testprint1("\nfmt->discsize    %x",fmt->discsize);
  testprint1("\nfmt->discsizehi  %x",fmt->discsizehi);
  testprint1("\nfmt->sharesize   %d",fmt->sharesize);
  testprint1("\nfmt->newshsize   %x",fmt->newsharesize);
  testprint1("\nfmt->mapbits     %x",fmt->mapbits);
  testprint1("\nfmt->dirbits     %x",fmt->dirbits);
  testprint1("\nfmt->bootsecbits %x",fmt->bootsecbits);
  testprint1("\nfmt->fragcount   %x",fmt->fragmentcount);
  testprint1("\nfmt->fragmissed  %x",fmt->fragmentmissed);
  testprint1("\nfmt->fragsZ0     %x",fmt->fragmentzone0);
  testprint1("\nfmt->fragsZnorm  %x",fmt->fragmentzonenorm);
  testprint1("\nfmt->fragsZlast  %x",fmt->fragmentzonelast);
  testprint1("\nfmt->z0sparefnd  %x",fmt->zone0sparefound);
  testprint1("\nfmt->zsparefnd   %x",fmt->zonesparefound);
  testprint1("\nfmt->cyls        %d",fmt->cyls);
  testprint1("\nfmt->spt         %d",fmt->spt);
  testprint1("\nfmt->heads       %d",fmt->heads);
  testprint1("\nfmt->density     %x",fmt->density);
  testprint1("\nfmt->skew        %x",fmt->skew);
d125 1
a125 7
void testprint (char * data){_UU(data);}
void testprint1 (char * data,  int a1){_UU(data);_UU(a1);}
void testprint2 (char * data,  int a1,int a2){_UU(data);_UU(a1);_UU(a2);}
void testprint3 (char * data,  int a1, int a2,int a3){_UU(data);_UU(a1);_UU(a2);_UU(a3);}
void testprint4 (char * data,  int a1, int a2,int a3,int a4){_UU(data);_UU(a1);_UU(a2);_UU(a3);_UU(a4);}
void testprint5 (char * data,  int a1, int a2,int a3,int a4,int a5) {_UU(data);_UU(a1);_UU(a2);_UU(a3);_UU(a4);_UU(a5);}
void testprint6 (char * data,  int a1, int a2,int a3,int a4,int a5,int a6){_UU(data);_UU(a1);_UU(a2);_UU(a3);_UU(a4);_UU(a5);_UU(a6);}
@


1.1.1.1
log
@  Initial import of PartMan module
Detail:
  This is early work. It can be used 'manually' to format up a disc using
  the GPT partition header system. Current working format is filecore, though
  with a non optimal format. Functional, but work in progress.
Admin:
@
text
@@
