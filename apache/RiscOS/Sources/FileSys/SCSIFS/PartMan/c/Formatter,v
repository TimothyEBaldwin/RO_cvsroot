head	1.3;
access;
symbols
	PartMan-0_16:1.3
	PartMan-0_15:1.3
	PartMan-0_14:1.3
	PartMan-0_13:1.3
	PartMan-0_12:1.3
	PartMan-0_11:1.3
	PartMan-0_10:1.2
	PartMan-0_09:1.1.1.1
	start:1.1.1.1
	INITIAL:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2016.12.06.08.24.15;	author jballance;	state Exp;
branches;
next	1.2;
commitid	n7zTGodkOF8GOTwz;

1.2
date	2016.12.01.18.37.38;	author jballance;	state Exp;
branches;
next	1.1;
commitid	YAJCcZqGGbY3njwz;

1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	HKcQ8iJU5OQNCWvz;

1.1.1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches;
next	;
commitid	HKcQ8iJU5OQNCWvz;


desc
@@


1.3
log
@   progress, bug fixes, and improved diagnostics
Detail:
  still needs optimisation of formatter element
Admin:


Version 0.11. Tagged as 'PartMan-0_11'
@
text
@/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include        "PMInclude.h"
#include        "GPThdr.h"
#include        "FormatDef.h"
#include        "FormatBits.h"
#include        "Format.h"
#include        "Diagnostic.h"

#define task_name "gpttst"          /* the name of our task */
#define MaxPartitions 7
extern _kernel_oserror  err;

_kernel_oserror * FormatPartition( int ID, FormatParamsp FP, int sectorsize)
{
testprint("FormatPartition ID:%x partn:%d name:%s\n",ID,FP->partition,(int)FP->discname);
// first read the partition spec
  GUIDPartn* myGP = ReturnGPTPartionInfo ( ID, FP->partition);
  if(myGP)
  {
   printGUIDpart(myGP);
   switch(FP->type)
    {
    case GUIDWinNorm:
      MakeDosFormat(ID,OverrideKey,sectorsize,myGP->StartLBA[0],myGP->EndLBA[0]-myGP->StartLBA[0]-1,myGP->EndLBA[0]-myGP->StartLBA[0]-1,FP->discname, NULL,-1,1);

  break;
  case GUIDFilecore:
      MakeAcornFormat(ID,OverrideKey,sectorsize,myGP->StartLBA[0],myGP->EndLBA[0]-myGP->StartLBA[0]-1,FP->discname, NULL,2,1);

    break;
  default:
    err.errnum=0;
    strncpy(err.errmess,"no known format",250);
    wimp_error(&(err));
    return &(err);
    }
  }
  return NULL;
}


@


1.2
log
@  Rounded up a couple of 'zero pains'
Detail:
  Some list checkers produce a null at the end. A couple of routines
  needed to be more robust...
Admin:


Version 0.10. Tagged as 'PartMan-0_10'
@
text
@d28 1
a28 1
testprint3("FormatPartition ID:%x partn:%d name:%s\n",ID,FP->partition,(int)FP->discname);
@


1.1
log
@Initial revision
@
text
@d31 1
a31 3
         printGUIDpart(myGP);

  switch(FP->type)
d33 5
a37 2
  case GUIDWinNorm:
    MakeDosFormat(ID,OverrideKey,sectorsize,myGP->StartLBA[0],myGP->EndLBA[0]-myGP->StartLBA[0]-1,myGP->EndLBA[0]-myGP->StartLBA[0]-1,FP->discname, NULL,-1,1);
d39 3
a41 3
break;
case GUIDFilecore:
    MakeAcornFormat(ID,OverrideKey,sectorsize,myGP->StartLBA[0],myGP->EndLBA[0]-myGP->StartLBA[0]-1,FP->discname, NULL,2,1);
d43 7
a49 6
  break;
default:
  err.errnum=0;
  strncpy(err.errmess,"no known format",250);
  wimp_error(&(err));
  return &(err);
@


1.1.1.1
log
@  Initial import of PartMan module
Detail:
  This is early work. It can be used 'manually' to format up a disc using
  the GPT partition header system. Current working format is filecore, though
  with a non optimal format. Functional, but work in progress.
Admin:
@
text
@@
