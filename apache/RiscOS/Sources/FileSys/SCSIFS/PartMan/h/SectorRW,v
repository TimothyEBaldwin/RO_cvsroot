head	1.3;
access;
symbols
	PartMan-0_16:1.3
	PartMan-0_15:1.2
	PartMan-0_14:1.2
	PartMan-0_13:1.1.1.1
	PartMan-0_12:1.1.1.1
	PartMan-0_11:1.1.1.1
	PartMan-0_10:1.1.1.1
	PartMan-0_09:1.1.1.1
	start:1.1.1.1
	INITIAL:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2018.07.19.23.40.07;	author jballance;	state Exp;
branches;
next	1.2;
commitid	zYSuPY5l4rV2VNKA;

1.2
date	2018.07.13.22.58.25;	author jballance;	state Exp;
branches;
next	1.1;
commitid	tBYQcy1tZbkGS1KA;

1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	HKcQ8iJU5OQNCWvz;

1.1.1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches;
next	;
commitid	HKcQ8iJU5OQNCWvz;


desc
@@


1.3
log
@  Improved reboot behaviour, and added routines to check for boot disc.
Detail:
  Various routines added to detect and help prevent formatting of
  current boot disc. Also improved detection of already mounted discs
  when PartMan is rebooted.
Admin:
 tested on iMx6

Version 0.16. Tagged as 'PartMan-0_16'
@
text
@/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef SECTORRW_H
#define SECTORRW_H

// Access key to override disc reservations
#define OverrideKey (unsigned int)0xfc000003


// Read sector from scsi device
// assume Length is multiple of SecSize
_kernel_oserror * SecRead(int ID, unsigned int AccessKey, void *To, int Length, int LBA, int SecSize);

// write sector to scsi device
// assume Length is multiple of SecSize
_kernel_oserror * SecWrite(int ID, unsigned int AccessKey, void *From, int Length, int LBA, int SecSize);

// perform inquiry command and return type field
_kernel_oserror * Inquiry(int ID, unsigned int AccessKey,int* type);

// Check to see if this ID and partition base is the Boot Disc
// returns false if not boot disc,
// returns true if partial and scsiid matches
// returns true if it is a compete match.
bool CheckBootDiscID(int scsiid, int start, bool partial);

// return SCSIFS mounted disc number for scsi ID & partition start address
// or -1 if not currently mounted
void MountedDiscNum(int scsiID, int partLBA, int *scsifsID);
// return SCSI ID & partition start address for SCSIFS mounted disc number
// or -1 if not currently mounted
void MountedDiscLoc(int scsifsID, int *scsiid, int *start);


// read disc capacity & sector size
// set answers to 0 if error
_kernel_oserror * ReadDiscCapacity(int ID, unsigned int AccessKey,int* capacity,int* sectorsize);
 // buffered sector read/write for use with formatting
typedef struct{
 int ID;  		// scsi ID to use
 int SecSize;        	// size of secbuf
 int Where;        	// scsi block address
 int Length;		// length of data buffer there
 int SecsPerBuf;	// number of logical secs/physical sector(if > 1k)
 int Changed;		// set NZ if buffer has been changed
 unsigned int AccessKey;
 char *secbuf;          // ptr to actual buffer
 void* next;   		// ptr to next entry
}BufferedSec;
extern BufferedSec* BufStart;

void BufSecInit(void);
BufferedSec* BufSecNext(int Length);
void BufSecFlush(void);
_kernel_oserror * BufSecRead(int ID, unsigned int AccessKey, void *To, int Length, int Where, int SecSize, int *changed);
_kernel_oserror * BufSecChange(int ID, unsigned int AccessKey,void *From, int Length, int Where, int SecSize);
_kernel_oserror * BufSecWrite(void);
_kernel_oserror * BufSecBootWrite(void);
#endif
@


1.2
log
@  Extend PartMan behaviour and add SWI and *command to list the
  detected partition start addresses and lengths. Improve
  interaction with SCSIFS.
Detail:
  Improved robustness. Made tolerant of some obstinate USB SD card
  readers that previously would cause the system to lock whilst the device
  was plugged in.
Admin:
  tested on iMx6

Version 0.14. Tagged as 'PartMan-0_14'
@
text
@d30 17
@


1.1
log
@Initial revision
@
text
@d32 1
a32 1
void ReadDiscCapacity(int ID, unsigned int AccessKey,int* capacity,int* sectorsize);
@


1.1.1.1
log
@  Initial import of PartMan module
Detail:
  This is early work. It can be used 'manually' to format up a disc using
  the GPT partition header system. Current working format is filecore, though
  with a non optimal format. Functional, but work in progress.
Admin:
@
text
@@
