head	1.2;
access;
symbols
	PartMan-0_16:1.2
	PartMan-0_15:1.2
	PartMan-0_14:1.2
	PartMan-0_13:1.2
	PartMan-0_12:1.1.1.1
	PartMan-0_11:1.1.1.1
	PartMan-0_10:1.1.1.1
	PartMan-0_09:1.1.1.1
	start:1.1.1.1
	INITIAL:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.01.09.21.24.56;	author jballance;	state Exp;
branches;
next	1.1;
commitid	yFxEcnSEVzAI2lBz;

1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	HKcQ8iJU5OQNCWvz;

1.1.1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches;
next	;
commitid	HKcQ8iJU5OQNCWvz;


desc
@@


1.2
log
@   More work on filecore format routine.
Detail:
   The routine embedded in the sources will now write a correct filecore format
   across the full range of IDLen values, though in use it will generally select
   the largest IDLen value as this permits the most files to be stored on disc.
Admin:
   tested in iMx6


Version 0.13. Tagged as 'PartMan-0_13'
@
text
@/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef FORMAT_H
#define FORMAT_H
// Format defines etc

#include "FormatDef.h"
int MakeAcornFormat(int          ID,
                    unsigned int AccessKey,
                    int          SecSize,
                    int          BaseOffset,
                    int          SecCount,
                    char         *name,
                    int          *defect,           // held as sector offsets from partition base
                    char         bootoption,
               	    int		 bigdir);


int MakeDosFormat(int              ID,
                  unsigned int     AccessKey,
                  int              SecSize,
                  int              BaseOffset,
                  int              SecCount,
                  int		   TotalDiscSize,
                  char             *name,
                  int              *defect,
                  int              dospart,             // dos partition number to use (0-3)
                  char             bootoption);


unsigned char mapvalidbyte( void const * const map,
                            int log2secsize,
                            unsigned int zone);


unsigned char bootvalidbyte ( bootsector* boot);


void DefectChecksum(int *defect, int disctype);

_kernel_oserror* ReadAcornPartitionName(int ID, unsigned int AccessKey, int PartitionOffset, char *Name, int sectorsize);

void fragwrite(char* mapsector, int position, int FragmentID, int FragmentLen, int IDlen);

_kernel_oserror*  FormatPartition( int ID, FormatParamsp FP, int sectorsize);

void MakeRootDir(int bigdir , char* map, int rootaddress);

#endif
@


1.1
log
@Initial revision
@
text
@a19 2
int BuildAcornLayout(FormatArray* fmt,bootsector* bs);

a54 1
void ComputeAcornLayout(FormatArray* fmt);
d59 1
@


1.1.1.1
log
@  Initial import of PartMan module
Detail:
  This is early work. It can be used 'manually' to format up a disc using
  the GPT partition header system. Current working format is filecore, though
  with a non optimal format. Functional, but work in progress.
Admin:
@
text
@@
