head	1.3;
access;
symbols
	PartMan-0_16:1.3
	PartMan-0_15:1.3
	PartMan-0_14:1.3
	PartMan-0_13:1.3
	PartMan-0_12:1.2
	PartMan-0_11:1.1.1.1
	PartMan-0_10:1.1.1.1
	PartMan-0_09:1.1.1.1
	start:1.1.1.1
	INITIAL:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.01.09.21.24.57;	author jballance;	state Exp;
branches;
next	1.2;
commitid	yFxEcnSEVzAI2lBz;

1.2
date	2016.12.11.21.27.52;	author jballance;	state Exp;
branches;
next	1.1;
commitid	Gg0AAlw0femwZBxz;

1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	HKcQ8iJU5OQNCWvz;

1.1.1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches;
next	;
commitid	HKcQ8iJU5OQNCWvz;


desc
@@


1.3
log
@   More work on filecore format routine.
Detail:
   The routine embedded in the sources will now write a correct filecore format
   across the full range of IDLen values, though in use it will generally select
   the largest IDLen value as this permits the most files to be stored on disc.
Admin:
   tested in iMx6


Version 0.13. Tagged as 'PartMan-0_13'
@
text
@/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef _FORMATDEFS_H_
#define _FORMATDEFS_H_
// Format defines etc
#include "GPT.h"


typedef struct{
unsigned char log2secsize;      // input: log 2 of sector size (max 0xf)
unsigned char idlen;            // input: length of ID field in bits
unsigned char log2bpmb;         // input: log 2 of bytes per map bit
unsigned char zonecount;        // input: zone count
unsigned char zonecount2;       // input: zone count hi byte (bigdir)
unsigned char bigdisc;          // input: 1 if => 512 MBytes disc
unsigned char bigdir;           // input: 1 if big directory disc
unsigned int  zonec;            //        zonecount work register
unsigned int  log2zsize;        // input: log 2 of zone count
unsigned int  zonespare;        // input: spare bits in zone
unsigned int  SecSize;          // input: sector size, bytes
unsigned int  SecCount;         // input: disc length in sectors
unsigned int  discsize;         // input: disc size in bytes.. bottom 32 bits
unsigned int  discsizehi;       // input: top 32 bits of disc size
unsigned int  endzonebits;      // result: zone bits used in final zone
unsigned int  newsharesize;     // result: computed log 2 of bigdisc sharesize
unsigned int  rootaddress;      // result: disc address of root dir
unsigned int  rootdiradd;       // result: sector address offset of root dir
unsigned int  newrootaddress;   // result: expected disc address of root dir
unsigned int  rootdirsize;      // result: root directory size
unsigned int  mapbase;          // result: sector address of base of map
unsigned int  sharesizefound;   // result: log 2 of bigdisc sharesize
unsigned int  mapbits;          // result: alloc bits used for map + rootdir itself
unsigned int  dirbits;          // result: alloc bits used for F+ fmt rootdir
unsigned int  bootsecbits;      // result: alloc bits used to protect boot sector
unsigned int  fragmentcount;    // result: number of min length fragments in disc
                                //         includes fragments used for zonespare
unsigned int  fragmentmissed;   // result: part frag past above
unsigned int  fragmentzone0;    // result: fragments in zone 0
unsigned int  fragmentzonenorm; // result: fragments in main zones
unsigned int  fragmentzonelast; // result: fragments in last zone
unsigned int  zonesparefound;   // result: zonespare bits computed
unsigned int  zone0sparefound;  // result: zone0spare bits computed
unsigned int  NewSecCount;      // result: sectors used
unsigned int  cyls;             // result: cylinders
unsigned char spt;              // result: secs per trk
unsigned char heads;            // result: heads
unsigned char density;          // result: density
unsigned char skew;             // result: skew
}FormatArray;

#define FPNameLenMAX  32
typedef struct{
  GUIDtype type;                // type to format with
  int partition;                // GUID partition to format into
  char discname[32];
} FormatParams, *FormatParamsp;

#endif
@


1.2
log
@  Further work to the filecore formatter routine
Detail:
  The formatter now produces a layout comparable to the !HForm one
  (The 16 bit zonecount was erroneously cast to 8bit)
Admin:
  produces a layout that passes DiscKnight validation. After copyint 15Gig
  of data in sone 250000 files the disc usage is comparable.

Version 0.12. Tagged as 'PartMan-0_12'
@
text
@d30 1
a30 1
unsigned int  sharesize;        // input: log 2 of bigdisc sharesize
d55 1
@


1.1
log
@Initial revision
@
text
@d29 1
@


1.1.1.1
log
@  Initial import of PartMan module
Detail:
  This is early work. It can be used 'manually' to format up a disc using
  the GPT partition header system. Current working format is filecore, though
  with a non optimal format. Functional, but work in progress.
Admin:
@
text
@@
