head	1.2;
access;
symbols
	PartMan-0_16:1.2
	PartMan-0_15:1.2
	PartMan-0_14:1.2
	PartMan-0_13:1.2
	PartMan-0_12:1.1.1.1
	PartMan-0_11:1.1.1.1
	PartMan-0_10:1.1.1.1
	PartMan-0_09:1.1.1.1
	start:1.1.1.1
	INITIAL:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.01.09.21.24.57;	author jballance;	state Exp;
branches;
next	1.1;
commitid	yFxEcnSEVzAI2lBz;

1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	HKcQ8iJU5OQNCWvz;

1.1.1.1
date	2016.11.28.22.08.42;	author jballance;	state Exp;
branches;
next	;
commitid	HKcQ8iJU5OQNCWvz;


desc
@@


1.2
log
@   More work on filecore format routine.
Detail:
   The routine embedded in the sources will now write a correct filecore format
   across the full range of IDLen values, though in use it will generally select
   the largest IDLen value as this permits the most files to be stored on disc.
Admin:
   tested in iMx6


Version 0.13. Tagged as 'PartMan-0_13'
@
text
@#ifndef __FORMATBITS_H_
#define __FORMATBITS_H_
// > h.formatbits
//
//
// fields within a HD boot sector
typedef struct{
char    l2secsize;
char    spt;
char    heads;
char    density;

char    idlen;
char    l2bpmb;
char    skew;
char    bootoption;

char    lowsector;
char    nzones;
char    zonespare[2];           // looks like only low byte used

int     root;
int     discsize;
char    discid[2];
char    discname[10];
int     disctype;
int     discsizehi;
char    log2zsize;              // max 0xf
char    bigflag;
char	nzones2;
char	bdspare1;              // must be 0
int	formatversion;
int	rootdirsize;
char	bdspareother[59-54];
}disc_record;

typedef struct{
unsigned int     defects[(0x200-64-28)/4];// space for defect mapping
unsigned int     partoffset[7];          // offsets of extended partitions, extending downwards
disc_record      dr;                     // disc record
unsigned char    nonadfsid;              // non adfs partition descriptor (riscIX)
unsigned char    nalostart;              // lo start cyl for above
unsigned char    nahistart;              // hi start cyl for above
unsigned char    bootchksum;             // boot block check sum
} bootsector;

typedef struct{
char    bootable;               // 0x80 for bootable
char    startside;
char    startcylhisec;          // sectors start at 1
char    startcyllo;
char    parttype;               // 0x06 for BIGDOS
char    stopside;
char    stopcylhisec;           // sectors start at 1
char    stopcyllo;
union
{
 char   relsecs[4];             // LSB first
 int    relsecint;
}start;
union
{
 char   sizesecs[4];            // LSB first
 int    sizesecsint;
}size;
} dospart;

typedef struct{
char    data[0x200-66];
// part below explicit to ensure byte alignemnt kept
char    bootable1;               // 0x80 for bootable
char    startside1;
char    startcylhisec1;
char    startcyllo1;
char    parttype1;               // 0x06 for BIGDOS
char    stopside1;
char    stopcylhisec1;
char    stoptcyllo1;
char    relsecs1[4];             // LSB first
char    sizesecs1[4];            // LSB first
char    bootable2;               // 0x80 for bootable
char    startside2;
char    startcylhisec2;
char    startcyllo2;
char    parttype2;               // 0x06 for BIGDOS
char    stopside2;
char    stopcylhisec2;
char    stoptcyllo2;
char    relsecs2[4];             // LSB first
char    sizesecs2[4];            // LSB first
char    bootable3;               // 0x80 for bootable
char    startside3;
char    startcylhisec3;
char    startcyllo3;
char    parttype3;               // 0x06 for BIGDOS
char    stopside3;
char    stopcylhisec3;
char    stoptcyllo3;
char    relsecs3[4];             // LSB first
char    sizesecs3[4];            // LSB first
char    bootable4;               // 0x80 for bootable
char    startside4;
char    startcylhisec4;
char    startcyllo4;
char    parttype4;               // 0x06 for BIGDOS
char    stopside4;
char    stopcylhisec4;
char    stoptcyllo4;
char    relsecs4[4];             // LSB first
char    sizesecs4[4];            // LSB first
char    key[2];                 // 0x55, 0xaa
}dosbootsector;


// header for dos per-partition boot sector
typedef struct{
char    dfbjump[3];
char    dfboemname[8];
char    dfbbytespersec[2];		// lsb first
char    dfbspc;
char    dfbreservedsecs[2]; 		// at start of per partition area
char    dfbfatcopies;
char    dfbdirent[2];
char    dfbsecsonolddisc[2];		// used on fat8 etc
char    dfbmediadescriptor;
char    dfbfatcount[2]; 		// sectors/fat
char    dfbsectors[2];
char    dfbheads[2];
int     dfbbaseoffset;  		// partition start point
int     dfbdiscsecsize;           	// partition size, -1
char    spare3;
char    spare4;
char    serial[4];
char    space;
char    dfbvolname[11];
char    dfbformattype[8];
char    dataend[2];

int     postdata[112];

} dosformatbootsector;



#endif
@


1.1
log
@Initial revision
@
text
@d12 1
d17 1
d20 2
a21 1
char    zonespare[2];
d28 1
a28 1
char    sharesize;              // max 0xf
@


1.1.1.1
log
@  Initial import of PartMan module
Detail:
  This is early work. It can be used 'manually' to format up a disc using
  the GPT partition header system. Current working format is filecore, though
  with a non optimal format. Functional, but work in progress.
Admin:
@
text
@@
