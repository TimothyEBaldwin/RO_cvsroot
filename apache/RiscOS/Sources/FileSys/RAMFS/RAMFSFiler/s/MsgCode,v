head	4.4;
access;
symbols
	RAMFSFiler-0_40:4.4
	RAMFSFiler-0_39:4.4
	RO_5_07:4.4
	RAMFSFiler-0_38:4.4
	RAMFSFiler-0_37:4.3
	RAMFSFiler-0_36:4.3
	dellis_autobuild_BaseSW:4.2
	Ursula_merge:4.1
	RAMFSFiler-0_35:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rleggett_RAMFSFiler-0_34:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2003.01.13.22.38.00;	author rsprowson;	state Exp;
branches;
next	4.3;

4.3
date	2001.05.14.14.47.29;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.08.12.10.05;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.33.51;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.51;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.02.55;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.41.02;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.37.26;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Addition of ShareFS submenu plus appropriate additional interactive
help messages to Resources.
Added this in 2002 but forgot to check it in.
Fix for freeing the maximal amount of the RAMFS dynamic area rather than
a hardcoded 64Mbytes

Version 0.38. Tagged as 'RAMFSFiler-0_38'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Message file handling code.


; OSS Routine to lookup the menu structure. The menu items are indirect,
; which means we have pointers into the RMA representation of the file.

; Note this routine must only be called when RAMFS Filer is the current Wimp
; task ie. NOT in service call handlers. The service call handlers have to
; flag that the re-cache should be done, so that this is spotted on the next
; Wimp_Poll.

rom_menustart
m_ramfs         Menu    MTitle
mo_fl_namedisc  Item    MName,  m_nameit
mo_fl_share     Item    MShare, m_shareit
mo_fl_free      Item    MFree
mo_fl_quit      Item    MQuit

m_nameit        Menu    NTitle
mo_nd_newname   Item    NNull,,W

m_shareit       Menu    STitle
mo_ss_notshd    Item    MSN
mo_ss_shdprot   Item    MSP
mo_ss_shdunprot Item    MSU

                DCB     0               ; terminator
                ALIGN

; Can't tell whether our menu is up or not, so close whatever the current
; menu is in case it is ours. So sometimes we close someone else's menu.
; Sad, but better than a machine stiffage.

; Must use ripple through error (VC) all the way to ensure the flag that
; says whether the file is valid or not gets set at the end.

copy_menus Entry "r1-r3"
 [ debug
        DLINE   "Re-making menu tree"
 ]
        MOV     r1, #-1                 ; Close menu tree.
        SWI     XWimp_CreateMenu

        ADRVC   r1, mb_namedisc         ; fill in writeable fields now
        ADRVC   r2, mv_namedisc
        MOVVC   r3, #?mb_namedisc
        ADRVC   r14, m_nameit + m_headersize + 0*mi_size + mi_icondata
        STMVCIA r14, {r1-r3}

        BLVC    open_message_file       ; Get file open if necessary.
        ADRVC   r0, message_file_block
        ADRVC   r1, rom_menustart
        ADRVC   r2, ram_menustart
        MOVVC   r3, #ram_menuend-ram_menustart
        SWIVC   XMessageTrans_MakeMenus ; Get the new menu data

; If we get an error, flag that the file is valid/invalid so we can refuse
; to display the menu if the file is invalid (we got an error).

        MOVVC   r1, #0                  ; Not invalid
        MOVVS   r1, #1                  ; Invalid
        STR     r1, message_file_invalid

 [ debug
        EXIT    VC
        ADD     r1, r0, #4
        DSTRING r1, "Make Menus failed"
 ]
        EXIT

mv_namedisc     DCB     "A~$&%@@\\^:.#*""| ", 0  ; disallow funny chars

; Routine to lookup a string with no substituted parameters.

; In    r1 -> token
;       r2 -> buffer
;       r3 = buffer size
; Out   r0 corrupt if VC, else r0 -> error block if VS
;       r3 = size of string excluding terminator

lookup_nopars Entry "r4-r7"
        BL      open_message_file               ; Open file if necessary
        EXIT    VS

        ADR     r0, message_file_block
        MOV     r4, #0                          ; No %0
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_Lookup
        EXIT


; OSS Translate an error block, with one substituted parameter.

; In:   r0 -> Error block containing the token
;       r1 -> %0 parameter to substitute

; Out:  r0 -> Translated error block or another error (token no found etc.)
;       All other registers preserved, V always set, other flags undefined

copy_error_one Entry "r2-r7"
        MOV     r4, r1                          ; Move input %0

        CMP     wp, #0
        BLE     copy_error_one_stack            ; No workspace - open on stack

        BL      open_message_file               ; Ensure file is open
        EXIT    VS                              ; Return the error

        ADR     r1, message_file_block          ; Messages file handle
        MOV     r2, #0                          ; Use MessageTrans buffer
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_ErrorLookup       ; Always sets the V flag

        MOV     r1, r4                          ; Preserve input r1
        EXIT


; This must be a start-up type error, as we have no workspace. So we open
; the file on the stack, do the lookup, and then close the file again.

copy_error_one_stack ROUT
        BL      open_message_file_stack         ; Open the file
        EXIT    VS                              ; Return the error

        MOV     r1, sp                          ; Messages file handl on stack
        MOV     r2, #0                          ; Use MessageTrans buffer
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_ErrorLookup       ; Always sets the V flag

        MOV     r1, r4                          ; Preserve input r1
        BL      close_message_file_stack        ; Close the file

        SETV
        EXIT


message_filename
        DCB     "Resources:$.Resources.RAMFSFiler.Messages", 0
        ALIGN


; OSS Open the messages file if it is closed, using workspace.

open_message_file Entry "r0-r2"
        LDR     r1 , message_file_open
        TEQ     r1, #0                          ; Check the open flag
        EXIT    NE                              ; Return - it is open

        ADR     r0, message_file_block          ; Messages file handle
        ADR     r1, message_filename            ; Messages filename
        MOV     r2, #0                          ; Buffer in RMA/access direct
        SWI     XMessageTrans_OpenFile
        STRVS   r0, [sp]                        ; Return the error
        EXIT    VS

 [ debug
        DLINE   "Opened RAMFS Filer messages file"
 ]

        MOV     r1, #1
        STR     r1, message_file_open           ; Flag the file as open
        EXIT


; OSS Close the messages file if it is open, using workspace.

close_message_file Entry "r0"
        LDR     r0, message_file_open           ; Check open flag
        CMP     r0, #0                          ; clears V
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile         ; Close if open
        SUBS    r0, r0, r0                      ; R0=0; clear V
        STR     r0, message_file_open           ; Update open flag
        EXIT                                    ; Ignore errors


; Carve the message file block off the stack, open the Messages file,
; and exit with the open file block on the stack unless there was an error.
; Preserves r0 (token to be looked up) unless error. Trashes R1, R2, R6, R7.

open_message_file_stack ROUT
        MOV     r7, lr                  ; Save LR
        MOV     r6, r0                  ; Save token/error block
        SUB     sp, sp, #16             ; Carve message file handle off stack

        MOV     r0, sp                  ; File handle on stack
        ADR     r1, message_filename    ; Filename
        MOV     r2, #0                  ; Direct access/buffer in RMA
        SWI     XMessageTrans_OpenFile  ; Open the file

        ADDVS   sp, sp, #16             ; Error - put stack back
        MOVVC   r0, r6                  ; Not error - restore token block
        MOV     pc, r7                  ; Return


; Close the message file block on the stack, restore the stack, and return.
; Preserves R0 (error block). Trashes R6 and R7 and flags.

close_message_file_stack ROUT
        MOV     r7, lr                  ; Save LR (and V bit)
        MOV     r6, r0                  ; Save translated error block

        MOV     r0, sp                  ; Message file block is on stack
        SWI     XMessageTrans_CloseFile ; Close the file (ignore error)

        ADD     sp, sp, #16             ; Put stack back
        MOV     r0, r6                  ; Restore translated error
        MOV     pc, r7                  ; Return

        END
@


4.3
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 0.36. Tagged as 'RAMFSFiler-0_36'
@
text
@d29 2
d33 9
d58 7
d86 1
@


4.2
log
@  Merge of Ursula branch to the trunk
  32-bit compatible
  Moved to srccommit
Admin:
  Tested on Risc PC.

Version 0.35. Tagged as 'RAMFSFiler-0_35'
@
text
@d41 1
a41 1
copy_menus ENTRY "r1-r3"
d77 1
a77 1
lookup_nopars ENTRY "r4-r7"
d98 1
a98 1
copy_error_one ENTRY "r2-r7"
d146 1
a146 1
open_message_file ENTRY "r0-r2"
d169 1
a169 1
close_message_file ENTRY "r0"
@


4.1
log
@Initial revision
@
text
@d44 1
a44 1
 ] 
d105 1
a105 1
        EXIT    VS                              ; Return the error 
d123 1
a123 1
        EXIT    VS                              ; Return the error 
d134 2
d171 1
a171 1
        TEQ     r0, #0
d174 1
a174 1
        MOV     r0, #0
d176 1
a176 1
        EXITS                                   ; Ignore errors
d199 1
a199 1
; Preserves R0 (error block) and V bit. Trashes R6 and R7.
d210 1
a210 1
        MOVS    pc, r7                  ; Return and preserve V bit
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
