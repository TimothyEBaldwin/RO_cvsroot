head	4.6;
access;
symbols
	RAMFS-2_23:4.5
	RAMFS-2_22:4.5
	RAMFS-2_21:4.5
	RO_5_07:4.5
	RAMFS-2_20:4.5
	RAMFS-2_19a:4.5
	RAMFS-2_19:4.4
	RAMFS-2_18:4.4
	RAMFS-2_17:4.4
	RAMFS-2_16:4.4
	RAMFS-2_15:4.3
	dellis_autobuild_BaseSW:4.2
	Ursula_merge:4.1.4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.4
	nturton_RAMFS-2_11:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	nicke_RAMFS_2_11:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	sproven_RAMFS-2_14:4.1.4.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	sproven_Ursula_2_12:4.1.4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2011.10.14.07.52.38;	author rsprowson;	state dead;
branches;
next	4.5;
commitid	CFv2fFukGmKq4iDv;

4.5
date	2004.01.05.11.09.47;	author bavison;	state Exp;
branches;
next	4.4;

4.4
date	2001.05.14.14.43.44;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	2000.11.24.10.59.22;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.30.10.13.08;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.33.47;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.47;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.02.04;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.02.11.18.51.49;	author sproven;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.40.40;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.37.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Simplify.
Change to use exports from FileCore-3_45.
Delete local copies, which then collapsed the whole module in on itself - RAMFS should really be the simplest of clients, but was built up from a lot of spare body parts. This simplification removes a lot of files.
Delete s.TokHelpSrc - this is autogenerated and was erroneously checked in a few years ago.
Delete unused Help and Syntax.
Try to get the use of BigDir/BigDisc/BigMap more correct.
Tested against FileCore-3_45 and still works.

Version 2.24. Tagged as 'RAMFS-2_24'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >Header

        TTL     "Module header"

        AREA    |RAMFS$$Code|, CODE, READONLY, PIC
Module_BaseAddr

;Module Header
        & 0                     ;no start entry
        & InitEntry     - Module_BaseAddr
        & DieEntry      - Module_BaseAddr
        & 0                     ;no ServiceEntry
        & RamFSTitle    - Module_BaseAddr
        & RamFSHelpString - Module_BaseAddr
        & ComTab        - Module_BaseAddr
        & RamFSSwiBase
        & SwiEntry      - Module_BaseAddr
        & SwiNames      - Module_BaseAddr
        & 0                     ;no SWI name decoding code
 [ International_Help <> 0
        & message_filename - Module_BaseAddr
 |
        & 0
 ]
        & ModFlags       - Module_BaseAddr
        ASSERT  {PC}-Module_BaseAddr=52

RamFSBootText
        =       "Acorn "        ;includes AdfsTitle
RamFSTitle
        Text    "RamFS"


RamFSHelpString
        =       "RamFS",9,9,"$Module_HelpVersion"
        [ Dev
        =       " DEVELOPMENT VERSION"
        ]
        =       0
        ALIGN

ModFlags
 [ :LNOT:No32bitCode
        & ModuleFlag_32bit
 |
        & 0
 ]
        END
@


4.5
log
@Changed vendor in start-up banner back from 'Pace' to 'Acorn'.
Tagged as 'RAMFS-2_19a'
@
text
@@


4.4
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 2.16. Tagged as 'RAMFS-2_16'
@
text
@d43 1
a43 1
        =       "Pace "        ;includes AdfsTitle
@


4.3
log
@Made 32-bit compatible.

Tested and running on a development board.

Version 2.15. Tagged as RAMFS-2_15.
@
text
@d19 2
a20 2
        LEADR   Module_LoadAddr
org
a22 1
        ASSERT  {PC}-org=0
d24 2
a25 2
        & InitEntry     - org
        & DieEntry      - org
d27 3
a29 3
        & RamFSTitle    - org
        & RamFSHelpString - org
        & ComTab        - org
d31 2
a32 2
        & SwiEntry      - org
        & SwiNames      - org
d35 1
a35 1
        & message_filename - org
d39 2
a40 2
        & ModFlags       - org
        ASSERT  {PC}-org=52
d43 1
a43 1
        =       "Acorn "        ;includes AdfsTitle
d49 1
a49 1
        =       "RamFS",9,9
d51 1
a51 3
        =       version," DEVELOPMENT VERSION",0
        |
        =       version," (",date,")",0
d53 1
@


4.2
log
@Ursula branch merged
@
text
@d40 2
a41 1
        ASSERT  {PC}-org=48
d57 7
@


4.1
log
@Initial revision
@
text
@d51 1
a51 1
        =       DevVersion," DEVELOPMENT VERSION",0
@


4.1.4.1
log
@Modified to take advantage of new FileCore (long filenames).  Previously,
RAMFS used FileCore_FloppyStructure, which can only lay out single-zone
E-format discs.  This meant that with a 16M RAM disc, you have a 4096
byte LFAU (cf harddiscs, where the LFAU would not reach this until the
disc size reached 1G byte).

Modified to use FileCore_LayoutStructure (supports long file names, and
multiple disc zones).  Result:  LFAU on a 16M byte RAM disc is now only
256 bytes, which saves alot of space.  RAMFS makes a choice about the
parameters to pass to LayoutStructure, limiting the number of zones to
16 (this can easily be changed).  It chooses the smallest LFAU possible
given this constraint, with a minimum of 256 bytes.

Also checks FileCore version; on FileCore 2.98 or earlier, long file
names are turned off, so it will work on older versions, and still give
the benifit of smaller LFAUs.

As a further optimisation, RAMFS will now ask for a 64K byte directory
cache to be allocated.  This seems to improve performance, especially
with large directories on long file names.

problems:

Due to a Kernel problem with re-entrancy on OS_ChangeDynamicArea, when
running the new filecore, any attempt to shrink the RAM disc will result
in the kernel generating (not returning) the error SWI &6d656d not known.

This completely stuffs the system, as RAMFS has failed to re-init
properly, and any attempts to call OS_ChangeDynamicArea will fail
because the re-entrancy semaphore will be set.

This needs a Kernel Fix (clearing the re-entrancy flag *before* calling
PostShrink instead of after).  Implications of this need to be considered.

Also, this problem might occur on old FileCore if the RMA is full when
RAMFS is re-initialised, and the number of zones in the free space map
increases when the disc gets smaller.

To do:

Ownership of the RAMFS dynamic area should move to RAMFS, since it makes
it easier for RAMFS to be efficient (re-initing RAMFS every time  the size
of the DA changes is not pretty).

RAMFS dynamic area should be made cacheable on SA.

Now that RAMFS supports large RAM discs better (upto 256 megs is feasible)
the maximum size of the RAM disc should be increased.  To avoid the problem
of soaking up all of the virtual address space, however, the initial max
size of the dynamic area should be the same as present, and if there's any
need to grow it, it should be destroyed and re-created.

Need to determine a 'good' choicde of the dir cache size.

Consider changing to 512 or 256 byte sector size?  Would increase space
efficiency in shared objects.
@
text
@d51 1
a51 1
        =       version," DEVELOPMENT VERSION",0
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
