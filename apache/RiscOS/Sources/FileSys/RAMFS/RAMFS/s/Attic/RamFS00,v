head	4.5;
access;
symbols
	RAMFS-2_23:4.4
	RAMFS-2_22:4.3
	RAMFS-2_21:4.3
	RO_5_07:4.3
	RAMFS-2_20:4.3
	RAMFS-2_19a:4.3
	RAMFS-2_19:4.3
	RAMFS-2_18:4.2
	RAMFS-2_17:4.2
	RAMFS-2_16:4.2
	RAMFS-2_15:4.2
	dellis_autobuild_BaseSW:4.2
	Ursula_merge:4.1.4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.2
	nturton_RAMFS-2_11:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.2
	Ursula_RiscPC:4.1.4.2.0.2
	nicke_RAMFS_2_11:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.2
	UrsulaBuild_FinalSoftload:4.1.4.2
	rthornb_UrsulaBuild-12Aug1998:4.1.4.2
	aglover_UrsulaBuild-05Aug1998:4.1.4.2
	rthornb_UrsulaBuild-29Jul1998:4.1.4.2
	rthornb_UrsulaBuild-22Jul1998:4.1.4.2
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.2
	rthornb_UrsulaBuild-07Jul1998:4.1.4.2
	rthornb_UrsulaBuild-17Jun1998:4.1.4.2
	rthornb_UrsulaBuild-03Jun1998:4.1.4.2
	rthornb_UrsulaBuild-27May1998:4.1.4.2
	rthornb_UrsulaBuild-21May1998:4.1.4.2
	sproven_RAMFS-2_14:4.1.4.2
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	sproven_Ursula_2_12:4.1.4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2011.10.14.07.52.39;	author rsprowson;	state dead;
branches;
next	4.4;
commitid	CFv2fFukGmKq4iDv;

4.4
date	2011.10.02.18.02.23;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	uYOa1JZHMXVzPNBv;

4.3
date	2003.04.03.19.00.22;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.30.10.13.08;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.33.47;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.47;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.02.11;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.02.11.18.51.54;	author sproven;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	98.05.19.16.40.14;	author sproven;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.40.44;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.37.08;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Simplify.
Change to use exports from FileCore-3_45.
Delete local copies, which then collapsed the whole module in on itself - RAMFS should really be the simplest of clients, but was built up from a lot of spare body parts. This simplification removes a lot of files.
Delete s.TokHelpSrc - this is autogenerated and was erroneously checked in a few years ago.
Delete unused Help and Syntax.
Try to get the use of BigDir/BigDisc/BigMap more correct.
Tested against FileCore-3_45 and still works.

Version 2.24. Tagged as 'RAMFS-2_24'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >RamFS00

        TTL     "Declarations and workspace allocation"

; Disc Record

        ^ 0
;
SectorSize      # 1     ;log2 sector size
SecsPerTrk      # 1
Heads           # 1     ;n-1 for old adfs floppy format
Density         # 1     ;1/2/4 single double quad

LinkBits        # 1
BitSize         # 1     ;log2 bytes for each bit in map, 0 for old format
RAskew          # 1     ;track to track sector skew for random access

BootOpt         # 1     ;boot option for this disc

LowSector       # 1     ; Lowest sector number on a track and flags:
                ; Bit     Meaning when set
LowSectorMask   * &3f
                ; 0-5     Lowest numbered sector on a track
SequenceSides   bit 6
                ; 6       Tracks are numbered 0..s-1 on side 0, then s..2s-1 on side 1, etc
DoubleStep      bit 7
                ; 7       Double step

Zones           # 1     ;# zones in map
ZoneSpare       # 2     ;# bits in zones after 0 which are not map bits
        ASSERT  (ZoneSpare :MOD: 4)=2

RootDir         aw 4
DiscSize        aw 4

DiscStruc       # 0     ;above entries (except BootOpt) define disc structure

DiscId          aw 2
DiscName        # 10
DiscRecSig      # 0     ;above entries form signature of disc

DiscType        aw 4    ; FileType of disc: FileType_Data indicates
                        ; that the disc is, as yet, unidentified.
                        ; This may occur as a result of the identification
                        ; process failing, or the identification process
                        ; not yet happening. FileType_Data discs have no
                        ; concept of a unique identifier so drive independance
                        ; when accessing them is not possible.

DiscSize2	aw 4	; top 32bits of the disc size.  This combines with
			; DiscSize to give the full size of the disc.  Note
			; that we may have to move DiscStruc to below here
			; so we can compare structures properly.
ShareSize       # 1     ; sharing unit
BigFlag         # 1     ; flag - 0 for small disc, 1 for big
BigFlagBit	* 1	; bit for the big flag
Zones2		# 1	; high byte of number of zones
SharePad	# 1	; padding
DiscVersion	# 4	; version number of disc format
RootDirSize	# 4	; size of root dir
DiscRecSig2     # 0     ;above entries form signature of disc

OldDirSize      * &500
NewDirSize      * &800
BigDirMinSize   * 2048

;MAIN WORKSPACE ALLOCATION

        ^ 0, SB

BufferStart     a4 4    ;THESE TWO MUST BE FIRST
BufferSize      a4 4

ScatterPair     a4 8
FileCorePrivate a4 4

	a4	64

MyPrivate 	a4 4

	a4	64

message_file_block  a4    16      ; File handle for MessageTrans
message_file_open   a4    4       ; Opened message file flag

WorkSize        a4 0

        END
@


4.4
log
@Tidy up.
Get FS_Control reasons from header file rather than local definitions,
Delete lots of FileCore internal stuff from local definitions.
Adjust the 'BigDir' switch use, it's still not quite right as it's being used to select things unrelated to big directories.
Functionally the same as 2.22, tested briefly.

Version 2.23. Tagged as 'RAMFS-2_23'
@
text
@@


4.3
log
@* Fix to format choosing algorithm to ensure final zone has enough space for
  the map & root directory, if they're in the final zone. A 964K RAM disc
  used to crash FileCore because this check wasn't performed.
* Supports new FileCore error scheme.

Version 2.19. Tagged as 'RAMFS-2_19'
@
text
@a20 1
 [ BigDir
a27 2
;only those above & DiscsDrv & Disc Size needed for low level drivers

a76 181

DiscFlags       # 1

FloppyFlag              bit 0
NeedNewIdFlag           bit 1   ; Indicates that when this disc is next updated a new Id aught to be given it too
DiscNotFileCore         bit 2   ; Indicates this isn't a FileCore disc (yet)
DiscNotIdentified       bit 3   ; Indicates this Data disc hasn't been identified as something else yet.

AltMapFlag              bit 5
OldMapFlag              bit 6

OldDirFlag              bit 7   ;set <=> old small dirs


;entries below must be valid even when disc rec is not in use
Priority        # 1     ;0 DISC REC UNUSED
                        ;1 to # floppies -> floppy priority level
                        ;&FF good winnie
DiscsDrv        # 1     ;0-7 => drive in, 8 => not in drive, OR DISC REC UNUSED
DiscUsage       # 1     ;tasks using this disc, if >0 disc cant be forgotten
SzDiscRec       # 0


 |
        ^ 0
;
SectorSize      # 1     ;log2 sector size
SecsPerTrk      # 1
Heads           # 1     ;1 for old adfs floppy format
Density         # 1     ;1/2/4 single double quad

;only those above needed for low level drivers

LinkBits        # 1
BitSize         # 1     ;log2 bytes for each bit in map, 0 for old format
RAskew          # 1     ;track to track sector skew for random access
                        ;file allocation
BootOpt         # 1     ;boot option for this disc

                # 1
Zones           # 1     ;# zones in map
ZoneSpare       # 2     ;# bits in zones after 0 which are not map bits
        ASSERT  (ZoneSpare :MOD: 4)=2
RootDir         aw 4
DiscSize        aw 4

DiscStruc       # 0     ;above entries (except BootOpt) define disc structure

DiscId          aw 2
DiscName        # 10
DiscRecSig      # 0     ;above entries form signature of disc

DiscFlags       # 1
FloppyFlag      bit 0
NeedNewIdFlag   bit 1
AltMapFlag      bit 5


;entries below must be valid even when disc rec is not in use
Priority        # 1     ;0 DISC REC UNUSED
                        ;1 to # floppies -> floppy priority level
                        ;&FF good winnie
DiscsDrv        # 1     ;0-7 => drive in, 8 => not in drive, OR DISC REC UNUSED
DiscUsage       # 1     ;tasks using this disc, if >0 disc cant be forgotten
SzDiscRec       # 0

 ]

;default last word of disc record
;DiscFlags      0  FLOPPIES NEED NeedNewIdFlag SET INITIALLY
;Priority       0
;DiscsDrv       8
;DiscUsage      0
DefDiscRecEnd   * &00080000



       [ NewFs
; New map

                ^ 0
ZoneCheck       # 1
FreeLink        # 2     ;15 bit free space start link
CrossCheck      # 1     ;EORing this byte for all zones should yield &FF

DummyLenBit     bit 31  ;always set

ZoneDiscRecSz   * 60    ;reserve additional bytes
                ASSERT ZoneDiscRecSz>=SzDiscRec

ZoneHead        # ZoneDiscRecSz

Zone0Bits       * ZoneDiscRecSz*8

;zones are followed in RAM by table of one byte of flags per zone

ZoneValid       bit 0
ZoneCompacted   bit 1

        ]

; Dir entry
                ^ 0
NameLen         * 10
DirObName       # NameLen
DirLoad         # 4
DirExec         # 4
DirLen          # 4
DirIndDiscAdd   # 3
OldDirObSeq     # 1

OldDirEntrySz   * {VAR}
        ASSERT  OldDirEntrySz=26

NewDirAtts      * OldDirObSeq
ReadBit         * 1
WriteBit        * 2
IntLockedBit    * 4     ;the locked bit is held in bit 2 internally
ExtLockedBit    * 8     ;but is returned in bit 3 externally
DirBit          * 8
NewDirEntrySz   * {VAR}


; Directory Start
                ^ 0
StartMasSeq     # 1
StartHugo       # 4
DirFirstEntry   # 0

; Old Directory End
                ^ 0
                # -1
DirCheckByte    # 0     ;RETRO DEFINITION was reserved

                # -4
EndHugo         # 0

                # -1
EndMasSeq       # 0

                # -14   ;reserved

DirTitleSz      * 19
                # -DirTitleSz
OldDirTitle     # 0

                # -3
OldDirParent    # 0

                # -NameLen
OldDirName      # 0

                # -1
OldDirLastMark  # 0     ;dummy last entry marker

; New Directory End
                ^ 0
                # -1
        ASSERT  DirCheckByte=@@

                # -4
        ASSERT  EndHugo=@@

                # -1
        ASSERT  EndMasSeq=@@

                # -NameLen
NewDirName      # 0

                # -DirTitleSz
NewDirTitle     # 0

                # -3
NewDirParent    # 0

                # -1    ;reserved
                # -1    ;reserved

                # -1
NewDirLastMark  # 0     ;dummy last entry marker

a78 11

OldDirTabSz     * (OldDirSize-DirFirstEntry+OldDirLastMark)
NewDirTabSz     * (NewDirSize-DirFirstEntry+NewDirLastMark)
                ASSERT  OldDirTabSz :MOD: OldDirEntrySz = 0
                ASSERT  NewDirTabSz :MOD: NewDirEntrySz = 0
OldDirEntries   * OldDirTabSz / OldDirEntrySz
NewDirEntries   * NewDirTabSz / NewDirEntrySz

        ASSERT  OldDirEntries=47
        ASSERT  NewDirEntries=77

a80 9
;Filing system control reason codes

FscAddFs        * 12
FscSelectFs     * 14
FscRemoveFs     * 16
FscAdd2ndFs     * 17
FscReadFileType * 18


@


4.2
log
@Ursula branch merged
@
text
@d274 2
@


4.1
log
@Initial revision
@
text
@d21 1
d23 83
a105 1
; 
d139 1
a139 1
Priority        # 1     ;0 DISC REC UNUSED 
d146 2
d292 7
@


4.1.4.1
log
@Modified to take advantage of new FileCore (long filenames).  Previously,
RAMFS used FileCore_FloppyStructure, which can only lay out single-zone
E-format discs.  This meant that with a 16M RAM disc, you have a 4096
byte LFAU (cf harddiscs, where the LFAU would not reach this until the
disc size reached 1G byte).

Modified to use FileCore_LayoutStructure (supports long file names, and
multiple disc zones).  Result:  LFAU on a 16M byte RAM disc is now only
256 bytes, which saves alot of space.  RAMFS makes a choice about the
parameters to pass to LayoutStructure, limiting the number of zones to
16 (this can easily be changed).  It chooses the smallest LFAU possible
given this constraint, with a minimum of 256 bytes.

Also checks FileCore version; on FileCore 2.98 or earlier, long file
names are turned off, so it will work on older versions, and still give
the benifit of smaller LFAUs.

As a further optimisation, RAMFS will now ask for a 64K byte directory
cache to be allocated.  This seems to improve performance, especially
with large directories on long file names.

problems:

Due to a Kernel problem with re-entrancy on OS_ChangeDynamicArea, when
running the new filecore, any attempt to shrink the RAM disc will result
in the kernel generating (not returning) the error SWI &6d656d not known.

This completely stuffs the system, as RAMFS has failed to re-init
properly, and any attempts to call OS_ChangeDynamicArea will fail
because the re-entrancy semaphore will be set.

This needs a Kernel Fix (clearing the re-entrancy flag *before* calling
PostShrink instead of after).  Implications of this need to be considered.

Also, this problem might occur on old FileCore if the RMA is full when
RAMFS is re-initialised, and the number of zones in the free space map
increases when the disc gets smaller.

To do:

Ownership of the RAMFS dynamic area should move to RAMFS, since it makes
it easier for RAMFS to be efficient (re-initing RAMFS every time  the size
of the DA changes is not pretty).

RAMFS dynamic area should be made cacheable on SA.

Now that RAMFS supports large RAM discs better (upto 256 megs is feasible)
the maximum size of the RAM disc should be increased.  To avoid the problem
of soaking up all of the virtual address space, however, the initial max
size of the dynamic area should be the same as present, and if there's any
need to grow it, it should be destroyed and re-created.

Need to determine a 'good' choicde of the dir cache size.

Consider changing to 512 or 256 byte sector size?  Would increase space
efficiency in shared objects.
@
text
@a20 1
 [ BigDir
d22 1
a22 83
;
SectorSize      # 1     ;log2 sector size
SecsPerTrk      # 1
Heads           # 1     ;n-1 for old adfs floppy format
Density         # 1     ;1/2/4 single double quad

;only those above & DiscsDrv & Disc Size needed for low level drivers

LinkBits        # 1
BitSize         # 1     ;log2 bytes for each bit in map, 0 for old format
RAskew          # 1     ;track to track sector skew for random access

BootOpt         # 1     ;boot option for this disc

LowSector       # 1     ; Lowest sector number on a track and flags:
                ; Bit     Meaning when set
LowSectorMask   * &3f
                ; 0-5     Lowest numbered sector on a track
SequenceSides   bit 6
                ; 6       Tracks are numbered 0..s-1 on side 0, then s..2s-1 on side 1, etc
DoubleStep      bit 7
                ; 7       Double step

Zones           # 1     ;# zones in map
ZoneSpare       # 2     ;# bits in zones after 0 which are not map bits
        ASSERT  (ZoneSpare :MOD: 4)=2

RootDir         aw 4
DiscSize        aw 4

DiscStruc       # 0     ;above entries (except BootOpt) define disc structure

DiscId          aw 2
DiscName        # 10
DiscRecSig      # 0     ;above entries form signature of disc

DiscType        aw 4    ; FileType of disc: FileType_Data indicates
                        ; that the disc is, as yet, unidentified.
                        ; This may occur as a result of the identification
                        ; process failing, or the identification process
                        ; not yet happening. FileType_Data discs have no
                        ; concept of a unique identifier so drive independance
                        ; when accessing them is not possible.

DiscSize2	aw 4	; top 32bits of the disc size.  This combines with
			; DiscSize to give the full size of the disc.  Note
			; that we may have to move DiscStruc to below here
			; so we can compare structures properly.
ShareSize       # 1     ; sharing unit
BigFlag         # 1     ; flag - 0 for small disc, 1 for big
BigFlagBit	* 1	; bit for the big flag
Zones2		# 1	; high byte of number of zones
SharePad	# 1	; padding
DiscVersion	# 4	; version number of disc format
RootDirSize	# 4	; size of root dir
DiscRecSig2     # 0     ;above entries form signature of disc


DiscFlags       # 1

FloppyFlag              bit 0
NeedNewIdFlag           bit 1   ; Indicates that when this disc is next updated a new Id aught to be given it too
DiscNotFileCore         bit 2   ; Indicates this isn't a FileCore disc (yet)
DiscNotIdentified       bit 3   ; Indicates this Data disc hasn't been identified as something else yet.

AltMapFlag              bit 5
OldMapFlag              bit 6

OldDirFlag              bit 7   ;set <=> old small dirs


;entries below must be valid even when disc rec is not in use
Priority        # 1     ;0 DISC REC UNUSED
                        ;1 to # floppies -> floppy priority level
                        ;&FF good winnie
DiscsDrv        # 1     ;0-7 => drive in, 8 => not in drive, OR DISC REC UNUSED
DiscUsage       # 1     ;tasks using this disc, if >0 disc cant be forgotten
SzDiscRec       # 0


 |
        ^ 0
;
d56 1
a56 1
Priority        # 1     ;0 DISC REC UNUSED
a62 2
 ]

a206 1
MyPrivate 	a4 4
@


4.1.4.2
log
@RAMFS doesn't initialise the RAM disc any more, and relies on the kernel
doing so.
@
text
@a291 3

	a4	64

a292 3

	a4	64

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
