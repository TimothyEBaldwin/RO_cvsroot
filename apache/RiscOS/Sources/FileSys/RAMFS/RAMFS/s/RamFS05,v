head	4.7;
access;
symbols
	RAMFS-2_32:4.7
	RAMFS-2_31:4.7
	RAMFS-2_30:4.6
	RAMFS-2_29:4.6
	RAMFS-2_28:4.6
	RAMFS-2_27:4.6
	RAMFS-2_26:4.6
	RAMFS-2_25:4.6
	RAMFS-2_24:4.6
	RAMFS-2_23:4.5
	RAMFS-2_22:4.5
	RAMFS-2_21:4.4
	RO_5_07:4.4
	RAMFS-2_20:4.4
	RAMFS-2_19a:4.4
	RAMFS-2_19:4.4
	RAMFS-2_18:4.4
	RAMFS-2_17:4.4
	RAMFS-2_16:4.3
	RAMFS-2_15:4.3
	dellis_autobuild_BaseSW:4.2
	Ursula_merge:4.1.4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.4
	nturton_RAMFS-2_11:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	nicke_RAMFS_2_11:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	sproven_RAMFS-2_14:4.1.4.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	sproven_Ursula_2_12:4.1.4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2015.08.31.19.38.36;	author jlee;	state Exp;
branches;
next	4.6;
commitid	ikAT0kJgqtiHqszy;

4.6
date	2011.10.14.07.52.39;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	CFv2fFukGmKq4iDv;

4.5
date	2011.08.04.21.35.57;	author jlee;	state Exp;
branches;
next	4.4;
commitid	iWaSX4JgaHfqUeuv;

4.4
date	2001.05.14.16.25.46;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2000.11.24.10.59.22;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.30.10.13.08;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.33.47;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.47;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.02.13;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.02.11.18.51.55;	author sproven;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.40.45;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.37.11;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Add support for the RAMFS dynamic area potentially being a PMP
Detail:
  s/Defns - Add PMP switch to switch between PMP-compatible code and old code. Add BigDisc2 switch to enable my (non-functional) support for RAM discs > 512MB. Fix broken debug switches (Hdr:Proc already gets included somewhere), and add PMP debug switch.
  s/RamFS05 - Replace generic BlockMove function with BlockRead/BlockWrite functions which map in pages on demand, using a basic LRU cache to reduce page table thrashing.
  s/RamFS15 - Updated to use BlockRead/BlockWrite functions, and BigDisc2 support
  s/RamFS50 - BigDisc2 code. PMP-related initialisation.
Admin:
  Tested on Pandaboard, with and without PMP dynamic area
  Note that due to nonfunctional support for RAM discs >512MB, the resize handler in the kernel currently places a 512MB limit on the DA.


Version 2.31. Tagged as 'RAMFS-2_31'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >RamFS05

        TTL     "Optimised block move"

; BlockMove
; ---------
; Can't cope with overlapping source and dest
; Entry: R0 = Source start
;        R1 = Dest start
;        R2 = Byte length
BlockMove ROUT
      [ Debug9
        DLINE   "source  |dest    |length  - enter BlockMove"
        DREG    R0, " ",cc
        DREG    R1, " ",cc
        DREG    R2, " "
      ]
        MOVS    R2, R2
        MOVEQ   PC, LR
        Push    "R0-R12, LR"
        
        ; bytes at a time until source aligned
05                      
        TSTNE   R0, #2_11
        LDRNEB  LR, [R0], #1
        STRNEB  LR, [R1], #1
        SUBNES  R2, R2, #1
        BNE     %BT05

        ANDS    LR, R1, #2_11                   ; dest mis-alignment
        BEQ     %FT30                           ; same alignment

        ; mis-aligned move
        CMP     R2, #10*4                       ; enough left to worth being clever ?
        BLO     %FT40                           ; if not
        SUB     R2, R2, #10*4

        LDR     R3, [R0], #4                    ; get a word from source
10
        STRB    R3, [R1], #1                    ; put bytes to dest until aligned
        MOV     R3, R3, LSR #8
        TSTS    R1, #2_11
        BNE     %BT10
        MOV     LR, LR, LSL #3                  ; # bits left in R3
        RSB     R12, LR, #32                    ; # bits free in R3
15
        LDMIA   R0!,{R4-R11}                    ; load 8 words
                                                ; do 8 word shift, spare bits in R3
        ORR     R3, R3, R4, LSL LR
        MOV     R4, R4, LSR R12
                
        ORR     R4, R4, R5, LSL LR
        MOV     R5, R5, LSR R12
                
        ORR     R5, R5, R6, LSL LR
        MOV     R6, R6, LSR R12
                
        ORR     R6, R6, R7, LSL LR
        MOV     R7, R7, LSR R12

        ORR     R7, R7, R8, LSL LR
        MOV     R8, R8, LSR R12
                
        ORR     R8, R8, R9, LSL LR
        MOV     R9, R9, LSR R12
                
        ORR     R9, R9, R10,LSL LR
        MOV     R10,R10,LSR R12
                
        ORR     R10,R10,R11,LSL LR
        STMIA   R1!, {R3-R10}
        MOV     R3, R11, LSR R12

        SUBS    R2, R2, #8*4
        BPL     %BT15
        ADD     R2, R2, #9*4
20
        ; write out spare bytes from shift
        STRB    R3, [R1], #1
        MOV     R3, R3, LSR #8
        SUBS    LR, LR, #8
        BNE     %BT20
        B       %FT40                           ; do any bytes left

        ; aligned move
25
        LDMIA   R0!, {R3-R12, LR}               ; move 11 aligned words at a time
        STMIA   R1!, {R3-R12, LR}         
        LDMIA   R0!, {R3-R12, LR}               ; move 11 aligned words at a time
        STMIA   R1!, {R3-R12, LR}         
30
        SUBS    R2, R2, #22*4
        BPL     %BT25
        ADDS    R2, R2, #(22*4)-(3*4)
35
        LDMCSIA R0!, {R3-R5}
        STMCSIA R1!, {R3-R5}
        SUBCSS  R2, R2, #3*4
        BCS     %BT35
        ADD     R2, R2, #3*4
40
        ; move any odd bytes left
        SUBS    R2, R2, #1
        LDRPLB  LR, [R0],#1
        STRPLB  LR, [R1],#1
        BPL     %BT40
        Pull    "R0-R12, PC"

 [ PMP
; Entry: R0 = Source start (byte disc address)
;        R1 = Dest start (RAM address)
;        R2 = Byte length
BlockRead ROUT
        TEQ     r2, #0
        MOVEQ   pc, lr
        Entry   "r0-r5"
        MOV     r3, r0
        MOV     r4, r2
10
        BL      GetPageChunk
        BVS     %FT90
        MOV     r0, r5
        BL      BlockMove
        ADD     r1, r1, r2
        CMP     r4, #0
        BNE     %BT10
        EXIT
90
        FRAMSTR r0
        EXIT

; Entry: R0 = Source start (RAM address)
;        R1 = Dest start (byte disc address)
;        R2 = Byte length
BlockWrite ROUT
        TEQ     r2, #0
        MOVEQ   pc, lr
        Entry   "r0-r5"
        MOV     r3, r1
        MOV     r4, r2
10
        BL      GetPageChunk
        BVS     %FT90
        MOV     r1, r5
        BL      BlockMove
        ADD     r0, r0, r2
        CMP     r4, #0
        BNE     %BT10
        EXIT
90
        FRAMSTR r0
        EXIT

GetPageChunk ROUT
        Entry   "r0-r1,r6-r9"
        ; In:
        ; r3 = byte disc address
        ; r4 = byte length
        ; Out:
        ; r2 = chunk length
        ; r3 advanced
        ; r4 reduced
        ; r5 -> chunk
      [ DebugPMP
        DREG    r3,,cc
        DREG    r4,", ",cc
        DLINE   "*>GetPageChunk"
      ]
        LDR     r0, LRUCache
        LDR     r1, PMPSize
        CMP     r0, #0
        ADD     r1, r0, r1, LSL #3
        BEQ     %FT90
        ; First, find/create logical mapping of page
10
        LDMIA   r0, {r6, r7}            ; Get log page index, phys page index
        STMIA   r0!, {r8, r9}           ; Write previous entry over this one
        TEQ     r7, r3, LSR #12         ; Found the page?
        BEQ     %FT30
        MOV     r8, r6                  ; Shuffle things down
        TEQ     r0, r1
        MOV     r9, r7
        BNE     %BT10
        ; Didn't find it in the cache
        ; r8,r9 / r6,r7 = page to replace (last page in cache)
      [ DebugPMP
        DLINE   "Mapping in"
      ]
        MOV     r7, r3, LSR #12
        ; Remap the page
        LDR     lr, PageFlags
        Push    "r3,r6,r7,lr"           ; Page block
        MOV     r0, #22                 ; PMP_LogOp
        MOV     r1, #ChangeDyn_RamFS
        ADD     r2, sp, #4
        MOV     r3, #1
        SWI     XOS_DynamicArea
        LDR     r3, [sp], #16           ; Restore r3, junk page block
        BVS     %FT80
30
      [ DebugPMP
        DREG    r6,,cc
        DREG    r7,", ",cc
        DLINE   " Using this page"
      ]
        ; Found it in the cache
        ; r6,r7 = details
        LDR     r0, LRUCache
        STMIA   r0, {r6, r7}            ; Move entry to front of cache
        ; Now work out how much of a chunk we can return
        MOV     r0, r3, LSL #32-12
        MOV     r0, r0, LSR #32-12      ; Offset into page
        ADD     r1, r0, r4              ; End address
        CMP     r1, #4096
        MOVHI   r1, #4096
        SUB     r2, r1, r0              ; Length available
        ADD     r3, r3, r2
        SUB     r4, r4, r2
        LDR     r1, BufferStart
        ADD     r1, r1, r6, LSL #12     ; Base of page
        ADD     r5, r1, r0              ; Data pointer
      [ DebugPMP
        DREG    r2,,cc
        DREG    r3,", ",cc
        DREG    r4,", ",cc
        DREG    r5,", ",cc
        DLINE   "<*GetPageChunk"
      ]
        CLRV
        EXIT
80
        FRAMSTR r0
        EXIT

90
        ; PMP not in use.
        ; Just offset by DA base address and return the full block.
        LDR     r5, BufferStart
        MOV     r2, r4
        ADD     r5, r5, r3
        ADD     r3, r3, r4
        MOV     r4, #0
      [ DebugPMP
        DREG    r2,,cc
        DREG    r3,", ",cc
        DREG    r4,", ",cc
        DREG    r5,", ",cc
        DLINE   "<*GetPageChunk"
      ]
        EXIT
 |
BlockRead * BlockMove
BlockWrite * BlockMove
 ]

        END
@


4.6
log
@Simplify.
Change to use exports from FileCore-3_45.
Delete local copies, which then collapsed the whole module in on itself - RAMFS should really be the simplest of clients, but was built up from a lot of spare body parts. This simplification removes a lot of files.
Delete s.TokHelpSrc - this is autogenerated and was erroneously checked in a few years ago.
Delete unused Help and Syntax.
Try to get the use of BigDir/BigDisc/BigMap more correct.
Tested against FileCore-3_45 and still works.

Version 2.24. Tagged as 'RAMFS-2_24'
@
text
@d123 147
@


4.5
log
@Make compatible with zero page relocation
Detail:
  s/RamFS, s/RamFS05 - Updated debug code to use OS_ReadSysInfo 6 for getting IRQsema pointer
Admin:
  Tested on rev A2 BB-xM


Version 2.22. Tagged as 'RAMFS-2_22'
@
text
@d15 1
a15 1
;> RamFS05
d17 1
a17 1
 [ Dev
a18 134
        ; Ugly but necessary because debug macros can get called before
        ; workspace is set up
        ; Exits NE if IRQsema <> 0
        MACRO
        CheckIRQsema
        Push    "r0-r2,lr"
        MOV     r0, #6
        MOV     r1, #0
        MOV     r2, #OSRSI6_IRQsema
        SWI     XOS_ReadSysInfo
        MOVVS   r2, #0
        CMP     r2, #0
        LDREQ   r2, =Legacy_IRQsema
        LDR     r2, [r2]
        TEQ     r2, #0
        Pull    "r0-r2,lr"        
        MEND

PHEX
 Push   "LR"
 SavePSR R3
 ORR    R0, R0, #SVC_mode
 RestPSR R0,,c          ;go to SVC mode preserving flags
 Push   "LR"
 [ SpoolOff
 BL     SpoolOff
 ]
 MOV    R1, #32-4
PHLOOP
 MOV    R0, R2, LSR R1
 AND    R0, R0, #&F
 CMPS   R0, #10
 ADDCC  R0, R0, #"0"
 ADDCS  R0, R0, #"A"-10
 SWI    OS_WriteC
 SUBS   R1, R1, #4
 BPL    PHLOOP
 MOV    R0, #" "
 SWI    OS_WriteC
 [ SpoolOff
 BL     SpoolOn
 ]
 Pull   "LR"
 RestPSR R3
 Pull   "PC"

 [ SpoolOff
SpoolOff
 EntryS "R0-R2"
 MOV    R0, #3
 MOV    R1, #&10
 MOV    R2, #&EF
 SWI    OS_Byte
 EXITS

SpoolOn
 EntryS "R0-R2"
 MOV    R0, #3
 MOV    R1, #0
 MOV    R2, #&EF
 SWI    OS_Byte
 EXITS
 ]

 [ {FALSE}
Mess1                   ;R0,R1,LR stacked
 SavePSR R0             ;save PSR
 MOV    R1, LR          ;save link
 [ :LNOT: IrqDebug
 CheckIRQsema
 MOVNE  PC, R1          ;skip if IRQ thread, return NE
 ]

 BIC    LR, R0, #3
 ORR    LR, LR, #SVC_mode :OR: Z_bit
 RestPSR LR,,cf         ;go to supervisor mode, preserve FI, set EQ
 nop                    ;delay for mode change
 Push    "LR"
 [ SpoolOff
 BL      SpoolOff
 ]
 MOV    PC, R1
 ]

 ]

; ======
; ClearV
; ======

ClearV
  [ No32bitCode
        BICS    PC, LR, #V_bit
  |
        Push    "LR"
        CLRPSR  V_bit, LR
        Pull    "PC"
  ]

; ====
; SetV
; ====

SetV
  [ No32bitCode
        ORRS    PC, LR, #V_bit
  |
        Push    "LR"
        SETPSR  V_bit, LR
        Pull    "PC"
  ]


; ========
; SetVOnR0
; ========

SetVOnR0
  [ No32bitCode
        CMPS    R0, #0
        BICEQS  PC, LR, #V_bit
        ORRNES  PC, LR, #V_bit
  |
        Push    "LR"
        CMPS    R0, #0
        MRS     LR, CPSR
        BICEQ   LR, LR, #V_bit
        ORRNE   LR, LR, #V_bit
        MSR     CPSR_f, LR
        Pull    "PC"
  ]


; =========
d20 5
a24 5
; =========

; entry: R0=source start, R1=dest start, R2=length
; can't cope with overlapping source and dest

d26 25
a50 6
 [ Debug9
 DLINE   "*source |dest    |length  - enter BlockMove"
 DREG  R0, " ",cc
 DREG  R1, " ",cc
 DREG  R2, " "
 ]
d52 1
a52 20
 Push   "R0-R12,LR"
 TEQS   R2, #0
 Pull   "R0-R12,PC",EQ
05                      ;bytes at a time until source aligned
 TSTNE  R0, #2_11
 LDRNEB LR, [R0],#1
 STRNEB LR, [R1],#1
 SUBNES R2, R2, #1
 BNE    %BT05

 ANDS   LR, R1, #2_11   ;dest mis-alignment
 BEQ    %FT30           ;same alignment

;mis-aligned move

 CMP    R2, #10*4        ;enough left to worth being clever ?
 BLO    %FT40           ;if not
 SUB    r2, r2, #10*4

 LDR    R3, [R0], #4    ;get a word from source
d54 6
a59 6
 STRB   R3, [R1], #1    ;put bytes to dest until aligned
 MOV    R3, R3, LSR #8
 TSTS   R1, #2_11
 BNE    %BT10
 MOV    LR, LR, LSL #3  ;# bits left in R3
 RSB    R12,LR,#32      ;# bits free in R3
d61 37
a97 38
 LDMIA  R0!,{R4-R11}    ;load 8 words
                        ;do 8 word shift, spare bits in R3
 ORR    R3, R3, R4, LSL LR
 MOV    R4, R4, LSR R12

 ORR    R4, R4, R5, LSL LR
 MOV    R5, R5, LSR R12

 ORR    R5, R5, R6, LSL LR
 MOV    R6, R6, LSR R12

 ORR    R6, R6, R7, LSL LR
 MOV    R7, R7, LSR R12

 ORR    R7, R7, R8, LSL LR
 MOV    R8, R8, LSR R12

 ORR    R8, R8, R9, LSL LR
 MOV    R9, R9, LSR R12

 ORR    R9, R9, R10,LSL LR
 MOV    R10,R10,LSR R12

 ORR    R10,R10,R11,LSL LR
 STMIA  R1!,{R3-R10}
 MOV    R3, R11,LSR R12

 SUBS   R2, R2, #8*4
 BPL    %BT15
 ADD    R2, R2, #9*4
20                              ;write out spare bytes from shift
 STRB   R3, [R1], #1
 MOV    R3, R3, LSR #8
 SUBS   LR, LR, #8
 BNE    %BT20
 B      %FT40           ;do any bytes left

;aligned move
d99 1
d101 4
a104 4
 LDMIA  R0!,{R3-R12, LR}    ;move 11 aligned words at a time
 STMIA  R1!,{R3-R12, LR}
 LDMIA  R0!,{R3-R12, LR}    ;move 11 aligned words at a time
 STMIA  R1!,{R3-R12, LR}
d106 3
a108 3
 SUBS   R2, R2, #22*4
 BPL    %BT25
 ADDS   R2, R2, #(22*4)-(3*4)
d110 5
a114 60
 LDMCSIA R0!, {R3-R5}
 STMCSIA R1!, {R3-R5}
 SUBCSS R2, R2, #3*4
 BCS    %BT35
 ADD    R2, R2, #3*4
40                              ;move any odd bytes left
 SUBS   R2, R2, #1
 LDRPLB LR, [R0],#1
 STRPLB LR, [R1],#1
 BPL    %BT40
 Pull   "R0-R12,PC"


 [ F

; =======
; ZeroRam
; =======

; Clear a block of RAM to 0

; entry: R0=start, R1=length

ZeroRam ROUT

 [ Debug9
 DLINE   "*start   |length  - enter ZeroRam"
 DREG   R0, " ",cc
 DREG   R1, " ",cc
 ]

 Push   "R0-R12,LR"
 TEQS   R1, #0
 BEQ    %FT95
 MOV    R2, #0
10                              ;byte at a time until aligned
 TSTS   R0, #2_11
 STRNEB R2, [R0],#1
 SUBNES R1, R1, #1
 BNE    %BT10

 SUBS   R1, R1, #12*4   ;enough to be worth being clever
 BLO    %FT30           ; if not
 MOV    R3, #0
 MOV    R4, #0
 MOV    R5, #0
 MOV    R6, #0
 MOV    R7, #0
 MOV    R8, #0
 MOV    R9, #0
 MOV    R10,#0
 MOV    R11,#0
 MOV    R12,#0
 MOV    LR, #0
20
 STMIA  R0!,{R2-R12,LR}
 SUBS   R1, R1, #12*4
 BPL    %BT20
30
 ADD    R1, R1, #12*4
d116 6
a121 10
 SUBS   R1, R1, #1
 STRPLB R2,[R0],#1
 BPL    %BT40
95
 [ Debug9
 mess   ,"*leave ZeroRam",NL
 ]
 Pull   "R0-R12,PC"

 ]
@


4.4
log
@Fixed an mrs for ObjAsm

Version 2.17. Tagged as 'RAMFS-2_17'
@
text
@d18 19
d88 1
a88 3
 MOV    LR, #IRQsema
 LDR    LR, [LR]
 TEQS   LR, #0
@


4.3
log
@Made 32-bit compatible.

Tested and running on a development board.

Version 2.15. Tagged as RAMFS-2_15.
@
text
@d127 1
a127 1
        mrs    ,LR, CPSR
d130 1
a130 1
        msr    ,CPSR_f, LR
@


4.2
log
@Ursula branch merged
@
text
@d19 2
a20 2
 MOV    R3, LR
 BIC    R0, R3, #3
d22 1
a22 1
 TEQP   PC, R0          ;go to SVC mode preserving flags
d43 2
a44 1
 MOVS   PC, R3
d48 1
a48 1
 Push   "R0-R2,LR"
d53 1
a53 1
 Pull   "R0-R2,PC",,^
d56 1
a56 1
 Push   "R0-R2,LR"
d61 1
a61 1
 Pull   "R0-R2,PC",,^
d66 1
a66 1
 MOV    R0, PC          ;save PSR
d77 1
a77 1
 TEQP   PC, LR          ;go to supervisor mode, preserve FI, set EQ
d93 7
a99 1
 BICS   PC, LR, #V_bit
d106 7
a112 1
 ORRS   PC, LR, #V_bit
d120 13
a132 34
 CMPS   R0, #0
 BICEQS PC, LR, #V_bit
 ORRNES PC, LR, #V_bit


; ======
; Divide
; ======

; entry: R0=Numerator, R1=Denominator
; exit:  R0=Result, R1=Remainder

Divide  ROUT
 Push   "R2,LR"

 MOV    LR,R1           ;temp = den
 CMPS   LR,R0,LSR #1    ;shift temp left unless it would be > num
10
 MOVLS  LR,LR,LSL #1
 CMPLS  LR,R0,LSR #1
 BLS    %BT10
 MOV    R2,#0           ;init result
20
 CMPS   R0,LR           ;if subtraction possible
 SUBCS  R0,R0,LR        ; do it
 ADC    R2,R2,R2        ;shift bit into result
 MOV    LR,LR,LSR #1    ;move temp right
 CMPS   LR,R1           ;loop if not done
 BHS    %BT20

 MOV    R1,R0           ;mod
 MOV    R0,R2           ;div

 Pull   "R2,PC",,^
d152 1
a152 1
 Pull   "R0-R12,PC",EQ,^
d237 1
a237 1
 Pull   "R0-R12,PC",,^
d240 1
a240 1
 [ T
d295 1
a295 1
 Pull   "R0-R12,PC",,^
@


4.1
log
@Initial revision
@
text
@d63 1
d83 1
d152 4
a155 5
 mess   ,"*source |dest    |length  - enter BlockMove",NL
 wrhex  R0
 wrhex  R1
 wrhex  R2
 mess   ,NL
d248 1
a248 1
 [ F
d261 3
a263 4
 mess   ,"*start   |length  - enter ZeroRam",NL
 wrhex  R0
 wrhex  R1
 mess   ,NL
@


4.1.4.1
log
@Modified to take advantage of new FileCore (long filenames).  Previously,
RAMFS used FileCore_FloppyStructure, which can only lay out single-zone
E-format discs.  This meant that with a 16M RAM disc, you have a 4096
byte LFAU (cf harddiscs, where the LFAU would not reach this until the
disc size reached 1G byte).

Modified to use FileCore_LayoutStructure (supports long file names, and
multiple disc zones).  Result:  LFAU on a 16M byte RAM disc is now only
256 bytes, which saves alot of space.  RAMFS makes a choice about the
parameters to pass to LayoutStructure, limiting the number of zones to
16 (this can easily be changed).  It chooses the smallest LFAU possible
given this constraint, with a minimum of 256 bytes.

Also checks FileCore version; on FileCore 2.98 or earlier, long file
names are turned off, so it will work on older versions, and still give
the benifit of smaller LFAUs.

As a further optimisation, RAMFS will now ask for a 64K byte directory
cache to be allocated.  This seems to improve performance, especially
with large directories on long file names.

problems:

Due to a Kernel problem with re-entrancy on OS_ChangeDynamicArea, when
running the new filecore, any attempt to shrink the RAM disc will result
in the kernel generating (not returning) the error SWI &6d656d not known.

This completely stuffs the system, as RAMFS has failed to re-init
properly, and any attempts to call OS_ChangeDynamicArea will fail
because the re-entrancy semaphore will be set.

This needs a Kernel Fix (clearing the re-entrancy flag *before* calling
PostShrink instead of after).  Implications of this need to be considered.

Also, this problem might occur on old FileCore if the RMA is full when
RAMFS is re-initialised, and the number of zones in the free space map
increases when the disc gets smaller.

To do:

Ownership of the RAMFS dynamic area should move to RAMFS, since it makes
it easier for RAMFS to be efficient (re-initing RAMFS every time  the size
of the DA changes is not pretty).

RAMFS dynamic area should be made cacheable on SA.

Now that RAMFS supports large RAM discs better (upto 256 megs is feasible)
the maximum size of the RAM disc should be increased.  To avoid the problem
of soaking up all of the virtual address space, however, the initial max
size of the dynamic area should be the same as present, and if there's any
need to grow it, it should be destroyed and re-created.

Need to determine a 'good' choicde of the dir cache size.

Consider changing to 512 or 256 byte sector size?  Would increase space
efficiency in shared objects.
@
text
@a62 1
 [ {FALSE}
a81 1
 ]
d150 5
a154 4
 DLINE   "*source |dest    |length  - enter BlockMove"
 DREG  R0, " ",cc
 DREG  R1, " ",cc
 DREG  R2, " "
d247 1
a247 1
 [ T
d260 4
a263 3
 DLINE   "*start   |length  - enter ZeroRam"
 DREG   R0, " ",cc
 DREG   R1, " ",cc
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
