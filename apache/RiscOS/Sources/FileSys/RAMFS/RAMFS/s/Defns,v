head	4.10;
access;
symbols
	RAMFS-2_32:4.10
	RAMFS-2_31:4.10
	RAMFS-2_30:4.8
	RAMFS-2_29:4.8
	RAMFS-2_28:4.7
	RAMFS-2_27:4.7
	RAMFS-2_26:4.5
	RAMFS-2_25:4.4
	RAMFS-2_24:4.4
	RAMFS-2_23:4.3
	RAMFS-2_22:4.2
	RAMFS-2_21:4.2
	RO_5_07:4.2
	RAMFS-2_20:4.2
	RAMFS-2_19a:4.2
	RAMFS-2_19:4.2
	RAMFS-2_18:4.2
	RAMFS-2_17:4.2
	RAMFS-2_16:4.2
	RAMFS-2_15:4.2
	dellis_autobuild_BaseSW:4.2
	Ursula_merge:4.1.4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.2
	nturton_RAMFS-2_11:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.2
	Ursula_RiscPC:4.1.4.2.0.2
	nicke_RAMFS_2_11:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.2
	UrsulaBuild_FinalSoftload:4.1.4.2
	rthornb_UrsulaBuild-12Aug1998:4.1.4.2
	aglover_UrsulaBuild-05Aug1998:4.1.4.2
	rthornb_UrsulaBuild-29Jul1998:4.1.4.2
	rthornb_UrsulaBuild-22Jul1998:4.1.4.2
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.2
	rthornb_UrsulaBuild-07Jul1998:4.1.4.2
	rthornb_UrsulaBuild-17Jun1998:4.1.4.2
	rthornb_UrsulaBuild-03Jun1998:4.1.4.2
	rthornb_UrsulaBuild-27May1998:4.1.4.2
	rthornb_UrsulaBuild-21May1998:4.1.4.2
	sproven_RAMFS-2_14:4.1.4.2
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	sproven_Ursula_2_12:4.1.4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.10
date	2015.08.31.20.43.05;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	Efjx1ZgfDmosMszy;

4.9
date	2015.08.31.19.38.36;	author jlee;	state Exp;
branches;
next	4.8;
commitid	ikAT0kJgqtiHqszy;

4.8
date	2013.07.18.21.06.35;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	FChADQOJMIqjNZXw;

4.7
date	2012.03.19.08.13.08;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	3mmZWaAeMZvs8tXv;

4.6
date	2012.03.19.01.03.52;	author bavison;	state Exp;
branches;
next	4.5;
commitid	1Az1q9lTYiVmLqXv;

4.5
date	2011.11.20.15.47.05;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	1hJBclyNJUbrv5Iv;

4.4
date	2011.10.14.07.52.38;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	CFv2fFukGmKq4iDv;

4.3
date	2011.10.02.18.02.23;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	uYOa1JZHMXVzPNBv;

4.2
date	2000.05.30.10.13.08;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.33.46;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.46;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.02.00;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.02.11.18.51.48;	author sproven;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	98.05.19.16.40.13;	author sproven;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.40.37;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.37.02;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Use FileCore terminology for clarity
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >Defns

        TTL     "Declarations and workspace allocation"

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Switches
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        GBLL    BigDir                  ; if this is true then we use big directories
BigDir  SETL    {TRUE}

        GBLL    BigDisc                 ; if this is true then we use new filecore
BigDisc SETL    {TRUE}

        GBLL    BigDisc2                ; WIP support for ram disc size > 512MB
BigDisc2 SETL   {FALSE}

        GBLL    BigMaps                 ; support longer idlen
BigMaps SETL    {TRUE}

        GBLL    PMP                     ; Support use of physical memory pool DA. Code remains compatible with non-PMP DA.
PMP     SETL    {TRUE}

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Data areas & register allocation
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SB              RN 12

                ^ 0, SB
BufferStart     # 4
BufferSize      # 4
ScatterPair     # 8
FileCorePrivate # 4
                AlignSpace 64
MyPrivate       # 4
                AlignSpace 64
message_file_block  # 16                ; File handle for MessageTrans
message_file_open   # 4                 ; Opened message file flag
 [ PMP
PageFlags       # 4                     ; Flags to use when mapping pages
PMPSize         # 4                     ; Logical size of PMP (page count)
LRUCache        # 4                     ; Array of (log page, phys page) pairs
 ]
WorkSize        # 0

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Debugging
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        GBLL    Dev                     ; Extra code to do postmortem when things go bang
Dev     SETL    {FALSE}

        GBLL    Debug                   ; Debugging printout
Debug   SETL    {FALSE} :LOR: Dev

        MACRO
$a      switch  $b
        GBLL    $a
$a      SETL    $b :LAND: Debug
        MEND

        GBLL    Debug3
        GBLL    Debug4
        GBLL    Debug9
        GBLL    DebugPMP
Debug3  switch  {TRUE}                  ; low level op
Debug4  switch  {TRUE}                  ; misc op
Debug9  switch  {TRUE}                  ; useful routines
DebugPMP switch {TRUE}

        GBLS    NeedHdrDebug
        GBLS    NeedHdrHostFS
      [ Debug
NeedHdrDebug    SETS "GET Hdr:Debug"
      |
NeedHdrDebug    SETS "; No"
      ]
      [ :DEF: Host_Debug
Host_Debug      SETL {FALSE}
Debug_MaybeIRQ  SETL {FALSE}
NeedHdrHostFS   SETS "GET Hdr:HostFS"
      |
NeedHdrHostFS   SETS "; No"
      ]
        $NeedHdrDebug
        $NeedHdrHostFS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Constants
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

OldDirSize               * &500
NewDirSize               * &800
BigDirMinSize            * 2048

        ASSERT  SzDiscRecSigSpace = 60
Zone0DiscRecSz           * 60
Zone0Bits                * Zone0DiscRecSz * 8 

MyMaxSupportedDiscOp     * DiscOp_ReadTrk
MyMaxSupportedDrive      * 0
MyMinSupportedDriveSize  * 8 * 1024
MyLog2SectorSize         * 10       ; 9 = 512, 10 = 1024
; n.b. 512 byte sector has max disc size approx 256MB. 1024 max is 512MB

ChangeDyn_RamFS          * 5 ; Our DA number

        END
@


4.9
log
@Add support for the RAMFS dynamic area potentially being a PMP
Detail:
  s/Defns - Add PMP switch to switch between PMP-compatible code and old code. Add BigDisc2 switch to enable my (non-functional) support for RAM discs > 512MB. Fix broken debug switches (Hdr:Proc already gets included somewhere), and add PMP debug switch.
  s/RamFS05 - Replace generic BlockMove function with BlockRead/BlockWrite functions which map in pages on demand, using a basic LRU cache to reduce page table thrashing.
  s/RamFS15 - Updated to use BlockRead/BlockWrite functions, and BigDisc2 support
  s/RamFS50 - BigDisc2 code. PMP-related initialisation.
Admin:
  Tested on Pandaboard, with and without PMP dynamic area
  Note that due to nonfunctional support for RAM discs >512MB, the resize handler in the kernel currently places a 512MB limit on the DA.


Version 2.31. Tagged as 'RAMFS-2_31'
@
text
@d118 1
a118 2

MyMySecSizel2b  *       10       ; 9 = 512, 10 = 1024
@


4.8
log
@Typo corrected
Per FileCore-3_62. Retagged as RAMFS-2_29.
@
text
@d29 3
d35 3
d54 5
d80 1
d84 1
a86 1
        GBLS    NeedHdrProc
a88 1
NeedHdrProc     SETS "GET Hdr:Proc"
a91 1
NeedHdrProc     SETS "; No"
a99 1
        $NeedHdrProc
d119 5
@


4.7
log
@Change to use centrally assigned error number.
Same binary, retagged as RAMFS-2_27.
@
text
@d102 1
a102 1
        ASSERT  SzDiscRegSigSpace = 60
@


4.6
log
@  Reworked error code
Detail:
  Now uses Hdr:FileCoreErr rather than containing its own definitions of the
  low-level FileCore error numbers. Autogenerates and exports a new header,
  Hdr:RAMFSErr, and a C version of the same, containing error definitions
  within the RAMFS error block, derived from the error offsets from
  Hdr:FileCoreErr.
Admin:
  No changes to the binary.

Version 2.27. Tagged as 'RAMFS-2_27'
@
text
@a97 2
ErrorNumber_SizeTooSmall * &A5

@


4.5
log
@Declare as a floppy not a fixed disc.
In the (dusty) PRM 2-204 it states that the disc record can be used to specify the size of your media and "this is how RamFS is able to be larger than an ordinary floppy disc", which ties in with it being drive 0 since drives 0-3 are floppies.
This doesn't fix FileCore's poor handling of 1 zone fixed discs, but does make RamFS work for sizes < 964k again.
The zero init of the first zone now no longer unconditionally clears 16k, since the check on RAM area size is 8k.
Recompiled test tool 'm1time'.

Version 2.26. Tagged as 'RAMFS-2_26'
@
text
@a97 1
ErrorNumber_BadParms     * &A1
@


4.4
log
@Simplify.
Change to use exports from FileCore-3_45.
Delete local copies, which then collapsed the whole module in on itself - RAMFS should really be the simplest of clients, but was built up from a lot of spare body parts. This simplification removes a lot of files.
Delete s.TokHelpSrc - this is autogenerated and was erroneously checked in a few years ago.
Delete unused Help and Syntax.
Try to get the use of BigDir/BigDisc/BigMap more correct.
Tested against FileCore-3_45 and still works.

Version 2.24. Tagged as 'RAMFS-2_24'
@
text
@d111 1
@


4.3
log
@Tidy up.
Get FS_Control reasons from header file rather than local definitions,
Delete lots of FileCore internal stuff from local definitions.
Adjust the 'BigDir' switch use, it's still not quite right as it's being used to select things unrelated to big directories.
Functionally the same as 2.22, tested briefly.

Version 2.23. Tagged as 'RAMFS-2_23'
@
text
@d17 94
a111 86
        GBLL    T
T       SETL    {TRUE}
        GBLL    F
F       SETL    {FALSE}

; if this is true then we use new filecore
	GBLL	BigDir
BigDir	SETL	T


        GBLL    FileCache
FileCache SETL T

bit0    bit 0
bit1    bit 1
bit2    bit 2
bit3    bit 3
bit4    bit 4
bit5    bit 5
bit6    bit 6
bit7    bit 7
bit8    bit 8
bit9    bit 9
bit10   bit 10
bit11   bit 11
bit12   bit 12
bit13   bit 13
bit14   bit 14
bit15   bit 15
bit16   bit 16
bit17   bit 17
bit18   bit 18
bit19   bit 19
bit20   bit 20
bit21   bit 21
bit22   bit 22
bit23   bit 23
bit24   bit 24
bit25   bit 25
bit26   bit 26
bit27   bit 27
bit28   bit 28
bit29   bit 29
bit30   bit 30
bit31   bit 31

K       * 1024
M       * K*K
CR      * 13
LF      * 10

;Register allocation

SB      RN 12

SzOldFs         * &200
SzNewFloppyFs   * &400
TrksPerSide     * 80

ZoneDiscRecSz   * 60    ;reserve additional bytes
Zone0Bits       * ZoneDiscRecSz*8

UnusedOp        * ReadTrkOp

AltDefectBit    bit 4   ;use alternative defect map, winnies only
ScatterBit      bit 5
NoEscape        bit 6
NoTimeOut       bit 7
Atomic          * NoEscape :OR: NoTimeOut
BackBitNo       * 8
BackgroundOp    bit BackBitNo
OpMask          * 2_1111 ;ops 0-15

DiscBits        * 2_111 :SHL: (32-3)    ;In all disc addresses

RamFSId        * 23      ;magic filing system number

 [ T
RamFSSwiBase    * Module_SWISystemBase + Module_SWIChunkSize * RamFSSWI

                ^ RamFSSwiBase :OR bit17
XRamFS_DiscOp   # 1
                # 1
XRamFS_Drives   # 1
XRamFS_FreeSpace # 1
 ]
@


4.2
log
@Ursula branch merged
@
text
@a22 3
        GBLL    NewFs
NewFs   SETL    T

a68 10
;Cpu

PsrMask         * &FC000003
;FBitNo          * 26
;IBitNo          * 27
;VBitNo          * 28
;CBitNo          * 29
;ZBitNo          * 30
;NBitNo          * 31

d77 3
@


4.1
log
@Initial revision
@
text
@d26 5
d34 10
a43 10
bit0    bit 0 
bit1    bit 1 
bit2    bit 2 
bit3    bit 3 
bit4    bit 4 
bit5    bit 5 
bit6    bit 6 
bit7    bit 7 
bit8    bit 8 
bit9    bit 9 
@


4.1.4.1
log
@Modified to take advantage of new FileCore (long filenames).  Previously,
RAMFS used FileCore_FloppyStructure, which can only lay out single-zone
E-format discs.  This meant that with a 16M RAM disc, you have a 4096
byte LFAU (cf harddiscs, where the LFAU would not reach this until the
disc size reached 1G byte).

Modified to use FileCore_LayoutStructure (supports long file names, and
multiple disc zones).  Result:  LFAU on a 16M byte RAM disc is now only
256 bytes, which saves alot of space.  RAMFS makes a choice about the
parameters to pass to LayoutStructure, limiting the number of zones to
16 (this can easily be changed).  It chooses the smallest LFAU possible
given this constraint, with a minimum of 256 bytes.

Also checks FileCore version; on FileCore 2.98 or earlier, long file
names are turned off, so it will work on older versions, and still give
the benifit of smaller LFAUs.

As a further optimisation, RAMFS will now ask for a 64K byte directory
cache to be allocated.  This seems to improve performance, especially
with large directories on long file names.

problems:

Due to a Kernel problem with re-entrancy on OS_ChangeDynamicArea, when
running the new filecore, any attempt to shrink the RAM disc will result
in the kernel generating (not returning) the error SWI &6d656d not known.

This completely stuffs the system, as RAMFS has failed to re-init
properly, and any attempts to call OS_ChangeDynamicArea will fail
because the re-entrancy semaphore will be set.

This needs a Kernel Fix (clearing the re-entrancy flag *before* calling
PostShrink instead of after).  Implications of this need to be considered.

Also, this problem might occur on old FileCore if the RMA is full when
RAMFS is re-initialised, and the number of zones in the free space map
increases when the disc gets smaller.

To do:

Ownership of the RAMFS dynamic area should move to RAMFS, since it makes
it easier for RAMFS to be efficient (re-initing RAMFS every time  the size
of the DA changes is not pretty).

RAMFS dynamic area should be made cacheable on SA.

Now that RAMFS supports large RAM discs better (upto 256 megs is feasible)
the maximum size of the RAM disc should be increased.  To avoid the problem
of soaking up all of the virtual address space, however, the initial max
size of the dynamic area should be the same as present, and if there's any
need to grow it, it should be destroyed and re-created.

Need to determine a 'good' choicde of the dir cache size.

Consider changing to 512 or 256 byte sector size?  Would increase space
efficiency in shared objects.
@
text
@a25 3
	GBLL	BigDir
BigDir	SETL	T

d29 10
a38 10
bit0    bit 0
bit1    bit 1
bit2    bit 2
bit3    bit 3
bit4    bit 4
bit5    bit 5
bit6    bit 6
bit7    bit 7
bit8    bit 8
bit9    bit 9
@


4.1.4.2
log
@RAMFS doesn't initialise the RAM disc any more, and relies on the kernel
doing so.
@
text
@a25 1
; if this is true then we use new filecore
a27 1

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
