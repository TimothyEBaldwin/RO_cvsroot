head	4.8;
access;
symbols
	RAMFS-2_32:4.8
	RAMFS-2_31:4.8
	RAMFS-2_30:4.8
	RAMFS-2_29:4.8
	RAMFS-2_28:4.8
	RAMFS-2_27:4.7
	RAMFS-2_26:4.6
	RAMFS-2_25:4.6
	RAMFS-2_24:4.6
	RAMFS-2_23:4.5
	RAMFS-2_22:4.4
	RAMFS-2_21:4.3
	RO_5_07:4.3
	RAMFS-2_20:4.3
	RAMFS-2_19a:4.3
	RAMFS-2_19:4.3
	RAMFS-2_18:4.3
	RAMFS-2_17:4.3
	RAMFS-2_16:4.3
	RAMFS-2_15:4.2
	dellis_autobuild_BaseSW:4.2
	Ursula_merge:4.1.4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	nturton_RAMFS-2_11:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	nicke_RAMFS_2_11:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	sproven_RAMFS-2_14:4.1.4.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	sproven_Ursula_2_12:4.1.4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.8
date	2012.03.21.01.39.16;	author bavison;	state Exp;
branches;
next	4.7;
commitid	543BMnsxAAjwTGXv;

4.7
date	2012.03.19.01.03.52;	author bavison;	state Exp;
branches;
next	4.6;
commitid	1Az1q9lTYiVmLqXv;

4.6
date	2011.10.14.07.52.39;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	CFv2fFukGmKq4iDv;

4.5
date	2011.10.02.18.02.23;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	uYOa1JZHMXVzPNBv;

4.4
date	2011.08.04.21.35.57;	author jlee;	state Exp;
branches;
next	4.3;
commitid	iWaSX4JgaHfqUeuv;

4.3
date	2001.05.14.14.43.44;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.30.10.13.08;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.33.47;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.47;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.02.09;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.02.11.18.51.53;	author sproven;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.40.43;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.37.07;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.8
log
@  No longer mounts RamDisc0 on startup
Detail:
  This is inconsistent behaviour compared to other FileCore filing systems.
  RAMFS was effectively behaving as though *Configure Dir had been used
  (on RISC OS 2) but since RISC OS 3, all other FileCore filing systems
  have behaved as though *Configure NoDir had been used. Since RAMFS only
  supports one drive, the only difference users are likely to notice is in
  the output of *Cat before *Dir is issued.
Admin:
  Tested using a softload on an OMAP3 machine.

Version 2.28. Tagged as 'RAMFS-2_28'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >RamFS

        TTL     "Module header"

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services
        GET     Hdr:ModHand
        GET     Hdr:UpCall
        GET     Hdr:Tokens
        GET     Hdr:Proc
        GET     Hdr:MsgTrans
        GET     Hdr:FileCore
        GET     Hdr:FileCoreErr
        GET     Hdr:HighFSI
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:PublicWS
        GET     Hdr:OSRSI6

        GET     VersionASM
        GET     Defns.s

        AREA    |RAMFS$$Code|, CODE, READONLY, PIC

        ENTRY

        ; Module header
Module_BaseAddr
        DCD     0                               ; no start entry
        DCD     InitEntry - Module_BaseAddr
        DCD     DieEntry - Module_BaseAddr
        DCD     0                               ; no ServiceEntry
        DCD     RamFSTitle - Module_BaseAddr
        DCD     RamFSHelpString - Module_BaseAddr
        DCD     ComTab - Module_BaseAddr
        DCD     RamFSSWI_Base
        DCD     SwiEntry - Module_BaseAddr
        DCD     SwiNames - Module_BaseAddr
        DCD     0                               ; no SWI name decoding code
      [ International_Help <> 0
        DCD     message_filename - Module_BaseAddr
      |
        DCD     0
      ]
        DCD     ModFlags - Module_BaseAddr
        ASSERT  {PC} - Module_BaseAddr = 52

RamFSBootText
        DCB     "Acorn "                        ; includes RamFSTitle
RamFSTitle
        DCB     "RamFS", 0
        ALIGN

RamFSHelpString
        DCB     "RamFS",9,9,"$Module_HelpVersion", 0
        ALIGN

ModFlags
      [ :LNOT:No32bitCode
        DCD     ModuleFlag_32bit
      |
        DCD     0
      ]

        ; And the rest of the sources
        GET     RamFS05.s
        GET     RamFS15.s
        GET     RamFS50.s
        GET     MsgCode.s
        GET     TokHelpSrc.s

        ; Plus optional debug routines
      [ Debug
        InsertDebugRoutines
      ]

        END
@


4.7
log
@  Reworked error code
Detail:
  Now uses Hdr:FileCoreErr rather than containing its own definitions of the
  low-level FileCore error numbers. Autogenerates and exports a new header,
  Hdr:RAMFSErr, and a C version of the same, containing error definitions
  within the RAMFS error block, derived from the error offsets from
  Hdr:FileCoreErr.
Admin:
  No changes to the binary.

Version 2.27. Tagged as 'RAMFS-2_27'
@
text
@d41 2
@


4.6
log
@Simplify.
Change to use exports from FileCore-3_45.
Delete local copies, which then collapsed the whole module in on itself - RAMFS should really be the simplest of clients, but was built up from a lot of spare body parts. This simplification removes a lot of files.
Delete s.TokHelpSrc - this is autogenerated and was erroneously checked in a few years ago.
Delete unused Help and Syntax.
Try to get the use of BigDir/BigDisc/BigMap more correct.
Tested against FileCore-3_45 and still works.

Version 2.24. Tagged as 'RAMFS-2_24'
@
text
@d29 1
@


4.5
log
@Tidy up.
Get FS_Control reasons from header file rather than local definitions,
Delete lots of FileCore internal stuff from local definitions.
Adjust the 'BigDir' switch use, it's still not quite right as it's being used to select things unrelated to big directories.
Functionally the same as 2.22, tested briefly.

Version 2.23. Tagged as 'RAMFS-2_23'
@
text
@d15 1
a15 1
;>RamFS
d17 1
a17 3
; This GETs all relevant files for RAMFS
; This expects to be AASMed in the parent of directory asm
; which is expected to contain all the sources.
a18 3
        GBLL    test_version
test_version SETL {FALSE}
        GET     VersionASM
d35 1
a35 1
        GET     MyMacros.s
d37 42
a78 4
        GET     DebugOpts.s
        GET     Header.s
        GET     Errors.s
        GET     RamFS00.s
a80 1
        GET     TokHelpSrc.s
d83 1
d85 2
a86 1
 [ Debug
d88 1
a88 1
 ]
@


4.4
log
@Make compatible with zero page relocation
Detail:
  s/RamFS, s/RamFS05 - Updated debug code to use OS_ReadSysInfo 6 for getting IRQsema pointer
Admin:
  Tested on rev A2 BB-xM


Version 2.22. Tagged as 'RAMFS-2_22'
@
text
@d34 1
@


4.3
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 2.16. Tagged as 'RAMFS-2_16'
@
text
@d36 2
@


4.2
log
@Ursula branch merged
@
text
@d23 1
a23 1
        GET     Version
a28 1
;        GET     Hdr:NewSpace
d37 11
a47 11
        GET     s.MyMacros
        GET     s.Defns
        GET     s.DebugOpts
        GET     s.Header
        GET     s.Errors
        GET     s.RamFS00
        GET     s.RamFS05
        GET     s.RamFS15
        GET     s.TokenHelp
        GET     s.RamFS50
        GET     s.MsgCode
@


4.1
log
@Initial revision
@
text
@d49 5
@


4.1.4.1
log
@Modified to take advantage of new FileCore (long filenames).  Previously,
RAMFS used FileCore_FloppyStructure, which can only lay out single-zone
E-format discs.  This meant that with a 16M RAM disc, you have a 4096
byte LFAU (cf harddiscs, where the LFAU would not reach this until the
disc size reached 1G byte).

Modified to use FileCore_LayoutStructure (supports long file names, and
multiple disc zones).  Result:  LFAU on a 16M byte RAM disc is now only
256 bytes, which saves alot of space.  RAMFS makes a choice about the
parameters to pass to LayoutStructure, limiting the number of zones to
16 (this can easily be changed).  It chooses the smallest LFAU possible
given this constraint, with a minimum of 256 bytes.

Also checks FileCore version; on FileCore 2.98 or earlier, long file
names are turned off, so it will work on older versions, and still give
the benifit of smaller LFAUs.

As a further optimisation, RAMFS will now ask for a 64K byte directory
cache to be allocated.  This seems to improve performance, especially
with large directories on long file names.

problems:

Due to a Kernel problem with re-entrancy on OS_ChangeDynamicArea, when
running the new filecore, any attempt to shrink the RAM disc will result
in the kernel generating (not returning) the error SWI &6d656d not known.

This completely stuffs the system, as RAMFS has failed to re-init
properly, and any attempts to call OS_ChangeDynamicArea will fail
because the re-entrancy semaphore will be set.

This needs a Kernel Fix (clearing the re-entrancy flag *before* calling
PostShrink instead of after).  Implications of this need to be considered.

Also, this problem might occur on old FileCore if the RMA is full when
RAMFS is re-initialised, and the number of zones in the free space map
increases when the disc gets smaller.

To do:

Ownership of the RAMFS dynamic area should move to RAMFS, since it makes
it easier for RAMFS to be efficient (re-initing RAMFS every time  the size
of the DA changes is not pretty).

RAMFS dynamic area should be made cacheable on SA.

Now that RAMFS supports large RAM discs better (upto 256 megs is feasible)
the maximum size of the RAM disc should be increased.  To avoid the problem
of soaking up all of the virtual address space, however, the initial max
size of the dynamic area should be the same as present, and if there's any
need to grow it, it should be destroyed and re-created.

Need to determine a 'good' choicde of the dir cache size.

Consider changing to 512 or 256 byte sector size?  Would increase space
efficiency in shared objects.
@
text
@a48 5

 [ Debug
        InsertDebugRoutines
 ]

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
