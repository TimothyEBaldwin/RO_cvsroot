head	4.2;
access;
symbols
	DOSFS-1_14:4.2
	DOSFS-1_13:4.2
	DOSFS-1_12:4.2
	DOSFS-1_11:4.2
	DOSFS-1_10:4.2
	DOSFS-1_09:4.2
	DOSFS-1_08:4.2
	DOSFS-1_07:4.2
	DOSFS-1_06:4.2
	DOSFS-1_05:4.2
	DOSFS-1_04:4.2
	DOSFS-1_03:4.2
	DOSFS-1_02:4.2
	DOSFS-1_01:4.2
	DOSFS-1_00:4.2
	DOSFS-0_99:4.2
	DOSFS-0_98:4.1
	DOSFS-0_97:4.1
	DOSFS-0_96:4.1;
locks; strict;
comment	@# @;


4.2
date	2013.01.13.18.52.37;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	oq0uLRDtA5Y625Aw;

4.1
date	2012.12.07.14.20.20;	author rsprowson;	state Exp;
branches;
next	;
commitid	jnwtWy3St1iqIivw;


desc
@@


4.2
log
@Add some comments (!) and reindent FileSwitch interface
OpsGetPut
  DOSFS_put_bytes no longer passes an unnecessary dummy argument.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFind
  Suggested buffer to FileSwitch is now 1x512 sector (rather than 256).
  Note - nothing seems to use the cluster buffering code in DOSFS,
indeed nothing ever malloc()s a buffer.
  Check at line 237 of OpFind would never be true since FILE_subdir is
not 1, fixed.
  Return an error if the handle to close is invalid.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFile
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFunc
  A failure to find a slot to set the disc title now reports "Dir full"
not "Disc full"
  Reindented.
  Doxygen comments added to FileSwitch layer.

Version 0.99. Tagged as 'DOSFS-0_99'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> h.DOSdirs <*/
/*-------------------------------------------------------------------------*/
/* Directory operations                        Copyright (c) 1990, JGSmith */
/*-------------------------------------------------------------------------*/

#ifndef __h_DOSdirs
#define __h_DOSdirs

/* Flags for write_dirinfo() */
typedef enum {
              wdi_NONE,    /* should never be used */
              wdi_LOAD,    /* update the load exec with the value given */
              wdi_EXEC,    /* update the exec address with the value given */
              wdi_ATTR,    /* update the attributes with the value given */
              wdi_FLEN,    /* update the filelength with the value given */
              wdi_SCLUSTER /* start CLUSTER of the file image */
             } wdi_flags ;

/* compute details needed for a given dirinfo for directory of 'size' bytes*/
#define DI_Size(size)   (                                        \
                          sizeof(DIR_info)                       \
                          + (((size/sizeof(DOS_direntry))-1)*    \
                           (sizeof(DOS_direntry)                 \
                            + sizeof(char*)))                    \
                        )
/* compute offset of dirstruct->dir_entries[0] from its 'starting' point */
#define DI_Offset(size) (((size/sizeof(DOS_direntry))-1) * sizeof(char*))
/* compute offset of dirstruct->dir_entries[0] from its 'starting' point */
#define DI_Base(p)      (((int)(&((p)->dir_entries[0])) + ((p)->dir_entryoffset)))

DOS_direntry *getnextDIRentry(DOS_direntry *directory,int dir_size,int *index);
DOS_direntry *findemptyDIRentry(DOS_direntry *directory,int dir_size);
DOS_direntry *findDIRentry(char *wcname,DIR_info *cdir,int dir_size,int *index);
DIR_info *loadDIR(char *dirpathname,DOSdisc *ihand);
DOS_direntry *findDIRtype(byte mask,byte ftype,DOS_direntry *directory,int dir_size,int *index);
void flush_dir_cache(DOSdisc *ihand);
void free_dir_cache(char *dirname, DOSdisc *ihand);
char *restorePATH(char *pname, char *lname);
FS_dir_block *read_dir(int rtype,char *fname,void *dest,word num,word off,word blen,DOSdisc *ihand);
int ensure_directory(DIR_info *dir);
int resolvePATH(char *pname,DIR_info **ndir,char **lname,DOSdisc *ihand);
int get_dir_entry_array(DOS_direntry *lfn[], DOSdisc *ihand, int numreq, DIR_info **cdir, DIR_info **pdir, DOS_direntry ** preserve);
int write_dirinfo(char *fname,word bitmap,word loadaddr,word execaddr,word attr,word filelen,int startCLUSTER,DOSdisc *ihand);

#endif
@


4.1
log
@Source file subdivision
The sources to DOSFS had become rather jumbled and monolithic
* Split FileSwitch interface out into seperate ops source files.
* Combined international error lookup with MsgTrans code.
* Split utility functions into 'Helpers.c' along with wildcard matching functions.
* Moved DOS naming functions into, erm, 'DOSnaming.c'.
Also
* Makefile tweaked to remove 'symbols' on clean.
* Obsolete 'Help' and 'Syntax' placed in attic.

RAM, debug, and ROM targets built. RAM target tested with a DOS floppy disc.

Version 0.96. Tagged as 'DOSFS-0_96'
@
text
@d53 1
a53 1
FS_dir_block *read_dir(int rtype,char *fname,word dest,word num,word off,word blen,DOSdisc *ihand);
@

