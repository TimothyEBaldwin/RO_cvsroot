head	4.4;
access;
symbols
	DOSFS-1_14:4.4
	DOSFS-1_13:4.4
	DOSFS-1_12:4.4
	DOSFS-1_11:4.3
	DOSFS-1_10:4.3
	DOSFS-1_09:4.3
	DOSFS-1_08:4.3
	DOSFS-1_07:4.2
	DOSFS-1_06:4.2
	DOSFS-1_05:4.2
	DOSFS-1_04:4.2
	DOSFS-1_03:4.2
	DOSFS-1_02:4.2
	DOSFS-1_01:4.2
	DOSFS-1_00:4.2
	DOSFS-0_99:4.2
	DOSFS-0_98:4.2
	DOSFS-0_97:4.1
	DOSFS-0_96:4.1
	DOSFS-0_95:4.1
	DOSFS-0_94:4.1
	DOSFS-0_93:4.1
	DOSFS-0_92:4.1
	DOSFS-0_91:4.1
	DOSFS-0_90:4.1
	DOSFS-0_89:4.1
	DOSFS-0_88:4.1
	DOSFS-0_87:4.1
	DOSFS-0_86:4.1
	DOSFS-0_85:4.1
	DOSFS-0_84:4.1
	DOSFS-0_83:4.1
	DOSFS-0_82:4.1
	DOSFS-0_81:4.1
	DOSFS-0_80:4.1
	DOSFS-0_79:4.1
	RO_5_07:4.1
	DOSFS-0_78:4.1
	DOSFS-0_77:4.1
	DOSFS-0_76:4.1
	DOSFS-0_75:4.1
	DOSFS-0_74:4.1
	DOSFS-0_73:4.1
	DOSFS-0_72:4.1
	DOSFS-0_71:4.1
	DOSFS-0_70:4.1
	DOSFS-0_69:4.1
	DOSFS-0_68:4.1
	DOSFS-0_67:4.1
	DOSFS-0_66:4.1
	DOSFS-0_65:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	DOSFS-0_64:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_DOSFS_0_63:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2018.02.19.00.06.08;	author jlee;	state Exp;
branches;
next	4.3;
commitid	ic65jLota7NRUorA;

4.3
date	2014.11.02.17.53.56;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	jLG2K2peqo1FyDWx;

4.2
date	2013.01.13.18.49.46;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	fjzSOoRRnhA815Aw;

4.1
date	96.11.05.09.33.04;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.04;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.55.04;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.37.41;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.34.10;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Reject overly-large discs, and other invalid things
Detail:
  c/Accessors, h/Accessors, Makefile - Added some simple 'image accessor' routines to abstract over accessing the underlying disc/image file. These accept 64bit disc addresses and will check to make sure any size limits imposed by the lower-level API are adhered to (512MB limit for FileCore_DiscOp, or extent of image file for OS_GBPB)
  h/MsgTrans, Resources/Germany/Messages, Resources/UK/Messages - Add a couple of new error messages
  h/Helpers - Add a couple of macros to simplify reading 16/32bit values that are split into multiple bytes in struct definitions. Change writeWORD & loadWORD to accept void* instead of char* so they can be used with other types like 'byte'
  h/DOSshape - Add '0' suffix to some struct members so they can be used with new READ_0123 macro
  h/ADFSshape - Make sure put_doublestep is safe to use with bools
  c/DOSdirs - Remove pointless malloc of small temporary array
  c/DOSclusters - Use new READ_ macros in max_sector()
  c/DOSFS - Use new READ_ macros so code is less painful to read. Use new image accessor system to get rid of some boilerplate for reading from the disc (+ extra error checks). Change 32bit values to 64bit where it looks like it's necessary, and use bools in place of a couple of 0/1 ints. Reject any discs which are too big for the 32bit fields in the ADFS disc record.
  c/OpsFunc - Update DOSFS_image_open in ways similar to the code in c/DOSFS, making use of READ_, image accessor, 64bit values, and adding extra error checks.
Admin:
  Tested with assorted large & small image files & SD cards on a BB-xM, and some DOS/Atari floppy discs on a RiscPC
  FAT partitions larger than 4GB (or which extend past the 4GB FileSwitch limit) are now rejected, as are image files which have been truncated
  A future improvement could be to lift the disc/partition identification code out of c/DOSFS and c/OpsFunc and unify it, since both files contain fairly similar code
  German messages are in need of translation


Version 1.12. Tagged as 'DOSFS-1_12'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> h.ADFSshape <*/
/*-------------------------------------------------------------------------*/
/* ADFS logical formats                         Copyright (c) 1989 JGSmith */
/*                                                                         */
/* NOTE: due to the way the ARM C compiler generates shorts (i.e. word     */
/*       aligned), to generate the correct byte-aligned structures we will */
/*       either use bit-fields or split the short into a LO and HI byte    */
/*       pair, depending on the exact requirements                         */
/*-------------------------------------------------------------------------*/

#ifndef __h_ADFSshape
#define __h_ADFSshape

/*-------------------------------------------------------------------------*/
/* ADFS drive numbering:
 *  Floppies are drives 0..3
 *  Winchesters are drive 4..7
 */

#define floppy(d)       (((d) <= 3) ? (((d) >= 0) ? TRUE : FALSE) : FALSE)
#define wini(d)         (!floppy(d))    /* winchester is NOT floppy */

/*-------------------------------------------------------------------------*/
/* ADFS winchester shape information */

#define ADFSboot (0x0C00) /* ADFS boot block address */
#define dtsize   (0x01B0) /* ADFS defect table size */

#define maxdefects (dtsize / sizeof(int))
#define end_defect (1 << 29) /* end of ADFS defect list marker */

/*-------------------------------------------------------------------------*/
/* floppy access formats */
#define Lformat (1)     /* 1 head (surface orientated) */
#define Dformat (2)     /* 2 heads (track (cylinder) orientated) */

/*-------------------------------------------------------------------------*/
/* standard ADFS disc information record (both floppy and winchester) */
typedef struct {
                byte dr_log2secsize ;
                byte dr_secstrk ;
                byte dr_heads ;
                byte dr_floppy_density ;
                byte dr_idwidth ;
                byte dr_log2alloc ;
                byte dr_trackskew ;
                byte dr_bootopt ;
                byte dr_tracklow ; /* lowest sector number on track (lo6bits only) */
                byte dr_zones ;
                /* shorts are aligned (so use chars and special code) */
                byte dr_nonmapbits ;
                byte dr_nonmapbitsHI ;
                word dr_rootSIN ;
                word dr_discsize ;
                /* shorts are aligned (so use chars and special code) */
                byte dr_discID ;   /* set to a random # when formatted */
                byte dr_discIDHI ;
                byte dr_discname[10] ; /* NOT in boot block */
                word dr_disctype ; /* FileType */
                word dr_discsize2 ;
                byte dr_sharesize ;
                byte dr_bigflag ;
                byte dr_unused3[18] ;
               } ADFS_drecord ;

/* standard ADFS winchester boot block */
typedef struct {
                word         bb_defectlist[maxdefects] ; /* DEFECT list */
                word         bb_hwparams[4] ;            /* HW parameters */
                ADFS_drecord bb_discrec ;                /* disc desc. */
               } ADFS_bblock ;

/* data structure when using ADFS low-level SWIs */
typedef struct {
                ADFS_drecord ad_drec ;
                ADFS_bblock  ad_bblock ;
               } ADFSaccess ;

#define bootsize    (sizeof(ADFS_bblock))  /* ADFS boot block size */
#define discrecsize (sizeof(ADFS_drecord)) /* ADFS disc record size */

/*-------------------------------------------------------------------------*/
/* disc information accessing macros */

#define log2secsize(drec) ((drec)->dr_log2secsize)
#define secspertrk(drec)  ((drec)->dr_secstrk)
#define tracklow(drec)    ((drec)->dr_tracklow & 0x3F)
#define sequence(drec)    ((((drec)->dr_tracklow) & 0x40) >> 6)
#define doublestep(drec)  ((drec)->dr_tracklow >> 7)
#define heads(drec)       ((drec)->dr_heads)
#define log2alloc(drec)   ((drec)->dr_log2alloc)
#define nonmapbits(drec)  ((drec)->dr_nonmapbits|((drec)->dr_nonmapbitsHI<<8))
#define discID(drec)      ((drec)->dr_discID | ((drec)->dr_discIDHI << 8))
#define discsize(drec)    ((drec)->dr_discsize)
#define discsize2(drec)   ((drec)->dr_discsize2)
#define trackskew(drec)   ((drec)->dr_trackskew)
#define disctype(drec)    ((drec)->dr_disctype)

#define bytespersec(drec) (1 << log2secsize(drec))
#define cylsize(drec)     (bytespersec(drec)*secspertrk(drec)*heads(drec))
#define cyls(drec)        (discsize(drec) / cylsize(drec))
#define secspercyl(drec)  (secspertrk(drec) * heads(drec))

/* construct the disc record nonmapbits field */
#define put_nonmapbits(drec,v) {                                           \
                                (drec)->dr_nonmapbits=(v & 0xFF) ;         \
                                (drec)->dr_nonmapbitsHI=((v >> 8) & 0xFF) ;\
                               }

/* construct the disc accessing flags */
#define put_tracklow(drec,v)   {                                           \
                                (drec)->dr_tracklow &= ~0x3F ;             \
                                (drec)->dr_tracklow |= ((v) & 0x3F) ;      \
                               }
#define put_sequence(drec,v)   {                                           \
                                (drec)->dr_tracklow &= ~0x40 ;             \
                                (drec)->dr_tracklow |= ((v) << 6) ;        \
                               }
#define put_doublestep(drec,v) {                                           \
                                if (v) (drec)->dr_tracklow |= 0x80 ;       \
                                else (drec)->dr_tracklow &= ~0x80 ;        \
                               }

/* construct the disc ID field */
#define put_discID(drec,v) {                                               \
                            (drec)->dr_discID = (v & 0xFF) ;               \
                            (drec)->dr_discIDHI = ((v >> 8) & 0xFF) ;      \
                           }

/* translate between byte addresses and cylinder counts */
#define tcyls(a,dr) (a / cylsize(dr))
#define taddr(c,dr) (c * cylsize(dr))

/* extract low current cylinder and pre-compensation cylinder information */
#define get_lowc(bp) (bp->bb_hwparams[2] & 0x0000FFFF)
#define get_prec(bp) (bp->bb_hwparams[2] >> 16)

/* make low current cylinder and pre-compensation cylinder HW information */
#define put_lowpre(bp,l,p) { bp->bb_hwparams[2] = (l | (p << 16)) ; }

/* extract parking cylinder information */
#define get_park(bp) (tcyls(bp->bb_hwparams[3],(&(bp->bb_discrec))))

/* directory magic number */
#define hmagic (('H' <<  0) | ('u' << 8) | ('g' << 16) | ('o' << 24))

/*-------------------------------------------------------------------------*/
/* ADFS physical operations */
typedef enum {
              ADFSverify,               /* verify track */
              ADFSread,                 /* read bytes */
              ADFSwrite,                /* write bytes */
              ADFSrdid,                 /* read floppy track or hard ids */
              ADFSwtrack,               /* write track */
              ADFSseek,                 /* seek track */
              ADFSrestore,              /* restore */
              ADFSstepin,               /* step in (floppy only) */
              ADFSstepout,              /* step out (floppy only) */
              ADFSspecify = 15          /* specify disc shape (hard only) */
             } ADFSops ;

typedef enum {
              ADFSopOK,         /* successful completion */
              ADFSdiscerr,      /* general ADFS disc error */
              ADFSnotalltrans,  /* not all the data has been transferred */
              ADFSsyserr,       /* C system error during operation */
              ADFSnodisc,       /* Drive Empty */
              ADFSwriteprotect, /* Disc write protected */
              ADFSinterrupted   /* ADFS operation interrupted (ESCAPE) */
             } ADFSstates ;

/*-------------------------------------------------------------------------*/
 /* ADFS time stamping:
  *
  * load address: = &FFFtttdd
  * exec address: = &dddddddd
  * dddddddddd is the (5byte) centisecond time from 00:00:00 on 1st Jan 1900
  */

#define ADFStimestamp (0xFFF00000)  /* file has a time stamp and file type */
#define ADFStypemask  (0x000FFF00)  /* file type mask */
#define ADFStypeshift (8)

#endif /* __h_ADFSshape */
@


4.3
log
@Fixes to stop DOSFS erroneously claiming partitions that aren't valid
In particular with ADFS, attempting to format an ATA drive purchased from a PC box shifter would often lead to the machine hanging on startup meaning you can't get as far as running !HForm. Further analysis showed that the problem was caused by DOSFS latching onto the PC partition table and attempting to claim the Service_IdentifyDisc. This would then be followed by trying to load the FAT via FileCore in situations where the FAT to load were bigger than the disc size represented by the disc record FileCore has attached to the disc.

This primarily concerns things with partition tables (like a fixed disc).
Things got off to a bad start, some inaccurate keyboard mashing meant the definition for DOS_bootsector added up to 520 bytes, and this was loaded into a malloc'd 512 byte buffer.
The representation of the disc size (bbsize) was being kept in a signed integer, so the single (rather weak) test of checking the boot block declared size (bbsize) being greater than the partition declared size (winisize) would always be accepted for partitions > 2GB.
Additionally, the bbsize was multiplied by DOSsecsize and performed as a byte compare rather than a sector compare, leading to overflow.
Invariably this check would pass (either due to the sign bit being set, or overflow) and DOSFS would claim the service and go ahead and try to read in an unfeasibly large FAT.

DOSFS is now much more strict about checking
* be sure bbsize can fit in the partition by comparing as unsigned number of sectors, convert to bytes later
* be sure bbsize is non zero
* be sure the FAT isn't bigger than bbsize
* be sure the root directory isn't bigger than bbsize
only then claim the service.

DOSshape.h:
Correct the size of the DOS_bootsector back to 512 bytes.
ADFSshape.h:
Remove unused grubby FileCore constants, especially as we're not likely to encounter any 256B/sector drives!
Add the extra disc record fields to get us up to 'BigDisc' in FileCore parlance.
DOSFS.c:
If the rootsize is zero, have a go at using the FAT32 ones instead. Previously this logic only triggered if the FAT32 extended signature was present, but that signature is for the fields that follow it - the FAT size preceeds.
Only update the return variables if we're confident we're going to claim the service.
Remove dead variable 'notracks'.

Tested on a sample of 4 ATA drives > 10GB from different vendors previously used in PCs. All 4 used to hang when installed, now they do not.

Version 1.08. Tagged as 'DOSFS-1_08'
@
text
@d134 2
a135 2
                                (drec)->dr_tracklow &= ~0x80 ;             \
                                (drec)->dr_tracklow |= ((v) << 7) ;        \
@


4.2
log
@Rationalise some defines
Many magic numbers changed to exported defines.
Eliminated unused "BOOTblock.h" (was just nesting 1 include file).
Moved non ASCII definitions out of "ASCII.h" then found the remainder weren't used => eliminated.

Version 0.98. Tagged as 'DOSFS-0_98'
@
text
@d72 6
a77 5
                byte dr_discname[0x0A] ; /* NOT in boot block */
                byte dr_unused2[0x0002] ;
                byte dr_drive ;
                byte dr_unused3[0x001C] ;
                byte dr_csum ;
a96 17

#define oldmapadd    (0x0000)
#define oldmapsize   (0x0200)
#define dirsize      (0x0800)

#define maxverifybad (16)       /* maximum number of retries attempted */

#define oldLWM       (0x0E00)

#define defrootadd   (0x0400)   /* default ROOT directory address */

#define log2ssize    (8)    /* ADFS winchesters ALWAYS have 256 byte secs */

#define freelink   (1)
#define crosscheck (3)

/*-------------------------------------------------------------------------*/
a99 1
#define bytespersec(drec) (1 << log2secsize(drec))
a104 1
#define secspercyl(drec)  (secspertrk(drec) * heads(drec))
d109 5
d116 1
a116 1
#define trackskew(drec)  ((drec)->dr_trackskew)
@


4.1
log
@Initial revision
@
text
@a100 2
#define ADFSderr     (0x0108C7) /* general ADFS disc transfer error  */

a198 5
/* Explicit error numbers returned by ADFS */
#define ADFSerr_escape          (0x00010811)
#define ADFSerr_writeprotect    (0x000108C9)
#define ADFSerr_nodisc          (0x000108D3)

a210 101
/*-------------------------------------------------------------------------*/
/* Generic IO accessing */

typedef volatile unsigned char *const port ;  /* byte wide IO location */
typedef volatile unsigned int  *const wport ; /* word wide IO location */

/* IOC layout */
#define IOC             ((port)0x03200000)

#define IOC_ctrl        (IOC[0x00])
#define IOC_ser_data    (IOC[0x04])

#define IOC_irqA_stat   (IOC[0x10])
#define IOC_irqA_req    (IOC[0x14])
#define IOC_irqA_clr    (IOC[0x14])
#define IOC_irqA_mask   (IOC[0x18])

#define IOC_irqB_stat   (IOC[0x20])
#define IOC_irqB_req    (IOC[0x24])
#define IOC_irqB_mask   (IOC[0x28])

#define IOC_fiq_stat    (IOC[0x30])
#define IOC_fiq_req     (IOC[0x34])
#define IOC_fiq_mask    (IOC[0x38])

#define IOC_t0_clow     (IOC[0x40])
#define IOC_t0_chigh    (IOC[0x44])
#define IOC_t0_llow     (IOC[0x40])
#define IOC_t0_lhigh    (IOC[0x44])
#define IOC_t0_go       (IOC[0x48])
#define IOC_t0_latch    (IOC[0x4C])

#define IOC_t1_clow     (IOC[0x50])
#define IOC_t1_chigh    (IOC[0x54])
#define IOC_t1_llow     (IOC[0x50])
#define IOC_t1_lhigh    (IOC[0x54])
#define IOC_t1_go       (IOC[0x58])
#define IOC_t1_latch    (IOC[0x5C])

#define IOC_t2_clow     (IOC[0x60])
#define IOC_t2_chigh    (IOC[0x64])
#define IOC_t2_llow     (IOC[0x60])
#define IOC_t2_lhigh    (IOC[0x64])
#define IOC_t2_go       (IOC[0x68])
#define IOC_t2_latch    (IOC[0x6C])

#define IOC_t3_clow     (IOC[0x70])
#define IOC_t3_chigh    (IOC[0x74])
#define IOC_t3_llow     (IOC[0x70])
#define IOC_t3_lhigh    (IOC[0x74])
#define IOC_t3_go       (IOC[0x78])
#define IOC_t3_latch    (IOC[0x7C])

#define IOC_t_clow(n)   (IOC[0x40+(n<<4)])
#define IOC_t_chigh(n)  (IOC[0x44+(n<<4)])
#define IOC_t_llow(n)   (IOC[0x40+(n<<4)])
#define IOC_t_lhigh(n)  (IOC[0x44+(n<<4)])
#define IOC_t_go(n)     (IOC[0x48+(n<<4)])
#define IOC_t_latch(n)  (IOC[0x4C+(n<<4)])


/* floppy disc controller: */

#ifdef A500
/* A500s have 1793 */
# define FDC_latch       (*(port)0x03360000)
# define FDC_base        ((port)0x03290000)
#else
/* Archimedes have 1772 */
# define FDC_latch       (*(port)0x03350040)
# define FDC_base        ((port)0x03310000)
# define discchanged     (0x10)
#endif /* A500 */

/* floppy latch bits (negated) */
#define FDC_sel_0       0xFE            /* select drive 0 */
#define FDC_sel_1       0xFD            /* select drive 1 */
#define FDC_sel_2       0xFB            /* select drive 2 */
#define FDC_sel_3       0xF7            /* select drive 3 */
#define FDC_selside     0xEF            /* select head */
#define FDC_motoron     0xDF            /* motor on */
#define FDC_inuse       0xBF            /* drive in use */
#define FDC_reset       0x7F            /* disc changed and reset */
#define FDC_unset       0xFF            /* no flags set */
/* eg FDC_latch = (FDC_inuse & FDC_motoron & FDC_reset) ; */

/* 1772 registers */
#define FDC_ctrl        (FDC_base[0x00]) /* WRITE */
#define FDC_stat        (FDC_base[0x00]) /* READ */
#define FDC_track       (FDC_base[0x04])
#define FDC_sector      (FDC_base[0x08])
#define FDC_data        (FDC_base[0x0C])

#ifdef A500
# define IOC_disc_changed()     (IOC_ctrl & 0x04)
#else  /* A500 */
# define IOC_disc_changed()     (IOC_irqB_stat & discchanged)
#endif /* A500 */

/*-------------------------------------------------------------------------*/

a211 3

/*-------------------------------------------------------------------------*/
/*> EOF h.ADFSshape <*/
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
