head	4.3;
access;
symbols
	DOSFS-1_14:4.3
	DOSFS-1_13:4.3
	DOSFS-1_12:4.3
	DOSFS-1_11:4.2
	DOSFS-1_10:4.2
	DOSFS-1_09:4.2
	DOSFS-1_08:4.2
	DOSFS-1_07:4.2
	DOSFS-1_06:4.2
	DOSFS-1_05:4.2
	DOSFS-1_04:4.2
	DOSFS-1_03:4.2
	DOSFS-1_02:4.2
	DOSFS-1_01:4.2
	DOSFS-1_00:4.2
	DOSFS-0_99:4.2
	DOSFS-0_98:4.1
	DOSFS-0_97:4.1
	DOSFS-0_96:4.1;
locks; strict;
comment	@# @;


4.3
date	2018.02.19.00.06.08;	author jlee;	state Exp;
branches;
next	4.2;
commitid	ic65jLota7NRUorA;

4.2
date	2013.01.13.18.52.37;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	oq0uLRDtA5Y625Aw;

4.1
date	2012.12.07.14.20.21;	author rsprowson;	state Exp;
branches;
next	;
commitid	jnwtWy3St1iqIivw;


desc
@@


4.3
log
@Reject overly-large discs, and other invalid things
Detail:
  c/Accessors, h/Accessors, Makefile - Added some simple 'image accessor' routines to abstract over accessing the underlying disc/image file. These accept 64bit disc addresses and will check to make sure any size limits imposed by the lower-level API are adhered to (512MB limit for FileCore_DiscOp, or extent of image file for OS_GBPB)
  h/MsgTrans, Resources/Germany/Messages, Resources/UK/Messages - Add a couple of new error messages
  h/Helpers - Add a couple of macros to simplify reading 16/32bit values that are split into multiple bytes in struct definitions. Change writeWORD & loadWORD to accept void* instead of char* so they can be used with other types like 'byte'
  h/DOSshape - Add '0' suffix to some struct members so they can be used with new READ_0123 macro
  h/ADFSshape - Make sure put_doublestep is safe to use with bools
  c/DOSdirs - Remove pointless malloc of small temporary array
  c/DOSclusters - Use new READ_ macros in max_sector()
  c/DOSFS - Use new READ_ macros so code is less painful to read. Use new image accessor system to get rid of some boilerplate for reading from the disc (+ extra error checks). Change 32bit values to 64bit where it looks like it's necessary, and use bools in place of a couple of 0/1 ints. Reject any discs which are too big for the 32bit fields in the ADFS disc record.
  c/OpsFunc - Update DOSFS_image_open in ways similar to the code in c/DOSFS, making use of READ_, image accessor, 64bit values, and adding extra error checks.
Admin:
  Tested with assorted large & small image files & SD cards on a BB-xM, and some DOS/Atari floppy discs on a RiscPC
  FAT partitions larger than 4GB (or which extend past the 4GB FileSwitch limit) are now rejected, as are image files which have been truncated
  A future improvement could be to lift the disc/partition identification code out of c/DOSFS and c/OpsFunc and unify it, since both files contain fairly similar code
  German messages are in need of translation


Version 1.12. Tagged as 'DOSFS-1_12'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> h.Helpers <*/
/*---------------------------------------------------------------------------*/
/* Module support functions                      Copyright (c) 1990, JGSmith */
/*---------------------------------------------------------------------------*/

#ifndef __h_Helpers
#define __h_Helpers

/* Macros for less painful reading of 16/32bit values that have been split into individual bytes */
#define READ_LOHI(VAR) ((word) (VAR | (VAR##HI << 8)))
#define READ_0123(VAR) ((word) (VAR##0 | (VAR##1 << 8) | (VAR##2 << 16) | (VAR##3 << 24)))

/* Unaligned word access */
extern void writeWORD(void *address,word datavalue) ;
extern word loadWORD(const void *address) ;

/* These are only exported to provide function addresses */
extern void DOSFS_Open(void);
extern void DOSFS_GetBytes(void);
extern void DOSFS_PutBytes(void);
extern void DOSFS_Args(void);
extern void DOSFS_Close(void);
extern void DOSFS_File(void);
extern void DOSFS_Func(void);

/* Helper functions */
int checknotwildcarded(char *name, char wcmult, char wcsing);
int find_open_file(char *fname, DOS_direntry *dentry, DOSdisc *ihand);
int update_imageID(DOSdisc *ihand);
void read_loadexec(DOS_direntry *dentry,char *dosext,time5byte *le);
void update_loadexec(DOS_direntry *dentry,word ld,word ex);
unsigned char RISCOStoDOSattributes(word ROSattr);
word DOStoRISCOSattributes(DOS_direntry *dentry);
int wild_card_compare(char *fptr, char *gptr, char wcmult, char wcsing);
void map_FILE_ROStype(DOS_direntry *dentry,char* dosext,time5byte *le);

#endif
@


4.2
log
@Add some comments (!) and reindent FileSwitch interface
OpsGetPut
  DOSFS_put_bytes no longer passes an unnecessary dummy argument.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFind
  Suggested buffer to FileSwitch is now 1x512 sector (rather than 256).
  Note - nothing seems to use the cluster buffering code in DOSFS,
indeed nothing ever malloc()s a buffer.
  Check at line 237 of OpFind would never be true since FILE_subdir is
not 1, fixed.
  Return an error if the handle to close is invalid.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFile
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFunc
  A failure to find a slot to set the disc title now reports "Dir full"
not "Disc full"
  Reindented.
  Doxygen comments added to FileSwitch layer.

Version 0.99. Tagged as 'DOSFS-0_99'
@
text
@d23 4
d28 2
a29 2
extern void writeWORD(char *address,word datavalue) ;
extern word loadWORD(char *address) ;
@


4.1
log
@Source file subdivision
The sources to DOSFS had become rather jumbled and monolithic
* Split FileSwitch interface out into seperate ops source files.
* Combined international error lookup with MsgTrans code.
* Split utility functions into 'Helpers.c' along with wildcard matching functions.
* Moved DOS naming functions into, erm, 'DOSnaming.c'.
Also
* Makefile tweaked to remove 'symbols' on clean.
* Obsolete 'Help' and 'Syntax' placed in attic.

RAM, debug, and ROM targets built. RAM target tested with a DOS floppy disc.

Version 0.96. Tagged as 'DOSFS-0_96'
@
text
@a39 1
int DOS_image_RW(int op,word sec,int off,byte *ma,word nbytes,DOSdisc *ihand);
@

