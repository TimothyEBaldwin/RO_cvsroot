head	4.6;
access;
symbols
	DOSFS-1_14:4.6
	DOSFS-1_13:4.6
	DOSFS-1_12:4.6
	DOSFS-1_11:4.5
	DOSFS-1_10:4.5
	DOSFS-1_09:4.5
	DOSFS-1_08:4.5
	DOSFS-1_07:4.5
	DOSFS-1_06:4.5
	DOSFS-1_05:4.5
	DOSFS-1_04:4.5
	DOSFS-1_03:4.5
	DOSFS-1_02:4.5
	DOSFS-1_01:4.5
	DOSFS-1_00:4.4
	DOSFS-0_99:4.4
	DOSFS-0_98:4.3
	DOSFS-0_97:4.2
	DOSFS-0_96:4.2
	DOSFS-0_95:4.1
	DOSFS-0_94:4.1
	DOSFS-0_93:4.1
	DOSFS-0_92:4.1
	DOSFS-0_91:4.1
	DOSFS-0_90:4.1
	DOSFS-0_89:4.1
	DOSFS-0_88:4.1
	DOSFS-0_87:4.1
	DOSFS-0_86:4.1
	DOSFS-0_85:4.1
	DOSFS-0_84:4.1
	DOSFS-0_83:4.1
	DOSFS-0_82:4.1
	DOSFS-0_81:4.1
	DOSFS-0_80:4.1
	DOSFS-0_79:4.1
	RO_5_07:4.1
	DOSFS-0_78:4.1
	DOSFS-0_77:4.1
	DOSFS-0_76:4.1
	DOSFS-0_75:4.1
	DOSFS-0_74:4.1
	DOSFS-0_73:4.1
	DOSFS-0_72:4.1
	DOSFS-0_71:4.1
	DOSFS-0_70:4.1
	DOSFS-0_69:4.1
	DOSFS-0_68:4.1
	DOSFS-0_67:4.1
	DOSFS-0_66:4.1
	DOSFS-0_65:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	DOSFS-0_64:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_DOSFS_0_63:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2018.02.19.00.06.08;	author jlee;	state Exp;
branches;
next	4.5;
commitid	ic65jLota7NRUorA;

4.5
date	2013.01.13.18.57.35;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	IcVKoGKFReBN35Aw;

4.4
date	2013.01.13.18.52.37;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	oq0uLRDtA5Y625Aw;

4.3
date	2013.01.13.18.49.47;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	fjzSOoRRnhA815Aw;

4.2
date	2012.12.07.14.20.21;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	jnwtWy3St1iqIivw;

4.1
date	96.11.05.09.33.06;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.06;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.55.32;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.37.53;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.34.21;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Reject overly-large discs, and other invalid things
Detail:
  c/Accessors, h/Accessors, Makefile - Added some simple 'image accessor' routines to abstract over accessing the underlying disc/image file. These accept 64bit disc addresses and will check to make sure any size limits imposed by the lower-level API are adhered to (512MB limit for FileCore_DiscOp, or extent of image file for OS_GBPB)
  h/MsgTrans, Resources/Germany/Messages, Resources/UK/Messages - Add a couple of new error messages
  h/Helpers - Add a couple of macros to simplify reading 16/32bit values that are split into multiple bytes in struct definitions. Change writeWORD & loadWORD to accept void* instead of char* so they can be used with other types like 'byte'
  h/DOSshape - Add '0' suffix to some struct members so they can be used with new READ_0123 macro
  h/ADFSshape - Make sure put_doublestep is safe to use with bools
  c/DOSdirs - Remove pointless malloc of small temporary array
  c/DOSclusters - Use new READ_ macros in max_sector()
  c/DOSFS - Use new READ_ macros so code is less painful to read. Use new image accessor system to get rid of some boilerplate for reading from the disc (+ extra error checks). Change 32bit values to 64bit where it looks like it's necessary, and use bools in place of a couple of 0/1 ints. Reject any discs which are too big for the 32bit fields in the ADFS disc record.
  c/OpsFunc - Update DOSFS_image_open in ways similar to the code in c/DOSFS, making use of READ_, image accessor, 64bit values, and adding extra error checks.
Admin:
  Tested with assorted large & small image files & SD cards on a BB-xM, and some DOS/Atari floppy discs on a RiscPC
  FAT partitions larger than 4GB (or which extend past the 4GB FileSwitch limit) are now rejected, as are image files which have been truncated
  A future improvement could be to lift the disc/partition identification code out of c/DOSFS and c/OpsFunc and unify it, since both files contain fairly similar code
  German messages are in need of translation


Version 1.12. Tagged as 'DOSFS-1_12'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> h.MsgTrans <*/
/*-------------------------------------------------------------------------*/
/* Wrappers for MessageTrans SWIs              Copyright (c) 1991 SMCormie */
/*-------------------------------------------------------------------------*/

#ifndef __h_MsgTrans
#define __h_MsgTrans

/* GLOBAL error reporting */
/* "t" == return type */
/* "n" == internal error number */
/* "p" == optional parameter */
/* "e" == standard error pointer */
#define return_error0(t,n)      { global_error0(n) ; return((t)-1) ; }
#define return_error1(t,n,p)    { global_error1((n),(p)) ; return((t)-1) ; }
#define return_errorX(t,e)      { global_errorX((_kernel_oserror *)(e)) ; return((t)-1) ; }
#define return_errorT(t,n,s,p1,p2)  { global_errorT((n),(s),(p1),(p2)) ; return((t)-1) ; }

/* Filing system error bases */
#define FS_errflag  (0x00010000)       /* Filing System error */
#define err_mask    (0xFF)
#define ext_err(v)  (((v) & err_mask) | FS_errflag | (fsnumber_MSDOSFS << 8))

/* The following are DOSFS specific error messages. */
#define err_badparargs        (0x00) /* In assembler stubs */
#define err_badparfile        (0x01) /* In assembler stubs */
#define err_badparfunc        (0x02) /* In assembler stubs */
#define err_notfile           (0x03) /* Uses Global message "IsntFil" */
#define err_fatloadfailed     (0x04)
#define err_heapexhausted     (0x05) /* Uses Global message "NoMem" */
#define err_namereadfailed    (0x06)
#define err_readfailed        (0x07)
#define err_writefailed       (0x08)
#define err_clusterchain      (0x09)
#define err_notDOSimage       (0x0A)
#define err_EOF               (0x0B)
#define err_invalidname       (0x0C)
#define err_invalidchar       (0x0D)
#define err_toolong           (0x0E)
#define err_nobootoption      (0x0F)
#define err_badformat         (0x10)
#define err_keyboardread      (0x11)
#define err_clusterinuse      (0x12)
#define err_badswi            (0x13) /* Uses Global message "BadSWI" */
#define err_buftoosmall       (0x14) /* Uses Global message "BufOFlo" */
#define err_nostack           (0x15) /* In assembler stubs */
#define err_disctoobig        (0x16)
#define err_outofrange        (0x17)

/* The following have been matched with FileCore error messages. */
#define err_notsupported      (0xA5) /* In assembler stubs */
#define err_baddrive          (0xAC)
#define err_dirfull           (0xB3)
#define err_notempty          (0xB4)
#define err_fileopen          (0xC2)
#define err_filelocked        (0xC3)
#define err_alreadyexists     (0xC4)
#define err_badtypes          (0xC5) /* Uses Global message "TypsBad" */
#define err_discfull          (0xC6)
#define err_nametoolong       (0xCC) /* Uses Global message "LongNam" */
#define err_objectnotfound    (0xD6) /* Uses Global message "NoAny" */
#define err_channel           (0xDE) /* Uses Global message "Channel" */
#define err_wildcardedname    (0xFD)

/* Message tokens for Global errors. */
#define tok_heapexhausted       "NoMem"
#define tok_buftoosmall         "BufOFlo"
#define tok_badswi              "BadSWI"
#define tok_notfile             "IsntFil"
#define tok_badtypes            "TypsBad"
#define tok_nametoolong         "LongNam"
#define tok_objectnotfound      "NoAny"
#define tok_channel             "Channel"

extern _kernel_oserror  _gerror ;    /* actual static error area */
extern _kernel_oserror *_syserr ;    /* return pointer */

extern _kernel_oserror *global_error(int number) ; /* error number 0..255 */
extern _kernel_oserror *global_errorP(int number,char *par) ;
extern _kernel_oserror *global_errorT(int number, char *token, char *par1, char *par2) ;
extern void global_error0(int number) ;
extern void global_error1(int number,char *par1) ;
extern void global_errorX(_kernel_oserror *error_pointer) ;

/*------------------------- msgtrans_closefile ----------------------------
 * Description: If the Messages file is open then this function closes it.
 *
 * Parameters:  None.
 *
 * Returns:     Nothing.
 */
extern void msgtrans_closefile(void);

/*--------------------------- msgtrans_lookup -----------------------------
 * Description: Lookup the token in the Messages file and if *buf is non-0
 *              then copy the string found into the buffer pointed to by *buf
 *              (performing substitutions if necessary) or if *buf is 0 then
 *              set *buf to the string found.
 *
 * Parameters:  char *token - Token to look for.
 *              char **buf  - Address of character buffer pointer.
 *                            If *buf == 0 then set to point to buffer on output.
 *              int *bufsz  - Size of buffer (if *buf is non-0).
 *                            If *buf == 0 then set to length of output string.
 *              char *p1    - Parameter 1.
 *              char *p2    - Parameter 2.
 *              char *p3    - Parameter 3.
 *              char *p4    - Parameter 4.
 *
 * Returns:     _kernel_error * - NULL if all goes well.
 */
extern _kernel_oserror *msgtrans_lookup(
  char *token,
  char **buf,
  int *bufsz,
  char *p1,
  char *p2,
  char *p3,
  char *p4
);

#endif
@


4.5
log
@Add missing message, use central allocations for DOSFS' FS number
Missing 'Stack full' error message added (German translation needed).
Use DOSFS FS number from headers.
Tested with floppy disc (FAT12), 1GB image file (FAT16) and 4GB image file (FAT32) with no issues seen.

Version 1.01. Tagged as 'DOSFS-1_01'
@
text
@d61 2
@


4.4
log
@Add some comments (!) and reindent FileSwitch interface
OpsGetPut
  DOSFS_put_bytes no longer passes an unnecessary dummy argument.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFind
  Suggested buffer to FileSwitch is now 1x512 sector (rather than 256).
  Note - nothing seems to use the cluster buffering code in DOSFS,
indeed nothing ever malloc()s a buffer.
  Check at line 237 of OpFind would never be true since FILE_subdir is
not 1, fixed.
  Return an error if the handle to close is invalid.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFile
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFunc
  A failure to find a slot to set the disc title now reports "Dir full"
not "Disc full"
  Reindented.
  Doxygen comments added to FileSwitch layer.

Version 0.99. Tagged as 'DOSFS-0_99'
@
text
@d20 3
a34 1
#define FS_number   (43)               /* DOSFS */
d36 1
a36 1
#define ext_err(v)  (((v) & err_mask) | FS_errflag | (FS_number << 8))
d39 3
d60 1
d63 1
d133 2
@


4.3
log
@Rationalise some defines
Many magic numbers changed to exported defines.
Eliminated unused "BOOTblock.h" (was just nesting 1 include file).
Moved non ASCII definitions out of "ASCII.h" then found the remainder weren't used => eliminated.

Version 0.98. Tagged as 'DOSFS-0_98'
@
text
@d67 1
d78 1
@


4.2
log
@Source file subdivision
The sources to DOSFS had become rather jumbled and monolithic
* Split FileSwitch interface out into seperate ops source files.
* Combined international error lookup with MsgTrans code.
* Split utility functions into 'Helpers.c' along with wildcard matching functions.
* Moved DOS naming functions into, erm, 'DOSnaming.c'.
Also
* Makefile tweaked to remove 'symbols' on clean.
* Obsolete 'Help' and 'Syntax' placed in attic.

RAM, debug, and ROM targets built. RAM target tested with a DOS floppy disc.

Version 0.96. Tagged as 'DOSFS-0_96'
@
text
@a19 7
/* Expected location of Messages file. */
#ifdef DEBUGMSGS /* Use debugging messages file if requested. */
#define ResourceFile "scsi::4.$.work.modules.dosfs.messages"
#else
#define ResourceFile "Resources:$.Resources.DOSFS.Messages"
#endif

@


4.1
log
@Initial revision
@
text
@d27 68
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
