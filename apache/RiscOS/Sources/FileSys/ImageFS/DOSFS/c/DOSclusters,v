head	4.7;
access;
symbols
	DOSFS-1_14:4.7
	DOSFS-1_13:4.7
	DOSFS-1_12:4.7
	DOSFS-1_11:4.6
	DOSFS-1_10:4.6
	DOSFS-1_09:4.6
	DOSFS-1_08:4.6
	DOSFS-1_07:4.6
	DOSFS-1_06:4.5
	DOSFS-1_05:4.4
	DOSFS-1_04:4.4
	DOSFS-1_03:4.4
	DOSFS-1_02:4.4
	DOSFS-1_01:4.4
	DOSFS-1_00:4.4
	DOSFS-0_99:4.3
	DOSFS-0_98:4.2
	DOSFS-0_97:4.1
	DOSFS-0_96:4.1;
locks; strict;
comment	@# @;


4.7
date	2018.02.19.00.06.05;	author jlee;	state Exp;
branches;
next	4.6;
commitid	ic65jLota7NRUorA;

4.6
date	2014.06.25.20.13.35;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	E7yWETwfWvNEvWFx;

4.5
date	2014.06.25.19.37.20;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	gFu51vOmpefejWFx;

4.4
date	2013.01.13.18.55.01;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	3lYJMhP8ONWX25Aw;

4.3
date	2013.01.13.18.52.34;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	oq0uLRDtA5Y625Aw;

4.2
date	2013.01.13.18.49.43;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	fjzSOoRRnhA815Aw;

4.1
date	2012.12.07.14.20.15;	author rsprowson;	state Exp;
branches;
next	;
commitid	jnwtWy3St1iqIivw;


desc
@@


4.7
log
@Reject overly-large discs, and other invalid things
Detail:
  c/Accessors, h/Accessors, Makefile - Added some simple 'image accessor' routines to abstract over accessing the underlying disc/image file. These accept 64bit disc addresses and will check to make sure any size limits imposed by the lower-level API are adhered to (512MB limit for FileCore_DiscOp, or extent of image file for OS_GBPB)
  h/MsgTrans, Resources/Germany/Messages, Resources/UK/Messages - Add a couple of new error messages
  h/Helpers - Add a couple of macros to simplify reading 16/32bit values that are split into multiple bytes in struct definitions. Change writeWORD & loadWORD to accept void* instead of char* so they can be used with other types like 'byte'
  h/DOSshape - Add '0' suffix to some struct members so they can be used with new READ_0123 macro
  h/ADFSshape - Make sure put_doublestep is safe to use with bools
  c/DOSdirs - Remove pointless malloc of small temporary array
  c/DOSclusters - Use new READ_ macros in max_sector()
  c/DOSFS - Use new READ_ macros so code is less painful to read. Use new image accessor system to get rid of some boilerplate for reading from the disc (+ extra error checks). Change 32bit values to 64bit where it looks like it's necessary, and use bools in place of a couple of 0/1 ints. Reject any discs which are too big for the 32bit fields in the ADFS disc record.
  c/OpsFunc - Update DOSFS_image_open in ways similar to the code in c/DOSFS, making use of READ_, image accessor, 64bit values, and adding extra error checks.
Admin:
  Tested with assorted large & small image files & SD cards on a BB-xM, and some DOS/Atari floppy discs on a RiscPC
  FAT partitions larger than 4GB (or which extend past the 4GB FileSwitch limit) are now rejected, as are image files which have been truncated
  A future improvement could be to lift the disc/partition identification code out of c/DOSFS and c/OpsFunc and unify it, since both files contain fairly similar code
  German messages are in need of translation


Version 1.12. Tagged as 'DOSFS-1_12'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> c.DOSclusters <*/
/*---------------------------------------------------------------------------*/
/* Cluster and FAT operations                     Copyright (c) 1989 JGSmith */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "Interface/HighFSI.h"
#include "DebugLib/DebugLib.h"

#include "DOSFS.h"
#include "TIMEconv.h"
#include "Helpers.h"
#include "MsgTrans.h"
#include "Ops.h"
#include "DOSclusters.h"
#include "DOSnaming.h"
#include "DOSdirs.h"

/*---------------------------------------------------------------------------*/

int getnextCLUSTER(int cluster,DOSdisc *ihand)
{
 int   nextcluster ;
 word  bitaddress ;
 word  byteaddress ;
 word  shift ;
 word  datavalue ;
// byte *FAT_base_address = (byte *) ( (int)(&(ihand->disc_FAT)) + ((ihand->disc_RESVDsec-1)*ihand->disc_secsize) );
 byte *FAT_base_address = (byte *) &ihand->disc_FAT;


 bitaddress = (ihand->disc_FATentry * cluster) ;
 byteaddress = (((bitaddress & 0xFFFFFFF8) >> 3) + (word)FAT_base_address) ;
 shift = (bitaddress & 0x00000007) ;
 datavalue = loadWORD((char *)byteaddress) ;
 dprintf(("","Base address %x (cl:%x)\n",(int)FAT_base_address,cluster));
 dprintf(("","Loaded from address %x\n",(int)byteaddress));
 dprintf(("","Datavalue = %x\n",datavalue));
 nextcluster = (int)((datavalue >> shift) & FAT_entry_mask(ihand)) ;
 dprintf(("","getnextCLUSTER %d -> %d\n", cluster, nextcluster));

 return(nextcluster) ;
}

/*---------------------------------------------------------------------------*/

int writenextCLUSTER(int cluster,int nextcluster,DOSdisc *ihand)
{
 word  bitaddress ;
 word  byteaddress ;
 word  shift ;
 word  datavalue ;
// byte *FAT_base_address = (byte *) ( (int)(&(ihand->disc_FAT)) + ((ihand->disc_RESVDsec-1)*ihand->disc_secsize) );
 byte *FAT_base_address = (byte *) &ihand->disc_FAT;

 dprintf(("","writenextCLUSTER: cluster = &%03X, nextcluster = &%03X\n",cluster,nextcluster));

 bitaddress = (ihand->disc_FATentry * cluster) ;
 byteaddress = (((bitaddress & 0xFFFFFFF8) >> 3) + (word)FAT_base_address) ;
 shift = (bitaddress & 0x00000007) ;
 datavalue = loadWORD((char *)byteaddress) ;
 datavalue &= ~(FAT_entry_mask(ihand) << shift) ;
 datavalue |= ((nextcluster & FAT_entry_mask(ihand)) << shift) ;
 writeWORD((char *)byteaddress,datavalue) ;

 ihand->disc_FATmodified = -1 ; /* the FAT has been updated */
 return(0) ;
}

/*---------------------------------------------------------------------------*/
/* findCLUSTERtype:
 * This steps through the FAT looking for a CLUSTER of the specified type.
 *      index         contains the starting point in the FAT
 *      FATlimit      defines the number of CLUSTERs contained in the FAT
 * The last FAT entry looked at is returned in "index". If there are no such
 * CLUSTERs then (-1) is returned.
 */
int findCLUSTERtype(DOSdisc *ihand,int *index,int type)
{
 int          cluster = -1 ;
 word         bitaddress ;
 word         byteaddress ;
 word         shift ;
 word         datavalue ;
 byte        *FAT_base_address = (byte *) &ihand->disc_FAT;
 /* JRS 2/3/92 Added CLUSTER_first(ihand) */
 int          FATlimit = CLUSTER_first(ihand) + ihand->disc_FATentries;

 while (*index < FATlimit)
  {
   bitaddress = (ihand->disc_FATentry * (*index)) ;
   byteaddress = (((bitaddress & 0xFFFFFFF8) >> 3) + (word)FAT_base_address) ;
   shift = (bitaddress & 0x00000007) ;
   datavalue = loadWORD((char *)byteaddress) ;
   cluster = (int)((datavalue >> shift) & FAT_entry_mask(ihand)) ;
//   dprintf(("","findCLUSTERtype: cluster = %x *index = %x byteaddress = %x dv = %x\n",cluster,*index,byteaddress,datavalue));
   if (cluster == type)
    return(*index) ;

   /* increment onto the next cluster entry */
   (*index)++ ;
  }

 /* no more CLUSTERs */
 dprintf(("","No more free clusters.. *index is %x type = %x fatlimit:%x fatbase:%p\n",*index,type,FATlimit,FAT_base_address));
 return(-1) ;
}

/*---------------------------------------------------------------------------*/

int countfreeclusters(DOSdisc *ihand)
{
 int numCLUSTERs = 0 ;
 int clusterINDEX = CLUSTER_first(ihand) ;

 /* returns the number of available clusters */

 dprintf(("","CountFreeClusters: ihand = %p, index=%x\n",ihand,clusterINDEX));
 while (findCLUSTERtype(ihand,&clusterINDEX,CLUSTER_unused(ihand)) != -1)
  {
   numCLUSTERs++ ;
   clusterINDEX++ ; /* step over the CLUSTER we have just found */
  }
 dprintf(("","CountFreeClusters: numClusters = %x\n",numCLUSTERs));
 return(numCLUSTERs) ;
}

/*---------------------------------------------------------------------------*/

int freeclusters(int startCLUSTER,DOSdisc *ihand)
{
 int lastCLUSTER = startCLUSTER ;
 int nextCLUSTER ;
 int count = 0;

 /* Free the cluster chain addresses by "startcluster" and mark "startcluster"
  * as the end of a chain.
  */
 dprintf(("","freeclusters: starting at cluster &%03X\n",startCLUSTER));

 /* Check that there are indeed CLUSTERs to be free'd */
 if ((startCLUSTER == 0) || (startCLUSTER >= CLUSTER_end(ihand)))
  return(0) ; /* NO CLUSTERs to be released */

 do
  {
   nextCLUSTER = getnextCLUSTER(lastCLUSTER,ihand) ;
   dprintf(("","freeclusters: lastCLUSTER = &%03X, nextCLUSTER = &%03X\n",lastCLUSTER,nextCLUSTER));
   writenextCLUSTER(lastCLUSTER,CLUSTER_unused(ihand),ihand) ;
   lastCLUSTER = nextCLUSTER ;
   if ( (count > ihand->disc_FATentries) || (nextCLUSTER < CLUSTER_first(ihand)) )
     /* JRS 6/3/92 Added test to terminate infinite loop if loop in (bad) FAT */
     { global_error0(err_clusterchain) ; break ; }
   count++;
  } while (nextCLUSTER < CLUSTER_end(ihand));

 ihand->disc_freeclusters += count;
 return(0) ;
}

/*---------------------------------------------------------------------------*/

/* Build free clusters into a chain and return the start cluster. */
int claimfreeclusters(int required, DOSdisc *ihand)
{
  int index = CLUSTER_first(ihand);
  int first, last;

  if (required <= 0)
    return 0;
 dprintf(("","claimfreeclusters: need: &%03X index:%x\n",required,index));

  /* Make sure there are enough free clusters. */
  if (required > ihand->disc_freeclusters)
    return_error0(int, err_discfull);

  ihand->disc_freeclusters -= required;

  first = last = findCLUSTERtype(ihand, &index, CLUSTER_unused(ihand));
  while (--required) {
    int next;
    index++;  /* Skip the one we just found. */
    next = findCLUSTERtype(ihand, &index, CLUSTER_unused(ihand));
    writenextCLUSTER(last, next, ihand);
    last = next;
  }
  /* Terminate the chain. */
  writenextCLUSTER(last, CLUSTER_rend(ihand), ihand);

  return first;
}

/*---------------------------------------------------------------------------*/

/* Adjust the length of the given cluster chain and return the start cluster. */
int adjustusedchain(int start, int required, DOSdisc *ihand)
{
  int next, cluster;

  /* If we are chopping to 0 length then this is really a free. */
  if (required <= 0) {
    freeclusters(start, ihand);
    return 0;
  }

  /* If start is 0 then no space has been allocated for the file yet. */
  if (start == 0)
    return claimfreeclusters(required, ihand);

  /* Follow the current chain until either we don't need any more (we need to chop)
   * or it is exhausted (we need to extend).
   */
  next = start;
  do {
    cluster = next;
    next = getnextCLUSTER(cluster, ihand);
    if (next < CLUSTER_first(ihand)) /* JRS 9/3/92 */
      return_error0(int,err_clusterchain) ;
  } while ( (--required) && (next < CLUSTER_end(ihand)) );

  /* The chain may be of the correct length anyway, hence we check both exit conditions. */
  if (required) {
    int extra;
    /* We need to extend the chain. */
    if ((extra = claimfreeclusters(required, ihand)) < 0)
      return -1;
    /* Tag onto the end of the existing chain. */
    writenextCLUSTER(cluster, extra, ihand);
  } else if (next < CLUSTER_end(ihand)) {
    /* We need to chop the chain. */
    freeclusters(next, ihand);
    /* Terminate the chopped chain. */
    writenextCLUSTER(cluster, CLUSTER_rend(ihand), ihand);
  }

  return start;
}

/*---------------------------------------------------------------------------*/

static int clusterinchain(int cluster, int object, DOSdisc *ihand)
{
  int count = 0;
  do {
    if (cluster == object)
      return 1;
    cluster = getnextCLUSTER(cluster, ihand);
    if ( (++count > ihand->disc_FATentries) || (cluster < CLUSTER_first(ihand)) )
      /* JRS 6/3/92 Added test to terminate loop in bad FAT */
      { global_error0(err_clusterchain) ; return 0 ; }
  } while (cluster < CLUSTER_end(ihand)) ;
  return 0;
}

/*---------------------------------------------------------------------------*/

int clusterfromoffset(int cluster, word *offset, DOSdisc *ihand)
{
  int count = 0;
  int clustersize = secsalloc(ihand) * DOSsecsize;
  do {
    if (*offset < clustersize)
      return cluster;
    cluster = getnextCLUSTER(cluster, ihand);
    (*offset) -= clustersize;
    if ( (++count > ihand->disc_FATentries) || (cluster < CLUSTER_first(ihand)) )
      /* JRS 6/3/92 Added test to terminate loop in bad FAT */
      return_error0(int,err_clusterchain) ;
  } while (cluster < CLUSTER_end(ihand));
  return_error0(int, err_EOF);
}

/*---------------------------------------------------------------------------*/

int DOS_FAT_RW(int op, DOSdisc *ihand)
{
  int loop, sec, copies = 0;
  int numFATs = ihand->disc_boot.BOOT_num_fats;

  dprintf(("","DOS_FAT_RW: op=%c\n",op==Rdata ? 'R' : 'W'));
  dprintf(("","DOS_FAT_RW: disc_RESVDsec = %x\n",ihand->disc_RESVDsec));
  dprintf(("","DOS_FAT_RW: base of fat = sector 0x%x\n",ihand->disc_RESVDsec+1));
  for (loop = 0, sec = ihand->disc_RESVDsec+1; loop < numFATs; loop++, sec += ihand->disc_FATsecs) {
//  for (loop = 0, sec = DOS_FAT_sector; loop < numFATs; loop++, sec += sizeinsec) {
    if (op == Wdata) ihand->disc_flags |= disc_UPDATEID;  /* JRS 13/4/92 added to prevent ambiguous disc name error */
    dprintf(("","DOS_FAT_RW: op = %c, copy = %d\n",(op == Rdata ? 'R' : 'W'), loop));
    if (DOS_image_RW(op, sec, 0, (byte *)&(ihand->disc_FAT), ihand->disc_FATsize, ihand) == 0) {
      copies++;
      if (op == Rdata)
        break;
    }
  }

  if (copies == 0) {
    dprintf(("","DOS_FAT_RW: operation failed\n"));
    return -1;
  }

  ihand->disc_FATmodified = 0;

  if (op == Rdata)
    ihand->disc_freeclusters = countfreeclusters(ihand);

  return 0;
}

/*---------------------------------------------------------------------------*/

int ensure_FATs(DOSdisc *ihand)
{
 if (ihand->disc_FATmodified)
  return DOS_FAT_RW(Wdata, ihand);

 return(0) ;
}

/*!
 * \param  memaddr Source or destination of the data
 * \param  bytes Number of bytes
 * \param  foff File offset
 * \param  fhand Fileswitch handle
 * \param  op Reads, writes, or zeroes
 * \brief  Read or write a group of bytes to a file inside the image filing system
 * \return 0 for success, -1 for failure
 */ 
int DOS_bytes_RW(int op, char *memaddr, word bytes, word foff, FILEhand *fhand)
{
  int clustercount = 0;
  DOSdisc *ihand = fhand->ihand;
  int clustersize, nextcluster;
  word size;
  int zero = 0;
  int result = 0;

  dprintf(("","DOS_bytes_RW: op = %c, memaddr = &%08X, bytes = %d, foff = %d, fhand = &%08X\n", (op == Rdata ? 'R' : 'W'), (int)memaddr, bytes, foff, (int)fhand));

  if (bytes == 0)
    return 0;

  if (op == Wzero) {
    zero = 1;
    op = Wdata;
  }

  /* Check if the request is outside the file. */
  if (foff + bytes > fhand->filelen) {
    if (op == Rdata) {
      /* If reading then generate an error for an offset outside the file but just
       * truncate the request if the requested number of bytes is too large.
       */
      if (foff > fhand->filelen) {
        return_error0(int, err_EOF);
      } else
        bytes = fhand->filelen - foff;
    } else {
      /* If writing then extend the file. */
      if (DOSFS_ensure(fhand, foff + bytes) < (foff + bytes))
        return -1;
    }
  }

  /* Determine which cluster the operation is to start in (on exit foff will contain
   * the offset within that cluster).
   */
  if ((nextcluster = clusterfromoffset(fhand->startCLUSTER, &foff, ihand)) < 0)
    return -1;

  /* If the operation is to write zeros then allocate a suitable block of memory and zero it. */
  clustersize = secsalloc(ihand) * DOSsecsize;
  if (zero) {
    size = (bytes < clustersize ? bytes : clustersize);
    if ((memaddr = (char *)calloc(size, 1)) == NULL)
      return_errorT(int, err_heapexhausted, tok_heapexhausted, 0, 0);
  }

  while (bytes > 0) {
    if (nextcluster >= CLUSTER_end(ihand))
    {
      global_error0(err_EOF);
      result = -1;
      break;
    }
    dprintf(("","DOS_bytes_RW: cluster offset = %d, bytes left = %d\n",foff,bytes));

    /* Terminate loops in bad FAT. */
    if ( (++clustercount > ihand->disc_FATentries) || (nextcluster < CLUSTER_first(ihand)) )
    {
      global_error0(err_clusterchain);
      result = -1;
      break;
    }

    if (bytes > clustersize-foff) {
      /* Try to read/write as much as possible straight to/from memory using a cluster multiple op. */
      size = (zero ? clustersize-foff : bytes);
      dprintf(("","DOS_bytes_RW: trying %d bytes starting at cluster %d\n",size,nextcluster));
      if ((nextcluster = DOS_multiple_RW(op, nextcluster, foff, memaddr, size, &size, ihand)) < 0)
      {
        result = -1;
        break;
      }
    } else {
      /* Do the last partial cluster. */
      size = bytes;
      dprintf(("","DOS_bytes_RW: transferring %d bytes in cluster %d\n",size,nextcluster));
      if ((nextcluster = DOS_cluster_RW(op, nextcluster, foff, memaddr, size, ihand)) < 0)
      {
        result = -1;
        break;
      }
    }
    foff = 0;         /* if we go round again then must have stopped at cluster boundary */

    if (!zero)
      memaddr += size;
    bytes -= size;
  }

  if (zero) free(memaddr);

  return result;
}

/*!
 * \param  memaddr Source or destination of the data
 * \param  len Number of bytes
 * \param  coff Cluster offset
 * \param  cluster Cluster number to start from
 * \param  op Reads, writes, or zeroes
 * \brief  Load/save the specified (possibly partial) cluster to/from the given memory address
 * \return 0 if no more clusters, n next cluster number, or -1 if error
 */
int DOS_cluster_RW(int op, int cluster, int coff, char *memaddr, word len, DOSdisc *ihand)
{
 int           nextcluster = -1 ;
 int           startsector = CLUSTERtoSECTOR(cluster,ihand) ;

 dprintf(("","DOS_cluster_RW: cluster= %x\n",cluster));
 dprintf(("","DOS_cluster_RW: startsector = %x\n",startsector));
 dprintf(("","DOS_cluster_RW: sector = %x\n",startsector+(coff>>log2DOSsecsize)));

 /* NB. len MUST always be <= the cluster size (in bytes) */
 if (DOS_image_RW(op, startsector + (coff>>log2DOSsecsize), coff & (DOSsecsize - 1), (byte *)memaddr, len, ihand) < 0)
 {
   return(-1) ;
 }
 nextcluster = getnextCLUSTER(cluster,ihand) ;
 if ((nextcluster >= CLUSTER_end(ihand)) || (nextcluster < CLUSTER_first(ihand)))
 {
   return (0) ;
 }
 return (nextcluster) ;
}

/*!
 * \param  ihand Image handle
 * \param  memaddr Source or destination of the data
 * \param  ta Variable to accept number of bytes actually transferred
 * \param  limit Number of bytes in buffer 'ma'
 * \param  coff Cluster offset
 * \param  cluster Cluster number to start from
 * \param  op Reads, writes, or zeroes
 * \brief  Load/save as many consecutive CLUSTERs as possible, starting at the specified
 *         cluster, to/from the given memory address.
 * \return 0 if no more clusters, n next cluster number, or -1 if error
 */
int DOS_multiple_RW(int op, int cluster, int coff, char *memaddr, word limit, word *ta, DOSdisc *ihand)
{
 int count = 0;
 int           nextcluster = cluster ;
 int           startsector = CLUSTERtoSECTOR(cluster,ihand) ;
 int           allocsize = (secsalloc(ihand) * DOSsecsize) ;

 dprintf(("","DOS_multiple_RW: Op = %c, cluster = %03x, coff = %x length = %x,allocs:%x\n",(op==Rdata)?'R':'W',cluster,coff,limit,allocsize));

 *ta = 0 ;      /* number of bytes we are going to transfer */
 /* "limit" is the extent of the maximum amount of data we should transfer */
 limit += coff;
 do
  {
   *ta += allocsize ;   /* this CLUSTER will be included */
   cluster = nextcluster ;
   nextcluster = getnextCLUSTER(cluster,ihand) ;
   if ( (++count > ihand->disc_FATentries) || (nextcluster < CLUSTER_first(ihand)) )
   {
 dprintf(("","DOS_multiple_RW: failed %x %x %x %x \n",count,ihand->disc_FATentries,nextcluster , CLUSTER_first(ihand)));
     /* JRS 6/3/92 Added test to terminate loop in bad FAT */
     return_error0(int,err_clusterchain) ;
   }
   if (nextcluster >= CLUSTER_end(ihand))
    {
     nextcluster = 0 ; /* end of cluster chain */
     if (*ta < limit)
      {
       dprintf(("","DOS_multiple_RW: end of CLUSTER chain reached (&%08X) before limit &%08X)\n",*ta,limit));
       return_error0(int,err_clusterchain) ;   /* not all of the file loaded */
      }
    }
  } while ((*ta < limit) && (nextcluster == cluster + 1)) ;

 /* transfer the data */
 if (*ta > limit)
  *ta = limit;
 *ta-=coff;
 dprintf(("","DOS_multiple_RW: ss:%x sec:%x offset:%x\n",startsector+(coff>>log2DOSsecsize),startsector,coff&(DOSsecsize-1)));
 if (DOS_image_RW(op,startsector+(coff>>log2DOSsecsize),coff&(DOSsecsize-1),(byte *)memaddr,*ta,ihand) < 0)
 {
 dprintf(("","DOS_multiple_RW: DOS_image_RW failed \n"));
  return(-1) ;
 }
 /* "*ta" is updated to hold the number of bytes actually transferred */
 return(nextcluster) ;
}

/*!
 * \param  ihand Image handle
 * \param  memaddr Source or destination of the data
 * \param  bytelength Number of bytes in buffer 'ma'
 * \param  startcluster Cluster number to start from
 * \param  op Reads, writes, or zeroes
 * \brief  Load/save as many consecutive CLUSTERs as possible, starting at the specified
 *         cluster, to/from the given memory address.
 * \return 0 if no more clusters, n next cluster number, or -1 if error
 */
int DOS_object_RW(int op, int startcluster, char *memaddr, word bytelength, DOSdisc *ihand)
{
 word allocsize = secsalloc(ihand) * DOSsecsize;
 word tamount ;
 int  nextcluster = startcluster ;

 dprintf(("","DOS_object_RW: op = %c, startCLUSTER = &%03X, ma = &%08X, bytelength = &%08X, ihand = &%08X\n",(op == Rdata ? 'R' : 'W'),startcluster,(word)memaddr,bytelength,(word)ihand));

 /* load whole clusters directly into memory */
 while ((bytelength != 0) && (nextcluster > 0))
  {
   if (bytelength < allocsize)
    {
     tamount = bytelength ;
     dprintf(("","DOS_object_RW: Calling Cluster_RW\n"));
     nextcluster = DOS_cluster_RW(op,nextcluster,0,memaddr,bytelength,ihand) ;
    }
   else
   {
    dprintf(("","DOS_object_RW: Calling Multiple_RW\n"));
    nextcluster = DOS_multiple_RW(op,nextcluster,0,memaddr,bytelength,&tamount,ihand) ;
   }
   /* cluster op failure */
   if (nextcluster == -1)
    return(-1) ;       /* assumes error message already defined */

   bytelength -= tamount ;
   memaddr += tamount ;
  }
   dprintf(("","DOS_object_RW: nextcluster = &%03X, bytelength = &%08X\n",nextcluster,bytelength));

 if ((nextcluster != 0) || (bytelength != 0))
  {
   dprintf(("","DOS_object_RW: FAILURE (nextcluster = &%03X, bytelength = &%08X)\n",nextcluster,bytelength));
   return_error0(int,err_clusterchain) ; /* the CLUSTER chain is bad */
  }

 return(0) ;
}

/*!
 * \param  ihand Image handle
 * \param  memaddr Source or destination of the data
 * \param  nbytes Number of bytes in buffer 'ma'
 * \param  off Offset from sector start
 * \param  sec Sector number to start from
 * \param  op Reads, writes, or zeroes
 * \brief  Read or write a block from the specified image file
 * \return -1 if error occurred
 */
int DOS_image_RW(int op,word sec,word off,byte *memaddr,word nbytes,DOSdisc *ihand)
{
 word              discaddress ;
 _kernel_swi_regs  reglist ;
 _kernel_oserror  *rerror ;

 dprintf(("","DOS_image_RW: %c sec: %x ma: &%08X nbytes: &%08X ihand: &%08X\n",((op == Rdata) ? 'R' : 'W'),sec,(int)memaddr,nbytes,(word)ihand));

 /* NOTE: the "disc_winioffset" value SHOULD be 0x00000000 for floppies */
 discaddress = ((sec - 1) * DOSsecsize) + ihand->disc_winioffset + off ;

 dprintf(("","DOS_image_RW: handle = &%08X, disc address = &%08X\n",ihand->disc_fhand,discaddress));

 /* transfer the bytes */
 reglist.r[0] = ((op == Rdata) ? OSGBPB_ReadFromGiven : OSGBPB_WriteAtGiven) ;
 reglist.r[1] = ihand->disc_fhand ; /* FileSwitch handle */
 reglist.r[2] = (word)memaddr ;
 reglist.r[3] = nbytes ;
 reglist.r[4] = discaddress ;
 reglist.r[5] = NULL ;
 reglist.r[6] = NULL ;

 if ((rerror = _kernel_swi(OS_GBPB,&reglist,&reglist)) != NULL)
  {
   dprintf(("","DOS_image_RW: (&%08X) \"%s\"\n",rerror->errnum,rerror->errmess));
   return_errorX(int,rerror) ;
  }

 dprintf(("","DOS_image_RW: transfer complete, &%08X bytes left\n",reglist.r[3]));

 if (reglist.r[3] != 0)
  {
   return_error0(int,((op == Rdata) ? err_readfailed : err_writefailed)) ;
  }

 /* If this call has written data to the image (op == Wdata) and the new image
  * ID flag is set then we must generate a new disc ID and tell FileSwitch
  * about it.
  *     OS_Args
  *             r0 = 8
  *             r1 = image file handle
  *             r2 = new image identity
  */
 if ((op == Wdata) && (ihand->disc_flags & disc_UPDATEID))
  return(update_imageID(ihand)) ;

 return(0) ;
}

/*---------------------------------------------------------------------------*/

/*!
 * \param  fname Full path name
 * \param  leafname NULL terminated filename
 * \param  ld  Load address
 * \param  ex  Exec address
 * \param  bs  Base address
 * \param  len Length of data
 * \param  cdir Current directory (where file is to be placed)
 * \param  fzero TRUE if we are to zero the data CLUSTERs
 * \param  ihand Image handle
 * \return -1 if the save failed
 */
int saveFILE(char *fname,char *leafname,word ld,word ex,char *bs,word len,DIR_info **cdir,DOS_direntry **dentry,int fzero,DOSdisc *ihand)
{
  int           CLUSTERsize ;
  int           CLUSTERs_required ;
  int           loop ;
  int           startCLUSTER ; /* cluster where the file starts */
  time5byte     saveTIME ;     /* local time save started at */
  DIR_info     *pdir = NULL ;  /* parent directory */
  DOS_direntry *lfn[(MaxString + 12) / 13];
  int           numreq, diroffset;
  int           not_sfn;
  char         *longfileholder = NULL;
  char          shortname[13];
 
  get_RISCOS_TIME(&saveTIME) ;
 
  dprintf(("","saveFILE: \"%s\" len &%08X (*cdir = &%08X)\n",leafname,len,(int)(*cdir)));
 
  /* calculate the number of complete clusters required to hold the object */
  CLUSTERsize = cluster_size(&(ihand->disc_boot)) ;
  CLUSTERs_required = len / CLUSTERsize ;
  if (len & (CLUSTERsize - 1)) CLUSTERs_required++ ; /* Round up partials */
 
  dprintf(("","saveFILE: CLUSTERs_required = %d\n",CLUSTERs_required));
 
  /* check to see if the file already exists */
  /* start at the beginning of the directory */
  loop = 0 ;
  if ((*dentry = findDIRentry(leafname,*cdir,(*cdir)->dir_size,&loop))!=NULL)
  {
    dprintf(("","saveFILE: file already exists\n"));
    
    /* Make sure that the file is not open. */
    if (find_open_file(fname, *dentry, ihand) >= 0)
     return_error1(int, err_fileopen, fname);
    
    /* Make sure the file isn't locked. */
    if (((*dentry)->FILE_attribute & FILE_readonly) != 0)
     return_error1(int, err_filelocked, fname);
    
    startCLUSTER = get_FILE_cluster(*dentry,ihand) ;
    
    if ((startCLUSTER = adjustusedchain(startCLUSTER, CLUSTERs_required, ihand)) < 0)
      return -1;
  }
  else
  {
    dprintf(("","saveFILE: file does NOT exist\n"));
 
    /* Try to allocate the long filename array. The leafname has a NULL
     * terminator, rounded up to the nearest block of 13, plus one extra
     * for the DOS short name   length + 1 + 12 + 1 = length + 2
     *                          ---------------       ------
     *                                 13               13
     */
    numreq = (strlen(leafname) / 13) + 2;
    dprintf(("","saveFILE: numreq = %d\n",numreq));
    if (get_dir_entry_array(lfn, ihand, numreq, cdir, &pdir,NULL) < 0)
    {
      return -1;
    }
    dprintf(("","saveFILE: p1 size =%x \n",(*cdir)->dir_size));
 
    /* "dentry" = pointer to the directory entry to create */
    if ((startCLUSTER = claimfreeclusters(CLUSTERs_required, ihand)) < 0)
    {
      return -1;
    }
 
    /* Create 8.3 filename from leafname */
    not_sfn = shorten_lfn(leafname, shortname, *cdir);
    (*dentry) = not_sfn ? lfn[numreq - 1] : lfn[0];
 
    dprintf(("","saveFILE: long filename = '%s'\n",leafname));
    dprintf(("","saveFILE: short filename = '%s'\n",shortname));

    if (not_sfn) MakeLFNEntries(lfn,numreq,leafname,shortname);
    sprintf((char *)&((*dentry)->FILE_status), "%-8.8s%-3s", shortname, &shortname[8]);

    /* mark the file as suitable for archiving */
    (*dentry)->FILE_attribute = FILE_archive ;
    memset((char *)&((*dentry)->FILE_reserved),0,spare1) ; /* ZERO "spare1" bytes */
    if(not_sfn)
    {
      longfileholder = (char *)malloc(strlen(leafname) + 1);
      if (longfileholder == NULL)
      {
        return_errorT(int,err_heapexhausted, tok_heapexhausted, 0, 0);
      }
      strcpy(longfileholder, leafname);
    }
    
    diroffset = (int)((int)(*dentry) - DI_Base(*cdir)) / sizeof(DOS_direntry);
    (*cdir)->lfnp[diroffset] = longfileholder;
    dprintf(("","saveFILE: &((*cdir)->lfnp[diroffset]) = %p\n",&((*cdir)->lfnp[diroffset])));
    dprintf(("","saveFILE: CBC dir = %x\n",DI_Base(*cdir)));
  }
 
  set_dir_flags(*cdir, dir_MODIFIED) ; /* directory updated */
 
  DOS_newdirentry * mentry = (DOS_newdirentry *)(*dentry);
  mentry->FILE_CrtTimeTenth = 0;
  mentry->FILE_NTRes = 0;
  put_FILE_time(mentry->FILE_time,mentry->FILE_timeHI,RISCOStoTIME(&saveTIME)) ;
  put_FILE_time(mentry->FILE_CrtTime,mentry->FILE_CrtTimeHi,RISCOStoTIME(&saveTIME)) ;
  put_FILE_date(mentry->FILE_date,mentry->FILE_dateHI,RISCOStoDATE(&saveTIME)) ;
  put_FILE_date(mentry->FILE_CrtDate,mentry->FILE_CrtDateHi,RISCOStoDATE(&saveTIME)) ;
  put_FILE_date(mentry->FILE_LstAccDate,mentry->FILE_LstAccDateHi,RISCOStoDATE(&saveTIME)) ;
  mentry->FILE_NTRes = 0;
 
 
  dprintf(("","saveFILE: NTRes = %x\n",mentry->FILE_NTRes));
 
  dprintf(("","saveFILE: startCLUSTER = &%03X\n",startCLUSTER));
 
  put_FILE_cluster((*dentry),startCLUSTER,ihand) ;
  (*dentry)->FILE_size = len ;
 
  dprintf(("","saveFILE: NTRes = %x\n",mentry->FILE_NTRes));
 
  /* copy the data from memory into the allocated clusters */
  /* use "saveOBJECT" to perform this */
  if (fzero == 0 && len)
  {
    if (DOS_object_RW(Wdata,startCLUSTER,bs,len,ihand) != 0)
    {
      dprintf(("","saveFILE: \"saveOBJECT\" call failed\n"));
      return -1;
    }
  }
 
  dprintf(("","saveFILE: NTRes = %x\n",mentry->FILE_NTRes));
  /* Update the load and exec addresses */
  update_loadexec(*dentry, ld, ex);
  dprintf(("","saveFILE: p3\n"));
 
  if (pdir != NULL)
  {
    if (ensure_directory(pdir)!= 0)
    {
      dprintf(("","saveFILE: ensure_dir failed\n"));
      return -1;
    }
  }
 
  /* now ensure all the directory information and FATs onto the disc */
  if ((ensure_directory(*cdir)!= 0) || (ensure_FATs(ihand) != 0))
  {
    dprintf(("","saveFILE: ensure_dir || ensure_FATs failed\n"));
    return(-1) ; /* error already defined */
  }
  dprintf(("","saveFILE: NTRes = %x\n",mentry->FILE_NTRes));
  /* and we have a nice return */
  return(0) ;
}

/* Extend or truncate the given file to the required length. */
int ensure_exact(FILEhand *fhand,int ensure)
{
 int  CLUSTERsize ;         /* CLUSTER size in bytes */
 int  CLUSTERs_required ;   /* CLUSTERs required by the ensure operation */
 int  startCLUSTER ;        /* first CLUSTER allocated to file */
 int  newfilelen = ensure ; /* file length after truncation */

 dprintf(("","DOSFS_ensure_exact: fhand &%08X (fext &%08X)\n",(int)fhand,ensure));

 CLUSTERsize = cluster_size(&(fhand->ihand->disc_boot)) ;
 CLUSTERs_required = ensure / CLUSTERsize ;
 if (ensure & (CLUSTERsize - 1)) CLUSTERs_required++ ; /* Round up partials */

 startCLUSTER = fhand->startCLUSTER ;
 if ((startCLUSTER = adjustusedchain(startCLUSTER, CLUSTERs_required, fhand->ihand)) < 0)
   return -1;

 if (ensure_FATs(fhand->ihand) != 0) {
  /* We've messed up the FAT so re-load it. */
  DOS_FAT_RW(Rdata, fhand->ihand);
  return -1; /* error already defined */
 }

 fhand->startCLUSTER = startCLUSTER ;
 fhand->filelen = newfilelen ;

 return(0) ;
}

/*-------------------------------------------------------------------------*/
/* Read (and scan) directories recursively until we find an object with
 * offCLUSTER contained within it.  namebuff should contain the pathname
 * to start searching from (usually the null string "");
 */
int findCLUSTER(int offCLUSTER,char *namebuff,int blen,DOSdisc *ihand)
{
 char          *DOSname = NULL ; /* current path position */
 DIR_info      *cdir = NULL ;    /* pointer to the loaded directory */
 int            loop ;           /* general index counter */
 DOS_direntry  *dentry ;         /* directory entry structure pointer */
 char          *nbuff = (char *)malloc(DOSnamesize) ;
 int           leafind;

 dprintf(("","findCLUSTER: offCLUSTER &%03X, namebuff \"%s\", blen &%08X\n",offCLUSTER,namebuff,blen));

 if (nbuff == NULL) /* failed to allocation name buffer */
  return_errorT(int,err_heapexhausted,tok_heapexhausted,0,0) ;

 leafind = strlen(namebuff);

 if ((DOSname = (char *)malloc(MaxString)) == NULL)
  {
   free(nbuff) ;
   return_errorT(int,err_heapexhausted,tok_heapexhausted,0,0) ;
  }

 if ((int)convertRISCOStoLFN(namebuff,DOSname) < 0)
  {
   free(DOSname) ;
   free(nbuff) ;
   return(-1) ; /* error already defined */
  }

 /* load the desired directory */
 cdir = loadDIR(DOSname, ihand) ;
 if ((int)cdir == -1)
  {
   dprintf(("","findCLUSTER: no directory loaded\n"));
   free(DOSname) ;
   free(nbuff) ;
   return(-1) ; /* error message already defined */
  }

 /* scan entries from the beginning of this directory */
 loop = 0 ;
 do
  {
   if ((dentry = getnextDIRentry((DOS_direntry *)DI_Base(cdir),cdir->dir_size,&loop)) != NULL)
    {
     /* "getnextDIRentry" returns all FILE types: This includes volume labels
      * and hidden and system files. We must scan the allocated CLUSTER chain
      * of every object, recursing into directory objects.
      */
     if ((dentry->FILE_attribute & FILE_volume) == 0)
      {
       /* we have a useable directory entry */
       char *cfile ;
       if ((cfile = buildFILEname(dentry,nbuff)) != NULL)
        {
         int startCLUSTER ;
         if ((int)convertDOStoRISCOS(cfile,DOSname) < 0)
          {
           free(DOSname) ; /* release converted pathname buffer */
           free(nbuff) ;   /* release single level name buffer */
           return(-1) ;    /* error already defined */
          }
         cfile = DOSname ; /* RISC OS name for this object */
         if ((leafind + strlen(cfile) + 1) > blen) {
           /* pathname too long for buffer */
           free(DOSname) ; /* release name buffer */
           free(nbuff) ;   /* release single level name buffer */
           return_errorT(int,err_buftoosmall,tok_buftoosmall,0,0) ;
         }
         sprintf(namebuff + leafind,".%s",cfile) ;
         if ((startCLUSTER = get_FILE_cluster(dentry,ihand)) != 0x000)
          {
           if (clusterinchain(startCLUSTER, offCLUSTER, ihand))
            {
             free(DOSname) ; /* release name buffer */
             free(nbuff) ;   /* release single level name buffer */
             return(1) ;     /* CLUSTER has been found */
            }
          }
         if ((dentry->FILE_attribute & FILE_subdir) != 0)
          {
           int state ;
           if (((state = findCLUSTER(offCLUSTER,namebuff,blen,ihand)) == 1) || (state < 0))
            {
             free(DOSname) ; /* release name buffer */
             free(nbuff) ;   /* release single level name buffer */
             if (state < 0)
              return(-1) ;   /* error already defined */
             return(1) ;     /* CLUSTER has been found */
            }
          }
        }
       else
        {
         free(DOSname) ; /* release converted pathname buffer */
         free(nbuff) ;   /* release single level name buffer */
         return_error0(int,err_namereadfailed) ;
        }
      }
      *(namebuff + leafind) = '\0';
    }
  } while ((dentry != NULL) && (loop >= 0)) ;

 free(DOSname) ; /* release converted pathname buffer */
 free(nbuff) ;   /* release single level name buffer */
 return(0) ; /* CLUSTER not found */
}

/*-------------------------------------------------------------------------*/
/* Return the maximum number of sectors given a disc's boot block.
 */
word max_sector(DOS_bootsector *bb)
{
        word max_sect = READ_LOHI(bb->BOOT_max_sect);

 if (max_sect == 0)
  {
   max_sect = READ_0123(bb->big_sect);
  }

 dprintf(("","max_sector: boot block at &%08X, max_sect = %d\n",(int)bb,max_sect));

 return max_sect;
}

@


4.6
log
@Change last couple of uses of trace macros to use DebugLib
This town ain't big enough for the two of us.

Version 1.07. Tagged as 'DOSFS-1_07'
@
text
@d960 1
a960 1
        word max_sect = (bb->BOOT_max_sectHI << 8) | (bb->BOOT_max_sect);
d964 1
a964 2
   max_sect = (bb->big_sect3 << 24) | (bb->big_sect2 << 16) |
              (bb->big_sect1 << 8) | bb->big_sect;
@


4.5
log
@Revise filename shortening rules
The rules DOSFS used to create the short name version of a long filename were quite wide of the recommendations from Microsoft. This causes problems in particular with bootloaders that are a little more simplistic and use the short name form, only to find "BOOTCODE.BIN" has been replaced by "BOOTCO~1.BIN" by DOSFS.
Also, the long filename entried created for new long filenames left the reserved fields unset. Some of these seem to have special meanings to Windows which faults them ("extended attribute handle invalid") when running chkdsk.

DOSnaming.c: replaced the shorten_lfn function, sprinkled in a few token consts, set the reserved fields in long file names to 0
DOSclusters.c/OpsFunc.c/OpsFile.c: remove shorttemp[14] no longer needed, simplify sprintf/memcpy/memcpy into a single sprintf
DOSFS.h: familiar MIN/MAX maxros added

Tested in isolation in harness "test/shorten" and comparing floppy discs generated with "test/shortgen" from Windows and DOSFS.
Fixes ticket #313.

Version 1.06. Tagged as 'DOSFS-1_06'
@
text
@a35 1
#include "debug.h"
@


4.4
log
@Allow RAM builds with messages in, fix for saving to images > 2G
RAM build include messages.
Removed atexit() handler, in favour of finalisation-code option in CMHG file.
Changed cluster rounding in saveFILE() to deal with extents > 2G.

Version 1.00. Tagged as 'DOSFS-1_00'
@
text
@a669 1
  char          shorttemp[14];
d727 1
a727 1
    not_sfn = shorten_lfn(leafname, shortname, shorttemp, *cdir);
d730 6
a735 20
    dprintf(("","saveFILE: long filename = %s\n",leafname));
    dprintf(("","saveFILE: short filename = \'%c%c%c%c%c%c%c%c\' ext=\'%c%c%c\'\n",
                shortname[0],shortname[1],shortname[2],shortname[3],shortname[4],shortname[5],shortname[6],shortname[7],
                shortname[8],shortname[9],shortname[10]));
 
    if (not_sfn) MakeLFNEntries(&lfn[0],numreq,leafname,shortname);
 
    /* write the information into the directory entry
     *
     * This requires the filename to be split into name and extension fields
     * We fill the name with SPACEs first (the string terminator (NULL) is
     * placed in the attributes field)
     *
     * NOTE: these should be done in this order due to the fact that the
     *       text building function terminates each string with a NUL
     */
    sprintf((char *)&((*dentry)->FILE_status),"           ") ;
    memcpy((char *)&((*dentry)->FILE_status), &shortname[0], 8);
    memcpy((char *)&((*dentry)->FILE_extension), &shortname[8], 3);
 
@


4.3
log
@Add some comments (!) and reindent FileSwitch interface
OpsGetPut
  DOSFS_put_bytes no longer passes an unnecessary dummy argument.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFind
  Suggested buffer to FileSwitch is now 1x512 sector (rather than 256).
  Note - nothing seems to use the cluster buffering code in DOSFS,
indeed nothing ever malloc()s a buffer.
  Check at line 237 of OpFind would never be true since FILE_subdir is
not 1, fixed.
  Return an error if the handle to close is invalid.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFile
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFunc
  A failure to find a slot to set the disc title now reports "Dir full"
not "Disc full"
  Reindented.
  Doxygen comments added to FileSwitch layer.

Version 0.99. Tagged as 'DOSFS-0_99'
@
text
@d645 12
d659 45
a703 40
 /* in: fname    : full path name
  *     leafname : NULL terminated filename
  *     ld       : load address
  *     ex       : exec address
  *     bs       : base address
  *     len      : length of data
  *     cdir     : current directory (where file is to be placed)
  *     fzero    : TRUE if we are to zero the data CLUSTERs
  *     ihand    : filesystem image handle
  */
 int           CLUSTERsize ;
 int           CLUSTERs_required ;
 int           loop ;
 int           startCLUSTER ; /* cluster where the file starts */
 time5byte     saveTIME ;     /* local time save started at */
 DIR_info     *pdir = NULL ;  /* parent directory */
 DOS_direntry *lfn[20];
 int          numreq=0;
 int          not_sfn;
 char         shortname[13];
 shortname[11]=0;
 shortname[12]=0;

 if ((int)len < 0)
   return_error0(int, err_discfull);

 get_RISCOS_TIME(&saveTIME) ;

 dprintf(("","saveFILE: \"%s\" len &%08X (*cdir = &%08X)\n",leafname,len,(int)(*cdir)));

 /* calculate the number of complete clusters required to hold the object */
 CLUSTERsize = cluster_size(&(ihand->disc_boot)) ;
 CLUSTERs_required = ((len + (CLUSTERsize - 1)) / CLUSTERsize) ;

 dprintf(("","saveFILE: CLUSTERs_required = %d\n",CLUSTERs_required));

 /* check to see if the file already exists */
 /* start at the beginning of the directory */
 loop = 0 ;
 if ((*dentry = findDIRentry(leafname,*cdir,(*cdir)->dir_size,&loop))!=NULL)
d705 63
a767 14
   dprintf(("","saveFILE: file already exists\n"));

   /* Make sure that the file is not open. */
   if (find_open_file(fname, *dentry, ihand) >= 0)
    return_error1(int, err_fileopen, fname);

   /* Make sure the file isn't locked. */
   if (((*dentry)->FILE_attribute & FILE_readonly) != 0)
    return_error1(int, err_filelocked, fname);

   startCLUSTER = get_FILE_cluster(*dentry,ihand) ;

   if ((startCLUSTER = adjustusedchain(startCLUSTER, CLUSTERs_required, ihand)) < 0)
     return -1;
d769 26
a794 1
 else
d796 5
a800 61
   dprintf(("","saveFILE: file does NOT exist\n"));

   numreq = (strlen(leafname)/13) + 2;
   dprintf(("","saveFILE: numreq = %d\n",numreq));

   if(get_dir_entry_array(lfn, ihand, numreq, cdir, &pdir,NULL) <0) return -1;
   dprintf(("","saveFILE: p1 size =%x \n",(*cdir)->dir_size));

   if ((startCLUSTER = claimfreeclusters(CLUSTERs_required, ihand)) < 0) return -1;

 
  char shorttemp[14];
 
  not_sfn=shorten_lfn(leafname,shortname,shorttemp,*cdir);
   (*dentry) = not_sfn?lfn[numreq-1]:lfn[0];
   dprintf(("","saveFILE: p2 .. *dentry = %p\n",(*dentry)));
 
  dprintf(("","saveFILE: long filename = %s\n",leafname));
  dprintf(("","saveFILE: short tempory filename = %s\n",shorttemp));
  dprintf(("","saveFILE: short filename = \'%c%c%c%c%c%c%c%c\' ext=\'%c%c%c\'\n",shortname[0],shortname[1],shortname[2],shortname[3],shortname[4],shortname[5],shortname[6],shortname[7],shortname[8],shortname[9],shortname[10]));
  if(not_sfn) MakeLFNEntries(&lfn[0],numreq,leafname,shortname);

/* write the information into the directory entry
   *
   * This requires the filename to be split into name and extension fields
   * We fill the name with SPACEs first (the string terminator (NULL) is
   * placed in the attributes field)
   *
   * NOTE: these should be done in this order due to the fact that the
   *       text building function terminates each string with a NUL
   */
 set_dir_flags(*cdir, dir_MODIFIED) ; /* directory updated */
// sprintf((char *)&((*dentry)->FILE_status),"           ") ;
 memcpy((char *)&((*dentry)->FILE_status),&shortname[0],8);
 memcpy((char *)&((*dentry)->FILE_extension),&shortname[8],3);
 /* mark the file as suitable for archiving */
 (*dentry)->FILE_attribute = FILE_archive ;
// bzero((char *)&((*dentry)->FILE_reserved),spare1) ; /* ZERO "spare1" bytes */
 memset((char *)&((*dentry)->FILE_reserved),0,spare1) ; /* ZERO "spare1" bytes */
 char * longfileholder = NULL;
 if(not_sfn)
 {
   longfileholder = malloc(strlen(leafname)+1);
   if (longfileholder == NULL)
   {
    return_errorT(int,err_heapexhausted, tok_heapexhausted, 0, 0);
   }
   strcpy(longfileholder,leafname);
 }
 int diroffset = (int)  ((int)(*dentry)-(int)DI_Base(*cdir)) / sizeof(DOS_direntry);
 (*cdir)->lfnp[diroffset] = longfileholder;
 dprintf(("","**************************************HERE: index (diroffset) = %d, pointer = %p, actual = %p lnfp=%p\n",diroffset,(*cdir)->lfnp[diroffset], longfileholder,&((*cdir)->lfnp[diroffset])));
 dprintf(("","saveFILE: &((*cdir)->lfnp[diroffset]) = %p\n",&((*cdir)->lfnp[diroffset])));
 dprintf(("","saveFILE: CBC dir = %x\n",DI_Base(*cdir)));

// int index=0;
// if(findDIRentry(shorttemp,*cdir,(*cdir)->dir_size,&index))
// {
//  (*cdir)->lfnp[index] = longfileholder;
// }
// dprintf(("","**************************************HERE: index = %d, pointer = %p, actual = %p\n",index,(*cdir)->lfnp[index], longfileholder));
d802 7
a808 26
 set_dir_flags(*cdir, dir_MODIFIED) ; /* directory updated */


 DOS_newdirentry * mentry = (DOS_newdirentry*)(*dentry);
 mentry->FILE_CrtTimeTenth = 0;
 mentry->FILE_NTRes = 0;
 put_FILE_time(mentry->FILE_time,mentry->FILE_timeHI,RISCOStoTIME(&saveTIME)) ;
 put_FILE_time(mentry->FILE_CrtTime,mentry->FILE_CrtTimeHi,RISCOStoTIME(&saveTIME)) ;
 put_FILE_date(mentry->FILE_date,mentry->FILE_dateHI,RISCOStoDATE(&saveTIME)) ;
 put_FILE_date(mentry->FILE_CrtDate,mentry->FILE_CrtDateHi,RISCOStoDATE(&saveTIME)) ;
 put_FILE_date(mentry->FILE_LstAccDate,mentry->FILE_LstAccDateHi,RISCOStoDATE(&saveTIME)) ;
 mentry->FILE_NTRes = 0;


 dprintf(("","saveFILE: NTRes = %x\n",mentry->FILE_NTRes));

 dprintf(("","saveFILE: startCLUSTER = &%03X\n",startCLUSTER));

 put_FILE_cluster((*dentry),startCLUSTER,ihand) ;
 (*dentry)->FILE_size = len ;

 dprintf(("","saveFILE: NTRes = %x\n",mentry->FILE_NTRes));

 /* copy the data from memory into the allocated clusters */
 /* use "saveOBJECT" to perform this */
 if (fzero == 0 && len)
d810 1
a810 1
   if (DOS_object_RW(Wdata,startCLUSTER,bs,len,ihand) != 0)
d812 2
a813 2
     dprintf(("","saveFILE: \"saveOBJECT\" call failed\n"));
     return -1;
d816 6
a821 10

 dprintf(("","saveFILE: NTRes = %x\n",mentry->FILE_NTRes));
 /* Update the load and exec addresses */
 update_loadexec(*dentry, ld, ex);
   dprintf(("","saveFILE: p3\n"));

 if (pdir != NULL) {
  if (ensure_directory(pdir)!= 0) {
   dprintf(("","saveFILE: ensure_dir failed\n"));
   return -1;
d823 3
a825 11
 }

 /* now ensure all the directory information and FATs onto the disc */
 if ((ensure_directory(*cdir)!= 0) || (ensure_FATs(ihand) != 0))
 {
   dprintf(("","saveFILE: ensure_dir || ensure_FATs failed\n"));
  return(-1) ; /* error already defined */
 }
 dprintf(("","saveFILE: NTRes = %x\n",mentry->FILE_NTRes));
 /* and we have a nice return */
 return(0) ;
d839 2
a840 2
 ensure = ((ensure + (CLUSTERsize - 1)) & ~(CLUSTERsize - 1)) ;
 CLUSTERs_required = (ensure / CLUSTERsize) ;
@


4.2
log
@Rationalise some defines
Many magic numbers changed to exported defines.
Eliminated unused "BOOTblock.h" (was just nesting 1 include file).
Moved non ASCII definitions out of "ASCII.h" then found the remainder weren't used => eliminated.

Version 0.98. Tagged as 'DOSFS-0_98'
@
text
@d24 2
d336 67
d404 47
a450 7
/*-------------------------------------------------------------------------*/
/* DOS_cluster_RW:
 *  load/save the specified (possibly partial) cluster to/from the given memory address
 *    returns  n : next cluster
 *    returns  0 : no more clusters (cluster 0 never holds data)
 *    returns -1 : failed to load any data
 *  NB. len MUST always be <= the cluster size (in bytes)
d452 1
a452 2

int DOS_cluster_RW(int op,int cluster,int coff,char *memaddr,int len,DOSdisc *ihand)
d461 5
a465 3
 if (DOS_image_RW(op,startsector+(coff>>log2DOSsecsize),coff&(DOSsecsize-1),(byte *)memaddr,len,ihand) < 0)
  return(-1) ;

d467 5
a471 4
 if ( (nextcluster >= CLUSTER_end(ihand)) || (nextcluster < CLUSTER_first(ihand)) )
  return(0) ;

 return(nextcluster) ;
d474 11
a484 7
/*---------------------------------------------------------------------------*/
/* DOS_multiple_RW:
 *  load/save as many consecutive CLUSTERs as possible, starting at the specified
 *  cluster, to/from the given memory address.
 *  returns  n : next cluster
 *  returns  0 : no more clusters (cluster 0 never holds data)
 *  returns -1 : failed to load all the data
d486 1
a486 2

int DOS_multiple_RW(int op,int cluster,int coff,char *ma,int limit,word *ta,DOSdisc *ihand)
d525 1
a525 1
 if (DOS_image_RW(op,startsector+(coff>>log2DOSsecsize),coff&(DOSsecsize-1),(byte *)ma,*ta,ihand) < 0)
d534 11
a544 3
/*---------------------------------------------------------------------------*/

int DOS_object_RW(int op,int startcluster,char *ma,word bytelength,DOSdisc *ihand)
d550 1
a550 1
 dprintf(("","DOS_object_RW: op = %c, startCLUSTER = &%03X, ma = &%08X, bytelength = &%08X, ihand = &%08X\n",(op == Rdata ? 'R' : 'W'),startcluster,(word)ma,bytelength,(word)ihand));
d559 1
a559 1
     nextcluster = DOS_cluster_RW(op,nextcluster,0,ma,bytelength,ihand) ;
d564 1
a564 1
    nextcluster = DOS_multiple_RW(op,nextcluster,0,ma,bytelength,&tamount,ihand) ;
d571 1
a571 1
   ma += tamount ;
d584 59
a984 100
int DOS_bytes_RW(int op, char *memaddr, word bytes, word foff, FILEhand *fhand)
{
  int clustercount = 0;
  DOSdisc *ihand = fhand->ihand;
  int clustersize, nextcluster;
  word size;
  int zero = 0;
  int result = 0;

  dprintf(("","DOS_bytes_RW: op = %c, memaddr = &%08X, bytes = %d, foff = %d, fhand = &%08X\n", (op == Rdata ? 'R' : 'W'), (int)memaddr, bytes, foff, (int)fhand));

  if (bytes == 0)
    return 0;

  if (op == Wzero) {
    zero = 1;
    op = Wdata;
  }

  /* Check if the request is outside the file. */
  if (foff + bytes > fhand->filelen) {
    if (op == Rdata) {
      /* If reading then generate an error for an offset outside the file but just
       * truncate the request if the requested number of bytes is too large.
       */
      if (foff > fhand->filelen) {
        return_error0(int, err_EOF);
      } else
        bytes = fhand->filelen - foff;
    } else {
      /* If writing then extend the file. */
      if (DOSFS_ensure(fhand, foff + bytes) < (foff + bytes))
        return -1;
    }
  }

  /* Determine which cluster the operation is to start in (on exit foff will contain
   * the offset within that cluster).
   */
  if ((nextcluster = clusterfromoffset(fhand->startCLUSTER, &foff, ihand)) < 0)
    return -1;

  /* If the operation is to write zeros then allocate a suitable block of memory and zero it. */
  clustersize = secsalloc(ihand) * DOSsecsize;
  if (zero) {
    char *cp;
    size = (bytes < clustersize ? bytes : clustersize);
    if ((cp = memaddr = (char *)malloc(size)) == NULL)
      return_errorT(int, err_heapexhausted, tok_heapexhausted, 0, 0);
    while (size--)
      *(cp++) = '\0';
  }

  while (bytes > 0) {
    if (nextcluster >= CLUSTER_end(ihand))
    {
      global_error0(err_EOF);
      result = -1;
      break;
    }
    dprintf(("","DOS_bytes_RW: cluster offset = %d, bytes left = %d\n",foff,bytes));

    /* Terminate loops in bad FAT. */
    if ( (++clustercount > ihand->disc_FATentries) || (nextcluster < CLUSTER_first(ihand)) )
    {
      global_error0(err_clusterchain);
      result = -1;
      break;
    }

    if (bytes > clustersize-foff) {
      /* Try to read/write as much as possible straight to/from memory using a cluster multiple op. */
      size = (zero ? clustersize-foff : bytes);
      dprintf(("","DOS_bytes_RW: trying %d bytes starting at cluster %d\n",size,nextcluster));
      if ((nextcluster = DOS_multiple_RW(op, nextcluster, foff, memaddr, size, &size, ihand)) < 0)
      {
        result = -1;
        break;
      }
    } else {
      /* Do the last partial cluster. */
      size = bytes;
      dprintf(("","DOS_bytes_RW: transferring %d bytes in cluster %d\n",size,nextcluster));
      if ((nextcluster = DOS_cluster_RW(op, nextcluster, foff, memaddr, size, ihand)) < 0)
      {
        result = -1;
        break;
      }
    }
    foff = 0;         /* if we go round again then must have stopped at cluster boundary */

    if (!zero)
      memaddr += size;
    bytes -= size;
  }

  if (zero) free(memaddr);

  return result;
}
@


4.1
log
@Source file subdivision
The sources to DOSFS had become rather jumbled and monolithic
* Split FileSwitch interface out into seperate ops source files.
* Combined international error lookup with MsgTrans code.
* Split utility functions into 'Helpers.c' along with wildcard matching functions.
* Moved DOS naming functions into, erm, 'DOSnaming.c'.
Also
* Makefile tweaked to remove 'symbols' on clean.
* Obsolete 'Help' and 'Syntax' placed in attic.

RAM, debug, and ROM targets built. RAM target tested with a DOS floppy disc.

Version 0.96. Tagged as 'DOSFS-0_96'
@
text
@a26 1
#include "ASCII.h"
@

