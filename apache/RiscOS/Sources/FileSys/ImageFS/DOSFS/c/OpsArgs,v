head	4.4;
access;
symbols
	DOSFS-1_14:4.4
	DOSFS-1_13:4.4
	DOSFS-1_12:4.4
	DOSFS-1_11:4.4
	DOSFS-1_10:4.4
	DOSFS-1_09:4.4
	DOSFS-1_08:4.4
	DOSFS-1_07:4.4
	DOSFS-1_06:4.3
	DOSFS-1_05:4.3
	DOSFS-1_04:4.3
	DOSFS-1_03:4.3
	DOSFS-1_02:4.3
	DOSFS-1_01:4.3
	DOSFS-1_00:4.3
	DOSFS-0_99:4.3
	DOSFS-0_98:4.2
	DOSFS-0_97:4.1
	DOSFS-0_96:4.1;
locks; strict;
comment	@# @;


4.4
date	2014.06.25.20.13.35;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	E7yWETwfWvNEvWFx;

4.3
date	2013.01.13.18.52.34;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	oq0uLRDtA5Y625Aw;

4.2
date	2013.01.13.18.49.43;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	fjzSOoRRnhA815Aw;

4.1
date	2012.12.07.14.20.16;	author rsprowson;	state Exp;
branches;
next	;
commitid	jnwtWy3St1iqIivw;


desc
@@


4.4
log
@Change last couple of uses of trace macros to use DebugLib
This town ain't big enough for the two of us.

Version 1.07. Tagged as 'DOSFS-1_07'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> c.OpsArgs <*/
/*-------------------------------------------------------------------------*/
/* DOSFS image FS 'Args'                        Copyright (c) 1990 JGSmith */
/*-------------------------------------------------------------------------*/

#include <stdlib.h>
#include "DebugLib/DebugLib.h"

#include "DOSFS.h"
#include "DOSshape.h"
#include "Ops.h"
#include "DOSclusters.h"

/*!
 * \param  fhand Internal handle
 * \param  fext New file extent
 * \return -1 if failed to write
 */
int DOSFS_write_extent(FILEhand *fhand, word fext)
{
  dprintf(("","\n\nDOSFS_write_extent: fhand = &%08X, fext = &%08X\n",(int)fhand,fext));
 
  /* We will fall straight through if the extent is identical to the current
   * file length.
   */
  if (fext > fhand->filelen)
  {
    word indexptr = fhand->indexptr ; /* preserve our position over ensure */
    if (DOSFS_write_zeros(fhand,fhand->filelen,(fext - fhand->filelen)) < 0)
    {
      return ((int)-1) ; /* error already defined */
    }
    fhand->indexptr = indexptr ; /* restore file position */
  }
  else
  {
    if (fext < fhand->filelen)
    {
      /* truncate the file to the desired length */
      if (ensure_exact(fhand, fext) < 0)
      {
        return((int)-1) ; /* error already defined */
      }
      fhand->indexptr = fext ; /* new file position */
    }
  }

  dprintf(("","DOSFS_write_extent: fhand &%08X (len &%08X ptr &%08X)\n",
              (int)fhand, fhand->filelen, fhand->indexptr));
  return (0) ;
}

/*!
 * \param  fhand Internal handle
 * \return Allocated size of this file
 */
word DOSFS_alloc(FILEhand *fhand)
{
  int CLUSTERsize ;
 
  dprintf(("","\n\nDOSFS_alloc: fhand = &%08X\n",(int)fhand));
 
  CLUSTERsize = cluster_size(&(fhand->ihand->disc_boot)) ;
 
  /* return the disc space allocated to the file */
  dprintf(("","DOSFS_alloc: fhand &%08X (len &%08X ptr &%08X)\n",(int)fhand,fhand->filelen,fhand->indexptr));

  return((fhand->filelen + (CLUSTERsize - 1)) & -CLUSTERsize) ;
}

/*!
 * \param  fhand Internal handle
 * \return Date stamp assigned to the file
 */
FS_datestamp *DOSFS_flush(FILEhand *fhand)
{
  dprintf(("","\n\nDOSFS_flush: fhand = &%08X\n",(int)fhand));
 
  /* flush the file buffer if modified */
  if ((fhand->filebuff != NULL) && fhand->modified)
  {
    dprintf(("","DOSFS_flush: buffer needs to be written to the file\n"));
    DOS_cluster_RW(Wdata,fhand->currentCLUSTER,0,fhand->filebuff,(secsalloc(fhand->ihand) * DOSsecsize),fhand->ihand) ;
    fhand->modified = FALSE ; /* clear the modified flag */
  }
 
  /* The load/exec addresses returned are those currently in the directory
   * entry for the file.
   */
  tstamp.loadaddr = fhand->loadaddr ;
  tstamp.execaddr = fhand->execaddr ;
 
  dprintf(("","DOSFS_flush: fhand &%08X (len &%08X ptr &%08X)\n",(int)fhand,fhand->filelen,fhand->indexptr));
 
  return (&tstamp) ;
}

/*!
 * \param  fhand Internal handle
 * \param  ensure Space to ensure is set aside (any extension need not be zeroed)
 * \return Date stamp assigned to the file
 */
word DOSFS_ensure(FILEhand *fhand, word ensure)
{
  dprintf(("","\n\nDOSFS_ensure: fhand = &%08X, ensure = &%08X\n",(int)fhand,ensure));
 
  /* Set the file length to at least the desired value "ensure". */
  if (fhand->filelen < ensure)
  {
    if (ensure_exact(fhand, ensure) < 0)
    {
      return -1;
    }
  }
 
  dprintf(("","DOSFS_ensure: fhand &%08X (len &%08X ptr &%08X)\n",(int)fhand,fhand->filelen,fhand->indexptr));

  return (fhand->filelen) ;
}

/*!
 * \param  fhand Internal handle
 * \param  bytes Number bytes to zero
 * \param  foff File offset
 * \return -1 if failed to write
 */
int DOSFS_write_zeros(FILEhand *fhand, word foff, word bytes)
{
  return DOS_bytes_RW(Wzero, 0, bytes, foff, fhand);
}

/*!
 * \param  fhand Internal handle
 * \return Date stamp assigned to the file
 */
FS_datestamp *DOSFS_read_datestamp(FILEhand *fhand)
{
  dprintf(("","\n\nDOSFS_read_datestamp: fhand = &%08X\n",(int)fhand));
 
  /* The load/exec addresses returned are those currently in the directory
   * entry for the file.
   */
  tstamp.loadaddr = fhand->loadaddr ;
  tstamp.execaddr = fhand->execaddr ;
 
  dprintf(("","DOSFS_read_datestamp: fhand &%08X (len &%08X ptr &%08X)\n",(int)fhand,fhand->filelen,fhand->indexptr));

  return (&tstamp) ;
}
@


4.3
log
@Add some comments (!) and reindent FileSwitch interface
OpsGetPut
  DOSFS_put_bytes no longer passes an unnecessary dummy argument.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFind
  Suggested buffer to FileSwitch is now 1x512 sector (rather than 256).
  Note - nothing seems to use the cluster buffering code in DOSFS,
indeed nothing ever malloc()s a buffer.
  Check at line 237 of OpFind would never be true since FILE_subdir is
not 1, fixed.
  Return an error if the handle to close is invalid.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFile
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFunc
  A failure to find a slot to set the disc title now reports "Dir full"
not "Disc full"
  Reindented.
  Doxygen comments added to FileSwitch layer.

Version 0.99. Tagged as 'DOSFS-0_99'
@
text
@a26 1
#include "debug.h"
@


4.2
log
@Rationalise some defines
Many magic numbers changed to exported defines.
Eliminated unused "BOOTblock.h" (was just nesting 1 include file).
Moved non ASCII definitions out of "ASCII.h" then found the remainder weren't used => eliminated.

Version 0.98. Tagged as 'DOSFS-0_98'
@
text
@d29 22
a50 15
int DOSFS_write_extent(FILEhand *fhand,word fext)
{
 /* in: fhand : internal filesystem handle for this file
  *     fext  : new file extent
  *
  * Set the extent of a file (usually prior to it being closed).
  */

 /* modify the current file pointer for the given open file */
 dprintf(("","\n\nDOSFS_write_extent: fhand = &%08X, fext = &%08X\n",(int)fhand,fext));

 /* We will fall straight through if the extent is identical to the current
  * file length.
  */
 if (fext > fhand->filelen)
d52 9
a60 4
   word indexptr = fhand->indexptr ; /* preserve our position over ensure */
   if (DOSFS_write_zeros(fhand,fhand->filelen,(fext - fhand->filelen)) < 0)
    return((int)-1) ; /* error already defined */
   fhand->indexptr = indexptr ; /* restore file position */
d62 4
a65 14
 else
  if (fext < fhand->filelen)
   {
    /* truncate the file to the desired length */
    if (ensure_exact(fhand,fext) < 0)
     return((int)-1) ; /* error already defined */
    fhand->indexptr = fext ; /* new file position */
   }

 dprintf(("","DOSFS_write_extent: fhand &%08X (len &%08X ptr &%08X)\n",(int)fhand,fhand->filelen,fhand->indexptr));
 /* out:
  *     no conditions
  */
 return(0) ;
d68 4
d74 16
a89 18
 int CLUSTERsize ;

 /* in: fhand : internal filesystem handle for the file
  */

 dprintf(("","\n\nDOSFS_alloc: fhand = &%08X\n",(int)fhand));

 CLUSTERsize = cluster_size(&(fhand->ihand->disc_boot)) ;

 /* return the disc space allocated to the file */
 /* out:
  *     return : space allocated to the file (rounded up the next allocation
  *              unit)
  */
 dprintf(("","DOSFS_alloc: fhand &%08X (len &%08X ptr &%08X)\n",(int)fhand,fhand->filelen,fhand->indexptr));
 return((fhand->filelen + (CLUSTERsize - 1)) & -CLUSTERsize) ;
}

d92 32
a123 9
 /* in: fhand : internal filesystem handle for the file
  *
  * Flush any buffered data to the media.
  */

 dprintf(("","\n\nDOSFS_flush: fhand = &%08X\n",(int)fhand));

 /* flush the file buffer if modified */
 if ((fhand->filebuff != NULL) && (fhand->modified))
d125 4
a128 3
   dprintf(("","DOSFS_flush: buffer needs to be written to the file\n"));
   DOS_cluster_RW(Wdata,fhand->currentCLUSTER,0,fhand->filebuff,(secsalloc(fhand->ihand) * DOSsecsize),fhand->ihand) ;
   fhand->modified = 0 ; /* clear the modified flag */
d130 2
d133 1
a133 37
 /* The load/exec addresses returned are those currently in the directory
  * entry for the file.
  */
 tstamp.loadaddr = fhand->loadaddr ;
 tstamp.execaddr = fhand->execaddr ;

 dprintf(("","DOSFS_flush: fhand &%08X (len &%08X ptr &%08X)\n",(int)fhand,fhand->filelen,fhand->indexptr));
 /* out:
  *     tstamp.loadaddr = desired load address for the file
  *     tstamp.execaddr = desired exec address for the file
  */
 return(&tstamp) ;
}

word DOSFS_ensure(FILEhand *fhand,word ensure)
{
 /* in:
  *     fhand  : internal filesystem handle for the file
  *     ensure : size of file to ensure
  *
  * Ensure the file can be extended to at least the given size. The extra
  * space need NOT be zeroed.
  */

 dprintf(("","\n\nDOSFS_ensure: fhand = &%08X, ensure = &%08X\n",(int)fhand,ensure));

 /* Set the file length to at least the desired value "ensure". */
 if (fhand->filelen < ensure) {
   if (ensure_exact(fhand, ensure) < 0)
     return -1;
 }

 dprintf(("","DOSFS_ensure: fhand &%08X (len &%08X ptr &%08X)\n",(int)fhand,fhand->filelen,fhand->indexptr));
 /* out:
  *     return : size of file actually ensured
  */
 return(fhand->filelen) ;
d136 7
a142 1
int DOSFS_write_zeros(FILEhand *fhand,word foff,word bytes)
d147 4
d153 11
a163 19
 /* in: fhand : internal filesystem handle for the file
  *
  * Return the current load and exec addresses for this file.
  */

 dprintf(("","\n\nDOSFS_read_datestamp: fhand = &%08X\n",(int)fhand));

 /* The load/exec addresses returned are those currently in the directory
  * entry for the file.
  */
 tstamp.loadaddr = fhand->loadaddr ;
 tstamp.execaddr = fhand->execaddr ;

 dprintf(("","DOSFS_read_datestamp: fhand &%08X (len &%08X ptr &%08X)\n",(int)fhand,fhand->filelen,fhand->indexptr));
 /* out:
  *     tstamp.loadaddr = desired load address for the file
  *     tstamp.execaddr = desired exec address for the file
  */
 return(&tstamp) ;
@


4.1
log
@Source file subdivision
The sources to DOSFS had become rather jumbled and monolithic
* Split FileSwitch interface out into seperate ops source files.
* Combined international error lookup with MsgTrans code.
* Split utility functions into 'Helpers.c' along with wildcard matching functions.
* Moved DOS naming functions into, erm, 'DOSnaming.c'.
Also
* Makefile tweaked to remove 'symbols' on clean.
* Obsolete 'Help' and 'Syntax' placed in attic.

RAM, debug, and ROM targets built. RAM target tested with a DOS floppy disc.

Version 0.96. Tagged as 'DOSFS-0_96'
@
text
@a23 1
#include "ASCII.h"
@

