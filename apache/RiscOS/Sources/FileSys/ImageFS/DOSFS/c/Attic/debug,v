head	4.3;
access;
symbols
	DOSFS-1_06:4.2
	DOSFS-1_05:4.2
	DOSFS-1_04:4.2
	DOSFS-1_03:4.2
	DOSFS-1_02:4.2
	DOSFS-1_01:4.2
	DOSFS-1_00:4.2
	DOSFS-0_99:4.2
	DOSFS-0_98:4.2
	DOSFS-0_97:4.2
	DOSFS-0_96:4.2
	DOSFS-0_95:4.2
	DOSFS-0_94:4.2
	DOSFS-0_93:4.2
	DOSFS-0_92:4.2
	DOSFS-0_91:4.2
	DOSFS-0_90:4.2
	DOSFS-0_89:4.2
	DOSFS-0_88:4.2
	DOSFS-0_87:4.2
	DOSFS-0_86:4.1
	DOSFS-0_85:4.1
	DOSFS-0_84:4.1
	DOSFS-0_83:4.1
	DOSFS-0_82:4.1
	DOSFS-0_81:4.1
	DOSFS-0_80:4.1
	DOSFS-0_79:4.1
	RO_5_07:4.1
	DOSFS-0_78:4.1
	DOSFS-0_77:4.1
	DOSFS-0_76:4.1
	DOSFS-0_75:4.1
	DOSFS-0_74:4.1
	DOSFS-0_73:4.1
	DOSFS-0_72:4.1
	DOSFS-0_71:4.1
	DOSFS-0_70:4.1
	DOSFS-0_69:4.1
	DOSFS-0_68:4.1
	DOSFS-0_67:4.1
	DOSFS-0_66:4.1
	DOSFS-0_65:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	DOSFS-0_64:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_DOSFS_0_63:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2014.06.25.20.13.35;	author rsprowson;	state dead;
branches;
next	4.2;
commitid	E7yWETwfWvNEvWFx;

4.2
date	2009.06.11.21.01.27;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.32.57;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.57;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.54.04;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.37.23;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.33.53;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Change last couple of uses of trace macros to use DebugLib
This town ain't big enough for the two of us.

Version 1.07. Tagged as 'DOSFS-1_07'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> c.debug <*/
/*-------------------------------------------------------------------------*/
/* Debug control and output functions          Copyright (c) 1990, JGSmith */
/*-------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "debug.h"

#if TRACE

static int trace_state = 1 ;    /* trace enabling flag */

/*-------------------------------------------------------------------------*/
/* trace_on: enable debugging output */

void trace_on(void)
{
 trace_state = 1 ;
 return ;
}

/*-------------------------------------------------------------------------*/
/* trace_off: disable debugging output */

void trace_off(void)
{
 trace_state = 0 ;
 return ;
}
#endif /* TRACE */

#if WRITEF
/*-------------------------------------------------------------------------*/
/* writef: multiple argument output (varargs) */

int writef(char *format,...)
{
  __va_list args ;
  int       length = 0 ;

#if TRACE
  if (trace_state == 1) {
#endif

#if TUBE
    _kernel_oscli("HostVDU") ;
#else
#ifdef TRACEFILE
    {
      FILE *traceout;
      traceout = fopen(TRACEFILE, "a");
      if (traceout == NULL)
        return 0;
#endif
#endif

      va_start(args,format) ;
#ifdef TRACEFILE
      length = vfprintf(traceout,format,args) ;
#else
      length = vfprintf(stdout,format,args) ;
#endif
      va_end(args) ;

#if TUBE
      _kernel_oscli("TubeVDU") ;
#else
#ifdef TRACEFILE
      fclose(traceout);
    }
#endif
#endif

#if TRACE
  }
#endif

  return(length) ;
}
#endif /* WRITEF */


#if TRACE_MEM
#undef malloc
#undef free

struct mement {
  void *addr;
  int size;
  char *file;
  int line;
};

static struct mement *memtrace = NULL;
static int memtsize = 0;
static int memtused = 0;

void *_my_malloc(char *file, int line, int size)
{
  int next;
  char *addr;
  for (next = 0; next < memtused; next++)
    if (memtrace[next].addr == NULL)
      break;
  if (next == memtused) {
    if (next == memtsize) {
      memtsize += 64;
      memtrace = (struct mement *)realloc(memtrace, memtsize * sizeof(struct mement));
      if (memtrace == NULL) {
        writef("malloc: out of store\n");
        return NULL;
      }
    }
    memtused++;
  }
  addr = malloc(size);
  if (addr != NULL) {
    memtrace[next].addr = addr;
    memtrace[next].size = size;
    memtrace[next].file = file;
    memtrace[next].line = line;
    writef("malloc: allocated %d bytes at 0x%x from %s line %d\n", size, addr, file, line);
  } else
    writef("malloc: failed in %s at line %d\n", file, line);
  return addr;
}
  
void _my_free(void *addr)
{
  int next;
  for (next = 0; next < memtused; next++)
    if (memtrace[next].addr == addr) {
      free(addr);
      memtrace[next].addr = NULL;
      writef("free: freed %d bytes at 0x%x allocated from %s line %d\n", memtrace[next].size,
              addr, memtrace[next].file, memtrace[next].line);
    }
}

void show_mem_trace(void)
{
  int next;
  for (next = 0; next < memtused; next++)
    if (memtrace[next].addr != NULL) {
      writef("show_mem_trace: at 0x%x, size %d allocated from %s line %d\n",
              memtrace[next].addr, memtrace[next].size, memtrace[next].file, memtrace[next].line);
      free(memtrace[next].addr);
    }
  free(memtrace);
  memtrace = NULL;
  memtsize = memtused = 0;
}
#endif /* TRACE_MEM */

#if TRACE_SWIS
#undef _kernel_swi

_kernel_oserror *_my_kernel_swi(char *file, int line, int swi, _kernel_swi_regs *rin, _kernel_swi_regs *rout)
{
  writef("(&%X: &%X,&%X,&%X,&%X,&%X) ",
         swi,rin->r[0],rin->r[1],rin->r[2],rin->r[3],rin->r[4]);
  return _kernel_swi(swi, rin, rout);
}
#endif
/*-------------------------------------------------------------------------*/
/*> EOF c.debug <*/
@


4.2
log
@  #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.86. Not tagged
@
text
@@


4.1
log
@Initial revision
@
text
@d28 1
a28 1
#include "h.debug"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
