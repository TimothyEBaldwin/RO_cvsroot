head	4.4;
access;
symbols
	DOSFS-0_95:4.3
	DOSFS-0_94:4.3
	DOSFS-0_93:4.3
	DOSFS-0_92:4.3
	DOSFS-0_91:4.3
	DOSFS-0_90:4.3
	DOSFS-0_89:4.3
	DOSFS-0_88:4.3
	DOSFS-0_87:4.3
	DOSFS-0_86:4.2
	DOSFS-0_85:4.2
	DOSFS-0_84:4.2
	DOSFS-0_83:4.2
	DOSFS-0_82:4.2
	DOSFS-0_81:4.2
	DOSFS-0_80:4.2
	DOSFS-0_79:4.2
	RO_5_07:4.1
	DOSFS-0_78:4.1
	DOSFS-0_77:4.1
	DOSFS-0_76:4.1
	DOSFS-0_75:4.1
	DOSFS-0_74:4.1
	DOSFS-0_73:4.1
	DOSFS-0_72:4.1
	DOSFS-0_71:4.1
	DOSFS-0_70:4.1
	DOSFS-0_69:4.1
	DOSFS-0_68:4.1
	DOSFS-0_67:4.1
	DOSFS-0_66:4.1
	DOSFS-0_65:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	DOSFS-0_64:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_DOSFS_0_63:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2012.12.07.14.20.17;	author rsprowson;	state dead;
branches;
next	4.3;
commitid	jnwtWy3St1iqIivw;

4.3
date	2009.06.11.21.01.27;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	2004.09.30.21.59.06;	author jballance;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.33.03;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.03;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.54.50;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.37.36;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.34.06;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Source file subdivision
The sources to DOSFS had become rather jumbled and monolithic
* Split FileSwitch interface out into seperate ops source files.
* Combined international error lookup with MsgTrans code.
* Split utility functions into 'Helpers.c' along with wildcard matching functions.
* Moved DOS naming functions into, erm, 'DOSnaming.c'.
Also
* Makefile tweaked to remove 'symbols' on clean.
* Obsolete 'Help' and 'Syntax' placed in attic.

RAM, debug, and ROM targets built. RAM target tested with a DOS floppy disc.

Version 0.96. Tagged as 'DOSFS-0_96'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> c.wcompare <*/
/*---------------------------------------------------------------------------*/
/* wild card object comparison                    Copyright (c) 1988 JGSmith */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <ctype.h>

#include "ASCII.h"
#include "wcompare.h"

#include "debuglib/debuglib.h"

/*---------------------------------------------------------------------------*/

#define makelower(c) (((c < 'A') || (c > 'Z')) ? (c) : tolower(c))

/*---------------------------------------------------------------------------*
 * compare two objects
 *
 * in:  fptr -> full object name (NULL terminated)
 *      gptr -> wildcarded object name (NULL terminated)
 * out: boolean flag - TRUE (matched) - FALSE (failed match)
 */
int wild_card_compare(char *fptr, char *gptr, char wcmult, char wcsing)
{

// dprintf(("","WCC: fptr = \"%s\", gptr = \"%s\"\n",fptr,gptr));

 if (*fptr == '\0')
  {
   /* end of full name */
   if (*gptr == wcmult) /* if multiple wildcard character then continue */
   {
    return(wild_card_compare(fptr,&gptr[1],wcmult,wcsing)) ;
   }
   else
   {
    return(*gptr == '\0') ; /* matched if end of wildcarded name */
   }
  }
                     
 if (*gptr == '\0')
 {
  return(FALSE) ; /* end of wildcarded name reached before full name */
 }
 /* check if this character matches */
// if ((makelower(*fptr) == makelower(*gptr)) || (*gptr == wcsing))
// if ( ((*fptr) == (*gptr)) || (*gptr == wcsing))
 if ( (toupper(*fptr) == toupper(*gptr)) || (*gptr == wcsing))
 {
  return(wild_card_compare(&fptr[1],&gptr[1],wcmult,wcsing)) ; /* yes - then continue */
 }

 if (*gptr == wcmult) /* if multiple wildcard character, check both paths */
 {
  return(wild_card_compare(fptr,&gptr[1],wcmult,wcsing)||wild_card_compare(&fptr[1],gptr,wcmult,wcsing)) ;
 }
 else
 {
  return(FALSE) ; /* characters do not match */
 }
}

/*-------------------------------------------------------------------------*/
/* Check if the given text string contains wildcard characters */

int checknotwildcarded(char *name, char wcmult, char wcsing)
{
 for (; (*name); name++)
  if ((*name == wcmult) || (*name == wcsing))
   return(-1) ; /* wildcard character has been found */

 return(0) ; /* OK : does not contain wildcard characters */
}

/*-------------------------------------------------------------------------*/
/*> EOF c.wcompare <*/
@


4.3
log
@  #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.86. Not tagged
@
text
@@


4.2
log
@   Update of DOSFS to handle Long File Names and FAT32 (up to 2GB)
Detail:
   Extend DOSFS to correctly recognise FAT32 DOS images and to
   use the Long File Name extensions. NOTE that there is still
   a 2gb size limit imposed by the max filecore image file
   size limitiations. NOTE also that as yet there is no support for
   UTF encoding of file names.
Admin:
   Tested at castle and with beta testers.
   Modifications are castle and castle assigned IP (from CJB)


Version 0.79. Tagged as 'DOSFS-0_79'
@
text
@d23 2
a24 2
#include "h.ASCII"
#include "h.wcompare"
@


4.1
log
@Initial revision
@
text
@d21 1
d26 2
d41 3
d48 1
d50 1
d52 1
d54 1
d56 1
a56 1

d58 1
d60 1
a60 1

d62 4
a65 1
 if ((makelower(*fptr) == makelower(*gptr)) || (*gptr == wcsing))
d67 1
d70 1
d72 1
d74 1
d76 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
