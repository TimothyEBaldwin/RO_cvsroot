head	4.4;
access;
symbols
	DOSFS-1_14:4.4
	DOSFS-1_13:4.4
	DOSFS-1_12:4.4
	DOSFS-1_11:4.4
	DOSFS-1_10:4.4
	DOSFS-1_09:4.4
	DOSFS-1_08:4.4
	DOSFS-1_07:4.4
	DOSFS-1_06:4.3
	DOSFS-1_05:4.3
	DOSFS-1_04:4.3
	DOSFS-1_03:4.3
	DOSFS-1_02:4.3
	DOSFS-1_01:4.3
	DOSFS-1_00:4.3
	DOSFS-0_99:4.3
	DOSFS-0_98:4.2
	DOSFS-0_97:4.1
	DOSFS-0_96:4.1;
locks; strict;
comment	@# @;


4.4
date	2014.06.25.20.13.35;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	E7yWETwfWvNEvWFx;

4.3
date	2013.01.13.18.52.34;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	oq0uLRDtA5Y625Aw;

4.2
date	2013.01.13.18.49.43;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	fjzSOoRRnhA815Aw;

4.1
date	2012.12.07.14.20.16;	author rsprowson;	state Exp;
branches;
next	;
commitid	jnwtWy3St1iqIivw;


desc
@@


4.4
log
@Change last couple of uses of trace macros to use DebugLib
This town ain't big enough for the two of us.

Version 1.07. Tagged as 'DOSFS-1_07'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> c.Helpers <*/
/*-------------------------------------------------------------------------*/
/* Common utilities for DOS image operations    Copyright (c) 1990 JGSmith */
/*-------------------------------------------------------------------------*/

#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "Global/FileTypes.h"
#include "Interface/MimeMap.h"
#include "Interface/HighFSI.h"
#include "DebugLib/DebugLib.h"

#include "DOSFS.h"
#include "TIMEconv.h"
#include "ADFSshape.h"
#include "Helpers.h"
#include "MsgTrans.h"
#include "DOSnaming.h"
#include "DOSclusters.h"
#include "DOSshape.h"

#define ReadOnlyMapsLocked 1
 /* JRS 9/3/92 map DOS ReadOnly bit to RISC OS Locked bit only.
  * This is to fix problem with FilerAction setting access 0 to force-delete.
  * This would get translated into DOS ReadOnly, which would then translate
  * back into Locked and not Write, so the file would end up being locked
  * by setting access 0, which was not the intention.
  */

/* Return mode of access if the given file is open (else return -1). */
int find_open_file(char *fname, DOS_direntry *dentry, DOSdisc *ihand)
{
  FILEhand *cptr;

  int dcluster = get_FILE_cluster(dentry,ihand);

  for (cptr = FILE_list; cptr != NULL; cptr = cptr->next)
    if (cptr->ihand == ihand) {
      if (dcluster == 0) {
        if (wild_card_compare(cptr->fname, fname, ROwcmult, ROwcsing))
          return cptr->opentype;
      } else
        if (dcluster == cptr->startCLUSTER)
          return cptr->opentype;
    }

  dprintf(("","find_open_file: file \"%s\" not open\n",fname));
  return -1;
}

/*-------------------------------------------------------------------------*/

int update_imageID(DOSdisc *ihand)
{
 /* At the moment we just calculate a simple additive checksum from the FAT.
  */
 word              cval = 0x00000000 ; /* image ID value */
 int               loop ;
 char             *FATbuffer ;
 _kernel_swi_regs  rset ;
 _kernel_oserror  *rerror ;

 /* Flush the output */
 rset.r[0] = OSArgs_Flush;
 rset.r[1] = (word)ihand->disc_fhand;
 if ((rerror = _kernel_swi(OS_Args, &rset, &rset)) != NULL) {
  dprintf(("","update_imageID: error from OS_Args 255: (&%08X) \"%s\"\n",rerror->errnum,rerror->errmess));
  return_errorX(int,rerror);
 }

 FATbuffer = (char *)&(ihand->disc_FAT) ;

 for (loop = 0; (loop < ihand->disc_FATsize); loop++)
  cval = cval + FATbuffer[loop] ;

 dprintf(("","update_imageID: sending 0x%x\n", cval));
 rset.r[0] = OSArgs_ImageStampIs ;
 rset.r[1] = (word)ihand->disc_fhand;
 rset.r[2] = cval ; /* and the newly calculated value */
 if ((rerror = _kernel_swi(OS_Args,&rset,&rset)) != NULL)
  {
   dprintf(("","update_imageID: error from OS_Args 8: (&%08X) \"%s\"\n",rerror->errnum,rerror->errmess));
   return_errorX(int,rerror) ;
  }
 ihand->disc_flags &= ~disc_UPDATEID ; /* we have given FileSwitch a new image ID */
 return(0) ;
}

void map_FILE_ROStype(DOS_direntry *dentry,char* dosext,time5byte *le)
{
 _kernel_swi_regs rset ;
 int value = -1;

 /* Try to determine whether this really is a ROS filetype */
 if (((dentry->FILE_reserved[1] & 0xF0) == 0) || ((dentry->FILE_reserved[1] & 0xF0) == 0xF0))
  {
  value = get_FILE_ROStype(dentry);
  /* DOSFS's capable of *SETTYPE &000 also set the top 4 bits */
  if ((value == 0) && ((dentry->FILE_reserved[1] & 0xF0) != 0xF0)) value = -1; 
//  dprintf(("","filetype lookup,found in spare bytes 0x%X3\n", value));
  }
 /* No filetype in the spare bytes,so have a look through DOSmap */
 if (value == -1)
  {
  mapentry *cmap ;
  for (cmap = maplist; (cmap); cmap = cmap->next)
   if (strcmp(dosext, cmap->dosext)==0)
    {
    value = cmap->ROtype;
    dprintf(("","filetype lookup,found in dosmap 0x%X3\n", value));
    break; /* the for loop */
    }
  }
 /* Found neither a filetype nor an override mapping,try MimeMap */
 if (value == -1)
  {
  rset.r[0] = MMM_TYPE_DOT_EXTN;
  rset.r[1] = (int)dosext;
  rset.r[2] = MMM_TYPE_RISCOS;
  if (_kernel_swi(MimeMap_Translate, &rset, &rset) == NULL)
   {
   value = rset.r[3];
   dprintf(("","filetype lookup,found in mimemap 0x%X3\n", value));
   }
  }
 /* Give up,just set it as 'DOStype' */
 if (value == -1)
 {
   dprintf(("","filetype lookup -%s- not found.. default to DOS\n",dosext ));
   value = FileType_MSDOS;
 }
 le->hi = (le->hi & ~ADFStypemask) | (value << ADFStypeshift) ;
 return;
}

/*---------------------------------------------------------------------------*/

void read_loadexec(DOS_direntry *dentry,char *dosext,time5byte *le)
{
 MSDOStoRISCOS(get_FILE_time(dentry),get_FILE_date(dentry),le) ;
 map_FILE_ROStype(dentry,dosext,le);
 return ;
}

/*---------------------------------------------------------------------------*/

void update_loadexec(DOS_direntry *dentry,word ld,word ex)
{
 time5byte     updateTIME ; /* local time described in passed addresses */
 int           cROStype = ((ld & ADFStypemask) >> ADFStypeshift) ;

 dprintf(("","update_loadexec: dentry = &%08X, ld = &%08X, ex = &%08X\n",(word)dentry,ld,ex));

 if (cROStype == FileType_MSDOS)
  {
   erase_ROStype(dentry) ; /* remove any possible RISC OS file-type */
  }
 else
  {
   put_FILE_ROStype(dentry,cROStype) ;
  }

 /* update the timestamp */
 updateTIME.lo = ex ;
 updateTIME.hi = (ld & 0xFF) ;
 put_FILE_time(dentry->FILE_time,dentry->FILE_timeHI,RISCOStoTIME(&updateTIME));
 put_FILE_date(dentry->FILE_date,dentry->FILE_dateHI,RISCOStoDATE(&updateTIME));

 return ;                    
}

/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * compare two objects
 *
 * in:  fptr -> full object name (NULL terminated)
 *      gptr -> wildcarded object name (NULL terminated)
 * out: boolean flag - TRUE (matched) - FALSE (failed match)
 */
int wild_card_compare(char *fptr, char *gptr, char wcmult, char wcsing)
{

// dprintf(("","WCC: fptr = \"%s\", gptr = \"%s\"\n",fptr,gptr));

 if (*fptr == '\0')
  {
   /* end of full name */
   if (*gptr == wcmult) /* if multiple wildcard character then continue */
   {
    return(wild_card_compare(fptr,&gptr[1],wcmult,wcsing)) ;
   }
   else
   {
    return(*gptr == '\0') ; /* matched if end of wildcarded name */
   }
  }
                     
 if (*gptr == '\0')
 {
  return(FALSE) ; /* end of wildcarded name reached before full name */
 }
 /* check if this character matches */
 if ( (toupper(*fptr) == toupper(*gptr)) || (*gptr == wcsing))
 {
  return(wild_card_compare(&fptr[1],&gptr[1],wcmult,wcsing)) ; /* yes - then continue */
 }

 if (*gptr == wcmult) /* if multiple wildcard character, check both paths */
 {
  return(wild_card_compare(fptr,&gptr[1],wcmult,wcsing)||wild_card_compare(&fptr[1],gptr,wcmult,wcsing)) ;
 }
 else
 {
  return(FALSE) ; /* characters do not match */
 }
}

/*-------------------------------------------------------------------------*/
/* Check if the given text string contains wildcard characters */

int checknotwildcarded(char *name, char wcmult, char wcsing)
{
 for (; (*name); name++)
  if ((*name == wcmult) || (*name == wcsing))
   return(-1) ; /* wildcard character has been found */

 return(0) ; /* OK : does not contain wildcard characters */
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* attributes: */

word DOStoRISCOSattributes(DOS_direntry *dentry)
{
 word aval = 0x00000000 ;
 int   loop ;

 /* produce RISC OS type attributes for the given DOS directory entry */

 /* all objects start read/write */
 if ((dentry->FILE_attribute & FILE_subdir) == 0)
  aval |= (read_attribute | write_attribute) ;

 for (loop=0; (loop < 8); loop++)
  {
   if ((dentry->FILE_attribute & (1 << loop)) != 0)
    {
     switch (1 << loop)
      {
       case FILE_readonly :
#if !ReadOnlyMapsLocked /* JRS 9/3/92 map DOS ReadOnly bit to RISC OS Locked bit only */
                            aval &= ~write_attribute ;
#endif
                            aval |= locked_attribute ;
                            break ;

/* JRS: 4/3/92 This conflicts with NetFS use of these bits */
       case FILE_hidden   : if ((dentry->FILE_attribute & NetFSattributebits)==0)
                             aval |= objecthidden ;
                            break ;

       case FILE_system   : if ((dentry->FILE_attribute & NetFSattributebits)==0)
                             aval |= objectsystem ;
                            break ;

       case FILE_archive  : if ((dentry->FILE_attribute & NetFSattributebits)==0)
                             aval |= objectupdated ;
                            break ;

       default            : break ;     /* no action on undefined flags */
      }
    }
  }

 return(aval) ;
}

/*---------------------------------------------------------------------------*/

unsigned char RISCOStoDOSattributes(word ROSattr)
{
 byte aval = 0x00 ;

 /* produce DOS type attributes for the given RISC OS attribute flags */

 /* NOT owner write then set the readonly flag */
#if ReadOnlyMapsLocked /* JRS 9/3/92 map DOS ReadOnly bit to RISC OS Locked bit only */
 if (ROSattr & locked_attribute)
#else
 if ((ROSattr & write_attribute) == 0 || (ROSattr & locked_attribute) != 0)
#endif
  aval |= FILE_readonly ;

 /* JRS: 4/3/92 HORRIBLE! This conficts with NetFS use of these bits
  * Check if the NetFS bits are zero, and assume they are ours if so */
 if ((ROSattr & NetFSattributebits & ~extraDOSattributebits) == 0)
  {
  /* check for the special flags we have placed in the ADFS unused area */
  if ((ROSattr & objecthidden) != 0)
   aval |= FILE_hidden ;

  if ((ROSattr & objectsystem) != 0)
   aval |= FILE_system ;

  if ((ROSattr & objectupdated) != 0)
   aval |= FILE_archive ;
  }

 return(aval) ;
}

@


4.3
log
@Add some comments (!) and reindent FileSwitch interface
OpsGetPut
  DOSFS_put_bytes no longer passes an unnecessary dummy argument.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFind
  Suggested buffer to FileSwitch is now 1x512 sector (rather than 256).
  Note - nothing seems to use the cluster buffering code in DOSFS,
indeed nothing ever malloc()s a buffer.
  Check at line 237 of OpFind would never be true since FILE_subdir is
not 1, fixed.
  Return an error if the handle to close is invalid.
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFile
  Reindented.
  Doxygen comments added to FileSwitch layer.
OpsFunc
  A failure to find a slot to set the disc title now reports "Dir full"
not "Disc full"
  Reindented.
  Doxygen comments added to FileSwitch layer.

Version 0.99. Tagged as 'DOSFS-0_99'
@
text
@a37 1
#include "debug.h"
@


4.2
log
@Rationalise some defines
Many magic numbers changed to exported defines.
Eliminated unused "BOOTblock.h" (was just nesting 1 include file).
Moved non ASCII definitions out of "ASCII.h" then found the remainder weren't used => eliminated.

Version 0.98. Tagged as 'DOSFS-0_98'
@
text
@d81 2
a82 2
 /* Flush the output using OS_Args 255. */
 rset.r[0] = 255;
d95 1
a95 1
 rset.r[0] = 8 ; /* update image ID */
a332 51
/*-------------------------------------------------------------------------*/

int DOS_image_RW(int op,word sec,int off,byte *ma,word nbytes,DOSdisc *ihand)
{
 word              discaddress ;
 _kernel_swi_regs  reglist ;
 _kernel_oserror  *rerror ;

 dprintf(("","DOS_image_RW: %c sec: %x ma: &%08X nbytes: &%08X ihand: &%08X\n",((op == Rdata) ? 'R' : 'W'),sec,(int)ma,nbytes,(word)ihand));

 /* read or write a block from the specified image file */
 /* NOTE: the "disc_winioffset" value SHOULD be 0x00000000 for floppies */
 discaddress = ((sec - 1) * DOSsecsize) + ihand->disc_winioffset + off ;

 dprintf(("","DOS_image_RW: handle = &%08X, disc address = &%08X\n",ihand->disc_fhand,discaddress));

 /* transfer the bytes */
 reglist.r[0] = ((op == Rdata) ? OSGBPB_ReadFromGiven : OSGBPB_WriteAtGiven) ;
 reglist.r[1] = ihand->disc_fhand ; /* FileSwitch handle */
 reglist.r[2] = (word)ma ;
 reglist.r[3] = nbytes ;
 reglist.r[4] = discaddress ;
 reglist.r[5] = NULL ;
 reglist.r[6] = NULL ;

 if ((rerror = _kernel_swi(OS_GBPB,&reglist,&reglist)) != NULL)
  {
   dprintf(("","DOS_image_RW: (&%08X) \"%s\"\n",rerror->errnum,rerror->errmess));
   return_errorX(int,rerror) ;
  }

 dprintf(("","DOS_image_RW: transfer complete, &%08X bytes left\n",reglist.r[3]));

 if (reglist.r[3] != 0)
  {
   return_error0(int,((op == Rdata) ? err_readfailed : err_writefailed)) ;
  }

 /* If this call has written data to the image (op == Wdata) and the new image
  * ID flag is set then we must generate a new disc ID and tell FileSwitch
  * about it.
  *     OS_Args
  *             r0 = 8
  *             r1 = image file handle
  *             r2 = new image identity
  */
 if ((op == Wdata) && (ihand->disc_flags & disc_UPDATEID))
  return(update_imageID(ihand)) ;

 return(0) ;
}
@


4.1
log
@Source file subdivision
The sources to DOSFS had become rather jumbled and monolithic
* Split FileSwitch interface out into seperate ops source files.
* Combined international error lookup with MsgTrans code.
* Split utility functions into 'Helpers.c' along with wildcard matching functions.
* Moved DOS naming functions into, erm, 'DOSnaming.c'.
Also
* Makefile tweaked to remove 'symbols' on clean.
* Obsolete 'Help' and 'Syntax' placed in attic.

RAM, debug, and ROM targets built. RAM target tested with a DOS floppy disc.

Version 0.96. Tagged as 'DOSFS-0_96'
@
text
@d22 1
d25 1
d27 1
a30 1
#include "ASCII.h"
d35 2
d148 1
a148 1
   value = DOStype;
d172 1
a172 1
 if (cROStype == DOStype)
d263 1
a263 1
  aval |= (ownerread | ownerwrite) ;
d273 1
a273 1
                            aval &= ~ownerwrite ;
d275 1
a275 1
                            aval |= objectlocked ;
d309 1
a309 1
 if (ROSattr & objectlocked)
d311 1
a311 1
 if ((ROSattr & ownerwrite) == 0 || (ROSattr & objectlocked) != 0)
d350 1
a350 1
 reglist.r[0] = ((op == Rdata) ? osgbpb_rptr : osgbpb_wptr) ;
@

