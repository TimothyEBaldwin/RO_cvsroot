head	4.1;
access;
symbols
	FileSwitch-2_87:4.1
	FileSwitch-2_86:4.1
	FileSwitch-2_85:4.1
	FileSwitch-2_84:4.1
	FileSwitch-2_83:4.1
	FileSwitch-2_82:4.1
	FileSwitch-2_81:4.1
	FileSwitch-2_80:4.1
	FileSwitch-2_79:4.1
	FileSwitch-2_78:4.1
	FileSwitch-2_77:4.1
	FileSwitch-2_76:4.1
	FileSwitch-2_75:4.1
	FileSwitch-2_74:4.1
	FileSwitch-2_73:4.1
	FileSwitch-2_72:4.1
	FileSwitch-2_71:4.1
	FileSwitch-2_70:4.1
	FileSwitch-2_69:4.1
	FileSwitch-2_68:4.1
	FileSwitch-2_67:4.1
	RO_5_07:4.1
	FileSwitch-2_66:4.1
	FileSwitch-2_65:4.1
	FileSwitch-2_64:4.1
	FileSwitch-2_63:4.1
	FileSwitch-2_62:4.1
	FileSwitch-2_61:4.1
	FileSwitch-2_60:4.1
	FileSwitch-2_59:4.1
	FileSwitch-2_58:4.1
	FileSwitch-2_57:4.1
	FileSwitch-2_56:4.1
	FileSwitch-2_55:4.1
	FileSwitch-2_54:4.1
	FileSwitch-2_53:4.1
	dellis_autobuild_BaseSW:4.1
	FileSwitch-2_52:4.1
	FileSwitch-2_51:4.1
	ROLtd-4_02:4.1
	FileSwitch-2_45:4.1
	Ursula_merge:4.1
	FileSwitch-2_50:4.1
	sbrodie_sedwards_16Mar2000:4.1
	FileSwitch-2_41:4.1
	dcotton_Spin_merge:4.1.7.1
	FileSwitch-2_40:4.1
	dcotton_autobuild_BaseSW:4.1
	FileSwitch-2_39:4.1
	FileSwitch-2_43:4.1
	Ursula_FileSwitch-2_42:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_FileSwitch-2_29:4.1.7.1
	FileSwitch-2_38:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_241:4.1
	sproven_2_40:4.1
	sproven_2_38:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.32.42;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.42;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.49.16;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.36.13;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.32.52;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@I would suggest supporting RISC OS 3.10 properly as it saves you lots of
faff. Although more entry points may be needed, the effort to provide full
functionality (directory setting, processing of ^.s in paths and the such)
is much reduced as it is handled mostly by FileSwitch. I would recommend the
following settings (assuming a network flavour filing system).

Filing system information word:

Bit     Setting Meaning
31      ?       If set you suport special fields - probably want this clear
30      0       Streams aren't interactive (information bit only)
29      0       Null length file names are not allowed
28      0       Don't allow an open call if the file doesn't exist
27      0       Don't tell the filing system about flush calls (may want 1 instead)
26      0       FSEntry_File 9 (read info, no length) not provided
25      0       FSEntry_Func 20 (*FileInfo) not provided
24      0       FSEntry_Func 18 (set contexts) not provided
23      1       MultiFS extensions supported
22      0       Paths always given to filing system from $. onwards
21      0       FileSwitch stores directory settings (*Dir, *Lib etc) for this filing system
20      1       FileSwitch does *Load with Open, GBPB, close
19      1       FileSwitch does *Save with Open, GBPB, close
18      0       FileSwitch should process *Access strings itself
17      0       No extra info word
16      0       Filing system isn't read only
15-8    ?       Limit on number of open files - 0 for no limit
7-0     ?       Your filing system's number

The following Filing system entry points will be used:

FSEntry_Open
        0       read
        2       update

        Return when a file is opened with the file information word set to:

        Bit     Setting Meaning
        31      ?       Write permitted to file - return as appropriate
        30      ?       As above, for Read
        29      0       Object isn't a directory
        28      0       Buffered GBPB only
        27      0       Stream isn't interractive

        And quote a buffer size which is a power of 2 (256 bytes?) and the
        length of the file. If you can get the allocate space too then
        return that, otherwise round up the file's size to the next multiple
        of the buffer size and return that.

        These settings mean the following interfaces will be used:

FSEntry_GetBytes
FSEntry_PutBytes

        These will be the multiple byte varieties. You will be asked to read
        beyond the file's end - simply read to the file's end and don't
        return an error. This happens as FileSwitch thinks it's driving a
        disc-based filing system and reads the half-filled block at a
        file's end just before modifying it and writing the whole block
        back.

FSEntry_Args
        3       Write file extent (size) (just before the file is closed
                after modification)
        6       Notify of flush (happens just before close after modification)
        7       Ensure file size - return without error if no appropriate
                action.
        8       Write zeroes
        9       Read file datestamp
        10      ImageStampIs. Return without error as this is only
                appropriate to removable disc based filing systems (FileCore)

FSEntry_File
        1       Write catalogue information
        5       Read catalogue information
        6       Delete object
        7       Create file
        8       Create directory
        *10     ReadBlockSize - error this if you want

FSEntry_Func
        (7      Set filing system options replaced by _Func 28)
        8       Rename
        *10     Boot filing system - do nothing if booting inappropriate
        (11     Read name and boot option of disc replaced by _Func 23 and 27)
        14      Read directory entries
        15      Read directory entries and information
        16      Shutdown
        *17     Print start up banner - depends on entry in FS info block being -1
        *19     Read diretory entries and information - can error this one
        23      CanonicaliseSpecialAndDisc
        *24     Resolve wildcard - return with r4=-1 to get FileSwitch to do this
        *25     ReadDefectList - error this if you want
        *26     AddDefect - error this if you want
        27      ReadBootOption - don't error this, return 0 instead
        28      WriteBootOption - error this, or do nothing, it's up to you
        *29     UsedSpaceMap - error this
        30      ReadFreeSpace - this might be useful to support
        *31     NameDisc - inappropriate for network - error it?
        32      StampImage - don't error this, do an appropriate action, or do nothing
        *33     ObjectAtOffset - error this

Those entries in () are for information only - they won't be called. Those
entries with a * can have trivial implementations.

All paths will be fully canonicalised by FileSwitch before the filing system
gets them, that is where appropriate will include special field (optional
as determined by CanonicaliseSpecialAndDisc and FS infor word bit), disc
name (as determined by CanonicaliseSpecialAndDisc), and path from $. The
filing system need not handle any of:

Directory setting - *Dir, *Lib etc
Parsing paths relative to set directories (@@.thing.blah or %.doofa)
Performing catalogue listings of any sort (*Cat, *Ex etc)
Parsing *Access strings
^.s in paths

As these are handled by FileSwitch.

I believe writing such a filing system is less work than the RISC OS 2.00
way where the large gaps in calls used are needed to be supported.

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
