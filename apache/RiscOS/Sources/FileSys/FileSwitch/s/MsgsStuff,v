head	4.4;
access;
symbols
	FileSwitch-2_87:4.4
	FileSwitch-2_86:4.4
	FileSwitch-2_85:4.4
	FileSwitch-2_84:4.4
	FileSwitch-2_83:4.4
	FileSwitch-2_82:4.4
	FileSwitch-2_81:4.4
	FileSwitch-2_80:4.4
	FileSwitch-2_79:4.4
	FileSwitch-2_78:4.4
	FileSwitch-2_77:4.4
	FileSwitch-2_76:4.4
	FileSwitch-2_75:4.4
	FileSwitch-2_74:4.4
	FileSwitch-2_73:4.4
	FileSwitch-2_72:4.4
	FileSwitch-2_71:4.4
	FileSwitch-2_70:4.4
	FileSwitch-2_69:4.4
	FileSwitch-2_68:4.3
	FileSwitch-2_67:4.3
	RO_5_07:4.3
	FileSwitch-2_66:4.3
	FileSwitch-2_65:4.3
	FileSwitch-2_64:4.3
	FileSwitch-2_63:4.3
	FileSwitch-2_62:4.3
	FileSwitch-2_61:4.3
	FileSwitch-2_60:4.3
	FileSwitch-2_59:4.3
	FileSwitch-2_58:4.3
	FileSwitch-2_57:4.3
	FileSwitch-2_56:4.2
	FileSwitch-2_55:4.2
	FileSwitch-2_54:4.2
	FileSwitch-2_53:4.2
	dellis_autobuild_BaseSW:4.2
	FileSwitch-2_52:4.2
	FileSwitch-2_51:4.1
	ROLtd-4_02:4.1
	FileSwitch-2_45:4.1
	Ursula_merge:4.1
	FileSwitch-2_50:4.1
	sbrodie_sedwards_16Mar2000:4.1
	FileSwitch-2_41:4.1
	dcotton_Spin_merge:4.1.7.1
	FileSwitch-2_40:4.1
	dcotton_autobuild_BaseSW:4.3
	FileSwitch-2_39:4.1
	FileSwitch-2_43:4.1
	Ursula_FileSwitch-2_42:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_FileSwitch-2_29:4.1.7.1
	FileSwitch-2_38:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	sproven_241:4.1
	sproven_2_40:4.1
	sproven_2_38:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2011.10.16.11.29.42;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	MacYcSTahAyWczDv;

4.3
date	2001.04.17.11.29.47;	author dcotton;	state Exp;
branches;
next	4.2;

4.2
date	2000.03.20.15.57.45;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.32.50;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.32.50;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.52.01;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.36.58;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.33.32;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Fix OS_Args 1 and OS_GBPB 3/4 for files > 2G.
In OS_Args 1 a compare was followed by a conditional store, but with files > 2G some circumstances end up with VS so the store wasn't taken.
In OS_GBPB 3/4 the assessment of how much could be done was based on adding the current fileptr to the request but not respecting the carry out. Reordered the equation to get this calculation right.
Changed a signed compare of a byte variable to use unsigned so auditing of signed condition codes is clearer.
Corrected spelling of 'openning'.
Fix copy_srchandle and copy_dsthandle to not assume handles fit in 1 byte.
Tested on a variety of contrived file sizes at the boundaries of 2G and 4G.

Version 2.69. Tagged as 'FileSwitch-2_69'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Message file handling code

; ----------
; copy_error
; ----------
;
; In    r0 = pointer to error block with text <tag>
; Out   r0 = pointer to translated error block flags preserved (error not marked in globalerror)
copy_error Entry "r1-r7"
        ADR     R4, MsgsNul
10
        ADR     R5, MsgsNul
20
        ADR     R6, MsgsNul
30
        ADR     R7, MsgsNul
        CLRV                    ; To avoid interaction with any V set on entry
 [ debugmsgstuff
        ADD     r0, r0, #4
        DSTRING r0,"copy_error(",cc
        SUB     r0, r0, #4
        DSTRING r4,",",cc
        DSTRING r5,",",cc
        DSTRING r6,",",cc
        DSTRING r7,",",cc
        DLINE   ")"
 ]

        ; Check we're not threaded too many times
        LDR     r1, message_file_flags
        MOV     lr, r1, LSR #message_error_lookup_threads
        AND     lr, lr, #message_error_lookup_threads_mask
        CMP     lr, #message_max_error_threads
        BLO     %FT50

        ; We're threaded too many times looking up the error - it's
        ; time to give up.
        addr    r0, ErrorBlock_TooManyErrorLookups
        SETV
        EXIT

50
        ; Increase the threadedness of the error lookups
        ADD     r1, r1, #1 :SHL: message_error_lookup_threads
        STR     r1, message_file_flags

        BL      open_message_file
        EXIT    VS

        ; Lookup the error
        ADR     R1, message_file_block
        MOV     R2, #0
        SWI     XMessageTrans_ErrorLookup

        ; Decrease the threadedness of the error lookups
        LDR     r1, message_file_flags
        SUB     r1, r1, #1 :SHL: message_error_lookup_threads
        STR     r1, message_file_flags

        EXIT

; -----------
; copy_error1
; -----------
;
; In    r0 = pointer to error block with text <tag>
;       r4 = 1st parameter
; Out   r0 = pointer to translated error block flags preserved
copy_error1 ALTENTRY
        B       %BT10

; -----------
; copy_error2
; -----------
;
; In    r0 = pointer to error block with text <tag>
;       r4 = 1st parameter
;       r5 = 2nd parameter
; Out   r0 = pointer to translated error block flags preserved
copy_error2 ALTENTRY
        B       %BT20

; -----------
; copy_error3
; -----------
;
; In    r0 = pointer to error block with text <tag>
;       r4 = 1st parameter
;       r5 = 2nd parameter
;       r6 = 3rd parameter
; Out   r0 = pointer to translated error block flags preserved
copy_error3 ALTENTRY
        B       %BT30

; --------------
; message_lookup
; --------------
;
; In    r0 = pointer to nul-terminated tag
; Out   r0 = pointer to ctrl-char terminated string
;       error possible
message_lookup EntryS "r0-r7"
 [ debugmsgstuff
        DSTRING r0,"message_lookup(",cc
        DLINE   ")->",cc
 ]
        ADR     R4, MsgsNul
        ADR     R5, MsgsNul
        ADR     R6, MsgsNul
        ADR     R7, MsgsNul
        MOV     r2, #0
        MOV     r1, r0
        ADR     r0, message_file_block
        BL      open_message_file
        SWI     XMessageTrans_Lookup
 [ debugmsgstuff
        BVS     %FT01
        DSTRING r2
01
 ]
        STRVC   r2, [sp, #Proc_RegOffset]
        EXITS   VC
 [ debugmsgstuff
        ADD     r0, r0, #4
        DSTRING r0, "error:"
        SUB     r0, r0, #4
 ]
        STR     r0, [sp, #Proc_RegOffset]
        EXIT

MsgsNul DCB     0
        ALIGN

; ---------------------------
; message_lookup2_into_buffer
; ---------------------------
;
; In    r0 = pointer to nul-terminated tag
;       r1 = buffer
;       r2 = buffer size
; Out   r0 = pointer to ctrl-char terminated string
;       r1 = pointer to terminating char in buffer
;       r2 = number of bytes free in buffer
;       error possible
message_lookup2_into_buffer Entry "r0-r7"
        ADR     R4, MsgsNul
10
        ADR     R5, MsgsNul
20
        ADR     R6, MsgsNul
        ADR     R7, MsgsNul
 [ debugmsgstuff
        DSTRING r0,"message_lookup2_into_buffer(",cc
        DREG    r1,",",cc
        DREG    r2,",",cc
        DSTRING r4,",",cc
        DSTRING r5,",",cc
        DSTRING r6,",",cc
        DSTRING r7,",",cc
        DLINE   ")"
 ]
        MOV     r3, r2
        MOV     r2, r1
        MOV     r1, r0
        ADR     r0, message_file_block
        BL      open_message_file
        SWIVC   XMessageTrans_Lookup
        STRVS   r0, [sp]
        STRVC   r2, [sp]
        ADDVC   r2, r2, r3
        STRVC   r2, [sp, #1*4]
        LDRVC   r2, [sp, #2*4]
        SUBVC   r2, r2, r3
        STRVC   r2, [sp, #2*4]
 [ debugmsgstuff
        BVC     %FT01
        ADD     r0, r0, #4
        DSTRING r0, "error:"
        SUB     r0, r0, #4
01
 ]
        EXIT

; ---------------------------
; message_lookup21_into_buffer
; ---------------------------
;
; In    r0 = pointer to nul-terminated tag
;       r1 = buffer
;       r2 = buffer size
;       r4 = subst argument 1
; Out   r0 = pointer to ctrl-char terminated string
;       r1 = pointer to terminating char in buffer
;       r2 = number of bytes free in buffer
;       error possible
message_lookup21_into_buffer ALTENTRY
        B       %BT10

; ---------------------------
; message_lookup22_into_buffer
; ---------------------------
;
; In    r0 = pointer to nul-terminated tag
;       r1 = buffer
;       r2 = buffer size
;       r4 = subst argument 1
;       r5 = subst argument 2
; Out   r0 = pointer to ctrl-char terminated string
;       r1 = pointer to terminating char in buffer
;       r2 = number of bytes free in buffer
;       error possible
message_lookup22_into_buffer ALTENTRY
        B       %BT20

; ----------------
; message_gswrite0
; ----------------
;
; In    r0 = pointer to nul-terminated <tag>
; Out   all regs preserved (except r0 on error)
;       error possible
message_gswrite0 Entry "r0-r7", 256
        ADR     R4, MsgsNul
10
        ADR     R5, MsgsNul
20
        ADR     R6, MsgsNul
        ADR     R7, MsgsNul
 [ debugmsgstuff
        DSTRING r0,"message_gswrite0(",cc
        DSTRING r4,",",cc
        DSTRING r5,",",cc
        DSTRING r6,",",cc
        DSTRING r7,",",cc
        DLINE   ")"
 ]
        BL      open_message_file
        MOVVC   r1, r0
        ADRVC   r0, message_file_block
        MOVVC   r2, sp
        MOVVC   r3, #256
        SWIVC   XMessageTrans_GSLookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        STRVS   r0, [sp, #Proc_LocalStack + 0*4]
 [ debugmsgstuff
        BVC     %FT01
        ADD     r0, r0, #4
        DSTRING r0, "error:"
        SUB     r0, r0, #4
01
 ]

        EXIT

; -----------------
; message_gswrite01
; -----------------
;
; In    r0 = pointer to nul-terminated <tag>
;       r4 = pointer to substitute string
; Out   all regs preserved unless error
;               globalerror possible
message_gswrite01 ALTENTRY
        B       %BT10


; -----------------
; message_gswrite02
; -----------------
;
; In    r0 = pointer to nul-terminated <tag>
;       r4 = pointer to substitute string
;       r5 = pointer to substitute string
; Out   all regs preserved unless error
;               globalerror possible
message_gswrite02 ALTENTRY
        B       %BT20


; --------------
; message_write0
; --------------
;
; In    r0 = pointer to nul-terminated <tag>
; Out   all regs preserved (except r0 on error)
;       error possible
message_write0 Entry "r0-r7", 768
        ADR     R4, MsgsNul
10
        ADR     R5, MsgsNul
20
        ADR     R6, MsgsNul
30
        ADR     R7, MsgsNul
 [ debugmsgstuff
        DSTRING r0,"message_write0(",cc
        DSTRING r4,",",cc
        DSTRING r5,",",cc
        DSTRING r6,",",cc
        DSTRING r7,",",cc
        DLINE   ")"
 ]
        BL      open_message_file
        MOVVC   r1, r0
        ADRVC   r0, message_file_block
        MOVVC   r2, sp
        MOVVC   r3, #Proc_LocalStack
        SWIVC   XMessageTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
 [ debugmsgstuff
        BVS     %FT01
        DSTRING r0, "about to WriteN ",cc
        DREG    r1, " with length "
        B       %FT02
01
        ADD     r0, r0, #4
        DSTRING r0, "Not about to WriteN with error:"
        SUB     r0, r0, #4
02
 ]
        SWIVC   XOS_WriteN
 [ debugmsgstuff
        BVC     %FT01
        ADD     r0, r0, #4
        DSTRING r0, "error:"
        SUB     r0, r0, #4
01
 ]
        STRVS   r0, [sp, #Proc_LocalStack + 0*4]

        EXIT

; ---------------
; message_write01
; ---------------
;
; In    r0 = pointer to nul-terminated <tag>
;       r4 = pointer to substitute string
; Out   all regs preserved unless error
message_write01 ALTENTRY
        B       %BT10


; ---------------
; message_write02
; ---------------
;
; In    r0 = pointer to nul-terminated <tag>
;       r4 = pointer to substitute string
;       r5 = pointer to substitute string
; Out   all regs preserved unless error
;               error possible
message_write02 ALTENTRY
        B       %BT20

; ---------------
; message_write03
; ---------------
;
; In    r0 = pointer to nul-terminated <tag>
;       r4 = pointer to substitute string
;       r5 = pointer to substitute string
;       r6 = pointer to substitute string
; Out   all regs preserved unless error
;               error possible
message_write03 ALTENTRY
        B       %BT30


message_filename
        DCB     "Resources:$.Resources.FileSwitch.Messages", 0
        ALIGN

; -----------------
; open_message_file
; -----------------
;
; In    -
; Out   r0,VS possible - globalerror not set
open_message_file Entry "r0-r2"

        ; Ensure file not open already
        LDR     r1, message_file_flags
        TST     r1, #message_file_open
        EXIT    NE

 [ debugmsgstuff
        DLINE   "Open message file...",cc
 ]

        ; Check if we're busy opening it at the moment
        TST     r1, #message_file_busy
        BEQ     %FT10

 [ debugmsgstuff
        DLINE   "***BUSY***"
 ]
        ; Gark: message file currently busy.
        ; Don't even try to look up the error!
        addr    r0, ErrorBlock_MessageFileBusy
        SETV
        B       %FT95

10
        ; Mark message file as busy
        ORR     r1, r1, #message_file_busy
        STR     r1, message_file_flags

        ; Open it
        ADR     R0, message_file_block
        ADR     R1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile

        ; Mark the message file as open and not busy
        LDRVC   r1, message_file_flags
        ORRVC   r1, r1, #message_file_open
        STRVC   r1, message_file_flags
 [ debugmsgstuff
        BVC     %FT01
        ADD     r0, r0, #4
        DSTRING r0, "error:"
        SUB     r0, r0, #4
        B       %FT02
01
        DLINE   "Done"
02
 ]

90
        LDR     r1, message_file_flags
        BIC     r1, r1, #message_file_busy
        STR     r1, message_file_flags

95
        STRVS   r0, [sp]
        EXIT

        END
@


4.3
log
@    Altered to use shared makefiles and ObjAsm.

Detail:
    As above. No other changes.

Admin:
    Tested in a Lazarus build.

Version 2.57. Tagged as 'FileSwitch-2_57'
@
text
@d408 1
a408 1
        ; Check if we're busy openning it at the moment
@


4.2
log
@  32-bit compatible.
Admin:
  Tested on a 32-bit system; untested on 26-bit, and merge with Ursula branch
  untested.

Version 2.52. Tagged as 'FileSwitch-2_52'
@
text
@d23 1
a23 1
copy_error ENTRY "r1-r7"
d159 1
a159 1
message_lookup2_into_buffer ENTRY "r0-r7"
d236 1
a236 1
message_gswrite0 ENTRY "r0-r7", 256
d303 1
a303 1
message_write0 ENTRY "r0-r7", 768
d397 1
a397 1
open_message_file ENTRY "r0-r2"
@


4.1
log
@Initial revision
@
text
@d116 1
a116 1
message_lookup ENTRY "r0-r7"
d135 1
a135 1
        STRVC   r2, [sp]
d142 1
a142 1
        STR     r0, [sp]
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
