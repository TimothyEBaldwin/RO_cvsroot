head	4.10;
access;
symbols
	NetFS-6_00:4.10
	NetFS-5_99:4.10
	NetFS-5_98:4.10
	NetFS-5_97:4.9
	NetFS-5_96:4.8
	NetFS-5_95:4.6
	NetFS-5_94:4.5
	NetFS-5_93:4.4
	RO_5_07:4.3
	NetFS-5_92:4.3
	NetFS-5_91:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.10
date	2016.09.03.21.04.01;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	L5ertHQrMbQE2Tkz;

4.9
date	2016.06.26.17.41.51;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	78uJK5BGaEzG80cz;

4.8
date	2015.01.16.00.31.18;	author jlee;	state Exp;
branches;
next	4.7;
commitid	Z0sNvN0ObBWxnb6y;

4.7
date	2012.02.20.19.55.57;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	zL9zBJDHufLwVVTv;

4.6
date	2012.01.27.11.34.22;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	4lScnc8CgSCeVNQv;

4.5
date	2009.06.11.21.02.23;	author bavison;	state Exp;
branches;
next	4.4;

4.4
date	2009.05.17.02.59.09;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2003.01.17.17.28.22;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	99.08.17.21.23.31;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.33.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.33.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.00.57.43;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.04.16.10.17.21;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.38.46;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.35.11;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Add support for RAM variant
Usual boiler plate code to register with ResourceFS. Tested briefly on Titanium.

Version 5.98. Tagged as 'NetFS-5_98'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        TTL     Econet filing system for Arthur. ==> &.Arthur.NetFS.Module

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:CMOS
        GET     Hdr:ModHand
        GET     Hdr:Heap
        GET     Hdr:Services
        GET     Hdr:Debug
        GET     Hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     Hdr:LowFSI
        GET     Hdr:Econet
        GET     Hdr:OsBytes
        GET     Hdr:NewErrors
        GET     Hdr:VduExt
        GET     Hdr:Tokens
        GET     Hdr:MsgTrans
        GET     Hdr:Territory
        GET     Hdr:Symbols
        GET     Hdr:Portable
        GET     Hdr:ResourceFS
        GET     VersionASM

        SUBT    Module header ==> &.Arthur.NetFS.Module

                GBLL    OldOs
OldOs           SETL    {FALSE}
                GBLL    UseMsgTrans
UseMsgTrans     SETL    {TRUE}
                GBLL    Files32Bit
Files32Bit      SETL    {FALSE}
                GBLL    Files24Bit
Files24Bit      SETL    {TRUE}
                GBLL    ReleaseVersion
ReleaseVersion  SETL    {TRUE}
                GBLS    NewLibName
NewLibName      SETS    "ArthurLib"
                GBLL    Debug
Debug           SETL    (:LNOT: ReleaseVersion) :LAND: {FALSE}
    [ :LNOT: :DEF: standalone
                GBLL    standalone
standalone      SETL    {FALSE}                         ; Build-in Messages file and i/f to ResourceFS
    ]
    [ :LNOT: :DEF: international_help
                GBLL    international_help
international_help SETL {TRUE}                          ; Default to RISC OS 3.60+ internationalisation
    ]

        ASSERT  Files24Bit :LOR: Files32Bit             ; Must be one or other or both

NumberOfDiscs   *       4                               ; Number of discs requested by the broadcast
WriteOnlySize   *       &400                            ; Buffer size used at run time
FrameSize       *       &200
CreateSize      *       &10000                          ; Block size for *Create
EXT_Threshold   *       &20000
EXT_BlockSize   *       &10000

DiscNameSize    *       16
UserIdSize      *       21                              ; "TenChars**.TenChars**"

        AREA    |NetFS$$Code|,CODE,READONLY,PIC

Module_BaseAddr
        DCD     0                                       ; StartAsFS
        DCD     InitModule - Module_BaseAddr            ; Initialisation
        DCD     KillModule - Module_BaseAddr            ; Finalisation
        DCD     Service - Module_BaseAddr
        DCD     ModuleTitle - Module_BaseAddr
        DCD     HelpString - Module_BaseAddr
        DCD     UtilsCommands - Module_BaseAddr         ; Command Table
        DCD     NetFSSWI_Base
        DCD     SWIEntry - Module_BaseAddr
        DCD     SWINameTable - Module_BaseAddr
        DCD     0
        [ international_help
        DCD     MessageFileName - Module_BaseAddr
        |
        DCD     0
        ]
        DCD     ModuleFlags - Module_BaseAddr

        GET     Memory.s

        MACRO
        HandleFlags $R, $URD, $CSD, $LIB, $Flip
        [       "$R" = "" :LOR: "$URD" = "" :LOR: "$CSD" = "" :LOR: "$LIB" = ""
        !       1,"Syntax is: HandleFlags register, URD, CSD, LIB [, Flip]
        ]
        [       "$Flip" = ""
        MOV     $R, #(Use$URD.Handle:SHL:URDSlotShift)+(Use$CSD.Handle:SHL:CSDSlotShift)+(Use$LIB.Handle:SHL:LIBSlotShift)
        |
        MOV     $R, #(Use$URD.Handle:SHL:URDSlotShift)+(Use$CSD.Handle:SHL:CSDSlotShift)+(Use$LIB.Handle:SHL:LIBSlotShift)+FlipLibDirBit
        ]
        MEND

        MACRO
        Err     $name
        ALIGN
Error$name
        DCD     ErrorNumber_$name
        DCB     ErrorString_$name
        DCB     0
        ALIGN
        MEND

        SUBT    Module entry stuff
        OPT     OptPage
ModuleTitle
        DCB     "NetFS", 0
        ALIGN

HelpString
        DCB     "NetFS", 9, 9, "$Module_MajorVersion ($Module_Date)"
        [ Module_MinorVersion <> ""
        DCB     " $Module_MinorVersion"
        ]
        DCB     0
        ALIGN

ModuleFlags
        [       :LNOT:No32bitCode
        DCD     ModuleFlag_32bit
        |
        DCD     0
        ]

        SUBT    Initialisation code
        OPT     OptPage

InitModule      ROUT
        Push    "r0-r4, lr"
        MOV     r4, r12                                 ; Preserve the pointer to give to FileSwitch
        LDR     r3, [ r12 ]
        TEQ     r3, #0
        MOVNE   wp, r3
        BNE     ReInitialisation
        MOV     r0, #0
        MOV     r1, #-1
        SWI     XEconet_SetProtection                   ; Do a read to discover if Econet is there
        BVS     EconetError
        LDR     r3, =:INDEX: TotalRAMRequired
        BL      MyClaimRMA
        BVS     ExitInitialisation
        STR     r2, [ r12 ]
        MOV     wp, r2
        ADR     r0, AliasForLogon
        SWI     XOS_CLI
        BVS     ExitInitialisation
        [       :LNOT: OldOs
        BL      TerritoryStarted
        ]
        B       StoreClaimed

AliasForLogon
        DCB     "Set Alias$$I IF NOT((""%0""=""AM"")OR(""%0""=""am"")"
        DCB     "OR(""%0""=""Am"")OR(""%0""=""aM""))"
        DCB     " THEN %I %*0 ELSE %Net|m%Logon %*1", 13
        ALIGN

EconetError
        LDR     r14, [ r0 ]
        LDR     r3, =ErrorNumber_NoSuchSWI
        TEQ     r14, r3
        [       UseMsgTrans
        BNE     ExitInitialisation
        ADR     Error, ErrorNoEco
        MOV     r1, #0
        MOV     r2, #0
        SWI     XMessageTrans_ErrorLookup
        B       ExitInitialisation

ErrorNoEco
        DCD     ErrorNumber_NoEconet
        DCB     "NoEco", 0
        ALIGN
        |       ; UseMsgTrans
        ADREQ   r0, ErrorNoEconet
        SETV
        B       ExitInitialisation

        Err     NoEconet
        ALIGN
        ]       ; UseMsgTrans
ReInitialisation
StoreClaimed

        [ UseMsgTrans
      [ standalone
        ADRL    r0, ResourceFilesList
        SWI     XResourceFS_RegisterFiles
        BVS     ExitInitialisation
      ]
        ]

        ASSERT  ((EndOfInitialisationData - InitialisationData):AND:3)=0
        MOV     r3, #EndOfInitialisationData - InitialisationData - 4
        ADR     r2, InitialisationData
10
        LDR     r0, [ r2, r3 ]
        STR     r0, [ wp, r3 ]                          ; Note that the initialised data is
        DECS    r3, 4                                   ; at the start of workspace
        BPL     %10

        MOV     r0, #FSControl_AddFS
        ADR     r1, Module_BaseAddr
        LDR     r2, =FSInfoBlock - Module_BaseAddr
        MOV     r3, r4                                  ; The address of my private word
        SWI     XOS_FSControl
        [       :LNOT: OldOs
        MOVVC   r1, #0
        MOVVC   r2, #Dir_Current
        BLVC    SetDir
        MOVVC   r2, #Dir_Previous
        BLVC    SetDir
        MOVVC   r2, #Dir_UserRoot
        BLVC    SetDir
        MOVVC   r2, #Dir_Library
        BLVC    SetDir
        ]
        BVS     ExitInitialisation
ClaimEvent
        MOV     r0, #EventV
        ADRL    r1, Event
        MOV     r2, wp
        SWI     XOS_Claim                               ; Start up the cache task
        MOVVC   r0, #OsByte_EnableEvent
        MOVVC   r1, #Event_Econet_Rx
        SWIVC   XOS_Byte
        MOVVC   r1, #Service_NetFS
        SWIVC   XOS_ServiceCall
ExitInitialisation
        STRVS   r0, [ sp ]
        Pull    "r0-r4, pc"

ServiceTable
        DCD     0
        DCD     ServiceMain - Module_BaseAddr
        ASSERT  Service_Reset > Service_UKCommand
        ASSERT  Service_FSRedeclare > Service_Reset
        ASSERT  Service_EconetDying > Service_FSRedeclare
        ASSERT  Service_ResourceFSStarting > Service_EconetDying
        ASSERT  Service_TerritoryStarted > Service_ResourceFSStarting
        ASSERT  Service_Portable > Service_TerritoryStarted
        DCD     Service_UKCommand
        DCD     Service_Reset
        DCD     Service_FSRedeclare
        DCD     Service_EconetDying
      [ standalone
        DCD     Service_ResourceFSStarting
      ]
        [       :LNOT: OldOs
        DCD     Service_TerritoryStarted
        DCD     Service_Portable
        ]
        DCD     0

        DCD     ServiceTable - Module_BaseAddr
Service ROUT
        MOV     r0, r0
        TEQ     r1, #Service_FSRedeclare
        TEQNE   r1, #Service_UKCommand
        TEQNE   r1, #Service_EconetDying
        TEQNE   r1, #Service_Reset
      [ standalone
        TEQNE   r1, #Service_ResourceFSStarting
      ]
        [       :LNOT: OldOs
        TEQNE   r1, #Service_Portable
        TEQNE   r1, #Service_TerritoryStarted
        ]
        MOVNE   pc, lr
ServiceMain
        TEQ     r1, #Service_FSRedeclare
        BEQ     RedeclareFilingSystem
        LDR     wp, [ r12 ]
        TEQ     r1, #Service_UKCommand
        BEQ     FileServerCommand
        TEQ     r1, #Service_EconetDying
        BEQ     FlushNameCache
      [ standalone
        TEQ     r1, #Service_ResourceFSStarting
        BEQ     ReRegisterResourceFiles
      ]
        [       :LNOT: OldOs
        TEQ     r1, #Service_Portable
        BEQ     Portable
        TEQ     r1, #Service_TerritoryStarted
        BEQ     TerritoryStarted
        ]
        ;       TEQ r1, #Service_Reset                  ; Falls through for Service_Reset
        ;       MOVNE pc, lr
        ;       Now check reset was NOT hard
        Push    "r0-r4, lr"
        MOV     r0, #OsByte_RW_LastResetType
        MOV     r1, #0
        MOV     r2, #255
        SWI     XOS_Byte                                ; Read last reset type, only do reset when it was soft
        TEQ     r1, #0
        BEQ     ClaimEvent
        Pull    "r0-r4, pc"

        [       :LNOT: OldOs
Portable
        TEQ     r2, #ServicePortable_TidyUp             ; Is Econet begging for it?
        MOVNE   pc, lr                                  ; No, so who cares?
        Push    "r0, r4, lr"
        BL      StopCache                               ; Release the required resources
        Pull    "r0, r4, pc"

TerritoryStarted
        Push    "r0, lr"
        MOV     r0, #-1
        SWI     XTerritory_UpperCaseTable
        SUBVSS  r0, r0, r0                              ; Zero means no table (and clear V)
        STR     r0, UpperCaseTable
        Pull    "r0, pc"
        ]

        [ standalone
ReRegisterResourceFiles
        Push    "r0, lr"
        ADRL    r0, ResourceFilesList
        MOV     lr, pc                                  ; Make a return link
        MOV     pc, r2                                  ; Enter ResourceFS
        Pull    "r0, pc"
        ]

RedeclareFilingSystem                                   ; to FileSwitch
        Push    "r0-r3, lr"
        MOV     r0, #FSControl_AddFS
        ADRL    r1, Module_BaseAddr
        LDR     r2, =FSInfoBlock - Module_BaseAddr
        MOV     r3, r12                                 ; The address of my private word
        SWI     XOS_FSControl
        Pull    "r0-r3, pc"


KillModule      ROUT                                    ; Totally ignore all errors in this section
        Push    "r0-r2, lr"
        LDR     wp, [ r12 ]
        BL      FlushNameCache
        BL      FlushAnotherTxList
        MOV     r0, #OsByte_DisableEvent
        MOV     r1, #Event_Econet_Rx
        SWI     XOS_Byte
        MOV     r0, #EventV
        ADRL    r1, Event
        MOV     r2, wp
        SWI     XOS_Release
        MOV     r1, #Service_NetFSDying
        SWI     XOS_ServiceCall
        MOV     r0, #FSControl_RemoveFS
        ADRL    r1, FilingSystemName
        SWI     XOS_FSControl
        LDR     r2, Contexts
FlushContextsLoop
        TEQ     r2, #NIL                                ; Have we got to the end of the chain ??
        BEQ     FlushContextsFinish
        LDR     r1, [ r2, #Context_Link ]               ; Get the next link
        BL      MyFreeRMA
        BVS     FlushContextsFinish
        MOV     r2, r1                                  ; Meet the entry conditions
        B       FlushContextsLoop
FlushContextsFinish
        BL      FlushAnotherTxList
        [       UseMsgTrans
        LD      r0, MessageBlockAddress                 ; Is it open?
        MOV     r1, #0
        ST      r1, MessageBlockAddress                 ; Mark it as closed
        TEQ     r0, #0
        SWINE   XMessageTrans_CloseFile                 ; Close it if it was open
      [ standalone
        ADRL    r0, ResourceFilesList
        SWI     XResourceFS_DeregisterFiles
      ]
        ]       ; UseMsgTrans
        CLRV                                            ; Note that this can't fail
        Pull    "r0-r2, pc"

MyReadCMOS
        Push    "r1, lr"
        MOV     r0, #OsByte_ReadCMOS
        SWI     XOS_Byte
        Pull    "r1, pc"

MyWriteCMOS
        Push    "r1, lr"
        MOV     r0, #OsByte_WriteCMOS
        SWI     XOS_Byte
        Pull    "r1, pc"

        [       UseMsgTrans
MakeError       ROUT
        Push    "r4, r5, lr"
        MOV     r4, #0
DoMakeError1
        MOV     r5, #0
        BL      MessageTransErrorLookup2
        Pull    "r4, r5, pc"

MakeErrorWithModuleName
        Push    "r4, r5, lr"
        ADR     r4, ModuleTitle
        B       DoMakeError1

MessageTransErrorLookup2
        Push    "r1-r3, r6, r7, lr"
        [       Debug
        ADD     r14, r0, #4
        DSTRING r14, "Looking up error token "
        ]
        LD      r1, MessageBlockAddress
        CMP     r1, #0                                  ; Clears V
        BNE     DoErrorLookup
        MOV     r7, r0
        ADR     r0, MessageBlock
        ADR     r1, MessageFileName
        MOV     r2, #0                                  ; Use the file where she lies
        SWI     XMessageTrans_OpenFile
        ADRVC   r1, MessageBlock
        STRVC   r1, MessageBlockAddress
        MOV     r0, r7                                  ; Preserve R0 even in the error case
DoErrorLookup
        MOV     r2, #0
        MOV     r3, #0
        MOV     r6, #0
        MOV     r7, #0
        SWIVC   XMessageTrans_ErrorLookup
        [       Debug
        ADD     r14, r0, #4
        DSTRING r14, "Results in "
        ]
        Pull    "r1-r3, r6, r7, pc"

MessageFileName
        DCB     "Resources:$.Resources.NetFS.Messages", 0
        ALIGN

MessageTransGSLookup0
        Push    "r4, r5, lr"
        MOV     r4, #0
        MOV     r5, #0
        BL      MessageTransGSLookup2
        Pull    "r4, r5, pc"

MessageTransGSLookup1
        Push    "r5, lr"
        MOV     r5, #0
        BL      MessageTransGSLookup2
        Pull    "r5, pc"

MessageTransGSLookup2
        Push    "r6, r7, lr"
        LD      r0, MessageBlockAddress
        CMP     r0, #0                                  ; Clears V
        BNE     DoGSLookup
        Push    "r1, r2"
        ADR     r0, MessageBlock
        ADR     r1, MessageFileName
        MOV     r2, #0                                  ; Use the file where she lies
        SWI     XMessageTrans_OpenFile
        ADRVC   r0, MessageBlock
        STRVC   r0, MessageBlockAddress
        Pull    "r1, r2"
DoGSLookup
        MOV     r6, #0
        MOV     r7, #0
        SWIVC   XMessageTrans_GSLookup
        Pull    "r6, r7, pc"

        ]       ; UseMsgTrans

MyClaimRMA
        Push    "r0, lr"
        [ {FALSE} ; Debug
        DREG    r3, "Claiming &", cc
        ]
        MOV     r0, #ModHandReason_Claim
        B       CallOSModule

MyFreeRMA
        Push    "r0, lr"
        [ {FALSE} ; Debug
        LDR     r0, [ r2, #-4 ]
        DREG    r0, "Freeing &", cc
        ]
        MOV     r0, #ModHandReason_Free
CallOSModule
        SWI     XOS_Module
        [ {FALSE} ; Debug
        DREG    r2, " bytes at &"
        ]
        STRVS   r0, [ sp, #0 ]
        Pull    "r0, pc"

ConvertStatusToError
        Push    lr
        [       UseMsgTrans
        MOV     r1, #0
        MOV     r2, #0
        |
        ADR     r1, ErrorBuffer
        MOV     r2, #?ErrorBuffer
        ]
        SWI     XEconet_ConvertStatusToError
        Pull    pc

        LTORG

        GET     Interface.s
        GET     FileSystem.s
        GET     Commands.s
        GET     Configure.s
        GET     OsFile.s
        GET     Random.s
        GET     Functions.s
        GET     Catalog.s
        GET     TokHelpSrc.s

      [ standalone
ResourceFilesList
        ResourceFile $MergedMsgs, Resources.NetFS.Messages
        DCD     0
      ]

      [ Debug
        InsertDebugRoutines
      ]

        END
@


4.9
log
@Clean up pass
* Use Command macro to make the command name table
* Rename Origin to Module_BaseAddr (for Command macro)
* Split messages into CmdHelp+Messages files
* Use international_help switch passed in from makefile to decide which to build; remove "NewOS" and "CurrentOS" equivalents
* Use Hdr:OsBytes to name OS_Byte value in R0
* Remove some unused headers
* {TRUE} and {FALSE} from ObjAsm
Not tagged.
@
text
@d38 1
d57 4
a60 1

d66 1
a66 1
        ASSERT  Files24Bit :LOR: Files32Bit             ; Must be ome or other or both
d204 8
d258 2
a259 1
        ASSERT  Service_TerritoryStarted > Service_EconetDying
d265 3
d281 3
d297 4
d336 9
d389 4
d537 7
a543 1
        [       Debug
d545 1
a545 1
        ]
@


4.8
log
@Escape some dollars
Detail:
  s/Module - Escape some dollars contained in strings to avoid warnings from objasm
Admin:
  Resulting binary unchanged


Version 5.96. Retagged as 'NetFS-5_96'
@
text
@a19 2
	GET	Hdr:Machine.<Machine>
        GET     Hdr:CPU.Arch
d30 1
d38 1
a38 4

	GET	VersionASM
	GBLL	ReleaseVersion
ReleaseVersion SETL True
d42 11
a52 6
MySWIChunkBase  *       Module_SWISystemBase + NetFSSWI * Module_SWIChunkSize
        ASSERT  MySWIChunkBase = NetFS_ReadFSNumber

        ASSERT  Files24Bit :LOR: Files32Bit             ; Must be ome or other or both

        GBLS    NewLibName
d54 2
d57 4
a60 2
        GBLL    Debug
Debug           SETL    (:LNOT: ReleaseVersion) :LAND: False
d62 1
a62 1
TokeniseHelp    SETL    TokeniseHelp :LAND: (:LNOT: (International_Help = 0))
d76 1
a76 1
Origin
d78 9
a86 9
        DCD     InitModule - Origin                     ; Initialisation
        DCD     KillModule - Origin                     ; Finalisation
        DCD     Service - Origin
        DCD     ModuleTitle - Origin
        DCD     HelpString - Origin
        DCD     UtilsCommands - Origin                  ; Command Table
        DCD     MySWIChunkBase
        DCD     SWIEntry - Origin
        DCD     SWINameTable - Origin
d88 2
a89 2
        [       TokeniseHelp
        DCD     MessageFileName - Origin
d93 1
a93 1
        DCD     ModuleFlags - Origin
d210 2
a211 2
        ADR     r1, Origin
        LDR     r2, =FSInfoBlock - Origin
d231 1
a231 1
        MOVVC   r0, #14                                 ; Enable events
d242 7
a248 3
        DCD     ServiceMain - Origin

        DCD     Service_UKCommand               ; Don't forget - ascending order required
d258 1
a258 1
        DCD     ServiceTable - Origin
d288 1
a288 1
        MOV     r0, #253
d316 2
a317 2
        ADRL    r1, Origin
        LDR     r2, =FSInfoBlock - Origin
d328 1
a328 1
        MOV     r0, #13                                 ; Disable events
d363 1
a363 1
        MOV     r0, #ReadCMOS
d369 1
a369 1
        MOV     r0, #WriteCMOS
d456 1
a456 1
        [       False ; Debug
d464 1
a464 1
        [       False ; Debug
d471 1
a471 1
        [       False ; Debug
@


4.7
log
@Fix failure to get upper case table from TerritoryManager.
The store to UpperCaseTable was conditional on VC, and for good measure also included a 26 bit '^' in the pop.
Fixed another rogue '^' missed in 32 bitting.
Resolved the 3x warnings about deprecated instructions.

Version 5.96. Tagged as 'NetFS-5_96'
@
text
@d163 1
a163 1
        DCB     "Set Alias$I IF NOT((""%0""=""AM"")OR(""%0""=""am"")"
@


4.6
log
@Extra GET of the Portable header.
@
text
@d299 3
a301 3
        MOVVS   r0, #0                                  ; Failure means no table
        STRVC   r0, UpperCaseTable
        Pull    "r0, pc",, ^
@


4.5
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 5.93. Not tagged
@
text
@d21 1
d38 1
a38 1
        GET     Hdr:CPU.Arch
@


4.4
log
@  Build fix
Detail:
  This module uses the LDW macro, so now it needs to include Hdr:CPU.Arch
  to decide whether to use ARMv6 optimisations
Admin:
  Untested, but should be safe

Version 5.93. Tagged as 'NetFS-5_93'
@
text
@d89 1
a89 1
        GET     s.Memory
d481 9
a489 9
        GET     s.Interface
        GET     s.FileSystem
        GET     s.Commands
        GET     s.Configure
        GET     s.OsFile
        GET     s.Random
        GET     s.Functions
        GET     s.Catalog
        GET     s.TokHelpSrc
@


4.3
log
@32-bit compatible.

Version 5.92. Tagged as 'NetFS-5_92'
@
text
@d37 1
@


4.2
log
@Moved to srccommit.
Tidied up obsolete scripts.
Merged Ursula branch.
Added inclusion of Machine header for new CMOS header.

Version 5.91. Tagged as 'NetFS-5_91'
@
text
@d21 1
d67 2
d86 1
d126 7
d347 2
a348 2
        Pull    "r0-r2, lr"
        BICS    pc, lr, #VFlag                          ; Note that this can't fail
d488 1
a488 1
        GET     s.HelpTokens
@


4.1
log
@Initial revision
@
text
@d20 1
d37 3
a39 1
        GET     Time+Date
d115 3
a117 6
        DCB     "NetFS", 9, 9, "5.", CurrentVersion
        [       ReleaseVersion
        !       0, "Assembling NetFS 5.$CurrentVersion$OsString"
        |
        DCB     "/", CurrentIteration
        !       0, "Assembling NetFS 5.$CurrentVersion/$CurrentIteration$OsString"
d119 1
a119 5
        DCB     " (", CurrentDate, ")"
        [       :LNOT: ReleaseVersion
        DCB     " assembled  at ", CurrentTime, "."
        ]
        DCB     "$OsString", 0
d152 1
a152 1
        DCB     " THEN %I %*0 ELSE %Net|m%Logon %*1", 13 
d222 15
d238 1
d248 1
d290 1
a290 1
        
d304 1
a304 1
        BL      FlushNameCache 
@


4.1.4.1
log
@Ursula service call table added
@
text
@d156 1
a156 1
        DCB     " THEN %I %*0 ELSE %Net|m%Logon %*1", 13
a225 15
ServiceTable
        DCD     0
        DCD     ServiceMain - Origin

        DCD     Service_UKCommand               ; Don't forget - ascending order required
        DCD     Service_Reset
        DCD     Service_FSRedeclare
        DCD     Service_EconetDying
        [       :LNOT: OldOs
        DCD     Service_TerritoryStarted
        DCD     Service_Portable
        ]
        DCD     0

        DCD     ServiceTable - Origin
a226 1
        MOV     r0, r0
a235 1
ServiceMain
d277 1
a277 1

d291 1
a291 1
        BL      FlushNameCache
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
