head	4.7;
access;
symbols
	ADFS-3_54:4.7
	ADFS-3_53:4.7
	ADFS-3_52:4.7
	ADFS-3_51:4.7
	ADFS-3_50:4.7
	ADFS-3_49:4.7
	ADFS-3_48:4.7
	ADFS-3_47:4.7
	ADFS-3_46:4.7
	ADFS-3_45:4.6
	ADFS-3_44:4.5
	ADFS-3_43:4.5
	ADFS-3_42:4.5
	ADFS-3_41:4.5
	ADFS-3_40:4.5
	ADFS-3_39:4.4
	ADFS-3_38:4.4
	ADFS-3_37:4.4
	ADFS-3_36:4.4
	RO_5_07:4.4
	ADFS-3_35:4.4
	ADFS-3_34:4.3
	ADFS-3_33:4.1
	dellis_autobuild_BaseSW:4.1
	ADFS-3_32:4.1
	Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	sbrodie_UrsulaRiscPC_ADFS-3_30:4.1
	Ursula_RiscPC_bp:4.1
	nturton_ADFS-3_29:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	sproven_ADFS-3_31:4.1.4.1
	nicke_ADFS_3_26:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	sproven_330:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2012.10.21.16.27.50;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	ReyUVZewswdRVgpw;

4.6
date	2012.10.21.11.38.09;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	L8DklCrHdjSrkfpw;

4.5
date	2011.08.07.19.35.54;	author jlee;	state Exp;
branches;
next	4.4;
commitid	AILCacyEauof9Cuv;

4.4
date	2003.04.03.18.47.57;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2003.01.17.19.33.27;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2002.09.18.15.03.29;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.31.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.31.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.35.11;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.09.02.18.37.26;	author sproven;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.28.50;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.24.22;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Reinstate floppies on IOMD platform
ADFS.s:
  Remove redundant header file.
Adfs05.s/Adfs15.s:
  Group the options a bit more simply, use {TRUE} and {FALSE}.
Adfs12.s/BusMaster.s/IDEDetect.s:
  Use defines instead of magic numbers.
Adfs17.s:
  Organise the offsets from the floppy controller to cover both PCI and IO based controllers.
  Only do the dummy read from the PBI on Tungsten.
Adfs18.s:
  Implement the FIQ equivalent of the 'FlpUseVerify' command switch, modern controllers (!) have a built in verify rather than using a sector read, but the verify command has no data phase and the FIQ handler was sitting waiting for a sector that never arrives.
  Rationalise FlpDRQmask and FlpDRQmaskbit.
Adfs19:
  Rationalise the calls to OS_Hardware by rejigging the assembly time switches.
  Reinstate the non HAL version of IRQ enable for reference.
  On RPCEmu 0.8.8 and 0.8.9 the emulator hangs during the four set of DCB's used to autodetect the drive (Recalibrate/Seek/Seek/Sense) which seems to be due to the way the emulator splits CPU time to floppy emulation time, to avoid this we wait 128us (real time) which is enough emulated time for the controller to have changed state. You probably just want to *CONFIGURE FLOPPIES 0 though.

Tested om A7000, ARM610, StrongARM manipulating a veriety of disc densities for read and write. Also ran the "Test/TestADFS" test program.
RPCEmu 0.8.8 and 0.8.9 boots still, but no attempt has been made to use emulated floppies.

Version 3.46. Tagged as 'ADFS-3_46'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;> Adfs05
; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
; LVR - Lawrence Rust, Cambridge Beacon
;
;
; 08-Mar-91  11:29  LVR
; Merge winchester and floppy driver code
;
; 11-Mar-91  14:58  CDP
; ReadNewCMOS now returns IDE bits with ST506 bits in R4.
;
; 09-Apr-91  17:00  CDP
; ParseAnyDrive (used by configure etc.) internationalised.
;
; 17-Sep-91  10:19  LVR
; Re-included debug code to screen if Dev AND Debug
;
; 16-Dec-91  09:49  LVR
; Set Host_Debug to False
;
;*End of change record*

; +++++++++++++++++++++++ For Tube work: ++++++++++++++++++++++++++++++++++++++

        GBLS    GetHdrDebug
      [ Dev :LAND: Debug
GetHdrDebug     SETS "GET Hdr:Debug"
      |
GetHdrDebug     SETS "; Nothing"
      ]      
        $GetHdrDebug
      [ Dev :LAND: Debug
; Set to true for debugging through the tube
Host_Debug SETL {FALSE}

; Set to true to robustify debugging in IRQ mode
Debug_MaybeIRQ SETL {TRUE}
      ]

        GBLS    GetHostFS
    [ Dev
      [ Debug :LAND: Host_Debug
GetHostFS       SETS "GET Hdr:HostFS"
      |
GetHostFS       SETS "; Nothing"
      ]
    |
GetHostFS       SETS "; Nothing"
    ]
        $GetHostFS

      [ Dev :LAND: Debug
        InsertDebugRoutines
      ]


; Example tube debug calls:
;
;       DSTRING r1, "Failed on reading:",cc
;       DLINE   "Identifying a disc",cc
;       DREG    R0, "Rin:",cc

 [ Dev

        ; Ugly but necessary because debug macros can get called before
        ; workspace is set up
        ; Exits NE if IRQsema <> 0
        MACRO
        CheckIRQsema
        Push    "r0-r2,lr"
        MOV     r0, #6
        MOV     r1, #0
        MOV     r2, #OSRSI6_IRQsema
        SWI     XOS_ReadSysInfo
        MOVVS   r2, #0
        CMP     r2, #0
        LDREQ   r2, =Legacy_IRQsema
        LDR     r2, [r2]
        TEQ     r2, #0
        Pull    "r0-r2,lr"        
        MEND

PHEX
        SavePSR R4
 [ :LNOT: IrqDebug
        CheckIRQsema
        BNE    PHEXIT1         ;return if IRQ thread
 ]

        MOV     R3, LR
 [ No32bitCode
        ASSERT  SVC_mode=3
        ORR     R0, LR, #SVC_mode :OR: I_bit
        TEQP    PC, R0          ;go to SVC mode preserving flags
        NOP
 |
        MRS     R0, CPSR
        ORR     R0, R0, #SVC26_mode :OR: I32_bit
        MSR     CPSR_c, R0
 ]
        Push    "LR"
 [ SpoolOff
        BL      SpoolOff
 ]
        MOV     R1, #32-4
PHLOOP
        MOV     R0, R2, LSR R1
        AND     R0, R0, #&F
        CMPS    R0, #10
        ADDCC   R0, R0, #"0"
        ADDCS   R0, R0, #"A"-10
        SWI     OS_WriteC
        SUBS    R1, R1, #4
        BPL     PHLOOP
        MOV     R0, #" "
        SWI     OS_WriteC
 [ SpoolOff
        BL      SpoolOn
 ]
        Pull    "LR"
        RestPSR R4,,cf
        MOV     PC, R3
PHEXIT1
        RestPSR R4,,f
        MOV     PC, LR


 [ SpoolOff
SpoolOff
        Push    "R0-R3,LR"
        SavePSR R3
        MOV     R0, #OsByte_SpecifyOutputStream
        MOV     R1, #&10
        MOV     R2, #&EF
        SWI     OS_Byte
        RestPSR R3,,f
        Pull    "R0-R3,PC"

SpoolOn
        Push    "R0-R3,LR"
        SavePSR R3
        MOV     R0, #OsByte_SpecifyOutputStream
        MOV     R1, #0
        MOV     R2, #&EF
        SWI     OS_Byte
        RestPSR R3,,f
        Pull    "R0-R3,PC"
 ]

Mess1                   ;R0,R1,LR stacked
        SavePSR R0              ;save PSR
        MOV     R1, LR          ;save link
 [ :LNOT: IrqDebug
        CheckIRQsema
        MOVNE  PC, R1          ;skip if IRQ thread, return NE
 ]
        BIC     LR, R0, #3
 [ No32bitCode
        ORR     LR, LR, #SVC_mode :OR: Z_bit
        TEQP    PC, LR          ;go to supervisor mode, preserve FI, set EQ
        NOP                     ;delay for mode change
 |
        ORR     LR, LR, #SVC26_mode :OR: Z_bit
        MSR     CPSR_cf, LR
 ]
        Push     "LR"
 [ SpoolOff
        BL       SpoolOff
 ]
        MOV     PC, R1

TubeWrHexWord ROUT
        SavePSR R4
        MOV     R3, LR
        MOV     R1, #32-4
05
        MOV     R0, R2, LSR R1
        AND     R0, R0, #&F
        CMPS    R0, #10
        ADDCC   R0, R0, #"0"
        ADDCS   R0, R0, #"A"-10
        BL      TubeChar        ;(R0)
        SUBS    R1, R1, #4
        BPL     %BT05
        MOV     R0, #" "
        BL      TubeChar        ;(R0)
        RestPSR R4,,f
        MOVS    PC, R3

           ^ 0, R1
R1_status  # 4
R1_data    # 4
TubeAddress * &3340000 + (0*&4000)      ;podule 0

TubeChar ROUT
        Push    "R1,R2,LR"
        SavePSR R2
        LDR     R1, =TubeAddress
10
        LDRB    LR, R1_status
        TSTS    LR, #&40
        BEQ     %BT10
        STRB    R0, R1_data
        RestPSR R2,,f
        Pull    "R1,R2,PC"
 ]

; ======
; ClearV
; ======

ClearV
  [ No32bitCode
        BICS    PC, LR, #V_bit
  |
        Push    "LR"
        CLRPSR  V_bit, LR
        Pull    "PC"
  ]

; ====
; SetV
; ====

SetV
  [ No32bitCode
        ORRS    PC, LR, #V_bit
  |
        Push    "LR"
        SETPSR  V_bit, LR
        Pull    "PC"
  ]


; ========
; SetVOnR0
; ========

SetVOnR0
  [ No32bitCode
        CMPS    R0, #0
        BICEQS  PC, LR, #V_bit
        ORRNES  PC, LR, #V_bit
  |
        Push    "LR"
        MRS     LR, CPSR
        CMPS    R0, #0
        BICEQ   LR, LR, #V_bit
        ORRNE   LR, LR, #V_bit
        MSR     CPSR_f, LR
        Pull    "PC"
  ]


; ======
; Divide
; ======

; entry: R0=Numerator, R1=Denominator
; exit:  R0=Result, R1=Remainder

Divide  ROUT
        Push    "R2,LR"

        MOV     LR, R1          ;temp = den
        CMPS    LR, R0, LSR #1  ;shift temp left unless it would be > num
10
        MOVLS   LR, LR, LSL #1
        CMPLS   LR, R0, LSR #1
        BLS     %BT10
        MOV     R2, #0          ;init result
20
        CMPS    R0, LR          ;if subtraction possible
        SUBCS   R0, R0, LR      ; do it
        ADC     R2, R2, R2      ;shift bit into result
        MOV     LR, LR, LSR #1  ;move temp right
        CMPS    LR, R1          ;loop if not done
        BHS     %BT20

        MOV     R1, R0          ;mod
        MOV     R0, R2          ;div

        Pull    "R2,PC"

; =============
; StringCompare
; =============

; entry: R0->string,R1->string
; exit: EQ or NE

StringCompare ROUT
        Push    "R2,LR"
01      LDRB    R2,[R0],#1
        LDRB    LR,[R1],#1
        TEQ     R2,LR
        BNE     %FT02
        TEQ     R2,#0
        BNE     %BT01
02
        Pull    "R2,PC"

; =========
; BlockMove
; =========

; entry: R0=source start, R1=dest start, R2=length

BlockMove ROUT
 [ Debug9
        mess    ,"*source |dest    |length  - enter BlockMove",NL
        wrhex   R0
        wrhex   R1
        wrhex   R2
        mess    ,NL
 ]

 [ {TRUE}
  [ fix_8
;Non overlapping, word aligned, whole words only
        Push    "R0-R2,LR"
10
        SUBS    R2, R2, #4
        LDRHS   LR, [R0], #4
        STRHS   LR, [R1], #4
        BHS     %BT10
        Pull    "R0-R2,PC"
  |
;Non overlapping, word aligned, whole words only
        Push    "R0-R3,LR"
        ADD     R3, R0, R2      ;source end
10
        CMPS    R0, R3
        LDRLO   LR, [R0], #4
        STRLO   LR, [R1], #4
        BLO     %BT10
        Pull    "R0-R3,PC"
  ]
 |

        Push    "R0-R12,LR"

        TEQS    R2, #0
        BEQ     %FT95
        CMPS    R1, R0
        BHI     %FT50           ;upwards move
05                              ;bytes at a time until source aligned
        TSTNE   R0, #2_11
        LDRNEB  LR, [R0],#1
        STRNEB  LR, [R1],#1
        SUBNES  R2, R2, #1
        BNE     %BT05

        ANDS    LR, R1, #2_11   ;dest mis-alignment
        BEQ     %FT30           ;same alignment

;downwards mis-aligned move

        SUBS    R2, R2, #9*4    ;enough left to worth being clever ?
        BLO     %FT35           ;if not

        LDR     R3, [R0],#4     ;get a word from source
10
        STRB    R3, [R1], #1    ;put bytes to dest until aligned
        MOV     R3, R3, LSR #8
        TSTS    R1, #2_11
        BNE     %BT10
        MOV     LR, LR, LSL #3  ;# bits left in R3
        RSB     R12,LR, #32     ;# bits free in R3
15
        LDMIA   R0!,{R4-R11}    ;load 8 words
                        ;do 8 word shift, spare bits in R3
        ORR     R3, R3, R4, LSL LR
        MOV     R4, R4, LSR R12

        ORR     R4, R4, R5, LSL LR
        MOV     R5, R5, LSR R12

        ORR     R5, R5, R6, LSL LR
        MOV     R6, R6, LSR R12

        ORR     R6, R6, R7, LSL LR
        MOV     R7, R7, LSR R12

        ORR     R7, R7, R8,LSL LR
        MOV     R8, R8, LSR R12

        ORR     R8, R8, R9, LSL LR
        MOV     R9, R9, LSR R12

        ORR     R9, R9, R10,LSL LR
        MOV     R10,R10,LSR R12

        ORR     R10,R10,R11,LSL LR
        STMIA   R1!,{R3-R10}
        MOV     R3,R11,LSR R12

        SUBS    R2, R2, #8*4
        BPL     %BT15
        ADD     R2, R2, #8*4
20                              ;write out spare bytes from shift
        STRB    R3, [R1], #1
        MOV     R3, R3, LSR #8
        SUBS    LR, LR, #8
        BNE     %BT20
        B       %FT40           ;do any bytes left

;downwards aligned move
25
        LDMIA   R0!,{R3-R11}    ;move 9 aligned words at a time
        STMIA   R1!,{R3-R11}
30
        SUBS    R2, R2, #9*4
        BPL     %BT25
35
        ADD     R2, R2, #9*4
40                              ;move any odd bytes left
        SUBS    R2, R2, #1
        LDRPLB  LR, [R0],#1
        STRPLB  LR, [R1],#1
        BPL     %BT40
        Pull    "R0-R12,PC"

; upwards move
50
        ADD     R0, R0, R2      ;source end
        ADD     R1, R1, R2      ;dest end
55                              ;bytes at a time until source aligned
        TSTNES  R0, #2_11
        LDRNEB  LR, [R0,#-1]!
        STRNEB  LR, [R1,#-1]!
        SUBNES  R2, R2, #1
        BNE     %BT55

        ANDS    LR, R1, #2_11   ;dest mis-alignment
        BEQ     %FT80           ;same alignment

;upwards mis-aligned move

        SUBS    R2, R2, #9*4    ;enough left to worth being clever ?
        BLO     %FT85           ;if not

        LDR     R11,[R0,#-4]!   ;get a word from source
60
        MOV     R10,R11,LSR #24
        STRB    R10,[R1,#-1]!   ;put bytes to dest until aligned
        MOV     R11,R11,LSL #8
        TSTS    R1, #2_11
        BNE     %BT60
        MOV     LR, LR, LSL #3  ;# bits free in R11
        RSB     R12,LR, #32     ;# bits left in R11
65
        LDMDB   R0!,{R3-R10}    ;load 8 words
                         ;do 8 word shift, spare bits in R11
        ORR     R11,R11,R10,LSR R12
        MOV     R10,R10,LSL LR

        ORR     R10,R10,R9,LSR R12
        MOV     R9, R9, LSL LR

        ORR     R9, R9, R8,LSR R12
        MOV     R8, R8, LSL LR

        ORR     R8, R8, R7,LSR R12
        MOV     R7, R7, LSL LR

        ORR     R7, R7, R6,LSR R12
        MOV     R6, R6, LSL LR

        ORR     R6, R6, R5,LSR R12
        MOV     R5, R5, LSL LR

        ORR     R5, R5, R4,LSR R12
        MOV     R4, R4, LSL LR

        ORR     R4, R4, R3, LSR R12
        STMDB   R1!,{R4-R11}
        MOV     R11,R3,LSL LR

        SUBS    R2, R2, #8*4
        BPL     %BT65
        ADD     R2, R2, #8*4
70                              ;write out spare bytes from shift
        MOV     LR, R11,LSR #24
        STRB    LR, [R1,#-1]!
        MOV     R11,R11,LSL #8
        SUBS    R12,R12,#8
        BNE     %BT70
        B       %FT90           ;do any bytes left

;upwards aligned move
75
        LDMDB   R0!,{R3-R11}    ;move 9 aligned words at a time
        STMDB   R1!,{R3-R11}
80
        SUBS    R2, R2, #9*4
        BPL     %BT75
85
        ADD     R2, R2, #9*4
90                              ;move any odd bytes left
        SUBS    R2, R2, #1
        LDRPLB  LR, [R0,#-1]!
        STRPLB  LR, [R1,#-1]!
        BPL     %BT90
95
        Pull    "R0-R12,PC"
 ]

 [ Support1772
; ===========
; CheckEscape
; ===========

; The floppy FIQ routine NotDrq, and winnie drivers don't use this routine

; exit: No Escape => Z=0
;          Escape => Z=1, R0=EscapeErr

CheckEscape
        Push    "R1,LR"
        LDR     R1, ptr_ESC_Status
        LDRB    R1, [R1]
        EOR     R1, R1, #EscapeBit
        TSTS    R1, #EscapeBit
        MOVEQ   R0, #IntEscapeErr
        Pull    "R1,PC"
 ]

; ===========
; ReadOldCMOS
; ===========

; read the CMOS byte containing default drive & dir/no dir bit

; exit R0,V result
;  R2 = full byte
;  R5 = default drive

ReadOldCMOS
        Push    "R1,LR"
        MOV     R0, #OsByte_ReadCMOS
        MOV     R1, #StartCMOS
        SWI     XOS_Byte                ;(R0-R2->R0-R2,V)
        MOVVS   R2, #2_01000000         ;default NoDir, Drive 0
        AND     R5, R2, #2_00000111
        Pull    "R1,PC"

; ============
; ReadNewCMOS0
; ============

; read the CMOS byte containing # floppies & # winnies

; exit R0,V result
;  R2 = full byte
;  R3 = # floppies
;  R4 = b2..b0 # ST506 winnies
;       b4..b3 # IDE winnies

ReadNewCMOS0
        Push    "R1,LR"
        MOV     R0, #OsByte_ReadCMOS
        MOV     R1, #NewCMOS0
        SWI     XOS_Byte                ;special case when workspace not set up
        MOVVS   R2, #2_00000001         ;default 1 floppy
        AND     R3, R2, #2_00000111     ;mask to get # floppies
        AND     R4, R2, #2_11111000     ;mask to get # ST506/IDE winnies
 [ fix_7
        MOV     R4, R4, LSR #3          ;use the right register!
 |
        MOV     R4, R2, LSR #3
 ]
        BIC     R4, R4, #7              ; ST506=0
        BVS     %FT95
        CMPS    R3, #4                  ;if >4 floppies CMOS corrupt
        MOVHI   R3, #1                  ;assume 1 floppy
        AND     R1,R4,#2_00000111       ;mask to get # ST506 winnies
        CMPS    R1,#MaxWinnies          ;if >2 ST506 winnies CMOS corrupt
        BICHI   R4,R4,#2_00000111       ;...assume 0 ST506 drives
        MOV     R1,R4,LSR #3            ;get # IDE drives
        CMPS    R1,#WinIDEMaxDrives     ;if >2 IDE drives CMOS corrupt
        BICHI   R4,R4,#2_00011000       ;...assume 0 IDE drives
95
        Pull    "R1,PC"


 [ :LNOT:BigDisc
; ==================
; ReadWinnieSizeCMOS
; ==================

; exit R0,V if error, R6 winnie size bytes

ReadWinnieSizeCMOS ROUT
        Push    "R1-R3,LR"
        MOV     R0, #OsByte_ReadCMOS
        MOV     R3, #3*8
        MOV     R6, #0
10
        MOV     R1, #WinniSizeCMOS
        ADD     R1, R1, R3, LSR #3
        SWI     XOS_Byte        ;(R0-R2->R0-R2,V)
        BVS     %FT95
        ORR     R6, R6, R2, LSL R3
        SUBS    R3, R3, #8
        BPL     %BT10
 [ Debug2
        wrhex   R6
        mess    ,"WINNIE SIZES",NL
 ]
95
        Pull    "R1-R3,PC"
 ]

; ========
; ReadStep
; ========

; exit R0,V result, R5=step delay bits

ReadStep
        Push    "R1,R2,LR"
        MOV     R0, #OsByte_ReadCMOS
        MOV     R1, #StepDelayCMOS
        SWI     XOS_Byte        ;(R0-R2->R0-R2,V)
        MOVVC   R5, R2
        MOVVS   R5, #&FF
        Pull    "R1,R2,PC"


; =================
; ReadFileCacheCMOS
; =================

; exit R0,V result
;  R5 = extra file buffers in K

ReadFileCacheCMOS
        Push    "R1,R2,R4,LR"
        MOV     R0, #OsByte_ReadCMOS
        MOV     R1, #FileCacheCMOS
        SWI     XOS_Byte        ;(R0-R2->R0-R2,V)
        MOVVC   R5, R2
        TEQS    R5, #1
        BNE     %FT10
        BL      DefaultCacheSize   ;->R4
        MOV     R5, R4, LSR #10
10      MOVVS   R5, #0
        Pull    "R1,R2,R4,PC"


; ================
; ReadDirCacheCMOS
; ================

; exit R0,V result
;  R4 = dir cache size in bytes

ReadDirCacheCMOS
        Push    "R1,R2,LR"
        MOV     R0, #OsByte_ReadCMOS
        MOV     R1, #ADFSDirCacheCMOS
        SWI     XOS_Byte        ;(R0-R2->R0-R2,V)
        MOVVS   R2, #0
        MOVS    R4, R2, LSL #10
        BLEQ    DefaultCacheSize   ;->R4
        Pull    "R1,R2,PC"


; ================
; DefaultCacheSize
; ================

; exit R4 default size

DefaultCacheSize ROUT
        Push    "R0-R3,R5-R7,LR"
        MOV     R0, #0
        MOV     R1, #0
        MOV     R2, #0
        MOV     R3, #0
        Push    "R0-R3"
        Pull    "R4-R7"         ;R0-R7 now zero
        SWI     XOS_SetEnv      ;returns RAM size in R2
 [ FileCache
        CMP     R2, #1024*1024
        MOVLS   R4, R2, LSR #9
        MOVHI   R4, R2, LSR #8
 |
        MOV     R4, R2, LSR #7
 ]
        CMPS    R4, #255*1024
        MOVHI   R4, #255*1024
        CLRV
        Pull    "R0-R3,R5-R7,PC"


; ==========
; SkipSpaces
; ==========

; entry R1 -> char
; exit
;  R0 char
;  R1 -> char after first non space char
;  C set <=> terminator

SkipSpaces ROUT
        Push    "LR"
10
        LDRB    R0, [R1], #1
        TEQS    R0, #" "
        BEQ     %BT10
        CMPS    R0, #DeleteChar
        RSBNES  LR, R0, #" "-1
        Pull    "PC"


; =============
; ParseAnyDrive
; =============

;doesn't check if drive is allowed by configure

ParseAnyDrive ROUT
        Push    "LR"

; Entry: R1-> string
; Exit:  R1-> first char after
;  good => R0 drive number, V=0
;  bad  => R0 -> error, V=1

        BL      SkipSpaces      ;(R1->R0,R1,C)
        BCS     %FT10           ;reject nul string
        LDRB    LR, [R1]
        CMPS    LR, #DeleteChar
        RSBNES  LR, LR, #" "    ;check terminated
        BCC     %FT10           ;not terminated

        CMPS    R0, #"a"
        SUBHS   R0, R0, #"a"-"A"
        CMPS    R0, #"A"
        SUBHS   R0, R0, #"A"-"0"
        SUBS    R0, R0, #"0"
        RSBCSS  LR, R0, #7
        Pull    "PC",CS
10
        baddr   R0, BadDriveErrBlk
        BL      copy_error      ; (R0->R0)
        BL      SetV
        Pull    "PC"


; =====
; WrDec
; =====

; write a space followed by a zero supressed decimal number

; entry R0 number

; exit if error V set, R0 result

WrDec   ROUT
        Push    "R0,R1,LR"
        MOV     R1, #10
        BL      Divide          ;(R0,R1->R0,R1)
        TEQS    R0, #0
        BEQ     %FT10
        BL      WrDec           ;(R0->R0,V)
        B       %FT20
10
        MOV     R0, #" "
        SWI     XOS_WriteC      ;(R0->R0,V)
20
        ADDVC   R0,R1,#"0"
        SWIVC   XOS_WriteC      ;(R0->R0,V)
95
        STRVS   R0,[SP]
        Pull    "R0,R1,PC"


; ============
; ReadTimeDate
; ============

; exit R7 time lo word, R8 time high byte

ReadTimeDate
        Push    "R0,R1,LR"
        MOV     R0, #OsWord_ReadRealTimeClock
        SUB     SP, SP, #8      ;space for param block
        MOV     R1, SP
        MOV     LR, #3
        STRB    LR, [R1]
        SWI     XOS_Word
        LDRVC   R7, [R1]
        LDRVCB  R8, [R1,#4]
        MOVVS   R7, #0
        MOVVS   R8, #0
        ADD     SP, SP, #8
 [ Debug9
        wrhex   R8
        wrhex   R7
        mess    ,"date stamp",NL
 ]
        Pull    "R0,R1,PC"


        END
@


4.6
log
@Tidy up pass
ADFS.s:
  Redundant header files trimmed
  Get OsWords and OsBytes
  Switches rationalised
ADFS_SA.a
  Removed ARM810 support
Adfs00.s:
  Unused MEMC flag removed
Adfs05.s/Adfs12.s/Adfs13.s/Adfs14.s/Adfs15.s/Adfs19.s:
  Use defines instead of magic numbers
  Make use of FileCore exported bit fields
Adfs17.s/Adfs18.s/ConstIDE:
  {TRUE} and {FALSE} used with objasm
Adfs20.s
  Use AND of the opmask instead of BIC of all the flags except the opmask
Adfs50.s
  Unused MEMC flag no longer initialised
  Make use of FileCore exported bit fields
  Service call table reordered so the Ursula despatch doesn't incur a branch
  OsByte defines used
Consts:
  Removed those definitions now duplicating FileCore's exports
DebugOpts/Fixes:
  All options brought under one roof
ModHeader:
  Now uses VersionNum directly
Ver/*:
  Redundant switches deleted
  Removed used of 'Version' header


Version 3.45. Tagged as 'ADFS-3_45'
@
text
@d42 8
a49 13
        GBLS     GetAroundBleedingAAsmYetAgain
GetAroundBleedingAAsmYetAgain SETS "; No debug required"
 [ Dev
  [ Debug
GetAroundBleedingAAsmYetAgain SETS " GET Hdr:Debug"
  |
GetAroundBleedingAAsmYetAgain SETS " ! 0, ""No debug required"""
  ]
 ]
$GetAroundBleedingAAsmYetAgain

 [ Dev
  [ Debug
d51 1
a51 1
Host_Debug SETL T
d54 2
a55 3
Debug_MaybeIRQ SETL T
  ]
 ]
d57 11
a67 12
        GBLS     Host_Inclusion
Host_Inclusion SETS ""
 [ Dev
  [ Debug
   [ Host_Debug
Host_Inclusion SETS " GET Hdr:HostFS"
   |
Host_Inclusion SETS " ! 0, ""Host debug excluded"""
   ]
  ]
 ]
$Host_Inclusion
d69 1
a69 2
 [ Dev
  [ Debug
d71 3
a73 2
  ]
 ]
@


4.5
log
@Update to work with zero page relocation
Detail:
  s/ADFS, s/Adfs00, s/Adfs50 - Use OS_ReadSysInfo 6 to get ESC_Status location and store it in module workspace
  s/Adfs05 - Updated debug code to use OS_ReadSysInfo 6 to get IRQsema location. Updated CheckEscape to use local ESC_Status pointer, and updated it to only be compiled if it's actually needed
  s/Adfs10, s/Adfs14, s/Adfs15, s/Adfs17 - Use local ESC_Status pointer
Admin:
  Tested (with low processor vectors) in Iyonix ROM softload
  Note that FIQ handlers haven't been updated to support high vectors, since they aren't currently used on any hardware capable of using high vectors


Version 3.40. Tagged as 'ADFS-3_40'
@
text
@d156 1
a156 1
        MOV     R0, #3
d166 1
a166 1
        MOV     R0, #3
d342 1
a342 1
 [ T
d565 1
a565 1
        MOV     R0, #OsbyteReadCMOS
d586 1
a586 1
        MOV     R0, #OsbyteReadCMOS
d620 1
a620 1
        MOV     R0, #OsbyteReadCMOS
d647 1
a647 1
        MOV     R0, #OsbyteReadCMOS
d664 1
a664 1
        MOV     R0, #OsbyteReadCMOS
d685 1
a685 1
        MOV     R0, #OsbyteReadCMOS
d815 1
a815 1
        MOV     R0, #OswordReadClock
@


4.4
log
@* DMA support completed.
* Selects PIO/DMA/Ultra DMA modes appropriate for each device.
* DMA support added to ADFS_IDEUserOp, but not yet ADFS_ATAPIOp.
* WinIDEMaxSectorsPerTransfer increased to 256.
* Floppy driver reattaches to DMA Manager if it's reinitialised.

Version 3.35. Tagged as 'ADFS-3_35'
@
text
@d88 19
d110 2
a111 4
        MOV     R3, #IRQsema
        LDR     R3, [R3]
        TEQS    R3, #0
        BNE     PHEXIT1
d178 2
a179 4
        MOV     LR, #IRQsema
        LDR     LR, [LR]
        TEQS    LR, #0
        MOVNE   PC, R1          ;skip if IRQ thread, return NE
d533 1
d545 1
a545 1
        LDR     R1, =ESC_Status
d551 1
@


4.3
log
@* ADFS_DiscOp64 and ADFS_ATAPIOp added.
* New FileCore error passing scheme supported.
* PCI floppy support functional.
* 48-bit LBA support added for ADFS_IDEUserOp and accessing beyond the
  first 128GB of a drive - not thoroughly tested.
* IDE autodetection improved

Version 3.34. Tagged as 'ADFS-3_34'
@
text
@d294 17
@


4.2
log
@32-bit conversion started, Tungsten hard disc support added.
Hard disc functional, but PIO mode only. Don't go near the floppy.

Version 3.33. Not tagged
@
text
@d56 1
a56 1
Host_Debug SETL F
@


4.1
log
@Initial revision
@
text
@d53 1
a53 1
 [ Dev 
d56 1
a56 1
Host_Debug SETL T
d89 1
d94 1
a94 1
        MOVNES  PC, LR          ;return if IRQ thread
d96 1
d98 1
d100 1
a100 1
        ORR     R0, LR, #SVC_mode
d102 6
a107 1
        nop
d128 5
a132 1
        MOVS    PC, R3
d137 2
a138 1
        Push    "R0-R2,LR"
d143 2
a144 1
        Pull    "R0-R2,PC",,^
d147 2
a148 1
        Push    "R0-R2,LR"
d153 2
a154 1
        Pull    "R0-R2,PC",,^
d158 1
a158 1
        MOV     R0, PC          ;save PSR
d167 1
d170 5
a174 1
        nop                     ;delay for mode change
d182 1
d196 1
d205 2
a206 1
        Push    "R1,LR"
d213 2
a214 1
        Pull    "R1,PC",,^
d222 1
d224 5
d235 1
d237 5
d249 1
d253 9
d292 1
a292 1
        Pull    "R2,PC",,^
d319 1
a319 1
        Pull    "R0-R2,PC",,^
d329 1
a329 1
        Pull    "R0-R3,PC",,^
d414 1
a414 1
        Pull    "R0-R12,PC",,^
d498 1
a498 1
        Pull    "R0-R12,PC",,^
a562 1
 [ Top16Write
a563 1
 ]
d577 1
d602 2
a603 2
        Pull    "R1-R3,PC",,^

a616 1
 [ FDC1772              ;default 3ms step rate
a617 3
 |
        MOVVS   R5, #0
 ]
d635 4
a638 3
        BLEQ    DefaultCacheSize   ;->R4
        MOVEQ   R5, R4, LSR #10
        MOVVS   R5, #0
d684 2
a685 1
        Pull    "R0-R3,R5-R7,PC",,^
d797 1
a797 19
        Pull    "R0,R1,PC",,^

; =======
; IntoSVC
; =======

; exit:
;       SVC mode
;       r3 = entry mode in mode bits
;       SVC_lr stacked onto SVC stack
;
IntoSVC ROUT
        MOV     r3, lr                  ; (from) lr
        ASSERT  SVC_mode=3
        ORR     lr, r3, #SVC_mode       ; r3 = SVC
        TEQP    pc, lr
        nop
        Push    "lr"                    ; SVC stack
        MOV     pc, r3                  ; return
a798 20
; ========
; OutOfSVC
; ========

; entry:
;       r3 = mode to return to in mode bits
;       SVC_lr on SVC stack
;
; exit:
;       r3 restored to pre-IntoSVC state
;       SVC_lr pulled from SVC stack
;       mode as specified in r3
;       
OutOfSVC ROUT
        ASSERT  SVC_mode=3
        AND     r3, r3, #SVC_mode
        BIC     lr, lr, #SVC_mode       ; clear all mode bits
        ORR     r3, r3, lr              ; (from) mode in r3 with return address
        Pull    "lr"                    ; SVC stack
        MOVS    pc, r3                  ; return
@


4.1.4.1
log
@This version of ADFS implements support for Ursula discs and stuff.

New SWI ADFS_IDEDeviceInfo

ADFS_IDEUserOp, ADFS_ControllerType modified for more drives.

Low level driver modified to use twin controllers.

Auto-detection of devices.  ProbeIDEDevices implemented to find them.

Mapping of devices made flexible to cope with any arrangement of devices.

Code to use ID information instead of boot block numbers not yet active,
needs to be brought up to date with autodetect code, and needs to do the
LBA side of things properly.

*configure IDETimeout added.

This uses CMOS byte 189, which ADFS previously used for approx winnie sizes,
but this is obsolete use.

To do:


Need to remove *configure IDEDiscs!

Need to support fast PIO modes and selection of appropriate mode.
@
text
@d53 1
a53 1
 [ Dev
a530 22
 [ AutoDetectIDE

; ===============
; ReadCMOSTimeout
; ===============

; read the CMOS byte containing the IDE timeout in seconds

; exit R0, V result

;   R2 = full byte

ReadCMOSTimeout	ROUT
        Push    "R1,LR"
        MOV     R0, #OsbyteReadCMOS
        MOV     R1, #WinniSizeCMOS
        SWI     XOS_Byte                ;special case when workspace not set up

	MOVVS	R2, #5			;default to 5 seconds

        Pull    "R1,PC"
 ]
a531 1
 [ :LNOT: AutoDetectIDE
a557 1
 ]
d785 1
a785 1
;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
