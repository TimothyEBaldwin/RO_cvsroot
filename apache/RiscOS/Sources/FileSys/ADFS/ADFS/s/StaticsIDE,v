head	4.9;
access;
symbols
	ADFS-3_54:4.9
	ADFS-3_53:4.8
	ADFS-3_52:4.8
	ADFS-3_51:4.8
	ADFS-3_50:4.8
	ADFS-3_49:4.8
	ADFS-3_48:4.8
	ADFS-3_47:4.7
	ADFS-3_46:4.7
	ADFS-3_45:4.6
	ADFS-3_44:4.6
	ADFS-3_43:4.6
	ADFS-3_42:4.6
	ADFS-3_41:4.6
	ADFS-3_40:4.6
	ADFS-3_39:4.6
	ADFS-3_38:4.6
	ADFS-3_37:4.5
	ADFS-3_36:4.5
	RO_5_07:4.5
	ADFS-3_35:4.5
	ADFS-3_34:4.3
	ADFS-3_33:4.1
	dellis_autobuild_BaseSW:4.1
	ADFS-3_32:4.1
	Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	sbrodie_UrsulaRiscPC_ADFS-3_30:4.1
	Ursula_RiscPC_bp:4.1
	nturton_ADFS-3_29:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	sproven_ADFS-3_31:4.1.4.1
	nicke_ADFS_3_26:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	sproven_330:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.9
date	2017.11.18.19.51.32;	author jlee;	state Exp;
branches;
next	4.8;
commitid	Em21492i286UsyfA;

4.8
date	2013.03.28.20.30.41;	author jlee;	state Exp;
branches;
next	4.7;
commitid	M0DGVV3z3qYjcBJw;

4.7
date	2012.10.21.11.42.57;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	yOiiX7g8HT2Zlfpw;

4.6
date	2011.06.22.01.01.03;	author jlee;	state Exp;
branches;
next	4.5;
commitid	CpEhHiDhv8LssBov;

4.5
date	2003.04.03.18.47.57;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	2003.01.28.15.14.02;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2003.01.17.19.33.28;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2002.09.18.15.03.30;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.31.24;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.31.24;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.35.45;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.09.02.18.37.44;	author sproven;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.29.29;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.24.57;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.9
log
@Remove legacy 700us DRQ timeout for write ops
Detail:
  Early versions of the ATA spec mandated that drives should assert DRQ within 700us of a write command being issued. However later versions of the spec have dropped this limit, and some devices (e.g. CF cards) are known to regularly exceed the limit.
  Remove the 700us timeout from ADFS, so that these devices can operate correctly.
  s/Adfs14 - Modify DRQ timeout check so that it will fall back to polling from TickerV if the initial 700us loop times out.
  s/StaticsIDE - Add extra word to workspace, so that the TickerV routine can still timeout the operation
Admin:
  Tested on IOMD (~4M FSBash ops), Tungsten (~500K FSBash ops)
  Fixes "disc error 20" seen when using IDE-CF adapter on RiscPC, thanks to reasarch by Jon Abbot:
  https://www.riscosopen.org/forum/forums/4/topics/9557


Version 3.54. Tagged as 'ADFS-3_54'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        SUBT    Declarations of IDE statics -> StaticsIDE

; All symbols in this file must be relative to SB.
; No new ^ is allowed.
;
; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
; SBP - Simon Proven
;
;
; 11-Jan-91  12:00  CDP
; File created.
;
; 27-Mar-91  10:35  CDP
; WinIDEPowerSetupActive added.
;
; 09-Jan-92  16:57  CDP
; Added WinIDEDriveInitFlags and WinIDEMountDataPtr.
;
; 09-Mar-92  17:05  CDP
; Removed WinIDEDriveInitFlags and WinIDEMountDataPtr (mount changed again).
;
; 02-Apr-92  16:18  CDP
; Added WinIDEDriveSecsPerTrk, WinIDEDriveHeads, WinIDEDriveInitFlags.
;
; 23-Aug-1994 14:32 SBP
; Added WinIDELBAFlags
;
;*End of change record*

;*********************************************************************

WinIDEStaticsStart      #       0

; Next word is zero when no IDE command is running. This is used
; to lock out the ticker routine used to setup the standby mode
; of the drives (when configured).

WinIDECommandActive     #       4       ; 0 = no command active

WinIDEDrives            #       1       ; number of IDE drives found

WinLogicalDrive         #       1       ; drive passed by FileCore

WinIDEOpDone            #       1       ; 0 => op in progress

WinHaveTickerV          #       1       ; !0 => TickerV claimed

WinIDEIRQFlag           #       1       ; !0 => in IRQ routine

; Next byte says what sort of code has been copied into RAM by the IDE
; driver (it holds the opcode itself). This must be distinct from the
; ST506 variable WinnieRamOp as the ST506 driver can use
; MEMC1A-specific code and we cannot.

WinIDERAMOp             #       1       ; type of code in RAM



; Values used during the processing of the current IDE op

WinIDEDriveNum          #       1       ; IDE drive (0/1)
 [ TwinIDEHardware
WinIDEPhysDriveNum      #       1       ; IDE drive (0-3)
 ]
WinIDESecsPerTrk        #       1       ; sectors per track
WinIDEHeads             #       1       ; heads on current drive
WinIDEPrecomp           #       1       ; value for precomp/features reg
WinIDECommandCode       #       1       ; command code for this op
 [ IDEDMA
WinIDECommandCode_PIO   #       1       ; PIO fallback code for this DMA op
 ]
WinIDECommandFlags      #       1       ; flags for this op (see below)
WinIDECmdFlag_NoDRDY    *       bit0    ; not waiting for DRDY
WinIDECmdFlag_48bit     *       bit1    ; a 48-bit LBA command
WinIDECmdFlag_DMA       *       bit2    ; a DMA command (else PIO)
WinIDECompletion        #       1       ; completion code of op
 [ IDEDMA
WinIDEDMAStatus         #       1       ; status of DMA routine
DMAStat_Started         *       bit0
DMAStat_Enabled         *       bit1
DMAStat_Completed       *       bit2
 ]

                AlignSpace      4,0

 [ IDEDMA
WinIDEDMAResult         #       4       ; result from Completed callback
 ]

;*********************************************************************

; Drive state as given by WinIDEDriveState... (reset/spinning etc.)

WinIDEDriveState        #       WinIDEMaxDrives


; Drive power state, initialised from CMOS RAM and changed by SWI.
;    0 => autospindown not enabled
;   !0 => autospindown is n*5 seconds

WinIDEPowerState        #       WinIDEMaxDrives


; Drive parameters (heads and sectors per track)

WinIDEDriveSecsPerTrk   #       WinIDEMaxDrives
WinIDEDriveHeads        #       WinIDEMaxDrives
WinIDEDriveInitFlags    #       WinIDEMaxDrives
WinIDEDriveLBAFlags     #       WinIDEMaxDrives         ; CHS/LBA mode selection by drive
WinIDEDriveDMAFlags     #       WinIDEMaxDrives         ; drive is DMA-capable

 [ AutoDetectIDE
; Mappings from physical device back to logical drive number (4-7)
WinIDENoDevice          *       &7F     ; means no device
WinIDEATAPIDevice       *       &7E     ; means ATAPI device
WinIDEDeviceMappings    #       WinIDEMaxDrives
WinIDEDeviceNoIdFlags   #       WinIDEMaxDrives
 ]

; Next var is !0 when the CallEvery routine to do the drive power
; setup is still installed. It is cleared to 0 when the callback
; to remove the ticker event has been removed

WinIDEPowerSetupActive  #       1

;*********************************************************************

; Parameter block for transfer
; Values are stored here before being copied to the controller.

WinIDEParms             #       0
WinIDEParmPrecomp       #       1
WinIDEParmSecCount      #       1
WinIDEParmSecNumber     #       1
WinIDEParmLBA0to7       *       WinIDEParmSecNumber
WinIDEParmCylLo         #       1
WinIDEParmLBA8to15      *       WinIDEParmCylLo
WinIDEParmCylHi         #       1
WinIDEParmLBA16to23     *       WinIDEParmCylHi
WinIDEParmDrvHead       #       1
WinIDEParmDrvLBA24to27  *       WinIDEParmDrvHead
WinIDEParmSecCountHigh  #       1
WinIDEParmLBA24to31     #       1
WinIDEParmLBA32to39     #       1
WinIDEParmLBA40to47     #       1

;*********************************************************************

                        AlignSpace      4,0

; Logical (FileCore) disc address

WinIDEDiscAddress       a4      4       ; disc address of current xfer
 [ BigDisc
WinIDESectorOffset      a4      4       ; sector offset within sector of current transfer
 ]

WinIDEFileCoreOp        a4      4       ; op passed by FileCore

WinIDEDiscSize          a4      4       ; disc size in bytes (bottom 32 bits)
WinIDEDiscSize2         a4      4       ; disc size in bytes (top 32 bits)
WinIDEBlockSize         a4      4       ; bytes to use from next sector
WinIDELumpSize          a4      4       ; bytes to move by one command
WinIDESaveLumpSize      a4      4       ; not decremented by each sector


; Transfer buffer and lengths

WinIDEScatterPtr        a4      4       ; pointer to scatter list
WinIDEFakeScatterList   a4      16      ; for when none is passed
WinIDETransferLimit     a4      4       ; overall limit on transfer

WinIDETmpScatterPtr     a4      4       ; pointer to current entry in s list
WinIDETmpScatterEntry   a4      8       ; copy of current entry in s list

 [ IDEDMA
WinIDECopiedScatterList a4      4       ; start of padded scatter list
WinIDECopiedScatterSize a4      4       ; size of scatter list block (to save reallocing)
 ]

WinIDECallbackPtr       a4      4       ; called from IRQ/timer

WinIDEErrorNo           a4      4
WinIDEErrorAddr         a4      8

;*********************************************************************

; Now the bytes (1 per logical drive) to determine which driver should
; be called to handle requests for each logical drive number.
; &00 => IDE drive 0 (device 0 on primary interface)
; &01 => IDE drive 1 (device 1 on primary interface)
; &02 => IDE drive 2 (device 0 on secondary interface)
; &03 => IDE drive 3 (device 1 on secondary interface)
; &08 => ST506 drive 0 - bit3 set so shift into position will set carry
; &09 => ST506 drive 1
; &FF => not known

 [ TwinIDEHardware
                ASSERT  MaxWinnies = 0
                ASSERT  WinIDEMaxDrives = 4
 |
                ASSERT  MaxWinnies = 2
                ASSERT  WinIDEMaxDrives = 2
 ]
WinDriveTypes   a4      4

;*********************************************************************

; Timer stuff

WinTickCount            a4      4       ; decremented every centisecond
WinTickCallAddress      a4      4       ; if !0, called when count==0
WinIDEDRQTimeout        a4      4       ; counter for DRQ timeouts

;*********************************************************************

; Hardware details
 [ :LNOT: HAL
DefaultIDE      *       CnTbase + (&1F0 * IDEReg_Spacing)
 [ TwinIDEHardware
DefaultIDE2     *       CnTbase + (&170 * IDEReg_Spacing)
 ]
 ]

; Initialise data in module to describe the motherboard IDE
; NOTE: the interrupt stuff is the same as for the motherboard
; ST506 - it will not be possible to have both ST506 and IDE
; on the motherboard.

                ALIGN
 [ :LNOT: HAL
DefaultIDEHardware
                &       DefaultIDE
                &       IoChip + IoIrqBStatus
                &       WinnieBits
                &       IoChip + IoIrqBMask
                &       WinnieBits
 ]

 [ TwinIDEHardware
WinIDECurrentHW a4      4
 ]

; Allocate space relative to SB to save details when we have
; determined them after checking for podule IDE.
; If no podule IDE, the data from DefaultIDEHardware (above)
; will be copied into these variables.

WinIDEHardware  a4      0

                ^       0
 [ HAL
WinIDECtrlPtr   a4      4               ; address of current IDE hardware control block
 ]
WinIDEPtr       a4      4               ; address of current IDE hardware (command block)
WinIDEPollPtr   a4      4               ; address of interrupt status
WinIDEPollBits  a4      4               ; AND with status, NE => IRQ
WinIDEIRQPtr    a4      4               ; address of interrupt mask
WinIDEIRQBits   a4      4               ; OR into mask enables IRQ
WinIDEReadPtr   a4      4               ; -> data read routine
WinIDEWritePtr  a4      4               ; -> data write routine
WinIDEIRQDevNo  #       1               ; 0 => not claimed
WinIDEHWDevNo   #       1
WinIDEHWType    #       1
WinIDEHW_Default *      0       ; => single, unshared IRQ
WinIDEHW_Podule *       1
WinIDEHW_HAL    *       2       ; => single, unshared IRQ
WinIDEBusNo     #       1
WinIDEHWFlags   a4      4
 [ IDEDMA
WinIDEDMALC     a4      4               ; DMA logical channel
WinIDEDMAHandle a4      4               ; DMA manager handle for channel
WinIDEDMATag    a4      4               ; DMA manager tag for current transfer
 ]
SzWinIDEHardware a4     0

                ^ :INDEX:WinIDEHardware, SB
 [ TwinIDEHardware
                a4      2*SzWinIDEHardware
 |
                a4      1*SzWinIDEHardware
 ]
                AlignSpace      4,0

WinIDEHWFlag_SharedIRQ      *   bit0
WinIDEHWFlag_32bitPIO       *   bit1
WinIDEHWFlag_IORDYSupported *   bit2
WinIDEHWFlag_No48bitDMA     *   bit3

 [ IDEDMA
WinIDEDMADeviceHandle   a4      4

WinIDEDMAHandlers       a4      5*4     ; DMA handler table

WinIDEDMASink           #       WinIDEBytesPerSector ; place to dump unwanted read data
WinIDEDMAZeroes         #       WinIDEBytesPerSector ; spare zeroes for writing
 ]

                AlignSpace      16,0

;*********************************************************************

 [ AutoDetectIDE

; here is held the records for devices that are detected.

WinIDEDeviceIds         #       WinIDEMaxDrives*SzWinIDEId

 ]

;*********************************************************************

WinIDEStaticsEnd        #       0
WinIDEStaticsSize       *       WinIDEStaticsEnd - WinIDEStaticsStart
        !       0,"IDE statics ":CC::STR:WinIDEStaticsSize

;*********************************************************************

        END
@


4.8
log
@Replace a couple of magic numbers with constants
Detail:
  s/StaticsIDE - Add definitions for the "IORDY supported" & "No 48bit DMA" flags
  s/Adfs14, s/IDEDetect - Replace a couple of magic numbers with the more descriptive named flags
Admin:
  Tested in RiscPC ROM softload


Version 3.48. Retagged as 'ADFS-3_48'
@
text
@d230 1
@


4.7
log
@Tabs expanded
Assembler source uses spaces round here in general, follow suit.
Not tagged.
@
text
@d301 4
a304 2
WinIDEHWFlag_SharedIRQ  *       bit0
WinIDEHWFlag_32bitPIO   *       bit1
@


4.6
log
@IOMD/HAL build fixes
Detail:
  s/Adfs12 - Don't use DefaultIDEHardware in HAL builds, use the proper addresses instead
  s/Adfs19 - Make floppy code use HAL_ControllerAddress to get 82C710 address in non-PCI, non-Podule, HAL builds. However floppy code is currently disabled in this configuration because it hangs the machine when floppy access is attempted.
  s/Consts, s/StaticsIDE - Get rid of some bad address constants for HAL builds
Admin:
  Tested in Iyonix & IOMD ROM softloads.


Version 3.38. Tagged as 'ADFS-3_38'
@
text
@d126 1
a126 1
WinIDEDriveLBAFlags	#	WinIDEMaxDrives		; CHS/LBA mode selection by drive
d131 2
a132 2
WinIDENoDevice		*	&7F	; means no device
WinIDEATAPIDevice	*	&7E	; means ATAPI device
d152 1
a152 1
WinIDEParmLBA0to7	*	WinIDEParmSecNumber
d154 1
a154 1
WinIDEParmLBA8to15	*	WinIDEParmCylLo
d156 1
a156 1
WinIDEParmLBA16to23	*	WinIDEParmCylHi
d158 1
a158 1
WinIDEParmDrvLBA24to27	*	WinIDEParmDrvHead
d172 1
a172 1
WinIDESectorOffset	a4	4	; sector offset within sector of current transfer
d321 1
a321 1
WinIDEDeviceIds		#	WinIDEMaxDrives*SzWinIDEId
@


4.5
log
@* DMA support completed.
* Selects PIO/DMA/Ultra DMA modes appropriate for each device.
* DMA support added to ADFS_IDEUserOp, but not yet ADFS_ATAPIOp.
* WinIDEMaxSectorsPerTransfer increased to 256.
* Floppy driver reattaches to DMA Manager if it's reinitialised.

Version 3.35. Tagged as 'ADFS-3_35'
@
text
@d234 1
a234 1

d239 1
a239 1

d247 1
d254 1
a254 1

@


4.4
log
@First bits of DMA support: reads bus master information from the HAL and
uses it to create a set of DMA "HAL" devices for use by the DMA Manager.
Also responds to Service_ModulePostInit for the DMA Manager to reregister
(currently only the floppy) DMA channel(s).

Version 3.34. Not tagged
@
text
@d86 3
d90 3
a92 2
WinIDECmdFlag_48bit     *       bit0    ; a 48-bit LBA command
WinIDECmdFlag_DMA       *       bit1    ; a DMA command (else PIO)
d94 6
d103 4
d127 1
d187 1
a187 1
WinIDEFakeScatterList   a4      8       ; for when none is passed
d193 5
d285 5
d305 5
d311 2
@


4.3
log
@* ADFS_DiscOp64 and ADFS_ATAPIOp added.
* New FileCore error passing scheme supported.
* PCI floppy support functional.
* 48-bit LBA support added for ADFS_IDEUserOp and accessing beyond the
  first 128GB of a drive - not thoroughly tested.
* IDE autodetection improved

Version 3.34. Tagged as 'ADFS-3_34'
@
text
@d278 4
@


4.2
log
@32-bit conversion started, Tungsten hard disc support added.
Hard disc functional, but PIO mode only. Don't go near the floppy.

Version 3.33. Not tagged
@
text
@d51 6
a74 9
; Next byte is zero when no IDE command is running. This is used
; to lock out the ticker routine used to setup the standby mode
; of the drives (when configured). It is incremented when the
; low-level entry is called and again when a background op is
; successfully started. It is decremented on the way out of the
; low-level entry and by the background callback routine.

WinIDECommandActive     #       1       ; 0 = no command active

a83 4
 [ IDEFixedLowSector
 |
WinIDEStartSec          #       1       ; lowest-numbered sector
 ]
d86 3
a88 1

d116 1
a116 1
WinIDENoDevice		*	&FF	; means no device
d144 4
d181 1
a181 1
WinIDEErrorAddr         a4      4
a292 24


;*********************************************************************

 [ IDEFixedLowSector
 |

; Dummy disc record for reading IDE discs

        ALIGN
        ASSERT  WinIDEBytesPerSector = 512
WinIDETestDiscRec
        =       9                       ; 2^9 = 512 bytes/sector
        =       17                      ; sectors per track
        =       1                       ; heads=1 => no side interleave
        =       2                       ; double density
        &       0
        =       1                       ; lowest-numbered sector on track
        =       0
        =       0
        =       0
        &       L_Root                  ; disc address of root
        &       20*1024*1024            ; disc size in bytes
 ]
@


4.1
log
@Initial revision
@
text
@a56 3
WinIDEIRQDevNo          #       1       ; device number for claim/release
                                        ; or 0 if no device

d82 3
d96 1
a96 5
 [ IDEAllowTrackWrap
 |
WinIDEAdrSector         #       1       ; start sector on current track
                                        ; numbered from 0
 ]
d119 7
d164 1
a164 1
WinIDEDiscSize2          a4      4      ; disc size in bytes (top 32 bits)
d188 4
a191 2
; &00 => IDE drive 0
; &01 => IDE drive 1
d196 4
d202 1
d216 4
a219 1
DefaultIDE      *       CnTbase + (&1F0 * 4)
d236 4
d246 6
a251 1
WinIDEPtr       a4      4               ; address of current IDE hardware
d258 30
@


4.1.4.1
log
@This version of ADFS implements support for Ursula discs and stuff.

New SWI ADFS_IDEDeviceInfo

ADFS_IDEUserOp, ADFS_ControllerType modified for more drives.

Low level driver modified to use twin controllers.

Auto-detection of devices.  ProbeIDEDevices implemented to find them.

Mapping of devices made flexible to cope with any arrangement of devices.

Code to use ID information instead of boot block numbers not yet active,
needs to be brought up to date with autodetect code, and needs to do the
LBA side of things properly.

*configure IDETimeout added.

This uses CMOS byte 189, which ADFS previously used for approx winnie sizes,
but this is obsolete use.

To do:


Need to remove *configure IDEDiscs!

Need to support fast PIO modes and selection of appropriate mode.
@
text
@a59 5
 [ TwinIDEHardware
WinIDEIRQDevNo2          #       1      ; device number for claim/release
                                        ; or 0 if no device
 ]

a84 3
 [ TwinIDEHardware
WinIDEPhysDriveNum          #       1       ; IDE drive (0/1)
 ]
a190 4
 [ TwinIDEHardware
                ASSERT  MaxWinnies = 0
                ASSERT  WinIDEMaxDrives = 4
 |
a192 1
 ]
a205 4
 [ TwinIDEHardware
DefaultIDE      *       &034007c0
DefaultIDE2	*	&034005C0
 |
a206 1
 ]
a220 4
		&	DefaultIDE
		&	DefaultIDE2
		&	WinnieBits2
		&	WinnieBits2
a233 6
 [ TwinIDEHardware
WinIDEPrimaryPtr	a4	4	; -> primary IDE controller
WinIDESecondaryPtr	a4	4	; -> secondary IDE controller
WinIDEPollBits2	a4	4		; AND with status, NE => IRQ
WinIDEIRQBits2	a4	4		; AND with status, NE => IRQ
 ]
a236 20

 [ AutoDetectIDE

; if we're doing autodetect, then we need a drive mapping system

WinIDEDeviceMappings	#	WinIDEMaxDrives	; mapping from device to drive
WinIDEDriveMappings	#	WinIDEMaxDrives	; mapping from drive to device

 ]

;*********************************************************************

 [ AutoDetectIDE

; here is held the records for devices that are detected.

WinIDEDeviceIds		#	WinIDEMaxDrives*SzWinIDEId

 ]

a265 1

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
