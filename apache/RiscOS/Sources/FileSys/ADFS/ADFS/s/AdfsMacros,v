head	4.2;
access;
symbols
	ADFS-3_54:4.2
	ADFS-3_53:4.2
	ADFS-3_52:4.2
	ADFS-3_51:4.2
	ADFS-3_50:4.2
	ADFS-3_49:4.2
	ADFS-3_48:4.2
	ADFS-3_47:4.2
	ADFS-3_46:4.2
	ADFS-3_45:4.2
	ADFS-3_44:4.2
	ADFS-3_43:4.2
	ADFS-3_42:4.2
	ADFS-3_41:4.2
	ADFS-3_40:4.2
	ADFS-3_39:4.2
	ADFS-3_38:4.2
	ADFS-3_37:4.2
	ADFS-3_36:4.2
	RO_5_07:4.2
	ADFS-3_35:4.2
	ADFS-3_34:4.2
	ADFS-3_33:4.1
	dellis_autobuild_BaseSW:4.1
	ADFS-3_32:4.1
	Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	sbrodie_UrsulaRiscPC_ADFS-3_30:4.1
	Ursula_RiscPC_bp:4.1
	nturton_ADFS-3_29:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	sproven_ADFS-3_31:4.1
	nicke_ADFS_3_26:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	sproven_330:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2002.09.18.15.03.30;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.31.22;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.31.22;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.35.32;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.29.14;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.24.44;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@32-bit conversion started, Tungsten hard disc support added.
Hard disc functional, but PIO mode only. Don't go near the floppy.

Version 3.33. Not tagged
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >AdfsMacros

; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
;
;
; 09-Mar-92  14:18  CDP
; Added macro pcadr.
;
; 03-Aug-02  18:15  KJB
; Removed lots of unused macros (most have equivalents in standard header files)
;
;*End of change record*


        MACRO
        SetBorder  $r,$g,$b,$cond
        Push    "R0,R1",$cond
        LDR$cond R0, =VIDC
        MOV$cond R1, #bit30
        ORR$cond R1, R1, #$g * 16 + $r
        ORR$cond R1, R1, #$b * 256
        STR$cond R1, [R0]
        Pull    "R0,R1",$cond
        MEND


        MACRO
$lab    retfiq   $cc
$lab    SUB$cc.S PC, LR, #4
        MEND


;do an operation with 16 bit width const as an 8 bit width if possible
        MACRO
$lab    Try8    $op,$dreg,$sreg,$const
        LCLA    bit
        LCLA    bits8
        WHILE   ($const:MOD:(1:SHL:(bit+2))=0) :LAND: bit<24
bit     SETA    bit+2
        WEND
        ASSERT  $const :SHR: bit < &10000
bits8   SETA    $const :AND: ( &FF :SHL: bit )
$lab    $op     $dreg,$sreg,#bits8
        [ $const<>bits8
bits8   SETA    $const :AND: ( &FF :SHL: ( bit+8 ) )
        $op     $dreg,$dreg,#bits8
        ]
        MEND


;put address of $dest in $reg
;        MACRO
;$lab    addr    $reg,$dest,$cond
;        ASSERT  $reg<>PC
;        ASSERT  ($dest-{PC}-8)<&10000
;$lab    ADD$cond $reg,PC,#($dest-{PC}-8) :AND: &FF
;        ADD$cond $reg,$reg,#($dest-{PC}-4) :AND: &FF00
;        MEND


        GBLA    boff
        MACRO
$lab    baddr   $reg,$dest,$cond
        ASSERT  $reg<>PC
boff    SETA    {PC}+8-($dest)
        ASSERT  boff<&10000
$lab    Try8    SUB$cond,$reg,PC,(boff)
        MEND


;put absolute address of $sboff in $reg
        MACRO
$lab    sbaddr  $reg,$sboff,$cond
$lab    Try8    ADD$cond,$reg,SB,(:INDEX:$sboff)
        MEND


        MACRO
$l      Text    $str
$l      =       "$str",0
        ALIGN
        MEND


        MACRO
$lab    aw      $size           ;allocate word aligned
        ASSERT  {VAR} :MOD: 4=0
$lab    #       $size
        MEND


        MACRO
$lab    a4      $size           ;allocate word aligned register relative
        ASSERT  (:INDEX: {VAR}) :MOD: 4=0
$lab    #       $size
        MEND


        MACRO
$lab    bit     $bitnum
$lab    *       1 :SHL: ($bitnum)
        MEND


        MACRO
        getSB
        LDR     SB, [SB]
        MEND


        MACRO
        Align16 $base
        ASSERT  (.-($base)) :MOD: 4 = 0
        WHILE   (.-($base)) :MOD: 16 <> 0
        MOV     R0, R0
        WEND
        MEND


;FOLLOWING MACROS ONLY FOR DEBUG

        MACRO
        mess    $cond,$s1,$s2,$s3,$s4,$s5
 [ {TRUE}
        B$cond  %F11
        BAL     %F21
11
        Push    "R0,R1,LR"
        BL      Mess1

        [ :LNOT: IrqDebug
        BNE     %FT15           ;skip if IRQ thread
        ]

        SWI     OS_WriteS
 [ "$s1"="NL"
 = CR,LF
 |
 = "$s1"
 ]
 [ "$s2"=""
 |
  [ "$s2"="NL"
  = CR,LF
  |
  = "$s2"
  ]
  [ "$s3"=""
  |
   [ "$s3"="NL"
   = CR,LF
   |
   = "$s3"
   ]
   [ "$s4"=""
   |
    [ "$s4"="NL"
    = CR,LF
    |
    = "$s4"
    ]
    [ "$s5"=""
    |
     [ "$s5"="NL"
     = CR,LF
     |
     = "$s5"
     ]
    ]
   ]
  ]
 ]
        =       0
        ALIGN
        [ SpoolOff
        BL      SpoolOn
        ]
        Pull    "LR"
15
        RestPSR R0
        NOP                     ;delay in case mode change
        Pull    "R0,R1,LR"
21
 ]
        MEND

        MACRO
        wrhex   $reg,$cond
        Push    "R0-R4,LR",$cond
        MOV$cond R2,$reg
        BL$cond PHEX
        Pull    "R0-R4,LR",$cond
        MEND


        MACRO
        Tword   $reg,$cond
        Push    "R0-R3,LR",$cond
        MOV$cond R2,$reg
        BL$cond TubeWrHexWord
        Pull    "R0-R3,LR",$cond
        MEND


        MACRO
        regdump $cond
        mess    $cond,"R0       R1       R2       R3       R4       R5       R6       R7",NL
        wrhex   R0, $cond
        wrhex   R1, $cond
        wrhex   R2, $cond
        wrhex   R3, $cond
        wrhex   R4, $cond
        wrhex   R5, $cond
        wrhex   R6, $cond
        wrhex   R7, $cond
        mess    $cond,NL,"R8       R9       R10      R11      R12      R13      R14      R15",NL
        wrhex   R8, $cond
        wrhex   R9, $cond
        wrhex   R10,$cond
        wrhex   R11,$cond
        wrhex   R12,$cond
        wrhex   R13,$cond
        wrhex   R14,$cond
        wrhex   R15,$cond
        mess    $cond,NL
        MEND


        END
@


4.1
log
@Initial revision
@
text
@d26 2
a43 22
        MACRO                           ;set some PSR bits
$lab    setpsr     $bits,$tempreg,$cond
$lab    MOV$cond   $tempreg,#$bits
        ORR$cond   $tempreg,$tempreg,PC
        TEQ$cond.P PC,$tempreg
        MEND


        MACRO                           ;clear some PSR bits
$lab    clrpsr     $bits,$tempreg,$cond
$lab    MVN$cond   $tempreg,#$bits
        TST$cond.P $tempreg,PC
        MEND


        MACRO                           ;toggle some PSR bits
$lab    togpsr     $bits,$tempreg,$cond
$lab    MOV$cond   $tempreg,#$bits
        TEQ$cond.P $tempreg,PC
        MEND


a49 6
        MACRO
        nop
        MOVNV   R0,R0
        MEND


d132 1
a132 1
        MOVNV   R0, R0
d197 2
a198 2
        TEQP    PC, R0          ;restore PSR
        nop                     ;delay in case mode change
d206 1
a206 1
        Push    "R0-R3,LR",$cond
d209 1
a209 1
        Pull    "R0-R3,LR",$cond
a244 10

; pcadr points register at symbol like ADR but sets register from PC to
; preserve mode and flag bits

        MACRO
$label  pcadr   $reg,$sym,$cc
        ASSERT  $reg<>PC
$label  MOV$cc  $reg,PC
        ADD$cc  $reg,$reg,#$sym - . - 4
        MEND
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
