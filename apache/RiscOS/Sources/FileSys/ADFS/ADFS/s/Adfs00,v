head	4.10;
access;
symbols
	ADFS-3_54:4.10
	ADFS-3_53:4.10
	ADFS-3_52:4.9
	ADFS-3_51:4.9
	ADFS-3_50:4.9
	ADFS-3_49:4.8
	ADFS-3_48:4.8
	ADFS-3_47:4.8
	ADFS-3_46:4.8
	ADFS-3_45:4.8
	ADFS-3_44:4.7
	ADFS-3_43:4.6
	ADFS-3_42:4.6
	ADFS-3_41:4.6
	ADFS-3_40:4.5
	ADFS-3_39:4.4
	ADFS-3_38:4.4
	ADFS-3_37:4.4
	ADFS-3_36:4.4
	RO_5_07:4.3
	ADFS-3_35:4.3
	ADFS-3_34:4.3
	ADFS-3_33:4.1
	dellis_autobuild_BaseSW:4.1
	ADFS-3_32:4.1
	Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	sbrodie_UrsulaRiscPC_ADFS-3_30:4.1
	Ursula_RiscPC_bp:4.1
	nturton_ADFS-3_29:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	sproven_ADFS-3_31:4.1
	nicke_ADFS_3_26:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	sproven_330:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.10
date	2017.07.15.15.15.08;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	HV4MfWKq4QocZkZz;

4.9
date	2016.01.05.21.49.10;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	els1sSTqH2Im4NPy;

4.8
date	2012.10.21.11.38.09;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	L8DklCrHdjSrkfpw;

4.7
date	2012.04.13.23.51.33;	author bavison;	state Exp;
branches;
next	4.6;
commitid	GjaMWDrP0eQJwL0w;

4.6
date	2011.10.14.07.38.46;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	tK3tjaAo92QGZhDv;

4.5
date	2011.08.07.19.35.54;	author jlee;	state Exp;
branches;
next	4.4;
commitid	AILCacyEauof9Cuv;

4.4
date	2009.06.11.20.58.42;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2003.01.17.19.33.27;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2002.09.18.15.03.29;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.31.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.31.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.35.09;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.28.49;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.24.21;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Calculate the offset to the hardware-dependent information
Don't assume that the disc address to MiscOp_Mount is always &C00, in order to locate the hardware-dependent information (see PRM 2-215), calculate the offset properly. This fixes a problem that FileCore 3.74 triggered where the LBA flag was no longer being recovered now the alignment of the request in R2 has changed, causing some drives to no longer mount if they also don't support CHS addressing.
Strictly speaking there's no guarantee that FileCore is even asking for the boot block at all; ADFS should read the sectors itself before fulfilling the request, but historically it's always assumed that the boot block was being read, so let sleeping dogs lie.
Ref https://www.riscosopen.org/forum/forums/4/topics/9390

Version 3.53. Tagged as 'ADFS-3_53'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >Adfs00

        TTL     "Declarations and workspace allocation"

; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
; LR  - Lawrence Rust, Cambridge Beacon
;
;
; 11-Jan-91  11:45  CDP
; Now GETs ConstIDE so that IDE driver can define some things before
; the statics are allocated. This needed as AASM 1.64 does not seem to
; allow you to save {VAR} for later restoration when it is relative to
; a register.
; Debug20 added.
;
; 15-Feb-91  12:13  LVR
; Modified development version ADFS help string.  Added LowSector to
; disk record and FlpDrvOpts to the drive record.
;
; 05-Mar-91  14:37  LVR
; Added XADFS_FlpProcessDCB SWI and 1772 FdcReadAddress command
;
; 11-Mar-91  15:47  CDP
; MachineID values defined.
; Prototype and HasASICB stuff moved here from IDE driver.
;
; 12-Mar-91  16:39  LVR
; Added read address command for 1793
;
; 15-Mar-91  10:55  CDP
; Removed definitions of ADFS SWIs as these are now in Hdr.ADFS which
; is now included.
;
; 21-Mar-91  13:50  LVR
; Removed Prototype and HasASICB defs to Hdr_xxxx
;
; 25-Mar-91  16:26  JSR
; Add MessageFile_Block for internationalisation.
;
; 17-Sep-91  10:22  LVR
; Re-include debug code for development versions
;
; 16-Dec-91  09:45  LVR
; Add Portable_Flags word for power control
;
;*End of change record*


;*********************************************************************

; Disc Record

        ^ 0
;
SectorSize      # 1     ;log2 sector size
SecsPerTrk      # 1
Heads           # 1     ;1 for old adfs floppy format
Density         # 1     ;1/2/4 single double quad

;only those above needed for low level drivers

        [ NewFs
LinkBits        # 1
BitSize         # 1     ;log2 bytes for each bit in map, 0 for old format
RAskew          # 1     ;track to track sector skew for random access
        |               ;file allocation
                # 3
        ]
BootOpt         # 1     ;boot option for this disc

        [ NewFs
LowSector       # 1     ;b0-5= lowest sector ID, b6= sequence sides, b7= double step
Zones           # 1     ;# zones in map
ZoneSpare       # 2     ;# bits in zones after 0 which are not map bits
        ASSERT  (ZoneSpare :MOD: 4)=2
        |
                # 4
        ]
RootDir         aw 4
DiscSize        aw 4

DiscStruc       # 0     ;above entries (except BootOpt) define disc structure

DiscId          aw 2
DiscName        # 10
DiscRecSig      # 0     ;above entries form signature of disc

 [ BigDisc
DiscType        aw 4
DiscSize2       aw 4
DiscRecSig2     # 0
 ]

DiscFlags       # 1
FloppyFlag      bit 0
NeedNewIdFlag   bit 1
        [ NewFs
AltMapFlag      bit 5
OldMapFlag      bit 6
        |
OldMapFlag      * 0
        ]
OldDirFlag      bit 7   ;set <=> old small dirs


;entries below must be valid even when disc rec is not in use
Priority        # 1     ;0 DISC REC UNUSED
                        ;1 to # floppies -> floppy priority level
                        ;&FF good winnie
DiscsDrv        # 1     ;0-7 => drive in, 8 => not in drive, OR DISC REC UNUSED
DiscUsage       # 1     ;tasks using this disc, if >0 disc cant be forgotten
SzDiscRec       # 0

;default last word of disc record
;DiscFlags      0  FLOPPIES NEED NeedNewIdFlag SET INITIALLY
;Priority       0
;DiscsDrv       8
;DiscUsage      0
DefDiscRecEnd   * &00080000

; Preamble to disc rec for FORMAT
SzFormHdr * 8
        ^ -SzFormHdr
FormSig         # 1     ;signature
FormChar        # 1
HalfSide0Gap1   # 1
HalfSide1Gap1   # 1
Gap3            # 1
Skew            # 1
                # 2     ;unused
        ASSERT @@=0
SzFormDiscRec   * SzDiscRec+SzFormHdr


FloppyStrucs
; table of valid floppy disc structures
; each entry
;  a/ format disc rec preamble
;  b/ disc structure header of disc record
; terminated by &FF
L_Root  * &200
D_Root  * &400
L_Size  * 640*K
D_Size  * 800*K

        [ NewFs
NewMapRoot              * &203   ;indirect disc add
NewFloppyRootDiscAdd    * &800   ;physical disc add
        ]

;old adfs format
        = OldDirFlag :OR: OldMapFlag
        = "L"
        = (42+0)/2
        = (42+0)/2
        = 57
        = 4
        = 0,0

WinnieTestDiscRec       ;can use to read winnie defect map as 256 byte sectors
        = 8             ;sector size 2^8=256
        = 16            ;sectors per track
        = 1             ;heads=1 => no side interleave
        = 2             ;double density

        & 0
        & 0
        & L_Root
        & 160*16*&100   ;disc size

;intermediate D format
        = OldMapFlag
        = "D"
        = (32+271)/2
        = (32+0)/2
        = 90
        = 0
        = 0,0

FloppyTestDiscRec       ;this record is also used when identifying floppies
                        ;as it has largest sector size

        = 10            ;sector size 2^10=1K
        = 5             ;sectors per track
        = 2             ;heads=2 => side interleave
        = 2             ;double density

        & 0
        & 0

        & D_Root
        & 160*5*&400    ;disc size

        [ NewFs
;new E format
        = 0
        = "E"
        = (32+271)/2
        = (32+0)/2
        = 90
        = 0
        = 0,0

        = 10            ;sector size 2^10=1K
        = 5             ;sectors per track
        = 2             ;heads=2 => side interleave
        = 2             ;double density

        = 15            ;next bits
        = 7             ;2^7 bytes each map bit
        = 1             ;RA skew
        = 0             ;boot opt

Espare  * (&400*8)-(800*8)-Zone0Bits      ;total zone bits - used map bits

        = 0
        = 1             ;1 zone
        = Espare :AND: &00FF
        = ( Espare :AND: &FF00 ) :SHR: 8

        & NewMapRoot
        & 160*5*&400    ;disc size

        ]

        ASSERT (.-FloppyStrucs) :MOD: (SzFormHdr+DiscStruc) = 0
        & &FF           ;terminator


; Drive Record

        ^ 0

DrvFlags                # 4
ResetChangedByStep      bit 3
ResetChangedByWrite     bit 4
QuadDrv                 bit 5  ;set if quad
                        ASSERT  MiscOp_PollChanged_EmptyWorks_Flag = bit6
                        ASSERT  MiscOp_PollChanged_ChangedWorks_Flag = bit7
HeadPosition            # 4
PositionUnknown         * bit31
DrvSequenceNum          # 4
SzDrvRec                # 0


;point Rptr to start of drive record Rindex, must preserve flags

        MACRO
$lab    DrvRecPtr $Rptr,$Rindex,$cond
        ASSERT  $Rptr<>SB
        ASSERT  $Rptr<>PC
        ASSERT  SzDrvRec=12
        ADD$cond $Rptr,$Rindex,$Rindex, LSL #1
        ADD$cond $Rptr,SB,$Rptr,LSL #2
        Try8    ADD$cond,$Rptr,$Rptr,(:INDEX:DrvRecs)
        MEND


; DEFECT LIST

; The list consists of words containing the disc address ( in bytes ) of bad
; sectors, the end is marked by a value &200000xx, where &xx forms a check
; byte on the earlier list. The last 64 bytes describe the disc to ADFS.
; Any other bytes may be used as params for the low level drivers

DefectListDiscAdd       * &400+&800
SzDefectList            * &200
DefectEndMark           bit 29
MaxStruc                * 64
        ASSERT  SzDiscRec<=MaxStruc

        ^ 0
                # SzDefectList-MaxStruc-4
ParkDiscAdd     # 4


NameLen         * 10
ZoneDiscRecSz   * 60    ;reserve additional bytes in zone 0 for disc record copy
Zone0Bits       * ZoneDiscRecSz*8

;Filing system control reason codes

FscAddFs        * 12
FscSelectFs     * 14
FscRemoveFs     * 16
FscAdd2ndFs     * 17
FscReadFileType * 18


; Fiq Reg Usage

Temp    RN 8
Ram     RN 9
End     RN 10
FDC     RN 11
        ASSERT SB=R12
IOCfiq  RN 13   ;also used as fiq stack
;R14 link


;FIQ WORKSPACE USAGE FOR FLOPPY DRIVERS

;-----------------------------------------------------------------------------|
;         |                                                   |               |
;FIQ      |                                           FIQ  <--| FIQ VARIABLES |
;HANDLERS |                                          STACK <--|               |
;         |                                                   |               |
;-----------------------------------------------------------------------------|

;^&1C                                                         ^R13fiq     &100^

FiqWorkStart   * &1C
FiqWorkEnd     * &100

;FIQ Variables
                ^ 0
DrvRec          # 4     ;UP TO FIQDUMP MUST NOT BE RENUMBERED SEE NOTDRQ
SubDiscOp       # 4
DiscOp          # 4
Remains         # 4  ;amount left
DiscRec         # 4
ScatterPtr      # 4  ;->Scatter block

FiqDump         # 9*4           ;dump for R0-R7,LR

Result          # 4

FdcOp           # 1
DestTrack       # 1
Head            # 1
                # 1     ;MUST BE UNUSED SINCE ALL 4 WRITTEN AT ONCE

DiscAdd         # 4
RamStart        # 4     ;Start address in RAM
RamLength       # 4     ;amount to transfer
FRetries        # 1
FloppyRetryCtr  # 1
StepRate        # 1
DMAold          # 1
MEMC_DMA_bits   * bit8 :OR: bit9 :OR: bit10     ;leave sound DMA alone
MEMC_mystate    * bit8 :OR: bit9
DMAshift        * 8
ScatterBlk      # 8


FiqStackBase    * FiqWorkEnd - :INDEX: @@

 ! 0,"FIQ stack base " :CC: :STR: FiqStackBase

;Winnie Entry Reasons, kept at stack top

        ^ 0, SP
EntryReason     # 1

NormalEntry     * 0
TimerEntry      * 1

; Include any stuff that the IDE code needs to define before
; the statics are allocated.

        GET     ConstIDE.s

;MAIN WORKSPACE ALLOCATION

        ^ 0, SB

;GLOBALS WITH STANDARD INITIALISATION

DefGlobals
DefGlobStart    # 0
; WINNIE

NewErrorsFlag   # 1     ;<>0 if our FileCore expects new error codes
        = 0
SpecifiedWinnie # 1
        = &FF
WinnieRamOp     # 1     ;current handler in RAM, 1 Read, 2 Write, &FF Invalid
        = &FF
; FLOPPY
FiqDowngrade    # 1     ;<>0 when trying to downgrade FIQ
        = 0

SelectedFloppy  # 1
        = &FF
FormatFlag      # 1
        = 0             ;set mount retries > 0 during format
FormatMountRetries * 1
HeadSettle      # 1
        = Delay15or30msBit
DiscLatchCopy   # 1     ;soft copy of floppy latch
        = &FF

WinnieRetries           # 1
        = 16
FloppyRetries           # 1
        = 8
FloppyMountRetries      # 1
        = 3
FloppyDefectRetries     # 1
        = 1

MotorTimer      a4 1  ;0                   => In use
                      ;1                   => Off
                      ;2 to MotorTimeOut+1 => Counting timeout
MotorTimeOut *  &FE   ;ticks to motor timeout, 1 to &FE
        = 1
MotorLock       # 3   ;lock during map operations
        =       0,0,0

; Machine type to determine which drivers to activate

MachHas1772             * &00000000
MachHas82710            * &00000001
MachHasNoFDC            * &FFFFFFFF
MachineID               a4 4                    ; Machine identifier
                        &  MachHas1772          ; Default is 1772 (non 82C710)

; Portable flags

Portable_Flags          a4 4
Portable_Present        bit 31
                        & Portable_Present      ; Default portable present, disabled


; MessageTrans open flag
message_file_open       a4 4
        & 0

 [ WTEST
ECCTotal        a4 4
        & 0
ErrorTotal      a4 4
        & 0
  [ EngineeringMode
IDEVerifyType   a4 4
        & 0
  ]
 ]

        ALIGN

SzDefGlobals * {PC}-DefGlobals
        ASSERT {VAR}-DefGlobStart=SzDefGlobals

message_file_block a4 16

 [ :LNOT:BigDisc
WinnieSizes     a4 4
 ]
FileCorePrivate a4 4
 [ FileCache
FloppyCallAfter a4 4
WinnieCallAfter a4 4
FiqRelease      a4 4
 ]
 [ HAL
HAL_IRQEnable_routine a4 8
HAL_IRQDisable_routine a4 8
HAL_IRQStatus_routine a4 8
HAL_CounterDelay_routine a4 8
HAL_FIQEnable_routine a4 8
HAL_FIQDisableAll_routine a4 8
HAL_IDEDevice_pointer a4 4
 ]
ptr_ESC_Status  a4 4

;Low level workspace

DrvRecs         a4 SzDrvRec*8

Winnies         # 1

; FLOPPY

Floppies        # 1
Counter         # 1     ;decremented at 100 Hz
StepRates       # 1     ;copy of CMOS step rate byte

FiqCtr          # 1     ;# threads using fiq work space
StartSector     # 1
Sector          # 1
                # 1     ;padding

        GET     StaticsFDC.s

WorkSizeNoWinnies a4 0

 [ :LNOT:NewTransferCode
RomReturn       # 4
 ]

        GET     StaticsIDE.s

 [ NewTransferCode
AWorkSize       # 0
 |
; Ensure that winnie critical transfer code starts at 0 mod 16
; remembering that workspace starts at 4 MOD 16

 WHILE (:INDEX:@@+4) :MOD: 16 <> 0
 # 1
 WEND

LowCodeLocation  # 0    ;MUST BE LAST, USED FOR TIME CRITICAL CODE
 ]
        ALIGN
        LTORG

        END
@


4.9
log
@Use HAL device for PATA IDE controller, and a few minor fixes
ADFS 3 is currently both a filing system and a hardware poker, so have it own the PATA device for now as a stepping stone to a PATADriver module; export the header.
No longer call HAL entries, look for the HAL device, activate, and call that instead. At API 0.00 it just has the exact same 3 functions as the previous HAL entries only refactored to pass a device pointer in R0.

Makefile/IDEDevice.hdr/ADFS.s/Adfs00.s:
  Export, include, and reserve workspace.
Adfs12.s/IDEDetect.s:
  Refactor function calls.
Messages:
  Unrelated correction to pluralisation of 'Sectors'.
Adfs50.s:
  Hunt for the IDE controller device.
  Fix oflaofla error if run on a non HAL machine - OS_Hardware errors but the ErrXFree code label expects the error pointer in R9 not R0.

Tested in an IOMD build.

Version 3.50. Tagged as 'ADFS-3_50'
@
text
@d283 1
@


4.8
log
@Tidy up pass
ADFS.s:
  Redundant header files trimmed
  Get OsWords and OsBytes
  Switches rationalised
ADFS_SA.a
  Removed ARM810 support
Adfs00.s:
  Unused MEMC flag removed
Adfs05.s/Adfs12.s/Adfs13.s/Adfs14.s/Adfs15.s/Adfs19.s:
  Use defines instead of magic numbers
  Make use of FileCore exported bit fields
Adfs17.s/Adfs18.s/ConstIDE:
  {TRUE} and {FALSE} used with objasm
Adfs20.s
  Use AND of the opmask instead of BIC of all the flags except the opmask
Adfs50.s
  Unused MEMC flag no longer initialised
  Make use of FileCore exported bit fields
  Service call table reordered so the Ursula despatch doesn't incur a branch
  OsByte defines used
Consts:
  Removed those definitions now duplicating FileCore's exports
DebugOpts/Fixes:
  All options brought under one roof
ModHeader:
  Now uses VersionNum directly
Ver/*:
  Redundant switches deleted
  Removed used of 'Version' header


Version 3.45. Tagged as 'ADFS-3_45'
@
text
@d479 1
@


4.7
log
@  Minor bugfix to MiscOp 1 for '765 floppy disc driver
Detail:
  If the sequence number did not have the expected value on entry (i.e. the
  caller had missed at least one state change) then the driver always reported
  Changed, even for floppy drives without a working disc changed line. This
  was the only time when Changed was reported for such drives - now it reports
  MaybeChanged in this case, which is consistent with the 1772 floppy driver.
  Also removed the confusingly-named (and unused) symbols DefectStruc and
  DefectCheck, in line with similar changes to SCSIFS and FileCore.
Admin:
  Untested, but should be a safe change.

Version 3.44. Tagged as 'ADFS-3_44'
@
text
@d497 1
a497 2

MEMCflag        # 1
@


4.6
log
@Update to use some of the exported FileCore headers.
There are still a large number of local copies that should be visited, but this change at least allows it to assemble again FileCore-3_45.
Tungsten and IOMD variants assemble, but others untested.

Version 3.41. Tagged as 'ADFS-3_41'
@
text
@a290 3
DefectStruc     # MaxStruc-1
DefectCheck     # 1
        ASSERT  @@=SzDefectList
@


4.5
log
@Update to work with zero page relocation
Detail:
  s/ADFS, s/Adfs00, s/Adfs50 - Use OS_ReadSysInfo 6 to get ESC_Status location and store it in module workspace
  s/Adfs05 - Updated debug code to use OS_ReadSysInfo 6 to get IRQsema location. Updated CheckEscape to use local ESC_Status pointer, and updated it to only be compiled if it's actually needed
  s/Adfs10, s/Adfs14, s/Adfs15, s/Adfs17 - Use local ESC_Status pointer
Admin:
  Tested (with low processor vectors) in Iyonix ROM softload
  Note that FIQ handlers haven't been updated to support high vectors, since they aren't currently used on any hardware capable of using high vectors


Version 3.40. Tagged as 'ADFS-3_40'
@
text
@d255 2
a256 2
                        ASSERT  Drv_EmptyWorks   = bit6
                        ASSERT  Drv_ChangedWorks = bit7
@


4.4
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 3.35. Not tagged
@
text
@d483 1
@


4.3
log
@* ADFS_DiscOp64 and ADFS_ATAPIOp added.
* New FileCore error passing scheme supported.
* PCI floppy support functional.
* 48-bit LBA support added for ADFS_IDEUserOp and accessing beyond the
  first 128GB of a drive - not thoroughly tested.
* IDE autodetection improved

Version 3.34. Tagged as 'ADFS-3_34'
@
text
@d380 1
a380 1
        GET     s.ConstIDE
d502 1
a502 1
        GET     s.StaticsFDC
d510 1
a510 1
        GET     s.StaticsIDE
@


4.2
log
@32-bit conversion started, Tungsten hard disc support added.
Hard disc functional, but PIO mode only. Don't go near the floppy.

Version 3.33. Not tagged
@
text
@d392 1
a392 1
                # 1
d480 2
@


4.1
log
@Initial revision
@
text
@d58 1
a58 1
; Re-include debug code for development versions 
a168 1
        [ FDC1772
a169 3
        |
        = OldDirFlag :OR: OldMapFlag :OR: Double
        ]
a188 1
        [ FDC1772
a189 3
        |
        = OldMapFlag :OR: Double
        ]
a212 1
        [ FDC1772
a213 3
        |
        = Double
        ]
a240 57
         [ FDC1772
         |
;new QD format
        = Quad
        = "Q"
        = (64+0)/2
        = (64+0)/2
        = 122
        = 1
        = 0,0

        = 10            ;sector size 2^10=1K
        = 10            ;sectors per track
        = 2             ;heads=2 => side interleave
        = 4             ;density 4

        = 15            ;next bits
        = 8             ;2^8 bytes each map bit
        = 1             ;RA skew
        = 0             ;boot opt

Qspare  * (&400*8)-(1600*4)-Zone0Bits     ;total zone bits - used map bits

        = 0
        = 1             ;1 zone
        = Qspare :AND: &00FF
        = ( Qspare :AND: &FF00 ) :SHR: 8

        & NewMapRoot
        & 160*10*&400   ;disc size
         ]

        |

         [ FDC1772
         |
;new QD format
        = Quad
        = "Q"
        = (64+0)/2
        = (64+0)/2
        = 122
        = 1
        = 0,0

        = 10            ;sector size 2^10=1K
        = 10            ;sectors per track
        = 2             ;heads=2 => side interleave
        = 4             ;density 4

        & 0
        & 0

        & D_Root
        & 160*10*&400   ;disc size
         ]

a349 1
 [ FDC1772
a350 3
 |
SettleMask      # 1     ;1793 only
 ]
d466 1
d468 1
d475 6
a497 1
 [ MEMC1A
a498 3
 |
                # 1
 ]
d504 1
a504 51
WinnieWork      # 0

WinnieHardware  # 0
DefaultWinnieHardware
HDCPtr          # 4
 [ MEMC1A
dataRead        * 8
 ]
DefaultHDC      * &32D0000
         & DefaultHDC
PollPtr         # 4
         & IoChip+IoIrqBStatus
PollBits        # 4
         & WinnieBits
InterruptPtr    # 4
         & IoChip+IoIrqBMask
InterruptBits   # 4
         & WinnieBits

command         # 1     ; the command we did
WinIRQ          # 1
WBlock          # 1
WHead           # 1
parameters      # 16    ; parameter block

parms           # 0
opCode          # 4     ; R1 - reason code etc
discAddress     # 4     ; R2 - in bytes
WRemains        # 4     ; R4 - master amount to xfer
WScatter        # 4
WriteAdjust     # 4
WDefectList     # 4     ; R6
WDiscSize       # 4
ContigEnd       # 4

WScatterRam     # 4
WScatterLen     # 4

RestoreCount    # 1
WSecsPerTrk     # 1
WHeads          # 1
WZones          # 1

RestoreEndTime  # 4

WRetry          # 1
NextHead        # 1
completion      # 1
HeadSelBit3Copy # 1

 [ MEMC1A
a506 5
Resume          # 4
Cylinder        # 4
WLength         # 4

dsI          # 4 ; for defect skipping
d510 3
d521 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
