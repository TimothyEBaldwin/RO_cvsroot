head	4.1;
access;
symbols
	ADFS-3_54:4.1
	ADFS-3_53:4.1
	ADFS-3_52:4.1
	ADFS-3_51:4.1
	ADFS-3_50:4.1
	ADFS-3_49:4.1
	ADFS-3_48:4.1
	ADFS-3_47:4.1
	ADFS-3_46:4.1
	ADFS-3_45:4.1
	ADFS-3_44:4.1
	ADFS-3_43:4.1
	ADFS-3_42:4.1
	ADFS-3_41:4.1
	ADFS-3_40:4.1
	ADFS-3_39:4.1
	ADFS-3_38:4.1
	ADFS-3_37:4.1
	ADFS-3_36:4.1
	RO_5_07:4.1
	ADFS-3_35:4.1
	ADFS-3_34:4.1
	ADFS-3_33:4.1
	dellis_autobuild_BaseSW:4.1
	ADFS-3_32:4.1
	Ursula_merge:4.1
	Ursula_RiscPC_merge:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	sbrodie_UrsulaRiscPC_ADFS-3_30:4.1
	Ursula_RiscPC_bp:4.1
	nturton_ADFS-3_29:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	sproven_ADFS-3_31:4.1
	nicke_ADFS_3_26:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	sproven_330:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.31.31;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.31.31;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.36.22;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.30.09;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.25.36;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@REM>$.ADFS.TEST.TestADFS
REM Test program for ADFS 2.10+
:
density%=2:spt%=5:sectorsize%=10:size%=2^sectorsize%
lowsector%=0
tracks%=80:heads%=2
errors%=0
:
DIM dfs% 1024:REM Disk format specification
dfs%!0=size%
dfs%!4=50:REM gap1 with no IAM
dfs%!8=dfs%!4
dfs%!12=54:REM gap3
dfs%?16=spt%
dfs%?17=density%
dfs%?18=0:REM no IAM, alt sides
IFheads%=1 dfs%?18+=(3<<2):REM sequence sides
IFtracks%=40 dfs%?18+=2:REM double step
dfs%?19=&A5:REM fill byte
dfs%!20=tracks%+1:REM cylinders
:
DIM discrec% 64+4:REM disc record and alt defect map
discrec%?0=sectorsize%
discrec%?1=spt%
discrec%?2=heads%
discrec%?3=density%
discrec%?8=lowsector%
IFtracks%=40 discrec%?8+=&80
discrec%!16=heads%*tracks%*spt%*size%
discrec%!64=&20000000:REM min defect list
:
INPUT"Test which drive (0..3)? "drive%
:
REM restore test
PRINT"Restoring drive ";drive%;
discaddress%=10*size%*spt%
SYS"XADFS_DiscOp",-1,&46+(discrec%<<6),(drive%<<29)+discaddress%,-1,-1 TO R0%,R1%,R2%,R3%,R4%;flags%
IF (flags% AND 1) THEN
 PRINT" - ";FNstring0(R0%+4):END
 errors%+=1
ELSE
 PRINT" ok"
 IF R1%<>&46+(discrec%<<6) PRINT"R1 corrupted":errors%+=1
 IF R2%<>(drive%<<29)+discaddress% PRINT"R2 corrupted":errors%+=1
 IF R3%<>-1 PRINT"R3 corrupted":errors%+=1
 IF R4%<>-1 PRINT"R4 corrupted":errors%+=1
ENDIF
:
REM construct a test disk
discaddress%=0
FORtrack%=0TO7:FORhead%=0TOheads%-1
 FORI%=0TOspt%-1
  dfs%!(36+(I%<<2))=((sectorsize%-7)<<24)+((I%+lowsector%)<<16)+(head%<<8)+track%
 NEXT
 PRINTCHR$13;"Formatting track ";track%;
 SYS"ADFS_DiscOp",0,4+(discrec%<<6),(drive%<<29)+discaddress%,0,dfs%
 discaddress%+=size%*spt%
NEXThead%:NEXTtrack%
PRINT
:
REM format side 0 tracks 1 to 3 for double stepping
dfs%?18=2+(3<<2):REM double step, sequence sides
head%=0:track%=1
discaddress%=size%*spt%*track%
FORtrack%=1TO3
 FORI%=0TOspt%-1
  dfs%!(36+(I%<<2))=((sectorsize%-7)<<24)+((I%+lowsector%)<<16)+(head%<<8)+track%
 NEXT
 PRINTCHR$13;"Double step formatting track ";track%;
 SYS"ADFS_DiscOp",0,4+(discrec%<<6),(drive%<<29)+discaddress%,0,dfs%
 discaddress%+=size%*spt%
NEXTtrack%
PRINT
:
REM remove track 1, head 1 sectors 2 and 4 ID's
dfs%?18=0
head%=1:track%=1
discaddress%=size%*spt%*heads%*track% + head%*size%*spt%
FORI%=0TOspt%-1
 dfs%!(36+(I%<<2))=((sectorsize%-7)<<24)+((I%+lowsector%)<<16)+(head%<<8)+track%
NEXT
lowsector%=&10
I%=2
dfs%!(36+(I%<<2))=((sectorsize%-7)<<24)+((I%+lowsector%)<<16)+(head%<<8)+track%
I%=4
dfs%!(36+(I%<<2))=((sectorsize%-7)<<24)+((I%+lowsector%)<<16)+(head%<<8)+track%
PRINT"Removing side 1 track 1 sectors 2 and 4"
SYS"ADFS_DiscOp",0,4+(discrec%<<6),(drive%<<29)+discaddress%,0,dfs%
:
REM Make track 79 side 1 with wrong cylinder no.
head%=1:track%=79
discaddress%=size%*spt%*heads%*track% + size%*spt%*head%
lowsector%=0
FORI%=0TOspt%-1
 dfs%!(36+(I%<<2))=((sectorsize%-7)<<24)+((I%+lowsector%)<<16)+(head%<<8)+track%+1
NEXT
PRINT"Formatting track 79 side 1 with wrong cylinder number"
SYS"ADFS_DiscOp",0,4+(discrec%<<6),(drive%<<29)+discaddress%,0,dfs%
:
REM test defect address mapping
discaddress%=0
len%=size%*spt%*heads%*2
PRINT"Verifying defect addresses";
REPEAT
 SYS"XADFS_DiscOp",-1,&40+(discrec%<<6),(drive%<<29)+discaddress%,-1,len% TO R0%,R1%,R2%,R3%,len%;flags%
 discaddress%=R2%AND&1FFFFFFF
 IF (flags% AND 1) THEN
  READ bad%
  IF discaddress%<>bad% OR ?R0%<>&C7 THEN
   PRINT'FNstring0(R0%+4);" Error &";~!R0%
   errors%+=1
  ELSE
   PRINT".";
  ENDIF
  discaddress%+=size%
  len%-=size%
 ELSE
  IF R0%<>-1 PRINT"R0 corrupted by verify":errors%+=1
  IF R1%<>&40+(discrec%<<6) PRINT"R1 corrupted by verify":errors%+=1
  IF R3%<>-1 PRINT"R3 corrupted by verify":errors%+=1
 ENDIF
UNTIL len%=0
READ bad%
IF bad%<>-1 THEN
 PRINT'"Defect at &";~bad%;" not found":errors%+=1
ELSE
 PRINT
ENDIF
DATA &4400,&4C00,-1
:
REM read single sided, double step
PRINT"Reading side 0, double step"
discrec%?8=&C0
discaddress%=0:len%=4*size%*spt%
DIM buffer% 8000
SYS"XADFS_DiscOp",-1,&41+(discrec%<<6),(drive%<<29)+discaddress%,buffer%,len% TO R0%,R1%,R2%,R3%,R4%;flags%
discaddress%=R2%AND&1FFFFFFF
IF (flags% AND 1) THEN
 PRINTFNstring0(R0%+4);" Error &";~!R0%:errors%+=1
ELSE
 REM:Filecore corrupts R0 IF R0%<>-1 PRINT"R0 corrupted by read, returns ";~R0%
 IF R1%<>&41+(discrec%<<6) PRINT"R1 corrupted by read":errors%+=1
 IF discaddress%<>len% PRINT"R2 incorrect after read":errors%+=1
 IF R3%<>buffer%+len% PRINT"R3 incorrect after read":errors%+=1
 IF R4%<>0 PRINT"R4 non-zero after read":errors%+=1
ENDIF
:
REM write/read test
PRINT"Double step read/write test with LowSector offset"
discrec%?8+=1:REM start sector 1
discaddress%=0:len%=size%*(spt%-1)
FORI%=0TOlen%-1:buffer%?I%=I%+&36:NEXT
SYS"XADFS_DiscOp",-1,&42+(discrec%<<6),(drive%<<29)+discaddress%,buffer%,len% TO R0%,R1%,R2%,R3%,R4%;flags%
discaddress%=R2%AND&1FFFFFFF
IF (flags% AND 1) THEN
  PRINTFNstring0(R0%+4);" Error &";~!R0%:errors%+=1
ELSE
 IF R1%<>&42+(discrec%<<6) PRINT"R1 corrupted":errors%+=1
 IF discaddress%<>len% PRINT"R2 incorrect":errors%+=1
 IF R3%<>buffer%+len% PRINT"R3 incorrect":errors%+=1
 IF R4%<>0 PRINT"R4 non-zero":errors%+=1
ENDIF
discaddress%=0
SYS"XADFS_DiscOp",-1,&41+(discrec%<<6),(drive%<<29)+discaddress%,buffer%,len% TO R0%,R1%,R2%,R3%,R4%;flags%
discaddress%=R2%AND&1FFFFFFF
IF (flags% AND 1) THEN
  PRINTFNstring0(R0%+4);" Error &";~!R0%:errors%+=1
ELSE
 REM:Filecore corrupts R0 IF R0%<>-1 PRINT"R0 corrupted by read, returns ";~R0%
 IF R1%<>&41+(discrec%<<6) PRINT"R1 corrupted":errors%+=1
 IF discaddress%<>len% PRINT"R2 incorrect":errors%+=1
 IF R3%<>buffer%+len% PRINT"R3 incorrect":errors%+=1
 IF R4%<>0 PRINT"R4 non-zero":errors%+=1
 FORI%=0TOlen%-1
  IF buffer%?I%<>((I%+&36)AND&FF) PRINT"Bad data &";~buffer%?I%;" at &";~I%:errors%+=1
 NEXT
ENDIF
:
REM Read ID's
PRINT"Checking read track"
track%=79:head%=1
discaddress%=size%*spt%*(track%*2+head%)
discrec%?8=0
SYS"XADFS_DiscOp",-1,&53+(discrec%<<6),(drive%<<29)+discaddress%,buffer%,-1 TO R0%,R1%,R2%,R3%,R4%;flags%
R2%=R2%AND&1FFFFFFF
IF (flags% AND 1) THEN
  PRINTFNstring0(R0%+4);" Error &";~!R0%:errors%+=1
ELSE
 IF R1%<>&53+(discrec%<<6) PRINT"R1 corrupted":errors%+=1
 IF R2%<>discaddress% PRINT"R2 corrupted":errors%+=1
 IF R3%<>buffer% PRINT"R3 corrupted":errors%+=1
 IF R4%<>-1 PRINT"R4 corrupted":errors%+=1
 IF((!buffer%)AND&FF00FFFF)<>track%+&03000101 PRINT"Bad ID &";~!buffer%:errors%+=1
ENDIF
:
REM seek test
PRINT"Seek test"
head%=0:track%=79
discaddress%=size%*spt% * (heads%*track% + head%)
FORI%=0TOspt%-1
 dfs%!(36+(I%<<2))=((sectorsize%-7)<<24)+((I%+lowsector%)<<16)+(head%<<8)+track%
NEXT
SYS"XADFS_DiscOp",0,4+(discrec%<<6),(drive%<<29)+discaddress%,0,dfs%
SYS"XADFS_DiscOp",-1,&45+(discrec%<<6),(drive%<<29)
track%=79:head%=0
discaddress%=size%*spt%*(track%*heads%+head%)
SYS"XADFS_DiscOp",-1,&45+(discrec%<<6),(drive%<<29)+discaddress%,-1,-1 TO R0%,R1%,R2%,R3%,R4%;flags%
IF (flags% AND 1) THEN
 PRINTFNstring0(R0%+4);" Error &";~!R0%:errors%+=1
ELSE
 IF R1%<>&45+(discrec%<<6) PRINT"R1 corrupted":errors%+=1
 IF R2%<>(drive%<<29)+discaddress% PRINT"R2 corrupted":errors%+=1
 IF R3%<>-1 PRINT"R3 corrupted":errors%+=1
 IF R4%<>-1 PRINT"R4 corrupted":errors%+=1
ENDIF
:
PRINT"Checking track ID"
SYS"XADFS_DiscOp",-1,&53+(discrec%<<6),(drive%<<29)+discaddress%,buffer%,-1 TO R0%,R1%,R2%,R3%,R4%;flags%
IF (flags% AND 1) THEN
 PRINTFNstring0(R0%+4);" Error &";~!R0%:errors%+=1
ELSE
 IF?buffer%<>track% PRINT"Bad seek, track= ";?buffer%:errors%+=1
ENDIF
:
REM check all other discops don't hang
PRINT"Testing invalid DiscOps";
FORop%=7TO15
 IFop%=9 THEN NEXT
 PROCop(-1,op%+(discrec%<<6),0,-1,-1)
NEXT
PRINT". ok"
:
REM print out errors
PRINT';errors%;" errors detected"
:
END
:
DEF FNstring0(s%)
LOCAL s$
WHILE?s%:s$+=CHR$?s%:s%+=1:ENDWHILE
=s$
:
DEF PROCop(R0%,R1%,R2%,R3%,R4%)
ONERROR LOCAL:ENDPROC
SYS"XADFS_DiscOp",R0%,R1%,R2%,R3%,R4%
ENDPROC
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
