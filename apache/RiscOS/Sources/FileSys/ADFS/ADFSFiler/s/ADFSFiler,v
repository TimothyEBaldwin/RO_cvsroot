head	4.21;
access;
symbols
	ADFSFiler-1_12:4.21
	ADFSFiler-1_11:4.20
	ADFSFiler-1_10:4.19
	ADFSFiler-1_09:4.19
	ADFSFiler-1_08:4.19
	ADFSFiler-1_07:4.17
	ADFSFiler-1_06:4.15
	ADFSFiler-1_05:4.14
	ADFSFiler-1_04:4.14
	ADFSFiler-1_03:4.13
	ADFSFiler-1_02:4.12
	ADFSFiler-1_01:4.11
	ADFSFiler-1_00:4.10
	ADFSFiler-0_99:4.9
	ADFSFiler-0_98:4.9
	RO_5_07:4.9
	ADFSFiler-0_97:4.9
	ADFSFiler-0_96:4.8
	ADFSFiler-0_95:4.7
	ADFSFiler-0_94:4.6
	ADFSFiler-0_93:4.5
	ADFSFiler-0_92:4.5
	ADFSFiler-0_91:4.5
	ADFSFiler-0_90:4.4
	ADFSFiler-0_89:4.3
	Ursula_merge:4.2.2.6
	ADFSFiler-0_88:4.2.2.6
	Ursula_RiscPC_merge:4.2.2.5
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2.2.5
	Ursula_RiscPC:4.2.2.5.0.2
	rthornb_UrsulaBuild-19Aug1998:4.2.2.5
	UrsulaBuild_FinalSoftload:4.2.2.5
	rthornb_UrsulaBuild-12Aug1998:4.2.2.5
	aglover_UrsulaBuild-05Aug1998:4.2.2.5
	rthornb_UrsulaBuild-29Jul1998:4.2.2.5
	rthornb_UrsulaBuild-22Jul1998:4.2.2.5
	rthornb_UrsulaBuild-15Jul1998:4.2.2.5
	rthornb_UrsulaBuild-07Jul1998:4.2.2.5
	rthornb_UrsulaBuild-17Jun1998:4.2.2.5
	rthornb_UrsulaBuild-03Jun1998:4.2.2.5
	rthornb_UrsulaBuild-27May1998:4.2.2.5
	rleggett_ADFSFiler-0_87:4.2.2.5
	rthornb_UrsulaBuild-21May1998:4.2.2.5
	rthornb_UrsulaBuild_01May1998:4.2.2.5
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.21
date	2017.03.26.19.18.01;	author jlee;	state Exp;
branches;
next	4.20;
commitid	UF5kr1YL1E7KT5Lz;

4.20
date	2016.09.20.19.32.56;	author rsprowson;	state Exp;
branches;
next	4.19;
commitid	TQwWHZvBslGwZ3nz;

4.19
date	2015.02.20.12.55.03;	author rsprowson;	state Exp;
branches;
next	4.18;
commitid	03AcYcL9CgjVmKay;

4.18
date	2015.02.20.12.51.22;	author rsprowson;	state Exp;
branches;
next	4.17;
commitid	J6EubBgWPWynlKay;

4.17
date	2015.01.16.00.24.03;	author jlee;	state Exp;
branches;
next	4.16;
commitid	DZVoF7PmI7k3lb6y;

4.16
date	2014.01.14.20.05.44;	author rsprowson;	state Exp;
branches;
next	4.15;
commitid	t2c8Ft8XMbEDF7lx;

4.15
date	2012.10.21.16.55.00;	author rsprowson;	state Exp;
branches;
next	4.14;
commitid	fAlrqkIOpXOb5hpw;

4.14
date	2012.04.14.01.02.51;	author bavison;	state Exp;
branches;
next	4.13;
commitid	kz9ocYqopho5VL0w;

4.13
date	2011.10.14.07.31.07;	author rsprowson;	state Exp;
branches;
next	4.12;
commitid	GtFPi3kjEr25XhDv;

4.12
date	2011.09.22.21.53.13;	author rsprowson;	state Exp;
branches;
next	4.11;
commitid	uPAaxKSTAJKGqxAv;

4.11
date	2010.03.02.00.15.40;	author jlee;	state Exp;
branches;
next	4.10;

4.10
date	2010.03.01.23.24.39;	author jlee;	state Exp;
branches;
next	4.9;

4.9
date	2003.06.05.14.10.06;	author bavison;	state Exp;
branches;
next	4.8;

4.8
date	2003.06.03.10.47.56;	author bavison;	state Exp;
branches;
next	4.7;

4.7
date	2003.05.23.18.50.25;	author bavison;	state Exp;
branches;
next	4.6;

4.6
date	2003.05.08.19.29.21;	author bavison;	state Exp;
branches;
next	4.5;

4.5
date	2002.11.14.23.04.56;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	2000.07.14.15.07.41;	author jfletche;	state Exp;
branches;
next	4.3;

4.3
date	2000.07.11.09.34.30;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.06.11.40.56;	author nturton;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.31.42;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	97.06.05.15.16.04;	author rleggett;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	97.09.12.09.19.39;	author rleggett;	state Exp;
branches;
next	4.2.2.3;

4.2.2.3
date	97.09.18.11.59.41;	author rleggett;	state Exp;
branches;
next	4.2.2.4;

4.2.2.4
date	98.03.27.09.44.38;	author rleggett;	state Exp;
branches;
next	4.2.2.5;

4.2.2.5
date	98.03.27.13.29.48;	author rleggett;	state Exp;
branches;
next	4.2.2.6;

4.2.2.6
date	99.08.17.14.34.35;	author sbrodie;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.31.42;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.43.14;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.31.16;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.26.37;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.21
log
@Fix null pointer dereference when building floppy Format menu
Detail:
  s/ADFSFiler - The commenting out of the MOV R5,#0 line in a previous bug fix left a null pointer dereference in the code when EnumFormats_Flags is checked. Examination of the code suggests the intent was to use the MOV R5,#0 to skip the EnumFormats_Flags check, so modify the preceeding CMP to check for R5=0 or R0=0.
Admin:
  Tested in Iyonix ROM softload
  Fixes issue #436
  https://www.riscosopen.org/tracker/tickets/436


Version 1.12. Tagged as 'ADFSFiler-1_12'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.ADFSFiler

;;----------------------------------------------------------------------------
;; ADFS Filer module
;;
;; Change List
;; -----------
;;  5-Apr-88    0.05    Change list added
;;  5-Apr-88    0.06    Taken over by NRaine
;; 11-Apr-88            Changed iconbar handle to -2 (Wimp changed)
;; 11-Apr-88            Implement disc menu (obtained from iconbar)
;; 12-Apr-88            Implement Format, Backup, Verify
;; 13-Apr-88            Ask Filer to close directories in namedisc/dismount
;; 13-Apr-88            Move Wimp offsets into Hdr.WimpSpace
;; 14-Apr-88            Change floppy menu so discname is read later
;; 22-Apr-88            Errors during initialisation should avoid looping
;; 22-Apr-88    0.07    If ADFS not present, don't give error (no icons)
;; 17-May-88            Remove cancel box from error reports
;; 17-May-88            Add L, D or E options to format menu
;; 17-May-88    0.08    Close down previous incarnation when starting up
;; 17-May-88    0.08    Use Desktop_ADFSFiler command to stop wally user
;; 19-May-88    0.09    Change RMA usage so block is only allocated on Startup
;; 26-May-88            Use %Dir and %Back to avoid problems with aliases
;; 26-May-88    0.10    Put validation string into NameDisc menu entry
;; 31-May-88    0.11    Remove "..." from disc menus
;; 21-Jun-88    0.12    Change to use Wimp_SpriteOp rather than BaseOfSprites
;; 27-Jun-88    0.13    Change background colour of iconbar icons to 0
;;  7-Jul-88            Fix bug: TEQVCP in  used r1 incorrectly
;;  8-Jul-88            Change menu colours to suit GBartram's defaults
;; 19-Jul-88    0.14    Use ADFS_DescribeDisc instead of *%Dir/*%Back
;; 18-Aug-88    0.15    Improve error message on Desktop_ADFSFiler
;; 25-Aug-88    0.16    Change 'format floppy' menu to remove "Arthur"
;;  1-Sep-88    0.17    Allow "," in namedisc strings
;; 20-Oct-88            Change to use new formatMake procedures
;;  1-Jun-89    0.18    Report errors in *NameDisc properly
;; 31-Jul-89    0.19    Check for zero drives (don't start up)
;; 31-Jul-89    0.20    Display disc name underneath hard disc icons
;; 31-Jul-89    0.21    When renaming hard discs, keep icon in same place
;;  6-Oct-89    0.22    Error while reading hard disc name => use drive number
;; 31-Oct-89    0.23    Implement interactive help
;;  2-Nov-89    0.24    Use MessageTrans module to get interactive help
;;  3-Nov-89    0.25    Use MessageTrans_MakeMenus to set up menu tree
;;  5-Dec-89            Dismount source disc after *Backup
;;  5-Dec-89    0.26    Provide backup submenu if multiple floppy drives
;;  9-Dec-89    0.27    Allow alias substitution for menu commands
;; 19-Feb-90    0.28    Use new ResourceFS mechanism
;; 26-Feb-90    0.29    Use WimpPriority_HardDiscs/FloppyDiscs
;; 27-Feb-90            Use Wimp_StartTask when formatting etc.
;;              0.30    Changed aliases to "ADFS_xxx"
;; 10-Sep-90    0.31    Changes * command for free space display to remove
;;                      the ':' for the FreeSpace module.
;; 08-Apr-91    0.32    Added messages list and Pass 300 to Wimp_Initialise.
;; 11-Apr-91    0.33    Added interactive format & verify support.
;; 31-May-91    0.34    Added support for 4 hard discs
;; 31-May-91    0.35    Re-done format/verify
;;  1-Jun-91    0.36    Fixed bug , re-build format menu if first time menu is opened.
;; 28-Aug-91    0.46    Changed to use showfree without alias
;; 30-Aug-91    0.47    Dismount disc after format before verify.
;; 08-Sep-91    0.49    Dismount backup destination after describe disc and give
;;                      disc record each write track operation.
;;                      Disable clicks on iconbar during format and backup
;;                      On incompatible *ALWAYS* put insert dest message in hole.
;;                      Put .$ on end of Filer_OpenDir command
;; 16-Sep-91    0.50    Re do identify format to use Service_IdentifyFormat. Fixes
;;                        address exception lurking in old implementation and causes
;;                        other formats to be recognised other than those on the menu.
;; 22-Oct-91    0.51    Improve desktop backup to not read unused parts of the disc.
;;                      Prevent help from going address exception after wandering over
;;                        the foreign formats submenu.
;;                      Move messages and templates to resourcefs
;;                      Provide a help message for the current format dialogue box.
;;                      Cause any disc error to give disc not formatted innthe dialogue box.
;;                      Fix Backup's handling of errors.
;;                      Fix format's disc name field to only accept 2 character or more of the
;;                        right type.
;;                      Reduce workspace requirement.
;;                      Complete the internationalisation.
;;                      Check format busy before getting disc name
;;              0.52    When format name box has the caret, hot keys (eg. F12) now work (fixes G-RO-7910).
;;                      "OK" not required in messages displayed when disc format/verify/backup succeeds.
;;                      When a disc with defects is desktop formatted to D or L format then at the
;;                        end of the verify stage, when the defects can't be mapped out, the verify
;;                        simulates a desktop verify and reports "Failed. ?? defects found" (fixes
;;                        bug G-RO-9894).
;; 12-Dec-91    0.53    Shortened some message tokens and removed some which were unused.
;; 23-Jan-92    0.54    Disc in source drive was always stamped even if backup was to another
;;                        drive (this caused problems when the source disc was protected).
;;                      Fixed nasty bug where ADFS_DiscOp could be told to read from/write to
;;                        the wrong drive during a twin drive backup.
;;                      Got rid of annoying green/red bits left in progress bar.
;;                      Completed internationalisation (remaining errors moved to Messages).
;;                      Replaced some help tokens which should not have been removed.
;;                      Added non-interactive disc operations (Format, Backup, Verify, Free).
;; 30-Jan-92    0.55    Now allocates the correct amount of memory for the format template instead
;;                        of using a fixed size buffer.
;;                      If laying down the disc structure when formatting fails, ADFSFiler no
;;                        longer tries to format past the end of the disc.
;;                      Now dismounts the disc when the format window is closed (avoid getting
;;                        stuck in "Unrecognised format..." messages on valid discs).
;;                      Fixed horrible purple and green error text in 256 colour modes.
;; 03-Feb-92    0.56    Adjust service call entry for changed Service_MessageFileClosed.
;; 20-Feb-92    0.57    Only dismount the disc when the window is closed if in a formatting state.
;;                      Handle upcalls about possible disc changes correctly (fixes RP-0462).
;;                      Fixed verify code which counted a track every time a known defect was found
;;                        which meant that much of the disc could be left unverified (fixes RP-0616).
;;                      Disc must always be dismounted before starting a format unless it
;;                        is unformatted (fixes bug RP-0169).
;; 06-Mar-92    0.58    If formatting a track fails (eg. due to protected disc) then try to format the
;;                        track again instead of skipping it when the format is continued (fixes RP-1501).
;; 12-Mar-92    0.59    Fixed bug reintroduced in version 0.57 which prevented unformatted disc
;;                        being formatted (fixes bug A-RO-7243 again).
;; 24-Mar-92  0.60 OSS  Fixed template memory allocations - RP-0920. Fixed
;;                      RMA rot on RMKill/RMTidy. Removed hard limits on
;;                      number of entries in format menus (allocate Tables
;;                      as required not fixed size up front). Added
;;                      validation string to disc name field in format
;;                      window in Templates file (same as for menu).
;;                      Stopped Verify losing about 1K RMA if no disk in
;;                      drive. Grey out "Other formats" menu entry if there
;;                      are no other formats - prevents crash on opening
;;                      empty menu. Call Wimp_DeleteWindow when the window
;;                      is no longer in use (more RMA rot!). Kill active
;;                      backup task if we are killed (and only permit one
;;                      backup at once). Bump backup wimp slot to 8K if it
;;                      is zero - prevents crash. Fix bug with passing ROM
;;                      pointer in R5 to Wimp_LoadTemplate.
;; 23-Apr-92  0.61 SMC  Stop Format/Backup windows being "paused" by UpCall after completion,
;;                        fixes (G-RO-9641).
;; 22-Jul-93  0.62 ECN  Stop it from zeroing the format menu width
;; 16-Sep-93  0.65 SMC  Verify now pauses after every defect including on last disc sector.
;;                      Backup with 0K apps memory free no longer gives data abort.
;;                      Reports of 1 defect are now singular rather than plural.
;;                      Menu now updated before being re-opened after ADJUST click.
;; 22-Sep-93  0.66 amg  Change the colour combination used for reporting defects - the
;;                      original combination of red and cream only left the Font Manager
;;                      with Green as an intermediate colour - which doesn't look so good!
;; 09-nov-93  0.67 FB   Added Sparrow Spec.:
;;                        new entry SHARE in the main menu;
;;                        not/protected/unprotected share type submenu;
;;                        functions to call ShareD_Create/StopShare SWIs;
;;                        ADFS CMOS (Byte &6B) check at installing time;
;;                        Read/Write CMOS bits functions.
;; 09-nov-93  0.68 RM  Moved ResourceFS_RegisterFiles to after the SetVarVal
;;                     in ADFSFiler_Init.
;; 10-Dec-93  0.69 SMC Restored tokens VENDS and FENDS in Messages file.
;;                     Backup now tries to get enough memory to do the op in one go.
;;                     Help for shaded menu items sorted out.
;;                     Adjust click on verify hard disc menu item now shades whole menu.
;; 14-Dec-93  0.70 SMC Now catches error &1089A (unformatted) in IdentifyDisc.
;; 19-Aug-94  0.71 SMC Now looks up command help/syntax messages.
;; 31-Aug-94  0.72 SMC Don't backup to discs with defects.
;; 28-Oct-94  0.73 SMC Sorted out message tokenisation.
;; 02-Nov-94  0.74 amg Change verify to cope with >512Mb discs
;; 10-Jan-95  0.76 SBP Change GetMediaName to avoid Ambiguous disc name on desktop boot (fatal,
;;                     boot fails and drops out of wimp to cli)
;; 28-May-97  0.85 RML Trap datasave messages and allow file saves to the iconbar icon
;;                     (resulting in saves to the root directory).
;; 08-Sep-97  0.86 RML Generate a Message_FilerDevicePath in response to Message_FilerSelection.
;; 26-Mar-98  0.87 RML Added Ursula service call table.
;;----------------------------------------------------------------------------

 [ :LNOT: :DEF: SCSI
        GBLL    SCSI
SCSI    SETL    {FALSE}
 ]
 [ :LNOT: :DEF: SDFS
        GBLL    SDFS
SDFS    SETL    {FALSE}
 ]
 
        GBLL    HotPlug
HotPlug SETL    (SCSI :LOR: SDFS) :LAND: {TRUE}

        AREA    |!!!Module|, CODE, READONLY

Module_BaseAddr

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services
        GET     Hdr:ModHand
        GET     Hdr:OsBytes
        GET     Hdr:CMOS
        GET     Hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     Hdr:NewErrors
        GET     Hdr:Wimp
        GET     Hdr:WimpSpace
        GET     Hdr:Messages
        GET     Hdr:Sprite
        GET     Hdr:VduExt
        GET     Hdr:Variables
        GET     Hdr:Proc
        GET     Hdr:MsgTrans
        GET     Hdr:MsgMenus
      [ SDFS
        GET     Hdr:SDFS
      |
      [ SCSI
        GET     Hdr:SCSIFS
      |
        GET     Hdr:ADFS
      ]
      ]
        GET     Hdr:Territory
        GET     Hdr:FileCore
        GET     Hdr:MultiFS
        GET     Hdr:UpCall
        GET     Hdr:ResourceFS
        GET     Hdr:ShareD
        GET     Hdr:ExtraLong
        GET     Hdr:Hourglass

        GET     VersionASM

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


                GBLL    StrongARM
StrongARM       SETL    {TRUE}

                GBLL    givehelp
givehelp        SETL    {TRUE}

                GBLL    tokenhelp       ; needed for international help
tokenhelp       SETL    {TRUE}

                GBLL    bodgedisc
bodgedisc       SETL    {TRUE}          ; needed for old FileCore modules

                GBLL    chkbkpdefects
chkbkpdefects   SETL    {TRUE}          ; SMC: don't allow backup to disc with defects

                GBLL    DragsToIconBar  ; RML: Are drags from save boxes/filer windows to our icon allowed?
DragsToIconBar  SETL    {TRUE}

                GBLS    SWIPrefix
                GBLS    FSTitle
                GBLA    FSNumber
 [ SDFS
SWIPrefix       SETS    "SDFS"
FSTitle         SETS    "SDFS"
FSNumber        SETA    fsnumber_SDFS
 |
 [ SCSI
SWIPrefix       SETS    "SCSIFS"
FSTitle         SETS    "SCSI"
FSNumber        SETA    fsnumber_SCSIFS
 |
SWIPrefix       SETS    "ADFS"
FSTitle         SETS    "ADFS"
FSNumber        SETA    fsnumber_adfs
 ]
 ]
 
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        GET     Hdr:NdrDebug

        GBLL    debug
debug   SETL    {FALSE}

        GBLS    get1
        GBLS    get2
        GBLS    get3
      [ debug
get1    SETS    " GET Hdr:Debug"
get2    SETS    " GET Hdr:HostFS"
get3    SETS    " GET Hdr:HostDebug"
      ]
$get1
$get2
$get3

; +++++++++++++++++++ to load new templates and messages ++++++++++++++++++++++

 [ :LNOT: :DEF: standalone
        GBLL    standalone
standalone  SETL    {FALSE}
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                GBLL    Host_Debug
Host_Debug      SETL    {TRUE}

        MACRO
$Lab    DebugIt $Cond
        GBLL    debug$Lab
debug$Lab       SETL    debug :LAND: $Cond
        MEND

task    DebugIt {FALSE}
xx      DebugIt {FALSE}
fo      DebugIt {FALSE}
bkp     DebugIt {FALSE}
fom     DebugIt {FALSE}
id      DebugIt {FALSE}
ag      DebugIt {FALSE}

        GBLL hostvdu
hostvdu SETL {TRUE}

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Register names
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; sp            RN      r13             ; FD stack
; wp            RN      r12

scy             RN      r11
scx             RN      r10
y1              RN      r9
x1              RN      r8
y0              RN      r7
x0              RN      r6
cy1             RN      r5              ; Order important for LDMIA
cx1             RN      r4
cy0             RN      r3
cx0             RN      r2

; r0,r1 not named

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Macro definitions
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        MACRO
        max     $a, $b
        CMP     $a, $b
        MOVLT   $a, $b
        MEND

        MACRO
        min     $a, $b
        CMP     $a, $b
        MOVGT   $a, $b
        MEND

        MACRO
$label  FixDCB  $n, $string
        ASSERT  ((:LEN:"$string")<$n)
$label  DCB     "$string"
        LCLA    cnt
cnt     SETA    $n-:LEN:"$string"
        WHILE   cnt>0
        DCB     0
cnt     SETA    cnt-1
        WEND
        MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Constants
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

TAB     *       9
LF      *       10
CR      *       13
space   *       32
delete  *       127

bignum          *       &0FFFFFFF

initbrx         *       100
initbry         *       1024-80

brxoffset       *       64
bryoffset       *       64

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Constant to tick Share entry
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

shareoptions_share     *    1:SHL:0      ; for sparrow

 [ :LNOT: SDFS
 [ SCSI
; +++++++++++ SCSIFiler CMOS

SCSI_CMOS_Byte  *       &D0
 |
; +++++++++++ ADFSfiler CMOS

ADFS_CMOS_bits  *       &6B              ; for sparrow
 ]
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Data structure offsets
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; format of icon description blocks

                ^       -1
icb_validation  #       1               ; "S" for validation string
icb_drivetype   #       12              ; first byte is "h" or "f"
icb_drivenumber #       3               ; ":n",0

; format of disc name blocks

                ^       0
drv_number      #       3               ; ":n",0
drv_namelen     #       1               ; length of ":discname"
drv_iconblock   #       4
drv_name        #       24              ; ":discname",0
drv_size        #       0
drv_shift       *       5
        ASSERT  drv_size = (1 :SHL: drv_shift)
        ASSERT  (drv_iconblock :AND: 3) = 0

len_colon       *       0               ; don't include ":" in discname
len_mediaprefix *       :LEN:"$FSTitle::"-len_colon

 [ HotPlug
; format of drive added/removed queue block
                ^       0
darq_next       #       4               ; pointer to next block in RMA
darq_number     #       1               ; drive number
darq_added      #       1               ; nonzero for drive added, zero for drive removed
                #       2
darq_size       *       :INDEX: @@
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Workspace allocation
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                ^       0, wp
mytaskhandle    #       4               ; id so we can kill ourselves
FilerHandle     #       4               ; id so we can contact Filer
privateword     #       4
wimpversion     #       4               ; version number of Wimp
        [ givehelp
messagedata     #       4               ; points to fdesc block (if allocated)
        ]
backup_block    #       4               ; Address of any active backup block

mousedata       #       0
mousex          #       4
mousey          #       4
buttonstate     #       4
windowhandle    #       4
iconhandle      #       4

menuhandle      #       4
menudir         #       4
menufileblock   #       4
menufilename    #       4

share_option    #       4                ; options for share menu and submenu

windowx         #       4
windowy         #       4

relmousex       #       4
relmousey       #       4

sectorop        #       4                ; flag indicating whether ADFS can do sector ops

                AlignSpace
ram_menustart   #       0
m_floppydisc    #       m_headersize + mi_size*7
m_backup        #       m_headersize + mi_size*4
m_namedisc      #       m_headersize + mi_size*1
m_sharedisc     #       m_headersize + mi_size*3      ; for sparrow
ram_menuend     #       0

mb_namedisc     #       11               ; 10 bytes text + 1 byte terminator
                #       1                ; align

mb_tempdisc     #       12               ; (for Sparrow) stores discname for ShareD_CreateShare

nfloppies       #       4
oldescape       #       4

ndrives         *       8                ; allow for drives 0..7
iconbaricons    #       ndrives*4        ; associate icon handle with index
discnames       #       ndrives*drv_size ; associate index with drive spec.

matchedindex    #       4                ; index of last icon matched

; OSS These hold the "Current format" and "Other formats" strings in the
; Messages file, and hence impose limits of 31 characters. I have thus
; added an appropriate comment to the Messages file
CurrentFormatTextLength *       32
CurrentFormatText       #       CurrentFormatTextLength
OtherFormatsTextLength  *       32
OtherFormatsText        #       OtherFormatsTextLength
OtherFormatsMenu        #       4

; OSS Pointer to entire indirected data for current format window, allocated
; as a seperate RMA block.
CurrentFormatBufferInd          #       4
CurrentFormatBufferAddress      #       4   ; Passed to Service_IdentifyDisc
CurrentFormatIdentifyLength     #       4   ; OSS Length of BufferAddress
CurrentFormat_handle            #       4   ; Window handle

; OSS Pointers to tables of data for format menus, allocated in the RMA.
; This is in fact one RMA block (NativeTabePtr) and OthersTablePtr points
; into the middle of it.
NativeTablePtr                  #       4
OthersTablePtr                  #       4

FormatState             #       4
FormatList              #       4
FormatWindows           #       4
FormatMenu              #       4
  [ StrongARM
SAdummy                 #       16     ;dynamic SWI code no longer used
  |
SWICode                 #       16
  ]
 [ HotPlug
darq                    #       4      ; drive added/removed queue
menuopen                #       4      ; nonzero => our menu is open
backupmenudrivenumbers  #       ((?m_backup)-m_headersize)/mi_size
        AlignSpace
 ]
DiscRecord              #       &100

                AlignSpace 64

dirnamebuffer   #       &100

filenamebuffer  #       &100

userdata_size   *       &200
userdata        #       userdata_size

stackbot        #       &200

stacktop        #       0


ADFSFiler_WorkspaceSize *  :INDEX: @@

 ! 0, "$FSTitle.Filer workspace is ":CC:(:STR:(:INDEX:@@)):CC:" bytes"


driveno *       m_floppydisc + m_title + :LEN:"$FSTitle:"


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Module header
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ASSERT (.=Module_BaseAddr)

        DCD     ADFSFiler_Start        -Module_BaseAddr
        DCD     ADFSFiler_Init         -Module_BaseAddr
        DCD     ADFSFiler_Die          -Module_BaseAddr
        DCD     ADFSFiler_Service      -Module_BaseAddr
        DCD     ADFSFiler_TitleString  -Module_BaseAddr
        DCD     ADFSFiler_HelpString   -Module_BaseAddr
        DCD     ADFSFiler_CommandTable -Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0
 [ International_Help <> 0 :LAND: tokenhelp
        DCD     str_messagefile        -Module_BaseAddr
 |
        DCD     0
 ]
        DCD     ADFSFiler_ModuleFlags  -Module_BaseAddr

 [ debug
        InsertNDRDebugRoutines
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Initialise the various aliases used for formatting etc.

                ^       0
stk_buffer1     #       &40
stk_buffer2     #       &40
stk_total       #       0

ADFSFiler_Init  Entry "r1-r5"

; initialise ADFSFiler$Path if not already done

      [ standalone
        ADRL    R0,ResourceFSFiles
        SWI     XResourceFS_RegisterFiles
        EXIT    VS
      ]

        ADR     R0, Path
        MOV     R2, #-1
        MOV     R3, #0
        MOV     R4, #VarType_Expanded
        SWI     XOS_ReadVarVal          ; returns R2=0 if doesn't exist
        CMP     R2, #0                  ; clears V as well!


        ADREQ   R0, Path
        ADREQ   R1, PathDefault
        MOVEQ   R2, #?PathDefault
        MOVEQ   R3, #0
        MOVEQ   R4, #VarType_String
        SWIEQ   XOS_SetVarVal

        EXIT

Path            DCB     "$FSTitle.Filer$$Path"
                DCB     0
PathDefault     DCB     "Resources:$$.Resources.$FSTitle.Filer."
                DCB     0
                ALIGN

      [ standalone
ResourceFSFiles
      [ SDFS
        ResourceFile    $MergedMsgs,            Resources.SDFSFiler.Messages
        ResourceFile    Resources.SDFS.Sprites, Resources.SDFSFiler.Sprites
        ResourceFile    LocalRes:Templates,     Resources.SDFSFiler.Templates
      |
      [ SCSI
        ResourceFile    $MergedMsgs,        Resources.SCSIFiler.Messages
        ResourceFile    Resources.Zip,      Resources.SCSIFiler.Sprites
        ResourceFile    Resources.Zip22,    Resources.SCSIFiler.Sprites22
        ResourceFile    Resources.Zip11,    Resources.SCSIFiler.Sprites11
      |
        ResourceFile    $MergedMsgs,        Resources.ADFSFiler.Messages
        ResourceFile    LocalRes:Templates, Resources.ADFSFiler.Templates
      ]
      ]
        DCD 0
      ]
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ADFSFiler_HelpString
      [ SCSI
Module_Version SETA Module_Version + 112 - 94
      ]
        DCB     "$FSTitle.Filer"
        DCB     TAB
        GBLA    Module_VersionUnits
        GBLA    Module_VersionTenths
Module_VersionTenths SETA Module_Version/10
Module_Version SETA Module_Version - Module_VersionTenths*10
Module_VersionUnits SETA Module_VersionTenths/10
Module_VersionTenths SETA Module_VersionTenths - Module_VersionUnits*10
        DCB     48+$Module_VersionUnits, ".", 48+$Module_VersionTenths, 48+$Module_Version
        DCB     " ($Module_Date)", 0

 [ International_Help = 0 :LOR: :LNOT: tokenhelp
Desktop_$FSTitle.Filer_Help
        DCB   "The $FSTitle.Filer provides the $FSTitle icons on the icon bar, and "
        DCB   "uses the Filer to display $FSTitle directories.",13,10
        DCB   "Do not use *Desktop_$FSTitle.Filer, use *Desktop instead.",0

Desktop_$FSTitle.Filer_Syntax  DCB   "Syntax: *Desktop_"       ; drop through!
 |
 [ SCSI :LOR: SDFS
Desktop_$FSTitle.Filer_Help          DCB     "HSFLDSK", 0
Desktop_$FSTitle.Filer_Syntax        DCB     "SSFLDSK", 0
 |
Desktop_$FSTitle.Filer_Help          DCB     "HAFLDSK", 0
Desktop_$FSTitle.Filer_Syntax        DCB     "SAFLDSK", 0
 ]
 ]

ADFSFiler_TitleString     DCB   "$FSTitle.Filer", 0
                          ALIGN

ADFSFiler_CommandTable      ; Name     Max min

ADFSFiler_StarCommand
 [ tokenhelp
        Command Desktop_$FSTitle.Filer,     3, 0, International_Help
 |
        Command Desktop_$FSTitle.Filer,     3, 0, 0
 ]
        DCB     0                       ; End of table
        ALIGN

ADFSFiler_ModuleFlags DCD ModuleFlag_32bit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Had *command to enter ADFSFiler, so start up via module handler

Desktop_$FSTitle.Filer_Code Entry

        LDRB    r14,[r0]
       [ debug
        DREG    r14,"char "
       ]
        CMP     r14,#32
        TEQGE   r14,r14
        MOVEQ   r2,r0
        BEQ     %FT00

        LDR     r14, [r12]
        CMP     r14, #0
        BLE     %FT01

        LDR     r14, [r14, #:INDEX:mytaskhandle]
        CMP     r14, #0
        MOV     r2,r0
00
        MOVEQ   r0, #ModHandReason_Enter
        ADREQ   r1, ADFSFiler_TitleString
        SWIEQ   XOS_Module
01
        BL      MkCantStartError
        EXIT

MkCantStartError
        MOV     r8, lr
        ADR     r0, ErrorBlock_CantStartADFSFiler
        MOV     r1, #0
        MOV     r2, #0
        ADR     r4, ADFSFiler_TitleString
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        MOV     pc, r8

ErrorBlock_CantStartADFSFiler
        DCD     0
        DCB     "UseDesk", 0
        ALIGN


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Table of service calls we want

        ASSERT  Service_StartFiler > Service_Reset
        ASSERT  Service_StartedFiler > Service_StartFiler
        ASSERT  Service_FilerDying > Service_StartedFiler
        ASSERT  Service_MessageFileClosed > Service_FilerDying
        ASSERT  Service_ResourceFSStarting > Service_MessageFileClosed

ServiceTable
        DCD     0
        DCD     ServiceUrsula - Module_BaseAddr
        DCD     Service_Reset
        DCD     Service_StartFiler
        DCD     Service_StartedFiler
        DCD     Service_FilerDying
        DCD     Service_MessageFileClosed
      [ standalone
        DCD     Service_ResourceFSStarting
      ]
        DCD     0
        DCD     ServiceTable - Module_BaseAddr


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ADFSFiler_Service ROUT

        MOV     r0, r0                  ; Indicates there is a service call table

        ; Fast rejection code
        TEQ     r1, #Service_Reset
        TEQNE   r1, #Service_StartFiler
        TEQNE   r1, #Service_StartedFiler
        TEQNE   r1, #Service_FilerDying
        TEQNE   r1, #Service_MessageFileClosed
      [ standalone
        TEQNE   r1, #Service_ResourceFSStarting
      ]
        MOVNE   pc, lr

ServiceUrsula

        TEQ     r1, #Service_Reset
        BEQ     ADFSFiler_Service_Reset

        TEQ     r1, #Service_MessageFileClosed
        BEQ     ADFSFiler_Service_MessageFileClosed

        TEQ     r1, #Service_FilerDying
        BEQ     ADFSFiler_Service_FilerDying

        TEQ     r1, #Service_StartFiler
        BEQ     ADFSFiler_Service_StartFiler

      [ standalone
        TEQ     r1, #Service_ResourceFSStarting
        BNE     %FT10
        Push    "r0-r3,lr"
        ADRL    r0, ResourceFSFiles
        MOV     lr, pc
        MOV     pc, r2
        Pull    "r0-r3,pc"
10
      ]

        TEQ     r1, #Service_StartedFiler
        MOVNE   pc, lr

ADFSFiler_Service_StartedFiler Entry

        LDR     r14, [r12]              ; cancel 'don't start' flag
        CMP     r14, #0
        MOVLT   r14, #0
        STRLT   r14, [r12]

        EXIT

ADFSFiler_Service_StartFiler Entry "r2,r3,r6"

        LDR     r2, [r12]
        CMP     r2, #0
        EXIT    NE                      ; don't claim service unless = 0

        MOV     r6, r0                  ; Filer task handle
        MOV     r0, #ModHandReason_Claim
        LDR     r3, =ADFSFiler_WorkspaceSize
        SWI     XOS_Module
        MOVVS   r2, #-1                 ; avoid looping
        STR     r2, [r12]
      [ debug
        DREG    r12
      ]

        MOVVC   r0, #0
      [ givehelp
        STRVC   r0, [r2, #:INDEX:messagedata]
      ]
        STRVC   r0, [r2, #:INDEX:FormatList]
        STRVC   r0, [r2, #:INDEX:FormatState]
        STRVC   r0, [r2, #:INDEX:FormatWindows]
        STRVC   r0, [r2, #:INDEX:mytaskhandle]
        STRVC   r12, [r2, #:INDEX:privateword]
        STRVC   r6, [r2, #:INDEX:FilerHandle]

; OSS A few more blocks need zeroing.
        STRVC   r0, [r2, #:INDEX:CurrentFormatBufferInd]
        STRVC   r0, [r2, #:INDEX:NativeTablePtr]
        STRVC   r0, [r2, #:INDEX:OthersTablePtr]
        STRVC   r0, [r2, #:INDEX:FormatMenu]
        STRVC   r0, [r2, #:INDEX:backup_block]

      [ HotPlug
        STRVC   r0, [r2, #:INDEX:darq]
        STRVC   r0, [r2, #:INDEX:menuopen]
      ]

        MOV     r0,#UpCallV
        ADRL    R1,UpcallHandler
        SWI     XOS_Claim

        ADRVCL  r0, ADFSFiler_StarCommand
        MOVVC   r1, #0                  ; Claim service

        EXIT

ADFSFiler_Service_MessageFileClosed Entry "r0,r1,r12"

        LDR     r12, [r12]              ; are we active?
        CMP     r12, #0
        EXIT    LE

        LDRB    r1, driveno+1           ; grab the drive number
        BL      CopyMenus               ; re-open message file etc.
        STRB    r1, driveno+1           ; and put it back in

        EXIT

ADFSFiler_Service_Reset Entry "r0-r11"

        LDR     r2, [r12]               ; cancel 'don't start' flag
        CMP     r2, #0
        MOVLT   r2, #0
        STRLT   r2, [r12]

        MOVGT   wp, r2
        MOVGT   r0, #0                  ; Wimp has already gone bye-bye
        STRGT   r0, mytaskhandle
        BLGT    freeworkspace

        EXIT                            ; Sorry, but no can do errors here

; ******************************************************************************

ADFSFiler_Die Entry "r0-r11"

      [ standalone
        ADRL    r0, ResourceFSFiles
        SWI     XResourceFS_DeregisterFiles
      ]
        B       %FT10

ADFSFiler_Service_FilerDying ALTENTRY
10

        LDR     wp, [r12]

        MOV     r0,#UpCallV
        ADRL    R1,UpcallHandler
        MOV     R2,R12
        SWI     XOS_Release

        BL      freeworkspace

        CLRV                            ; Sorry, but no can do errors here
        EXIT

; ******************************************************************************

        ALIGN
w_format        DCB     "Format",0
                DCD     0,0,0
        ALIGN
w_currentformat DCB     "Current",0
                DCD     0,0,0
        ALIGN

; ******************************************************************************

; Corrupts r0-r11

; OSS r10 is our LR, and r11 is used by the backup task closedown for its LR.

freeworkspace ROUT
        CMP     wp, #0                  ; clears V
        MOVLE   pc, lr

        MOV     r10, lr                 ; can't use stack on exit if USR mode

        LDR     r8, backup_block
        TEQ     r8, #0
        BLNE    bkp_task_closedown      ; Close down the backup task.

        LDR     r0, mytaskhandle
        CMP     r0, #0
        LDRGT   r1, taskidentifier
        SWIGT   XWimp_CloseDown         ; ignore errors from this

; OSS Need to free the format list (lists all formats available)
        BL      FreeFormatList

      [ givehelp
        BL      deallocatemessagedata   ; well actually we can until we free
      ]                                 ; the workspace block!

; OSS Need to free up the list of active format/verify windows.
        MOV     r0, #ModHandReason_Free
        LDR     R4,FormatWindows
01
        MOVS    R2,R4
        BEQ     %FT02
        LDR     R4,[R4]                 ; Next block in chain.
        SWI     XOS_Module              ; Free block.
        B       %BT01
02

; OSS Free the buffer for the "current format" window indirected data.
        LDR     r2, CurrentFormatBufferInd
        SWI     XOS_Module              ; ignore errors

        MOV     r2, r12
        LDR     r12, privateword
        MOV     r14, #0                 ; reset flag word anyway
        STR     r14, [r12]
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module

        MOV     pc, r10

taskidentifier
        DCB     "TASK"                  ; Picked up as a word
        ALIGN

      [ SCSI :LOR: SDFS
iconspritescmd
        DCB     "IconSprites $FSTitle.Filer:Sprites",0
        ALIGN
      ]

MessagesList    DCD     Message_HelpRequest
                DCD     Message_MenuWarning
      [ DragsToIconBar
                DCD     Message_DataSave
                DCD     Message_DataLoad
      ]
      [ HotPlug
                DCD     Message_MenusDeleted
      ]
                DCD     0

        LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


CloseDownAndExit ROUT

        BL      freeworkspace
        SWI     OS_Exit

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; OSS New function to copy template name onto the stack and then call
; Wimp_LoadTemplate since the wimp may over-write the name. We were
; lucky to get away with this previously.

; In    r1 -> user block to put template
;       r2 -> core to put indirected icons for template
;       r3 -> end of this core
;       r4 -> font reference array
;       r5 -> name of relevant entry
;       r6 = position to search from

load_template Entry , 16                ; 16 bytes of stack for name
        MOV     lr, sp
        Push    "r1, r2"
        MOV     r1, lr
        MOV     r2, r5
        BL      strcpy
        MOV     r5, r1                  ; And use this name instead
        Pull    "r1, r2"
        SWI     XWimp_LoadTemplate
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;                   ADFSFiler application entry point
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ErrorAbort
        MOV     r1, #2_010              ; 'Cancel' button
        BL      ReportError             ; stack is still valid here

Abort
        BL      freeworkspace           ; exits with r12 --> private word
        MOV     r0, #-1
        STR     r0, [r12]               ; marked so doesn't loop

        SWI     OS_Exit

UpcallHandler   ROUT                    ; Pause all format windows if disc might have changed.

        TEQ     r0,#UpCall_MediaSearchEnd
      [ HotPlug
        TEQNE   r0,#UpCall_DriveAdded
        TEQNE   r0,#UpCall_DriveRemoved
        MOVNE   PC,LR

        TEQ     r0,#UpCall_MediaSearchEnd
        BNE     DriveAddedRemoved
      |
        MOVNE   PC,LR
      ]

        Push    "r0-r4,LR"

        LDR     r0,FormatWindows
01
        TEQ     r0,#0
        Pull    "r0-r4,PC",EQ

        LDR     r1,[r0,#fw_state]
        TEQ     r1,#FormatState_Paused
        TEQNE   r1,#FormatState_OK
        TEQNE   r1,#FormatState_SetPause
        STRNE   r1,[r0,#fw_savedstate]
        MOVNE   r1,#FormatState_SetPause
        STRNE   r1,[r0,#fw_state]

        LDR     r0,[r0,#fw_next]
        B       %BT01

 [ HotPlug
DriveAddedRemoved
        Push    "r0-r3,LR"
        ; Check it's one of ours
        LDRB    r0, [r1, #3]!
        LDRB    r2, [r1, #-1]!
        BIC     r0, r0, #&20
        BIC     r2, r2, #&20
        ORR     r0, r2, r0, LSL #8
        LDRB    r2, [r1, #-1]!
        BIC     r2, r2, #&20
        ORR     r0, r2, r0, LSL #8
        LDRB    r2, [r1, #-1]!
        BIC     r2, r2, #&20
        ORR     r0, r2, r0, LSL #8
        LDR     r2, adfscolon
        TEQ     r0, r2
        LDREQB  r0, [r1, #4]!
        TEQEQ   r0, #':'
        LDREQB  r0, [r1, #1]!
        TEQEQ   r0, #':'
        Pull    "r0-r3,PC", NE
        LDRB    r1, [r1, #1]
        SUB     r1, r1, #'0'
        CMP     r1, #ndrives
        Pull    "r0-r3,PC",CS
        ; Claim new block
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #darq_size
        SWI     XOS_Module
        Pull    "r0-r3,PC", VS
        ; Add to end of list to keep events in correct order
        ADR     r0, darq - darq_next
01      LDR     r3, [r0, #darq_next]
        TEQ     r3, #0
        MOVNE   r0, r3
        BNE     %BT01
        STR     r3, [r2, #darq_next]
        STR     r2, [r0, #darq_next]
        Pull    "r0"
        TEQ     r0, #UpCall_DriveAdded
        ORREQ   r1, r1, #&100
        STR     r1, [r2, #darq_number]
        Pull    "r1-r3,PC"
 ]

ADFSFiler_Start ROUT

        LDR     wp, [r12]

        CMP     wp, #0
        BLLE    MkCantStartError
        SWIVS   OS_GenerateError

        ADRL    sp, userdata+&100
        SWI     XOS_GetEnv

      [ debug
        DLINE   "Desktop_ADFSFiler"
        DSTRING r0,"Args "
      ]

        ADD     r1,r0,#9
        ADRL    r0,ADFSBackup_Args
        ADR     r2,userdata
        MOV     r3,#256
        SWI     OS_ReadArgs
       [ debug
        BVC     %FT91
        ADD     r14,r0,#4
        DSTRING r14,"ERROR: "
91
       ]
        LDR     r14,[r2]
       [ debug
        DREG    r14,"Backup flag "
       ]
        TEQ     r14,#0
        BNE     ADFSBackup_Code

        ADRL    sp, stacktop            ; Stack is now valid

        LDR     r0, mytaskhandle        ; close any previous incarnation
        CMP     r0, #0
        LDRGT   r1, taskidentifier
        SWIGT   XWimp_CloseDown         ; ignore errors from this

        MOV     r0, #300                ; We know about wimp 3.00 and have a messages list.
        LDR     r1, taskidentifier
        BL      MkBannerIn_userdata
        ADRVC   r3, MessagesList
        SWIVC   XWimp_Initialise
        STRVC   r0, wimpversion
        STRVC   r1, mytaskhandle

        BVS     ErrorAbort

      [ SCSI :LOR: SDFS
        ADR     R0, iconspritescmd      ; wimpinitialised,so will add my sprites
        SWI     XOS_CLI
      ]

        ADR     R1,iconbaricons         ; initialise all icon handles to -1
        MOV     R2,#ndrives
        MOV     R14,#-1
01      STR     R14,[R1],#4             ; this helps with AddToIconBar,
        SUBS    R2,R2,#1                ; in that it can replace icons too
        BNE     %BT01

        BLVC    SetUpIconBar
        BLVC    CopyMenus               ; copy menus into ram
        BVS     ErrorAbort              ; frees workspace but marks it invalid

      [ :LNOT: HotPlug
        LDR     R14,iconbaricons        ; close down if no drives
        CMP     R14,#-1
        BEQ     Abort
      ]

      [ SDFS
        ADRL    R1,str_templatefile_sdfs
        SWI     XWimp_OpenTemplate
      |
      [ SCSI
        ; ADFSFiler may not be present on all systems - so check for a copy of the templates in SCSIFiler's resources before falling back on the ADFSFiler copy that's traditionally used
        ADRL    R1,str_templatefile_scsi
        SWI     XWimp_OpenTemplate
        ADRVSL  R1,str_templatefile
        SWIVS   XWimp_OpenTemplate
      |
        ADRL    R1,str_templatefile
        SWI     XWimp_OpenTemplate
      ]
      ]
        BVS     ErrorAbort

; OSS Ask the Wimp how much memory we need for this window.
        MOV     r1,#-1
        MOV     r4,#-1
        ADR     r5,w_currentformat
        MOV     r6,#0
        BL      load_template           ; get size required for template
        BVS     TemplateErrorAbort

; OSS Check that the userdata is big enough for the window definition.
        MOV     r0, #?userdata
        CMP     r0, r1
        BLO     user_data_too_small_error

; OSS Claim memory for the inderected data.
        MOV     r0,#ModHandReason_Claim
        MOV     r3,r2
        SWI     XOS_Module
        BVS     TemplateErrorAbort
        STR     r2,CurrentFormatBufferInd

; OSS Now load the template and create the window - the main window buffer
; is in userdata as it can be thrown away as soon as the window has been
; created.
        ADR     r1,userdata
        ADD     r3,r2,r3                ; Add size to pointer to give limit
        MOV     r4,#-1
        ADR     r5,w_currentformat
        MOV     r6,#0
        BL      load_template
        SWIVC   XWimp_CreateWindow
        STRVC   r0,CurrentFormat_handle
        BVS     TemplateErrorAbort

        SWI     XWimp_CloseTemplate
        BVS     ErrorAbort

        ADR     r1,userdata
        LDR     r0,CurrentFormat_handle
        STR     r0,[r1]
        MOV     r0,#0
        STR     r0,[r1,#4]
        SWI     XWimp_GetIconState
        BVS     ErrorAbort
        LDR     r0,[r1,#28]
        STR     r0,CurrentFormatBufferAddress
; OSS Remember actual real length of buffer too.
        LDR     r0,[r1,#36]
        STR     r0,CurrentFormatIdentifyLength

        B       %FT01

ErrorBlock_UserDataTooSmall
        DCD     0
        DCB     "UsrData",0
        ALIGN

user_data_too_small_error
        ADR     r0, ErrorBlock_UserDataTooSmall
        BL      lookuperror
; *** Drop through ***

TemplateErrorAbort
        Push    "r0"
        SWI     XWimp_CloseTemplate
        Pull    "r0"
        SETV
        B       ErrorAbort
01
; .............................................................................
; The main polling loop!

repollwimp ROUT

 [ False
        MOVVS   r1, #2_011              ; 'Ok' and 'Cancel' buttons
 |
        MOVVS   r1, #2_001              ; 'Ok' button
 ]
        BLVS    ReportError
        BVS     ErrorAbort              ; error from reporterror!

      [ HotPlug
        LDR     r0, =pollword_enable + pointerchange_bits + null_bit
                                        ; enable pollwords, disable null events and pointer
        ADR     r3, darq
      |
        MOV     r0, #pointerchange_bits + null_bit
                                        ; disable null events and pointer
      ]
        ADR     r1, userdata            ; entering/leaving window events
        LDR     R14,FormatState
        CMP     R14,#0
        BICNE   r0,r0,#null_bit         ; We need null events if formatting
        SWI     XWimp_Poll
        BVS     repollwimp

; In    r1 -> wimp_eventstr

        ADR     lr, repollwimp
        CMP     r0, #Open_Window_Request
        BNE     %FT01
        SWI     XWimp_OpenWindow
        B       repollwimp
01
        CMP     r0,#Close_Window_Request
        BNE     %FT01
        SWI     XWimp_CloseWindow
        B       Format_CloseWindow
01
        CMP     r0,#Null_Reason
        BEQ     Format_NullEvent

        CMP     r0, #Mouse_Button_Change
        BEQ     event_mouse_click

        CMP     r0, #Key_Pressed
        BNE     %FT01
        LDR     r0, [r1, #24]
        SWI     XWimp_ProcessKey
        B       repollwimp
01
        CMP     r0, #Menu_Select
        BEQ     event_menu_select

        CMP     r0, #User_Message
        CMPNE   r0, #User_Message_Recorded
        BEQ     event_user_message

      [ HotPlug
        CMP     r0, #PollWord_NonZero
        BEQ     event_pollword_nonzero
      ]

        B       repollwimp

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_mouse_click
; =================

; In    r1 -> wimp_eventstr
;             [r1, #0]  pointer x
;             [r1, #4]          y
;             [r1, #8]  new button state
;             [r1, #12] window handle (-1 if background/icon bar)
;             [r1, #16] icon handle (-1 if none)

; Out   all regs may be corrupted - going back to PollWimp

event_mouse_click Entry

        LDMIA   r1, {r0-r4}             ; set mousex, mousey, buttonstate
        ADR     r14, mousedata          ; windowhandle, iconhandle
        STMIA   r14, {r0-r4}
 [ debug
 dreg r2, "mouse_click: buttonstate ",cc,Word
 dreg r0, ", x ",cc,Integer
 dreg r1, ", y ",cc,Integer
 dreg r3, ", window ",,Word
 ]

        CMP     r3, #iconbar_whandle    ; window handle of icon bar
        BNE     Format_MouseClick

        TST     r2, #button_left :OR: button_right ; select or adjust ?
        BNE     click_select_iconbar

        TST     r2, #button_middle      ; menu ?
        BNE     click_menu_iconbar

        EXIT

FilerOpenDirCommand     DCB     "%Filer_OpenDir ",0

; .............................................................................
; We get here if the user has double-clicked on a FS icon

; In    lr stacked, Proc_RegList = "lr" for EXIT
;       all regs trashable

click_select_iconbar ROUT

        BL      matchdriveicon          ; r1 -> drive spec, eg. :0
        EXIT    NE

        LDRB    r8, [r1, #1]

; check for busy doing format, backup etc
        SUB     r8, r8, #"0"
        LDR     lr, FormatState
        MOV     lr, lr, LSR r8
        TST     lr, #1
        EXIT    NE

        BLVC    GetMediaName            ; r1 -> media name
        EXIT    VS
        EXIT    NE                      ; user chickened out!

; Try to open dir using Filer

        Push    "r1"
        ADR     r1,userdata
        ADRL    r2,FilerOpenDirCommand
        BL      strcpy_advance
        Pull    "r2"
        BL      strcpy_advance
        ADR     r2, dotdollar
        BL      strcpy_advance
        ADR     r0,userdata
       [ debug
        DSTRING r0,"Command is "
       ]
        SWI     XOS_CLI
        EXIT

; In    r0 = message action
;       r1 -> media name

messagetoFiler Entry

        SUB     sp, sp, #256            ; make temp frame for message
        STR     r0, [sp, #message_action]
        MOV     r2, r1
        ADD     r1, sp, #message_data
        MOV     r14, #FSNumber
        STR     r14, [r1], #4
        MOV     r14, #0                 ; bitset = 0
        STR     r14, [r1], #4
        BL      strcpy_advance
        ADR     r2, dotdollar
        BL      strcpy_advance
        ADD     r1, r1, #1
        ADR     r2, dollar
        BL      strcpy_advance
        ADD     r1, r1, #1
        TST     r1, #3                  ; word aligned end ?
        ADDNE   r1, r1, #3              ; round up to word size
        BICNE   r1, r1, #3
        SUB     r1, r1, sp
        STR     r1, [sp, #message_size]
        MOV     r0, #User_Message_Recorded
        MOV     r1, sp
 [ debugtask
 ADD r14, r1, #message_data+8
 dstring r14, "passing dirname to Filer: "
 ]
        LDR     r2, FilerHandle        ; send it to the Filer
 [ debugtask
 BEQ %FT00
 dreg r2, "Filer task handle "
00
 ]
        SWI     XWimp_SendMessage
        ADD     sp, sp, #256            ; free temp frame
        EXIT


dotdollar       DCB     "."             ; share $ with ...
dollar          DCB     "$", 0          ; directory title
                ALIGN


; Offsets of fields in a message block

                ^       0
message_size    #       4
message_task    #       4               ; thandle of sender - filled in by Wimp
message_myref   #       4               ; filled in by Wimp
message_yourref #       4               ; filled in by Wimp
message_action  #       4
message_hdrsize *       @@
message_data    #       0               ; words of data to send

; .............................................................................
; In    lr stacked, Proc_RegList = "lr" for EXIT
;       all regs trashable

click_menu_iconbar ROUT

        BL      matchdriveicon                  ; r1 -> drive name (eg. :0)
        EXIT    NE

        LDRB    r8, [r1, #1]
        BL      update_menu_iconbar

        ADR     r1, m_floppydisc
        BL      CreateMenu
        EXIT

update_menu_iconbar
; In:   r8 = drive specifier eg. "0","4","5" etc.
        Entry

 [ debug
        DREG    r8,"drive specifier "
 ]

        TEQ     r8, #"4"
        TEQNE   r8, #"5"
        TEQNE   r8, #"6"
        TEQNE   r8, #"7"
        BEQ     %FT02                           ; Jump to 02 if winny

        ; Shade Share if not winnie
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+mi_iconflags

        ; Shade name disc, dismount, format, backup, verify and free if currently being formatted/verified
        SUB     r8,r8,#"0"
        LDR     r5,FormatState
        MOV     r6,#1
        MOV     r6,r6, ASL r8
        AND     r5,r5,r6
        CMP     r5,r6

        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_dismount+mi_iconflags
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_dismount+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_format+mi_iconflags
      [ SCSI :LOR: SDFS ; always shade the format item
        ORR     r14, r14, #is_shaded
      |
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
      ]
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_format+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_backup+mi_iconflags
      [ SCSI :LOR: SDFS ; always shade the backup item
        ORR     r14, r14, #is_shaded
      |
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
      ]
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_backup+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_free+mi_iconflags
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_free+mi_iconflags

        LDR     r14,share_option                ; for floppy: only winnies can be shared
        EOR     r14,r14,#shareoptions_share
        STR     r14,share_option
        LDR     r0,share_option
        TST     r0,#shareoptions_share
        LDR     r14,m_floppydisc+m_headersize+mi_size*mo_fl_share+0
        BIC     r14,r14,#1
        STR     r14,m_floppydisc+m_headersize+mi_size*mo_fl_share+0

        MOV     r5, #0                          ; don't read discname if floppy
        STRB    r5, mb_namedisc

        B       %FT03                           ; Jump over next chunk of code: it's only for winnies

02
        ADR     r1, driveno
        BL      GetMediaName                    ; r1 -> disc name (for m_namedisc)
        EXIT    VS
        EXIT    NE                              ; user chickened out!

        ADD     r2, r1, #:LEN:"$FSTitle::"
        ADR     r1, mb_namedisc
        BL      strcpy

        ; always shade format and backup for winnies
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_format+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_format+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_backup+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_backup+mi_iconflags

        SUB     r8,r8,#"0"
        LDR     r5,FormatState
        MOV     r6,#1
        MOV     r6,r6, ASL r8
        AND     r5,r5,r6
        CMP     r5,r6

        ; Shade verify,share,name disc,free,dismount if currently being verified
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_dismount+mi_iconflags
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_dismount+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+mi_iconflags
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_free+mi_iconflags
        ORREQ   r14, r14, #is_shaded
        BICNE   r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_free+mi_iconflags

        MOV     r0, #ModHandReason_LookupName    ; call OS_Module 18 to check if ShareD
        ADR     r1, Sharemodule                  ; module has been loaded; if not, then
        SWI     XOS_Module                       ; shade share entry in the ADFS menu

        LDRVS   r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+mi_iconflags
        ORRVS   r14, r14, #is_shaded
        STRVS   r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+mi_iconflags
        EXIT    VS
        
      [ SCSI
        TEQ     r8, #4                          ; Only have CMOS for SCSI drive 4
        BEQ     %FT03
      ]
      [ SCSI :LOR: SDFS
        ; Shade share
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+mi_iconflags
      ]
03
      [ :LNOT: SDFS
        BL      scan_CMOS                        ; check current state of CMOS
      ]
        EXIT

Sharemodule     DCB     "ShareFS"                ; module for sparrow share module
                DCB     0
                ALIGN

; Entry:  R4 = icon handle (in icon bar)
; Exit:   R1 --> drive spec for this drive
;         Static variables set up:
;               [matchedindex] = index of this icon
;               [driveno+1]b = drive number

matchdriveicon  Entry "r2"

        MOV     r2, #ndrives
        ADR     r1, iconbaricons
01
        LDR     r14, [r1], #4
        TEQ     R14, r4
        RSBEQ   r2, r2, #ndrives
        STREQ   r2, matchedindex            ; needed for namedisc

        ASSERT  drv_number = 0
        ADREQ   r1, discnames + drv_number
        ADDEQ   r1, r1, r2, LSL #drv_shift
        LDREQB  r14, [r1, #drv_number+1]    ; initialise drive number (for menu)
        STREQB  r14, driveno+1
        EXIT    EQ
        SUBS    r2, r2, #1
        BNE     %BT01
        ADR     r0, err_noicon
        BL      lookuperror
        EXIT

err_noicon
        DCD     0
        DCB     "UnkIcon",0
        ALIGN


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; A menu is created with the title above the x,y values you feed it, with the
; top left hand corner being at the x,y position

CreateMenu Entry "r2, r3"

        STR     r1, menuhandle
        LDR     r2, mousex
        SUB     r2, r2, #4*16
        MOV     r3, #96 + 7*44        ; bodge to clear icon bar
        SWI     XWimp_CreateMenu
      [ HotPlug
        STR     pc, menuopen
      ]
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

rom_menustart ; Note - must be defined in the same order as the ram menus

m_floppydisc    Menu    "T00"                   ; must be "ADFS::n"
mo_fl_namedisc  Item    "M01",m_namedisc
mo_fl_dismount  Item    "M02"
mo_fl_format    Item    "M03",,N                ; floppies only
mo_fl_backup    Item    "M04"                   ; floppies only
mo_fl_share     Item    "M05",m_sharedisc
mo_fl_verify    Item    "M06"
mo_fl_free      Item    "M07"

m_backup        Menu    "T04"                   ; this menu is optional
mo_fl_backup0   Item    "M14"                   ; (only supplied if >1 floppy)
mo_fl_backup1   Item    "M24"
mo_fl_backup2   Item    "M34"
mo_fl_backup3   Item    "M44"

m_namedisc      Menu    "T01"
mo_nm_newname   Item    "M11",,W

m_sharedisc     Menu    "T02"
mo_fl_notsh     Item    "M12"
mo_fl_prot      Item    "M22"
mo_fl_unprot    Item    "M32"

                DCB     0                       ; terminator

mv_namedisc     DCB     "A~$&%@@\\^:.#*""| ", 0  ; disallow funny chars

OtherFormatsToken       DCB     "OForms",0
CurrentFormatToken      DCB     "CFormat",0
UnknownFormatToken      DCB     "UKForm",0
UnformattedToken        DCB     "UFormed",0
EmptyToken              DCB     "NoDisc",0
FileCorePercentFSTitle  DCB     "FileCore%$FSTitle",0
TwoDiscsSameName        DCB     "2Same",0
                ALIGN

; .............................................................................

CopyMenus Entry "r1-r3"

        ADR     r1, mb_namedisc                 ; fill in writeable fields now
        ADR     r2, mv_namedisc
        MOV     r3, #?mb_namedisc
        ADR     r14, m_namedisc + m_headersize + 0*mi_size + mi_icondata
        STMIA   r14, {r1-r3}

        BL      allocatemessagedata             ; if not already done

        LDRVC   r0, messagedata
        ADRVC   r1, rom_menustart
        ADRVC   r2, ram_menustart
        MOVVC   r3, #ram_menuend-ram_menustart
        SWIVC   XMessageTrans_MakeMenus
        EXIT    VS

        MOV     r0, #(?mb_namedisc-1)*16+12     ; modify menu width for namedisc
        LDR     r14, m_namedisc + m_itemwidth
        CMP     r0, r14
        STRGT   r0, m_namedisc + m_itemwidth

      [ HotPlug
        LDR     r0, nfloppies                   ; counter
        CMP     r0, #1
        BLS     %FT09                           ; skip processing if 0 or 1 floppies
        Push    "r4,r6-r10"
        ADR     r1, m_backup + m_headersize     ; source item pointer
        MOV     r2, r1                          ; destination item pointer
        MOV     r3, #0                          ; drive number
        ADR     r4, backupmenudrivenumbers

01      ADR     r6, iconbaricons
        ADRL    r7, discnames + drv_number + 1
        MOV     r8, #ndrives
02      LDR     r14, [r6], #4
        CMP     r14, #-1
        LDRB    r14, [r7], #drv_size
        BEQ     %FT03                           ; skip missing icons
        SUB     r14, r14, #'0'
        TEQ     r14, r3                         ; found icon for this drive number?
        BEQ     %FT04
03      SUBS    r8, r8, #1
        BNE     %BT02                           ; try next icon
        ADD     r1, r1, #mi_size                ; not found, so skip this source item
        ADD     r3, r3, #1
        B       %BT01

        ASSERT  mi_size = 24
04      LDMIA   r1!, {r6-r10,r14}
        STMIA   r2!, {r6-r10,r14}
        STRB    r3, [r4], #1
        ADD     r3, r3, #1
        SUBS    r0, r0, #1
        BNE     %BT01                           ; look for other drives

        LDR     r14, [r2, #-mi_size + mi_itemflags]
        ORR     r14, r14, #mi_it_lastitem
        STR     r14, [r2, #-mi_size + mi_itemflags]

        Pull    "r4,r6-r10"
        CMP     pc, #0                          ; set HI condition for next bit
09
      |
        ADR     r1, m_backup + m_headersize + mi_itemflags
        LDR     r0, nfloppies
        SUBS    r0, r0, #1                      ; LT => no floppies, EQ => only 1
        ASSERT  mi_size = 24
        ADDGE   r0, r0, r0, LSL #1
        LDRGE   r14, [r1, r0, LSL #3]
        ORRGE   r14, r14, #mi_it_lastitem
        STRGE   r14, [r1, r0, LSL #3]
      ]

        ADRHI   r14, m_backup                   ; only have submenu if >1 drive
        STRHI   r14, m_floppydisc + m_headersize + mi_size*mo_fl_backup + mi_submenu

        ; Ensure submenu non-empty to get submenu arrow
        MOV     r14, #4
        STR     r14, m_floppydisc + m_headersize + mi_size*mo_fl_format + mi_submenu

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_menu_select
; =================

; In    r1 -> wimp_eventstr

; Out   all regs may be corrupted - going back to PollWimp

event_menu_select Entry

        MOV     r2, r1                  ; r2 -> menu selection list
        LDR     r1, menuhandle          ; r1 = menu handle
        BL      DecodeMenu
;
        ADRVC   r1,userdata             ; check for right-hand button
        SWIVC   XWimp_GetPointerInfo
        EXIT    VS

        LDR     R14,userdata+8          ; get button state
        TST     R14,#&01
      [ HotPlug
        MOVEQ   R14, #0
        STREQ   R14, menuopen
      ]
        EXIT    EQ

        LDRB    r8, driveno+1
        BL      update_menu_iconbar     ; update menu to gray out any items necessary
        LDR     R1, menuhandle
        SWI     XWimp_CreateMenu        ; here we go again!

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; In     r1 = menu handle
;        r2 -> list of selections

DecodeMenu Entry

decodelp
        Push    "r1,r2"
        MOV     r0, #OsByte_ReadCMOS
        MOV     r1, #FileSwitchCMOS
        SWI     XOS_Byte
        ANDVC   r3, r2, #InteractiveCopyCMOSBit         ; r3 = 0 if interactive, 4 if not
        MOVVS   r3, #0                                  ; default to interactive
        Pull    "r1,r2"
      [ debug
        dreg    r3,"Interactive flag = "
      ]

        LDR     r14, [r2], #4            ; r1 = selection no
        ADD     pc, pc, r14, LSL #2
        EXIT

        B       go_fl_namedisc
        B       go_fl_dismount
        B       go_fl_format
        B       go_fl_backup
        B       go_fl_share
        B       go_fl_verify
        B       go_fl_free

error_namedisc  DCD     1
                DCB     "TooShrt",0
                ALIGN

go_fl_namedisc
        LDR     r14, [r2], #4           ; must select submenu
        TEQ     r14, #0
        EXIT    NE

        LDRB    r14, mb_namedisc        ; check that new name is >= 2 chars
        CMP     r14, #32
        LDRHSB  r14, mb_namedisc+1
        CMPHS   r14, #32
        ADRLO   r0, error_namedisc
        BLLO    lookuperror
        EXIT    VS
        ADR     r1, driveno             ; re-read media name
        BL      GetMediaName_nochecks   ; can be duplicate
        EXIT    VS

        BL      checkambiguous
        EXIT    NE                      ; some other error

        LDRVC   r0, =Message_FilerCloseDir
        BLVC    messagetoFiler          ; only close if NOT ambiguous already
      ; CLRV

        ADRL    r3, namedisc
        BL      copycommand
        ADR     r2, mb_namedisc
        BL      strcpy
        ADR     r0, userdata
 [ debug
 dstring r0, "namedisc: "
 ]
        SWI     XOS_CLI
        EXIT    VS

; if this is a hard disc icon, change the name underneath it

        LDR     r4, matchedindex

        ADR     r1, discnames + drv_iconblock
        LDR     r1, [r1, r4, LSL #drv_shift]    ; r1 -> icon block
        LDRB    r14, [r1, #icb_drivetype]
        TEQ     r14, #"f"                       ; don't change floppy icon!
        BLNE    AddToIconBar                    ; replace with new icon

        ADRVC   r1, driveno             ; don't allow this to clash!
        BLVC    GetMediaName            ; delete old/new disc
        EXIT

go_fl_dismount
        ADR     r1, driveno             ; re-read media name
        BL      GetMediaName_nochecks   ; r1 -> "adfs::discname"
        BLVC    dismountit

; OSS Added code to tell ADFS to power-eject the disc.

        LDRVCB  r1, driveno+1
        SUBVC   r1, r1, #"0"
        MOVVC   r0, #MiscOp_Eject
        SWIVC   X$SWIPrefix._MiscOp

        EXIT

        LTORG

go_fl_format
        ; Find out which format (by menu entry) (in (r5,r6))
        LDR     r5, [r2]
        CMP     r5, #0
        LDRGE   r6, [r2, #4]
        MOVLT   r5, #1          ; Default is first native format.
        MOVLT   r6, #-1
      [ debugfom
        dreg    r5,"Format (Menu entry): "
        dreg    r6,"Submenu entry "
      ]

        LDR     R14,FormatState
        CMP     R14,#0
        Push    "PC",EQ
        BEQ     BuildFormatMenu
        MOV     r0,r0

        CMP     r5,#0
        Pull    "PC",EQ

        CMP     r6,#-1
        LDRNE   r14,OthersTablePtr
        MOVNE   r6,r6,ASL #2
        LDRNE   r5,[r14,r6]
        SUBEQ   r5,r5,#1
        LDREQ   r14,NativeTablePtr
        MOVEQ   r5,r5,ASL #2
        LDREQ   r5,[r14,r5]
        CMP     r5,#0
        Pull    "PC",EQ

        CMP     r3, #0                          ; check for interactive/non-interactive
        LDRNE   r4, [r5, #EnumFormats_Flags]    ; if non-interactive then ensure we have a format descriptor for *format
        TSTNE   r4, #EnumFormats_HasFormatParam
      [ debugfom
        dreg    r3,"Interactive flag = "
        dreg    r4,"EnumFormat_Flags = "
      ]
        BEQ     Format_GoFormat         ; Do interactive format

        ; Non-interactive *Format
        ADR     r3, format
        BL      copycommand

        LDR     r2, [r5, #EnumFormats_FormatParam]
        BL      strcpy_advance

        B       noninteractive_command

 [ HotPlug
                ALIGN   ; we need the next string to be word aligned
 ]
adfscolon       DCB     "$FSTitle:",0   ; no aliases any more !
namedisc        DCB     "Namedisc n ",0
dismount        DCB     "Dismount n ",0                         ; NB space still needed
format          DCB     "Format :n ",0
desk_backup     DCB     "Desktop_$FSTitle.Filer -Backup n ",0   ; NB ':' not accepted here
backup          DCB     "Backup n ",0                           ; NB ':' not accepted here
verify          DCB     "Verify :n ",0
desk_free       DCB     "ShowFree -FS $FSTitle n ",0            ; No : to allow showfree to work.
free            DCB     "Free n ",0                             ; NB ':' not accepted here
                ALIGN

go_fl_backup
        LDR     r4, [r2], #4            ; copy submenu index as copycommand craps on buffer
        MOV     r5, r3

        ADR     r1, driveno             ; stop ambiguous disc names
        BL      GetMediaName            ; name generated in [dirnamebuffer]
        EXIT    VS
        EXIT    NE

        Push    "r1"                    ; r1 -> disc name

        CMP     r5, #0
        BNE     %FT02
        ADR     r3, desk_backup
        BL      copycommand1
        B       %FT03
02
        ADR     r3, backup
        BL      copycommand
03
        CMP     r4, #0                  ; submenu => destination drive
      [ HotPlug
        ADRGE   r14, backupmenudrivenumbers
        LDRGEB  r3, [r14, r4]
        BGE     %FT01

        LDRB    r3, driveno+1           ; choose most appropriate drive
        SUB     r3, r3, #'0'
        LDR     r14, nfloppies
        CMP     r14, #1                 ; if 1 drive, it must be the same
        BLE     %FT01
        LDRB    r14, backupmenudrivenumbers+0
        TEQ     r3, r14                 ; otherwise choose another one
        LDREQB  r3, backupmenudrivenumbers+1
        MOVNE   r3, r14
01      ADD     r3, r3, #'0'
      |
        ADDGE   r3, r4, #"0"
        BGE     %FT01

        LDRB    r3, driveno+1           ; choose most appropriate drive
        LDR     r14, nfloppies
        CMP     r14, #1                 ; if 1 drive, it must be the same
        BLE     %FT01
        TEQ     r3, #"0"                ; otherwise choose another one
        MOVEQ   r3, #"1"
        MOVNE   r3, #"0"
01
      ]
        STRB    r3, [r1], #1
        MOV     r14, #0
        STRB    r14, [r1]

        CMP     r5, #0                  ; check for interactive/non-interactive
        Pull    "r1",NE
        BNE     noninteractive_command
        BL      interactive_command

        Pull    "r1"                    ; r1 -> source disc name
        BL      dismountit              ; dismount source disc

        EXIT

go_fl_verify
        CMP     r3, #0                  ; check for interactive/non-interactive
        BEQ     Format_GoVerify

        ADR     r1, driveno             ; stop ambiguous disc names
        BL      GetMediaName
        EXIT    VS
        EXIT    NE
        ADR     r3, verify
        BL      copycommand
        B       noninteractive_command

go_fl_free
        MOV     r4, r3
        ADR     r1, driveno             ; stop ambiguous disc names
        BL      GetMediaName
        EXIT    VS
        EXIT    NE
        CMP     r4, #0
        ADREQ   r3, desk_free
        ADRNE   r3, free
        BL      copycommand

        CMP     r4, #0                  ; check for interactive/non-interactive
        BNE     noninteractive_command
        BL      interactive_command
        EXIT

go_fl_share     ; Tick the entry
     [ :LNOT: SDFS
        LDR     r4, [r2], #4
        CMP     r4, #mo_fl_notsh             ; check if 'not shared' has being selected
        BEQ     unset_share
        CMP     r4, #mo_fl_prot              ; check if 'protected' has being selected
        BEQ     set_share_options_prot
        CMP     r4, #mo_fl_unprot            ; check if 'unprotected' has being selected
        BEQ     set_share_options_unprot
      ]
        EXIT

interactive_command Entry
        ADR     r0, userdata
      [ debug
        DSTRING r0,"Interactive command is : "
        DREG    r13,"r13 is "
      ]
        SWI     XWimp_StartTask                 ; needs a new domain
      [ debug
        DREG   r13,"New Task started"
      ]
        EXIT

noninteractive_command
        ADRL    r0, userdata+(?adfscolon)-1
        SWI     XWimp_CommandWindow
        EXIT    VS
        ADR     r0, userdata
      [ debug
        dstring r0, "Non-interactive command is : "
      ]
        SWI     XOS_CLI
        BVC     %FT01

        SWI     XOS_NewLine
        ADD     r0, r0,#4
        SWI     XOS_Write0
        SWI     XOS_NewLine
01
        MOV     r0, #0
        SWI     XWimp_CommandWindow
        EXIT

dismountit_byname       Entry "r1"

        ADRL    r3, dismount
        BL      copycommand
        SUB     r1, r1, #2              ; r1 -> original drive number
        LDR     r2, [sp]                ; r2 -> "adfs::discname"
        ADD     r2, r2, #:LEN:"$FSTitle::" ; r2 -> discname
        BL      strcpy
        ADR     r0, userdata
 [ debug
 dstring r0, "dismountit: "
 ]
        SWI     XOS_CLI
        EXIT

 [ :LNOT: SDFS

; set share options (protected/unprotected)

set_share_options_prot   ROUT

        ADR     r1, m_sharedisc
        BL      EncodeMenu

        MOV     r2,#mo_fl_prot
        BL      TickMenu
                                          ; tick share
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
        ORR     r14,r14,#mi_it_tick
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
                                          ; shade name_disc
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
                                          ; shade verify
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags

        ADRVC   r1,userdata               ; check for right-hand button
        SWIVC   XWimp_GetPointerInfo
        EXIT    VS

        LDR     R14,userdata+8            ; get button state
        TST     R14,#&01
        LDRNE   R1, menuhandle
        SWINE   XWimp_CreateMenu          ; here we go again!

        MOV     r0, #1                    ; r0 -> 1 = protected
        BL      SetShareD                 ; If ticked, then change type of sharing
        EXIT

set_share_options_unprot   ROUT
        ADR     r1, m_sharedisc
        BL      EncodeMenu

        MOV     r2,#mo_fl_unprot
        BL      TickMenu
                                          ; tick share
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
        ORR     r14,r14,#mi_it_tick
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
                                          ; shade name_disc
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
                                          ; shade verify
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags

        ADRVC   r1,userdata               ; check for right-hand button
        SWIVC   XWimp_GetPointerInfo
        EXIT    VS

        LDR     R14,userdata+8            ; get button state
        TST     R14,#&01
        LDRNE   R1, menuhandle
        SWINE   XWimp_CreateMenu          ; here we go again!

        MOV     r0, #0                    ; r0 -> 0 = unprotected
        BL      SetShareD                 ; If ticked, then change type of sharing
        EXIT

unset_share     ROUT                       ; First of all check if not shared is already ticked
        MOV     r2, #mo_fl_unprot
        ADR     r1, m_sharedisc
        ADD     r1, r1, #m_headersize + mi_itemflags
        ADD     r2, r2, r2, LSL #1
        LDR     r1, [r1, r2, LSL #3]
        CMP     r1, #mi_it_tick
        BEQ     %FT01

        ADR     r1, m_sharedisc
        BL      EncodeMenu

        MOV     r2,#mo_fl_notsh
        BL      TickMenu
                                          ; unshade name_disc
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
        BIC     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
                                          ; unshade verify
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
        BIC     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
                                          ; untick share
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
        BIC     r14, r14, #mi_it_tick
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0

        ADRVC   r1,userdata               ; check for right-hand button
        SWIVC   XWimp_GetPointerInfo
        EXIT    VS

        LDR     R14,userdata+8            ; get button state
        TST     R14,#&01
        LDRNE   R1, menuhandle
        SWINE   XWimp_CreateMenu          ; here we go again!

        BL      UnSetShareD               ; calls Shared_StopShare
01
        EXIT

; ShareD_CreateShare
; Calls Shared_CreateShare

SetShareD       Entry
        MOV     r10, r0
        ADR     r1, driveno
        BLVC    GetMediaName              ; r1 -> media name
        EXIT    VS
        EXIT    NE
        ADR     r1, dirnamebuffer
        MOV     r7, r1
        ADD     r2, r1, #:LEN:"$FSTitle::"
        ADR     r1, mb_namedisc           ; name of the disc
        BL      strcpy
        MOV     r1, r7
02
        LDRB    r6, [r1], #1
        TEQ     r6, #0
        BNE     %BT02

        SUB     r1, r1, #1
        ADR     r2, dotdollar1             ; add ".$/0" to path
        BL      strcpy_advance

        MOV     r2, r7                    ; r2 -> "adfs::mb_namedisc.$"
        ADR     r1, mb_namedisc           ; r1 -> "mb_namedisc"
        MOV     r0, r10                   ; type of sharing
        SWI     XShareD_CreateShare       ; calls shared_createshare
        BVC     %FT01

        MOV     r8,r0

        MOV     r1, #2_001                ; 'Ok' button
        BL      ReportError               ; error if shared_createshare fails
        BVS     ErrorAbort                ; error from reporterror!
                                          ; untick share
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
        BIC     r14,r14,#mi_it_tick
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
                                          ; tick not shared
        ADR     r1, m_sharedisc
        BL      EncodeMenu
        MOV     r2,#mo_fl_notsh
        BL      TickMenu

        LDR     R1, menuhandle
        SWI     XWimp_CreateMenu          ; here we go again!

        BL      UnSetShareD               ; calls Shared_StopShare
        MOV     r0,r8
        B       %FT98
01                                        ; check if unprotected option is ticked; if it is
        CMP     r10, #0
        BEQ     %FT99                     ; EQ -> protected unticked
        BL      WriteCMOSbitP             ; set P bit in CMOS -> 1
        B       %FT97
99
        BL      ClearCMOSbitP             ; set P bit in CMOS -> 0
97
        BL      WriteCMOSbitS             ; set S bit in CMOS -> 1
98
        EXIT

dotdollar1       DCB     "."             ; share $ with ...
dollar1          DCB     "$", 0          ; directory title
                ALIGN

; Calls ShareD_StopShare

UnSetShareD     Entry

        BIC     r0, r0, r0
        BIC     r1, r1, r1
        ADR     r1, mb_namedisc           ; r1 -> namedisc

        SWI     XShareD_StopShare         ; calls shared_stopshare

        BL      ClearCMOSbitS             ; set S bit in CMOS -> 0
        BL      ClearCMOSbitP             ; set P bit in CMOS -> 0

        EXIT



; Check which bits are to be updated in CMOS

WriteCMOSbitS   Entry                     ; write S bit in CMOS
        ADR     r1, driveno               ; load drive number
        LDRB    r14, [r1, #1]
        CMP     r14, #"4"
 [ SCSI
        EXIT    NE
        MOV     r3, #SCSIbitS
 |
        BNE     %FT01
        MOV     r3, #adfsCMOS_Sbit4       ; insert the mask in r3
        BL      WriteCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
01
        CMP     r14, #"5"
        BNE     %FT02
        MOV     r3, #adfsCMOS_Sbit5       ; insert the mask in r3
        BL      WriteCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
02
        CMP     r14, #"6"
        BNE     %FT03
        MOV     r3, #adfsCMOS_Sbit6       ; insert the mask in r3
        BL      WriteCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
03
        CMP     r14, #"7"
        BNE     %FT99
        MOV     r3, #adfsCMOS_Sbit7       ; insert the mask in r3
 ]
        BL      WriteCMOSbits             ; set S bit in CMOS -> 1
99
        EXIT

WriteCMOSbitP   Entry                     ; write P bit in CMOS
        ADR     r1, driveno               ; load drive number
        LDRB    r14, [r1, #1]
        CMP     r14, #"4"
 [ SCSI
        EXIT    NE
        MOV     r3, #SCSIbitP
 |
        BNE     %FT01
        MOV     r3, #adfsCMOS_Pbit4       ; insert the mask in r3
        BL      WriteCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
01
        CMP     r14, #"5"
        BNE     %FT02
        MOV     r3, #adfsCMOS_Pbit5       ; insert the mask in r3
        BL      WriteCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
02
        CMP     r14, #"6"
        BNE     %FT03
        MOV     r3, #adfsCMOS_Pbit6       ; insert the mask in r3
        BL      WriteCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
03
        CMP     r14, #"7"
        BNE     %FT99
        MOV     r3, #adfsCMOS_Pbit7       ; insert the mask in r3
 ]
        BL      WriteCMOSbits             ; set S bit in CMOS -> 1
99
        EXIT

ClearCMOSbitS   Entry                     ; clear S bit in CMOS
        ADR     r1, driveno               ; load drive number
        LDRB    r14, [r1, #1]
        CMP     r14, #"4"
 [ SCSI
        EXIT    NE
        MOV     r3, #SCSIbitS
 |
        BNE     %FT01
        MOV     r3, #adfsCMOS_Sbit4       ; insert the mask in r3
        BL      ClearCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
01
        CMP     r14, #"5"
        BNE     %FT02
        MOV     r3, #adfsCMOS_Sbit5       ; insert the mask in r3
        BL      ClearCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
02
        CMP     r14, #"6"
        BNE     %FT03
        MOV     r3, #adfsCMOS_Sbit6       ; insert the mask in r3
        BL      ClearCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
03
        CMP     r14, #"7"
        BNE     %FT99
        MOV     r3, #adfsCMOS_Sbit7       ; insert the mask in r3
 ]
        BL      ClearCMOSbits             ; set S bit in CMOS -> 1
99
        EXIT

ClearCMOSbitP   Entry                     ; clear P bit in CMOS
        ADR     r1, driveno               ; load drive number
        LDRB    r14, [r1, #1]
        CMP     r14, #"4"
 [ SCSI
        EXIT    NE
        MOV     r3, #SCSIbitP
 |
        BNE     %FT01
        MOV     r3, #adfsCMOS_Pbit4       ; insert the mask in r3
        BL      ClearCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
01
        CMP     r14, #"5"
        BNE     %FT02
        MOV     r3, #adfsCMOS_Pbit5       ; insert the mask in r3
        BL      ClearCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
02
        CMP     r14, #"6"
        BNE     %FT03
        MOV     r3, #adfsCMOS_Pbit6       ; insert the mask in r3
        BL      ClearCMOSbits             ; set S bit in CMOS -> 1
        B       %FT99
03
        CMP     r14, #"7"
        BNE     %FT99
        MOV     r3, #adfsCMOS_Pbit7       ; insert the mask in r3
 ]
        BL      ClearCMOSbits             ; set S bit in CMOS -> 1
99
        EXIT


; Scan the CMOS bits and update the menu flags however needed
scan_CMOS      Entry
        ADR     r1, driveno               ; load drive number
        LDRB    r8, [r1,#1]
        BIC     r9, r9, r9

        CMP     r8, #"4"
        BNE     %FT01
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
 [ SCSI
        MOV     r3, #SCSIbitS             ; load mask for share drive 4
        AND     r0, r2, r3                ; clear bit not needed
        CMP     r0, #SCSIbitS
 |
        MOV     r3, #adfsCMOS_Sbit4       ; load mask for share drive 4
        AND     r0, r2, r3                ; clear bit not needed
        CMP     r0, #adfsCMOS_Sbit4
 ]
        BNE     %FT04
        BL      tick_share                ; if equal tick share
        BL      shade_namedisc            ; shade namedisc
        BL      shade_verify              ; shade verify
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
 [ SCSI
        MOV     r3, #SCSIbitP             ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 4 is set
        CMP     r0, #SCSIbitP
 |
        MOV     r3, #adfsCMOS_Pbit4       ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 4 is set
        CMP     r0, #adfsCMOS_Pbit4
 ]
        BLEQ    tick_protected            ; if P bit is set then tick the entry in the menu
        BLNE    tick_unprotected          ; and set reg 0 to 1
        B       %FT05
01
 [ :LNOT: SCSI
        CMP     r8, #"5"
        BNE     %FT02
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
        MOV     r3, #adfsCMOS_Sbit5       ; load mask for share drive 5
        AND     r0, r2, r3                ; clear bit not needed
        CMP     r0, #adfsCMOS_Sbit5
        BNE     %FT04
        BL      tick_share                ; if equal tick share
        BL      shade_namedisc            ; shade namedisc
        BL      shade_verify              ; shade verify
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
        MOV     r3, #adfsCMOS_Pbit5       ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 5 is set
        CMP     r0, #adfsCMOS_Pbit5
        BLEQ    tick_protected            ; if P bit is set then tick the entry in the menu
        BLNE    tick_unprotected          ; and set reg 0 to 1
        B       %FT05
02
        CMP     r8, #"6"
        BNE     %FT03
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
        MOV     r3, #adfsCMOS_Sbit6       ; load mask for share drive 6
        AND     r0, r2, r3                ; clear bit not needed
        CMP     r0, #adfsCMOS_Sbit6
        BNE     %FT04
        BL      tick_share                ; if equal tick share
        BL      shade_namedisc            ; shade namedisc
        BL      shade_verify              ; shade verify
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
        MOV     r3, #adfsCMOS_Pbit6       ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 6 is set
        CMP     r0, #adfsCMOS_Pbit6
        BLEQ    tick_protected            ; if P bit is set then tick the entry in the menu
        BLNE    tick_unprotected          ; and set reg 0 to 1
        B       %FT05
03
        CMP     r8, #"7"
        BNE     %FT04
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
        MOV     r3, #adfsCMOS_Sbit7       ; load mask for share drive 7
        AND     r0, r2, r3                ; clear bit not needed
        CMP     r0, #adfsCMOS_Sbit7
        BNE     %FT04
        BL      tick_share                ; if equal tick share
        BL      shade_namedisc            ; shade namedisc
        BL      shade_verify              ; shade verify
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
        MOV     r3, #adfsCMOS_Pbit7       ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 7 is set
        CMP     r0, #adfsCMOS_Pbit7
        BLEQ    tick_protected            ; if P bit is set then tick the entry in the menu
        BLNE    tick_unprotected          ; and set reg 0 to 1
        B       %FT05
 ]
04
        BL      tick_notshared            ; if cmos is 0 then click not shared
        BL      untick_share
05
        EXIT

tick_share      Entry                     ; tick share option
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
        ORR     r14,r14,#mi_it_tick
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
        EXIT

untick_share    Entry                     ; untick share option
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
        BIC     r14,r14,#mi_it_tick
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_share+0
        EXIT

tick_protected  EntryS                    ; tick protected option
        ADR     r1, m_sharedisc
        BL      EncodeMenu
        MOV     r2, #mo_fl_prot
        BL      TickMenu
        EXITS

tick_notshared  EntryS                    ; tick not shared option
        ADR     r1, m_sharedisc
        BL      EncodeMenu
        MOV     r2, #mo_fl_notsh
        BL      TickMenu
        EXITS

tick_unprotected EntryS                   ; tick unprotected option
        ADR     r1, m_sharedisc
        BL      EncodeMenu
        MOV     r2, #mo_fl_unprot
        BL      TickMenu
        EXITS

shade_namedisc  Entry                     ; shade namedisc
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_namedisc+mi_iconflags
        EXIT

shade_verify  Entry                     ; shade verify
        LDR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
        ORR     r14, r14, #is_shaded
        STR     r14, m_floppydisc+m_headersize+mi_size*mo_fl_verify+mi_iconflags
        EXIT

; procedures to clear/read/write CMOS bits (byte &6B)

ReadCMOSbits    Entry                     ; Out: r2 -> content of location &6B (ADFS CMOS bits)
        MOV     r0, #OsByte_ReadCMOS
      [ SCSI
        MOV     r1, #SCSI_CMOS_Byte
      |
        MOV     r1, #ADFS_CMOS_bits
      ]
        SWI     XOS_Byte
        EXIT

WriteCMOSbits   EntryS                    ; r3 -> bit mask to write under
        BL      ReadCMOSbits              ; r2 -> current state of CMOS &6B
        ORR     r2, r2, r3                ; merge the bits
        MOV     r0, #OsByte_WriteCMOS
      [ SCSI
        MOV     r1, #SCSI_CMOS_Byte
      |
        MOV     r1, #ADFS_CMOS_bits       ; store the result
      ]
        SWI     XOS_Byte
        EXITS

ClearCMOSbits   EntryS                    ; r3 -> bit mask to write under
        BL      ReadCMOSbits              ; r2 -> current state of CMOS &6B
        EOR     r3, r3, #&FF              ; reverse mask
        AND     r2, r2, r3                ; clear the bit
        MOV     r0, #OsByte_WriteCMOS
      [ SCSI
        MOV     r1, #SCSI_CMOS_Byte
      |
        MOV     r1, #ADFS_CMOS_bits       ; store the result
      ]
        SWI     XOS_Byte
        EXITS


 [ SCSI
SCSIbitS         *   2_01000000           ; masks
SCSIbitP         *   2_10000000

 |
adfsCMOS_Sbit4   *   2_00000001           ; masks to update CMOS
adfsCMOS_Pbit4   *   2_00000010
adfsCMOS_Sbit5   *   2_00000100
adfsCMOS_Pbit5   *   2_00001000
adfsCMOS_Sbit6   *   2_00010000
adfsCMOS_Pbit6   *   2_00100000
adfsCMOS_Sbit7   *   2_01000000
adfsCMOS_Pbit7   *   2_10000000
 ]


 ] ; :LNOT: SDFS


; A couple of procedure to tick and check sharedisc submenu
; In    r1 -> menu

EncodeMenu Entry "r0, r1"

        ADD     r1, r1, #m_headersize     ; skip menu header

01      LDR     r0, [r1, #mi_itemflags]

        BIC     r0, r0, #mi_it_tick       ; ensure all unticked to start with
        STR     r0, [r1, #mi_itemflags]

        LDR     r14, [r1, #mi_iconflags]!
        BIC     r14, r14, #is_shaded      ; ensure none greyed out
        STR     r14, [r1], #(mi_size - mi_iconflags)

        TST     r0, #mi_it_lastitem       ; last item in menu?
        BEQ     %BT01                     ; [no]

        EXIT

; In    r1 -> menu
;       r2 = item to tick
; Out   item marked as ticked, flags preserved

TickMenu Entry "r1, r2"
        ADD     r1, r1, #m_headersize + mi_itemflags ; skip menu header
                                          ; and item fields before itemflags
   ASSERT mi_size = 24
        ADD     r2, r2, r2, LSL #1        ; *3
        LDR     r14, [r1, r2, LSL #3]     ; *24
        ORR     r14, r14, #mi_it_tick     ; 'tick' corresponding entry
        STR     r14, [r1, r2, LSL #3]
        EXIT

; In    r1 -> menu
;       r2 = item to untick
; Out   item marked as ticked, flags preserved
UnTickMenu Entry "r1, r2"
        ADD     r1, r1, #m_headersize + mi_itemflags ; skip menu header
                                          ; and item fields before itemflags
   ASSERT mi_size = 24
        ADD     r2, r2, r2, LSL #1        ; *3
        LDR     r14, [r1, r2, LSL #3]     ; *24
        BIC     r14, r14, #mi_it_tick     ; 'tick' corresponding entry
        STR     r14, [r1, r2, LSL #3]
        EXIT

; In    r1 -> "adfs::discname"
; Out   dismounted, and any dirs 'adfs::discname' closed

dismountit Entry "r1"
        ADRL    r3, dismount
        BL      copycommand
        SUB     r1, r1, #2              ; r1 -> original drive number
        LDRB    r2,driveno+1
        STRB    r2,[r1],#1
        MOV     r2,#0
        STRB    r2,[r1]
        ADR     r0, userdata
 [ debug
 dstring r0, "dismountit: "
 ]
        SWI     XOS_CLI
        EXIT

; In    [driveno+1] = drive number
;       r3 -> prototype command
; Out   [userdata..] = "adfs:<command> <drive no>"
;       r1 -> terminator (drive number inserted at [r1,#-2])
copycommand1 Entry "r2"
        ADR     r1, userdata
        B int_copycommand

copycommand Entry "r2"
        ADR     r1, userdata
        ADRL    r2, adfscolon
        BL      strcpy_advance
int_copycommand
        MOV     r2, r3
        BL      strcpy_advance
        LDRB    r14, driveno+1          ; get drive number
        STRB    r14, [r1,#-2]
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In     r1 -> drive spec eg. :0

; Out    r1 -> media name (in dirnamebuffer) - "adfs::discname"

GetMediaName Entry "r1-r3"

getmedialoop

;SBP: prevent ambiguous disc name problems
;        LDRB    r3, [r1,#1]
;        STRB    r3, driveno+1

 [ debug
        dstring r1,"GetMediaName on:"
 ]
        BL      GetMediaName_nochecks
        STR     r1, [sp]                ; ensure r1 correct on return

        BL      checkambiguous
        EXIT    VC
        EXIT    NE                      ; V set, so don't worry about Z

        ADRL    r3, dismount
        BL      copycommand             ; dismount by drive number
        ADR     r0, userdata
 [ debug
 dstring r0, "ambiguous: "
 ]
        SWI     XOS_CLI
        EXIT    VS

        LDR     r1, [sp]                ; dismount by disc name (inc. dirs)
        BL      dismountit_byname

        ADR     r1, driveno
        B       getmedialoop            ; try again!

      ; NOEXIT

ErrorBlock_2Same
        DCD     0
        DCB     "2Same",0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In     r1 -> drive spec eg. :0

; Out    r1 -> media name (in dirnamebuffer) - "adfs::discname"

GetMediaName_warn Entry "r1-r3"

getmedialoop_warn

        BL      GetMediaName_nochecks
        STR     r1, [sp]                ; ensure r1 correct on return

        BL      checkambiguous
        EXIT    VC
        EXIT    NE                      ; V set, so don't worry about Z

; generate suitable warning message for the user

        ADR     r0,ErrorBlock_2Same
        BL      lookuperror
        MOV     r1, #2_001              ; 'Ok' button
        BL      ReportError

        ADRL    r3, dismount
        BL      copycommand             ; dismount by drive number
        ADR     r0, userdata
 [ debug
 dstring r0, "ambiguous: "
 ]
        SWI     XOS_CLI
        EXIT    VS

        LDR     r1, [sp]                ; dismount by disc name (inc. dirs)
        BL      dismountit_byname

        ADR     r1, driveno
        EXIT
        B       getmedialoop_warn            ; try again!

      ; NOEXIT

checkambiguous Entry "r1-r5"

        MOVVC   r0, #OSFile_ReadInfo    ; see if we get "ambiguous disc name"
        SWIVC   XOS_File
        TEQVC   r0, r0                  ; ensure Z set!
        EXIT    VC

        LDR     r14, [r0]               ; check error number
        LDR     r2, =&1089E             ; "ambiguous disc name"
        TEQ     r14, r2
        EXIT

        LTORG


GetMediaName_nochecks Entry "r1-r7"

        SWI     XHourglass_On
        MOV     r0, r1
        ADR     r1, userdata + &80
        SWI     X$SWIPrefix._DescribeDisc
        BVS     %FT99
        SWI     XHourglass_Off
        MOV     r14, #0
        STRB    r14, [r1, #32]          ; ensure name is terminated

        ADD     r3, r1, #22             ; r3 -> disc name

        LDRB    r14, [r3]               ; r3 -> disc name
        CMP     r14, #delete            ; (delete or <= space) = terminator
        CMPNE   r14, #space             ; if null, recover drive number instead

        LDRLS   r3, [sp, #0]            ; r1in = ':4' etc
        ADDLS   r3, r3, #1              ; r3 -> '4' etc
 [ debug
 dstring r3, "ADFS returned name "
 ]

        ADR     r1, dirnamebuffer
        STR     r1, [sp, #0]            ; return 'adfs::DiscName' or 'adfs::4'
        addr    r2, adfscolon
        BL      strcpy_advance

        MOV     r14, #":"               ; Append ':'
        STRB    r14, [r1], #1
        MOV     r2, r3
        BL      strcpy_space            ; Append discname: not strcat !

 [ debug
        ADR     r14, dirnamebuffer
        DSTRING r14, "GetMediaName:"
 ]

        EXIT

99
        SWI     XHourglass_Off
        SETV
        EXIT


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Out   cx0, cy0 = coords of mouse pointer
;       other regs corrupt

GetPointerInfo ROUT

        Push    "r1, r2-r6, lr"         ; poke pointer info into stack

        ADD     r1, sp, #4
        SWI     XWimp_GetPointerInfo
        LDMVCIA r1, {cx0, cy0}

        LDR     r1, [sp], #6*4          ; Restore r1, kill temp frame
        Pull    "pc"

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Set up icon bar entries for ADFS
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Out   much corruption

        MACRO
$label  IconDef $sprite, $drvspec, $title
        DCB     "   S"             ; for the validation string entry
$label  FixDCB  12, "$sprite"      ; label --> here
        DCB     "$drvspec", 0
        MEND

ic_winnie4      IconDef "harddisc",   ":4", "$"
ic_winnie5      IconDef "harddisc",   ":5", "$"

ic_winnie6      IconDef "harddisc",   ":6", "$"
ic_winnie7      IconDef "harddisc",   ":7", "$"

      [ SDFS
ic_floppy0      IconDef "floppysd", ":0", "$"
ic_floppy1      IconDef "floppysd", ":1", "$"
ic_floppy2      IconDef "floppysd", ":2", "$"
ic_floppy3      IconDef "floppysd", ":3", "$"
      |
      [ SCSI
ic_floppy0      IconDef "floppyscsi", ":0", "$"
ic_floppy1      IconDef "floppyscsi", ":1", "$"
ic_floppy2      IconDef "floppyscsi", ":2", "$"
ic_floppy3      IconDef "floppyscsi", ":3", "$"
      |
ic_floppy0      IconDef "floppydisc", ":0", "$"
ic_floppy1      IconDef "floppydisc", ":1", "$"
ic_floppy2      IconDef "floppydisc", ":2", "$"
ic_floppy3      IconDef "floppydisc", ":3", "$"
      ]
      ]

        ALIGN

SetUpIconBar Entry

        SWI     X$SWIPrefix._Drives
        EXIT    VS                      ; r2 := no of winnies
        MOV     r3, r1                  ; r3 := no of floppies
      [ :LNOT: HotPlug
        STR     r3,nfloppies            ; used by *Backup code
      ]

        MOV     r4, #0                  ; icon index




 [ HotPlug
        Push    "r5,r6"
        MOV     r5, r2
        MOV     r6, #0

        CMP     r5, #4
        BCC     %FT01
        MOV     r0, #7
        MOV     r1, #7
        SWI     X$SWIPrefix._MiscOp
        TST     r2, #2
        ADREQ   r1, ic_winnie7
        MOVEQ   r10, #7                 ; value to check the proper bits in CMOS
        BLEQ    AddToIconBar
        BVS     %FT90
01
        CMP     r5, #3
        BCC     %FT01
        MOV     r0, #7
        MOV     r1, #6
        SWI     X$SWIPrefix._MiscOp
        TST     r2, #2
        ADREQ   r1, ic_winnie6
        MOVEQ   r10, #6                 ; value to check the proper bits in CMOS
        BLEQ    AddToIconBar
        BVS     %FT90
01
        CMP     r5, #2
        BCC     %FT01
        MOV     r0, #7
        MOV     r1, #5
        SWI     X$SWIPrefix._MiscOp
        TST     r2, #2
        ADREQL  r1, ic_winnie5
        MOVEQ   r10, #5                 ; value to check the proper bits in CMOS
        BLEQ    AddToIconBar
        BVS     %FT90
01
        CMP     r5, #1
        BCC     %FT01
        MOV     r0, #7
        MOV     r1, #4
        SWI     X$SWIPrefix._MiscOp
        TST     r2, #2
        ADREQ   r1, ic_winnie4
        MOVEQ   r10, #4                 ; value to check the proper bits in CMOS
        BLEQ    AddToIconBar
        BVS     %FT90
01
        CMP     r3, #4
        BCC     %FT01
        MOV     r0, #7
        MOV     r1, #3
        SWI     X$SWIPrefix._MiscOp
        TST     r2, #2
        ADDEQ   r6, r6, #1
        ADREQL  r1, ic_floppy3
        BLEQ    AddToIconBar
        BVS     %FT90
01
        CMP     r3, #3
        BCC     %FT01
        MOV     r0, #7
        MOV     r1, #2
        SWI     X$SWIPrefix._MiscOp
        TST     r2, #2
        ADDEQ   r6, r6, #1
        ADREQL  r1, ic_floppy2
        BLEQ    AddToIconBar
        BVS     %FT90
01
        CMP     r3, #2
        BCC     %FT01
        MOV     r0, #7
        MOV     r1, #1
        SWI     X$SWIPrefix._MiscOp
        TST     r2, #2
        ADDEQ   r6, r6, #1
        ADREQL  r1, ic_floppy1
        BLEQ    AddToIconBar
        BVS     %FT90
01
        CMP     r3, #1
        BCC     %FT01
        MOV     r0, #7
        MOV     r1, #0
        SWI     X$SWIPrefix._MiscOp
        TST     r2, #2
        ADDEQ   r6, r6, #1
        ADREQL  r1, ic_floppy0
        BLEQ    AddToIconBar
01
90
        STR     r6, nfloppies
        Pull    "r5,r6"
        EXIT
 |
        ADR     r1, ic_winnie7
        CMP     r2, #4
        MOV     r10, #7                 ; value to check the proper bits in CMOS
        BLGE    AddToIconBar
        EXIT    VS

        ADR     r1, ic_winnie6
        CMP     r2, #3
        MOV     r10, #6                 ; value to check the proper bits in CMOS
        BLGE    AddToIconBar
        EXIT    VS

        ADR     r1, ic_winnie5
        CMP     r2, #2
        MOV     r10, #5                 ; value to check the proper bits in CMOS
        BLGE    AddToIconBar
        EXIT    VS

        ADR     r1, ic_winnie4
        CMP     r2, #1
        MOV     r10, #4                 ; value to check the proper bits in CMOS
        BLGE    AddToIconBar
        EXIT    VS

        ADR     r1, ic_floppy3
        CMP     r3, #4
        BLGE    AddToIconBar
        EXIT    VS

        ADR     r1, ic_floppy2
        CMP     r3, #3
        BLGE    AddToIconBar
        EXIT    VS

        ADRL    r1, ic_floppy1
        CMP     r3, #2
        BLGE    AddToIconBar
        EXIT    VS

        ADR     r1, ic_floppy0
        CMP     r3, #1
        BLGE    AddToIconBar
        EXIT
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 -> block:
;               12 bytes of sprite name, preceded by 'S' (for the Wimp)
;               3 bytes of drive spec. (eg. ":0", 0)
;       r4 = icon index
;       [iconbaricons,R4,LSL #2] = icon to replace

; Out   r0 = icon handle
;       r4 = next icon index (ie. old r4 + 1)


AddToIconBar Entry "r1-r3, r5"

        ADD     r1, r1, #icb_drivenumber
        MOV     r2, r1                          ; r2 -> drive number
        LDRB    r14, [r1, #icb_drivetype - icb_drivenumber]
        TEQ     r14, #"f"
        MOVEQ   r3, r1                          ; don't read floppy disc name
        BEQ     %FT01
        LDRB    r14, [r1,#1]
        STRB    r14, driveno+1
        MOV     r14, #':'
        STRB    r14, driveno
        BL      GetMediaName_warn               ; try to find hard disc name
                                                ; SBP: and if ambiguous name error then say so!
        ADDVC   r3, r1, #len_mediaprefix        ; r3 -> disc name
        SUBVSS  r3, r2, #0               ; CLRV ; just use drive number if error
01                                              ; may or may not include ":"
        ADR     r5, discnames
        ADD     r5, r5, r4, LSL #drv_shift
        ADD     r1, r5, #drv_number
        BL      strcpy                          ; copy in drive number
        ADD     r1, r5, #drv_name
        MOV     r2, r3
        BL      strcpy_advance                  ; should be enough room

        SUB     r14, r1, r5
        SUB     r14, r14, #drv_name
        STRB    r14, [r5, #drv_namelen]

        LDR     r1, [sp]                ; r1 -> drive block
        STR     r1, [r5, #drv_iconblock]

        ADR     r2, iconbaricons        ; r2 -> iconbaricons
        LDR     r3, [r2, r4, LSL #2]    ; r3 = icon to open next to
        BL      AllocateIcon            ; r5 -> drive number/name
        EXIT    VS

        STR     r0, [r2, r4, LSL #2]    ; save new handle
        ADD     r4, r4, #1


        MOV     r1, #-2                 ; delete previous icon, if any
        Push    "r1,r3"
        MOV     r1, sp
        CMP     r3, #0
        SWIPL   XWimp_DeleteIcon
        ADD     sp, sp, #8

 [ :LNOT: SDFS
        BL      call_share              ; check if S/P bits in CMOS are set
 ]

        EXIT

 [ :LNOT: SDFS

; If S bit is set in CMOS, then call ShareD_CreateShare with the set option (protected/unprotected)
call_share      EntryS
        BIC     r9, r9, r9
        CMP     r10, #4                   ; which winnie?
        BEQ     %FT03
 [ :LNOT: SCSI
        CMP     r10, #5
        BEQ     %FT04
        CMP     r10, #6
        BEQ     %FT05
        CMP     r10, #7
        BEQ     %FT06
 ]
        B       %FT01

66      ADR     r1, dirnamebuffer         ; this is the main loop to catch the name of the disc
        MOV     r7, r1                    ; and to call ShareD_CreateShare
        ADD     r2, r1, #:LEN:"$FSTitle::"
        ADR     r1, mb_tempdisc           ; name of the disc
        BL      strcpy
        MOV     r1, r7
02
        LDRB    r6, [r1], #1
        TEQ     r6, #0
        BNE     %BT02

        SUB     r1, r1, #1
        ADR     r2, dotdollar2             ; add ".$/0" to path
        BL      strcpy_advance

        MOV     r2, r7                    ; r2 -> "adfs::mb_namedisc.$"
        ADR     r1, mb_tempdisc           ; r1 -> "mb_tempdisc"
        BIC     r0, r0, r0
        MOV     r0, r9
        SWI     XShareD_CreateShare       ; calls shared_createshare
        B       %FT01                     ; jump to end
03
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
 [ SCSI
        MOV     r3, #SCSIbitS             ; load mask for shared
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 4 is set
        CMP     r0, #SCSIbitS
        BNE     %FT01
        MOV     r3, #SCSIbitP             ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 4 is set
        CMP     r0, #SCSIbitP
 |
        MOV     r3, #adfsCMOS_Sbit4       ; load mask for shared
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 4 is set
        CMP     r0, #adfsCMOS_Sbit4
        BNE     %FT01
        MOV     r3, #adfsCMOS_Pbit4       ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 4 is set
        CMP     r0, #adfsCMOS_Pbit4
        MOVEQ   r9, #1                    ; set r9 to1 if P bit is set (means shared protected)
        B       %BT66
04
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
        MOV     r3, #adfsCMOS_Sbit5       ; load mask for shared
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 5 is set
        CMP     r0, #adfsCMOS_Sbit5
        BNE     %FT01
        MOV     r3, #adfsCMOS_Pbit5       ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 5 is set
        CMP     r0, #adfsCMOS_Pbit5
        MOVEQ   r9, #1                    ;set r9 to1 ifP bit is set (means shared protected)
        B       %BT66
05
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
        MOV     r3, #adfsCMOS_Sbit6       ; load mask for shared
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 6 is set
        CMP     r0, #adfsCMOS_Sbit6
        BNE     %FT01
        MOV     r3, #adfsCMOS_Pbit6       ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 6 is set
        CMP     r0, #adfsCMOS_Pbit6
        MOVEQ   r9, #1                    ;set r9 to1 ifP bit is set (means shared protected)
        B       %BT66
06
        BL      ReadCMOSbits              ; get in r2 current state of CMOS
        MOV     r3, #adfsCMOS_Sbit7       ; load mask for shared
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 7 is set
        CMP     r0, #adfsCMOS_Sbit7
        BNE     %FT01
        MOV     r3, #adfsCMOS_Pbit7       ; load mask for protected/unprotected
        AND     r0, r2, r3                ; clear bit not needed to check if P bit of drive 7 is set
        CMP     r0, #adfsCMOS_Pbit7
 ]
        MOVEQ   r9, #1                    ; set r9 to1 if P bit is set (means shared protected)
        B       %BT66
01
        BIC     r10, r10, r10

        EXITS

dotdollar2       DCB     "."             ; share $ with ...
dollar2          DCB     "$", 0          ; directory title
                 ALIGN

 ] ; :LNOT: SDFS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; In    r1 -> icon description (icb_etc)
;       r3 = handle of icon to open next to, or -1 if at right hand end of appropriate priority
; [ HotPlug
;            unless r3=-1, bit 31 set => (to AddToIconBar routine) not to delete afterwards
;                          bit 30 set => add to right instead of to left of specified handle
; ]
;       r5 -> drive description (drv_etc)

; Out   r0 = icon index (created on iconbar)

AllocateIcon Entry "r1-r5, x0, y0, x1, y1"

        MOV     r2, r1
        MOV     r0, #SpriteReason_ReadSpriteSize
        SWI     XWimp_SpriteOp                  ; r3, r4 = pixel size

        MOVVC   r0, r6                          ; creation mode of sprite

        MOVVC   r1, #VduExt_XEigFactor
        SWIVC   XOS_ReadModeVariable
        MOVVC   x0, #0
        ADDVC   x1, x0, r3, LSL r2              ; pixel size depends on sprite

        MOVVC   r1, #VduExt_YEigFactor
        SWIVC   XOS_ReadModeVariable
        MOVVC   y0, #20                         ; sprite baseline
        ADDVC   y1, y0, r4, LSL r2
        MOVVC   y0, #-16                        ; text baseline

        EXIT    VS

        ASSERT  x0 > r5
        LDMIA   sp,{r1-r5}                      ; we need r1 and r5

        LDRB    r4, [r5, #drv_namelen]          ; include name in icon
        CMP     x1, r4, LSL #4                  ; 16 OS units per char
        MOVLT   x1, r4, LSL #4

        ADR     r14, userdata
        MOV     r0, #-2                         ; lhs of icon bar
        STMIA   r14!, {r0, x0, y0, x1, y1}      ; window handle, icon coords
        LDR     r0, iconbariconflags            ; r0 = icon flags
        ADD     r2, r5, #drv_name               ; r2 -> drive name/number
        ADD     r3, r1, #icb_validation         ; r3 -> validation string
        STMIA   r14, {r0, r2-r4}                ; r4 = length of text

        ADR     r1, userdata
        LDR     r14, wimpversion                ; if Wimp version 2.21 or later,
      [ HotPlug
        LDR     r0, [sp, #2*4]                  ; r0 = icon to open next to
        TST     r0, #&40000000                  ; left ot right?
        MOVNE   r2, #-4                         ; to right of icon
        MOVEQ   r2, #-3                         ; to left of icon
        CMP     r0, #-1                         ; we did want to open next to an icon, did we?
        BICNE   r0, r0, #&C0000000              ; remove flag bits to extract actual icon handle
        BNE     %FT01
      |
        CMP     r14, #221
        LDRGE   r0, [sp, #2*4]                  ; r0 = icon to open next to
        CMPGE   r0, #0
        MOVGE   r2, #-3                         ; to right of icon handle
        BGE     %FT01
        CMP     r14, #272                       ; we need Wimp 2.73 or later
        BLE     %FT02                           ; otherwise forget it
      ]

        MOV     r2, #-6                         ; lhs of bar, growing to right
        LDRB    r14, [r3, #icb_drivetype-icb_validation] ; JRF: negate the ADD r3,r1,#icb_validation BUG FIX!!!!!
        CMP     r14, #"f"
      [ SCSI
        LDREQ   r0, =WimpPriority_FloppyDiscs + &01000000
        LDRNE   r0, =WimpPriority_HardDiscs + &01000000
      |
        LDREQ   r0, =WimpPriority_FloppyDiscs
        LDRNE   r0, =WimpPriority_HardDiscs
      ]
01
        STR     r2, [r1, #u_handle]
02
        SWI     XWimp_CreateIcon
        EXIT                                    ; returns r0 = icon handle


iconbariconflags
        DCD     &1700310B       ; text
                                ; sprite
                                ; h-centred
                                ; indirected
                                ; button type 3
                                ; fcol 7, bcol 1

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strcat
; ======
;
; Concatenate two strings

; In    r1, r2 -> CtrlChar/r3 terminated strings

; Out   new string in r1 = "r1" :CC: "r2" :CC: 0


strcat Entry "r1-r3"

        MOV     r3, #space-1

05      LDRB    r14, [r1], #1           ; Find where to stick the appendage
        CMP     r14, #delete            ; Order, you git!
        CMPNE   r14, r3
        BHI     %BT05
        SUB     r1, r1, #1              ; Point back to the term char

10      LDRB    r14, [r2], #1           ; Copy from *r2++
        CMP     r14, #delete            ; Order, you git!
        CMPNE   r14, r3                 ; Any char <= r3 is a terminator
        MOVLS   r14, #0                 ; Terminate dst with 0
        STRB    r14, [r1], #1           ; Copy to *r1++
        BHI     %BT10

        EXIT

; .............................................................................
;
; strcpy
; ======
;
; Copy a string and terminate with 0

; In    r1 -> dest area, r2 -> CtrlChar/r3 terminated src string

strcpy ALTENTRY

        MOV     r3, #space-1            ; terminate on ctrl-char
        B       %BT10

strcpy_space ALTENTRY

        MOV     r3, #space              ; terminate on space or ctrl-char
        B       %BT10


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strcpy_advance
; ==============

; In    r1 -> dest string
;       r2 -> source string

; Out   r1 -> terminating null

strcpy_advance Entry "r2"

10      LDRB    r14, [r2], #1           ; Copy from *r2++
        CMP     r14, #delete            ; Order, you git!
        CMPNE   r14, #space-1           ; Any char < space is a terminator
        MOVLS   r14, #0                 ; Terminate dst with 0
        STRB    r14, [r1], #1           ; Copy to *r1++
        BHI     %BT10

        SUB     r1, r1, #1
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_user_message (and _recorded)
; ==================

; In    r1 -> wimp_eventstr
;             [r1, #0]     block size
;             [r1, #12]    your ref
;             [r1, #16]    message action
;             [r1, #20...] message data

; Out   all regs may be corrupted - going back to PollWimp

event_user_message Entry

        LDR     r0, [r1, #message_action]

      [ givehelp
        LDR     r14, =Message_HelpRequest
        CMP     r0, r14
        BEQ     returnhelp
      ]

      [ DragsToIconBar
        LDR     r14, =Message_DataSave
        CMP     r0, r14
        BEQ     message_datasave

        LDR     r14, =Message_DataLoad
        CMP     r0, r14
        BEQ     message_dataload
     ]

        LDR     r14,=Message_MenuWarning
        TEQ     r0,r14
        BNE     %FT01
        LDR     r0,[r1,#20]     ; Get submenu pointer
        LDR     r14,CurrentFormat_handle
        TEQ     r0,r14
        BEQ     IdentifyDisc
        BNE     BuildFormatMenu
01
      [ HotPlug
        LDR     r14, =Message_MenusDeleted
        SUBS    r14, r0, r14
        STREQ   r14, menuopen
      ]

        CMP     r0, #Message_Quit
        EXIT    NE

        B       CloseDownAndExit
;       NOEXIT


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 -> message block containing help request
;       LR stacked
; Out   Message_HelpReply sent

      [ givehelp
returnhelp
        LDR     r4, matchedindex        ; preserve old values
        LDRB    r5, driveno+1
        Push    "r4, r5"

        LDR     r2, [r1, #ms_data + b_window]
        LDR     r3, [r1, #ms_data + b_icon]

 [ debugfom
        DREG    r2, "!Help W,I=",cc
        DREG    r3, ","
 ]
        CMP     r2, #iconbar_whandle
        BNE     %FT01

        Push    "R1"
        MOV     r4, r3
        BL      matchdriveicon          ; must match: [matchedindex] = which one
        Pull    "R1"
        MOV     r0, #&FF                ; "HFF" is the token for the iconbar
        B       gothelpindex
01
        LDR     lr, CurrentFormat_handle
        TEQ     r2, lr
        MOVEQ   r0, #&FC
        BEQ     gothelpindex

        CMP     r3, #0                  ; if null icon, don't bother
        BLT     %FT99                   ; (avoid confusion with parent node)

        Push    "r1, r2-r4,lr"
        ADD     r1, sp, #4              ; r1 -> buffer for result
        MOV     r0, #1
        SWI     XWimp_GetMenuState
        Pull    "r1, r2-r4,lr"          ; r2, r3 , r4 = menu selections
        BVS     %FT99

 [ debugfom
        BREG    r2, "Menu help tree:",cc
        BREG    r3,"=>",cc
        BREG    r4,"=>"
 ]
        CMP     r2,#2                   ; Is this the format menu ?
        BNE     %FT03
        CMP     r3,#-1
        BEQ     %FT03
        CMP     r3,#0                   ; First entry is "Current format"
        MOVEQ   r0,#&FE                 ; Token is HFE
        BEQ     gothelpindex
        CMP     r4,#-1
        LDRNE   r14,OthersTablePtr
        MOVNE   r4,r4,ASL #2
        LDRNE   r14,[r14,r4]
        BNE     %FT01
        LDR     r14,NativeTablePtr
        SUB     r3,r3,#1
        MOV     r3,r3,ASL #2
        LDR     r14,[r14,r3]
        CMP     r14,#0
        MOVEQ   r0,#&FD
        BEQ     gothelpindex
01
        LDR     r0,[r14,#8]             ; Point at help text
        ADD     r1,r1,#ms_data
        MOV     r14,r1
02
        LDRB    r3,[r0],#1
        STRB    r3,[r14],#1
        CMP     r3,#31
        BGT     %BT02

        SUB     r2,r14,r1
        ADD     r2,r2,#ms_data+4
        BIC     r2,r2,#3
        B       SendHelpMessage
03
        ADDS    r0, r2, #1              ; NB: item -1 is translated into 0
        ADDGTS  r14, r3, #1
        ADDGT   r0, r0, r14, LSL #4     ; r0 = first entry + 16*second entry

; r0 = index in menu (&FF => iconbar icon)
; [matchedindex] = index of this icon

gothelpindex
        LDR     r14, matchedindex
 [ debugfom
        DREG    r14, "got matchedindex = "
 ]
        ADR     r4, discnames + drv_iconblock
        LDR     r14, [r4, r14, LSL #drv_shift]! ; r14 -> icon block, r4 -> drive block + drv_iconblock
        LDRB    r5, [r14, #icb_drivetype]
        BIC     r5, r5, #&20                    ; r5 = "H" or "F"

        ADD     r1, r1, #ms_data
        STRB    r5, [r1], #1
        LDR     r14, m_floppydisc + m_headersize + mi_size*mo_fl_backup + mi_submenu
        CMP     r14, #0
        MOVLE   r14, #"S"               ; single floppy
        MOVGT   r14, #"M"               ; multiple floppies
        STRB    r14, [r1], #1
 [ {TRUE}
        ADR     lr, m_floppydisc + m_headersize + mi_iconflags
        SUB     r2, r0, #1
        ASSERT  mi_size=24
        ADD     lr, lr, r2, LSL #4
        LDR     lr, [lr, r2, LSL #3]    ; get icon flags for menu item
        TST     lr, #is_shaded
        MOVEQ   lr, #"N"                ; normal
        MOVNE   lr, #"G"                ; greyed
        STRB    lr, [r1], #1
 ]
        MOV     r2, #3
        SWI     XOS_ConvertHex2

 [ {TRUE}
        SUBVC   r0, r0, #3
 |
        SUBVC   r0, r0, #2              ; r0 -> "HMxx" token
 ]
        MOVVC   r1, r0                  ; r1 -> data field of message
        MOVVC   r2, #256-ms_data        ; r2 = buffer size
        ADDVC   r3, r4, #drv_name - drv_iconblock  ; r3 -> parameter 0 (drive name)
        TEQ     r5,#"F"
        ADDEQ   r3, r3, #1              ; skip ":" for floppies
        BLVC    lookuptoken             ; on exit r2 = length of string (ex. 0)

        ADDVC   r2, r2, #4 + ms_data    ; include terminator
        BICVC   r2, r2, #3
SendHelpMessage
        STRVC   r2, [r1, #ms_size-ms_data]!
        LDRVC   r14, [r1, #ms_myref]
        STRVC   r14, [r1, #ms_yourref]
        LDRVC   r14, =Message_HelpReply
        STRVC   r14, [r1, #ms_action]
        MOVVC   r0, #User_Message
        LDRVC   r2, [r1, #ms_taskhandle]
        SWIVC   XWimp_SendMessage
99
        Pull    "r4, r5"                ; restore static data
        STR     r4, matchedindex
        STRB    r5, driveno+1

        EXIT

;..............................................................................

; In    r0 -> token string
;       r1 -> buffer to copy message into
;       r2 = size of buffer (including terminator)
;       r3 -> parameter 0
;       [messagedata] -> message file descriptor (0 => not yet loaded)
; Out   message file loaded if not already loaded
;       [r1..] = message, terminated by 0
;       r2 = size of string, including the terminator

 [ SDFS
str_messagefile       DCB "SDFSFiler:Messages", 0
str_templatefile_sdfs DCB "SDFSFiler:Templates", 0
 |
 [ SCSI
str_messagefile DCB     "SCSIFiler:Messages", 0
str_templatefile_scsi DCB "SCSIFiler:Templates", 0
 |
str_messagefile DCB     "ADFSFiler:Messages", 0
 ]
str_templatefile DCB     "ADFSFiler:Templates", 0
 ]
                ALIGN

lookuptoken Entry "r0-r7"

 [ debug
;  dstring r0, "Look up token "
;  dstring r3, "Parameter 0 "
 ]
        BL      allocatemessagedata             ; r0 -> file desc on exit

        LDMVCIA sp, {r1-r4}
        MOVVC   r5, #0                          ; parameters 1..3 not used
        MOVVC   r6, #0
        MOVVC   r7, #0
        SWIVC   XMessageTrans_Lookup

        STRVC   r3, [sp, #2*4]                  ; r2 on exit = string length
99
        STRVS   r0, [sp]
        EXIT

lookuperror Entry "r0-r7"

        BL      allocatemessagedata             ; r0 -> file desc on exit

        MOVVC   r1, r0
        LDRVC   r0, [sp]
        MOVVC   r2, #0
        MOVVC   r4, #0
        MOVVC   r5, #0                          ; parameters 1..3 not used
        MOVVC   r6, #0
        MOVVC   r7, #0
        SWIVC   XMessageTrans_ErrorLookup

        STR     r0, [sp]
        EXIT

;..............................................................................

; In    [messagedata] -> message file desc (0 => not yet opened)
; Out   r0 = [messagedata] -> message file desc (opened if not already open)

allocatemessagedata Entry "r1, r2"

        LDR     r0, messagedata
        CMP     r0, #0
        EXIT    NE

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #16
        SWI     XOS_Module

        STRVC   r2, messagedata

        MOVVC   r0, r2
        ADRVC   r1, str_messagefile
        MOVVC   r2, #0                          ; no user buffer
        SWIVC   XMessageTrans_OpenFile

        BLVS    deallocatemessagedata           ; preserves error state

        LDRVC   r0, messagedata
        EXIT

;..............................................................................

; In    [messagedata] -> message file desc, or = 0 if not loaded
; Out   [messagedata] = 0, OS_Module (Free) called if required, error preserved

deallocatemessagedata EntryS "r0,r2"

        LDR     r2, messagedata
        MOVS    r0, r2
        EXITS   EQ

        MOV     r14, #0
        STR     r14, messagedata

        SWI     XMessageTrans_CloseFile         ; tell the MessageTrans module

        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module

        EXITS
      ]

 [ HotPlug
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_pollword_nonzero
; ======================

; In    r1 -> wimp_eventstr
;             [r1, #0]     address of pollword
;             [r1, #4]     contents of pollword

; Out   all regs may be corrupted - going back to PollWimp

event_pollword_nonzero Entry
        MOV     lr, #0
        STR     lr, darq                ; stop any more links being added while we process list
        LDR     r2, [r1, #4]
        LDRB    r3, driveno+1
        SUB     r3, r3, #'0'
01      LDRB    r0, [r2, #darq_added]
        LDRB    r10, [r2, #darq_number]
        TEQ     r0, #0
        ADRNE   lr, %FT02
        BNE     AddDrive
        BL      RemoveDrive
        TEQ     r10, r3                 ; have we removed the drive for the current menu?
        MOVEQ   r3, #-1
02      LDR     r1, [r2, #darq_next]
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        MOVS    r2, r1
        BNE     %BT01

        LDRB    r1, driveno+1
        BL      CopyMenus               ; reflect any changes in the menu structure
        STRB    r1, driveno+1

        LDR     r14, menuopen
        TEQ     r14, #0
        EXIT    EQ                      ; none of our menus were open

        ADDS    r3, r3, #1
        BNE     %FT10
        STR     r3, menuopen            ; close menu if it was for the removed drive
        MOV     r1, #-1
        SWI     Wimp_CreateMenu
        EXIT

10      MOV     r8, r1
        BL      update_menu_iconbar     ; do shading etc
        LDR     r1, menuhandle          ; reopen menu if a different drive went - backup menu has changed
        SWI     Wimp_CreateMenu
        EXIT
 ]

; ----------------------------------------------------------------------------
; BuildFormatMenu.
; In:
;     r1 -> Event block (Message_MenuWarning)
;     LR - stacked
; Out:
;     Format Menu constructed and opened.
;
BuildFormatMenu ROUT
        Push    "r0-r6,r11"

        LDR     r14,FormatList
        CMP     r14,#0
        BLNE    FreeFormatList
; OSS FreeFormatList puts a NULL in the list header, so no need to do it
; here.

        MOV     r1,#Service_EnumerateFormats
        MOV     r2,#0
        SWI     XOS_ServiceCall
        BVS     BuildError

        STR     R2,FormatList

; Count number of entries to allocate block for menu.

        MOV     R3,#0
        MOV     R4,#0
01
        LDR     R14,[R2,#EnumFormats_Flags]
        TST     R14,#EnumFormats_IsNative
        ADDNE   R4,R4,#1                        ; R4 = Number of native formats.
        LDR     R2,[R2,#EnumFormats_Link]
        ADD     R3,R3,#1
        CMP     R2,#0
        BNE     %BT01

; R3 = Number of menu entries menu size is 28+24*R3
; R4 = Number of native format menu entries.
     [ debugfom
        dreg   R3,"Number of menu entries "
        dreg   R4,"Number of native formats "
     ]

        ADD     R3,R3,#2                ; Two extra: 'Current Format' and 'Others =>'
        ADD     R4,R4,#2                ; Same as above

; OSS Need to allocate memory for the two format tables. Cheat and
; allocate only one block. Need to add two (for two null terminations)
; and multiply by four (for word entries).

        Push    "r2-r3"
        ADD     r3, r3, #2
        MOV     r3, r3, LSL #2          ; R3 = total size of data
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        STRVC   r2, NativeTablePtr
        ADDVC   r3, r4, #1              ; One null termination in Native.
        ADDVC   r2, r2, r3, LSL #2      ; Add size of native to address,
        STRVC   r2, OthersTablePtr      ; and store as others pointer.
        Pull    "r2-r3"
        BVS     BuildError

        ADD     R3,R3,R3,ASL #1         ; R3=R3*3
        MOV     R3,R3,ASL #3            ; R3=R3*8 (*24 = *mi_size)
        ADD     R3,R3,#m_headersize     ; 28 bytes for menu header
        ADD     R3,R3,#m_headersize     ; We now have two menus to build.
        MOV     r0,#ModHandReason_Claim
        SWI     XOS_Module
        BVS     BuildError
        ADD     R4,R4,R4,ASL #1         ; *3
        ADD     R4,R2,R4,ASL #3         ; *8 = *24 +R2
        ADD     R4,R4,#m_headersize     ; Plus header of first menu.

; R2 -> Block to build menu in.
; R4 -> Block to build 'Other formats' menu in.
        STR     R4,OtherFormatsMenu
        MOV     R7,R4

        STR     R2,FormatMenu

        ADR     R14,m_floppydisc+m_headersize+(mi_size*mo_fl_format)+mi_icondata
        LDR     R14,[R14]
      [ debugid
        DREG    r14,"r14 = "
      ]
        Push    "r2,r7"
11
        LDRB    r3,[r14],#1
        STRB    r3,[r2],#1
        STRB    r3,[r7],#1
        CMP     r3,#32
        BGE     %BT11
        Pull    "r2,r7"
        ADD     r2,r2,#12
        ADD     r7,r7,#12
      [ debugid
        SUB     r14,r2,#12
        DSTRING r14,"title = "
      ]

        LDR     r0,MenuTitleFlags
        STR     r0,[R2],#4
        STR     r0,[R7],#4
        MOV     R5,#0
        STR     R5,[R2],#4              ; Width of menu.
        STR     r0,[R7],#4
        MOV     r0,#44
        STR     r0,[R2],#4
        STR     R5,[R2],#4
        STR     r0,[R7],#4
        STR     R5,[R7],#4
        ADR     r0,FormatList

        LDR     R4,OtherFormatsMenu
        ADD     R4,R4,#m_headersize
        MOV     R3,R2
        MOV     R6,#0
        LDR     r10,NativeTablePtr
        LDR     r11,OthersTablePtr

; r0 -> Format list.
; R3 -> First menu item.
; R4 -> First menu item in other formats menu.
; R5 -> Max width so far (0)
; R6 -> Max width of other formats so far.
; Now add menu items one by one.
      [ debug
        dline   "Build menu"
      ]

        B       %FT05
01
     [ debugfom
        dreg    r3," r3 = "
        dreg    r4," r4 = "
        dreg    r5," r5 = "
     ]
        LDR     R14,[r0,#EnumFormats_Flags]
        TST     R14,#EnumFormats_IsNative
        MOVNE   R2,R3
        MOVEQ   R2,R4
       [ debugfom
        BEQ     %FT98
        dline   "Native format"
        B       %FT99
98
        dline   "DOSFS format"
99
       ]
05
        CMP     r5,#0
        MOVEQ   R2,R3

        CMP     R5,#0
        MOVEQ   R1,#mi_it_warning       ; Generate menu warning
        MOVNE   R1,#0
        STR     R1,[R2],#4
        CMP     R5,#0
        LDREQ   R1,CurrentFormat_handle
        MOVNE   R1,#-1                  ; No submenu
        STR     R1,[R2],#4
        LDR     R1,=(menuiconflags:OR:if_indirected)

; If first time round, add Current format entry.

        CMP     R5,#0
        BNE     %FT10

        Push    "r0-r7"
        LDR     r0,messagedata
        ADRL    r1,CurrentFormatToken
        ADR     r2,CurrentFormatText
        MOV     r3,#CurrentFormatTextLength
        SWI     XMessageTrans_Lookup
        ADDVS   SP,SP,#9*4              ; r0-r7 , r0.
        Pull    "r0-r7",VC
        Pull    "r1-r6,r11,PC",VS
        STR     r1,[r2],#4
        ADR     r9,CurrentFormatText
        STR     r9,[r2],#4
        MOV     R1,R9
        B       %FT02

10

      [ :LNOT: SCSI :LAND: :LNOT: SDFS
; Check if we want to grey it out
        Push    "r0-r11"
        LDR     R11,[r0,#EnumFormats_DiscFormatSWI]
        LDR     R3, [r0,#EnumFormats_DiscFormatParam]
        LDR     R1,=XADFS_VetFormat
        LDRB    R2,driveno+1
        SUB     R2,R2,#"0"
        ADR     r0,DiscRecord
        BL      DoSWI
      [ debugfom
        BVC     %FT61
        ADD     r0,r0,#4
        DSTRING r0,"***Error : "
61
      ]
        Pull    "r0-r11"

        MOVVS   R1,#0
        STRVS   R1,[r0,#20]             ; Mark as greyed out
        SUBVS   R2,R2,#8                ; Back on same item
        BVS     NextItem                ; Go get next format
      ]

        LDR     R14,[r0,#EnumFormats_Flags]
        TST     R14,#EnumFormats_IsNative
        STRNE   r0,[r10],#4
        STREQ   r0,[r11],#4

;        ORRVS   r1,r1,#is_shaded

        STR     R1,[R2],#4
        LDR     R1,[r0,#EnumFormats_MenuString]
        STR     R1,[R2],#4              ; Pointer to string
      [ debugfom
        DSTRING R1,"String is "
      ]

; Calculate length of string
        MOV     R9,R1
02
        LDRB    R14,[R9],#1
        CMP     R14,#32
        BGE     %BT02
        SUB     R1,R9,R1
        MOV     R14,#0
        STR     R14,[R2],#4             ; No validation string.
        STR     R1,[R2],#4              ; Length of string

; If longer than longest so far, update menu header
        MOV     R14,R1,ASL #4           ; *16
        ADD     R14,R14,#16             ; +16 = Half a char at each end in OS Units
        CMP     r5,#0                   ; r5=0 if this is the "Current format" entry
        CMPNE   r0,#0                   ; r0=0 if this is the "Other formats" entry
        BEQ     %FT80
        LDR     R9,[r0,#EnumFormats_Flags] ; Else it must be a format entry, so check which menu it's going in
        TST     R9,#EnumFormats_IsNative
        BEQ     %FT81
80
        CMP     R14,R5                  ; MAX(Native formats width)
        MOVGT   R5,R14
        B       %FT82
81
        CMP     R14,R6                  ; MAX(Other formats width)
        MOVGT   R6,R14
82

NextItem

        CMP     r0,#0
        BEQ     %FT03
        ADR     R14,FormatList
        TEQ     r0,r14
        MOVEQ   R3,R2
        BEQ     %FT71
        LDR     R14,[r0,#EnumFormats_Flags]
        TST     R14,#EnumFormats_IsNative
        MOVNE   R3,R2
        MOVEQ   R4,R2
71
        LDR     r0,[r0,#EnumFormats_Link]
        CMP     r0,#0
        BNE     %BT01

; Add the "Other formats" entry
; OSS is_shaded

        MOV     R1,#mi_it_lastitem       ; Menu flags.
        STR     R1,[R3],#4
        LDR     R1,OtherFormatsMenu
        STR     R1,[R3],#4
        LDR     R1,=(menuiconflags:OR:if_indirected)

; OSS If no other formats then shade this menu entry. We check this by
; seeing if the longest entry in the menu is still zero.
        TEQ     r6, #0
        ORREQ   r1, r1, #is_shaded

        STR     R1,[R3],#4

        Push    "r0-r7"

        LDR     r0,messagedata
        ADRL    r1,OtherFormatsToken
        ADR     r2,OtherFormatsText
        MOV     r3,#OtherFormatsTextLength
        SWI     XMessageTrans_Lookup
        ADDVS   SP,SP,#9 *4              ;r0-r7, r0;
        Pull    "r0-r7",VC
        Pull    "r1-r6,r11,PC",VS
        ADR     r9,OtherFormatsText
        STR     r9,[r3],#4
        MOV     r1,r9
        MOV     r2,r3
        B       %BT02                    ; Go back around to update menu width

03
; Mark last item as such

        LDR     r0,[R4,#-mi_size]
        ORR     r0,r0,#mi_it_lastitem
        STR     r0,[R4,#-mi_size]

; Now store length in menu header

        LDR     R1,OtherFormatsMenu
        STR     R6,[R1,#m_itemwidth]
        LDR     R1,FormatMenu
        STR     R5,[R1,#m_itemwidth]
        LDR     R14,[SP,#1*4]
        LDR     R2,[R14,#24]
        LDR     R3,[R14,#28]
        SWI     XWimp_CreateSubMenu
        BVS     BuildError

        LDR     r1,FormatMenu
        ADR     r2,m_floppydisc+m_headersize+mi_size*2
        STR     r1,[r2,#mi_submenu]

        MOV     r0,#0
        STR     r0,[r11]
        STR     r0,[r10]        ; Terminate format lists.

        Pull    "r0-r6,r11,PC"

BuildError
        STR     r0,[sp]
        BL      FreeFormatList
        SETV
        Pull    "r0-r6,r11,PC"

;----------------------------------------------------------------------------
; Free the format menu and format list. OSS And native and others tables.
FreeFormatList  ROUT
        Push    "r0-r4,LR"

        MOV     r0,#ModHandReason_Free
        LDR     R2,FormatMenu
        CMP     R2,#0
        SWINE   XOS_Module              ; Ignore errors
        LDR     r2, NativeTablePtr
        CMP     r2, #0
        SWINE   XOS_Module              ; Ignore errors
; OSS Don't free OthersTablePtr - it's just a pointer into NativeTablePtr.
        MOV     r4, #0
        STR     r4, FormatMenu
        STR     r4, NativeTablePtr
        STR     r4, OthersTablePtr

        LDR     R4,FormatList
02
        CMP     R4,#0
        STREQ   R4,FormatList
        Pull    "r0-r4,PC",EQ

        LDR     R2,[R4,#4]
        SWI     XOS_Module              ; Free name
        LDR     R2,[R4,#8]
        SWI     XOS_Module              ; Free help text
        MOV     R2,R4
        LDR     R4,[R4]
        SWI     XOS_Module              ; Free block.
        B       %BT02

;-----------------------------------------------------------------------------
; DoSWI
; Entry:
;       r0-R8 arguments to SWI
;       R11   SWI number
; Exit:
;       X Form of SWI called.
;       R11 corrupted
DoSWI

  [ StrongARM
        Push    "r10, lr"
        ORR     r10,r11,#&20000               ; SWI code, with X bit
        SWI     XOS_CallASWI
        Pull    "r10, pc"
  |
        Push    "r0-r1, lr"

        ADR     r0, SWITemplate
        LDMIA   r0, {r0-r1}

        ORR     r0, r0, r11
        ORR     r0, r0, #1:SHL:17              ; just incase
        ADRL    lr, SWICode

        STMIA   lr, {r0-r1}                    ; write code

        Pull    "r0-r1"                        ; restore corrupted r0 - r1

        Push    "pc"
        MOV     pc, lr                         ; jump to the code
        MOV     r0,r0

        Pull    "pc"

SWITemplate
        SWI     XOS_WriteC
        Pull    "pc"

  ] ;StrongARM/not StrongARM

IdentifyDisc    ROUT

        ; Describe the disc - gets the physical parameters and senses drive
        ; empty and unformatted disc
        ADR     r0,driveno
        ADR     r1,userdata+&100
        SWI     X$SWIPrefix._DescribeDisc
        BVC     %FT00

        ; Error - what is it?
        LDR     r14,[r0]

        LDR     r2,=&108d3              ; empty
        TEQ     r14,r2
        BEQ     IdEmpty
        BIC     r14, r14, #&ff000000
        LDR     r2,=&0108c7             ; disc error
        TEQ     r14,r2
        LDRNE   r2,=&01089A             ; not formatted
        TEQNE   r14,r2
        BEQ     IdUnformatted

        ; other error
        Pull    "PC"

00
        ; No error from DescribeDisc

        ; Use only FileCore%[Thing] for the service call
        MOV     r0, #ModHandReason_LookupName
        ADRL    r1, FileCorePercentFSTitle
        SWI     XOS_Module
        Pull    "PC",VS

        MOV     r1, #Service_IdentifyDisc
        LDR     r2, CurrentFormatBufferAddress
; OSS Quote the correct buffer length out of the Templates file, not
; #CurrentFormatBufferLength which was in fact too much anyway since the
; point was halfway throught that block!
        LDR     r3, CurrentFormatIdentifyLength
        ADR     r5, userdata+&100
        MOV     r6, #0                          ; No cache yet
        SUB     sp, sp, #4
        STR     r4, [sp]                        ; Private word for this FS
        MOV     r8, sp                          ; Pointer to private word
        SWI     XOS_ServiceCall
        SWI     XFileCore_DiscardReadSectorsCache ; junk the unwanted cache
        ADD     sp, sp, #4
        Pull    "PC",VS

        ; If didn't identify say so.
        TEQ     r1, #Service_Serviced
        BNE     UnknownId

        ; Now we should know the format !
02
        ADR     r0,userdata
        LDR     r1,[r0,#20]
        LDR     r2,[r0,#24]
        LDR     r3,[r0,#28]
        SWI     XWimp_CreateSubMenu
        Pull    "PC"

UnknownId
        ADRL    r1,UnknownFormatToken
10
        LDR     r0,messagedata
        LDR     r2,CurrentFormatBufferAddress
; OSS Quote the correct buffer length out of the Templates file, not
; #CurrentFormatBufferLength which was in fact too much anyway since the
; point was halfway throught that block!
        LDR     r3, CurrentFormatIdentifyLength
        SWI     XMessageTrans_Lookup
        Pull    "PC",VS
        B       %BT02
IdEmpty
        ADRL    r1,EmptyToken
        B       %BT10
IdUnformatted
        ADRL    r1,UnformattedToken
        B       %BT10


 [ HotPlug
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; AddDrive
;
; handles the appearance of a new drive
;
; In: r10 = drive number
;
; Out: r2,r3 preserved
;      r10 = -1 if drive already present, else preserved

AddDrive
        Entry   "r2,r3"
        MOV     r3, #0                  ; current index
        ADR     r2, iconbaricons
        MOV     r4, #-1                 ; next lowest present drive (r5 = icon handle thereof)
        MOV     r6, #ndrives            ; next highest present drive (r7 = icon handle thereof)

        ADR     r14, AddDrive_IconTable
        LDR     r1, [r14, r10, LSL #2]
        SUB     r1, r14, r1             ; r1 -> icon block, ready for AddToIconBar
        LDRB    r8, [r1]                ; r8 = type of drive ('h' or 'f') to match
        MOV     r9, #-1                 ; r9 = index to use for new icon
01
        LDR     r11, [r2], #4
        CMP     r11, #-1
        CMPEQ   r9, #-1
        MOVEQ   r9, r3                  ; remember first unused index so we can use it ourselves
        CMP     r11, #-1
        BEQ     %FT09                   ; skip missing icons
        ADR     r14, discnames + drv_iconblock
        LDR     r14, [r14, r3, LSL #drv_shift]
        LDRB    r14, [r14, #icb_drivetype]
        TEQ     r14, r8
        BNE     %FT09                   ; skip icons of different type
        ADRL    r14, discnames + drv_number + 1
        LDRB    r14, [r14, r3, LSL #drv_shift]
        SUB     r14, r14, #'0'
        CMP     r14, r10                ; compare with new drive number
        MOVEQ   r10, #-1                ; don't get menu handling confused with drive being removed
        EXIT    EQ                      ; bomb out if drive already there
        BPL     %FT02
        CMP     r14, r4
        MOVGT   r4, r14
        MOVGT   r5, r11
        B       %FT09
02      CMP     r14, r6
        MOVLT   r6, r14
        MOVLT   r7, r11
09      ADD     r3, r3, #1
        CMP     r3, #ndrives
        BNE     %BT01

        CMP     r9, #-1                 ; did we find a free slot?
        EXIT    EQ                      ; no, so exit
        ADR     r2, iconbaricons
        CMP     r6, #ndrives            ; if no drives to our right but some to left, create to the right of them
        ORRLT   r0, r7, #&C0000000
        CMP     r4, #-1                 ; if some drives to our right, create to the left of them
        ORRGT   r0, r5, #&80000000
        CMPEQ   r6, #ndrives            ; if no other drives found, just create at appropriate priority
        MOVEQ   r0, #-1
        STR     r0, [r2, r9, LSL #2]
        MOV     r4, r9
        Push    "r10"
        BL      AddToIconBar
        Pull    "r10"

        TEQ     r8, #'f'
        LDREQ   r14, nfloppies
        ADDEQ   r14, r14, #1
        STREQ   r14, nfloppies
        EXIT

AddDrive_IconTable
        DCD     AddDrive_IconTable-ic_floppy0
        DCD     AddDrive_IconTable-ic_floppy1
        DCD     AddDrive_IconTable-ic_floppy2
        DCD     AddDrive_IconTable-ic_floppy3
        DCD     AddDrive_IconTable-ic_winnie4
        DCD     AddDrive_IconTable-ic_winnie5
        DCD     AddDrive_IconTable-ic_winnie6
        DCD     AddDrive_IconTable-ic_winnie7

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; RemoveDrive
;
; handles the disappearance of an existing drive
;
; In: r10 = drive number
;
; Out: r2,r3 preserved
;      r10 = -1 if already absent, else preserved

RemoveDrive
        Entry   "r2,r3"
        MOV     r2, #0
        ADR     r1, iconbaricons
        ADRL    r0, discnames + drv_number + 1
        ADR     r4, discnames + drv_iconblock
01
        LDR     r3, [r1], #4
        CMP     r3, #-1
        BEQ     %FT09                   ; skip missing icons
        LDRB    r14, [r0, r2, LSL #drv_shift]
        SUB     r14, r14, #'0'
        CMP     r14, r10
        BNE     %FT09

        LDR     r14, [r4, r2, LSL #drv_shift]
        LDRB    r14, [r14, #icb_drivetype]
        TEQ     r14, #'f'
        LDREQ   r14, nfloppies
        SUBEQ   r14, r14, #1
        STREQ   r14, nfloppies
        ; found the icon - delete it
        MOV     r0, #-1
        STR     r0, [r1, #-4]           ; set the stored icon handle back to -1
        MOV     r1, #-2
        Push    "r1,r3"
        MOV     r1, sp
        SWI     XWimp_DeleteIcon
        ADD     sp, sp, #8
        EXIT
09
        ADD     r2, r2, #1
        CMP     r2, #ndrives
        BNE     %BT01
        ; not found
        MOV     r10, #-1
        EXIT
 ]


 [ DragsToIconBar

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; message_datasave
;
; handles the datasave message for when a user drags a file onto an iconbar icon
; to save.
;
; In: r1 -> wimp event structure
;
; Out : registers may be corrupted - going back to wimp poll.

message_datasave

        MOV     r5, r1                   ; Stick r1 into r5 for later
        LDR     r4, [r1, #24]            ; icon handle
        BL      matchdriveicon           ; returns r1 -> drive_spec
        EXIT    NE

        ; check for busy doing format, backup etc
        LDRB    r8, [r1, #1]
        SUB     r8, r8, #"0"
        LDR     lr, FormatState
        MOV     lr, lr, LSR r8
        TST     lr, #1
        EXIT    NE

        ; Copy the name specified in the message to the filenamebuffer
        Push    "r1"
        ADR     r1, filenamebuffer
        ADD     r2, r5, #44
        BL      strcpy
        Pull    "r1"

        ; Make up a filename
        BL      GetMediaName             ; returns r1 -> media name
        MOV     r2, r1                   ; put medianame pointer in r2 (source for strcpy)
        ADD     r1, r5, #44              ; destination is message data
        BL      strcpy_advance           ; do the copy
        ADR     r2, dotdollar3
        BL      strcpy_advance           ; add a '.$' to the medianame (eg. 'ADFS::Flibble.$.')
        MOV     r2, #256                 ; maximum length for append_dotdefaultdir
        BL      append_dotdefaultdir     ; add '.<ADFSFiler$DefaultDir>' (if it exists)
        MOV     r0, #46
        STRB    r0, [r1], #1             ; add a '.'
        ADR     r2, filenamebuffer
        BL      strcpy_advance           ; add the filename specified by the datasave message

        ; send a DataSaveAck message specifying the new pathname
        MOV     r1, r5                   ; stick wimp event structure pointer back in r1
        MOV     r0, #256
        STR     r0, [r1]
        LDR     r0, [r1, #8]
        STR     r0, [r1, #12]            ; Your ref.
        MOV     r0, #Message_DataSaveAck
        STR     r0, [r1, #16]            ; Message action
        LDR     r2, [r1, #4]             ; task handle of sender (to send back to)
        MOV     r0, #17                  ; event code
        SWI     Wimp_SendMessage

        Pull    "pc"

dotdollar3       DCB ".$", 0
dotdollardot     DCB ".$.", 0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; message_dataload
;
; handles dataload messages
;
; In: r1 -> wimp event structure
;
; Out : registers may be corrupted - going back to wimp poll.

message_dataload

        LDR     r4, [r1, #24]            ; icon handle (for opening viewer)

; Check why we've got this message

        LDR     r0, [r1, #12]
        CMP     r0, #0                   ; we only send a DataLoadAck if the DataLoad
        BNE     %FT10                    ; was in reply to a DataSaveAck

; Case 1: Message is because user has tried to copy a selection of files to an
; icon bar device, so send a Message_FilerDevicePath.

        LDR     r6, [r1, #4]                 ; store task handle of sender (to send back to)
        MOV     r5, r1                       ; store message block pointer in r5

        MOV     r0, #256
        STR     r0, [r1]                     ; Length of message
        MOV     r0, #0
        STR     r0, [r1, #12]                ; Your ref.
        LDR     r0, =Message_FilerDevicePath
        STR     r0, [r1, #16]                ; Message action

        BL      matchdriveicon               ; returns r1 -> drive_spec
        Pull    "pc", NE
        BL      GetMediaName                 ; returns r1 -> media name
        MOV     r2, r1
        ADD     r1, r5, #20
        BL      strcpy_advance               ; copy media name into the message block
        ADR     r2, dotdollar3
        BL      strcpy_advance               ; add a .$
        MOV     r2, #256                     ; maximum size we'll allow for append_dotdefaultdir
        BL      append_dotdefaultdir         ; Add the value of ADFSFiler$DefaultDir if it exists

        MOV     r1, r5                       ; location of message data
        MOV     r2, r6                       ; task handle of sender (to send back to)
        MOV     r0, #17                      ; event code
        SWI     XWimp_SendMessage            ; send the message
        B       %FT20

; Case 2: Message is part of a save protocol, because user has saved a file
; to an icon bar device, so send the Message_DataLoadAck.
10
        LDR     r0, [r1, #8]
        STR     r0, [r1, #12]            ; Your ref.
        MOV     r0, #Message_DataLoadAck
        STR     r0, [r1, #16]            ; Message action
        LDR     r2, [r1, #4]             ; task handle of sender (to send back to)
        MOV     r0, #17                  ; event code
        SWI     XWimp_SendMessage

; Open the directory viewer of the dir we're copying/saving to.
20
        BL      matchdriveicon           ; returns r1 -> drive_spec
        Pull    "pc", NE
        BL      GetMediaName             ; returns r1 -> media name
        Push    "r1"
        ADR     r1,userdata
        ADRL    r2,FilerOpenDirCommand   ; Now create a Filer_OpenDir command
        BL      strcpy_advance
        Pull    "r2"
        BL      strcpy_advance           ; copy the media name
        ADR     r2, dotdollar3
        BL      strcpy_advance           ; add a '.$'
        MOV     r2, #256
        BL      append_dotdefaultdir     ; Add the value of ADFSFiler$DefaultDir if it exists

        ADR     r0,userdata
        SWI     XOS_CLI                  ; Execute command

        Pull    "pc"

adfsfiler_defaultdir DCB "$FSTitle.Filer$$DefaultDir",0

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; append_dotdefaultdir
;
; Read value of ADFSFiler$DefaultDir and append it to the path in r1
; (ie. does string1 becomes string1.value)
;
; In: r1 -> destination buffer
;     r2 -> size of buffer
;
; Out: r0 = corrupted
;      r1 -> next free byte in buffer
;      r2 = corrupted.
;      All other regs preserved.

append_dotdefaultdir Entry "r3-r7"

        MOV     r7, r1
        MOV     r6, r2

        ADR     r0, adfsfiler_defaultdir
        MOV     r2, #-1
        MOV     r3, #0
        MOV     r4, #0
        SWI     XOS_ReadVarVal
        CMP     r2, #0
        EXIT    EQ                       ; exit if variable doesn't exist

        MVN     r0, r2
        ADD     r0, r0, #1
        CMP     r0, r6
        EXIT    GT                       ; exit if buffer not big enough

        ADR     r0, adfsfiler_defaultdir
        ADD     r1, r7, #1
        MOV     r2, #256
        MOV     r3, #0
        MOV     r4, #0
        SWI     XOS_ReadVarVal           ; Put variable into buffer, leaving room for '.'

        ADD     r1, r1, r2
        MOV     r0, #46
        STRB    r0, [r7]                 ; Put '.' before variable's value
        MOV     r0, #0
        STRB    r0, [r1]                 ; Put NULL at end of whole string.

        EXIT
 ]


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 = state for ReportError
; Out   r1 = 1 (OK) or 2 (Cancel)

ReportError Entry "r2"

        BL      MkBannerIn_userdata
        SWI     XWimp_ReportError
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Out r2->userdata
Banner  DCB "Banner", 0
        ALIGN

MkBannerIn_userdata Entry "r0,r1,r3"
        ADR     r0, Banner
        ADR     r1, userdata
        MOV     r2, #?userdata
        MOV     r3, #0
        BL      lookuptoken
        ADRVC   r2, userdata
        STRVS   r0, [sp]
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Out r2->userdata
BackBan DCB "BackBan", 0
        ALIGN

MkBackupBannerIn_userdata Entry "r0,r1,r3"
        ADR     r0, BackBan
        ADR     r1, userdata
        MOV     r2, #?userdata
        MOV     r3, #0
        BL      lookuptoken
        ADRVC   r2, userdata
        STRVS   r0, [sp]
        EXIT

        LTORG
MenuTitleFlags  DCD     &00070207       ; Flags for menu title

        LNK     Format.s

 [ debug
        InsertDebugRoutines
        InsertHostDebugRoutines
 ]

        END
@


4.20
log
@Standardise drag-to-iconbar system variable name
While the behaviour introduced with Ursula whereby files can be dropped on the iconbar filer icon to start a copy/move operation, there is a hidden bit of functionality that you can set an alternative destination directory other than the root.
This is governed by a system variable, however Acorn's implementation erroneously called this a path, when in fact it's a directory (no trailing dot). RISC OS Ltd fixed this by the time RISC OS 4.00 came along, so this change brings this filer into sync.
For reference, the variable is "FSTitle + Filer$DefaultDir", where FSTitle can be found by calling OS_FSControl 33. eg. SCSIFiler$DefaultDir SDFSFiler$DefaultDir ADFSFiler$DefaultDir

Version 1.11. Tagged as 'ADFSFiler-1_11'
@
text
@d4091 2
a4092 1
        CMP     r5,#0
d4094 1
a4094 1
        LDR     R9,[r0,#EnumFormats_Flags]
d4123 1
d4146 1
a4146 1
        ADDVS   SP,SP,#9 *4              ;r0-r4, r0;
d4153 1
a4153 3
; ECN - This seems to 0 the menu width for some reason
;        MOV     r5,#0                    ; <<<<< ************************************** ??????????????????
        B       %BT02                    ; Don't zap menu width !
@


4.19
log
@Fix for weird text in floppy format menu
The menu icon block for the various native format floppy discs was writing the length and validation string pointers the wrong way round. By chance, there's now a vaguely valid validation string character at the address of the length of the "ADFS 1600K (F+)" entry, which made is into a string of 'o's for some reason.
Also, corrected the width calculation for half a system font character at either end - not that relevant as the Wimp's calculated it for years.
Tested briefly in an IOMD ROM, menu looks right.

Version 1.08. Tagged as 'ADFSFiler-1_08'
@
text
@d4522 2
a4523 2
        MOV     r2, #256                 ; maximum length for append_dotdefaultpath
        BL      append_dotdefaultpath    ; add '.<ADFSFiler$DefaultPath>' (if it exists)
d4587 2
a4588 2
        MOV     r2, #256                     ; maximum size we'll allow for append_dotdefaultpath
        BL      append_dotdefaultpath        ; Add the value of ADFSFiler$DefaultPath if it exists
d4621 1
a4621 1
        BL      append_dotdefaultpath    ; Add the value of ADFSFiler$DefaultPath if it exists
d4628 1
a4628 1
adfsfiler_defaultpath DCB "$FSTitle.Filer$$DefaultPath",0
d4631 1
a4631 1
; append_dotdefaultpath
d4633 1
a4633 1
; Read value of ADFSFiler$DefaultPath and append it to the path in r1
d4644 1
a4644 1
append_dotdefaultpath Entry "r3-r7"
d4649 1
a4649 1
        ADR     r0, adfsfiler_defaultpath
d4662 1
a4662 1
        ADR     r0, adfsfiler_defaultpath
@


4.18
log
@Use sone symbolic names instead of numbers
EnumFormats, WimpSpace, OsBytes exchanged in a few places so it's a bit easier to follow.
@
text
@d4084 2
d4090 1
a4090 1
        ADD     R14,R14,#12             ; +12 = Length in OS Units
a4104 2
        MOV     R1,#0
        STR     R1,[R2],#4              ; No validation string.
@


4.17
log
@Escape some dollars
Detail:
  s/ADFSFiler - Escape some dollars contained in strings to avoid warnings from objasm
Admin:
  Resulting binary unchanged


Version 1.07. Retagged as 'ADFSFiler-1_07'
@
text
@d197 1
d273 1
a273 1
        GET Hdr:NdrDebug
a297 6
        GBLL    Yes
Yes     SETL    {TRUE}
        GBLL    No
No      SETL    {FALSE}

                GBLS    CondLink
d308 7
a314 7
task    DebugIt No
xx      DebugIt No
fo      DebugIt No
bkp     DebugIt No
fom     DebugIt No
id      DebugIt No
ag      DebugIt No
a366 15
        MACRO
        LenDCB  $str1, $str2, $str3
        DoLen   $str1
        DoLen   $str2
        DoLen   $str3
        MEND

        MACRO
        DoLen   $str
      [ "$str"<>""
        DCB     :LEN:"$str"+1
        DCB     "$str", 0
      ]
        MEND

d600 1
a600 1
        SWI     XResourceFS_RegisterFiles       ; ignore errors
d623 1
a623 1
PathDefault     DCB     "Resources:$.Resources.$FSTitle.Filer."
d899 2
a900 2
     [ standalone
        ADRL     r0, ResourceFSFiles
d903 1
a903 1
      B       %FT10
d1877 1
a1877 1
        MOV     r0, #ReadCMOS
d2654 1
a2654 1
        MOV     r0, #ReadCMOS
d2666 1
a2666 1
        MOV     r0, #WriteCMOS
d2679 1
a2679 1
        MOV     r0, #WriteCMOS
d3885 1
a3885 1
        LDR     R2,[R2]
d3934 1
a3934 1
        ADR     R14,m_floppydisc+m_headersize+(mi_size*mo_fl_format)+12
d3968 1
a3968 1
        ADD     R4,R4,#28
d4008 1
a4008 1
        MOVEQ   R1,#1 :SHL: 3           ; Generate menu warning
d4042 2
a4043 2
        LDR     R11,[r0,#12]
        LDR     R3, [r0,#16]
d4064 1
a4064 1
        TST      R14,#EnumFormats_IsNative
d4071 1
a4071 1
        LDR     R1,[r0,#4]
d4095 1
a4095 1
        CMP     R14,R5
d4099 1
a4099 1
        CMP     R14,R6
d4118 1
a4118 1
        LDR     r0,[r0]
d4124 1
a4124 1
        MOV     R1,#&80                 ; Menu flags.
d4158 3
a4160 3
        LDR     r0,[R4,#-24]
        ORR     r0,r0,#&80
        STR     r0,[R4,#-24]
d4165 1
a4165 1
        STR     R6,[R1,#16]
d4167 1
a4167 1
        STR     R5,[R1,#16]
d4176 1
a4176 1
        STR     r1,[r2,#4]
d4722 1
a4722 2
CondLink        SETS    " LNK s.Format"
$CondLink
@


4.16
log
@Build fix
Hdr:Services moved up above Hdr:Wimp.
Retagged as ADFSFiler-1_07
@
text
@d641 1
a641 1
Path            DCB     "$FSTitle.Filer$Path"
d4648 1
a4648 1
adfsfiler_defaultpath DCB "$FSTitle.Filer$DefaultPath",0
@


4.15
log
@Fix null pointer dereference querying the current format of a disc
The code that issues Service_IdentifyDisc in order to populate the 'Format > Current Format' menu entry has since the dawn of time passed in R8=0 as the private word pointer. It seems to have thought setting up R12 for the filing system in question was all that was needed, not realising that FileCore ignores Service_IdentifyDisc for all but the base incarnation (R12=0).
Prior to FileCore 3.50 this didn't seem to matter since FileCore had already messed about reading sectors and hence the map area already existed, FileCore 3.50 is smarter, but as a side effect does need R8 to be valid so the allocation can be apportioned to the right instantiation.
Menu population ammended to use a different OS_Module call to get the private word, then fiddle it into a private word pointer for the duration of the work.

Tested on IOMD with all 7 floppy types it offers in the menu.

Version 1.06. Tagged as 'ADFSFiler-1_06'
@
text
@d195 1
a196 1
	GET	Hdr:Machine.<Machine>
a207 1
        GET     Hdr:Services
@


4.14
log
@  New build variant, and some bugfixes for the SCSI variant.
Detail:
  * Added the ability to build SDFSFiler. Interrim sprite kindly furnished
    by Steve Revill.
  * Backup menu item is now always shaded for SCSIFS (and SDFS) since these
    filing systems are not currently supported by the backup code.
  * Share menu is shaded for SCSI::5 - SCSI::7 since there are no CMOS bits
    for those drives.
  * Fixed a bug where selecting "Not shared" for SCSI::4 didn't update CMOS.
Admin:
  Tested on a beagleboard.

Version 1.04. Tagged as 'ADFSFiler-1_04'
@
text
@d1766 1
a1766 1
FileCorePercentADFS     DCB     "FileCore%$FSTitle",0
d4313 3
a4315 3
        ; Prefer FileCore%ADFS for the service call
        MOV     r0, #ModHandReason_MakePreferred
        ADRL    r1, FileCorePercentADFS
d4327 3
a4329 1
        MOV     r8, #0                          ; No private word - perfering did the business
d4332 1
@


4.13
log
@Update to use some of the exported FileCore headers.
There are still a large number of local copies that should be visited, but this change at least allows it to assemble again FileCore-3_45.

Version 1.03. Tagged as 'ADFSFiler-1_03'
@
text
@d180 5
d186 1
a186 1
HotPlug SETL    SCSI :LAND: {TRUE}
d211 3
d219 1
d252 19
d412 1
d422 1
d448 1
a448 5
 [ SCSI
len_mediaprefix *       :LEN:"scsi::"-len_colon
 |
len_mediaprefix *       :LEN:"adfs::"-len_colon
 ]
d573 1
a573 5
 [ SCSI
 ! 0, "SCSIFiler workspace is ":CC:(:STR:(:INDEX:@@)):CC:" bytes"
 |
 ! 0, "ADFSFiler workspace is ":CC:(:STR:(:INDEX:@@)):CC:" bytes"
 ]
d576 1
a576 5
 [ SCSI
driveno *       m_floppydisc + m_title + :LEN:"adfs:"
 |
driveno *       m_floppydisc + m_title + :LEN:"adfs:"
 ]
d642 1
a642 4
 [ SCSI
Path            DCB     "SCSIFiler$Path"
                DCB     0
PathDefault     DCB     "Resources:$.Resources.SCSIFiler."
d644 1
a644 2
 |
Path            DCB     "ADFSFiler$Path"
a645 3
PathDefault     DCB     "Resources:$.Resources.ADFSFiler."
                DCB     0
 ]
d650 5
d664 1
a671 3
        DCB     "SCSIFiler"
      |
        DCB     "ADFSFiler"
d673 1
a683 2
 [ SCSI

d685 4
a688 4
Desktop_SCSIFiler_Help
        DCB   "The SCSIFiler provides the SCSI icons on the icon bar, and "
        DCB   "uses the Filer to display SCSI directories.",13,10
        DCB   "Do not use *Desktop_SCSIFiler, use *Desktop instead.",0
d690 1
a690 1
Desktop_SCSIFiler_Syntax  DCB   "Syntax: *Desktop_"       ; drop through!
d692 3
a694 12
Desktop_SCSIFiler_Help          DCB     "HSFLDSK", 0
Desktop_SCSIFiler_Syntax        DCB     "SSFLDSK", 0
 ]

ADFSFiler_TitleString     DCB   "SCSIFiler", 0
                          ALIGN

ADFSFiler_CommandTable      ; Name     Max min

ADFSFiler_StarCommand
 [ tokenhelp
        Command Desktop_SCSIFiler,     3, 0, International_Help
d696 2
a697 1
        Command Desktop_SCSIFiler,     3, 0, 0
a698 13

 |

 [ International_Help = 0 :LOR: :LNOT: tokenhelp
Desktop_ADFSFiler_Help
        DCB   "The ADFSFiler provides the ADFS icons on the icon bar, and "
        DCB   "uses the Filer to display ADFS directories.",13,10
        DCB   "Do not use *Desktop_ADFSFiler, use *Desktop instead.",0

Desktop_ADFSFiler_Syntax  DCB   "Syntax: *Desktop_"       ; drop through!
 |
Desktop_ADFSFiler_Help          DCB     "HAFLDSK", 0
Desktop_ADFSFiler_Syntax        DCB     "SAFLDSK", 0
d701 1
a701 1
ADFSFiler_TitleString     DCB   "ADFSFiler", 0
d708 1
a708 1
        Command Desktop_ADFSFiler,     3, 0, International_Help
d710 1
a710 3
        Command Desktop_ADFSFiler,     3, 0, 0
 ]

d720 1
a720 5
 [ SCSI
Desktop_SCSIFiler_Code Entry
 |
Desktop_ADFSFiler_Code Entry
 ]
d1007 1
a1007 1
      [ SCSI
d1009 1
a1009 1
        DCB     "IconSprites SCSIFiler:Sprites",0
d1202 1
a1202 1
      [ SCSI
d1224 4
d1238 1
d1465 1
a1465 5
 [ SCSI
        MOV     r14, #fsnumber_SCSIFS   ; FileSystem = SCSI
 |
        MOV     r14, #fsnumber_adfs     ; FileSystem = adfs
 ]
d1566 1
a1566 1
      [ SCSI ; always shade the format item
d1574 3
d1579 1
d1610 1
a1610 5
 [ SCSI
        ADD     r2, r1, #:LEN:"scsi::"
 |
        ADD     r2, r1, #:LEN:"adfs::"
 ]
d1659 11
d1671 1
d1673 1
d1766 1
a1766 5
 [ SCSI
FileCorePercentADFS     DCB     "FileCore%SCSI",0
 |
FileCorePercentADFS     DCB     "FileCore%ADFS",0
 ]
d1982 1
a1982 5
 [ SCSI
        SWIVC   XSCSIFS_MiscOp
 |
        SWIVC   XADFS_MiscOp
 ]
d2041 1
a2041 5
 [ SCSI
adfscolon       DCB     "SCSI:",0       ; no aliases any more !
 |
adfscolon       DCB     "ADFS:",0       ; no aliases any more !
 ]
d2045 1
a2045 5
 [ SCSI
desk_backup     DCB     "Desktop_SCSIFiler -Backup n ",0        ; NB ':' not accepted here
 |
desk_backup     DCB     "Desktop_ADFSFiler -Backup n ",0        ; NB ':' not accepted here
 ]
d2048 1
a2048 5
 [ SCSI
desk_free       DCB     "ShowFree -FS SCSI n ",0                ; No : to allow showfree to work.
 |
desk_free       DCB     "ShowFree -FS ADFS n ",0                ; No : to allow showfree to work.
 ]
d2144 1
d2152 1
d2193 1
a2193 5
 [ SCSI
        ADD     r2, r2, #:LEN:"scsi::"  ; r2 -> discname
 |
        ADD     r2, r2, #:LEN:"adfs::"  ; r2 -> discname
 ]
d2202 2
d2322 1
a2322 5
 [ SCSI
        ADD     r2, r1, #:LEN:"scsi::"
 |
        ADD     r2, r1, #:LEN:"adfs::"
 ]
d2469 1
a2469 1
        MOV     r2, #SCSIbitS
d2725 4
d2920 1
a2920 5
      [ SCSI
        SWI     XSCSIFS_DescribeDisc
      |
        SWI     XADFS_DescribeDisc
      ]
d2994 6
d3011 1
d3017 1
a3017 5
      [ SCSI
        SWI     XSCSIFS_Drives
      |
        SWI     XADFS_Drives
      ]
d3038 1
a3038 5
      [ SCSI
        SWI     XSCSIFS_MiscOp
      |
        SWI     XADFS_MiscOp
      ]
d3049 1
a3049 5
      [ SCSI
        SWI     XSCSIFS_MiscOp
      |
        SWI     XADFS_MiscOp
      ]
d3060 1
a3060 5
      [ SCSI
        SWI     XSCSIFS_MiscOp
      |
        SWI     XADFS_MiscOp
      ]
d3071 1
a3071 5
      [ SCSI
        SWI     XSCSIFS_MiscOp
      |
        SWI     XADFS_MiscOp
      ]
d3082 1
a3082 5
      [ SCSI
        SWI     XSCSIFS_MiscOp
      |
        SWI     XADFS_MiscOp
      ]
d3093 1
a3093 5
      [ SCSI
        SWI     XSCSIFS_MiscOp
      |
        SWI     XADFS_MiscOp
      ]
d3104 1
a3104 5
      [ SCSI
        SWI     XSCSIFS_MiscOp
      |
        SWI     XADFS_MiscOp
      ]
d3115 1
a3115 5
      [ SCSI
        SWI     XSCSIFS_MiscOp
      |
        SWI     XADFS_MiscOp
      ]
d3230 1
d3232 1
d3236 2
d3255 1
a3255 5
      [ SCSI
        ADD     r2, r1, #:LEN:"scsi::"
      |
        ADD     r2, r1, #:LEN:"adfs::"
      ]
d3337 2
d3722 4
d3733 1
d4060 1
a4060 1
      [ :LNOT: SCSI
d4291 1
a4291 5
      [ SCSI
        SWI     XSCSIFS_DescribeDisc
      |
        SWI     XADFS_DescribeDisc
      ]
d4646 1
a4646 5
 [ SCSI
adfsfiler_defaultpath DCB "SCSIFiler$DefaultPath",0
 |
adfsfiler_defaultpath DCB "ADFSFiler$DefaultPath",0
 ]
@


4.12
log
@Fix errors on attempting to backup or verify.
Firstly, when ADFS is not in ROM there are no ADFSFiler resources, and the verify and backup templates were being read from that directory. Copied the logic from s.ADFSFiler to try SCSIFiler resources first and fallback if absent.
This then exposed some code in the backup loop that had been missed in 32 bitting, leading to an explosion on the first UpCall.
Trimmed out a few unnecessary instructions so the module hasn't got any bigger.
Deleted 2D templates.

Version 1.02. Tagged as 'ADFSFiler-1_02'
@
text
@d1985 1
a1985 1
        MOVVC   r0, #Misc_Eject
@


4.11
log
@Fix ADFSFiler/SCSIFiler to refuse to start their WIMP task if ADFS/SCSI module is missing
Detail:
  s/ADFSFiler - For as long as CVS history has recorded, SetUpIconBar has always had the behaviour of exiting with EXITS if the first ADFS/SCSI SWI call fails. This was causing the calling code to think that everything was fine, when really the module should have reported the error to the user/system. This has no been fixed, so attempting to start ADFSFiler/SCSIFiler without the underlying FS module being available now results in an error message.
Admin:
  Tested on rev C2 beagleboard (ADFSFiler+SCSIFiler in ROM), plus with ADFSFiler softload on Iyonix.


Version 1.01. Tagged as 'ADFSFiler-1_01'
@
text
@d2255 1
a2255 2
        BIC     r0, r0, r0
        ADD     r0, r0, #1                ; r0 -> 1 = protected
a2256 1

d2287 1
a2287 1
        BIC     r0, r0, r0                ; r0 -> 0 = unprotected
@


4.10
log
@Modify ADFSFiler/SCSIFiler sources so that SCSIFiler is no longer dependent on ADFSFiler's resources and resource path variable
Detail:
  s/ADFSFiler - Instead of blindly loading its templates from ADFSFiler:Templates, SCSIFiler now tries two locations - SCSFiler:Templates and ADFSFiler:Templates
  Makefile - By specifying the 'SCSITEMPLATES=yes' option, the shared templates file will now be placed in SCSIFiler's resources instead of just ADFSFiler's.
  Together these changes allow ADFS-less builds (e.g. OMAP) to avoid including the ADFSFiler module in their ROM, thus saving a bit of extra space and avoiding any issues caused by ADFSFiler not behaving sensibly when the ADFS module isn't present
Admin:
  Tested on rev C2 beagleboard.


Version 1.00. Tagged as 'ADFSFiler-1_00'
@
text
@d3034 1
a3034 1
SetUpIconBar EntryS
d3041 1
a3041 1
        EXITS   VS                      ; r2 := no of winnies
@


4.9
log
@Resources phase now works properly again, for both ADFSFiler and SCSIFiler.
Now hourglasses round the [AD|SCSI]FS_DescribeDisc that causes the initial
mount of a new disc.

Version 0.97. Tagged as 'ADFSFiler-0_97'
@
text
@d1238 7
d1247 1
d3777 1
@


4.8
log
@If devices appeared or disappeared before a menu was first opened, you
used to get an abort in the Wimp - now fixed.

Version 0.96. Tagged as 'ADFSFiler-0_96'
@
text
@d218 1
d2931 1
d2939 2
a2940 1
        EXIT    VS
d2971 5
@


4.7
log
@* Added support for hot-plugging of drives using UpCalls 24 and 25.
* Added different removable-disc sprite.
* A couple of 32-bitting fixes.

Version 0.95. Tagged as 'ADFSFiler-0_95'
@
text
@d891 1
a891 1
        STRVS   r0, [r2, #:INDEX:menuopen]
@


4.6
log
@  Merged in SCSIFiler.
Detail:
  SCSIFiler was obviously adapted from ADFSFiler sources, so the obvious
  approach to getting an up-to-date SCSIFiler is to make it a build variant
  of ADFSFiler. Run amu with
    COMPONENT=SCSIFiler ASFLAGS="-PD \"SCSI SETL {TRUE}\""
  to build SCSIFiler.
Admin:
  Overhauled versioning because SCSIFiler is already somewhat ahead of
  ADFSFiler in version numbers, and we don't want to bump ADFSFiler's version
  up too much jusr because of this. They will automatically remain a fixed
  distance apart.

Version 0.94. Tagged as 'ADFSFiler-0_94'
@
text
@d180 2
a241 2
;XADFS_DescribeDisc      *       Auto_Error_SWI_bit + &40245

d369 8
d379 1
a393 12

;XADFS_Drives *  &40242 + Auto_Error_SWI_bit

bignum          *       &0FFFFFFF

initbrx         *       100
initbry         *       1024-80

brxoffset       *       64
bryoffset       *       64

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
d423 10
d522 6
d584 4
d640 3
d889 5
d1020 6
d1032 3
d1089 3
d1094 6
d1118 46
a1167 1

d1215 5
d1231 1
d1235 1
d1322 5
d1329 1
d1339 1
a1347 1
        ADR     lr, repollwimp
a1349 1
        ADR     lr, repollwimp
a1351 1
        ADR     lr, repollwimp
d1357 5
a1361 4
        LDREQ   r0, [r1, #24]
        SWIEQ   XWimp_ProcessKey
        BEQ     repollwimp

d1369 5
d1716 3
d1789 42
d1839 1
d1841 2
a1842 2
        ADRGT   r14, m_backup                   ; only have submenu if >1 drive
        STRGT   r14, m_floppydisc + m_headersize + mi_size*mo_fl_backup + mi_submenu
d1871 4
d2037 3
d2084 16
d2111 1
d3004 6
d3014 1
a3014 2


d3027 1
d3029 1
d3035 130
d3208 1
d3266 1
a3266 1
        SWIGE   XWimp_DeleteIcon
d3380 5
a3384 1
;       r3 = handle of icon to open next to
d3427 9
d3443 1
d3448 4
d3454 1
d3459 1
a3459 1
        EXIT                            ; returns r0 = icon handle
d3585 5
d3851 54
d4306 1
a4306 1
        MOVNV   r0,r0
d4348 1
a4348 1
        ; Perfer FileCore%ADFS for the service call
d4400 134
d4763 1
a4763 1
BackBan  DCB "BackBan", 0
a4785 2


@


4.5
log
@32 bit flag added
Fix for a pair of SWINE which caused verify to complain of "disc drive
not known" at every 512 Mbyte boundary.

Version 0.91. Tagged as 'ADFSFiler-0_91'
@
text
@d176 5
d204 3
d208 1
d217 1
a217 1
        GET     Version
d226 1
a226 1
givehelp        SETL    Version >= 23
d263 4
a266 2
        GBLL    standalonemessages
standalonemessages  SETL    {FALSE}
d374 5
d382 1
a401 1
        [ Version >= 20
d420 3
d424 1
a424 1
        ]
a433 1
        [ Version >= 21
a434 1
        ]
a461 6
        [ Version < 20
ndrives         *       6                ; allow for drives 0..5
iconbaricons    #       ndrives*4        ; associate icon handle with index
fileprefixes    #       ndrives*4        ; points to drive spec.
        ]

a477 3
        [ Version >= 20

          [ Version >= 34
a478 3
          |
ndrives         *       6                ; allow for drives 0..5
          ]
a482 3
        ]

        [ Version >= 40
a504 1
        ]
a505 1
        [ Version >= 33
a515 1
        ]
a516 1
        [ Version >= 26
a517 1
        ]
d533 3
d537 1
d540 1
d542 3
d583 1
a583 1
      [ standalonemessages
d606 6
d616 1
d619 1
a619 1
      [ standalonemessages
d621 6
a626 2
        ResourceFile    Resources.<Locale>.Messages,  Resources.ADFSFiler.Messages
        ResourceFile    Resources.<Locale>.Templates, Resources.ADFSFiler.Templates
d632 4
d637 1
d639 36
a674 1
        DCB     "$VString ($Date)", 0
a698 3
      [ Version >= 37 :LAND: Version <= 42
        Command ADFSBackup,            2, 2
      ]
d700 1
d709 3
d713 1
a714 1
      [ Version >= 42
a722 1
      ]
a729 1
      [ Version >= 42
a730 1
      ]
d774 1
a774 1
      [ standalonemessages
d793 1
a793 1
      [ standalonemessages
d812 1
a812 1
      [ standalonemessages
a854 1
      [ Version >= 33
a857 1
      ]
a868 1
     [ Version >= 42
a871 1
     ]
a877 1
      [ Version >= 25
a888 1
      ]
d908 1
a908 1
     [ standalonemessages
a918 1
     [ Version >= 42
a922 1
     ]
a930 1
      [ Version >= 33
a933 2
      ]
      [ Version >= 40
a937 1
      ]
a994 1
      [ Version >= 32
a995 1
      [ Version >= 33
a996 1
      ]
a1001 1
      ]
a1002 1
      [ Version >= 23
a1003 1
      ]
a1051 1
      [ Version >= 42
a1074 2
      ]

a1083 1
      [ Version >= 42
a1085 3
      |
        ADRL    sp, stacktop            ; STACK IS NOW VALID!
      ]
a1229 1
      [ Version >= 33
a1232 1
      ]
a1237 1
      [ Version >= 33
a1251 1
      ]
a1297 1
      [ Version >= 33
a1298 3
      |
        EXIT    NE
      ]
a1307 1
      [ Version >= 42
a1308 1
      ]
a1329 4
      [ Version < 20
        LDRB    r14, [r1, #1]           ; initialise drive number (for menu)
        STRB    r14, driveno+1
      ]
a1335 1
      [ Version >= 42
a1348 4
      |
        LDR     r0, =Message_FilerOpenDir
        BL      messagetoFiler
      ]
d1360 3
d1364 1
d1465 3
d1470 1
d1505 3
d1509 1
a1578 1
      [ Version >= 20
a1586 3
      |
        LDREQ   r1, [r1, #fileprefixes-iconbaricons-4]   ; r1 -> drive spec
      ]
a1614 4
      [ Version < 25
        !       1,"Old menu stuff is in Sources.OldMenus"
      ]

a1643 1
        [ Version >= 40
d1649 3
d1653 1
a1653 2
        ]
 [ Version >= 76
a1654 1
 ]
a1680 1
      [ Version >= 26
a1691 1
      ]
a1759 1
      [ Version >= 18
a1762 1
      ]
a1764 1
      [ Version >= 18
a1775 1
      ]
a1795 1
      [ Version >= 20
a1806 1
      ]
a1807 1
      [ Version >= 18
a1809 4
      |
        ADR     r1, driveno             ; don't allow this to clash!
        BL      GetMediaName            ; delete old/new disc
      ]
d1822 3
d1826 1
a1829 1
      [ Version >= 33
a1830 1
      ]
d1882 3
d1886 1
d1890 3
d1894 1
d1897 3
d1901 1
a2020 1
      [ Version >= 42
d2027 3
d2031 1
a2039 2
      ]

d2160 3
d2164 1
d2243 4
d2267 1
d2276 4
d2300 1
d2309 4
d2333 1
d2342 4
d2366 1
d2381 5
d2389 1
d2395 5
d2403 1
d2408 1
d2462 1
d2518 3
d2522 1
d2530 3
d2534 1
d2543 3
d2547 1
d2552 5
d2565 1
a2618 4
      [ Version < 39
        LDR     r0, =Message_FilerCloseDir
        BL      messagetoFiler
      ]
a2621 1
      [ Version >= 39
a2625 5
      |
        LDR     r2, [sp]                ; r2 -> "adfs::discname"
        ADD     r2, r2, #:LEN:"adfs::"  ; r2 -> discname
        BL      strcpy
      ]
a2636 1
      [ Version >= 37
a2639 1
      ]
a2640 1
      [ Version >= 26
a2641 3
      |
copycommand Entry
      ]
a2684 1
      [ Version >= 42
a2685 3
      |
        BL      dismountit
      ]
a2729 1
      [ Version >= 42
a2730 3
      |
        BL      dismountit
      ]
d2757 3
d2761 1
a2819 1
      [ Version >= 20
a2820 5
      |
        FixDCB  2, "$title"        ; text field on iconbar (maybe)
        DCB     "$drvspec", CR
        ALIGN
      ]
a2825 1
      [ Version >= 34
a2827 1
      ]
d2840 3
d2844 1
a2848 1
      [ Version >= 20
a2849 3
      |
        ADR     r4, iconbaricons        ; remember icon handles in here
      ]
a2851 1
      [ Version >= 34
d2864 1
a2864 1
      ]
a2906 1
      [ Version >= 20
a2921 1
      [ Version >= 22
a2923 4
      |
        EXIT    VS
        ADD     r3, r1, #len_mediaprefix        ; r3 -> disc name
      ]
a2959 14
      |

AddToIconBar Entry "r1-r3"

        BL      AllocateIcon                    ; NB. icon handles start at 1
        ADDVC   r1, r1, #12+2                   ; r1 -> file prefix
        STRVC   r1, [r4, #fileprefixes-iconbaricons] ; remember file prefix
        STRVC   r0, [r4], #4

        BL      call_share              ; check if S/P bits in CMOS are set

        EXIT
      ]

d2965 1
d2972 1
d2977 3
d2981 1
d3002 9
d3051 2
a3052 1
        MOVEQ   r9, #1                    ;set r9 to1 ifP bit is set (means shared protected)
a3064 1
      [ Version >= 20
a3108 1
     [ Version >= 21
a3112 1
      [ Version >= 29
a3125 5
      |
        MOVGE   r14, #-3                        ; -3 => open to left of icon
        STRGE   r14, [r1, #u_handle]
      ]
     ]
a3128 41
      |

; In    r1 -> block (as above)

; Out   r0 = icon index

AllocateIcon Entry "r1-r4, x0, y0, x1, y1"

        MOV     r2, r1
        MOV     r0, #SpriteReason_ReadSpriteSize
        Push    r1
        SWI     XWimp_SpriteOp                  ; r3, r4 = pixel size

        MOVVC   r0, r6                          ; creation mode of sprite

        MOVVC   r1, #VduExt_XEigFactor
        SWIVC   XOS_ReadModeVariable
        MOVVC   x0, #0
        ADDVC   x1, x0, r3, LSL r2              ; pixel size depends on sprite

        MOVVC   r1, #VduExt_YEigFactor
        SWIVC   XOS_ReadModeVariable
        MOVVC   y0, #20                         ; sprite baseline
        ADDVC   y1, y0, r4, LSL r2
        MOVVC   y0, #-16                        ; text baseline

        Pull    r1                              ; r1 -> original block

        ADRVC   r14, userdata
        MOVVC   r0, #-2                         ; lhs of icon bar
        STMVCIA r14!, {r0, x0, y0, x1, y1}      ; window handle, icon coords
        LDRVC   r0, iconbariconflags
        ADDVC   r2, r1, #14                     ; r2 --> text (eg. :0)
        SUBVC   r3, r1, #1                      ; r3 --> validation string
        MOVVC   r4, #2                          ; length of text
        STMVCIA r14, {r0, r2-r4}                ; icon flags, data

        ADRVC   r1, userdata
        SWIVC   XWimp_CreateIcon
        EXIT
      ]
a3243 1
     [ Version >= 33
a3245 1
      [ Version >= 40
a3253 6
      |
        BEQ     BuildFormatMenu
        EXIT    VS
      ]
     ]

a3308 1
      [ Version >= 33
a3312 1
      [ Version >= 40
a3328 11
      |
        LDR     r14,FormatList          ; -> First entry
01
        LDR     r2,[r14,#20]
        CMP     r2,#0                   ; Is it 'greyed out' (not on menu)
        LDREQ   r14,[r14]
        BEQ     %BT01
        SUBS    r3,r3,#1
        LDRPL   r14,[r14]
        BPL     %BT01
      ]
a3342 1
      ]
a3361 1
      [ Version >= 26
a3366 1
      ]
a3383 1
      [ Version >= 26
a3384 3
      |
        SUBVC   r0, r0, #1              ; r0 -> "Hxx" token
      ]
d3422 3
a3424 1
        [ Version >= 28
d3426 1
a3426 4
        |
str_messagefile DCB     "Wimp:Messages.ADFSFiler", 0
        ]
        [ Version >= 33
a3427 1
        ]
a3429 4
      [ Version < 24
        !       1, "Sorry, this source file can't make version 0.23"
      ]

a3513 1
      [ Version >= 33
a3540 1
      [ Version > 40
a3541 1
      ]
a3542 1
      [ Version >= 40
a3545 1
      ]
a3557 1
     [  Version >= 40
a3559 1
     ]
a3579 1
     [ Version >= 40
a3580 1
     ]
a3583 1
     [ Version >= 40
a3586 1
     ]
a3589 1
      [ Version >= 40
a3591 1
      ]
a3599 1
      [ Version >= 40
a3609 4
      |
        LDMIA   R14,{r3-r5}             ; Title is same string as format entry.
        STMIA   R2!,{r3-r5}
      ]
a3616 1
      [ Version >= 40
a3617 1
      ]
a3619 1
      [ Version >= 40
a3620 1
      ]
a3623 1
      [ Version >= 40
a3625 1
      ]
a3627 1
      [ Version >= 40
a3633 1
      ]
a3651 1
      [ Version >= 40
a3666 1
      ]
a3667 1
      [ Version >= 40
a3670 3
      |
        MOV     R1,#0                   ; Menu flags.
      ]
a3671 1
      [ Version >= 40
a3674 3
      |
        MOV     R1,#-1                  ; No submenu
      ]
a3677 1
      [ Version >= 40
a3698 1
      ]
d3700 1
d3722 1
a3723 1
      [ Version >= 40
a3727 1
      ]
a3749 1
      [ Version >= 40
a3762 1
      ]
a3767 1
      [ Version >= 40
a3778 1
      ]
a3782 1
      [ Version >= 40                   ; Add "Other formats" menu entry.
a3815 2
      ]

a3818 6
      [ Version < 40
        LDR     r0,[R3,#-24]
        ORR     r0,r0,#&80
        STR     r0,[R3,#-24]
      ]
      [ Version >= 40
a3822 2
      ]

a3824 1
      [ Version >= 40
a3826 1
      ]
a3838 1
      [ Version >= 40
a3841 1
      ]
a3924 3
      ] ; Version >= 33

     [ Version >= 40
d3931 3
d3935 1
a4007 2
     ]

d4156 3
d4160 1
a4251 1
 [ Version >= 33
a4252 1
 ]
a4253 1
 [ Version >= 33
a4254 1
 ]
@


4.4
log
@  Fix for bug in datasave handler, and iconbar positioning fault.
Detail:
  * The iconbar position is determined by the first character of the
    indirection data. If this is 'f' it's a floppy disc and gets a floppy
    discs position, otherwise it's a harddisc. The first character of the
    indirection data is a 'S' to indicate it is a sprite. The correct
    operation is now performed.
  * Message DataSave is only dealt with if it applies to an iconbar icon,
    and not if it's any old icon.
Admin:
  Tested and works fine. However, ShareFS now appears in the wrong
  position (between harddiscs and floppydiscs). It might be wise to update
  the position of ShareFS on the iconbar to rectify this.

Version 0.90. Tagged as 'ADFSFiler-0_90'
@
text
@d176 1
a545 2
        LEADR   Module_LoadAddr

d564 1
d574 1
a574 1
ADFSFiler_Init  ENTRY "r1-r5"
a597 1
        EXIT    VS
d599 1
a599 1
        EXITS
d650 2
d655 1
a655 1
Desktop_ADFSFiler_Code ENTRY
d742 1
a742 1
        MOVNES  pc, lr
d765 1
a765 1
        Pull    "r0-r3,pc",,^
d772 1
a772 1
ADFSFiler_Service_StartedFiler ENTRY
d781 1
a781 1
ADFSFiler_Service_StartFiler ENTRY "r2,r3,r6"
d829 1
a829 1
ADFSFiler_Service_MessageFileClosed ENTRY "r0,r1,r12"
d833 1
a833 1
        EXITS   LE
d839 1
a839 1
        EXITS
d842 1
a842 1
ADFSFiler_Service_Reset ENTRY "r0-r11"
d854 1
a854 1
        EXITS                           ; Sorry, but no can do errors here
d858 1
a858 1
ADFSFiler_Die ENTRY "r0-r11"
d880 2
a881 1
        EXITS                           ; Sorry, but no can do errors here
d990 1
a990 1
load_template ENTRY , 16                ; 16 bytes of stack for name
d1020 1
a1020 1
        MOVNES  PC,LR
d1027 1
a1027 1
        Pull    "r0-r4,PC",EQ,^
d1260 1
a1260 1
event_mouse_click ENTRY
d1344 1
a1344 1
messagetoFiler ENTRY
d1417 1
a1417 1
        ENTRY
d1484 2
a1485 2
        EXITS   VS
        EXITS   NE                              ; user chickened out!
d1535 1
a1535 1
        EXITS   VS
d1538 1
a1538 1
        EXITS
d1550 1
a1550 1
matchdriveicon  ENTRY "r2"
d1586 1
a1586 1
CreateMenu ENTRY "r2, r3"
d1645 1
a1645 1
CopyMenus ENTRY "r1-r3"
d1696 1
a1696 1
event_menu_select ENTRY
d1708 6
a1713 4
        LDRNEB  r8, driveno+1
        BLNE    update_menu_iconbar     ; update menu to gray out any items necessary
        LDRNE   R1, menuhandle
        SWINE   XWimp_CreateMenu        ; here we go again!
d1722 1
a1722 1
DecodeMenu ENTRY
d1902 8
a1909 5
        ADREQ   r3, desk_backup
        BLEQ    copycommand1
        ADRNE   r3, backup
        BLNE    copycommand

d1974 1
a1974 1
interactive_command ENTRY
d2007 1
a2007 1
dismountit_byname       ENTRY "r1"
d2136 1
a2136 1
SetShareD       ENTRY
d2202 1
a2202 1
UnSetShareD     ENTRY
d2219 1
a2219 1
WriteCMOSbitS   ENTRY                     ; write S bit in CMOS
d2247 1
a2247 1
WriteCMOSbitP   ENTRY                     ; write P bit in CMOS
d2275 1
a2275 1
ClearCMOSbitS   ENTRY                     ; clear S bit in CMOS
d2303 1
a2303 1
ClearCMOSbitP   ENTRY                     ; clear P bit in CMOS
d2333 1
a2333 1
scan_CMOS      ENTRY
d2415 1
a2415 1
tick_share      ENTRY                     ; tick share option
d2419 1
a2419 1
        EXITS
d2421 1
a2421 1
untick_share    ENTRY                     ; untick share option
d2425 1
a2425 1
        EXITS
d2427 1
a2427 1
tick_protected  ENTRY                     ; tick protected option
d2434 1
a2434 1
tick_notshared  ENTRY                     ; tick not shared option
d2441 1
a2441 1
tick_unprotected ENTRY                    ; tick unprotected option
d2448 1
a2448 1
shade_namedisc  ENTRY                     ; shade namedisc
d2452 1
a2452 1
        EXITS
d2454 1
a2454 1
shade_verify  ENTRY                     ; shade verify
d2458 1
a2458 1
        EXITS
d2462 1
a2462 1
ReadCMOSbits    ENTRY                     ; Out: r2 -> content of location &6B (ADFS CMOS bits)
d2466 1
a2466 1
        EXITS
d2468 1
a2468 1
WriteCMOSbits   ENTRY                     ; r3 -> bit mask to write under
d2476 1
a2476 1
ClearCMOSbits   ENTRY                     ; r3 -> bit mask to write under
d2498 1
a2498 1
EncodeMenu ENTRY "r0, r1"
d2520 1
a2520 1
TickMenu ENTRY "r1, r2"
d2528 1
a2528 1
        EXITS
d2533 1
a2533 1
UnTickMenu ENTRY "r1, r2"
d2541 1
a2541 1
        EXITS
d2546 1
a2546 1
dismountit ENTRY "r1"
d2576 1
a2576 1
copycommand1 ENTRY "r2"
d2582 1
a2582 1
copycommand ENTRY "r2"
d2584 1
a2584 1
copycommand ENTRY
d2601 1
a2601 1
GetMediaName ENTRY "r1-r3"
d2650 1
a2650 1
GetMediaName_warn ENTRY "r1-r3"
d2690 1
a2690 1
checkambiguous ENTRY "r1-r5"
d2705 1
a2705 1
GetMediaName_nochecks ENTRY "r1-r7"
a2776 5
ic_floppy0      IconDef "floppydisc", ":0", "$"
ic_floppy1      IconDef "floppydisc", ":1", "$"
ic_floppy2      IconDef "floppydisc", ":2", "$"
ic_floppy3      IconDef "floppydisc", ":3", "$"

d2785 6
d2794 1
a2794 1
SetUpIconBar ENTRY
d2866 1
a2866 1
AddToIconBar ENTRY "r1-r3, r5"
d2925 1
a2925 1
AddToIconBar ENTRY "r1-r3"
d2938 1
a2938 1
call_share      ENTRY
d3034 1
a3034 1
AllocateIcon ENTRY "r1-r5, x0, y0, x1, y1"
d3104 1
a3104 1
AllocateIcon ENTRY "r1-r4, x0, y0, x1, y1"
d3160 1
a3160 1
strcat ENTRY "r1-r3"
d3177 1
a3177 1
        EXITS
d3209 1
a3209 1
strcpy_advance ENTRY "r2"
d3219 1
a3219 1
        EXITS
d3234 1
a3234 1
event_user_message ENTRY
d3474 1
a3474 1
lookuptoken ENTRY "r0-r7"
d3493 1
a3493 1
lookuperror ENTRY "r0-r7"
d3514 1
a3514 1
allocatemessagedata ENTRY "r1, r2"
d3541 1
a3541 1
deallocatemessagedata ENTRY "r0,r2"
d3944 1
a3944 1
        Pull    "r0-r6,r11,PC",,^
d3974 1
a3974 1
        Pull    "r0-r4,PC",EQ,^
a4124 3
        LDR     r4, [r1, #20]            ; window handle
        CMP     r4, #iconbar_whandle     ; is it the iconbar ?
        EXIT    NE
d4175 1
a4175 1

d4274 1
a4274 1
append_dotdefaultpath ENTRY "r3-r7"
d4313 1
a4313 1
ReportError ENTRY "r2"
d4324 1
a4324 1
MkBannerIn_userdata ENTRY "r0,r1,r3"
d4339 1
a4339 1
MkBackupBannerIn_userdata ENTRY "r0,r1,r3"
@


4.3
log
@Ursula branch merged. Changed to use srccommit.

Version 0.89. Tagged as 'ADFSFiler-0_89'
@
text
@d241 1
a241 1
        GBLS    get3    
d249 1
a249 1
$get3                              
d282 1
a282 1
hostvdu SETL {TRUE}       
d440 1
a440 1
relmousey       #       4   
d833 1
a833 1
                          
d2588 1
a2588 1
        
d3075 1
a3075 1
        LDRB    r14, [r3, #icb_drivetype]
d3235 1
a3235 1
      
d4115 1
a4115 1
message_datasave 
d4117 3
d4139 1
a4139 1
        
d4145 1
a4145 1
        ADR     r2, dotdollar3         
d4196 1
a4196 1
 
d4214 1
a4214 1
               
d4218 1
a4218 1
        SWI     XWimp_SendMessage            ; send the message 
d4222 1
a4222 1
; to an icon bar device, so send the Message_DataLoadAck.      
d4250 1
a4250 1
        
d4257 1
a4257 1
; 
d4260 1
a4260 1
; 
d4281 1
a4281 1
        
d4299 2
a4300 2
        
        EXIT        
@


4.2
log
@RiscOS 3.70 version taken
@
text
@d170 4
d183 1
d227 3
d476 1
a476 1
matchedindex    #       4               ; index of last icon matched
d523 4
a526 1
userdata        #       &200
d701 25
d730 15
a747 1
      [ Version >= 25
a749 1
      ]
d956 4
d3235 10
d3270 1
d4103 198
d4355 2
@


4.2.2.1
log
@Added ability to save from apps to iconbar icon.
@
text
@a169 2
;; 28-May-97  0.85 RML Trap datasave messages and allow file saves to the iconbar icon
;;                     (resulting in saves to the root directory).
a906 4
      [ Version >= 85
                DCD     Message_DataSave
                DCD     Message_DataLoad
      ]
a3181 10
      
      [ Version >= 85
        LDR     r14, =Message_DataSave
        CMP     r0, r14
        BEQ     message_datasave

        LDR     r14, =Message_DataLoad
        CMP     r0, r14
        BEQ     message_dataload
      ]
a3205 106


 [ Version >= 85
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; message_datasave
;
; handles the datasave message for when a user drags a file onto an iconbar icon
; to save.
;
; In: r1 -> wimp event structure
;
; Out : registers may be corrupted - going back to wimp poll.

message_datasave 

        MOV     r5, r1                   ; Stick r1 into r5 for later
        LDR     r4, [r1, #24]            ; icon handle
        BL      matchdriveicon           ; returns r1 -> drive_spec
        EXIT    NE

        ; check for busy doing format, backup etc
        LDRB    r8, [r1, #1]
        SUB     r8, r8, #"0"
        LDR     lr, FormatState
        MOV     lr, lr, LSR r8
        TST     lr, #1
        EXIT    NE

        ; Make up a filename
        BL      GetMediaName             ; returns r1 -> media name
        MOV     r2, r1                   ; put medianame pointer in r2 (source for strcpy)
        SUB     sp, sp, #256             ; increase stack by 256 bytes
        MOV     r1, sp                   ; destination string is on the stack
        BL      strcpy_advance           ; do the copy
        ADR     r2, dotdollardot
        BL      strcpy_advance           ; add a '.$.' to the medianame (eg. 'ADFS::Flibble.$.')
        ADD     r2, r5, #44
        BL      strcpy                   ; add the filename specified by the datasave message
        MOV     r1, r2                   ; now copy the new string back into the message block
        MOV     r2, sp             
        BL      strcpy
        ADD     sp, sp, #256             ; put back stack pointer (decrease stack)
       
        MOV     r1, r5                   ; stick wimp event structure pointer back in r1

        ; send a DataSaveAck message specifying the new pathname
        MOV     r0, #256
        STR     r0, [r1]
        LDR     r0, [r1, #8]
        STR     r0, [r1, #12]            ; Your ref.
        MOV     r0, #Message_DataSaveAck
        STR     r0, [r1, #16]            ; Message action
        LDR     r2, [r1, #4]             ; task handle of sender (to send back to)
        MOV     r0, #17                  ; event code
        SWI     Wimp_SendMessage
                
        Pull    "pc"

dotdollar3       DCB ".$",0
dotdollardot     DCB ".$.", 0

 ]


 [ Version >= 85
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; message_dataload
;
; handles dataload messages
;
; In: r1 -> wimp event structure
;
; Out : registers may be corrupted - going back to wimp poll.

message_dataload

        LDR     r4, [r1, #24]            ; icon handle (for opening viewer)

        ; Send the Message_DataLoadAck
        LDR     r0, [r1, #8]
        STR     r0, [r1, #12]            ; Your ref.
        MOV     r0, #Message_DataLoadAck
        STR     r0, [r1, #16]            ; Message action
        LDR     r2, [r1, #4]             ; task handle of sender (to send back to)
        MOV     r0, #17                  ; event code
        SWI     Wimp_SendMessage

        ; Open the directory viewer
        BL      matchdriveicon           ; returns r1 -> drive_spec
        BNE     %FT20
        BL      GetMediaName             ; returns r1 -> media name
        Push    "r1"
        ADR     r1,userdata
        ADRL    r2,FilerOpenDirCommand
        BL      strcpy_advance
        Pull    "r2"
        BL      strcpy_advance
        ADR     r2, dotdollar3
        BL      strcpy_advance
        ADR     r0,userdata
        SWI     XOS_CLI

20
        Pull    "pc"

 ]
@


4.2.2.2
log
@Issues Message_FilerDevicePath so files can be copied to icon bar devices
@
text
@a171 1
;; 08-Sep-97  0.86 RML Generate a Message_FilerDevicePath in response to Message_FilerSelection.
d470 1
a470 1
matchedindex    #       4                ; index of last icon matched
d517 1
a517 4
filenamebuffer  #       &100

userdata_size   *       &200
userdata        #       userdata_size
d3197 1
a3197 1
     ]
d3224 1
a3249 7
        ; Copy the name specified in the message to the filenamebuffer
        Push    "r1"
        ADR     r1, filenamebuffer
        ADD     r2, r5, #44
        BL      strcpy
        Pull    "r1"
        
d3253 2
a3254 1
        ADD     r1, r5, #44              ; destination is message data
d3256 10
a3265 10
        ADR     r2, dotdollar3         
        BL      strcpy_advance           ; add a '.$' to the medianame (eg. 'ADFS::Flibble.$.')
        ADD     r2, r5, #256
        SUB     r2, r2, r1
        MOV     r2, #256
        BL      append_dotdefaultpath    ; add '.<ADFSFiler$DefaultPath>' (if it exists)
        MOV     r0, #46
        STRB    r0, [r1], #1
        ADR     r2, filenamebuffer
        BL      strcpy_advance           ; add the filename specified by the datasave message
a3267 1
        MOV     r1, r5                   ; stick wimp event structure pointer back in r1
d3277 1
d3283 4
d3300 1
a3300 40
        ; Check why we've got this message
        LDR     r0, [r1, #12]
        CMP     r0, #0                   ; we only send a DataLoadAck if the DataLoad
        BNE     %FT10                    ; was in reply to a DataSaveAck

; Case 1: Message is because user has tried to copy a selection of files to an
; icon bar device, so send a Message_FilerDevicePath.

        LDR     r6, [r1, #4]                 ; task handle of sender (to send back to)
        MOV     r5, r1                       ; store message block pointer in r5
 
        MOV     r0, #256
        STR     r0, [r1]                     ; Length of message
        MOV     r0, #0
        STR     r0, [r1, #12]                ; Your ref.
        LDR     r0, =Message_FilerDevicePath ; Message action
        STR     r0, [r1, #16]                ; Message action

        BL      matchdriveicon               ; returns r1 -> drive_spec
        Pull    "pc", NE
        BL      GetMediaName                 ; returns r1 -> media name
        MOV     r2, r1
        ADD     r1, r5, #20
        BL      strcpy_advance               ; copy media name into the message
        ADR     r2, dotdollar3
        BL      strcpy_advance               ; add a .$
        ADD     r2, r5, #userdata_size
        SUB     r2, r2, r1
        BL      append_dotdefaultpath          ; Add the value of ADFSFiler$DefaultPath if it exists
               
        MOV     r1, r5                       ; location of message data
        MOV     r2, r6                       ; task handle of sender (to send back to)
        MOV     r0, #17                      ; event code
        SWI     Wimp_SendMessage             ; send the message 
        B       %FT20

; Case 2: Message is part of a save protocol, because user has saved a file
; to an icon bar device, so send the Message_DataLoadAck.      

10    
d3309 1
a3309 1
20      ; Open the directory viewer of the dir we're copying/saving to.
d3311 1
a3311 1
        Pull    "pc", NE
a3320 5

        ADD     r2, r5, #userdata_size
        SUB     r2, r2, r1
        BL      append_dotdefaultpath          ; Add the value of ADFSFiler$DefaultPath if it exists

d3323 2
a3324 1
        
d3327 1
a3327 49
adfsfiler_defaultpath DCB "ADFSFiler$DefaultPath",0

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; append_dotdefaultpath
; 
; Read value of ADFSFiler$DefaultPath and append it to the path in r1
; (ie. does string1 becomes string1.value)
; 
; In: r1 -> destination buffer
;     r2 -> size of buffer
;
; Out: r0 = corrupted
;      r1 -> next free byte in buffer
;      r2 = corrupted.
;      All other regs preserved.

append_dotdefaultpath ENTRY "r3-r7"

        MOV     r7, r1
        MOV     r6, r2

        ADR     r0, adfsfiler_defaultpath
        MOV     r2, #-1
        MOV     r3, #0
        MOV     r4, #0
        SWI     XOS_ReadVarVal
        CMP     r2, #0
        EXIT    EQ                       ; exit if variable doesn't exist
        
        MVN     r0, r2
        ADD     r0, r0, #1
        CMP     r0, r6
        EXIT    GT                       ; exit if buffer not big enough

        ADR     r0, adfsfiler_defaultpath
        ADD     r1, r7, #1
        MOV     r2, #256
        MOV     r3, #0
        MOV     r4, #0
        SWI     XOS_ReadVarVal           ; Put variable into buffer, leaving room for '.'

        ADD     r1, r1, r2
        MOV     r0, #46
        STRB    r0, [r7]                 ; Put '.' before variable's value
        MOV     r0, #0
        STRB    r0, [r1]                 ; Put NULL at end of whole string.
        
        EXIT        

@


4.2.2.3
log
@Fixed bug associated with interactive help
@
text
@d3229 197
a4257 197
; message_datasave
;
; handles the datasave message for when a user drags a file onto an iconbar icon
; to save.
;
; In: r1 -> wimp event structure
;
; Out : registers may be corrupted - going back to wimp poll.

message_datasave 

        MOV     r5, r1                   ; Stick r1 into r5 for later
        LDR     r4, [r1, #24]            ; icon handle
        BL      matchdriveicon           ; returns r1 -> drive_spec
        EXIT    NE

        ; check for busy doing format, backup etc
        LDRB    r8, [r1, #1]
        SUB     r8, r8, #"0"
        LDR     lr, FormatState
        MOV     lr, lr, LSR r8
        TST     lr, #1
        EXIT    NE

        ; Copy the name specified in the message to the filenamebuffer
        Push    "r1"
        ADR     r1, filenamebuffer
        ADD     r2, r5, #44
        BL      strcpy
        Pull    "r1"
        
        ; Make up a filename
        BL      GetMediaName             ; returns r1 -> media name
        MOV     r2, r1                   ; put medianame pointer in r2 (source for strcpy)
        ADD     r1, r5, #44              ; destination is message data
        BL      strcpy_advance           ; do the copy
        ADR     r2, dotdollar3         
        BL      strcpy_advance           ; add a '.$' to the medianame (eg. 'ADFS::Flibble.$.')
        ADD     r2, r5, #256
        SUB     r2, r2, r1
        MOV     r2, #256
        BL      append_dotdefaultpath    ; add '.<ADFSFiler$DefaultPath>' (if it exists)
        MOV     r0, #46
        STRB    r0, [r1], #1
        ADR     r2, filenamebuffer
        BL      strcpy_advance           ; add the filename specified by the datasave message

        ; send a DataSaveAck message specifying the new pathname
        MOV     r1, r5                   ; stick wimp event structure pointer back in r1
        MOV     r0, #256
        STR     r0, [r1]
        LDR     r0, [r1, #8]
        STR     r0, [r1, #12]            ; Your ref.
        MOV     r0, #Message_DataSaveAck
        STR     r0, [r1, #16]            ; Message action
        LDR     r2, [r1, #4]             ; task handle of sender (to send back to)
        MOV     r0, #17                  ; event code
        SWI     Wimp_SendMessage
        Pull    "pc"

dotdollar3       DCB ".$",0
dotdollardot     DCB ".$.", 0

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; message_dataload
;
; handles dataload messages
;
; In: r1 -> wimp event structure
;
; Out : registers may be corrupted - going back to wimp poll.

message_dataload

        LDR     r4, [r1, #24]            ; icon handle (for opening viewer)

        ; Check why we've got this message
        LDR     r0, [r1, #12]
        CMP     r0, #0                   ; we only send a DataLoadAck if the DataLoad
        BNE     %FT10                    ; was in reply to a DataSaveAck

; Case 1: Message is because user has tried to copy a selection of files to an
; icon bar device, so send a Message_FilerDevicePath.

        LDR     r6, [r1, #4]                 ; task handle of sender (to send back to)
        MOV     r5, r1                       ; store message block pointer in r5
 
        MOV     r0, #256
        STR     r0, [r1]                     ; Length of message
        MOV     r0, #0
        STR     r0, [r1, #12]                ; Your ref.
        LDR     r0, =Message_FilerDevicePath ; Message action
        STR     r0, [r1, #16]                ; Message action

        BL      matchdriveicon               ; returns r1 -> drive_spec
        Pull    "pc", NE
        BL      GetMediaName                 ; returns r1 -> media name
        MOV     r2, r1
        ADD     r1, r5, #20
        BL      strcpy_advance               ; copy media name into the message
        ADR     r2, dotdollar3
        BL      strcpy_advance               ; add a .$
        ADD     r2, r5, #userdata_size
        SUB     r2, r2, r1
        BL      append_dotdefaultpath          ; Add the value of ADFSFiler$DefaultPath if it exists
               
        MOV     r1, r5                       ; location of message data
        MOV     r2, r6                       ; task handle of sender (to send back to)
        MOV     r0, #17                      ; event code
        SWI     Wimp_SendMessage             ; send the message 
        B       %FT20

; Case 2: Message is part of a save protocol, because user has saved a file
; to an icon bar device, so send the Message_DataLoadAck.      

10    
        LDR     r0, [r1, #8]
        STR     r0, [r1, #12]            ; Your ref.
        MOV     r0, #Message_DataLoadAck
        STR     r0, [r1, #16]            ; Message action
        LDR     r2, [r1, #4]             ; task handle of sender (to send back to)
        MOV     r0, #17                  ; event code
        SWI     Wimp_SendMessage

20      ; Open the directory viewer of the dir we're copying/saving to.
        BL      matchdriveicon           ; returns r1 -> drive_spec
        Pull    "pc", NE
        BL      GetMediaName             ; returns r1 -> media name
        Push    "r1"
        ADR     r1,userdata
        ADRL    r2,FilerOpenDirCommand
        BL      strcpy_advance
        Pull    "r2"
        BL      strcpy_advance
        ADR     r2, dotdollar3
        BL      strcpy_advance

        ADD     r2, r5, #userdata_size
        SUB     r2, r2, r1
        BL      append_dotdefaultpath          ; Add the value of ADFSFiler$DefaultPath if it exists

        ADR     r0,userdata
        SWI     XOS_CLI
        
        Pull    "pc"

adfsfiler_defaultpath DCB "ADFSFiler$DefaultPath",0

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; append_dotdefaultpath
; 
; Read value of ADFSFiler$DefaultPath and append it to the path in r1
; (ie. does string1 becomes string1.value)
; 
; In: r1 -> destination buffer
;     r2 -> size of buffer
;
; Out: r0 = corrupted
;      r1 -> next free byte in buffer
;      r2 = corrupted.
;      All other regs preserved.

append_dotdefaultpath ENTRY "r3-r7"

        MOV     r7, r1
        MOV     r6, r2

        ADR     r0, adfsfiler_defaultpath
        MOV     r2, #-1
        MOV     r3, #0
        MOV     r4, #0
        SWI     XOS_ReadVarVal
        CMP     r2, #0
        EXIT    EQ                       ; exit if variable doesn't exist
        
        MVN     r0, r2
        ADD     r0, r0, #1
        CMP     r0, r6
        EXIT    GT                       ; exit if buffer not big enough

        ADR     r0, adfsfiler_defaultpath
        ADD     r1, r7, #1
        MOV     r2, #256
        MOV     r3, #0
        MOV     r4, #0
        SWI     XOS_ReadVarVal           ; Put variable into buffer, leaving room for '.'

        ADD     r1, r1, r2
        MOV     r0, #46
        STRB    r0, [r7]                 ; Put '.' before variable's value
        MOV     r0, #0
        STRB    r0, [r1]                 ; Put NULL at end of whole string.
        
        EXIT        


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
a4310 2


@


4.2.2.4
log
@Added Ursula service call table.
@
text
@a172 1
;; 26-Mar-98  0.87 RML Added Ursula service call table.
a224 3
                GBLL    DragsToIconBar  ; RML: Are drags from save boxes/filer windows to our icon allowed?
DragsToIconBar  SETL    {TRUE}

a695 25

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Table of service calls we want

        ASSERT  Service_StartFiler > Service_Reset
        ASSERT  Service_StartedFiler > Service_StartFiler
        ASSERT  Service_FilerDying > Service_StartedFiler
        ASSERT  Service_MessageFileClosed > Service_FilerDying
        ASSERT  Service_ResourceFSStarting > Service_MessageFileClosed

ServiceTable
        DCD     0
        DCD     ServiceUrsula - Module_BaseAddr
        DCD     Service_Reset
        DCD     Service_StartFiler
        DCD     Service_StartedFiler
        DCD     Service_FilerDying
        DCD     Service_MessageFileClosed
      [ standalonemessages
        DCD     Service_ResourceFSStarting
      ]
        DCD     0
        DCD     ServiceTable - Module_BaseAddr


a699 15
        MOV     r0, r0                  ; Indicates there is a service call table

        ; Fast rejection code
        TEQ     r1, #Service_Reset
        TEQNE   r1, #Service_StartFiler
        TEQNE   r1, #Service_StartedFiler
        TEQNE   r1, #Service_FilerDying
        TEQNE   r1, #Service_MessageFileClosed
      [ standalonemessages
        TEQNE   r1, #Service_ResourceFSStarting
      ]
        MOVNE   pc, lr

ServiceUrsula

d703 1
d706 1
d913 1
a913 1
      [ DragsToIconBar
d3193 1
a3193 1
      [ DragsToIconBar
a4059 2
 [ DragsToIconBar

d4099 3
a4101 1
        MOV     r2, #256                 ; maximum length for append_dotdefaultpath
d4104 1
a4104 1
        STRB    r0, [r1], #1             ; add a '.'
a4118 1

d4121 1
a4121 1
dotdollar3       DCB ".$", 0
a4123 1

d4137 1
a4137 2
; Check why we've got this message

d4145 1
a4145 1
        LDR     r6, [r1, #4]                 ; store task handle of sender (to send back to)
d4152 1
a4152 1
        LDR     r0, =Message_FilerDevicePath
d4160 1
a4160 1
        BL      strcpy_advance               ; copy media name into the message block
d4163 3
a4165 2
        MOV     r2, #256                     ; maximum size we'll allow for append_dotdefaultpath
        BL      append_dotdefaultpath        ; Add the value of ADFSFiler$DefaultPath if it exists
d4170 1
a4170 1
        SWI     XWimp_SendMessage            ; send the message 
d4175 2
a4176 1
10
d4183 1
a4183 1
        SWI     XWimp_SendMessage
d4185 1
a4185 2
; Open the directory viewer of the dir we're copying/saving to.
20
d4191 1
a4191 1
        ADRL    r2,FilerOpenDirCommand   ; Now create a Filer_OpenDir command
d4194 1
a4194 1
        BL      strcpy_advance           ; copy the media name
d4196 5
a4200 3
        BL      strcpy_advance           ; add a '.$'
        MOV     r2, #256
        BL      append_dotdefaultpath    ; Add the value of ADFSFiler$DefaultPath if it exists
d4203 1
a4203 1
        SWI     XOS_CLI                  ; Execute command
a4254 1
 ]
@


4.2.2.5
log
@*** empty log message ***
@
text
@d740 1
a740 1
        MOVNES  pc, lr
@


4.2.2.6
log
@Added missing GET for Machine file.  Tagged ADFSFiler-0_88
@
text
@a182 1
	GET	Hdr:Machine.<Machine>
@


4.1
log
@Initial revision
@
text
@d207 2
d501 3
d505 1
d3922 7
d3951 2
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a206 2
                GBLL    StrongARM
StrongARM       SETL    {TRUE}
a498 3
  [ StrongARM
SAdummy                 #       16     ;dynamic SWI code no longer used
  |
a499 1
  ]
a3915 7

  [ StrongARM
        Push    "r10, lr"
        ORR     r10,r11,#&20000               ; SWI code, with X bit
        SWI     XOS_CallASWI
        Pull    "r10, pc"
  |
a3937 2

  ] ;StrongARM/not StrongARM
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
