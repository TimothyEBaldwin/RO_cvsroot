head	4.17;
access;
symbols
	Desktop-2_77:4.17
	Desktop-2_76:4.17
	Desktop-2_75:4.17
	Desktop-2_74:4.15
	Desktop-2_73:4.14
	Desktop-2_72:4.14
	Desktop-2_71:4.13
	Desktop-2_70:4.12
	Desktop-2_69:4.12
	Desktop-2_68:4.12
	Desktop-2_67:4.12
	RO_5_07:4.12
	Desktop-2_66:4.12
	Desktop-2_65a:4.12
	Desktop-2_65:4.12
	Desktop-2_64:4.11
	Desktop-2_63:4.10
	Desktop-2_62:4.9
	Desktop-2_61:4.8
	Desktop-2_60:4.7
	Desktop-2_59:4.6
	Desktop-2_58:4.5
	Desktop-2_57:4.4
	dcotton_Spin_merge:4.1.7.1
	Desktop-2_56:4.3
	Desktop-2_55:4.3
	Ursula_merge:4.2
	Ursula_RiscPC_merge:4.2
	nturton_Desktop-2_54:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	nicke_Desktop-2_52:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.17
date	2015.01.16.00.16.20;	author jlee;	state Exp;
branches;
next	4.16;
commitid	drZAwZHv5p7pib6y;

4.16
date	2013.03.30.17.35.10;	author jlee;	state Exp;
branches;
next	4.15;
commitid	n2a1q30K64K6aQJw;

4.15
date	2012.09.08.14.17.04;	author jlee;	state Exp;
branches;
next	4.14;
commitid	S8ytrVs1S4KGAJjw;

4.14
date	2010.08.28.19.12.49;	author rsprowson;	state Exp;
branches;
next	4.13;

4.13
date	2010.07.19.21.27.16;	author jlee;	state Exp;
branches;
next	4.12;

4.12
date	2003.04.11.08.44.03;	author rsprowson;	state Exp;
branches;
next	4.11;

4.11
date	2002.10.31.17.10.51;	author kbracey;	state Exp;
branches;
next	4.10;

4.10
date	2002.10.31.16.53.51;	author bavison;	state Exp;
branches;
next	4.9;

4.9
date	2001.03.16.17.10.51;	author sbrodie;	state Exp;
branches;
next	4.8;

4.8
date	2001.03.01.13.23.22;	author sforrest;	state Exp;
branches;
next	4.7;

4.7
date	2000.07.10.12.42.34;	author srevill;	state Exp;
branches;
next	4.6;

4.6
date	2000.07.06.16.53.50;	author srevill;	state Exp;
branches;
next	4.5;

4.5
date	2000.04.20.15.50.28;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	2000.03.03.12.34.23;	author srevill;	state Exp;
branches;
next	4.3;

4.3
date	99.08.17.13.36.11;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.01.02.16.52.48;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.29.10;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.29.10;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.26.24;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.14.33;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.15.03;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.17
log
@Escape some dollars
Detail:
  s/Desktop - Escape some dollars contained in strings to avoid warnings from objasm
Admin:
  Resulting binary unchanged


Version 2.75. Retagged as 'Desktop-2_75'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Desktop
;   This is the desktop module

        AREA    |Desktop$$Code|, CODE, READONLY, PIC
Module_BaseAddr

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:Machine.<Machine>
        GET     Hdr:UserIF.<UserIF>
        GET     Hdr:CMOS
        GET     Hdr:Proc
        GET     Hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     Hdr:LowFSi
        GET     Hdr:NewErrors
        GET     Hdr:Variables
        GET     Hdr:Wimp
        GET     Hdr:WimpSpace
        GET     Hdr:Messages
        GET     Hdr:ResourceFS
        GET     Hdr:MsgTrans
        GET     Hdr:Font
        GET     Hdr:Draw
        GET     Hdr:ColourTran
        GET     VersionASM
        GET     Hdr:NDRDebug
        GET     Hdr:Sprite
        GET     Hdr:Squash
        GET     Hdr:ADFS

        GBLL    DesktopAllAtOnce
DesktopAllAtOnce SETL {TRUE}
        GBLL    NewBanner
NewBanner SETL  {TRUE} :LAND: :LNOT: Embedded_UI
        GBLL    KeepItUp
KeepItUp SETL   {TRUE} :LAND: NewBanner
        GBLL    SquashedSprites
SquashedSprites SETL {TRUE} :LAND: NewBanner
        GBLL    DateFromKernel
DateFromKernel  SETL {TRUE} :LAND: NewBanner

        GBLL    debug
        GBLL    debugxx
        GBLL    debugwe
        GBLL    debugcr
        GBLL    debugtm
        GBLL    hostvdu

debug   SETL    {FALSE}
debugxx SETL    {TRUE} :LAND: debug
debugwe SETL    {TRUE} :LAND: debug
debugcr SETL    {TRUE} :LAND: debug
debugtm SETL    {TRUE} :LAND: debug
hostvdu SETL    {TRUE}



TAB     *       9
LF      *       10
FF      *       12
CR      *       13

                        ^       0, wp
commandtail             #       256
MessageBlock            #       16
Workspace               #       4
nactive                 #       4               ; no of active tasks when we started
nactive1                #       4
privatesprites          #       4               ; our sprites for the banner
BannerCloseTime         #       4
NewWelcomeWorkspace     #       4
IconHandle              #       4
NextPump                #       4
PumpHidden              #       4
PumpParams_0            #       4
PumpParams_1            #       4
PumpParams_2            #       4
ModeChangeCount         #       4               ; how many times we've seen Message_ModeChange
scratchbuffer1          #       256
scratchbuffer2          #       256
Working_Stack           #       128
Working_StackEnd        #       0

Desktop_WorkspaceSize * :INDEX: @@


; **************** Module code starts here **********************

        ASSERT  (.-Module_BaseAddr) = 0

        DCD     Desktop_Start    - Module_BaseAddr
        DCD     Desktop_Init     - Module_BaseAddr
        DCD     Desktop_Die      - Module_BaseAddr
        DCD     Desktop_Service  - Module_BaseAddr
        DCD     Desktop_Title    - Module_BaseAddr
        DCD     Desktop_HelpStr  - Module_BaseAddr
        DCD     Desktop_HC_Table - Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0
 [ International_Help <> 0
        DCD     MyMessagesFile   - Module_BaseAddr
 |
        DCD     0
 ]
        DCD     Desktop_Flags    - Module_BaseAddr

Desktop_Title
        =       "Desktop", 0

Desktop_HelpStr
        DCB     "Desktop", TAB, TAB, "$Module_HelpVersion", 0
        ALIGN

Desktop_Flags
  [ No32bitCode
        DCD     0
  |
        DCD     ModuleFlag_32bit
  ]


Desktop_HC_Table
        Command Desktop, 255, 0, International_Help
        &       0


; *****************************************************************************

 [ International_Help=0
Desktop_Help
        =       "*Desktop starts up any dormant Wimp modules, and also passes "
        =       "an optional *command or file of *commands to Wimp_StartTask."
        =       13
Desktop_Syntax
        =       "Syntax: *Desktop [<*command> | -File <filename>]",0
 |
Desktop_Help    DCB     "HDSKDSK", 0
Desktop_Syntax  DCB     "SDSKDSK", 0
 ]
        ALIGN

; *****************************************************************************
;
;       Desktop_Init - Initialisation entry
;

Desktop_Init    *       Module_BaseAddr

taskid          DCB     "TASK"
                ALIGN

; *****************************************************************************
;
;       Desktop_Die - Die entry
;

Desktop_Die     *       Module_BaseAddr

; *****************************************************************************
;
;       Desktop_Service - Main entry point for services
;
; in:   R1 = service reason code
;       R2 = sub reason code
;       R3-R5 parameters
;
; out:  R1 = 0 if we claimed it
;       R2 preserved
;       R3-R5 = ???
;

Desktop_Service *       Module_BaseAddr

; *****************************************************************************
;
;       Desktop_Code - Start up the desktop
;

Desktop_Code Entry
        MOV     R2, R0                  ; R2 --> parameter list
        ADR     R0, execcommand         ; cancel exec file (if any)
        SWI     XOS_CLI
        MOVVC   R0, #ModHandReason_Enter
        ADRVCL  R1, Desktop_Title       ; R1 --> module title
        SWIVC   XOS_Module
        EXIT

execcommand =   "EXEC", 0
        ALIGN

; *****************************************************************************
;
;       Desktop_Start - Application entry point
;
;       Start up any dormant modules (unless unplugged)
;


MyMessagesFile  DCB     "Resources:$.Resources.Desktop.Messages",0
filerboot       DCB     "Filer_Boot "
appsdir         DCB     "Resources:$.Apps", 0
plingstar       DCB     "!*", 0
spritefile      DCB     "Resources:$.Resources.Desktop.Sprites",0

; RWB - Remove welcome screen for STB
; NDT - Merged conditionals from RiscOS 3.70 and NCOS 1.06
 [ :LNOT: Embedded_UI :LAND: :LNOT: NewBanner
WelcomeString1  DCB     "RO3",0
WelcomeString2  DCB     "CopyRt",0
WelcomeString3  DCB     "Init",0
WelcomeString4  DCB     "Pre",0
WelcomeFont     DCB     "Trinity.Medium",0
WelcomeFont2    DCB     "Trinity.Bold",0
                ALIGN
Welcome_AcornPath
        DCD  &16
        DCD  &2,     &4A00,  &20400, &8, &22A00, &20400, &6,    &22A00, &26200, &1EA00
        DCD  &3AC00, &13200, &3AE00, &6, &7E00,  &3AE00, &4600, &25E00, &4A00,  &20400
        DCD  &5,     &0

        DCD  &37                ; Number of words in this path object
        DCD  &2, &3E00, &1D200, &8, &23200, &1D200, &6, &23000, &11C00, &17955
        DCD  &E2AA, &15155, &E2AA, &8, &15200, &B600, &6, &19200, &9E00, &20400
        DCD  &7000, &25400, &4E00, &8, &21E00, &3000, &6, &1A800, &7400, &EEAA
        DCD  &C200, &34AA, &EC00, &8, &3400, &10200, &6, &7B55, &F555, &C400
        DCD  &E200, &12200, &C400, &8, &12200, &E355, &6, &FA00, &E555, &4000
        DCD  &11C00, &3E00, &1D200, &5, &0

        DCD  0
 ]
                ALIGN

;------------------------------------------------
;
; MsgLookup
;
; In r1->token
; Out r1->string (error maybe)
;
MsgLookup Entry "r0,r2-r7"
        ADR     r0, MessageBlock
        MOV     r2, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        STRVS   r0, [sp]
        MOVVC   r1, r2
        EXIT

Desktop_MessagesWanted
        DCD     0

Desktop_Start ROUT

        ; Allocate workspace
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #Desktop_WorkspaceSize
        SWI     OS_Module

        MOV     r12, r2

        ; open message file
        ADR     r0, MessageBlock
        ADRL    r1, MyMessagesFile
        MOV     r2, #0
        STR     r2, privatesprites
        SWI     XMessageTrans_OpenFile
        BVS     %FT25
        
15
        ; size up sprites file
        ADRL    r1, spritefile
        MOV     r0, #OSFile_ReadNoPath
        SWI     XOS_File                ; attempting to load them will give an error

 [ SquashedSprites
        ; Allocate block to load squashed file into
        MOVVC   r0, #ModHandReason_Claim
        MOVVC   r3, r4
        SWIVC   XOS_Module
        MOVVS   r9, r0
        BVS     %FT25
        MOV     r10, r2
        MOV     r0, #OSFile_LoadNoPath
        ADRL    r1, spritefile
        MOV     r3, #0
        SWI     XOS_File

        ; Allocate the block to decompress into
        LDRVC   r3, [r10, #4]           ; get uncompressed length
        MOVVC   r0, #ModHandReason_Claim
        ADDVC   r3, r3, #4              ; make it a sprite area
        SWIVC   XOS_Module
        MOVVS   r9, r0
        BVS     %FT24
        STR     r2, privatesprites
        STR     r3, [r2, #saEnd]
        LDR     r0, =&48535153          ; "SQSH"
        LDR     r1, [r10, #0]
        TEQ     r0, r1
        BNE     %FT21

        ; Query Squash workspace
        MOV     r0, #1<<3
        MVN     r1, #0
        SWI     XSquash_Decompress

        ; Allocate Squash workspace
        MOVVC   r3, r0
        MOVVC   r0, #ModHandReason_Claim
        SWIVC   XOS_Module
        MOVVS   r9, r0
        BVS     %FT23

        ; This code will fail if Squash doesn't decompress it all in one go!
        MOV     r0, #1<<2
        MOV     r1, r2
        ADD     r2, r10, #20
        SUB     r3, r4, #20
        LDR     r4, privatesprites
        LDR     r5, [r10, #4]
        ADD     r4, r4, #4
        SWI     XSquash_Decompress
        MOV     r3, r0

        ; Free the squash workspace
        MOV     r2, r1
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module

        ; Look at status code. Non zero is bad, translate it into a failed sprite.
        CMP     r3, #0
        BEQ     %FT22
21
        LDR     r1, privatesprites
        MOV     r2, #0                  ; will fail
        STR     r2, [r1, #saEnd]
        STR     r1, [r1, #saFree]
        MOV     r0, #SpriteReason_CheckSpriteArea
        ORR     r0, r0, #256
        SWI     XOS_SpriteOp
        MOVVS   r9, r0
        BVS     %FT23
22
        ; Free squashed file buffer
        MOV     r2, r10
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        B       %FT30
23
        ; Free sprite area
        LDR     r2, privatesprites
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
24
        ; Free squashed file buffer
        MOV     r2, r10
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
 |
        MOV     r0, #ModHandReason_Claim
        ADD     r3, r4, #16
        SWI     XOS_Module
        MOVVS   r9, r0
        BVS     %FT25
        STR     r2, privatesprites
        STR     r3, [r2, #saEnd]
        MOV     r3, #0
        STR     r2, [r2, #saNumber]
        MOV     r3, #16
        STR     r3, [r2, #saFirst]
        STR     r3, [r2, #saFree]
20
        ; load sprites file
        MOV     r1, r2
        ADRL    r2, spritefile
        MOV     r0, #SpriteReason_LoadSpriteFile
        ORR     r0, r0, #256            ; load banner sprites
        SWI     XOS_SpriteOp
        BVC     %FT30
        MOV     r9, r0
        MOV     r2, r1
        MOV     r0, #ModHandReason_Free ; free failed sprite area
        SWI     XOS_Module
 ]
25
        ; something failed to open - free block and generate original error
        MOV     r2, r12
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        MOV     r0, r9
        SWI     OS_GenerateError

30
        ; Give ourselves workspace and stack
        ADR     r13,Working_StackEnd

 [ debugtm
        MOV     r14, r0
        SWI     XOS_ReadMonotonicTime
        Push    "r0"
        MOV     r0, r14
 ]

        SWI     XOS_GetEnv              ; R0 --> command line (not tail!)
 [ debugxx
        BVC     %FT01
        Debug   xx, "GetEnv error"
 ]
        BVS     Exit
01
        LDRB    R14,[R0],#1             ; skip module title
        CMP     R14,#" "
        BHI     %BT01                   ; NB old programs will supply null
        SUBLO   R0,R0,#1                ;    ie. execute null command

        ADR     R1,commandtail
02
        LDRB    R14,[R0],#1             ; copy command line into buffer
        STRB    R14,[R1],#1
        CMP     R14,#32
        BCS     %BT02

; If an exec file is open then exit to allow Shift-Break to *EXEC !Boot files

        MOV     R0, #198                ; read EXEC file handle
        MOV     R1, #0
        MOV     R2, #&FF
        SWI     OS_Byte
        TEQ     R1, #0                  ; was an EXEC file open?
        SWINE   OS_Exit                 ; exit if so

; Store number of active tasks - inhibits startup screen
; Store ROM apps start inhibit - set if there's a command tail or active tasks
        MOV     R0,#0
        SWI     XWimp_ReadSysInfo       ; read number of active tasks
 [ debugxx
        BVC     %FT99
        Debug   xx, "ReadSys error"
99
 ]
        BVS     Exit
        STR     R0,nactive1

        LDRB    R14,commandtail         ; spaces already skipped
        CMP     R14,#32                 ; don't start ROM applications
        MOVHS   R0,#1                   ; if there was a filename
        STR     R0,nactive              ; 0 => start ROM applications

        ; If ROM apps start enabled then Unset Desktop$File
        TEQ     R0,#0
        ADREQL  R0,com_unset
        SWIEQ   XOS_CLI                 ; ignore errors

        MOV     R14,#0
        STR     R14,NewWelcomeWorkspace

StartAsTask
        ; Up we come as a task
        ADRL    r1, Desktop_Title
        BL      MsgLookup
        BVS     Exit
        MOV     r2, r1
        MOV     R0, #300                ; pretend to know about Wimp 3.00
        LDR     R1, taskid
        ADR     R3, Desktop_MessagesWanted
        SWI     XWimp_Initialise
 [ debugxx
        BVC     %FT99
        ADD     r1, r0, #4
        DebugS  xx, "WimpInit error ", r1
99
 ]
        BVS     Exit

        MOV     R14, #0
        STR     R14, ModeChangeCount

 [ debugtm
        SWI     XOS_ReadMonotonicTime
        Pull    "r1"
        SUB     r0, r0, r1
        Debug   tm, "Initial faff ",r0
        SWI     XOS_ReadMonotonicTime
        Push    "r0"
 ]

        ; Check for display of the Welcome screen
        LDR     r0,nactive1
        Debug   we,"nactive ",r0
        CMP     r0,#0
        MOVNE   r0,#0                   ; Keep it up for 0 seconds
        BNE     NoWelcome

        ; Only handle Boot$Error on start up (ie. when we display welcome screen).
        ADR     r0, str_booterror       ; Try to read Boot$Error.
        ADR     r1, scratchbuffer1
        MOV     r2, #?scratchbuffer1
        MOV     r3, #0
        MOV     r4, #0
        SWI     XOS_ReadVarVal

        BVS     NoBootError             ; Do nothing if this fails
        TEQ     r2, #0                  ;   or not defined
        BEQ     NoBootError
        TEQ     r4, #VarType_String     ;   or not a string variable.
        BNE     NoBootError

        MOV     r3, #0                  ; Null terminate the string we read.
        STRB    r3, [r1, r2]

        MOV     r2, #-1                 ; Unset Boot$Error (other params from above).
        SWI     XOS_SetVarVal
        BVS     Exit

        MOV     r4, r1                  ; Make error a parameter for message lookup.
        ADR     r0, MessageBlock
        ADR     r1, token_booterror
        ADR     r2, scratchbuffer2+4
        MOV     r3, #?scratchbuffer2-4
        SWI     XMessageTrans_Lookup
        BVS     Exit

        ; Now get text for buttons.
 [ Embedded_UI
        ADR     r1, token_errorbuttons
 |
        SWI     XADFS_Drives            ; Don't offer floppy boot if no floppy drive
        MOVVS   r1, #0
        CMP     r1, #0
        ADREQ   r1, token_errorbuttons_noflop
        ADRNE   r1, token_errorbuttons
        ADR     r0, MessageBlock
 ]
        ADR     r2, scratchbuffer1
        MOV     r3, #?scratchbuffer1
        SWI     XMessageTrans_Lookup
        BVS     Exit
        MOV     r5, r2                  ; r5->button texts

        ADR     r0, scratchbuffer2      ; r0->message for error window
        MOV     r1, #0
        STR     r1, [r0]                ; Default error number.
        MOV     r1, #256+2048+512
        ADRL    r2, Desktop_Title
        MOV     r3, #0
        MOV     r4, #1
        SWI     XWimp_ReportError
        BVS     Exit

 [ Embedded_UI
        SWI     XOS_Reset               ; The only button on STB's error box is 'Retry'
 |
        CMP     R1, #4
        SWICC   XOS_Reset               ; Retry selected: don't expect to return from this!
 ]
        BEQ     ClearScreen             ; Cancel selected.

        MOV     r0, #0                  ; Floppy boot selected
        MOV     r1, #0                  ; We are the only task so no need for handle.
        SWI     XWimp_CloseDown

        ADR     r0, str_floppyboot      ; Boot from floppy.
        SWI     XOS_CLI
        BVC     %FT10                   ; Exit if it worked.

        ADD     r1, r0, #4              ; Set Boot$Error to the new error if OS_CLI failed.
        ADR     r0, str_booterror
        MOV     r2, #1024               ; Big enough value that terminator will be reached.
        MOV     r3, #0
        MOV     r4, #VarType_String
        SWI     XOS_SetVarVal
        BVC     StartAsTask             ; Go round again with new error.
10
        MOV     r9, r0                  ; Exit but don't send round ServiceStartedWimp.
        MOV     r8, pc
        B       Exit2

str_floppyboot  DCB     "Run ADFS::0.$.!Boot",0
str_booterror   DCB     "Boot$$Error",0
 [ Embedded_UI
token_booterror DCB     "BootErrSTB",0
token_errorbuttons DCB  "ErrButtSTB",0
 |
token_booterror DCB     "BootErr",0
token_errorbuttons DCB  "ErrButt",0
token_errorbuttons_noflop DCB  "ErrButtNoFlop",0
 ]
                ALIGN

ClearScreen
        MOV     r0, #-1                 ; Force redraw of whole screen.
        MOV     r1, #&FFFFFF00
        MOV     r2, #&FFFFFF00
        MOV     r3, #&00FFFFFF
        MOV     r4, #&00FFFFFF
        SWI     XWimp_ForceRedraw
        LDRVC   r0, =&1CE3972
        ADRVC   r1, scratchbuffer1
        ADR     r3, ClearScreen         ; somewhere which is non-zero
        SWIVC   XWimp_Poll

NoBootError

        MOV     R1,#Service_DesktopWelcome
        SWI     XOS_ServiceCall
        MOVVS   R0,#0
        BVS     NoWelcome
        TEQ     R1,#0                   ; Was it claimed ?
 [ :LNOT: Embedded_UI                   ; RWB - Remove welcome screen
        MOVEQ   R0,#0
        BEQ     NoWelcome

        Debug   we,"Service not claimed"

    [ KeepItUp
        BL      IconbarHack
    ]
        BL      DisplayWelcomeScreen

        SWI     XOS_ReadMonotonicTime
        MOVVS   r0, #0
        ADD     r0, r0, #400            ; Keep it up for 4 seconds

 ]
NoWelcome
        STR     r0, BannerCloseTime
        ADR     r0, StartPumpModuleApps
        STR     r0, NextPump
        MOV     r0, #1
        STR     r0, PumpHidden

PollLoop
        LDR     r0, NextPump
        TEQ     r0, #0
        BEQ     AllDone
        MOV     lr, pc
        MOV     pc, r0
        BVS     Exit
 [ DesktopAllAtOnce
        B       PollLoop
 |
        LDR     r0, PumpHidden
        TEQ     r0, #0
        BNE     PollLoop

IgnoreEvent
        ; This should only accept NULL events
        LDR     r0, =null_bit :OR: pollword_enable
        ADR     r1, scratchbuffer1
        ADR     r3, IgnoreEvent                 ; somewhere which is non-zero
        SWI     XWimp_Poll
        BVS     Exit
        TEQ     r0, #User_Message
        TEQNE   r0, #User_Message_Recorded
        BEQ     MessageGotten
        TEQ     r0, #PollWord_NonZero
        BNE     IgnoreEvent
        B       PollLoop

MessageGotten ROUT
        LDR     r0, scratchbuffer1 + ms_action
        TEQ     r0, #Message_Quit
        BNE     IgnoreEvent
        B       Exit
 ]

AllDone
 [ KeepItUp
        LDR     r2, BannerCloseTime
        TEQ     r2, #0
        BEQ     Exit                    ; Nothing to keep up... (no banner)

        BL      IconBarHackClose

KeepItUpLoop
        MOV     r0, #0
        ADR     r1, scratchbuffer1
        LDR     r2, BannerCloseTime
        SWI     XWimp_PollIdle
        BVS     Exit
1
        Push    r0
        LDR     r2, BannerCloseTime
        SWI     XOS_ReadMonotonicTime
        CMP     r0, r2
        Pull    r0
        BHS     Exit
        TEQ     r0, #Mouse_Button_Change
        BEQ     Exit
        TEQ     r0, #User_Message
        TEQNE   r0, #User_Message_Recorded
        BEQ     GotMessageKeepingItUp
        B       KeepItUpLoop

GotMessageKeepingItUp
        LDR     lr, scratchbuffer1 + ms_action
        LDR     r2, =Message_ModeChange
        TEQ     lr, r2
        LDREQ   r2, ModeChangeCount
        ADDEQ   r2, r2, #1              ; ignore ModeChange unless we've already had one
        STREQ   r2, ModeChangeCount     ; but subsequent ones are important
        TEQEQ   r2, #2                  ; because we can't be bothered to recache fonts...
        TEQNE   lr, #Message_Quit
        BEQ     Exit
        B       KeepItUpLoop

; If we just open the window, the iconbar will open later and will be in front of us. Thus
; when the pinboard opens at the back (-2), it will open in front of the (backwindow) iconbar
; and hence in front of us :-( Thus put an invisible icon on the iconbar before we start,
; then delete it when all module tasks are started (ie before any redrawing actually gets
; a chance to happen, hopefully, so it will never be seen)..
;
; A better solution would be to modify the wimp to ensure the icon bar isn't created at the front
IconbarHack
        Push    "r0-r1,lr"
        SUB     sp,sp,#36
        MOV     r1,sp
        MOV     r0,#-1
        STR     r0,[r1,#0]      ; Open at left
        MOV     r0,#0
        STR     r0,[r1,#4]      ; min x
        STR     r0,[r1,#8]      ; min y
        STR     r0,[r1,#16]     ; max y
        STR     r0,[r1,#20]     ; flags
        MOV     r0,#-16
        STR     r0,[r1,#12]     ; max x (hack to make it take up no space on iconbar)
        SWI     XWimp_CreateIcon
        STR     r0,IconHandle
        ADD     sp,sp,#36
        Pull    "r0-r1,pc"

IconBarHackClose
        Push    "r0-r1,lr"
        MOV     r0,#-2
        LDR     r1,IconHandle
        STMFD   sp!,{r0-r1}
        MOV     r1,sp
        SWI     XWimp_DeleteIcon
        ADD     sp,sp,#8
        Pull    "r0-r1,pc"
 ]
;
; call OS_Exit - exits back to Wimp if any tasks started
;
Exit
        MOV     r9, r0                  ; preserve error
        SavePSR r8                      ; preserve V flag (and others)

 [ debugtm
        Pull    "r1"
        SWI     XOS_ReadMonotonicTime
        SUB     r1, r0, r1
        Debug   tm,"*Desktop command completion ",r1
        Push    "r0"
 ]
        MOV     R1, #Service_StartedWimp ; tell them I've finished!
        SWI     XOS_ServiceCall
 [ debugtm
        Pull    "r1"
        SWI     XOS_ReadMonotonicTime
        SUB     r1, r0, r1
        Debug   tm,"Service_StartedWimp ",r1
        Push    "r0"
 ]

Exit2
 [ NewBanner
        BL      FreeFontsEtc
 ]

        ; Close messages file
        ADR     r0, MessageBlock
        SWI     XMessageTrans_CloseFile

        ; free sprites
        LDR     r2, privatesprites
        TEQ     r2, #0
        MOVNE   r0, #ModHandReason_Free
        SWINE   XOS_Module
        MOV     r0, #0
        STR     r0, privatesprites

        ; free workspace
        MOV     r0, #ModHandReason_Free
        MOV     r2, wp
        SWI     XOS_Module

        ; Generate the original error
        TST     r8, #V_bit
        MOVNE   r0, r9
        SWINE   OS_GenerateError

        SWI     OS_Exit
        LTORG

keydef  DCB     "file/A/K",0
        ALIGN

com_unset       DCB     "%Unset "
str_desktopfile DCB     "Desktop$$File", 0

                ALIGN
;
; List of message tokens for commands required to start up the ROM
; applications
;
bootcommands
com1    DCB     com2 - com1, "Alarm", 0
com2    DCB     com3 - com2, "Printers", 0      ; was Calc
com3    DCB     com4 - com3, "Chars", 0
com4    DCB     com5 - com4, "Config", 0
com5    DCB     com6 - com5, "Draw", 0
com6    DCB     com7 - com6, "Edit", 0
com7    DCB     com8 - com7, "Help", 0
com8    DCB     com9 - com8, "Paint", 0
com9    DCB     0,0

bootbits_mask   *       (1 :SHL: 8) - 1
        ALIGN

; *****************************************************************************
;
; PumpModuleApps
;
StartPumpModuleApps Entry
        ADR     r0, PumpOneModuleApp
        STR     r0, NextPump
        B       %FT01
PumpOneModuleApp ALTENTRY
01
        Debug   tm, "Service_StartWimp"
        MOV     r1, #Service_StartWimp
        SWI     XOS_ServiceCall
        EXIT    VS
        TEQ     r1, #Service_Serviced
        BNE     %FT50
 [ debugtm
        MOV     r14, r0
        SWI     XOS_ReadMonotonicTime
        Push    "r0,r14"
        MOV     r0,r14
 ]
        SWI     XWimp_StartTask         ; start up as new task if claimed
 [ debugtm
        Pull    "r1,r3"
        SWI     XOS_ReadMonotonicTime
        SUB     r1, r0, r1
        Debuga  tm,"Time ",r1
        DebugS  tm," app ",r3
 ]
        EXIT

50
        ADR     r0, StartPumpBootROMApps
        STR     r0, NextPump
        MOV     r0, #0
        STR     r0, PumpHidden
        EXIT

; -----------------------------------------------------------------------------
;
; PumpBootROMApps
;
; enumerate "Resources:$.Apps", and call *Filer_Boot for all these
; NB: must be done after the modules are started (Filer in particular)
;
StartPumpBootROMApps Entry

        ; Copy "Filer_Boot Resources:$.Apps." into Buffer

        ADRL    R1, filerboot           ; R1 -> "Filer_Boot Resources:$.Apps"
        ADR     R2, scratchbuffer1      ; R2 -> output buffer
11      LDRB    R14, [R1], #1
        TEQ     R14, #0
        STRNEB  R14, [R2], #1
        BNE     %BT11
        MOV     R14, #"."               ; put a "." on the end
        STRB    R14, [R2], #1

        ; Set up the PumpParams
        MOV     R4, #0                  ; R4 = 0 (start at first file)
        ADR     R5, scratchbuffer1 + ?scratchbuffer1
        SUB     R5, R5, R2              ; R5 = buffer size

        STR     r2, PumpParams_0
        STR     r4, PumpParams_1
        STR     r5, PumpParams_2

        ADR     r0, PumpOneBootROMApp
        STR     r0, NextPump
        B       %FT01

PumpOneBootROMApp ALTENTRY
01

        ; Pick up params
        MOV     r0, #OSGBPB_ReadDirEntries
        ADRL    r1, appsdir             ; r1 -> "Resources:$.Apps"
        LDR     r2, PumpParams_0        ; buffer to read to
        LDR     r4, PumpParams_1        ; position
        LDR     r5, PumpParams_2        ; buffer size
        ADRL    r6, plingstar           ; Wildcard is "!*"

        ; Read next app to boot
10
        MOV     r3, #1                  ; objects to read = 1
        SWI     XOS_GBPB                ; Wimp handles errors
        MOVVS   r4, #-1                 ; Convert error to giving up on the ROM apps
        CMP     r4, #0
        BLT     %FT50                   ; finish if finished directory
        CMP     r3, #1
        BLT     %BT10                   ; Loop if nothing matched wildcard

        STR     r4, PumpParams_1        ; to continue next time

        ; Boot the app
        ADR     R0, scratchbuffer1      ; perform *Filer_Boot Resources:$.Apps.<filename>
 [ debugtm
        MOV     r14, r0
        SWI     XOS_ReadMonotonicTime
        Push    "r0,r14"
        MOV     r0,r14
 ]
        SWI     XOS_CLI                 ; starts a new Wimp task
 [ debugtm
        Pull    "r7,r8"
        SWI     XOS_ReadMonotonicTime
        SUB     r7, r0, r7
        Debuga  tm,"Time ",r7
        DebugS  tm," command ",r8
 ]
        EXIT

50
        ADR     r0, StartPumpStartROMApps
        STR     r0, NextPump
        EXIT
; -----------------------------------------------------------------------------
;
; PumpStartROMApps
;
; now start up the ROM-based applications,
; if the relevant bits in DeskbootCMOS are set.
;
StartPumpStartROMApps Entry
        LDR     r14, nactive            ; don't start unless this was first task
        TEQ     r14, #0
        BNE     %FT50

        MOV     r0, #ReadCMOS
        MOV     r1, #DeskbootCMOS
        SWI     XOS_Byte
        EXIT    VS

        MOV     r3, r2
        MOV     r1, #Deskboot2CMOS
        SWI     XOS_Byte
        EXIT    VS
        AND     r2, r2, #bootbits_mask :SHR: 8
        ORR     r2, r3, r2, LSL #8      ; r2 = full flag word

        ADRL    r3,bootcommands

        STR     r2, PumpParams_0
        STR     r3, PumpParams_1

        ADR     r0, PumpOneStartROMApp
        STR     r0, NextPump
        B       %FT01

PumpOneStartROMApp ALTENTRY
01
        LDR     r2, PumpParams_0
        LDR     r3, PumpParams_1
10
        MOVS    r2, r2, LSR #1          ; is next bit set?
        BNE     %FT20
        BCC     %FT50                   ; EQ and CC, ie no more commands to activate
20
        ADD     r1, r3, #1
        LDRB    r14, [r3]
        ADD     r3, r3, r14
        STR     r2, PumpParams_0
        STR     r3, PumpParams_1
        BCC     %BT10
 [ debugtm
        MOV     r14, r0
        SWI     XOS_ReadMonotonicTime
        Push    "r0,r14"
        MOV     r0,r14
 ]
; OSS Look the command up in the Messages file.

        BL      MsgLookup
        BVS     %FT47
        MOV     r0, r1
        SWI     XWimp_StartTask
 [ debugtm
        Pull    "r7,r8"
        SWI     XOS_ReadMonotonicTime
        SUB     r7, r0, r7
        Debuga  tm,"Time ",r7
        DebugS  tm," command ",r8
 ]
        EXIT

; OSS Report a lookup error on the start command.

47
        ADRL    r1, Desktop_Title
        MOV     r2, r0                  ; Save original error
        BL      MsgLookup
        MOV     r0, r2                  ; Restore original error
        ADRVSL  r2, Desktop_Title       ; Hardcoded banner if failed
        MOVVC   r2, r1                  ; otherwise looked up one.
        MOV     r1, #1                  ; Provide an OK box.
        SWI     XWimp_ReportError
        EXIT

50
        ADR     r0, StartPumpDesktopCommands
        STR     r0, NextPump
        EXIT

; -----------------------------------------------------------------------------
;
; PumpDesktopCommands
;
; now execute the command on the parameter line
; if null, this causes a screen redraw
; it can also indicate a *Obey file, containing *WimpTask commands
;
StartPumpDesktopCommands Entry

        ADRL    r0, keydef
        ADR     r1, commandtail
        ADR     r2, scratchbuffer1
        MOV     r3, #?scratchbuffer1
        SWI     XOS_ReadArgs            ; 'Bad parameters' if -file not present
        BVC     executefile
;
; Single command - Wimp_StartTask this
        ADR     r0, commandtail
        SWI     XWimp_StartTask
        B       %FT50

; -File blah
executefile
        ADRL    r0, str_desktopfile     ; r0 -> "Desktop$File"
        LDR     r1, scratchbuffer1      ; r1 -> new value
        MOV     r2, #1                  ; create item, don't delete it
        MOV     r3, #0                  ; search whole name space
        MOV     r4, #VarType_String     ; GSTrans the value now
        SWI     XOS_SetVarVal           ; abort on error
        EXIT    VS

        MOV     r0, #OSFind_ReadFile
        LDR     r1, scratchbuffer1      ; r1 --> filename (must be present)
        SWI     XOS_Find                ; don't care if error aborts
        EXIT    VS

        STR     r0, PumpParams_0        ; file handle

        ADR     r0, PumpOneDesktopCommand
        STR     r0, NextPump

        B       %FT01

PumpOneDesktopCommand ALTENTRY
01
        ; Use whole of scratch space for reading lines of file.
        ASSERT  scratchbuffer2 = scratchbuffer1 + ?scratchbuffer1
        LDR     r1, PumpParams_0
        ADR     r2, scratchbuffer1
        MOV     r3, #?scratchbuffer1 + ?scratchbuffer2
10
        SWI     XOS_BGet
        BVS     %FT40                   ; close file on error
        BCS     %FT40                   ; eof in middle of line ==> ignore it
        SUBS    r3, r3, #1
        STRHIB  r0, [r2], #1
        CMPHI   r0, #" "
        BHS     %BT10

        CMP     r3, #0
        BEQ     %FT20

        ADR     r0, scratchbuffer1
 [ debugtm
        MOV     r14, r0
        SWI     XOS_ReadMonotonicTime
        Push    "r0,r14"
        MOV     r0,r14
 ]
        SWI     XWimp_StartTask         ; no way that error aborts can happen!
 [ debugtm
        Pull    "r7,r8"
        SWI     XOS_ReadMonotonicTime
        SUB     r7, r0, r7
        Debuga  tm,"Time ",r7
        DebugS  tm," command ",r8
 ]

        EXIT

 MakeInternatErrorBlock BuffOverflow,,BufOFlo

        ; Buffer overflow
20      ADR     r0, ErrorBlock_BuffOverflow
        MOV     r1, #0
        MOV     r2, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        LDR     r1, PumpParams_0

40
        ; Close file on completion or error
        MOV     r4, r0                  ; NB STACK CANNOT BE USED !!!!
        SavePSR r5
        MOV     r0, #0                  ; close file
        SWI     XOS_Find                ; errors blow up again
        RestPSR r5,,f
        MOVVS   r0, r4
        EXIT    VS

50
        MOV     r0, #0
        STR     r0, NextPump
        EXIT

; *****************************************************************************
;
; DisplayWelcomeScreen
;
DisplayWelcomeScreen
 [ :LNOT:NewBanner

      [ :LNOT: Embedded_UI              ; RWB - Remove welcome screen
        ^       0,sp
Welcome_font    #       4
Welcome_font1   #       4
Welcome_font2   #       4
Welcome_nx      #       4
Welcome_ny      #       4
Welcome_npix    #       4
Welcome_Matrix  #       32
Welcome_Buffer  #       20
Welcome_Count   #       4
Welcome_Area    #       4
Welcome_WSSize  * :INDEX: @@

        Entry ,Welcome_WSSize

        MOV     r0,#-1
        MOV     r1,#11
        SWI     XOS_ReadModeVariable
        BVS     WelcomeError_NoFont
        MOV     r6,r2
        MOV     r1,#4
        SWI     XOS_ReadModeVariable    ;Get xeig
        BVS     WelcomeError_NoFont
        MOV     r6,r6,ASL r2
        STR     r6,Welcome_nx

        MOV     r1,#12
        SWI     XOS_ReadModeVariable
        BVS     WelcomeError_NoFont
        MOV     r7,r2
        MOV     r1,#5
        SWI     XOS_ReadModeVariable    ;Get  Yeig
        BVS     WelcomeError_NoFont
        MOV     r7,r7,ASL r2
        STR     r7,Welcome_ny

        MOV     r1,#9
        SWI     XOS_ReadModeVariable
        BVS     WelcomeError_NoFont
        STR     r2,Welcome_npix         ; npix

        Debug   we,"About to find first font"

        ADRL    r1,WelcomeFont
        MOV     r2,#32*16
        MOV     r3,r2
        MOV     r4,#0
        MOV     r5,#0
        SWI     XFont_FindFont          ; r0 = font handle
        BVS     WelcomeError_NoFont
        STR     r0,Welcome_font
        Debug   we,"First font found",r0

        LDR     r1,=&dddddd00
        LDR     r2,=&00000000
        LDR     r3,Welcome_npix
        CMP     R3,#1
        MOVEQ   r3,#0
        MOVNE   r3,#14
        SWI     XColourTrans_SetFontColours
        BVS     WelcomeError_OneFont
        Debug   we,"Colours for first font set"

        ADRL    r1,WelcomeString1
        BL      MsgLookup
        BVS     WelcomeError_OneFont
        MOV     r2,#&40000000
        MOV     r3,#&40000000
        MOV     r4,#-1
        MOV     r5,#255
        SWI     XFont_StringWidth
        BVS     WelcomeError_OneFont
        Debug   we,"width 1 found"
        MOVVC   r1,r2
        SWIVC   XFont_ConverttoOS
        BVS     WelcomeError_OneFont
        MOV     r9,r2                   ; xw1
        Debug   we,"Width of string 1 ",r9

        Debug   we,"About to find second font"
        ADRL    r1,WelcomeFont
        MOV     r2,#18*16
        MOV     r3,r2
        MOV     r4,#0
        MOV     r5,#0
        SWI     XFont_FindFont          ; r0 = font handle
        BVS     WelcomeError_OneFont
        STR     r0,Welcome_font1
        Debug   we,"Font 2 found",r0

        LDR     r1,=&dddddd00
        LDR     r2,=&00000000
        LDR     r3,Welcome_npix
        CMP     R3,#1
        MOVEQ   r3,#0
        MOVNE   r3,#14
        SWI     XColourTrans_SetFontColours
        BVS     WelcomeError_TwoFonts
        Debug   we,"Colours for second font set"

        ADRL    r1,WelcomeString2
        BL      MsgLookup
        BVS     WelcomeError_TwoFonts
        MOV     r2,#&40000000
        MOV     r3,#&40000000
        MOV     r4,#-1
        MOV     r5,#255
        SWI     XFont_StringWidth
        BVS     WelcomeError_TwoFonts
        Debug   we,"width of dtring 2 found"
        MOVVC   r1,r2
        SWIVC   XFont_ConverttoOS
        BVS     WelcomeError_TwoFonts
        MOV     r10,r2                  ; xw2
        Debug   we,"Width of string 2 ",r10

        Debug   we,"About to find third font"
        ADRL    r1,WelcomeFont2
        MOV     r2,#14*16
        MOV     r3,r2
        MOV     r4,#0
        MOV     r5,#0
        SWI     XFont_FindFont          ; r0 = font handle
        BVS     WelcomeError_TwoFonts
        STR     r0,Welcome_font2
        Debug   we,"Font 3 found",r0

        LDR     r1,=&dddddd00
        LDR     r2,=&00000000
        LDR     r3,Welcome_npix
        CMP     R3,#1
        MOVEQ   r3,#0
        MOVNE   r3,#14
        SWI     XColourTrans_SetFontColours
        BVS     WelcomeError_ThreeFonts
        Debug   we,"Colours for third font set"

        ADRL    r1,WelcomeString3
        BL      MsgLookup
        BVS     WelcomeError_ThreeFonts
        MOV     r2,#&40000000
        MOV     r3,#&40000000
        MOV     r4,#-1
        MOV     r5,#255
        SWI     XFont_StringWidth
        BVS     WelcomeError_ThreeFonts
        Debug   we,"width of string 3 found"
        MOVVC   r1,r2
        SWIVC   XFont_ConverttoOS
        BVS     WelcomeError_ThreeFonts
        MOV     r11,r2                  ; xw3
        Debug   we,"Width of string 2 ",r11

        LDR     r6,Welcome_nx
        MOV     r5,r6,LSR #1            ; x

        LDR     r7,Welcome_ny
        MOV     r4,r7,LSR #1            ; y

        Debug   we,"x y ",r4,r5

        ADD     r8,r9,#100
        CMP     r8,r10
        MOVLT   r8,r10
        ADD     r8,r8,#100
        CMP     r8,r11
        MOVLT   r8,r11                  ; lx
        Debug   we,"lx ",r8

        LDR     r1,Welcome_npix
        Debug   we,"set colour",r1
        CMP     r1,#0
        MOVEQ   r0,#7
        MOVNE   r0,#6
        SWI     XWimp_SetColour
        BVS     WelcomeError_ThreeFonts

        MOV     r0,#4                   ; Move
        SUB     r1,r5,r8,LSR #1
        ADD     r1,r1,#8
        SUB     r2,r4,#256
        SUB     r2,r2,#2
        SWI     XOS_Plot
        MOVVC   r0,#96+5                ; Filled rectangle
        ADDVC   r1,r1,r8
        ADDVC   r2,r2,#500
        SWIVC   XOS_Plot
        BVS     WelcomeError_ThreeFonts

        LDR     r1,Welcome_npix
        Debug   we,"set colour II",r1
        CMP     r1,#0
        MOVEQ   r0,#0
        MOVNE   r0,#1
        SWI     XWimp_SetColour
        BVS     WelcomeError_ThreeFonts

        MOV     r0,#4                   ; Move
        SUB     r1,r5,r8,LSR #1
        SUB     r2,r4,#250
        SWI     XOS_Plot
        MOVVC   r0,#96+5                ; Filled rectangle
        ADDVC   r1,r1,r8
        ADDVC   r2,r2,#500
        SWIVC   XOS_Plot
        BVS     WelcomeError_ThreeFonts

        MOV     r0,#7
        SWI     XWimp_SetColour
        BVS     WelcomeError_ThreeFonts

        MOV     r0,#4                   ; Move
        SUB     r1,r5,r8,LSR #1
        SUB     r2,r4,#250
        SWI     XOS_Plot
        MOVVC   r0,#5                   ; Line
        ADDVC   r1,r1,r8
        SWIVC   XOS_Plot
        ADDVC   r2,r2,#500
        SWIVC   XOS_Plot                ; Line
        SUBVC   r1,r1,r8
        SWIVC   XOS_Plot                ; Line
        SUBVC   r2,r2,#500
        SWIVC   XOS_Plot                ; Line
        BVS     WelcomeError_ThreeFonts

        LDR     r1,Welcome_npix
        Debug   we,"set colour (Acorn)",r1
        CMP     r1,#1
        MOVLT   r0,#7
        MOVEQ   r0,#5
        MOVGT   r0,#10
        SWI     XWimp_SetColour
        BVS     WelcomeError_ThreeFonts

        MOV     r0,#&3000               ; Scale factor
        STR     r0,Welcome_Matrix
        STR     r0,Welcome_Matrix+12
        MOV     r0,#0
        STR     r0,Welcome_Matrix+4
        STR     r0,Welcome_Matrix+8
        SUB     r0,r5,#75
        MOV     r0,r0,ASL #8
        STR     r0,Welcome_Matrix+16
        ADD     r0,r4,#50
        MOV     r0,r0,ASL#8
        STR     r0,Welcome_Matrix+20

        ADRL    r0,Welcome_AcornPath
11
        LDR     r1,[r0],#4
        Debug   we,"Length = ",r1
        CMP     r1,#0
        MOVNE   r1,#0
        ADRNE   r2,Welcome_Matrix
        MOVNE   r3,#0
        Push    "r0"
        SWINE   XDraw_Fill
        Pull    "r0"
        BVS     WelcomeError_ThreeFonts
        LDR     r1,[r0,#-4]
        CMP     r1,#0
        ADDNE   r0,r0,r1, ASL #2
        BNE     %BT11

        Debug   we,"Acorn plotted"

        LDR     r0,Welcome_font
        SWI     XFont_SetFont
        ADRVCL  r1,WelcomeString1
        BLVC    MsgLookup
        BVS     WelcomeError_ThreeFonts
        MOV     r2,#2_10000
        SUB     r3,r5,r9,LSR #1
        Push    "r4"
        SUB     r4,r4,#26
        SWI     XFont_Paint
        Pull    "r4"
        BVS     WelcomeError_ThreeFonts

        LDR     r0,Welcome_font1
        SWI     XFont_SetFont
        ADRVCL  r1,WelcomeString2
        BLVC    MsgLookup
        BVS     WelcomeError_ThreeFonts
        MOV     r2,#2_10000
        SUB     r3,r5,r10,LSR #1
        Push    "r4"
        SUB     r4,r4,#80
        SWI     XFont_Paint
        Pull    "r4"
        BVS     WelcomeError_ThreeFonts

        LDR     r0,Welcome_font2
        SWI     XFont_SetFont
        ADRVCL  r1,WelcomeString3
        BLVC    MsgLookup
        BVS     WelcomeError_ThreeFonts
        MOV     r2,#2_10000
        SUB     r3,r5,r11,LSR #1
        Push    "r4"
        SUB     r4,r4,#200
        SWI     XFont_Paint
        Pull    "r4"

; OSS This section used to be conditionally compiled in for pre-release
; versions to display the pre-release string. It now works by looking the
; string up in the messages file, and not displaying anything if the
; string is absent. Thus RAM loaded localisations have a extra string to
; play with for their pre-release versions as was done for the Mexico
; Amber version.

        BVS     WelcomeError_ThreeFonts
        LDR     r0,Welcome_font
        Push    "r4,r5"
        SWI     XFont_SetFont
        BVS     %FT01
        ADRL    r1,WelcomeString4
        BL      MsgLookup
        BVS     %FT01
        MOV     r2,#&40000000
        MOV     r3,#&40000000
        MOV     r4,#-1
        MOV     r5,#255
        SWI     XFont_StringWidth
01
        Pull    "r4,r5"
        BVS     WelcomeError_ThreeFonts
        Debug   we,"width of string 4 found"
        MOVVC   r1,r2
        SWIVC   XFont_ConverttoOS
        BVS     WelcomeError_ThreeFonts
        MOV     r11,r2                  ; xw3
        Debug   we,"Width of string 4 ",r11

        LDR     r1,=&77777700
        LDR     r2,=&00000000
        LDR     r3,Welcome_npix
        CMP     R3,#1
        MOVEQ   r3,#0
        MOVNE   r3,#14
        SWI     XColourTrans_SetFontColours
        BVS     WelcomeError_ThreeFonts
        Debug   we,"Colours for third(4) font set"

        ADRL    r1,WelcomeString4
        BL      MsgLookup
        BVS     WelcomeError_ThreeFonts
        DebugS  we,"Fourth string is", r1
        MOV     r2,#2_10000
        SUB     r3,r5,r11,LSR #1
        Push    "r4"
        SUB     r4,r4,#364
        SWI     XFont_Paint
        Pull    "r4"

WelcomeError_ThreeFonts
        LDR     r0,Welcome_font2
        SWI     XFont_LoseFont
WelcomeError_TwoFonts
        LDR     r0,Welcome_font1
        SWI     XFont_LoseFont
WelcomeError_OneFont
        LDR     r0,Welcome_font
        SWI     XFont_LoseFont
WelcomeError_NoFont

        EXIT
      ]
      [ debug
        InsertNDRDebugRoutines
      ]

 | ; NewBanner

        Push    "R1-R7,lr"
        ADR     R1,templatename
        SWI     XWimp_OpenTemplate
        Pull    "R1-R7,PC",VS
        MOV     R0,#ModHandReason_Claim
        MOV     R3,#1024
        SWI     XOS_Module
        Pull    "R1-R7,PC",VS
        MOV     R7,R2
        STR     R7,NewWelcomeWorkspace

        MOV     R0,#64
        MOV     R1,#0
        ADD     R3,R2,#768
05
        STR     R1,[R3],#4                      ; clear font ref count
        SUBS    R0,R0,#1
        BNE     %BT05

        MOV     r0,#-1
        MOV     r1,#11
        SWI     XOS_ReadModeVariable
        MOVVC   r6,r2
        MOVVC   r1,#4
        SWIVC   XOS_ReadModeVariable            ;Get xeig
        SUBVS   SP,SP,#12
        BVS     ExitDisplay
        MOV     r6,r6,ASL r2

        ADD     R6,R6,#16
        Push    R6

        MOV     r0,#-1
        MOV     r1,#12
        SWI     XOS_ReadModeVariable
        MOVVC   r6,r2
        MOVVC   r1,#5
        SWIVC   XOS_ReadModeVariable            ;Get yeig
        SUBVS   SP,SP,#8
        BVS     ExitDisplay
        MOV     r6,r6,ASL r2

        SUB     R6,R6,#16                       ; drop shadow
        Push    R6

        MOV     R2,R7
        ADR     R5,backdropname
        MOV     R0,#0
        BL      displaywindow

        Pull    "R5,R6"
        Push    R9

        ADD     R5,R5,#16
        SUB     R6,R6,#16

        Push    "R5,R6"                         ; make sure this pair is last on for 'displaywindow' to read

        MOV     R2,R7

        ADR     R5,desktopname
        BL      displaywindow

        SWI     XWimp_CloseTemplate
      [ DateFromKernel
        ; Modify the copyright string "    (C) Owner" to
        ;                             "(C)YYYY Owner" if possible based on OSByte 0
        SUB     SP,SP,#gi_size
        STR     R9,[SP,#gi_handle]
        MOV     R1,#6                           ; copyright string icon number
        STR     R1,[SP,#gi_iconhandle]
        MOV     R1,SP
        SWI     XWimp_GetIconState
        BVS     %FT30

        LDR     R0,[SP,#gi_iconblock+i_flags]
        TST     R0,#if_indirected
        BEQ     %FT30                           ; only deal with indirected case
        LDR     R4,[SP,#gi_iconblock+i_data+ii_buffer]
        ADD     SP,SP,#gi_size

        ; Get the version
        MOV     R0,#0
        MOV     R1,#0
        SWI     XOS_Byte
        ADD     R0,R0,#4                        ; skip error number
10
        ; Look for closing bracket
        LDRB    R1,[R0],#1
        TEQ     R1,#0
        BEQ     %FT30                           ; no bracket, nevermind, template makes sense on its own
        TEQ     R1,#")"
        BNE     %BT10
        SUB     R3,R0,#1

        ; Check for preceding YYYY digits
        SUB     R1,R3,#4
        MOV     R0,#10
        SWI     XOS_ReadUnsigned
        BVS     %FT30
        TEQ     R3,R1
        BNE     %FT30                           ; non decimals, nevermind, template makes sense on its own

        ; Move the copyright symbol back
        LDRB    R0,[R4,#5]
        STRB    R0,[R4,#0]

        ; Overlay the year then zap the null terminator
        MOV     R0,R2
        ADD     R1,R4,#2
        MOV     R2,#5
        SWI     XOS_ConvertCardinal2
        MOV     R0,#" "
        STRB    R0,[R1]
30
      ]
        MOV     R0,R9
        BL      redrawwindow                    ; fore
        LDR     R0,[SP,#2*4]
        BL      redrawwindow                    ; back

        B       ExitDisplay

templatename    DCB     "Resources:$.Resources.Desktop.Templates",0
backdropname    DCB     "backdrop",0
desktopname     DCB     "desktop",0
        ALIGN

displaywindow
        Push    "lr"
        MOV     R1,R2
        ADD     R2,R2,#512
        ADD     R3,R2,#256
        ADD     R4,R7,#768
        MOV     R6,#0
        SWI     XWimp_LoadTemplate
        ADDVS   SP,SP,#4
        BVS     ExitDisplay

        LDR     r0, privatesprites
        STR     r0, [r1, #64]                   ; use local sprite pool in the 'desktop' window
        SWI     XWimp_CreateWindow
        ADDVS   SP,SP,#4
        BVS     ExitDisplay

        STR     R0,[SP,#-44]!
        MOV     R1,SP
        SWI     XWimp_GetWindowState

        ADD     R14,R1,#4
        LDMIA   R14,{R2-R5}
        LDR     R6,[SP,#52]                     ; xpix
        SUB     R4,R4,R2                        ; width
        SUB     R2,R6,R4
        MOV     R2,R2, LSR #1
        ADD     R4,R2,R4

        LDR     R6,[SP,#48]                     ; ypix
        SUB     R5,R5,R3
        SUB     R3,R6,R5
        MOV     R3,R3, LSR #1
        ADD     R5,R3,R5

        STMIA   R14,{R2-R5}

        MOV     R14,#-1
        STR     R14,[R1,#28]                    ; make absolutely sure we open on top

        SWI     XWimp_OpenWindow
        LDRVC   R9,[R1,#0]
        ADD     SP,SP,#44
        Pull    "PC",VC
        B       ExitDisplay

redrawwindow
        Push    "LR"
        SUB     SP,SP,#44
        MOV     R1,SP
        STR     R0,[SP,#0]
        SWI     XWimp_RedrawWindow
        ADDVS   SP,SP,#44
        BVS     ExitDisplay
01
        TEQ     R0,#0
        ADDEQ   SP,SP,#44
        Pull    PC,EQ
        SWI     XWimp_GetRectangle
        ADDVS   SP,SP,#44
        BVS     ExitDisplay
        B       %BT01



ExitDisplay
        ADD     SP,SP,#12                       ; skip 3 * items on stack
 [ KeepItUp
        Pull    "R1-R7,PC"
FreeFontsEtc
        Push    "R1-R7,LR"
        LDR     R7,NewWelcomeWorkspace
        TEQ     R7,#0
        Pull    "R1-R7,PC",EQ
 ]
        Push    R0
        ADD     R1,R7,#768
        MOV     R0,#255
05
        LDRB    R14,[R1,R0]
07
        TEQ     R14,#0
08
        SUBNE   R14,R14,#1
        SWINE   Font_LoseFont

        TEQ     R14,#0
        BNE     %BT08

        SUBS    R0,R0,#1
        BNE     %BT05

        MOV     R2,R7
        MOV     R0,#ModHandReason_Free
        SWI     XOS_Module

        LDR     R2, privatesprites
        TEQ     R2,#0
        MOVNE   R0,#ModHandReason_Free
        SWINE   XOS_Module
        MOV     R0, #0
        STR     R0, privatesprites

        Pull    R0
        Pull    "R1-R7,PC"

 ]

        END
@


4.16
log
@Fix error handling in displaywindow
Detail:
  s/Desktop - displaywindow wasn't balancing the stack properly when calling ExitDisplay on errors, leading to aborts when things go wrong
Admin:
  Tested on Pandora
  Fixes "abort on instruction fetch" when entering the desktop - but root cause of error still needs to be determined


Version 2.75. Tagged as 'Desktop-2_75'
@
text
@d602 1
a602 1
str_booterror   DCB     "Boot$Error",0
d823 1
a823 1
str_desktopfile DCB     "Desktop$File", 0
@


4.15
log
@Don't offer to boot from floppy if there are no floppy drives
Detail:
  s/Desktop - "Floppy boot" option is now omitted from boot error message if machine has no ADFS floppy drives
  Resources/Germany/Messages, Resources/UK/Messages - Add new messages string for floppyless boot options
Admin:
  Tested on Raspberry Pi


Version 2.74. Tagged as 'Desktop-2_74'
@
text
@d1676 1
d1682 1
@


4.14
log
@Make the banner show the year from *FX0.
To save the effort of the annual change to this module's resources, new option "DateFromKernel" will get the year from OS_Byte 0 and patch the template at time of display. If any part of it fails the banner just shows (C) Owner by default with no year.
Changed 'true' to objasm {TRUE}.
Optimised away a whole word of workspace (WindowHandle) by more cunning stack push and pop before displaying the banner.
Added check that the file passed to Squash is actually a Squash file, otherwise module exploded if soft loaded onto old resources.
Fix problem of oflaofla error if the Squash module was exhausted (ie. status code was non 0), previously this was treated as an error block and passed via R9 to OS_GenerateError - now both duff squash files and failure to decompress give a 'Bad sprite area' error.
Updated comment about Wimp 2.00.
An ADR to Desktop_Title didn't reach for the old banner case.
ExitDisplay2 optimised away.
Tested softloaded on top of 5.17 ROM.

Version 2.72. Tagged as 'Desktop-2_72'
@
text
@d47 1
d546 11
a556 1
        ADR     r1, token_errorbuttons  ; Now get text for buttons.
d609 1
@


4.13
log
@Squash the sprites used by the Desktop module
Detail:
  Makefile - Use Squash to compress the startup banner spritefile. Saves about 40k of ROM space.
  s/Desktop - Add code for loading the squashed sprites.
Admin:
  Tested in ROM softload on Iyonix


Version 2.71. Tagged as 'Desktop-2_71'
@
text
@d56 2
d67 5
a71 5
debugxx SETL    true :LAND: debug
debugwe SETL    true :LAND: debug
debugcr SETL    true :LAND: debug
debugtm SETL    true :LAND: debug
hostvdu SETL    true
a79 2
baseline        *       50

a89 1
WindowHandle            #       4
d296 1
d309 1
d311 1
a311 1
        LDRVC   r3, [r10, #4] ; get uncompressed length
d313 1
a313 1
        ADDVC   r3, r3, #4
d319 6
a324 1
        ; Allocate Squash workspace
d328 2
d335 2
d345 2
a346 2
        ; This code will fail if Squash doesn't decompress it all in one go!
        MOV     r9, r0 ; Remember error, if any
d351 16
a366 4
        ; Report error if necessary
        CMP     r9, #0
        BNE     %FT23
        ; Free file buffer
d377 1
a377 1
        ; Free file buffer
a380 8
25
        ; Free module workspace
        MOV     r2, r12
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        ; generate original error
        MOV     r0, r9
        SWI     OS_GenerateError
d406 1
a413 1
 ]
d485 1
a485 1
        MOV     R0, #300                ; pretend to know about Wimp 2.00
d556 1
a556 1
        ADR     r2, Desktop_Title
a625 1
  [ NewBanner
a628 2
        BL      DisplayNewWelcome
  |
d630 1
a630 1
  ]
d679 1
a679 1
 [     KeepItUp
a1144 2
 [ :LNOT:NewBanner

d1149 4
a1152 1
 [ :LNOT: Embedded_UI                   ; RWB - Remove welcome screen
d1166 1
a1166 1
DisplayWelcomeScreen Entry ,Welcome_WSSize
d1521 1
a1521 1
 ]
a1527 6
templatename    DCB     "Resources:$.Resources.Desktop.Templates",0
backdropname    DCB     "backdrop",0
desktopname     DCB     "desktop",0
      ALIGN

DisplayNewWelcome
d1552 1
a1552 1
        SWIVC   XOS_ReadModeVariable    ;Get xeig
d1565 1
a1565 1
        SWIVC   XOS_ReadModeVariable    ;Get yeig
d1570 1
a1570 1
        SUB     R6,R6,#16                ; drop shadow
a1576 2
        STR     R9,WindowHandle
;        SWI     XWimp_DeleteWindow
d1579 1
d1584 1
a1584 1
        Push    "R5,R6"
d1590 1
a1590 1
;        SWI     XWimp_DeleteWindow
d1592 10
d1603 41
d1645 3
a1647 3
        BL      redrawwindow
        LDR     R0,WindowHandle
        BL      redrawwindow
d1649 6
a1654 1
        B       ExitDisplay2
d1667 1
a1667 1
        STR     r0, [r1, #64]                   ; use local sprite pool in the player window
d1720 1
a1720 3
        ADD     SP,SP,#4                        ; skip lr on stack
ExitDisplay2
        ADD     SP,SP,#8                        ; npix
@


4.12
log
@Now gets the sprites for the startup banner from its own personal
resources rather than from the Wimp pool,then frees them once the
banner has gone.
3 sets of sprites added here
Iyonix = used on Tungsten
Morris4 = L7205 demo actually
Ursula = big green Acorn logo

Version 2.65. Tagged as 'Desktop-2_65'
@
text
@d46 1
d54 2
d297 71
d371 1
a391 1
        MOV     r0, r9
a393 1
        MOV     r9, r0
d399 1
@


4.11
log
@Minor 32-bit error fixed.
Templates file updated to "Iyonix" one, for now.

Version 2.64. Tagged as 'Desktop-2_64'
@
text
@d16 1
a16 41

; *********************************
; ***    C h a n g e   L i s t  ***
; *********************************

; Date       Description
; ----       -----------
;  9-Feb-90             File created from old Desktop 2.23
; 22-Feb-90             Changed to use Resources:
;               2.24    Filer_Boot's files in Resources:$.Apps
; 27-Feb-90     2.25    Removed desktop files for Filer/Act
; 28-Feb-90             Removed desktop files for !Configure,!Draw,!Edit,TinyDirs
;               2.26    Removed all references to Wimp$Path
;  1-Mar-90     2.27    Removed all references to ResourceFS
; 29-Apr-91     2.28    Corrected list of auto start applications
; 29-May-91     2.29    Added startup screen and Service_DesktopWelcome
; 18-Jan-92             General tinkering about with the module
; 17-Feb-92     2.36    Pump startup through NULL events
;                       Pass strings through MessageTrans
;                       Allocate workspace during startup only.
; 26-Feb-92     2.37    Fix bug preventing restart from working.
; 28-Feb-92     2.40    Remove check for workspace presence to enable
;                         multiple *Desktop commands to be active at once
;                         (prevents breakage of some deskboot files).
; 11-Mar-92  2.41  OSS  Look auto-start strings etc. up in Messages file.
;                       Allows ROM app names to be localised, part of
;                       fix to RP-0716.
; 02-Apr-92  2.43  LRust Re-introduce check for exec file open on desktop startup.
;                        Allows *Exec !boot files to work correctly on shift-break
;                        and fixes RP-2176
; 12-Jul-93  BCockburn   Removed GET of Hdr:Compress
; 26-Jul-93  JRoach      If OS_GBPB on Resources:$.Apps gives trouble then stop pumping
;                        ROM apps rather than giving an error
; 26-Jan-95  JRH         Quick hack to stop filer_booting files in Resources:$.Apps
; 15-May-95  RWB         Make welcome banner not appear
; 03-Mar-00  SAR         Change Boot$Error box to only have a 'Reboot' button on STBs
; 20-Apr-00  2.58  KJB   Made 32-bit compatible.
; 26-Feb-01  2.60  SBF   Removed dependency on the (now obsolete) STB flag; was all specific
;                        to the STB/NC user interface.  Now uses Embedded_UI flag instead.

;NK version, uses template for welcome banner
d26 1
a26 1
	GET	Hdr:Machine.<Machine>
d45 1
d49 2
a50 2
	GBLL	NewBanner
NewBanner SETL	{TRUE} :LAND: :LNOT: Embedded_UI
d83 1
d86 2
a87 2
IconHandle		#	4
WindowHandle		#	4
d94 2
a95 2
scratchbuffer1		#	256
scratchbuffer2		#	256
d201 1
a201 1
        ADRVCL  R1, Desktop_Title         ; R1 --> module title
d220 2
d285 1
d287 33
a319 3
        BVC     %FT15

        ; Message file failed to open - free block and generate original error
d327 1
a327 2
15

d388 2
a389 2
	MOV	R14,#0
	STR	R14,NewWelcomeWorkspace
d425 1
a425 1
	MOVNE	r0,#0			; Keep it up for 0 seconds
d522 1
a522 1
	ADR	r3, ClearScreen		; somewhere which is non-zero
d529 1
a529 1
	MOVVS	R0,#0
d533 1
a533 1
	MOVEQ	R0,#0
d540 1
a540 1
	BL	IconbarHack
d595 3
a597 3
	LDR	r2, BannerCloseTime
	TEQ	r2, #0
	BEQ	Exit			; Nothing to keep up... (no banner)
d599 1
a599 1
	BL	IconBarHackClose
d609 1
a609 1
	LDR	r2, BannerCloseTime
d618 1
a618 1
        BEQ	GotMessageKeepingItUp
d631 1
a631 1
	B	KeepItUpLoop
d641 16
a656 16
	Push	"r0-r1,lr"
	SUB	sp,sp,#36
	MOV	r1,sp
	MOV	r0,#-1
	STR	r0,[r1,#0]	; Open at left
	MOV	r0,#0
	STR	r0,[r1,#4]	; min x
	STR	r0,[r1,#8]	; min y
	STR	r0,[r1,#16]	; max y
	STR	r0,[r1,#20]	; flags
	MOV	r0,#-16
	STR	r0,[r1,#12]	; max x (hack to make it take up no space on iconbar)
	SWI	XWimp_CreateIcon
	STR	r0,IconHandle
	ADD	sp,sp,#36
	Pull	"r0-r1,pc"
d659 8
a666 8
	Push	"r0-r1,lr"
	MOV	r0,#-2
	LDR	r1,IconHandle
	STMFD	sp!,{r0-r1}
	MOV	r1,sp
	SWI	XWimp_DeleteIcon
	ADD	sp,sp,#8
	Pull	"r0-r1,pc"
d694 1
a694 1
	BL	FreeFontsEtc
d701 8
d735 1
a735 1
com2    DCB     com3 - com2, "Printers", 0	; was Calc
d997 2
a998 2
	; Use whole of scratch space for reading lines of file.
	ASSERT	scratchbuffer2 = scratchbuffer1 + ?scratchbuffer1
d1457 1
a1457 1
	STR	R7,NewWelcomeWorkspace
d1497 1
a1497 1
	STR	R9,WindowHandle
d1514 4
a1517 4
	MOV	R0,R9
	BL	redrawwindow
	LDR	R0,WindowHandle
	BL	redrawwindow
d1531 2
d1536 2
a1537 2
	STR	R0,[SP,#-44]!
	MOV	R1,SP
d1560 4
a1563 4
	LDRVC	R9,[R1,#0]
	ADD	SP,SP,#44
	Pull	"PC",VC
	B	ExitDisplay
d1566 4
a1569 4
	Push	"LR"
	SUB	SP,SP,#44
	MOV	R1,SP
	STR	R0,[SP,#0]
d1589 1
a1589 1
	Pull	"R1-R7,PC"
d1591 4
a1594 4
	Push	"R1-R7,LR"
	LDR	R7,NewWelcomeWorkspace
	TEQ	R7,#0
	Pull	"R1-R7,PC",EQ
d1616 8
@


4.10
log
@Now ignores the first Message_ModeChange received but does act on the second
one in the manner intended (ie closes banner window). The first message is
generated by the Wimp during one of the first Wimp_Polls, but old Wimps
corrupted the message list pointer they were passed if the task didn't
follow Wimp_StartTask (which is the case with the initial *Desktop that
launches the desktop) so this bug was never apparent before.

Version 2.63. Tagged as 'Desktop-2_63'
@
text
@d679 1
a679 1
        MOV     r8, pc                  ; preserve V flag (and others)
@


4.9
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 2.62. Tagged as 'Desktop-2_62'
@
text
@d131 1
d415 3
d629 7
a635 3
        TEQ     lr, #Message_Quit
	LDRNE	r2, =Message_ModeChange
	TEQNE	lr, r2			; Because we can't be bothered to recache fonts...
@


4.8
log
@
  * Removed dependency on obsolete STB flag.

Detail:

  * No longer relies on the STB flag; instead utilises "Hdr:UserIF.<UserIF>"
    to provide the Embedded_UI flag.

Admin:

  * Built and tested on Lazarus 32-bit build.  Code is binary identical
    to previous version in both STB and non-STB cases.

  * Requires HdrSrc 1.17 or later.

Version 2.61. Tagged as 'Desktop-2_61'
@
text
@d58 1
a63 1
;        GET     Hdr:EnvNumbers
a107 1
        LEADR   Module_LoadAddr
d165 1
a165 7
        DCB     "Desktop", TAB, TAB, "$Module_MajorVersion ($Module_Date)"
      [ Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
      ]
        DCB     0
                ALIGN
;
d233 1
a233 1
Desktop_Code ENTRY
d1435 1
@


4.7
log
@  STB builds now Filer_Boot resources in Resources:$.Apps
Detail:
  Old hack removed.
Admin:
  To be tested in STB ROM.

Version 2.60. Tagged as 'Desktop-2_60'
@
text
@d53 2
d67 1
d89 1
a89 1
NewBanner SETL	{TRUE} :LAND: :LNOT: STB
d266 1
a266 1
 [ :LNOT: STB :LAND: :LNOT: NewBanner
d483 2
a484 2
 [ STB
 	SWI	XOS_Reset		; The only button on STB's error box is 'Retry'
d513 1
a513 1
 [ STB
d541 1
a541 1
 [ :LNOT: STB					; RWB - Remove welcome screen
d1063 1
a1063 1
 [ :LNOT: STB					; RWB - Remove welcome screen
@


4.6
log
@  Changed an error message for STB builds.
Detail:
  STB builds now have the error message "Temporary loss of service"
  rather than "Machine startup failed".
Admin:
  To be tested in ROM 16

Version 2.59. Tagged as 'Desktop-2_59'
@
text
@a257 3
 [ STB
filerboot	DCB	"|"
 |
a258 1
 ]
@


4.5
log
@Made 32-bit compatible.

Version 2.58. Tagged as 'Desktop-2_58'
@
text
@a513 1
token_booterror DCB     "BootErr",0
d515 1
d518 1
@


4.4
log
@Changed Boot$Error box to only have "Retry" button on STB builds.
Detail:
When Boot$Error is set to a non-empty string on exit to this module,
an error box is displayed. For STB's, this error box only has one
button, 'Retry'.
Selecting the 'Retry' button will reboot the box. Usefully, if you
select 'Retry' and hold down (return), you will enter the
Engineering menu.
Admin:
Untested (but looks like it should work).

Version 2.57. Tagged as 'Desktop-2_57'
@
text
@d21 32
a52 31
; Date         Description
; ----         -----------
;  9-Feb-90                File created from old Desktop 2.23
; 22-Feb-90                Changed to use Resources:
;                 2.24     Filer_Boot's files in Resources:$.Apps
; 27-Feb-90       2.25     Removed desktop files for Filer/Act
; 28-Feb-90                Removed desktop files for !Configure,!Draw,!Edit,TinyDirs
;                 2.26     Removed all references to Wimp$Path
;  1-Mar-90       2.27     Removed all references to ResourceFS
; 29-Apr-91       2.28     Corrected list of auto start applications
; 29-May-91       2.29     Added startup screen and Service_DesktopWelcome
; 18-Jan-92                General tinkering about with the module
; 17-Feb-92       2.36     Pump startup through NULL events
;                          Pass strings through MessageTrans
;                          Allocate workspace during startup only.
; 26-Feb-92       2.37     Fix bug preventing restart from working.
; 28-Feb-92       2.40     Remove check for workspace presence to enable
;                            multiple *Desktop commands to be active at once
;                            (prevents breakage of some deskboot files).
; 11-Mar-92    2.41  OSS   Look auto-start strings etc. up in Messages file.
;                          Allows ROM app names to be localised, part of
;                          fix to RP-0716.
; 02-Apr-92    2.43  LRust Re-introduce check for exec file open on desktop startup.
;                          Allows *Exec !boot files to work correctly on shift-break
;                          and fixes RP-2176
; 12-Jul-93    BCockburn   Removed GET of Hdr:Compress
; 26-Jul-93    JRoach      If OS_GBPB on Resources:$.Apps gives trouble then stop pumping
;                          ROM apps rather than giving an error
; 26-Jan-95    JRH         Quick hack to stop filer_booting files in Resources:$.Apps
; 15-May-95    RWB         Make welcome banner not appear
; 03-Mar-2000  SAR         Change Boot$Error box to only have a 'Reboot' button on STBs
d157 1
d172 8
d1045 1
a1045 1
        MOV     r5, pc
d1048 1
a1048 1
        TEQP    r5, #0
d1431 1
a1431 1
        EXITS
@


4.3
log
@  Moved to srccommit.
  Removed dynamic dependencies from Makefile.
  Merged updated desktop startup banner (to RISC OS 4 version)
Detail:
  Banner file updated to RISC OS 4 version in favour of the previous
    RISC OS 3.7 banner.  Does not affecet STB builds.
Admin:

Version 2.55. Tagged as 'Desktop-2_55'
@
text
@d21 31
a51 30
; Date       Description
; ----       -----------
;  9-Feb-90             File created from old Desktop 2.23
; 22-Feb-90             Changed to use Resources:
;               2.24    Filer_Boot's files in Resources:$.Apps
; 27-Feb-90     2.25    Removed desktop files for Filer/Act
; 28-Feb-90             Removed desktop files for !Configure,!Draw,!Edit,TinyDirs
;               2.26    Removed all references to Wimp$Path
;  1-Mar-90     2.27    Removed all references to ResourceFS
; 29-Apr-91     2.28    Corrected list of auto start applications
; 29-May-91     2.29    Added startup screen and Service_DesktopWelcome
; 18-Jan-92             General tinkering about with the module
; 17-Feb-92     2.36    Pump startup through NULL events
;                       Pass strings through MessageTrans
;                       Allocate workspace during startup only.
; 26-Feb-92     2.37    Fix bug preventing restart from working.
; 28-Feb-92     2.40    Remove check for workspace presence to enable
;                         multiple *Desktop commands to be active at once
;                         (prevents breakage of some deskboot files).
; 11-Mar-92  2.41  OSS  Look auto-start strings etc. up in Messages file.
;                       Allows ROM app names to be localised, part of
;                       fix to RP-0716.
; 02-Apr-92  2.43  LRust Re-introduce check for exec file open on desktop startup.
;                        Allows *Exec !boot files to work correctly on shift-break
;                        and fixes RP-2176
; 12-Jul-93  BCockburn   Removed GET of Hdr:Compress
; 26-Jul-93  JRoach      If OS_GBPB on Resources:$.Apps gives trouble then stop pumping
;                        ROM apps rather than giving an error
; 26-Jan-95  JRH         Quick hack to stop filer_booting files in Resources:$.Apps
; 15-May-95  RWB	 Make welcome banner not appear
d474 3
d479 1
d505 3
d509 1
@


4.2
log
@Merge of RiscOS 3.70 and NCOS 1.06
@
text
@d78 1
a78 1
        GET     Version
d160 7
a166 1
        =       "Desktop", TAB, TAB, "$VString ($Date)", 0
@


4.1
log
@Initial revision
@
text
@d49 4
d62 1
a78 1

d83 4
d95 1
a95 1
debug   SETL    false
d118 4
d127 2
a128 2
scratchbuffer1          #       256
scratchbuffer2          #       256
d241 3
d245 1
d248 3
d273 1
a273 1

d384 3
d418 1
d506 1
d513 1
d516 2
d522 6
d529 4
d534 1
d536 1
d563 2
a564 2
        TEQNE   r0, #User_Message
        TEQ     r0, #User_Message_Recorded
d574 1
a574 2

        ; drop through to...
d578 70
d673 4
d707 1
a707 1
com2    DCB     com3 - com2, "Calc", 0
a835 1

d969 2
a970 2
        ; Use whole of scratch space for reading lines of file.
        ASSERT  scratchbuffer2 = scratchbuffer1 + ?scratchbuffer1
d1032 1
d1038 1
d1407 1
a1407 1

d1411 178
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@a48 2
; 26-Jan-95  JRH         Quick hack to stop filer_booting files in Resources:$.Apps
; 15-May-95  RWB	 Make welcome banner not appear
a57 1
	GET	Hdr:Machine.<Machine>
d87 1
a87 1
debug   SETL    {FALSE}
a228 3
 [ STB
filerboot	DCB	"|"
 |
a229 1
 ]
a231 1
 [ :LNOT: STB					; RWB - Remove welcome screen
d254 1
a254 1
 ]
a490 1
 [ :LNOT: STB					; RWB - Remove welcome screen
d496 1
a496 1
 ]
d724 1
a925 1
 [ :LNOT: STB					; RWB - Remove welcome screen
d1294 1
a1294 1
 ]
@


4.1.5.1
log
@Import from SrcFiler
@
text
@a48 2
; 26-Jan-95  JRH         Quick hack to stop filer_booting files in Resources:$.Apps
; 15-May-95  RWB	 Make welcome banner not appear
a57 1
	GET	Hdr:Machine.<Machine>
d87 1
a87 1
debug   SETL    {FALSE}
a228 3
 [ STB
filerboot	DCB	"|"
 |
a229 1
 ]
a231 1
 [ :LNOT: STB					; RWB - Remove welcome screen
d254 1
a254 1
 ]
a490 1
 [ :LNOT: STB					; RWB - Remove welcome screen
d496 1
a496 1
 ]
d724 1
a925 1
 [ :LNOT: STB					; RWB - Remove welcome screen
d1294 1
a1294 1
 ]
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a49 2
;NK version, uses template for welcome banner

d74 1
a78 4
	GBLL	NewBanner
NewBanner SETL	{TRUE}
        GBLL    KeepItUp
KeepItUp SETL   {TRUE} :LAND: NewBanner
a109 4
BannerCloseTime         #       4
NewWelcomeWorkspace     #       4
IconHandle		#	4
WindowHandle		#	4
d115 2
a116 2
scratchbuffer1		#	256
scratchbuffer2		#	256
a231 1
 [ :LNOT:NewBanner
d254 1
a254 1
 ]
a364 3
	MOV	R14,#0
	STR	R14,NewWelcomeWorkspace

a395 1
	MOVNE	r0,#0			; Keep it up for 0 seconds
a482 1
	ADR	r3, ClearScreen		; somewhere which is non-zero
a488 1
	MOVVS	R0,#0
a490 1
	MOVEQ	R0,#0
a494 6
 [ NewBanner
   [ KeepItUp
	BL	IconbarHack
   ]
        BL      DisplayNewWelcome
 |
a495 4
 ]
        SWI     XOS_ReadMonotonicTime
        MOVVS   r0, #0
        ADD     r0, r0, #400            ; Keep it up for 4 seconds
a497 1
        STR     r0, BannerCloseTime
d524 2
a525 2
        TEQ     r0, #User_Message
        TEQNE   r0, #User_Message_Recorded
d535 2
a536 1
        B       Exit
a539 70
 [     KeepItUp
	LDR	r2, BannerCloseTime
	TEQ	r2, #0
	BEQ	Exit			; Nothing to keep up... (no banner)

	BL	IconBarHackClose

KeepItUpLoop
        MOV     r0, #0
        ADR     r1, scratchbuffer1
        LDR     r2, BannerCloseTime
        SWI     XWimp_PollIdle
        BVS     Exit
1
        Push    r0
	LDR	r2, BannerCloseTime
        SWI     XOS_ReadMonotonicTime
        CMP     r0, r2
        Pull    r0
        BHS     Exit
        TEQ     r0, #Mouse_Button_Change
        BEQ     Exit
        TEQ     r0, #User_Message
        TEQNE   r0, #User_Message_Recorded
        BEQ	GotMessageKeepingItUp
        B       KeepItUpLoop

GotMessageKeepingItUp
        LDR     lr, scratchbuffer1 + ms_action
        TEQ     lr, #Message_Quit
	LDRNE	r2, =Message_ModeChange
	TEQNE	lr, r2			; Because we can't be bothered to recache fonts...
        BEQ     Exit
	B	KeepItUpLoop

; If we just open the window, the iconbar will open later and will be in front of us. Thus
; when the pinboard opens at the back (-2), it will open in front of the (backwindow) iconbar
; and hence in front of us :-( Thus put an invisible icon on the iconbar before we start,
; then delete it when all module tasks are started (ie before any redrawing actually gets
; a chance to happen, hopefully, so it will never be seen)..
;
; A better solution would be to modify the wimp to ensure the icon bar isn't created at the front
IconbarHack
	Push	"r0-r1,lr"
	SUB	sp,sp,#36
	MOV	r1,sp
	MOV	r0,#-1
	STR	r0,[r1,#0]	; Open at left
	MOV	r0,#0
	STR	r0,[r1,#4]	; min x
	STR	r0,[r1,#8]	; min y
	STR	r0,[r1,#16]	; max y
	STR	r0,[r1,#20]	; flags
	MOV	r0,#-16
	STR	r0,[r1,#12]	; max x (hack to make it take up no space on iconbar)
	SWI	XWimp_CreateIcon
	STR	r0,IconHandle
	ADD	sp,sp,#36
	Pull	"r0-r1,pc"

IconBarHackClose
	Push	"r0-r1,lr"
	MOV	r0,#-2
	LDR	r1,IconHandle
	STMFD	sp!,{r0-r1}
	MOV	r1,sp
	SWI	XWimp_DeleteIcon
	ADD	sp,sp,#8
	Pull	"r0-r1,pc"
 ]
a564 4
 [ NewBanner
	BL	FreeFontsEtc
 ]

d595 1
a595 1
com2    DCB     com3 - com2, "Printers", 0	; was Calc
d858 2
a859 2
	; Use whole of scratch space for reading lines of file.
	ASSERT	scratchbuffer2 = scratchbuffer1 + ?scratchbuffer1
a920 1
 [ :LNOT:NewBanner
a1297 178

 | ; NewBanner

templatename    DCB     "Resources:$.Resources.Desktop.Templates",0
backdropname    DCB     "backdrop",0
desktopname     DCB     "desktop",0

DisplayNewWelcome
        Push    "R1-R7,lr"
        ADR     R1,templatename
        SWI     XWimp_OpenTemplate
        Pull    "R1-R7,PC",VS
        MOV     R0,#ModHandReason_Claim
        MOV     R3,#1024
        SWI     XOS_Module
        Pull    "R1-R7,PC",VS
        MOV     R7,R2
	STR	R7,NewWelcomeWorkspace

        MOV     R0,#64
        MOV     R1,#0
        ADD     R3,R2,#768
05
        STR     R1,[R3],#4                      ; clear font ref count
        SUBS    R0,R0,#1
        BNE     %BT05

        MOV     r0,#-1
        MOV     r1,#11
        SWI     XOS_ReadModeVariable
        MOVVC   r6,r2
        MOVVC   r1,#4
        SWIVC   XOS_ReadModeVariable    ;Get xeig
        SUBVS   SP,SP,#12
        BVS     ExitDisplay
        MOV     r6,r6,ASL r2

        ADD     R6,R6,#16
        Push    R6

        MOV     r0,#-1
        MOV     r1,#12
        SWI     XOS_ReadModeVariable
        MOVVC   r6,r2
        MOVVC   r1,#5
        SWIVC   XOS_ReadModeVariable    ;Get yeig
        SUBVS   SP,SP,#8
        BVS     ExitDisplay
        MOV     r6,r6,ASL r2

        SUB     R6,R6,#16                ; drop shadow
        Push    R6

        MOV     R2,R7
        ADR     R5,backdropname
        MOV     R0,#0
        BL      displaywindow
	STR	R9,WindowHandle
;        SWI     XWimp_DeleteWindow

        Pull    "R5,R6"

        ADD     R5,R5,#16
        SUB     R6,R6,#16

        Push    "R5,R6"

        MOV     R2,R7

        ADR     R5,desktopname
        BL      displaywindow
;        SWI     XWimp_DeleteWindow
        SWI     XWimp_CloseTemplate

	MOV	R0,R9
	BL	redrawwindow
	LDR	R0,WindowHandle
	BL	redrawwindow

        B       ExitDisplay2

displaywindow
        Push    "lr"
        MOV     R1,R2
        ADD     R2,R2,#512
        ADD     R3,R2,#256
        ADD     R4,R7,#768
        MOV     R6,#0
        SWI     XWimp_LoadTemplate
        BVS     ExitDisplay

        SWI     XWimp_CreateWindow
        BVS     ExitDisplay

	STR	R0,[SP,#-44]!
	MOV	R1,SP
        SWI     XWimp_GetWindowState

        ADD     R14,R1,#4
        LDMIA   R14,{R2-R5}
        LDR     R6,[SP,#52]                     ; xpix
        SUB     R4,R4,R2                        ; width
        SUB     R2,R6,R4
        MOV     R2,R2, LSR #1
        ADD     R4,R2,R4

        LDR     R6,[SP,#48]                     ; ypix
        SUB     R5,R5,R3
        SUB     R3,R6,R5
        MOV     R3,R3, LSR #1
        ADD     R5,R3,R5

        STMIA   R14,{R2-R5}

        MOV     R14,#-1
        STR     R14,[R1,#28]                    ; make absolutely sure we open on top

        SWI     XWimp_OpenWindow
	LDRVC	R9,[R1,#0]
	ADD	SP,SP,#44
	Pull	"PC",VC
	B	ExitDisplay

redrawwindow
	Push	"LR"
	SUB	SP,SP,#44
	MOV	R1,SP
	STR	R0,[SP,#0]
        SWI     XWimp_RedrawWindow
        ADDVS   SP,SP,#44
        BVS     ExitDisplay
01
        TEQ     R0,#0
        ADDEQ   SP,SP,#44
        Pull    PC,EQ
        SWI     XWimp_GetRectangle
        ADDVS   SP,SP,#44
        BVS     ExitDisplay
        B       %BT01



ExitDisplay
        ADD     SP,SP,#4                        ; skip lr on stack
ExitDisplay2
        ADD     SP,SP,#8                        ; npix
 [ KeepItUp
	Pull	"R1-R7,PC"
FreeFontsEtc
	Push	"R1-R7,LR"
	LDR	R7,NewWelcomeWorkspace
	TEQ	R7,#0
	Pull	"R1-R7,PC",EQ
 ]
        Push    R0
        ADD     R1,R7,#768
        MOV     R0,#255
05
        LDRB    R14,[R1,R0]
07
        TEQ     R14,#0
08
        SUBNE   R14,R14,#1
        SWINE   Font_LoseFont

        TEQ     R14,#0
        BNE     %BT08

        SUBS    R0,R0,#1
        BNE     %BT05

        MOV     R2,R7
        MOV     R0,#ModHandReason_Free
        SWI     XOS_Module
        Pull    R0
        Pull    "R1-R7,PC"

 ]
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
