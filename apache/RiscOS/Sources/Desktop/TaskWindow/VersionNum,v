head	4.26;
access;
symbols
	TaskWindow-0_80:4.26
	TaskWindow-0_79:4.25
	TaskWindow-0_78:4.24
	TaskWindow-0_77:4.23
	TaskWindow-0_76:4.22
	TaskWindow-0_75:4.21
	TaskWindow-0_74:4.20
	TaskWindow-0_73:4.19
	TaskWindow-0_72:4.18
	TaskWindow-0_71:4.16
	RO_5_07:4.15
	TaskWindow-0_70:4.15
	TaskWindow-0_69:4.14
	TaskWindow-0_68:4.13
	TaskWindow-0_67:4.12
	TaskWindow-0_66:4.11
	TaskWindow-0_65:4.10
	TaskWindow-0_64:4.9
	TaskWindow-0_63:4.8
	TaskWindow-0_62:4.7
	TaskWindow-0_61:4.6
	dellis_autobuild_BaseSW:4.5
	TaskWindow-0_60:4.5
	TaskWindow-0_59:4.4
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.11
	TaskWindow-0_58:4.2;
locks; strict;
comment	@# @;


4.26
date	2017.06.02.20.08.17;	author jlee;	state Exp;
branches;
next	4.25;
commitid	SBlUr2I2ImOtZPTz;

4.25
date	2016.06.15.19.11.32;	author jlee;	state Exp;
branches;
next	4.24;
commitid	NSLPQpLnLkPvZAaz;

4.24
date	2016.05.28.18.49.51;	author jlee;	state Exp;
branches;
next	4.23;
commitid	aiLL4PLygfJWrh8z;

4.23
date	2015.09.30.20.59.45;	author jlee;	state Exp;
branches;
next	4.22;
commitid	Bov248RxvCQMUjDy;

4.22
date	2014.01.11.20.43.50;	author rsprowson;	state Exp;
branches;
next	4.21;
commitid	6qUyoAhD4C7TYJkx;

4.21
date	2012.04.26.22.40.19;	author jlee;	state Exp;
branches;
next	4.20;
commitid	ySaWTOPZ0TVoIq2w;

4.20
date	2012.01.12.21.26.07;	author rsprowson;	state Exp;
branches;
next	4.19;
commitid	JHGHfNGZJ1ccGVOv;

4.19
date	2011.08.04.20.28.18;	author jlee;	state Exp;
branches;
next	4.18;
commitid	HW3N8EfIDokexeuv;

4.18
date	2010.01.19.16.48.30;	author rool;	state Exp;
branches;
next	4.17;

4.17
date	2009.06.11.20.56.17;	author bavison;	state Exp;
branches;
next	4.16;

4.16
date	2004.10.08.17.12.00;	author bavison;	state Exp;
branches;
next	4.15;

4.15
date	2002.10.24.14.45.03;	author kbracey;	state Exp;
branches;
next	4.14;

4.14
date	2002.10.24.13.23.11;	author bavison;	state Exp;
branches;
next	4.13;

4.13
date	2002.02.18.14.54.32;	author srevill;	state Exp;
branches;
next	4.12;

4.12
date	2001.09.28.15.31.02;	author dellis;	state Exp;
branches;
next	4.11;

4.11
date	2001.07.30.15.02.38;	author dellis;	state Exp;
branches;
next	4.10;

4.10
date	2001.05.15.10.22.11;	author dellis;	state Exp;
branches;
next	4.9;

4.9
date	2001.05.14.14.46.06;	author dellis;	state Exp;
branches;
next	4.8;

4.8
date	2001.05.02.12.20.19;	author sbrodie;	state Exp;
branches;
next	4.7;

4.7
date	2001.03.16.17.05.43;	author sbrodie;	state Exp;
branches;
next	4.6;

4.6
date	2001.03.02.14.25.16;	author sbrodie;	state Exp;
branches;
next	4.5;

4.5
date	2000.07.28.11.00.51;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	2000.06.02.12.54.28;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	2000.05.31.15.31.20;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.12.01.16.59.09;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	99.12.01.16.51.31;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.26
log
@Fix off-by-one error in INKEY timer
Detail:
  s/Taskman - When TaskWindow was converted to use TickerV instead of VSync events for implementing the INKEY timer, one line of code was left in the wrong place, causing all INKEY delays to be 1cs longer than they should
Admin:
  Tested on PandaBoard
  100 * OS_Byte 129,0,0 now completes instantly (was 1s), 100 * OS_Byte 129,1,0 now completes in 1s (was 2s), both now matching single-tasking behaviour
  Should fix issue reported on forums with OS_Byte 129,0,0 -heavy programs running unreasonably slow:
  https://www.riscosopen.org/forum/forums/4/topics/9317


Version 0.80. Tagged as 'TaskWindow-0_80'
@
text
@/* (0.80)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.80
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                02 Jun 2017

#define Module_MajorVersion             "0.80"
#define Module_Version                  80
#define Module_MinorVersion             ""
#define Module_Date                     "02 Jun 2017"

#define Module_ApplicationDate          "02-Jun-17"

#define Module_ComponentName            "TaskWindow"
#define Module_ComponentPath            "castle/RiscOS/Sources/Desktop/TaskWindow"

#define Module_FullVersion              "0.80"
#define Module_HelpVersion              "0.80 (02 Jun 2017)"
#define Module_LibraryVersionInfo       "0:80"
@


4.25
log
@Clear the exclusive monitor when returning to a pre-empted task
Detail:
  s/Taskman - As described in the ARM ARM, the local exclusive monitor is allowed to be a bit dumb when it comes to comparing addresses, and so a manual CLREX is required whenever we return to code that has been unwillingly pre-empted
Admin:
  Tested on Raspberry Pi


Version 0.79. Tagged as 'TaskWindow-0_79'
@
text
@d1 1
a1 1
/* (0.79)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.79
d9 1
a9 1
#define Module_Date_CMHG                15 Jun 2016
d11 2
a12 2
#define Module_MajorVersion             "0.79"
#define Module_Version                  79
d14 1
a14 1
#define Module_Date                     "15 Jun 2016"
d16 1
a16 1
#define Module_ApplicationDate          "15-Jun-16"
d21 3
a23 3
#define Module_FullVersion              "0.79"
#define Module_HelpVersion              "0.79 (15 Jun 2016)"
#define Module_LibraryVersionInfo       "0:79"
@


4.24
log
@Remove ARM2-era NOPs. Avoid updated PSR macros generating redundant NOPs where possible.
Detail:
  s/Taskman - Remove all NOPs from after PSR manipulation macros; the macros now take care of these for us. Change some RestPSR instances to the "f" variant, so that the macro won't insert ARM2 NOPs.
Admin:
  Tested PlingSystem build on (ARM3) RISC OS 3.1
  Requires HdrSrc-2_63 to be ARM2 safe


Version 0.78. Tagged as 'TaskWindow-0_78'
@
text
@d1 1
a1 1
/* (0.78)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.78
d9 1
a9 1
#define Module_Date_CMHG                28 May 2016
d11 2
a12 2
#define Module_MajorVersion             "0.78"
#define Module_Version                  78
d14 1
a14 1
#define Module_Date                     "28 May 2016"
d16 1
a16 1
#define Module_ApplicationDate          "28-May-16"
d21 3
a23 3
#define Module_FullVersion              "0.78"
#define Module_HelpVersion              "0.78 (28 May 2016)"
#define Module_LibraryVersionInfo       "0:78"
@


4.23
log
@Fix 32bit conversion issue
Detail:
  s/Taskman - Generation of TaskWindow_Dying error within ByteV handler wasn't balancing the stack correctly, causing it to try branching to the PSR. Fix this, and tighten up the code a bit (can use R0 as temp as it'll always be set to something sensible on exit)
Admin:
  Tested on iMx6
  Fixes reported issue with machine stiffing when killing task windows containing running programs
  Issue was only observed on pre-PMP kernel version, where the code would have branched into the free pool (loaded PSR appeared to be &80000193), corrupted some memory, and then got stuck in a loop
  Presumably this has never been spotted on other systems because there would have rarely been any memory at that location, generating an immediate abort, but the error message gets swallowed because the task is exiting? (or there was memory there, but the user got lucky and the code aborts before fatally corrupting anything)


Version 0.77. Tagged as 'TaskWindow-0_77'
@
text
@d1 1
a1 1
/* (0.77)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.77
d9 1
a9 1
#define Module_Date_CMHG                30 Sep 2015
d11 2
a12 2
#define Module_MajorVersion             "0.77"
#define Module_Version                  77
d14 1
a14 1
#define Module_Date                     "30 Sep 2015"
d16 1
a16 1
#define Module_ApplicationDate          "30-Sep-15"
d21 3
a23 3
#define Module_FullVersion              "0.77"
#define Module_HelpVersion              "0.77 (30 Sep 2015)"
#define Module_LibraryVersionInfo       "0:77"
@


4.22
log
@Build fix
Move Hdr:Services up above Hdr:Wimp
Built, but not tested.

Version 0.76. Tagged as 'TaskWindow-0_76'
@
text
@d1 1
a1 1
/* (0.76)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.76
d9 1
a9 1
#define Module_Date_CMHG                11 Jan 2014
d11 2
a12 2
#define Module_MajorVersion             "0.76"
#define Module_Version                  76
d14 1
a14 1
#define Module_Date                     "11 Jan 2014"
d16 1
a16 1
#define Module_ApplicationDate          "11-Jan-14"
d21 3
a23 3
#define Module_FullVersion              "0.76"
#define Module_HelpVersion              "0.76 (11 Jan 2014)"
#define Module_LibraryVersionInfo       "0:76"
@


4.21
log
@Fix *TaskWindow
Detail:
  s/Taskman - Search-and-replace error when getting rid of $ModuleName left one instance of it behind, with the result that in 0.74 the *TaskWindow command would attempt to start the task '$ModuleName' instead of 'TaskWindow'
Admin:
  Tested on BB-xM


Version 0.75. Tagged as 'TaskWindow-0_75'
@
text
@d1 1
a1 1
/* (0.75)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.75
d9 1
a9 1
#define Module_Date_CMHG                26 Apr 2012
d11 2
a12 2
#define Module_MajorVersion             "0.75"
#define Module_Version                  75
d14 1
a14 1
#define Module_Date                     "26 Apr 2012"
d16 1
a16 1
#define Module_ApplicationDate          "26-Apr-12"
d21 3
a23 3
#define Module_FullVersion              "0.75"
#define Module_HelpVersion              "0.75 (26 Apr 2012)"
#define Module_LibraryVersionInfo       "0:75"
@


4.20
log
@Make decision to use internationalised help based on predefines passed in from outside not a bitfield definition in Hdr:ModHand.
Shifted crusty changelogs out of the sources.
Reencoded the command table using the 'Command' macro rather than by hand, required renaming a few function labels to use the ones it generates.
Add support for the standalone version to register its messages with ResourceFS.
Update the help to detail the "-nice" switch which has been present for some time.
Change some Wimp and OS_Args reason codes to use those from the respective header files.
Tested on RISC OS 3.10, now at least opens a task window.

Version 0.74. Tagged as 'TaskWindow-0_74'
@
text
@d1 1
a1 1
/* (0.74)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.74
d9 1
a9 1
#define Module_Date_CMHG                12 Jan 2012
d11 2
a12 2
#define Module_MajorVersion             "0.74"
#define Module_Version                  74
d14 1
a14 1
#define Module_Date                     "12 Jan 2012"
d16 1
a16 1
#define Module_ApplicationDate          "12-Jan-12"
d21 3
a23 3
#define Module_FullVersion              "0.74"
#define Module_HelpVersion              "0.74 (12 Jan 2012)"
#define Module_LibraryVersionInfo       "0:74"
@


4.19
log
@Make compatible with zero page relocation
Detail:
  s/Taskman - Attempt to get DomainId pointer from OS_ReadSysInfo 6 before falling back on legacy address. Fix NiceNess code to not pass null pointers to OS_ReadUnsigned.
Admin:
  Tested on rev A2 BB-xM


Version 0.73. Tagged as 'TaskWindow-0_73'
@
text
@d1 1
a1 1
/* (0.73)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.73
d9 1
a9 1
#define Module_Date_CMHG                04 Aug 2011
d11 2
a12 2
#define Module_MajorVersion             "0.73"
#define Module_Version                  73
d14 1
a14 1
#define Module_Date                     "04 Aug 2011"
d16 1
a16 1
#define Module_ApplicationDate          "04-Aug-11"
d21 3
a23 3
#define Module_FullVersion              "0.73"
#define Module_HelpVersion              "0.73 (04 Aug 2011)"
#define Module_LibraryVersionInfo       "0:73"
@


4.18
log
@Incremented version number, no other change.
Previous changes were untagged, but incrementing the version number gives
us a tag we can associate with the official RISC OS 5.16 release.

Version 0.72. Tagged as 'TaskWindow-0_72'
@
text
@d1 1
a1 1
/* (0.72)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.72
d9 1
a9 1
#define Module_Date_CMHG                19 Jan 2010
d11 2
a12 2
#define Module_MajorVersion             "0.72"
#define Module_Version                  72
d14 1
a14 1
#define Module_Date                     "19 Jan 2010"
d16 1
a16 1
#define Module_ApplicationDate          "19-Jan-10"
d21 3
a23 3
#define Module_FullVersion              "0.72"
#define Module_HelpVersion              "0.72 (19 Jan 2010)"
#define Module_LibraryVersionInfo       "0:72"
@


4.17
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.71. Not tagged
@
text
@d1 1
a1 1
/* (0.71)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.71
d9 1
a9 1
#define Module_Date_CMHG                11 Jun 2009
d11 2
a12 2
#define Module_MajorVersion             "0.71"
#define Module_Version                  71
d14 1
a14 1
#define Module_Date                     "11 Jun 2009"
d16 1
a16 1
#define Module_ApplicationDate          "11-Jun-09"
d21 3
a23 3
#define Module_FullVersion              "0.71"
#define Module_HelpVersion              "0.71 (11 Jun 2009)"
#define Module_LibraryVersionInfo       "0:71"
@


4.16
log
@  Corrected SVC stack save code.
Detail:
  The bottom four words of the SVC stack were being preserved across calls
  to Wimp_Poll. This is a curious choice, since the bottom seven words are
  reserved to hold run-time data, and C libraries to date have only used
  two words (the library and client relocation offsets). Changed to save
  all seven reserved words across Wimp_Poll.
Admin:
  Tested briefly on an Iyonix, with no visible ill effects.

Version 0.71. Tagged as 'TaskWindow-0_71'
@
text
@d4 1
a4 1
 * Last processed by srccommit version: 1.2.
d9 1
a9 1
#define Module_Date_CMHG                08 Oct 2004
d14 1
a14 1
#define Module_Date                     "08 Oct 2004"
d16 1
a16 1
#define Module_ApplicationDate          "08-Oct-04"
d19 1
a19 1
#define Module_ComponentPath            "RiscOS/Sources/Desktop/TaskWindow"
d22 1
a22 1
#define Module_HelpVersion              "0.71 (08 Oct 2004)"
@


4.15
log
@Reads location of Kernel SWI despatch table using OS_ReadSysInfo 6.
No longer assumes flag preservation across Wimp_Poll.

Version 0.70. Tagged as 'TaskWindow-0_70'
@
text
@d1 1
a1 1
/* (0.70)
d4 1
a4 1
 * Last processed by srccommit version: 1.68.
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.70
d9 1
a9 1
#define Module_Date_CMHG                24 Oct 2002
d11 2
a12 2
#define Module_MajorVersion             "0.70"
#define Module_Version                  70
d14 1
a14 1
#define Module_Date                     "24 Oct 2002"
d16 1
a16 1
#define Module_ApplicationDate          "24-Oct-02"
d21 3
a23 3
#define Module_FullVersion              "0.70"
#define Module_HelpVersion              "0.70 (24 Oct 2002)"
#define Module_LibraryVersionInfo       "0:70"
@


4.14
log
@If in 32-bit mode, now required to expect and requires the application
space size change in Service_Memory issued by the Wimp to be 02 GB, not
-64 MB.

Version 0.69. Tagged as 'TaskWindow-0_69'
@
text
@d1 1
a1 1
/* (0.69)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.69
d11 2
a12 2
#define Module_MajorVersion             "0.69"
#define Module_Version                  69
d21 3
a23 3
#define Module_FullVersion              "0.69"
#define Module_HelpVersion              "0.69 (24 Oct 2002)"
#define Module_LibraryVersionInfo       "0:69"
@


4.13
log
@  Faster TaskWindow from Dan Ellis.
Details:
>
> I was just fiddling with Taskwindow, and realising one of the big things
> slowing it down is that it polls everytime its internal buffer gets filled.
> If it just lets the Wimp do the queueing it goes quite a lot faster!
>
> It only polls the wimp once every 10 buffer fulls of data, so is pretty
> nippy, but doesn't stall when doing a lot of text output in SVC mode.
>
> It also assembles to use TickerV instead of VSync (unless you unset the
> flag).
>
Admin:
  Tested on Ursula RiscPC and STB without any problems.

Version 0.68. Tagged as 'TaskWindow-0_68'
@
text
@d1 1
a1 1
/* (0.68)
d4 1
a4 1
 * Last processed by srccommit version: 1.62.
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.68
d9 1
a9 1
#define Module_Date_CMHG                18 Feb 2002
d11 2
a12 2
#define Module_MajorVersion             "0.68"
#define Module_Version                  68
d14 1
a14 1
#define Module_Date                     "18 Feb 2002"
d16 1
a16 2
#define Module_ApplicationDate2         "18-Feb-02"
#define Module_ApplicationDate4         "18-Feb-2002"
d21 3
a23 3
#define Module_FullVersion              "0.68"
#define Module_HelpVersion              "0.68 (18 Feb 2002)"
#define Module_LibraryVersionInfo       "0:68"
@


4.12
log
@  Added niceness.
  Reintroduced buffer enlargements.

Detail:
  A new flag has been added, '-nice <n>' which if specified allows
modification of the default number of VSyncs before task switching.  This
works a bit like UNIX nice, hence the name.  A nice value of 1 will make
multitasking very smooth.  It also allows relative priority to be specified
between taskwindows.  So the default is 10, and a nice 1 taskwindow will get
10 times less CPU time than a default window.  A nice 100 taskwindow would
get 10 times as much CPU time as a default one.

  The buffer enlargements were inadvertantly checked over in a previous
checkin.  They have now been re-introduced.

Admin:
  Tested on a RiscPC.



Version 0.67. Tagged as 'TaskWindow-0_67'
@
text
@d1 1
a1 1
/* (0.67)
d4 1
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.67
d9 1
a9 1
#define Module_Date_CMHG                28 Sep 2001
d11 2
a12 2
#define Module_MajorVersion             "0.67"
#define Module_Version                  67
d14 1
a14 1
#define Module_Date                     "28 Sep 2001"
d16 2
a17 2
#define Module_ApplicationDate2         "28-Sep-01"
#define Module_ApplicationDate4         "28-Sep-2001"
d22 3
a24 3
#define Module_FullVersion              "0.67"
#define Module_HelpVersion              "0.67 (28 Sep 2001)"
#define Module_LibraryVersionInfo       "0:67"
@


4.11
log
@  Added pollidle handling for INKEY (OS_Byte 129)

Detail:
  Taskwindow sits of BYTEV and waits for n*2 Vsyncs when INKEY(n) is called.
This isn't quite correct as VSyncs aren't a reliable timing source, however,
leaving that aside for the moment, what Taskwindow was doing was sitting on
Null events until it read that enough Vsyncs had passed, thus eating up CPU
time.

  The new behaviour is to call Wimp_PollIdle instead, which should also
correct the amount of time waited for.  This behaviour can be toggled with
the build switch PollIdleHandling.

Admin:
  Lightly tested on a RPC.  Using AppStat, no call were made to the
taskwindow during and INKEY, whereas they were previously.


Version 0.66. Tagged as 'TaskWindow-0_66'
@
text
@d1 1
a1 1
/* (0.66)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.66
d8 1
a8 1
#define Module_Date_CMHG                30 Jul 2001
d10 2
a11 2
#define Module_MajorVersion             "0.66"
#define Module_Version                  66
d13 1
a13 1
#define Module_Date                     "30 Jul 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "30-Jul-01"
#define Module_ApplicationDate4         "30-Jul-2001"
d21 3
a23 2
#define Module_FullVersion              "0.66"
#define Module_HelpVersion              "0.66 (30 Jul 2001)"
@


4.10
log
@  Made UpCall 6 work with pollwords.

Detail:
  UpCall 6 is documented as accepting a pollword which can be scanned for
being non zero to return control to the process requesting to sleep.  This
was not being used within the taskwindow module, there being a comment where
it would have been used suggesting that this would give the taskwindow too
high a priority.  What this means is that if given a pollword that is already
nonzero, the task would receive so many polls as to really make the desktop
juddery.  The solution is that if the pollword is non-zero on entry,
Wimp_Null is unmasked rather than passing the pollword.

  This means that UpCall 6 can be used either as a yield, to say 'let other
tasks have some CPU now' (by passing a pollword known to contain nonzero) or
as sleep to say 'wake me up when the pollword becomes non zero, and don't
consume any CPU time until then' (by passing a pollword that will only become
nonzero upon the occurance of a specific event).

Admin:
  Tested on RPC.

Version 0.65. Tagged as 'TaskWindow-0_65'
@
text
@d1 1
a1 1
/* (0.65)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.65
d8 1
a8 1
#define Module_Date_CMHG                15 May 2001
d10 2
a11 2
#define Module_MajorVersion             "0.65"
#define Module_Version                  65
d13 1
a13 1
#define Module_Date                     "15 May 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "15-May-01"
#define Module_ApplicationDate4         "15-May-2001"
d21 2
a22 2
#define Module_FullVersion              "0.65"
#define Module_HelpVersion              "0.65 (15 May 2001)"
@


4.9
log
@  Fixed response to UpCall Sleep No More.

Detail:
  The UpCall wasn't being claimed because the common error creating return
was being used which returns to lr rather than popping the stack.  Now the
error routine is BLed to and then the stack popped so as to claim the UpCall.

Admin:
  Tested on RPC.

Version 0.64. Tagged as 'TaskWindow-0_64'
@
text
@d1 1
a1 1
/* (0.64)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.64
d8 1
a8 1
#define Module_Date_CMHG                14 May 2001
d10 2
a11 2
#define Module_MajorVersion             "0.64"
#define Module_Version                  64
d13 1
a13 1
#define Module_Date                     "14 May 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "14-May-01"
#define Module_ApplicationDate4         "14-May-2001"
d21 2
a22 2
#define Module_FullVersion              "0.64"
#define Module_HelpVersion              "0.64 (14 May 2001)"
@


4.8
log
@  Buffer size increases.
Detail:
  If output is occurring quickly, then fewer longer Wimp messages are
    transmitted rather than a stream of small messages.
  RAM Transfer buffer size increased too.
Admin:
  Tested in softloaded OS.


Version 0.63. Tagged as 'TaskWindow-0_63'
@
text
@d1 1
a1 1
/* (0.63)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.63
d8 1
a8 1
#define Module_Date_CMHG                02 May 2001
d10 2
a11 2
#define Module_MajorVersion             "0.63"
#define Module_Version                  63
d13 1
a13 1
#define Module_Date                     "02 May 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "02-May-01"
#define Module_ApplicationDate4         "02-May-2001"
d21 2
a22 2
#define Module_FullVersion              "0.63"
#define Module_HelpVersion              "0.63 (02 May 2001)"
@


4.7
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.62. Tagged as 'TaskWindow-0_62'
@
text
@d1 1
a1 1
/* (0.62)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.62
d8 1
a8 1
#define Module_Date_CMHG                16 Mar 2001
d10 2
a11 2
#define Module_MajorVersion             "0.62"
#define Module_Version                  62
d13 1
a13 1
#define Module_Date                     "16 Mar 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "16-Mar-01"
#define Module_ApplicationDate4         "16-Mar-2001"
d21 2
a22 2
#define Module_FullVersion              "0.62"
#define Module_HelpVersion              "0.62 (16 Mar 2001)"
@


4.6
log
@  Structure brought into line with other aasm modules, then ...
  ... switched to using objasm.
Detail:
  Increased parameter buffer size to 1024.
Admin:
  Requires BuildSys 3.01 or later.
  Fixes Bugzilla bug #280

Version 0.61. Tagged as 'TaskWindow-0_61'
@
text
@d1 1
a1 1
/* (0.61)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.61
d8 1
a8 1
#define Module_Date_CMHG                02 Mar 2001
d10 2
a11 2
#define Module_MajorVersion             "0.61"
#define Module_Version                  61
d13 1
a13 1
#define Module_Date                     "02 Mar 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "02-Mar-01"
#define Module_ApplicationDate4         "02-Mar-2001"
d21 2
a22 2
#define Module_FullVersion              "0.61"
#define Module_HelpVersion              "0.61 (02 Mar 2001)"
@


4.5
log
@  YSync event enabling now done on the same basis as vector claiming.
Detail:
  TaskWindow used to enable VSync events for each new task that was
    started.  However, it failed to disable the VSync events again
    when the task exited unless the task was the last one running.
    This meant that VSyncs would be going off for no reason at all
    slowing the machine down if you had ever started a taskwindow.
    Events are now only ever enabled when the first task is created,
    and disabled when the last task is killed.
Admin:
  Tested in desktop build.

Version 0.60. Tagged as 'TaskWindow-0_60'
@
text
@d1 1
a1 1
/* (0.60)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.60
d8 1
a8 1
#define Module_Date_CMHG                28 Jul 2000
d10 2
a11 2
#define Module_MajorVersion             "0.60"
#define Module_Version                  60
d13 1
a13 1
#define Module_Date                     "28 Jul 2000"
d15 2
a16 2
#define Module_ApplicationDate2         "28-Jul-00"
#define Module_ApplicationDate4         "28-Jul-2000"
d18 5
a22 1
#define Module_FullVersion              "0.60"
@


4.4
log
@  32-bit compatible.
Detail:
  Fixed the spurious character problem.  It was due to me believing some
    misleading comments in the source code.  When the comment said "pass
    it on" (at the end of a vector handler), it actually meant "claim it".
    WrchV is now claimed correctly, and no output is "leaked" any more.
Admin:
  Module may well no longer function on RISC OS 2.00
  Tested on Ursula build.

Version 0.59. Tagged as 'TaskWindow-0_59'
@
text
@d1 1
a1 1
/* (0.59)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.59
d8 1
a8 1
#define Module_Date_CMHG                02 Jun 2000
d10 2
a11 2
#define Module_MajorVersion             "0.59"
#define Module_Version                  59
d13 1
a13 1
#define Module_Date                     "02 Jun 2000"
d15 4
a18 1
#define Module_FullVersion              "0.59"
@


4.3
log
@  32-bit compatible
Detail:
  Removed obsolete file.
  Made rest of the module 32-bit safe.
  A bug remains: when a taskwindow is started the first few characters of
    output are not being intercepted correctly (although they are sent to
    the parent task).  Looks as if something isn't initialised correctly?
    Perhaps a failure to intercept WrchV in these cases?
Admin:
  Tested in Ursula softload.


Version 0.58. Not tagged
@
text
@d1 1
a1 1
/* (0.58)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.58
d8 1
a8 1
#define Module_Date_CMHG                31 May 2000
d10 2
a11 2
#define Module_MajorVersion             "0.58"
#define Module_Version                  58
d13 1
a13 1
#define Module_Date                     "31 May 2000"
d15 1
a15 1
#define Module_FullVersion              "0.58"
@


4.2
log
@  Merged Ursula branch.
Detail:
  Moved to srccommit, merged changes from Ursula branch.
Admin:
  Built.

Version 0.58. Tagged as 'TaskWindow-0_58'
@
text
@d8 1
a8 1
#define Module_Date_CMHG                01 Dec 1999
d13 1
a13 1
#define Module_Date                     "01 Dec 1999"
@


4.1
log
@created by srccommit.
@
text
@d1 1
a1 1
/* (0.57)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.57
d10 2
a11 2
#define Module_MajorVersion             "0.57"
#define Module_Version                  57
d15 1
a15 1
#define Module_FullVersion              "0.57"
@

