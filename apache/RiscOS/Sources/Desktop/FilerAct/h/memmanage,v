head	4.7;
access;
symbols
	FilerAct-0_62:4.7
	FilerAct-0_61:4.7
	FilerAct-0_60:4.7
	FilerAct-0_59:4.7
	FilerAct-0_58:4.7
	FilerAct-0_57:4.7
	FilerAct-0_55:4.7
	FilerAct-0_54:4.7
	FilerAct-0_53:4.6
	FilerAct-0_52:4.5
	FilerAct-0_51:4.4
	FilerAct-0_50:4.2
	FilerAct-0_49:4.2
	FilerAct-0_48:4.1
	RO_5_07:4.1
	FilerAct-0_47:4.1
	FilerAct-0_46:4.1
	FilerAct-0_45:4.1
	dellis_autobuild_BaseSW:4.1
	FilerAct-0_44:4.1
	FilerAct-0_43:4.1
	sbrodie_sedwards_16Mar2000:4.1
	FilerAct-0_42:4.1
	Ursula_merge:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_FilerAct_0_39:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rleggett_FilerAct-0_42:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2011.10.23.07.55.57;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	xuMPqvl0RQswNrEv;

4.6
date	2011.10.23.07.47.03;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	7I8FKGdkajlxKrEv;

4.5
date	2011.10.20.20.36.03;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	YJZPZatOdKOo68Ev;

4.4
date	2011.10.20.20.32.49;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	DXWFsDOPRJsd58Ev;

4.3
date	2011.10.20.20.23.08;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	xmwir195eiLF18Ev;

4.2
date	2011.06.29.09.21.52;	author rgriffin;	state Exp;
branches;
next	4.1;
commitid	OcnnyIVQ9uPd0ypv;

4.1
date	96.11.05.09.29.39;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.29.39;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.28.19;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.18.29;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.17.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Fix to work with files > 2G.
A good rake over the code to change filesizes to be uint32_t not ints.
Change makefile to use StdTools.
Shuffle icon clipping in the templates to allow for maximal numbers by moving the text a bit to the right, still fits even in system font.
A couple more ints swapped for BOOLs.
The memmanage code is largely unchanged and makes extensive use of signed numbers, partly because the wimpslot setting API does. This will all fall over in a big mess if the wimpslot ever gets >2G, but then the API would need changing for that to happen anyway.
Function count_objects_in_dir swapped to use os_gbpb.
Structure search_nest_level gains a 'counted' flag rather than signalling counting is needed by setting the filesize to -1.
Should now be good for up to 4 billion files each of 4 billion bytes.

Version 0.54. Tagged as 'FilerAct-0_54'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
     This header describes the interface to the manipulation of
     large lumps of memory and files.

Revision History:

0.00  13-Jun-89  JSR  Created.
*/

/*
     For c.memmanage
*/
extern void action_slot( int );
extern os_error *init_memmanagement( void );
extern os_error *init_for_copying( void );
extern os_error *add_file_to_chain( char *dest, char *source,
                                    uint32_t size, int reload, int exec, int attr, int objtype,
                                    BOOL force, BOOL *full
                                    #ifdef USE_PROGRESS_BAR
                                    , uint32_t progress, void **ref
                                    #endif
                                  );
extern os_error *read_a_block( BOOL *i_am_full, BOOL *need_another_file, BOOL *that_finished_a_file, uint32_t *progress);
extern os_error *write_a_block( BOOL *i_am_empty, BOOL *that_finished_a_file, uint32_t *progress );
extern char *next_file_to_be_written( void );
extern char *next_file_to_be_read( void );
extern void restart_file_read( void );
extern void restart_file_write( void );
extern void skip_file_read( void );
extern void skip_file_write( void );
extern uint32_t bytes_left_to_read( void );
extern uint32_t bytes_left_to_write( void );
extern void closedown_memmanagement( void );
extern void copy_go_faster( BOOL do_it );
#ifdef USE_PROGRESS_BAR
extern void modify_chain_file_progress( void *ref, uint32_t progress );
#endif

extern BOOL  finished_obj_was_file;
extern char *finished_obj_source_name;
@


4.6
log
@Swap magic constants for defines from headers.
OS_FSControl, OS_File, OS_GBPB, OS_Args, OS_Find now use HighFSI.h.
Indentation made more consistent.
Variety of DEBUG macros changed to allow them to be enabled and disabled on a per-file basis.
Put USE_RED_ERROR box switch into options.h (undefined though).
Functionally equivalent to 0.52, but lots of diffs.

Version 0.53. Tagged as 'FilerAct-0_53'
@
text
@d34 1
a34 1
                                    , unsigned int progress, void **ref
d37 2
a38 2
extern os_error *read_a_block( BOOL *i_am_full, BOOL *need_another_file, BOOL *that_finished_a_file, unsigned int *progress);
extern os_error *write_a_block( BOOL *i_am_empty, BOOL *that_finished_a_file, unsigned int *progress );
d50 1
a50 1
extern void modify_chain_file_progress( void *ref, unsigned int progress );
@


4.5
log
@More BOOLs and things changed to C99 types.
Basically the same as version 0.51 otherwise.

Version 0.52. Tagged as 'FilerAct-0_52'
@
text
@d31 1
a31 1
                                    int size, int reload, int exec, int attr, int objtype,
@


4.4
log
@Fix display of bytes-to-go when there are > 2G left.
Was doing a widening cast of a signed number to 64 bits, so showed 16 trillion bytes remaining.
Fix templates to not say "stuff" by default in the name, as this was left on screen if an error occured before processing began.
Things that read from clock() now use clock_t.
Uncurled some "} else {" to match all the other files.
Deleted the USE_LONG_LONG switch, it's been needed ever since harddiscs got bigger than 4G anyway.
Anything assigned 'Yes' or 'No' changed to type BOOL.
Variable 'source_of_finished_file' was signalling that a directory had been copied by setting the length to a -ve number. This has been refactored to use a BOOL instead, so files can have top bit set sizes.
Fix bug in stack grab in count_objects_in_dir(), was grabbing an array of 2048 pointers (=8k) not 2048 bytes.
Functions bytes_left_to_read() and bytes_left_to_write() reprototyped to return uint32_t not signed numbers.
Still falls over copying files > 2G, but at least it gets the display right!

Version 0.51. Tagged as 'FilerAct-0_51'
@
text
@d32 1
a32 1
                                    int force, int *full
d36 3
a38 3
);
extern os_error *read_a_block( int *i_am_full, int *need_another_file, int *that_finished_a_file, unsigned int *progress);
extern os_error *write_a_block( int *i_am_empty, int *that_finished_a_file, unsigned int *progress );
d48 1
a48 1
extern void copy_go_faster( int do_it );
d50 1
a50 1
extern void modify_chain_file_progress(void *ref, unsigned int progress);
@


4.3
log
@Didn't compile with PROGRESS_BAR turned off.
Rationalised all the switches a bit.
Not tagged.
@
text
@d30 6
a35 5

extern os_error *add_file_to_chain( char *dest, char *source, int size, int reload, int exec, int attr, int objtype, int force, int *full
#ifdef USE_PROGRESS_BAR
, unsigned int progress, void **ref
#endif
a36 2


d45 2
a46 2
extern int bytes_left_to_read( void );
extern int bytes_left_to_write( void );
a48 3
extern int size_of_finished_file;
extern char *source_of_finished_file;

d52 3
@


4.2
log
@Redesigned window to show more of path.
Added progress bar.
Performance improvements, especially in 'slower' mode.
Fixed 'count summary' bug.
Fixed various compiler warnings.

Version 0.49. Tagged as 'FilerAct-0_49'
@
text
@a23 4
#ifndef __os_h
#include "os.h"
#endif

d32 1
a32 1
#ifdef PROGRESS_BAR
d53 1
a53 1
#ifdef PROGRESS_BAR
@


4.1
log
@Initial revision
@
text
@d34 10
a43 3
extern os_error *add_file_to_chain( char *dest, char *source, int size, int reload, int exec, int attr, int objtype, int force, int *full );
extern os_error *read_a_block( int *i_am_full, int *need_another_file, int *that_finished_a_file );
extern os_error *write_a_block( int *i_am_empty, int *that_finished_a_file );
d57 3
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
