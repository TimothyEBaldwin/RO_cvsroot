head	4.7;
access;
symbols
	FilerAct-0_62:4.7
	FilerAct-0_61:4.7
	FilerAct-0_60:4.7
	FilerAct-0_59:4.7
	FilerAct-0_58:4.7
	FilerAct-0_57:4.7
	FilerAct-0_55:4.7
	FilerAct-0_54:4.7
	FilerAct-0_53:4.6
	FilerAct-0_52:4.5
	FilerAct-0_51:4.5
	FilerAct-0_50:4.3
	FilerAct-0_49:4.3
	FilerAct-0_48:4.2
	RO_5_07:4.2
	FilerAct-0_47:4.2
	FilerAct-0_46:4.2
	FilerAct-0_45:4.1
	dellis_autobuild_BaseSW:4.1
	FilerAct-0_44:4.1
	FilerAct-0_43:4.1
	sbrodie_sedwards_16Mar2000:4.1
	FilerAct-0_42:4.1
	Ursula_merge:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_FilerAct_0_39:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rleggett_FilerAct-0_42:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2011.10.23.07.55.47;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	xuMPqvl0RQswNrEv;

4.6
date	2011.10.23.07.46.59;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	7I8FKGdkajlxKrEv;

4.5
date	2011.10.20.20.32.44;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	DXWFsDOPRJsd58Ev;

4.4
date	2011.10.20.20.23.02;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	xmwir195eiLF18Ev;

4.3
date	2011.06.29.09.21.48;	author rgriffin;	state Exp;
branches;
next	4.2;
commitid	OcnnyIVQ9uPd0ypv;

4.2
date	2002.09.23.18.25.36;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.29.36;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.29.36;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.28.03;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.17.59;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.16.50;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Fix to work with files > 2G.
A good rake over the code to change filesizes to be uint32_t not ints.
Change makefile to use StdTools.
Shuffle icon clipping in the templates to allow for maximal numbers by moving the text a bit to the right, still fits even in system font.
A couple more ints swapped for BOOLs.
The memmanage code is largely unchanged and makes extensive use of signed numbers, partly because the wimpslot setting API does. This will all fall over in a big mess if the wimpslot ever gets >2G, but then the API would need changing for that to happen anyway.
Function count_objects_in_dir swapped to use os_gbpb.
Structure search_nest_level gains a 'counted' flag rather than signalling counting is needed by setting the filesize to -1.
Should now be good for up to 4 billion files each of 4 billion bytes.

Version 0.54. Tagged as 'FilerAct-0_54'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if 0
#define debuginit(k) dprintf k
#else
#define debuginit(k) /* Disabled */
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <locale.h>
#include <time.h>

#include "os.h"
#include "wimp.h"
#include "wimpt.h"
#include "win.h"
#include "event.h"
#include "res.h"
#include "template.h"
#include "dbox.h"
#include "dboxquery.h"
#include "msgs.h"
#include "menu.h"

#include "Options.h"
#include "allerrs.h"
#include "malloc+.h"
#include "listfiles.h"
#include "memmanage.h"
#include "actionwind.h"
#include "Initialise.h"
#include "Buttons.h"
#include "debug.h"

#define Window_Title_Height 40
#define Character_Height 32

#define Template_Filename "FilerAct:Templates"
#define Messages_Filename "FilerAct:Messages"

#define No 0
#define Yes (!No)

/* Global error buffer. */
os_error errbuf = { 0, "" };

/*
     This routine removes the unknown event processor
*/
static void remove_processor( void )
{
    win_remove_unknown_event_processor( message_event_handler, &env );

    closedown_memmanagement();
}

static void near_mouse_position_window( char *window_name )
{
    template *tplt = template_find( window_name );
    wimp_mousestr ptr;
    os_error *err;
    int x_offset;
    int y_offset;

    err = wimp_get_point_info( &ptr );
    if ( !err )
    {
        x_offset = (ptr.x - Window_Title_Height - Character_Height) -
                   tplt->window.box.x0;
        y_offset = (ptr.y - Window_Title_Height - Character_Height) -
                   tplt->window.box.y1;

        tplt->window.box.x0 += x_offset;
        tplt->window.box.x1 += x_offset;
        tplt->window.box.y0 += y_offset;
        tplt->window.box.y1 += y_offset;
    }
}


/*
     This routine initialises file_action when it is entered.
     It does:
     *    Register our deactivation routine and activate ourselves
     *    Prefer the base invocation of Filer_Action
     *    Initialise wimplib
     *    Initialise the action environment
*/
static wimp_msgaction Messages[] = {
    wimp_MPREQUIT,
    wimp_MSETSLOT,
    wimp_MHELPREQUEST,
    wimp_MFilerSelectionDirectory,
    wimp_MFilerAddSelection,
    wimp_MFilerAction,
    wimp_MFilerControlAction,
    wimp_MCLOSEDOWN /* list terminator (0, but with the right type) */
};

os_error *initialise( action_environment *env, int argc, char *argv[] )
{
    os_error *err;

    IGNORE(argc); /* keep the compiler quiet */
    IGNORE(argv); /* keep the compiler quiet */

    overflowing_initialise();

    /*
         Pull in some resources
    */
    res_init("FilerAct");
    msgs_init();
    wimpt_messages(Messages);
    wimpt_init(msgs_lookup("89"));
    template_init();
    debuginit(( "Resources initialised\n" ));

    #ifdef debug
    /* Test errors. */
    {
        os_error *err;
        err = error( mb_slotsize_too_small );
        debuginit(( "%d: %s\n", err->errnum, err->errmess ));
        err = error( mb_malloc_failed );
        debuginit(( "%d: %s\n", err->errnum, err->errmess ));
        err = error( mb_unexpected_state );
        debuginit(( "%d: %s\n", err->errnum, err->errmess ));
        err = error( mb_broken_templates );
        debuginit(( "%d: %s\n", err->errnum, err->errmess ));
    }
    #endif

    /*
         Get the memmanagement onto the right footing
    */
    err = init_memmanagement();
    if ( err )
         return err;

    /*
         re-position the window near the mouse
    */
    near_mouse_position_window( MAIN_TEMPLATE_NAME );

    /*
         start up the dbox wimplib stuff
    */
    dbox_init();

    /*
         Add event processor here, so that deactivate_myself can cleanly
         remove it
    */
    win_add_unknown_event_processor( message_event_handler, env );
    atexit( remove_processor );

    /*
         create a window for ourself
    */
    env->status_box = dbox_new( MAIN_TEMPLATE_NAME );
    if ( env->status_box == NULL )
            return error( mb_broken_templates );
    env->window_handle = dbox_syshandle( env->status_box );

    /*
         Attach the button event handler
    */
    dbox_eventhandler( env->status_box, button_event_handler, env );

    /*
            Give ourself a menu
    */
    env->option_menu = menu_new( msgs_lookup( "90" ), msgs_lookup( "91" ));
    if ( env->option_menu == NULL )
            return error( mb_malloc_failed );
    event_attachmenu( dbox_syshandle( env->status_box ), env->option_menu, (event_menu_proc)option_menu_handler, env );

    /*
         Attach idle event handler to dialogue box
    */
    dbox_raw_eventhandler( env->status_box, idle_event_handler, env );

    /*
         Direct idle events at the dialogue box
    */
    win_claim_idle_events( dbox_syshandle( env->status_box ));

    /*
         Enable only those events we're interested in
    */
    event_setmask( (wimp_emask)(wimp_EMPTRLEAVE | wimp_EMPTRENTER | wimp_EMUSERDRAG) );

    /*
         Initialise an empty search context and boxchange information.
         Also initialise memory flexing state.
    */
    create_search_context( &env->test_search );
    env->boxchange_direction = 0;
    env->flex_memory = No;
    env->disable_flex = No;
    env->in_error = No;
    #ifdef USE_PROGRESS_BAR
    env->progress = 0;
    #endif

    last_top_info_field = NULL;

    /*
         Make sure we don't go away when the window's closed
    */
    win_activeinc();

    dboxquery( 0 );

    setlocale( LC_ALL, "" );

    return NULL;
}
@


4.6
log
@Swap magic constants for defines from headers.
OS_FSControl, OS_File, OS_GBPB, OS_Args, OS_Find now use HighFSI.h.
Indentation made more consistent.
Variety of DEBUG macros changed to allow them to be enabled and disabled on a per-file basis.
Put USE_RED_ERROR box switch into options.h (undefined though).
Functionally equivalent to 0.52, but lots of diffs.

Version 0.53. Tagged as 'FilerAct-0_53'
@
text
@d67 1
a67 1
        win_remove_unknown_event_processor( message_event_handler, &env );
d69 1
a69 1
        closedown_memmanagement();
d74 5
a78 5
        template *tplt = template_find( window_name );
        wimp_mousestr ptr;
        os_error *err;
        int x_offset;
        int y_offset;
d80 13
a92 13
        err = wimp_get_point_info( &ptr );
        if ( !err )
        {
                x_offset = (ptr.x - Window_Title_Height - Character_Height) -
                           tplt->window.box.x0;
                y_offset = (ptr.y - Window_Title_Height - Character_Height) -
                           tplt->window.box.y1;

                tplt->window.box.x0 += x_offset;
                tplt->window.box.x1 += x_offset;
                tplt->window.box.y0 += y_offset;
                tplt->window.box.y1 += y_offset;
        }
d137 9
a145 9
      os_error *err;
      err = error( mb_slotsize_too_small );
      debuginit(( "%d: %s\n", err->errnum, err->errmess ));
      err = error( mb_malloc_failed );
      debuginit(( "%d: %s\n", err->errnum, err->errmess ));
      err = error( mb_unexpected_state );
      debuginit(( "%d: %s\n", err->errnum, err->errmess ));
      err = error( mb_broken_templates );
      debuginit(( "%d: %s\n", err->errnum, err->errmess ));
d159 1
a159 1
    near_mouse_position_window( Main_Window );
d176 1
a176 1
    env->status_box = dbox_new( Main_Window );
@


4.5
log
@Fix display of bytes-to-go when there are > 2G left.
Was doing a widening cast of a signed number to 64 bits, so showed 16 trillion bytes remaining.
Fix templates to not say "stuff" by default in the name, as this was left on screen if an error occured before processing began.
Things that read from clock() now use clock_t.
Uncurled some "} else {" to match all the other files.
Deleted the USE_LONG_LONG switch, it's been needed ever since harddiscs got bigger than 4G anyway.
Anything assigned 'Yes' or 'No' changed to type BOOL.
Variable 'source_of_finished_file' was signalling that a directory had been copied by setting the length to a -ve number. This has been refactored to use a BOOL instead, so files can have top bit set sizes.
Fix bug in stack grab in count_objects_in_dir(), was grabbing an array of 2048 pointers (=8k) not 2048 bytes.
Functions bytes_left_to_read() and bytes_left_to_write() reprototyped to return uint32_t not signed numbers.
Still falls over copying files > 2G, but at least it gets the display right!

Version 0.51. Tagged as 'FilerAct-0_51'
@
text
@d15 1
d17 3
a19 1
#define debuginit
d132 1
d134 1
a134 1
    #ifdef debuginit
d139 1
a139 1
      DEBUG(("%d: %s\n", err->errnum, err->errmess));
d141 1
a141 1
      DEBUG(("%d: %s\n", err->errnum, err->errmess));
d143 1
a143 1
      DEBUG(("%d: %s\n", err->errnum, err->errmess));
d145 1
a145 1
      DEBUG(("%d: %s\n", err->errnum, err->errmess));
@


4.4
log
@Didn't compile with PROGRESS_BAR turned off.
Rationalised all the switches a bit.
Not tagged.
@
text
@d23 1
d70 1
a70 1
   {
d109 1
a109 1
    wimp_MCLOSEDOWN		// 0, but with the correct type
d132 2
a133 1
    { os_error *err;
@


4.3
log
@Redesigned window to show more of path.
Added progress bar.
Performance improvements, especially in 'slower' mode.
Fixed 'count summary' bug.
Fixed various compiler warnings.

Version 0.49. Tagged as 'FilerAct-0_49'
@
text
@d212 1
a212 1
    #ifdef PROGRESS_BAR
@


4.2
log
@Added functionality from RISC OS 4.02 (Faster button, 64-bit display, number
separators). This implementation does not use the Netscape libraries, and
looks up the number separation scheme from the current territory.

Now copies directory datestamps, as per the command-line *Copy.

Version 0.46. Tagged as 'FilerAct-0_46'
@
text
@d36 1
a36 1

d108 1
a108 1
    0
d113 1
a113 4
        os_error *err;

        argc = argc; /* keep the compiler quiet */
        argv = argv; /* keep the compiler quiet */
d115 2
a116 1
        overflowing_initialise();
d118 1
a118 22
        /*
             Pull in some resources
        */
        res_init("FilerAct");
        msgs_init();
        wimpt_messages(Messages);
        wimpt_init(msgs_lookup("89"));
        template_init();

#ifdef debuginit
        /* Test errors. */
        { os_error *err;
          err = error( mb_slotsize_too_small );
          dprintf("%d: %s\n", err->errnum, err->errmess);
          err = error( mb_malloc_failed );
          dprintf("%d: %s\n", err->errnum, err->errmess);
          err = error( mb_unexpected_state );
          dprintf("%d: %s\n", err->errnum, err->errmess);
          err = error( mb_broken_templates );
          dprintf("%d: %s\n", err->errnum, err->errmess);
        }
#endif
d120 102
a221 76
        /*
             Get the memmanagement onto the right footing
        */
        err = init_memmanagement();
        if ( err )
             return err;

        /*
             re-position the window near the mouse
        */
        near_mouse_position_window( Main_Window );

        /*
             start up the dbox wimplib stuff
        */
        dbox_init();

        /*
             Add event processor here, so that deactivate_myself can cleanly
             remove it
        */
        win_add_unknown_event_processor( message_event_handler, env );
        atexit( remove_processor );

        /*
             create a window for ourselved
        */
        env->status_box = dbox_new( Main_Window );
        if ( env->status_box == NULL )
                return error( mb_broken_templates );

        /*
             Attach the button event handler
        */
        dbox_eventhandler( env->status_box, button_event_handler, env );

        /*
                Give ourselves a menu
        */
        env->option_menu = menu_new( msgs_lookup( "90" ), msgs_lookup( "91" ));
        if ( env->option_menu == NULL )
                return error( mb_malloc_failed );
        event_attachmenu( dbox_syshandle( env->status_box ), env->option_menu, (event_menu_proc)option_menu_handler, env );

        /*
             Attach idle event handler to dialogue box
        */
        dbox_raw_eventhandler( env->status_box, idle_event_handler, env );

        /*
             Direct idle events at the dialogue box
        */
        win_claim_idle_events( dbox_syshandle( env->status_box ));

        /*
             Enable only those events we're interested in
        */
        event_setmask( wimp_EMPTRLEAVE | wimp_EMPTRENTER | wimp_EMUSERDRAG );

        /*
             Initialise an empty search context and boxchange information.
             Also initialise memory flexing state.
        */
        create_search_context( &env->test_search );
        env->boxchange_direction = 0;
        env->flex_memory = No;
        env->disable_flex = No;
        env->in_error = No;

        last_top_info_field = NULL;


        /*
             Make sure we don't go away when the window's closed
        */
        win_activeinc();
d223 1
a223 1
        dboxquery( 0 );
d225 1
a225 1
        setlocale( LC_ALL, "" );
d227 1
a227 1
        return NULL;
@


4.1
log
@Initial revision
@
text
@d21 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
