head	4.7;
access;
symbols
	FilerAct-0_62:4.7
	FilerAct-0_61:4.7
	FilerAct-0_60:4.7
	FilerAct-0_59:4.6
	FilerAct-0_58:4.6
	FilerAct-0_57:4.6
	FilerAct-0_55:4.6
	FilerAct-0_54:4.6
	FilerAct-0_53:4.6
	FilerAct-0_52:4.5
	FilerAct-0_51:4.5
	FilerAct-0_50:4.3
	FilerAct-0_49:4.3
	FilerAct-0_48:4.2
	RO_5_07:4.2
	FilerAct-0_47:4.2
	FilerAct-0_46:4.2
	FilerAct-0_45:4.1
	dellis_autobuild_BaseSW:4.1
	FilerAct-0_44:4.1
	FilerAct-0_43:4.1
	sbrodie_sedwards_16Mar2000:4.1
	FilerAct-0_42:4.1
	Ursula_merge:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_FilerAct_0_39:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rleggett_FilerAct-0_42:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2014.08.01.07.11.53;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	CniEli1bdkOJZCKx;

4.6
date	2011.10.23.07.46.58;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	7I8FKGdkajlxKrEv;

4.5
date	2011.10.20.20.32.44;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	DXWFsDOPRJsd58Ev;

4.4
date	2011.10.20.20.23.02;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	xmwir195eiLF18Ev;

4.3
date	2011.06.29.09.21.48;	author rgriffin;	state Exp;
branches;
next	4.2;
commitid	OcnnyIVQ9uPd0ypv;

4.2
date	2002.09.23.18.25.36;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.29.36;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.29.36;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.28.00;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.17.54;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.16.46;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Build fix
Message_FilerOpenDir renamed.

Version 0.60. Tagged as 'FilerAct-0_60'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if 0
#define debugbut(k) dprintf k
#else
#define debugbut(k) /* Disabled */
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <ctype.h>
#include <time.h>

#include "os.h"
#include "wimp.h"
#include "wimpt.h"
#include "event.h"
#include "dbox.h"
#include "msgs.h"

#include "Options.h"
#include "malloc+.h"
#include "listfiles.h"
#include "memmanage.h"
#include "allerrs.h"
#include "actionwind.h"
#include "Buttons.h"
#include "debug.h"

#define No 0
#define Yes (!No)


static void null_activity( action_environment * );
static void pause_operation( action_environment * );
static void continue_operation( action_environment * );
#ifdef USE_FASTER_BUTTON
static void faster_operation( action_environment * );
#endif
static void skip_file( action_environment * );
static void operate_on_file( action_environment * );
static void to_end_of_list( action_environment * );
static void skip_operation( action_environment * );
static void retry_operation( action_environment * );
static void restart_operation( action_environment * );
static void run_object( action_environment * );
static void view_object( action_environment * );

const button_set abort_pause_buttons =
{
        {
                No,
                abort_operation,
                null_activity,
                null_activity,
                pause_operation,
#ifdef USE_FASTER_BUTTON
                faster_operation,
#else
                null_activity,
#endif
                {
                        "3",
                        "",
                        "",
                        "4",
#ifdef USE_FASTER_BUTTON
                        "FS"
#else
                        ""
#endif
                }
        },
        {
                "5",
                NULL,
                NULL,
                "6",
#ifdef USE_FASTER_BUTTON
                "F"
#else
                NULL
#endif
        }
};

const button_set confirm_buttons =
{
        {
                Yes,
                abort_operation,
                skip_file,
                operate_on_file,
                to_end_of_list,
                null_activity,
                {
                        "3",
                        "8",
                        "9",
                        "10",
                        ""
                }
        },
        {
                "5",
                "11",
                "12",
                "13",
                NULL
        }
};

const button_set ok_button =
{
        {
                Yes,
                null_activity,
                null_activity,
                null_activity,
                null_activity,
                abort_operation,
                {
                        "",
                        "",
                        "",
                        "",
                        "14"
                }
        },
        {
                NULL,
                NULL,
                NULL,
                NULL,
                "15"
        }
};

const button_set norestart_button =
{
        {
                Yes,
                abort_operation,
                null_activity,
                null_activity,
                retry_operation,
                skip_operation,
                {
                        "3",
                        "",
                        "",
                        "16",
                        "8"
                }
        },
        {
                "5",
                NULL,
                NULL,
                "17",
                "18"
        }
};

const button_set restart_button =
{
        {
                Yes,
                abort_operation,
                skip_operation,
                restart_operation,
                retry_operation,
                null_activity,
                {
                        "5",
                        "8",
                        "19",
                        "16",
                        ""
                }
        },
        {
                "5",
                "18",
                "20",
                "17",
                NULL
        }
};

const button_set abort_retry_buttons =
{
        {
                Yes,
                abort_operation,
                null_activity,
                null_activity,
                retry_operation,
                null_activity,
                {
                        "3",
                        "",
                        "",
                        "16",
                        ""
                }
        },
        {
                "5",
                NULL,
                NULL,
                "17",
                NULL
        }
};

const button_set run_view_buttons =
{
        {
                Yes,
                abort_operation,
                run_object,
                view_object,
                continue_operation,
                null_activity,
                {
                        "3",
                        "21",
                        "22",
                        "23",
                        ""
                }
        },
        {
                "5",
                "24",
                "25",
                "26",
                NULL
        }
};

const button_set open_buttons =
{
        {
                Yes,
                abort_operation,
                null_activity,
                null_activity,
                continue_operation,
                run_object,
                {
                        "3",
                        "",
                        "",
                        "23",
                        "27"
                }
        },
        {
                "5",
                NULL,
                NULL,
                "26",
                "28"
        }
};


static void set_button( action_environment *env, int button, const char *text )
{
    int dbox_handle = dbox_syshandle( env->status_box );


    if ( text != NULL )
    {
        /*
                Ensure button exists before setting field
        */
        wimp_iconflags flags = (wimp_iconflags) 0;
        wimp_iconflags mask = (wimp_iconflags) (wimp_IDELETED | wimp_IREDRAW);
        wimp_set_icon_state( dbox_handle, button, flags, mask );
        dbox_setfield( env->status_box, button, msgs_lookup((char *)text) );
    }
    else
    {
        wimp_redrawstr r;
        wimp_icon icondata;
        os_error *err;

        /*
             delete button
        */
        err = wimp_get_icon_info( dbox_handle, button, &icondata );

        if ( !err )
        {
            wimp_iconflags flags = (wimp_iconflags) (wimp_IDELETED | wimp_IREDRAW);
            wimp_iconflags mask = flags;
            wimp_set_icon_state( dbox_handle, button, flags, mask );

            r.w = dbox_handle;
            r.box = icondata.box;

            wimp_force_redraw( &r );
        }
    }
}

static void set_all_buttons( action_environment *env, const button_texts *texts )
{
    set_button( env, Abort_Button, texts->abort_text );
    set_button( env, No_Skip_Button, texts->no_skip_text );
    set_button( env, Yes_Retry_Button, texts->yes_retry_text );
    set_button( env, Misc_Button, texts->misc_text );
    set_button( env, Skip_Button, texts->skip_text );
}

void switch_buttons( action_environment *env, const button_set *new_buttons )
{
    env->button_actions = new_buttons->actions;
    set_all_buttons( env, &new_buttons->texts );

    if ( new_buttons->actions.requires_interaction )
    {
        /*
             Pop up the dialogue box and turn off NULL events
        */
        dbox_showstatic( env->status_box );

        show_faster_stuff( env );

        wimp_emask mask = (wimp_emask) (wimp_EMNULL | wimp_EMPTRLEAVE | wimp_EMPTRENTER | wimp_EMUSERDRAG);

        event_setmask( mask );
    }
    else
    {
        if ( !env->verbose )
        {
                switch_dbox_on_off( env, -1, Remove_Delay );
        }

        /*
                Things might have changed, so update ourselves
        */
        read_next_node_parameters( env->test_search );

        wimp_emask mask = (wimp_emask) (wimp_EMPTRLEAVE | wimp_EMPTRENTER | wimp_EMUSERDRAG);

        event_setmask( mask );
    }

    #ifdef USE_FASTER_BUTTON
    /* Ensure we get the buttons we really need */
    if ( new_buttons == &abort_pause_buttons )
    {
        set_faster_state( env );
    }
    #endif
}

void abort_operation( action_environment *env )
{
    dispose_search_context( env->test_search );

    exit( 0 );
}

static void pause_operation( action_environment *env )
{
    set_button( env, Misc_Button, "26" );

    env->button_actions.button_helps[ Misc_Button - Abort_Button ] = "79";

    env->button_actions.misc_action = continue_operation;

    set_top_info_field_with_current_info(env, "80a", "80");

    dbox_showstatic( env->status_box );

    wimp_emask mask = (wimp_emask) (wimp_EMNULL | wimp_EMPTRLEAVE | wimp_EMPTRENTER | wimp_EMUSERDRAG );

    event_setmask( mask );
}

#ifdef USE_FASTER_BUTTON
/* JRF: Calls the same thing as the menu option */
static void faster_operation( action_environment *env )
{
    toggle_faster( env );
}

void set_faster_state( action_environment *env )
{
    if ( !env->button_actions.requires_interaction )
    {
        if ( env->faster )
            set_button( env, Skip_Button, "S" );
        else
            set_button( env, Skip_Button, "F" );
    }
}
#endif

static void continue_operation( action_environment *env )
{
    switch_buttons( env, &abort_pause_buttons );
}

static void null_activity( action_environment *env )
{
    IGNORE(env);
}

/*
     confirm Yes button
*/
static void operate_on_file( action_environment *env )
{
    switch_buttons( env, &abort_pause_buttons );
}

/*
     confirm Quiet button
*/
static void to_end_of_list( action_environment *env )
{
    switch_buttons( env, &abort_pause_buttons );
 
    env->confirm = No;
}

/*
     confirm Skip button
*/
static void skip_file( action_environment *env )
{
    env->action = Next_File;
    
    skip_list_file( env->test_search );
    
    switch_buttons( env, &abort_pause_buttons );
}

/*
     error Skip button
*/
static void skip_operation( action_environment *env )
{
    if ( env->action == Next_File )
    {
        skip_failed_selection( env->test_search );
    }
    else
    {
        switch ( env->operation )
        {
        case Action_Copying:
        case Action_CopyMoving:
        case Action_CopyLocal:
            if ( env->action == Check_Full_Reading )
            {
                    skip_file_read();
                    switch_to_reading( env );
            }
            else if ( env->action == Check_Empty_Writing )
            {
                    skip_file_write();
                    switch_to_writing( env );
            }
            else
            {
                    env->action = Next_File;
            }
            break;

        case Action_Moving:
        case Action_Deleting:
        case Action_Setting_Access:
        case Action_Setting_Type:
        case Action_Counting:
        case Action_Stamping:
        case Action_Finding:
            env->action = Next_File;
            break;
        }
    }

    switch_buttons( env, &abort_pause_buttons );
}

static void run_object( action_environment *env )
{
    char *filename;
    char *command;
    os_error *err;

    err = next_nodename( env->test_search, &filename );

    if ( err )
    {
        wimpt_complain( err );
        return;
    }

    command = overflowing_malloc( strlen( "Filer_Run " ) + strlen( filename ) + 1 );

    if ( !command )
    {
        wimpt_complain( error( mb_malloc_failed ) );
        return;
    }

    sprintf( command, "Filer_Run %s", filename );

    overflowing_free( filename );

    wimpt_complain( os_cli( command ));

    overflowing_free( command );
}

static void view_object( action_environment *env )
{
    wimp_msgstr m;
    char *filename;
    os_error *err;

    err = next_nodename( env->test_search, &filename );

    if ( err )
    {
        wimpt_complain( err );
        return;
    }

    /*
        strrchr is guaranteed to work correctly due to the nature of the
        filename.
    */
    *strrchr( filename, '.' ) = '\0';

    m.hdr.size = 256;
    m.hdr.your_ref = 0;
    m.hdr.action = wimp_MFILER_OPEN_DIR;
    m.data.words[ 0 ] = 0;
    m.data.words[ 1 ] = 0;
    strcpy( (char *)&m.data.words[2], filename );

    overflowing_free( filename );

    wimpt_complain( wimp_sendmessage( wimp_ESEND, &m, 0 ));
}

/*
     error Restart button
*/
static void restart_operation( action_environment *env )
{
    debugbut(( "restart_operation: env=&%8X\n", (int)env ));
    if ( env->action == Check_Full_Reading )
        restart_file_read();

    if ( env->action == Check_Empty_Writing )
        restart_file_write();

    switch_buttons( env, &abort_pause_buttons );
}

/*
     error Retry button
*/
static void retry_operation( action_environment *env )
{
    switch_buttons( env, &abort_pause_buttons );
}

/*
     This intercepts and handles the button events
*/
void button_event_handler( dbox db, void *handle )
{
    action_environment *env = handle;

    IGNORE(db);

    switch( dbox_get( env->status_box ))
    {
    case Abort_Button:
        env->button_actions.abort_action( env );
        break;

    case No_Skip_Button:
        env->button_actions.no_skip_action( env );
        break;

    case Yes_Retry_Button:
        env->button_actions.yes_retry_action( env );
        break;

    case Misc_Button:
        env->button_actions.misc_action( env );
        break;

    case Skip_Button:
        env->button_actions.skip_action( env );
        break;

    default:
        /* do nothing on other fields */
        break;
    }
}
@


4.6
log
@Swap magic constants for defines from headers.
OS_FSControl, OS_File, OS_GBPB, OS_Args, OS_Find now use HighFSI.h.
Indentation made more consistent.
Variety of DEBUG macros changed to allow them to be enabled and disabled on a per-file basis.
Put USE_RED_ERROR box switch into options.h (undefined though).
Functionally equivalent to 0.52, but lots of diffs.

Version 0.53. Tagged as 'FilerAct-0_53'
@
text
@d561 1
a561 1
    m.hdr.action = wimp_FilerOpenDir;
@


4.5
log
@Fix display of bytes-to-go when there are > 2G left.
Was doing a widening cast of a signed number to 64 bits, so showed 16 trillion bytes remaining.
Fix templates to not say "stuff" by default in the name, as this was left on screen if an error occured before processing began.
Things that read from clock() now use clock_t.
Uncurled some "} else {" to match all the other files.
Deleted the USE_LONG_LONG switch, it's been needed ever since harddiscs got bigger than 4G anyway.
Anything assigned 'Yes' or 'No' changed to type BOOL.
Variable 'source_of_finished_file' was signalling that a directory had been copied by setting the length to a -ve number. This has been refactored to use a BOOL instead, so files can have top bit set sizes.
Fix bug in stack grab in count_objects_in_dir(), was grabbing an array of 2048 pointers (=8k) not 2048 bytes.
Functions bytes_left_to_read() and bytes_left_to_write() reprototyped to return uint32_t not signed numbers.
Still falls over copying files > 2G, but at least it gets the display right!

Version 0.51. Tagged as 'FilerAct-0_51'
@
text
@d15 1
d17 3
a19 1
#define debugbut
d373 1
a373 1
      set_faster_state( env );
d380 1
a380 1
        dispose_search_context( env->test_search );
d382 1
a382 1
        exit( 0 );
d406 1
a406 1
        toggle_faster( env );
d411 3
a413 3
        if ( !env->button_actions.requires_interaction )
        {
          if ( env->faster )
d415 1
a415 1
          else
d417 1
a417 1
        }
d423 1
a423 1
        switch_buttons( env, &abort_pause_buttons );
d428 1
a428 1
        env = env;     /* keep the compiler quiet */
d436 1
a436 1
        switch_buttons( env, &abort_pause_buttons );
d444 3
a446 3
        switch_buttons( env, &abort_pause_buttons );

        env->confirm = No;
d454 5
a458 5
        env->action = Next_File;

        skip_list_file( env->test_search );

        switch_buttons( env, &abort_pause_buttons );
d466 7
a472 1
        if ( env->action == Next_File )
d474 28
a501 35
                skip_failed_selection( env->test_search );
        }
        else
        {
                switch ( env->operation )
                {
                case Action_Copying:
                case Action_CopyMoving:
                case Action_CopyLocal:
                        if ( env->action == Check_Full_Reading )
                        {
                                skip_file_read();
                                switch_to_reading( env );
                        }
                        else if ( env->action == Check_Empty_Writing )
                        {
                                skip_file_write();
                                switch_to_writing( env );
                        }
                        else
                        {
                                env->action = Next_File;
                        }
                     break;

                case Action_Moving:
                case Action_Deleting:
                case Action_Setting_Access:
                case Action_Setting_Type:
                case Action_Counting:
                case Action_Stamping:
                case Action_Finding:
                        env->action = Next_File;
                        break;
                }
d503 1
d505 1
a505 1
        switch_buttons( env, &abort_pause_buttons );
d510 3
a512 3
        char *filename;
        char *command;
        os_error *err;
d514 1
a514 1
        err = next_nodename( env->test_search, &filename );
d516 5
a520 5
        if ( err )
        {
                wimpt_complain( err );
                return;
        }
d522 1
a522 1
        command = overflowing_malloc( strlen( "Filer_Run " ) + strlen( filename ) + 1 );
d524 5
a528 5
        if ( !command )
        {
                wimpt_complain( error( mb_malloc_failed ) );
                return;
        }
d530 1
a530 1
        sprintf( command, "Filer_Run %s", filename );
d532 1
a532 1
        overflowing_free( filename );
d534 1
a534 1
        wimpt_complain( os_cli( command ));
d536 1
a536 1
        overflowing_free( command );
d541 3
a543 3
        wimp_msgstr m;
        char *filename;
        os_error *err;
d545 1
a545 1
        err = next_nodename( env->test_search, &filename );
d547 5
a551 5
        if ( err )
        {
                wimpt_complain( err );
                return;
        }
d553 12
a564 5
        /*
                strrchr is guaranteed to work correctly due to the nature of the
                filename.
        */
        *strrchr( filename, '.' ) = '\0';
d566 1
a566 6
        m.hdr.size = 256;
        m.hdr.your_ref = 0;
        m.hdr.action = wimp_FilerOpenDir;
        m.data.words[ 0 ] = 0;
        m.data.words[ 1 ] = 0;
        strcpy( (char *)&m.data.words[2], filename );
d568 1
a568 3
        overflowing_free( filename );

        wimpt_complain( wimp_sendmessage( wimp_ESEND, &m, 0 ));
d576 3
a578 5
#ifdef debugbut
        DEBUG(( "restart_operation: env=&%8X\n", (int)env ));
#endif
        if ( env->action == Check_Full_Reading )
                restart_file_read();
d580 2
a581 2
        if ( env->action == Check_Empty_Writing )
                restart_file_write();
d583 1
a583 1
        switch_buttons( env, &abort_pause_buttons );
d591 1
a591 1
        switch_buttons( env, &abort_pause_buttons );
d599 1
a599 1
        action_environment *env = handle;
d601 1
a601 1
        db = db; /* keep the compiler quiet */
d603 26
a628 26
        switch( dbox_get( env->status_box ))
        {
        case Abort_Button:
                env->button_actions.abort_action( env );
                break;

        case No_Skip_Button:
                env->button_actions.no_skip_action( env );
                break;

        case Yes_Retry_Button:
                env->button_actions.yes_retry_action( env );
                break;

        case Misc_Button:
                env->button_actions.misc_action( env );
                break;

        case Skip_Button:
                env->button_actions.skip_action( env );
                break;

        default:
                /* do nothing on other fields */
                break;
        }
@


4.4
log
@Didn't compile with PROGRESS_BAR turned off.
Rationalised all the switches a bit.
Not tagged.
@
text
@d24 1
@


4.3
log
@Redesigned window to show more of path.
Added progress bar.
Performance improvements, especially in 'slower' mode.
Fixed 'count summary' bug.
Fixed various compiler warnings.

Version 0.49. Tagged as 'FilerAct-0_49'
@
text
@d48 1
a48 1
#ifdef UseFasterButton
d68 1
a68 1
#ifdef UseFasterButton
d78 1
a78 1
#ifdef UseFasterButton
d90 1
a90 1
#ifdef UseFasterButton
d365 1
a365 1
    #ifdef UseFasterButton
d398 1
a398 1
#ifdef UseFasterButton
@


4.2
log
@Added functionality from RISC OS 4.02 (Faster button, 64-bit display, number
separators). This implementation does not use the Netscape libraries, and
looks up the number separation scheme from the current territory.

Now copies directory datestamps, as per the command-line *Copy.

Version 0.46. Tagged as 'FilerAct-0_46'
@
text
@d283 1
a283 1
        int dbox_handle = dbox_syshandle( env->status_box );
d286 22
a307 1
        if ( text != NULL )
d309 3
a311 20
                /*
                        Ensure button exists before setting field
                */
                wimp_set_icon_state( dbox_handle, button, 0, wimp_IDELETED | wimp_IREDRAW );
                dbox_setfield( env->status_box, button, msgs_lookup((char *)text) );
        }
        else
        {
                wimp_redrawstr r;
                wimp_icon icondata;
                os_error *err;

                /*
                     delete button
                */
                err = wimp_get_icon_info( dbox_handle, button, &icondata );

                if ( !err )
                {
                        wimp_set_icon_state( dbox_handle, button, wimp_IDELETED | wimp_IREDRAW, wimp_IDELETED | wimp_IREDRAW );
d313 2
a314 2
                        r.w = dbox_handle;
                        r.box = icondata.box;
d316 1
a316 2
                        wimp_force_redraw( &r );
                }
d318 1
d323 5
a327 5
        set_button( env, Abort_Button, texts->abort_text );
        set_button( env, No_Skip_Button, texts->no_skip_text );
        set_button( env, Yes_Retry_Button, texts->yes_retry_text );
        set_button( env, Misc_Button, texts->misc_text );
        set_button( env, Skip_Button, texts->skip_text );
d332 9
a340 2
        env->button_actions = new_buttons->actions;
        set_all_buttons( env, &new_buttons->texts );
d342 1
a342 6
        if ( new_buttons->actions.requires_interaction )
        {
                /*
                     Pop up the dialogue box and turn off NULL events
                */
                dbox_showstatic( env->status_box );
d344 1
a344 1
                show_faster_stuff( env );
d346 7
a352 1
                event_setmask( wimp_EMNULL | wimp_EMPTRLEAVE | wimp_EMPTRENTER | wimp_EMUSERDRAG );
a353 6
        else
        {
                if ( !env->verbose )
                {
                        switch_dbox_on_off( env, -1, Remove_Delay );
                }
d355 6
a360 4
                /*
                        Things might have changed, so update ourselves
                */
                read_next_node_parameters( env->test_search );
d362 2
a363 2
                event_setmask( wimp_EMPTRLEAVE | wimp_EMPTRENTER | wimp_EMUSERDRAG );
        }
d365 7
a371 7
#ifdef UseFasterButton
        /* Ensure we get the buttons we really need */
        if ( new_buttons == &abort_pause_buttons )
        {
          set_faster_state( env );
        }
#endif
d383 1
a383 3
        char info_buffer[ Info_Field_Length + 10 ];

        set_button( env, Misc_Button, "26" );
d385 1
a385 1
        env->button_actions.button_helps[ Misc_Button - Abort_Button ] = "79";
d387 1
a387 1
        env->button_actions.misc_action = continue_operation;
d389 1
a389 3
        strcpy(info_buffer, "80a");
        strcat(info_buffer, env->current_info_token);
        sprintf(info_buffer, msgs_lookup(info_buffer), tolower(env->current_info[0]), &env->current_info[1]);
d391 1
a391 1
        dbox_setfield( env->status_box, Top_Info_Field, info_buffer );
d393 1
a393 3
        last_top_info_field = info_buffer;

        dbox_showstatic( env->status_box );
d395 1
a395 1
        event_setmask( wimp_EMNULL | wimp_EMPTRLEAVE | wimp_EMPTRENTER | wimp_EMUSERDRAG );
d573 1
a573 1
        dprintf( "restart_operation: env=&%8X\n", (int)env );
@


4.1
log
@Initial revision
@
text
@d22 1
d32 1
d48 3
d68 3
d72 1
d78 3
d82 1
d90 3
d94 1
d280 1
d356 8
d395 19
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
