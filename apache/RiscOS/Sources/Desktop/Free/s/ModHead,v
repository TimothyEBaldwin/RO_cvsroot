head	4.8;
access;
symbols
	Free-0_42:4.8
	Free-0_41:4.8
	Free-0_40:4.7
	RO_5_07:4.6
	Free-0_39:4.6
	Free-0_38:4.6
	Free-0_37:4.6
	Free-0_36:4.6
	dellis_autobuild_BaseSW:4.5
	Free-0_35:4.5
	Free-0_34:4.5
	sbrodie_sedwards_16Mar2000:4.4
	dcotton_autobuild_BaseSW:4.6
	Free-0_33:4.4
	ROL_merge:4.2.10.1
	ROL_Free-0_33:4.2.10.1
	ROL_bp:4.2
	ROL:4.2.0.10
	Free-0_32:4.3
	Ursula_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	nicke_Free_0_30:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.8
date	2015.01.16.00.18.15;	author jlee;	state Exp;
branches;
next	4.7;
commitid	GyXg3nt4PbW3jb6y;

4.7
date	2011.11.28.12.18.36;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	iKirgixLQEf066Jv;

4.6
date	2001.03.16.17.07.29;	author sbrodie;	state Exp;
branches;
next	4.5;

4.5
date	2000.05.25.16.05.15;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	99.08.25.12.45.52;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.08.17.18.24.26;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.16.00.20;	author nturton;	state Exp;
branches
	4.2.10.1;
next	4.1;

4.1
date	96.11.05.09.29.52;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.10.1
date	99.08.25.12.25.21;	author sbrodie;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.29.52;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.29.11;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.20.08;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.18.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.8
log
@Escape some dollars
Detail:
  s/ModHead - Escape some dollars contained in strings to avoid warnings from objasm
Admin:
  Resulting binary unchanged


Version 0.41. Retagged as 'Free-0_41'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.ModHead

        ASSERT  (.=Module_BaseAddr)
MySWIBase       *       Module_SWISystemBase + FreeSWI * Module_SWIChunkSize

        DCD     Start          - Module_BaseAddr
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     Helptable      - Module_BaseAddr
        DCD     MySWIBase
        DCD     Free_SWIdecode - Module_BaseAddr
        DCD     Free_SWInames  - Module_BaseAddr
        DCD     0
 [ International_Help <> 0
        DCD     message_filename - Module_BaseAddr
 |
        DCD     0
 ]
 [ :LNOT: No32bitCode
        DCD     Free_Flags     - Module_BaseAddr
 ]

; ----------------------------------------------------------------------------------------------------------------------
Helpstr DCB     "Free",9,9,"$Module_HelpVersion", 0

Title   ;DCB     "Free",0
Free_SWInames
        DCB     "Free",0                ; prefix
        DCB     "Register",0
        DCB     "DeRegister",0
        DCB     0
        ALIGN

Taskid  DCB     "TASK"
                ALIGN

 [ :LNOT: No32bitCode
Free_Flags DCD ModuleFlag_32bit
 ]

; ----------------------------------------------------------------------------------------------------------------------
;       Handle *Desktop_Free - only enter modules if after a Service_StartWimp
Desktop_Free_Code
        Push    "LR"

        LDR     r12, [r12]
        LDR     r14, mytaskhandle
        CMP     r14, #-1
        MOVEQ   r2, r0                  ; r2 --> command tail
        MOVEQ   r0, #ModHandReason_Enter
        ADREQ   r1, Title
        SWIEQ   XOS_Module
01
        ADR     r0, ErrorBlock_CantStartFree
        ADR     r1, Title
        BL      LookupError
        Pull    "PC"
; ----------------------------------------------------------------------------------------------------------------------
;       Error block for use of *Desktop_Free

ErrorBlock_CantStartFree
        DCD     0
        DCB     "UseDesk",0
        ALIGN
; ----------------------------------------------------------------------------------------------------------------------
Helptable
; ----------------------------------------------------------------------------------------------------------------------
Freecommand
        Command Desktop_Free,0,0,International_Help
        Command ShowFree,3,3,International_Help
        DCB     0
; ----------------------------------------------------------------------------------------------------------------------
 [ International_Help=0
Desktop_Free_Help
        DCB     "The Free utility displays free space information for the desktop filers"
        DCB     13,10
        DCB     "Do not use *Desktop_Free use *Desktop instead."
        DCB     0
Desktop_Free_Syntax
        DCB     "Syntax: *Desktop_Free",0
        ALIGN
; ----------------------------------------------------------------------------------------------------------------------
ShowFree_Help
        DCB     "*ShowFree shows the amount of free space on devices.",0
ShowFree_Syntax
        DCB     "Syntax: *ShowFree -FS <Filing system name>  <Device>",0
 |
Desktop_Free_Help       DCB     "HFREDFR", 0
Desktop_Free_Syntax     DCB     "SFREDFR", 0
ShowFree_Help           DCB     "HFRESHF", 0
ShowFree_Syntax         DCB     "SFRESHF", 0
 ]
ShowFreeArgs
        DCB     "FS/A/K,Device",0
        ALIGN
ErrorBlock_UnknownFileSystem
        DCD     0
        DCB     "UnkFS",0
        ALIGN
ErrorBlock_NotStarted
        DCD     0
        DCB     "NotRun",0
        ALIGN
; ----------------------------------------------------------------------------------------------------------------------
ShowFree_Code

        Push    "LR"

        LDR     r12,[r12]
        CMP     r12,#0
        Pull    "PC",LE


        LDR     r14,mytaskhandle
        CMP     r14,#0
        ADRLE   r0,ErrorBlock_NotStarted
        MOVLE   r1,#0
        BLLE    LookupError
        Pull    "PC",VS

        MOV     r1,r0
        ADR     r0,ShowFreeArgs
        ADR     r2,dataarea
        MOV     r3,#&100
        SWI     XOS_ReadArgs        ; Get arguments
        Pull    "PC",VS

        MOV     r5,r2
        LDR     r1,[r2]             ; Pointer to FS name.
        DebugS  xx,"FSName is ",r1
        MOV     r2,#0
        MOV     r0,#FSControl_LookupFS
        SWI     XOS_FSControl       ; Get filing system number.

        CMP     r2,#0
        ADREQ   r0,ErrorBlock_UnknownFileSystem
        MOVEQ   r1,#0
        BLEQ    LookupError
        Pull    "PC",VS

        Debug   xx,"Filing system number ",r1

        LDR     r3,[r5,#4]              ; Pointer to device ID.
        MOV     r0,#FreeReason_GetName
        ADR     r2,dataarea
        BL      CallEntry               ; [r2] -> Name r0 = length of name.
        Pull    "PC",VS

        MOV     r5,r0                   ; Save length.

;       See if we already have a window open for this device.

        ADR     r0,windows_ptr
01
        LDR     r0,[r0,#next_ptr]
        CMP     r0,#0
        BEQ     create_window
        LDR     r14,[r0,#window_fs]
        CMP     r14,r1
        BNE     %BT01
        LDR     r14,[r0,#window_device]
        CMPSTR  r14,r2
        BNE     %BT01

        Debug   xx,"Window found"

        MOV     r14,#1 :SHL: 31
        STR     r14,[r0,#window_update]  ; Mark window for update & open at front.
        STR     r14,poll_word            ; Set poll word

        Pull    "PC"                    ; Return.

create_window                           ; Window not found, create new window block.


        MOV     r3,#window_block_size
        ADD     r3,r3,r5                ; Plus length of name.
        MOV     r0,#ModHandReason_Claim
        SWI     XOS_Module              ; Claim block.
        Pull    "PC",VS

        LDR     r0,windows_ptr
        STR     r0,[r2,#next_ptr]
        CMP     r0,#0
        STRGT   r2,[r0,#prev_ptr]
        MOV     r0,#0                   ; link to start of list.
        STR     r0,[r2,#prev_ptr]
        STR     r2,windows_ptr
        MOV     r0,#-1
        STR     r0,[r2,#window_handle]  ; Not created yet
        MOV     r0,#1:SHL:31
        STR     r0,[r2,#window_update]  ; Needs update.
        STR     r0,poll_word            ; Set poll word.
        STR     r1,[r2,#window_fs]      ; FS number
        STR     r5,[r2,#window_namelength] ; length of device ID.

        ADD     r5,r2,#window_block_size
        STR     r5,[r2,#window_device]  ; Device name.

        MOV     r0,r5
        ADR     r4,dataarea
        BL      copy_r0r4_null

        Pull    "PC"                    ; Return.


; ----------------------------------------------------------------------------------------------------------------------
;       Module initialisation point
Init    Entry

      [ standalone
        ADR     r0, resourcefiles
        SWI     XResourceFS_RegisterFiles       ; ignore errors
      ]

        LDR     r2, [r12]
        CMP     r2, #0                  ; clears V
        BNE     %FT01

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #max_running_work
        SWI     XOS_Module
        EXIT    VS

        STR     r2, [r12]

01
        MOV     r12, r2

        MOV     r0, #0
        STR     r0, windows_ptr
        STR     r0, mytaskhandle
        STR     r0, fs_list
        STR     r0, message_fopen

; Claim UpCallV

        MOV     r0,#UpCallV
        ADR     r1,UpCall_handler
        MOV     r2,r12
        SWI     XOS_Claim

; Add entry points that are in this module
        MOV     r2,r12
        ADRL    r0,adfs_entry         ; ADFS
        MOV     r1,#8
        BL      AddEntry
        ADRL    r0,RamFS_entry        ; RamFS
        MOV     r1,#23
        BL      AddEntry
        ADRL    r0,SCSIFS_entry       ; SCSI
        MOV     r1,#26
        BL      AddEntry
        ADRL    r0,NETFS_entry        ; Econet
        MOV     r1,#5
        BL      AddEntry
        ADRL    r0,NFS_entry          ; NFS
        MOV     r1,#33
        BL      AddEntry
        ADRL    r0,PCCardFS_entry     ; PCCardFS Support
        MOV     r1,#89
        BL      AddEntry

; initialise Free$Path if not already done

        ADR     R0, Path
        MOV     R2, #-1
        MOV     R3, #0
        MOV     R4, #VarType_Expanded
        SWI     XOS_ReadVarVal          ; returns R2=0 if doesn't exist
        CMP     R2, #0                  ; clears V as well!

        ADREQ   R0, Path
        ADREQ   R1, PathDefault
        MOVEQ   R2, #?PathDefault
        MOVEQ   R3, #0
        MOVEQ   R4, #VarType_String
        SWIEQ   XOS_SetVarVal

        EXIT

Path            DCB     "Free$$Path"
                DCB     0
PathDefault     DCB     "Resources:$.Resources.Free."
                DCB     0
                ALIGN

; ----------------------------------------------------------------------------------------------------------------------
;       Module service entry point
ServiceTable
        ASSERT  Service_Reset < Service_StartWimp
        ASSERT  Service_StartWimp < Service_StartedWimp
        ASSERT  Service_StartedWimp < Service_MemoryMoved
        ASSERT  Service_MemoryMoved < Service_ResourceFSStarting

        DCD     0
        DCD     ServiceUrsula - Module_BaseAddr
        DCD     Service_Reset
        DCD     Service_StartWimp
        DCD     Service_StartedWimp
        DCD	Service_MemoryMoved
      [ standalone
        DCD     Service_ResourceFSStarting
      ]
        DCD     0
        DCD     ServiceTable - Module_BaseAddr
Service
	MOV	r0,r0			; Ursula
        TEQ     r1, #Service_StartWimp
        TEQNE   r1, #Service_StartedWimp
        TEQNE   r1, #Service_Reset
        TEQNE   r1, #Service_MemoryMoved
      [ standalone
        TEQNE   r1, #Service_ResourceFSStarting
      ]
        MOVNE   pc, lr

ServiceUrsula

        LDR     R12, [R12]

        TEQ     R1,#Service_StartWimp
        BEQ     svc_startwimp

        TEQ     R1,#Service_StartedWimp
        BEQ     svc_startedwimp

        TEQ     R1,#Service_Reset
        BEQ     svc_reset

        TEQ     R1,#Service_MemoryMoved
        BEQ     svc_memorymoved

      [ standalone
        TEQ     R1,#Service_ResourceFSStarting
        BEQ     svc_resourcefsstarting
      ]

        MOV     PC,LR

; ----------------------------------------------------------------------------------------------------------------------
;       Wimp call to ask task to start up. Claimed by setting task_handle to -1, but only if 0 to start with
svc_startwimp Entry

        LDR     r14, mytaskhandle
        TEQ     r14, #0
        MOVEQ   r14, #-1
        STREQ   r14, mytaskhandle
        ADREQL  r0,  Freecommand
        MOVEQ   R1, #0

        EXIT

; ----------------------------------------------------------------------------------------------------------------------
;       Wimp has finished starting the tasks. If task handle=-1 then start up failed, so reset to 0.
svc_startedwimp Entry

;  Test task handle to see if in starting sequence, or if started succesfully
        LDR     r14, mytaskhandle
        CMP     r14, #-1
        MOVEQ   r14, #0                  ; unset flag (so user can retry)
        STREQ   r14, mytaskhandle

        EXIT

        LTORG
; ----------------------------------------------------------------------------------------------------------------------
;       Reset button pressed. Wimp has shut down. Reset task handle to 0. Release linked lists of icons.
svc_reset Entry "r0-r3"

        Debug   xx,"FREE - RESET"

        ADR     r2, windows_ptr
        BL      free_list               ; Free buffered list
        MOV     r0, #0                  ; Clear task handle
        STR     r0, mytaskhandle

; Claim UpCallV
        MOV     r0,#UpCallV
        ADR     r1,UpCall_handler
        MOV     r2,r12
        SWI     XOS_Claim

        EXIT

      [ standalone
; ----------------------------------------------------------------------------------------------------------------------
;       ResourceFS is restarting - we need to re-register our resource files

svc_resourcefsstarting Entry "r0"

        ADR     R0, resourcefiles
        MOV     LR, PC                  ; LR -> return address
        MOV     PC, R2                  ; R2 -> code to call (R3 = workspace ptr)

        EXIT
      ]

; ----------------------------------------------------------------------------------------------------------------------
;      Memory moved , check if RAM disc removed.
svc_memorymoved Entry "r0-r1"

        MOV     r0,#5
        SWI     XOS_ReadDynamicArea

        Debug   xx,"RAM disc size is ",r1

        ADR     r0,windows_ptr
01
        LDR     r0,[r0,#next_ptr]
        CMP     r0,#0
        BEQ     %FT02

        LDR     r14,[r0,#window_fs]
        CMP     r14,#23                 ; RAMFS ?
        BNE     %BT01

        Debug   xx,"RAMFS window found."

        CMP     r1,#0
        MOVEQ   r14,#1 :SHL: 30         ; Mark for delete.
        MOVNE   r14,#1
        STR     r14,[r0,#window_update]
        STR     r14,poll_word
        B       %BT01

02
        EXIT

; ----------------------------------------------------------------------------------------------------------------------
;       RMKill'ing the module
Die     Entry   "r7-r11"

        LDR     r12, [r12]

; Close down the wimp end
        LDR     r0, mytaskhandle
        CMP     r0, #0
        LDRGT   r1, Taskid
        SWIGT   XWimp_CloseDown

; Release UpCallV
        MOV     r0,#UpCallV
        ADR     r1,UpCall_handler
        MOV     r2,r12
        SWI     XOS_Release

; Delete lists of icons
        ADR     r2, windows_ptr
        BL      free_list               ; Free buffered list
        ADR     r2, fs_list
        BL      free_list               ; Free buffered list

; Close messages file
        LDR     r0, message_fopen
        TEQ     r0, #0
        SWINE   XMessageTrans_CloseFile

      [ standalone
; Deregister ResourceFS files
        ADR     r0, resourcefiles
        SWI     XResourceFS_DeregisterFiles
      ]

        CLRV
        EXIT                            ; don't refuse to die

; ----------------------------------------------------------------------------------------------------------------------
; On UpCall 3, mark all related windows as needing update.
UpCall_handler ROUT
        TEQ     r0, #UpCall_ModifyingFile
        MOVNE   pc, lr

        Push    "LR"

 [ {FALSE}
 SWI XOS_WriteI+'?'
 ]

        ; Check for the right modifying file reason
        TEQ     r9, #upfsfile_Save
        TEQNE   r9, #upfsfile_Delete
        TEQNE   r9, #upfsfile_Create
        TEQNE   r9, #upfsfile_CreateDir
        LDRNE   r14, =upfsopen_CreateUpdate
        TEQNE   r9, r14
        LDRNE   r14, =upfsclose
        TEQNE   r9, r14
        TEQNE   r9, #upfsargs_EnsureSize

        Pull    "PC",NE

        ; Reason code's right - save the registers and start looking..
        Push    "r0-r11"
        MOV     r10, sp         ; frame pointer

 [ {FALSE}
 SWI XOS_WriteI+'U'
 TEQ r9,#upfsfile_Save
 SWIEQ XOS_WriteI+'0'
 TEQ r9,#upfsfile_Delete
 SWIEQ XOS_WriteI+'1'
 TEQ r9,#upfsfile_Create
 SWIEQ XOS_WriteI+'1'
 TEQ r9,#upfsfile_CreateDir
 SWIEQ XOS_WriteI+'2'
 TEQ r9,#upfsargs_EnsureSize
 SWIEQ XOS_WriteI+'3'
 LDR r14,=upfsopen_CreateUpdate
 TEQ r9,r14
 SWIEQ XOS_WriteI+'4'
 LDR r14,=upfsclose
 TEQ r9,r14
 SWIEQ XOS_WriteI+'5'
 ]

        ; Close or Ensure size then we want to get the filename for the file
        TEQ     r9, #upfsargs_EnsureSize
        LDRNE   r14, =upfsclose
        TEQNE   r9, r14
        BNE     %FT10

        ; Read buffer size and round up to a word
        MOV     r0, #OSArgs_ReadPath
        MOV     r2, #ARM_CC_Mask
        MOV     r5, #0
        SWI     XOS_Args
        BVS     %FT05
        RSB     r5, r5, #3+1
        BIC     r5, r5, #3
        SUB     sp, sp, r5

        ; Read the filename
        MOV     r0, #OSArgs_ReadPath
        MOV     r2, sp
        SWI     XOS_Args
        BVS     %FT05
        MOV     r1, sp

        ; Skip past the 1st ':' in <FS>::<disc>.$.....
01
        LDRB    r14, [r1], #1
        TEQ     r14, #':'
        BNE     %BT01

10
        AND     r8, r8, #&ff
        MOV     r2, r1

 [ {FALSE}
 MOV r0,r1
 SWI XOS_Write0
 SWI XOS_NewLine
 ]

        ADR     r11, windows_ptr
        B       %FT04

03
        ; If window's fs is right, window hasn't already been marked for update,
        ;       and the window's path matches ours then mark for update
        LDR     r14, [r11,#window_fs]
        CMP     r14, r8
        LDREQ   r14, [r11,#window_update]
        TEQEQ   r14, #0
        LDREQ   r3, [r11, #window_device]
        MOVEQ   r0, #FreeReason_ComparePath
        MOVEQ   r1, r8
        BLEQ    CallEntry
        BVS     %FT05

        ; Match - mark window needing update and set poll_word
        STREQ   r11, [r11, #window_update]
        STREQ   r11, poll_word

04
        LDR     r11, [r11, #next_ptr]
        CMP     r11, #0
        BNE     %BT03
05
        MOV     sp, r10
        Pull    "r0-r11,PC"

; ----------------------------------------------------------------------------------------------------------------------

      [ standalone
resourcefiles
        ResourceFile    LocalRes:Templates, Resources.Free.Templates
        ResourceFile    $MergedMsgs,        Resources.Free.Messages
        DCD     0
      ]

        ALIGN

        LNK     s.StartLoop
@


4.7
log
@Change text formatting to be a single right justified (internationalised) icon.
Delete Doc.doc duplication.
Delete Template2D.
Excess headers removed.
Out of range SWIs returned error 0.
Some symbolic names from ModHand, HighFSI, WimpSpace used.
Fix corrupt error message in set_text due to misplaced Pull.
Uses k for thousands not Kelvins.

Version 0.40. Tagged as 'Free-0_40'
@
text
@d299 1
a299 1
Path            DCB     "Free$Path"
@


4.6
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.36. Tagged as 'Free-0_36'
@
text
@d149 1
a149 1
        MOV     r0,#13
d195 1
a195 1
        MOV     r0,#6
d237 1
a237 1
        MOV     r0, #6
@


4.5
log
@  32-bit compatibility.
Detail:
  Module is 32-bit compatible
  Documentation updated to note that entry point is now called in SVC32.
Admin:
  Tested briefly on Ursula build.

Version 0.34. Tagged as 'Free-0_34'
@
text
@a15 1
        LEADR   Module_LoadAddr
d41 1
a41 5
Helpstr DCB     "Free",9,9,"$Module_MajorVersion ($Module_Date)"
      [ Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
      ]
        DCB     0
d228 1
a228 1
      [ debugmsg
d319 1
a319 1
      [ debugmsg
d330 1
a330 1
      [ debugmsg
d351 1
a351 1
      [ debugmsg
a391 4
      [ Version < 4                     ; Don't forget about Filing systems we know.
        ADR     r2, fs_list
        BL      free_list               ; Free buffered list
      ]
d403 1
a403 1
      [ debugmsg
d476 1
a476 1
      [ debugmsg
d603 1
a603 1
      [ debugmsg
d605 2
a606 2
        ResourceFile    Templates.Templates, Resources.Free.Templates
        ResourceFile    Messages,            Resources.Free.Messages
@


4.4
log
@Merged stack screwup bug fix from ROL branch.
Merged Ursula service call table from ROL branch + added assertions.
Merged 4096B -> 4T bug fix from ROL branch.

Version 0.33. Tagged as 'Free-0_33'
@
text
@d37 3
a41 1
Title   DCB     "Free",0
d48 8
a55 1
                ALIGN
d58 5
d338 1
a338 1
        MOVNES  pc, lr
d410 1
a410 1
        EXITS
d422 1
a422 1
        EXITS
d454 1
a454 1
        EXITS
a484 7
      [ Version < 10
; Release all workspace (dealt with by OS_Module)
        MOV     r2, r12
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
      ]

d491 2
a492 1
        EXITS                           ; don't refuse to die
d498 1
a498 1
        MOVNES  pc, lr
d517 1
a517 1
        Pull    "PC",NE,^
d608 1
a608 1
        Pull    "r0-r11,PC",,^
@


4.3
log
@Merged Ursula branch.
Added Machine header inclusion for new CMOS header.
Moved to srccommit.

Version 0.32. Tagged as 'Free-0_32'
@
text
@d298 17
d316 1
d325 2
@


4.2
log
@Version Spin_merge taken
@
text
@d40 6
a45 1
Helpstr DCB     "Free",9,9,"$VString ($Date)",0
@


4.2.10.1
log
@Commit of third party version of Desktop Free.

Contains bug fix to stop R15 being loaded with a random value in some
  circumstances.
Contains traps for silly space sizes that are obviously incorrect.
Displays 4096G instead of 4T.
Ursula service call handler added.
@
text
@a292 13
ServiceTable

        DCD     0
        DCD     ServiceUrsula - Module_BaseAddr
        DCD     Service_Reset
        DCD     Service_StartWimp
        DCD     Service_StartedWimp
        DCD	Service_MemoryMoved
      [ debugmsg
        DCD     Service_ResourceFSStarting
      ]
        DCD     0
        DCD     ServiceTable - Module_BaseAddr
a293 1
	MOV	r0,r0			; Ursula
a301 2

ServiceUrsula
@


4.1
log
@Initial revision
@
text
@d263 3
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@a262 3
        ADRL    r0,PCCardFS_entry     ; PCCardFS Support
        MOV     r1,#89
        BL      AddEntry
@


4.1.5.1
log
@Import from SrcFiler
@
text
@a262 3
        ADRL    r0,PCCardFS_entry     ; PCCardFS Support
        MOV     r1,#89
        BL      AddEntry
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a262 3
        ADRL    r0,PCCardFS_entry     ; PCCardFS Support
        MOV     r1,#89
        BL      AddEntry
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
