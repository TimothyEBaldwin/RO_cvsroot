head	4.3;
access;
symbols
	RO_5_07:4.3
	FilerSWIs-0_05:4.3
	FilerSWIs-0_04:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2001.03.16.17.08.06;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.15.11.54.28;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.29.44;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.29.44;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.28.38;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.19.08;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.17.28;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.05. Tagged as 'FilerSWIs-0_05'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        TTL     > <wini>.arm.Filer.asm.Filerswis

; 0.00  13-Nov-89  JSR  Started.
; 0.01  20-Nov-89  JSR  Remove development version from module title.
; 0.02  10-Jan-90  JSR  Refer to headers by Hdr: rather than &.Hdr.

        AREA    |FilerSWIs$$Code|, CODE, READONLY, PIC

Module_BaseAddr

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:ModHand
        GET     Hdr:Wimp
        GET     Hdr:WimpSpace
        GET     Hdr:Messages
        GET     Hdr:Proc
        GET     Hdr:FilerAct
        GET     Hdr:MsgTrans

        GET     VersionASM

 ASSERT (.=Module_BaseAddr)

        DCD     0                                       ; No start
        DCD     FilerSWIs_Init          - Module_BaseAddr
        DCD     0                                       ; Dies automagically
        DCD     0                                       ; No services we recognise
        DCD     FilerSWIs_TitleString   - Module_BaseAddr
        DCD     FilerSWIs_HelpString    - Module_BaseAddr
        DCD     0
        DCD     Module_SWISystemBase + FilerSWI * Module_SWIChunkSize  ; SWI chunk base
        DCD     FilerSWIs_SWICode       - Module_BaseAddr
        DCD     FilerSWIs_SWITable      - Module_BaseAddr
        DCD     0                                       ; No SWI decoding code
    [ :LNOT: No32bitCode
        DCD     0
        DCD     FilerSWIs_Flags         - Module_BaseAddr
    ]

FilerSWI_BlockSize      *       256 - ms_data
delete                  *       127
space                   *       32

FilerSWIs_TitleString
        DCB     "FilerSWIs", 0

FilerSWIs_HelpString
        =       "FilerSWIs", 9
        =       "$Module_HelpVersion"
        =       0

FilerSWIs_SWITable
        DCB     "FilerAction", 0
        DCB     "SendSelectedDirectory", 0
        DCB     "SendSelectedFile", 0
        DCB     "SendStartOperation", 0
        DCB     0

        ALIGN

    [ :LNOT: No32bitCode
FilerSWIs_Flags DCD ModuleFlag_32bit
    ]

FilerSWIs_Init  Entry
        ; Claim a block for the accumulated selection, then set it to the null string
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #FilerSWI_BlockSize
        SWI     XOS_Module
        STRVC   r2, [r12]
        MOVVC   r0, #0
        STRVCB  r0, [r2]
        EXIT

FilerSWIs_SWICode
        CMP     r11, #SWITableSize :SHR: 2
        ADDLO   pc, pc, r11, LSL #2
        B       SWIIsBad
        ; The branch table for the SWIs
SWITableStart
        B       FilerSWI_SendSelectedDirectory
        B       FilerSWI_SendSelectedFile
        B       FilerSWI_SendStartOperation
SWITableEnd
SWITableSize    *       SWITableEnd - SWITableStart

SWIIsBad Entry "r1-r7"
        ADR     r0, ErrorBlock_ModuleBadSWI
        ADR     r4, FilerSWIs_TitleString
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        MOV     r1, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

        MakeInternatErrorBlock ModuleBadSWI,,BadSWI
        ALIGN

        LTORG

FilerSWI_SendSelectedDirectory Entry "r0-r3", 256

        ; Copy dirname into message structure on stack
        MOV     r2, r1
        ADD     r1, sp, #ms_data
        BL      strcpy

        ; Get its length
        BL      strlen

        ; Evaluate the whole structure's length, rounded up to a word
        ADD     r3, r3, #ms_data + 1
        ADD     r3, r3, #3
        BIC     r3, r3, #3
        STR     r3, [sp, #ms_size]

        ; Initialise the other fields
        MOV     r3, #0
        STR     r3, [sp, #ms_yourref]
        LDR     r3, =Message_FilerSelectionDirectory
        STR     r3, [sp, #ms_action]

        ; Send the message
        MOV     r2, r0
        MOV     r1, sp
        MOV     r0, #17
        SWI     XWimp_SendMessage
        STRVS   r0, [sp, #256+0*4]
        EXIT

; accumulate a filename
FilerSWI_SendSelectedFile Entry "r0-r3"

        ; Get to workspace
        LDR     r12, [r12]

        ; How much have we accumulated so far?
        MOV     r1, r12
        BL      strlen
        MOV     r2, r3

        ; Add the length of the new selection, a spaces separator and the nul terminator
        LDR     r1, [sp, #1*4]
        BL      strlen
        ADD     r2, r2, r3
        ADD     r2, r2, #1+1            ; 1 for the space and 1 for the terminator

        ; If that overflows the buffer, then flush it
        CMP     r2, #FilerSWI_BlockSize
        BLS     %FT10
        BL      flush_selection
        STRVS   r0, [sp]
        EXIT    VS

10      ; The buffer is now guaranteed to hold the new selection

        ; Find out how far to go to place the selection
        MOV     r1, r12
        BL      strlen
        ADD     r1, r12, r3

        ; Add a space seperator on all but the first
        TEQ     r3, #0
        MOVNE   r2, #" "
        STRNEB  r2, [r1], #1

        ; Copy the string into the buffer
        LDR     r2, [sp, #1*4]
        BL      strcpy

        ; All done
        EXIT

;
; flush the accumulated filenames
; r12 points to selection
; r0 is handle to send selection to
flush_selection Entry "r0-r3", 256

        ; Copy the selection to ms_data
        MOV     r2, r12
        ADD     r1, sp, #ms_data
        BL      strcpy

        ; Evaluate the size and store it
        BL      strlen
        ADD     r3, r3, #ms_data + 1
        ADD     r3, r3, #3
        BIC     r3, r3, #3
        STR     r3, [sp, #ms_size]

        ; Fill in the other fields
        MOV     r3, #0
        STR     r3, [sp, #ms_yourref]
        LDR     r3, =Message_FilerAddSelection
        STR     r3, [sp, #ms_action]

        ; Send the message
        MOV     r2, r0
        MOV     r1, sp
        MOV     r0, #17
        SWI     XWimp_SendMessage
        STRVS   r0, [sp, #256+0*4]

        ; Zero the selection if all went well
        MOVVC   r0, #0
        STRVCB  r0, [r12]

        ; All done
        EXIT



FilerSWI_SendStartOperation Entry "r0-r3", 256

        ; Get to workspace
        LDR     r12, [r12]

        ; Flush any buffered selection
        BL      flush_selection
        STRVS   r0, [sp, #256+0*4]
        EXIT    VS

        ; Store the action
        STR     r1, [sp, #ms_data]

        ; Store the options
        STR     r2, [sp, #ms_data + 4]

        ; Store the auxilliary data
        MOV     r2, r3
        MOV     r3, r4
        ADD     r1, sp, #ms_data + 8
        BL      memcpy

        ; Evaluate the length and store it
        ADD     r3, r3, #ms_data + 8
        ADD     r3, r3, #3
        BIC     r3, r3, #3
        STR     r3, [sp, #ms_size]

        ; Fill in the rest of the fields
        MOV     r3, #0
        STR     r3, [sp, #ms_yourref]
        LDR     r3, =Message_FilerAction
        STR     r3, [sp, #ms_action]

        ; Send the message
        MOV     r2, r0
        MOV     r1, sp
        MOV     r0, #17
        SWI     XWimp_SendMessage
        STRVS   r0, [sp, #256+0*4]

        ; All done
        EXIT

; .............................................................................
;
; memcpy
; ======
;
; Copy a string and terminate with 0

; In    r1 -> dest area
;       r2 -> src area
;       r3 = length to copy

memcpy Entry "r1-r3"

        MOVS    r3, r3
        B       %FT20

10      LDRB    r14, [r2], #1           ; Copy from *r2++
        STRB    r14, [r1], #1           ; Copy to *r1++
        SUBS    r3, r3, #1
20      BNE     %BT10

        EXIT

; .............................................................................
;
; strcpy
; ======
;
; Copy a string and terminate with 0

; In    r1 -> dest area
;       r2 -> CtrlChar/r3 terminated src string

strcpy Entry "r1-r2"

10      LDRB    r14, [r2], #1           ; Copy from *r2++
        CMP     r14, #delete            ; Order, you git!
        CMPNE   r14, #space-1           ; Any char < space terminates copy
        MOVLS   r14, #0                 ; Terminate dst with 0
        STRB    r14, [r1], #1           ; Copy to *r1++
        BHI     %BT10

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strlen
; ======
;
; Find the length of a string (exclusive of terminator, so can't HeapGet (0))

; In    r1 -> CtrlChar terminated string

; Out   r3 = number of chars (can be used as size for Heap)

strlen Entry

        MOV     r3, #0
10      LDRB    r14, [r1, r3]
        CMP     r14, #delete            ; Order, you git! EQ -> ~HI
        CMPNE   r14, #space-1           ; CtrlChar, delete
        ADDHI   r3, r3, #1
        BHI     %BT10
        EXIT

        END
@


4.2
log
@32-bit compatible

Version 0.04. Tagged as 'FilerSWIs-0_04'
@
text
@d21 2
a39 2
        LEADR   Module_LoadAddr

d67 1
a67 4
        =       "$Module_MajorVersion ($Module_Date)"
    [ Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
    ]
d83 1
a83 1
FilerSWIs_Init  ENTRY
d120 1
a120 1
FilerSWI_SendSelectedDirectory ENTRY "r0-r3", 256
d151 1
a151 1
FilerSWI_SendSelectedFile ENTRY "r0-r3"
d197 1
a197 1
flush_selection ENTRY "r0-r3", 256
d233 1
a233 1
FilerSWI_SendStartOperation ENTRY "r0-r3", 256
d288 1
a288 1
memcpy ENTRY "r1-r3"
d310 1
a310 1
strcpy ENTRY "r1-r2"
d332 1
a332 1
strlen ENTRY
@


4.1
log
@Initial revision
@
text
@d36 1
a36 1
        GET     Version
d53 4
d67 4
a70 1
        =       version," (",date,")"
d82 4
d194 1
a194 1
        EXITS
d301 1
a301 1
        EXITS
d322 1
a322 1
        EXITS
d343 1
a343 1
        EXITS
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
