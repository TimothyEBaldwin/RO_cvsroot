head	1.1;
access;
symbols
	Wimp-4_66-4_77_2_1:1.1.2.1
	bavison_Threads_dev:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2007.10.07.02.17.29;	author bavison;	state dead;
branches
	1.1.2.1;
next	;
commitid	NSavcPvbNd36pBAs;

1.1.2.1
date	2007.10.07.02.17.29;	author bavison;	state Exp;
branches;
next	;
commitid	NSavcPvbNd36pBAs;


desc
@@


1.1
log
@file otest was initially added on branch bavison_Threads_dev.
@
text
@@


1.1.2.1
log
@  Added Dan Ellis's multithreading support, on a development branch for now.
Detail:
  This breaks the equivalence between tasks and AMB slots, allowing many
  threads of execution to share the same AMB slot, where an application's
  heap is usually located. In API terms, it is presented as an extension to
  Wimp_StartTask, see Docs/Multithreading for more information. It is the
  caller's responsibility to create a new stack chunk for the new thread if
  required. Note that BASIC's variable storage model is fundamentally
  unsuited for multithreading.
Admin:
  This was developed in 2001 and was not committed at the time due to lack
  of testing and peer review. It is now being added as a branch from a
  contemporary trunk Wimp. Hopefully somebody will be interested enough to
  merge the branch into a recent version!

Version 4.66, 4.77.2.1. Tagged as 'Wimp-4_66-4_77_2_1'
@
text
@a0 95
; Copyright 2007 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:Wimp

        AREA    |C$$CODE|, CODE

        ENTRY

;        SWI     OS_WriteS
;      =       "Entered test...", 10, 13, 0

        MOV     R0, #400
        LDR     R1, task
        ADR     R2, name
        ADR     R4, messages
        SWI     Wimp_Initialise

        MOV     R0, #0
        SWI     Wimp_StartTask
        CMP     R0, #-1
;        SWIEQ     OS_Exit
        BEQ     thread

;        SWI     OS_Exit
        LDR     R0, =(0:OR:(1:SHL:17):OR:(1:SHL:18))
;        MOV     R0, #0
        MOV     R1, #&9000
        MOV     R5, #10
10
        SWI     OS_ReadMonotonicTime
        ADD     R2, R0, #400
        LDR     R0, =(0:OR:(1:SHL:17):OR:(1:SHL:18))
        SWI     Wimp_PollIdle
        SUBS    R5, R5, #1
        BHS       %b10
        SWI     OS_Exit

thread
        MOV     R1, #0              ; Not TASK
        SWI     Wimp_CloseDown

        ADR     r0, taskwindow
        SWI     OS_CLI

        MOV     R0, #400
        LDR     R1, task
        ADR     R2, name2
        ADR     R4, messages
        SWI     Wimp_Initialise

        LDR     R0, =(1:OR:(1:SHL:17):OR:(1:SHL:18))
        MOV     R1, #&a000
        MOV     R5, #10
10
        SWI     Wimp_Poll
        SUBS    R5, R5, #1
        BHS     %b10
        SWI     OS_Exit

name
        =   "Test thread", 0

name2
        =   "New thread", 0

        ALIGN
task
        =   "TASK"

        ALIGN
taskwindow
        =   "TaskWindow -display -ctrl -name ""New Thread""", 0
        ALIGN

messages
        DCD     0

        END
@

