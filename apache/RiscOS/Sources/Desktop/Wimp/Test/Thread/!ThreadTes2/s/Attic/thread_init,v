head	1.1;
access;
symbols
	Wimp-4_66-4_77_2_1:1.1.2.1
	bavison_Threads_dev:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2007.10.07.02.17.29;	author bavison;	state dead;
branches
	1.1.2.1;
next	;
commitid	NSavcPvbNd36pBAs;

1.1.2.1
date	2007.10.07.02.17.29;	author bavison;	state Exp;
branches;
next	;
commitid	NSavcPvbNd36pBAs;


desc
@@


1.1
log
@file thread_init was initially added on branch bavison_Threads_dev.
@
text
@@


1.1.2.1
log
@  Added Dan Ellis's multithreading support, on a development branch for now.
Detail:
  This breaks the equivalence between tasks and AMB slots, allowing many
  threads of execution to share the same AMB slot, where an application's
  heap is usually located. In API terms, it is presented as an extension to
  Wimp_StartTask, see Docs/Multithreading for more information. It is the
  caller's responsibility to create a new stack chunk for the new thread if
  required. Note that BASIC's variable storage model is fundamentally
  unsuited for multithreading.
Admin:
  This was developed in 2001 and was not committed at the time due to lack
  of testing and peer review. It is now being added as a branch from a
  contemporary trunk Wimp. Hopefully somebody will be interested enough to
  merge the branch into a recent version!

Version 4.66, 4.77.2.1. Tagged as 'Wimp-4_66-4_77_2_1'
@
text
@a0 86
; Copyright 2007 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ModHand
        GET     Hdr:Wimp

        AREA    |THREAD$$CODE|, CODE

; Stack chunks
                ^       0
SC_mark         #       4
SC_next         #       4
SC_prev         #       4
SC_size         #       4
SC_deallocate   #       4
SC_LibOffset    #       4
SC_ClientOffset #       4
SC_veneerStaticLink #   4
SC_veneerStkexLink  #   4
SC_DescSize     #       0

SC_SLOffset     *       560

        IMPORT  free

taskwindow  =  "Taskwindow", 0
        ALIGN

        EXPORT  enter_taskwindow
enter_taskwindow
        Push    "r0"
        MOV     r0, #ModHandReason_LookupName
        ADR     r1, taskwindow
        SWI     OS_Module
        Pull    "r0"
        Push    "r4"
        MOV     r12, sp
        LDR     r1, [r3]
        ADD     pc, r3, r1

        EXPORT  thread_init
thread_init
        SWI     OS_GetEnv
        ADD     r1, r0, #4
        MOV     r0, #0
        SWI     OS_ReadUnsigned
        ADD     sl, r2, #SC_SLOffset
        LDR     r0, [r2, #SC_size]
        ADD     sp, r2, r0
        MOV     lr, pc
        LDR     pc, [sp, #-4]
        SUB     r0, sl, #560
        BL      free
        SWI     OS_Exit

block   %       256

        EXPORT  exit_handler
exit_handler
        ADR     r1, block
        SWI     XWimp_Poll
        SWI     OS_Exit

; claim the vector
        EXPORT  upcall_handler
upcall_handler
        MOV     pc, lr
        LDMFD   sp!, {pc}

        END
@

