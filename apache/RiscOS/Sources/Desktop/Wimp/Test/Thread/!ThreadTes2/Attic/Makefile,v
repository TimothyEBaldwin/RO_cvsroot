head	1.1;
access;
symbols
	Wimp-4_66-4_77_2_1:1.1.2.1
	bavison_Threads_dev:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2007.10.07.02.17.29;	author bavison;	state dead;
branches
	1.1.2.1;
next	;
commitid	NSavcPvbNd36pBAs;

1.1.2.1
date	2007.10.07.02.17.29;	author bavison;	state Exp;
branches;
next	;
commitid	NSavcPvbNd36pBAs;


desc
@@


1.1
log
@file Makefile was initially added on branch bavison_Threads_dev.
@
text
@@


1.1.2.1
log
@  Added Dan Ellis's multithreading support, on a development branch for now.
Detail:
  This breaks the equivalence between tasks and AMB slots, allowing many
  threads of execution to share the same AMB slot, where an application's
  heap is usually located. In API terms, it is presented as an extension to
  Wimp_StartTask, see Docs/Multithreading for more information. It is the
  caller's responsibility to create a new stack chunk for the new thread if
  required. Note that BASIC's variable storage model is fundamentally
  unsuited for multithreading.
Admin:
  This was developed in 2001 and was not committed at the time due to lack
  of testing and peer review. It is now being added as a branch from a
  contemporary trunk Wimp. Hopefully somebody will be interested enough to
  merge the branch into a recent version!

Version 4.66, 4.77.2.1. Tagged as 'Wimp-4_66-4_77_2_1'
@
text
@a0 81
# Copyright 2007 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Makefile

#
# Standard makefile elements
#
COMPONENT = !RunImage
TARGET    = ${COMPONENT}
DIRS      = o._dirs
OBJS      = o.thread_init o.start_thread o.test
BASE_LIBS = ${CLIB} ${TBOXLIBS} ${DEBUGLIB} ${NET5LIBS} ${CALLXLIB}
LIBS      = ${BASE_LIBS}

include StdTools
include AppStdRule
include AppLibs

#
# Debug targets
#
AIFDBG = aif.${COMPONENT}
GPADBG = gpa.${COMPONENT}

CFLAGS    += -throwback -g
CINCLUDES = -Itbox:,C:,tcpiplibs:
ASFLAGS   += -G
CDEFINES  += ${DEBUG}

all: ${TARGET}
        @@${ECHO} ${COMPONENT}: app built

#
# Actually make the linked RAM target 
#
${TARGET}: ${OBJS} ${LIBS} ${CLIB} ${DIRS} ${RAM_DEPEND}
        ${LD} ${LDFLAGS} ${LDRAMFLAGS} -o $@@ ${OBJS} ${LIBS}
        ${CHMOD} -R a+rx rm


${AIFDBG}: ${OBJS} ${LIBS} ${DIRS}
        link -base 0 -aif -bin -d -o $@@ ${OBJS} ${LIBS}

${GPADBG}: ${AIFDBG}
        togpa ${AIFDBG} $@@

exception: ${GPADBG}
        unmodsqz ${RAM_MODULE}
        @@find_error ${COMPONENT}

clean:
        ${WIPE} o ${WFLAGS}
        ${WIPE} aif ${WFLAGS}
        ${WIPE} gpa ${WFLAGS}
        stripdepnd

o._dirs:
        ${MKDIR} o
        ${MKDIR} h
        ${MKDIR} gpa
        ${MKDIR} aif
        ${TOUCH} o._dirs

riscos.o:   modhead.h

# Dynamic dependencies:
o.thread_init: s.thread_init Hdr:ListOpts Hdr:Macros Hdr:System Hdr:SWIs Hdr:CPU.Generic26 Hdr:Machine.<Machine> Hdr:Machine.Machine Hdr:CPU.Generic32 Hdr:IO.GenericIO Hdr:RISCOS Hdr:Machine.<Machine> Hdr:Machine.Machine Hdr:ModHand Hdr:Wimp
o.start_thread: c.start_thread C:h.kernel tbox:h.wimplib tbox:h.wimp C:h.stdlib C:h.swis C:Global.h.EnvNumbers
o.test: c.test C:h.kernel C:h.swis tbox:h.wimplib tbox:h.wimp tbox:h.toolbox tbox:h.event tbox:h.gadgets tcpiplibs:h.unixlib h.Taskwindow C:DebugLib.h.DebugLib C:debug.h.remote
@

