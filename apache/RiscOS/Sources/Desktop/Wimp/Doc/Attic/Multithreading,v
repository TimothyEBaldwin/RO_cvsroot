head	1.1;
access;
symbols
	Wimp-4_66-4_77_2_1:1.1.2.1
	bavison_Threads_dev:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2007.10.07.02.17.28;	author bavison;	state dead;
branches
	1.1.2.1;
next	;
commitid	NSavcPvbNd36pBAs;

1.1.2.1
date	2007.10.07.02.17.28;	author bavison;	state Exp;
branches;
next	;
commitid	NSavcPvbNd36pBAs;


desc
@@


1.1
log
@file Multithreading was initially added on branch bavison_Threads_dev.
@
text
@@


1.1.2.1
log
@  Added Dan Ellis's multithreading support, on a development branch for now.
Detail:
  This breaks the equivalence between tasks and AMB slots, allowing many
  threads of execution to share the same AMB slot, where an application's
  heap is usually located. In API terms, it is presented as an extension to
  Wimp_StartTask, see Docs/Multithreading for more information. It is the
  caller's responsibility to create a new stack chunk for the new thread if
  required. Note that BASIC's variable storage model is fundamentally
  unsuited for multithreading.
Admin:
  This was developed in 2001 and was not committed at the time due to lack
  of testing and peer review. It is now being added as a branch from a
  contemporary trunk Wimp. Hopefully somebody will be interested enough to
  merge the branch into a recent version!

Version 4.66, 4.77.2.1. Tagged as 'Wimp-4_66-4_77_2_1'
@
text
@a0 74
Daniel Ellis Fri 10th August 2001

                       Multi-threading in the Wimp
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~

Introduction
~~~~~~~~~~~~

Many software tasks are made easier by being modelled as multiple threads of
execution each dedicated to their own task, especially if each thread can
indepentantly block on system events.  This can be achieved in Wimps up to
version 4 only by starting an entirely different process, and communicating
via Wimp_TransferBlock and Wimp_Messages.  This is not always sufficient,
especially for porting 3rd party software.

In principle starting a new thread is the same as starting a new process,
except that the memory isn't paged out, and no new memory needs paging in. 
The only complication being that the memory needs reference counting so that
it doesn't get released multiple times when each thread exits.


Issues
~~~~~~

Starting a thread is done via Wimp_StartTask.  However, since we are in the
same address space, the notion of a task has to change.  Existing tasks each
have their own AMBControl block, this has to be abstracted to an application
pointer, a structure which contains the AMBControl block, and a reference
count for the number of tasks using it.

Wherever, previously a task_slotptr was referred to, now that pointer must
be dereferenced and a, app_slotptr referred to instead.

API
~~~

The suggested mechanism for starting a new thread is via Wimp_StartTask, as
this almost does what's needed already.  Normally Wimp_StartTask takes as a
parameter a pointer to a string which is passed to OSCLI in the new wimp slot
allocated.  The new variant is:

SWI Wimp_StartTask

In:
   R0 = 0 (Start thread)
   
Out:
   R0 = 0 if thread has exited,
        task handle of thread if it has called wimp poll
        -1 if we are the thread.

Use:
   This call is used to start a new thread of execution within the same
address space as the current application.  It returns twice, once for the
parent and once for the child.


SWI TaskWindow_Initialise

In:
   R0 = pointer to name of thread
Out:
   R0 = 0 if thread has exited,
   	handle of new thread if it is still alive
   	-1 if we are the thread
Use:
   This call starts up the taskwindow module in the current address space. 
It calls Wimp_StartTask 0 and Wimp_Initialise on the callers behalf.


Future enhancements

It has been proposed that the Message_TaskInitialise mechanism is extended
so that the Task Manager can display threads distinctly from applications.
@

