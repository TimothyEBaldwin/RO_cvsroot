head	4.7;
access;
symbols
	Wimp-5_62:4.7
	Wimp-5_61:4.7
	Wimp-5_60:4.7
	Wimp-5_59:4.7
	Wimp-5_58:4.7
	Wimp-5_57:4.7
	Wimp-5_56:4.7
	Wimp-5_55:4.7
	Wimp-5_54:4.7
	Wimp-5_53:4.7
	Wimp-5_52:4.7
	Wimp-5_51:4.7
	Wimp-5_50:4.7
	Wimp-5_49:4.7
	Wimp-5_48:4.7
	Wimp-5_47-file1ad:4.7
	Wimp-5_47:4.7
	Wimp-5_46:4.7
	Wimp-5_45:4.7
	Wimp-5_44:4.7
	Wimp-5_43:4.7
	Wimp-5_42:4.7
	Wimp-5_41:4.7
	Wimp-5_40:4.6
	Wimp-5_39:4.6
	Wimp-5_38:4.6
	Wimp-5_37:4.6
	Wimp-5_36:4.5
	Wimp-5_35:4.4
	Wimp-5_34:4.4
	Wimp-5_33:4.4
	Wimp-5_32:4.4
	Wimp-5_31:4.3
	Wimp-5_30:4.2
	Wimp-530-pre4:4.2
	Wimp-5_30-pre3:4.2
	Wimp-5_30-pre2:4.2
	Wimp-5_30-pre1:4.2
	Wimp-5_29:4.2
	Wimp-5_28:4.2
	Wimp-5_27:4.2
	Wimp-5_26:4.2
	Wimp-5_25:4.2
	Wimp-5_24:4.2
	Wimp-5_23:4.2
	Wimp-5_22:4.2
	Wimp-5_21:4.2
	Wimp-5_20:4.2
	Wimp-5_19:4.1
	Wimp-5_18:4.1
	Wimp-5_17:4.1
	Wimp-5_16:4.1
	Wimp-5_15:4.1
	Wimp-5_14:4.1
	Wimp-5_13:4.1
	Wimp-5_12:4.1
	Wimp-5_11:4.1
	Wimp-5_10:4.1
	Wimp-5_09:4.1
	Wimp-5_08:4.1
	Wimp-5_07:4.1
	Wimp-5_06:4.1
	Wimp-5_05:4.1
	Wimp-5_04:4.1
	Wimp-5_03:4.1
	Wimp-5_02:4.1
	Wimp-5_01:4.1
	Wimp-5_00:4.1
	Wimp-4_100:4.1
	Wimp-4_99:4.1
	Wimp-4_98:4.1
	Wimp-4_97:4.1
	Wimp-4_96:4.1
	Wimp-4_95:4.1
	Wimp-4_94:4.1
	RO_5_07:4.1
	Wimp-4_93:4.1
	Wimp-4_92:4.1
	Wimp-4_91:4.1
	Wimp-4_90:4.1
	Wimp-4_89:4.1
	Wimp-4_88:4.1
	Wimp-4_87:4.1
	Wimp-4_86:4.1
	Wimp-4_85:4.1
	Wimp-4_84:4.1
	Wimp-4_83:4.1
	Wimp-4_82:4.1
	Wimp-4_81:4.1
	Wimp-4_80:4.1
	Wimp-4_79:4.1
	Wimp-4_78:4.1;
locks; strict;
comment	@# @;


4.7
date	2014.04.19.09.39.22;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	wEWgncfqw43A9hxx;

4.6
date	2014.03.09.17.39.42;	author jlee;	state Exp;
branches;
next	4.5;
commitid	jtr40bk3ymV683sx;

4.5
date	2014.03.01.22.42.58;	author jlee;	state Exp;
branches;
next	4.4;
commitid	KQ4bwdJetbz443rx;

4.4
date	2013.09.08.18.53.28;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	46q23XZLtAc5oF4x;

4.3
date	2013.08.06.23.31.42;	author jlee;	state Exp;
branches;
next	4.2;
commitid	UbPZokvIlfdkZr0x;

4.2
date	2013.03.28.08.07.32;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	6IoKYZf9tBXk5xJw;

4.1
date	2002.10.30.17.43.54;	author bavison;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Fix for missing window backgrounds/scroll bars when tiled sprite op not supported
For the backgrounds, the code was switched with 'standalone' however the Wimp actively wipes SA_FLAGS in its makefile so the standalone switch is always false during the install phase of a disc build. Also, the standalone switch is used to include resources which are ordinarily handled by the boot sequence prefixing the WindowManager$Path rather than using ResourceFS.
For the scroll bars, the decision to plot manually was being made by looking at the V flag on return from Tool_SpriteOp, except that that function uses EntryS/EXITS so the caller can't see the return flags.
Added new switch CanTileManually, removed 0 use tilewithspriteops switch.
Changed single use of NoFontBodge switch to use preferred 'outlinefont'.
Tested on RISC OS 4.02.

Version 5.41. Tagged as 'Wimp-5_41'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
; MB 23/3/98
; Complete reimplementation of tiling code based on 3DPatch sources
;

;-------------------------------------------------------------------------------
;			  Window background drawing code
;-------------------------------------------------------------------------------

		DCB	"MIB",0

; this is a 'signed' division macro

        MACRO
$lab    DivRemS $ra,$rb,$rc,$tmp
$lab    CMP     $rb,#0
        BLT     %FT2
        DivRem  $ra,$rb,$rc,$tmp
        B       %FT4
2       RSB     $rb,$rb,#0
        DivRem  $ra,$rb,$rc,$tmp
        RSB     $rb,$rb,#0
        ; modulus should be -ve if divisor is -ve
4
        MEND

; plotspritebackground
;
; plot the textured background in a window
;
;	 on entry : 	r0 = window background colour
;	 		r6-r9 = window visible area coords
;	 		r10 = internal window block pointer
;
;	on exit:	all regs preserved
;
		ROUT
plotspritebackground
		Push	"r0-r5,lr"

		Debug	tiling,"Enterring plotspritebackground",r0,r6,r7,r8,r9,r10

		cmp	r0,#15
		bhi	%FT02

	[ TrueIcon3
		ldrb	r14,[handle,#w_flags2]		; if using true colours for window backgrounds and this window has a custom
		tst	r14,#wf2_truecolour		; background colour then don't plot a tile, just clear the background
		bne	%FT02
	]
		mov	r5,r0				; r5 = window bg colour

		ldr	r0,[handle,#w_taskhandle]
		cmp	r0,#-1				; if the current window is a menu
		bne	%FT01

		ldr	r1,ThreeDFlags
		tst	r1,#ThreeDFlags_TexturedMenus	; check if menu textures are enabled
		beq	%FT02
		tst	r1,#ThreeDFlags_UseAlternateMenuTexture ; then check which texture to use
		movne	r5,#16
		moveq	r5,#1

01
		Debug	tiling,"Calling TileWindowBackground"
		bl	TileWindowBackground
;		Debug	tiling,"Calling PlotWindowBorders"
;		bl	PlotWindowBorders

		Pull	"r0-r5,PC"

02
		swi	OS_WriteI + 16
		Pull	"r0-r5,PC"

ploticonbackgroundsprite
		Push	"r0-y1,lr"

		ldr	x0,thisCBptr
		ldr	y0,spritename
		ldr	x1,lengthflags
		Push	"x0-x1"

		adr	r14,clipx0
		ldmia	r14,{x0-y1}
		Push	"x0-y1"			; save the current clipping rectangle

		CMP	x0,cx0
		MOVLT	x0,cx0
		CMP	y0,cy0
		MOVLT	y0,cy0
		CMP	x1,cx1
		MOVGT	x1,cx1
		CMP	y1,cy1
		MOVGT	y1,cy1

		CMP	x0,x1
		CMPLT	y0,y1
		ADDGE	sp,sp,#7*4
		Pull	"r0-y1,pc",GE

		Debug	tiling,"In ploticonbackgroundsprite, about to set graphics window to : ",x0,y0,x1,y1
		BL	graphicswindow

		LDRB	r0,[handle,#w_wbcol]

		ADD	r14,handle,#w_wax0
		LDMIA	r14,{x0-y1}

		SWI	OS_WriteI + 16
		BL	plotspritebackground

		Pull	"x0-y1"
		BL	graphicswindow

		Pull	"x0-x1"
		str	x0,thisCBptr
		str	y0,spritename
		str	x1,lengthflags

		Pull	"r0-y1,pc"

tile_1		DCB	"tile_1",0
		ALIGN

TileWindowBackground
		ROUT
		Push	"r6-r11,lr"

		ldr	r1,[handle,#w_areaCBptr]
		cmp	r1,#2
		blo	%FT00

		teq	r5,#sc_verylightgrey
		bne	%FT00

		adr	r2,tile_1
		mov	r0,#SpriteReason_SelectSprite :OR: 256
		swi	XOS_SpriteOp
		bvs	%FT00

		adrl	r8,temp_tile_sprite
		bl	get_tile_sprite_info
		bvs	%FT00

		Debug	tiling,"Calling tile_sprite_fill_area"
		bl	tile_sprite_fill_area

		ldr	r2,[r8,#TileInfo_TranslationTablePtr]
		cmp	r2,#0
		movne	r0,#ModHandReason_Free
		blne	XROS_Module
		mov	r2,#0
		str	r2,[r8,#TileInfo_TranslationTablePtr]

		CLRV
		Pull	"r6-r11,PC"

00		adrl	r8,tile_sprites
		ASSERT	TileInfo = 36
		add	r0,r5,r5,LSL #3
		mov	r0,r0,LSL #2			; r0 = r5 * sizeof(TileInfo)
		add	r8,r8,r0			; r8 = ptr to correct sprite info block

		bl	get_tile_sprite			; r8 = ptr to filled in sprite info block

		blvc	tile_sprite_fill_area

   		Pull	"r6-r11,PC",VC

01		swi	XOS_WriteI + 16			; clear the screen
		CLRV
		Pull	"r6-r11,PC"

PlotWindowBorders
		ROUT
;		 on entry: r6-r9 = window visible area
;		 	     r10 = internal window block pointer
		ROUT
		Push	"r3-r5,x0-y1,lr"

		ldr	r14,ThreeDFlags
		tst	r14,#ThreeDFlags_Use3DBorders
		Pull	"r3-r5,x0-y1,pc",EQ

		ldrb	r5,[handle,#w_wbcol]

		ldr	r3,truefacecolour
		ldr	r4,trueoppcolour
		Push	"r3,r4"

		ldr	r3,iconbarhandle
		Abs	r3,r3			; convert to internal block pointer
		teq	r3,handle
		beq	%FT01

		ldr	r3,[handle,#w_taskhandle]	; check for menu
		cmp	r3,#-1
		bne	%FT04

		tst	r14,#ThreeDFlags_UseAlternateMenuTexture ; see if we need to use the window border colours or the menu colours
		beq	%FT03

		ldr	r3,truemenuborderfacecolour		; set up the menu border colours
		ldr	r4,truemenuborderoppcolour
		str	r3,truefacecolour
		str	r4,trueoppcolour
		b	%FT00

04		teq	r5,#1					; check if this window needs a border
		bne	%FT02

		ldrb	r14,[handle,#w_flags2]
		and	r14,r14,#wf2_no3Dborder :OR: wf2_force3Dborder
		teq	r14,#wf2_no3Dborder
		beq	%FT02
		teq	r14,#wf2_force3Dborder
		beq	%FT03

		ldr	r14,[handle,#w_flags]
		tst	r14,#&70000000
		tsteq	r14,#&00000020
 [ No3DChildWindows
		ldreq	r14,[handle,#w_parent]
		cmpeq	r14,#-1				; check if it's a top level window
 ]
		bne	%FT02

03		ldr	r3,truewindowborderfacecolour	; set up the window borders colours
		ldr	r4,truewindowborderoppcolour
		str	r3,truefacecolour
		str	r4,trueoppcolour

00		bl	plot_slabout

		ldr	r0,truefgcolour
		cmp	r0,#-1
		beq	%FT02
		ldr	r3,ditheringflag
		mov	r4,#0
		swi	XColourTrans_SetGCOL		; put the forground colour back the way it was before we plotted the border
02
		Pull	"r3,r4"
		str	r3,truefacecolour
		str	r5,trueoppcolour

		Pull	"r3-r5,x0-y1,pc"

01		tst	r14,#ThreeDFlags_Fully3DIconBar
		subeq	x0,x0,#16		; move the ends off the screen
		addeq	x1,x1,#16		; not the best way to do it, but the smallest...
		b	%BT03

write_tile_sprite_name_bpp
		; on entry: r5 = bpp to add to the end of the sprite name
		;	    r7 = ptr to end of base sprite name
		;  on exit: string updated to add bpp to end
		ROUT
		Push	"r0-r2,lr"
		mov	r1,r7
		mov	r0,#'-'
		strb	r0,[r1],#1
		mov	r0,r5
		cmp	r0,#16
		movhi	r2,#'3'
		movhi	r0,#2
		moveq	r2,#'1'
		moveq	r0,#6
		strhsb	r2,[r1],#1
		add	r0,r0,#'0'
		strb	r0,[r1],#1
		mov	r0,#0
		strb	r0,[r1,#0]
		Pull	"r0-r2,pc"

tile		DCB	"tile"

get_base_tile_sprite_name
		ROUT
		; on entry: r5 = window bg colour
		;	    r6 = ptr to memory block to put sprite name in
		;  on exit: memory at sp updated to contain the sprite name
		;	    r7 = ptr to terminating NUL
		Push	"r0,lr"
		mov	r7,r6				; r7 = ptr to memory to hold name
		ldr	r0,tile
		str	r0,[r7],#4
		mov	r0,#'_'
		strb	r0,[r7],#1			; now contains 'tile_

		teq	r5,#16
		moveq	r0,#'m'
		streqb	r0,[r7],#1
		beq	%F00				; it's a menu, so now 'tile_m'

		cmp	r5,#10
		movhs	r0,#'1'
		strhsb	r0,[r7],#1			; >= to 10 so put in the 1 'tile_1'
		addhs	r0,r5,#'0'-10			; and set r0 to the second character of the number
		addlo	r0,r5,#'0'			; else r0 = the single digit number
		strb	r0,[r7],#1

00		mov	r0,#0				; finished, so terminate the name
		strb	r0,[r7,#0]

		Pull	"r0,pc"

get_tile_sprite_info
;	on entry:	r1 = sprite area pointer
;			r2 = sprite pointer
;			r8 = ptr to tile info block
;	one exit:       block at r8 filled in
;                       or V set for error
		Push	"r0-r4,lr"

		str	r1,[r8,#TileInfo_SpriteAreaPtr]
		str	r2,[r8,#TileInfo_SpritePtr]

		str	r1,thisCBptr
		str	r2,spritename
		mov	r0,#0
		str	r0,lengthflags
		bl	cachespritedata
		movvc	r1,#0
		blvc	cachespritepixtable
		movvs	r0,#-1
		strvs	r0,[r8,#TileInfo_SpritePtr]
		Pull	"r0-r4,pc",VS

		ldr	r0,sprite_log2px
		mov	r3,r3,LSL r0
		str	r3,[r8,#TileInfo_Width]
		ldr	r0,sprite_log2py
		mov	r4,r4,LSL r0
		str	r4,[r8,#TileInfo_Height]

		ldrb	r0,sprite_needsfactors
		teq	r0,#0

		moveq	r0,#-1						; if the scale factors are not needed then the first one is -1

		adrne	r14,sprite_factors
		ldmneia	r14,{r0-r3}

		add	r14,r8,#TileInfo_ScaleFactors
		stmia	r14,{r0-r3}

		ldr	r0,pixtable_at
		str	r0,[r8,#TileInfo_TranslationTablePtr]
		mov	r0,#0
		str	r0,pixtable_at

		Pull	"r0-r4,pc"

find_tile_sprite
;	on entry:	r6 = ptr to sprite name
;			r8 = ptr to info block to fill in
;	on exit:	block at r8 updated
;			or V set if sprite could not be found
		ROUT
		Push	"r0-r3,lr"

		DebugS	tiling,"Looking for sprite : ",r6
		b	%FT02

		ldr	r0,list_at
		teq	r0,#0				; if the cached sprite list does not exist
		beq	%FT02				; do the lookup the slow way

		str	r6,spritename
		bl	getspriteaddr
		ldrvc	r1,baseofsprites

00		movvs	r2,#-1
		strvs	r2,[r8,#TileInfo_SpritePtr]
		Pull	"r0-r3,pc",VS

01
                Debug	tiling,"Sprite found at :",r1,r2
		bl	get_tile_sprite_info

		Pull	"r0-r3,pc"

02		mov     r0,#SpriteReason_SelectSprite :OR: 256
      	    [ SpritePriority
        	ldr     r1,baseofhisprites
      	    |
       	 	ldr     r1,baseofsprites
      	    ]
		mov	r2,r6
		mov	r3,sp
        	swi     XOS_SpriteOp
		mov	r3,sp
        	bvc     %BT01

        	mov     r0,#SpriteReason_SelectSprite :OR: 256
      	    [ SpritePriority
        	ldr     r1,baseoflosprites
            |
        	ldr     r1,baseofromsprites
            ]
		mov	r2,r6
		mov	r3,sp
        	swi     XOS_SpriteOp
		mov	r3,sp
        	bvc     %BT01

		b	%BT00

find_tile_sprite_all_depths
;	on entry:	r5 = window bg colour
;			r6 = ptr to memory block rto put sprite name in
;			r7 = ptr to end of tile_## string
;			r8 = ptr to tile info block to fill in
;			stack contains base sprite name
;	on exit:	block at r8 updated
;			or V set if no sprite could be found
		ROUT
		Push	"r5,lr"

		ldr	r5,log2bpp
		mov	r14,#1
		mov	r5,r14,LSL r5			; r6 = bpp of current screen mode

00		bl	write_tile_sprite_name_bpp
		bl	find_tile_sprite
		Pull	"r5,pc",VC

		mov	r5,r5,LSR #1
		cmp	r5,#8
		bhs	%BT00

		mov	r5,#0
		strb	r5,[r7,#0]			; failed to find any variant of the sprite so try the default
		bl	find_tile_sprite

		Pull	"r5,pc"

get_tile_sprite	ROUT
		; on entry: r5 = window bg colour
		; 	    r8 = ptr to sprite info block to fill in
		;  on exit: block at r8 updated
		;	    V set if sprite not found
		Push	"r0-r7,lr"

00		ldr	r0,[r8,#TileInfo_SpritePtr]
		cmp	r0,#0
                beq     %FT01				; if sprite pointer is != 0 then the sprite has already been
                cmp     r0,#-1
		Pull	"r0-r7,pc",NE			; if not 0 or -1 then return now with V clear
		cmn     r0,#1:SHL:31
		Pull    "r0-r7,pc"			; if it is -1 then return with V set to cause the screen to just
							; be cleared
01
		mov	r0,#161				; check if tiling is disabled in CMOS
		mov	r1,#&8C
		swi	XOS_Byte
		tst	r2,#128
		SETV	NE
		movvs	r0,#-1
		strvs	r0,[r8,#TileInfo_SpritePtr]
		Pull	"r0-r7,pc",VS

		sub	sp,sp,#16

		mov	r6,sp
		bl	get_base_tile_sprite_name
		DebugS	tiling,"Base sprite name : ",r6
		bl	find_tile_sprite_all_depths

		add	sp,sp,#16

		Pull	"r0-r7,pc"

tile_sprite_fill_area
		ROUT
		; on entry: r8  = ptr to sprite info block

		Push	"r0-r11,lr"

		mov	r11,r8

		ldr	r0,=SpriteReason_TileSpriteScaled+512
		ldr	r1,[r11,#TileInfo_SpriteAreaPtr]
		ldr	r2,[r11,#TileInfo_SpritePtr]
		ldr	r3,[handle,#w_scx]
		ldr	r6,[handle,#w_wax0]
		ldr	r4,[handle,#w_scy]
		ldr	r7,[handle,#w_way1]
		sub	r3,r6,r3
		sub	r4,r7,r4
		mov	r5,#0
		bl	plot_tile

	[ CanTileManually
		; Fall black to plotting the tiles manually if the above call
		; failed due to OS_SpriteOp 65 not being available
		bvc	%ft90
		ldr	r0,[r0]
		ldr	r1,=ErrorNumber_Sprite_BadReasonCode
		teq	r0,r1
		bne	%ft90

		ldr	x0,[handle,#w_wax0]
		ldr	r0,[handle,#w_scx]
		ldr	r3,[r11,#TileInfo_Width]
		DivRemS	x1,r0,r3,r5
		sub	x0,x0,r0		; x0 = x tiling start point

		ldr	y1,[handle,#w_way1]
		ldr	r0,[handle,#w_scy]
		ldr	r4,[r11,#TileInfo_Height]
		DivRemS	x1,r0,r4,r5
		sub	y1,y1,r0		; y1 = y tiling start point

                adr	r14,clipx0
		ldmia	r14,{r0,y0,x1,r14}

		sub	y0,y0,#1
		sub	y0,y0,r4		; move min y down one whole tile

		sub	r0,r0,#1
		add	x1,x1,#1
		add	r14,r14,#1

00		cmp	y1,r14			; get y1 inside clipping rectangle
		subgt	y1,y1,r4
		bgt	%BT00

01		cmp	x0,r0			; get x0 inside clipping rectangle
		addlt	x0,x0,r3
		blt	%BT01

		sub	x0,x0,r3		; move it back over the left edge of the window

		mov	r0,#SpriteReason_PutSpriteScaled+512
		ldr	r1,[r11,#TileInfo_SpriteAreaPtr]
		ldr	r2,[r11,#TileInfo_SpritePtr]
		mov	r5,#0

		mov	r10,r4			; r10 = tile height
		mov	r4,y1
		mov	r9,r3			; r9 (y1) = tile width

02		mov	r3,x0			; r3 = start x pos
03		bl	plot_tile
		add	r3,r3,r9		; move right one tile
		cmp	r3,x1			; if more tiles on right
		blt	%BT03			; keep going
		sub	r4,r4,r10		; move down one tile
		cmp	r4,y0			; if more tiles below
		bgt	%BT02			; keep going
90
	] ; CanTileManually

		Pull	"r0-r11,pc"

plot_tile	ROUT
;	on entry:	r0,r1,r2 - as for OS_SpriteOp 52
;			r3 = x coord
;			r4 = y coord
;			r5 = plot action
;	on exit:	r0-r4 preserved
		Push	"r6,r7,lr"
		ldr	r6,[r11,#TileInfo_ScaleFactors + 0]
		cmp	r6,#-1
		moveq	r6,#0
		addne	r6,r11,#TileInfo_ScaleFactors
		ldr	r7,[r11,#TileInfo_TranslationTablePtr]
		swi	XOS_SpriteOp
		Pull	"r6,r7,pc"

reset_all_tiling_sprites ROUT
		; on entry R0 = the value to write to all tile sprite pointers
		; all tile sprite pointers are updated and all translation tables freed
		Push	"r0-r4,lr"

		mov	r1,r0
		Debug	tiling, "Reset tiling to", r1

		adrl	r3,tile_sprites
		add	r4,r3,#TileInfo * 18				; 16 background tiles + menu tile + temp tile

00		str	r1,[r3,#TileInfo_SpritePtr]			; set the sprite pointer

		ldr	r2,[r3,#TileInfo_TranslationTablePtr]
		teq	r2,#0						; if the table is non zero then free it
		movne	r0,#ModHandReason_Free
		blne	XROS_Module

		mov	r2,#0
		str	r2,[r3,#TileInfo_TranslationTablePtr]		; the table no longer exists so set the pointer to 0

		add	r3,r3,#TileInfo					; move on to the next one
		cmp	r3,r4
		bcc	%BT00

		Pull	"r0-r4,pc"                                      ; exit with V clear

		END
@


4.6
log
@Fix to build with HdrSrc-2_42. Use OS_SpriteOp 65 where possible.
Detail:
  s/Wimp01 - Update Wimp_SpriteOp handler to cope with the new SpriteReason_BadReasonCode value. Initialise unused bits of spritebits to 1 so that it acts as a whitelist, only allowing through operations that we know are safe.
  s/Tiling3D - Use OS_SpriteOp 65 for drawing tiled window backgrounds. Softload versions will fall back to using the old manual tiling code if OS_SpriteOp 65 is unavailable.
  s/Wimp10 - Use OS_SpriteOp 65 for drawing the tiled sprites that make up scrollbar wells and bars. Falls back to manual tiling in softload versions.
Admin:
  Tested on Iyonix, BB-xM
  Requires HdrSrc-2_42


Version 5.37. Tagged as 'Wimp-5_37'
@
text
@d509 1
a509 1
	[ standalone
d514 1
a514 1
		ldr	r1,=Sprite_BadReasonCode
d568 1
a568 1
	] ; standalone
@


4.5
log
@Implement sprite translation table caching
Detail:
  This set of changes allows the Wimp to cache the last-used translation table, and cleans up some instances where translation tables were being generated and then not used
  s/Wimp01 - Expand selecttable_args to store all 8 registers needed by ColourTrans_GenerateTable. Add 1K of space for caching the palette that the cached translation table was generated from. Remove unused spriteX, spriteY variables.
  s/Wimp04 - Split cachespritedata in two. cachespritedata now only caches the basic information, while the new cachespritepixtable rotuine will generate a translation table (shaded/inverted if required). This allows table generation to be deferred until we're just about to render the sprite, ensuring that the table isn't generated only to not be used. Also updated icon sprite rendering to check the sprite is within the graphics window before attempting to render it, allowing removal of one more case where tables can be needlessly generated.
  s/NewSWIs, s/Wimp09 - Change ADR to ADRL
  s/Tiling, s/Tiling3D - Use cachespritepixtable when needed
Admin:
  Tested on Iyonix, BB-xM, StrongARM RiscPC


Version 5.36. Tagged as 'Wimp-5_36'
@
text
@d497 21
d567 2
@


4.4
log
@3 minor fixes, 2 minor enhancements
Makefile:
* Conditionally copy the disc resources, saving a little build time.
Wimp10.s; hdr/Wimp:
* Issue Service_WimpToolSpritesChanged when the tool sprite area is changed.
Wimp05:
* Fix bug in softloaded versions of the Wimp where menus would randomly lose the keyboard shortcut text. This was caused by use of an LDR to retrieve a byte wide variable. This specifically affected some softloads because the Wimp gets squeezed, and during unsqueezing the Wimp's workspace ends up being allocated from the same bit of RMA that used to contain the squeezed copy of the module (=lots of random numbers).
Wimp09:
* Fix bug where configuring WimpSpritePrecedence to ROM when a theme is loaded would cause redrawing of window textures to fail. This is because the Wimp intersects the ROM and RAM sprite areas and deletes any duplicates from the RAM area when remaking the fast lookup sprite list. So if the RAM sprites include the "tile_1" (etc) sprite on redrawing the desktop the Wimp points to this, then intersects the lists and deletes the sprite, leaving the pointers pointing at junk. Now, on deleting something, the window tile pointers are invalidated. Fixes ticket #346.
Wimp02:
* Fix bug where the title bar text, when the desktop font is the system font, is incorrectly rendered in the colour selected by WimpVisualFlag -WindowOutlineColour. The Wimp now restores the text colour if -WOC has set the graphics colour to something other than black.

Administrative -
In Wimp01, swap a couple of SpriteReasons from magic numbers. In the init of variables use the common reset_all_tiling_sprite function.
In Tiling3D, more SpriteReasons, and rationalise the registers used in reset_all_tiling_sprites.

Version 5.32. Tagged as 'Wimp-5_32'
@
text
@d338 2
@


4.3
log
@Replace OS_SpriteOp reason code magic numbers with definitions. Add support for new screen modes.
Detail:
  s/Tiling, s/Tiling3D, s/Watchdog, s/Wimp05, s/Wimp07, s/Wimp09 - Replaced OS_SpriteOp reason code magic numbers with symbolic definitions.
  s/Wimp01 - Update *WimpMode / Wimp_SetMode to use OS_ScreenMode 13 (mode string to specifer) in place of its own code if a mode specifier string has been given. Note - mode number handling is unchanged, so a mode specifier string which begins with a mode number will currently have the specifier part ignored.
  s/Wimp01, s/Wimp02 - Flag_* -> ModeFlag_* renaming
  s/Wimp02 - Fix mode specifier copying to only stop copying when we hit a mode variable of -1. Previous code would also stop if the variable value was -1. Update mode set code to apply the Wimp's special greyscale palettes if the greyscale mode flag is set (i.e. greyscale mode was set via specifier generated by OS_ScreenMode 13)
Admin:
  Tested on BB-xM


Version 5.31. Tagged as 'Wimp-5_31'
@
text
@d148 1
a148 1
		teq	r5,#1
d174 1
d176 1
a176 1
		mov	r0,r0,LSL #2			; r0 = r5 * sizeof(SpriteInfo)
d527 1
a527 1
		mov	r0,#52+512
d562 1
a562 1
reset_all_tiling_sprites
d565 1
a565 3
		ROUT

		Push	"r0-r6,lr"
d567 2
a568 1
		mov	r6,r0
d570 2
a571 2
		adrl	r5,tile_sprites
		add	r4,r5,#TileInfo * 18				; 16 background tiles + menu tile + temp tile
d573 1
a573 1
00		str	r6,[r5,#TileInfo_SpritePtr]			; set the sprite pointer
d575 1
a575 1
		ldr	r2,[r5,#TileInfo_TranslationTablePtr]
d581 1
a581 1
		str	r2,[r5,#TileInfo_TranslationTablePtr]		; the table no longer exists so set the pointer to 0
d583 3
a585 3
		add	r5,r5,#TileInfo					; move on to the next one
		cmp	r5,r4
		blt	%BT00
d587 1
a587 1
		Pull	"r0-r6,pc"                                      ; exit with V clear
@


4.2
log
@Add support for wide translation tables for window tool furniture
With the introduction of 16bpp/32bpp modes it became possible to request tables from ColourTrans which used > 1 byte per colour, but the Wimp wasn't using this extension. Therefore tool sprites designed in 8bpp or less would be quantised horribly when plotted in a 16bpp or 32bpp mode.
The Wimp now requests and plots with a wide table, and to avoid thrashing ColourTrans so much with the prevalence of individually paletted icon sprites, keeps the table seperately to the icon sprites ones. At worst (in 32bpp) this uses an extra 256x4 bytes of RAM.
Trace.s: Split out the tracing routines from Wimp10 as it was getting a bit big.
Tiling.s: Namespace change for the icons versus tools distinction. Removed some unnecessary PC+8/PC+12 confused NOPs.
Tiling3D.s: Namespace change for the icons versus tools distinction.
Wimp01.s: New set of variables to track the tool translation tables separately. Various jiggling to keep ADRs in range.
Wimp02.s: Namespace change. Remove some double handling in Wimp_SetColourMapping.
Wimp04.s: Namespace change. Made factor rationalisation common to both the icon and tool grinding code. Removed dual use of cachespritedata for both icons and tools. The tintfunc moves to Wimp10. Service_InvalidateCache confusion resolved by adding a new flag to remember that the tools need regenerating rather than just marking the tool list as missing (which subsequently got restored in Tool_SpriteOp without actually doing any palette work.
Wimp10.s: Label tools_area renamed as it was immensely confusing to have that (which was actually holding the RMA allocation of the tool_list) and tool_area (which contains the sprite area) hanging around. Changed references to use tools-only cachetolspritedata routine. Added 'wide' flags to sprite op and colour trans calls. Tool_SpriteOp changed to actually regenerate the colour tables when they're known invalid (previously the tools list pointer was merely restored and no colour tables used). Trace functions extracted. Resolved confusion as to what recache_tools_trans and recache_tools_trans2 should be doing.

Tested with 4bpp "NewLook" sprites in 4bpp/8bpp/16bpp/32bpp and 8bpp smooth greyscaled "Steel" tool sprites in same modes.
Also ran a task window doing repeated Service_InvalidateCache calls while monitoring the RMA for leaks.
Generally navigated around some directories to ensure that inverse icons (during double click) and filer windows (with individually paletted sprites) were being rendered.

Version 5.20. Tagged as 'Wimp-5_20'
@
text
@d152 1
a152 1
		mov	r0,#24 :OR: 256
d395 1
a395 1
02		mov     r0,#24 :OR: 256
d407 1
a407 1
        	mov     r0,#24 :OR: 256
@


4.1
log
@  Merged in RISC OS 4.02 changes (including ROM patches). Also som bugfixes.
Detail:
  RISC OS 4 changes:
  * Font blending for desktop font (based on NC code, but now configurable)
  * 3-D window/menu/iconbar borders
  * Textured menu backgrounds
  * Loss of rubout box in unfilled text+sprite icons
  * *WimpVisualFlags controls various aspects of cosmetic changes above
  * Iconise button "slot" glyph slightly shorter (but only adopted in the RO400
    Resource directory)
  * Command window has front-window flag set
  * Byte at +39 of the window block has gained two new flag bits:
      bit 2 set => this window must never be given a 3D border
      bit 3 set => this window must always be given a 3D border
      (note that ResEd erroneously created windows with both bits set,
      this case is treated as though both bits were clear)
  * Another two colour specifiers on the end of C validation string command
    for icons controls the foreground and background colours to be used when
    the icon is selected
  * Pointer shape is correctly reprogrammed by the creation of icon
    underneath it
  * Full stops in writable icons are treated the same as spaces from the
    point of view of cursor navigation
  * spritesize routine returns a size of 0 if the sprite didn't exist
    (probably fixes some rendering problems)
  * Adjust-click on back icon brings window to front
  My changes:
  * DeleteRight turned on
  * Icon bar title background is set to default in all resource sets (avoids
    translation table recalc)
  * Error box title now cream across all resource sets
  * RISC OS 4 changes made 32-bit compatible / high addresses safe
  * Undocumented FullIconClipping option disabled
  * Command help made consistent for internationalised and non-
    internationalised builds
  * WimpVisualFlags defaults made sensible
  * Menu side width affected by ThreeD option at *run* time not assemble time
  * Right-clicking on menus with writable items no longer data aborts
  * Auto-opened menus are now at RHS of current icon (matches RISC OS 3.1)
  * Colour menus were knackered unless menu tiling was enabled
  * Fixed a bug whereby adding messages to a task that wanted all messages
    actually caused it to lose all other messages. The RISC OS 4 fix for
    this didn't work
  * Fixed bug introduced in version 4.76: tasks that wanted no messages got
    all of them
  * Autoscrolling is updated every 8 cs rather than every 12 cs
  * Added menu texture to pre-RISC OS 4 sprites files
Admin:
  Tested on Tungsten.

Version 4.78. Tagged as 'Wimp-4_78'
@
text
@d348 1
a348 1
		ldr	r0,needsfactors
d353 1
a353 1
		adrne	r14,factors
@

