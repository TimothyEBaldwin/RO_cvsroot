head	4.9;
access;
symbols
	Wimp-5_62:4.9
	Wimp-5_61:4.9
	Wimp-5_60:4.9
	Wimp-5_59:4.9
	Wimp-5_58:4.9
	Wimp-5_57:4.9
	Wimp-5_56:4.9
	Wimp-5_55:4.9
	Wimp-5_54:4.9
	Wimp-5_53:4.9
	Wimp-5_52:4.9
	Wimp-5_51:4.9
	Wimp-5_50:4.9
	Wimp-5_49:4.9
	Wimp-5_48:4.9
	Wimp-5_47-file1ad:4.9
	Wimp-5_47:4.9
	Wimp-5_46:4.9
	Wimp-5_45:4.9
	Wimp-5_44:4.9
	Wimp-5_43:4.9
	Wimp-5_42:4.9
	Wimp-5_41:4.9
	Wimp-5_40:4.9
	Wimp-5_39:4.9
	Wimp-5_38:4.9
	Wimp-5_37:4.9
	Wimp-5_36:4.9
	Wimp-5_35:4.9
	Wimp-5_34:4.9
	Wimp-5_33:4.9
	Wimp-5_32:4.9
	Wimp-5_31:4.9
	Wimp-5_30:4.8
	Wimp-530-pre4:4.8
	Wimp-5_30-pre3:4.8
	Wimp-5_30-pre2:4.8
	Wimp-5_30-pre1:4.8
	Wimp-5_29:4.8
	Wimp-5_28:4.8
	Wimp-5_27:4.8
	Wimp-5_26:4.8
	Wimp-5_25:4.8
	Wimp-5_24:4.8
	Wimp-5_23:4.8
	Wimp-5_22:4.8
	Wimp-5_21:4.8
	Wimp-5_20:4.8
	Wimp-5_19:4.8
	Wimp-5_18:4.8
	Wimp-5_17:4.8
	Wimp-5_16:4.8
	Wimp-5_15:4.8
	Wimp-5_14:4.8
	Wimp-5_13:4.8
	Wimp-5_12:4.8
	Wimp-5_11:4.8
	Wimp-5_10:4.8
	Wimp-5_09:4.8
	Wimp-5_08:4.8
	Wimp-5_07:4.8
	Wimp-5_06:4.8
	Wimp-5_05:4.8
	Wimp-5_04:4.8
	Wimp-5_03:4.8
	Wimp-5_02:4.8
	Wimp-5_01:4.8
	Wimp-4_66-4_77_2_1:4.5
	bavison_Threads_dev:4.5.0.2
	bavison_Threads_dev_bp:4.5
	Wimp-5_00:4.7
	Wimp-4_100:4.7
	Wimp-4_99:4.7
	Wimp-4_98:4.7
	Wimp-4_97:4.7
	Wimp-4_96:4.7
	Wimp-4_95:4.7
	Wimp-4_94:4.7
	RO_5_07:4.7
	Wimp-4_93:4.7
	Wimp-4_92:4.7
	Wimp-4_91:4.7
	Wimp-4_90:4.7
	Wimp-4_89:4.7
	Wimp-4_88:4.7
	Wimp-4_87:4.7
	Wimp-4_86:4.7
	Wimp-4_85:4.7
	Wimp-4_84:4.7
	Wimp-4_83:4.7
	Wimp-4_82:4.7
	Wimp-4_81:4.7
	Wimp-4_80:4.7
	Wimp-4_79:4.7
	Wimp-4_78:4.7
	Wimp-4_77:4.7
	Wimp-4_76:4.6
	Wimp-4_75:4.5
	Wimp-4_74:4.5
	Wimp-4_73:4.5
	Wimp-4_72:4.5
	Wimp-4_71:4.5
	Wimp-4_70:4.5
	Wimp-4_69:4.5
	Wimp-4_68:4.5
	Wimp-4_67:4.5
	Wimp-4_66:4.5
	Wimp-4_65:4.5
	Wimp-4_64:4.5
	Wimp-4_63:4.5
	Wimp-4_62:4.5
	Wimp-4_61:4.5
	Wimp-4_60:4.5
	Wimp-4_59:4.5
	Wimp-4_58:4.5
	Wimp-4_36-4_46_2_6:4.4
	Wimp-4_57:4.5
	Alpnet_approved:4.4
	Wimp-4_36-4_46_2_5:4.4
	Wimp-4_56:4.5
	dellis_autobuild_BaseSW:4.5
	Wimp-4_36-4_46_2_4:4.4
	Wimp-4_36-4_46_2_3:4.4
	Wimp-4_55:4.5
	Wimp-4_54:4.5
	Wimp-4_36-4_46_2_2:4.4
	Wimp-4_53:4.5
	Wimp-4_36-4_46_2_1:4.4
	Bethany:4.4.0.2
	Wimp-4_52:4.5
	Wimp-4_51:4.5
	Wimp-4_50:4.5
	Wimp-4_49:4.5
	Wimp-4_48:4.5
	Wimp-4_47:4.5
	Wimp-4_46:4.4
	Wimp-4_45:4.4
	Wimp-4_44:4.4
	Wimp-4_43:4.4
	Wimp-4_42:4.4
	sbrodie_sedwards_16Mar2000:4.4
	Wimp-4_41:4.4
	Wimp-4_40:4.4
	Wimp-4_39:4.4
	Wimp-4_38:4.4
	Wimp-4_37:4.4
	Wimp-4_36:4.4
	Wimp-4_35:4.4
	Wimp-4_34:4.4
	Wimp-4_33:4.4
	Wimp-4_32:4.4
	Wimp-4_31:4.4
	dcotton_autobuild_BaseSW:4.5
	Wimp-4_30:4.4
	Wimp-4_29:4.4
	Wimp-4_28:4.4
	Wimp-4_27:4.4
	Wimp-4_26:4.4
	Wimp-4_25:4.4
	Wimp-4_24:4.4
	Wimp-4_23:4.4
	Wimp-4_22:4.4
	Wimp-4_21:4.4
	Wimp-4_20:4.4
	Wimp-4_19:4.4
	Wimp-4_18:4.4
	Wimp-4_17:4.4
	Wimp-4_16:4.4
	Wimp-4_15:4.4
	Wimp-4_14:4.4
	Wimp-4_13:4.4
	Wimp-4_12:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.2
	bavison_Wimp-4_11:4.3
	Ursula_RiscPC:4.1.4.2.0.2
	Wimp-4_11:4.3
	Wimp-4_10:4.3
	Wimp-4_09:4.3
	Wimp-4_08:4.2
	Wimp-4_07:4.2
	Wimp-4_06:4.2
	Wimp-4_05:4.2
	Wimp-4_04:4.2
	bavison_Wimp-4_03_noshrinkables:4.2
	Wimp-4_03:4.2
	Wimp-4_02:4.2
	Ursula_merge:4.1.4.2
	bavison_Wimp-4_01:4.2
	Wimp-4_01:4.2
	nicke_Wimp_3_96M:4.1.7.1
	bavison_Wimp-4_00_TRUNK:4.2
	bavison_Wimp-4_00:4.1.4.2
	nicke_Wimp_3_96:4.1.7.1
	mjrobert_Wimp_3_98:4.1.4.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.2
	UrsulaBuild_FinalSoftload:4.1.4.2
	bavison_Wimp-3_99t:4.1.4.2
	rthornb_UrsulaBuild-12Aug1998:4.1.4.2
	bavison_Wimp-3_99s:4.1.4.2
	aglover_UrsulaBuild-05Aug1998:4.1.4.2
	bavison_Wimp-3_99r:4.1.4.2
	rthornb_UrsulaBuild-29Jul1998:4.1.4.2
	bavison_Wimp-3_99q:4.1.4.2
	jfarrell_NCWimp_3_96:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.2
	bavison_Wimp-3_99p:4.1.4.2
	rthornb_UrsulaBuild-15Jul1998:4.1.4.2
	bavison_Wimp-3_99o:4.1.4.2
	bavison_Wimp-3_99n:4.1.4.2
	rthornb_UrsulaBuild-07Jul1998:4.1.4.2
	bavison_Wimp-3_99m:4.1.4.2
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	bavison_Wimp-3_99l:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	bavison_Wimp-3_99k:4.1.4.1
	bavison_Wimp-3_99j:4.1.4.1
	bavison_Wimp-3_99i:4.1.4.1
	bavison_Wimp-3_99h:4.1.4.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	bavison_Wimp_399g:4.1.4.1
	bavison_Wimp_399f:4.1.4.1
	afrost_NC2_Generic:4.1.7.1
	bavison_Wimp_399e:4.1.4.1
	bavison_Wimp_399d:4.1.4.1
	bavison_Wimp_399c:4.1.4.1
	Wimp_3_98:4.1.4.1
	kbracey_AW97:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Wimp_3_91:4.1
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.9
date	2013.08.06.23.31.42;	author jlee;	state Exp;
branches;
next	4.8;
commitid	UbPZokvIlfdkZr0x;

4.8
date	2008.07.12.23.45.18;	author bavison;	state Exp;
branches;
next	4.7;

4.7
date	2002.10.25.15.34.25;	author bavison;	state Exp;
branches;
next	4.6;

4.6
date	2002.10.23.17.12.35;	author bavison;	state Exp;
branches;
next	4.5;

4.5
date	2000.04.25.12.24.04;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	98.11.27.20.56.08;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	98.10.23.15.48.21;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	98.09.18.16.14.07;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.30.47;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.30.47;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.32.59;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.02.02.16.27.50;	author kbracey;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	98.07.03.17.59.44;	author bavison;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.24.37;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.22.10;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.9
log
@Replace OS_SpriteOp reason code magic numbers with definitions. Add support for new screen modes.
Detail:
  s/Tiling, s/Tiling3D, s/Watchdog, s/Wimp05, s/Wimp07, s/Wimp09 - Replaced OS_SpriteOp reason code magic numbers with symbolic definitions.
  s/Wimp01 - Update *WimpMode / Wimp_SetMode to use OS_ScreenMode 13 (mode string to specifer) in place of its own code if a mode specifier string has been given. Note - mode number handling is unchanged, so a mode specifier string which begins with a mode number will currently have the specifier part ignored.
  s/Wimp01, s/Wimp02 - Flag_* -> ModeFlag_* renaming
  s/Wimp02 - Fix mode specifier copying to only stop copying when we hit a mode variable of -1. Previous code would also stop if the variable value was -1. Update mode set code to apply the Wimp's special greyscale palettes if the greyscale mode flag is set (i.e. greyscale mode was set via specifier generated by OS_ScreenMode 13)
Admin:
  Tested on BB-xM


Version 5.31. Tagged as 'Wimp-5_31'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; watchdog source

        [ NewErrorSystem

watchdogguard   DCD     &E240569E

        [ WatchdogTimer

BreakWatchdogHandler
        Push    "R0-R1"

       |

BreakWatchdogHandler

        TEQ     R0,#Event_Keyboard
        MOVNE   PC,lr
        TEQ     R1,#1                   ; only interested in key down
        MOVNE   PC,lr
        [ SnapShot
        TEQ     R2,#13
        BEQ     capturescreen
        ]
        TEQ     R2,#15                  ; break key
        MOVNE   PC,lr
        Push    "R0-R1"
        ]

        [ No32bitCode
        MOV     R0,PC
        TEQP    PC,#SVC_mode
        NOP
        |
        MRS     R0,CPSR
        ORR     R1,R0,#SVC_mode
        BIC     R1,R1,#I32_bit+F32_bit
        MSR     CPSR_c,R1
        ]

        Push    "R0-R2,LR"
        LDR     R0,watchdogcodew
        TEQ     R0,#0
        BNE     watchdogend
        LDR     R0,watchdogarea
        LDR     R1,watchdogguard
        CMP     R0,R1
        BEQ     watchdogend

        [ WatchdogTimer
; the event based system has already checked for break key.

        MOV     R0,#121
        MOV     R1,#44:EOR:128                         ; Break
        SWI     XOS_Byte
        CMP     R1,#&ff
        BNE     watchdogend
        ]

        MOV     R0,#121
        MOV     R1,#2:EOR:128                          ; Alt
        SWI     XOS_Byte
        CMP     R1,#&ff
        BNE     watchdogend
        MOV     R0,#121
        MOV     R1,#1:EOR:128                          ; Ctrl
        SWI     XOS_Byte
        CMP     R1,#&ff
        BEQ     watchdogend                            ; only Break
        MOV     R0,#121
        MOV     R1,#0:EOR:128                          ; Shift
        SWI     XOS_Byte
        CMP     R1,#&ff
        BEQ     watchdogend

        LDR     R1,watchdogguard
        STR     R1,watchdogarea
        LDR     R1,taskhandle
        STR     R1,watchdogtask
        MOV     R1,#-1
        STR     R1,watchdogtaskno
        ADR     R0,watchdogcallback
        MOV     R1,R12
        SWI     XOS_AddCallBack
        MOV     R0,#124
        SWI     XOS_Byte                                ; clear escape condition
watchdogend
        Pull    "R0-R2,LR"
        [ No32bitCode
        TEQP    PC,R0
        NOP
        |
        MSR     CPSR_c,R0
        ]
        Pull    "R0-R1,PC"

        LTORG

kill_labels
        DCB     "Watchdog:Stop,Cancel,Next Task"
        DCB     0

	ALIGN
watchdogcallback
        Push    "R0-R7,R14"

        LDR     R0,watchdogtask                 ; R0 = task handle
        LDR     R1,[wsptr,R0]                   ; R1 -> task record
        TEQ     R1,#task_unused
        LDRNE   R7,taskhandle                   ; save this as we may have to page
        STRNE   R0,taskhandle
;
        BLNE    fulltaskhandle
        STRNE   R7,taskhandle                   ; put it back just in case
        MOVNE   R0,R14
        MOVEQ   R0,#0
; setup meaningful task handle =0 if none, else current

        SWI     XTaskManager_TaskNameFromHandle       ; get task name
        ADRVS   R0,notaskname

        MOV     R4,R0

        LDR     R0,commandflag
        TEQ     R0,#cf_active

        ADRNE   R0,killapptoken
        ADREQ   R0,killprogtoken

        ADRL    R2,watchdogerrtxt
        MOV     R3,#?watchdogerrtxt
        MOV     R5,#0
        BL      LookupToken

        ADRL    R0,watchdogerror
        LDR     R1,=&050DEAD0                   ; user1
        STR     R1,[R0]
        MOV     R1,#256+2048+512                   ; new bits
        ADR     R2,watchdogappname
        MOV     R3,#0
        MOV     R4,#1
        SUB     SP,SP,#64
        Push    "R0-R4"
        ADR     R0,kill_labels
        ADD     R2,SP,#20
        MOV     R3,#64
        BL      LookupToken1
        MOV     R5,R2

        MOV     R0,#124
        SWI     XOS_Byte                        ; BASIC may have caused an escape condition

        Pull    "R0-R4"
        SWI     XWimp_ReportError
        ADD     SP,SP,#64
        CMP     R1,#5                           ; next
        BNE     watchdognext
taskloop
        LDR     R0,watchdogtaskno
        ADD     R0,R0,#1
        CMP     R0,#maxtasks
        BEQ     watchdognext
        STR     R0,watchdogtaskno
        ADRL    R3,taskpointers
        ADD     R0,R3,R0, LSL #2
        LDR     R2,[R0]
        TEQ     R2,#task_unused
        BEQ     taskloop
        SUB     R0,R0,wsptr
        STR     R0,watchdogtask
        ADR     R0,watchdogcallback
        MOV     R1,R12
        SWI     XOS_AddCallBack
      [ NCErrorBox
        ADRL    R1, ptrpreserveflag
        MOV     R0, #1
        STR     R0, [R1]                         ; note not to move the pointer
      ]
        Pull    "R0-R7,PC"
watchdognext
        CMP     R1,#3                            ; kill
        CMPNE   R1,#1                            ; ok if text mode
        STR     R1,watchdogarea

        Pull    "R0-R7,PC",NE

        LDR     R0,watchdogtask
        STR     R0,newtaskhandle
        BL      printjobrunning

        LDR     R14,taskhandle

        TEQ     R0,R14                  ; current task going to die?
        BEQ     %FT05

        MOV     R7, R14                 ; keep [taskhandle] so we can restore it later
        STR     R0, taskhandle
        BL      fulltaskhandle          ; R14 = full task handle for watchdogtask
        STR     R7, taskhandle

        MOV     R0, R14
        LDR     R1, taskidentifier5
        SWI     XWimp_CloseDown         ; kill the selected task (!= current task)

        Pull    "R0-R7,PC"

taskidentifier5 DCB "TASK"

05
        SWI     XHourglass_Smash        ; turn off hourglass (if displayed)
                                        ; If kill message was textual, this wont have
                                        ; been done

                                        ; errorstack held the most recently used sprite area
        LDR     R0,errorstack-8
        CMP     R0,#&8000               ; were we in a sprite ?

        Pull    "R0-R7" ,LO

        SWILO   OS_Exit                 ; can safely exit
        LDR     R14,orig_applicationspacesize
        CMP     R0,R14

        Pull    "R0-R7",HS

        SWIHS   OS_Exit                 ; outside app space

        MOV     R0,#SpriteReason_SwitchOutputToSprite
        MOV     R1,#0
        MOV     R2,#0
        MOV     R3,#0
        SWI     XOS_SpriteOp            ; make sure output is switched to the screen

        Pull    "R0-R7"

        SWI     OS_Exit

        LTORG

killapptoken
        DCB     "KillApp",0

        ALIGN

killprogtoken
        DCB     "KillProg",0  ; we're in command mode

        ALIGN

notaskname
        DCB     "Unknown",0

        ALIGN

watchdogappname
        DCB     "Window Manager",0
        ALIGN

printjobrunning Entry R0
        LDR     R14,taskhandle
        TEQ     R0,R14                  ; killing current task ?
        EXIT    NE
        SWI     XPDriver_CurrentJob
        EXIT    VS
        TEQ     R0,#0
        EXIT    EQ
        SWI     XPDriver_AbortJob
        EXIT


        ]

        LTORG

SWIWimp_SetWatchdogState
        MyEntry "SetWatchdogState"

        [ NewErrorSystem
        TEQ     R0,#0
        BNE     %FT01
        LDR     R14,watchdogcodew
        TEQ     R14,#0                          ; already disabled ?
        EOREQ   R1,R1,R12
        STREQ   R1,watchdogcodew
        BEQ     ExitWimp
01
        LDR     R0,watchdogcodew
        EOR     R0,R0,R12
        EORS    R0,R0,R1
        STREQ   R0,watchdogcodew
        ]
        B       ExitWimp

        [ SnapShot
capturescreen
        Push    "R0-R1"
        [ No32bitCode
        MOV     R0,PC
        TEQP    PC,#SVC_mode                            ; need a stack!!!
        NOP
        |
        MRS     R0,CPSR
        BIC     R1,R0,#I32_bit+F32_bit
        ORR     R1,R1,#SVC_mode
        MSR     CPSR_c,R1
        ]

        Push    "R0-R2,LR"
        MOV     R0,#121
        MOV     R1,#2:EOR:128                          ; Alt
        SWI     XOS_Byte
        CMP     R1,#&ff
        ADREQ   R0,screen_callback
        SWIEQ   XOS_AddCallBack
        B       watchdogend

screen_callback
        Push    "R0-R3,lr"
        MOV     R3,#1
        ADR     R2,scrn_pathname
        MOV     R0,#SpriteReason_ScreenSave
        SWI     XOS_SpriteOp
        MOVVS   R1,#1
        MOVVS   R2,#0
        SWIVS   XWimp_ReportError
        Pull    "R0-R3,PC"

scrn_pathname
        DCB     "<Wimp$scrapdir>.!!Screen!!",0

        ALIGN
 ]

        END
@


4.8
log
@  Fixed potentially fatal bug in Watchdog.
Detail:
  Unnecessarily complex code in Watchdog for killing tasks other than the
  currently active task ended up corrupting the environment handlers for
  the current task.
Admin:
  Fixes the test case of running a BASIC program consisting of
    REPEAT UNTIL FALSE
  which previously caused random errors or complete crashes if you ran it
  and then Al-Breaked and tried to kill a different task.

Version 5.01. Tagged as 'Wimp-5_01'
@
text
@d334 1
a334 1
        MOV     R0,#2
@


4.7
log
@  Memory-related stuff.
Detail:
  * Default UpCall handler is installed when an application is paged out,
    so there is no danger of it being called by naughty people issuing
    UpCalls in the background.
  * AMBControl builds now sit on Service_MemoryMoved so that they can issue
    Message_SlotSize when the kernel has resized the application slot
    independently (eg because the memory was needed to grow a dynamic area,
    and nobody objected via Service_Memory or UpCall_MovingMemory).
  * Medusa-onwards builds no longer request Service_ValidateAddress, because
    we're not managing the free pool any more, and the code that was here
    only called an ineffectual SWI!
  * SafeChangeDynamic wasn't setting the CAO high enough to be free of big
    application slots; now it points it at itself.
  * The free pool wasn't being shrunk/grown enough on initfirsttask /
    closelast. It still can't do by more than 1GB without stiffing - bug in
    kernel?
  * Bugs in top-bit-safe changes fixed: dragbox resizing was broken, Escape
    state wasn't being restored for new tasks.
Admin:
  Tested on high-ROM/stack, 48M-appslot Tungsten.

Version 4.77. Tagged as 'Wimp-4_77'
@
text
@d209 8
a216 38
        LDR     R7,taskhandle
        Push    userblk
        BL      pageintask
        Pull    userblk

             ; current task already paged in
        SWI     XWimp_CloseDown

; taken from wimp_poll...

        LDR     R14,ptrtask
        LDR     R5,taskhandle
        TEQ     R5,R14
        MOVEQ   R14,#nullptr            ; avoid ptr_leaving_window!
        STREQ   R14,ptrwindow
;
        MOV     R0,#EscapeHandler       ; the domain is about to die -
        SWI     XOS_ReadDefaultHandler  ; prevent nasty handlers from being
        SWIVC   XOS_ChangeEnvironment   ; called when they shouldn't be!
;
        MOV     R0,#EventHandler
        SWI     XOS_ReadDefaultHandler
        SWIVC   XOS_ChangeEnvironment
;
        MOV     R0,#UpCallHandler
        SWI     XOS_ReadDefaultHandler
        SWIVC   XOS_ChangeEnvironment
;
        BL      deallocatependingtask   ; delete task block (gone for good)
                                        ; reclaim memory as well!
        MOV     R0,#0                   ; 'Press SPACE' if anything printed
        BL      int_commandwindow       ; can't call SWI since task is dead!
        CLRV                            ; ignore errors

        STR     R7,newtaskhandle
        Push    userblk
        BL      pageintask
        Pull    userblk
d220 1
@


4.6
log
@  Given a good thrashing.
Detail:
  All pointers passed to the Wimp (mode selectors, menus, sprite areas,
  palettes, pollwords, validation strings, message lists, routines etc etc)
  in any of its APIs can now be anywhere within the 32-bit address range.
  In general, whenever "<= 0" was accepted as a null condition, the value
  must now be either 0 or -1. It should also be tolerant of system memory
  areas (supervisor stack and RMA) being in the top half of memory.
  Also:
  * Default next slot now a build option - Ursula builds (eg Tungsten) use
    1024K instead of 640K
  * Ursula builds no longer have a build variant in the help string
  * Autosenses ROM location
  * CR-LFs in *Configure messages replaced with LF-CRs
  * Added Iyonix resources (currently based on Morris4)
  * Morris4 sprites files have gained file_lxa, small_lxa, file_unf,
    small_unf and lo!help sprites
  * Ursula sprites files have gained lo!help sprites
  * *WimpSlot can take memory sizes in megabytes or gigabytes
Admin:
  Tested on a "traditional" memory-mapped Tungsten.

Version 4.76. Tagged as 'Wimp-4_76'
@
text
@d233 4
@


4.5
log
@  Made 32-bit compatible.
Detail:
  Lots of little changes throughout a lot of source.
Admin:
  Appears to work - not stress tested with things like lots of tasks, big
  transfers, and all the other things that tend to go wrong.

Version 4.47. Tagged as 'Wimp-4_47'
@
text
@d256 1
a256 1
        Pull    "R0-R7" ,LT
d258 1
a258 1
        SWILT   OS_Exit                 ; can safely exit
d262 1
a262 1
        Pull    "R0-R7",GT
d264 1
a264 1
        SWIGT   OS_Exit                 ; outside app space
@


4.4
log
@Another bugfix to and a new feature of NC error box code:
* If pointer was hidden-until-next-mouse-move, the act of confining the mouse
  to the error box window no longer causes it to be redisplayed.
* In error boxes, the pointer and the IconHigh highlight are now initially
  positioned over the rightmost (default) button. There is one exception to
  this rule: when "Next task" is clicked in a Watchdog window, the pointer
  stays over the "Next task" button.

Version 4.13. Tagged as 'Wimp-4_13'
@
text
@d23 2
a24 1
BreakWatchdogHandler    Entry   "R0"
d40 1
a40 1
        Push    "R0"
d43 1
d47 6
d102 1
d105 4
a108 1
        Pull    "R0,PC"
d300 1
a300 1
        EXITS   NE
d302 1
a302 1
        EXITS   VS
d304 1
a304 1
        EXITS   EQ
d306 1
a306 1
        EXITS
d334 2
a335 1
        Push    R0
d339 6
@


4.3
log
@Adapted assembly process so that the choice of Options file (previously based
purely on the "System" variable) can be overridden by passing "OPTIONS=foo" as
an argument to either MkRom, or to amu/amu_machine directly, or indirectly,
by specifying it in the components file for a build. To accomplish this, it
was necessary to switch from using aasm to objasm - hence the large number of
source files affected in this commit.

Version 4.09. Tagged as 'Wimp-4_09'
@
text
@d175 5
@


4.2
log
@Ursula branch Wimp merged back onto trunk.
@
text
@d23 1
a23 1
BreakWatchdogHandler    ENTRY   "R0"
d280 1
a280 1
printjobrunning ENTRY R0
@


4.1
log
@Initial revision
@
text
@d104 1
a104 1

a105 2


d297 2
@


4.1.4.1
log
@Fixed occasional lock-ups when error boxes displayed.
Added ALIGN directive before watchdog callback label.
Added option to select double-height VDU 4 modes.
Added German resources.
Added necessary options for parallel-port debugging via the PDebugM module.
@
text
@d104 1
a104 1
	ALIGN
d106 2
@


4.1.4.2
log
@Window tool button type is now configurable.
Windows now keep the same depth when toggle-size tool is clicked with Adjust.
Fixed bug where drags in Eureka caused branch-through-zeros and other
miscellaneous errors.
Fixed a few stray non-X form SWI calls.
Extended applicability/functionality of "MyEntry" debug macro.
@
text
@a296 2
        MyEntry "SetWatchdogState"

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
