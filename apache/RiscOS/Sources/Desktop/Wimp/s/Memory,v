head	4.7;
access;
symbols
	Wimp-5_62:4.7
	Wimp-5_61:4.7
	Wimp-5_60:4.7
	Wimp-5_59:4.7
	Wimp-5_58:4.7
	Wimp-5_57:4.7
	Wimp-5_56:4.7
	Wimp-5_55:4.7
	Wimp-5_54:4.7
	Wimp-5_53:4.7
	Wimp-5_52:4.7
	Wimp-5_51:4.7
	Wimp-5_50:4.7
	Wimp-5_49:4.7
	Wimp-5_48:4.7
	Wimp-5_47-file1ad:4.7
	Wimp-5_47:4.7
	Wimp-5_46:4.7
	Wimp-5_45:4.7
	Wimp-5_44:4.7
	Wimp-5_43:4.7
	Wimp-5_42:4.7
	Wimp-5_41:4.7
	Wimp-5_40:4.7
	Wimp-5_39:4.7
	Wimp-5_38:4.7
	Wimp-5_37:4.7
	Wimp-5_36:4.7
	Wimp-5_35:4.7
	Wimp-5_34:4.7
	Wimp-5_33:4.7
	Wimp-5_32:4.7
	Wimp-5_31:4.7
	Wimp-5_30:4.7
	Wimp-530-pre4:4.7
	Wimp-5_30-pre3:4.7
	Wimp-5_30-pre2:4.7
	Wimp-5_30-pre1:4.7
	Wimp-5_29:4.7
	Wimp-5_28:4.7
	Wimp-5_27:4.7
	Wimp-5_26:4.7
	Wimp-5_25:4.7
	Wimp-5_24:4.7
	Wimp-5_23:4.6
	Wimp-5_22:4.6
	Wimp-5_21:4.6
	Wimp-5_20:4.6
	Wimp-5_19:4.6
	Wimp-5_18:4.6
	Wimp-5_17:4.6
	Wimp-5_16:4.6
	Wimp-5_15:4.6
	Wimp-5_14:4.6
	Wimp-5_13:4.6
	Wimp-5_12:4.6
	Wimp-5_11:4.6
	Wimp-5_10:4.6
	Wimp-5_09:4.6
	Wimp-5_08:4.6
	Wimp-5_07:4.6
	Wimp-5_06:4.6
	Wimp-5_05:4.6
	Wimp-5_04:4.6
	Wimp-5_03:4.6
	Wimp-5_02:4.6
	Wimp-5_01:4.6
	Wimp-4_66-4_77_2_1:4.5
	bavison_Threads_dev:4.5.0.2
	bavison_Threads_dev_bp:4.5
	Wimp-5_00:4.6
	Wimp-4_100:4.6
	Wimp-4_99:4.6
	Wimp-4_98:4.6
	Wimp-4_97:4.6
	Wimp-4_96:4.6
	Wimp-4_95:4.6
	Wimp-4_94:4.6
	RO_5_07:4.6
	Wimp-4_93:4.6
	Wimp-4_92:4.6
	Wimp-4_91:4.6
	Wimp-4_90:4.6
	Wimp-4_89:4.6
	Wimp-4_88:4.6
	Wimp-4_87:4.6
	Wimp-4_86:4.6
	Wimp-4_85:4.6
	Wimp-4_84:4.6
	Wimp-4_83:4.6
	Wimp-4_82:4.6
	Wimp-4_81:4.6
	Wimp-4_80:4.6
	Wimp-4_79:4.6
	Wimp-4_78:4.6
	Wimp-4_77:4.6
	Wimp-4_76:4.6
	Wimp-4_75:4.5
	Wimp-4_74:4.5
	Wimp-4_73:4.5
	Wimp-4_72:4.5
	Wimp-4_71:4.5
	Wimp-4_70:4.5
	Wimp-4_69:4.5
	Wimp-4_68:4.5
	Wimp-4_67:4.5
	Wimp-4_66:4.5
	Wimp-4_65:4.5
	Wimp-4_64:4.5
	Wimp-4_63:4.5
	Wimp-4_62:4.5
	Wimp-4_61:4.5
	Wimp-4_60:4.5
	Wimp-4_59:4.5
	Wimp-4_58:4.5
	Wimp-4_36-4_46_2_6:4.4
	Wimp-4_57:4.5
	Alpnet_approved:4.4
	Wimp-4_36-4_46_2_5:4.4
	Wimp-4_56:4.5
	dellis_autobuild_BaseSW:4.5
	Wimp-4_36-4_46_2_4:4.4
	Wimp-4_36-4_46_2_3:4.4
	Wimp-4_55:4.5
	Wimp-4_54:4.5
	Wimp-4_36-4_46_2_2:4.4
	Wimp-4_53:4.5
	Wimp-4_36-4_46_2_1:4.4
	Bethany:4.4.0.2
	Wimp-4_52:4.5
	Wimp-4_51:4.5
	Wimp-4_50:4.5
	Wimp-4_49:4.5
	Wimp-4_48:4.5
	Wimp-4_47:4.5
	Wimp-4_46:4.4
	Wimp-4_45:4.4
	Wimp-4_44:4.4
	Wimp-4_43:4.4
	Wimp-4_42:4.4
	sbrodie_sedwards_16Mar2000:4.4
	Wimp-4_41:4.4
	Wimp-4_40:4.4
	Wimp-4_39:4.4
	Wimp-4_38:4.4
	Wimp-4_37:4.4
	Wimp-4_36:4.4
	Wimp-4_35:4.4
	Wimp-4_34:4.4
	Wimp-4_33:4.4
	Wimp-4_32:4.4
	Wimp-4_31:4.4
	dcotton_autobuild_BaseSW:4.5
	Wimp-4_30:4.4
	Wimp-4_29:4.4
	Wimp-4_28:4.4
	Wimp-4_27:4.4
	Wimp-4_26:4.4
	Wimp-4_25:4.4
	Wimp-4_24:4.4
	Wimp-4_23:4.4
	Wimp-4_22:4.4
	Wimp-4_21:4.4
	Wimp-4_20:4.4
	Wimp-4_19:4.4
	Wimp-4_18:4.4
	Wimp-4_17:4.4
	Wimp-4_16:4.4
	Wimp-4_15:4.4
	Wimp-4_14:4.4
	Wimp-4_13:4.4
	Wimp-4_12:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2.2.1
	bavison_Wimp-4_11:4.4
	Ursula_RiscPC:4.2.2.1.0.2
	Wimp-4_11:4.4
	Wimp-4_10:4.4
	Wimp-4_09:4.4
	Wimp-4_08:4.3
	Wimp-4_07:4.3
	Wimp-4_06:4.3
	Wimp-4_05:4.3
	Wimp-4_04:4.3
	bavison_Wimp-4_03_noshrinkables:4.3
	Wimp-4_03:4.3
	Wimp-4_02:4.3
	Ursula_merge:4.2.2.1
	bavison_Wimp-4_01:4.3
	Wimp-4_01:4.3
	nicke_Wimp_3_96M:4.1.7.1
	bavison_Wimp-4_00_TRUNK:4.3
	bavison_Wimp-4_00:4.2.2.1
	nicke_Wimp_3_96:4.1.7.1
	mjrobert_Wimp_3_98:4.2.2.1
	rthornb_UrsulaBuild-19Aug1998:4.2.2.1
	UrsulaBuild_FinalSoftload:4.2.2.1
	bavison_Wimp-3_99t:4.2.2.1
	rthornb_UrsulaBuild-12Aug1998:4.2.2.1
	bavison_Wimp-3_99s:4.2.2.1
	aglover_UrsulaBuild-05Aug1998:4.2.2.1
	bavison_Wimp-3_99r:4.2.2.1
	rthornb_UrsulaBuild-29Jul1998:4.2.2.1
	bavison_Wimp-3_99q:4.2.2.1
	jfarrell_NCWimp_3_96:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.2.2.1
	bavison_Wimp-3_99p:4.2.2.1
	rthornb_UrsulaBuild-15Jul1998:4.2.2.1
	bavison_Wimp-3_99o:4.2.2.1
	bavison_Wimp-3_99n:4.2.2.1
	rthornb_UrsulaBuild-07Jul1998:4.2.2.1
	bavison_Wimp-3_99m:4.2.2.1
	rthornb_UrsulaBuild-17Jun1998:4.2.2.1
	rthornb_UrsulaBuild-03Jun1998:4.2.2.1
	bavison_Wimp-3_99l:4.2.2.1
	rthornb_UrsulaBuild-27May1998:4.2.2.1
	rthornb_UrsulaBuild-21May1998:4.2.2.1
	bavison_Wimp-3_99k:4.2.2.1
	bavison_Wimp-3_99j:4.2.2.1
	bavison_Wimp-3_99i:4.2.2.1
	bavison_Wimp-3_99h:4.2.2.1
	rthornb_UrsulaBuild_01May1998:4.2.2.1
	bavison_Wimp_399g:4.2.2.1
	bavison_Wimp_399f:4.2.2.1
	afrost_NC2_Generic:4.1.7.1
	bavison_Wimp_399e:4.2.2.1
	bavison_Wimp_399d:4.2.2.1
	bavison_Wimp_399c:4.2.2.1
	Wimp_3_98:4.2.2.1
	kbracey_AW97:4.2
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Wimp_3_91:4.2
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1.2.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2013.05.03.21.08.16;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	QS59VqQdUOQmfeOw;

4.6
date	2002.10.23.17.12.35;	author bavison;	state Exp;
branches;
next	4.5;

4.5
date	2000.04.25.12.24.04;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	98.10.23.15.48.17;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	98.09.18.16.14.02;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	97.05.07.14.15.23;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.30.46;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	97.10.21.14.01.27;	author mstphens;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.30.46;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.32.50;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.24.27;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.22.02;	author nturton;	state Exp;
branches
	4.1.7.1.2.1;
next	;

4.1.7.1.2.1
date	97.04.28.16.49.51;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Slacken pointer checks
The pointer comparison checking required when running in a system with > 64M memory was tightened up from Wimp-4_75 to Wimp-4_76, but to allow the module to target pre RISC OS 5 systems an option to relax those checks is required.
Each check has been revisited and where appropriate demarked with a "AcceptLoosePointer" macro, which just remaps the pointer into the stricter form and carries on. In the strict checking case, the macro reduces to nothing.

Detail:
Add AcceptLoosePointers switch.
Retire singular use of StrongARM switch (calling XOS_SynchroniseCodeAreas is harmless pre StrongARM anyway).
Rename Ursula_RPC options to RO400.
Put duplicate documentation in the attic.
Allow -2 or -1 as the iconbar handle in Wimp_ResizeIcon (ticket #203).
Tighten up the list terminator check in the DebugMemory switch of Memory.s

Tested on RISC OS 3.10 (emulated), 3.50, 3.60, 3.70, 4.02.

Version 5.24. Tagged as 'Wimp-5_24'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; this OS_Module equivalent looks at ptr-4 which the Heap Manager uses
; to store the real size of the block. In this way the memory use is
; more efficient (especially when extending a block) and RMA should
; fragment less often.

        [ DebugMemory

debug_memory
        DCB     "WIMP memory debugging",0
        ALIGN

XROS_Module Entry
        TEQ     R0,#6
        TEQNE   R0,#7
        TEQNE   R0,#13

        LDREQB  R14,reentrancyflag
        TEQEQ   R14,#0
        SWINE   XOS_Module
        EXIT    NE

        TEQ     R0,#6
        BEQ     ros_claim
        TEQ     R0,#7
        BEQ     ros_free
; extend

; check to see if on claim list
        CMP     R2,#-1
        MOVEQ   R0,#ModHandReason_Claim
        BLEQ    XROS_Module
        MOVEQ   R0,#ModHandReason_ExtendBlock
        EXITS   EQ

        Push    R0

        ADRL    R0,memory_claims
        LDR     R0,[R0]
        CMP     R0,#-1

        BEQ     %FT07
05
        LDR     R14,[R0],#8
        TEQ     R14,R2
        Push    R0,EQ

        BEQ     %FT09

        CMP     R14,#-1
        BNE     %BT05
        B       %FT07
09
        Push    "R3-R5"
        LDR     R4,[R2,#-8]
        LDR     R5,[R2,#-4]!
        ADD     R5,R5,R3                        ; R5 is proposed new size

        [ true
        CMP     R5,#4
        BLE     extend_to_zero                    ; shrunk to zero size.
        ]

        SUB     R4,R4,#4
        CMP     R4,R5
        CMPGE   R3,#0
        BLT     %FT02
        STR     R5,[R2],#4                      ; enough space so just store
        Pull    "R3-R5"
        CLRV

        ADD     SP,SP,#4
        Pull    R0

        EXITS
02
        SUB     R3,R5,R4
        MOV     R0,#ModHandReason_ExtendBlock
        SWI     XOS_Module
        STRVC   R5,[R2],#4
        Pull    "R3-R5"
        BVS     %FT95

        Pull    R0
        STR     R2,[R0,#-8]
        Pull    R0
        EXITS
95
        ADD     sp,sp,#8
        EXIT

extend_to_zero
        Pull    "R3-R5"
        CLRV
        ADD     SP,SP,#4
        ADD     R2,R2,#4
        MOV     R0,#ModHandReason_Free
        BL      XROS_Module
        MOV     R2,#-1
        Pull    R0
        EXITS

ros_free
;        STR     R2,[R2,#-4]!           ; uncomment for debugging

; check to see if on claim list
        Push    R0
        ADRL    R0,memory_claims
        LDR     R0,[R0]
        CMP     R0,#-1

        BEQ     %FT07

05
        LDR     R14,[R0],#8
        TEQ     R14,R2
        BEQ     %FT09

        CMP     R14,#-1
        BNE     %BT05
07
; oh dear, trying to free something that didn't exist
        LDR     R0,[SP,#4]                 ; pc
        BIC     R0,R0,#&fc000003

        Push    R1-R7
        SUB     SP,SP,#256
        MOV     R1,SP
        MOV     R2,#16
        SWI     XOS_ConvertHex8
        ADD     R1,sp,#16
        MOV     R2,#16
        LDR     R0,[sp,#256+4]
        SWI     XOS_ConvertHex8
        ADR     R1,noclaim+4
        MOV     R0,#0
        ADD     R2,SP,#32
        MOV     R3,#224
        ADD     R4,SP,#16
        MOV     R5,sp
        MOV     R6,#0
        MOV     R7,#0
        SWI     XMessageTrans_Lookup
        ADD     R0,SP,#28
        MOV     R1,#1
        MOV     R2,#0
        SWI     Wimp_ReportError
        ADD     SP,SP,#256
        Pull    R1-R7
        SETV
        ADD     SP,SP,#4
        EXIT

09
        Push    R1
        SUB     R1,R0,#8                        ; remove entry
14
        LDR     R14,[R0],#4
        STR     R14,[R1],#4
        CMP     R14,#-1
        BNE     %BT14
        Pull    R1
        Pull    R0

        SUB     R2,R2,#4
        SWI     XOS_Module
        EXIT    VS

        Push    "R0-R3"
        ADRL    R0,memory_claims
        LDR     R1,[R0,#4]                      ; need area number
        LDR     R2,[R0]
        MOV     R0,#ModHandReason_ExtendBlock
        MOV     R3,#-8
        BL      ExtendList
        Pull    "R0-R3"
        EXITS

ros_claim
        ADD     R3,R3,#4
        SWI     XOS_Module
        EXIT    VS

        STR     R3,[R2],#4                      ; so modptr-4 = ammount asked for + 4
        SUB     R3,R3,#4                        ; needs to be preserved

; add address to list of claims
        Push    R0-R1
        ADRL    R0,memory_claims
; will be -1 to start with
        Push    "R1-R3,R8"
        LDR     R2,[R0]
        LDR     R1,[R0,#4]
        CMP     R1,#-1
        BNE     %FT99

        MOV     R0,#ModHandReason_Claim
        MOV     R3,#16
        ADR     R8,debug_memory

        BL      ExtendList

        MOV     R14,#-1
        STR     R14,[R2]

        ADRL    R0,memory_claims
        STR     R1,[R0,#4]                      ; area number
        STR     R2,[R0]
        MOV     R0,R2
        Pull    "R1-R3,R8"
        B       %FT05

99
        MOV     R0,#ModHandReason_ExtendBlock
        MOV     R3,#8
        CLRV
        BL      ExtendList

        Pull    "R1-R3,R8",VS
        BVS     %FT08

        MOV     R0,R2
        Pull    "R1-R3,R8"
05
        LDR     R14,[R0],#8
        CMP     R14,#-1
        BNE     %BT05

        STR     R2,[R0,#-8]
        LDR     R1,[sp,#8]                      ; pc
        STR     R1,[R0,#-4]
        STR     R14,[R0]
08
        Pull    R0-R1

        EXITS

noclaim
        DCD     0
        DCB     "DF:An area (%0) which has already been freed (or not previously claimed) has tried to be freed from %1.",0

ExtendList
        EntryS
        MOV     R14,#1
        STRB    R14,reentrancyflag
        BL      Dynamic_Module
        MOV     R14,#0
        STRB    R14,reentrancyflag
        EXITV

        |

XROS_Module EntryS
        TEQ     R0,#6
        TEQNE   R0,#7
        TEQNE   R0,#13
        SWINE   XOS_Module
        EXIT    NE
        TEQ     R0,#6
        BEQ     ros_claim
        TEQ     R0,#7
        BEQ     ros_free
; extend
        Push    "R3-R5"
        LDR     R4,[R2,#-8]
        LDR     R5,[R2,#-4]!
        ADD     R5,R5,R3                        ; R5 is proposed new size
        SUB     R4,R4,#4
        CMP     R4,R5
        CMPGE   R3,#0
        BLT     %FT02
        STR     R5,[R2],#4                      ; enough space so just store
        Pull    "R3-R5"
; can never error
        EXITS
02
        SUB     R3,R5,R4
        SWI     XOS_Module
        STRVC   R5,[R2],#4
        Pull    "R3-R5"
        EXITS   VC
        EXIT


ros_free
        SUB     R2,R2,#4
        SWI     XOS_Module
        EXITS   VC
        EXIT

ros_claim
        ADD     R3,R3,#4
        SWI     XOS_Module
        STRVC   R3,[R2],#4                      ; so modptr-4 = ammount asked for + 4
        SUB     R3,R3,#4                        ; needs to be preserved
        EXITS   VC
        EXIT
        ]

; provide OS_Heap memory facilities with a dynamic area
; entry R0 - reasoncode
;       R1 - area to use
;       R2 - pointer to memory
;       R3 - size
;       R8 - string for TM
; exit  R2 updated, and possibly R1

      [ Medusa
                      ;max size of dynamic area (-1 would be very wasteful of address space on big machines)
                      GBLA    WimpSpritePoolMaxSize
WimpSpritePoolMaxSize SETA    16*1024*1024
      ]

Dynamic_Module
        Push    lr
      [ :LNOT:Medusa
        BL      XROS_Module
        MOV     R1,R2
        Pull    PC

      | ; Medusa
05
        Push    "R0-R9"
        MOV     R14,#1
        STRB    R14,memoryOK
        TEQ     R0,#ModHandReason_ExtendBlock
        BNE     %FT10
; do we need to increase size of area?
        LDR     R4,[R2,#-8]                     ; maximum size currently
        LDR     R5,[R2,#-4]                     ; current used size
        Debug   nk,"Extend Area (max size, used size, change) ",R4,R5,R3
        ADD     R5,R5,R3                        ; proposed new size
        CMP     R4,R5
        BLT     %FT05
        CMP     R3,#0
        BLT     %FT02
        STR     R5,[R2,#-4]
        CLRV
        B       %FT95
02
; change is negative so try and shrink by proposed size - total size
        MOV     R0,R1
        SUB     R1,R5,R4
        Debug   nk,"Sprite area (at,increase) ",R2,R1
        SWI     XOS_ChangeDynamicArea
        Debug   nk,"actual change",R1
        STRVC   R5,[R2,#-4]
        SUBVC   R4,R4,R1                        ; remember R1 is +ve
        STRVC   R4,[R2,#-8]
        B       %FT95
05
        MOV     R0,R1
        SUB     R1,R5,R4

        Debug   nk,"Sprite area (at,increase) ",R2,R1

        SWI     XOS_ChangeDynamicArea
        Debug   nk,"actual change",R1

        STRVC   R5,[R2,#-4]
        ADDVC   R4,R4,R1
        STRVC   R4,[R2,#-8]
        B       %FT95
10
        TEQ     R0,#ModHandReason_Claim
        BNE     %FT20
        MOV     R0,#0
        ADD     R2,R3,#8                        ; need two more words
        MOV     R3,#-1
        MOV     R4,#128                         ; not dragable
        MOV     R5,#WimpSpritePoolMaxSize
        ADRL    R6,wimp_area_handler
        MOV     R7,R12
        SWI     XOS_DynamicArea
        BVS     %FT95
; now have to find out how much space was actually allocated
        STR     R1,[sp,#4]
        MOV     R0,R1                           ; area number
        SWI     XOS_ReadDynamicArea
        SUB     R1,R1,#8
        STR     R1,[R0]                         ; Area+0 is current allocated size
        LDR     R1,[sp,#12]
        STR     R1,[R0,#4]                      ; Area+4 is current 'claimed' size
        B       %FT95
20
        TEQ     R0,#ModHandReason_Free
        BNE     %FT98
        MOV     R0,#1
        SWI     XOS_DynamicArea
        B       %FT98
95
        LDRVC   R0,[sp,#4]
        SWIVC   XOS_ReadDynamicArea
        ADDVC   R0,R0,#8                        ; first two words are for 'book-keeping'
        STRVC   R0,[sp,#8]                      ; so R2 always -> area
98
        MOV     R1,#0
        STRB    R1,memoryOK
        STRVS   R0,[SP]

        Pull    "R0-R9,PC"

      ]

        END

@


4.6
log
@  Given a good thrashing.
Detail:
  All pointers passed to the Wimp (mode selectors, menus, sprite areas,
  palettes, pollwords, validation strings, message lists, routines etc etc)
  in any of its APIs can now be anywhere within the 32-bit address range.
  In general, whenever "<= 0" was accepted as a null condition, the value
  must now be either 0 or -1. It should also be tolerant of system memory
  areas (supervisor stack and RMA) being in the top half of memory.
  Also:
  * Default next slot now a build option - Ursula builds (eg Tungsten) use
    1024K instead of 640K
  * Ursula builds no longer have a build variant in the help string
  * Autosenses ROM location
  * CR-LFs in *Configure messages replaced with LF-CRs
  * Added Iyonix resources (currently based on Morris4)
  * Morris4 sprites files have gained file_lxa, small_lxa, file_unf,
    small_unf and lo!help sprites
  * Ursula sprites files have gained lo!help sprites
  * *WimpSlot can take memory sizes in megabytes or gigabytes
Admin:
  Tested on a "traditional" memory-mapped Tungsten.

Version 4.76. Tagged as 'Wimp-4_76'
@
text
@d53 1
a53 1
        CMP     R0,#nullptr
d55 1
a55 1
        BLE     %FT07
d123 1
a123 1
        CMP     R0,#0
d125 1
a125 1
        BLE     %FT07
@


4.5
log
@  Made 32-bit compatible.
Detail:
  Lots of little changes throughout a lot of source.
Admin:
  Appears to work - not stress tested with things like lots of tasks, big
  transfers, and all the other things that tend to go wrong.

Version 4.47. Tagged as 'Wimp-4_47'
@
text
@d53 1
a53 1
        CMP     R0,#0
@


4.4
log
@Adapted assembly process so that the choice of Options file (previously based
purely on the "System" variable) can be overridden by passing "OPTIONS=foo" as
an argument to either MkRom, or to amu/amu_machine directly, or indirectly,
by specifying it in the components file for a build. To accomplish this, it
was necessary to switch from using aasm to objasm - hence the large number of
source files affected in this commit.

Version 4.09. Tagged as 'Wimp-4_09'
@
text
@d256 1
a256 1
        Push    R14
d262 1
a262 2
        Pull    PC,VC,^
        Pull    PC
d266 1
a266 1
XROS_Module Entry
d332 1
a332 2
        Pull    PC,VS
        Pull    PC,,^
d414 1
a414 2
        Pull    "R0-R9,PC",VS
        Pull    "R0-R9,PC",,^
@


4.3
log
@Ursula branch Wimp merged back onto trunk.
@
text
@d26 1
a26 1
XROS_Module ENTRY
d267 1
a267 1
XROS_Module ENTRY
@


4.2
log
@ARTtmp branch folded in
@
text
@d322 6
d386 1
a386 1
        MOV     R5,#-1
@


4.2.2.1
log
@ - corrected comments re Wimp08 versus Wimp08s
 - tidied up Wimp08s
 - Added optional use of kernel lock for Wimp_ClaimFreeMemory, controlled
   by KernelLocksFreePool in Options (currently true for Ursula only)
 - restricted max size of Wimp Sprite Pool dynamic area to 16M (controlled
   by WimpSpritePoolMaxSize in s.Memory) to avoid wasted address space on
   large memory machines
@
text
@a321 6
      [ Medusa
                      ;max size of dynamic area (-1 would be very wasteful of address space on big machines)
                      GBLA    WimpSpritePoolMaxSize
WimpSpritePoolMaxSize SETA    16*1024*1024
      ]

d380 1
a380 1
        MOV     R5,#WimpSpritePoolMaxSize
@


4.1
log
@Initial revision
@
text
@d324 1
a324 2
        MedusaOS
        BEQ     %FT05
d329 2
d406 2
a407 2
        MOV     R0,#0
        STRB    R0,memoryOK
d413 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.1.2.1
log
@Added support for multiple options files (RO310, RO350, RO360, RO370, RCA,
Ursula).
Removed run-time MedusaOS checks.
Enabled correct build for RISC OS 3.1 machines.
Ensured that "freepoolinuse" is cleared before OS_ChangeDynamicArea
is intercepted.
Increased maxrects to 256.
Gave copy filter window handle in R10 (if ChildWindows).
Corrected a few border problems when no toolsprites.
Made toolsprites press in immediately - in particular close and toggle can
now be highlighted.
BounceClose flag no affects all of back,close,iconise and toggle.
Made "L" validation string parsing check manually for presence of a number,
to prevent error from OS_ReadUnsigned trashing MessageTrans' error buffers.
Allow error box buttons to stretch to fit text.
Fixed bug: floating point registers were not being saved unless on a portable.
Integrated some of the Wimp_TransferBlock fixes into Wimp08 from Wimp08s.
@
text
@d324 2
a325 1
      [ :LNOT:Medusa
a329 2

      | ; Medusa
d405 2
a406 2
        MOV     R1,#0
        STRB    R1,memoryOK
a411 1
      ]
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
