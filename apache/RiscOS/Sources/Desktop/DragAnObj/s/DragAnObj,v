head	4.10;
access;
symbols
	DragAnObj-0_09-2:4.10
	DragAnObj-0_09:4.9
	RO_5_07:4.8
	DragAnObj-0_08:4.8
	DragAnObj-0_07:4.6
	dellis_autobuild_BaseSW:4.5
	DragAnObj-0_06:4.5
	DragAnObj-0_05:4.4
	sbrodie_sedwards_16Mar2000:4.3
	dcotton_Ursula_merge:4.2
	dcotton_Spin_merge:4.1.7.1
	DragAnObj-0_04:4.3
	dcotton_autobuild_BaseSW:4.6
	nturton_DragAnObj-0_03:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	nicke_DragAnObj_0_02:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.10
date	2011.08.04.20.21.06;	author jlee;	state Exp;
branches;
next	4.9;
commitid	prO0hmbt5J9Kueuv;

4.9
date	2005.04.26.14.27.37;	author kbracey;	state Exp;
branches;
next	4.8;

4.8
date	2002.11.27.18.57.19;	author kbracey;	state Exp;
branches;
next	4.7;

4.7
date	2002.11.12.20.03.06;	author rsprowson;	state Exp;
branches;
next	4.6;

4.6
date	2001.03.16.17.10.07;	author sbrodie;	state Exp;
branches;
next	4.5;

4.5
date	2000.07.24.14.52.11;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	2000.07.24.12.56.13;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.11.05.09.43.22;	author dcotton;	state Exp;
branches;
next	4.2;

4.2
date	97.01.02.16.48.25;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.29.12;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.29.12;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.26.32;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.14.48;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.15.10;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Update to use OSRSI6 header
Detail:
  s/DragAnObj - Updated to use OSRSI6 header for OS_ReadSysInfo 6 reason code instead of a magic number
Admin:
  Tested on rev A2 BB-xM.
  Not tagged.


Version 0.09. Not tagged
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; DragAnObject
;
; purpose: Drags arbirary objects using dragasprite
;
; author: N Kelleher
;
; history: 28-06-94  0.01  created from original prototype
;

        GET     hdr:ListOpts
        GET     hdr:Macros
        GET     hdr:System
        GET     hdr:ModHand
        GET     hdr:Services
        GET     hdr:Proc
        GET     hdr:Wimp
        GET     hdr:Sprite
        GET     hdr:DragASprit
        GET     hdr:MsgTrans
        GET     hdr:FSNumbers
        GET     hdr:NewErrors
        GET     hdr:OSRSI6
        GET     VersionASM

Flag_Function   *       1:SHL:16
Flag_SVC        *       1:SHL:17
Flag_User       *       1:SHL:18

;;-----------------------------------------------------------------------------
;; Define the workspace layout
;;-----------------------------------------------------------------------------


;; Our workspace (private word addresses)


MySWIBase       *       DragAnObjectSWI_Base

;;-----------------------------------------------------------------------------
;; Module header
;;-----------------------------------------------------------------------------

        AREA  |DragAnObj$$Code|, CODE, READONLY, PIC

module_base
        & 0                             ; not an application
        & 0
        & 0
        & 0

        & title -module_base
        & help -module_base
        & 0                             ; no commands
        & MySWIBase
        & swidecode - module_base
        & swinames - module_base
        & 0
  [ :LNOT: No32bitCode
        & 0
        & flags -module_base
  ]

help    = "Drag An Object",9,"$Module_HelpVersion",0
        ALIGN

;;-----------------------------------------------------------------------------
;;-----------------------------------------------------------------------------

        MACRO
        ReadModeVar     $n
        MOV     R0,#-1
        MOV     R1,#$n
        SWI     XOS_ReadModeVariable
        MEND


swidecode
        ; Fast dispatch as we only have two SWIs
        CMP     R11,#1
        BLO     SWIDragAnObjectStart
        Push    "lr"
        BHI     swidecode_badswi
        SWI     XDragASprite_Stop
        Pull    "pc"

swidecode_badswi
        ADR     r0, ErrorBlock_BadSWI
        MOV     r1, #0
        MOV     r2, #0
        MOV     r3, #0
        ADR     r4, title
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "pc"

ErrorNumber_BadSWI * &1E6
        MakeInternatErrorBlock BadSWI, noalign

title
swinames
        DCB     "DragAnObject",0
        DCB     "Start",0
        DCB     "Stop",0
        DCB     0
my_sp
        DCB     "0",0
        ALIGN

  [ :LNOT: No32bitCode
flags   DCD     ModuleFlag_32bit
  ]

; bbox
xmin    RN      R4
ymin    RN      R5
xmax    RN      R6
ymax    RN      R7


        ^ -12 ,R12
words   #       4
area1   #       4
area2   #       4

SWIDragAnObjectStart
        Entry   "R0-R10"                        ; SWI should preserve all registers unless error
        MOV     R12,R13
        MOV     R1,#0
        Push    "R1"                            ; our variables for memory storage
        Push    "R1"
        Push    "R1"

; R3 -> box we're going to drag
        LDMIA   R3,{xmin-ymax}

        MOV     R10,#0
        ADR     R1,area1                        ; init updates store
        BL      initarea

        MOV     R10,#1
        ADR     R1,area2
        BL      initarea

        LDR     R1,area2
        MOV     R2,#-1
        BL      setarea

        MOV     R2,#0
        LDR     R1,area1
        BL      setarea

        BL      output
        LDR     R1,area2
        BL      output

        LDR     R2,area1
        BL      writemask

        LDR     R2,area2                        ; no longer required
        MOV     R0,#ModHandReason_Free
        SWI     XOS_Module
        MOV     R0,#0
        STR     R0,area2

        LDR     R0,[R12, #Proc_RegOffset]
        LDR     R3,[R12, #Proc_RegOffset + 12]
        LDR     R4,[R12, #Proc_RegOffset + 16]
        LDR     R1,area1
        ADR     R2,my_sp

        MOV     R0,R0,LSL #16                   ; top 16 flags are reserved
        MOV     R0,R0,LSR #16                   ; for us; clear for DragASprite
        SWI     XDragASprite_Start

daoexit
        STRVS   R0,[R12]
        SavePSR R4                              ; preserve error condition

        LDR     R2,area1
        TEQ     R2,#0
        MOVNE   R0,#ModHandReason_Free
        SWINE   XOS_Module                      ; ignore errors as we're trying to free up memory

        LDR     R2,area2
        TEQ     R2,#0
        MOVNE   R0,#ModHandReason_Free
        SWINE   XOS_Module                      ; ignore errors as we're trying to free up memory

        MOV     R13,R12
        RestPSR R4,,f                           ; restore error condition
        NOP
        EXIT

initarea
; R1 -> sprite area
        Push    "R0-R3,lr"

        MOV     R0,#ModHandReason_Claim
        BL      workoutsize
        SWI     XOS_Module

        STRVC   R2,[R1]
        STRVC   R3,[R2,#saEnd]
        MOVVC   R0,#16
        STRVC   R0,[R2,#saFirst]
        LDRVC   R0,=SpriteReason_ClearSprites + 256
        MOVVC   R1,R2
        SWIVC   XOS_SpriteOp

        ADRVC   R2,my_sp
        LDRVC   R0,=SpriteReason_GetSpriteUserCoords + 256
        MOVVC   R3,#0                           ; no palette
        SWIVC   XOS_SpriteOp
        BVS     daoexit

        TEQ     R10,#1                           ; no mask required?

        ADRNE   R2,my_sp
        LDRNE   R0,=SpriteReason_CreateMask + 256
        SWINE   XOS_SpriteOp
        BVS     daoexit

        LDR     R0,[R1,#saEnd]                  ; shrink it down.
        LDR     R3,[R1,#saFree]
        SUB     R3,R3,R0

        MOV     R0,#ModHandReason_ExtendBlock
        MOV     R2,R1
        SWI     XOS_Module

        LDRVC   R0,[sp,#4]
        STRVC   R2,[R0]                         ; just in case its moved

        Pull    "R0-R3,PC"

        MACRO
$lab    spritedata      $area,$out,$end
$lab
        LDR     $out,[$area,#saFirst]
        ADD     $out,$out,$area                         ; pointer to first sprite
        LDR     R14,[$out,#spImage]
        LDR     $end,[$out,#spTrans]
        TEQ     $end,R14
        LDREQ   $end,[$out,#spNext]
        ADD     $end,$end,$out
        SUB     $end,$end,#4
        ADD     $out,$out,R14

        MEND

setarea
; R2 = value to set sprite words to
; R1 -> sprite area
        Push    "R0-R3,lr"
        spritedata      R1,R3,R0

05
        STR     R2,[R3],#4
        CMP     R3,R0
        BLE     %BT05

        Pull    "R0-R3,PC"

output
; R1 -> sprite area
        Push    "R0-R3,lr"

        ADR     R2,my_sp
        LDR     R0,=SpriteReason_SwitchOutputToSprite + 256
        MOV     R3,#0                                           ; no save area yet!
        SWI     XOS_SpriteOp
        BVS     daoexit

        BL      setupvduvars
        BL      render

        LDR     R0,=SpriteReason_SwitchOutputToSprite + 256     ; try and switch back
                                                                ; even if error?
        SWI     XOS_SpriteOp

        Pull    "R0-R3,PC"

setupvduvars
; after switching output to a sprite, the vdu 5 char size is reset to the kernel default
; the wimp expects differently! To get Wimp_PlotIcon to work properly this needs changing.
        Push    "R0-R3,lr"
; dodgy bit of code from the wimp sources (02)
; builds a VDU 23,17,7,flags,x;y;0,0     - see PRM 1-600
        ReadModeVar 4
        MOV     r3,r2
        ReadModeVar 5
        MOV     r1,#16

        MOV     r1,r1,ASR r3
        MOV     r3,#32 :SHL: 16
        ORR     r1,r1,r3, ASR r2                ; build up x;y;

        LDR     r0,hdrword
        MOV     r2,#0
        Push    "r0-r2"
        MOV     r0,sp
        MOV     r1,#10
        SWI     XOS_WriteN
        ADD     sp,sp,#12

        Pull    "R0-R3,PC"

; vdu 23 sequence
hdrword
        DCB     23,17,7,6

render
; R12 -> regs stacked up
;   R0 -> DAS flags except bit 16-18 give call information
;   R1 -> render func or SWI no.
;   R2 -> regs/params for call
; constructs SWI XXX Pull PC on stack
        Push    "R0-R10,lr"

        LDR     R0,[R12]
        TST     R0,#Flag_Function
        BNE     renderfunc

        LDR     R14,[R12,#8]
        LDMIA   R14,{R0-R9}
        LDR     R10,[R12,#4]
        SWI     XOS_CallASWI
        Pull    "R0-R10,PC"

; This was always somewhat broken. Stewart has "optimised" the code from
; its original form, not changing its broken meaning, which never matched
; the intent.
;
; Bit 17 clear was supposed to indicate "call me in user mode". What actually
; happened was R10 was set to 0, and you were called in SVC mode. This sort
; of worked, as long as you didn't call C library functions that cared about
; mode or accessed statics, and you didn't overflow your stack.
;
; But in a 32-bit system, R10 being 0 causes stack overflow errors, followed
; by aborts, as 0 looks higher than the SVC stack pointer.
;
; To fix at least this problem, R10 is now set to the hard bottom of the
; SVC stack for the "user mode" option. This will prevent overflow errors,
; and will cause aborts if anyone actually tries to get static relocation
; offsets. Otherwise we leave bit 17 as is, as who knows what potential
; clients may be doing, given our erratic behaviour. In particular a module
; client could conceivably be calling us with bit 17 clear.
;
; A new bit 18 now does a REAL call in user mode. User R10,R11,R13 are
; recovered from the SVC stack & banked registers and we switch to user mode.
; For this to work, whatever SWI veneer was used by the C program must have
; left R10 and R11 intact; _kernel_swi is fine, _swi was broken in RO 3.7
; but was fixed in the patches.
renderfunc
        TST     R0,#Flag_User
        BNE     renderuserfunc

        TST     R0,#Flag_SVC                                    ; Z set if notamod
        LDR     R14,[R12,#8]
        LDMIA   R14,{R0-R3}                                     ; only a1 - a4 under APCS

        Push    "R12"                                           ; APCS will trash this

        MOV     R10,sp, LSR #20                                 ; for stack limit checking
        MOV     R10,R10, LSL #20
        ADDNE   R10,R10,#540

        MOV     R14,PC
        LDR     PC,[R12,#4]
        Pull    "R12"
        Pull    "R0-R10,PC"

renderuserfunc
        MOV     R0,#6
        MOV     R1,#0
        MOV     R2,#OSRSI6_SVCSTK
        SWI     XOS_ReadSysInfo                                 ; Request SVC stack top
        MOVVS   R2,#&01C00000                                   ; If not available
        ADDVS   R2,R2,#&2000                                    ; assume old position
        SUB     R4,R2,#12                                       ; R4 -> user {R10,R11,R12}

        LDR     R5,[R12,#8]                                     ; R5 -> params

        Push    "R11-R12"                                       ; we'll trash these

        LDMIA   R4,{R10,R11}                                    ; restore user SL,FP

        SWI     XOS_LeaveOS                                     ; 32-bit systems use this
        TEQVSP  PC,#0                                           ; if it fails must be 26-bit

        LDMIA   R5,{R0-R3}                                      ; only a1 - a4 under APCS
        Push    "R14"                                           ; push user R14 onto user stack

        MOV     R14,PC
        LDR     PC,[R12,#4]                                     ; make the call

        Pull    "R14"                                           ; restore user R14

        SWI     XOS_EnterOS

        Pull    "R11-R12"
        Pull    "R0-R10,PC"

writemask
; R1,R2 -> sprite areas, update R2's mask
; can corrupt all regs
        Push    "R14"

        spritedata      R2,R4,R5
        spritedata      R1,R6,R0
        ADD     R8,R5,#4                                        ; mask is 4 bytes on.

        LDR     R14,[R2,#saFirst]
        ADD     R7,R2,R14
        LDR     R14,[R7,#spMode]
        CMP     R14,#256

        LDR     R14,[R7,#spWidth]
        ADD     R14,R14,#1
        STR     R14,words

        MOVLT   R7,#0                                           ; old or new style?

        MOV     R0,#-1
        MOV     R1,#9
        SWI     XOS_ReadModeVariable
; R2 has log2bpp

        MOV     R0,#1
        MOV     R2,R0, LSL R2
        MOV     R3,R0, LSL R2
        SUB     R3,R3,#1                                        ; R2 is amount to shift for each pixel
                                                                ; R3 is mask for each pixel

        TEQ     R7,#0
        BEQ     samedepth

onedeep
; the mask and sprite have different depths
        CMP     R4,R5
        Pull    "PC",GT

        LDR     R7,words
01
        MOV     R10,#1                                          ; mask shift
        MOV     R9,#0                                           ; mask to write
03
        MOV     R11,#0                                          ; data shift
        LDR     R0,[R4],#4
        LDR     R1,[R6],#4

05
        AND     R14,R0,R3
        TEQ     R14,#0
        ANDEQ   R14,R1,R3
        TEQEQ   R14,R3                                           ; if both equal, then we didn't write in here
        ORRNE   R9,R9, R10

        MOV     R0,R0, LSR R2
        MOV     R1,R1, LSR R2
        MOV     R10,R10,LSL #1

        TEQ     R10,#0
        STREQ   R9,[R8],#4

        ADD     R11,R11,R2
        TEQ     R11,#32
        BNE     %BT05                                           ; still processing word

        SUBS    R7,R7,#1
        TEQNE   R10,#0
        BNE     %BT03

        TEQ     R7,#0
        BNE     %BT01

        TEQ     R10,#0
        STRNE   R9,[R8],#4                                      ; wont have been stored

        B       onedeep

samedepth
; the mask and sprite have the same depth
        LDR     R0,[R4],#4
        LDR     R1,[R6],#4
        MOV     R10,#0                                          ; mask shift
        MOV     R9,#0                                           ; mask to write
05
        AND     R14,R0,R3
        AND     R7,R1,R3
        TEQ     R14,#0
        TEQEQ   R7,R3                                           ; if both equal, then we didn't write in here
        ORRNE   R9,R9,R3, LSL R10
        MOV     R0,R0, LSR R2
        MOV     R1,R1, LSR R2
        ADD     R10,R10,R2
        TEQ     R10,#32
        BNE     %BT05
        STR     R9,[R8],#4
        CMP     R4,R5
        BLE     samedepth

        Pull    "PC"

workoutsize
; xmin-ymax have size in OS units
; R10 says whether mask (ie 2x required)
; R3 out has memory required.
        Entry   "R0-R2,R4-R5"
        SUB     R4,xmax,xmin
        SUB     R3,ymax,ymin

        MOV     R0,#-1
        MOV     R1,#9
        SWI     XOS_ReadModeVariable
        BVS     daoexit
        MOV     R5,R2

        MOV     R1,#4
        SWI     XOS_ReadModeVariable
        BVS     daoexit
        MOV     R4,R4, LSR R2                   ; x pixels
        MOV     R4,R4, LSL R5                   ; x bits

        MOV     R1,#5
        SWI     XOS_ReadModeVariable
        BVS     daoexit
        MOV     R3,R3, LSR R2                   ; y pixels

        ADD     R4,R4,#127
        BIC     R4,R4,#63
        MOV     R4,R4, LSR #3                   ; bytes per line

        MLA     R3,R4,R3,R4

        ADD     R3,R3,#64                      ; sprite overhead + a bit

        TEQ     R10,#1
        ADDNE   R3,R3,R3

        ADD     R3,R3,#64                       ; CB overhead...

        EXIT

        END
@


4.9
log
@The "call user mode function" option for DragAnObject has always been broken -
it has always actually called you in SVC mode. Despite this clients have
coped (such as Browse). But on 32-bit systems, this option leads to a
stack limit that looks higher than the (SVC) stack pointer, leading to
stack overflows and aborts. The module has been adjusted so that the stack
limit is set to the bottom of the SVC stack rather than 0 to fix this.

I've chosen not to fix this option to actually call clients in user mode, as
our broken behaviour may have led to broken clients with the option set wrong.

Instead, I've added a new flag bit 18 that indicates to really call the
client in user mode. Bit 17 should be clear if bit 18 is set. This recovers
sl,fp and sp from the SVC stack and calls the client. The environment should
be set up well enough to allow full access to user and C library statics.
For this to work, DragAnObject_Start must have been called in user mode
from an APCS program, and any SWI veneer used to issue the SWI must have
left R10 and R11 (sl & fp) intact. _kernel_swi is fine, and _swi is fine
except in an unpatched RISC OS 3.70/3.71.

Version 0.09. Tagged as 'DragAnObj-0_09'
@
text
@d36 1
d392 1
a392 1
        MOV     R2,#16
@


4.8
log
@DragAnObject_Stop wasn't working.

Version 0.08. Tagged as 'DragAnObj-0_08'
@
text
@d38 4
d186 2
a187 1
        BIC     R0,R0,#3:SHL:16
d329 1
a329 1
;   R0 -> DAS flags except bit 16 says function
d336 1
a336 1
        TST     R0,# 1:SHL:16
d345 24
d370 4
a373 1
        ANDS    R10,R0,#1:SHL:17                                ; R10=0 & Z set if notamod
d379 2
a380 2
        MOVNE   R10,sp, LSR #20                                 ; for stack limit checking
        MOVNE   R10,R10, LSL #20                                ; (R10 will be 0 if Z set)
d388 30
@


4.7
log
@Single character tweak so module title matches the SWI name and component
names.No version number change.
@
text
@d89 1
a89 1
        BCC     SWIDragAnObjectStart
d91 1
a91 1
        BCS     swidecode_badswi
@


4.6
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.07. Tagged as 'DragAnObj-0_07'
@
text
@d72 1
a72 1
help    = "Drag an Object",9,"$Module_HelpVersion",0
@


4.5
log
@  Fixed mis-optimisation in SWI dispatcher.
  Fixed dispatch of redraw routine.
Detail:
  The dispatch routine was horrendously complicated for no apparent
    reason.  Use of three conditionally executed instructions means
    that a single routine can be used instead of two very similar
    routines.
  Minor cockup with a condition code in the SWI dispatcher resulted in
    both DragAnObject_Start and DragAnObject_Stop simply calling
    DragASprite_Stop.  The _Start SWI does actually start a drag now.
  You get a proper error if you try to call any other DragAnObject SWIs.
Admin:
  Tested in desktop build - objects can be dragged now.

Version 0.06. Tagged as 'DragAnObj-0_06'
@
text
@d52 2
d72 1
a72 1
help    = "Drag an Object",9,"$Module_FullVersion ($Module_Date)",0
@


4.4
log
@  32-bit compatible.
  Improvements to SWI dispatcher (should be much faster now)
Detail:
  There's much less faffing about done in the SWI dispatcher - no need
    to set up fake return addresses and the like.  Amusingly it never
    generates errors because it fails to restore flags correctly on SWI
    exit which it had carefully remembered before freeing up memory.
Admin:
  Tested in desktop build.

Version 0.05. Tagged as 'DragAnObj-0_05'
@
text
@d87 1
a87 1
        BEQ     SWIDragAnObjectStart
d339 1
a339 1
        TST     R0,#1:SHL:17
a343 1
        BEQ     notamod
d345 3
a347 13
        MOV     R10,sp, LSR #20
        MOV     R10,R10, LSL #20
        ADD     R10,R10,#540

        LDR     R4,[R12,#4]                                     ; get code address

        ADR     r14, renderfuncreturn
        TEQ     pc, pc                                          ; in a 32-bit mode?  EQ if so
        BICNE   pc, r4, #ARM_CC_Mask                            ; in a 26-bit mode - strip flags
        MOV     pc, r4
renderfuncreturn
        Pull    "R12"
        Pull    "R0-R10,PC"
a348 2
notamod
        MOV     R10,#0                                          ; for stack limit checking
@


4.3
log
@Merged Spinner and Ursula branches. Changed to use srccommit.

Version 0.04. Tagged as 'DragAnObj-0_04'
@
text
@a28 1
        GET     hdr:Switcher
d33 4
a36 1
	GET	VersionASM
d64 5
a69 1
title   = "DragAnObject",0
a72 2


d85 3
d89 3
d93 11
a103 11
        CMP     R11,#2
        ADDCC   R14,R11,#(jptable-Exit-4)/4    ; bodge factor
        ADDCC   PC,PC,R14,ASL #2                ; go!

Exit
        Pull    "PC"

jptable
        B       SWIDragAnObjectStart
        B       SWIDragAnObjectStop

d105 2
d108 1
d114 2
a115 1

d118 3
a120 3
SWIDragAnObjectStop
        SWI     XDragASprite_Stop
        B       Exit
d135 1
a135 1
        Push    "R0-R10"                        ; SWI should preserve all registers unless error
d174 3
a176 3
        LDR     R0,[R12]
        LDR     R3,[R12,#12]
        LDR     R4,[R12,#16]
d185 1
a185 1
        MOV     R4,PC                           ; preserve error condition
d198 3
a200 7
        MOV     R14,R4                          ; restore error condition, why are we exiting?
        Pull    "R0-R10"
        B       Exit

my_sp
        DCB     "0",0
        ALIGN
a290 3
retins
        Pull    "PC"

a331 1
  [ {TRUE}  ;StrongARM - avoid dynamic code
a336 18
  |
        LDR     R0,retins
        Push    "R0"
        LDR     R14,[R12,#8]
        LDMIA   R14,{R0-R9}

        LDR     R14,[R12,#4]
        ORR     R14,R14,#&EF000000                              ; construct a SWI ins
        Push    "R14"
        Push    "PC"

        MOV     PC,SP                                           ; call our routine
        NOP

        ADD     SP,SP,#8                                        ; skip routine

        Pull    "R0-R10,PC"
  ]
d350 1
a350 5
        LDR     R4,[R12,#4]
        MOV     R5,PC
        MOV     R6,#&03fffffc
        BIC     R5,R5,R6
        ORR     R4,R4,R5
d352 5
a356 3
        MOV     R14,PC
        MOVS    PC,R4
        NOP
a363 1
        NOP
d473 1
a473 1
        Push    "R0-R2,R4-R5,LR"
d498 1
a498 2
        ADD     R3,R3,#1
        MUL     R3,R4,R3
d507 1
a507 1
        Pull    "R0-R2,R4-R5,PC"
@


4.2
log
@Using StrongARM version
@
text
@d15 1
a15 1
; DragAnObject 
d34 2
a35 1
        
d52 1
a52 1
        & 0             
d64 1
a64 1
help    = "Drag an Object",9,"0.03 (23 Apr 1996)",0
d71 1
a71 1
      
d79 2
a80 2
       
swidecode                    
d101 2
a102 2
        
        ALIGN      
d107 1
a107 1
        
d125 2
a126 2
        Push    "R1"                                                              
        Push    "R1"                                                              
d156 1
a156 1
        SWI     XOS_Module 
d169 1
a169 1
daoexit 
d186 1
a186 1
        B       Exit    
d217 1
a217 1
        LDRNE   R0,=SpriteReason_CreateMask + 256        
d239 1
a239 1
        LDR     R14,[$out,#spImage]    
d267 1
a267 1
        LDR     R0,=SpriteReason_SwitchOutputToSprite + 256        
d270 1
a270 1
        BVS     daoexit                                                            
d276 1
a276 1
                                                                ; even if error?   
d279 1
a279 1
        Pull    "R0-R3,PC"        
d281 2
a282 2
retins  
        Pull    "PC"        
d284 1
a284 1
setupvduvars              
d308 1
a308 1
                         
d317 1
a317 1
;   R2 -> regs/params for call                                                    
d319 1
a319 1
        Push    "R0-R10,lr"                    
d343 1
a343 1
        NOP              
d361 1
a361 1
        
d370 1
a370 1
        NOP          
d381 1
a381 1
  
d391 1
a391 1
        
d402 1
a402 1
        
d407 1
a407 1
                             
d416 1
a416 1
                      
d436 1
a436 1
        ORRNE   R9,R9, R10   
d448 2
a449 2
             
        SUBS    R7,R7,#1     
d472 1
a472 1
        ORRNE   R9,R9,R3, LSL R10                                              
d522 1
a522 1
                  
@


4.1
log
@Initial revision
@
text
@d63 1
a63 1
help    = "Drag an Object",9,"0.02 (28 Sep 1994)",0
d323 8
a330 1
                                   
d347 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d63 1
a63 1
help    = "Drag an Object",9,"0.03 (23 Apr 1996)",0
d323 1
a323 8

  [ {TRUE}  ;StrongARM - avoid dynamic code
        LDR     R14,[R12,#8]
        LDMIA   R14,{R0-R9}
        LDR     R10,[R12,#4]
        SWI     XOS_CallASWI
        Pull    "R0-R10,PC"
  |
a339 1
  ]
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
