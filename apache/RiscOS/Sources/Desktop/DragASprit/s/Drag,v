head	4.6;
access;
symbols
	DragASprit-0_21:4.6
	DragASprit-0_20:4.6
	DragASprit-0_19:4.6
	DragASprit-0_18:4.5
	DragASprit-0_17:4.4
	DragASprit-0_16:4.4
	RO_5_07:4.3
	DragASprit-0_15:4.3
	dellis_autobuild_BaseSW:4.2
	DragASprit-0_14:4.2
	sbrodie_sedwards_16Mar2000:4.1
	Ursula_merge:4.1
	DragASprit-0_13:4.1
	dcotton_autobuild_BaseSW:4.3
	nturton_DragASprit-0_11:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_DragASprite_0_11:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rleggett_DragASprit-0_13:4.1
	bavison_DragASprite-0_12:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2014.07.05.12.06.16;	author jlee;	state Exp;
branches;
next	4.5;
commitid	LoVRzNlwqbCyubHx;

4.5
date	2014.07.03.22.40.09;	author jlee;	state Exp;
branches;
next	4.4;
commitid	Wvkrnx3yQXMZ3ZGx;

4.4
date	2013.10.07.00.48.32;	author jlee;	state Exp;
branches;
next	4.3;
commitid	VmHZmrpDtev8si8x;

4.3
date	2001.03.16.17.09.41;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.04.20.15.57.17;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.29.14;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.29.14;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.26.41;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.15.09;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.15.20;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Fix flickery drags. Tweak translucent drop shadows.
Detail:
  s/Drag - When moving the dragged sprite, avoid plotting over the top of its old location in order to prevent flicker caused by overdraw. This flicker wasn't so apparent with the older translucent or hatched sprite plotting, but is a lot more noticeable with ABGR sprites.
  s/StartUp - Use 50% alpha for the ABGR sprite in true colour modes, to match hatching & non-drop shadow variants. Also make the drop shadow completely invisible when behind the sprite - better than having it there but making it almost completely imperceptible in order to try and hide the fact that it always looks a bit funny
Admin:
  Tested on Iyonix


Version 0.19. Tagged as 'DragASprit-0_19'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; b/g(0) is the b/g behind the plotted sprite

; unplot:
;       Plot the b/g sprite at the relevant location
UnPlot  Entry   "r0-r11"
        BL      DoBusinessToDest

 [ debugdrag
        BVS     %FT01
        DLINE   "UnPlot"
01
 ]

        MOVVC   r3, r0
        MOVVC   r4, r1
        LDRVC   r0, =SpriteReason_PutSpriteUserCoords + &100
        LDRVC   r1, bg0sa
        ADRVC   r2, bg_name
        MOVVC   r5, #0
        SWIVC   XOS_SpriteOp
        CLRV
        EXIT

; plot:
;       Grab the b/g sprite at the required location
;       Plot the f/g sprite at the required location
Plot    Entry   "r0-r11"

        MOV     lr, #0
        STRB    lr, FirstMoveIsPlot

        BL      DoBusinessToDest

 [ debugdrag
        BVS     %FT01
        DREG    r0, "Plot at ",cc
        DREG    r1, ","
01
 ]

        ; Grab bg0 from the screen
        MOVVC   r4, r0
        MOVVC   r5, r1
        SUBVC   r6, r2, #1
        SUBVC   r7, r3, #1
        BLVC    Getbg0
        BVS     %FT10

        ; Plot fg
        LDR     r1, fgsa
        ADRL    r2, fg_name
        MOV     r3, r4
        MOV     r4, r5
        MOV     r5, #8          ; Mask is used for transparency
        BL      TranslucentPlot

10
        CLRV
        EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; TranslucentPlot:
;
; In    r1-r5 set up for PlotSpriteUserCoords
; Out   R0 corrupt or error
;
TranslucentPlot ROUT
        Entry   "r5-r7"
        LDRB    r7, Translucency
        CMP     r7, #1
        BLT     %FT05
        ORRGT   r5, r5, r7, LSL #8
        ORREQ   r5, r5, #16+32
        MOV     r6, #0
        LDR     r7, fgtranstable
        LDR     r0, =SpriteReason_PutSpriteScaled + &100
        SWI     XOS_SpriteOp
        EXIT    VC
        ; Translucent plot failed - fall back to regular plotting for this drag
        ; This will almost certainly fail if this is an ABGR sprite, but should
        ; succeed for standard translucent plots
        STRB    r6, Translucency ; Disable translucency
        MOV     r6, #128
        STRB    r6, TranslucencyOK ; Reset SpriteExtend state (user may have downgraded?)
        AND     r5, r5, #&F
05
        LDR     r0, =SpriteReason_PutSpriteUserCoords + &100
        SWI     XOS_SpriteOp
        EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Move:
;
; In    r0-r3 = dst
;       r4-r7 = src
;
;       Grab bg1 (by GWindow escape) at dst
;       Plot bg0 to bg1 (bg0 at src, bg1 at dst)
;       Plot fg to bg0 (fg at dst, gb0 at src)
;       Plot fg to screen (fg at dst)
;       Plot bg0 to screen (bg0 at src)
;       Swap bg0 and bg1
;
Move
        Entry   "r0-r8" , 8*4

        ; If first action is move then it must be plot instead
        LDRB    lr, FirstMoveIsPlot
        TEQ     lr, #0
        PullEnv NE
        BNE     Plot

        BL      DoBusinessToDest
        BLVC    DoBusinessToSource
        STMIA   sp, {r0-r7}

        CMP     r0, r4
        CMPEQ   r1, r5
        CMPEQ   r2, r6
        CMPEQ   r3, r7
        EXIT    EQ

 [ debugdrag
        DLINE   "Move  ",cc
        LDR     r4, bl_offset_x
        DREG    r4, "x_o=",cc
        LDR     r4, bl_offset_y
        DREG    r4, " y_o="
 ]

        ; Grab bg1 (by GWindow escape) at dst
        MOV     r4, r0
        MOV     r5, r1
        MOV     r6, r2
        MOV     r7, r3
        BL      Getbg1

        ; Plot bg0 to bg1 (bg0 at src, bg1 at dst)

        ; Switch to bg1
        LDRVC   r1, bg1sa
        BLVC    SwitchOutputToSprite
        BVS     %FT95

        Push    "r0-r3"                 ; Details to restore back to screen

        ; Plot bg0
        LDR     r0, =SpriteReason_PutSpriteUserCoords + &100
        LDR     r1, bg0sa
        ADRL    r2, bg_name
        ADD     r14, sp, #4*4 + 4*4
        LDMIA   r14, {r3,r4}
        ADD     r14, sp, #4*4 + 0*4
        LDMIA   r14, {r5,r6}
        SUB     r3, r3, r5
        SUB     r4, r4, r6
        MOV     r5, #0
        SWI     XOS_SpriteOp
        BVS     %FT90

        ; Plot fg to bg0 (fg at dst, gb0 at src)

        ; Switch to bg0
        LDR     r1, bg0sa
        BL      SwitchOutputToSprite
        BVS     %FT90
        ; Don't save details as they refer to restoring back to bg1!

        ; Plot fg
        LDR     r1, fgsa
        ADRL    r2, fg_name
        ADD     r14, sp, #4*4 + 0*4
        LDMIA   r14, {r3,r4}
        ADD     r14, sp, #4*4 + 4*4
        LDMIA   r14, {r5,r6}
        SUB     r3, r3, r5
        SUB     r4, r4, r6
        MOV     r5, #8
        BL      TranslucentPlot
        BVS     %FT90

        ; Plot fg to screen (fg at dst)

        ; Switch back to the screen
        Pull    "r0-r3"
        SWI     XOS_SpriteOp
        BVS     %FT95

        ; Plot fg
        ; We clip around the old position to avoid flicker caused by overdraw
        BL      GetGWindow
        Push    "r0-r3"
        ; Check if src and dest overlap
        ADD     r0, sp, #16
        LDMIA   r0, {r0-r7}
        CMP     r4, r2
        CMPLT   r5, r3
        CMPLT   r0, r6
        CMPLT   r1, r7
        BGE     %FT15                   ; No overlap, skip clipping
        ; Draw top/bottom portion
        MOV     r6, r5                  ; r6 = bg0 bottom
                                        ; r7 = bg0 top
        MOV     r8, r3                  ; r8 = fg top
        LDMIA   sp, {r0-r3}             ; get gwindow
        CMP     r8, r7
        BEQ     %FT10
        MOVGT   r1, r7                  ; gwindow bottom = bg0 top
        SUBLT   r3, r6, #1              ; gwindow top = bg0 bottom
        BL      SetGWindow
        LDR     r1, fgsa
        ADRL    r2, fg_name
        ADD     r14, sp, #16
        LDMIA   r14, {r3,r4}
        MOV     r5, #8
        BL      TranslucentPlot
        ; Set alternate vertical clip ready for drawing left/right portion
        LDMIA   sp, {r0-r3}
        CMP     r8, r7
        SUBGT   r3, r7, #1              ; gwindow top = bg0 top
        MOVLT   r1, r6                  ; gwindow bottom = bg0 bottom
10
        ; Draw left/right portion
        LDR     r6, [sp, #16+16+0]      ; r6 = bg0 left
        LDR     r7, [sp, #16+16+8]      ; r7 = bg0 right
        LDR     r8, [sp, #16+8]         ; r8 = fg right
        CMP     r8, r7
        BEQ     %FT20
        MOVGT   r0, r7                  ; gwindow left = bg0 right
        SUBLT   r2, r6, #1              ; gwindow right = bg0 left
        BL      SetGWindow
15
        LDR     r1, fgsa
        ADRL    r2, fg_name
        ADD     r14, sp, #16
        LDMIA   r14, {r3,r4}
        MOV     r5, #8
        BL      TranslucentPlot
20
        Pull    "r0-r3"
        BL      SetGWindow

        ; Plot bg0 to screen (bg0 at src)

        ; Plot bg0
        LDR     r0, =SpriteReason_PutSpriteUserCoords + &100
        LDR     r1, bg0sa
        ADRL    r2, bg_name
        ADD     r14, sp, #4*4
        LDMIA   r14, {r3,r4}
        MOV     r5, #0
        SWI     XOS_SpriteOp
        BVS     %FT95

        ; Swap bg0 and bg1

        LDR     r0, bg0sa
        LDR     r1, bg1sa
        STR     r0, bg1sa
        STR     r1, bg0sa

        EXIT                    ; V clear

90
        ; Error switched to a sprite
        Pull    "r0-r3"
        SWI     XOS_SpriteOp
95
        CLRV
        EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Getbg0
;
; In    r4 = x0         inc
;       r5 = y0         inc
;       r6 = x1         exc
;       r7 = y1         exc
;
; Out   sprite bg gotten
;
Getbg0  Entry   "r0-r7"

 [ debugdrag
        DLINE   "Getbg0"
 ]

        ; Get the screen to bg1
        LDR     r0, =SpriteReason_GetSpriteUserCoords + &100
        LDR     r1, bg1sa
        ADRL    r2, bg_name
        MOV     r3, #0          ; no palette
        [ {FALSE}
; these cause breakage in EX0 EY0 modes
        SUB     r6, r6, #1
        SUB     r7, r7, #1
        ]
        SWI     XOS_SpriteOp

        ; Get the graphics window
        BLVC    GetGWindow
        EXIT    VS
        Push    "r0-r3"         ; current screen GWindow

        ; Switch output to bg0
        LDR     r1, bg0sa
        BL      SwitchOutputToSprite
        BVS     %FT90
        Push    "r0-r3"

        ; Set the gwindow in the switched area, bounded to the switched area

        ; Get the screen gwindow off the stack
        ADD     r14, sp, #4*4
        LDMIA   r14, {r0-r3}

        ; Correct for the redirection to the sprite
        SUB     r0, r0, r4
        SUB     r1, r1, r5
        SUB     r2, r2, r4
        SUB     r3, r3, r5

        ; Bound to the sprite
        CMP     r0, #0
        MOVLT   r0, #0
        CMP     r1, #0
        MOVLT   r1, #0
        SUB     r6, r6, r4
        SUB     r7, r7, r5
        CMP     r2, r6
        MOVGT   r2, r6
        CMP     r3, r7
        MOVGT   r3, r7

        ; Source clip if no intersection
        CMP     r0, r6
        CMPLE   r1, r7
        RSBLES  r14, r2, #0
        RSBLES  r14, r3, #0
        BGT     %FT10

        ; It intersects - set it
        BL      SetGWindow

        ; Plot the grabbed sprite
        LDRVC   r0, =SpriteReason_PutSpriteUserCoords + &100
        LDRVC   r1, bg1sa
        ADRVCL  r2, bg_name
        MOVVC   r3, #0          ; x coord
        MOVVC   r4, #0          ; y coord
        MOVVC   r5, #0          ; plot method (overwrite)
        SWIVC   XOS_SpriteOp

        BVS     %FT80

10
        ; Switch output back to the screen
        Pull    "r0-r3"
        SWI     XOS_SpriteOp

        ; Drop the original graphics window
        ADD     sp, sp, #4*4

        ; All done
        EXIT

80
        ; Error exit with output switched to the sprite
        STR     r0, [sp, #4*4]

        ; Switch output back to the screen
        Pull    "r0-r3"
        SWI     XOS_SpriteOp
        Pull    "r0-r3"

 [ debugdrag
        DLINE   "Urgk"
 ]
        EXIT

90

 [ debugdrag
        DLINE   "Urgk"
 ]
        ADD     sp, sp, #4*4
        EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Getbg1
;
; In    r4 = x0         inc
;       r5 = y0         inc
;       r6 = x1         exc
;       r7 = y1         exc
;
; Out   sprite bg gotten
;
Getbg1  Entry   "r0-r7"

 [ debugdrag
        DLINE   "Getbg1 ",cc
 ]

        ; Get the old gwindow
        BL      GetGWindow
        BVS     %FT90
        Push    "r0-r3"         ; The old gwindow

        ; Escape the GWindow to the whole screen
        BL      GetScreenGWindow
        BLVC    SetGWindow

        ; Get the screen to bg1
        LDRVC   r0, =SpriteReason_GetSpriteUserCoords + &100
        LDRVC   r1, bg1sa
        ADRVCL  r2, bg_name
        MOVVC   r3, #0          ; no palette
        SUBVC   r6, r6, #1      ; Translate to inclusive coords
        SUBVC   r7, r7, #1
        SWIVC   XOS_SpriteOp
        BVS     %FT85

        ; Restore the screen gwindow
        Pull    "r0-r3"
        BL      SetGWindow
        BVS     %FT90

 [ debugdrag
        DLINE   "done"
 ]

        ; All done
        EXIT

85
        ; Error exit with screen GWindow set
        STR     r0, [sp, #4*4 + 0*4]
        Pull    "r0-r3"
        BL      SetGWindow
        SETV
        LDR     r0, [sp]

90
        ; Error exit
        STR     r0, [sp, #0*4]
 [ debugdrag
        ADD     r1, r0, #4
        DSTRING r1, "exiting with error:"
 ]
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; GetGWindow
;
; In    -
;
; Out   r0-r3 are the graphics window
;
GetGWindow      Entry   "r4-r7", 6*4
        ADR     r0, GWindGetBlock
        MOV     r1, sp
        SWI     XOS_ReadVduVariables
        MOVVC   r0, #-1
        MOVVC   r1, #VduExt_XEigFactor
        SWIVC   XOS_ReadModeVariable
        MOVVC   r4, r2
        MOVVC   r1, #VduExt_YEigFactor
        SWIVC   XOS_ReadModeVariable
        MOVVC   r5, r2
        LDMVCIA sp, {r0-r3,r6,r7}

        ; gwindow is ic gwindow left shift by EigFactors, subtract the origin
        RSBVC   r0, r6, r0, ASL r4
        RSBVC   r1, r7, r1, ASL r5
        ADD     r2, r2, #1              ; Convert to external
        RSBVC   r2, r6, r2, ASL r4
        SUB     r2, r2, #1              ; Convert back to internal
        ADD     r3, r3, #1              ; Convert to external
        RSBVC   r3, r7, r3, ASL r5
        SUB     r3, r3, #1              ; Convert back to internal

 [ debuggwindow
        DREG    r0, "Current GWindow returned is ",cc
        DREG    r1, ",",cc
        DREG    r2, ",",cc
        DREG    r3, ","
 ]
        EXIT

GWindGetBlock
        DCD     VduExt_GWLCol
        DCD     VduExt_GWBRow
        DCD     VduExt_GWRCol
        DCD     VduExt_GWTRow
        DCD     VduExt_OrgX
        DCD     VduExt_OrgY
        DCD     -1

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; GetScreenGWindow
;
; In    -
;
; Out   r0-r3 are the gwindow to set for the whole screen
;
GetScreenGWindow Entry  "r4",2*4
        ; Get the graphics origin
        ADR     r0, GOrgGetBlock
        MOV     r1, sp
        SWI     XOS_ReadVduVariables

        ; Parameters for this mode
        MOVVC   r0, #-1

        ; Generate the Y upper limit in OS units, inclusive
        MOVVC   r1, #VduExt_YWindLimit
        SWIVC   XOS_ReadModeVariable
        ADDVC   r4, r2, #1
        MOVVC   r1, #VduExt_YEigFactor
        SWIVC   XOS_ReadModeVariable
        MOVVC   r3, r4, ASL r2
        SUBVC   r3, r3, #1

        ; Generate the X upper limit in OS units, inclusive
        MOVVC   r1, #VduExt_XWindLimit
        SWIVC   XOS_ReadModeVariable
        ADDVC   r4, r2, #1
        MOVVC   r1, #VduExt_XEigFactor
        SWIVC   XOS_ReadModeVariable
        MOVVC   r2, r4, ASL r2
        SUBVC   r2, r2, #1

        ; Correct for the graphics origin
        LDMVCIA sp, {r0,r1}
        SUBVC   r2, r2, r0
        SUBVC   r3, r3, r1
        RSBVC   r0, r0, #0
        RSBVC   r1, r1, #0

 [ debuggwindow
        DREG    r0, "Screen GWindow returned is ",cc
        DREG    r1, ",",cc
        DREG    r2, ",",cc
        DREG    r3, ","
 ]

        EXIT

GOrgGetBlock
        DCD     VduExt_OrgX
        DCD     VduExt_OrgY
        DCD     -1

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; SetGWindow
;
; In    r0-r3 the GWindow to set
;
; Out   The GWindow set
;
SetGWindow      Entry   "r6-r7"
 [ debuggwindow
        DREG    r0, "Setting GWindow ",cc
        DREG    r1, ",",cc
        DREG    r2, ",",cc
        DREG    r3, ","
 ]
        MOV     r7, #&ff
        MOV     r6, r0
        SWI     XOS_WriteI+24
        ANDVC   r0, r7, r6
        SWIVC   XOS_WriteC
        ANDVC   r0, r7, r6, LSR #8
        SWIVC   XOS_WriteC
        ANDVC   r0, r7, r1
        SWIVC   XOS_WriteC
        ANDVC   r0, r7, r1, LSR #8
        SWIVC   XOS_WriteC
        ANDVC   r0, r7, r2
        SWIVC   XOS_WriteC
        ANDVC   r0, r7, r2, LSR #8
        SWIVC   XOS_WriteC
        ANDVC   r0, r7, r3
        SWIVC   XOS_WriteC
        ANDVC   r0, r7, r3, LSR #8
        SWIVC   XOS_WriteC
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; SwitchOutputToSprite
;
; In    r1 -> sprite area to switch output to
;
; Out   r0-r3 Restore output parameters
;
SwitchOutputToSprite Entry
        LDR     r0, =SpriteReason_SwitchOutputToSprite + &100
        ADRL    r2, bg_name
        MOV     r3, #0          ; No save area
        SWI     XOS_SpriteOp
        EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; DoBusinessToDest
;
; In    r0-r3 destination of drag
;
; Out   r0-r3 sorted and rounded to pixels
;
DoBusinessToDest Entry  "r0-r5"

        ; Get the EigFactors
        MOV     r0, #-1
        MOV     r1, #VduExt_XEigFactor
        SWI     XOS_ReadModeVariable
        MOVVC   r4, r2
        MOVVC   r1, #VduExt_YEigFactor
        SWIVC   XOS_ReadModeVariable
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r5, r2

        ; Convert to 2^n-1
        MOV     r3, #1
        MOV     r4, r3, ASL r4
        SUB     r4, r4, #1
        MOV     r5, r3, ASL r5
        SUB     r5, r5, #1

        ; Get the dest and sort it
        LDMIA   sp, {r0-r3}
        SortRegs r0,r2
        SortRegs r1,r3

        ; Adjust to the rectangle we want
        LDR     lr, bl_offset_x
        ADD     r0, r0, lr
        LDR     lr, bl_offset_y
        ADD     r1, r1, lr
        LDR     lr, x_size
        ADD     r2, r0, lr
        LDR     lr, y_size
        ADD     r3, r1, lr

        ; Round bottom left down
        BIC     r0, r0, r4
        BIC     r1, r1, r5

        ; Round top right up
        ADD     r2, r2, r4
        BIC     r2, r2, r4
        ADD     r3, r3, r5
        BIC     r3, r3, r5

        STMIA   sp, {r0-r3}
        EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; DoBusinessToSource
;
; In    r4-r7 source of drag
;
; Out   r4-r7 sorted and rounded to pixels
;
DoBusinessToSource Entry  "r0-r3"
        SortRegs r4,r6
        SortRegs r5,r7

        ; Adjust to the rectangle we want
        LDR     lr, bl_offset_x
        ADD     r4, r4, lr
        LDR     lr, bl_offset_y
        ADD     r5, r5, lr
        LDR     lr, x_size
        ADD     r6, r4, lr
        LDR     lr, y_size
        ADD     r7, r5, lr

        MOV     r0, #-1
        MOV     r1, #VduExt_YEigFactor
        SWI     XOS_ReadModeVariable
        MOVVC   r3, r2
        MOVVC   r1, #VduExt_XEigFactor
        SWIVC   XOS_ReadModeVariable
        STRVS   r0, [sp]
        EXIT    VS

        ; Convert to 2^n-1
        MOV     r1, #1
        MOV     r2, r1, ASL r2
        SUB     r2, r2, #1
        MOV     r3, r1, ASL r3
        SUB     r3, r3, #1

        ; Round bottom left down
        BIC     r4, r4, r2
        BIC     r5, r5, r3

        ; Round top right up
        ADD     r6, r6, r2
        BIC     r6, r6, r2
        ADD     r7, r7, r3
        BIC     r7, r7, r3

        EXIT

        END
@


4.5
log
@Add support for translucent drop shadows
Detail:
  Drop shadows were disabled in DragASprite 0.17 when using translucency due to them looking a bit ugly. This change brings them back, but implemented in a different manner to produce a better result.
  Instead of using a standard sprite and rendering it with translucency, we create a sprite with an alpha channel and use the alpha to control the relative intensity of the dragged sprite and its shadow. The alpha channel also allows us to feather/blur the shadow, getting rid of the hard edges that were mostly resposible for the previous version looking so poor.
  s/Drag - Adjust TranslucentPlot to support plotting of the ABGR sprite
  s/StartUp - Adjust drag startup logic so that >2bpp uses an ABGR sprite, 2bpp uses a translucent plot (+ hard shadow), and 1bpp continues to use dithering/hatching. Add new GenerateTranslucentDropShadow routine that's responsible for creating the ABGR sprite. Adjust GetByteSizeOfSprite to return separate values for the size of the foreground (masked/ABGR) and background sprites.
  s/Support - Add new check for whether the kernel supports ABGR sprites
Admin:
  Tested on BB-xM
  Fixes issue #390:
  https://www.riscosopen.org/tracker/tickets/390


Version 0.18. Tagged as 'DragASprit-0_18'
@
text
@d121 1
a121 1
        Entry   "r0-r7" , 8*4
d206 43
d251 1
a251 1
        ADD     r14, sp, #0*4
d255 3
a257 1
        BVS     %FT95
@


4.4
log
@Add support for translucent rendering of dragged sprites
Detail:
  As per ROL's version of DragASprite, we now support translucent drags as well.
  As long as you have a suitable SpriteExtend version, DragASprite will try and use translucent drags wherever it used to use hatching before.
  The only exception to this is in 1bpp modes, where blending is essentially impossible and so it sticks with the old hatching code.
  As with ROL's version, the only way of disabling translucent drags (short of loading an older SpriteExtend) is to set bit 8 of the flags in R0 when calling DragASprite_Start.
  File changes:
  s/Drag - Drag sprite rendering now goes via new TranslucentPlot routine, to allow translucent/non-translucent rendering to be performed as appropriate
  s/Startup, s/Support - Updated with code to detect when translucency is and isn't supported. A few OS_SpriteOp reason code magic numbers replaced with symbols.
Admin:
  Tested on BB-xM


Version 0.16. Tagged as 'DragASprit-0_16'
@
text
@d85 4
a88 3
        TEQ     r7, #0
        BEQ     %FT05
        ORR     r5, r5, r7, LSL #8
d90 1
a90 1
        MOV     r7, #0
d94 3
a96 2
        ; Translucent plot failed - fall back to regular plotting for this drag.
        ; TODO - Hatch the sprite?
d100 1
a100 1
        BIC     r5, r5, #&FF00
@


4.3
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.15. Tagged as 'DragASprit-0_15'
@
text
@d61 1
d64 8
a71 7
        LDRVC   r0, =SpriteReason_PutSpriteUserCoords + &100
        LDRVC   r1, fgsa
        ADRVCL  r2, fg_name
        MOVVC   r3, r4
        MOVVC   r4, r5
        MOVVC   r5, #8          ; Mask is used for transparency
        SWIVC   XOS_SpriteOp
d77 29
a183 1
        LDR     r0, =SpriteReason_PutSpriteUserCoords + &100
d193 1
a193 1
        SWI     XOS_SpriteOp
a203 1
        LDR     r0, =SpriteReason_PutSpriteUserCoords + &100
d209 1
a209 1
        SWI     XOS_SpriteOp
@


4.2
log
@Module made 32-bit compatible. Placed under srccommit control.

Version 0.14. Tagged as 'DragASprit-0_14'
@
text
@d19 1
a19 1
UnPlot  ENTRY   "r0-r11"
d41 1
a41 1
Plot    ENTRY   "r0-r11"
d88 1
a88 1
        ENTRY   "r0-r7" , 8*4
d223 1
a223 1
Getbg0  ENTRY   "r0-r7"
d341 1
a341 1
Getbg1  ENTRY   "r0-r7"
d403 1
a403 1
GetGWindow      ENTRY   "r4-r7", 6*4
d451 1
a451 1
GetScreenGWindow ENTRY  "r4",2*4
d507 1
a507 1
SetGWindow      ENTRY   "r6-r7"
d543 1
a543 1
SwitchOutputToSprite ENTRY
d558 1
a558 1
DoBusinessToDest ENTRY  "r0-r5"
d614 1
a614 1
DoBusinessToSource ENTRY  "r0-r3"
@


4.1
log
@Initial revision
@
text
@a20 1
        EXITS   VS
d23 1
d25 1
d28 9
a36 8
        MOV     r3, r0
        MOV     r4, r1
        LDR     r0, =SpriteReason_PutSpriteUserCoords + &100
        LDR     r1, bg0sa
        ADR     r2, bg_name
        MOV     r5, #0
        SWI     XOS_SpriteOp
        EXITS
a46 1
        EXITS   VS
d49 1
d52 1
d56 5
a60 6
        MOV     r4, r0
        MOV     r5, r1
        SUB     r6, r2, #1
        SUB     r7, r3, #1
        BL      Getbg0
        EXITS   VS
d63 9
a71 8
        LDR     r0, =SpriteReason_PutSpriteUserCoords + &100
        LDR     r1, fgsa
        ADRL    r2, fg_name
        MOV     r3, r4
        MOV     r4, r5
        MOV     r5, #8          ; Mask is used for transparency
        SWI     XOS_SpriteOp
        EXITS
d87 1
a87 1
Move    
d93 1
a93 2
        ADDNE   sp, sp, #8*4
        Pull    "$Proc_RegList,lr",NE
d100 5
a104 5
        TEQ     r0, r4
        TEQEQ   r1, r5
        TEQEQ   r2, r6
        TEQEQ   r3, r7
        EXITS   EQ
d126 2
a127 1
        EXITS   VS
d171 1
a171 1
        EXITS   VS
d181 1
a181 1
        EXITS   VS
d193 1
a193 1
        EXITS   VS
d202 1
a202 1
        EXITS
d208 3
a210 1
        EXITS
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
