head	4.4;
access;
symbols
	Filter-0_28:4.4
	Filter-0_27:4.4
	Filter-0_26:4.4
	Filter-0_25:4.4
	RO_5_07:4.3
	Filter-0_24:4.3
	dellis_autobuild_BaseSW:4.3
	sbrodie_sedwards_16Mar2000:4.3
	Filter-0_23:4.3
	dcotton_autobuild_BaseSW:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.6
	Filter-0_22:4.2
	Ursula_merge:4.2
	Filter-0_21:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_NC2_Generic:1.1.2.2
	bavison_FilterMgr_020:4.2
	sbrodie_FilterMgr_019:4.2
	sbrodie_FilterMgr_018:4.2
	FilterMgr_017:4.2
	Spinner_B20_2:1.1.2.2
	Spinner_19_3:1.1.2.2
	Spinner_B18:1.1.2.2
	Spinner_B17:1.1.2.2
	Spinner_B15:1.1.2.2
	Spinner_B14:1.1.2.2
	Spinner_B13:1.1.2.2
	Spinner_B12:1.1.2.2
	Spinner_B10:1.1.2.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spin_merge:1.1.2.2
	ARTtmp_bp:1.1.2.2
	Spinner_B7:1.1.2.2
	ARTtmp_merge:1.1.2.2
	Spin_3Apr97:1.1.2.2
	ARTtmp:1.1.2.2.0.2
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


4.4
date	2012.01.09.09.35.41;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	3HojTHJtT6ToQtOv;

4.3
date	99.12.02.16.07.28;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.07.14.59.28;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	97.05.07.14.56.05;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.03.12.14.53.49;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.03.12.14.53.49;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.03.14.10.18.20;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Rework the 32 bitting to allow a 26 bit version to be made
Some of the changes were one way only, the use of some RETURN[V[C|S]] macros allows 26 bit version to be created.

Version 0.25. Tagged as 'Filter-0_25'
@
text
@; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.PoRtFilter

;;----------------------------------------------------------------
;; post_rect_filter_handler
;;
;; This is called by the Wimp on exit from int_get_rectangle
;;
;; Entry:
;;
;;      R2    - Task handle of calling task.
;;      R6-R9 - screen coordinates of rectangle (x0,y0,x1,y1)
;;      R10   - window handle - 1
;;
;; Exit:
;;
;;      All other registers preserved.
;;
;;      All interested filters called.
;;
;;

post_rect_filter_handler

        Push    "r0-r2,LR"

        MOV     R2,R2,ASL #16
        MOV     R2,R2,LSR #16

        ADD     r0,r10,#1	         ; find the window being redrawn

        LDR     r1,post_rect_filters
post_rect_filter_exit
        CMP     r1,#0
      [ No26bitCode
        Pull    "r0-r2,PC",EQ            ; End of list.
      |
        Pull    "r0-r2,PC",EQ,^          ; End of list.
      ]
        LDR     r14,[r1,#next_ptr]
        Push    "r14"

        LDR     r14,[r1,#f_task]
        TEQ     r14,R2
        CMPNE   r14,#0
        Pull    "r1",NE
        BNE     post_rect_filter_exit        ; Filter not interested.

        LDR     r12,[r1,#f_R12]        ; Set R12.

        MOV     LR,PC
        LDR     PC, [r1,#f_address]
        NOP
        Pull    "r1"
        B       post_rect_filter_exit

        [ :LNOT: No26bitCode

	; Can get away with this inline data as we'll only need to
	; fake when softloading anyway.

	; Eight words to store R2,R6-R9,R10,R12
fake_regdump
	%	7*4
	; The address that int_get_rectangle was supposed to return to
fake_retaddr
	%	4

	; We want to return to 2 instructions after this instruction
	; in the Wimp's int_get_rectangle routine.
fake_magic_marker
	TST	R14,#&0C

int_get_rectangle_reentry_addr
	DCD 	0

	; This rectangle filter checks that we are being called from
	; the second rectangle filter call in the Wimp (R0=-1), and
	; if so, we poke a new return address into the stack, so that
	; int_get_rectangle returns to fakepostrect_handler.
	; What we then do is return to within int_get_rectangle, having
	; fixed the stack up, to where it sets the fg/bg colours
	; (starting at the instruction "fake_magic_marker").
	;
	; The stack at this point contains 4 words from rect_filt_handler,
	; 3 words from the Wimp's CallFilter macro, followed by
	; handle, userblk and lr from int_get_rectangle.
sortout_fakepostrect
	CMP	r0,#-1
	MOVNES	pc,lr
	Push	"r0-r1,r10,lr"
	ADR	r0,fakepostrect_handler
	LDR	lr,[r13,#(4+4+3+2)*4]		; Fiddle with int_get_rectangle's
	AND	r1,lr,#&FC000003		; lr
	ORR	r0,r0,r1
	STR	r0,[r13,#(4+4+3+2)*4]
	LDR	r10,[r13,#(4+4+3+0)*4]		; Get int_get_rectangle's handle
	ADR	r0,fake_regdump
	STMIA	r0,{r2,r6-r9,r10,r12,lr}
	; Find int_get_rectangle_reentry_addr
	LDR	r0,int_get_rectangle_reentry_addr
	TEQ	r0,#0
	Pull	"r0-r1,r10,pc",NE
	LDR	lr,[r13,#(4+3)*4]		; Get original lr passed to rect filter
	BIC	lr,lr,#&FC000003
	LDR	r1,fake_magic_marker
	; Scan forward to find the magic marker
05	LDR	r0,[lr,#4]!
	TEQ	r0,r1
	BNE	%BT05
	ADD	lr,lr,#8
	STR	lr,int_get_rectangle_reentry_addr
	Pull	"r0-r1,r10,pc"

fakepostrect_handler
	LDR	lr,fake_retaddr
	Push	"r2,r6-r9,r10,r12,lr"
	ADR	lr,fake_regdump
	LDMIA	lr,{r2,r6-r9,r10,r12}
	BL	post_rect_filter_handler
	Pull	"r2,r6-r9,r10,r12"
	LDR	pc,int_get_rectangle_reentry_addr

        ]

        LNK     s.PoIcFilter


@


4.3
log
@  32-bit compatible module.
Detail:
  Doesn't include the faking of post-rectangle filters if not building
    for 26 bit systems any more.
  Assumes that the Wimp doesn't care what the flags are on exit from
    a filter.
Admin:
  Built.

Version 0.23. Tagged as 'Filter-0_23'
@
text
@d48 1
d50 3
@


4.2
log
@Second attempt at ARTtmp fold
@
text
@d48 1
a48 1
        Pull    "r0-r2,PC",EQ,^          ; End of list.
a59 1
	[ {TRUE}
a62 10
	|
	STMFD	sp!,{r0-r12}
	LDR	r3,[r1,#f_address]
	MOV	r1,sp
	MOV	r0,#0
	MOV	r2,pc
	AND	r2,r2,#3		; should be 3
	SWI	&69cc0
        LDMFD	sp!,{r0-r12}
	]
d66 2
d132 2
@


4.1
log
@ARTtmp branch folded in
@
text
@d1 144
@


1.1
log
@file PoRtFilter was initially added on branch Spinner.
@
text
@@


1.1.2.1
log
@Updated in line with version 0.15. To wit:

1) Allow for task names being ctrl-terminated
2) Reference Messages file via FilterManager$Path, if set
3) Fix corruption of errors returned from Filter_RegisterXXX
4) Support for rectangle and copy filters (for Replay 3)
5) Support for post-rectangle filters (for Redraw Manager)
@
text
@a0 144
; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.PoRtFilter

;;----------------------------------------------------------------
;; post_rect_filter_handler
;;
;; This is called by the Wimp on exit from int_get_rectangle
;;
;; Entry:
;;
;;      R2    - Task handle of calling task.
;;      R6-R9 - screen coordinates of rectangle (x0,y0,x1,y1)
;;      R10   - window handle - 1
;;
;; Exit:
;;
;;      All other registers preserved.
;;
;;      All interested filters called.
;;
;;

post_rect_filter_handler

        Push    "r0-r2,LR"

        MOV     R2,R2,ASL #16
        MOV     R2,R2,LSR #16

        ADD     r0,r10,#1	         ; find the window being redrawn

        LDR     r1,post_rect_filters
post_rect_filter_exit
        CMP     r1,#0
        Pull    "r0-r2,PC",EQ,^          ; End of list.
        LDR     r14,[r1,#next_ptr]
        Push    "r14"

        LDR     r14,[r1,#f_task]
        TEQ     r14,R2
        CMPNE   r14,#0
        Pull    "r1",NE
        BNE     post_rect_filter_exit        ; Filter not interested.

        LDR     r12,[r1,#f_R12]        ; Set R12.

	[ {TRUE}
        MOV     LR,PC
        LDR     PC, [r1,#f_address]
        NOP
	|
	STMFD	sp!,{r0-r12}
	LDR	r3,[r1,#f_address]
	MOV	r1,sp
	MOV	r0,#0
	MOV	r2,pc
	AND	r2,r2,#3		; should be 3
	SWI	&69cc0
        LDMFD	sp!,{r0-r12}
	]
        Pull    "r1"
        B       post_rect_filter_exit

	; Can get away with this inline data as we'll only need to
	; fake when softloading anyway.

	; Eight words to store R2,R6-R9,R10,R12
fake_regdump
	%	7*4
	; The address that int_get_rectangle was supposed to return to
fake_retaddr
	%	4

	; We want to return to 2 instructions after this instruction
	; in the Wimp's int_get_rectangle routine.
fake_magic_marker
	TST	R14,#&0C

int_get_rectangle_reentry_addr
	DCD 	0

	; This rectangle filter checks that we are being called from
	; the second rectangle filter call in the Wimp (R0=-1), and
	; if so, we poke a new return address into the stack, so that
	; int_get_rectangle returns to fakepostrect_handler.
	; What we then do is return to within int_get_rectangle, having
	; fixed the stack up, to where it sets the fg/bg colours
	; (starting at the instruction "fake_magic_marker").
	;
	; The stack at this point contains 4 words from rect_filt_handler,
	; 3 words from the Wimp's CallFilter macro, followed by
	; handle, userblk and lr from int_get_rectangle.
sortout_fakepostrect
	CMP	r0,#-1
	MOVNES	pc,lr
	Push	"r0-r1,r10,lr"
	ADR	r0,fakepostrect_handler
	LDR	lr,[r13,#(4+4+3+2)*4]		; Fiddle with int_get_rectangle's
	AND	r1,lr,#&FC000003		; lr
	ORR	r0,r0,r1
	STR	r0,[r13,#(4+4+3+2)*4]
	LDR	r10,[r13,#(4+4+3+0)*4]		; Get int_get_rectangle's handle
	ADR	r0,fake_regdump
	STMIA	r0,{r2,r6-r9,r10,r12,lr}
	; Find int_get_rectangle_reentry_addr
	LDR	r0,int_get_rectangle_reentry_addr
	TEQ	r0,#0
	Pull	"r0-r1,r10,pc",NE
	LDR	lr,[r13,#(4+3)*4]		; Get original lr passed to rect filter
	BIC	lr,lr,#&FC000003
	LDR	r1,fake_magic_marker
	; Scan forward to find the magic marker
05	LDR	r0,[lr,#4]!
	TEQ	r0,r1
	BNE	%BT05
	ADD	lr,lr,#8
	STR	lr,int_get_rectangle_reentry_addr
	Pull	"r0-r1,r10,pc"

fakepostrect_handler
	LDR	lr,fake_retaddr
	Push	"r2,r6-r9,r10,r12,lr"
	ADR	lr,fake_regdump
	LDMIA	lr,{r2,r6-r9,r10,r12}
	BL	post_rect_filter_handler
	Pull	"r2,r6-r9,r10,r12"
	LDR	pc,int_get_rectangle_reentry_addr

        LNK     s.CopyFilter


@


1.1.2.2
log
@Support for Post-icon filters added.
@
text
@d142 1
a142 1
        LNK     s.PoIcFilter
@
