head	4.7;
access;
symbols
	Filter-0_28:4.7
	Filter-0_27:4.6
	Filter-0_26:4.6
	Filter-0_25:4.5
	RO_5_07:4.4
	Filter-0_24:4.4
	dellis_autobuild_BaseSW:4.4
	sbrodie_sedwards_16Mar2000:4.4
	Filter-0_23:4.4
	dcotton_autobuild_BaseSW:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2.2.1
	Ursula_RiscPC:4.2.2.1.0.2
	Filter-0_22:4.3
	Ursula_merge:4.2.2.1
	Filter-0_21:4.3
	rthornb_UrsulaBuild-19Aug1998:4.2.2.1
	UrsulaBuild_FinalSoftload:4.2.2.1
	rthornb_UrsulaBuild-12Aug1998:4.2.2.1
	aglover_UrsulaBuild-05Aug1998:4.2.2.1
	rthornb_UrsulaBuild-29Jul1998:4.2.2.1
	rthornb_UrsulaBuild-22Jul1998:4.2.2.1
	rthornb_UrsulaBuild-15Jul1998:4.2.2.1
	rthornb_UrsulaBuild-07Jul1998:4.2.2.1
	rthornb_UrsulaBuild-17Jun1998:4.2.2.1
	rthornb_UrsulaBuild-03Jun1998:4.2.2.1
	rthornb_UrsulaBuild-27May1998:4.2.2.1
	rthornb_UrsulaBuild-21May1998:4.2.2.1
	rthornb_UrsulaBuild_01May1998:4.2.2.1
	afrost_NC2_Generic:4.1.7.3
	bavison_FilterMgr_020:4.2.2.1
	sbrodie_FilterMgr_019:4.3
	sbrodie_FilterMgr_018:4.3
	FilterMgr_017:4.2
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.3
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.3
	Spinner_B7:4.1.7.3
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.3
	Spin_3Apr97:4.1.7.3
	ARTtmp:4.1.7.3.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2013.10.23.17.26.18;	author bavison;	state Exp;
branches;
next	4.6;
commitid	ybbJU1NqTYfwsrax;

4.6
date	2012.01.10.08.26.00;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	b60W22tfnZxwqBOv;

4.5
date	2012.01.09.09.35.42;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	3HojTHJtT6ToQtOv;

4.4
date	99.12.02.16.07.30;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	98.01.22.14.45.48;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.07.14.56.09;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.29.48;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	98.04.06.09.21.35;	author bavison;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.29.48;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.28.53;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.19.38;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.17.44;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.12.14.53.53;	author kbracey;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.03.14.10.18.22;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.7
log
@  FilterManager builds as a soft-loadable version again
Detail:
  ADR didn't reach

Version 0.28. Tagged as 'Filter-0_28'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; s.SWIS

Filter_SWIdecode
        Push    "LR"
        LDR     wsptr,[R12]                     ; wsptr --> workspace

        Debug   xx,"SWI ",r11

        CMP     R11,#maxnewswi
        ADDCC   R14,R11,#(swijptable-swijporg-4)/4    ; bodge factor
        ADDCC   PC,PC,R14,ASL #2                ; go!
swijporg
        Push    "R4"
        ADR     R0,ErrorBlock_BadSWI
        ADRL    R4,Title
        BL      MsgTrans_ErrorLookup
        Pull    "R4,PC"

swijptable
        B       SWIFilter_RegisterPreFilter
        B       SWIFilter_RegisterPostFilter
        B       SWIFilter_DeRegisterPreFilter
        B       SWIFilter_DeRegisterPostFilter
        B       SWIFilter_RegisterRectFilter
        B       SWIFilter_DeRegisterRectFilter
	B	SWIFilter_RegisterCopyFilter
	B	SWIFilter_DeRegisterCopyFilter
	B	SWIFilter_RegisterPostRectFilter
	B	SWIFilter_DeRegisterPostRectFilter
	B	SWIFilter_RegisterPostIconFilter
	B	SWIFilter_DeRegisterPostIconFilter
endswijptable
maxnewswi   *   (endswijptable-swijptable)/4

ErrorBlock_BadSWI
        DCD     0
        DCB     "BadSWI", 0
        ALIGN

Filter_SWInames
        DCB     "Filter",0                ; prefix
        DCB     "RegisterPreFilter",0
        DCB     "RegisterPostFilter",0
        DCB     "DeRegisterPreFilter",0
        DCB     "DeRegisterPostFilter",0
        DCB     "RegisterRectFilter",0
        DCB     "DeRegisterRectFilter",0
	DCB	"RegisterCopyFilter",0
	DCB	"DeRegisterCopyFilter",0
	DCB	"RegisterPostRectFilter",0
	DCB	"DeRegisterPostRectFilter",0
	DCB	"RegisterPostIconFilter",0
	DCB	"DeRegisterPostIconFilter",0
        DCB     0
        ALIGN

;;--------------------------------------------------------------------------
;; Filter_RegisterPreFilter
;;
;; Add a new pre filter to the list of pre filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter is applied.
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterPreFilter

        Push    "r0-r3"

        DebugS  register,"Register pre-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"pre-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r3,LR",VS
        RETURNVS VS                 ; Restore callers flags, and set V

; Link block ^r2 to list.

        LDR     r14,pre_filters
        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,pre_filters

        STR     R14,[r2,#f_mask]    ; Mask is not used for pre_filters.
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register filters "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.
        LDR     R14,[sp,#3*4]
        MOV     R14,R14,ASL #16
        MOV     R14,R14,LSR #16
        STR     R14,[r2,#f_task]    ; Task ID.

        Debug   register,"Pre-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r3,LR"          ; V will be clear
        RETURNVC

; Error exit, freeing claimed block

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,pre_filters
        MOV     R0,#0
        STR     R0,pre_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r3,LR"
        RETURNVS                    ; Restore callers flags, and set V


;;--------------------------------------------------------------------------
;; Filter_RegisterPostFilter
;;
;; Add a new post filter to the list of post filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter is applied.
;;        R4 - Event mask ( 1 bit masks the event out ).
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterPostFilter

        Push    "r0-r4"

        DebugS  register,"Register post-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"post-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r4,LR",VS
        RETURNVS VS

; Link block ^r2 to list.

        LDR     r14,post_filters

        Debug   register,"Post-filter anchor",r14

        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,post_filters
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register post-filter "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.
        LDR     R14,[sp,#3*4]
        MOV     R14,R14,ASL #16
        MOV     R14,R14,LSR #16
        STR     R14,[r2,#f_task]    ; Task ID.
        LDR     R14,[sp,#4*4]
        STR     R14,[r2,#f_mask]    ; Event mask.

        Debug   register,"Post-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r4,LR"          ; V will be clear
        RETURNVC
        
; Error exit

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,post_filters
        MOV     R0,#0
        STR     R0,post_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r4,LR"
        RETURNVS


;;-------------------------------------------------------------------------
;; find_filter
;;
;; Entry:
;;
;;        R0 - Pointer to name.
;;        R1 - Address
;;        R2 - R12 value
;;        R3 - Task handle
;;        R4 - Pointer to list head.
;; Exit:
;;        If found:
;;                  VC , R4-> filter block.
;;        If not found VS
;;
find_filter

        Push    "LR"

01
        LDR     r4,[r4,#next_ptr]
        CMP     r4,#0
        SETV    EQ
        Pull    "PC",VS            ; Not found.
        LDR     r14,[r4,#f_name]
        TEQ     r14,r0
        BNE     %BT01
        LDR     r14,[r4,#f_address]
        TEQ     r14,r1
        BNE     %BT01
        LDR     r14,[r4,#f_R12]
        TEQ     r14,r2
        BNE     %BT01
        LDR     r14,[r4,#f_task]
        TEQ     r14,r3
        CMPNE   r14,#0
        BNE     %BT01

; All are equal - found wanted filter.

        Pull    "PC"

;;--------------------------------------------------------------------------
;; Filter_DeRegisterPreFilter
;;
;; Remove a pre filter from the list of pre filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter was applied.
;;
;;        All must be the same as those passed to RegisterPreFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterPreFilter

        Push    "r0-r4"

        DebugS  register,"De-register pre-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

        ADR     r4,pre_filters
        MOV     R3,R3,ASL #16
        MOV     R3,R3,LSR #16   ; Task ID
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find pre-filter "

        ADDVS   sp,sp,#4
        ADRVS   r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        Pull    "r1-r4,LR",VS
        RETURNVS VS

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,pre_filters      ; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

        LDR     r14,pre_filters
        CMP     r14,#0               ; Any filters left?
        MOVEQ   r0,#WimpFilter_PrePoll
        MOVEQ   r1,#0                ;  No then de-register
 [ debugregister
        BNE     %FT00
        Debug   register,"Deregistering pre-filter",r0,r1
00
 ]
        SWIEQ   XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register pre-filter "

        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free pre-filter block "

        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        RETURNVS

;;--------------------------------------------------------------------------
;; Filter_DeRegisterPostFilter
;;
;; Remove a pre filter from the list of pre filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter was applied.
;;
;;        All must be the same as those passed to RegisterPreFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterPostFilter

        Push    "r0-r4"

        DebugS  register,"De-register post-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

        ADR     r4,post_filters
        MOV     R3,R3,ASL #16
        MOV     R3,R3,LSR #16   ; Task ID
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find post-filter "

        ADRVS   r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        ADDVS   sp,sp,#4
        Pull    "r1-r4,LR",VS
        RETURNVS VS

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,post_filters     ; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

        LDR     r14,post_filters
        CMP     r14,#0               ; Any filters left?
        MOVEQ   r0,#WimpFilter_PostPoll
        MOVEQ   r1,#0                ;  No then de-register
 [ debugregister
        BNE     %FT00
        Debug   register,"Deregistering post-filter",r0,r1
00
 ]
        SWIEQ   XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register post-filter "

        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free post-filter block "

        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        RETURNVS

;;--------------------------------------------------------------------------
;; Filter_RegisterRectFilter
;;
;; Add a new rect filter to the list of rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter is applied.
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterRectFilter

        Push    "r0-r3"

        DebugS  register,"Register rect-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"rect-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r3,LR",VS
        RETURNVS VS

; Link block ^r2 to list.

        LDR     r14,rect_filters
        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,rect_filters

        STR     R14,[r2,#f_mask]    ; Mask is not used for rect_filters.
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register filters "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.
        LDR     R14,[sp,#3*4]
        MOV     R14,R14,ASL #16
        MOV     R14,R14,LSR #16
        STR     R14,[r2,#f_task]    ; Task ID.

        Debug   register,"rect-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r3,LR"          ; V will be clear
        RETURNVC
        
; Error exit, freeing claimed block

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,rect_filters
        MOV     R0,#0
        STR     R0,rect_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r3,LR"
        RETURNVS

ErrorBlock_UnknownFilter
        DCD    0
        DCB    "UnkF",0
        ALIGN

;;--------------------------------------------------------------------------
;; Filter_RegisterCopyFilter
;;
;; Add a new rect filter to the list of rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterCopyFilter

        Push    "r0-r3"

        DebugS  register,"Register copy-filter",R0,80
        Debug   register,"Name, address, ws",R0,R1,R2

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"copy-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r3,LR",VS
        RETURNVS VS

; Link block ^r2 to list.

        LDR     r14,copy_filters
        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,copy_filters

        STR     R14,[r2,#f_mask]    ; Mask is not used for copy_filters.
        STR     R14,[r2,#f_task]    ; Task is not used for copy_filters.
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register filters "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.

        Debug   register,"copy-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r3,LR"
        RETURNVC

; Error exit, freeing claimed block

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,copy_filters
        MOV     R0,#0
        STR     R0,copy_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r3,LR"
        RETURNVS

;;--------------------------------------------------------------------------
;; Filter_RegisterPostRectFilter
;;
;; Add a new post-rect filter to the list of post-rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter is applied.
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterPostRectFilter

        Push    "r0-r3"

        DebugS  register,"Register post-rect-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"post-rect-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r3,LR",VS
        RETURNVS VS

; Link block ^r2 to list.

        LDR     r14,post_rect_filters
        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,post_rect_filters

        STR     R14,[r2,#f_mask]    ; Mask is not used for post_rect_filters.
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register filters "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.
        LDR     R14,[sp,#3*4]
        MOV     R14,R14,ASL #16
        MOV     R14,R14,LSR #16
        STR     R14,[r2,#f_task]    ; Task ID.

        Debug   register,"post-rect-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r3,LR"
        RETURNVC
        
; Error exit, freeing claimed block

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,post_rect_filters
        MOV     R0,#0
        STR     R0,post_rect_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r3,LR"
        RETURNVS

;;--------------------------------------------------------------------------
;; Filter_RegisterPostIconFilter
;;
;; Add a new post-icon filter to the list of post-icon filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Address of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter is applied.
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterPostIconFilter

        Push    "r0-r3"

        DebugS  register,"Register post-icon-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"post-icon-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r3,LR",VS
        RETURNVS VS

; Link block ^r2 to list.

        LDR     r14,post_icon_filters
        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,post_icon_filters

        STR     R14,[r2,#f_mask]    ; Mask is not used for post_icon_filters.
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register filters "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.
        LDR     R14,[sp,#3*4]
        MOV     R14,R14,ASL #16
        MOV     R14,R14,LSR #16
        STR     R14,[r2,#f_task]    ; Task ID.

        Debug   register,"post-icon-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r3,LR"
        RETURNVC
        
; Error exit, freeing claimed block

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,post_icon_filters
        MOV     R0,#0
        STR     R0,post_icon_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r3,LR"
        RETURNVS

;;--------------------------------------------------------------------------
;; Filter_DeRegisterRectFilter
;;
;; Remove a rect filter from the list of rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter was applied.
;;
;;        All must be the same as those passed to RegisterRectFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterRectFilter

        Push    "r0-r4"

        DebugS  register,"De-register rect-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

        ADR     r4,rect_filters
        MOV     R3,R3,ASL #16
        MOV     R3,R3,LSR #16   ; Task ID
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find rect-filter "

        ADDVS   sp,sp,#4
        ADRVS   r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        Pull    "r1-r4,LR",VS
        RETURNVS VS

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,rect_filters      ; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

deregister_rect_for_fake_post_rect
        LDR     r14,rect_filters
        CMP     r14,#0               ; Any filters left?
        MOVEQ   r0,#WimpFilter_GetRectangle
        MOVEQ   r1,#0                ;  No then de-register
 [ debugregister
        BNE     %FT00
        Debug   register,"Deregistering rect-filter",r0,r1
00
 ]
        SWIEQ   XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register rect-filter "

        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free rect-filter block "

	; DeRegisterPostRectFilter can exit through here, so
	; keep the stack usage the same!
        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        RETURNVS

;;--------------------------------------------------------------------------
;; Filter_DeRegisterPostRectFilter
;;
;; Remove a post-rect filter from the list of rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter was applied.
;;
;;        All must be the same as those passed to RegisterPostRectFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterPostRectFilter

        Push    "r0-r4"

        DebugS  register,"De-register post-rect-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

        ADR     r4,post_rect_filters
        MOV     R3,R3,ASL #16
        MOV     R3,R3,LSR #16   ; Task ID
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find post-rect-filter "

        ADDVS   sp,sp,#4
        ADRVS   r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        Pull    "r1-r4,LR",VS
        RETURNVS VS

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,post_rect_filters; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

        LDR     r14,post_rect_filters
        CMP     r14,#0               ; Any filters left?
	BNE	%FT05

	LDR	r14,fake_postrect	; Consider freeing RectFilter if faking
	TEQ	r14,#0
	BNE	deregister_rect_for_fake_post_rect

        MOV     r0,#WimpFilter_PostGetRectangle
        MOV     r1,#0
 [ debugregister
        Debug   register,"Deregistering post-rect-filter",r0,r1
 ]
        SWI     XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register post-rect-filter "

05
        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free post-rect-filter block "

        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        RETURNVS

;;--------------------------------------------------------------------------
;; Filter_DeRegisterCopyFilter
;;
;; Remove a copy filter from the list of copy filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;
;;        All must be the same as those passed to RegisterCopyFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterCopyFilter

        Push    "r0-r4"

        DebugS  register,"De-register copy-filter",R0,80
        Debug   register,"Name, address, ws",R0,R1,R2

        ADR     r4,copy_filters
	MOV	r3,#0
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find copy-filter "

        ADDVS   sp,sp,#4
        ADRVS   r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        Pull    "r1-r4,LR",VS
        RETURNVS VS

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,copy_filters      ; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

        LDR     r14,copy_filters
        CMP     r14,#0               ; Any filters left?
        MOVEQ   r0,#WimpFilter_BlockCopy
        MOVEQ   r1,#0                ;  No then de-register
 [ debugregister
        BNE     %FT00
        Debug   register,"Deregistering copy-filter",r0,r1
00
 ]
        SWIEQ   XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register copy-filter "

        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free copy-filter block "

        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        RETURNVS

;;--------------------------------------------------------------------------
;; Filter_DeRegisterPostIconFilter
;;
;; Remove a post-icon filter from the list of posticon filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;
;;        All must be the same as those passed to RegisterPostIconFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterPostIconFilter

        Push    "r0-r4"

        DebugS  register,"De-register post-icon-filter",R0,80
        Debug   register,"Name, address, ws",R0,R1,R2

        ADR     r4,post_icon_filters
        MOV     R3,R3,ASL #16   ; Fixed 31/12/97 SNB.  Used to mov r3, #0
        MOV     R3,R3,LSR #16   ; Task ID
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find posticon-filter "

        ADDVS   sp,sp,#4
        ADRVSL  r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        Pull    "r1-r4,LR",VS
        RETURNVS VS

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,post_icon_filters ; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

        LDR     r14,post_icon_filters
        CMP     r14,#0               ; Any filters left?
        MOVEQ   r0,#WimpFilter_PostIconGetRectangle
        MOVEQ   r1,#0                ;  No then de-register
 [ debugregister
        BNE     %FT00
        Debug   register,"Deregistering post-icon-filter",r0,r1
00
 ]
        SWIEQ   XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register post-icon-filter "

        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free post-icon-filter block "

        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        RETURNVS

        LNK     s.MsgTrans
@


4.6
log
@Bring the 'Unknown filter' message back in ADR range for 32 bit builds.

Version 0.26. Tagged as 'Filter-0_26'
@
text
@d1003 1
a1003 1
        ADRVS   r0,ErrorBlock_UnknownFilter
@


4.5
log
@Rework the 32 bitting to allow a 26 bit version to be made
Some of the changes were one way only, the use of some RETURN[V[C|S]] macros allows 26 bit version to be created.

Version 0.25. Tagged as 'Filter-0_25'
@
text
@a352 1

a424 5
ErrorBlock_UnknownFilter
        DCD    0
        DCB    "UnkF",0
        ALIGN

d506 5
@


4.4
log
@  32-bit compatible module.
Detail:
  Doesn't include the faking of post-rectangle filters if not building
    for 26 bit systems any more.
  Assumes that the Wimp doesn't care what the flags are on exit from
    a filter.
Admin:
  Built.

Version 0.23. Tagged as 'Filter-0_23'
@
text
@d89 1
a89 1
        Push  "r0-r3"
d138 2
a139 1
        Pull    "r0-r3,PC"          ; V will be clear
d172 1
a172 1
        Push  "r0-r4"
d224 3
a226 2
        Pull    "r0-r4,PC"          ; V will be clear

d300 1
a300 1
        Push  "r0-r4"
d373 1
a373 1
        Push  "r0-r4"
d449 1
a449 1
        Push  "r0-r3"
d498 3
a500 2
        Pull    "r0-r3,PC"          ; V will be clear

d529 1
a529 1
        Push  "r0-r3"
d575 2
a576 1
        Pull    "r0-r3,PC"
d607 1
a607 1
        Push  "r0-r3"
d656 3
a658 2
        Pull    "r0-r3,PC"

d688 1
a688 1
        Push  "r0-r3"
d737 3
a739 2
        Pull    "r0-r3,PC"

d770 1
a770 1
        Push  "r0-r4"
d845 1
a845 1
        Push  "r0-r4"
d921 1
a921 1
        Push  "r0-r4"
d991 1
a991 1
        Push  "r0-r4"
@


4.3
log
@Fix to allow deregistering of Post-Icon filters
@
text
@d104 1
a104 1
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V
d138 1
a138 1
        Pull    "r0-r3,PC",,^
d149 1
a149 1
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V
d186 1
a186 1
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V
d223 1
a223 1
        Pull    "r0-r4,PC",,^
d234 1
a234 1
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V
d314 1
a314 1
        ORRVSS  PC,LR,#V_bit
d349 1
a349 1
        ORRS    PC,LR,#V_bit
d387 1
a387 1
        ORRVSS  PC,LR,#V_bit
d422 1
a422 1
        ORRS    PC,LR,#V_bit
d462 1
a462 1
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V
d496 1
a496 1
        Pull    "r0-r3,PC",,^
d507 1
a507 1
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V
d541 1
a541 1
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V
d572 1
a572 1
        Pull    "r0-r3,PC",,^
d583 1
a583 1
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V
d618 1
a618 1
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V
d652 1
a652 1
        Pull    "r0-r3,PC",,^
d663 1
a663 1
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V
d698 1
a698 1
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V
d732 1
a732 1
        Pull    "r0-r3,PC",,^
d743 1
a743 1
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V
d780 1
a780 1
        ORRVSS  PC,LR,#V_bit
d818 1
a818 1
        ORRS    PC,LR,#V_bit
d855 1
a855 1
        ORRVSS  PC,LR,#V_bit
d895 1
a895 1
        ORRS    PC,LR,#V_bit
d930 1
a930 1
        ORRVSS  PC,LR,#V_bit
d965 1
a965 1
        ORRS    PC,LR,#V_bit
d1001 1
a1001 1
        ORRVSS  PC,LR,#V_bit
d1036 1
a1036 1
        ORRS    PC,LR,#V_bit
@


4.2
log
@ARTtmp branch folded in
@
text
@d991 2
a992 1
	MOV	r3,#0
@


4.2.2.1
log
@Incorporated Filter_DeRegisterPostIconFilter bugfix and standalone capability
from trunk.
Added Ursula service call table.
@
text
@d991 1
a991 2
        MOV     R3,R3,ASL #16   ; Fixed 31/12/97 SNB.  Used to mov r3, #0
        MOV     R3,R3,LSR #16   ; Task ID
@


4.1
log
@Initial revision
@
text
@d29 1
a29 1
        ADR     R4,Title
d38 8
d60 8
a278 5
ErrorBlock_UnknownFilter
        DCD    0
        DCB    "UnkF",0
        ALIGN

d328 1
a328 1
        MOVEQ   r0,#0                ;  pre-filter
d401 1
a401 1
        MOVEQ   r0,#1                ;  post-filter
d417 613
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Updated in line with version 0.15. To wit:

1) Allow for task names being ctrl-terminated
2) Reference Messages file via FilterManager$Path, if set
3) Fix corruption of errors returned from Filter_RegisterXXX
4) Support for rectangle and copy filters (for Replay 3)
5) Support for post-rectangle filters (for Redraw Manager)
@
text
@d29 1
a29 1
        ADRL    R4,Title
a37 6
        B       SWIFilter_RegisterRectFilter
        B       SWIFilter_DeRegisterRectFilter
	B	SWIFilter_RegisterCopyFilter
	B	SWIFilter_DeRegisterCopyFilter
	B	SWIFilter_RegisterPostRectFilter
	B	SWIFilter_DeRegisterPostRectFilter
a51 6
        DCB     "RegisterRectFilter",0
        DCB     "DeRegisterRectFilter",0
	DCB	"RegisterCopyFilter",0
	DCB	"DeRegisterCopyFilter",0
	DCB	"RegisterPostRectFilter",0
	DCB	"DeRegisterPostRectFilter",0
a405 450

        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        ORRS    PC,LR,#V_bit

;;--------------------------------------------------------------------------
;; Filter_RegisterRectFilter
;;
;; Add a new rect filter to the list of rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter is applied.
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterRectFilter

        Push  "r0-r3"

        DebugS  register,"Register rect-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"rect-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r3,LR",VS
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V

; Link block ^r2 to list.

        LDR     r14,rect_filters
        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,rect_filters

        STR     R14,[r2,#f_mask]    ; Mask is not used for rect_filters.
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register filters "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.
        LDR     R14,[sp,#3*4]
        MOV     R14,R14,ASL #16
        MOV     R14,R14,LSR #16
        STR     R14,[r2,#f_task]    ; Task ID.

        Debug   register,"rect-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r3,PC",,^

; Error exit, freeing claimed block

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,rect_filters
        MOV     R0,#0
        STR     R0,rect_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r3,LR"
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V

;;--------------------------------------------------------------------------
;; Filter_RegisterCopyFilter
;;
;; Add a new rect filter to the list of rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterCopyFilter

        Push  "r0-r3"

        DebugS  register,"Register copy-filter",R0,80
        Debug   register,"Name, address, ws",R0,R1,R2

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"copy-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r3,LR",VS
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V

; Link block ^r2 to list.

        LDR     r14,copy_filters
        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,copy_filters

        STR     R14,[r2,#f_mask]    ; Mask is not used for copy_filters.
        STR     R14,[r2,#f_task]    ; Task is not used for copy_filters.
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register filters "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.

        Debug   register,"copy-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r3,PC",,^

; Error exit, freeing claimed block

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,copy_filters
        MOV     R0,#0
        STR     R0,copy_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r3,LR"
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V

;;--------------------------------------------------------------------------
;; Filter_RegisterPostRectFilter
;;
;; Add a new post-rect filter to the list of post-rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter is applied.
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterPostRectFilter

        Push  "r0-r3"

        DebugS  register,"Register post-rect-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"post-rect-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r3,LR",VS
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V

; Link block ^r2 to list.

        LDR     r14,post_rect_filters
        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,post_rect_filters

        STR     R14,[r2,#f_mask]    ; Mask is not used for post_rect_filters.
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register filters "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.
        LDR     R14,[sp,#3*4]
        MOV     R14,R14,ASL #16
        MOV     R14,R14,LSR #16
        STR     R14,[r2,#f_task]    ; Task ID.

        Debug   register,"post-rect-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r3,PC",,^

; Error exit, freeing claimed block

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,post_rect_filters
        MOV     R0,#0
        STR     R0,post_rect_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r3,LR"
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V

;;--------------------------------------------------------------------------
;; Filter_DeRegisterRectFilter
;;
;; Remove a rect filter from the list of rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter was applied.
;;
;;        All must be the same as those passed to RegisterRectFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterRectFilter

        Push  "r0-r4"

        DebugS  register,"De-register rect-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

        ADR     r4,rect_filters
        MOV     R3,R3,ASL #16
        MOV     R3,R3,LSR #16   ; Task ID
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find rect-filter "

        ADDVS   sp,sp,#4
        ADRVS   r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        Pull    "r1-r4,LR",VS
        ORRVSS  PC,LR,#V_bit

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,rect_filters      ; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

        LDR     r14,rect_filters
        CMP     r14,#0               ; Any filters left?
        MOVEQ   r0,#3                ;  rect-filter
        MOVEQ   r1,#0                ;  No then de-register
 [ debugregister
        BNE     %FT00
        Debug   register,"Deregistering rect-filter",r0,r1
00
 ]
        SWIEQ   XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register rect-filter "

        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free rect-filter block "

        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        ORRS    PC,LR,#V_bit

;;--------------------------------------------------------------------------
;; Filter_DeRegisterPostRectFilter
;;
;; Remove a post-rect filter from the list of rect filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter was applied.
;;
;;        All must be the same as those passed to RegisterPostRectFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterPostRectFilter

        Push  "r0-r4"

        DebugS  register,"De-register post-rect-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

        ADR     r4,post_rect_filters
        MOV     R3,R3,ASL #16
        MOV     R3,R3,LSR #16   ; Task ID
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find post-rect-filter "

        ADDVS   sp,sp,#4
        ADRVS   r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        Pull    "r1-r4,LR",VS
        ORRVSS  PC,LR,#V_bit

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,post_rect_filters; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

        LDR     r14,post_rect_filters
        CMP     r14,#0               ; Any filters left?
        MOVEQ   r0,#3                ;  rect-filter
        MOVEQ   r1,#0                ;  No then de-register
 [ debugregister
        BNE     %FT00
        Debug   register,"Deregistering post-rect-filter",r0,r1
00
 ]
        SWIEQ   XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register post-rect-filter "

        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free rect-filter block "

        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        ORRS    PC,LR,#V_bit

;;--------------------------------------------------------------------------
;; Filter_DeRegisterCopyFilter
;;
;; Remove a copy filter from the list of copy filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;
;;        All must be the same as those passed to RegisterCopyFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterCopyFilter

        Push  "r0-r4"

        DebugS  register,"De-register copy-filter",R0,80
        Debug   register,"Name, address, ws",R0,R1,R2

        ADR     r4,copy_filters
	MOV	r3,#0
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find copy-filter "

        ADDVS   sp,sp,#4
        ADRVS   r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        Pull    "r1-r4,LR",VS
        ORRVSS  PC,LR,#V_bit

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,copy_filters      ; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

        LDR     r14,copy_filters
        CMP     r14,#0               ; Any filters left?
        MOVEQ   r0,#2                ;  copy-filter
        MOVEQ   r1,#0                ;  No then de-register
 [ debugregister
        BNE     %FT00
        Debug   register,"Deregistering copy-filter",r0,r1
00
 ]
        SWIEQ   XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register copy-filter "

        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free copy-filter block "
@


4.1.7.3
log
@Support for Post-icon filters added.
@
text
@a43 2
	B	SWIFilter_RegisterPostIconFilter
	B	SWIFilter_DeRegisterPostIconFilter
a63 2
	DCB	"RegisterPostIconFilter",0
	DCB	"DeRegisterPostIconFilter",0
d275 5
d329 1
a329 1
        MOVEQ   r0,#WimpFilter_PrePoll
d402 1
a402 1
        MOVEQ   r0,#WimpFilter_PostPoll
a424 5
ErrorBlock_UnknownFilter
        DCD    0
        DCB    "UnkF",0
        ALIGN

a661 80
;; Filter_RegisterPostIconFilter
;;
;; Add a new post-icon filter to the list of post-icon filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Address of filter.
;;        R2 - Value to be passed in R12.
;;        R3 - Task handle of task to which filter is applied.
;;
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_RegisterPostIconFilter

        Push  "r0-r3"

        DebugS  register,"Register post-icon-filter",R0,80
        Debug   register,"Name, address, ws, task",R0,R1,R2,R3

; Claim block to put data in.

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #f_block_size
        SWI     XOS_Module

        DebugE  register,"post-icon-filter claim failed "

        ADDVS   sp,sp,#4
        Pull    "r1-r3,LR",VS
        ORRVSS  PC,LR,#V_bit        ; Restore callers flags, and set V

; Link block ^r2 to list.

        LDR     r14,post_icon_filters
        STR     r14,[r2,#next_ptr]  ; Point at next block
        CMP     r14,#0
        STRNE   r2,[r14,#prev_ptr]  ; Make next block point at the new block.
        MOV     R14,#0
        STR     R14,[r2,#prev_ptr]  ; This is the first block in the list
        STR     r2,post_icon_filters

        STR     R14,[r2,#f_mask]    ; Mask is not used for post_icon_filters.
        BLEQ    RegisterFilters     ; Register with wimp if this is first filter

        DebugE  register,"Cant register filters "

        BVS     %FT10               ; Jump if no wimp

        LDR     R14,[sp,#0*4]
        STR     R14,[r2,#f_name]    ; name of filter
        LDR     R14,[sp,#1*4]
        STR     R14,[r2,#f_address] ; address of filter
        LDR     R14,[sp,#2*4]
        STR     R14,[r2,#f_R12]     ; R12 for calling filter.
        LDR     R14,[sp,#3*4]
        MOV     R14,R14,ASL #16
        MOV     R14,R14,LSR #16
        STR     R14,[r2,#f_task]    ; Task ID.

        Debug   register,"post-icon-filter registered ok"

; Exit to caller                    ; Preserves caller's flags.

        Pull    "r0-r3,PC",,^

; Error exit, freeing claimed block

10      STR     R0,[sp,#0*4]        ; Return error ptr
        LDR     R2,post_icon_filters
        MOV     R0,#0
        STR     R0,post_icon_filters
        MOV     R0,#ModHandReason_Free ; Free the block if error
        SWI     XOS_Module
        Pull    "r0-r3,LR"
        ORRS    PC,LR,#V_bit        ; Restore callers flags, and set V

;;--------------------------------------------------------------------------
a707 1
deregister_rect_for_fake_post_rect
d710 1
a710 1
        MOVEQ   r0,#WimpFilter_GetRectangle
a726 2
	; DeRegisterPostRectFilter can exit through here, so
	; keep the stack usage the same!
d782 2
a783 8
	BNE	%FT05

	LDR	r14,fake_postrect	; Consider freeing RectFilter if faking
	TEQ	r14,#0
	BNE	deregister_rect_for_fake_post_rect

        MOV     r0,#WimpFilter_PostGetRectangle
        MOV     r1,#0
d785 1
d787 1
d789 1
a789 1
        SWI     XWimp_RegisterFilter ; Remove filters for speed
a792 1
05
d797 1
a797 1
        DebugE  register,"Cant free post-rect-filter block "
d852 1
a852 1
        MOVEQ   r0,#WimpFilter_BlockCopy
a867 70

        Pull    "r0-r4,PC",VC

        ADD     sp,sp,#4                ; Drop caller's R0
        Pull    "r1-r4,LR"
        ORRS    PC,LR,#V_bit

;;--------------------------------------------------------------------------
;; Filter_DeRegisterPostIconFilter
;;
;; Remove a post-icon filter from the list of posticon filters.
;;
;; Entry:
;;        R0 - Pointer to 0 terminated filter name.
;;        R1 - Addresss of filter.
;;        R2 - Value to be passed in R12.
;;
;;        All must be the same as those passed to RegisterPostIconFilter
;; Exit:
;;        Registers preserved.
;;
;;

SWIFilter_DeRegisterPostIconFilter

        Push  "r0-r4"

        DebugS  register,"De-register post-icon-filter",R0,80
        Debug   register,"Name, address, ws",R0,R1,R2

        ADR     r4,post_icon_filters
	MOV	r3,#0
        BL      find_filter     ; Finds the filter in the list

        DebugE  register,"Cant find posticon-filter "

        ADDVS   sp,sp,#4
        ADRVS   r0,ErrorBlock_UnknownFilter
        BLVS    MsgTrans_ErrorLookup
        Pull    "r1-r4,LR",VS
        ORRVSS  PC,LR,#V_bit

; Found filter, remove it from list.

        LDR     r14,[r4,#next_ptr]
        LDR     r0, [r4,#prev_ptr]
        CMP     r0,#0
        STREQ   r14,post_icon_filters ; Next block is now first on the list
        STRNE   r14,[r0,#next_ptr]   ; Or is next of previous block.
        CMP     R14,#0
        STRNE   r0,[R14,#prev_ptr]   ; If there is a next block update its prev_ptr.

        LDR     r14,post_icon_filters
        CMP     r14,#0               ; Any filters left?
        MOVEQ   r0,#WimpFilter_PostIconGetRectangle
        MOVEQ   r1,#0                ;  No then de-register
 [ debugregister
        BNE     %FT00
        Debug   register,"Deregistering post-icon-filter",r0,r1
00
 ]
        SWIEQ   XWimp_RegisterFilter ; Remove filters for speed

        DebugE  register,"Cant de-register post-icon-filter "

        MOV     R0,#ModHandReason_Free ; Now free the block.
        MOV     R2,R4
        SWI     XOS_Module

        DebugE  register,"Cant free post-icon-filter block "
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
