head	4.5;
access;
symbols
	Filter-0_28:4.5
	Filter-0_27:4.5
	Filter-0_26:4.5
	Filter-0_25:4.5
	RO_5_07:4.4
	Filter-0_24:4.4
	dellis_autobuild_BaseSW:4.4
	sbrodie_sedwards_16Mar2000:4.4
	Filter-0_23:4.4
	dcotton_autobuild_BaseSW:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2.2.1
	Ursula_RiscPC:4.2.2.1.0.2
	Filter-0_22:4.3
	Ursula_merge:4.2.2.1
	Filter-0_21:4.3
	rthornb_UrsulaBuild-19Aug1998:4.2.2.1
	UrsulaBuild_FinalSoftload:4.2.2.1
	rthornb_UrsulaBuild-12Aug1998:4.2.2.1
	aglover_UrsulaBuild-05Aug1998:4.2.2.1
	rthornb_UrsulaBuild-29Jul1998:4.2.2.1
	rthornb_UrsulaBuild-22Jul1998:4.2.2.1
	rthornb_UrsulaBuild-15Jul1998:4.2.2.1
	rthornb_UrsulaBuild-07Jul1998:4.2.2.1
	rthornb_UrsulaBuild-17Jun1998:4.2.2.1
	rthornb_UrsulaBuild-03Jun1998:4.2.2.1
	rthornb_UrsulaBuild-27May1998:4.2.2.1
	rthornb_UrsulaBuild-21May1998:4.2.2.1
	rthornb_UrsulaBuild_01May1998:4.2.2.1
	afrost_NC2_Generic:1.1.2.1
	bavison_FilterMgr_020:4.2.2.1
	sbrodie_FilterMgr_019:4.3
	sbrodie_FilterMgr_018:4.2
	FilterMgr_017:4.2
	Spinner_B20_2:1.1.2.1
	Spinner_19_3:1.1.2.1
	Spinner_B18:1.1.2.1
	Spinner_B17:1.1.2.1
	Spinner_B15:1.1.2.1
	Spinner_B14:1.1.2.1
	Spinner_B13:1.1.2.1
	Spinner_B12:1.1.2.1
	Spinner_B10:1.1.2.1
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spin_merge:1.1.2.1
	ARTtmp_bp:1.1.2.1
	Spinner_B7:1.1.2.1
	ARTtmp_merge:1.1.2.1
	Spin_3Apr97:1.1.2.1
	ARTtmp:1.1.2.1.0.2
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


4.5
date	2012.01.09.09.35.42;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	3HojTHJtT6ToQtOv;

4.4
date	99.12.02.16.07.29;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	98.03.05.19.25.39;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.07.14.59.29;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	97.05.07.14.56.08;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.03.12.14.53.51;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

4.2.2.1
date	98.03.05.17.22.15;	author bavison;	state Exp;
branches;
next	;

1.1.2.1
date	97.03.12.14.53.52;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Rework the 32 bitting to allow a 26 bit version to be made
Some of the changes were one way only, the use of some RETURN[V[C|S]] macros allows 26 bit version to be created.

Version 0.25. Tagged as 'Filter-0_25'
@
text
@; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.rectFilter

;;----------------------------------------------------------------
;; rect_filter_handler
;;
;; This is called by the Wimp on entry to int_get_rectangle
;;
;; Entry:
;;
;;      R2 - Task handle of calling task.
;;
;; Exit:
;;
;;      All other registers preserved.
;;
;;      All interested filters called.
;;
;;

rect_filter_handler

        Push    "r0-r2,LR"		; If you change this, change the
					; sortout_fakepostrect routine
        MOV     R2,R2,ASL #16
        MOV     R2,R2,LSR #16

        [ :LNOT: No26bitCode
        LDR	LR, fake_postrect	; If we're faking post-rectangle
	TEQ	LR, #0			; filters, and we have any
	LDRNE	LR, post_rect_filters	; claimants, go poke the
	TEQNE	LR, #0			; Window Manager's stack
	BLNE	sortout_fakepostrect
        ]

        LDR     r0, get_handle_from_r10 ; find the window being redrawn
        TEQ     r0, #0
        LDREQ   r0, [sp,#16+12+0]	; BTW - you didn't see that...
        ADDEQ   r0, r0, #1
        ADDNE   r0, r10, #1		; turn pointer into window handle

        LDR     r1,rect_filters
rect_filter_exit
        CMP     r1,#0
      [ No26bitCode
        Pull    "r0-r2,PC",EQ            ; End of list.
      |
        Pull    "r0-r2,PC",EQ,^          ; End of list.
      ]
        LDR     r14,[r1,#next_ptr]
        Push    "r14"

        LDR     r14,[r1,#f_task]
        TEQ     r14,R2
        CMPNE   r14,#0
        Pull    "r1",NE
        BNE     rect_filter_exit        ; Filter not interested.

        LDR     r12,[r1,#f_R12]        ; Set R12.

        MOV     LR,PC
        LDR     PC, [r1,#f_address]
        NOP
        Pull    "r1"
        B       rect_filter_exit
        LNK     s.PoRtFilter


@


4.4
log
@  32-bit compatible module.
Detail:
  Doesn't include the faking of post-rectangle filters if not building
    for 26 bit systems any more.
  Assumes that the Wimp doesn't care what the flags are on exit from
    a filter.
Admin:
  Built.

Version 0.23. Tagged as 'Filter-0_23'
@
text
@d58 1
d60 3
@


4.3
log
@Folded in changes from separate version 0.18 on the Ursula branch,
re-inserting the standalone build capability and the bug-fix for
de-registering PostIcon filters.
@
text
@d41 1
d47 1
d58 1
a58 1
        Pull    "r0-r2,PC",EQ,^          ; End of list.
a69 1
	[ {TRUE}
a72 10
	|
	STMFD	sp!,{r0-r12}
	LDR	r3,[r1,#f_address]
	MOV	r1,sp
	MOV	r0,#0
	MOV	r2,pc
	AND	r2,r2,#3		; should be 3
	SWI	&69cc0
        LDMFD	sp!,{r0-r12}
	]
@


4.2
log
@Second attempt at ARTtmp fold
@
text
@d47 6
a52 3
        LDR     r0,[sp,#16+12+0]	; find the window being redrawn
        ADD     r0,r0,#1		; turn pointer into window handle
					; BTW - you didn't see that...
@


4.2.2.1
log
@Improved layout of filters table (and re-worded headings).
Fixed bug which was causing *Filters help/syntax lookup to fail.
GetRectangle filter handler now obtains window handle from R10 rather than the
stack, providing current Wimp is version 3.99 or later.
@
text
@d47 3
a49 6
        LDR     r0, get_handle_from_r10 ; find the window being redrawn
        TEQ     r0, #0
        LDREQ   r0, [sp,#16+12+0]	; BTW - you didn't see that...
        ADDEQ   r0, r0, #1
        ADDNE   r0, r10, #1		; turn pointer into window handle

@


4.1
log
@ARTtmp branch folded in
@
text
@d1 83
@


1.1
log
@file RectFilter was initially added on branch Spinner.
@
text
@@


1.1.2.1
log
@Updated in line with version 0.15. To wit:

1) Allow for task names being ctrl-terminated
2) Reference Messages file via FilterManager$Path, if set
3) Fix corruption of errors returned from Filter_RegisterXXX
4) Support for rectangle and copy filters (for Replay 3)
5) Support for post-rectangle filters (for Redraw Manager)
@
text
@a0 83
; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.rectFilter

;;----------------------------------------------------------------
;; rect_filter_handler
;;
;; This is called by the Wimp on entry to int_get_rectangle
;;
;; Entry:
;;
;;      R2 - Task handle of calling task.
;;
;; Exit:
;;
;;      All other registers preserved.
;;
;;      All interested filters called.
;;
;;

rect_filter_handler

        Push    "r0-r2,LR"		; If you change this, change the
					; sortout_fakepostrect routine
        MOV     R2,R2,ASL #16
        MOV     R2,R2,LSR #16

        LDR	LR, fake_postrect	; If we're faking post-rectangle
	TEQ	LR, #0			; filters, and we have any
	LDRNE	LR, post_rect_filters	; claimants, go poke the
	TEQNE	LR, #0			; Window Manager's stack
	BLNE	sortout_fakepostrect

        LDR     r0,[sp,#16+12+0]	; find the window being redrawn
        ADD     r0,r0,#1		; turn pointer into window handle
					; BTW - you didn't see that...
        LDR     r1,rect_filters
rect_filter_exit
        CMP     r1,#0
        Pull    "r0-r2,PC",EQ,^          ; End of list.
        LDR     r14,[r1,#next_ptr]
        Push    "r14"

        LDR     r14,[r1,#f_task]
        TEQ     r14,R2
        CMPNE   r14,#0
        Pull    "r1",NE
        BNE     rect_filter_exit        ; Filter not interested.

        LDR     r12,[r1,#f_R12]        ; Set R12.

	[ {TRUE}
        MOV     LR,PC
        LDR     PC, [r1,#f_address]
        NOP
	|
	STMFD	sp!,{r0-r12}
	LDR	r3,[r1,#f_address]
	MOV	r1,sp
	MOV	r0,#0
	MOV	r2,pc
	AND	r2,r2,#3		; should be 3
	SWI	&69cc0
        LDMFD	sp!,{r0-r12}
	]
        Pull    "r1"
        B       rect_filter_exit
        LNK     s.PoRtFilter


@
