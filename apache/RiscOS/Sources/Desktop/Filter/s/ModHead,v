head	4.11;
access;
symbols
	Filter-0_28:4.11
	Filter-0_27:4.11
	Filter-0_26:4.9
	Filter-0_25:4.9
	RO_5_07:4.8
	Filter-0_24:4.8
	dellis_autobuild_BaseSW:4.7
	sbrodie_sedwards_16Mar2000:4.7
	Filter-0_23:4.7
	dcotton_autobuild_BaseSW:4.8
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3.2.2
	Ursula_RiscPC:4.3.2.2.0.2
	Filter-0_22:4.6
	Ursula_merge:4.3.2.2
	Filter-0_21:4.6
	rthornb_UrsulaBuild-19Aug1998:4.3.2.2
	UrsulaBuild_FinalSoftload:4.3.2.2
	rthornb_UrsulaBuild-12Aug1998:4.3.2.2
	aglover_UrsulaBuild-05Aug1998:4.3.2.2
	rthornb_UrsulaBuild-29Jul1998:4.3.2.2
	rthornb_UrsulaBuild-22Jul1998:4.3.2.2
	rthornb_UrsulaBuild-15Jul1998:4.3.2.2
	rthornb_UrsulaBuild-07Jul1998:4.3.2.2
	rthornb_UrsulaBuild-17Jun1998:4.3.2.2
	rthornb_UrsulaBuild-03Jun1998:4.3.2.2
	rthornb_UrsulaBuild-27May1998:4.3.2.2
	rthornb_UrsulaBuild-21May1998:4.3.2.2
	rthornb_UrsulaBuild_01May1998:4.3.2.2
	afrost_NC2_Generic:4.1.7.3
	bavison_FilterMgr_020:4.3.2.2
	sbrodie_FilterMgr_019:4.5
	sbrodie_FilterMgr_018:4.4
	FilterMgr_017:4.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.3
	Daytona:4.3.0.4
	Daytona_bp:4.3
	Ursula:4.3.0.2
	Ursula_bp:4.3
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.3
	Spinner_B7:4.1.7.3
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.3
	Spin_3Apr97:4.1.7.3
	ARTtmp:4.1.7.3.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.11
date	2012.01.12.21.14.11;	author rsprowson;	state Exp;
branches;
next	4.10;
commitid	ZzLhhv8NuC56CVOv;

4.10
date	2012.01.12.21.11.58;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	thnB27z4Ww7gBVOv;

4.9
date	2012.01.09.09.35.40;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	3HojTHJtT6ToQtOv;

4.8
date	2001.03.16.17.07.49;	author sbrodie;	state Exp;
branches;
next	4.7;

4.7
date	99.12.02.16.07.26;	author sbrodie;	state Exp;
branches;
next	4.6;

4.6
date	98.10.05.15.41.22;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	98.03.05.19.25.37;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	98.01.30.10.31.54;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	97.05.13.00.12.29;	author kbracey;	state Exp;
branches
	4.3.2.1;
next	4.2;

4.2
date	97.05.07.14.56.02;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.29.48;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.3.2.1
date	98.03.05.17.22.12;	author bavison;	state Exp;
branches;
next	4.3.2.2;

4.3.2.2
date	98.04.06.09.21.34;	author bavison;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.29.48;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.28.48;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.19.26;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.17.40;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.12.14.53.46;	author kbracey;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.03.14.10.18.16;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.11
log
@Make international help (or lack of) choice based on switch passed in rather than the bitfield definition in Hdr:ModHand.
Makes help work on RISC OS 3.10 again.

Version 0.27. Tagged as 'Filter-0_27'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.ModHead

        ASSERT  (.=Module_BaseAddr)

MySWIBase       *       Module_SWISystemBase + FilterSWI * Module_SWIChunkSize

        DCD     0                 ;Start - Module_BaseAddr
        DCD     Init              - Module_BaseAddr
        DCD     Die               - Module_BaseAddr
        DCD     Service           - Module_BaseAddr
        DCD     Title             - Module_BaseAddr
        DCD     Helpstr           - Module_BaseAddr
        DCD     Helptable         - Module_BaseAddr
        DCD     MySWIBase
        DCD     Filter_SWIdecode  - Module_BaseAddr
        DCD     Filter_SWInames   - Module_BaseAddr
        DCD     0
      [ international_help
        DCD     message_file_name - Module_BaseAddr
      |
        DCD     0
      ]
      [ :LNOT: No32bitCode
        DCD     ModuleFlags       - Module_BaseAddr
      ]

; ----------------------------------------------------------------------------------------------------------------------
Title   DCB     "FilterManager",0
Helpstr DCB     "Filter Manager",9,"$Module_HelpVersion"
        DCB     0
        ALIGN
        
; ----------------------------------------------------------------------------------------------------------------------

prefilter_token         DCB     "PreFT",0
postfilter_token        DCB     "PostFT",0
rectfilter_token        DCB     "RectFT",0
copyfilter_token        DCB     "CopyFT",0
postrectfilter_token    DCB     "PostRectFT",0
posticonfilter_token    DCB     "PostIconFT",0
filter_token            DCB     "Filter",0
task_token              DCB     "Task",0
mask_token              DCB     "Mask",0
all_token               DCB     "All",0
                        ALIGN

      [ :LNOT: No32bitCode
ModuleFlags             DCD     ModuleFlag_32bit
      ]

min_gap         *       3
min_tab1        *       20
min_tab2        *       24
min_tab3        *       8

; ---------------------------------------------------------------------------------------------------------------------
;       Handle *Filters - List all attached filters with the tasks they are attached to.
Filters_Code
        Push    "r7-r8,LR"
        Debug   xx,"*Filters called listing pre_filters"

        LDR     wsptr,[R12]

        ADR     r1, prefilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        Pull    "r7-r8,PC",VS

        MOV     r4, #0                  ; r4 = how much space we are using on the stack to hold column headings.

        ADR     r1, filter_token
        BL      lookuptostack
        BVS     %FT05
        STR     sp, filter_text
        ADD     r5, r3, #min_gap        ; r5 = width of column 1
        CMP     r5, #min_tab1
        MOVCC   r5, #min_tab1

        ADR     r1, task_token
        BL      lookuptostack
        BVS     %FT05
        STR     sp, task_text
        ADD     r6, r3, #min_gap        ; r6 = width of column 2
        CMP     r6, #min_tab2
        MOVCC   r6, #min_tab2

        ADR     r1, mask_token
        BL      lookuptostack
        BVS     %FT05
        STR     sp, mask_text
        ADD     r7, r3, #min_gap        ; r7 = width of column 3
        CMP     r7, #min_tab3
        MOVCC   r7, #min_tab3

        ADR     r1, all_token
        BL      lookuptostack
        BVS     %FT05
        STR     sp, all_text

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, pre_filters
        B       %FT02
01
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        BVS     %FT05
        MOV     r1, r6
        BL      writefield
        SWI     XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
02
        CMP     r3, #0
        BNE     %BT01

        SWI     XOS_NewLine

        ADRL    r1, postfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        BVS     %FT05
        LDR     r0, mask_text
        MOV     r1, r7
        BL      writefield
        SWIVC   XOS_NewLine
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, mask_text
        MOV     r1, r7
        BL      writefield_dashed
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, post_filters
        B       %FT04
03
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        BVS     %FT05

        LDR     r0, [r3, #f_mask]
        ADR     r1, convert_buffer
        MOV     r2, #10
        SWI     XOS_ConvertHex8
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
04
        CMP     r3, #0
        BNE     %BT03

        SWI     XOS_NewLine
        BVS     %FT05

        ADRL    r1, rectfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, rect_filters
        B       %FT11

10
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
11
        CMP     r3, #0
        BNE     %BT10

        SWI     XOS_NewLine
        BVS     %FT05

        ADRL    r1, postrectfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, post_rect_filters
        B       %FT31

30
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
31
        CMP     r3, #0
        BNE     %BT30

        SWI     XOS_NewLine
        BVS     %FT05


        ADRL    r1, posticonfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, post_icon_filters
        B       %FT41

40
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
41
        CMP     r3, #0
        BNE     %BT40

        SWI     XOS_NewLine
        BVS     %FT05


        ADRL    r1, copyfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        SWIVC   XOS_NewLine
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, copy_filters
        B       %FT13
12
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
13
        CMP     r3, #0
        BNE     %BT12
05
        ADD     sp, sp, r4
        Pull    "r7-r8,PC"

lookuptostack
; In:   r1->token
;       r4=current size of data on stack
; Out:  r1,r2 corrupted
;       r3=length of text found
;       r4=new size of data on stack
;       sp->text
        MOV     r8, lr                  ; Don't use stack in here (BLs are OK though)
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVS   pc, r8

        ADD     r1, r3, #4              ; Word align length (allow for terminator).
        BIC     r1, r1, #3
        SUB     sp, sp, r1              ; Allocate space on stack.
        ADD     r4, r4, r1

        MOV     r1, sp
06
        LDRB    r0, [r2], #1
        CMP     r0, #" "
        STRCSB  r0, [r1], #1
        BCS     %BT06
        MOV     r0, #0
        STRB    r0, [r1]
        MOV     pc, r8

writefield
; Write control-terminated string, padded with spaces to field width
; In:   r0 = text to print
;       r1 = field width
; Out:  r0,r2 corrupted
        Push    "lr"
        MOV     r2, r0
        BL      Write32
        Pull    "pc",VS
        SUB     r0, r0, r2
        SUB     r0, r1, r0
07
        SWI     XOS_WriteI+" "
        Pull    "pc",VS
        SUBS    r0, r0, #1
        BGE     %BT07
        Pull    "pc"

Write32
; Output a control character terminated string to fit in a given field width
; In:   R0 -> Ctrl-terminated string
;       R1 =  field width
        Push    "R1,R2,LR"
;
        SUB     R1,R1,#min_gap
        MOV     R2,R0
01      LDRB    R0,[R2],#1
        CMP     R0,#32
        SUBHSS  R1,R1,#1
        MOVLO   R0,R2
        Pull    "R1,R2,PC",LO
        SWI     XOS_WriteC
        BVC     %BT01
        Pull    "R1,R2,PC"

writefield_dashed
; Write dashes for the length of the given control-terminated string, and pad with spaces to field width
; In:   r0 = text string
;       r1 = field width
; Out:  r0,r2 corrupted
        Push    "lr"
        MOV     r2, r0
01
        LDRB    lr, [r0], #1
        CMP     lr, #32
        SWIHS   XOS_WriteI+"-"
        Pull    "pc",VS
        BHS     %BT01
        SUB     r0, r0, r2
        SUB     r0, r1, r0
07
        SWI     XOS_WriteI+" "
        Pull    "pc",VS
        SUBS    r0, r0, #1
        BGE     %BT07
        Pull    "pc"

; ----------------------------------------------------------------------------------------------------------------------
Helptable
      [ international_help
        Command "Filters", 0, 0, International_Help
        DCB     0
      |
        Command "Filters", 0, 0, 0
        DCB     0
      ]
; ----------------------------------------------------------------------------------------------------------------------
      [ international_help
Filters_Help    DCB     "HFLMFLT", 0
Filters_Syntax  DCB     "SFLMFLT", 0
      |
Filters_Help
        DCB     "*Filters displays all Wimp filters currently active.", 0
Filters_Syntax
        DCB     "Syntax: *Filters", 0
      ]
        ALIGN
; ----------------------------------------------------------------------------------------------------------------------
;       Module initialisation point
Init
        Push    "r0-r3,LR"

        LDR     r2, [r12]
        CMP     r2, #0                  ; clears V
        BNE     %FT01

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #max_running_work
        SWI     XOS_Module
        ADDVS   sp,sp,#4
        Pull    "r1-r3,PC",VS

        STR     r2, [r12]
01
        MOV     r12, r2

; Clear list pointers

        MOV     r0, #0
        STR     r0, pre_filters
        STR     r0, post_filters
        STR     r0, rect_filters
        STR     r0, copy_filters
        STR     r0, post_rect_filters
        STR     r0, post_icon_filters
        STR     r0, flags               ; Clear flags.
        [ No26bitCode
        STR     r0, fake_postrect
        ]

; If we're on a Wimp earlier than 3.86, then we need to fake post-rectangle filters
        MOV     r0, #7
        SWI     Wimp_ReadSysInfo
        SUB     r0, r0, #256
        [ :LNOT: No26bitCode
        CMP     r0, #386-256
        MOVLT   r1, #1
        MOVGE   r1, #0
        STR     r1, fake_postrect
        ]
; If we're on a Wimp earlier than 3.99, then we cannot rely on getting handles from r10
        CMP     r0, #399-256
        MOVLT   r1, #0
        MOVGE   r1, #1
        STR     r1, get_handle_from_r10

        [ standalone
        BL      declareresourcefsfiles
        ]

        ADR     R0,servicecallback
        MOV     R1,WP                   ; workspace pointer
        SWI     XOS_AddCallBack         ;   install the call back to broadcast we are here message
        MOVVC   R0,#-1
        STRVC   R0,callbackpending      ; and then setup a suitable flag to indicate we have a callback pending
        Pull    "r0-r3,LR"              ; No errors
        RETURNVC                        ; clear V

;;-----------------------------------------------------------------------------
;; When the CallBack is granted we then broadcast a service call so that
;;   all Filters can be registered that are required.
;;-----------------------------------------------------------------------------

servicecallback
        EntryS  "R0-R1"

        MOV     R1,#0                   ; the callback has been granted, so flag as no longer pending
        STR     R1,callbackpending

        LDR     R0,=Module_Version
        MOV     R1,#Service_FilterManagerInstalled
        SWI     XOS_ServiceCall         ; broadcast the service

        EXITS
        LTORG

; ----------------------------------------------------------------------------------------------------------------------
;       Module service entry point
ServiceTable
        ASSERT  Service_ResourceFSStarting < Service_WimpRegisterFilters
        DCD     0                               ; flags word
        DCD     Service2 - Module_BaseAddr
      [ standalone
        DCD     Service_ResourceFSStarting
      ]
        DCD     Service_WimpRegisterFilters
        DCD     0                               ; terminator

        DCD     ServiceTable - Module_BaseAddr
Service
        MOV     R0, R0                          ; flag service table to aware kernels
        TEQ     R1,#Service_WimpRegisterFilters
      [ standalone
        TEQNE   R1,#Service_ResourceFSStarting
      ]
        MOVNE   PC,LR
Service2
      [ standalone
        TEQ     R1,#Service_ResourceFSStarting
        BEQ     serviceresourcefsstarting
      ]

        LDR     R12, [R12]
        CMP     R12, #0
        MOVEQ   PC, LR                  ; Exit if no workspace

;-------------------------------------
; Register our filters with the Wimp
; In:
;  R12 -> workspace
;
; Out:
;   VC if filters registered

RegisterFilters
        Push    "r0-r2,LR"

        [ :LNOT: No26bitCode
        LDR     LR,fake_postrect
        TEQ     LR,#0
        MOVNE   R0,#0
        STRNE   R0,int_get_rectangle_reentry_addr
        ]

        LDR     LR,pre_filters
        CMP     LR,#0                   ; Any pre-filters?
        MOVNE   R0,#0                   ; Pre_filter
        ADRNEL  R1,pre_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register pre-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register pre-filter "

        ADDVS   r13,r13,#4
        Pull    "r1-r2,PC",VS

        LDR     LR,rect_filters
        CMP     LR,#0                   ; Any rect-filters?
        BNE     %FT01

        LDR     LR,post_rect_filters
        CMP     LR,#0                   ; how about post-rect-filters?
        BEQ     %FT02
        LDR     LR,fake_postrect
        CMP     LR,#0

01      MOVNE   R0,#3                   ; rect_filter
        ADRNEL  R1,rect_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register rect-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register rect-filter "

        ADDVS   r13,r13,#4
        Pull    "r1-r2,PC",VS

02      LDR     LR,copy_filters
        CMP     LR,#0                   ; Any copy-filters?
        MOVNE   R0,#2                   ; copy_filter
        ADRNEL  R1,copy_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register copy-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register copy-filter "

        ADDVS   r13,r13,#4
        Pull    "r1-r2,PC",VS

        LDR     LR,post_filters
        CMP     LR,#0                   ; Any post-filters?
        MOVNE   R0,#WimpFilter_PostPoll
        ADRNEL  R1,post_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register post-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register post-filter "

        ADDVS   r13,r13,#4
        Pull    "r1-r2,PC",VS

        LDR     LR,post_icon_filters
        CMP     LR,#0                   ; Any post-icon-filters?
        MOVNE   R0,#WimpFilter_PostIconGetRectangle
        ADRNEL  R1,post_icon_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register post-icon-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register post-icon-filter "

        ADDVS   r13,r13,#4
        Pull    "r1-r2,PC",VS

        LDR     LR,fake_postrect
        TEQ     LR,#0
        Pull    "r0-r2,PC",NE

        LDR     LR,post_rect_filters
        CMP     LR,#0                   ; Any post-rect-filters?
        MOVNE   R0,#4                   ; post_rect_filter
        ADRNEL  R1,post_rect_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register post-rect-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter
        STRVS   r0,[r13]

        DebugE  register,"Can't register post-rect-filter "

        Pull    "r0-r2,LR"
        RETURNVC

      [ standalone
; ResourceFS has been reloaded - redeclare resource files
; In    R2 -> address to call
;       R3 -> workspace for ResourceFS module

serviceresourcefsstarting
        Push    "r0,LR"
        ADRL    R0,resourcefsfiles
        MOV     LR,PC                   ; LR -> return address
        MOV     PC,R2                   ; R2 -> address to call
        NOP
        Pull    "r0,LR"
        RETURN
      ]

; ----------------------------------------------------------------------------------------------------------------------
;       RMKill'ing the module  -  Release filter handlers. Release linked lists of filters.
Die
;
        LDR     r12, [r12]
        CMP     r12, #0
        RETURN  EQ

        Push    "r0-r11,LR"

        ADR     r2, pre_filters
        BL      free_list               ; Free list of pre filters
        ADR     r2, rect_filters
        BL      free_list               ; Free list of rect filters
        ADR     r2, post_filters
        BL      free_list               ; Free list of post filters
        ADR     r2, post_rect_filters
        BL      free_list               ; Free list of post rect filters
        ADR     r2, post_icon_filters
        BL      free_list               ; Free list of post icon filters
        ADR     r2, copy_filters
        BL      free_list               ; Free list of copy filters

        MOV     R0,#WimpFilter_PrePoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_GetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostPoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_BlockCopy
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostGetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostIconGetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        LDR     R0,callbackpending
        CMP     R0,#0                   ; do we have a callback pending? (clears V)
        ADRNE   R0,servicecallback      ;   yes, so remove it before its granted
        MOVNE   R1,WP                   ;   as we are going to die
        SWINE   XOS_RemoveCallBack

        MOV     R0,#0
        STR     R0,callbackpending      ; and then remove it

        MOV     R1,#Service_FilterManagerDying
        SWI     XOS_ServiceCall         ; broadcast that the module is dying so you are no longer installed

      [ standalone
        ADRL    R0,resourcefsfiles
        SWI     XResourceFS_DeregisterFiles ; ignore errors
      ]

        BL      MsgTrans_CloseFile      ; Make sure Messages file is closed.

        Pull    "R0-R11,LR"
        RETURNVC                        ; clear V - don't refuse to die 

; ----------------------------------------------------------------------------------------------------------------------

        LNK     s.SWIs
@


4.10
log
@Expand tabs.
@
text
@d32 1
a32 1
 [ International_Help <> 0
d34 1
a34 1
 |
d36 1
a36 1
 ]
a43 3
      [ standalone
        =       "  (Standalone)"
      ]
d45 2
a46 1
                ALIGN
d517 5
a521 3
; ----------------------------------------------------------------------------------------------------------------------
Filtercommand
        Command "Filters",0,0,International_Help
d523 1
d525 4
a528 1
 [ International_Help=0
d530 1
a530 2
        DCB     "*Filters displays all Wimp filters currently active."
        DCB     0
d532 2
a533 5
        DCB     "Syntax: *Filters",0
 |
Filters_Help    DCB     "HFLMFLT", 0
Filters_Syntax  DCB     "SFLMFLT", 0
 ]
@


4.9
log
@Rework the 32 bitting to allow a 26 bit version to be made
Some of the changes were one way only, the use of some RETURN[V[C|S]] macros allows 26 bit version to be created.

Version 0.25. Tagged as 'Filter-0_25'
@
text
@d47 1
a47 1
	DCB	0
d55 1
a55 1
postrectfilter_token	DCB	"PostRectFT",0
d153 1
a153 1
	BL	writefield
d229 2
a230 2
	SWI	XOS_NewLine
	BVS	%FT05
d284 1
a284 1
	BVS	%FT05
d338 1
a338 1
	BVS	%FT05
d393 1
a393 1
	BVS	%FT05
d467 1
a467 1
        BL	Write32
d485 9
a493 9
	MOV	R2,R0
01	LDRB	R0,[R2],#1
	CMP 	R0,#32
	SUBHSS  R1,R1,#1
	MOVLO	R0,R2
	Pull	"R1,R2,PC",LO
	SWI	XOS_WriteC
	BVC	%BT01
	Pull	"R1,R2,PC"
d505 1
a505 1
        SWIHS	XOS_WriteI+"-"
d560 3
a562 3
	STR	r0, copy_filters
	STR	r0, post_rect_filters
	STR	r0, post_icon_filters
d569 3
a571 3
	MOV	r0, #7
	SWI	Wimp_ReadSysInfo
	SUB	r0, r0, #256
d573 4
a576 4
	CMP	r0, #386-256
	MOVLT	r1, #1
	MOVGE	r1, #0
	STR	r1, fake_postrect
d579 8
a586 8
	CMP     r0, #399-256
	MOVLT   r1, #0
	MOVGE   r1, #1
	STR     r1, get_handle_from_r10

	[ standalone
	BL	declareresourcefsfiles
	]
d631 1
a631 1
	TEQNE   R1,#Service_ResourceFSStarting
d656 4
a659 4
	LDR	LR,fake_postrect
	TEQ	LR,#0
	MOVNE	R0,#0
	STRNE	R0,int_get_rectangle_reentry_addr
d674 1
a674 1
	ADDVS	r13,r13,#4
d679 1
a679 1
	BNE	%FT01
d681 5
a685 5
	LDR 	LR,post_rect_filters
	CMP	LR,#0			; how about post-rect-filters?
	BEQ	%FT02
	LDR	LR,fake_postrect
	CMP	LR,#0
d697 1
a697 1
	ADDVS	r13,r13,#4
d712 1
a712 1
	ADDVS	r13,r13,#4
d727 1
a727 1
	ADDVS	r13,r13,#4
d742 1
a742 1
	ADDVS	r13,r13,#4
d745 9
a753 9
	LDR	LR,fake_postrect
	TEQ	LR,#0
	Pull	"r0-r2,PC",NE

	LDR	LR,post_rect_filters
	CMP	LR,#0			; Any post-rect-filters?
	MOVNE	R0,#4			; post_rect_filter
	ADRNEL	R1,post_rect_filter_handler
	MOVNE	R2,R12
d757 2
a758 2
	SWINE	XWimp_RegisterFilter
	STRVS	r0,[r13]
d760 1
a760 1
	DebugE	register,"Can't register post-rect-filter "
@


4.8
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.24. Tagged as 'Filter-0_24'
@
text
@d37 1
d39 1
d63 3
a65 1
ModuleFlags             DCD     1       ; 32-bit compatible module
d593 2
a594 2
        SUBVSS  r0, r0, r0              ; clear V
        Pull    "r0-r3,PC"              ; No errors
d602 1
a602 1
        Entry   "R0-R1"
d611 1
a611 1
        EXIT
d617 1
d621 3
a623 3
        DCD     Service_ResourceFSStarting      ; &60   ;
      ]                                                 ; must be in ascending order
        DCD     Service_WimpRegisterFilters     ; &86   ;
d762 2
a763 2
        Pull    "r0-r2,PC"

d771 1
a771 1
        Push    "R0,LR"
d775 3
a777 1
        Pull    "R0,PC"
a782 1
        Push    "R0-R11,LR"
d786 3
a788 1
        Pull    "R0-R11,PC",EQ
a850 1
        CLRV    VS                      ; clear V - don't refuse to die
d852 2
a853 1
        Pull    "R0-R11,PC"
@


4.7
log
@  32-bit compatible module.
Detail:
  Doesn't include the faking of post-rectangle filters if not building
    for 26 bit systems any more.
  Assumes that the Wimp doesn't care what the flags are on exit from
    a filter.
Admin:
  Built.

Version 0.23. Tagged as 'Filter-0_23'
@
text
@a15 1
        LEADR   Module_LoadAddr
d41 1
a41 4
Helpstr DCB     "Filter Manager",9,"$Module_MajorVersion ($Module_Date)"
      [ Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
      ]
d43 1
a43 1
        =       "  (Stand alone)"
d598 1
a598 1
        ENTRY   "R0-R1"
@


4.6
log
@Spinner and Ursula branches merged.
Changed to use srccommit.
Ancient [ Version < x conditionals removed.

Version 0.21. Tagged as 'Filter-0_21'
@
text
@d38 1
d65 2
d151 4
a154 3
        MOVVC   r1, r6
	BLVC	writefield
        SWIVC   XOS_NewLine
d476 1
a476 1
        Pull    "pc",,^
d515 1
a515 1
        Pull    "pc",,^
d564 3
d572 1
d577 1
d593 2
a594 2

        Pull    "r0-r3,PC",,^           ; No errors
d611 1
a611 1
        EXITS
d624 1
a624 1
        
d632 1
a632 1
        MOVNES  PC,LR
d654 1
d659 1
d774 1
a774 1
        Pull    "R0,PC",,^
d784 1
a784 1
        Pull    "R0-R11,PC",EQ,^
d847 1
d849 1
a849 1
        Pull    "R0-R11,PC",,^           ; don't refuse to die
@


4.5
log
@Folded in changes from separate version 0.18 on the Ursula branch,
re-inserting the standalone build capability and the bug-fix for
de-registering PostIcon filters.
@
text
@d41 4
a44 1
Helpstr DCB     "Filter Manager",9,"$VString ($Date)"
d598 1
a598 1
        LDR     R0,=Version
d607 10
d618 1
d621 1
a621 1
	TEQNE	R1,#Service_ResourceFSStarting
d623 2
a624 1
        MOVNE   PC,LR
a766 51
;       Reset button pressed. Wimp has shut down. Release filter handlers. Release linked lists of filters.
      [ Version < 4
svc_reset
        Push    "R0-R2, LR"

        ADR     r2, pre_filters
        BL      free_list               ; Free list of pre filters
        ADR     r2, rect_filters
        BL      free_list               ; Free list of rect filters
        ADR     r2, post_filters
        BL      free_list               ; Free list of post filters
        ADR     r2, post_rect_filters
        BL      free_list               ; Free list of post rect filters
        ADR     r2, post_icon_filters
        BL      free_list               ; Free list of post icon filters
        ADR     r2, copy_filters
        BL      free_list               ; Free list of copy filters

        MOV     R0,#WimpFilter_PrePoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_GetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostPoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_BlockCopy
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostGetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostIconGetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        Pull    "R0-R2, PC",,^
      ]
; ----------------------------------------------------------------------------------------------------------------------
a832 7
      ]

      [ Version < 5
; Release all workspace
        MOV     r2, r12
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
@


4.4
log
@standalone option added
@
text
@d62 3
a64 2
min_tab1        *       16
min_tab2        *       16
d69 1
a69 1
        Push    "LR"
d81 1
a81 1
        Pull    "PC",VS
d105 3
a117 1

d119 2
a120 1
        SWI     XOS_Write0
d122 8
d145 2
a146 1
	BLVC	Write32
a169 1

a173 1

d175 2
a176 1
        SWI     XOS_Write0
d178 12
a237 1

d242 8
a291 1

d296 8
a346 1

d351 8
d402 4
d424 1
a424 1
        Pull    "PC"
d433 1
a433 1
        MOV     r7, lr                  ; Don't use stack in here (BLs are OK though)
d436 1
a436 1
        MOVVS   pc, r7
d451 1
a451 1
        MOV     pc, r7
d454 1
d466 40
d519 1
a519 1
        DCB     "*Filters displays all pre and post Wimp_Poll filters currently active."
d563 8
a570 3
	MOVLT	r0, #1
	MOVGE	r0, #0
	STR	r0, fake_postrect
a882 14
;       Write32 - output a control character terminated string
;
;       In: R0->Ctrl-terminated string
Write32
        Push    "R1,LR"
;
	MOV	R1,R0
01	LDRB	R0,[R1],#1
	CMPS	R0,#32
	MOVLO	R0,R1
	Pull	"R1,PC",LO
	SWI	XOS_WriteC
	BVC	%BT01
	Pull	"R1,PC"
@


4.3
log
@Erroneous write to code area removed
@
text
@d41 5
a45 1
Helpstr DCB     "Filter Manager",9,"$VString ($Date)",0
d477 4
d511 3
d515 4
d643 13
d770 5
@


4.3.2.1
log
@Improved layout of filters table (and re-worded headings).
Fixed bug which was causing *Filters help/syntax lookup to fail.
GetRectangle filter handler now obtains window handle from R10 rather than the
stack, providing current Wimp is version 3.99 or later.
@
text
@d58 2
a59 3
min_tab1        *       20
min_tab2        *       24
min_tab3        *       8
d64 1
a64 1
        Push    "r7-r8,LR"
d76 1
a76 1
        Pull    "r7-r8,PC",VS
a99 3
        ADD     r7, r3, #min_gap        ; r7 = width of column 3
        CMP     r7, #min_tab3
        MOVCC   r7, #min_tab3
d110 1
d112 1
a112 2
        MOV     r1, r6
        BL      writefield
a113 8
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
d129 1
a129 2
        MOVVC   r1, r6
	BLVC	writefield
d153 1
d158 1
d160 1
a160 2
        MOV     r1, r7
        BL      writefield
a161 12
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, mask_text
        MOV     r1, r7
        BL      writefield_dashed
d210 1
a214 8
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
d257 1
a261 8
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
d305 1
a309 8
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
        BVS     %FT05
        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield_dashed
a352 4
        BVS     %FT05
        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield_dashed
d371 1
a371 1
        Pull    "r7-r8,PC"
d380 1
a380 1
        MOV     r8, lr                  ; Don't use stack in here (BLs are OK though)
d383 1
a383 1
        MOVVS   pc, r8
d398 1
a398 1
        MOV     pc, r8
a400 1
; Write control-terminated string, padded with spaces to field width
a411 40
        Pull    "pc",VS
        SUBS    r0, r0, #1
        BGE     %BT07
        Pull    "pc",,^

Write32
; Output a control character terminated string to fit in a given field width
; In:   R0 -> Ctrl-terminated string
;       R1 =  field width
        Push    "R1,R2,LR"
;
        SUB     R1,R1,#min_gap
	MOV	R2,R0
01	LDRB	R0,[R2],#1
	CMP 	R0,#32
	SUBHSS  R1,R1,#1
	MOVLO	R0,R2
	Pull	"R1,R2,PC",LO
	SWI	XOS_WriteC
	BVC	%BT01
	Pull	"R1,R2,PC"

writefield_dashed
; Write dashes for the length of the given control-terminated string, and pad with spaces to field width
; In:   r0 = text string
;       r1 = field width
; Out:  r0,r2 corrupted
        Push    "lr"
        MOV     r2, r0
01
        LDRB    lr, [r0], #1
        CMP     lr, #32
        SWIHS	XOS_WriteI+"-"
        Pull    "pc",VS
        BHS     %BT01
        SUB     r0, r0, r2
        SUB     r0, r1, r0
07
        SWI     XOS_WriteI+" "
        Pull    "pc",VS
d425 1
a425 1
        DCB     "*Filters displays all Wimp filters currently active."
d469 3
a471 7
	MOVLT	r1, #1
	MOVGE	r1, #0
	STR	r1, fake_postrect
	CMP     r0, #399-256
	MOVLT   r1, #0
	MOVGE   r1, #1
	STR     r1, get_handle_from_r10
d755 14
@


4.3.2.2
log
@Incorporated Filter_DeRegisterPostIconFilter bugfix and standalone capability
from trunk.
Added Ursula service call table.
@
text
@d41 1
a41 5
Helpstr DCB     "Filter Manager",9,"$VString ($Date)"
      [ standalone
        =       "  (Stand alone)"
      ]
	DCB	0
a561 1
; If we're on a Wimp earlier than 3.99, then we cannot rely on getting handles from r10
a566 4
	[ standalone
	BL	declareresourcefsfiles
	]

a594 10
ServiceTable
        DCD     0                               ; flags word
        DCD     Service2 - Module_BaseAddr
      [ standalone
        DCD     Service_ResourceFSStarting      ; &60   ;
      ]                                                 ; must be in ascending order
        DCD     Service_WimpRegisterFilters     ; &86   ;
        DCD     0                               ; terminator
        
        DCD     ServiceTable - Module_BaseAddr
a595 5
        MOV     R0, R0                          ; flag service table to aware kernels
      [ standalone
	TEQ     R1,#Service_ResourceFSStarting
        TEQNE   R1,#Service_WimpRegisterFilters
      |
d597 1
a597 7
      ]
        MOVNES  PC,LR
Service2
      [ standalone
        TEQ     R1,#Service_ResourceFSStarting
        BEQ     serviceresourcefsstarting
      ]
a721 13
      [ standalone
; ResourceFS has been reloaded - redeclare resource files
; In    R2 -> address to call
;       R3 -> workspace for ResourceFS module

serviceresourcefsstarting
        Push    "R0,LR"
        ADRL    R0,resourcefsfiles
        MOV     LR,PC                   ; LR -> return address
        MOV     PC,R2                   ; R2 -> address to call
        Pull    "R0,PC",,^
      ]

a835 5

      [ standalone
        ADRL    R0,resourcefsfiles
        SWI     XResourceFS_DeregisterFiles ; ignore errors
      ]
@


4.2
log
@ARTtmp branch folded in
@
text
@d521 1
@


4.1
log
@Initial revision
@
text
@d47 4
d129 1
a129 1
        SWIVC   XOS_Write0
d193 176
d406 1
a406 1
        SWI     XOS_Write0
d458 4
d464 9
d519 5
d536 40
a575 1
        Pull    "r0-r2,PC",VS
d579 1
a579 1
        MOVNE   R0,#1                   ; Post_filter
d589 35
d635 2
d639 26
d666 1
a666 1
        MOV     R0,#0                   ; Pre_filter
d671 1
a671 1
        MOV     R0,#1                   ; Post_filter
d689 2
d693 6
d700 1
a700 1
        MOV     R0,#0                   ; Pre_filter
d705 21
a725 1
        MOV     R0,#1                   ; Post_filter
d752 16
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Updated in line with version 0.15. To wit:

1) Allow for task names being ctrl-terminated
2) Reference Messages file via FilterManager$Path, if set
3) Fix corruption of errors returned from Filter_RegisterXXX
4) Support for rectangle and copy filters (for Replay 3)
5) Support for post-rectangle filters (for Redraw Manager)
@
text
@a46 3
rectfilter_token        DCB     "RectFT",0
copyfilter_token        DCB     "CopyFT",0
postrectfilter_token	DCB	"PostRectFT",0
d125 1
a125 1
	BLVC	Write32
a188 128

	SWI	XOS_NewLine
	BVS	%FT05

        ADRL    r1, rectfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, rect_filters
        B       %FT11

10
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
11
        CMP     r3, #0
        BNE     %BT10

        SWI     XOS_NewLine
	BVS	%FT05

        ADRL    r1, postrectfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, post_rect_filters
        B       %FT31

30
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
31
        CMP     r3, #0
        BNE     %BT30

        SWI     XOS_NewLine
	BVS	%FT05


        ADRL    r1, copyfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, copy_filters
        B       %FT13
12
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
13
        CMP     r3, #0
        BNE     %BT12
d226 1
a226 1
        BL	Write32
a277 3
        STR     r0, rect_filters
	STR	r0, copy_filters
	STR	r0, post_rect_filters
a279 9
; If we're on a Wimp earlier than 3.86, then we need to fake post-rectangle filters
	MOV	r0, #7
	SWI	Wimp_ReadSysInfo
	SUB	r0, r0, #256
	CMP	r0, #386-256
	MOVLT	r0, #1
	MOVGE	r0, #0
	STR	r0, fake_postrect

a325 5

	LDR	LR,fake_postrect
	MOVNE	R0,#0
	STRNE	R0,int_get_rectangle_reentry_addr

d338 1
a338 40
	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS

        LDR     LR,rect_filters
        CMP     LR,#0                   ; Any rect-filters?
	BNE	%FT01

	LDR 	LR,post_rect_filters
	CMP	LR,#0			; how about post-rect-filters?
	BEQ	%FT02
	LDR	LR,fake_postrect
	CMP	LR,#0

01      MOVNE   R0,#3                   ; rect_filter
        ADRNEL  R1,rect_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register rect-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register rect-filter "

	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS

02      LDR     LR,copy_filters
        CMP     LR,#0                   ; Any copy-filters?
        MOVNE   R0,#2                   ; copy_filter
        ADRNEL  R1,copy_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register copy-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register copy-filter "

	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS
a351 20
	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS

	LDR	LR,fake_postrect
	TEQ	LR,#0
	Pull	"r0-r2,PC",NE

	LDR	LR,post_rect_filters
	CMP	LR,#0			; Any post-rect-filters?
	MOVNE	R0,#4			; post_rect_filter
	ADRNEL	R1,post_rect_filter_handler
	MOVNE	R2,R12

        Debug   register,"Register post-rect-filter",R0,R1,R2,LR

	SWINE	XWimp_RegisterFilter
	STRVS	r0,[r13]

	DebugE	register,"Can't register post-rect-filter "

a362 2
        ADR     r2, rect_filters
        BL      free_list               ; Free list of rect filters
a364 4
        ADR     r2, post_rect_filters
        BL      free_list               ; Free list of post rect filters
        ADR     r2, copy_filters
        BL      free_list               ; Free list of copy filters
a370 5
        MOV     R0,#3                   ; Rect_filter
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

a375 10
        MOV     R0,#2                   ; Copy_filter
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#4                   ; Post_rect_filter
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

a388 2
        ADR     r2, rect_filters
        BL      free_list               ; Free list of rect filters
a390 4
        ADR     r2, post_rect_filters
        BL      free_list               ; Free list of post rect filters
        ADR     r2, copy_filters
        BL      free_list               ; Free list of copy filters
a396 5
        MOV     R0,#3                   ; Rect_filter
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

a401 10
        MOV     R0,#2                   ; Copy_filter
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#4                   ; Post_rect_filter
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

a423 16

; ----------------------------------------------------------------------------------------------------------------------
;       Write32 - output a control character terminated string
;
;       In: R0->Ctrl-terminated string
Write32
        Push    "R1,LR"
;
	MOV	R1,R0
01	LDRB	R0,[R1],#1
	CMPS	R0,#32
	MOVLO	R0,R1
	Pull	"R1,PC",LO
	SWI	XOS_WriteC
	BVC	%BT01
	Pull	"R1,PC"
@


4.1.7.3
log
@Support for Post-icon filters added.
@
text
@a49 1
posticonfilter_token    DCB     "PostIconFT",0
a290 48
        ADRL    r1, posticonfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, post_icon_filters
        B       %FT41

40
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
41
        CMP     r3, #0
        BNE     %BT40

        SWI     XOS_NewLine
	BVS	%FT05


a411 1
	STR	r0, post_icon_filters
d529 1
a529 1
        MOVNE   R0,#WimpFilter_PostPoll
a541 15
        LDR     LR,post_icon_filters
        CMP     LR,#0                   ; Any post-icon-filters?
        MOVNE   R0,#WimpFilter_PostIconGetRectangle
        ADRNEL  R1,post_icon_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register post-icon-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register post-icon-filter "

	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS

a575 2
        ADR     r2, post_icon_filters
        BL      free_list               ; Free list of post icon filters
d579 1
a579 6
        MOV     R0,#WimpFilter_PrePoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_GetRectangle
d584 1
a584 1
        MOV     R0,#WimpFilter_PostPoll
d589 1
a589 1
        MOV     R0,#WimpFilter_BlockCopy
d594 1
a594 1
        MOV     R0,#WimpFilter_PostGetRectangle
d599 1
a599 1
        MOV     R0,#WimpFilter_PostIconGetRectangle
a622 2
        ADR     r2, post_icon_filters
        BL      free_list               ; Free list of post icon filters
d626 1
a626 6
        MOV     R0,#WimpFilter_PrePoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_GetRectangle
d631 1
a631 1
        MOV     R0,#WimpFilter_PostPoll
d636 1
a636 1
        MOV     R0,#WimpFilter_BlockCopy
d641 1
a641 1
        MOV     R0,#WimpFilter_PostGetRectangle
d646 1
a646 1
        MOV     R0,#WimpFilter_PostIconGetRectangle
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
