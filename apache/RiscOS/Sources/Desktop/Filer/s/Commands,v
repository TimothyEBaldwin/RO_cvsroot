head	4.10;
access;
symbols
	Filer-2_43:4.10
	Filer-2_42:4.10
	Filer-2_41:4.10
	Filer-2_40:4.10
	Filer-2_39:4.9
	Filer-2_38:4.9
	Filer-2_37:4.9
	Filer-2_36:4.9
	Filer-2_35:4.9
	Filer-2_34:4.8
	Filer-2_33:4.7
	Filer-2_32:4.7
	Filer-2_31:4.7
	Filer-2_30:4.7
	Filer-2_29:4.7
	Filer-2_28:4.7
	Filer-2_27:4.7
	Filer-2_26:4.7
	Filer-2_25:4.7
	Filer-2_24:4.7
	Filer-2_23:4.7
	Filer-2_22:4.7
	Filer-2_21:4.6
	Filer-2_20:4.5
	Filer-2_19:4.5
	Filer-2_18:4.4
	Filer-2_17:4.3
	Filer-2_16:4.3
	Filer-2_15:4.3
	Filer-2_14:4.3
	Filer-2_13:4.3
	Filer-2_12:4.3
	Filer-2_11:4.3
	Filer-2_10:4.3
	Filer-2_09:4.3
	RO_5_07:4.3
	Filer-2_08:4.3
	Filer-2_07:4.3
	Filer-2_06:4.3
	Filer-2_05:4.3
	Filer-2_04:4.3
	Filer-2_03:4.3
	Filer-2_02:4.3
	Filer-2_01:4.3
	Filer-2_00:4.2
	Filer-1_99:4.2
	Filer-1_98:4.2
	Filer-1_97:4.2
	Ursula_merge:4.1.4.4
	Filer-1_96:4.2
	Filer-1_95:4.1.4.4
	nturton_Filer-1_85:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.4
	Ursula_RiscPC:4.1.4.4.0.2
	rthornb_UrsulaBuild-19Aug1998:4.1.4.4
	UrsulaBuild_FinalSoftload:4.1.4.4
	rthornb_UrsulaBuild-12Aug1998:4.1.4.4
	aglover_UrsulaBuild-05Aug1998:4.1.4.4
	rthornb_UrsulaBuild-29Jul1998:4.1.4.4
	rthornb_UrsulaBuild-22Jul1998:4.1.4.4
	rleggett_Filer-1_94:4.1.4.4
	rthornb_UrsulaBuild-15Jul1998:4.1.4.4
	rthornb_UrsulaBuild-07Jul1998:4.1.4.4
	rthornb_UrsulaBuild-17Jun1998:4.1.4.4
	rthornb_UrsulaBuild-03Jun1998:4.1.4.4
	rthornb_UrsulaBuild-27May1998:4.1.4.4
	rleggett_Filer-1_93:4.1.4.4
	rthornb_UrsulaBuild-21May1998:4.1.4.4
	rthornb_UrsulaBuild_01May1998:4.1.4.3
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.10
date	2015.07.29.19.19.49;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	IGbCCybMxb91odvy;

4.9
date	2013.12.09.07.56.20;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	tZzZna33tzRkNqgx;

4.8
date	2013.11.24.12.33.01;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	qgjIfJ3IKLI7Owex;

4.7
date	2010.01.07.21.52.55;	author rool;	state Exp;
branches;
next	4.6;

4.6
date	2010.01.07.21.43.30;	author rool;	state Exp;
branches;
next	4.5;

4.5
date	2009.07.03.14.06.30;	author srevill;	state Exp;
branches;
next	4.4;

4.4
date	2009.06.15.23.38.17;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2001.03.16.17.09.22;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.08.17.11.56.22;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.29.20;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.29.20;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.27.06;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.08.27.09.08.50;	author rleggett;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	97.09.24.13.26.30;	author rleggett;	state Exp;
branches;
next	4.1.4.3;

4.1.4.3
date	98.01.07.10.27.46;	author rleggett;	state Exp;
branches;
next	4.1.4.4;

4.1.4.4
date	98.05.19.16.26.51;	author rleggett;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.16.01;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.15.48;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Minor filer fixes
When a viewer is in 'sort by size' mode the size of image files was not being considered. So, a dir full of ZIP files (SparkFS not run) would be in size order amongst the other files, but if SparkFS was running the image files would be sorted as dirs of 0 size.
Fix for ticket #400, the *Filer_Run command now defaults to '-noshift' and inspecting the shift key state must be requested (opt in instead of opt out). This solves two key annoyances, running the !Boot sequence and holding shift causes you to enter the desktop with the obey files from the Tasks directory unhelpfully loaded in a text editor, and when setting a task alarm in !Alarm if the alarm happens to go off when you're typing with the shift key the task's !Run file opens in a text editor.

SortDir.s: count image files as files so they're sorted like they were in Filer 2.26
Commands.s: parse new option switch, and consider -noshift the default
Messages/HelpSrc: add the switch to the command syntax

Tested with a task alarm in !Alarm with and without shift held down, and running a !Boot sequence similarly.

Version 2.40. Tagged as 'Filer-2_40'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        MACRO
        UseDesk
        LDR     wp, [r12]               ; Can't do anything if not started
        LDR     r14, mytaskhandle       ; Don't allow queueing outside the wimp
        CMP     r14, #0
        BLLE    UseDesktopError
        EXIT    VS
        MEND

        MACRO
        ReadArgs $name,$regs,$size,$deskchk,$errtok
$name._Code
        Entry "$regs",$size
        ; Ensure Filer is initialised
 [ $deskchk
        UseDesk
 |
        LDR     wp, [r12]
 ]
        ; Set up and perform an OS_ReadArgs into stack allocated space
        MOV     r1, r0
        ADRL    r0, $name._Accept
        MOV     r2, sp
        MOV     r3, #$size
        SWI     XOS_ReadArgs
        BVC     %FT10

        Push    "r1"
        LDR     r1, [r0]
        LDR     r14, =ErrorNumber_BadParameters
        TEQ     r14, r1
        LDRNE   r14, =ErrorNumber_ArgRepeated
        TEQNE   r14, r1
        LDRNE   r14, =ErrorNumber_BuffOverflow
        TEQNE   r14, r1
        Pull    "r1"
        EXIT    NE

        ADR     r0, ErrorBlock_$name._Syntax
        BL      LookupError
        EXIT

ErrorBlock_$name._Syntax
        DCD     ErrorNumber_Syntax
        DCB     "$errtok",0
        ALIGN
10
        MEND

Filer_OpenDir_Accept
        DCB     "dir=directory/A/G,"
        DCB     "x0=topleftx,y1=toplefty,w=width,h=height,"
        DCB     "li=largeicons/S,si=smallicons/S,fi=fullinfo/S,"
        DCB     "sn=sortbyname/S,ss=sortbysize/S,st=sortbytype/S,"
        DCB     "sd=sortbydate/S,rs=reversesort/S,ns=numericalsort/S"
        DCB     0

        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Had *command to enter Filer, so start up via module handler

Desktop_Filer_Code Entry
 [ version >= 113
        LDR     wp, [r12]
        LDR     r14, mytaskhandle
        CMP     r14, #-1
        BLNE    UseDesktopError
        EXIT    VS
 ]

        MOV     r0, #ModHandReason_Enter
        addr    r1, Filer_TitleString
        SWI     XOS_Module
        EXIT

 [ openat
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Get an integer from a ReadArgs vector
;
; In    r2 -> vector
;       r4 = parameter offset
;
; Out   EQ set if value not present r1=0
;       NE otherwise and
;       r1 contains value

readargs_getint Entry   "r0,r2,r4,r5"

        ; Check for parameter present
        LDR     r1, [r2, r4]
        TEQ     r1, #0
        EXIT    EQ

        ; Check for negative
        LDRB    r5, [r1]
        TEQ     r5, #"-"
        ADDEQ   r1, r1, #1      ; advance past it

        ; If present, convert it and accept any answer
        MOV     r0, #10         ; Base 10
        MOV     r2, #0          ; Don't care much
        SWI     XOS_ReadUnsigned
        CLRV                    ; Ignore any error

        TEQ     r5, #"-"        ; was it minus?
        RSBEQ   r2, r2, #0      ; neg it

        MOV     r1, r2
        MOVS    r14, #1         ; Clear the Z flag
        EXIT
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; In    r0-r6 trashable
;
; Format of a directory request
;

                ^       0
dirreq_link     #       4       ; Next request
dirreq_closeflags #     0       ; flags for CloseDir
dirreq_x0       #       4       ; Window location
dirreq_filetype #       0
dirreq_y1       #       4
dirreq_w        #       4
dirreq_h        #       4
dirreq_reason   #       1       ; Type of request (open, close, run, boot etc)
dirreq_viewmode #       1       ; View mode (for open)
dirreq_dirname  #       0
dirreq_size     *       :INDEX: @@

drr_open        *       0
drr_close       *       1
drr_run         *       2
drr_boot        *       3

; Fields in the ReadArgs output vector
                ^       0
fopendir_dir    #       4
fopendir_x0     #       4
fopendir_y1     #       4
fopendir_w      #       4
fopendir_h      #       4
fopendir_li     #       4
fopendir_si     #       4
fopendir_fi     #       4
fopendir_sn     #       4
fopendir_ss     #       4
fopendir_st     #       4
fopendir_sd     #       4
fopendir_rs     #       4
fopendir_ns     #       4

        ReadArgs Filer_OpenDir,"r9",1024,{TRUE},SFLROPD
        MOV     r9, #drr_open

        ; Get pointer to directory name
        LDR     r1, [r2, #fopendir_dir]

        ; Get length of string
        LDRB    r3, [r1]
        LDRB    r14, [r1, #1]
        ORR     r3, r3, r14, LSL #8
        MOV     r5, r3          ; Hold length for later

        ; Add size of header
        ADD     r3, r3, #dirreq_size + 1 ; for terminator

        ; Claim a that size chunk
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        EXIT    VS
        MOV     r3, r2

    ; Fill in the fields

      ; x0 field
        MOV     r2, sp
        MOV     r4, #fopendir_x0
        BL      readargs_getint
        BEQ     %FT10
        STR     r1, [r3, #dirreq_x0]

      ; y1 field
        MOV     r4, #fopendir_y1
        BL      readargs_getint
        BEQ     %FT10
        STR     r1, [r3, #dirreq_y1]

      ; w field
        MOV     r4, #fopendir_w
        BL      readargs_getint
        BEQ     %FT20
        CMP     r1, #0                  ; if negative
        MOVLT   r1, #0                  ; then use default
        STR     r1, [r3, #dirreq_w]

      ; h field
        MOV     r4, #fopendir_h
        BL      readargs_getint
        BEQ     %FT20
        CMP     r1, #0                  ; if negative
        MOVLT   r1, #0                  ; then use default
        STR     r1, [r3, #dirreq_h]
        B       %FT30

10      STR     r1, [r3, #dirreq_x0]
        STR     r1, [r3, #dirreq_y1]
20      STR     r1, [r3, #dirreq_w]
        STR     r1, [r3, #dirreq_h]


30      ; Get the display switches
        MOV     r0, #0
        LDR     r1, [r2, #fopendir_fi]
        MOVS    r1, r1
        MOVNE   r0, #1 :SHL: dbu_displaymode :OR: db_dm_fullinfo :SHL: dbb_displaymode

        LDR     r1, [r2, #fopendir_si]
        MOVS    r1, r1
        MOVNE   r0, #1 :SHL: dbu_displaymode :OR: db_dm_smallicon :SHL: dbb_displaymode

        LDR     r1, [r2, #fopendir_li]
        MOVS    r1, r1
        MOVNE   r0, #1 :SHL: dbu_displaymode :OR: db_dm_largeicon :SHL: dbb_displaymode

        ; Get the sorting switches
        MOV     r4, #0
        LDR     r1, [r2, #fopendir_sd]
        MOVS    r1, r1
        MOVNE   r4, #1 :SHL: dbu_sortmode :OR: db_sm_date :SHL: dbb_sortmode

        LDR     r1, [r2, #fopendir_st]
        MOVS    r1, r1
        MOVNE   r4, #1 :SHL: dbu_sortmode :OR: db_sm_type :SHL: dbb_sortmode

        LDR     r1, [r2, #fopendir_ss]
        MOVS    r1, r1
        MOVNE   r4, #1 :SHL: dbu_sortmode :OR: db_sm_size :SHL: dbb_sortmode

        LDR     r1, [r2, #fopendir_sn]
        MOVS    r1, r1
        MOVNE   r4, #1 :SHL: dbu_sortmode :OR: db_sm_name :SHL: dbb_sortmode

        LDR     r1, [r2, #fopendir_rs]
        MOVS    r1, r1
        MOVNE   r4, #1 :SHL: dbu_sortmode :OR: 1 :SHL: dbb_sortorder

        LDR     r1, [r2, #fopendir_ns]
        MOVS    r1, r1
        MOVNE   r4, #1 :SHL: dbu_sortmode :OR: 1 :SHL: dbb_sortnumeric

        ; combine the two flags and store them
        ORR     r0, r0, r4
        STRB    r0, [r3, #dirreq_viewmode]

        ; Zero byte beyond end of dirname to terminate string
        ; This must be done after reading other parameters, as it
        ; may corrupt them.
        LDR     r1, [r2, #fopendir_dir]
        ADD     r1, r1, #2      ; move past length 2 bytes
        MOV     r14, #0
        STRB    r14, [r1, r5]   ; Stick a zero on the end

        MOV     r2, r1
        ADD     r1, r3, #dirreq_dirname
        BL      strcpy

        BL      Queue_Request_To_Self
        EXIT

; .............................................................................

Filer_CloseDir_Code Entry

        UseDesk

      [ debugclosedir
        DSTRING r0,"Filer_CloseDir "
      ]
        MOV     r1, r0
        MOV     r2, #0
        BL      Queue_CloseDir_Request_To_Self

        EXIT

; .............................................................................

Filer_Run_Accept
        DCB     "shift=s/S,noshift=ns/S,"
        DCB     "/A"
        DCB     0

        ALIGN

; Fields in the ReadArgs output vector
                ^       0,sp
frun_shift      #       4
frun_noshift    #       4               ; default, therefore no-op
frun_fsp        #       4


        ReadArgs Filer_Run,"r9,r12",256,{TRUE},SFLRRUN

        ; The [No]Shift switch is mutually exclusive
        LDR     r1, frun_shift
        LDR     r2, frun_noshift
        ANDS    r2, r2, r1
        ADRNE   r0, ErrorBlock_Filer_Run_Syntax
        BLNE    LookupError
        EXIT    VS
        
        ; Find the object type of the object
        LDR     r1, frun_fsp
        MOV     r0, #OSFile_ReadInfo
        SWI     XOS_File                ; r1 preserved
        EXIT    VS

        ; Ensure the object was found
        CMP     r0, #object_nothing
        ADREQ   r0, ErrorBlock_Global_NotFound
        MOVEQ   r4, r1
        BLEQ    LookupError
        EXIT    VS

        ; Get the file type from the info
        BL      FindFileType_FromInfo

        LDR     r1, frun_shift
        TEQ     r1, #0
        BEQ     %FT35

        MOV     r0, #&81
        MOV     r1, #&FF
        MOV     r2, #&FF
        SWI     XOS_Byte                ; Get SHIFT state (r1=&FF => SHIFT pressed)

        CMP     r1, #&FF
        BNE     %FT35
        CMP     r3, #filetype_directory
        CMPNE   r3, #filetype_application
        LDRNE   r3, =&FFF               ; SHIFTed file => text file
        BNE     %FT35

        LDR     r0, frun_fsp
        FRAMLDR r12
        BL      Filer_OpenDir_Code      ; SHIFTed dir/app => *Filer_OpenDir <dir>
        EXIT

35
        MOV     r8, r3
        LDR     r1, frun_fsp

        ; Find size of block required
        BL      strlen
        ADD     r3, r3, #dirreq_size + 1 ; for terminator

        ; Claim a that size chunk
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        EXIT    VS
        MOV     r3, r2

        ; Copy the filename into the block
        MOV     r2, r1
        ADD     r1, r3, #dirreq_dirname
        BL      strcpy

        STR     r8, [r3, #dirreq_filetype]
        MOV     r9, #drr_run
        BL      Queue_Request_To_Self

        ; If DATAOPEN is bounced then we don't wan't an old window handle hanging around
        MOV     r0, #0
        STR     r0, windowhandle

        EXIT

ErrorBlock_Global_NotFound
        DCD     ErrorNumber_FileNotFound
        DCB     "NoFile",0
        ALIGN

Filer_Boot_Code Entry "r9"
        MOV     r9, #drr_boot
        UseDesk

        MOV     r1, r0
        BL      nul_terminate
        BL      SussPlingApplic_GivenName
        EXIT    VC
        LDR     r2, [r0]
        LDR     r14, =ErrorNumber_WimpBadOp
        TEQ     r2, r14
        BEQ     %FT10
        LDR     r14, =ErrorNumber_WimpNoTasks
        TEQ     r2, r14
        BEQ     %FT10
        ; Any other errors are the caller's problem!
        EXIT

10
        ; Queue the action for when the wimp will let us do
        ; the biz.
        CLRV
        BL      strlen

        ; Add size of header
        ADD     r3, r3, #dirreq_size + 1 ; for terminator

        ; Claim a that size chunk
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        EXIT    VS
        MOV     r3, r2

        MOV     r2, r1
        ADD     r1, r3, #dirreq_dirname
        BL      strcpy_excludingspaces

        BL      Queue_Request_To_Self
        EXIT

; -----------------------------------------------------------------------
;
; Queue_Request_To_Self
;
; In
;  r3 = filled in request to be queued (RMAlloced)
;  r9 = reason code for request
;
; Out
;  request queued with reason code filled in
;
Queue_Request_To_Self Entry

        ; Fill in reason code
        STRB    r9, [r3, #dirreq_reason]

        ; Attach it to the queue
        MOV     r14, #Nowt
        STR     r14, [r3, #dirreq_link]
        LDR     r14, DirRequestEndLink
        STR     r3, [r14]
        ADD     r3, r3, #dirreq_link
        STR     r3, DirRequestEndLink

        ; Poke the application just in case...
        LDR     r3, poll_word
        ORR     r3, r3, #poll_word_command_waiting
        STR     r3, poll_word

        EXIT

; -----------------------------------------------------------------------
;
; Queue_CloseDir_Request_To_Self
;
; In
;  r1 = pointer to space or ctrl/char-terminated directory name
;  r2 = flags:
;       bit     meaning when set
;       0       don't canonicalise before queueing
;       1-31    unused - set to 0
;
; Out
;  VSet and error possible
;  queued request has 'don't canonicalise on reception' flag set
;
Queue_CloseDir_Request_To_Self Entry "r0-r5,r9"

        TST     r2, #1
        BNE     %FT10

        ; Canonicalise the path before use
        MOV     r0, #FSControl_CanonicalisePath
        ADR     r2, userdata
        MOV     r3, #0
        MOV     r4, #0
        MOV     r5, #userdata_size
        SWI     XOS_FSControl
      [ version < 145
        BVS     %FT90
      ]

        ADRVC   r1, userdata

10
 [ debugclosedir
        DSTRING r1, "Queue CloseDir on "
 ]
        ; Claim block of required size
        BL      strlen_excludingspaces

        ; Add size of header
        ADD     r3, r3, #dirreq_size + 1 ; for terminator

        ; Claim a that size chunk
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        BVS     %FT90

        ; Fill the block in
        MOV     r3, r2

        MOV     r2, r1
        ADD     r1, r3, #dirreq_dirname
        BL      strcpy_excludingspaces

        MOV     r0, #1
        STR     r0, [r3, #dirreq_closeflags]

        ; queue it
        MOV     r9, #drr_close
        BL      Queue_Request_To_Self

90
        STRVS   r0, [sp]
        EXIT

; .............................................................................

Filer_Truncation_Accept
        DCB     "LargeIconDisplay=LID/E,SmallIconDisplay=SID/E,FullInfoDisplay=FID/E"
        DCB     0

        ALIGN

        ReadArgs Filer_Truncation,"",36,{FALSE},SFLRTRU

        ; Deal with LargeIconDisplay switch
        LDR     r1, [r2]
        CMP     r1, #0
        BEQ     %FT20
        ADD     r1, r1, #1
        LDW     r3, r1, r4, r5
        CMP     r3, #0
        MOVLE   r3, #4096
        CMP     r3, #68
        MOVLT   r3, #68
        STR     r3, largeicon_truncation

20      ; Deal with SmallIconDisplay switch
        LDR     r1, [r2, #4]
        CMP     r1, #0
        BEQ     %FT30
        ADD     r1, r1, #1
        LDW     r3, r1, r4, r5
        CMP     r3, #0
        MOVLE   r3, #4096
        CMP     r3, #48
        MOVLT   r3, #48
        STR     r3, smallicon_truncation

30      ; Deal with FullInfoDisplay switch
        LDR     r1, [r2, #8]
        CMP     r1, #0
        EXIT    EQ
        ADD     r1, r1, #1
        LDW     r3, r1, r4, r5
        CMP     r3, #0
        MOVLE   r3, #4096
        CMP     r3, #48
        MOVLT   r3, #48
        STR     r3, fullinfo_truncation

        EXIT

; .............................................................................

Filer_Options_Accept
        DCB     "ConfirmAll/S,"
        DCB     "ConfirmDeletes/S,"
        DCB     "Verbose/S,"
        DCB     "Force/S,"
        DCB     "Newer/S,"
        DCB     "Faster/S"
      [ debugcmds
        DCB     ",Query/S"
      ]
        DCB     0

        ALIGN

        ReadArgs Filer_Options,"",28,{FALSE},SFLROPT

      [ debugcmds
        ; Check if Query switch was specified, in which case skip all others
        LDR     r1, [r2,#24]
        CMP     r1, #0
        BNE     %FT10
      ]
        ; Start with no options set
        MOV     r3, #0
        ; Is ConfirmDeletes switch present?
        LDR     r1, [r2, #4]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionConfirmDeletes
        BICNE   r3, r3, #Action_OptionConfirm
        ; Is Confirm switch present?
        LDR     r1, [r2]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionConfirm
        BICNE   r3, r3, #Action_OptionConfirmDeletes
        ; Is Verbose switch present?
        LDR     r1, [r2, #8]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionVerbose
        ; Is Force switch present?
        LDR     r1, [r2, #12]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionForce
        ; Is Newer switch present?
        LDR     r1, [r2, #16]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionNewer
        ; Is Faster switch present?
        LDR     r1, [r2, #20]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionFaster
        ; Store the options
        STRB    r3, fileraction_options
        EXIT

      [ debugcmds
10      ; Print current status of the options
        LDRB    r2, fileraction_options
        WRLN    " "
        WRLN    "Current state of options is:"
        STRIM   "Confirm all    : "
        TST     r2, #Action_OptionConfirm
        BL      writeyesorno
        STRIM   "Confirm deletes: "
        TST     r2, #Action_OptionConfirmDeletes
        BL      writeyesorno
        STRIM   "Verbose        : "
        TST     r2, #Action_OptionVerbose
        BL      writeyesorno
        STRIM   "Force          : "
        TST     r2, #Action_OptionForce
        BL      writeyesorno
        STRIM   "Newer          : "
        TST     r2, #Action_OptionNewer
        BL      writeyesorno
        STRIM   "Faster         : "
        TST     r2, #Action_OptionFaster
        BL      writeyesorno
        WRLN    " "
        EXIT

writeyesorno Entry
        BEQ     writeno
        WRLN    "Yes"
        EXIT
writeno
        WRLN    "No"
        EXIT
      ]

; .............................................................................

Filer_Layout_Accept
        DCB     "LargeIcons=LI/S,"
        DCB     "SmallIcons=SI/S,"
        DCB     "FullInfo=FI/S,"
        DCB     "SortByName=SBN/S,"
        DCB     "SortByType=SBT/S,"
        DCB     "SortBySize=SBS/S,"
        DCB     "SortByDate=SBD/S,"
        DCB     "ReverseSort=RS/S,"
        DCB     "NumericalSort=NS/S"
        DCB     0
        ALIGN

        ReadArgs Filer_Layout,"",64,{FALSE},SFLRLAY

        MOV     r3, #(db_sm_name :SHL: dbb_sortmode) :OR: \
                     (db_dm_largeicon :SHL: dbb_displaymode)

        ; Small icons?
        LDR     r1, [r2, #4]
        CMP     r1, #0
        MOVGT   r3, #db_dm_smallicon :SHL: dbb_displaymode

        ; Full Info?
        LDR     r1, [r2, #8]
        CMP     r1, #0
        MOVGT   r3, #db_dm_fullinfo :SHL: dbb_displaymode

        ; Sort by type?
        LDR     r1, [r2, #16]
        CMP     r1, #0
        ORRGT   r3, r3, #db_sm_type :SHL: dbb_sortmode

        ; Sort by size?
        LDR     r1, [r2, #20]
        CMP     r1, #0
        ORRGT   r3, r3, #db_sm_size :SHL: dbb_sortmode 

        ; Sort by date?
        LDR     r1, [r2, #24]
        CMP     r1, #0
        ORRGT   r3, r3, #db_sm_date :SHL: dbb_sortmode 

        ; Reverse sort?
        LDR     r1, [r2, #28]
        CMP     r1, #0
        ORRGT   r3, r3, #db_sortorder

        ; Numerical sort?
        LDR     r1, [r2, #32]
        CMP     r1, #0
        ORRGT   r3, r3, #db_sortnumeric

        STRB    r3, layout_options

        EXIT

; .............................................................................
Filer_DClickHold_Accept
        DCB     "DClickHold=DCH/E"
        DCB     0
        ALIGN

        ReadArgs Filer_DClickHold,"",32,{FALSE},SFLRDCH

        MOV     r3, #0

        LDR     r1, [r2, #0]
        CMP     r1, #0
        BEQ     %FT10

        ADD     r1, r1, #1
        LDW     r3, r1, r4, r5
        CMP     r3, #0
        MOVLE   r3, #0

10
        STR     r3, dclickhold_delay

        EXIT

        END
@


4.9
log
@Fix to Filer_OpenDir parsing
Correcting the db_sm_ variable names to match the values stored in CMOS location 198 exposed the fact that the old order was masking a bug where the ReadArgs switch order didn't match the syntax string.
Syntax string switched round.
Fix for ticket #369.

Version 2.35. Tagged as 'Filer-2_35'
@
text
@d53 1
a53 1
        ADR     r0, %FT5
d56 2
a57 1
5
d307 1
a307 1
        DCB     "noshift=ns/S,"
d315 2
a316 1
frun_noshift    #       4
d322 8
d346 1
a346 1
        LDR     r1, frun_noshift
d348 1
a348 1
        BNE     %FT35
@


4.8
log
@Add support for sorting dir contents numerically as well as alphabetically
New option to the display menu "Numerical sort" modifies the existing 4 sort methods (name, size, type, date) to sort by interpreting any numbers as cardinals. This modifier only really has effect on "Sort by name" since the other three already sort numerically.
This means for example a dir containing "File9,File10,File11" will appear in that order, whereas sorting by name alone would show "File10,File11,File9".

SelStuff0.s/SelStuff.s/Gets.s: Removed. Single function placed into SelStuff.
ModHdr.s/OpenDir.s/Commands.s/DebugFlags.s: Decoding of -NumericalSort switch, switched out undocumented 'Query' flags.
DecodeMenu.s/MenuCreate.s: Handle menu entry, simplify rename code a little.
HelpSrc.s/Messages: Extra help text.
SortDir.s: Pass option flag to Territory_Collate.
WkspEtc.s: Corrected definition of db_sm_type and db_sm_size.

Version 2.34. Tagged as 'Filer-2_34'
@
text
@d67 1
a67 1
        DCB     "sn=sortbyname/S,st=sortbytype/S,ss=sortbysize/S,"
@


4.7
log
@  Add the ability to sort Filer objects in reverse order
Detail:
  It's been possible to sort Filer objects using various criteria for a long
  time but sorting objects in reverse order was not possible. This change aims
  to remedy that omission.
  The option 'Reverse sort' has been added to the 'Display' submenu of the
  Filer menu, allowing the sort order of individual directory viewers to be
  changed dynamically.
  The switch -ReverseSort has been added to the command Filer_OpenDir to allow
  it to open directories with the sort order reversed.
  The switch -ReverseSort has been added to the Filer_Layout command so that
  reverse sort order can be set as default for new directory viewers. The
  Filer_Layout command is also written to the FlrSetup file in Choices:Boot.
  Tasks by the Filer configure plug-in (which has been also updated to allow
  -ReverseSort).
Admin:
  Tested on Iyonix RO5.14


Version 2.22. Tagged as 'Filer-2_22'
@
text
@d68 1
a68 1
        DCB     "sd=sortbydate/S,rs=reversesort/S"
d168 1
d265 4
d585 1
d587 1
d594 1
d599 1
a599 1

d632 1
d665 1
a665 1

d677 2
a678 2
        DCB     "ReverseSort=RS/S"
        DCB     ",Query/S"
d684 2
a685 1
        MOV     r3, #0
d690 1
a690 1
        MOVGT   r3, #1
d695 1
a695 1
        MOVGT   r3, #2
d700 1
a700 1
        ORRGT   r3, r3, #4
d705 1
a705 1
        ORRGT   r3, r3, #8
d710 1
a710 1
        ORRGT   r3, r3, #12
d717 5
@


4.6
log
@  Make doubleclick-and-hold configurable
Detail:
  Added the command Filer_DClickHold to the Filer.
  It allows you to specify how long the second click of a doubleclick must be
  held down for before it is seen as a doubleclick-and-hold.
  The delay is specified in centiseconds, setting the delay to zero turns
  doubleclick-and-hold off.
Admin:
  Tested on Iyonix RO5.14
  Submitted by Fred Graute, mid-December 2009

Version 2.21. Tagged as 'Filer-2_21'
@
text
@d68 1
a68 1
        DCB     "sd=sortbydate/S"
d167 1
d260 4
d667 2
a668 1
        DCB     "SortByDate=SBD/S"
d673 1
a673 1
        ReadArgs Filer_Layout,"",32,{FALSE},SFLRLAY
d702 5
@


4.5
log
@  Added -NoShift parameter to Filer_Run
Detail:
  Added -NoShift parameter to Filer_Run command, mainly for benefit of future version of Alarm.
  Added new macro for reading cli parameters.
  Restored missing spaces from messages file.
Admin:
  Tested on RPC RO4.02
Notes:
  Changes by James Lampard.

Version 2.19. Tagged as 'Filer-2_19'
@
text
@d700 23
@


4.4
log
@  Bugfixes related to misuse of unaligned loads
Detail:
  s.Commands: Filer_Truncation code to parse OS_ReadArgs output block was
    written on the assumption that LDR allows unaligned accesses - this is
    only true as of ARMv6! We got away with it as long as all the truncation
    widths were <= 65535 OS units - which in practice is easily as wide as
    any screen anyone might use. Nevertheless, this is now fixed to use the
    LDW macro.
  s.DragEnd - d_filesperrow is a 1-byte variable, yet it was loaded using
    LDR. This is clearly wrong and may in part be responsible for offsets
    48-63 of Message_FilerSelection being nonsense (though they are still
    incorrect after this fix).
  s.Redraw - loaded colour values to pass to Wimp_SetColour from 1-byte
    variables using LDR, and hence was setting undefined bits. Harmless with
    current Wimps, but probably not a good idea.
Admin:
  Builds but untested.

Version 2.18. Tagged as 'Filer-2_18'
@
text
@d15 48
d168 1
a168 2
Filer_OpenDir_Code Entry "r9"

a170 14
01      LDR     wp, [r12]               ; Can't do anything if not started
        LDR     r14, mytaskhandle       ; Don't allow queueing outside the wimp
        CMP     r14, #0
        BLLE    UseDesktopError
        EXIT    VS

02      ; Set up and perform a OS_ReadArgs into userdata
        MOV     r1, r0
        ADRL    r0, Filer_OpenDir_Accept
        ADR     r2, userdata
        MOV     r3, #userdata_size
        SWI     XOS_ReadArgs
        EXIT    VS

d192 1
a192 1
        ADR     r2, userdata
d280 1
a280 1
Filer_CloseDir_Code ALTENTRY
d282 1
a282 5
        LDR     wp, [r12]               ; Can't do anything if not started
        LDR     r14, mytaskhandle       ; Don't allow queueing outside desktop
        CMP     r14, #0
        BLLE    UseDesktopError
        EXIT    VS
d293 16
a308 7
Filer_Run_Code  ALTENTRY
        ; Ensure Filer is initialised
        LDR     wp, [r12]               ; Can't do anything if not started
        LDR     r14, mytaskhandle       ; Don't allow queueing outside desktop
        CMP     r14, #0
        BLLE    UseDesktopError
        EXIT    VS
d311 1
a311 1
        MOV     r1, r0
d326 4
a329 1
        MOV     r4, r1
d340 7
a346 2
        MOVEQ   r0, r4
        BEQ     %BT02                   ; SHIFTed dir/app => *Filer_OpenDir <dir>
d349 1
a349 1
        MOV     r1, r4
d377 1
a377 1
        DCD     &D6
d381 1
a381 1
Filer_Boot_Code ALTENTRY
d383 1
a383 5
        LDR     wp, [r12]               ; Can't do anything if not started
        LDR     r14, mytaskhandle       ; Don't allow desktop things outside the desktop
        CMP     r14, #0
        BLLE    UseDesktopError
        EXIT    VS
d526 1
a526 10
Filer_Truncation_Code Entry

        LDR     wp, [r12]

        MOV     r1, r0
        ADR     r0, Filer_Truncation_Accept
        ADR     r2, userdata
        MOV     r3, #userdata_size
        SWI     XOS_ReadArgs
        EXIT    VS
d580 1
a580 10
Filer_Options_Code Entry

        LDR     wp, [r12]

        MOV     r1, r0
        ADR     r0, Filer_Options_Accept
        ADR     r2, userdata
        MOV     r3, #userdata_size
        SWI     XOS_ReadArgs
        EXIT    VS
d625 1
a625 2
        BLNE    writeyes
        BLEQ    writeno
d628 1
a628 2
        BLNE    writeyes
        BLEQ    writeno
d631 1
a631 2
        BLNE    writeyes
        BLEQ    writeno
d634 1
a634 2
        BLNE    writeyes
        BLEQ    writeno
d637 1
a637 2
        BLNE    writeyes
        BLEQ    writeno
d640 1
a640 2
        BLNE    writeyes
        BLEQ    writeno
d644 2
a645 2
writeyes Entry

d648 2
a649 4

writeno Entry

        WRLN    "No "
d665 1
d667 1
a667 10
Filer_Layout_Code Entry

        LDR     wp, [r12]

        MOV     r1, r0
        ADR     r0, Filer_Layout_Accept
        ADR     r2, userdata
        MOV     r3, #userdata_size
        SWI     XOS_ReadArgs
        EXIT    VS
@


4.3
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 2.01. Tagged as 'Filer-2_01'
@
text
@d499 2
a500 1
        LDR     r3, [r1, #1]
d511 2
a512 1
        LDR     r3, [r1, #1]
d523 2
a524 1
        LDR     r3, [r1, #1]
@


4.2
log
@Merged Ursula branch.
Moved to srccommit.

Version 1.96. Tagged as 'Filer-1_96'
@
text
@d28 1
a28 1
Desktop_Filer_Code ENTRY
d54 1
a54 1
readargs_getint ENTRY   "r0,r2,r4,r5"
d120 1
a120 1
Filer_OpenDir_Code ENTRY "r9"
d271 1
a271 1
        
d390 1
a390 1
Queue_Request_To_Self ENTRY
d425 1
a425 1
Queue_CloseDir_Request_To_Self ENTRY "r0-r5,r9"
d484 1
a484 1
Filer_Truncation_Code ENTRY
d544 1
a544 1
Filer_Options_Code ENTRY
d623 1
a623 1
writeyes ENTRY
d627 2
a628 2
        
writeno ENTRY
d647 1
a647 1
Filer_Layout_Code ENTRY
d659 2
a660 2
        
        ; Small icons? 
d664 1
a664 1
        
d674 1
a674 1
        
d679 1
a679 1
        
@


4.1
log
@Initial revision
@
text
@d476 214
@


4.1.4.1
log
@Long filename support and SaveAs style new directory creation
@
text
@a475 50
; .............................................................................

Filer_Truncation_Accept
        DCB     "LargeIconDisplay=LID/E,SmallIconDisplay=SID/E,FullInfoDisplay=FID/E"
        DCB     0

        ALIGN

Filer_Truncation_Code ENTRY

        LDR     wp, [r12]

        MOV     r1, r0
        ADRL    r0, Filer_Truncation_Accept
        ADR     r2, userdata
        MOV     r3, #userdata_size
        SWI     XOS_ReadArgs
        EXIT    VS

        ; Deal with LargeIconDisplay switch
        LDR     r1, [r2]
        CMP     r1, #0
        BEQ     %FT20
        LDR     r3, [r1, #1]
        CMP     r3, #0
        MOVLE   r3, #4096
        CMP     r3, #68
        MOVLT   r3, #68
        STR     r3, largeicon_truncation

20      ; Deal with SmallIconDisplay switch
        LDR     r1, [r2, #4]
        CMP     r1, #0
        BEQ     %FT30
        LDR     r3, [r1, #1]
        CMP     r3, #0
        MOVLE   r3, #4096
        STR     r3, smallicon_truncation

30      ; Deal with FullInfoDisplay switch
        LDR     r1, [r2, #8]
        CMP     r1, #0
        EXIT    EQ
        LDR     r3, [r1, #1]
        CMP     r3, #0
        MOVLE   r3, #4096
        STR     r3, fullinfo_truncation

        EXIT

@


4.1.4.2
log
@Add new options to Options menu, plus fixed bugs
@
text
@d489 1
a489 1
        ADR     r0, Filer_Truncation_Accept
a523 103
        EXIT

; .............................................................................

Filer_Options_Accept
        DCB     "ConfirmAll/S,"
        DCB     "ConfirmDeletes/S,"
        DCB     "Verbose/S,"
        DCB     "Force/S,"
        DCB     "Newer/S,"
        DCB     "Faster/S"
        DCB     ",Query/S"
        DCB     0

        ALIGN

Filer_Options_Code ENTRY

        LDR     wp, [r12]

        MOV     r1, r0
        ADR     r0, Filer_Options_Accept
        ADR     r2, userdata
        MOV     r3, #userdata_size
        SWI     XOS_ReadArgs
        EXIT    VS

        ; Check if Query switch was specified, in which case skip all others
        LDR     r1, [r2,#24]
        CMP     r1, #0
        BNE     %FT10

        ; Start with no options set
        MOV     r3, #0
        ; Is ConfirmDeletes switch present?
        LDR     r1, [r2, #4]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionConfirmDeletes
        BICNE   r3, r3, #Action_OptionConfirm
        ; Is Confirm switch present?
        LDR     r1, [r2]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionConfirm
        BICNE   r3, r3, #Action_OptionConfirmDeletes
        ; Is Verbose switch present?
        LDR     r1, [r2, #8]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionVerbose
        ; Is Force switch present?
        LDR     r1, [r2, #12]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionForce
        ; Is Newer switch present?
        LDR     r1, [r2, #16]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionNewer
        ; Is Faster switch present?
        LDR     r1, [r2, #20]
        CMP     r1, #0
        ORRNE   r3, r3, #Action_OptionFaster
        ; Store the options
        STR     r3, fileraction_options
        EXIT

10      ; Print current status of the options
        LDR     r2, fileraction_options
        WRLN    " "
        WRLN    "Current state of options is:"
        STRIM   "Confirm all    : "
        TST     r2, #Action_OptionConfirm
        BLNE    writeyes
        BLEQ    writeno
        STRIM   "Confirm deletes: "
        TST     r2, #Action_OptionConfirmDeletes
        BLNE    writeyes
        BLEQ    writeno
        STRIM   "Verbose        : "
        TST     r2, #Action_OptionVerbose
        BLNE    writeyes
        BLEQ    writeno
        STRIM   "Force          : "
        TST     r2, #Action_OptionForce
        BLNE    writeyes
        BLEQ    writeno
        STRIM   "Newer          : "
        TST     r2, #Action_OptionNewer
        BLNE    writeyes
        BLEQ    writeno
        STRIM   "Faster         : "
        TST     r2, #Action_OptionFaster
        BLNE    writeyes
        BLEQ    writeno
        WRLN    " "
        EXIT

writeyes ENTRY

        WRLN    "Yes"
        EXIT
        
writeno ENTRY

        WRLN    "No "
@


4.1.4.3
log
@A *Filer_Layout command now replaces CMOS setting of the display options.
Fixed bug which meant dirviews weren't sorted if they had >256 entries.
Increased dirnamebuffer to 2K to cope with long pathname renames.
@
text
@d585 1
a585 1
        STRB    r3, fileraction_options
d589 1
a589 1
        LDRB    r2, fileraction_options
a627 57


; .............................................................................

Filer_Layout_Accept
        DCB     "LargeIcons=LI/S,"
        DCB     "SmallIcons=SI/S,"
        DCB     "FullInfo=FI/S,"
        DCB     "SortByName=SBN/S,"
        DCB     "SortByType=SBT/S,"
        DCB     "SortBySize=SBS/S,"
        DCB     "SortByDate=SBD/S"
        DCB     ",Query/S"
        DCB     0

Filer_Layout_Code ENTRY

        LDR     wp, [r12]

        MOV     r1, r0
        ADR     r0, Filer_Layout_Accept
        ADR     r2, userdata
        MOV     r3, #userdata_size
        SWI     XOS_ReadArgs
        EXIT    VS

        MOV     r3, #0
        
        ; Small icons? 
        LDR     r1, [r2, #4]
        CMP     r1, #0
        MOVGT   r3, #1
        
        ; Full Info?
        LDR     r1, [r2, #8]
        CMP     r1, #0
        MOVGT   r3, #2

        ; Sort by type?
        LDR     r1, [r2, #16]
        CMP     r1, #0
        ORRGT   r3, r3, #4
        
        ; Sort by size?
        LDR     r1, [r2, #20]
        CMP     r1, #0
        ORRGT   r3, r3, #8
        
        ; Sort by date?
        LDR     r1, [r2, #24]
        CMP     r1, #0
        ORRGT   r3, r3, #12

        STRB    r3, layout_options

        EXIT

@


4.1.4.4
log
@SmallIcon and FullInfo truncations now have sensible minimum values.
@
text
@a512 2
        CMP     r3, #48
        MOVLT   r3, #48
a521 2
        CMP     r3, #48
        MOVLT   r3, #48
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
