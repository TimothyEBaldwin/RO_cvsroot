head	4.6;
access;
symbols
	Filer-2_43:4.6
	Filer-2_42:4.6
	Filer-2_41:4.6
	Filer-2_40:4.6
	Filer-2_39:4.6
	Filer-2_38:4.6
	Filer-2_37:4.6
	Filer-2_36:4.6
	Filer-2_35:4.6
	Filer-2_34:4.6
	Filer-2_33:4.6
	Filer-2_32:4.6
	Filer-2_31:4.6
	Filer-2_30:4.6
	Filer-2_29:4.5
	Filer-2_28:4.5
	Filer-2_27:4.5
	Filer-2_26:4.5
	Filer-2_25:4.5
	Filer-2_24:4.5
	Filer-2_23:4.5
	Filer-2_22:4.5
	Filer-2_21:4.5
	Filer-2_20:4.5
	Filer-2_19:4.5
	Filer-2_18:4.5
	Filer-2_17:4.5
	Filer-2_16:4.5
	Filer-2_15:4.5
	Filer-2_14:4.5
	Filer-2_13:4.5
	Filer-2_12:4.5
	Filer-2_11:4.5
	Filer-2_10:4.5
	Filer-2_09:4.5
	RO_5_07:4.5
	Filer-2_08:4.5
	Filer-2_07:4.5
	Filer-2_06:4.5
	Filer-2_05:4.5
	Filer-2_04:4.5
	Filer-2_03:4.5
	Filer-2_02:4.5
	Filer-2_01:4.4
	Filer-2_00:4.3
	Filer-1_99:4.3
	Filer-1_98:4.2
	Filer-1_97:4.2
	Ursula_merge:4.1
	Filer-1_96:4.1
	Filer-1_95:4.1
	nturton_Filer-1_85:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rleggett_Filer-1_94:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rleggett_Filer-1_93:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2012.05.07.21.33.46;	author bavison;	state Exp;
branches;
next	4.5;
commitid	ucGU0rswOADBZP3w;

4.5
date	2001.05.10.16.21.12;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	2001.03.16.17.09.24;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	2000.08.15.10.58.58;	author jfletche;	state Exp;
branches;
next	4.2;

4.2
date	2000.04.20.16.21.14;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.29.33;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.29.33;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.27.49;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.17.33;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.16.31;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@  Keyboard shortcuts in the Filer
Detail:
  Tab - focus to next window
  Shift-Tab - focus to previous window
  Backspace - open parent
  ^W - Set working directory
  ^F - Change display format
  ^S - Change sort order
  ^F2 - Close current window and move focus
  ^A - Select all
  ^Z/Esc - clear selection
  Del - delete selected object(s)  (WARNING - No confirmation)
  Also installed error handler to help prevent it becoming the innocent victim
  of failures in callback handlers etc.
Admin:
  Changes received from Adrian Lees

Version 2.30. Tagged as 'Filer-2_30'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; UpCall_Handler
; =============

UpCall_Handler ROUT

        CMP     r0, #UpCall_ModifyingFile
        MOVNE   pc, lr                  ; Pass it on

; In    r8 = filesystem/bits
;       r9 = operation (see Hdr.UpCall/FileSwitch.LowLevel)

        Entry   "r0-r8"
        AND     r8, r8, #&FF            ; file system being modified

 [ debugupcall
 DREG r9, "UPCALL --- file operation ",cc
 DREG r8, " on filesystem ",,Byte
 ]

        CMP     r9,#upfsfile_CreateDir
        BHI     %FT01
00      BL      UpCallMainPart
        EXIT

01      EOR     r14,r9,#&100
        TEQ     r14,#upfsopen_CreateUpdate :EOR: &100
        TEQNE   r14,#upfsopen_Update :EOR: &100
        BEQ     %BT00

        TEQ     r14,#upfsclose :EOR: &100
        EORNE   r14,r9,#&200
        TEQNE   r14,#upfsargs_EnsureSize :EOR: &200     ; both of these have file handle not paths
        BNE     %FT02

        BL      UpCallNeedsPathname
        EXIT

02      TEQ     r14,#upfsfunc_Rename :EOR: &200
        TEQNE   r14,#upfsfunc_Access :EOR: &200
        EXIT    NE

        BL      UpCallMainPart
        EXIT



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; UpCallNeedsPathname
; ===================

UpCallNeedsPathname   Entry             ; assumes UpCallHandler has saved regs

; This upcall does not supply a name and special field; we must
; figure them out for ourselves.

; R1 is the file handle, R8 is filesystem info word
; Find out how big the name is:-

        MOV     r0, #OSArgs_ReadPath
        MOV     r2, #0                  ; buffer
        MOV     r5, #0                  ; size
        SWI     XOS_Args		; get path from handle in R1
        EXIT    VS                      ; no luck; ignore
        RSB     r5, r5, #1              ; calculate actual size

	MOV	r0, #0			; no old area
	Push	"r0"			; SNewArea needs memory location
	MOV	r0, sp			; ptr to this
	MOV	r3, r5			; size wanted
	BL	SNewArea
	Pull	"r2"			; ptr to allocated space
	EXIT	VS

; From now till the call to SFreeArea, we must preserve R2 for freeing

	MOV	R0, #OSArgs_ReadPath
        SWI     XOS_Args                ; R1, R5 same as before
	BVS	%FT99

	MOV	R1, R2

	[ debugupcall
        DSTRING r1, "CLOSE Filename is "
	]

; R1 points to the filename.
; Parse the name a bit to get past the fs and note the special field.
; XXX assumes there is at least one colon.  OSArgs_ReadPath should
; guarantee this.

        MOV     r6, #0                  ; assume no special field yet
01	LDRB	r0, [r1], #1		; get the next byte
	TEQ	r0, #"#"		; start of special field?
	TEQEQ	r6, #0			; only grok first #, just in case
	MOVEQ	r6, r1			; so note its start in r6
	TEQ	r0, #":"		; end of device part?
	MOVEQ	r0, #0
	STREQB	r0, [r1, #-1]		; terminate any special field
	BNE	%BT01			; loop till colon seen

	[ debugupcall
        DSTRING r1, "Canon CLOSE Filename is "
	DSTRING	r6, "Canon CLOSE Special is "
	]

	Push	"r2"
	BL	UpCallMainPart		; corrupts registers
	Pull	"r2"			; balance stack, get RMA pointer
99	BL	SFreeArea

	EXIT



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; UpCallMainPart
; ==============

; Run over dirviewers, see which ones will become dirty when file op done
; We are never sure whether a file op worked or not, so can't reliably delete
; dirviewers etc. We are always sure what the filesystem is as FileSwitch tells
; us. There are far too many holes to plug to get full consistency.

UpCallMainPart  Entry                     ; Assumes UpCallHandler has saved regs

; In    r1 -> filename (parsed for badness by FileSwitch)
;       r6 = special field^ or 0

 [ debugupcall
 DSTRING r1,"filename ",cc
 DSTRING r6,", special "
 ]
        LDR     r14, =upfsfunc_Rename
        TEQ     r14, r9
        BNE     %FT20

; Rename is like a create dst/delete src

 [ debugupcall
 DLINE "Its a rename - do delete/create to imitate"
 ]
        BL      UpCall_DeleteObject

        MOV     r1, r2                  ; filename2
        MOV     r6, r7                  ; special field2
        B       %FT30


20      TEQ     r9, #upfsfile_Delete
        BNE     %FT30

        BL      UpCall_DeleteObject
 [ debugupcall
 DLINE "UPCALL finished"
 ]
        EXIT


30      BL      strlen                  ; Dirty the parent of this object
        BL      TryLeafStrip
        MOV     r5, #1
        BL      UpCall_ModifyObject
 [ less_upcall_paranoia
        BLEQ    Ancestor_Exists
 ]

        ; If no ancestor exists, then can't be a !RunImage which has an effect on a viewer.
        BLNE    UpCall_MightBeRunImageInApp
 [ version >= 114
        EXIT    NE
        ; Only go paranoid on objects with likly-to-be-badly-formed names
        ; ie those which don't start :, & or $.
        LDRB    r0, [r1]
        TEQ     r0, #":"
        TEQNE   r0, #"&"
        TEQNE   r0, #"$"
        BLNE    UpCall_Paranoia
 |
        BLEQ    UpCall_Paranoia         ; Panic !!! iff no parent dirviewer
 ]
 [ debugupcall
 DLINE "UPCALL finished"
 ]
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Check if it is !RunImage which is dirty, and if so, check for !App then
; if so dirty parent of parent (parent = dirviewer with file in it; parent's
; parent = dirviewer with app containing file in it)

; In    r1 -> filename
;       r6 = pointer to special field
;       r8 = filesystem

PlingRunImage   DCB     "!RunImage", 0
        ALIGN

UpCall_MightBeRunImageInApp EntryS "r0-r3, r5"

        ; Find the !RunImage
        BL      strlen
        BL      TryLeafStrip
        EXITS   EQ

        ; Is the leaf !RunImage ?
        MOV     r0, r1
        ADD     r1, r1, r3
        ADD     r1, r1, #1
        ADR     r2, PlingRunImage
        BL      strcmp
        EXITS   NE

        ; Is there a leaf before the !RunImage ?
        MOV     r1, r0
        BL      TryLeafStrip
        EXITS   EQ

        ; And does that leaf start with a ! ?
        ADD     r3, r3, #1
        LDRB    r14, [r1, r3]
        SUB     r3, r3, #1
        CMP     r14, #"!"
;        CMPNE   r14,#160                        ; alt+space
        EXITS   NE

        ; If all that is true modify the parent's parent
        MOV     r5, #1
        BL      UpCall_ModifyObject
        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Dirty particular object(s)

; In    r1 -> filename
;       r3 = span to consider for match
;       r5 = 0 -> mark children dirty
;       r8 = filesystem

; Out   EQ: nothing matched
;       NE: something matched

UpCall_ModifyObject Entry "r1, r2, r4, r10"

 [ debugupcall
 DLINE "modifying objects matching ",cc
 BL dspan
 DLINE ""
 ]
        ADR     r4, ViewerList - d_link
        MOV     r10, #0                 ; No matches

05      LDR     r4, [r4, #d_link]
        CMP     r4, #Nowt
        BEQ     %FT90                   ; [finished]

        LDRB    r14, [r4, #d_filesystem]
 [ debugupcall
 DREG r4, "dirviewer ",cc
 DREG r14, " on filesystem ",cc
 Push r1
 LDR r1, [r4, #d_dirnamestore]
 DSTRING r1, ", dirname ",cc
 Pull r1
 ]
        CMP     r14, r8
 [ debugupcall
 BEQ %FT00
 DLINE " --- uninteresting"
 B %FT01
00
 DLINE " --- interesting; trying strcmp"
01
 ]
        BNE     %BT05

; Found dirviewer on given filesystem ... does the name match ? MUST try the
; match even if dirviewer already dirty; paranoia depends on this muchly !!!

        LDR     r1, [sp, #4*0]          ; Need to reload src filename each time
        LDR     r2, [r4, #d_stripname]
 [ debugupcall
 DLINE "comparing ",cc
 BL dspan
 DSTRING r2, " against "
 ]
        BL      strncmp_excludingspaces
 [ debugupcall
 BEQ %FT00
 DLINE "failed to match dirname"
 B %FT01
00
 DLINE "matched dirname"
01
 ]
        BNE     %BT05
        BCS     %FT20                   ; dest finished, matched span

 [ debugupcall
 DLINE "*** dest not finished but span matched"
 ]
        TEQ     r5, #0                  ; dest not finished, matched span
 [ debugupcall
 BEQ %FT00
 DLINE "not dirtying children"
 B %FT01
00
 DLINE "dirtying all children"
01
 ]
        BNE     %BT05                   ; so shall we mark children dirty too?

20      MOVS    r1, r6                  ; Note: this corrupts r1!!!
        addr    r1, anull, EQ
        LDR     r2, [r4, #d_special]
 [ debugupcall
 DSTRING r1, "comparing passed special field ",cc
 DSTRING r2, " against "
 ]
        BL      strcmp
        BNE     %BT05
 [ debugupcall
 DLINE "matched special field - dirtying"
 ]

        MOV     r14, #&FF
        STRB    r14, [r4, #d_unsure]    ; mark this dirviewer as dirty
 [ version >= 116
  [ version >= 118
        LDR     r14, poll_word
        ORR     r14, r14, #poll_word_upcall_waiting
  ]
        STR     r14, poll_word          ; Poke the foreground application
 |
        STRB    r14, filestr_modified   ; and Filer needs redraw
 ]

        MOV     r10, #1                 ; Something dirty
        B       %BT05                   ; [loop till bored]


90      CMP     r10, #0                 ; EQ -> no objects matched
        EXIT

 [ debugupcall
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 -> name
;       r3 = span

dspan EntryS "r0, r1"

        SWI     XHostFS_HostVdu
        SWI     XOS_WriteI+"'"
        MOV     r0, r1
        MOV     r1, r3
        SWI     XOS_WriteN
        SWI     XOS_WriteI+"|"
        LDR     r0, [sp, #Proc_RegOffset + 4]
        ADD     r0, r0, r3
        SWI     XOS_Write0
        SWI     XOS_WriteI+"'"
        SWI     XHostFS_TubeVdu
        EXITS
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Dirty all objects on this filesystem. Pretty much last restort measure

; In    r8 = filesystem

UpCall_Paranoia Entry "r4"


 [ debugupcall
 DREG r8,"*** paranoid dirty of all dirviewers on filesystem ",,Byte
 ]
        ADR     r4, ViewerList - d_link

05      LDR     r4, [r4, #d_link]
        CMP     r4, #Nowt
 [ debugupcall
 BNE %FT00
 DLINE "*** paranoid dirty finished"
00
 ]
        EXIT    EQ                      ; [finished]

        LDRB    r14, [r4, #d_filesystem]
 [ debugupcall
 DREG r4, "dirviewer ",cc
 DREG r14, " on filesystem ",cc
 Push r1
 LDR r1, [r4, #d_dirnamestore]
 DSTRING r1, ", dirname ",cc
 Pull r1
 ]
        CMP     r14, r8
 [ debugupcall
 BEQ %FT00
 DLINE " --- uninteresting"
 B %FT01
00
 DLINE " --- dirtied"
01
 ]
        MOVEQ   r14, #&FF
        STREQB  r14, [r4, #d_unsure]    ; Mark this dirviewer as dirty
 [ version >= 116
  [ version >= 118
        LDREQ   r14, poll_word
        ORREQ   r14, r14, #poll_word_upcall_waiting
  ]
        STREQ   r14, poll_word          ; Poke the foreground application
 |
        STREQB  r14, filestr_modified   ; and Filer needs redraw
 ]
        B       %BT05                   ; [loop till bored]

 [ less_upcall_paranoia
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In:
;       r1 -> name of object to find an ancestor
;       r6 -> special field
;       r8 = filesystem
;
; Out:
;       EQ No ancestor found
;       NE Ancestor found
Ancestor_Exists Entry "r1-r6"

        ; r5->stripname; r6->special field (null string for no special field)
        MOV     r3, r1
        MOVS    r5, r6
        addr    r5, anull, EQ

        ; Hold alternative terminating character for strcmpTS
        MOV     r6, #"."

        ADR     r4, ViewerList - d_link

05      LDR     r4, [r4, #d_link]
        CMP     r4, #Nowt
        EXIT    EQ                      ; EQ indicates none found

        ; Check filesystem number
        LDRB    r14, [r4, #d_filesystem]
        CMP     r14, r8
        BNE     %BT05

        ; Is this a potential ancestor?
        MOV     r1, r3                  ; Need to reload src filename each time
        LDR     r2, [r4, #d_stripname]
        BL      strcmpTS
        BNE     %BT05

        MOV     r1, r5
        LDR     r2, [r4, #d_special]
        BL      strcmp
        BNE     %BT05

        MOVS    r1, #1                  ; Set NE : found one
        EXIT
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In:
;       r1 -> name of object being deleted
;       r6 -> special field
;       r8 = filesystem
;
 [ version >= 114
; Restore back to pre-less_upcall_paranoia state as this is the
; correct solution to when an object gets deleted.
 ]
;
 [ less_upcall_paranoia
; Dirty parent and its children
;   if none dirtied and no ancestors then
;      dirty all
 |
; If parent exists then
;   dirty parent
;   if object exists then dirty object and children
; else
;   if object exists then
;     dirty object and children
;   else
;     dirty all
 ]

UpCall_DeleteObject Entry "r3, r5"

        BL      strlen
        BL      TryLeafStrip            ; Dirty the parent of this object
        MOV     r5, #1                  ; and not its children
        BL      UpCall_ModifyObject
        BEQ     %FT50                   ; [parent not found]

        BL      UpCall_MightBeRunImageInApp

        BL      strlen                  ; Dirty this object and its children
        MOV     r5, #0
        BL      UpCall_ModifyObject
        EXIT

50      BL      strlen                  ; Dirty this object and its children
        MOV     r5, #0
        BL      UpCall_ModifyObject
 [ version >= 114
        BLEQ    Ancestor_Exists
        BLNE    UpCall_MightBeRunImageInApp
        EXIT    NE
        ; Only go paranoid on objects with likly-to-be-badly-formed names
        ; ie those which don't start :, & or $.
        LDRB    r0, [r1]
        TEQ     r0, #":"
        TEQNE   r0, #"&"
        TEQNE   r0, #"$"
        BLNE    UpCall_Paranoia
 |
        BLEQ    UpCall_Paranoia         ; Panic !!!
 ]
        EXIT

        LTORG

        END
@


4.5
log
@Reinstated some 32-bit changes lost in version 1.99.

Version 2.02. Tagged as 'Filer-2_02'
@
text
@d17 1
a17 1
; UpCallHandler
d20 1
a20 1
UpCallHandler ROUT
@


4.4
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 2.01. Tagged as 'Filer-2_01'
@
text
@d216 1
a216 1
UpCall_MightBeRunImageInApp Entry "r0-r3, r5"
d367 1
a367 1
dspan Entry "r0, r1"
d375 1
a375 1
        LDR     r0, [sp, #4]
@


4.3
log
@  Fix for Ensure Size upcall bug (from ROL)
Detail:
  * People using ShareFS to write to remote discs will find that they
    annoy the person on the remote machine because their directories
    update randomly. ShareFS, unlike most other parts of the system, uses
    EnsureSize when creating files. This causes an upcall for the modified
    file. Filer was blindly assuming that it understood the format of
    /every/ file modified upcall > 8 (ensure file is one of those) and
    that they had a filename in a particular register. For ensure size,
    that register contains a file handle and would cause Filer to go
    "What ? /Where/ ?! Oh, I'll mark all the windows as dirty because I've
    no idea what's going on any more". But then it only marks one window
    as dirty.
Admin:
  Fix tested extensively in ROL version 4.01 and later.

Version 1.99. Tagged as 'Filer-1_99'
@
text
@d28 1
a28 1
        ENTRY   "r0-r8"
d68 1
a68 1
UpCallNeedsPathname	ENTRY		; assumes UpCallHandler has saved regs
d142 1
a142 1
UpCallMainPart	ENTRY			; Assumes UpCallHandler has saved regs
d216 1
a216 1
UpCall_MightBeRunImageInApp ENTRY "r0-r3, r5"
d260 1
a260 1
UpCall_ModifyObject ENTRY "r1, r2, r4, r10"
d367 1
a367 1
dspan ENTRY "r0, r1"
d388 1
a388 1
UpCall_Paranoia ENTRY "r4"
d446 1
a446 1
Ancestor_Exists ENTRY "r1-r6"
d508 1
a508 1
UpCall_DeleteObject ENTRY "r3, r5"
@


4.2
log
@Made 32-bit compatible. Quite a complex job, and only limited testing so far.

Version 1.97. Tagged as 'Filer-1_97'
@
text
@d36 25
a60 5
        LDR     r14, =upfsclose
        TEQ     r14, r9                 ; is it close?
	BLEQ	UpCallNeedsPathname	; yes, so handle it
	BLNE	UpCallMainPart		; no, we can just do it
	EXIT
d216 1
a216 1
UpCall_MightBeRunImageInApp EntryS "r0-r3, r5"
d367 1
a367 1
dspan EntryS "r0, r1"
d375 1
a375 1
        LDR     r0, [sp, #Proc_RegOffset + 4]
@


4.1
log
@Initial revision
@
text
@d97 1
a97 1
	
d109 1
a109 1
	
d196 1
a196 1
UpCall_MightBeRunImageInApp ENTRY "r0-r3, r5"
d347 1
a347 1
dspan ENTRY "r0, r1"
d355 1
a355 1
        LDR     r0, [sp, #4]
d472 1
a472 1
; 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
