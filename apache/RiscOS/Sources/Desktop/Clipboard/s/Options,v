head	1.6;
access;
symbols
	Clipboard-0_10:1.6
	Clipboard-0_09:1.5
	Clipboard-0_08:1.4
	Clipboard-0_07:1.4
	Clipboard-0_06:1.4
	Clipboard-0_05:1.4
	Clipboard-0_04:1.3
	Clipboard-0_03:1.3
	Clipboard-0_02:1.2
	Clipboard-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2018.05.27.16.05.32;	author rool;	state Exp;
branches;
next	1.5;
commitid	Apl4m39uCboI6XDA;

1.5
date	2008.09.16.18.36.55;	author rool;	state Exp;
branches;
next	1.4;

1.4
date	99.02.22.11.58.01;	author bavison;	state Exp;
branches;
next	1.3;

1.3
date	99.02.12.20.01.56;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	98.11.10.18.02.07;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	98.11.10.17.28.24;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.10.17.28.24;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Makefile recreated from fragments
Detail:
  Updates to build against current HdrSrc, and inherit 'standalone' from the shared makefiles.
Admin:
  Built, but no run time testing.

Version 0.10. Tagged as 'Clipboard-0_10'
@
text
@; Copyright 1998 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
;  s.Options - compile-time options
;


                GBLL    Debug
Debug           SETL    {FALSE}

                GBLL    UseDynamicAreas
UseDynamicAreas SETL    {TRUE}

                GBLL    DragNDrop
DragNDrop       SETL    {FALSE}   ; support not complete

    [ :LNOT: :DEF: standalone
                GBLL    standalone
standalone      SETL {FALSE}      ; Build-in Messages file and i/f to ResourceFS
    ]

                GBLL    debugtmp
debugtmp        SETL    {TRUE}           ; Temporary debug

hostvdu         SETL    {TRUE}

debug           SETL    {FALSE}

                END
@


1.5
log
@  Completed the clipboard support part of the Clipboard module.
  Drag-and-Drop support still needs to be designed and implemented.
Detail:
  The initial Clipboard module released by ROOL was in a state of flux due
  to a redesign of how the module worked. The transition to the new way
  of doing things was only done partially and needed completing to make the
  Clipboard module support the clipboard fully. The module also contained
  26-bit only code.

  - Replaced all the 26-bit code with 32-bit (not mode neutral) code.

  - Completed implementation of Clipboard_GetDataType by adding support for
    the situation where the Clipboard module doesn't own the clipboard and
    isn't proxying either. The required StateHandler_DataRequest2 has been
    implemented also.

  - Fully implemented Clipboard_Get including all the required statehandlers.
      StateHandler_DataSaveAck
      StateHandler_RAMFetch1
      StateHandler_RAMFetch2
      StateHandler_DataRequest1
      StateHandler_DataRequest2
      StateHandler_PutRequest3
      StateHandler_Paste

  - Modified CopyData routine to allow for clipboard content not being
    word-aligned and/or its length not being a multiple of four.

  - Removed all the commented out code that was left over from the initial
    implementation of the Clipboard module.

  - Added GetData to the set of test applications. It displays the clipboard
    contents if it's of type text (It's best to use short text strings). It's
    not very polished and it's better to use PutClip and GetClip to test the
    Clipboard module.

  - Added PutClip to the set of test applications. It can be used test
    SWI Clipboard_Put. Details on how can be found in its Help file.

  - Added GetClip to the set of test applications. It can be used test
    SWI Clipboard_Get. Details on how can be found in its Help file.
Admin:
  Extensively tested on Iyonix RO 5.11 both external behaviour with PutClip
  and GetClip as well as the internal behaviour of the statehandler (by using
  StrongED as the clipboard owner/requester and rigging it to fail at certain
  points during the datatransfer).

  Briefly tested on RO 4.02, seems to be OK.

  Briefly tested on RO 6.06, seems to be OK. Functionality may be different
  from 5.11 and 4.02 though due to ClipboardHolder. In particular using the
  Clipboard module as a proxy is likely to be affected.

Version 0.09. Tagged as 'Clipboard-0_09'
@
text
@d29 5
@


1.4
log
@* Task-related initialisation moved from module init to Start routine
* State handler added, called from SWI, UserMessage, UserMessageAck handlers
* Implemented NewAction, DeleteAction, DeleteActions, FreeClipboard and
  FreeMsgQueue
* DA memory allocation adapted so as not to use max-size "-1" DAs
* RMA memory allocation functions completed to match DA functions - will now
  assemble with DA support option turned off!

Version 0.05. Tagged as 'Clipboard-0_05'
@
text
@d21 1
a21 1
Debug           SETL    {TRUE}
d29 7
@


1.3
log
@* Makefile altered to build separate targets for RAM and ROM builds
* Makefile supports LocalRes$Path
* General tidying up of source
* Drag-and-Drop features optioned out (implementation unlikely in first release)
* R0 passed to Wimp_Initialise now a recognised value
* Ursula fast service call table added
* Now launches task when module is RMRun
* Error handler modified to have a Quit button instead of Cancel
* Debug builds append error PC to error message in error handler error box

Version 0.03. Tagged as 'Clipboard-0_03'
@
text
@d15 5
@


1.2
log
@Expanded tabs.

Version 0.01. Not tagged
@
text
@d15 3
d20 3
@


1.1
log
@Initial revision
@
text
@d15 2
a16 2
		GBLL	UseDynamicAreas
UseDynamicAreas	SETL	{TRUE}
d18 1
a18 1
		END
@


1.1.1.1
log
@Initial import: Kevin's original version.
@
text
@@
