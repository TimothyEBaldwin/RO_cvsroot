head	1.4;
access;
symbols
	Clipboard-0_10:1.4
	Clipboard-0_09:1.4
	Clipboard-0_08:1.3
	Clipboard-0_07:1.2
	Clipboard-0_06:1.2
	Clipboard-0_05:1.1;
locks; strict;
comment	@# @;


1.4
date	2008.09.16.18.36.53;	author rool;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.13.01.41.06;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	99.02.25.10.57.25;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	99.02.22.11.57.55;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Completed the clipboard support part of the Clipboard module.
  Drag-and-Drop support still needs to be designed and implemented.
Detail:
  The initial Clipboard module released by ROOL was in a state of flux due
  to a redesign of how the module worked. The transition to the new way
  of doing things was only done partially and needed completing to make the
  Clipboard module support the clipboard fully. The module also contained
  26-bit only code.

  - Replaced all the 26-bit code with 32-bit (not mode neutral) code.

  - Completed implementation of Clipboard_GetDataType by adding support for
    the situation where the Clipboard module doesn't own the clipboard and
    isn't proxying either. The required StateHandler_DataRequest2 has been
    implemented also.

  - Fully implemented Clipboard_Get including all the required statehandlers.
      StateHandler_DataSaveAck
      StateHandler_RAMFetch1
      StateHandler_RAMFetch2
      StateHandler_DataRequest1
      StateHandler_DataRequest2
      StateHandler_PutRequest3
      StateHandler_Paste

  - Modified CopyData routine to allow for clipboard content not being
    word-aligned and/or its length not being a multiple of four.

  - Removed all the commented out code that was left over from the initial
    implementation of the Clipboard module.

  - Added GetData to the set of test applications. It displays the clipboard
    contents if it's of type text (It's best to use short text strings). It's
    not very polished and it's better to use PutClip and GetClip to test the
    Clipboard module.

  - Added PutClip to the set of test applications. It can be used test
    SWI Clipboard_Put. Details on how can be found in its Help file.

  - Added GetClip to the set of test applications. It can be used test
    SWI Clipboard_Get. Details on how can be found in its Help file.
Admin:
  Extensively tested on Iyonix RO 5.11 both external behaviour with PutClip
  and GetClip as well as the internal behaviour of the statehandler (by using
  StrongED as the clipboard owner/requester and rigging it to fail at certain
  points during the datatransfer).

  Briefly tested on RO 4.02, seems to be OK.

  Briefly tested on RO 6.06, seems to be OK. Functionality may be different
  from 5.11 and 4.02 though due to ClipboardHolder. In particular using the
  Clipboard module as a proxy is likely to be affected.

Version 0.09. Tagged as 'Clipboard-0_09'
@
text
@; Copyright 1999 Element 14 Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
;  s.Action - routines to handle action blocks
;


;-------------------------------------------------------------------
;
; GetActionHandle - finds the action handle that a message/SWI was referring to
;
; On entry:
;   R11 = my_ref of last message sent as part of the transaction we're interested in
; On exit:
;   R11 -> action block for the transaction, or 0 if not found

GetActionHandle
        Entry   "R0"
        MOV     R14, R11
        ADR     R11, Actions - Act_Next
01      LDR     R11, [R11, #Act_Next]
        TEQ     R11, #0
        EXIT    EQ                      ; can't find it?
        LDR     R0, [R11, #Act_MyRef]
        Debug   tmp, "test yourref",r0
        TEQ     R14, R0
        BNE     %BT01                   ; try next block if it doesn't match
        EXIT


;-------------------------------------------------------------------
;
; NewAction - creates a new action block
;
; On exit:
;   R11 -> new action block

NewAction
        EntryS  "R0, R2, R3"
        ; Claim memory from RMA
        Debug   tmp, "New action"
        MOV     R0, #ModHandReason_Claim
        MOV     R3, #Act_Size
        SWI     XOS_Module
        STRVS   R0, [sp]
        EXIT    VS
        MOV     R11, R2
        ; Insert into action block list
        LDR     R0, Actions
        STR     R0, [R11, #Act_Next]
        STR     R11, Actions
        ; Initialise block
        MOV     R0, #0
        STR     R0, [R11, #Act_State]
        STR     R0, [R11, #Act_Task]
        STR     R0, [R11, #Act_Owner]
        STR     R0, [R11, #Act_Flags]
        STR     R0, [R11, #Act_Window]
        STR     R0, [R11, #Act_Icon]
        STR     R0, [R11, #Act_X]
        STR     R0, [R11, #Act_Y]
        STR     R0, [R11, #Act_BufAddr]
        STR     R0, [R11, #Act_BufLen]
        STR     R0, [R11, #Act_List]
        STR     R0, [R11, #Act_Name]
        STR     R0, [R11, #Act_TransCount]
        STR     R0, [R11, #Act_IntFlags]
        MOV     R0, #-1
        STR     R0, [R11, #Act_MyRef]
        STR     R0, [R11, #Act_DataRequestRef]
        EXITS


;-------------------------------------------------------------------
;
; DeleteAction - finish with an action block
;
; On entry:
;   R11 -> action block

DeleteAction
        EntryS  "R0, R2"
        ; Check it isn't a null pointer
        TEQ     R11, #0
        EXITS   EQ
        ; Find previous link in list
        ADR     R0, Actions - Act_Next
01      LDR     R2, [R0, #Act_Next]
        TEQ     R2, R11                 ; found a match?
        TEQNE   R2, #0                  ; or got to end of list?
        MOVNE   R0, R2
        BNE     %BT01
        TEQ     R2, R11                 ; if not a match, then we weren't in list
        EXITS   NE                      ; so probably a junk pointer; exit
        ; Remove link from list
        LDR     R2, [R11, #Act_Next]
        STR     R2, [R0, #Act_Next]
        ; Free temp file buffer
        LDR     R0, [R11, #Act_IntFlags]
        TST     R0, #1                  ; is don't-free-buffer bit set?
        LDREQ   R0, [R11, #Act_BufAddr]
        BLEQ    FreeMem
        ; Free data type list
        MOV     R0, #ModHandReason_Free
        LDR     R2, [R11, #Act_List]
        TEQ     R2, #0
        SWINE   XOS_Module              ; ignore errors
        ; Free proposed leafname
        MOV     R0, #ModHandReason_Free
        LDR     R2, [R11, #Act_Name]
        TEQ     R2, #0
        SWINE   XOS_Module              ; ignore errors
        ; Finally, free block
        MOV     R0, #ModHandReason_Free
        MOV     R2, R11
        SWINE   XOS_Module              ; ignore errors
        EXITS


;-------------------------------------------------------------------
;
; DeleteActions - free up all action blocks (for use when shutting down)
;

DeleteActions
        EntryS  "R0, R11"
        LDR     R11, Actions
        TEQ     R11, #0
        EXITS   EQ
01      LDR     R0, [R11, #Act_Next]
        BL      DeleteAction
        MOVS    R11, R0
        BNE     %BT01
        STR     R11, Actions
        EXITS


        END
@


1.3
log
@Fixed Clipboard to build and made it 32bit.
Detail:
  Clipboard has never been 32bitted, therefore it refused to build for
  Tungsten. It's now been fixed to build. It's still not finished though.
Admin:
  Tested on RiscPC RO402. Module checked with ARMalyser.
Notes:
  Changes by James Lampard.

Version 0.08. Tagged as 'Clipboard-0_08'
@
text
@d37 1
d53 1
d58 1
a58 1
        EXIT    VS; Exit with VS
d68 1
d76 1
a76 1
        STR     R0, [R11, #Act_Type]
d117 1
a117 1
        LDR     R2, [R11, #Act_Type]
d138 1
a138 1
        Entry   "R0, R11"
d141 1
a141 1
        EXIT    EQ
d147 1
a147 1
        EXIT
@


1.2
log
@* Standardised all error blocks to use AddError/MakeErrorBlock macros
* Routines added for making "safe" copies of data blocks, data type lists
  and leafnames passed in via the various mechanisms
* SWI Clipboard_Put and Message_DataRequest handler implemented, and the
  supporting state handlers
    State_PutRequest1
    State_DataSave
    State_RAMTransmit
    State_DataLoad
* SWI Clipboard_GetDataType implemented, and the supporting handler
    State_PutRequest2
    (but not State_DataRequest2 yet)
* Now requires that the caller is an active task
* Fixed occasional data abort bug in MySendMessage
* Fixed corruption of wimp event code bug
* Implemented and added test applications

Version 0.06. Tagged as 'Clipboard-0_06'
@
text
@d35 1
a35 1
        EXITS   EQ                      ; can't find it?
d39 1
a39 1
        EXITS
d50 1
a50 1
        Entry   "R0, R2, R3"
d56 1
a56 1
        EXIT    VS
d91 1
a91 1
        Entry   "R0, R2"
d138 1
a138 1
        EXITS   EQ
d144 1
a144 1
        EXITS
@


1.1
log
@* Task-related initialisation moved from module init to Start routine
* State handler added, called from SWI, UserMessage, UserMessageAck handlers
* Implemented NewAction, DeleteAction, DeleteActions, FreeClipboard and
  FreeMsgQueue
* DA memory allocation adapted so as not to use max-size "-1" DAs
* RMA memory allocation functions completed to match DA functions - will now
  assemble with DA support option turned off!

Version 0.05. Tagged as 'Clipboard-0_05'
@
text
@d25 1
a25 1
;   R5 = my_ref of last message sent as part of the transaction we're interested in
d31 1
d37 1
a37 1
        TEQ     R5, R0
@
