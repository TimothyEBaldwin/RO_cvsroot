head	1.13;
access;
symbols
	Clipboard-0_10:1.13
	Clipboard-0_09:1.12
	Clipboard-0_08:1.11
	Clipboard-0_07:1.10
	Clipboard-0_06:1.9
	Clipboard-0_05:1.8
	Clipboard-0_04:1.7
	Clipboard-0_03:1.6
	Clipboard-0_02:1.4
	Clipboard-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2018.05.27.16.05.32;	author rool;	state Exp;
branches;
next	1.12;
commitid	Apl4m39uCboI6XDA;

1.12
date	2008.09.16.18.36.55;	author rool;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.13.01.41.06;	author srevill;	state Exp;
branches;
next	1.10;

1.10
date	99.06.03.15.37.31;	author bavison;	state Exp;
branches;
next	1.9;

1.9
date	99.02.25.10.57.28;	author bavison;	state Exp;
branches;
next	1.8;

1.8
date	99.02.22.11.58.00;	author bavison;	state Exp;
branches;
next	1.7;

1.7
date	99.02.19.11.22.06;	author bavison;	state Exp;
branches;
next	1.6;

1.6
date	99.02.12.20.01.55;	author bavison;	state Exp;
branches;
next	1.5;

1.5
date	98.11.10.20.48.06;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	98.11.10.20.40.02;	author bavison;	state Exp;
branches;
next	1.3;

1.3
date	98.11.10.18.02.05;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	98.11.10.17.55.12;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	98.11.10.17.28.24;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.10.17.28.24;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Makefile recreated from fragments
Detail:
  Updates to build against current HdrSrc, and inherit 'standalone' from the shared makefiles.
Admin:
  Built, but no run time testing.

Version 0.10. Tagged as 'Clipboard-0_10'
@
text
@; Copyright 1998 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
;  s.Module - standard module header and entries
;


Module_BaseAddr
        &       Start - Module_BaseAddr
        &       Initialise - Module_BaseAddr
        &       Finalise - Module_BaseAddr
        &       Service - Module_BaseAddr
        &       Title - Module_BaseAddr
        &       Help - Module_BaseAddr
        &       CommandTable - Module_BaseAddr
        &       ClipboardSWI_Base
        &       SWIHandler - Module_BaseAddr
        &       SWITable - Module_BaseAddr
        &       0 ; SWI decoding code
 [ International_Help <> 0
        &       MessagesFile - Module_BaseAddr
 |
        DCD     0
 ]

 [ :LNOT: No32bitCode
        DCD     ModuleFlags      - Module_BaseAddr
 ]

Help
        =       "Clipboard", 9, "$Module_MajorVersion ($Module_Date)"
        [ Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
        ]
        =       0
Title
SWITable
        =       "Clipboard", 0
        =       "Put", 0
        =       "Get", 0
        =       "GetDataType", 0
      [ DragNDrop
        =       "StartDrag", 0
        =       "CatchDrop", 0
      ]
        =       0
        ALIGN

MessagesFile
        =       "Resources:$.Resources.Clipboard.Messages", 0
        ALIGN

 [ :LNOT: No32bitCode
ModuleFlags     DCD   ModuleFlag_32bit
 ]

      [ standalone
resourcefs_files
        ResourceFile  $MergedMsgs, Resources.Clipboard.Messages
        &       0
      ]

;-------------------------------------------------------------------

; Error symbol definitions
;   Global errors

        AddError UseDesk,   "UseDesk",   0
        AddError BadSWI,    "BadSWI",    &1E6
        AddError BadRead,   "BadRead",   &410
        AddError BadWrt,    "BadWrt",    &411

;   Module-specific errors

        AddError NotActive, "NotActive", 0
        AddError NoTask,    "NoTask",    0
        AddError RecDied,   "RecDied",   0

; LookupError - a simple veneer to MessageTrans_ErrorLookup
;
; On entry:
;   R0 -> tokenised error block
;   R1 -> mfd, or 0 for global messages

LookupError
        Push    "R2-R7, R14"
        MOV     R2, #0          ; internal buffer
        MOV     R3, #0
        MOV     R4, #0          ; no params supported
        MOV     R5, #0
        MOV     R6, #0
        MOV     R7, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "R2-R7, PC"

;-------------------------------------------------------------------
;
; Initialise - module initialisation entry
;

Initialise
        EntryS
        LDR     R0, [R12]
        TEQ     R0, #0
        MOVNE   R12, R0
        BNE     %FT01

        MOV     R0, #ModHandReason_Claim
        MOV     R3, #WorkspaceSize
        SWI     XOS_Module                      ; allocate workspace
        EXIT    VS
        STR     R2, [R12]
        MOV     R12, R2

01      MOV     R0, #0                          ; initialise workspace
        STR     R0, mystack
        STR     R0, mytaskhandle

      [ standalone
        ADR     R0, resourcefs_files
        SWI     XResourceFS_RegisterFiles       ; register resources, ignore errors
      ]

        ADR     R0, MessagesBlock
        ADR     R1, MessagesFile
        MOV     R2, #0
        SWI     XMessageTrans_OpenFile          ; open messages, ignore errors

        EXITS

TASK
        =       "TASK"
        ALIGN

;-------------------------------------------------------------------
;
; Finalise - module finalisation entry
;

Finalise
        EntryS
        Push    "R12"
        LDR     R12, [R12]

        LDR     R0, mytaskhandle
        CMP     R0, #0
        BLGT    CloseDown                       ; close down task if necessary

        ADR     R0, MessagesBlock
        SWI     XMessageTrans_CloseFile         ; close messages

      [ standalone
        ADR     R0, resourcefs_files
        SWI     XResourceFS_DeregisterFiles     ; remove resources
      ]

      [ UseDynamicAreas
        ; we need to remove any DAs still present
      ]

        MOV     R0, #ModHandReason_Free
        MOV     R2, R12
        SWI     XOS_Module                      ; free workspace

        Pull    "R12"
        MOV     R0, #0
        STR     R0, [R12]                       ; reset the private word

        EXITS

;-------------------------------------------------------------------
;
; Service - service call handler
;

        DCD     ServiceTable - Module_BaseAddr
Service MOV     R0, R0
        TEQ     R1, #Service_Reset
        TEQNE   R1, #Service_StartWimp
        TEQNE   R1, #Service_StartedWimp
        MOVNE   PC, R14
ServiceCode
        Push    "R14"
        LDR     R12, [R12]
        TEQ     R1, #Service_Reset
        BEQ     Svc_Reset
        TEQ     R1, #Service_StartWimp
        BEQ     Svc_StartWimp
        TEQ     R1, #Service_StartedWimp
        BEQ     Svc_StartedWimp
        MOV     PC, R14
ServiceTable
        DCD     0                       ; flags
        DCD     ServiceCode - Module_BaseAddr
        DCD     Service_Reset           ; &27 (table must be in numerical order)
        DCD     Service_StartWimp       ; &49
        DCD     Service_StartedWimp     ; &4A
        DCD     0                       ; terminator

Svc_Reset
        MOV     R14, #0
        STR     R14, mytaskhandle
        Push    "R0"
        ADR     R0, MessagesBlock
        SWI     XMessageTrans_CloseFile
        Pull    "R0, PC"

Svc_StartWimp
        LDR     R14, mytaskhandle
        TEQ     R14, #0
        MOVEQ   R14, #-1
        STREQ   R14, mytaskhandle
        ADREQ   R0, ClipboardCommand
        MOVEQ   R1, #0
        Pull    "PC"

Svc_StartedWimp
        LDR     R14, mytaskhandle
        CMP     R14, #-1
        MOVEQ   R14, #0
        STREQ   R14, mytaskhandle
        Pull    "PC"

;-------------------------------------------------------------------
;
; CommandTable - help and command keyword table
;

CommandTable
ClipboardCommand
        Command Desktop_Clipboard, 0, 0, International_Help
        =       0

        [ International_Help = 0
Desktop_Clipboard_Help
        =       "The Clipboard module provides support for the Desktop global "
        =       "clipboard.", 13, "Do not use *", 27, 0, ", use *Desktop "
        =       "instead.", 13
Desktop_Clipboard_Syntax
        =       27, 1, 0
        |
Desktop_Clipboard_Help
        =       "HCPBDCB", 0
Desktop_Clipboard_Syntax
        =       "SCPBDCB", 0
        ]
        ALIGN

Desktop_Clipboard_Code
        Entry
        LDR     R12, [R12]
        LDR     R14, mytaskhandle
        CMP     R14, #-1
        MOVEQ   R2, R0                           ; R2 -> command tail
        MOVEQ   R0, #ModHandReason_Enter
        addr    R1, Title, EQ
        SWIEQ   XOS_Module                      ; shouldn't return

        ADR     R0, ErrorBlock_UseDesk
        MOV     R1, #0
        MOV     R2, #0
        addr    R4, Title
        SWI     XMessageTrans_ErrorLookup
        EXIT

        MakeErrorBlock UseDesk

; ----------------------------------------------------------------------------------------------------------------------
; Neil's debugging routines

      [ debug
        InsertNDRDebugRoutines
      ]

        END
@


1.12
log
@  Completed the clipboard support part of the Clipboard module.
  Drag-and-Drop support still needs to be designed and implemented.
Detail:
  The initial Clipboard module released by ROOL was in a state of flux due
  to a redesign of how the module worked. The transition to the new way
  of doing things was only done partially and needed completing to make the
  Clipboard module support the clipboard fully. The module also contained
  26-bit only code.

  - Replaced all the 26-bit code with 32-bit (not mode neutral) code.

  - Completed implementation of Clipboard_GetDataType by adding support for
    the situation where the Clipboard module doesn't own the clipboard and
    isn't proxying either. The required StateHandler_DataRequest2 has been
    implemented also.

  - Fully implemented Clipboard_Get including all the required statehandlers.
      StateHandler_DataSaveAck
      StateHandler_RAMFetch1
      StateHandler_RAMFetch2
      StateHandler_DataRequest1
      StateHandler_DataRequest2
      StateHandler_PutRequest3
      StateHandler_Paste

  - Modified CopyData routine to allow for clipboard content not being
    word-aligned and/or its length not being a multiple of four.

  - Removed all the commented out code that was left over from the initial
    implementation of the Clipboard module.

  - Added GetData to the set of test applications. It displays the clipboard
    contents if it's of type text (It's best to use short text strings). It's
    not very polished and it's better to use PutClip and GetClip to test the
    Clipboard module.

  - Added PutClip to the set of test applications. It can be used test
    SWI Clipboard_Put. Details on how can be found in its Help file.

  - Added GetClip to the set of test applications. It can be used test
    SWI Clipboard_Get. Details on how can be found in its Help file.
Admin:
  Extensively tested on Iyonix RO 5.11 both external behaviour with PutClip
  and GetClip as well as the internal behaviour of the statehandler (by using
  StrongED as the clipboard owner/requester and rigging it to fail at certain
  points during the datatransfer).

  Briefly tested on RO 4.02, seems to be OK.

  Briefly tested on RO 6.06, seems to be OK. Functionality may be different
  from 5.11 and 4.02 though due to ClipboardHolder. In particular using the
  Clipboard module as a proxy is likely to be affected.

Version 0.09. Tagged as 'Clipboard-0_09'
@
text
@a40 3
 [ :LNOT: No32bitCode
ModuleFlags     DCD   ModuleFlag_32bit
 ]
d65 5
a69 1
      [ Standalone
d71 1
a71 1
        ResourceFile    Messages, Resources.Clipboard.Messages
d131 1
a131 1
      [ Standalone
d164 1
a164 1
      [ Standalone
@


1.11
log
@Fixed Clipboard to build and made it 32bit.
Detail:
  Clipboard has never been 32bitted, therefore it refused to build for
  Tungsten. It's now been fixed to build. It's still not finished though.
Admin:
  Tested on RiscPC RO402. Module checked with ARMalyser.
Notes:
  Changes by James Lampard.

Version 0.08. Tagged as 'Clipboard-0_08'
@
text
@d32 1
a32 1
        [ International_Help <> 0
d34 10
a43 11
        |
        &       0
        ]

        [ :LNOT: No32bitCode
        &       ModuleFlags      - Module_BaseAddr
        ]

        [ :LNOT: No32bitCode
ModuleFlags     &      ModuleFlag_32bit
        ]
d113 1
a113 1
        Entry
d140 1
a140 1
        EXIT
d152 1
a152 1
        Entry
d168 4
d180 1
a180 2
        CLRV                                    ; so we can die even if swi failed
        EXIT
d279 7
@


1.10
log
@A piddly little bugfix that never got committed at the time.

Not tagged.
@
text
@d34 10
d141 1
a141 1
        EXITS
d177 2
a178 1
        EXITS
d190 1
a190 1
        MOVNES  PC, R14
d200 1
a200 1
        MOVS    PC, R14
@


1.9
log
@* Standardised all error blocks to use AddError/MakeErrorBlock macros
* Routines added for making "safe" copies of data blocks, data type lists
  and leafnames passed in via the various mechanisms
* SWI Clipboard_Put and Message_DataRequest handler implemented, and the
  supporting state handlers
    State_PutRequest1
    State_DataSave
    State_RAMTransmit
    State_DataLoad
* SWI Clipboard_GetDataType implemented, and the supporting handler
    State_PutRequest2
    (but not State_DataRequest2 yet)
* Now requires that the caller is an active task
* Fixed occasional data abort bug in MySendMessage
* Fixed corruption of wimp event code bug
* Implemented and added test applications

Version 0.06. Tagged as 'Clipboard-0_06'
@
text
@d148 2
a149 2
        TEQ     R0, #0
        BLNE    CloseDown                       ; close down task if necessary
@


1.8
log
@* Task-related initialisation moved from module init to Start routine
* State handler added, called from SWI, UserMessage, UserMessageAck handlers
* Implemented NewAction, DeleteAction, DeleteActions, FreeClipboard and
  FreeMsgQueue
* DA memory allocation adapted so as not to use max-size "-1" DAs
* RMA memory allocation functions completed to match DA functions - will now
  assemble with DA support option turned off!

Version 0.05. Tagged as 'Clipboard-0_05'
@
text
@d67 36
d138 3
d170 3
d223 3
d257 1
a257 1
        ADR     R0, errorblock_cant_start_clipboard
d264 1
a264 4
errorblock_cant_start_clipboard
        &       0
        =       "UseDesk", 0                    ; A global message
        ALIGN
@


1.7
log
@* Updated API to match that from the spec 1309,419/FS
* Added symbols for all flag bits in SWIs and messages
* Major reorganisation of workspace layout, primarily to facilitate multiple
  concurrent data transfer transactions - because of this, most of the
  useful functionality is currently commented out, pending updating to use
  the new structures
* Replaced "event" queue with a simple queue of ready-to-send Wimp message
  blocks - this way, event handling can be handled in the same place in the
  code, irrespective of whether we're in the foreground or background
* Reorganised finalisation code so that task and module operations are
  performed in separate routines and (mostly) in strictly the reverse order
  to at initialisation. This allows code sharing between module finalisation,
  the exit handler, the UpCall_NewApplication handler, and the task quit
  code, as well as eradicating several memory leaks in the process

Version 0.04. Tagged as 'Clipboard-0_04'
@
text
@d15 4
d60 1
a60 1
ResourceFSFiles
a83 6
        STR     R0, MsgQueue
        STR     R0, ClipboardTask
      [ DragNDrop
        STR     R0, DragTask
      ]
        STR     R0, Actions
d86 1
a86 1
        ADR     R0, ResourceFSFiles
d116 1
a116 1
        ADR     R0, ResourceFSFiles
d212 1
a212 1
        ADR     R0, ErrorBlock_CantStartClipboard
d219 1
a219 1
ErrorBlock_CantStartClipboard
@


1.6
log
@* Makefile altered to build separate targets for RAM and ROM builds
* Makefile supports LocalRes$Path
* General tidying up of source
* Drag-and-Drop features optioned out (implementation unlikely in first release)
* R0 passed to Wimp_Initialise now a recognised value
* Ursula fast service call table added
* Now launches task when module is RMRun
* Error handler modified to have a Quit button instead of Cancel
* Debug builds append error PC to error message in error handler error box

Version 0.03. Tagged as 'Clipboard-0_03'
@
text
@d43 1
a43 1
        =       "Clear", 0
d46 1
d55 8
d72 1
a72 1
        SWI     XOS_Module
d77 2
a78 1
01      MOV     R0, #0
d80 6
a85 4
        STR     R0, mystack
        STR     R0, EventQueue
        STR     R0, ClipboardAddr
        STR     R0, GetBufferAddr
d89 1
a89 1
        SWI     XResourceFS_RegisterFiles       ; ignore errors
d95 1
a95 1
        SWI     XMessageTrans_OpenFile
d102 3
d107 1
d110 4
d115 1
a115 1
        SWI     XMessageTrans_CloseFile
d119 1
a119 1
        SWI     XResourceFS_DeregisterFiles     ; ignore errors
d122 3
a124 15
        LDR     R0, mytaskhandle
        TEQ     R0, #0
        EXIT    EQ
        LDR     R1, TASK
        SWI     XWimp_CloseDown

        BL      FreeClipboard
        BL      FreeGetBuffer

        LDR     R2, mystack
        TEQ     R2, #0
        MOVNE   R14, #0
        STRNE   R14, mystack
        MOVNE   R0, #ModHandReason_Free
        SWINE   XOS_Module
d126 1
d128 2
a129 1
        STR     R0, mytaskhandle
d132 2
d182 2
a203 2
;-------------------------------------------------------------------

a224 25

;-------------------------------------------------------------------

      [ Standalone
ResourceFSFiles
        ResourceFile    Messages, Resources.Clipboard.Messages
        &       0
      ]

;-------------------------------------------------------------------
; MemCopy - copy some memory somewhere
;      R0 -> destination
;      R1 -> source
;      R2 = length
;-------------------------------------------------------------------

MemCopy ROUT
        Entry   "R0-R2"
        TEQ     R2, #0
        EXITS   EQ
01      LDRB    R14, [R1], #1
        STRB    R14, [R0], #1
        SUBS    R2, R2, #1
        BNE     %BT01
        EXITS
@


1.5
log
@Silly bugfix: module help string wasn't terminated

Version 0.02. Not tagged
@
text
@d44 1
d46 1
d56 3
a58 3
        LDR     R0,[R12]
        TEQS    R0,#0
        MOVNE   R12,R0
d61 2
a62 2
        MOV     R0,#ModHandReason_Claim
        MOV     R3,#WorkspaceSize
d65 2
a66 2
        STR     R2,[R12]
        MOV     R12,R2
d68 6
a73 6
01      MOV     R0,#0
        STR     R0,mytaskhandle
        STR     R0,mystack
        STR     R0,EventQueue
        STR     R0,ClipboardAddr
        STR     R0,GetBufferAddr
d76 1
a76 1
        ADR     R0,ResourceFSFiles
d80 3
a82 3
        ADR     R0,MessagesBlock
        ADR     R1,MessagesFile
        MOV     R2,#0
d92 1
a92 1
        LDR     R12,[R12]
d94 1
a94 1
        ADR     R0,MessagesBlock
d98 1
a98 1
        ADR     R0,ResourceFSFiles
d102 2
a103 2
        LDR     R0,mytaskhandle
        TEQS    R0,#0
d105 1
a105 1
        LDR     R1,TASK
d111 5
a115 5
        LDR     R2,mystack
        TEQS    R2,#0
        MOVNE   R14,#0
        STRNE   R14,mystack
        MOVNE   R0,#ModHandReason_Free
d118 2
a119 2
        MOV     R0,#0
        STR     R0,mytaskhandle
d122 10
a131 9
        ALIGN   32,28
Service
        TEQS    R1,#Service_Reset
        TEQNES  R1,#Service_StartWimp
        TEQNES  R1,#Service_StartedWimp
        MOVNES  PC,LR
        Push    "LR"
        LDR     R12,[R12]
        TEQS    R1,#Service_Reset
d133 1
a133 1
        TEQS    R1,#Service_StartWimp
d135 10
d146 7
a152 6
Svc_StartedWimp
        LDR     R14,mytaskhandle
        CMPS    R14,#-1
        MOVEQ   R14,#0
        STREQ   R14,mytaskhandle
        Pull    "PC"
d155 6
a160 6
        LDR     R14,mytaskhandle
        TEQS    R14,#0
        MOVEQ   R14,#-1
        STREQ   R14,mytaskhandle
        ADREQ   R0,ClipboardCommand
        MOVEQ   R1,#0
d163 6
a168 7
Svc_Reset
        MOV     R14,#0
        STR     R14,mytaskhandle
        Push    "R0"
        ADR     R0,MessagesBlock
        SWI     XMessageTrans_CloseFile
        Pull    "R0,PC"
d194 6
a199 6
        LDR     R12,[R12]
        LDR     R14,mytaskhandle
        CMPS    R14,#-1
        MOVEQ   R2,R0                           ; R2 -> command tail
        MOVEQ   R0,#ModHandReason_Enter
        addr    R1,Title,EQ
d202 4
a205 4
        ADR     R0,ErrorBlock_CantStartClipboard
        MOV     R1,#0
        MOV     R2,#0
        addr    R4,Title
d218 1
a218 1
        ResourceFile    Resources.Messages, Resources.Clipboard.Messages
d231 1
a231 1
        TEQS    R2,#0
d233 3
a235 3
1       LDRB    R14,[R1],#1
        STRB    R14,[R0],#1
        SUBS    R2,R2,#1
@


1.4
log
@* Introduced makefile (and non-stand-alone export / ROM build capabilities)
* Split Messages into CmdHelp and Messages

Version 0.02. Tagged as 'Clipboard-0_02'
@
text
@d37 1
@


1.3
log
@Expanded tabs.

Version 0.01. Not tagged
@
text
@d35 1
a35 1
        = " $Module_MinorVersion"
d72 1
d75 1
d94 1
d97 1
d202 1
d204 1
a204 1
        ResourceFile    Resources.<Locale>.Messages, Resources.Clipboard.Messages
d206 1
@


1.2
log
@Placed under srccommit control.

Version 0.01. Not tagged
@
text
@d17 14
a30 14
	&	Start - Module_BaseAddr
	&	Initialise - Module_BaseAddr
	&	Finalise - Module_BaseAddr
	&	Service - Module_BaseAddr
	&	Title - Module_BaseAddr
	&	Help - Module_BaseAddr
	&	CommandTable - Module_BaseAddr
	&	ClipboardSWI_Base
	&	SWIHandler - Module_BaseAddr
	&	SWITable - Module_BaseAddr
	&	0 ; SWI decoding code
	[ International_Help <> 0
	&	MessagesFile - Module_BaseAddr
	]
d33 1
a33 1
	=	"Clipboard", 9, "$Module_MajorVersion ($Module_Date)"
d39 7
a45 7
	=	"Clipboard", 0
	=	"Put", 0
	=	"Get", 0
	=	"Clear", 0
	=	"StartDrag", 0
	=	0
	ALIGN
d48 2
a49 2
	=	"Resources:$.Resources.Clipboard.Messages", 0
	ALIGN
d52 27
a78 27
	Entry
	LDR	R0,[R12]
	TEQS	R0,#0
	MOVNE	R12,R0
	BNE	%FT01

	MOV	R0,#ModHandReason_Claim
	MOV	R3,#WorkspaceSize
	SWI	XOS_Module
	EXIT	VS
	STR	R2,[R12]
	MOV	R12,R2

01	MOV	R0,#0
	STR	R0,mytaskhandle
	STR	R0,mystack
	STR	R0,EventQueue
	STR	R0,ClipboardAddr
	STR	R0,GetBufferAddr

	ADR	R0,ResourceFSFiles
	SWI	XResourceFS_RegisterFiles	; ignore errors

	ADR	R0,MessagesBlock
	ADR	R1,MessagesFile
	MOV	R2,#0
	SWI	XMessageTrans_OpenFile
d80 1
a80 1
	EXITS
d83 2
a84 2
	=	"TASK"
	ALIGN
d86 2
a87 2
	Entry
	LDR	R12,[R12]
d89 2
a90 2
	ADR	R0,MessagesBlock
	SWI	XMessageTrans_CloseFile
d92 2
a93 2
	ADR	R0,ResourceFSFiles
	SWI	XResourceFS_DeregisterFiles	; ignore errors
d95 19
a113 19
	LDR	R0,mytaskhandle
	TEQS	R0,#0
	EXIT	EQ
	LDR	R1,TASK
	SWI	XWimp_CloseDown

	BL	FreeClipboard
	BL	FreeGetBuffer

	LDR	R2,mystack
	TEQS	R2,#0
	MOVNE	R14,#0
	STRNE	R14,mystack
	MOVNE	R0,#ModHandReason_Free
	SWINE	XOS_Module

	MOV	R0,#0
	STR	R0,mytaskhandle
	EXITS
d115 1
a115 1
	ALIGN	32,28
d117 10
a126 10
	TEQS	R1,#Service_Reset
	TEQNES	R1,#Service_StartWimp
	TEQNES	R1,#Service_StartedWimp
	MOVNES	PC,LR
	Push	"LR"
	LDR	R12,[R12]
	TEQS	R1,#Service_Reset
	BEQ	Svc_Reset
	TEQS	R1,#Service_StartWimp
	BEQ	Svc_StartWimp
d129 5
a133 5
	LDR	R14,mytaskhandle
	CMPS	R14,#-1
	MOVEQ	R14,#0
	STREQ	R14,mytaskhandle
	Pull	"PC"
d136 7
a142 7
	LDR	R14,mytaskhandle
	TEQS	R14,#0
	MOVEQ	R14,#-1
	STREQ	R14,mytaskhandle
	ADREQ	R0,ClipboardCommand
	MOVEQ	R1,#0
	Pull	"PC"
d145 6
a150 6
	MOV	R14,#0
	STR	R14,mytaskhandle
	Push	"R0"
	ADR	R0,MessagesBlock
	SWI	XMessageTrans_CloseFile
	Pull	"R0,PC"
d154 2
a155 2
	Command	Desktop_Clipboard, 0, 0, International_Help
	=	0
d157 1
a157 1
	[ International_Help = 0
d159 3
a161 3
	=	"The Clipboard module provides support for the Desktop global "
	=	"clipboard.", 13, "Do not use *", 27, 0, ", use *Desktop "
	=	"instead.", 13
d163 2
a164 2
	=	27, 1, 0
	|
d166 1
a166 1
	=	"HCPBDCB", 0
d168 3
a170 3
	=	"SCPBDCB", 0
	]
	ALIGN
d175 15
a189 15
	Entry
	LDR	R12,[R12]
	LDR	R14,mytaskhandle
	CMPS	R14,#-1
	MOVEQ	R2,R0				; R2 -> command tail
	MOVEQ	R0,#ModHandReason_Enter
	addr	R1,Title,EQ
	SWIEQ	XOS_Module			; shouldn't return

	ADR	R0,ErrorBlock_CantStartClipboard
	MOV	R1,#0
	MOV	R2,#0
	addr	R4,Title
	SWI	XMessageTrans_ErrorLookup
	EXIT
d192 3
a194 3
	&	0
	=	"UseDesk", 0			; A global message
	ALIGN
d199 2
a200 2
	ResourceFile	Resources.<Locale>.Messages, Resources.Clipboard.Messages
	&	0
d209 9
a217 9
MemCopy	ROUT
	Entry	"R0-R2"
	TEQS	R2,#0
	EXITS	EQ
1	LDRB	R14,[R1],#1
	STRB	R14,[R0],#1
	SUBS	R2,R2,#1
	BNE	%BT01
	EXITS
d219 1
a219 1
	END
@


1.1
log
@Initial revision
@
text
@d33 4
a36 2
	=	"Wimp Clipboard", 9
	=	"0.01 (19 Jun 1996)", 0
@


1.1.1.1
log
@Initial import: Kevin's original version.
@
text
@@
