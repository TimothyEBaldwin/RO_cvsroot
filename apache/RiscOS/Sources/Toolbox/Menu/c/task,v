head	4.2;
access;
symbols
	Menu-0_40:4.2
	Menu-0_39:4.2
	Menu-0_38:4.2
	Menu-0_37:4.1
	RO_5_07:4.1
	Menu-0_36:4.1
	nturton_Menu-0_35:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Ursula_RiscPC:4.1.0.10
	Menu-0_35:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	Ursula:4.1.0.8
	Ursula_bp:4.1
	Menu-0_34:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Menu_0_33:4.1
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_Menu_0_31:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	sbrodie_Menu_0_30:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2015.08.18.21.37.57;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	ZzWfk8CWMRcyvNxy;

4.1
date	96.11.05.09.22.39;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.39;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.43.13;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.14.48;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.38.50;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.38. Tagged as 'Menu-0_38'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   task.c
 * Purpose: task handling for the Menu module
 * Author:  TGR
 * History: 16-Nov-93: TGR: created from IDJ template
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "string32.h"
#include "messages.h"
#include "objects/toolbox.h"
#include "objects/menu.h"
#include "debug.h"
#include "mem.h"

#include "object.h"
#include "auxiliary.h"

#include "task.h"

/*
 * This module has a linked list of client tasks.
 * task_add gets called when a Service_ToolboxTaskBorn
 * service call goes round.
 * The task is removed when the Service_WimpCloseDown is
 * received.
 * Each task keeps an Object list
 */


static TaskDescriptor *task__list = NULL;


extern BOOL task_any_active(void)
{
    return task__list != NULL;
}

extern TaskDescriptor *task_find (int task_handle)
{

   /*
    * Function to return a TaskDescriptor corresponding to
    * a task with a given Wimp handle
    */

   TaskDescriptor *t;

   DEBUG debug_output ("t","Menu: looking for task 0x%x\n",task_handle);

   t = task__list;

   while (t != NULL)
   {
      if (t->task_handle == task_handle)
         break;

      t = t->next;
   }

   return t;
}


extern void task_remove (int task_handle)
{
   /*
   * Function to remove a task descriptor from the list, given its
   * Wimp task handle.  Memory is freed, and we also delete any objects
   * owned by the exiting task.
   */

   TaskDescriptor *t = task__list;
   TaskDescriptor *prev_t = NULL, *next = NULL;
   MenuInternal   *i,*j;
   int             c;

   DEBUG debug_output ("t","Menu: looking to delete task 0x%x\n",task_handle);

   while (t != NULL)
   {
      next = t->next;

      if (t->task_handle == task_handle)
      {
         /*
          * remove this task's object's list
          */

         if (t->object_list != NULL) {

            i = t->object_list;

            /* If something horrible goes wrong whilst we're clearing up,
               then we'll just re-enter here and send ourselves into an
               infinite loop, so remove the task from the list before hand. */

            if (t == task__list)
               task__list = next;
            else
               prev_t->next = next;

            mem_freek (t);

            do {
               j = i->hdr.forward;

               if (global_menu.top == i) {
                  global_menu.top      = NULL;
                  global_menu.current  = NULL;
                  global_menu.flags   &= ~GLOBAL_MENU_INFO_FLAGS_IS_SHOWING
                                      &  ~GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;
                  global_menu.t        = NULL;
               }
               if ((i->hdr.wimp_menu)->hdr.title.indirect_text.buffer)
                  mem_freek ((i->hdr.wimp_menu)->hdr.title.indirect_text.buffer);

                 /* may not be any help */

               if (i->hdr.help_message) mem_freek (i->hdr.help_message);

               for (c=0;c<i->hdr.num_entries;c++) {
                  remove_menu_entry (wimp_menu_entry(i->hdr.wimp_menu,c),menu_internal_entry(i,c));
               }

               if (i->hdr.entries) mem_freek (i->hdr.entries);

               mem_freek (i->hdr.wimp_menu);
               mem_freek (i);

            } while ((i=j) != t->object_list);
         }

         /*
          * remove the task descriptor itself
          */

         else {
            if (t == task__list)
               task__list = next;
            else
               prev_t->next = next;

            mem_freek (t);
         }
         return;
      }
      prev_t = t;
      t = next;
   }
}


extern void task_add (int task_handle)
{
   /*
    * Function to add a task descriptor to the list of active
    * Toolbox tasks.
    */

   /*
    * extra safety check, we make sure that the task is not already there!
    */

   TaskDescriptor *new_t;

   DEBUG debug_output ("t","Menu: adding task\n");


   if (task_find (task_handle) != NULL)
      return;


   /*
    * add task to list
    */

   if ((new_t = mem_alloc (sizeof(TaskDescriptor))) == NULL)
   {
      raise_toolbox_error(Menu_AllocFailed,0,0,-1);
      return;
   }

   new_t->task_handle = task_handle;
   new_t->next = task__list;
   new_t->object_list = NULL;
   task__list = new_t;

   DEBUG debug_output ("t","Menu: added task's handle = 0x%x\n",task_handle);
}
@


4.1
log
@Initial revision
@
text
@d33 2
a34 3
#include "objects.toolbox.h"
#include "objects.menu.h"
#include "services.h"
a37 1
#include "Menu.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
