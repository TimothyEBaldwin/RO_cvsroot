head	4.3;
access;
symbols
	Menu-0_40:4.3
	Menu-0_39:4.3
	Menu-0_38:4.3
	Menu-0_37:4.2
	RO_5_07:4.2
	Menu-0_36:4.2
	nturton_Menu-0_35:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.10
	Menu-0_35:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	Ursula:4.2.0.8
	Ursula_bp:4.2
	Menu-0_34:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.2.0.6
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Menu_0_33:4.2
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Menu_0_31:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Menu_0_30:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.21.37.56;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	ZzWfk8CWMRcyvNxy;

4.2
date	97.01.22.15.31.01;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.37;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.37;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.43.03;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.14.39;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.38.41;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.38. Tagged as 'Menu-0_38'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   create.c
 * Purpose: create a Menu Object
 * Author:  TGR
 * History: 1-Nov-93: TGR
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "string32.h"
#include "messages.h"
#include "objects/toolbox.h"
#include "objects/menu.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "style.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "create.h"

_kernel_oserror *create_menu_aux (MenuTemplate *menu_temp, ObjectID object_id, TaskDescriptor *t, MenuInternal *menu_int, MenuTemplateEntry *temp_entries);
extern _kernel_oserror *create_menu (_kernel_swi_regs *r, TaskDescriptor *t) {

    /*
     * request to create a menu
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

   _kernel_swi_regs     *user_regs;
   MenuTemplate         *menu_temp,
                        *new_menu_temp = NULL;
   MenuTemplateEntry    *temp_entries;
   ObjectTemplateHeader *obj_temp_hdr;
   MenuInternal         *menu_int;
   ObjectID              object_id;
   int                   version_no;
   _kernel_oserror      *e;

   user_regs    = (_kernel_swi_regs *) r->r[4];
   obj_temp_hdr = (ObjectTemplateHeader *)user_regs->r[1];
   menu_temp    = (MenuTemplate *) obj_temp_hdr->body;
   object_id    = (ObjectID) r->r[1];
   version_no   = obj_temp_hdr->version;

   if ((menu_int=mem_alloc(sizeof(MenuInternal))) == NULL) {
      return make_error(Menu_AllocFailed,0);
   }
   /* Version 100 menus are not supported AT ALL - none should exist and if they do,
    * they'll crash the application */
   if (version_no == 101) { /* if more versions are added, change to switch statement */
      if ((new_menu_temp = mem_alloc (sizeof (MenuTemplate))) == NULL) {
         mem_freek (menu_int);
         return make_error (Menu_AllocFailed, 0);
      }
      DEBUG debug_output (
         "f",
         "Menu: old version, copying 0x%x (size 0x%x) to 0x%x and 0x%x (size 0x%x) to 0x%x\n",
         menu_temp,
         offsetof (MenuTemplateHeader,show_event),
         new_menu_temp,
         ((char *) menu_temp) + offsetof (MenuTemplateHeader101,num_entries),
         (sizeof (MenuTemplateHeader) - offsetof (MenuTemplateHeader, num_entries)),
         ((char *) new_menu_temp) + offsetof (MenuTemplateHeader,num_entries)
      );
      memcpy (new_menu_temp,
              menu_temp,
              offsetof (MenuTemplateHeader,show_event)
      );
      memcpy (((char *) new_menu_temp) + offsetof (MenuTemplateHeader   ,num_entries),
              ((char *) menu_temp)     + offsetof (MenuTemplateHeader101,num_entries),
              (sizeof (MenuTemplateHeader) - offsetof (MenuTemplateHeader, num_entries))
      );
      new_menu_temp->hdr.show_event = 0;
      new_menu_temp->hdr.hide_event = 0;
      temp_entries = (MenuTemplateEntry *) (((MenuTemplateHeader101 *) menu_temp)+1);
      menu_temp = new_menu_temp;
   } else {
      temp_entries = (MenuTemplateEntry *) (menu_temp + 1);
   }
   DEBUG debug_output ("f","Menu: using first template menu entry at 0x%x\n",temp_entries);

   if ((e = create_menu_aux (menu_temp, object_id, t, menu_int, temp_entries)) != NULL) {
      if (new_menu_temp) mem_freek (new_menu_temp);
      mem_freek(menu_int);
      return e;
   }
   user_regs->r[0] = r->r[1];
   r->r[0] = (int) menu_int;

   if (new_menu_temp) mem_freek (new_menu_temp);

   return NULL;
}


_kernel_oserror *create_menu_aux (MenuTemplate *menu_temp, ObjectID object_id, TaskDescriptor *t, MenuInternal *menu_int, MenuTemplateEntry *temp_entries) {

   _kernel_oserror   *e = NULL;
   _kernel_swi_regs   regs;
   MenuTemplateEntry *temp_entry;
   MenuInternalEntry *int_entry,*int_entries;
   wimp_Menu         *menu;
   wimp_MenuEntry    *menu_entry;
   int                num_entries;
   int                i;
   BOOL               generate_show_event = menu_temp->hdr.flags  & Menu_GenerateShowEvent;
   BOOL               generate_hide_event = menu_temp->hdr.flags  & Menu_GenerateHideEvent;

   num_entries  = menu_temp->hdr.num_entries;

   DEBUG debug_output ("M","Menu: auxiliary create, num_entries = %d\n",num_entries);

   if ((menu=mem_alloc(sizeof(wimp_Menu) + num_entries*sizeof(wimp_MenuEntry))) == NULL) {
      return make_error(Menu_AllocFailed,0);
   }
   menu_int->hdr.wimp_menu = menu;

   DEBUG debug_output ("M","Menu, max title_len = %d, title = '%s'\n",menu_temp->hdr.max_title,menu_temp->hdr.title);
   if (!menu_temp->hdr.title || !menu_temp->hdr.max_title) {
      menu->hdr.title.indirect_text.buffer = NULL;
      menu->hdr.title.indirect_text.buff_len = 0;
   } else if ((menu->hdr.title.indirect_text.buffer = mem_alloc(menu_temp->hdr.max_title)) == NULL) {
      e = make_error(Menu_AllocFailed,0);
      goto clearup5;
   } else if (!string_copy_chk(menu->hdr.title.indirect_text.buffer,menu_temp->hdr.title,menu_temp->hdr.max_title)) {
      e = make_error (Menu_ShortBuffer,0);
      goto clearup4;
   } else {
      menu->hdr.title.indirect_text.valid_string = NULL;
      menu->hdr.title.indirect_text.buff_len = strlen (menu_temp->hdr.title) + 1;
   }
   if (num_entries) {
      if ((int_entries=mem_alloc(num_entries*sizeof(MenuInternalEntry))) == NULL) {
         e = make_error(Menu_AllocFailed,0);
         goto clearup4;
      }
   }
   else
      int_entries = NULL;

   menu_int->hdr.entries      = int_entries;

   if (menu_temp->hdr.max_help) {
     if ((menu_int->hdr.help_message = mem_alloc(menu_temp->hdr.max_help)) == NULL) {
        e = make_error(Menu_AllocFailed,0);
        goto clearup3;
     } else string_copy_chk (menu_int->hdr.help_message,menu_temp->hdr.help_message,menu_temp->hdr.max_help);
   }
   else menu_int->hdr.help_message = NULL;

   menu->hdr.title_fgnd = style_MENU_TITLE_FORECOL;
   menu->hdr.title_bgnd = style_MENU_TITLE_BACKCOL;
   menu->hdr.worka_fgnd = style_MENU_ENTRY_FORECOL;
   menu->hdr.worka_bgnd = style_MENU_ENTRY_BACKCOL;
   menu->hdr.height     = style_MENU_ENTRY_HEIGHT;
   menu->hdr.vert_gap   = style_MENU_ENTRY_GAP;

   menu_int->hdr.object_id    = object_id;
   menu_int->hdr.flags        = (generate_show_event ? MENU_INT_FLAGS_GENERATE_SHOW_EVENT : 0)
                              | (generate_hide_event ? MENU_INT_FLAGS_GENERATE_HIDE_EVENT : 0);
   menu_int->hdr.num_entries  = num_entries;
   menu_int->hdr.title_len    = menu_temp->hdr.max_title;
   menu_int->hdr.help_len     = menu_temp->hdr.max_help;
   menu_int->hdr.show_event   = menu_temp->hdr.show_event;
   menu_int->hdr.hide_event   = menu_temp->hdr.hide_event;

   for (i=0; i<num_entries; i++) {

      DEBUG debug_output ("f", "Menu: entry no. %d\n",i);

      menu_entry  = wimp_menu_entry(menu,i);
      temp_entry  = &(temp_entries[i]); /*menu_template_entry(menu_temp,i);*/
      int_entry   = menu_internal_entry(menu_int,i);

      if ((e = create_menu_entry (menu_entry, temp_entry, int_entry)) != NULL) break;
   }
   if (e) {
      for (i--;i>=0;i--)
         remove_menu_entry(wimp_menu_entry(menu,i),menu_internal_entry(menu_int,i));
      goto clearup2;
   }

   if (num_entries>0) {
      if (menu->hdr.title.indirect_text.buffer)  /* SJM: 14/06/96: Only set indirect bit if there is a title */
         wimp_menu_entry(menu,0)->flags          |= wimp_MENUFLAGS_TITLE_INDIRECT;
      wimp_menu_entry(menu,num_entries-1)->flags |= wimp_MENUFLAGS_LAST_ITEM;
   }
   if ((e = menu_update_size(menu_int)) != NULL) {
      goto clearup1;
   }
   if (t->object_list) { /* If there are already menus attached to the task ... */

      menu_int->hdr.forward                        = t->object_list;
      menu_int->hdr.backward                       = t->object_list->hdr.backward;
      t->object_list->hdr.backward->hdr.forward    = menu_int;
      t->object_list->hdr.backward                 = menu_int;

   } else {              /* ... if not ... */

      /* register interest in toolbox events */

      regs.r[0] = 0;
      regs.r[1] = Menu_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
      regs.r[4] = (int) toolbox_events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }
      /* register interest in wimp events */

      regs.r[0] = 0;
      regs.r[1] = Menu_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
      regs.r[4] = (int) events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }

      /* register interest in wimp messages */

      regs.r[0] = 0;
      regs.r[1] = Menu_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
      regs.r[4] = (int) messages_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }

      /* register interest in pre-filter */

      regs.r[0] = 0;
      regs.r[1] = Menu_PreFilter;
      regs.r[2] = (int) t;

      if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }
      t->object_list         = menu_int;
      menu_int->hdr.forward  = menu_int;
      menu_int->hdr.backward = menu_int;
   }
   return e;

   clearup1:
      for (i=0; i<num_entries; i++) {
         remove_menu_entry(wimp_menu_entry(menu,i),menu_internal_entry(menu_int,i));
      }
   clearup2:
      if (menu_int->hdr.help_message) mem_freek(menu_int->hdr.help_message);
   clearup3:
      mem_freek(int_entries);
   clearup4:
      if (menu->hdr.title.indirect_text.buffer) mem_freek(menu->hdr.title.indirect_text.buffer);
   clearup5:
      mem_freek(menu);
      return e;
}

@


4.2
log
@Version Spin_merge taken
@
text
@d34 2
a35 3
#include "objects.toolbox.h"
#include "objects.menu.h"
#include "services.h"
a40 1
#include "Menu.h"
@


4.1
log
@Initial revision
@
text
@d232 2
a233 1
      wimp_menu_entry(menu,0)->flags             |= wimp_MENUFLAGS_TITLE_INDIRECT;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@d232 1
a232 2
      if (menu->hdr.title.indirect_text.buffer)  /* SJM: 14/06/96: Only set indirect bit if there is a title */
         wimp_menu_entry(menu,0)->flags          |= wimp_MENUFLAGS_TITLE_INDIRECT;
@


4.1.5.1
log
@Import from SrcFiler
@
text
@d232 1
a232 2
      if (menu->hdr.title.indirect_text.buffer)  /* SJM: 14/06/96: Only set indirect bit if there is a title */
         wimp_menu_entry(menu,0)->flags          |= wimp_MENUFLAGS_TITLE_INDIRECT;
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
