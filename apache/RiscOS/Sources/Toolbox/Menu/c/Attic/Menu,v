head	4.4;
access;
symbols
	RO_5_07:4.4
	nturton_Menu-0_35:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Ursula_RiscPC:4.3.0.4
	Menu-0_35:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	Ursula:4.3.0.2
	Ursula_bp:4.3
	Menu-0_34:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Menu_0_33:4.3
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.3
	sbrodie_Menu_0_31:4.3
	sbrodie_Expresso_BETA6_19980204:4.3
	sbrodie_Menu_0_30:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2000.05.04.12.55.12;	author sbrodie;	state dead;
branches;
next	4.3;

4.3
date	98.02.04.19.48.30;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.07.08.10.13.30;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.38;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.38;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.43.09;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.15.01.24.20;	author kbracey;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	97.05.19.15.53.10;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.14.44;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.38.47;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@  Changed to use common Makefile system.
  Debug build facility added.
Detail:
  Uses core facilities from Common instead of having private copies.
  Makefile vastly simplified to simply define a few macros, then include
    the common Toolbox Makefile which is exported by Common.
Admin:
  Requires Common 0.09 or later (RiscOS/Sources/Toolbox/Common; Common-0_09)
  Requires BuildSys 1.92 or later (RiscOS/BuildSys; BuildSys-1_92)
  Requires Library 0.41 or later (RiscOS/Library; Library-0_41)

Version 0.36. Tagged as 'Menu-0_36'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   Menu.c
 * Purpose: main module of a Menu Object module
 * Author:  TGR
 * History: 2-Nov-93: TGR: created from IDJ template
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.menu.h"
#include "services.h"
#include "debug.h"
#include "rmensure.h"
#include "mem.h"
#include "os.h"

#include "auxiliary.h"
#include "create.h"
#include "delete.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"

#include "task.h"

#include "Menu.h"


#define MAX_CLASS_SWI_METHODS 7


static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) =
      {
         create_menu,
         delete_menu,
         NULL, /*copy_menu,*/
         show_menu,
         hide_menu,
         getstate_menu,
         miscop_menu
      };


/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

#ifdef ROM
static _kernel_oserror *__ROM;
#endif


extern _kernel_oserror *Menu_finalise (int fatal, int podule, void *pw)
{
   _kernel_swi_regs  regs;
#ifndef ROM
    extern int       messages_file(void);
#endif

    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    /*
     * refuse to finalise if tasks active
     */

    if (task_any_active())
        return make_error (Menu_TasksActive, 0);

   /*
    * close our messages file
    */

   messages_file_close ();


#ifndef ROM
    /*
     * ... and deregister from ResourceFS
     */

    _swix (ResourceFS_DeregisterFiles, _IN(0), messages_file());
#endif

   /* hide menus before deletion */

   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING) {

       DEBUG debug_output ("M","Menu: hiding menus\n");

       regs.r[1] = -1;

       _kernel_swi (Wimp_CreateMenu, &regs, &regs);
   }

   /* deregister object module */

   regs.r[0] = 0;
   regs.r[1] = Menu_ObjectClass;

   _kernel_swi(Toolbox_DeRegisterObjectModule, &regs, &regs);

   /*
    * free up memory we may have left allocated
    */

   DEBUG debug_output ("M","Menu: exiting\n");
   mem_free_all ();

#ifdef ROM
    if(!__ROM) _swix(0xa2c41, 0);
#endif

   return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */


extern _kernel_oserror *Menu_init(char *cmd_tail, int podule_base, void *pw)
{
   char             *messages_filename;
   _kernel_swi_regs  regs;
   _kernel_oserror  *e;
#ifndef ROM
   extern int messages_file(void);
#endif

   IGNORE(cmd_tail);
   IGNORE(podule_base);
   IGNORE(pw);

#ifdef ROM
    __ROM = _swix(0xa2c43, _IN(0), pw);
#endif

   DEBUG debug_set_var_name("Menu$Debug");

   rmensure ("Toolbox", "Toolbox.Toolbox", "1.29");

   /*
    * register our messages file with Resource FS and MessageTrans
    */

#ifndef ROM
   regs.r[0] = messages_file();
   if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
      return e;
#endif

   DEBUG debug_output ("M","Menu: code initialise\n");

   if (getenv ("Menu$Path") == NULL)
      messages_filename = "Resources:$.Resources.Menu.Messages";
   else
      messages_filename = "Menu:Messages";

   if ((e = messages_file_open (messages_filename)) != NULL)
      return e;


   /* WIMP hack .... explanation follows:
    *   On RISC OS 3.50 and above a call to Wimp_CreateMenu with 'KEEP' as the menu handle
    *   (wimp_KeepMenu) will allow menus to stay on screen after an adjust click _even_
    *   over successive calls to Wimp_Poll. On lower versions, however we merely alter
    *   a byte in WIMP workspace to do the same thing. This was NOT my idea - TGR
    *
    *   Find out what version of OS it is, if it's lower than 350 then remember workspace
    *   pointer for future use, if not set the pointer to NULL to indicate its redundance.
    */

   regs.r[0] = 7;

   if ((e = _kernel_swi (Wimp_ReadSysInfo, &regs, &regs)) != NULL)
      return e;

   if (regs.r[0] < 350) {
      regs.r[0] = os_Module_LookupModuleName;
      regs.r[1] = (int) "WindowManager";

      if ((e = _kernel_swi (OS_Module, &regs, &regs)) != NULL)
         return e;

      global_wimp_wrkspc = (int *) regs.r[4]; /* NULL by default (see auxiliary.c) */
   }

   /* register here with the Toolbox as an Object Module */

   regs.r[0] = 0;
   regs.r[1] = Menu_ObjectClass;
   regs.r[2] = Menu_ClassSWI;
   regs.r[3] = 0;

   if ((e = _kernel_swi(Toolbox_RegisterObjectModule, &regs, &regs)) != NULL)
      return e;

   return NULL;
}



/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */


extern void Menu_services(int service_number, _kernel_swi_regs *r, void *pw)
{
   _kernel_swi_regs regs;

   IGNORE(pw);

   DEBUG debug_output ("M","Menu: svc 0x%x\n",service_number);

   switch (service_number)
   {

        case Service_ToolboxTaskDied:
            /*
             * task dying - r0 holds task handle
             */

            task_remove (r->r[0]);

            break;

      case Service_ToolboxTaskBorn:
         /* Toolbox task has just started R0  == wimp task handle */

         /*
          * create a new "task descriptor"
          */

         task_add (r->r[0]);

         break;

        case Service_ToolboxStarting:
            /*
             * register with the Toolbox as an Object Module
             */

            regs.r[0] = 0;
            regs.r[1] = Menu_ObjectClass;
            regs.r[2] = Menu_ClassSWI;
            regs.r[3] = 0;
            _kernel_swi (Toolbox_RegisterObjectModule, &regs, &regs);

            break;

      default:
         break;
   }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


extern _kernel_oserror *Menu_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
   _kernel_oserror *e = NULL;
   TaskDescriptor  *t;

   DEBUG debug_output ("M","Menu: SWI 0x%x\n",Menu_SWIChunkBase+swi_no);

   IGNORE(pw);

   switch (swi_no+Menu_SWIChunkBase)
   {
      case Menu_ClassSWI:
       if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
       {
         return make_error_hex(Menu_NoSuchMethod,1,r->r[0]);
       }
       else
       {
         t = task_find (r->r[3]);
         if (t == NULL)
         {
           return make_error_hex(Menu_NoSuchTask,1,r->r[3]);
         }
         DEBUG debug_output ("M","Menu: class SWI method %d\n",r->r[0]);
         e = (*class_swi_methods[r->r[0]])(r, t);
       }
       break;

     case Menu_PostFilter:
       e = events_postfilter (r);
       break;

     case Menu_PreFilter:
       e = events_prefilter (r);
       break;

     case Menu_UpdateTree:
       e = update_tree ();
       break;

     default:
       break;
   }

   return e;
}

#if debugging
/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *Menu_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case 0:
            mem_print_list();
            break;

        default:
            break;
    }

    return NULL;
}
#endif
@


4.3
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@@


4.2
log
@Ursula branch merged
@
text
@a42 1
#include "copy.h"
@


4.1
log
@Initial revision
@
text
@d107 1
a107 2
    regs.r[0] = messages_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);
d180 1
a180 1
      messages_filename = "Resources:Resources.Menu.Messages";
@


4.1.4.1
log
@Fixed width of menus.
Made Menu_Selection events occur _before_ Menu_HasBeenHidden events.
@
text
@d107 2
a108 1
    _swix (ResourceFS_DeregisterFiles, _IN(0), messages_file());
@


4.1.4.2
log
@Added tokenisation directives to Messages files.
Made modules open "Resources:$...." not "Resources:....".
@
text
@d180 1
a180 1
      messages_filename = "Resources:$.Resources.Menu.Messages";
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
