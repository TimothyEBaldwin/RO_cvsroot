head	4.8;
access;
symbols
	ToolAction-0_38:4.8
	ToolAction-0_37:4.7
	ToolAction-0_36:4.7
	ToolAction-0_35:4.7
	ToolAction-0_34:4.6
	ToolAction-0_33:4.4
	ToolAction-0_32:4.4
	ToolAction-0_31:4.4
	ToolAction-0_30:4.4
	RO_5_07:4.4
	ToolAction-0_29:4.4
	ToolAction-0_28:4.4
	ToolAction-0_27:4.3
	ToolAction-0_26:4.2
	ToolAction-0_25:4.2
	ToolAction-0_24:4.2
	dellis_autobuild_BaseSW:4.2
	ToolAction-0_23:4.2
	sbrodie_sedwards_16Mar2000:4.2
	ToolAction-0_22:4.2
	ToolAction-0_21:4.2
	dcotton_autobuild_BaseSW:4.2
	ToolAction-0_20:4.2
	ToolAction-0_19:4.2
	ToolAction-0_18:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.6
	ToolAction-0_17:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	Ursula:4.2.0.4
	Ursula_bp:4.2
	ToolAction-0_16:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_NC2_Generic:4.1.7.3
	sbrodie_Expresso_final_190298:4.2
	sbrodie_ToolAction_0_15:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Daytona:4.2
	Spin_merge_8Jul97:4.1.7.3
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.3
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.3
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.3
	RCA_bp:4.1
	smiddle_0_14:4.1.7.3
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.8
date	2016.03.20.09.50.31;	author rool;	state Exp;
branches;
next	4.7;
commitid	wpyBkitEhijoGmZy;

4.7
date	2014.07.19.15.24.51;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	WRvAVD0ee7PL80Jx;

4.6
date	2014.07.05.07.15.13;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	nlIKpur9RzPuS9Hx;

4.5
date	2014.03.16.12.46.15;	author jlee;	state Exp;
branches;
next	4.4;
commitid	A1ZFXe0ttYmthVsx;

4.4
date	2002.07.22.13.39.03;	author srevill;	state Exp;
branches;
next	4.3;

4.3
date	2002.07.16.13.06.52;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.09.11.54;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.13.44.18;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.13.44.18;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.22.27.52;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.06.17.24.32;	author smiddle;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.03.21.19.08.05;	author smiddle;	state Exp;
branches;
next	;


desc
@@


4.8
log
@Correction to event size
Detail:
  The ToolAction selected event is 20 bytes not 16.
Admin:
  Submission from Colin Granville.

Version 0.38. Tagged as 'ToolAction-0_38'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > toolaction.c

 * © SJ Middleton, 1995

 */

#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include "swis.h"

#include "string32.h"
#include "messages.h"

#include "macros.h"
#include "os.h"

#include "gadget.h"
#include "ToolAction.h"
#include "debug.h"

#include "toolact.h"

#include "tbem.h"

#define TOOL_ACTION_OBJECT_SIZE_0   6
#define TOOL_ACTION_OBJECT_SIZE_1   10

// -------------------------------------------------------------------------------

#define SPRITE_VALID_HEADER   	    "r5;S"
#define SPRITE_VALID_HEADER_SMALL   "S"

// private data structure

struct tb_context
{
    gadget_flags flags;

    toolbox_c cmp;
    wimp_w w;
    wimp_i i;

    toolbox_o select_click_show_obj;
    bits select_action_no;

    toolbox_o adjust_click_show_obj;
    bits adjust_action_no;

    int ident_off_limit;
    int ident_on_limit;
    int ident_fade_limit;
    int ident_max_limit;

// followed by
//  char ident_off[ident_off_limit];
//  char ident_on[ident_on_limit];
//  char ident_fade[ident_fade_limit];

// if text
//  char text[ident_max_limit];

// if sprite
//  char validation[sizeof("r5;S") + ident_max_limit];

};

// -------------------------------------------------------------------------------

static char *ident_off_ptr(tb_handle tb)
{
    return (char *)tb + sizeof(struct tb_context);
}

static char *ident_on_ptr(tb_handle tb)
{
    return (char *)tb + sizeof(struct tb_context) + tb->ident_off_limit;
}

static char *ident_fade_ptr(tb_handle tb)
{
    return (char *)tb + sizeof(struct tb_context) + tb->ident_off_limit + tb->ident_on_limit;
}

static char *ident_buffer_ptr(tb_handle tb)
{
    return (char *)tb + sizeof(struct tb_context) + tb->ident_off_limit + tb->ident_on_limit + tb->ident_fade_limit;
}

static void set_ident(tb_handle tb)
{
    char *to;
    bool use_fade;

    to = ident_buffer_ptr(tb);
    use_fade = (tb->flags & (toolaction_IS_TEXT|gadget_FADED|toolaction_HAS_FADE_SPRITE)) == (gadget_FADED|toolaction_HAS_FADE_SPRITE);

    if (tb->flags & toolaction_IS_TEXT)
        to[0] = 0;
    else
    	strcpy(to, use_fade || (tb->flags & toolaction_NO_PRESSED_SPRITE) ? SPRITE_VALID_HEADER_SMALL : SPRITE_VALID_HEADER);

    strcat(to, use_fade ? ident_fade_ptr(tb) : tb->flags & toolaction_ON ? ident_on_ptr(tb) : ident_off_ptr(tb));
}

static os_error *set_ident_and_update(tb_handle tb)
{
    set_ident(tb);
    return xwimp_set_icon_state(tb->w, tb->i, 0, 0);
}

// -------------------------------------------------------------------------------

static void setup_icon(tb_handle tb, wimp_icon *icon, gadget_object *ghdr, int version)
{
    toolaction_object *tobj;

    icon->extent = ghdr->bbox;

    tobj = (toolaction_object *)ghdr->gadget;

    tb->flags = ghdr->flags;

    if (tb->flags & toolaction_IS_TEXT)
    {
    	icon->flags = wimp_ICON_TEXT + wimp_ICON_INDIRECTED +
            wimp_ICON_HCENTRED + wimp_ICON_VCENTRED +
            wimp_ICON_FILLED + wimp_ICON_BORDER +
            (wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT) +
            (wimp_COLOUR_VERY_LIGHT_GREY << wimp_ICON_BG_COLOUR_SHIFT);

    	icon->data.indirected_text.text = ident_buffer_ptr(tb);
    	icon->data.indirected_text.size = tb->ident_max_limit;
    	icon->data.indirected_text.validation = "R5,3";
    }
    else
    {
    	icon->flags = wimp_ICON_TEXT + wimp_ICON_SPRITE + wimp_ICON_INDIRECTED +
            wimp_ICON_HCENTRED + wimp_ICON_VCENTRED;

    	icon->data.indirected_text_and_sprite.text = "";
    	icon->data.indirected_text_and_sprite.size = 1;
    	icon->data.indirected_text_and_sprite.validation = ident_buffer_ptr(tb);
//    	strcpy(icon->data.indirected_text_and_sprite.validation,
//    	    tb->flags & toolaction_NO_PRESSED_SPRITE ? SPRITE_VALID_HEADER_SMALL : SPRITE_VALID_HEADER);
    }

    if (tb->flags & toolaction_SELECT_WHEN_OVER)
        icon->flags |= (wimp_BUTTON_MENU_ICON << wimp_ICON_BUTTON_TYPE_SHIFT) | (1 << wimp_ICON_ESG_SHIFT);
    else if (tb->flags & toolaction_AUTO_REPEAT)
        icon->flags |= (wimp_BUTTON_REPEAT << wimp_ICON_BUTTON_TYPE_SHIFT);
    else
        icon->flags |= (wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT);

    // not sure if we need this or not
//    if (tb->flags & gadget_FADED)
//    	icon->flags |= wimp_ICON_SHADED;

    // here setup things that will affect the appearance (for when plotted)
    if (tobj->ident_off)
        string_copy(ident_off_ptr(tb), tobj->ident_off);
    if (tobj->ident_on)
    	string_copy(ident_on_ptr(tb), tobj->ident_on);
    if (version >= 1 && tobj->ident_fade)
    	string_copy(ident_fade_ptr(tb), tobj->ident_fade);

    set_ident(tb);
}

// -------------------------------------------------------------------------------

static os_error *toolaction_add(gadget_object *ghdr, wimp_w w, wimp_i **icons_out, tb_handle *internal_handle_out)
{
    static wimp_i return_icons[2] = { 0, -1 };

    toolaction_object *tobj;
    tb_handle tb;
    os_error *e = NULL;

    int version = (ghdr->class_no >> 16) > gadget_SIZEOF_OBJECT(TOOL_ACTION_OBJECT_SIZE_0) ? 1 : 0;

    tobj = (toolaction_object *)ghdr->gadget;

    /// allocate memory for gadget and strings
    {
        int ident_off_limit, ident_on_limit, ident_fade_limit;
     	int size, max;

        ident_off_limit = tobj->ident_off ? string_length(tobj->ident_off) + 1 : 1;
        ident_on_limit = tobj->ident_on ? string_length(tobj->ident_on) + 1 : 1;

        if (ident_off_limit < tobj->ident_off_limit)
            ident_off_limit = tobj->ident_off_limit;
        if (ident_on_limit < tobj->ident_on_limit)
            ident_on_limit = tobj->ident_on_limit;

    	size = sizeof(struct tb_context) + ident_off_limit + ident_on_limit +
    	    sizeof(SPRITE_VALID_HEADER)-1 + 3;	// 3 is for nulls

        max = MAX(ident_off_limit, ident_on_limit);
        if (version == 0)
        {
            ident_fade_limit = 1;
        }
        else
        {
            ident_fade_limit = tobj->ident_fade ? string_length(tobj->ident_fade) + 1 : 1;
            if (ident_fade_limit < tobj->ident_fade_limit)
                ident_fade_limit = tobj->ident_fade_limit;
            if (max < ident_fade_limit)
                max = ident_fade_limit;
        }

        size += ident_fade_limit;
        size += max;
    	xwindowsupportexternal_alloc(0, size, (void **)&tb);
    	if (!tb)
    	    e = (os_error *)make_error(error_TOOL_ACTION_OUT_OF_MEMORY, 1, size);
        else
        {
            memset(tb, 0, size);

            tb->ident_off_limit = ident_off_limit;
            tb->ident_on_limit = ident_on_limit;
            tb->ident_fade_limit = ident_fade_limit;
            tb->ident_max_limit = max;
        }
    }

    if (!e)
    {
    	wimp_icon_create icreate;

    	// fill in easy values
    	tb->select_action_no = tobj->action_no ? tobj->action_no : action_TOOL_ACTION_SELECTED;
    	tb->adjust_action_no = version == 0 ? tb->select_action_no :
    	    tobj->adjust_action_no ? tobj->adjust_action_no :
    	    action_TOOL_ACTION_SELECTED;
    	tb->cmp = ghdr->cmp;
    	tb->w = w;

    	icreate.w = w;
    	setup_icon(tb, &icreate.icon, ghdr, version);

    	// actually create the icon
    	xwindowsupportexternal_create_icon(0, &icreate, &tb->i);
    	if (tb->i == -1)
            e = (os_error *)make_error(error_TOOL_ACTION_CANT_CREATE_ICON, 0);
    }

    // create attached object if any
    if (!e && tobj->click_show_name && tobj->click_show_name[0])
    {
    	xwindowsupportexternal_create_object(0, (toolbox_id)tobj->click_show_name, &tb->select_click_show_obj);
    	if (!tb->select_click_show_obj)
    	    e = (os_error *)make_error(error_TOOL_ACTION_CANT_CREATE_OBJECT, 1, tobj->click_show_name);
    }

    if (!e && version > 0 && tobj->adjust_click_show_name && tobj->adjust_click_show_name[0])
    {
    	xwindowsupportexternal_create_object(0, (toolbox_id)tobj->adjust_click_show_name, &tb->adjust_click_show_obj);
    	if (!tb->adjust_click_show_obj)
    	    e = (os_error *)make_error(error_TOOL_ACTION_CANT_CREATE_OBJECT, 1, tobj->adjust_click_show_name);
    }

    if (!e)
    {
    	// fill in icon number created to return block
    	return_icons[0] = tb->i;

    	// return handle and icon list
    	*internal_handle_out = tb;
    	*icons_out = return_icons;
    }
    else
    {
        if (tb->select_click_show_obj)
    	    xtoolbox_delete_object(0, tb->select_click_show_obj);
        if (tb->adjust_click_show_obj)
    	    xtoolbox_delete_object(0, tb->adjust_click_show_obj);
        xwindowsupportexternal_free(0, tb);
    }

    return e;
}

// -------------------------------------------------------------------------------

typedef struct
{
    int size;
    int ref_no;
    bits action_no;
    bits flags;

    toolaction_action_selected data;
} tbaction_selected;

static os_error *toolaction_mclick(tb_handle tb, wimp_pointer *click, toolbox_o obj, int *claim_out)
{
    os_error *e = NULL;
    toolbox_o click_show_obj;

    // ignore if menu or button is faded
    if ((click->buttons & wimp_CLICK_MENU) || (tb->flags & gadget_FADED))
    {
        *claim_out = FALSE;
        return NULL;
    }

    *claim_out = TRUE;

    // auto select if we need to
    if (tb->flags & toolaction_AUTO_TOGGLE)
    {
        tb->flags ^= toolaction_ON;

        e = set_ident_and_update(tb);
    }

    // raise event if requested
    if (tb->flags & toolaction_GENERATE_SELECTED_EVENT)
    {
    	tbaction_selected action;
    	action.size = sizeof(action);
        action.ref_no = 0;
    	action.action_no = click->buttons & wimp_CLICK_ADJUST ? tb->adjust_action_no : tb->select_action_no;
        action.flags = click->buttons;

    	action.data.on = tb->flags & toolaction_ON ? 1 : 0;

    	e = xtoolbox_raise_toolbox_event(0, obj, tb->cmp, (toolbox_action *)&action);
    }

    // show object if attached
    click_show_obj = click->buttons & wimp_CLICK_ADJUST ? tb->adjust_click_show_obj : tb->select_click_show_obj;
    if (!e && click_show_obj)
    {
        toolbox_position_tag tag;
        toolbox_position position, *pos;

        if (tb->flags & toolaction_SHOW_AS_POP_UP)
        {
            wimp_icon_state icon;
            wimp_window_state state;

            icon.w = click->w;
    	    icon.i = click->i;
            xwimp_get_icon_state(&icon);

            state.w = click->w;
            xwimp_get_window_state(&state);

            position.top_left.x = icon.icon.extent.x1 + state.visible.x0 - state.xscroll;
            position.top_left.y = icon.icon.extent.y1 + state.visible.y1 - state.yscroll;

            tag = toolbox_POSITION_TOP_LEFT;
            pos = &position;
        }
        else
        {
            tag = toolbox_POSITION_DEFAULT;
            pos = NULL;
        }

    	e = xtoolbox_show_object(tb->flags & toolaction_SHOW_TRANSIENT ? toolbox_SHOW_AS_MENU : 0,
    	    click_show_obj,
    	    tag, pos, obj, tb->cmp);
    }

    return e;
}

// -------------------------------------------------------------------------------

static os_error *toolaction_method(tb_handle tb, os_register_block *r)
{
    os_error *e = NULL;

    switch (r->registers[2])
    {
        case ToolAction_SetIdent:
        {
            char *s = NULL;
            int l;
            switch (r->registers[0] & toolaction_SET_IDENT_WHICH)
            {
                case toolaction_SET_IDENT_OFF:
    	    	    s = ident_off_ptr(tb);
    	    	    l = tb->ident_off_limit;
    	    	    break;

                case toolaction_SET_IDENT_ON:
    	    	    s = ident_on_ptr(tb);
    	    	    l = tb->ident_on_limit;
    	            break;

                case toolaction_SET_IDENT_FADE:
    	    	    s = ident_fade_ptr(tb);
    	    	    l = tb->ident_fade_limit;
    	            break;
            }
    	    if (s)
    	    {
    	        string_copy_chk(s, (char *)r->registers[4], l);
                e = set_ident_and_update(tb);
            }
            break;
        }

        case ToolAction_GetIdent:
        {
            char *s = NULL;
            switch (r->registers[0] & toolaction_SET_IDENT_WHICH)
            {
                case toolaction_SET_IDENT_OFF:
    	    	    s = ident_off_ptr(tb);
    	    	    break;

                case toolaction_SET_IDENT_ON:
    	    	    s = ident_on_ptr(tb);
    	            break;

                case toolaction_SET_IDENT_FADE:
    	    	    s = ident_fade_ptr(tb);
    	            break;
            }
            if (s) string_to_buffer((char *)r->registers[4], s, (int *)&r->registers[5]);
            break;
        }

        case ToolAction_SetAction:
            tb->select_action_no = r->registers[4];
            tb->adjust_action_no = r->registers[5];
            break;

        case ToolAction_GetAction:
            r->registers[0] = tb->select_action_no;
            r->registers[1] = tb->adjust_action_no;
            break;

        case ToolAction_SetClickShow:
            tb->select_click_show_obj = (toolbox_o) r->registers[4];
            tb->adjust_click_show_obj = (toolbox_o) r->registers[5];
            break;

        case ToolAction_GetClickShow:
            r->registers[0] = (int) tb->select_click_show_obj;
            r->registers[1] = (int) tb->adjust_click_show_obj;
            break;

        case ToolAction_SetState:
            if (r->registers[4])
            	tb->flags |= toolaction_ON;
    	    else
            	tb->flags &= ~toolaction_ON;

            e = set_ident_and_update(tb);
            break;

        case ToolAction_GetState:
            r->registers[0] = tb->flags & toolaction_ON ? 1 : 0;
            break;

        case ToolAction_SetPressed:
	    xwimp_set_icon_state(tb->w, tb->i, wimp_ICON_SELECTED, r->registers[4] ? wimp_ICON_SELECTED : 0);
	    break;

        case ToolAction_GetPressed:
	{
            wimp_icon_state icon;

            icon.w = tb->w;
    	    icon.i = tb->i;
            xwimp_get_icon_state(&icon);

            r->registers[0] = icon.icon.flags & wimp_ICON_SELECTED ? 1 : 0;
            break;
	}
    }
   return e;
}

// -------------------------------------------------------------------------------

static os_error *toolaction_fade(tb_handle tb, bool fade)
{
    os_error *e;
    int flag, mask;

    flag = 0;
    if (fade)
    {
        tb->flags |= gadget_FADED;
        flag = wimp_ICON_SHADED;
    }
    else
    {
        tb->flags &= ~gadget_FADED;
    }

    mask = wimp_ICON_SHADED;
    if (tb->flags & toolaction_HAS_FADE_SPRITE)
    {
        set_ident(tb);
        mask |= wimp_ICON_SELECTED;
        flag &= ~wimp_ICON_SHADED;
    }

    e = xwimp_set_icon_state(tb->w, tb->i, flag, mask);

    return e;
}

// -------------------------------------------------------------------------------

static os_error *toolaction_remove(tb_handle tb, toolbox_delete_flags flags)
{
    if (tb)
    {
        if ((flags & toolbox_DELETE_NO_RECURSE) == 0)
        {
            if (tb->select_click_show_obj)
    	        xtoolbox_delete_object(0, tb->select_click_show_obj);
            if (tb->adjust_click_show_obj)
    	        xtoolbox_delete_object(0, tb->adjust_click_show_obj);
    	}
        xwimp_delete_icon(tb->w, tb->i);
        xwindowsupportexternal_free(0, tb);
    }
    return NULL;
}

// -------------------------------------------------------------------------------
/*
os_error *toolaction_plot(gadget_object *ghdr)
{
    struct tb_context tb;
    wimp_icon icon;

    memset(&tb, 0, sizeof(tb));
    setup_icon(&tb, &icon, ghdr);

    if (ghdr->flags & gadget_FADED)
        icon.flags |= wimp_ICON_SHADED;

   return xwimp_plot_icon(&icon);
}
 */

// -------------------------------------------------------------------------------

os_error *toolaction_swi_handler(os_register_block *r)
{
    os_error *e = NULL;

    DEBUG debug_output("t", "ToolAction %d\n", r->registers[2]);

    switch (r->registers[2])
    {
    	case windowsupportexternal_HANDLER_ADD:
            e = toolaction_add((gadget_object *)r->registers[3], (wimp_w)r->registers[5], (wimp_i **)&r->registers[1], (tb_handle *)&r->registers[0]);
            break;

        case windowsupportexternal_HANDLER_CLICK:
            e = toolaction_mclick((tb_handle)r->registers[3], (wimp_pointer *) r->registers[6], (toolbox_o) r->registers[4], &r->registers[1]);
            break;

        case windowsupportexternal_HANDLER_METHOD:
            e = toolaction_method((tb_handle)r->registers[3], (os_register_block *)(r->registers[4]));
            break;

        case windowsupportexternal_HANDLER_FADE:
            e = toolaction_fade((tb_handle)r->registers[3], r->registers[4]);
            break;

    	case windowsupportexternal_HANDLER_REMOVE:
    	    e = toolaction_remove((tb_handle)r->registers[3], r->registers[0]);
    	    break;

/*
              case windowsupportexternal_HANDLER_PLOT:
                e = toolaction_plot((gadget_object *) r->registers[3]);
                break;
              case windowsupportexternal_HANDLER_MOVE:
              	glib_move_gadget(r->registers[1], (toolbox_o)r->registers[6], *(toolbox_c *)r->registers[3], (os_box *)r->registers[5]);
              	break;
 */
    }
    return e;
}

// -------------------------------------------------------------------------------

#define gadgettype_TOOL_ACTION_OLD  (class_TOOL_ACTION | (gadget_SIZEOF_OBJECT(TOOL_ACTION_OBJECT_SIZE_0) << 16))
#define gadgettype_TOOL_ACTION      (class_TOOL_ACTION | (gadget_SIZEOF_OBJECT(sizeof(toolaction_object)/4) << 16))

os_error *toolaction_register(int swi)
{
    static gadget_extension tb_ext[3] =
    {
      {
    	gadgettype_TOOL_ACTION_OLD,

        gadget_FADED | gadget_AT_BACK |
          toolaction_GENERATE_SELECTED_EVENT | toolaction_IS_TEXT | toolaction_ON |
          toolaction_AUTO_TOGGLE | toolaction_NO_PRESSED_SPRITE | toolaction_AUTO_REPEAT |
          toolaction_SHOW_TRANSIENT | toolaction_SHOW_AS_POP_UP,

        (gadget_PRIVATE_HANDLER << gadget_FEATURE_ADD_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_REMOVE_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_CLICK_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_METHOD_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_FADE_SHIFT) |
        (gadget_DEFAULT_HANDLER << gadget_FEATURE_PLOT_SHIFT) |
        (gadget_DEFAULT_HANDLER << gadget_FEATURE_MOVE_SHIFT)
      },
      {
    	gadgettype_TOOL_ACTION,

        gadget_FADED | gadget_AT_BACK |
          toolaction_GENERATE_SELECTED_EVENT | toolaction_IS_TEXT | toolaction_ON |
          toolaction_AUTO_TOGGLE | toolaction_NO_PRESSED_SPRITE | toolaction_AUTO_REPEAT |
          toolaction_SHOW_TRANSIENT | toolaction_SHOW_AS_POP_UP | toolaction_HAS_FADE_SPRITE | toolaction_SELECT_WHEN_OVER,

        (gadget_PRIVATE_HANDLER << gadget_FEATURE_ADD_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_REMOVE_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_CLICK_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_METHOD_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_FADE_SHIFT) |
        (gadget_DEFAULT_HANDLER << gadget_FEATURE_PLOT_SHIFT) |
        (gadget_DEFAULT_HANDLER << gadget_FEATURE_MOVE_SHIFT)
      },
      { -1 }
    };

    return xwindow_register_external(0, (gadget_extension_list *)tb_ext, swi);
}

// -------------------------------------------------------------------------------

os_error *toolaction_de_register(int swi)
{
    os_error *e = xwindow_deregister_external(0, gadgettype_TOOL_ACTION_OLD, swi);
    if (!e) e = xwindow_deregister_external(0, gadgettype_TOOL_ACTION, swi);
    return e;
}

// -------------------------------------------------------------------------------

// eof toolaction.c
@


4.7
log
@Makefile recreated to use TboxMake
Some component reorganisation to make it fit the pattern of the other Toolbox modules.
string32.c - use the (identical) copy in Toolbox/Common/string32.
resource.c - swap to corresponding functions in Toolbox/Common/objmodule.
msgs.c - swap to corresponding functions in Toolbox/Common/messages.

Additional changes
main.c:
 Always assume CMHG 5.16 or later is in use.
 Don't bother calling TinySupport_Share and TinySupport_Die, they just inc/decrement a counter.
toolaction.c:
 Use common debug functionality, refactor single (not very exciting) debug call.
utils.c:
 Excess header includes removed.

In fact, this module only uses header from OSLib, it doesn't link with it (instead using a handful of _swix macros in "tbem.h"). These could in future be changed to just use the tboxlibint functions with a (lot of) careful checking.

Version 0.35. Tagged as 'ToolAction-0_35'
@
text
@d341 1
a341 1
    	action.size = 16;
@


4.6
log
@Unused reference to tlink removed
Retagged as ToolAction-0_34.
@
text
@d29 1
a33 1
#include "toolbox.h"
d35 2
a36 1
#include "toolaction.h"
a39 2
#include "msgs.h"

d234 1
a234 1
    	    e = make_err(error_TOOL_ACTION_OUT_OF_MEMORY, NULL, size);
d264 1
a264 1
            e = make_err(error_TOOL_ACTION_CANT_CREATE_ICON, NULL);
d272 1
a272 1
    	    e = make_err(error_TOOL_ACTION_CANT_CREATE_OBJECT, NULL, tobj->click_show_name);
d279 1
a279 1
    	    e = make_err(error_TOOL_ACTION_CANT_CREATE_OBJECT, NULL, tobj->adjust_click_show_name);
d573 1
a573 3
#ifndef NDEBUG
    tracker_writef(debugw, "ToolAction %d\n", r->registers[2]);
#endif
@


4.5
log
@Fix dubious struct initialisation
Detail:
  c/toolact - Remove use of gadget_EXTENSION_LIST() macro in toolaction_register(). We want just three gadget_extension structs, not a [3][3] array.
  h/gadget - Remove now-unused gadget_EXTENSION_LIST and gadget_SIZEOF_EXTENSION_LIST macros
Admin:
  Tested on Raspberry Pi


Version 0.34. Tagged as 'ToolAction-0_34'
@
text
@d28 1
a28 1
#include "string32.h"   /* supplied by the tlink app with RAM module */
@


4.4
log
@  Fixed problem with building using new cc.
Detail:
  Problem with casting ints to bools fixed in c.toolact.
Admin:
  Builds.

Version 0.28. Tagged as 'ToolAction-0_28'
@
text
@d619 1
a619 1
    static gadget_EXTENSION_LIST(3) tb_ext[3] =
@


4.3
log
@  Explicitly include stdbool.h because this component uses bool
Admin:
  Might help it build.

Version 0.27. Tagged as 'ToolAction-0_27'
@
text
@d316 1
a316 1
static os_error *toolaction_mclick(tb_handle tb, wimp_pointer *click, toolbox_o obj, bool *claim_out)
@


4.2
log
@Spinner branch merged
@
text
@d24 1
@


4.1
log
@Initial revision
@
text
@d164 3
a166 1
    if (tb->flags & toolaction_AUTO_REPEAT)
d480 17
a496 1
   }
d642 1
a642 1
          toolaction_SHOW_TRANSIENT | toolaction_SHOW_AS_POP_UP | toolaction_HAS_FADE_SPRITE,
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Release 0.14 - Adds Set/GetPressed method. Assumes new CMHG.
@
text
@d478 1
a478 17

        case ToolAction_SetPressed:
	    xwimp_set_icon_state(tb->w, tb->i, wimp_ICON_SELECTED, r->registers[4] ? wimp_ICON_SELECTED : 0);
	    break;

        case ToolAction_GetPressed:
	{
            wimp_icon_state icon;

            icon.w = tb->w;
    	    icon.i = tb->i;
            xwimp_get_icon_state(&icon);

            r->registers[0] = icon.icon.flags & wimp_ICON_SELECTED ? 1 : 0;
            break;
	}
    }
@


4.1.7.3
log
@Added select when over code
@
text
@d164 1
a164 3
    if (tb->flags & toolaction_SELECT_WHEN_OVER)
        icon->flags |= (wimp_BUTTON_MENU_ICON << wimp_ICON_BUTTON_TYPE_SHIFT) | (1 << wimp_ICON_ESG_SHIFT);
    else if (tb->flags & toolaction_AUTO_REPEAT)
d640 1
a640 1
          toolaction_SHOW_TRANSIENT | toolaction_SHOW_AS_POP_UP | toolaction_HAS_FADE_SPRITE | toolaction_SELECT_WHEN_OVER,
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
