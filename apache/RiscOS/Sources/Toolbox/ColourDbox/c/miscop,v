head	4.3;
access;
symbols
	ColourDbox-0_22:4.3
	ColourDbox-0_21:4.2
	ColourDbox-0_20:4.2
	RO_5_07:4.1
	ColourDbox-0_19:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	Ursula:4.1.0.6
	Ursula_bp:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	ColourDbox-0_18:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_ColourDbox_0_16:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2017.11.29.20.08.34;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	3OMihZ27x48PcYgA;

4.2
date	2015.08.18.21.10.53;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	3QChTTUzrDxgmNxy;

4.1
date	96.11.05.09.21.40;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.21.40;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.38.12;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.10.28;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.34.02;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Fix for ColourDbox_GetColour abort when ColourDbox object isn't open
Copy into the provided colour_block pointer, rather than the address of the pointer.
Also, make the calculation of required size a bit more readable by replacing multiple occurences with a variable.
Fixes ticket #443.

Version 0.22. Tagged as 'ColourDbox-0_22'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   miscop.c
 * Purpose: miscellanaous operations on a ColourDbox Object
 * Author:  TGR
 * History: 4-Mar-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "string32.h"

#include "objects/toolbox.h"
#include "objects/colourdbox.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

_kernel_oserror *colourdbox_get_window_id       (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourdbox_get_dialogue_handle (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourdbox_set_colour          (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourdbox_get_colour          (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourdbox_set_colour_model    (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourdbox_get_colour_model    (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourdbox_set_none_available  (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourdbox_get_none_available  (_kernel_swi_regs *r, TaskDescriptor *t);

/* removed owing to bug in ColourPicker
_kernel_oserror *colourdbox_set_help_message    (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourdbox_get_help_message    (_kernel_swi_regs *r, TaskDescriptor *t);
*/

#define MAX_MISCOP_METHODS 8

static _kernel_oserror *(*colourdbox_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   colourdbox_get_window_id,
   colourdbox_get_dialogue_handle,
   colourdbox_set_colour,
   colourdbox_get_colour,
   colourdbox_set_colour_model,
   colourdbox_get_colour_model,
   colourdbox_set_none_available,
   colourdbox_get_none_available
/* removed ...
   colourdbox_set_help_message,
   colourdbox_get_help_message
*/
};

extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

  _kernel_swi_regs   *user_regs = (_kernel_swi_regs *) r->r[4];
   int                 method    = user_regs->r[2];

   DEBUG debug_output ("y","ColourDbox: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(ColourDbox_NoSuchMiscOpMethod,1,method);
   } else
      return (*colourdbox_miscop_methods[method])(r,t);

   IGNORE(t);

   return NULL;
}

_kernel_oserror *colourdbox_get_window_id       (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
   ColourDboxInternal   *internal         = (ColourDboxInternal *) r->r[2];

   DEBUG debug_output ("y","ColourDbox: WIMP handle is 0x%x\n",internal->window_handle);

   user_regs->r[0] = (int) internal->window_handle;

   IGNORE(t);

   return NULL;
}

_kernel_oserror *colourdbox_get_dialogue_handle (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
   ColourDboxInternal   *internal         = (ColourDboxInternal *) r->r[2];

   DEBUG debug_output ("y","ColourDbox: dialogue handle is 0x%x\n",internal->dialogue_handle);

   user_regs->r[0] = (int) internal->dialogue_handle;

   IGNORE(t);

   return NULL;
}


/* The following routine sets the default colour and, if displayed, the current colour **********/

_kernel_oserror *colourdbox_set_colour          (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror           *e;
   _kernel_swi_regs           regs,
                             *user_regs            = (_kernel_swi_regs *) r->r[4];
   ColourDboxInternal        *internal             = (ColourDboxInternal *) r->r[2];
   ColourDescriptorHeader    *colour_block         = (ColourDescriptorHeader *) user_regs->r[3];
   int                        extension_size       = 0;
   ColourPickerExtended      *colourpicker_extd;
   BOOL                       select_none          = user_regs->r[0] & 1,
                              clear_none           = user_regs->r[0] & 2;

   if (colour_block) extension_size = colour_block->extension_size;

   if ((colourpicker_extd = mem_alloc(sizeof (ColourPickerHeader)+extension_size)) == NULL)
      return make_error (ColourDbox_AllocFailed, 0);

   DEBUG debug_output ("m","ColD: colour block passed in, extension size 0x%x, colour_block @@ 0x%x\n",extension_size, colour_block);

   if (select_none) {
      internal->flags               |=  ColourDboxInternal_SelectNoneButton;
      colourpicker_extd->hdr.flags  |=  ColourPickerFlags_SelectNoneButton;
   } else if (clear_none) {
      internal->flags               &= ~ColourDboxInternal_SelectNoneButton;
      colourpicker_extd->hdr.flags  &= ~ColourPickerFlags_SelectNoneButton;
   }

   if (colour_block) {
      DEBUG debug_dump (colour_block, MAX (8, MIN(extension_size+8, 1024)));

      if (internal->colour_block_extd) mem_freek (internal->colour_block_extd);

      if (extension_size>=0) { /* copy default internal colour & model data */
         if ((internal->colour_block_extd = mem_alloc (sizeof (ColourDescriptorHeader)+extension_size)) == NULL) {
            e = make_error (ColourDbox_AllocFailed, 0);
            goto clearup1;
         }
         memcpy (internal->colour_block_extd, colour_block, sizeof (ColourDescriptorHeader)+extension_size);
      } else {
         internal->colour_block_extd = NULL;
      }
   }
   if (internal->flags & ColourDboxInternal_IsShowing) {

      DEBUG debug_output ("m","ColD: changing ColourPicker's ColourDescriptor @@ 0x%x\n", colourpicker_extd->hdr.descriptor_hdr);

      DEBUG debug_output ("m","ColD: sanity test, %d\n",((int) &(colourpicker_extd->hdr.descriptor_hdr) - (int) colourpicker_extd));

      if (colour_block && internal->colour_block_extd) {
         memcpy (&(colourpicker_extd->hdr.descriptor_hdr), internal->colour_block_extd, sizeof(ColourDescriptorHeader)+extension_size);
      }
      DEBUG debug_dump (colourpicker_extd, 256);

      regs.r[0] = ((select_none|clear_none) ? ColourPicker_Update_SelectNoneButton : 0)
                | ((extension_size)         ? ColourPicker_Update_ModelAndSetting  : 0)
                | ((colour_block)           ? ColourPicker_Update_RGBSetting       : 0);

      regs.r[1] = internal->dialogue_handle;
      regs.r[2] = (int) colourpicker_extd;

      if ((e = _kernel_swi (ColourPicker_UpdateDialogue, &regs, &regs)) != NULL) {
         if (e->errnum == 0x20d02) {
            e = dialogue_hidden (internal);
            goto clearup1;
         } else {
            goto clearup1;
         }
      }
   }
   IGNORE(t);

   mem_freek (colourpicker_extd);

   return NULL;
   clearup1:
      mem_freek (colourpicker_extd);
      return e;
}

_kernel_oserror *colourdbox_get_colour          (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror           *e;
   _kernel_swi_regs           regs,
                             *user_regs            = (_kernel_swi_regs *) r->r[4];
   ColourDboxInternal        *internal             = (ColourDboxInternal *) r->r[2];
   ColourDescriptorHeader    *colour_block         = (ColourDescriptorHeader *) user_regs->r[3];
   ColourPickerHeader        *colourpicker_block;
   ColourPickerExtended      *colourpicker_extd;
   int                        size                 = user_regs->r[4];
   int                        reqdsize;

   DEBUG debug_output ("m","ColD: getting colour\n");

   if (internal->flags & ColourDboxInternal_IsShowing) {

      regs.r[0] = 0;
      regs.r[1] = internal->dialogue_handle;
      regs.r[2] = 0;

      DEBUG debug_output ("m","ColD: first call to ColourPicker_ReadDialogue\n");

      if ((e = _kernel_swi (ColourPicker_ReadDialogue, &regs, &regs)) != NULL) {
         if (e->errnum == 0x20d02) {
            e = dialogue_hidden (internal);
            goto not_showing;
         } else {
            return e;
         }
      }
      user_regs->r[4] = regs.r[2] + sizeof (ColourDescriptorHeader) - sizeof (ColourPickerHeader);

      /*     +------------+---------------+
       *     |            | flags, title, |   To find out what the top-right bit of
       *     | Colour     | coordinates,  |  this diagram's length is, take the size
       *     |            | reserved      |  of ColourPickerHeader and subtract the
       *     |            |       fields. |  Size of ColourDescriptorHeader
       *     |            |               |
       *     |   Picker   +---------------+
       *     |            |               |
       *     |            | Colour        |
       *     |            |   Descriptor  |
       *     |     Header |        Header |
       *     |            |               |
       *     +------------+---------------+
       */

      DEBUG debug_output ("m","ColD: sizes: asked for 0x%x, full block 0x%x, picker header 0x%x, descriptor 0x%x\n",regs.r[2]);

      if (size && (size < (regs.r[2] + sizeof (ColourDescriptorHeader) - sizeof (ColourPickerHeader))))
         return make_error (ColourDbox_ShortBuffer, 0);

      if ((colourpicker_block = mem_alloc (regs.r[2])) == NULL)
         return make_error (ColourDbox_AllocFailed, 0);

      regs.r[1] = internal->dialogue_handle;
      regs.r[2] = (int) colourpicker_block;

      DEBUG debug_output ("y","ColD: second call to ColourPicker\n");

      if ((e = _kernel_swi (ColourPicker_ReadDialogue, &regs, &regs)) != NULL)
         goto clearup1;

      DEBUG debug_output ("y","ColourDbox: flags = 0x%x\n",colourpicker_block->flags);

      user_regs->r[0] = (colourpicker_block->flags & ColourPickerFlags_SelectNoneButton) ? 1 : 0;

      if (!size || !colour_block) {
         DEBUG debug_output ("m","ColD: no size given, returning\n");
         mem_freek (colourpicker_block);
         return NULL;
      }
      DEBUG debug_dump (colourpicker_block, sizeof colourpicker_block);

      colourpicker_extd = (ColourPickerExtended *) colourpicker_block;

      memcpy (colour_block, &colourpicker_extd->hdr.descriptor_hdr, colourpicker_block->descriptor_hdr.extension_size+sizeof(ColourDescriptorHeader));

      DEBUG debug_dump (colour_block, colourpicker_block->descriptor_hdr.extension_size+sizeof(ColourDescriptorHeader));

      mem_freek (colourpicker_block);
   } else { not_showing:
      DEBUG debug_output ("y","ColD: not showing\n");
      user_regs->r[0] = (internal->flags & ColourDboxInternal_SelectNoneButton) ? 1 : 0;
      reqdsize = internal->colour_block_extd->hdr.extension_size + sizeof(ColourDescriptorHeader);
      if (!size || !colour_block) {
         DEBUG debug_output ("y","ColDbox: request for size");
         user_regs->r[4] = reqdsize;
      } else {
         if (size >= reqdsize) {
            memcpy (colour_block, internal->colour_block_extd, reqdsize);
         } else {
            return make_error (ColourDbox_ShortBuffer, 0);
         }
      }
   }
   DEBUG debug_output ("m","ColD: ended GetColour\n");

   IGNORE(t);

   return NULL;

   clearup1:
      if (colourpicker_block) mem_freek (colourpicker_block);
      return e;
}

_kernel_oserror *colourdbox_set_colour_model    (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror           *e;
   _kernel_swi_regs           regs,
                             *user_regs            = (_kernel_swi_regs *) r->r[4];
   ColourDboxInternal        *internal             = (ColourDboxInternal *) r->r[2];
   ColourModelBlock          *colourmodel_blk      = (ColourModelBlock *) user_regs->r[3];
   ColourPickerExtended       colourpicker_extd;

   /* check that we can deal with this colour model */

   if (colourmodel_blk->extension_size >= 0 && colourmodel_blk->ext.model >= 3) return NULL;

   if (!internal->colour_model_block) /* ***GETRID*** Won't work when new, larger colour models used */
      if ((internal->colour_model_block = mem_alloc (sizeof(ColourModelBlock))) == NULL)
         return make_error (ColourDbox_AllocFailed, 0);

   memcpy (internal->colour_model_block, colourmodel_blk, sizeof (ColourModelBlock));

   if (internal->flags & ColourDboxInternal_IsShowing) {

      memcpy (&colourpicker_extd.hdr.descriptor_hdr.extension_size, colourmodel_blk, sizeof(ColourModelBlock));

      regs.r[0] = ColourPicker_Update_ModelAndSetting;
      regs.r[1] = internal->dialogue_handle;
      regs.r[2] = (int) &colourpicker_extd;

      if ((e = _kernel_swi (ColourPicker_UpdateDialogue, &regs, &regs)) != NULL) {
         if (e->errnum == 0x20d02) {
            return dialogue_hidden (internal);
         } else {
            return e;
         }
      }
   }
   IGNORE(t);

   return NULL;
}

_kernel_oserror *colourdbox_get_colour_model    (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror           *e;
   _kernel_swi_regs           regs,
                             *user_regs            = (_kernel_swi_regs *) r->r[4];
   ColourDboxInternal        *internal             = (ColourDboxInternal *) r->r[2];
   ColourModelBlock          *colourmodel_blk      = (ColourModelBlock *) user_regs->r[3];
   ColourPickerExtended      *colourpicker_extd;
   int                        size                 = user_regs->r[4];


   if (internal->flags & ColourDboxInternal_IsShowing) {

      regs.r[0] = 0;
      regs.r[1] = internal->dialogue_handle;
      regs.r[2] = 0;

      if ((e = _kernel_swi (ColourPicker_ReadDialogue, &regs, &regs)) != NULL) {
         if (e->errnum == 0x20d02) {
            dialogue_hidden (internal);
            goto not_showing;
         } else {
            return e;
         }
      }
      user_regs->r[4] = regs.r[2] + sizeof (int) - sizeof (ColourPickerHeader);

      if (size && (size < regs.r[2] + sizeof (int) - sizeof (ColourPickerHeader)))
         return make_error (ColourDbox_ShortBuffer, 0);

      if ((colourpicker_extd = mem_alloc (regs.r[2])) == NULL)
         return make_error (ColourDbox_AllocFailed, 0);

      regs.r[1] = internal->dialogue_handle;
      regs.r[2] = (int) colourpicker_extd;

      if ((e = _kernel_swi (ColourPicker_ReadDialogue, &regs, &regs)) != NULL)
         goto clearup1;

      if (!size || !colourmodel_blk) {
         DEBUG debug_output ("m","ColD: no size given, returning\n");
         mem_freek (colourpicker_extd);
         return NULL;
      }
      memcpy (colourmodel_blk, &colourpicker_extd->hdr.descriptor_hdr.extension_size, sizeof(ColourModelBlock) + colourpicker_extd->hdr.descriptor_hdr.extension_size);

      mem_freek (colourpicker_extd);
   } else { not_showing:
      if (!colourmodel_blk)
      {
         user_regs->r[4] = sizeof (ColourModelBlock);
         return NULL;
      }
      if (size < sizeof (ColourModelBlock))
         return make_error (ColourDbox_ShortBuffer, 0);
      if (internal->colour_model_block) { /* ***GETRID*** Won't work with larger colourmodels - needs stripping out */
         memcpy (colourmodel_blk, internal->colour_model_block, sizeof (ColourModelBlock));
         user_regs->r[4] = sizeof (ColourModelBlock);
      } else {
         user_regs->r[4] = 0;
         /*internal->colour_model_block->extension_size = 0;*/
      }
   }
   IGNORE(t);

   return NULL;

   clearup1:
      mem_freek (colourpicker_extd);
      return e;
}

_kernel_oserror *colourdbox_set_none_available  (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror           *e;
   _kernel_swi_regs          *user_regs            = (_kernel_swi_regs *) r->r[4],
                              regs;
   ColourDboxInternal        *internal             = (ColourDboxInternal *) r->r[2];
   BOOL                       none_available       = user_regs->r[3];
   int                        colourpicker_flags;

   DEBUG debug_output ("m","ColourDbox: none %savaliable\n",none_available?"":"not ");

   if (none_available) {
      internal->flags |=  ColourDboxInternal_IncludeNoneButton;
   } else {
      internal->flags &= ~ColourDboxInternal_IncludeNoneButton;
   }
   if (~internal->flags & ColourDboxInternal_IsShowing)
      return NULL;

   colourpicker_flags = (none_available) ? ColourPickerFlags_IncludeNoneButton : 0;

   regs.r[0]          = ColourPicker_Update_IncludeNoneButton;
   regs.r[1]          = internal->dialogue_handle;
   regs.r[2]          = (int) &colourpicker_flags;

   if ((e = _kernel_swi (ColourPicker_UpdateDialogue, &regs, &regs)) != NULL) {
      if (e->errnum == 0x20d02) {
         e = dialogue_hidden (internal);
      } else {
         return e;
      }
   }
   IGNORE(t);


   return e;
}

_kernel_oserror *colourdbox_get_none_available  (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs          *user_regs            = (_kernel_swi_regs *) r->r[4];
   ColourDboxInternal        *internal             = (ColourDboxInternal *) r->r[2];

   DEBUG debug_output ("m","ColourDbox: none %savaliable\n",(internal->flags & ColourDboxInternal_IncludeNoneButton)?"":"not ");

   user_regs->r[0] = (internal->flags & ColourDboxInternal_IncludeNoneButton) ? 1: 0;

   IGNORE(t);

   return NULL;
}

/* removed owing to bug in ColourPicker

 *_kernel_oserror *colourdbox_set_help_message    (_kernel_swi_regs *r, TaskDescriptor *t) {

 *   _kernel_swi_regs        *user_regs   = ((_kernel_swi_regs *) r->r[4]);
 *   ColourDboxInternal      *internal    = (ColourDboxInternal *) r->r[2];
 *   char                    *src_txt     = (char *) user_regs->r[3];

 *   if (!string_copy_chk (internal->help_message,src_txt,internal->max_help))
 *      return make_error (ColourDbox_ShortBuffer,0);

 *   IGNORE(t);

 *   return NULL;
 *}

 *_kernel_oserror *colourdbox_get_help_message    (_kernel_swi_regs *r, TaskDescriptor *t) {

 *   _kernel_swi_regs        *user_regs   = ((_kernel_swi_regs *) r->r[4]);
 *   ColourDboxInternal      *internal    = (ColourDboxInternal *) r->r[2];
 *   char                    *dest_txt    = (char *) user_regs->r[3];
 *   char                    *src_txt     = (char *) internal->help_message;
 *   int                      str_len     = strlen(src_txt);

 *   if (src_txt) {
 *      if (dest_txt) {
 *         if (str_len < user_regs->r[4])
 *            strcpy(dest_txt, src_txt);
 *         else
 *            return make_error(ColourDbox_ShortBuffer,0);
 *      }
 *   } else {
 *      if (user_regs->r[4]) {
 *         strcpy (dest_txt, "\0");
 *         str_len = 0;
 *      } else
 *         return make_error(ColourDbox_ShortBuffer,0);
 *   }
 *   user_regs->r[4] = str_len+1;

 *   IGNORE(t);

 *   return NULL;
 *}

 **/

@


4.2
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.20. Tagged as 'ColourDbox-0_20'
@
text
@d233 1
d307 1
d310 1
a310 1
         user_regs->r[4] = internal->colour_block_extd->hdr.extension_size + sizeof(ColourDescriptorHeader);
d312 5
a316 3
         if (size >= internal->colour_block_extd->hdr.extension_size + sizeof(ColourDescriptorHeader)) {
            memcpy (&colour_block, internal->colour_block_extd, sizeof(ColourDescriptorHeader) + internal->colour_block_extd->hdr.extension_size);
         } else return make_error (ColourDbox_ShortBuffer, 0);
@


4.1
log
@Initial revision
@
text
@a30 1
#include "services.h"
d36 2
a37 2
#include "objects.toolbox.h"
#include "objects.colourdbox.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
