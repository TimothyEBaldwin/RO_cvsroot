head	4.3;
access;
symbols
	ColourDbox-0_22:4.3
	ColourDbox-0_21:4.3
	ColourDbox-0_20:4.3
	RO_5_07:4.2
	ColourDbox-0_19:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.4
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	ColourDbox-0_18:4.2
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_ColourDbox_0_16:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.21.10.53;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	3QChTTUzrDxgmNxy;

4.2
date	98.07.30.09.22.40;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.21.40;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.21.40;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.38.14;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.10.30;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.34.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.20. Tagged as 'ColourDbox-0_20'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   show.c
 * Purpose: show a ColourDbox Object
 * Author:  TGR
 * History: 4-Mar-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects/toolbox.h"
#include "objects/colourdbox.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "show.h"


extern _kernel_oserror *show_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to show an object
     * R0 = 3
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  "show type"
     *            0 => default place
     *            1 => R3 points to buffer with full data for showing
     *            2 => R3 points to buffer with coordinates
     *      R3 = 0
     *   OR R3 -> buffer giving Object-specific data for showing this
     *            Object
     *      R4 =  Parent Object ID
     *      R5 =  Parent Component ID
     */

    /*
     * Function to "display" an Object on the screen.  If R2 == 0, then
     * display in default place.
     * If Object has bit set to say warn before show, then we should just
     * send Toolbox Event, and wait for the next call to Wimp_Poll after
     * the event is delivered before the Object is actually shown
     * (ie catch it in the prefilter).
     *
     */

   _kernel_oserror        *e;
   _kernel_swi_regs       *user_regs    = (_kernel_swi_regs *) r->r[4],
                           regs;
   ColourDboxInternal     *internal     = (ColourDboxInternal *) r->r[2],
                          *old_internal = internal;
   ColourDbox_AboutToBeShown_Event
                          *about_to_be_shown;
   ObjectID                object_id    = (ObjectID) r->r[1],
                           old_menu     = global_menu;
   ToolboxEvent            toolbox_event;

   DEBUG debug_output ("s","ColD: entering show, task = 0x%x, internal=0x%x, object_id=0x%x\n",t,internal,object_id);

   DEBUG debug_output ("s","ColourDbox: current global_menu = 0x%x\n",global_menu);

/*
   if (!global_menu && ((global_menu =  (user_regs->r[0] & 3) ? object_id : global_menu) != NULL)) {
      regs.r[0] = 0;
      regs.r[1] = ColourDbox_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
      regs.r[4] = (int) menu_messages_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;
   }
*/
   global_menu =  (user_regs->r[0] & 3) ? object_id : global_menu;
       /* Just in case the client shows one transient followed quickly by another */

   internal->flags &= (~ColourDboxInternal_MenuSemantics & ~ColourDboxInternal_SubMenuSemantics);

   if (internal->flags & ColourDboxInternal_IsShowing) {

/* EOR
      if ((internal->flags & (ColourDboxInternal_MenuSemantics|ColourDboxInternal_SubMenuSemantics)
         && !(user_regs->r[0] & 3))
      || (!(internal->flags & (ColourDboxInternal_MenuSemantics|ColourDboxInternal_SubMenuSemantics))
         && (user_regs->r[0] & 3))) {
*/
      if (internal->flags & (ColourDboxInternal_MenuSemantics|ColourDboxInternal_SubMenuSemantics)
        ||(user_regs->r[0] & 3)) {

         if (old_menu) {
            regs.r[0] = 0;
            regs.r[1] = old_menu;

            if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL)
               return e;

            old_internal = (ColourDboxInternal *) regs.r[0];

/*            if ((e = fetch_state (old_internal)) != NULL) {
               if (e->errnum != 0x20d02)
                  return e;
            } else
*/
            if ((e = close_dialogue (old_internal, t)) != NULL) {
               return e;
            }
         }
         internal->flags |= ((user_regs->r[0] &  1) ? ColourDboxInternal_MenuSemantics : 0)
                         |  ((user_regs->r[0] &  2) ? ColourDboxInternal_SubMenuSemantics : 0);

         if (user_regs->r[2] == 2) {
            internal->x = ((int *) user_regs->r[3])[0];
            internal->y = ((int *) user_regs->r[3])[1];
            DEBUG debug_output ("s","ColD: setting coords to given value (%d,%d)\n", internal->x, internal->y);
         }
         global_next = internal;

         if ((e = show_actual ()) != NULL) {
            internal->flags &= ~ColourDboxInternal_IsShowing;
            return e;
         }
      } else {
         wimp_GetWindowState    wind_blk;

         DEBUG debug_output ("s","ColD: already showing, raising (wh = 0x%x)\n",internal->window_handle);

         wind_blk.open.window_handle = internal->window_handle;

         regs.r[1] = (int) &wind_blk;

         if ((e = _kernel_swi (Wimp_GetWindowState, &regs, &regs)) != NULL) {
            internal->flags &= ~ColourDboxInternal_IsShowing;
            return e;
         }
         wind_blk.open.behind = -1;

         if ((e = _kernel_swi (Wimp_OpenWindow, &regs, &regs)) != NULL)
            return e;
      }
      return NULL;
   }

   internal->flags |= ((user_regs->r[0] &  1) ? ColourDboxInternal_MenuSemantics : 0)
                   |  ((user_regs->r[0] &  2) ? ColourDboxInternal_SubMenuSemantics : 0)
                   |  ((user_regs->r[2] != 2)
                                              ? ColourDboxInternal_ShowAtDefault    : 0);
   internal->show_type = user_regs->r[2];

   DEBUG debug_output ("s","ColD: show type = %d\n",user_regs->r[2]);
   if (user_regs->r[2] == 2) {
      internal->x = ((int *) user_regs->r[3])[0];
      internal->y = ((int *) user_regs->r[3])[1];
      DEBUG debug_output ("s","ColD: setting coords to given value (%d,%d)\n", internal->x, internal->y);
   } else if (internal->x == -1) {
      wimp_PointerInfo ptr_info;

      regs.r[1] = (int) &ptr_info;

      if ((e = _kernel_swi (Wimp_GetPointerInfo, &regs, &regs)) != NULL) {
         return e;
      }
      internal->x = ptr_info.x - 64;
      internal->y = ptr_info.y;
   }
   if (internal->flags & ColourDboxInternal_GenerateShowEvent) {

      DEBUG debug_output ("s","ColD: generating show event (0x%x)\n", ColourDbox_AboutToBeShown);

      about_to_be_shown            = (ColourDbox_AboutToBeShown_Event *) &toolbox_event;
      about_to_be_shown->show_type = user_regs->r[2];

      about_to_be_shown->info.coords.x =  internal->x;
      about_to_be_shown->info.coords.y =  internal->y;

      regs.r[0]                        =  0;                     /* flags*/
      regs.r[1]                        =  r->r[1];               /* Object id */
      regs.r[2]                        =  -1;                    /* Component id */
      regs.r[3]                        =  (int) &toolbox_event;

      toolbox_event.hdr.size           =  sizeof(ColourDbox_AboutToBeShown_Event);
      toolbox_event.hdr.event_code     =  ColourDbox_AboutToBeShown;
      toolbox_event.hdr.flags          =  user_regs->r[0];

      return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);   /* return here whatever */
   } else {
      global_next = internal;
      return show_actual ();
   }
}

@


4.2
log
@* Added show-centred capability.  Default show position was already doing
  a shot-at-pointer.
* Module version now maintained by srccommit.

Version 0.18. Tagged as 'ColourDbox-0_18'
@
text
@a30 1
#include "services.h"
d35 2
a36 2
#include "objects.toolbox.h"
#include "objects.colourdbox.h"
@


4.1
log
@Initial revision
@
text
@d179 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
