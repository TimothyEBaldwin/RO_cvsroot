head	4.3;
access;
symbols
	ColourDbox-0_22:4.3
	ColourDbox-0_21:4.3
	ColourDbox-0_20:4.2
	RO_5_07:4.1
	ColourDbox-0_19:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	Ursula:4.1.0.6
	Ursula_bp:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	ColourDbox-0_18:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_ColourDbox_0_16:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.10.27.22.25.43;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	w7i6rRvcHXdqwNGy;

4.2
date	2015.08.18.21.10.52;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	3QChTTUzrDxgmNxy;

4.1
date	96.11.05.09.21.39;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.21.39;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.38.07;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.10.21;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.33.57;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Fix for NULL pointer dereference when 'Default' title is selected
Contrary to the Toolbox manual, ColourDbox was taking a zero "max title length" field as the cue to substitute the title, followed by setting the title string pointer to NULL, trying to strlen() it, and ending up with the default from the Res file for this object. The code to look up the default title in the Messages was never called.
Changed to follow the docs: a NULL title string pointer uses the default and no significance is attached to the max buffer length in that case.
Messages file (which is now used as a result) changed to have the same default title as before.

Thanks to Nick Roberts for spotting & testing this.

Version 0.21. Tagged as 'ColourDbox-0_21'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   create.c
 * Purpose: create a ColourDbox Object
 * Author:  TGR
 * History: 7-Mar-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "string.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "string32.h"

#include "objects/toolbox.h"
#include "objects/colourdbox.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "create.h"


extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

   _kernel_oserror      *e                = NULL;
   _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
   ObjectTemplateHeader *obj_temp_hdr     = (ObjectTemplateHeader *)user_regs->r[1];
   ColourDboxTemplate   *template         = (ColourDboxTemplate *) obj_temp_hdr->body;
   ColourDboxInternal   *internal;
   int                   buffer_size      = 0;

   if ((internal = mem_alloc (sizeof (ColourDboxInternal))) == NULL)
      return make_error (ColourDbox_AllocFailed, 0);

   internal->object_id = (ObjectID) r->r[1];

   internal->flags
      = ((template->flags & ColourDbox_GenerateShowEvent)
         ? ColourDboxInternal_GenerateShowEvent : 0)
      | ((template->flags & ColourDbox_GenerateHideEvent)
         ? ColourDboxInternal_GenerateHideEvent : 0)
      | ((template->flags & ColourDbox_IncludeNoneButton)
         ? ColourDboxInternal_IncludeNoneButton : 0)
      | ((template->flags & ColourDbox_SelectNoneButton)
         ? ColourDboxInternal_SelectNoneButton : 0);
/*
      | ((template->flags & ColourDbox_ChangeInfoExceptDrag)
         ? ColourDboxInternal_ChangeInfoExceptDrag : 0)
      | ((template->flags&ColourDbox_AllChangeInfo)
         ? ColourDboxInternal_AllChangeInfo : 0);
*/
   internal->x = -1; /* Rogue value */

   if (!template->title) {
      /* Provide a default title */
      if ((e = messages_file_lookup ("Title", 0, &buffer_size, 0)) != NULL)
         goto clearup1;

      if ((internal->title = mem_alloc (buffer_size)) == NULL) {
         e = make_error(ColourDbox_AllocFailed,0);
         goto clearup1;
      }
      if ((e = messages_file_lookup ("Title", internal->title, &buffer_size, 0)) !=NULL)
         goto clearup1;
   } else {
      /* Caller provided their own title */
      if ((internal->title = mem_alloc (template->max_title)) == NULL) {
         e = make_error (ColourDbox_AllocFailed, 0);
         goto clearup1;
      }
      string_copy_chk (internal->title, template->title, template->max_title);
   }
   internal->max_title          = strlen(internal->title) + 1;
   if (template->max_title > internal->max_title) internal->max_title = template->max_title;
   internal->colour             = template->colour;

   DEBUG debug_output ("f","ColD: creating with RGB colour word = 0x%x, title = '%s'\n",internal->colour, internal->title);

   internal->colour_block_extd  = NULL;
   internal->colour_model_block = NULL;

   if (t->object_list) { /* If there are already colourdboxes attached to the task ... */

      internal->forward                        = t->object_list;
      internal->backward                       = t->object_list->backward;
      t->object_list->backward->forward        = internal;
      t->object_list->backward                 = internal;

   } else {              /* ... if not ... */

      e = register_task (t);

      t->object_list     = internal;
      internal->forward  = internal;
      internal->backward = internal;
   }

   r->r[0] = (int) internal;

   return e;

clearup1:
   mem_freek(internal);
   return e;
}
@


4.2
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.20. Tagged as 'ColourDbox-0_20'
@
text
@d104 2
a105 3
   if (!template->max_title) {
      internal->title = NULL;
   } else if (!template->title) {
d116 1
a122 13
/* removed ...

   if (!template->help_message || !template->max_help) {
      internal->help_message = NULL;
   } else {
      if ((internal->help_message = mem_alloc (template->max_help)) == NULL) {
         e = make_error (ColourDbox_AllocFailed, 0);
         goto clearup1;
      }
      string_copy_chk (internal->help_message, template->help_message, template->max_help);
   }
   internal->max_help           = template->max_help;
*/
d152 3
a154 3
   clearup1:
      mem_freek(internal);
      return e;
@


4.1
log
@Initial revision
@
text
@a30 1
#include "services.h"
d36 2
a37 2
#include "objects.toolbox.h"
#include "objects.colourdbox.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
