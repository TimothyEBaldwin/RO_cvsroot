head	4.3;
access;
symbols
	Toolbox-1_58:4.3
	Toolbox-1_57:4.3
	Toolbox-1_56:4.3
	Toolbox-1_55:4.3
	Toolbox-1_54:4.3
	Toolbox-1_53:4.3
	RO_5_07:4.3
	Toolbox-1_52:4.3
	Toolbox-1_51:4.3
	Toolbox-1_50:4.3
	Toolbox-1_49:4.3
	Toolbox-1_48:4.3
	Toolbox-1_47:4.3
	Toolbox-1_46:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.6
	Toolbox-1_45:4.2
	Toolbox-1_44:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	Toolbox-1_43:4.2
	sbrodie_Toolbox_dev:4.2.0.4
	sbrodie_Toolbox_dev_bp:4.2
	Toolbox-1_42:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Toolbox_1_40:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Toolbox_1_38:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	99.02.16.17.19.51;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	98.02.04.19.49.32;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.12;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.12;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.45.55;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.17.56;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.41.34;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  Changes to co-exist with Common-0_02 (renaming class to class_id
  ObjectID cross-validation added.
Detail:
  Changes to co-exist with Common-0_02 (renaming class to class_id
    to stop the compiler moaning about the use of C++ reserved words)
  A fault has been uncovered which meant that object IDs pointing to
    the same block of memory could be generated by creating an object
    immediately after deleting another object.  The ID->pointer mapping
    did not care to notice that multiple IDs were in existence which
    pointed at the same memory (albeit one of the IDs having been
    "deleted" - the Message_ToolboxObjectDeleted for it is still yet
    to be delivered to the application when the new object is created.
    thus making the old deleted ID apparently valid again).  This
    could cause confusion if apps tried to use objects which had been
    deleted but which Toolbox was still saying were OK because they
    mapped to a current object block.  Toolbox now caches the ObjectID
    it generates for a block when it is created and will insist on it
    matching in order to pass the ID->pointer validation.  The standard
    Invalid Object ID error is thrown if the ID does not match.
Admin:
  Requires Common-0-02 or later (RiscOS/Sources/Toolbox/Common)

Version 1.47. Tagged as 'Toolbox-1_47'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    object.h
 * Purpose: Processing objects
 * Author:  Ian Johnson
 * History: 10-Aug-93: IDJ:   created
 *
 */

#ifndef __object_h
#define __object_h

#ifndef __Toolbox_h
#include "objects.toolbox.h"
#endif

#include "kernel.h"

/**************************************** object data structure *******************************/

/* On creating an Object, the client is passed back an ObjectID which is in fact a pointer
   to one of these structures (but he doesn't know it).

   Objects are stored in a linked list for each client task.  On every task swap,
   the global variable "task" is set to the task descriptor for the current task.

   The Toolbox maintains a data structure for each Object (see below), which contains
   a copy of the original template header.  Only the class, flags, version and name
   fields are of any relevance though.

   The Toolbox passes a pointer to the object template to an Object module which will
   do with it as it wishes, and return an internal handle which it uses to identify
   that Object.
*/

#define GUARD_WORD   0x544a424f      /* 'OBJT' */

typedef struct object
{
    struct object        *next;                /* next in chain of Objects for client task */
    struct object        *prev;                /* previous in chain of Objects for client task */
    int                   guard;               /* guard word (must be OBJT) */
    ObjectTemplateHeader  header;              /* the original template header (tweaked) */
    int                   state;               /* state of the object as known by the Toolbox */
    ObjectID              self_id;             /* to help object ID validation */
    void                 *client_handle;       /* as set by Toolbox_SetClientHandle */
    ObjectID              parent_id;           /* Object which showed this one */
    ComponentID           parent_component;    /* component causing show */
    ObjectID              ancestor_id;
    ComponentID           ancestor_component;
    void                 *internal_handle;     /* internal handle returned by class module */
    unsigned int          reference_count;     /* inc when create/copy, dec when delete */
} object_t;



/* ********************************** client SWIs ****************************/

extern _kernel_oserror *object_create (_kernel_swi_regs *r);

/*
 *   Entry:  R0 = flags
 *           R1 -> name of template
 *      OR   R1 -> description block (if bit 1 of flags set)
 *
 *   Exit:
 *           R0 = ID of created Object
 *
 */


extern _kernel_oserror *object_delete (_kernel_swi_regs *r);

/*
 *   Entry:
 *           R0  =  flags
 *                  bit 0 set means delete recursively
 *           R1  =  Object ID
 *
 *   Exit:
 *                  R1-R9 preserved.
 *
 */


extern _kernel_oserror *object_show (_kernel_swi_regs *r);

/*
 *   Entry:
 *           R0  =  flags
 *           R1  =  Object ID
 *           R2  =  -1
 *   OR      R2  -> buffer giving Object-specific data for showing this
 *                Object
 *           R3  =  Parent Object ID
 *           R4  =  Parent Component ID
 *
 *   Exit:
 *           R1-R9 preserved
 *
 */


extern _kernel_oserror *object_hide (_kernel_swi_regs *r);

/*
 *   Entry:
 *           R0  =  flags
 *           R1  =  Object ID
 *
 *   Exit:
 *           R1-R9 preserved
 *
 */


extern _kernel_oserror *object_get_state (_kernel_swi_regs *r);

/*
 *   Entry:
 *           R0  =  flags
 *           R1  =  Object ID
 *
 *   Exit:
 *           R0  =  state
 *
 */


extern _kernel_oserror *object_miscop (_kernel_swi_regs *r);
extern _kernel_oserror *object_set_client_handle (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  Object ID
 *         R2  =  client handle
 *
 *   Exit:
 *         R1-R9 preserved
 *
 */


extern _kernel_oserror *object_get_client_handle (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  Object ID
 *
 *   Exit:
 *         R0 = client handle for this Object
 *
 */


extern _kernel_oserror *object_get_class (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  Object ID
 *
 *   Exit:
 *         R0 = Object class
 *
 */


extern _kernel_oserror *object_get_parent (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  Object ID
 *
 *   Exit:
 *         R0 = Parent ID
 *         R1 = Parent component ID
 *
 */


extern _kernel_oserror *object_get_ancestor (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  Object ID
 *
 *   Exit:
 *         R0 = Ancestor ID
 *         R1 = Ancestor component ID
 *
 */


extern _kernel_oserror *object_get_template_name (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  Object ID
 *         R2  -> buffer
 *         R3  =  size of buffer
 *
 *   Exit:
 *        if R2 was zero
 *           R3 = length of buffer required
 *         else
 *            Buffer pointed at by R2 holds template name
 *            R3 holds number of bytes written to buffer
 *
 */


/********************************* class module SWIs *************************/

extern _kernel_oserror *object_get_internal_handle (_kernel_swi_regs *r);
/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  Object ID
 *
 *   Exit:
 *         R0  =  internal handle
 *
 */


extern _kernel_oserror *object_register_module (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  Object Class
 *         R2  =  Class SWI Number
 *
 *   Exit:
 *         R1-R9 preserved
 *
 */


extern _kernel_oserror *object_deregister_module (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  Object Class
 *
 *   Exit:
 *         R1-R9 preserved
 *
 */

/***************************************** object manipulation **************************/

extern void object_remove_list (void);


#endif
@


4.2
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@d57 1
@


4.1
log
@Initial revision
@
text
@d21 1
a21 1
              
d56 1
a56 1
    int                   state;               /* state of the object as known by the Toolbox */ 
d61 1
a61 1
    ComponentID           ancestor_component; 
a92 14
 *
 */


extern _kernel_oserror *object_copy (_kernel_swi_regs *r);

/*
 *   Entry:
 *           R0  =  flags
 *                  bit 0 set => recursively copy the Object
 *           R1  =  source Object ID
 *
 *   Exit:
 *           R0 = ID of copied Object.
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
