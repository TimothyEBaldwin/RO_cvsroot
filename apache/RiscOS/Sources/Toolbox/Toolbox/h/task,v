head	4.5;
access;
symbols
	Toolbox-1_58:4.5
	Toolbox-1_57:4.5
	Toolbox-1_56:4.5
	Toolbox-1_55:4.5
	Toolbox-1_54:4.4
	Toolbox-1_53:4.4
	RO_5_07:4.4
	Toolbox-1_52:4.4
	Toolbox-1_51:4.4
	Toolbox-1_50:4.4
	Toolbox-1_49:4.4
	Toolbox-1_48:4.4
	Toolbox-1_47:4.4
	Toolbox-1_46:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.3
	Ursula_RiscPC:4.2.0.10
	Toolbox-1_45:4.3
	Toolbox-1_44:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Toolbox-1_43:4.2
	sbrodie_Toolbox_dev:4.2.0.8
	sbrodie_Toolbox_dev_bp:4.2
	Toolbox-1_42:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Toolbox_1_40:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Toolbox_1_38:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1.2.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2014.07.26.20.50.59;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	4kgjygW8uK7HIVJx;

4.4
date	99.01.18.12.32.05;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	98.11.12.10.14.34;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.05.07.15.08.55;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.12;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.12;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.45.57;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.17.59;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.41.36;	author nturton;	state Exp;
branches
	4.1.7.1.2.1;
next	;

4.1.7.1.2.1
date	97.04.22.14.32.31;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Fix for asymmetry in Toolbox_GetSysInfo 2
The enhancement in 1.50 to allow tasks to initialise with either a path variable or a directory meant that internally everything is considered as a path.
However, Toolbox_GetSysInfo 2 is specified as returning the "directory name passed to Toolbox_Initialise", except that now a directory is stored in its modified (path-like) form internally, so doesn't read back as expected.
Add boolean flag to remember that the dir was changed to a path so it can be knocked off again if appropriate.
Remove some excess #includes.

Tested with the following for path=FALSE and path=TRUE

DIM poll 256,block 16,dirbuf 128
IF path THEN
 *set MyTest$Path $.!Boot.RO500Hook.Res.Configure.!HelpSetup.
 SYS"Toolbox_Initialise",0,380,0,0,"MyTest:",block,poll TO ,id%
ELSE
 SYS"Toolbox_Initialise",0,380,0,0,"$.!Boot.RO500Hook.Res.Configure.!HelpSetup",block,poll TO ,id%
ENDIF
PRINT "Task ";~id%
SYS"Toolbox_GetSysInfo",2 TO,,r2
PRINT "Want buffer ";r2;" long"
SYS"Toolbox_GetSysInfo",2,dirbuf,128 TO,,r2
SYS"XOS_GenerateError",dirbuf TO dir$
PRINT dir$;" is ";r2;" long (inc terminator), check ";LEN(dir$)+1

Version 1.55. Tagged as 'Toolbox-1_55'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    task.h
 * Purpose: tasks running under the Toolbox
 * Author:  Ian Johnson
 * History: 10-Aug-93: IDJ:   created
 *
 */

#ifndef __task_h
#define __task_h

#ifndef __object_h
#include "object.h"
#endif

#ifndef __wimp_h
#include "twimp.h"
#endif

#ifndef __resf_h
#include "resf.h"
#endif

#ifndef __filters_h
#include "filters.h"
#endif

#include "kernel.h"

struct task_info
{
        char   *name;
        int     messages_fd[4];
        char   *messages_name;
        char   *dir_name;
        int     wimp_handle;
        void   *sprite_area;
        int     sprite_area_in_resourcefs:1;
        int     dir_name_was_dir:1;
};


typedef struct task_descriptor
{
        struct task_descriptor *next;
        struct task_descriptor *prev;
        void                   *pw;                     /* cached Toolbox module's private word */
        int                     mask;                   /* mask passed to Wimp_Poll by client */
        int                    *toolbox_event_list;     /* list of toolbox event codes this task is interested in */
        int                    *wimp_msg_list;          /* list of wimp msg codes this task is interested in */
        object_t               *object_list;            /* list maintained by object.c */
        resf_ResourceFile      *resources_list;         /* list to hold resources files (resf.c) */
        resf_Template          *templates_list;         /* list of templates maintained by resf.c */
        struct task_info        info;
        filters_PreFilter      *prefilter_list;         /* list maintained by filters.c */
        filters_PostFilter     *postfilter_list;        /*  "        "     "      "     */
        IDBlock                *id_block;
        wimp_PollBlock         *poll_block;             /* saved poll block pointer */
} TaskDescriptor;

/********************************************** client SWIs *****************************************/

extern _kernel_oserror *task_get_sys_info (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *
 *         R0 Value       Meaning
 *         --------       -------
 *             0          return task name
 *             1          return 4-word messages file descriptor
 *             2          return name of directory passed to
 *                        Toolbox_Initialise
 *             3          return task's Wimp task handle
 *             4          return pointer to sprite area used.
 *
 *         R1, R2 depends on entry value of R0 (see below)
 *
 *   Exit:
 *         R0 on entry      On exit
 *         -----------      -------
 *              0           if R1 was 0
 *                              R2 holds size of buffer required
 *                          else
 *                              buffer pointed at by R1 holds task
 *                              name.
 *              1           buffer pointed at by R1 contains a
 *                          4-word messages file descriptor.
 *              2           if R1 was 0
 *                              R2 holds size of buffer required
 *                          else
 *                              buffer pointed at by R1 holds
 *                              directory name passed to
 *                              Toolbox_Initialise.
 *              3           R0 contains task handle.
 *              4           R0 contains sprite area pointer.
 *
 */


extern _kernel_oserror *task_initialise (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  last Wimp version number known to task * 100
 *                (must be >= 310)
 *         R2  -> list of Wimp message numbers which the client wishes
 *                to receive, terminated by a 0 word.
 *                If R2 = 0, then all messages are delivered.
 *                If R2 points to just a 0 word, then no messages are
 *                delivered (apart from the Quit message).
 *         R3  -> list of Toolbox Event codes which the client wishes
 *                to receive, terminated by a 0 word.
 *                If R3 = 0, then all Toolbox Events are delivered.
 *                If R3 points to just a 0 word, then no Toolbox Events
 *                are delivered.
 *         R4  -> Directory name in which to find resources.
 *         R5  -> 4-word buffer to receive messages file descriptor.
 *         R6  -> buffer to hold Object ids on return from Wimp_Poll.
 *
 *   Exit:
 *         R0 = current Wimp version number * 100
 *         R1 = Wimp task handle for this client
 *         R2 = Pointer to Sprite area used.
 *         Buffer pointed to by R5 is filled in with a MessageTrans
 *         file descriptor for the messages file to be used.
 *
 */


/************************************** task manipulation functions ********************************/

extern BOOL task_expected_wimp_message (int action);
extern BOOL task_expected_toolbox_event (int event_code);
extern void task_exit (TaskDescriptor *t);
extern BOOL task_any_active(void);
extern void task_inform_object_modules (void);
extern TaskDescriptor *task_find (int task_handle);
extern _kernel_oserror *task_filtermgr_restarting (void);
extern _kernel_oserror *task_list(void);

#endif
@


4.4
log
@  Updated ToolboxObjectDeletedEvent structure to hold class and client handle.
Detail:
  Currently, there is no way of ascertaining the client handle that used to
    belong to a deleted object.  Thus applications cannot rely on this event
    to close down any associated data structures referenced via the client
    handle.  This event now provides the client handle and the class ID of
    the deleted object as per the structure and flags exported by Toolboxlib.
  Debug builds now have an extra *-command "*Toolbox_Counts" which dumps out
    the name of each active Toolbox task and a list of the objects that that
    task has created and what class each object is (it simply does a name
    lookup on the class ID (SWI base) and prints out the SWI name - so you
    get Window_ClassSWI for window objects and DCS_16 for quit objects)
Admin:
  Requires RiscOS/Sources/Toolbox/Common version 0.01 or later (Common-0_01).
  Requires RiscOS/Sources/Toolbox/Libs version 0.02 or later (Libs-0_02).


Version 1.46. Tagged as 'Toolbox-1_46'
@
text
@d52 1
@


4.3
log
@Forgot to check this file in last time. Retagged as v1.45
@
text
@d154 1
@


4.2
log
@ARTtmp branch folded in
@
text
@d51 1
@


4.1
log
@Initial revision
@
text
@d21 1
a21 1
              
d47 1
d55 1
a55 1
{    
d105 1
a105 1
 *                              directory name passed to 
d120 1
a120 1
 *         R2  -> list of Wimp message numbers which the client wishes 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.1.2.1
log
@Ensured that filename passed to MessageTrans_OpenFile is stored in RMA.
Made the Toolbox look for Res<territory> then Res, rather than Res then
Res<country>. Ditto for Messages.
@
text
@d21 1
a21 1

a46 1
        char   *messages_name;
d54 1
a54 1
{
d104 1
a104 1
 *                              directory name passed to
d119 1
a119 1
 *         R2  -> list of Wimp message numbers which the client wishes
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
