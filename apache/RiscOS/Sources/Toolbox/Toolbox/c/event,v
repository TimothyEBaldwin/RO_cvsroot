head	4.3;
access;
symbols
	Toolbox-1_58:4.3
	Toolbox-1_57:4.3
	Toolbox-1_56:4.3
	Toolbox-1_55:4.2
	Toolbox-1_54:4.2
	Toolbox-1_53:4.2
	RO_5_07:4.2
	Toolbox-1_52:4.2
	Toolbox-1_51:4.2
	Toolbox-1_50:4.1
	Toolbox-1_49:4.1
	Toolbox-1_48:4.1
	Toolbox-1_47:4.1
	Toolbox-1_46:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Ursula_RiscPC:4.1.0.12
	Toolbox-1_45:4.1
	Toolbox-1_44:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Toolbox-1_43:4.1
	sbrodie_Toolbox_dev:4.1.0.10
	sbrodie_Toolbox_dev_bp:4.1
	Toolbox-1_42:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_Toolbox_1_40:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	sbrodie_Toolbox_1_38:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.21.54.53;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	LoNyVfxnoIUlBNxy;

4.2
date	2002.12.12.20.24.18;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.09;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.09;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.45.39;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.17.34;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.41.18;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Move structure document into Docs directory.
Get module base from AsmUtils.

Version 1.56. Tagged as 'Toolbox-1_56'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    event.c
 * Purpose: Generating Toolbox Events
 * Author:  Ian Johnson
 * History: 22-Sep-93: IDJ:   created
 *
 */


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "messages.h"
#include "objects/toolbox.h"

#include "globals.h"

#include "task.h"

#include "event.h"


extern _kernel_oserror *event_raise_toolbox_event (_kernel_swi_regs *r)
{

    /*
     *    Entry:
     *           R0  =  flags
     *           R1  =  Object ID
     *           R2  =  Component ID
     *           R3  -> Toolbox Event block (as defined above)
     *     Exit:
     *           R1-R9 preserved
     *
     */

    wimp_Message     msg;
    ToolboxEvent    *event = (ToolboxEvent *)r->r[3];
    _kernel_oserror *e;
    _kernel_swi_regs regs;

    /*
     * We actually send ourselves a Wimp message (for which we always register interest)
     * containing the details of the Toolbox event.  This gets seen by the postfilter
     * which turns it into a Toolbox_Event event.
     * Note: the unique reference number for the Toolbox Event is in fact the Wimp
     * message reference (guaranteed unique)
     *
     */

    DEBUG mem_chk(r, CHECK_NONZERO);
    DEBUG debug_output ("raise", "T:Raise Toolbox Event R1 (0x%x) R2 (0x%x) event code 0x%x\n", r->r[1], r->r[2], event->hdr.event_code);


    msg.hdr.size = (offsetof(wimp_Message, data.toolbox_event_msg.event) + event->hdr.size + 3) &~ 3;
    msg.hdr.your_ref = 0;                          /* originator */
    msg.hdr.action = wimp_MTOOLBOX_EVENT;           /* unseen by client */
    msg.data.toolbox_event_msg.self = (ObjectID)r->r[1];
    msg.data.toolbox_event_msg.component = r->r[2];
    memcpy (&msg.data.toolbox_event_msg.event, event,
            MIN(event->hdr.size, sizeof msg.data.toolbox_event_msg.event));
    if (msg.hdr.size > sizeof msg) msg.hdr.size = sizeof msg;

    DEBUG debug_output ("raise", "T:Event size %d (0x%x)\n", event->hdr.size, event->hdr.size);

    regs.r[0] = wimp_ESEND;
    regs.r[1] = (int)&msg;
    regs.r[2] = task->info.wimp_handle;   /* send to self */

    if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL)
        return e;

    DEBUG debug_output ("raise", "T:Wimp message sent - my_ref 0x%x", msg.hdr.my_ref);

    return NULL;
}

@


4.2
log
@Changes to ensure that only the requested amount of parameters are
passed to/from the stack - previously 256 bytes was assumed but this
runs off the end of the stack frequently and hence caused problems
in systems where there is nothing mapped in after the end of the
stack.

Version 1.51. Tagged as 'Toolbox-1_51'
@
text
@a31 1
#include "services.h"
d36 1
a36 1
#include "objects.toolbox.h"
@


4.1
log
@Initial revision
@
text
@a20 1
 
d22 2
d29 1
a29 1
                 
d60 2
a61 1
    wimp_Message     msg;  
d75 2
a76 1
    DEBUG debug_output ("raise", "T:Raise Toolbox Event R1 (0x%x) R2 (0x%x) event code 0x%x\n", r->r[1], r->r[2], ((ToolboxEvent *)r->r[3])->hdr.event_code);
d78 1
a78 1
    msg.hdr.size = 256;                            /* for simplicity */
d82 4
a85 2
    msg.data.toolbox_event_msg.component = r->r[2]; 
    memcpy ((void *)&msg.data.toolbox_event_msg.event, (void *)r->r[3], sizeof(ToolboxEvent));
d87 1
a87 1
    DEBUG debug_output ("raise", "T:Event size %d (0x%x)\n", ((ToolboxEvent *)r->r[3])->hdr.size, ((ToolboxEvent *)r->r[3])->hdr.size);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
