head	4.5;
access;
symbols
	Toolbox-1_58:4.5
	Toolbox-1_57:4.4
	Toolbox-1_56:4.4
	Toolbox-1_55:4.3
	Toolbox-1_54:4.3
	Toolbox-1_53:4.3
	RO_5_07:4.3
	Toolbox-1_52:4.3
	Toolbox-1_51:4.3
	Toolbox-1_50:4.3
	Toolbox-1_49:4.3
	Toolbox-1_48:4.3
	Toolbox-1_47:4.3
	Toolbox-1_46:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Ursula_RiscPC:4.3.0.6
	Toolbox-1_45:4.3
	Toolbox-1_44:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.2
	Toolbox-1_43:4.3
	sbrodie_Toolbox_dev:4.3.0.4
	sbrodie_Toolbox_dev_bp:4.3
	Toolbox-1_42:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	sbrodie_Expresso_final_190298:4.3
	sbrodie_Toolbox_1_40:4.3
	sbrodie_Expresso_BETA6_19980204:4.1;
locks; strict;
comment	@# @;


4.5
date	2018.02.11.15.07.33;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	SO9fupyvud66asqA;

4.4
date	2015.08.18.21.54.53;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	LoNyVfxnoIUlBNxy;

4.3
date	98.02.11.18.18.31;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	98.02.11.18.16.45;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	98.02.04.19.49.25;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Bitwise to logical OR
Ref https://www.riscosopen.org/forum/forums/4/topics/9503#posts-72623

Version 1.58. Tagged as 'Toolbox-1_58'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    memory.c
 * Purpose: Memory allocation for client modules
 * Author:  Kevin Bracey
 * History: 22-Nov-96: KJB:   created
 *
 */


#include <string.h>
#include <stddef.h>
#include <stdlib.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "toolboxmem.h"
#include "objects/toolbox.h"

#include "globals.h"


/* --- Toolbox includes --- */
#include "task.h"
#include "object.h"
#include "memory.h"
#include "memswis.h"

/* Declare the maximum dynamic area size.
 * 11M matches the RMA for Risc PC I.  Must at least equal this here.
 * 64M equals the maximum representable in an ObjectID.  Must never exceed this.
 *   Pointer or offset can be contained only in bits 2-25 (incl.)
 * Unless there is very good reason, this should not be raised, as there is little
 * point in doing so.  Existing machines managed perfectly well sharing the 11MB RMA
 * with modules.  Claiming large chunks of logical address space may cause trouble
 * in the future with large memory machines, as logical address space will run out
 * much faster.
 */
#define MAX_DA_SIZE	(16*1024*1024)

static int da_number;
static void *da_addr;
static int da_size;
static int page_size;

static _kernel_oserror *extend_heap(int req);
static void shrink_heap(void);

static _kernel_oserror *_toolbox_memory_alloc(size_t size, void **pp);
static _kernel_oserror *_toolbox_memory_free(void *p);
static _kernel_oserror *_toolbox_memory_extend(void *p, int by, void **pp);

/****************************************************************************
 * memory_initialise
 *
 * Prepare the memory library for use - if DAs are available, create a
 * DA for our use.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    Page size >= 16 bytes
 *
 */
_kernel_oserror *memory_initialise(void)
{
    _kernel_oserror *e;
    int var_type;

    da_number=-1;
    da_addr=0;
    da_size=0;

    /* Check whether we have DAs by trying an enumerate */

    if (_swix(OS_DynamicArea, _INR(0,1), 3, -1))
        return NULL;

    if ((e = _swix(OS_ReadMemMapInfo, _OUT(0), &page_size)) != NULL)
        return e;

    /* Check whether a previous incarnation has left a DA for us */
    if (!_swix(OS_ReadVarVal, _INR(0,4)|_OUT(4),
                                         "Toolbox$DynamicArea",
                                         &da_number,
                                         sizeof da_number,
                                         0,
                                         0,
                                         &var_type) && var_type == 1)
    {
        e = _swix(OS_ReadDynamicArea, _IN(0)|_OUTR(0,1), da_number, &da_addr, &da_size);
    }
    else
    {
        e = _swix(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3),
                                   0,    /* Create DA */
                                   -1,   /* Any number */
                                   page_size, /* One page initially */
                                   -1,   /* Any address */
                                   128,  /* Not draggable */
                                   MAX_DA_SIZE,
                                   0, 0, /* No handler routine */
                                   "Toolbox",
                                   &da_number,
                                   &da_addr);

	if (e == NULL) {
	        da_size = page_size;
        	if ((e = xosheap_initialise(da_addr, da_size)) != NULL)
	        {
	            memory_finalise();
	        }
	}

    }

    _swix(OS_SetVarVal, _IN(0)|_IN(2), "Toolbox$DynamicArea", -1);

    return e;
}

/****************************************************************************
 * memory_finalise
 *
 * This function shuts down the memory library, and frees our dynamic
 * area, but only if no memory is in use. If the memory is in use, it
 * sets a variable, hoping that a new Toolbox module will come along
 * to handle the DA.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    Heap structure still as described in PRM
 *
 */
_kernel_oserror *memory_finalise(void)
{
    if (da_addr)
    {
        int heapbase = ((int *)da_addr)[2];
        if (heapbase == 0x10)
        {
            da_addr = NULL;
            return _swix(OS_DynamicArea, _INR(0,1), 1, da_number);
        }
        else
        {
            _swix(OS_SetVarVal, _INR(0,4), "Toolbox$DynamicArea",
                                           &da_number,
                                           sizeof da_number,
                                           0,
                                           1);
        }
    }

    return NULL;
}

/****************************************************************************
 * toolbox_memory_swi
 *
 * This function implements the Toolbox_Memory SWI
 *
 * Parameters:
 *    r - the parameter block
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    none
 *
 */
_kernel_oserror *toolbox_memory_swi(_kernel_swi_regs *r)
{
        _kernel_oserror *e;
    switch (r->r[0] & 0xFF)
    {
      case 0:
        e = _toolbox_memory_alloc(r->r[1], (void **) &r->r[0]);
        DEBUG debug_output("m", "toolbox_memory_alloc: %08x --> %08x %s\n", r->r[1], r->r[0], e?e->errmess:"");
        return e;

      case 1:
        e = _toolbox_memory_free((void *) r->r[1]);
        DEBUG debug_output("m", "toolbox_memory_free: %08x\n", r->r[1], e?e->errmess:"");
        return e;

      case 2:
        e = _toolbox_memory_extend((void *) r->r[1], r->r[2], (void **) &r->r[0]);
        DEBUG debug_output("m", "toolbox_memory_extend %08x (by %08x) --> %08x %s\n", r->r[1], r->r[2], r->r[0], e?e->errmess:"");
	return e;

      default:
        return make_error(Toolbox_BadMemoryReason, 0);
    }
}


/****************************************************************************
 * toolbox_memory_alloc
 * toolbox_memory_extend
 * toolbox_memory_free
 *
 * These functions override the veneers in common.s.toolboxmem. This means
 * that
 *        a) we don't have the overhead of calling our own SWIs
 *        b) we can call these routines in our finalise routine
 *
 * Parameters:
 *    see common.h.toolboxmem
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    none
 *
 */
void *toolbox_memory_alloc(size_t size)
{
    void *p;

    return _toolbox_memory_alloc(size, &p) ? NULL : p;
}

void toolbox_memory_free(void *p)
{
    _toolbox_memory_free(p);
}

void *toolbox_memory_extend(void *p, int by)
{
    void *newp;

    return _toolbox_memory_extend(p, by, &newp) ? NULL : newp;
}

/****************************************************************************
 * _toolbox_memory_alloc
 *
 * This function allocates a block of memory from the RMA or our DA,
 * and zero-initialises it
 *
 * Parameters:
 *    size - the amount of memory required
 *    pp   - the result pointer to be filled in
 *
 * Result:
 *    If allocation successful, pp filled in.
 *    If unsuccessful, either pp set to zero, or an error returned
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_toolbox_memory_alloc(size_t size, void **pp)
{
    void *p;
    _kernel_oserror *e;

    if (!da_addr)
    {
        *pp = calloc(size, 1);
        return NULL;
    }

    e = xosheap_alloc(da_addr, size, &p);
    if (e && e->errnum != 0x184)
        return e;

    if (e)
    {
        e = extend_heap(size);
        if (e)
            return e;

        e = xosheap_alloc(da_addr, size, &p);

        shrink_heap();

        if (e)
            return e;
    }
    if (p)
        memset(p, 0, size);

    *pp = p;

    return NULL;
}

/****************************************************************************
 * _toolbox_memory_free
 *
 * This function frees a block of memory
 *
 * Parameters:
 *    p   - the block to free
 *
 * Result:
 *    If the block isn't ours, an error may be returned
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_toolbox_memory_free(void *p)
{
    _kernel_oserror *e;

    if (!da_addr)
    {
        free(p);
        return NULL;
    }

    e = xosheap_free(da_addr, p);
    if (e)
        return e;

    shrink_heap();

    return NULL;
}

/****************************************************************************
 * _toolbox_memory_extend
 *
 * This function extends a block of memory
 *
 * Parameters:
 *    p   - the block to extend
 *    by  - the amount to extend by
 *    pp  - the amended pointer output
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_toolbox_memory_extend(void *p, int by, void **pp)
{
    _kernel_oserror *e;

    if (p == NULL || by == 0)  /* not like real realloc! */
    {
        *pp = NULL;
        return NULL;
    }

    if (!da_addr)
    {
        return xosmodule_realloc(p, by, pp);
    }

    e = xosheap_realloc(da_addr, p, by, pp);
    if (e && e->errnum != 0x184 && e->errnum != 0x1c1)
        return e;

    if (e && by > 0)
    {
        size_t size;

        if ((e = xosheap_read_size(da_addr, p, &size)) != NULL)
            return e;

        if ((e = extend_heap(size + by)) != NULL) {
            return e;
        }

        e = xosheap_realloc(da_addr, p, by, pp);
    }

    shrink_heap();

    return e;
}

/****************************************************************************
 * extend_heap
 *
 * This function extends the dynamic area/heap enough to allocate at least
 * req bytes
 *
 * Parameters:
 *    req - the space we want to allocate
 *
 * Result:
 *    Returns an error if unable to allocate enough space, else
 *    the heap/dynamic area is stretched enough to fit at least for bytes
 *
 * Assumptions:
 *    The heap and da are the same size
 *
 */
static _kernel_oserror *extend_heap(int req)
{
    int heapbase = ((int *)da_addr)[2];
    _kernel_oserror *e;
    int by;
    int size = req - (da_size-heapbase) + 4;

    DEBUG debug_output("heap", "extend_heap: da_size=%x, base=%x, req=%x size=%x\n", da_size, heapbase, req, size);

    e = _swix(OS_ChangeDynamicArea, _INR(0,1)|_OUT(1), da_number, size, &by);
    if (e) {
        return e;
    }

    if (size < 0) {
            by = -by;
    }

    e = xosheap_resize(da_addr, by);
    if (e)
    {
        shrink_heap();
        return e;
    }

    da_size += by;

    return NULL;
}

/****************************************************************************
 * shrink_heap
 *
 * This function shrinks the dynamic area/heap as much as possible
 *
 * Parameters:
 *    none
 *
 * Result:
 *    DA shrunk
 *
 * Assumptions:
 *    The heap and da are the same size, page_size is a power of 2
 *
 */
static void shrink_heap(void)
{
    int by;
    int heapbase = ((int *)da_addr)[2];

    by = (da_size - heapbase) & ~(page_size-1);

    if (!by)
        return;

    xosheap_resize(da_addr, -by);
    _swix(OS_ChangeDynamicArea, _INR(0,1), da_number, -by);

    da_size -= by;
}

/****************************************************************************
 * mem_base_addr
 *
 * This function returns the base address of the memory allocation pool.
 * All allocated pointers will be no more than 64M beyond this address.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    memory base address
 *
 * Assumptions:
 *    none
 *
 */
void *mem_base_address(void)
{
    return da_addr;
}

/****************************************************************************
 * memory_renumber_da
 *
 *  This function is called whenever Service_DynamicAreaRenumber is received
 *  since we need to know if it was our DA that was renumbered
 *
 * Parameters:
 *    DA being renumbered
 *    New number for the DA
 *
 * Result:
 *    da_number updated.
 *
 * Assumptions:
 *    none
 */
void memory_renumber_da(int old_da, int new_da)
{
        if (old_da != da_number) return;
	da_number = new_da;
}


/****************************************************************************
 * memory_validate_address
 *
 *  This function is called whenever an ObjectID has been converted into a
 *  pointer to determine whether the given object is in readable memory or
 *  not.
 *
 * Parameters:
 *    Object pointer to test
 *
 * Result:
 *    Non-0 if address is OK, 0 if not.
 *
 * Assumptions:
 *    none
 */
int memory_validate_address(object_t *t)
{
        char *const obj_start = (char *) t;
        char *const obj_end   = (char *) (t+1);

        if (da_addr) {
                if (obj_start < (char *)da_addr) return 0;
                if (obj_end > ((char *)da_addr + da_size)) return 0;
        	return 1;
        }
        else {
	        char *start;
	        int end;
	        _kernel_oserror *e;

                e = _swix(OS_ReadDynamicArea, _IN(0)|_OUTR(0,1), 1/*RMA*/, &start, &end);
                if (e != NULL) return 0;
		if (obj_start < start) return 0;
		if (obj_end >= (start+end)) return 0;
        	return 1;
        }
}
@


4.4
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Move structure document into Docs directory.
Get module base from AsmUtils.

Version 1.56. Tagged as 'Toolbox-1_56'
@
text
@d373 1
a373 1
    if (p == 0 | by == 0)  /* not like real realloc! */
@


4.3
log
@Fix for memory.c so that the object ID validation actually works on
RISC OS 3.1.
@
text
@d35 1
a35 1
#include "objects.toolbox.h"
@


4.2
log
@Toolbox 1.40

SWI dispatcher fixed to dispatch Toolbox_Memory calls - this prevented
version 1.39 from providing the advertised memory services to the other
object modules.

Object ID validation is now performed by the Toolbox module itself
instead of the slow OS_ValidateAddress SWI call.  This is possible for
both the normal RMA usage and dynamic area usage since the Toolbox
knows the dynamic area address range (it reads the RMA details for RISC
OS 3.1 machines with OS_ReadDynamicArea on every access but that can't
be helped).
@
text
@d556 2
a557 1
	        char *start, *end;
d563 1
a563 1
		if (obj_end >= end) return 0;
@


4.1
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@d50 5
a54 3
 * Unless there is very good reason, this should be left as 64M to avoid problems
 * in the future with large memory machines, otherwise applications will say "There's
 * not enough memory" when you might have tons of the stuff left ...
d56 1
a56 1
#define MAX_DA_SIZE	(64*1024*1024)
d528 38
@
