head	4.5;
access;
symbols
	Toolbox-1_58:4.5
	Toolbox-1_57:4.5
	Toolbox-1_56:4.5
	Toolbox-1_55:4.4
	Toolbox-1_54:4.4
	Toolbox-1_53:4.4
	RO_5_07:4.3
	Toolbox-1_52:4.3
	Toolbox-1_51:4.3
	Toolbox-1_50:4.3
	Toolbox-1_49:4.3
	Toolbox-1_48:4.3
	Toolbox-1_47:4.3
	Toolbox-1_46:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.6
	Toolbox-1_45:4.2
	Toolbox-1_44:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	Toolbox-1_43:4.2
	sbrodie_Toolbox_dev:4.2.0.4
	sbrodie_Toolbox_dev_bp:4.2
	Toolbox-1_42:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Toolbox_1_40:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Toolbox_1_38:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2015.08.18.21.54.53;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	LoNyVfxnoIUlBNxy;

4.4
date	2011.08.04.23.55.12;	author jlee;	state Exp;
branches;
next	4.3;
commitid	L8vcSsYKix7cGfuv;

4.3
date	99.02.16.17.19.49;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	98.02.04.19.49.27;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.10;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.10;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.45.45;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.17.40;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.41.24;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Move structure document into Docs directory.
Get module base from AsmUtils.

Version 1.56. Tagged as 'Toolbox-1_56'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    resf.c
 * Purpose: Resource file processing
 * Author:  Ian Johnson
 * History: 22-July-93: IDJ:   created
 *          22-Apr-94:  IDJ:   module's resources get loaded into a single list.
 *          18-Dec-94:  IDJ:   bug-fix AQU-00289 - check for module resources already loaded
 *
 */


#include <string.h>
#include <stdio.h>
#include <stddef.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objects/toolbox.h"

#include "globals.h"


/* --- Toolbox includes --- */
#include "resf.h"
#include "task.h"
#include "object.h"


#define NO_ENTRY -1



#define resf__next_template(t,n) (ResourceFileObjectTemplateHeader *)\
                                 ((char*)t+\
                                  offsetof(ResourceFileObjectTemplateHeader, hdr)+\
                                  t->hdr.total_size+\
                                  sizeof(int)+\
                                  (n*sizeof(Relocation)))


static resf_Template     *resf__module_templates_list = NULL;
static resf_ResourceFile *resf__module_resources_list = NULL;
static BOOL               resf__module_resources      = FALSE;


int resource_file_being_loaded = 0;   /* set to non-zero means res file is being loaded:
                                         used to decide whether to raise an auto-created
                                         event when object is created.
                                       */

static int resf__module_swi = 0;      /* used to hold swi no of object module which is
                                         currently loading its res file
                                       */

/* ---------------------------------- template handling ------------------------------------- */

static _kernel_oserror *resf__add_to_resources_list (ResourceFileHeader *h, resf_ResourceFile **listhead)
{
    /*
     * Function to add a resource file to the list of resource files loaded.
     * Module resource files are held in a single, separate list.
     */

    resf_ResourceFile *new_r;

    DEBUG mem_chk(h, CHECK_NONZERO | CHECK_HEAP);
    DEBUG mem_chk(listhead, CHECK_NONZERO);
    DEBUG mem_chk(*listhead, CHECK_HEAP);

    if ((new_r = mem_allocate (sizeof(resf_ResourceFile), "resource file list entry")) == NULL)
    {
        return make_error (Toolbox_NoMem, 0);
    }

    if (resf__module_resources)
    {
        new_r->module_swi = resf__module_swi;
        DEBUG debug_output("modres", "Module resources registered with SWI %x\n", resf__module_swi);
    }

    new_r->next = *listhead;
    *listhead = new_r;
    new_r->hdr = h;

    return NULL;
}


static _kernel_oserror *resf__add_to_templates_list (ObjectTemplateHeader *h, resf_Template **listhead)
{
    /*
     * function to add a new template to the list of available templates for
     * this task.
     * Module templates are held in a separate, single list.
     */

    resf_Template *new_t;

    DEBUG mem_chk(h, CHECK_NONZERO | CHECK_HEAP);
    DEBUG mem_chk(listhead, CHECK_NONZERO);
    DEBUG mem_chk(*listhead, CHECK_HEAP);

    if ((new_t = mem_allocate (sizeof(resf_Template), "template name")) == NULL)
    {
        return make_error (Toolbox_NoMem, 0);
    }

    if (resf__module_resources)
    {
        new_t->module_swi = resf__module_swi;
        DEBUG debug_output("modres", "Module templates registered with SWI %x\n", resf__module_swi);
    }

    new_t->next = *listhead;
    *listhead = new_t;
    new_t->hdr = h;

    return NULL;
}


extern void resf_remove_module_resources (int module_swi)
{
    /*
     * Function to remove resources for this object module
     */

    resf_ResourceFile *r = resf__module_resources_list, *prev_r = r;
    resf_Template     *t = resf__module_templates_list, *prev_t = t;

    while (r != NULL)
    {
        resf_ResourceFile *next = r->next;

        DEBUG mem_chk(r, CHECK_HEAP);

        if (r->module_swi == module_swi)
        {
            DEBUG debug_output("modres", "Removing resource file for SWI %x\n", r->module_swi);

            if (r == resf__module_resources_list)
                resf__module_resources_list = next;
            else
            {
                prev_r->next = next;
            }

            if (r->hdr != NULL)
                mem_free ((void *)r->hdr, "removing module resource file buffer");

            mem_free ((void *)r, "removing module resources list");
        }
        else
            prev_r = r;

        r = next;
    }


    while (t != NULL)
    {
        resf_Template *next = t->next;

        if (t->module_swi == module_swi)
        {
            DEBUG debug_output("modres", "Removing template for SWI %x\n", t->module_swi);
            if (t == resf__module_templates_list)
                resf__module_templates_list = next;
            else
            {
                prev_t->next = next;
            }

            mem_free ((void *)t, "removing module templates list");
        }
        else
            prev_t = t;

        t = next;
    }

}


extern void resf_remove_list (void)
{
    /*
     * Function to remove the resources list and templates list for a task
     */

    resf_ResourceFile *r = task->resources_list;
    resf_Template     *t = task->templates_list;

    while (r != NULL)
    {
        resf_ResourceFile *next = r->next;

        DEBUG mem_chk(r, CHECK_HEAP);

        if (r->hdr != NULL)
            mem_free ((void *)r->hdr, "removing resource file buffer");

        mem_free ((void *)r, "removing resources list");

        r = next;
    }
    task->resources_list = NULL;

    while (t != NULL)
    {
        resf_Template *next = t->next;

        mem_free ((void *)t, "removing templates list");

        t = next;
    }
    task->templates_list = NULL;

}


extern ObjectTemplateHeader *resf_find_template (char *name)
{
    /*
     * Function to return a pointer to a template header, given a
     * template name.  First we look in the current task's list, then
     * we try the list of "module" templates.
     */

    resf_Template *t = task->templates_list;

    DEBUG debug_output ("resf_find", "T:Looking for %s\n", name);

    while (t != NULL)
    {
        DEBUG mem_chk(t, CHECK_HEAP);

        if (!strcmp (name, t->hdr->name))
            return t->hdr;

        t = t->next;
    }

    t = resf__module_templates_list;

    while (t != NULL)
    {
        DEBUG mem_chk(t, CHECK_HEAP);

        if (!strcmp (name, t->hdr->name))
            return t->hdr;

        t = t->next;
    }

    return NULL;
}


/* ------------------------------- loading a Resource File ---------------------------------- */

static _kernel_oserror *resf__relocate_object (ResourceFileObjectTemplateHeader *header, void *sprite_area)
{
    /*
     * Function to relocate a Resource File Object Template.  The template is in memory pointed at by
     * header, and the sprite_area is the one allocated by Toolbox_Initialise.
     * Relocations are:
     *      1   StringReference     -- add base of strings table
     *      2   MessageReference    -- add base of messages table
     *      3   SpriteAreaReference -- set to point at sprite_area
     *      4   ObjectOffset        -- add address of object hdr
     *
     * An Object template has its tables following its body in memory,
     * so each object template is thus:
     *
     *             string table offset
     *             msgs table offset
     *             relocs table offset
     *             object header
     *             (possible gap)
     *             object body
     *             (possible gap)
     *             string table
     *             messages table
     *             relocs table
     * All offsets are from the start of the object template.
     *
     * On exit from this function, the block of memory is in a format suitable for use
     * to create an Object from.
     *
     */

    char *template_base       = (char *)header;
    char *string_table_base   = template_base + header->string_table_offset;
    char *message_table_base = template_base + header->message_table_offset;
    RelocationTable *table    = (RelocationTable *)(template_base + header->relocation_table_offset);

    /*
     * first we need to relocate things in the object header:
     *    object body == given as offset, we change it to a real pointer
     *
     */

    DEBUG mem_chk(header, CHECK_HEAP | CHECK_NONZERO);

    DEBUG debug_output ("relocate", "T:Relocating object of class %x\n", header->hdr.class_id);

    header->hdr.body = (void *)((int)header->hdr.body + (char *)&header->hdr);

    DEBUG debug_output ("relocate", "T:Body @@ %p\n", header->hdr.body);

    /* --- do the relocations from relocation table --- */
    if (header->relocation_table_offset != NO_ENTRY)
    {
        int r;
        int nrelocs = table->num_relocations;
        Relocation *reloc_table = table->relocations;

        DEBUG debug_output ("relocate", "T:%d relocations\n", nrelocs);

        for (r = 0; r < nrelocs; r++)
        {
            int *word_to_relocate = (int *)((char *)(header->hdr.body) + reloc_table[r].word_to_relocate);

            DEBUG mem_chk(word_to_relocate, CHECK_HEAP | CHECK_NONZERO);

            switch (reloc_table[r].directive)
            {
                case Relocate_StringReference:
                    DEBUG debug_output ("relocate", "T:(String) @@ %p to %p\n", word_to_relocate, (int*)(*word_to_relocate+(int)string_table_base));
                    if (*word_to_relocate == -1)
                        *word_to_relocate = 0;
                    else
                        *word_to_relocate += (int)string_table_base;
                    break;

                case Relocate_MsgReference:
                    DEBUG debug_output ("relocate", "T:(Message) @@ %p to %p\n", word_to_relocate, (int*)(*word_to_relocate+(int)message_table_base));
                    if (*word_to_relocate == -1)
                        *word_to_relocate = 0;
                    else
                        *word_to_relocate += (int)message_table_base;
                    break;

                case Relocate_SpriteAreaReference:
                    DEBUG debug_output ("relocate", "T:(Sprite)\n @@ %p to %p\n", word_to_relocate, (int *)sprite_area);
                    if (*word_to_relocate == -1)
                        *word_to_relocate = 1;     /* wimp sprite area */
                    else
                        *word_to_relocate = (int)sprite_area;
                    break;

                case Relocate_ObjectOffset:
                    DEBUG debug_output ("relocate", "T:(ObjectOffset) @@ %p to %p\n", word_to_relocate, (int*)(*word_to_relocate+(int)header->hdr.body));
                    if (*word_to_relocate == -1)
                        *word_to_relocate = 0;
                    else
                        *word_to_relocate += (int)header->hdr.body;
                    break;

                default:
                    break;
            }
        }
    }

    return 0;
}



extern _kernel_oserror *resf_template_lookup (_kernel_swi_regs *r)
{
    /*
     * Function to lookup a given template and return a pointer to its
     * object header (to the client) - just uses the function resf_find_template.
     *
     */

    ObjectTemplateHeader *h = resf_find_template ((char *)r->r[1]);

    r->r[0] = (int)h;

    return NULL;
}


extern void resf_module_resources (void)
{
    resf__module_resources = TRUE;
}

extern void resf_module_swi (int swi_no)
{
    resf__module_swi = swi_no;
}


extern _kernel_oserror *resf_load_resource_file (_kernel_swi_regs *r)
{
    /*
     * Function to load a resource file into memory.  The file is relocated, and then
     * the memory block is linked to the calling task's list of templates
     *
     */

    _kernel_oserror                  *e;
    _kernel_swi_regs                  regs;
    ResourceFileHeader               *buffer;
    ResourceFileObjectTemplateHeader *t_hdr;
    int                               buffer_size;
    ResourceFileObjectTemplateHeader *eof;
    resf_Template                    *old_templates_list = NULL, *t;
    void                             *sprite_area;


    resource_file_being_loaded = 1;

    /*
     * get sprite area used by this task for use in sprite references
     */

    if (!resf__module_resources)
    {
        regs.r[0] = Toolbox_GetSysInfo_SpriteArea;
        if ((e = _kernel_swi (Toolbox_GetSysInfo, &regs, &regs)) != NULL)
        {
            resource_file_being_loaded = 0;
            return e;
        }
        sprite_area = (void *)regs.r[0];
    }
    else
        sprite_area = (void *)1;  /* wimp sprite area */


    /*
     * allocate a buffer for the file
     */

    regs.r[0] = 17;             /* no path */
    regs.r[1] = r->r[1];        /* filename */

    if ((e = _kernel_swi (OS_File, &regs, &regs)) != NULL)
        goto error;

    if (regs.r[0] == 1)   /* file found */
    {
        buffer_size = regs.r[4];
        if ((buffer = mem_allocate (buffer_size, "buffer for resources")) == 0)
        {
                e = make_error (Toolbox_NoMem, 0);
                goto error;
        }
    }
    else
    {
        resource_file_being_loaded = 0;
        return make_error (Toolbox_BadResFile, 0);
    }

    /*
     * load resource file into buffer
     */

    regs.r[0] = 16;   /* no path */
    regs.r[1] = r->r[1];     /* filename */
    regs.r[2] = (int)buffer;
    regs.r[3] = 0;    /* load at given address */

    if ((e = _kernel_swi (OS_File, &regs, &regs)) != NULL)
        goto error_free_memory;


    /* check res file vsn and resf id here */

#define magic_RESF 0x46534552
    if (buffer->file_id != magic_RESF)
    {
        e = make_error (Toolbox_NotaResFile, 0);
        goto error_free_memory;
    }

    if (buffer->version_number > ResourceFileVersion)
    {
        e = make_error_hex (Toolbox_BadResFileVersion, 1, buffer->version_number);
        goto error_free_memory;
    }

    /*
     * remember the old templates list, so that we can determine which
     * are new ones, later when we go through to see which objects should
     * be auto-created
     */

    if (!resf__module_resources)
        old_templates_list = task->templates_list;


    /*
     * relocate Resource file:
     *    take each object in turn and:
     *        relocate it
     *        add its templates to the list of known templates
     *
     */

    t_hdr = (ResourceFileObjectTemplateHeader *)((char *)buffer + buffer->object_offset);
    eof   = (ResourceFileObjectTemplateHeader *)((char *)buffer + buffer_size);

    DEBUG mem_chk(t_hdr, CHECK_HEAP | CHECK_NONZERO);
    DEBUG debug_output ("resf_load", "T:t_hdr %p eof %p\n", t_hdr, eof);

    while (t_hdr < eof && buffer->object_offset != NO_ENTRY)
    {
        int nrelocs = ((RelocationTable *)((char*)t_hdr + t_hdr->relocation_table_offset))->num_relocations;

        DEBUG debug_output ("resf_load", "T:t_hdr now %p\n", t_hdr);

        if ((e = resf__relocate_object (t_hdr, sprite_area)) != NULL)
            goto error_free_memory;

        if (resf__module_resources)
        {
            if ((e = resf__add_to_templates_list (&t_hdr->hdr, &resf__module_templates_list)) != NULL)
                goto error_free_memory;
        }
        else
        {
            if ((e = resf__add_to_templates_list (&t_hdr->hdr, &task->templates_list)) != NULL)
                goto error_free_memory;
        }

        t_hdr = resf__next_template (t_hdr, nrelocs);
    }


    /*
     * now we go through all the newly loaded templates, creating objects
     * from the ones which have the auto-create bit set.
     *
     */

    if (!resf__module_resources)
    {
        t = task->templates_list;

        DEBUG mem_chk(t, CHECK_HEAP);

        while (t != NULL && t != old_templates_list)
        {
            _kernel_swi_regs regs;

            DEBUG mem_chk(t, CHECK_HEAP);
            DEBUG debug_output ("resf_load", "T:Looking at %s\n", t->hdr->name);

            if (t->hdr->flags & Object_CreateOnLoad)
            {
                regs.r[0] = Toolbox_CreateObject_InCore;
                regs.r[1] = (int)t->hdr;

                DEBUG debug_output ("resf_load", "T:Auto-creating %s\n", t->hdr->name);

                if ((e = object_create (&regs)) != NULL)
                    goto error_free_memory;
            }

            t = t->next;
        }
    }


    /*
     * add to list of resource files for this task (or for module)
     */

    if (resf__module_resources)
    {
        if ((e = resf__add_to_resources_list (buffer, &resf__module_resources_list)) != NULL)
            goto error_free_memory;
    }
    else
    {
        if ((e = resf__add_to_resources_list (buffer, &task->resources_list)) != NULL)
            goto error_free_memory;
    }

    resf__module_resources = FALSE;
    resource_file_being_loaded = 0;
    return NULL;


error_free_memory:
    DEBUG mem_chk(buffer, CHECK_HEAP | CHECK_NONZERO);
    mem_free(buffer, "Freeing resource file block after load error");

error:
    resf__module_resources = FALSE;
    resource_file_being_loaded = 0;
    return e;
}
@


4.4
log
@Fix null pointer access
Detail:
  c/resf - Fixed null pointer acess in resf_load_resource_file when module resources were being used
Admin:
  Tested on rev A2 BB-xM


Version 1.53. Tagged as 'Toolbox-1_53'
@
text
@a32 1
#include "services.h"
d36 1
a36 1
#include "objects.toolbox.h"
d431 1
a431 1
    resf_Template                    *old_templates_list, *t;
@


4.3
log
@  Changes to co-exist with Common-0_02 (renaming class to class_id
  ObjectID cross-validation added.
Detail:
  Changes to co-exist with Common-0_02 (renaming class to class_id
    to stop the compiler moaning about the use of C++ reserved words)
  A fault has been uncovered which meant that object IDs pointing to
    the same block of memory could be generated by creating an object
    immediately after deleting another object.  The ID->pointer mapping
    did not care to notice that multiple IDs were in existence which
    pointed at the same memory (albeit one of the IDs having been
    "deleted" - the Message_ToolboxObjectDeleted for it is still yet
    to be delivered to the application when the new object is created.
    thus making the old deleted ID apparently valid again).  This
    could cause confusion if apps tried to use objects which had been
    deleted but which Toolbox was still saying were OK because they
    mapped to a current object block.  Toolbox now caches the ObjectID
    it generates for a block when it is created and will insist on it
    matching in order to pass the ID->pointer validation.  The standard
    Invalid Object ID error is thrown if the ID does not match.
Admin:
  Requires Common-0-02 or later (RiscOS/Sources/Toolbox/Common)

Version 1.47. Tagged as 'Toolbox-1_47'
@
text
@d515 2
a516 1
    old_templates_list = task->templates_list;
@


4.2
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@d325 1
a325 1
    DEBUG debug_output ("relocate", "T:Relocating object of class %x\n", header->hdr.class);
@


4.1
log
@Initial revision
@
text
@d23 1
a23 1
              
d38 1
a38 1
 
d99 1
a99 1
                                                         
d147 1
a147 1
    resf_ResourceFile *r = resf__module_resources_list, *prev_r = r; 
d275 1
a275 1
    return NULL; 
d284 1
a284 1
     * Function to relocate a Resource File Object Template.  The template is in memory pointed at by 
d292 1
a292 1
     * An Object template has its tables following its body in memory, 
d328 1
a328 1
 
d337 1
a337 1
  
d339 1
a339 1
      
d346 1
a346 1
            switch (reloc_table[r].directive) 
d392 1
a392 1
{ 
d468 1
a468 1
        buffer_size = regs.r[4];    
d482 1
a482 1
     * load resource file into buffer 
d496 2
a497 1
    if (buffer->file_id != 'FSER')
d516 1
a516 1
 
d579 1
a579 1
                
d585 1
a585 1
     
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
