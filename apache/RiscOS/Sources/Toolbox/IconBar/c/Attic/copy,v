head	4.3;
access;
symbols
	RO_5_07:4.3
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.2
	Daytona_bp:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	98.02.04.19.48.12;	author sbrodie;	state dead;
branches;
next	4.2;

4.2
date	97.07.08.10.13.09;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.31;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.31;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.42.31;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.15.00.22.29;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.14.01;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.38.06;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   copy.c
 * Purpose: copy an Iconbar Object
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.iconbar.h"

#include "object.h"
#include "task.h"

#include "copy.h"


extern _kernel_oserror *copy_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to copy an object
     * R0 = 2
     * R1 = Object ID
     * R2 = internal handle returned when "src" Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9:
     *      R0 = flags
     *           bit 0 set => recursively copy the Object
     *      R1 = source Object ID
     */

    /*
     * The Toolbox has already checked that this is not just a copy
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     */

#ifdef COPY_OBJECT

    _kernel_swi_regs     *user_regs           = (_kernel_swi_regs *)r->r[4];
    _kernel_oserror      *e                   = NULL;
    Object               *dst_object;
    Object               *src_object;
    int                   object_size;
    char                 *indirected_data;

    DEBUG debug_output ("copy", "I:Copy iconbar object -- ID 0x%x, task 0x%x, flags 0x%x\n", r->r[1], r->r[3], user_regs->r[0]);

    /*
     * get memory for copy of object.  Must be kept in step with create_object's call
     * to mem_allocate
     */

    object_size = sizeof(Object) +
                  src_object->max_help +                     /* max bytes for help message */
                  src_object->max_text_len +                 /* max bytes for text string */
                  src_object->max_sprite +                   /* max bytes for sprite name */
                ((src_object->flags & Iconbar_HasText)?1:0); /* one more byte for "s" in valid string */

    if ((dst_object = mem_allocate (object_size, "iconbar object (copy)")) == NULL)
        return make_error (Iconbar_AllocFailed, 0);

    indirected_data = (char *)(dst_object+1);    /* yuk */

    memcpy (&dst_object, &src_object, object_size);


    /*
     * the new copy is marked as not showing and gets an icon handle of 0
     */

    dst_object->state &= ~object_SHOWING;
    dst_object->wimp_icon_handle = 0;


    /*
     * copy gets new Object ID
     */

    dst_object->id = (ObjectID)r->r[1];


    /*
     * fix up copy's pointers to indirected data!
     */

    dst_object->help_message = indirected_data;
    if (dst_object->flags & Iconbar_HasText)
    {
        dst_object->icon.data.indirect_text_and_sprite.buffer = indirected_data + dst_object->max_help;
        dst_object->icon.data.indirect_text_and_sprite.valid_string = indirected_data + dst_object->max_help + dst_object->max_text_len;
    }
    else
        dst_object->icon.data.indirect_sprite.sprite.name = indirected_data + dst_object->max_help;


    /*
     * if recursive copying is on, then we create new menu, select_show and adjust_show objects
     * if they were present in the source object
     */

    if (!(user_regs->r[0] & Toolbox_CopyObject_DontRecurse))
    {
        /* the attached menu */

        if (src_object->menu != 0)
        {
            DEBUG debug_output ("copy", "I:Making attached menu\n");

            if ((e = _swix (Toolbox_CopyObject, _INR(0,1)|_OUT(0),
                             0, src_object->menu,
                             &dst_object->menu
                            )) != NULL)
                goto error3;
        }


        /* the attached object to be shown on a select click */

        if (src_object->select_show != 0)
        {
            DEBUG debug_output ("copy", "I:Making attached select object\n");

            if ((e = _swix (Toolbox_CopyObject, _INR(0,1)|_OUT(0),
                             0, src_object->select_show,
                             &dst_object->select_show
                            )) != NULL)
                goto error2;
        }


        /* the attached object to be shown on an adjust click */

        if (src_object->adjust_show != 0)
        {
            DEBUG debug_output ("copy", "I:Making attached adjust object\n");

            if ((e = _swix (Toolbox_CopyObject, _INR(0,1)|_OUT(0),
                             0, src_object->adjust_show,
                             &dst_object->adjust_show
                            )) != NULL)
                goto error1;
        }
    }


    /*
     * We return internal handle in Toolbox's R0
     */

    r->r[0] = (int)dst_object;


    /*
     * ... and add to list for this task
     */

    dst_object->next = t->object_list;
    dst_object->prev = NULL;
    if (t->object_list != NULL)
        t->object_list->prev = dst_object;
    t->object_list = dst_object;


    return NULL;


error1:

    if (dst_object->select_show != 0)
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, dst_object->select_show);

error2:

    if (dst_object->menu != 0)
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, dst_object->menu);

error3:

    mem_free (dst_object, "iconbar copy error");

    return e;
#else
    return NULL;
#endif
}

@


4.2
log
@Ursula branch merged
@
text
@@


4.1
log
@Initial revision
@
text
@d48 1
a48 1
    /* 
a73 1
    _kernel_swi_regs      regs;
d75 1
a75 1
    Object               *src_object; 
d85 2
a86 2
    
    object_size = sizeof(Object) +  
d142 4
a145 3
            regs.r[0] = 0;
            regs.r[1] = (int)src_object->menu;
            if ((e = _kernel_swi (Toolbox_CopyObject, &regs, &regs)) != NULL)
a146 1
            dst_object->menu = (ObjectID)regs.r[0];
d156 4
a159 3
            regs.r[0] = 0;
            regs.r[1] = (int)src_object->select_show;
            if ((e = _kernel_swi (Toolbox_CopyObject, &regs, &regs)) != NULL)
a160 1
            dst_object->select_show = (ObjectID)regs.r[0];
d170 4
a173 3
            regs.r[0] = 0;
            regs.r[1] = (int)src_object->adjust_show;
            if ((e = _kernel_swi (Toolbox_CopyObject, &regs, &regs)) != NULL)
a174 1
            dst_object->adjust_show = (ObjectID)regs.r[0];
d187 1
a187 1
     * ... and add to list for this task 
d197 2
a198 1
    return NULL;         
a199 1
      
d203 1
a203 5
    {
        regs.r[0] = 0;
        regs.r[1] = (int)dst_object->select_show;
        _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
    }
d208 1
a208 5
    {
        regs.r[0] = 0;
        regs.r[1] = (int)dst_object->menu;
        _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
    }
d214 1
a214 1
    return e;     
@


4.1.4.1
log
@Modified to support tall icon bar icons
@
text
@d48 1
a48 1
    /*
d74 1
d76 1
a76 1
    Object               *src_object;
d86 2
a87 2

    object_size = sizeof(Object) +
d143 3
a145 4
            if ((e = _swix (Toolbox_CopyObject, _INR(0,1)|_OUT(0),
                             0, src_object->menu,
                             &dst_object->menu
                            )) != NULL)
d147 1
d157 3
a159 4
            if ((e = _swix (Toolbox_CopyObject, _INR(0,1)|_OUT(0),
                             0, src_object->select_show,
                             &dst_object->select_show
                            )) != NULL)
d161 1
d171 3
a173 4
            if ((e = _swix (Toolbox_CopyObject, _INR(0,1)|_OUT(0),
                             0, src_object->adjust_show,
                             &dst_object->adjust_show
                            )) != NULL)
d175 1
d188 1
a188 1
     * ... and add to list for this task
d198 1
a198 2
    return NULL;

d200 1
d204 5
a208 1
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, dst_object->select_show);
d213 5
a217 1
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, dst_object->menu);
d223 1
a223 1
    return e;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
