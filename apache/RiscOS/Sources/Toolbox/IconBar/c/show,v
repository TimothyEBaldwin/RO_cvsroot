head	4.3;
access;
symbols
	IconBar-1_23:4.3
	IconBar-1_22:4.3
	IconBar-1_21:4.2
	RO_5_07:4.2
	IconBar-1_20:4.2
	IconBar-1_19:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.8
	nicke_IconBar-1_18:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_IconBar_1_17:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.21.33.34;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	2WyuTvIyJTv4uNxy;

4.2
date	97.07.08.10.13.15;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.32;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.32;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.42.40;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.15.00.22.35;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.14.11;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.38.16;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 1.22. Tagged as 'IconBar-1_22'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   show.c
 * Purpose: show an Iconbar Object
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "messages.h"

#include "objects/toolbox.h"
#include "objects/iconbar.h"

#include "object.h"
#include "task.h"
#include "globals.h"

#include "show.h"



extern _kernel_oserror *show_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to show an object
     * R0 = 3
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  "show type"
     *      R3 -> buffer giving Object-specific data for showing this
     *            Object:
     *            If position is -3 or -4, then R3+0 gives wimp icon handle
     *            of icon to display to the left or right of.
     *      R4 =  Parent Object ID
     *      R5 =  Parent Component ID
     */

    /*
     * Function to "display" an Iconbar Object on the screen.  If R2 == 0, then
     * display in default place.
     *
     * For an Iconbar Object, "show" actually means "create the wimp icon"!
     * Creation is done using the icon data block which was filled in when the
     * Iconbar Object was created.
     *
     * "Show" also means that we start taking an interest in events on the
     * Iconbar Object (when it was hidden none could happen).
     *
     */

    Object           *iconbar_icon = (Object *)r->r[2];
    _kernel_swi_regs *user_regs = (_kernel_swi_regs *)r->r[4];
    _kernel_oserror  *e;
    wimp_IconCreate   icon;
    int               priority;

    IGNORE(t);

    DEBUG debug_output ("show", "I:Showing object %p\n", (void *)iconbar_icon);


    if (iconbar_icon->state & object_SHOWING)
        return NULL;

    if (user_regs->r[2] != Toolbox_ShowObject_Default)
    {
        DEBUG debug_output ("show", "I:non-default show\n");

        if ((iconbar_icon->position == -3 || iconbar_icon->position == -4) && user_regs->r[3] != 0)
            priority = *((int *)user_regs->r[3]);
        else
        {
            return make_error (Iconbar_WrongShowType, 0);
        }
    }
    else
        priority = iconbar_icon->priority;

    icon.window_handle = iconbar_icon->position;
    icon.icon = iconbar_icon->icon;
    if ((e = _swix (Wimp_CreateIcon, _INR(0,1)|_OUT(0), priority, &icon,
                                  &iconbar_icon->wimp_icon_handle)) != NULL)
    {
        DEBUG debug_output ("show", "I:Error while showing icon %s\n", e->errmess);

        return e;
    }
    else
    {
        iconbar_icon->state |= object_SHOWING;
    }


    /*
     * The iconbar object is now showing, so we register interest in the events
     * we can handle.
     * We pass the internal handle of the Iconbar Object as the value to be sent
     * back to us in the postfilter.  Note there is one postfilter per iconbar
     * object (overhead will be OK, since not many Iconbar Objects will be created
     * for any one task.
     * We are interested in:
     *      wimp_EBUT - button click to either show any attached menu or
     *                  raise the toolbox event associated with a button click.
     *      wimp_MHELP_REQUEST - send back reply
     *      Iconbar_Select/AdjustAboutToBeShown - we ned to see this to know to
     *                  show the object when Wimp_Poll is next called.
     */

    if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                        0,
                        Iconbar_PostFilter,
                        iconbar_icon,
                        Toolbox_RegisterPostFilter_WimpEvent,
                        events_of_interest
                    )) != NULL)
        return e;

   if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                        0,
                        Iconbar_PostFilter,
                        iconbar_icon,
                        Toolbox_RegisterPostFilter_WimpMessage,
                        messages_of_interest
                    )) != NULL)
        return e;

   if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                        0,
                        Iconbar_PostFilter,
                        iconbar_icon,
                        Toolbox_RegisterPostFilter_ToolboxEvent,
                        toolbox_events_of_interest
                    )) != NULL)
        return e;

    /*
     * we make a note that another object is showing, so we know in the prefilter
     * whether we are interested in events.
     */

    t->nshowing++;

    return NULL;
}

@


4.2
log
@Ursula branch merged
@
text
@a29 1
#include "services.h"
d35 2
a36 2
#include "objects.toolbox.h"
#include "objects.iconbar.h"
@


4.1
log
@Initial revision
@
text
@d50 1
a50 1
    /* 
a82 1
    _kernel_swi_regs  regs;
d85 1
d100 1
a100 1
            regs.r[0] = *((int *)user_regs->r[3]);
d107 1
a107 1
        regs.r[0] = iconbar_icon->priority;
d111 2
a112 2
    regs.r[1] = (int)&icon;
    if ((e = _kernel_swi (Wimp_CreateIcon, &regs, &regs)) != NULL)
a119 1
        iconbar_icon->wimp_icon_handle = regs.r[0];
d139 7
a145 7
    regs.r[0] = 0;
    regs.r[1] = Iconbar_PostFilter;
    regs.r[2] = (int)iconbar_icon;
    regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
    regs.r[4] = (int)events_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
d148 7
a154 7
    regs.r[0] = 0;
    regs.r[1] = Iconbar_PostFilter;
    regs.r[2] = (int)iconbar_icon;
    regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
    regs.r[4] = (int)messages_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
d157 7
a163 7
    regs.r[0] = 0;
    regs.r[1] = Iconbar_PostFilter;
    regs.r[2] = (int)iconbar_icon;
    regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
    regs.r[4] = (int)toolbox_events_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
@


4.1.4.1
log
@Modified to support tall icon bar icons
@
text
@d50 1
a50 1
    /*
d83 1
a85 1
    int               priority;
d100 1
a100 1
            priority = *((int *)user_regs->r[3]);
d107 1
a107 1
        priority = iconbar_icon->priority;
d111 2
a112 2
    if ((e = _swix (Wimp_CreateIcon, _INR(0,1)|_OUT(0), priority, &icon,
                                  &iconbar_icon->wimp_icon_handle)) != NULL)
d120 1
d140 7
a146 7
    if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                        0,
                        Iconbar_PostFilter,
                        iconbar_icon,
                        Toolbox_RegisterPostFilter_WimpEvent,
                        events_of_interest
                    )) != NULL)
d149 7
a155 7
   if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                        0,
                        Iconbar_PostFilter,
                        iconbar_icon,
                        Toolbox_RegisterPostFilter_WimpMessage,
                        messages_of_interest
                    )) != NULL)
d158 7
a164 7
   if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                        0,
                        Iconbar_PostFilter,
                        iconbar_icon,
                        Toolbox_RegisterPostFilter_ToolboxEvent,
                        toolbox_events_of_interest
                    )) != NULL)
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
