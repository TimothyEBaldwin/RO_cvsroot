head	4.6;
access;
symbols
	IconBar-1_23:4.6
	IconBar-1_22:4.6
	IconBar-1_21:4.5
	RO_5_07:4.4
	IconBar-1_20:4.4
	IconBar-1_19:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Ursula_RiscPC:4.3.0.4
	nicke_IconBar-1_18:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.2
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.3
	sbrodie_IconBar_1_17:4.3
	sbrodie_Expresso_BETA6_19980204:4.3
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2015.08.18.21.33.34;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	2WyuTvIyJTv4uNxy;

4.5
date	2012.10.03.20.23.46;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	xLBz2PPCGG4GOYmw;

4.4
date	2000.05.04.12.54.52;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	98.02.04.19.48.13;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.07.08.10.13.13;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.32;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.32;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.42.38;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.15.00.22.33;	author kbracey;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	97.05.19.15.53.03;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.14.09;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.38.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 1.22. Tagged as 'IconBar-1_22'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   main.c
 * Purpose: main module of a Iconbar Object module
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "Global/Services.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "rmensure.h"
#include "objmodule.h"

#include "objects/toolbox.h"
#include "string32.h"
#include "objects/iconbar.h"

#include "create.h"
#include "delete.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"
#include "globals.h"

#include "task.h"

#include "IconBarHdr.h"


#define MAX_CLASS_SWI_METHODS 7
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) =
       {
            create_object,
            delete_object,
            NULL /*copy_object*/,
            show_object,
            hide_object,
            getstate_object,
            miscop_object
       };




/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

#ifndef ROM
extern int Resources(void);
#endif

extern _kernel_oserror *Iconbar_finalise (int fatal, int podule, void *pw)
{
    /*
     * Function to clean up before module exit
     */

    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    /*
     * refuse to finalise if tasks active
     */

    if (task_any_active())
        return make_error (Iconbar_TasksActive, 0);


    /*
     * close our messages file
     */

    messages_file_close();


#ifndef ROM
    /*
     * ... and deregister from ResourceFS
     */

    objmodule_deregister_resources(Resources());
#endif


    /*
     * ... and deregister from Toolbox
     */

    objmodule_deregister(0, Iconbar_ObjectClass);

    /*
     * free up memory we may have left allocated
     */

    mem_free_all ();

    return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */


extern _kernel_oserror *Iconbar_init(const char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror *e;

    IGNORE(cmd_tail);
    IGNORE(podule_base);
    IGNORE(pw);

    DEBUG debug_set_var_name("Iconbar$Debug");

    /*
     * ensure that the Toolbox is there
     */

    if ((e = rmensure ("Toolbox", "Toolbox.Toolbox", "0.00")) != NULL)
    {
        DEBUG debug_output ("init", "I:rmensure failed %s\n", e->errmess);
        return e;
    }

#ifndef ROM
    /*
     * register our resources with ResourceFS
     */

    if ((e = objmodule_register_resources(Resources())) != NULL)
    {
        DEBUG debug_output ("init", "I:resourcefs register failed %s\n", e->errmess);
        return e;
    }
#endif

    /*
     * register our messages file with MessageTrans
     */

    objmodule_ensure_path("Iconbar$Path", "Resources:$.Resources.Iconbar.");

    if ((e = messages_file_open ("Iconbar:Messages")) != NULL)
        return e;


    /*
     * register with the Toolbox as an Object Module
     */

    return objmodule_register_with_toolbox(0, Iconbar_ObjectClass, Iconbar_ClassSWI, 0);
}



/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */


extern void Iconbar_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    IGNORE(pw);

    DEBUG debug_output ("services", "I:service call %x\n", service_number);

    switch (service_number)
    {

        case Service_ToolboxTaskDied:
            /*
             * task dying - r0 holds task handle
             */

            task_remove (r->r[0]);

            break;

        case Service_ToolboxTaskBorn:
            /* Toolbox task has just started R0  == wimp task handle */

            /*
             * create a new "task descriptor"
             */

            task_add (r->r[0]);

            break;

        case Service_ToolboxStarting:
            /*
             * register with the Toolbox as an Object Module
             */

            _swix (Toolbox_RegisterObjectModule, _INR(0,3),
                        0,
                        Iconbar_ObjectClass,
                        Iconbar_ClassSWI,
                        0
                  );

            break;

        default:
            break;
    }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


extern _kernel_oserror *Iconbar_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    _kernel_oserror *e = NULL;
    TaskDescriptor  *t;

    IGNORE(pw);

    DEBUG debug_output ("SWIs", "I:Iconbar SWI %d (reason %d)\n", swi_no, r->r[0]);

    switch (swi_no)
    {
        case Iconbar_ClassSWI - Iconbar_00:
            if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
                return make_error_hex (Iconbar_NoSuchMethod, 1, r->r[0]);
            else
            {
                t = task_find (r->r[3]);

                if (t == NULL)
                {
                    return make_error_hex (Iconbar_NoSuchTask, 1, r->r[3]);
                }

                e = (*class_swi_methods[r->r[0]])(r, t);
            }
            break;

        case Iconbar_PostFilter - Iconbar_00:
            DEBUG debug_output ("postfilters", "I:Calling postfilter regs @@ %p\n", &r->r[0]);
            e = events_postfilter (r);
            break;

        case Iconbar_PreFilter - Iconbar_00:
            e = events_prefilter (r);
            break;

        default:
            e = error_BAD_SWI;
            break;
    }

    return e;
}

#if debugging
/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *Iconbar_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case CMD_Iconbar_Memory:
            mem_print_list();
            break;

        default:
            break;
    }

    return NULL;
}
#endif
@


4.5
log
@Correction to case when using Iconbar$Path
Noted in passing, peripherally related to ticket #318.

Version 1.21. Tagged as 'IconBar-1_21'
@
text
@d27 1
a30 1
#include "services.h"
d37 1
a37 1
#include "objects.toolbox.h"
d39 1
a39 1
#include "objects.iconbar.h"
d52 1
a52 1
#include "main.h"
d72 2
a73 4
#ifdef ROM
static _kernel_oserror *__ROM;
#else
extern int       messages_file(void);
d106 1
a106 1
    objmodule_deregister_resources(messages_file());
a121 5
#ifdef ROM
    if(!__ROM) _swix(0xa2c41, 0);
#endif


d129 1
a129 1
extern _kernel_oserror *Iconbar_init(char *cmd_tail, int podule_base, void *pw)
a131 3
#ifndef ROM
    extern int messages_file(void);
#endif
a136 4
#ifdef ROM
    __ROM = _swix(0xa2c43, _IN(0), pw);
#endif

d154 1
a154 1
    if ((e = objmodule_register_resources(messages_file())) != NULL)
d245 1
a245 1
        case Iconbar_ClassSWI - Iconbar_SWIChunkBase:
d261 1
a261 1
        case Iconbar_PostFilter - Iconbar_SWIChunkBase:
d266 1
a266 1
        case Iconbar_PreFilter - Iconbar_SWIChunkBase:
d271 1
d278 1
d281 1
a281 1
extern _kernel_oserror *Iconbar_commands(char *arg_string, int argc, int cmd_no, void *pw)
d289 1
a289 1
        case 0:
d299 1
a299 1

@


4.4
log
@  Changed to use common Makefile system.
  Debug build facility added.
Detail:
  Uses core facilities from Common instead of having private copies.
  Makefile vastly simplified to simply define a few macros, then include
    the common Toolbox Makefile which is exported by Common.
Admin:
  Requires Common 0.09 or later (RiscOS/Sources/Toolbox/Common; Common-0_09)
  Requires BuildSys 1.92 or later (RiscOS/BuildSys; BuildSys-1_92)
  Requires Library 0.41 or later (RiscOS/Library; Library-0_41)

Version 1.20. Tagged as 'IconBar-1_20'
@
text
@d181 1
a181 1
    if ((e = messages_file_open ("IconBar:Messages")) != NULL)
@


4.3
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@d35 1
d74 2
a83 4
#ifndef ROM
    extern int       messages_file(void);
#endif

d108 1
a108 1
    _swix (ResourceFS_DeregisterFiles, _IN(0), messages_file());
d116 1
a116 1
    _swix (Toolbox_DeRegisterObjectModule, _INR(0,1), 0, Iconbar_ObjectClass);
a137 1
    char            *messages_filename;
d168 1
a168 1
    if ((e = _swix (ResourceFS_RegisterFiles, _IN(0), messages_file())) != NULL)
d179 1
a179 4
    if (getenv ("Iconbar$Path") == NULL)
        messages_filename = "Resources:$.Resources.Iconbar.Messages";
    else
        messages_filename = "Iconbar:Messages";
d181 1
a181 1
    if ((e = messages_file_open (messages_filename)) != NULL)
d189 1
a189 12
    if ((e = _swix (Toolbox_RegisterObjectModule, _INR(0,3),
                        0,
                        Iconbar_ObjectClass,
                        Iconbar_ClassSWI,
                        0
                   )) != NULL)
    {
        DEBUG debug_output("init", "I:toolbox register failed %s\n", e->errmess);
        return e;
    }

    return NULL;
d257 1
a257 1
    switch (swi_no + Iconbar_SWIChunkBase)
d259 1
a259 1
        case Iconbar_ClassSWI:
d275 1
a275 1
        case Iconbar_PostFilter:
d280 1
a280 1
        case Iconbar_PreFilter:
@


4.2
log
@Ursula branch merged
@
text
@a41 1
#include "copy.h"
d59 1
a59 1
            copy_object,
@


4.1
log
@Initial revision
@
text
@d56 1
a56 1
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) = 
a81 1
    _kernel_swi_regs regs;
d110 1
a110 2
    regs.r[0] = messages_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);
d113 1
d118 1
a118 4
    regs.r[0] = 0;
    regs.r[1] = Iconbar_ObjectClass;
    _kernel_swi (Toolbox_DeRegisterObjectModule, &regs, &regs);

d126 1
a126 1
#ifdef ROM 
a140 1
    _kernel_swi_regs regs;
d171 1
a171 2
    regs.r[0] = messages_file();
    if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
d183 1
a183 1
        messages_filename = "Resources:Resources.Iconbar.Messages";
d191 1
a191 1
    /* 
d195 6
a200 5
    regs.r[0] = 0;
    regs.r[1] = Iconbar_ObjectClass;
    regs.r[2] = Iconbar_ClassSWI;
    regs.r[3] = 0;
    if ((e = _kernel_swi (Toolbox_RegisterObjectModule, &regs, &regs)) != NULL)
d215 1
a215 3
{   
    _kernel_swi_regs regs;
          
d224 2
a225 2
            /* 
             * task dying - r0 holds task handle 
d227 1
a227 1
        
d244 1
a244 1
            /* 
d248 7
a254 6
            regs.r[0] = 0;
            regs.r[1] = Iconbar_ObjectClass;
            regs.r[2] = Iconbar_ClassSWI;
            regs.r[3] = 0;
            _kernel_swi (Toolbox_RegisterObjectModule, &regs, &regs);
                
@


4.1.4.1
log
@Modified to support tall icon bar icons
@
text
@d56 1
a56 1
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) =
d82 1
d111 2
a112 1
    _swix (ResourceFS_DeregisterFiles, _IN(0), messages_file());
a114 1

d119 4
a122 1
    _swix (Toolbox_DeRegisterObjectModule, _INR(0,1), 0, Iconbar_ObjectClass);
d130 1
a130 1
#ifdef ROM
d145 1
d176 2
a177 1
    if ((e = _swix (ResourceFS_RegisterFiles, _IN(0), messages_file())) != NULL)
d197 1
a197 1
    /*
d201 5
a205 6
    if ((e = _swix (Toolbox_RegisterObjectModule, _INR(0,3),
                        0,
                        Iconbar_ObjectClass,
                        Iconbar_ClassSWI,
                        0
                   )) != NULL)
d220 3
a222 1
{
d231 2
a232 2
            /*
             * task dying - r0 holds task handle
d234 1
a234 1

d251 1
a251 1
            /*
d255 6
a260 7
            _swix (Toolbox_RegisterObjectModule, _INR(0,3),
                        0,
                        Iconbar_ObjectClass,
                        Iconbar_ClassSWI,
                        0
                  );

@


4.1.4.2
log
@Added tokenisation directives to Messages files.
Made modules open "Resources:$...." not "Resources:....".
@
text
@d183 1
a183 1
        messages_filename = "Resources:$.Resources.Iconbar.Messages";
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
