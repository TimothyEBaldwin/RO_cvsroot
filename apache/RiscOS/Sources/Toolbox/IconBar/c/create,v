head	4.4;
access;
symbols
	IconBar-1_23:4.4
	IconBar-1_22:4.4
	IconBar-1_21:4.3
	RO_5_07:4.3
	IconBar-1_20:4.3
	IconBar-1_19:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Ursula_RiscPC:4.3.0.8
	nicke_IconBar-1_18:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.6
	Ursula_12May1998:4.3.0.4
	rthornb_UrsulaBuild_01May1998:4.3
	Daytona:4.3.0.2
	Daytona_bp:4.3
	sbrodie_Expresso_final_190298:4.3
	sbrodie_IconBar_1_17:4.3
	sbrodie_Expresso_BETA6_19980204:4.3
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2015.08.18.21.33.33;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	2WyuTvIyJTv4uNxy;

4.3
date	97.08.21.16.33.25;	author pwombwel;	state Exp;
branches;
next	4.2;

4.2
date	97.07.08.10.13.10;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.31;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.31;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.42.32;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.15.00.22.30;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.14.02;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.38.08;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 1.22. Tagged as 'IconBar-1_22'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   create.c
 * Purpose: create an Iconbar Object
 * Author:  IDJ
 * History: 7-Oct-93:  IDJ: created
 *          27-Jan-94: IDJ: new data structure for storing iconbar object.  All strings at end.
 *          11-Aug-97: EPW: object now the correct width when it has text
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "style.h"
#include "messages.h"
#include "string32.h"

#include "objects/toolbox.h"
#include "objects/iconbar.h"

#include "object.h"
#include "task.h"

#include "create.h"

#define CURRENT_OBJECT_VERSION  100


#define XEIG_FACTOR   4
#define YEIG_FACTOR   5

#if 0

#define GCHAR_SPACE_X 164
#define GCHAR_SPACE_Y 165


static int create__read_vdu_var (int var_num)
{
    int vars[2];
    int result;

    vars[0] = var_num;
    vars[1] = -1;

    _swix (OS_ReadVduVariables, _INR(0,1), vars, &result);

    return result;
}

#endif

static int create__read_mode_var (int mode, int var_num)
{
    int result;

    _swix (OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, var_num, &result);

    return result;
}

_kernel_oserror *create__sprite_bbox (wimp_Bbox *box, char *sprite_name)
{
    int               width, height, mode;
    _kernel_oserror  *e;

    /*
     * read sprite info
     */

    DEBUG debug_output ("create", "I:Reading sprite info for %s\n", sprite_name);

    if ((e = _swix (Wimp_SpriteOp, _IN(0)|_IN(2)|_OUTR(3,4)|_OUT(6),
                                   40, sprite_name,
                                   &width, &height, &mode)) != NULL)
        return e;

    width <<= create__read_mode_var(mode, XEIG_FACTOR);
    height <<= create__read_mode_var(mode, YEIG_FACTOR);

    box->xmin = 0;
    box->xmax = width;
    if (height <= style_ICONBAR_SPRITE_YMAX - style_ICONBAR_SPRITE_BASE)
    {
        box->ymin = style_ICONBAR_SPRITE_BASE;
        box->ymax = style_ICONBAR_SPRITE_YMAX;
    }
    else
    {
        box->ymin = (style_ICONBAR_SPRITE_BASE + style_ICONBAR_SPRITE_YMAX
                     - height ) / 2;
        box->ymax = (style_ICONBAR_SPRITE_BASE + style_ICONBAR_SPRITE_YMAX
                     + height ) / 2;
    }

    return NULL;
}

_kernel_oserror *create__text_and_sprite_bbox (wimp_Bbox *box, char *sprite_name, char *text)
{
    int			width, height, mode;
    _kernel_oserror	*e;

    /*
     * read sprite info
     */

    DEBUG debug_output ("create", "I:Reading sprite info for %s\n", sprite_name);

    if ((e = _swix (Wimp_SpriteOp, _IN(0)|_IN(2)|_OUTR(3,4)|_OUT(6),
                                   40, sprite_name,
                                   &width, &height, &mode)) != NULL)
        return e;

    width <<= create__read_mode_var (mode, XEIG_FACTOR);
    height <<= create__read_mode_var (mode, YEIG_FACTOR);

    box->xmin = 0;
    box->ymin = style_ICONBAR_TEXT_AND_SPRITE_BASE;
    if (_swi(Wimp_ReadSysInfo, _IN(0)|_RETURN(0), 7) < 350)
    {
        box->xmax = MAX(strlen(text) * 16, width);
    }
    else
    {
        int len;

        _swix(Wimp_TextOp, _INR(0,2)|_OUT(0), 1, text, 0, &len);

        box->xmax = MAX(len, width);
    }
    box->ymax = style_ICONBAR_TEXT_AND_SPRITE_BASE +
                style_ICONBAR_TEXT_AND_SPRITE_TEXT_HEIGHT +
                style_ICONBAR_TEXT_AND_SPRITE_GAP + height;

    return NULL;
}


extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

    /*
     * For an Iconbar object, we set up an icon block ready for a call to
     * Wimp_CreateIcon when the object is actually shown.  It's either an
     * indirected sprite icon or an indirected sprite and text icon.
     *
     * If there is the name of a menu template in this object template,
     * then we create the menu, and store its Object ID for future use.
     */

    _kernel_swi_regs     *user_regs           = (_kernel_swi_regs *)r->r[4];
    ObjectTemplateHeader *object_header       = (ObjectTemplateHeader *)user_regs->r[1];
    IconbarTemplate      *object_template     = (IconbarTemplate *)(object_header)->body;
    _kernel_oserror      *e                   = NULL;
    Object               *new_icon;
    int                   icon_size;
    char                 *indirected_data;

    DEBUG debug_output ("create", "I:Create iconbar object -- ID 0x%x, task 0x%x, flags 0x%x\n", r->r[1], r->r[3], user_regs->r[0]);


    if (object_header->version > CURRENT_OBJECT_VERSION)
        return make_error_hex (Iconbar_BadObjectVersion, 1, object_header->version);

    if (object_template->flags & ~Iconbar_ValidFlags)
        return make_error_hex (Iconbar_BadFlags, 1, object_template->flags);

    /*
     * allocate a new structure for an iconbar object.  All "indirected" data is held
     * at the "end" of the object, and pointers are set up to it.
     */

    icon_size =   sizeof(Object) +                                  /* the object structure */
                  object_template->max_help +                       /* max bytes for help message */
                  object_template->max_text_len +                   /* max bytes for text string */
                  object_template->max_sprite +                     /* max bytes for sprite name */
                  ((object_template->text != NULL)?1:0);            /* one more byte for "s" in valid string */

    if ((new_icon = mem_allocate (icon_size, "iconbar object")) == NULL)
        return make_error (Iconbar_AllocFailed, 0);


    /*
     * set up a new iconbar object's data structure
     */

    /* easy fields first! */

    new_icon->flags            = object_template->flags;
    new_icon->position         = object_template->position;
    new_icon->priority         = object_template->priority;
    new_icon->max_sprite       = object_template->max_sprite;
    new_icon->select_event     = object_template->select_event;
    new_icon->adjust_event     = object_template->adjust_event;
    new_icon->id               = (ObjectID)r->r[1];
    new_icon->help_message     = NULL;
    new_icon->max_help         = object_template->max_help;
    new_icon->max_text_len     = object_template->max_text_len;

    /*
     * if template has text, then we set the HasText bit, else we unset it
     */

    if (object_template->text != NULL)
        new_icon->flags |= Iconbar_HasText;
    else
        new_icon->flags &= ~Iconbar_HasText;


    /* indirected data appears immediately "after" object structure in memory */

    indirected_data = (char *)(new_icon+1);  /* yuk */

    DEBUG mem_chk (indirected_data, CHECK_HEAP | CHECK_NONZERO);


    /* the attached menu */

    if (object_template->menu != NULL)
    {
        DEBUG debug_output ("create", "I:Making attached menu %s\n", object_template->menu);

        if ((e = _swix (Toolbox_CreateObject, _INR(0,1)|_OUT(0),
                        0, object_template->menu,
                        &new_icon->menu)) != NULL)
            goto error;
    }


    /* the attached object to be shown on a select click */

    if (object_template->select_show != NULL)
    {
        DEBUG debug_output ("create", "I:Making attached select object %s\n", object_template->select_show);

        if ((e = _swix (Toolbox_CreateObject, _INR(0,1)|_OUT(0),
                        0, object_template->select_show,
                        &new_icon->select_show)) != NULL)
            goto error;
    }


    /* the attached object to be shown on an adjust click */

    if (object_template->adjust_show != NULL)
    {
        DEBUG debug_output ("create", "I:Making attached adjust object %s\n", object_template->adjust_show);

        if ((e = _swix (Toolbox_CreateObject, _INR(0,1)|_OUT(0),
                        0, object_template->adjust_show,
                        &new_icon->adjust_show)) != NULL)
            goto error;
    }


    /*
     * the help message - this appears immediately "after" the object data structure
     */

    /* IDJ bug-fix AQU-00902 - always give max_help bytes for help message even if
       none in template
     */
    if (object_template->max_help > 0)
        new_icon->help_message = indirected_data;

    if (object_template->help_message != NULL)
    {
        new_icon->help_message = indirected_data;
        string_copy (new_icon->help_message, object_template->help_message);
    }


    /* the icon itself */

    if (new_icon->flags & Iconbar_HasText)
    {
        /* indirected text and sprite */

        int max_text_len = object_template->max_text_len;
        int max_help     = object_template->max_help;

        new_icon->icon.flags = style_ICONBAR_TEXT_AND_SPRITE_ICONFLAGS;

        if ((e = create__text_and_sprite_bbox (&new_icon->icon.bbox, object_template->sprite_name, object_template->text)) != NULL)
            goto error;

        DEBUG debug_output ("create", "I:Bbox %d %d %d %d\n",
                                 new_icon->icon.bbox.xmin,
                                 new_icon->icon.bbox.ymin,
                                 new_icon->icon.bbox.xmax,
                                 new_icon->icon.bbox.ymax);


        /* make text buffer - comes after help message */

        new_icon->icon.data.indirect_text_and_sprite.buff_len = max_text_len;
        new_icon->icon.data.indirect_text_and_sprite.buffer   = indirected_data + max_help;
        string_copy (new_icon->icon.data.indirect_text_and_sprite.buffer, object_template->text);


        /* make the validation string - comes after the text buffer */

        new_icon->icon.data.indirect_text_and_sprite.valid_string = indirected_data + max_help + max_text_len;
        new_icon->icon.data.indirect_text_and_sprite.valid_string[0] = 's';
        string_copy (&new_icon->icon.data.indirect_text_and_sprite.valid_string[1], object_template->sprite_name);

    }
    else
    {
        /* indirected sprite only - MUST BE IN WIMP SPRITE POOL! */

        int max_help     = object_template->max_help;

        DEBUG debug_output ("create", "I:Indirect sprite only icon\n");

        new_icon->icon.flags = style_ICONBAR_SPRITE_ICONFLAGS;

        if ((e = create__sprite_bbox (&new_icon->icon.bbox, object_template->sprite_name)) != NULL)
            goto error;

        DEBUG debug_output ("create", "I:Bbox %d %d %d %d\n",
                                 new_icon->icon.bbox.xmin,
                                 new_icon->icon.bbox.ymin,
                                 new_icon->icon.bbox.xmax,
                                 new_icon->icon.bbox.ymax);

        new_icon->icon.data.indirect_sprite.sprite_area = (void *)1;  /* wimp pool */
        new_icon->icon.data.indirect_sprite.sprite.name = indirected_data + max_help;
        string_copy (new_icon->icon.data.indirect_sprite.sprite.name, object_template->sprite_name);
        new_icon->icon.data.indirect_sprite.name_len = strlen (new_icon->icon.data.indirect_sprite.sprite.name);
    }


    /*
     * We return internal handle in Toolbox's R0
     */

    r->r[0] = (int)new_icon;


    /*
     * ... and add to list for this task
     */

    new_icon->next = t->object_list;
    new_icon->prev = NULL;
    if (t->object_list != NULL)
        t->object_list->prev = new_icon;
    t->object_list = new_icon;


    return NULL;


error:

    if (new_icon->adjust_show != 0)
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, new_icon->adjust_show);

    if (new_icon->select_show != 0)
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, new_icon->select_show);

    if (new_icon->menu != 0)
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, new_icon->menu);

    mem_free (new_icon, "iconbar create error");

    return e;
}
@


4.3
log
@text+sprite object now correct width
@
text
@a32 1
#include "services.h"
d39 2
a40 2
#include "objects.toolbox.h"
#include "objects.iconbar.h"
@


4.2
log
@Ursula branch merged
@
text
@d20 1
d84 1
a84 1
static _kernel_oserror *create__sprite_bbox (wimp_Bbox *box, char *sprite_name)
d121 1
a121 1
static _kernel_oserror *create__text_and_sprite_bbox (wimp_Bbox *box, char *sprite_name, int max_text_len)
d123 2
a124 2
    int               width, height, mode;
    _kernel_oserror  *e;
d142 12
a153 1
    box->xmax = MAX(max_text_len * 16, width);
d332 1
a332 1
        if ((e = create__text_and_sprite_bbox (&new_icon->icon.bbox, object_template->sprite_name, max_text_len)) != NULL)
@


4.1
log
@Initial revision
@
text
@d53 2
a62 1
    _kernel_swi_regs regs;
a65 2
    regs.r[0] = (int)vars;
    regs.r[1] = (int)&result;
d67 1
a67 1
    _kernel_swi (OS_ReadVduVariables, &regs, &regs);
d72 2
d76 1
a76 1
    _kernel_swi_regs regs;
d78 3
a80 4
    regs.r[0] = mode;
    regs.r[1] = var_num;
    _kernel_swi (OS_ReadModeVariable, &regs, &regs);
    return regs.r[2];
d85 1
a85 2
    int               width, mode;
    _kernel_swi_regs  regs;
d94 3
a96 3
    regs.r[0] = 40;                /* read info */
    regs.r[2] = (int)sprite_name;
    if ((e = _kernel_swi (Wimp_SpriteOp, &regs, &regs)) != NULL)
d99 3
a101 3
    width = regs.r[3];
    mode = regs.r[6];
                     
d103 13
a115 3
    box->ymin = style_ICONBAR_SPRITE_BASE;
    box->xmax = width << create__read_mode_var(mode, XEIG_FACTOR);
    box->ymax = style_ICONBAR_SPRITE_YMAX;
a122 1
    _kernel_swi_regs  regs;
d131 3
a133 3
    regs.r[0] = 40;                /* read info */
    regs.r[2] = (int)sprite_name;
    if ((e = _kernel_swi (Wimp_SpriteOp, &regs, &regs)) != NULL)
d136 2
a137 3
    width = regs.r[3];
    height = regs.r[4];
    mode = regs.r[6];
d141 4
a144 6
    box->xmax = MAX(max_text_len * (1 << create__read_vdu_var (XEIG_FACTOR)) * create__read_vdu_var(GCHAR_SPACE_X),
                    width << create__read_mode_var (mode, XEIG_FACTOR));
    box->ymax = MIN(style_ICONBAR_TEXT_AND_SPRITE_YMAX,
                   (height << create__read_mode_var (mode, YEIG_FACTOR)) + 
                   ((1 << create__read_vdu_var (YEIG_FACTOR)) * create__read_vdu_var(GCHAR_SPACE_Y)) + 
                   style_ICONBAR_TEXT_AND_SPRITE_BASE + style_ICONBAR_TEXT_AND_SPRITE_GAP);
d153 1
a153 1
    /* 
a190 1
    _kernel_swi_regs      regs;
d193 1
a193 1
    char                 *indirected_data;    
d220 1
a220 1
     * set up a new iconbar object's data structure 
d231 1
a231 1
    new_icon->id               = (ObjectID)r->r[1];  
d259 3
a261 3
        regs.r[0] = 0;
        regs.r[1] = (int)object_template->menu;
        if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
a262 1
        new_icon->menu = (ObjectID)regs.r[0];
d272 3
a274 3
        regs.r[0] = 0;
        regs.r[1] = (int)object_template->select_show;
        if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
a275 1
        new_icon->select_show = (ObjectID)regs.r[0];
d285 3
a287 3
        regs.r[0] = 0;
        regs.r[1] = (int)object_template->adjust_show;
        if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
a288 1
        new_icon->adjust_show = (ObjectID)regs.r[0];
d292 1
a292 1
    /* 
d323 4
a326 4
        DEBUG debug_output ("create", "I:Bbox %d %d %d %d\n", 
                                 new_icon->icon.bbox.xmin, 
                                 new_icon->icon.bbox.ymin, 
                                 new_icon->icon.bbox.xmax, 
d357 4
a360 4
        DEBUG debug_output ("create", "I:Bbox %d %d %d %d\n", 
                                 new_icon->icon.bbox.xmin, 
                                 new_icon->icon.bbox.ymin, 
                                 new_icon->icon.bbox.xmax, 
d368 2
a369 2
     
    
d378 1
a378 1
     * ... and add to list for this task 
d388 1
a388 1
    return NULL;         
d394 1
a394 5
    {
        regs.r[0] = 0;
        regs.r[1] = (int)new_icon->adjust_show;
        _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
    }
d397 1
a397 5
    {
        regs.r[0] = 0;
        regs.r[1] = (int)new_icon->select_show;
        _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
    }
d400 1
a400 5
    {
        regs.r[0] = 0;
        regs.r[1] = (int)new_icon->menu;
        _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
    }
@


4.1.4.1
log
@Modified to support tall icon bar icons
@
text
@a52 2
#if 0

d61 1
d65 2
d68 1
a68 1
    _swix (OS_ReadVduVariables, _INR(0,1), vars, &result);
a72 2
#endif

d75 1
a75 1
    int result;
d77 4
a80 3
    _swix (OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, var_num, &result);

    return result;
d85 2
a86 1
    int               width, height, mode;
d95 3
a97 3
    if ((e = _swix (Wimp_SpriteOp, _IN(0)|_IN(2)|_OUTR(3,4)|_OUT(6),
                                   40, sprite_name,
                                   &width, &height, &mode)) != NULL)
d100 3
a102 3
    width <<= create__read_mode_var(mode, XEIG_FACTOR);
    height <<= create__read_mode_var(mode, YEIG_FACTOR);

d104 3
a106 13
    box->xmax = width;
    if (height <= style_ICONBAR_SPRITE_YMAX - style_ICONBAR_SPRITE_BASE)
    {
        box->ymin = style_ICONBAR_SPRITE_BASE;
        box->ymax = style_ICONBAR_SPRITE_YMAX;
    }
    else
    {
        box->ymin = (style_ICONBAR_SPRITE_BASE + style_ICONBAR_SPRITE_YMAX
                     - height ) / 2;
        box->ymax = (style_ICONBAR_SPRITE_BASE + style_ICONBAR_SPRITE_YMAX
                     + height ) / 2;
    }
d114 1
d123 3
a125 3
    if ((e = _swix (Wimp_SpriteOp, _IN(0)|_IN(2)|_OUTR(3,4)|_OUT(6),
                                   40, sprite_name,
                                   &width, &height, &mode)) != NULL)
d128 3
a130 2
    width <<= create__read_mode_var (mode, XEIG_FACTOR);
    height <<= create__read_mode_var (mode, YEIG_FACTOR);
d134 6
a139 4
    box->xmax = MAX(max_text_len * 16, width);
    box->ymax = style_ICONBAR_TEXT_AND_SPRITE_BASE +
                style_ICONBAR_TEXT_AND_SPRITE_TEXT_HEIGHT +
                style_ICONBAR_TEXT_AND_SPRITE_GAP + height;
d148 1
a148 1
    /*
d186 1
d189 1
a189 1
    char                 *indirected_data;
d216 1
a216 1
     * set up a new iconbar object's data structure
d227 1
a227 1
    new_icon->id               = (ObjectID)r->r[1];
d255 3
a257 3
        if ((e = _swix (Toolbox_CreateObject, _INR(0,1)|_OUT(0),
                        0, object_template->menu,
                        &new_icon->menu)) != NULL)
d259 1
d269 3
a271 3
        if ((e = _swix (Toolbox_CreateObject, _INR(0,1)|_OUT(0),
                        0, object_template->select_show,
                        &new_icon->select_show)) != NULL)
d273 1
d283 3
a285 3
        if ((e = _swix (Toolbox_CreateObject, _INR(0,1)|_OUT(0),
                        0, object_template->adjust_show,
                        &new_icon->adjust_show)) != NULL)
d287 1
d291 1
a291 1
    /*
d322 4
a325 4
        DEBUG debug_output ("create", "I:Bbox %d %d %d %d\n",
                                 new_icon->icon.bbox.xmin,
                                 new_icon->icon.bbox.ymin,
                                 new_icon->icon.bbox.xmax,
d356 4
a359 4
        DEBUG debug_output ("create", "I:Bbox %d %d %d %d\n",
                                 new_icon->icon.bbox.xmin,
                                 new_icon->icon.bbox.ymin,
                                 new_icon->icon.bbox.xmax,
d367 2
a368 2


d377 1
a377 1
     * ... and add to list for this task
d387 1
a387 1
    return NULL;
d393 5
a397 1
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, new_icon->adjust_show);
d400 5
a404 1
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, new_icon->select_show);
d407 5
a411 1
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, new_icon->menu);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
