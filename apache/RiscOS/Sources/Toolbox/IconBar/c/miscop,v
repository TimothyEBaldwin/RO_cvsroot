head	4.4;
access;
symbols
	IconBar-1_23:4.4
	IconBar-1_22:4.4
	IconBar-1_21:4.3
	RO_5_07:4.3
	IconBar-1_20:4.3
	IconBar-1_19:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Ursula_RiscPC:4.3.0.8
	nicke_IconBar-1_18:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.6
	Ursula_12May1998:4.3.0.4
	rthornb_UrsulaBuild_01May1998:4.3
	Daytona:4.3.0.2
	Daytona_bp:4.3
	sbrodie_Expresso_final_190298:4.3
	sbrodie_IconBar_1_17:4.3
	sbrodie_Expresso_BETA6_19980204:4.3
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2015.08.18.21.33.34;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	2WyuTvIyJTv4uNxy;

4.3
date	97.08.21.16.33.26;	author pwombwel;	state Exp;
branches;
next	4.2;

4.2
date	97.07.08.10.13.14;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.32;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.32;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.42.39;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.15.00.22.34;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.14.10;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.38.15;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 1.22. Tagged as 'IconBar-1_22'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   miscop.c
 * Purpose: miscellanaous operations on an Iconbar Object
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "messages.h"
#include "string32.h"

#include "objects/toolbox.h"
#include "objects/iconbar.h"

#include "object.h"
#include "task.h"

#include "miscop.h"
#include "create.h"


static _kernel_oserror *miscop__prod_icon (Object *icon)
{
    _kernel_oserror	*e;
    wimp_Bbox		old_box;

    old_box = icon->icon.bbox;
    if (icon->flags & Iconbar_HasText)
    {
        if ((e = create__text_and_sprite_bbox (&icon->icon.bbox, &icon->icon.data.indirect_text_and_sprite.valid_string[1], icon->icon.data.indirect_text_and_sprite.buffer)) != NULL)
            return e;
    }
    else
    {
        if ((e = create__sprite_bbox (&icon->icon.bbox, icon->icon.data.indirect_sprite.sprite.name)) != NULL)
            return e;
    }

    if (icon->state & object_SHOWING)
    {

        DEBUG debug_output ("miscop", "I:prodding icon\n");

        if ((icon->icon.bbox.xmin == old_box.xmin) &&
        	(icon->icon.bbox.ymin == old_box.ymin) &&
        	(icon->icon.bbox.xmax == old_box.xmax) &&
		(icon->icon.bbox.ymax == old_box.ymax))
	{
	    /* Icon size the same */
            wimp_SetIconState state;

            state.window_handle = -1;  /* iconbar */
            state.icon_handle = icon->wimp_icon_handle;
            state.EOR_word = 0;
            state.clear_word = 0;

            if ((e = _swix (Wimp_SetIconState, _IN(1), &state)) != NULL)
                return e;
        }
        else
        {
            /* Icon size has changed */
            wimp_IconDelete	old_icon_handle;
            wimp_IconCreate	create;

            old_icon_handle.window_handle = -2;
            old_icon_handle.icon_handle = icon->wimp_icon_handle;

            create.window_handle = -3; /* Create icon to left of specified */
            create.icon = icon->icon;
            if ((e = _swix(Wimp_CreateIcon, _INR(0,1)|_OUT(0),
            		old_icon_handle.icon_handle,
                   	 	&create, &icon->wimp_icon_handle)) != NULL)
                return e;

            if ((e = _swix(Wimp_DeleteIcon, _IN(1), &old_icon_handle)) != NULL)
                return e;

        /* Wimp_ResizeIcon doesn't work on the iconbar, it seems */
//        _swix(Wimp_ResizeIcon, _INR(0,5), -1, icon->wimp_icon_handle,
//        		       icon->icon.bbox.xmin, icon->icon.bbox.ymin,
//        		       icon->icon.bbox.xmax, icon->icon.bbox.ymax);

        }
    }

    return NULL;
}


static _kernel_oserror *miscop__set_help_message (Object *iconbar_icon, char *help_message)
{
    _kernel_oserror *e = NULL;

    if (help_message == NULL)
        iconbar_icon->help_message = NULL;
    else if (string_length (help_message)+1 > iconbar_icon->max_help)
         e =  make_error (Iconbar_ShortBuffer, 0);
    else
        string_copy (iconbar_icon->help_message, help_message);

    return e;
}


static _kernel_oserror *miscop__set_text (Object *iconbar_icon, char *text)
{
    if (!(iconbar_icon->flags & Iconbar_HasText))
        return make_error (Iconbar_NoText, 0);

    if (string_length(text)+1 > iconbar_icon->icon.data.indirect_text_and_sprite.buff_len)
        return make_error (Iconbar_ShortBuffer, 0);

    string_copy (iconbar_icon->icon.data.indirect_text_and_sprite.buffer, text);

    DEBUG debug_output ("miscop", "I:new string text %s\n", text);

    /*
     * prod it if it's showing
     */

    return miscop__prod_icon (iconbar_icon);
}


static _kernel_oserror *miscop__set_sprite (Object *iconbar_icon, char *sprite_name)
{
    wimp_Icon       *the_icon = &iconbar_icon->icon;
    int              name_len = string_length (sprite_name);

    if (name_len+1 > iconbar_icon->max_sprite)
        return make_error (Iconbar_ShortBuffer, 0);

    if (iconbar_icon->flags & Iconbar_HasText)
    {
        the_icon->data.indirect_text_and_sprite.valid_string[0] = 's';
        string_copy (&the_icon->data.indirect_text_and_sprite.valid_string[1], sprite_name);
    }
    else
    {
        string_copy (the_icon->data.indirect_sprite.sprite.name, sprite_name);
        the_icon->data.indirect_sprite.name_len = strlen (the_icon->data.indirect_sprite.sprite.name);
    }


    /*
     * prod it if it's showing
     */

    return miscop__prod_icon (iconbar_icon);
}





extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an Iconbar Icon
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     */

    _kernel_swi_regs *user_regs    = (_kernel_swi_regs *)r->r[4];
    Object           *iconbar_icon = (Object *)r->r[2];
    _kernel_oserror  *e            = NULL;
    int               flags        = user_regs->r[0];

    /*
     * check for internal consistency!
     */

    DEBUG if (iconbar_icon->id != (ObjectID)r->r[1])
              debug_output ("force", "*********** internal error - inconsistent icon Object ID ***\n");

    /*
     * for simple cases, handle the miscop here, otherwise call a function.
     */

    DEBUG debug_output ("miscop", "I:miscop 0x%x\n", user_regs->r[2]);

    IGNORE(t);

    switch (user_regs->r[2])
    {
        case Iconbar_GetIconHandle:
            user_regs->r[0] = iconbar_icon->wimp_icon_handle;
            break;

        case Iconbar_SetMenu:
            iconbar_icon->menu = (ObjectID)user_regs->r[3];
            break;

        case Iconbar_GetMenu:
            user_regs->r[0] = (int)iconbar_icon->menu;
            break;

        case Iconbar_SetEvent:
            if (flags & Iconbar_SetEvent_Select)
                iconbar_icon->select_event = user_regs->r[3];

            if (flags & Iconbar_SetEvent_Adjust)
                iconbar_icon->adjust_event = user_regs->r[4];

            break;

        case Iconbar_GetEvent:
            /* IDJ: bug-fix AQU-00906 returm iconbar_clicked if no event specified */
            if (iconbar_icon->select_event == 0)
                user_regs->r[0] = Iconbar_Clicked;
            else
                user_regs->r[0] = iconbar_icon->select_event;
            if (iconbar_icon->adjust_event == 0)
                user_regs->r[1] = Iconbar_Clicked;
            else
                user_regs->r[1] = iconbar_icon->adjust_event;
            break;

        case Iconbar_SetShow:
            if (flags & Iconbar_SetShow_Select)
                iconbar_icon->select_show = (ObjectID)user_regs->r[3];

            if (flags & Iconbar_SetShow_Adjust)
                iconbar_icon->adjust_show = (ObjectID)user_regs->r[4];

            break;

        case Iconbar_GetShow:
            user_regs->r[0] = (int)iconbar_icon->select_show;
            user_regs->r[1] = (int)iconbar_icon->adjust_show;
            break;

        case Iconbar_SetHelpMessage:
            e = miscop__set_help_message (iconbar_icon, (char *)user_regs->r[3]);
            break;

        case Iconbar_GetHelpMessage:
            string_to_buffer ((char *)user_regs->r[3], iconbar_icon->help_message, &user_regs->r[4]);
            break;

        case Iconbar_SetText:
            e = miscop__set_text (iconbar_icon, (char *)user_regs->r[3]);
            break;

        case Iconbar_GetText:
            if (!(iconbar_icon->flags & Iconbar_HasText))
                e = make_error (Iconbar_NoText, 0);
            string_to_buffer ((char *)user_regs->r[3], iconbar_icon->icon.data.indirect_text_and_sprite.buffer, &user_regs->r[4]);
            break;

        case Iconbar_SetSprite:
            e = miscop__set_sprite (iconbar_icon, (char *)user_regs->r[3]);
            break;

        case Iconbar_GetSprite:
            if (iconbar_icon->flags & Iconbar_HasText)
                string_to_buffer ((char *)user_regs->r[3], &iconbar_icon->icon.data.indirect_text_and_sprite.valid_string[1], &user_regs->r[4]);
            else
                string_to_buffer ((char *)user_regs->r[3], iconbar_icon->icon.data.indirect_sprite.sprite.name, &user_regs->r[4]);
            break;

        default:
            e = make_error_hex (Iconbar_NoSuchMiscOpMethod, 1, user_regs->r[2]);
            break;
    }

    return e;
}

@


4.3
log
@text+sprite object now correct width
@
text
@a30 1
#include "services.h"
d37 2
a38 2
#include "objects.toolbox.h"
#include "objects.iconbar.h"
@


4.2
log
@Ursula branch merged
@
text
@d45 1
d50 15
a66 3
        _kernel_oserror  *e;
        wimp_SetIconState state;

d70 39
a108 4
        state.window_handle = -1;  /* iconbar */
        state.icon_handle = icon->wimp_icon_handle;
        state.EOR_word = 0;
        state.clear_word = 0;
d110 1
a110 2
        if ((e = _swix (Wimp_SetIconState, _IN(1), &state)) != NULL)
            return e;
@


4.1
log
@Initial revision
@
text
@a50 1
        _kernel_swi_regs  regs;
d53 1
a53 1
        
d56 1
a56 1
                         
d62 1
a62 2
        regs.r[1] = (int)&state;
        if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
d78 1
a78 1
    else 
d94 1
a94 1
    
d97 2
a98 2
    /* 
     * prod it if it's showing 
d139 1
a139 1
    /* 
d154 1
a154 1
     * 
d161 1
a161 1
 
d167 2
a168 2
              debug_output ("force", "*********** internal error - inconsistent icon Object ID ***\n");                                                      
 
@


4.1.4.1
log
@Modified to support tall icon bar icons
@
text
@d51 1
d54 1
a54 1

d57 1
a57 1

d63 2
a64 1
        if ((e = _swix (Wimp_SetIconState, _IN(1), &state)) != NULL)
d80 1
a80 1
    else
d96 1
a96 1

d99 2
a100 2
    /*
     * prod it if it's showing
d141 1
a141 1
    /*
d156 1
a156 1
     *
d163 1
a163 1

d169 2
a170 2
              debug_output ("force", "*********** internal error - inconsistent icon Object ID ***\n");

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
