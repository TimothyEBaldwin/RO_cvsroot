head	4.4;
access;
symbols
	FontMenu-0_26:4.4
	FontMenu-0_25:4.4
	RO_5_07:4.3
	FontMenu-0_24:4.3
	FontMenu-0_23:4.2
	FontMenu-0_22:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.6
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.4
	Ursula_12May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_FontMenu_0_20:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.2
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2015.08.18.21.28.24;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	WqkGyZKUBB4isNxy;

4.3
date	2001.11.06.13.51.08;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.07.08.10.13.01;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.20;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.20;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.41.46;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.15.01.02.32;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.13.09;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.37.20;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.25. Tagged as 'FontMenu-0_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   show.c
 * Purpose: show a FontMenu Object
 * Author:  TGR
 * History: 11-Jan-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.fontmenu.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "show.h"

_kernel_oserror *show_menu_coords (_kernel_swi_regs *user_regs);

extern _kernel_oserror *show_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

   /*
    * request to show an object
    * R0 = 3
    * R1 = Object ID
    * R2 = internal handle returned when Object was created
    * R3 = wimp task handle of caller (use to identify task descriptor)
    * R4 -> user regs R0-R9
    *     R0 =  flags
    *     R1 =  Object ID
    *     R2 =  "show type"
    *         0 => default place
    *         1 => R3 points to buffer with full data for showing
    *         2 => R3 points to buffer with coordinates
    *     R3 = 0
    *  OR R3 -> buffer giving Object-specific data for showing this
    *         Object
    *     R4 =  Parent Object ID
    *     R5 =  Parent Component ID
    */

   /*
    * Function to "display" an Object on the screen.  If R2 == 0, then
    * display in default place.
    * If Object has bit set to say warn before show, then we should just
    * send Toolbox Event, and wait for the next call to Wimp_Poll after
    * the event is delivered before the Object is actually shown
    * (ie catch it in the prefilter).
    *
    */
   _kernel_swi_regs    *user_regs = (_kernel_swi_regs *) r->r[4];
   _kernel_oserror     *e;
   FontMenuInternal    *menu_int  = (FontMenuInternal *) r->r[2];
   FontMenu_AboutToBeShown_Event
                       *about_to_be_shown;
   ToolboxEvent         toolbox_event;

   DEBUG debug_output ("s","FontMenu: entering show, menu_int @@0x%x, object_id = 0x%x\n",(int)menu_int, (int)menu_int->object_id);

   /* Ensure a HasBeenHidden event arrives before the AboutToBeShown */
   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING)
   {
      if ((e = has_been_hidden()) != NULL)
         return e;
   }
   global_menu.current = menu_int;

   if ((e = show_menu_coords (user_regs)) != NULL)
      return e;

   if ((e = allocate_fontmenu_memory()) != NULL)
      return e;

   global_menu.t = t;

   if (user_regs->r[0] & 2) {
      global_menu.flags &= ~GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL;

      if ((e = _swix (Wimp_GetMenuState, _INR(0,1), 0, global_menu_state)) != NULL) {
         goto clearup;
      }
      r->r[0] = (int) global_menu.wimp_menu;
   } else {
      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL;

      *global_menu_state = -1;
   }
   if (global_menu.current->flags & FontMenuInternal_GenerateShowEvent) {

      global_menu.flags &= ~GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;

      toolbox_event.hdr.size       =  sizeof(FontMenu_AboutToBeShown_Event);
      toolbox_event.hdr.event_code =  FontMenu_AboutToBeShown;
      toolbox_event.hdr.flags      =  user_regs->r[0];

      about_to_be_shown            = (FontMenu_AboutToBeShown_Event *) &toolbox_event;
      about_to_be_shown->show_type = user_regs->r[2];
      about_to_be_shown->x         = global_menu.x;
      about_to_be_shown->y         = global_menu.y;

      if ((e = _swix (Toolbox_RaiseToolboxEvent, _INR(0,3),
                                               0,               /* flags */
                                               user_regs->r[1], /* Object id */
                                               -1,              /* Component id */
                                               &toolbox_event
                     )) != NULL)
         goto clearup;
   } else {
      if ((e = generate_fontmenu()) != NULL)
         goto clearup;

      if ((e = (~user_regs->r[0] & 2) ? menu_show_actual () : menu_show_submenu_actual ()) != NULL)
         goto clearup;

      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_IS_SHOWING;
   }
   return NULL;

   clearup:
      DEBUG debug_output("s", "FontMenu: deleted by show_object: '%s'\n", e->errmess);
      mem_freek(global_menu.wimp_menu_indirect);
      global_menu.wimp_menu_indirect = NULL;
      mem_freek(global_menu.wimp_menu);
      global_menu.wimp_menu = NULL;
      global_menu.current   = NULL;
      return e;
}

_kernel_oserror *show_menu_coords (_kernel_swi_regs *user_regs) {

   _kernel_oserror  *e           = NULL;
   DisplayInfo      *coords      = (DisplayInfo *) user_regs->r[3];
   wimp_PointerInfo  ptr_info;

   switch (user_regs->r[2]) {

      case 1:
      case 2:
         global_menu.x = coords->x;
         global_menu.y = coords->y;
         break;
      default:
         if ((e = _swix (Wimp_GetPointerInfo, _IN(1), &ptr_info)) != NULL) return e;

         global_menu.x = ptr_info.x - 64;
         global_menu.y = ptr_info.y;
         break;
   }
   DEBUG debug_output ("s","FontMenu: global_menu.current @@0x%x\n",(int)global_menu.current);
   DEBUG debug_output ("s","FontMenu: show coordinates are (%d,%d)\n",global_menu.x,global_menu.y);
   return e;
}
@


4.3
log
@No longer attempts to produce HasBeenHidden events by looking for MenuWarning
messages - this doesn't work with Toolbox 1.42 or later. Will now only produce
HasBeenHidden events before another FontMenu is shown or when the menu tree
is deleted.

Fixes crashes caused when a FontMenu 0.18-0.23 were used with Toolbox 1.42-.

Version 0.24. Tagged as 'FontMenu-0_24'
@
text
@a30 1
#include "services.h"
@


4.2
log
@Ursula branch merged
@
text
@d148 1
@


4.1
log
@Initial revision
@
text
@d79 1
a79 2
   _kernel_swi_regs     regs,
                       *user_regs = (_kernel_swi_regs *) r->r[4];
d88 6
a93 5
   if (global_menu.wimp_menu)
      mem_freek (global_menu.wimp_menu);
   if (global_menu.wimp_menu_indirect)
      mem_freek (global_menu.wimp_menu_indirect);

d99 1
a99 11
   DEBUG debug_output ("s","FontMenu: entering Font_ListFonts\n");

   regs.r[1] = 0;
   regs.r[2] = (1<<21|1<<19) /* tick font indicated by R6 + return font menu defn */
             | ((global_menu.current->flags & FontMenuInternal_IncludeSystemFont) ? 1<<20: 0);
   regs.r[3] = 0;
   regs.r[4] = 0;
   regs.r[5] = 0;
   regs.r[6] = 0;

   if ((e = _kernel_swi (Font_ListFonts, &regs, &regs)) != NULL)
a101 15
   if ((global_menu.wimp_menu = mem_alloc (regs.r[3])) == NULL)
      return make_error (FontMenu_AllocFailed,0);

   global_menu.menu_size = regs.r[3];

   if ((global_menu.wimp_menu_indirect = mem_alloc (regs.r[5])) == NULL) {
      e = make_error (FontMenu_AllocFailed,0);
      goto clearup1;
   }
   global_menu.indirect_size = regs.r[5];

   DEBUG debug_output ("s","FontMenu: global_menu.current @@0x%x; menu_int @@0x%x\n",(int)global_menu.current,(int)menu_int);
   if ((e = generate_fontmenu()) != NULL)
      goto clearup2;

d107 2
a108 5
      regs.r[0] = 0;
      regs.r[1] = (int) global_menu_state;

      if ((e = _kernel_swi (Wimp_GetMenuState, &regs, &regs)) != NULL) {
         goto clearup2;
a119 5
      regs.r[0]                    =  0;                     /* flags*/
      regs.r[1]                    =  user_regs->r[1];       /* Object id */
      regs.r[2]                    =  -1;                    /* Component id */
      regs.r[3]                    =  (int) &toolbox_event;

d129 13
a141 2
      if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
         return e;
a142 1
   } else {
a143 1
      return (~user_regs->r[0] & 2) ? menu_show_actual () : menu_show_submenu_actual ();
d147 1
a147 1
   clearup2:
a149 1
   clearup1:
a158 1
   _kernel_swi_regs  regs;
d170 1
a170 3
         regs.r[1] = (int) &ptr_info;

         if ((e = _kernel_swi (Wimp_GetPointerInfo, &regs, &regs)) != NULL) return e;
@


4.1.4.1
log
@Fixed bug which meant that it was impossible to call FontMenu_SetTick
in a FontMenu_AboutToBeShown event handler.
@
text
@d79 2
a80 1
   _kernel_swi_regs    *user_regs = (_kernel_swi_regs *) r->r[4];
d89 5
a93 6
   /* Ensure a HasBeenHidden event arrives before the AboutToBeShown */
   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING)
   {
      if ((e = has_been_hidden()) != NULL)
         return e;
   }
d99 11
a109 1
   if ((e = allocate_fontmenu_memory()) != NULL)
d112 15
d132 5
a136 2
      if ((e = _swix (Wimp_GetMenuState, _INR(0,1), 0, global_menu_state)) != NULL) {
         goto clearup;
d148 5
d162 3
a164 7
      if ((e = _swix (Toolbox_RaiseToolboxEvent, _INR(0,3),
                                               0,               /* flags */
                                               user_regs->r[1], /* Object id */
                                               -1,              /* Component id */
                                               &toolbox_event
                     )) != NULL)
         goto clearup;
a165 6
      if ((e = generate_fontmenu()) != NULL)
         goto clearup;

      if ((e = (~user_regs->r[0] & 2) ? menu_show_actual () : menu_show_submenu_actual ()) != NULL)
         goto clearup;

d167 1
d171 1
a171 1
   clearup:
d174 1
d184 1
d196 3
a198 1
         if ((e = _swix (Wimp_GetPointerInfo, _IN(1), &ptr_info)) != NULL) return e;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
