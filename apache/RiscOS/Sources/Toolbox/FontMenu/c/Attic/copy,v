head	4.2;
access;
symbols
	RO_5_07:4.2
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	98.02.04.19.48.03;	author sbrodie;	state dead;
branches;
next	4.1;

4.1
date	96.11.05.09.22.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.41.37;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.13.00;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.37.13;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   copy.c
 * Purpose: copy a FontMenu Object
 * Author:  TGR
 * History: 11-Jan-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.fontmenu.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "copy.h"


extern _kernel_oserror *copy_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

   /*
    * request to copy an object
    * R0 = 2
    * R1 = Object ID
    * R2 = internal handle returned when "src" Object was created
    * R3 = wimp task handle of caller (use to identify task descriptor)
    * R4 -> user regs R0-R9:
    *     R0 = flags
    *         bit 0 set => do not recursively copy the Object
    *     R1 = source Object ID
    */

   /*
    * The Toolbox has already checked that this is not just a copy
    * call for a shared Object which already exists.
    * We create a new Object, and add it to the list of Objects for this
    * task.
    * We need to remember the ObjectID passed to us by the Toolbox, so
    * that we can identify this Object if we are given an ID from the
    * client's "id block".
    */

#ifdef COPY_OBJECT
   _kernel_oserror  *e;
   FontMenuInternal *menu_int      = (FontMenuInternal *) r->r[2],
                    *menu_intx;
   ObjectID          object_idx    = (ObjectID) r->r[1];

   if ((menu_intx = mem_alloc(sizeof(FontMenuInternal))) == NULL) {
      return make_error (FontMenu_AllocFailed,0);
   }
   if (menu_int->ticked_font) {
      if ((menu_intx->ticked_font = mem_alloc (strlen(menu_int->ticked_font)+1)) == NULL) {
         e = make_error (FontMenu_AllocFailed,0);
         goto clearup1;
      }
      strcpy(menu_intx->ticked_font, menu_int->ticked_font);
   } else menu_intx->ticked_font = NULL;

   menu_intx->object_id = object_idx;
   menu_intx->flags     = menu_int->flags;

   menu_intx->forward                = t->object_list;
   menu_intx->backward               = t->object_list->backward;
   t->object_list->backward->forward = menu_intx;
   t->object_list->backward          = menu_intx;

   r->r[0] = (int) menu_intx;

   return NULL;

   clearup1:
      mem_freek (menu_intx);
      return e;

   IGNORE(t);
#else
   return NULL;
#endif
}

@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
