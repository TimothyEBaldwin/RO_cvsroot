head	4.5;
access;
symbols
	FontMenu-0_26:4.5
	FontMenu-0_25:4.5
	RO_5_07:4.4
	FontMenu-0_24:4.4
	FontMenu-0_23:4.3
	FontMenu-0_22:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Ursula_RiscPC:4.3.0.6
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.4
	Ursula_12May1998:4.3.0.2
	rthornb_UrsulaBuild_01May1998:4.3
	sbrodie_Expresso_final_190298:4.3
	sbrodie_FontMenu_0_20:4.3
	sbrodie_Expresso_BETA6_19980204:4.3
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.3
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2015.08.18.21.28.23;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	WqkGyZKUBB4isNxy;

4.4
date	2001.11.06.13.51.08;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	97.07.08.10.12.54;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.22.15.29.11;	author nturton;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.22.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	97.05.15.01.02.26;	author kbracey;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.22.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.41.36;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.12.59;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.37.12;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.25. Tagged as 'FontMenu-0_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   auxiliary.c
 * Purpose: support functions for the FontMenu object class
 * Author:  TGR
 * History: 10-Jan-94: TGR: created
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "twimp.h"
#include "os.h"
#include "style.h"
#include "objects.toolbox.h"
#include "objects.fontmenu.h"
#include "objects.menu.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

int  global_menu_state[64] = {0};

GlobalMenu global_menu =
                {0,0,0,NULL,NULL,0,NULL,0,NULL};

EventInterest   messages_of_interest[] =
                {{wimp_MHELP_REQUEST  ,  0},
                 {wimp_MMENUS_DELETED ,  0},
                 {-1                  , -1}
                };

EventInterest   events_of_interest[] =
                {{wimp_EMENU          ,  0},
                 {wimp_ETOOLBOX_EVENT ,  0},
                 {-1                  , -1}
                };

EventInterest   toolbox_events_of_interest[] =
                {{FontMenu_AboutToBeShown,     0x82a40},
                 {-1                     ,          -1}
                };


extern BOOL menu_showing (int *buffer) {

   int                   *ppositiona,
                         *ppositionb;

   ppositiona = buffer;
   ppositionb = global_menu_state;

   DEBUG debug_output ("a","FontMenu: looking for menu\n");

   if (~global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING) return FALSE;

   while (*ppositionb != -1) {
      DEBUG debug_output ("a","FontMenu: global = %d; recent = %d\n",(int)*ppositionb,(int)*ppositiona);
      if (*ppositiona++ != *ppositionb++) return FALSE;
   }
   if (*ppositiona != -1) {
      DEBUG debug_output ("a","FontMenu: ... found one\n");
      return TRUE;
   } else
      return FALSE;
}

/*
 * generate_fontmenu
 *
 * Creates the font menu, storing in global_menu.wimp_menu and wimp_menu_indirect
 * Assumes buffer space already allocated
 */
extern _kernel_oserror *generate_fontmenu (void) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;

   DEBUG debug_output ("a","FontMenu: flags word is 0x%x\n",global_menu.current->flags);

   regs.r[1] = (int) global_menu.wimp_menu;
   regs.r[2] = (1<<21|1<<19) /* tick font indicated by R6 + return font menu defn */
             | ((global_menu.current->flags & FontMenuInternal_IncludeSystemFont) ? 1<<20: 0);
   regs.r[3] = global_menu.menu_size;
   regs.r[4] = (int) global_menu.wimp_menu_indirect;
   regs.r[5] = global_menu.indirect_size;

   DEBUG debug_output ("f","FontMenu: Font_ListFonts flags are 0x%x\n",regs.r[2]);
   DEBUG debug_output ("f","FontMenu: global_menu.current @@0x%x; ticked_font @@0x%x\n",(int)global_menu.current, global_menu.current->ticked_font);
   DEBUG if (global_menu.current->ticked_font) debug_output ("f","FontMenu: ticked font = '%s'\n",global_menu.current->ticked_font);

   if (global_menu.current->ticked_font) {
      regs.r[6]  = (!(strcmp (global_menu.current->ticked_font,"SystemFont")))
                 ? 1
                 : (int) global_menu.current->ticked_font;
   } else {
      regs.r[6] = 0;
   }
   if ((e = _kernel_swi (Font_ListFonts, &regs, &regs)) != NULL)
      return e;
   DEBUG debug_output ("f","FontMenu: after Font_ListFonts\n");

/*** PRM is incorrect on this bug fix for Font_DecodMenu ***
   regs.r[0] = (int) font_messages_fd;
   regs.r[1] = (int) "FontList";
   regs.r[2] = 0;

   if ((e = _kernel_swi (MessageTrans_Lookup, &regs, &regs)) != NULL)
      return e;

   if (regs.r[3] > 12) {
      wimp_menu_entry (global_menu.wimp_menu,0)->flags |=  wimp_MENUFLAGS_TITLE_INDIRECT;
   } else {
      wimp_menu_entry (global_menu.wimp_menu,0)->flags &= ~wimp_MENUFLAGS_TITLE_INDIRECT;
   }
*/
   return NULL;
}

/*
 * allocate_fontmenu_memory
 *
 * Allocates buffer space in wimp_menu and wimp_menu_indirect for font menu
 */
extern _kernel_oserror *allocate_fontmenu_memory (void)
{
    int menusize, indirectsize;
    _kernel_oserror *e;

    if (global_menu.wimp_menu)
        mem_freek (global_menu.wimp_menu);
    if (global_menu.wimp_menu_indirect)
        mem_freek (global_menu.wimp_menu_indirect);

    DEBUG debug_output ("s","FontMenu: entering Font_ListFonts\n");

    if ((e = _swix (Font_ListFonts, _INR(1,6)|_OUT(3)|_OUT(5),
                    0,            /* return required size */
                    (1<<21|1<<19) /* tick font indicated by R6 + return font menu defn */
                       | ((global_menu.current->flags & FontMenuInternal_IncludeSystemFont) ? 1<<20: 0),
                    0,
                    0,
                    0,
                    0,
                    &menusize,
                    &indirectsize
                    )) != NULL)
        return e;

    if ((global_menu.wimp_menu = mem_alloc (menusize)) == NULL)
        return make_error (FontMenu_AllocFailed,0);

    global_menu.menu_size = menusize;

    if ((global_menu.wimp_menu_indirect = mem_alloc (indirectsize)) == NULL) {
        e = make_error (FontMenu_AllocFailed,0);
        goto clearup1;
    }
    global_menu.indirect_size = indirectsize;

    return NULL;

 clearup1:
    DEBUG debug_output ("s","FontMenu: deleted by allocate_fontmenu_memory: '%s'\n", e->errmess);
    mem_freek(global_menu.wimp_menu);
    global_menu.wimp_menu = NULL;
    global_menu.current   = NULL;
    return e;
}

extern _kernel_oserror *fontmenu_set_font (FontMenuInternal *menu_int, char *new_font) {

   char *buffer = NULL;

   if (new_font) {
      DEBUG debug_output ("y","Font Menu: setting font to '%s'\n",new_font);
      if ((buffer = mem_alloc(string_length(new_font)+1)) == NULL)
         return make_error (FontMenu_AllocFailed,0);

      string_copy (buffer, new_font);
   }

   if (menu_int->ticked_font) {
      DEBUG debug_output ("a","FontMenu: about to free memory\n");
      mem_freek (menu_int->ticked_font);
   }

   menu_int->ticked_font = buffer;

   DEBUG if (menu_int->ticked_font) debug_output ("a","FontMenu: ticked font is '%s'\n",menu_int->ticked_font);

   return NULL;
}

extern _kernel_oserror *hide_menu (FontMenuInternal *menu_int) {

    _kernel_oserror   *e;
    int                buffer[64];


   if (global_menu.current == menu_int) {

      if ((e = _swix (Wimp_GetMenuState, _INR(0,1), 0, buffer)) != NULL)
         return e;

      if (menu_showing(buffer)) {
        if ((e = _swix (Wimp_CreateMenu, _IN(1), -1)) != NULL)
          return e;
        return has_been_hidden ();
      }
   }
   return NULL;
}

_kernel_oserror *update_tree (void) {

   _kernel_oserror  *e;

   DEBUG debug_output ("a","FontMenu: updating menu tree\n");

   if ((e = _swix (Menu_UpdateTree, 0)) != NULL)
      return e;

/*   global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT; */

   /* IDJ: 18-May-95: bug-fix AQU-01201: fix submenu behaviour */
   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {

       return _swix (Wimp_CreateMenu, _IN(1), global_menu.wimp_menu);
   }
   return NULL;
}

_kernel_oserror *menu_show_actual (void) {

   DEBUG debug_output ("e","FontMenu: showing menu, 0x%x\n",global_menu.current->object_id);

   return _swix (Wimp_CreateMenu, _INR(1,3), global_menu.wimp_menu, /* Wimp menu block */
                                             global_menu.x,
                                             global_menu.y);
}
_kernel_oserror *menu_show_submenu_actual (void) {

   _kernel_oserror  *e;

   DEBUG debug_output ("e","FontMenu: showing submenu, object_id = 0x%x; wimp_Menu = 0x%x; vert_gap = %d\n",global_menu.current->object_id,(int)global_menu.wimp_menu, global_menu.wimp_menu->hdr.vert_gap);

   e = _swix (Wimp_CreateSubMenu, _INR(1,3), global_menu.wimp_menu, /* Wimp menu block */
                                             global_menu.x,
                                             global_menu.y);

   DEBUG debug_output ("e","FontMenu: just after Wimp_CreateSubmenu, e = 0x%x\n",e);

   return e;
}

extern _kernel_oserror *has_been_hidden (void) {

   _kernel_oserror  *e;
   ToolboxEvent      toolbox_event;

   if (global_menu.current->flags & FontMenuInternal_GenerateHideEvent) {

      toolbox_event.hdr.size       = sizeof (FontMenu_HasBeenHidden_Event);
      toolbox_event.hdr.event_code = FontMenu_HasBeenHidden;
      toolbox_event.hdr.flags      = 0;

      if ((e = _swix (Toolbox_RaiseToolboxEvent, _INR(0,3),
                            0,
                            global_menu.current->object_id,
                            -1,
                            &toolbox_event
                      )) != NULL)
         return e;
   }
   DEBUG debug_output("e","FontMenu: has_been_hidden\n");
   global_menu.current  =  NULL;
   global_menu.flags   &= ~GLOBAL_MENU_INFO_FLAGS_IS_SHOWING;

   return NULL;
}
@


4.4
log
@No longer attempts to produce HasBeenHidden events by looking for MenuWarning
messages - this doesn't work with Toolbox 1.42 or later. Will now only produce
HasBeenHidden events before another FontMenu is shown or when the menu tree
is deleted.

Fixes crashes caused when a FontMenu 0.18-0.23 were used with Toolbox 1.42-.

Version 0.24. Tagged as 'FontMenu-0_24'
@
text
@a31 1
#include "services.h"
a42 1
#include "main.h"
@


4.3
log
@Ursula branch merged
@
text
@a56 1
                 {wimp_MMENU_WARNING  ,  0},
d191 1
d303 1
@


4.2
log
@Version Spin_merge taken
@
text
@d57 1
d96 6
d148 50
d200 1
a200 1
   char                  *buffer;
d208 6
d215 1
a215 7
      if (menu_int->ticked_font) {
         DEBUG debug_output ("a","FontMenu: about to free memory\n");
         mem_freek (menu_int->ticked_font);
      }
      menu_int->ticked_font = buffer;
   } else
      menu_int->ticked_font = NULL;
a224 1
    _kernel_swi_regs   regs;
d230 1
a230 4
      regs.r[0] = 0;
      regs.r[1] = (int) buffer;

      if ((e = _kernel_swi (Wimp_GetMenuState, &regs, &regs)) != NULL)
d234 1
a234 2
        regs.r[1] = -1;
        if ((e = _kernel_swi (Wimp_CreateMenu, &regs, &regs)) != NULL)
a244 1
   _kernel_swi_regs  regs;
d248 2
a249 3
   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING) {
      if ((e = _kernel_swi (Menu_UpdateTree, &regs, &regs)) != NULL)
         return e;
d251 1
d253 2
a254 1
/*      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT; */
d256 1
a256 6
      /* IDJ: 18-May-95: bug-fix AQU-01201: fix submenu behaviour */
      if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {
          regs.r[1] = (int) global_menu.wimp_menu;

          return _kernel_swi (Wimp_CreateMenu, &regs, &regs);
      }
a262 7
  _kernel_swi_regs  regs;
   _kernel_oserror  *e;

   regs.r[1] = (int) global_menu.wimp_menu;         /* Wimp menu block */
   regs.r[2] = global_menu.x;
   regs.r[3] = global_menu.y;

d265 3
a267 3
   e =  _kernel_swi (Wimp_CreateMenu, &regs, &regs);

   return e;
a270 1
   _kernel_swi_regs  regs;
a272 4
   regs.r[1] = (int) global_menu.wimp_menu;      /* Wimp menu block */
   regs.r[2] = global_menu.x;
   regs.r[3] = global_menu.y;

d275 3
a277 1
   e = _kernel_swi (Wimp_CreateSubMenu, &regs, &regs);
a286 1
   _kernel_swi_regs  regs;
d295 6
a300 6
      regs.r[0] = 0;
      regs.r[1] = global_menu.current->object_id;
      regs.r[2] = -1;
      regs.r[3] = (int) &toolbox_event;

      if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
@


4.2.2.1
log
@Fixed bug which meant that it was impossible to call FontMenu_SetTick
in a FontMenu_AboutToBeShown event handler.
@
text
@a56 1
                 {wimp_MMENU_WARNING  ,  0},
a94 6
/*
 * generate_fontmenu
 *
 * Creates the font menu, storing in global_menu.wimp_menu and wimp_menu_indirect
 * Assumes buffer space already allocated
 */
a140 50
/*
 * allocate_fontmenu_memory
 *
 * Allocates buffer space in wimp_menu and wimp_menu_indirect for font menu
 */
extern _kernel_oserror *allocate_fontmenu_memory (void)
{
    int menusize, indirectsize;
    _kernel_oserror *e;

    if (global_menu.wimp_menu)
        mem_freek (global_menu.wimp_menu);
    if (global_menu.wimp_menu_indirect)
        mem_freek (global_menu.wimp_menu_indirect);

    DEBUG debug_output ("s","FontMenu: entering Font_ListFonts\n");

    if ((e = _swix (Font_ListFonts, _INR(1,6)|_OUT(3)|_OUT(5),
                    0,            /* return required size */
                    (1<<21|1<<19) /* tick font indicated by R6 + return font menu defn */
                       | ((global_menu.current->flags & FontMenuInternal_IncludeSystemFont) ? 1<<20: 0),
                    0,
                    0,
                    0,
                    0,
                    &menusize,
                    &indirectsize
                    )) != NULL)
        return e;

    if ((global_menu.wimp_menu = mem_alloc (menusize)) == NULL)
        return make_error (FontMenu_AllocFailed,0);

    global_menu.menu_size = menusize;

    if ((global_menu.wimp_menu_indirect = mem_alloc (indirectsize)) == NULL) {
        e = make_error (FontMenu_AllocFailed,0);
        goto clearup1;
    }
    global_menu.indirect_size = indirectsize;

    return NULL;

 clearup1:
    mem_freek(global_menu.wimp_menu);
    global_menu.wimp_menu = NULL;
    global_menu.current   = NULL;
    return e;
}

d143 1
a143 1
   char *buffer = NULL;
a150 1
   }
d152 7
a158 6
   if (menu_int->ticked_font) {
      DEBUG debug_output ("a","FontMenu: about to free memory\n");
      mem_freek (menu_int->ticked_font);
   }

   menu_int->ticked_font = buffer;
d168 1
d174 4
a177 1
      if ((e = _swix (Wimp_GetMenuState, _INR(0,1), 0, buffer)) != NULL)
d181 2
a182 1
        if ((e = _swix (Wimp_CreateMenu, _IN(1), -1)) != NULL)
d193 1
d197 4
a200 2
   if ((e = _swix (Menu_UpdateTree, 0)) != NULL)
      return e;
d202 1
a202 1
/*   global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT; */
d204 3
a206 2
   /* IDJ: 18-May-95: bug-fix AQU-01201: fix submenu behaviour */
   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {
d208 2
a209 1
       return _swix (Wimp_CreateMenu, _IN(1), global_menu.wimp_menu);
d216 7
d225 3
a227 3
   return _swix (Wimp_CreateMenu, _INR(1,3), global_menu.wimp_menu, /* Wimp menu block */
                                             global_menu.x,
                                             global_menu.y);
d231 1
d234 4
d240 1
a240 3
   e = _swix (Wimp_CreateSubMenu, _INR(1,3), global_menu.wimp_menu, /* Wimp menu block */
                                             global_menu.x,
                                             global_menu.y);
d250 1
d259 6
a264 6
      if ((e = _swix (Toolbox_RaiseToolboxEvent, _INR(0,3),
                            0,
                            global_menu.current->object_id,
                            -1,
                            &toolbox_event
                      )) != NULL)
@


4.1
log
@Initial revision
@
text
@d202 1
a202 3
      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;
/*
      regs.r[1] = (int) global_menu.wimp_menu;
d204 6
a209 2
      return _kernel_swi (Wimp_CreateMenu, &regs, &regs);
*/
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@d202 3
a204 1
/*      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT; */
d206 2
a207 6
      /* IDJ: 18-May-95: bug-fix AQU-01201: fix submenu behaviour */
      if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {
          regs.r[1] = (int) global_menu.wimp_menu;

          return _kernel_swi (Wimp_CreateMenu, &regs, &regs);
      }
@


4.1.5.1
log
@Import from SrcFiler
@
text
@d202 3
a204 1
/*      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT; */
d206 2
a207 6
      /* IDJ: 18-May-95: bug-fix AQU-01201: fix submenu behaviour */
      if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {
          regs.r[1] = (int) global_menu.wimp_menu;

          return _kernel_swi (Wimp_CreateMenu, &regs, &regs);
      }
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d202 3
a204 1
/*      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT; */
d206 2
a207 6
      /* IDJ: 18-May-95: bug-fix AQU-01201: fix submenu behaviour */
      if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {
          regs.r[1] = (int) global_menu.wimp_menu;

          return _kernel_swi (Wimp_CreateMenu, &regs, &regs);
      }
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
