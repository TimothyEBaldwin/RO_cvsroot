head	4.2;
access;
symbols
	FontDbox-0_19:4.2
	RO_5_07:4.1
	FontDbox-0_18:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	Ursula:4.1.0.6
	Ursula_bp:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	FontDbox-0_17:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_FontDbox_0_15:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2015.08.18.21.26.10;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	nyaQjrZSTfXwrNxy;

4.1
date	96.11.05.09.22.14;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.14;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.41.15;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.12.36;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.36.48;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.19. Tagged as 'FontDbox-0_19'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   miscop.c
 * Purpose: miscellanaous operations on a FontDbox Object
 * Author:  TGR
 * History: 8-Jun-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "os.h"
#include "string32.h"

#include "objects/toolbox.h"
#include "objects/window.h"
#include "objects/fontdbox.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

#define MAX_MISCOP_METHODS 13
/*
static _kernel_oserror *(*fontdbox_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   fontdbox_get_window_id,
   fontdbox_set_font,
   fontdbox_get_font,
   fontdbox_set_size,
   fontdbox_get_size,
   fontdbox_set_try_string,
   fontdbox_get_try_string,
   fontdbox_set_title,
   fontdbox_get_title

};
*/
extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FontDboxInternal     *internal         = (FontDboxInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   int                   method    = user_regs->r[2];

   DEBUG debug_output ("y","FontDbox: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(FontDbox_NoSuchMiscOpMethod,1,method);
   }
   switch (method) {
      case FontDbox_GetWindowID:
         user_regs->r[0] = (int) internal->sub_object_id;
         return NULL;
      case FontDbox_SetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_SetTitle;
         regs.r[3] = user_regs->r[3];

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FontDbox_GetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_GetTitle;
         regs.r[3] = user_regs->r[3];
         regs.r[4] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[3] = regs.r[3];
         user_regs->r[4] = regs.r[4];

         return NULL;
      case FontDbox_SetFont:
      {
         char                 *font_name        = (char *) user_regs->r[3];
         int                   found            = -1;

         if (font_name == NULL || ((found = find_text (global_font_list, font_name)) == -1)) {
            if (found == -1) {
               if (!strcmp (font_name, "SystemFont")) {
                  DEBUG debug_output ("m","FontDbox: should change font to '%s'\n",global_system);
                  font_name = global_system;
               } else {
                  if (global_font_list) font_name = global_font_list->array[0].string;
                  return make_error (FontDbox_NoSuchFont, 0);
               }
            }
         }
         DEBUG debug_output ("m","FontDbox: setting font to '%s'\n",font_name);

         return update_fonts (internal, font_name);
      }
      case FontDbox_GetFont:
      {
         BOOL                  flag;

         if (!user_regs->r[3]) {
            user_regs->r[4] = strlen (internal->selected_font) + 1;
            return NULL;
         }
         if (!strcmp(internal->selected_font, global_system)) {
            if (string_copy_chk ((char *) user_regs->r[3], "SystemFont", user_regs->r[4])) {
               flag = TRUE;
            } else {
               flag = FALSE;
            }
         } else if (string_copy_chk ((char *) user_regs->r[3], internal->selected_font, user_regs->r[4])) {
            flag = TRUE;
         } else {
            flag = FALSE;
         }
         if (flag) {
            user_regs->r[4] = strlen ((char *) user_regs->r[3]) + 1;
         } else {
            user_regs->r[4] = 0;
         }
         return NULL;
      }
      case FontDbox_SetSize:
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = NumberRange_SetValue;

         if (user_regs->r[0] & FontDbox_SetSize_Height) {
            regs.r[0] = 0;
            regs.r[3] = FontDbox_NumberRange_Height;
            regs.r[4] = user_regs->r[3];

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;
         }
         if (user_regs->r[0] & FontDbox_SetSize_Aspect) {
            regs.r[0] = 0;
            regs.r[3] = FontDbox_NumberRange_AspectRatio;
            regs.r[4] = user_regs->r[4];

            return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
         }
         return NULL;
      case FontDbox_GetSize:
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = NumberRange_GetValue;

         regs.r[0] = 0;
         regs.r[3] = FontDbox_NumberRange_Height;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[0] = regs.r[0];

         regs.r[0] = 0;
         regs.r[3] = FontDbox_NumberRange_AspectRatio;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[1] = regs.r[0];

         return NULL;
      case FontDbox_SetTryString:
         regs.r[0] = 0;
         regs.r[1] = internal->sub_object_id;
         regs.r[2] = WritableField_SetValue;
         regs.r[3] = FontDbox_WritableField_TryString;
         regs.r[4] = user_regs->r[3]; /* (char *) */

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FontDbox_GetTryString:
         regs.r[0] = 0;
         regs.r[1] = sub_object_id;
         regs.r[2] = WritableField_GetValue;
         regs.r[3] = FontDbox_WritableField_TryString;
         regs.r[4] = user_regs->r[3]; /* (char *) */
         regs.r[5] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[3] = regs.r[4];
         user_regs->r[4] = regs.r[5];

         return NULL;
   }
   IGNORE(t);

   return NULL;
}
@


4.1
log
@Initial revision
@
text
@a30 1
#include "services.h"
d37 3
a39 3
#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.fontdbox.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
