head	1.4;
access;
symbols
	Gadgets-0_44:1.4
	Gadgets-0_43:1.3
	Gadgets-0_42:1.3
	Gadgets-0_41:1.3
	Gadgets-0_40:1.3
	Gadgets-0_39:1.3
	Gadgets-0_38:1.3
	Gadgets-0_37:1.3
	Gadgets-0_36:1.3
	Gadgets-0_35:1.3
	Gadgets-0_34:1.3
	Gadgets-0_33:1.3
	Gadgets-0_32:1.3
	Gadgets-0_31:1.3
	Gadgets-0_30:1.3
	Gadgets-0_29:1.3
	Gadgets-0_28:1.3
	RO_5_07:1.3
	Gadgets-0_27:1.3
	Gadgets-0_26:1.3
	Gadgets-0_25:1.3
	Gadgets-0_24:1.3
	Gadgets-0_23:1.3
	Gadgets-0_22:1.3
	Gadgets-0_21:1.3
	Gadgets-0_20:1.2
	Gadgets-0_19:1.2
	Gadgets-0_18:1.2
	Gadgets-0_17:1.2
	Gadgets-0_16:1.2
	Gadgets-0_15:1.2
	sforrest_daytona_appflash-0_31:1.1.1.1
	Gadgets-0_14:1.1.1.1
	mjrobert_Java_26_08_98:1.1.1.1
	blaughto_daytona_appflash-0_30:1.1.1.1
	blaughto_daytona_appflash-0_29:1.1.1.1
	blaughto_daytona_appflash-0_28:1.1.1.1
	Gadgets-0_11:1.1.1.1
	sbrodie_TextGadgets_merged_19Jun98:1.1.1.1
	sbrodie_Daytona_merge_19Jun98:1.1.1.1
	sbrodie_Spin_merge_18Jun98:1.1.1.1
	jberanek_gadgets-0_08:1.1.1.1
	Gadgets-0_10-1_1_2_2:1.1.1.1
	blaughto_daytona_appflash-0_27:1.1.1.1
	blaughto_daytona_appflash-0_26:1.1.1.1
	blaughto_daytona_appflash-0_25:1.1.1.1
	blaughto_daytona_appflash-0_24:1.1.1.1
	blaughto_daytona_appflash-0_23:1.1.1.1
	blaughto_daytona_appflash-0_21:1.1.1.1
	blaughto_daytona_appflash-0_20:1.1.1.1
	blaughto_daytona_appflash-0_19:1.1.1.1
	jberanek_gadgets-0_07:1.1.1.1
	blaughto_daytona_appflash-0_18:1.1.1.1
	mrison_gadgets-0_06:1.1.1.1
	pwombwel_0_09:1.1.1.1
	mrison_gadgets-0_05:1.1.1.1
	Daytona:1.1.1.1.0.2
	Daytona_bp:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2018.02.09.09.00.22;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	hvuSc2WpQ5n6caqA;

1.3
date	99.06.18.14.20.55;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	99.03.26.12.25.17;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.05.13.16.25.54;	author rlougher;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.13.16.25.54;	author rlougher;	state Exp;
branches;
next	;


desc
@@


1.4
log
@SetColour method flag fixes
Fix checking of the DesktopColours flag to the scrolllist and textarea gadget SetColour methods - didn't match docs.
Fix for expression precedence of + and ? operators by sprinkling in some brackets.
Ref https://www.riscosopen.org/forum/forums/4/topics/9503#posts-72595

Also, optimise the forced redraw if the text area colour overall didn't change (reduces flicker).
Docs corrected to list RISC OS palette words in the right order.

Version 0.44. Tagged as 'Gadgets-0_44'
@
text
@The TextArea gadget has a boxed display area in which a block of text
is displayed and, if the appropriate flag is set, edited by the user.
The contents of the gadget can be set and read using the TextArea_SetText
and TextArea_GetText methods. The contents can be modified by inserting and
replacing text with the TextArea_InsertText and TextArea_ReplaceText methods.

There are no limits on the line length and overall text size, apart from
memory constraints.

The user can click the mouse in a text area and enter its value from the
keyboard. Dragging the mouse over the text with SELECT or ADJUST held down
selects text in the usual RISC OS manner. When the mouse is near the edges
of the gadget with a mouse button held down, the gadget will automatically
scroll.

The text for all gadgets is kept internally in a single dynamic area to
reduce overheads on the RMA. Since the text is multi-line, all strings are
NULL terminated, and can include carriage returns or linefeeds. Note that
a line terminator of CR/LF will [probably] be treated as two line feeds.

??? Should up arrow on top line move to the previous writable icon/text area?
??? (and same for down arrow on bottom line)

??? Should shift-TAB/TAB move to next/previous?

Bits in the flags word for a text area have the following meaning:

	Bit	Meaning when set
	0	gadget has a vertical scrollbar
	1	gadget has a horizontal scrollbar

The TextArea gadget requires the Window module, version 1.32 or greater.

Text area methods
=================

TextArea_GetState
-----------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id

On exit
	R0 = state
		bit 0 set means gadget has a vertical scrollbar
		bit 1 set means gadget has a horizontal scrollbar

C veneer
extern _kernel_oserror *textarea_get_state(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int *state);

TextArea_SetState
-----------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = state
		bit 0 set means gadget has a vertical scrollbar
		bit 1 set means gadget has a horizontal scrollbar

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *textarea_set_state(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int state);

TextArea_SetText
----------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = text

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *textarea_set_text(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			const char *text);

TextArea_GetText
----------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = pointer to buffer
	R5 = size of buffer

On exit
	R5 = size of buffer required to hold text (if R4 was 0)
		else buffer pointed at by R4 holds text
		R5 holds number of bytes written to buffer

C veneer
extern _kernel_oserror *textarea_get_text(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			char *buffer, int buff_size, int *nbytes);

TextArea_InsertText
-------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = index into text
	R5 = pointer to buffer

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *textarea_insert_text(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int index, const char *text);

TextArea_ReplaceText
--------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = selection start
	R5 = selection end
	R6 = pointer to buffer

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *textarea_replace_text(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int index_start, unsigned int index_end,
			const char *text);

TextArea_GetSelection
---------------------
On entry
	R0 = flags
		bit 0 set means return text rather than indexes
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = pointer to buffer (only if bit 0 of R0 set)
	R5 = size of buffer (only if bit 0 of R0 set)

On exit
	R4 = index to start of selection (if bit 0 in R0 was set)
	R5 = index to end of selection (if bit 0 in R0 was set)
	else
	R5 = size of buffer required to hold selected text (if R4 was 0)
		else buffer pointed at by R4 holds selected text
		R5 holds number of bytes written to buffer

C veneers
extern _kernel_oserror *textarea_get_selection_text(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			char *buffer, int size, unsigned int *nbytes);

extern _kernel_oserror *textarea_get_selection_points(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int *index_start, unsigned int *index_end);

TextArea_SetSelection
---------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = index to start of selection
	R5 = index to end of selection

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *textarea_set_selection(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int index_start, unsigned int index_end);

TextArea_SetFont
----------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = pointer to font name to use
	R5 = width in 16th of a point
	R6 = height in 16th of a point

On exit
	R1-R9 preserved

Use

This method makes the text area use an anti-aliased font. If the font
name is NULL, then the text area will use the current desktop font (or
system font if unset)

C veneer
extern _kernel_oserror *textarea_set_font(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			const char *font, unsigned int width,
			unsigned int height);

TextArea_SetColour
------------------
On entry
	R0 = flags
		bit 0 set means use desktop colours rather than
			real colours (in the form &BBGGRR00)
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = Colour value for foreground text (in the form &BBGGRR00,
		unless bit 0 of R0 is set)
	R5 = Colour value for background (in the form &BBGGRR00,
		unless bit 0 of R0 is set)

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *textarea_set_colour(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int foreground, unsigned int background);

TextArea_GetColour
------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id

On exit
	R0 = Colour value (in the form &BBGGRR00) of foreground
	R1 = Colour value (in the form &BBGGRR00) of background


C veneer
extern _kernel_oserror *textarea_get_colour(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int *foreground, unsigned int *background);

TextArea_SetCursorPosition
--------------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = index into text for cursor

On exit
	R4 = old index

Use

This methods sets the cursor position in a TextArea, you pass it the
index you want to change to, and it will pass back the old index value.

If Bit 0 of the flags word is set the setting of the caret position is
forced.  If Bit 1 is set, the caret is set invisibly.

C veneer
extern _kernel_oserror *textarea_set_cursor_position(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int index, unsigned int *new_index);


TextArea_GetCursorPosition
--------------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id

On exit
	R4 = index

Gets the index of the current cursor position in a TextArea.

C veneer
extern _kernel_oserror *textarea_get_cursor_position(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int *index);


TextArea_SetTextBorder
----------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ???
	R3 = Gadget component id
	R4 = Border size in OS units

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *textarea_set_text_border(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int border_size);

Bugs
----

Amongst many others, TextArea shares a bug in common with ScrollList.

Whilst the gadget reads the current mode's scale factors and the size of
the current Wimp tool sprites to accurately position its embedded window
within the defined gadget bounding box at create-time, it does not notice
if these values change. If tools or Desktop scaling alter, the gadget
will only notice when a new instance of a ScrollList is created. At this
point, existing ScrollLists will not resize, but will start using the new
values (since they're global to the module). At such a time as an interface
exists which allows external gadget modules to be told about Wimp messages,
this all gets fixed, as all gadgets can be resized appropriately - hence a
gadget-global record of the relevant details is OK.
@


1.3
log
@ * Fixed the textarea_set/get_cursor_position methods to use the method
   interface as specified in docs.textarea.  I wasn't returning values
   in R4 as it showed in the document, I am now.  The fetching of the
   cursor position (in both the get and set calls) doesn't appear to
   work (always returns 0) with what appears to be the correct code to
   achieve this.  The fixing of this is left as an exercise for the bored
   and very brave person...textarea internals are "interesting".

 * Added some description of the methods into docs.textarea


Version 0.21. Tagged as 'Gadgets-0_21'
@
text
@d226 1
a226 1
			real colours (in the form &BBRRGG00)
d230 1
a230 1
	R4 = Colour value for foreground text (in the form &BBRRGG00,
d232 1
a232 1
	R5 = Colour value for background (in the form &BBRRGG00,
d252 2
a253 2
	R0 = Colour value (in the form &BBRRGG00) of foreground
	R1 = Colour value (in the form &BBRRGG00) of background
@


1.2
log
@Various fixes and extensions to ScrollList, plus a related fix in TextArea
and ScrollBar.

Title background colour of gadgets was either undefined or set to 0; should
be 2. Corrected. Would be apparent with 2D tools or any transparent tool
sprite set.

SELECT clicks on deselected entries in a ScrollList now deselect any other
selected items before selecting the new one.

Embedded window of TextArea and ScrollList now put in the right place. At
create time, the sizes of the current tool sprite set is also checked; this
used to be hard coded. If the tool sizes and/or Desktop scaling changes at
run-time this won't be noticed yet, as no mechanism to pass Wimp messages
to *external* gadgets exists in the Toolbox currently. Still, at least it
gets it right the next time a new instance of the gadget is created.

Flag bit ScrollList_SelectionChangingMethod_SendEvent to any of
scrolllist_select_item, scrolllist_deselect_item or scrolllist_delete_items
prompts them to send ScrollList_Selection to the client on completion. This
can help simplify client UI code for UIs which depend on what is selected
(e.g. a "Select all" button greys out if all items are selected by a
keyboard shortcut - this can now all work on just the one event handler).

Flag bit ScrollList_SelectionChangingMethod_OnAll to either of
scrolllist_select_item or scrolllist_deselect_item tells the methods to
act like a "Select all" or "Clear selection" call. This is a common client
operation and it's a lot easier for the ScrollList gadget to do it than
have the client iterate over all items.

Supports new method ScrollList_CountItems (scrolllist_count_items veneer
present in tboxlibs 0.04 or later). Returns number of entries in gadget.
Avoids clumsy situation of both the gadget and the clienty keeping track
of how many entries are present.

Note that docs.ScrollList mis-documented some flags settings. Now fixed.

Version 0.15. Not tagged
@
text
@d273 8
d286 1
d296 3
a298 1
	R4 = old index
d304 1
@


1.1
log
@Initial revision
@
text
@d310 16
@


1.1.1.1
log
@The Java directory contains the sources for the Java support modules
(TextGadget, etc.) and the makefiles to complete the Java ROM build
under RiscOS.

@
text
@@
