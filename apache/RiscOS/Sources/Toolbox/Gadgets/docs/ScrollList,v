head	1.4;
access;
symbols
	Gadgets-0_44:1.4
	Gadgets-0_43:1.3
	Gadgets-0_42:1.3
	Gadgets-0_41:1.3
	Gadgets-0_40:1.3
	Gadgets-0_39:1.3
	Gadgets-0_38:1.3
	Gadgets-0_37:1.3
	Gadgets-0_36:1.3
	Gadgets-0_35:1.3
	Gadgets-0_34:1.3
	Gadgets-0_33:1.3
	Gadgets-0_32:1.3
	Gadgets-0_31:1.3
	Gadgets-0_30:1.3
	Gadgets-0_29:1.3
	Gadgets-0_28:1.3
	RO_5_07:1.3
	Gadgets-0_27:1.3
	Gadgets-0_26:1.3
	Gadgets-0_25:1.3
	Gadgets-0_24:1.3
	Gadgets-0_23:1.3
	Gadgets-0_22:1.3
	Gadgets-0_21:1.3
	Gadgets-0_20:1.3
	Gadgets-0_19:1.3
	Gadgets-0_18:1.3
	Gadgets-0_17:1.3
	Gadgets-0_16:1.3
	Gadgets-0_15:1.2
	sforrest_daytona_appflash-0_31:1.1.1.1
	Gadgets-0_14:1.1.1.1
	mjrobert_Java_26_08_98:1.1.1.1
	blaughto_daytona_appflash-0_30:1.1.1.1
	blaughto_daytona_appflash-0_29:1.1.1.1
	blaughto_daytona_appflash-0_28:1.1.1.1
	Gadgets-0_11:1.1.1.1
	sbrodie_TextGadgets_merged_19Jun98:1.1.1.1
	sbrodie_Daytona_merge_19Jun98:1.1.1.1
	sbrodie_Spin_merge_18Jun98:1.1.1.1
	jberanek_gadgets-0_08:1.1.1.1
	Gadgets-0_10-1_1_2_2:1.1.1.1
	blaughto_daytona_appflash-0_27:1.1.1.1
	blaughto_daytona_appflash-0_26:1.1.1.1
	blaughto_daytona_appflash-0_25:1.1.1.1
	blaughto_daytona_appflash-0_24:1.1.1.1
	blaughto_daytona_appflash-0_23:1.1.1.1
	blaughto_daytona_appflash-0_21:1.1.1.1
	blaughto_daytona_appflash-0_20:1.1.1.1
	blaughto_daytona_appflash-0_19:1.1.1.1
	jberanek_gadgets-0_07:1.1.1.1
	blaughto_daytona_appflash-0_18:1.1.1.1
	mrison_gadgets-0_06:1.1.1.1
	pwombwel_0_09:1.1.1.1
	mrison_gadgets-0_05:1.1.1.1
	Daytona:1.1.1.1.0.2
	Daytona_bp:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2018.02.09.09.00.22;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	hvuSc2WpQ5n6caqA;

1.3
date	99.03.30.15.11.44;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	99.03.26.12.25.16;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.05.13.16.25.54;	author rlougher;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.13.16.25.54;	author rlougher;	state Exp;
branches;
next	;


desc
@@


1.4
log
@SetColour method flag fixes
Fix checking of the DesktopColours flag to the scrolllist and textarea gadget SetColour methods - didn't match docs.
Fix for expression precedence of + and ? operators by sprinkling in some brackets.
Ref https://www.riscosopen.org/forum/forums/4/topics/9503#posts-72595

Also, optimise the forced redraw if the text area colour overall didn't change (reduces flicker).
Docs corrected to list RISC OS palette words in the right order.

Version 0.44. Tagged as 'Gadgets-0_44'
@
text
@A ScrollList is a gadget used to provide a scrolling list.

Bits in the flags word for a ScrollList have the following meaning:

	Bit	Meaning when set
	0	gadget can have multiple selected items

The ScrollList gadget requires the Window module, version 1.33 or greater.
ScrollList_Base is currently defined as &401A.

ScrollList methods
==================

ScrollList_GetState
-------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ScrollList_Base + 0
	R3 = Gadget component id

On exit
	R0 = state
		bit 0 set means gadget can have multiple selected items

C veneer
extern _kernel_oserror *scrolllist_get_state(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int *state);

ScrollList_SetState
-------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ScrollList_Base + 1
	R3 = Gadget component id
	R4 = state
		bit 0 set means gadget can have multiple selected items

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *scrolllist_set_state(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int state);

ScrollList_AddItem
------------------
On entry
	R0 = flags
		bits 0 and 1 determine how the sprite is specified
		by R5 and R6:
			bits	meaning
			00	R5 unused
				R6 = sprite name in wimp sprite pool
			01	R5 = sprite area, R6 = sprite name
			10	R5 = sprite area, R6 = pointer to sprite
			11	reserved
		bit 2 set means plot sprite (if any) at half size
		bit 3 set means ensure new item is visible in gadget (try
			to scroll to place it at top of display), else
			preserve y scroll position (visible display thus
			may or may not move depending on whether or not
			the new item was above or below/within those
			items currently within the visible area).
	R1 = Window object id
	R2 = ScrollList_Base + 2
	R3 = Gadget component id
	R4 = text
	R5 = pointer to sprite area if bits 0 & 1 of R0 = 2_01 or 2_10;
		else unused
	R6 = sprite name if bits 0 & 1 of R0 = 2_00 or 2_01;
		else pointer to sprite if bits 0 & 1 of R0 = 2_10
	R7 = index

On exit
	R1-R9 preserved

Use
	Bits 0 and 1 of R0 behave similarly to OS_SpriteOp:
	R0 bits 0 & 1	R5 effect		R6 effect
	00		not used (wimp pool)	pointer to sprite name
	01		pointer to sprite area	pointer to sprite name
	10		pointer to sprite area	pointer to sprite
	11 is invalid

C veneer
extern _kernel_oserror *scrolllist_add_item(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			const char *text, const char *sprite_area,
			const void *sprite_name, int index);

ScrollList_DeleteItems
----------------------
On entry
	R0 = flags
		bit 0 set means sent ScrollList_Selection event when complete
			- item number in this event will be -1
		bit 1 set means try to preserve y scroll position, else jump
			to top of display
	R1 = Window object id
	R2 = ScrollList_Base + 3
	R3 = Gadget component id
	R4 = start index
	R5 = end index

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *scrolllist_delete_items(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int start_index, int end_index);

ScrollList_SelectItem
---------------------
On entry
	R0 = flags
		bit 0 set means sent ScrollList_Selection event when complete
		bit 1 set means select all items - if bit 0 is also set, item
			number in ScrollList_Selection event will be 0
	R1 = Window object id
	R2 = ScrollList_Base + 4
	R3 = Gadget component id
	R4 = index

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *scrolllist_select_item(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int index);

ScrollList_DeselectItem
-----------------------
On entry
	R0 = flags
		bit 0 set means sent ScrollList_Selection event when complete
		bit 1 set means deselect all items - if bit 0 is also set,
			item number in ScrollList_Selection event will be 0
	R1 = Window object id
	R2 = ScrollList_Base + 5
	R3 = Gadget component id
	R4 = index

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *scrolllist_deselect_item(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int index);

ScrollList_GetSelected
----------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ScrollList_Base + 6
	R3 = Gadget component id
	R4 = offset (-1 to start)

On exit
	R0 = next selected item, -1 to finish

C veneer
extern _kernel_oserror *scrolllist_get_selected(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int offset, int *new_offset);

ScrollList_MakeVisible
----------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ScrollList_Base + 7
	R3 = Gadget component id
	R4 = index

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *scrolllist_make_visible(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int index);

ScrollList_SetColour
--------------------
On entry
	R0 = flags
		bit 0 set means use desktop colours rather than
			real colours (in the form &BBGGRR00)
	R1 = Window object id
	R2 = ScrollList_Base + 8
	R3 = Gadget component id
	R4 = Colour value for foreground text (in the form &BBGGRR00,
		unless bit 0 of R0 is set)
	R5 = Colour value for background (in the form &BBGGRR00,
		unless bit 0 of R0 is set)

On exit
	R1-R9 preserved

C veneer
extern _kernel_oserror *scrolllist_set_colour(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int foreground, unsigned int background);

ScrollList_GetColour
--------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ScrollList_Base + 9
	R3 = Gadget component id

On exit
	R0 = Colour value (in the form &BBGGRR00) of foreground
	R1 = Colour value (in the form &BBGGRR00) of background


C veneer
extern _kernel_oserror *scrolllist_get_colour(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int *foreground, unsigned int *background);

ScrollList_SetFont
------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ScrollList_Base + 10
	R3 = Gadget component id
	R4 = pointer to font name to use
	R5 = width in 16th of a point
	R6 = height in 16th of a point

On exit
	R1-R9 preserved

Use

This method makes the scrolling list use an anti-aliased font. If the font
name is NULL, then the text area will use the current desktop font (or
system font if unset)

C veneer
extern _kernel_oserror *scrolllist_set_font(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			const char *font, unsigned int width,
			unsigned int height);

ScrollList_GetItemText
----------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ScrollList_Base + 11
	R3 = Gadget component_id
	R4 = pointer to buffer for text (or NULL)
	R5 = size of buffer
	R6 = index

On exit
	R5 = size of buffer required (if R4 was 0)
	     else buffer pointed at by R4 contains text
	     R5 holds number of bytes written to buffer


C veneer
extern _kernel_oserror *scrolllist_get_item_text(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			char *text, int buffer_size, int index, int *nbytes);

ScrollList_CountItems
---------------------

On entry:
	R0 = flags
	R1 = Window object id
	R2 = ScrollList_Base + 12
	R3 = Gadget component_id

On exit:
	R0 = Number of items


C Veneer (tboxlibs 0.04 or later):
extern _kernel_oserror * scrolllist_count_items(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int *items);

ScrollList_SetItemText
----------------------
On entry
	R0 = flags
	R1 = Window object id
	R2 = ScrollList_Base + 11
	R3 = Gadget component_id
	R4 = Pointer to buffer holding new string
	R5 = index


C veneer (tboxlibs 0.05 or later):
extern _kernel_oserror *scrolllist_set_item_text(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			char *new_text, int index);


Bugs
----

Whilst the gadget reads the current mode's scale factors and the size of
the current Wimp tool sprites to accurately position its embedded window
within the defined gadget bounding box at create-time, it does not notice
if these values change. If tools or Desktop scaling alter, the gadget
will only notice when a new instance of a ScrollList is created. At this
point, existing ScrollLists will not resize, but will start using the new
values (since they're global to the module). At such a time as an interface
exists which allows external gadget modules to be told about Wimp messages,
this all gets fixed, as all gadgets can be resized appropriately - hence a
gadget-global record of the relevant details is OK.
@


1.3
log
@ScrollList changes.

Added scrolllist_set_item_text. Tweak to extent setting to account for
window border. _add_item fix ('>' should've read '>=' in index range
check). Can now tell _add_item to make the new item visible (flag
ScrollList_AddItem_MakeVisible), else it will try to maintain the y
scroll position. _delete_items continues to jump to the top as before,
but you can ask it to try and maintain the y scroll position too
(flag ScrollList_DeleteItems_DoNotJumpToTop).

Version 0.16. Tagged as 'Gadgets-0_16'
@
text
@d196 1
a196 1
			real colours (in the form &BBRRGG00)
d200 1
a200 1
	R4 = Colour value for foreground text (in the form &BBRRGG00,
d202 1
a202 1
	R5 = Colour value for background (in the form &BBRRGG00,
d222 2
a223 2
	R0 = Colour value (in the form &BBRRGG00) of foreground
	R1 = Colour value (in the form &BBRRGG00) of background
@


1.2
log
@Various fixes and extensions to ScrollList, plus a related fix in TextArea
and ScrollBar.

Title background colour of gadgets was either undefined or set to 0; should
be 2. Corrected. Would be apparent with 2D tools or any transparent tool
sprite set.

SELECT clicks on deselected entries in a ScrollList now deselect any other
selected items before selecting the new one.

Embedded window of TextArea and ScrollList now put in the right place. At
create time, the sizes of the current tool sprite set is also checked; this
used to be hard coded. If the tool sizes and/or Desktop scaling changes at
run-time this won't be noticed yet, as no mechanism to pass Wimp messages
to *external* gadgets exists in the Toolbox currently. Still, at least it
gets it right the next time a new instance of the gadget is created.

Flag bit ScrollList_SelectionChangingMethod_SendEvent to any of
scrolllist_select_item, scrolllist_deselect_item or scrolllist_delete_items
prompts them to send ScrollList_Selection to the client on completion. This
can help simplify client UI code for UIs which depend on what is selected
(e.g. a "Select all" button greys out if all items are selected by a
keyboard shortcut - this can now all work on just the one event handler).

Flag bit ScrollList_SelectionChangingMethod_OnAll to either of
scrolllist_select_item or scrolllist_deselect_item tells the methods to
act like a "Select all" or "Clear selection" call. This is a common client
operation and it's a lot easier for the ScrollList gadget to do it than
have the client iterate over all items.

Supports new method ScrollList_CountItems (scrolllist_count_items veneer
present in tboxlibs 0.04 or later). Returns number of entries in gadget.
Avoids clumsy situation of both the gadget and the clienty keeping track
of how many entries are present.

Note that docs.ScrollList mis-documented some flags settings. Now fixed.

Version 0.15. Not tagged
@
text
@d52 1
a52 1
	R0 = flags 
d62 6
d101 2
d296 17
@


1.1
log
@Initial revision
@
text
@d9 1
d19 1
a19 1
	R2 = ???
d36 1
a36 1
	R2 = ???
d63 1
a63 1
	R2 = ???
d93 2
d96 1
a96 1
	R2 = ???
d113 3
a115 2
		bit 0 set means make this the only selected item
			even on a multiple-selections list
d117 1
a117 1
	R2 = ???
d133 3
d137 1
a137 1
	R2 = ???
d154 1
a154 1
	R2 = ???
d171 1
a171 1
	R2 = ???
d190 1
a190 1
	R2 = ???
d210 1
a210 1
	R2 = ???
d228 1
a228 1
	R2 = ???
d254 1
a254 1
	R2 = ???
d271 18
d291 11
@


1.1.1.1
log
@The Java directory contains the sources for the Java support modules
(TextGadget, etc.) and the makefiles to complete the Java ROM build
under RiscOS.

@
text
@@
