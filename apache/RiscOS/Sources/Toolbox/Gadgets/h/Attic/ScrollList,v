head	1.5;
access;
symbols
	Gadgets-0_35:1.4
	Gadgets-0_34:1.4
	Gadgets-0_33:1.4
	Gadgets-0_32:1.4
	Gadgets-0_31:1.4
	Gadgets-0_30:1.4
	Gadgets-0_29:1.4
	Gadgets-0_28:1.4
	RO_5_07:1.4
	Gadgets-0_27:1.4
	Gadgets-0_26:1.4
	Gadgets-0_25:1.4
	Gadgets-0_24:1.4
	Gadgets-0_23:1.4
	Gadgets-0_22:1.4
	Gadgets-0_21:1.4
	Gadgets-0_20:1.4
	Gadgets-0_19:1.4
	Gadgets-0_18:1.4
	Gadgets-0_17:1.4
	Gadgets-0_16:1.4
	Gadgets-0_15:1.3
	sforrest_daytona_appflash-0_31:1.1.1.1
	Gadgets-0_14:1.2
	mjrobert_Java_26_08_98:1.1.1.2
	blaughto_daytona_appflash-0_30:1.1.1.1
	blaughto_daytona_appflash-0_29:1.1.1.1
	blaughto_daytona_appflash-0_28:1.1.1.1
	Gadgets-0_11:1.1.1.2
	sbrodie_TextGadgets_merged_19Jun98:1.1.1.2
	sbrodie_Daytona_merge_19Jun98:1.1.1.1
	sbrodie_Spin_merge_18Jun98:1.1.1.2
	jberanek_gadgets-0_08:1.1.1.1
	Gadgets-0_10-1_1_2_2:1.1.1.2
	blaughto_daytona_appflash-0_27:1.1.1.1
	blaughto_daytona_appflash-0_26:1.1.1.1
	blaughto_daytona_appflash-0_25:1.1.1.1
	blaughto_daytona_appflash-0_24:1.1.1.1
	blaughto_daytona_appflash-0_23:1.1.1.1
	blaughto_daytona_appflash-0_21:1.1.1.1
	blaughto_daytona_appflash-0_20:1.1.1.1
	blaughto_daytona_appflash-0_19:1.1.1.1
	jberanek_gadgets-0_07:1.1.1.1
	blaughto_daytona_appflash-0_18:1.1.1.1
	mrison_gadgets-0_06:1.1.1.1
	pwombwel_0_09:1.1.1.1
	mrison_gadgets-0_05:1.1.1.1
	Daytona:1.1.1.1.0.2
	Daytona_bp:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2013.08.30.19.34.40;	author rsprowson;	state dead;
branches;
next	1.4;
commitid	cFJZhP2Bmu3bUv3x;

1.4
date	99.03.30.15.11.45;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	99.03.26.12.25.18;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	98.06.22.15.22.18;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	97.05.13.16.25.56;	author rlougher;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.13.16.25.56;	author rlougher;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.06.18.15.32.30;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Change to link against tboxlibint
For some reason this toolbox module was unique in linking against the public toolboxlib rather than the internal one, this meant having to carefully tippy toe around not mixing header files (as they contain similar but differently named definitions).
A massive search and replace job.
Tested briefly using ResEd/ResTest and a textarea and scrolllist in a ROM build.
Requires Common-0_21.

Version 0.36. Tagged as 'Gadgets-0_36'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/****************************************************************************
 * This source file was written by Acorn Computers Limited. It is part of   *
 * the toolbox library for writing desktop applications in C. It may be     *
 * used freely in the creation of programs for Archimedes or Risc PC. It    *
 * should be used with Acorn's C Compiler Release 5 or later.               *
 *                                                                          *
 *                                                                          *
 * Copyright © Acorn Computers Ltd, 1994                                    *
 *                                                                          *
 ***************************************************************************/



/*
 * Name        : scrolllist.h
 * Description : C veneers to the Methods provided by the ScrollList gadget
 */



#ifndef __scrolllist_h
#define __scrolllist_h


#ifndef __kernel_h
#include "kernel.h"
#endif

#ifndef __toolbox_h
#include "toolbox.h"
#endif

#ifndef __window_h
#include "window.h"
#endif


/****************************************************************************
 * ScrollList Templates                                                     *
 ****************************************************************************/

/*-- gadget flags --*/

#define ScrollList_SingleSelections	0x00000000
#define ScrollList_MultipleSelections	0x00000001

#define ScrollListValidFlags	        0xC0000001

/*-- templates --*/

typedef struct
{
    GadgetHeader	hdr;
    int			event;
    unsigned int	foreground;
    unsigned int	background;
} ScrollList;


/*-- ScrollList methods --*/

#define ScrollList_Base		0x401A
#define ScrollList_Type		(sizeof(ScrollList)) << 16 | ScrollList_Base
#define ScrollList_SWIBase	0x140182

#define ScrollList_GetState	(ScrollList_Base + 0)
#define ScrollList_SetState	(ScrollList_Base + 1)
#define ScrollList_AddItem	(ScrollList_Base + 2)
#define ScrollList_DeleteItems	(ScrollList_Base + 3)
#define ScrollList_SelectItem	(ScrollList_Base + 4)
#define ScrollList_DeselectItem	(ScrollList_Base + 5)
#define ScrollList_GetSelected	(ScrollList_Base + 6)
#define ScrollList_MakeVisible	(ScrollList_Base + 7)
#define ScrollList_SetColour	(ScrollList_Base + 8)
#define ScrollList_GetColour	(ScrollList_Base + 9)
#define ScrollList_SetFont	(ScrollList_Base + 10)
#define ScrollList_GetItemText	(ScrollList_Base + 11)
#define ScrollList_CountItems   (ScrollList_Base + 12)
#define ScrollList_SetItemText  (ScrollList_Base + 13)


/*-- ScrollList button events --*/

#define ScrollList_Selection	(0x140180 + 1)

#define ScrollList_Selection_Flags_Set		(1<<0)
#define ScrollList_Selection_Flags_DoubleClick	(1<<1)
#define ScrollList_Selection_Flags_AdjustClick	(1<<2)

typedef struct
{
    ToolboxEventHeader	hdr;
    unsigned int	flags;
    int			item;
} ScrollListSelectionEvent;


/*-- ScrollList SWI method constants --*/

#define ScrollList_DesktopColours		(1<<0)

/*-- method flags for select_item, deselect_item, delete_items --*/

#define ScrollList_SelectionChangingMethod_SendEvent (1u<<0)
#define ScrollList_SelectionChangingMethod_OnAll     (1u<<1)

/*-- method flags for add_item and delete_items --*/

#define ScrollList_AddItem_MakeVisible               (1u<<3)
#define ScrollList_DeleteItems_DoNotJumpToTop        (1u<<1)


/****************************************************************************
 * The following functions provide veneers to the methods that are          *
 * associated with this particular class.  Please read the C Release 5      *
 * user guide for more detailed information on their functionality.         *
 ****************************************************************************/


#ifdef __cplusplus
  extern "C" {
#endif


/*
 * Name        : scrolllist_select_item
 * Description : Selects the given item from the specified scrolllist
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               int index
 * Out         : None
 * Returns     : pointer to error block
 *
 * To receive a ScrollList_Selection event indicating the item that
 * was selected with any mouse button related flags cleared, set the
 * ScrollList_SelectionChangingMethod_SendEvent bit of the flags.
 * This will be sent even if the item you specify was already
 * selected before the function call was made.
 *
 * To select all items, call with the flags bit
 * ScrollList_SelectionChangingMethod_OnAll set. In this case, the
 * value set in 'index' is irrelevant. If using the flags to get a
 * ScrollList_Selection event as well (see above), the item number
 * in the event will be zero.
 */

extern _kernel_oserror *scrolllist_select_item ( unsigned int flags,
                                                 ObjectId window,
                                                 ComponentId scrolllist,
                                                 int index
                                               );


/*
 * Name        : scrolllist_set_font
 * Description : Set the font for the specified scrolllist.
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               const char *font_name
 *               unsigned int width
 *               unsigned int height
 * Out         : None
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_set_font ( unsigned int flags,
                                              ObjectId window,
                                              ComponentId scrolllist,
                                              const char *font_name,
                                              unsigned int width,
                                              unsigned int height
                                            );


/*
 * Name        : scrolllist_get_colour
 * Description : Gets the colours currently being used for the specified scrolllist.
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 * Out         : unsigned int *foreground
 *               unsigned int *background
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_get_colour ( unsigned int flags,
                                                ObjectId window,
                                                ComponentId scrolllist,
                                                unsigned int *foreground,
                                                unsigned int *background
                                              );


/*
 * Name        : scrolllist_set_colour
 * Description : Sets the colours for the specified scrolllist.
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               unsigned int foreground
 *               unsigned int background
 * Out         : None
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_set_colour ( unsigned int flags,
                                                ObjectId window,
                                                ComponentId scrolllist,
                                                unsigned int foreground,
                                                unsigned int background
                                              );


/*
 * Name        : scrolllist_get_item_text
 * Description : Gets the text of the specified scrolllist item.
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               char *buffer
 *               int size
 *               int index
 * Out         : int *nbytes
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_get_item_text ( unsigned int flags,
                                                   ObjectId window,
                                                   ComponentId scrolllist,
                                                   char *buffer,
                                                   int size,
                                                   int index,
                                                   int *nbytes
                                                 );

/*
 * Name        : scrolllist_set_item_text
 * Description : Sets the text of the specified scrolllist item.
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               char *new_text
 *               int index
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_set_item_text ( unsigned int flags,
                                                   ObjectId window,
                                                   ComponentId scrolllist,
                                                   char *new_text,
                                                   int index
                                                 );


/*
 * Name        : scrolllist_set_state
 * Description : Sets the state of the specified scrolllist.
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               unsigned int state
 * Out         : None
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_set_state ( unsigned int flags,
                                               ObjectId window,
                                               ComponentId scrolllist,
                                               unsigned int state
                                             );


/*
 * Name        : scrolllist_get_state
 * Description : Gets the state of the specified scrolllist.
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 * Out         : unsigned int *state
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_get_state ( unsigned int flags,
                                               ObjectId window,
                                               ComponentId scrolllist,
                                               unsigned int *state
                                             );


/*
 * Name        : scrolllist_add_item
 * Description : Adds an item to the specified scrolllist
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               const char *text
 *               const void *sprite_area
 *               const char *sprite_name
 *               int index
 * Out         : None
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_add_item ( unsigned int flags,
                                              ObjectId window,
                                              ComponentId scrolllist,
                                              const char *text,
                                              const void *sprite_area,
                                              const char *sprite_name,
                                              int index
                                            );


/*
 * Name        : scrolllist_delete_items
 * Description : Deletes the items from the specified scrolllist
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               int start
 *               int end
 * Out         : None
 * Returns     : pointer to error block
 *
 * To be sent a ScrollList_Selection event after the function completes,
 * set the ScrollList_SelectionChangingMethod_SendEvent bit of the flags.
 * The event you receive merely notifies you of completion; the actual
 * selection may not have changed. Note that an item number of '-1' will
 * be present in the event received.
 */

extern _kernel_oserror *scrolllist_delete_items ( unsigned int flags,
                                                  ObjectId window,
                                                  ComponentId scrolllist,
                                                  int start,
                                                  int end
                                                );


/*
 * Name        : scrolllist_get_selected
 * Description : Gets the selected items from the specified scrolllist.
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               int offset
 * Out         : int *new_offset
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_get_selected ( unsigned int flags,
                                                  ObjectId window,
                                                  ComponentId scrolllist,
                                                  int offset,
                                                  int *new_offset
                                                );


/*
 * Name        : scrolllist_make_visible
 * Description : Forces the given item of the specified scrolllist to be visible.
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               int index
 * Out         : None
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_make_visible ( unsigned int flags,
                                                  ObjectId window,
                                                  ComponentId scrolllist,
                                                  int index
                                                );


/*
 * Name        : scrolllist_deselect_item
 * Description : Deselects the specified item from the specified scrolllist
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               int index
 * Out         : None
 * Returns     : pointer to error block
 *
 * To receive a ScrollList_Selection event indicating the item that
 * was deselected with any mouse button related flags cleared, set the
 * ScrollList_SelectionChangingMethod_SendEvent bit of the flags. This
 * will be sent even if the item you specify was already deselected
 * before the function call was made.
 *
 * To deselect all items, call with the flags bit
 * ScrollList_SelectionChangingMethod_OnAll set. In this case, the value
 * given in 'index' is irrelevant.
 */

extern _kernel_oserror *scrolllist_deselect_item ( unsigned int flags,
                                                   ObjectId window,
                                                   ComponentId scrolllist,
                                                   int index
                                                 );


/*
 * Name        : scrolllist_count_items
 * Description : Returns the number of items in the scrolllist
 * In          : unsigned int flags
 *               ObjectId window
 *               ComponentId scrolllist
 *               unsigned int *items
 * Out         : None
 * Returns     : pointer to error block
 */

extern _kernel_oserror *scrolllist_count_items ( unsigned int flags,
                                                 ObjectId window,
                                                 ComponentId scrolllist,
                                                 unsigned int *items
                                               );

#ifdef __cplusplus
  }
#endif




#endif
@


1.4
log
@ScrollList changes.

Added scrolllist_set_item_text. Tweak to extent setting to account for
window border. _add_item fix ('>' should've read '>=' in index range
check). Can now tell _add_item to make the new item visible (flag
ScrollList_AddItem_MakeVisible), else it will try to maintain the y
scroll position. _delete_items continues to jump to the top as before,
but you can ask it to try and maintain the y scroll position too
(flag ScrollList_DeleteItems_DoNotJumpToTop).

Version 0.16. Tagged as 'Gadgets-0_16'
@
text
@@


1.3
log
@Various fixes and extensions to ScrollList, plus a related fix in TextArea
and ScrollBar.

Title background colour of gadgets was either undefined or set to 0; should
be 2. Corrected. Would be apparent with 2D tools or any transparent tool
sprite set.

SELECT clicks on deselected entries in a ScrollList now deselect any other
selected items before selecting the new one.

Embedded window of TextArea and ScrollList now put in the right place. At
create time, the sizes of the current tool sprite set is also checked; this
used to be hard coded. If the tool sizes and/or Desktop scaling changes at
run-time this won't be noticed yet, as no mechanism to pass Wimp messages
to *external* gadgets exists in the Toolbox currently. Still, at least it
gets it right the next time a new instance of the gadget is created.

Flag bit ScrollList_SelectionChangingMethod_SendEvent to any of
scrolllist_select_item, scrolllist_deselect_item or scrolllist_delete_items
prompts them to send ScrollList_Selection to the client on completion. This
can help simplify client UI code for UIs which depend on what is selected
(e.g. a "Select all" button greys out if all items are selected by a
keyboard shortcut - this can now all work on just the one event handler).

Flag bit ScrollList_SelectionChangingMethod_OnAll to either of
scrolllist_select_item or scrolllist_deselect_item tells the methods to
act like a "Select all" or "Clear selection" call. This is a common client
operation and it's a lot easier for the ScrollList gadget to do it than
have the client iterate over all items.

Supports new method ScrollList_CountItems (scrolllist_count_items veneer
present in tboxlibs 0.04 or later). Returns number of entries in gadget.
Avoids clumsy situation of both the gadget and the clienty keeping track
of how many entries are present.

Note that docs.ScrollList mis-documented some flags settings. Now fixed.

Version 0.15. Not tagged
@
text
@a62 5
/*-- method flags for select_item, deselect_item, delete_items --*/

#define ScrollList_SelectionChangingMethod_SendEvent (1u<<0)
#define ScrollList_SelectionChangingMethod_OnAll     (1u<<1)

d93 1
d116 10
d232 1
a232 1
 * Description : Gets the text of the specified scrolllist.
d250 18
@


1.2
log
@* These changes make no difference to the build of the TextGadget module.

Re-arranged header files to be suitable for sharing with Toolboxlib and
for export to RiscOS/Export/Lib/tboxlibs/h.  The ordering and style of
these files now matches other toolboxlib header files.

Private TextArea macro definitions moved from TextArea.h to TextAreaP.h

Most function declarations are now auto-generated by MethodGen so they
come with documentation for free, except for TextArea_GetSelection*
which need to be done manually.  This new set of declarations is
identical to the hand-written ones which existed previously.
@
text
@d56 1
a56 1
/*-- flags --*/
d63 5
d97 1
d142 12
d316 6
d378 10
d396 17
@


1.1
log
@Initial revision
@
text
@d15 16
a30 3
/* ScrollList.h
 *
 * Implements a scrolling list toolbox gadget
a32 2
#ifndef __SCROLLLIST_H
#define __SCROLLLIST_H
d34 30
a63 1
/* template definition */
a72 4
#define ScrollListValidFlags	0xC0000001

#define ScrollList_SingleSelections	0x00000000
#define ScrollList_MultipleSelections	0x00000001
d74 1
a74 1
/* scrolling list methods */
d77 1
d79 1
a92 1
#define ScrollList_Type		(sizeof(ScrollList)) << 16 | ScrollList_Base
d94 1
a94 1
#define ScrollList_DesktopColours		(1<<0)
a95 1
/* Scroll list events */
d100 2
a108 1
// None yet
d110 259
a368 49
extern _kernel_oserror *scrolllist_get_state(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int *state);

extern _kernel_oserror *scrolllist_set_state(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int state);

extern _kernel_oserror *scrolllist_add_item(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			const char *text, const void *sprite_area,
			const char *sprite_name, int index);

extern _kernel_oserror *scrolllist_delete_items(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int start_index, int end_index);

extern _kernel_oserror *scrolllist_select_item(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int index);

extern _kernel_oserror *scrolllist_deselect_item(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int index);

extern _kernel_oserror *scrolllist_get_selected(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int offset, int *new_offset);

extern _kernel_oserror *scrolllist_make_visible(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			int index);

extern _kernel_oserror *scrolllist_set_colour(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int foreground, unsigned int background);

extern _kernel_oserror *scrolllist_get_colour(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			unsigned int *foreground, unsigned int *background);

extern _kernel_oserror *scrolllist_set_font(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			const char *font, unsigned int width,
			unsigned int height);

extern _kernel_oserror *scrolllist_get_item_text(unsigned int flags,
			ObjectId object_id, ComponentId component_id,
			char *text, int buffer_size, int index, int *nbytes);
@


1.1.1.1
log
@The Java directory contains the sources for the Java support modules
(TextGadget, etc.) and the makefiles to complete the Java ROM build
under RiscOS.

@
text
@@


1.1.1.2
log
@* Event generation for ScrollList fixed - you no longer get spurious events
  for a phantom extra item on the list.
* Flag added to ScrollList_Selection event to indicate adjust click.
* Fixed un-initialised base_line variable causing text of ScrollList
  items to disappear when the desktop font was the System font.

Version 0.10, 1.1.2.2. Tagged as 'Gadgets-0_10-1_1_2_2'
@
text
@a63 2
#define ScrollList_Selection_Flags_AdjustClick	(1<<2)

@
