head	1.6;
access;
symbols
	Gadgets-0_44:1.6
	Gadgets-0_43:1.6
	Gadgets-0_42:1.6
	Gadgets-0_41:1.6
	Gadgets-0_40:1.6
	Gadgets-0_39:1.5
	Gadgets-0_38:1.5
	Gadgets-0_37:1.4
	Gadgets-0_36:1.3
	Gadgets-0_35:1.2
	Gadgets-0_34:1.2
	Gadgets-0_33:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.11.28.19.08.33;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	Hv9ItC5GsjO1pTKy;

1.5
date	2015.08.18.21.31.22;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	IVVb0XmsGA7ktNxy;

1.4
date	2013.08.30.21.32.36;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	Ah6FHegdauBDyw3x;

1.3
date	2013.08.30.19.34.37;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	cFJZhP2Bmu3bUv3x;

1.2
date	2012.01.14.17.18.00;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	I6w6cgQsKF85faPv;

1.1
date	2012.01.14.12.56.52;	author rsprowson;	state Exp;
branches;
next	;
commitid	82i1vxnSrlbuN8Pv;


desc
@@


1.6
log
@Plot a more credible rendition of TextArea and ScrollList
Both the TextArea gadget and ScrollList were outputting an unhelpful white rectangle and mysterious black rectangle when asked to plot the gadget prototype (eg. in the gadget palette in ResEd). The black rectangle turned out to represent a scroll bar, though it was the wrong width.
Changed to plot a 2D scrollbar (ala RISC OS 2) then overlay a virtual icon with the name of the gadget type.
main.c:
Relocate helper functions into glib.
Return 'Bad SWI' for unknown subreasons.
glib.c/glib3.c:
Remove various unused functions.
Added new function to plot a grey scrollbar from nested rectangles.
TextArea.c:
Add a vertical, or horixontal, or both, scrollbar plus the label "TextArea".
ScrollList.c:
Add a vertical scrollbar plus the label "ScrollList".

Requires Common-0_25 for the colour defines. Tested in !ResEd in various eigenfactor modes.

Version 0.40. Tagged as 'Gadgets-0_40'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Text Gadgets module
 * Provides: TextArea and scrolling list toolbox gadgets
 *
 * Revision History
 * piers    18/06/96 Created
 * piers    26/09/96 Restarted
 * piers    06/01/96 Added TextArea plot method for ResEd
 * piers    19/01/98 Added Wimp_EOpenWindow to interested-events for dragging
 * pete     23/06/99 Made the Scrollbar fade handler PRIVATE not DEFAULT.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "Global/Services.h"

#include "macros.h"
#include "rmensure.h"
#include "objmodule.h"
#include "messages.h"
#include "twimp.h"
#include "objects/gadgets.h"

#include "TextGadget.h"
#include "glib.h"
#include "MemMan.h"
#include "TextMan.h"
#include "TextAreaP.h"
#include "ScrollLisP.h"
#include "ScrollbarP.h"

#include "TextGadgetHdr.h"

#ifdef MemCheck_MEMCHECK
#include "MemCheck:MemCheck.h"
#endif

unsigned int    redrawing_window = 0;

int filter_toolbox_events[] =
{
    Toolbox_ObjectDeleted, Window_ObjectClass,
    Window_AboutToBeShown, Window_ObjectClass,
    Scrollbar_PositionChanged, Window_ObjectClass,
    -1
};

int filter_wimp_events[] =
{
    wimp_ENULL, 0,
    wimp_EOPEN, 0,
    wimp_EREDRAW, 0,
    wimp_EBUT, 0,
    wimp_EUSER_DRAG, 0,
    wimp_ESCROLL, 0,
    wimp_EKEY, 0,
    -1
};

#ifndef ROM
extern int Resources(void);
#endif

static void register_gadgets(void)
{
    FeatureMask features;

    features.mask = 0;
    features.bits.add    = PRIVATE_HANDLER;
    features.bits.mclick = DEFAULT_HANDLER;
    features.bits.method = PRIVATE_HANDLER;
    features.bits.remove = PRIVATE_HANDLER;
    features.bits.fade   = PRIVATE_HANDLER;
    features.bits.plot   = PRIVATE_HANDLER;
    features.bits.move   = PRIVATE_HANDLER;
    register_gadget_type(0, TextArea_Type, TextAreaValidFlags,
    		features.mask, TextGadgets_TextArea);

    features.mask = 0;
    features.bits.add    = PRIVATE_HANDLER;
    features.bits.mclick = PRIVATE_HANDLER;
    features.bits.method = PRIVATE_HANDLER;
    features.bits.remove = PRIVATE_HANDLER;
    features.bits.fade   = PRIVATE_HANDLER;
    features.bits.plot   = PRIVATE_HANDLER;
    features.bits.move   = PRIVATE_HANDLER;
    register_gadget_type(0, ScrollList_Type, ScrollListValidFlags,
    		features.mask, TextGadgets_ScrollList);

    features.mask = 0;
    features.bits.add    = PRIVATE_HANDLER;
    features.bits.mclick = DEFAULT_HANDLER;
    features.bits.method = PRIVATE_HANDLER;
    features.bits.remove = PRIVATE_HANDLER;
    features.bits.fade   = PRIVATE_HANDLER;
    features.bits.plot   = PRIVATE_HANDLER;
    features.bits.move   = PRIVATE_HANDLER;
    register_gadget_type(0, Scrollbar_Type, ScrollbarValidFlags,
    		features.mask, TextGadgets_Scrollbar);
}

_kernel_oserror *TextGadgets_init(const char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror *e;

    IGNORE(cmd_tail);
    IGNORE(podule_base);
    IGNORE(pw);

#ifdef MemCheck_MEMCHECK
    MemCheck_InitNoDebug();
    MemCheck_InterceptSCLStringFunctions();
    MemCheck_SetStoreMallocFunctions(1);
    MemCheck_RedirectToFilename("adfs::4.$.memout");
#endif

    if ((e = rmensure ("Window","Toolbox.Window","1.32")) != NULL)
        return e;

#ifndef ROM
    /* Add the messages to ResourceFS */
    if ((e = objmodule_register_resources(Resources())) != NULL)
    {
        return e;
    }
#endif

    /* Point at, and open, the messages. Yes, that is a 10 letter truncated name */
    objmodule_ensure_path("TextGadgets$Path", "Resources:$.Resources.TextGadget.");
    if ((e = messages_file_open("TextGadgets:Messages")) != NULL)
        goto faildereg;
    
    register_gadgets();

    if ((e = scrolllist_init()) != NULL)
        goto failclose;

    if ((e = textarea_init()) != NULL)
        goto failclose;

    return NULL;

failclose:
    messages_file_close();
faildereg:
#ifndef ROM
    objmodule_deregister_resources(Resources());
#endif
    return e;
}

void TextGadgets_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    IGNORE(pw);
    IGNORE(r);

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

    switch (service_number)
    {
        case Service_WindowModuleStarting:
            register_gadgets();
            break;

        case Service_RedrawingWindow:
            redrawing_window = r->r[0];
            break;

#ifndef ROM
        case Service_ResourceFSStarting:
            (*(void (*)(int, void *, void *, void *))r->r[2])(Resources(), 0, 0, (void *)r->r[3]);
            break;
#endif
        default:
            break;
    }

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock(r);
#endif
}

_kernel_oserror *TextGadgets_final(int fatal, int podule, void *pw)
{
    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    if(textarea_active() || scrolllist_active() || scrollbar_active())
        return make_error(TextGadgets_TasksActive, 0);

    deregister_gadget_type(0, TextArea_Type, TextGadgets_TextArea);
    deregister_gadget_type(0, ScrollList_Type, TextGadgets_ScrollList);
    deregister_gadget_type(0, Scrollbar_Type, TextGadgets_Scrollbar);

    scrolllist_die();
    scrollbar_die();
    textarea_die();

    /* Close the messages (and deregister if not in ROM) */
    messages_file_close();
#ifndef ROM
    objmodule_deregister_resources(Resources());
#endif
    
#ifdef MemCheck_MEMCHECK
    MemCheck_OutputBlocksInfo();
#endif

    return NULL;
}

_kernel_oserror *TextGadgets_SWI_handler(int swi_no, _kernel_swi_regs *r,
		void *pw)
{
    _kernel_oserror *e = NULL;

    IGNORE(pw);

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

    switch (swi_no) {
        case (TextGadgets_TextArea - TextGadgets_SWIChunkBase):
           switch (r->r[2]) {
              case GADGET_ADD:
#ifdef MemCheck_MEMCHECK
                MemCheck_RegisterMiscBlock((void*)r->r[3], sizeof(TextArea));
#endif
                e = textarea_add((TextArea *) r->r[3],r->r[5],r->r[4],
                	(int **) &(r->r[1]),(int **) &(r->r[0]));
#ifdef MemCheck_MEMCHECK
                MemCheck_UnRegisterMiscBlock((void*)r->r[3]);
#endif
                break;
              case GADGET_METHOD:
                e = textarea_method((PrivateTextArea *) r->r[3],
                	(_kernel_swi_regs *)(r->r[4]));
                break;
              case GADGET_REMOVE:
                e = textarea_remove((PrivateTextArea *) r->r[3]);
                break;
              case GADGET_FADE:
                e = textarea_fade((PrivateTextArea *) r->r[3],r->r[4]);
                break;
              case GADGET_PLOT:
                e = textarea_plot((TextArea *) r->r[3]);
                break;
              case GADGET_MOVE:
                e = textarea_move((int) r->r[1], (PrivateTextArea *) r->r[3],
                	(wimp_Bbox *) r->r[5]);
                break;
              default:
                break;

           }
           break;

        case (TextGadgets_ScrollList - TextGadgets_SWIChunkBase):
           switch (r->r[2]) {
              case GADGET_ADD:
#ifdef MemCheck_MEMCHECK
                MemCheck_RegisterMiscBlock((void*)r->r[3], sizeof(ScrollList));
#endif
                e = scrolllist_add((ScrollList *) r->r[3],r->r[5],r->r[4],
                	(int **) &(r->r[1]),(int **) &(r->r[0]));
#ifdef MemCheck_MEMCHECK
                MemCheck_UnRegisterMiscBlock((void*)r->r[3]);
#endif
                break;
              case GADGET_METHOD:
                e = scrolllist_method((PrivateScrollList *) r->r[3],
                	(_kernel_swi_regs *)(r->r[4]));
                break;
              case GADGET_REMOVE:
                e = scrolllist_remove((PrivateScrollList *) r->r[3]);
                break;
              case GADGET_FADE:
                e = scrolllist_fade((PrivateScrollList *) r->r[3],r->r[4]);
                break;
              case GADGET_PLOT:
                e = scrolllist_plot((ScrollList *) r->r[3]);
                break;
              case GADGET_MOVE:
                e = scrolllist_move((int) r->r[1],
                	(PrivateScrollList *) r->r[3],
                	(wimp_Bbox *) r->r[5]);
                break;
              default:
                break;

           }
           break;

        case (TextGadgets_Scrollbar - TextGadgets_SWIChunkBase):
           switch (r->r[2]) {
              case GADGET_ADD:
#ifdef MemCheck_MEMCHECK
                MemCheck_RegisterMiscBlock((void*)r->r[3], sizeof(Scrollbar));
#endif
                e = scrollbar_add((Scrollbar *) r->r[3],r->r[5],r->r[4],
                	(int **) &(r->r[1]),(int **) &(r->r[0]));
#ifdef MemCheck_MEMCHECK
                MemCheck_UnRegisterMiscBlock((void*)r->r[3]);
#endif
                break;
              case GADGET_METHOD:
                e = scrollbar_method((PrivateScrollbar *) r->r[3],
                	(_kernel_swi_regs *)(r->r[4]));
                break;
              case GADGET_REMOVE:
                e = scrollbar_remove((PrivateScrollbar *) r->r[3]);
                break;
              case GADGET_FADE:
                e = scrollbar_fade((PrivateScrollbar *) r->r[3],r->r[4]);
                break;
              case GADGET_PLOT:
                e = scrollbar_plot((Scrollbar *) r->r[3]);
                break;
              case GADGET_MOVE:
                e = scrollbar_move((PrivateScrollbar*)r->r[3],
                				(wimp_Bbox *)r->r[5]);
              	break;
              default:
                break;

           }
           break;

        case (TextGadgets_RedrawAll - TextGadgets_SWIChunkBase):
//            e = scrolllist_redraw_all(r->r[0], r->r[1]);
            // add other gadget redraw functions here...
            break;

        case (TextGadgets_Filter - TextGadgets_SWIChunkBase):
            textarea_filter(r);
            scrolllist_filter(r);
            scrollbar_filter(r);
            break;

        default:
            e = error_BAD_SWI;
            break;
    }

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock(r);
#endif

    return e;
}

/* ------------------------------------------------------------------------
 */
//_kernel_oserror *redraw_gadget(int window_handle, GadgetHeader *hdr)
//{
//    wimp_GetWindowState	state;
//    _kernel_oserror		*e;
//
//    state.window_handle = window_handle;
//
//    if ((e = wimp_get_window_state(&state)) != NULL)
//        return e;
//
//    if (state.flags & WimpWindow_Open)
//    {
//        wimp_force_redraw(window_handle, hdr->box.xmin, hdr->box.ymin,
//        			hdr->box.xmax, hdr->box.ymax);
//    }
//
//    return NULL;
//}
@


1.5
log
@Makefile recreated from fragments
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.

Version 0.38. Tagged as 'Gadgets-0_38'
@
text
@a79 22
/* convert work area coords to screen coords */

void work_to_screen(wimp_Bbox *wa, wimp_GetWindowState *state)
{
    wa->xmin += state->open.visible_area.xmin - state->open.scx;
    wa->xmax += state->open.visible_area.xmin - state->open.scx;

    wa->ymin += state->open.visible_area.ymax - state->open.scy;
    wa->ymax += state->open.visible_area.ymax - state->open.scy;
}

/* convert screen coords to work area */

void screen_to_work(wimp_Bbox *wa, wimp_GetWindowState *state)
{
    wa->xmin -= state->open.visible_area.xmin - state->open.scx;
    wa->xmax -= state->open.visible_area.xmin - state->open.scx;

    wa->ymin -= state->open.visible_area.ymax - state->open.scy;
    wa->ymax -= state->open.visible_area.ymax - state->open.scy;
}

d307 1
a307 1
              	break;
d361 1
@


1.4
log
@Internationalised
Supporting code borrowed from 'Iconbar' toolbox module.
Tested in a ROM build and RAM build, triggering one error message and checking the dynamic area in task manager.

Version 0.37. Tagged as 'Gadgets-0_37'
@
text
@d48 2
d76 2
a77 4
#ifdef ROM
static _kernel_oserror *__ROM;
#else
extern int messages_file(void);
a147 4
#ifdef ROM
    __ROM = _swix(0xa2c43, _IN(0), pw);
#endif

d160 1
a160 1
    if ((e = objmodule_register_resources(messages_file())) != NULL)
d185 1
a185 1
    objmodule_deregister_resources(messages_file());
d211 1
a211 1
            (*(void (*)(int, void *, void *, void *))r->r[2])(messages_file(), 0, 0, (void *)r->r[3]);
d243 1
a243 1
    objmodule_deregister_resources(messages_file());
a249 4
#ifdef ROM
    if(!__ROM) _swix(0xa2c41, 0);
#endif

@


1.3
log
@Change to link against tboxlibint
For some reason this toolbox module was unique in linking against the public toolboxlib rather than the internal one, this meant having to carefully tippy toe around not mixing header files (as they contain similar but differently named definitions).
A massive search and replace job.
Tested briefly using ResEd/ResTest and a textarea and scrolllist in a ROM build.
Requires Common-0_21.

Version 0.36. Tagged as 'Gadgets-0_36'
@
text
@d31 1
d35 2
a46 1
#include "Text.h"
d74 6
d148 4
d162 13
d178 6
a183 1
        return e;
d185 7
a191 1
    return textarea_init();
d208 1
d212 6
a217 4
//        case Service_ModeChange:	// If either service call, cache 'em
//        case Service_WimpPalette:
//            cache_tool_names();
//            break;
d234 1
a234 1
        return (_kernel_oserror *)&e_active;
d244 6
d254 4
@


1.2
log
@Remove unnecessary includes of "Modhdr.h".
The last change meant it was no longer being generated, so ammended the code to not need it in line with all the other toolbox modules.

Version 0.34. Tagged as 'Gadgets-0_34'
@
text
@d32 3
a34 2
#include "toolbox.h"
#include "window.h"
a36 1
#include "wimplib.h"
d39 2
a40 2
#include "rmensure.h"
#include "TextArea.h"
a41 1
#include "ScrollList.h"
a42 1
#include "Scrollbar.h"
d44 1
a44 3
#include "riscos_uti.h"

#include "modmem.h"
a49 1
#define IGNORE(a) a=a
d62 7
a68 7
    Wimp_ENull, 0,
    Wimp_EOpenWindow, 0,
    Wimp_ERedrawWindow, 0,
    Wimp_EMouseClick, 0,
    Wimp_EUserDrag, 0,
    Wimp_EScrollRequest, 0,
    Wimp_EKeyPressed, 0,
d74 1
a74 1
void work_to_screen(BBox *wa, WimpGetWindowStateBlock *state)
d76 2
a77 2
    wa->xmin += state->visible_area.xmin - state->xscroll;
    wa->xmax += state->visible_area.xmin - state->xscroll;
d79 2
a80 2
    wa->ymin += state->visible_area.ymax - state->yscroll;
    wa->ymax += state->visible_area.ymax - state->yscroll;
d85 1
a85 1
void screen_to_work(BBox *wa, WimpGetWindowStateBlock *state)
d87 2
a88 2
    wa->xmin -= state->visible_area.xmin - state->xscroll;
    wa->xmax -= state->visible_area.xmin - state->xscroll;
d90 2
a91 2
    wa->ymin -= state->visible_area.ymax - state->yscroll;
    wa->ymax -= state->visible_area.ymax - state->yscroll;
d251 1
a251 1
                	(BBox *) r->r[5]);
d287 1
a287 1
                	(BBox *) r->r[5]);
d322 1
a322 1
                				(BBox *)r->r[5]);
d356 1
a356 1
//    WimpGetWindowStateBlock	state;
@


1.1
log
@Changed to use shared TboxMake makefile.
Removed local duplication of string32 and rmensure, since the common library has these in.
Rename TextGadget.c to main.c to fall into line with the "o.mainROM" rule.
Compiles, but not tested.

Version 0.33. Tagged as 'Gadgets-0_33'
@
text
@a37 1
#include "ModHdr.h"
a53 6
#if CMHG_VERSION < 516
#  define CMHG_CONST
#else
#  define CMHG_CONST const
#endif

d137 1
a137 1
_kernel_oserror *TextGadgets_init(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
d229 1
a229 1
        case (TextGadgets_TextArea-TextGadgets_00):
d264 1
a264 1
        case (TextGadgets_ScrollList-TextGadgets_00):
d300 1
a300 1
        case (TextGadgets_Scrollbar-TextGadgets_00):
d335 1
a335 1
        case (TextGadgets_RedrawAll - TextGadgets_00):
d340 1
a340 1
        case (TextGadgets_Filter - TextGadgets_00):
@

