head	1.6;
access;
symbols
	Gadgets-0_44:1.6
	Gadgets-0_43:1.6
	Gadgets-0_42:1.6
	Gadgets-0_41:1.6
	Gadgets-0_40:1.6
	Gadgets-0_39:1.6
	Gadgets-0_38:1.6
	Gadgets-0_37:1.6
	Gadgets-0_36:1.5
	Gadgets-0_35:1.4
	Gadgets-0_34:1.4
	Gadgets-0_33:1.4
	Gadgets-0_32:1.4
	Gadgets-0_31:1.3
	Gadgets-0_30:1.2
	Gadgets-0_29:1.2
	Gadgets-0_28:1.2
	RO_5_07:1.2
	Gadgets-0_27:1.2
	Gadgets-0_26:1.2
	Gadgets-0_25:1.1.1.2
	Gadgets-0_24:1.1.1.2
	Gadgets-0_23:1.1.1.2
	Gadgets-0_22:1.1.1.2
	Gadgets-0_21:1.1.1.2
	Gadgets-0_20:1.1.1.2
	Gadgets-0_19:1.1.1.2
	Gadgets-0_18:1.1.1.2
	Gadgets-0_17:1.1.1.2
	Gadgets-0_16:1.1.1.2
	Gadgets-0_15:1.1.1.2
	sforrest_daytona_appflash-0_31:1.1.1.2
	Gadgets-0_14:1.1.1.2
	mjrobert_Java_26_08_98:1.1.1.2
	blaughto_daytona_appflash-0_30:1.1.1.2
	blaughto_daytona_appflash-0_29:1.1.1.2
	blaughto_daytona_appflash-0_28:1.1.1.2
	Gadgets-0_11:1.1.1.2
	sbrodie_TextGadgets_merged_19Jun98:1.1.1.2
	sbrodie_Daytona_merge_19Jun98:1.1.1.2
	sbrodie_Spin_merge_18Jun98:1.1.1.2
	jberanek_gadgets-0_08:1.1.1.2
	Gadgets-0_10-1_1_2_2:1.1.1.2
	blaughto_daytona_appflash-0_27:1.1.1.2
	blaughto_daytona_appflash-0_26:1.1.1.2
	blaughto_daytona_appflash-0_25:1.1.1.2
	blaughto_daytona_appflash-0_24:1.1.1.2
	blaughto_daytona_appflash-0_23:1.1.1.2
	blaughto_daytona_appflash-0_21:1.1.1.2
	blaughto_daytona_appflash-0_20:1.1.1.2
	blaughto_daytona_appflash-0_19:1.1.1.2
	jberanek_gadgets-0_07:1.1.1.2
	blaughto_daytona_appflash-0_18:1.1.1.2
	mrison_gadgets-0_06:1.1.1.2
	pwombwel_0_09:1.1.1.2
	mrison_gadgets-0_05:1.1.1.2
	Daytona:1.1.1.2.0.2
	Daytona_bp:1.1.1.2
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2013.08.30.21.32.35;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	Ah6FHegdauBDyw3x;

1.5
date	2013.08.30.19.34.37;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	cFJZhP2Bmu3bUv3x;

1.4
date	2011.06.25.22.38.48;	author jlee;	state Exp;
branches;
next	1.3;
commitid	SJmoual8pfcHx6pv;

1.3
date	2010.02.28.10.40.26;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.18.22.01.04;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	97.05.13.16.25.53;	author rlougher;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.13.16.25.53;	author rlougher;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.12.16.12.54.49;	author rlougher;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Internationalised
Supporting code borrowed from 'Iconbar' toolbox module.
Tested in a ROM build and RAM build, triggering one error message and checking the dynamic area in task manager.

Version 0.37. Tagged as 'Gadgets-0_37'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   MemMan.c
 * Purpose: Memory manager module.  This provides a shifting heap.
 * Clients access blocks via handles allowing the blocks to be moved
 * by the manager.  The manager also manages free space at the end
 * of each block enabling small insertions and deletions to be handled
 * efficiently.
 *
 * Revision History
 * rlougher  Nov 96 Created
 * rlougher 17/3/97 Corrected MemChecking code
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "messages.h"
#include "objects/gadgets.h"

#include "MemMan.h"

#ifdef MemCheck_MEMCHECK
#include "MemCheck:MemCheck.h"
#endif

#define HNDL_GRW_BY  128
#define INITIAL_SIZE 4096
#define MAXIMUM_SIZE (16*1024*1024)
#define BLOCK_GAP    512
#define SHRINK_GAP   BLOCK_GAP + BLOCK_GAP / 2


static Handle *handle_list = NULL;
static int    hndl_list_sze = 0;
static int    area_no = 0;
static char   *area_end;
static int    area_free;

_kernel_oserror *grow_handles(void);

_kernel_oserror *initialise_memory(char *area_name)
{
    _kernel_oserror *err;

    if(area_no != 0)
        return make_error(TextGadgets_IntReinitMem, 0);

    /* Create the dynamic area */

    if((err = _swix(OS_DynamicArea,_INR(0,8)|_OUT(1)|_OUT(3),
    	    			   0, -1, INITIAL_SIZE, -1, 1 << 7,
    	    			   MAXIMUM_SIZE, 0, 0, area_name,
    	    			   &area_no, &area_end)) != NULL)
        return err;

    /* Get the real size of the area - this will be rounded up to a
       multiple of the page size */

    if((err = _swix(OS_DynamicArea,_IN(0)|_IN(1)|_OUT(2), 2,
    	      		           area_no, &area_free)) != NULL)
        return err;

    /* Allocate the handle list */


    return grow_handles();
}


_kernel_oserror *release_memory(void)
{
    if(area_no == 0)
        return make_error(TextGadgets_IntNeverInit, 0);

    _swix(OS_DynamicArea,_IN(0)|_IN(1), 1, area_no);
    area_no = 0;
    free(handle_list);
    handle_list = NULL;

    return NULL;
}


_kernel_oserror *grow_handles(void)
{
    int i;

    Handle *new_list = realloc(handle_list, (hndl_list_sze + HNDL_GRW_BY) *
                                sizeof(Handle));
    
    if(new_list == NULL)
        return make_error(TextGadgets_IntMallocFail, 0);

    handle_list = new_list;

    for(i = hndl_list_sze; i < hndl_list_sze + HNDL_GRW_BY; i++)
        handle_list[i].base = NULL;

    hndl_list_sze += HNDL_GRW_BY;

    return NULL;
}


static void update_handles(Handle *handle, int diff)
{
    void *base = handle->base;
    int i;

    for(i = 0; i < hndl_list_sze; i++)
        if(handle_list[i].base > base)
            handle_list[i].base += diff;
}


_kernel_oserror *create_block(int block_size, HandleId *id)
{
    _kernel_oserror *err;
    int i;

    area_free -= block_size + BLOCK_GAP;
    if(area_free < 0)
    {
        /* Need to expand the area */

        int change;
        if((err = _swix(OS_ChangeDynamicArea,_IN(0)|_IN(1)|_OUT(1),
  	       	        area_no, -area_free, &change)) != NULL)
  	{
  	    area_free += block_size + BLOCK_GAP;
            return err;
        }
        area_free += change;
    }

    /* Find free handle */

    for(i = 0; i < hndl_list_sze && handle_list[i].base != NULL; i++);

    if(i == hndl_list_sze)                   /* No free handle */
        if((err = grow_handles()) != NULL)
            return err;

    /* Fill in handle with block details */

    handle_list[i].base = area_end;
    handle_list[i].size = block_size;
    handle_list[i].free = BLOCK_GAP;

    *id = (HandleId) i;
    area_end += block_size + BLOCK_GAP;

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterFlexBlock((void**)&handle_list[i].base, block_size);
#endif

    return NULL;
}


_kernel_oserror *delete_block(HandleId id)
{
    _kernel_oserror *err;
    char *src;
    int size, change;

    Handle *handle = get_handle(id);

    if(handle->base == NULL)
        return make_error(TextGadgets_IntNoSuchBlock, 0);

    /* Move the blocks above the block down */

    size = handle->size + handle->free;
    src = handle->base + size;

    memmove(handle->base, src, area_end - src);
    area_end -= size;
    area_free += size;

    update_handles(handle, -size);
    handle->base = NULL;

    /* Attempt to shrink the area */

    if((err = _swix(OS_ChangeDynamicArea,_IN(0)|_IN(1)|_OUT(1), area_no,
                    -area_free, &change)) != NULL)
        return err;

    area_free -= change;

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterFlexBlock((void**)&(handle->base));
#endif

    return NULL;
}

#ifdef MemCheck_MEMCHECK
static _kernel_oserror *extend_block2(HandleId id, int pos, int size)
#else
_kernel_oserror *extend_block(HandleId id, int pos, int size)
#endif
{
    _kernel_oserror *err;

    Handle *handle = get_handle(id);

    if(handle->base == NULL)
        return make_error(TextGadgets_IntNoSuchBlock, 0);

    handle->free -= size;
    if(handle->free < 0)
    {
        /* Need to expand the block */
        char *end, *src;
        int diff = BLOCK_GAP - handle->free;
        area_free -= diff;
        if(area_free < 0)
        {
            /* Need to expand area - not big enough to hold block */
            int change;
            if((err = _swix(OS_ChangeDynamicArea,_IN(0)|_IN(1)|_OUT(1),
                            area_no, -area_free, &change)) != NULL)
            {
                area_free += diff;
                handle->free += size;
                return err;
            }
            area_free += change;
        }
        /* Move the upper blocks up */
        end = handle->base + handle->size + size;
        src = end + handle->free;
        memmove(end + BLOCK_GAP, src, area_end - src);

        area_end += diff;
        handle->free = BLOCK_GAP;

        update_handles(handle, diff);
    }

    if(pos < handle->size)
    {
        /* Not extending at the end - move upper part of block up */
        char *src = handle->base + pos;
        memmove(src + size, src, handle->size - pos);
    }

    handle->size += size;
    return NULL;
}

#ifdef MemCheck_MEMCHECK
_kernel_oserror *extend_block(HandleId id, int pos, int size)
{
    MemCheck_checking oldchecking = MemCheck_SetChecking(0, 0);
    _kernel_oserror *e = extend_block2(id, pos, size);
    if (!e)
    {
        Handle *handle = get_handle(id);
        MemCheck_ResizeFlexBlock((void**)&(handle->base), handle->size);
    }
    MemCheck_RestoreChecking(oldchecking);
    return e;
}
#endif

#ifdef MemCheck_MEMCHECK
static _kernel_oserror *shrink_block2(HandleId id, int pos, int size)
#else
_kernel_oserror *shrink_block(HandleId id, int pos, int size)
#endif
{
    _kernel_oserror *err;
    int diff;
    Handle *handle = get_handle(id);

    if(handle->base == NULL)
        return make_error(TextGadgets_IntNoSuchBlock, 0);

    if((diff = handle->size - pos - size) > 0)
    {
        /* Shrinking in the middle - need to move upper part of block down */
        char *dest = handle->base + pos;
        memmove(dest, dest + size, diff);
    }
    else
        size += diff;

    handle->size -= size;
    handle->free += size;

    if(handle->free > SHRINK_GAP)
    {
        /* Space at the end of the block is getting large - compact */

        char *end = handle->base + handle->size;
        char *src = end + handle->free;
        int diff = handle->free - BLOCK_GAP;
        int change;

        memmove(end + BLOCK_GAP, src, area_end - src);
        area_free += diff;
        area_end -= diff;

        handle->free = BLOCK_GAP;
        update_handles(handle, -diff);

        /* Attempt to shrink the area */

        if((err = _swix(OS_ChangeDynamicArea,_IN(0)|_IN(1)|_OUT(1),
                        area_no, -area_free, &change)) != NULL)
            return err;

        area_free -= change;
    }
    return NULL;
}

#ifdef MemCheck_MEMCHECK
_kernel_oserror *shrink_block(HandleId id, int pos, int size)
{
    MemCheck_checking oldchecking = MemCheck_SetChecking(0, 0);
    _kernel_oserror *e = shrink_block2(id, pos, size);
    if (!e)
    {
        Handle *handle = get_handle(id);
        MemCheck_ResizeFlexBlock((void**)&(handle->base), handle->size);
    }
    MemCheck_RestoreChecking(oldchecking);
    return e;
}
#endif

#if 0
void print_info(FILE *out)
{
    int i;

    fprintf(out, "\nHEAP INFORMATION\n----------------\n\n");
    fprintf(out, "Area no: %d\nArea free: %d\n\n", area_no, area_free);

    for(i = 0; i < hndl_list_sze; i++)
        if(handle_list[i].base != NULL)
        {
            fprintf(out, "Handle no: %d\n", i);
            fprintf(out, "\tbase address: %d\n", (int) handle_list[i].base);
            fprintf(out, "\tsize        : %d\n", handle_list[i].size);
            fprintf(out, "\tfree        : %d\n", handle_list[i].free);
        }
}
#endif

Handle *get_handle(HandleId id)
{
    return &handle_list[id];
}
@


1.5
log
@Change to link against tboxlibint
For some reason this toolbox module was unique in linking against the public toolboxlib rather than the internal one, this meant having to carefully tippy toe around not mixing header files (as they contain similar but differently named definitions).
A massive search and replace job.
Tested briefly using ResEd/ResTest and a textarea and scrolllist in a ROM build.
Requires Common-0_21.

Version 0.36. Tagged as 'Gadgets-0_36'
@
text
@d33 3
a36 1
#include "Text.h"
d62 1
a62 1
        return (_kernel_oserror *)&e_reinitmem;
d89 1
a89 1
        return (_kernel_oserror *)&e_notinit;
d108 1
a108 1
        return (_kernel_oserror *)&e_outofmem;
d186 1
a186 1
        return (_kernel_oserror *)&e_nosuchblk;
d226 1
a226 1
        return (_kernel_oserror *)&e_nosuchblk;
d296 1
a296 1
        return (_kernel_oserror *)&e_nosuchblk;
@


1.4
log
@TextGadgets module fixes & improvements
Detail:
  c/ScrollList, c/TextArea - ScrollList_SetFont and TextArea_SetFont now accept font handles instead of just font names. The handles are handled in the same way as the Window module, i.e. the handle will be managed and freed by the TextGadgets modules. Fixes bug #212.
  c/ScrollList, c/Scrollbar, c/TextArea - Fix handling of Toolbox_ObjectDeleted events. Original code would corrupt the object lists when deleting items, and reallocate much more memory than was actually needed. Fixes bug #214
  c/MemMan - Fix grow_handlers to not leave handle_list as NULL if the realloc fails. Fixes bug #216.
  c/MemMan, c/TextArea, c/TextMan, h/MemMan, h/TextMan - Changed how the 'Handle' type is handled. Instead of MemMan giving out direct pointers to Handle instances, it now gives out identifiers (HandleId). These identifiers are then converted to Handle pointers via get_handle whenever the contents need to be accessed. This allows the handle_list to be safely realloc'd without breaking all the existing Handle pointers. Fixes bug #217
  c/MemMan - Reduced HDNLE_GRW_BY from 1000 to 128 to save a bit of memory
Admin:
  Module compiles and runs, but actual functionality is untested.
  Fixes bugs 212, 214, 216, 217.


Version 0.32. Tagged as 'Gadgets-0_32'
@
text
@a32 6
#include "toolbox.h"
#include "window.h"
#include "objects/gadgets.h"

#include "wimplib.h"
#include "TextGadget.h"
d34 1
@


1.3
log
@Function returns no longer use stack structures.
Previously, a number of errors were contructed as automatic variables then returned to the caller - potentially accessing stale stack area. All error blocks are now held in ROM and cast from there.
Error numbers are now not &00000000 or &20202020, using the allocated base - requires 'Common-0_15'.
Trimmed some unused debugging code out, saves about 3k.
Renamed C++ clashing variables to stop the compiler moaning.
Implemented feature request to accept the empty string "" as no font handle in _SetFont calls.
At some point, this module needs internationalising.

Version 0.31. Tagged as 'Gadgets-0_31'
@
text
@d45 1
a45 1
#define HNDL_GRW_BY  1000
d106 3
d110 1
a110 2
    if((handle_list = realloc(handle_list, (hndl_list_sze + HNDL_GRW_BY) *
                                sizeof(Handle))) == NULL)
d113 2
d135 1
a135 1
_kernel_oserror *create_block(int block_size, Handle **hndl_pntr)
d169 1
a169 1
    *hndl_pntr = &handle_list[i];
d180 1
a180 1
_kernel_oserror *delete_block(Handle *handle)
d186 2
d219 1
a219 1
static _kernel_oserror *extend_block2(Handle *handle, int pos, int size)
d221 1
a221 1
_kernel_oserror *extend_block(Handle *handle, int pos, int size)
d226 2
d274 1
a274 1
_kernel_oserror *extend_block(Handle *handle, int pos, int size)
d277 1
a277 1
    _kernel_oserror *e = extend_block2(handle, pos, size);
d279 2
d282 1
d289 1
a289 1
static _kernel_oserror *shrink_block2(Handle *handle, int pos, int size)
d291 1
a291 1
_kernel_oserror *shrink_block(Handle *handle, int pos, int size)
d296 1
d341 1
a341 1
_kernel_oserror *shrink_block(Handle *handle, int pos, int size)
d344 1
a344 1
    _kernel_oserror *e = shrink_block2(handle, pos, size);
d346 2
d349 1
d373 5
@


1.2
log
@Change so it does delete and backspace like Windows (controlled by the
NEWDELETE switch like RISCOSLib is now).
Key 8 deletes left
Key 127 deletes right
The Copy key does nothing (home and end aren't implemented it seems).
Fix from Kevin for it claiming a Dynamic area of maximum size - greedy
guts now limited to 16M.

Version 0.26. Tagged as 'Gadgets-0_26'
@
text
@d30 6
d37 2
a38 2
#include "swis.h"
#include "kernel.h"
d65 1
a65 1
        return (_kernel_oserror *) "    Attempt to re-initialise memory.";
d92 1
a92 1
        return (_kernel_oserror *)"    Memory has not been initialised.";
d106 1
a106 1

d109 1
a109 1
        return (_kernel_oserror *)"    Out of memory.";
d183 1
a183 1
       return (_kernel_oserror *)"    Block does not exist.";
d221 1
a221 1
        return (_kernel_oserror*)"    Block does not exist.";
d287 1
a287 2
        return (_kernel_oserror*)"    Block does not exist.";

d340 1
a340 1

d357 1
a357 2


@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
#define HNDL_GRW_BY  4
d41 1
d63 4
a66 4
    if((err = _swix(OS_DynamicArea,_IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5)|
    				   _IN(6)|_IN(7)|_IN(8)|_OUT(1)|_OUT(3),
    	    			   0, -1, INITIAL_SIZE, -1, 1 << 7, -1, 0, 0,
    	    			   area_name, &area_no, &area_end)) != NULL)
d92 1
a92 1
       
d161 1
a161 1
    
d165 1
a165 1
    
d198 1
a198 1
    
d202 1
a202 1
    
d281 1
a281 1
        return (_kernel_oserror*)"Block does not exist.";
d310 1
a310 1
        update_handles(handle, diff);
d335 2
a336 2
#if 0
void print_info(void)
d340 2
a341 2
    printf("HEAP INFORMATION\n----------------\n\n");
    printf("Area no: %d\nArea free: %d\n\n", area_no, area_free);
d346 4
a349 4
            printf("Handle no: %d\n", i);
            printf("\tbase address: %d\n", (int) handle_list[i].base);
            printf("\tsize        : %d\n", handle_list[i].size);
            printf("\tfree        : %d\n", handle_list[i].free);
d352 1
a352 1
#endif
@


1.1.1.1
log
@The Java directory contains the sources for the Java support modules
(TextGadget, etc.) and the makefiles to complete the Java ROM build
under RiscOS.

@
text
@@


1.1.1.2
log
@Fixed a couple of data aborts, made all gadgets not quit if tasks are
still using them and freed all memory when they do quit.
@
text
@d39 1
a39 1
#define HNDL_GRW_BY  1000
d309 1
a309 1
        update_handles(handle, -diff);
d334 2
a335 2

void print_info(FILE *out)
d339 2
a340 2
    fprintf(out, "\nHEAP INFORMATION\n----------------\n\n");
    fprintf(out, "Area no: %d\nArea free: %d\n\n", area_no, area_free);
d345 4
a348 4
            fprintf(out, "Handle no: %d\n", i);
            fprintf(out, "\tbase address: %d\n", (int) handle_list[i].base);
            fprintf(out, "\tsize        : %d\n", handle_list[i].size);
            fprintf(out, "\tfree        : %d\n", handle_list[i].free);
d351 1
a351 1

@
