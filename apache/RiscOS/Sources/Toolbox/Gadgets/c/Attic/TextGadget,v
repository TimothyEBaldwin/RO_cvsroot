head	1.6;
access;
symbols
	Gadgets-0_32:1.5
	Gadgets-0_31:1.5
	Gadgets-0_30:1.4
	Gadgets-0_29:1.4
	Gadgets-0_28:1.4
	RO_5_07:1.4
	Gadgets-0_27:1.4
	Gadgets-0_26:1.4
	Gadgets-0_25:1.4
	Gadgets-0_24:1.4
	Gadgets-0_23:1.4
	Gadgets-0_22:1.4
	Gadgets-0_21:1.3
	Gadgets-0_20:1.2
	Gadgets-0_19:1.2
	Gadgets-0_18:1.2
	Gadgets-0_17:1.2
	Gadgets-0_16:1.2
	Gadgets-0_15:1.2
	sforrest_daytona_appflash-0_31:1.1.1.4.2.1
	Gadgets-0_14:1.2
	mjrobert_Java_26_08_98:1.1.1.6
	blaughto_daytona_appflash-0_30:1.1.1.4.2.1
	blaughto_daytona_appflash-0_29:1.1.1.4.2.1
	blaughto_daytona_appflash-0_28:1.1.1.4.2.1
	Gadgets-0_11:1.2
	sbrodie_TextGadgets_merged_19Jun98:1.2
	sbrodie_Daytona_merge_19Jun98:1.1.1.4.2.1
	sbrodie_Spin_merge_18Jun98:1.1.1.6
	jberanek_gadgets-0_08:1.1.1.4.2.1
	Gadgets-0_10-1_1_2_2:1.1.1.6
	blaughto_daytona_appflash-0_27:1.1.1.4.2.1
	blaughto_daytona_appflash-0_26:1.1.1.4.2.1
	blaughto_daytona_appflash-0_25:1.1.1.4.2.1
	blaughto_daytona_appflash-0_24:1.1.1.4.2.1
	blaughto_daytona_appflash-0_23:1.1.1.4.2.1
	blaughto_daytona_appflash-0_21:1.1.1.4.2.1
	blaughto_daytona_appflash-0_20:1.1.1.4.2.1
	blaughto_daytona_appflash-0_19:1.1.1.4.2.1
	jberanek_gadgets-0_07:1.1.1.4.2.1
	blaughto_daytona_appflash-0_18:1.1.1.4.2.1
	mrison_gadgets-0_06:1.1.1.4.2.1
	pwombwel_0_09:1.1.1.6
	mrison_gadgets-0_05:1.1.1.4.2.1
	Daytona:1.1.1.4.0.2
	Daytona_bp:1.1.1.4
	Spinner_RCA116:1.1.1.2
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2012.01.14.12.56.52;	author rsprowson;	state dead;
branches;
next	1.5;
commitid	82i1vxnSrlbuN8Pv;

1.5
date	2010.02.28.10.40.28;	author rsprowson;	state Exp;
branches;
next	1.4;

1.4
date	99.06.23.11.54.13;	author pgoodlif;	state Exp;
branches;
next	1.3;

1.3
date	99.06.18.11.13.13;	author pgoodlif;	state Exp;
branches;
next	1.2;

1.2
date	98.06.19.12.47.51;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	97.05.13.16.25.53;	author rlougher;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.13.16.25.53;	author rlougher;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.07.03.18.18.33;	author pwombwel;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.12.16.12.54.54;	author rlougher;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.12.16.15.27.13;	author mrison;	state Exp;
branches
	1.1.1.4.2.1;
next	1.1.1.5;

1.1.1.5
date	98.01.19.18.22.50;	author rlougher;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	98.01.19.19.20.54;	author pwombwel;	state Exp;
branches;
next	;

1.1.1.4.2.1
date	97.12.16.17.19.50;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Changed to use shared TboxMake makefile.
Removed local duplication of string32 and rmensure, since the common library has these in.
Rename TextGadget.c to main.c to fall into line with the "o.mainROM" rule.
Compiles, but not tested.

Version 0.33. Tagged as 'Gadgets-0_33'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Text Gadgets module
 * Provides: TextArea and scrolling list toolbox gadgets
 *
 * Revision History
 * piers    18/06/96 Created
 * piers    26/09/96 Restarted
 * piers    06/01/96 Added TextArea plot method for ResEd
 * piers    19/01/98 Added Wimp_EOpenWindow to interested-events for dragging
 * pete     23/06/99 Made the Scrollbar fade handler PRIVATE not DEFAULT.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "toolbox.h"
#include "window.h"
#include "objects/gadgets.h"

#include "wimplib.h"
#include "TextGadget.h"
#include "ModHdr.h"
#include "glib.h"
#include "rmensure.h"
#include "TextArea.h"
#include "TextAreaP.h"
#include "ScrollList.h"
#include "ScrollLisP.h"
#include "Scrollbar.h"
#include "ScrollbarP.h"
#include "riscos_uti.h"

#include "modmem.h"

#ifdef MemCheck_MEMCHECK
#include "MemCheck:MemCheck.h"
#endif

#if CMHG_VERSION < 516
#  define CMHG_CONST
#else
#  define CMHG_CONST const
#endif

#define IGNORE(a) a=a
unsigned int    redrawing_window = 0;

int filter_toolbox_events[] =
{
    Toolbox_ObjectDeleted, Window_ObjectClass,
    Window_AboutToBeShown, Window_ObjectClass,
    Scrollbar_PositionChanged, Window_ObjectClass,
    -1
};

int filter_wimp_events[] =
{
    Wimp_ENull, 0,
    Wimp_EOpenWindow, 0,
    Wimp_ERedrawWindow, 0,
    Wimp_EMouseClick, 0,
    Wimp_EUserDrag, 0,
    Wimp_EScrollRequest, 0,
    Wimp_EKeyPressed, 0,
    -1
};

/* convert work area coords to screen coords */

void work_to_screen(BBox *wa, WimpGetWindowStateBlock *state)
{
    wa->xmin += state->visible_area.xmin - state->xscroll;
    wa->xmax += state->visible_area.xmin - state->xscroll;

    wa->ymin += state->visible_area.ymax - state->yscroll;
    wa->ymax += state->visible_area.ymax - state->yscroll;
}

/* convert screen coords to work area */

void screen_to_work(BBox *wa, WimpGetWindowStateBlock *state)
{
    wa->xmin -= state->visible_area.xmin - state->xscroll;
    wa->xmax -= state->visible_area.xmin - state->xscroll;

    wa->ymin -= state->visible_area.ymax - state->yscroll;
    wa->ymax -= state->visible_area.ymax - state->yscroll;
}

static void register_gadgets(void)
{
    FeatureMask features;

    features.mask = 0;
    features.bits.add    = PRIVATE_HANDLER;
    features.bits.mclick = DEFAULT_HANDLER;
    features.bits.method = PRIVATE_HANDLER;
    features.bits.remove = PRIVATE_HANDLER;
    features.bits.fade   = PRIVATE_HANDLER;
    features.bits.plot   = PRIVATE_HANDLER;
    features.bits.move   = PRIVATE_HANDLER;
    register_gadget_type(0, TextArea_Type, TextAreaValidFlags,
    		features.mask, TextGadgets_TextArea);

    features.mask = 0;
    features.bits.add    = PRIVATE_HANDLER;
    features.bits.mclick = PRIVATE_HANDLER;
    features.bits.method = PRIVATE_HANDLER;
    features.bits.remove = PRIVATE_HANDLER;
    features.bits.fade   = PRIVATE_HANDLER;
    features.bits.plot   = PRIVATE_HANDLER;
    features.bits.move   = PRIVATE_HANDLER;
    register_gadget_type(0, ScrollList_Type, ScrollListValidFlags,
    		features.mask, TextGadgets_ScrollList);

    features.mask = 0;
    features.bits.add    = PRIVATE_HANDLER;
    features.bits.mclick = DEFAULT_HANDLER;
    features.bits.method = PRIVATE_HANDLER;
    features.bits.remove = PRIVATE_HANDLER;
    features.bits.fade   = PRIVATE_HANDLER;
    features.bits.plot   = PRIVATE_HANDLER;
    features.bits.move   = PRIVATE_HANDLER;
    register_gadget_type(0, Scrollbar_Type, ScrollbarValidFlags,
    		features.mask, TextGadgets_Scrollbar);
}

_kernel_oserror *TextGadgets_init(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror *e;

    IGNORE(cmd_tail);
    IGNORE(podule_base);
    IGNORE(pw);

#ifdef MemCheck_MEMCHECK
    MemCheck_InitNoDebug();
    MemCheck_InterceptSCLStringFunctions();
    MemCheck_SetStoreMallocFunctions(1);
    MemCheck_RedirectToFilename("adfs::4.$.memout");
#endif

    if ((e = rmensure ("Window","Toolbox.Window","1.32")) != NULL)
        return e;

    register_gadgets();

    if ((e = scrolllist_init()) != NULL)
        return e;

    return textarea_init();
}

void TextGadgets_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    IGNORE(pw);
    IGNORE(r);

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

    switch (service_number)
    {
        case Service_WindowModuleStarting:
            register_gadgets();
            break;
        case Service_RedrawingWindow:
            redrawing_window = r->r[0];
            break;
//        case Service_ModeChange:	// If either service call, cache 'em
//        case Service_WimpPalette:
//            cache_tool_names();
//            break;
        default:
            break;
    }

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock(r);
#endif
}

_kernel_oserror *TextGadgets_final(int fatal, int podule, void *pw)
{
    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    if(textarea_active() || scrolllist_active() || scrollbar_active())
        return (_kernel_oserror *)&e_active;

    deregister_gadget_type(0, TextArea_Type, TextGadgets_TextArea);
    deregister_gadget_type(0, ScrollList_Type, TextGadgets_ScrollList);
    deregister_gadget_type(0, Scrollbar_Type, TextGadgets_Scrollbar);

    scrolllist_die();
    scrollbar_die();
    textarea_die();

#ifdef MemCheck_MEMCHECK
    MemCheck_OutputBlocksInfo();
#endif

    return NULL;
}

_kernel_oserror *TextGadgets_SWI_handler(int swi_no, _kernel_swi_regs *r,
		void *pw)
{
    _kernel_oserror *e = NULL;

    IGNORE(pw);

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

    switch (swi_no) {
        case (TextGadgets_TextArea-TextGadgets_00):
           switch (r->r[2]) {
              case GADGET_ADD:
#ifdef MemCheck_MEMCHECK
                MemCheck_RegisterMiscBlock((void*)r->r[3], sizeof(TextArea));
#endif
                e = textarea_add((TextArea *) r->r[3],r->r[5],r->r[4],
                	(int **) &(r->r[1]),(int **) &(r->r[0]));
#ifdef MemCheck_MEMCHECK
                MemCheck_UnRegisterMiscBlock((void*)r->r[3]);
#endif
                break;
              case GADGET_METHOD:
                e = textarea_method((PrivateTextArea *) r->r[3],
                	(_kernel_swi_regs *)(r->r[4]));
                break;
              case GADGET_REMOVE:
                e = textarea_remove((PrivateTextArea *) r->r[3]);
                break;
              case GADGET_FADE:
                e = textarea_fade((PrivateTextArea *) r->r[3],r->r[4]);
                break;
              case GADGET_PLOT:
                e = textarea_plot((TextArea *) r->r[3]);
                break;
              case GADGET_MOVE:
                e = textarea_move((int) r->r[1], (PrivateTextArea *) r->r[3],
                	(BBox *) r->r[5]);
                break;
              default:
                break;

           }
           break;

        case (TextGadgets_ScrollList-TextGadgets_00):
           switch (r->r[2]) {
              case GADGET_ADD:
#ifdef MemCheck_MEMCHECK
                MemCheck_RegisterMiscBlock((void*)r->r[3], sizeof(ScrollList));
#endif
                e = scrolllist_add((ScrollList *) r->r[3],r->r[5],r->r[4],
                	(int **) &(r->r[1]),(int **) &(r->r[0]));
#ifdef MemCheck_MEMCHECK
                MemCheck_UnRegisterMiscBlock((void*)r->r[3]);
#endif
                break;
              case GADGET_METHOD:
                e = scrolllist_method((PrivateScrollList *) r->r[3],
                	(_kernel_swi_regs *)(r->r[4]));
                break;
              case GADGET_REMOVE:
                e = scrolllist_remove((PrivateScrollList *) r->r[3]);
                break;
              case GADGET_FADE:
                e = scrolllist_fade((PrivateScrollList *) r->r[3],r->r[4]);
                break;
              case GADGET_PLOT:
                e = scrolllist_plot((ScrollList *) r->r[3]);
                break;
              case GADGET_MOVE:
                e = scrolllist_move((int) r->r[1],
                	(PrivateScrollList *) r->r[3],
                	(BBox *) r->r[5]);
              	break;
              default:
                break;

           }
           break;

        case (TextGadgets_Scrollbar-TextGadgets_00):
           switch (r->r[2]) {
              case GADGET_ADD:
#ifdef MemCheck_MEMCHECK
                MemCheck_RegisterMiscBlock((void*)r->r[3], sizeof(Scrollbar));
#endif
                e = scrollbar_add((Scrollbar *) r->r[3],r->r[5],r->r[4],
                	(int **) &(r->r[1]),(int **) &(r->r[0]));
#ifdef MemCheck_MEMCHECK
                MemCheck_UnRegisterMiscBlock((void*)r->r[3]);
#endif
                break;
              case GADGET_METHOD:
                e = scrollbar_method((PrivateScrollbar *) r->r[3],
                	(_kernel_swi_regs *)(r->r[4]));
                break;
              case GADGET_REMOVE:
                e = scrollbar_remove((PrivateScrollbar *) r->r[3]);
                break;
              case GADGET_FADE:
                e = scrollbar_fade((PrivateScrollbar *) r->r[3],r->r[4]);
                break;
              case GADGET_PLOT:
                e = scrollbar_plot((Scrollbar *) r->r[3]);
                break;
              case GADGET_MOVE:
                e = scrollbar_move((PrivateScrollbar*)r->r[3],
                				(BBox *)r->r[5]);
              	break;
              default:
                break;

           }
           break;

        case (TextGadgets_RedrawAll - TextGadgets_00):
//            e = scrolllist_redraw_all(r->r[0], r->r[1]);
            // add other gadget redraw functions here...
            break;

        case (TextGadgets_Filter - TextGadgets_00):
            textarea_filter(r);
            scrolllist_filter(r);
            scrollbar_filter(r);
            break;

        default:
            break;
    }

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock(r);
#endif

    return e;
}

/* ------------------------------------------------------------------------
 */
//_kernel_oserror *redraw_gadget(int window_handle, GadgetHeader *hdr)
//{
//    WimpGetWindowStateBlock	state;
//    _kernel_oserror		*e;
//
//    state.window_handle = window_handle;
//
//    if ((e = wimp_get_window_state(&state)) != NULL)
//        return e;
//
//    if (state.flags & WimpWindow_Open)
//    {
//        wimp_force_redraw(window_handle, hdr->box.xmin, hdr->box.ymin,
//        			hdr->box.xmax, hdr->box.ymax);
//    }
//
//    return NULL;
//}
@


1.5
log
@Function returns no longer use stack structures.
Previously, a number of errors were contructed as automatic variables then returned to the caller - potentially accessing stale stack area. All error blocks are now held in ROM and cast from there.
Error numbers are now not &00000000 or &20202020, using the allocated base - requires 'Common-0_15'.
Trimmed some unused debugging code out, saves about 3k.
Renamed C++ clashing variables to stop the compiler moaning.
Implemented feature request to accept the empty string "" as no font handle in _SetFont calls.
At some point, this module needs internationalising.

Version 0.31. Tagged as 'Gadgets-0_31'
@
text
@@


1.4
log
@Replaced some fixes that got removed due to CVS usage error. D'oh.
@
text
@d28 1
a28 2
#include "string.h"

d34 2
a36 1

d207 1
a207 1
        return (_kernel_oserror *) "    Gadget tasks active";
d264 1
a264 1
              	break;
@


1.3
log
@The scrollbar gadget can now be 'faded' (it doesn't actually fade - it just stops responding and maximises the sausage).
@
text
@d23 1
@


1.2
log
@* Merged in fixes from Daytona branch (tag sbrodie_Daytona_merge_19Jun98)

* Fixed 'long' #include directives.
* Removed duplicate function prototypes from TextGadget.h (use ModHdr.h
  for correct prototypes).
* Capability to build with pre- and post-5.16 versions of CMHG.
@
text
@d136 1
a136 1
    features.bits.fade   = DEFAULT_HANDLER;
d326 1
a326 1
                e = scrollbar_fade((int *) r->r[3],r->r[4]);
@


1.1
log
@Initial revision
@
text
@d22 1
d36 2
a37 2
#include "TextGadgets.h"
#include "myswis.h"
d46 1
a46 1
#include "riscos_utils.h"
d54 6
a60 1

d74 1
d125 1
a125 1
    features.bits.fade   = DEFAULT_HANDLER;
d143 1
a143 1
_kernel_oserror *TextGadgets_init(char *cmd_tail, int podule_base, void *pw)
d150 1
a150 1
    
d154 2
a155 1
    MemCheck_RedirectToFilename("adfs::4.$.memout"); 
d157 1
a157 1
    
d160 1
a160 1
    
d205 3
d212 1
d216 4
d229 1
a229 1
    
d233 1
a233 1
    
d290 1
a290 1
                e = scrolllist_fade((int *) r->r[3],r->r[4]);
d321 3
@


1.1.1.1
log
@The Java directory contains the sources for the Java support modules
(TextGadget, etc.) and the makefiles to complete the Java ROM build
under RiscOS.

@
text
@@


1.1.1.2
log
@Added shading to ScrollLists, and changed look of textareas if built with -DDAYTONA_BUILD
@
text
@d118 1
a118 1
    features.bits.fade   = PRIVATE_HANDLER;
d143 1
a143 1

d147 1
a147 1
    MemCheck_RedirectToFilename("adfs::4.$.memout");
d149 1
a149 1

d152 1
a152 1

d213 1
a213 1

d217 1
a217 1

d274 1
a274 1
                e = scrolllist_fade((PrivateScrollList *) r->r[3],r->r[4]);
@


1.1.1.3
log
@Fixed a couple of data aborts, made all gadgets not quit if tasks are
still using them and freed all memory when they do quit.
@
text
@d54 1
d196 1
a196 4
    
    if(textarea_active() || scrolllist_active() || scrollbar_active())
        return (_kernel_oserror *) "    Gadget tasks active";
        
a200 1
    scrolllist_die();
@


1.1.1.4
log
@Twiddles for Daytona project.
@
text
@a145 1
    MemCheck_SetStoreMallocFunctions(1);
a205 4

#ifdef MemCheck_MEMCHECK
    MemCheck_OutputBlocksInfo();
#endif
@


1.1.1.5
log
@Added GADGET_REMOVE for scrollbar gadget.  No longer thinks scrollbar
gadgets are left lying around...
@
text
@a313 3
              case GADGET_REMOVE:
                e = scrollbar_remove((PrivateScrollbar *) r->r[3]);
                break;
@


1.1.1.6
log
@Added scrollbar dragging
@
text
@a21 1
 * piers    19/01/98 Added Wimp_EOpenWindow to interested-events for dragging
a66 1
    Wimp_EOpenWindow, 0,
d196 1
a196 1

d199 1
a199 1

@


1.1.1.4.2.1
log
@Made a single, unified Makefile.  myswis.h renamed to ModHdr.h so that it can be
automatically generated by CMHG.  Changed DAYTONA_BUILD flag to Daytona_BUILD so
that it can be automatically defined in the Makefile using the build
environment's System variable (called ${SYSTEM} in Makefiles).
@
text
@d36 1
a36 1
#include "ModHdr.h"
d196 1
a196 1

d199 1
a199 1

@
