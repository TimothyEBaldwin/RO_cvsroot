head	1.3;
access;
symbols
	Gadgets-0_32:1.2
	Gadgets-0_31:1.2
	Gadgets-0_30:1.2
	Gadgets-0_29:1.2
	Gadgets-0_28:1.2
	RO_5_07:1.2
	Gadgets-0_27:1.2
	Gadgets-0_26:1.2
	Gadgets-0_25:1.2
	Gadgets-0_24:1.2
	Gadgets-0_23:1.2
	Gadgets-0_22:1.2
	Gadgets-0_21:1.2
	Gadgets-0_20:1.2
	Gadgets-0_19:1.2
	Gadgets-0_18:1.2
	Gadgets-0_17:1.2
	Gadgets-0_16:1.2
	Gadgets-0_15:1.2
	sforrest_daytona_appflash-0_31:1.1.2.2
	Gadgets-0_14:1.2
	mjrobert_Java_26_08_98:1.1.2.2
	blaughto_daytona_appflash-0_30:1.1.2.2
	blaughto_daytona_appflash-0_29:1.1.2.2
	blaughto_daytona_appflash-0_28:1.1.2.2
	Gadgets-0_11:1.2
	sbrodie_TextGadgets_merged_19Jun98:1.2
	sbrodie_Daytona_merge_19Jun98:1.1.2.2
	sbrodie_Spin_merge_18Jun98:1.1.2.2
	jberanek_gadgets-0_08:1.1.2.2
	Gadgets-0_10-1_1_2_2:1.1.2.2
	blaughto_daytona_appflash-0_27:1.1.2.2
	blaughto_daytona_appflash-0_26:1.1.2.2
	blaughto_daytona_appflash-0_25:1.1.2.2
	blaughto_daytona_appflash-0_24:1.1.2.2
	blaughto_daytona_appflash-0_23:1.1.2.2
	blaughto_daytona_appflash-0_21:1.1.2.2
	blaughto_daytona_appflash-0_20:1.1.2.2
	blaughto_daytona_appflash-0_19:1.1.2.2
	jberanek_gadgets-0_07:1.1.2.2
	blaughto_daytona_appflash-0_18:1.1.2.2
	mrison_gadgets-0_06:1.1.2.2
	pwombwel_0_09:1.1.2.2
	mrison_gadgets-0_05:1.1.2.2
	Daytona:1.1.2.2.0.2
	Daytona_bp:1.1.2.2
	Spinner_RCA116:1.1.2.2
	Spinner_B20_2:1.1.2.2
	Spinner_19_3:1.1.2.2
	Spinner_B18:1.1.2.2
	Spinner_B17:1.1.2.2
	Spinner_B15:1.1.2.2
	Spinner_B14:1.1.2.2
	Spinner_B13:1.1.2.2
	Spinner_B12:1.1.2.2
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2012.01.14.12.56.52;	author rsprowson;	state dead;
branches;
next	1.2;
commitid	82i1vxnSrlbuN8Pv;

1.2
date	98.06.18.18.01.27;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	97.05.21.10.16.26;	author rlougher;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.05.21.10.16.26;	author rlougher;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.05.23.16.40.29;	author rlougher;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Changed to use shared TboxMake makefile.
Removed local duplication of string32 and rmensure, since the common library has these in.
Rename TextGadget.c to main.c to fall into line with the "o.mainROM" rule.
Compiles, but not tested.

Version 0.33. Tagged as 'Gadgets-0_33'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:     string32.c
 * Purpose:  strings terminated by char < 32
 * Author:   Timothy Roddis
 * History:  24-Jan-94: IDJ: created from original TGR sources
 */

#include "string32.h"


/* Strings passed to the toolbox might be terminated with any control character ... */

#define NULL 0

void string_copy (char *dst_txt, char *src_txt)
{
   /*
    * copy a ctrl-terminated string to a buffer big enough to
    * hold the result (no length checking).
    */

   if (!src_txt) src_txt = "";

   while ((*(dst_txt++)=*(src_txt++))>=32);
   *(--dst_txt) = '\0';
}



char *string_copy_chk (char *dst_txt, char *src_txt, int max_len)
{
   int i;

   /*
    * copy a ctrl-terminated string to a buffer checking it is big enough to
    * hold the result.  Return NULL and nul-terminate, if dst buffer not
    * big enough.
    */

   if (dst_txt == NULL || max_len == 0)
       return NULL;
   if (!src_txt) src_txt = "";

   for (i=1;(*dst_txt++=*src_txt++)>=32;i++)
      if (i>=max_len) {
         *(--dst_txt) = '\0';
         return NULL;
      }
   *(--dst_txt) = '\0';

   return dst_txt;
}


int string_length (char *txt)
{
   int i=0;

   /*
    * return length of ctrl-terminated string
    */

   if (!txt) return 0;
   while ((*txt>=32) || (*txt==9))
   {
       txt++;
       i++;
   }
   return i;
}


void string_to_buffer (char *dst_txt, char *src_txt, int *max_len)
{
    /*
     * general purpose routine to fill in a user-supplied buffer (and report
     * number of bytes written), or just report size of buffer needed.
     * If buffer is supplied (dst_txt != 0), then *max_len gives size of supplied
     * buffer; if this is not large enough, don't return an error, but return
     * size of bufer required!
     */

    int src_len = string_length (src_txt) + 1;

    if (dst_txt == NULL)
        *max_len = src_len;
    else   /* user-supplied buffer */
    {
        if (*max_len >= src_len)
            string_copy (dst_txt, src_txt);
        else
            string_copy_chk (dst_txt, src_txt, *max_len);

        *max_len = string_length (dst_txt) + 1;
    }
}

@


1.2
log
@Merged Spinner branch back to trunk.
@
text
@@


1.1
log
@file string32 was initially added on branch Spinner.
@
text
@d1 110
@


1.1.2.1
log
@*** empty log message ***
@
text
@a0 106
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:     string32.c
 * Purpose:  strings terminated by char < 32
 * Author:   Timothy Roddis
 * History:  24-Jan-94: IDJ: created from original TGR sources
 */

#include "string32.h"


/* Strings passed to the toolbox might be terminated with any control character ... */

#define NULL 0

void string_copy (char *dst_txt, char *src_txt)
{
   /*
    * copy a ctrl-terminated string to a buffer big enough to
    * hold the result (no length checking).
    */

   if (!src_txt) src_txt = "";

   while ((*(dst_txt++)=*(src_txt++))>=32);
   *(--dst_txt) = '\0';
}



char *string_copy_chk (char *dst_txt, char *src_txt, int max_len)
{
   int i;

   /*
    * copy a ctrl-terminated string to a buffer checking it is big enough to
    * hold the result.  Return NULL and nul-terminate, if dst buffer not
    * big enough.
    */

   if (dst_txt == NULL || max_len == 0)
       return NULL;
   if (!src_txt) src_txt = "";

   for (i=1;(*dst_txt++=*src_txt++)>=32;i++)
      if (i>=max_len) {
         *(--dst_txt) = '\0';
         return NULL;
      }
   *(--dst_txt) = '\0';

   return dst_txt;
}


int string_length (char *txt)
{
   int i=0;

   /*
    * return length of ctrl-terminated string
    */

   if (!txt) return 0;
   while (*txt++>=32) i++;
   return i;
}


void string_to_buffer (char *dst_txt, char *src_txt, int *max_len)
{
    /*
     * general purpose routine to fill in a user-supplied buffer (and report
     * number of bytes written), or just report size of buffer needed.
     * If buffer is supplied (dst_txt != 0), then *max_len gives size of supplied
     * buffer; if this is not large enough, don't return an error, but return
     * size of bufer required!
     */

    int src_len = string_length (src_txt) + 1;

    if (dst_txt == NULL)
        *max_len = src_len;
    else   /* user-supplied buffer */
    {
        if (*max_len >= src_len)
            string_copy (dst_txt, src_txt);
        else
            string_copy_chk (dst_txt, src_txt, *max_len);

        *max_len = string_length (dst_txt) + 1;
    }
}

@


1.1.2.2
log
@Changed string_length
@
text
@d77 1
a77 5
   while ((*txt>=32) || (*txt==9))
   {
       txt++;
       i++;
   }
@
