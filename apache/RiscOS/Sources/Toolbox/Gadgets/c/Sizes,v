head	1.2;
access;
symbols
	Gadgets-0_44:1.2
	Gadgets-0_43:1.2
	Gadgets-0_42:1.2
	Gadgets-0_41:1.2
	Gadgets-0_40:1.2
	Gadgets-0_39:1.2
	Gadgets-0_38:1.2
	Gadgets-0_37:1.2
	Gadgets-0_36:1.2
	Gadgets-0_35:1.1
	Gadgets-0_34:1.1
	Gadgets-0_33:1.1
	Gadgets-0_32:1.1
	Gadgets-0_31:1.1
	Gadgets-0_30:1.1
	Gadgets-0_29:1.1
	Gadgets-0_28:1.1
	RO_5_07:1.1
	Gadgets-0_27:1.1
	Gadgets-0_26:1.1
	Gadgets-0_25:1.1
	Gadgets-0_24:1.1
	Gadgets-0_23:1.1
	Gadgets-0_22:1.1
	Gadgets-0_21:1.1
	Gadgets-0_20:1.1
	Gadgets-0_19:1.1
	Gadgets-0_18:1.1
	Gadgets-0_17:1.1
	Gadgets-0_16:1.1
	Gadgets-0_15:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.08.30.19.34.37;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	cFJZhP2Bmu3bUv3x;

1.1
date	99.03.26.12.25.12;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Change to link against tboxlibint
For some reason this toolbox module was unique in linking against the public toolboxlib rather than the internal one, this meant having to carefully tippy toe around not mixing header files (as they contain similar but differently named definitions).
A massive search and replace job.
Tested briefly using ResEd/ResTest and a textarea and scrolllist in a ROM build.
Requires Common-0_21.

Version 0.36. Tagged as 'Gadgets-0_36'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   Sizes.c
 * Purpose: Work out various bits of size information, such
 *          as the current mode's scaling factors (OS units
 *          per pixel) or the width of the horizontal scroll
 *          bar.
 *
 * Revision History
 * ADH  24/03/1999  Created
 */

#include <stdlib.h>
#include <stdio.h>
#include "swis.h"
#include "kernel.h"

#include "twimp.h"
#include "Sizes.h"

/* Mode variables, as used by OS_ReadModeVariable */

typedef enum
{
  BBC_ModeFlags = 0,   /* Bit 0: Non-graphics mode                                   */
                       /* Bit 1: Teletext mode                                       */
                       /* Bit 2: Gap mode (there is a gap between VDU 4 lines)       */
                       /* Bit 3: BBC gap mode (3 and 6)                              */
                       /* Bit 4: Hi-res mono mode                                    */
                       /* Bit 5: Double height VDU chars                             */
                       /* Bit 6: Hardware scroll never used                          */
  BBC_ScrRCol,         /* Maximum text col number                                    */
  BBC_ScrBCol,         /* Maximum text row number                                    */
  BBC_NColour,         /* Maximum logical colour: 1, 3, 15 or 63                     */
  BBC_XEigFactor,      /* OS-unit->pixel shift factor. 0 -> OS-units = pixels,       */
  BBC_YEigFactor,      /* 1 -> 2 OS-units per pixel, 2 -> 4 OS-units per pixel, etc. */
  BBC_LineLength,      /* Bytes per pixel row                                        */
  BBC_ScreenSize,      /* Bytes per screen                                           */
  BBC_YShftFactor,     /* DEPRECATED; Log(2) of LineLength/5                         */
  BBC_Log2BPP,         /* Log base 2 of bits per pixel                               */
  BBC_Log2BPC,         /* Log base 2 of bytes per character                          */
  BBC_XWindLimit,      /* Screen width in pixels, minus 1                            */
  BBC_YWindLimit       /* Screen height in pixels, minus 1                           */

} bbc_modevariable;

/*
 * Simple window template for finding out tool sizes, adapted
 * from ScrollList.c
 */

static const wimp_Window window_template =
{
  {0, -100, 100, 0},                              /* visible_area */
  0,                                              /* xscroll      */
  0,                                              /* yscroll      */
  -1,                                             /* behind       */
  (int)wimp_WINDOWFLAGS_USE_NEW_FLAGS | wimp_WINDOWFLAGS_AUTOREDRAW |
  wimp_WINDOWFLAGS_ALLOW_OFF_SCREEN | wimp_WINDOWFLAGS_HAS_BACK_ICON | 
  wimp_WINDOWFLAGS_HAS_CLOSE_ICON | wimp_WINDOWFLAGS_HAS_TITLE_BAR |
  wimp_WINDOWFLAGS_HAS_TOGGLE_ICON | wimp_WINDOWFLAGS_HAS_ADJUST_SIZE_ICON |
  wimp_WINDOWFLAGS_HAS_VSCROLLBAR |
  wimp_WINDOWFLAGS_HAS_HSCROLLBAR,                /* flags        */
  7,                                              /* title_fg     */
  2,                                              /* title_bg     */
  7,                                              /* work_fg      */
  4,                                              /* work_bg      */
  3,                                              /* scroll_outer */
  1,                                              /* scroll_inner */
  12,                                             /* highlight_by */
  0,                                              /* reserved     */
  {0, -256, 256, 0},                              /* extent       */
  0,                                              /* title_flags  */
  10 * wimp_ICONFLAGS_BUTTON_TYPE,                /* work_flags   */
  NULL,                                           /* sprite_area  */
  0x00010001,                                     /* min_width/min_height   */
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},           /* WimpIconData */
  0                                               /* nicons       */
};

/* Forward declarations */

static int bbc_vduvar (int varno);

/* sizes_x_scale()
 *
 * Return the current mode's horizontal scale factor in
 * OS units per pixel. E.g. 2 for mode 20, 4 for mode 13.
 */

unsigned int sizes_x_scale(void)
{
  return (1 << bbc_vduvar(BBC_XEigFactor));
}

/* sizes_y_scale()
 *
 * Return the current mode's vertical scale factor in
 * OS units per pixel. E.g. 2 for mode 20, 4 for mode 12.
 */

unsigned int sizes_y_scale(void)
{
  return (1 << bbc_vduvar(BBC_YEigFactor));
}


/* sizes_tool_sizes()
 *
 * Work out window tool sizes. Pass pointers to three unsigned
 * ints to receive the title bar height, vertical scroll bar
 * width and horizontal scroll bar height respectively. Any of
 * these pointers may be NULL if you're not interested in that
 * value.
 *
 * This runs fairly slowly so avoid calling too often (e.g. by
 * cacheing the returned information).
 *
 * All returned values are in OS units and include the window
 * border outlines on both of the left/right or top/bottom
 * edges.
 *
 * If there are any errors, SIZES_TOOL_DEFAULT is returned for
 * all values.
 */

void sizes_tool_sizes(unsigned int * title, unsigned int * vscroll, unsigned int * hscroll)
{
  int          handle;
  unsigned int ti, vs, hs;

  /* Anything to do? */

  if (!title && !vscroll && !hscroll) return;

  /* Start with default values */

  ti = vs = hs = SIZES_TOOL_DEFAULT;

  /* Create a simple window and open at -3 in the stack -
   * i.e. behind even the Wimp's back window
   */

  if (!wimp_create_window((wimp_Window *) &window_template, &handle))
  {
    wimp_OpenWindow       open;
    wimp_GetWindowState   state;
    wimp_GetWindowOutline outline;

    outline.window_handle    = handle;
    state.open.window_handle = handle;
    open.window_handle       = handle;
    open.visible_area        = window_template.box;
    open.scx                 = 0;
    open.scy                 = 0;
    open.behind              = -3;

    if (
         !wimp_open_window(&open)           &&
         !wimp_get_window_state(&state)     &&
         !wimp_get_window_outline(&outline)
       )
    {
      /* Work out the sizes */

      ti = outline.box.ymax - state.open.visible_area.ymax;
      hs = state.open.visible_area.ymin - outline.box.ymin;
      vs = outline.box.xmax - state.open.visible_area.xmax;
    }

    wimp_close_window(&handle);
  }

  /* Return the discovered values */

  if (title)   *title   = ti;
  if (vscroll) *vscroll = vs;
  if (hscroll) *hscroll = hs;

  return;
}

/* bbc_vduvar()
 *
 * Call OS_ReadVduVariables for a given variable number and
 * return the result, or -1 if there's an error.
 */

static int bbc_vduvar(int varno)
{
   int vars[2];
   int result;

   vars[0] = varno;
   vars[1] = -1; /* terminator */

   return _swix(OS_ReadVduVariables,
                _INR(0,1),
                vars,
                &result)
                != NULL ? -1 : result; /* relies on -1 never being valid */
}
@


1.1
log
@Various fixes and extensions to ScrollList, plus a related fix in TextArea
and ScrollBar.

Title background colour of gadgets was either undefined or set to 0; should
be 2. Corrected. Would be apparent with 2D tools or any transparent tool
sprite set.

SELECT clicks on deselected entries in a ScrollList now deselect any other
selected items before selecting the new one.

Embedded window of TextArea and ScrollList now put in the right place. At
create time, the sizes of the current tool sprite set is also checked; this
used to be hard coded. If the tool sizes and/or Desktop scaling changes at
run-time this won't be noticed yet, as no mechanism to pass Wimp messages
to *external* gadgets exists in the Toolbox currently. Still, at least it
gets it right the next time a new instance of the gadget is created.

Flag bit ScrollList_SelectionChangingMethod_SendEvent to any of
scrolllist_select_item, scrolllist_deselect_item or scrolllist_delete_items
prompts them to send ScrollList_Selection to the client on completion. This
can help simplify client UI code for UIs which depend on what is selected
(e.g. a "Select all" button greys out if all items are selected by a
keyboard shortcut - this can now all work on just the one event handler).

Flag bit ScrollList_SelectionChangingMethod_OnAll to either of
scrolllist_select_item or scrolllist_deselect_item tells the methods to
act like a "Select all" or "Clear selection" call. This is a common client
operation and it's a lot easier for the ScrollList gadget to do it than
have the client iterate over all items.

Supports new method ScrollList_CountItems (scrolllist_count_items veneer
present in tboxlibs 0.04 or later). Returns number of entries in gadget.
Avoids clumsy situation of both the gadget and the clienty keeping track
of how many entries are present.

Note that docs.ScrollList mis-documented some flags settings. Now fixed.

Version 0.15. Not tagged
@
text
@a26 1

d30 1
a30 3
#include "toolbox.h"
#include "wimplib.h"

d64 1
a64 1
static const WimpWindow window_template =
d70 6
a75 5
  WimpWindow_NewFormat  | WimpWindow_AutoRedraw |
  WimpWindow_NoBounds   | WimpWindow_BackIcon   |
  WimpWindow_CloseIcon  | WimpWindow_TitleIcon  | /* flags        */
  WimpWindow_ToggleIcon | WimpWindow_SizeIcon   |
  WimpWindow_VScroll    | WimpWindow_HScroll,
d86 1
a86 1
  10 * WimpIcon_ButtonType,                       /* work_flags   */
d88 1
a88 2
  1,                                              /* min_width    */
  1,                                              /* min_height   */
d156 1
a156 1
  if (!wimp_create_window((WimpWindow *) &window_template, &handle))
d158 11
a168 11
    WimpOpenWindowBlock       open;
    WimpGetWindowStateBlock   state;
    WimpGetWindowOutlineBlock outline;

    outline.window_handle = handle;
    state.window_handle   = handle;
    open.window_handle    = handle;
    open.visible_area     = window_template.visible_area;
    open.xscroll          = 0;
    open.yscroll          = 0;
    open.behind           = -3;
d178 3
a180 3
      ti = outline.outline.ymax - state.visible_area.ymax;
      hs = state.visible_area.ymin - outline.outline.ymin;
      vs = outline.outline.xmax - state.visible_area.xmax;
@

