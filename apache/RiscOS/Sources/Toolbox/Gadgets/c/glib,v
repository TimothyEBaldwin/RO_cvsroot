head	1.6;
access;
symbols
	Gadgets-0_44:1.6
	Gadgets-0_43:1.6
	Gadgets-0_42:1.6
	Gadgets-0_41:1.6
	Gadgets-0_40:1.6
	Gadgets-0_39:1.5
	Gadgets-0_38:1.5
	Gadgets-0_37:1.5
	Gadgets-0_36:1.5
	Gadgets-0_35:1.4
	Gadgets-0_34:1.4
	Gadgets-0_33:1.4
	Gadgets-0_32:1.4
	Gadgets-0_31:1.4
	Gadgets-0_30:1.3
	Gadgets-0_29:1.3
	Gadgets-0_28:1.3
	RO_5_07:1.3
	Gadgets-0_27:1.3
	Gadgets-0_26:1.3
	Gadgets-0_25:1.2
	Gadgets-0_24:1.2
	Gadgets-0_23:1.2
	Gadgets-0_22:1.2
	Gadgets-0_21:1.2
	Gadgets-0_20:1.2
	Gadgets-0_19:1.2
	Gadgets-0_18:1.2
	Gadgets-0_17:1.2
	Gadgets-0_16:1.2
	Gadgets-0_15:1.2
	sforrest_daytona_appflash-0_31:1.1.2.1
	Gadgets-0_14:1.2
	mjrobert_Java_26_08_98:1.1.2.1
	blaughto_daytona_appflash-0_30:1.1.2.1
	blaughto_daytona_appflash-0_29:1.1.2.1
	blaughto_daytona_appflash-0_28:1.1.2.1
	Gadgets-0_11:1.2
	sbrodie_TextGadgets_merged_19Jun98:1.2
	sbrodie_Daytona_merge_19Jun98:1.1.2.1
	sbrodie_Spin_merge_18Jun98:1.1.2.1
	jberanek_gadgets-0_08:1.1.2.1
	Gadgets-0_10-1_1_2_2:1.1.2.1
	blaughto_daytona_appflash-0_27:1.1.2.1
	blaughto_daytona_appflash-0_26:1.1.2.1
	blaughto_daytona_appflash-0_25:1.1.2.1
	blaughto_daytona_appflash-0_24:1.1.2.1
	blaughto_daytona_appflash-0_23:1.1.2.1
	blaughto_daytona_appflash-0_21:1.1.2.1
	blaughto_daytona_appflash-0_20:1.1.2.1
	blaughto_daytona_appflash-0_19:1.1.2.1
	jberanek_gadgets-0_07:1.1.2.1
	blaughto_daytona_appflash-0_18:1.1.2.1
	mrison_gadgets-0_06:1.1.2.1
	pwombwel_0_09:1.1.2.1
	mrison_gadgets-0_05:1.1.2.1
	Daytona:1.1.2.1.0.2
	Daytona_bp:1.1.2.1
	Spinner_RCA116:1.1.2.1
	Spinner_B20_2:1.1.2.1
	Spinner_19_3:1.1.2.1
	Spinner_B18:1.1.2.1
	Spinner_B17:1.1.2.1
	Spinner_B15:1.1.2.1
	Spinner_B14:1.1.2.1
	Spinner_B13:1.1.2.1
	Spinner_B12:1.1.2.1
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2015.11.28.19.08.33;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	Hv9ItC5GsjO1pTKy;

1.5
date	2013.08.30.19.34.37;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	cFJZhP2Bmu3bUv3x;

1.4
date	2010.02.28.10.40.28;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.18.22.01.04;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	98.06.18.18.01.25;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	97.05.21.10.10.09;	author rlougher;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.05.21.10.10.10;	author rlougher;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Plot a more credible rendition of TextArea and ScrollList
Both the TextArea gadget and ScrollList were outputting an unhelpful white rectangle and mysterious black rectangle when asked to plot the gadget prototype (eg. in the gadget palette in ResEd). The black rectangle turned out to represent a scroll bar, though it was the wrong width.
Changed to plot a 2D scrollbar (ala RISC OS 2) then overlay a virtual icon with the name of the gadget type.
main.c:
Relocate helper functions into glib.
Return 'Bad SWI' for unknown subreasons.
glib.c/glib3.c:
Remove various unused functions.
Added new function to plot a grey scrollbar from nested rectangles.
TextArea.c:
Add a vertical, or horixontal, or both, scrollbar plus the label "TextArea".
ScrollList.c:
Add a vertical scrollbar plus the label "ScrollList".

Requires Common-0_25 for the colour defines. Tested in !ResEd in various eigenfactor modes.

Version 0.40. Tagged as 'Gadgets-0_40'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "twimp.h"
#include "macros.h"
#include "objects/toolbox.h"
#include "objects/window.h"

#include "Sizes.h"
#include "riscos_uti.h"
#include "glib.h"

extern _kernel_oserror *register_gadget_types(unsigned int flags, GadgetExtensionRecord *rec,int SWIno)
{
   return _swix(Window_RegisterExternal, _INR(0,2), flags, rec, SWIno);

}

extern _kernel_oserror *register_gadget_type(unsigned int flags, int type,unsigned int valid, unsigned int mask,int SWIno)
{
  GadgetExtensionRecord rec[2];

  rec[0].type = type;
  rec[0].validflags = valid;
  rec[0].features.mask = mask;
  rec[1].type = -1;

  return (register_gadget_types(flags,&rec[0],SWIno));
}

extern _kernel_oserror *deregister_gadget_type(unsigned int flags, int type,int SWIno)
{
   return _swix(Window_DeregisterExternal, _INR(0,2), flags, type, SWIno);
}

void *mem_allocate(int amount)
{
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = 4;
   regs.r[2] = amount;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
   return (void *) regs.r[0];
}

void mem_free(void *tag)
{
   _swix(Window_SupportExternal, _INR(0,2), 0, 5, tag);
}

void graphics_window(wimp_Bbox *area)
{
   _swix(OS_WriteI+5,0);
   _swix(OS_WriteI+24,0);
   _swix(OS_WriteI+((area->xmin) & 255),0);
   _swix(OS_WriteI+(((area->xmin) >> 8) & 255),0);
   _swix(OS_WriteI+((area->ymin) & 255),0);
   _swix(OS_WriteI+(((area->ymin) >> 8) & 255),0);
   _swix(OS_WriteI+((area->xmax -1) & 255),0);
   _swix(OS_WriteI+(((area->xmax -1) >> 8) & 255),0);
   _swix(OS_WriteI+((area->ymax -1) & 255),0);
   _swix(OS_WriteI+(((area->ymax -1) >> 8) & 255),0);

}

/* convert work area coords to screen coords */

void work_to_screen(wimp_Bbox *wa, wimp_GetWindowState *state)
{
    wa->xmin += state->open.visible_area.xmin - state->open.scx;
    wa->xmax += state->open.visible_area.xmin - state->open.scx;

    wa->ymin += state->open.visible_area.ymax - state->open.scy;
    wa->ymax += state->open.visible_area.ymax - state->open.scy;
}

/* convert screen coords to work area */

void screen_to_work(wimp_Bbox *wa, wimp_GetWindowState *state)
{
    wa->xmin -= state->open.visible_area.xmin - state->open.scx;
    wa->xmax -= state->open.visible_area.xmin - state->open.scx;

    wa->ymin -= state->open.visible_area.ymax - state->open.scy;
    wa->ymax -= state->open.visible_area.ymax - state->open.scy;
}

/* modify a box and then colour it in */

static void plot_2d_rect(const wimp_Bbox *bound, wimp_Bbox *rect, int fillcol, int adjx, int adjy)
{
    int scalex, scaley;

    scalex = sizes_x_scale();
    scaley = sizes_y_scale();

    // New size
    rect->xmin = MIN(rect->xmin + adjx, bound->xmax);
    rect->xmax = MAX(rect->xmax - adjx, bound->xmin);
    rect->ymin = MIN(rect->ymin + adjy, bound->ymax);
    rect->ymax = MAX(rect->ymax - adjy, bound->ymin);

    // Plot if it's at least 1 OSU wide and high
    if (((rect->ymax - rect->ymin) >= scaley) &&
        ((rect->xmax - rect->xmin) >= scalex))
    {
        colourtrans_set_gcol(fillcol, 1<<7, 0);
        os_plot(PLOT_MOVE, rect->xmin, rect->ymin);
        os_plot(PLOT_RECTANGLE_FILL | PLOT_BACK, rect->xmax, rect->ymax);
    }
}

/* plot a fake flat scroll bar */

void plot_2d_scrollbar(const wimp_Bbox *bound, int bordercol, BOOL vertical)
{
    int scalex, scaley, insetx, insety;
    wimp_Bbox box;

    scalex = sizes_x_scale();
    scaley = sizes_y_scale();
    box = *bound;

    // Plot scrollbar inner border 'L' or '¬'
    colourtrans_set_gcol(bordercol, 0, 0);
    if (vertical)
    {
        box.xmin += scalex;
        os_plot(PLOT_MOVE, box.xmin, box.ymax);
        os_plot(PLOT_DRAW, box.xmin, box.ymin);
        os_plot(PLOT_DRAW, box.xmax, box.ymin);
        insetx = scalex * (SIZES_SCROLL_WELL_LR / scalex);
        insety = scaley * SIZES_SCROLL_WELL_TB;
    }
    else
    {
        box.ymax -= scaley;
        os_plot(PLOT_MOVE, box.xmin, box.ymax);
        os_plot(PLOT_DRAW, box.xmax, box.ymax);
        os_plot(PLOT_DRAW, box.xmax, box.ymin);
        insetx = scalex * SIZES_SCROLL_WELL_TB;
        insety = scaley * (SIZES_SCROLL_WELL_LR / scaley);
    }

    // Plot scrollbar background (MidLightGrey), 1 pixel in
    plot_2d_rect(bound, &box, 0x99999900, scalex, scaley);

    // Plot scrollbar border, inset by the well size
    plot_2d_rect(bound, &box, bordercol, insetx, insety);

    // Plot scrollbar inner (VeryLightGrey), 1 pixel in
    plot_2d_rect(bound, &box, 0xDDDDDD00, scalex, scaley);
}
@


1.5
log
@Change to link against tboxlibint
For some reason this toolbox module was unique in linking against the public toolboxlib rather than the internal one, this meant having to carefully tippy toe around not mixing header files (as they contain similar but differently named definitions).
A massive search and replace job.
Tested briefly using ResEd/ResTest and a textarea and scrolllist in a ROM build.
Requires Common-0_21.

Version 0.36. Tagged as 'Gadgets-0_36'
@
text
@d22 1
d26 2
d69 1
a69 1
int glib_create_icon(wimp_IconCreate *i)
d71 10
a80 1
   _kernel_swi_regs regs;
a81 5
   regs.r[0] = 0;
   regs.r[1] = 0;
   regs.r[2] = (int) i;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
   return regs.r[0];
d84 3
a86 1
int glib_create_gadget(ObjectID o,Gadget *i,int f)
d88 2
a89 1
   _kernel_swi_regs regs;
d91 2
a92 6
   regs.r[1] = 3;
   regs.r[2] = (int) o;
   regs.r[3] = (int) i;
   regs.r[4] = f;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
   return regs.r[0];
d95 3
a97 1
void glib_move_gadget(int type,ObjectID obj,ComponentID id,wimp_Bbox *box)
d99 6
a104 2
   _kernel_swi_regs regs;
   FeatureMask features;
d106 1
a106 3
   features.mask = 0;
   features.bits.method = DEFAULT_HANDLER;
   features.bits.move   = DEFAULT_HANDLER;
d108 3
a110 1
   register_gadget_type(0, type,0, features.mask,0);
d112 2
a113 6
   regs.r[0] = 0;
   regs.r[1] = (int) obj;
   regs.r[2] = Gadget_MoveGadget;
   regs.r[3] = (int) id;
   regs.r[4] = (int) box;
   _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);
d115 5
a119 1
   deregister_gadget_type(0, type ,0);
d121 8
d131 3
a133 1
void graphics_window(wimp_Bbox *area)
d135 2
a136 10
   _swix(OS_WriteI+5,0);
   _swix(OS_WriteI+24,0);
   _swix(OS_WriteI+((area->xmin) & 255),0);
   _swix(OS_WriteI+(((area->xmin) >> 8) & 255),0);
   _swix(OS_WriteI+((area->ymin) & 255),0);
   _swix(OS_WriteI+(((area->ymin) >> 8) & 255),0);
   _swix(OS_WriteI+((area->xmax -1) & 255),0);
   _swix(OS_WriteI+(((area->xmax -1) >> 8) & 255),0);
   _swix(OS_WriteI+((area->ymax -1) & 255),0);
   _swix(OS_WriteI+(((area->ymax -1) >> 8) & 255),0);
d138 3
a140 1
}
d142 20
a161 1
static wimp_Bbox intersect;
d163 2
a164 2
#define min(a,b) ((a>b) ? b:a)
#define max(a,b) ((a>b) ? a:b)
d166 2
a167 7
wimp_Bbox *intersection(wimp_Bbox *a, wimp_Bbox *b)
{
   if ((a->xmin >= b->xmax) || (a->xmax <= b->xmin) || (a->ymin >= b->ymax) || (a->ymax <= b->ymin)) return 0;
   intersect.xmin = max(a->xmin,b->xmin);
   intersect.xmax = min(a->xmax,b->xmax);
   intersect.ymin = max(a->ymin,b->ymin);
   intersect.ymax = min(a->ymax,b->ymax);
d169 2
a170 1
   return &intersect;
@


1.4
log
@Function returns no longer use stack structures.
Previously, a number of errors were contructed as automatic variables then returned to the caller - potentially accessing stale stack area. All error blocks are now held in ROM and cast from there.
Error numbers are now not &00000000 or &20202020, using the allocated base - requires 'Common-0_15'.
Trimmed some unused debugging code out, saves about 3k.
Renamed C++ clashing variables to stop the compiler moaning.
Implemented feature request to accept the empty string "" as no font handle in _SetFont calls.
At some point, this module needs internationalising.

Version 0.31. Tagged as 'Gadgets-0_31'
@
text
@d15 1
d20 5
a25 5
#include "glibP.h"

#include "toolbox.h"
#include "window.h"
#include "wimplib.h"
d66 1
a66 1
int glib_create_icon(WimpCreateIconBlock *i)
d77 1
a77 1
int glib_create_gadget(ObjectId o,Gadget *i,int f)
d89 1
a89 1
void glib_move_gadget(int type,ObjectId obj,ComponentId id,BBox *box)
d111 1
a111 1
void graphics_window(BBox *area)
d126 1
a126 1
static BBox intersect;
d131 1
a131 1
BBox *intersection(BBox *a, BBox *b)
@


1.3
log
@Change so it does delete and backspace like Windows (controlled by the
NEWDELETE switch like RISCOSLib is now).
Key 8 deletes left
Key 127 deletes right
The Copy key does nothing (home and end aren't implemented it seems).
Fix from Kevin for it claiming a Dynamic area of maximum size - greedy
guts now limited to 16M.

Version 0.26. Tagged as 'Gadgets-0_26'
@
text
@a139 6

_kernel_oserror *glib_plot_gadget(int flags,Gadget *g)
{
   return _swix(0x828bf, _INR(0,1), flags, g);

}
@


1.2
log
@Merged Spinner branch back to trunk.
@
text
@d28 1
a28 5
   _kernel_swi_regs regs;
   regs.r[0] = flags;
   regs.r[1] = (int) rec;
   regs.r[2] = SWIno;
   return _kernel_swi(Window_RegisterExternal,&regs,&regs);
d46 1
a46 6
   _kernel_swi_regs regs;
   regs.r[0] = flags;
   regs.r[1] = type;
   regs.r[2] = SWIno;
   return _kernel_swi(Window_DeregisterExternal,&regs,&regs);

d62 1
a62 6
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = 5;
   regs.r[2] = (int) tag;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
d143 1
a143 5
   _kernel_swi_regs regs;

   regs.r[0] = flags;
   regs.r[1] = (int) g;
   return _kernel_swi(0x828bf,&regs,&regs);
@


1.1
log
@file glib was initially added on branch Spinner.
@
text
@d1 163
@


1.1.2.1
log
@Part of glib
@
text
@a0 163
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "glib.h"
#include "glibP.h"

#include "toolbox.h"
#include "window.h"
#include "wimplib.h"

extern _kernel_oserror *register_gadget_types(unsigned int flags, GadgetExtensionRecord *rec,int SWIno)
{
   _kernel_swi_regs regs;
   regs.r[0] = flags;
   regs.r[1] = (int) rec;
   regs.r[2] = SWIno;
   return _kernel_swi(Window_RegisterExternal,&regs,&regs);

}

extern _kernel_oserror *register_gadget_type(unsigned int flags, int type,unsigned int valid, unsigned int mask,int SWIno)
{
  GadgetExtensionRecord rec[2];

  rec[0].type = type;
  rec[0].validflags = valid;
  rec[0].features.mask = mask;
  rec[1].type = -1;

  return (register_gadget_types(flags,&rec[0],SWIno));
}

extern _kernel_oserror *deregister_gadget_type(unsigned int flags, int type,int SWIno)
{
   _kernel_swi_regs regs;
   regs.r[0] = flags;
   regs.r[1] = type;
   regs.r[2] = SWIno;
   return _kernel_swi(Window_DeregisterExternal,&regs,&regs);

}

void *mem_allocate(int amount)
{
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = 4;
   regs.r[2] = amount;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
   return (void *) regs.r[0];
}

void mem_free(void *tag)
{
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = 5;
   regs.r[2] = (int) tag;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
}

int glib_create_icon(WimpCreateIconBlock *i)
{
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = 0;
   regs.r[2] = (int) i;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
   return regs.r[0];
}

int glib_create_gadget(ObjectId o,Gadget *i,int f)
{
   _kernel_swi_regs regs;

   regs.r[1] = 3;
   regs.r[2] = (int) o;
   regs.r[3] = (int) i;
   regs.r[4] = f;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
   return regs.r[0];
}

void glib_move_gadget(int type,ObjectId obj,ComponentId id,BBox *box)
{
   _kernel_swi_regs regs;
   FeatureMask features;

   features.mask = 0;
   features.bits.method = DEFAULT_HANDLER;
   features.bits.move   = DEFAULT_HANDLER;

   register_gadget_type(0, type,0, features.mask,0);

   regs.r[0] = 0;
   regs.r[1] = (int) obj;
   regs.r[2] = Gadget_MoveGadget;
   regs.r[3] = (int) id;
   regs.r[4] = (int) box;
   _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);

   deregister_gadget_type(0, type ,0);

}

void graphics_window(BBox *area)
{
   _swix(OS_WriteI+5,0);
   _swix(OS_WriteI+24,0);
   _swix(OS_WriteI+((area->xmin) & 255),0);
   _swix(OS_WriteI+(((area->xmin) >> 8) & 255),0);
   _swix(OS_WriteI+((area->ymin) & 255),0);
   _swix(OS_WriteI+(((area->ymin) >> 8) & 255),0);
   _swix(OS_WriteI+((area->xmax -1) & 255),0);
   _swix(OS_WriteI+(((area->xmax -1) >> 8) & 255),0);
   _swix(OS_WriteI+((area->ymax -1) & 255),0);
   _swix(OS_WriteI+(((area->ymax -1) >> 8) & 255),0);

}

static BBox intersect;

#define min(a,b) ((a>b) ? b:a)
#define max(a,b) ((a>b) ? a:b)

BBox *intersection(BBox *a, BBox *b)
{
   if ((a->xmin >= b->xmax) || (a->xmax <= b->xmin) || (a->ymin >= b->ymax) || (a->ymax <= b->ymin)) return 0;
   intersect.xmin = max(a->xmin,b->xmin);
   intersect.xmax = min(a->xmax,b->xmax);
   intersect.ymin = max(a->ymin,b->ymin);
   intersect.ymax = min(a->ymax,b->ymax);

   return &intersect;
}

_kernel_oserror *glib_plot_gadget(int flags,Gadget *g)
{
   _kernel_swi_regs regs;

   regs.r[0] = flags;
   regs.r[1] = (int) g;
   return _kernel_swi(0x828bf,&regs,&regs);

}
@
