head	1.3;
access;
symbols
	Libs-0_27-1:1.3
	Libs-0_27:1.3
	Libs-0_26:1.3
	Libs-0_25:1.3
	Libs-0_24:1.3
	Libs-0_23:1.3
	Libs-0_22:1.3
	Libs-0_21:1.3
	Libs-0_20:1.3
	Libs-0_19:1.3
	Libs-0_18:1.3
	RO_5_07:1.3
	Libs-0_17:1.3
	Libs-0_16:1.3
	Libs-0_15:1.2
	dellis_autobuild_BaseSW:1.2
	Libs-0_14:1.2
	Libs-0_13:1.2
	Libs-0_12:1.2
	Libs-0_11:1.2
	sbrodie_sedwards_16Mar2000:1.2
	Libs-0_10:1.2
	Libs-0_09:1.2
	dcotton_autobuild_BaseSW:1.2
	Libs-0_08:1.2
	Libs-0_07:1.2
	Libs-0_06:1.2
	Libs-0_05:1.2
	Libs-0_04:1.2
	Libs-0_03:1.2
	Libs-0_02:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	sbrodie_Toolbox_Ursula_231198:1.2
	Ursula_RiscPC:1.2.0.4
	Libs-0_01:1.2
	nicke_TBoxLibs_20-9-98:1.2
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	afrost_NC2_Generic:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	eventlib-0_05:1.2
	Ursula_bp:1.2
	Ursula:1.2.0.2
	Ursula_12May1998:1.1.0.4
	rthornb_UrsulaBuild_01May1998:1.1
	Daytona:1.1.0.2
	Daytona_bp:1.1
	sbrodie_Expresso_final_190298:1.2
	sbrodie_Toolbox_Libs_120298:1.2
	sbrodie_Expresso_BETA6_19980204:1.2;
locks; strict;
comment	@# @;


1.3
date	2002.02.18.15.26.16;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	97.12.10.16.31.30;	author pwombwel;	state Exp;
branches;
next	1.1;

1.1
date	97.09.03.14.10.49;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Added a finalisation function to EventLib.
Detail:
  Page 144 of the C/C++ manual says:
  "Events and message handlers are both held in application space. Application
  tasks therefore do not need to remove them on quitting, nor need they
  deregister them."
  However, this is not helpful for module tasks, where the list heads and
  other static variables are in the RMA, and therefore hold invalid values
  when re-entering the Desktop.
  To fix this, there is now a function event_finalise() which will remove
  all handlers and reinitialise all statics.
Admin:
  Builds, but not yet tested.

Version 0.16. Tagged as 'Libs-0_16'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/****************************************************************************
 * This source file was written by Acorn Computers Limited. It is part of   *
 * the toolbox library for writing desktop applications in C. It may be     *
 * used freely in the creation of programs for Archimedes or Risc PC. It    *
 * should be used with Acorn's C Compiler Release 5 or later.               *
 *                                                                          *
 *                                                                          *
 * Copyright © Acorn Computers Ltd, 1994                                    *
 *                                                                          *
 ***************************************************************************/



#ifndef __event_h
#define __event_h

#ifndef __wimp_h
#include "wimp.h"
#endif

#ifndef __toolbox_h
#include "toolbox.h"
#endif

typedef int (WimpEventHandler) (int event_code,
                                 WimpPollBlock *event,
                                 IdBlock       *id_block,
                                 void          *handle);

typedef int (ToolboxEventHandler) (int event_code,
                                    ToolboxEvent  *event,
                                    IdBlock       *id_block,
                                    void          *handle);

typedef int (WimpMessageHandler) (WimpMessage *message,
                                   void *handle);



#ifdef __cplusplus
  extern "C" {
#endif


extern _kernel_oserror *event_poll (int *event_code, WimpPollBlock *poll_block, void *poll_word);


extern _kernel_oserror *event_poll_idle (int *event_code, WimpPollBlock *poll_block, unsigned int earliest, void *poll_word);


extern _kernel_oserror *event_dispatch (int event_code, WimpPollBlock *poll_block);


/* ------------------------------------- getting/setting poll mask -------------------------------- */

extern _kernel_oserror *event_set_mask (unsigned int mask);

extern _kernel_oserror *event_get_mask (unsigned int *mask);


/* ------------------------------------ event handler registering ------------------------------- */

_kernel_oserror *event_register_wimp_handler (ObjectId object_id, int event_code,
                                              WimpEventHandler *handler, void *handle);

_kernel_oserror *event_deregister_wimp_handler (ObjectId object_id, int event_code,
                                                WimpEventHandler *handler, void *handle);

_kernel_oserror *event_deregister_wimp_handlers_for_object (int object_id);


_kernel_oserror *event_register_toolbox_handler (ObjectId object_id, int event_code,
                                                 ToolboxEventHandler *handler, void *handle);

_kernel_oserror *event_deregister_toolbox_handler (ObjectId object_id, int event_code,
                                                   ToolboxEventHandler *handler, void *handle);

_kernel_oserror *event_deregister_toolbox_handlers_for_object (int object_id);

_kernel_oserror *event_register_message_handler (int msg_no, WimpMessageHandler *handler, void *handle);

_kernel_oserror *event_deregister_message_handler (int msg_no, WimpMessageHandler *handler, void *handle);



/* ------------------------------------ initialisation/finalisation ----------------------------- */


extern _kernel_oserror *event_initialise (IdBlock *b);

extern _kernel_oserror *event_finalise (void);


#ifdef __cplusplus
  }
#endif


#endif
@


1.2
log
@Added event_dispatch() so the app can call Wimp_Poll directly, then later dispatch the event
@
text
@d100 1
a100 1
/* ---------------------------------------- initialisation -------------------------------------- */
d104 2
@


1.1
log
@Initial commit
@
text
@d65 3
d89 1
a89 1
_kernel_oserror *event_deregister_toolbox_handler (ObjectId object_id, int event_code, 
@
