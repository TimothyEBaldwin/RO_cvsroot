head	1.2;
access;
symbols
	Libs-0_27-1:1.2
	Libs-0_27:1.2
	Libs-0_26:1.2
	Libs-0_25:1.2
	Libs-0_24:1.2
	Libs-0_23:1.2
	Libs-0_22:1.2
	Libs-0_21:1.2
	Libs-0_20:1.2
	Libs-0_19:1.2
	Libs-0_18:1.2
	RO_5_07:1.2
	Libs-0_17:1.2
	Libs-0_16:1.2
	Libs-0_15:1.1
	dellis_autobuild_BaseSW:1.1
	Libs-0_14:1.1
	Libs-0_13:1.1
	Libs-0_12:1.1
	Libs-0_11:1.1
	sbrodie_sedwards_16Mar2000:1.1
	Libs-0_10:1.1
	Libs-0_09:1.1
	dcotton_autobuild_BaseSW:1.1
	Libs-0_08:1.1
	Libs-0_07:1.1
	Libs-0_06:1.1
	Libs-0_05:1.1
	Libs-0_04:1.1
	Libs-0_03:1.1
	Libs-0_02:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	sbrodie_Toolbox_Ursula_231198:1.1
	Ursula_RiscPC:1.1.0.8
	Libs-0_01:1.1
	nicke_TBoxLibs_20-9-98:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	afrost_NC2_Generic:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	eventlib-0_05:1.1
	Ursula_bp:1.1
	Ursula:1.1.0.6
	Ursula_12May1998:1.1.0.4
	rthornb_UrsulaBuild_01May1998:1.1
	Daytona:1.1.0.2
	Daytona_bp:1.1
	sbrodie_Expresso_final_190298:1.1
	sbrodie_Toolbox_Libs_120298:1.1
	sbrodie_Expresso_BETA6_19980204:1.1;
locks; strict;
comment	@# @;


1.2
date	2002.02.18.15.26.16;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	97.09.03.14.10.46;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Added a finalisation function to EventLib.
Detail:
  Page 144 of the C/C++ manual says:
  "Events and message handlers are both held in application space. Application
  tasks therefore do not need to remove them on quitting, nor need they
  deregister them."
  However, this is not helpful for module tasks, where the list heads and
  other static variables are in the RMA, and therefore hold invalid values
  when re-entering the Desktop.
  To fix this, there is now a function event_finalise() which will remove
  all handlers and reinitialise all statics.
Admin:
  Builds, but not yet tested.

Version 0.16. Tagged as 'Libs-0_16'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   wimpmsg.c
 * Purpose: functions for wimp message handling
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *          19-Dec-96: ADH: fixed bug preventing a handler deregistering itself
 *          18-Feb-02: BJGA: added finalisation
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "debug.h"

#include "event.h"

#include "types.h"
#include "wimpmsg.h"

static _kernel_oserror err = {0, "Error in event handling"};
static WimpMessageHandlerItem * _next_handler;

static _kernel_oserror *make_error(void)
{
    return &err;
}

static WimpMessageHandlerItem  *wimpmsg__handlers = 0;   /* the list of all wimp message handlers */


/* ----------------------------------- dispatching a wimp message ----------------------------------- */


static int wimpmsg_message_matches (WimpMessageHandlerItem *h, WimpPollBlock *poll_block)
{
    int msg_no = poll_block->user_message.hdr.action_code;

    if (h->msg_no == -1 || h->msg_no == msg_no)
        return 1;

    return 0;
}


extern _kernel_oserror *wimpmsg_dispatch (WimpPollBlock *poll_block, IdBlock *id_block)
{
    /*
     * look down chain of wimp message handlers, looking for one interested in
     * this wimp message.  If handler returns non-zero it has claimed the
     * message.
     */

    WimpMessageHandlerItem *h;

    h = wimpmsg__handlers;

    while (h != NULL)
    {
        if (wimpmsg_message_matches (h, poll_block) && h->handler != NULL)
        {
            /* remember the next handler before calling this one,
             * as if the handler deregisters itself the h block
             * will be freed and h->next becomes invalid
             */

            _next_handler = h->next;

            /* call the handler */
            if (h->handler (&poll_block->user_message, h->handle))
                return NULL;

            h = _next_handler;
        }
        else
            h = h->next; /* For efficiency, only use the global _next_handler if the handler is to be called */
    }

    return NULL;

    id_block = id_block;
}


/* ---------------------------- registering handlers for wimp messages ---------------------------- */

_kernel_oserror *wimpmsg_register_message_handler (int msg_no, WimpMessageHandler *handler, void *handle)
{
    WimpMessageHandlerItem *h, *new_h;

    /*
     * first check to see if already there.
     */

    h = wimpmsg__handlers;

    while (h != NULL)
    {
        if (h->handler == handler && h->handle == handle && h->msg_no == msg_no)
            return NULL;

        h = h->next;
    }


    /*
     * create a new element and link it into the list.
     */

    if ((new_h = malloc (sizeof(WimpMessageHandlerItem))) == NULL)
        return make_error ();

    new_h->msg_no     = msg_no;
    new_h->handler    = handler;
    new_h->handle     = handle;
    new_h->next       = wimpmsg__handlers;
    wimpmsg__handlers = new_h;

    return NULL;
}



/* -------------------------------------- deregistering message handlers ----------------------------- */

_kernel_oserror *wimpmsg_deregister_message_handler (int msg_no, WimpMessageHandler *handler, void *handle)
{
    WimpMessageHandlerItem *h = wimpmsg__handlers, *prev_h = wimpmsg__handlers;

    /*
     * search for exact match of handler, list and handle.
     */

    while (h != NULL)
    {
        if (h->handler == handler && h->handle == handle && h->msg_no == msg_no)
            break;

        prev_h = h;
        h      = h->next;
    }

    /*
     * if found, delete it!
     */

    if (h != NULL)
    {
        if (h == wimpmsg__handlers)
            wimpmsg__handlers = h->next;
        else
            prev_h->next = h->next;

        /* If we've deleted the item that was pointed to by _next_handler,
         * need to repoint _next_handler to the next one along again.
         */

        if (h == _next_handler) _next_handler = h->next;

        free (h);

        return NULL;
    }
    else
        return make_error ();
}

/* --------------------------------------------- finalisation ---------------------------------------- */

_kernel_oserror *wimpmsg_finalise (void)
{
    WimpMessageHandlerItem *h = wimpmsg__handlers, *next_h;

    while (h != NULL)
    {
        /* Delete the handler from the list. */

        next_h = h->next;

        wimpmsg__handlers = next_h;

        free(h);

        h = next_h;
    }

    _next_handler = NULL;

    return NULL;
}
@


1.1
log
@Initial commit
@
text
@d20 1
d181 24
@

