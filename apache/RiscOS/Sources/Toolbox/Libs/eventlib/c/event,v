head	1.6;
access;
symbols
	Libs-0_27-1:1.6
	Libs-0_27:1.6
	Libs-0_26:1.6
	Libs-0_25:1.5
	Libs-0_24:1.5
	Libs-0_23:1.5
	Libs-0_22:1.5
	Libs-0_21:1.4
	Libs-0_20:1.4
	Libs-0_19:1.4
	Libs-0_18:1.4
	RO_5_07:1.4
	Libs-0_17:1.4
	Libs-0_16:1.4
	Libs-0_15:1.3
	dellis_autobuild_BaseSW:1.3
	Libs-0_14:1.3
	Libs-0_13:1.3
	Libs-0_12:1.3
	Libs-0_11:1.3
	sbrodie_sedwards_16Mar2000:1.3
	Libs-0_10:1.3
	Libs-0_09:1.3
	dcotton_autobuild_BaseSW:1.3
	Libs-0_08:1.3
	Libs-0_07:1.3
	Libs-0_06:1.3
	Libs-0_05:1.3
	Libs-0_04:1.3
	Libs-0_03:1.3
	Libs-0_02:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.3
	sbrodie_Toolbox_Ursula_231198:1.3
	Ursula_RiscPC:1.3.0.4
	Libs-0_01:1.3
	nicke_TBoxLibs_20-9-98:1.3
	rthornb_UrsulaBuild-19Aug1998:1.3
	UrsulaBuild_FinalSoftload:1.3
	rthornb_UrsulaBuild-12Aug1998:1.3
	aglover_UrsulaBuild-05Aug1998:1.3
	rthornb_UrsulaBuild-29Jul1998:1.3
	rthornb_UrsulaBuild-22Jul1998:1.3
	rthornb_UrsulaBuild-15Jul1998:1.3
	rthornb_UrsulaBuild-07Jul1998:1.3
	rthornb_UrsulaBuild-17Jun1998:1.3
	afrost_NC2_Generic:1.3
	rthornb_UrsulaBuild-03Jun1998:1.3
	rthornb_UrsulaBuild-27May1998:1.3
	rthornb_UrsulaBuild-21May1998:1.3
	eventlib-0_05:1.3
	Ursula_bp:1.3
	Ursula:1.3.0.2
	Ursula_12May1998:1.1.0.4
	rthornb_UrsulaBuild_01May1998:1.1
	Daytona:1.1.0.2
	Daytona_bp:1.1
	sbrodie_Expresso_final_190298:1.2
	sbrodie_Toolbox_Libs_120298:1.2
	sbrodie_Expresso_BETA6_19980204:1.2;
locks; strict;
comment	@# @;


1.6
date	2018.03.02.23.02.57;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	srsMGZfQpwnibWsA;

1.5
date	2012.02.11.18.05.19;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	kmzWDlnftSvwBLSv;

1.4
date	2002.02.18.15.26.16;	author bavison;	state Exp;
branches;
next	1.3;

1.3
date	98.04.16.09.52.23;	author pwombwel;	state Exp;
branches;
next	1.2;

1.2
date	97.12.10.16.31.28;	author pwombwel;	state Exp;
branches;
next	1.1;

1.1
date	97.09.03.14.10.44;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Finalisation fix, docs & header improvment
The error check on eventlib finalisation was reversed in sense, so no error returned before resetting the id_block and mask values.
Clarify eventlib's use of malloc() in its docs for reduced head scratching.
Add missing const qualifier to wimp_report_error() prototype.

Add some stripdepnd's so cleaning also restores the makefiles.

Version 0.26. Tagged as 'Libs-0_26'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   event.c
 * Purpose: event dispatching
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *          01-Apr-97: KJB/ADH: added call to deregister all handlers for a given object ID
 *          10-Dec-97: EPW: added event_dispatch, so the app can call Wimp_Poll directly, then later dispatch the event
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "debug.h"

#include "types.h"

#include "event.h"

#include "wimpevent.h"
#include "tbevent.h"
#include "wimpmsg.h"


static IdBlock     *event__id_block = NULL;
static unsigned int event__mask     = Wimp_Poll_NullMask;

/* ------------------------------------- dispatching events ------------------------------------ */

static _kernel_oserror *dispatch (int event_code, WimpPollBlock *poll_block, IdBlock *id_block)
{
    if (event_code == 0x200)
        return tbevent_dispatch (poll_block, id_block);
    else if (event_code == Wimp_EUserMessage || event_code == Wimp_EUserMessageRecorded)
        return wimpmsg_dispatch (poll_block, id_block);
    else
        return wimpevent_dispatch (event_code, poll_block, id_block);
}


_kernel_oserror *event_dispatch (int event_code, WimpPollBlock *poll_block)
{
    /* Allow an app to dispatch an event after a wimp_poll manually.
     * This is mainly required by Java, but could be applicable to
     * other apps...
     */
    return dispatch(event_code, poll_block, event__id_block);
}


extern _kernel_oserror *event_poll (int *event_code, WimpPollBlock *poll_block, void *poll_word)
{
    /*
     * poll the wimp, and pass the event to the dispatcher
     */

    _kernel_swi_regs regs;
    _kernel_oserror *e;
    WimpPollBlock temp_block;

    if (!poll_block) poll_block = &temp_block;

    regs.r[0] = (int)event__mask;
    regs.r[1] = (int)poll_block;
    regs.r[3] = (int)poll_word;

    if ((e = _kernel_swi (Wimp_Poll, &regs, &regs)) != NULL)
        return e;

    if (event_code) *event_code = regs.r[0];

    e = dispatch (regs.r[0], poll_block, event__id_block);

    return e;
}


extern _kernel_oserror *event_poll_idle (int *event_code, WimpPollBlock *poll_block, unsigned int earliest, void *poll_word)
{
    /*
     * poll the wimp, and pass the event to the dispatcher
     */
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    WimpPollBlock temp_block;

    if (!poll_block) poll_block = &temp_block;

    regs.r[0] = (int)event__mask;
    regs.r[1] = (int)poll_block;
    regs.r[2] = (int)earliest;
    regs.r[3] = (int)poll_word;

    if ((e = _kernel_swi (Wimp_PollIdle, &regs, &regs)) != NULL)
        return e;

    if (event_code) *event_code = regs.r[0];

    e = dispatch (regs.r[0], poll_block, event__id_block);

    return e;
}



/* ------------------------------------- registering/deregistering handlers ----------------------- */


/* wimp events */


_kernel_oserror *event_register_wimp_handler (int object_id, int event_code, WimpEventHandler handler, void *handle)
{
    return wimpevent_register_wimp_handler (object_id, event_code, handler, handle);
}

_kernel_oserror *event_deregister_wimp_handler (int object_id, int event_code, WimpEventHandler handler, void *handle)
{
    return wimpevent_deregister_wimp_handler (object_id, event_code, handler, handle);
}

_kernel_oserror *event_deregister_wimp_handlers_for_object (int object_id)
{
    return wimpevent_deregister_wimp_handlers_for_object(object_id);
}


/* toolbox events */

_kernel_oserror *event_register_toolbox_handler (int object_id, int event_code, ToolboxEventHandler handler, void *handle)
{
    return tbevent_register_toolbox_handler (object_id, event_code, handler, handle);
}


_kernel_oserror *event_deregister_toolbox_handler (int object_id, int event_code, ToolboxEventHandler handler, void *handle)
{
    return tbevent_deregister_toolbox_handler (object_id, event_code, handler, handle);
}

_kernel_oserror *event_deregister_toolbox_handlers_for_object (int object_id)
{
    return tbevent_deregister_toolbox_handlers_for_object(object_id);
}


/* wimp messages */

_kernel_oserror *event_register_message_handler (int msg_no, WimpMessageHandler handler, void *handle)
{
    return wimpmsg_register_message_handler (msg_no, handler, handle);
}


_kernel_oserror *event_deregister_message_handler (int msg_no, WimpMessageHandler handler, void *handle)
{
    return wimpmsg_deregister_message_handler (msg_no, handler, handle);
}



/* ------------------------------------- getting/setting poll mask -------------------------------- */

extern _kernel_oserror *event_set_mask (unsigned int mask)
{
    event__mask = mask;
    return NULL;
}

extern _kernel_oserror *event_get_mask (unsigned int *mask)
{
    if (mask != NULL)
        *mask = event__mask;
    return NULL;
}


/* ------------------------------------ initialisation/finalisation ----------------------------- */


extern _kernel_oserror *event_initialise (IdBlock *b)
{
    DEBUG debug_output ("event_initialise", "Initialising event system\n");

    if (b != NULL)
        event__id_block = b;

    return NULL;
}

extern _kernel_oserror *event_finalise (void)
{
    _kernel_oserror *e;

    e = wimpevent_finalise();
    if (e != NULL)
    {
        return e;
    }

    e = tbevent_finalise();
    if (e != NULL)
    {
        return e;
    }

    e = wimpmsg_finalise();
    if (e != NULL)
    {
        return e;
    }

    event__id_block = NULL;
    event__mask = Wimp_Poll_NullMask;

    return NULL;
}

@


1.5
log
@Added missing Wimp SWIs to wimp.h
Added missing HelpEnable message to wimp.h
Changed a hardwired '1' for the default event__mask to use symbolic name
instead.

Version 0.22. Tagged as 'Libs-0_22'
@
text
@d40 1
a40 1
static IdBlock     *event__id_block = 0;
d223 1
a223 1
    if (e == NULL)
d228 2
a229 2
    event__id_block = 0;
    event__mask = 1;
@


1.4
log
@  Added a finalisation function to EventLib.
Detail:
  Page 144 of the C/C++ manual says:
  "Events and message handlers are both held in application space. Application
  tasks therefore do not need to remove them on quitting, nor need they
  deregister them."
  However, this is not helpful for module tasks, where the list heads and
  other static variables are in the RMA, and therefore hold invalid values
  when re-entering the Desktop.
  To fix this, there is now a function event_finalise() which will remove
  all handlers and reinitialise all statics.
Admin:
  Builds, but not yet tested.

Version 0.16. Tagged as 'Libs-0_16'
@
text
@d41 1
a41 1
static unsigned int event__mask     = 1;
@


1.3
log
@Fixed compiler warning on event_dispatch() as pointed out by Andrew, who wants
eternal fame for discovering the problem.
@
text
@d193 1
a193 1
/* ---------------------------------------- initialisation -------------------------------------- */
d202 28
@


1.2
log
@Added event_dispatch() so the app can call Wimp_Poll directly, then later dispatch the event
@
text
@d62 1
a62 1
    dispatch(event_code, poll_block, event__id_block);
@


1.1
log
@Initial commit
@
text
@d20 1
a44 1

d53 10
@
