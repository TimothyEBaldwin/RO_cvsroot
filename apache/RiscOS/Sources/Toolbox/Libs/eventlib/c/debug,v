head	1.1;
access;
symbols
	Libs-0_27-1:1.1
	Libs-0_27:1.1
	Libs-0_26:1.1
	Libs-0_25:1.1
	Libs-0_24:1.1
	Libs-0_23:1.1
	Libs-0_22:1.1
	Libs-0_21:1.1
	Libs-0_20:1.1
	Libs-0_19:1.1
	Libs-0_18:1.1
	RO_5_07:1.1
	Libs-0_17:1.1
	Libs-0_16:1.1
	Libs-0_15:1.1
	dellis_autobuild_BaseSW:1.1
	Libs-0_14:1.1
	Libs-0_13:1.1
	Libs-0_12:1.1
	Libs-0_11:1.1
	sbrodie_sedwards_16Mar2000:1.1
	Libs-0_10:1.1
	Libs-0_09:1.1
	dcotton_autobuild_BaseSW:1.1
	Libs-0_08:1.1
	Libs-0_07:1.1
	Libs-0_06:1.1
	Libs-0_05:1.1
	Libs-0_04:1.1
	Libs-0_03:1.1
	Libs-0_02:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	sbrodie_Toolbox_Ursula_231198:1.1
	Ursula_RiscPC:1.1.0.8
	Libs-0_01:1.1
	nicke_TBoxLibs_20-9-98:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	afrost_NC2_Generic:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	eventlib-0_05:1.1
	Ursula_bp:1.1
	Ursula:1.1.0.6
	Ursula_12May1998:1.1.0.4
	rthornb_UrsulaBuild_01May1998:1.1
	Daytona:1.1.0.2
	Daytona_bp:1.1
	sbrodie_Expresso_final_190298:1.1
	sbrodie_Toolbox_Libs_120298:1.1
	sbrodie_Expresso_BETA6_19980204:1.1;
locks; strict;
comment	@# @;


1.1
date	97.09.03.14.10.43;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial commit
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    debug.c
 * Purpose: debugging routines for the Toolbox
 * Author:  Ian Johnson
 * History: 16-Sep-93: IDJ:   created
 *
 */

#include "debug.h"

#include "swis.h"
#include "kernel.h"
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

#define HostFS_HostVDU   0x40100
#define HostFS_TubeVDU   0x40101
#define HostFS_WriteC    0x40102

static char output_buffer[256];
static char var_val[256] = "";
static char debug_var[256] = "";

static void host_out (char *format, ...);


void debug_dump (void *start, int length) {

   _kernel_swi_regs   regs;
   char               buffer[256];
   char              *address = start;

   regs.r[0] = (int)"Hex$Dump";
   regs.r[1] = (int)buffer;
   regs.r[2] = 255;
   regs.r[3] = 0;
   regs.r[4] = 3;

   _kernel_swi (OS_ReadVarVal, &regs, &regs);

   if (regs.r[2] == 0) return;
   {
       int            i, j, k, rows, columns;
       int            colour, word;
       char          *ptr,
                      chr;
       enum           { black, red, green, yellow, blue, magenta, cyan, white } colours;
       char           col[8][]   = { "\x011\x00", "\x011\x01", "\x011\x02", "\x011\x03",
                                     "\x011\x04", "\x011\x05", "\x011\x06", "\x011\x07"};

       buffer[regs.r[2]] = '\0'; /* set correct terminator for end of string */
       colour = (int) strstr (buffer, "colour");
       word   = (int) strstr (buffer, "word");
       if ((ptr = strstr (buffer,"R")) == NULL)
          rows = 24;
       else
          sscanf (ptr+1, "%d", &rows);
       if (rows<3) rows = 3;

       if ((ptr = strstr (buffer,"C")) == NULL)
          columns = 16;
       else
          sscanf (ptr+1, "%d", &columns);
       if (columns<4) columns = 4;

       ptr = address;

       while (ptr < address+length) {
          host_out ("\n\r%sAddress  ",colour?col[white]:"");
          for (j=0;j<columns;j += word?4:1)
             if (word)
                host_out ("    %02x   ",(((int)ptr+j) & 0xff));
             else
                host_out (" %02x",(((int)ptr+j) & 0xff));
          host_out ("  Characters\n\r");
          for (i=0;i<rows-2;i++) {
             host_out ("%s%08x%s ",colour?col[cyan]:"",(int)ptr,colour?col[red]:"");
             for (j=0;j<columns;j += word?4:1) {
                if (ptr+j >= address+length) break;
                if (word)
                   host_out (" %08x",*((int *)(ptr+j)));
                else
                   host_out (" %02x",*(ptr+j));
            }
             if (j < columns)
                for (k=0;k<columns-j;k += word?4:1)
                   host_out (word?"         ":"   ");
             host_out ("  %s",colour?col[magenta]:"");
             for (j=0;j<columns;j++) {
                if (ptr+j >= address+length) break;
                chr = *(ptr+j);
                host_out ("%s%c%s",(chr<32?(colour?col[white]:""):""),(chr<32?'.':chr),(chr<32?(colour?col[magenta]:""):""));
             }
             ptr += j;
             host_out ("\n\r");
             if (ptr >= address+length) break;
          }
       }
   host_out ("\x014");
   }
}

void host_out (char *format, ...) {

   va_list args;
   char *ptr, buffer[1024];
   _kernel_swi_regs regs;

   va_start (args, format);

   vsprintf (buffer, format, args);

   ptr = buffer;

   while (*ptr != '\0') {
      regs.r[0] = *ptr;
      _kernel_swi (HostFS_WriteC, &regs, &regs);
      ptr++;
   }
   va_end (args);
}


extern void debug_set_var_name (char *var_name)
{
    strcpy (debug_var, var_name);
}


extern void debug_output (char *allow, char *string, ...)
{
    /*
     * Function to output the given variable list down the tube.  String is a
     * printf format string.  String is only printed if the given allow string
     * appears in the system variable debug_var
     *
     */

    _kernel_swi_regs regs;
    _kernel_oserror *e;
    va_list args;
    char *p;

    va_start(args, string);

    regs.r[0] = (int)debug_var;
    regs.r[1] = (int)var_val;
    regs.r[2] = 255;
    regs.r[3] = 0;
    regs.r[4] = 3;

    _kernel_swi (OS_ReadVarVal, &regs, &regs);
    var_val[regs.r[2]] = '\0';

    if ((strstr (var_val, allow) != NULL) || !strcmp (allow, "force"))
    {
        vsprintf (output_buffer, string, args);

        for (p = output_buffer; *p != '\0'; p++)
        {
            if ((*p >= ' ' && *p <= '~') || *p == '\n')
                regs.r[0] = (int)*p;
            else
                regs.r[0] = '*';
            _kernel_swi (HostFS_WriteC, &regs, &regs);
            if (*p == '\n')
            {
                regs.r[0] = '\r';
                _kernel_swi (HostFS_WriteC, &regs, &regs);
            }
        }
    }

    va_end(args);
}
@
