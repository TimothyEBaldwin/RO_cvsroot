head	1.1;
access;
symbols
	Libs-0_27-1:1.1
	Libs-0_27:1.1
	Libs-0_26:1.1
	Libs-0_25:1.1
	Libs-0_24:1.1
	Libs-0_23:1.1
	Libs-0_22:1.1
	Libs-0_21:1.1
	Libs-0_20:1.1
	Libs-0_19:1.1
	Libs-0_18:1.1
	RO_5_07:1.1
	Libs-0_17:1.1
	Libs-0_16:1.1
	Libs-0_15:1.1
	dellis_autobuild_BaseSW:1.1
	Libs-0_14:1.1
	Libs-0_13:1.1
	Libs-0_12:1.1
	Libs-0_11:1.1
	sbrodie_sedwards_16Mar2000:1.1
	Libs-0_10:1.1
	Libs-0_09:1.1
	dcotton_autobuild_BaseSW:1.1
	Libs-0_08:1.1
	Libs-0_07:1.1
	Libs-0_06:1.1
	Libs-0_05:1.1
	Libs-0_04:1.1
	Libs-0_03:1.1
	Libs-0_02:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	sbrodie_Toolbox_Ursula_231198:1.1
	Ursula_RiscPC:1.1.0.8
	Libs-0_01:1.1
	nicke_TBoxLibs_20-9-98:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	afrost_NC2_Generic:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	Ursula_bp:1.1
	Ursula:1.1.0.6
	Ursula_12May1998:1.1.0.4
	rthornb_UrsulaBuild_01May1998:1.1
	Daytona:1.1.0.2
	Daytona_bp:1.1
	sbrodie_Expresso_final_190298:1.1
	sbrodie_Toolbox_Libs_120298:1.1
	sbrodie_Expresso_BETA6_19980204:1.1;
locks; strict;
comment	@# @;


1.1
date	97.09.19.13.11.53;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Transferred from Aquarius SrcFiler mount.  Changed build structure to fit Renaissance.  Updated header files where appropriate (for nested Wimp etc.).
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * h.addmethod
 */
 
#ifndef __addmethod_h
#define __addmethod_h


/*****************************************************
 * Typedefs                                          *
 *****************************************************/
 
typedef struct
{
  char var_type[30];
  char var_name[30];
  BOOL ptr;
} AddMethodRegister;

#define RegisterSet_r0 (1u<<0)
#define RegisterSet_r1 (1u<<1)
#define RegisterSet_r2 (1u<<2)
#define RegisterSet_r3 (1u<<3)
#define RegisterSet_r4 (1u<<4)
#define RegisterSet_r5 (1u<<5)
#define RegisterSet_r6 (1u<<6)
#define RegisterSet_r7 (1u<<7)
#define RegisterSet_r8 (1u<<8)
#define RegisterSet_r9 (1u<<9)


typedef struct
{
  unsigned int regs_set; /*-- flags word as above --*/

  AddMethodRegister r0;
  AddMethodRegister r1;
  AddMethodRegister r2;
  AddMethodRegister r3;
  AddMethodRegister r4;
  AddMethodRegister r5;
  AddMethodRegister r6;
  AddMethodRegister r7;
  AddMethodRegister r8;
  AddMethodRegister r9;  
} AddMethodRegisterSet;
    


typedef struct
{
  char method_name[30];
  char source_file[30];  
  char description[80];
  
  /*-- register blocks --*/
  
  AddMethodRegisterSet input;
  AddMethodRegisterSet output;
  
} AddMethodBlock;


/*-- update function --*/

typedef void (*AddMethodFunc)(BOOL new, AddMethodBlock *method, void *handle);



/*****************************************************
 * Functions                                         *
 *****************************************************/

/*
 * Name    : addmethod_close
 * Desc    : closes the addmethod window and free's any workspace
 * Parms   : none
 * Returns : none
 */
 
extern void addmethod_close ( void );


/*
 * Name    : addmethod_show
 * Desc    : shows a window for editing a method
 * Parms   : AddMethodBlock *edit - pointer to method to edit
 *           AddMethodFunc func   - update function
 *           void         *handle - user defined handle
 * Returns : True or False on result
 */
 
extern BOOL addmethod_show ( AddMethodBlock *edit, AddMethodFunc func, void *handle );



/*
 * Name    : addmethod_show_new
 * Desc    : shows the window for adding a new method
 * Parms   : AddMethodFunc func   - update function
 *           void         *handle - user defined handle
 * Returns : True or False on result
 */
 
extern BOOL addmethod_show_new ( AddMethodFunc func, void *handle );


/*
 * Name    : addmethod_init
 * Desc    : inits the 'addmethod' module
 * Parms   : none
 * Returns : none
 */ 

extern void addmethod_init ( void );


#endif
@
