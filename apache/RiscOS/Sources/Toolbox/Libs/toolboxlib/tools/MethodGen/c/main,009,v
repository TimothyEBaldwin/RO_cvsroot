head	1.1;
access;
symbols
	Libs-0_27-1:1.1
	Libs-0_27:1.1
	Libs-0_26:1.1
	Libs-0_25:1.1
	Libs-0_24:1.1
	Libs-0_23:1.1
	Libs-0_22:1.1
	Libs-0_21:1.1
	Libs-0_20:1.1
	Libs-0_19:1.1
	Libs-0_18:1.1
	RO_5_07:1.1
	Libs-0_17:1.1
	Libs-0_16:1.1
	Libs-0_15:1.1
	dellis_autobuild_BaseSW:1.1
	Libs-0_14:1.1
	Libs-0_13:1.1
	Libs-0_12:1.1
	Libs-0_11:1.1
	sbrodie_sedwards_16Mar2000:1.1
	Libs-0_10:1.1
	Libs-0_09:1.1
	dcotton_autobuild_BaseSW:1.1
	Libs-0_08:1.1
	Libs-0_07:1.1
	Libs-0_06:1.1
	Libs-0_05:1.1
	Libs-0_04:1.1
	Libs-0_03:1.1
	Libs-0_02:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	sbrodie_Toolbox_Ursula_231198:1.1
	Ursula_RiscPC:1.1.0.8
	Libs-0_01:1.1
	nicke_TBoxLibs_20-9-98:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	afrost_NC2_Generic:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	Ursula_bp:1.1
	Ursula:1.1.0.6
	Ursula_12May1998:1.1.0.4
	rthornb_UrsulaBuild_01May1998:1.1
	Daytona:1.1.0.2
	Daytona_bp:1.1
	sbrodie_Expresso_final_190298:1.1
	sbrodie_Toolbox_Libs_120298:1.1
	sbrodie_Expresso_BETA6_19980204:1.1;
locks; strict;
comment	@# @;


1.1
date	97.09.19.13.11.32;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Transferred from Aquarius SrcFiler mount.  Changed build structure to fit Renaissance.  Updated header files where appropriate (for nested Wimp etc.).
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Name  :  Main.c
 * Desc  :  main code for method generating application
 * Author:  James Bye
 * Date  :  10-Jun-1994
 */
 
/*-- from CLib --*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"


/*-- from RISC_OSLib --*/

#include "wimp.h"        /*  access to WIMP SWIs                      */
#include "wimpt.h"       /*  wimp task facilities                     */
#include "win.h"         /*  registering window handlers              */
#include "event.h"       /*  poll loops, etc                          */
#include "baricon.h"     /*  putting icon on icon bar                 */
#include "sprite.h"      /*  sprite operations                        */
#include "werr.h"        /*  error reporting                          */
#include "res.h"         /*  access to resources                      */
#include "resspr.h"      /*  sprite resources                         */
#include "flex.h"        /*  dynamic mem alloc from WIMP              */
#include "template.h"    /*  reading in template file                 */
#include "bbc.h"         /*  olde-style graphics routines             */
#include "colourtran.h"  /*  interface to colour translation module   */
#include "os.h"          /*  low-level RISCOS access                  */
#include "dbox.h"        /*  dialogue box handling                    */
#include "saveas.h"      /*  data export from dbox by icon dragging   */
#include "visdelay.h"    /*  show the hourglass for delay             */
#include "print.h"       /*  printing bits                            */

#define TRACE 0
#include "trace.h"


/*-- from my headers --*/

#include "newclass.h"
#include "methodlist.h"
#include "addmethod.h"
#include "datafile.h"
#include "codegen.h"


/**************************************************
 * Definitions                                    *
 **************************************************/

#define m_Iconbar_Title  "MethodGen" 
#define m_Iconbar_Hits   ">Info,Quit"
#define m_Iconbar_Info   1
#define m_Iconbar_Quit   2


/**************************************************
 * Static variables                               *
 **************************************************/
 
static menu iconbar_menu;

static char *version_string = "0.13 (17-Aug-1994)\0";


/**************************************************
 * Static functions                               *
 **************************************************/
 
/*
 * shows prog info
 */
 
static void show_prog_info ( void )
{
dbox d = dbox_new("info");

  dbox_show(d);
  dbox_setfield(d,4,version_string);
  dbox_fillin(d);
  dbox_dispose(&d);
}



#define i_DCExit_Text      0
#define i_DCExit_Discard   1
#define i_DCExit_Cancel    2

/*
 * shows the exit warning box (if it needs to)
 * (returns TRUE if you can exit safely)
 */
 
static BOOL exit_warn ( void )
{
BOOL do_exit = TRUE;
int f;

  if(methodlist_any_edited())
  {
  dbox d = dbox_new("dc_exit");
  
    dbox_show(d);
    dbox_setfield(d,i_DCExit_Text,"Some methods have been edited");
    f = dbox_fillin(d);
    dbox_dispose(&d);
    if(f == i_DCExit_Discard)
      do_exit = TRUE;
    else
      do_exit = FALSE;
  }
  
  return(do_exit);
}



/*
 * menu handler
 */
 
static void iconbar_menu_events ( void *handle, char *hit )
{
  handle = handle;
  
  switch(hit[0])
  {
    case m_Iconbar_Info   : show_prog_info();
                            break;                      
    case m_Iconbar_Quit   : if(exit_warn())
                              exit(0);
                            break;
  }
}



/*
 * iconbar click proc
 */
 
static void click_proc ( wimp_i i )
{
NewClassBlock *nclass;

  i = i;
  
  /*-- show new class window --*/
  
  if((nclass = newclass_show()) != NULL)
  {
    methodlist_show(nclass,NULL);
  }
}


/*
 * does the loading of a file
 */
 
static void load_file ( char *filename )
{
NewClassBlock *nclass;

  /*-- allocate space for a new class --*/
  
  if((nclass = malloc(sizeof(NewClassBlock))) == NULL)
  {
    werr(0,"Unable to allocate memory for new class");
  }
  else
  {
    /*-- load the file --*/
    
    nclass->methods = NULL;
    
    if(datafile_load(filename,nclass))
    {
      methodlist_show(nclass,filename);
    }
  }
}



/*
 * unknown loader for the iconbar
 */

static BOOL unknown_events ( wimp_eventstr *e, void *handle )
{                                          
  handle = handle;

  switch(e->e)
  {
    case wimp_ESEND        :
    case wimp_ESENDWANTACK :

      switch(e->data.msg.hdr.action)
      {
         case wimp_MDATALOAD :
         case wimp_MDATASAVE :
         case wimp_MDATAOPEN :

           if(e->data.msg.data.dataload.type == 0xFAD)
           {           
             wimp_msgstr msg;

                load_file(e->data.msg.data.dataload.name);

                /*-- acknowledge the message --*/

                msg = e->data.msg;
                msg.hdr.your_ref = e->data.msg.hdr.my_ref;
                msg.hdr.action = wimp_MDATALOADOK;
                wimp_sendmessage(wimp_ESEND,&msg,e->data.msg.hdr.task);

                return(TRUE);
           }
      }
  }                          
  return(FALSE);
}




/*
 * loader for the iconbar
 */

static void iconbar_loader ( wimp_eventstr *e, void *handle )
{
  handle = handle;

  switch(e->e)
  {
    case wimp_ESEND        :
    case wimp_ESENDWANTACK :

      switch(e->data.msg.hdr.action)
      {
         case wimp_MDATALOAD :
         case wimp_MDATASAVE :
         case wimp_MDATAOPEN :

           if(e->data.msg.data.dataload.type == 0xFAD)
           {
             load_file(e->data.msg.data.dataload.name);
           }
      }
  }
}



/**************************************************
 * Main C function                                *
 **************************************************/

int main ( int argc, char *argv[] )
{  
BOOL cli = FALSE;
BOOL load = FALSE;
char options[100];

  trace_on();
  
  /*-- check the options flag  --*/
  
  _kernel_getenv("MethodGen$Options",options,100);  
  tracef1("Options string is '%s'\n",options);
  
  if(options[0] == 'a')
    codegen_set_veneer_type(TRUE);
  else
    codegen_set_veneer_type(FALSE);
    
  /*-- check command line arguments --*/
  
  tracef1("Argc = %d\n",argc);
  
  if(argc > 1)
  {
    tracef1("Argv1 = '%s'\n",argv[1]);
    if(strncmp(argv[1],"-nd",3) == 0)
    {
      tracef0("Non-desktop mode\n");
      cli = TRUE;
      
      /*-- process command line action here --*/
      
      printf("Command line operation not currently supported\n");
    }
    else
    {
      cli = FALSE;
      load = TRUE;
    }
  }
  
  /*-- do all wimp stuff etc... if we are not running from CLI --*/
  
  if(!cli)
  {
    /*-- init ourselves with the wimp --*/

    wimpt_init("Method Generator");
    res_init("MethodGen");
    resspr_init();
    flex_init();
    template_init();
    dbox_init();
    visdelay_init();
    
    event_setmask(wimp_EMPTRLEAVE | wimp_EMPTRENTER);
  
    _kernel_register_slotextend(flex_budge);
  
    addmethod_init();
    methodlist_init();
  
    
    /*-- see if we need to load something --*/
    
    if(load)
    {
      load_file(argv[1]);
    }
  
    /*-- place the icon on the iconbar --*/

    baricon("!MethodGen",(int) resspr_area(),click_proc);
    
    /*-- add a loader to the iconbar --*/
    
    win_register_event_handler(win_ICONBARLOAD,iconbar_loader,NULL);

    /*-- register an unknown event handler so that we can pick --*/
    /*-- our files when the are double clicked on              --*/

    win_add_unknown_event_processor(unknown_events,NULL);
    
    /*-- create & attach the menu to the iconbar --*/
                
    iconbar_menu = menu_new(m_Iconbar_Title,m_Iconbar_Hits);
    event_attachmenu(win_ICONBAR,iconbar_menu,iconbar_menu_events,NULL);

    /*-- inifinite polling loop --*/

    while(TRUE)
      event_process();
  }
  
  return(0);
}

/*-- end --*/
@
