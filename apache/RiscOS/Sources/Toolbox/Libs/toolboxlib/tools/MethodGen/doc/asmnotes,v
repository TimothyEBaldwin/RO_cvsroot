head	1.1;
access;
symbols
	Libs-0_27-1:1.1
	Libs-0_27:1.1
	Libs-0_26:1.1
	Libs-0_25:1.1
	Libs-0_24:1.1
	Libs-0_23:1.1
	Libs-0_22:1.1
	Libs-0_21:1.1
	Libs-0_20:1.1
	Libs-0_19:1.1
	Libs-0_18:1.1
	RO_5_07:1.1
	Libs-0_17:1.1
	Libs-0_16:1.1
	Libs-0_15:1.1
	dellis_autobuild_BaseSW:1.1
	Libs-0_14:1.1
	Libs-0_13:1.1
	Libs-0_12:1.1
	Libs-0_11:1.1
	sbrodie_sedwards_16Mar2000:1.1
	Libs-0_10:1.1
	Libs-0_09:1.1
	dcotton_autobuild_BaseSW:1.1
	Libs-0_08:1.1
	Libs-0_07:1.1
	Libs-0_06:1.1
	Libs-0_05:1.1
	Libs-0_04:1.1
	Libs-0_03:1.1
	Libs-0_02:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	sbrodie_Toolbox_Ursula_231198:1.1
	Ursula_RiscPC:1.1.0.8
	Libs-0_01:1.1
	nicke_TBoxLibs_20-9-98:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	afrost_NC2_Generic:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	Ursula_bp:1.1
	Ursula:1.1.0.6
	Ursula_12May1998:1.1.0.4
	rthornb_UrsulaBuild_01May1998:1.1
	Daytona:1.1.0.2
	Daytona_bp:1.1
	sbrodie_Expresso_final_190298:1.1
	sbrodie_Toolbox_Libs_120298:1.1
	sbrodie_Expresso_BETA6_19980204:1.1;
locks; strict;
comment	@# @;


1.1
date	97.09.19.13.11.47;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Transferred from Aquarius SrcFiler mount.  Changed build structure to fit Renaissance.  Updated header files where appropriate (for nested Wimp etc.).
@
text
@Notes on assembler veneers
==========================

1. Saving on stack
------------------

The routine will need to save the link register (lr) on the stack at entry to
the function.  It will also need save all the 'variable' registers on the
stack that are used.  For example, if the routine used variable register 1
and variable register 2 (v1 and v2) for input (or output) then the following
would be required :-

	STMFD	sp!,{lr,v1,v2}
	.
	.
	.
	.
	LDMFD	sp!,{lr,v1,v2}
	
	

2. Loading args off stack
-------------------------

Arguments v1-v6 are stored on the stack.  The way they are loaded into
registers before the SWI is called is as follows (where N is the argument
number) :-

	LDR	vN,[sp,NumberRegsPutOnStack + (N * 4)]
	
for example :-

	STMFD	sp!,{lr,v1,v2}
	LDR	v1,[sp,#12]
	LDR	v2,[sp,#16]
	
	
3. Saving args (not on stack)
-----------------------------

For return arguments a1-a2 then stack access is not necessary.  The saving of
args after the SWI call is very simple.  For example, for saving argument 2
(a2) with the contents of R0, the store is done as follows :-

	TEQ	a2,#0
	STRNE	r0,[a2]
	
	
4. Saving args (when  on stack)
-------------------------------

For return arguments v1-v6, then the arguments are on the stack.  Hence, the
pointer argument will need to be loaded from the stack before a save can be
made. For example, for saving variable 1 (v1) with the contents of R0, the
store is done as follows :-

	LDR	lr,[sp,#8]
	TEQ	lr,#0
	STRNE	r0,[lr]
	
	
5. Routine exit
---------------

The way that a routine is exited depends on whether or not an error has
ocurred from the calling of the SWI.  The exit part of the routine will look
like the following :-

		SWI	Toolbox_ObjectMiscOp
		BVS	%F99
		.
		.
		.
		.
		.
		MOV	r0,#0
	99	LDMFD	sp!,{lr,.......}^
	@
