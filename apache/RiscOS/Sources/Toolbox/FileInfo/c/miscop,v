head	4.3;
access;
symbols
	FileInfo-0_21:4.3
	FileInfo-0_20:4.2
	FileInfo-0_19:4.1
	RO_5_07:4.1
	FileInfo-0_18:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	Ursula:4.1.0.6
	Ursula_bp:4.1
	FileInfo-0_17:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_FileInfo_0_15:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2018.09.09.20.03.15;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	RS5A0ZIvAmXZ2tRA;

4.2
date	2015.08.18.21.23.43;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	kq6ZSETQ4NUGqNxy;

4.1
date	96.11.05.09.22.08;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.08;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.40.40;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.12.01;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.36.17;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Skip check of buffer pointer
The buffer pointer has already been used several times, so can be freed without another check.
Found by cppcheck.

Version 0.21. Tagged as 'FileInfo-0_21'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   miscop.c
 * Purpose: miscellanaous operations on a FileInfo Object
 * Author:  Timothy G Roddis
 * History: 8-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects/toolbox.h"
#include "objects/fileinfo.h"
#include "objects/window.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

_kernel_oserror *fileinfo_get_modified      (_kernel_swi_regs *r);
_kernel_oserror *fileinfo_get_file_size     (_kernel_swi_regs *r);
_kernel_oserror *fileinfo_set_date          (_kernel_swi_regs *r);

#define BufferSize         256
#define MAX_MISCOP_METHODS  13
/*
static _kernel_oserror *(*fileinfo_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   fileinfo_get_window_id,
   fileinfo_set_modified,
   fileinfo_get_modified,
   fileinfo_set_file_type,
   fileinfo_get_file_type,
   fileinfo_set_filename,
   fileinfo_get_filename,
   fileinfo_set_file_size,
   fileinfo_get_file_size,
   fileinfo_set_date,
   fileinfo_get_date,
   fileinfo_set_title,
   fileinfo_get_title
};
*/
extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FileInfoInternal     *internal         = (FileInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   int                   method    = user_regs->r[2];

   DEBUG debug_output ("y","FileInfo: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(FileInfo_NoSuchMiscOpMethod,1,method);
   }
   switch (method) {
      case FileInfo_GetWindowID:
         user_regs->r[0] = (int) internal->sub_object_id;
         return NULL;
      case FileInfo_SetModified:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = DisplayField_SetValue;
         regs.r[3] = FileInfo_DisplayField_Modified;
         regs.r[4] = (int) ((user_regs->r[3])?global_yes:global_no);

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FileInfo_GetModified:
         return fileinfo_get_modified (r);
      case FileInfo_SetFileType:
         return aux_set_file_type (internal, user_regs->r[3]);
      case FileInfo_GetFileType:
         user_regs->r[0] = internal->filetype;
         return NULL;
      case FileInfo_SetFileName:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = DisplayField_SetValue;
         regs.r[3] = FileInfo_DisplayField_FileName;
         regs.r[4] = (user_regs->r[3])?(user_regs->r[3]):((int) global_untitled);

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FileInfo_GetFileName:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = DisplayField_GetValue;
         regs.r[3] = FileInfo_DisplayField_FileName;
         regs.r[4] = user_regs->r[3];
         regs.r[5] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[3] = regs.r[4];
         user_regs->r[4] = regs.r[5];

         return NULL;
      case FileInfo_SetFileSize:
         return aux_set_file_size (internal, user_regs->r[3]);
      case FileInfo_GetFileSize:
         return fileinfo_get_file_size (r);
      case FileInfo_SetDate:
         return fileinfo_set_date (r);
      case FileInfo_GetDate:
      {
         os_UTC               *utc              = (os_UTC *) user_regs->r[3];

         *utc = internal->utc;

         DEBUG debug_output ("m","FileInfo: utc = 0x%x, 0x%x\n", utc->low, utc->high);

         return NULL;
      }
      case FileInfo_SetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_SetTitle;
         regs.r[3] = user_regs->r[3];

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FileInfo_GetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_GetTitle;
         regs.r[3] = user_regs->r[3];
         regs.r[4] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         DEBUG if (user_regs->r[3]) debug_output ("m","FileInfo: title is '%s'",user_regs->r[3]);

         user_regs->r[4] = regs.r[4];

         return NULL;
   }
   IGNORE(t);

   return NULL;
}
_kernel_oserror *fileinfo_get_modified      (_kernel_swi_regs *r) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FileInfoInternal     *internal         = (FileInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   char                 *buffer;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_GetValue;
   regs.r[3] = FileInfo_DisplayField_Modified;
   regs.r[4] = 0;
   regs.r[5] = 0;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   if ((buffer = mem_alloc (regs.r[5])) == NULL)
      return make_error (FileInfo_AllocFailed, 0);

   regs.r[0] = 0;
   regs.r[4] = (int) buffer;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   DEBUG debug_output ("y","FileInfo: Modified? '%s'\n",buffer);

   if (!(strcmp (buffer,global_yes))) {
      user_regs->r[0] = 1;
   } else {
      user_regs->r[0] = 0;
   }

   /* IDJ: 6-Feb-95: bug-fix AQU-01197 - memory leak */
   mem_freek (buffer);

   return NULL;
}
_kernel_oserror *fileinfo_get_file_size     (_kernel_swi_regs *r) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FileInfoInternal     *internal         = (FileInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   char                 *buffer;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_GetValue;
   regs.r[3] = FileInfo_DisplayField_FileSize;
   regs.r[4] = 0;
   regs.r[5] = 0;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   if ((buffer = mem_alloc (regs.r[5])) == NULL)
      return make_error (FileInfo_AllocFailed, 0);

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_GetValue;
   regs.r[3] = FileInfo_DisplayField_FileSize;
   regs.r[4] = (int) buffer;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      goto clearup1;

   DEBUG debug_output ("m","FileInfo: filesize = '%s'\n",buffer);

   sscanf (buffer, "%d", &user_regs->r[0]);

   mem_freek (buffer);

   return NULL;

   clearup1:
      mem_freek (buffer);
      return e;
}

_kernel_oserror *fileinfo_set_date          (_kernel_swi_regs *r) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FileInfoInternal     *internal         = (FileInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   char                  buffer[BufferSize];

   internal->utc = * (os_UTC *) user_regs->r[3];

   regs.r[0] = -1;
   regs.r[1] = user_regs->r[3];
   regs.r[2] = (int) buffer;
   regs.r[3] = BufferSize;

   if ((e = _kernel_swi (Territory_ConvertStandardDateAndTime, &regs, &regs)) != NULL)
      return e;

   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_SetValue;

   regs.r[0] = 0;
   regs.r[3] = FileInfo_DisplayField_Date;
   regs.r[4] = (int) buffer;

   return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
}
@


4.2
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.20. Tagged as 'FileInfo-0_20'
@
text
@d224 1
a224 2
   if (buffer)
       mem_freek (buffer);
@


4.1
log
@Initial revision
@
text
@a30 1
#include "services.h"
d35 3
a37 3
#include "objects.toolbox.h"
#include "objects.fileinfo.h"
#include "objects.window.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
