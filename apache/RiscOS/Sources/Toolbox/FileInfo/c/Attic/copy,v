head	4.2;
access;
symbols
	RO_5_07:4.2
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	98.02.04.19.47.45;	author sbrodie;	state dead;
branches;
next	4.1;

4.1
date	96.11.05.09.22.07;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.07;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.40.33;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.11.53;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.36.10;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   copy.c
 * Purpose: copy a FileInfo Object
 * Author:  TGR
 * History: 7-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.fileinfo.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "copy.h"


extern _kernel_oserror *copy_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

   /*
    * request to copy an object
    * R0 = 2
    * R1 = Object ID
    * R2 = internal handle returned when "src" Object was created
    * R3 = wimp task handle of caller (use to identify task descriptor)
    * R4 -> user regs R0-R9:
    *      R0 = flags
    *           bit 0 set => do not recursively copy the Object
    *      R1 = source Object ID
    */

   /*
    * The Toolbox has already checked that this is not just a copy
    * call for a shared Object which already exists.
    * We create a new Object, and add it to the list of Objects for this
    * task.
    * We need to remember the ObjectID passed to us by the Toolbox, so
    * that we can identify this Object if we are given an ID from the
    * client's "id block".
    */

#ifdef COPY_OBJECT
   _kernel_oserror   *e;
   _kernel_swi_regs   regs;
   FileInfoInternal  *internal       = (FileInfoInternal *) r->r[2],
                     *internalx;

   if ((internalx = mem_alloc (sizeof (FileInfoInternal))) == NULL)
      return make_error (FileInfo_AllocFailed, 0);

   memcpy (internalx, internal, sizeof (FileInfoInternal));

   regs.r[0] = 0;
   regs.r[1] = (int) internal->sub_object_id;

   if ((e = _kernel_swi (Toolbox_CopyObject, &regs, &regs)) != NULL)
      goto clearup1;

   internalx->sub_object_id = (ObjectID) regs.r[0];

   internalx->forward                = t->object_list;
   internalx->backward               = t->object_list->backward;
   t->object_list->backward->forward = internalx;
   t->object_list->backward          = internalx;

   r->r[0] = (int) internalx;

   return NULL;

   clearup1:
      mem_freek (internalx);
      return e;
#else
   return NULL;
#endif
}

@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
