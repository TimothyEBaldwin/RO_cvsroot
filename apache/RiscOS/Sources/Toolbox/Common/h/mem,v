head	4.2;
access;
symbols
	Common-0_26-1:4.2
	Common-0_26:4.2
	Common-0_25:4.2
	Common-0_24:4.2
	Common-0_23:4.2
	Common-0_22:4.2
	Common-0_21:4.2
	Common-0_20:4.2
	Common-0_19:4.2
	Common-0_18:4.2
	Common-0_17:4.2
	Common-0_16:4.2
	Common-0_15:4.2
	Common-0_14:4.2
	RO_5_07:4.2
	Common-0_13:4.2
	Common-0_12:4.2
	dellis_autobuild_BaseSW:4.2
	Common-0_11:4.2
	Common-0_10:4.2
	Common-0_09:4.2
	Common-0_08:4.2
	sbrodie_sedwards_16Mar2000:4.2
	Common-0_07:4.2
	Common-0_06:4.2
	Common-0_05:4.2
	dcotton_autobuild_BaseSW:4.2
	Common-0_04:4.2
	Common-0_03:4.2
	Common-0_02:4.2
	Common-0_01:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.4
	nicke_TBox_Common_20-9-98:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	sbrodie_commonlib_110698:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Toolbox_Common_120298:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	98.02.04.19.47.26;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.21.53;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.21.53;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.39.26;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.09.43;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.35.03;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:        mem.h
 * Purpose:     memory allocation in the Toolbox
 * Author:      Ian Johnson
 * History:     6-Aug-93: IDJ: created
 */



/*
 * This is a central memory allocation place for the Toolbox core module.
 * A doubly-linked list of all allocated blocks is kept (maybe remove this
 * if using too much memory!).
 * To enable debugging of memory allocation, the calling functions should be
 * compiled without -ff, so that fn names are in the code area.  Compile
 * this code with -DDEBUG_MEMORY.
 * Memory tracing is turned on by setting the letter 'm' in the central
 * debug string (got by calling debugging('m')).
 *
 * Calling code will always call the debugging versions eg
 *       b = memory_allocate (1024, &fn, "some extra info");
 * Macros ensure the debugging code is removed.
 *
 */

#ifndef __mem_h
#define __mem_h


extern void mem_free_all (void);
extern void mem_init (void);



extern void mem_i_am_the_toolbox (void);

/*
 * Description:  for internal use by the Toolbox module ONLY.
 *               in order to enable it to initialise the mem library
 *               correctly.
 *
 * Parameters:   None
 *
 * Returns:      void
 *
 */



#define CHECK_HEAP       (1u << 0)
#define CHECK_NONZERO    (1u << 1)



#ifdef DEBUG_MEMORY

extern void mem_chk (void *p, unsigned int flags, int line, char *file);
#define mem_chk(p,f) mem_chk ((void *)p, f, __LINE__, __FILE__)

/*
 * Description:  checks a memory pointer.
 *
 * Parameters:   p      - the pointer
 *               flags  - what sort of checking
 *               line   - line number in source file
 *               file   - source filename
 *
 * Returns:      void
 *
 */


extern void mem_print_list (void);

/*
 * Description:  prints out all allocated memory blocks.
 *
 * Parameters:   none
 *
 * Returns:      void
 *
 */

extern void mem_free (void *block, char *msg);

/*
 * Description:  frees a block of memory.
 *
 * Parameters:   void *block  - the block to be freed
 *               char *msg    - informational message from caller
 *
 * Returns:      void
 *
 */

extern void *mem_allocate(unsigned int size, char *tag);

/*
 * Description:  allocates block of memory of 'size' bytes, with debug
 *               info - size, name of calling fn, and tag.
 *
 * Parameters:   unsigned int size  - size of block to be allocated
 *               char *tag          - extra info to be stored in block
 *                                    (eg line nunber of caller?)
 *
 * Returns:      pointer to allocated block (without header).
 *
 */

extern void *mem_extend(void *p, int by);

/*
 * Description:  extends an existing block block of memory by "by" bytes,
 *               with debug info.
 *
 * Parameters:   void *p   - the previously allocated block
 *               int by    - amount of bytes to extend by
 *
 * Returns:      pointer to extended block (without header).
 *
 */


#else

#define mem_print_list()  ((void)0)
#define mem_chk(p,f) ((void)0)

extern void mem_free (void *block);
#define mem_free(a,b) mem_free(a)

/*
 * Description:  frees a block of memory.
 *
 * Parameters:   void *block  - the block to be freed
 *
 * Returns:      void
 *
 */

extern void *mem_allocate (unsigned int size);
#define mem_allocate(a,b) mem_allocate(a)

/*
 * Description:  allocates block of memory of 'size' bytes.
 *
 * Parameters:   unsigned int size  - size of block to be allocated
 *
 * Returns:      pointer to allocated block (without header).
 *
 */

extern void *mem_extend(void *p, int by);
#define mem_extend(a,b) mem_extend(a,b)

/*
 * Description:  extends an existing block block of memory by "by" bytes.
 *
 * Parameters:   void *p   - the previously allocated block
 *               int by    - amount of bytes to extend by
 *
 * Returns:      pointer to extended block (without header).
 *
 */

#endif

#endif
@


4.1
log
@Initial revision
@
text
@d15 1
a15 1
/* File:        mem.h 
d23 1
a23 1
/* 
d44 17
d126 1
a126 1
 * Description:  extends an existing block block of memory by "by" bytes, 
d138 1
a138 1
   
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
