head	4.1;
access;
symbols
	Common-0_26-1:4.1
	Common-0_26:4.1
	Common-0_25:4.1
	Common-0_24:4.1
	Common-0_23:4.1
	Common-0_22:4.1
	Common-0_21:4.1
	Common-0_20:4.1
	Common-0_19:4.1
	Common-0_18:4.1
	Common-0_17:4.1
	Common-0_16:4.1
	Common-0_15:4.1
	Common-0_14:4.1
	RO_5_07:4.1
	Common-0_13:4.1
	Common-0_12:4.1
	dellis_autobuild_BaseSW:4.1
	Common-0_11:4.1
	dcotton_autobuild_BaseSW:4.1
	Common-0_10:4.1
	Common-0_09:4.1;
locks; strict;
comment	@# @;


4.1
date	2000.05.04.12.14.54;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.1
log
@  Updated common Toolbox Makefile fragment.
  Extra shared facilities for object modules.
  Debug support improved.
Detail:
  New common operations for Toolbox object modules have been abstracted
    into this component in order to simplify the object modules.
  Debugging services made common to all modules and now uses DebugLib.
  Common Makefile fragment now exported with correct rules for ROM builds
    as well as RAM builds, and (new in this version), DebugLib RAM builds.
    As a result, all object modules now have debug versions available.
Admin:
  Requires BuildSys 1.92 or later (RiscOS/BuildSys; tag BuildSys-1_92)
  Requires Library 0.41 or later (RiscOS/Library; tag Library-0_41)
  Required by any Toolbox object module dated 4th May 2000 or later.

Version 0.09. Tagged as 'Common-0_09'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Toolbox common library (objmodule.h)
 *
 * useful utilities for toolbox modules
 *
 */
#ifndef common_objmodule_h
#define common_objmodule_h

/* Register with the Toolbox module as an object module.
 *
 * Bit 30 of the flags is used to signal that failure to register with the toolbox module
 * on the grounds that the SWI call failed with a SWI not known error should be reported.
 * When this bit is not set, such faults will NOT be reported.  This allows object modules
 * to sleep until such time as a Toolbox modules comes along.
 */
enum {
  objmodule_REPORT_BAD_SWI = 1U<<30
};
extern _kernel_oserror *objmodule_register_with_toolbox(int /*flags*/, int /*class*/, int /*swi*/, const char * /*res*/);

extern _kernel_oserror *objmodule_deregister(int /*flags*/, int /*class*/);

/* Resource path initialisation */
extern void objmodule_ensure_path(const char *var, const char *default_setting);

/* ResourceFS registration/deregistration */
extern _kernel_oserror *objmodule_register_resources(int);
extern _kernel_oserror *objmodule_deregister_resources(int);

#endif
@
