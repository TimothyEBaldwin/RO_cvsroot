head	4.11;
access;
symbols
	Common-0_23:4.10
	Common-0_22:4.10
	Common-0_21:4.9
	Common-0_20:4.8
	Common-0_19:4.6
	Common-0_18:4.5
	Common-0_17:4.4
	Common-0_16:4.4
	Common-0_15:4.4
	Common-0_14:4.4
	RO_5_07:4.4
	Common-0_13:4.4
	Common-0_12:4.3
	dellis_autobuild_BaseSW:4.3
	Common-0_11:4.3
	Common-0_10:4.3
	Common-0_09:4.2
	dcotton_autobuild_BaseSW:4.3
	Common-0_08:4.1;
locks; strict;
comment	@# @;


4.11
date	2015.08.18.20.58.29;	author rsprowson;	state dead;
branches;
next	4.10;
commitid	1IkG9MPiJd73iNxy;

4.10
date	2013.09.10.06.48.25;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	MCmnO1cvzFaqjR4x;

4.9
date	2013.08.30.21.24.07;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	vErTnAYHmHIzvw3x;

4.8
date	2012.09.01.11.08.18;	author jlee;	state Exp;
branches;
next	4.7;
commitid	Zb2AT5VpqYYULOiw;

4.7
date	2012.05.03.08.34.23;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	jHD4npPD7K8gOf3w;

4.6
date	2012.02.05.19.18.22;	author jlee;	state Exp;
branches;
next	4.5;
commitid	4NyWCQo7tHsxc0Sv;

4.5
date	2012.02.04.12.10.20;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	WqeTO8mdL7JHRPRv;

4.4
date	2003.12.02.18.08.45;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2000.05.05.12.02.13;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.04.12.14.52;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	2000.04.17.14.57.07;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.11
log
@Minor header file adjustments
Everything TboxMake did can now be done with the makefiles in BuildSys.
Header file services.h was just a proxy for Global/Services.h.
style.h:
  Corrections to constants from the Style Guide. These two values are unused, so mainly academic.
messages.c/objmodule.c/string32.c:
  Unused services.h removed.

Version 0.24. Tagged as 'Common-0_24'
@
text
@# Common Makefile fragment for toolbox object modules
#
# $Id: TboxMake,v 4.10 2013/09/10 06:48:25 rsprowson Exp $
#

#
# Our aim if not known
#
TARGET ?= ${COMPONENT}

#
# Export Paths for Messages module
#
RESDIR = <resource$dir>.Resources2.${TARGET}

#
# Standard internal toolbox library and headers
#
TBOXINTLIBDIR = C:tboxlibint
TBOXINTLIB    = ${TBOXINTLIBDIR}.o.tboxlibm
TBOXINTHDR    = -I${TBOXINTLIBDIR}

#
# Build options
#
CFLAGS    += -zm -zps1 -ffah -D${SYSTEM}
CINCLUDES += ${TBOXINTHDR} -Itbox: -IC:
CDFLAGS   += -Ddebugging=1
ASDFLAGS  += -PD "debugging SETA 1"

#
# Libraries
#
include Makefiles:ModuleLibs
RAM_LIBS = ${TBOXINTLIB} ${EXTRARAMLIBS}
ROM_LIBS = ${TBOXINTLIB} ${EXTRAROMLIBS}

#
# Find the rest of the Makefile fragments for C modules
#
include Makefiles:StdTools
include Makefiles:DbgRules
include Makefiles:ModStdRule

#
# Toolbox modules hold just a Messages file, just a Res file or both.
# Thus we provide three rules, and the including makefile simply selects one
# or other of the rules as appropriate.
#
resources-messages: LocalRes:Messages
        ${MKDIR} ${RESDIR}
        ${CP} LocalRes:Messages ${RESDIR}.Messages ${CPFLAGS}

resources-res: LocalRes:Res
        ${MKDIR} ${RESDIR}
        ${CP} LocalRes:Res ${RESDIR}.Res ${CPFLAGS}

resources-both: LocalRes:Messages LocalRes:Res
        ${MKDIR} ${RESDIR}
        ${CP} LocalRes:Messages ${RESDIR}.Messages ${CPFLAGS}
        ${CP} LocalRes:Res      ${RESDIR}.Res      ${CPFLAGS}


#
# Provide defaults so that the rules below are valid
#
RAMMESSAGES .= unused.ram.messages
RAMRES      .= unused.ram.resources
RAMBOTH     .= unused.ram.both

#
# RAM builds require the resources in a ResourceFS registerable area
#
${RAMMESSAGES}: LocalRes:Messages
        resgen messages_file $@@ LocalRes:Messages Resources.${TARGET}.Messages

${RAMRES}: LocalRes:Res
        resgen res_file $@@ LocalRes:Res Resources.${TARGET}.Res

${RAMBOTH}: LocalRes:Messages LocalRes:Res
        resgen messages_file $@@ \
        LocalRes:Messages Resources.${TARGET}.Messages \
        LocalRes:Res Resources.${TARGET}.Res

#
# The clean rules are relatively similar too:
#
toolbox-clean:
        ${WIPE} o.* ${WFLAGS}
        ${WIPE} od ${WFLAGS}
        ${WIPE} aof ${WFLAGS}
        ${WIPE} rm ${WFLAGS}
        ${WIPE} linked ${WFLAGS}
        ${WIPE} map ${WFLAGS}

#
# Typically, the ROM and RAM modules will be identical except for main.c
# which will switch on the ROM symbol to not register resources.  We provide
# this rule generically here.
#
o.mainROM: main.c
        $(CC) ${CFLAGS} -DROM -o $@@ main.c

#
# Builds of modules
#
DBG_MODULE .= rm.D${TARGET}
DBG_OBJS   .= ${RAM_OBJS}
DBG_LIBS   .= ${RAM_LIBS} C:tboxlibint.o.debuglibm ${DEBUGLIBS} ${NET4LIBS}
ROM_MODULE .= aof.${TARGET}
ABS_MODULE .= linked.${TARGET}
RAM_MODULE .= rm.${TARGET}
DIRS       .= o._dirs

${DBG_MODULE}: ${DBG_OBJS} ${DBG_LIBS} ${CLIB} ${RAM_DEPEND} ${DIRS}
        ${LD} ${LDFLAGS} ${LDRAMFLAGS} -o $@@ -rmf ${DBG_OBJS} ${DBG_LIBS} ${CLIB}

${RAM_MODULE}: ${RAM_OBJS} ${RAM_LIBS} ${CLIB} ${RAM_DEPEND} ${DIRS}
        ${LD} ${LDFLAGS} ${LDRAMFLAGS} -o $@@ -rmf ${RAM_OBJS} ${ROM_LIBS} ${CLIB}

${ROM_MODULE}: ${ROM_OBJS} ${ROM_LIBS} ${ROM_DEPEND} ${DIRS}
        ${LD} ${LDFLAGS} ${LDLINKFLAGS} -o $@@ -aof ${ROM_OBJS} ${ROM_LIBS} ${ROMCSTUBS}

trace: ${DBG_MODULE} ${DIRS}
        @@echo ${COMPONENT}: debug module built

install: ${RAM_MODULE} ${DIRS}
        ${MKDIR} ${INSTDIR}
        ${CP} ${RAM_MODULE} ${INSTDIR}.${TARGET} ${CPFLAGS}
        @@${ECHO} ${COMPONENT}: ram module installed

all: ${RAM_MODULE} ${DIRS}
        @@${ECHO} ${COMPONENT}: ram module built

rom: ${ROM_MODULE} ${DIRS}
        @@${ECHO} ${COMPONENT}: rom module built

rom_link: ${DIRS} ${ROM_MODULE} ${C_ABSSYM}
        ${LD} ${LDFLAGS} ${LDLINKFLAGS} -o ${ABS_MODULE} -rmf -base ${ADDRESS} ${ROM_MODULE} ${C_ABSSYM} -Symbols ${ABS_MODULE}_sym
        ${CP} ${ABS_MODULE} ${LINKDIR}.${TARGET} ${CPFLAGS}
        ${CP} ${ABS_MODULE}_sym ${LINKDIR}.${TARGET}_sym ${CPFLAGS}
        @@${ECHO} ${COMPONENT}: rom_link complete

${DIRS}:
        ${MKDIR} od
        ${MKDIR} o
        ${MKDIR} rm
        ${MKDIR} linked
        ${MKDIR} aof
        ${TOUCH} $@@

EOFTboxMakefile=Common.TboxMake
# EOF
@


4.10
log
@For RAM targets reflect change from 4.8-4.9 in TboxMake
Resource areas now use ${TARGET} to match the other shared makefiles and the change made for the resources phase in revision 4.9.
Should fix problem with TextGadgets RAM version, where it was naming the area after the component name.

Version 0.22. Tagged as 'Common-0_22'
@
text
@d3 1
a3 1
# $Id: TboxMake,v 4.8 2012/09/01 11:08:18 jlee Exp $
@


4.9
log
@RESDIR derived from TARGET rather than COMPONENT
Matches CModule and AAsmModule shared makefiles.
Retagged as Common-0_21.
@
text
@d75 1
a75 1
        resgen messages_file $@@ LocalRes:Messages Resources.${COMPONENT}.Messages
d78 1
a78 1
        resgen res_file $@@ LocalRes:Res Resources.${COMPONENT}.Res
d82 2
a83 2
        LocalRes:Messages Resources.${COMPONENT}.Messages \
        LocalRes:Res Resources.${COMPONENT}.Res
@


4.8
log
@Generate symbols files during ROM builds
Detail:
  TboxMake - Toolbox modules will now generate a symbols file during the ROM link phase. The file will be copied to the modules install folder, allowing it to be easily picked up by debugging tools.
Admin:
  Tested with BCM2835, OMAP3 & Disc builds


Version 0.20. Retagged as 'Common-0_20'
@
text
@d3 1
a3 1
# $Id: TboxMake,v 4.7 2012/05/03 08:34:23 rsprowson Exp $
d14 1
a14 1
RESDIR = <resource$dir>.Resources2.${COMPONENT}
@


4.7
log
@Add install rule to shared TboxMake.
Fixes empty !System.310.Modules.Toolbox directory in recent PlingSystem builds.

Version 0.20. Tagged as 'Common-0_20'
@
text
@d3 1
a3 1
# $Id: TboxMake,v 4.6 2012/02/05 19:18:22 jlee Exp $
d139 1
a139 1
        ${LD} ${LDFLAGS} ${LDLINKFLAGS} -o ${ABS_MODULE} -rmf -base ${ADDRESS} ${ROM_MODULE} ${C_ABSSYM}
d141 1
@


4.6
log
@Fix toolbox modules to build from clean
Detail:
  TboxMake - The ${ROM_MODULE} target had a dependency against ${C_ABSSYM}, but the shared C library only exports that file during the rom_link phase, preventing the toolbox 'rom' phases from completing properly.
  Additionally the rom_link phase in TboxMake didn't have a dependency on ${ROM_MODULE}, so any changes to the module (or previous failure to build) would prevent the rom-linked version of the module from being created or updated properly.
Admin:
  Tested with building OMAP3Live from clean.
  ROM image built OK but untested at runtime.


Version 0.19. Tagged as 'Common-0_19'
@
text
@d3 1
a3 1
# $Id: TboxMake,v 4.5 2012/02/04 12:10:20 rsprowson Exp $
d127 5
@


4.5
log
@Change to not use RAMCModule ROMCModule.
Rather than refactor every toolbox module that uses TBoxMake, and since that already carries its own rules for resources and RAM and debug builds, it seems simpler to just create a new ROM and link target than try to use CModule shared makefile.
Participated in a ROM build, but not functionally tested.

Version 0.18. Tagged as 'Common-0_18'
@
text
@d3 1
a3 1
# $Id: TboxMake,v 4.4 2003/12/02 18:08:45 bavison Exp $
d121 1
a121 1
${ROM_MODULE}: ${ROM_OBJS} ${ROM_LIBS} ${C_ABSSYM} ${ROM_DEPEND} ${DIRS}
d133 1
a133 1
rom_link: ${DIRS}
@


4.4
log
@In conjunction with a new BuildSys, this makefile removes the requirement for
all Toolbox components to define the TARGET symbol.
@
text
@d3 1
a3 1
# $Id: TboxMake,v 4.3 2000/05/05 12:02:13 sbrodie Exp $
d7 5
d26 1
a26 1
CFLAGS += -zm -zps1 -ffah -D${SYSTEM}
d28 2
a37 2
ABSSYM = RISC_OSLib:o.c_abssym

d42 1
a43 2
include Makefiles:RAMCModule
include Makefiles:ROMCModule
d72 1
a72 2
# RAM builds require the resources to be packaged up into a ResourceFS
# registerable area.
a73 1

d105 1
a105 1
# Debug builds of modules
d107 1
a107 1
DBG_MODULE .= rm.D${COMPONENT}
d109 5
a113 2
DBG_LIBS   .= ${RAM_LIBS} C:tboxlibint.o.debuglibm ${DEBUGLIB} ${NET4LIBS}
DBG_DIRS   .= od._dirs
d115 1
a115 2
${DBG_MODULE}: ${DBG_OBJS} ${DBG_LIBS} ${CLIB} ${DIRS} ${RAM_DEPEND} ${DBG_DIRS}
        ${MKDIR} rm
d118 7
a124 1
trace: ${DBG_MODULE} ${DBG_DIRS}
d127 2
a128 3
${DBG_DIRS}:
        ${MKDIR} od
        ${TOUCH} $@@
d130 2
a131 1
.SUFFIXES: .c .s .od
d133 4
a136 2
.c.od:; ${CC} ${CFLAGS} -Ddebugging=1 -o $@@ $<
.s.od:; ${AS} ${ASFLAGS} -PD "debugging SETA 1" -o $@@ $<
d138 7
@


4.3
log
@  Replaced lost macro definition from last checkin.
Detail:
  The rewrite of ABSSYM to use c_abssym (to avoid link errors in Window)
    got lost between my testing and the last checkin.  This version has
    it.
Admin:
  Required by Window 1.64

Version 0.10. Tagged as 'Common-0_10'
@
text
@d3 1
a3 1
# $Id: TboxMake,v 4.2 2000/05/04 12:14:52 sbrodie Exp $
d38 1
a39 1
include Makefiles:RAMCModule
@


4.2
log
@  Updated common Toolbox Makefile fragment.
  Extra shared facilities for object modules.
  Debug support improved.
Detail:
  New common operations for Toolbox object modules have been abstracted
    into this component in order to simplify the object modules.
  Debugging services made common to all modules and now uses DebugLib.
  Common Makefile fragment now exported with correct rules for ROM builds
    as well as RAM builds, and (new in this version), DebugLib RAM builds.
    As a result, all object modules now have debug versions available.
Admin:
  Requires BuildSys 1.92 or later (RiscOS/BuildSys; tag BuildSys-1_92)
  Requires Library 0.41 or later (RiscOS/Library; tag Library-0_41)
  Required by any Toolbox object module dated 4th May 2000 or later.

Version 0.09. Tagged as 'Common-0_09'
@
text
@d3 1
a3 1
# $Id$
d30 2
@


4.1
log
@  Added template Makefile
  Exports LibVersion
Admin:
  Required by future versions of toolbox modules..

Version 0.08. Tagged as 'Common-0_08'
@
text
@d21 2
a22 2
CFLAGS = -zm -zps1 -ffah -D${SYSTEM}
CINCLUDES = ${TBOXINTHDR} -Itbox: -IC:
d28 2
a29 2
RAM_LIBS = ${TBOXINTLIB}
ROM_LIBS = ${TBOXINTLIB}
d76 3
a78 3
${RAMBOTH}: LocalRes:Message LocalRes:Res
        resgen messages_file $@@\
        LocalRes:Messages Resources.${COMPONENT}.Messages\
d86 1
d99 25
@

