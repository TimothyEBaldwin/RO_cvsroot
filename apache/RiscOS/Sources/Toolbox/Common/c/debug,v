head	4.3;
access;
symbols
	Common-0_26-1:4.3
	Common-0_26:4.3
	Common-0_25:4.3
	Common-0_24:4.3
	Common-0_23:4.3
	Common-0_22:4.3
	Common-0_21:4.3
	Common-0_20:4.3
	Common-0_19:4.3
	Common-0_18:4.3
	Common-0_17:4.3
	Common-0_16:4.3
	Common-0_15:4.3
	Common-0_14:4.3
	RO_5_07:4.3
	Common-0_13:4.3
	Common-0_12:4.3
	dellis_autobuild_BaseSW:4.3
	Common-0_11:4.3
	Common-0_10:4.3
	Common-0_09:4.3
	Common-0_08:4.2
	sbrodie_sedwards_16Mar2000:4.2
	Common-0_07:4.2
	Common-0_06:4.2
	Common-0_05:4.2
	dcotton_autobuild_BaseSW:4.3
	Common-0_04:4.2
	Common-0_03:4.2
	Common-0_02:4.2
	Common-0_01:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.8
	nicke_TBox_Common_20-9-98:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	sbrodie_commonlib_110698:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Toolbox_Common_120298:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2000.05.04.12.14.53;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.10.09.14.57.06;	author rbuckley;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.21.49;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.21.49;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.39.03;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.09.31;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.34.52;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  Updated common Toolbox Makefile fragment.
  Extra shared facilities for object modules.
  Debug support improved.
Detail:
  New common operations for Toolbox object modules have been abstracted
    into this component in order to simplify the object modules.
  Debugging services made common to all modules and now uses DebugLib.
  Common Makefile fragment now exported with correct rules for ROM builds
    as well as RAM builds, and (new in this version), DebugLib RAM builds.
    As a result, all object modules now have debug versions available.
Admin:
  Requires BuildSys 1.92 or later (RiscOS/BuildSys; tag BuildSys-1_92)
  Requires Library 0.41 or later (RiscOS/Library; tag Library-0_41)
  Required by any Toolbox object module dated 4th May 2000 or later.

Version 0.09. Tagged as 'Common-0_09'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    debug.c
 * Purpose: debugging routines for the Toolbox
 * Author:  Stewart Brodie
 * History: 19-Apr-00: SNB:   rewritten to use DebugLib
 *
 */
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

#include "debug.h"

#ifndef DEBUGLIB
#  define DEBUGLIB 1
#endif

#undef debug_output

#include "DebugLib/DebugLib.h"

void debug_dump (void *start, int length)
{
  (void) start;
  (void) length;
  ddumpbuf("", start, length, 0);
}

void debug_set_var_name (char *var_name)
{
  static int init_done = 0;
  if (!init_done++) {
    char sysvar[64];
    size_t length = strcspn(var_name, "$");

    if (length >= sizeof(sysvar)) length = 62;
    strncpy(sysvar, var_name, length);
    sysvar[length] = '\0';
    debug_initialise(sysvar, NULL, NULL);
  }
}


void _common_debug_output (char *allow, char *string, ...)
{
  va_list ap;

  va_start(ap, string);
  dvprintf((allow, string, ap));
  va_end(ap);
}
@


4.2
log
@Tided up the make process for the libraries tboxlib and debuglib (debuglib
was in with the same set of sources as tboxlib to I build it anyway).

All header files in the objects directory now get exported to
<Lib$Dir>.tboxlibs.h during export_hdrs phase. tboxlib and debuglib get build
with both zM and none zM flags and exported to <Lib$Dir>.tboxlibs.o.

Changed the sources slightly so they don't refer to the internal copy of the
header files found in objects but the copy previously exported to the right
place.
@
text
@d17 2
a18 2
 * Author:  Ian Johnson
 * History: 16-Sep-93: IDJ:   created
a20 5
  
#include "debug.h"

#include "swis.h"
#include "kernel.h"
d26 4
a29 8
#ifndef HostFS_HostVDU
#define HostFS_HostVDU   0x40100
#endif
#ifndef HostFS_TubeVDU
#define HostFS_TubeVDU   0x40101
#endif
#ifndef HostFS_WriteC
#define HostFS_WriteC    0x40102
d32 1
a32 82
static char output_buffer[256];
static char var_val[256] = "";
static char debug_var[256] = "";

static void host_out (char *format, ...);


void debug_dump (void *start, int length) {

   _kernel_swi_regs   regs;
   char               buffer[256];
   char              *address = start;

   regs.r[0] = (int)"Hex$Dump";
   regs.r[1] = (int)buffer;
   regs.r[2] = 255;
   regs.r[3] = 0;
   regs.r[4] = 3;

   _kernel_swi (OS_ReadVarVal, &regs, &regs);

   if (regs.r[2] == 0) return;
   {
       int            i, j, k, rows, columns;
       int            colour, word;
       char          *ptr,
                      chr;
       enum           { black, red, green, yellow, blue, magenta, cyan, white } colours;
       char           col[8][]   = { "\x011\x00", "\x011\x01", "\x011\x02", "\x011\x03",
                                     "\x011\x04", "\x011\x05", "\x011\x06", "\x011\x07"};

       buffer[regs.r[2]] = '\0'; /* set correct terminator for end of string */
       colour = (int) strstr (buffer, "colour");
       word   = (int) strstr (buffer, "word");
       if ((ptr = strstr (buffer,"R")) == NULL)
          rows = 24;
       else
          sscanf (ptr+1, "%d", &rows);
       if (rows<3) rows = 3;

       if ((ptr = strstr (buffer,"C")) == NULL)
          columns = 16;
       else
          sscanf (ptr+1, "%d", &columns);
       if (columns<4) columns = 4;

       ptr = address;

       while (ptr < address+length) {
          host_out ("\n\r%sAddress  ",colour?col[white]:"");
          for (j=0;j<columns;j += word?4:1)
             if (word)
                host_out ("    %02x   ",(((int)ptr+j) & 0xff));
             else
                host_out (" %02x",(((int)ptr+j) & 0xff));
          host_out ("  Characters\n\r");
          for (i=0;i<rows-2;i++) {
             host_out ("%s%08x%s ",colour?col[cyan]:"",(int)ptr,colour?col[red]:"");
             for (j=0;j<columns;j += word?4:1) {
                if (ptr+j >= address+length) break;
                if (word)
                   host_out (" %08x",*((int *)(ptr+j)));
                else
                   host_out (" %02x",*(ptr+j));
            }
             if (j < columns)
                for (k=0;k<columns-j;k += word?4:1)
                   host_out (word?"         ":"   ");
             host_out ("  %s",colour?col[magenta]:"");
             for (j=0;j<columns;j++) {
                if (ptr+j >= address+length) break;
                chr = *(ptr+j);
                host_out ("%s%c%s",(chr<32?(colour?col[white]:""):""),(chr<32?'.':chr),(chr<32?(colour?col[magenta]:""):""));
             }
             ptr += j;
             host_out ("\n\r");
             if (ptr >= address+length) break;
          }
       }
   host_out ("\x014");
   }
}
d34 1
a34 1
void host_out (char *format, ...) {
d36 5
a40 16
   va_list args;
   char *ptr, buffer[1024];
   _kernel_swi_regs regs;

   va_start (args, format);

   vsprintf (buffer, format, args);

   ptr = buffer;

   while (*ptr != '\0') {
      regs.r[0] = *ptr;
      _kernel_swi (HostFS_WriteC, &regs, &regs);
      ptr++;
   }
   va_end (args);
d43 1
a43 2

extern void debug_set_var_name (char *var_name)
d45 10
a54 1
    strcpy (debug_var, var_name);
d58 1
a58 1
extern void debug_output (char *allow, char *string, ...)
d60 1
a60 41
    /*
     * Function to output the given variable list down the tube.  String is a
     * printf format string.  String is only printed if the given allow string
     * appears in the system variable debug_var
     *
     */

    _kernel_swi_regs regs;
    _kernel_oserror *e;
    va_list args;
    char *p;

    va_start(args, string);

    regs.r[0] = (int)debug_var;
    regs.r[1] = (int)var_val;
    regs.r[2] = 255;
    regs.r[3] = 0;
    regs.r[4] = 3;                            

    _kernel_swi (OS_ReadVarVal, &regs, &regs);
    var_val[regs.r[2]] = '\0';

    if ((strstr (var_val, allow) != NULL) || !strcmp (allow, "force"))
    {
        vsprintf (output_buffer, string, args);

        for (p = output_buffer; *p != '\0'; p++)
        {
            if ((*p >= ' ' && *p <= '~') || *p == '\n')
                regs.r[0] = (int)*p;
            else
                regs.r[0] = '*';
            _kernel_swi (HostFS_WriteC, &regs, &regs);
            if (*p == '\n')
            {
                regs.r[0] = '\r';
                _kernel_swi (HostFS_WriteC, &regs, &regs);
            }
        }
    }
d62 3
a64 1
    va_end(args);
@


4.1
log
@Initial revision
@
text
@d31 1
d33 2
d36 2
d39 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
