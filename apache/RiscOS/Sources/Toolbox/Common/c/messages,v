head	4.7;
access;
symbols
	Common-0_26-1:4.7
	Common-0_26:4.6
	Common-0_25:4.6
	Common-0_24:4.6
	Common-0_23:4.5
	Common-0_22:4.5
	Common-0_21:4.5
	Common-0_20:4.5
	Common-0_19:4.5
	Common-0_18:4.5
	Common-0_17:4.5
	Common-0_16:4.5
	Common-0_15:4.5
	Common-0_14:4.5
	RO_5_07:4.5
	Common-0_13:4.5
	Common-0_12:4.5
	dellis_autobuild_BaseSW:4.4
	Common-0_11:4.4
	Common-0_10:4.4
	Common-0_09:4.4
	Common-0_08:4.4
	sbrodie_sedwards_16Mar2000:4.4
	Common-0_07:4.4
	Common-0_06:4.4
	Common-0_05:4.4
	dcotton_autobuild_BaseSW:4.5
	Common-0_04:4.4
	Common-0_03:4.4
	Common-0_02:4.4
	Common-0_01:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.4
	sbrodie_Toolbox_Ursula_231198:4.4
	Ursula_RiscPC:4.4.0.4
	nicke_TBox_Common_20-9-98:4.4
	rthornb_UrsulaBuild-19Aug1998:4.4
	UrsulaBuild_FinalSoftload:4.4
	rthornb_UrsulaBuild-12Aug1998:4.4
	aglover_UrsulaBuild-05Aug1998:4.4
	rthornb_UrsulaBuild-29Jul1998:4.4
	rthornb_UrsulaBuild-22Jul1998:4.4
	rthornb_UrsulaBuild-15Jul1998:4.4
	rthornb_UrsulaBuild-07Jul1998:4.4
	rthornb_UrsulaBuild-17Jun1998:4.4
	sbrodie_commonlib_110698:4.4
	rthornb_UrsulaBuild-03Jun1998:4.4
	rthornb_UrsulaBuild-27May1998:4.4
	rthornb_UrsulaBuild-21May1998:4.4
	Ursula_bp:4.4
	Ursula:4.4.0.2
	Ursula_12May1998:4.3.0.4
	rthornb_UrsulaBuild_01May1998:4.3
	afrost_NC2_Generic:4.1.7.1
	Daytona:4.3.0.2
	Daytona_bp:4.3
	sbrodie_Expresso_final_190298:4.4
	sbrodie_Toolbox_Common_120298:4.4
	sbrodie_Expresso_BETA6_19980204:4.4
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2018.09.09.19.59.22;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	H5LweOVn1Md81tRA;

4.6
date	2015.08.18.20.58.34;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	1IkG9MPiJd73iNxy;

4.5
date	2001.05.31.14.46.02;	author nbingham;	state Exp;
branches;
next	4.4;

4.4
date	98.02.04.19.47.22;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	97.10.13.12.04.15;	author rbuckley;	state Exp;
branches;
next	4.2;

4.2
date	97.10.09.14.57.07;	author rbuckley;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.21.50;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.21.50;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.39.07;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.09.30;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.34.54;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Remove redundant assignment to error pointer
Pointer 'e' can't be returned as it's an argument to the function, so don't assign a result to it.
Found by cppcheck.
Tagged as Common-0_26-1 since no net code change.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    messages.c
 * Purpose: accessing an Object modules messages file (inc error reporting)
 * Author:  Timothy Roddis
 * History: 24-Jan-94: IDJ: created from original TGR sources
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "objects/toolbox.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "style.h"

#include "messages.h"

static int             messages_fd[4];                     /* the messages file descriptor */
static _kernel_oserror global_error_block={0,0};



/* ------------------------------------ raising errors ---------------------------------------- */


extern _kernel_oserror *make_error (int err_num, int num_args, ...)
{
   /*
    * Generate a RISC OS error block.
    */

   va_list           ap;
   char             *s,
                     token [4];
   int               i=4;
   _kernel_oserror  *e;
   _kernel_swi_regs  regs = {0,0,0,0,0,0,0,0};

   global_error_block.errnum = err_num;

   num_args = (num_args>4)?4:num_args;

   for (va_start (ap, num_args); num_args--; i++)
   {
      s         = va_arg (ap, char *);
      regs.r[i] = (int) ((s && *s) ? s : NULL); /* copy (pointer to args)s into registers */
   }

   sprintf (token, "E%02x", err_num&0x3f);

   DEBUG debug_output ("error", "make_error: looking for %s\n", token);

   regs.r[0] = (int) messages_fd;
   regs.r[1] = (int) token;
   regs.r[2] = (int) global_error_block.errmess;
   regs.r[3] = sizeof global_error_block - sizeof global_error_block.errnum; /* 252! */

   e = _kernel_swi (MessageTrans_Lookup, &regs, &regs); /* Hope this doesn't return an error */

   DEBUG
   {
      if (e != NULL) debug_output ("error", "make_error: msgtrans error (%s)\n", e->errmess);
   }

   va_end (ap);

   return &global_error_block;
}



extern _kernel_oserror *make_error_hex (int err_num, int num_args, ...)
{
   /*
    * Generate a RISC OS error block, with integer params printed in hex.
    */

   va_list           ap;
   char              arg[4][11] = { "\0","\0","\0","\0" };
   int               i,
                     n;

   num_args = (num_args>4)?4:num_args;
   va_start (ap, num_args);

   for (i=0; i<num_args; i++)
   {
      n = va_arg (ap, int);
      sprintf (arg[i], "0x%x",n);
   }

   va_end(ap);

   return make_error (err_num, num_args, arg[0], arg[1], arg[2], arg[3]);
}



extern void raise_toolbox_error (int err_num, ObjectID object_id, ComponentID component_id, int num_args, ...)
{
   /*
    * Raise a Toolbox_Error event
    */

   ToolboxErrorEvent error_block;

   va_list           ap;
   char             *s,
                     token [4];
   int               i=4;
   _kernel_oserror  *e;
   _kernel_swi_regs  regs = {0,0,0,0,0,0,0,0};

   error_block.errnum = err_num;

   num_args = (num_args>4)?4:num_args;

   for (va_start (ap, num_args); num_args--; i++)
   {
      s         = va_arg (ap, char *);
      regs.r[i] = (int) ((s && *s) ? s : NULL); /* copy (pointer to args)s into registers */
   }

   regs.r[0] = (int) messages_fd;
   regs.r[1] = (int) token;
   regs.r[2] = (int) error_block.errmess;
   regs.r[3] = sizeof global_error_block - sizeof global_error_block.errnum; /* 252! */

   e = _kernel_swi (MessageTrans_Lookup, &regs, &regs); /* Hope this doesn't return an error */

   error_block.hdr.event_code = Toolbox_Error;

   regs.r[0] = 0;
   regs.r[1] = (int) object_id;
   regs.r[2] = component_id;
   regs.r[3] = (int) &error_block;

   e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);

   va_end (ap);
}



extern void raise_toolbox_error_hex (int err_num, ObjectID object_id, ComponentID component_id, int num_args, ...)
{
   /*
    * Raise a Toolbox_Error event, with integer parameters printed in hex
    */

   va_list           ap;
   char              arg[4][11] = { "\0","\0","\0","\0" };
   int               i=0,
                     n;

   num_args = (num_args>4)?4:num_args;
   va_start (ap, num_args);

   for (i=0; i<num_args; i++)
   {
      n = va_arg (ap, int);
      sprintf (arg[i], "0x%x",n);
   }

   raise_toolbox_error_hex (err_num, object_id, component_id, num_args, arg[0], arg[1], arg[2], arg[3]);

   va_end(ap);
}



extern void raise_toolbox_oserror (_kernel_oserror *e, ObjectID object_id, ComponentID component_id)
{
   /*
    * Raise a Toolbox_Error event, given a RISC OS error block
    */

   ToolboxErrorEvent error_block;
   _kernel_swi_regs  regs;

   error_block.errnum = e->errnum;
   strcpy (error_block.errmess, e->errmess);

   error_block.hdr.event_code = Toolbox_Error;
   error_block.hdr.size       = 256-20-sizeof(ToolboxEventHeader)-sizeof(ObjectID)-sizeof(ComponentID);

   regs.r[0] = 0;
   regs.r[1] = (int) object_id;
   regs.r[2] = component_id;
   regs.r[3] = (int) &error_block;

   _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
}


/* --------------------------------------- message file handling ------------------------------ */


extern _kernel_oserror *messages_file_open (char *messages_filename)
{
    return _swix(MessageTrans_OpenFile, _INR(0,2), messages_fd, messages_filename, 0 /* use RMA */);
}


extern _kernel_oserror *messages_file_close (void)
{
    return _swix (MessageTrans_CloseFile, _IN(0), messages_fd);
}


extern _kernel_oserror *messages_file_lookup (char *token, char *buffer, int *buffer_size, int num_args, ...)
{
   va_list           ap;
   char             *s;
   int               i    = 4;
   _kernel_oserror  *e    = NULL;
   _kernel_swi_regs  regs = {0,0,0,0,0,0,0,0};

   num_args = (num_args>4)?4:num_args;

   for (va_start (ap, num_args); num_args--; i++)
   {
      s         = va_arg (ap, char *);
      regs.r[i] = (int) ((s && *s) ? s : NULL); /* copy (pointer to args)s into registers */
   }

   regs.r[0] = (int) messages_fd;
   regs.r[1] = (int) token;
   regs.r[2] = (int) buffer;
   regs.r[3] = (buffer && buffer_size)?*buffer_size:0;

   e = _kernel_swi (MessageTrans_Lookup, &regs, &regs); /* Hope this doesn't return an error */

   if (buffer == NULL && buffer_size != NULL)
       *buffer_size = regs.r[3]+1;   /* add one to allow for terminator */

   va_end (ap);

   return e;
}
@


4.6
log
@Minor header file adjustments
Everything TboxMake did can now be done with the makefiles in BuildSys.
Header file services.h was just a proxy for Global/Services.h.
style.h:
  Corrections to constants from the Style Guide. These two values are unused, so mainly academic.
messages.c/objmodule.c/string32.c:
  Unused services.h removed.

Version 0.24. Tagged as 'Common-0_24'
@
text
@d212 1
a212 1
   e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
@


4.5
log
@  Fixed numerous RISCOS-specific (incorrect) #include statements.
Detail:
  Numerous instances of '#include "objects.window.h"' replaced with
  correct '#include "objects/window.h".
Admin:
  Tested on RiscPC (APCS-32 Ursula environment).


Version 0.12. Tagged as 'Common-0_12'
@
text
@a30 1
#include "services.h"
@


4.4
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@d30 1
a30 1
#include "objects.toolbox.h"
@


4.3
log
@Build process improvements :
* Standardised make process in common will all other modules in build.
* Internal and external toolbox libraries and headers exported to
  <Lib$Dir>.tboxlibint and <Lib$Dir>.tboxlibs respectivly.
* Resources now localised.
* Local !MkClean and !MkRom now use amu_machine.
@
text
@d47 1
a47 1
extern _kernel_oserror *make_error (int err_num, int num_args, ...) 
d64 1
a64 1
   for (va_start (ap, num_args); num_args--; i++) 
d93 1
a93 1
extern _kernel_oserror *make_error_hex (int err_num, int num_args, ...) 
d106 2
a107 2
 
   for (i=0; i<num_args; i++) 
d115 1
a115 1
   return make_error (err_num, num_args, arg[0], arg[1], arg[2], arg[3]); 
d120 1
a120 1
extern void raise_toolbox_error (int err_num, ObjectID object_id, ComponentID component_id, int num_args, ...) 
d139 1
a139 1
   for (va_start (ap, num_args); num_args--; i++) 
d166 1
a166 1
extern void raise_toolbox_error_hex (int err_num, ObjectID object_id, ComponentID component_id, int num_args, ...) 
d180 1
a180 1
   for (i=0; i<num_args; i++) 
d186 1
a186 1
   raise_toolbox_error_hex (err_num, object_id, component_id, num_args, arg[0], arg[1], arg[2], arg[3]); 
d193 1
a193 1
extern void raise_toolbox_oserror (_kernel_oserror *e, ObjectID object_id, ComponentID component_id) 
d222 1
a222 6
    _kernel_swi_regs regs;

    regs.r[0] = (int)messages_fd;
    regs.r[1] = (int)messages_filename;
    regs.r[2] = 0;   /* use RMA */
    return _kernel_swi(MessageTrans_OpenFile, &regs, &regs);
d228 1
a228 5
    _kernel_swi_regs regs;

    regs.r[0] = (int)messages_fd;
    return _kernel_swi (MessageTrans_CloseFile, &regs, &regs);

d242 1
a242 1
   for (va_start (ap, num_args); num_args--; i++) 
d256 1
a256 1
       *buffer_size = regs.r[3]+1;   /* add one to allow for terminator */ 
@


4.2
log
@Tided up the make process for the libraries tboxlib and debuglib (debuglib
was in with the same set of sources as tboxlib to I build it anyway).

All header files in the objects directory now get exported to
<Lib$Dir>.tboxlibs.h during export_hdrs phase. tboxlib and debuglib get build
with both zM and none zM flags and exported to <Lib$Dir>.tboxlibs.o.

Changed the sources slightly so they don't refer to the internal copy of the
header files found in objects but the copy previously exported to the right
place.
@
text
@d30 1
a30 1
#include "toolbox.h"
@


4.1
log
@Initial revision
@
text
@d30 1
a30 1
#include "objects.toolbox.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
