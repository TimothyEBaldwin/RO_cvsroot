head	4.7;
access;
symbols
	SaveAs-0_20:4.7
	SaveAs-0_19:4.6
	RO_5_07:4.6
	SaveAs-0_18:4.6
	SaveAs-0_17:4.5
	mstphens_UrsulaRiscPCBuild_20Nov98:4.5
	sbrodie_Toolbox_Ursula_231198:4.5
	Ursula_RiscPC:4.5.0.4
	rthornb_UrsulaBuild-19Aug1998:4.5
	UrsulaBuild_FinalSoftload:4.5
	rthornb_UrsulaBuild-12Aug1998:4.5
	Ursula:4.5.0.2
	Ursula_bp:4.5
	aglover_UrsulaBuild-05Aug1998:4.4
	rthornb_UrsulaBuild-29Jul1998:4.4
	SaveAs-0_16:4.5
	rthornb_UrsulaBuild-22Jul1998:4.4
	rthornb_UrsulaBuild-15Jul1998:4.4
	rthornb_UrsulaBuild-07Jul1998:4.4
	rthornb_UrsulaBuild-17Jun1998:4.4
	rthornb_UrsulaBuild-03Jun1998:4.4
	rthornb_UrsulaBuild-27May1998:4.4
	rthornb_UrsulaBuild-21May1998:4.4
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Expresso_final_190298:4.4
	sbrodie_SaveAs_0_14:4.4
	sbrodie_Expresso_BETA6_19980204:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2015.08.18.21.44.39;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	sDUPPCOjkQTRxNxy;

4.6
date	2003.07.10.10.49.38;	author bavison;	state Exp;
branches;
next	4.5;

4.5
date	98.07.30.09.19.14;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	98.02.11.17.38.45;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	98.02.11.14.49.58;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	98.02.04.19.49.05;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.55;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.55;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.44.36;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.16.25;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.40.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.20. Tagged as 'SaveAs-0_20'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   auxiliary.c
 * Purpose: support functions for the SaveAs object class
 * Author:  TGR
 * History: 15-Feb-94: TGR: created
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "Global/Sprite.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "twimp.h"
#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"
#include "objects/saveas.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

/*
ObjectID           global_menu;
*/
SaveAsInternal    *global_next;
int                global_window_count = 0;

EventInterest   messages_of_interest[] = {
/*
                 {wimp_MMENUS_DELETED     ,          -1},
*/
                 {wimp_MDATA_SAVE         ,           0},
                 {wimp_MDATA_SAVE_ACK     ,           0},
                 {wimp_MDATA_LOAD_ACK     ,           0},
                 {wimp_MRAM_FETCH         ,           0},
                 {-1                   , -1}
                };

EventInterest   events_of_interest[] = {
                 {wimp_ETOOLBOX_EVENT ,  0},
                 {wimp_ECLOSE         ,  0},
                 {-1                  , -1}
                };

EventInterest   toolbox_events_of_interest[] = {
                 {Window_HasBeenHidden      , Window_ObjectClass},
                 {SaveAs_AboutToBeShown     , SaveAs_ObjectClass},
                 {Draggable_DragStarted     , Window_ObjectClass},
                 {Draggable_DragEnded       , Window_ObjectClass},
                 {ActionButton_Selected     , Window_ObjectClass},
                 {OptionButton_StateChanged , Window_ObjectClass},
                  {-1                       ,                 -1}
                };

/*
extern _kernel_oserror *dialogue_completed (ObjectID object_id) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   ToolboxEvent        toolbox_event;

   regs.r[0] = 0;
   regs.r[1] = (int) object_id;
   regs.r[2] = -1;
   regs.r[3] = (int) &toolbox_event;

   toolbox_event.hdr.size       = sizeof (SaveAs_DialogueCompleted_Event);
   toolbox_event.hdr.event_code = SaveAs_DialogueCompleted;
   toolbox_event.hdr.flags      = 0;

   if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
      return e;

   return NULL;
}
*/

extern _kernel_oserror *save_completed (SaveAsInternal *internal, char *filename) {

   _kernel_oserror         *e;
   _kernel_swi_regs         regs;
   SaveAs_SaveCompleted_Event
                           *save_complete;
   ToolboxEvent             toolbox_event;

   DEBUG debug_output ("e","SaveAs: save is complete\n");

   regs.r[0] = 0;
   regs.r[1] = (int) internal->object_id;
   regs.r[2] = (int) -1;
   regs.r[3] = (int) &toolbox_event;

   save_complete                   = (SaveAs_SaveCompleted_Event *) &toolbox_event;
   toolbox_event.hdr.size          = sizeof(SaveAs_SaveCompleted_Event);
   toolbox_event.hdr.event_code    = SaveAs_SaveCompleted;
   save_complete->hdr.flags        = ((internal->flags & SaveAsInternal_Selection) ? 1 : 0)
                                   | ((internal->flags & SaveAsInternal_Safe)      ? 2 : 0);
   save_complete->wimp_message_no  = internal->my_ref;

   strcpy (save_complete->filename, filename);

   if ((e =  _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
     return e;

   if (internal->flags & SaveAsInternal_CloseWhenFinished)
   {
      internal->flags &= ~SaveAsInternal_IsShowing;

      regs.r[0] = 0;
      regs.r[1] = (int) internal->sub_object_id;

      return _kernel_swi (Toolbox_HideObject, &regs, &regs);
   }
   else
      return NULL;
}


extern SaveAsInternal *find_internal (TaskDescriptor *t, ObjectID sub_object_id) {

   SaveAsInternal *i = t->object_list,
                    *j;

   DEBUG debug_output ("e","SaveAs: find internal, searching for sub_object_id = 0x%x\n",sub_object_id);

   if (!i) return NULL;

   /* Search through the objectect list until we find the one with the required underlying objectect ID */

   do {
      j = i->forward;
      DEBUG debug_output ("e","SaveAs: internal = 0x%x, sub_object_id = 0x%x\n",i,i->sub_object_id);
      if (i->sub_object_id == sub_object_id) return i;
   } while ((i=j) != t->object_list);

   return NULL;
}

SaveAsInternal *find_internal_from_ref (TaskDescriptor *t, int ref) {

   SaveAsInternal    *i = t->object_list,
                     *j;

   DEBUG debug_output ("e","SaveAs: find internal, searching for ref = 0x%x\n",ref);

   if (!i) return NULL;

   /* Search through the objectect list until we find the one with the required underlying objectect ID */

   do {
      j = i->forward;
      DEBUG debug_output ("e","SaveAs: internal = 0x%x, my_ref = 0x%x\n",i,i->my_ref);
      if (i->my_ref == ref) return i;
   } while ((i=j) != t->object_list);

   return NULL;
}

_kernel_oserror *show_actual (void) {
   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   void               *show_info;
   int                 show_type;

   DEBUG debug_output ("e","SaveAs: attempting to actually show the dbox\n");

   regs.r[0] = 0;
   regs.r[1] = global_next->sub_object_id;

   if ((e = _kernel_swi (Toolbox_GetParent, &regs, &regs)) != NULL) {
      return e;
   }
   show_info = global_next->show_info;
   show_type = global_next->show_type;

   regs.r[4] =       regs.r[0];
   regs.r[5] =       regs.r[1];
   regs.r[0] =        (global_next->flags & SaveAsInternal_MenuSemantics)    ? 1 :
                      ((global_next->flags & SaveAsInternal_SubMenuSemantics) ? 2 : 0);
   regs.r[1] = (int) global_next->sub_object_id;
   regs.r[2] =       show_type;
   regs.r[3] = (int) show_info;

   global_next->flags         |= SaveAsInternal_IsShowing;

   if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL)
      return e;

   if (show_info) {
      mem_freek (show_info);
      global_next->show_info = NULL;
   }
   global_next                 = NULL;

   return NULL;
}

_kernel_oserror *transfer_block (TaskDescriptor *t, SaveAsInternal *internal, void *buffer, size_t buffer_size, size_t transfer_size, int destination_task, int your_ref, void *destination_buffer) {

   _kernel_oserror  *e;
   _kernel_swi_regs  regs;
   wimp_Message     *wimp_message = internal->wimp_message;

   /* transfer block */

/*
   regs.r[0] = 5;

   if ((e = _kernel_swi (Wimp_ReadSysInfo, &regs, &regs)) != NULL)
     return e;
*/
   regs.r[0] = (int) t->task_handle;

   /* regs.r[0] is now the current task handle */

   DEBUG debug_dump (buffer, transfer_size);

   if (transfer_size) {
      regs.r[1] = (int) buffer;
      regs.r[2] =       destination_task;
      regs.r[3] = (int) destination_buffer;
      regs.r[4] =       transfer_size;
      if ((e = _kernel_swi (Wimp_TransferBlock, &regs, &regs)) != NULL)
         return e;
   }

   if (transfer_size < buffer_size) {
      if ((e = save_completed (internal, wimp_message->data.data_save.filename)) != NULL)
         return e;
      regs.r[0] = 17;
   } else {
      regs.r[0] = 18;
   }
      /* This will be a recorded message unless it is the final one */

   wimp_message->hdr.your_ref               = your_ref;
   wimp_message->hdr.action                 = wimp_MRAM_TRANSMIT;
   wimp_message->data.ram_transmit.no_bytes = transfer_size;
   wimp_message->data.ram_transmit.address  = destination_buffer;

   regs.r[1] = (int) wimp_message;
   regs.r[2] = destination_task;

   DEBUG debug_dump (wimp_message, 256);

   if ((e = da_wimp_send_message (Wimp_SendMessage, &regs, &regs)) != NULL)
      return e;

   DEBUG debug_dump (wimp_message, 256);

   DEBUG debug_output ("e","SaveAs: sent message, my_ref = 0x%x\n", wimp_message->hdr.my_ref);

   internal->my_ref = wimp_message->hdr.my_ref;

   return NULL;
}

void find_file_icon (int filetype, char *buffer) {

   _kernel_swi_regs regs;

   DEBUG debug_output ("f","SaveAs: setting filetype to &%04x", filetype);

   if (filetype != 0x1000 && filetype != 0x2000) {
      sprintf (buffer, "file_%03x", filetype & 0xfff);
   } else if (filetype == 0x1000) {
      strcpy (buffer, "directory");
   } else if (filetype == 0x2000) {
      strcpy (buffer, "application");
   }
   regs.r[0] = SpriteReason_SelectSprite;
   regs.r[2] = (int) buffer;

   if (_kernel_swi (Wimp_SpriteOp, &regs, &regs))
      strcpy (buffer, "file_xxx");

   DEBUG debug_output ("e","SaveAs: setting sprite to '%s'\n",buffer);
}

_kernel_oserror *da_wimp_send_message(int swi, _kernel_swi_regs *in, _kernel_swi_regs *out)
{
        /* in Wimp's 3.98 and earlier, if the message block pointed to by in->r[1] happens to
         * be at an address >&3800000, then the sender and my_ref fields are not filled in.
         * ARGH.  Thus our memory which was carefully allocated in a dynamic area doesn't get
         * updated.  So we have to copy it to a buffer here and send it and then copy the buffer
         * back again.
         */
        static wimp_Message m;
        wimp_Message *mptr = (wimp_Message *) in->r[1];
        _kernel_oserror *e;

        memcpy(&m, mptr, mptr->hdr.size);
        in->r[1] = (int) &m;
        e = _kernel_swi(swi, in, out);
        memcpy(mptr, &m, m.hdr.size);
        in->r[1] = (int) mptr;
        return e;
}
@


4.6
log
@* Corrected Adjust behaviour: now clicking Adjust on "Save" action button
  leaves window open, as does dragging the file icon with Adjust. Clicking
  Adjust on "Cancel" action button no longer sets the internal state flag
  to say that the window is closed.
* The various TaskObey files haven't worked since shared makefiles were
  introduced; they do now.

Version 0.18. Tagged as 'SaveAs-0_18'
@
text
@d27 1
a32 1
#include "services.h"
d39 3
a41 3
#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.SaveAs.h"
a42 1
#include "main.h"
d296 1
a296 1
   regs.r[0] = os_SpriteOp_SelectSprite;
@


4.5
log
@* Added show-at-pointer and show-centred capability.
* Module version now maintained by srccommit.

Version 0.16. Tagged as 'SaveAs-0_16'
@
text
@d74 1
d131 11
a141 6
   internal->flags &= ~SaveAsInternal_IsShowing;

   regs.r[0] = 0;
   regs.r[1] = (int) internal->sub_object_id;

   return _kernel_swi (Toolbox_HideObject, &regs, &regs);
@


4.4
log
@Workaround for Wimp bug which causes message reference/sender not to be
updated during Wimp_SendMessage calls if message block is in a dynamic
area.
@
text
@d194 1
a194 1
   show_type = (show_info) ? ((global_next->flags & SaveAsInternal_FullInfoShow) ? 1 : 2) : 0;
@


4.3
log
@SaveAs 0.14
Fixes spurious broadcast DataLoad messages when using the actionbutton to
save an object in type 2 and type 3 save operations.
@
text
@a59 1
                 {wimp_MDATA_LOAD         ,           0},
d266 1
a266 1
   if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL)
d298 20
@


4.2
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@d58 1
d60 2
a62 1
                 {wimp_MDATA_LOAD_ACK     ,           0},
@


4.1
log
@Initial revision
@
text
@d281 1
a281 1
   DEBUG debug_output ("f","FileInfo: setting filetype to '%s'\n", buffer);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
