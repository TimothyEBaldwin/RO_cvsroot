head	4.2;
access;
symbols
	PrintDbox-0_18:4.2
	PrintDbox-0_17:4.1
	RO_5_07:4.1
	PrintDbox-0_16:4.1
	PrintDbox-0_15:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.6
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_PrintDbox_0_13:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	sbrodie_PrintDbox_0_12:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2015.08.18.21.40.30;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	kCo49ZEfFy5swNxy;

4.1
date	96.11.05.09.22.44;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.44;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.43.38;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.15.13;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.39.15;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.18. Tagged as 'PrintDbox-0_18'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  TGR
 * History: 2-Jun-94: TGR: created from IDJ template
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "twimp.h"

#include "objects/toolbox.h"
#include "objects/printdbox.h"

#include "auxiliary.h"
#include "object.h"
#include "events.h"


/*
_kernel_oserror *event_close_window (IDBlock *id_block);
_kernel_oserror *event_printdbox_to_show (ObjectID object_id);
_kernel_oserror *event_menus_deleted (void);
*/
_kernel_oserror *event_writable_changed (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block);
_kernel_oserror *event_action_button (TaskDescriptor *t, IDBlock *id_block/* , wimp_PollBlock *poll_block*/);
_kernel_oserror *event_radio_changed (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block);

extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox postfilter, when an event happens which
     * this module has expressed an interest in.
     * R0 = Wimp event reason code
     * R1 ->client's Wimp event block
     * R2 = Task Descriptor of task interested in the event
     * R3 ->6-word "ID block" as passed to Toolbox_Initialise
     *
     */

    /*
     * This function gets a pointer to the task interested in the event in
     * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
     * If the event is dealt with by this module (eg ID block gets updated).
     * then set R0 to non-null before return.
     */

   _kernel_swi_regs   regs;
   _kernel_oserror   *e;
   wimp_PollBlock    *block           = (wimp_PollBlock *)r->r[1];
   IDBlock           *id_block        = (IDBlock *)r->r[3];
   int                event_code      = r->r[0];
   TaskDescriptor    *t             = (TaskDescriptor *) r->r[2];
   PrintDboxInternal *internal;

   DEBUG debug_output ("e","PrintDbox: Postfilter entered, received wimp event code = 0x%x\n",event_code);

   r->r[0] = 0;

   switch (event_code) {

      case wimp_ESEND:
      case wimp_ESEND_WANT_ACK:
         switch (block->msg.hdr.action) {
            case wimp_MSET_PRINTER:
               return task_update_printer ();
            default:
               break;
            }
/*
      case wimp_ECLOSE:
         return ((internal = find_internal(t, id_block->self_id)) != NULL)
              ? dialogue_completed (internal->object_id)
              : NULL;
         break;
*/
      case wimp_ETOOLBOX_EVENT:
         DEBUG debug_output ("e","PrintDbox: handling a toolbox event, code = 0x%x\n",block->toolbox_event.hdr.event_code);
         switch (block->toolbox_event.hdr.event_code) {
            case PrintDbox_AboutToBeShown:
               {
                  regs.r[0] = 0;
                  regs.r[1] = (int) id_block->self_id;

                  if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL) {
                     return e;
                  }

                  global_next = (PrintDboxInternal *)regs.r[0];

                  return NULL;
               }
               break;
            case PrintDbox_SetUpAboutToBeShown:

               regs.r[0] = 0;
               regs.r[1] = (int) id_block->self_id;

               if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL) {
                  return e;
               }
               internal = (PrintDboxInternal *)regs.r[0];

               global_setup_next      = internal->further_options;
               global_setup_parent_id = id_block->self_id;
               break;
            case Window_HasBeenHidden:
               {
                  _kernel_swi_regs    regs;
                  ToolboxEvent        toolbox_event;

                  if ((internal = find_internal (t, id_block->self_id)) == NULL)
                     return NULL;

                  internal->flags &= ~PrintDboxInternal_IsShowing;

                  if (~internal->flags & PrintDboxInternal_GenerateHideEvent) return NULL;

                  regs.r[0] = 0;
                  regs.r[1] = (int) internal->object_id;
                  regs.r[2] = -1;
                  regs.r[3] = (int) &toolbox_event;

                  toolbox_event.hdr.size       = sizeof (PrintDbox_DialogueCompleted_Event);
                  toolbox_event.hdr.event_code = PrintDbox_DialogueCompleted;
                  toolbox_event.hdr.flags      = 0;

                  return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
               }
               break;
            case WritableField_ValueChanged: /* the from and to page range fields */
               return event_writable_changed (t, id_block, block);
               break;
            case RadioButton_StateChanged:
               return event_radio_changed (t, id_block, block);
            case ActionButton_Selected:
               return event_action_button (t, id_block /* , block*/);
               break;
         }
         break;
      default:
         break;
   }
   return NULL;
}



extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox prefilter, when Wimp_Poll is called.
     * R0 = mask passed to Wimp_Poll
     * R1 ->client's poll block passed to Wimp_Poll
     * R2 = Task Descriptor.
     *
     */

    /*
     * This function gets a pointer to the current task in
     * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
     * This function can enable additional events by zero-ing bits in
     * r->r[0]
     */

    _kernel_oserror *e = NULL;

    DEBUG debug_output ("e","PrintDbox: prefilter entered\n");

    if (global_next) {
       return show_actual();
    }
    if (global_setup_next) {
       return show_setup_actual ();
    }

    IGNORE (r);

    return e;
}
/*
_kernel_oserror *event_printdbox_to_show (ObjectID object_id) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;

   regs.r[0] = 0;
   regs.r[1] = (int) object_id;

   if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL) {
      return e;
   }

   global_next = (PrintDboxInternal *)regs.r[0];

   return NULL;
}
_kernel_oserror *event_menus_deleted (void) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   PrintDboxInternal   *internal;

   if (global_menu) {

      regs.r[0] = 0;
      regs.r[1] = (int) global_menu;

      global_menu = 0;

      if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL)
         return e;

      internal = (PrintDboxInternal *) regs.r[0];

      internal->flags &= ~PrintDboxInternal_IsShowing;

      if (internal->flags & PrintDboxInternal_GenerateHideEvent) {
         if ((e = dialogue_completed (global_menu)) != NULL)
            return e;
      }
   }
   return NULL;
}
*/
_kernel_oserror *event_writable_changed (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block) {

   WritableFieldValueChangedEvent *vc_event = (WritableFieldValueChangedEvent *) &(poll_block->toolbox_event);
   PrintDboxInternal              *internal;

   if ((internal = find_internal (t, id_block->self_id)) == NULL)
      return NULL;

   DEBUG debug_output ("e","PrintDbox: vc_event = '%s' at 0x%x\n", vc_event->string, vc_event->string);

   if (id_block->self_component == PrintDbox_WritableField_From) {
      sscanf (vc_event->string, "%d", &internal->from);
      DEBUG debug_output ("e","PrintDbox: from value changed to %d\n",internal->from);
   } else { /* assume nothing's messed up and that it's the 'From' Writable field */
      sscanf (vc_event->string, "%d", &internal->to);
   }
   return NULL;
}

_kernel_oserror *event_radio_changed (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block) {

   _kernel_oserror                *e;
   RadioButtonStateChangedEvent   *rbsc_event = (RadioButtonStateChangedEvent *) &(poll_block->toolbox_event);
   _kernel_swi_regs                regs;
   PrintDboxInternal              *internal;

   if ((internal = find_internal (t, id_block->self_id)) == NULL)
      return NULL;

   regs.r[1] = internal->sub_object_id;

   DEBUG debug_output ("e","PrintDbox: a radio button has changed state: ");

   if ((id_block->self_component == PrintDbox_RadioButton_FromTo) && rbsc_event->state) {

      char buffer[12]; /* for nos. only */

      DEBUG debug_output ("e","FromTo selected\n");

      regs.r[0] = 0;
      regs.r[2] = WritableField_GetValue;
      regs.r[3] = PrintDbox_WritableField_To;
      regs.r[4] = (int) buffer;
      regs.r[5] = 12;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

      sscanf (buffer, "%d", &internal->to);

      regs.r[0] = 0;
      regs.r[3] = PrintDbox_WritableField_From;
      regs.r[4] = (int) buffer;
      regs.r[5] = 12;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

      sscanf (buffer, "%d", &internal->from);

      ungrey_fromto (internal->sub_object_id);
   } else {
      DEBUG debug_output ("e","All selected\n");

      grey_fromto (internal->sub_object_id);
      internal->from = -1;
   }
   return NULL;
}

_kernel_oserror *event_action_button (TaskDescriptor *t, IDBlock *id_block/* , wimp_PollBlock *poll_
block */) {

/*
   _kernel_oserror                *e;
*/
   _kernel_swi_regs                regs;
   PrintDboxInternal              *internal;
   ToolboxEvent                    toolbox_event;

   DEBUG debug_output ("e","PrintDbox: processing action button\n");

   if ((internal = find_internal (t, id_block->self_id)) == NULL)
      return NULL;

   DEBUG debug_output ("e","PrintDbox: found object\n");


/*
   regs.r[0] = 0;
   regs.r[1] = (int) id_block->self_id;
   regs.r[2] =       id_block->self_component;
   regs.r[3] = (int) &toolbox_event;
*/

   switch (id_block->self_component) {
      case PrintDbox_ActionButton_Print:
         {
            toolbox_event.hdr.size       = sizeof (PrintDbox_Print_Event);
            toolbox_event.hdr.event_code = PrintDbox_Print;
         }
         break;
      case PrintDbox_ActionButton_Save:
         {
            toolbox_event.hdr.size       = sizeof (PrintDbox_Save_Event);
            toolbox_event.hdr.event_code = PrintDbox_Save;
         }
         break;
      case PrintDbox_ActionButton_Cancel:
/*
         internal->flags              &= ~PrintDboxInternal_IsShowing;
*/
         return NULL;
      case PrintDbox_ActionButton_SetUp:
         {
            regs.r[0] = 0;
            regs.r[1] = internal->object_id;
            regs.r[2] = id_block->self_component;
            regs.r[3] = (int) &toolbox_event;

            if (internal->further_options) {

               if (internal->flags & PrintDboxInternal_GenerateShowSetUpEvent) {
                  PrintDbox_SetUpAboutToBeShown_Event *show_setup_event
                     = (PrintDbox_SetUpAboutToBeShown_Event *)&toolbox_event;

                  toolbox_event.hdr.flags      = 0;
                  toolbox_event.hdr.size       = sizeof (PrintDbox_SetUpAboutToBeShown_Event);
                  toolbox_event.hdr.event_code = PrintDbox_SetUpAboutToBeShown;
                  show_setup_event->object_id   = internal->further_options;
                  show_setup_event->show_type   = 0;

                  return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);

               } else {
                  global_setup_next      = internal->further_options;
                  global_setup_parent_id = internal->object_id;

                  return show_setup_actual ();
               }
            } else {
               toolbox_event.hdr.flags      = 0;
               toolbox_event.hdr.size       = sizeof (PrintDbox_SetUp_Event);
               toolbox_event.hdr.event_code = PrintDbox_SetUp;

               return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
            }
         }
         break;
   }
   if ((id_block->self_component == PrintDbox_ActionButton_Print) || (id_block->self_component == PrintDbox_ActionButton_Save)) {

      /* The following casts to print_event on the basis that save_event is structurally
         equivalent (and people wonder why I like structurally equivalence). */

      PrintDbox_Print_Event *print_event = (PrintDbox_Print_Event *)&toolbox_event;

      DEBUG debug_output ("e","PrintDbox: object_id = 0x%x, method 0x%x\n",internal->sub_object_id, RadioButton_GetState);

      print_event->hdr.flags = 0;

      regs.r[0] = 0;
      regs.r[1] = internal->sub_object_id;
      regs.r[2] = RadioButton_GetState;
      regs.r[3] = PrintDbox_RadioButton_Sideways;

      if(!_kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs))
         print_event->hdr.flags    =  (regs.r[0]) ? PrintDboxEvents_PrintSave_Sideways : 0;

      regs.r[0] = 0;
      regs.r[1] = internal->sub_object_id;
      regs.r[2] = OptionButton_GetState;
      regs.r[3] = PrintDbox_OptionButton_Draft;

      if (!_kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs))
         print_event->hdr.flags    |= (regs.r[0]) ? PrintDboxEvents_PrintSave_Draft : 0;

/*
      regs.r[0] = 0;
      regs.r[1] = internal->sub_object_id;
      regs.r[2] = RadioButton_GetState;
      regs.r[3] = PrintDbox_RadioButton_FromTo;

      if(!_kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) {

         DEBUG debug_output ("e","PrintDbox: no error\n");

         if (regs.r[0]) {

            DEBUG debug_output ("e","PrintDbox: FromTo selected\n");

            regs.r[0] = 0;
            regs.r[1] = internal->sub_object_id;
            regs.r[2] = WritableField_GetValue;
            regs.r[3] = PrintDbox_WritableField_From;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            sscanf ((char *) regs.r[0], "%d", &internal->from);

            DEBUG debug_output ("e","PrintDbox: internal->from = %x('%s')\n",internal->from,(char *)regs.r[0]);

            regs.r[0] = 0;
            regs.r[1] = internal->sub_object_id;
            regs.r[2] = WritableField_GetValue;
            regs.r[3] = PrintDbox_WritableField_To;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            sscanf ((char *) regs.r[0], "%d", &internal->to);
         } else {
            DEBUG debug_output ("e","PrintDbox: error occured looking at radio buttons All/FromTo, assumed absent\n");

            internal->from = -1;
         }
      }
*/
      DEBUG debug_output ("e","PrintDbox: internal->from = %d\n",internal->from);

      print_event->start_page   = internal->from;
      print_event->finish_page  = internal->to;
      print_event->copies       =
      print_event->scale_factor = 0;

      regs.r[0] = 0;
      regs.r[1] = internal->sub_object_id;
      regs.r[2] = NumberRange_GetValue;
      regs.r[3] = PrintDbox_NumberRange_Copies;

      if (! _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs))
         print_event->copies   = regs.r[0];

      regs.r[0] = 0;
      regs.r[3] = PrintDbox_NumberRange_Scale;

      if (!_kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs))
         print_event->scale_factor = regs.r[0];

      DEBUG debug_output ("e","PrintDbox: object 0x%x, from %d to %d, copies %d, at scale %d\n",internal->object_id,print_event->start_page, print_event->finish_page, print_event->copies, print_event->scale_factor);
   }
   regs.r[0] = 0;
   regs.r[1] = internal->object_id;
   regs.r[2] = id_block->self_component;
   regs.r[3] = (int) &toolbox_event;

   return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);

/*
   return dialogue_completed (internal->object_id);
*/
}
@


4.1
log
@Initial revision
@
text
@a30 1
#include "services.h"
d36 2
a37 2
#include "objects.toolbox.h"
#include "objects.printdbox.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
