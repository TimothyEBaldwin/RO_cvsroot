head	4.3;
access;
symbols
	DCS-1_14:4.3
	DCS-1_13:4.3
	DCS-1_12:4.2
	RO_5_07:4.2
	DCS-1_11:4.2
	DCS-1_10:4.2
	DCS-1_09:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.4
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	Ursula_12May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Expresso_final_190298:4.2
	sbrodie_DCS_1_07:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.21.21.20;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	P6DEalm7EZoMpNxy;

4.2
date	98.02.04.19.47.37;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.01;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.01;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.40.04;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.11.23;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.35.38;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Relocated DCS resources up a directory where shared makefiles expect them to be.

Version 1.13. Tagged as 'DCS-1_13'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "slist.h"

#include "objects/toolbox.h"
#include "objects/DCS.h"
#include "objects/quit.h"

#include "object.h"
#include "events.h"
#include "task.h"
#include "show.h"

static Object *show_obj=NULL;
static DCSAboutToBeShownEvent show_ev;
static int r4,r5;

static int dcs_events[] = {DCS_DialogueCompleted,DCS_Discard,DCS_Cancel,DCS_Save};
static int quit_events[] = {Quit_DialogueCompleted,Quit_Cancel,Quit_Quit};

static _kernel_oserror *events_raise_event(ObjectID obj,ComponentID comp, int * ev_array)
{
    _kernel_swi_regs regs;
    ToolboxEvent event;

    regs.r[0] = 0;
    regs.r[1] = (int) obj;
    regs.r[2] = (int) comp;
    regs.r[3] = (int) &event;

    event.hdr.size = sizeof(ToolboxEventHeader);
    event.hdr.event_code = ev_array[comp & 0xff];
    event.hdr.flags = 0;

    return _kernel_swi(Toolbox_RaiseToolboxEvent,&regs,&regs);

}

extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox postfilter, when an event happens which
     * this module has expressed an interest in.
     * R0 = Wimp event reason code
     * R1 ->client's Wimp event block
     * R2 = Task Descriptor of task interested in the event
     * R3 ->6-word "ID block" as passed to Toolbox_Initialise
     *
     */

    /*
     * This function gets a pointer to the task interested in the event in
     * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
     * If the event is dealt with by this module (eg ID block gets updated).
     * then set R0 to non-null before return.
     */

    int event_code              = r->r[0];
    TaskDescriptor *t = (TaskDescriptor *) r->r[2];
    IDBlock         *id_block   = (IDBlock *)r->r[3];
    wimp_PollBlock  *poll_block = (wimp_PollBlock *)r->r[1];

           /* we're only interested in toolbox events on our windows */

    if (event_code != wimp_ETOOLBOX_EVENT)
       return NULL;

    switch (poll_block->toolbox_event.hdr.event_code) {
        case ActionButton_Selected:
           if (!(slist_find_member((void *) &(t->object_list),0,id_block->self_id)))
              return NULL;
           /* need to raise appropriate events */
           {
           Object *obj;

           /* make sure its hidden */

           _swix(Toolbox_HideObject, _IN(0) |_IN(1), 0, id_block->self_id);

           /* we use the underlying window's client handle for storing the object */

           _swix(Toolbox_GetClientHandle, _IN(0) | _IN(1) | _OUT(0), 0, id_block->self_id, &obj);

           if (obj ->flags & QClass)
                events_raise_event(obj->id,id_block->self_component,quit_events);
           else events_raise_event(obj->id,id_block->self_component,dcs_events);

           break;
           }

        case DCS_AboutToBeShown:
        case Quit_AboutToBeShown:

           /* have we got an about to be shown event ? No need to check for object validity
              as these events should only be raised on DCS/Quit objects */

           show_obj = slist_find_member((void *) &(t->object_list),1,id_block->self_id);

           r4 = id_block->parent_id;
           r5 = id_block->parent_component;

            /* don't need to distinguish between Quit and DCS */

           show_ev  = *((DCSAboutToBeShownEvent *) (&poll_block->toolbox_event));
           break;

        case Window_HasBeenHidden:
         {
                /* need to get window -> dcs/quit object, then raise hidden event */
           Object *obj;

           if (!(slist_find_member((void *) &(t->object_list),0,id_block->self_id)))
              return NULL;

           /* we use the underlying window's client handle for storing the object */

           _swix(Toolbox_GetClientHandle, _IN(0) | _IN(1) | _OUT(0), 0, id_block->self_id, &obj);

          if (obj ->flags & QClass)
              events_raise_event(obj->id,0,quit_events);
          else events_raise_event(obj->id,0,dcs_events);

          break;
         }
        default:
           break;
    }

    return NULL;
}



extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{
    IGNORE(r);
    
    /*
     * called from the main Toolbox prefilter, when Wimp_Poll is called.
     * R0 = mask passed to Wimp_Poll
     * R1 ->client's poll block passed to Wimp_Poll
     * R2 = Task Descriptor.
     *
     */

    /*
     * This function gets a pointer to the current task in
     * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
     * This function can enable additional events by zero-ing bits in
     * r->r[0]
     */

    /* if the previous call to the postfilter was for an about to be shown event,
        then we now do the show */

    if (show_obj) {
       _kernel_swi_regs regs,dummy;

       DEBUG  debug_output("events","In prefilter, about to show object %8x\n",show_obj);
       regs.r[0] = show_ev.hdr.flags;
       regs.r[2] = show_ev.r2;
       regs.r[3] = (int) &(show_ev.r3);
       regs.r[4] = r4;
       regs.r[5] = r5;
       dummy.r[4] = (int) &regs;

       show_do_show(&dummy,show_obj);

       show_obj = NULL;
    }
    return NULL;
}

@


4.2
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@a30 1
#include "services.h"
d36 3
a38 3
#include "objects.toolbox.h"
#include "objects.dcs.h"
#include "objects.quit.h"
d168 2
a169 1

@


4.1
log
@Initial revision
@
text
@d44 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
