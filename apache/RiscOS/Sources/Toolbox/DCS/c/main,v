head	4.5;
access;
symbols
	DCS-1_14:4.5
	DCS-1_13:4.5
	DCS-1_12:4.4
	RO_5_07:4.4
	DCS-1_11:4.4
	DCS-1_10:4.4
	DCS-1_09:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Ursula_RiscPC:4.3.0.6
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.4
	Ursula_12May1998:4.3.0.2
	rthornb_UrsulaBuild_01May1998:4.3
	sbrodie_Expresso_final_190298:4.3
	sbrodie_DCS_1_07:4.3
	sbrodie_Expresso_BETA6_19980204:4.3
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.2
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2015.08.18.21.21.20;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	P6DEalm7EZoMpNxy;

4.4
date	2000.05.04.12.52.29;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	97.10.13.12.05.16;	author rbuckley;	state Exp;
branches;
next	4.2;

4.2
date	97.07.08.10.12.41;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.01;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.01;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.40.07;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.19.15.52.37;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.11.25;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.35.41;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Relocated DCS resources up a directory where shared makefiles expect them to be.

Version 1.13. Tagged as 'DCS-1_13'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   main.c
 * Purpose: main module of a DCS Object module
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "Global/Services.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objmodule.h"
#include "rmensure.h"

#include "objects/toolbox.h"
#include "objects/DCS.h"
#include "objects/quit.h"

#include "object.h"
#include "create.h"
#include "delete.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"

#include "task.h"

#include "DCSHdr.h"

#define MAX_CLASS_SWI_METHODS 7
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t,int class) =
       {
            create_object,
            delete_object,
            NULL,
            show_object,
            hide_object,
            getstate_object,
            miscop_object
       };



/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

#ifndef ROM
extern int Resources(void);
#endif

extern _kernel_oserror *DCS_final (int fatal, int podule, void *pw)
{
    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    /*
     * if tasks are active or modules registered, refuse to die
     */

    if (task_any_active())
    {
        _kernel_oserror *e = make_error (DCS_TasksActive, 0);
        DEBUG debug_output ("finalise", "W:failed to finalise %s\n", e->errmess);
        return e;
    }

    /*
     * close our messages file
     */

    messages_file_close();


#ifndef ROM
    /*
     * ... and deregister from ResourceFS
     */

    objmodule_deregister_resources(Resources());
#endif


    /*
     * ... and deregister from Toolbox
     */

    objmodule_deregister(0, DCS_ObjectClass);
    objmodule_deregister(0, Quit_ObjectClass);

    /*
     * free up memory we may have left allocated
     */

    mem_free_all ();

    return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */

static _kernel_oserror *register_with_toolbox(void)
{
    _kernel_oserror *e;

    objmodule_ensure_path("DCS$Path", "Resources:$.Resources.DCS.");
    if ((e = objmodule_register_with_toolbox(0, DCS_ObjectClass, DCS_ClassSWI, "DCS:Res")) != NULL)
        return e;

    /* register here with the Toolbox as an Object Module */

    DEBUG debug_output ("init", "Registering with Toolbox\n");

    objmodule_ensure_path("Quit$Path", "Resources:$.Resources.Quit.");
    return objmodule_register_with_toolbox(0, Quit_ObjectClass, Quit_ClassSWI, "Quit:Res");
}

extern _kernel_oserror *DCS_init(const char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror *e;

    IGNORE(cmd_tail);
    IGNORE(podule_base);
    IGNORE(pw);

    if ((e=rmensure("Window","Toolbox.Window","1.10")) !=NULL) return e;

    DEBUG debug_set_var_name("DCS$Debug");

#ifndef ROM
    /*
     * register our resources with ResourceFS
     */

    DEBUG debug_output ("init", "Registering messages files\n");

    objmodule_register_resources(Resources());
#endif

    /*
     * register our messages file with MessageTrans
     */

    objmodule_ensure_path("DCS$Path", "Resources:$.Resources.DCS.");
    if ((e = messages_file_open ("DCS:Messages")) != NULL)
        return e;

    /* Hmm what the **** do we do about two message files ??? */


    /* register here with the Toolbox as an Object Module */

    DEBUG debug_output ("init", "Registering with Toolbox\n");

    return (register_with_toolbox());

}



/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */


extern void DCS_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    IGNORE(pw);

    switch (service_number)
    {

        case Service_ToolboxStarting:
            register_with_toolbox();
            break;

        case Service_ToolboxTaskDied:
            /*
             * task dying - r0 holds task handle
             */

            task_remove (r->r[0]);

            break;

        case Service_ToolboxTaskBorn:
            /* Toolbox task has just started R0  == wimp task handle */

            /*
             * create a new "task descriptor"
             */

            task_add (r->r[0]);

            break;

        default:
            break;
    }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


extern _kernel_oserror *DCS_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    _kernel_oserror *e = NULL;
    TaskDescriptor  *t;

    IGNORE(pw);

    switch (swi_no)
    {
        case DCS_ClassSWI - DCS_00:
        case Quit_ClassSWI - DCS_00:
            if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
            {
                /* make an error here */
            }
            else
            {
                t = task_find (r->r[3]);

                if (t == NULL)
                {
                    /* make an error here */
                }

                e = (*class_swi_methods[r->r[0]])(r, t,swi_no + DCS_SWIChunkBase);
            }
            break;

        case DCS_PostFilter - DCS_00:
            e = events_postfilter (r);
            break;

        case DCS_PreFilter - DCS_00:
            e = events_prefilter (r);
            break;

        default:
            e = error_BAD_SWI;
            break;
    }

    return e;
}

#if debugging

/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *DCS_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case CMD_DCS_Memory:
            mem_print_list();
            break;

        default:
            break;
    }

    return NULL;
}

#endif
@


4.4
log
@  Changed to use common Makefile system.
  Debug build facility added.
Detail:
  Uses core facilities from Common instead of having private copies.
  Makefile vastly simplified to simply define a few macros, then include
    the common Toolbox Makefile which is exported by Common.
Admin:
  Requires Common 0.09 or later (RiscOS/Sources/Toolbox/Common; Common-0_09)
  Requires BuildSys 1.92 or later (RiscOS/BuildSys; BuildSys-1_92)
  Requires Library 0.41 or later (RiscOS/Library; Library-0_41)

Version 1.10. Tagged as 'DCS-1_10'
@
text
@d27 1
a30 1
#include "services.h"
d37 3
a39 3
#include "objects.toolbox.h"
#include "objects.DCS.h"
#include "objects.Quit.h"
d52 1
a52 1
#include "main.h"
d70 2
a71 4
#ifdef ROM
static _kernel_oserror *__ROM;
#else
extern int       res_files(void);
d103 1
a103 1
    objmodule_deregister_resources(res_files());
a119 4
#ifdef ROM
    if(!__ROM) _swix(0xa2c41, 0);
#endif

d142 1
a142 1
extern _kernel_oserror *DCS_init(char *cmd_tail, int podule_base, void *pw)
a149 4
#ifdef ROM
    __ROM = _swix(0xa2c43, _IN(0), pw);
#endif

d161 1
a161 1
    objmodule_register_resources(res_files());
d234 1
a234 1
    switch (swi_no + DCS_SWIChunkBase)
d236 2
a237 2
        case DCS_ClassSWI:
        case Quit_ClassSWI:
d255 1
a255 1
        case DCS_PostFilter:
d259 1
a259 1
        case DCS_PreFilter:
d264 1
d275 1
a275 1
extern _kernel_oserror *DCS_commands(char *arg_string, int argc, int cmd_no, void *pw)
d283 1
a283 1
        case 0:
@


4.3
log
@Build process improvements :
* Standardised make process in common will all other modules in build.
* Internal and external toolbox libraries and headers exported to
  <Lib$Dir>.tboxlibint and <Lib$Dir>.tboxlibs respectivly.
* Resources now localised.
* Local !MkClean and !MkRom now use amu_machine.
@
text
@d34 1
d72 2
a77 10
    _kernel_swi_regs regs;
    _kernel_oserror *e;

#ifndef ROM
    extern int       dcsmess_file(void);
    extern int       dcsres_file(void);
    extern int       quitmess_file(void);
    extern int       quitres_file(void);
#endif

d88 1
a88 1
        e = make_error (DCS_TasksActive, 0);
d105 1
a105 11
    regs.r[0] = dcsmess_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);

    regs.r[0] = dcsres_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);

    regs.r[0] = quitmess_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);

    regs.r[0] = quitres_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);
d113 2
a114 8
    regs.r[0] = 0;
    regs.r[1] = DCS_ObjectClass;
    _kernel_swi (Toolbox_DeRegisterObjectModule, &regs, &regs);

    regs.r[0] = 0;
    regs.r[1] = Quit_ObjectClass;
    _kernel_swi (Toolbox_DeRegisterObjectModule, &regs, &regs);

d132 1
a132 1
_kernel_oserror *register_with_toolbox(void)
a133 2
    _kernel_swi_regs regs;
    char *res_filename;
d136 2
a137 10
     if (getenv ("DCS$Path") == NULL)
        res_filename = "Resources:$.Resources.DCS.Res";
    else
        res_filename = "DCS:Res";

    regs.r[0] = 0;
    regs.r[1] = DCS_ObjectClass;
    regs.r[2] = DCS_ClassSWI;
    regs.r[3] = (int) res_filename;
    if ((e = _kernel_swi (Toolbox_RegisterObjectModule, &regs, &regs)) != NULL)
d144 2
a145 10
     if (getenv ("Quit$Path") == NULL)
        res_filename = "Resources:$.Resources.Quit.Res";
    else
        res_filename = "Quit:Res";

    regs.r[0] = 0;
    regs.r[1] = Quit_ObjectClass;
    regs.r[2] = Quit_ClassSWI;
    regs.r[3] = (int) res_filename;
    return( _kernel_swi (Toolbox_RegisterObjectModule, &regs, &regs));
a149 1
    char            *messages_filename;
a150 7
#ifndef ROM
    _kernel_swi_regs regs;
    extern int dcsmess_file(void);
    extern int dcsres_file(void);
    extern int quitmess_file(void);
    extern int quitres_file(void);
#endif
d171 1
a171 18
    regs.r[0] = dcsmess_file();
    if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
        return e;

    regs.r[0] = quitmess_file();
    if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
        return e;


    DEBUG debug_output ("init", "Registering resource files\n");

    regs.r[0] = dcsres_file();
    if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
        return e;

    regs.r[0] = quitres_file();
    if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
        return e;
d178 2
a179 6
    if (getenv ("DCS$Path") == NULL)
        messages_filename = "Resources:$.Resources.DCS.Messages";
    else
        messages_filename = "DCS:Messages";

    if ((e = messages_file_open (messages_filename)) != NULL)
@


4.2
log
@Ursula branch merged
@
text
@d252 1
a252 1
    /* /* Hmm what the **** do we do about two message files ??? */
d320 1
a320 1
                /* /* make an error here */
d328 1
a328 1
                    /* /* make an error here */
@


4.1
log
@Initial revision
@
text
@d54 1
a54 1
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t,int class) = 
d106 1
a106 1
    
d145 1
a145 1
#ifdef ROM 
d162 1
a162 1
        res_filename = "Resources:Resources.DCS.Res";
d178 1
a178 1
        res_filename = "Resources:Resources.Quit.Res";
d245 1
a245 1
        messages_filename = "Resources:Resources.DCS.Messages";
d250 2
a251 2
        return e;                                            
    
d260 1
a260 1
        
d269 1
a269 1
{             
d280 2
a281 2
            /* 
             * task dying - r0 holds task handle 
d283 1
a283 1
        
@


4.1.4.1
log
@Added tokenisation directives to Messages files.
Made modules open "Resources:$...." not "Resources:....".
@
text
@d54 1
a54 1
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t,int class) =
d106 1
a106 1

d145 1
a145 1
#ifdef ROM
d162 1
a162 1
        res_filename = "Resources:$.Resources.DCS.Res";
d178 1
a178 1
        res_filename = "Resources:$.Resources.Quit.Res";
d245 1
a245 1
        messages_filename = "Resources:$.Resources.DCS.Messages";
d250 2
a251 2
        return e;

d260 1
a260 1

d269 1
a269 1
{
d280 2
a281 2
            /*
             * task dying - r0 holds task handle
d283 1
a283 1

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
