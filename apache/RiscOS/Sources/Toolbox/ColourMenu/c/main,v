head	4.5;
access;
symbols
	ColourMenu-0_23:4.5
	ColourMenu-0_22:4.5
	RO_5_07:4.4
	ColourMenu-0_21:4.4
	ColourMenu-0_20:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Ursula_RiscPC:4.3.0.4
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.2
	Ursula_12May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Expresso_final_190298:4.3
	sbrodie_ColourMenu_0_18:4.3
	sbrodie_Expresso_BETA6_19980204:4.3
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Daytona:4.2
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2015.08.18.21.14.51;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	T41IFUSO5OLDnNxy;

4.4
date	2000.05.04.12.50.12;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	98.02.04.19.47.13;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.07.08.10.12.32;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.21.45;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.21.45;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.38.41;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.19.15.52.29;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.10.58;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.34.30;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.22. Tagged as 'ColourMenu-0_22'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   main.c
 * Purpose: main module of a ColourMenu Object module
 * Author:  TGR
 * History: 18-Jan-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "Global/Services.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "rmensure.h"
#include "mem.h"
#include "os.h"
#include "string32.h"
#include "messages.h"
#include "objmodule.h"
#include "objects/toolbox.h"
#include "objects/colourmenu.h"

#include "object.h"
#include "auxiliary.h"
#include "create.h"
#include "delete.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"

#include "task.h"

#include "ColourMenuHdr.h"

#define MAX_CLASS_SWI_METHODS 7

static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) =
      {
         create_object,
         delete_object,
         NULL, /*copy_object,*/
         show_object,
         hide_object,
         getstate_object,
         miscop_object
      };


/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

#ifndef ROM
extern int Resources(void);
#endif

extern _kernel_oserror *ColourMenu_finalise (int fatal, int podule, void *pw)
{
    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    /*
     * refuse to finalise if tasks active
     */

    if (task_any_active())
        return make_error (ColourMenu_TasksActive, 0);

   mem_freek (global_help_message);
   mem_freek (global_title);

   /*
    * close our messages file
    */

   messages_file_close ();

#ifndef ROM
    /*
     * ... and deregister from ResourceFS
     */

    objmodule_deregister_resources(Resources());
#endif

   /* hide menus before deletion */

   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING) {
      _swix(Wimp_CreateMenu, _IN(1), -1);
   }

   /* deregister object module */

    objmodule_deregister(0, ColourMenu_ObjectClass);

   /*
    * free up memory we may have left allocated
    */

   mem_free_all ();

   return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */

extern _kernel_oserror *ColourMenu_init(const char *cmd_tail, int podule_base, void *pw)
{
   _kernel_oserror    *e;
   int                 buffer_size;

   IGNORE(cmd_tail);
   IGNORE(podule_base);
   IGNORE(pw);

   DEBUG debug_set_var_name("ColourMenu$Debug");

   if ((e = rmensure ("Menu",    "Toolbox.Menu",    "0.22")) != NULL) return e;

   /*
    * register our messages file with Resource FS and MessageTrans
    */

#ifndef ROM
   if ((e = _swix(ResourceFS_RegisterFiles, _IN(0), Resources())) != NULL)
      return e;
#endif

   objmodule_ensure_path("ColourMenu$Path", "Resources:$.Resources.ColourMenu.");

   DEBUG debug_output ("M","ColourMenu: Opening main message file\n");

   if ((e = messages_file_open ("ColourMenu:Messages")) != NULL)
      return e;

   if ((e = messages_file_lookup ("Help", 0, &buffer_size, 0)) != NULL)
      return e;

   if ((global_help_message = mem_alloc (buffer_size)) == NULL)
      return make_error(ColourMenu_AllocFailed,0);

   if ((e = messages_file_lookup ("Help", global_help_message, &buffer_size, 0)) !=NULL)
      return e;

    if ((e = messages_file_lookup ("Title", 0, &buffer_size, 0)) != NULL)
      return e;

   if ((global_title = mem_alloc (buffer_size)) == NULL)
      return make_error(ColourMenu_AllocFailed,0);

   if ((e = messages_file_lookup ("Title", global_title, &buffer_size, 0)) !=NULL)
      return e;

   DEBUG debug_output ("M","ColourMenu: buffer_size is %d (0x%x), title is '%s'\n",buffer_size, (int) &buffer_size, global_title);

   /* register with the Toolbox as an Object Module */
   return objmodule_register_with_toolbox(0, ColourMenu_ObjectClass, ColourMenu_ClassSWI, 0);
}



/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */


extern void ColourMenu_services(int service_number, _kernel_swi_regs *r, void *pw)
{
   (void) pw;

   switch (service_number)
   {
        case Service_ToolboxTaskDied:
            /*
             * task dying - r0 holds task handle
             */

            task_remove (r->r[0]);

            break;

      case Service_ToolboxTaskBorn:
         /* Toolbox task has just started R0  == wimp task handle */

         /*
          * create a new "task descriptor"
          */

         task_add (r->r[0]);

         break;

        case Service_ToolboxStarting:
            /*
             * register with the Toolbox as an Object Module
             */
            objmodule_register_with_toolbox(0, ColourMenu_ObjectClass, ColourMenu_ClassSWI, 0);
            break;

      default:
         break;
   }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


extern _kernel_oserror *ColourMenu_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
   _kernel_oserror *e = NULL;
   TaskDescriptor  *t;

   IGNORE(pw);

   DEBUG debug_output ("M","ColourMenu: SWI no. 0x%x\n",swi_no + ColourMenu_SWIChunkBase);

   switch (swi_no)
   {
      case ColourMenu_ClassSWI - ColourMenu_00:
         if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
         {
            return make_error_hex(ColourMenu_NoSuchMethod,1,r->r[0]);
         }
         else
         {
            t = task_find (r->r[3]);

            if (t == NULL)
            {
               return make_error_hex(ColourMenu_NoSuchTask,1,r->r[3]);
            }
            DEBUG debug_output ("M","ColourMenu: class SWI method %d\n",r->r[0]);
            e = (*class_swi_methods[r->r[0]])(r, t);
         }
         break;

      case ColourMenu_PostFilter - ColourMenu_00:
         e = events_postfilter (r);
         break;

      case ColourMenu_PreFilter - ColourMenu_00:
         e = events_prefilter (r);
         break;

      default:
         e = error_BAD_SWI;
         break;
   }

   return e;
}

#if debugging

/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *ColourMenu_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case CMD_ColourMenu_Memory:
            mem_print_list();
            break;

        default:
            break;
    }

    return NULL;
}
#endif
@


4.4
log
@  Changed to use common Makefile system.
  Debug build facility added.
Detail:
  Uses core facilities from Common instead of having private copies.
  Makefile vastly simplified to simply define a few macros, then include
    the common Toolbox Makefile which is exported by Common.
Admin:
  Requires Common 0.09 or later (RiscOS/Sources/Toolbox/Common; Common-0_09)
  Requires BuildSys 1.92 or later (RiscOS/BuildSys; BuildSys-1_92)
  Requires Library 0.41 or later (RiscOS/Library; Library-0_41)

Version 0.21. Tagged as 'ColourMenu-0_21'
@
text
@d27 1
a30 1
#include "services.h"
d38 2
a39 2
#include "objects.toolbox.h"
#include "objects.colourmenu.h"
d53 1
a53 1
#include "main.h"
d71 2
a72 4
#ifdef ROM
static _kernel_oserror *__ROM;
#else
extern int messages_file(void);
d102 1
a102 1
    objmodule_deregister_resources(messages_file());
a120 4
#ifdef ROM
    if(!__ROM) _swix(0xa2c41, 0);
#endif

d127 1
a127 1
extern _kernel_oserror *ColourMenu_init(char *cmd_tail, int podule_base, void *pw)
a135 4
#ifdef ROM
    __ROM = _swix(0x82c43, _IN(0), pw);
#endif

d145 1
a145 1
   if ((e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file())) != NULL)
d237 1
a237 1
      case ColourMenu_ClassSWI - ColourMenu_SWIChunkBase:
d255 1
a255 1
      case ColourMenu_PostFilter - ColourMenu_SWIChunkBase:
d259 1
a259 1
      case ColourMenu_PreFilter - ColourMenu_SWIChunkBase:
d264 1
d275 1
a275 1
extern _kernel_oserror *ColourMenu_commands(char *arg_string, int argc, int cmd_no, void *pw)
d283 1
a283 1
        case 0:
@


4.3
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@d37 1
d73 2
a78 5
   _kernel_swi_regs regs;
#ifndef ROM
   extern int       messages_file(void);
#endif

d104 1
a104 2
    regs.r[0] = messages_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);
d110 1
a110 4

      regs.r[1] = -1;

      _kernel_swi (Wimp_CreateMenu, &regs, &regs);
d115 1
a115 4
   regs.r[0] = 0;
   regs.r[1] = ColourMenu_ObjectClass;

   _kernel_swi(Toolbox_DeRegisterObjectModule, &regs, &regs);
a132 1

a134 2
   char               *messages_filename;
   _kernel_swi_regs    regs;
a136 3
#ifndef ROM
   extern int messages_file(void);
#endif
d143 1
a143 1
    __ROM = _swix(0xa2c43, _IN(0), pw);
d155 1
a155 2
   regs.r[0] = messages_file();
   if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
d159 1
a159 4
   if (getenv ("ColourMenu$Path") == NULL)
      messages_filename = "Resources:$.Resources.ColourMenu.Messages";
   else
      messages_filename = "ColourMenu:Messages";
d163 1
a163 1
   if ((e = messages_file_open (messages_filename)) != NULL)
d187 1
a187 10

   regs.r[0] = 0;
   regs.r[1] = ColourMenu_ObjectClass;
   regs.r[2] = ColourMenu_ClassSWI;
   regs.r[3] = 0;

   if ((e = _kernel_swi(Toolbox_RegisterObjectModule, &regs, &regs)) != NULL)
    return e;

   return NULL;
d197 1
a197 3
    _kernel_swi_regs regs;

   IGNORE(pw);
d225 1
a225 7

            regs.r[0] = 0;
            regs.r[1] = ColourMenu_ObjectClass;
            regs.r[2] = ColourMenu_ClassSWI;
            regs.r[3] = 0;
            _kernel_swi (Toolbox_RegisterObjectModule, &regs, &regs);

d245 1
a245 1
   switch (swi_no + ColourMenu_SWIChunkBase)
d247 1
a247 1
      case ColourMenu_ClassSWI:
d265 1
a265 1
      case ColourMenu_PostFilter:
d269 1
a269 1
      case ColourMenu_PreFilter:
@


4.2
log
@Ursula branch merged
@
text
@a43 1
#include "copy.h"
@


4.1
log
@Initial revision
@
text
@d177 1
a177 1
      messages_filename = "Resources:Resources.ColourMenu.Messages";
@


4.1.4.1
log
@Added tokenisation directives to Messages files.
Made modules open "Resources:$...." not "Resources:....".
@
text
@d177 1
a177 1
      messages_filename = "Resources:$.Resources.ColourMenu.Messages";
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
