head	4.3;
access;
symbols
	Window-1_79:4.3
	Window-1_78:4.3
	Window-1_77:4.3
	Window-1_76:4.3
	Window-1_75:4.2
	Window-1_74:4.2
	Window-1_73:4.2
	Window-1_72:4.2
	Window-1_71:4.2
	RO_5_07:4.2
	Window-1_70:4.2
	Window-1_69:4.2
	Window-1_68:4.2
	Window-1_67:4.2
	Window-1_66:4.2
	Window-1_65:4.2
	Window-1_64:4.2
	Window-1_63:4.2
	Window-1_62:4.2
	Window-1_61:4.2
	Window-1_60:4.2
	Window-1_59:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Window-1_58:4.2
	Ursula_RiscPC:4.2.0.8
	Window-1_57:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	Ursula:4.2.0.6
	Ursula_bp:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	Window-1_56:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	Window-1_55:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	Window-1_54:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	Window-1_53:4.2
	Window-1_52:4.2
	Window-1_51:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Window_1_49:4.2
	afrost_NC2_Generic:4.1.7.2
	sbrodie_Window_1_48:4.2
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Window_1_46:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Window_1_44:4.2
	Spinner_RCA116:4.1.7.2
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spin_merge_8Jul97:4.1.7.2
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Ursula_bp_13Jun97:4.2
	Spin_merge_13Jun97:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.2
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.22.05.08;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	oMg9J5QqfRoPENxy;

4.2
date	97.05.13.09.12.29;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.21;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.21;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.38;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.46;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.19;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.17.17.09.10;	author pwombwel;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   optbut.c
 * Purpose: option button gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          21-Mar-94: CSM: *Really* created
 *          11-Feb-97: EPW: Added SetFont method
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"

#include "../globals.h"
#include "../gadgets.h"
#include "../object.h"
#include "../veneers.h"

#include "optbut.h"

ICONLIST(3)
extern int WIMP_WINDOW;
extern WindowInternal *CURRENT_WINDOW;

typedef struct _option_button_internal {
  int          text_icon_handle ;
  int          button_icon_handle ;
  OptionButton option_button ;  /* Fill this in from gadget_template */
} option_button_internal ;

_kernel_oserror *option_button_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  ti, bi;
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    option_button_internal *ob;
    int xsize;

    IGNORE(window);
    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the display's template (ie its textual string).
     */

    ob = mem_allocate (sizeof (option_button_internal) +
                                gadget_template->data.option_button.max_label_len
                                , "option_button_add, option_button_internal type") ;
    if (ob == NULL)
        return out_of_memory ();

    gadget->data = (void *) ob ;

    ob->option_button.max_label_len = gadget_template->data.option_button.max_label_len ;

    ob->option_button.label = ob->option_button.max_label_len ? (char *) (ob + 1) : "";

    string_copy_chk (ob->option_button.label, gadget_template->data.option_button.label,ob->option_button.max_label_len);

    ob->option_button.event      = (gadget_template->data.option_button.event == 0) ?
                                    OptionButton_StateChanged :
                                    gadget_template->data.option_button.event ;

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    /*
     * First find out how big an 'opton' is (assume that 'optoff' is the same size)
     */

    regs.r[0] = 40 ; /* Get sprite info */
    regs.r[1] = 0 ; /* Unused */
    regs.r[2] = (int) "opton" ;
    if ((e = _kernel_swi (Wimp_SpriteOp, &regs, &regs)) != NULL)
      goto error;

    xsize = regs.r[3] ;

    xsize = xsize << (read_mode_variable(regs.r[6],4)) ;

    ti.window_handle                        = window_handle ;
    ti.icon.data.indirect_text.buffer       = ob->option_button.label ;
    ti.icon.data.indirect_text.buff_len     = ob->option_button.max_label_len ;
    ti.icon.data.indirect_text.valid_string = style_OPTION_BUTTON_TEXT_VALIDSTR ;
    ti.icon.flags                           = style_OPTION_BUTTON_TEXT_ICONFLAGS ;

    /* Get eigen factors here... */

    ti.icon.bbox.xmin                       = gadget_template->hdr.xmin + xsize ; 
    ti.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
    ti.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
    ti.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

    bi.window_handle                                   = window_handle ;
    bi.icon.data.indirect_text_and_sprite.buffer       = "" ;
    bi.icon.data.indirect_text_and_sprite.buff_len     = 1 ;
    bi.icon.data.indirect_text_and_sprite.valid_string = style_OPTION_BUTTON_BUTTON_VALIDSTR ;
    bi.icon.flags                                      = style_OPTION_BUTTON_BUTTON_ICONFLAGS ;

    bi.icon.bbox.xmin                       = gadget_template->hdr.xmin ;
    bi.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
    bi.icon.bbox.xmax                       = gadget_template->hdr.xmin + xsize ;
    bi.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

    if (OptionButton_On & gadget_template->hdr.flags) bi.icon.flags |= wimp_ICONFLAGS_INVERT;

    /*
     * Create the underlying wimp icon (and store its handle).
     */

    if ((e= CreateIcon(ti,&(ob->text_icon_handle))) !=NULL) goto error;

    if ((e= CreateIcon(bi,&(ob->button_icon_handle))) !=NULL) goto error;


    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = ob->text_icon_handle;
    IconList[1] = ob->button_icon_handle;

    return NULL;


error:

    if (ob != NULL)
        mem_free (ob, "freeing option button");

    return e;
}

_kernel_oserror *option_button_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_swi_regs        regs;
  _kernel_oserror        *e;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  option_button_internal *ob        = (option_button_internal *) gadget->data ;

  IGNORE(window);

  DEBUG debug_output ("option", "option_button_method: entry\n\r") ;

  switch (method)
  {
    case OptionButton_SetLabel:

      /* Should I check string length here, or cheerfully reallocate? */

      DEBUG debug_output ("option", "optionButton_SetLabel: string supplied was %s\n\r", (char *) user_regs->r[4]) ;
      DEBUG debug_output ("option", "optionButton_SetLabel: we think max buffer len is %d, supplied string len is %d\n\r",
                          ob->option_button.max_label_len, string_length ((char *) user_regs->r[4])) ;

      if (!string_copy_chk (ob->option_button.label, (char *) user_regs->r[4], ob->option_button.max_label_len ))
      {
        DEBUG debug_output ("option", "optionButton_SetValue: string was larger than previous max\n\r") ;
        return buffer_too_short();
      }

      /*
       * Redraw the gadget
       */

      if ((e = gadgets__redraw_gadget (WIMP_WINDOW, &(gadget->gadget_hdr))) != NULL)
        return (e) ;

      break ;


    case OptionButton_GetLabel:

      string_to_buffer((char *)user_regs->r[4],ob->option_button.label,&(user_regs->r[5]));

      break ;


    case OptionButton_SetEvent:

      ob->option_button.event = user_regs->r[4] ;

      break ;


    case OptionButton_GetEvent:

      user_regs->r[METHOD_RETURN_REGISTER + 0] = ob->option_button.event ;

      break ;


    case OptionButton_SetState:
    {
#if 0
      ToolboxEvent 	    event ;
#endif
      wimp_SetIconState	    set ;

      set.window_handle = WIMP_WINDOW;
      set.icon_handle   = ob->button_icon_handle ;
      set.EOR_word      = (user_regs->r[4] == 1) ? wimp_ICONFLAGS_INVERT : 0 ;
      set.clear_word    = wimp_ICONFLAGS_INVERT ;
      regs.r[1]         = (int) &set ;
      if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
        return (e) ;


#if 0

/* not used in first release */

      event.hdr.size       = sizeof (ToolboxEventHeader) + 8 ;
      event.hdr.event_code = ob->option_button.event ;
      event.hdr.flags = 0;
      event.data.words[0]  = 0 ; /* Mouse buttons */
      event.data.words[1]  = user_regs->r[4] ? 1 : 0 ; /* State we've set it to */

      if ((e = gadgets_raise_event (window, gadget->gadget_hdr.component_id, &event)) != NULL)
           return (e);
#endif

      break ;
    }

    case OptionButton_GetState:
    {
      wimp_GetIconState get ;

      get.window_handle = WIMP_WINDOW ;
      get.icon_handle   = ob->button_icon_handle ;
      regs.r[1]         = (int) &get ;
      if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
        return (e);

      user_regs->r[METHOD_RETURN_REGISTER + 0] = (get.icon.flags & wimp_ICONFLAGS_INVERT) ? 1 : 0 ;

      DEBUG debug_output ("optbut", "OptionButton_GetState: returning %d\n\r", (get.icon.flags & wimp_ICONFLAGS_INVERT) ? 1 : 0) ;

      break ;
    }

    case OptionButton_SetFont:
      return (gadgets_set_font(CURRENT_WINDOW, ob->text_icon_handle,
        	(char*) user_regs->r[4], user_regs->r[5], user_regs->r[6],
        	style_OPTION_BUTTON_TEXT_ICONFLAGS));
      break;

    default:

      return (BadMethod(method));
      break ;
  }

  return NULL ;
}

_kernel_oserror *option_button_mouse_click (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  option_button_internal *ob   = (option_button_internal *) gadget->data ;
  _kernel_swi_regs        regs ;
  _kernel_oserror        *e ;
  wimp_GetIconState       get ;
  wimp_SetIconState       set ;
  ToolboxEvent            event ;


  DEBUG debug_output ("option", "Click on option button %s (buttons %d)\n\r",
    ob->option_button.label, poll_block->mouse_click.buttons) ;


  if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)) &&
       ((poll_block->mouse_click.icon_handle == ob->text_icon_handle) ||
        (poll_block->mouse_click.icon_handle == ob->button_icon_handle)))
  {
    /*
     * Clear the selected bit of the text icon, in case
     */
    get.window_handle = set.window_handle = poll_block->mouse_click.window_handle ;
    get.icon_handle   = set.icon_handle   = ob->text_icon_handle ;
    regs.r[1]         = (int) &get ;
    if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
      return (e);

    if (get.icon.flags & wimp_ICONFLAGS_INVERT)
    {
      set.EOR_word   = 0 ;
      set.clear_word = wimp_ICONFLAGS_INVERT ; /* Clear */
      regs.r[1]      = (int) &set ;
      if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
        return (e);
    }

    /*
     * Toggle the selected bit of the button icon
     * Window handle still set
     */
    get.window_handle = set.window_handle = poll_block->mouse_click.window_handle ;
    get.icon_handle   = set.icon_handle   = ob->button_icon_handle ;
    regs.r[1]         = (int) &get ;
    if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
      return (e);

    set.EOR_word    = wimp_ICONFLAGS_INVERT ;
    set.clear_word  = 0 ; /* Toggle */
    regs.r[1]       = (int) &set ;
    if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
      return (e);

    event.hdr.size       = sizeof (ToolboxEventHeader) + 8 ;
    event.hdr.event_code = ob->option_button.event ;
    event.hdr.flags      = poll_block->mouse_click.buttons ;

    /*
     * The line below is odd since we've just inverted the state
     */
    event.data.words[0]  = (get.icon.flags & wimp_ICONFLAGS_INVERT) ? 0 : 1 ;

   if( gadget->gadget_hdr.flags & OptionButton_GenerateStateChange) {
     if ((e = gadgets_raise_event (window, gadget->gadget_hdr.component_id, &event)) != NULL)
           return (e);                                               
   }

    *claimed = TRUE ;
  }
  else
  {
    *claimed = FALSE ;
  }

  return NULL ;
}
@


4.2
log
@Spinner branch merged
@
text
@a31 1
#include "services.h"
d38 2
a39 2
#include "objects.toolbox.h"
#include "objects.window.h"
d41 4
a44 5
#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.veneers.h"
#include "^.main.h"
@


4.1
log
@Initial revision
@
text
@d20 1
d52 1
d276 6
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Added SetFont methods for Radio & Option buttons
Added Service_StartWimp (0x49) to cope with softloading a
window manager *after* this module.
@
text
@a19 1
 *          11-Feb-97: EPW: Added SetFont method
a50 1
extern WindowInternal *CURRENT_WINDOW;
a273 6

    case OptionButton_SetFont:
      return (gadgets_set_font(CURRENT_WINDOW, ob->text_icon_handle,
        	(char*) user_regs->r[4], user_regs->r[5], user_regs->r[6],
        	style_OPTION_BUTTON_TEXT_ICONFLAGS));
      break;
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
