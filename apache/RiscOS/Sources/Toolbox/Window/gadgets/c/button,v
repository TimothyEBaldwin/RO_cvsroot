head	4.3;
access;
symbols
	Window-1_79:4.3
	Window-1_78:4.2
	Window-1_77:4.2
	Window-1_76:4.2
	Window-1_75:4.1
	Window-1_74:4.1
	Window-1_73:4.1
	Window-1_72:4.1
	Window-1_71:4.1
	RO_5_07:4.1
	Window-1_70:4.1
	Window-1_69:4.1
	Window-1_68:4.1
	Window-1_67:4.1
	Window-1_66:4.1
	Window-1_65:4.1
	Window-1_64:4.1
	Window-1_63:4.1
	Window-1_62:4.1
	Window-1_61:4.1
	Window-1_60:4.1
	Window-1_59:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Window-1_58:4.1
	Ursula_RiscPC:4.1.0.10
	Window-1_57:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	Ursula:4.1.0.8
	Ursula_bp:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	Window-1_56:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	Window-1_55:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	Window-1_54:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	Window-1_53:4.1
	Window-1_52:4.1
	Window-1_51:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Window_1_49:4.1
	afrost_NC2_Generic:4.1.7.1
	sbrodie_Window_1_48:4.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_Window_1_46:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	sbrodie_Window_1_44:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Ursula_bp_13Jun97:4.1
	Spin_merge_13Jun97:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2018.03.21.21.16.00;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	DdmkeShLu70MYmvA;

4.2
date	2015.08.18.22.05.07;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	oMg9J5QqfRoPENxy;

4.1
date	96.11.05.09.23.19;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.19;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.31;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.38;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.12;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Button_GetFlags method fixes
The gadget copy of the Wimp flags was not being correctly updated, should be
  newflags = (oldflags BIC clear_word) ^ eor_word
per analysis in ticket #442.
In passing, it was also noted that the eor_word was not being masked, meaning it would be possible to toggle the indirect icon flag - breaking the rules set out on the User Interface Toolbox manual for that gadget type.

button.c: Fix flags copy, and mask correctly. Trim some superfluous breaks.
draggable.c: Fix out of bounds array access, found by static analysis.

Version 1.79. Tagged as 'Window-1_79'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   button.c
 * Purpose: button gadgets
 * Author:  Neil Kelleher
 * History: 22-Feb-94: IDJ: created
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"

#include "../globals.h"
#include "../gadgets.h"
#include "../object.h"

#include "button.h"

ICONLIST(2)
extern int WIMP_WINDOW;
extern WindowInternal *CURRENT_WINDOW;

typedef struct _button
{
  int   icon_handle;
  unsigned int   flags;
  unsigned int   mask;
  char  *valid,*value;
  int   max_value,max_valid;
} button;

_kernel_oserror *button_add      (GadgetInternal *gadget, ObjectID window,
                                int **icon_list, Gadget *gadget_template, int window_handle)
{
    wimp_IconCreate  i;
    _kernel_oserror *e=NULL;
    button           *l;
    int temp=0;
    wimp_GetWindowInfo wwin;
    window =window;

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the button's template (ie its textual button string).
     */

    temp = gadget_template->data.button.max_value + gadget_template->data.button.max_validation;

    l = mem_allocate (sizeof (button) + temp, "button_add, button type") ;
    if (l == NULL)
        return out_of_memory();

    gadget->data = (void *) l ;

    l->flags = (i.icon.flags   =  wimp_ICONFLAGS_INDIRECT | gadget_template->data.button.button_flags);


    l->max_value = gadget_template->data.button.max_value;
    l->max_valid = gadget_template->data.button.max_validation;

    l->value = ((char *) l)+sizeof(button);
    l->valid = ((char *) l)+sizeof(button) + l->max_value;

    if (!string_copy_chk (l->value,gadget_template->data.button.value,l->max_value)) {
        /* given a NULL pointer */
        if(l->max_value) *(l->value) = '\0';
        else l->value = "";
    }
    if( !string_copy_chk (l->valid,gadget_template->data.button.validation,l->max_valid)) {
        /* given a NULL pointer */
        if(l->max_valid) *(l->valid) = '\0';
        else l->valid = "";
    }

    if (l->flags & wimp_ICONFLAGS_TEXT) {
        l->mask = ~(wimp_ICONFLAGS_TEXT | wimp_ICONFLAGS_INDIRECT );

        i.icon.data.indirect_text.buffer       = l->value ;
        i.icon.data.indirect_text.valid_string = l->valid;
        i.icon.data.indirect_text.buff_len     = l->max_value ;
    }
    else if (l->flags & wimp_ICONFLAGS_SPRITE) {
        l->mask = ~(wimp_ICONFLAGS_SPRITE | wimp_ICONFLAGS_INDIRECT );

      if (gadget_template->hdr.flags & Button_TaskSpriteArea) {
        int temp = (int) &wwin;
        wwin.window_handle = window_handle;
        if (window_handle != NULL)
            _swix(Wimp_GetWindowInfo,_IN(1), temp +1);   /* get window bits without icons */
        else
            wwin.window.sprite_area = (void *) 1;
        i.icon.data.indirect_sprite.sprite_area = wwin.window.sprite_area;
       }
        else i.icon.data.indirect_sprite.sprite_area = (void *) 1;

        i.icon.data.indirect_sprite.name_len = l->max_value;
        i.icon.data.indirect_sprite.sprite.name=l->value;
    }


    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    i.window_handle                        = window_handle;

    SetCoords(i)

    /*
     * Create the underlying wimp icon (and store its handle).
     */


    if ((e = CreateIcon(i,&(l->icon_handle))) != NULL) goto error;

    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = l->icon_handle;

    return NULL;


error:

    if (l != NULL)
        mem_free (l, "freeing button");

    return e;
}


_kernel_oserror *button_mouse_click(GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{

    IGNORE(window);

    if ((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)         ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)          ||
       (poll_block->mouse_click.buttons == (wimp_SELECT_BUTTON <<4))    ||
       (poll_block->mouse_click.buttons == (wimp_ADJUST_BUTTON <<4))    ||
       (poll_block->mouse_click.buttons == (wimp_SELECT_BUTTON <<8))    ||
       (poll_block->mouse_click.buttons == (wimp_ADJUST_BUTTON <<8))    ||
       ((poll_block->mouse_click.buttons == wimp_MENU_BUTTON) 
                && (gadget->gadget_hdr.flags & Button_AllowMenuClicks)))

     {
       *claimed = TRUE;
     }
   else *claimed=FALSE;
   return NULL;

}

_kernel_oserror *button_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_oserror        *e=NULL;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2],update=0;
  button *l           = (button *) gadget->data ;

  window=window;

  DEBUG debug_output ("button", "button_method: entry\n\r") ;

  /* odd code arrangement to help the compiler optimise */

  switch ((method -Button_Base) ){
    case (Button_SetValue -Button_Base):
       update=1;
       if (!string_copy_chk (l->value,(char *)user_regs->r[4],l->max_value))
          return buffer_too_short();

       DEBUG debug_output ("button", "button setting value to %s\n\r",(char *)user_regs->r[4]);

       break;
    case (Button_GetValue -Button_Base):
       string_to_buffer ((char *)user_regs->r[4],l->value,&(user_regs->r[5]));

       break;
    case (Button_SetValidation -Button_Base):
       update =1;
       if (!string_copy_chk (l->valid,(char *)user_regs->r[4],l->max_valid))
          return buffer_too_short();

       break;
    case (Button_GetValidation -Button_Base):
       string_to_buffer ((char *)user_regs->r[4],l->valid,&(user_regs->r[5]));

       break;

    case (Button_SetFont -Button_Base):
        return (gadgets_set_font(CURRENT_WINDOW,l->icon_handle,(char *) user_regs->r[4],user_regs->r[5],
                        user_regs->r[6], l->flags));

    case (Button_GetFlags -Button_Base):
        user_regs->r[0] = l->flags ;
        break;

    case (Button_SetFlags -Button_Base):
        {                 

       wimp_SetIconState w;
       w.window_handle= WIMP_WINDOW;
       w.icon_handle=l->icon_handle;        

       w.clear_word = user_regs->r[4] & l->mask; /* Can't change indirected-ness */
       w.EOR_word = user_regs->r[5] & l->mask;

       l->flags = (l->flags & ~w.clear_word) ^ w.EOR_word;
       _swix(Wimp_SetIconState, _IN(1), &w);

        }
        break;

    default:
        return (BadMethod(method));
  }

  if (update) {
     wimp_SetIconState w = {0,0,0,0};
     w.window_handle= WIMP_WINDOW;
     w.icon_handle=l->icon_handle;
     _swix(Wimp_SetIconState, _IN(1), &w);
  }
  return e;
}
@


4.2
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@a227 2
        break;

d239 2
a240 2
       w.clear_word = user_regs->r[4] & l->mask;
       w.EOR_word = user_regs->r[5];
d242 1
a242 1
       l->flags = (l->flags & ~w.clear_word) | (w.EOR_word & w.clear_word);
a249 1
    break;
@


4.1
log
@Initial revision
@
text
@a28 1
#include "services.h"
d35 2
a36 2
#include "objects.toolbox.h"
#include "objects.window.h"
d38 3
a40 4
#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.main.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
