head	4.2;
access;
symbols
	Window-1_79:4.2
	Window-1_78:4.2
	Window-1_77:4.2
	Window-1_76:4.2
	Window-1_75:4.1
	Window-1_74:4.1
	Window-1_73:4.1
	Window-1_72:4.1
	Window-1_71:4.1
	RO_5_07:4.1
	Window-1_70:4.1
	Window-1_69:4.1
	Window-1_68:4.1
	Window-1_67:4.1
	Window-1_66:4.1
	Window-1_65:4.1
	Window-1_64:4.1
	Window-1_63:4.1
	Window-1_62:4.1
	Window-1_61:4.1
	Window-1_60:4.1
	Window-1_59:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Window-1_58:4.1
	Ursula_RiscPC:4.1.0.10
	Window-1_57:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	Ursula:4.1.0.8
	Ursula_bp:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	Window-1_56:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	Window-1_55:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	Window-1_54:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	Window-1_53:4.1
	Window-1_52:4.1
	Window-1_51:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Window_1_49:4.1
	afrost_NC2_Generic:4.1.7.1
	sbrodie_Window_1_48:4.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_Window_1_46:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	sbrodie_Window_1_44:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Ursula_bp_13Jun97:4.1
	Spin_merge_13Jun97:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2015.08.18.22.05.07;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	oMg9J5QqfRoPENxy;

4.1
date	96.11.05.09.23.20;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.20;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.32;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.39;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   display.c
 * Purpose: display field gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          08-Mar-94: CSM: Written based on label gadget. No events yet
 *          09-Mar-94: CSM: Events work
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"

#include "../globals.h"
#include "../gadgets.h"
#include "../object.h"

#include "display.h"

ICONLIST(2)
extern int WIMP_WINDOW;
extern WindowInternal *CURRENT_WINDOW;

typedef struct _display_field_internal
{
  int   icon_handle ;
  DisplayField display_field ;  /* Fill this in from gadget_template */
} display_field_internal ;

_kernel_oserror *display_field_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  i;
    _kernel_oserror *e;
    display_field_internal *d;
    int temp;

    IGNORE(window);

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the display's template (ie its textual string).
     */

    temp = gadget_template->data.display_field.max_text_len ;

    d = mem_allocate (sizeof (display_field_internal) + temp, "display_field_add, display_field_internal type") ;
    if (d == NULL)
        return out_of_memory();

    gadget->data = (void *) d ;

    d->display_field.max_text_len = temp;

    d->display_field.text = temp ? (char *) (d+1) : "";

    string_copy_chk (d->display_field.text, gadget_template->data.display_field.text,temp);

    DEBUG debug_output ("display", "Creating DisplayField with string %s\n\r", d->display_field.text) ;

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    i.window_handle                        = window_handle ;
    i.icon.data.indirect_text.buffer       = d->display_field.text ;
    i.icon.data.indirect_text.buff_len     = d->display_field.max_text_len ;
    i.icon.data.indirect_text.valid_string = style_DISPLAY_FIELD_VALIDSTR ;
    i.icon.flags                           = style_DISPLAY_FIELD_ICONFLAGS ;

    switch (gadget_template->hdr.flags & DisplayField_Justification)
    {
      case DisplayField_LeftJustify:
        break ;

      case DisplayField_RightJustify:
        i.icon.flags |= wimp_ICONFLAGS_RJUSTIFY ;
        break ;

      case DisplayField_Centred:
        i.icon.flags |= wimp_ICONFLAGS_HCENTRE ;
        break ;
    }

    SetCoords(i)

    /*
     * Create the underlying wimp icon (and store its handle).
     */

    if ((e = CreateIcon(i, &(d->icon_handle))) != NULL)
        goto error;


    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = d->icon_handle;

    return NULL;


error:

    if (d != NULL)
        mem_free (d, "freeing display field");

    return e;
}


_kernel_oserror *display_field_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_oserror        *e=NULL;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  display_field_internal *d         = (display_field_internal *) gadget->data ;
#ifdef GenerateEventsForMethods
  _kernel_swi_regs        regs;
  ToolboxEvent            event ;
#endif
  wimp_Bbox               box;

  IGNORE(window);
   
  DEBUG debug_output ("display", "display_field_method: entry, supplied gadget type %d\n\r",
                       gadget->gadget_hdr.type) ;

  switch (method - DisplayField_Base)
  {
    case (DisplayField_SetValue- DisplayField_Base):

      /* Should I check string length here, or cheerfully reallocate? */
      /* Issue: not clear if ValueChanged_TooLong is just a flag asserted
       * when the text wont fit into the event block returned if DisplayField_
       * ValueChanged is raised as an event
       */
      DEBUG debug_output ("display", "DisplayField_SetValue: string supplied was %s\n\r", (char *) user_regs->r[4]) ;
      DEBUG debug_output ("display", "DisplayField_SetValue: we think max buffer len is %d, supplied string len is %d\n\r",
                          d->display_field.max_text_len, string_length ((char *) user_regs->r[4])) ;

      if (!string_copy_chk (d->display_field.text, (char *) user_regs->r[4], d->display_field.max_text_len ))
      {
        DEBUG debug_output ("display", "DisplayField_SetValue: string was larger than previous max\n\r") ;
        return buffer_too_short();
      }

      /*
       * Redraw the gadget - by using a smaller bounding box, it flickers less.
       */

      box = * ((wimp_Bbox *) &gadget->gadget_hdr.xmin);
      box.xmin += 8;
      box.xmax -= 4;
      box.ymin += 4;
      box.ymax -= 8;

      update_window(WIMP_WINDOW,&box);

      /*
       * Raise toolbox event
       * Hatchet job here - to find out the maximum string length, I use
       *    knowledge of which structures are used...
       * Egads! This code is frogging ugly. Not convinced it's right yet either...
       */

#ifdef GenerateEventsForMethods

/* if this gets enabled in the future, then check below and set flags */

      if (string_length (d->display_field.text) >=
          (sizeof (ToolboxEvent) - sizeof (ToolboxEventHeader) - 4))
      {
        event.hdr.size = sizeof (ToolboxEvent) ; /* It's curved to fit... */
        event.data.words[0] = DisplayField_ValueChanged_TooLong ;
        (void) string_copy_chk ( (char *) &event.data.words[1],
                                 d->display_field.text,
                                 sizeof (ToolboxEvent) - sizeof (ToolboxEventHeader) - 5 ) ;
                                 /* Leave room for terminator! */
        DEBUG debug_output ("display", "DisplayField_SetValue: Truncating string to %d characters\n\r",
                            sizeof (ToolboxEvent) - sizeof (ToolboxEventHeader) - 5) ;
      }
      else
      {
        /* +5 means minus one for the terminator, minus four for the flags
           but add 3 to round up to words, then BIC 3
         */

        event.hdr.size = ((string_length (d->display_field.text) + sizeof (ToolboxEventHeader) + 8) & ~3) ;
        event.data.words[0] = 0 ;
        string_copy ( (char *) &event.data.words[1], d->display_field.text ) ;
        DEBUG debug_output ("display", "DisplayField_SetValue: taking a chance, I think it's short enough\n\r") ;
      }

      event.hdr.event_code = DisplayField_ValueChanged ;

      DEBUG debug_output ("display", "DisplayField_SetValue: raising toolbox event\n\r") ;

      regs.r[0] = 0 ; /* Flags */
      regs.r[1] = (int) window ;
      regs.r[2] = (int) gadget->gadget_hdr.component_id ;
      regs.r[3] = (int) &event ;
      if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
        return (e);
#endif

      break ;

    case (DisplayField_GetValue- DisplayField_Base):
      string_to_buffer ((char *)user_regs->r[4],d->display_field.text,&(user_regs->r[5]));

      DEBUG debug_output ("display", "DisplayField_GetValue: returning string %s\n\r", (char *) user_regs->r[4]) ;

      break ;

    case (DisplayField_SetFont- DisplayField_Base):

       return (gadgets_set_font(CURRENT_WINDOW,d->icon_handle,(char *) user_regs->r[4],user_regs->r[5],
                        user_regs->r[6],style_DISPLAY_FIELD_ICONFLAGS));

       break;
    default:
       return (BadMethod(method));

  }

  return (e) ;
}
@


4.1
log
@Initial revision
@
text
@a31 1
#include "services.h"
d38 2
a39 2
#include "objects.toolbox.h"
#include "objects.window.h"
d41 3
a43 3
#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
