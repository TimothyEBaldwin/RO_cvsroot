head	4.5;
access;
symbols
	Window-1_79:4.5
	Window-1_78:4.5
	Window-1_77:4.5
	Window-1_76:4.5
	Window-1_75:4.4
	Window-1_74:4.4
	Window-1_73:4.4
	Window-1_72:4.4
	Window-1_71:4.4
	RO_5_07:4.4
	Window-1_70:4.4
	Window-1_69:4.4
	Window-1_68:4.4
	Window-1_67:4.4
	Window-1_66:4.4
	Window-1_65:4.4
	Window-1_64:4.4
	Window-1_63:4.4
	Window-1_62:4.4
	Window-1_61:4.4
	Window-1_60:4.4
	Window-1_59:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.4
	sbrodie_Toolbox_Ursula_231198:4.4
	Window-1_58:4.4
	Ursula_RiscPC:4.4.0.4
	Window-1_57:4.4
	rthornb_UrsulaBuild-19Aug1998:4.4
	UrsulaBuild_FinalSoftload:4.4
	rthornb_UrsulaBuild-12Aug1998:4.4
	Ursula:4.4.0.2
	Ursula_bp:4.4
	aglover_UrsulaBuild-05Aug1998:4.4
	Window-1_56:4.4
	rthornb_UrsulaBuild-29Jul1998:4.4
	Window-1_55:4.4
	rthornb_UrsulaBuild-22Jul1998:4.4
	rthornb_UrsulaBuild-15Jul1998:4.4
	rthornb_UrsulaBuild-07Jul1998:4.4
	Window-1_54:4.4
	rthornb_UrsulaBuild-17Jun1998:4.4
	Window-1_53:4.4
	Window-1_52:4.4
	Window-1_51:4.4
	rthornb_UrsulaBuild-03Jun1998:4.4
	rthornb_UrsulaBuild-27May1998:4.4
	rthornb_UrsulaBuild-21May1998:4.4
	Ursula_12May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Window_1_49:4.4
	afrost_NC2_Generic:4.1.7.1
	sbrodie_Window_1_48:4.4
	Daytona:4.3.0.2
	Daytona_bp:4.3
	sbrodie_Expresso_final_190298:4.4
	sbrodie_Window_1_46:4.4
	sbrodie_Expresso_BETA6_19980204:4.3
	sbrodie_Window_1_44:4.3
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Ursula_bp_13Jun97:4.1
	Spin_merge_13Jun97:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2015.08.18.22.05.08;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	oMg9J5QqfRoPENxy;

4.4
date	98.02.11.17.56.51;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	97.10.27.11.52.28;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	97.08.21.16.32.54;	author pwombwel;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.22;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.22;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.45;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.54;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.25;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   writable.c
 * Purpose: writable field gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          15-Mar-94: CSM: Written based on display field gadget.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"

#include "../globals.h"
#include "../gadgets.h"
#include "../object.h"
#include "../utils.h"

ICONLIST(2)
extern int WIMP_WINDOW;
extern WindowInternal *CURRENT_WINDOW;

#include "writable.h"

#define PASS_ON_FOCUS 1
#define PRIVATE_FLAG (1<<23)

typedef struct _writable_field_internal
{
  int           icon_handle ;
  ComponentID   before,after;
  char          *allowable;
  char          *text;
  int           max_allowable_len;
  int           max_text_len;
  ObjectID      window;
} writable_field_internal ;

static _kernel_oserror *set_validation_string(writable_field_internal *w,
                GadgetInternal *gadget, char *string)
{
    /* first check that we have enough space */

    if ((string) && ((string_length(string)+1) > w->max_allowable_len))
        return buffer_too_short();

    strcpy (w->allowable,style_WRITABLE_FIELD_VALIDSTR);
    if (WritableField_Password & gadget->gadget_hdr.flags)
        strcat (w->allowable,";d\\-");

    if (string) {
       strcat (w->allowable, ";a");
       strcat (w->allowable, string);
    }

    /* put KN at end because of 3.10 bug */

    strcat (w->allowable,";KN");

    return NULL;
}
_kernel_oserror *writable_field_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  i;
    _kernel_oserror *e;
    writable_field_internal *w;
    int temp;

    IGNORE (window);

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the writable's template (ie its textual string).
     */

    temp = sizeof (writable_field_internal) + gadget_template->data.writable_field.max_text_len +
           gadget_template->data.writable_field.max_allowable_len + sizeof (style_WRITABLE_FIELD_VALIDSTR) +
           4 /* ";kn\0" */;

    if (gadget_template->data.writable_field.max_allowable_len) temp += 2;     /* ";a" */

    if (WritableField_Password & gadget->gadget_hdr.flags) temp += 5;          /* ";d\\-" */

    w = mem_allocate (temp, "writable_field_add, writable_field_internal type") ;
    if (w == NULL)
        return out_of_memory ();

    gadget->data = (void *) w ;

    /* set up buffer */

    w->max_text_len = gadget_template->data.writable_field.max_text_len ;

    w->text = w->max_text_len ? (char *) (w+1) : "";

    string_copy_chk (w->text, gadget_template->data.writable_field.text,w->max_text_len);

    /* set up validation string */

    w->max_allowable_len = gadget_template->data.writable_field.max_allowable_len ;

    w->allowable = ((char *) (w+1)) + w->max_text_len;

    set_validation_string(w,gadget,gadget_template->data.writable_field.allowable);

    w->before = gadget_template->data.writable_field.before ;
    w->after  = gadget_template->data.writable_field.after  ;

    w->window = window;

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    i.window_handle                        = window_handle ;
    i.icon.data.indirect_text.buffer       = w->text ;
    i.icon.data.indirect_text.buff_len     = w->max_text_len ;
    i.icon.data.indirect_text.valid_string = w->allowable ;
    i.icon.flags                           = style_WRITABLE_FIELD_ICONFLAGS ;

    switch (gadget_template->hdr.flags & WritableField_Justification)
    {
      case WritableField_LeftJustify:
        break ;

      case WritableField_RightJustify:
        i.icon.flags |= wimp_ICONFLAGS_RJUSTIFY ;
        break ;

      case WritableField_Centred:
        i.icon.flags |= wimp_ICONFLAGS_HCENTRE ;
        break ;
    }

    SetCoords(i)

    /*
     * Create the underlying wimp icon (and store its handle).
     */

    if ((e= CreateIcon(i,&(w->icon_handle))) !=NULL) goto error;

    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = w->icon_handle;

    return NULL;


error:

    if (w != NULL)
        mem_free (w, "freeing writable field");

    return e;
}

static _kernel_oserror *raise_event(writable_field_internal *w,int window, GadgetInternal *gadget)
{
       ToolboxEvent            event ;

      /*
       * Raise toolbox event
       * Hatchet job here - to find out the maximum string length, I use
       *    knowledge of which structures are used...
       * Egads! This code is frogging ugly. Not convinced it's right yet either...
       */

      if (string_length (w->text) >=
          (sizeof (ToolboxEvent) - sizeof (ToolboxEventHeader) - 4))
      {
        event.hdr.size      = sizeof (ToolboxEventHeader) ; /* It's curved to fit... */
        event.hdr.flags     = WritableField_ValueChanged_TooLong ;
        event.data.words[0] = 0;                /* make sure there is a null terminated string */

#if 0

/* NK, removed as shouldn't happen ??? */

        (void) string_copy_chk ( (char *) &event.data.words[0],
                                 w->text,
                                 sizeof (ToolboxEvent) - sizeof (ToolboxEventHeader) - 5 ) ;
                                 /* Leave room for terminator! */
        DEBUG debug_output ("writable", "writableField_SetValue: Truncating string to %d characters\n\r",
                            sizeof (ToolboxEvent) - sizeof (ToolboxEventHeader) - 5) ;
#endif
      }
      else
      {
        event.hdr.size = string_length (w->text) + sizeof (ToolboxEventHeader);

        /* round to words, +4 as string_length doesn't include NULL char */
        event.hdr.size = (event.hdr.size +4) &~3;
        event.hdr.flags =0;

        string_copy ( (char *) &event.data.words[0], w->text ) ;
        DEBUG debug_output ("writable", "writableField_SetValue: taking a chance, I think it's short enough\n\r") ;
      }

      event.hdr.event_code = WritableField_ValueChanged ;

      DEBUG debug_output ("writable", "WritableField_SetValue: raising toolbox event\n\r") ;

      return(gadgets_raise_event (window, gadget->gadget_hdr.component_id, &event));
}

_kernel_oserror *writable_field_set_fade (GadgetInternal *gadget, ObjectID window, int do_fade)
{
  _kernel_swi_regs  regs;
  _kernel_oserror  *e;
  wimp_SetIconState set ;
  int block[6];

  writable_field_internal *w = (writable_field_internal *) gadget->data ;

  gadget->gadget_hdr.flags &= ~Gadget_Faded;                /* This is necessary to ensure that the flag */
  gadget->gadget_hdr.flags |= (do_fade) ? Gadget_Faded : 0; /* is inherited from numeric fields etc. */

  window =window;

#ifdef PASS_ON_FOCUS
  if (do_fade) {
     regs.r[1] = (int) block;

     if ((e=_kernel_swi(Wimp_GetCaretPosition,&regs,&regs)) != NULL) return e;

     if ((block[0] == WIMP_WINDOW) && (block[1] == w->icon_handle)) {
         /* if this returns an error, then disown the caret */
         if (writable_field_set_focus(gadget,-1,1))
            wimp_set_caret_position(-1,-1,0,0,0,0);
     }
  }

#endif

  DEBUG debug_output ("fade", "writable_field_set_fade: fade flag is %d\n\r", do_fade) ;

  set.window_handle = WIMP_WINDOW ;
  set.icon_handle   = w->icon_handle ;
  set.clear_word    = wimp_ICONFLAGS_FADED ;
  set.EOR_word      = do_fade ? wimp_ICONFLAGS_FADED : 0 ;
  regs.r[1] = (int) &set ;
  if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
    return (e);

  return (NULL) ;
}

/* if we update a writable in some way, then we may need to update the caret if
   it is in its icon.
*/

static void update_caret(int win,int icon,char *string,int old_len)
{
   _kernel_swi_regs regs;
   int block[6];
   int l;

   regs.r[1] = (int) block;

   if (_kernel_swi(Wimp_GetCaretPosition,&regs,&regs)) return;

   if ((block[0] != win) || (block[1] != icon)) return;

   l=string_length(string);
   if (block[5] == old_len) block[5] = l;
   if (block[5] > l) block[5] = l;

   regs.r[0] = win;
   regs.r[1] = icon;
   regs.r[4] = -1;
   regs.r[5] = block[5];

   _kernel_swi(Wimp_SetCaretPosition,&regs,&regs);

}

_kernel_oserror *writable_field_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_oserror        *e;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  writable_field_internal *w         = (writable_field_internal *) gadget->data ;
  int                    old_len = string_length(w->text);

  IGNORE(window);

  DEBUG debug_output ("writable", "writable_field_method: entry, supplied gadget type %d\n\r",
                       gadget->gadget_hdr.type) ;

  switch ((method - WritableField_Base))
  {
    case (WritableField_SetValue- WritableField_Base):
      DEBUG debug_output ("writable", "writableField_SetValue: setting to %s\n",  (char *) user_regs->r[4]) ;

      if (!string_copy_chk (w->text, (char *) user_regs->r[4], w->max_text_len ))
      {
        DEBUG debug_output ("writable", "WritableField_SetValue: string was larger than previous max\n\r") ;
        return buffer_too_short();
      }

      /*
       * Redraw the gadget
       */

      update_caret(WIMP_WINDOW,w->icon_handle,w->text,old_len);

#ifndef ICON_UPDATES_WITH_SET_ICON_STATE
      if ((e = gadgets__redraw_gadget (WIMP_WINDOW, &(gadget->gadget_hdr))) != NULL)
        return (e) ;
#else
      {
          wimp_SetIconState state;

          state.window_handle = WIMP_WINDOW;
          state.icon_handle = w->icon_handle;
          state.EOR_word = 0;
          state.clear_word = 0;
          wimp_set_icon_state(&state);
      }
#endif /* ICON_UPDATES_WITH_SET_ICON_STATE */

#ifdef GenerateEventsForMethods

      return (raise_event(w,window,gadget));
#endif

      break ;

    case (WritableField_GetValue- WritableField_Base):
      DEBUG debug_output ("writable", "writableField_GetValue: called with %p,%d\n\r",
          user_regs->r[4],user_regs->r[5]) ;

      string_to_buffer ((char *)user_regs->r[4],w->text,&(user_regs->r[5]));

      DEBUG debug_output ("writable", "writableField_GetValue: returning length %d\n\r",  user_regs->r[5]) ;

      DEBUG debug_output ("writable", "writableField_GetValue: returning string %s to %p\n\r",
         (char *) user_regs->r[4],user_regs->r[4]) ;

      break ;

    case (WritableField_SetAllowable- WritableField_Base):
      return set_validation_string(w,gadget,(char *) user_regs->r[4]);

#if 0
    /* get allowable removed - didn't work anyway */
    case (WritableField_GetAllowable- WritableField_Base):

      if (user_regs->r[4] == 0)
      {
        user_regs->r[5] = string_length (w->allowable) + 1 ;

        DEBUG debug_output ("writable", "writableField_GetAllowable: returning length %d\n\r",  user_regs->r[5]) ;
      }
      else
      {
        /*
         * string_copy does not tell us if it fails for any reason, so
         * I assume is copies the right amount of characters and return
         * that in r5.
         */

        string_copy ((char *) user_regs->r[4], w->allowable) ;
        user_regs->r[5] = string_length (w->allowable) + 1 ;

        DEBUG debug_output ("writable", "writableField_GetAllowable: returning string %s\n\r", (char *) user_regs->r[4]) ;
      }

      break ;
#endif

    case (WritableField_SetFont- WritableField_Base):

       e = gadgets_set_font(CURRENT_WINDOW,w->icon_handle,(char *) user_regs->r[4],user_regs->r[5],
                user_regs->r[6],style_WRITABLE_FIELD_ICONFLAGS);
       update_caret(WIMP_WINDOW,w->icon_handle,w->text,old_len);
       return e;

       break;
    default:
        return (BadMethod(method));

  }
  return NULL ;
}

/*
 * Need to raise a toolbox event when the caret moves out of our icon;
 * how do I know if the text has been changed though? It's a bit of
 * a git since I'll have to raise the event watever happens.
 */

_kernel_oserror *writable_field_key_pressed (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  writable_field_internal *w        = (writable_field_internal *) gadget->data ;
  _kernel_swi_regs regs ;
  _kernel_oserror *e = NULL ;


  if (poll_block->key_pressed.caret.icon_handle == w->icon_handle) {
     if ((poll_block->key_pressed.key_code == 0x18f) || (poll_block->key_pressed.key_code == 0x19a)
        && (w->before != -1))
        /* Up arrow */                                /* Shift-TAB */
  {
#ifdef PASS_ON_FOCUS
     if (w->before != -1) {
        regs.r[0] = 0;
        regs.r[1] = (int) window ;
        regs.r[2] = Gadget_SetFocus ;
        regs.r[3] = w->before ;

        e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs) ;
     }
#else
    regs.r[3] = w->before ;
    regs.r[0] = 0 ;
    regs.r[1] = (int) window ;
    regs.r[2] = Gadget_GetFlags;
    e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs) ;

    /* don't move into writable if it is faded */

    if ((!e) && (!(regs.r[0] & Gadget_Faded))) {
       regs.r[2] = Gadget_SetFocus ;
       regs.r[0] = 0;
       e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs) ;
    }
#endif

  }
  else if  ((poll_block->key_pressed.key_code == 0x18e) || (poll_block->key_pressed.key_code == 0x18a)
        && (w->after != -1))
        /* Down arrow */                                /* TAB */
  {
#ifdef PASS_ON_FOCUS
     if (w->after != -1) {

        regs.r[0] = 1;
        regs.r[1] = (int) window ;
        regs.r[2] = Gadget_SetFocus ;
        regs.r[3] = w->after ;

        e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs) ;
     }
#else
    regs.r[3] = w->after ;
    regs.r[0] = 0 ;
    regs.r[1] = (int) window ;
    regs.r[2] = Gadget_GetFlags;
    e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs) ;

    if ((!e) && (!(regs.r[0] & Gadget_Faded))) {
       regs.r[2] = Gadget_SetFocus ;
       regs.r[0] = 0;
       e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs) ;
    }
#endif

  }

  if(!e && (gadget->gadget_hdr.flags & WritableField_GenerateUserValueChanged)) e=raise_event(w,window,gadget);
  *claimed = TRUE;
  }
  return e ;
}

/* NK, 5-Jan-94, try and handle moving on when faded */

_kernel_oserror *writable_field_set_focus (GadgetInternal *gadget, int window_handle, int dir)
{
  _kernel_oserror         *e = NULL ;
  _kernel_swi_regs         regs ;
  writable_field_internal *w        = (writable_field_internal *) gadget->data ;

  DEBUG debug_output ("writable", "set_focus method called win id %d icon id %d\n\r", window_handle, w->icon_handle) ;

#ifdef PASS_ON_FOCUS
  if (gadget->gadget_hdr.flags & PRIVATE_FLAG) {
     gadget->gadget_hdr.flags &= ~PRIVATE_FLAG;
     return make_error(Window_NoGadgetsLeft,0);
  }

  if (gadget->gadget_hdr.flags & Gadget_Faded || window_handle == -1) {
     gadget->gadget_hdr.flags |= PRIVATE_FLAG;
     regs.r[0] = dir ? 1: 0;
     regs.r[1] = (int) w->window;
     regs.r[2] = Gadget_SetFocus ;
     regs.r[3] = (dir) ? w->after : w->before;

     if (regs.r[3] == NULL_ComponentID) {
        e = make_error(Window_NoGadgetsLeft,0);
     }
     else {
        e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs) ;
     }
     gadget->gadget_hdr.flags &= ~PRIVATE_FLAG;
     return e;
  }

#endif
     e = wimp_set_caret_position(window_handle,w->icon_handle,0,0,-1,strlen(w->text));

  return e ;
}
@


4.4
log
@Window 1.46

Writable gadgets now generate "No more gadgets" errors rather than
"Invalid component ID" when trying to place the caret into a faded
writable icon.
@
text
@a30 1
#include "services.h"
d37 2
a38 2
#include "objects.toolbox.h"
#include "objects.window.h"
d40 4
a43 4
#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.utils.h"
@


4.3
log
@Fixed bug in handling of fading of writable icons that are part of a composite
gadget, with respect to linking between writables.
@
text
@d528 6
a533 1
     e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs) ;
@


4.2
log
@Fixed mouse pointer reappearing if turned off when mouse leaves a window -
  fixes a bug on NC/STB devices where the mouse pointer is generally off.
Changed writablefield_set_value to update the icon with Wimp_SetIconState
  rather than Wimp_ForceRedraw. This makes it look nicer, but has the
  unfortunate side-effect of making Java's dialog benchmark go at around 40%.
  Left code in, but #define'd out, so still works the original way.
Fixed labelbox gadget if the label text matches a sprite in the wimp pool -
  it used to display that sprite and the text.
@
text
@d250 3
@


4.1
log
@Initial revision
@
text
@d65 1
a65 1
 
d68 1
a68 1
{                                                    
d71 3
a73 3
    if ((string) && ((string_length(string)+1) > w->max_allowable_len)) 
        return buffer_too_short();                     
                                                          
d117 1
a117 1
    gadget->data = (void *) w ;                                                                   
d132 1
a132 1
  
d136 1
a136 1
    w->after  = gadget_template->data.writable_field.after  ;            
d228 1
a228 1
        event.hdr.flags =0; 
d246 1
a246 1
  int block[6];                 
d262 1
a262 1
     }             
d264 1
a264 1
                    
d279 1
a279 1
 
d285 1
a285 1
{                    
d287 1
a287 1
   int block[6];                 
d299 1
a299 1
   
a324 1

d339 1
d342 11
d401 1
a401 1
      break ;                                       
d440 1
a440 1
#ifdef PASS_ON_FOCUS                          
d455 1
a455 1
    
d466 1
a466 1
  else if  ((poll_block->key_pressed.key_code == 0x18e) || (poll_block->key_pressed.key_code == 0x18a) 
d469 1
a469 1
  {                       
d509 1
a509 1
     
d512 1
a512 1
#ifdef PASS_ON_FOCUS                          
d516 1
a516 1
  }                       
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
