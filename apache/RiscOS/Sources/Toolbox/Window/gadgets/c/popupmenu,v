head	4.3;
access;
symbols
	Window-1_79:4.3
	Window-1_78:4.3
	Window-1_77:4.3
	Window-1_76:4.2
	Window-1_75:4.1
	Window-1_74:4.1
	Window-1_73:4.1
	Window-1_72:4.1
	Window-1_71:4.1
	RO_5_07:4.1
	Window-1_70:4.1
	Window-1_69:4.1
	Window-1_68:4.1
	Window-1_67:4.1
	Window-1_66:4.1
	Window-1_65:4.1
	Window-1_64:4.1
	Window-1_63:4.1
	Window-1_62:4.1
	Window-1_61:4.1
	Window-1_60:4.1
	Window-1_59:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Window-1_58:4.1
	Ursula_RiscPC:4.1.0.10
	Window-1_57:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	Ursula:4.1.0.8
	Ursula_bp:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	Window-1_56:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	Window-1_55:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	Window-1_54:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	Window-1_53:4.1
	Window-1_52:4.1
	Window-1_51:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Window_1_49:4.1
	afrost_NC2_Generic:4.1.7.1
	sbrodie_Window_1_48:4.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_Window_1_46:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	sbrodie_Window_1_44:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Ursula_bp_13Jun97:4.1
	Spin_merge_13Jun97:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.09.25.19.18.59;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	DH8FofxSzeP9wFCy;

4.2
date	2015.08.18.22.05.08;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	oMg9J5QqfRoPENxy;

4.1
date	96.11.05.09.23.21;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.21;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.39;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.47;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.20;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Fix for uninitialised buffer length causing missing popup menu icon
The popupmenu gadget code was setting the indirected text to "" but not setting the buffer length field. In 32 bit builds this appears to result in an old stacked PSR (&60000013) being used. Fortunately, the Window Manager (Wimp04.s, revision 4.45, line 383) only checks the field is non zero before proceeding to decide how to draw the icon, but on a RAM loading copy the field often ends up being zero.
Also corrected the labelbox and slider gadgets. While these were being initialised they were being set to zero, when an indirected empty string should be 1 (the length of the terminator).

Spotted by Howard Dawson on Usenet, see c.s.a.programmer "Missing Popup Menus under RO 4.02" 13-Sep-2015.
Tested by forcefully loading the Window module on RISC OS 4.02 then running !ResEd, now the popup menus have icons.

Version 1.77. Tagged as 'Window-1_77'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   popupmenu.c
 * Purpose: popupmenu gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          05-Apr-94: NK : really created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"
#include "objects/menu.h"

#include "../globals.h"
#include "../gadgets.h"
#include "../object.h"
#include "../veneers.h"

/* one icon in a popupmenu */

ICONLIST(2)

#include "popupmenu.h"
extern int WIMP_WINDOW;
static int refcounter=0;
extern int SWI_WimpCreateIcon;

typedef struct _popupmenu_internal
{
  int   icon_handle ;
  ObjectID menu_handle;
  ObjectID window;
} popupmenu_internal ;

_kernel_oserror *popup_menu_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  i;
    _kernel_oserror *e;
    popupmenu_internal *pop;


    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     */

    pop = mem_allocate (sizeof (popupmenu_internal), "popupmenu_add, popupmenu_internal type") ;
    if (pop == NULL)
        return out_of_memory();

    gadget->data = (void *) pop ;

    pop->window =window;

    /* find the handle of the menu from the template, allow null/empty for creation */

    if ((e= CreateObjectFromTemplate(gadget_template->data.popup.menu,&pop -> menu_handle)) != NULL) goto error;

    /*
     * Set up a real wimp icon block.
     */

    i.window_handle                        = window_handle ;
    i.icon.data.indirect_text.buffer       = "";
    i.icon.data.indirect_text.buff_len     = 1;
    i.icon.data.indirect_text.valid_string = style_POPUP_MENU_VALIDSTR;
    i.icon.flags                           = style_POPUP_MENU_ICONFLAGS ;


    /*
     * Trust that we're given sensible values!
     */

    SetCoords(i)

    /*
     * Create the underlying wimp icon (and store its handle).
     */


    if ((e= CreateIcon(i,&(pop->icon_handle))) !=NULL) goto error2;

    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = pop->icon_handle;

    return NULL;

error2:

    /* failed on creating the icon */

    if (pop -> menu_handle) toolbox_delete_object(0,pop -> menu_handle);

error:

    if (pop != NULL)
        mem_free (pop, "freeing popupmenu");

    return e;
}

_kernel_oserror *popup_menu_remove   (GadgetInternal *gadget, ObjectID window,int rec)
{
    wimp_IconDelete   i;
    popupmenu_internal *pop = (popupmenu_internal *) gadget->data;
    IGNORE(window);

    /*
     * Remove the icon from the window
     */

    i.window_handle = WIMP_WINDOW;
    i.icon_handle   = pop->icon_handle;

    wimp_delete_icon(&i);

    if (!rec && pop -> menu_handle) toolbox_delete_object(0,pop -> menu_handle);

    /*
     * ... and free up the memory we have used
     */

    mem_free (pop, "removing popupmenu gadget data");

    return NULL;
}

_kernel_oserror *popup_menu_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  popupmenu_internal *pop = (popupmenu_internal *) gadget->data ;

  window=window; /* Not Used */
  DEBUG debug_output ("popup", "popupmenu_method: entry\n\r") ;

  switch (method)
  {

    case PopUp_SetMenu:

      pop->menu_handle = (ObjectID) user_regs->r[4] ;

      break ;


    case PopUp_GetMenu:

      user_regs->r[METHOD_RETURN_REGISTER + 0] = (int) pop->menu_handle ;

      break;


    default:

      return (BadMethod(method));
      break ;
  }

  return NULL ;
}

_kernel_oserror *popup_menu_set_fade (GadgetInternal *gadget, ObjectID window, int do_fade)
{
  wimp_SetIconState set ;
  popupmenu_internal *pop = (popupmenu_internal *) gadget->data ;

  IGNORE (window);

  DEBUG debug_output ("fade", "popupmenu_set_fade: fade flag is %d\n\r", do_fade) ;

  set.window_handle = WIMP_WINDOW ;
  set.icon_handle   = pop->icon_handle ;
  set.clear_word    = wimp_ICONFLAGS_FADED ;
  set.EOR_word      = do_fade ? wimp_ICONFLAGS_FADED : 0 ;

  return wimp_set_icon_state(&set);

}

static _kernel_oserror *_show_menu(int window,popupmenu_internal *pop, GadgetInternal *gadget)
{
    _kernel_swi_regs regs;
    wimp_GetWindowState wwin;
    TopLeft coords;

    regs.r[0]= Toolbox_ShowObject_AsMenu;
    regs.r[1]= (int) pop->menu_handle;
    regs.r[2]= Toolbox_ShowObject_TopLeft;
    regs.r[3]= (int) &coords;
    regs.r[4]= (int) pop->window;
    regs.r[5]= (int) gadget->gadget_hdr.component_id;


    wwin.open.window_handle=window;

    if ( wimp_get_window_state(&wwin) != NULL) {
      DEBUG debug_output ("popupmenu", "Error from get window state\n");
    }
    else {
        coords.x=gadget->gadget_hdr.xmax+ wwin.open.visible_area.xmin-wwin.open.scx;
        coords.y=gadget->gadget_hdr.ymax+ wwin.open.visible_area.ymax-wwin.open.scy;

        return(_kernel_swi (Toolbox_ShowObject, &regs, &regs));
    }
    return (NULL);
}

static int _show_window;
static popupmenu_internal *_show_pop;
static GadgetInternal *_show_gadget;

static void _show_the_menu(void)
{
      DEBUG debug_output ("popupmenu", "About to show menu\n");
      gadget_delete_filter(_show_the_menu,&refcounter);
      _show_menu(_show_window,_show_pop,_show_gadget);

}

_kernel_oserror *popup_menu_mouse_click (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  popupmenu_internal *pop        = (popupmenu_internal *) gadget->data ;
  _kernel_oserror *e ;
  PopUpAboutToBeShownEvent            event ;

  DEBUG debug_output ("popupmenu", "Click on popupmenu (buttons %d)\n\r",
     poll_block->mouse_click.buttons) ;


  if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_MENU_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)) &&
       (poll_block->mouse_click.icon_handle == pop->icon_handle))
  {

    /* if the client has requested popup about to be shown then we must
     * issue a message and show the menu on our prefilter */

    if (gadget->gadget_hdr.flags & PopUp_GenerateAboutToBeShown) {
      event.hdr.flags      =0;
      event.hdr.size       = sizeof (event);
      event.hdr.event_code = PopUp_AboutToBeShown;
      event.menu_id        = pop->menu_handle;
      event.show_type      = Toolbox_ShowObject_Default;


      if ((e = gadgets_raise_event (window, gadget->gadget_hdr.component_id, &event)) != NULL)
        return (e);


      _show_window=WIMP_WINDOW;
      _show_pop=pop;
      _show_gadget=gadget;

        /* the prefilter actually gets added in the post filter! ie. toolbox event */
     }
     else _show_menu(WIMP_WINDOW,pop,gadget);

    *claimed = TRUE ;
  }
  else
  {
    *claimed = FALSE ;
  }

  return NULL ;
}

/* No Key Presses */

_kernel_oserror *popup_menu_toolbox_event   (GadgetInternal *gadget,
                                                ToolboxEvent *event,
                                                ComponentID gadget_id, ObjectID ob)
{
    /* need to add a filter to handle the showing of the menu */

    IGNORE (ob);
    IGNORE (gadget_id);

    if ((event->hdr.event_code == PopUp_AboutToBeShown) && (gadget==_show_gadget))
           gadget_add_filter(_show_the_menu,&refcounter);
    return NULL;

}
@


4.2
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@d93 1
@


4.1
log
@Initial revision
@
text
@a30 1
#include "services.h"
d37 8
a44 8
#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.menu.h"

#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.veneers.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
