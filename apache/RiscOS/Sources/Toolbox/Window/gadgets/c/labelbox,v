head	4.6;
access;
symbols
	Window-1_79:4.6
	Window-1_78:4.6
	Window-1_77:4.6
	Window-1_76:4.5
	Window-1_75:4.4
	Window-1_74:4.4
	Window-1_73:4.4
	Window-1_72:4.4
	Window-1_71:4.4
	RO_5_07:4.4
	Window-1_70:4.4
	Window-1_69:4.4
	Window-1_68:4.4
	Window-1_67:4.4
	Window-1_66:4.4
	Window-1_65:4.4
	Window-1_64:4.4
	Window-1_63:4.4
	Window-1_62:4.4
	Window-1_61:4.4
	Window-1_60:4.4
	Window-1_59:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.4
	sbrodie_Toolbox_Ursula_231198:4.4
	Window-1_58:4.4
	Ursula_RiscPC:4.4.0.4
	Window-1_57:4.4
	rthornb_UrsulaBuild-19Aug1998:4.4
	UrsulaBuild_FinalSoftload:4.4
	rthornb_UrsulaBuild-12Aug1998:4.4
	Ursula:4.4.0.2
	Ursula_bp:4.4
	aglover_UrsulaBuild-05Aug1998:4.4
	Window-1_56:4.4
	rthornb_UrsulaBuild-29Jul1998:4.4
	Window-1_55:4.4
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	Window-1_54:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	Window-1_53:4.3
	Window-1_52:4.3
	Window-1_51:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_12May1998:4.3.0.4
	rthornb_UrsulaBuild_01May1998:4.3
	sbrodie_Window_1_49:4.3
	afrost_NC2_Generic:4.1.7.2
	sbrodie_Window_1_48:4.3
	Daytona:4.3.0.2
	Daytona_bp:4.3
	sbrodie_Expresso_final_190298:4.3
	sbrodie_Window_1_46:4.3
	sbrodie_Expresso_BETA6_19980204:4.3
	sbrodie_Window_1_44:4.3
	Spinner_RCA116:4.1.7.2
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spin_merge_8Jul97:4.1.7.2
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Ursula_bp_13Jun97:4.2
	Spin_merge_13Jun97:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.2
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2015.09.25.19.18.59;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	DH8FofxSzeP9wFCy;

4.5
date	2015.08.18.22.05.07;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	oMg9J5QqfRoPENxy;

4.4
date	98.07.24.17.15.52;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	97.08.21.16.32.53;	author pwombwel;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.09.12.24;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.20;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.20;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.36;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.41;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.17;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.19.18.57.35;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Fix for uninitialised buffer length causing missing popup menu icon
The popupmenu gadget code was setting the indirected text to "" but not setting the buffer length field. In 32 bit builds this appears to result in an old stacked PSR (&60000013) being used. Fortunately, the Window Manager (Wimp04.s, revision 4.45, line 383) only checks the field is non zero before proceeding to decide how to draw the icon, but on a RAM loading copy the field often ends up being zero.
Also corrected the labelbox and slider gadgets. While these were being initialised they were being set to zero, when an indirected empty string should be 1 (the length of the terminator).

Spotted by Howard Dawson on Usenet, see c.s.a.programmer "Missing Popup Menus under RO 4.02" 13-Sep-2015.
Tested by forcefully loading the Window module on RISC OS 4.02 then running !ResEd, now the popup menus have icons.

Version 1.77. Tagged as 'Window-1_77'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   labelbox.c
 * Purpose: labelled box gadgets
 * Author:  Chris Marshall
 * History: 22-Feb-94: IDJ: created
 *          16-Mar-94: CSM: Created from label.c
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"

#include "../globals.h"
#include "../gadgets.h"
#include "../object.h"
#include "../veneers.h"

#include "labelbox.h"

ICONLIST(3)
extern int WIMP_WINDOW;
extern int SWI_WimpCreateIcon;

extern int WIMP_VERSION_NUMBER;

typedef struct _labelled_box
{
  int   text_icon_handle;
  int   box_icon_handle;
  LabelledBox the_labelled_box;  /* Fill this in from gadget_template */
} labelled_box ;

_kernel_oserror *labelled_box_add(GadgetInternal *gadget, ObjectID window, int **icon_list, Gadget *gadget_template, int window_handle)
{
    wimp_IconCreate   i_text;
    wimp_IconCreate   i_box;
    _kernel_swi_regs  regs;
    _kernel_oserror  *e=NULL;
    labelled_box     *l;
    int temp;

    IGNORE(window);

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the label's template (ie its textual label string).
     */

    temp = string_length (gadget_template->data.label.label)+1;
    /*if ((!(gadget->gadget_hdr.flags & LabelledBox_Sprite)) && (WIMP_VERSION_NUMBER >= 350)) temp +=2;*/

    l = mem_allocate (sizeof (labelled_box)+temp, "labelled_box_add, label type") ;
    if (l == NULL)
        return out_of_memory();

    gadget->data = (void *) l ;

    l->the_labelled_box.label = (char *) (l + 1);

    /*if ((!(gadget->gadget_hdr.flags & LabelledBox_Sprite)) && (WIMP_VERSION_NUMBER >= 350)) {
      *(l->the_labelled_box.label) = ' ';
      string_copy (l->the_labelled_box.label+1, gadget_template->data.label.label);
      *(l->the_labelled_box.label + temp -2) = ' ';
    }
    else*/
      string_copy (l->the_labelled_box.label, gadget_template->data.label.label);

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    i_text.window_handle                        = window_handle ;

    DEBUG debug_output ("lb", "labelled_box_add: flags are %x name is %s\n\r",
                        gadget->gadget_hdr.flags, l->the_labelled_box.label) ;


    if ((gadget->gadget_hdr.flags & LabelledBox_Sprite) && (l->the_labelled_box.label && *l->the_labelled_box.label))
    {
      int               xsz, ysz ;


      /*
       * l->the_labelled_box.label is the name of a sprite in our sprite area
       */
      regs.r[0] = Toolbox_GetSysInfo_SpriteArea ;
      if ((SWI_WimpCreateIcon == Wimp_PlotIcon) || _kernel_swi (Toolbox_GetSysInfo, &regs, &regs) != NULL)
        regs.r[0] =1;   /* use wimp sprite area */

      DEBUG debug_output ("lb", "labelled_box_add: Done the sysinfo call\n\r") ;

      i_text.icon.data.indirect_sprite.sprite.name        = l->the_labelled_box.label ;
      i_text.icon.data.indirect_sprite.sprite_area        = (char *) regs.r[0] ;
      i_text.icon.data.indirect_sprite.name_len           = string_length (l->the_labelled_box.label) ; /* Use above */

      if (regs.r[0] != 1) {
        regs.r[1] = regs.r[0] ; /* scb */
        regs.r[0] = 256 + 40 ;
        regs.r[2] = (int)  l->the_labelled_box.label ;
        e = _kernel_swi (OS_SpriteOp, &regs, &regs);
      }
      if (e || regs.r[0] == 1) {
        regs.r[0] = 256 + 40 ;
        regs.r[2] = (int)  l->the_labelled_box.label ;
        if ((e = _kernel_swi (Wimp_SpriteOp, &regs, &regs)) != NULL) {
           if (SWI_WimpCreateIcon == Wimp_PlotIcon) {
             regs.r[3] = 0;
             regs.r[4] = 0;
             e = NULL;
           }
           else
             goto error;

        }
      }

      xsz = regs.r[3] ;
      ysz = regs.r[4] ;

      DEBUG debug_output ("lb", "labelled_box_add: Done the OS_SpriteOp 40\n\r") ;
      DEBUG debug_output ("lb", "labelled_box_add: Size is %d by %d pixels\n\r", regs.r[3], regs.r[4]) ;

      xsz = xsz << (read_mode_variable(regs.r[6],4));
      ysz = ysz << (read_mode_variable(regs.r[6],5));

      DEBUG debug_output ("lb", "labelled_box_add: Size is %d by %d OS units\n\r", xsz, xsz) ;

      i_text.icon.flags                           = wimp_ICONFLAGS_HCENTRE |
                                                    wimp_ICONFLAGS_VCENTRE |
                                                    wimp_ICONFLAGS_SPRITE |
                                                    wimp_ICONFLAGS_INDIRECT |
                                                    (7 * wimp_ICONFLAGS_FORECOL) |
                                                    (1 * wimp_ICONFLAGS_BACKCOL) ;
      if (gadget->gadget_hdr.flags & LabelledBox_SpriteIsFilled)
        i_text.icon.flags |= wimp_ICONFLAGS_FILLED ;

      i_text.icon.bbox.xmin                       = gadget_template->hdr.xmin + 16  ;
      i_text.icon.bbox.ymin                       = gadget_template->hdr.ymax - ysz ;
      i_text.icon.bbox.xmax                       = gadget_template->hdr.xmin + 32  + xsz ;
      i_text.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

      i_box.icon.bbox.xmin                       = gadget_template->hdr.xmin ;
      i_box.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
      i_box.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
      i_box.icon.bbox.ymax                       = gadget_template->hdr.ymax - (ysz / 2) ;
    }
    else
    {

      i_text.icon.data.indirect_text.buffer       = l->the_labelled_box.label ;
      i_text.icon.data.indirect_text.buff_len     = strlen (l->the_labelled_box.label) + 1 ;
      i_text.icon.data.indirect_text.valid_string = "S" ;

      if (WIMP_VERSION_NUMBER <350) {
         i_text.icon.flags                           = wimp_ICONFLAGS_FILLED |
                                                    wimp_ICONFLAGS_HCENTRE |
                                                    wimp_ICONFLAGS_VCENTRE |
                                                    wimp_ICONFLAGS_TEXT |
                                                    wimp_ICONFLAGS_INDIRECT |
                                                    (7 * wimp_ICONFLAGS_FORECOL) |
                                                    (1 * wimp_ICONFLAGS_BACKCOL) ;
         i_text.icon.bbox.xmin                       = gadget_template->hdr.xmin + 32 ;
         i_text.icon.bbox.xmax                       = i_text.icon.bbox.xmin +
                                                    ((i_text.icon.data.indirect_text.buff_len-1) * 16) ;
      } else {
         i_text.icon.flags                           = wimp_ICONFLAGS_SPRITE |
         					    wimp_ICONFLAGS_RJUSTIFY |
                                                    wimp_ICONFLAGS_VCENTRE |
                                                    wimp_ICONFLAGS_TEXT |
                                                    wimp_ICONFLAGS_INDIRECT |
                                                    (7 * wimp_ICONFLAGS_FORECOL) |
                                                    (1 * wimp_ICONFLAGS_BACKCOL) ;
         i_text.icon.bbox.xmin                       = gadget_template->hdr.xmin + 26 ;
         i_text.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
      }

      i_text.icon.bbox.ymin                       = gadget_template->hdr.ymax - 36 ;
      i_text.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

      i_box.icon.bbox.xmin                       = gadget_template->hdr.xmin ;
      i_box.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
      i_box.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
      i_box.icon.bbox.ymax                       = gadget_template->hdr.ymax - 16 ;
    }


    i_box.window_handle                        = window_handle ;
    i_box.icon.data.indirect_text.buffer       = "" ;
    i_box.icon.data.indirect_text.buff_len     = 1 ;
    i_box.icon.data.indirect_text.valid_string = "R4" ;

    i_box.icon.flags                           = wimp_ICONFLAGS_HAS_BORDER |
                                                 wimp_ICONFLAGS_INDIRECT |
                                                 wimp_ICONFLAGS_TEXT |
                                                 (7 * wimp_ICONFLAGS_FORECOL) |
                                                 (1 * wimp_ICONFLAGS_BACKCOL) ;


    /*
     * Create the underlying wimp icon (and store its handle).
     */

    if ((e = CreateIcon(i_box, &(l->box_icon_handle))) != NULL)
        goto error;


    if ((e = CreateIcon(i_text, &(l->text_icon_handle))) != NULL)
        goto error;


    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = l->text_icon_handle;
    IconList[1] = l->box_icon_handle;

    return NULL;


error:

    if (l != NULL)
        mem_free (l, "freeing label");

    return e;
}


_kernel_oserror *labelled_box_move(GadgetInternal *gadget, ObjectID window, int window_handle, wimp_Bbox *box)
{
    labelled_box     *l = (labelled_box *) gadget->data;
    wimp_Bbox        new_icon_box = *box, new_text_box = *box;
    wimp_GetIconState state;
    _kernel_oserror  *e;

    IGNORE (window);
    /* resize the box */
    state.window_handle = window_handle;
    state.icon_handle = l->box_icon_handle;
    if ((e = wimp_get_icon_state(&state)) != NULL)
             return e;
    new_icon_box.ymax += (state.icon.bbox.ymax - gadget->gadget_hdr.ymax);
    /* resize the text/sprite */
    state.icon_handle = l->text_icon_handle;
    if ((e = wimp_get_icon_state(&state)) != NULL)
             return e;
    new_text_box.ymax = state.icon.bbox.ymax - (gadget->gadget_hdr.ymax - box->ymax);
    new_text_box.xmin = state.icon.bbox.xmin - (gadget->gadget_hdr.xmin - box->xmin);
    new_text_box.ymin = state.icon.bbox.ymin - (gadget->gadget_hdr.ymax - box->ymax);
    /*
    310 && sprite:  relative to xmin
    310 && text:    calculate from xmin
    350 && sprite:  relative to xmin
    350 && text:    calculate from xmax
    */

    if ((gadget->gadget_hdr.flags & LabelledBox_Sprite) && (l->the_labelled_box.label && *l->the_labelled_box.label)) {
       new_text_box.xmax = new_text_box.xmin + (state.icon.bbox.xmax - state.icon.bbox.xmin);
    }
    else if (WIMP_VERSION_NUMBER <350) {
       new_text_box.xmax = new_text_box.xmin + (state.icon.data.indirect_text.buff_len-1) * 16;
    }
    else {
       /* already in place */
    }

    resize_icon(window_handle,l->text_icon_handle,&new_text_box);
    resize_icon(window_handle,l->box_icon_handle,&new_icon_box);

    return NULL;
}
@


4.5
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@a49 1
static char zero = '\0' ;
d215 2
a216 2
    i_box.icon.data.indirect_text.buffer       = &zero ;
    i_box.icon.data.indirect_text.buff_len     = 0 ;
@


4.4
log
@Labelled box gadgets didn't move/resize correctly.  This is now fixed.
Couple of -I paths corrected in Makefile too.

Version 1.55. Tagged as 'Window-1_55'
@
text
@d15 1
a15 1
/* Title:   label.c
a29 1
#include "services.h"
d36 2
a37 2
#include "objects.toolbox.h"
#include "objects.window.h"
d39 4
a42 5
#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.main.h"
#include "^.veneers.h"
@


4.3
log
@Fixed mouse pointer reappearing if turned off when mouse leaves a window -
  fixes a bug on NC/STB devices where the mouse pointer is generally off.
Changed writablefield_set_value to update the icon with Wimp_SetIconState
  rather than Wimp_ForceRedraw. This makes it look nicer, but has the
  unfortunate side-effect of making Java's dialog benchmark go at around 40%.
  Left code in, but #define'd out, so still works the original way.
Fixed labelbox gadget if the label text matches a sprite in the wimp pool -
  it used to display that sprite and the text.
@
text
@d62 1
a62 1
_kernel_oserror *labelled_box_add      (GadgetInternal *gadget, ObjectID window, int **icon_list, Gadget *gadget_template, int window_handle)
d262 43
@


4.2
log
@Spinner branch merged
@
text
@d182 1
a182 1
      i_text.icon.data.indirect_text.valid_string = NULL ;
d197 1
@


4.1
log
@Initial revision
@
text
@d79 1
a79 1
    if ((!(gadget->gadget_hdr.flags & LabelledBox_Sprite)) && (WIMP_VERSION_NUMBER >= 350)) temp +=2;
d89 1
a89 1
    if ((!(gadget->gadget_hdr.flags & LabelledBox_Sprite)) && (WIMP_VERSION_NUMBER >= 350)) {
d91 1
a91 1
      string_copy (l->the_labelled_box.label+1, gadget_template->data.label.label);  
d94 1
a94 1
    else
d131 1
a131 1
      } 
d141 1
a141 1
           else 
d144 1
a144 1
        } 
a183 2
      i_text.icon.bbox.xmin                       = gadget_template->hdr.xmin + 16  ;

d192 3
a194 2
         i_text.icon.bbox.xmax                       = gadget_template->hdr.xmin +
                                                    (i_text.icon.data.indirect_text.buff_len * 16 + 16) ;
d202 2
a203 2
         i_text.icon.bbox.xmax                       = gadget_template->hdr.xmin +
                                                    (i_text.icon.data.indirect_text.buff_len * 32) ;
d206 1
a206 1
      i_text.icon.bbox.ymin                       = gadget_template->hdr.ymax - 40 ;
d212 1
a212 1
      i_box.icon.bbox.ymax                       = gadget_template->hdr.ymax - 20 ;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Add "Extendable X and Extendable Y" toolbars.
Improve pane-handling algorithms.
Fix alignment of labels in labelled boxes.
Align numberrange's slider more neatly and put adjusters in right place
Stringsets tidied up
Some useful checking added to string_set_toolbox_event
Showing as subwindow fixed up a lot.
@
text
@d79 1
a79 1
    /*if ((!(gadget->gadget_hdr.flags & LabelledBox_Sprite)) && (WIMP_VERSION_NUMBER >= 350)) temp +=2;*/
d89 1
a89 1
    /*if ((!(gadget->gadget_hdr.flags & LabelledBox_Sprite)) && (WIMP_VERSION_NUMBER >= 350)) {
d91 1
a91 1
      string_copy (l->the_labelled_box.label+1, gadget_template->data.label.label);
d94 1
a94 1
    else*/
d131 1
a131 1
      }
d141 1
a141 1
           else
d144 1
a144 1
        }
d184 2
d194 2
a195 3
         i_text.icon.bbox.xmin                       = gadget_template->hdr.xmin + 32 ;
         i_text.icon.bbox.xmax                       = i_text.icon.bbox.xmin +
                                                    ((i_text.icon.data.indirect_text.buff_len-1) * 16) ;
d203 2
a204 2
         i_text.icon.bbox.xmin                       = gadget_template->hdr.xmin + 26 ;
         i_text.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
d207 1
a207 1
      i_text.icon.bbox.ymin                       = gadget_template->hdr.ymax - 36 ;
d213 1
a213 1
      i_box.icon.bbox.ymax                       = gadget_template->hdr.ymax - 16 ;
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
