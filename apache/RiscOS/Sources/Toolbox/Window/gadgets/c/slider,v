head	4.6;
access;
symbols
	Window-1_79:4.6
	Window-1_78:4.6
	Window-1_77:4.6
	Window-1_76:4.5
	Window-1_75:4.4
	Window-1_74:4.4
	Window-1_73:4.4
	Window-1_72:4.4
	Window-1_71:4.4
	RO_5_07:4.4
	Window-1_70:4.4
	Window-1_69:4.4
	Window-1_68:4.3
	Window-1_67:4.2
	Window-1_66:4.2
	Window-1_65:4.2
	Window-1_64:4.2
	Window-1_63:4.2
	Window-1_62:4.2
	Window-1_61:4.2
	Window-1_60:4.2
	Window-1_59:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Window-1_58:4.2
	Ursula_RiscPC:4.2.0.4
	Window-1_57:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	Window-1_56:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	Window-1_55:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	Window-1_54:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	Window-1_53:4.2
	Window-1_52:4.2
	Window-1_51:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Window_1_49:4.2
	afrost_NC2_Generic:4.1.7.1
	sbrodie_Window_1_48:4.2
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Window_1_46:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Window_1_44:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Ursula_bp_13Jun97:4.1
	Spin_merge_13Jun97:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2015.09.25.19.18.59;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	DH8FofxSzeP9wFCy;

4.5
date	2015.08.18.22.05.08;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	oMg9J5QqfRoPENxy;

4.4
date	2002.12.12.20.28.26;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2002.05.24.15.06.48;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	98.02.04.19.49.44;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.21;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.21;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.42;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.51;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.23;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Fix for uninitialised buffer length causing missing popup menu icon
The popupmenu gadget code was setting the indirected text to "" but not setting the buffer length field. In 32 bit builds this appears to result in an old stacked PSR (&60000013) being used. Fortunately, the Window Manager (Wimp04.s, revision 4.45, line 383) only checks the field is non zero before proceeding to decide how to draw the icon, but on a RAM loading copy the field often ends up being zero.
Also corrected the labelbox and slider gadgets. While these were being initialised they were being set to zero, when an indirected empty string should be 1 (the length of the terminator).

Spotted by Howard Dawson on Usenet, see c.s.a.programmer "Missing Popup Menus under RO 4.02" 13-Sep-2015.
Tested by forcefully loading the Window module on RISC OS 4.02 then running !ResEd, now the popup menus have icons.

Version 1.77. Tagged as 'Window-1_77'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   slider.c
 * Purpose: slider gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          05-Apr-94: NK : really created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"

#include "../globals.h"
#include "../gadgets.h"
#include "../object.h"
#include "../utils.h"

#include "slider.h"

/* from s.slider_ven */
extern void _slider_draw(void);
extern void _slider_move(void);
extern void _slider_remove(void);

/* three icons */
ICONLIST(4)

extern int WIMP_WINDOW;
extern _kernel_oserror *CreateIcon(wimp_IconCreate i,int *handle);

typedef struct _slider_internal
{
  int   well_handle ;
  int   slider_handle;
  int   background_handle;
  int   window_handle;
  wimp_Bbox bb_overall;
  int value;
  int lower_bound;
  int upper_bound;
  int step;
  int lastx;
  char horizontal,col,bcol;
} slider_internal ;

       /* slider_update_bbox:
        * 1) sets slider value to be within bounds and multiple of step
        * 2) sets up icon bounding boxes for slider and well */

       /* Remember we're doing integer maths, so divide last ! */

static void slider_update_bbox(slider_internal *s, wimp_Bbox *slider, wimp_Bbox *background,int value)
{

        /* bound check */

  if (value > s->upper_bound) value=s->upper_bound;
  if (value < s->lower_bound) value=s->lower_bound;

  value=value-s->lower_bound;

  if (s->step) value=(value/s->step) *(s->step); /* make sure it's a multiple of the step size */

  s->value=value+s->lower_bound;

  if (s->horizontal)
  {
    value = ((value) * (s->bb_overall.xmax -s->bb_overall.xmin)) /(s->upper_bound-s->lower_bound);

    slider->xmin = s->bb_overall.xmin ;
    slider->ymin = s->bb_overall.ymin ;
    slider->xmax = s->bb_overall.xmin + value;
    slider->ymax = s->bb_overall.ymax ;

    background->xmin = s->bb_overall.xmin + value;
    background->ymin = s->bb_overall.ymin ;
    background->xmax = s->bb_overall.xmax ;
    background->ymax = s->bb_overall.ymax ;

    s->lastx=s->bb_overall.xmin + value;
  }
  else
  {
    value = ((value)  * (s->bb_overall.ymax -s->bb_overall.ymin)) /(s->upper_bound-s->lower_bound);

    slider->xmin = s->bb_overall.xmin ;
    slider->ymin = s->bb_overall.ymin ;
    slider->xmax = s->bb_overall.xmax ;
    slider->ymax = s->bb_overall.ymin + value ;

    background->xmin = s->bb_overall.xmin ;
    background->ymin = s->bb_overall.ymin + value ;
    background->xmax = s->bb_overall.xmax ;
    background->ymax = s->bb_overall.ymax ;

    s->lastx=s->bb_overall.ymin + value;
  }

        /* sadly icons with null bounding boxes are still visible ! So, move them 'off window'*/

  if (s->value==s->lower_bound) {
        slider->xmin =-8;
        slider->xmax =-4;

        slider->ymin =4;
        slider->ymax =8;
      }

  if (s->value==s->upper_bound) {
        background->xmin=-8;
        background->xmax=-4;

        /* oh no, a bug in the wimp's redraw code !!! */
        background->ymax=8;
        background->ymin=4;
      }

}

     /* if we redraw the whole slider, we get quite a bit of flicker, so on a drag or
      * a value change, we need only draw the bit that really has changed. Note when
      * vertical, lastx/newx become lasty/newy */

static void just_redraw_abit(slider_internal *s,int wind,int lastx,int newx)
{
    wimp_Bbox box;

    if (lastx != newx) {
      int temp;

      DEBUG debug_output ("slider", "About to update slider\n");

      if (lastx>newx) { temp=lastx; lastx=newx; newx=temp;}

      if (s->horizontal) {
        if (lastx == -4) lastx = s->bb_overall.xmin;
        box.xmin=lastx-4;                            /* just to be on the safe side ! */
        box.ymin=s->bb_overall.ymin;
        box.xmax=newx+4;
        box.ymax=s->bb_overall.ymax;
        }
      else {
        if (lastx == -4) lastx = s->bb_overall.ymin;
        box.ymin=lastx-4;                            /* just to be on the safe side ! */
        box.xmin=s->bb_overall.xmin;
        box.ymax=newx+4;
        box.xmax=s->bb_overall.xmax;
        }

     update_window(wind,&box);

     DEBUG debug_output ("slider", "Redrawn slider\n");
   }
}

_kernel_oserror *slider_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  well,slider,background;
    _kernel_oserror *e=NULL;
    slider_internal *s;

    window=window;                      /* Not Used */

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     */

    s = mem_allocate (sizeof (slider_internal), "slider_add, slider_internal type") ;
    if (s == NULL)
        return out_of_memory();

    gadget->data = (void *) s ;

    s->col  = ((gadget_template->hdr.flags) & Slider_BarColour)
                        >> Slider_BarColourShift;
    s->bcol = ((gadget_template->hdr.flags) & Slider_BackgroundColour)
                        >> Slider_BackgroundColourShift;


    /*
     * Set up the wimp icon blocks
     */

    s->bb_overall.xmin=gadget_template->hdr.xmin+style_SLIDER_BORDERSIZE;
    s->bb_overall.ymin=gadget_template->hdr.ymin+style_SLIDER_BORDERSIZE;

    s->bb_overall.xmax=gadget_template->hdr.xmax-style_SLIDER_BORDERSIZE;
    s->bb_overall.ymax=gadget_template->hdr.ymax-style_SLIDER_BORDERSIZE;

    s->lower_bound=gadget_template->data.slider.lower_bound;
    s->upper_bound=gadget_template->data.slider.upper_bound;
    s->step=gadget_template->data.slider.step_size;

    s->horizontal = (gadget_template->hdr.flags & Slider_Vertical) ? FALSE : TRUE;

    SetCoords(well)

    well.icon.data.indirect_text.buffer = "" ;
    well.icon.data.indirect_text.buff_len = 1 ;
    well.icon.data.indirect_text.valid_string = s->horizontal ? style_HSLIDER_WELL_VALIDSTR :
                                                                   style_VSLIDER_WELL_VALIDSTR ;

    well.icon.flags = s->horizontal ? style_HSLIDER_WELL_ICONFLAGS : style_VSLIDER_WELL_ICONFLAGS ;

    well.window_handle = s->window_handle = window_handle ;
    slider.window_handle=window_handle;
    background.window_handle=window_handle;

    slider_update_bbox(s,&slider.icon.bbox,&background.icon.bbox,
                gadget_template->data.slider.initial_value);


  if (s->horizontal)
  {

    background.icon.flags = (wimp_ICONFLAGS_BACKCOL * s->bcol) | (style_HSLIDER_BACKGND_ICONFLAGS & ~(15 *wimp_ICONFLAGS_BACKCOL));
    slider.icon.flags =  (wimp_ICONFLAGS_BACKCOL * s->col) | (style_HSLIDER_VALUE_ICONFLAGS & ~ (15 * wimp_ICONFLAGS_BACKCOL));
  }
  else
  {

    background.icon.flags = (wimp_ICONFLAGS_BACKCOL * s->bcol) | (style_VSLIDER_BACKGND_ICONFLAGS & ~(15 *wimp_ICONFLAGS_BACKCOL));
    slider.icon.flags = (wimp_ICONFLAGS_BACKCOL * s->col) | (style_VSLIDER_VALUE_ICONFLAGS & ~(15 * wimp_ICONFLAGS_BACKCOL));
  }

    if (!(gadget_template->hdr.flags & Slider_Draggable)) {

        /* if not draggable, make button type never */

         background.icon.flags &= ~(15 *wimp_ICONFLAGS_BUTTON_TYPE);
         slider.icon.flags &= ~(15 * wimp_ICONFLAGS_BUTTON_TYPE);
    }

        if ((e= CreateIcon(well,&(s->well_handle))) !=NULL) goto error;

        /* create background so that it is draw first - it will have a lower icon number */

        if ((e= CreateIcon(background,&(s->background_handle))) !=NULL) goto error;
        if ((e= CreateIcon(slider,&(s->slider_handle))) !=NULL) goto error;


    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = s->well_handle;
    IconList[1] = s->slider_handle;
    IconList[2] = s->background_handle;

    return NULL;


error:

    if (s != NULL)
        mem_free (s, "freeing slider");

    return e;
}

static _kernel_oserror *send_value_change(ObjectID window,GadgetInternal *gadget,slider_internal *s, int type)
{
  SliderValueChangedEvent            event ;

  event.hdr.size       = sizeof (event) ;
  event.hdr.event_code = Slider_ValueChanged;

  event.hdr.flags      = type;
  event.new_value      = s->value;

  return gadgets_raise_event ( window, gadget->gadget_hdr.component_id, &event);
}

static GadgetInternal  *dgadget;
static ObjectID         dwindow;
static slider_internal *ds;

/* this gets called (by the Window module - gadgets.c) when the
   drag ends it gets registered below when the drag starts */

static _kernel_oserror *slider_drag(wimp_PollBlock *poll_block)
{
  _kernel_oserror *e;
  IGNORE (poll_block);

  if (dgadget->gadget_hdr.flags & Slider_GenerateValueChangedEndOfDrag ) {
      if ((e = send_value_change ( dwindow, dgadget, ds, Slider_ValueChanged_EndOfDrag)) != NULL)
         return (e);
  }

  DEBUG debug_output ("slider", "Slider drag ended\n\r");
  return NULL;

}

/* Perform the slider value recalculation - carefully */
static int slider_do_calculation(slider_internal *s, int offset_os, int range)
{
  /* Need to calculate (offset_os / range) * (s->upper_bound - s->lower_bound) + s->lower_bound, without overflow! */
#ifdef __STDC_VERSION__
  return (int) (s->lower_bound + (offset_os * ((intmax_t) s->upper_bound - s->lower_bound)) / range);
#else
  return s->lower_bound + (offset_os * (s->upper_bound - s->lower_bound)) / range;
#endif
}

_kernel_oserror *slider_mouse_click (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  slider_internal *s        = (slider_internal *) gadget->data ;
  _kernel_swi_regs regs ;
  _kernel_oserror *e ;
  WindowState wwin;
  static int sliding[4];
  wimp_Bbox one,two;
  int lastx,newx;

  DEBUG debug_output ("slider", "Click on slider (buttons %d)\n\r",
     poll_block->mouse_click.buttons) ;


  if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)))
  {
    wwin.window=WIMP_WINDOW;
    regs.r[1]=((int) &wwin);

    if ((e = _kernel_swi (Wimp_GetWindowState, &regs, &regs)) != NULL) {
      DEBUG debug_output ("slider", "Error from get window state\n");
    }

    lastx=s->lastx;

    if (s->horizontal ) {
      s->value = slider_do_calculation(s,
        (poll_block->mouse_click.x-wwin.visible.xmin+wwin.scx) - s->bb_overall.xmin,
        s->bb_overall.xmax - s->bb_overall.xmin);
      }
    else {
      s->value = slider_do_calculation(s,
        (poll_block->mouse_click.y-wwin.visible.ymax+wwin.scy) - s->bb_overall.ymin,
        s->bb_overall.ymax - s->bb_overall.ymin);
      }

    slider_update_bbox(s,&one,&two,s->value +(s->step/2));
    newx = (s->horizontal) ? one.xmax : one.ymax;

    /* after resizing icons need to update the part of the window from last x to newx */

    resize_icon(WIMP_WINDOW,s->slider_handle,&one);
    resize_icon(WIMP_WINDOW,s->background_handle,&two);

    just_redraw_abit(s,WIMP_WINDOW,lastx,newx);

    DEBUG debug_output ("slider", "Done redraw, now sending message\n");

    /* send a message */

    /* The sliding block (set up below) is modified by the assembler veneers.
       by checking sliding[3] we can determine if this is just a mouse click
       (ie. the start of a drag) or a faked click - ie a dragging */

    if (!sliding[3]) {
       if (gadget->gadget_hdr.flags & (Slider_GenerateValueChangedEndOfDrag
                   | Slider_GenerateValueChangedDuringDrag)) {
          if ((e = send_value_change ( window, gadget, s, 0)) != NULL)
            return (e);
       }
    } else {
       if (gadget->gadget_hdr.flags &  Slider_GenerateValueChangedDuringDrag) {
          if ((e = send_value_change ( window, gadget, s,
                Slider_ValueChanged_DuringDrag)) != NULL)
            return (e);
       }
    }

    sliding[3]=0;                       /* we've done */

    DEBUG debug_output ("slider", "Slider change sent message\n");

    *claimed = TRUE ;
  }
  else {
    if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON<<4)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON<<4)))
  {
    static DragBox drag_box;

    /* set up the statics for the end of drag */

    ds          = s;
    dwindow     = window;
    dgadget     = gadget;

    /* see the PRM entry on Wimp_DragBox, this will bound the mouse for us and call
     * our 'move' routine every fifth of a second. The move routine is in s.slider_ven
     * which simply fakes a mouse click event and comes though the above mouse click
     * routine when the user drags the bar. Note that because the faked event uses
     * Wimp_SendMessage it will always be synchronised with any Toolbox events that
     * are raised in response to the slider changing its value. Also sliding[3] is
     * used to make sure that we don't fake a click whilst a previous one is still
     * being dealt with by the client application */

    drag_box.draw=_slider_draw;
    drag_box.move=_slider_move;
    drag_box.remove=_slider_remove;
    drag_box.wimp_window=WIMP_WINDOW;
    drag_box.drag_type=9;
    drag_box.workspace=sliding;

    /* this provides data to create a suitable mouse click */

    sliding[1]=WIMP_WINDOW;
    sliding[0]=poll_block->mouse_click.buttons>>4;
    sliding[2]=poll_block->mouse_click.icon_handle;
    sliding[3]=0;

    /* drag boxes are in screen coordinates, so need to find out where the window is */

    wwin.window=WIMP_WINDOW;
    regs.r[1]=((int) &wwin);

    if ((e = _kernel_swi (Wimp_GetWindowState, &regs, &regs)) != NULL) {
      DEBUG debug_output ("slider", "Error from get window state");
                                                                          }
    /* first set up parent box within which we can drag then the 'point box'
     * that we are actually dragging */

    drag_box.parent_box.xmax=s->bb_overall.xmax+ wwin.visible.xmin-wwin.scx;
    drag_box.parent_box.ymax=s->bb_overall.ymax+ wwin.visible.ymax-wwin.scy;
    drag_box.parent_box.xmin=s->bb_overall.xmin+ wwin.visible.xmin-wwin.scx -4;
    drag_box.parent_box.ymin=s->bb_overall.ymin+ wwin.visible.ymax-wwin.scy;

    drag_box.dragging_box.xmin=poll_block->mouse_click.x;
    drag_box.dragging_box.ymin=poll_block->mouse_click.y;
    drag_box.dragging_box.xmax=poll_block->mouse_click.x;
    drag_box.dragging_box.ymax=poll_block->mouse_click.y;

    regs.r[1]=(int) &drag_box;


    if ((e = _kernel_swi (Wimp_DragBox, &regs, &regs)) != NULL)
      return (e) ;

    gadgets_set_drag_function(slider_drag);

    *claimed = TRUE ;
  }
  else
  {
    *claimed = FALSE ;
  }
  }
  return NULL ;
}

static void slider_set_value(slider_internal *s,int val,int force)
{
  int       lastx,newx;
  wimp_Bbox one,two;

  if (!force && (val == s->value)) return;

  DEBUG debug_output ("slider", "slider_set_value, new value: %d\n\r",val) ;

  if (val > s->upper_bound) val=s->upper_bound;
  if (val < s->lower_bound) val=s->lower_bound;

  val -= s->lower_bound;
  if (s->step) val = (val * s->step)/s->step;
  val += s->lower_bound;

  lastx=s->lastx;
  slider_update_bbox(s,&one,&two,val);
  newx=s->lastx;

  resize_icon(WIMP_WINDOW,s->slider_handle,&one);
  resize_icon(WIMP_WINDOW,s->background_handle,&two);

  just_redraw_abit(s,WIMP_WINDOW,lastx,newx);
}

/* No Key Presses */

_kernel_oserror *slider_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
/*  _kernel_oserror        *e; */
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  slider_internal *s        = (slider_internal *) gadget->data ;

  window=window;

  DEBUG debug_output ("slider", "slider_method: entry\n\r") ;

  switch (method)
  {
    case Slider_SetValue:
        slider_set_value(s,user_regs->r[4],0);
        break;

    case Slider_GetValue:
        user_regs->r[0] = s->value;
        break;

    case Slider_SetBound:
        if (user_regs->r[0] & 1) s->lower_bound = user_regs->r[4];
        if (user_regs->r[0] & 2) s->upper_bound = user_regs->r[5];
        if (user_regs->r[0] & 4) s->step        = user_regs->r[6];

        /* bound change may cause an update */
        slider_set_value(s,s->value,1);
        break;

    case Slider_GetBound:
        if (user_regs->r[0] & 4)  user_regs->r[2] = s->step;
        if (user_regs->r[0] & 2)  user_regs->r[1] = s->upper_bound;
        if (user_regs->r[0] & 1)  user_regs->r[0] = s->lower_bound;

        break;

    case Slider_SetColour:
        s->col = user_regs->r[4];
        s->bcol = user_regs->r[5];

        set_icon_state(WIMP_WINDOW,s->slider_handle,15 *wimp_ICONFLAGS_BACKCOL, user_regs->r[4] *wimp_ICONFLAGS_BACKCOL);
        set_icon_state(WIMP_WINDOW,s->background_handle,15 *wimp_ICONFLAGS_BACKCOL, user_regs->r[5] *wimp_ICONFLAGS_BACKCOL);

        break;

    case Slider_GetColour:
        user_regs->r[0] = s->col;
        user_regs->r[1] = s->bcol;

        break;
    default:
        return (BadMethod(method));

  }
  return NULL;
}

_kernel_oserror *slider_move     (GadgetInternal *gadget,
                                         ObjectID window,
                                         int window_handle,
                                         wimp_Bbox *box)
{
  slider_internal *s        = (slider_internal *) gadget->data ;

  IGNORE (window);

  /* resize the well */
  resize_icon(window_handle,s->well_handle,box);

  s->bb_overall.xmin = box->xmin+style_SLIDER_BORDERSIZE;
  s->bb_overall.xmax = box->xmax-style_SLIDER_BORDERSIZE;

  s->bb_overall.ymin = box->ymin+style_SLIDER_BORDERSIZE;
  s->bb_overall.ymax = box->ymax-style_SLIDER_BORDERSIZE;

  /* force a movement by re-setting the value */
  slider_set_value(s,s->value,1);

  return NULL;
}
@


4.5
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@d228 1
a228 1
    well.icon.data.indirect_text.buffer = "\0" ;
@


4.4
log
@Fixes to sizes of event blocks.
Now the Toolbox module only memcpy's what ou asked for it helps if
you ask for the right amount!
This manifested itself in lots of missing event_raise messages when
for example adjusters were pressed leading to false bug reports of
other apps which included adjuster icons.

Version 1.69. Tagged as 'Window-1_69'
@
text
@a31 1
#include "services.h"
d38 2
a39 2
#include "objects.toolbox.h"
#include "objects.window.h"
d41 4
a44 5
#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.utils.h"
#include "^.main.h"
@


4.3
log
@  Now compatible with new C compiler.
Detail:
  Implicit ints removed, empty initialisers fixed.
  An attempt has been made to fix the slider overflow problem by using 64-bit
    maths to calculate the value.
Admin:
  If built with cc 5.45 or later, this component requires the new C library
    with the long long support functions in it.
  Slider not tested at all, but the module builds.
  If the slider code works, this fixes bugzilla bug #7721


Version 1.68. Tagged as 'Window-1_68'
@
text
@d26 1
d335 1
a335 3
  long long multiply = s->lower_bound + (long long) offset_os * ((long long) s->upper_bound - s->lower_bound);

  return (int) (multiply / range);
@


4.2
log
@Build process improvements:
  !MkRam,fd7 added to enable RAM builds of all Toolbox modules
  MakeFile tidied up and support for RAM build added
Module now uses Toolbox memory allocation instead of calling OS_Module.
@
text
@d329 13
d351 1
a351 1
  static int sliding[4],temp;
d372 3
a374 4
      temp= poll_block->mouse_click.x-wwin.visible.xmin+wwin.scx;
      s->value=s->lower_bound +
        (temp-(s->bb_overall.xmin)) * (s->upper_bound - s->lower_bound)
        /(s->bb_overall.xmax - s->bb_overall.xmin);
d377 3
a379 4
      temp= poll_block->mouse_click.y-wwin.visible.ymax+wwin.scy;
      s->value=s->lower_bound +
        (temp-(s->bb_overall.ymin)) * (s->upper_bound - s->lower_bound)
        /(s->bb_overall.ymax - s->bb_overall.ymin);
@


4.1
log
@Initial revision
@
text
@d164 1
a164 1
      if (s->horizontal) {                                                              
d180 1
a180 1
     
d205 1
a205 1
    s->col  = ((gadget_template->hdr.flags) & Slider_BarColour) 
d215 2
a216 2
    s->bb_overall.xmin=gadget_template->hdr.xmin+12;
    s->bb_overall.ymin=gadget_template->hdr.ymin+12;
d218 2
a219 2
    s->bb_overall.xmax=gadget_template->hdr.xmax-12;
    s->bb_overall.ymax=gadget_template->hdr.ymax-12;
d293 1
a293 1
 
d306 1
a306 1
                     
d311 1
a311 1
/* this gets called (by the Window module - gadgets.c) when the 
d315 1
a315 1
{ 
d388 1
a388 1
        
d390 1
a390 1
       if (gadget->gadget_hdr.flags & (Slider_GenerateValueChangedEndOfDrag 
d397 1
a397 1
          if ((e = send_value_change ( window, gadget, s, 
d572 1
a572 1
                                         wimp_Bbox *box) 
d581 5
a585 5
  s->bb_overall.xmin = box->xmin+12;
  s->bb_overall.xmax = box->xmax-12;
                               
  s->bb_overall.ymin = box->ymin+12;
  s->bb_overall.ymax = box->ymax-12;
d589 1
a589 1
  
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
