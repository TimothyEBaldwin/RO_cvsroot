head	4.3;
access;
symbols
	Window-1_79:4.3
	Window-1_78:4.3
	Window-1_77:4.3
	Window-1_76:4.3
	Window-1_75:4.2
	Window-1_74:4.2
	Window-1_73:4.2
	Window-1_72:4.2
	Window-1_71:4.2
	RO_5_07:4.2
	Window-1_70:4.2
	Window-1_69:4.2
	Window-1_68:4.2
	Window-1_67:4.2
	Window-1_66:4.2
	Window-1_65:4.2
	Window-1_64:4.2
	Window-1_63:4.2
	Window-1_62:4.2
	Window-1_61:4.2
	Window-1_60:4.2
	Window-1_59:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Window-1_58:4.2
	Ursula_RiscPC:4.2.0.8
	Window-1_57:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	Ursula:4.2.0.6
	Ursula_bp:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	Window-1_56:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	Window-1_55:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	Window-1_54:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	Window-1_53:4.2
	Window-1_52:4.2
	Window-1_51:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Window_1_49:4.2
	afrost_NC2_Generic:4.1.7.3
	sbrodie_Window_1_48:4.2
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Window_1_46:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Window_1_44:4.2
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spin_merge_8Jul97:4.1.7.3
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Ursula_bp_13Jun97:4.2
	Spin_merge_13Jun97:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.3
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.3
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.3
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.3
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.22.05.07;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	oMg9J5QqfRoPENxy;

4.2
date	97.05.13.09.12.22;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.19;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.19;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.29;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.36;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.10;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.02.04.17.23.00;	author pwombwel;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.03.17.17.09.09;	author pwombwel;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   actbut.c
 * Purpose: action button gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          09-Mar-94: CSM: *Really* created
 *          21-Mar-94: CSM: Ooops, forgot a few bits to do with setting the event code.
 *          12-Dec-96: EPW: Added ActionButton_SetFont
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"

#include "../globals.h"
#include "../gadgets.h"
#include "../object.h"
#include "../veneers.h"       

#include "actbut.h"
#include "simple.h"

ICONLIST(2)                             /* Macro in h.gadgets */
extern int WIMP_WINDOW;
extern WindowInternal *CURRENT_WINDOW;

typedef struct _action_button_internal
{
  int   icon_handle ;
  ActionButton action_button ;  /* Fill this in from gadget_template */
} action_button_internal ;

_kernel_oserror *action_button_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  i;
    _kernel_oserror *e;
    action_button_internal *ab;
    int temp;

    IGNORE(window);

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the button's template (ie its textual string).
     * NOTE: NK 8.4.94, Now just allocate one bit of memory.
     */

    temp= gadget_template->data.action_button.max_text_len ;

    ab = mem_allocate (sizeof (action_button_internal)+temp, "action_button_add, action_button_internal type") ;
    if (ab == NULL)
        return out_of_memory();

    gadget->data = (void *) ab ;

    ab->action_button.max_text_len = temp;

    ab->action_button.text = (temp) ? (char *) (ab+1) : "";

    string_copy (ab->action_button.text, gadget_template->data.action_button.text);

    if ((e = CreateObjectFromTemplate (gadget_template->data.action_button.click_show
        ,(ObjectID *) &ab->action_button.click_show )) != NULL) goto error;

    ab->action_button.event      = (gadget_template->data.action_button.event == 0) ?
                                    ActionButton_Selected :
                                    gadget_template->data.action_button.event ;

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    i.window_handle                        = window_handle ;
    i.icon.data.indirect_text.buffer       = ab->action_button.text ;
    i.icon.data.indirect_text.buff_len     = ab->action_button.max_text_len ;
    if (gadget->gadget_hdr.flags & ActionButton_IsDefault)
    {
      i.icon.data.indirect_text.valid_string = style_DEFAULT_ACTION_VALIDSTR ;
      i.icon.flags                           = style_DEFAULT_ACTION_ICONFLAGS ;
    }
    else
    {
      i.icon.data.indirect_text.valid_string = style_ACTION_BUTTON_VALIDSTR ;
      i.icon.flags                           = style_ACTION_BUTTON_ICONFLAGS ;
    }

    /*
     * Trust that we're given sensible values!
     */

    SetCoords(i)                        /* Macro to set BBox */

    /*
     * Create the underlying wimp icon (and store its handle).
     */

    if ((e = CreateIcon(i,&(ab->icon_handle))) != NULL)
        goto error;

    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = ab->icon_handle;

    return NULL;


error:

    if (ab != NULL)
        mem_free (ab, "freeing action button and text");

    return e;
}

_kernel_oserror *action_button_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_oserror        *e;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  action_button_internal *ab        = (action_button_internal *) gadget->data ;

  IGNORE (window);

  DEBUG debug_output ("action", "action_button_method: entry\n\r") ;

  switch (method)
  {
    case ActionButton_SetText:

      /* Should I check string length here, or cheerfully reallocate? */
      /* Issue: not clear if ValueChanged_TooLong is just a flag asserted
       * when the text wont fit into the event block returned if ActionButton_
       * ValueChanged is raised as an event
       */
      DEBUG debug_output ("action", "ActionButton_SetText: string supplied was %s\n\r", (char *) user_regs->r[4]) ;
      DEBUG debug_output ("action", "ActionButton_SetText: we think max buffer len is %d, supplied string len is %d\n\r",
                          ab->action_button.max_text_len, string_length ((char *) user_regs->r[4])) ;

      if (!string_copy_chk (ab->action_button.text, (char *) user_regs->r[4], ab->action_button.max_text_len ))
      {
        DEBUG debug_output ("action", "ActionButton_SetValue: string was larger than previous max\n\r") ;
        return buffer_too_short();
      }

      /*
       * Redraw the gadget
       */

      if ((e = gadgets__redraw_gadget (WIMP_WINDOW, &(gadget->gadget_hdr))) != NULL)
        return (e) ;

      break ;


    case ActionButton_GetText:

      string_to_buffer((char *)user_regs->r[4],ab->action_button.text,&(user_regs->r[5]));

      break ;


    case ActionButton_SetClickShow:

      ab->action_button.click_show = (char *) user_regs->r[4] ;
      gadget->gadget_hdr.flags = (gadget->gadget_hdr.flags & ~(ActionButton_ClickShowTransient | ActionButton_ClickShowCentred | ActionButton_ClickShowAtPointer)) |
               ((user_regs->r[5] &1<<0) ? ActionButton_ClickShowTransient:0) |
               ((user_regs->r[5] &1<<1) ? ActionButton_ClickShowCentred:0) |
               ((user_regs->r[5] &1<<2) ? ActionButton_ClickShowAtPointer:0) ;

      break ;


    case ActionButton_GetClickShow:

      user_regs->r[METHOD_RETURN_REGISTER + 0] = (int) ab->action_button.click_show ;
      user_regs->r[METHOD_RETURN_REGISTER + 1] = ((gadget->gadget_hdr.flags & ActionButton_ClickShowTransient) ? 1<<0:0) |
        ((gadget->gadget_hdr.flags & ActionButton_ClickShowCentred) ? 1<<1:0)|
        ((gadget->gadget_hdr.flags & ActionButton_ClickShowAtPointer) ? 1<<2:0);
      break ;


    case ActionButton_SetEvent:

      ab->action_button.event = user_regs->r[4] ;

      break ;


    case ActionButton_GetEvent:

      user_regs->r[METHOD_RETURN_REGISTER + 0] = ab->action_button.event ;

      break;
    
    case ActionButton_SetFont:
      if (WIMP_VERSION_NUMBER >= 380)
          return (gadgets_set_font(CURRENT_WINDOW, ab->icon_handle,
      		(char *) user_regs->r[4],user_regs->r[5],
      		user_regs->r[6], style_ACTION_BUTTON_ICONFLAGS));
      break;

    default:

      return (BadMethod(method));

      break ;
  }

  return NULL ;
}

_kernel_oserror *action_button_mouse_click (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  action_button_internal *ab        = (action_button_internal *) gadget->data ;
  _kernel_swi_regs regs ;
  _kernel_oserror *e ;
  ToolboxEvent            event ;


  DEBUG debug_output ("action", "Click on action button %s (buttons %d)\n\r",
    ab->action_button.text, poll_block->mouse_click.buttons) ;


  if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)) &&
       (poll_block->mouse_click.icon_handle == ab->icon_handle))
  {
    event.hdr.size       = sizeof (ToolboxEventHeader) + 4 ;
    event.hdr.event_code = ab->action_button.event ;
    event.hdr.flags  = poll_block->mouse_click.buttons ;
    event.hdr.flags |= (gadget->gadget_hdr.flags & 0x00000007) << 3 ;

    if ((e = gadgets_raise_event (window,gadget->gadget_hdr.component_id,&event)) != NULL)
      return (e);

    if (ab->action_button.click_show != NULL)
    {
      regs.r[0] = (gadget->gadget_hdr.flags & ActionButton_ClickShowTransient)?
                        Toolbox_ShowObject_AsMenu : 0;
      regs.r[1] = (int) ab->action_button.click_show ;
      if (gadget->gadget_hdr.flags & ActionButton_ClickShowCentred)
          regs.r[2] = Toolbox_ShowObject_Centre;
      else if (gadget->gadget_hdr.flags & ActionButton_ClickShowAtPointer)
          regs.r[2] = Toolbox_ShowObject_AtPointer;
      else
          regs.r[2] = Toolbox_ShowObject_Default;
      regs.r[3] = 0 ; /* Don't know if I need anything in here */
      regs.r[4] = (int) window ;
      regs.r[5] = (int) gadget->gadget_hdr.component_id ;
      if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL)
        return e ;
    }

    if ( (!(gadget->gadget_hdr.flags & ActionButton_IsLocal)) &&
         (poll_block->mouse_click.buttons != wimp_ADJUST_BUTTON) )
    {
      /*
       * Not a local button, therefore close parent window
       */

      regs.r[0] = 0 ; /* Flags */
      regs.r[1] = (int) window ;
      if ((e = _kernel_swi (Toolbox_HideObject, &regs, &regs)) != NULL)
        return (e);
    }

    *claimed = TRUE ;
  }
  else
  {
    *claimed = FALSE ;
  }

  return NULL ;
}

_kernel_oserror *action_button_key_pressed (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  action_button_internal *ab        = (action_button_internal *) gadget->data ;
  _kernel_swi_regs regs ;
  _kernel_oserror *e ;
  ToolboxEvent            event ;

  DEBUG debug_output ("action", "Action button key pressed method (button %s) key %d flags %d\n\r",
                      ab->action_button.text, poll_block->key_pressed.key_code, gadget->gadget_hdr.flags) ;
  IGNORE(claimed);

  if ((!(gadget->gadget_hdr.flags & Gadget_Faded)) &&
       (((poll_block->key_pressed.key_code == 13) &&             /* return */
        (gadget->gadget_hdr.flags & ActionButton_IsDefault)) ||
       ((poll_block->key_pressed.key_code == 0x1b) &&           /* escape */
        (gadget->gadget_hdr.flags & ActionButton_IsCancel))))
  {
    event.hdr.size       = sizeof (ToolboxEventHeader) + 4 ;
    event.hdr.event_code = ab->action_button.event ;
    event.hdr.flags  = 0 ; /* Means return/escape was used to 'press' button */
    event.hdr.flags |= (gadget->gadget_hdr.flags & 0x00000007) << 3 ;

    if ((e = gadgets_raise_event (window,gadget->gadget_hdr.component_id,&event)) != NULL)
      return (e);

    if (ab->action_button.click_show != NULL)
    {
      regs.r[0] = 0 ; /* Wimp_CreateMenu semantics */
      regs.r[1] = (int) ab->action_button.click_show ;
      regs.r[2] = 0 ;
      regs.r[3] = 0 ; /* Don't know if I need anything in here */
      regs.r[4] = (int) window ;
      regs.r[5] = (int) gadget->gadget_hdr.component_id ;
      if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL)
        return e ;
    }

    if (!(gadget->gadget_hdr.flags & ActionButton_IsLocal))
    {
      /*
       * Not a local button, therefore close parent window
       */

      regs.r[0] = 0 ; /* Flags */
      regs.r[1] = (int) window ;
      if ((e = _kernel_swi (Toolbox_HideObject, &regs, &regs)) != NULL)
        return (e);
    }

  }

  return NULL ;
}

_kernel_oserror *action_button_remove   (GadgetInternal *gadget,
                                         ObjectID window,
                                         int recurse) 
{
   _kernel_oserror *e;
   action_button_internal *ab        = (action_button_internal *) gadget->data ;

   e = DeleteIcons(gadget,window);

   if (!recurse && ab->action_button.click_show) 
     toolbox_delete_object(0,(ObjectID) ab->action_button.click_show);
  
   mem_free(ab,"removing action button");
   return e;
}
@


4.2
log
@Spinner branch merged
@
text
@a32 1
#include "services.h"
d39 2
a40 2
#include "objects.toolbox.h"
#include "objects.window.h"
d42 4
a45 4
#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"       
#include "^.veneers.h"       
a48 1
#include "main.h"	// For WIMP_VERSION_NUMBER
@


4.1
log
@Initial revision
@
text
@d21 1
d50 1
d54 1
d201 4
a204 2
      gadget->gadget_hdr.flags = (gadget->gadget_hdr.flags & ~ActionButton_ClickShowTransient) |
                                ((user_regs->r[5] &1) ? ActionButton_ClickShowTransient:0);
d212 3
a214 1
      user_regs->r[METHOD_RETURN_REGISTER + 1] = (gadget->gadget_hdr.flags & ActionButton_ClickShowTransient) ? 1:0;
d230 7
d277 1
a277 1
      regs.r[0] = (gadget->gadget_hdr.flags & ActionButton_ClickShowTransient) ? 
d280 6
a285 1
      regs.r[2] = Toolbox_ShowObject_Default ;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Added support for nested windows and showtypes 2 and 3 - centred and at pointer
@
text
@a20 1
 *          12-Dec-96: EPW: Added ActionButton_SetFont
a48 1
#include "main.h"	// For WIMP_VERSION_NUMBER
a51 1
extern WindowInternal *CURRENT_WINDOW;
a221 7
      break;
    
    case ActionButton_SetFont:
      if (WIMP_VERSION_NUMBER >= 380)
          return (gadgets_set_font(CURRENT_WINDOW, ab->icon_handle,
      		(char *) user_regs->r[4],user_regs->r[5],
      		user_regs->r[6], style_ACTION_BUTTON_ICONFLAGS));
@


4.1.7.3
log
@Added SetFont methods for Radio & Option buttons
Added Service_StartWimp (0x49) to cope with softloading a
window manager *after* this module.
@
text
@d201 2
a202 4
      gadget->gadget_hdr.flags = (gadget->gadget_hdr.flags & ~(ActionButton_ClickShowTransient | ActionButton_ClickShowCentred | ActionButton_ClickShowAtPointer)) |
               ((user_regs->r[5] &1<<0) ? ActionButton_ClickShowTransient:0) |
               ((user_regs->r[5] &1<<1) ? ActionButton_ClickShowCentred:0) |
               ((user_regs->r[5] &1<<2) ? ActionButton_ClickShowAtPointer:0) ;
d210 1
a210 3
      user_regs->r[METHOD_RETURN_REGISTER + 1] = ((gadget->gadget_hdr.flags & ActionButton_ClickShowTransient) ? 1<<0:0) |
        ((gadget->gadget_hdr.flags & ActionButton_ClickShowCentred) ? 1<<1:0)|
        ((gadget->gadget_hdr.flags & ActionButton_ClickShowAtPointer) ? 1<<2:0);
d273 1
a273 1
      regs.r[0] = (gadget->gadget_hdr.flags & ActionButton_ClickShowTransient)?
d276 1
a276 6
      if (gadget->gadget_hdr.flags & ActionButton_ClickShowCentred)
          regs.r[2] = Toolbox_ShowObject_Centre;
      else if (gadget->gadget_hdr.flags & ActionButton_ClickShowAtPointer)
          regs.r[2] = Toolbox_ShowObject_AtPointer;
      else
          regs.r[2] = Toolbox_ShowObject_Default;
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
