head	4.4;
access;
symbols
	Window-1_79:4.4
	Window-1_78:4.3
	Window-1_77:4.3
	Window-1_76:4.3
	Window-1_75:4.2
	Window-1_74:4.1
	Window-1_73:4.1
	Window-1_72:4.1
	Window-1_71:4.1
	RO_5_07:4.1
	Window-1_70:4.1
	Window-1_69:4.1
	Window-1_68:4.1
	Window-1_67:4.1
	Window-1_66:4.1
	Window-1_65:4.1
	Window-1_64:4.1
	Window-1_63:4.1
	Window-1_62:4.1
	Window-1_61:4.1
	Window-1_60:4.1
	Window-1_59:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Window-1_58:4.1
	Ursula_RiscPC:4.1.0.10
	Window-1_57:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	Ursula:4.1.0.8
	Ursula_bp:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	Window-1_56:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	Window-1_55:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	Window-1_54:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	Window-1_53:4.1
	Window-1_52:4.1
	Window-1_51:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Window_1_49:4.1
	afrost_NC2_Generic:4.1.7.1
	sbrodie_Window_1_48:4.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_Window_1_46:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	sbrodie_Window_1_44:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Ursula_bp_13Jun97:4.1
	Spin_merge_13Jun97:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2018.03.21.21.16.00;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	DdmkeShLu70MYmvA;

4.3
date	2015.08.18.22.05.07;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	oMg9J5QqfRoPENxy;

4.2
date	2015.07.17.17.56.14;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	oYQsRGuYJ2igjFty;

4.1
date	96.11.05.09.23.20;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.20;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.33;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.37;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.15;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Button_GetFlags method fixes
The gadget copy of the Wimp flags was not being correctly updated, should be
  newflags = (oldflags BIC clear_word) ^ eor_word
per analysis in ticket #442.
In passing, it was also noted that the eor_word was not being masked, meaning it would be possible to toggle the indirect icon flag - breaking the rules set out on the User Interface Toolbox manual for that gadget type.

button.c: Fix flags copy, and mask correctly. Trim some superfluous breaks.
draggable.c: Fix out of bounds array access, found by static analysis.

Version 1.79. Tagged as 'Window-1_79'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   draggable.c
 * Purpose: draggable gadgets
 * Author:  Neil Kelleher
 * History: 22-Feb-94: IDJ: created
 *           8-Feb-95: IDJ: bug-fix AQU-01208: apply bbox to pointer rather than box, to allow
 *                          draggable to partially be dragged off-screen
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "Global/NewErrors.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"

#include "../globals.h"
#include "../gadgets.h"
#include "../object.h"

#include "draggable.h"

ICONLIST(2)
extern int WIMP_WINDOW;
extern ScreenDisplay Display;

typedef struct _draggable
{
  int   icon_handle;
  char  *sprite_name,*text,*spritev;
  int   max_text,max_sprite;
  int   btype;
} draggable;

static int btypes[] = {wimp_BUTTON_CLICK_DRAG,wimp_BUTTON_DOUBLE_CLICK_DRAG,wimp_BUTTON_DOUBLE_DRAG};
#define NUM_TYPES 3

_kernel_oserror *draggable_add      (GadgetInternal *gadget, ObjectID window,
                                int **icon_list, Gadget *gadget_template, int window_handle)
{
    wimp_IconCreate  i;
    _kernel_oserror *e=NULL;
    draggable           *l;
    int temp=0;
    wimp_GetWindowInfo wwin;

    IGNORE(window);

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the draggable's template (ie its textual draggable string).
     */

    if (gadget_template->hdr.flags & Draggable_Text)
       temp = gadget_template->data.draggable.max_text_len ;

    if (gadget_template->hdr.flags & Draggable_Sprite)
       temp += (gadget_template->data.draggable.max_sprite_len +1); /* for s */

    l = mem_allocate (sizeof (draggable) + temp, "draggable_add, draggable type") ;
    if (l == NULL)
        return out_of_memory();

    l->btype = (gadget_template->hdr.flags & Draggable_TypeMask) >> Draggable_TypeShift ;

    if (l->btype >= NUM_TYPES) {
       e = make_error_hex (Window_InvalidFlags,1,Draggable_Base);
       goto error;
    }

    i.icon.flags                           = btypes[(l->btype)] * wimp_ICONFLAGS_BUTTON_TYPE +
                                             wimp_ICONFLAGS_FORECOL * wimp_BLACK +
                                             wimp_ICONFLAGS_HCENTRE + wimp_ICONFLAGS_INDIRECT +
                                             wimp_ICONFLAGS_BACKCOL * wimp_VERY_LIGHT_GREY +
                                                wimp_ICONFLAGS_ESG*1;

    l->max_text = 0;
    l->max_sprite = 0;

    if (gadget_template->hdr.flags & Draggable_Text) {
        l->max_text=gadget_template->data.draggable.max_text_len;
        l->text= (l->max_text) ? (char *) (l+1) : "";
        string_copy_chk (l->text,gadget_template->data.draggable.text,l->max_text);
        i.icon.data.indirect_text.buffer       = l->text ;
        i.icon.flags |= wimp_ICONFLAGS_TEXT;
        i.icon.data.indirect_text.buff_len     = l->max_text ;
    }

    if (gadget_template->hdr.flags & Draggable_Sprite) {

        l->max_sprite=gadget_template->data.draggable.max_sprite_len;
        /* if sprite only, then max text may be wrong */
        l->sprite_name=((char *) (l+1)) + (temp - l->max_sprite);
        l->spritev = l->sprite_name-1;
        *(l->spritev)= 's';
        string_copy_chk (l->sprite_name,gadget_template->data.draggable.sprite,l->max_sprite);
        i.icon.flags |= wimp_ICONFLAGS_SPRITE;
        if (gadget_template->hdr.flags & Draggable_Text)
            i.icon.data.indirect_text.valid_string = l->spritev ;
        else {
            int temp = (int) &wwin;
            wwin.window_handle = window_handle;
            if (window_handle != NULL)
                wimp_get_window_info ((void *) (temp +1));   /* get window bits without icons */
            else
                wwin.window.sprite_area = (void *) 1;

            i.icon.data.indirect_sprite.name_len = l->max_sprite;
            i.icon.data.indirect_sprite.sprite_area = wwin.window.sprite_area;
            i.icon.data.indirect_sprite.sprite.name=l->sprite_name;
        }
    }
    else i.icon.data.indirect_text.valid_string = "";

    gadget->data = (void *) l ;

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    i.window_handle                        = window_handle;

    SetCoords(i)

    /*
     * Create the underlying wimp icon (and store its handle).
     */

    /* debug below doesn't cope with all sorts of draggable */

    /* DEBUG debug_output ("draggable", "Creating icon with text:%s spritev:%s\n\r",
          i.icon.data.indirect_text.buffer,i.icon.data.indirect_text.valid_string); */

    if ((e = CreateIcon(i,&(l->icon_handle))) != NULL) goto error;

    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = l->icon_handle;

    return NULL;


error:

    if (l != NULL)
        mem_free (l, "freeing draggable");

    return e;
}

static ObjectID drag_window;
static ComponentID drag_gadget;
static int drflags;

static _kernel_oserror *draggable_drag(wimp_PollBlock *poll_block)
{
    DraggableDragEndedEvent event;
    wimp_PointerInfo info;
    _kernel_oserror *e;                     
    _kernel_swi_regs regs;

    IGNORE (poll_block);

    if (DRAG_SOLID) _swix(DragASprite_Stop,0);

    event.hdr.size       = sizeof (event) ;
    event.hdr.event_code = Draggable_DragEnded;
    event.hdr.flags =0;

    if ((e = _swix(Wimp_GetPointerInfo,_IN(1),&info)) != NULL) return (e);

    DEBUG debug_output ("draggable", "Draggable drag ended on icon %d, window %d\n\r",
      info.icon_handle,info.window_handle);
                                               
    if (drflags & Draggable_ToolboxIds) {
       gadgets_wimp_to_toolbox((int *)&info,&regs);
       /* if bit 8 of r2 is set then it wasn't a toolbox window */
       if (regs.r[2] & (1<<8)) {
         event.window_handle  = info.window_handle;
         event.icon_handle    = info.icon_handle;
       } else {
          event.hdr.flags =1;
          event.window_handle = regs.r[3];
          event.icon_handle   = regs.r[4];
       }  
    }
    else {
    event.window_handle  = info.window_handle;
    event.icon_handle    = info.icon_handle;
    }

    event.x              = info.x;
    event.y              = info.y;

    if ((e = gadgets_raise_event ( drag_window, drag_gadget , &event)) != NULL)
      return (e);

    return e;
}

extern _kernel_oserror *drag_an_object(void (*render)(void),wimp_Bbox *box);

static Gadget gg;

static void render(Gadget *ggg)
{

    _kernel_swi_regs p;

    p.r[0]=0;
    p.r[1]=(int) ggg;
    gadgets_plotgadget(&p);
}

#define TEST_KEY(in,out)  _swix(OS_Byte,_IN(0) | _IN(1) | _OUT(1), 121, in, &out)

_kernel_oserror *draggable_mouse_click(GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{

    draggable *di = (draggable *) gadget->data;
    int btns = poll_block->mouse_click.buttons;

    if ((btns == wimp_SELECT_BUTTON << 4)  || (btns == wimp_ADJUST_BUTTON << 4 ))
  {
        extern int DRAG_SOLID;
        static DragBox drag_box;
        _kernel_swi_regs regs,pregs;
        wimp_GetWindowState wwin;
        _kernel_oserror *e=NULL;
        DraggableDragStartedEvent event;


    wwin.open.window_handle =WIMP_WINDOW;

    if ((e = wimp_get_window_state(&wwin)) != NULL) {
      DEBUG debug_output ("draggable", "Error from get window state");
                                                                        }
    drag_box.dragging_box.xmax=gadget->gadget_hdr.xmax+ wwin.open.visible_area.xmin-wwin.open.scx;
    drag_box.dragging_box.ymax=gadget->gadget_hdr.ymax+ wwin.open.visible_area.ymax-wwin.open.scy;
    drag_box.dragging_box.xmin=gadget->gadget_hdr.xmin+ wwin.open.visible_area.xmin-wwin.open.scx;
    drag_box.dragging_box.ymin=gadget->gadget_hdr.ymin+ wwin.open.visible_area.ymax-wwin.open.scy;

    DEBUG debug_output("draggable","Confining drag to screen dimensions %d %d\n",Display.XPix,Display.YPix);

    drag_box.parent_box.xmax=Display.XPix << Display.XEig ;
    drag_box.parent_box.ymax=Display.YPix << Display.YEig ;
    drag_box.parent_box.xmin=0;
    drag_box.parent_box.ymin=0;

    drag_box.drag_type=5;

    if (DRAG_SOLID) {
                                                           
       int dflags =0;

        /* first attempt to use draganobject, if its not there, then use DAS
           if sprite or outline if text only */

       if (gadget->gadget_hdr.flags & Draggable_HasDropShadow)
           dflags = 128;
       if (gadget->gadget_hdr.flags & Draggable_NotDithered)
           dflags |= 256;

       gg.hdr.type=Draggable_Base;
       gg.hdr.xmin=0;
       gg.hdr.flags=gadget->gadget_hdr.flags;
       gg.hdr.ymin=0;
       gg.hdr.xmax=gadget->gadget_hdr.xmax - gadget->gadget_hdr.xmin + 4;
       gg.hdr.ymax=gadget->gadget_hdr.ymax - gadget->gadget_hdr.ymin;
       gg.hdr.max_help=0;
       gg.hdr.help_message=0;
       gg.data.draggable.max_text_len=di->max_text;
       gg.data.draggable.max_sprite_len=di->max_sprite;
       gg.data.draggable.text=di->text;
       gg.data.draggable.sprite=di->sprite_name;

       pregs.r[0] = (int) &gg;

       /* IDJ:8-Feb-95: bug-fix AQU-01208: apply bbox to pointer rather than box, to allow
                        draggable to partially be dragged off-screen
        */
       regs.r[0]=0x49 + (3<<16) + dflags;
       regs.r[1]=(int) render;
       regs.r[2]=(int) &pregs;
       regs.r[3]=(int) &(drag_box.dragging_box);
       e = _kernel_swi (DragAnObject_Start, &regs, &regs);

       if (e && (e->errnum == ErrorNumber_NoSuchSWI)) {
                /* SWI not known */

          regs.r[0]=0x49 + dflags;
          regs.r[1]=1;
          regs.r[2]=(int) di->sprite_name;
          regs.r[3]=(int) &(drag_box.dragging_box);
          if ((e = _kernel_swi (DragASprite_Start, &regs, &regs)) != NULL)
             return e;
        }

    }

    else {

    regs.r[1]=(int) &drag_box;


    if ((e = _kernel_swi (Wimp_DragBox, &regs, &regs)) != NULL)
      return (e) ;
    }
                              
    drflags = gadget->gadget_hdr.flags;
    gadgets_set_drag_function(draggable_drag);

    drag_window = window;
    drag_gadget = gadget->gadget_hdr.component_id;

    if (gadget->gadget_hdr.flags & Draggable_GenerateDragStarted) {
       int mod_state=0,temp;

       /* see PRM 1-849 and 1-863, key numbers must be EOR'ed with 128 */

       TEST_KEY(128,temp);                      /* SHIFT */
       if (temp==255) mod_state = 1<<3;

       TEST_KEY(129,temp);                      /* CTRL */
       if (temp==255) mod_state |= 1<<4;

       event.hdr.size       = sizeof (event) ;
       event.hdr.event_code = Draggable_DragStarted;
       event.hdr.flags          = (poll_block->mouse_click.buttons >>4) | mod_state;

       DEBUG debug_output ("draggable", "Draggable started with %d flags\n\r",event.hdr.flags);

       if ((e = gadgets_raise_event ( drag_window, drag_gadget , &event)) != NULL)
          return (e);
   }

    *claimed = TRUE;
   } else if ((btns == 2<<4) || (btns == 2<<8) || (btns == 2))  /* don't update block for Menu */
  *claimed=FALSE;
  else *claimed = TRUE;
  return NULL;

}

_kernel_oserror *draggable_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_oserror        *e=NULL;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2],update=0;
  draggable *l           = (draggable *) gadget->data ;

  window=window;

  DEBUG debug_output ("draggable", "draggable_method: entry\n\r") ;

  switch ((method -Draggable_Base) ){
    case (Draggable_SetSprite -Draggable_Base):
       update=1;
       if (!string_copy_chk (l->sprite_name,(char *)user_regs->r[4],l->max_sprite))
           return buffer_too_short();

       break;
    case (Draggable_GetSprite -Draggable_Base):
       string_to_buffer ((char *)user_regs->r[4],l->sprite_name,&(user_regs->r[5]));

       break;
    case (Draggable_SetText -Draggable_Base):
       update =1;
       if (!string_copy_chk (l->text,(char *)user_regs->r[4],l->max_text))
          return buffer_too_short();

       break;
    case (Draggable_GetText -Draggable_Base):
       string_to_buffer ((char *)user_regs->r[4],l->text,&(user_regs->r[5]));

       break;

    case (Draggable_SetState -Draggable_Base):
        {                 

       wimp_SetIconState w;
       w.window_handle= WIMP_WINDOW;
       w.icon_handle=l->icon_handle;        

       w.clear_word = wimp_ICONFLAGS_INVERT;
       w.EOR_word = (user_regs->r[4]) ? wimp_ICONFLAGS_INVERT : 0;

       _swix(Wimp_SetIconState, _IN(1), &w);

        }
        break;

    case (Draggable_GetState -Draggable_Base):
        {                 

       wimp_GetIconState w;
       w.window_handle= WIMP_WINDOW;
       w.icon_handle=l->icon_handle;

       _swix(Wimp_GetIconState, _IN(1), &w);
        
        user_regs->r[0] = (w.icon.flags & wimp_ICONFLAGS_INVERT) ? 1:0;

        }
        break;

    default:
       return(BadMethod(method));
    break;
  }

  if (update) e = gadgets__redraw_gadget (WIMP_WINDOW, &(gadget->gadget_hdr));
  return e;
}
@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@d60 1
a60 1
#define MAX_TYPES 3
d90 1
a90 1
    if (l->btype >MAX_TYPES) {
@


4.2
log
@Fix for NULL pointer dereference
draggable.c: fixes problem when dragging a file icon, eg. the hosts file in !InetSetup.

Version 1.75. Tagged as 'Window-1_75'
@
text
@a31 1
#include "services.h"
d38 2
a39 2
#include "objects.toolbox.h"
#include "objects.window.h"
d41 3
a43 4
#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.main.h"
@


4.1
log
@Initial revision
@
text
@d28 1
d320 1
a320 1
       e = _kernel_swi (0x49c40, &regs, &regs);
d322 1
a322 1
       if (e->errnum == 486) {
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
