head	4.1;
access;
symbols
	Window-1_79:4.1
	Window-1_78:4.1
	Window-1_77:4.1
	Window-1_76:4.1
	Window-1_75:4.1
	Window-1_74:4.1
	Window-1_73:4.1
	Window-1_72:4.1
	Window-1_71:4.1
	RO_5_07:4.1
	Window-1_70:4.1
	Window-1_69:4.1
	Window-1_68:4.1
	Window-1_67:4.1
	Window-1_66:4.1
	Window-1_65:4.1
	Window-1_64:4.1
	Window-1_63:4.1
	Window-1_62:4.1
	Window-1_61:4.1
	Window-1_60:4.1
	Window-1_59:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	sbrodie_Toolbox_Ursula_231198:4.1
	Window-1_58:4.1
	Ursula_RiscPC:4.1.0.10
	Window-1_57:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	Ursula:4.1.0.8
	Ursula_bp:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	Window-1_56:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	Window-1_55:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	Window-1_54:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	Window-1_53:4.1
	Window-1_52:4.1
	Window-1_51:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Window_1_49:4.1
	afrost_NC2_Generic:4.1.7.1
	sbrodie_Window_1_48:4.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.1
	sbrodie_Window_1_46:4.1
	sbrodie_Expresso_BETA6_19980204:4.1
	sbrodie_Window_1_44:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Ursula_bp_13Jun97:4.1
	Spin_merge_13Jun97:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.23.28;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.28;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.47.23;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.19.39;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.43.03;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@  ToolboxEvent            event ;

      /*
       * Raise toolbox event
       * /* Hatchet job here - to find out the maximum string length, I use
       *    knowledge of which structures are used...
       * Egads! This code is frogging ugly. Not convinced it's right yet either...
       */

      if (string_length (d->display_field.text) >=
          (sizeof (ToolboxEvent) - sizeof (ToolboxEventHeader) - 4))
      {
        event.hdr.size = sizeof (ToolboxEvent) ; /* It's curved to fit... */
        event.data.words[0] = DisplayField_ValueChanged_TooLong ;
        (void) string_copy_chk ( (char *) &event.data.words[1],
                                 d->display_field.text,
                                 sizeof (ToolboxEvent) - sizeof (ToolboxEventHeader) - 5 ) ;
                                 /* Leave room for terminator! */
        DEBUG debug_output ("display", "DisplayField_SetValue: Truncating string to %d characters\n\r",
                            sizeof (ToolboxEvent) - sizeof (ToolboxEventHeader) - 5) ;
      }
      else
      {
        /* -5 means minus one for the terminator, minus four for the flags */
        event.hdr.size = string_length (d->display_field.text) + sizeof (ToolboxEventHeader) - 5 ;
        event.data.words[0] = 0 ;
        string_copy ( (char *) &event.data.words[1], d->display_field.text ) ;
        DEBUG debug_output ("dislpay", "DisplayField_SetValue: taking a chance, I think it's short enough\n\r") ;
      }

      event.hdr.event_code = DisplayField_ValueChanged ;

      DEBUG debug_output ("display", "DisplayField_SetValue: raising toolbox event\n\r") ;

      regs.r[0] = 0 ; /* Flags */
      regs.r[1] = (int) window ;
      regs.r[2] = (int) gadget ;
      regs.r[3] = (int) &event ;
      if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
        return (e);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
