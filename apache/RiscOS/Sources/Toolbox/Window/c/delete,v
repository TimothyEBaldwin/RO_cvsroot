head	4.4;
access;
symbols
	Window-1_79:4.4
	Window-1_78:4.4
	Window-1_77:4.4
	Window-1_76:4.4
	Window-1_75:4.3
	Window-1_74:4.3
	Window-1_73:4.3
	Window-1_72:4.3
	Window-1_71:4.3
	RO_5_07:4.3
	Window-1_70:4.3
	Window-1_69:4.3
	Window-1_68:4.3
	Window-1_67:4.3
	Window-1_66:4.3
	Window-1_65:4.3
	Window-1_64:4.3
	Window-1_63:4.3
	Window-1_62:4.3
	Window-1_61:4.3
	Window-1_60:4.3
	Window-1_59:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Window-1_58:4.3
	Ursula_RiscPC:4.3.0.4
	Window-1_57:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	Ursula:4.3.0.2
	Ursula_bp:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	Window-1_56:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	Window-1_55:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	Window-1_54:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	Window-1_53:4.3
	Window-1_52:4.3
	Window-1_51:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Window_1_49:4.3
	afrost_NC2_Generic:4.1.7.2
	sbrodie_Window_1_48:4.3
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.3
	sbrodie_Window_1_46:4.3
	sbrodie_Expresso_BETA6_19980204:4.3
	sbrodie_Window_1_44:4.3
	Spinner_RCA116:4.1.7.2
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spin_merge_8Jul97:4.1.7.2
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Ursula_bp_13Jun97:4.2
	Spin_merge_13Jun97:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.2
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2015.08.18.22.05.00;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	oMg9J5QqfRoPENxy;

4.3
date	98.01.15.13.19.20;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.09.12.09;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.16;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.16;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.12;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.16;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.41.54;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.19.18.57.24;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   delete.c
 * Purpose: delete a Window Object
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects/toolbox.h"
#include "objects/window.h"

#include "object.h"
#include "task.h"
#include "gadgets.h"
#include "events.h"
#include "show.h"

#include "delete.h"


extern int WIMP_VERSION_NUMBER;

extern void delete_all_keyboard_shortcuts(WindowInternal *window)
{
    int k;

    if (window->num_keyboard_shortcuts > 0 && window->keyboard_shortcuts != NULL)
    {
        for (k = 0; k < window->num_keyboard_shortcuts; k++)
        {
            /*
             * if object is attached to shortcut, then delete it
             */

            if (window->keyboard_shortcuts[k].key_show != NULL)
                _swix (Toolbox_DeleteObject, _INR(0,1), 0,
                             window->keyboard_shortcuts[k].key_show);
        }
        if (window->keyboard_shortcuts != NULL) {
           mem_free (window->keyboard_shortcuts, "deleted keyboard shortcuts");
           window->keyboard_shortcuts = NULL;
        }
        window->num_keyboard_shortcuts = 0;
    }
}

extern _kernel_oserror *delete_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to delete an object
     * R0 = 1
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => do not recursively delete the object
     *      R1 = Object ID
     */

    /*
     * The Toolbox has already checked that this is not just a delete
     * call for a shared Object.
     * We delete Object from the list of Objects for this
     * task.
     * If recursive delete is requested then we also call Toolbox_Delete
     * for any Objects "attached" to this Object.
     */

    _kernel_swi_regs *user_regs    = (_kernel_swi_regs *)r->r[4];
    int               flags        = user_regs->r[0];
    WindowInternal   *window       = (WindowInternal *)r->r[2], *win;
    wimp_PointerInfo  info;

    DEBUG debug_output ("delete", "Delete window object -- ID %x, flags %x\n", r->r[1], user_regs->r[0]);

    /* check to see if this object really exists ! */

    for (win = t->object_list; win != NULL; win = win->next) {
        if (win == window) break;
    }

    if (!win) {
        DEBUG debug_output ("delete", "tried to delete non existant window object -- ID %x, flags %x\n", r->r[1], user_regs->r[0]);
        return NULL;
    }

    /*
     * first hide the window
     */

    _swix (Toolbox_HideObject, _INR(0,1), 0, user_regs->r[1]);


    /*
     * delete attached objects (if recursive)
     */

    if (!(flags & Toolbox_DeleteObject_DontRecurse))
    {
        int k;

        if (window->menu != 0)
            _swix (Toolbox_DeleteObject, _INR(0,1), 0, window->menu);

        /* delete toolbars */

        for (k=0; k<4;k++)
        {
            if (*(&(window->ibl)+k))
               _swix (Toolbox_DeleteObject, _INR(0,1), 0, *(&(window->ibl)+k));
        }

        delete_all_keyboard_shortcuts(window);
    }

    /*
     * delete gadgets
     */

    gadgets_remove_all (window,flags & Toolbox_DeleteObject_DontRecurse);

    /* can't lose fonts as we don't know how many times they were found
       for this window */

    wimp_get_pointer_info(&info);
    if (window->wimp_window_handle == info.window_handle)
        events_pointer_leaving_window(window);

    /*
     * delete the actual window
     */

    if (WIMP_VERSION_NUMBER < 350)
       _swix(0x82d01, _IN(0), window->wimp_window_handle);

    /* Conditional deletion is part of fix for PAN-01317 */
    if ((window->state & WindowInternalFlags_PreventHideDelete) == 0) {
        wimp_delete_window ((wimp_DeleteWindow *) &window->wimp_window_handle);
    }


    /*
     * remove from task's object list
     */

    if (window->prev != NULL)
        window->prev->next = window->next;
    if (window->next != NULL)
        window->next->prev = window->prev;

    if (t->object_list == window)
        t->object_list = window->next;


    /*
     * and free up memory
     */

    if (window->keyboard_shortcuts != NULL)
        mem_free (window->keyboard_shortcuts, "window delete (keybd shorts)");

    if (window->icon_mappings != NULL)
        mem_free (window->icon_mappings, "window delete (icon mappings)");

    mem_free (window, "window delete");


    return NULL;
}

@


4.3
log
@PAN-01317 fixed: Wimp dying when Window deletes transiently shown objects
@
text
@a29 1
#include "services.h"
d35 2
a36 2
#include "objects.toolbox.h"
#include "objects.window.h"
@


4.2
log
@Spinner branch merged
@
text
@d42 2
d165 4
a168 1
    wimp_delete_window ((wimp_DeleteWindow *) &window->wimp_window_handle);
@


4.1
log
@Initial revision
@
text
@a50 1
    _kernel_swi_regs regs;
d61 2
a62 5
            {
                regs.r[0] = 0;
                regs.r[1] = (int)window->keyboard_shortcuts[k].key_show;
                _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
            }
d75 1
a75 1
    /* 
a99 1
    _kernel_swi_regs  regs;
d118 2
a119 4
    regs.r[0] = 0;
    regs.r[1] = user_regs->r[1];
    _kernel_swi (Toolbox_HideObject, &regs, &regs);
     
d121 1
a121 1
    /* 
d130 2
a131 6
        {
            regs.r[0] = 0;
            regs.r[1] = (int)window->menu;
            _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
        }
                                           
d135 3
a137 8
        {                              
            if (*(&(window->ibl)+k)) {

               regs.r[0] = 0;
               regs.r[1] = (int) *(&(window->ibl)+k);
               _kernel_swi (Toolbox_DeleteObject, &regs, &regs);

            }
d142 1
a142 1
    
d151 1
a151 1
 
d153 1
a153 1
    if (window->wimp_window_handle == info.window_handle) 
d155 1
a155 1
 
d158 4
a161 1
     */                           
a162 5
    if (WIMP_VERSION_NUMBER < 350) {
       _kernel_swi_regs regs;
       regs.r[0] = window->wimp_window_handle;
       _kernel_swi(0x82d01,&regs,&regs);
    }
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Add "Extendable X and Extendable Y" toolbars.
Improve pane-handling algorithms.
Fix alignment of labels in labelled boxes.
Align numberrange's slider more neatly and put adjusters in right place
Stringsets tidied up
Some useful checking added to string_set_toolbox_event
Showing as subwindow fixed up a lot.
@
text
@d51 1
d62 5
a66 2
                _swix (Toolbox_DeleteObject, _INR(0,1), 0,
                             window->keyboard_shortcuts[k].key_show);
d79 1
a79 1
    /*
d104 1
d123 4
a126 2
    _swix (Toolbox_HideObject, _INR(0,1), 0, user_regs->r[1]);

d128 1
a128 1
    /*
d137 6
a142 2
            _swix (Toolbox_DeleteObject, _INR(0,1), 0, window->menu);

d146 8
a153 3
        {
            if (*(&(window->ibl)+k))
               _swix (Toolbox_DeleteObject, _INR(0,1), 0, *(&(window->ibl)+k));
d158 1
a158 1

d167 1
a167 1

d169 1
a169 1
    if (window->wimp_window_handle == info.window_handle)
d171 1
a171 1

d174 1
a174 4
     */

    if (WIMP_VERSION_NUMBER < 350)
       _swix(0x82d01, _IN(0), window->wimp_window_handle);
d176 5
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
