head	4.3;
access;
symbols
	Window-1_79:4.3
	Window-1_78:4.3
	Window-1_77:4.3
	Window-1_76:4.3
	Window-1_75:4.2
	Window-1_74:4.2
	Window-1_73:4.2
	Window-1_72:4.2
	Window-1_71:4.2
	RO_5_07:4.2
	Window-1_70:4.2
	Window-1_69:4.2
	Window-1_68:4.2
	Window-1_67:4.2
	Window-1_66:4.2
	Window-1_65:4.2
	Window-1_64:4.2
	Window-1_63:4.2
	Window-1_62:4.2
	Window-1_61:4.2
	Window-1_60:4.2
	Window-1_59:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Window-1_58:4.2
	Ursula_RiscPC:4.2.0.8
	Window-1_57:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	Ursula:4.2.0.6
	Ursula_bp:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	Window-1_56:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	Window-1_55:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	Window-1_54:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	Window-1_53:4.2
	Window-1_52:4.2
	Window-1_51:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Window_1_49:4.2
	afrost_NC2_Generic:4.1.7.4
	sbrodie_Window_1_48:4.2
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Window_1_46:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Window_1_44:4.2
	Spinner_RCA116:4.1.7.4
	Spinner_B20_2:4.1.7.4
	Spinner_19_3:4.1.7.4
	Spinner_B18:4.1.7.4
	Spinner_B17:4.1.7.4
	Spin_merge_8Jul97:4.1.7.4
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.4
	Spinner_B14:4.1.7.4
	Spinner_B13:4.1.7.4
	Ursula_bp_13Jun97:4.2
	Spin_merge_13Jun97:4.1.7.4
	Spinner_B12:4.1.7.4
	Spinner_B10:4.1.7.4
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.4
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.4
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.4
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.22.05.01;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	oMg9J5QqfRoPENxy;

4.2
date	97.05.13.09.12.16;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.23;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.27;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.05;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.01.29.15.12.49;	author nturton;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.02.04.17.22.51;	author pwombwel;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	97.03.19.18.57.32;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   toolbar.c
 * Purpose: handles toolbars
 * Author:  NK
 * History: 13-Sep-94: NK: created
 *          19-Sep-96:EPW: Modified slightly to call show__open_window()
 *                         with revised parameters (no parent win, etc)
 *                         Toolbars should be re-implemented as sub-wins...
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "style.h"

#include "objects/toolbox.h"
#include "objects/window.h"

#include "object.h"
#include "events.h"
#include "task.h"
#include "gadgets.h"
#include "show.h"
#include "hide.h"
#include "veneers.h"

#include "toolbar.h"

/*
 * open_panes, called by show object and for open window requests
 * dynamically calculates the pane position (as absolute coordinates
 * are required) dependent on the type. Note that the Window module
 * can cope with a variable number of panes, even though the template
 * format 102 can only deal with 4. It can also cope with more 'generic'
 * panes - the hope being that this will future proof the code.
 */

int open_panes (WindowInternal *w, wimp_NestedOpenWindow *open, unsigned int magic, unsigned int parent_window_handle, unsigned int alignment_flags)
{
    _kernel_oserror *e = NULL;
    _kernel_swi_regs regs;
    int scx,scy,width,height;
    PaneInternal *pane = w->panes;
    WindowShowObjectBlock show;
    wimp_GetWindowState state;

    show.behind = open->behind;
    show.parent_window_handle = parent_window_handle;
    show.alignment_flags = alignment_flags &~ 1;

    if (pane) {
       scx = open->scx;
       scy = open->scy;

       while (pane && !e) {

          state.open.window_handle = pane->wimp;

          wimp_get_window_state( &state);

          /* maintain the pane's scroll position */

          if (state.flags & wimp_WINDOWFLAGS_OPEN) {
             show.scx = state.open.scx;
             show.scy = state.open.scy;
          } else {
             show.scx    = 0;
             show.scy    = 0;
          }
          width = open->visible_area.xmax - open->visible_area.xmin;
          height = open->visible_area.ymax - open->visible_area.ymin;

           /* internal/external*/

          if (pane->type & pane_INTERNAL) {
              show.visible_area.xmin = open->visible_area.xmin +pane->xoff;
              if (pane->type & pane_TOPLEFT) {
                   show.visible_area.ymax = open->visible_area.ymax +pane->yoff;
              }
              else {
                   show.visible_area.ymax = open->visible_area.ymin + pane->height +pane->yoff;
              }
          }
          else {
              if (pane->type & pane_TOPLEFT) {
                 show.visible_area.xmin = open->visible_area.xmin - pane->width + pane->xoff - w->fl;
                 show.visible_area.ymax = open->visible_area.ymax +pane->yoff;
              }
              else {
                 show.visible_area.ymax = open->visible_area.ymin +pane->yoff -w->fb;
                 show.visible_area.xmin = open->visible_area.xmin +pane-> xoff;
              }
          }

          /* attach the pane to the parent's scrolling? - doesn't really work
             but has some interesting affects */

          if (pane->type & pane_SCROLL) {
             show.visible_area.xmin += scx;
             show.visible_area.ymax -= scy;
          }

          show.visible_area.xmax = show.visible_area.xmin +pane->width;
          show.visible_area.ymin = show.visible_area.ymax -pane->height;

           /* clip/bounce - WindowTemplate 102 forces this behaviour
              though internally, it has to be enabled */

          if (pane->type & pane_CLIPBOUNCE) {
             if (pane->type & pane_INTERNAL) {
                /* clip */

                if (show.visible_area.ymin < open->visible_area.ymin) {
                   show.visible_area.ymin = open->visible_area.ymin;
                }

                if (show.visible_area.xmax > open->visible_area.xmax) {
                   show.visible_area.xmax = open->visible_area.xmax;
                }

                if (show.visible_area.ymax > open->visible_area.ymax) {
                   show.visible_area.ymax = open->visible_area.ymax;
                }

                if (show.visible_area.xmin < open->visible_area.xmin) {
                   show.visible_area.xmin = open->visible_area.xmin;
                }
             }
             else {
                /* bounce - TL left bounce, BL bottom bounce */
                 if (pane->type & pane_TOPLEFT) {
                    /* top left */
                    if (show.visible_area.xmin < 0) {
                      if (open->visible_area.xmin >=0) {
                         show.visible_area.xmin =0;
                         show.visible_area.xmax = pane->width;
                      } else {
                         show.visible_area.xmin = open->visible_area.xmin;
                         show.visible_area.xmax = show.visible_area.xmin + pane->width;
                      }
                    }
                 } else {
                    /* bottom left */
                    if (show.visible_area.ymin < 0) {
                      if (open->visible_area.ymin >=0) {
                         show.visible_area.ymin =0;
                         show.visible_area.ymax = pane->height;
                      } else {
                         show.visible_area.ymin = open->visible_area.ymin;
                         show.visible_area.ymax = show.visible_area.ymin + pane->height;
                      }
                    }
                 }

             }

          }

          /* if its been clipped/ bounced so that it is effectively invisble
             then don't show it at all, as the wimp may have better ideas ! */

          if ((show.visible_area.ymin < show.visible_area.ymax)
               && (show.visible_area.xmin < show.visible_area.xmax)) {
              regs.r[0] = magic ? Toolbox_ShowObject_AsSubWindow : 0;
              regs.r[1] = (int) pane->pane;
              regs.r[2] = Toolbox_ShowObject_FullSpec;
              regs.r[3] = (int) &show;
              regs.r[4] = (int) w->id;
              regs.r[5] = -1;

              e = _kernel_swi(Toolbox_ShowObject,&regs,&regs);
              show.behind = pane->wimp;

          }
          else {
              wimp_close_window(&pane->wimp);
          }
          pane = pane->next;
       }
    }
    return show.behind;
}

/* just closes all the panes associated with the window */

void close_panes(WindowInternal *w)
{
    _kernel_oserror *e = NULL;
    PaneInternal *pane = w->panes;

    while (pane && !e) {

       e = wimp_close_window(&pane->wimp);

       pane = pane->next;
    }
}

/* adds a pane to a window - this again copes with a linked list of
   panes rather than a fixed array */

void set_pane(WindowInternal *window,_kernel_swi_regs *user_regs)
{
   PaneInternal *pane;
   WindowInternal *pp;
   wimp_GetWindowState state;
   wimp_GetWindowInfo info;

   if (!window) return;
   pane = mem_allocate(sizeof(PaneInternal),"new pane");
   if (pane) {
      pane ->pane = (ObjectID) user_regs->r[3];
      _swix(Toolbox_ObjectMiscOp, _INR(0,2) | _OUT(0),
            0,pane->pane,Window_GetWimpHandle,&(pane->wimp));
      pane ->type = user_regs->r[4];
      pane ->xoff = user_regs->r[5];
      pane ->yoff = user_regs->r[6];
      _swix(Toolbox_GetInternalHandle, _INR(0,1) | _OUT(0),0,pane->pane,&pp);
      pp->parent =window;

      state.open.window_handle = pane->wimp;


#if 0

     /* this code looks at the window furniture of the pane - the intention
        being that you can then clip the width of a pane whilst taking its
        furniture into account. Unfortunately, this only solves part of the
        problem as the application may need to update the extent and scroll
        positions of the pane in order to get the effect right. In fact we
        really need windows in windows to get this right.
      */

      if (pane->type & 64) {
         wimp_GetWindowState furn;

         wimp_get_window_state(&state);
         state.open.behind = -3;
         wimp_open_window(&state);
         wimp_get_window_outline(&furn);
         wimp_close_window(&state);
         pane->ftop = furn.open.visible_area.ymax -state.open.visible_area.ymax;
         pane->fright = furn.open.visible_area.xmax -state.open.visible_area.xmax;
         pane->fbot = furn.open.visible_area.ymin -state.open.visible_area.ymin;

      } else {
         wimp_get_window_state(&state);
      }

#else
      wimp_get_window_state( &state);
#endif
      info.window_handle = pane->wimp;
      wimp_get_window_info( (wimp_GetWindowInfo *)((int)&info + 1));

      /* Shouldn't stretch an external topleft toolbox horizontally */
      if (info.window.flags & wimp_WINDOWFLAGS_IGNORE_RIGHT_EXTENT &&
               (pane->type & (pane_INTERNAL|pane_TOPLEFT)) != pane_TOPLEFT)
           pane->type |= pane_EXTENDX;
      /* Shouldn't stretch an external bottomleft toolbox vertically */
      if (info.window.flags & wimp_WINDOWFLAGS_IGNORE_LOWER_EXTENT &&
                 (pane->type & (pane_INTERNAL|pane_TOPLEFT)) != 0)
           pane->type |= pane_EXTENDY;

      if (pane->type & pane_EXTENDX)
         pane->width = info.window.ex.xmax - info.window.ex.xmin;
      else
         pane->width = state.open.visible_area.xmax - state.open.visible_area.xmin;
      if (pane->type & pane_EXTENDY)
         pane->height = info.window.ex.ymax - info.window.ex.ymin;
      else
         pane->height = state.open.visible_area.ymax - state.open.visible_area.ymin;

      pane ->next = window->panes;
      window->panes = pane;

      /* if parent showing then we need to reopen it with all the right panes */

      state.open.window_handle = window->wimp_window_handle;
      wimp_get_window_state(&state);
      if (state.flags & wimp_WINDOWFLAGS_OPEN) {
         show__open_window(0, (wimp_NestedOpenWindow*)&(state.open),
                                window, 0, 0);
      }
   }
}

void remove_pane(WindowInternal *window,_kernel_swi_regs *user_regs)
{
   PaneInternal *pane,*next;

   if (!window || ((pane = window->panes) == NULL)) return;
   if (pane->pane == (ObjectID) user_regs->r[3]) {

      /* may be already closed, so don't worry about errors */

      wimp_close_window(&(pane->wimp));
      window->panes = pane->next;
      mem_free(pane,"freeing pane");
   } else {
      while ((next = pane->next) != NULL) {
         if ((next->pane) == (ObjectID) user_regs->r[3]) {
            wimp_close_window(&(next->wimp));
            pane->next = next->next;
            mem_free(next,"freeing pane");
            return;
         }
         pane = next;
      }
   }
}

PaneInternal *get_rearmost_pane(WindowInternal *w)
{
    PaneInternal *pane = w->panes;

    while (pane->next)
       pane = pane->next;

    return pane;
}
@


4.2
log
@Spinner branch merged
@
text
@a33 1
#include "services.h"
d40 2
a41 2
#include "objects.toolbox.h"
#include "objects.window.h"
@


4.1
log
@Initial revision
@
text
@d19 3
a24 1

d63 1
a63 1
int open_panes (WindowInternal *w, wimp_OpenWindow *open)
d67 1
a67 1
    int scx,scy;
d69 1
a69 1
    wimp_OpenWindow show;
d71 1
a71 1
              
d73 3
a75 1
           
a81 1
          show.window_handle = pane->wimp;
d85 1
a85 1
          
d95 3
a97 1
                               
d100 1
a100 1
          if (pane->type &1) {
d102 1
a102 1
              if (pane->type & 2) {
d110 1
a110 1
              if (pane->type & 2) {
d113 1
a113 1
              }                                                
d119 1
a119 1
                    
d123 1
a123 1
          if (pane->type & 32) {
d130 1
a130 1
                              
d134 2
a135 2
          if (pane->type & 16) {
             if (pane->type & 1) {
d140 1
a140 1
                }                          
d144 1
a144 1
                }                          
d148 1
a148 1
                }                          
d152 2
a153 2
                }        
             } 
d156 1
a156 1
                 if (pane->type & 2) {
d158 1
a158 1
                    if (show.visible_area.xmin < 0) { 
d165 1
a165 1
                      }                      
d183 1
a183 1
                                                      
d189 1
a189 1
              regs.r[0] = 0;
d192 1
a192 1
              regs.r[3] = (int) &(show.visible_area);      /* step over window handle */
d195 1
a195 1
              
d199 1
a199 1
          }                        
d201 1
a201 2
              regs.r[1] = (int) &show;
              _kernel_swi(Wimp_CloseWindow,&regs,&regs);
d210 1
a210 1
 
a213 1
    _kernel_swi_regs regs;
d218 1
a218 2
       regs.r[1] = (int) &(pane->wimp);
       e = _kernel_swi(Wimp_CloseWindow,&regs,&regs);
d225 1
a225 1
   panes rather than a fixed array */                                                          
d232 1
d238 1
a238 1
      _swix(Toolbox_ObjectMiscOp, _IN(0) |_IN(1) |_IN(2) | _OUT(0),
d240 1
a240 1
      pane ->type = user_regs->r[4]; 
d243 1
a243 1
      _swix(Toolbox_GetInternalHandle, _IN(0) |_IN(1) | _OUT(0),0,pane->pane,&pp);
d253 1
a253 1
        furniture into account. Unfortunately, this only solves part of the 
d257 1
a257 1
      */                                                       
d262 1
a262 1
         _swix(Wimp_GetWindowState, _IN(1), &state);
d264 3
a266 3
         _swix(Wimp_OpenWindow, _IN(1), &state);
         _swix(Wimp_GetWindowOutline, _IN(1), &furn);
         _swix(Wimp_CloseWindow, _IN(1), &state);  
d272 1
a272 1
         _swix(Wimp_GetWindowState, _IN(1), &state);
d274 1
a274 1
        
d278 2
d281 17
a297 2
      pane->width = state.open.visible_area.xmax - state.open.visible_area.xmin;
      pane->height = state.open.visible_area.ymax - state.open.visible_area.ymin;
d307 2
a308 1
         show__open_window(0,&(state.open),window);
d338 9
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Imported from SrcFiler
@
text
@a18 1
 *          25-Nov-96: EPW: extended to handle nested windows
d69 1
a69 1

d71 1
a71 1

d82 1
a82 1

d92 1
a92 1

d108 1
a108 1
              }
d114 1
a114 1

d125 1
a125 1

d135 1
a135 1
                }
d139 1
a139 1
                }
d143 1
a143 1
                }
d147 2
a148 2
                }
             }
d153 1
a153 1
                    if (show.visible_area.xmin < 0) {
d160 1
a160 1
                      }
d178 1
a178 1

d190 1
a190 1

d194 1
a194 1
          }
d206 1
a206 1

d223 1
a223 1
   panes rather than a fixed array */
d237 1
a237 1
      pane ->type = user_regs->r[4];
d250 1
a250 1
        furniture into account. Unfortunately, this only solves part of the
d254 1
a254 1
      */
d263 1
a263 1
         _swix(Wimp_CloseWindow, _IN(1), &state);
d271 1
a271 1

d287 1
a287 2
         show__open_window(0, (wimp_NestedOpenWindow*)&(state.open),
         			window, 0, 0);
@


4.1.7.3
log
@Added support for nested windows and showtypes 2 and 3 - centred and at pointer
@
text
@d19 1
a19 3
 *          19-Sep-96:EPW: Modified slightly to call show__open_window()
 *                         with revised parameters (no parent win, etc)
 *                         Toolbars should be re-implemented as sub-wins...
@


4.1.7.4
log
@Add "Extendable X and Extendable Y" toolbars.
Improve pane-handling algorithms.
Fix alignment of labels in labelled boxes.
Align numberrange's slider more neatly and put adjusters in right place
Stringsets tidied up
Some useful checking added to string_set_toolbox_event
Showing as subwindow fixed up a lot.
@
text
@d25 1
d64 1
a64 1
int open_panes (WindowInternal *w, wimp_NestedOpenWindow *open, unsigned int magic, unsigned int parent_window_handle, unsigned int alignment_flags)
d68 1
a68 1
    int scx,scy,width,height;
d70 1
a70 1
    WindowShowObjectBlock show;
a73 2
    show.parent_window_handle = parent_window_handle;
    show.alignment_flags = alignment_flags &~ 1;
d81 1
a94 2
          width = open->visible_area.xmax - open->visible_area.xmin;
          height = open->visible_area.ymax - open->visible_area.ymin;
d98 1
a98 1
          if (pane->type & pane_INTERNAL) {
d100 1
a100 1
              if (pane->type & pane_TOPLEFT) {
d108 1
a108 1
              if (pane->type & pane_TOPLEFT) {
d121 1
a121 1
          if (pane->type & pane_SCROLL) {
d132 2
a133 2
          if (pane->type & pane_CLIPBOUNCE) {
             if (pane->type & pane_INTERNAL) {
d154 1
a154 1
                 if (pane->type & pane_TOPLEFT) {
d187 1
a187 1
              regs.r[0] = magic ? Toolbox_ShowObject_AsSubWindow : 0;
d190 1
a190 1
              regs.r[3] = (int) &show;
d199 2
a200 1
              wimp_close_window(&pane->wimp);
d213 1
d218 2
a219 1
       e = wimp_close_window(&pane->wimp);
a232 1
   wimp_GetWindowInfo info;
d238 1
a238 1
      _swix(Toolbox_ObjectMiscOp, _INR(0,2) | _OUT(0),
d243 1
a243 1
      _swix(Toolbox_GetInternalHandle, _INR(0,1) | _OUT(0),0,pane->pane,&pp);
d262 1
a262 1
         wimp_get_window_state(&state);
d264 3
a266 3
         wimp_open_window(&state);
         wimp_get_window_outline(&furn);
         wimp_close_window(&state);
d272 1
a272 1
         wimp_get_window_state(&state);
a277 2
      info.window_handle = pane->wimp;
      wimp_get_window_info( (wimp_GetWindowInfo *)((int)&info + 1));
d279 2
a280 17
      /* Shouldn't stretch an external topleft toolbox horizontally */
      if (info.window.flags & wimp_WINDOWFLAGS_IGNORE_RIGHT_EXTENT &&
               (pane->type & (pane_INTERNAL|pane_TOPLEFT)) != pane_TOPLEFT)
           pane->type |= pane_EXTENDX;
      /* Shouldn't stretch an external bottomleft toolbox vertically */
      if (info.window.flags & wimp_WINDOWFLAGS_IGNORE_LOWER_EXTENT &&
                 (pane->type & (pane_INTERNAL|pane_TOPLEFT)) != 0)
           pane->type |= pane_EXTENDY;

      if (pane->type & pane_EXTENDX)
         pane->width = info.window.ex.xmax - info.window.ex.xmin;
      else
         pane->width = state.open.visible_area.xmax - state.open.visible_area.xmin;
      if (pane->type & pane_EXTENDY)
         pane->height = info.window.ex.ymax - info.window.ex.ymin;
      else
         pane->height = state.open.visible_area.ymax - state.open.visible_area.ymin;
d291 1
a291 1
                                window, 0, 0);
a320 9
PaneInternal *get_rearmost_pane(WindowInternal *w)
{
    PaneInternal *pane = w->panes;

    while (pane->next)
       pane = pane->next;

    return pane;
}
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
