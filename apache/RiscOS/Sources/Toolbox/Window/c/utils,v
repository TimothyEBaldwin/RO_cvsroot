head	4.4;
access;
symbols
	Window-1_79:4.4
	Window-1_78:4.4
	Window-1_77:4.4
	Window-1_76:4.4
	Window-1_75:4.3
	Window-1_74:4.3
	Window-1_73:4.3
	Window-1_72:4.3
	Window-1_71:4.3
	RO_5_07:4.2
	Window-1_70:4.2
	Window-1_69:4.2
	Window-1_68:4.2
	Window-1_67:4.2
	Window-1_66:4.2
	Window-1_65:4.2
	Window-1_64:4.2
	Window-1_63:4.2
	Window-1_62:4.2
	Window-1_61:4.2
	Window-1_60:4.2
	Window-1_59:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Window-1_58:4.2
	Ursula_RiscPC:4.2.0.8
	Window-1_57:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	Ursula:4.2.0.6
	Ursula_bp:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	Window-1_56:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	Window-1_55:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	Window-1_54:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	Window-1_53:4.2
	Window-1_52:4.2
	Window-1_51:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Window_1_49:4.2
	afrost_NC2_Generic:4.1.7.4
	sbrodie_Window_1_48:4.2
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Window_1_46:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Window_1_44:4.2
	Spinner_RCA116:4.1.7.4
	Spinner_B20_2:4.1.7.4
	Spinner_19_3:4.1.7.4
	Spinner_B18:4.1.7.4
	Spinner_B17:4.1.7.4
	Spin_merge_8Jul97:4.1.7.4
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.4
	Spinner_B14:4.1.7.4
	Spinner_B13:4.1.7.4
	Ursula_bp_13Jun97:4.2
	Spin_merge_13Jun97:4.1.7.4
	Spinner_B12:4.1.7.4
	Spinner_B10:4.1.7.4
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.4
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.4
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.4
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2015.08.18.22.05.01;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	oMg9J5QqfRoPENxy;

4.3
date	2005.03.30.16.03.44;	author srevill;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.09.12.17;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.24;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.30;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.06;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.01.29.15.12.50;	author nturton;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.03.19.18.57.33;	author kbracey;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	97.03.19.20.31.14;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   utils.c
 * Purpose: various window utils
 * Author:  unknown
 * History: 25-Nov-95: EPW: Fixed bugs where it would overwrite workspace when
 *                          used with the nested window manager
 *
 */

#include <stdio.h>

#include "utils.h"
#include "twimp.h"
#include "swis.h"
#include "debug.h"
#include "objects/window.h"
#include "messages.h"
#include "string.h"
#include "stddef.h"

/* don't produce errors, as error box may cause redraw error! */

void update_window(int window,wimp_Bbox *box)
{

  WindowRedraw wwin;
  int more;

  wwin.window  = window;
  wwin.visible = *box;

  DEBUG debug_output ("redraw", "Redraw on (%d,%d) to (%d,%d)\n",wwin.visible.xmin,wwin.visible.ymin,
                        wwin.visible.xmax,wwin.visible.ymax);

  if (( wimp_update_window (&wwin,&more)) != NULL) {
      DEBUG debug_output ("redraw", "Error from update window\n");
  }

  else {
     while (more != 0) {
        if (( wimp_get_rectangle( &wwin, &more)) != NULL) {
          DEBUG debug_output ("redraw", "Error from get rectangle\n");
          more=0; /* prevents infinite redraw loop */
        }
     }
  }
}

void redraw_window(int window,wimp_Bbox *box)
{
#if 0
  _kernel_swi_regs regs;
  WindowRedraw wwin;

  wwin.window  = window;
#endif

  wimp_force_redraw(window, box->xmin, box->ymin, box->xmax, box->ymax);

/* unfortunately the wimp will redraw the whole window */

#if 0
  regs.r[1]=(int) &wwin;

  if (( _kernel_swi (Wimp_RedrawWindow, &regs, &regs)) != NULL) {
      DEBUG debug_output ("redraw", "Error from redraw window\n");
  }

  else {
     while (regs.r[0] != 0) {
        if (( _kernel_swi (Wimp_GetRectangle, &regs, &regs)) != NULL) {
          DEBUG debug_output ("redraw", "Error from get rectangle\n");
          regs.r[0]=0; /* prevents infinite redraw loop */
        }
     }
  }
#endif
}

     extern int WIMP_VERSION_NUMBER;

        /* resizes an already created icon. On RISC OS 3.50, this is trivial as a wimp
         * SWI exists to do this. On 3.10 however, we need to hack the wimp workspace */

void resize_icon(int window, int icon,wimp_Bbox *box)
{

    DEBUG debug_output ("utils", "Resizing icon %d %d \n",window,icon);

    if (WIMP_VERSION_NUMBER < 350) {
        /* we have to do some hacking sadly, but it's better than delete/create loops */
        /* (window-1) points to a window definition in the wimp workspace, note that
           this is different to the one passed to create window */
        int *icons;

        window--;
        if (strncmp((char *) window,"Wind",4)) return;
        icons = (int *) *(((int *) window) + 6);
        icons += (8*icon);                      /*8 words to an icon */
        icons[0]=box->xmin;
        icons[1]=box->ymin;
        icons[2]=box->xmax;
        icons[3]=box->ymax;
    }
    else wimp_resize_icon(window,icon,box->xmin,box->ymin,box->xmax,box->ymax);

}

#ifdef DIALOGUESGOCREAM
#error This will fail with the nested window wimp - if you want DIALOGUESGOCREAM, fix it yourself :-)
void set_window_focus_colour(int window, int colour)
{
    char *data = (char *) (--window);
    int index = 0;
    if (strncmp((char *) window,"Wind",4)) return;
    if (WIMP_VERSION_NUMBER < 350) index = -2;
    data[((20+index)*4) + offsetof(wimp_Window,colours) +6] = colour;
}
#endif

/* set_window_flags is easy to implement under RISC OS 3.80 because the API has
 * been extended to cope with setting window flags on the fly. Unfortunately
 * we need to hack around the wimp's workspace on previous versions of the wimp.
 */
void set_window_flags(int window, int clear, int set)
{
    if (WIMP_VERSION_NUMBER < 380)
    {
        int *data = (int *) (--window);
        int index =0;

        if (strncmp((char *) window,"Wind",4)) return;
        if (WIMP_VERSION_NUMBER < 350) index = -2;
        index += 20 + offsetof(wimp_Window,flags)/4;
        data[index] = (data[index] & ~clear) | (set & clear);
    }
    else
    {
        wimp_GetWindowState	state;
        int                     parent;
        unsigned int		alignment;

        state.open.window_handle = window;

        wimp_get_window_state2(&state, &parent, &alignment);

        state.flags = ((state.flags) & ~clear) | (set & clear);
        wimp_open_window2((wimp_NestedOpenWindow *) &state, parent, alignment);
        /*
         * We need to flush this open window to the screen so that future
         * Wimp_GetWindowStates before the next Wimp_Poll return correct results
         */
        wimp_open_window(NULL);
    }
}

/* functions for common errors */

_kernel_oserror *out_of_memory(void)
{
   return make_error (Window_AllocFailed, 0);
}

_kernel_oserror *buffer_too_short(void)
{
   return make_error (Window_ShortBuffer, 0);
}

_kernel_oserror *invalid_component(ComponentID id)
{
   return make_error_hex (Window_InvalidComponentID, 1,id);
}

_kernel_oserror *bad_flags(int swi,unsigned int flags)
{
   char buf[16],buf2[16];
   sprintf(buf,"0x%06X",swi);
   sprintf(buf2,"0x%08X",flags);
   return make_error (Window_ReservedFlags, 2,buf,buf2);
}
@


4.3
log
@  Fix for new compiler
Detail:
  Obsolete #include of strings.h changed to string.h as this is
  now faulted by the latest cc.
Admin:
  To be tested in STB ROM build

Version 1.71. Tagged as 'Window-1_71'
@
text
@d29 1
a29 1
#include "objects.window.h"
@


4.2
log
@Spinner branch merged
@
text
@d31 1
a31 1
#include "strings.h"
@


4.1
log
@Initial revision
@
text
@d15 8
d26 1
a26 1
#include "wimp.h"
d64 1
d69 1
d71 1
a71 5
  regs.r[0] = window;
  regs.r[1] = box->xmin;
  regs.r[2] = box->ymin;
  regs.r[3] = box->xmax;
  regs.r[4] = box->ymax;
a72 2
  _kernel_swi(Wimp_ForceRedraw,&regs,&regs);

d74 1
a74 1

d89 1
a89 1
  }
d109 1
a109 1
        window--;
d119 1
a119 1

d122 2
d126 1
a126 1
    char *data = (char *) (--window);
d132 6
a137 1

d140 28
a167 6
    int *data = (int *) (--window);
    int index =0;
    if (strncmp((char *) window,"Wind",4)) return;
    if (WIMP_VERSION_NUMBER < 350) index = -2;
    index += 20 + offsetof(wimp_Window,flags)/4;
    data[index] = (data[index] & ~clear) | (set & clear);
d169 1
a169 1

d188 1
a188 1
{
a193 2


@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Imported from SrcFiler
@
text
@a0 22
/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   utils.c
 * Purpose: various window utils
 * Author:  unknown
 * History: 25-Nov-95: EPW: Fixed bugs where it would overwrite workspace when
 *                          used with the nested window manager
 *
 */

a117 2
#ifdef DIALOGUESGOCREAM
#error This will fail with the nested window wimp - if you want DIALOGUESGOCREAM, fix it yourself :-)
d126 1
a126 6
#endif

/* set_window_flags is easy to implement under RISC OS 3.80 because the API has
 * been extended to cope with setting window flags on the fly. Unfortunately
 * we need to hack around the wimp's workspace on previous versions of the wimp.
 */
d129 6
a134 27
    if (WIMP_VERSION_NUMBER < 380)
    {
        int *data = (int *) (--window);
        int index =0;

        if (strncmp((char *) window,"Wind",4)) return;
        if (WIMP_VERSION_NUMBER < 350) index = -2;
        index += 20 + offsetof(wimp_Window,flags)/4;
        data[index] = (data[index] & ~clear) | (set & clear);
    }
    else
    {
        wimp_GetWindowState	state;
        unsigned int		parent, alignment;

        state.open.window_handle = window;

        _swix(Wimp_GetWindowState, _INR(1,2)|_OUTR(3,4), &state, 0x4b534154,
        			&parent, &alignment);

        state.flags = ((state.flags) & ~clear) | (set & clear);
        _swix(Wimp_OpenWindow, _INR(1,4), &state, 0x4b534154,
        			parent, alignment);
        // We need to flush this open window to the screen so that future
        // Wimp_GetWindowStates before the next Wimp_Poll return correct results
        _swix(Wimp_OpenWindow, _IN(1), NULL);
    }
d161 2
@


4.1.7.3
log
@Add "Extendable X and Extendable Y" toolbars.
Improve pane-handling algorithms.
Fix alignment of labels in labelled boxes.
Align numberrange's slider more neatly and put adjusters in right place
Stringsets tidied up
Some useful checking added to string_set_toolbox_event
Showing as subwindow fixed up a lot.
@
text
@a63 1
#if 0
a67 1
#endif
d69 5
a73 1
  wimp_force_redraw(window, box->xmin, box->ymin, box->xmax, box->ymax);
d75 2
d78 1
a78 1

d93 1
a93 1
  }
d113 1
a113 1
        window--;
d123 1
a123 1

d130 1
a130 1
    char *data = (char *) (--window);
d146 1
a146 1
        int *data = (int *) (--window);
d148 1
a148 1

d158 1
a158 1

d160 4
a163 3

        wimp_get_window_state2(&state, &parent, &alignment);

d165 5
a169 6
        wimp_open_window2(&state, parent, alignment);
        /*
         * We need to flush this open window to the screen so that future
         * Wimp_GetWindowStates before the next Wimp_Poll return correct results
         */
        wimp_open_window(NULL);
d172 1
a172 1

d191 1
a191 1
{
@


4.1.7.4
log
@*** empty log message ***
@
text
@d26 1
a26 1
#include "twimp.h"
d153 1
a153 2
        int                     parent;
        unsigned int		alignment;
d160 1
a160 1
        wimp_open_window2((wimp_NestedOpenWindow *) &state, parent, alignment);
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
