head	4.5;
access;
symbols
	Window-1_79:4.5
	Window-1_78:4.5
	Window-1_77:4.5
	Window-1_76:4.5
	Window-1_75:4.4
	Window-1_74:4.4
	Window-1_73:4.4
	Window-1_72:4.4
	Window-1_71:4.4
	RO_5_07:4.3
	Window-1_70:4.3
	Window-1_69:4.3
	Window-1_68:4.3
	Window-1_67:4.3
	Window-1_66:4.3
	Window-1_65:4.3
	Window-1_64:4.3
	Window-1_63:4.3
	Window-1_62:4.3
	Window-1_61:4.3
	Window-1_60:4.3
	Window-1_59:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Window-1_58:4.3
	Ursula_RiscPC:4.3.0.4
	Window-1_57:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	Ursula:4.3.0.2
	Ursula_bp:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	Window-1_56:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	Window-1_55:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	Window-1_54:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	Window-1_53:4.3
	Window-1_52:4.3
	Window-1_51:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_12May1998:4.2.0.4
	rthornb_UrsulaBuild_01May1998:4.2
	sbrodie_Window_1_49:4.2
	afrost_NC2_Generic:4.1.7.4
	sbrodie_Window_1_48:4.2
	Daytona:4.2.0.2
	Daytona_bp:4.2
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Window_1_46:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Window_1_44:4.2
	Spinner_RCA116:4.1.7.4
	Spinner_B20_2:4.1.7.4
	Spinner_19_3:4.1.7.4
	Spinner_B18:4.1.7.4
	Spinner_B17:4.1.7.4
	Spin_merge_8Jul97:4.1.7.4
	Ursula_bp_8Jul97:4.2
	Spinner_B15:4.1.7.4
	Spinner_B14:4.1.7.4
	Spinner_B13:4.1.7.4
	Ursula_bp_13Jun97:4.2
	Spin_merge_13Jun97:4.1.7.4
	Spinner_B12:4.1.7.4
	Spinner_B10:4.1.7.4
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.4
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.4
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.4
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2015.08.18.22.05.00;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	oMg9J5QqfRoPENxy;

4.4
date	2005.03.30.16.03.44;	author srevill;	state Exp;
branches;
next	4.3;

4.3
date	98.04.27.16.02.27;	author pwombwel;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.09.12.15;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.17;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.17;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.20;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.24;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.02;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.02.04.17.22.48;	author pwombwel;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.03.17.17.08.52;	author pwombwel;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	97.03.19.18.57.30;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   miscop.c
 * Purpose: miscellanaous operations on a Window Object
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *          04-Feb-97: EPW: miscop__set_pointer() sets the hotspots to 0 if
 *                          passed a NULL sprite (default pointer)
 *          04-Feb-97: EPW: miscop__set_pointer() and miscop__set_help_message()
 *                          no longer write to address 0 if the pointer/help
 *                          text is first removed, then re-set.
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "string.h"
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects/toolbox.h"
#include "objects/window.h"

#include "object.h"
#include "task.h"
#include "gadgets.h"
#include "events.h"
#include "toolbar.h"
#include "delete.h"

#include "miscop.h"
#include "utils.h"

static _kernel_oserror *miscop__set_help_message (WindowInternal *window, char *help_message)
{
    if (help_message == NULL)
        window->help_message = NULL;
    else if (string_length (help_message)+1 > window->max_help)
         return buffer_too_short ();
    else
    {
        window->help_message = ((char*)(window+1));
        string_copy (window->help_message, help_message);
    }

    return NULL;
}


static _kernel_oserror *miscop__set_pointer (WindowInternal *window, char *sprite_name, int x_hot, int y_hot)
{
    wimp_PointerInfo          info;
    int                       oldptr;

    if (sprite_name == NULL)
    {
        window->pointer_shape = NULL;
        window->pointer_x_hot = window->pointer_y_hot = 0;

        /* Change mouse pointer to pointer 1.
         * If the pointer was previously off, turn it off again
         */
        _swix (OS_Byte, _INR(0,1)|_OUT(1), 106, 1, &oldptr);
        if ((oldptr & 0x7f) == 0)
            _swix (OS_Byte, _INR(0,1), 106, oldptr);
    }
    else if (string_length (sprite_name)+1 > window->max_pointer_shape)
         return buffer_too_short ();
    else
    {
        window->pointer_shape = ((char*)(window+1)) + window->max_help;
        string_copy (window->pointer_shape, sprite_name);

        window->pointer_x_hot = x_hot;
        window->pointer_y_hot = y_hot;
    }

    wimp_get_pointer_info(&info);
    if (window->wimp_window_handle == info.window_handle)
        events_pointer_over_window(window);

    return NULL;
}

static _kernel_oserror *miscop__add_keyboard_shortcut (WindowInternal *window, KeyBoardShortcut *k)
{
    void                     *p;
    _kernel_swi_regs          regs;
    _kernel_oserror          *e;
    KeyBoardShortcutInternal *new_k = NULL;
    int                       ki;


    /*
     * if already there, just replace it, else add a new one
     */

    for (ki = 0; ki < window->num_keyboard_shortcuts; ki++)
    {
        if (window->keyboard_shortcuts[ki].key_event == k->key_event)
        {
            new_k = &window->keyboard_shortcuts[ki];
            break;
        }
    }


    if (new_k == NULL)
    {
        /*
         * if new, extend the block of shortcuts, and copy in new shortcut.
         * only mem_extend doesn't work....
         */

        if ((p =mem_extend (window->keyboard_shortcuts, sizeof (KeyBoardShortcutInternal)) ) == NULL)
            return out_of_memory ();

        window->keyboard_shortcuts = p;
        window->num_keyboard_shortcuts++;

        new_k = &window->keyboard_shortcuts[window->num_keyboard_shortcuts-1];
    }


    *new_k = *(KeyBoardShortcutInternal *)k;


    /*
     * create attached object if non-null
     */

    if (k->key_show != NULL)
    {
        regs.r[0] = 0;
        regs.r[1] = (int)k->key_show;
        if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
            return e;

        new_k->key_show = (ObjectID)regs.r[0];
    }

    return NULL;
}



static _kernel_oserror *miscop__remove_keyboard_shortcut (WindowInternal *window, KeyBoardShortcut *k)
{
    void                     *p;
    _kernel_swi_regs          regs;
    _kernel_oserror          *e;
    int                       ki;
    KeyBoardShortcutInternal *old_k = NULL;


    /*
     * if there, remove it
     */

    for (ki = 0; ki < window->num_keyboard_shortcuts; ki++)
    {
        if (window->keyboard_shortcuts[ki].key_event == k->key_event)
        {
            old_k = &window->keyboard_shortcuts[ki];
            break;
        }
    }

    if (old_k == NULL)
        return NULL;


    /*
     * if object attached to this shortcut, delete it
     */

    if (old_k->key_show != 0)
    {
        regs.r[0] = 0;
        regs.r[1] = (int)old_k->key_show;
        if ((e = _kernel_swi (Toolbox_DeleteObject, &regs, &regs)) != NULL)
            return e;
    }


    /*
     * shift up the rest of the shortcuts, and reduce block size
     */

    for (; ki < window->num_keyboard_shortcuts-1; ki++)
        window->keyboard_shortcuts[ki] = window->keyboard_shortcuts[ki+1];

    if ((p = mem_extend (window->keyboard_shortcuts, -sizeof (KeyBoardShortcutInternal)) ) == NULL)
        return out_of_memory ();

    window->num_keyboard_shortcuts--;

    return NULL;
}

static _kernel_oserror *miscop__set_toolbars(WindowInternal *window, _kernel_swi_regs *regs)
{
    _kernel_swi_regs r;

    r.r[5] = 0;
    r.r[6] = 0;  /* no x or y offsets allowed for toolbars */

    DEBUG debug_output("toolbars","Setting toolbars with mask %x\n",regs->r[0]);

    if (regs->r[0] & Window_InternalBottomLeftToolbar) {
       if ((r.r[3] = window->ibl) != NULL) remove_pane(window,&r);
       if ((window->ibl = r.r[3] = regs->r[3]) != NULL) {
          r.r[4] = pane_CLIPBOUNCE | pane_INTERNAL;
          set_pane(window,&r);
       }
    }
    if (regs->r[0] & Window_InternalTopLeftToolbar) {
       if ((r.r[3] = window->itl) != NULL) remove_pane(window,&r);
       if ((window->itl = r.r[3] = regs->r[4]) != NULL) {
          r.r[4] = pane_CLIPBOUNCE | pane_TOPLEFT | pane_INTERNAL;
          set_pane(window,&r);
       }
    }
    if (regs->r[0] & Window_ExternalBottomLeftToolbar) {
       if ((r.r[3] = window->ebl) != NULL) remove_pane(window,&r);
       if ((window->ebl = r.r[3] = regs->r[5]) != NULL) {
          r.r[4] = pane_CLIPBOUNCE;
          set_pane(window,&r);
       }
    }
    if (regs->r[0] & Window_ExternalTopLeftToolbar) {
       if ((r.r[3] = window->etl) != NULL) remove_pane(window,&r);
       if ((window->etl = r.r[3] = regs->r[6]) != NULL) {
          r.r[4] = pane_CLIPBOUNCE | pane_TOPLEFT;
          set_pane(window,&r);
       }
    }
    return NULL;
}

static _kernel_oserror *miscop__set_title (WindowInternal *window, char *title)
{
    _kernel_oserror    *e;
    wimp_GetWindowState state;

    /*
     * check supplied title string.
     */

    if (title == NULL || string_length (title) >= window->window.title.indirect_text.buff_len)
        return buffer_too_short ();


    /*
     * put in supplied title, and redraw window's title bar (if open).
     */

    string_copy (window->window.title.indirect_text.buffer, title);

    state.open.window_handle = window->wimp_window_handle;

    if ((e = wimp_get_window_state(&state)) != NULL) return e;

    if (state.flags & wimp_WINDOWFLAGS_OPEN)
    {
        /*
         * window is open, so make the title bar redraw.
         */
        wimp_GetWindowOutline outline;

        outline.window_handle = window->wimp_window_handle;

        if ((e = wimp_get_window_outline(&outline)) != NULL) return e;

        /* absolute screen coords */

        if ((e = wimp_force_redraw(-1,outline.box.xmin,state.open.visible_area.ymax,
                        outline.box.xmax,outline.box.ymax)) != NULL) return NULL;
    }

    return NULL;
}


extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

    _kernel_swi_regs *user_regs    = USER_REGS(r);
    WindowInternal   *window       = (WindowInternal *)r->r[2];
    _kernel_oserror  *e            = NULL;
    wimp_Bbox *box;

    DEBUG if (window->id != (ObjectID)r->r[1])
              debug_output ("miscop", "*********** internal error - inconsistent window Object ID ***\n");

    /*
     * for simple cases, handle the miscop here, otherwise call a function.
     */

    DEBUG debug_output ("miscop", "Window miscop %x\n", user_regs->r[2]);

    IGNORE(t);

    switch (user_regs->r[2])
    {
        case Window_GetWimpHandle:
            user_regs->r[0] = window->wimp_window_handle;
            break;


        case Window_AddGadget:
            {
                ComponentID id;

                e = gadgets_add ((Gadget *)user_regs->r[3], window, &id);
                if (e == NULL)
                    user_regs->r[0] = (int)id;
            }
            break;


        case Window_RemoveGadget:
                /* don't recurse */
            e = gadgets_remove ((ComponentID) (user_regs->r[3]), window,1);
            break;


        case Window_SetMenu:
            window->menu = (ObjectID)user_regs->r[3];
            break;


        case Window_GetMenu:
            user_regs->r[0] = (int)window->menu;
            break;


        case Window_SetPointer:
            e = miscop__set_pointer (window, (char *)user_regs->r[3], user_regs->r[4], user_regs->r[5]);
            break;


        case Window_GetPointer:
            string_to_buffer ((char *)user_regs->r[3], window->pointer_shape, &user_regs->r[4]);
            user_regs->r[5] = window->pointer_x_hot;
            user_regs->r[6] = window->pointer_y_hot;
            break;


        case Window_SetHelpMessage:
            e = miscop__set_help_message (window, (char *)user_regs->r[3]);
            break;


        case Window_GetHelpMessage:
            string_to_buffer ((char *)user_regs->r[3], window->help_message, &user_regs->r[4]);
            break;


        case Window_AddKeyboardShortcuts:
            {
                int k;

                for (k = 0; k < user_regs->r[3]; k++)
                    if ((e = miscop__add_keyboard_shortcut (window, &((KeyBoardShortcut *)user_regs->r[4])[k])) != NULL)
                        break;
            }
            break;


        case Window_RemoveKeyboardShortcuts:
            {
                int k;

                if (user_regs->r[3] == -1)  /* remove all */
                    delete_all_keyboard_shortcuts(window);
                else {
                    for (k = 0; k < user_regs->r[3]; k++) {
                        if ((e = miscop__remove_keyboard_shortcut (window, &((KeyBoardShortcut *)user_regs->r[4])[k])) != NULL)
                        break;
                    }
                }
            }
            break;


        case Window_SetTitle:
            e = miscop__set_title (window, (char *)user_regs->r[3]);
            break;


        case Window_GetTitle:
            string_to_buffer ((char *)user_regs->r[3], window->window.title.indirect_text.buffer, &user_regs->r[4]);
            break;

        case Window_SetDefaultFocus:
            window->default_focus = user_regs->r[3];
            break;

        case Window_GetDefaultFocus:
            user_regs->r[0] = window->default_focus;
            break;

        case Window_SetExtent:
DEBUG       {
                wimp_Bbox ext = * (wimp_Bbox *) user_regs->r[3];
                debug_output ("extent","setting extent to (%d,%d) - (%d,%d)\n",ext.xmin,ext.ymin,ext.xmax,ext.ymax);
            }
            e = wimp_set_extent(window->wimp_window_handle, (wimp_Bbox *) user_regs->r[3]);
            break;

        case Window_GetExtent:
            {
              wimp_GetWindowInfo info;
              char *p = (char *) &info;

              info.window_handle = window->wimp_window_handle;

              e = wimp_get_window_info((wimp_GetWindowInfo *)(p+1));

              memcpy((char *) user_regs->r[3], &(info.window.ex),16);

              DEBUG debug_output ("extent","extent is (%d,%d) - (%d,%d)\n",info.window.ex.xmin,
                info.window.ex.ymin,info.window.ex.xmax,info.window.ex.ymax);

              break;
            }

        case Window_ForceRedraw:
            box = (wimp_Bbox *) user_regs->r[3];
            e = wimp_force_redraw(window->wimp_window_handle,
                                  box->xmin,
                                  box->ymin,
                                  box->xmax,
                                  box->ymax);
            break;

#ifdef PANE_SUPPORT
        case Window_SetPane:
               set_pane(window,user_regs);
               break;

        case Window_RemovePane:
               remove_pane(window,user_regs);
               break;
#endif
        case Window_GetToolBars:
            DEBUG debug_output("toolbars","Getting toolbars with mask %x\n",user_regs->r[0]);
            if (user_regs->r[0] & Window_InternalTopLeftToolbar) user_regs->r[1] = window->itl;
            if (user_regs->r[0] & Window_ExternalBottomLeftToolbar) user_regs->r[2] = window->ebl;
            if (user_regs->r[0] & Window_ExternalTopLeftToolbar) user_regs->r[3] = window->etl;
            if (user_regs->r[0] & Window_InternalBottomLeftToolbar) user_regs->r[0] = window->ibl;
            break;

        case Window_SetToolBars:
            return miscop__set_toolbars(window,user_regs);

        default:
            e = gadgets_method (r, window);
            break;
    }

    return e;
}

@


4.4
log
@  Fix for new compiler
Detail:
  Obsolete #include of strings.h changed to string.h as this is
  now faulted by the latest cc.
Admin:
  To be tested in STB ROM build

Version 1.71. Tagged as 'Window-1_71'
@
text
@a35 1
#include "services.h"
d41 2
a42 2
#include "objects.toolbox.h"
#include "objects.window.h"
@


4.3
log
@Fixed setpointer - setting the pointer back to default incorrectly set the shape to pointer 2, rather than 1.
@
text
@d30 1
a30 1
#include "strings.h"
@


4.2
log
@Spinner branch merged
@
text
@d84 1
a84 1
        _swix (OS_Byte, _INR(0,1)|_OUT(1), 106, 2, &oldptr);
@


4.1
log
@Initial revision
@
text
@d19 5
d61 3
a63 1
    else
d65 1
d74 1
d77 1
d79 9
d90 3
a92 1
    else
d95 3
a97 2
    window->pointer_x_hot = x_hot;
    window->pointer_y_hot = y_hot;
d100 1
a100 1
    if (window->wimp_window_handle == info.window_handle)
d102 1
a102 1

d113 1
a113 1

d118 1
a118 1

d127 2
a128 2


d141 1
a141 1

a146 1

d148 2
a149 1
    /*
d152 1
a152 1

d175 1
a175 1

d180 1
a180 1

d193 1
a193 1

d205 2
a206 2


d223 2
a224 2
{
    _kernel_swi_regs r;
d234 1
a234 1
          r.r[4] = 17;          /* ibl */
d241 1
a241 1
          r.r[4] = 19;          /* itl */
d248 1
a248 1
          r.r[4] = 16;          /* ebl */
d255 1
a255 1
          r.r[4] = 18;          /* etl */
d270 1
a270 1

d280 1
a280 1

d297 1
a297 1

d309 1
a309 1
    /*
d324 1
a324 1
     *
d328 1
a328 1
    _kernel_swi_regs regs,*user_regs    = USER_REGS(r);
d350 1
a350 1

d361 2
a362 2

        case Window_RemoveGadget:
d367 1
a367 1

d372 1
a372 1

d377 1
a377 1

d382 1
a382 1

d389 1
a389 1

d394 1
a394 1

d399 1
a399 1

d410 1
a410 1

d415 1
a415 1
                if (user_regs->r[3] == -1)  /* remove all */
d420 1
a420 1
                        break;
d426 1
a426 1

d431 1
a431 1

d443 1
a443 1

d449 1
a449 1
            e = _swix(Wimp_SetExtent, _IN(0) | _IN(1),window->wimp_window_handle, user_regs->r[3]);
d453 1
a453 1
            {
d456 1
a456 1

d459 1
a459 1
              e = _swix(Wimp_GetWindowInfo,  _IN(1),p+1);
d471 5
a475 6
            regs.r[0] = window->wimp_window_handle;
            regs.r[1] = box->xmin;
            regs.r[2] = box->ymin;
            regs.r[3] = box->xmax;
            regs.r[4] = box->ymax;
            e = _kernel_swi(Wimp_ForceRedraw,&regs,&regs);
d481 1
a481 1
               break;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Added support for nested windows and showtypes 2 and 3 - centred and at pointer
@
text
@a18 5
 *          04-Feb-97: EPW: miscop__set_pointer() sets the hotspots to 0 if
 *                          passed a NULL sprite (default pointer)
 *          04-Feb-97: EPW: miscop__set_pointer() and miscop__set_help_message()
 *                          no longer write to address 0 if the pointer/help
 *                          text is first removed, then re-set.
a56 2
    {
        window->help_message = ((char*)(window+1));
a57 1
    }
a67 1
    {
a68 5
        window->pointer_x_hot = window->pointer_y_hot = 0;

        /* Change mouse pointer to pointer 1 */
        _kernel_osbyte(106, 1, 0);
    }
d71 1
a71 3
    else
    {
        window->pointer_shape = ((char*)(window+1)) + window->max_help;
d73 3
a75 4

        window->pointer_x_hot = x_hot;
        window->pointer_y_hot = y_hot;
    }
@


4.1.7.3
log
@Added SetFont methods for Radio & Option buttons
Added Service_StartWimp (0x49) to cope with softloading a
window manager *after* this module.
@
text
@d80 2
a81 5
        /* Change mouse pointer to pointer 1.
         * If the pointer was previously off, turn it off again
         */
        if (_kernel_osbyte(106, 1, 0) & ~0xf == 0)
            _kernel_osbyte(106, 0, 0);
@


4.1.7.4
log
@Add "Extendable X and Extendable Y" toolbars.
Improve pane-handling algorithms.
Fix alignment of labels in labelled boxes.
Align numberrange's slider more neatly and put adjusters in right place
Stringsets tidied up
Some useful checking added to string_set_toolbox_event
Showing as subwindow fixed up a lot.
@
text
@d61 1
a61 1
    else
a73 1
    int                       oldptr;
d79 1
a79 1

d83 2
a84 3
        _swix (OS_Byte, _INR(0,1)|_OUT(1), 106, 2, &oldptr);
        if ((oldptr & 0x7f) == 0)
            _swix (OS_Byte, _INR(0,1), 106, oldptr);
d92 1
a92 1

d98 1
a98 1
    if (window->wimp_window_handle == info.window_handle)
d100 1
a100 1

d111 1
a111 1

d116 1
a116 1

d125 2
a126 2


d139 1
a139 1

d145 1
d147 1
a147 2

    /*
d150 1
a150 1

d173 1
a173 1

d178 1
a178 1

d191 1
a191 1

d203 2
a204 2


d221 2
a222 2
{
    _kernel_swi_regs r;
d232 1
a232 1
          r.r[4] = pane_CLIPBOUNCE | pane_INTERNAL;
d239 1
a239 1
          r.r[4] = pane_CLIPBOUNCE | pane_TOPLEFT | pane_INTERNAL;
d246 1
a246 1
          r.r[4] = pane_CLIPBOUNCE;
d253 1
a253 1
          r.r[4] = pane_CLIPBOUNCE | pane_TOPLEFT;
d268 1
a268 1

d278 1
a278 1

d295 1
a295 1

d307 1
a307 1
    /*
d322 1
a322 1
     *
d326 1
a326 1
    _kernel_swi_regs *user_regs    = USER_REGS(r);
d348 1
a348 1

d359 2
a360 2

        case Window_RemoveGadget:
d365 1
a365 1

d370 1
a370 1

d375 1
a375 1

d380 1
a380 1

d387 1
a387 1

d392 1
a392 1

d397 1
a397 1

d408 1
a408 1

d413 1
a413 1
                if (user_regs->r[3] == -1)  /* remove all */
d418 1
a418 1
                        break;
d424 1
a424 1

d429 1
a429 1

d441 1
a441 1

d447 1
a447 1
            e = wimp_set_extent(window->wimp_window_handle, (wimp_Bbox *) user_regs->r[3]);
d451 1
a451 1
            {
d454 1
a454 1

d457 1
a457 1
              e = wimp_get_window_info((wimp_GetWindowInfo *)(p+1));
d469 6
a474 5
            e = wimp_force_redraw(window->wimp_window_handle,
                                  box->xmin,
                                  box->ymin,
                                  box->xmax,
                                  box->ymax);
d480 1
a480 1
               break;
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
