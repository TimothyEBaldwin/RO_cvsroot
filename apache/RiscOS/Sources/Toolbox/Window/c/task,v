head	4.4;
access;
symbols
	Window-1_79:4.4
	Window-1_78:4.4
	Window-1_77:4.4
	Window-1_76:4.4
	Window-1_75:4.3
	Window-1_74:4.3
	Window-1_73:4.3
	Window-1_72:4.3
	Window-1_71:4.3
	RO_5_07:4.3
	Window-1_70:4.3
	Window-1_69:4.3
	Window-1_68:4.3
	Window-1_67:4.3
	Window-1_66:4.3
	Window-1_65:4.3
	Window-1_64:4.3
	Window-1_63:4.3
	Window-1_62:4.3
	Window-1_61:4.3
	Window-1_60:4.3
	Window-1_59:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	sbrodie_Toolbox_Ursula_231198:4.3
	Window-1_58:4.3
	Ursula_RiscPC:4.3.0.4
	Window-1_57:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	Ursula:4.3.0.2
	Ursula_bp:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	Window-1_56:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	Window-1_55:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	Window-1_54:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	Window-1_53:4.3
	Window-1_52:4.3
	Window-1_51:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	sbrodie_Window_1_49:4.3
	afrost_NC2_Generic:4.1.7.1
	sbrodie_Window_1_48:4.3
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.2
	sbrodie_Window_1_46:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_Window_1_44:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Ursula_bp_13Jun97:4.1
	Spin_merge_13Jun97:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	pwombwel_Rel_1_36:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2015.08.18.22.05.00;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	oMg9J5QqfRoPENxy;

4.3
date	98.04.21.15.29.35;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	98.01.15.13.19.23;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.23.17;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.23.17;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.46.22;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.18.26;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.42.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).
Dependencies cleaned from tests.

Version 1.76. Tagged as 'Window-1_76'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   task.c
 * Purpose: task handling for the Window module
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects/toolbox.h"
#include "objects/window.h"

#include "object.h"
#include "globals.h"
#include "delete.h"
#include "gadgets.h"

#include "task.h"

/*
 * This module has a linked list of client tasks.
 * task_add gets called when a Service_ToolboxTaskBorn
 * service call goes round.
 * The task is removed when the Service_WimpCloseDown is
 * received.
 * Each task keeps an Object list
 */


/* For the Window module, there is a postfilter/prefilter per task.  The filters
 * will be passed the Task descriptor, from which they can access the window
 * list for this task
 */

#if 0
static void task_free_fonts(int *fb)
{
  int i,j;
  for (i=1;i <256;i++) {
     for (j=0 ; j < fb[i]; j++) {
        _swix(Font_LoseFont, _IN(0), i);
     }
     fb[i] =0;
   }
}
#endif

static TaskDescriptor *task__list = NULL;

TaskDescriptor *task_get_head(void)
{
        return task__list;
}

int task_any_active(void)
{
   return (task__list != NULL);
}

extern TaskDescriptor *task_find_from_window(WindowInternal *win)
{
    TaskDescriptor *t;

    t = task__list;
    while (t) {
      WindowInternal *w = t->object_list;

      while (w) {
         if (w == win) return t;
         w = w->next;
      }
      t=t->next;
    }
    return NULL;

}

void task_print_list(void)
{
    TaskDescriptor *t;

    t = task__list;
    while (t) {
      DEBUG debug_output("tasks","Window task %08x\n",t->task_handle);
      t=t->next;
    }
}

extern WindowInternal *window_from_wimp_window(int win)
{
    TaskDescriptor *t;

    t = task__list;
    while (t) {
      WindowInternal *w = t->object_list;

      while (w) {
         if (w->wimp_window_handle == win) return w;
         w = w->next;
      }
      t=t->next;
    }
    return NULL;

}

extern void  task_refind_fonts(void)
{
    TaskDescriptor *t;

    t = task__list;
    while (t) {
      gadgets_refind_fonts(t);
      t=t->next;
    }
}

extern TaskDescriptor *task_find (int task_handle)
{

    /*
     * Function to return a TaskDescriptor corresponding to
     * a task with a given Wimp handle
     */

    TaskDescriptor *t;

    t = task__list;

    while (t != NULL)
    {
        if (t->task_handle == task_handle)
            break;

        t = t->next;
    }

    return t;
}


extern void task_remove (int task_handle)
{
    /*
     * Function to remove a task descriptor from the list, given its
     * Wimp task handle.  Memory is freed, and we also delete any objects
     * owned by the exiting task.
     */

    TaskDescriptor  *t = task__list;
    TaskDescriptor  *prev_t = NULL, *next = NULL;

    while (t != NULL)
    {
        next = t->next;

        if (t->task_handle == task_handle)
        {
            /*
             *  remove this task's object's list
             *  this code is duplicated in delete_object (almost!).
             */

            WindowInternal *w = t->object_list;
            int *fb = t->font_bindings;

            if (t == task__list)
               task__list = next;
            else
               prev_t->next = next;

            if (w) {
               /* 25-Jan-95: IDJ/NK: memory leak found!!! we must delete all panes
                                     on task exit.  Only guarantee that it happens
                                     is to do it here!
                */
               while (w != NULL)
               {
                   WindowInternal *next = w->next;
                   PaneInternal *pane = w->panes;

                   while (pane)
                   {
                        PaneInternal *next = pane->next;
                        mem_free (pane, "freeing pane (task delete)");
                        pane = next;
                   }

                   w->panes = NULL;
                   w->parent = NULL;

                   w = next;
               }

               /* This section is part of the fix for PAN-01317 */
               w = t->object_list;

               while (w != NULL)
               {
                  w->state |= WindowInternalFlags_PreventHideDelete;
                  w = w->next;
               }
               /* End bug fix */

               w = t->object_list;

               while (w != NULL)
               {
                   WindowInternal *next = w->next;
                  _kernel_swi_regs dummy_regs;
                  _kernel_swi_regs dummy_user_regs;

                  dummy_user_regs.r[0] = 0;
                  dummy_user_regs.r[1] = (int)w->id;
                  dummy_regs.r[0] = 1;
                  dummy_regs.r[1] = (int)w->id;
                  dummy_regs.r[2] = (int)w;
                  dummy_regs.r[3] = t->task_handle;
                  dummy_regs.r[4]=(int) &dummy_user_regs;

                  delete_object (&dummy_regs, t);

                  w = next;
               }
            }

            /*
             * remove the task descriptor itself
             */

            mem_free (t, "freeing task descriptor");

            if (fb != NULL) {

                /* should already have lost fonts so no need for
                   task_free_fonts(fb);
                 */

                mem_free(fb , "freeing tasks font bindings");
            }

            break;
        }

        prev_t = t;
        t = next;
    }


    /*
     * Remove interest in events, by getting off postfilter chain, and
     * remove prefilter.
     */

#if 0

/* the toolbox does this anyway */

    if (t != NULL)
    {
        regs.r[0] = Toolbox_RegisterPostFilter_Remove;
        regs.r[1] = Window_PostFilter;
        regs.r[2] = (int)t;
        regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
        regs.r[4] = (int)events_of_interest;

        _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs);

        regs.r[0] = Toolbox_RegisterPostFilter_Remove;
        regs.r[1] = Window_PostFilter;
        regs.r[2] = (int)t;
        regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
        regs.r[4] = (int)messages_of_interest;

        _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs);

        regs.r[0] = Toolbox_RegisterPostFilter_Remove;
        regs.r[1] = Window_PostFilter;
        regs.r[2] = (int)t;
        regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
        regs.r[4] = (int)toolbox_events_of_interest;

        _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs);

        regs.r[0] = Toolbox_RegisterPreFilter_Remove;
        regs.r[1] = Window_PreFilter;
        regs.r[2] = (int)t;

        _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs);
    }
#endif
}


extern void task_add (int task_handle)
{
    /*
     * Function to add a task descriptor to the list of active
     * Toolbox tasks.
     */

    /*
     * extra safety check, we make sure that the task is not already there!
     */

    TaskDescriptor  *new_t;
    _kernel_swi_regs regs;
    _kernel_oserror *e;

    if (task_find (task_handle) != NULL)
        return;


    /*
     * add task to list
     */

    if ((new_t = mem_allocate (sizeof(TaskDescriptor), "task descriptor")) == NULL)
    {
        /* can't report an error really (cos we're in a service call) so just return! */
        return;
    }

    new_t->task_handle = task_handle;
    new_t->next = task__list;
    new_t->mask = 0;
    new_t->font_bindings = NULL;
    task__list = new_t;


    /*
     * Register interest in all kinds of events for Windows.  Pass task descriptor as
     * our "handle"
     */

    regs.r[0] = 0;
    regs.r[1] = Window_PostFilter;
    regs.r[2] = (int)new_t;
    regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
    regs.r[4] = (int)events_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
    {
        raise_toolbox_oserror (e, 0, -1);
        return;
    }

    regs.r[0] = 0;
    regs.r[1] = Window_PostFilter;
    regs.r[2] = (int)new_t;
    regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
    regs.r[4] = (int)messages_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
    {
        raise_toolbox_oserror (e, 0, -1);
        return;
    }

    regs.r[0] = 0;
    regs.r[1] = Window_PostFilter;
    regs.r[2] = (int)new_t;
    regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
    regs.r[4] = (int)toolbox_events_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
    {
        raise_toolbox_oserror (e, 0, -1);
        return;
    }


    /*
     * Add a prefilter
     */

    regs.r[0] = 0;
    regs.r[1] = Window_PreFilter;
    regs.r[2] = (int)new_t;
    if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL)
        raise_toolbox_oserror (e, 0, -1);

}

@


4.3
log
@Window 1.48

WindowHasBeenHidden events are now generated consistently for
transiently shown windows. Instead of relying upon a single static
variable indicating which, if any, window is showing transiently, a
shown/hidden counter is kept and pending HasBeenHidden events are
flushed when message_MENUS_CLOSED arrives.  This solves the problems
observed with several Toolbox applications which variously did not
appear to get a HasBeenHidden event for a closed transient or got
duplicate messages (which confused applications wishing to show a
shared window object transiently, wait for it to close, and then open
it again (eg. a dbox asking the user to make a choice).
@
text
@a30 1
#include "services.h"
d36 2
a37 2
#include "objects.toolbox.h"
#include "objects.window.h"
@


4.2
log
@PAN-01317 fixed: Wimp dying when Window deletes transiently shown objects
@
text
@d68 2
a69 2
        _swix(Font_LoseFont, _IN(0), i);               
     }                           
d72 2
a73 2
}   
#endif 
d77 5
d86 1
a86 1
     
d94 1
a94 1
      
d123 1
a123 1
      
d148 1
a148 1
    /* 
d204 1
a204 1
               while (w != NULL) 
d254 1
a254 1
            /* 
d262 2
a263 2
                /* should already have lost fonts so no need for 
                   task_free_fonts(fb);                             
d275 1
a275 1
     
d353 1
a353 1
    new_t->mask = 0; 
@


4.1
log
@Initial revision
@
text
@d216 11
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
