head	4.3;
access;
symbols
	ProgInfo-0_19:4.3
	RO_5_07:4.2
	ProgInfo-0_18:4.2
	ProgInfo-0_17:4.2
	ProgInfo-0_16:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.4
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	ProgInfo-0_15:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.2
	sbrodie_ProgInfo_0_13:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_ProgInfo_0_11:4.2
	sbrodie_ProgInfo_0_10:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.21.42.27;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	ilJSsPvsuHf7xNxy;

4.2
date	97.12.12.10.03.49;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.50;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.50;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.44.07;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.15.59;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.39.46;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.19. Tagged as 'ProgInfo-0_19'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  TGR
 * History: 14-Feb-94: TGR: created from IDJ template
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "twimp.h"

#include "objects/toolbox.h"
#include "objects/proginfo.h"

#include "auxiliary.h"
#include "object.h"
#include "events.h"


_kernel_oserror *find_underlying_window (IDBlock *id_block, ObjectID *sub_object_id);

static void events_launch_uri(const char *uri);

extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox postfilter, when an event happens which
     * this module has expressed an interest in.
     * R0 = Wimp event reason code
     * R1 ->client's Wimp event block
     * R2 = Task Descriptor of task interested in the event
     * R3 ->6-word "ID block" as passed to Toolbox_Initialise
     *
     */

    /*
     * This function gets a pointer to the task interested in the event in
     * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
     * If the event is dealt with by this module (eg ID block gets updated).
     * then set R0 to non-null before return.
     */

   _kernel_oserror  *e;
   _kernel_swi_regs  regs;
   wimp_PollBlock   *block           = (wimp_PollBlock *)r->r[1];
   IDBlock          *id_block        = (IDBlock *)r->r[3];
   int               event_code      = r->r[0];
   TaskDescriptor   *t               = (TaskDescriptor *) r->r[2];
   ProgInfoInternal *internal;

   DEBUG debug_output ("e","ProgInfo: Postfilter entered, received wimp event code = 0x%x\n",event_code);

   r->r[0] = 0;

   switch (event_code) {

      case wimp_ETOOLBOX_EVENT:
         DEBUG debug_output ("e","ProgInfo: handling a toolbox event, code = 0x%x\n",block->toolbox_event.hdr.event_code);
         switch (block->toolbox_event.hdr.event_code) {
            case ProgInfo_AboutToBeShown:
               regs.r[0] = 0;
               regs.r[1] = (int) id_block->self_id;

               if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL) {
                  return e;
               }
               global_next = (ProgInfoInternal *)regs.r[0];
               break;
            case Window_HasBeenHidden:
               {
                  ToolboxEvent        toolbox_event;

                  if ((internal = find_internal (t, id_block->self_id)) == NULL)
                     return NULL;

                  internal->flags &= ~ProgInfoInternal_IsShowing;

                  if (~internal->flags & ProgInfoInternal_GenerateHideEvent) return NULL;

                  regs.r[0] = 0;
                  regs.r[1] = (int) internal->object_id;
                  regs.r[2] = -1;
                  regs.r[3] = (int) &toolbox_event;

                  toolbox_event.hdr.size       = sizeof (ProgInfo_DialogueCompleted_Event);
                  toolbox_event.hdr.event_code = ProgInfo_DialogueCompleted;
                  toolbox_event.hdr.flags      = 0;

                  return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
               }
             case ActionButton_Selected:
               {
                  ToolboxEvent        toolbox_event;

                  if ((internal = find_internal (t, id_block->self_id)) == NULL)
                     return NULL;

		  if (internal->uri && internal->uri[0]) events_launch_uri(internal->uri);

                  if (~internal->flags & ProgInfoInternal_GenerateLaunchEvent) return NULL;
                  
                  regs.r[0] = 0;
                  regs.r[1] = (int) internal->object_id;
                  regs.r[2] = -1;
                  regs.r[3] = (int) &toolbox_event;

                  toolbox_event.hdr.size       = sizeof (ProgInfo_LaunchWebPage_Event);
                  toolbox_event.hdr.event_code = internal->button_event == 0 ? ProgInfo_LaunchWebPage : internal->button_event;
                  toolbox_event.hdr.flags      = 0;

                  return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
               }
         }
         break;
      default:
         break;
   }
   return NULL;
}



extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox prefilter, when Wimp_Poll is called.
     * R0 = mask passed to Wimp_Poll
     * R1 ->client's poll block passed to Wimp_Poll
     * R2 = Task Descriptor.
     *
     */

    /*
     * This function gets a pointer to the current task in
     * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
     * This function can enable additional events by zero-ing bits in
     * r->r[0]
     */

    DEBUG debug_output ("e","ProgInfo: prefilter entered\n");

    if (global_next) return show_actual();

    IGNORE (r);

    return NULL;
}

#define URI_Dispatch 0x4e381

static void events_launch_uri(const char *uri)
{
        (void) _swix(URI_Dispatch, _INR(0,2), 0, uri, 0);
}
@


4.2
log
@New resize source file added for automatic ProgInfo resizing, plus updated
resource files to contain Web site button templates.
@
text
@a30 1
#include "services.h"
d36 2
a37 2
#include "objects.toolbox.h"
#include "objects.proginfo.h"
@


4.1
log
@Initial revision
@
text
@d47 2
d117 22
d174 7
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
