head	4.3;
access;
symbols
	ProgInfo-0_19:4.3
	RO_5_07:4.2
	ProgInfo-0_18:4.2
	ProgInfo-0_17:4.2
	ProgInfo-0_16:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	sbrodie_Toolbox_Ursula_231198:4.2
	Ursula_RiscPC:4.2.0.4
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	ProgInfo-0_15:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_12May1998:4.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	sbrodie_Expresso_final_190298:4.2
	sbrodie_ProgInfo_0_13:4.2
	sbrodie_Expresso_BETA6_19980204:4.2
	sbrodie_ProgInfo_0_11:4.2
	sbrodie_ProgInfo_0_10:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spin_merge_8Jul97:4.1.7.1
	Ursula_bp_8Jul97:4.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_13May97:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.08.18.21.42.27;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	ilJSsPvsuHf7xNxy;

4.2
date	97.12.12.10.03.51;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.22.50;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.22.50;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.44.11;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.16.03;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.39.49;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile recreated from fragments
Include paths changed to Unix style.
Debug and non debug CMHG definitions replaced by one which is selected by passing predefines to CMHG.
Removed dummy services.h.
Don't bother calling TinyStubs SWI since in ROM it does nothing, and the RAM versions haven't used it since ~1997.
Use module header constants generated from CMHG rather than hand made one.
Reject out of range SWIs (fixes ticket #305).

Version 0.19. Tagged as 'ProgInfo-0_19'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   miscop.c
 * Purpose: miscellanaous operations on a ProgInfo Object
 * Author:  Timothy G Roddis
 * History: 14-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects/toolbox.h"
#include "objects/proginfo.h"
#include "objects/window.h"
#include "string32.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

/* SNB added this next line */
#include "resize.h"

#include "miscop.h"

_kernel_oserror *proginfo_get_window_id     (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_set_version       (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_get_version       (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_set_licence_type  (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_get_licence_type  (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_set_title         (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_get_title         (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_set_uri           (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_get_uri           (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_set_web_event     (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_get_web_event     (_kernel_swi_regs *r, TaskDescriptor *t);


#define MAX_MISCOP_METHODS 11

static _kernel_oserror *(*proginfo_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   proginfo_get_window_id,
   proginfo_set_version,
   proginfo_get_version,
   proginfo_set_licence_type,
   proginfo_get_licence_type,
   proginfo_set_title,
   proginfo_get_title,
   proginfo_set_uri,
   proginfo_get_uri,
   proginfo_set_web_event,
   proginfo_get_web_event,
   
};

extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

  _kernel_swi_regs   *user_regs = (_kernel_swi_regs *) r->r[4];
   int                 method    = user_regs->r[2];

   DEBUG debug_output ("y","ProgInfo: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(ProgInfo_NoSuchMiscOpMethod,1,method);
   } else
      return (*proginfo_miscop_methods[method])(r,t);

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_get_window_id     (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];

   user_regs->r[0] = (int) internal->sub_object_id;

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_set_version       (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_SetValue;
   regs.r[3] = ProgInfo_DisplayField_Version;
   regs.r[4] = user_regs->r[3];

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   /* SNB added: */ resize_proginfo(internal, t, 0);

   return NULL;
}

_kernel_oserror *proginfo_get_version       (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_GetValue;
   regs.r[3] = ProgInfo_DisplayField_Version;
   regs.r[4] = user_regs->r[3];
   regs.r[5] = user_regs->r[4];

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   user_regs->r[0] = regs.r[0];
   user_regs->r[4] = regs.r[5];

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_set_licence_type  (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   int                   buffer_size,
                         licence_type     = user_regs->r[3];
   char                  token[4],
                        *buffer;

   sprintf (token, "L%02x", licence_type&0x3f);

   if ((e = messages_file_lookup (token, 0, &buffer_size, 0)) != NULL) {
      if ((buffer = mem_alloc (1)) == NULL)
         return make_error(ProgInfo_AllocFailed,0);
      *buffer = '\0';
   } else {
      if ((buffer = mem_alloc (buffer_size)) == NULL)
         return make_error(ProgInfo_AllocFailed,0);

      if ((e = messages_file_lookup (token, buffer, &buffer_size, 0)) !=NULL)
         return e;
   }
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_SetValue;

   regs.r[0] = 0;
   regs.r[3] = ProgInfo_DisplayField_LicenceType;
   regs.r[4] = (int) buffer;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   internal->licence_type = licence_type;

   mem_freek (buffer);

   /* SNB added: */ resize_proginfo(internal, t, 0);

   return NULL;
}

_kernel_oserror *proginfo_get_licence_type  (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];

   user_regs->r[0] = internal->licence_type;

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_set_title         (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = Window_SetTitle;
   regs.r[3] = user_regs->r[3];

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   /* SNB added: */ resize_proginfo(internal, t, 0);

   return NULL;
}

_kernel_oserror *proginfo_get_title         (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = Window_GetTitle;
   regs.r[3] = user_regs->r[3];
   regs.r[4] = user_regs->r[4];

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   user_regs->r[3] = regs.r[3];
   user_regs->r[4] = regs.r[4];

   IGNORE(t);

   return NULL;
}

/* SNB added everything below here */
_kernel_oserror *proginfo_set_web_event     (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = ActionButton_SetEvent;
   regs.r[3] = ProgInfo_ActionButton_WebPage;
   regs.r[4] = user_regs->r[3];

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_get_web_event     (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = ActionButton_GetEvent;
   regs.r[3] = ProgInfo_ActionButton_WebPage;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   user_regs->r[0] = regs.r[0];

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_set_uri           (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   char                 *user_uri         = (char *) user_regs->r[3];
   int                   length           = string_length(user_uri);
   char                 *newuri           = NULL;
   
   newuri = mem_alloc(length + 1);
   
   if (newuri == NULL) {
           return make_error(ProgInfo_AllocFailed,0);
   }
   
   if (internal->uri != NULL) mem_freek(internal->uri);
   internal->uri = newuri;
   memcpy(internal->uri, user_uri, length);
   internal->uri[length] = '\0';

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_get_uri           (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   char                 *uri              = internal->uri ? internal->uri : "";

   string_to_buffer((char *) user_regs->r[3], uri, &user_regs->r[4]);

   IGNORE(t);

   return NULL;
}

@


4.2
log
@New resize source file added for automatic ProgInfo resizing, plus updated
resource files to contain Web site button templates.
@
text
@a30 1
#include "services.h"
d35 3
a37 3
#include "objects.toolbox.h"
#include "objects.proginfo.h"
#include "objects.window.h"
@


4.1
log
@Initial revision
@
text
@d39 1
d45 3
d57 4
d63 1
a63 1
#define MAX_MISCOP_METHODS 7
d72 6
a77 1
   proginfo_get_title
d146 1
a146 1
   IGNORE(t);
d216 1
a216 1
   IGNORE(t);
d249 1
a249 1
   IGNORE(t);
d273 83
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
