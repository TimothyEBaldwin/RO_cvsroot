head	1.2;
access;
symbols
	sbrodie_ResDisplay_15052000:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	sbrodie_Toolbox_Ursula_231198:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-12Aug1998:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.05.15.12.55.55;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.05.21.11.33.56;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.05.21.11.33.56;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Changed subtitle icon to a Button gadget.
Detail:
  I can't remember - this was 2 years ago
Admin:
  Historical interest only.
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   miscop.c
 * Purpose: miscellanaous operations on a ResDisplay Object
 * Author:  SNB
 * History: 18-Dec-97: SNB: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.resdisplay.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"
#include "layout.h"

#define MAX_MISCOP_METHODS 17

extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ResDisplayInternal     *internal         = (ResDisplayInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   int                   method    = user_regs->r[2];

   DEBUG debug_output ("y","ResDisplay: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(ResDisplay_NoSuchMiscOpMethod,1,method);
   }
   switch (method) {
           case ResDisplay_GetWindowID:
           	r->r[0] = sub_object_id;
           	break;

           case ResDisplay_GetTitle:
		regs.r[0] = 0;
           	regs.r[1] = sub_object_id;
           	regs.r[2] = Window_GetTitle;
		regs.r[3] = user_regs->r[3];
		regs.r[4] = user_regs->r[3];
           	e = _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);
           	if (e == NULL) {
           	        user_regs->r[4] = regs.r[4];
           	}
           	return e;

           case ResDisplay_SetTitle:
		regs.r[0] = 0;
           	regs.r[1] = sub_object_id;
           	regs.r[2] = Window_GetTitle;
           	regs.r[3] = user_regs->r[3];
           	return _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);

	   case ResDisplay_GetMenu:
	   	user_regs->r[0] = internal->menu_object_id;
	   	return NULL;

	   case ResDisplay_SetMenu:
	   	regs.r[0] = 0;
	   	regs.r[1] = sub_object_id;
	   	regs.r[2] = Window_SetMenu;
	   	regs.r[3] = internal->menu_object_id = user_regs->r[3];
	   	return _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);

	   case ResDisplay_GetSubTitle:
	   	if (internal->flags & ResDisplayInternal_HasSubTitle) {
	   	}
	   	else {
	   	        return make_error_hex(ResDisplay_NoSubTitle,1,method);
	   	}
	   	break;
	   case ResDisplay_SetSubTitle:
	   	if (internal->flags & ResDisplayInternal_HasSubTitle) {
	   	        regs.r[0] = 0;
	   	        regs.r[1] = sub_object_id;
	   	        regs.r[2] = Button_SetValue;
	   	        regs.r[3] = ResDisplay_Button_Subtitle;
	   	        regs.r[4] = user_regs->r[3];
	   	        return _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);
	   	}
	   	else {
	   	        return make_error_hex(ResDisplay_NoSubTitle,1,method);
	   	}
	   	break;

	   case ResDisplay_GetSelection:
	   	return make_error_hex(ResDisplay_NoSuchMiscOpMethod,1,method);
	   	break;

	   case ResDisplay_SetSelection:
	   	return make_error_hex(ResDisplay_NoSuchMiscOpMethod,1,method);
	   	break;

	   case ResDisplay_SetSortMode:
	   	if (internal->sort_mode == user_regs->r[3]) break;
	   	internal->sort_mode = user_regs->r[3];
	   	if (user_regs->r[0] & ResDisplay_SetSortMode_DelayRedraw) {
	   	        internal->delayed++;
	   	}
	   	else {
	   	        update_display(internal, t);
	   	}
	   	break;

	   case ResDisplay_SetDisplayMode:
	   	if (internal->display_mode == user_regs->r[3]) break;
		internal->display_mode = user_regs->r[3];
	   	if (user_regs->r[0] & ResDisplay_SetDisplayMode_DelayRedraw) {
	   	        internal->delayed++;
	   	}
	   	else {
	   	        update_display(internal, t);
	   	}
	   	break;

	   case ResDisplay_GetDisplayMode:
	   	user_regs->r[0] = internal->display_mode;
	   	break;

	   case ResDisplay_GetSortMode:
	   	user_regs->r[0] = internal->sort_mode;
	   	break;

	   case ResDisplay_AddItems:
		e = aux_add_items(internal, user_regs, t);
	   	if (e || (internal->flags & ResDisplay_Delay_Redraw)) return e;
		DEBUG debug_output("y", "AddItems: layout object\n");
   	        return layout_object(internal);

	   case ResDisplay_RemoveItems:
	   	e = aux_remove_items(internal, user_regs, t);
	   	if (e || (internal->flags & ResDisplay_Delay_Redraw)) return e;
		DEBUG debug_output("y", "RemoveItems: layout object\n");
   	        return layout_object(internal);

           case ResDisplay_AddKeyShortcuts:
                regs.r[0] = 0;
                regs.r[1] = sub_object_id;
                regs.r[2] = Window_AddKeyboardShortcuts;
                regs.r[3] = user_regs->r[3];
                regs.r[4] = user_regs->r[4];
                return _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);

           case ResDisplay_RemoveKeyShortcuts:
                regs.r[0] = 0;
                regs.r[1] = sub_object_id;
                regs.r[2] = Window_RemoveKeyboardShortcuts;
                regs.r[3] = user_regs->r[3];
                regs.r[4] = user_regs->r[4];
                return _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);
                break;

           default:
	   	return make_error_hex(ResDisplay_NoSuchMiscOpMethod,1,method);
           break;
   }

   return NULL;
}

@


1.1
log
@Initial revision
@
text
@d99 1
a99 1
           	
d110 1
a110 1
	   
d129 2
a130 2
	   	        regs.r[2] = DisplayField_SetValue;
	   	        regs.r[3] = ResDisplay_DisplayField_Subtitle;
d138 1
a138 1
	   	
d157 1
a157 1
	   	
d168 1
a168 1
		
d172 1
a172 1
	   	
d176 1
a176 1
           	
d205 1
a205 1
	   
@


1.1.1.1
log
@Initial import of ResDisplay toolbox object to CVS.
@
text
@@
