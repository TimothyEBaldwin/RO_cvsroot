head	1.1;
branch	1.1.1;
access;
symbols
	FileDbox-1_03:1.1.1.1
	FileDbox-1_02:1.1.1.1
	FileDbox-1_01:1.1.1.1
	FileDbox-1_00:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	sbrodie_Toolbox_Ursula_231198:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-12Aug1998:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.02.16.18.53.54;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.16.18.53.54;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   task.c
 * Purpose: task handling for the FileDBox module
 * Author:  RDL
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "macros.h"
#include "utils.h"

#include "toolbox.h"
#include "filedbox.h"

#include "object.h"

#include "task.h"
#include "scrolllist.h"

static EventInterest toolbox_events_of_interest[] = {
                {FileDbox_AboutToBeShown,    FileDbox_ObjectClass},
                {WritableField_ValueChanged, Window_ObjectClass},
                {StringSet_ValueChanged,     Window_ObjectClass},
                {ActionButton_Selected,      Window_ObjectClass},
                {Window_HasBeenHidden,       Window_ObjectClass},
                {ScrollList_Selection,       Window_ObjectClass},
                {-1,                         -1}
};

/*
 * This module has a linked list of client tasks.
 * task_add gets called when a Service_ToolboxTaskBorn
 * service call goes round.
 * The task is removed when the Service_WimpCloseDown is
 * received.
 * Each task keeps an Object list
 */


static TaskDescriptor *task__list = NULL;


extern int task_any_active(void)
{
    return task__list != NULL;
}


extern TaskDescriptor *task_find (int task_handle)
{

    /* 
     * Function to return a TaskDescriptor corresponding to
     * a task with a given Wimp handle
     */

    TaskDescriptor *t;

    t = task__list;

    while (t != NULL)
    {
        if (t->task_handle == task_handle)
            break;

        t = t->next;
    }

    return t;
}


extern void task_remove (int task_handle)
{
    /*
     * Function to remove a task descriptor from the list, given its
     * Wimp task handle.  Memory is freed, and we also delete any objects
     * owned by the exiting task.
     */

    TaskDescriptor  *t = task__list;
    TaskDescriptor  *prev_t = NULL, *next = NULL;

    while (t != NULL)
    {
        next = t->next;

        if (t->task_handle == task_handle)
        {
            /*
             *    should free up this task's object's list
             *    here: client must add their own code.
             * Note that filters get de-registered for us by the Toolbox.
             */

            /* 
             * remove the task descriptor itself
             */

            if (t == task__list)
               task__list = next;
            else
               prev_t->next = next;
           
            free (t);  

            break;
        }

        prev_t = t;
        t = next;
    }
}


extern _kernel_oserror *task_add (int task_handle)
{
    /*
     * Function to add a task descriptor to the list of active
     * Toolbox tasks.
     */

    TaskDescriptor  *new_t;
    _kernel_swi_regs regs;
    _kernel_oserror *e;


    /*
     * extra safety check, we make sure that the task is not already there!
     */

    if (task_find (task_handle) != NULL)
        return NULL;


    /*
     * add task to list
     */

    if ((new_t = calloc (1, sizeof(TaskDescriptor))) == NULL)
    {
        return make_error (FileDbox_AllocFailed, 0);
    }

    new_t->task_handle = task_handle;
    new_t->next        = task__list;
    task__list         = new_t;
    
    regs.r[0] = 0;
    regs.r[1] = FileDbox_PostFilter;
    regs.r[2] = (int) new_t;
    regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
    regs.r[4] = (int)toolbox_events_of_interest;
    _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs);

    /*
     * add a new prefilter, to deal with mask words, and seeing if an Object needs
     * to be shown due to an AboutToBeShown warning
     */

    regs.r[0] = 0;
    regs.r[1] = FileDbox_PreFilter;
    regs.r[2] = (int)new_t;
    if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL)
        return e;

    return NULL;

}

@


1.1.1.1
log
@Import of FileDbox to CVS (no previous source control)
@
text
@@
