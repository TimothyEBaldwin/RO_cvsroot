head	1.1;
branch	1.1.1;
access;
symbols
	FileDbox-1_03:1.1.1.1
	FileDbox-1_02:1.1.1.1
	FileDbox-1_01:1.1.1.1
	FileDbox-1_00:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	sbrodie_Toolbox_Ursula_231198:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-12Aug1998:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.02.16.18.53.54;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.16.18.53.54;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:        objsupport.c
 * Purpose:     Support Library for object modules
 * Author:      Neil Kelleher
 * History:     1-Jul-1994:  NK: created
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stddef.h>
#include "kernel.h"
#include "swis.h"

#include "toolbox.h"
#include "window.h"
#include "objsupport.h"

static _kernel_oserror *extract_gadget_info(char *tm,ComponentID id,void **p,int *l)
{
   return _swix(Window_ExtractGadgetInfo, _IN(0) | _IN(1) |_IN(2) | _OUT(0) | _OUT(1),0,tm,id,p,l);
}

char *copy_template(char *name)
{       
  char *tm;
  ObjectTemplateHeader *obj;        
  if(_swix(Toolbox_TemplateLookUp, _IN(0) | _IN(1) | _OUT(0),0,name,&obj)) tm = NULL;
  else {
    tm = malloc(obj->total_size);
    if(tm) {
      memcpy(tm,obj,obj->total_size);
      ((ObjectTemplateHeader *)tm)->body = 
         (WindowTemplate *) (tm + ((int) ((WindowTemplate *) obj->body)) - ((int) obj));
      ((WindowTemplate *) (((ObjectTemplateHeader *)tm)->body))-> gadgets = 
         (Gadget *) (tm + ((int) ((WindowTemplate *) obj->body)->gadgets) - ((int) obj));

    }
  }
  return tm;
}

_kernel_oserror *__zap_gadget(char *tm,ComponentID id,int off,int val)
{                                                                      
   _kernel_oserror *e=NULL;
   int *p,l;
   e=extract_gadget_info(tm,id,(void **) &p,&l);
   if(!e) *(p+ off/sizeof(int)) = val;
   return e;

}

int *__read_gadget(char *tm,ComponentID id,int off)
{
   int *p,l;
   if (extract_gadget_info(tm,id,(void **)&p,&l) == NULL)
      return (p+ off/sizeof(int));
   else return 0;
}

_kernel_oserror *__zap_window(char *tm,int off,int val)
{                              
   char *p = (char *)((WindowTemplate *) (((ObjectTemplateHeader *)tm)->body));
   if ((((ObjectTemplateHeader *)tm)->version == 101) && (off >= offsetof(WindowTemplate,default_focus))) off -=24;
   * ((int *) (p+off)) =val;      
   return NULL;
}

_kernel_oserror *create_from_template(char *template, ObjectID *handle)
{
   _kernel_oserror *er=NULL;
   if ((er=_swix(Toolbox_CreateObject, _IN(0) | _IN(1) | _OUT(0),
       1,       /* flags */
       template,
       handle)) != NULL) {
           free(template);
           return er;   
       }
                              
   free(template);     
   return NULL;
}                       
   
/* for word aligned overlapping areas */

static void _mem_cpy(char *a,char *b,int size)
{
  int *c=(int *)a;
  int *d=(int *)b;
  size = size/(sizeof(int));

  while (size>0) {
    size--;
    *c++ = *d++;
  }

}

_kernel_oserror *delete_gadget(char *tm,ComponentID id)
{                                                                      
   _kernel_oserror *e=NULL;
   char *p;
   int l;
   ObjectTemplateHeader *obj = (ObjectTemplateHeader *)tm;        

   e=extract_gadget_info(tm,id,(void **)&p,&l);
   if(!e) {
      _mem_cpy(p,p+l,(obj->total_size) - (((int)p) - ((int)tm)) -l);
      (obj->total_size) -= l;
      (((WindowTemplate *)obj->body)->num_gadgets) -= 1;
   }
   return e;

}

int *__read_window(char *tm,int off)
{
   char *p = (char *)((WindowTemplate *) (((ObjectTemplateHeader *)tm)->body));
   if ((((ObjectTemplateHeader *)tm)->version == 101) && (off >= offsetof(WindowTemplate,default_focus))) off -=24;
   return ((int *) (p+off));      

}
@


1.1.1.1
log
@Import of FileDbox to CVS (no previous source control)
@
text
@@
