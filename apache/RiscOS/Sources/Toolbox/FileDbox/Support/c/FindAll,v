head	1.1;
branch	1.1.1;
access;
symbols
	FileDbox-1_03:1.1.1.1
	FileDbox-1_02:1.1.1.1
	FileDbox-1_01:1.1.1.1
	FileDbox-1_00:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	sbrodie_Toolbox_Ursula_231198:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-12Aug1998:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.02.16.18.53.57;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.16.18.53.57;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <string.h>

#include "Desk.DeskMem.h"
#include "Desk.Error2.h"
#include "Desk.Debug.h"

#include "AcornNC.DirScan.h"



void	AcornNC_DirScan_FreeAll( AcornNC_dirscan_allfilesblock* allfiles)
	{
	AcornNC_dirscan_fileblock*	file;
	for	(
		file = Desk_LinkList_FirstItem( &allfiles->files);
		file;
		)
		{
		AcornNC_dirscan_fileblock*	next = Desk_LinkList_NextItem( &file->header);
		Desk_DeskMem_Free( file);
		file = next;
		}
	
	Desk_LinkList_Init( &allfiles->files);
	}




void	AcornNC_DirScan_FindAll2(
		const char*			directory, 
		AcornNC_dirscan_allfilesblock*	allfiles, 
		AcornNC_dirscan_sort*		sorts, 
		const char*			match, 
		AcornNC_dirscan_spritesize	spritesize
		)
	{
	Desk_filing_dirdata	dirdata;
	
	Desk_LinkList_Init( &allfiles->files);
	
	Desk_Error2_Try	{
		
		Desk_Filing_OpenDir2( directory, /*(Desk_filing_dirdata*)*/ &dirdata, 512, Desk_readdirtype_FULLDIRENTRY, match);
		
		for(;;)	{
			Desk_filing_fulldirentry*		entry0 = (Desk_filing_fulldirentry*) Desk_Filing_ReadDir( (Desk_filing_dirdata*) &dirdata);
			AcornNC_dirscan_fileblock*		file;
			AcornNC_dirscan_filespriteblock*	filesprite = NULL;
			if ( !entry0)	break;
			
			if ( strlen( entry0->name) > Desk_filing_MAXLEAFNAMELEN-1)	continue;
				// We ignore files whose leafnames are longer than Desk_filing_MAXLEAFNAMELEN-1...
			
			if ( spritesize != AcornNC_dirscan_spritesize_NONE)	{
				filesprite = Desk_DeskMem_MallocType( AcornNC_dirscan_filespriteblock);
				file = (AcornNC_dirscan_fileblock*) filesprite;
				file->info = *entry0;
				AcornNC_DirScan_FindSprite( &filesprite->sprite, &file->info, spritesize);
				}
			else	{
				file = Desk_DeskMem_MallocType( AcornNC_dirscan_fileblock);
				file->info = *entry0;
				}
			
			Desk_LinkList_AddToTail( &allfiles->files, &file->header);
			
			Desk_Debug2_Printf( Desk_error_PLACE "Found '%s', objtype=%i, filetype=%i\n", 
				file->info.name, file->info.objtype, AcornNC_DirScan_GetType( file)
				);
			}
		
		Desk_Filing_CloseDir( (Desk_filing_dirdata*) &dirdata);
		AcornNC_DirScan_Sort( allfiles, sorts);
		}
	Desk_Error2_Catch	{
		Desk_Filing_CloseDir( (Desk_filing_dirdata*) &dirdata);
		AcornNC_DirScan_FreeAll( allfiles);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	}

@


1.1.1.1
log
@Import of FileDbox to CVS (no previous source control)
@
text
@@
