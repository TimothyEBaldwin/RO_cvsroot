head	4.3;
access;
symbols
	Joystick-0_28:4.3
	Joystick-0_27:4.3
	Joystick-0_26:4.2
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Joystick-0_25:4.1
	dcotton_autobuild_BaseSW:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	troddis_Joystick-0_24:4.1.4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2012.03.18.09.20.13;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	80yLzy1e7jqxxlXv;

4.2
date	2001.03.16.15.56.51;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.36.11;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.36.11;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.27.39;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.09.21.09.51.30;	author troddis;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.39.57;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.48.09;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Overhauled to work in a 32 bit HALised world.
Though this module had been 32 bitted in 2001, a mistake in its header meant that the flags word was in the wrong place and hence rejected on a 32 bit system. This masked the fact that it was doing much peeking and poking of 0x0320xxxx addresses.
Reworked to use system API to find out where stuff is and peek and poke indirectly.
Added documentation on how the hardware should be wired up (while it's unlikely that hardware will be made, emulator authors can use this info to connect to PC joysticks).
hdr.Joystick:
  SWI flags defined for callers
Front.s:
  Change IO registers to be IOMD_Base relative
  Remove some unused definitions, include some include files
Modhead.s:
  Put the flags word at the right offset in the header
  Rewrite detection logic, now it's check for 7500/7500FE version
  of IOMD, then look for a podule with simple id of "Analogue joystick"
  in the NIC slot, then read its address
  Retabbed
SWI.s:
  Return the fire buttons in the right bits for joystick #1
  Retab and use OsByte header definition
Ticky.s:
  Access via addresses read in the setup step
Service.s:
  Retab and use OsByte header definition

Version 0.27. Tagged as 'Joystick-0_27'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Ticky

TickerRoutine                     ;Periodically executes, updating the magic locations.
        TEQ     r0, #4
        BEQ     handleit
        TEQ     pc, pc
        MOVNES  pc, lr            ; pass it on (26-bit)
        MOV     pc, lr            ; pass it on (32-bit)

handleit
        Push    "r0-r4,r12,lr"
        LDR     r12, [r12]                      ;Get workspace address into R12

        ;Let's see if we have any channels to start counting again...
        LDR     r2, =AnalogueControlReg
        LDRB    r1, [r2]                        ;Read the Control reg just in case

        LDRB    r0, misc_flags                  ;Read the misc flags...

        TST     r0, #RstChan1Flag
        ORRNE   r1, r1, #AnalogueChn1Cnt        ;Counters on, and...
        BICNE   r1, r1, #AnalogueChn1Dchg       ;Start the capacitor charging
        STRNEB  r1, [r2]                        ;Write back to the control reg
        BICNE   r0, r0, #RstChan1Flag           ;Clear the misc reset flag

        TST     r0, #RstChan2Flag
        ORRNE   r1, r1, #AnalogueChn2Cnt        ;Counters on, and...
        BICNE   r1, r1, #AnalogueChn2Dchg       ;Start the capacitor charging
        STRNEB  r1, [r2]                        ;Write back to the control reg
        BICNE   r0, r0, #RstChan2Flag           ;Clear the misc reset flag

        TST     r0, #RstChan3Flag
        ORRNE   r1, r1, #AnalogueChn3Cnt        ;Counters on, and...
        BICNE   r1, r1, #AnalogueChn3Dchg       ;Start the capacitor charging
        STRNEB  r1, [r2]                        ;Write back to the control reg
        BICNE   r0, r0, #RstChan3Flag           ;Clear the misc reset flag

        TST     r0, #RstChan4Flag
        ORRNE   r1, r1, #AnalogueChn4Cnt        ;Counters on, and...
        BICNE   r1, r1, #AnalogueChn4Dchg       ;Start the capacitor charging
        STRNEB  r1, [r2]                        ;Write back to the control reg
        BICNE   r0, r0, #RstChan4Flag           ;Clear the misc reset flag

        ;Now let's see which channels are complete!
        LDR     r4, iomd_address
        LDRB    r4, [r4, #AnalogueStatusReg]

        TST     r4, #Any_Completed
        BEQ     EndTickerRoutine

        TST     r4, #Chn1_Completed
        BLNE    SortChan1
        TST     r4, #Chn2_Completed
        BLNE    SortChan2
        TST     r4, #Chn3_Completed
        BLNE    SortChan3
        TST     r4, #Chn4_Completed
        BLNE    SortChan4

EndTickerRoutine
        TEQ     pc, pc
        Pull    "r0-r4,r12,pc",NE,^             ; 26-bit exit (pass it on)
        Pull    "r0-r4,r12,pc"                  ; 32-bit exit (pass it on)


; ---------------------------------------------------------------------------
SortChan1                                       ;Don't use R4!
        ;First, read the channel count...
        LDR     r2, iomd_address
        LDR     r3, [r2, #AnalogueChan1Count]

        ;Now we can sort out the info we got from the counter...
        STR     r3, magic_chan_one              ;Store the full 16bits (+16 bits garbage) in the 'magic' location

        ;Next, kick off the reset process...
        LDRB    r1, [r2, #AnalogueControlReg]
        BIC     r1, r1, #AnalogueChn1Cnt        ;Switch the counter off
        ORR     r1, r1, #AnalogueChn1Dchg       ;Start discharging
        STRB    r1, [r2, #AnalogueControlReg]

        LDRB    r2, misc_flags
        ORR     r2, r2, #RstChan1Flag           ;And remember we are in the middle of a reset for next time.
        STRB    r2, misc_flags

        MOV     pc, lr                          ;Return


; ---------------------------------------------------------------------------
SortChan2                                       ;Don't use R4!
        ;First, read the channel count...
        LDR     r2, iomd_address
        LDR     r3, [r2, #AnalogueChan2Count]

        ;Now we can sort out the info we got from the counter...
        STR     r3, magic_chan_two              ;Store the full 16-bit value in the 'magic' location

        ;Next, kick off the reset process...
        LDRB    r1, [r2, #AnalogueControlReg]
        BIC     r1, r1, #AnalogueChn2Cnt        ;Switch the counter off
        ORR     r1, r1, #AnalogueChn2Dchg       ;Start discharging
        STRB    r1, [r2, #AnalogueControlReg]

        LDRB    r2, misc_flags
        ORR     r2, r2, #RstChan2Flag
        STRB    r2, misc_flags

        MOV     pc, lr                          ;Return


; ---------------------------------------------------------------------------
SortChan3                                       ;Don't use R4!
        ;First, read the channel count...
        LDR     r2, iomd_address
        LDR     r3, [r2, #AnalogueChan3Count]

        ;Now we can sort out the info we got from the counter...
        STR     r3, magic_chan_three            ;Store the full 16-bit value in the 'magic' location

        ;Next, kick off the reset process...
        LDRB    r1, [r2, #AnalogueControlReg]
        BIC     r1, r1, #AnalogueChn3Cnt        ;Switch the counter off
        ORR     r1, r1, #AnalogueChn3Dchg       ;Start discharging
        STRB    r1, [r2, #AnalogueControlReg]

        LDRB    r2, misc_flags
        ORR     r2, r2, #RstChan3Flag
        STRB    r2, misc_flags

        MOV     pc, lr                          ;Return


; ---------------------------------------------------------------------------
SortChan4                                       ;Don't use R4!
        ;First, read the channel count...
        LDR     r2, iomd_address
        LDR     r3, [r2, #AnalogueChan4Count]

        ;Now we can sort out the info we got from the counter...
        STR     r3, magic_chan_four             ;Store the full 16-bit value in the 'magic' location

        ;Next, kick off the reset process...
        LDRB    r1, [r2, #AnalogueControlReg]
        BIC     r1, r1, #AnalogueChn4Cnt        ;Switch the counter off
        ORR     r1, r1, #AnalogueChn4Dchg       ;Start discharging
        STRB    r1, [r2, #AnalogueControlReg]

        LDRB    r2, misc_flags
        ORR     r2, r2, #RstChan4Flag
        STRB    r2, misc_flags

        MOV     pc, lr                          ;Return


        LNK     SWI.s

@


4.2
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.26. Tagged as 'Joystick-0_26'
@
text
@a17 1
	ROUT
d28 1
a28 1
	;Let's see if we have any channels to start counting again...
d32 1
a32 1
	LDRB	r0, misc_flags			;Read the misc flags...
d35 4
a38 4
	ORRNE   r1, r1, #AnalogueChn1Cnt        ;Counters on, and...
	BICNE   r1, r1, #AnalogueChn1Dchg       ;Start the capacitor charging
	STRNEB  r1, [r2]			;Write back to the control reg
	BICNE	r0, r0, #RstChan1Flag		;Clear the misc reset flag
d41 4
a44 4
	ORRNE   r1, r1, #AnalogueChn2Cnt        ;Counters on, and...
	BICNE   r1, r1, #AnalogueChn2Dchg       ;Start the capacitor charging
	STRNEB  r1, [r2]			;Write back to the control reg
	BICNE	r0, r0, #RstChan2Flag		;Clear the misc reset flag
d47 4
a50 4
	ORRNE   r1, r1, #AnalogueChn3Cnt        ;Counters on, and...
	BICNE   r1, r1, #AnalogueChn3Dchg       ;Start the capacitor charging
	STRNEB  r1, [r2]			;Write back to the control reg
	BICNE	r0, r0, #RstChan3Flag		;Clear the misc reset flag
d53 4
a56 4
	ORRNE   r1, r1, #AnalogueChn4Cnt        ;Counters on, and...
	BICNE   r1, r1, #AnalogueChn4Dchg       ;Start the capacitor charging
	STRNEB  r1, [r2]			;Write back to the control reg
	BICNE	r0, r0, #RstChan4Flag		;Clear the misc reset flag
d59 2
a60 2
        LDR     r4, =AnalogueStatusReg
        LDRB    r4, [r4]
d77 1
a77 1
        Pull    "r0-r4,r12,pc"                  ; 26-bit exit (pass it on)
d80 1
a80 1
;----------------------------------------------------------------------------------------
d83 2
a84 2
        LDR     r3, =AnalogueChan1Count
        LDR     r3, [r3]
d90 1
a90 2
        LDR     r2, =AnalogueControlReg
        LDRB    r1, [r2]
d93 1
a93 1
        STRB    r1, [r2]
d95 3
a97 3
	LDRB	r2, misc_flags
	ORR	r2, r2, #RstChan1Flag		;And remember we are in the middle of a reset for next time.
	STRB	r2, misc_flags
d102 1
a102 1
;----------------------------------------------------------------------------------------
d105 2
a106 2
        LDR     r3, =AnalogueChan2Count
        LDR     r3, [r3]
d112 1
a112 2
        LDR     r2, =AnalogueControlReg
        LDRB    r1, [r2]
d115 1
a115 1
        STRB    r1, [r2]
d117 3
a119 3
	LDRB	r2, misc_flags
	ORR	r2, r2, #RstChan2Flag
	STRB	r2, misc_flags
d124 1
a124 1
;----------------------------------------------------------------------------------------
d127 2
a128 2
        LDR     r3, =AnalogueChan3Count
        LDR     r3, [r3]
d134 1
a134 2
        LDR     r2, =AnalogueControlReg
        LDRB    r1, [r2]
d137 1
a137 1
        STRB    r1, [r2]
d139 3
a141 3
	LDRB	r2, misc_flags
	ORR	r2, r2, #RstChan3Flag
	STRB	r2, misc_flags
d146 1
a146 1
;----------------------------------------------------------------------------------------
d149 2
a150 2
        LDR     r3, =AnalogueChan4Count
        LDR     r3, [r3]
d156 1
a156 2
        LDR     r2, =AnalogueControlReg
        LDRB    r1, [r2]
d159 1
a159 1
        STRB    r1, [r2]
d161 3
a163 3
	LDRB	r2, misc_flags
	ORR	r2, r2, #RstChan4Flag
	STRB	r2, misc_flags
d168 1
a168 2
;----------------------------
        LNK     s.SWI
@


4.1
log
@Initial revision
@
text
@d19 5
a23 2
	CMP	r0, #4
	MOVNES	pc, lr		  ;Not our event, so back we go...
d25 1
d64 1
a64 1
        Pull    "r0-r4,r12,pc",EQ,^                 ;None ready, so exit
d76 3
a78 1
        Pull    "r0-r4,r12,pc",,^
@


4.1.4.1
log
@Modifications for Phoebe HW.
@
text
@a16 2
 [ Codec_Type <> "AD1816"

d166 1
a166 1
 ]
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
