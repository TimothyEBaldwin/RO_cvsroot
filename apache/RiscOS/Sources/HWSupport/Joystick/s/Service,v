head	4.3;
access;
symbols
	Joystick-0_28:4.3
	Joystick-0_27:4.3
	Joystick-0_26:4.2
	dellis_autobuild_BaseSW:4.2
	sbrodie_sedwards_16Mar2000:4.2
	Joystick-0_25:4.2
	dcotton_autobuild_BaseSW:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	troddis_Joystick-0_24:4.1.4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2012.03.18.09.20.13;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	80yLzy1e7jqxxlXv;

4.2
date	99.12.13.10.59.34;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.36.11;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.36.11;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.27.29;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.09.21.09.51.29;	author troddis;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.39.48;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.48.06;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Overhauled to work in a 32 bit HALised world.
Though this module had been 32 bitted in 2001, a mistake in its header meant that the flags word was in the wrong place and hence rejected on a 32 bit system. This masked the fact that it was doing much peeking and poking of 0x0320xxxx addresses.
Reworked to use system API to find out where stuff is and peek and poke indirectly.
Added documentation on how the hardware should be wired up (while it's unlikely that hardware will be made, emulator authors can use this info to connect to PC joysticks).
hdr.Joystick:
  SWI flags defined for callers
Front.s:
  Change IO registers to be IOMD_Base relative
  Remove some unused definitions, include some include files
Modhead.s:
  Put the flags word at the right offset in the header
  Rewrite detection logic, now it's check for 7500/7500FE version
  of IOMD, then look for a podule with simple id of "Analogue joystick"
  in the NIC slot, then read its address
  Retabbed
SWI.s:
  Return the fire buttons in the right bits for joystick #1
  Retab and use OsByte header definition
Ticky.s:
  Access via addresses read in the setup step
Service.s:
  Retab and use OsByte header definition

Version 0.27. Tagged as 'Joystick-0_27'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Service

; ---------------------------------------------------------------------------
Service
        TEQ     R1, #Service_UKByte
        MOVNE   pc, lr                  ;Nowt to do with us then...

        Push    "r0,r12,lr"

        MOV     r14, r12                ;Bung R12 into R14 in case we have to start the ticker routine
        LDR     r12, [r12]              ;Get workspace address into R12

        ;Check the interface is analogue. If not, we don't want to get involved
        LDRB    r0, misc_flags
        TST     r0, #AnalogueFlag       ;Check the ana/digi flag
        Pull    "r0,r12,pc",EQ          ;It's a digital i/f, so ignore the service
        TST     r0, #CalibrateFlag      ;and the 'calibrate' flag
        Pull    "r0,r12,pc",NE          ;It's being calibrated at the mo, so ignore the service

        TST     r0, #FirstTimeFlag      ;Is the ticky routine going yet?
        Push    "r0-r5",NE
        MOV     r4, r14                 ;Grab the value of R12 into R4 from R14
        BLNE    StartTickyRoutine       ;Nope, so go start it
        Pull    "r0-r5",NE

        ; I know I should be claiming ByteV, but doing it this way is the easiest
        ; way to ensure that if present, the I/O podule will get to the UKByte first...
        ; However, it does mean that we can't indicate any errors :-(

        AND     r2, r2, #&ff            ;OS_Byte number
        AND     r3, r3, #&ff            ;Parameter 1
        AND     r4, r4, #&ff            ;Parameter 2

        TEQ     r2, #OsByte_MaxADCChannel
        BEQ     OSByte16                ;Select ADC channels to sample

        TEQ     r2, #OsByte_ForceADC
        BEQ     OSByte17                ;Force an ADC conversion

        TEQ     r2, #OsByte_ReadADC
        BEQ     OSByte128               ;Read ADC channel (ADVAL)

        TEQ     r2, #OsByte_RW_CurrentADCChannel
        BEQ     OSByte188               ;Read currently-converting ADC channel

        TEQ     r2, #OsByte_RW_HighestADCChannel
        BEQ     OSByte189               ;Read maximum ADC channel number

        TEQ     r2, #OsByte_RW_ADCResolution
        BEQ     OSByte190               ;Read ADC conversion type

05      MOV     r1, #Service_UKByte     ;Pass it on if it's none of these...
        Pull    "r0,r12,pc"             ;

; ---------------------------------------------------------------------------
OSByte16
        CMP     r3, #4                  ; Is r1 greater than 4?
        MOVGT   r3, #4                  ; If so, fix it to 4
        STRB    r3, adc_numchanstosample; Stuff r1 away

10      MOV     r1, #0                  ; Claim the service call
        Pull    "r0,r12,pc"             ; and return

; ---------------------------------------------------------------------------
OSByte17
        B       %BT10                   ; Claim service & quit, but pretend we did something

; ---------------------------------------------------------------------------
OSByte128
        CMP     r3, #0
        BNE     %FT15
        ; Do the fire bit reading here
        LDR     r3, simple_podule_address
        LDR     r4, [r3, #AnalogueJoyFire]
        LDR     r4, [r3, #AnalogueJoyFire]  ; Latch and read
        AND     r3, r4, #AnalogueAdvalFireA
        AND     r4, r4, #AnalogueAdvalFireB
        ORR     r3, r3, r4, LSR #7
        LDRB    r4, adc_lastconversion
        B       %FT20

15      TEQ     r3, #1
        ADREQ   r0, magic_chan_one
        TEQ     r3, #2
        ADREQ   r0, magic_chan_two
        TEQ     r3, #3
        ADREQ   r0, magic_chan_three
        TEQ     r3, #4
        ADREQ   r0, magic_chan_four

        STRB    r3, adc_lastconversion
        LDR     r0, [r0]                ; R0 now contains the channel reading (16bit)
        AND     r3, r0, #&ff            ; R3 (X) contains the low 8 bits
        AND     r0, r0, #&ff00          ; Clear all but the 2nd 8 bits
        MOV     r4, r0, LSR #8          ; R4 (Y) contains the high 8 bits now

        B       %FT20                   ; Claim & quit

; ---------------------------------------------------------------------------
OSByte188
        LDRB    r3, adc_lastconversion  ; Give 'em any old junk - they'll believe it!
        B       %FT20

; ---------------------------------------------------------------------------
OSByte189
        LDRB    r3, adc_numchanstosample

20      MOV     r1, #0
        Pull    "r0,r12,pc"             ; Claim service & quit

; ---------------------------------------------------------------------------
OSByte190
        MOV     r3, #0                  ; We're doing the default (16bit)
        B       %BT20                   ; Claim & quit


        LNK     Tail.s
@


4.2
log
@  32-bit compatibility.
  Fixes to SWI calls.
  Moved to srccommit verison number maintenance.
Detail:
  No longer calls non-X bit SWIs in SWI handler.
  Oddity in stack usage tidied up.
Admin:
  Tested Phoebe & 32 machine builds.

Version 0.25. Tagged as 'Joystick-0_25'
@
text
@d17 1
a17 1
; ---------------------------------------------------------------------------------------------------
a18 1
	ROUT
d24 1
a24 1
	MOV	r14, r12		;Bung R12 into R14 in case we have to start the ticker routine
d31 1
a31 1
	TST	r0, #CalibrateFlag	;and the 'calibrate' flag
d36 1
a36 1
	MOV	r4, r14			;Grab the value of R12 into R4 from R14
d40 3
a42 3
;I know I should be claiming ByteV, but doing it this way is the easiest
;way to ensure that if present, the I/O podule will get to the UKByte first...
;However, it does mean that we can't indicate any errors :-(
d44 1
a44 1
        AND     r2, r2, #&ff		;OS_Byte number
d46 1
a46 1
	AND	r4, r4, #&ff		;Parameter 2
d48 1
a48 1
        TEQ     r2, #16
d51 1
a51 1
        TEQ     r2, #17
d54 1
a54 1
        TEQ     r2, #128
d57 1
a57 1
        TEQ     r2, #188
d60 1
a60 1
        TEQ     r2, #189
d63 1
a63 1
        TEQ     r2, #190
d69 1
a69 1
;-----------------
d78 1
a78 1
;-----------------
d82 1
a82 1
;-----------------
a83 2
; 	CMP	r3, #4
;	BLT	%BT05			;Bzzt, wrong answer!
d86 9
a94 9
	;Do the fire bit reading here
	LDR	r3, =AnalogueJoyFire
        LDR     r4, [r3]                ; Latch &
        LDR     r4, [r3]                ; load
	AND	r3, r4, #AnalogueAdvalFireA
	AND	r4, r4, #AnalogueAdvalFireB
	ORR	r3, r3, r4, LSR #7
	LDRB	r4, adc_lastconversion
	B	%FT20
d108 1
a108 1
	AND	r0, r0, #&ff00		; Clear all but the 2nd 8 bits
d113 1
a113 1
;-----------------
d115 1
a115 1
	LDRB	r3, adc_lastconversion	; Give 'em any old junk - they'll believe it!
d118 1
a118 1
;-----------------
d125 1
a125 1
;-----------------
d127 1
a127 1
	MOV	r3, #0			; We're doing the default (16bit)
d131 1
a131 3

;------------------------------------------------
        LNK     s.Tail
@


4.1
log
@Initial revision
@
text
@d21 1
a21 1
        MOVNES  pc, lr                  ;Nowt to do with us then...
d31 1
a31 1
        Pull    "r0,r12,pc",EQ,^        ;It's a digital i/f, so ignore the service
d33 1
a33 1
        Pull    "r0,r12,pc",NE,^        ;It's being calibrated at the mo, so ignore the service
d68 1
a68 1
        Pull    "r0,r12,pc",,^              ;
d77 1
a77 1
        Pull    "r0,r12,pc",,^              ; and return
d126 1
a126 1
        Pull    "r0,r12,pc",,^              ; Claim service & quit
@


4.1.4.1
log
@Modifications for Phoebe HW.
@
text
@d34 1
a34 1
 [ Codec_Type <> "AD1816"
d40 1
a40 1
 ]
a88 35
 [ Codec_Type = "AD1816"
        LDR     r1, =AD1816_SSBase
        LDRB    r3, [r1, #SS_RawJoystk]
        AND     r3, r3, #AnalogueAdvalFireA :OR: AnalogueAdvalFireB
        ORR     r3, r3, r3, LSR #1
        MOV     r3, r3, LSR #AnalogueJoy0FireShift
	LDRB	r4, adc_lastconversion
	B	%FT20
15
	MOV     r0, #0 ; bit mask in use
        TEQ     r3, #1
        MOVEQ   r0, #SS_JSEL_AX
        TEQ     r3, #2
        MOVEQ   r0, #SS_JSEL_AY
        TEQ     r3, #3
        MOVEQ   r0, #SS_JSEL_BX
        TEQ     r3, #4
        MOVEQ   r0, #SS_JSEL_BY
        TEQ     r0, #0            
        Pull    "r0, r12, pc",EQ,^ ; not one of ours
        LDRB    r3, [r6, #SS_JoystkCtrl]
 [ {FALSE}
        TST     r3, r3, #SS_JRDY
        BEQ     %BT10
        CMP     r0, #1
 ]
        BIC     r3, r3, #SS_JSEL_Mask
        ORR     r3, r3, r4 ; which channel to read
        STRB    r3, [r6, #SS_JoystkCtrl]

        LDRB    r3, [r6, #SS_JoystkPos]        ; Get lo order byte
        LDRB    r4, [r6, #SS_JoystkPos + 4]    ; Get hi order byte
        
        B       %FT20
 |
a114 1
 ]       
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
