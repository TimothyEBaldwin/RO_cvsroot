head	4.6;
access;
symbols
	Joystick-0_28:4.6
	Joystick-0_27:4.5
	Joystick-0_26:4.4
	dellis_autobuild_BaseSW:4.3
	sbrodie_sedwards_16Mar2000:4.3
	Joystick-0_25:4.3
	dcotton_autobuild_BaseSW:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	troddis_Joystick-0_24:4.2.2.1
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2013.01.27.11.45.35;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	27nj5Y9dxHfJdQBw;

4.5
date	2012.03.18.09.20.13;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	80yLzy1e7jqxxlXv;

4.4
date	2001.03.16.15.56.51;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.12.13.10.59.33;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.16.30.22;	author nturton;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.36.10;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	98.09.21.09.51.27;	author troddis;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.36.10;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.27.25;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.39.44;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.48.05;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Switch out non functional digital joysticks
They were already switched out, since they're not wired up to anything, but using an obsolete switch.
Changed error blocks to use error base from Hdr:NewErrors.
Builds, but not tested.

Version 0.28. Tagged as 'Joystick-0_28'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.ModHead

        ASSERT  (.=Module_BaseAddr)

        DCD     0                                       ; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr        ; Service
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                                       ; Helptable
        DCD     JoystickSWI_Base                        ; SWIbase
        DCD     SWIhandler     - Module_BaseAddr
        DCD     SWInames       - Module_BaseAddr
        DCD     0                                       ; SWIdecode
        DCD     0
 [ :LNOT: No32bitCode
        DCD     ModFlags       - Module_BaseAddr
 ]

; ---------------------------------------------------------------------------
Helpstr DCB     "Joystick",9,"$Module_HelpVersion", 0
        ALIGN

      [ :LNOT: No32bitCode
ModFlags
        DCD     ModuleFlag_32bit
      ]

; ---------------------------------------------------------------------------
;       Module initialisation point
Init
        Push    "lr"
        Debug   mod,"Initialising"

        LDR     r0, [r12]                               ; Have we already got a workspace ?
        CMP     r0, #0                                  ; clears V
        MOVNE   r12, r0
        BNE     %FT01

        MOV     r0, #ModHandReason_Claim
        LDR     r3, =max_running_work
        SWI     XOS_Module                              ; Claim workspace
        Pull    "pc", VS

        STR     r2, [r12]                               ; Store workspace pointer.
        MOV     r12, r2
01
        MOV     r0, #0
        STR     r0, message_file_open

        MOV     r0, #9
        MOV     r1, #4<<8
        SWI     XOS_Memory
        MOVVS   r1, #IOMD_Base                          ; Kernel too old, assume crusty IOC origins
        STR     r1, iomd_address
        TEQ     r1, #0
        BEQ     %FT90                                   ; Quit when no controller

        LDRB    r2, [r1, #IOMD_ID0]
        LDRB    r3, [r1, #IOMD_ID1]
        ORR     r2, r2, r3, LSL #8
        LDR     r3, =IOMD_7500
        LDR     r4, =IOMD_7500FE
        TEQ     r2, r3
        TEQNE   r2, r4
        BNE     %FT90                                   ; Quit when wrong controller

        MOV     r3, #AnaloguePoduleSlot
        SWI     XPodule_ReadID
        BVS     %FT80
        AND     r0, r0, #2_1111000
        TEQ     r0, #SimpleType_AnalogJoystick :SHL: 3
        BNE     %FT80                                   ; No joystick in the NIC slot

        MOV     r0, #Podule_ReadInfo_ROMAddress
        ADR     r1, simple_podule_address
        MOV     r2, #4
        MOV     r3, #AnaloguePoduleSlot
        SWI     XPodule_ReadInfo
        
      [ CanHaveDigital
        ; Test for existance & type of hardware. Read from the Type detection address
        Debug   mod,"Checking hardware"
        LDRB    r1, [r1, #IOMD_CLINES]                  ; Read the port

        Debug   wt,"Read back from type detect:",r1
        TST     r1, #DetectHardwareBit                  ; Check for hardware first (low = present)
        BNE     %FT80
        ANDS    r1, r1, #DetectAnaDigiBit               ; Pick out the Ana/Digi flag from hardware
        MOVNE   r1, #AnalogueFlag                       ; Set the (different) bit in misc_flags if analogue
        STRB    r1, misc_flags                          ; And store it away, zeroing the rest of the misc flags too.
        BLNE    init_analogue                           ; And then go set it in action...
      |
        MOV     r1, #AnalogueFlag
        STRB    r1, misc_flags
        BL      init_analogue                           ; And then go set it in action...
      ]

        ; Initialise any other flags
        LDRB    r1, misc_flags
        ORR     r1, r1, #FirstTimeFlag                  ; Set the first-time flag
        STRB    r1, misc_flags
        Debug   wt,"Misc flags stored as:",r1

        ; Ok, lets bung some 'sensible' defaults into the ranges...
        MOV     r1, #defaultrange << 16
        ORR     r1, r1, #defaultmin
        STR     r1, range_chan_one
        STR     r1, range_chan_two
        STR     r1, range_chan_three
        STR     r1, range_chan_four

        ; And set up the polarities for a TL min, BR max (like most PC analogue sticks)
        ; to give BL min, TR max as in the SWI
        MOV     r1, #default_polarities
        STRB    r1, range_polarity
        Pull    "pc"                                    ; Hardware is there so initialise successfully.


80
        Debug   mod,"No joystick hardware"
        ADR     r0, ErrorBlock_NoHardware
        B       %FT99
90
        Debug   mod,"No IOMD"
        ADR     r0, ErrorBlock_WrongIOMD
99
        BL      msgtrans_errorlookup
        BL      CloseMsgFile
        SETV
        Pull    "pc"

ErrorBlock_NoHardware
        DCD     ErrorBase_Joystick + 0
        DCB     "NoHWare",0
        ALIGN
        
ErrorBlock_WrongIOMD
        DCD     ErrorBase_Joystick + 2
        DCB     "Wrong",0
        ALIGN
        
; ---------------------------------------------------------------------------
;       RMKill'ing the module
Die
        Push    "r4,lr"

        MOV     r4, r12                                 ; So we can release the ticker if need be
        LDR     r12, [r12]
        CMP     r12, #0                                 ; clears V
        Pull    "r4, pc",EQ                             ; Looks like we didn't even get as far as claiming workspace!

        MOV     r0,#ModHandReason_Free
        MOV     r2,r12
        SWI     XOS_Module                              ; Clear workspace

        BL      StopTickyRoutine
        BL      CloseMsgFile

        CLRV
        Pull    "r4,pc"



StopTickyRoutine
        Push    "r0-r2,lr"

        LDRB    r0, misc_flags
        Debug   wt,"Misc flags read as",r0
        TST     r0, #FirstTimeFlag
        Pull    "r0-r2,pc",NE                           ; If set, then no ticker to stop!

        Debug   wt,"Um, think we have a vector registered"
        MOV     r0, #OsByte_DisableEvent
        MOV     r1, #Event_VSync
        SWI     XOS_Byte
        MOV     r0, #EventV
        ADR     r1, TickerRoutine
        MOV     r2, r4
        SWI     XOS_Release                             ; Release the ticker routine

        Pull    "r0-r2,pc"


CloseMsgFile
        Push    "r0,lr"

        ; Close the message file if it's open
        LDR     r0, message_file_open
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile

        Pull    "r0,pc"

 
; ---------------------------------------------------------------------------
;      Initialising the analogue registers in Morris
init_analogue
        LDR     r2, iomd_address

        MOV     r0, #&0f                ;Enable all channels, but don't allow irqs
        STRB    r0, [r2, #AnalogueIrqReg]

        MOV     r0, #&0f                ;Counters on, discharge off
        STRB    r0, [r2, #AnalogueControlReg]

        MOV     pc,lr


        LNK     Ticky.s
@


4.5
log
@Overhauled to work in a 32 bit HALised world.
Though this module had been 32 bitted in 2001, a mistake in its header meant that the flags word was in the wrong place and hence rejected on a 32 bit system. This masked the fact that it was doing much peeking and poking of 0x0320xxxx addresses.
Reworked to use system API to find out where stuff is and peek and poke indirectly.
Added documentation on how the hardware should be wired up (while it's unlikely that hardware will be made, emulator authors can use this info to connect to PC joysticks).
hdr.Joystick:
  SWI flags defined for callers
Front.s:
  Change IO registers to be IOMD_Base relative
  Remove some unused definitions, include some include files
Modhead.s:
  Put the flags word at the right offset in the header
  Rewrite detection logic, now it's check for 7500/7500FE version
  of IOMD, then look for a podule with simple id of "Analogue joystick"
  in the NIC slot, then read its address
  Retabbed
SWI.s:
  Return the fire buttons in the right bits for joystick #1
  Retab and use OsByte header definition
Ticky.s:
  Access via addresses read in the setup step
Service.s:
  Retab and use OsByte header definition

Version 0.27. Tagged as 'Joystick-0_27'
@
text
@d96 1
a96 2
      [ IOMD_C_JoystickDetectBits <> 0

a97 1
        ; If bit 3 is set, then digital. If bits 4-7 = 1000 then present
d102 1
a102 1
        TST     r1, #DetectHardwareBit                  ; Check for hardware first
d111 1
a111 1
        BL      init_analogue
d149 1
a149 1
        DCD     &43f40
d154 1
a154 1
        DCD     &43F42
@


4.4
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.26. Tagged as 'Joystick-0_26'
@
text
@d19 1
a19 1
        DCD     0                               	; Start
d22 1
a22 1
        DCD     Service        - Module_BaseAddr  	; Service
d25 2
a26 2
        DCD     0                               	; Helptable
        DCD     &43f40                          	; SWIbase
d29 1
a29 2
        DCD     0                               	; SWIdecode
        DCD     0
d35 1
a35 1
; ---------------------------------------------------------------------------------------------------
d37 6
a42 1
                ALIGN
d44 1
a44 1
; ---------------------------------------------------------------------------------------------------
d50 3
a52 3
        LDR     r0,[r12]                		; Have we already got a workspace ?
        CMP     r0,#0                   		; clears V
        MOVNE   r12,r0
d55 4
a58 4
        MOV     r0,#6
        LDR     r3,=max_running_work
        SWI     XOS_Module              		; Claim workspace
        Pull    "pc",VS
d60 2
a61 2
        STR     r2,[r12]                		; Store workspace pointer.
        MOV     r12,r2
d63 2
a64 2
        MOV     r0,#0
        STR     r0,message_file_open
d66 31
a96 4
 [ IOMD_C_JoystickDetectBits <> 0

; Test for existance & type of hardware. Read from the Type detection address
; If bit 3 is set, then digital. If bits 4-7 = 1000 then present
d98 2
d101 1
a101 11
        LDR     r0, =AnaDigiDetect
        LDRB    r1, [r0]				; Read the port
 [ False
	MOV	r0, #1<<5
	ADR	r1, magic_chan_one			;safe to use this temporarily
	MOV	r2, #4
	MOV	r3, #8					;network slot is podule 8
	SWI	XPodule_ReadInfo
	MOVVS	r1, #0
	LDRVC	r1, magic_chan_one			;r1 contains the podule id byte in bits 0->7
 ]
d104 7
a110 10
        TST     r1, #DetectHardwareBit			; Check for hardware first
	BNE	NoHware
        ANDS    r1, r1, #DetectAnaDigiBit		; Pick out the Ana/Digi flag from hardware
        MOVNE   r1, #AnalogueFlag			; Set the (different) bit in misc_flags if analogue
;	ORR	r1, r1, #RstFlags			; Set the reset flags too
        STRB    r1, misc_flags          		; And store it away, zeroing the rest of the misc flags too.
	BLNE	init_analogue				; And then go set it in action...

 |

d114 1
d116 1
a116 3
 ]

;Initialise any other flags
d118 1
a118 1
        ORR     r1, r1, #FirstTimeFlag          	; Set the first-time flag
d122 23
a144 21
;Ok, lets bung some 'sensible' defaults into the ranges...
	MOV	r1, #defaultrange << 16
	ORR	r1, r1, #defaultmin
	STR	r1, range_chan_one
	STR	r1, range_chan_two
	STR	r1, range_chan_three
	STR	r1, range_chan_four
;And set up the polarities for a TL min, BR max (like most PC analogue sticks)
;to give BL min, TR max as in the SWI
	MOV	r1, #default_polarities
	STRB	r1, range_polarity


        Pull    "pc"	                		; Hardware is there so initialise successfully.


 [ IOMD_C_JoystickDetectBits <> 0

NoHware
        Debug   mod,"No hardware"
        ADR     r0,ErrorBlock_NoHardware
d146 1
a146 1
        BL      Shut_Down
d153 8
a160 5
                ALIGN

 ]

; ---------------------------------------------------------------------------------------------------
d165 1
a165 1
        MOV     r4, r12                    	     	; So we can release the ticker if need be
d168 1
a168 1
        Pull    "r4, pc",EQ				; Looks like we didn't even get as far as claiming workspace!
d170 3
a172 3
        MOV     r0,#7
	MOV	r2,r12
        SWI     XOS_Module              		; Clear workspace
d175 1
a175 1
        BL      Shut_Down
d188 1
a188 1
        Pull    "r0-r2,pc",NE                      	; If set, then no ticker to stop!
d191 4
a194 4
        MOV     r0, #13
        MOV     r1, #4
        SWI     XOS_Byte                         	; Disable VSync event
        MOV     r0, #&10                        	; Event vector
d197 1
a197 1
        SWI     XOS_Release                      	; Release the ticker routine
d202 1
a202 1
Shut_Down
d205 4
a208 5
        Debug   mod,"Module dying"
; Close the message file if it's open
        LDR     r0,message_file_open
        TEQ     r0,#0
        ADRNE   r0,message_file_block
d213 2
a214 4
 [ :LNOT: No32bitCode
ModFlags        DCD     1       ; 32-bit module
 ]
; ---------------------------------------------------------------------------------------------------
d217 1
a217 3
	LDR	r1, =AnalogueIrqReg
	MOV	r0, #&0f		;Enable all channels, but don't allow irqs
	STRB	r0, [r1]		;
d219 2
a220 3
	LDR	r1, =AnalogueControlReg
	MOV	r0, #&0f		;Counters on, discharge off
	STRB	r0, [r1]
d222 2
a223 1
	MOV	pc,lr
d225 1
d228 1
a228 1
        LNK     s.ticky
@


4.3
log
@  32-bit compatibility.
  Fixes to SWI calls.
  Moved to srccommit verison number maintenance.
Detail:
  No longer calls non-X bit SWIs in SWI handler.
  Oddity in stack usage tidied up.
Admin:
  Tested Phoebe & 32 machine builds.

Version 0.25. Tagged as 'Joystick-0_25'
@
text
@a15 1
        LEADR   Module_LoadAddr
d37 1
a37 5
Helpstr DCB     "Joystick",9,"$Module_MajorVersion ($Module_Date)"
        [ Module_MinorVersion <> ""
                DCB     " $Module_MinorVersion"
        ]
                DCB     0
@


4.2
log
@Version Spin_merge taken
@
text
@d33 3
d38 5
a42 2
Title   DCB     "Joystick",0
Helpstr DCB     "Joystick",9,"$VString ($Date)",0
d148 2
a149 2
        CMP     r12, #0
        Pull    "r4, pc",EQ,^				; Looks like we didn't even get as far as claiming workspace!
d158 2
a159 1
        Pull    "r4,pc",,^
d195 3
@


4.2.2.1
log
@Modifications for Phoebe HW.
@
text
@d78 1
d84 1
a84 1
;	ORR	r1, r1, #RstFlags			; Set the reset flags too 
d87 1
d89 1
d93 1
d148 1
a148 1
 [  Codec_Type <> "AD1816"
a149 1
 ]       
d155 1
a155 1
 [ Codec_Type <> "AD1816"
d174 1
a174 1
 ]
a190 8
 [ Codec_Type = "AD1816"
        LDR     r0, =AD1816_SSBase
        LDRB    r1, [r0, #SS_JoystkCtrl]
        ORR     r1, r1, #SS_JWRP :OR: (SS_JMSK_Mask :SHL: SS_JMSK_Shift)
        STRB    r1, [r0, #SS_JoystkCtrl]                 ; set sampling off circa every 16 ms
        STRB    r1, [r0, #SS_JoystkPos]
        STRB    r1, [r0, #SS_JoystkPos + 4]    
 |       
d198 1
a198 1
 ]
@


4.1
log
@Initial revision
@
text
@d61 2
d67 3
a69 2
;        LDR     r0, =AnaDigiDetect
;        LDRB    r1,[r0]
d77 1
d80 1
a80 2
        AND     r0, r1, #&f0            		; Check for hardware first
        CMP     r0, #&10
d82 2
a83 1
        ANDS    r1, r1, #AnalogueFlag   		; Pick out the Ana/Digi flag
d88 8
d118 2
d132 2
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@a60 2
 [ IOMD_C_JoystickDetectBits <> 0

d65 2
a66 3
        LDR     r0, =AnaDigiDetect
        LDRB    r1, [r0]				; Read the port
 [ False
a73 1
 ]
d76 2
a77 1
        TST     r1, #DetectHardwareBit			; Check for hardware first
d79 1
a79 2
        ANDS    r1, r1, #DetectAnaDigiBit		; Pick out the Ana/Digi flag from hardware
        MOVNE   r1, #AnalogueFlag			; Set the (different) bit in misc_flags if analogue
a83 8
 |

        MOV     r1, #AnalogueFlag
        STRB    r1, misc_flags
        BL      init_analogue

 ]

a105 2
 [ IOMD_C_JoystickDetectBits <> 0

a117 2

 ]
@


4.1.5.1
log
@Import from SrcFiler
@
text
@a60 2
 [ IOMD_C_JoystickDetectBits <> 0

d65 2
a66 3
        LDR     r0, =AnaDigiDetect
        LDRB    r1, [r0]				; Read the port
 [ False
a73 1
 ]
d76 2
a77 1
        TST     r1, #DetectHardwareBit			; Check for hardware first
d79 1
a79 2
        ANDS    r1, r1, #DetectAnaDigiBit		; Pick out the Ana/Digi flag from hardware
        MOVNE   r1, #AnalogueFlag			; Set the (different) bit in misc_flags if analogue
a83 8
 |

        MOV     r1, #AnalogueFlag
        STRB    r1, misc_flags
        BL      init_analogue

 ]

a105 2
 [ IOMD_C_JoystickDetectBits <> 0

a117 2

 ]
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
