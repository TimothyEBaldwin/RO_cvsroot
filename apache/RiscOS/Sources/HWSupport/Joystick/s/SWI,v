head	4.6;
access;
symbols
	Joystick-0_28:4.6
	Joystick-0_27:4.5
	Joystick-0_26:4.4
	dellis_autobuild_BaseSW:4.3
	sbrodie_sedwards_16Mar2000:4.3
	Joystick-0_25:4.3
	dcotton_autobuild_BaseSW:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	troddis_Joystick-0_24:4.2.2.1
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2013.01.27.11.45.36;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	27nj5Y9dxHfJdQBw;

4.5
date	2012.03.18.09.20.13;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	80yLzy1e7jqxxlXv;

4.4
date	2001.03.16.15.56.51;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.12.13.10.59.34;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.16.30.22;	author nturton;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.36.11;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	98.09.21.09.51.28;	author troddis;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.36.11;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.27.33;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.39.52;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.48.07;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Switch out non functional digital joysticks
They were already switched out, since they're not wired up to anything, but using an obsolete switch.
Changed error blocks to use error base from Hdr:NewErrors.
Builds, but not tested.

Version 0.28. Tagged as 'Joystick-0_28'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.SWI

Title
SWInames
        DCB     "Joystick",0
        DCB     "Read",0
        DCB     "CalibrateTopRight",0
        DCB     "CalibrateBottomLeft",0
        DCB     0
        ALIGN

; --------------------------------------------------------------------------------------------------
; There are only three SWIs.  As this is unlikely to change we don't need a jump table
; and can save some space.

SWIhandler
        Push    "r1-r5,lr"

        MOV     r4, r12                         ; Just in case it's the first time...
        LDR     r12,[r12]                       ; Get workspace from private word

        CMP     r11, #3
        ADDCC   pc, pc, r11, LSL #2             ; Jumptable calculation
        BCS     %FT01
        B       AreWeAnaOrDigi                  ; Oh look! it's a jumptable after all...
        B       Calib_SWIS                      ; If it's the calibrationTL SWI, then go do it...
        B       Calib_SWIS                      ; If it's the calibrationBR SWI, then go do it...

01      ADR     r0, ErrorBlock_BadSWI           ; Uh Oh!
        addr    r4, Title
        BL      msgtrans_errorlookup
        Pull    "r1-r5,pc",VS

; ---------------------------------------------------------------------------
ErrorBlock_BadSWI
        DCD     ErrorNumber_ModuleBadSWI
        DCB     "BadSWI",0
        ALIGN

ErrorBlock_BadJoystick
        DCD     ErrorBase_Joystick + 1
        DCB     "BadJoy",0
        ALIGN

; ---------------------------------------------------------------------------
AreWeAnaOrDigi
        ; Don't upset R0 or R4!
        LDRB    r2, misc_flags
        TST     r2, #CalibrateFlag
        BNE     %FT05

      [ CanHaveDigital
        TST     r2, #AnalogueFlag               ; Check the ana/digi flag
        BEQ     Joystick_ReadDigSWICode         ; Bleugh. Digital sticks are no good for flight-sims!
      ]

        Debug   wt,"Analogue-read code"
        TST     r2, #FirstTimeFlag              ; Check the first time flag if we're analogue
        BEQ     %FT20                           ; Not first time, so don't set the ticky thing going
        BL      StartTickyRoutine               ; If set, special case...
        Debug   wt,"Ticky tick tick started"
05
        MOV     r0, #0                          ; Dummy value to return from the SWI (centred joystick)
        Pull    "r1-r5,pc"                      ; All done, let's go

Joystick_ReadAnaSWICode
        ; In:   r0 = Joystick number
20      MOV     r5, r0, LSR #8                  ; R5 contains the flag info now
        AND     r0, r0, #&FF                    ; Mask off the flags from R0

        CMP     r0, #1
        ADRHI   r0,ErrorBlock_BadJoystick       ; It's not a valid joystick ( >1 )
        BLHI    msgtrans_errorlookup
        Pull    "r1-r5,pc",VS                   ; Return if error

        ; Now sort out the fire buttons
        LDR     r3, simple_podule_address
        LDR     r4, [r3, #AnalogueJoyFire]      ; Latch and read
        LDR     r4, [r3, #AnalogueJoyFire]
        CMP     r0, #0                          ; Joystick 0??
        ANDEQ   r3, r4, #AnalogueJoy0Fire       ; YES - Pick out Joystick 0 fire buttons
        EOREQ   r3, r3, #AnalogueJoy0Fire       ; YES - Invert them
        ANDNE   r3, r4, #AnalogueJoy1Fire       ; NO  - Pick out Joystick 1 fire buttons
        EORNE   r3, r3, #AnalogueJoy1Fire       ; NO  - Invert them
        MOV     r4, r3, LSL #16                 ; Result in byte 2 of R4

        ; Do twiddling to go from raw to 16 or 8 bits scaled
        LDREQ   r1, magic_chan_one              ; Read the X channel
        LDREQ   r2, magic_chan_two              ; Read the Y channel
        LDRNE   r1, magic_chan_three            ; Read the X channel
        LDRNE   r2, magic_chan_four             ; Read the Y channel
        MOV     r3, #&ff
        ORR     r3, r3, r3, LSL #8              ; Now we have &ffff in r3
        AND     r1, r1, r3                      ; Clear the top 16 bits from r1...
        AND     r2, r2, r3                      ; ... and from R2.

        ; Now scale to cover the entire 16-bit range (0 -> &ffff)
        BL      ExpandRange                     ; NB: This routine needs the joystick number in R0!

        TST     r5, #Joystick_Read_16BitFlag :SHR: 8
        BNE     %FA30                           ; Sixteen, so jump

        ; 8 bit case
        MOV     r3, r1, LSR #8
        TST     r3, #1<<7                       ; bit 7 set?
        BICNE   r3, r3, #1<<7                   ; Clear top bit then.
        EOREQ   r3, r3, #&ff                    ; Nope, so invert all bits.
        MOV     r1, r3                          ; r1 := 8 bit X result

        MOV     r3, r2, LSR #8
        TST     r3, #1<<7                       ; bit 7 set?
        BICNE   r3, r3, #1<<7                   ; Clear top bit then.
        EOREQ   r3, r3, #&ff                    ; Nope, so invert all bits.
        MOV     r2, r3                          ; r2 := 8 bit X result

        ; Put the values into the result word if 8-bit values wanted
        MOV     r0, r4
        ORR     r0, r0, r2                      ; Put the Y in the result
        ORR     r0, r0, r1, LSL #8              ; Put the X in the result
        Pull    "r1-r5,pc"                      ; All done, let's go

30
        ; 16 bit case
        MOV     r0, r2                          ; Put the Y axis value in R0
        ORR     r0, r0, r1, LSL #16             ; Put the X axis value in R0
        MOV     r1, r4, LSR #16                 ; Put switch bits in R1, bottom byte
        ADD     sp, sp, #4                      ; Junk stacked R1
        Pull    "r2-r5,pc"                      ; End of story

      [ CanHaveDigital
Joystick_ReadDigSWICode
        ; In:   r0 = Joystick number - can't get 16-bit values from digital
        Debug   wt,"Digital-read code"
        LDR     r1, =DigitalJoystickAddress
        LDR     r2, [r1]                        ; Latch in the current state
        LDR     r2, [r1]                        ; Read it (top 16 bits are junk)
        Debug   wt,"Register contents are",R2
        CMP     r0, #1                          ; Make sure joystick number is 0 or 1
        MOVEQ   r2, r2, LSR #8                  ; Push the joy1 bits into the low byte
        AND     r2, r2, #&ff                    ; Assume we mean joy 0 then
        CMPNE   r0, #0                          ; But did we?
        ADRNE   r0, ErrorBlock_BadJoystick      ; Nope, so error & quit
        BLNE    msgtrans_errorlookup
        Pull    "r1-r5,pc",VS

        ;At this point, we have the joystick info in the low byte of r2
        MOV     r0, #0                          ; Clear R0!
        TST     r2, #DigitalUpBit               ; Put up/down state in byte 0
        ORREQ   r0, r0, #UpCode
        TST     r2, #DigitalDownBit
        ORREQ   r0, r0, #DownCode
        TST     r2, #DigitalLeftBit             ; Put left/right state in byte 1
        ORREQ   r0, r0, #LeftCode
        TST     r2, #DigitalRightBit
        ORREQ   r0, r0, #RightCode
        TST     r2, #DigitalFireBit             ; And finally the fire bit (in byte 2)
        ORREQ   r0, r0, #FireCode
        Debug   wt,"Done calculatin'"
        Pull    "r1-r5,pc"                      ; All done, let's go
      ]

; ---------------------------------------------------------------------------
StartTickyRoutine
        Push    "lr"
        LDRB    r1, misc_flags
        Debug   wt,"Starting Ticky routine: Misc flags are ",r1
        BIC     r1, r1, #FirstTimeFlag          ; Clear the first-time flag
        STRB    r1, misc_flags
        MOV     r0, #EventV
        addr    r1, TickerRoutine
        MOV     r2, r4                          ; Puts the private word in R2
        SWI     XOS_Claim
        MOV     r0, #OsByte_EnableEvent
        MOV     r1, #Event_VSync
        SWI     XOS_Byte
        CLRV
        Pull    "pc"


; ---------------------------------------------------------------------------
ExpandRange
        ; On entry, R0=joystick number, R1=Xval, R2=Yval, R3=&ffff, R4=fires, R5=16-bit flag
        ; On exit,  R0=joystick number, R1=scaled Xval, R2=scaled Yval, R3=&ffff, R4=fires, R5=16-bit flag
        Push    "r0,r3-r6,lr"
        Debug   wt,"Expanding range!"
        CMP     r0, #0                          ;Joystick 0 or 1?
        LDREQ   r4, range_chan_one
        LDRNE   r4, range_chan_three
        Debug   wt,"X was ",r1
        Debug   wt,"Range is ",r4
        AND     r5, r4, r3                      ;R5=min calib
        SUBS    r6, r1, r5                      ;R6=value-min
        MOVMI   r6, #0                          ; Don't allow R6 < 0
        RSB     r6, r6, r6, LSL #16             ;R6=((value-min)<<16) - (value-min)
        MOV     r4, r4, LSR #16                 ;R4=calib range
        DivRem  r1, r6, r4, r5                  ;R1=R6/calib range. R5 is corrupted
        CMP     r1, r3
        MOVPL   r1, r3                          ;Impose an FFFF max
        CMP     r1, #0
        MOVMI   r1, #0                          ;and a 0 min

        Debug   wt,"X is ",r1

        ; Now do the Y-values
        CMP     r0, #0                          ;Joystick 0 or 1?
        LDREQ   r4, range_chan_two
        LDRNE   r4, range_chan_four
        AND     r5, r4, r3                      ;R5=min calib
        SUBS    r6, r2, r5                      ;R6=value-min
        MOVMI   r6, #0                          ; Don't allow R6 < 0
        RSB     r6, r6, r6, LSL #16             ;R6=((value-min)<<16) - (value-min)
        MOV     r4, r4, LSR #16                 ;R4=calib range
        DivRem  r2, r6, r4, r5                  ;R2=R6/calib range. R5 is corrupted
        CMP     r2, r3
        MOVPL   r2, r3                          ;Impose an FFFF max
        CMP     r2, #0
        MOVMI   r2, #0                          ;and a 0 min


        ; Ranges done, now invert R1,R2 if necessary
        LDRB    r4, range_polarity
        CMP     r0, #0
        BNE     %FT40

        TST     r4, #polarity_chan_one          ;ie X
        MVNNE   r1, r1                          ;invert r1 if so
        ANDNE   r1, r1, r3
        TST     r4, #polarity_chan_two          ;ie Y
        MVNNE   r2, r2                          ;invert r2 if so
        ANDNE   r2, r2, r3
        Pull    "r0,r3-r6,pc"

40      TST     r4, #polarity_chan_three        ;ie X
        MVNNE   r1, r1                          ;invert r1 if so
        ANDNE   r1, r1, r3
        TST     r4, #polarity_chan_four         ;ie Y
        MVNNE   r2, r2                          ;invert r2 if so
        ANDNE   r2, r2, r3
        Pull    "r0,r3-r6,pc"

; ---------------------------------------------------------------------------
Calib_SWIS
        ; R2 to R5 and LR are pushed, as is R1 (separately)
        ; Need optional checks here to determine axis polarity.
        LDRB    r2, misc_flags
        TST     r2, #FirstTimeFlag              ; Check the first time flag if we're analogue
        BEQ     %FT48                           ; Not first time, so don't set the ticky thing going
        BL      StartTickyRoutine               ; If set, special case...
        Debug   wt,"Ticky tick tick started"
        MOV     r0, #OsByte_Wait
        SWI     XOS_Byte                        ; Wait for a VSync so we get some sensible values...
        SWIVC   XOS_Byte                        ; Wait for a VSync so we get some sensible values...
        SWIVC   XOS_Byte                        ; Wait for a VSync so we get some sensible values...

48      MOV     r1, #&ff
        ORR     r1, r1, r1, LSL #8              ;R1 is &ffff
        LDRB    r2, misc_flags
        TST     r2, #CalibrateFlag
        BNE     %FT50                           ;This is the second calibration!

        ORR     r2, r2, #CalibrateFlag          ;I'm 'aving a CALIBRATE!
        STRB    r2, misc_flags
        LDR     r2, magic_chan_one              ;Take snaphots
        AND     r2, r2, r1
        STR     r2, range_chan_one
        LDR     r2, magic_chan_two              ;Take snaphots
        AND     r2, r2, r1
        STR     r2, range_chan_two
        LDR     r2, magic_chan_three            ;Take snaphots
        AND     r2, r2, r1
        STR     r2, range_chan_three
        LDR     r2, magic_chan_four             ;Take snaphots
        AND     r2, r2, r1
        STR     r2, range_chan_four

        Pull    "r1-r5,pc"


        ; Right, munge stuff to get range-min pairs & polarities
50      BIC     r2, r2, #CalibrateFlag          ;Clear the calibrate flag
        STRB    r2, misc_flags

        MOV     r2, #0                          ;Clear R2 ready to accept polarity flags
        LDR     r3, magic_chan_one
        AND     r3, r3, r1
        LDR     r4, range_chan_one              ;Previous reading
        MOV     r5, #polarity_chan_one
        BL      DoRanging
        STR     r3, range_chan_one

        LDR     r3, magic_chan_two
        AND     r3, r3, r1
        LDR     r4, range_chan_two              ;Previous reading
        MOV     r5, #polarity_chan_two
        BL      DoRanging
        STR     r3, range_chan_two

        LDR     r3, magic_chan_three
        AND     r3, r3, r1
        LDR     r4, range_chan_three            ;Previous reading
        MOV     r5, #polarity_chan_three
        BL      DoRanging
        STR     r3, range_chan_three

        LDR     r3, magic_chan_four
        AND     r3, r3, r1
        LDR     r4, range_chan_four             ;Previous reading
        MOV     r5, #polarity_chan_four
        BL      DoRanging
        STR     r3, range_chan_four

        Debug   wt,"Storing r2 as ",r2
        STRB    r2, range_polarity

        Pull    "r1-r5,pc"



DoRanging
        CMP     r3, r4                          ;Sort out which way around they are to get the 'range'
        BPL     %FT60                           ;first call was the smaller X1

        SUB     r4, r4, r3                      ;R4 = range now
        SUB     r4, r4, r4, LSR #12             ;Decrease the range slightly at CWhyte's request :-P
        CMP     r4, #0
        MOVEQ   r4, #1
        ORR     r3, r3, r4, LSL #16             ;Combine the min & range in r3
        CMP     r11, #1                         ;Is this 2nd call the TR?
        ORREQ   r2, r2, r5                      ;Nope, so we need reverse polarity
        Debug   wt,"After a doranging, r2 is ",r2
        MOV     pc, lr

60      SUB     r3, r3, r4                      ;R3 = range now
        SUB     r3, r3, r3, LSR #12             ;Decrease the range slightly at CWhyte's request :-P
        CMP     r3, #0
        MOVEQ   r3, #1
        ORR     r4, r4, r3, LSL #16             ;Combine the min & range in r4
        CMP     r11, #1                         ;Is this 2nd call the TR?
        ORRNE   r2, r2, r5                      ;Yup, so we need reverse polarity
        Debug   wt,"After a doranging.., r2 is ",r2
        MOV     r3, r4
        MOV     pc, lr

        LNK     Service.s
@


4.5
log
@Overhauled to work in a 32 bit HALised world.
Though this module had been 32 bitted in 2001, a mistake in its header meant that the flags word was in the wrong place and hence rejected on a 32 bit system. This masked the fact that it was doing much peeking and poking of 0x0320xxxx addresses.
Reworked to use system API to find out where stuff is and peek and poke indirectly.
Added documentation on how the hardware should be wired up (while it's unlikely that hardware will be made, emulator authors can use this info to connect to PC joysticks).
hdr.Joystick:
  SWI flags defined for callers
Front.s:
  Change IO registers to be IOMD_Base relative
  Remove some unused definitions, include some include files
Modhead.s:
  Put the flags word at the right offset in the header
  Rewrite detection logic, now it's check for 7500/7500FE version
  of IOMD, then look for a podule with simple id of "Analogue joystick"
  in the NIC slot, then read its address
  Retabbed
SWI.s:
  Return the fire buttons in the right bits for joystick #1
  Retab and use OsByte header definition
Ticky.s:
  Access via addresses read in the setup step
Service.s:
  Retab and use OsByte header definition

Version 0.27. Tagged as 'Joystick-0_27'
@
text
@d55 1
a55 1
        DCD     &43f41
d66 1
a66 1
      [ IOMD_C_JoystickDetectBits <> 0
d144 1
a144 2
      [ IOMD_C_JoystickDetectBits <> 0

@


4.4
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.26. Tagged as 'Joystick-0_26'
@
text
@d21 2
a22 2
	DCB	"CalibrateTopRight",0
	DCB	"CalibrateBottomLeft",0
d24 1
a24 1
                ALIGN
a30 1
	ROUT
a31 2
	CMP	r11, #3
	BGT	%FT01
a34 5
	ADD	pc, pc, r11, LSL #2		; Jumptable calculation
	MOV	r0, r0				;    dummy instruction
	B	AreWeAnaOrDigi			; Oh look! it's a jumptable after all...
	B       Calib_SWIS                      ; If it's the calibrationTL SWI, then go do it...
	B	Calib_SWIS                      ; If it's the calibrationBR SWI, then go do it...
d36 9
a44 2
01      ADR     r0,ErrorBlock_BadSWI		; Uh Oh!
	addr	r4, Title
d48 1
a48 1
;----------------------------------------------------------------------------------------
d50 1
a50 1
        DCD     &112
d52 1
a52 1
                ALIGN
d57 1
a57 2
                ALIGN

d59 1
d61 1
a61 1
        ;Don't upset R0 or R4!
d63 2
a64 4
	TST	r2, #CalibrateFlag
	BNE	%FT05

 [ IOMD_C_JoystickDetectBits <> 0
d66 1
d69 1
a69 2

 ]
d75 3
a77 2
	Debug	wt,"Ticky tick tick started"
05      MOV     r0, #0                          ; Dummy value to return from the SWI (centred joystick)
a79 2
; Drop through to...

d81 1
a81 1
; In:   r0 = Joystick number
d84 4
a87 9
        ADR     r1, magic_chan_one
        ADR     r2, magic_chan_two
        LDR     r3, =AnalogueJoyFire
        CMP     r0, #1                          ; Did we want Joystick 1 though?
        ADREQ   r1, magic_chan_three
        ADREQ   r2, magic_chan_four
        CMPNE   r0, #0                          ; No, but did we really want Joystick 0?
        ADRNE   r0,ErrorBlock_BadJoystick       ; Nope, so it's not a valid joystick ( >1 )
        BLNE    msgtrans_errorlookup
d90 4
a93 4
        ;Now sort out the fire buttons, into R4
        LDR     r4, [r3]                        ; Latch &
        LDR     r4, [r3]                        ; load
	MOV	r3, #0
d96 1
a96 2
	EOREQ	r3, r3, #AnalogueJoy0Fire	; YES - Invert them
        MOVEQ   r4, r3, LSL #16                 ; YES - Put in byte 2 of R4
d98 2
a99 2
	EORNE	r3, r3, #AnalogueJoy1Fire	; NO  - Invert them
        MOVNE   r4, r3, LSL #8                  ; NO  - Put in byte 2 of R4
d101 28
a128 24
        ;Do twiddling to go from raw to 16 or 8 bits scaled
        LDR     r1, [r1]                        ; Read the X channel
        LDR     r2, [r2]                        ; Read the Y channel
	MOV	r3, #&ff
	ORR	r3, r3, r3, LSL #8		; Now we have &ffff in r3
	AND	r1, r1, r3			; Clear the top 16 bits from r1...
	AND	r2, r2, r3			; ... and from R2.

	;Now scale to cover the entire 16-bit range (0 -> &ffff)
	BL	ExpandRange			; NB: This routine needs the joystick number in R0!

        TST     r5, #SixteenBitFlag             ; Do we want 16 or 8 bit results?
	BNE	%FA30				; Sixteen, so jump

        MOV     r3, r1, LSR #8                  ;  If 8-bits,
	TST	r3, #1<<7			;bit 7 set?
	BICNE   r3, r3, #1<<7                   ;Clear top bit then.
        EOREQ   r3, r3, #&ff                    ;Nope, so invert all bits.
        MOV     r1, r3                          ;  this bit
        MOV     r3, r2, LSR #8                  ;  twiddling
	TST	r3, #1<<7			;bit 7 set?
	BICNE   r3, r3, #1<<7                   ;Clear top bit then.
        EOREQ   r3, r3, #&ff                    ;Nope, so invert all bits.
        MOV     r2, r3                          ;  .
d130 2
a131 2
        ;Put the values into the result word if 8-bit values wanted
	MOV	r0, r4
d133 1
a133 1
        ORR     r0, r0, r1, LSL #8             ; Put the X in the result
d136 2
a137 2
        ;Put the values into the result word, unsigned
30      Pull    "r5"                            ; Pull r1 into r5 so we can fill it instead...
d141 1
d144 1
a144 1
 [ IOMD_C_JoystickDetectBits <> 0
a145 1
;----------------------------------------------------------------------------------------
d147 1
a147 1
; In:   r0 = Joystick number - can't get 16-bit values from digital
d175 1
d177 1
a177 3
 ]

;----------------------------------------------------------------------------------------
d179 1
a179 1
	Push	"lr"
d181 1
a181 1
	Debug	wt,"Starting Ticky routine: Misc flags are ",r1
d184 2
a185 2
        MOV     r0, #&10                        ; We want the event vector
	addr	r1, TickerRoutine
d188 2
a189 2
        MOV     r0, #14                         ; OS_Byte 14
        MOV     r1, #4                          ; Claim VSync event
d192 1
a192 1
	Pull	"pc"
d195 1
a195 1
;----------------------------------------------------------------------------------------
d197 63
a259 62
	;On entry, R0=joystick number, R1=Xval, R2=Yval, R3=&ffff, R4=fires, R5=16-bit flag
	;On exit,  R0=joystick number, R1=scaled Xval, R2=scaled Yval, R3=&ffff, R4=fires, R5=16-bit flag
	Push	"r0,r3-r6,lr"
	Debug	wt,"Expanding range!"
	CMP	r0, #0				;Joystick 0 or 1?
	LDREQ	r4, range_chan_one
	LDRNE	r4, range_chan_three
	Debug 	wt,"X was ",r1
	Debug	wt,"Range is ",r4
	AND	r5, r4, r3			;R5=min calib
	SUBS	r6, r1, r5			;R6=value-min
	MOVMI	r6, #0				; Don't allow R6 < 0
	RSB	r6, r6, r6, LSL #16		;R6=((value-min)<<16) - (value-min)
	MOV	r4, r4, LSR #16			;R4=calib range
	DivRem	r1, r6, r4, r5			;R1=R6/calib range. R5 is corrupted
	CMP	r1, r3
	MOVPL	r1, r3				;Impose an FFFF max
	CMP	r1, #0
	MOVMI	r1, #0				;and a 0 min

        Debug	wt,"X is ",r1

	;Now do the Y-values
	CMP	r0, #0				;Joystick 0 or 1?
	LDREQ	r4, range_chan_two
	LDRNE	r4, range_chan_four
	AND	r5, r4, r3			;R5=min calib
	SUBS	r6, r2, r5			;R6=value-min
	MOVMI	r6, #0				; Don't allow R6 < 0
	RSB	r6, r6, r6, LSL #16		;R6=((value-min)<<16) - (value-min)
	MOV	r4, r4, LSR #16			;R4=calib range
	DivRem	r2, r6, r4, r5			;R2=R6/calib range. R5 is corrupted
	CMP	r2, r3
	MOVPL	r2, r3				;Impose an FFFF max
	CMP	r2, #0
	MOVMI	r2, #0				;and a 0 min


	;Ranges done, now invert R1,R2 if necessary
	LDRB	r4, range_polarity
	CMP	r0, #0
	BNE	%FT40

	TST	r4, #polarity_chan_one		;ie X
	MVNNE	r1, r1				;invert r1 if so
	ANDNE	r1, r1, r3
	TST	r4, #polarity_chan_two		;ie Y
	MVNNE	r2, r2				;invert r2 if so
	ANDNE	r2, r2, r3
	Pull	"r0,r3-r6,pc"

40	TST	r4, #polarity_chan_three	;ie X
	MVNNE	r1, r1				;invert r1 if so
	ANDNE	r1, r1, r3
	TST	r4, #polarity_chan_four		;ie Y
	MVNNE	r2, r2				;invert r2 if so
	ANDNE	r2, r2, r3
	Pull	"r0,r3-r6,pc"

;----------------------------------------------------------------------------------------
Calib_SWIS       ;R2 to R5 and LR are pushed, as is R1 (separately)
	;Need optional checks here to determine axis polarity.
d264 26
a289 26
	Debug	wt,"Ticky tick tick started"
	MOV	r0, #19
	SWI	XOS_Byte				;Wait for a VSync so we get some sensible values...
	SWI	XOS_Byte				;Wait for a VSync so we get some sensible values...
	SWI	XOS_Byte				;Wait for a VSync so we get some sensible values...

48	MOV	r1, #&ff
	ORR	r1, r1, r1, LSL #8		;R1 is &ffff
	LDRB	r2, misc_flags
	TST	r2, #CalibrateFlag
	BNE	%FT50				;This is the second calibration!

	ORR	r2, r2, #CalibrateFlag		;I'm 'aving a CALIBRATE!
	STRB	r2, misc_flags
	LDR	r2, magic_chan_one		;Take snaphots
	AND	r2, r2, r1
	STR	r2, range_chan_one
	LDR	r2, magic_chan_two		;Take snaphots
	AND	r2, r2, r1
	STR	r2, range_chan_two
	LDR	r2, magic_chan_three		;Take snaphots
	AND	r2, r2, r1
	STR	r2, range_chan_three
	LDR	r2, magic_chan_four		;Take snaphots
	AND	r2, r2, r1
	STR	r2, range_chan_four
d294 32
a325 32
	;Right, munge stuff to get range-min pairs & polarities
50	BIC	r2, r2, #CalibrateFlag		;Clear the calibrate flag
	STRB	r2, misc_flags

	MOV	r2, #0				;Clear R2 ready to accept polarity flags
	LDR	r3, magic_chan_one
	AND	r3, r3, r1
        LDR	r4, range_chan_one		;Previous reading
	MOV	r5, #polarity_chan_one
	BL	DoRanging
	STR	r3, range_chan_one

	LDR	r3, magic_chan_two
	AND	r3, r3, r1
        LDR	r4, range_chan_two		;Previous reading
	MOV	r5, #polarity_chan_two
	BL	DoRanging
	STR	r3, range_chan_two

	LDR	r3, magic_chan_three
	AND	r3, r3, r1
        LDR	r4, range_chan_three		;Previous reading
	MOV	r5, #polarity_chan_three
	BL	DoRanging
	STR	r3, range_chan_three

	LDR	r3, magic_chan_four
	AND	r3, r3, r1
        LDR	r4, range_chan_four		;Previous reading
	MOV	r5, #polarity_chan_four
	BL	DoRanging
	STR	r3, range_chan_four
d327 2
a328 2
	Debug	wt,"Storing r2 as ",r2
	STRB	r2, range_polarity
d335 2
a336 2
	CMP	r3, r4				;Sort out which way around they are to get the 'range'
	BPL	%FT60				;first call was the smaller X1
d338 4
a341 4
  	SUB	r4, r4, r3			;R4 = range now
	SUB	r4, r4, r4, LSR #12		;Decrease the range slightly at CWhyte's request :-P
	CMP	r4, #0
	MOVEQ	r4, #1
d343 9
a351 9
	CMP	r11, #1				;Is this 2nd call the TR?
	ORREQ	r2, r2, r5			;Nope, so we need reverse polarity
	Debug	wt,"After a doranging, r2 is ",r2
	MOV	pc, lr

60	SUB	r3, r3, r4			;R3 = range now
	SUB	r3, r3, r3, LSR #12		;Decrease the range slightly at CWhyte's request :-P
	CMP	r3, #0
	MOVEQ	r3, #1
d353 5
a357 5
	CMP	r11, #1				;Is this 2nd call the TR?
	ORRNE	r2, r2, r5			;Yup, so we need reverse polarity
	Debug	wt,"After a doranging.., r2 is ",r2
	MOV	r3, r4
	MOV 	pc, lr
d359 1
a359 1
        LNK     s.Service
@


4.3
log
@  32-bit compatibility.
  Fixes to SWI calls.
  Moved to srccommit verison number maintenance.
Detail:
  No longer calls non-X bit SWIs in SWI handler.
  Oddity in stack usage tidied up.
Admin:
  Tested Phoebe & 32 machine builds.

Version 0.25. Tagged as 'Joystick-0_25'
@
text
@d198 2
a199 1
	Pull	"pc",,^
@


4.2
log
@Version Spin_merge taken
@
text
@d17 1
d32 1
a32 2
        Push    "r2-r5,lr"
        Push    "r1"
d47 1
a47 2
        Pull    "r1",VS
        Pull    "r2-r5,pc",VS
d80 1
a80 2
        Pull    "r1"
        Pull    "r2-r5,pc"                      ; All done, let's go
d97 1
a97 2
        Pull    "r1",VS
        Pull    "r2-r5,pc",VS                   ; Return if error
d140 1
a140 2
        Pull    "r1"
        Pull    "r2-r5,pc"                      ; All done, let's go
d165 1
a165 2
        Pull    "r1",VS
        Pull    "r2-r5,pc",VS
d180 1
a180 2
        Pull    "r1"
        Pull    "r2-r5,pc"                      ; All done, let's go
d271 3
a273 3
	SWI	OS_Byte				;Wait for a VSync so we get some sensible values...
	SWI	OS_Byte				;Wait for a VSync so we get some sensible values...
	SWI	OS_Byte				;Wait for a VSync so we get some sensible values...
d296 1
a296 2
        Pull    "r1"
        Pull    "r2-r5,pc"
d335 1
a335 2
        Pull    "r1"
        Pull    "r2-r5,pc"
@


4.2.2.1
log
@Modifications for Phoebe HW.
@
text
@d31 2
a32 1
        Push    "r1-r6,lr"
a39 3
 [ Codec_Type = "AD1816"
        B       Read
 |
a40 1
 ]
d47 2
a48 1
        Pull    "r1-r6,pc",VS
a60 48
 [ Codec_Type = "AD1816"
Read
        MOV     r5, r0, LSR #8                  ; R5 contains the flag info now
        AND     r0, r0, #&FF                    ; Mask off the flags from R0
        CMP     r0, #1                          ; Test against 1
        ADRHI   r0,ErrorBlock_BadJoystick       ; Too high
        BLHI    msgtrans_errorlookup
        Pull    "r1-r6,pc",VS                   ; Return if error

        LDR     r6, =AD1816_SSBase
        LDRB    r4, [r6, #SS_RawJoystk]
        ANDNE   r3, r4, #AnalogueJoy0Fire       ; Pick out Joystick 0 fire buttons
	EORNE	r3, r3, #AnalogueJoy0Fire	; Invert them
        MOVNE   r4, r3, LSL #16 - AnalogueJoy0FireShift ; Put in byte 2 of R4
        ANDEQ   r3, r4, #AnalogueJoy1Fire       ; Pick out Joystick 1 fire buttons
	EOREQ	r3, r3, #AnalogueJoy1Fire	; Invert them
        MOVEQ   r4, r3, LSL #16 - AnalogueJoy1FireShift  ; Put in byte 2 of R4
10
        LDRB    r3, [r6, #SS_JoystkCtrl]
 [ {FALSE}
        TST     r3, r3, #SS_JRDY
        BEQ     %BT10
        CMP     r0, #1
 ]
        BIC     r3, r3, #SS_JSEL_Mask
; figure out which joystick was wanted (above)
; read in relevant two channels
        ORRNE   r3, r3, #SS_JSEL_AX             ; Get x axis
        ORREQ   r3, r3, #SS_JSEL_BX             ;

        STRB    r3, [r6, #SS_JoystkCtrl]

        LDRB    r1, [r6, #SS_JoystkPos]        ; Get 16-bit
        LDRB    r2, [r6, #SS_JoystkPos + 4]    ; x position
        ORR     r1, r1, r2, LSL # 8            ; into r1

        BIC     r3, r3, #SS_JSEL_Mask

        ORRNE   r3, r3, #SS_JSEL_AY             ; Get y axis
        ORREQ   r3, r3, #SS_JSEL_BY             ;

        STRB    r3, [r6, #SS_JoystkCtrl]

        LDRB    r2, [r6, #SS_JoystkPos]        ; Get 16-bit
        LDRB    r3, [r6, #SS_JoystkPos + 4]    ; y position
        ORR     r2, r2, r3, LSL # 8            ; into r2

 |
d81 2
a82 1
        Pull    "r1-r6,pc"                      ; All done, let's go
d99 2
a100 1
        Pull    "r1-r6,pc",VS                   ; Return if error
a115 1
 
d121 1
a121 5
 ]
 [ Codec_Type = "AD1816"
	MOV	r3, #&ff
	ORR	r3, r3, r3, LSL #8		; Now we have &ffff in r3
 ]
d124 1
a127 1
; Bug fix applied to the following - TGR
d129 8
a136 6
        SUB     r3, r3, #128                    ;   range -128 to 127
        AND     r3, r3, #&ff                    ;   8-bit signed
        MOV     r1, r3                          ;  
        MOV     r3, r2, LSR #8                  ;  
        SUB     r3, r3, #128
        AND     r3, r3, #&ff
d143 2
a144 1
        Pull    "r1-r6,pc"                      ; All done, let's go
d151 1
a151 1
        Pull    "r2-r6,pc"                      ; End of story
d169 2
a170 1
        Pull    "r1-r6,pc",VS
d185 2
a186 1
        Pull    "r1-r6,pc"                      ; All done, let's go
a188 1
 [ Codec_Type <> "AD1816"
d205 1
a205 1
 ]
a207 1

a234 2
	Debug 	tgr,"Y was ",r2
	Debug	tgr,"Range is ",r4
a245 2
        Debug	tgr,"Y is ",r2

a270 1
 [ Codec_Type <> "AD1816"
d280 2
a281 6
 |
        LDR     r6, =AD1816_SSBase
 ]
48
 [ Codec_Type <> "AD1816"
	MOV	r1, #&ff
a282 1
 ]
a288 91
 [ Codec_Type = "AD1816"
        LDRB    r3, [r6, #SS_JoystkCtrl]
 [ {FALSE}
        TST     r3, r3, SS_JRDY
        BEQ     %BT10
        CMP     r0, #1
 ]
        BIC     r3, r3, #SS_JSEL_Mask
        ORR     r3, r3, #SS_JSEL_AX             ; Get x axis
        STRB    r3, [r6, #SS_JoystkCtrl]
        LDRB    r4, [r6, #SS_JoystkPos]        ; Get
        LDRB    r2, [r6, #SS_JoystkPos + 4]    ;     16-bit
        ORR     r2, r4, r2, LSL # 8            ;            position
	STR	r2, range_chan_one
        BIC     r3, r3, #SS_JSEL_Mask
        ORR     r3, r3, #SS_JSEL_AY             ; Get y axis
        STRB    r3, [r6, #SS_JoystkCtrl]
        LDRB    r4, [r6, #SS_JoystkPos]        ; Get
        LDRB    r2, [r6, #SS_JoystkPos + 4]    ;     16-bit
        ORR     r2, r4, r2, LSL # 8            ;            position
	STR	r2, range_chan_two
        BIC     r3, r3, #SS_JSEL_Mask
        ORR     r3, r3, #SS_JSEL_BX             ; Get x axis
        STRB    r3, [r6, #SS_JoystkCtrl]
        LDRB    r4, [r6, #SS_JoystkPos]        ; Get
        LDRB    r2, [r6, #SS_JoystkPos + 4]    ;     16-bit
        ORR     r2, r4, r2, LSL # 8            ;            position
	STR	r2, range_chan_three
        BIC     r3, r3, #SS_JSEL_Mask
        ORR     r3, r3, #SS_JSEL_BY             ; Get y axis
        STRB    r3, [r6, #SS_JoystkCtrl]
        LDRB    r4, [r6, #SS_JoystkPos]        ; Get
        LDRB    r2, [r6, #SS_JoystkPos + 4]    ;     16-bit
        ORR     r2, r4, r2, LSL # 8            ;            position
	STR	r2, range_chan_four

	Pull    "r1-r6, pc"
50	BIC	r2, r2, #CalibrateFlag		;Clear the calibrate flag
	STRB	r2, misc_flags
        LDRB    r1, [r6, #SS_JoystkCtrl]
 [ {FALSE}
        TST     r1, r1, SS_JRDY
        BEQ     %BT10
        CMP     r0, #1
 ]
        MOV     r2, #0				;Clear R2 ready to accept polarity flags
        BIC     r1, r1, #SS_JSEL_Mask
        ORR     r1, r1, #SS_JSEL_AX            ; Get x axis
        STRB    r1, [r6, #SS_JoystkCtrl]
        LDRB    r4, [r6, #SS_JoystkPos]        ; Get
        LDRB    r3, [r6, #SS_JoystkPos + 4]    ;     16-bit
        ORR     r3, r4, r3, LSL # 8            ;            position
        LDR     r4, range_chan_one	       ;Previous reading
	MOV	r5, #polarity_chan_one
	BL	DoRanging
	STR	r3, range_chan_one

        BIC     r1, r1, #SS_JSEL_Mask
        ORR     r1, r1, #SS_JSEL_AY            ; Get y axis
        STRB    r1, [r6, #SS_JoystkCtrl]
        LDRB    r4, [r6, #SS_JoystkPos]        ; Get
        LDRB    r3, [r6, #SS_JoystkPos + 4]    ;     16-bit
        ORR     r3, r4, r3, LSL # 8            ;            position
        LDR     r4, range_chan_two	       ;Previous reading
	MOV	r5, #polarity_chan_two
	BL	DoRanging
	STR	r3, range_chan_two

        BIC     r1, r1, #SS_JSEL_Mask
        ORR     r1, r1, #SS_JSEL_BX            ; Get x axis
        STRB    r1, [r6, #SS_JoystkCtrl]
        LDRB    r4, [r6, #SS_JoystkPos]        ; Get
        LDRB    r3, [r6, #SS_JoystkPos + 4]    ;     16-bit
        ORR     r3, r4, r3, LSL # 8            ;            position
        LDR     r4, range_chan_three	       ;Previous reading
	MOV	r5, #polarity_chan_three
	BL	DoRanging
	STR	r3, range_chan_three

        BIC     r1, r1, #SS_JSEL_Mask
        ORR     r1, r1, #SS_JSEL_BY             ; Get y axis
        STRB    r1, [r6, #SS_JoystkCtrl]
        LDRB    r4, [r6, #SS_JoystkPos]        ; Get
        LDRB    r3, [r6, #SS_JoystkPos + 4]    ;     16-bit
        ORR     r3, r4, r3, LSL # 8            ;            position
        LDR     r4, range_chan_four	       ;Previous reading
	MOV	r5, #polarity_chan_four
	BL	DoRanging
	STR	r3, range_chan_four

 |
d302 2
a303 1
        Pull    "r1-r6,pc"
d338 1
a338 1
 ]
d342 2
a343 1
        Pull    "r1-r6,pc"
d349 1
a349 1
	BPL	%FT60				;first call was the smaller 
d352 1
a352 1
;	SUB	r4, r4, r4, LSR #12		;Decrease the range slightly at CWhyte's request :-P
a358 1
        Debug   tgr,"range is ",r3
d362 1
a362 1
;	SUB	r3, r3, r3, LSR #12		;Decrease the range slightly at CWhyte's request :-P
a369 1
        Debug   tgr,"range is ",r3
@


4.1
log
@Initial revision
@
text
@d68 2
d73 2
d153 2
d188 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@a67 2
 [ IOMD_C_JoystickDetectBits <> 0

a70 2
 ]

a148 2
 [ IOMD_C_JoystickDetectBits <> 0

a181 1
 ]
@


4.1.5.1
log
@Import from SrcFiler
@
text
@a67 2
 [ IOMD_C_JoystickDetectBits <> 0

a70 2
 ]

a148 2
 [ IOMD_C_JoystickDetectBits <> 0

a181 1
 ]
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
