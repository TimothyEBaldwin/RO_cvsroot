head	4.5;
access;
symbols
	PS2Driver-0_39:4.5
	PS2Driver-0_38:4.4
	PS2Driver-0_37:4.4
	PS2Driver-0_36:4.4
	PS2Driver-0_35:4.4
	PS2Driver-0_34:4.4
	PS2Driver-0_33:4.3
	PS2Driver-0_32:4.3
	PS2Driver-0_31:4.2
	PS2Driver-0_30:4.2
	PS2Driver-0_29:4.2
	PS2Driver-0_28:4.1
	Ursula_merge:4.1
	nturton_PS2Driver-0_27:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	PS2Driver-0_27:4.1
	PS2Driver-0_26:4.1
	nicke_PS2Driver_0_25:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	bavison_PS2Driver-0_20:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	PS2Driver-0_25-1_1_2_2:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Ursula:4.1.0.6
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	Daytona_bp:4.1
	Daytona:4.1.0.4
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2012.03.02.23.09.45;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	yTfY0p2OpEu6EmVv;

4.4
date	2001.03.16.16.01.07;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	2000.10.06.10.14.00;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	2000.02.14.12.01.49;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.37.09;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.37.09;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.38.52;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.00.25;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.53.10;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Changed KEYV_thing to KeyV_thing to match Hdr:Keyboard.

Version 0.39. Tagged as 'PS2Driver-0_39'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Macros

;-----------------------------------------------------------------------------
; IRQOff  $reg
;
;       Turn IRQs off and save the PSR in $reg.
;
        MACRO
$label  IRQOff  $reg, $reg2

$label  MRS     $reg, CPSR
        ORR     $reg2, $reg, #I32_bit
        MSR     CPSR_c, $reg2
        MEND

;-----------------------------------------------------------------------------
; SetPSR  $reg
;
;       Set the PSR from bits in $reg (normally saved by IRQOff or FIQOff).
;
        MACRO
$label  SetPSR  $reg

$label  MSR     CPSR_c, $reg
        MEND

;-----------------------------------------------------------------------------
; SVCMode $reg
;
;       Set SVC mode with IRQs disabled saving PSR in $reg.
;       Assumes in IRQ/FIQ/SVC mode to start with.
;
        MACRO
$label  SVCMode $reg, $reg2

$label  MRS     $reg, CPSR
        ORR     $reg2, $reg, #I32_bit+SVC_mode  ; 26 or 32 as appropriate
        MSR     CPSR_c, $reg2
        MEND

;-----------------------------------------------------------------------------
; IOMDBase $reg
;
;       Set $reg to IOMD base address.
;
        MACRO
$label  IOMDBase $reg,$cc
$label  LDR$cc  $reg, MyIOMDBase
        MEND

;-----------------------------------------------------------------------------
; KbdEnable
;
;       Enable keyboard state machine.
;
        MACRO
$label  KbdEnable $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        MOV$cc   $rb, #IOMD_KBDCR_Enable
        STR$cc.B $rb, [$ra, #IOMD_KBDCR]
        MEND

;-----------------------------------------------------------------------------
; KbdDisable
;
;       Disable keyboard state machine.
;
        MACRO
$label  KbdDisable $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        MOV$cc   $rb, #0
        STR$cc.B $rb, [$ra, #IOMD_KBDCR]
        MEND

;-----------------------------------------------------------------------------
; KbdRxOffTxOff
;
;       Disable RX irqs, disable TX irqs.
;
        MACRO
$label  KbdRxOffTxOff $ra,$rb,$rc,$cc

$label  IOMDBase $ra,$cc
        MRS$cc   $rc, CPSR                      ; must disable FIQs when
        ORR$cc   $rb, $rc, #I32_bit+F32_bit     ; manipulating IRQA+B regs
        MSR$cc   CPSR_c, $rb
        LDR$cc.B $rb, [$ra, #IOCIRQMSKB]
        BIC$cc   $rb, $rb, #serial_Rx_bit + serial_Tx_bit
        STR$cc.B $rb, [$ra, #IOCIRQMSKB]
        MSR$cc   CPSR_c, $rc
        MEND

;-----------------------------------------------------------------------------
; KbdRxOnTxOff
;
;       Enable RX irqs, disable TX irqs.
;
        MACRO
$label  KbdRxOnTxOff $ra,$rb,$rc,$cc

$label  IOMDBase $ra,$cc
        MRS$cc   $rc, CPSR                      ; must disable FIQs when
        ORR$cc   $rb, $rc, #I32_bit+F32_bit     ; manipulating IRQA+B regs
        MSR$cc   CPSR_c, $rb
        LDR$cc.B $rb, [$ra, #IOCIRQMSKB]
        ORR$cc   $rb, $rb, #serial_Rx_bit
        BIC$cc   $rb, $rb, #serial_Tx_bit
        STR$cc.B $rb, [$ra, #IOCIRQMSKB]
        MSR$cc   CPSR_c, $rc
        MEND

;-----------------------------------------------------------------------------
; KbdRxOffTxOn
;
;       Enable TX irqs, disable RX irqs.
;
        MACRO
$label  KbdRxOffTxOn $ra,$rb,$rc,$cc

$label  IOMDBase $ra,$cc
        MRS$cc   $rc, CPSR                      ; must disable FIQs when
        ORR$cc   $rb, $rc, #I32_bit+F32_bit     ; manipulating IRQA+B regs
        MSR$cc   CPSR_c, $rb
        LDR$cc.B $rb, [$ra, #IOCIRQMSKB]
        ORR$cc   $rb, $rb, #serial_Tx_bit
        BIC$cc   $rb, $rb, #serial_Rx_bit
        STR$cc.B $rb, [$ra, #IOCIRQMSKB]
        MSR$cc   CPSR_c, $rc
        MEND

;-----------------------------------------------------------------------------
; MseEnable
;
;       Enable mouse state machine.
;
        MACRO
$label  MseEnable $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        MOV$cc   $rb, #IOMD_MSECR_Enable
        STR$cc.B $rb, [$ra, #IOMD_MSECR]
        MEND

;-----------------------------------------------------------------------------
; MseDisable
;
;       Disable mouse state machine.
;
        MACRO
$label  MseDisable $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        MOV$cc   $rb, #0
        STR$cc.B $rb, [$ra, #IOMD_MSECR]
        MEND

;-----------------------------------------------------------------------------
; MseRxOffTxOff
;
;       Disable mouse RX irqs, disable mouse TX irqs.
;
        MACRO
$label  MseRxOffTxOff $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        LDR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        BIC$cc   $rb, $rb, #IOMD_MouseRxFull_IRQ_bit + IOMD_MouseTxEmpty_IRQ_bit
        STR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        MEND

;-----------------------------------------------------------------------------
; MseRxOnTxOff
;
;       Enable mouse RX irqs, disable mouse TX irqs.
;
        MACRO
$label  MseRxOnTxOff $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        LDR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        ORR$cc   $rb, $rb, #IOMD_MouseRxFull_IRQ_bit
        BIC$cc   $rb, $rb, #IOMD_MouseTxEmpty_IRQ_bit
        STR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        MEND

;-----------------------------------------------------------------------------
; MseRxOffTxOn
;
;       Enable mouse TX irqs, disable mouse RX irqs.
;
        MACRO
$label  MseRxOffTxOn $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        LDR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        ORR$cc   $rb, $rb, #IOMD_MouseTxEmpty_IRQ_bit
        BIC$cc   $rb, $rb, #IOMD_MouseRxFull_IRQ_bit
        STR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        MEND

;-----------------------------------------------------------------------------
; PsdEnable
;       Enable pseudo PS/2 port
;
        MACRO
$label  PsdEnable $cc

$label  MOV$cc  r0, #KeyV_PseudoEnable
        MOV$cc  r1, channel
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------
; PsdDisable
;       Disable pseudo PS/2 port
;
        MACRO
$label  PsdDisable $cc

$label  MOV$cc  r0, #KeyV_PseudoDisable
        MOV$cc  r1, channel
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------
; PsdRxOffTxOff
;
;       Disable pseudo RX irqs, disable pseudo TX irqs.
;
        MACRO
$label  PsdRxOffTxOff $cc

$label  MOV$cc  r0, #KeyV_PseudoIntMask
        MOV$cc  r1, #2_00
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------
; PsdRxOnTxOff
;
;       Enable pseudo RX irqs, disable pseudo TX irqs.
;
        MACRO
$label  PsdRxOnTxOff $cc

$label  MOV$cc  r0, #KeyV_PseudoIntMask
        MOV$cc  r1, #2_01
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------
; PsdRxOffTxOn
;
;       Enable pseudo TX irqs, disable pseudo RX irqs.
;
        MACRO
$label  PsdRxOffTxOn $cc

$label  MOV$cc  r0, #KeyV_PseudoIntMask
        MOV$cc  r1, #2_10
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------

        MACRO
$label  DebugTabInit $nil,$wk1,$wk2
$label
 [ debugtable
        ADR     $wk1, DebugTable
        STR     $wk1, DebugPtr
        ADR     $wk2, DebugTableEnd
$label.clr
        CMP     $wk1, $wk2
        STRCC   $nil, [$wk2, #-4]!
        BCC     $label.clr
 ]
        MEND

        MACRO
$label  DebugTab $wk1,$wk2,$v1,$v2,$v3
$label
 [ debugtable
        LDR     $wk1, DebugPtr
  [ "$v1" <> ""
        ADR     $wk2, DebugTableEnd
        TEQ     $wk1, $wk2
        ADREQ   $wk1, DebugTable
        MOV     $wk2, $v1
        STRB    $wk2, [$wk1], #1
  ]
  [ "$v2" <> ""
        ADR     $wk2, DebugTableEnd
        TEQ     $wk1, $wk2
        ADREQ   $wk1, DebugTable
        MOV     $wk2, $v2
        STRB    $wk2, [$wk1], #1
  ]
  [ "$v3" <> ""
        ADR     $wk2, DebugTableEnd
        TEQ     $wk1, $wk2
        ADREQ   $wk1, DebugTable
        MOV     $wk2, $v3
        STRB    $wk2, [$wk1], #1
  ]
        STR     $wk1, DebugPtr
 ]
        MEND

        END
@


4.4
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.34. Tagged as 'PS2Driver-0_34'
@
text
@d224 1
a224 1
$label  MOV$cc  r0, #KEYV_PseudoEnable
d237 1
a237 1
$label  MOV$cc  r0, #KEYV_PseudoDisable
d251 1
a251 1
$label  MOV$cc  r0, #KEYV_PseudoIntMask
d265 1
a265 1
$label  MOV$cc  r0, #KEYV_PseudoIntMask
d279 1
a279 1
$label  MOV$cc  r0, #KEYV_PseudoIntMask
@


4.3
log
@  First step in hardware independence.
Detail:
  Reads the address of IOMD using OS_Memory 9,4 rather than assuming it's at
  &03200000. Defaults back to &03200000 on kernels that don't have the
  OS_Memory sub-reason code.
Admin:
  Tested on an Ursula kernel without the OS_Memory extension.

Version 0.32. Tagged as 'PS2Driver-0_32'
@
text
@d25 1
a25 1
$label  mrs    ,$reg, CPSR
d27 1
a27 1
        msr    ,CPSR_c, $reg2
d38 1
a38 1
$label  msr    ,CPSR_c, $reg
d50 1
a50 1
$label  mrs    ,$reg, CPSR
d52 1
a52 1
        msr    ,CPSR_c, $reg2
d100 1
a100 1
        mrs $cc, $rc, CPSR                      ; must disable FIQs when
d102 1
a102 1
        msr $cc, CPSR_c, $rb
d106 1
a106 1
        msr $cc, CPSR_c, $rc
d118 1
a118 1
        mrs $cc, $rc, CPSR                      ; must disable FIQs when
d120 1
a120 1
        msr $cc, CPSR_c, $rb
d125 1
a125 1
        msr $cc, CPSR_c, $rc
d137 1
a137 1
        mrs $cc, $rc, CPSR                      ; must disable FIQs when
d139 1
a139 1
        msr $cc, CPSR_c, $rb
d144 1
a144 1
        msr $cc, CPSR_c, $rc
@


4.2
log
@* Made 32-bit compatible.
* Now disables FIQs when manipulating IRQMSKB (could this be why FIQs have
  been a bit dodgy since RISC OS 3.5?)
* No longer resets devices on Service_Reset unless it was a soft reset - this
  should stop people having to hammer the Alt keys for IPConfig etc.

Version 0.29. Tagged as 'PS2Driver-0_29'
@
text
@d62 1
a62 1
$label  MOV$cc  $reg, #IOMD_Base
@


4.1
log
@Initial revision
@
text
@d23 1
a23 1
$label  IRQOff  $reg
d25 3
a27 3
$label  MOV     $reg, pc
        TST     $reg, #I_bit
        TEQEQP  $reg, #I_bit
d38 1
a38 1
$label  TEQP      $reg, #0
d45 1
d48 1
a48 1
$label  SVCMode $reg
d50 3
a52 2
$label  MOV     $reg, pc
        TEQP    pc, #SVC_mode
a61 1
 [ IO_Type = "IOMD"
a62 5
 |
$label  MOV$cc  $reg, #&03000000
        ADD$cc  $reg, $reg, #&8000
        SUB$cc  $reg, $reg, #4
 ]
d97 1
a97 1
$label  KbdRxOffTxOff $ra,$rb,$cc
d100 3
a102 1
 [ IO_Type = "IOMD"
d106 1
a106 4
 |
        MOV$cc   $rb, #IOMD_KBDCR_Enable
        STR$cc.B $rb, [$ra, #IOMD_KBDCR]
 ]
d115 1
a115 1
$label  KbdRxOnTxOff $ra,$rb,$cc
d118 3
a120 1
 [ IO_Type = "IOMD"
d125 1
a125 4
 |
        MOV$cc   $rb, #IOMD_KBDCR_Enable + &80
        STR$cc.B $rb, [$ra, #IOMD_KBDCR]
 ]
d134 1
a134 1
$label  KbdRxOffTxOn $ra,$rb,$cc
d137 3
a139 1
 [ IO_Type = "IOMD"
d144 1
a144 5
 |
        Push    "r0-r3,r11",$cc
        BL$cc   TXIRQHandler
        Pull    "r0-r3,r11",$cc
 ]
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
