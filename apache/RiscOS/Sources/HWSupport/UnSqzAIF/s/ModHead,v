head	4.5;
access;
symbols
	UnSqzAIF-0_10:4.5
	UnSqzAIF-0_09:4.4
	UnSqzAIF-0_08:4.3
	UnSqzAIF-0_07:4.3
	UnSqzAIF-0_06:4.3
	UnSqzAIF-0_05:4.3
	Ursula_merge:4.2.2.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2.2.1
	Ursula_RiscPC:4.2.2.1.0.2
	rthornb_UrsulaBuild-19Aug1998:4.2.2.1
	UrsulaBuild_FinalSoftload:4.2.2.1
	rthornb_UrsulaBuild-12Aug1998:4.2.2.1
	aglover_UrsulaBuild-05Aug1998:4.2.2.1
	rthornb_UrsulaBuild-29Jul1998:4.2.2.1
	rthornb_UrsulaBuild-22Jul1998:4.2.2.1
	rthornb_UrsulaBuild-15Jul1998:4.2.2.1
	rthornb_UrsulaBuild-07Jul1998:4.2.2.1
	rthornb_UrsulaBuild-17Jun1998:4.2.2.1
	rthornb_UrsulaBuild-03Jun1998:4.2.2.1
	rthornb_UrsulaBuild-27May1998:4.2.2.1
	rthornb_UrsulaBuild-21May1998:4.2.2.1
	rthornb_UrsulaBuild_01May1998:4.2.2.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.5
date	2013.11.18.21.18.01;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	zvTnJ8GywsIdUNdx;

4.4
date	2012.04.28.16.39.00;	author jlee;	state Exp;
branches;
next	4.3;
commitid	gvgqXgl3woOqEE2w;

4.3
date	99.11.30.13.50.19;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.02.25.13.16.54;	author rbuckley;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.06.01.46.45;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.2.2.1
date	98.03.27.14.41.12;	author mstphens;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.46.45;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Internationalised
For completeness mainly, though it was not true that the error number 0 english message has hidden - RMREINIT of the module would have revealed the text too.
Note, as this module also appears in !System for 3.70 the message includes both token and default text (as HWDep isn't in the global messages in 3.70).

Version 0.10. Tagged as 'UnSqzAIF-0_10'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.ModHead

;;-----------------------------------------------------------------------------
;; Decompression module for squeezed AIF files with intact AIF header
;;-----------------------------------------------------------------------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services
        GET     Hdr:ModHand
        GET     Hdr:MsgTrans
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:NdrDebug
        GET     Hdr:Proc

        GET     VersionASM

        GBLL    hostvdu
        GBLL    debugwt
debug    SETL   {FALSE}
debugwt  SETL   {FALSE}
hostvdu  SETL   {FALSE}

; ----------------------------------------------------------------------------------------------------------------------

        AREA    |!!!ModuleHeader|, CODE, READONLY, PIC

Module_BaseAddr
        DCD     0
        DCD     Initialise     - Module_BaseAddr
        DCD     0
        DCD     Service        - Module_BaseAddr        ; Service
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                                       ; Helptable
  [ :LNOT: No32bitCode
        DCD     0                                       ; SWIbase
        DCD     0                                       ; SWI handler code
        DCD     0                                       ; SWI decode table
        DCD     0                                       ; SWIdecode
        DCD     0                                       ; International messages
        DCD     ModuleFlags    - Module_BaseAddr        ; Module flags
  ]

; ---------------------------------------------------------------------------------------------------
Title   DCB     "UnSqueezeAIF",0
Helpstr DCB     "UnSqueezeAIF",9,"$Module_MajorVersion ($Module_Date)"
  [ Module_MinorVersion <> ""
        DCB     " $Module_MinorVersion"
  ]
        DCB     0
        ALIGN

  [ :LNOT: No32bitCode
ModuleFlags
        DCD     ModuleFlag_32bit
  ]

; ---------------------------------------------------------------------------------------------------

        GBLL    AllowNonAIF               ;if true, attempt to patch even without AIF header
AllowNonAIF SETL {TRUE}


        GBLL    ForROM                    ;if true, refuse to initialise (go dormant) if not needed
ForROM      SETL {TRUE}

        MACRO
        BackToUsr  $temp
     [ No26bitCode
        MSR     CPSR_c, #USR32_mode     ; USR mode, all ints on
     |
      [ No32bitCode
        TEQP    pc, #0                  ; USR mode, all ints on
        MOV     r0, r0                  ; Avoid ARM2 bug
      |
        MOV     $temp, #0
        MRS     $temp, CPSR
        BICS    $temp, $temp, #&F       ; SVC32->USR32; SVC26->USR26
        TEQEQP  pc, #Z_bit              ; USR26, retain Z set
        MSRNE   CPSR_c, $temp           ; USR mode, all ints on
      ]
     ]
        MEND


Initialise
        Push    "LR"
        MOV     R0,#0
        SWI     XOS_PlatformFeatures
        MOVVS   R0,#0
        ANDS    R0,R0,#1                  ;bit 0 set if SynchroniseCodeAreas required
  [ ForROM
        ORRNE   R0,R0,#&100               ;bit 8 set to show we have initialised
        STRNE   R0,[R12]                  ;store flags word as workspace word
        ADREQ   R0,ErrorBlock_HardwareDepends
        MOVEQ   R1,#0
        MOVEQ   R2,#0                     ;lookup in global messages to internal buffer
        SWIEQ   XMessageTrans_ErrorLookup ;returns V set
  |
        ORR     R0,R0,#&100               ;bit 8 set to show we have initialised
        STR     R0,[R12]                  ;store flags word as workspace word
  ]
        Pull    "PC"

  [ ForROM
        MakeErrorBlock HardwareDepends
  ]

ServiceTable
        DCD     0                                ;flags
        DCD     UService - Module_BaseAddr
        DCD     Service_UKCompression
        DCD     0                                ;terminator
        DCD     ServiceTable - Module_BaseAddr
Service ROUT
        MOV     r0, r0                           ;magic instruction
        TEQ     r1, #Service_UKCompression
        MOVNE   pc, lr                           ;Not our service.
UService
        CMP     r0, #0                           ;Is it the pre-decompression call?
        MOVNE   pc, lr                           ;No, so we're not interested.

        Push    "r0,r2-r6,lr"

        LDR     r0,[r12]
        ANDS    r0,r0,#1
        Pull    "r0,r2-r6,pc",EQ        ; forget it if not needed

        ;Check whether the file is an AIF-headered file.
        LDR     lr, [r2, #&10]          ; We know R2 is &8000, 'cos it's an app
        EOR     r0, lr, #&EF000000      ; 'SWI'
        EORS    r0, r0, #&0011          ; 'OS_Exit'  Is the 5th word a 'SWI OS_Exit'?
        MOVEQ   r6,#1
        MOVNE   r6,#0                   ;flag AIF/non-AIF
  [ :LNOT: AllowNonAIF
        BNE     %FT01                   ; Nope, so not an AIF file
  ]

        LDR     lr, [r2]                ; Read the first word of the AIF header
        AND     lr, lr, #&FF000000      ; Clear the offset
        CMP     lr, #&EB000000          ; BL? If so, we're compressed
  [ AllowNonAIF
        CMPNE   lr, #&EA000000          ; allow B as well
  ]
        BEQ     %FT02

        ;there's nothing to do, so quit, unclaimed.
01      MOV     r1, #Service_UKCompression
        Debug   wt,"give up 1"
        Pull    "r0,r2-r6,pc"

02
        LDR     lr,[r2]
        MOVS    lr, lr, LSL #8          ;remove top 8 bits
        BMI     %BT01                   ;negative?  nasty branch - forget this code
        ADD     r0,r2,lr,ASR #6         ;add offset of branch in bytes (should be +ve)
        ADD     r0,r0,#8                ;and account for PC+8

        ADR     r4,UnsqSignature
        LDR     r5,[r4],#4

        ADD     r3,r3,r2
        ADD     r3,r3,#3
        BIC     r3,r3,#3
        SUB     r3,r3,#UnsqSigSize      ;last address to look at for start of signature

  Debug wt,"check between ",r0,r3,r5

03
        LDR     r1,[r0],#4
        CMP     r1,r5
        BEQ     %FT05
        CMP     r0,r3
        BLO     %BT03
;give up
04      MOV     r1, #Service_UKCompression
        Debug   wt,"give up 2"
        Pull    "r0,r2-r6,pc"

05      ;found 1st word of signature
        MOV     lr,#UnsqSigSize-4
06
        LDR     r5,[r4],#4
        LDR     r1,[r0],#4
        CMP     r1,r5
        BNE     %BT04
        SUBS    lr,lr,#4
        BNE     %BT06

        Debug   wt,"found 1st sig"

;this looks like a squeezed image, but what version of squeeze was it produced by?
        LDR     r5,[r0]
        LDR     r1,UnsqSignature503
        CMP     r5,r1
        BEQ     %FT50                   ;Needs our help
        LDR     r1,UnsqSignature500
        CMP     r5,r1
        BNE     %BT04                   ;Squeeze version not known OR it's a known safe version (e.g. 5.09 signature could be here)

        Debug   wt,"looking for 2nd sig"

;we've found a 5.00 signature. Is it a 5.00 squeeze or a fake signature inserted by 5.11+?
;If it's a fake signature, we'll find another signature sequence at R0+20
        ADD     lr,r0,#20
        CMP     lr,r3
        BHS     %BT04                   ;Signature too close to end of image for this to be a squeeze image
        ADR     r4,UnsqSignature
        MOV     r3,#UnsqSigSize
10
        LDR     r5,[r4],#4
        LDR     r1,[lr],#4
        CMP     r1,r5
        BNE     %FT50                   ;Second signature not detected, assume squeeze 5.00
        SUBS    r3,r3,#4
        BNE     %BT10

        Debug   wt,"found 2nd sig"
        
;we could check for a 5.09 signature here, but barring any bugs in 5.09+ the mere presence of a 2nd signature suggests that the code knows what it's doing
        B       %BT04

50
;matched whole signature - apply patch
   Debug wt,"matched"
        SUB     r2,r0,#UnsqSigSize
        LDR     r5,ComeToMeLittleChild
        STR     r5,[r2],#4
        ADR     r1,CopySyncAndGoR4
        STR     r1,[r2],#4

        ;if non-AIF, can't fix-up header to unsqueeze first, so claim and return now
        ;this means code can't really be patched after unsqueeze, but at least the
        ;unsqueeze is fixed
        ;
        ;Note that we don't OS_SynchroniseCodeAreas here for code we've just poked,
        ;because we know FileSwitch does a sychronise, after this service call (after
        ;the next service call, for patching, in fact)

        ANDS    r1, r6, #1              ; AIF bit set?  If not, set Z, R1=0
        Pull    "r0,r2-r6,pc",EQ        ; That's all folks!

        Debug   wt,"It's a squeezed AIF file which we can handle!"

        ;Synchronise the bit we just poked
        MOV     r0,#1
        SUB     r1,r2,#8
        SWI     XOS_SynchroniseCodeAreas

        ;Now place the LDR PC needed to get back here once it's unsqueezed
        LDR     r1, =&800C
        LDMIA   r1, {r0,r2}             ; Grab ImageEntryPoint + SWI OS_Exit
        Push    "r0,r2"                 ; Stuff it safe on the stack
        ADR     lr, retfrmunsq
        STMIA   r1, {r5,lr}             ; Replace it with the LDR

        ;Synchronise again
        MOV     r0,#1
        ADD     r2,r1,#8
        SWI     XOS_SynchroniseCodeAreas

        ;Now go do the unsqueeze
        BackToUsr r0
        MVN     r12, #0                 ; Cause address extinction if used
        MOV     r13, r12                ; (keep 1.20 compat capable)
        MOV     pc, #&8000              ; Away the noo!

retfrmunsq
        ;Tada! Unsqueeze done
        SWI     XOS_EnterOS             ; Back into SVC mode
        Pull    "r2,r4"
  Debug wt,"back from unsqueeze",r2
        LDR     r1, =&800C              ; Construct the new execution point
        STMIA   r1, {r2,r4}             ; Put the ImageEntryPoint + OS_Exit instruction back!
        MOV     r0,#1
        ADD     r2,r1,#8
        SWI     XOS_SynchroniseCodeAreas ;we've been poking again
        STR     r1,[sp,#12]             ; update the stacked r4
        MOV     r1, #0                  ; Mark it as claimed.
        Pull    "r0,r2-r6,pc"           ;That's all folks!


;code to look for
UnsqSignature
        LDMIA   R5!,{R0-R3}
        STMIA   R7!,{R0-R3}
        CMP     R5,R6
        BLT     UnsqSignature
UnsqSigSize * 4*4

; Signature tail word - differs by squeeze version

UnsqSignature500 ; StrongARM incompatible OR fake signature for ROL's unsqueeze
        MOV     PC,R4

UnsqSignature503 ; StrongARM compatible BUT buggy OS_SynchroniseCodeAreas
        MOV     R1,R7

;UnsqSignature509 ; Fixed OS_SynchroniseCodeAreas
;        MOV     R1,R4

;code to poke in
ComeToMeLittleChild
        LDR     PC,ComeToMeLittleChild+4


;code to be jumped to, instead of the signature code
CopySyncAndGoR4 ROUT
        LDMIA   R5!,{R0-R3}
        STMIA   R7!,{R0-R3}
        CMP     R5,R6
        BLT     CopySyncAndGoR4

;word copied near end should be MOV PC,R8, which should itself be patched
        SUB     R0,R7,#4
        SUB     R1,R0,#16*4
        LDR     R3,TheMOVPCR8
08
        LDR     R2,[R0],#-4
        CMP     R2,R3
        BEQ     %FT09
        CMP     R0,R1
        BGT     %BT08
        B       %FT10
09

;check if there's already an XOS_SynchroniseCodeAreas call present. If so, there's no point us patching our own one in.
        LDR     r1,[r0],#4
        LDR     r2,XOSSynchronise
        CMP     r1,r2
        BEQ     %FT10

;extra complication with 32bit machines is that limited B/BL range means we need to place two words, not one. check if there's enough space already (i.e. spare space not used by ADD/SUBs), or if we need to go back one instruction and overwrite one of the ADD/SUBs
        SUB     r2,r7,r0
        CMP     r2,#8
        SUBLT   r0,r0,#4                ;go back one more, this should leave us over an ADD/SUB R8,R8,#...
        SWI     XOS_EnterOS
        LDMIA   r0,{r1,r2}
        Push    "r0-r2"                 ;stick the old words on the SVC stack, along with where they came from
        Debug   wt,"SyncAndGoR8 with",r0,r1,r2
        BackToUsr r1
        LDR     r1,ComeToMeLittleChild
        ADR     r2,SyncAndGoR8
        STMIA   r0,{r1,r2}

10
        MOV     R0,#0
XOSSynchronise
        SWI     XOS_SynchroniseCodeAreas ;you've guessed it
        MOV     PC,R4


SyncAndGoR8
        SWI     XOS_EnterOS
        Pull    "r0-r2"
        STMIA   r0,{r1-r2}              ;replace the words we swapped out earlier
        BackToUsr r1
        MOV     lr,r0
        MOV     R0,#0
        SWI     XOS_SynchroniseCodeAreas
        MOV     pc,lr                   ;return to whence we came

TheMOVPCR8
        MOV     PC,R8

;----------------------------------------------------------------------------------------------------
; Neil's debugging routines
      [ debug
        InsertNDRDebugRoutines
      ]

        END
@


4.4
log
@Finish 32bitification process. Update to detect and unsqueeze images which contain the OS_SynchroniseCodeAreas bug (squeeze 5.03-5.08)
Detail:
  Makefile - Rewritten to use fragments
  s/ModHead:
  - Finished 32bit conversion; code patching needed updating to use LDR PC to get back to UnSqzAIF instead of relying on branch instructions.
  - Updated to detect and patch code produced by squeeze 5.03 to 5.08, which had a bug where the first OS_SynchroniseCodeAreas was wrong
  - Updated to detect the fake signature inserted by squeeze 5.11+ (which was added to appease ROL's unsqueeze), in order to avoid unnecessary manual unsqueezing of those images
  Docs/signatures - Examples of different signatures produced by different squeeze versions
Admin:
  Tested in softload form on Iyonix, unsqueezing images produced by squeeze 5.00-5.12


Version 0.09. Tagged as 'UnSqzAIF-0_09'
@
text
@d27 2
d36 3
a38 3
debug    SETL   false
debugwt  SETL   false
hostvdu  SETL   false
d72 1
a72 1
        DCD     1       ; Module is 32-bit safe
d101 1
a101 1
        
d104 1
a104 1
        Push    "R0,R1,LR"
d112 4
a115 3
        ADREQ   R0,notneedederror
        STREQ   R0,[SP]
        SETV EQ
d120 1
a120 1
        Pull    "R0,R1,PC"
d123 1
a123 5
;sod internationalisation - this message is hidden if in ROM
notneedederror
        DCD     0
        DCB     "UnSqueezeAIF not needed on this platform",0
        ALIGN
@


4.3
log
@  Merged to trunk.
Detail:
  Work in progress for 32-bit support.
Admin:
  Do not use this version.
  Now uses srccommit.
  Now uses objasm.

Version 0.05. Tagged as 'UnSqzAIF-0_05'
@
text
@d28 1
a37 2
        ! 0, "Module workspace is &":CC:(:STR:(:INDEX:@@)):CC:" bytes"

d82 19
d119 1
d125 1
d199 1
a199 1
        MOV     r3,#UnsqSigSize-4
d205 28
d234 6
a239 1
        BNE     %BT06
d241 1
d244 5
a248 10
        ADR     r3,ComeToMeLittleChild
        SUB     r4,r0,#UnsqSigSize
        LDR     r1,[r3],#4
        STR     r1,[r4],#4
        LDR     r1,[r3],#4
        STR     r1,[r4],#4
        LDR     r1,[r3],#4
        STR     r1,[r4],#4
        ADR     r5,CopySyncAndGoR4
        STR     r5,[r4],#4
a260 1
        ;Now calculate the B needed to get back here once it's unsqueezed
d262 18
a279 14
        ADR     r0, retfrmunsq
        MOV     r1, #&8000
        ADD     r2, r1, #&14
        SUB     r0, r0, r2              ; R0 is the offset, accounting for PC+8
        MOV     r2, #&EA000000          ; Create the BAL bit of the instruction
        ORR     r0, r2, r0, LSR #2      ; OR in the offset

        LDR     lr, [r1, #&0C]!         ; Grab what was at the ImageEntryPoint
        STR     r0, [r1]                ; Replace it with the branch
        Push    "lr"                    ; Stuff it safe on the stack, along with the cache status
  Debug wt,"synchronise"
        MOV     r0,#0
        SWI     XOS_SynchroniseCodeAreas ; we've been poking code
        LDR     lr,[sp]
d281 1
a281 5
        MOV     r0, #0
        MRS     r0, CPSR
        BICS    r0, r0, #&F             ; SVC32->USR32; SVC26->USR26
        TEQEQP  pc, #Z_bit              ; USR26, retain Z set
        MSRNE   CPSR_c, r0              ; USR mode, all ints on
d289 4
a292 4
        Pull    "r1"
  Debug wt,"back from unsqueeze",r1
        MOV     r4, #&8000              ; Construct the new execution point
        STR     r1, [r4, #&C]!          ; Put the ImageEntryPoint instruction back!
d294 1
a294 2
        MOV     r1,r4
        MOV     r2,r4
d296 1
a296 1
        STR     r4,[sp,#12]             ; update the stacked r4
d307 5
a312 1
UnsqSigSize * 5*4
d314 5
d322 1
a322 4
        ADR     R0,mememe
        LDR     R0,[R0]
        MOV     PC,R0
mememe  DCD     0
d326 1
a326 1
CopySyncAndGoR4
d335 1
a335 2
        ADR     R3,TheMOVPCR8
        LDR     R3,[R3]
d344 19
a362 7
        ADD     r0,r0,#4        ;back to the instruction to patch
        ADD     r2,r0,#8        ;account for PC+8
        ADR     r1,SyncAndGoR8
        SUB     r1,r1,r2
        MOV     r2,#&EA000000   ; Branch to SynAndGoR8
        ORR     r1,r2,r1,LSR #2
        STR     r1,[r0],#4
d366 1
d372 5
d379 2
@


4.2
log
@Removed Service_UKCompression from sources. It now lives in Hdr:Services.
@
text
@a15 1
        LEADR   Module_LoadAddr
d17 3
a19 1
        ASSERT  (.=Module_BaseAddr)
d21 23
d51 1
d53 2
a54 2
        DCD     0
        DCD     0
d56 3
a58 2
        DCD     0
        DCD     0
d62 11
a72 2
Helpstr DCB     "UnSqueezeAIF",9,"$VString ($Date)",0
                ALIGN
d107 8
a114 3

Service
        ROUT
d116 4
a119 4
        MOVNES  pc, lr                  ;Not our service.

        CMP     r0, #0                  ;Is it the pre-decompression call?
        MOVNES  pc, lr                  ;No, so we're not interested.
d125 1
a125 1
        Pull    "r0,r2-r6,pc",EQ,^      ; forget it if not needed
d129 2
a130 4
        MOV     r0, #&EF000000          ; 'SWI'
        ORR     r0, r0, #&0011          ; 'OS_Exit'

        CMP     r0, lr                  ; Is the 5th word a 'SWI OS_Exit'?
d148 1
a148 1
        Pull    "r0,r2-r6,pc",,^
d152 3
a154 2
        BIC     lr,lr,#&FF000000
        ADD     r0,r2,lr,LSL #2         ;add offset of branch in bytes (should be +ve)
d176 1
a176 1
        Pull    "r0,r2-r6,pc",,^
d201 1
a201 1
        ;if non-AIF, can't fix-up header to unsqueeze first, so cliam and return now
d209 2
a210 3
        CMP     r6,#0                   
        MOVEQ   r1, #0                  ; Mark it as claimed.
        Pull    "r0,r2-r6,pc",EQ,^      ; That's all folks!
d215 2
a216 2
        MOV     r2, #&8000
        ADD     r2, r2, #&14
d221 1
a221 3
        MOV     r1, #&8000
        ADD     r1, r1, #&0C
        LDR     lr, [r1]                ; Grab what was at the ImageEntryPoint
d229 7
a235 3
        TEQP    pc, #0                  ; USR mode, all ints on
        MOV     r12, #&80000000         ; Cause address extinction if used
        MOV     r13, #&80000000         ; (keep 1.20 compat capable)
d243 2
a244 4
        MOV     r0, #&8000
        ADD     r0, r0, #&0C
        STR     r1, [r0]                ; Put the ImageEntryPoint instruction back!
        MOV     r4, r0                  ; This is the new execution point
d251 1
a251 1
        Pull    "r0,r2-r6,pc",,^        ;That's all folks!
@


4.2.2.1
log
@update to Ursula format (service table)
@
text
@d72 3
a74 8
ServiceTable
        DCD     0                                ;flags
        DCD     UService - Module_BaseAddr
        DCD     Service_UKCompression
        DCD     0                                ;terminator
        DCD     ServiceTable - Module_BaseAddr
Service ROUT
        MOV     r0, r0                           ;magic instruction
d76 4
a79 4
        MOVNES  pc, lr                           ;Not our service.
UService
        CMP     r0, #0                           ;Is it the pre-decompression call?
        MOVNES  pc, lr                           ;No, so we're not interested.
@


4.1
log
@Initial revision
@
text
@a47 3
Service_UKCompression * &B7


@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
