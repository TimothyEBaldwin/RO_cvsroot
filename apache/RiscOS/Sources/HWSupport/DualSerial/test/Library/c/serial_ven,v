head	4.3;
access;
symbols
	DualSerial-0_25-4_8_2_16-1:4.3
	DualSerial-0_25-4_8_2_16:4.3
	DualSerial-0_25-4_8_2_15:4.3
	DualSerial-0_25-4_8_2_14:4.3
	DualSerial-0_25-4_8_2_13:4.3
	DualSerial-0_25-4_8_2_12:4.3
	DualSerial-0_25-4_8_2_11:4.3
	DualSerial-0_29:4.3
	DualSerial-0_25-4_8_2_10:4.3
	RO_5_07:4.3
	DualSerial-0_28:4.3
	DualSerial-0_25-4_8_2_9:4.3
	DualSerial-0_25-4_8_2_8:4.3
	DualSerial-0_25-4_8_2_7:4.3
	DualSerial-0_25-4_8_2_6:4.3
	DualSerial-0_27:4.3
	DualSerial-0_25-4_8_2_5:4.3
	DualSerial-0_25-4_8_2_4:4.3
	DualSerial-0_25-4_8_2_3:4.3
	DualSerial-0_25-4_8_2_2:4.3
	DualSerial-0_25-4_8_2_1:4.3
	HAL:4.3.0.4
	DualSerial-0_26:4.3
	DualSerial-0_25:4.3
	kbracey_32bit_merge:4.3
	DualSerial-0_24-4_7_2_4:4.3
	DualSerial-0_24-4_7_2_3:4.3
	DualSerial-0_24-4_7_2_2:4.3
	dellis_autobuild_BaseSW:4.3
	DualSerial-0_24-4_7_2_1:4.3
	kbracey_32bit:4.3.0.2
	DualSerial-0_24:4.3
	sbrodie_sedwards_16Mar2000:4.3
	DualSerial-0_23:4.3
	dcotton_autobuild_BaseSW:4.3
	DualSerial-0_22:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	DualSerial-0_21:4.3
	DualSerial-0_18:4.3
	Daytona_merge:4.2
	DualSerial-0_17:4.3
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	wturner_DualSerial-0_20:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_NC2_Generic:4.1.7.2
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.2
	ARTtmp_merge:4.1.7.2
	Spin_3Apr97:4.1.7.2
	ARTtmp:4.1.7.2.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.3
date	98.09.21.14.22.02;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.22.13.38.50;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.12.06.32;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.12.06.32;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.45.49;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.01.29.15.06.08;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Makefile changed to use LocalRes$Path.
Changed to use srccommit.
Spinner branch merged.

Version 0.17. Tagged as 'DualSerial-0_17'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * Test harness for new serial driver
 *
 * Modification History
 *---------------------
 * 14-May-96 RWB Created
 */
#include "kernel.h"
#include "swis.h"
#include "serial.h"

/*
 * open a stream on the given filename
 */
int
serial_open_stream(char *strFilename, int iRights)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  reg.r[0] = iRights;
  reg.r[1] = (int)strFilename;
  err = _kernel_swi(OS_Find,&reg,&reg);
  if (err) return (0);

  return (reg.r[0]);
}

/*
 * close stream specified by handle
 */
void
serial_close_stream(int iHandle)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Find,&reg,&reg);
}

/*
 * execute an ioctl and return the data
 */
unsigned int
serial_ioctl(int iHandle, ioctl_t *pIOCtlBlock)
{
  _kernel_swi_regs reg;

  reg.r[0] = 9;                    /* ioctl */
  reg.r[1] = iHandle;
  reg.r[2] = (int)pIOCtlBlock;
  _kernel_swi(OS_Args,&reg,&reg);

  return (pIOCtlBlock->data);
}

/*
 * Fill buffer with as much data as will fit, or as much as is in the rx stream.
 * Return amount of data read.
 */
int
serial_read_stream(int iHandle, char *pchDataBlock, int iSize)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int iRxDataSize;

  reg.r[0] = 2;                         /* get amount of data in buffer */
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Args,&reg,&reg);
  if (err) return (-1);

  iRxDataSize = reg.r[2];
  if (!iRxDataSize) return (0);         /* no data */

  if (iRxDataSize>iSize) iRxDataSize = iSize;

  reg.r[0] = 4;	      	                /* read data */
  reg.r[1] = iHandle;
  reg.r[2] = (int)pchDataBlock;
  reg.r[3] = iRxDataSize;
  err = _kernel_swi(OS_GBPB,&reg,&reg);
  if (err) return (-1);

  return (iRxDataSize);
}

/*
 * Get a single byte from the serial stream. Will return -1 for failure.
 */
int
serial_read_byte(int iHandle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int iCarry;

  reg.r[0] = 5;                    /* read eof */
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Args,&reg,&reg);
  if (err || reg.r[2]) return (-1);

  err = _kernel_swi_c(OS_BGet,&reg,&reg,&iCarry);
  if (err || iCarry) return (-1);

  return (reg.r[0]);
}

/*
 * Write to tx stream as much data as given or as much as will fit in the
 * stream. Return amount of data written.
 */
int
serial_write_stream(int iHandle, char *pchDataBlock, int iSize)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int iTxFreeSize;

  reg.r[0] = 2;                         /* get amount of free space in buffer */
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Args,&reg,&reg);
  if (err) return (-1);

  iTxFreeSize = reg.r[2];
  if (!iTxFreeSize) return (0);         /* no free space */

  if (iSize>iTxFreeSize) iSize = iTxFreeSize;

  reg.r[0] = 2;	      	                /* write data */
  reg.r[1] = iHandle;
  reg.r[2] = (int)pchDataBlock;
  reg.r[3] = iSize;
  err = _kernel_swi(OS_GBPB,&reg,&reg);
  if (err) return (-1);

  return (iSize);
}

/*
 * Send a single byte to the serial stream. Will return 1 for success
 */
int
serial_write_byte(int iHandle, char chData)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = (int)chData;
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_BPut,&reg,&reg);
  if (err) return (-1);

  return (1);
}

/*
 * Return free space/amount of data
 */
int serial_size(int iHandle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = 2;
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Args,&reg,&reg);
  if (err) return (-1);

  return (reg.r[2]);
}

@


4.2
log
@Version Spin_merge taken
@
text
@d34 1
a34 1
#include "serial_ven.h"
@


4.1
log
@Initial revision
@
text
@d34 1
a34 1
#include "serial.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@d34 1
a34 1
#include "serial_ven.h"
@


4.1.7.2
log
@Imported from SrcFiler
@
text
@d34 1
a34 1
#include "serial.h"
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
