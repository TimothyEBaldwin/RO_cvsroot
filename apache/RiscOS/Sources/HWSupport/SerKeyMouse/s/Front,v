head	1.1;
access;
symbols
	SerKeyMouse-0_03:1.1
	SerKeyMouse-0_02:1.1
	SerKeyMouse-0_01:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.05.07.15.44.53;	author bavison;	state Exp;
branches;
next	;
commitid	xsplEv9a1L1W3O3w;


desc
@@


1.1
log
@  Initial import of SerKeyMouse module
Detail:
  This is the module that currently provides mouse and keyboard control for
  the Raspberry Pi over the UART. A temporary solution. Derived from the
  SerMouse module.
Admin:
  Received from Adrian Lees

Version 0.01. Tagged as 'SerKeyMouse-0_01'
@
text
@; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Front

;-----------------------------------------------------------------------------
;       Useful declarations.
;

;-----------------------------------------------------------------------------
;       Workspace layout.
;
workspace       RN      R12
                ^       0,workspace
wsorigin        # 0
 [ international
message_file_open       #       4
message_file_block      #       4*4
 ]
SerialInHandle  # 4             ; File handle for serial input device.
State           # 4             ; Address of current state handler.

MouseData       # 0             ; Mouse data record.
DeltaX          # 4             ; X movement since last query from Kernel.
DeltaY          # 4             ; Y movement since last query from Kernel.
Buttons         # 4             ; Button states.

Locked          # 1             ; Re-entrancy lock.
LastButtons     # 1             ; Button states on last poll.
Byte1           # 1             ; First byte of serial mouse report.
Byte2           # 1             ; Second byte of serial mouse report.
Byte3           # 1             ; Third byte of serial mouse report.
Byte4           # 1             ; Fourth byte of serial mouse report.

                # 3:AND:(-:INDEX:@@)

	[ direct_hal

KM_State	#	4
KM_Num		#	4
KM_NumY		#	4
MouseX		#	4
MouseY		#	4

	]

max_running_work   *       :INDEX:@@

        ! 0, "SerialMouse workspace is ":CC:(:STR:(:INDEX:@@)):CC:" bytes"

        END

@
