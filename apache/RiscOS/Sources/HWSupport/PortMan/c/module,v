head	1.9;
access;
symbols
	PortMan-0_29:1.9
	PortMan-0_28:1.9
	PortMan-0_27:1.9
	PortMan-0_26:1.9
	PortMan-0_25:1.9
	PortMan-0_24:1.8
	PortMan-0_23:1.8
	PortMan-0_22:1.7
	PortMan-0_21:1.7
	RO_5_07:1.6
	PortMan-0_20:1.7
	PortMan-0_19:1.7
	PortMan-0_18:1.6
	PortMan-0_17:1.5
	PortMan-0_16:1.4
	PortMan-0_15:1.3
	PortMan-0_14:1.2
	PortMan-0_13:1.2
	dellis_autobuild_BaseSW:1.2
	dcotton_autobuild_BaseSW:1.2
	PortMan-0_12:1.2
	PortMan-0_11:1.2
	PortMan-0_10:1.2
	PortMan-0_09:1.2
	PortMan-0_08:1.2
	PortMan-0_07:1.2
	PortMan-0_06:1.2
	PortMan-0_05:1.2
	PortMan-0_04:1.2
	PortMan-0_03:1.2
	PortMan-0_02:1.2
	PortMan-0_01:1.1;
locks; strict;
comment	@# @;


1.9
date	2005.03.30.17.25.35;	author kbracey;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.22.17.59.31;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.21.10.48.49;	author mhobbs;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.14.13.51.13;	author srevill;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.11.13.00.38;	author srevill;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.13.13.39.46;	author dellis;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.09.17.36.04;	author dellis;	state Exp;
branches;
next	1.2;

1.2
date	99.03.04.18.21.25;	author nturton;	state Exp;
branches;
next	1.1;

1.1
date	99.03.04.12.50.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Minor build fixes.

Version 0.25. Tagged as 'PortMan-0_25'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1997 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/
#include <stdlib.h>
#include <stdbool.h>
#include "swis.h"
#include "Global/Services.h"
#include "Interface/HighFSI.h"
#include "Interface/PCI.h"

#ifdef STANDALONE
#include "saheader.h"
#else
#include "header.h"
#endif

#include "resfiles.h"
#include "module.h"
#include "msgfile.h"
#include "tags.h"
#include "PortMan.h"

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

#define UNUSED(x) ((x)=(x))

#define IOMD_CLINES (*(unsigned int*)0x0320000c)  /* ARM 7500FE */
#define GPIO_REG_BASE 0x30470000                  /* CX24430 */
#define PLL_REG_BASE  0x30440000                  /* CX24430 */

#define GPIO_READ       (0x04/4)
#define GPIO_DRIVE_HIGH (0x08/4)
#define GPIO_DRIVE_LOW  (0x10/4)
#define GPIO_DRIVE_OFF  (0x14/4)
#define GPIO_BANK       (0x30/4)

#define PLL_CONFIG0     (0x20/4)

#define CXPIOREG(b,a) (CXGPIO_Base[GPIO_BANK*(b)+GPIO_##a])
#define CXPLLREG(a)   (CXPLL_Base[PLL_##a])

static volatile unsigned int *CXGPIO_Base, *CXPLL_Base;
static int clines_softcopy=0xff;
static int messages_handle = 0;
static int tags_handle = 0;
struct msgfile messages = MSGFILE_INIT;

static _kernel_oserror *modify_bit(int flags, const char *name, int *result);

static enum
{
    ARM7500FE,
    CX24430
} platform = ARM7500FE;

/**** Utility function **********************************************/
/* this allows us to find out if the actual data has changed by reading
   the underlying handle for the file */
int resourcefs_handle (const char* file)
{
  int fh, h;
  _kernel_oserror* e;

  e = _swix (OS_Find, _INR(0,1)|_OUT(0),
    0x4f,
    Module_MessagesFile,
    &fh);

  e = _swix (OS_FSControl, _INR(0,1)|_OUT(1),
    21,
    fh,
    &h);

  e = _swix (OS_Find, _INR(0,1),
    0,
    fh);

  return h;
}

/**** Port access functions **********************************************/

static unsigned int modify_clines(unsigned int mask, unsigned int toggle)
{
  int res;
  int irq_state=_kernel_irqs_disabled();

  /* Turn interrupts off round the atomic bit. */
  _kernel_irqs_off();
  res=clines_softcopy;
  /* Update the soft copy */
  clines_softcopy = ( res & mask ) ^ toggle;
  /* Write to the hardware */
  IOMD_CLINES=clines_softcopy;
  if(!irq_state)
    _kernel_irqs_on();

  /* Return the old value. */
  return res;
}

static _kernel_oserror *arm7500fe_modify(struct bitdef bit, int flags, int *result)
{
  if(bit.port == 0)
  {
    unsigned int mask=0, toggle=0;
    unsigned int value;
    if(bit.flags & TAG_FLAGS_OUTPUT)
    {
      mask=flags&PORTMAN_FLAG_CLEAR?1:0;
      toggle=flags&PORTMAN_FLAG_TOGGLE?1:0;
      if((flags & PORTMAN_FLAG_CLEAR) && (bit.flags & TAG_FLAGS_INVERTED))
        toggle^=1;
    }
    value=modify_clines(~(mask<<bit.num), toggle<<bit.num) >> bit.num;
    *result=(value&1) | (((value&!mask)^toggle)<<1);
  }
  else
    *result=0;
  return NULL;
}

static _kernel_oserror *cx24430_modify_pio(struct bitdef bit, int flags, int *result)
{
  bool clear=0, toggle=0, old, new, newphys;
  unsigned int bank = bit.num / 32;
  unsigned int pinbit = 1u << bit.num%32;

  if(bit.flags & TAG_FLAGS_OUTPUT)
  {
    old = CXPIOREG(bank,DRIVE_HIGH) & pinbit;
    if (bit.flags & TAG_FLAGS_INVERTED) old = !old;
    clear = flags&PORTMAN_FLAG_CLEAR;
    toggle = flags&PORTMAN_FLAG_TOGGLE;
    new = (old &~ clear) ^ toggle;
    newphys = bit.flags & TAG_FLAGS_INVERTED ? !new : new;
    if (newphys)
      CXPIOREG(bank,DRIVE_HIGH) = pinbit;
    else
      CXPIOREG(bank,DRIVE_LOW) = pinbit;
  }
  else
  {
    CXPIOREG(bank,DRIVE_OFF) = pinbit;
    old = CXPIOREG(bank,READ) & pinbit;
    if (bit.flags & TAG_FLAGS_INVERTED) old = !old;
    new = old;
  }
  *result = old | new<<1;
  return NULL;
}

static _kernel_oserror *cx24430_modify_config(struct bitdef bit, int flags, int *result)
{
  bool old, new;
  unsigned int pinbit = 1u << bit.num;

  old = CXPLLREG(CONFIG0) & pinbit;
  if (bit.flags & TAG_FLAGS_INVERTED) old = !old;
  new = old;
  *result = old | new<<1;
  return NULL;
}

#define BUTTON_SET_SIZE 8
int button_set[BUTTON_SET_SIZE+1] = { -1 };

static void cx24430_note_button(const char *name, struct bitdef bit)
{
  if (bit.port != 2 && bit.port != 3) return;
  int n;
  for (n = 0; button_set[n] != -1; n++)
      if (button_set[n] == bit.num) return;
  if (n < BUTTON_SET_SIZE)
  {
    button_set[n] = bit.num;
    button_set[n+1] = -1;
  }
}

static void cx24430_buttons_init(void)
{
    /* Make a list of all lines associated with port 2/3 tags. These are
     * the button scan lines, and all need to be manipulated to read a
     * button.
     */
    tag_foreach(cx24430_note_button);
}

static _kernel_oserror *cx24430_read_button(struct bitdef bit, int flags, int *result)
{
  _kernel_oserror *e;
  int res;
  bool old_state[BUTTON_SET_SIZE];
  int irq_state=_kernel_irqs_disabled();

  _kernel_irqs_off();
  /* This case is used for buttons on the STB55. Given the tag definition
   * <n>:<2|3>:0, we drive <n>:0:2 high, all the other scan lines low, then
   * read either Panel_SW1 or Panel_SW2, then put all scan lines back to their
   * old output state.
   * Polarity of read is determined by tag definition of Panel_SW1/2 -
   * flags are effectively ignored for port 2/3 tags, and should be zero.
   */
  for (int n = 0; button_set[n] != -1; n++)
  {
    cx24430_modify_pio((struct bitdef) { .num = button_set[n], .port = 0,
                                         .flags = TAG_FLAGS_OUTPUT },
                       button_set[n] == bit.num ? PORTMAN_FLAG_SET
                                                : PORTMAN_FLAG_CLEAR,
                       &res);
    old_state[n] = res & 1;
  }
  e = modify_bit(0, bit.port == 2 ? "Panel_SW1" : "Panel_SW2", result);
  for (int n = 0; button_set[n] != -1; n++)
  {
    cx24430_modify_pio((struct bitdef) { .num = button_set[n], .port = 0,
                                         .flags = TAG_FLAGS_OUTPUT },
                       old_state[n] ? PORTMAN_FLAG_SET
                                    : PORTMAN_FLAG_CLEAR,
                       &res);
  }
  if(!irq_state)
    _kernel_irqs_on();

  return e;
}

static _kernel_oserror *cx24430_modify(struct bitdef bit, int flags, int *result)
{
  switch (bit.port)
  {
    case 0: return cx24430_modify_pio(bit, flags, result);
    case 1: return cx24430_modify_config(bit, flags, result);
    case 2:
    case 3: return cx24430_read_button(bit, flags, result);
    default: *result = 0; return NULL;
  }
}

static _kernel_oserror *modify_bit(int flags, const char *name, int *result)
{
  _kernel_oserror *err;
  struct bitdef bit;

  err=tag_get(&bit, name);
  if(err)
    return err;

  if (platform == CX24430)
      return cx24430_modify(bit, flags, result);
  else
      return arm7500fe_modify(bit, flags, result);

}

/**** Callback function **************************************************/

_kernel_oserror *callback_handler(_kernel_swi_regs *r, void *pw)
{
  _kernel_swi_regs regs;

  /* Tell everyone we've started */
  regs.r[0]=PORTMAN_SERVICE_STARTING;
  regs.r[1]=Service_PortMan;
  _kernel_swi(OS_ServiceCall, &regs, &regs);

  return NULL;
}


/**** General module functions *******************************************/

_kernel_oserror *
module_finalise(int fatal, int podule, void *pw)
{
  _kernel_swi_regs regs;
  msgfile_close( &messages );
  tag_close();

  /* Before we finish.  Remove the callback. */
  regs.r[0]=(int)callback_entry;
  regs.r[1]=(int)pw;
  _kernel_swi(OS_RemoveCallBack, &regs, &regs);

  /* Tell everyone we're dying */
  regs.r[0]=PORTMAN_SERVICE_DYING;
  regs.r[1]=Service_PortMan;
  _kernel_swi(OS_ServiceCall, &regs, &regs);

#ifdef STANDALONE
  resfiles_final();
#endif

  return NULL;
}

_kernel_oserror *
module_initialise(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
  _kernel_swi_regs regs;
  _kernel_oserror* e = 0;

  if (!_swix(PCI_FindByID, _INR(0,4), 0x14F1, 0x4430, -1, 0, -1))
  {
    platform = CX24430;
    e = _swix(OS_Memory, _INR(0,2)|_OUT(3), 13, GPIO_REG_BASE, 0x10000,
                                            &CXGPIO_Base);
    if (e) return e;
    e = _swix(OS_Memory, _INR(0,2)|_OUT(3), 13, PLL_REG_BASE, 0x10000,
                                            &CXPLL_Base);
    if (e) return e;
  }

  if (platform == ARM7500FE)
   IOMD_CLINES=clines_softcopy;

#ifdef STANDALONE
  resfiles_init();
#endif

  msgfile_open( &messages, Module_MessagesFile );
  messages_handle = resourcefs_handle (Module_MessagesFile);
  tags_handle = resourcefs_handle (TAGS_FILE);

  e = tag_init();
  if (e) return e;

  if (platform == CX24430)
    cx24430_buttons_init();

  /* We're ready to go.  Set up the callback. */
  regs.r[0]=(int)callback_entry;
  regs.r[1]=(int)pw;
  _kernel_swi(OS_AddCallBack, &regs, &regs);

  return (NULL);
}

_kernel_oserror *
module_swi(int swi_offset, _kernel_swi_regs *r, void *pw)
{
  UNUSED(pw);

  switch(swi_offset+PortMan_00)
  {
  case PortMan_AccessBit:
    return modify_bit(r->r[0], (const char *)(r->r[1]), r->r+0);

  default:
    return error_BAD_SWI;
  }
}

void module_service(int service_number, _kernel_swi_regs *r, void *pw)
{
  UNUSED(pw);

  switch(service_number)
  {
#ifdef STANDALONE
  case Service_ResourceFSStarting:
    resfiles_service(r->r[3], r->r[2]);
    return;
#endif

  /* only reopen our files if their handle has changed */
  case Service_ResourceFSStarted: {
    int h = resourcefs_handle (Module_MessagesFile);
    if (messages_handle != h) {
      messages_handle = h;
      msgfile_close( &messages );
      msgfile_open( &messages, Module_MessagesFile );
    }

    h = resourcefs_handle (TAGS_FILE);
    if (tags_handle != h) {
      tags_handle = h;
      tag_close();
      tag_init ();
    }}
    return;
  }
}

@


1.8
log
@Added button support for STB55. Non-trivial, as the buttons are
implemented as a 2x4 matrix, using 4 of the LEDs as the column outputs.

Version 0.23. Tagged as 'PortMan-0_23'
@
text
@a211 2
    for (int n = 0; button_set[n] != -1; n++)
        printf("%d\n", button_set[n]);
@


1.7
log
@  Added support for STB5
Detail:
  Files modified: Resources.UK.Messages - Corrected typo in non-existent tag message
  Files added: Resources.STB.Tags
Admin:
  Updated from Kev's machine by Mike H.

Version 0.19. Tagged as 'PortMan-0_19'
@
text
@d72 2
d189 66
d261 2
d355 3
@


1.6
log
@  Fix to bug leaving ResourceFS files open (from Dan).
Detail:
  The function which was returning a handle for a file in ResourceFS
  was passing &fh into a SWI, rather than fh. This would result in
  the inspected file being left open.
Admin:
  Tested by DEllis.

Version 0.18. Tagged as 'PortMan-0_18'
@
text
@d25 1
d29 1
d51 9
a59 1
#define IOMD_CLINES (*(unsigned int*)0x0320000c)
d61 6
d72 6
d124 73
a200 2
  unsigned int mask=0, toggle=0;
  unsigned int value;
d206 5
a210 10
  if(bit.flags & TAG_FLAGS_OUTPUT)
  {
    mask=flags&PORTMAN_FLAG_CLEAR?1:0;
    toggle=flags&PORTMAN_FLAG_TOGGLE?1:0;
    if((flags & PORTMAN_FLAG_CLEAR) && (bit.flags & TAG_FLAGS_INVERTED))
      toggle^=1;
  }
  value=modify_clines(~(mask<<bit.num), toggle<<bit.num) >> bit.num;
  *result=(value&1) | (((value&!mask)^toggle)<<1);
  return NULL;
d260 13
a272 1
  IOMD_CLINES=clines_softcopy;
@


1.5
log
@Commit of PortMan changes made by DEllis around the time he left Pace...

Summary:
  - Only rescans resource files if resourcefs handle changes
  - Disregards invalid tokens in tags file
Details:
  Since the tags file is cached when initialised, there's no point doing this
  if the actual data hasn't changed, so the resourcefs internal file handle
  is now recorded, which is a constant for a given file in resourcefs, only
  changing if the file itself changes.  This avoids unnecessary recaching of
  the data.

  There are 2 invalid entries in the STB3 messages file which musn't be
  cached.  These are now skipped.
Admin:
  Tested on a RiscPC with the hardware writes commented out.  There are 2
  BASIC programs in the test directory which exercise the module.

Version 0.17. Tagged as 'PortMan-0_17'
@
text
@d76 1
a76 1
    &fh);
@


1.4
log
@  Service call handler now present in non-standalone builds so that new
caching facility will read messages file is resourcefs changes.

Detail:
  To provide identical behaviour to previously, the messages file should
really be reparsed upon receipt of Service_ResrouceFSStarted.

Admin:
  Tested on a STB-400.


Version 0.16. Tagged as 'PortMan-0_16'
@
text
@d52 2
d56 24
d170 1
d179 2
d182 2
a183 1
  tag_init();
d220 15
a234 5
  case Service_ResourceFSStarted:
    msgfile_close( &messages );
    msgfile_open( &messages, Module_MessagesFile );
    tag_close();
    tag_init ();
d238 1
@


1.3
log
@  - Message lookups are now cached, so safe when IRQs threaded.
  - AddCallback in finalise corrected to RemoveCallback
  - RAM rule added to makefile for making ROM replacement

Detail:
  Customer I reported that the STB-3 was suffering from IRQ reentrancy problems.
Some of these were tracked down to PortManager calling MessageTrans_LookUp
(when IRQs were threaded), which can cause file operations after
Service_ResourceFSStarting has been issued, invalidating the MessageTrans FD.

  PortManager now caches the contents of its Tags file upon startup in a
linked list, which it searches instead of using MessageTrans.

  During testing, it was also found that crashes would often occur when
killing the module.  This was tracked down to an erroneous OS_AddCallback in
the finalisation handler.

Admin:
  Tested on STB-3.  Rentrancy problems during booting fixed.  The module
should be loaded _very_ early on in the boot sequence.  Preferrably a the
module should be launched from a utility which peeks the current softcopy of
the port bits, and programs the module with these as it's initial value for
the port.


Version 0.15. Tagged as 'PortMan-0_15'
@
text
@a177 1
#ifdef STANDALONE
d184 1
a186 1
//    tag_init ();
d188 1
d192 3
a194 1
//    tag_close();
a197 1
#endif
@


1.2
log
@Added resources phase to Makefile (oops) and sends a service call round
when we're starting and dying.

Version 0.02. Tagged as 'PortMan-0_02'
@
text
@d27 1
d61 1
a61 1
  
d82 1
a82 1
  
d126 1
a126 1
  _kernel_swi(OS_AddCallBack, &regs, &regs);
d153 2
d187 1
d192 1
a192 1
    tag_close();
@


1.1
log
@The initial version of PortMan - the GPIO port manager.

Version 0.01. Tagged as 'PortMan-0_01'
@
text
@d98 15
d118 1
d122 10
d142 2
d151 5
@
