head	1.1;
access;
symbols
	PortMan-0_29:1.1
	PortMan-0_28:1.1
	PortMan-0_27:1.1
	PortMan-0_26:1.1
	PortMan-0_25:1.1
	PortMan-0_24:1.1
	PortMan-0_23:1.1
	PortMan-0_22:1.1
	PortMan-0_21:1.1
	RO_5_07:1.1
	PortMan-0_20:1.1
	PortMan-0_19:1.1
	PortMan-0_18:1.1
	PortMan-0_17:1.1
	PortMan-0_16:1.1
	PortMan-0_15:1.1
	PortMan-0_14:1.1
	PortMan-0_13:1.1
	dellis_autobuild_BaseSW:1.1
	dcotton_autobuild_BaseSW:1.1
	PortMan-0_12:1.1
	PortMan-0_11:1.1
	PortMan-0_10:1.1
	PortMan-0_09:1.1
	PortMan-0_08:1.1
	PortMan-0_07:1.1
	PortMan-0_06:1.1
	PortMan-0_05:1.1
	PortMan-0_04:1.1
	PortMan-0_03:1.1
	PortMan-0_02:1.1
	PortMan-0_01:1.1;
locks; strict;
comment	@# @;


1.1
date	99.03.04.12.50.16;	author nturton;	state Exp;
branches;
next	;


desc
@@


1.1
log
@The initial version of PortMan - the GPIO port manager.

Version 0.01. Tagged as 'PortMan-0_01'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > msgfile.c
 *
 *	General purpose message lookup code adapted for use with our
 *      Tags file. If in the future we want to lookup our own errors
 *	too then this code should be enhanced to provide multiple
 *	open message files.
 */

#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "msgfile.h"

static
void
get_tokens( char *p[4], va_list ap )
{
  int i;
  for(i=0; i<4; i++)
  {
    p[i]=va_arg( ap, char * );
    if( p[i]==NULL )
    {
      while(++i<4)
        p[i]=NULL;
      break;
    }
  }
}

/****************************************************************************
 * msgfile_open
 *
 *	In:	fname = pointer to file name of message file
 *		buffer = optional buffer to open file into (can be NULL)
 *
 *	Ensures the given message file is open.
 */
_kernel_oserror *
msgfile_open( struct msgfile *fp, const char *fname )
{
  _kernel_oserror *err;

  if ( fp->state==MSGFILE_OPEN )
    return NULL;

  fp->file_name = fname;

  err = _swix( MessageTrans_OpenFile, _INR(0,2), fp->buf, fname,
	       NULL );
  if ( err )
  {
    fp->state=MSGFILE_CLOSED;
  }
  else
  {
    fp->state=MSGFILE_OPEN;
  }
  return err;
}


/****************************************************************************
 * msgfile_lookup
 *
 *	In:	fp = message file structure
 *              result = pointer to result
 *              token = pointer to token to look up
 *		... up to 4 substitution parameters (NULL terminated)
 *
 *	Out:	returns an error or sets *result to the looked up
 *              string (or NULL if not found)
 *
 *	Looks up the given token in the currently open message file.
 */
_kernel_oserror *
msgfile_lookup( struct msgfile *fp, const char **result, const char *token )
{
  _kernel_oserror *err;

  if ( fp->state!=MSGFILE_OPEN )
  {
    err = msgfile_open( fp, fp->file_name);
    if (err)
      return err;
  }

  err = _swix( MessageTrans_Lookup, _INR(0,7)|_OUT(2),
               fp->buf, token, 0, 0,
	       0, 0, 0, 0, result );

  return err;
}


/****************************************************************************
 * msgfile_error_lookup
 *
 *	In:	fp = message file structure
 *              token = pointer to token to look up
 *		... up to 4 substitution parameters (NULL terminated)
 *
 *	Out:	returns the looked up string (or NULL if not found)
 *
 *	Looks up the given token in the currently open message file.
 */
_kernel_oserror *
msgfile_error_lookup( struct msgfile *fp, int num, const char *token, ... )
{
  char * ( p[4] ) ;
  _kernel_oserror *err;
  static _kernel_oserror buf;
  va_list ap;

  buf.errnum=num;
  strncpy(buf.errmess, token, sizeof(buf.errmess)-1);
  buf.errmess[sizeof(buf.errmess)-1]=0;

  if ( fp->state!=MSGFILE_OPEN )
  {
    if ( msgfile_open( fp, fp->file_name) != NULL)
      return &buf;
  }

  va_start( ap, token );
  get_tokens( p, ap );
  va_end( ap );

  err = _swix( MessageTrans_ErrorLookup, _INR(0,7),
               &buf, fp->buf, 0, 0,
	       p[0], p[1], p[2], p[3] );


  if ( (err != NULL) && err->errnum == buf.errnum )
    return err;

  return &buf;
}


/****************************************************************************
 * msgfile_close
 *
 *	  Closes the currently open message file.
 */
void
msgfile_close( struct msgfile *fp )
{
  if ( fp->state==MSGFILE_OPEN )
  {
    (void)_swix( MessageTrans_CloseFile, _IN(0), fp->buf );
    fp->state=MSGFILE_CLOSED;
  }
}
@
