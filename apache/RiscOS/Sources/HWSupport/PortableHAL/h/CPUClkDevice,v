head	1.1;
access;
symbols
	PortableHAL-0_81:1.1
	PortableHAL-0_80:1.1
	PortableHAL-0_79:1.1;
locks; strict;
comment	@# @;


1.1
date	2016.03.25.19.51.39;	author jlee;	state Exp;
branches;
next	;
commitid	abx17HDVT2bEQ30z;


desc
@@


1.1
log
@Make Portable_Idle perform a DSB before the WFI, and use the CP15 WFI op on ARMv6. Allow the CPU clock device to vanish and re-appear. Export a C version of the CPUClkDevice header.
Detail:
  s/Front, s/GetAll, s/StPortable - Improve Portable_Idle implementation so that it issues a DSB before the WFI, and uses the CP15 WFI (potentially with erratum 486865 workaround) for ARMv6. Adjust handling of CPU clock device in order to allow it to be registered and deregistered at runtime.
  Makefile, h/CPUClkDevice - Export a C version of the CPUClkDevice header
Admin:
  Tested on Raspberry Pi 1B/2B/3B


Version 0.79. Tagged as 'PortableHAL-0_79'
@
text
@/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef GLOBAL_CPUCLKDEVICE_H
#define GLOBAL_CPUCLKDEVICE_H

#pragma force_top_level
#pragma include_only_once

#include <stdbool.h>
#include <stdint.h>
#include "Global/HALDevice.h"

struct cpuclkdevice
{
  struct device dev;
  uint32_t (*NumSpeeds)(struct cpuclkdevice *cpuclk);
  uint32_t (*Info)(struct cpuclkdevice *cpuclk, uint32_t idx);
  uint32_t (*Get)(struct cpuclkdevice *cpuclk);
  int (*Set)(struct cpuclkdevice *cpuclk, uint32_t idx);
  int (*Override)(struct cpuclkdevice *cpuclk, const void *table, uint32_t numentries, int format);
};

struct cpuclkdevice_0_1
{
  /* Version 0 interface */
  struct cpuclkdevice dev;

  /* 0.1 extension */
  int (*GetOverride)(struct cpuclkdevice *cpuclk, void *table, uint32_t numentries, int format);
};

struct cpuclkdevice_0_2
{
  /* Version 0.1 interface */
  struct cpuclkdevice_0_1 dev;

  /* 0.2 extension */
  unsigned int (*GetDieTemperature)(struct cpuclkdevice *cpuclk);
};

#endif
@
