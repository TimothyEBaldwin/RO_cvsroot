head	1.5;
access;
symbols
	PortableHAL-0_81:1.5
	PortableHAL-0_80:1.5
	PortableHAL-0_79:1.5
	PortableHAL-0_78:1.5
	PortableHAL-0_77:1.5
	PortableHAL-0_76:1.5
	PortableHAL-0_75:1.4
	PortableHAL-0_74:1.4
	PortableHAL-0_73:1.4
	PortableHAL-0_72:1.3
	PortableHAL-0_71:1.3
	PortableHAL-0_70:1.2
	PortableHAL-0_69:1.1
	PortableHAL-0_68:1.1;
locks; strict;
comment	@# @;


1.5
date	2015.12.05.18.07.14;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	wqNSO27QOfz1QMLy;

1.4
date	2012.11.21.23.33.19;	author jlee;	state Exp;
branches;
next	1.3;
commitid	dKBlfy1bZaU2iitw;

1.3
date	2012.01.27.19.55.31;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	mSeF1GtbgQJdHQQv;

1.2
date	2011.03.19.18.36.01;	author jlee;	state Exp;
branches;
next	1.1;
commitid	zF4gdyWX1f2Hlucv;

1.1
date	2010.01.30.00.07.42;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Add sensor reading SWI
New Portable_ReadSensor is a general front end to sensors that might be of concern to the Portable module.
Starter for 10 is temperature, and we support reading the CPU die temperature (from a new CPUClk entry point, since faster=botter they're physically related parameters) and the BMU charger. Each supports multiple units, so in future multicore temperatures can be reported.
New error message in the resources, plus enable tokenisation of the Messages file since it's used via a buffered MessageTrans_ErrorLookup call.

Tested briefly on a HAL with fake temperature sensor returning a hardwired kelvin value.

Version 0.76. Tagged as 'PortableHAL-0_76'
@
text
@; Copyright 2010 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        SUBT    Exported Portable constants

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Name  Description
; ----       ----  -----------
; 25-Apr-91  TMD   File created
; 18-Nov-91  TMD   Added Portable_Control and associated bits
; 06-Dec-91  CDP   Added SWIs ReadBMUVariable, WriteBMUVariable, CommandBMU
;                  and definitions of BMU flags, variables and commands
; 11-Dec-91  TMD   Merged SerialEnable and SerialBufferEnable into one bit (bit 3)
;                  Removed parallel bit
; 29-Jan-92  CDP   Added PortableBMUC_SetAutostart.
; 02-Apr-92  CDP   Added PortableBMUV_ChargeRate.
;                  Renamed PortableBMUV_NominalLife, _MeasuredLife, _UsedLife
;                  to _UsableCapacity, _Reserved, _ChargeEstimate.
; 15-Feb-94  RCM   Added SWIs ReadFeatures, Idle and Stop for MORRIS based machines.
; 17-May-94  AMcC  Changed to using the preferred SWI base and name symbols
; 19-May-94  AMcC  Save & Restore listing options (OldOpt, OPT)
; 21-Jul-94  RCM   Added PortableControl_ParallelEnable
; 04-Aug-94  RCM   Added PortableControl_PCMCIAEnable
;                  Added PortableControl_IDEEnable
; 12-Aug-94  RCM   Added PortableBMUF_Threshold_3
; 28-Apr-98  amg   Added SWI SMBusOp and PortableFeature_SMBusOp for IMS


SWIClass        SETS    PortableSWI_Name

        ^       PortableSWI_Base

        AddSWI  Speed                   ; &42FC0
        AddSWI  Control                 ; &42FC1
        AddSWI  ReadBMUVariable         ; &42FC2
        AddSWI  WriteBMUVariable        ; &42FC3
        AddSWI  CommandBMU              ; &42FC4
        AddSWI  ReadFeatures            ; &42FC5
        AddSWI  Idle                    ; &42FC6
        AddSWI  Stop                    ; &42FC7
        AddSWI  Status                  ; &42FC8
        AddSWI  Contrast                ; &42FC9
        AddSWI  Refresh                 ; &42FCA
        AddSWI  Halt                    ; &42FCB
        AddSWI  SleepTime               ; &42FCC
        AddSWI  SMBusOp                 ; &42FCD
        AddSWI  Speed2                  ; &42FCE
        AddSWI  WakeTime                ; &42FCF
        AddSWI  EnumerateBMU            ; &42FD0
        AddSWI  ReadBMUVariables        ; &42FD1
        AddSWI  ReadSensor              ; &42FD2


; Sub-reason codes (in r2) for Service_Portable

ServicePortable_PowerDown       *       0       ; Power about to be removed from some ports
ServicePortable_PowerUp         *       1       ; Power has been reapplied to some ports
ServicePortable_TidyUp          *       2       ; Issued by Econet if it can't powerdown due to outstanding RxCBs
ServicePortable_Freeze          *       3       ; Issued on entry to SWI Portable_Stop
ServicePortable_Unfreeze        *       4       ; Issued on exit from SWI Portable_Stop
ServicePortable_FreezeRequest   *       5       ; Preceedes ServicePortable_Freeze


PortableControl_EconetEnable    *       1 :SHL: 0
PortableControl_LCDEnable       *       1 :SHL: 1
PortableControl_VideoEnable     *       1 :SHL: 2
PortableControl_SerialEnable    *       1 :SHL: 3       ; enable serial buffers and oscillator

PortableControl_DualEnable      *       1 :SHL: 4
PortableControl_ClockBits       *       3 :SHL: 5       ; control which clock is fed to VIDC
PortableControl_ExtClock        *       0 :SHL: 5       ; use external clock (from IOEB)
PortableControl_Crys2Clock      *       1 :SHL: 5       ; use crystal clock divided by 2
PortableControl_CrysClock       *       2 :SHL: 5       ; use crystal clock
PortableControl_InvertClock     *       1 :SHL: 7

PortableControl_BacklightEnable *       1 :SHL: 8

PortableControl_ExtraLines      *       1 :SHL: 9
PortableControl_ExtraLines1     *       0 :SHL: 9
PortableControl_ExtraLines2     *       1 :SHL: 9

PortableControl_DRAMs           *       1 :SHL: 10
PortableControl_DRAMs1          *       0 :SHL: 10
PortableControl_DRAMs2          *       1 :SHL: 10

PortableControl_SoundEnable     *       1 :SHL: 11      ; enable filters and amplifiers (new for Stork)
PortableControl_PCMCIAEnable    *       1 :SHL: 12      ; enable PCMCIA hardware (new for Stork)
PortableControl_ParallelEnable  *       1 :SHL: 13      ; enable parallel port (new for Stork)
PortableControl_FDCEnable       *       1 :SHL: 14      ; enable FDC oscillator
PortableControl_IDEEnable       *       1 :SHL: 15      ; enable IDE hard disc (new for Stork)

PortableControl_LCDInvert       *       1 :SHL: 16
PortableControl_IntTBallEnable  *       1 :SHL: 17      ;internal trackerball enabled } mutually
PortableControl_ExtMouseEnable  *       1 :SHL: 18      ;external mouse port enabled  } exclusive
PortableControl_ExtPowerEnable  *       1 :SHL: 19      ;power to external keyboard and mouse

; BMU device flags (EnumerateBMU)

PortableBMUDF_System               * 1 << 0 ; Battery powers the main system
PortableBMUDF_RTC                  * 1 << 1 ; Battery powers the RTC
PortableBMUDF_NVRAM                * 1 << 2 ; Battery powers the NVRAM
PortableBMUDF_Removable            * 1 << 3 ; Removable/optional battery

; BMU status flags (ReadBMUVariable, ReadBMUVariables)

PortableBMUF_Charging           *       1 << 8 ;New for PortableHAL
PortableBMUF_ChargerPresent     *       1 << 7
PortableBMUF_BatteryPresent     *       1 << 6
PortableBMUF_ChargeKnown        *       1 << 5
PortableBMUF_ChargeFault        *       1 << 4
PortableBMUF_Threshold_1        *       1 << 3                  ;Battery low  - warn user
PortableBMUF_Threshold_2        *       1 << 2                  ;Battery flat - shutdown now
PortableBMUF_LidOpen            *       1 << 1
PortableBMUF_Threshold_3        *       1 << 0  ;New for Stork  ;Battery charged

; More sensible names for thresholds
PortableBMUF_BatteryFlat * PortableBMUF_Threshold_2
PortableBMUF_BatteryLow  * PortableBMUF_Threshold_1
PortableBMUF_BatteryFull * PortableBMUF_Threshold_3

; BMU commands
                                ^       1
PortableBMU_Min_Command         #       0
PortableBMUC_RemovePower        #       1
PortableBMUC_SetPartCharge      #       1
PortableBMUC_SetFullCharge      #       1
PortableBMUC_SetAutostart       #       1
PortableBMUC_DisconnectCharger  #       1       ;New for Stork
PortableBMUC_ConnectCharger     #       1       ;New for Stork
PortableBMUC_DisablePMInts      #       1       ;New for Stork  ; Disable } reporting of battery
PortableBMUC_EnablePMInts       #       1       ;New for Stork  ; Enable  } state by interrupt

PortableBMU_Num_Commands        #       0


; BMU variables
; Note comments pertain to PortableHAL usage, other portables have different usages and/or units
                                ^       0
PortableBMU_Min_Variable        #       0
PortableBMUV_VersionNumber      #       1 ; 0
PortableBMUV_NominalCapacity    #       1 ; 1 - Design capacity of a new battery pack, mAh
PortableBMUV_MeasuredCapacity   #       1 ; 2
PortableBMUV_UsedCapacity       #       1 ; 3
PortableBMUV_UsableCapacity     #       1 ; 4 - Actual/estimated capacity when full (takes into account wear & tear), mAh
PortableBMUV_Reserved           #       1 ; 5
PortableBMUV_ChargeEstimate     #       1 ; 6
PortableBMUV_Voltage            #       1 ; 7 - Instantaneous voltage, mV
PortableBMUV_Current            #       1 ; 8 - Instantaneous current, mA
PortableBMUV_Temperature        #       1 ; 9 - 0.1K
PortableBMUV_Flags              #       1 ;10
PortableBMUV_ChargeRate         #       1 ;11
;
; Stork variables
;
PortableBMUVar_ChargeCurrent    #       1 ;12
PortableBMUVar_DischargeCurrent #       1 ;13
PortableBMUVar_Voltage          #       1 ;14
PortableBMUVar_Temperature1     #       1 ;15
PortableBMUVar_Temperature2     #       1 ;16
PortableBMUVar_ChargeLevel      #       1 ;17
PortableBMUVar_StatusFlags      #       1 ;18
PortableBMUVar_InputSignals     #       1 ;19
PortableBMUVar_BatteryCapacity  #       1 ;20
;
; VirtualRPC variables
;
PortableBMUV_BatteryTimeRemaining #     1 ;21 - Time until power loss, seconds
PortableBMUV_MaxBatteryTime       #     1 ;22
;
; PortableHAL variables
;
PortableBMUV_BatteryPercentRemaining      # 1 ;23 - 0-100
PortableBMUV_ChargeTimeRemaining          # 1 ;24 - Time until charge completion, seconds
PortableBMUV_ChargeCycles                 # 1 ;25 - Charge/discharge cycle count
PortableBMUV_SmoothedVoltage              # 1 ;26 - mV
PortableBMUV_SmoothedCurrent              # 1 ;27 - mA
PortableBMUV_NominalAvailableCapacity     # 1 ;28 - Current charge, mAh
PortableBMUV_CompensatedAvailableCapacity # 1 ;29 - " " after compensating for temperature, voltage, etc. mAh
;
PortableBMU_Num_Variables       #       0

PortableFeature_Speed           *       1 :SHL: 0
PortableFeature_Idle            *       1 :SHL: 4
PortableFeature_Stop            *       1 :SHL: 5
PortableFeature_SMBusOp         *       1 :SHL: 6 ; used by IMS

PortableStatus_DocStationConnected *    1 :SHL: 0
PortableStatus_PrinterFloppy    *       1 :SHL: 1
PortableStatus_LCDOn            *       1 :SHL: 3

; ReadBMUVariables request/response struct

                                ^       0
PortableReadBMUVars_VarNo       #       4 ; In: Variable number (PortableBMUV_...)
PortableReadBMUVars_Result      #       4 ; Out: Result code (PortableBMUR_...)
PortableReadBMUVars_Value       #       4 ; Out: Variable value
PortableReadBMUVars_Size        #       0 ; Struct size

; BMU operation result codes

PortableBMUR_Success        *  0 ; Result of operation was OK
PortableBMUR_Error          *  1 ; Generic error
PortableBMUR_Busy           *  2 ; BMU busy, try again later
PortableBMUR_Unsupported    *  3 ; Operation unsupported
PortableBMUR_Unknown        *  4 ; Operation supported, but variable value unknown (e.g. battery not fitted)

; ReadSensor known sensors
                                ^ 0
PortableReadSensor_Temperature  # 1       ; 0.1K
                                ^ 0
PortableRS_Temperature_CPUDie   # 1
PortableRS_Temperature_BMU      # 1
PortableRS_Temperature_HardDisc # 1
PortableRS_Temperature_GPUDie   # 1
PortableRS_Temperature_DRAM     # 1
PortableRS_Temperature_Max      # 0

        OPT     OldOpt
        END
@


1.4
log
@Add initial implementation of the new HAL friendly BMU interface
Detail:
  hdr/BMUDevice - New header describing layout of BMU HAL devices
  Makefile - export hdr/BMUDevice, and a C version of hdr/Portable
  hdr/Portable - Lots of new definitions related to the BMU interface. VirtualRPC BMU vars renamed slightly to match the A4/HAL naming convention (PortableBMUV_) instead of the Stork naming convention (Portable_BMUVar_).
  s/Front, s/GetAll, s/StPortable - BMU interface implementation. Two new SWIs (Portable_EnumerateBMU & Portable_ReadBMUVariables) are provided, along with a semi backwards compatible Portable_ReadBMUVariable implementation. Code also updated to use OSHW_ constants instead of magic numbers.
  Resources/UK/Messages - New error message text added
Admin:
  Tested in ROM on BB-xM, Pandora, TouchBook


Version 0.73. Tagged as 'PortableHAL-0_73'
@
text
@d68 1
d224 11
@


1.3
log
@Export Service_Portable subreasons myself.

Version 0.71. Tagged as 'PortableHAL-0_71'
@
text
@d66 2
d113 1
d115 4
a118 1
; BMU flags
d120 3
d132 4
d153 1
d157 1
a157 1
PortableBMUV_NominalCapacity    #       1 ; 1
d160 1
a160 1
PortableBMUV_UsableCapacity     #       1 ; 4
d163 3
a165 3
PortableBMUV_Voltage            #       1 ; 7
PortableBMUV_Current            #       1 ; 8
PortableBMUV_Temperature        #       1 ; 9
d183 12
a194 2
PortableBMUVar_BatteryTimeRemaining #   1 ;21
PortableBMUVar_MaxBatteryTime       #   1 ;22
d207 15
@


1.2
log
@Add code for controlling CPU speed via interacting with a CPUClk HAL device.
Detail:
  Makefile, hdr/CPUClkDevice - Add HALDevice_CPUClk descriptor to header exports
  hdr/Portable - Trim some obsolete definitions, tidy formatting, add Speed2 and (unimplemented) WakeTime SWI numbers, add BatteryTimeRemaining and MaxBatteryTime BMU variables (from VirtualRPC)
  s/Front, s/GetAll, s/StPortable - Added Portable_Speed and Portable_Speed2 implementations, for controlling CPU speed. Portable_Speed is fully compatible with the old A4 version; all new features are exposed via Portable_Speed2 instead. Also added some debug-only stats logging code to track how much time is spent in various states.
  Resources/UK/Messages - New error messages.
Admin:
  Tested on rev C2 BB, A2 BB-xM, C1 TouchBook.
  Portable_Speed2 & HALDevice_CPUClk documentation will be on the wiki soon.


Version 0.70. Tagged as 'PortableHAL-0_70'
@
text
@d67 11
@


1.1
log
@Add initial version of PortableHAL, bare-bones 32bit-safe Portable module
Detail:
  Currently only supporte the Portable_Idle and Portable_Features SWIs.
  Portable_Idle is implemented using the WFI instruction found in ARMv6K+, but the module should compile and run on any architecture.
Admin:
  Tested on rev C2 beagleboard

Version 0.68. Tagged as 'PortableHAL-0_68'
@
text
@a54 2

PortableSWICheckValue * @@               ;RCM says: this line in wrong place, but leave it here for now!
d59 7
a65 5
	AddSWI	Contrast		; &42FC9 |
	AddSWI	Refresh			; &42FCA | conditioned out in source
	AddSWI	Halt			; &42FCB |
	AddSWI	SleepTime		; &42FCC |
	AddSWI	SMBusOp			; &42FCD (IMS) 9-C conditioned out in file s.StPortable
d156 5
d166 1
a166 1
PortableFeature_SMBusOp		*	1 :SHL: 6 ; used by IMS
a171 65
 [ :DEF: MorrisSupport :LAND: :DEF: IOMD_Base
;******************************************************************************
;
; Hardware latches in PCMCIA ASIC and Morris that control
; power switching and other misc. functions on Stork.
;
HWLatchPA                       EQU     &03240000 + &68         ;PCMCIA I/O_A
HWLatchPB                       EQU     &03240000 + &70         ;PCMCIA I/O_B
HWLatchMC                       EQU     IOMD_Base + IOMD_CLINES ;MORRIS IOP
HWLatchMA                       EQU     IOMD_Base + &E8         ;MORRIS AtoD

;
; Initial values used by the Kernel to turn all the hardware on.
;
InitLatchPA                     EQU     2_00011111      ; __i11111
InitLatchPB                     EQU     2_00001100      ; ___011_i ExtMouse ExtPwr
InitLatchMC                     EQU     2_11111111      ; 111_i_11 LCDoff
InitLatchMA                     EQU     2_00010000      ; ___1____ SoundOn
 ]
;******************************************************************************
;
; 'Hot keys' defined for Stork
;
 [ 1 = 1
; Implemented by !BatMgr
;
HotKey_ToolBox                  EQU     &75     ;Open Apps directory
HotKey_Heart                    EQU     &7A     ;Run favourite application
HotKey_Battery                  EQU     &74     ;Toggle BatMgr icon on/off the iconbar
HotKey_On                       EQU     &6E     ;On/unfreeze - no action needed
HotKey_Off                      EQU     &6F     ;Shutdown machine
;
; Implemented by Portable module
;
HotKey_ContrastDown             EQU     &77
HotKey_ContrastUp               EQU     &76
HotKey_BrightnessDown           EQU     &79
HotKey_BrightnessUp             EQU     &78
HotKey_Freeze                   EQU     &7B
HotKey_MonLCD                   EQU     &7C     ;Toggle between LCD and external monitor
HotKey_InvertVideo              EQU     &7D
HotKey_AccessLock               EQU     &7F
HotKey_DimBrightness            EQU     &73
 |
;
; Implemented by !BatMgr
;
HotKey_ToolBox                  * &02 ;F2       ;Open Apps directory
HotKey_Heart                    * &07 ;F7       ;Run favourite application
HotKey_Battery                  * &01 ;F1       ;Toggle BatMgr icon on/off the iconbar
;
; Implemented by Portable module
;
HotKey_ContrastDown             * &03 ;F3
HotKey_ContrastUp               * &04 ;F4
HotKey_BrightnessDown           * &05 ;F5
HotKey_BrightnessUp             * &06 ;F6
HotKey_Freeze                   * &08 ;F8
HotKey_MonLCD                   * &09 ;F9       ;Toggle between LCD and external monitor
HotKey_InvertVideo              * &0A ;F10
HotKey_AccessLock               * &39 ;keypad 9 ;
HotKey_DimBrightness            * &0B ;F11
 ]
;******************************************************************************

@

