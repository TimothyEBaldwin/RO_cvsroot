head	4.1;
access;
symbols
	DeviceFS-0_73:4.1
	DeviceFS-0_72:4.1
	DeviceFS-0_71:4.1
	DeviceFS-0_70:4.1
	DeviceFS-0_69:4.1
	DeviceFS-0_68:4.1
	RO_5_07:4.1
	DeviceFS-0_67:4.1
	DeviceFS-0_66:4.1
	DeviceFS-0_65:4.1
	DeviceFS-0_64:4.1
	DeviceFS-0_63:4.1
	DeviceFS-0_62:4.1
	DeviceFS-0_61:4.1
	DeviceFS-0_60:4.1
	DeviceFS-0_59:4.1
	DeviceFS-0_58:4.1
	DeviceFS-0_57:4.1
	DeviceFS-0_56:4.1
	DeviceFS-0_55:4.1
	DeviceFS-0_54:4.1
	DeviceFS-0_53:4.1
	DeviceFS-0_52:4.1
	DeviceFS-0_51:4.1
	DeviceFS-0_50:4.1
	dellis_autobuild_BaseSW:4.1
	DeviceFS-0_49:4.1
	DeviceFS-0_48:4.1
	sbrodie_sedwards_16Mar2000:4.1
	DeviceFS-0_47:4.1
	dcotton_autobuild_BaseSW:4.1
	DeviceFS-0_46:4.1
	Ursula_merge:4.1
	DeviceFS-0_45:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	DeviceFS-0_44:4.1
	DeviceFS-0_43:4.1
	DeviceFS-0_42:4.1
	DeviceFS-0_41:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1
	Spinner:4.1.0.6
	Spin_merge:4.1
	DeviceFS_0_36:4.1
	Ursula:4.1.0.2
	Daytona:4.1.0.4
	Daytona_bp:4.1
	Ursula_bp:4.1
	ARTtmp_merge:1.1.2.1
	ARTtmp:1.1.0.2;
locks; strict;
comment	@# @;


4.1
date	97.05.08.10.39.44;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.16.10.53.51;	author blaughto;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.04.16.10.53.51;	author blaughto;	state Exp;
branches;
next	;


desc
@@


4.1
log
@ARTtmp branch folded in
@
text
@Support for non-blocking block reads/writes

Ben Laughton


Overview
========

Support has been added to allow block reads and writes (using OS_GBPB) to be
non-blocking.  The existing blocking API is not unchanged so full backwards
compatibility is maintained.

Non-blocking operation for a stream is enabled using a new IOCtl.  This IOCtl
can also be used to read the blocking status of a stream.  When streams are
first opened they are always in blocking mode by default.

A new IOCtl group (&ff) has been created for performing miscellaneous
operations on a stream.  Reason code 1 in this group reads/writes the
blocking status of a stream.

This new IOCtl group is dealt with in DeviceFS; IOCtls in this group are not
passed on to device drivers.


Changes
=======

Flags
-----

A new flag has been added to the flags word in the file structure:

bit 29	ff_NonBlocking	0:Non-blocking mode disabled for this file
			1:Non-blocking mode enabled for this file

IOCtl
-----

The args_ioctl routine has been changed to recognise with the new IOCtl group
and a couple of routines have been added to deal with this group:
ioctl_miscop ioctl_miscop_nonblock

Two new errors have been added which relate to the IOCtl handing:
DeviceFS_BadIOCtlReasonCode
DeviceFS_BadIOCtlParameter

GBPB
----

gbpb_get:
When in non-blocking mode, if gbpb_get cannot get the complete number of
requested bytes it returns with number of bytes not done in R3.

gbpb_put:
When in non-blocking mode, if gppb_put cannot output all the bytes it was
told to send it returns with the number of bytes not done in R3 and the C
flag set.
@


1.1
log
@file NonBlock was initially added on branch ARTtmp.
@
text
@d1 57
@


1.1.2.1
log
@Added support for non-blocking block reads/writes (OS_GBPB 4 and 2). Added
new IOCtl group (0xff) and reason code (1) to enable non-blocking operation
for a stream. Fixed bug in upcall handler: DeviceThresh upcalls now sent with
OS_CallAVector instead of OS_UpCall so that interrupts don't get enabled.
@
text
@a0 57
Support for non-blocking block reads/writes

Ben Laughton


Overview
========

Support has been added to allow block reads and writes (using OS_GBPB) to be
non-blocking.  The existing blocking API is not unchanged so full backwards
compatibility is maintained.

Non-blocking operation for a stream is enabled using a new IOCtl.  This IOCtl
can also be used to read the blocking status of a stream.  When streams are
first opened they are always in blocking mode by default.

A new IOCtl group (&ff) has been created for performing miscellaneous
operations on a stream.  Reason code 1 in this group reads/writes the
blocking status of a stream.

This new IOCtl group is dealt with in DeviceFS; IOCtls in this group are not
passed on to device drivers.


Changes
=======

Flags
-----

A new flag has been added to the flags word in the file structure:

bit 29	ff_NonBlocking	0:Non-blocking mode disabled for this file
			1:Non-blocking mode enabled for this file

IOCtl
-----

The args_ioctl routine has been changed to recognise with the new IOCtl group
and a couple of routines have been added to deal with this group:
ioctl_miscop ioctl_miscop_nonblock

Two new errors have been added which relate to the IOCtl handing:
DeviceFS_BadIOCtlReasonCode
DeviceFS_BadIOCtlParameter

GBPB
----

gbpb_get:
When in non-blocking mode, if gbpb_get cannot get the complete number of
requested bytes it returns with number of bytes not done in R3.

gbpb_put:
When in non-blocking mode, if gppb_put cannot output all the bytes it was
told to send it returns with the number of bytes not done in R3 and the C
flag set.
@
