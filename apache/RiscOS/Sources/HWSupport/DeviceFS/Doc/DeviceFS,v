head	4.1;
access;
symbols
	DeviceFS-0_73:4.1
	DeviceFS-0_72:4.1
	DeviceFS-0_71:4.1
	DeviceFS-0_70:4.1
	DeviceFS-0_69:4.1
	DeviceFS-0_68:4.1
	RO_5_07:4.1
	DeviceFS-0_67:4.1
	DeviceFS-0_66:4.1
	DeviceFS-0_65:4.1
	DeviceFS-0_64:4.1
	DeviceFS-0_63:4.1
	DeviceFS-0_62:4.1
	DeviceFS-0_61:4.1
	DeviceFS-0_60:4.1
	DeviceFS-0_59:4.1
	DeviceFS-0_58:4.1
	DeviceFS-0_57:4.1
	DeviceFS-0_56:4.1
	DeviceFS-0_55:4.1
	DeviceFS-0_54:4.1
	DeviceFS-0_53:4.1
	DeviceFS-0_52:4.1
	DeviceFS-0_51:4.1
	DeviceFS-0_50:4.1
	dellis_autobuild_BaseSW:4.1
	DeviceFS-0_49:4.1
	DeviceFS-0_48:4.1
	sbrodie_sedwards_16Mar2000:4.1
	DeviceFS-0_47:4.1
	dcotton_autobuild_BaseSW:4.1
	DeviceFS-0_46:4.1
	Ursula_merge:4.1
	DeviceFS-0_45:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	DeviceFS-0_44:4.1
	DeviceFS-0_43:4.1
	DeviceFS-0_42:4.1
	DeviceFS-0_41:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1
	Spinner:4.1.0.8
	Spin_merge:4.1
	Spin_merge_4Mar1998:4.1.7.1
	Spinner_4Mar1998:4.1.7
	DeviceFS_0_36:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Ursula:4.1.0.4
	Spin_merge_19May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.35.33;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.35.33;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.20.07;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.48.55;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.44.28;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@> DeviceFS

Title: DeviceFS
Author: David De Vorchik 
History:
        27-Apr-91 DDV Created.

NB: This document forms part of a set of documents describing DeviceFS, its
    SWIs and service calls.


DeviceFS
--------

DeviceFS provides a standardised interface to devices within the RISC OS
environment.  Device drivers are declared within the system and they are
seen as objects within the 'devices:' filing system.

Streams can be opened for input or output (as supported) onto these objects
within the directory structure.  A device is given the device file type of
&FCC.  A device adopts the access rights relevant to its input or output
capabilities.

A device driver is simply a set of routines that handle the input or output
of data.  The device can specifiy if it would like to be buffered, but it
will never know if this is the case.  Devices have access to the special
field passed on opening a stream, this can be used to pass extra information
about opening streams and configuration required, for instance a serial
device may contain its setup within the special field string.

DeviceFS provides a way of calling devices, DeviceFS_CallDevice with a
reason code and control registers.  All devices have to support a set of
system specific calls, but have a range of reason codes available for their
own use.  This could be used for controlling a scanner or what ever.

DeviceFS currently only supports stream devices, block devices have yet to
be implemented.

The kernel based device drivers have now been exported to use the DeviceFS
interface, this includes serial and parallel.  These devices are replaceable
modules within the RISC OS ROM set and provide working examples of how
device drivers should be developed.

Most filing system operations can be performed on objects, it is not
possible to create objects within the directory structure which are not
devices, nor is it possible to delete objects.   Data transfer operations
are supported though.

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
