head	4.2;
access;
symbols
	DeviceFS-0_73:4.2
	DeviceFS-0_72:4.1
	DeviceFS-0_71:4.1
	DeviceFS-0_70:4.1
	DeviceFS-0_69:4.1
	DeviceFS-0_68:4.1
	RO_5_07:4.1
	DeviceFS-0_67:4.1
	DeviceFS-0_66:4.1
	DeviceFS-0_65:4.1
	DeviceFS-0_64:4.1
	DeviceFS-0_63:4.1
	DeviceFS-0_62:4.1
	DeviceFS-0_61:4.1
	DeviceFS-0_60:4.1
	DeviceFS-0_59:4.1
	DeviceFS-0_58:4.1
	DeviceFS-0_57:4.1
	DeviceFS-0_56:4.1
	DeviceFS-0_55:4.1
	DeviceFS-0_54:4.1
	DeviceFS-0_53:4.1
	DeviceFS-0_52:4.1
	DeviceFS-0_51:4.1
	DeviceFS-0_50:4.1
	dellis_autobuild_BaseSW:4.1
	DeviceFS-0_49:4.1
	DeviceFS-0_48:4.1
	sbrodie_sedwards_16Mar2000:4.1
	DeviceFS-0_47:4.1
	dcotton_autobuild_BaseSW:4.1
	DeviceFS-0_46:4.1
	Ursula_merge:4.1
	DeviceFS-0_45:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	DeviceFS-0_44:4.1
	DeviceFS-0_43:4.1
	DeviceFS-0_42:4.1
	DeviceFS-0_41:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1
	Spinner:4.1.0.8
	Spin_merge:4.1
	Spin_merge_4Mar1998:4.1.7.1
	Spinner_4Mar1998:4.1.7
	DeviceFS_0_36:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Ursula:4.1.0.4
	Spin_merge_19May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2016.04.23.08.20.55;	author rool;	state Exp;
branches;
next	4.1;
commitid	PftU1Jr4aLSU5J3z;

4.1
date	96.11.05.09.35.37;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.35.37;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.21.08;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.49.32;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.44.46;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Avoid referencing free'd memory
Detail:
  The Unlink macro also released the memory back to the RMA, but in 2 cases passed the old pointer around in a service call. Change Unlink to only remove from the linked list, and add a Free macro to do the release after the service call.
Admin:
  Spotted by Colin Granville.

Version 0.73. Tagged as 'DeviceFS-0_73'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Macros

; Useful macros for building linked lists of memory blocks.

linkmacro       SETD    false
unlinkmacro     SETD    false


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Link two blocks together within the directory structures ensuring that all
; links are validated.
;
; Corrupts temp and flags
;

                MACRO
$label          Link    $parent, $linkname, $pointer, $temp

$label          LDR     $temp, $parent

                Debuga  linkmacro, "link: linking record at", $pointer
                Debug   linkmacro, ", before", $temp

                STR     $pointer, $parent                       ; make first link of block to head of list

                TEQ     $temp, #0
                STRNE   $pointer, [$temp, #$linkname._Previous] ; and setup a previous link if possible

                Debug   linkmacro, "link: back pointer set to", $temp

                STR     $temp, [$pointer, #$linkname._Next]     ; link new block to next block correctly
                MOV     $temp, #0
                STR     $temp, [$pointer, #$linkname._Previous] ; and reset new blocks previous pointer

                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Unlink blocks from the internal link list structure.
;
; next, previous and flags corrupt.
;
                MACRO
$label          Unlink  $parent, $linkname, $pointer, $next, $previous

$label
                ASSERT  $linkname._Previous = $linkname._Next + 4
                ADD     $next, $pointer, #$linkname._Next
                LDMIA   $next, {$next, $previous}               ; get links

                Debug   unlinkmacro, "unlink: unlinking record at", $pointer
                Debuga  unlinkmacro, "unlink: next pointer is", $next
                Debug   unlinkmacro, ", back pointer is", $previous

                TEQ     $previous, #0                           ; was my previous pointer back home?
                STREQ   $next, $parent                          ; yes, so store in global
                STRNE   $next, [$previous, #$linkname._Next]    ; otherwise make a new previous pointer

                TEQ     $next, #0                               ; did I have a following block?
                STRNE   $previous, [$next, #$linkname._Previous]

                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Frees blocks previously claimed from RMA.
;
; r0, r2 corrupt.
;
; r0 may point at an error block if V set.
;
                MACRO
                Free    $pointer
                MOV     r0, #ModHandReason_Free
              [ "$pointer"<>"r2"
                !       0, "free: free having to move record pointer from $pointer to r2"
                MOV     r2, $pointer                            ; ensure -> block is in r2
              ]
                SWI     XOS_Module                              ; and free the block

                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Calls buffer manager service routine
;
                MACRO
$label          CallBuffMan     $cc

$label          Push    "r12"                                   ; save our workspace ptr
                ADR$cc   r12, BuffManWkSpace                    ; place of buffman wkspace and entry
                MOV$cc   lr, pc                                 ; return address
                ASSERT  BuffManService = BuffManWkSpace+4
                LDM$cc.IA r12, {r12, pc}                        ; load buffman wkspace and entry
                Pull    "r12"                                   ; restore our workspace ptr

                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                END
@


4.1
log
@Initial revision
@
text
@d61 1
a61 3
; r0, r2 and next, previous corrupt.
;
; r0 may point at an error block if V set.
d82 17
d101 1
a101 1
                !       0, "unlink: unlink having to move record pointer from $pointer to r2"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
