head	4.5;
access;
symbols
	DeviceFS-0_73:4.5
	DeviceFS-0_72:4.5
	DeviceFS-0_71:4.5
	DeviceFS-0_70:4.5
	DeviceFS-0_69:4.5
	DeviceFS-0_68:4.4
	RO_5_07:4.4
	DeviceFS-0_67:4.4
	DeviceFS-0_66:4.4
	DeviceFS-0_65:4.4
	DeviceFS-0_64:4.4
	DeviceFS-0_63:4.3
	DeviceFS-0_62:4.3
	DeviceFS-0_61:4.3
	DeviceFS-0_60:4.3
	DeviceFS-0_59:4.2
	DeviceFS-0_58:4.2
	DeviceFS-0_57:4.2
	DeviceFS-0_56:4.2
	DeviceFS-0_55:4.2
	DeviceFS-0_54:4.2
	DeviceFS-0_53:4.2
	DeviceFS-0_52:4.2
	DeviceFS-0_51:4.2
	DeviceFS-0_50:4.2
	dellis_autobuild_BaseSW:4.2
	DeviceFS-0_49:4.2
	DeviceFS-0_48:4.2
	sbrodie_sedwards_16Mar2000:4.2
	DeviceFS-0_47:4.2
	dcotton_autobuild_BaseSW:4.2
	DeviceFS-0_46:4.1
	Ursula_merge:4.1
	DeviceFS-0_45:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	DeviceFS-0_44:4.1
	DeviceFS-0_43:4.1
	DeviceFS-0_42:4.1
	DeviceFS-0_41:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1
	Spinner:4.1.0.8
	Spin_merge:4.1
	Spin_merge_4Mar1998:4.1.7.1
	Spinner_4Mar1998:4.1.7
	DeviceFS_0_36:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Ursula:4.1.0.4
	Spin_merge_19May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2013.05.18.09.40.49;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	Xd3sF1osfeqHX5Qw;

4.4
date	2003.03.03.09.59.06;	author rsprowson;	state Exp;
branches;
next	4.3;

4.3
date	2001.12.06.14.38.39;	author mboura;	state Exp;
branches;
next	4.2;

4.2
date	99.12.10.12.41.30;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.35.37;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.35.37;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.21.13;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.49.35;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.44.48;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Fixes to special string parsing
FSystem.s:
* the open[in|out] operations cleared any flags that HandleSpecial collected
* reversed the sense of [no]block
Special.s:
* rewind the input pointer too, otherwise parameters must be in the same ascending order as the validation string

Ref http://www.riscosopen.org/forum/forums/3/topics/1888

Version 0.69. Tagged as 'DeviceFS-0_69'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Special (special field decoding, one mean mother!)



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                MakeErrorBlock DeviceFS_SpecialFieldSyntax
                MakeErrorBlock DeviceFS_BadValidation

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: DecodeSpecial
;
; in:   r6 -> special field string
;       fr (r8) -> file record
;
; out:  r6 -> RMA block containing decoded special field / =0 if not made
;
; To decode the special fields we use a very cunning trick.  This goes something like this,
; first calculate how much workspace is needed to build the following string:
;
;       [ special field string ]<DeviceFS$ device name $Options>
;
; We then claim that and build the string into the workspace.  Once done we can then
; GSTrans the string, this gives us the special field and the options variable.  The
; decoding software for the special field will always scan from the start of the
; special field and will always land on the over riding parameters in the
; special field and the ones expanded from the variable will be ignored.
;
; The validation string is made from putting my set of defaults and the specified
; ones from the device together in a block within the RMA.  Again this is used
; for parsing.  Once complete we can then free up this memory leaving the parsed block.
;

DecodeSpecial   ROUT

                Push    "r0-r5, r7-r8, dr, pr, lr"

                TEQ     r6, #0
                ADDR    r6, null, EQ                            ; if no special field then make -> null

                DebugS  special, "special field string specified ", r6

                LDR     pr, [fr, #file_Parent]
                LDR     dr, [fr, #file_Device]                  ; setup the parent and device records

                MOV     r7, #0                                  ; no area for expanding fields yet!
                MOV     r8, #0                                  ; -> temp block (not allocated yet!)
                                                                ; NB r8=fr so we can't zero this earlier
                LDRB    r3, [dr, #device_NameLength]
                ADD     r3, r3, #(?devicevarbits)+2             ;  = size of device var bits

                MOV     r4, #0
00
                LDRB    r0, [r6, r4]
                TEQ     r0, #0
                ADDNE   r4, r4, #1
                BNE     %00                                     ; count special field string length

                ADD     r3, r3, r4
                ADD     r3, r3, #?internal

                LDR     r4, [pr, #parent_Validation]            ; get pointer to validation string
                CMP     r4, #0
                ADDR    r4, null, EQ                            ; -> null string (if 0 passed)
10
                LDRB    r0, [r4], #1
                TEQ     r0, #0
                ADDNE   r3, r3, #1
                BNE     %10                                     ; count number of characters

                MOV     r0, #ModHandReason_Claim
                ADD     r3, r3, #3
                BIC     r3, r3, #3                              ; get size of block needed (word align)
                SWI     XOS_Module                              ; attempt to claim it
                BVS     %90

                MOV     r7, r2                                  ; -> first temp area

                MOV     r0, r6
                MOV     r1, r7
                BL      CopyNoTerm                              ; copy special field string into workspace
                MOV     r2, #";"
                STRB    r2, [r1], #1                            ; just-in-case!
                MOV     r2, #"<"
                STRB    r2, [r1], #1
                ADDR    r0, devicevarbits                       ; -> 'DeviceFS$'
                BL      CopyNoTerm                              ; copy prefix to system var name
                Push    "r0"
                LDR     r0, [dr, #device_DeviceName]
                BL      CopyNoTerm
                Pull    "r0"
                BL      CopyNoTerm                              ; build system variable name into workspace
                MOV     r2, #">"
                STRB    r2, [r1], #1
                MOV     r2, #0
                STRB    r2, [r1], #1                            ; and then terminate

                ADDR    r0, internal                            ; -> internal parsing block
                MOV     r5, r1
                BL      CopyNoTerm
                LDR     r0, [pr, #parent_Validation]
                CMP     r0, #0
                ADDR    r0, null, EQ
                BL      CopyString                              ; and append the one from the device

                DebugS  special, "string to be expanded ", r7

                MOV     r3, #0                                  ; size of current block needed

                MOV     r0, r7                                  ; -> string to start GS transing
                MOV     r2, #0
                SWI     XOS_GSInit
                BVS     %90                                     ; it won't let me so lets go home
15
                SWI     XOS_GSRead
                MOVCS   r1, #0                                  ; if end of string then terminate with null

                Push    "r0-r3"

                MOVS    r2, r8                                  ; -> temp buffer
                MOVEQ   r0, #ModHandReason_Claim
                MOVNE   r0, #ModHandReason_ExtendBlock
                ADD     r3, r3, #1                              ; new size (including space for character)
                SWI     XOS_Module
                ADDVS   sp, sp, #16
                BVS     %90                                     ; if OS_Module dies then return

                MOV     r8, r2                                  ; -> new block in RMA (it may have moved)
                Pull    "r0-r3"

                STRB    r1, [r8, r3]
                ADD     r3, r3, #1                              ; update size/index register

                TEQ     r1, #0                                  ; end of string yet?
                BNE     %15                                     ; still loop whilst non-zero

                DebugS  special, "expanded validation ",r8

                MOV     r0, r8
                MOV     r1, r5
                MOV     r2, #0                                  ; get size of block needed
                BL      ScanSpecial
                MOVVC   r0, #ModHandReason_Claim
                MOVVC   r3, r2                                  ; size of next block needed
                SWIVC   XOS_Module
                BVS     %90                                     ; return any errors

                MOV     r6, r2                                  ; -> temp block (use new error routine from now on)

                MOV     r0, r8
                MOV     r1, r5
                BL      ScanSpecial                             ; decode the block and see the results in r6
                BVS     %85                                     ; oh no, its gone spako!

                MOV     r0, #ModHandReason_Free
                MOV     r2, r8
                SWI     XOS_Module                              ; free first temporary block
                MOV     r2, r7
                SWI     XOS_Module                              ; free second temporary block

                Pull    "r0-r5, r7-r8, dr, pr, lr"
                RETURNVC                                        ; ensure that V clear
85
                Push    "r0"
                MOV     r0, #ModHandReason_Free
                MOV     r2, r6
                SWI     XOS_Module                              ; release special field string
                MOV     r6, #0                                  ; -> block 0, ie. none
                Pull    "r0"
90
                STR     r0, [sp, #CallerR0]

                MOV     r0, #ModHandReason_Free

                MOVS    r2, r7
                SWINE   XOS_Module                              ; attempt to release the block
                MOVS    r2, r8
                SWINE   XOS_Module                              ; free transing block

                Pull    "r0-r5, r7-r8, dr, pr, lr"
                RETURNVS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ScanSpecial
;
; in:   r0 -> special field string
;       r1 -> validation string
;       r2 -> return buffer
;
; out:  V set, r0 -> error block
;       V clear.
;
; This code scans the special field string.  The return buffer is set to contain
; &DEADDEAD as a default value, this is then overwritten with either a numerical
; value, switch state or pointer to a return string.
;
; Numerical values are placed directly into the buffer, and strings are addressed
; by the word.  A switch is defined by several states (ie. several different
; keywords), the number of the keyword which matches the given string is then
; placed into the buffer.
;
; The format for validation strings is:
;
; <keyword>/<type>
;
; A string can have multiple keywords, these either act as aliases for a specified
; string or as a set of states for a switch, each section of the keyword is seperated
; by a comma.
;
; The type field describes what sort of data it is, ie. switch or number, string.
;
; /S    - switch
; /N    - followed by a number
; /G    - GSTrans'd string                              - NYI
;
; A keyword can have multiple strings or numbers following it, but specifing
; /S multiple times will give a syntax error.
;
; Syntax errors are also given if there are more unknown strings within the field
; that do not match the specified validation string.
;

ScanSpecial     ROUT

                Push    "r0-r1, r3-r8, lr"

                DebugS  special, "string to scan ", r0
                DebugS  special, "using validation string ", r1
                Debug   special, "return data at", r2

                MOV     r3, r2                                  ; -> return buffer
                MOV     r4, r1                                  ; -> validation string
                LDR     r5, =&DEADDEAD
10
                LDRB    r6, [r4], #1
                TEQ     r6, #"/"                                ; introduce a special command?
                BNE     %20                                     ; no, so loop again

                LDRB    r6, [r4], #1
                ASCII_UpperCase r6, lr                                ; ensure that it is upper case

                TEQ     r6, #"S"                                ; switch or number
                TEQNE   r6, #"N"
                ADDR    r0, ErrorBlock_DeviceFS_BadValidation, NE
                BNE     %95                                     ; not a valid escape sequence

                CMP     r3, #&8000
                STRCS   r5, [r3], #4                            ; write a keyword block
                ADDCC   r3, r3, #4
                B       %10                                     ; and loop again
20
                TEQ     r6, #0                                  ; end of the string yet?
                BNE     %10                                     ; no, so loop until end reached

                Debug   special, "end of return tokens", r3
30
                MOV     r4, #0                                  ; new switch, so reset result to 0
35
                MOV     r5, r1                                  ; rewind point within validation string
40
                LDRB    r6, [r0]
                LDRB    r7, [r5]                                ; get characters

                ASCII_UpperCase r6, lr                                ; ensure the same case
                ASCII_UpperCase r7, lr

                SUBS    lr, r6, #"A"                            ; check for alphabetic character
                CMP     lr, #"Z"+1-"A"                          ; *** fixed TMD 21-Jan-92 (was #"A"-"Z")
                MOVCS   r6, #0                                  ; not so convert to a null

                TEQ     r7, #"/"
                TEQNE   r7, #","
                MOVEQ   r8, #0
                MOVNE   r8, r7                                  ; get character from validation

                TEQ     r6, r8
                BNE     %60                                     ; are they the same?

                TEQ     r6, #0
                ADDNE   r0, r0, #1
                ADDNE   r5, r5, #1                              ; advance the character
                BNE     %40                                     ; and try another character

                BL      handle_escape
                BVS     %90                                     ; it went wrong so report the error

                LDRB    r7, [r5]
45
                TEQ     r7, #0                                  ; end of sequence?
                MOVNE   r1, r5
                LDRNE   r0, [sp, #CallerR0]
                BNE     %30                                     ; loop back reseting the rewind pointer
50
                Pull    "r0-r1, r3-r8, lr"
                RETURNVC                                       ; ensure that V clear on exit (ie. it worked, r2 =size)
60
                LDRB    r7, [r0], #1
                TEQ     r7, #0
                BEQ     %70                                     ; end of string so ignore this one its not being used

                TEQ     r7, #";"
                BNE     %60                                     ; loop back until a suitable code, ie. start of new command
                B       %35                                     ; and try it again same (with new keyword)
70
                LDRB    r7, [r1]
                TEQ     r7, #0                                  ; end of validation string?
                BEQ     %50                                     ; yes, so give up now matey

                TEQ     r7, #"/"
                ADDNE   r1, r1, #1                              ; if not escape then skip
                TEQNE   r7, #","
                BNE     %70                                     ; loop back until start/end of something interesting

                LDR     r0, [sp, #CallerR0]

                TEQ     r7, #","
                ADDEQ   r4, r4, #1                              ; new switch case
                BEQ     %35
75
                TEQ     r7, #"/"                                ; another escape code?
                ADDEQ   r2, r2, #4
                LDREQB  r7, [r1, #2]!
                BEQ     %75                                     ; loop back until all checked

                MOV     r5, r1
                B       %45

; external error

90
                ADD     sp, sp, #4
                Pull    "r1, r3-r8, lr"
                RETURNVS                                        ; ensure that overflow set on exit

; internal error

95
                ADD     sp, sp, #4
                Pull    "r1, r3-r8, lr"
                DoError

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle_escape
;
; This code decodes the escape sequences following the keyword.  The routine
; must first locate the escape sequences start and then write to the
; return buffer at r2.
;

handle_escape   ROUT

                Push    "lr"
00
                LDRB    r7, [r5], #1
                TEQ     r7, #"/"                                ; start of escape sequences?
                BNE     %00                                     ; loop until start of escapes found

                LDRB    r7, [r5], #1
                ASCII_UpperCase r7, lr                                ; get escape sequence identifier

                Debug   special, "escape character", r7

                TEQ     r7, #"S"                                ; is it a switch?
                BNE     %10

                CMP     r2, #&8000                              ; just reading the size instead?
                STRCS   r4, [r2], #4
                ADDCC   r2, r2, #4
                B       %90

; must be "N", since the parent routine has checked it's one or the other

10
                LDRB    r7, [r0]
                TEQ     r7, #"="                                ; if its a number then can be preceded
                ADDEQ   r0, r0, #1                              ; by "=", so skip it now
20
                DebugS  special, "read number from ", r0

                Push    "r1-r2"
                MOV     r1, r0                                  ; -> number string to be decoded
                MOV     r0, #10
                SWI     XOS_ReadUnsigned                        ; get number from search string
                MOVVC   r0, r1
                MOVVC   r7, r2                                  ; setup temp value +new index
                Pull    "r1-r2"
                Pull    "pc", VS                                ; and pull PC if it went wrong!

                Debuga  special, "decoding number yielded", r7
                Debug   special, ", stored at", r2

                CMP     r2, #&8000                              ; am I supposed to write the data
                STRCS   r7, [r2], #4
                ADDCC   r2, r2, #4                              ; well what the heck!

; a keyword has been decoded so we can now attempt to find the next thingi in
; the validation string, if this is not an escape sequence.

50
                LDRB    r7, [r0]
                TEQ     r7, #"."
                TEQNE   r7, #";"
                ADDEQ   r0, r0, #1                              ; skip the seperators...

                TEQ     r7, #0
                TEQNE   r7, #";"                                ; if an end of doofer sequence then skip
                BNE     %60
55
                LDRB    r7, [r5]
                TEQ     r7, #"/"                                ; start of an escape sequence?
                ADDEQ   r2, r2, #4
                ADDEQ   r5, r5, #2
                BEQ     %55

                B       %90                                     ; no, so leave now!
60
                LDRB    r7, [r5]
                TEQ     r7, #"/"                                ; is it another escape sequence
                LDREQB  r7, [r5, #1]
                ADDEQ   r5, r5, #2
                BEQ     %20                                     ; yes, so load the escape command and try again.
90
                Pull    "lr"
                RETURNVC                                        ; ensure V clear on exit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



                END
@


4.4
log
@A signed string pointer comparison was stopping USBdriver from finding
valid endpoints when ROMmed,as the special string it registers with was
at a -ve address.
Changed to behave per the PRM (only 0 is important).
That was a git to find!

Version 0.64. Tagged as 'DeviceFS-0_64'
@
text
@d317 1
@


4.3
log
@Fix of nasty interrupt hole
Detail:
Fixed by Dan Ellis
Admin:
He tested it, and it worked

Version 0.60. Tagged as 'DeviceFS-0_60'
@
text
@d84 1
a84 1
                ADDR    r4, null, LE                            ; -> null string (if <=0)
d123 1
a123 1
                ADDR    r0, null, LE
@


4.2
log
@  32-bit compatibility added.
Detail:
  Also fixed faulty debug code which tried to report the escape state,
    but would have always failed to do.
Admin:
  Tested Phoebe and 32 machine builds.  Tested on Risc PC.

Version 0.47. Tagged as 'DeviceFS-0_47'
@
text
@d266 1
a266 1
                UpperCase r6, lr                                ; ensure that it is upper case
d290 2
a291 2
                UpperCase r6, lr                                ; ensure the same case
                UpperCase r7, lr
d390 1
a390 1
                UpperCase r7, lr                                ; get escape sequence identifier
@


4.1
log
@Initial revision
@
text
@d182 1
a182 1
                BICS    pc, lr, #V_bit                          ; ensure that V clear
d201 1
a201 1
                ORRS    pc, lr, #V_bit
d320 1
a320 1
                BICS    pc, lr, #V_bit                          ; ensure that V clear on exit (ie. it worked, r2 =size)
d358 1
a358 1
                ORRS    pc, lr, #V_bit                          ; ensure that overflow set on exit
d455 1
a455 1
                BICS    pc, lr, #V_bit                          ; ensure V clear on exit
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
