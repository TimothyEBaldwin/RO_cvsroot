head	4.1;
access;
symbols
	BatMgr-0_25:4.1
	BatMgr-0_24:4.1
	Ursula_merge:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.34.37;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.34.37;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.10.03;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.41.30;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.40.14;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        SUBT    Macros -> Source.Macros

; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
;
;
; 11-Dec-91  18:06  CDP
; First version.
;
; 11-Mar-92  10:44  CDP
; Debug macros removed.
;
;
;*End of change record*

;******************************************************************************

; Declare word-aligned space
;
        MACRO
$lab    a4      $size           ;allocate word aligned register relative
        ASSERT  (:INDEX: {VAR}) :MOD: 4=0
$lab    #       $size
        MEND


;******************************************************************************

; Macro to load an immediate value into a register
; Using in order of preference:
;
;    1. MOV     Rn,#x
;
;    2. MOV     Rn,#m
;       ORR     Rn,Rn,#n
;
;    3. MOV     Rn,#m
;       BIC     Rn,Rn,#n
;
;    4. LDR     Rn,=x

                GBLL    ldimm_verbose1
                GBLL    ldimm_verbose2
ldimm_verbose1  SETL    {FALSE}
ldimm_verbose2  SETL    {FALSE}

        MACRO
        LDIMM   $reg,$var,$cc
        LCLA    shift
        LCLA    varcopy
        LCLA    tmp
varcopy SETA    $var
shift   SETA    0
        WHILE   ((varcopy:AND:&FFFFFF00) <> 0) :LAND: (shift <= 30)
shift   SETA    shift + 2
varcopy SETA    varcopy:ROR:2
        WEND
        [       (varcopy:AND:&FFFFFF00) = 0
        MOV$cc  $reg,#$var
        MEXIT
        ]
varcopy SETA    $var
shift   SETA    0
        WHILE   ((varcopy:AND:&FFFF0000) <> 0) :LAND: (shift <= 30)
shift   SETA    shift + 2
varcopy SETA    varcopy:ROR:2
        WEND
        [       (varcopy:AND:&FFFF0000) = 0
tmp     SETA    $var :AND: (&FF :ROL: shift)
        MOV$cc  $reg,#&$tmp
tmp     SETA    $var :AND: (&FF00 :ROL: shift)
        ORR$cc  $reg,$reg,#&$tmp
        [       ldimm_verbose1
tmp     SETA    $var
        !       0,"LDIMM $reg,$var (&$tmp) needed MOV/ORR"
        ]
        MEXIT
        ]
varcopy SETA    $var
shift   SETA    0
        WHILE   ((varcopy:OR:&FF) <> &FFFFFFFF) :LAND: (shift <= 30)
shift   SETA    shift + 2
varcopy SETA    varcopy:ROR:2
        WEND
        [       (varcopy:OR:&FF) = &FFFFFFFF
        MOV$cc  $reg,#$var
        MEXIT
        ]
varcopy SETA    $var
shift   SETA    0
        WHILE   ((varcopy:OR:&FFFF) <> &FFFFFFFF) :LAND: (shift <= 30)
shift   SETA    shift + 2
varcopy SETA    varcopy:ROR:2
        WEND
        [       (varcopy:OR:&FFFF) = &FFFFFFFF
tmp     SETA    (varcopy:OR:&FF) :ROL: shift
        MOV$cc  $reg,#&$tmp
tmp     SETA    (:NOT:(varcopy:OR:&FF00)) :ROL: shift
        BIC$cc  $reg,$reg,#&$tmp
        [       ldimm_verbose1
tmp     SETA    $var
        !       0,"LDIMM $reg,$var (&$tmp) needed MOV/BIC"
        ]
        MEXIT
        ]
        LDR$cc  $reg,=$var
        [       ldimm_verbose2
tmp     SETA    $var
        !       0,"LDIMM $reg,$var (&$tmp) needed LDR"
        ]
        MEXIT
        MEND

;******************************************************************************

        END
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
