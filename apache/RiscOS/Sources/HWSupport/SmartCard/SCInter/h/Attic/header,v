head	4.2;
access;
symbols
	SCInter-0_17-1_1_2_4:4.1.7.4
	SCInter-0_17-1_1_2_3:4.1.7.4
	SCInter-0_17-1_1_2_2:4.1.7.4
	afrost_Funai01-33:4.1.7.3
	afrost_NC2_Generic:4.1.7.3
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.2
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.5
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.2
date	98.12.11.19.10.20;	author smiddle;	state dead;
branches;
next	4.1;

4.1
date	96.11.21.12.07.02;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.12.07.02;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.55.10;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.05.09.15.55.57;	author rbuckley;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.05.30.15.57.24;	author rbuckley;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	98.11.24.12.13.29;	author apirozek;	state Exp;
branches;
next	4.1.7.5;

4.1.7.5
date	98.12.11.19.06.00;	author smiddle;	state dead;
branches;
next	;


desc
@@


4.2
log
@Moved to trunk.

Version 0.18. Tagged as 'SCInter-0_18'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Created by cmhg vsn 5.02 [Mar  7 1995]
 */

#ifndef __cmhg_defs_h
#define __cmhg_defs_h

#define  SCInterface_00        0x04d340
#define  SCInterface_Create    0x04d340
#define  SCInterface_Delete    0x04d341
#define  SCInterface_Read      0x04d342
#define  SCInterface_Write     0x04d343
#define  SCInterface_GetATR    0x04d344
#define  SCInterface_ChangeCHV  0x04d345
#define  SCInterface_EnableCHV  0x04d346
#define  SCInterface_UnBlockCHV  0x04d347
#define  SCInterface_FileInfo  0x04d348
#define  SCInterface_InternalAuth  0x04d349
#define  SCInterface_Status    0x04d34a

#define  CMD_SCInterInfo       0

#endif
@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Major re-work of debugging code so support the remote debug library.
Removal of arh.h dependancy and any other bits of windows legacy code.
@
text
@d16 1
a16 1
 * Created by cmhg vsn 5.15 [Feb 14 1997]
d19 2
a20 2
#ifndef __cmhg_header_h
#define __cmhg_header_h
d22 12
a33 3
#ifndef __kernel_h
#include "kernel.h"
#endif
d35 1
a35 183
#define CMHG_VERSION 515

#define Module_Title                     "SCInterface"
#define Module_Help                      "SCInterface"
#define Module_VersionString             "0.14"
#define Module_VersionNumber             14
#define Module_Date                      "07 May 1997"


/*
 * Initialisation code
 * ===================
 *
 * Return NULL if your initialisation succeeds; otherwise return a pointer
 * to an error block. cmd_tail points to the string of arguments with which
 * the module is invoked (may be "").
 * podule_base is 0 unless the code has been invoked from a podule.
 * pw is the 'R12' value established by module initialisation. You may
 * assume nothing about its value (in fact it points to some RMA space
 * claimed and used by the module veneers). All you may do is pass it back
 * for your module veneers via an intermediary such as SWI OS_CallEvery
 * (use _swix() to issue the SWI call).
 */
_kernel_oserror *module_initialise(char *cmd_tail, int podule_base, void *pw);


/*
 * Finalisation code
 * =================
 *
 * Return NULL if your finalisation succeeds. Otherwise return a pointer to
 * an error block if your finalisation handler does not wish to die (e.g.
 * toolbox modules return a 'Task(s) active' error).
 * fatal, podule and pw are the values of R10, R11 and R12 (respectively)
 * on entry to the finalisation code.
 */
_kernel_oserror *module_finalise(int fatal, int podule, void *pw);


/*
 * Service call handler
 * ====================
 *
 * Return values should be poked directly into r->r[n]; the right
 * value/register to use depends on the service number (see the relevant
 * RISC OS Programmer's Reference Manual section for details).
 * pw is the private word (the 'R12' value).
 */
void module_service(int service_number, _kernel_swi_regs *r, void *pw);


/*
 * Command handler
 * ===============
 *
 * If cmd_no identifies a command, then arg_string gives the command tail
 * (which you may not overwrite), and argc is the number of parameters.
 * Return NULL if the command has been successfully handled; otherwise
 * return a pointer to an erro block describing the failure (in this
 * case, the veneer code will set the 'V' bit).
 *
 * If cmd_no identifies a *Help entry, then arg_string denotes a buffer
 * that you can assemble your output into. cmd_handler must return
 * NULL, an error pointer or help_PRINT_BUFFER (if help_PRINT_BUFFER)
 * is returned, the NUL-terminated buffer will be printed).
 *
 * If cmd_no identifies a *Configure option, then arg_string gives the
 * command tail, and argc the number of parameters. Return NULL, an error
 * pointer, or one of the four special values defined below. If arg_string
 * is set to arg_CONFIGURE_SYNTAX, the user has typed *Configure with no
 * parameter; simply print your syntax string. If arg_string is set to
 * arg_STATUS, print your current configured status. Otherwise use
 * arg_string and argc to set the *Configure option.
 *
 * pw is the private word pointer ('R12') value passed into the entry
 * veneer
 */
#define help_PRINT_BUFFER         ((_kernel_oserror *) arg_string)
#define arg_CONFIGURE_SYNTAX      ((char *) 0)
#define arg_STATUS                ((char *) 1)
#define configure_BAD_OPTION      ((_kernel_oserror *) -1)
#define configure_NUMBER_NEEDED   ((_kernel_oserror *) 1)
#define configure_TOO_LARGE       ((_kernel_oserror *) 2)
#define configure_TOO_MANY_PARAMS ((_kernel_oserror *) 3)

#define CMD_SCInterInfo                 0

_kernel_oserror *module_cli(char *arg_string, int argc, int cmd_no, void *pw);


/*
 * SWI handler code
 * ================
 *
 * Return NULL if the SWI is handled successfully; otherwise return
 * a pointer to an error block which describes the error.
 * The veneer code sets the 'V' bit if the returned value is non-NULL.
 * The special value error_BAD_SWI may be returned if you do not
 * implement a SWI; the veneer will arrange for the appropriate
 * standard internationalised error 'SWI value out of range for
 * module SCInterface' to be returned.
 * The handler may update any of its input registers (R0-R9).
 * pw is the private word pointer ('R12') value passed into the
 * SWI handler entry veneer.
 */
#define SCInterface_00                  0x04d340
#ifndef SCInterface_Create
#define SCInterface_Create              0x04d340
#define SCInterface_Delete              0x04d341
#define SCInterface_Read                0x04d342
#define SCInterface_Write               0x04d343
#define SCInterface_GetATR              0x04d344
#define SCInterface_ChangeCHV           0x04d345
#define SCInterface_EnableCHV           0x04d346
#define SCInterface_UnBlockCHV          0x04d347
#define SCInterface_FileInfo            0x04d348
#define SCInterface_InternalAuth        0x04d349
#define SCInterface_Status              0x04d34a
#endif

#define error_BAD_SWI ((_kernel_oserror *) -1)

_kernel_oserror *module_swi(int swi_no, _kernel_swi_regs *r, void *pw);


/*
 * Generic veneers
 * ===============
 *
 * This is the name of the generic entry veneer compiled by CMHG.
 * Use this name as an argument to, for example, SWI OS_CallEvery
 * or OS_AddCallBack.
 *
 * These veneers ensure that your handlers preserve R0-R11
 * and the processor flags (unless you return an error pointer.
 * The veneer can be entered in either IRQ or SVC mode. R12 and
 * R14 are corrupted.
 */
extern void sc_event_entry(void);

/*
 * This is the handler function that the veneer declared above
 * calls.
 *
 * For a standard exit, return NULL. For handlers that can return an
 * error, return an error block pointer, and the veneer will set the
 * 'V' bit, and set R0 to the error pointer.
 *
 * 'r' points to a vector of words containing the values of R0-R9 on
 * entry to the veneer. If r is updated, the updated values will be
 * loaded into R0-R9 on return from the handler.
 *
 * pw is the private word pointer ('R12') value with which the
 * entry veneer is called.
 */
_kernel_oserror *sc_event_handler(_kernel_swi_regs *r, void *pw);


/*
 * Event handler
 * =============
 *
 * This is the name of the event handler entry veneer compiled by CMHG.
 * Use this name as an argument to, for example, SWI OS_Claim, in
 * order to attach your handler to EventV.
 */
extern void event_entry(void);

/*
 * This is the handler function you must write to handle the event for
 * which event_entry is the veneer function.
 *
 * Return 0 if you wish to claim the event.
 * Return 1 if you do not wish to claim the event.
 *
 * 'r' points to a vector of words containing the values of R0-R9 on
 * entry to the veneer. If r is updated, the updated values will be
 * loaded into R0-R9 on return from the handler.
 *
 * pw is the private word pointer ('R12') value with which the event
 * entry veneer is called.
 */
int event_handler(_kernel_swi_regs *r, void *pw);
@


4.1.7.3
log
@Added a new bit of interface to SCInterface_FileInfo that interrprets data
depending on which type of card in inserted.
@
text
@d30 3
a32 3
#define Module_VersionString             "0.15"
#define Module_VersionNumber             15
#define Module_Date                      "22 May 1997"
@


4.1.7.4
log
@Modified to work with Funai3 T=1 cards

Version 0.17, 1.1.2.2. Tagged as 'SCInter-0_17-1_1_2_2'
@
text
@d16 1
a16 1
 * Created by cmhg vsn 5.20 [15 Jun 1998]
d26 1
a26 1
#define CMHG_VERSION 520
d30 3
a32 5
#define Module_VersionString             "0.18"
#define Module_VersionNumber             18
#ifndef Module_Date
#define Module_Date                      "18 Nov 1998"
#endif
d41 1
a41 2
 * the module is invoked (may be "", and is control-terminated, not zero
 * terminated).
d49 1
a49 1
_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base, void *pw);
d84 1
a84 1
 * return a pointer to an error block describing the failure (in this
d90 1
a90 1
 * is returned, the zero-terminated buffer will be printed).
d113 1
a113 1
_kernel_oserror *module_cli(const char *arg_string, int argc, int cmd_no, void *pw);
a119 3
 * swi_offset contains the offset of the SWI into your SWI chunk.
 * r points to the registers passed to the SWI.
 *
d148 1
a148 1
_kernel_oserror *module_swi(int swi_offset, _kernel_swi_regs *r, void *pw);
@


4.1.7.5
log
@ Started implementing support for monitoring going in and out of
> Standby mode. New state WaitingStandby and two new transitions
> Shutdown and Standby added to state machine. Plus added appropriate
> bits to the service call handler.
> Also tidied up a few error messages and included VersionNum file in
> cmhg header.

Version 0.17, 1.1.2.5. Tagged as 'SCInter-0_17-1_1_2_5'
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
