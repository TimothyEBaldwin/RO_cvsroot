head	4.4;
access;
symbols
	SCInter-0_27:4.4
	dellis_autobuild_BaseSW:4.4
	SCInter-0_26:4.4
	sbrodie_sedwards_16Mar2000:4.4
	SCInter-0_25:4.4
	SCInter-0_24:4.4
	wturner_scinter2:4.1.7.3
	wturner_scinter1:4.1.7.3
	SCInter-0_23:4.4
	SCInter-0_22:4.4
	SCInter-0_21:4.4
	dcotton_autobuild_BaseSW:4.4
	dcotton_scinter_MPTInitialBuild:4.1.7.3
	SCInter-0_20:4.4
	SCInter-0_19:4.4
	SCInter-0_18:4.2
	SCInter-0_17-1_1_2_5:4.1.7.3
	SCInter-0_17-1_1_2_4:4.1.7.3
	SCInter-0_17-1_1_2_3:4.1.7.3
	SCInter-0_17-1_1_2_2:4.1.7.3
	afrost_Funai01-33:4.1.7.3
	afrost_NC2_Generic:4.1.7.3
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.2
	Spinner_B7:4.1.7.2
	ARTtmp_merge:4.1.7.2
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	ARTtmp:4.1.7.2.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.4
date	99.01.04.15.56.51;	author apirozek;	state Exp;
branches;
next	4.3;

4.3
date	98.12.16.16.20.26;	author apirozek;	state Exp;
branches;
next	4.2;

4.2
date	98.12.11.19.10.26;	author smiddle;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.12.07.03;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.12.07.03;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.55.15;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.01.29.13.51.10;	author rbuckley;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.05.30.15.57.26;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Integrated restart callback handler into main handler code
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef __sctrans_h
#define __sctrans_h

/*
 * constant definitions
 */
#define SCTransport_Open         (0x4d400)
#define SCTransport_RetrieveATR  (0x4d401)
#define SCTransport_Close        (0x4d402)
#define SCTransport_IssueCommand (0x4d403)
#define SCTransport_ReadResponse (0x4d404)
#define SCTransport_StartTrans   (0x4d405)
#define SCTransport_EndTrans     (0x4d406)
#define SCTransport_Error        (0x4d407)
#define SCTransport_GetErrorText (0x4d408)
#define SCTransport_PowerControl (0x4d40d)

/*
 * return codes
 */
#define SCI_SUCCESS      (0)
#define SCI_FAIL         (-1)

/*
 * event reason codes
 */
#define SCI_REMOVED      (1)
#define SCI_INSERTED     (2)
#define SCI_TRANS_END    (3)
#define SCI_CMD_DONE     (4)
#define SCI_ERROR        (5)
#define SCI_STANDBY      (6)

/*
 * error reason codes
 */
#define SCI_E_SEQ        (1)
#define SCI_E_INVAL      (2)
#define SCI_E_NODATA     (3)
#define SCI_E_TRANS      (4)
#define SCI_E_TRUNC      (5)
#define SCI_E_SYS        (6)
#define SCI_E_API        (7)
#define SCI_E_TOOMANY    (8)
#define SCI_E_PROTO      (9)
#define SCI_E_COMMS      (10)
#define SCI_E_OUT        (11)

#ifdef MINIJIS_CARD
/*
 * power states
 */
#define SCI_POWER_DOWN    (1)
#define SCI_POWER_UP      (0)
#endif
/* ------------------------------------------------------------------------
 * Function:      sctransport_open()
 *
 * Description:   Establish a connection to the smart card.
 *
 * Input:         msg_id - value of R0 on entry
 *
 * Returns:       R0
 */

int sctransport_open(int msg_id, int *card_hnd);

/* ------------------------------------------------------------------------
 * Function:      sctransport_retrieve_atr()
 *
 * Description:   Retrieve answer-to-reset data from card
 *
 * Input:         card_hnd - value of R0 on entry
 *                hist - value of R1 on entry
 *                hist_len - value of R2 on entry
 *                rcv_len - value of R3 on entry
 *
 * Returns:       R0
 */

int sctransport_retrieve_atr(int card_hnd, unsigned char *hist,
    			     int hist_len, int *rcv_len);

/* ------------------------------------------------------------------------
 * Function:      sctransport_close()
 *
 * Description:   Close a connection to a smart card
 *
 * Input:         card_hnd - value of R0 on entry
 *
 * Returns:       R0
 */

int sctransport_close(int card_hnd);

/* ------------------------------------------------------------------------
 * Function:      sctransport_issue_command()
 *
 * Description:   Send a command to the smart card
 *
 * Input:         card_hnd - value of R0 on entry
 *                cmd_hdr - value of R1 on entry
 *                data_len - value of R2 on entry
 *                data - value of R3 on entry
 *                exp_len - value of R4 on entry
 *
 * Returns:       R0
 */

int sctransport_issue_command(int card_hnd, unsigned char *cmd_hdr,
    			      int data_len, unsigned char *data, int exp_len);

/* ------------------------------------------------------------------------
 * Function:      sctransport_read_response()
 *
 * Description:   Obtains smart card response to previous command
 *
 * Input:         card_hnd - value of R0 on entry
 *                buff - value of R1 on entry
 *                buff_len - value of R2 on entry
 *                rcv_len - value of R3 on entry
 *                resp - value of R4 on entry
 *
 * Returns:       R0
 */

int sctransport_read_response(int card_hnd, unsigned char *buff,int buff_len,
      			      int *rcv_len, unsigned char *resp);

/* ------------------------------------------------------------------------
 * Function:      sctransport_start_trans()
 *
 * Description:   Locks the card to a particular card handle connection
 *
 * Input:         card_hnd - value of R0 on entry
 *
 * Returns:       R0
 */

int sctransport_start_trans(int card_hnd);

/* ------------------------------------------------------------------------
 * Function:      sctransport_end_trans()
 *
 * Description:   Relased the card from a particular card handle connection
 *
 * Input:         card_hnd - value of R0 on entry
 *
 * Returns:       R0
 */

int sctransport_end_trans(int card_hnd);

/* ------------------------------------------------------------------------
 * Function:      sctransport_error()
 *
 * Description:   Returns the last error code generated on the given
 *                connection
 *
 * Input:         card_hnd - value of R0 on entry
 *
 * Returns:       R0
 */

int sctransport_error(int card_hnd);

#ifdef MINIJIS_CARD
/* ------------------------------------------------------------------------
 * Function:      sctransport_powercontrol ()
 *
 * Description:   power sctransport down (or up)
 *
 * Input:         state = 0 - power down
 *                        1 - power up
 *                slot  - slot number (1 or 2)
 *
 * Returns:       R0, SCI_FAIL for error.
 */
int sctransport_powercontrol (int state, int slot);
#endif

#endif
@


4.3
log
@Added code to deal with card removal/chainging during power down
@
text
@d56 1
@


4.2
log
@Moved to trunk.

Version 0.18. Tagged as 'SCInter-0_18'
@
text
@d40 1
d72 7
d190 14
@


4.1
log
@Initial revision
@
text
@d16 7
a22 7
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
d31 9
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Changed copyright notice.
@
text
@d16 7
a22 7
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
@


4.1.7.3
log
@Added a new bit of interface to SCInterface_FileInfo that interrprets data
depending on which type of card in inserted.
@
text
@a30 9
#define SCTransport_Open         (0x4d400)
#define SCTransport_RetrieveATR  (0x4d401)
#define SCTransport_Close        (0x4d402)
#define SCTransport_IssueCommand (0x4d403)
#define SCTransport_ReadResponse (0x4d404)
#define SCTransport_StartTrans   (0x4d405)
#define SCTransport_EndTrans     (0x4d406)
#define SCTransport_Error        (0x4d407)
#define SCTransport_GetErrorText (0x4d408)
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
