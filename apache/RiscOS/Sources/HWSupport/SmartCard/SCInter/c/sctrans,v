head	4.3;
access;
symbols
	SCInter-0_27:4.3
	dellis_autobuild_BaseSW:4.3
	SCInter-0_26:4.3
	sbrodie_sedwards_16Mar2000:4.3
	SCInter-0_25:4.3
	SCInter-0_24:4.3
	wturner_scinter2:4.1.7.3
	wturner_scinter1:4.1.7.3
	SCInter-0_23:4.3
	SCInter-0_22:4.3
	SCInter-0_21:4.3
	dcotton_autobuild_BaseSW:4.3
	dcotton_scinter_MPTInitialBuild:4.1.7.3
	SCInter-0_20:4.3
	SCInter-0_19:4.3
	SCInter-0_18:4.2
	SCInter-0_17-1_1_2_5:4.1.7.3
	SCInter-0_17-1_1_2_4:4.1.7.3
	SCInter-0_17-1_1_2_3:4.1.7.3
	SCInter-0_17-1_1_2_2:4.1.7.3
	afrost_Funai01-33:4.1.7.3
	afrost_NC2_Generic:4.1.7.3
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.2
	Spinner_B7:4.1.7.2
	ARTtmp_merge:4.1.7.2
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	ARTtmp:4.1.7.2.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.3
date	98.12.16.16.20.17;	author apirozek;	state Exp;
branches;
next	4.2;

4.2
date	98.12.11.19.10.17;	author smiddle;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.12.07.01;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.12.07.01;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.55.07;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.01.29.13.50.59;	author rbuckley;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.05.30.15.57.17;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Added code to deal with card removal/chainging during power down
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 *
 * Modification History
 *---------------------
 *
 * 14-Jun-96  RWB,  Created.
 *
 */
#include "module.h"
#include "kernel.h"
#include "sctrans.h"

/* ------------------------------------------------------------------------
 * Function:      sctransport_open()
 *
 * Description:   Establish a connection to the smart card.
 *
 * Input:         msg_id - value of R0 on entry
 *
 * Returns:       R0 or SCI_FAIL for error
 */

int
sctransport_open(int msg_id, int *card_hnd)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = 0;

  reg.r[0] = msg_id;
  reg.r[1] = (int)card_hnd;
  err = _kernel_swi(SCTransport_Open,&reg,&reg);
  if (err) return (SCI_FAIL);

  return (reg.r[0]);
}

/* ------------------------------------------------------------------------
 * Function:      sctransport_retrieve_atr()
 *
 * Description:   Retrieve answer-to-reset data from card
 *
 * Input:         card_hnd - value of R0 on entry
 *                hist - value of R1 on entry
 *                hist_len - value of R2 on entry
 *                rcv_len - value of R3 on entry
 *
 * Returns:       R0
 */

int
sctransport_retrieve_atr(int card_hnd, unsigned char *hist,
    			 int hist_len, int *rcv_len)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = 0;

  reg.r[0] = card_hnd;
  reg.r[1] = (int)hist;
  reg.r[2] = hist_len;
  reg.r[3] = (int)rcv_len;
  err = _kernel_swi(SCTransport_RetrieveATR ,&reg,&reg);
  if (err) return (SCI_FAIL);

  return (reg.r[0]);
}

/* ------------------------------------------------------------------------
 * Function:      sctransport_close()
 *
 * Description:   Close a connection to a smart card
 *
 * Input:         card_hnd - value of R0 on entry
 *
 * Returns:       R0
 */

int
sctransport_close(int card_hnd)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = 0;

  reg.r[0] = card_hnd;
  err = _kernel_swi(SCTransport_Close ,&reg,&reg);
  if (err) return (SCI_FAIL);

  return (reg.r[0]);
}

/* ------------------------------------------------------------------------
 * Function:      sctransport_issue_command()
 *
 * Description:   Send a command to the smart card
 *
 * Input:         card_hnd - value of R0 on entry
 *                cmd_hdr - value of R1 on entry
 *                data_len - value of R2 on entry
 *                data - value of R3 on entry
 *                exp_len - value of R4 on entry
 *
 * Returns:       R0
 */

int
sctransport_issue_command(int card_hnd, unsigned char *cmd_hdr,
    			  int data_len, unsigned char *data, int exp_len)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = 0;

  reg.r[0] = card_hnd;
  reg.r[1] = (int)cmd_hdr;
  reg.r[2] = data_len;
  reg.r[3] = (int)data;
  reg.r[4] = exp_len;
  err = _kernel_swi(SCTransport_IssueCommand,&reg,&reg);
  if (err) return (SCI_FAIL);

  return (reg.r[0]);
}

/* ------------------------------------------------------------------------
 * Function:      sctransport_read_response()
 *
 * Description:   Obtains smart card response to previous command
 *
 * Input:         card_hnd - value of R0 on entry
 *                buff - value of R1 on entry
 *                buff_len - value of R2 on entry
 *                rcv_len - value of R3 on entry
 *                resp - value of R4 on entry
 *
 * Returns:       R0
 */

int
sctransport_read_response(int card_hnd, unsigned char *buff,int buff_len,
    			  int *rcv_len, unsigned char *resp)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = 0;

  reg.r[0] = card_hnd;
  reg.r[1] = (int)buff;
  reg.r[2] = buff_len;
  reg.r[3] = (int)rcv_len;
  reg.r[4] = (int)resp;
  err = _kernel_swi(SCTransport_ReadResponse ,&reg,&reg);
  if (err) return (SCI_FAIL);

  return (reg.r[0]);
}

/* ------------------------------------------------------------------------
 * Function:      sctransport_start_trans()
 *
 * Description:   Locks the card to a particular card handle connection
 *
 * Input:         card_hnd - value of R0 on entry
 *
 * Returns:       R0
 */

int
sctransport_start_trans(int card_hnd)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = 0;

  reg.r[0] = card_hnd;
  err = _kernel_swi(SCTransport_StartTrans ,&reg,&reg);
  if (err) return (SCI_FAIL);

  return (reg.r[0]);
}

/* ------------------------------------------------------------------------
 * Function:      sctransport_end_trans()
 *
 * Description:   Relased the card from a particular card handle connection
 *
 * Input:         card_hnd - value of R0 on entry
 *
 * Returns:       R0
 */

int
sctransport_end_trans(int card_hnd)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = 0;

  reg.r[0] = card_hnd;
  err = _kernel_swi(SCTransport_EndTrans ,&reg,&reg);
  if (err) return (SCI_FAIL);

  return (reg.r[0]);
}

/* ------------------------------------------------------------------------
 * Function:      sctransport_error()
 *
 * Description:   Returns the last error code generated on the given
 *                connection
 *
 * Input:         card_hnd - value of R0 on entry
 *
 * Returns:       R0, SCI_FAIL for error.
 */

int
sctransport_error(int card_hnd)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = 0;

  reg.r[0] = card_hnd;
  err = _kernel_swi(SCTransport_Error ,&reg,&reg);
  if (err) return (SCI_FAIL);

  return (reg.r[0]);
}

#ifdef MINIJIS_CARD
/* ------------------------------------------------------------------------
 * Function:      sctransport_powercontrol ()
 *
 * Description:   power sctransport down (or up)
 *
 * Input:         state = 0 - power down
 *                        1 - power up
 *                slot  - slot number (1 or 2)
 *
 * Returns:       R0, SCI_FAIL for error.
 */

int sctransport_powercontrol (int state, int slot)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = 0;

  reg.r[0] = state;
  reg.r[1] = slot;
  err = _kernel_swi(SCTransport_PowerControl ,&reg,&reg);
  if (err) return (SCI_FAIL);

  return (reg.r[0]);
}
#endif
@


4.2
log
@Moved to trunk.

Version 0.18. Tagged as 'SCInter-0_18'
@
text
@d247 27
@


4.1
log
@Initial revision
@
text
@d16 7
a22 7
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
a35 10

#define SCTransport_Open         (0x4d400)
#define SCTransport_RetrieveATR  (0x4d401)
#define SCTransport_Close        (0x4d402)
#define SCTransport_IssueCommand (0x4d403)
#define SCTransport_ReadResponse (0x4d404)
#define SCTransport_StartTrans   (0x4d405)
#define SCTransport_EndTrans     (0x4d406)
#define SCTransport_Error        (0x4d407)
#define SCTransport_GetErrorText (0x4d408)
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Changed copyright notice.
@
text
@d16 7
a22 7
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
@


4.1.7.3
log
@Added a new bit of interface to SCInterface_FileInfo that interrprets data
depending on which type of card in inserted.
@
text
@d37 10
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
