head	4.2;
access;
symbols
	SCInter-0_27:4.2
	dellis_autobuild_BaseSW:4.2
	SCInter-0_26:4.2
	sbrodie_sedwards_16Mar2000:4.2
	SCInter-0_25:4.2
	SCInter-0_24:4.2
	wturner_scinter2:4.1.7.3
	wturner_scinter1:4.1.7.3
	SCInter-0_23:4.2
	SCInter-0_22:4.2
	SCInter-0_21:4.2
	dcotton_autobuild_BaseSW:4.2
	dcotton_scinter_MPTInitialBuild:4.1.7.3
	SCInter-0_20:4.2
	SCInter-0_19:4.2
	SCInter-0_18:4.2
	SCInter-0_17-1_1_2_5:4.1.7.3
	SCInter-0_17-1_1_2_4:4.1.7.3
	SCInter-0_17-1_1_2_3:4.1.7.3
	SCInter-0_17-1_1_2_2:4.1.7.3
	afrost_Funai01-33:4.1.7.3
	afrost_NC2_Generic:4.1.7.3
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.3
	Spinner_B7:4.1.7.2
	ARTtmp_merge:4.1.7.2
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	ARTtmp:4.1.7.2.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.2
date	98.12.11.19.10.13;	author smiddle;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.12.07.00;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.12.07.00;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.55.05;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.01.29.13.50.57;	author rbuckley;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.05.09.15.55.47;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Moved to trunk.

Version 0.18. Tagged as 'SCInter-0_18'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * provide functions for processing and validating a directory path
 *
 * Modification History
 *---------------------
 *
 * 20-Jun-96  RWB,  Created.
 *
 */
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "scinter.h"

extern t_card_exports *CurrExports;

/*
 * convert a string hex number into an integer
 */
static int
_convert_fileid(char *fileid)
{
  _kernel_swi_regs reg;
  reg.r[0] = 0x10;
  reg.r[1] = (int)fileid;
  _kernel_swi(OS_ReadUnsigned,&reg,&reg);
  return (reg.r[2]);
}

/*
 * process the directory structure and spit file identifiers into an argv/argc
 * type format.
 */
static int
_process_dirs(char *path, int *filec, char **filev)
{
  char *cp;
  *filec = 0;

  cp = path;

  if (*cp!='/')
  {
    /* check for path of the format 'x/y' which is bogus */
    while (*cp!='\0' && *cp!='/') cp++;
    if (*cp=='/') return (SC_FORMAT);
    /* so must be of form 'x' */
    filev[(*filec)++] = path;
  }
  else
  {
    if (*(cp+1) != '\0')
    {
      /* must be of the form /x/y/z, insert '\0's and add to filev */
      while (*cp!='\0')
      {
        while (*cp!='/' && *cp!='\0') cp++;        /* skip file/directory */
        if (*cp=='/' && *(cp+1)=='/') return (SC_FORMAT);  /* case '/x//...' */
        if (*cp=='/' && *(cp+1)=='\0') return (SC_FORMAT); /* case '/x/' */
        if (*cp=='\0')
        {
          break;
        }
        else
        {
          *cp++ = '\0';
          filev[(*filec)++] = cp;
          if (*filec==MAX_SUBDIRS) return (SC_NESTED);
        }
      }
    }
  }
  return (SC_SUCCESS);
}

/*
 * validate each file identifier
 */
static int
_validate_fileid(char *file)
{
  char *cp;
  int i;

  cp = file;
  i=0;
  while (*cp!='\0')
  {
    int ok=0;
    if (*cp>='0' && *cp<='9') ok=1;
    if (*cp>='a' && *cp<='f') ok=1;
    if (*cp>='A' && *cp<='F') ok=1;
    if (!ok || i>3) return (SC_FORMAT);
    cp++;
    i++;
  }

  return (SC_SUCCESS);
}

/*
 * convert a string path into an array of validated numbers
 */
int
path_process(char *path, int *files, int *num_files)
{
  char *filev[MAX_SUBDIRS];
  char file_path[20];
  int err;
  int i;

  strncpy(file_path,path,20);

  ERR_RETURN(err,_process_dirs(file_path, num_files, filev));

  for (i=0; i<(*num_files); i++)
  {
    ERR_RETURN(err,_validate_fileid(filev[i]));
    files[i] = _convert_fileid(filev[i]);
  }

  return (SC_SUCCESS);
}
@


4.1
log
@Initial revision
@
text
@d16 7
a22 7
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
a101 15
 * check file id against list of reserved
 */
static int
_check_reserved(int file_id)
{
  int i;

  for (i=0; i<CurrExports->card_num_reserved_files; i++)
    if (file_id == CurrExports->card_reserved_files[i])
      return (SC_RESERVED);

  return (SC_SUCCESS);
}

/*
d105 1
a105 1
_validate_fileid(char *file, int validate)
d130 1
a130 1
path_process(char *path, int *files, int *num_files, int validate)
d143 1
a143 1
    ERR_RETURN(err,_validate_fileid(filev[i],validate));
a144 6
    if (validate)
    {
      err = _check_reserved(files[i]);
      if (err != SC_SUCCESS)
        return (err);
    }
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Changed copyright notice.
@
text
@d16 7
a22 7
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
@


4.1.7.3
log
@Major re-work of debugging code so support the remote debug library.
Removal of arh.h dependancy and any other bits of windows legacy code.
@
text
@d102 15
d120 1
a120 1
_validate_fileid(char *file)
d145 1
a145 1
path_process(char *path, int *files, int *num_files)
d158 1
a158 1
    ERR_RETURN(err,_validate_fileid(filev[i]));
d160 6
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
