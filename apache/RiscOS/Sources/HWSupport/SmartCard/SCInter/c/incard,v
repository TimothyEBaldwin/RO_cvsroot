head	4.4;
access;
symbols
	SCInter-0_27:4.4
	dellis_autobuild_BaseSW:4.4
	SCInter-0_26:4.4
	sbrodie_sedwards_16Mar2000:4.4
	SCInter-0_25:4.4
	SCInter-0_24:4.4
	wturner_scinter2:4.1.7.3
	wturner_scinter1:4.1.7.3
	SCInter-0_23:4.4
	SCInter-0_22:4.4
	SCInter-0_21:4.3
	dcotton_autobuild_BaseSW:4.4
	dcotton_scinter_MPTInitialBuild:4.1.7.3
	SCInter-0_20:4.2
	SCInter-0_19:4.2
	SCInter-0_18:4.2
	SCInter-0_17-1_1_2_5:4.1.7.3
	SCInter-0_17-1_1_2_4:4.1.7.3
	SCInter-0_17-1_1_2_3:4.1.7.3
	SCInter-0_17-1_1_2_2:4.1.7.3
	afrost_Funai01-33:4.1.7.3
	afrost_NC2_Generic:4.1.7.3
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.3
	Spinner_B7:4.1.7.2
	ARTtmp_merge:4.1.7.2
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	ARTtmp:4.1.7.2.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.4
date	99.11.16.13.35.29;	author dcotton;	state Exp;
branches;
next	4.3;

4.3
date	99.10.18.09.58.50;	author nbingham;	state Exp;
branches;
next	4.2;

4.2
date	98.12.11.19.10.08;	author smiddle;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.12.07.01;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.12.07.01;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.55.02;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.01.29.13.50.55;	author rbuckley;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.05.09.15.55.43;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.4
log
@	Changed the component to use srccommit.
Detail:
	This component would not build with the latest version of RemoteDB as
the names used have been changed. Have used this opportunity to alter the
component to use DebugLib. There have been no functionality changes.
	Default output mechanism is to zip disc.
	Altered the makefile to use Stripdepend.
Admin:
	Tested as a softload on a Funai 4 build and actually in a Funai 4
build.

Version 0.22. Tagged as 'SCInter-0_22'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * Provide functions for manipulating files on an incard smart card.
 *
 * Modification History
 *---------------------
 *
 * 20-Jun-96  RWB,  Created.
 * 11-Jul-96  RWB,  Strengthened error checking
 * 16-Jul-96  RWB,  Changed ATR
 *
 */
#include <stdio.h>
#include "kernel.h"
#include "string.h"
#include "module.h"
#include "scinter.h"
#include "sctrans.h"

#include "Debuglib/Debuglib.h"


/*
 * prototypes of exported functions to go in table
 */
static int _incard_initialise_table(void);
static int _incard_select_root(int card_handle);
static int _incard_select(int card_handle, int file_id);
static int _incard_read(int card_handle, int offset, int len);
static int _incard_write(int card_handle, int offset, BYTE *data, int len);
static int _incard_verify_chv(int card_handle, int access_condition, char *code,
       	   int code_len);
static int _incard_change_chv(int card_handle, int access_condition,
       	   char *code, int code_len, char *new_code, int new_code_len);
static int _incard_enable_chv(int card_handle,int access_condition,int enable,
       	   char *code, int code_len);
static int _incard_unblock_chv(int card_handle,int access_condition,
       	   char *unblock_code, int unblock_code_len,
      	   char *new_code, int new_code_len);
static int _incard_get_response(int card_handle, int len);
static int _incard_internal_auth(int card_handle, int key, BYTE *challange,
       	   int challenge_len);

/*
 * exported function table
 */
t_card_exports incard_exports = {
  _incard_initialise_table,
  _incard_select_root,                               /* exported functions */
  _incard_select,
  0,
  0,
  _incard_read,
  _incard_write,
  _incard_verify_chv,
  _incard_change_chv,
  _incard_enable_chv,
  _incard_unblock_chv,
  _incard_get_response,
  _incard_internal_auth,
  255,                                              /* chunk size in bytes */
  0,
  0,
  0
};

/*
 * smart card ATR to match against
 */
static t_card_atr incard_atr = {0x05,     /* Manufacturer */
       		  	        0x00, 	  /* OS code */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  		       	          15,     /* ATR length */
  		       	          2};	  /* significant bytes in ATR */

/*
 * table mapping card response codes to ones we need to know about, structure
 * of this table is as follows.
 *
 * SCInterface error code, response match
 *
 * where response match is encoded as :
 * 	bits 16-23 : number of nibbles to match
 *	bits  8-15 : MSB of card response code
 *	bits  0-7  : LSB of card response code
 */
static t_card_resp incard_response[] = {
  SC_SUCCESS,         0x049000,
  SC_SUCCESS,         0x029f00,
  /* status values for security management */
  SC_NOACCESSCODE,    0x049802,
  SC_FAILACCESSCODE,  0x049804,
  SC_NOACCESSCHANGE,  0x049808,
  SC_BLOCKEDACCESS,   0x049840,
  /* status values for storage management */
  SC_SUCCESS,         0x039200,
  SC_SPACE,           0x049210,
  SC_EXISTS,          0x049220,
  SC_STORAGE,         0x049240,
  /* status values for pointer management */
  SC_NOSELECT,        0x049400,
  SC_NOTVALID,        0x049402,
  SC_NOTFOUND,        0x049404,
  SC_INCONSIST,       0x049408,
  /* application independent error messages */
  SC_P1P2INVALID,     0x046b00,
  SC_P3INVALID,       0x026700,
  SC_TECHPROBLEM,     0x026f00
};

/*
 * perform static table initialisation as the compiler will not let this happen
 * when compiling -zM
 */
static int
_incard_initialise_table(void)
{
  incard_exports.card_atr = &incard_atr;
  incard_exports.card_responses = incard_response;
  incard_exports.card_num_responses = sizeof(incard_response)/sizeof(t_card_resp);

  return (SC_SUCCESS);
}

/*
 * select root directory (master file)
 */
static int
_incard_select_root(int card_handle)
{
  return (_incard_select(card_handle,0x3f00));
}

/*
 * select specified directory
 */
static int
_incard_select(int card_handle, int file_id)
{
  BYTE hdr[4];
  BYTE data[2];
  int exp_len = 0;

  dprintf(("","_incard_select(): file_id 0x%x\n",file_id));

  hdr[0] = 0xA0;
  hdr[1] = 0xA4;
  hdr[2] = 0x00;
  hdr[3] = 0x00;

  data[0] = file_id / 256;
  data[1] = file_id % 256;

  return sctransport_issue_command (card_handle, hdr, 2, data, exp_len);
}

/*
 * read a chunk of data from the card
 */
static int
_incard_read(int card_handle, int offset, int len)
{
  BYTE hdr[4];

  dprintf(("","_incard_read(): reading %d bytes\n",len));

  hdr[0] = 0xA0;
  hdr[1] = 0xB0;
  hdr[2] = offset / 256;
  hdr[3] = offset % 256;

  return sctransport_issue_command (card_handle, hdr, 0, 0, len);
}

/*
 * write a chunk of data to the card
 */
static int
_incard_write(int card_handle, int offset, BYTE *data, int len)
{
  BYTE hdr[4];

  dprintf(("","_incard_write(): Writing data of length %d\n",len));

  hdr[0] = 0xA0;
  hdr[1] = 0xD6;
  hdr[2] = offset / 256;
  hdr[3] = offset % 256;

  return sctransport_issue_command(card_handle, hdr, len, data, 0);
}

/*
 * submit a CHV password to the card for verification
 */
static int
_incard_verify_chv(int card_handle, int access_condition,
		     char *code, int code_len)
{
  BYTE hdr[4];
  BYTE data[8];

  dprintf(("","Incard verify chv %d ",access_condition));

  hdr[0] = 0xA0;
  hdr[1] = 0x20;
  hdr[2] = 0;
  hdr[3] = access_condition;

  memset(data,0xff,sizeof(data));
  if (code_len>sizeof(data)) code_len = sizeof(data);
  memcpy(data,code,code_len);

  return sctransport_issue_command(card_handle, hdr, sizeof(data), data, 0);
}

/*
 * submit existing CHV and a new CHV to the card for change
 */
static int
_incard_change_chv(int card_handle, int access_condition,
       	   char *code, int code_len, char *new_code, int new_code_len)
{
  BYTE hdr[4];
  BYTE data[16];

  dprintf(("","_incard_change_chv()\n"));

  hdr[0] = 0xA0;
  hdr[1] = 0x24;
  hdr[2] = 0;
  hdr[3] = access_condition;

  memset(data,0xff,sizeof(data));
  if (code_len>(sizeof(data)/2)) code_len = sizeof(data)/2;
  if (new_code_len>(sizeof(data)/2)) new_code_len = sizeof(data)/2;
  memcpy(data,code,code_len);
  memcpy(data+8,new_code,new_code_len);

  return sctransport_issue_command(card_handle, hdr, sizeof(data), data, 0);
}

/*
 * enable or disable the chv password checking
 */
static int
_incard_enable_chv(int card_handle, int access_condition, int enable,
		   char *code, int code_len)
{
  BYTE hdr[4];
  BYTE data[8];

  dprintf(("","_incard_enable_chv()\n"));

  hdr[0] = 0xA0;
  if (enable)        /* enable */
    hdr[1] = 0x28;
  else               /* disable */
    hdr[1] = 0x26;

  hdr[2] = 0;
  hdr[3] = access_condition;

  memset(data,0xff,sizeof(data));
  if (code_len>sizeof(data)) code_len = sizeof(data);
  memcpy(data,code,code_len);

  return sctransport_issue_command(card_handle, hdr, sizeof(data), data, 0);
}

/*
 * reset the CHV blocking counter and optionally set a new password
 */
static int
_incard_unblock_chv(int card_handle, int access_condition,
       	   char *unblock_code, int unblock_code_len,
      	   char *new_code, int new_code_len)
{
  BYTE hdr[4];
  BYTE data[16];

  dprintf(("","_incard_unblock_chv(): Incard unblock chv %d : ",access_condition));

  hdr[0] = 0xA0;
  hdr[1] = 0x2C;
  hdr[2] = 0;
  hdr[3] = access_condition;

  memset(data,0xff,sizeof(data));
  if (unblock_code_len>(sizeof(data)/2)) unblock_code_len = sizeof(data)/2;
  if (new_code_len>(sizeof(data)/2)) new_code_len = sizeof(data)/2;
  memcpy(data,unblock_code,unblock_code_len);
  memcpy(data+8,new_code,new_code_len);

  return sctransport_issue_command(card_handle, hdr, sizeof(data), data, 0);
}

/*
 * get the response data giving file information following a successful select
 * command
 */
static int
_incard_get_response(int card_handle, int exp_len)
{
  BYTE hdr[4];

  dprintf(("","Incard get response()\n"));

  hdr[0] = 0xA0;
  hdr[1] = 0xC0;
  hdr[2] = 0;
  hdr[3] = 0;

  return sctransport_issue_command (card_handle, hdr, 0, 0, exp_len);
}

/*
 * send a challenge to the smart card to resieve a response
 */
static int
_incard_internal_auth(int card_handle, int key, BYTE *challenge,
		      int challenge_len)
{
  BYTE hdr[4];

  dprintf(("","_incard_internal_auth()\n"));

  if (challenge_len>8)
    challenge_len=8;

  dprintf(("","_incard_internal_auth(): Incard Internal Authenticate key %d\n",key));

  hdr[0] = 0xA0;
  hdr[1] = 0x88;
  hdr[2] = 0;
  hdr[3] = key;

  return sctransport_issue_command(card_handle,hdr,challenge_len,challenge,0);
}
@


4.3
log
@Summary
  * Fixed broken debugging support.
  * Added EraseCVS & StripDepnd to !MkClean.
Detail
  * Change to debugging support after it was broken by API change made to
    RemoteDB (RiscOS/Sources/Lib/debug) in revision 0.07.
Admin
  * Built RAM and ROM (ONC2UK build) variants.

Version 0.21. Tagged as 'SCInter-0_21'
@
text
@d43 3
d167 1
a167 1
  remote_debug_printf(db,"Incard select 0x%x\n",file_id);
d188 1
a188 1
  remote_debug_printf(db,"Incard read %d bytes\n",len);
d206 1
a206 1
  remote_debug_printf(db,"Incard write %d\n",len);
d226 1
a226 1
  remote_debug_printf(db,"Incard verify chv %d ",access_condition);
d250 1
a250 1
  remote_debug_printf(db,"Incard change chv\n");
d276 1
a276 1
  remote_debug_printf(db,"Incard enable chv\n");
d305 1
a305 1
  remote_debug_printf(db,"Incard unblock chv %d : ",access_condition);
d330 1
a330 1
  //remote_debug_printf(db,"Incard get response\n");
d349 2
d354 1
a354 1
  remote_debug_printf(db,"Incard Internal Authenticate key %d\n",key);
@


4.2
log
@Moved to trunk.

Version 0.18. Tagged as 'SCInter-0_18'
@
text
@d36 1
d164 1
a164 1
  debug_printf(db,"Incard select 0x%x\n",file_id);
d185 1
a185 1
  debug_printf(db,"Incard read %d bytes\n",len);
d203 1
a203 1
  debug_printf(db,"Incard write %d\n",len);
d223 1
a223 1
  debug_printf(db,"Incard verify chv %d ",access_condition);
d247 1
a247 1
  debug_printf(db,"Incard change chv\n");
d273 1
a273 1
  debug_printf(db,"Incard enable chv\n");
d302 1
a302 1
  debug_printf(db,"Incard unblock chv %d : ",access_condition);
d327 1
a327 1
  //debug_printf(db,"Incard get response\n");
d349 1
a349 1
  debug_printf(db,"Incard Internal Authenticate key %d\n",key);
@


4.1
log
@Initial revision
@
text
@d16 7
a22 7
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
a82 2
  0,
  0,
a130 16
 * table containing numbers that are smartcard reserved filenames
 * found on page 38 of the incard prm
 */
static int incard_reserved_files[] = {
       0x3f00,			   /* MF */
       0x0000,			   /* EF_CHV1 */
       0x0100,			   /* EF_CHV2 */
       0x0200,			   /* ADM1 */
       0x0300,			   /* ADM2 */
       0x0400,			   /* ADM3 */
       0x0500,			   /* ADM4 */
       0x0600,			   /* ADM5 */
       0x0011,			   /* EF key man*/
       0x0001};			   /* EF key op */

/*
a139 2
  incard_exports.card_reserved_files = incard_reserved_files;
  incard_exports.card_num_reserved_files = sizeof(incard_reserved_files);
d163 1
a163 1
  debug DebugPrint("SCInterface: Incard select 0x%x\n",file_id);
d184 1
a184 1
  debug DebugPrint("SCInterface: Incard read %d bytes\n",len);
d202 1
a202 1
  debug DebugPrint("SCInterface: Incard write %d\n",len);
d222 1
a222 1
  debug DebugPrint("SCInterface: Incard verify chv %d ",access_condition);
a232 7
  debug
  {
    int i;
    for (i=0; i<sizeof(data); i++)
      DebugPrint("%s%x",i==0?"":",",data[i]);
    DebugPrint("\n");
  }
d246 1
a246 1
  debug DebugPrint("SCInterface: Incard change chv\n");
d272 1
a272 1
  debug DebugPrint("SCInterface: Incard enable chv\n");
d301 1
a301 1
  debug DebugPrint("SCInterface: Incard unblock chv %d : ",access_condition);
a313 8
  debug
  {
    int i;
    for (i=0; i<sizeof(data); i++)
      DebugPrint("%s%x",i==0?"":",",data[i]);
    DebugPrint("\n");
  }

d326 1
a326 1
  //debug DebugPrint("SCInterface: Incard get response\n");
d348 1
a348 1
  debug DebugPrint("SCInterface: Incard Internal Authenticate key %d\n",key);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Changed copyright notice.
@
text
@d16 7
a22 7
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
@


4.1.7.3
log
@Major re-work of debugging code so support the remote debug library.
Removal of arh.h dependancy and any other bits of windows legacy code.
@
text
@d83 2
d133 16
d158 2
d183 1
a183 1
  debug_printf(db,"Incard select 0x%x\n",file_id);
d204 1
a204 1
  debug_printf(db,"Incard read %d bytes\n",len);
d222 1
a222 1
  debug_printf(db,"Incard write %d\n",len);
d242 1
a242 1
  debug_printf(db,"Incard verify chv %d ",access_condition);
d253 7
d273 1
a273 1
  debug_printf(db,"Incard change chv\n");
d299 1
a299 1
  debug_printf(db,"Incard enable chv\n");
d328 1
a328 1
  debug_printf(db,"Incard unblock chv %d : ",access_condition);
d341 8
d361 1
a361 1
  //debug_printf(db,"Incard get response\n");
d383 1
a383 1
  debug_printf(db,"Incard Internal Authenticate key %d\n",key);
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
