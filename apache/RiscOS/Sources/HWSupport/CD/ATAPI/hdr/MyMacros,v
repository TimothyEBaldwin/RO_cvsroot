head	4.4;
access;
symbols
	ATAPI-1_44:4.4
	ATAPI-1_43:4.4
	ATAPI-1_42:4.4
	ATAPI-1_41:4.4
	ATAPI-1_34-1_11_2_1:4.4
	ATAPI-1_40:4.4
	ATAPI-1_39:4.4
	ATAPI-1_38:4.4
	ATAPI-1_37:4.4
	ATAPI-1_36:4.4
	preSATA:4.4.0.2
	ATAPI-1_35:4.4
	ATAPI-1_34:4.4
	ATAPI-1_33:4.4
	Batch1:4.3
	RO_5_07:4.2
	ATAPI-1_32:4.2
	ATAPI-1_31:4.2
	ATAPI-1_30:4.2
	ATAPI-1_29:4.2
	ATAPI-1_28:4.1;
locks; strict;
comment	@# @;


4.4
date	2012.05.24.19.51.37;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	gY5KdMC5xbpES06w;

4.3
date	2005.04.22.21.54.54;	author jballance;	state Exp;
branches;
next	4.2;

4.2
date	2002.11.22.15.19.42;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	2002.11.07.18.32.37;	author bavison;	state Exp;
branches;
next	;


desc
@@


4.4
log
@STASH/GRAB -> Push/Pull.
Disassembly unchanged apart from the single register STM's which now use STR ith writeback.

Version 1.33. Tagged as 'ATAPI-1_33'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;******************************************************************************
;
; hdr.macros
;
; Author: Mark Watson (EESOX)
;
; Description
; ===========
; Macro definitions.
;

; =============================================
; Macros should be kept in ALPHABETICAL order !
; =============================================

; **********************************************************
; **********************************************************
;     This macro will display the contents of a register in hex
; Only 8 digits are displayed
; **********************************************************
; **********************************************************
        MACRO
$label  Display $reg
        [ $reg <= r1
 ! 0,"Cannot use r0 - r1 in Display macro !"
        ]
$label  [ OUTPUT_ON=1
        STASH     "r0 - r1, r14"
        MOV       r1, # 8              ; altering this figure affects the number of

01      MOV       $reg, $reg, ROR #28  ; characters displayed
        AND       r0, $reg, #15

        SUBS      r0, r0, # 10
        ADDLT     r0, r0, # "0" + 10
        ADDGE     r0, r0, # "a"

       [ OUTPUT_TO_SCREEN<>0
        SWI  0+(1:SHL:17) ; XOS_WriteC
       |
        SWI &a194a:OR:(1:SHL:17)   ; XStream_WriteC
       ]

        SUBS      r1, r1, #1

        BNE       %BT01

        Pull      "r0 - r1, r14"
        ]

        MEND


; **********************************************************
; **********************************************************
;     This macro will display the contents of a register in hex
; Only 8 digits are displayed FORCED TO SCREEN
; **********************************************************
; **********************************************************
        MACRO
$label  DisplayTS $reg
        [ $reg <= r1
 ! 0,"Cannot use r0 - r1 in Display macro !"
        ]
        Push      "r0 - r1, r14"
        MOV       r1, # 8              ; altering this figure affects the number of

01      MOV       $reg, $reg, ROR #28  ; characters displayed
        AND       r0, $reg, #15

        SUBS      r0, r0, # 10
        ADDLT     r0, r0, # "0" + 10
        ADDGE     r0, r0, # "a"

        SWI  0+(1:SHL:17) ; XOS_WriteC

        SUBS      r1, r1, #1

        BNE       %BT01

        Pull      "r0 - r1, r14"

        MEND



; **********************************************************
; **********************************************************

        MACRO
$label  DisplayNewLine
$label  [ OUTPUT_ON=1
        Push    r14
       [ OUTPUT_TO_SCREEN<>0
        SWI XOS_NewLine
       |
        SWI &a194e:OR:(1:SHL:17)        ; SYS "Stream_NewLine"
       ]
        Pull    r14
        ]
        MEND



; ********************************************
; ***  Macro for returning from the drive  ***
; ********************************************
        MACRO
$label  MACRO__ENTER_DRIVER
$label  Push    "r0-r8, r14"
        MEND

; ********************************************
; ***  Macro for returning from the drive  ***
; ********************************************
        MACRO
$label  MACRO__EXIT_DRIVER_OK $cc
$label  Pull    "r0-r8, pc", "$cc"
        MEND

; ********************************************
; ***  Macro for returning from the drive  ***
; ********************************************
        MACRO
$label  MACRO__EXIT_DRIVER_WITH_R0 $cc, $noexit
$label  ADD$cc  r13, r13, #4
 [ "$noexit"=""
        Pull    "r1-r8, pc", "$cc"
 |
        Pull    "r1-r8, r14", "$cc"
 ]
        MEND

; ********************************************
; ***  Macro for returning from the drive  ***
; ********************************************
        MACRO
$label  MACRO__EXIT_DRIVER_WITHOUT_RESTORING_REGISTERS $cc
$label  ADD$cc  r13, r13, #4*9
        Pull    "pc", "$cc"
        MEND

; *******************************
; ***  String immediate out.  ***
; *******************************
        MACRO
$label  MySTRIM   $string
$label   [ OUTPUT_ON=1
         Push    r14
       [ OUTPUT_TO_SCREEN<>0
        SWI     XOS_WriteS
       |
        SWI &a194b:OR:(1:SHL:17)
       ]
        DCB     "$string", 0
        ALIGN
        Pull r14
        |
        [ cdebug
        CDebug_WriteS $string
        ]
        ]
        MEND

; *************************************************************************
; ***  Declare string with the order of every other pair of characters  ***
; ***  swapped i.e. ABCD -> BADC                                        ***
; *************************************************************************
        MACRO
$lab    SwapBytes       $str
        LCLS    s
        LCLA    i
        LCLA    j
i       SETA    :LEN:"$str"
j       SETA    1
        WHILE   i > 1
s       SETS    "$s":CC:(("$str":LEFT:(j+1)):RIGHT:1)
s       SETS    "$s":CC:(("$str":LEFT:j):RIGHT:1)
j       SETA    j + 2
i       SETA    i - 2
        WEND
        [       i > 0
s       SETS    "$s":CC:(("$str":LEFT:j):RIGHT:1)
        ]
$lab    DCB     "$s"
        MEND

        END
@


4.3
log
@	Changed debugging to run with DebugIt prior to possible code
	changes.  No actual code changes, so module version not changed.
Detail:
Admin:  built in test tungsten rom. works


Version 1.32. Not tagged
@
text
@d62 1
a62 1
        GRAB      "r0 - r1, r14"
d79 1
a79 1
        STASH     "r0 - r1, r14"
d95 1
a95 1
        GRAB      "r0 - r1, r14"
d107 1
a107 1
        STASH   r14
d113 1
a113 1
        GRAB    r14
d124 1
a124 1
$label  STASH   "r0-r8, r14"
d132 1
a132 1
$label  GRAB    "r0-r8, pc", "$cc"
d142 1
a142 1
        GRAB    "r1-r8, pc", "$cc"
d144 1
a144 1
        GRAB    "r1-r8, r14", "$cc"
d154 1
a154 1
        GRAB    "pc", "$cc"
d163 1
a163 1
         STASH   r14
d171 1
a171 1
        GRAB r14
@


4.2
log
@  Shiny new version for Tungsten.
Detail:
  * Removed IOMD dependency - reimplemented to use ADFS_ATAPIOp and
    ADFS_IDEDeviceInfo
  * Supports 4 drives (previously 2)
  * Support for SCSIUserOp entry included
Admin:
  Requires ADFS 3.34 (or intermediate version after 3.33).

Version 1.29. Tagged as 'ATAPI-1_29'
@
text
@d172 4
@


4.1
log
@  First stage of changes for RISC OS 5.
Detail:
  * Moved resources here from CDFSResources - allows tokenisation
  * Uses objasm, shared makefiles and global headers
  * 32-bit compatible
Admin:
  Not tested. Still IOC/IOMD-centric.

Version 1.28. Tagged as 'ATAPI-1_28'
@
text
@d148 9
@

