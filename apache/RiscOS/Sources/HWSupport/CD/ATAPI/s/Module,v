head	4.11;
access;
symbols
	ATAPI-1_44:4.11
	ATAPI-1_43:4.11
	ATAPI-1_42:4.10
	ATAPI-1_41:4.10
	ATAPI-1_34-1_11_2_1:4.7.2.1
	ATAPI-1_40:4.10
	ATAPI-1_39:4.9
	ATAPI-1_38:4.9
	ATAPI-1_37:4.8
	ATAPI-1_36:4.8
	preSATA:4.7.0.2
	ATAPI-1_35:4.8
	ATAPI-1_34:4.7
	ATAPI-1_33:4.6
	Batch1:4.5
	RO_5_07:4.4
	ATAPI-1_32:4.4
	ATAPI-1_31:4.4
	ATAPI-1_30:4.4
	ATAPI-1_29:4.4
	ATAPI-1_28:4.3
	ATAPI-1_27:4.2
	ATAPI-1_26:4.2
	dellis_autobuild_BaseSW:4.2
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	nicke_ATAPI_1_23:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.11
date	2017.04.22.16.05.05;	author rsprowson;	state Exp;
branches;
next	4.10;
commitid	8jGH8JMj8l4HXxOz;

4.10
date	2016.02.23.20.35.19;	author jlee;	state Exp;
branches;
next	4.9;
commitid	6U6YFtNDRQhp55Wy;

4.9
date	2016.01.23.10.14.03;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	GLBtjm6flCiCD2Sy;

4.8
date	2015.11.08.20.05.58;	author bavison;	state Exp;
branches;
next	4.7;
commitid	N2koAOW5bPKzmkIy;

4.7
date	2015.07.17.18.08.35;	author rsprowson;	state Exp;
branches
	4.7.2.1;
next	4.6;
commitid	faRBOHXEBvFvnFty;

4.6
date	2012.05.24.19.51.40;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	gY5KdMC5xbpES06w;

4.5
date	2005.04.22.21.54.54;	author jballance;	state Exp;
branches;
next	4.4;

4.4
date	2002.11.22.15.19.42;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2002.11.07.18.32.38;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.16.15.28;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.34.58;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.7.2.1
date	2016.02.23.20.44.03;	author jlee;	state Exp;
branches;
next	;
commitid	J6Zb71iE4iNp85Wy;

4.1.1.1
date	96.11.05.09.34.58;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.13.13;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.43.48;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.41.29;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.11
log
@Go straight to READ(12) rather than using READ CD emulation on new ATAPI drives
In the central data transfer step (DriverCode.s around line 450) there are up to 3 goes at doing the transfer, attempting to work around some problems in <unspecified model> Sony drive and Panasonic CD-571B. Others may be affected similarly.
However, the very latest combined DVD/CD reader, eg. SATA attached SH-224DB/BEBE, have given up entirely with READ CD. In particular, they do not error it, nor are any bytes transferred to the buffer. This falls foul of CDFSSoftATAPI's 3 step approach, because the absence of an error is taken as success and the (junk RMA) block passed up to CDFS.
Unfortunately because the model of Sony reader is not mentioned in the sources nor CVS history we can't do a string match on the model name.
Instead, we now look at the reply to IDENTIFY and look for any declaring ATAPI-5 or later. ATAPI-5 was released in 2000, which definitely post dates the workaround by 4 or 5 years.
hdr/IDEdefs: declare offset for IDENTIFY to the version fields.
Module.s: hook out the version (being careful that pre ATAPI-4 don't have this field). Make a note in the DriveFlag if READ(12) is suspect vintage.
Variables.s: reintroduce the DriveFlag in the HAL case
DriverCode.s: free up a register to load DriveFlag into, look at the DriveFlag, skip straight to READ(12) on ATAPI-5 or later.

Tested on Titanium.
Fixes bogus "CDFS does not support that type of disc" with a simple ISO9660 formatted DVD, due to an untouched RMA block being parsed by CDFS.

Version 1.43. Tagged as 'ATAPI-1_43'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;******************************************************************************
;
; Module.s
;
; Author: Mark Watson (EESOX)
;
; Description
; ===========
; This handles the module bits of the ATAPI driver.
;
; Change record
; =============
; 12-Mar-95  19:23  cpartington (Cambridge Systems Design)
; * Added code to IDENTIFY to recognise Sony CDU50E 0.3n and handle
;   incorrect data returned.
; * Added debug.
;
; 14-Mar-95  16:49  cpartington (Cambridge Systems Design)
; * Moved Sony CDU50E 0.3n recognition string to s.Strings.
; * Added code to decode the CMD DRQ bits of the configuration word and
;   update DriveFlags accordingly.
; * Removed code to save configuration word - it's not used and new
;   DriveFlags can more efficiently be checked.
;
; 19-Jun-95  15:41  cpartington (Cambridge Systems Design)
; * Added faster_startup code (don't look for more drives than are
;   configured).
;
; 21-Jun-95  15:21  cpartington (Cambridge Systems Design)
; * Added test code conditional on cdp_swi.
;
; 06-Jul-95  10:43  cpartington (Cambridge Systems Design)
; * Added code conditional on full_drive_detection to try to code around
;   Sony CDU50E sole drive problem.
;
; 09-Aug-95  15:39  cpartington (Cambridge Systems Design)
; * Removed code conditional on cdp_swi (unused).
;
;*end of change record*
;
;******************************************************************************


; ******************************************************************************
; *                                                                            *
; * Routines in here:                                                          *
; *                   Module_InitialisingCode                                  *
; *                   Module_FinalisingCode                                    *
; *                   Module_SWIHandler                                        *
; *                   Module_SWITable                                          *
; *                   Module_CallBackHandler                                   *
; *                                                                            *
; *                                                                            *
; ******************************************************************************


Module_Flags
 [ No32bitCode
        DCD     0
 |
        DCD     ModuleFlag_32bit
 ]


;***********************************************************************************************
Module_InitialisingCode ROUT
; on entry:
;          r10 -> environment string ( see page 631 )
;          r11 = I/O base or instantiation number
;          r12 -> currently preferred instantiation of module ( private word )
;          r13 -> supervisor stack
; on exit:
;          r7 - r11 and r13 preserved
;
;        Set up variables with default values
;***********************************************************************************************

 Push       r14

 [ cdebug
        CDebug_WriteS   "Initialising ATAPI version $VString ($Date)"
 ]
     MySTRIM    "Initialise"
     DisplayNewLine

;----------------------------
; Check for re-initialisation
;----------------------------
 LDR        r1, [ r12 ]
 TEQ        r1, #0
 BLNE       FreeWorkspace


;----------------------------
; Claim space from RMA
;----------------------------

     MySTRIM    "Claim space"
     DisplayNewLine

 MOV        r0, #ModHandReason_Claim
 LDR        r3, = SizeOfWorkSpace
 SWI        XOS_Module

 Pull       pc, VS


 STR        r2, [ r12 ]
 [ faster_startup
        Push    "r7,r12"
 |
        Push    r12             ; Save private word pointer in case we need it later.
 ]
 MOV        r12, r2

;----------------------------
; Clear workspace
;----------------------------

     MySTRIM    "Clear workspace"
     DisplayNewLine

 MOV        r1, #0

clear_workspace
 STR        r1, [ r2 ], #4
 SUBS       r3, r3, #4
 BGT        clear_workspace

;------------------------------------
; Set the disc changed bits
;------------------------------------
 MOV        r0, # 1
 ADR        r4, disc_changed_list
 [ HAL
 MOV        r1, #MAX_NUMBER_OF_ATAPI_DRIVES - 1
01 STRB     r0, [r4, r1]
 SUBS       r1, r1, #1
 BPL        %BT01
 |
 STRB       r0, [ r4 ]
 STRB       r0, [ r4, # 1 ]
 ]

;-----------------------------------------
; Set the default data mode to 1 (normal)
;-----------------------------------------
 ADR        r4, DriveMode
 MOV        r0, # 1
 [ HAL
 MOV        r1, #MAX_NUMBER_OF_ATAPI_DRIVES - 1
01 STRB     r0, [r4, r1]
 SUBS       r1, r1, #1
 BPL        %BT01
 |
 STRB       r0, [ r4 ]
 STRB       r0, [ r4, # 1 ]
 ]

 [ :LNOT: HAL
;-------------------------------------------------
; Default variable values
;-------------------------------------------------
 LDR        r1, =TASKFILE_BASE_ADDRESS
 STR        r1, TBA
 ]

;-------------------------------------------------
; Build the registration block
;-------------------------------------------------
 ADR        r0, register_block
 LDR        r1, =INFORMATION_WORD
 MOV        r2, #0
 MOV        r3, #DRIVE_TYPES
 STMIA      r0, { r1, r2, r3 }

;-------------------------------------------------
; Register as a soft-loadable device driver
;-------------------------------------------------

     MySTRIM    "Register with CDFSDriver"
     DisplayNewLine

 addr       r1, driver_handler_code
 MOV        r2, r12
 SWI        XCD_Register
 BVS        MIC_NoDrivesFound                 ; If failed to register then start up but with no workspace
                                              ; (CDFSDriver can then kick us into life later).

 [ :LNOT: HAL
;-------------------------------------------------
; Work out what machine I'm running on
;-------------------------------------------------

     MySTRIM    "What machine ?"
     DisplayNewLine


 MOV        r0, # 2
 SWI        XOS_ReadSysInfo
 MOVVS      r0, # 0
 TST        r0, # &ff:SHL:8                   ; i/o control chip, =0 then IOC, =1 then IOMD
 MOVEQ      r0, # IOC__IDE_INTERRUPT_BIT      ; IOC
 MOVNE      r0, # IOMD__IDE_INTERRUPT_BIT     ; IOMD
 STR        r0, IrqFlag

;----------------------------------------------------------------
; Look to see if ADFS_LockIDE is known
;----------------------------------------------------------------
 ADRL       r1, STRING__ADFS_LockIDE
 SWI        XOS_SWINumberFromString
 MOVVC      r0, # TRUE
 MOVVS      r0, # FALSE
 STRB       r0, UseLockSWI
 ]

;-------------------------------------------------
; Work out what ATAPI drives are connected
;-------------------------------------------------

 [ faster_startup
; first determine how many drives are configured so we can stop looking when
; we've found that many

        MOV     r0,#OsByte_ReadCMOS
        MOV     r1,#CDROMFSCMOS         ; location to read
        SWI     XOS_Byte
        BVS     MIC_NoDrivesFound       ; if error, no drives
        ANDS    r7,r2,#CMOSDRIVEBITS
        BEQ     MIC_NoDrivesFound       ; if no drives configured

; no need to force configured drives to be in range 0..2

 ]

 [ HAL

        ASSERT faster_startup
       
        Push    "r8-r10"
                
        MOV     r4, #0                  ; IDE physical device number
        ADR     r5, DriveRecognisedStatus
        MOV     r8, #0
        MOV     r10, #0                 ; ATAEnumerate iterator

MIC_IdentifyLoop

        MOV     r0, #ATAEnumerate_Drives
        MOV     r1, r10
        SWI     XATA_Enumerate
        ADR     r3, DriveCtlPrtDev
        BVC     MIC_IdFromEnumerate

        LDR     r0, [r0]
        LDR     r14, =ErrorNumber_NoSuchSWI
        TEQ     r0, r14
        BNE     MIC_DoneCheckForATAPI   ; ATA SWI is there, but returned an error
        B       MIC_IdFromR4

MIC_IdFromEnumerate
        MOVS    r10, r1                 ; Save iterator for next time
        BEQ     MIC_FoundAllDrives      ; No more

        ; Try this controller/port/device
        MOV     r2, r2, LSL #32-12
        MOV     r2, r2, LSR #32-12      ; Knock out flags
        MOV     r0, r2, LSL #ADFSATAPIOp_DeviceIDShift
        STR     r0, [r3, r4, LSL #2]

        MOV     r0, #ADFSIDEDeviceInfo_ByID
        MOV     r1, r2
        B       MIC_IDEDevInfo

MIC_IdFromR4
        ; Try next physical device
        ASSERT  15 - ADFSATAPIOp_DeviceIDShift = 3
        MOV     r0, r4, LSL #3+ADFSATAPIOp_DeviceIDShift ; Extra shift so b15 = device (0 or 1)
        STR     r0, [r3, r4, LSL #2]                     ;                b23..b16 = controller number

        MOV     r0, #ADFSIDEDeviceInfo_ByLegacyID
        MOV     r1, r4
MIC_IDEDevInfo
        SWI     XADFS_IDEDeviceInfo     ; on exit, if packet device, r1 = 2, r3 -> identify packet device block
        STRVSB  r8, [r5, r4]
        BVS     MIC_DoneCheckForATAPI
       
        TEQ     r1, #2
        STRNEB  r8, [r5, r4]
        BNE     MIC_DoneCheckForATAPI

; Although it's been detected as ATAPI, there'd no guarantee that it will have responded to the identify packet

        CMP     r3, #0
        STREQB  r8, [r5, r4]
        BEQ     MIC_DoneCheckForATAPI

        LDRB    r9, [r3, #ATAPIID__GENERAL_CONFIGURATION + 1]
        LDRB    r14,[r3, #ATAPIID__GENERAL_CONFIGURATION]
        ORR     r9,r14,r9,LSL # 8

; check it's got removable medium

        TST     r9,#1:SHL:7
        STREQB  r8, [r5, r4]
        BEQ     MIC_DoneCheckForATAPI   ; branch if not removable

; check it's a CD-ROM drive

        MOV     r14,r9,LSR #8
        AND     r14,r14,#2_00011111
        TEQ     r14,#5
        STRNEB  r8, [r5, r4]
        BNE     MIC_DoneCheckForATAPI

        ANDS    r6, r9, #3              ; bottom two bits determine packet size
        MOVEQ   r6, #12
        MOVNE   r6, #16                 ; currently undefined devices may need larger packets - this can still
                                        ;   be achieved by the CD_SCSIUserOp caller specifying larger size
        STRB    r6, [r5, r4]            ; flag this drive is present

; check it supports any recent ATAPI standard, emulate READ(12) otherwise

        LDRB    r9, [r3, #ATAPIID__MAJOR_VERSION + 1]
        LDRB    r14,[r3, #ATAPIID__MAJOR_VERSION]
        ORR     r9,r14,r9,LSL # 8

        ADD     r14, r9, #1
        TEQ     r14, #&10000            ; r9 == &FFFF, doesn't report version
        MOVEQ   r9, #2_10000            ; treat as ATAPI-4

        TST     r9, #2_1111:SHL:5       ; any of ATAPI-5 to ATAPI-8
        ADR     r6, DriveFlags          ; r6 -> drive flags
        MOV     r14, #0
        ORREQ   r14, r14, #DriveFlag_Read12Unreliable
        STRB    r14, [r6, r4]

; remember that I found one

        ORR     r8,r8,#1:SHL:16         ; doesn't affect bottom byte

        SUBS    r7,r7,#1                ; --(drives-to-be-found)
        BEQ     MIC_FoundAllDrives      ; all done if now 0

MIC_DoneCheckForATAPI
        ADD     r4, r4, # 1
        CMP     r4, # MAX_NUMBER_OF_ATAPI_DRIVES
        BLT     MIC_IdentifyLoop

MIC_FoundAllDrives

        TST     r8, # 1:SHL:16
        Pull    "r8-r10"

;-------------------------------------------------
; If none were found, then start up but with no workspace
;-------------------------------------------------
        BEQ     MIC_NoDrivesFound

 | ; HAL

 MOV        r0, # 0
 ADR        r1, DriveRecognisedStatus
 MOV        r2, # TRUE
 MOV        r3, # FALSE

MIC_IdentifyLoop

;---------------------------------------------------------------------------------
; Do the Identify drive command, so that I can find out some more about the drive
;---------------------------------------------------------------------------------

 [ cdebug
        CDebug_StrReg2  "Checking drive ",r0
 ]
        Push    "r0-r8"

 [ full_drive_detection
        MOV     r8,#ATAPICONTROL__CheckForDrive
        BL      ATAPI_Control                   ; VC => ATAPI detected
        Pull    "r0-r8",VS
        STRVSB  r3,[r1,r0]                      ; if not present, set flag
        BVS     MIC_DoneCheckForATAPI           ; ...and skip the rest
 ]

        ORR     r0, r0, # readdata + ATAPIOP__IDENTIFY_DEVICE + ATAPIOP__DONT_USE_R7 + ATAPIOP__DONT_RETRY
        MOV     r1, # 0
        MOV     r2, # 0
        ADR     r3, buffer
        MOV     r4, # ATAPIID__STRUCTURE_SIZE

        MOV     r8, # ATAPICONTROL__SEND_COMMAND

        BL      ATAPI_Control


        Pull    "r0-r8"

;---------------------------------------------------------------------------------

        STRVSB  r3, [ r1, r0 ]
        BVS     MIC_DoneCheckForATAPI

; Check for ATAPI CD-ROM drive with removable medium
; r0 = drive number (0/1)
; r1 -> DriveRecognisedStatus
; r2 = TRUE
; r3 = FALSE

        LDRB    r14,buffer + ATAPIID__GENERAL_CONFIGURATION
        LDRB    r8,buffer + ATAPIID__GENERAL_CONFIGURATION + 1
        ORR           r6,r14,r8,LSL # 8
 [ cdebug
        CDebug_StrReg4      "IDENTIFY complete, config=",r6
 ]

; check it's ATAPI
; r6 = configuration word

        MOV     r5,r6,LSR #14
        TEQ     r5,#2_10
        BNE     MIC_DoneCheckForATAPI   ; branch if not ATAPI

; check it's got removable medium

        TST     r6,#1:SHL:7
        BEQ     MIC_DoneCheckForATAPI   ; branch if not removable

; check it's a CD-ROM drive

        MOV     r5,r6,LSR #8
        AND     r5,r5,#2_00011111
        TEQ     r5,#5
        BNE     MIC_DoneCheckForATAPI

; check it supports any recent ATAPI standard, emulate READ(12) otherwise

        LDRB    r14,buffer + ATAPIID__MAJOR_VERSION
        LDRB    r8,buffer + ATAPIID__MAJOR_VERSION + 1
        ORR     r8,r14,r8,LSL # 8

        ADD     r14,r8,#1
        TEQ     r14,#&FFFF+1
        MOVEQ   r8,#0                   ; equate &FFFF and &0000 as not reporting version

; check the CMD DRQ type and save a flag to indicate which it is
; note: this assumes that a "microprocessor DRQ" drive can be treated like
; an "accelerated DRQ" - I've not seen one
; r0 = drive (0/1)

        AND     r6,r6,#2_01100000       ; get CMD DRQ bits
        TEQS    r6,#2_00100000          ; interrupt DRQ
        MOVEQ   r6,#DriveFlag_InterruptDRQ
        MOVNE   r6,#0                   ; treat others as accelerated DRQ
        TST     r8, #2_1111:SHL:5       ; any of ATAPI-5 to ATAPI-8
        ORREQ   r6,r6,#DriveFlag_Read12Unreliable
        ADR     r5,DriveFlags           ; r5 -> drive flags
        STRB    r6,[r5,r0]

        STRB    r2,[ r1, r0 ]           ; flag this drive is present

; remember that I found one

        ORR     r3,r3,#1:SHL:16

 [ faster_startup
        SUBS    r7,r7,#1                ; --(drives-to-be-found)
        BEQ     MIC_FoundAllDrives      ; all done if now 0
 ]


MIC_DoneCheckForATAPI
 ADD        r0, r0, # 1
 CMP        r0, # MAX_NUMBER_OF_ATAPI_DRIVES
 BLT        MIC_IdentifyLoop

 [ faster_startup
MIC_FoundAllDrives
 ]


;-------------------------------------------------
; If none were found, then start up but with no workspace
;-------------------------------------------------
 TST        r3, # 1:SHL:16
 BEQ        MIC_NoDrivesFound

 ] ; HAL

;-------------------------------------------------
; Clear the drive map list
;-------------------------------------------------

MIC_DrivesChecked

 MOV        r0, # 0
 ADR        r1, DriveMapList
 MOV        r2, # -1
 MOV        r3, # -1
 MOV        r4, # -1
 MOV        r5, # -1

MIC_ClearListLoop
 STMIA      r1!, { r2, r3, r4, r5 }
 ADD        r0, r0, # 1
 CMP        r0, # MAX_NUMBER_OF_ATAPI_DRIVES
 BLT        MIC_ClearListLoop

;-------------------------------------------------
; Exit OK
;-------------------------------------------------

 ; V is clear
 [ faster_startup
 Pull       "r7,r12,pc"
 |
 Pull       "r12,pc"
 ]

STRING__ADFS_LockIDE
 DCB        "ADFS_LockIDE", 0
 ALIGN

;-------------------------------------------------
; Exit - NoDrivesFound so free off workspace
;-------------------------------------------------

MIC_NoDrivesFound
 [ faster_startup
 Pull       "r7,r12,r14"
 |
 Pull       "r12,r14"           ; Get back private word pointer and return address.
 ]

 ; Drop through to...

;***********************************************************************************************
Module_FinalisingCode
FreeWorkspace  ROUT
;
; on entry:
;          r12 -> private word
;          r13 -> Full descending stack
; on exit:
;          r0-r2, r6 & r14 corrupted
;
;        Set up variables with default values
;***********************************************************************************************

 LDR        r2, [ r12 ]
 TEQ        r2, #0
 MOVEQ      pc, r14         ; Already unregistered and free'd earlier

 MOV        r6, r14

;---------------------------------------------------------------------------
; Unregister as a CDFS device driver
;---------------------------------------------------------------------------
 MOV        r3, r12
 ADD        r0, r2, #:INDEX:register_block
 addr       r1, driver_handler_code
 MOV        r12, r2
 SWI        XCD_Unregister
 MOV        r12, r3

;---------------------------------------------------------------------------
; Free workspace - don't report an error 'cause that really screws things up
;---------------------------------------------------------------------------
 MOV        r0, #ModHandReason_Free
 SWI        XOS_Module

 SUBS       r0, r0, r0      ; Set private word to 0 so that Kernel doesn't try to free it again!
 STR        r0, [r12]

 ; V is clear
 MOV        pc, r6

;***********************************************************************************************
;
Module_SWIHandler ROUT
;
; on entry:
;          r11 = SWI number MOD 64
;          r12 = private word pointer
;          r13 = supervisor stack
;          r14 = return register
; on exit:
;          r10 - r12 corrupted
;
;    This performs the ATAPI_.. SWI
;
;***********************************************************************************************

      MACRO__ENTER_DRIVER

;---------------------------
; Load the workspace pointer
;---------------------------
      LDR         r12, [ r12 ]

;---------------------------
; Jump to the SWI
;---------------------------
      TEQ         r11, # ATAPI_GetDrives - ATAPISWI_Base
      ADRNE       r0, not_supported_error                  ; [ swi not known - so exit ]
      BNE         swi_error_lookup

      ; Allow to fall through 'cause there's only one SWI

;***********************************************************************************************
;
SWI__ATAPI_GetDrives
;
; on entry:
;          r11 =  0
;          r12 -> workspace
;          r13 =  supervisor stack
;          r14 =  return register
; on exit:
;          r0  =  number of drives found by ATAPI driver
;          r10 - r12 corrupted
;
;    This performs the ATAPI_GetDrives SWI
;
;***********************************************************************************************

;---------------------------
; Do the ATAPI_GetDrives SWI
;---------------------------

      MOV         r0, # 0

      TEQ         r12, #0               ; If no workspace then no drives.
      BEQ         %FT10

 [ HAL
      ADR         r11, DriveRecognisedStatus
      MOV         r10, #MAX_NUMBER_OF_ATAPI_DRIVES - 1
01    LDRB        r14, [r11, r10]
      TEQ         r14, #0
      ADDNE       r0, r0, #1
      SUBS        r10, r10, #1
      BPL         %BT01
 |
      LDRB        r14, DriveRecognisedStatus + 0
      TEQ         r14, # TRUE
      ADDEQ       r0, r0, # 1
      LDRB        r14, DriveRecognisedStatus + 1
      TEQ         r14, # TRUE
      ADDEQ       r0, r0, # 1
 ]
10
      MACRO__EXIT_DRIVER_WITH_R0 , noexit
      CMP         pc, pc
      MOVEQ       pc, r14
      BICS        pc, r14, # V_bit


swi_error_lookup ; based on error_handler_lookup, but has to be different because of the
                 ; SWI handler's requirement to preserve NZC flags on a 26-bit OS
;
; on entry:
;          r0  -> error block to be looked up
;          r12 -> workspace
;          r13 -> full descending stack with r0 and r14 stacked
;------------------------------------------------------------------------------

     SUB           r13, r13, #16             ; Local workspace for MessageTrans file block
     Push          "r0"                      ; Save error we need to look up.

     ADD           r0, r13, #4               ; Open Messages file.
     ADRL          r1, message_filename
     MOV           r2, #0
     SWI           XMessageTrans_OpenFile
     ADDVS         r13, r13, #20
     BVS           %FT90

     Pull          "r0"                      ; Get back error to look up.
     MOV           r1, r13
     SWI           XMessageTrans_ErrorLookup

     MOV           r2, r0                    ; Definitely have some sort of error here so save it.
     MOV           r0, r13
     SWI           XMessageTrans_CloseFile
     MOV           r0, r2                    ; Ignore any error from CloseFile.

     ADD           r13, r13, #16             ; Free local workspace.
90
     MACRO__EXIT_DRIVER_WITH_R0 , noexit
     TEQ           pc, pc
     MSREQ         CPSR_f, #Z_bit :OR: V_bit
     MOVEQ         pc, r14
     ORRS          pc, r14, #V_bit

;******************************************************************************
;
Module_SWITable
;
;******************************************************************************

      =           "ATAPI", 0               ; Group name

      =           "GetDrives", 0           ; ATAPI SWI + 0

      =           0                        ; Terminator
      ALIGN

;******************************************************************************

memcmp ROUT
;
; Compare two lumps of memory
;
; Entry:
;    r0 -> string
;    r1 -> string
;    r2 = length > 0
;
; Exit:
;    r0,r1 preserved
;    r2 undefined
;    EQ => strings equal

        Push    "r3,r14"
01
        SUBS    r2,r2,#1
        BMI     %F02
        LDRB    r3,[r0,r2]
        LDRB    r14,[r1,r2]
        TEQS    r3,r14
        BEQ     %B01

; NE => strings don't match

        Pull    "r3,pc"

;;;;;;;;;;;;;;;;;

02

; return EQ => strings match

        TEQS    r0,r0
        Pull    "r3,pc"

;******************************************************************************

 LTORG
 END
@


4.10
log
@Fix null pointer dereference
Detail:
  s/Module - Fix null pointer dereference in drive detection code if an ATAPI device is found which failed to respond to ADFS's identify packet
Admin:
  Untested
  Should fix issue reported on forums:
  https://www.riscosopen.org/forum/forums/5/topics/3929


Version 1.40. Tagged as 'ATAPI-1_40'
@
text
@d336 16
d450 10
d469 2
d473 1
a473 8
 [ cdebug
        BNE     %F01
        CDebug_WriteS   "This is an interrupt DRQ drive"
        B       %F02
01
        CDebug_WriteS   "This is an accelerated DRQ drive"
02
 ]
d670 1
a670 1
      BICS        pc, r14, # Overflow_Flag
d707 1
a707 1
     ORRS          pc, r14, #Overflow_Flag
@


4.9
log
@Tidy up some comments/constants
Use Hdr:SWIs to get our SWI base, not the two local defines, similarly error base.
Correct a handful of misleading comments.
Same binary, not tagged.
@
text
@d306 6
@


4.8
log
@  Update for compatibility with ADFS 4
Detail:
  The physical ID by which ATA and ATAPI drives are address has been expanded
  in ADFS 4 from 2 bits to 12. For now, CDFSSoftATAPI is still limited to 4
  drives, and scans the first 4 physical IDs returned by SWI ATA_Enumerate
  (falling back to the 4 legacy physical IDs if the SWI isn't found). This
  will fail on boards with more than 4 physical SATA ports, but caters for
  all current hardware. Also sneaked in the use of LDRH in the SWI dispatcher.
Admin:
  Tested on a Titanium board.

Version 1.35. Tagged as 'ATAPI-1_35'
@
text
@d591 1
a591 1
      TEQ         r11, # XATAPI_GetDrives - XATAPI_BaseNumber
@


4.7
log
@Fix for NULL pointer dereference
When no drives are detected (but some are configured) CDFSSoftATAPI goes dormant by setting its private word to 0. However, when the module finalises (eg. an RMReinit) that NULL value is then used to call CD_Unregister, and attempting to free the same NULL value with OS_Module.
Also replaced magic numbers from Hdr:ModHand and Hdr:OsBytes.

Version 1.34. Tagged as 'ATAPI-1_34'
@
text
@d252 8
a259 7
 ASSERT faster_startup

 Push       "r8-r9"

 MOV        r4, #0                      ; IDE physical device number
 ADR        r5, DriveRecognisedStatus
 MOV        r8, #0
d263 42
a304 9
 MOV        r0, #0
 MOV        r1, r4
 SWI        XADFS_IDEDeviceInfo         ; on exit, if packet device, r1 = 2, r3 -> identify packet device block
 STRVSB     r8, [r5, r4]
 BVS        MIC_DoneCheckForATAPI

 TEQ        r1, #2
 STRNEB     r8, [r5, r4]
 BNE        MIC_DoneCheckForATAPI
d338 3
a340 3
 ADD        r4, r4, # 1
 CMP        r4, # MAX_NUMBER_OF_ATAPI_DRIVES
 BLT        MIC_IdentifyLoop
d344 2
a345 2
 TST        r8, # 1:SHL:16
 Pull       "r8-r9"
d350 1
a350 1
 BEQ        MIC_NoDrivesFound
@


4.7.2.1
log
@Fix null pointer dereference
Detail:
  s/Module - Fix null pointer dereference in drive detection code if an ATAPI drive is found which failed to respond to ADFS's identify packet
Admin:
  Tested in Iyonix ROM softload
  Should fix issue reported on forums:
  https://www.riscosopen.org/forum/forums/5/topics/3929


Version 1.34, 1.11.2.1. Tagged as 'ATAPI-1_34-1_11_2_1'
@
text
@a271 6
; Although it's been detected as ATAPI, there'd no guarantee that it will have responded to the identify packet

        CMP     r3, #0
        STREQB  r8, [r5, r4]
        BEQ     MIC_DoneCheckForATAPI

@


4.6
log
@STASH/GRAB -> Push/Pull.
Disassembly unchanged apart from the single register STM's which now use STR ith writeback.

Version 1.33. Tagged as 'ATAPI-1_33'
@
text
@d115 1
a115 1
 MOV        r0, # 6
d239 1
a239 1
        MOV     r0,#161                 ; read CMOS
d504 2
d522 1
a522 1
 MOV        r0, #7
@


4.5
log
@	Changed debugging to run with DebugIt prior to possible code
	changes.  No actual code changes, so module version not changed.
Detail:
Admin:  built in test tungsten rom. works


Version 1.32. Not tagged
@
text
@d92 1
a92 1
 STASH      r14
d119 1
a119 1
 GRAB       pc, VS
d124 1
a124 1
        STASH   "r7,r12"
d126 1
a126 1
        STASH   r12             ; Save private word pointer in case we need it later.
d254 1
a254 1
 STASH      "r8-r9"
d311 1
a311 1
 GRAB       "r8-r9"
d334 1
a334 1
        STASH   "r0-r8"
d339 1
a339 1
        GRAB    "r0-r8",VS
d355 1
a355 1
        GRAB    "r0-r8"
d468 1
a468 1
 GRAB       "r7,r12,pc"
d470 1
a470 1
 GRAB       "r12,pc"
d483 1
a483 1
 GRAB       "r7,r12,r14"
d485 1
a485 1
 GRAB       "r12,r14"           ; Get back private word pointer and return address.
d620 1
a620 1
     STASH         "r0"                      ; Save error we need to look up.
d629 1
a629 1
     GRAB          "r0"                      ; Get back error to look up.
d675 1
a675 1
        STASH   "r3,r14"
d686 1
a686 1
        GRAB    "r3,pc"
d695 1
a695 1
        GRAB    "r3,pc"
@


4.4
log
@  Shiny new version for Tungsten.
Detail:
  * Removed IOMD dependency - reimplemented to use ADFS_ATAPIOp and
    ADFS_IDEDeviceInfo
  * Supports 4 drives (previously 2)
  * Support for SCSIUserOp entry included
Admin:
  Requires ADFS 3.34 (or intermediate version after 3.33).

Version 1.29. Tagged as 'ATAPI-1_29'
@
text
@d82 1
a82 1
;          r10 -> enviroment string ( see page 631 )
@


4.3
log
@  First stage of changes for RISC OS 5.
Detail:
  * Moved resources here from CDFSResources - allows tokenisation
  * Uses objasm, shared makefiles and global headers
  * 32-bit compatible
Admin:
  Not tested. Still IOC/IOMD-centric.

Version 1.28. Tagged as 'ATAPI-1_28'
@
text
@d149 6
d157 1
d164 6
d172 1
d174 1
d180 1
d204 1
d229 1
d250 70
d321 1
a321 1
 ADR        r1, DriveRecognizedStatus
d364 1
a364 1
; r1 -> DriveRecognizedStatus
a367 28
 [ sony_50_id_bodge

; compare IDENTIFY string (firmware and model) with that for Sony
; drive that returns configuration word with the bytes in the wrong
; order

        STASH   "r0-r2"
        ADR     r0,buffer + ATAPIID__GENERAL_CONFIGURATION + &2E
        ADRL    r1,sony_50_03n_string
        MOV     r2,#?sony_50_03n_string
        BL      memcmp
        GRAB    "r0-r2"
  [ cdebug
        BEQ     %F11
        CDebug_WriteS   "It's NOT the funny Sony drive"
        BNE     %F12
11
        CDebug_WriteS   "It IS the funny Sony drive"
12
  ]

; if it is the Sony, load configuration bytes in wrong order

        LDRNEB  r14,buffer + ATAPIID__GENERAL_CONFIGURATION
        LDRNEB  r8,buffer + ATAPIID__GENERAL_CONFIGURATION + 1
        LDREQB  r14,buffer + ATAPIID__GENERAL_CONFIGURATION + 1
        LDREQB  r8,buffer + ATAPIID__GENERAL_CONFIGURATION
 |
a369 1
 ]
d434 1
d441 2
d587 10
a596 1
      LDRB        r14, DriveRecognizedStatus + 0
d599 1
a599 1
      LDRB        r14, DriveRecognizedStatus + 1
d602 1
d623 1
a623 1
     ADR           r1, message_filename
@


4.2
log
@Version RO_3_70 taken
@
text
@d71 8
d97 1
a97 1
     STRIM      "Initialise"
d112 1
a112 1
     STRIM      "Claim space"
d119 1
a119 2
 GRAB       r14, VS
 ORRVSS     pc, r14, #Overflow_Flag
d134 1
a134 1
     STRIM      "Clear workspace"
d179 1
a179 1
     STRIM      "Register with CDFSDriver"
d192 1
a192 1
     STRIM      "What machine ?"
d404 1
d406 1
a406 1
 GRAB       "r7,r12,r14"
d408 1
a408 1
 GRAB       "r12,r14"
a409 1
 BICS       pc, r14, #Overflow_Flag
d461 1
a461 1
 MOV        r0, #0      ; Set private word to 0 so that Kernel doesn't try to free it again!
d464 2
a465 1
 BICS       pc, r6, #Overflow_Flag
d495 1
a495 1
      BNE         error_handler_lookup
d520 1
a520 1
      MOV         r11, # 0
d527 1
a527 1
      ADDEQ       r11, r11, # 1
d530 1
a530 1
      ADDEQ       r11, r11, # 1
d532 3
a534 2
      MACRO__EXIT_DRIVER_OK
      MOV         r0, r11
d537 36
@


4.1
log
@Initial revision
@
text
@d39 14
d86 3
d116 5
a120 1
 STASH      r12                 ; Save private word pointer in case we need it later.
d210 15
d237 1
a237 1
        CDebug_StrReg2  "Do IDENTIFY ",r0
d239 1
a239 1
     STASH         "r0-r8"
d241 7
a247 2
     STRIM         "call ATAPI_Control"
     DisplayNewLine
d249 5
a253 5
     ORR           r0, r0, # readdata + ATAPIOP__IDENTIFY_DEVICE + ATAPIOP__DONT_USE_R7 + ATAPIOP__DONT_RETRY
     MOV           r1, # 0
     MOV           r2, # 0
     ADR           r3, buffer
     MOV           r4, # ATAPIID__STRUCTURE_SIZE
d255 1
a255 1
     MOV           r8, # ATAPICONTROL__SEND_COMMAND
d257 1
a257 1
     BL            ATAPI_Control
d260 1
a260 1
     GRAB          "r0-r8"
d264 2
a265 2
     STRVSB        r3, [ r1, r0 ]
     BVS           MIC_DoneCheckForATAPI
d353 5
d364 3
d397 3
d401 1
d413 3
d417 1
a485 1

a487 1

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a38 14
; 19-Jun-95  15:41  cpartington (Cambridge Systems Design)
; * Added faster_startup code (don't look for more drives than are
;   configured).
;
; 21-Jun-95  15:21  cpartington (Cambridge Systems Design)
; * Added test code conditional on cdp_swi.
;
; 06-Jul-95  10:43  cpartington (Cambridge Systems Design)
; * Added code conditional on full_drive_detection to try to code around
;   Sony CDU50E sole drive problem.
;
; 09-Aug-95  15:39  cpartington (Cambridge Systems Design)
; * Removed code conditional on cdp_swi (unused).
;
a71 3
 [ cdebug
        CDebug_WriteS   "Initialising ATAPI version $VString ($Date)"
 ]
d99 1
a99 5
 [ faster_startup
        STASH   "r7,r12"
 |
        STASH   r12             ; Save private word pointer in case we need it later.
 ]
a188 15
 [ faster_startup
; first determine how many drives are configured so we can stop looking when
; we've found that many

        MOV     r0,#161                 ; read CMOS
        MOV     r1,#CDROMFSCMOS         ; location to read
        SWI     XOS_Byte
        BVS     MIC_NoDrivesFound       ; if error, no drives
        ANDS    r7,r2,#CMOSDRIVEBITS
        BEQ     MIC_NoDrivesFound       ; if no drives configured

; no need to force configured drives to be in range 0..2

 ]

d201 1
a201 1
        CDebug_StrReg2  "Checking drive ",r0
d203 1
a203 1
        STASH   "r0-r8"
d205 2
a206 7
 [ full_drive_detection
        MOV     r8,#ATAPICONTROL__CheckForDrive
        BL      ATAPI_Control                   ; VC => ATAPI detected
        GRAB    "r0-r8",VS
        STRVSB  r3,[r1,r0]                      ; if not present, set flag
        BVS     MIC_DoneCheckForATAPI           ; ...and skip the rest
 ]
d208 5
a212 5
        ORR     r0, r0, # readdata + ATAPIOP__IDENTIFY_DEVICE + ATAPIOP__DONT_USE_R7 + ATAPIOP__DONT_RETRY
        MOV     r1, # 0
        MOV     r2, # 0
        ADR     r3, buffer
        MOV     r4, # ATAPIID__STRUCTURE_SIZE
d214 1
a214 1
        MOV     r8, # ATAPICONTROL__SEND_COMMAND
d216 1
a216 1
        BL      ATAPI_Control
d219 1
a219 1
        GRAB    "r0-r8"
d223 2
a224 2
        STRVSB  r3, [ r1, r0 ]
        BVS     MIC_DoneCheckForATAPI
a311 5
 [ faster_startup
        SUBS    r7,r7,#1                ; --(drives-to-be-found)
        BEQ     MIC_FoundAllDrives      ; all done if now 0
 ]

a317 3
 [ faster_startup
MIC_FoundAllDrives
 ]
a347 3
 [ faster_startup
 GRAB       "r7,r12,r14"
 |
a348 1
 ]
a359 3
 [ faster_startup
 GRAB       "r7,r12,r14"
 |
a360 1
 ]
d429 1
d432 1
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
