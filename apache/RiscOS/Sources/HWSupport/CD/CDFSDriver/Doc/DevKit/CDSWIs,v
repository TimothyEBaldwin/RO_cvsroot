head	4.2;
access;
symbols
	CDFSDriver-2_41:4.2
	CDFSDriver-2_40:4.2
	RO_5_07:4.2
	CDFSDriver-2_39:4.2
	CDFSDriver-2_38:4.2
	CDFSDriver-2_37:4.1
	CDFSDriver-2_36:4.1
	CDFSDriver-2_35:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_Ursula_merge:4.1
	dcotton_Spin_merge:4.1.7.1
	CDFSDriver-2_34:4.1
	dcotton_autobuild_BaseSW:4.1
	nturton_CDFSDriver-2_33:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_CDFSDriver-2_33:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2002.11.22.15.10.18;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.35.07;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.35.07;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.15.25;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.44.58;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.42.30;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Added SWI CD_SCSIUserOp (see Doc/SCSIUserOp).

Version 2.38. Tagged as 'CDFSDriver-2_38'
@
text
@; CD_Routine Headers


; This contains details of entry and exit conditions for the general routines that all 
; soft drivers may use


; Routines defined:
;
;                  cd_checkdrive
;                  cd_control
;                  cd_converttolba
;                  cd_converttomsf
;                  cd_discused
;                  cd_driveready
;                  cd_drivestatus
;                  cd_inquiry
;                  cd_lasterror
;                  cd_opendrawer
;                  cd_prefetch
;                  cd_readdata
;                  cd_reset
;                  cd_seekto
;                  cd_stopdisc
;                  cd_version
;                  cd_identify
;                  cd_register
;                  cd_unregister


;-----------------------------------------------------------------------------------------------
cd_version 
;
; on entry:
;          nothing needed
; on exit:
;          r0 -> version string ( word 0 = version number * 100, word 1 .. = null term. string )
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_lasterror 
;
; on entry:
;          nothing needed
; on exit:
;          r0 = number of last error, or 0 if none
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_prefetch  
;
; on entry:
;          r0 =   addressing mode
;          r1 =   block number
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_readdata     **** check this with Mark ****
;
; on entry:
;          r0 =   addressing mode
;          r1 =   block number
;          r2 =   number of blocks
;          r3 ->  where to put data
;          r4 =   number of bytes from each block wanted
;          r7 ->  control block
;          r12 -> any workspace required
;          r13 -> full descending stack
; on exit:
;          if error then r0-> error block, else all regs preserved
;

; r8  = scsi device id
; r9  = card number
; r10 = lun
;-----------------------------------------------------------------------------------------------


;-----------------------------------------------------------------------------------------------
cd_seekto  
;
; on entry:
;          r0 =   addressing mode
;          r1 =   block number
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------


;-----------------------------------------------------------------------------------------------
cd_inquiry  
;
; on entry:
;          r0 -> place to put the inquiry data
;          r7 -> control block
; on exit:
; 
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_discused  
;
; on entry:
;          r0 =  addressing mode that the disc length should be returned in
;          r1 -> storage area to put data in
;          r7 -> control block
; on exit:
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_driveready  
;
; on entry:
;          r7 -> control block
; on exit:
;          r0 = 0 if drive is OK, else r0 = 1
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_stopdisc  
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_opendrawer  
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_converttolba  
; on entry:
;          r0 = address mode
;          r1 = address
; on exit:
;          if oVerflow set then r0 -> error block
;          r1 = new address
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_converttomsf  
; on entry:
;          r0 = address mode
;          r1 = address
; on exit:
;          if oVerflow set then r0 -> error block
;          r1 = new address
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_drivestatus  
;
; on entry:
;          r7 -> control block
; on exit:
;          r0 = status { 1=OK, 2=BUSY, 4=NOTREADY, 8=UNAVAILABLE }
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_control  
;
; on entry:
;          r0 = 0, 1 or 2 to set the level of error response
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_reset  
;
; on entry:
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------
cd_checkdrive  
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;          r0 = drive status bits
;-----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
cd_identify
;
; on entry:
;          r7 -> control block
;                control block + 0  = SCSI device id
;                control block + 4  = SCSI card number
;                control block + 8  = Logical unit number
;                control block + 12 = 0 - drive type not needed
; on exit:
;          if oVerflow clear:
;                r0 - r1 preserved
;                r2 = drive type given by CDFS driver, else -1 if type not recognised
;          if oVerflow set:
;                r0 -> error block, could be because no drivers loaded
;                r1 - r9 preserved
;
;----------------------------------------------------------------------------------------------

; the 'buffer' in workspace is to be used as follows:
; bytes 0  to  7 are to build the inquiry command up
; bytes 8  to 44 are for the returned inquiry data

;--------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
cd_register 
;
; on entry:
;           r0 -> block
;                 block + 0 = information word for CDFSDriver module
;                 block + 4 = number of times registered (should be set to zero
;                             and will be updated by CDFSDriver)
;                 block + 8 = number of drive types recognised by this driver
;           r1 -> special tag (&EE50EE50 = 1 word) followed by the handler code
;           r2 -> workspace for soft-loadable module (this will be R12 in the handler)
;
;           r12 -> my workspace pointer
; on exit:
;          Overflow flag clear if registered OK, else set and R0->error block.
;
;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
cd_unregister
;
; on entry:
;           r0 -> block
;                 block + 0 = information word for CDFSDriver module
;                 block + 4 = number of times registered (should be set to zero
;                             and will be updated by CDFSDriver)
;                 block + 8 = number of drive types recognised by this driver
;           r1 -> special tag (&EE50EE50 = 1 word) followed by the handler code
;
;           r12 -> my workspace pointer
; on exit:
;          Overflow flag clear if registered OK, else set and R0->error block.
;
;----------------------------------------------------------------------------------------------

; r8 = registered count

;----------------------------------------------------------------------------------------------
@


4.1
log
@Initial revision
@
text
@d221 1
a221 1
;                r2 = drive type given by CDFS driver, else -1 if type not recognized
d242 1
a242 1
;                 block + 8 = number of drive types recognized by this driver
d260 1
a260 1
;                 block + 8 = number of drive types recognized by this driver
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
