head	4.4;
access;
symbols
	CDFSDriver-2_41:4.4
	CDFSDriver-2_40:4.4
	RO_5_07:4.4
	CDFSDriver-2_39:4.4
	CDFSDriver-2_38:4.4
	CDFSDriver-2_37:4.3
	CDFSDriver-2_36:4.2
	CDFSDriver-2_35:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_Ursula_merge:4.1
	dcotton_Spin_merge:4.1.7.1
	CDFSDriver-2_34:4.1
	dcotton_autobuild_BaseSW:4.2
	nturton_CDFSDriver-2_33:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_CDFSDriver-2_33:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2002.11.22.15.10.19;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2002.11.06.14.32.38;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	2000.12.07.10.45.33;	author jberanek;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.35.10;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.35.10;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.15.47;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.45.23;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.42.41;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Added SWI CD_SCSIUserOp (see Doc/SCSIUserOp).

Version 2.38. Tagged as 'CDFSDriver-2_38'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; -> Identify.s















;       This contains code for the CD_Identify SWI

















; by MEW of Eesox 28-Apr-93


;----------------------------------------------------------------------------------------------
cd_identify ROUT
;
; on entry:
;          r7 -> control block
;                control block + 0  = SCSI device id
;                control block + 4  = SCSI card number
;                control block + 8  = Logical unit number
;                control block + 12 = 0 - drive type not needed
; on exit:
;          if oVerflow clear:
;                r0 - r1 preserved
;                r2 = drive type given by CDFS driver, else -1 if type not recognised
;          if oVerflow set:
;                r0 -> error block, could be because no drivers loaded
;                r1 - r9 preserved
;
;----------------------------------------------------------------------------------------------

; the 'buffer' in workspace is to be used as follows:
; bytes 0  to  7 are to build the inquiry command up
; bytes 8  to 44 are for the returned inquiry data

 Debug "cd_identify",NL

;--------------------------------
; Are there any drivers loaded ?
;--------------------------------
 LDR       r14, number_of_drivers
 TEQ       r14, #0
 addr      r0, driver_not_present, EQ
 BEQ       error_handler_lookup  ; [ no - so error ]

;----------------------------------------------------------------
; Make up a new control block for the driver with its drive type
;----------------------------------------------------------------
 LDMIA     r7, { r8, r9, r10 }
 MOV       r14, #0
 ADR       r7, control_block
 STMIA     r7, { r8, r9, r10, r14 }

;--------------------------------
; SCSI Inquiry command
;--------------------------------
 BL       space_saver

 ORR       r0, r0, #escapepolloff + readdata   ; prevent 'escape key'

 ADR       r3, cdb_inquiry
 LDMIA     r3, { r4, r5 }
 ORR       r4, r4, r10, LSL #8+5
 STMIA     r2, { r4, r5 }

 ADR       r3, buffer + 8

 MOV       r4, #36

 MOV       r5, #0

 SWI       XSCSI_Op

;          r0  -> 36 byte SCSI inquiry data or 0
;          r1  -> if r0 =0 THEN this -> an error block ie/ the reason inquiry data failed
;          r7  -> control block, ignore the driver type, ie/ control block + 20
;          r11 =  reason code for CD_Identify
;          r12 -> their workspace
;          r13 -> full descending stack

 ADRVC     r0, buffer + 8
 MOVVS     r1, r0
 MOVVS     r0, #0

 ADR       r7, control_block

;--------------------------------
; Prepare for jump to hs
;--------------------------------
 ADR       r4, sld_list
 MOV       r3, #MAX_NUMBER_OF_DRIVERS

02
 LDR       r5, [ r4 ], #4
 SUBS      r3, r3, #1
 BEQ       not_recognised

 TEQ       r5, #0
 BEQ       %BT02

;--------------------------------
; Jump to each of the drivers
;--------------------------------
 RSB       r6, r3, #MAX_NUMBER_OF_DRIVERS - 1
 ADR       r2, wsp_list



 Push      "r0, r1, r3, r4, r6, r7, r12"
 LDR       r12, [ r2, r6, LSL #2 ]

;------------------------------------------
; Build a return address including PC flags (if in 26-bit mode)
; Actually doesn't matter if you preserve flags, since CMP will splat them all
;------------------------------------------
 MOV       r11, #30

 MOV       r14, pc
 ADD       pc, r5, #4

back_from_identify

; r2 = drive type or -1 if not recognised

 Pull      "r0, r1, r3, r4, r6, r7, r12"

 CMP       r2, #-1
 BEQ       %BT02

;--------------------------------
; Add my drive type and return
;--------------------------------
 ADD       r12, r2, r6, LSL #2

 STR       r12, [sp, #2*4]
 SWIExitVC

;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
cdb_inquiry = &12, 0, 0, 0, 36, 0
 ALIGN

;----------------------------------------------------------------------------------------------
not_recognised
 MOV       r2, #-1
 STR       r2, [sp, #2*4]
 SWIExitVC

;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------

 END
@


4.3
log
@  Changes for RISC OS 5.
Detail:
  * Merged in RISCOS Ltd change: module no longer fails to intialise if no
    CDROMs are configured. This, along with their equivalent change in
    CDFS, allows the number of CDROMs to be configured up from 0 from the
    command line
  * Moved resources here from CDFSResources - allows tokenisation
  * Uses objasm and shared makefiles
  * 32-bit compatible
Admin:
  Not tested.

Version 2.37. Tagged as 'CDFSDriver-2_37'
@
text
@d64 1
a64 1
;                r2 = drive type given by CDFS driver, else -1 if type not recognized
d135 1
a135 1
 BEQ       not_recognized
d162 1
a162 1
; r2 = drive type or -1 if not recognized
d183 1
a183 1
not_recognized
@


4.2
log
@  Macro changes
Detail:
  Replaced GRABS and GRAB with Pull, and STASH with Push.
Admin:
  Built.


Version 2.36. Tagged as 'CDFSDriver-2_36'
@
text
@d152 2
a153 1
; Build a return address including PC flags
a154 7
 ADR       r14, back_from_identify
 Push      pc
 Pull      r11
 AND       r11, r11, #255:ROL:26
 ORR       r14, r14, r11


d157 1
a160 1
 NOP
d174 2
a175 3
 Pull      "r0-r11, r14"
 MOV       r2, r12
 BICS      pc, r14, #Overflow_Flag
a183 1
 Pull      "r0-r11, r14"
d185 2
a186 1
 BICS      pc, r14, #Overflow_Flag
@


4.1
log
@Initial revision
@
text
@d148 1
a148 1
 STASH     "r0, r1, r3, r4, r6, r7, r12"
d155 2
a156 2
 STASH     pc
 GRAB      r11
d170 1
a170 1
 GRAB      "r0, r1, r3, r4, r6, r7, r12"
d180 1
a180 1
 GRAB      "r0-r11, r14"
d191 1
a191 1
 GRAB      "r0-r11, r14"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
