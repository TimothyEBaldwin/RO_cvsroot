head	4.4;
access;
symbols
	CDFSDriver-2_41:4.4
	CDFSDriver-2_40:4.3
	RO_5_07:4.3
	CDFSDriver-2_39:4.3
	CDFSDriver-2_38:4.3
	CDFSDriver-2_37:4.3
	CDFSDriver-2_36:4.2
	CDFSDriver-2_35:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_Ursula_merge:4.1
	dcotton_Spin_merge:4.1.7.1
	CDFSDriver-2_34:4.1
	dcotton_autobuild_BaseSW:4.2
	nturton_CDFSDriver-2_33:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_CDFSDriver-2_33:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2012.05.24.19.35.26;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	0F0Yb1BoyHs9N06w;

4.3
date	2002.11.06.14.32.38;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	2000.12.07.10.45.33;	author jberanek;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.35.09;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.35.09;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.15.40;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.45.18;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.42.38;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@GET of some defines from exports.
SCSI errors from Hdr:SCSIErr.
Push/Pull instead of STASH/GRAB.
OS_Byte and OS_Module reason codes.
Help string capitalised to match the component name.

Version 2.41. Tagged as 'CDFSDriver-2_41'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; -> ByteCopy.s













; This provides the CD_ByteCopy routine




















;**************************************************************************
; This is a highly optimised routine to move blocks of memory
; It will deal with unword-aligned source and destinations

; copied from pages 1000 to 1005 of PRM

; R1 -> source                                    RCM was ere
; R2 -> destination
; R3 = number of bytes to copy

;**************************************************************************

cd_bytecopyinternal ROUT
     Push    "r0-r11, r14"
     BL      cd_bytecopycommon
     Pull    "r0-r11, pc"

cd_bytecopy
     BL      cd_bytecopycommon
     SWIExitVC

cd_bytecopycommon
     Push    "r14"

;--------------------------
; Any bytes to copy ?
;--------------------------
     TEQ     r3, #0
     Pull    "pc", EQ

;--------------------------

copy_bytes

     TST r2, #3
     BNE MovByt100                  ; destination not word aligned

MovByt20       ; destination now word aligned. branched back to from below

     TST r1, #3
     BNE MovByt200                  ; source not word aligned

; source & destination are now both word aligned
; count is a byte value ( may not be a whole number of words )

; Quick sort out of what we've got left to do

     SUBS r3, r3, #4 * 4         ; Four whole words to do (or more) ?
     BLT MovByt40                      ; no

     SUBS r3, r3, #8 * 4 - 4 * 4 ; Eight whole words to do (or more) ?
     BLT MovByt30


MovByt25

     LDMIA r1!, { r0, r4 - r9, r14 } ; NB. Order ! (?)
     STMIA r2!, { r0, r4 - r9, r14 }

     SUBS r3, r3, #8 * 4
     BGE MovByt25                      ; do another 8 words

     CMP r3, #-8 * 4                ; Quick test rather that chaining down
     Pull  "pc", EQ      ; finished


MovByt30

     ADDS r3, r3, #8 * 4 - 4 * 4 ; Four whole words to do ?
     BLT MovByt40

     LDMIA r1!, { r0, r4 - r5, r14 } ; NB. Order ! (?)
     STMIA r2!, { r0, r4 - r5, r14 }

     Pull  "pc", EQ       ; finished

     SUB r3, r3, #4 * 4


MovByt40

     ADDS r3, r3, #4 * 4 - 2 * 4   ; Two whole words to go ?
     BLT MovByt50

     LDMIA r1!, { r0, r14 } ; NB. Order ! (?)
     STMIA r2!, { r0, r14 }

     Pull  "pc", EQ         ; finished

     SUB r3, r3, #2 * 4


MovByt50

     ADDS r3, r3, #2*4-1*4       ; One whole word to do ?
     BLT MovByt60

     LDR r0, [ r1 ], #4
     STR r0, [ r2 ], #4

     Pull  "pc", EQ         ; finished

     SUB r3, r3, #1 * 4


MovByt60

     ADDS r3, r3, #1*4 - 0*4      ; No more to do ?
     Pull  "pc", EQ         ; finished

     LDR r0, [ r1 ]           ; store remaining 1,2 or 3 bytes


MovByt70


     STRB r0, [ r2 ], #1
     MOV r0, r0, LSR #8
     SUBS r3, r3, #1
     BGT MovByt70

     Pull  "pc"              ; finished



;Initial destination not word aligned.Loop doing bytes(1,2, or 3 )until it is

MovByt100

     LDRB r0, [ r1 ], #1
     STRB r0, [ r2 ], #1
     SUBS r3, r3, #1
     Pull  "pc", EQ                ; finished

     TST r2, #3
     BNE MovByt100

     B MovByt20                      ; Back to mainline code


MovByt200;destination now word aligned,but source isn't. just r14 stacked here

     AND r12, r1, #3       ; offset
     BIC r1, r1, #3      ; Align source

     MOV r12, r12, LSL #3    ; rshft = 0, *, 16 or 24 only

     RSB r11, r12, #32       ; lshft = 32, 24, 16 or 8 only

     LDR r0, [ r1 ], #4
     MOV r0, r0, LSR r12 ; Always have r0 prepared

; Quick sort out of what we've got left to do

     SUBS r3, r3, #4 * 4       ; Four whole words to do (or more) ?
     BLT MovByt240                   ; no

     SUBS r3, r3, #8*4-4*4     ; Eight whole words to do (or more) ?
     BLT MovByt230                   ; no



MovByt225

     LDMIA r1!, { r4 - r10, r14 } ; NB. Order !
     ORR r0, r0, r4, LSL r11

     MOV r4, r4, LSR r12
     ORR r4, r4, r5, LSL r11

     MOV r5, r5, LSR r12
     ORR r5, r5, r6, LSL r11

     MOV r6, r6, LSR r12
     ORR r6, r6, r7, LSL r11

     MOV r7, r7, LSR r12
     ORR r7, r7, r8, LSL r11

     MOV r8, r8, LSR r12
     ORR r8, r8, r9, LSL r11

     MOV r9, r9, LSR r12
     ORR r9, r9, r10, LSL r11

     MOV r10, r10, LSR r12
     ORR r10, r10, r14, LSL r11

     STMIA r2!, { r0, r4 - r10 }

     MOV r0, r14, LSR r12          ; keep r0 prepared

     SUBS r3, r3, #8 * 4
     BGE MovByt225                            ; do another 8 words

     CMP r3, #-8 * 4                       ; Quick test
     Pull    "pc", EQ


MovByt230

     ADDS r3, r3, #8*4 - 4*4             ; Four whole words to do ?
     BLT MovByt240

     LDMIA r1!, { r4 - r6, r14 } ; NB. Order !
     ORR r0, r0, r4, LSL r11

     MOV r4, r4, LSR r12
     ORR r4, r4, r5, LSL r11

     MOV r5, r5, LSR r12
     ORR r5, r5, r6, LSL r11

     MOV r6, r6, LSR r12
     ORR r6, r6, r14, LSL r11

     STMIA r2!, { r0, r4 - r6 }

     Pull    "pc", EQ

     SUB r3, r3, #4*4
     MOV r0, r14, LSR r12   ; keep r0 prepared


MovByt240

     ADDS r3, r3, #2*4           ; Two whole words to do ?
     BLT MovByt250


     LDMIA r1!, { r4, r14 } ; NB. Order !
     ORR r0, r0, r4, LSL r11

     MOV r4, r4, LSR r12
     ORR r4, r4, r14, LSL r11

     STMIA r2!, { r0, r4 }

     Pull    "pc", EQ


     SUB r3, r3, #2*4
     MOV r0, r14, LSR r12   ; keep r0 prepared


MovByt250

     ADDS r3, r3, #2*4 - 1*4     ; One whole word to go ?
     BLT MovByt260

     LDR r14, [ r1 ], #4
     ORR r0, r0, r14, LSL r11

     STR r0, [ r2 ], #4

     Pull    "pc", EQ

     SUB r3, r3, #1*4
     MOV r0, r14, LSR r12   ; keep r0 prepared


MovByt260

     ADDS r3, r3, #1*4 - 0*4
     Pull    "pc", EQ

     LDR r14, [ r1 ]          ; store remaining 1..3 bytes
     ORR r0, r0, r14, LSL r11


MovByt270

     STRB r0, [ r2 ], #1
     MOV r0, r0, LSR #8
     SUBS r3, r3, #1
     BGT MovByt270

     Pull    "pc"



 END
@


4.3
log
@  Changes for RISC OS 5.
Detail:
  * Merged in RISCOS Ltd change: module no longer fails to intialise if no
    CDROMs are configured. This, along with their equivalent change in
    CDFS, allows the number of CDROMs to be configured up from 0 from the
    command line
  * Moved resources here from CDFSResources - allows tokenisation
  * Uses objasm and shared makefiles
  * 32-bit compatible
Admin:
  Not tested.

Version 2.37. Tagged as 'CDFSDriver-2_37'
@
text
@d63 1
a63 1
     STASH   "r0-r11, r14"
d65 1
a65 1
     GRAB    "r0-r11, pc"
@


4.2
log
@  Macro changes
Detail:
  Replaced GRABS and GRAB with Pull, and STASH with Push.
Admin:
  Built.


Version 2.36. Tagged as 'CDFSDriver-2_36'
@
text
@d64 2
d68 5
d78 1
a78 1
     Pull    "r0-r11, pc", EQ, ^
d113 1
a113 1
     Pull  "r0-r11, pc", EQ, ^      ; finished
d124 1
a124 1
     Pull  "r0-r11, pc", EQ, ^       ; finished
d137 1
a137 1
     Pull  "r0-r11, pc", EQ, ^         ; finished
d150 1
a150 1
     Pull  "r0-r11, pc", EQ, ^         ; finished
d158 1
a158 1
     Pull  "r0-r11, pc", EQ, ^         ; finished
d171 1
a171 1
     Pull  "r0-r11, pc",,^              ; finished
d182 1
a182 1
     Pull  "r0-r11, pc", EQ, ^                ; finished
d246 1
a246 1
     Pull    "r0-r11, pc", EQ, ^
d268 1
a268 1
     Pull    "r0-r11, pc", EQ, ^
d288 1
a288 1
     Pull    "r0-r11, pc", EQ, ^
d305 1
a305 1
     Pull    "r0-r11, pc", EQ, ^
d314 1
a314 1
     Pull    "r0-r11, pc", EQ, ^
d327 1
a327 1
     Pull    "r0-r11, pc",,^
@


4.1
log
@Initial revision
@
text
@d71 1
a71 1
     GRABS   "r0-r11, pc", EQ
d106 1
a106 1
     GRABS "r0-r11, pc", EQ         ; finished
d117 1
a117 1
     GRABS "r0-r11, pc", EQ         ; finished
d130 1
a130 1
     GRABS "r0-r11, pc", EQ         ; finished
d143 1
a143 1
     GRABS "r0-r11, pc", EQ         ; finished
d151 1
a151 1
     GRABS "r0-r11, pc", EQ         ; finished
d164 1
a164 1
     GRABS "r0-r11, pc"                 ; finished
d175 1
a175 1
     GRABS "r0-r11, pc", EQ                ; finished
d239 1
a239 1
     GRABS   "r0-r11, pc", EQ
d261 1
a261 1
     GRABS   "r0-r11, pc", EQ
d281 1
a281 1
     GRABS   "r0-r11, pc", EQ
d298 1
a298 1
     GRABS   "r0-r11, pc", EQ
d307 1
a307 1
     GRABS   "r0-r11, pc", EQ
d320 1
a320 1
     GRABS   "r0-r11, pc"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
