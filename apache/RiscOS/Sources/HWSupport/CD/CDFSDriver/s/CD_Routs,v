head	4.7;
access;
symbols
	CDFSDriver-2_41:4.7
	CDFSDriver-2_40:4.6
	RO_5_07:4.6
	CDFSDriver-2_39:4.6
	CDFSDriver-2_38:4.5
	CDFSDriver-2_37:4.4
	CDFSDriver-2_36:4.3
	CDFSDriver-2_35:4.2
	dellis_autobuild_BaseSW:4.2
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_Ursula_merge:4.1
	dcotton_Spin_merge:4.1.7.1
	CDFSDriver-2_34:4.2
	dcotton_autobuild_BaseSW:4.3
	nturton_CDFSDriver-2_33:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_CDFSDriver-2_33:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2012.05.24.19.35.27;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	0F0Yb1BoyHs9N06w;

4.6
date	2002.11.22.21.24.59;	author bavison;	state Exp;
branches;
next	4.5;

4.5
date	2002.11.22.15.10.19;	author bavison;	state Exp;
branches;
next	4.4;

4.4
date	2002.11.06.14.32.38;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2000.12.07.10.45.33;	author jberanek;	state Exp;
branches;
next	4.2;

4.2
date	99.11.05.07.52.13;	author dcotton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.35.09;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.35.09;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.15.42;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.45.20;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.42.39;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@GET of some defines from exports.
SCSI errors from Hdr:SCSIErr.
Push/Pull instead of STASH/GRAB.
OS_Byte and OS_Module reason codes.
Help string capitalised to match the component name.

Version 2.41. Tagged as 'CDFSDriver-2_41'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; -> CD_Routs














; This contains the general routines that all soft drivers may use (if they're lazy)



















; Routines in here:
;                  cd_checkdrive
;                  cd_control
;                  cd_converttolba
;                  cd_converttomsf
;                  cd_discused
;                  cd_driveready
;                  cd_drivestatus
;                  cd_inquiry
;                  cd_lasterror
;                  cd_opendrawer
;                  cd_prefetch
;                  cd_readdata
;                  cd_readuserdata
;                  cd_reset
;                  cd_seekto
;                  cd_stopdisc
;                  cd_version


;-----------------------------------------------------------------------------------------------
cd_version ROUT
;
; on entry:
;          nothing needed
; on exit:
;          r0 -> version string ( word 0 = version number * 100, word 1 .. = null term. string )
;
;-----------------------------------------------------------------------------------------------

 ADR       r0, VersionMessage
 STR       r0, [sp, #0*4]
 SWIExitVC

VersionMessage DCD Module_Version
                 = "$Module_FullVersion", " CD_SWI control module by Eesox", 0
 ALIGN

;-----------------------------------------------------------------------------------------------
cd_lasterror ROUT
;
; on entry:
;          nothing needed
; on exit:
;          r0 = number of last error, or 0 if none
;
;-----------------------------------------------------------------------------------------------

 LDR       r0, LastErrorNumber
 STR       r0, [sp, #0*4]
 SWIExitVC



;-----------------------------------------------------------------------------------------------
cd_prefetch ROUT
;
; on entry:
;          r0 =   addressing mode
;          r1 =   block number
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------
 MOV       r2, #1
 ADR       r3, buffer + 32
 MOV       r4, #1      ; Allow to run on

;-----------------------------------------------------------------------------------------------
cd_readdata ROUT
;
; on entry:
;          r0 =   addressing mode
;          r1 =   block number
;          r2 =   number of blocks
;          r3 ->  where to put data
;          r4 =   number of bytes from each block wanted
;          r7 ->  control block
;          r12 -> my workspace
;          r13 -> full descending stack
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

; r8  = scsi device id
; r9  = card number
; r10 = lun

 Push      "r0-r4"

 Debug "cd_readdata",NL

01

 LDMIA     r7, { r8, r9, r10 }


 MUL       r4, r2, r4

;---------------------
; Set up the cdb block
;---------------------
 MOV       r5, #&28
 ORR       r5, r5, r10, LSL #8+5
 MOV       r6, r2, LSR #8         ; Number of blocks
 MOV       r6, r6, LSL #24        ;
 AND       r14, r2, #255          ;
 ADR       r2, buffer
 STMIA     r2, { r5, r6, r14 }



; R0 = address mode, R1 = address, RETURNS R1 = address

 BL        ConvertToLBA

;------------------
; put in start pos
;------------------
 STRVCB    r1, buffer + 5
 MOVVC     r1, r1, LSR #8
 STRVCB    r1, buffer + 4
 MOVVC     r1, r1, LSR #8
 STRVCB    r1, buffer + 3
 MOVVC     r1, r1, LSR #8
 STRVCB    r1, buffer + 2


;--------------------
; Do the SCSI command
;--------------------
 ORRVC     r0, r8, r9,  LSL #3                 ; card number
 ORRVC     r0, r0, r10, LSL #5                 ; lun
 ORRVC     r0, r0, #escapepolloff + readdata   ; prevent 'escape key'

; r1 = size of cdb
 MOVVC     r1, #10

; r2 -> cdb

; r3 -> put data here

; r4 = number of bytes returned

 MOVVC     r5, #0

 MOVVC     r8, #1

 SWIVC     XSCSI_Op

 Pull      "r1-r5"

 SWIExitVC VC


 LDR       r6, [ r0 ]


;-----------------------------------------------
; If the error is 'Busy' because playing audio
; then StopDisc and try again
;-----------------------------------------------
 LDR       r14, =Busy
 TEQ       r6, r14
 BNE       %FT80
 Push      "r1-r5"
 SWI       XCD_StopDisc
 LDMFD     r13, { r0 - r4 }
 B         %BT01

80

;-----------------------------------------------
; If the error is "Illegal Request", "DataProtect" or "Blank check"
; THEN make it WrongDataMode
;-----------------------------------------------
 LDR       r14, =IllegalRequest
 SUBS      r6, r6, r14
 SUBNES    r6, r6, #(DataProtect - IllegalRequest)
 SUBNES    r6, r6, #(BlankCheck  - DataProtect)
 addr      r0, WrongDataMode, EQ
;-----------------------------------------------
 BEQ       error_handler_lookup
 B         error_handler

;-----------------------------------------------------------------------------------------------
cd_seekto ROUT
;
; on entry:
;          r0 =   addressing mode
;          r1 =   block number
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------


 Push      "r0-r1"

 Debug "cd_seekto",NL

01

 LDMIA     r7, { r8, r9, r10 }


;---------------------
; Set up the cdb block
;---------------------
 MOV       r4, #&2b
 ORR       r4, r4, r10, LSL #8+5
 MOV       r5, #0
 MOV       r6, #0
 ADR       r2, buffer
 STMIA     r2, { r4, r5, r6 }



; R0 = address mode, R1 = address, RETURNS R1 = address

 BL        ConvertToLBA

;------------------
; put in start pos
;------------------
 STRVCB    r1, buffer + 5
 MOVVC     r1, r1, LSR #8
 STRVCB    r1, buffer + 4
 MOVVC     r1, r1, LSR #8
 STRVCB    r1, buffer + 3
 MOVVC     r1, r1, LSR #8
 STRVCB    r1, buffer + 2


;--------------------
; Do the SCSI command
;--------------------
 BLVC      space_saver

; r1 = size of cdb
 MOVVC     r1, #10

; r2 -> cdb

; r4 = number of bytes returned
 MOVVC     r4, #0

 SWIVC     XSCSI_Op

 Pull      "r1-r2"

 SWIExitVC VC

;-----------------------------------------------
; If the error is 'Busy' because playing audio
; then StopDisc and try again
;-----------------------------------------------
 LDR       r14, =Busy
 LDR       r6, [ r0 ]
 TEQ       r6, r14
 BNE       error_handler
 Push      "r1-r2"
 SWI       XCD_StopDisc
 LDMFD     r13, { r0 - r1 }
 B         %BT01

;-----------------------------------------------------------------------------------------------
cd_inquiry ROUT
;
; on entry:
;          r0 -> place to put the inquiry data
;          r7 -> control block
; on exit:
;
;-----------------------------------------------------------------------------------------------

 Debug "cd_enquiry",NL

; r3 -> store here
 MOV       r6, r0

 BL        space_saver

 MOV       r3, r6

;--------------------------------
; SCSI Inquiry command
;--------------------------------
 ORR       r0, r0, #escapepolloff + readdata   ; prevent 'escape key'

 ADR       r14, cdb_inquiry
 LDMIA     r14, { r4, r5 }
 ORR       r4, r4, r10, LSL #8+5
 STMIA     r2, { r4, r5 }

 MOV       r4, #36

 MOV       r5, #0

 SWI       XSCSI_Op

 BVS       error_handler

 SWIExitVC

;-----------------------------------------------------------------------------------------------
cd_discused ROUT
;
; on entry:
;          r0 =  addressing mode that the disc length should be returned in
;          r1 -> storage area to put data in
;          r7 -> control block
; on exit:
;
;-----------------------------------------------------------------------------------------------

; r3 -> store here

;--------------------------------
; SCSI ReadCapacity command
;--------------------------------

 Debug "cd_discused",NL

 BL        space_saver

 ORR       r0, r0, #escapepolloff + readdata   ; prevent 'escape key'

 MOV       r1, #10

 MOV       r4, #&25
 ORR       r4, r4, r10, LSL #8+5
 MOV       r6, #0
 STMIA     r2, { r4, r5, r6 }

 ADR       r3, buffer + 12

 MOV       r4, #8

 SWI       XSCSI_Op

 BVS       error_handler

;----------------------------------------------
; Convert the disc length into the correct mode
;----------------------------------------------

; get r0 and r1 original values
 LDMFD     r13, { r0-r11, r14 }

 ADR       r5, buffer + 12
 LDMIA     r5, { r3, r6 }

 MOV       r5, #255
 ORR       r5, r5, r5, LSL #16

 AND       r2, r5, r3, ROR #24         ; CHANGE REGISTER FROM MSB/LSB TO LSB/HSB
 AND       r4, r5, r3
 ORR       r2, r2, r4, ROR #8          ; R2 = number of blocks on a disc

 AND       r7, r5, r6, ROR #24         ; CHANGE REGISTER FROM MSB/LSB TO LSB/HSB
 AND       r4, r5, r6
 ORR       r7, r7, r4, ROR#8           ; R7 = size of a block


 STR       r7, [ r1, #4 ]

; If not in mode 0 then convert to other
 TEQ       r0, #LBAFormat
 ADDNE     r2, r2, #( MaxNumberOfBlocks + 1 ) * 2 + 1     ; ie point to lead out address

 TEQ       r0, #MSFFormat
 STRNE     r2, [ r1 ]
 SWIExitVC NE



;------------------------
; Convert from LBA to MSF
;------------------------
 MOV       r0, #LBAFormat
 MOV       r3, r1
 MOV       r1, r2

 BL        ConvertToMSF

 BVS       error_handler

; save the important bits in the users area
 STR       r1, [ r3 ]

 SWIExitVC

;-----------------------------------------------------------------------------------------------
cd_driveready ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          r0 = 0 if drive is OK, else r0 = 1
;
;-----------------------------------------------------------------------------------------------

 Debug "cd_driveready",NL

; r3 -> store here

;--------------------------------
; SCSI TestUnitReady command
;--------------------------------
 BL        space_saver

 MOV       r4, r10, LSL #8+5
 STMIA     r2, { r4, r5 }

 MOV       r4, #8

 SWI       XSCSI_Op

 MOVVC     r0, #0
 STRVC     r0, [sp, #0*4]
 SWIExitVC VC

;------------------------------------------
; If UnitAttention then update disc changed
;------------------------------------------
 LDR       r1, [ r0 ]
 LDR       r2, =UnitAttention
 TEQ       r2, r1
 LDRNE     r2, =CheckCondition
 TEQNE     r2, r1
 BEQ       error_handler

;------------------------------------------
 MOV       r0, #1
 STR       r0, [sp, #0*4]
 SWIExitVC

;-----------------------------------------------------------------------------------------------
cd_stopdisc ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;
;-----------------------------------------------------------------------------------------------

 Debug "cd_stopdisc",NL

;--------------------------------
; SCSI Stop disc command
;--------------------------------
 BL        space_saver

 MOV       r4, #&1b
 ORR       r4, r4, r10, LSL #8+5
 STMIA     r2, { r4, r5 }

 MOV       r4, #0

 SWI       XSCSI_Op

 BVS       error_handler

 SWIExitVC


;-----------------------------------------------------------------------------------------------
cd_opendrawer ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;
;-----------------------------------------------------------------------------------------------

 Debug "cd_opendrawer",NL

;--------------------------------
; SCSI Start/Stop unit command
;--------------------------------
 BL        space_saver

 MOV       r4, #&1b
 ORR       r4, r4, r10, LSL #8+5
 MOV       r14, #2
 STMIA     r2, { r4, r14 }

 MOV       r4, #8

 SWI       XSCSI_Op

 SWIExitVC VC

;--------------------------------------------------
; If Illegal Request then the drawer must be locked
;--------------------------------------------------
 LDR       r1, [ r0 ]
 LDR       r2, =IllegalRequest
 TEQ       r1, r2
 addr      r0, DrawerLocked, EQ
 BEQ       error_handler_lookup
 B         error_handler

;-----------------------------------------------------------------------------------------------
cd_converttolba ROUT
; on entry:
;          r0 = address mode
;          r1 = address
; on exit:
;          if oVerflow set then r0 -> error block
;          r1 = new address
;
;-----------------------------------------------------------------------------------------------

 BL        ConvertToLBA

 BVS       error_handler

 STR       r1, [ r13, #4 ]

 SWIExitVC


;-----------------------------------------------------------------------------------------------
cd_converttomsf ROUT
; on entry:
;          r0 = address mode
;          r1 = address
; on exit:
;          if oVerflow set then r0 -> error block
;          r1 = new address
;
;-----------------------------------------------------------------------------------------------

 BL        ConvertToMSF

 BVS       error_handler

 STR       r1, [ r13, #4 ]

 SWIExitVC


;-----------------------------------------------------------------------------------------------
cd_drivestatus ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          r0 = status { 1=OK, 2=BUSY, 4=NOTREADY, 8=UNAVAILABLE }
;-----------------------------------------------------------------------------------------------

 Debug "cd_drivestatus",NL

; r3 -> store here

;--------------------------------
; SCSI TestUnitReady command
;--------------------------------
 BL        space_saver

 MOV       r4, r10, LSL #8+5
 STMIA     r2, { r4, r5 }

 MOV       r4, #8

 SWI       XSCSI_Op

;---------------
; Everything OK
;---------------

 MOVVC     r0, #1
 STRVC     r0, [sp, #0*4]
 SWIExitVC VC

;---------------------
; What error occured ?
;---------------------
 LDR       r1, [ r0 ]

; Not ready
 LDR       r14, =NotReady
 SUBS      r14, r1, r14
 SUBNES    r14, r14, #&201d0 - NotReady    ; Unknown error
 MOVEQ     r0, #4
 STREQ     r0, [sp, #0*4]
 SWIExitVC EQ

; Busy
 LDR       r14, =Busy
 TEQ       r1, r14
 LDRNE     r14, =NoSense
 TEQNE     r1, r14
 MOVEQ     r0, #2
 STREQ     r0, [sp, #0*4]
 SWIExitVC EQ

; No drive - unavailable
 LDR       r14, =ErrorNumber_SCSI_Timeout
 TEQ       r1, r14
 MOVEQ     r0, #8
 STREQ     r0, [sp, #0*4]
 SWIExitVC EQ

;-----------------
; Some other error
;-----------------
 B         error_handler


;-----------------------------------------------------------------------------------------------
cd_control ROUT
;
; on entry:
;          r0 = 0, 1 or 2 to set the level of error response
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------
;--------------------
; Only 0 to 2 allowed
;--------------------
 CMP       r0, #2
 addr      r0, InvalidParameter, CS
 BCS       error_handler_lookup

 MOV       r2, r0

 LDMIA     r7, { r1, r3, r8 }
 ORR       r1, r1, r3, LSL #3
 ORR       r1, r1, r8, LSL #5

 MOV       r0, #4
 MOV       r8, #accesskey
 SWI       XSCSI_Control

 BVS       error_handler

 SWIExitVC


;-----------------------------------------------------------------------------------------------
cd_reset ROUT
;
; on entry:
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

 LDMIA     r7, { r1, r2, r3 }

 ORR       r1, r1, r2, LSL #3
 ORR       r1, r1, r3, LSL #5

 MOV       r0, #1

 MOV       r8, #1

 SWI       XSCSI_Initialise

 BVS       error_handler

 SWIExitVC


;-----------------------------------------------------------------------------------------------
cd_checkdrive ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;          r0 = drive status bits
;-----------------------------------------------------------------------------------------------

 Debug "cd_checkdrive",NL

;--------------------------------
; SCSI SendDiagnostics command
;--------------------------------
 BL        space_saver

 MOV       r4, #&1d
 ORR       r4, r4, r10, LSL #8+5
 ORR       r4, r4, #1:SHL:10
 STMIA     r2, { r4, r5 }

 MOV       r4, #0

 SWI       XSCSI_Op

;-------------------------
; Is it a hardware error ?
;-------------------------
 TEQVC     r0, r0
 LDRVS     r1, [ r0 ]
 LDRVS     r2, =HardwareError
 TEQVS     r1, r2

 BNE       error_handler     ; [ no ]

;-------------------------

 MOVVC     r0, #0
 MOVVS     r0, #15
 STR       r0, [sp, #0*4]
 SWIExitVC

;-----------------------------------------------------------------------------------------------
cd_scsiuserop ROUT
;
; on entry:
;          r0-r5 as for SCSI_Op (but no device info in R0)
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

 Debug "cd_scsiuserop",NL

 LDMIA     r7, { r8, r9, r10 }
 ORR       r0, r0, r8                          ; device
 ORR       r0, r0, r9,  LSL #3                 ; card number
 ORR       r0, r0, r10, LSL #5                 ; lun
 ORR       r0, r0, #escapepolloff              ; prevent 'escape key'
 MOV       r8, #1

 SWI       XSCSI_Op

 BVS       error_handler_manyregs

 SWIExitVC

;-----------------------------------------------------------------------------------------------
cd_readuserdata ROUT
;
; The purpose of this call: is to load just user data from mode 2 form 1 or 2 blocks.  This
; part will also work out if it is possible to use a 'complex' scatter list method to improve
; performance.
;
; on entry:
;          r0 =  addressing mode (0, 1 or 2)
;          r1 =  start block
;          r2 =  number of bytes to load (also indicates size of 'r3' buffer)
;          r3 -> put data here
;          r4 =  byte offset in start block to start from
;          r7 -> control block
; on exit:
;          usual error stuff
;          r1 =  last block loaded
;          r4 =  byte offset in last block of next byte
;-----------------------------------------------------------------------------------------------

;---------------------------------------------
; Does this SCSI card support scatter lists ?
;---------------------------------------------

 B         cd_readuserdata_plain

;---------------------------------------------
; Convert block to logical block address
;---------------------------------------------

; BL        ConvertToLBA
; BVS       error_handler

;-----------------------------------------------------------------------------------------------
cd_readuserdata_plain ROUT
;
; The purpose of this call: is to load just user data from mode 2 form 1 or 2 blocks.  This
; 'plain' method will use normal CD_ReadData commands.  SCSI and non-SCSI drives should work
; this way.
;
; on entry:
;          r0 =  addressing mode
;          r1 =  start block
;          r2 =  number of bytes to load (also indicates size of 'r3' buffer)
;          r3 -> put data here
;          r4 =  byte offset in start block to start from
;          r7 -> control block
; on exit:
;          usual error stuff
;          r1 =  last block loaded
;          r4 =  byte offset in last block of next byte
;-----------------------------------------------------------------------------------------------

;---------------------------------------------
; Convert block to logical block address
;---------------------------------------------

 BL        ConvertToLBA
 BVS       error_handler



 [ debug=ON
 Debug     "StartBlock = &"
 MOV       r6, r1
 DebugDisplay r6
 SWI XOS_NewLine
 Debug     "StartByte = &"
 DebugDisplay r4
 SWI XOS_NewLine
 Debug     "NBytes = &"
 DebugDisplay r2
 SWI XOS_NewLine
 ]


 MOV       r6, r4
 MOV       r4, r1
 MOV       r5, r3

; r0 =
; r1 =
; r2 =  number of bytes to load
; r3 =
; r4 =  block
; r5 -> memory
; r6 =  byte offset in first block
; r7 -> control block


; Alogorithm:
;            REPEAT
;                work out number of blocks that can be loaded
;                load the number of blocks
;                shuffle blocks
;            UNTIL <= 1 block left to load
;
;            Load last block into my buffer
;            Copy out last bytes


RUDP_Repeat
;----------------------
;            REPEAT
;----------------------

;------------------------------------------------------------------
;                work out number of bytes storage space available
;------------------------------------------------------------------
 MOV       r10, r2

;------------------------------------------------------------------
;                work out number of blocks that can be loaded
;------------------------------------------------------------------
 LDR       r9, =mode2datasize
 DivRem    r8, r10, r9, r14

 TEQ       r8, # 0
 BEQ       RUDP_LastBlock

;------------------------------------------------------------------
;                load the number of blocks
;------------------------------------------------------------------

;          r0 =   addressing mode
;          r1 =   block number
;          r2 =   number of blocks
;          r3 ->  where to put data
;          r4 =   number of bytes from each block wanted
;          r7 ->  control block

 Push      "r1 - r5"

 MOV       r0, # LBAFormat
 MOV       r1, r4
 MOV       r2, r8
 MOV       r3, r5
 LDR       r4, =mode2datasize

 SWI       XCD_ReadData

 Pull      "r1 - r5"

 BVS       error_handler

;------------------------------------------------------------------
;                shuffle blocks
;------------------------------------------------------------------

; r0  =
; r1  =  memory to copy from
; r2  =  memory to copy to
; r3  =  USERDATA_MODE2FORM2
; r4  =  block
; r5  -> memory to copy to
; r6  =  number of blocks left to shuffle
; r7  -> control block
; r8  =  mode2datasize
; r9  =  number of bytes loaded
; r10 =  byte offset in first block

 Push      "r0-r4, r6-r8, r10"

 MOV       r10, r6
 MOV       r6, r8

 LDR       r8, =mode2datasize

 ADD       r1, r5, # MODE2__TOTALHEADERSIZE
 ADD       r1, r1, r10
 MOV       r2, r5

 MOV       r9, # 0

RUDP_ShuffleBlocks

 MOV       r4, # USERDATA__MODE2FORM1

; Is the data in mode 2 form 2 ?
 SUB       r14, r1, r10
 LDRB      r14, [ r14, # (MODE2__HEADER_SIZE + MODE2__SUB_HEADER_SUBMODE) - MODE2__TOTALHEADERSIZE ]
 TST       r14, # SUBMODE__FORM
 ADDNE     r4, r4, # USERDATA__MODE2FORM2 - USERDATA__MODE2FORM1



 SUB       r3, r4, r10

 BL        cd_bytecopyinternal

 ADD       r1, r1, r8
 SUB       r1, r1, r10

 ADD       r2, r2, r3


; count number of bytes copied
 ADD       r9, r9, r3

 MOV       r10, # 0

 SUBS      r6, r6, # 1
 BGT       RUDP_ShuffleBlocks

 MOV       r5, r2

 Pull      "r0-r4, r6-r8, r10"

 MOV       r6, # 0

; r0 =  drive number
; r1 =
; r2 =  number of blocks
; r3 =
; r4 =  block
; r5 -> memory
; r6 =  byte offset in block to start from (0 at the moment)
; r7 -> control block


 Debug " CopiedLots = &"
 DebugDisplay r9


 ADD       r4, r4, r8
 SUB       r2, r2, r9

;------------------------------------------------------------------
;            UNTIL <= 1 block left to load
;------------------------------------------------------------------

 LDR       r14, =mode2datasize
 CMP       r2, r14
 BGT       RUDP_Repeat

;------------------------------------------------------------------
;            Load last block into my buffer
;------------------------------------------------------------------
RUDP_LastBlock

;------------------------------------------------------------------
;            Copy out last bytes
;------------------------------------------------------------------

 Push      "r0-r4"

 SUBS      r9, r2, #0 ; clears V, also equivalent to CMP r2, #0

 MOV       r0, # LBAFormat
 MOV       r1, r4
 MOV       r2, # 1
 ADR       r3, buffer
 LDR       r4, =mode2datasize

;          r0 =   addressing mode
;          r1 =   block number
;          r2 =   number of blocks
;          r3 ->  where to put data
;          r4 =   number of bytes from each block wanted
;          r7 ->  control block

 SWIGT     XCD_ReadData
 BVS       error_handler

; r1 =  memory to copy from (buffer + 12 + byte offset)
 ADR       r1, buffer + MODE2__TOTALHEADERSIZE

; r2 =  memory to copy to
 MOV       r2, r5



 MOV       r14, # USERDATA__MODE2FORM1

; Is the data in mode 2 form 2 ?
 LDRB      r3, [ r1, # (MODE2__HEADER_SIZE + MODE2__SUB_HEADER_SUBMODE) - MODE2__TOTALHEADERSIZE ]
 TST       r3, # SUBMODE__FORM
 ADDNE     r14, r14, # USERDATA__MODE2FORM2 - USERDATA__MODE2FORM1




 SUB       r14, r14, r6

 ADD       r1, r1, r6

 CMP       r9, r14
 MOVGT     r9, r14

; r3 =  2324 - byte offset, or bytes left to copy, whichever is smaller
 MOVS      r3, r9

 ADD       r5, r5, r3

 BLGT      cd_bytecopyinternal

 Pull      "r0-r4"


 SUBS      r2, r2, r9
 MOVGT     r6, # 0
 ADDGT     r4, r4, # 1
 BGT       RUDP_LastBlock


; return values
;          r1 =  last block loaded
;          r4 =  byte offset in last block of next byte

 ADDS      r9, r9, r6

 LDR       r14, =USERDATA__MODE2FORM2

 MOVEQ     r9, r14

 CMP       r9, r14
 MOVGE     r9, # 0
 ADDGE     r4, r4, # 1
 ADDLT     r9, r9, # 1
 STR       r9, [ r13, # 4*4 ]
 STR       r4, [ r13, # 4*1 ]


 [ debug=ON
 SWI XOS_NewLine
 SWI XOS_NewLine
 ]


 SWIExitVC



;-----------------------------------------------------------------------------------------------
cd_seekuserdata ROUT
;
; The purpose of this call is to find where a particular byte of user data starts in a
; consecutive number of mode 2 form 1 or 2 blocks.  The drive is not expected to seek or load
; any information, just report at what block, and what offset the byte occurs.  This will try
; to use a SCSI scatter list to improve performance.
;
; on entry:
;          r0 =  addressing mode (0, 1 or 2)
;          r1 =  start block (starting from byte 0 of this block)
;          r2 =  byte offset to search for (first position is 0)
;          r7 -> control block
; on exit:
;          usual error stuff
;          r1 =  block found at (in addressing mode of r0 on entry)
;          r2 =  byte offset in block
; all other registers preserved
;-----------------------------------------------------------------------------------------------

;---------------------------------------------
; Does this SCSI card support scatter lists ?
;---------------------------------------------

 B         cd_seekuserdata_plain

;---------------------------------------------
; Convert block to logical block address
;---------------------------------------------

; BL        ConvertToLBA
; BVS       error_handler

;-----------------------------------------------------------------------------------------------
cd_seekuserdata_plain ROUT
;
; The purpose of this call is to find where a particular byte of user data starts in a
; consecutive number of mode 2 form 1 or 2 blocks.  The drive is not expected to seek or load
; any information, just report at what block, and what offset the byte occurs.  Being 'plain'
; it has to make do with current CD_ SWIs so that SCSI and non-SCSI commands work.
;
; on entry:
;          r0 =  addressing mode (0, 1 or 2)
;          r1 =  start block (starting from byte 0 of this block)
;          r2 =  byte offset to search for (first position is 0)
;          r7 -> control block
; on exit:
;          usual error stuff
;          r1 =  block found at (in addressing mode of r0 on entry)
;          r2 =  byte offset in block
; all other registers preserved
;-----------------------------------------------------------------------------------------------

;---------------------------------------------
; Convert block to logical block address
;---------------------------------------------

 BL        ConvertToLBA
 BVS       error_handler


;-------------------------------------------------------------------
; Byte offset of less than 2048 means it must be in the first block
;-------------------------------------------------------------------
 CMP       r2, # USERDATA__MODE2FORM1
 SWIExitVC LT


;---------------------------------------------
; Assume mode 2 form 2 ?
;---------------------------------------------

 LDR       r3, =USERDATA__MODE2FORM2
 DivRem    r4, r2, r3, r14

 ADD       r1, r1, r4

; r0 = addressing format
; r1 = block
; r2 = byte offset

 TEQ       r0, # MSFFormat
 MOVEQ     r0, # LBAFormat
 BLEQ      ConvertToMSF

 TEQ       r0, # PBFormat
 ADDEQ     r1, r1, # 75*2

 STR       r1, [ r13, # 4*1 ]
 STR       r2, [ r13, # 4*2 ]

 SWIExitVC



;-----------------------------------------------------------------------------------------------
; Routine to load default values and save space
;-----------------------------------------------------------------------------------------------
space_saver ROUT
 LDMIA     r7, { r8, r9, r10 }

 ORR       r0, r8, r9,  LSL #3                 ; card number
 ORR       r0, r0, r10, LSL #5                 ; lun
 ORR       r0, r0, #escapepolloff + nodata     ; prevent 'escape key'
 MOV       r1, #6
 ADR       r2, buffer
 MOV       r3, #0
 MOV       r5, #0
 MOV       r8, #1

 MOV       pc, r14





;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------





 END
@


4.6
log
@  Minor bugfixes.
Detail:
  * Fixed some assumptions about flag preservation in CD_ SWIs
  * Standardised spelling of CD-ROM in messages files (not CD ROM)
  * Fixed pathname of messages file to include $
Admin:
  Tested on Tungsten.

Version 2.39. Tagged as 'CDFSDriver-2_39'
@
text
@d654 1
a654 1
 LDR       r14, =TimeoutSelection
@


4.5
log
@Added SWI CD_SCSIUserOp (see Doc/SCSIUserOp).

Version 2.38. Tagged as 'CDFSDriver-2_38'
@
text
@d216 7
a222 4
 Push      "r1-r5", EQ
 SWIEQ     XCD_StopDisc
 LDMEQFD   r13, { r0 - r4 }
 BEQ       %BT01
d312 5
a316 8
 Push      "r1-r2", EQ
 SWIEQ     XCD_StopDisc
 LDMEQFD   r13, { r0 - r1 }
 BEQ       %BT01

;-----------------------------------------------

 B         error_handler
@


4.4
log
@  Changes for RISC OS 5.
Detail:
  * Merged in RISCOS Ltd change: module no longer fails to intialise if no
    CDROMs are configured. This, along with their equivalent change in
    CDFS, allows the number of CDROMs to be configured up from 0 from the
    command line
  * Moved resources here from CDFSResources - allows tokenisation
  * Uses objasm and shared makefiles
  * 32-bit compatible
Admin:
  Not tested.

Version 2.37. Tagged as 'CDFSDriver-2_37'
@
text
@d767 25
@


4.3
log
@  Macro changes
Detail:
  Replaced GRABS and GRAB with Pull, and STASH with Push.
Admin:
  Built.


Version 2.36. Tagged as 'CDFSDriver-2_36'
@
text
@a79 1
 Pull      "r0-r11, r14"
d81 2
a82 1
 BICS      pc, r14, #Overflow_Flag
a97 1
 Pull      "r0-r11, r14"
d99 2
a100 1
 BICS      pc, r14, #Overflow_Flag
d204 1
a204 1
 Pull      "r0-r11, pc", VC, ^
d300 1
a300 1
 Pull      "r0-r11, pc", VC, ^
d355 1
a355 1
 Pull      "r0-r11, pc",, ^
d425 1
a425 1
 Pull      "r0-r11, pc", NE, ^
d443 1
a443 1
 Pull      "r0-r11, pc",, ^
a470 1
 Pull      "r0-r11, r14", VC
d472 2
a473 1
 BICVCS    pc, r14, #Overflow_Flag
a485 1
 Pull      "r0-r11, r14"
d487 2
a488 1
 BICS      pc, r14, #Overflow_Flag
d517 1
a517 1
 Pull      "r0-r11, pc",, ^
d546 1
a546 1
 Pull      "r0-r11, pc", VC, ^
d575 1
a575 1
 Pull      "r0-r11, pc",, ^
d595 1
a595 1
 Pull      "r0-r11, pc",, ^
a626 1
 Pull      "r0-r11, r14", VC
d628 2
a629 1
 BICVCS    pc, r14, #Overflow_Flag
a639 1
 Pull      "r0-r11, r14", EQ
d641 2
a642 1
 BICEQS    pc, r14, #Overflow_Flag
a648 1
 Pull      "r0-r11, r14", EQ
d650 2
a651 1
 BICEQS    pc, r14, #Overflow_Flag
a655 1
 Pull      "r0-r11, r14", EQ
d657 2
a658 1
 BICEQS    pc, r14, #Overflow_Flag
d694 1
a694 1
 Pull      "r0-r11, pc",, ^
d720 1
a720 1
 Pull      "r0-r11, pc",, ^
a760 2
 Pull      "r0-r11, r14"

d763 2
a764 2

 BICS      pc, r14, #Overflow_Flag
d1012 1
a1012 3
 CLV

 MOVS      r9, r2
d1095 1
a1095 2
 Pull      "r0-r11, r14"
 BICS      pc, r14, #Overflow_Flag
d1164 1
a1164 2
 Pull      "r0-r11, r14", LT
 BICLTS    pc, r14, #Overflow_Flag
d1190 1
a1190 2
 Pull      "r0-r11, r14"
 BICS      pc, r14, #Overflow_Flag
@


4.2
log
@	Merged Spinner and Ursula branches. Placed unser srccommit control.

Detail:
	Merged Spinner branch (no changes) and Ursula branch (makefile
tidied). Placed the whole component under srccommit control.

Admin:
	Tested on a RiscPC.

Version 2.34. Tagged as 'CDFSDriver-2_34'
@
text
@d80 1
a80 1
 GRAB      "r0-r11, r14"
d98 1
a98 1
 GRAB      "r0-r11, r14"
d140 1
a140 1
 STASH     "r0-r4"
d202 1
a202 1
 GRAB      "r1-r5"
d204 1
a204 1
 GRABS     "r0-r11, pc", VC
d216 1
a216 1
 STASH     "r1-r5", EQ
d246 1
a246 1
 STASH     "r0-r1"
d298 1
a298 1
 GRAB      "r1-r2"
d300 1
a300 1
 GRABS     "r0-r11, pc", VC
d309 1
a309 1
 STASH     "r1-r2", EQ
d355 1
a355 1
 GRABS     "r0-r11, pc"
d425 1
a425 1
 GRABS     "r0-r11, pc", NE
d443 1
a443 1
 GRABS     "r0-r11, pc"
d471 1
a471 1
 GRAB      "r0-r11, r14", VC
d486 1
a486 1
 GRAB      "r0-r11, r14"
d517 1
a517 1
 GRABS     "r0-r11, pc"
d546 1
a546 1
 GRABS     "r0-r11, pc", VC
d575 1
a575 1
 GRABS     "r0-r11, pc"
d595 1
a595 1
 GRABS     "r0-r11, pc"
d627 1
a627 1
 GRAB      "r0-r11, r14", VC
d640 1
a640 1
 GRAB      "r0-r11, r14", EQ
d649 1
a649 1
 GRAB      "r0-r11, r14", EQ
d656 1
a656 1
 GRAB      "r0-r11, r14", EQ
d694 1
a694 1
 GRABS     "r0-r11, pc"
d720 1
a720 1
 GRABS     "r0-r11, pc"
d761 1
a761 1
 GRAB      "r0-r11, r14"
d899 1
a899 1
 STASH     "r1 - r5"
d909 1
a909 1
 GRAB      "r1 - r5"
d929 1
a929 1
 STASH     "r0-r4, r6-r8, r10"
d974 1
a974 1
 GRAB      "r0-r4, r6-r8, r10"
d1012 1
a1012 1
 STASH     "r0-r4"
d1066 1
a1066 1
 GRAB      "r0-r4"
d1099 1
a1099 1
 GRAB      "r0-r11, r14"
d1169 1
a1169 1
 GRAB      "r0-r11, r14", LT
d1196 1
a1196 1
 GRAB      "r0-r11, r14"
@


4.1
log
@Initial revision
@
text
@d84 2
a85 2
VersionMessage DCD Version
                 = "$VString", " CD_SWI control module by Eesox", 0
d229 1
a229 1
 addr      r0, WrongDataMode, EQ 
d325 1
a325 1
; 
d848 2
a849 2
; r0 =  
; r1 = 
d851 1
a851 1
; r3 = 
d917 1
a917 1
; r0  =  
d979 1
a979 1
; r1 = 
d981 1
a981 1
; r3 = 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
