head	4.3;
access;
symbols
	SerMouse-0_10:4.3
	SerMouse-0_09:4.2
	RO_5_07:4.2
	SerMouse-0_08:4.2
	SerMouse-0_07:4.1
	SerMouse-0_06:4.1
	Ursula_merge:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.02.17.20.51.42;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	R0MVitS5Yk6g6pay;

4.2
date	2003.11.13.17.05.56;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.37.35;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.37.35;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.42.44;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.03.11;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.54.44;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Use some symbolic names instead of numbers
Binary identical, not tested.
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Driver

;---------------------------------------------------------------------------
;       Minimise interrupt latency by using a re-entrancy lock.  If locked
;       this routine simply passes on the TickerV call.  If not locked then
;       the routine locks and pushes the driver address onto the stack before
;       passing on the call.  This ensures that all claimants of TickerV are
;       called BEFORE the kernel branches to our routine by pulling the address
;       off the stack.
;
TickerVHandler
        LDRB    r0, Locked
        TEQ     r0, #0                          ; If re-entrancy lock is on then
        MOVNE   pc, lr                          ;   just pass on call.

        MOV     r0, #&FF                        ; Lock.
        STRB    r0, Locked

        JumpAddress r0,DriverEntry,forward      ; Make TickerV call return to us, not caller.
        Push    "r0,r12"                        ; Stack call address and workspace pointer.
        MOV     pc, lr                          ; Pass on TickerV call.

;---------------------------------------------------------------------------
;       Handle serial input stream using a state machine.
;
DriverEntry
        Pull    r12                             ; Get the workspace pointer we stacked.
        SVCMode r11, r0                         ; Make sure we are in SVC mode, IRQs on.
        NOP
        Push    lr                              ; Save SVC lr.

NextByte
        MOV     r0, #OSArgs_EOFCheck
        LDR     r1, SerialInHandle
        SWI     XOS_Args
        BVS     ReadError

        CMP     r2, #0
        DebugIf EQ,drv,"reading..."
        SWIEQ   XOS_BGet

        DebugIf CC,drv,"...got",r0
        LDRCC   pc, State                       ; If got byte then branch to handler for current state.

DriverExit
        Debug   drv,"DriverExit"
        Pull    lr                              ; Restore SVC lr.
        SetPSR  r11                             ; Go back to old mode.
        MOV     r0, #0                          ; Unlock.
        STRB    r0, Locked
        Pull    pc                              ; Return to real TickerV caller.

ReadError
        Debug   drv,"ReadError"
        LDR     r0, [r0]                        ; Get error number.
        TEQ     r0, #ErrorNumber_Channel        ; If not invalid file handle then
        BNE     DriverExit                      ;   just exit.
        BL      OpenSerial                      ; Otherwise, make sure serial is open.
        BLVS    Disable                         ; If reopen failed then disable.
        B       DriverExit

;---------------------------------------------------------------------------
;       Idle state handler (wait for Microsoft or MSC start byte).
;
MouseIdle
        EOR     r3, r0, #&87                    ; If MSC start byte then button bits inverted
        TST     r3, #&F8                        ;     and bits 3-7 should be clear.
        ADREQ   r2, MSC_GetByte2
        BEQ     %FT10

        EOR     r3, r0, #&C0
        TST     r3, #&C0                        ; If not MS start byte then
        BNE     DriverExit                      ;   ignore it.
        ADR     r2, MS_GetByte2
10
        STRB    r3, Byte1
        STR     r2, State
        B       NextByte

;---------------------------------------------------------------------------
;       Abort interpretation of mouse data record.
;
Abort
        ADR     r3, MouseIdle                   ; Go into idle state.
        STR     r3, State
        B       MouseIdle                       ; Try to interpret invalid byte.

;---------------------------------------------------------------------------
;       State handlers for Microsoft compatible serial mouse.
;
MS_GetByte2
        EOR     r3, r0, #&80
        TST     r3, #&C0                        ; If not valid MS data then
        BNE     Abort                           ;   go back to idle state.

        STRB    r3, Byte2                       ; Remember byte2.
        ADR     r3, MS_GetByte3                 ; Set new state.
        STR     r3, State
        B       NextByte                        ; Try to get byte3.

MS_GetByte3
        EOR     r3, r0, #&80
        TST     r3, #&C0                        ; If not valid MS data then
        BNE     Abort                           ;   go back to idle state.

        LDRB    r2, Byte1                       ; Build Y movement to r1 (get byte1).
        AND     r1, r2, #&0C                    ; Mask off Y7 and Y6 in byte1.
        ORR     r1, r3, r1, LSL #4              ; Combine with byte3 to make 8-bit signed value.
        MOV     r1, r1, LSL #24
        MOV     r1, r1, ASR #24                 ; Sign extend it to 32 bits.

        LDRB    r3, Byte2                       ; Build X movement to r0 (get byte2).
        AND     r0, r2, #&03                    ; Mask off X7 and X6 in byte1.
        ORR     r0, r3, r0, LSL #6              ; Combine with byte2 to make 8-bit signed value.
        MOV     r0, r0, LSL #24
        MOV     r0, r0, ASR #24                 ; Sign extend it to 32 bits.

        MOV     r2, r2, LSR #3                  ; Build button states in r2 (r2 = 00000LRx)
        ORR     r2, r2, #&09                    ; r2 = 00001LR1
        AND     r2, r2, r2, LSR #1              ; r2 = 00001LR1 & 000001LR = 00000LMR (M = L & R)
        TST     r2, #&02                        ; If M bit set from L & R
        BICNE   r2, r2, #&05                    ;   then clear L and R bits.

        ADR     lr, MouseData
        LDMIA   lr, {r3,r10}                    ; Get DeltaX,DeltaY and Buttons.
        ADD     r0, r0, r3
        SUB     r1, r10, r1
        STMIA   lr, {r0-r2}

        ADR     r3, MS_GetByte4                 ; Set new state (could still get byte4).
        STR     r3, State

        B       DriverExit

MS_GetByte4
        EOR     r3, r0, #&80
        TST     r3, #&C0                        ; If not valid MS byte 4 then
        BNE     Abort                           ;   go back to idle state.

        LDR     r0, Buttons                     ; Get current button states.
        MOV     r3, r3, LSR #5                  ; r3 = 0000000M
        BIC     r0, r0, #&02                    ; Clear M bit.
        ORR     r0, r0, r3, LSL #1              ; Set new M bit.
        STR     r0, Buttons

        ADR     r3, MouseIdle                   ; Go back to idle state.
        STR     r3, State

        B       DriverExit

;---------------------------------------------------------------------------
;       State handlers for Mouse Systems Corporation compatible serial mouse.
;
MSC_GetByte2
        STRB    r0, Byte2                       ; Remember first X movement.
        ADR     r3, MSC_GetByte3                ; Set new state.
        STR     r3, State
        B       NextByte                        ; Try to get byte3.

MSC_GetByte3
        STRB    r0, Byte3                       ; Remember first Y movement.
        ADR     r3, MSC_GetByte4                ; Set new state.
        STR     r3, State
        B       NextByte                        ; Try to get byte4.

MSC_GetByte4
        STRB    r0, Byte4                       ; Remember second X movement.
        ADR     r3, MSC_GetByte5                ; Set new state.
        STR     r3, State
        B       NextByte                        ; Try to get byte5.

MSC_GetByte5
        LDRB    r2, Byte2                       ; Get first X movement.
        MOV     r2, r2, LSL #24                 ; Sign extend it.
        MOV     r2, r2, ASR #24
        LDRB    r3, Byte4                       ; Get second X movement.
        MOV     r3, r3, LSL #24                 ; Sign extend it and
        ADD     r2, r2, r3, ASR #24             ;   add to first.

        LDRB    r3, Byte3                       ; Get first Y movement.
        MOV     r3, r3, LSL #24                 ; Sign extend it.
        MOV     r3, r3, ASR #24
        MOV     r0, r0, LSL #24                 ; Sign extend second Y movement and
        ADD     r3, r3, r0, ASR #24             ;   add to first.

        ADR     lr, MouseData
        LDMIA   lr, {r0,r1}                     ; Get DeltaX,DeltaY.
        ADD     r0, r0, r2                      ; Adjust DeltaX.
        ADD     r1, r1, r3                      ; Adjust DeltaY.
        LDRB    r2, Byte1                       ; Get buttons.
        STMIA   lr, {r0-r2}                     ; Update DeltaX,DeltaY,Buttons.

        ADR     r3, MouseIdle                   ; Go back to idle state.
        STR     r3, State

        B       DriverExit

        END
@


4.2
log
@Commit of Kevin's 32-bit SerialMouse.

Version 0.08. Tagged as 'SerMouse-0_08'
@
text
@d47 1
a47 1
        MOV     r0, #5
d70 1
a70 1
        TEQ     r0, #&DE                        ; If not invalid file handle then
@


4.1
log
@Initial revision
@
text
@d28 1
a28 1
        MOVNES  pc, lr                          ;   just pass on call.
d33 1
a33 3
        ADR     r0, DriverEntry                 ; Make TickerV call return to us, not caller.
        AND     r1, lr, #&FC000003              ; Get current mode/flags.
        ORR     r0, r0, r1                      ; Combine with call address.
d35 1
a35 1
        MOVS    pc, lr                          ; Pass on TickerV call.
d42 1
a42 1
        SVCMode r11                             ; Make sure we are in SVC mode, IRQs on.
d65 1
a65 1
        Pull    pc,,^                           ; Return to real TickerV caller.
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
