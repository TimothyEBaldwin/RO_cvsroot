head	1.6;
access;
symbols
	Portable75-0_08:1.6
	Portable75-0_07:1.6
	Portable75-0_06:1.5
	kbracey_32bit_merge:1.3.2.1
	Portable75-0_05:1.4
	Portable75-0_04:1.3
	Portable75-0_03-1_4_2_1:1.3.2.1
	kbracey_32bit:1.3.0.2
	Portable75-0_03:1.3
	Portable75-0_02:1.2
	Portable75-0_01:1.1;
locks; strict;
comment	@# @;


1.6
date	2004.06.21.11.10.28;	author mhobbs;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.16.16.00.07;	author sbrodie;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.20.15.29.04;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	99.11.02.15.22.25;	author kbracey;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.10.14.17.25.21;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	99.10.13.15.02.51;	author kbracey;	state Exp;
branches;
next	;

1.3.2.1
date	99.11.05.13.21.06;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  Added support for new STB
Detail:
  Files modified: Makefile, s.GetAll, s.Portable
  Files added: MkRomCX
Admin:
  Updated from Kev's machine by Mike H.

Version 0.07. Tagged as 'Portable75-0_07'
@
text
@; Copyright 1999 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
 [ PortableCX
RST_REG_BASE    * &30000000
RST_STATUS      * &000
RST_SUSPEND     * &004
 ]

;******************************************************************************
;
; Module header
;
        AREA    |Portable75$$Code|, CODE, READONLY, PIC

Module_BaseAddr
        DCD     0
        DCD     Init     - Module_BaseAddr
        DCD     0
        DCD     0
        DCD     Title    - Module_BaseAddr
        DCD     Help     - Module_BaseAddr
        DCD     0
        DCD     Module_SWISystemBase + PortableSWI * Module_SWIChunkSize
        DCD     SWIEntry - Module_BaseAddr
        DCD     SWINameTable - Module_BaseAddr
        DCD     0
  [ :LNOT: No32bitCode
        DCD     0
        DCD     ModFlags - Module_BaseAddr
  ]

Help    DCB     "Portable",9,"$Module_HelpVersion "
  [ PortableCX
        DCB     "CX24430 version", 0
  |
        DCB     "Non-portable version", 0
  ]

Title ; Share the string
SWINameTable
        =       "Portable",0
        =       "Speed",0
        =       "Control",0
        =       "ReadBMUVariable",0
        =       "WriteBMUVariable",0
        =       "CommandBMU",0
        =       "ReadFeatures",0
        =       "Idle",0
        =       "Stop",0
        =       "Status",0
        =       0
        ALIGN

  [ :LNOT: No32bitCode
ModFlags        DCD ModuleFlag_32bit
  ]

;******************************************************************************


SWIUnknown
SWISpeed
SWIControl
SWI_ReadBMUVariable
SWI_WriteBMUVariable
SWI_CommandBMU
SWIStop
SWIStatus
        Entry   "R1-R7"
        ADR     R0, ErrorBlock_ModuleBadSWI
        MOV     R1, #0                          ; only use global message file
        MOV     R2, #0                          ; use MessageTrans buffer
        ADR     R4, Title
        MOV     R5, #0                          ; no parameter 0
        MOV     R6, #0                          ; no parameter 0
        MOV     R7, #0                          ; no parameter 0
        SWI     XMessageTrans_ErrorLookup
        EXIT


;******************************************************************************
;
; Init - Module initialisation code
;
; Exit
;   R7-R11, R13 preserved
;
Init    Entry   "R7"
;
; Check machine type
;
 [ PortableCX
        LDR     r0, =&14F1                      ; Look for CX24430 PCI host bridge
        LDR     r1, =24430
        MOV     r2, #-1
        MOV     r3, #0
        MOV     r4, #-1
        SWI     XPCI_FindByID
        BVS     %FT99

        MOV     r0, #13                         ; Find the RST registers
        LDR     r1, =RST_REG_BASE
        MOV     r2, #&10000
        SWI     XOS_Memory
        STR     r3, [r12]                       ;remember this in our private word
 |
        MOV     r0, #2                          ;Check main hardware details
        SWI     XOS_ReadSysInfo
        EXIT    VS
                                                ;R0 bits 8..15 give I/O control chip type
        AND     r0, r0, #&0000FF00              ;  0=IOC, 1=IOMD
        TEQ     r0,     #&00000100              ;  must have IOMD
                                                ;R2 bits 0..7 give LCD controller type
        ANDEQ   r0, r2, #&000000FF              ;  0=absent, 1=A4, 2=Stork
        TEQEQ   r0,     #&00000000              ;  must be absent - we have no LCD support
                                                ;R2 bits 8..15 give IOMD variant
        ANDEQ   r0, r2, #&0000FF00              ;  0=basic IOMD, 1=IOMDL (ie ARM 7500[FE])
        TEQEQ   r0,     #&00000100              ;  must be IOMDL

        BNE     %FT99

        TST     r2, #&02000000                  ;R2 bit 25 says if clocks stop when idle
        MOVEQ   r0, #1                          ; 0=don't stop when idle
        MOVNE   r0, #0                          ; 1=stop when idle
        STR     r0, [r12]                       ;remember this in our private word
 ]

        EXIT

;
;Wrong hardware for Portable module
;
99
        ADR     r0, ErrorBlock_BadHard
        MOV     r1, #0                          ;only use global message file
        MOV     r2, #0                          ;use MessageTrans buffer
        MOV     r4, #0                          ;don't substitute anything
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

;******************************************************************************

; Little wrapper that bundles up flag preservation. Allows rest of
; code to corrupt flags (not use MOVS etc).
SWIEntry      ROUT
 [ Portable75
        EntryS
        BL      SWIEntry2
        EXITV

SWIEntry2        ROUT
 ]
        CMPS    R11,#(EndSWIJmpTable - SWIJmpTable) /4
        ADDLO   PC,PC,R11,LSL #2
        B       SWIUnknown

SWIJmpTable
        B       SWISpeed
        B       SWIControl
        B       SWI_ReadBMUVariable
        B       SWI_WriteBMUVariable
        B       SWI_CommandBMU
        B       SWIReadFeatures
        B       SWIIdle
        B       SWIStop
        B       SWIStatus
EndSWIJmpTable

;******************************************************************************
;
; SWI Portable_ReadFeatures
;
; Exit
;   R1  = bit 4 set to indicate SWI Portable_Idle is implemented
;
; All other bits in R1 zeroed, all other registers preserved.
;
SWIReadFeatures ROUT
        MOV     R1, #PortableFeature_Idle
        MOV     PC, LR

;******************************************************************************
;
; SWI Portable_Idle - Places the system into idle mode.
;
; The CPU clock is stopped, but all other clocks run normally. This means the
; Video display and all the IO channels are active, the DRAM is refreshed, but
; the system consumes less power as the CPU is inactive. The CPU remains in
; this state until it receives a FIQ or IRQ interrupt (eg from the keyboard,
; floppy, centi-second timer etc).
;
SWIIdle ROUT
 [ PortableCX
        LDRB    R10, [R12]                      ; get register base (stored by Init)
        LDR     R11, [R10, #RST_SUSPEND]
 |
        LDRB    R11, [R12]                      ; get suspend type (stored by Init)
        MOV     R10, #IOMD_Base                 ;1 will stop Fclk (the CPU core clock) only
  [ Debug
        LDRB    R12, [R10, #IOMD_CLINES]
        ORR     R12, R12, #2_01110101           ; keep inputs as inputs
        EOR     R12, R12, #2_00001000           ; toggle LED
        STRB    R12, [R10, #IOMD_CLINES]
  ]
        STRB    R11, [R10, #IOMD_IDLEMODE]
  [ Debug
        EOR     R12, R12, #2_00001000
        STRB    R12, [R10, #IOMD_CLINES]        ; put LED back
  ]
 ]
        MOV     PC, LR

        MakeErrorBlock  BadHard
        MakeErrorBlock  ModuleBadSWI

        END
@


1.5
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.06. Tagged as 'Portable75-0_06'
@
text
@d15 6
d44 6
a49 1
Help    DCB     "Portable",9,"$Module_HelpVersion Non-portable version", 0
d104 15
d138 1
d161 1
d167 1
d208 4
d214 1
a214 1
 [ Debug
d219 1
a219 1
 ]
d221 1
a221 1
 [ Debug
d224 1
@


1.4
log
@Merge of kbracey_32bit branch.

Version 0.05. Tagged as 'Portable75-0_05'
@
text
@d19 2
d70 1
a70 1
        ENTRY   "R1-R7"
@


1.3
log
@Uses OS_ReadSysInfo to determine whether to stop I/O clocks when idle.
Also uses OS_ReadSysInfo 2 to confirm IOMDL presence, rather than peeking the
IOMD ID register ourselves.

Version 0.03. Tagged as 'Portable75-0_03'
@
text
@d31 4
d36 1
a36 2
Help    DCB     "Portable",9,"$Module_MajorVersion ($Module_Date) Non-portable version",0
        ALIGN
d53 27
d87 1
a87 1
Init    ENTRY   "R7"
d111 1
a111 1
        EXITS
d129 8
a136 1
SWIEntry        ROUT
d138 1
a138 1
        ADDCC   PC,PC,R11,LSL #2
a153 23


SWIUnknown
SWISpeed
SWIControl
SWI_ReadBMUVariable
SWI_WriteBMUVariable
SWI_CommandBMU
SWIStop
SWIStatus
        ENTRY   "R1-R7"
        ADR     R0, ErrorBlock_ModuleBadSWI
        MOV     R1, #0                          ; only use global message file
        MOV     R2, #0                          ; use MessageTrans buffer
        ADR     R4, Title
        MOV     R5, #0                          ; no parameter 0
        MOV     R6, #0                          ; no parameter 0
        MOV     R7, #0                          ; no parameter 0
        SWI     XMessageTrans_ErrorLookup
        EXIT


;******************************************************************************
d164 1
a164 1
        MOVS    PC, LR
d190 1
a190 1
        MOVS    PC, LR
@


1.3.2.1
log
@32-bit compatible version.

Version 0.03, 1.4.2.1. Tagged as 'Portable75-0_03-1_4_2_1'
@
text
@d32 1
a32 6
Help    DCB     "Portable",9,"$Module_MajorVersion ($Module_Date)"
        [ "$Module_MinorVersion" <> ""
        DCB     " $Module_MinorVersion"
        ]
        DCB     " Non-portable version"
        DCB     0
d57 1
a57 1
Init    Entry   "R7"
d81 1
a81 1
        EXIT
d99 1
a99 8
; Little wrapper that bundles up flag preservation. Allows rest of
; code to corrupt flags (not use MOVS etc).
SWIEntry      ROUT
        EntryS
        BL      SWIEntry2
        EXITV

SWIEntry2        ROUT
d101 1
a101 1
        ADDLO   PC,PC,R11,LSL #2
d150 1
a150 1
        MOV     PC, LR
d176 1
a176 1
        MOV     PC, LR
@


1.2
log
@Some tiny optimisations.

Version 0.02. Tagged as 'Portable75-0_02'
@
text
@d68 6
a73 2
        ANDEQ   r2, r2, #&000000FF              ;  0=absent, 1=A4, 2=Stork
        TEQEQ   r2,     #&00000000              ;  must be absent - we have no LCD support
d76 6
a81 11
        MOV     r0, #IOMD_Base                  ; Read IOMD's ID register
        LDRB    r1, [r0, #IOMD_ID0]
        LDRB    r2, [r0, #IOMD_ID1]

        TEQ     r1, #IOMD_7500 :AND: &FF        ; We work on ARM 7500
        TEQEQ   r2, #IOMD_7500 :SHR: 8
        EXITS   EQ

        TEQ     r1, #IOMD_7500FE :AND: &FF      ; or ARM 7500FE
        TEQEQ   r2, #IOMD_7500FE :SHR: 8
        EXITS   EQ
d163 1
a163 1
        MOV     R11, #0                         ;0 will stop Fclk, Clk2, Clk8, Ref8 and Clk16
@


1.1
log
@A cut-down Portable module for non-portable machines. Provides only the
Portable_Idle facility, on any ARM 7500 or ARM 7500FE-based machine.
Will save around 0.5W of power when system is idle.

Version 0.01. Tagged as 'Portable75-0_01'
@
text
@d69 1
a69 1
        TEQEQ   r2,     #&00000000              ;  must be absent
a90 1
        MOV     r3, #0                          ;buffer size (irrelevant)
a100 1
        LDR     R12,[R12]
d131 1
a131 1
        MOV     R2, #0                          ; use internal buffer
d137 1
a137 1
        Pull    "R1-R7,pc"
@
