head	1.8;
access;
symbols
	PCI-0_15:1.8
	PCI-0_14:1.8
	PCI-0_13:1.8
	PCI-0_12:1.7
	PCI-0_11:1.5
	PCI-0_10:1.5
	PCI-0_09:1.5
	PCI-0_08:1.5
	PCI-0_07:1.5
	RO_5_07:1.5
	PCI-0_06:1.5
	PCI-0_05:1.5
	PCI-0_04:1.4
	PCI-0_03:1.3
	PCI-0_02:1.2
	PCI-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2015.01.27.08.26.15;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	uYKL8ggdxmFwED7y;

1.7
date	2014.11.27.23.38.06;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	TEeRjLBhRjyVESZx;

1.6
date	2014.11.27.23.26.40;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	VKxYQ6X3q5uMASZx;

1.5
date	2003.04.15.20.28.39;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.22.11.28.02;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.22.21.53.56;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.14.20.29.25;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Make PCI_MemoryWrite more useful
Previously the behaviour was thus

MemoryRead
  for (i = 0; i < wordcount; i++)
    buffer[i] = *pcimem
MemoryWrite
  for (i = 0; i < wordcount; i++)
    pcimem[i] = *buffer

so in the write case the buffer was largely redundant and the SWI would data abort when copying > 1MB as it fell outside the temporary IO assignment from OS_Memory 14. Now it does

MemoryWrite
  for (i = 0; i < wordcount; i++)
    *pcimem = buffer[i]

the most common case where wordcount = 1 is unchanged, and MemoryRead is unchanged.
Also
 - sprinkle in some more comments
 - make use of mem_to_phys_offset that the HAL is kind enough to have given us, even if it is 0
 - update the capability id bits from PCI-SIG ECN from April 2010

Tested with a parallel port PCI card, which reported it had vendor specific capabilities (InfCap09).

Version 0.13. Tagged as 'PCI-0_13'
@
text
@#{DictTokens}
BadAccessSize:Invalid access size
UnknownAreaHandler:Unknown dynamic area handler call
NoSuchAddr:Address mapping doesn't exist
NoSuchPCI:PCI device doesn't exist
BadRead:Unknown bit set in ReadInfo
ECNoNet:This PCI card may not use the Ethernet address
NDallas:This computer is unable to provide a valid Ethernet address
NoPCIBus:No PCI bus declared
DAName:PCI shared memory

InfDesc:Description         : %0 %1
InfDNVe:Description         : %1
InfLoc1:Location            : Bus %0, Device %1
InfLoc2:, Function %0
InfClas:Class code          : %0
InfVend:Vendor ID           : %0
InfDevi:Device ID           : %0
InfRevi:Revision ID         : %0
InfSubV:Subsystem vendor ID : %0
InfSubs:Subsystem ID        : %0
InfCmdR:"Command register    : "
InfStaR:"Status register     : "
InfSt2R:"Secondary status    : "
InfBrCR:"Bridge control      : "
InfLate:Latency timer       : %0
InfMGnt:Minimum grant       : %0%1µs
InfMLat:Maximum latency     : %0%1µs
InfCach:Cacheline size      : %0
InfIntP:Interrupt pin       : %0
InfIntL:Interrupt line      : %0
InfAddr:"Addresses           : "
InfAddW:"Address windows     : "
InfCaps:"Capabilities        : "
Inf____:"                      "
InfAMem:Memory %0-%1
InfAIO:I/O    %0-%1
InfAROM:ROM    %0-%1
InfAPre:" (prefetchable)"
PCIDevs:No. Bus Dev Fun  Description

InfCmd0:I/O response enabled
InfCmd1:Memory response enabled
InfCmd2:Bus mastering enabled
InfCmd3:Special Cycle response enabled
InfCmd4:Memory Write and Invalidate enabled
InfCmd5:VGA palette snooping enabled
InfCmd6/InfBrC0:Parity error reporting enabled
InfCmd7:Address/data stepping enabled
InfCmd8:SERR# driver enabled
InfCmd9/InfBrC7:Fast back-to-back enabled

InfSt?4:Capabilities list implemented
InfSt?5:66MHz capable
InfSt?7:Fast back-to-back capable
InfSt?8:Master data parity error
InfSDS0:Fast DEVSEL# timing
InfSDS1:Medium DEVSEL# timing
InfSDS2:Slow DEVSEL# timing
InfSDS?:Unknown DEVSEL# timing
InfSt?11:Target Abort signalled
InfSt?12:Target Abort received
InfSt?13:Master Abort received
InfSta14:System Error signalled
InfSt214:System Error received
InfSt?15:Parity error detected

InfBrC1:SERR# forwarding enabled
InfBrC2:ISA I/O compatibility enabled
InfBrC3:VGA compatibility enabled
InfBrC5:Master Abort reporting enabled
InfBrC6:Secondary bus reset
InfBrC8:Long primary discard timer
InfBrC9:Long secondary discard timer
InfBrC10:Discard timer error
InfBrC11:Discard timer SERR# enabled

InfSt??/InfSt???/InfCmd??/InfBrC?/InfBrC??:Unknown bit %0 set

InfCap01:Power management
InfCap02:AGP
InfCap03:Vital product data
InfCap04:Slot identification
InfCap05:Message signalled interrupts
InfCap06:CompactPCI hot swap
InfCap07:PCI-X
InfCap08:HyperTransport
InfCap09:Vendor specific
InfCap0A:Debug port
InfCap0B:CompactPCI central resource control
InfCap0C:PCI hot plug
InfCap0D:PCI bridge subsystem vendor ID
InfCap0E:AGP 8x
InfCap0F:Secure device
InfCap10:PCI Express
InfCap11:MSI-X
InfCap??:Unknown capability %0

C000000:Unclassed device
C000100:Unclassed VGA-compatible device
C010000:SCSI controller
C0101??:IDE controller
C010200:Floppy disc controller
C010300:IPI bus controller
C010400:RAID controller
C0105??:ATA controller
C0106??:SATA controller
C0107??:Serially attached SCSI controller
C0108??:Non volatile memory controller
C01????:Mass storage controller
C020000:Ethernet controller
C020100:Token Ring controller
C020200:FDDI controller
C020300:ATM controller
C020400:ISDN controller
C020500:WorldFip controller
C020600:PCIMG controller
C020700:Infiniband controller
C02????:Network controller
C030000:VGA-compatible display controller
C030001:8514-compatible display controller
C030100:XGA display controller
C030200:3D display controller
C03????:Display controller
C040000:Video device
C040100:Audio device
C040200:Computer telephony device
C040300:Audio device
C04????:Multimedia device
C050000:RAM controller
C050100:Flash controller
C05????:Memory controller
C060000:Host bridge
C060100:ISA bridge
C060200:EISA bridge
C060300:MicroChannel bridge
C060400:PCI-to-PCI bridge
C060401:Subtractive decode PCI-to-PCI bridge
C060500:PCMCIA bridge
C060600:NuBus bridge
C060700:CardBus bridge
C0608??:RACEway bridge
C0609??:Semi transparent PCI-to-PCI bridge
C060A00:Infiniband to PCI bridge
C06????:Bridge device
C070000:Generic XT-compatible serial controller
C070001:16450-compatible serial controller
C070002:16550-compatible serial controller
C070003:16650-compatible serial controller
C070004:16750-compatible serial controller
C070005:16850-compatible serial controller
C070006:16950-compatible serial controller
C070100:Parallel port
C070101:Bi-directional parallel port
C070102:ECP 1.x parallel port
C070103:IEEE1284 controller
C0701FE:IEEE1284 target device
C070200:Multiport serial controller
C070300:Generic modem
C070301:Hayes compatible modem, 16450-compatible interface
C070302:Hayes compatible modem, 16550-compatible interface
C070303:Hayes compatible modem, 16650-compatible interface
C070304:Hayes compatible modem, 16750-compatible interface
C070400:GPIB controller
C070500:Smart card controller
C07????:Communications device
C080000:Generic 8259 PIC
C080001:ISA PIC
C080002:EISA PIC
C080010:I/O APIC
C080020:I/O(x) APIC
C080100:Generic 8237 DMA controller
C080101:ISA DMA controller
C080102:EISA DMA controller
C080200:Generic 8254 system timer
C080201:ISA system timer
C080202:EISA system timers
C080203:HPET
C080300:Generic RTC controller
C080301:ISA RTC controller
C080400:Generic PCI Hot-Plug controller
C080500:SD controller
C080600:IOMMU
C08????:System peripheral
C090000:Keyboard controller
C090100:Digitiser (pen)
C090200:Mouse controller
C090300:Scanner controller
C090400:Gameport controller
C090410:Legacy gameport controller
C09????:Input controller
C0A0000:Generic docking station
C0A????:Docking station
C0B0000:386 processor
C0B0100:486 processor
C0B0200:Pentium processor
C0B1000:Alpha processor
C0B2000:PowerPC processor
C0B3000:MIPS processor
C0B4000:Co-processor
C0B????:Processor
C0C0000:IEEE 1394 controller
C0C0010:OpenHCI IEEE 1394 controller
C0C0100:ACCESS bus controller
C0C0200:SSA controller
C0C0300:UHCI USB controller
C0C0310:OpenHCI USB controller
C0C0320:EHCI USB controller
C0C0330:XHCI USB controller
C0C03??:USB controller
C0C03FE:USB device
C0C0400:Fibre Channel controller
C0C0500:SMBus controller
C0C0600:Infiniband controller
C0C0700:IPMI SMIC interface
C0C0800:SERCOS interface
C0C0900:CAN bus
C0C????:Serial bus controller
C0D0000:iRDA controller
C0D0100:Consumer IR controller
C0D1000:RF controller
C0D1100:Bluetooth controller
C0D1200:Broadband controller
C0D2000:802.1a controller
C0D2100:802.1b controller
C0D????:Wireless controller
C0E????:I2O controller
C0F0100:Satellite TV controller
C0F0200:Satellite audio controller
C0F0300:Satellite voice controller
C0F0400:Satellite data controller
C0F????:Satellite communication controller
C100000:Network and computing en/decryption
C101000:Entertainment en/decryption
C10????:En/decryption controller
C110000:DPIO controller
C110100:Performance counter
C111000:Communication synchroniser
C112000:Signal processing management
C11????:Data acquisition controller
C12????:Processing accelerator
C13????:Non essential instrumentation
C??????:Unknown PCI device (class %0)

# Preferred vendor names
V10B9:Acer
V3388:HiNT
V8086:Intel

# Preferred device names
D10B91533:M1535+ south bridge
D10B95229:M5229 ATA controller
D10B95237:M5237 OpenHCI USB controller
D10B95451:M5451 AC'97 controller
D10B95457:M5457 software modem interface
D10B97101:M7101 power management controller
D33880026:HB2 PCI-to-PCI bridge
D8086B154:21154 PCI-to-PCI bridge
D8086100E:82540 Gigabit Ethernet controller
@


1.7
log
@Fix for nonsense error and implement a 'todo' action
An (unlikely) error during ScanBus would end up with an error block pointing to &00000004 as although the V bit was carefully preserved, R0 wasn't.
Add a RAM flag to remember if the module is operating in no-PCI-bus mode (for PCI_RAMAlloc and PCI_RAMFree) so that the bus access SWIs can return a meaningful error.

Resources/UK/Messages, Errors.s:
 New error message "NoPCIBus".
GetAll.s:
 Remove unnecessary header includes, and use {FALSE} and {TRUE}.
Module.s:
 Record result of OS_ReadSysInfo call to determine if there's a PCI bus or not.
 Do fail to initialise in the RAM loading case if ResourceFS register fails.
Scan.s:
 Preserve R0 if ScanBus returns an error.
 Add some comments.
Interface.s:
 Inspect flag and report error for those SWIs that are harmful when no bus exists, anything going via ValidateHandle doesn't need to since pci_handles will be 0 in that case.
 Relocate FindFreeHandle to Scan.s.

Tested briefly with and without the "got PCI" bit set, showing the appropriate error being returned.

Version 0.12. Tagged as 'PCI-0_12'
@
text
@d87 10
a98 4
V10B9:Acer
V3388:HiNT
V8086:Intel

d245 6
@


1.6
log
@Add new class codes
This brings the messages file up to date with "PCI Code and ID Assignment Spec 1.5" from 06-Mar-2014.
@
text
@d9 1
a9 1

@


1.5
log
@More verbose reporting for *PCIINFO,esp.for bridges.
MSI interrupts now reported (see HAL change).

Version 0.05. Tagged as 'PCI-0_05'
@
text
@d96 1
a96 1
C0101??:ATA controller
d100 4
d110 3
d122 1
d130 1
a130 1
C060300:MCA bridge
d137 2
d149 1
a149 1
C070102:ECP 1.x compliant parallel port
d158 2
d172 1
d176 2
d203 1
d208 4
d216 4
d231 3
d235 2
@


1.4
log
@*PCIdevices now more informative about bridges and capabilities.

Version 0.04. Tagged as 'PCI-0_04'
@
text
@d27 2
a28 2
IntMING:MIN_GNT             : %0
InfMAXL:MAX_LAT             : %0
@


1.3
log
@Now reports the address ranges associated with bridges.
Fix to the Service_PCI calls made - both were going out with the
same reason code due to some copy and paste magic.

Version 0.03. Tagged as 'PCI-0_03'
@
text
@d25 1
d34 1
d48 1
a48 1
InfCmd6:Parity error reporting enabled
d51 1
a51 1
InfCmd9:Fast back-to-back enabled
d64 2
a65 1
InfSt?14:System Error signalled
d68 20
a87 1
InfSt??/InfSt???/InfCmd??:Unknown bit %0 set
@


1.2
log
@Removed unused HelpTokens
Removed unused oInterface
Implemented PCI_MemoryRead,PCI_MemoryWrite,PCI_EnumerateFunctions.
Resync'd docs with implementation,tidied them up,and expanded some of
the descriptions.
Swapped a couple of BHS for BHI so that PCI_FindByXXX can find the last
thing in the list now.
Added new service calls to lookup name and vendor strings.
Added vendor string reason to ReadInfo.
Now *PCIDEVICES and *PCIINFO report the vendor string and description if
available,else default to the class code.

Version 0.02. Tagged as 'PCI-0_02'
@
text
@d24 1
a49 1
InfSta?/InfSta??/InfCmd??:Unknown bit %0 set
d51 4
a54 4
InfSta4:Capabilities list implemented
InfSta5:66MHz capable
InfSta7:Fast back-to-back capable
InfSta8:Master data parity error
d59 7
a65 5
InfSta11:Target Abort signalled
InfSta12:Target Abort received
InfSta13:Master Abort received
InfSta14:System Error signalled
InfSta15:Parity error detected
d68 1
d194 1
a196 1

@


1.1
log
@Initial revision
@
text
@d12 2
a13 1
InfDesc:Description         : %0
@


1.1.1.1
log
@Initial import
@
text
@@
