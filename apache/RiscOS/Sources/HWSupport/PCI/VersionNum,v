head	1.16;
access;
symbols
	PCI-0_15:1.16
	PCI-0_14:1.14
	PCI-0_13:1.13
	PCI-0_12:1.12
	PCI-0_11:1.11
	PCI-0_10:1.10
	PCI-0_09:1.9
	PCI-0_08:1.7
	PCI-0_07:1.6
	RO_5_07:1.5
	PCI-0_06:1.5
	PCI-0_05:1.4
	PCI-0_04:1.3
	PCI-0_03:1.2
	PCI-0_02:1.1;
locks; strict;
comment	@# @;


1.16
date	2017.09.10.11.24.51;	author jlee;	state Exp;
branches;
next	1.15;
commitid	EMPEA8txKRNBSD6A;

1.15
date	2015.08.16.18.31.50;	author jlee;	state Exp;
branches;
next	1.14;
commitid	0oh0G66rVAYJxwxy;

1.14
date	2015.08.05.21.57.18;	author jlee;	state Exp;
branches;
next	1.13;
commitid	EKA1cMdRdLE828wy;

1.13
date	2015.01.27.08.26.11;	author rsprowson;	state Exp;
branches;
next	1.12;
commitid	uYKL8ggdxmFwED7y;

1.12
date	2014.11.27.23.38.03;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	TEeRjLBhRjyVESZx;

1.11
date	2012.02.02.21.44.16;	author jlee;	state Exp;
branches;
next	1.10;
commitid	hG0OMEWMfeEz6DRv;

1.10
date	2011.12.10.21.00.58;	author jlee;	state Exp;
branches;
next	1.9;
commitid	TMI5yVR1nEylBGKv;

1.9
date	2009.06.16.00.15.07;	author bavison;	state Exp;
branches;
next	1.8;

1.8
date	2009.06.11.21.17.10;	author bavison;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.09.19.15.19;	author jlee;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.04.22.03.11;	author jballance;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.21.11.03.11;	author mhobbs;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.15.20.28.39;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.22.11.28.01;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.22.21.53.55;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.14.20.29.25;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Fix PCI_RAMAlloc to be physically aligned
Detail:
  Although PCI_RAMAlloc claims to allocate blocks at the given alignment, both of the two implementations available (OS_Heap 7 and non-OS_Heap 7) perform the alignment and boundary checks using the logical address of the block. Most of the time this seems to work (few clients need anything greater than 4K page alignment), but for those clients that do need greater alignment, this can easily lead to failure.
  s/Memory - Change PCI_RAMAlloc implementation so that it ensures the block of memory it uses is aligned in both logical and physical spaces. Really it's only the physical alignment we care about, but for now the easiest/safest fix is to match the alignment and stick with the current logically-aligned allocation routines.
  s/GetAll, s/Interface, s/Memory - Use definitions from Hdr:OSMem where appropriate
Admin:
  Tested on Raspberry Pi 3
  SMP module is now able to correctly get a 16K-aligned block for use as L1PT
  Note that skipping the first few pages of the area recommended by OS_Memory 12 does introduce the risk of non-aligned/non-contiguous areas being returned once the DA becomes close to full. But, for the case where the desired 32MB physically aligned block isn't available and we fall back to smaller block sizes, there's always been the danger that we'll start returning invalid blocks to the client (whether due to the client asking for an alignment we can't satisfy, or the DA exceeding the limits of the aligned area OS_Memory suggested to us)


Version 0.15. Tagged as 'PCI-0_15'
@
text
@/* (0.15)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.15
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                10 Sep 2017

#define Module_MajorVersion             "0.15"
#define Module_Version                  15
#define Module_MinorVersion             ""
#define Module_Date                     "10 Sep 2017"

#define Module_ApplicationDate          "10-Sep-17"

#define Module_ComponentName            "PCI"
#define Module_ComponentPath            "castle/RiscOS/Sources/HWSupport/PCI"

#define Module_FullVersion              "0.15"
#define Module_HelpVersion              "0.15 (10 Sep 2017)"
#define Module_LibraryVersionInfo       "0:15"
@


1.15
log
@Documentation update
Detail:
  doc/PCI_API - Mention OS_MMUControl 2 in addition to OS_MMUControl 1 when talking about memory barriers
Admin:
  Documentation change, not tagged


Version 0.14. Not tagged
@
text
@d1 1
a1 1
/* (0.14)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.14
d9 1
a9 1
#define Module_Date_CMHG                16 Aug 2015
d11 2
a12 2
#define Module_MajorVersion             "0.14"
#define Module_Version                  14
d14 1
a14 1
#define Module_Date                     "16 Aug 2015"
d16 1
a16 1
#define Module_ApplicationDate          "16-Aug-15"
d21 3
a23 3
#define Module_FullVersion              "0.14"
#define Module_HelpVersion              "0.14 (16 Aug 2015)"
#define Module_LibraryVersionInfo       "0:14"
@


1.14
log
@Implement missing memory attribute support for PCI_HardwareAddress & PCI_LogicalAddress
Detail:
  s/Interface - Now that OS_Memory 13 allows the cache policy to be specified, PCI_HardwareAddress & PCI_LogicalAddress (which have always been documented as allowing the policy to be specified) can have support for it implemented. PCI_LogicalAddres now also has support for specifying the cacheability implemented (was also documented but unimplemented).
Admin:
  Tested on Iyonix


Version 0.14. Tagged as 'PCI-0_14'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                05 Aug 2015
d14 1
a14 1
#define Module_Date                     "05 Aug 2015"
d16 1
a16 1
#define Module_ApplicationDate          "05-Aug-15"
d22 1
a22 1
#define Module_HelpVersion              "0.14 (05 Aug 2015)"
@


1.13
log
@Make PCI_MemoryWrite more useful
Previously the behaviour was thus

MemoryRead
  for (i = 0; i < wordcount; i++)
    buffer[i] = *pcimem
MemoryWrite
  for (i = 0; i < wordcount; i++)
    pcimem[i] = *buffer

so in the write case the buffer was largely redundant and the SWI would data abort when copying > 1MB as it fell outside the temporary IO assignment from OS_Memory 14. Now it does

MemoryWrite
  for (i = 0; i < wordcount; i++)
    *pcimem = buffer[i]

the most common case where wordcount = 1 is unchanged, and MemoryRead is unchanged.
Also
 - sprinkle in some more comments
 - make use of mem_to_phys_offset that the HAL is kind enough to have given us, even if it is 0
 - update the capability id bits from PCI-SIG ECN from April 2010

Tested with a parallel port PCI card, which reported it had vendor specific capabilities (InfCap09).

Version 0.13. Tagged as 'PCI-0_13'
@
text
@d1 1
a1 1
/* (0.13)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.13
d9 1
a9 1
#define Module_Date_CMHG                27 Jan 2015
d11 2
a12 2
#define Module_MajorVersion             "0.13"
#define Module_Version                  13
d14 1
a14 1
#define Module_Date                     "27 Jan 2015"
d16 1
a16 1
#define Module_ApplicationDate          "27-Jan-15"
d21 3
a23 3
#define Module_FullVersion              "0.13"
#define Module_HelpVersion              "0.13 (27 Jan 2015)"
#define Module_LibraryVersionInfo       "0:13"
@


1.12
log
@Fix for nonsense error and implement a 'todo' action
An (unlikely) error during ScanBus would end up with an error block pointing to &00000004 as although the V bit was carefully preserved, R0 wasn't.
Add a RAM flag to remember if the module is operating in no-PCI-bus mode (for PCI_RAMAlloc and PCI_RAMFree) so that the bus access SWIs can return a meaningful error.

Resources/UK/Messages, Errors.s:
 New error message "NoPCIBus".
GetAll.s:
 Remove unnecessary header includes, and use {FALSE} and {TRUE}.
Module.s:
 Record result of OS_ReadSysInfo call to determine if there's a PCI bus or not.
 Do fail to initialise in the RAM loading case if ResourceFS register fails.
Scan.s:
 Preserve R0 if ScanBus returns an error.
 Add some comments.
Interface.s:
 Inspect flag and report error for those SWIs that are harmful when no bus exists, anything going via ValidateHandle doesn't need to since pci_handles will be 0 in that case.
 Relocate FindFreeHandle to Scan.s.

Tested briefly with and without the "got PCI" bit set, showing the appropriate error being returned.

Version 0.12. Tagged as 'PCI-0_12'
@
text
@d1 1
a1 1
/* (0.12)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.12
d9 1
a9 1
#define Module_Date_CMHG                27 Nov 2014
d11 2
a12 2
#define Module_MajorVersion             "0.12"
#define Module_Version                  12
d14 1
a14 1
#define Module_Date                     "27 Nov 2014"
d16 1
a16 1
#define Module_ApplicationDate          "27-Nov-14"
d21 3
a23 3
#define Module_FullVersion              "0.12"
#define Module_HelpVersion              "0.12 (27 Nov 2014)"
#define Module_LibraryVersionInfo       "0:12"
@


1.11
log
@Fix PCI dynamic area growth logic
Detail:
  s/Memory - Fixed a couple of bugs in the dynamic area growth logic that could cause it to fail in some situations:
  * If a boundary value was specified, an invalid boundary value was being passed to OS_Heap when the operation was retried, causing the op to fail
  * The heap grow code was enforcing a minimum alignment of 8 bytes as a way of trying to ensure there'd be enough space for a used block header. However this won't work if the alignment is greater than 4 to begin with; it's much better to just add the extra 4 bytes onto r0 to begin with.
Admin:
  Tested in Iyonix ROM softload
  Fixes issue reported on forums with floppy access not working:
  http://www.riscosopen.org/forum/forums/5/topics/905


Version 0.11. Tagged as 'PCI-0_11'
@
text
@d1 1
a1 1
/* (0.11)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.11
d9 1
a9 1
#define Module_Date_CMHG                02 Feb 2012
d11 2
a12 2
#define Module_MajorVersion             "0.11"
#define Module_Version                  11
d14 1
a14 1
#define Module_Date                     "02 Feb 2012"
d16 1
a16 1
#define Module_ApplicationDate          "02-Feb-12"
d21 3
a23 3
#define Module_FullVersion              "0.11"
#define Module_HelpVersion              "0.11 (02 Feb 2012)"
#define Module_LibraryVersionInfo       "0:11"
@


1.10
log
@Use OS_Heap 7 for allocating IO memory
Detail:
  s/Commands, s/GetAll, s/Memory, s/Module - Now uses OS_Heap 7 for allocating aligned memory blocks instead of allocating overly large areas to perform manual alignment. Falls back to old method if OS_Heap 7 unavailable.
  Makefile - Removed garbage from end of "dynamic dependencies" line.
Admin:
  Tested in OMAP3 ROM & Tungsten ROM softload
  PCI shared memory DA now about 300k smaller on a typical Iyonix.


Version 0.10. Tagged as 'PCI-0_10'
@
text
@d1 1
a1 1
/* (0.10)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.10
d9 1
a9 1
#define Module_Date_CMHG                10 Dec 2011
d11 2
a12 2
#define Module_MajorVersion             "0.10"
#define Module_Version                  10
d14 1
a14 1
#define Module_Date                     "10 Dec 2011"
d16 1
a16 1
#define Module_ApplicationDate          "10-Dec-11"
d21 3
a23 3
#define Module_FullVersion              "0.10"
#define Module_HelpVersion              "0.10 (10 Dec 2011)"
#define Module_LibraryVersionInfo       "0:10"
@


1.9
log
@  No longer uses unaligned loads on ARMv6 or later
Detail:
  s.Interface line 794: changed to use LDRH - I really can't imagine anyone
    inventing an ARMv3 device with a PCI bus.
  s.Interface line 834: don't rely on rotating loads if ARMv6 is a build
    target - use aligned LDR and explicit rotate instead.
  Added ENTRY directive to permit building of GPA debug listing.
  CPU version is no longer specified in the makefile - it's better to inherit
  it from the build environment now that we actually set it appropriately.
Admin:
  Builds but not tested.

Version 0.09. Tagged as 'PCI-0_09'
@
text
@d1 1
a1 1
/* (0.09)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.09
d9 1
a9 1
#define Module_Date_CMHG                16 Jun 2009
d11 2
a12 2
#define Module_MajorVersion             "0.09"
#define Module_Version                  9
d14 1
a14 1
#define Module_Date                     "16 Jun 2009"
d16 1
a16 1
#define Module_ApplicationDate          "16-Jun-09"
d21 3
a23 3
#define Module_FullVersion              "0.09"
#define Module_HelpVersion              "0.09 (16 Jun 2009)"
#define Module_LibraryVersionInfo       "0:9"
@


1.8
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.08. Not tagged
@
text
@d1 1
a1 1
/* (0.08)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.08
d9 1
a9 1
#define Module_Date_CMHG                11 Jun 2009
d11 2
a12 2
#define Module_MajorVersion             "0.08"
#define Module_Version                  8
d14 1
a14 1
#define Module_Date                     "11 Jun 2009"
d16 1
a16 1
#define Module_ApplicationDate          "11-Jun-09"
d21 3
a23 3
#define Module_FullVersion              "0.08"
#define Module_HelpVersion              "0.08 (11 Jun 2009)"
#define Module_LibraryVersionInfo       "0:8"
@


1.7
log
@Fix PCI module to not crash on machines without a PCI bus
Detail:
  s/Interface - Avoid unpredictable behaviour if a handle of -1 is given to EnumerateFunctions, FindByClass, etc.
  s/Module - During initialisation use OS_ReadSysInfo 8 to detect PCI bus, since a NullEntry for HAL_PCIAddresses won't return an error.
Admin:
  Tested on rev C2 beagleboard. Untested on Iyonix, but should be fine.


Version 0.08. Tagged as 'PCI-0_08'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                09 May 2009
d14 1
a14 1
#define Module_Date                     "09 May 2009"
d16 1
a16 1
#define Module_ApplicationDate          "09-May-09"
d22 1
a22 1
#define Module_HelpVersion              "0.08 (09 May 2009)"
@


1.6
log
@	fixed corruption PCI_IORead swi identified in user group
	r1 return value was being overwritten
Detail:
Admin:


Version 0.07. Tagged as 'PCI-0_07'
@
text
@d1 1
a1 1
/* (0.07)
d4 1
a4 1
 * Last processed by srccommit version: 1.2.
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.07
d9 1
a9 1
#define Module_Date_CMHG                04 Dec 2005
d11 2
a12 2
#define Module_MajorVersion             "0.07"
#define Module_Version                  7
d14 1
a14 1
#define Module_Date                     "04 Dec 2005"
d16 1
a16 1
#define Module_ApplicationDate          "04-Dec-05"
d19 1
a19 1
#define Module_ComponentPath            "RiscOS/Sources/HWSupport/PCI"
d21 3
a23 3
#define Module_FullVersion              "0.07"
#define Module_HelpVersion              "0.07 (04 Dec 2005)"
#define Module_LibraryVersionInfo       "0:7"
@


1.5
log
@  Added support for new STB
Detail:
  Files modified: s.Memory, s.Module
    Try to get 32MB contiguous memory or successively smaller chunks if not available
Admin:
  Updated from Kev's machine.

Version 0.06. Tagged as 'PCI-0_06'
@
text
@d1 1
a1 1
/* (0.06)
d4 1
a4 1
 * Last processed by srccommit version: 1.68.
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.06
d9 1
a9 1
#define Module_Date_CMHG                21 Jun 2004
d11 2
a12 2
#define Module_MajorVersion             "0.06"
#define Module_Version                  6
d14 1
a14 1
#define Module_Date                     "21 Jun 2004"
d16 1
a16 1
#define Module_ApplicationDate          "21-Jun-04"
d21 3
a23 3
#define Module_FullVersion              "0.06"
#define Module_HelpVersion              "0.06 (21 Jun 2004)"
#define Module_LibraryVersionInfo       "0:6"
@


1.4
log
@More verbose reporting for *PCIINFO,esp.for bridges.
MSI interrupts now reported (see HAL change).

Version 0.05. Tagged as 'PCI-0_05'
@
text
@d1 1
a1 1
/* (0.05)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.05
d9 1
a9 1
#define Module_Date_CMHG                15 Apr 2003
d11 2
a12 2
#define Module_MajorVersion             "0.05"
#define Module_Version                  5
d14 1
a14 1
#define Module_Date                     "15 Apr 2003"
d16 1
a16 1
#define Module_ApplicationDate          "15-Apr-03"
d21 3
a23 3
#define Module_FullVersion              "0.05"
#define Module_HelpVersion              "0.05 (15 Apr 2003)"
#define Module_LibraryVersionInfo       "0:5"
@


1.3
log
@*PCIdevices now more informative about bridges and capabilities.

Version 0.04. Tagged as 'PCI-0_04'
@
text
@d1 1
a1 1
/* (0.04)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.04
d9 1
a9 1
#define Module_Date_CMHG                22 Feb 2003
d11 2
a12 2
#define Module_MajorVersion             "0.04"
#define Module_Version                  4
d14 1
a14 1
#define Module_Date                     "22 Feb 2003"
d16 1
a16 1
#define Module_ApplicationDate          "22-Feb-03"
d21 3
a23 3
#define Module_FullVersion              "0.04"
#define Module_HelpVersion              "0.04 (22 Feb 2003)"
#define Module_LibraryVersionInfo       "0:4"
@


1.2
log
@Now reports the address ranges associated with bridges.
Fix to the Service_PCI calls made - both were going out with the
same reason code due to some copy and paste magic.

Version 0.03. Tagged as 'PCI-0_03'
@
text
@d1 1
a1 1
/* (0.03)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.03
d9 1
a9 1
#define Module_Date_CMHG                22 Nov 2002
d11 2
a12 2
#define Module_MajorVersion             "0.03"
#define Module_Version                  3
d14 1
a14 1
#define Module_Date                     "22 Nov 2002"
d16 1
a16 1
#define Module_ApplicationDate          "22-Nov-02"
d21 3
a23 3
#define Module_FullVersion              "0.03"
#define Module_HelpVersion              "0.03 (22 Nov 2002)"
#define Module_LibraryVersionInfo       "0:3"
@


1.1
log
@Removed unused HelpTokens
Removed unused oInterface
Implemented PCI_MemoryRead,PCI_MemoryWrite,PCI_EnumerateFunctions.
Resync'd docs with implementation,tidied them up,and expanded some of
the descriptions.
Swapped a couple of BHS for BHI so that PCI_FindByXXX can find the last
thing in the list now.
Added new service calls to lookup name and vendor strings.
Added vendor string reason to ReadInfo.
Now *PCIDEVICES and *PCIINFO report the vendor string and description if
available,else default to the class code.

Version 0.02. Tagged as 'PCI-0_02'
@
text
@d1 1
a1 1
/* (0.02)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.02
d9 1
a9 1
#define Module_Date_CMHG                14 Nov 2002
d11 2
a12 2
#define Module_MajorVersion             "0.02"
#define Module_Version                  2
d14 1
a14 1
#define Module_Date                     "14 Nov 2002"
d16 1
a16 1
#define Module_ApplicationDate          "14-Nov-02"
d21 3
a23 3
#define Module_FullVersion              "0.02"
#define Module_HelpVersion              "0.02 (14 Nov 2002)"
#define Module_LibraryVersionInfo       "0:2"
@

