head	1.5;
access;
symbols
	PCI-0_15:1.5
	PCI-0_14:1.4
	PCI-0_13:1.4
	PCI-0_12:1.4
	PCI-0_11:1.4
	PCI-0_10:1.3
	PCI-0_09:1.2
	PCI-0_08:1.2
	PCI-0_07:1.2
	RO_5_07:1.2
	PCI-0_06:1.2
	PCI-0_05:1.1.1.1
	PCI-0_04:1.1.1.1
	PCI-0_03:1.1.1.1
	PCI-0_02:1.1.1.1
	PCI-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2017.09.10.11.24.59;	author jlee;	state Exp;
branches;
next	1.4;
commitid	EMPEA8txKRNBSD6A;

1.4
date	2012.02.02.21.44.20;	author jlee;	state Exp;
branches;
next	1.3;
commitid	hG0OMEWMfeEz6DRv;

1.3
date	2011.12.10.21.01.00;	author jlee;	state Exp;
branches;
next	1.2;
commitid	TMI5yVR1nEylBGKv;

1.2
date	2004.06.21.11.03.11;	author mhobbs;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Fix PCI_RAMAlloc to be physically aligned
Detail:
  Although PCI_RAMAlloc claims to allocate blocks at the given alignment, both of the two implementations available (OS_Heap 7 and non-OS_Heap 7) perform the alignment and boundary checks using the logical address of the block. Most of the time this seems to work (few clients need anything greater than 4K page alignment), but for those clients that do need greater alignment, this can easily lead to failure.
  s/Memory - Change PCI_RAMAlloc implementation so that it ensures the block of memory it uses is aligned in both logical and physical spaces. Really it's only the physical alignment we care about, but for now the easiest/safest fix is to match the alignment and stick with the current logically-aligned allocation routines.
  s/GetAll, s/Interface, s/Memory - Use definitions from Hdr:OSMem where appropriate
Admin:
  Tested on Raspberry Pi 3
  SMP module is now able to correctly get a 16K-aligned block for use as L1PT
  Note that skipping the first few pages of the area recommended by OS_Memory 12 does introduce the risk of non-aligned/non-contiguous areas being returned once the DA becomes close to full. But, for the case where the desired 32MB physically aligned block isn't available and we fall back to smaller block sizes, there's always been the danger that we'll start returning invalid blocks to the client (whether due to the client asking for an alignment we can't satisfy, or the DA exceeding the limits of the aligned area OS_Memory suggested to us)


Version 0.15. Tagged as 'PCI-0_15'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
RAMAlloc
        Push    "r1-r4,lr"
        LDR     lr, mempool_base_log
        TEQ     lr, #0
        BLEQ    InitDA
        Pull    "r1-r4,pc",VS
 [ DebugMemory
        DREG    r0, "Requested size ",cc
        DREG    r1, ", alignment ",cc
        DREG    r2, ", boundary limitation "
 ]
        LDRB    r3, osheap7_supported
        CMP     r3, #0
        BEQ     NoOSHeap7
        MOV     r4, r2
        MOV     r3, r0
        MOV     r2, r1
        MOV     r0, #HeapReason_GetAligned
        LDR     r1, mempool_base_log
        SWI     XOS_Heap
        BVC     GotAlloced
        LDR     r14, [r0]
        TEQ     r14, #ErrorNumber_HeapFail_Alloc
        Pull    "r1-r4,pc",NE
        ; Grow heap
        LDR     r0, [r1, #8]  ; heap base offset
        ADD     r0, r0, r1    ; heap base ptr
        ; Add some breathing room to ensure a free block plus used block header will fit
        ADD     r0, r0, #12
        ; Round up heap base ptr to required alignment
        LDR     r2, [sp]      ; Recover alignment (OS_Heap will have zero'd it)
        CMP     r2, #4
        MOVLT   r2, #4
        SUB     r2, r2, #1
        ADD     r0, r0, r2
        BIC     r0, r0, r2
        ; Check boundary
        SUBS    r4, r4, #1
        BLT     BoundaryOK
        AND     r2, r0, r4
        ADD     r2, r2, r3
        SUB     r2, r2, #1
        CMP     r2, r4
        BLS     BoundaryOK
        ; Round up heap base ptr to required boundary
        ADD     r0, r0, r4
        BIC     r0, r0, r4
BoundaryOK
        ADD     r0, r0, r3
        LDR     r2, [r1, #12] ; heap end offset
        SUB     r0, r0, r1    ; New base offset
        ADD     r4, r4, #1
        SUB     r1, r0, r2    ; Grow amount
        LDR     r0, mempool_da_number
        SWI     XOS_ChangeDynamicArea
        ; Try again
        MOVVC   r0, #HeapReason_GetAligned
        LDRVC   r1, mempool_base_log
        LDRVC   r2, [sp]
        SWIVC   XOS_Heap
        Pull    "r1-r4,pc",VS

GotAlloced
 [ DebugMemory
        DREG    r2, "Allocated block at ",cc
        DREG    r3, ", size = "
 ]
        LDR     r3, mempool_base_phys
        SUB     lr, r2, r1
        MOV     r0, r2
        ADD     r1, r3, lr
 [ DebugMemory
        DREG    r0, "Returned logical address = ",cc
        DREG    r1, ", physical address = "
 ]
        ADD     sp, sp, #4
        Pull    "r2-r4,pc"
        
NoOSHeap7
        CMP     r2, r1
        MOVLO   r2, r1          ; cheaty cheaty
        LDR     r1, mempool_base_log
        MOV     r4, r2
        CMP     r4, #4
        ADDLS   r3, r0, #4
        ADDHI   r3, r0, r4
        MOV     r0, #HeapReason_Get
        SWI     XOS_Heap
        BVC     GotAllocedNoOSHeap7
        LDR     r14, [r0]
        TEQ     r14, #ErrorNumber_HeapFail_Alloc
        Pull    "r1-r4,pc",NE
        ; Grow heap
        LDR     r0, [r1, #8]    ; heap base offset
        LDR     r1, [r1, #12]   ; heap end offset
        SUB     r1, r1, r0      ; bytes free
        SUB     r1, r3, r1      ; bytes needed
        ADD     r1, r1, #8      ; safety factor

        LDR     r0, mempool_da_number
        SWI     XOS_ChangeDynamicArea

        MOVVC   r0, #HeapReason_Get
        LDRVC   r1, mempool_base_log
        SWIVC   XOS_Heap
        Pull    "r1-r4,pc",VS


GotAllocedNoOSHeap7
 [ DebugMemory
        DREG    r2, "Allocated block at ",cc
        DREG    r3, ", size = "
 ]
        ADD     r0, r2, #4
        CMP     r4, #4
        SUBHI   r3, r4, #1
        ADDHI   r0, r2, r3
        BICHI   r0, r0, r3
        STR     r2, [r0, #-4]
        LDR     r3, mempool_base_phys
        SUB     lr, r0, r1
        ADD     r1, r3, lr
 [ DebugMemory
        DREG    r0, "Returned logical address = ",cc
        DREG    r1, ", physical address = "
 ]
        ADD     sp, sp, #4
        Pull    "r2-r4,pc"

RAMFree
        Push    "r1,r2,lr"
        ; If OS_Heap 7 is supported, all pointers are to heap blocks
        ; Else the word before the pointer points to the heap block
        LDRB    r2, osheap7_supported
        CMP     r2, #0
        LDREQ   r2, [r0, #-4]
        MOVNE   r2, r0
 [ DebugMemory
        DREG    r2, "Freeing block at "
 ]
        LDR     r1, mempool_base_log
        MOV     r0, #HeapReason_Free
        SWI     XOS_Heap
        Pull    "r1,r2,pc"

InitDA
        Push    "r0-r8,lr"
        MOV     r3, #0
        STR     r3, mempool_base_log
        BL      open_message_file
        ADRVC   r0, message_file_block
        ADRVC   r1, Token_DAName
        ADRVC   r2, name_buffer
        MOVVC   r3, #?name_buffer
        MOVVC   r4, #0
        MOVVC   r5, #0
        MOVVC   r6, #0
        MOVVC   r7, #0
        SWIVC   XMessageTrans_Lookup
        MOVVC   r0, #0
        STRVCB  r0, [r2, r3]
        MOVVC   r8, r2
        MOVVC   r0, #DAReason_Create
        MOVVC   r1, #-1
        STRVC   r1, mempool_base_ppn
        MOVVC   r2, #0
        MOVVC   r3, #-1
        MOVVC   r4, #2_00100010         ; SVC only, B, ~C, draggable
        ORRVC   r4, r4, #&100           ; requires specific physical pages
        MOVVC   r5, #32*1024*1024
        ADRVC   r6, DynAreaHandler
        MOVVC   r7, wp
        SWIVC   XOS_DynamicArea
 [ DebugMemory
        BVS     %FT01
        DREG    r1, "Dynamic area ",,Integer
        DREG    r3, "Logical address "
01
 ]
        STRVS   r0, [sp]
        Pull    "r0-r8,pc",VS
20      STR     r1, mempool_da_number
        STR     r3, mempool_base_log
        STR     r3, mempool_free
        ; Grow by one page so we can init the heap
        ; (can't do the initial grow during DA create since the pre-grow handler needs to know the logical base)
        SWI     XOS_ReadMemMapInfo
        MOVVC   r1, r0
        LDRVC   r0, mempool_da_number
        SWIVC   XOS_ChangeDynamicArea
        MOVVC   r0, #HeapReason_Init
        MOVVC   r3, r1
        LDRVC   r1, mempool_base_log
        SWIVC   XOS_Heap
        Pull    "r0-r8,pc",VC
; error case
        STR     r0,[sp]
        BL      KillDA
        SETV
        Pull    "r0-r8,pc"

KillDA
        Push    "r0-r1,lr"
        MOV     r0, #DAReason_Remove
        LDR     r1, mempool_da_number
        CMP     r1, #0
 [ DebugMemory
        BEQ     %FT01
        DREG    r1, "Removing dynamic area ",,Integer
01
 ]
        SWINE   XOS_DynamicArea
        MOV     r1, #0
        STR     r1, mempool_da_number
        STR     r1, mempool_base_log
        STRVS   r0, [sp]
        Pull    "r0-r1,pc"

Token_DAName
        =       "DAName", 0
        ALIGN

DynAreaHandler
        CMP     r0, #4
        ADDCC   pc, pc, R0, LSL #2
        B       UnknownHandlerError
        B       PreGrow
        B       PostGrow
        B       PreShrink
        B       PostShrink

UnknownHandlerError
        ADRL    r0, ErrorBlock_UnknownAreaHandler
        B       copy_error_zero

;Pregrow entry parameters
; R0 = 0 (reason code)
; R1 -> page block (entries set to -1)
; R2 = number of entries in page block == number of pages area is growing by
; R3 = number of bytes area is growing by (r2 * pagesize)
; R4 = current size (bytes)
; R5 = page size
;
; exit with V clear, all preserved

PreGrow Entry   "r0-r3"

        LDR     r3, mempool_base_ppn
        CMP     r3, #-1
        BNE     %FT05

        MOV     r1, #32*1024*1024               ; Try for 32M, 4M aligned
        MOV     r2, #22
02      MOV     r0, #OSMemReason_RecommendPage
        SWI     XOS_Memory
        BVC     %FT03
        MOV     r1, r1, LSR #1                  ; If we can't get it, halve both
        SUB     r2, r2, #1                      ; until down to 32K, 4K aligned
        TST     r1, #16*1024                    ; preserve V flag in loop test
        BEQ     %BT02
        B       %FT99
03
 [ DebugMemory
        DREG    r3, "PPN suggested ",,Integer
 ]
        ; Skip the first few pages of the region, to ensure physical alignment and logical alignment match
        ; (all our allocation functions work by aligning based around logical addresses, when really what the client wants is physically aligned memory)
        MOV     r0, #1
        MOV     r2, r0, LSL r2
        SUB     r2, r2, #1
        LDR     r0, mempool_base_log
        AND     r0, r0, r2
        ADD     r3, r3, r0, LSR #12
 [ DebugMemory
        DREG    r3, "PPN aligned ",,Integer
 ]
        STR     r3, mempool_base_ppn
        MOV     r0, #(2_100001:SHL:8) + OSMemReason_Convert
        ADR     r1, mempool_base_ppn
        MOV     r2, #1
        SWI     XOS_Memory
        BVS     %FT99
 [ DebugMemory
        LDR     r0, mempool_base_phys
        DREG    r0, "Physical address "
 ]

        LDMFD   sp, {r0-r2}             ; recover input parameters

05      MOV     lr, #0
 [ DebugMemory
        DREG    r4, "Current size ",cc
        DREG    r5, ", page size "
 ]
10      CMP     lr, r4
        ADDLO   r3, r3, #1
        ADDLO   lr, lr, r5
        BLO     %BT10

20      STR     r3, [r1], #12
 [ DebugMemory :LAND: {FALSE}
        DREG    r3, "Requesting page ",,Integer
 ]
        SUBS    r2, r2, #1
        ADDNE   r3, r3, #1
        BNE     %BT20

99      STRVS   r0, [sp]
        EXIT

PostGrow
PostShrink
        LDR     r12, mempool_base_log
        TEQ     r12, #0
        STRNE   r4, [r12, #12]
        MOV     pc, lr

PreShrink
        LDR     r12, mempool_base_log
        TEQ     r12, #0
        MOVEQ   pc, lr
        Push    "r0, lr"
        PHPSEI                          ; disable IRQs round this bit
        LDR     r0, [r12, #8]           ; get minimum size
        SUB     r0, r4, r0              ; r0 = current-minimum = max shrink
        CMP     r3, r0                  ; if requested shrink > max
        MOVHI   r3, r0                  ; then limit it
        SUB     r0, r5, #1              ; r0 = page mask
        BIC     r3, r3, r0              ; round size change down to page multiple
        SUB     r0, r4, r3              ; area size after shrink
        STR     r0, [r12, #12]          ; update size

        PLP                             ; restore IRQ status
        CLRV
        Pull    "r0, pc"

        END
@


1.4
log
@Fix PCI dynamic area growth logic
Detail:
  s/Memory - Fixed a couple of bugs in the dynamic area growth logic that could cause it to fail in some situations:
  * If a boundary value was specified, an invalid boundary value was being passed to OS_Heap when the operation was retried, causing the op to fail
  * The heap grow code was enforcing a minimum alignment of 8 bytes as a way of trying to ensure there'd be enough space for a used block header. However this won't work if the alignment is greater than 4 to begin with; it's much better to just add the extra 4 bytes onto r0 to begin with.
Admin:
  Tested in Iyonix ROM softload
  Fixes issue reported on forums with floppy access not working:
  http://www.riscosopen.org/forum/forums/5/topics/905


Version 0.11. Tagged as 'PCI-0_11'
@
text
@d177 1
a177 3
        SWIVC   XOS_ReadMemMapInfo
        MOVVC   r2, r0                  ; initial size = 1 page
        MOVVC   r0, #0
d180 1
d199 10
a208 4
        MOV     r0, #HeapReason_Init
        MOV     r1, r3
        MOV     r3, r2
        SWI     XOS_Heap
d218 1
a218 1
        MOV     r0, #1
d268 1
a268 1
02      MOV     r0, #12
d280 11
d292 1
a292 1
        MOV     r0, #2_100001:SHL:8
@


1.3
log
@Use OS_Heap 7 for allocating IO memory
Detail:
  s/Commands, s/GetAll, s/Memory, s/Module - Now uses OS_Heap 7 for allocating aligned memory blocks instead of allocating overly large areas to perform manual alignment. Falls back to old method if OS_Heap 7 unavailable.
  Makefile - Removed garbage from end of "dynamic dependencies" line.
Admin:
  Tested in OMAP3 ROM & Tungsten ROM softload
  PCI shared memory DA now about 300k smaller on a typical Iyonix.


Version 0.10. Tagged as 'PCI-0_10'
@
text
@d42 2
a43 2
        ; Add some breathing room to ensure a free block will fit
        ADD     r0, r0, #8
d46 2
a47 2
        CMP     r2, #8
        MOVLT   r2, #8
a53 1
        SUB     r4, r4, #1
@


1.2
log
@  Added support for new STB
Detail:
  Files modified: s.Memory, s.Module
    Try to get 32MB contiguous memory or successively smaller chunks if not available
Admin:
  Updated from Kev's machine.

Version 0.06. Tagged as 'PCI-0_06'
@
text
@d16 1
a16 1
        Push    "r2-r4,lr"
d20 1
a20 1
        Pull    "r2-r4,pc",VS
d26 69
d102 1
a102 1
        MOV     r0, #2
d104 1
a104 1
        BVC     GotAlloced
d107 1
a107 1
        Pull    "r2-r4,pc",NE
d118 1
a118 1
        MOVVC   r0, #2
d121 1
a121 1
        Pull    "r2-r4,pc",VS
d124 1
a124 1
GotAlloced
d142 1
d147 9
a155 1
        LDR     r2, [r0, #-4]
d157 1
a157 1
        MOV     r0, #3
d201 1
a201 1
        MOV     r0, #0
@


1.1
log
@Initial revision
@
text
@d113 1
d116 1
d120 1
a120 1
        STR     r1, mempool_da_number
d184 1
a184 2
        MOV     r0, #12
        MOV     r1, #32*1024*1024
d186 1
d188 7
a194 1
        BVS     %FT99
@


1.1.1.1
log
@Initial import
@
text
@@
