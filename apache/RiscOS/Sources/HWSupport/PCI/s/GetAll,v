head	1.7;
access;
symbols
	PCI-0_15:1.7
	PCI-0_14:1.6
	PCI-0_13:1.6
	PCI-0_12:1.6
	PCI-0_11:1.5
	PCI-0_10:1.5
	PCI-0_09:1.4
	PCI-0_08:1.2
	PCI-0_07:1.2
	RO_5_07:1.2
	PCI-0_06:1.2
	PCI-0_05:1.2
	PCI-0_04:1.2
	PCI-0_03:1.2
	PCI-0_02:1.2
	PCI-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2017.09.10.11.24.59;	author jlee;	state Exp;
branches;
next	1.6;
commitid	EMPEA8txKRNBSD6A;

1.6
date	2014.11.27.23.38.11;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	TEeRjLBhRjyVESZx;

1.5
date	2011.12.10.21.01.00;	author jlee;	state Exp;
branches;
next	1.4;
commitid	TMI5yVR1nEylBGKv;

1.4
date	2009.06.16.00.15.08;	author bavison;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.11.21.17.11;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.14.20.29.27;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fix PCI_RAMAlloc to be physically aligned
Detail:
  Although PCI_RAMAlloc claims to allocate blocks at the given alignment, both of the two implementations available (OS_Heap 7 and non-OS_Heap 7) perform the alignment and boundary checks using the logical address of the block. Most of the time this seems to work (few clients need anything greater than 4K page alignment), but for those clients that do need greater alignment, this can easily lead to failure.
  s/Memory - Change PCI_RAMAlloc implementation so that it ensures the block of memory it uses is aligned in both logical and physical spaces. Really it's only the physical alignment we care about, but for now the easiest/safest fix is to match the alignment and stick with the current logically-aligned allocation routines.
  s/GetAll, s/Interface, s/Memory - Use definitions from Hdr:OSMem where appropriate
Admin:
  Tested on Raspberry Pi 3
  SMP module is now able to correctly get a 16K-aligned block for use as L1PT
  Note that skipping the first few pages of the area recommended by OS_Memory 12 does introduce the risk of non-aligned/non-contiguous areas being returned once the DA becomes close to full. But, for the case where the desired 32MB physically aligned block isn't available and we fall back to smaller block sizes, there's always been the danger that we'll start returning invalid blocks to the client (whether due to the client asking for an alignment we can't satisfy, or the DA exceeding the limits of the aligned area OS_Memory suggested to us)


Version 0.15. Tagged as 'PCI-0_15'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
 ; => GetAll
        TTL     The PCI manager for RISC OS.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        $GetMEMM
        GET     Hdr:CMOS
        GET     Hdr:ModHand
        GET     Hdr:Debug
        GET     Hdr:PCI
        GET     Hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     Hdr:NewErrors
        GET     Hdr:Services
        GET     Hdr:Tokens
        GET     Hdr:Proc
        GET     Hdr:Symbols
        GET     Hdr:HALEntries
        GET     Hdr:ResourceFS
        GET     Hdr:MsgTrans
        GET     Hdr:Heap
        GET     Hdr:OSMem

        GET     VersionASM

        GBLL    ReleaseVersion
ReleaseVersion  SETL    {TRUE}

        GBLS    GetHelpTexts
  [ International_Help <> 0
GetHelpTexts    SETS    "GET HelpTexts"
  |
GetHelpTexts    SETS    "GET HelpTokens.s"
  ]

  [ :LNOT::DEF:standalone
        GBLL    standalone
  ]

        GBLL    DebugModule
DebugModule     SETL    ( :LNOT: ReleaseVersion ) :LAND: {FALSE}

        GBLL    DebugInterface
DebugInterface  SETL    ( :LNOT: ReleaseVersion ) :LAND: {FALSE}

        GBLL    DebugCommands
DebugCommands   SETL    ( :LNOT: ReleaseVersion ) :LAND: {FALSE}

        GBLL    DebugScan
DebugScan       SETL    ( :LNOT: ReleaseVersion ) :LAND: {FALSE}

        GBLL    DebugMemory
DebugMemory     SETL    ( :LNOT: ReleaseVersion ) :LAND: {FALSE}

        GBLL    TML_Debugging
TML_Debugging   SETL    {FALSE}

        GET     Structures.s

        GET     Module.s
        GET     Interface.s
        GET     Scan.s
        GET     Commands.s
        GET     Memory.s
        GET     Errors.s
        $GetHelpTexts
        GET     MsgCode.s

        END
@


1.6
log
@Fix for nonsense error and implement a 'todo' action
An (unlikely) error during ScanBus would end up with an error block pointing to &00000004 as although the V bit was carefully preserved, R0 wasn't.
Add a RAM flag to remember if the module is operating in no-PCI-bus mode (for PCI_RAMAlloc and PCI_RAMFree) so that the bus access SWIs can return a meaningful error.

Resources/UK/Messages, Errors.s:
 New error message "NoPCIBus".
GetAll.s:
 Remove unnecessary header includes, and use {FALSE} and {TRUE}.
Module.s:
 Record result of OS_ReadSysInfo call to determine if there's a PCI bus or not.
 Do fail to initialise in the RAM loading case if ResourceFS register fails.
Scan.s:
 Preserve R0 if ScanBus returns an error.
 Add some comments.
Interface.s:
 Inspect flag and report error for those SWIs that are harmful when no bus exists, anything going via ValidateHandle doesn't need to since pci_handles will be 0 in that case.
 Relocate FindFreeHandle to Scan.s.

Tested briefly with and without the "got PCI" bit set, showing the appropriate error being returned.

Version 0.12. Tagged as 'PCI-0_12'
@
text
@d37 1
@


1.5
log
@Use OS_Heap 7 for allocating IO memory
Detail:
  s/Commands, s/GetAll, s/Memory, s/Module - Now uses OS_Heap 7 for allocating aligned memory blocks instead of allocating overly large areas to perform manual alignment. Falls back to old method if OS_Heap 7 unavailable.
  Makefile - Removed garbage from end of "dynamic dependencies" line.
Admin:
  Tested in OMAP3 ROM & Tungsten ROM softload
  PCI shared memory DA now about 300k smaller on a typical Iyonix.


Version 0.10. Tagged as 'PCI-0_10'
@
text
@a20 2
        GET     Hdr:Machine.<Machine>
        $GetIO
a21 1
        GET     Hdr:CPU.Arch
d41 1
a41 1
ReleaseVersion  SETL    True
d47 1
a47 1
GetHelpTexts    SETS    "GET s.HelpTokens"
d55 1
a55 1
DebugModule     SETL    ( :LNOT: ReleaseVersion ) :LAND: False
d58 1
a58 1
DebugInterface  SETL    ( :LNOT: ReleaseVersion ) :LAND: False
d61 1
a61 4
DebugCommands   SETL    ( :LNOT: ReleaseVersion ) :LAND: False

        GBLL    DebugLoader
DebugLoader     SETL    ( :LNOT: ReleaseVersion ) :LAND: False
d64 1
a64 1
DebugScan       SETL    ( :LNOT: ReleaseVersion ) :LAND: False
d67 1
a67 1
DebugMemory     SETL    ( :LNOT: ReleaseVersion ) :LAND: False
d70 1
a70 1
TML_Debugging   SETL    False
@


1.4
log
@  No longer uses unaligned loads on ARMv6 or later
Detail:
  s.Interface line 794: changed to use LDRH - I really can't imagine anyone
    inventing an ARMv3 device with a PCI bus.
  s.Interface line 834: don't rely on rotating loads if ARMv6 is a build
    target - use aligned LDR and explicit rotate instead.
  Added ENTRY directive to permit building of GPA debug listing.
  CPU version is no longer specified in the makefile - it's better to inherit
  it from the build environment now that we actually set it appropriately.
Admin:
  Builds but not tested.

Version 0.09. Tagged as 'PCI-0_09'
@
text
@d39 1
@


1.3
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.08. Not tagged
@
text
@d24 1
@


1.2
log
@Removed unused HelpTokens
Removed unused oInterface
Implemented PCI_MemoryRead,PCI_MemoryWrite,PCI_EnumerateFunctions.
Resync'd docs with implementation,tidied them up,and expanded some of
the descriptions.
Swapped a couple of BHS for BHI so that PCI_FindByXXX can find the last
thing in the list now.
Added new service calls to lookup name and vendor strings.
Added vendor string reason to ReadInfo.
Now *PCIDEVICES and *PCIINFO report the vendor string and description if
available,else default to the class code.

Version 0.02. Tagged as 'PCI-0_02'
@
text
@d76 1
a76 1
        GET     s.Structures
d78 6
a83 6
        GET     s.Module
        GET     s.Interface
        GET     s.Scan
        GET     s.Commands
        GET     s.Memory
        GET     s.Errors
d85 1
a85 1
        GET     s.MsgCode
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
	$GetIO
a83 1
;        GET     s.ROMExtend
@


1.1.1.1
log
@Initial import
@
text
@@
