head	1.4;
access;
symbols
	PCI-0_15:1.4
	PCI-0_14:1.4
	PCI-0_13:1.4
	PCI-0_12:1.4
	PCI-0_11:1.3
	PCI-0_10:1.2
	PCI-0_09:1.2
	PCI-0_08:1.2
	PCI-0_07:1.2
	RO_5_07:1.2
	PCI-0_06:1.2
	PCI-0_05:1.2
	PCI-0_04:1.1.1.1
	PCI-0_03:1.1.1.1
	PCI-0_02:1.1.1.1
	PCI-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.11.27.23.38.12;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	TEeRjLBhRjyVESZx;

1.3
date	2012.03.27.22.43.00;	author jlee;	state Exp;
branches;
next	1.2;
commitid	2yNeSDmcdrG7HzYv;

1.2
date	2003.04.15.20.28.41;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix for nonsense error and implement a 'todo' action
An (unlikely) error during ScanBus would end up with an error block pointing to &00000004 as although the V bit was carefully preserved, R0 wasn't.
Add a RAM flag to remember if the module is operating in no-PCI-bus mode (for PCI_RAMAlloc and PCI_RAMFree) so that the bus access SWIs can return a meaningful error.

Resources/UK/Messages, Errors.s:
 New error message "NoPCIBus".
GetAll.s:
 Remove unnecessary header includes, and use {FALSE} and {TRUE}.
Module.s:
 Record result of OS_ReadSysInfo call to determine if there's a PCI bus or not.
 Do fail to initialise in the RAM loading case if ResourceFS register fails.
Scan.s:
 Preserve R0 if ScanBus returns an error.
 Add some comments.
Interface.s:
 Inspect flag and report error for those SWIs that are harmful when no bus exists, anything going via ValidateHandle doesn't need to since pci_handles will be 0 in that case.
 Relocate FindFreeHandle to Scan.s.

Tested briefly with and without the "got PCI" bit set, showing the appropriate error being returned.

Version 0.12. Tagged as 'PCI-0_12'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

ScanConfigRead
        Push    "r0,r3,r10-r12,lr"
        ORR     r0, r0, r5, LSL #16
        ORR     r0, r0, r6, LSL #8
        MOV     r3, #0
        BL      ConfigurationRead
        Pull    "r0,r3,r10-r12,pc"

ScanConfigWrite
        Push    "r0,r3,r10-r12,lr"
        ORR     r0, r0, r5, LSL #16
        ORR     r0, r0, r6, LSL #8
        MOV     r3, #0
        BL      ConfigurationWrite
        Pull    "r0,r3,r10-r12,pc"

; Our abort handler - if it's an external abort, then ignore it
; (HAL is expected to ensure that reads return all 1s if such an abort
; handler is installed).
; Otherwise pass it to the other handlers.
AbortHandlerStart
        Push    "r0,r1"
        MRS     r0, CPSR
        ReadCop r1, CR_FaultStatus
        AND     r1, r1, #2_1101
        TEQ     r1, #2_0100
        Pull    "r0,r1",EQ
        SUBEQS  pc, lr, #4
        MSR     CPSR_cxsf, r0
        Pull    "r0,r1"
        LDR     pc, OldHandler
OldHandler
        DCD     0
AbortHandlerEnd

        ASSERT  AbortHandlerEnd-AbortHandlerStart = ?ram_abort_handler

ScanPCI
        Entry   "r0-r4"

        ; Put in an abort handler in case aborted PCI configuration
        ; transactions actually cause a Data Abort (as on the 80321).
        ADR     r0, ram_abort_handler
        ADR     r1, AbortHandlerStart
        ADD     r2, r0, #AbortHandlerEnd - AbortHandlerStart
05      LDR     r14, [r1], #4
        STR     r14, [r0], #4
        TEQ     r0, r2
        BNE     %BT05

        MOV     r0, #1
        ADR     r1, ram_abort_handler
        SUB     r2, r2, #4
        SWI     XOS_SynchroniseCodeAreas

        PHPSEI  r2, r0
        MOV     r0, #4
        ORR     r0, r0, #&100           ; Claim data abort vector
        ADR     r1, ram_abort_handler
        SWI     XOS_ClaimProcessorVector
        STR     r1, ram_abort_handler + (OldHandler - AbortHandlerStart)
        PLP     r2
        BVS     %FT99

        MOV     r0, #0                  ; Work down from bus 0
        BL      ScanBus

        SavePSR r3                      ; Remember error
        MOVVS   r4, r0

        MOV     r0, #4                  ; Release data abort vector
        LDR     r1, ram_abort_handler + (OldHandler - AbortHandlerStart)
        ADR     r2, ram_abort_handler
        SWI     XOS_ClaimProcessorVector

        RestPSR r3,,f
        MOVVS   r0, r4
99
        STRVS   r0, [sp]
        EXIT

; In    R0 = bus number
ScanBus
        Entry   "r0-r8"

        MOV     r3, #0                          ; R3 = PCI handle
        MOV     r5, r0                          ; R5 = bus
        MOV     r6, #0                          ; R6 = dev/fn
        MOV     r7, #0                          ; multifunction flag

scan_loop
        BL      ProbeFunction
        TEQ     r0, #0
        BEQ     %FT80

        ORR     r7, r7, r1
        BL      FindFreeHandle
        BVS     %FT90                   ; slight leak if error
        LDR     r2, pci_handle_table
        LDR     lr, pci_handles
        STR     r0, [r2, r3, LSL #2]
        CMP     r3, lr
        STRHI   r3, pci_handles

        LDRB    r0, [r0, #PCIDesc_HeaderType]
        TEQ     r0, #1                  ; PCI-PCI bridge
        BNE     %FT80

        MOV     r0, #PCIConf1_SecondaryBus
        MOV     r2, #1
        BL      ScanConfigRead
        MOV     r0, r1
        BL      ScanBus

80
        TST     r7, #&80
        ADDNE   r6, r6, #1              ; Go to next fn within this device
        ADDEQ   r6, r6, #8              ; Single fn, go to next device
        TST     r6, #7
        MOVEQ   r7, #0
        CMP     r6, #&FF                ; Done all devices/fns on this bus?
        BLS     scan_loop

90
        STRVS   r0, [sp]
        EXIT

; In: R5 = Bus
;     R6 = Device/function
; Out: R0 -> PCIDesc block if function present else 0
;      R1 = header type (all 8 bits) if function present, else undefined

ProbeFunction   ROUT
        Push    "r2-r4,r7,r11,lr"

 [ DebugScan
        DREG    R5,"Probing bus ",cc,Byte
        DREG    R6," device ",,Byte
 ]
        MOV     r11, #0
        MOV     r0, #PCIConf_VendorID
        MOV     r2, #4
        BL      ScanConfigRead
        CMP     r1, #&FFFFFFFF
        BEQ     %FT80

 [ DebugScan
        DREG    R1, "Found "
 ]
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #PCIDesc_size
        SWI     XOS_Module
        BVS     %FT99
        MOV     r11, r2
        MOV     r0, #0
10      STR     r0, [r2], #4
        SUBS    r3, r3, #4
        BNE     %BT10
        STR     r1, [r11, #PCIDesc_VendorID]
        STRB    r5, [r11, #PCIDesc_Bus]
        STRB    r6, [r11, #PCIDesc_DevFn]
        MOV     r0, #255
        STRB    r0, [r11, #PCIDesc_Slot]

        MOV     r0, #PCIConf_RevisionID
        MOV     r2, #4
        BL      ScanConfigRead
        STRB    r1, [r11, #PCIDesc_RevisionID]
        MOV     r1, r1, LSR #8
        STR     r1, [r11, #PCIDesc_ClassCode]

        MOV     r0, #PCIConf_HeaderType
        MOV     r2, #1
        BL      ScanConfigRead
        MOV     r7, r1
        AND     r4, r1, #&7F            ; Knock out multi function bit
        STRB    r4, [r11, #PCIDesc_HeaderType]

        TEQ     r4, #0                  ; Standard layout
        TEQNE   r4, #1                  ; Bridge layout
        BNE     %FT80                   ; Cardbus or other layout

        ASSERT  PCIConf0_InterruptLine = PCIConf1_InterruptLine
        MOV     r0, #PCIConf0_InterruptLine
        BL      ScanConfigRead
        STRB    r1, [r11, #PCIDesc_IntLine]

        TEQ     r4, #0                  ; Only type 0 has subsystem
        MOVNE   r1, #0
        MOVEQ   r0, #PCIConf0_SubsystemVendorID
        MOVEQ   r2, #4
        BLEQ    ScanConfigRead
        STR     r1, [r11, #PCIDesc_SubsystemVendorID]

        MOV     r0, #PCIConf_Status
        MOV     r2, #2
        BL      ScanConfigRead
        ANDS    r3, r1, #PCISta_Capabilities
        BEQ     %FT30

        ASSERT  PCIConf0_Capabilities = PCIConf1_Capabilities
        MOV     r0, #PCIConf0_Capabilities
        MOV     r2, #1
        BL      ScanConfigRead
20      BICS    r3, r1, #3
        BEQ     %FT30

        ADD     r0, r3, #PCICap_ID
        MOV     r2, #2
        BL      ScanConfigRead
        AND     lr, r1, #&FF
        TEQ     lr, #Cap_MSI
        ASSERT  PCICap_NextPtr = PCICap_ID+1
        MOVNE   r1, r1, LSR #8
        BNE     %BT20

30      STRB    r3, [r11, #PCIDesc_MSICap]

        ASSERT  PCIConf0_BaseAddresses = PCIConf1_BaseAddresses
        MOV     r0, #PCIConf0_BaseAddresses
        TEQ     r4, #0
        MOVEQ   r3, #?PCIConf0_BaseAddresses / 4
        MOVNE   r3, #?PCIConf1_BaseAddresses / 4
        ADD     r8, r11, #PCIDesc_Addresses
        BL      ScanAddresses

        TEQ     r4, #0
        MOVEQ   r0, #PCIConf0_ROMAddress
        MOVNE   r0, #PCIConf1_ROMAddress
        MOV     r2, #4
        BL      ScanConfigRead

        MOV     r4, r1
        MOV     r1, #&FF
        ORR     r1, r1, #&700
        BICS    r4, r4, r1
        ADD     r8, r11, #PCIDesc_ROMAddress
        STR     r4, [r8, #PCIAddress_Base]
        BEQ     %FT40
        MOV     lr, #0
        STRB    lr, [r8, #PCIAddress_Flags]
        BL      SizeAddress
40

80
        MOV     r0, r11
        MOV     r1, r7
99
        Pull    "r2-r4,r7,r11,pc"

; In: r0 = first BAR
;     r3 = number of BARs to scan
;     r5 = bus
;     r6 = dev/fn
;     r8 -> address table to fill in
ScanAddresses   ROUT
        Push    "r0-r7,lr"
        MOV     r7, r0
10      MOV     r0, r7
        MOV     r2, #4
        BL      ScanConfigRead
        MOV     r4, r1
        TST     r4, #Address_IO
        MOVNE   r1, #2_11
        MOVEQ   r1, #2_1111
        AND     r14, r4, r1
        STRB    r14, [r8, #PCIAddress_Flags]
        BIC     r4, r4, r1
        ; Ignore reserved memory encoding
        AND     r14, r14, #2_0111
        TEQ     r14, #2_0110
        BEQ     %FT80

        STR     r4, [r8, #PCIAddress_Base]
        TEQ     r4, #0
        BEQ     %FT80

        ; Non-zero base register. Let's size it.
        MOV     r0, r7
        BL      SizeAddress
80
        LDRB    r14, [r8, #PCIAddress_Flags]
        ADD     r8, r8, #PCIAddress_size
        ADD     r7, r7, #4
        AND     r14, r14, #2_0111
        TEQ     r14, #2_0100
        ADDEQ   r8, r8, #PCIAddress_size
        ADDEQ   r7, r7, #4
        SUBEQ   r3, r3, #1
        SUBS    r3, r3, #1
        BGT     %BT10
        Pull    "r0-r7,pc"

; In:  nowt
; Out: R3 = next free handle
FindFreeHandle  ROUT
        Push    "r0-r2,lr"
        ; If no table yet, jump straight to claiming a block
        LDR     r2, pci_handle_table
        LDR     r1, pci_handle_table_size
        TEQ     r2, #0
        BEQ     %FT20

        ; Search table for a free entry (=-1)
        MOV     r3, #1
10      LDR     r14, [r2, r3, LSL #2]
        CMP     r14, #-1
        Pull    "r0-r2,pc",EQ
        ADD     r3, r3, #1
        CMP     r3, r1
        BLO     %BT10

        ; Table full - extend it please
        MOV     r0, #ModHandReason_ExtendBlock
        MOV     r3, #64*4
        SWI     XOS_Module
        BVC     %FT40           ; jump to common code below
99      ADD     sp, sp, #4
        Pull    "r1-r2,pc"

        ; Claim initial table
20      MOV     r0, #ModHandReason_Claim
        MOV     r3, #64*4
        SWI     XOS_Module
        BVS     %99

        ; 64 shiny new slots - update all our pointers
40      STR     r2, pci_handle_table
        MOVS    r3, r1
        ADDEQ   r3, r3, #1
        ADD     r1, r1, #64
        STR     r1, pci_handle_table_size

        ; fill in all the new slots with -1
        MOV     r14, #-1
        MOV     r0, r3
        STREQ   r14, [r2, #0]
50      STR     r14, [r2, r0, LSL #2]
        ADDS    r0, r0, #1
        CMP     r0, r1
        BNE     %BT50

        Pull    "r0-r2,pc"

; In: r0 = BAR address
;     r1 = mask of insignificant bits at bottom
;     r5 = bus
;     r6 = dev/fn
;     r8 -> address structure (address filled in)
; Out: r8->Size field updated
SizeAddress
        Push    "r0-r4,r10,lr"
        PHPSEI  r10, lr
        MOV     r0, #PCIConf_Command            ; Clear Mem+IO bits
        MOV     r2, #2
        BL      ScanConfigRead
        MOV     r4, r1                          ; R4 = old command reg
        BIC     r1, r1, #PCICmd_Memory+PCICmd_IO
        BL      ScanConfigWrite

        LDR     r0, [sp]                        ; Write all 1s
        LDMIA   sp, {r0, r1}
        MOV     lr, #-1
        BIC     r1, lr, r1
        MOV     r2, #4
        BL      ScanConfigWrite
        BL      ScanConfigRead                  ; Read it back
        MOV     r3, r1                          ; R3 = address mask
        LDR     r1, [r8, #PCIAddress_Base]
        BL      ScanConfigWrite                 ; Put back original
        MOV     r0, #PCIConf_Command
        MOV     r1, r4
        MOV     r2, #2
        BL      ScanConfigWrite                 ; Reenable Mem+IO
        PLP     r10

        LDR     r14, [sp, #4]
        BIC     r3, r3, r14
        MOV     r0, #1
50      MOVS    r3, r3, LSR #1
        MOVCC   r0, r0, LSL #1
        BCC     %BT50
        STR     r0, [r8, #PCIAddress_Size]
        Pull    "r0-r4,r10,pc"

; get the slot table from the HAL, and fill in info in our devices
NoteSlots ROUT
        Push    "r0-r12,lr"
        MOV     r10, sp
        MOV     r0, #0
        MOV     r1, #0          ; Query table size
        MOV     r8, #OSHW_CallHAL
        MOV     r9, #EntryNo_HAL_PCISlotTable
        SWI     XOS_Hardware
        BVS     %FT90
        ADD     r0, r0, #3
        BIC     r0, r0, #3
        SUB     sp, sp, r0
        MOV     r1, r0          ; Get the table
        MOV     r0, sp
        SWI     XOS_Hardware
        BVS     %FT90
        MOV     r0, sp
        LDR     r12, [r10, #12*4] ; get back workspace pointer
        LDR     r3, [r0], #4    ; r3 = number of slot entries
        TEQ     r3, #0
        BEQ     %FT90

        LDR     r4, pci_handles
        LDR     r5, pci_handle_table
        CMP     r4, #0
        BEQ     %FT90
10      LDR     r6, [r5, r4, LSL #2]
        CMP     r6, #-1
        BEQ     %FT60
        LDRB    r7, [r6, #PCIDesc_Bus]
        LDRB    r8, [r6, #PCIDesc_DevFn]
        MOV     r8, r8, LSR #3
        MOV     lr, #0
20      ADD     r9, r0, lr, LSL #3
        LDRB    r1, [r9, #0]    ; Bus
        LDRB    r2, [r9, #1]    ; Dev/Fn
        TEQ     r7, r1
        TEQEQ   r8, r2, LSR #3
        BNE     %FT50
        LDRB    lr, [r9, #7]    ; Slot
        LDRB    r9, [r9, #6]    ; Flags
        STRB    lr, [r6, #PCIDesc_Slot]
        STRB    r9, [r6, #PCIDesc_SlotFlags]
        B       %FT60
50      ADD     lr, lr, #1
        CMP     lr, r3
        BNE     %BT20

60      SUBS    r4, r4, #1
        BNE     %BT10

90      MOV     sp, r10
        STRVS   r0, [sp]
        Pull    "r0-r12,pc"

        END

@


1.3
log
@Fix asasm 2.00 errors
Detail:
  s/Scan - asasm's expression parser is a bit stricter than objasm when it comes to dealing with addresses and offsets.
  Add explicit brackets to ensure subtraction is performed first, generating an offset which can be added to ram_abort_handler
Admin:
  Identical binary under objasm


Version 0.11. Retagged as 'PCI-0_11'
@
text
@a52 2
; In    R5 = bus number

d54 1
a54 1
        Entry   "r0-r3"
d73 1
a73 1
        ORR     r0, r0, #&100
d80 1
a80 1
        MOV     r0, #0
d83 2
a84 1
        MRS     r3, CPSR                        ; Remember error
d86 1
a86 1
        MOV     r0, #4
d91 2
a92 1
        MSR     CPSR_f, r3
d97 1
d121 1
a121 1
        TEQ     r0, #1
d132 2
a133 2
        ADDNE   r6, r6, #1
        ADDEQ   r6, r6, #8
d136 1
a136 1
        CMP     r6, #&FF
d158 1
a158 1
	BL	ScanConfigRead
d191 1
a191 1
        AND     r4, r1, #&7F
d194 3
a196 3
        TEQ     r4, #0
        TEQNE   r4, #1
        BNE     %FT80
d203 1
a203 1
        TEQ     r4, #0          ; Only type 0 has subsystem
d309 51
d406 2
a407 2
        MOV     r1, #0
        MOV     r8, #0
d414 1
a414 1
        MOV     r1, r0
@


1.2
log
@More verbose reporting for *PCIINFO,esp.for bridges.
MSI interrupts now reported (see HAL change).

Version 0.05. Tagged as 'PCI-0_05'
@
text
@d78 1
a78 1
        STR     r1, ram_abort_handler + OldHandler - AbortHandlerStart
d88 1
a88 1
        LDR     r1, ram_abort_handler + OldHandler - AbortHandlerStart
@


1.1
log
@Initial revision
@
text
@d208 25
a232 1
30
@


1.1.1.1
log
@Initial import
@
text
@@
