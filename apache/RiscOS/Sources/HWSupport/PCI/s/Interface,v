head	1.11;
access;
symbols
	PCI-0_15:1.11
	PCI-0_14:1.10
	PCI-0_13:1.9
	PCI-0_12:1.8
	PCI-0_11:1.7
	PCI-0_10:1.7
	PCI-0_09:1.7
	PCI-0_08:1.6
	PCI-0_07:1.5
	RO_5_07:1.4
	PCI-0_06:1.4
	PCI-0_05:1.4
	PCI-0_04:1.4
	PCI-0_03:1.3
	PCI-0_02:1.2
	PCI-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2017.09.10.11.24.59;	author jlee;	state Exp;
branches;
next	1.10;
commitid	EMPEA8txKRNBSD6A;

1.10
date	2015.08.05.21.57.23;	author jlee;	state Exp;
branches;
next	1.9;
commitid	EKA1cMdRdLE828wy;

1.9
date	2015.01.27.08.26.21;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	uYKL8ggdxmFwED7y;

1.8
date	2014.11.27.23.38.11;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	TEeRjLBhRjyVESZx;

1.7
date	2009.06.16.00.15.08;	author bavison;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.09.19.15.20;	author jlee;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.04.22.03.11;	author jballance;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.22.11.28.03;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.22.21.53.57;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.14.20.29.27;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.11.13.21.30.44;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Fix PCI_RAMAlloc to be physically aligned
Detail:
  Although PCI_RAMAlloc claims to allocate blocks at the given alignment, both of the two implementations available (OS_Heap 7 and non-OS_Heap 7) perform the alignment and boundary checks using the logical address of the block. Most of the time this seems to work (few clients need anything greater than 4K page alignment), but for those clients that do need greater alignment, this can easily lead to failure.
  s/Memory - Change PCI_RAMAlloc implementation so that it ensures the block of memory it uses is aligned in both logical and physical spaces. Really it's only the physical alignment we care about, but for now the easiest/safest fix is to match the alignment and stick with the current logically-aligned allocation routines.
  s/GetAll, s/Interface, s/Memory - Use definitions from Hdr:OSMem where appropriate
Admin:
  Tested on Raspberry Pi 3
  SMP module is now able to correctly get a 16K-aligned block for use as L1PT
  Note that skipping the first few pages of the area recommended by OS_Memory 12 does introduce the risk of non-aligned/non-contiguous areas being returned once the DA becomes close to full. But, for the case where the desired 32MB physically aligned block isn't available and we fall back to smaller block sizes, there's always been the danger that we'll start returning invalid blocks to the client (whether due to the client asking for an alignment we can't satisfy, or the DA exceeding the limits of the aligned area OS_Memory suggested to us)


Version 0.15. Tagged as 'PCI-0_15'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
 SUBT => PCI.Interface

        OPT     OptPage

PoduleCMOS0             *       PoduleCMOS
PoduleCMOS1             *       PoduleCMOS + 4
PoduleCMOS2             *       PoduleCMOS + 8
PoduleCMOS3             *       PoduleCMOS + 12
PoduleCMOS4             *       PoduleExtraCMOS + 16
PoduleCMOS5             *       PoduleExtraCMOS + 12
PoduleCMOS6             *       PoduleExtraCMOS + 8
PoduleCMOS7             *       PoduleExtraCMOS + 4
PoduleCMOS8             *       PoduleExtraCMOS

MaxCMOSSlot             *       8

SWINameTable
ModuleTitle
        =       "PCI", 0
        =       "ReadID", 0
        =       "ReadHeader", 0
        =       "ReturnNumber", 0
        =       "EnumerateFunctions", 0
        =       "IORead", 0
        =       "IOWrite", 0
        =       "MemoryRead", 0
        =       "MemoryWrite", 0
        =       "ConfigurationRead", 0
        =       "ConfigurationWrite", 0
        =       "HardwareAddress", 0
        =       "ReadInfo", 0
        =       "SpecialCycle", 0
        =       "FindByLocation", 0
        =       "FindByID", 0
        =       "FindByClass", 0
        =       "RAMAlloc", 0
        =       "RAMFree", 0
        =       "LogicalAddress",0
        =       0
        ALIGN

SWIEntry
        LDR     wp, [ r12 ]
        CMP     r11, #( EndOfJumpTable - JumpTable ) / 4
        ADDCC   pc, pc, r11, LSL #2
        B       UnknownSWI

JumpTable
        B       ReadID
        B       ReadHeader
        B       ReturnNumber
        B       EnumerateFunctions
        B       IORead
        B       IOWrite
        B       MemoryRead
        B       MemoryWrite
        B       ConfigurationRead
        B       ConfigurationWrite
        B       HardwareAddress
        B       ReadInfo
        B       SpecialCycle
        B       FindByLocation
        B       FindByID
        B       FindByClass
        B       RAMAlloc
        B       RAMFree
        B       LogicalAddress

EndOfJumpTable

UnknownSWI
        Push    "r1, lr"
        ADRL    Error, ErrorBlock_ModuleBadSWI
        ADRL    r1, ModuleTitle
        BL      copy_error_one                  ; will set V
        Pull    "r1, pc"

ValidateHandle
; In:  r3  = the handle to validate
; Out: r11 = pointer to structure for that handle
;
        Push    "lr"
        LDR     lr, pci_handles                 ; get handle count
        TEQ     r3, #0
        BEQ     BadHandle
        CMP     r3, lr
        LDR     lr, pci_handle_table
        BHI     BadHandle                       ; too big
        LDR     r11, [lr, r3, LSL #2]
        CMP     r11, #-1                        ; null handle
        BEQ     BadHandle
        Pull    "pc"

BadHandle
        Pull    "lr"
BadHandleNoPush
        ADRL    r0, ErrorBlock_NoSuchPCI
        B       copy_error_zero
BadWithNoBus
        ADRL    r0, ErrorBlock_NoPCIBus
        B       copy_error_zero
BadAccessSize
        ADRL    r0, ErrorBlock_BadAccessSize
        B       copy_error_zero

ReadID  ROUT
        MOV     r10, lr
        BL      ValidateHandle
        MOVVS   pc, r10
        LDR     r0, [r11, #PCIDesc_VendorID]
        LDR     r1, [r11, #PCIDesc_SubsystemVendorID]
        MOV     pc, r10

ReadHeader ROUT
        MOV     r10, lr
        BL      ValidateHandle
        MOVVS   pc, r10
        Push    "r0-r2,r4,r5,r6,r10"
        MOV     r0, #0
        MOV     r4, r1
        MOV     r5, r2
        MOV     r2, #4
        MOV     r6, wp
10      BL      ConfigurationRead               ; corrupts wp
        MOV     wp, r6
        BVS     %FT90
        STR     r1, [r4], #4
        ADD     r0, r0, #4
        SUBS    r5, r5, #4
        BHI     %BT10
        Pull    "r0-r2,r4,r5,r6,pc"
90      ADD     sp, sp, #4
        Pull    "r1,r2,r4,r5,r6,pc"

ReturnNumber ROUT
        LDR     r0, pci_handles
        MOV     pc, lr

EnumerateFunctions ROUT
        LDR     r10, pci_handles
        CMP     r3, #-1                         ; Handle of -1 leads to bad data or crash; avoid.
        BEQ     BadHandleNoPush
        MOV     r0, wp                          ; might need that to lookup an error later
        LDR     r12, pci_handle_table

10      ADD     r3, r3, #1
        CMP     r3, r10
        MOVHI   wp, r0                          ; restore wp for MessageTrans
        BHI     BadHandleNoPush
        LDR     r11, [r12, r3, LSL #2]
        CMP     r11, #-1
        BEQ     %BT10
        LDR     r0, [r11, #PCIDesc_VendorID]
        LDR     r1, [r11, #PCIDesc_SubsystemVendorID]
        LDR     r2, [r11, #PCIDesc_ClassCode]
        MOV     pc, lr

FindByLocation ROUT
        LDR     r10, pci_handles
        LDR     r12, pci_handle_table

        MOV     r3, #0
10      ADD     r3, r3, #1
        CMP     r3, r10
        BHI     NotFound
        LDR     r11, [r12, r3, LSL #2]
        CMP     r11, #-1
        BEQ     %BT10
        LDRH    r11, [r11, #PCIDesc_DevFn]
        CMP     r0, r11, LSR #8
        ANDEQ   r11, r11, #&FF
        CMPEQ   r1, r11
        BNE     %BT10
        MOV     pc, lr

NotFound
        MOV     r3, #0
        MOV     pc, lr

FindByID ROUT
        Push    "lr"
        LDR     r10, pci_handles
        LDR     r12, pci_handle_table
        CMP     r3, #-1                         ; Handle of -1 leads to bad data or crash; avoid.
        BEQ     %FT90

10      ADD     r3, r3, #1
        CMP     r3, r10
        BHI     %FT90
        LDR     r11, [r12, r3, LSL #2]
        CMP     r11, #-1
        BEQ     %BT10
        CMP     r0, #-1
        LDRNEH  r14, [r11, #PCIDesc_VendorID]
        CMPNE   r0, r14
        BNE     %BT10
        CMP     r1, #-1
        LDRNEH  r14, [r11, #PCIDesc_DeviceID]
        CMPNE   r1, r14
        BNE     %BT10
        CMP     r2, #-1
        LDRNEH  r14, [r11, #PCIDesc_SubsystemVendorID]
        CMPNE   r2, r14
        BNE     %BT10
        CMP     r4, #-1
        LDRNEH  r14, [r11, #PCIDesc_SubsystemID]
        CMPNE   r4, r14
        BNE     %BT10
        Pull    "pc"
90      MOV     r3, #0
        Pull    "pc"

FindByClass ROUT
        LDR     r10, pci_handles
        LDR     r12, pci_handle_table
        CMP     r3, #-1                         ; Handle of -1 leads to bad data or crash; avoid.
        BEQ     NotFound

10      ADD     r3, r3, #1
        CMP     r3, r10
        BHI     NotFound
        LDR     r11, [r12, r3, LSL #2]
        CMP     r11, #-1
        BEQ     %BT10
        LDR     r11, [r11, #PCIDesc_ClassCode]
        AND     r11, r11, r1
        CMP     r0, r11
        BNE     %BT10
        MOV     pc, lr

IORead  ROUT
        LDRB    r10, pcibus_supported
        TEQ     r10, #0
        BEQ     BadWithNoBus
        LDR     r11, pci_io_to_phys_offset
        TEQ     r2, #1
        TEQNE   r2, #2
        TEQNE   r2, #4
        BNE     BadAccessSize
        Push    "r0,r2,r3,lr"
        ADD     r1, r0, r11
        MOV     r0, #OSMemReason_AccessPhysAddr
        SWI     XOS_Memory              ; r2 -> logical addr, r3 = old state
        LDR     r11, [sp, #4]
        BVS     %FT99
        CMP     r11, #2
        LDRLOB  r1, [r2]
        LDREQH  r1, [r2]
        LDRHI   r1, [r2]
        MOV     r0, #OSMemReason_ReleasePhysAddr
        MOV     r2, r1
        MOV     r1, r3
        SWI     XOS_Memory
        MOV     r1, r2
        BVS     %FT99
        Pull    "r0,r2,r3,pc"
99
        ADD     sp,sp,#4
        Pull    "r2,r3,pc"

IOWrite ROUT
        LDRB    r10, pcibus_supported
        TEQ     r10, #0
        BEQ     BadWithNoBus
        LDR     r11, pci_io_to_phys_offset
        TEQ     r2, #1
        TEQNE   r2, #2
        TEQNE   r2, #4
        BNE     BadAccessSize
        Push    "r0-r3,lr"
        ADD     r1, r0, r11
        MOV     r0, #OSMemReason_AccessPhysAddr
        SWI     XOS_Memory              ; r2 -> logical addr, r3 = old state
        LDMIB   sp, {r1, r11}
        BVS     %FT99
        CMP     r11, #2
        STRLOB  r1, [r2]
        STREQH  r1, [r2]
        STRHI   r1, [r2]
        MOV     r0, #OSMemReason_ReleasePhysAddr
        MOV     r1, r3
        SWI     XOS_Memory
        BVS     %FT99
        Pull    "r0-r3,pc"
99
        ADD     sp,sp,#4
        Pull    "r1-r3,pc"

MemoryRead  ROUT
        LDRB    r10, pcibus_supported
        TEQ     r10, #0
        BEQ     BadWithNoBus
        LDR     r11, pci_mem_to_phys_offset
        Push    "r0-r3,lr"
        BIC     r1, r0, #3              ; force it to be word aligned
        ADD     r1, r11, r1
        MOV     r0, #OSMemReason_AccessPhysAddr
        SWI     XOS_Memory              ; r2 -> logical addr, r3 = old state
        LDR     r11, [sp, #8]           ; points to destination buffer
        LDR     r12, [sp, #4]           ; the length to do
        BVS     %FT99
        ADD     r12, r11, r12           ; end stop
80
        LDR     r14, [r2]
        STR     r14, [r11], #4
        TEQ     r11, r12
        BNE     %BT80

        MOV     r0, #OSMemReason_ReleasePhysAddr
        MOV     r1, r3
        SWI     XOS_Memory              ; release
        BVS     %FT99
        Pull    "r0-r3,pc"

MemoryWrite
        LDRB    r10, pcibus_supported
        TEQ     r10, #0
        BEQ     BadWithNoBus
        LDR     r11, pci_mem_to_phys_offset
        Push    "r0-r3,lr"
        BIC     r1, r0, #3              ; force it to be word aligned
        ADD     r1, r11, r1
        MOV     r0, #OSMemReason_AccessPhysAddr
        SWI     XOS_Memory              ; r2 -> logical addr, r3 = old state
        LDR     r11, [sp, #8]           ; points to source buffer
        LDR     r12, [sp, #4]           ; the length to do
        BVS     %FT99
        ADD     r12, r11, r12           ; end stop
90
        LDR     r14, [r11], #4
        STR     r14, [r2]
        TEQ     r11, r12
        BNE     %BT90

        MOV     r0, #OSMemReason_ReleasePhysAddr
        MOV     r1, r3
        SWI     XOS_Memory              ; release
        BVS     %FT99
        Pull    "r0-r3,pc"
99
        ADD     sp,sp,#4
        Pull    "r1-r3,pc"

ConfigurationRead ROUT
        LDRB    r10, pcibus_supported
        TEQ     r10, #0
        BEQ     BadWithNoBus
        Push    "r0,r2,r3,r9,lr"
        CMP     r3, #0
        MOVEQ   r1, r0, LSR #8
        BEQ     %FT10
        BL      ValidateHandle
        ADDVS   sp, sp, #4
        Pull    "r2,r3,r9,pc",VS
        LDRH    r1, [r11, #PCIDesc_DevFn]
10      MOV     r10, #0
        TEQ     r2, #1
        ADREQ   r10, HAL_PCIReadConfigByte_routine
        TEQ     r2, #2
        ADREQ   r10, HAL_PCIReadConfigHalfword_routine
        TEQ     r2, #4
        ADREQ   r10, HAL_PCIReadConfigWord_routine
        TEQ     r10, #0                         ; see if it was 1, 2 or 4
        Pull    "r0,r2,r3,r9,lr",EQ
        BEQ     BadAccessSize
        AND     r2, r0, #&FF
        MOV     r0, r1, LSR #8
        AND     r1, r1, #&FF
        MOV     lr, pc
        LDMIA   r10, {r9, pc}                   ; corrupts R0-R3,R12
        ADDS    r1, r0, #0                      ; clear V
        Pull    "r0,r2,r3,r9,pc"

ConfigurationWrite
        LDRB    r10, pcibus_supported
        TEQ     r10, #0
        BEQ     BadWithNoBus
        Push    "r0-r3,r9,lr"
        CMP     r3, #0
        MOVEQ   r14, r0, LSR #8
        BEQ     %FT10
        BL      ValidateHandle
        ADDVS   sp, sp, #4
        Pull    "r1-r3,r9,pc",VS
        LDRH    r14, [r11, #PCIDesc_DevFn]
10      MOV     r10, #0
        TEQ     r2, #1
        ADREQ   r10, HAL_PCIWriteConfigByte_routine
        TEQ     r2, #2
        ADREQ   r10, HAL_PCIWriteConfigHalfword_routine
        TEQ     r2, #4
        ADREQ   r10, HAL_PCIWriteConfigWord_routine
        TEQ     r10, #0
        Pull    "r0-r3,r9,lr",EQ
        BEQ     BadAccessSize
        MOV     r3, r1
        AND     r2, r0, #&FF
        MOV     r0, r14, LSR #8
        AND     r1, r14, #&FF
        MOV     lr, pc
        LDMIA   r10, {r9, pc}                   ; corrupts R0-R3,R12
        CLRV
        Pull    "r0-r3,r9,pc"

SpecialCycle ROUT
        LDRB    r10, pcibus_supported
        TEQ     r10, #0
        BEQ     BadWithNoBus
        TEQ     r0, #0
        BEQ     UnknownSWI              ; TODO: call HAL_PCISpecialCycle for bus 0
        Push    "r0,r2,r3,lr"
        MOV     r0, r0, LSL #16
        ORR     r0, r0, #&FF00
        MOV     r2, #4
        MOV     r3, #0
        BL      ConfigurationWrite
        STRVS   r0, [sp]
        Pull    "r0,r2,r3,pc"

; ****************************************************************************
;
;       HardwareAddress - find (and map in) an address block
;
HardwareAddress
        Push    "r1-r3,lr"
        MOV     r10, r0
        BL      ValidateHandle
        Pull    "r1-r3,pc",VS
        TEQ     r1, #&100
        CMPNE   r1, #5                  ; BAR0-5
        BHI     BadAddr
        TEQ     r1, #&100
        MOVEQ   r1, #6                  ; ROM is BAR6
        ADD     r11, r11, #PCIDesc_Addresses
        ASSERT  PCIAddress_size = 12
        ADD     r1, r1, r1, LSL #1
        ADD     r11, r11, r1, LSL #2
        ASSERT  :INDEX:PCIAddress_Base = 0
        ASSERT  :INDEX:PCIAddress_Size = 4
        LDMIA   r11, {r1, r2}
        CMP     r1, #0
        BEQ     BadAddr
        TST     r10, #1:SHL:31          ; Query only
        BNE     %FT40
        LDRB    r0, [r11, #PCIAddress_Flags]
        Push    "r1"
        TST     r0, #Address_IO
        LDRNE   lr, pci_io_to_phys_offset
        LDREQ   lr, pci_mem_to_phys_offset
        ADD     r1, r1, lr
        MOV     r0, #OSMemReason_MapIOPermanent
        AND     lr, r10, #&1F0          ; B+C+policy bits
        ORR     r0, r0, lr, LSL #4
        TST     r10, #1:SHL:9           ; Access privileges given 
        ORRNE   r0, r0, #1:SHL:17
        ANDNE   lr, r10, #2_1111
        ORRNE   r0, r0, lr, LSL #24
        SWI     XOS_Memory
        Pull    "r1"
        MOVVC   r4, r3
40      LDRVCB  r0, [r11, #PCIAddress_Flags]
90      ADD     sp, sp, #8
        Pull    "r3,pc"

BadAddr
        ADRL    r0, ErrorBlock_NoSuchAddr
        Pull    "r1-r3,lr"
        B       copy_error_zero


; ****************************************************************************
;
;       LogicalAddress - map in some PCI memory
;
LogicalAddress
        LDRB    r10, pcibus_supported
        TEQ     r10, #0
        BEQ     BadWithNoBus
        Push    "r0,r1,r3,lr"
        TST     r0, #1:SHL:30
        LDRNE   lr, pci_io_to_phys_offset
        LDREQ   lr, pci_mem_to_phys_offset
        ADD     r1, r1, lr
        AND     r0, r0, #&1F0           ; B+C+policy bits
        MOV     r0, r0, LSL #4
        ORR     r0, r0, #OSMemReason_MapIOPermanent
        SWI     XOS_Memory
        STRVS   r0, [sp]
        MOVVC   r4, r3
        Pull    "r0,r1,r3,pc"

; ****************************************************************************
;
;       ReadInfo - return various words about PCI devices
;
;       On entry
;         R0  Bitset of required results
;         R1  Pointer to buffer to receive word aligned word results
;         R2  Length in bytes of buffer
;         R3  PCI function number
;
;       On exit
;         R0  Preserved
;         R1  Preserved, a pointer to results in order (lowest bit number
;             at the lowest address)
;         R2  Length of results
;         R3  Preserved
;
;       Bitset in R0, values;
;
;         Bit  0 ==> Device/function number
;         Bit  1 ==> Bus number
;         Bit  2 ==> Function number of parent bridge (0 if none)
;         Bit  3 ==> Slot number
;         Bit  4 ==> Vendor/device ID
;         Bit  5 ==> Revision ID
;         Bit  6 ==> Subsystem vendor/subsystem ID
;         Bit  7 ==> Class code (24 bits)
;         Bit  8 ==> CMOS address
;         Bit  9 ==> CMOS size in bytes
;         Bit 10 ==> Pointer to description (0 for none)
;         Bit 11 ==> Device vector number
;         Bit 12 ==> Ethernet address (low 32 bits)
;         Bit 13 ==> Ethernet address (high 16 bits)
;         Bit 14 ==> Logical number of the primary DMA channel

ReadInfo ROUT
        Push    "r0-r6, lr"
        BL      ValidateHandle
        BVS     ExitReadInfo
        LDMIA   sp, { r0, r1, r10 }                     ; Entry values of R0, R1 & R2
        MOV     r5, #0                                  ; Number of bytes used so far
        MOV     r6, #-1                                 ; Initialise the bit counter
ReadInfoLoop
        BVS     ExitReadInfo
        INC     r6
        TEQ     r6, #(ReadInfoTableEnd-ReadInfoTable)/4
        BEQ     TestRemainingBits
        ;       R0  = Bitset of things to do
        ;       R1  = Pointer to the word to write to
        ;       R3  = Function handle
        ;       R5  = Number of bytes used so far
        ;       R6  = The number we are up to 0, 1, 2, 3, 4 ...
        ;       R10 = Size of the buffer in bytes

        MOV     r14, #1
        ANDS    r14, r0, r14, LSL r6
        BEQ     ReadInfoLoop
        INC     r5, 4
        CMP     r5, r10
        BGT     ReadTooMuchInfo
  [  DebugInterface
        DREG    r1, "Calling with a data pointer of &"
  ]
        CLRV
        JumpAddress lr, ReadInfoTableEnd, Forward
        ADD     pc, pc, r6, LSL #2
        NOP
ReadInfoTable
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_DevFn
        B       ReadInfo_DevFn
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_Bus
        B       ReadInfo_Bus
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_ParentBridge
        B       ReadInfo_ParentBridge
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_Slot
        B       ReadInfo_Slot
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_DeviceID
        B       ReadInfo_DeviceID
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_RevisionID
        B       ReadInfo_RevisionID
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_SubsystemID
        B       ReadInfo_SubsystemID
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_ClassCode
        B       ReadInfo_ClassCode
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_CMOSAddress
        B       ReadInfo_CMOSAddress
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_CMOSSize
        B       ReadInfo_CMOSSize
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_Description
        B       ReadInfo_Description
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_IntDeviceVector
        B       ReadInfo_IntDeviceVector
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_EthernetAddressLow
        B       ReadInfo_EthernetLow
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_EthernetAddressHigh
        B       ReadInfo_EthernetHigh
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_DMA
        B       ReadInfo_DMA
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_Addresses
        B       ReadInfo_Addresses
        ASSERT  (1 :SHL: ((.-ReadInfoTable)/4)) = PCI_ReadInfo_Vendor
        B       ReadInfo_VendorString

ReadInfoTableEnd
  [  DebugInterface
        BVS     %57
        DREG    r2, "Data returned is &"
        B       %58
57
        ADD     r14, r0, #4
        DSTRING r14, "Error from ReadInfo_<thing>: "
58
  ]
        STRVC   r2, [ r1 ], #4
        B       ReadInfoLoop


TestRemainingBits
  [  DebugInterface
        DREG    wp, "WP = &"
  ]
        MOVS    r0, r0, ASR r6
        STREQ   r5, [ sp, #8 ]                          ; Poke the exit value of R2
        BNE     UnexpectedBitsSet
ExitReadInfo
        STRVS   r0, [ sp, #0 ]
        Pull    "r0-r6, pc"

UnexpectedBitsSet
        ADRL    r0, ErrorBlock_BadRead
        B       ErrorExitReadInfo

ReadTooMuchInfo
        ADRL    r0, ErrorBlock_CDATBufferOverflow
ErrorExitReadInfo
  [  DebugInterface
        DREG    r0, "Error is at &"
  ]
        BL      copy_error_zero
        B       ExitReadInfo

        ;       Implementation of the various bits, return the value in R2

ReadInfo_DevFn
        LDRB    r2, [ r11, #PCIDesc_DevFn ]
        MOV     pc, lr

ReadInfo_Bus
        LDRB    r2, [ r11, #PCIDesc_Bus ]
        MOV     pc, lr

ReadInfo_ParentBridge
        B       UnexpectedBitsSet

ReadInfo_Slot
        LDRB    r2, [ r11, #PCIDesc_Slot ]
        MOV     pc, lr

ReadInfo_DeviceID
        LDR     r2, [ r11, #PCIDesc_VendorID ]
        MOV     pc, lr

ReadInfo_RevisionID
        LDRB    r2, [ r11, #PCIDesc_RevisionID ]
        MOV     pc, lr

ReadInfo_SubsystemID
        LDR     r2, [ r11, #PCIDesc_SubsystemVendorID ]
        MOV     pc, lr

ReadInfo_ClassCode
        LDR     r2, [ r11, #PCIDesc_ClassCode ]
        MOV     pc, lr

CMOSTable
        = PoduleCMOS0, PoduleCMOS1, PoduleCMOS2, PoduleCMOS3
        = PoduleCMOS4, PoduleCMOS5, PoduleCMOS6, PoduleCMOS7
        = PoduleCMOS8
        ALIGN

ReadInfo_CMOSAddress
ReadInfo_CMOSSize
        LDRB    r2, [ r11, #PCIDesc_DevFn ]
        TST     r2, #7
        MOVNE   r2, #0                  ; no CMOS if not function 0
        MOVNE   pc, lr
        LDRB    r2, [ r11, #PCIDesc_SlotFlags ]
        TST     r2, #1:SHL:6            ; if "NIC", call it slot 8
        MOVNE   r2, #8
        LDREQB  r2, [ r11, #PCIDesc_Slot ]
        CMP     r2, #0
        MOVEQ   pc, lr
        CMP     r2, #MaxCMOSSlot
        MOVHI   r2, #0
        MOVHI   pc, lr
        Push    "lr"
        ASSERT  PCI_ReadInfo_CMOSAddress = 1:SHL:8
        TEQ     r6, #8
        ADREQ   lr, CMOSTable
        LDREQB  r2, [lr, r2]
        MOVNE   r2, #4
        Pull    "pc"

ReadInfo_IntDeviceVector
        LDRB    r2, [ r11, #PCIDesc_IntLine ]
        MOV     pc, lr

ReadInfo_DMA
        MOV     r2, #-1
        MOV     pc, lr

ReadInfo_Addresses
        LDRB    r2, [ r11, #PCIDesc_HeaderType ]
        TEQ     r2, #0
        MOVEQ   r2, #6
        MOVNE   r2, #2
        MOV     pc, lr

ReadInfo_EthernetLow
        ; Only give Ethernet address to onboard NIC
        LDRB    r2, [ r11, #PCIDesc_SlotFlags ]
        TST     r2, #1:SHL:6
        ADREQL  r0, ErrorBlock_ECNoNet
        BEQ     copy_error_zero

        Push    "r0, r1, lr"
        MOV     r0, #4
        SWI     XOS_ReadSysInfo
        BVS     ExitReadInfo_EthernetHigh
        MOVS    r2, r0
        BNE     ExitReadInfo_EthernetHigh
        TEQ     r1, #0
        ADREQL  r0, ErrorBlock_NDallas
        BLEQ    copy_error_zero
ExitReadInfo_EthernetLow
        STRVS   r0, [ sp, #0 ]
        Pull    "r0, r1, pc"

ReadInfo_EthernetHigh
        ; Only give Ethernet address to onboard NIC
        LDRB    r2, [ r11, #PCIDesc_SlotFlags ]
        TST     r2, #1:SHL:6
        ADREQL  r0, ErrorBlock_ECNoNet
        BEQ     copy_error_zero

        Push    "r0, r1, lr"
        MOV     r0, #4
        SWI     XOS_ReadSysInfo
        BVS     ExitReadInfo_EthernetHigh
        MOVS    r2, r1
        BNE     ExitReadInfo_EthernetHigh
        TEQ     r0, #0
        ADREQL  r0, ErrorBlock_NDallas
        BLEQ    copy_error_zero
ExitReadInfo_EthernetHigh
        STRVS   r0, [ sp, #0 ]
        Pull    "r0, r1, pc"

ReadInfo_VendorString ROUT
        ;       In:  R11 is a pointer to the PCIDescNode
        ;       Out: R2 is a pointer to the Vendor Description if it exists
        ;       All other registers preserved
        Push    "r0-r1,r3-r7,lr"
        LDRH    r0, [r11, #PCIDesc_VendorID]
        MOV     r1, #Service_PCI
        MOV     r2, #1
        SWI     XOS_ServiceCall         ; see if anyone claims the lookup description call
        TEQ     r1, #0
        Pull    "r0-r1,r3-r7,pc",EQ
        BL      open_message_file
        BVS     %FT99

        MOV     r1, #"V"                ; Try looking for a specific device
        STRB    r1, [sp, #-8]!
        ADD     r1, sp, #1
        MOV     r2, #5
        SWI     XOS_ConvertHex4
        BVS     %FT98
        ADR     r2, vendor_buffer
        MOV     r3, #?vendor_buffer
        BL      SearchInMessages
        MOVVS   r2, #0                  ; Dunno
        CLRV
98      ADD     sp, sp, #8
99      Pull    "r0-r1,r3-r7,pc"

ReadInfo_Description
        ;       In:  R11 is a pointer to the PCIDescNode
        ;       Out: R2 is a pointer to the Description if it exists
        ;       All other registers preserved
        Push    "r0-r1,r3-r7,lr"
        MOV     r1, #Service_PCI
        MOV     r2, #0
        SWI     XOS_ServiceCall         ; see if anyone claims the lookup description call
        TEQ     r1, #0
        Pull    "r0-r1,r3-r7,pc",EQ
        BL      open_message_file
        BVS     %FT99

        MOV     r0, #"D"                ; Try looking for a specific device
        STRB    r0, [sp, #-12]!
        ASSERT  (PCIDesc_DeviceID - PCIDesc_VendorID) = 2
      [ SupportARMv6
        LDR     r0, [r11, #PCIDesc_VendorID]
        MOV     r0, r0, ROR #16
      |
        LDR     r0, [r11, #PCIDesc_VendorID+2]
      ]
        ADD     r1, sp, #1
        MOV     r2, #9
        SWI     XOS_ConvertHex8
        BVS     %FT98
        ADR     r2, name_buffer
        MOV     r3, #?name_buffer
        BL      SearchInMessages
        BVC     %FT98                   ; got it

        MOV     r0, #"C"                ; Try looking for the class
        STRB    r0, [sp, #0]
        LDR     r0, [r11, #PCIDesc_ClassCode]
        ADD     r1, sp, #1
        MOV     r2, #7
        SWI     XOS_ConvertHex6
        BVS     %FT98
        ADR     r2, name_buffer
        BL      SearchInMessages

        MOVVS   r2, #0                  ; Dunno
        CLRV
98      ADD     sp, sp, #12
99      Pull    "r0-r1,r3-r7,pc"

SearchInMessages
        ; In: R1 points to the token
        ;     R2 points to some suitable RAM
        ;     R3 length of RAM available
        Push    "lr"
        ADR     r0, message_file_block
        ADD     r1, sp, #4              ; we just pushed lr
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        Pull    "pc"

        END
@


1.10
log
@Implement missing memory attribute support for PCI_HardwareAddress & PCI_LogicalAddress
Detail:
  s/Interface - Now that OS_Memory 13 allows the cache policy to be specified, PCI_HardwareAddress & PCI_LogicalAddress (which have always been documented as allowing the policy to be specified) can have support for it implemented. PCI_LogicalAddres now also has support for specifying the cacheability implemented (was also documented but unimplemented).
Admin:
  Tested on Iyonix


Version 0.14. Tagged as 'PCI-0_14'
@
text
@d256 1
a256 1
        MOV     r0, #14
d264 1
a264 1
        MOV     r0, #15
d286 1
a286 1
        MOV     r0, #14
d294 1
a294 1
        MOV     r0, #15
d311 1
a311 1
        MOV     r0, #14
d323 1
a323 1
        MOV     r0, #15
d337 1
a337 1
        MOV     r0, #14
d349 1
a349 1
        MOV     r0, #15
d465 1
a465 1
        MOV     r0, #13
d500 1
a500 1
        ORR     r0, r0, #13
@


1.9
log
@Make PCI_MemoryWrite more useful
Previously the behaviour was thus

MemoryRead
  for (i = 0; i < wordcount; i++)
    buffer[i] = *pcimem
MemoryWrite
  for (i = 0; i < wordcount; i++)
    pcimem[i] = *buffer

so in the write case the buffer was largely redundant and the SWI would data abort when copying > 1MB as it fell outside the temporary IO assignment from OS_Memory 14. Now it does

MemoryWrite
  for (i = 0; i < wordcount; i++)
    *pcimem = buffer[i]

the most common case where wordcount = 1 is unchanged, and MemoryRead is unchanged.
Also
 - sprinkle in some more comments
 - make use of mem_to_phys_offset that the HAL is kind enough to have given us, even if it is 0
 - update the capability id bits from PCI-SIG ECN from April 2010

Tested with a parallel port PCI card, which reported it had vendor specific capabilities (InfCap09).

Version 0.13. Tagged as 'PCI-0_13'
@
text
@d466 2
a467 4
        TST     r10, #1:SHL:4           ; Bufferable
        ORRNE   r0, r0, #1:SHL:8
        TST     r10, #1:SHL:5           ; Cacheable
        ORRNE   r0, r0, #1:SHL:9
d498 3
a500 3
        TST     r0, #1:SHL:4
        MOV     r0, #13
        ORRNE   r0, r0, #1:SHL:8
@


1.8
log
@Fix for nonsense error and implement a 'todo' action
An (unlikely) error during ScanBus would end up with an error block pointing to &00000004 as although the V bit was carefully preserved, R0 wasn't.
Add a RAM flag to remember if the module is operating in no-PCI-bus mode (for PCI_RAMAlloc and PCI_RAMFree) so that the bus access SWIs can return a meaningful error.

Resources/UK/Messages, Errors.s:
 New error message "NoPCIBus".
GetAll.s:
 Remove unnecessary header includes, and use {FALSE} and {TRUE}.
Module.s:
 Record result of OS_ReadSysInfo call to determine if there's a PCI bus or not.
 Do fail to initialise in the RAM loading case if ResourceFS register fails.
Scan.s:
 Preserve R0 if ScanBus returns an error.
 Add some comments.
Interface.s:
 Inspect flag and report error for those SWIs that are harmful when no bus exists, anything going via ValidateHandle doesn't need to since pci_handles will be 0 in that case.
 Relocate FindFreeHandle to Scan.s.

Tested briefly with and without the "got PCI" bit set, showing the appropriate error being returned.

Version 0.12. Tagged as 'PCI-0_12'
@
text
@d307 1
d310 1
d333 1
d336 1
d339 1
a339 1
        LDR     r11, [sp, #8]           ; points to destination buffer
d342 1
a342 1
        ADD     r12, r2, r12            ; end stop
d344 3
a346 3
        LDR     r14, [r11]
        STR     r14, [r2], #4
        TEQ     r2, r12
d457 1
a457 1
        TST     r10, #1:SHL:31
d463 2
a464 1
        ADDNE   r1, r1, lr
d466 1
a466 1
        TST     r10, #1:SHL:4
d468 1
a468 1
        TST     r10, #1:SHL:5
d470 1
a470 1
        TST     r10, #1:SHL:9
d498 2
a499 1
        ADDNE   r1, r1, lr
@


1.7
log
@  No longer uses unaligned loads on ARMv6 or later
Detail:
  s.Interface line 794: changed to use LDRH - I really can't imagine anyone
    inventing an ARMv3 device with a PCI bus.
  s.Interface line 834: don't rely on rotating loads if ARMv6 is a build
    target - use aligned LDR and explicit rotate instead.
  Added ENTRY directive to permit building of GPA debug listing.
  CPU version is no longer specified in the makefile - it's better to inherit
  it from the build environment now that we actually set it appropriately.
Admin:
  Builds but not tested.

Version 0.09. Tagged as 'PCI-0_09'
@
text
@d113 3
a115 1

d155 1
a155 1
        CMP     r3, #-1 ; Handle of -1 leads to bad data or crash; avoid.
d198 1
a198 1
        CMP     r3, #-1
d230 1
a230 1
        CMP     r3, #-1
d245 4
a248 1
IORead  ROUT ; todo: exit with error if no PCI bus
d265 1
a265 1
	MOV     r2, r1
d268 1
a268 1
	MOV     r1, r2
d275 4
a278 1
IOWrite ROUT ; todo: exit with error if no PCI bus
d303 4
a306 1
MemoryRead  ROUT ; todo: exit with error if no PCI bus
d327 4
a330 1
MemoryWrite ; todo: exit with error if no PCI bus
d354 4
a357 1
ConfigurationRead ROUT ; todo: exit with error if no PCI bus
d384 4
a387 1
ConfigurationWrite ; todo: exit with error if no PCI bus
d412 1
a412 1
        MSR     CPSR_f, #0
d415 4
a418 1
SpecialCycle ROUT ; todo: exit with error if no PCI bus
d420 1
a420 1
        BEQ     UnknownSWI
a429 51
; In:  nowt
; Out: R3 = next free handle
FindFreeHandle  ROUT
        Push    "r0-r2,lr"
        ; If no table yet, jump straight to claiming a block
        LDR     r2, pci_handle_table
        LDR     r1, pci_handle_table_size
        TEQ     r2, #0
        BEQ     %FT20

        ; Search table for a free entry (=-1)
        MOV     r3, #1
10      LDR     r14, [r2, r3, LSL #2]
        CMP     r14, #-1
        Pull    "r0-r2,pc",EQ
        ADD     r3, r3, #1
        CMP     r3, r1
        BLO     %BT10

        ; Table full - extend it please
        MOV     r0, #ModHandReason_ExtendBlock
        MOV     r3, #64*4
        SWI     XOS_Module
        BVC     %FT40           ; jump to common code below
99      ADD     sp, sp, #4
        Pull    "r1-r2,pc"

        ; Claim initial table
20      MOV     r0, #ModHandReason_Claim
        MOV     r3, #64*4
        SWI     XOS_Module
        BVS     %99

        ; 64 shiny new slots - update all our pointers
40      STR     r2, pci_handle_table
        MOVS    r3, r1
        ADDEQ   r3, r3, #1
        ADD     r1, r1, #64
        STR     r1, pci_handle_table_size

        ; fill in all the new slots with -1
        MOV     r14, #-1
        MOV     r0, r3
        STREQ   r14, [r2, #0]
50      STR     r14, [r2, r0, LSL #2]
        ADDS    r0, r0, #1
        CMP     r0, r1
        BNE     %BT50

        Pull    "r0-r2,pc"

d434 1
a434 1
HardwareAddress ; todo: exit with error if no PCI bus
d440 1
a440 1
        CMPNE   r1, #5
d443 1
a443 1
        MOVEQ   r1, #6
d457 1
a457 1
        TST     r0, #1
d486 4
a489 1
LogicalAddress ; todo: exit with error if no PCI bus
a501 1
;
d635 1
a635 1
        ADRL    r0, ErrorCDATBufferOverflow
d835 2
a836 1
        ; In: R2 points to some suitable RAM
@


1.6
log
@Fix PCI module to not crash on machines without a PCI bus
Detail:
  s/Interface - Avoid unpredictable behaviour if a handle of -1 is given to EnumerateFunctions, FindByClass, etc.
  s/Module - During initialisation use OS_ReadSysInfo 8 to detect PCI bus, since a NullEntry for HAL_PCIAddresses won't return an error.
Admin:
  Tested on rev C2 beagleboard. Untested on Iyonix, but should be fine.


Version 0.08. Tagged as 'PCI-0_08'
@
text
@d791 1
a791 2
        LDR     r0, [r11, #PCIDesc_VendorID+2]
        MOV     r0, r0, LSR#16
d830 4
d835 1
@


1.5
log
@	fixed corruption PCI_IORead swi identified in user group
	r1 return value was being overwritten
Detail:
Admin:


Version 0.07. Tagged as 'PCI-0_07'
@
text
@d153 2
d196 2
d228 2
d243 1
a243 1
IORead  ROUT
d270 1
a270 1
IOWrite ROUT
d295 1
a295 1
MemoryRead  ROUT
d316 1
a316 1
MemoryWrite
d340 1
a340 1
ConfigurationRead ROUT
d367 1
a367 1
ConfigurationWrite
d395 1
a395 1
SpecialCycle ROUT
d462 1
a462 1
HardwareAddress
d514 1
a514 1
LogicalAddress
@


1.4
log
@*PCIdevices now more informative about bridges and capabilities.

Version 0.04. Tagged as 'PCI-0_04'
@
text
@d254 1
d257 1
@


1.3
log
@Now reports the address ranges associated with bridges.
Fix to the Service_PCI calls made - both were going out with the
same reason code due to some copy and paste magic.

Version 0.03. Tagged as 'PCI-0_03'
@
text
@d348 1
a348 1
        TEQ     r10, #0                         ; see if it was , 2 or 4
@


1.2
log
@Removed unused HelpTokens
Removed unused oInterface
Implemented PCI_MemoryRead,PCI_MemoryWrite,PCI_EnumerateFunctions.
Resync'd docs with implementation,tidied them up,and expanded some of
the descriptions.
Swapped a couple of BHS for BHI so that PCI_FindByXXX can find the last
thing in the list now.
Added new service calls to lookup name and vendor strings.
Added vendor string reason to ReadInfo.
Now *PCIDEVICES and *PCIINFO report the vendor string and description if
available,else default to the class code.

Version 0.02. Tagged as 'PCI-0_02'
@
text
@d308 1
a308 1
MemoryWrite  
d483 6
d786 1
a786 1
        MOV     r2, #0            
d807 1
a807 1
ReadInfo_Description 
d813 1
a813 1
        MOV     r2, #0            
@


1.1
log
@Initial revision
@
text
@d29 1
a29 6
CMOSTable
        = PoduleCMOS0, PoduleCMOS1, PoduleCMOS2, PoduleCMOS3
        = PoduleCMOS4, PoduleCMOS5, PoduleCMOS6, PoduleCMOS7
        = PoduleCMOS8

MaxCMOSSlot * 8
d66 1
a66 1
        B       UnknownSWI
d69 2
a70 2
        B       UnknownSWI
        B       UnknownSWI
d93 3
d97 1
a97 1
        LDR     lr, pci_handles
d102 1
a102 1
        BHI     BadHandle
d104 1
a104 1
        CMP     r11, #-1
d110 1
d136 1
a136 1
10      BL      ConfigurationRead       ; corrupts wp
d151 17
d175 1
a175 1
        BHS     NotFound
d197 1
a197 1
        BHS     %FT90
d227 1
a227 1
        BHS     NotFound
d287 45
d348 1
a348 1
        TEQ     r10, #0
d399 1
a399 1
; In: nowt
d563 1
a563 1
        ;       R3  = Pointer to the podule_node
d614 2
d688 6
d772 30
a801 1
ReadInfo_Description
d806 5
d813 16
a828 2
        MOV     r0, #"C"
        STRB    r0, [sp, #-8]!
d833 13
a845 1
        BVS     %FT99
d847 2
a848 4
        MOV     r1, sp
        ADR     r2, name_buffer
        MOV     r3, #?name_buffer
        ADD     r4, r0, #1
d853 1
a853 8
        ADRVS   r2, Nodescyet
        CLRV
99      ADD     sp, sp, #8
        Pull    "r0-r1,r3-r7,pc"

Nodescyet
        =       "No description yet", 0
        ALIGN
@


1.1.1.1
log
@Initial import
@
text
@@
