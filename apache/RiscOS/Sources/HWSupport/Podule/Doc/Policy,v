head	4.1;
access;
symbols
	Podule-1_72:4.1
	Podule-1_71:4.1
	Podule-1_70:4.1
	Podule-1_69:4.1
	Podule-1_68:4.1
	Podule-1_67:4.1
	Podule-1_66:4.1
	Podule-1_65:4.1
	Podule-1_64:4.1
	Podule-1_63:4.1
	Podule-1_62:4.1
	Podule-1_61:4.1
	RO_5_07:4.1
	Podule-1_60:4.1;
locks; strict;
comment	@# @;


4.1
date	2002.11.04.21.43.06;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


4.1
log
@Prised out the last remaining IOMD assumptions,now follows a policy of
autodetection described in "Docs.Policy",which included eliminating some
static tables which were produced at runtime.
The static tables are now all in s.Tables.
The podule node list is generated at run time since so many of the node
entries needed correction depending on where "SSpaceStart" is.
Though not explicitly mentioned in the PRMs,where an IO area doesn't
exist for a given IOMD varient zero is returned by Podule_ReadInfo to
denote it does not exist
Support for Podule_SetSpeed helpers added,thus IOMD abstracting the way
you set EASI cycle speeds.

Version 1.60. Tagged as 'Podule-1_60'
@
text
@Policy post Podule Manager 1.58
-------------------------------
Podule manager will ask the Kernel where 'S' space is.
If it gets an error,it assumes the Kernel is too old to understand OS_Memory and will substitute the
hardcoded IOMD_Base address for you.
If zero,or non zero but unknown then you don't get any EASI or MEMC or IOC podules at all.
If non zero and known then it'll magically update all the podule nodes according to what the tables tell it.

The assumption here is that podule manager's table of known devices will be updated on a 'per new IOMD
lookalike' basis.In a system with no IOMD but still some IO space,podule manager can be fooled into thinking
there're podules with some due care.
@
