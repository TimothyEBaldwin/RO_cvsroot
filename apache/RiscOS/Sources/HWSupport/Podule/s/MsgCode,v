head	4.6;
access;
symbols
	Podule-1_72:4.6
	Podule-1_71:4.6
	Podule-1_70:4.6
	Podule-1_69:4.6
	Podule-1_68:4.6
	Podule-1_67:4.6
	Podule-1_66:4.6
	Podule-1_65:4.6
	Podule-1_64:4.5
	Podule-1_63:4.5
	Podule-1_62:4.5
	Podule-1_61:4.5
	RO_5_07:4.5
	Podule-1_60:4.5
	Podule-1_59:4.4
	Podule-1_58:4.3
	dellis_autobuild_BaseSW:4.3
	Podule-1_57:4.3
	Podule-1_56:4.3
	Podule-1_55:4.3
	Podule-1_54:4.3
	Podule-1_53:4.2
	sbrodie_sedwards_16Mar2000:4.2
	Podule-1_52:4.2
	Podule-1_51:4.2
	Podule-1_50:4.1
	dcotton_autobuild_BaseSW:4.3
	Ursula_merge:4.1
	Podule-1_49:4.1
	nturton_Podule-1_48:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Podule_47:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2012.03.17.17.47.13;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	iDYLNZ9CAtlyngXv;

4.5
date	2002.11.04.21.43.07;	author rsprowson;	state Exp;
branches;
next	4.4;

4.4
date	2002.10.26.11.57.12;	author rsprowson;	state Exp;
branches;
next	4.3;

4.3
date	2000.04.28.12.33.44;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.01.12.17.14.16;	author pskirrow;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.37.00;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.37.00;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.36.52;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.39.10;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.52.00;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Reinstate reporting on the network card podule.
In the *PODULES code the loop counter goes from 0...maxpod-1 but the check to change the text to say "Network card" was checking against maxpod.
Ammended a few comment typos and shelved some unused files.

Version 1.65. Tagged as 'Podule-1_65'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        TTL     The Podule manager.
        SUBT    Message handling code => Podule.s.MsgCode

; OSS Size of temporary block for when we do a lookup with subsitution.

temp_block_size         *       512

; OSS Print a GS Transed string from the Messages file, with four parameters.
; Temporarily claims a block of RMA for the buffer.

; In:           r0 -> token
;               r1-r2 -> %0-%1
; Out:          r3-r11 preserved, r0-r2 undefined, flags undefined
; Error:        r0 -> error block, V set

gs_lookup_print_string_two Entry "r3-r7"
        BL      open_message_file
        EXIT    VS
  [  DebugCommands
        DSTRING r0, "GSLookup on token: "
  ]

; Move input parameters. "Fortunately", OS_Module Claim needs r0, r2 and r3
; which just "happen" to be the ones we don't need yet. (I spy careful design
; of the MessageTrans interface!)

        MOV     r4, r1                          ; -> %0
        MOV     r5, r2                          ; -> %1
        MOV     r6, #0                          ; -> %2
        MOV     r7, #0                          ; -> %3
        MOV     r1, r0                          ; Message token

; Claim the temporary block

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #temp_block_size
        SWI     XOS_Module
        EXIT    VS
  [  DebugCommands
        DLINE   "Block claimed OK."
  ]

; r2 -> block, r3 = size of block as required by MessageTrans

        ADR     r0, message_file_block          ; Message file handle
  [  DebugCommands
        DREG    r0, "R0 = &", cc
        Push    r14
        LDR     r14, [ r0, #0 ]
        DREG    r14, ", &", cc
        LDR     r14, [ r0, #4 ]
        DREG    r14, ", &", cc
        LDR     r14, [ r0, #8 ]
        DREG    r14, ", &", cc
        LDR     r14, [ r0, #12 ]
        DREG    r14, ", &"
        Pull    r14
        DREG    r1, "R1 = &", cc
        DSTRING r1, " token is: "
        DREG    r2, "R2 = &"
        DREG    r3, "R3 = &"
        DREG    r4, "R4 = &", cc
        DSTRING r4, " %0 is: "
        DREG    r5, "R5 = &", cc
        DSTRING r5, " %1 is: "
        DREG    r6, "R6 = &", cc
        DSTRING r6, " %2 is: "
        DREG    r7, "R7 = &", cc
        DSTRING r7, " %3 is: "
        DREG    r8, "R8 = &"
        DREG    r9, "R9 = &"
        DREG    r10, "R10 = &"
        DREG    r11, "R11 = &"
        DREG    r12, "R12 = &"
        DREG    r13, "R13 = &"
        DREG    r14, "R14 = &"
        DREG    r15, "R15 = &"
  ]
        SWI     XMessageTrans_GSLookup
  [  DebugCommands
        DLINE   "SWI XMessageTrans_GSLookup returns ", cc
        BVS     %16
        DLINE   "OK"
        B       %17
16
        DLINE   "an error: ", cc
        ADD     r14, r0, #4
        DSTRING r14
17
  ]
        MOVVS   r6, r0                          ; Squirrel error away
        BVS     free_block
        MOV     r6, #0                          ; Flag no error

; Now print the string from the block

        MOV     r0, r2                          ; Resulting string
        MOV     r1, r3                          ; String length
        SWI     XOS_WriteN
        MOVVS   r6, r0                          ; Squirrel error away

free_block ; r2 still points to the block!

        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        TEQ     r6, #0                          ; Was there an earlier error?
        MOVNE   r0, r6                          ; Restore it and set V
        SETV    NE

; If there was no earlier error (ie. r6 = 0) then any error from the
; OS_Module Free call is returned.

        EXIT


; OSS Translate an error block, with one substituted parameter.

; In:   r0 -> Error block containing the token
;       r1 -> %0 parameter to substitute

; Out:  r0 -> Translated error block or another error (token no found etc.)
;       All other registers preserved, V always set, other flags undefined

copy_error_one Entry "r2-r7"
  [  DebugModule
        DLINE   "Copy_Error_One called"
  ]
        BL      open_message_file               ; Ensure file is open
        EXIT    VS                              ; Return the error

        MOV     r4, r1                          ; Move input %0
        ADR     r1, message_file_block          ; Messages file handle
        MOV     r2, #0                          ; Use MessageTrans buffer
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_ErrorLookup       ; Always sets the V flag

        MOV     r1, r4                          ; Preserve input r1
        EXIT

; Same as copy_error_one() but with no parameter.

copy_error_zero Entry "r1"
        MOV     r1, #0                          ; No %0
        BL      copy_error_one
        EXIT

message_filename
        DCB     "Resources:$.Resources.Podule.Messages", 0
        ALIGN


; OSS Open the messages file if it is closed.

open_message_file
        ROUT
        Push    "r0-r2, lr"
        LDR     r14, message_file_open
        CMP     r14, #0                         ; Check the open flag, clearing V
        BNE     ExitOpenMessageFile             ; Return - it is open
        ADR     r0, message_file_block          ; Messages file handle
        ADR     r1, message_filename            ; Messages filename
        MOV     r2, #0                          ; Buffer in RMA/access direct
        SWI     XMessageTrans_OpenFile
        MOVVC   r1, #1
        STRVC   r1, message_file_open           ; Flag the file as open
ExitOpenMessageFile
        STRVS   r0, [ sp, #0 ]                  ; Return the error
        Pull    "r0-r2, pc"

; TMD Close the messages file if it is open.
; All registers preserved except if we get an error, in which case R0 -> error

close_message_file
        ROUT
        Push    "r0, lr"
        LDR     r0, message_file_open
        CMP     r0, #0                          ; NB clears V
        MOVNE   r0, #0
        STRNE   r0, message_file_open           ; always mark as closed even if we're going to get error
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile
        STRVS   r0, [ sp, #0 ]
        Pull    "r0, pc"

SoftloadErrorMssg
        ; in:  r0=pointer to message token
        ;      r2=pointer to target block
        ;      wp=pointer to workspace
        ; out: all registers preserved (except r0 if the message file is duff)

        Entry   "r0-r7"
        BL      open_message_file               ; Ensure file is open
        STRVS   r0, [ sp, #0 ]
        EXIT    VS                              ; Return the error
        ADR     r1, message_file_block
        MOV     r3, #InfoBufLength
      [ DebugInit
        DREG    r0,"Error block at &"
        DREG    r1,"MessageTrans block at &"
        DREG    r2,"Target buffer &"
      ]
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
      [ DebugInit
        DREG    r0,"R0 now points to &"         ; Quick look for a token not found error
      ]
        CLRV
        EXIT

EasyLookup ROUT
        ;       In:  R1 Pointer to token
        ;       In:  R4 Single parameter to substitute
        ;       Out: R2 Pointer to looked up message in an error buffer
        ;       Out: R3 Length including terminator

        Push    "r0, r1, r3, r5, r6, r7, lr"
        BL      open_message_file
  [  DebugMssgs
        BVC     %71
        ADD     r14, r0, #4
        DSTRING r14, "Error from open_message_file: "
71
  ]
        ADRVC   r0, message_file_block                  ; Message file handle
        MOV     r2, #0                                  ; No buffer, expand in place
        MOV     r3, #0
        MOV     r5, #0                                  ; No %1
        MOV     r6, #0                                  ; No %2
        MOV     r7, #0                                  ; No %3
  [ DebugMssgs :LOR:  DebugCommands
        BVS     ExitEasyLookup
        DREG    r0, "R0 = &", cc
        Push    r14
        LDR     r14, [ r0, #0 ]
        DREG    r14, ", &", cc
        LDR     r14, [ r0, #4 ]
        DREG    r14, ", &", cc
        LDR     r14, [ r0, #8 ]
        DREG    r14, ", &", cc
        LDR     r14, [ r0, #12 ]
        DREG    r14, ", &"
        Pull    r14
        DREG    r1, "R1 = &", cc
        DSTRING r1, " token is: "
        DREG    r2, "R2 = &"
        DREG    r3, "R3 = &"
        DREG    r4, "R4 = &", cc
        DSTRING r4, " %0 is: "
        DREG    r5, "R5 = &", cc
        DSTRING r5, " %1 is: "
        DREG    r6, "R6 = &", cc
        DSTRING r6, " %2 is: "
        DREG    r7, "R7 = &", cc
        DSTRING r7, " %3 is: "
        DREG    r8, "R8 = &"
        DREG    r9, "R9 = &"
        DREG    r10, "R10 = &"
        DREG    r11, "R11 = &"
        DREG    r12, "R12 = &"
        DREG    r13, "R13 = &"
        DREG    r14, "R14 = &"
        DREG    r15, "R15 = &"
  ]
        SWIVC   XMessageTrans_Lookup
  [  DebugMssgs
        BVC     %76
        ADD     r14, r0, #4
        DSTRING r14, "Error from XMessageTrans_Lookup: "
76
  ]
        BVS     ExitEasyLookup
        ADD     r3, r3, #1                              ; Allow for the terminator
        STR     r3, [ sp, #8 ]                          ; Poke into the return frame
        LDR     r0, [ sp, #4 ]                          ; Get the token pointer
        DEC     r0, 4                                   ; Pretend it is an error pointer
        ADR     r1, message_file_block                  ; Message file handle
        MOV     r2, #0                                  ; No buffer, expand into a buffer
        MOV     r3, #0
        SWI     XMessageTrans_ErrorLookup
  [  DebugModule
        ADD     r14, r0, #4
        DSTRING r14, "Error from XMessageTrans_ErrorLookup: "
  ]
        CLRV
        ADD     r2, r0, #4                              ; Skip over the error number
ExitEasyLookup
  [ DebugMssgs :LOR:  DebugCommands
        Push    "r0, r1"
        ADR     r0, message_file_block                  ; Message file handle
        DREG    r0, "R0 = &", cc
        LDR     r1, [ r0, #0 ]
        DREG    r1, ", &", cc
        LDR     r1, [ r0, #4 ]
        DREG    r1, ", &", cc
        LDR     r1, [ r0, #8 ]
        DREG    r1, ", &", cc
        LDR     r1, [ r0, #12 ]
        DREG    r1, ", &"
        Pull    "r0, r1"
  ]
        STRVS   r0, [ sp, #0 ]
        Pull    "r0, r1, r3, r5, r6, r7, pc"

        ROUT

        LTORG

        [ :LNOT: ReleaseVersion
        InsertDebugRoutines
        ]

        END
@


4.5
log
@Prised out the last remaining IOMD assumptions,now follows a policy of
autodetection described in "Docs.Policy",which included eliminating some
static tables which were produced at runtime.
The static tables are now all in s.Tables.
The podule node list is generated at run time since so many of the node
entries needed correction depending on where "SSpaceStart" is.
Though not explicitly mentioned in the PRMs,where an IO area doesn't
exist for a given IOMD varient zero is returned by Podule_ReadInfo to
denote it does not exist
Support for Podule_SetSpeed helpers added,thus IOMD abstracting the way
you set EASI cycle speeds.

Version 1.60. Tagged as 'Podule-1_60'
@
text
@a298 12
  [ False ; DebugMssgs
        DREG    r0, "R0 = &"
        DREG    r1, "R1 = &"
        DREG    r2, "R2 = &"
        DREG    r3, "R3 = &"
        DREG    r4, "R4 = &"
        DREG    r5, "R5 = &"
        DREG    r6, "R6 = &"
        DREG    r7, "R7 = &"
        DREG    wp, "WP = &"
        DREG    sp, "SP = &"
  ]
@


4.4
log
@Made use of "PoduleReadOnly" and "AddressRange" loader error messages,
added to messages file.
Network and ExtROM internal loaders now return full message strings
rather than the "Bad" token!
Presence of absence of ExtROMs/EASI/NIC/IOC and MEMC podule support is
deduced at runtime,and the logical addresses requested from the Kernel
by OS_Memory.EASI,ExtROMs and NIC remain assembly time options though
just to reduce the size of the module a bit.
An assortment of internal variables have been altered to have 0 or -1 as
their unused value rather than &80000000 as this may be a candidate for
genuine loader addresses in future.
First pass at removing IOMD specific assumptions in the module.

Version 1.59. Tagged as 'Podule-1_59'
@
text
@a22 1

a208 1

@


4.3
log
@* Converted to be 32-bit compatible.
* Suppresses non-32-bit expansion card loaders (a 32-bit compatible loader
  must have the magic word "32OK" after the 4 entry points).
* Lots of OS_SynchroniseCodeAreas calls added. This module was far from
  StrongARM-compatible - I'm amazed it worked at all; indeed it often failed
  when softloaded.

Needs a new Hdr:NewErrors with the "Loader is not 32-bit compatible" error.

Version 1.54. Tagged as 'Podule-1_54'
@
text
@d16 2
a17 2
; OSS Message file handling code.

d203 6
a208 1
LookupLoader26bitError
d210 1
d212 1
a213 1
        ADRL    r0, ErrorBlock_Ldr26
d215 6
a220 2
        ADR     r2, Loader26bitError
        MOV     r3, #?Loader26bitError
d226 3
d231 114
@


4.2
log
@  Added fake podule header for EtherI. Converted to ObjAsm.
Detail:
  The Customer F 5 Ethernet NC doesn't have a podule ROM fitted, so we
  provide a fake podule header in podule manager.
  This is used if FakePodule0 is set in the machine header file
  or if FakePodule is passed in from the Makefile (FakePodule overrides
  the FakePodule0).
  It should be set to ProdType_EtherI to fake an EtherI podule but
  other values are possible, eg for MPEG).
Admin:
  Tested OK in Customer F 5 NC.

Version 1.51. Tagged as 'Podule-1_51'
@
text
@d203 16
@


4.1
log
@Initial revision
@
text
@d32 1
a32 1
gs_lookup_print_string_two ENTRY "r3-r7"
d38 1
a38 1
   
d140 1
a140 1
copy_error_one ENTRY "r2-r7"
d145 1
a145 1
        EXIT    VS                              ; Return the error 
d160 1
a160 1
copy_error_zero ENTRY "r1"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
