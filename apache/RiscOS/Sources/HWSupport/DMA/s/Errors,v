head	4.5;
access;
symbols
	DMA-0_23:4.5
	DMA-0_22:4.5
	DMA-0_21:4.5
	DMA-0_20:4.4
	DMA-0_19:4.4
	DMA-0_18:4.4
	RO_5_07:4.4
	DMA-0_17:4.4
	DMA-0_16:4.3
	HAL_merge:4.2.2.2
	DMA-0_15-4_4_2_6:4.2.2.2
	DMA-0_15-4_4_2_5:4.2.2.1
	DMA-0_15-4_4_2_4:4.2.2.1
	DMA-0_15-4_4_2_3:4.2.2.1
	DMA-0_15-4_4_2_2:4.2
	DMA-0_15-4_4_2_1:4.2
	HAL_bp:4.2
	HAL:4.2.0.2
	DMA-0_15:4.2
	DMA-0_14:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	DMA-0_13:4.1
	dcotton_autobuild_BaseSW:4.2
	nturton_DMA-0_12:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	troddis_DMA-0_13:4.1
	nicke_DMA_0_11:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2014.10.18.19.18.06;	author jlee;	state Exp;
branches;
next	4.4;
commitid	ZCUMqbwOugLqvIUx;

4.4
date	2003.01.30.16.10.49;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2002.12.13.18.48.12;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	2001.04.11.18.49.22;	author bavison;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.35.43;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2002.10.15.19.15.35;	author bavison;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2002.12.13.17.25.01;	author bavison;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.35.43;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.22.32;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.50.23;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.45.13;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Fix sync callbacks for list-type DMA channels. Improve handling of Service_PreReset.
Detail:
  s/DMA - Fixed sync callback logic of list-type channels to match that used by buffer-type channels. Old logic would result in too many sync callbacks being made at the start of a transfer, followed by dmar_Gap becoming negative and (potentially) no sync callbacks being made for the remainder of the transfer.
  s/Front, s/ModHead, s/SWI - Make SWI handler refuse to service any SWI following Service_PreReset. This helps avoid bad things happening should a client try to access DMA channels/transfers after we've reset everything during PreReset (although really it's our own fault for not telling the clients about the controller reset)
  Resources/UK/Messages, s/Errors - Define the error that we return when called following Service_PreReset.
Admin:
  Tested on Raspberry Pi


Version 0.21. Tagged as 'DMA-0_21'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Errors

;-----------------------------------------------------------------------------
;       Call/return the relevant error based on the international flag.
;
                MACRO
$label          DoError         $cc
              [ international
$label          B$cc    MsgTrans_ErrorLookup
              |
$label
                [ "$cc"<>"" :LAND: "$cc"<>"AL"
                DCI     &1A000001 :EOR: Cond_$cc ; branch over on opposite condition
                ]
                MSR     CPSR_f, #V_bit  ; pre-ARM6 compatibility not required
                MOV     pc, lr  ; NZC flags were corrupted on international builds anyway
              ]
                MEND

;-----------------------------------------------------------------------------
;       Define error messages based on the international flag.
;

      [ international
        ^ ErrorBase_DMA

        AddError DMA_BadSWI,            "BadSWI"
        AddError DMA_BadAddress,        "BadAddress"
        AddError DMA_BadChannel,        "E00"
        AddError DMA_AlreadyClaimed,    "E01"
        AddError DMA_BadHandle,         "E02"
        AddError DMA_BadTag,            "E03"
        AddError DMA_NotActive,         "E04"
        AddError DMA_Deregistered,      "E05"
        AddError DMA_BadCycleSpeed,     "E06"
        AddError DMA_BadTransferUnit,   "E07"
        AddError DMA_BadSize,           "E08"
        AddError DMA_NotSuspended,      "E09"
        AddError DMA_ZeroLength,        "E10"
        AddError DMA_Terminated,        "E11"
        AddError DMA_BadHard,           "E12"
        [ HAL
        AddError DMA_TransferTooLong,   "E13"
        AddError DMA_CtrlrInUse,        "E14"
        AddError DMA_ChanInUse,         "E15"
        AddError DMA_NotCircular,       "E16"
        AddError DMA_NotInfinite,       "E17"
        AddError DMA_TooComplex,        "E18"
        AddError DMA_MemoryError,       "E19"
        AddError DMA_DeviceError,       "E20"
        AddError DMA_PreReset,          "E21"
        ]
      |
        ^ ErrorBase_DMA

        AddError DMA_BadSWI,            "SWI value out of range for module DMA"
        AddError DMA_BadAddress,        "Bad address"
        AddError DMA_BadChannel,        "Invalid logical DMA channel number"
        AddError DMA_AlreadyClaimed,    "Logical DMA channel already claimed"
        AddError DMA_BadHandle,         "Invalid DMA channel handle"
        AddError DMA_BadTag,            "Invalid DMA tag"
        AddError DMA_NotActive,         "Not an active DMA transfer"
        AddError DMA_Deregistered,      "DMA channel deregistered"
        AddError DMA_BadCycleSpeed,     "Invalid DMA cycle speed"
        AddError DMA_BadTransferUnit,   "Invalid DMA transfer unit size"
        AddError DMA_BadSize,           "Not a multiple of the transfer unit size"
        AddError DMA_NotSuspended,      "Not a suspended DMA transfer"
        AddError DMA_ZeroLength,        "DMA manager cannot accept zero length or sync gap"
        AddError DMA_Terminated,        "DMA transfer terminated"
        AddError DMA_BadHard,           "Hardware does not support IO DMA"
        [ HAL
        AddError DMA_TransferTooLong,   "DMA transfer too long"
        AddError DMA_CtrlrInUse,        "DMA controller in use"
        AddError DMA_ChanInUse,         "DMA channel in use"
        AddError DMA_NotCircular,       "DMA channel does not support circular transfers"
        AddError DMA_NotInfinite,       "DMA channel does not support infinite transfers"
        AddError DMA_TooComplex,        "DMA transfer too complex"
        AddError DMA_MemoryError,       "Memory error"
        AddError DMA_DeviceError,       "Device error"
        AddError DMA_PreReset,          "DMA unavailable during pre-reset"
        ]
      ]

        END
@


4.4
log
@  A few weeks' dedicated work, mainly to support UDMA hard discs.
Detail:
  Features:
  * Supports physical channels using a new type of HAL device (&303) where
    the hardware takes a pointer to a scatter list up front to effect the
    entire transfer, and which may report hardware errors at any time.
    For full details, see Doc.HAL_DMAAPI.
  * Page tables are no longer generated when using a bounce-buffer, since
    they aren't actually any use except in determining if unsafe pages
    intersect with the transfer. Instead, bounce-buffer transfers are halted
    whenever any page becomes unsafe, and no new bounce-buffer transfers can
    be started while any pages are unsafe.
  * For both bounce-buffer and list-type devices, the Activate entry is
    now called after the transfer is programmed (with SetCurrentTransfer
    or SetListTransfer), since this is likely to be more useful for these
    types of devices. Note that for interrupt-driven buffer devices, it
    is still assumed that the default state of the device is to be in an
    underrun interrupt state, so the transfer is not programmed until the
    first time the interrupt routine is entered.
  * Now ensures that scatter list start addresses and lengths are all
    multiples of the transfer unit size (this check is done during page
    table construction, so will be returned via the Completed callback,
    rather than directly from DMA_QueueTransfer like the total length check).
  * When there is no interrupt associated with a physical channel (both for
    buffer- or list-type devices), if the polling of the hardware within SWI
    DMA_ExamineTransfer detects that the transfer has completed, then
    the transfer is shut down in the same was as though an interrupt had
    happened (ie the Completed callback is called without an error).
  * Added SWI DMA_AllocateLogicalChannels to act as a centralised allocator
    for session-unique logical DMA channels. Primarily a service to
    third-party authors of "HAL" devices.
  Bugfixes:
  * Now handles Service_MessageFileClosed to allow safe MessageTrans lookups
    in the background.
  * If a controller device was removed before its constituent channel
    devices, removing the channel device would abort.
  * Interrupt trampoline construction was wrong, the address of the
    interrupt handler code wasn't relocated. Also, non-vectored interrupts
    weren't correctly handled.
  * Transfers suspended by Service_PagesUnsafe weren't blocking the logical
    channel, so you could queue another transfer on the same channel and it
    would start immediately (although transfers already queued before the
    service call wouldn't have been started).
  * Transfers which had completed within Service_PagesUnsafe handler weren't
    being delinked from the queue.
  * Service_PagesSafe wasn't handled properly, meaning that none of the
    transfers that were halted by Service_PagesUnsafe were restarted! This
    was due to the use of routines in common with DMA_SuspendTransfer and
    DMA_ResumeTransfer which started with the first HALised version - these
    suspend a logical channel, unlike the original IOMD code which
    effectively suspends a physical channel. Thus the code to search for
    transfers to restart needs to be quite different, since the physical
    channel may be idle, or occupied with another logical channel, and
    each physical channel may have multiple associated logical channels
    that were on unsafe transfers!
  * When you deregistered a logical channel (including during module death)
    the Completed callback was called for all queued transfers, incorrectly
    including those that had not yet had the matching Start callback called.
  * There was a stack imbalance in the buffer device interrupt handler
    because the retained part of the old code assumed Hdr:Proc stack
    management, which the new code doesn't use (it's entered with the return
    address on the stack).
Admin:
  Tested with UDMA test harnesses on Tungsten (ADFS not yet complete).

Version 0.17. Tagged as 'DMA-0_17'
@
text
@d65 1
d94 1
@


4.3
log
@Folded in HAL branch.

Version 0.16. Tagged as 'DMA-0_16'
@
text
@d60 5
d85 1
a85 1
        AddError DMA_TransferTooLong,   "Transfer too long"
d88 5
@


4.2
log
@  Main change is 32-bit compatibility.
Detail:
  Also
  * added Ursula service call table (not even the Phoebe version had one!)
  * fixed a bug: the Service_PagesUnsafe handler was returning with IRQs
    still disabled
Admin:
  Not tested.

Version 0.15. Tagged as 'DMA-0_15'
@
text
@d56 5
d79 5
@


4.2.2.1
log
@  Just enough support for floppy DMA transfer to work on Tungsten.
Detail:
  * Supports DMA controllers with no interrupts (ie those that need a bounce
    buffer).
  * Restructured interface to HAL to separate the concepts of a DMA controller
    device and a DMA channel device.
  * Bugfixes to handling of single-buffered channels.
  * Updated Doc.HAL_DMAAPI.
Admin:
  Tested with Kevin's ADFS.

Version 0.15, 4.4.2.3. Tagged as 'DMA-0_15-4_4_2_3'
@
text
@a55 3
        [ HAL
        AddError DMA_TransferTooLong,   "E13"
        ]
a73 3
        [ HAL
        AdError DMA_TransferTooLong,    "Transfer too long"
        ]
@


4.2.2.2
log
@  Lots of improvements, working towards support for UDMA etc.
Detail:
  * No longer uses temporay HAL DMA entry points, all hardware access is
    accomplished using device entry points.
  * Supports multiple DMA controllers, including dynamic addition and
    removal of controllers (using OS_Hardware 4 and Service_Hardware).
  * Added *DMAChannels, which enumerates the currently registered DMA
    channels, listed according to physical location.
  * Logical channel blocks are dynamically allocated (as a requirement of
    the above changes) so logical channel handles are now pointers, no
    longer an array index. Just so you know.
  * Removed now-obsolete EnumerateLogical entry from controller device API.
  * Added pointer-to-controller-device item in publically visible part of
    channel device structure.
  * Moved memory-to-memory channel device entries to end of channel device
    structure (I'm considering removing them).
  * Added support for GPA debugging listing (requires BuildSys 3.86).
Admin:
  Tested on Tungsten (ie floppies still work).

Version 0.15, 4.4.2.6. Tagged as 'DMA-0_15-4_4_2_6'
@
text
@a57 2
        AddError DMA_CtrlrInUse,        "E14"
        AddError DMA_ChanInUse,         "E15"
d78 1
a78 3
        AddError DMA_TransferTooLong,   "Transfer too long"
        AddError DMA_CtrlrInUse,        "DMA controller in use"
        AddError DMA_ChanInUse,         "DMA channel in use"
@


4.1
log
@Initial revision
@
text
@d25 6
a30 1
$label          ORR$cc.S pc, lr, #V_bit
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
