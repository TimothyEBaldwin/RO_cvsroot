head	4.2;
access;
symbols
	DMA-0_23:4.2
	DMA-0_22:4.2
	DMA-0_21:4.2
	DMA-0_20:4.2
	DMA-0_19:4.2
	DMA-0_18:4.2
	RO_5_07:4.2
	DMA-0_17:4.2
	DMA-0_16:4.1
	HAL_merge:1.1.2.1
	DMA-0_15-4_4_2_6:1.1.2.1
	HAL:1.1.0.2;
locks; strict;
comment	@# @;


4.2
date	2003.01.30.16.10.49;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	2002.12.13.18.48.12;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.13.17.25.00;	author bavison;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.12.13.17.25.01;	author bavison;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  A few weeks' dedicated work, mainly to support UDMA hard discs.
Detail:
  Features:
  * Supports physical channels using a new type of HAL device (&303) where
    the hardware takes a pointer to a scatter list up front to effect the
    entire transfer, and which may report hardware errors at any time.
    For full details, see Doc.HAL_DMAAPI.
  * Page tables are no longer generated when using a bounce-buffer, since
    they aren't actually any use except in determining if unsafe pages
    intersect with the transfer. Instead, bounce-buffer transfers are halted
    whenever any page becomes unsafe, and no new bounce-buffer transfers can
    be started while any pages are unsafe.
  * For both bounce-buffer and list-type devices, the Activate entry is
    now called after the transfer is programmed (with SetCurrentTransfer
    or SetListTransfer), since this is likely to be more useful for these
    types of devices. Note that for interrupt-driven buffer devices, it
    is still assumed that the default state of the device is to be in an
    underrun interrupt state, so the transfer is not programmed until the
    first time the interrupt routine is entered.
  * Now ensures that scatter list start addresses and lengths are all
    multiples of the transfer unit size (this check is done during page
    table construction, so will be returned via the Completed callback,
    rather than directly from DMA_QueueTransfer like the total length check).
  * When there is no interrupt associated with a physical channel (both for
    buffer- or list-type devices), if the polling of the hardware within SWI
    DMA_ExamineTransfer detects that the transfer has completed, then
    the transfer is shut down in the same was as though an interrupt had
    happened (ie the Completed callback is called without an error).
  * Added SWI DMA_AllocateLogicalChannels to act as a centralised allocator
    for session-unique logical DMA channels. Primarily a service to
    third-party authors of "HAL" devices.
  Bugfixes:
  * Now handles Service_MessageFileClosed to allow safe MessageTrans lookups
    in the background.
  * If a controller device was removed before its constituent channel
    devices, removing the channel device would abort.
  * Interrupt trampoline construction was wrong, the address of the
    interrupt handler code wasn't relocated. Also, non-vectored interrupts
    weren't correctly handled.
  * Transfers suspended by Service_PagesUnsafe weren't blocking the logical
    channel, so you could queue another transfer on the same channel and it
    would start immediately (although transfers already queued before the
    service call wouldn't have been started).
  * Transfers which had completed within Service_PagesUnsafe handler weren't
    being delinked from the queue.
  * Service_PagesSafe wasn't handled properly, meaning that none of the
    transfers that were halted by Service_PagesUnsafe were restarted! This
    was due to the use of routines in common with DMA_SuspendTransfer and
    DMA_ResumeTransfer which started with the first HALised version - these
    suspend a logical channel, unlike the original IOMD code which
    effectively suspends a physical channel. Thus the code to search for
    transfers to restart needs to be quite different, since the physical
    channel may be idle, or occupied with another logical channel, and
    each physical channel may have multiple associated logical channels
    that were on unsafe transfers!
  * When you deregistered a logical channel (including during module death)
    the Completed callback was called for all queued transfers, incorrectly
    including those that had not yet had the matching Start callback called.
  * There was a stack imbalance in the buffer device interrupt handler
    because the retained part of the old code assumed Hdr:Proc stack
    management, which the new code doesn't use (it's entered with the return
    address on the stack).
Admin:
  Tested with UDMA test harnesses on Tungsten (ADFS not yet complete).

Version 0.17. Tagged as 'DMA-0_17'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Command

        ASSERT  international

DMAChannels_Code
        LDR     r12, [r12]
        Entry   "r7-r11"
        LDR     r11, CtrlrList
        TEQ     r11, #0
        EXIT    EQ

        ; Cache information about the logical channel table.
        ADR     r1, I06
        MOV     r2, #0
        BL      MsgTrans_Lookup
        STRVC   r0, Header+4*0
        ADDVC   r1, r0, #1
01      LDRVCB  r2, [r0], #1
        TEQ     r2, #0
        BNE     %BT01
        SUBVC   r1, r0, r1
        STRVCB  r1, Width+1*0

        ADRVC   r1, I07
        MOVVC   r2, #0
        BLVC    MsgTrans_Lookup
        STRVC   r0, Header+4*1
        ADDVC   r1, r0, #1
02      LDRVCB  r2, [r0], #1
        TEQ     r2, #0
        BNE     %BT02
        SUBVC   r1, r0, r1
        STRVCB  r1, Width+1*1

        ADRVC   r1, I08
        MOVVC   r2, #0
        BLVC    MsgTrans_Lookup
        STRVC   r0, Header+4*2
        ADDVC   r1, r0, #1
03      LDRVCB  r2, [r0], #1
        TEQ     r2, #0
        BNE     %BT03
        SUBVC   r1, r0, r1
        STRVCB  r1, Width+1*2
        BVS     %FT90

10      ; Print controller header.
        ADR     r1, I00
        ADR     r2, Scratch
        MOV     r3, #?Scratch
        LDR     r4, [r11, #ctrlr_Device]
        LDR     r4, [r4, #HALDevice_Description]
        BL      MsgTrans_Lookup
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT90

        LDR     r10, [r11, #ctrlr_PhysicalChannels]

        ; Count used channels.
        ADD     r6, r11, #ctrlr_DMAQueues + dmaq_Usage
        MOV     r7, r10
        MOV     r9, #0
20      LDR     r14, [r6], #DMAQSize
        TEQ     r14, #0
        ADDNE   r9, r9, #1
        SUBS    r7, r7, #1
        BNE     %BT20

        ; Print number of free channels.
        ADR     r1, I04
        MOV     r2, #0
        BL      MsgTrans_Lookup
        BVS     %FT90
        MOV     r4, r0
        SUB     r0, r10, r9
        CMP     r0, #1
        ADRLO   r1, I01
        ADREQ   r1, I02
        ADRHI   r1, Scratch + ?Scratch - 16
        MOVHI   r2, #16
        SWIHI   XOS_ConvertCardinal4
        MOVHI   r5, r4
        MOVHI   r4, r0
        ADRHI   r1, I03
        ADR     r2, Scratch
        MOV     r3, #?Scratch
        BL      MsgTrans_Lookup
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        BVS     %FT90

        ; Print number of used channels.
        ADR     r1, I05
        MOV     r2, #0
        BL      MsgTrans_Lookup
        BVS     %FT90
        MOV     r4, r0
        MOV     r0, r9
        CMP     r0, #1
        ADRLO   r1, I01
        ADREQ   r1, I02
        ADRHI   r1, Scratch + ?Scratch - 16
        MOVHI   r2, #16
        SWIHI   XOS_ConvertCardinal4
        MOVHI   r5, r4
        MOVHI   r4, r0
        ADRHI   r1, I03
        ADR     r2, Scratch
        MOV     r3, #?Scratch
        BL      MsgTrans_Lookup
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        BVS     %FT90

        TEQ     r9, #0
        BEQ     %FT80
        ASSERT  DMAQSize=112
        MOV     r10, r10, LSL #7
        SUB     r10, r10, r10, LSR #7-4
        ADD     r10, r11, r10
        ADD     r10, r10, #ctrlr_DMAQueues
30      ; Find a used channel
        SUB     r10, r10, #DMAQSize
        LDR     r8, [r10, #dmaq_Usage]
        TEQ     r8, #0
        BEQ     %BT30

        ; Print channel name
        SWI     XOS_NewLine
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVC   r0, [r10, #dmaq_DMADevice]
        LDRVC   r0, [r0, #HALDevice_Description]
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine

        ; Print headers
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVC   r0, Header+4*0
        SWIVC   XOS_Write0
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVC   r0, Header+4*1
        SWIVC   XOS_Write0
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVC   r0, Header+4*2
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVCB  r0, Width+1*0
31      SWIVC   XOS_WriteI+'-'
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT31
        SWI     XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVCB  r0, Width+1*1
32      SWIVC   XOS_WriteI+'-'
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT32
        SWI     XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVCB  r0, Width+1*2
33      SWIVC   XOS_WriteI+'-'
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT33
        SWI     XOS_NewLine

        ; Find a logical channel that uses this physical channel
        LDR     r7, ChannelList
40      LDR     r0, [r7, #lcb_Queue]
        TEQ     r0, r10
        LDRNE   r7, [r7, #lcb_Next]
        BNE     %BT40

        ; Print logical channel details
        SWI     XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+'&'
        LDRVC   r0, [r7, #lcb_ChannelNo]
        ADRVC   r1, Scratch
        MOVVC   r2, #16
        SWIVC   XOS_ConvertHex8
        SWIVC   XOS_Write0
        LDRVCB  r0, Width+1*0
        SUBVC   r0, r0, #9-3
41      SWIVC   XOS_WriteI+' '
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT41
        SWI     XOS_WriteI+'&'
        LDRVC   r0, [r7, #lcb_Vector]
        ADRVC   r1, Scratch
        MOVVC   r2, #16
        SWIVC   XOS_ConvertHex8
        SWIVC   XOS_Write0
        LDRVCB  r0, Width+1*1
        SUBVC   r0, r0, #9-3
42      SWIVC   XOS_WriteI+' '
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT42
        SWI     XOS_WriteI+'&'
        LDRVC   r0, [r7, #lcb_R12]
        ADRVC   r1, Scratch
        MOVVC   r2, #16
        SWIVC   XOS_ConvertHex8
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        BVS     %FT90

        ; Next logical channel for this physical channel
        SUBS    r8, r8, #1
        LDRNE   r7, [r7, #lcb_Next]
        BNE     %BT40

        ; Next physical channel for this controller
        SUBS    r9, r9, #1
        BNE     %BT30

80      ; Next controller
        LDR     r11, [r11, #ctrlr_Next]
        TEQ     r11, #0
        EXIT    EQ
        SWI     XOS_NewLine
        B       %BT10
90
        EXIT

I00     = "I00", 0
I01     = "I01", 0
I02     = "I02", 0
I03     = "I03", 0
I04     = "I04", 0
I05     = "I05", 0
I06     = "I06", 0
I07     = "I07", 0
I08     = "I08", 0

        ALIGN

        END
@


4.1
log
@Folded in HAL branch.

Version 0.16. Tagged as 'DMA-0_16'
@
text
@d133 3
a135 3
        ASSERT  DMAQSize=96
        MOV     r10, r10, LSL #5
        ADD     r10, r10, r10, LSL #6-5
@


1.1
log
@file Command was initially added on branch HAL.
@
text
@d1 273
@


1.1.2.1
log
@  Lots of improvements, working towards support for UDMA etc.
Detail:
  * No longer uses temporay HAL DMA entry points, all hardware access is
    accomplished using device entry points.
  * Supports multiple DMA controllers, including dynamic addition and
    removal of controllers (using OS_Hardware 4 and Service_Hardware).
  * Added *DMAChannels, which enumerates the currently registered DMA
    channels, listed according to physical location.
  * Logical channel blocks are dynamically allocated (as a requirement of
    the above changes) so logical channel handles are now pointers, no
    longer an array index. Just so you know.
  * Removed now-obsolete EnumerateLogical entry from controller device API.
  * Added pointer-to-controller-device item in publically visible part of
    channel device structure.
  * Moved memory-to-memory channel device entries to end of channel device
    structure (I'm considering removing them).
  * Added support for GPA debugging listing (requires BuildSys 3.86).
Admin:
  Tested on Tungsten (ie floppies still work).

Version 0.15, 4.4.2.6. Tagged as 'DMA-0_15-4_4_2_6'
@
text
@a0 273
; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Command

        ASSERT  international

DMAChannels_Code
        LDR     r12, [r12]
        Entry   "r7-r11"
        LDR     r11, CtrlrList
        TEQ     r11, #0
        EXIT    EQ

        ; Cache information about the logical channel table.
        ADR     r1, I06
        MOV     r2, #0
        BL      MsgTrans_Lookup
        STRVC   r0, Header+4*0
        ADDVC   r1, r0, #1
01      LDRVCB  r2, [r0], #1
        TEQ     r2, #0
        BNE     %BT01
        SUBVC   r1, r0, r1
        STRVCB  r1, Width+1*0

        ADRVC   r1, I07
        MOVVC   r2, #0
        BLVC    MsgTrans_Lookup
        STRVC   r0, Header+4*1
        ADDVC   r1, r0, #1
02      LDRVCB  r2, [r0], #1
        TEQ     r2, #0
        BNE     %BT02
        SUBVC   r1, r0, r1
        STRVCB  r1, Width+1*1

        ADRVC   r1, I08
        MOVVC   r2, #0
        BLVC    MsgTrans_Lookup
        STRVC   r0, Header+4*2
        ADDVC   r1, r0, #1
03      LDRVCB  r2, [r0], #1
        TEQ     r2, #0
        BNE     %BT03
        SUBVC   r1, r0, r1
        STRVCB  r1, Width+1*2
        BVS     %FT90

10      ; Print controller header.
        ADR     r1, I00
        ADR     r2, Scratch
        MOV     r3, #?Scratch
        LDR     r4, [r11, #ctrlr_Device]
        LDR     r4, [r4, #HALDevice_Description]
        BL      MsgTrans_Lookup
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT90

        LDR     r10, [r11, #ctrlr_PhysicalChannels]

        ; Count used channels.
        ADD     r6, r11, #ctrlr_DMAQueues + dmaq_Usage
        MOV     r7, r10
        MOV     r9, #0
20      LDR     r14, [r6], #DMAQSize
        TEQ     r14, #0
        ADDNE   r9, r9, #1
        SUBS    r7, r7, #1
        BNE     %BT20

        ; Print number of free channels.
        ADR     r1, I04
        MOV     r2, #0
        BL      MsgTrans_Lookup
        BVS     %FT90
        MOV     r4, r0
        SUB     r0, r10, r9
        CMP     r0, #1
        ADRLO   r1, I01
        ADREQ   r1, I02
        ADRHI   r1, Scratch + ?Scratch - 16
        MOVHI   r2, #16
        SWIHI   XOS_ConvertCardinal4
        MOVHI   r5, r4
        MOVHI   r4, r0
        ADRHI   r1, I03
        ADR     r2, Scratch
        MOV     r3, #?Scratch
        BL      MsgTrans_Lookup
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        BVS     %FT90

        ; Print number of used channels.
        ADR     r1, I05
        MOV     r2, #0
        BL      MsgTrans_Lookup
        BVS     %FT90
        MOV     r4, r0
        MOV     r0, r9
        CMP     r0, #1
        ADRLO   r1, I01
        ADREQ   r1, I02
        ADRHI   r1, Scratch + ?Scratch - 16
        MOVHI   r2, #16
        SWIHI   XOS_ConvertCardinal4
        MOVHI   r5, r4
        MOVHI   r4, r0
        ADRHI   r1, I03
        ADR     r2, Scratch
        MOV     r3, #?Scratch
        BL      MsgTrans_Lookup
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        BVS     %FT90

        TEQ     r9, #0
        BEQ     %FT80
        ASSERT  DMAQSize=96
        MOV     r10, r10, LSL #5
        ADD     r10, r10, r10, LSL #6-5
        ADD     r10, r11, r10
        ADD     r10, r10, #ctrlr_DMAQueues
30      ; Find a used channel
        SUB     r10, r10, #DMAQSize
        LDR     r8, [r10, #dmaq_Usage]
        TEQ     r8, #0
        BEQ     %BT30

        ; Print channel name
        SWI     XOS_NewLine
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVC   r0, [r10, #dmaq_DMADevice]
        LDRVC   r0, [r0, #HALDevice_Description]
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine

        ; Print headers
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVC   r0, Header+4*0
        SWIVC   XOS_Write0
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVC   r0, Header+4*1
        SWIVC   XOS_Write0
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVC   r0, Header+4*2
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVCB  r0, Width+1*0
31      SWIVC   XOS_WriteI+'-'
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT31
        SWI     XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVCB  r0, Width+1*1
32      SWIVC   XOS_WriteI+'-'
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT32
        SWI     XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        LDRVCB  r0, Width+1*2
33      SWIVC   XOS_WriteI+'-'
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT33
        SWI     XOS_NewLine

        ; Find a logical channel that uses this physical channel
        LDR     r7, ChannelList
40      LDR     r0, [r7, #lcb_Queue]
        TEQ     r0, r10
        LDRNE   r7, [r7, #lcb_Next]
        BNE     %BT40

        ; Print logical channel details
        SWI     XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+' '
        SWIVC   XOS_WriteI+'&'
        LDRVC   r0, [r7, #lcb_ChannelNo]
        ADRVC   r1, Scratch
        MOVVC   r2, #16
        SWIVC   XOS_ConvertHex8
        SWIVC   XOS_Write0
        LDRVCB  r0, Width+1*0
        SUBVC   r0, r0, #9-3
41      SWIVC   XOS_WriteI+' '
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT41
        SWI     XOS_WriteI+'&'
        LDRVC   r0, [r7, #lcb_Vector]
        ADRVC   r1, Scratch
        MOVVC   r2, #16
        SWIVC   XOS_ConvertHex8
        SWIVC   XOS_Write0
        LDRVCB  r0, Width+1*1
        SUBVC   r0, r0, #9-3
42      SWIVC   XOS_WriteI+' '
        BVS     %FT90
        SUBS    r0, r0, #1
        BNE     %BT42
        SWI     XOS_WriteI+'&'
        LDRVC   r0, [r7, #lcb_R12]
        ADRVC   r1, Scratch
        MOVVC   r2, #16
        SWIVC   XOS_ConvertHex8
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        BVS     %FT90

        ; Next logical channel for this physical channel
        SUBS    r8, r8, #1
        LDRNE   r7, [r7, #lcb_Next]
        BNE     %BT40

        ; Next physical channel for this controller
        SUBS    r9, r9, #1
        BNE     %BT30

80      ; Next controller
        LDR     r11, [r11, #ctrlr_Next]
        TEQ     r11, #0
        EXIT    EQ
        SWI     XOS_NewLine
        B       %BT10
90
        EXIT

I00     = "I00", 0
I01     = "I01", 0
I02     = "I02", 0
I03     = "I03", 0
I04     = "I04", 0
I05     = "I05", 0
I06     = "I06", 0
I07     = "I07", 0
I08     = "I08", 0

        ALIGN

        END
@

