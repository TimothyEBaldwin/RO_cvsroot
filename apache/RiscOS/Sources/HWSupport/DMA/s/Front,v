head	4.5;
access;
symbols
	DMA-0_23:4.5
	DMA-0_22:4.5
	DMA-0_21:4.5
	DMA-0_20:4.4
	DMA-0_19:4.4
	DMA-0_18:4.4
	RO_5_07:4.3
	DMA-0_17:4.3
	DMA-0_16:4.2
	HAL_merge:4.1.10.5
	DMA-0_15-4_4_2_6:4.1.10.5
	DMA-0_15-4_4_2_5:4.1.10.4
	DMA-0_15-4_4_2_4:4.1.10.3
	DMA-0_15-4_4_2_3:4.1.10.3
	DMA-0_15-4_4_2_2:4.1.10.2
	DMA-0_15-4_4_2_1:4.1.10.1
	HAL_bp:4.1
	HAL:4.1.0.10
	DMA-0_15:4.1
	DMA-0_14:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	DMA-0_13:4.1
	dcotton_autobuild_BaseSW:4.1
	nturton_DMA-0_12:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	troddis_DMA-0_13:4.1.4.1
	nicke_DMA_0_11:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2014.10.18.19.18.06;	author jlee;	state Exp;
branches;
next	4.4;
commitid	ZCUMqbwOugLqvIUx;

4.4
date	2009.11.28.22.19.36;	author jlee;	state Exp;
branches;
next	4.3;

4.3
date	2003.01.30.16.10.49;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	2002.12.13.18.48.12;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.35.43;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1
	4.1.10.1;
next	;

4.1.1.1
date	96.11.05.09.35.43;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.22.35;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.09.18.12.16.51;	author troddis;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.50.24;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.45.14;	author nturton;	state Exp;
branches;
next	;

4.1.10.1
date	2001.11.27.14.57.57;	author bavison;	state Exp;
branches;
next	4.1.10.2;

4.1.10.2
date	2002.10.03.17.35.13;	author bavison;	state Exp;
branches;
next	4.1.10.3;

4.1.10.3
date	2002.10.15.19.15.35;	author bavison;	state Exp;
branches;
next	4.1.10.4;

4.1.10.4
date	2002.11.22.16.53.30;	author bavison;	state Exp;
branches;
next	4.1.10.5;

4.1.10.5
date	2002.12.13.17.25.01;	author bavison;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Fix sync callbacks for list-type DMA channels. Improve handling of Service_PreReset.
Detail:
  s/DMA - Fixed sync callback logic of list-type channels to match that used by buffer-type channels. Old logic would result in too many sync callbacks being made at the start of a transfer, followed by dmar_Gap becoming negative and (potentially) no sync callbacks being made for the remainder of the transfer.
  s/Front, s/ModHead, s/SWI - Make SWI handler refuse to service any SWI following Service_PreReset. This helps avoid bad things happening should a client try to access DMA channels/transfers after we've reset everything during PreReset (although really it's our own fault for not telling the clients about the controller reset)
  Resources/UK/Messages, s/Errors - Define the error that we return when called following Service_PreReset.
Admin:
  Tested on Raspberry Pi


Version 0.21. Tagged as 'DMA-0_21'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Front

;-----------------------------------------------------------------------------
;       Structures and declarations.
;

 [ :LNOT: HAL
; Numbers of channels
NoLogicalChannels       * 7
NoPhysicalChannels      * 6
 ]

; Logical channel block.
                        ^ 0
 [ HAL
lcb_Next                # 4                     ; Link to next block.
lcb_ChannelNo           # 4                     ; Logical channel number.
 ]
lcb_Flags               # 4                     ; Logical channel flags (see below).
lcb_Vector              # 4                     ; Pointer to 5 routine addresses.
lcb_R12                 # 4                     ; Value to pass in r12.
lcb_Queue               # 4                     ; Pointer to physical channel DMA queue.
 [ HAL
lcb_PeripheralRead      # 4                     ; Read address of peripheral device.
lcb_PeripheralWrite     # 4                     ; Write address of peripheral device.
 |
lcb_Physical            # 4                     ; Physical channel number.
 ]

LCBSize                 * :INDEX:@@

; Logical channel flags.
lcbf_TransferSize       * &0000001F             ; Mask off DMA transfer size.
lcbf_DMASpeed           * &00000060             ; Mask off DMA cycle speed.
 [ HAL
lcbf_PostDelay          * &00000F00             ; Post-transfer channel delay.
lcbf_NoBursts           * &00001000             ; Disable burst transfers.
lcbf_NoClockSync        * &00002000             ; Disable DMA request synchronisation to clock.
 ]
lcbf_Blocked            * &40000000             ; Logical channel blocked.
 [ :LNOT: HAL
lcbf_Registered         * &80000000             ; Logical channel has been registered.
 ]

; Vector offsets.
                        ^ 0
vector_Enable           # 4                     ; Called to enable device DMA.
vector_Disable          # 4                     ; Called to disable device DMA.
vector_Start            # 4                     ; Called before a DMA is started.
vector_Completed        # 4                     ; Called when a DMA is completed.
vector_DMASync          # 4                     ; Called after every N bytes transferred.

; Page table entry.
                        ^ 0
ptab_Len                # 4                     ; Length of transfer in this page.
ptab_Logical            # 4                     ; Logical address to start transfer.
ptab_Physical           # 4                     ; Corresponding physical address.

PTABSize                * :INDEX:@@

; Physical channel DMA queue.
                        ^ 0
dmaq_Head               # 4                     ; Pointer to DMA queue head.
dmaq_Tail               # 4                     ; Pointer to DMA queue tail.
dmaq_Active             # 4                     ; Pointer to DMA active on physical channel.
dmaq_LastBuff           # 4                     ; Pointer to last buffer programmed.
 [ HAL ; extends structure to hold all our info pertaining to a physical channel
dmaq_DMADevice          # 4                     ; Pointer to HAL device for this physical channel.
dmaq_DeviceFeatures     # 4                     ; Flags word / block pointer returned from Features call.
dmaq_Usage              # 4                     ; Number of logical channels using this physical channel.
dmaq_BounceBuff         # PTABSize              ; Fake page table entry pointing at bounce buffer.
dmaq_DescBlockLogical   # 4                     ; Transfer descriptors block (list devices): logical address.
dmaq_DescBlockPhysical  # 4                     ;     "         "        "     "      "      physical address.
dmaq_DescBlockCount     # 4                     ;     "         "        "     "    "  number of entries used.
                        # (((:INDEX:@@)+3):AND::NOT:15)+12-(:INDEX:@@)
dmaq_Trampoline         # 52                    ; Qword-aligned device vector trampoline for physical channel.
                        # (((:INDEX:@@)+15):AND::NOT:15)-(:INDEX:@@)
 ]

DMAQSize                * :INDEX:@@

 [ HAL
; DMA controller structure.
                        ^ 0
ctrlr_Next              # 4                     ; Link to next block.
ctrlr_Device            # 4                     ; HAL device for this controller.
ctrlr_PhysicalChannels  # 4                     ; Number of physical channels and therefore queues.
ctrlr_DMAQueues         # DMAQSize * 0          ; Array of DMA queue information.

CtrlrSize               * :INDEX: @@
 ]

; Data held for a programmed buffer.
                        ^ 0
buff_Ptp                # 4                     ; Pointer to page table entry.
buff_Off                # 4                     ; Offset into scatter list entry.
buff_Len                # 4                     ; Length of transfer.

BuffDataSz              * :INDEX:@@

; DMA request block.
                        ^ 0
 [ HAL
dmar_Magic              # 4                     ; Magic word check, since tag = request block pointer now.
dmar_MagicWord          * &72616D64             ; = "dmar"
dmar_TagBits01          # 4                     ; Should match bits 0 and 1 of tag.
dmar_Queue              # 4                     ; The DMA queue to which we belong.
 |
dmar_Tag                # 4                     ; DMA tag.
dmar_PhysBits           * &00000007             ; Bottom 3 bits of tag hold physical channel number.
 ]
dmar_Prev               # 4                     ; Pointer to previous DMA request in queue.
dmar_Next               # 4                     ; Pointer to next DMA request in queue.
dmar_Flags              # 4                     ; DMA request flags (see below).
dmar_R11                # 4                     ; Value to be passed in r11.
dmar_ScatterList        # 4                     ; Scatter list pointer.
dmar_Length             # 4                     ; Length of transfer left (in bytes). Excludes data programmed
                                                ; into buffer(s), reduced under interrupt for list devices.
dmar_BuffSize           # 4                     ; Size of circular buffer (if used).
dmar_SyncGap            # 4                     ; Number of bytes between DMASync calls (if used).
dmar_Done               # 4                     ; Amount of transfer done (as reflected in scatter list).
dmar_LCB                # 4                     ; Pointer to logical channel block.
dmar_PageTable          # 4                     ; Pointer to page table.
dmar_PageCount          # 4                     ; Number of entries in page table.
 [ HAL
dmar_CurrBuff           # BuffDataSz            ; Data programmed into current buffer.
dmar_NextBuff           # BuffDataSz            ; Data programmed into next buffer.
 |
dmar_BuffA              # BuffDataSz            ; Data programmed into buff A.
dmar_BuffB              # BuffDataSz            ; Data programmed into buff B.
 ]
dmar_BuffLen            # 4                     ; Amount of circular buffer left (if used).
dmar_ProgGap            # 4                     ; Amount of gap left to program (if used).
dmar_PhysSyncGap        * dmar_ProgGap          ; Reuse for low-level sync gap to use for list-type devices.
dmar_Gap                # 4                     ; Amount of gap completed (if used).
 [ HAL
dmar_DoneAtStart        # 4                     ; Amount of transfer done at last call to SetListTransfer.
 ]

DMARSize                * :INDEX:@@

; DMA request flags.
dmarf_Direction         * &00000001             ; Direction bit (0=read, 1=write).
dmarf_Circular          * &00000002             ; Scatter list is a circular buffer.
dmarf_Sync              * &00000004             ; Call DMASync callback.
dmarf_DontUpdate        * &00000008             ; Don't update scatter list even if non-circular.
dmarf_Infinite          * &00000010             ; Transfer is infinite length (must be circular).
dmarf_Uncacheable       * &04000000             ; Pages for transfer have been marked as uncacheable.
dmarf_Halted            * &08000000             ; Transfer has been halted due to Service_PagesUnsafe.
dmarf_Blocking          * &10000000             ; DMA request blocking logical queue.
dmarf_BeenActive        * &20000000             ; DMA request has been active before.
dmarf_Suspended         * &40000000             ; DMA request suspended.
dmarf_Completed         * &80000000             ; DMA request has completed.

; Free block.
                        ^ 0
free_Next               # 4                     ; Pointer to next free block.
free_Size               # 4                     ; Size of this free block.

; DMA request block buffer.
                        ^ 0
block_Next              # 4                     ; Pointer to next DMA request buffer block.
 [ HAL
block_Data              # 6 * DMARSize          ; Number of DMA request blocks that we allocate together
 |                                              ; is somewhat arbitrary.
block_Data              # NoPhysicalChannels * DMARSize
 ]

BlockSize               * :INDEX:@@

 [ HAL
BOUNCEBUFFSIZE          * 1:SHL:16
 |
IOMD_IOxCURA            * IOMD_IO0CURA-IOMD_IO0CURA
IOMD_IOxENDA            * IOMD_IO0ENDA-IOMD_IO0CURA
IOMD_IOxCURB            * IOMD_IO0CURB-IOMD_IO0CURA
IOMD_IOxENDB            * IOMD_IO0ENDB-IOMD_IO0CURA
IOMD_IOxCR              * IOMD_IO0CR-IOMD_IO0CURA
IOMD_IOxST              * IOMD_IO0ST-IOMD_IO0CURA
 ]

PAGESHIFT       * 12
PAGESIZE        * 1:SHL:PAGESHIFT

ptabf_Unsafe            * &80000000             ; Combined with ptab_Len to mark a page as unsafe.

Memory_LogicalGiven     * 1:SHL:9               ; OS_Memory flags.
Memory_PhysicalGiven    * 1:SHL:10
Memory_PhysicalWanted   * 1:SHL:13
Memory_SetUncacheable   * 2:SHL:14
Memory_SetCacheable     * 3:SHL:14

;-----------------------------------------------------------------------------
;       Workspace layout.
;
workspace       RN      R12
                ^       0,workspace
wsorigin                # 0
 [ international
message_file_open       # 4                             ; Non-0 => message file open.
message_file_block      # 4*4                           ; Message file id block.
 ]
 [ HAL
NextLogicalChannel      # 4                             ; Next logical channel to assign.
ChannelList             # 4                             ; Pointer to list of logical channel blocks.
CtrlrList               # 4                             ; Pointer to list of DMA controllers.
 |
ChannelBlock            # NoLogicalChannels * LCBSize   ; Logical channel blocks.
DMAQueues               # NoPhysicalChannels * DMAQSize ; DMA queue information.
 ]
FreeBlock               # 4                             ; Pointer to linked list of free blocks.
DMABlockHead            # 4                             ; Pointer to list of DMA request block buffers.
TagIndex                # 4                             ; Index for generating DMA request tags.
UnsafePageTable         # 4                             ; Pointer to 3-word per entry table of unsafe pages.
UnsafePageCount         # 4                             ; Number of entries in UnsafePageTable.
 [ HAL
Header                  # 4*3                           ; Titles of table headers in *DMAChannels.
Width                   # 1*3                           ; Widths of table columns in *DMAChannels.
PreReset                # 1                             ; Nonzero if Service_PreReset seen
 AlignSpace
Scratch                 # 256                           ; Temporary workspace.
 ]
 [ debugtab
DebugTableCur           # 4
DebugTable              # 1024
DebugTableEnd           # 0
 ]

max_running_work   *       :INDEX:@@

        ! 0, "DMA module workspace is ":CC:(:STR:(:INDEX:@@)):CC:" bytes"

        END

@


4.4
log
@DMAManager fixes & improvements
Detail:
  DMA.s, in DMAForceActivate: Support for the NoInitIRQ flag for interrupt-driven buffer-type channels (API 1+)
  DMA.s, 'testloop': Fix handling of interrupt-driven buffer-type channels so DMAManager doesn't immediately crash or malfunction
  DMA.s, 'overrun', 'earlyoverrun', 'nooverrun': Fix handling of interrupt-driven buffer-type channels so IRQ state is cleared before the next stage of the transfer is programmed (to avoid missing IRQs)
  DMA.s, 'finished': Fix handling of interrupt-driven buffer-type channels so R8 is loaded with the logical channel block ptr, as expected by subsequent function calls.
  Front.s: Make dmaq_Trampoline larger to allow it to contain the HAL device ptr
  GetAll.s: Add Hdr:HALEntries to GET list, as required by 'ClaimVectors' fix in ModHead.s
  ModHead.s: Update controller handling code to cope with API versions 0.1 (TestIRQ2) & 1 ('Deallocate' passed channel device ptr)
  ModHead.s: Fix 'ClaimVectors' to call HAL_IRQEnable to enable IRQs for the detected channels/controllers.
  ModHead.s: Fix IRQ handler trampolines so that they call HALDevice_TestIRQ on the channel instead of branching to a random address in memory
  SWI.s: Support for controller API 1 (pass channel device ptr to 'Deallocate' in R2)
  hdr/DMADevice: Extra flags & entries for new DMA controller & buffer API versions
Admin:
  Tested on rev C2 beagleboard with the incoming HAL DMA driver. API revisions are documented in more detail on the ROOL wiki.


Version 0.18. Tagged as 'DMA-0_18'
@
text
@d233 1
@


4.3
log
@  A few weeks' dedicated work, mainly to support UDMA hard discs.
Detail:
  Features:
  * Supports physical channels using a new type of HAL device (&303) where
    the hardware takes a pointer to a scatter list up front to effect the
    entire transfer, and which may report hardware errors at any time.
    For full details, see Doc.HAL_DMAAPI.
  * Page tables are no longer generated when using a bounce-buffer, since
    they aren't actually any use except in determining if unsafe pages
    intersect with the transfer. Instead, bounce-buffer transfers are halted
    whenever any page becomes unsafe, and no new bounce-buffer transfers can
    be started while any pages are unsafe.
  * For both bounce-buffer and list-type devices, the Activate entry is
    now called after the transfer is programmed (with SetCurrentTransfer
    or SetListTransfer), since this is likely to be more useful for these
    types of devices. Note that for interrupt-driven buffer devices, it
    is still assumed that the default state of the device is to be in an
    underrun interrupt state, so the transfer is not programmed until the
    first time the interrupt routine is entered.
  * Now ensures that scatter list start addresses and lengths are all
    multiples of the transfer unit size (this check is done during page
    table construction, so will be returned via the Completed callback,
    rather than directly from DMA_QueueTransfer like the total length check).
  * When there is no interrupt associated with a physical channel (both for
    buffer- or list-type devices), if the polling of the hardware within SWI
    DMA_ExamineTransfer detects that the transfer has completed, then
    the transfer is shut down in the same was as though an interrupt had
    happened (ie the Completed callback is called without an error).
  * Added SWI DMA_AllocateLogicalChannels to act as a centralised allocator
    for session-unique logical DMA channels. Primarily a service to
    third-party authors of "HAL" devices.
  Bugfixes:
  * Now handles Service_MessageFileClosed to allow safe MessageTrans lookups
    in the background.
  * If a controller device was removed before its constituent channel
    devices, removing the channel device would abort.
  * Interrupt trampoline construction was wrong, the address of the
    interrupt handler code wasn't relocated. Also, non-vectored interrupts
    weren't correctly handled.
  * Transfers suspended by Service_PagesUnsafe weren't blocking the logical
    channel, so you could queue another transfer on the same channel and it
    would start immediately (although transfers already queued before the
    service call wouldn't have been started).
  * Transfers which had completed within Service_PagesUnsafe handler weren't
    being delinked from the queue.
  * Service_PagesSafe wasn't handled properly, meaning that none of the
    transfers that were halted by Service_PagesUnsafe were restarted! This
    was due to the use of routines in common with DMA_SuspendTransfer and
    DMA_ResumeTransfer which started with the first HALised version - these
    suspend a logical channel, unlike the original IOMD code which
    effectively suspends a physical channel. Thus the code to search for
    transfers to restart needs to be quite different, since the physical
    channel may be idle, or occupied with another logical channel, and
    each physical channel may have multiple associated logical channels
    that were on unsafe transfers!
  * When you deregistered a logical channel (including during module death)
    the Completed callback was called for all queued transfers, incorrectly
    including those that had not yet had the matching Start callback called.
  * There was a stack imbalance in the buffer device interrupt handler
    because the retained part of the old code assumed Hdr:Proc stack
    management, which the new code doesn't use (it's entered with the return
    address on the stack).
Admin:
  Tested with UDMA test harnesses on Tungsten (ADFS not yet complete).

Version 0.17. Tagged as 'DMA-0_17'
@
text
@d90 1
a90 1
dmaq_Trampoline         # 48                    ; Qword-aligned device vector trampoline for physical channel.
@


4.2
log
@Folded in HAL branch.

Version 0.16. Tagged as 'DMA-0_16'
@
text
@d83 1
a83 1
dmaq_DeviceFeatures     # 4                     ; Flags word returned from Features call.
d86 3
d131 2
a132 1
dmar_Length             # 4                     ; Length of transfer left (in bytes).
d135 1
a135 1
dmar_Done               # 4                     ; Amount of transfer done.
d148 1
d150 3
d218 1
@


4.1
log
@Initial revision
@
text
@d21 2
d25 1
d29 4
d34 1
a34 1
lcb_Vector              # 4                     ; Pointer to 4 routine addresses.
d36 5
a40 1
lcb_Queue               # 4                     ; Pointer to DMA queue.
d42 1
d49 5
d55 1
d57 1
d67 8
d81 9
d93 11
d114 6
d122 1
d135 4
d141 1
d152 2
a153 1
dmarf_Infinite          * &00000008             ; Transfer is infinite length (must be circular).
d166 1
a166 1
; DMA request buffer block.
d169 3
d173 1
d177 3
d186 1
a190 8
; Page table entry.
                        ^ 0
ptab_Len                # 4                     ; Length of transfer in this page.
ptab_Logical            # 4                     ; Logical address to start transfer.
ptab_Physical           # 4                     ; Corresponding physical address.

PTABSize                * :INDEX:@@

d209 4
d215 1
d221 5
a225 3
 [ :LNOT: IOMD
IOMDFirst               * IOMD_DMATCR
IOMDArea                # IOMD_DMAMSK-IOMDFirst+4
@


4.1.10.1
log
@  Commit of the HALised DMA Manager code, as it was when the IA division
  was closed.
Detail:
  This didn't get far beyond the design stage, but what there is is best kept
  safe in CVS in case it gets accidentally deleted again...
Admin:
  Don't even think about trying to build this version.

Version 0.15, 4.4.2.1. Tagged as 'DMA-0_15-4_4_2_1'
@
text
@a20 45
 [ HAL
; HAL's DMA device public interface
                        ^ 0
DMADev_Type             # 2
DMADev_ID               # 2
DMADev_Location         # 4
DMADev_Version          # 4
DMADev_Description      # 4
DMADev_Address          # 4
                        # 12
DMADev_DMAActivate      # 4
DMADev_DMADeactivate    # 4
DMADev_DMAReset         # 4
DMADev_DMASleep         # 4
DMADev_DMAClaim         # 4
DMADev_DMARelease       # 4
                        # 8
DMADev_PhysChannel      # 4
DMADev_DMAFeatures      # 4
DMADev_DMAEnumeratePhysical # 4
DMADev_DMAEnumerateLogical # 4
DMADev_DMAAllocate      # 4
DMADev_DMADeallocate    # 4
DMADev_DMASetSize       # 4
DMADev_DMASetSpeed      # 4
DMADev_DMASetDirection  # 4
DMADev_DMASetAddress    # 4
DMADev_DMASetDMARequest # 4
DMADev_DMASetBurstEnable # 4
DMADev_DMASetSyncBypass # 4
DMADev_DMASetPostTransferDelay # 4
DMADev_DMASetTransfer   # 4
DMADev_DMASetTransfer2  # 4
DMADev_DMATransferState # 4
DMADev_DMATransferState2 # 4
DMADev_DMAIRQEnable     # 4
DMADev_DMAIRQDisable    # 4
DMADev_DMAIRQClear      # 4
DMADev_DMAStatus        # 4
DMADev_DMAEnable        # 4
DMADev_DMADisable       # 4
 ]

 [ :LNOT: HAL
; Numbers of channels
a22 1
 ]
d27 1
a27 1
lcb_Vector              # 4                     ; Pointer to 5 routine addresses.
d29 1
a29 1
lcb_Queue               # 4                     ; Pointer to physical channel DMA queue.
a30 5
 [ HAL
lcb_DMADevice           # 4                     ; Pointer to HAL device struct for this physical channel.
lcb_PeripheralRead      # 4                     ; Read address of peripheral device.
lcb_PeripheralWrite     # 4                     ; Write address of peripheral device.
 ]
a36 5
 [ HAL
lcbf_PostDelay          * &00000F00             ; Post-transfer channel delay.
lcbf_NoBursts           * &00001000             ; Disable burst transfers.
lcbf_NoClockSync        * &00002000             ; Disable DMA request synchronisation to clock.
 ]
a80 4
 [ HAL
dmar_CurrBuff           # BuffDataSz            ; Data programmed into current buffer.
dmar_NextBuff           # BuffDataSz            ; Data programmed into next buffer.
 |
a82 1
 ]
d106 1
a106 1
; DMA request block buffer.
a108 3
 [ HAL
block_Data              # 6 * DMARSize          ; Number of DMA request blocks that we allocate together
 |                                              ; is somewhat arbitrary.
a109 1
 ]
a112 1
 [ :LNOT: HAL
a118 1
 ]
a148 9
 [ HAL
ChannelBlock            # 4                             ; Pointer to array of logical channel blocks.
LogicalList             # 4                             ; Pointer to HAL's list of supported logical channels.
LogicalChannels         # 4                             ; Number of logical channels.
VectorTramps            # 4                             ; Trampolines for device vectors.
DMAQueues               # 4                             ; Pointer to array of DMA queue information.
DMADevices              # 4                             ; Pointer to HAL's list of DMA device pointers.
PhysicalChannels        # 4                             ; Number of physical channels / HAL devices.
 |
a150 1
 ]
d156 4
@


4.1.10.2
log
@  An intermediate version.
Detail:
  Finally, all IOMD dependencies have been expunged, and the module will
  build again. Any specific support for new features of other DMA controllers
  has yet to be added, though. New exported header added, for use by DMA
  device code.
Admin:
  Untested. However, should theoretically work if someone were to write the
  appropriate routines for the IOMD HAL.

Version 0.15, 4.4.2.2. Tagged as 'DMA-0_15-4_4_2_2'
@
text
@d21 43
d76 1
a80 2
 |
lcb_Physical            # 4                     ; Physical channel number.
a109 6
 [ HAL ; extends structure to hold all our info pertaining to a physical channel
dmaq_DMADevice          # 4                     ; Pointer to HAL device for this physical channel.
                        # (((:INDEX:@@)+3):AND::NOT:15)+12-(:INDEX:@@)
dmaq_Trampoline         # 48                    ; Qword-aligned device vector trampoline for physical channel.
                        # (((:INDEX:@@)+15):AND::NOT:15)-(:INDEX:@@)
 ]
a122 6
 [ HAL
dmar_Magic              # 4                     ; Magic word check, since tag = request block pointer now.
dmar_MagicWord          * &72616D64             ; = "dmar"
dmar_TagBits01          # 4                     ; Should match bits 0 and 1 of tag.
dmar_Queue              # 4                     ; The DMA queue to which we belong.
 |
a124 1
 ]
d220 1
@


4.1.10.3
log
@  Just enough support for floppy DMA transfer to work on Tungsten.
Detail:
  * Supports DMA controllers with no interrupts (ie those that need a bounce
    buffer).
  * Restructured interface to HAL to separate the concepts of a DMA controller
    device and a DMA channel device.
  * Bugfixes to handling of single-buffered channels.
  * Updated Doc.HAL_DMAAPI.
Admin:
  Tested with Kevin's ADFS.

Version 0.15, 4.4.2.3. Tagged as 'DMA-0_15-4_4_2_3'
@
text
@a61 8
; Page table entry.
                        ^ 0
ptab_Len                # 4                     ; Length of transfer in this page.
ptab_Logical            # 4                     ; Logical address to start transfer.
ptab_Physical           # 4                     ; Corresponding physical address.

PTABSize                * :INDEX:@@

a69 3
dmaq_DeviceFeatures     # 4                     ; Flags word returned from Features call.
dmaq_Usage              # 4                     ; Number of logical channels using this physical channel.
dmaq_BounceBuff         # PTABSize              ; Fake page table entry pointing at bounce buffer.
d149 1
a149 3
 [ HAL
BOUNCEBUFFSIZE          * 1:SHL:16
 |
d160 8
@


4.1.10.4
log
@  One new feature, required by ADFS, and lots of silly bugfixes.
Detail:
  * Flag bit 3 passed to DMA_QueueTransfer indicates that the DMA Manager
    shouldn't update the scatter list itself, even when a circular transfer
    is not specifier
  * When using a bounce buffer, the source/destination isn't marked
    uncacheable any more
  * r2 was being corrupted by the call to the device Reset entry
  * Flags passed to device SetOptions entry were always 0, which meant that
    you could never write to any device
  * Test for whether to write to the bounce buffer was wrong in two ways
  * Updating the scatter list was wrong if the amount to update by was
    larger than the first entry (ie after a bounce buffer had been
    completed) - the whole difference was applied to the first entry
Admin:
  Tested in use with ADFS.

Version 0.15, 4.4.2.5. Tagged as 'DMA-0_15-4_4_2_5'
@
text
@d136 1
a136 2
dmarf_DontUpdate        * &00000008             ; Don't update scatter list even if non-circular.
dmarf_Infinite          * &00000010             ; Transfer is infinite length (must be circular).
@


4.1.10.5
log
@  Lots of improvements, working towards support for UDMA etc.
Detail:
  * No longer uses temporay HAL DMA entry points, all hardware access is
    accomplished using device entry points.
  * Supports multiple DMA controllers, including dynamic addition and
    removal of controllers (using OS_Hardware 4 and Service_Hardware).
  * Added *DMAChannels, which enumerates the currently registered DMA
    channels, listed according to physical location.
  * Logical channel blocks are dynamically allocated (as a requirement of
    the above changes) so logical channel handles are now pointers, no
    longer an array index. Just so you know.
  * Removed now-obsolete EnumerateLogical entry from controller device API.
  * Added pointer-to-controller-device item in publically visible part of
    channel device structure.
  * Moved memory-to-memory channel device entries to end of channel device
    structure (I'm considering removing them).
  * Added support for GPA debugging listing (requires BuildSys 3.86).
Admin:
  Tested on Tungsten (ie floppies still work).

Version 0.15, 4.4.2.6. Tagged as 'DMA-0_15-4_4_2_6'
@
text
@a28 4
 [ HAL
lcb_Next                # 4                     ; Link to next block.
lcb_ChannelNo           # 4                     ; Logical channel number.
 ]
d34 1
a51 1
 [ :LNOT: HAL
a52 1
 ]
a87 11
 [ HAL
; DMA controller structure.
                        ^ 0
ctrlr_Next              # 4                     ; Link to next block.
ctrlr_Device            # 4                     ; HAL device for this controller.
ctrlr_PhysicalChannels  # 4                     ; Number of physical channels and therefore queues.
ctrlr_DMAQueues         # DMAQSize * 0          ; Array of DMA queue information.

CtrlrSize               * :INDEX: @@
 ]

d194 6
a199 2
ChannelList             # 4                             ; Pointer to list of logical channel blocks.
CtrlrList               # 4                             ; Pointer to list of DMA controllers.
a208 6
 [ HAL
Header                  # 4*3                           ; Titles of table headers in *DMAChannels.
Width                   # 1*3                           ; Widths of table columns in *DMAChannels.
 AlignSpace
Scratch                 # 256                           ; Temporary workspace.
 ]
@


4.1.4.1
log
@DMA changes for Phoebe (mostly remapping of channels).
@
text
@d21 2
a22 5
NoLogicalChannels       * 11
NoPhysicalChannels      * 11                    ; incl. sound & PCI
NoIOChannels            * 8                     ; no. of standard I/O DMA channels

VIDC_Sound_DMA_In       * 8
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
