head	4.5;
access;
symbols
	DMA-0_23:4.5
	DMA-0_22:4.4
	DMA-0_21:4.4
	DMA-0_20:4.4
	DMA-0_19:4.3
	DMA-0_18:4.3
	RO_5_07:4.2
	DMA-0_17:4.2
	DMA-0_16:4.1
	HAL_merge:1.1.2.3
	DMA-0_15-4_4_2_6:1.1.2.3
	DMA-0_15-4_4_2_5:1.1.2.2
	DMA-0_15-4_4_2_4:1.1.2.2
	DMA-0_15-4_4_2_3:1.1.2.2
	DMA-0_15-4_4_2_2:1.1.2.1
	HAL:1.1.0.2;
locks; strict;
comment	@# @;


4.5
date	2015.11.07.17.23.37;	author rool;	state Exp;
branches;
next	4.4;
commitid	URf8Qdi3NdYRubIy;

4.4
date	2013.01.20.12.18.31;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	THRcEfGlI1hZCWAw;

4.3
date	2009.11.28.22.19.34;	author jlee;	state Exp;
branches;
next	4.2;

4.2
date	2003.01.30.16.10.48;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	2002.12.13.18.48.11;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.03.17.35.12;	author bavison;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.10.03.17.35.12;	author bavison;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.10.15.19.15.34;	author bavison;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.12.13.17.25.00;	author bavison;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Add support for double buffered NoInitIRQ type DMA controllers
Detail:
  Preprogram the current and next transfers before kicking off the first. Note that it is no longer possible to infer from the status call whether it's a double or single buffered controller, so a new HAL device flag is added to signal this. The new flag is only required for NoInitIRQ type DMA controllers, but other double buffered controllers may set it for information purposes.
Admin:
  Submission from Elesar. Tested on Titanium HAL.

Version 0.23. Tagged as 'DMA-0_23'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Public interface (ie interface to DMAManager) of DMA HAL devices

        GET     hdr:HALDevice

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

 [ :LNOT: :DEF: Included_Hdr_DMADevice
                       GBLL Included_Hdr_DMADevice
Included_Hdr_DMADevice SETL {TRUE}

; Device for each DMA controller

                                ^       0
                                #       HALDeviceSize
HALDevice_DMACFeatures          #       4
HALDevice_DMACEnumerate         #       4
HALDevice_DMACAllocate          #       4
HALDevice_DMACDeallocate        #       4
HALDevice_DMAC_Size             *       :INDEX: @@
; Extra data for API 0.1
HALDevice_DMACTestIRQ2          #       4
HALDevice_DMAC_Size_0_1         *       :INDEX: @@

; Device for each physical DMA channel (buffer type)

                                ^       0
                                #       HALDeviceSize
HALDevice_DMAFeatures           #       4
HALDevice_DMAController         #       4
HALDevice_DMAAbort              #       4
HALDevice_DMASetOptions         #       4
HALDevice_DMASetCurrentTransfer #       4
HALDevice_DMASetNextTransfer    #       4
HALDevice_DMATransferState      #       4
HALDevice_DMAIRQClear           #       4
HALDevice_DMAStatus             #       4
HALDevice_DMASetCurrentTransfer2 #      4
HALDevice_DMASetNextTransfer2   #       4
HALDevice_DMATransferState2     #       4
HALDevice_DMA_Size              *       :INDEX: @@

DMAFeaturesFlag_DualAddress             *       1 :SHL: 0       ; reserved for indicating memory-to-memory channels etc
DMAFeaturesFlag_NotCircular             *       1 :SHL: 1       ; (list type only)
DMAFeaturesFlag_NotInfinite             *       1 :SHL: 2       ; (list type only)
DMAFeaturesFlag_NoSyncIRQs              *       1 :SHL: 3       ; (list type only)
DMAFeaturesFlag_NoInitIRQ               *       1 :SHL: 4       ; doesn't generate an IRQ if 'Activate' is called with no pending transfers (API 1.0+)
DMAFeaturesFlag_DoubleBuffered          *       1 :SHL: 5       ; implements SetNextTransfer, used in conjunction with NoInitIRQ

DMASetOptionsFlag_Write                 *       1 :SHL: 0
DMASetOptionsShift_Width                *       1
DMASetOptionsMask_Width                 *       31 :SHL: DMASetOptionsShift_Width
DMASetOptionsShift_Speed                *       6
DMASetOptionsMask_Speed                 *       7 :SHL: DMASetOptionsShift_Speed
DMASetOptionsShift_PostDelay            *       9
DMASetOptionsMask_PostDelay             *       15 :SHL: DMASetOptionsShift_PostDelay
DMASetOptionsFlag_NoBursts              *       1 :SHL: 13
DMASetOptionsFlag_NoClockSync           *       1 :SHL: 14
DMASetOptionsFlag_Circular              *       1 :SHL: 15      ; (list type only)

DMASetTransferFlag_Stop                 *       1 :SHL: 0       ; raise TC after this transfer

DMAStatusFlag_NoUnstarted               *       1 :SHL: 0       ; there are no transfers programmed but not yet started
DMAStatusFlag_Overrun                   *       1 :SHL: 1       ; this channel has not yet been used, or is over/underrunning
DMAStatusFlag_EarlyOverrun              *       1 :SHL: 2       ; this channel over/underran during the last interrupt routine

; Device for each physical DMA channel (list type)

                                ^       HALDevice_DMASetCurrentTransfer ; same names up to here
HALDevice_DMASetListTransfer    #       4
HALDevice_DMAListTransferProgress #     4
HALDevice_DMAListTransferStatus #       4
HALDevice_DMACurtailListTransfer #      4
HALDevice_DMAL_Size             *       :INDEX: @@

                                ^       0
DMAFeaturesBlock_Flags          #       4                       ; bit fields per DMAFeaturesFlag above
DMAFeaturesBlock_BlockSize      #       4
DMAFeaturesBlock_BlockAlign     #       4
DMAFeaturesBlock_BlockBound     #       4
DMAFeaturesBlock_MaxTransfers   #       4
DMAFeaturesBlock_TransferLimit  #       4
DMAFeaturesBlock_TransferBound  #       4
DMAFeaturesBlockSize            *       :INDEX: @@

DMAListTransferStatusFlag_MemoryError   *       1 :SHL: 0
DMAListTransferStatusFlag_DeviceError   *       1 :SHL: 1

 ]

        OPT     OldOpt
        END
@


4.4
log
@API enhancements and fixes
ModHead.s: Allow list type channels to specify NoInitIRQ. Respect the flag when deciding whether or not to unmask the IRQ at the HAL level
DMA.s: Use the cached device flags rather than incurring a function call, refactor the call to DMASetListTransfer to use the CallHAL macro
SWI.s: The transfer unit size check was against the wrong register
hdr/DMADevice: Comment updated to reflect wider flag use

Tested with IOMD HAL, no longer aborts on module init because the channel interrupt fires before any lists have been prepared (it does have an initial IRQ), with various transfer sizes.

Version 0.20. Tagged as 'DMA-0_20'
@
text
@d62 2
a63 1
DMAFeaturesFlag_NoInitIRQ               *       1 :SHL: 4       ; Doesn't generate an IRQ if 'Activate' is called with no pending transfers (API 1.0+)
@


4.3
log
@DMAManager fixes & improvements
Detail:
  DMA.s, in DMAForceActivate: Support for the NoInitIRQ flag for interrupt-driven buffer-type channels (API 1+)
  DMA.s, 'testloop': Fix handling of interrupt-driven buffer-type channels so DMAManager doesn't immediately crash or malfunction
  DMA.s, 'overrun', 'earlyoverrun', 'nooverrun': Fix handling of interrupt-driven buffer-type channels so IRQ state is cleared before the next stage of the transfer is programmed (to avoid missing IRQs)
  DMA.s, 'finished': Fix handling of interrupt-driven buffer-type channels so R8 is loaded with the logical channel block ptr, as expected by subsequent function calls.
  Front.s: Make dmaq_Trampoline larger to allow it to contain the HAL device ptr
  GetAll.s: Add Hdr:HALEntries to GET list, as required by 'ClaimVectors' fix in ModHead.s
  ModHead.s: Update controller handling code to cope with API versions 0.1 (TestIRQ2) & 1 ('Deallocate' passed channel device ptr)
  ModHead.s: Fix 'ClaimVectors' to call HAL_IRQEnable to enable IRQs for the detected channels/controllers.
  ModHead.s: Fix IRQ handler trampolines so that they call HALDevice_TestIRQ on the channel instead of branching to a random address in memory
  SWI.s: Support for controller API 1 (pass channel device ptr to 'Deallocate' in R2)
  hdr/DMADevice: Extra flags & entries for new DMA controller & buffer API versions
Admin:
  Tested on rev C2 beagleboard with the incoming HAL DMA driver. API revisions are documented in more detail on the ROOL wiki.


Version 0.18. Tagged as 'DMA-0_18'
@
text
@d62 1
a62 1
DMAFeaturesFlag_NoInitIRQ               *       1 :SHL: 4       ; Doesn't generate an IRQ if Activate is called with no pending transfers (buffer type only, API 1.0+)
d91 1
a91 1
DMAFeaturesBlock_Flags          #       4
@


4.2
log
@  A few weeks' dedicated work, mainly to support UDMA hard discs.
Detail:
  Features:
  * Supports physical channels using a new type of HAL device (&303) where
    the hardware takes a pointer to a scatter list up front to effect the
    entire transfer, and which may report hardware errors at any time.
    For full details, see Doc.HAL_DMAAPI.
  * Page tables are no longer generated when using a bounce-buffer, since
    they aren't actually any use except in determining if unsafe pages
    intersect with the transfer. Instead, bounce-buffer transfers are halted
    whenever any page becomes unsafe, and no new bounce-buffer transfers can
    be started while any pages are unsafe.
  * For both bounce-buffer and list-type devices, the Activate entry is
    now called after the transfer is programmed (with SetCurrentTransfer
    or SetListTransfer), since this is likely to be more useful for these
    types of devices. Note that for interrupt-driven buffer devices, it
    is still assumed that the default state of the device is to be in an
    underrun interrupt state, so the transfer is not programmed until the
    first time the interrupt routine is entered.
  * Now ensures that scatter list start addresses and lengths are all
    multiples of the transfer unit size (this check is done during page
    table construction, so will be returned via the Completed callback,
    rather than directly from DMA_QueueTransfer like the total length check).
  * When there is no interrupt associated with a physical channel (both for
    buffer- or list-type devices), if the polling of the hardware within SWI
    DMA_ExamineTransfer detects that the transfer has completed, then
    the transfer is shut down in the same was as though an interrupt had
    happened (ie the Completed callback is called without an error).
  * Added SWI DMA_AllocateLogicalChannels to act as a centralised allocator
    for session-unique logical DMA channels. Primarily a service to
    third-party authors of "HAL" devices.
  Bugfixes:
  * Now handles Service_MessageFileClosed to allow safe MessageTrans lookups
    in the background.
  * If a controller device was removed before its constituent channel
    devices, removing the channel device would abort.
  * Interrupt trampoline construction was wrong, the address of the
    interrupt handler code wasn't relocated. Also, non-vectored interrupts
    weren't correctly handled.
  * Transfers suspended by Service_PagesUnsafe weren't blocking the logical
    channel, so you could queue another transfer on the same channel and it
    would start immediately (although transfers already queued before the
    service call wouldn't have been started).
  * Transfers which had completed within Service_PagesUnsafe handler weren't
    being delinked from the queue.
  * Service_PagesSafe wasn't handled properly, meaning that none of the
    transfers that were halted by Service_PagesUnsafe were restarted! This
    was due to the use of routines in common with DMA_SuspendTransfer and
    DMA_ResumeTransfer which started with the first HALised version - these
    suspend a logical channel, unlike the original IOMD code which
    effectively suspends a physical channel. Thus the code to search for
    transfers to restart needs to be quite different, since the physical
    channel may be idle, or occupied with another logical channel, and
    each physical channel may have multiple associated logical channels
    that were on unsafe transfers!
  * When you deregistered a logical channel (including during module death)
    the Completed callback was called for all queued transfers, incorrectly
    including those that had not yet had the matching Start callback called.
  * There was a stack imbalance in the buffer device interrupt handler
    because the retained part of the old code assumed Hdr:Proc stack
    management, which the new code doesn't use (it's entered with the return
    address on the stack).
Admin:
  Tested with UDMA test harnesses on Tungsten (ADFS not yet complete).

Version 0.17. Tagged as 'DMA-0_17'
@
text
@d36 3
d62 1
@


4.1
log
@Folded in HAL branch.

Version 0.16. Tagged as 'DMA-0_16'
@
text
@d55 4
a58 1
DMAFeaturesFlag_CantSuspend             *       1 :SHL: 0       ; don't activate transfer until all of the scatter list is on safe pages
d69 1
d76 22
@


1.1
log
@file DMADevice was initially added on branch HAL.
@
text
@d1 76
@


1.1.2.1
log
@  An intermediate version.
Detail:
  Finally, all IOMD dependencies have been expunged, and the module will
  build again. Any specific support for new features of other DMA controllers
  has yet to be added, though. New exported header added, for use by DMA
  device code.
Admin:
  Untested. However, should theoretically work if someone were to write the
  appropriate routines for the IOMD HAL.

Version 0.15, 4.4.2.2. Tagged as 'DMA-0_15-4_4_2_2'
@
text
@a0 69
; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Public interface (ie interface to DMAManager) of a DMA HAL device

        GET     hdr:HALDevice

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

 [ :LNOT: :DEF: Included_Hdr_DMADevice
                       GBLL Included_Hdr_DMADevice
Included_Hdr_DMADevice SETL {TRUE}

                                ^       0
                                #       HALDeviceSize
HALDevice_DMA_EnumeratePhysical #       4
HALDevice_DMA_EnumerateLogical  #       4
HALDevice_DMA_Allocate          #       4
HALDevice_DMA_Deallocate        #       4
HALDevice_DMA_Features          #       4
HALDevice_DMA_SetOptions        #       4
HALDevice_DMA_SetCurrentTransfer #      4
HALDevice_DMA_SetNextTransfer   #       4
HALDevice_DMA_TransferState     #       4
HALDevice_DMA_SetCurrentTransfer2 #     4
HALDevice_DMA_SetNextTransfer2  #       4
HALDevice_DMA_TransferState2    #       4
HALDevice_DMA_IRQClear          #       4
HALDevice_DMA_Status            #       4
HALDevice_DMA_Enable            #       4
HALDevice_DMA_Disable           #       4
HALDevice_DMA_ChannelReset      #       4
HALDeviceDMASize                *       :INDEX: @@

DMAFeaturesFlag_CantSuspend             *       1 :SHL: 0       ; don't activate transfer until all of the scatter list is on safe pages

DMASetOptionsFlag_Write                 *       1 :SHL: 0
DMASetOptionsShift_Width                *       1
DMASetOptionsMask_Width                 *       31 :SHL: DMASetOptionsShift_Width
DMASetOptionsShift_Speed                *       6
DMASetOptionsMask_Speed                 *       7 :SHL: DMASetOptionsShift_Speed
DMASetOptionsShift_PostDelay            *       9
DMASetOptionsMask_PostDelay             *       15 :SHL: DMASetOptionsShift_PostDelay
DMASetOptionsFlag_NoBursts              *       1 :SHL: 13
DMASetOptionsFlag_NoClockSync           *       1 :SHL: 14

DMASetTransferFlag_Stop                 *       1 :SHL: 0       ; raise TC after this transfer

DMAStatusFlag_Interrupting              *       1 :SHL: 0       ; this channel is trying to generate an interrupt
DMAStatusFlag_Overrun                   *       1 :SHL: 1       ; this channel is over/underrunning
DMAStatusFlag_EarlyOverrun              *       1 :SHL: 2       ; this channel over/underran during the last interrupt routine

 ]

        OPT     OldOpt
        END
@


1.1.2.2
log
@  Just enough support for floppy DMA transfer to work on Tungsten.
Detail:
  * Supports DMA controllers with no interrupts (ie those that need a bounce
    buffer).
  * Restructured interface to HAL to separate the concepts of a DMA controller
    device and a DMA channel device.
  * Bugfixes to handling of single-buffered channels.
  * Updated Doc.HAL_DMAAPI.
Admin:
  Tested with Kevin's ADFS.

Version 0.15, 4.4.2.3. Tagged as 'DMA-0_15-4_4_2_3'
@
text
@d16 1
a16 1
; Public interface (ie interface to DMAManager) of DMA HAL devices
a26 13
; Device for each DMA controller

                                ^       0
                                #       HALDeviceSize
HALDevice_DMACFeatures          #       4
HALDevice_DMACEnumeratePhysical #       4
HALDevice_DMACEnumerateLogical  #       4
HALDevice_DMACAllocate          #       4
HALDevice_DMACDeallocate        #       4
HALDevice_DMAC_Size             *       :INDEX: @@

; Device for each physical DMA channel

d29 18
a46 12
HALDevice_DMAFeatures           #       4
HALDevice_DMAAbort              #       4
HALDevice_DMASetOptions         #       4
HALDevice_DMASetCurrentTransfer #       4
HALDevice_DMASetNextTransfer    #       4
HALDevice_DMATransferState      #       4
HALDevice_DMASetCurrentTransfer2 #      4
HALDevice_DMASetNextTransfer2   #       4
HALDevice_DMATransferState2     #       4
HALDevice_DMAIRQClear           #       4
HALDevice_DMAStatus             #       4
HALDevice_DMA_Size              *       :INDEX: @@
d62 2
a63 2
DMAStatusFlag_NoUnstarted               *       1 :SHL: 0       ; there are no transfers programmed but not yet started
DMAStatusFlag_Overrun                   *       1 :SHL: 1       ; this channel has not yet been used, or is over/underrunning
@


1.1.2.3
log
@  Lots of improvements, working towards support for UDMA etc.
Detail:
  * No longer uses temporay HAL DMA entry points, all hardware access is
    accomplished using device entry points.
  * Supports multiple DMA controllers, including dynamic addition and
    removal of controllers (using OS_Hardware 4 and Service_Hardware).
  * Added *DMAChannels, which enumerates the currently registered DMA
    channels, listed according to physical location.
  * Logical channel blocks are dynamically allocated (as a requirement of
    the above changes) so logical channel handles are now pointers, no
    longer an array index. Just so you know.
  * Removed now-obsolete EnumerateLogical entry from controller device API.
  * Added pointer-to-controller-device item in publically visible part of
    channel device structure.
  * Moved memory-to-memory channel device entries to end of channel device
    structure (I'm considering removing them).
  * Added support for GPA debugging listing (requires BuildSys 3.86).
Admin:
  Tested on Tungsten (ie floppies still work).

Version 0.15, 4.4.2.6. Tagged as 'DMA-0_15-4_4_2_6'
@
text
@d32 2
a33 1
HALDevice_DMACEnumerate         #       4
d38 1
a38 1
; Device for each physical DMA channel (buffer type)
a42 1
HALDevice_DMAController         #       4
a47 2
HALDevice_DMAIRQClear           #       4
HALDevice_DMAStatus             #       4
d51 2
@


