head	4.16;
access;
symbols
	DMA-0_23:4.16
	DMA-0_22:4.14
	DMA-0_21:4.13
	DMA-0_20:4.12
	DMA-0_19:4.11
	DMA-0_18:4.10
	RO_5_07:4.8
	DMA-0_17:4.8
	DMA-0_16:4.5
	HAL_merge:4.4.2.6
	DMA-0_15-4_4_2_6:4.4.2.6
	DMA-0_15-4_4_2_5:4.4.2.5
	DMA-0_15-4_4_2_4:4.4.2.4
	DMA-0_15-4_4_2_3:4.4.2.3
	DMA-0_15-4_4_2_2:4.4.2.2
	DMA-0_15-4_4_2_1:4.4.2.1
	HAL_bp:4.4
	HAL:4.4.0.2
	DMA-0_15:4.4
	DMA-0_14:4.3
	dellis_autobuild_BaseSW:4.2
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.4
	DMA-0_13:4.2;
locks; strict;
comment	@# @;


4.16
date	2015.11.07.17.23.30;	author rool;	state Exp;
branches;
next	4.15;
commitid	URf8Qdi3NdYRubIy;

4.15
date	2015.08.16.18.30.16;	author jlee;	state Exp;
branches;
next	4.14;
commitid	kaDOr6XAdhXbxwxy;

4.14
date	2015.06.02.19.25.01;	author rsprowson;	state Exp;
branches;
next	4.13;
commitid	QLMddloaNwgrfTny;

4.13
date	2014.10.18.19.18.01;	author jlee;	state Exp;
branches;
next	4.12;
commitid	ZCUMqbwOugLqvIUx;

4.12
date	2013.01.20.12.18.28;	author rsprowson;	state Exp;
branches;
next	4.11;
commitid	THRcEfGlI1hZCWAw;

4.11
date	2012.07.07.19.26.54;	author jlee;	state Exp;
branches;
next	4.10;
commitid	lEg7UHc6hW3zkFbw;

4.10
date	2009.11.28.22.19.33;	author jlee;	state Exp;
branches;
next	4.9;

4.9
date	2009.06.11.21.06.59;	author bavison;	state Exp;
branches;
next	4.8;

4.8
date	2003.02.07.20.09.51;	author bavison;	state Exp;
branches;
next	4.7;

4.7
date	2003.02.04.20.07.00;	author bavison;	state Exp;
branches;
next	4.6;

4.6
date	2003.01.30.16.10.46;	author bavison;	state Exp;
branches;
next	4.5;

4.5
date	2002.12.13.18.48.10;	author bavison;	state Exp;
branches;
next	4.4;

4.4
date	2001.04.11.18.49.21;	author bavison;	state Exp;
branches
	4.4.2.1;
next	4.3;

4.3
date	2001.03.16.15.54.34;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.11.12.12.36.56;	author dcotton;	state Exp;
branches;
next	4.1;

4.1
date	99.11.12.12.36.05;	author dcotton;	state Exp;
branches;
next	;

4.4.2.1
date	2001.11.27.14.57.56;	author bavison;	state Exp;
branches;
next	4.4.2.2;

4.4.2.2
date	2002.10.03.17.35.11;	author bavison;	state Exp;
branches;
next	4.4.2.3;

4.4.2.3
date	2002.10.15.19.15.33;	author bavison;	state Exp;
branches;
next	4.4.2.4;

4.4.2.4
date	2002.10.25.14.58.18;	author bavison;	state Exp;
branches;
next	4.4.2.5;

4.4.2.5
date	2002.11.22.16.53.29;	author bavison;	state Exp;
branches;
next	4.4.2.6;

4.4.2.6
date	2002.12.13.17.24.58;	author bavison;	state Exp;
branches;
next	;


desc
@@


4.16
log
@Add support for double buffered NoInitIRQ type DMA controllers
Detail:
  Preprogram the current and next transfers before kicking off the first. Note that it is no longer possible to infer from the status call whether it's a double or single buffered controller, so a new HAL device flag is added to signal this. The new flag is only required for NoInitIRQ type DMA controllers, but other double buffered controllers may set it for information purposes.
Admin:
  Submission from Elesar. Tested on Titanium HAL.

Version 0.23. Tagged as 'DMA-0_23'
@
text
@/* (0.23)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.23
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                07 Nov 2015

#define Module_MajorVersion             "0.23"
#define Module_Version                  23
#define Module_MinorVersion             ""
#define Module_Date                     "07 Nov 2015"

#define Module_ApplicationDate          "07-Nov-15"

#define Module_ComponentName            "DMA"
#define Module_ComponentPath            "castle/RiscOS/Sources/HWSupport/DMA"

#define Module_FullVersion              "0.23"
#define Module_HelpVersion              "0.23 (07 Nov 2015)"
#define Module_LibraryVersionInfo       "0:23"
@


4.15
log
@Documentation update
Detail:
  Doc/HAL_DMAAPI - Document the requirements of HAL devices and DMAManager clients with respect to memory barriers
Admin:
  Documentation change, not tagged


Version 0.22. Not tagged
@
text
@d1 1
a1 1
/* (0.22)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.22
d9 1
a9 1
#define Module_Date_CMHG                16 Aug 2015
d11 2
a12 2
#define Module_MajorVersion             "0.22"
#define Module_Version                  22
d14 1
a14 1
#define Module_Date                     "16 Aug 2015"
d16 1
a16 1
#define Module_ApplicationDate          "16-Aug-15"
d21 3
a23 3
#define Module_FullVersion              "0.22"
#define Module_HelpVersion              "0.22 (16 Aug 2015)"
#define Module_LibraryVersionInfo       "0:22"
@


4.14
log
@Fix to argument mixup
When reprogramming a buffer due to early overrun, R2 should be the length not the physical address.

Version 0.22. Tagged as 'DMA-0_22'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                02 Jun 2015
d14 1
a14 1
#define Module_Date                     "02 Jun 2015"
d16 1
a16 1
#define Module_ApplicationDate          "02-Jun-15"
d22 1
a22 1
#define Module_HelpVersion              "0.22 (02 Jun 2015)"
@


4.13
log
@Fix sync callbacks for list-type DMA channels. Improve handling of Service_PreReset.
Detail:
  s/DMA - Fixed sync callback logic of list-type channels to match that used by buffer-type channels. Old logic would result in too many sync callbacks being made at the start of a transfer, followed by dmar_Gap becoming negative and (potentially) no sync callbacks being made for the remainder of the transfer.
  s/Front, s/ModHead, s/SWI - Make SWI handler refuse to service any SWI following Service_PreReset. This helps avoid bad things happening should a client try to access DMA channels/transfers after we've reset everything during PreReset (although really it's our own fault for not telling the clients about the controller reset)
  Resources/UK/Messages, s/Errors - Define the error that we return when called following Service_PreReset.
Admin:
  Tested on Raspberry Pi


Version 0.21. Tagged as 'DMA-0_21'
@
text
@d1 1
a1 1
/* (0.21)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.21
d9 1
a9 1
#define Module_Date_CMHG                18 Oct 2014
d11 2
a12 2
#define Module_MajorVersion             "0.21"
#define Module_Version                  21
d14 1
a14 1
#define Module_Date                     "18 Oct 2014"
d16 1
a16 1
#define Module_ApplicationDate          "18-Oct-14"
d21 3
a23 3
#define Module_FullVersion              "0.21"
#define Module_HelpVersion              "0.21 (18 Oct 2014)"
#define Module_LibraryVersionInfo       "0:21"
@


4.12
log
@API enhancements and fixes
ModHead.s: Allow list type channels to specify NoInitIRQ. Respect the flag when deciding whether or not to unmask the IRQ at the HAL level
DMA.s: Use the cached device flags rather than incurring a function call, refactor the call to DMASetListTransfer to use the CallHAL macro
SWI.s: The transfer unit size check was against the wrong register
hdr/DMADevice: Comment updated to reflect wider flag use

Tested with IOMD HAL, no longer aborts on module init because the channel interrupt fires before any lists have been prepared (it does have an initial IRQ), with various transfer sizes.

Version 0.20. Tagged as 'DMA-0_20'
@
text
@d1 1
a1 1
/* (0.20)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.20
d9 1
a9 1
#define Module_Date_CMHG                20 Jan 2013
d11 2
a12 2
#define Module_MajorVersion             "0.20"
#define Module_Version                  20
d14 1
a14 1
#define Module_Date                     "20 Jan 2013"
d16 1
a16 1
#define Module_ApplicationDate          "20-Jan-13"
d21 3
a23 3
#define Module_FullVersion              "0.20"
#define Module_HelpVersion              "0.20 (20 Jan 2013)"
#define Module_LibraryVersionInfo       "0:20"
@


4.11
log
@Fix support for list-based channel devices
Detail:
  s/DMA - In DMActivate, the DMASetOptionsFlag_Circular flag was being set to the inverse of the required value.
  s/DMA - Fixed stack imbalance in DMAInterruptList; the 'finished' routines which are shared with DMAInterruptCommon expect r12 to be on the stack, but DMAInterruptList was failing to place it there.
Admin:
  Tested in BCM2835 ROM


Version 0.19. Tagged as 'DMA-0_19'
@
text
@d1 1
a1 1
/* (0.19)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.19
d9 1
a9 1
#define Module_Date_CMHG                07 Jul 2012
d11 2
a12 2
#define Module_MajorVersion             "0.19"
#define Module_Version                  19
d14 1
a14 1
#define Module_Date                     "07 Jul 2012"
d16 1
a16 1
#define Module_ApplicationDate          "07-Jul-12"
d21 3
a23 3
#define Module_FullVersion              "0.19"
#define Module_HelpVersion              "0.19 (07 Jul 2012)"
#define Module_LibraryVersionInfo       "0:19"
@


4.10
log
@DMAManager fixes & improvements
Detail:
  DMA.s, in DMAForceActivate: Support for the NoInitIRQ flag for interrupt-driven buffer-type channels (API 1+)
  DMA.s, 'testloop': Fix handling of interrupt-driven buffer-type channels so DMAManager doesn't immediately crash or malfunction
  DMA.s, 'overrun', 'earlyoverrun', 'nooverrun': Fix handling of interrupt-driven buffer-type channels so IRQ state is cleared before the next stage of the transfer is programmed (to avoid missing IRQs)
  DMA.s, 'finished': Fix handling of interrupt-driven buffer-type channels so R8 is loaded with the logical channel block ptr, as expected by subsequent function calls.
  Front.s: Make dmaq_Trampoline larger to allow it to contain the HAL device ptr
  GetAll.s: Add Hdr:HALEntries to GET list, as required by 'ClaimVectors' fix in ModHead.s
  ModHead.s: Update controller handling code to cope with API versions 0.1 (TestIRQ2) & 1 ('Deallocate' passed channel device ptr)
  ModHead.s: Fix 'ClaimVectors' to call HAL_IRQEnable to enable IRQs for the detected channels/controllers.
  ModHead.s: Fix IRQ handler trampolines so that they call HALDevice_TestIRQ on the channel instead of branching to a random address in memory
  SWI.s: Support for controller API 1 (pass channel device ptr to 'Deallocate' in R2)
  hdr/DMADevice: Extra flags & entries for new DMA controller & buffer API versions
Admin:
  Tested on rev C2 beagleboard with the incoming HAL DMA driver. API revisions are documented in more detail on the ROOL wiki.


Version 0.18. Tagged as 'DMA-0_18'
@
text
@d1 1
a1 1
/* (0.18)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.18
d9 1
a9 1
#define Module_Date_CMHG                28 Nov 2009
d11 2
a12 2
#define Module_MajorVersion             "0.18"
#define Module_Version                  18
d14 1
a14 1
#define Module_Date                     "28 Nov 2009"
d16 1
a16 1
#define Module_ApplicationDate          "28-Nov-09"
d21 3
a23 3
#define Module_FullVersion              "0.18"
#define Module_HelpVersion              "0.18 (28 Nov 2009)"
#define Module_LibraryVersionInfo       "0:18"
@


4.9
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.17. Not tagged
@
text
@d1 1
a1 1
/* (0.17)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.17
d9 1
a9 1
#define Module_Date_CMHG                11 Jun 2009
d11 2
a12 2
#define Module_MajorVersion             "0.17"
#define Module_Version                  17
d14 1
a14 1
#define Module_Date                     "11 Jun 2009"
d16 1
a16 1
#define Module_ApplicationDate          "11-Jun-09"
d21 3
a23 3
#define Module_FullVersion              "0.17"
#define Module_HelpVersion              "0.17 (11 Jun 2009)"
#define Module_LibraryVersionInfo       "0:17"
@


4.8
log
@  Three bugfixes (as it happens, all were introduced with the support for
  multiple DMA controllers).
Detail:
  * Service_PagesSafe handler would abort if the restarting transfer had
    more than one entry in its scatter list
  * Logical channels remained linked into the chain during mass
    deregistration in module finalisation, allowing new transfers to be
    queued
  * Logical channel (RMA) block wasn't freed in DMA_DeregisterChannel
Admin:
  Tested on Tungsten with UDMA ADFS, pscramble and the Task Manager.

Version 0.17. Not tagged
@
text
@d4 1
a4 1
 * Last processed by srccommit version: 1.68.
d9 1
a9 1
#define Module_Date_CMHG                07 Feb 2003
d14 1
a14 1
#define Module_Date                     "07 Feb 2003"
d16 1
a16 1
#define Module_ApplicationDate          "07-Feb-03"
d19 1
a19 1
#define Module_ComponentPath            "RiscOS/Sources/HWSupport/DMA"
d22 1
a22 1
#define Module_HelpVersion              "0.17 (07 Feb 2003)"
@


4.7
log
@No longer complains if last scatter list entry isn't a multiple of the
transfer unit size, as long as we're using a unit-multiple subpart of the
entry. Needed by ADFS.

Version 0.17. Not tagged
@
text
@d9 1
a9 1
#define Module_Date_CMHG                04 Feb 2003
d14 1
a14 1
#define Module_Date                     "04 Feb 2003"
d16 1
a16 1
#define Module_ApplicationDate          "04-Feb-03"
d22 1
a22 1
#define Module_HelpVersion              "0.17 (04 Feb 2003)"
@


4.6
log
@  A few weeks' dedicated work, mainly to support UDMA hard discs.
Detail:
  Features:
  * Supports physical channels using a new type of HAL device (&303) where
    the hardware takes a pointer to a scatter list up front to effect the
    entire transfer, and which may report hardware errors at any time.
    For full details, see Doc.HAL_DMAAPI.
  * Page tables are no longer generated when using a bounce-buffer, since
    they aren't actually any use except in determining if unsafe pages
    intersect with the transfer. Instead, bounce-buffer transfers are halted
    whenever any page becomes unsafe, and no new bounce-buffer transfers can
    be started while any pages are unsafe.
  * For both bounce-buffer and list-type devices, the Activate entry is
    now called after the transfer is programmed (with SetCurrentTransfer
    or SetListTransfer), since this is likely to be more useful for these
    types of devices. Note that for interrupt-driven buffer devices, it
    is still assumed that the default state of the device is to be in an
    underrun interrupt state, so the transfer is not programmed until the
    first time the interrupt routine is entered.
  * Now ensures that scatter list start addresses and lengths are all
    multiples of the transfer unit size (this check is done during page
    table construction, so will be returned via the Completed callback,
    rather than directly from DMA_QueueTransfer like the total length check).
  * When there is no interrupt associated with a physical channel (both for
    buffer- or list-type devices), if the polling of the hardware within SWI
    DMA_ExamineTransfer detects that the transfer has completed, then
    the transfer is shut down in the same was as though an interrupt had
    happened (ie the Completed callback is called without an error).
  * Added SWI DMA_AllocateLogicalChannels to act as a centralised allocator
    for session-unique logical DMA channels. Primarily a service to
    third-party authors of "HAL" devices.
  Bugfixes:
  * Now handles Service_MessageFileClosed to allow safe MessageTrans lookups
    in the background.
  * If a controller device was removed before its constituent channel
    devices, removing the channel device would abort.
  * Interrupt trampoline construction was wrong, the address of the
    interrupt handler code wasn't relocated. Also, non-vectored interrupts
    weren't correctly handled.
  * Transfers suspended by Service_PagesUnsafe weren't blocking the logical
    channel, so you could queue another transfer on the same channel and it
    would start immediately (although transfers already queued before the
    service call wouldn't have been started).
  * Transfers which had completed within Service_PagesUnsafe handler weren't
    being delinked from the queue.
  * Service_PagesSafe wasn't handled properly, meaning that none of the
    transfers that were halted by Service_PagesUnsafe were restarted! This
    was due to the use of routines in common with DMA_SuspendTransfer and
    DMA_ResumeTransfer which started with the first HALised version - these
    suspend a logical channel, unlike the original IOMD code which
    effectively suspends a physical channel. Thus the code to search for
    transfers to restart needs to be quite different, since the physical
    channel may be idle, or occupied with another logical channel, and
    each physical channel may have multiple associated logical channels
    that were on unsafe transfers!
  * When you deregistered a logical channel (including during module death)
    the Completed callback was called for all queued transfers, incorrectly
    including those that had not yet had the matching Start callback called.
  * There was a stack imbalance in the buffer device interrupt handler
    because the retained part of the old code assumed Hdr:Proc stack
    management, which the new code doesn't use (it's entered with the return
    address on the stack).
Admin:
  Tested with UDMA test harnesses on Tungsten (ADFS not yet complete).

Version 0.17. Tagged as 'DMA-0_17'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                30 Jan 2003
d14 1
a14 1
#define Module_Date                     "30 Jan 2003"
d16 1
a16 1
#define Module_ApplicationDate          "30-Jan-03"
d22 1
a22 1
#define Module_HelpVersion              "0.17 (30 Jan 2003)"
@


4.5
log
@Folded in HAL branch.

Version 0.16. Tagged as 'DMA-0_16'
@
text
@d1 1
a1 1
/* (0.16)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.16
d9 1
a9 1
#define Module_Date_CMHG                13 Dec 2002
d11 2
a12 2
#define Module_MajorVersion             "0.16"
#define Module_Version                  16
d14 1
a14 1
#define Module_Date                     "13 Dec 2002"
d16 1
a16 1
#define Module_ApplicationDate          "13-Dec-02"
d21 3
a23 3
#define Module_FullVersion              "0.16"
#define Module_HelpVersion              "0.16 (13 Dec 2002)"
#define Module_LibraryVersionInfo       "0:16"
@


4.4
log
@  Main change is 32-bit compatibility.
Detail:
  Also
  * added Ursula service call table (not even the Phoebe version had one!)
  * fixed a bug: the Service_PagesUnsafe handler was returning with IRQs
    still disabled
Admin:
  Not tested.

Version 0.15. Tagged as 'DMA-0_15'
@
text
@d1 1
a1 1
/* (0.15)
d4 1
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.15
d9 1
a9 1
#define Module_Date_CMHG                11 Apr 2001
d11 2
a12 2
#define Module_MajorVersion             "0.15"
#define Module_Version                  15
d14 1
a14 1
#define Module_Date                     "11 Apr 2001"
d16 1
a16 2
#define Module_ApplicationDate2         "11-Apr-01"
#define Module_ApplicationDate4         "11-Apr-2001"
d21 3
a23 2
#define Module_FullVersion              "0.15"
#define Module_HelpVersion              "0.15 (11 Apr 2001)"
@


4.4.2.1
log
@  Commit of the HALised DMA Manager code, as it was when the IA division
  was closed.
Detail:
  This didn't get far beyond the design stage, but what there is is best kept
  safe in CVS in case it gets accidentally deleted again...
Admin:
  Don't even think about trying to build this version.

Version 0.15, 4.4.2.1. Tagged as 'DMA-0_15-4_4_2_1'
@
text
@a3 1
 * Last processed by srccommit version: 1.61.
d7 2
a8 2
#define Module_MinorVersion_CMHG        4.4.2.1
#define Module_Date_CMHG                27 Nov 2001
d12 2
a13 2
#define Module_MinorVersion             "4.4.2.1"
#define Module_Date                     "27 Nov 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "27-Nov-01"
#define Module_ApplicationDate4         "27-Nov-2001"
d21 2
a22 3
#define Module_FullVersion              "0.15 (4.4.2.1)"
#define Module_HelpVersion              "0.15 (27 Nov 2001) (4.4.2.1)"
#define Module_LibraryVersionInfo       "0:15"
@


4.4.2.2
log
@  An intermediate version.
Detail:
  Finally, all IOMD dependencies have been expunged, and the module will
  build again. Any specific support for new features of other DMA controllers
  has yet to be added, though. New exported header added, for use by DMA
  device code.
Admin:
  Untested. However, should theoretically work if someone were to write the
  appropriate routines for the IOMD HAL.

Version 0.15, 4.4.2.2. Tagged as 'DMA-0_15-4_4_2_2'
@
text
@d4 1
a4 1
 * Last processed by srccommit version: 1.68.
d8 2
a9 2
#define Module_MinorVersion_CMHG        4.4.2.2
#define Module_Date_CMHG                03 Oct 2002
d13 2
a14 2
#define Module_MinorVersion             "4.4.2.2"
#define Module_Date                     "03 Oct 2002"
d16 2
a17 2
#define Module_ApplicationDate2         "03-Oct-02"
#define Module_ApplicationDate4         "03-Oct-2002"
d22 2
a23 2
#define Module_FullVersion              "0.15 (4.4.2.2)"
#define Module_HelpVersion              "0.15 (03 Oct 2002) 4.4.2.2"
@


4.4.2.3
log
@  Just enough support for floppy DMA transfer to work on Tungsten.
Detail:
  * Supports DMA controllers with no interrupts (ie those that need a bounce
    buffer).
  * Restructured interface to HAL to separate the concepts of a DMA controller
    device and a DMA channel device.
  * Bugfixes to handling of single-buffered channels.
  * Updated Doc.HAL_DMAAPI.
Admin:
  Tested with Kevin's ADFS.

Version 0.15, 4.4.2.3. Tagged as 'DMA-0_15-4_4_2_3'
@
text
@d8 2
a9 2
#define Module_MinorVersion_CMHG        4.4.2.3
#define Module_Date_CMHG                15 Oct 2002
d13 2
a14 2
#define Module_MinorVersion             "4.4.2.3"
#define Module_Date                     "15 Oct 2002"
d16 2
a17 1
#define Module_ApplicationDate          "15-Oct-02"
d22 2
a23 2
#define Module_FullVersion              "0.15 (4.4.2.3)"
#define Module_HelpVersion              "0.15 (15 Oct 2002) 4.4.2.3"
@


4.4.2.4
log
@Scatter list entries in the top 64K of memory are treated as list loopback
indicators, for FileCore compatibility.
Unaligned reads using a bounce buffer should now work correctly.

Version 0.15, 4.4.2.4. Tagged as 'DMA-0_15-4_4_2_4'
@
text
@d8 2
a9 2
#define Module_MinorVersion_CMHG        4.4.2.4
#define Module_Date_CMHG                25 Oct 2002
d13 2
a14 2
#define Module_MinorVersion             "4.4.2.4"
#define Module_Date                     "25 Oct 2002"
d16 1
a16 1
#define Module_ApplicationDate          "25-Oct-02"
d21 2
a22 2
#define Module_FullVersion              "0.15 (4.4.2.4)"
#define Module_HelpVersion              "0.15 (25 Oct 2002) 4.4.2.4"
@


4.4.2.5
log
@  One new feature, required by ADFS, and lots of silly bugfixes.
Detail:
  * Flag bit 3 passed to DMA_QueueTransfer indicates that the DMA Manager
    shouldn't update the scatter list itself, even when a circular transfer
    is not specifier
  * When using a bounce buffer, the source/destination isn't marked
    uncacheable any more
  * r2 was being corrupted by the call to the device Reset entry
  * Flags passed to device SetOptions entry were always 0, which meant that
    you could never write to any device
  * Test for whether to write to the bounce buffer was wrong in two ways
  * Updating the scatter list was wrong if the amount to update by was
    larger than the first entry (ie after a bounce buffer had been
    completed) - the whole difference was applied to the first entry
Admin:
  Tested in use with ADFS.

Version 0.15, 4.4.2.5. Tagged as 'DMA-0_15-4_4_2_5'
@
text
@d8 2
a9 2
#define Module_MinorVersion_CMHG        4.4.2.5
#define Module_Date_CMHG                22 Nov 2002
d13 2
a14 2
#define Module_MinorVersion             "4.4.2.5"
#define Module_Date                     "22 Nov 2002"
d16 1
a16 1
#define Module_ApplicationDate          "22-Nov-02"
d21 2
a22 2
#define Module_FullVersion              "0.15 (4.4.2.5)"
#define Module_HelpVersion              "0.15 (22 Nov 2002) 4.4.2.5"
@


4.4.2.6
log
@  Lots of improvements, working towards support for UDMA etc.
Detail:
  * No longer uses temporay HAL DMA entry points, all hardware access is
    accomplished using device entry points.
  * Supports multiple DMA controllers, including dynamic addition and
    removal of controllers (using OS_Hardware 4 and Service_Hardware).
  * Added *DMAChannels, which enumerates the currently registered DMA
    channels, listed according to physical location.
  * Logical channel blocks are dynamically allocated (as a requirement of
    the above changes) so logical channel handles are now pointers, no
    longer an array index. Just so you know.
  * Removed now-obsolete EnumerateLogical entry from controller device API.
  * Added pointer-to-controller-device item in publically visible part of
    channel device structure.
  * Moved memory-to-memory channel device entries to end of channel device
    structure (I'm considering removing them).
  * Added support for GPA debugging listing (requires BuildSys 3.86).
Admin:
  Tested on Tungsten (ie floppies still work).

Version 0.15, 4.4.2.6. Tagged as 'DMA-0_15-4_4_2_6'
@
text
@d8 2
a9 2
#define Module_MinorVersion_CMHG        4.4.2.6
#define Module_Date_CMHG                13 Dec 2002
d13 2
a14 2
#define Module_MinorVersion             "4.4.2.6"
#define Module_Date                     "13 Dec 2002"
d16 1
a16 1
#define Module_ApplicationDate          "13-Dec-02"
d21 2
a22 2
#define Module_FullVersion              "0.15 (4.4.2.6)"
#define Module_HelpVersion              "0.15 (13 Dec 2002) 4.4.2.6"
@


4.3
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.14. Tagged as 'DMA-0_14'
@
text
@d1 1
a1 1
/* (0.14)
d6 1
a6 1
#define Module_MajorVersion_CMHG        0.14
d8 1
a8 1
#define Module_Date_CMHG                16 Mar 2001
d10 2
a11 2
#define Module_MajorVersion             "0.14"
#define Module_Version                  14
d13 1
a13 1
#define Module_Date                     "16 Mar 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "16-Mar-01"
#define Module_ApplicationDate4         "16-Mar-2001"
d21 2
a22 2
#define Module_FullVersion              "0.14"
#define Module_HelpVersion              "0.14 (16 Mar 2001)"
@


4.2
log
@	Now builds with HdrSrc-0_52 or later, and placed under srccommit
control.

Detail:
	A change in Version 0.52 of HdrSrc meant that this component would
not build. This has now been fixed.
	Makefile now uses strdepend in the clean phase to remove all the
dynamic dependencies.
	Placed under srccommit control.

Admin:
	Built.

Version 0.13. Tagged as 'DMA-0_13'
@
text
@d1 1
a1 1
/* (0.13)
d6 3
a8 3
#define Module_MajorVersion_CMHG     	0.13
#define Module_MinorVersion_CMHG	
#define Module_Date_CMHG      		12 Nov 1999
d10 4
a13 4
#define Module_MajorVersion     	"0.13"
#define Module_Version                  13
#define Module_MinorVersion		""
#define Module_Date      		"12 Nov 1999"
d15 8
a22 1
#define Module_FullVersion              "0.13"
@


4.1
log
@created by srccommit.
@
text
@d1 1
a1 1
/* (0.12)
d6 1
a6 1
#define Module_MajorVersion_CMHG     	0.12
d10 2
a11 2
#define Module_MajorVersion     	"0.12"
#define Module_Version                  12
d15 1
a15 1
#define Module_FullVersion              "0.12"
@

