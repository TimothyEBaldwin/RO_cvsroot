head	4.7;
access;
symbols
	ARM-0_21:4.7
	ARM-0_20:4.7
	RO_5_07:4.7
	ARM-0_19:4.7
	ARM-0_18:4.6
	ARM-0_17:4.4
	ARM-0_16:4.3
	ARM-0_15:4.3
	Ursula_merge:4.3
	ARM-0_14:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	Ursula_RiscPC:4.3.0.6
	nicke_ARM-0_13:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	rthornb_UrsulaBuild_01May1998:4.3
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.3.0.4
	Daytona_bp:4.3
	Ursula:4.3.0.2
	Ursula_bp:4.3
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.2
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2004.05.06.16.06.44;	author kbracey;	state Exp;
branches;
next	4.6;

4.6
date	2003.06.03.10.39.04;	author rsprowson;	state Exp;
branches;
next	4.5;

4.5
date	2001.03.26.10.20.52;	author mstephen;	state Exp;
branches;
next	4.4;

4.4
date	2001.03.16.15.49.32;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	97.05.02.09.45.29;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.16.10.27.55;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.34.28;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.34.28;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.08.15;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	4.1.3.2;

4.1.3.2
date	97.05.01.14.34.19;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1.2.1
date	97.04.30.12.10.36;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.40.09;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.39.30;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Cache on/off now manipulates I bit as well as C and B.
Needed for latest Kernels which allow independent control of the I bit,
rather than making it track C.

Version 0.19. Tagged as 'ARM-0_19'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Cache

;---------------------------------------------------------------------------
; Cache_Init
;
;       Out:    r0 corrupted
;
;       Read configuration and set current state.
;
Cache_Init
        Entry   "r1,r2"

        Debug   cache,"Cache_Init"

        MOV     r0, #ReadCMOS                   ; Read CMOS byte containing cache bit.
        MOV     r1, #CacheCMOS
        SWI     XOS_Byte
        EXIT    VS

        TST     r2, #CacheBit                   ; test configured cache bit
        LDREQ   r1, =MMU_CacheOn_EORMask        ; enable or disable the cache as appropriate.
        LDRNE   r1, =MMU_CacheOff_EORMask
        LDR     r2, =MMU_Cache_ANDMask
        MOV     r0, #0                          ; reason code for modifying control register
        SWI     XOS_MMUControl                  ; do it (NB SWI flushes cache itself if necessary)
        EXIT


;---------------------------------------------------------------------------
; Help and syntax for *Cache and *Configure Cache.
;
 [ International_Help = 0
Cache_SyntaxError
        DCD     ErrorNumber_Syntax
        DCB     "Syntax: *$Command [On|Off]",0
        ALIGN
CacheCon_SyntaxError
        DCD     ErrorNumber_Syntax
        DCB     "Syntax: *Configure $Command On|Off",0
Cache_Help
        DCB     "*$Command turns the cache on or off, or gives the cache state."
        DCB     13,10
Cache_Syntax
        DCB     "Syntax: *$Command [On|Off]",0
CacheCon_Help
        DCB     "*Configure $Command determines the default state of the cache."
        DCB     13,10
CacheCon_Syntax
        DCB     "Syntax: *Configure $Command On|Off",0
        ALIGN
 |
Cache_SyntaxError
        DCD     ErrorNumber_Syntax
        DCB     "SARMCAC",0
        ALIGN
CacheCon_SyntaxError
        DCD     ErrorNumber_Syntax
        DCB     "SARMCCA",0
Cache_Help
        DCB     "HARMCAC",0
Cache_Syntax
        DCB     "SARMCAC",0
CacheCon_Help
        DCB     "HARMCCA",0
CacheCon_Syntax
        DCB     "SARMCCA",0
        ALIGN
 ]


;---------------------------------------------------------------------------
; Cache_Code
;
;       In:     r0 -> command tail
;               r1 = number of parameters
;
;       Out:    r0 corrupted
;
;       Handle *Cache commands.
;
Cache_Code      ROUT
        Entry
        LDR     r12, [r12]

        Debug   cache,"Cache_Code"

        TEQ     r1, #0                  ; If no parameters then
        BEQ     %FT10                   ;   just display current state.

        BL      Cache_Decode
        ADRVS   r0, Cache_SyntaxError
 [ International_Help <> 0
        BLVS    MsgTrans_ErrorLookup
 ]
        EXIT    VS

        TST     r0, #CacheBit                   ; check if turning on or off
        LDREQ   r1, =MMU_CacheOn_EORMask        ; enable or disable the cache as appropriate.
        LDRNE   r1, =MMU_CacheOff_EORMask
        LDR     r2, =MMU_Cache_ANDMask
        MOV     r0, #0                          ; reason code for modifying control register
        SWI     XOS_MMUControl                  ; do it (NB SWI flushes cache itself if necessary)
        EXIT

10
        MOV     r0, #0                          ; read current state from kernel
        MOV     r1, #0                          ; EOR mask
        MOV     r2, #-1                         ; AND mask (ie don't modify)
        SWI     XOS_MMUControl
        EXIT    VS

        TST     r1, #MMUC_C                     ; test if cache is on (note *Cache On also turns on write-buffer)
        ADRNE   r0, cache_on
        ADREQ   r0, cache_off
        BL      Cache_WriteMessage
        EXIT

cache_on
        DCB     "M02",0
cache_off
        DCB     "M03",0
        ALIGN


;---------------------------------------------------------------------------
; CacheCon_Code
;
;       In:     r0 = 0 (*Configure with no option => print syntax and return)
;               OR
;               r0 = 1 (*Status Cache => print currently configured status)
;               OR
;               r0 -> command tail
;
;       Handle *Configure and *Status commands.
;
CacheCon_Code   ROUT
        Entry   "r0-r3"
        LDR     r12, [r12]

        Debug   cache,"CacheCon_Code"

        MOV     r0, #ReadCMOS           ; Get CMOS byte we may have to modify.
        MOV     r1, #CacheCMOS
        SWI     XOS_Byte
        BVS     %FT10

        LDR     r0, [sp]
        CMP     r0, #1
        BCC     %FT20                   ; If r0=0 then just show syntax.
        BEQ     %FT30                   ; If r0=1 then show status from r2.

        BL      Cache_Decode            ; Decode argument
        ADRVS   r0, CacheCon_SyntaxError
 [ International_Help <> 0
        BLVS    MsgTrans_ErrorLookup
 ]
        BVS     %FT10                   ;   but return error if not valid.
        BIC     lr, r2, #CacheBit       ; Build new CMOS byte in lr.
        ORR     lr, lr, r0
        TEQ     r2, lr                  ; Only change it if we have to.
        MOVNE   r0, #WriteCMOS
        MOVNE   r1, #CacheCMOS
        MOVNE   r2, lr
        SWINE   XOS_Byte
10
        STRVS   r0, [sp]
        EXIT

20
        ADR     r0, concache_syntax
 [ International_Help = 0
        SWI     XOS_Write0
 |
        BL      Cache_WriteMessage
 ]
        BVS     %BT10
        EXIT

30
        TST     r2, #CacheBit           ; Status is internationalised so look it up.
        ADREQ   r0, concache_on
        ADRNE   r0, concache_off
        BL      Cache_WriteMessage
        BVS     %BT10
        EXIT

concache_on
        DCB     "M00",0
concache_off
        DCB     "M01",0
concache_syntax
 [ International_Help = 0
        DCB     "Cache      on|off",10,13,0
 |
        DCB     "M04",0
 ]
        ALIGN


;---------------------------------------------------------------------------
; Cache_WriteMessage
;
;       In:     r0 -> message token for text to print
;
;       Out:    r0 corrupted
;
;       Lookup and print the given message.
;
Cache_WriteMessage
        Entry   "r1-r3"
        MOV     r1, r0
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        EXIT


;---------------------------------------------------------------------------
; Cache_Decode
;
;       In:     r0 -> string to decode (leading spaces skipped)
;
;       Out:    r0 = 0 (string was "on")
;               OR
;               r0 = CacheBit (string was "off")
;               OR
;               V set (string was invalid)
;
;       Parse the given string looking for "on" or "off".
;
Cache_Decode    ROUT
        Entry

        DebugS  cache,"Cache_Decode ",r0,20

        LDRB    lr, [r0], #1            ; First letter must be "o".
        TEQ     lr, #"O"
        TEQNE   lr, #"o"
        BNE     %FT20

        LDRB    lr, [r0], #1
        TEQ     lr, #"N"
        TEQNE   lr, #"n"
        LDREQB  lr, [r0]                ; Found "on" so if next char is ok then
        MOVEQ   r0, #0                  ;   return r0=0.
        BEQ     %FT10

        TEQ     lr, #"F"                ; Must be "off" from now on.
        TEQNE   lr, #"f"
        BNE     %FT20

        LDRB    lr, [r0], #1
        TEQ     lr, #"F"
        TEQNE   lr, #"f"
        BNE     %FT20
        LDRB    lr, [r0]                ; Found "off" so if next char is ok then
        MOV     r0, #CacheBit           ;   return r0=CacheBit.
10
        Debug   cache," valid"
        CMP     lr, #" "                ; Only valid if next char is ok.
        EXIT    LE
20
        Debug   cache," invalid"
        SETV
        EXIT


        END
@


4.6
log
@Uppercasified the "On" and "Off"
Delete "Version" file.
Changed the tokenisation of the messages to ensure that
 *Cache Invalid
didn't produce a duff syntax message.

Version 0.18. Tagged as 'ARM-0_18'
@
text
@d35 3
a37 3
        MOVEQ   r1, #MMU_CacheOn_EORMask        ; enable or disable the cache as appropriate.
        MOVNE   r1, #MMU_CacheOff_EORMask
        MOV     r2, #MMU_Cache_ANDMask
d112 3
a114 3
        MOVEQ   r1, #MMU_CacheOn_EORMask        ; enable or disable the cache as appropriate.
        MOVNE   r1, #MMU_CacheOff_EORMask
        MOV     r2, #MMU_Cache_ANDMask
@


4.5
log
@removed nefarious code for dubious specific control on StrongARM
and (ho ho) ARM810
still assumes that kernel OS_MMUControl will do the right thing to
control all caches when just the W and C bits are toggled
tested on Risc PC

Version 0.17. Not tagged
@
text
@d49 1
a49 1
        DCB     "Syntax: *$Command [on|off]",0
d53 1
a53 1
        DCB     "Syntax: *Configure $Command on|off",0
d58 1
a58 1
        DCB     "Syntax: *$Command [on|off]",0
d63 1
a63 1
        DCB     "Syntax: *Configure $Command on|off",0
@


4.4
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 0.17. Tagged as 'ARM-0_17'
@
text
@a103 125
  [ {TRUE} ;StrongARM - allow secret option of cache [i][d][w] for setting cache/write buffer status
           ;            (each element on if corresponding letter present, else off)
           ;            also allow [s|f] for force slow or force fast clock (neither means leave alone)
        Push    "r0-r5"
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&A000         ; have we a StrongARM
        CMPEQ   r1,#1             ; and one parameter?
        Pull    "r0-r5",NE
        BNE     %FT09
        MOV     r3,#5
        MOV     r4,r0
        MOV     r5,#0
06
        SUBS    r3,r3,#1
        BEQ     %FT08
        LDRB    r2,[r4],#1
        CMP     r2,#"I"
        CMPNE   r2,#"i"
        ORREQ   r5,r5,#&1000      ; Icache bit
        BEQ     %BT06
        CMP     r2,#"D"
        CMPNE   r2,#"d"
        ORREQ   r5,r5,#4          ; Dcache bit
        BEQ     %BT06
        CMP     r2,#"W"
        CMPNE   r2,#"w"
        ORREQ   r5,r5,#8          ; Wbuffer bit
        BEQ     %BT06
        CMP     r2,#"F"
        CMPNE   r2,#"f"
        ORREQ   r5,r5,#&80000000  ; pseudo bit for fast clock
        BEQ     %BT06
        CMP     r2,#"S"
        CMPNE   r2,#"s"
        ORREQ   r5,r5,#&40000000  ; pseudo bit for slow clock
        BEQ     %BT06
        CMP     r2,#" "
        Pull    "r0-r5",GT
        BGT     %FT09             ; not recognised
08
        TST     r5, #&80000000
        MCRNE   CP15,0,r0,C15,C1,2 ; fast clock
        TST     r5, #&40000000
        MCRNE   CP15,0,r0,C15,C2,2 ; slow clock
   [ {TRUE} ; found this bugette at time of adding ARM810support - set FALSE to be as for 3.71 05 Feb
        BIC     r5,r5,#&c0000000   ; clear the fake bits before using in MCR
   ]
        MOV     r1, #MMU_CacheOff_EORMask
        MOV     r2, #MMU_Cache_ANDMask
        MOV     r0, #0
        SWI     XOS_MMUControl     ; caches and WB off first, so that any cleaning flushing is done
        MRC     CP15,0,r4,C1,C0,0  ; read current control reg value
        ORR     r4,r4,r5           ; munge in the on bits
        MCR     CP15,0,r4,C1,C0,0  ; set it directly (XOS_MMUControl would fiddle things, for backward compatibility)
        MOV     r0,#0
        MOV     r1,#0
        MOV     r2,#-1
        SWI     XOS_MMUControl     ; dummy read to force kernel to update soft copy
        Pull   "r0-r5"
        EXIT
09
  ]

  [ ARM810support
        Push    "r0-r5,lr"
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&8000         ; have we an ARM810?
        CMPEQ   r1,#1             ; and one parameter?
        Pull    "r0-r5,lr",NE
        BNE     %FT29
        MOV     r3,#5
        MOV     r4,r0
        MOV     r5,#0
26
        SUBS    r3,r3,#1
        BEQ     %FT28
        LDRB    r2,[r4],#1
        CMP     r2,#"Z"
        CMPNE   r2,#"z"
        ORREQ   r5,r5,#&0800      ; Z bit (branch prediction)
        BEQ     %BT26
        CMP     r2,#"C"
        CMPNE   r2,#"c"
        ORREQ   r5,r5,#4          ; cache bit
        BEQ     %BT26
        CMP     r2,#"W"
        CMPNE   r2,#"w"
        ORREQ   r5,r5,#8          ; Wbuffer bit
        BEQ     %BT26
        CMP     r2,#"P"
        CMPNE   r2,#"p"
        ORREQ   r5,r5,#&80000000  ; pseudo bits (31:30) for PLL clock
        BEQ     %BT26
        CMP     r2,#"R"
        CMPNE   r2,#"r"
        ORREQ   r5,r5,#&C0000000  ; pseudo bits (31:30) for Refclk pin clock
        BEQ     %BT26
        CMP     r2,#"B"
        CMPNE   r2,#"b"
        ORREQ   r5,r5,#&40000000  ; pseudo bits (31:30) for bus clock (no dynamic switching)
        BEQ     %BT26
        CMP     r2,#" "
        Pull    "r0-r5,lr",GT
        BGT     %FT29             ; not recognised
28
        BL      ARM810clockcontrol
        BIC     r5,r5,#&c0000000
        MOV     r1, #MMU_CacheOff_EORMask
        MOV     r2, #MMU_Cache_ANDMask
        MOV     r0, #0
        SWI     XOS_MMUControl     ; cache,WB,prediction off first, so that things are done cleanly by kernel
        MRC     CP15,0,r4,C1,C0,0  ; read current control reg value
        ORR     r4,r4,r5           ; munge in the on bits
        MCR     CP15,0,r4,C1,C0,0  ; set it directly (XOS_MMUControl would fiddle things, for backward compatibility)
        MOV     r0,#0
        MOV     r1,#0
        MOV     r2,#-1
        SWI     XOS_MMUControl     ; dummy read to force kernel to update soft copy
        Pull    "r0-r5,lr"
        EXIT
29
  ]

a124 69

  [ {TRUE}  ;StrongARM
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&A000         ; have we a StrongARM?
        BNE     %FT11
        MRC     CP15,0,r1,C1,C0,0 ; read current control reg value directly
        MOV     r0,#0
        TST     r1,#&1000         ; Icache
        ADDNE   r0,r0,#1
        TST     r1,#8             ; Wbuffer
        ADDNE   r0,r0,#1
        TST     r1,#4             ; Dcache
        ADDNE   r0,r0,#1
        CMP     r0,#0
        BEQ     %FT11
        CMP     r0,#3
        BEQ     %FT11
        MOV     r0,#"("
        SWI     XOS_WriteC
        TST     r1,#&1000
        MOVNE   r0,#"i"
        SWINE   XOS_WriteC
        TST     r1,#4
        MOVNE   r0,#"d"
        SWINE   XOS_WriteC
        TST     r1,#8
        MOVNE   r0,#"w"
        SWINE   XOS_WriteC
        MOV     r0,#")"
        SWI     XOS_WriteC
        MOV     r0,#" "
        SWI     XOS_WriteC
11
  ]

  [ ARM810support
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&8000         ; have we an ARM810?
        BNE     %FT21
        MRC     CP15,0,r1,C1,C0,0 ; read current control reg value directly
        MOV     r0,#0
        TST     r1,#&0800         ; Z bit (branch prediction)
        ADDNE   r0,r0,#1
        TST     r1,#8             ; Wbuffer
        ADDNE   r0,r0,#1
        TST     r1,#4             ; Cache
        ADDNE   r0,r0,#1
        CMP     r0,#0
        CMPNE   r0,#3
        BEQ     %FT21
        MOV     r0,#"("
        SWI     XOS_WriteC
        TST     r1,#&0800
        MOVNE   r0,#"z"
        SWINE   XOS_WriteC
        TST     r1,#4
        MOVNE   r0,#"c"
        SWINE   XOS_WriteC
        TST     r1,#8
        MOVNE   r0,#"w"
        SWINE   XOS_WriteC
        MOV     r0,#")"
        SWI     XOS_WriteC
        MOV     r0,#" "
        SWI     XOS_WriteC
21
  ]
@


4.3
log
@Version RO_3_71 merged
@
text
@d25 1
a25 1
        ENTRY   "r1,r2"
d96 1
a96 1
        ENTRY
d345 1
a345 1
        ENTRY   "r0-r3"
d418 1
a418 1
        ENTRY   "r1-r3"
d443 1
a443 1
        ENTRY
@


4.2
log
@RiscOS 3.70 version taken
@
text
@d149 3
d162 1
a162 1
        SWI     XOS_MMUControl     ; dummy read to force kernel to update sooft copy
d168 61
d278 1
a278 1
        SWINE   XOS_WriteC       
d285 35
@


4.1
log
@Initial revision
@
text
@d104 61
d187 34
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a103 61
  [ {TRUE} ;StrongARM - allow secret option of cache [i][d][w] for setting cache/write buffer status
           ;            (each element on if corresponding letter present, else off)
           ;            also allow [s|f] for force slow or force fast clock (neither means leave alone)
        Push    "r0-r5"
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&A000         ; have we a StrongARM
        CMPEQ   r1,#1             ; and one parameter?
        Pull    "r0-r5",NE
        BNE     %FT09
        MOV     r3,#5
        MOV     r4,r0
        MOV     r5,#0
06
        SUBS    r3,r3,#1
        BEQ     %FT08
        LDRB    r2,[r4],#1
        CMP     r2,#"I"
        CMPNE   r2,#"i"
        ORREQ   r5,r5,#&1000      ; Icache bit
        BEQ     %BT06
        CMP     r2,#"D"
        CMPNE   r2,#"d"
        ORREQ   r5,r5,#4          ; Dcache bit
        BEQ     %BT06
        CMP     r2,#"W"
        CMPNE   r2,#"w"
        ORREQ   r5,r5,#8          ; Wbuffer bit
        BEQ     %BT06
        CMP     r2,#"F"
        CMPNE   r2,#"f"
        ORREQ   r5,r5,#&80000000  ; pseudo bit for fast clock
        BEQ     %BT06
        CMP     r2,#"S"
        CMPNE   r2,#"s"
        ORREQ   r5,r5,#&40000000  ; pseudo bit for slow clock
        BEQ     %BT06
        CMP     r2,#" "
        Pull    "r0-r5",GT
        BGT     %FT09             ; not recognised
08
        TST     r5, #&80000000
        MCRNE   CP15,0,r0,C15,C1,2 ; fast clock
        TST     r5, #&40000000
        MCRNE   CP15,0,r0,C15,C2,2 ; slow clock
        MOV     r1, #MMU_CacheOff_EORMask
        MOV     r2, #MMU_Cache_ANDMask
        MOV     r0, #0
        SWI     XOS_MMUControl     ; caches and WB off first, so that any cleaning flushing is done
        MRC     CP15,0,r4,C1,C0,0  ; read current control reg value
        ORR     r4,r4,r5           ; munge in the on bits
        MCR     CP15,0,r4,C1,C0,0  ; set it directly (XOS_MMUControl would fiddle things, for backward compatibility)
        MOV     r0,#0
        MOV     r1,#0
        MOV     r2,#-1
        SWI     XOS_MMUControl     ; dummy read to force kernel to update sooft copy
        Pull   "r0-r5"
        EXIT
09
  ]

a125 34
  [ {TRUE}  ;StrongARM
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&A000         ; have we a StrongARM?
        BNE     %FT11
        MRC     CP15,0,r1,C1,C0,0 ; read current control reg value directly
        MOV     r0,#0
        TST     r1,#&1000         ; Icache
        ADDNE   r0,r0,#1
        TST     r1,#8             ; Wbuffer
        ADDNE   r0,r0,#1
        TST     r1,#4             ; Dcache
        ADDNE   r0,r0,#1
        CMP     r0,#0
        BEQ     %FT11
        CMP     r0,#3
        BEQ     %FT11
        MOV     r0,#"("
        SWI     XOS_WriteC
        TST     r1,#&1000
        MOVNE   r0,#"i"
        SWINE   XOS_WriteC
        TST     r1,#4
        MOVNE   r0,#"d"
        SWINE   XOS_WriteC
        TST     r1,#8
        MOVNE   r0,#"w"
        SWINE   XOS_WriteC       
        MOV     r0,#")"
        SWI     XOS_WriteC
        MOV     r0,#" "
        SWI     XOS_WriteC
11
  ]
@


4.1.3.2
log
@Version RO_3_71 taken
@
text
@a148 3
   [ {TRUE} ; found this bugette at time of adding ARM810support - set FALSE to be as for 3.71 05 Feb
        BIC     r5,r5,#&c0000000   ; clear the fake bits before using in MCR
   ]
d159 1
a159 1
        SWI     XOS_MMUControl     ; dummy read to force kernel to update soft copy
a164 61
  [ ARM810support
        Push    "r0-r5,lr"
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&8000         ; have we an ARM810?
        CMPEQ   r1,#1             ; and one parameter?
        Pull    "r0-r5,lr",NE
        BNE     %FT29
        MOV     r3,#5
        MOV     r4,r0
        MOV     r5,#0
26
        SUBS    r3,r3,#1
        BEQ     %FT28
        LDRB    r2,[r4],#1
        CMP     r2,#"Z"
        CMPNE   r2,#"z"
        ORREQ   r5,r5,#&0800      ; Z bit (branch prediction)
        BEQ     %BT26
        CMP     r2,#"C"
        CMPNE   r2,#"c"
        ORREQ   r5,r5,#4          ; cache bit
        BEQ     %BT26
        CMP     r2,#"W"
        CMPNE   r2,#"w"
        ORREQ   r5,r5,#8          ; Wbuffer bit
        BEQ     %BT26
        CMP     r2,#"P"
        CMPNE   r2,#"p"
        ORREQ   r5,r5,#&80000000  ; pseudo bits (31:30) for PLL clock
        BEQ     %BT26
        CMP     r2,#"R"
        CMPNE   r2,#"r"
        ORREQ   r5,r5,#&C0000000  ; pseudo bits (31:30) for Refclk pin clock
        BEQ     %BT26
        CMP     r2,#"B"
        CMPNE   r2,#"b"
        ORREQ   r5,r5,#&40000000  ; pseudo bits (31:30) for bus clock (no dynamic switching)
        BEQ     %BT26
        CMP     r2,#" "
        Pull    "r0-r5,lr",GT
        BGT     %FT29             ; not recognised
28
        BL      ARM810clockcontrol
        BIC     r5,r5,#&c0000000
        MOV     r1, #MMU_CacheOff_EORMask
        MOV     r2, #MMU_Cache_ANDMask
        MOV     r0, #0
        SWI     XOS_MMUControl     ; cache,WB,prediction off first, so that things are done cleanly by kernel
        MRC     CP15,0,r4,C1,C0,0  ; read current control reg value
        ORR     r4,r4,r5           ; munge in the on bits
        MCR     CP15,0,r4,C1,C0,0  ; set it directly (XOS_MMUControl would fiddle things, for backward compatibility)
        MOV     r0,#0
        MOV     r1,#0
        MOV     r2,#-1
        SWI     XOS_MMUControl     ; dummy read to force kernel to update soft copy
        Pull    "r0-r5,lr"
        EXIT
29
  ]

d214 1
a214 1
        SWINE   XOS_WriteC
a220 35

  [ ARM810support
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&8000         ; have we an ARM810?
        BNE     %FT21
        MRC     CP15,0,r1,C1,C0,0 ; read current control reg value directly
        MOV     r0,#0
        TST     r1,#&0800         ; Z bit (branch prediction)
        ADDNE   r0,r0,#1
        TST     r1,#8             ; Wbuffer
        ADDNE   r0,r0,#1
        TST     r1,#4             ; Cache
        ADDNE   r0,r0,#1
        CMP     r0,#0
        CMPNE   r0,#3
        BEQ     %FT21
        MOV     r0,#"("
        SWI     XOS_WriteC
        TST     r1,#&0800
        MOVNE   r0,#"z"
        SWINE   XOS_WriteC
        TST     r1,#4
        MOVNE   r0,#"c"
        SWINE   XOS_WriteC
        TST     r1,#8
        MOVNE   r0,#"w"
        SWINE   XOS_WriteC
        MOV     r0,#")"
        SWI     XOS_WriteC
        MOV     r0,#" "
        SWI     XOS_WriteC
21
  ]

@


4.1.3.1.2.1
log
@Merged from 3.71 CD
@
text
@a148 3
   [ {TRUE} ; found this bugette at time of adding ARM810support - set FALSE to be as for 3.71 05 Feb
        BIC     r5,r5,#&c0000000   ; clear the fake bits before using in MCR
   ]
d159 1
a159 1
        SWI     XOS_MMUControl     ; dummy read to force kernel to update soft copy
a164 61
  [ ARM810support
        Push    "r0-r5,lr"
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&8000         ; have we an ARM810?
        CMPEQ   r1,#1             ; and one parameter?
        Pull    "r0-r5,lr",NE
        BNE     %FT29
        MOV     r3,#5
        MOV     r4,r0
        MOV     r5,#0
26
        SUBS    r3,r3,#1
        BEQ     %FT28
        LDRB    r2,[r4],#1
        CMP     r2,#"Z"
        CMPNE   r2,#"z"
        ORREQ   r5,r5,#&0800      ; Z bit (branch prediction)
        BEQ     %BT26
        CMP     r2,#"C"
        CMPNE   r2,#"c"
        ORREQ   r5,r5,#4          ; cache bit
        BEQ     %BT26
        CMP     r2,#"W"
        CMPNE   r2,#"w"
        ORREQ   r5,r5,#8          ; Wbuffer bit
        BEQ     %BT26
        CMP     r2,#"P"
        CMPNE   r2,#"p"
        ORREQ   r5,r5,#&80000000  ; pseudo bits (31:30) for PLL clock
        BEQ     %BT26
        CMP     r2,#"R"
        CMPNE   r2,#"r"
        ORREQ   r5,r5,#&C0000000  ; pseudo bits (31:30) for Refclk pin clock
        BEQ     %BT26
        CMP     r2,#"B"
        CMPNE   r2,#"b"
        ORREQ   r5,r5,#&40000000  ; pseudo bits (31:30) for bus clock (no dynamic switching)
        BEQ     %BT26
        CMP     r2,#" "
        Pull    "r0-r5,lr",GT
        BGT     %FT29             ; not recognised
28
        BL      ARM810clockcontrol
        BIC     r5,r5,#&c0000000
        MOV     r1, #MMU_CacheOff_EORMask
        MOV     r2, #MMU_Cache_ANDMask
        MOV     r0, #0
        SWI     XOS_MMUControl     ; cache,WB,prediction off first, so that things are done cleanly by kernel
        MRC     CP15,0,r4,C1,C0,0  ; read current control reg value
        ORR     r4,r4,r5           ; munge in the on bits
        MCR     CP15,0,r4,C1,C0,0  ; set it directly (XOS_MMUControl would fiddle things, for backward compatibility)
        MOV     r0,#0
        MOV     r1,#0
        MOV     r2,#-1
        SWI     XOS_MMUControl     ; dummy read to force kernel to update soft copy
        Pull    "r0-r5,lr"
        EXIT
29
  ]

d214 1
a214 1
        SWINE   XOS_WriteC
a220 35

  [ ARM810support
        MRC     CP15,0,r2,C0,C0,0
        AND     r2,r2,#&F000
        CMP     r2,#&8000         ; have we an ARM810?
        BNE     %FT21
        MRC     CP15,0,r1,C1,C0,0 ; read current control reg value directly
        MOV     r0,#0
        TST     r1,#&0800         ; Z bit (branch prediction)
        ADDNE   r0,r0,#1
        TST     r1,#8             ; Wbuffer
        ADDNE   r0,r0,#1
        TST     r1,#4             ; Cache
        ADDNE   r0,r0,#1
        CMP     r0,#0
        CMPNE   r0,#3
        BEQ     %FT21
        MOV     r0,#"("
        SWI     XOS_WriteC
        TST     r1,#&0800
        MOVNE   r0,#"z"
        SWINE   XOS_WriteC
        TST     r1,#4
        MOVNE   r0,#"c"
        SWINE   XOS_WriteC
        TST     r1,#8
        MOVNE   r0,#"w"
        SWINE   XOS_WriteC
        MOV     r0,#")"
        SWI     XOS_WriteC
        MOV     r0,#" "
        SWI     XOS_WriteC
21
  ]

@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
