head	4.4;
access;
symbols
	SCSIDriver-1_19:4.4
	SCSIDriver-1_18:4.4
	SCSIDriver-1_17:4.3
	SCSIDriver-1_16:4.3
	SCSIDriver-1_15:4.2
	RO_5_07:4.2
	SCSIDriver-1_14:4.2
	SCSIDriver-1_13:4.2
	SCSIDriver-1_12:4.2
	SCSIDriver-1_11:4.2
	dellis_autobuild_BaseSW:4.1
	SCSIDriver-1_10:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	nturton_SCSIDriver-1_10:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SCSIDriver_1_10:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA:4.1.0.2
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2013.08.24.20.24.32;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	TKmQHiMVsx7enK2x;

4.3
date	2013.01.13.10.10.12;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	RqDXIERutm0V82Aw;

4.2
date	2003.05.23.13.23.17;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.37.22;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.37.22;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.40.39;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.01.40;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.53.52;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Update SCSI podule driver for more recent SCSI switchers
The SCSISoftWD33C93 driver was used as a test bed for the SCSI switcher, but a typo in the supported features mask meant that it didn't work any longer after SCSI switch 2.01 (version 2.00 didn't check the features mask, hence it worked).
Makefile
* Can now produce either SCSILog or standalone SCSIDriver or SCSISoft module, based on the TARGET and/or COMPONENT
SCSIEquates
* Shuffle some common equates around so the same header can be used with SCSILog and SCSIDriver
SCSIMacros
* A cut and paste fumble meant the DisableIRQs macro actually left them enabled
* Lined up
SCSIDriver
* Changed to accept podule numbers 0-7 for Risc PC (was 0-3)
* Get the base address from Podule manager rather than IOC era logical addresses
* Chopped out some long redundant switches
* Use PSR manipulation macros to allow 26 or 26/32 or 32 bit compatible variants
* Fix typo in features mask to &22 (was &21)
* Use PLP after PHPSEI rather than RestPSR, the preserve value from PHPSEI is not guaranteed RestPSR compatible
* Don't re-register a second time on Service_Reset, this is not needed in the loaded-from-ROM; loaded-from-disc; or reinit cases (since the module initialisation already registers), and don't wipe the workspace when a client to SCSI switcher (it get's very confused as transactions are in play)
SCSILog
* Delete defines now taken from SCSIEquates
* Get the base address from Podule manager rather than IOC era logical addresses
* Changed to accept podule numbers 0-7 for Risc PC (was 0-3)

Requires HdrSrc-2_32
Tested on AKA31 podule, on a StrongARM RISC OS 3.70, and a StrongARM RISC OS 5.20, in both SCSISoftWD33C93 and SCSIDriver configurations connected to a CD-ROM drive and harddisc, copying the contents of a random CD onto the harddisc.

Version 1.18. Tagged as 'SCSIDriver-1_18'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;------------------------------------------------------------------------------
;
; RISC OS SCSI log module
;
; Author : R.C.Manby
; © Acorn Computers Ltd
;
; History
;   4-Jul-88: RCM: Started
;
;------------------------------------------------------------------------------

                GBLL trace
trace           SETL {FALSE}

        AREA |!!!Module|,CODE,READONLY

Module_BaseAddr

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:SCSI
        GET     Hdr:SCSIErr
        GET     Hdr:Podule
        GET     VersionASM
        GET     hdr.SCSIEquates

;==============================================================================
;
; Macro definitions
; =================
;
;------------------------------------------------------------------------------
;
        MACRO
        MySWI   $swiname
        ASSERT  SCSILogSWI_Base+(.-SCSILog_SWItable)/4 = $swiname
        B       SWI_$swiname
        MEND


        MACRO
        mess    $cond,$s1,$s2,$s3,$s4,$s5
 [ trace
        B$cond  %F11
        BAL     %F21
11
        Push    "LR"
        SWI     OS_WriteS
 [ "$s1"="NL"
 = CR,LF
 |
 = "ScsiLog: $s1"
 ]
 [ "$s2"=""
 |
  [ "$s2"="NL"
  = CR,LF
  |
  = "$s2"
  ]
  [ "$s3"=""
  |
   [ "$s3"="NL"
   = CR,LF
   |
   = "$s3"
   ]
   [ "$s4"=""
   |
    [ "$s4"="NL"
    = CR,LF
    |
    = "$s4"
    ]
    [ "$s5"=""
    |
     [ "$s5"="NL"
     = CR,LF
     |
     = "$s5"
     ]
    ]
   ]
  ]
 ]
        =       0
        ALIGN
        Pull    "LR"
21
 ]
        MEND


        MACRO
        traceswi $s1
        mess , "SWI_SCSI_$s1", NL
        MEND


        MACRO
        tracerc $s1
        mess , "   $s1", NL
        MEND
;
;
;==============================================================================



;==========================================================================
;
; Module start
;

        ASSERT  (.=Module_BaseAddr)     ; Winge if we've generated code

        DCD     0                                   ; 0  Start - Not an application
        DCD     ModInit           - Module_BaseAddr ; 4  Initialisation
        DCD     0                                   ; 8  Die (aka Finalisation)
        DCD     0                                   ; C  Service
        DCD     ModTitleStr       - Module_BaseAddr ; 10 Title
        DCD     ModHelpStr        - Module_BaseAddr ; 14 Help string
        DCD     0                                   ; 18 Combined Help/* command table
        DCD     SCSILogSWI_Base                     ; 1C Chunk number of SWIs intercepted (MySWIBase)
        DCD     SCSILog_SWIdecode - Module_BaseAddr ; 20 Offset of code to handle SWIs (MySWIDecode)
        DCD     SCSILog_SWInames  - Module_BaseAddr ; 24 SWI Decoding table (MySWINames)
        DCD     0                                   ; 28 SWI Decoding code
        DCD     0                                   ; 32 Messages filename
        DCD     ModFlags          - Module_BaseAddr ; 36 Flags

ModTitleStr
        DCB     "SCSILog",0
        ALIGN

ModHelpStr
        DCB     "SCSILog",&09,&09,"$Module_MajorVersion ($Module_Date)",0
        ALIGN

ModFlags
 [ No32bitCode
        DCD     0
 |
        DCD     ModuleFlag_32bit
 ]



;==============================================================================
;
; ModInit - Module Initialisation entry
; =======
;
; On entry (in supervisor mode)
;   R10 -> environment string
;   R11  = 0            if loaded from filing system
;        > &03000000    if loaded from a podule and is the base of the podule
;        = 1..&02FFFFFF if being reincarnated and is the number of other
;                       incarnations
;   R12 -> private word (private word <> 0 implies reinitialisation)
;   R13  = supervisor stack pointer (FD stack)
;
; Must preserve processor mode, interrupt state, R7..R11,R13
; Can corrupt R0..R6,R12,R14 and flags
;
; Return by MOV PC,R14 with VC or VS & R0->error
;
ModInit
        mess    ,"ModInit",NL
        Push    "R10,R11,LR"

        LDR     R2,[R12]                ; If reinitialisation,
        TEQ     R2,#0                   ;
        BNE     exitModInit             ; do nothing
                
        CMP     R11,#&03000000          ; Loaded from a podule,
        BHS     ModIn_20                ; R11 is podule base address
        CMP     R11,#0
        BNE     exitModInit             ; If <>0, new incarnation, do nothing

;
; R11=0, means loaded from filing system, so look for a single digit podule
; number in the environment string (R10 points after the module name).
;
ModIn_10
        LDRB    R0,[R10],#1             ; Skip leading spaces
        CMP     R0,#" "                 ;
        BEQ     ModIn_10                ;

        SUBS    R3,R0,#"0"              ; Accept "0"..."7",
        MOVLT   R3,#0                   ; assume anything else (non-digit
        CMP     R3,#7                   ; or unspecified is podule zero).
        MOVHI   R3,#0                   ;
        SWI     XPodule_HardwareAddress
        LDRVC   R14,=Podule_BaseAddressBICMask
        BICVC   R11,R3,R14              ; Zap the CMOS RAM base
        MOVVS   R11,#0
ModIn_20
        BIC     R11,R11,#PoduleSpeedMask    ;Reduce to slow access address

        SWI     XSCSI_List              ; Ask ScsiDriver for a list of Podule base
        MOVVS   R0,#0                   ; addresses
        MOV     R3,#0

        Push    R0
        BVS     ModIn_40                ; ScsiDriver not installed (or knows nothing???)
ModIn_30
        LDR     R1,[R0],#4              ; Count number of podule addresses in list
        TEQ     R1,R11                  ;  (If R11 is a duplicate of one of the list
        MOVEQ   R11,#0                  ;   values, kill it).
        TEQ     R1,#0                   ; Don't count if null terminator
        ADDNE   R3,R3,#4                  
        BNE     ModIn_30                  
ModIn_40
        Pull    "R1"
        CMP     R11,#0                  ; Include latest entry?
        ADDNE   R3,R3,#4                  
        ADD     R3,R3,#4                ; And space for null terminator

        MOV     R0,#ModHandReason_Claim
        SWI     XOS_Module              ; In R3=size, Out R2->block
        BVS     err_NoRoom_forworkspace

        STR     R2,[R12]                ; Store ->WorkSpace in private word
                                          
        TEQ     R1,#0                   ; If no list obtained from ScsiDriver
        BEQ     ModIn_60                ;  then skip
ModIn_50
        LDR     R0,[R1],#4              ; else Copy null terminated list
        TEQ     R0,#0
        STRNE   R0,[R2],#4
        BNE     ModIn_50

ModIn_60
        CMP     R11,#0
        STRNE   R11,[R2],#4             ; Add our podule address to end of list
        MOV     R11,#0
        STR     R11,[R2],#4             ; Terminate the list

exitModInit
        Pull    "R10,R11,PC"

err_NoRoom_forworkspace
        ADR     R0,ErrorBlock_SCSI_NoRoom
        SETV
        B       exitModInit

        MakeErrorBlock SCSI_NoRoom      ; "No room for SCSI workspace"
;
;
;==============================================================================


;==============================================================================
;
; SCSILog SWI names and SWI dispatch
;
;------------------------------------------------------------------------------
;
SCSILog_SWInames
        DCB     "SCSI",0
        DCB     "LogVersion",0
        DCB     "LogList",0
        DCB     0
        ALIGN
;
;
;------------------------------------------------------------------------------
;
; SWI decoding
; ============
;
; On entry
;   R11  = SWI number within SCSILog_SWI block
;   R12 -> private word
;   R13  = Stack pointer
;
; On exit
;   R0..R7 return results, or are preserved
;
; Entered in SVC_mode with callers interrupt state
;
; May corrupt R10..R12, return with MOVS PC,R14
;
SCSILog_SWIdecode
        mess    ,"SCSILog_SWIdecode - Entry", NL
        Push    "R0-R9,LR"

        LDR     WsPtr,[R12]
        CMP     R11,#maxSWI
        ASSERT  (SCSILog_SWItable-. =8) ; Table must follow code
        ADDCC   PC,PC,R11,ASL #2
        B       err_SWIunkn
SCSILog_SWItable
        MySWI   SCSI_LogVersion
        MySWI   SCSI_LogList

maxSWI  * (.-SCSILog_SWItable):SHR:2

err_SWIunkn
        ADR     R0,ErrorBlock_SCSI_SWIunkn
        SETV
        B       exitSWIdecode

        MakeErrorBlock SCSI_SWIunkn     ; "Unknown SCSI SWI number"

exitSWIdecode
        STRVS   R0,StackedR0            ; Overwrite stacked R0 with ->error
        Pull    "R0-R9,LR"
        mess    ,"SCSILog_SWIdecode - Exit", NL
      [ :LNOT:No32bitCode
        TEQ     PC,PC
        MOVEQ   PC,LR
      ]
        ORRVS   LR,LR,#V_bit            ; Stacked Link had VClear, so set if error
        MOVS    PC,LR
;
;
;==============================================================================


;==============================================================================
;
; SWI_SCSI_LogVersion
; ===================
;
; On exit
;   R0 bits 0..7  software minor version number
;      bits 8..31 software major version number (100 for 1.00)
;   R1 bitset of  software features
;
SWI_SCSI_LogVersion
        traceswi "LogVersion"
        ADR     R0,VersionBlk
        LDMIA   R0,{R0,R1}              ; Pickup return values
        STMIA   R13,{R0,R1}             ; Write to StackedR0..StackedR1
        B       exitSWIdecode           ; will be popped on return

VersionBlk
        DCD SoftwareVersionNumber
        DCD SoftwareExtensions
;
;
;==============================================================================


;==============================================================================
;
; SWI SCSI_LogList
; ================
;
; On exit
;   R0 -> Null terminated list of podule addresses
;
SWI_SCSI_LogList
        traceswi "LogList"
        STR     WsPtr,StackedR0

        B       exitSWIdecode
;
;
;==============================================================================

        END

@


4.3
log
@Knocked columns into line
SCSIDriver: conventional columns used via automated tidier, assembles to same binary (not tested)
SCSILoader: made 32 bit compatible, no longer peeks IRQsema, tested briefly in a podule
SCSILog: conventional columns used via automated tider, assembles to same binary (not tested)

Version 1.16. Tagged as 'SCSIDriver-1_16'
@
text
@a29 1

d41 4
a44 27
        GET     Hdr:SCSIErr    ;Insert me in Hdr.NewErrors?
        GET     Version

;------------------------------------------------------------------------------
;
; Access to stacked registers - TO BE USED WITH CAUTION!
; ===========================

                ^ 0, R13
StackedR0       # 4
StackedR1       # 4
StackedR2       # 4
StackedR3       # 4
StackedR4       # 4
StackedR5       # 4
StackedR6       # 4
StackedR7       # 4


Podule0SlowAccess       EQU &03240000
PoduleSpeedMask         EQU &00180000


LF      *   10
CR      *   13
SPACE   *   32

d58 2
a59 4
;
;
;------------------------------------------------------------------------------
;
d155 1
a155 1
        DCB     "SCSILog",&09,&09,"$VString ($Date)",0
d194 1
a194 1
        CMP     R11,#Podule0SlowAccess  ; Loaded from a podule,
d208 8
a215 14
        SUBS    R0,R0,#"0"              ; Accept "0".."3",
        MOVLT   R0,#0                   ; assume anything else ("4".."9",non-digit
        CMP     R0,#3                   ; or unspecified is podule zero).
        MOVGT   R0,#0                   ;
        MOV     R11,#Podule0SlowAccess
        ADD     R11,R11,R0,LSL #14

;
; R11 holds the podule base address
; (&03240000, &03244000, &03248000 or &0324C000) (slow access)
; (&032C0000, &032C4000, &032C8000 or &032CC000) (medium access)
; (&03340000, &03344000, &03348000 or &0334C000) (fast access)
; (&033C0000, &033C4000, &033C8000 or &033CC000) (sync. access)
;
d262 2
a263 1
        XError  SCSI_NoRoom
d319 2
a320 1
        XError  SCSI_SWIunkn
d328 2
d332 1
a333 1
        mess    ,"SCSILog_SWIdecode - Exit", NL
@


4.2
log
@* 32-bit compatible.
* Hard-coded podule addresses removed (for Iyonix compatibility).
* Now builds as a driver module (SCSISoftWD33C93) for the new central
  SCSIdriver despatch system. Can revert to building a standalone driver
  by changing the "soft" switch in the sources.

Version 1.11. Tagged as 'SCSIDriver-1_11'
@
text
@a26 5
                GBLL true
                GBLL false
true            SETL 1=1
false           SETL 1=0

d28 1
a28 1
trace           SETL false
d35 9
a43 28
        GET Hdr:ListOpts  ; These first three must be in this order
        GET Hdr:Macros
        GET Hdr:System

        GET Hdr:ModHand
;        GET Hdr:Services
        GET Hdr:FSNumbers
        GET Hdr:NewErrors
;        GET Hdr:NewSpace
;        GET Hdr:Proc
;        GET Hdr:Tokens
;        GET Hdr:DevNos

        GET Hdr:SCSI
        GET Hdr:SCSIErr    ;Insert me in Hdr.NewErrors?
        GET Version


;------------------------------------------------------------------------------
;
; Register names
; ==============
;
;WsPtr          RN 12
StkPtr          RN 13
Link            RN 14
;PC             RN 15

d50 9
a58 10
 ^ 0,StkPtr
StackedR0   # 4
StackedR1   # 4
StackedR2   # 4
StackedR3   # 4
StackedR4   # 4
StackedR5   # 4
StackedR6   # 4
StackedR7   # 4

d79 1
a79 1
        ASSERT  SCSILog_SWIbase+(.-SCSILog_SWItable)/4 = $swiname
d160 1
a160 19
        ASSERT (.=Module_BaseAddr)      ;Winge if we've generated code

SCSILog_SWIbase * Module_SWISystemBase + (SCSILogSWI * Module_SWIChunkSize)

;amg 24/10/91 added '-Module_BaseAddr' to keep later AASMs happy

        DCD 0                 ; 0  Start - Not an application
        DCD ModInit-Module_BaseAddr           ; 4  Initialisation
        DCD 0                 ; 8  Die (aka Finalisation)
        DCD 0                 ; C  Service
        DCD ModTitleStr-Module_BaseAddr       ; 10 Title
        DCD ModHelpStr-Module_BaseAddr        ; 14 Help string
        DCD 0                 ; 18 Combined Help/* command table
        DCD SCSILog_SWIbase   ; 1C Chunk number of SWIs intercepted (MySWIBase)
        DCD SCSILog_SWIdecode-Module_BaseAddr ; 20 Offset of code to handle SWIs (MySWIDecode)
        DCD SCSILog_SWInames-Module_BaseAddr  ; 24 SWI Decoding table (MySWINames)
        DCD 0                 ; 28 SWI Decoding code
        DCD 0                 ; 32 Messages filename
        DCD ModFlags-Module_BaseAddr          ; 36 Flags
d162 13
d186 1
a186 1
        DCD 0
d188 1
a188 1
        DCD ModuleFlag_32bit
d213 2
a214 2
        mess ,"ModInit",NL
        Push "R10,R11,Link"
d216 8
a223 8
        LDR R2,[R12]            ;If reinitialisation,
        TEQ R2,#0               ;
        BNE exitModInit         ; do nothing

        CMP R11,#Podule0SlowAccess      ;Loaded from a podule,
        BHS ModIn_20                    ; R11 is podule base address
        CMP R11,#0
        BNE exitModInit         ;If <>0, new incarnation, do nothing
d230 10
a239 10
        LDRB R0,[R10],#1        ;Skip leading spaces
        CMP R0,#" "             ;
        BEQ ModIn_10            ;

        SUBS R0,R0,#"0"         ;Accept "0".."3",
        MOVLT R0,#0             ; assume anything else ("4".."9",non-digit
        CMP R0,#3               ; or unspecified is podule zero).
        MOVGT R0,#0             ;
        MOV R11,#Podule0SlowAccess
        ADD R11,R11,R0,LSL #14
d249 1
a249 1
        BIC R11,R11,#PoduleSpeedMask    ;Reduce to slow access address
d251 3
a253 3
        SWI XSCSI_List          ;Ask ScsiDriver for a list of Podule base
        MOVVS R0,#0             ; addresses
        MOV R3,#0
d255 2
a256 2
        Push R0
        BVS ModIn_40            ;ScsiDriver not installed (or knows nothing???)
d258 6
a263 6
        LDR R1,[R0],#4          ;Count number of podule addresses in list
        TEQ R1,R11              ; (If R11 is a duplicate of one of the list
        MOVEQ R11,#0            ;   values, kill it).
        TEQ R1,#0               ;Don't count if null terminator
        ADDNE R3,R3,#4
        BNE ModIn_30
d265 13
a277 13
        Pull "R1"
        CMP R11,#0              ;Include latest entry?
        ADDNE R3,R3,#4
        ADD R3,R3,#4            ;And space for null terminator

        MOV R0,#ModHandReason_Claim
        SWI XOS_Module          ;In R3=size, Out R2->block
        BVS err_NoRoom_forworkspace

        STR R2,[R12]            ;Store ->WorkSpace in private word

        TEQ R1,#0               ;If no list obtained from ScsiDriver
        BEQ ModIn_60            ; then skip
d279 4
a282 4
        LDR R0,[R1],#4          ;else Copy null terminated list
        TEQ R0,#0
        STRNE R0,[R2],#4
        BNE ModIn_50
d285 4
a288 4
        CMP R11,#0
        STRNE R11,[R2],#4       ;Add our podule address to end of list
        MOV R11,#0
        STR R11,[R2],#4         ;Terminate the list
d291 1
a291 1
        Pull "R10,R11,PC"
d294 2
a295 2
        XError SCSI_NoRoom
        B exitModInit
d297 1
a297 1
        MakeErrorBlock SCSI_NoRoom   ;"No room for SCSI workspace"
d310 4
a313 4
        DCB "SCSI",0
        DCB "LogVersion",0
        DCB "LogList",0
        DCB 0
d335 2
a336 12
        mess ,"SCSILog_SWIdecode - Entry", NL
        Push "R0-R9,Link"

        LDR WsPtr,[R12]
;        CMP WsPtr,#0
;        BEQ                     ;No workspace, report "No hardware"

        CMP R11,#maxSWI
        ASSERT (SCSILog_SWItable-. =8)     ;Table must follow code
        ADDCC PC,PC,R11,ASL #2
        B err_SWIunkn

d338 5
d344 2
a345 2
        MySWI SCSI_LogVersion
        MySWI SCSI_LogList
d350 2
a351 2
        XError SCSI_SWIunkn
        B exitSWIdecode
d353 1
a353 1
        MakeErrorBlock SCSI_SWIunkn  ;"Unknown SCSI SWI number"
d356 7
a362 7
        STRVS R0,StackedR0      ;Overwrite stacked R0 with ->error
        Pull "R0-R9,Link"
        TEQ PC,PC
        MOVEQ PC,Link
        ORRVS Link,Link,#V_bit  ;Stacked Link had VClear, so set if error
        mess ,"SCSILog_SWIdecode - Exit", NL
        MOVS PC,Link
d380 4
a383 4
        ADR R0,VersionBlk
        LDMIA R0,{R0,R1}                ;Pickup return values
        STMIA StkPtr,{R0,R1}            ;Write to StackedR0..StackedR1
        B exitSWIdecode                 ; will be popped on return
d403 1
a403 1
        STR WsPtr,StackedR0
d405 1
a405 1
        B exitSWIdecode
@


4.1
log
@Initial revision
@
text
@d36 1
a36 1

d46 1
a46 1
        GET Hdr:File ;amg 24/10/91 - needed for current hdr.newerrors
d48 1
a48 1
        GET Hdr:NewSpace
a183 1
        LEADR Module_LoadAddr
d188 1
a188 1
                                            
d202 2
a203 2
        DCD 0
        DCD 0
d214 7
d280 1
a280 1
                                        
d393 2
d438 1
a438 2
        MOV R0,WsPtr
        STR R0,StackedR0
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
