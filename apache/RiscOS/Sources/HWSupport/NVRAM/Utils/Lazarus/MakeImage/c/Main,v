head	1.6;
access;
symbols
	NVRAM-0_68:1.6
	NVRAM-0_67:1.6
	NVRAM-0_66:1.6
	RO_5_07:1.6
	NVRAM-0_65:1.6
	NVRAM-0_64:1.6
	NVRAM-0_63:1.6
	NVRAM-0_62:1.6
	NVRAM-0_61:1.6
	NVRAM-0_60:1.6
	NVRAM-0_59:1.6
	NVRAM-0_58:1.6
	NVRAM-0_57:1.6
	NVRAM-0_56:1.6
	NVRAM-0_55:1.6
	NVRAM-0_54:1.5
	NVRAM-0_53:1.5
	NVRAM-0_52:1.3
	NVRAM-0_51:1.3
	NVRAM-0_50:1.2
	dellis_autobuild_BaseSW:1.1
	NVRAM-0_49:1.1
	NVRAM-0_48:1.1
	NVRAM-0_47:1.1
	NVRAM-0_45:1.1
	dcotton_autobuild_BaseSW:1.6;
locks; strict;
comment	@# @;


1.6
date	2001.04.19.13.34.07;	author dcotton;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.27.11.46.39;	author sforrest;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.24.16.48.42;	author rthornbu;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.12.13.20.58;	author rthornbu;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.11.16.10.58;	author dcotton;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.02.09.57.31;	author jfletche;	state Exp;
branches;
next	;


desc
@@


1.6
log
@    Various little improvements.

Detail:
    Reordered the makefile slightly.
    There is now a Docs directory, in which is a file that contains detail of
the five SWIs that were added to version 0.48 of this module. This
information was not available elsewhere and needs to go into the FS sometime.
    Replace the Mk... obey files with !Mk... files.
    The header files now include the five new SWI definitions.

Admin:
    Untested.

Version 0.55. Tagged as 'NVRAM-0_55'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*****************************************************************************
* $Id: Main,v 1.5 2000/11/27 11:46:39 sforrest Exp $
* $Name: NVRAM-0_54 $
*
* Author(s):  David Cotton, Justin Fletcher
* Project(s): Lazarus (300), Bethany (333)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose:
*
* Reads in a configuration file and outputs an NVRAM image suitable for
*  programming into the 4K EEPROM part on Lazarus boards.
* Currently it only allows you to write tags of string and IP types;
*  other types are not needed for the Lazarus project.
* Please note that this code has been thrown togeter quickly; some areas
*  (particularly the string to IP address conversions) are hacky in the
*  extreme, and should be looked at again if this code is going to be
*  extensively re-used.
* Also some routines have return codes that do not get checked in the calling
*  routines; these checks have been left out deliberately and hence the
*  program may not be as error-safe as it could be.
* I have tried, where possible, to enter references to the EEPROM programming
*  information specification to give anyone reading this code an idea of
*  quite what the code is meant to be doing.
* I have also left in all my debugging code to act as an aid in further
*  development of the code. Much of the diagnostics produced by the program
*  are unnecessary, and can be stripped out once the program is deemed to
*  be working correctly.
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>



/*****************************************************************************
* MACROS
*****************************************************************************/
/* This symbol defines the mazimum size any line in the file can be.
    It would be better to dynamically allocate the memory, but for this
    quick and simple program this will do */
#define LINE_BUFFER_SIZE 256

/* This symbol holds the size of the NVRAM area to be written. It is
    analogous to the size of the NVRAM device, which is 4K in the case of
    the Lazarus board. */
#define NVRAM_AREA_SIZE 4096


/* Forward prototypes */
bool parse_file(const char* const filename);
bool parse_line(char* line);
static char *RipNTrim(char *text);
static int match_values(const char* const tag_to_match, const char* const value);
bool check_values(void);
int strcmp_ci(const char *first, const char *second);
int lookup_country(char *country);
int calculate_timezone(char *timezone);
bool create_nvram_image(char nvram[]);
void pad_string(char* string, int pad_char, int string_end);
unsigned int create_bootblock(char* bootblock);
void write_big_endian_word(char *buff, unsigned int w);
void write_big_endian_short(char *buff, unsigned int w);
void write_little_endian_word(char *buff, unsigned int w);
bool write_nvram_image_to_file(const char* const filename, const char* const bootlbock);
void display_nvram_image(char nvram[]);



/*****************************************************************************
* Country listing
*****************************************************************************/
static struct {char *country; int number;} countries[] = {
  { "UK", 1 },
  { "Italy", 4 },
  { "Spain", 5 },
  { "France", 6 },
  { "Germany", 7 },
  { "Turkey", 20 },
  { "Ireland", 22 },
  { "Australia", 29 },
  { "South Africa", 52 }
};

/*****************************************************************************
* New enumerated types
*****************************************************************************/
typedef enum
{
  TagType_Nul = 0,
  TagType_String,
  TagType_IP,
  TagType_Host,     /* Unsupported by this program atm */
  TagType_Proxy,    /* Unsupported by this program atm */
  TagType_Soak,     /* Unsupported by this program atm */
  TagType_PLIP,     /* Unsupported by this program atm */
  TagType_Phone,    /* Unsupported by this program atm */
  TagType_HTTPUrl,  /* Unsupported by this program atm */
  TagType_Url       /* Unsupported by this program atm */
} tag_type;

typedef struct
{
  char *name;      /* Tag Name */
  tag_type type;   /* The type of the tag */
  int maxlen;      /* Maximum allowable length in bytes */
  int tag_number;  /* A hex number */
  bool required;   /* Whether the tag *must* be present */
  char value[256]; /* naughty, naughty - should really dynamically allocate this whenever a value is added */
} field;


/* This enumerated type needs to match the relevant locations in the array
    below. If it does not, then undefined behaviour *will* occur. */
typedef enum
{
  e_tagname_telephonenumber = 0,
  e_tagname_username,
  e_tagname_password,
  e_tagname_homeurl,
  e_tagname_domainname,
  e_tagname_dnsserver1,
  e_tagname_dnsserver2,
  e_tagname_dialscript,
  e_tagname_timeserver,
  e_tagname_emailurl,
  e_tagname_httpproxyserver,
  e_tagname_ftpproxyserver,
  e_tagname_searchurl,
  e_tagname_ispname,
  e_tagname_configurationaccesspassword,
  e_tagname_alternatedialnumber,
  e_tagname_alternatedialpassword,
  e_tagname_defaultterritory,
  e_tagname_defaultcountry,
  e_tagname_defaulttimezone,
  e_tagname_modemcountry
#ifdef SUPPORT_CSFS
  ,e_tagname_csfstypero,
  e_tagname_csfsserverro,
  e_tagname_csfspathro,
  e_tagname_csfsuserro,
  e_tagname_csfspasswordro,
  e_tagname_csfstyperw,
  e_tagname_csfsserverrw,
  e_tagname_csfspathrw,
  e_tagname_csfsuserrw,
  e_tagname_csfspasswordrw
#endif /* SUPPORT_CSFS */
} e_tag_names;


/* This is a large array storing information about the tags that this program
    has to know about. Be *very* careful in altering information held in
    here. The hexidecimal tag number should match the one in smcard.h
    (exported from the bootblock module). If the tag is *not* a tag contained
    in the bootblock (e.g. the alternate dial number tag) then the hex number
    should be set to 0x00.
*/
field biglist[] =
{
  {"ISPTelephoneNumber",          TagType_String, 32,  0x33, true},
  {"UserName",                    TagType_String, 256, 0x31, true},
  {"Password",                    TagType_String, 256, 0x32, true},
  {"HomeURL",                     TagType_String, 256, 0x16, true},
  {"DomainName",                  TagType_String, 256, 0x20, true},

  {"DNSServer1",                  TagType_IP,     16,  0x24, true},
  {"DNSServer2",                  TagType_IP,     16,  0x25, false},
  {"DialScript",                  TagType_String, 512, 0x40, true},
  {"TimeServer",                  TagType_String, 256, 0x47, false},
  {"EmailURL",                    TagType_String, 256, 0x72, true},

  {"HTTPProxyServer",             TagType_String, 256, 0x22, false},
  {"FTPProxyServer",              TagType_String, 256, 0x23, false},
  {"SearchURL",                   TagType_String, 256, 0x70, true},
  {"ISPName",                     TagType_String, 32,  0x02, false},
  {"ConfigurationAccessPassword", TagType_String, 11,  0x00, true},

  {"AlternateDialNumber",         TagType_String, 15,  0x00, true},
  {"AlternateDialPassword",       TagType_String, 11,  0x00, true},
  {"DefaultTerritory",            TagType_String, 256, 0x00, true},
  {"DefaultCountry",              TagType_String, 256, 0x00, true},
  {"DefaultTimeZone",             TagType_String, 256, 0x00, true},
  {"ModemCountry",                TagType_String, 256, 0x00, true},
#ifdef SUPPORT_CSFS
  {"CSFSTypeRO",                  TagType_String, 256, 0x10, false},
  {"CSFSServerRO",                TagType_String, 256, 0x12, false},
  {"CSFSPathRO",                  TagType_String, 256, 0x14, false},
  {"CSFSUserRO",                  TagType_String, 256, 0x1C, false},
  {"CSFSPasswordRO",              TagType_String, 256, 0x1D, false},
  {"CSFSTypeRW",                  TagType_String, 256, 0x11, false},
  {"CSFSServerRW",                TagType_String, 256, 0x13, false},
  {"CSFSPathRW",                  TagType_String, 256, 0x15, false},
  {"CSFSUserRW",                  TagType_String, 256, 0x1A, false},
  {"CSFSPasswordRW",              TagType_String, 256, 0x1B, false},
#endif /* SUPPORT_CSFS */
  {NULL, TagType_Nul, 0, 0x0, false}
};


/* This value is the number of entries in the lust above */
#ifdef SUPPORT_CSFS
  #define SIZE_OF_BIGLIST 31
#else
  #define SIZE_OF_BIGLIST 21
#endif


/* This routine simply trims a given line */
static char *RipNTrim(char *text)
{
  char *c, *ptr = text;
  int len;

  while (isspace(*ptr))                  /* Leading whitespace */
    ptr++;
  while (c = strchr(ptr, '\n'), c)       /* Trailing LF */
    *c = '\0';
  while (c = strchr(ptr, '\r'), c)       /* Trailing CR */
    *c = '\0';
  while (c = strchr(ptr, '#'), c)        /* Strip off comments */
    *c = '\0';

  len = strlen(ptr);
  while (isspace(ptr[len - 1]))          /* Trailing whitespace */
    ptr[--len] = '\0';

  return(ptr);
}




/* This routine converts "\n" character sequences in the string passed in
    into '\n' (&0A) character, and moves the rest of the string up
    accordingly.
   Note that it currently does not deal with any escaped characters (eg.
    \\n becomes \&OA, not \\n as it should be).
   It returns true if any conversions were performed, false otherwise.
*/
static bool convert_linefeeds(char* string)
{
  bool string_converted = false;
  int loop=0;
  for (loop=0; loop < strlen(string); loop++)
  {
    if (string[loop]=='\\' && string[loop+1]=='n')
    {
      int move_loop = loop+1;
      string_converted=true;
      printf("\\n sequence detected.\n");
      string[loop]=0x0A;
      while (move_loop < strlen(string)+1)
      {
        string[move_loop]=string[move_loop+1];
        move_loop++;
      }
    }
  }

  return (string_converted);
}




int main(int argc, char *argv[])
{
  /* Define an array in which to hold the NVRAM image. */
  char nvram[NVRAM_AREA_SIZE];
  char *config_file;
  char *output_file;

  if (argc!=3)
  {
    fprintf(stderr,"Syntax: %s config_file output_file\n",argv[0]);
    return (EXIT_FAILURE);
  }
  config_file=argv[1];
  output_file=argv[2];

  /* Parse the config file */
  if (!parse_file(config_file))
  {
    return (EXIT_FAILURE);
  }

  /* Ensure that all the required values have been entered */
  if (!check_values())
  {
    return (EXIT_FAILURE);
  }

  /* Create the NVRAM image */
  create_nvram_image(nvram);

  /* Display it */
  display_nvram_image(nvram);

  /* And write the file */
  write_nvram_image_to_file(output_file, nvram);

  return (EXIT_SUCCESS);
}





/*
  This routine opens the configuation file and reads in the lines.
  It returns true if the file was parse correctly, false otherwise.
*/
bool parse_file(const char* const filename)
{
  FILE* fp = NULL;
  char line_buffer[LINE_BUFFER_SIZE];

  /* Open the file */
  if ((fp = fopen(filename, "r")) == NULL)
  {
    printf ("parse_file(): Error opening file %s.\n", filename);
    return (false);
  }

  /* Read the file line-by-line */
  while (fgets(line_buffer, LINE_BUFFER_SIZE, fp))
  {
    parse_line(line_buffer);
  }

  /* Close the file */
  fclose(fp);

  return (true);
}





/*
  This routine takes a line from the configuration file and parses it. If the
   line contains a valid tag/value combination it returns true, otherwise it
   returns false.
*/
bool parse_line (char* line)
{
  char* ptr = NULL;
  char tag[LINE_BUFFER_SIZE];
  char val[LINE_BUFFER_SIZE];
  int field_number = 0;

  /* Trim the line (eg. remove comments)... */
  line = RipNTrim(line);
  if (strlen(line) > 1)
  {
    convert_linefeeds(line);
    printf("Line is %s\n", line);
  }
  else
  {
    return (false);
  }

  /* Now split the line into a <tag>=<value> couplet. */
  ptr = strpbrk(line,"=");
  if (!ptr)
  {
    /*  No = seperator, therefore line is malformed */
    return (false);
  }
  else
  {
    int tag_length = ptr-line; /* Warning, horrible pointer maths - may not be necesarilly portable */
    strncpy(tag, line, tag_length);
    tag[tag_length]='\0'; /* Add a terminator */
    strcpy(val, ptr+1);
    printf("Tag is %s (length %d)  Val is %s\n", tag, tag_length, val);
    if ((field_number = match_values(tag, val)) < 0)
    {
      printf("Error: Tag %s not recognised.\n", tag);
    }
  }

  return (true);
}




/* This routine searches for the tag passed in against the list of fields.
    It returns the number of the tag in the list, or -1 if it is not matched. */
static int match_values(const char* const tag_to_match, const char* const value)
{
  int field_number = 0;
  while (biglist[field_number].name) /* Scan through all the tags */
  {
    if (strcmp(biglist[field_number].name, tag_to_match) == 0) /* Tags match */
    {
      /* Store the value */
      printf ("Tag type for %s is %d\n", tag_to_match, (int)biglist[field_number].type);
      strcpy (biglist[field_number].value, value);
      return (field_number);
    }
    field_number++;
  }
  return (-1);
}




/* This routine goes through the entered fields and checks to see if they have any values entered.
    If any fields must have a value and do not, then it returns false
*/
bool check_values(void)
{
  int field_number = 0;
  while (biglist[field_number].name) /* Scan through all the tags */
  {
    if (biglist[field_number].required && (strcmp(biglist[field_number].value,"")==0))
    {
      printf ("A value is expected for tag %s, and one has not been entered.\n", biglist[field_number].name);
      return (false);
    }

    /* Now ensure that if a value is present, it is shorter than the max length allowable for that field */
    if (strcmp(biglist[field_number].value,"")!=0) /* The field has a value */
    {
      if (strlen(biglist[field_number].value) > biglist[field_number].maxlen)
      {
        printf("Tag %s is too long (is %d bytes, should be <%d)", biglist[field_number].name, strlen(biglist[field_number].value), biglist[field_number].maxlen);
        return (false);
      }
    }

    /* DefaultTerritory, DefaultCountry, and ModemCountry must specify countries
       that exist in the lookup table countries[]. */
    if ((field_number == e_tagname_defaultterritory) || (field_number == e_tagname_defaultcountry) || (field_number == e_tagname_modemcountry))
    {
      if (lookup_country(biglist[field_number].value) == 0)
      {
        printf("Country '%s' specified in tag %s is not supported.\n", biglist[field_number].value, biglist[field_number].name);
        return (false);
      }
    }

    field_number++;
  }

  return (true);
}





/* This routine displays the nvram image in a format similar to that
    produced by the *dump RISC OS command (and hence to that shown in
    section 4 of the spec)
   As it displays the information in a series of 16 by 16 bytes blocks,
    the total size of the area being displayed should be a multiple of
    (16*16)=256 bytes. Behaviour for any other sized block is undefined.
*/
void display_nvram_image(char nvram[])
{
  unsigned int location = 0;
  unsigned int location2 = 0;

  for (location=0x000; location < NVRAM_AREA_SIZE; location+=(16*16))
  {
    printf("\nAddress  : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F      ASCII data\n");
    for (location2=location; location2 < location+(16*16); location2+=16)
    {
      unsigned int loop=0;
      printf("%08X : ", location2);
      for (loop = 0; loop < 16; loop++)
      {
        printf("%02X ", nvram[location2+loop]);
      }
      printf("  ");
      for (loop = 0; loop < 16; loop++)
      {
        /* Only display as characters if they are printable (i.e. in range 32 to 126). Otherwise print as a . */
        if (isprint(nvram[location2+loop]))
        {
          printf("%c", nvram[location2+loop]);
        }
        else
        {
          printf(".");
        }
      }
      printf("\n");
    }
  }
}





/* This routine pads the string passed in with the character passed in, up to
the string terminator.
   This is ever-so-slightly naughty; you must ensure that string_end is
within the memory area allocated for the string otherwise nasty things may
consequently occur.
*/
void pad_string(char* string, int pad_char, int string_end)
{
  int loop=string_end;
  while (loop > strlen(string) && loop >= 0)
  {
    string[loop]=0x00;
    loop--;
  }
}


/*
  This routine compares two strings case insensitively
*/

int strcmp_ci(const char *first, const char *second)
{
  for (;;)
  {
    unsigned int a = *first++;
    unsigned int b = *second++;
    if (a == 0) return -b;
    if (a != b)
    {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
}


/*
  This routine takes a country name (case-insensitive) and converts it to the
  RISC OS country code by the use of the lookup table countries[] specified at
  the head of this file.
*/

int lookup_country(char *country)
{
  unsigned int n = sizeof(countries)/sizeof(countries[0]);
  int loop;
  for (loop=0; loop < n; loop++)
  {
    if (strcmp_ci(countries[loop].country, country) == 0)
    {
      return countries[loop].number;
    }
  }
  return 0;
}


/*
 * This routine takes a string defining the time zone
 * (format [+|-]<hours>:<minutes>) and converts it to the standard integer
 * value for storing in NVRAM.
 */

int calculate_timezone(char *timezone)
{
  bool ahead = true;
  int loop = 0;
  int minutes = 0;
  int hours = 0;

  if (timezone[loop] == '+')
  {
    ahead = true;
    loop++;
  }
  else if (timezone[loop] == '-')
  {
    ahead = false;
    loop++;
  }

  while (!isdigit(timezone[loop])) loop++;
  while (isdigit(timezone[loop]))
  {
    hours *= 10;
    hours += (timezone[loop] - 48);
    loop++;
  }
  loop++;
  while (isdigit(timezone[loop]))
  {
    minutes *= 10;
    minutes += (timezone[loop] - 48);
    loop++;
  }

  if (ahead)
  {
    if (minutes < 15) return (4*hours);
    else if (minutes < 30) return ((4*hours)+1);
    else if (minutes < 45) return ((4*hours)+2);
    else return ((4*hours)+3);
  }
  else
  {
    if (minutes < 15) return (256-(4*hours));
    else if (minutes < 30) return (256-((4*hours)+1));
    else if (minutes < 45) return (256-((4*hours)+2));
    else return (256-((4*hours)+3));
  }
}



/*
  This routine creates the NVRAM image for the details entered.
*/
bool create_nvram_image(char nvram[])
{
  unsigned int location = 0;
  unsigned int bootblock_size;
  char bootblock[NVRAM_AREA_SIZE]; /* A temporary store for the bootblock data */

  /* Initially clear the whole of the NVRAM to 0xFF (spec 2.1, paragraph 4) */
  for (location=0; location < NVRAM_AREA_SIZE; location++)
  {
    nvram[location]=0xFF;
  }

  /* Write the ISP access password to locations C00 to C0A (spec 2.2, table) */
  pad_string(biglist[e_tagname_configurationaccesspassword].value, 0x00, 11);
  for (location=0; location<11; location++)
  {
    nvram[0xC00+location] = biglist[e_tagname_configurationaccesspassword].value[location];
  }

  /* Write the Test phone number to locations C0B to C19  (spec 2.2, table) */
  pad_string(biglist[e_tagname_alternatedialnumber].value, 0x00, 15);
  for (location=0; location<15; location++)
  {
    nvram[0xC0B+location] = biglist[e_tagname_alternatedialnumber].value[location];
  }

  /* Write the Test dial password to locations C1A to C24  (spec 2.2, table) */
  pad_string(biglist[e_tagname_alternatedialpassword].value, 0x00, 11);
  for (location=0; location<11; location++)
  {
    nvram[0xC1A+location] = biglist[e_tagname_alternatedialpassword].value[location];
  }

  /* Write the ModemCountry to location C25  (spec 2.2.3) */
  nvram[0xC25] = lookup_country(biglist[e_tagname_modemcountry].value);

  /* Write the DefaultTerritory to location C26  (spec 2.2.3)
     Note that the territory country number MUST be EORed when storing it in
     NVRAM. */
  nvram[0xC26] = lookup_country(biglist[e_tagname_defaultterritory].value) ^ 1;

  /* Write the DefaultCountry to location C27 (spec 2.2.3) */
  nvram[0xC27] = lookup_country(biglist[e_tagname_defaultcountry].value);

  /* Write the DefaultTimeZone to location C28 (spec 2.2.3) */
  nvram[0xC28] = calculate_timezone(biglist[e_tagname_defaulttimezone].value);

  /* The area between &C29 and &CFF needs to be programmed as &00 (spec 2.2.4) */
  /* The rest of the NVRAM should be filled with 0x00 (spec 2.2.4) */
  for (location = 0xC29; location <= 0xFFF; location++)
  {
    nvram[location]=0x00;
  }

  /* Now write the bootblock data.*/
  bootblock_size = create_bootblock(bootblock);
  memcpy(nvram+0xD00, bootblock, bootblock_size);

  return (true);
}



/*
  This routine creates the bootblock from the data held in the internal structures.
  Note that it creates the body data first, and then the header data, as the header
   has to contain information about the size of the body data.
  (This could e fixed by having a two-stage parser, but I cannot see the point of
   this for this simple version of the program).
*/
unsigned int create_bootblock(char* bootblock)
{
  char body_data[NVRAM_AREA_SIZE-36]; /* I *really* doubt a bootblock would ever be this big ;*) */
  char header_data[36]; /* 28-byte header + 8 bit pre-bootblock header (spec 2.2.5) */
  char trailer_data[12]; /* A 12 byte bootblock trailer */
  unsigned int bootblock_body_count = 0; /* This stores where we are up to in the bootblock */
  unsigned int loop = 0;
  unsigned int loop2 = 0;

  /* Create the bootblock body data (spec section 3.2) */
  for (loop=0; loop<SIZE_OF_BIGLIST; loop++)
  {

    if (strlen(biglist[loop].value) > 0 && biglist[loop].tag_number > 0) /* Tag has a value associated with itself..., and it is a bootblock tag (repsented by a tag number > 0) */
    {
      printf("Writing tag %s (value %s) to bootblock data...\n", biglist[loop].name, biglist[loop].value);

      switch (biglist[loop].type)
      {
        case TagType_String: /* Tag is a string  */
        {
          /* Write the tag number and tag value size */
          write_big_endian_word(body_data+bootblock_body_count, biglist[loop].tag_number);
          bootblock_body_count+=4;
          write_big_endian_short(body_data+bootblock_body_count, strlen(biglist[loop].value));
          bootblock_body_count+=2;
          /* Now write the actual string value into the bootblock data */
          for (loop2=0; loop2 < strlen(biglist[loop].value); loop2++)
          {
            body_data[bootblock_body_count+loop2] = biglist[loop].value[loop2];
          }
          bootblock_body_count+=strlen(biglist[loop].value);
        }
        break;

        case TagType_IP: /* Tag is an IP address */
        {
          /* The code below is horrible and hacky. Suggest you use inet_addr() or equivalent if you have a TCPIP library available. */
          int loop2 = 0;
          int nums[4];
          int num_count = 0;
          char num_store[4];
          int isp_part_count = 0;
          printf("value for IP tag %s is %s\n", biglist[loop].name, biglist[loop].value);
          /* Attempt to split the string into four numbers */
          do
          {
            if (biglist[loop].value[loop2]=='.' || biglist[loop].value[loop2]=='\0')
            {
              num_store[num_count]='\0'; // Terminate the string.
              nums[isp_part_count++] = atoi(num_store);
              printf("Number isp_part_count is %s (%d)\n", num_store, nums[isp_part_count-1]);
              num_count=0;
            }
            else
            {
              num_store[num_count++]=biglist[loop].value[loop2];
            }
            loop2++;
          }
          while (biglist[loop].value[loop2-1] != '\0'); // Scan until end of string

          // Ensure that there are four numbers, and if there are, write them
          if (isp_part_count < 3)
          {
            printf("Error: IP address does not have three constituent numbers.\n");
          }
          else
          {
            /* Write the tag number and tag value size */
            write_big_endian_word(body_data+bootblock_body_count, biglist[loop].tag_number);
            bootblock_body_count+=4;
            write_big_endian_short(body_data+bootblock_body_count, 4);
            bootblock_body_count+=2;
            /* Now write the actual data */
            body_data[bootblock_body_count++]=nums[0];
            body_data[bootblock_body_count++]=nums[1];
            body_data[bootblock_body_count++]=nums[2];
            body_data[bootblock_body_count++]=nums[3];
          }
        }
        break;

        default:
          printf("Eeeks! This tag type is unsupported!\n");
        break;
      }
    }
  }
  body_data[bootblock_body_count+1]='\0'; /* Add a terminator for the string below */

  printf("===============================================\n");
  printf("Bootblock body data size is %d\n", bootblock_body_count);
  printf("===============================================\n");

  /* Create the pre-bootblock header (spec 2.2.5) */
  header_data[0] = 0x01;
  header_data[1] = 0x00;
  header_data[2] = 0x00;
  header_data[3] = 0x00;
  /* The next word needs to be in litle-endian format (spec 2.2.5 table) */
  header_data[7] = ((bootblock_body_count+28) & 0xff000000)>>24;
  header_data[6] = ((bootblock_body_count+28) & 0x00ff0000)>>16;
  header_data[5] = ((bootblock_body_count+28) & 0x0000ff00)>>8;
  header_data[4] = ((bootblock_body_count+28) & 0x000000ff);

  /* Now create the bootblock header. (spec 3.1) */
  header_data[8]  = 0x80; /* (All these are defined in spec 3.1 table) */
  header_data[9]  = 0x00;
  header_data[10] = 0x00;
  header_data[11] = 0x04;
  write_big_endian_short(header_data+12, (bootblock_body_count+22));
  header_data[14] = 0x80;
  header_data[15] = 0x00;
  header_data[16] = 0x00;
  header_data[17] = 0x01;
  write_big_endian_short(header_data+18, (bootblock_body_count+16));
  header_data[20] = 0x80;
  header_data[21] = 0x00;
  header_data[22] = 0x00;
  header_data[23] = 0x03;
  write_big_endian_short(header_data+24, (bootblock_body_count+10));
  header_data[26] = 0x00;
  header_data[27] = 0x00;
  header_data[28] = 0x00;
  header_data[29] = 0x30;
  header_data[30] = 0x00;
  header_data[31] = 0x04;
  header_data[32] = 0x2A;
  header_data[33] = 0x00;
  header_data[34] = 0x00;
  header_data[35] = 0x00;

  /* Generate the trailer (spec 3.3) */
  trailer_data[0] = 0x00;
  trailer_data[1] = 0x00;
  trailer_data[2] = 0x00;
  trailer_data[3] = 0x05;
  trailer_data[4] = 0x00;
  trailer_data[5] = 0x06;
  trailer_data[6] = 0x62;
  trailer_data[7] = 0x79;
  trailer_data[8] = 0x20;
  trailer_data[9] = 0x41;
  trailer_data[10] = 0x6E;
  trailer_data[11] = 0x74;

  /* Now create the bootblock data (header+data+trailer) */
  memcpy(bootblock, header_data, 36);
  memcpy(bootblock+36, body_data, bootblock_body_count);
  memcpy(bootblock+36+bootblock_body_count, trailer_data, 12);

  return (bootblock_body_count+36+12); /* The size of the full bootblock data */
}




/*
  This routine writes the integer passed in w into buff in big-endian byte
   order. If the output you get from the program is not as you expect, it
   could well be this routine.
*/
void write_big_endian_word(char *buff, unsigned int w)
{
    *buff++ = (w & 0xff000000)>>24;
    *buff++ = (w & 0x00ff0000)>>16;
    *buff++ = (w & 0x0000ff00)>>8;
    *buff++ = (w & 0x000000ff);
    return;
}



/*
  This routine writes the short passed in w into buff in big-endian byte
   order. If the output you get from the program is not as you expect, it
   could well be this routine.
*/
void write_big_endian_short(char *buff, unsigned int w)
{
    *buff++ = (w & 0xff00)>>8;
    *buff++ = w & 0x00ff;
    return;
}




/* This routine simply writes the nvram area that has been created to the
    file passed in.
   It returns true if the file was written successfully, false otherwise
*/
bool write_nvram_image_to_file(const char* const filename, const char* const nvram_area)
{
  FILE* fp = NULL;

  /* Open the file */
  if ((fp = fopen(filename, "wb")) == NULL)
  {
    printf ("parse_file(): Error opening file %s for writing.\n", filename);
    return (false);
  }

  /* Write the bootblock */
  fwrite(nvram_area, NVRAM_AREA_SIZE, 1 ,fp);

  /* Close the file */
  fclose(fp);

  return (true);
}




/*****************************************************************************
* END OF FILE
*****************************************************************************/

@


1.5
log
@
  * Updated MakeImage NVRAM utility.

Detail:

  * MakeImage (for Lazarus/Bethany systems) is now South Africa aware.
    Non-supported countries are deliberately omitted so as to ensure that
    the NVRAM cannot be programmed with an unsupported territory.

Admin:

  * Tested on RPC.  Verified the resultant NVRAM image.

Version 0.53. Not tagged
@
text
@d16 2
a17 2
* $Id: Main,v 1.4 2000/10/24 16:48:42 rthornbu Exp $
* $Name:  $
@


1.4
log
@  Added DefaultTimeZone tag.
Detail:
  The NVRAM image creator for Lazarus/Bethany has been updated to be aware of
  a DefaultTimeZone flag.  It takes a standard time zone (ie. +9:30) and
  converts it to an integer to store in the NVRAM.
Admin:
  The produced outputs look correct.
  Still need to update the functional spec and update copy in DO, but I'll do
  this tomorrow as I want to go home now...

Version 0.53. Tagged as 'NVRAM-0_53'
@
text
@d16 1
a16 1
* $Id: Main,v 1.3 2000/10/12 13:20:58 rthornbu Exp $
d116 1
@


1.3
log
@  Added support for a default country to prevent non-UK Bethany boxes being
  set to UK on a hard reset.
Detail:
  Countries are now specified as the country name, not the RISC OS country code
  as previous versions.
  Fixed bug by where the NVRAM locations for DefaultTerritory and ModemCountry
  were swapped.  Also fixed bug regarding the NVRAM setting for
  DefaultTerritory.  When storing this, the value must be the RISC OS country
  code EOR 1.
Admin:
  Spec updated (included here in the Resources directory).  ECO number 4392.
  Software modifications tested on my Risc PC and on the Bethany hardware.

Version 0.51. Tagged as 'NVRAM-0_51'
@
text
@d16 1
a16 1
* $Id: Main,v 1.2 2000/10/11 16:10:58 dcotton Exp $
d92 1
d169 1
d217 1
d237 1
a237 1
  #define SIZE_OF_BIGLIST 30
d239 1
a239 1
  #define SIZE_OF_BIGLIST 20
d599 57
d702 4
a705 1
  /* The area between &C27 and &CFF needs to be programmed as &00 (spec 2.2.4) */
d707 1
a707 1
  for (location = 0xC28; location <= 0xFFF; location++)
@


1.2
log
@	Altered the MakeImage utility.

Detail:
	Now supports CSFS tags being available within the configuration file.
To compile this functionality in, then compile the code with the SUPPORT_CSFS
preprocessor flag set.
	Altered the DefaultCountry and ModemCountry tags so that their types
are now correct. This will stop a potential bug from occuring.
	Tags are now written into the BootBlock area if they have a TagType
greater than zero. This allows us to disperse the tags in the internal
big_list in a more sane manner.
 	Also added an example config file for CSFS support.

Admin:
	Tested.
	Please note that if giving this code to outside customers for the
Customer A-based projects they must not get any of the SUPPORT_CSFS-enabled code.
Plase strip this out if sending the code outside the company.

Version 0.50. Tagged as 'NVRAM-0_50'
@
text
@d16 1
a16 1
* $Id: Main,v 1.1 2000/08/02 09:57:31 jfletche Exp $
d90 2
d103 13
d167 1
d213 3
a215 2
  {"DefaultTerritory",            TagType_String, 3,   0x00, true},
  {"ModemCountry",                TagType_String, 3,   0x00, true},
d234 1
a234 1
  #define SIZE_OF_BIGLIST 29
d236 1
a236 1
  #define SIZE_OF_BIGLIST 19
d469 11
d552 3
d556 37
d631 7
a637 2
  /* Write the DefaultTerritory to location C25  (spec 2.2.3) */
  nvram[0xC25] = atoi(biglist[e_tagname_defaultterritory].value);
d639 2
a640 2
  /* Write the ModemCountry to location C26  (spec 2.2.3) */
  nvram[0xC26] = atoi(biglist[e_tagname_modemcountry].value);
d644 1
a644 1
  for (location = 0xC27; location <= 0xFFF; location++)
@


1.1
log
@  EEPROM image creator example code added.
Detail:
  * This code was previously on the internal Customer A website, but has now
    been moved to CVS control.
Admin:
  Generates correct images for Bethany EEPROM.

Version 0.44. Not tagged
@
text
@d16 1
a16 1
* $Id: template.c,v 1.6 2000/02/21 10:25:28 dcotton Exp $
d153 12
d170 4
a173 1
    here.
d182 1
d188 1
d194 1
d197 14
a210 2
  {"DefaultTerritory",            TagType_String, 3,   0x01, true},
  {"ModemCountry",                TagType_String, 3,   0x01, true},
d215 6
a220 1

d287 1
a287 1
  
d602 1
a602 1
  for (loop=0; loop<14; loop++)
d604 2
a605 1
    if (strlen(biglist[loop].value) > 0) /* Tag has a value associated with itself... */
@

