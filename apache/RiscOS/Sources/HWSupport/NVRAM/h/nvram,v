head	1.8;
access;
symbols
	NVRAM-0_68:1.8
	NVRAM-0_67:1.8
	NVRAM-0_66:1.7
	RO_5_07:1.7
	NVRAM-0_65:1.7
	NVRAM-0_64:1.7
	NVRAM-0_63:1.7
	NVRAM-0_62:1.7
	NVRAM-0_61:1.7
	NVRAM-0_60:1.7
	NVRAM-0_59:1.7
	NVRAM-0_58:1.7
	NVRAM-0_57:1.7
	NVRAM-0_56:1.7
	NVRAM-0_55:1.7
	NVRAM-0_54:1.7
	NVRAM-0_53:1.7
	NVRAM-0_52:1.7
	NVRAM-0_51:1.7
	NVRAM-0_50:1.7
	dellis_autobuild_BaseSW:1.7
	NVRAM-0_49:1.7
	NVRAM-0_48:1.6
	NVRAM-0_47:1.5
	NVRAM-0_45:1.4
	NVRAM-0_44:1.3
	NVRAM-0_43:1.3
	NVRAM-0_42:1.3
	sbrodie_sedwards_16Mar2000:1.3
	NVRAM-0_41:1.3
	NVRAM-0_40:1.3
	NVRAM-0_39:1.3
	NVRAM-0_38:1.3
	NVRAM-0_37:1.3
	NVRAM-0_36:1.3
	NVRAM-0_35:1.3
	NVRAM-0_33:1.3
	NVRAM-0_31:1.3
	NVRAM-0_30:1.3
	NVRAM-0_29:1.3
	NVRAM-0_28:1.3
	NVRAM-0_27:1.3
	NVRAM-0_26:1.3
	NVRAM-0_25:1.3
	NVRAM-0_24:1.3
	NVRAM-0_23:1.3
	dcotton_autobuild_BaseSW:1.7
	nturton_NVRAM-0_21:1.3
	NVRAM-0_22:1.3
	dcotton_nvram-MPTInitialBuild:1.3
	NVRAM-0_21:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	NVRAM-0_20:1.3
	NVRAM-0_19:1.3
	NVRAM-0_18:1.3
	NVRAM-0_17:1.2
	NVRAM-0_16:1.2
	Spin_merge:1.1.1.4
	NVRAM-0_15:1.2
	NVRAM-2_02:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	jfarrell_NVRAM-0_13:1.1.1.4
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_NC2_Generic:1.1.1.4
	Spinner_B20_2:1.1.1.4
	Spinner_19_3:1.1.1.4
	Spinner_B18:1.1.1.4
	Spinner_B17:1.1.1.4
	Spinner_B15:1.1.1.4
	Spinner_B14:1.1.1.3
	Spinner_B13:1.1.1.3
	Spinner_B12:1.1.1.3
	Spinner_B10:1.1.1.3
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.2
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2012.01.01.09.19.11;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	oF6fBP1UW8OG0sNv;

1.7
date	2000.09.26.17.35.08;	author rcathera;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.08.17.32.12;	author rcathera;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.10.16.39.54;	author jfletche;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.10.12.44.24;	author jfletche;	state Exp;
branches;
next	1.3;

1.3
date	98.09.24.12.01.48;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	98.09.10.18.04.06;	author jfarrell;	state Exp;
branches;
next	1.1;

1.1
date	97.03.18.18.10.15;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.18.10.15;	author scormie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.04.28.09.37.58;	author scormie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.08.09.44.01;	author scormie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.06.25.11.11.21;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Makefile rationalised a bit.
Error messages now not padded with one too many nulls.
Use CMHG's magic BAD_SWI return code rather than our own.
Compiles, but not tested.

Version 0.67. Tagged as 'NVRAM-0_67'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > nvram.h */

/* NV-RAM specific header file. */

#ifndef __kernel_h
#include "kernel.h"
#endif


#define OSBYTE_READCMOS			161
#define OSBYTE_WRITECMOS		162

#define NVMEMORY_SIZE                   0
#define NVMEMORY_READBYTE               1
#define NVMEMORY_WRITEBYTE              2
#define NVMEMORY_READBLOCK              3
#define NVMEMORY_WRITEBLOCK             4

#define DEFAULT_NVRAM_SIZE              2048
#define TMPBUF_SIZE			128

#define NVRAM_FLAGS_WRITECACHE		(1<<0)
#define NVRAM_FLAGS_WRITETHROUGH	(1<<1)

/* The following locations are hardcoded into the module and it	*/
/* is assumed that they will never change.			*/
#define NVRAM_LASTRESET_BYTE		0xC3
#define NVRAM_LASTRESET_BIT		2
#define NVRAM_CHECKSUM_BYTE		0xEF

#define NVRAM_READ_TAGERR		(-1)
#define NVRAM_READ_BUFERR		(-4)

#define NVRAM_WRITE_TAGERR		(-1)
#define NVRAM_WRITE_LOCKERR		(-2)

#define LOCATION_FLAGS_PROTECTED	(1<<0)
#define LOCATION_FLAGS_LOCKED		(1<<1)
#define LOCATION_FLAGS_POINTER          (1<<2)

#define DEFAULT_START_BIT	0
#define DEFAULT_LENGTH		8
#define DEFAULT_VALUE		0
#define DEFAULT_FLAGS		0

/* including the 0 terminating byte */
#define DEFAULT_STRING_MAXLEN   256

#define SEPARATOR		','
#define INDIRECT_START		'<'
#define INDIRECT_END		'>'
#define STRING_START            '"'
#define STRING_END              '"'
#define STRING_ESCAPE           '/'

typedef struct _location {
	unsigned int location, start_bit, length;
	unsigned int value;
	unsigned int flags;
} location;

_kernel_oserror *nvram_initialise( void );
void nvram_finalise( void );
_kernel_oserror *nvram_read( char *tag, void *buffer, int bufferlen, int *retvalue );
_kernel_oserror *nvram_write( char *tag, void *buffer, int bufferlen, int *retvalue );
_kernel_oserror *nvram_lookup( char *ptag, unsigned int *startbyte, unsigned int *startbit, unsigned int *length, unsigned int *flagword );
_kernel_oserror *nvram_get( char *tag, void *buffer, int bufferlen, int *size );
_kernel_oserror *nvram_set( char *tag, void *buffer, int bufferlen );
_kernel_oserror *nvram_getbytes( char *tag, void *buffer, int bufferlen, int offset, int *size );
_kernel_oserror *nvram_setbytes( char *tag, void *buffer, int bufferlen, int offset );

extern int GetLocation( char *ptag, char *pdesc, location *ploc, int getDefault );
@


1.7
log
@  Added support for default strings and indirect tags pointing to strings.
  Tidied up indirect tags pointing to integer values.
Detail:
  If the default field is enclosed in quotes it is taken as being a string
   the escape character is currently a forward slash. Any character apart from
   '\0' may be used in the string so in theory any data type could be encoded
   provided it doesn't need a 0 byte anywhere in it. Infact this would be easy
   to fix - the removal of the escape characters could be done as the string
   is copied into the cache buffer so 0 bytes could be escaped.
  When a string is read and temporary buffer is allocated and it's address is
   returned in the value field. To indicate this a bit in the flag word is set
   LOCATION_FLAGS_POINTER - this bit is not useful outside the module but is
   returned by NVRAM_Lookup.

  c/nvram
   FullReset & LockedReset both modified to understand what to do if
 		LOCATION_FLAGS_POINTER is set
   GetLocation now takes an extra argument either TRUE or FALSE that
		is passed to parse_description. This is to signify whether
		or not the caller requires a default value to be looked up
		and returned. This should be FALSE (0) for all normal routines,
		and TRUE for routines involved in reset code.
  c/parse
   parse_description takes an extra argument as described above which is passed
		to GetDefaultValue.
   GetDefaultValue has been heavily modified to understand strings and the
		indirection code is different to cope with strings. It also
		takes a pointer to a flag word (see GetFlags below)
   GetFlags now takes a pointer to the flag word and modifies it so that
		GetDefaultValue can set the LOCATION_FLAGS_POINTER bit
Admin:
  A limited amount of testing has taken place but it needs testing in a real
   situation.
  It seems a bit messy in several places and consideration should be given to
   rewriting those functions which are relevant to reseting the NVRAM and the
   routines in c/parse. Separating these a bit would probably allow a tidier
   implementation of the new functionality in this version.

Version 0.49. Tagged as 'NVRAM-0_49'
@
text
@a75 1

@


1.6
log
@  Added SWI NVRAM_Lookup which takes a pointer to a Tag in r0 on entry
  and returns startbyte within NVRAM (suitable for use with OS_NVMemory)
  in r0, startbit within byte in r1, length in r2 and flags in r3
  Added SWI NVRAM_Set and Get which take the same arguments as Read
  and Write but now return error pointers in r0 an error occurs
  instead of a -ve number.
  Added SWI NVRAM_SetBytes and GetBytes which work like Set/Get but also
  take an offset in r3 that is added to the address of the Tag to allow
  access to part of a Tag without needing to read or write the whole
  thing.

Detail:
  NVRAM_Read and Write used to pass on proper RISC OS errors if an external
  error was generated, but returned a -ve number in r0 if an internal error
  occured.
  NVRAM_Get and Set behave properly and use the error block 0x00819200
  this also means that Set preserves r0 (it used to return 0 for success)
  For compatibility Read and Write have not been removed but are deprecated,
  additionally the new error codes are the positive versions of the old
  error codes (hopefully this will ease converting code to use the new SWIs)
  The Messages file has been seperated from the Tags file and the module can
  return MsgTrans'ed error messages.

Admin:
  Tested all SWIs to a reasonable extent using a softloaded version.

Version 0.48. Tagged as 'NVRAM-0_48'
@
text
@d53 1
d60 3
d66 3
a68 1

d86 2
@


1.5
log
@  Changed method of referring to indirected tags
Detail:
  * After discussion with Kevin, changed to using <> instead of "'s around
    indirected tags. This might allow strings to be included at some
    future date.
Admin:
  Tested. Works the same as before.

Version 0.46. Tagged as 'NVRAM-0_46'
@
text
@d75 5
@


1.4
log
@  Added support for default value indirected tags.
Detail:
  * Tags with a default value as a tagname in quotes will use the default
    value from that tag. This will allow certain tags to be programmed
    into the NVRAM at manufacture which are always restored, regardless of
    the configuration of the main tag. This is required
  * For reasons of ease, parts of the decoding process have been reworked;
    with the effect that pointers to register blocks aren't passed around
    now.
Admin:
  Tested locally; needs testing in a full build.
  This feature is needed for Bethany to support a default country, so that
  they will always start in a valid state.

Version 0.45. Tagged as 'NVRAM-0_45'
@
text
@d60 2
@


1.3
log
@Changed to use OS_NVMemory SWIs if available. Crops fields in Tags file to
available NVRAM.
Makefile changed to use Link 5.08.
nvcheck modified to cope with up to 16K of NVRAM.

Version 0.18. Tagged as 'NVRAM-0_18'
@
text
@d71 2
a72 2
_kernel_oserror *nvram_read( _kernel_swi_regs *r );
_kernel_oserror *nvram_write( _kernel_swi_regs *r );
@


1.2
log
@Fix previous erroneous attempt to merge from branch Spinner.
Manually edited VersionNum to restore sane version number.
DO NOT USE THE PREVIOUS TRUNK COMMIT OF THIS MODULE (NVRAM-2_02).

Version 0.15. Tagged as 'NVRAM-0_15'
@
text
@d27 7
a33 1
#define NVRAM_SIZE			2048
@


1.1
log
@Initial revision
@
text
@d27 2
a28 2
#define NVRAM_SIZE			1024
#define TMPBUF_SIZE			256
d58 1
a58 1
	int value;
@


1.1.1.1
log
@Initial version.

@
text
@@


1.1.1.2
log
@Extended to support 2K EEPROM.
Made (hopefully) final allocations.
Fixed TV interlace setting to 1 (stop syncs getting confused).
@
text
@d27 1
a27 1
#define NVRAM_SIZE			2048
@


1.1.1.3
log
@Fixed various bugs, including not using isspace when using TinyStubs as
the shared C library doesn't seem to initialise its copy of __ctype.
@
text
@d28 1
a28 1
#define TMPBUF_SIZE			128
@


1.1.1.4
log
@Fixed bug thrown up by development tests.
@
text
@d58 1
a58 1
	unsigned int value;
@
