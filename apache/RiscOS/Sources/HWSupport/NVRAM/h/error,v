head	1.4;
access;
symbols
	NVRAM-0_68:1.4
	NVRAM-0_67:1.4
	NVRAM-0_66:1.3
	RO_5_07:1.3
	NVRAM-0_65:1.3
	NVRAM-0_64:1.3
	NVRAM-0_63:1.3
	NVRAM-0_62:1.3
	NVRAM-0_61:1.3
	NVRAM-0_60:1.3
	NVRAM-0_59:1.3
	NVRAM-0_58:1.3
	NVRAM-0_57:1.3
	NVRAM-0_56:1.3
	NVRAM-0_55:1.3
	NVRAM-0_54:1.3
	NVRAM-0_53:1.3
	NVRAM-0_52:1.3
	NVRAM-0_51:1.3
	NVRAM-0_50:1.3
	dellis_autobuild_BaseSW:1.3
	NVRAM-0_49:1.3
	NVRAM-0_48:1.2
	NVRAM-0_47:1.1
	NVRAM-0_45:1.1
	NVRAM-0_44:1.1
	NVRAM-0_43:1.1
	NVRAM-0_42:1.1
	sbrodie_sedwards_16Mar2000:1.1
	NVRAM-0_41:1.1
	NVRAM-0_40:1.1
	NVRAM-0_39:1.1
	NVRAM-0_38:1.1
	NVRAM-0_37:1.1
	NVRAM-0_36:1.1
	NVRAM-0_35:1.1
	NVRAM-0_33:1.1
	NVRAM-0_31:1.1
	NVRAM-0_30:1.1
	NVRAM-0_29:1.1
	NVRAM-0_28:1.1
	NVRAM-0_27:1.1
	NVRAM-0_26:1.1
	NVRAM-0_25:1.1
	NVRAM-0_24:1.1
	NVRAM-0_23:1.1
	dcotton_autobuild_BaseSW:1.3
	nturton_NVRAM-0_21:1.1
	NVRAM-0_22:1.1
	dcotton_nvram-MPTInitialBuild:1.1
	NVRAM-0_21:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	NVRAM-0_20:1.1
	NVRAM-0_19:1.1
	NVRAM-0_18:1.1
	NVRAM-0_17:1.1
	NVRAM-0_16:1.1
	Spin_merge:1.1.1.1
	NVRAM-0_15:1.1
	NVRAM-2_02:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	jfarrell_NVRAM-0_13:1.1.1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_NC2_Generic:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2012.01.01.09.19.11;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	oF6fBP1UW8OG0sNv;

1.3
date	2000.09.26.17.35.08;	author rcathera;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.08.17.32.12;	author rcathera;	state Exp;
branches;
next	1.1;

1.1
date	97.03.18.18.10.15;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.18.10.15;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Makefile rationalised a bit.
Error messages now not padded with one too many nulls.
Use CMHG's magic BAD_SWI return code rather than our own.
Compiles, but not tested.

Version 0.67. Tagged as 'NVRAM-0_67'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* error.h
 *
 *      General purpose error header.
 */

/* We use top bit of error number to flag whether error needs   */
/* to be looked up before being returned to the OS.             */
#define ERROR_LOOKUP_BIT        (1U<<30)

#define ERROR_BASE              0x00819200

/* Our errors. */
#define ERROR_NOMEM             (ERROR_BASE+0)
#define ERROR_NOTAG             (ERROR_BASE+1)
#define ERROR_LOCKED            (ERROR_BASE+2)
#define ERROR_READBUF           (ERROR_BASE+4)
#define ERROR_NOTBYTE           (ERROR_BASE+5)
#define ERROR_NEEDBUF           (ERROR_BASE+6)

/* Declare the given error in a memory efficient way. */
#define ERROR_STRUCT(prefix,name,text) \
        prefix struct {int errnum; char errmess[sizeof(text)];} name = {ERROR_LOOKUP_BIT | ERROR_##name,text}
#define ERROR_EXTERN(name) \
        extern struct {int errnum; char errmess[1];} name;

#define ERROR(e)  ((_kernel_oserror *)&(e))
@


1.3
log
@  Added support for default strings and indirect tags pointing to strings.
  Tidied up indirect tags pointing to integer values.
Detail:
  If the default field is enclosed in quotes it is taken as being a string
   the escape character is currently a forward slash. Any character apart from
   '\0' may be used in the string so in theory any data type could be encoded
   provided it doesn't need a 0 byte anywhere in it. Infact this would be easy
   to fix - the removal of the escape characters could be done as the string
   is copied into the cache buffer so 0 bytes could be escaped.
  When a string is read and temporary buffer is allocated and it's address is
   returned in the value field. To indicate this a bit in the flag word is set
   LOCATION_FLAGS_POINTER - this bit is not useful outside the module but is
   returned by NVRAM_Lookup.

  c/nvram
   FullReset & LockedReset both modified to understand what to do if
 		LOCATION_FLAGS_POINTER is set
   GetLocation now takes an extra argument either TRUE or FALSE that
		is passed to parse_description. This is to signify whether
		or not the caller requires a default value to be looked up
		and returned. This should be FALSE (0) for all normal routines,
		and TRUE for routines involved in reset code.
  c/parse
   parse_description takes an extra argument as described above which is passed
		to GetDefaultValue.
   GetDefaultValue has been heavily modified to understand strings and the
		indirection code is different to cope with strings. It also
		takes a pointer to a flag word (see GetFlags below)
   GetFlags now takes a pointer to the flag word and modifies it so that
		GetDefaultValue can set the LOCATION_FLAGS_POINTER bit
Admin:
  A limited amount of testing has taken place but it needs testing in a real
   situation.
  It seems a bit messy in several places and consideration should be given to
   rewriting those functions which are relevant to reseting the NVRAM and the
   routines in c/parse. Separating these a bit would probably allow a tidier
   implementation of the new functionality in this version.

Version 0.49. Tagged as 'NVRAM-0_49'
@
text
@d20 3
a22 3
/* We use top bit of error number to flag whether error needs	*/
/* to be looked up before being returned to the OS.		*/
#define ERROR_LOOKUP_BIT	(1U<<30)
d24 1
a24 4
#define ERROR_BASE		0x00819200

/* Some specific OS errors. */
#define ERROR_BADSWI            0x00000112
d27 1
a27 1
#define ERROR_NOMEM		(ERROR_BASE+0)
d35 2
a36 4
#define ERROR_STRUCT(name,text) \
        struct {int errnum; char errmess[sizeof(text)+1];} name = {ERROR_LOOKUP_BIT|ERROR_##name,text}

/* Declare the given error as external. */
d38 1
a38 1
        extern struct {int errnum; char errmess[1];} name
@


1.2
log
@  Added SWI NVRAM_Lookup which takes a pointer to a Tag in r0 on entry
  and returns startbyte within NVRAM (suitable for use with OS_NVMemory)
  in r0, startbit within byte in r1, length in r2 and flags in r3
  Added SWI NVRAM_Set and Get which take the same arguments as Read
  and Write but now return error pointers in r0 an error occurs
  instead of a -ve number.
  Added SWI NVRAM_SetBytes and GetBytes which work like Set/Get but also
  take an offset in r3 that is added to the address of the Tag to allow
  access to part of a Tag without needing to read or write the whole
  thing.

Detail:
  NVRAM_Read and Write used to pass on proper RISC OS errors if an external
  error was generated, but returned a -ve number in r0 if an internal error
  occured.
  NVRAM_Get and Set behave properly and use the error block 0x00819200
  this also means that Set preserves r0 (it used to return 0 for success)
  For compatibility Read and Write have not been removed but are deprecated,
  additionally the new error codes are the positive versions of the old
  error codes (hopefully this will ease converting code to use the new SWIs)
  The Messages file has been seperated from the Tags file and the module can
  return MsgTrans'ed error messages.

Admin:
  Tested all SWIs to a reasonable extent using a softloaded version.

Version 0.48. Tagged as 'NVRAM-0_48'
@
text
@d35 1
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
#define ERROR_LOOKUP_BIT	(1U<<31)
d24 1
a24 2
/* Make error base same as SWI base. */
#define ERROR_BASE		0x4EE00U
d31 4
a34 1

@


1.1.1.1
log
@Initial version.

@
text
@@
