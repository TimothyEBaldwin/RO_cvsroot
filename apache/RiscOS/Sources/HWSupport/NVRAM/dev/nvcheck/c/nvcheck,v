head	1.6;
access;
symbols
	NVRAM-0_68:1.6
	NVRAM-0_67:1.6
	NVRAM-0_66:1.6
	RO_5_07:1.6
	NVRAM-0_65:1.6
	NVRAM-0_64:1.6
	NVRAM-0_63:1.6
	NVRAM-0_62:1.6
	NVRAM-0_61:1.6
	NVRAM-0_60:1.6
	NVRAM-0_59:1.6
	NVRAM-0_58:1.6
	NVRAM-0_57:1.6
	NVRAM-0_56:1.6
	NVRAM-0_55:1.6
	NVRAM-0_54:1.6
	NVRAM-0_53:1.6
	NVRAM-0_52:1.6
	NVRAM-0_51:1.6
	NVRAM-0_50:1.6
	dellis_autobuild_BaseSW:1.6
	NVRAM-0_49:1.6
	NVRAM-0_48:1.5
	NVRAM-0_47:1.5
	NVRAM-0_45:1.3
	NVRAM-0_44:1.3
	NVRAM-0_43:1.3
	NVRAM-0_42:1.3
	sbrodie_sedwards_16Mar2000:1.3
	NVRAM-0_41:1.3
	NVRAM-0_40:1.3
	NVRAM-0_39:1.3
	NVRAM-0_38:1.3
	NVRAM-0_37:1.3
	NVRAM-0_36:1.3
	NVRAM-0_35:1.3
	NVRAM-0_33:1.3
	NVRAM-0_31:1.3
	NVRAM-0_30:1.3
	NVRAM-0_29:1.3
	NVRAM-0_28:1.3
	NVRAM-0_27:1.3
	NVRAM-0_26:1.3
	NVRAM-0_25:1.3
	NVRAM-0_24:1.3
	NVRAM-0_23:1.3
	dcotton_autobuild_BaseSW:1.6
	nturton_NVRAM-0_21:1.3
	NVRAM-0_22:1.3
	dcotton_nvram-MPTInitialBuild:1.3
	NVRAM-0_21:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	NVRAM-0_20:1.3
	NVRAM-0_19:1.3
	NVRAM-0_18:1.3
	NVRAM-0_17:1.2
	NVRAM-0_16:1.2
	Spin_merge:1.1.1.2
	NVRAM-0_15:1.2
	NVRAM-2_02:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	jfarrell_NVRAM-0_13:1.1.1.2
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_NC2_Generic:1.1.1.2
	Spinner_B20_2:1.1.1.2
	Spinner_19_3:1.1.1.2
	Spinner_B18:1.1.1.2
	Spinner_B17:1.1.1.2
	Spinner_B15:1.1.1.2
	Spinner_B14:1.1.1.2
	Spinner_B13:1.1.1.2
	Spinner_B12:1.1.1.2
	Spinner_B10:1.1.1.2
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.2
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2000.09.26.17.35.08;	author rcathera;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.11.08.50.26;	author jfletche;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.10.16.35.11;	author jfletche;	state Exp;
branches;
next	1.3;

1.3
date	98.09.24.12.01.47;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	98.09.10.18.04.03;	author jfarrell;	state Exp;
branches;
next	1.1;

1.1
date	97.03.18.18.10.13;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.18.10.13;	author scormie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.04.28.09.37.52;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  Added support for default strings and indirect tags pointing to strings.
  Tidied up indirect tags pointing to integer values.
Detail:
  If the default field is enclosed in quotes it is taken as being a string
   the escape character is currently a forward slash. Any character apart from
   '\0' may be used in the string so in theory any data type could be encoded
   provided it doesn't need a 0 byte anywhere in it. Infact this would be easy
   to fix - the removal of the escape characters could be done as the string
   is copied into the cache buffer so 0 bytes could be escaped.
  When a string is read and temporary buffer is allocated and it's address is
   returned in the value field. To indicate this a bit in the flag word is set
   LOCATION_FLAGS_POINTER - this bit is not useful outside the module but is
   returned by NVRAM_Lookup.

  c/nvram
   FullReset & LockedReset both modified to understand what to do if
 		LOCATION_FLAGS_POINTER is set
   GetLocation now takes an extra argument either TRUE or FALSE that
		is passed to parse_description. This is to signify whether
		or not the caller requires a default value to be looked up
		and returned. This should be FALSE (0) for all normal routines,
		and TRUE for routines involved in reset code.
  c/parse
   parse_description takes an extra argument as described above which is passed
		to GetDefaultValue.
   GetDefaultValue has been heavily modified to understand strings and the
		indirection code is different to cope with strings. It also
		takes a pointer to a flag word (see GetFlags below)
   GetFlags now takes a pointer to the flag word and modifies it so that
		GetDefaultValue can set the LOCATION_FLAGS_POINTER bit
Admin:
  A limited amount of testing has taken place but it needs testing in a real
   situation.
  It seems a bit messy in several places and consideration should be given to
   rewriting those functions which are relevant to reseting the NVRAM and the
   routines in c/parse. Separating these a bit would probably allow a tidier
   implementation of the new functionality in this version.

Version 0.49. Tagged as 'NVRAM-0_49'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* NVRAM resource file checker. */

/* This utility can be used to ensure the validity of the resource file	*/
/* used by the NVRAM module which specifies the location of individual	*/
/* items allocated in NV-RAM. The resource file is read by the NVRAM	*/
/* module using MessageTrans to perform tag lookups. This utility reads	*/
/* the file passed on the command line directly. The syntax of the	*/
/* utility is as follows:						*/
/*									*/
/*	nvcheck [-v] <file>						*/
/*									*/
/* The resource file should contain lines of the following format:	*/
/*									*/
/* <tag>:<location>,<start bit>,<length>,<default>,<flags>		*/
/*									*/
/* Where <tag> and <location> must be provided but all other fields are	*/
/* optional and have the following defaults:				*/
/*									*/
/*	<start bit>	0						*/
/*	<length>	8 (bits)					*/
/*	<default>	0						*/
/*	<flags>		None						*/
/*									*/
/*                                                                      */
/* Strings can be included in the default field by putting them in      */
/* quotes. The escape character to put in a quote is / i.e //  and  /"  */
/* Strings will be truncated if longer than 256 characters or the tag   */
/* length. Only tags that are byte aligned and are a whole number of    */
/* bytes long can have string defaults                                  */
/*                                                                      */
/* <flags> may be one or both of P (protected) and L (locked) where	*/
/* protected means not changed on NV-RAM reset and locked means cannot	*/
/* be changed by the caller. Optional fields may be left empty or may	*/
/* not be present at all, thus the following are all valid lines:	*/
/*									*/
/* ExampleLocation0:&80							*/
/* Example2:123,,,&FF							*/
/* Example3:&34,2,2,&03,P						*/
/* Admin:&48,0,400,"Contact name: /"Sideshow/" Bob // Crusty the Clown" */

#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdarg.h>

#include "../../VersionNum"

#include "../../nvram.h"


#define FALSE			0
#define TRUE			(!FALSE)

#define LINELEN			128

/* NV-RAM size in bits. */
#define NVRAM_BYTE_SIZE		16384
#define NVRAM_SIZE		(NVRAM_BYTE_SIZE*8)

typedef struct _bit {
	char *tag;
} bit;

typedef struct _indirect {
  void *next;
  char *tag;
  char *to;   /* where it points to */
  int line;
  int flags;  /* What flags we have set */
} indirect;

#define FLAG_CYCLECHECK (1) /* We're in a cycle check */
#define FLAG_CYCLEKNOWN (2) /* We know about the cycle here - so there
                               /isn't/ a cycle */

int verbose = FALSE;
int cline;
char *ctag;
bit *bits;
indirect *indirects=NULL;

char defaultString[DEFAULT_STRING_MAXLEN+1];

/* Prototypes */
void check_tag(char *tag);

void warning(char *in,char *fmt, ...)
{
	char msg[1024];
	va_list ap;
	va_start(ap, fmt);
	vsprintf(msg, fmt, ap);
	va_end(ap);

	if (ctag==NULL)
		printf("Error in %s at line %d: %s\n",in,cline,msg);
	else
		printf("Error in %s for tag '%s' at line %d: %s\n",in,ctag,cline,msg);
}

void error(char *in,char *fmt, ...)
{
	char msg[1024];
	va_list ap;
	va_start(ap, fmt);
	vsprintf(msg, fmt, ap);
	va_end(ap);

	if (ctag==NULL)
		printf("Fatal error in %s at line %d: %s\n",in,cline,msg);
	else
		printf("Fatal error in %s for tag '%s' at line %d: %s\n",in,ctag,cline,msg);
	exit(1);
}

char *strdup(char const *cp)
{
	char *mem=malloc(strlen(cp)+1);
	if (mem==NULL)
		error("copying string","memory allocation failed for '%s'\n",cp);
	strcpy(mem,cp);
	return mem;
}

char *
skip_spaces(char *cp)
{
	while (isspace(*cp)) cp++;
	return cp;
}

char *
skip_past(char *cp, char c)
{
	/* Skip past char c but stop at '\0'. */
	while ((*cp != '\0') && (*cp != c)) cp++;
	return (*cp == '\0') ? cp : cp + 1;
}

int
get_value(char **ppd, int default_value)
{
	int base = 10, value = default_value;
	char *pd = skip_spaces(*ppd);

	if (*pd == '&')
	{
		base = 16;
		pd++;
	}
	if ((*pd != '\0') && (*pd != SEPARATOR))
	{
		value = 0;
		do
		{
			int digit = *pd - '0';
			if (base == 16)
			{
				/* Adjust for 'A' to 'F'. */
				if (digit > 9) digit -= 'A'-'9'-1;
				/* Adjust for 'a' to 'f'. */
				if (digit > 15) digit -= 'a'-'A';
			}
			if ((digit < 0) || (digit >= base)) break;
			value = value * base + digit;
			pd++;
		}
		while ((*pd != '\0') && (*pd != SEPARATOR));

		pd = skip_spaces(pd);
		if ((*pd != '\0') && (*pd != SEPARATOR))
		{
			/* Print error here. This would not normally be done if	*/
			/* we were not specifically looking for errors and the	*/
			/* field would just take its default value.		*/
			warning("value",
			      "expected separator or end of line");
			printf("GOT %c (%c)",*pd,*pd);

			value = default_value;
		}
	}
	*ppd = skip_past(pd, SEPARATOR);
	return value;
}

int get_default_value(char **ppd, int default_value, int value_size, int value_start)
{
	char *pd = skip_spaces(*ppd);
	if (*pd == INDIRECT_START)
	{
		indirect *ind;
		char *to=++pd;
		char *toend;

		while (*pd !=INDIRECT_END && *pd>' ')
			pd++;
		toend=pd;
		if (*pd!=INDIRECT_END)
		{ /* BROKEN, man */
			warning("default value",
			        "end of default marker not found");
		}
		else
			pd++;

		pd = skip_spaces(pd);
		if ((*pd != '\0') && (*pd != SEPARATOR))
		{
			/* Print error here. This would not normally be done if	*/
			/* we were not specifically looking for errors and the	*/
			/* field would just take its default value.		*/
			warning("default value",
			        "expected separator or end of line");
		}
		/* We can't set any 'real' default value, but the actual
		   value will be checked when the indirected tag is
		   checked */

		ind=malloc(sizeof(indirect));
		if (!ind)
			error("default value",
			      "failed to allocate memory");

		ind->next=indirects; indirects=ind;
		ind->tag=strdup(ctag);
		ind->to=malloc(toend-to+1);
		ind->line=cline;
		if (ind->to==NULL)
		  error("default value","failed to allocate memory");
		memcpy(ind->to,to,toend-to);
		ind->to[toend-to]='\0';
		check_tag(ind->to);

		*ppd = skip_past(pd, SEPARATOR);
		return default_value;
	}
	else if(*pd == STRING_START)
	{
                /* pointer to the static workspace allocated to store the string                */
                char *defaultSpace = defaultString;

                /* move from quote to first char of string and remember this value              */
                char *stringStart = ++pd;

                /* max size of string (whichever is smaller out of buffer limit / length of tag */
                int max_size = (value_size/8 > DEFAULT_STRING_MAXLEN) ? DEFAULT_STRING_MAXLEN : value_size/8;

                int length = 0;

                while (*pd>'\0' && *pd!=STRING_END )
                {
                        if( *pd==STRING_ESCAPE )
                                pd+=2;
                        else
                                pd+=1;
                        length++;
                }

                if( *pd == STRING_END && (value_size % 8 == 0) && (value_start == 0) )
                {
                        /* work out how much to copy */
                        char *stringEnd=(pd-stringStart > max_size) ? stringStart+max_size : pd;

                        if(length > max_size)
                        {
                                if( max_size == DEFAULT_STRING_MAXLEN)
                                {
                                        warning("default string value","string longer than static buffer");
                                }
                                else
                                {
                                        warning("default string value","string longer than tag length");
                                }
                        }

                        while( stringStart < stringEnd )
                        {
                                if( *stringStart == STRING_ESCAPE )
                                {
                                        /* if we get the escape character then blindly copy next char   */
                                        /* need to add one to stringEnd if more string is available     */
                                        /* i.e if stringEnd != pd                                       */
                                        stringStart++;
                                        if( stringEnd < pd )
                                        {
                                                stringEnd++;
                                        }
                                }
                                *defaultSpace++ = *stringStart++;
                        }

                        /* terminate - we have reserved an extra byte for this purpose*/
                        *defaultSpace = '\0';

                        printf("default string value for '%s' = %s\n",ctag, defaultString);
                }
                else
                {
                        if( *pd != STRING_END)
                        {
                                warning("default string value","terminating symbol not found");
                        }
                        if( value_size % 8 !=0)
                        {
                                warning("default string value","tag length not a whole number of bytes");
                        }
                        if( value_start !=0)
                        {
                                warning("default string value","non byte aligned tag");
                        }
                        /* skip past the quote and seperator so GetFlags doesn't think 'result' is a string pointer  */
                }
                pd = skip_past(pd, SEPARATOR);
                *ppd = pd;

                return 0;
	}
	else
	  return get_value(ppd,default_value);
}

int
get_flags(char *pd, int default_flags)
{
	int flags = 0;
	pd = skip_spaces(pd);

	/* Assume that flags is the last field ie. is terminated with '\0'. */
	while (TRUE)
	{
		switch (*pd)
		{
		case 'L':
		case 'l':
			flags |= LOCATION_FLAGS_LOCKED;
			break;

		case 'P':
		case 'p':
			flags |= LOCATION_FLAGS_PROTECTED;
			break;

		default:
			if (isspace(*pd)) break;

			if (*pd != '\0')
			{
				/* Print error here. This would not normally be done if	*/
				/* we were not specifically looking for errors and the	*/
				/* field would just take its default value.		*/
				warning("flags","expected end of line");

				return default_flags;
			}
			return flags;
		}
		pd++;
	}
	/* Compiler will whinge but don't worry. */
}

void
parse_description(char *pd, location *ploc)
{
	/* Get values for all fields, providing defaults for missing or	*/
	/* broken fields.						*/
	ploc->location = get_value(&pd, -1);
	ploc->start_bit = get_value(&pd, DEFAULT_START_BIT);
	ploc->length = get_value(&pd, DEFAULT_LENGTH);
	ploc->value = get_default_value(&pd, DEFAULT_VALUE, ploc->length, ploc->start_bit);
	ploc->flags = get_flags(pd, DEFAULT_FLAGS);
}

void
check_bits(location *ploc)
{
	char *tag = NULL, *last_clash_tag = NULL;
	int start_bit = ploc->location * 8 + ploc->start_bit;
	int end_bit = start_bit + ploc->length;
	int i;

	for (i = start_bit; i < end_bit; i++)
	{
		/* Check for a clash. */
		if (bits[i].tag != NULL)
		{
			/* But only report each tag clash once, not for each bit. */
			if (bits[i].tag != last_clash_tag)
			{
				warning("bit check",
				      "clashes with tag '%s'", bits[i].tag);
				last_clash_tag = bits[i].tag;
			}
		} else {
			/* No clash so copy tag if not already done and store in bits. */
			if (tag == NULL)
			{
				tag = (char *)malloc(strlen(ctag) + 1);
				if (tag != NULL)
					strcpy(tag, ctag);
				else
					error("bit check",
					      "Couldn't allocate memory for tag name\n");
			}
			bits[i].tag = tag;
		}
	}
}

void
check_location(location *ploc)
{
	if (ploc->location != -1)
	{
		if (ploc->location < NVRAM_BYTE_SIZE)
		{
			int max_value = (1 << ploc->length) - 1;

			if (verbose)
				printf("%s: location=%d, start_bit=%d, length=%d, value=%d, flags=%d\n",
					ctag, ploc->location, ploc->start_bit, ploc->length, ploc->value, ploc->flags);
			if ((max_value >= 0) && (ploc->value > max_value))
				warning("default value",
				        "Default value out of range");
			check_bits(ploc);
		} else
			warning("location","Location out of range");
	} else
		warning("location","Location not specified");
}

void
check_description(char *desc)
{
	location loc;

	/* Parse the description into a location structure and	*/
	/* check for collisions.				*/
	parse_description(desc, &loc);
	check_location(&loc);
}

void
check_tag(char *tag)
{
	char *tagname=tag;
	/* Tag must exist and must be all alphanumeric or '_'. */
	if (*tag != '\0')
	{
		do {
			if (!isalnum(*tag) && (*tag != '_'))
				warning("tag name",
				        "Illegal character '%c' (%i) in '%s'",
				        *tag,*tag,tagname);
		} while (*++tag != '\0');
	} else
		warning("tag name","missing tag name");
}

void
process_line(char *line)
{
	ctag = NULL;
	if ((*line != '\0') && (*line != '#'))
	{
		/* Find the tag separator. */
		char *separator = strchr(line, ':');

		if (separator != NULL)
		{
			/* Split into tag and description and check both. */
			*separator = '\0';
			ctag = line;
			check_tag(ctag);
			check_description(separator+1);
		} else
			warning("line format","Missing ':'");
	}
}

void
process_file(FILE *fp)
{
	char *line = (char *)malloc(LINELEN);

	cline = 0;

	if (line != NULL)
	{
		while (fgets(line, LINELEN, fp) != NULL)
		{
			char *cp = strchr(line, '\n');
			++cline;
			if (cp != NULL) *cp = '\0';
			process_line(line);
		}
		free(line);
	} else
		error("line processor","Failed to allocate line buffer\n");
}

void
report_free(int start_bit, int end_bit)
{
	int start_loc = start_bit / 8;
	int end_loc = end_bit / 8;

	printf("Bits free (%d) ", end_bit - start_bit + 1);

	start_bit -= start_loc * 8;
	end_bit -= end_loc * 8;

	printf("between location &%04X bit %d and location &%04X bit %d\n",
		start_loc, start_bit, end_loc, end_bit);
}

void
free_bits( void )
{
	int i, last_free = -1;
	char *last_tag = NULL;

	for (i = 0; i < NVRAM_SIZE; i++)
	{
		if (bits[i].tag == NULL)
		{
			/* Check for start of a free range of bits. */
			if (last_free < 0) last_free = i;
		}
		else
		{
			/* Check for end of a free range of bits. */
			if (last_free >= 0)
			{
				report_free(last_free, i-1);

				/* Get ready for next range of free bits. */
				last_free = -1;
			}
			/* Free copies of tags we made (but only once). */
			if (bits[i].tag != last_tag)
			{
				if (last_tag != NULL) free(last_tag);
				last_tag = bits[i].tag;
			}
		}
	}
	/* Report any free space to the end of NV-RAM. */
	if (last_free >= 0) report_free(last_free, NVRAM_SIZE-1);

	/* Free bits array. */
	free(bits);
}

bit *
bit_find(char *tag)
{
	int i;
	for (i = 0; i < NVRAM_SIZE; i++)
	{
		char *bittag=bits[i].tag;
		/* if (bittag) */
		  /* printf(":: %s:%s:%i\n",bittag,tag,strcmp(bittag,tag)); */
		if (bittag!=NULL && strcmp(bittag,tag)==0)
			return &bits[i];
	}
	return NULL;
}

void
indirect_clearcycle(void)
{
  indirect *clear=indirects;
  while (clear)
  {
    clear->flags&=~FLAG_CYCLECHECK;
    clear=clear->next;
  }
}

int
indirect_cycle(indirect *ind)
{
  indirect *check=indirects;
  char *to=ind->to;
  ind->flags|=FLAG_CYCLECHECK;
  while (check)
  {
    if (strcmp(to,check->tag)==0)
    {
      if (check->flags & FLAG_CYCLECHECK)
        return 1;
      else
        return indirect_cycle(check);
    }
    check=check->next;
  }
  return 0;
}

void indirect_entries(void)
{
	indirect *ind=indirects;
	while (ind)
	{
		bit *bitto;
		ctag=ind->tag; cline=ind->line;
		bitto=bit_find(ind->to);
		indirect_clearcycle();
		if (((ind->flags & FLAG_CYCLEKNOWN)==0) &&
		    indirect_cycle(ind))
		{
		  indirect *cycle=indirects;
		  warning("indirection","cycle detected through :");
		  while (cycle)
		  {
		    if (cycle->flags & FLAG_CYCLECHECK)
		    {
		      cycle->flags|=FLAG_CYCLEKNOWN;
		      warning("indirection","  tag '%s'",cycle->tag);
		    }
		    cycle=cycle->next;
		  }
		}
		printf("%s -> %s\n",ind->tag,ind->to);
		if (bitto==NULL)
			warning("indirection",
			        "Tag '%s' does not exist",ind->to);
		ind=ind->next;
	}
}

void
syntax( void )
{
	printf("NVCheck " Module_FullVersion " ["Module_Date"]\n");
	printf("Syntax: nvcheck [-v] <file>\n");
	exit(1);
}

int
main(int argc, char **argv)
{
	char *file = NULL;
	FILE *fp;

	while (--argc)
	{
		if (*(*++argv) == '-')
		{
			switch (*(*argv+1))
			{
			case 'v':
				verbose = TRUE;
				break;

			default:
				syntax();
			}
		}
		else
		{
			if (file != NULL) syntax();
			file = *argv;
		}
	}

	if (file == NULL) syntax();

	if ((fp = fopen(file, "r")) != NULL)
	{
		int bufsz = sizeof(bit) * NVRAM_SIZE;

		if ((bits = (bit *)malloc(bufsz)) != NULL)
		{
			memset(bits, 0, bufsz);
			process_file(fp);
			indirect_entries();
			free_bits();
		} else
			error("main processor","Could not allocate memory for bit array");

		fclose(fp);
	} else
		printf("Could not open file '%s'\n", file);
}

@


1.5
log
@  Removed subcomponent VersionNum file
Detail:
  * On advice from Stewart, tied nvcheck utility version number to the
    parent component.
  * MkClean script modified to only remove files, not recursing through
    the directory structure.
Admin:
  Briefly tested that it compiles. No other changes made.

Version 0.47. Tagged as 'NVRAM-0_47'
@
text
@d38 7
d53 1
d64 2
a71 12
#define DEFAULT_START_BIT	0
#define DEFAULT_LENGTH		8
#define DEFAULT_VALUE		0
#define DEFAULT_FLAGS		0

#define SEPARATOR		','
#define INDIRECT_START		'<'
#define INDIRECT_END		'>'

#define FLAGS_LOCKED		(1<<0)
#define FLAGS_PROTECTED		(1<<1)

a75 4
typedef struct _location {
	int location, start_bit, length, value, flags;
} location;

d98 2
d110 1
a110 1
	
d124 1
a124 1
	
d203 1
a203 1
int get_default_value(char **ppd, int default_value)
d211 1
a211 1
		
d222 1
a222 1
		
d235 1
a235 1
		
d240 1
a240 1
		
d250 1
a250 1
		
d254 81
d352 1
a352 1
			flags |= FLAGS_LOCKED;
d357 1
a357 1
			flags |= FLAGS_PROTECTED;
d387 1
a387 1
	ploc->value = get_default_value(&pd, DEFAULT_VALUE);
@


1.4
log
@  NVRAM tags checker code updated to support indirected tags.
Detail:
  * Indirected tag checking support added to identify tags which refer to
    tags which don't exist or cyclic dependencies.
  * Initial work to allow Throwback to be dropped in if it's ever needed.
  * Now includes a versionnum file to ensure that versions of the file
    can be identified.
Admin:
  Tested with the supplied test file and a number of real
  well-formed files.

Version 0.02. Not tagged
@
text
@d54 1
a54 1
#include "VersionNum"
@


1.3
log
@Changed to use OS_NVMemory SWIs if available. Crops fields in Tags file to
available NVRAM.
Makefile changed to use Link 5.08.
nvcheck modified to cope with up to 16K of NVRAM.

Version 0.18. Tagged as 'NVRAM-0_18'
@
text
@d52 3
d68 2
d86 11
d102 42
d196 3
a198 1
			printf("Error in field for tag '%s' at line %d\n", ctag, cline);
d207 55
d291 1
a291 1
				printf("Error in flags for tag '%s' at line %d\n", ctag, cline);
d310 1
a310 1
	ploc->value = get_value(&pd, DEFAULT_VALUE);
d330 2
a331 1
				printf("Tag '%s' clashes with tag '%s'\n", ctag, bits[i].tag);
d342 2
a343 1
					printf("Couldn't allocate memory for tag\n");
d363 2
a364 1
				printf("Default value out of range for tag '%s' at line %d\n", ctag, cline);
d367 1
a367 1
			printf("Location out of range for tag '%s' at line %d\n", ctag, cline);
d369 1
a369 1
		printf("Missing location for tag '%s' at line %d\n", ctag, cline);
d386 1
d392 3
a394 1
				printf("Illegal '%c' in tag '%s' at line %d\n", *tag, ctag, cline);
d397 1
a397 1
		printf("Missing tag at line %d\n", cline);
d403 1
d417 1
a417 1
			printf("Missing ':' at line %d\n", cline);
d439 1
a439 1
		printf("Failed to allocate line buffer\n");
d495 78
d576 1
d618 1
d621 1
a621 1
			printf("Could not allocate memory for bit array\n");
@


1.2
log
@Fix previous erroneous attempt to merge from branch Spinner.
Manually edited VersionNum to restore sane version number.
DO NOT USE THE PREVIOUS TRUNK COMMIT OF THIS MODULE (NVRAM-2_02).

Version 0.15. Tagged as 'NVRAM-0_15'
@
text
@d70 1
a70 1
#define NVRAM_BYTE_SIZE		2048
d286 1
a286 1
		
d330 2
a331 2
	
	printf("between location &%03x bit %d and location &%03X bit %d\n",
@


1.1
log
@Initial revision
@
text
@d70 1
a70 1
#define NVRAM_BYTE_SIZE		1024
@


1.1.1.1
log
@Initial version.

@
text
@@


1.1.1.2
log
@Extended to support 2K EEPROM.
Made (hopefully) final allocations.
Fixed TV interlace setting to 1 (stop syncs getting confused).
@
text
@d70 1
a70 1
#define NVRAM_BYTE_SIZE		2048
@
