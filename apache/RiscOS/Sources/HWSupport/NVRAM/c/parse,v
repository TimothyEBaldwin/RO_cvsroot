head	1.7;
access;
symbols
	NVRAM-0_68:1.7
	NVRAM-0_67:1.7
	NVRAM-0_66:1.7
	RO_5_07:1.7
	NVRAM-0_65:1.7
	NVRAM-0_64:1.7
	NVRAM-0_63:1.7
	NVRAM-0_62:1.7
	NVRAM-0_61:1.7
	NVRAM-0_60:1.7
	NVRAM-0_59:1.7
	NVRAM-0_58:1.7
	NVRAM-0_57:1.7
	NVRAM-0_56:1.7
	NVRAM-0_55:1.7
	NVRAM-0_54:1.7
	NVRAM-0_53:1.7
	NVRAM-0_52:1.7
	NVRAM-0_51:1.7
	NVRAM-0_50:1.7
	dellis_autobuild_BaseSW:1.7
	NVRAM-0_49:1.7
	NVRAM-0_48:1.6
	NVRAM-0_47:1.5
	NVRAM-0_45:1.4
	NVRAM-0_44:1.3
	NVRAM-0_43:1.3
	NVRAM-0_42:1.3
	sbrodie_sedwards_16Mar2000:1.3
	NVRAM-0_41:1.3
	NVRAM-0_40:1.3
	NVRAM-0_39:1.3
	NVRAM-0_38:1.3
	NVRAM-0_37:1.3
	NVRAM-0_36:1.3
	NVRAM-0_35:1.3
	NVRAM-0_33:1.3
	NVRAM-0_31:1.3
	NVRAM-0_30:1.3
	NVRAM-0_29:1.3
	NVRAM-0_28:1.3
	NVRAM-0_27:1.3
	NVRAM-0_26:1.3
	NVRAM-0_25:1.3
	NVRAM-0_24:1.3
	NVRAM-0_23:1.3
	dcotton_autobuild_BaseSW:1.7
	nturton_NVRAM-0_21:1.3
	NVRAM-0_22:1.3
	dcotton_nvram-MPTInitialBuild:1.3
	NVRAM-0_21:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	NVRAM-0_20:1.3
	NVRAM-0_19:1.3
	NVRAM-0_18:1.3
	NVRAM-0_17:1.2
	NVRAM-0_16:1.2
	Spin_merge:1.1.1.4
	NVRAM-0_15:1.2
	NVRAM-2_02:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	jfarrell_NVRAM-0_13:1.1.1.4
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_NC2_Generic:1.1.1.4
	Spinner_B20_2:1.1.1.4
	Spinner_19_3:1.1.1.4
	Spinner_B18:1.1.1.4
	Spinner_B17:1.1.1.4
	Spinner_B15:1.1.1.4
	Spinner_B14:1.1.1.2
	Spinner_B13:1.1.1.2
	Spinner_B12:1.1.1.2
	Spinner_B10:1.1.1.2
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2000.09.26.17.35.08;	author rcathera;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.08.17.32.11;	author rcathera;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.10.16.39.54;	author jfletche;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.10.12.44.24;	author jfletche;	state Exp;
branches;
next	1.3;

1.3
date	98.09.24.12.01.43;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	98.09.10.18.03.58;	author jfarrell;	state Exp;
branches;
next	1.1;

1.1
date	97.03.18.18.10.11;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.18.10.11;	author scormie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.08.09.43.56;	author scormie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.06.25.11.11.09;	author scormie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.06.26.12.19.10;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@  Added support for default strings and indirect tags pointing to strings.
  Tidied up indirect tags pointing to integer values.
Detail:
  If the default field is enclosed in quotes it is taken as being a string
   the escape character is currently a forward slash. Any character apart from
   '\0' may be used in the string so in theory any data type could be encoded
   provided it doesn't need a 0 byte anywhere in it. Infact this would be easy
   to fix - the removal of the escape characters could be done as the string
   is copied into the cache buffer so 0 bytes could be escaped.
  When a string is read and temporary buffer is allocated and it's address is
   returned in the value field. To indicate this a bit in the flag word is set
   LOCATION_FLAGS_POINTER - this bit is not useful outside the module but is
   returned by NVRAM_Lookup.

  c/nvram
   FullReset & LockedReset both modified to understand what to do if
 		LOCATION_FLAGS_POINTER is set
   GetLocation now takes an extra argument either TRUE or FALSE that
		is passed to parse_description. This is to signify whether
		or not the caller requires a default value to be looked up
		and returned. This should be FALSE (0) for all normal routines,
		and TRUE for routines involved in reset code.
  c/parse
   parse_description takes an extra argument as described above which is passed
		to GetDefaultValue.
   GetDefaultValue has been heavily modified to understand strings and the
		indirection code is different to cope with strings. It also
		takes a pointer to a flag word (see GetFlags below)
   GetFlags now takes a pointer to the flag word and modifies it so that
		GetDefaultValue can set the LOCATION_FLAGS_POINTER bit
Admin:
  A limited amount of testing has taken place but it needs testing in a real
   situation.
  It seems a bit messy in several places and consideration should be given to
   rewriting those functions which are relevant to reseting the NVRAM and the
   routines in c/parse. Separating these a bit would probably allow a tidier
   implementation of the new functionality in this version.

Version 0.49. Tagged as 'NVRAM-0_49'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > parse.c */

#include <stdlib.h>
#include <ctype.h>

#include "nvram.h"
#include "parse.h"

#include "trace.h"

/* need one extra byte for termination, although this will not be copied - even if */
/* the length of the default string == DEFAULT_STRING_MAXLEN                    */
//char defaultString[DEFAULT_STRING_MAXLEN+1];
char *defaultString;

static int
IsSpace(char c)
{
	return (c == ' ') || (c == 9);
}

static char *
SkipSpaces(char *cp)
{
	while ( (*cp == ' ') || (*cp == 9) ) cp++;
	return cp;
}

static char *
SkipPast(char *cp, char c)
{
	/* Skip past char c but stop at '\0'. */
	while ((*cp != '\0') && (*cp != c)) cp++;
	return (*cp == '\0') ? cp : cp + 1;
}


static unsigned int
GetValue(char **ppd, int default_value)
{
	int base = 10, value = default_value;
	char *pd = SkipSpaces(*ppd);

	TRACE( "GetValue: parsing '%s'\n" _ pd );

	if (*pd == '&')
	{
		base = 16;
		pd++;
	}
	if ((*pd != '\0') && (*pd != SEPARATOR))
	{
		value = 0;
		do
		{
			int digit = *pd - '0';
			if (base == 16)
			{
				/* Adjust for 'A' to 'F'. */
				if (digit > 9) digit -= 'A'-'9'-1;
				/* Adjust for 'a' to 'f'. */
				if (digit > 15) digit -= 'a'-'A';
			}

			TRACE( "GetValue: digit = %X\n" _ digit );

			if ((digit < 0) || (digit >= base)) break;
			value = value * base + digit;
			pd++;
		}
		while ((*pd != '\0') && (*pd != SEPARATOR));

		pd = SkipSpaces(pd);
		if ((*pd != '\0') && (*pd != SEPARATOR))
			value = default_value;
	}
	*ppd = SkipPast(pd, SEPARATOR);

	TRACE( "GetValue: now pointing to '%s'\n" _ *ppd );

	return value;
}

/******************************************************************
 Function:     GetDefaultValue
 Description:  When we read a default value, we may need to look at
               another tag if it contains an indirect reference
 Parameters:   ppd-> the pointer to the string (update this when you're
                     done)
               default_value = the value to assign when nothing is given
                               as a default value
               value_size = the size of the value we're writing into
               flags -> int flags so we can indicate strings
               getDefault = whether or not bother getting a default value
                            if FALSE then it is sufficient just to skip past
                            the default value
 Returns:      value read
 NOTE:         JRF: I know this isn't a particularly wonderful way
                    of doing things, but I don't want to have to
                    re-structure all the file to cache the locations
                    and redirections just to implement this particular
                    thing. You can just have a small speed hit when
                    you look up indirected tags.
 Future:       What could be done in the future would be to allow fields
               to take arbitrary parameters so that any binary field
               sequence could be included, as could strings and any
               other data sequences. Simialrly it would allow larger
               than 4 byte fields to be defaulted by a tag.
 Further comments (RJC/rcathera)
                flags and getDefault added to support default strings
                and indirection to a string. I don't really like what
                I've had to do, but it works and I've only made
                notable changes to this, parse_description and the
                Full/Lock Reset functions. My suggestion for
                improving things is to make type location hold
                start_byte,start_bit,length,flags but not value
                Then the Reset code should be seperated from code
                which is used during normal reads and writes.
                The main problem with this is the code which skips
                over the default field in the tags file. It might be
                worth considering making this the final field.
                ******************************************************************/
static unsigned int
GetDefaultValue(char **ppd, int default_value, int value_size, int* flags, int getDefault)
{
	unsigned int result=default_value;
	char *pd = SkipSpaces(*ppd);
	TRACE( "GetDefaultValue: parsing '%s'\n" _ pd );
	if (*pd == INDIRECT_START)
	{
		/* it's an indirected tag */
		char *name=++pd;
		while (*pd>=' ' && *pd!=INDIRECT_END)
			pd++;
		if (*pd==INDIRECT_END && getDefault)
		{
                        int recurseResult;
                        location recurseLoc;
                        char *descbuf = (char *)malloc( TMPBUF_SIZE );

			/* valid NVRAM tag indirection */
                        *pd='\0'; /* terminate there */

                        /* no memory */
                        if ( descbuf == NULL ) return default_value;

                        /* get either a value or a pointer to the string */
                        recurseResult = (int) GetLocation(name, descbuf, &recurseLoc, 1);
                        if( recurseResult )
                        {
                                /* check that we can store the whole of the tag we've jumped to in the current tag */
                                if( recurseLoc.length <= value_size )
                                {
                                        /* We currently have the default value in recurseLoc - this is no use   */
                                        /* we want the value that is actually stored in the (protected) NVRAM   */
                                        /* since this will be programmed by the manufacturer (not set by the    */
                                        /* tags file).                                                          */

                                        /* if it's a pointer value then modify the flags to reflect this        */
                                        /* use nvram_get to read the value  */

                                        int buffer_size;
                                        if( recurseLoc.flags & LOCATION_FLAGS_POINTER )
                                        {
                                                /* find out the size of the buffer */
                                                nvram_get( name, 0, 0, &buffer_size);

                                                /* allocate a buffer */

                                                if( defaultString != NULL )
                                                {
                                                        free( defaultString );
                                                }

                                                defaultString = (char *)malloc( buffer_size );
                                                if (defaultString == NULL)
                                                {
                                                        TRACE("GetDefaultValue: unable to claim buffer for indirect string");
                                                        result = default_value;
                                                }
                                                else
                                                {
                                                        nvram_get( name, defaultString, buffer_size, &buffer_size );
                                                        result = (unsigned int) defaultString;
                                                        *flags |= LOCATION_FLAGS_POINTER;
                                                }
                                        }
                                        else
                                        {
                                                nvram_get( name, &result, 0, &buffer_size);
                                        }
                                }
                                else
                                {
                                        TRACE( "GetDefaultValue: The indirected tag is smaller then the source tag. Ignoring indirection\n");
                                        result = default_value;
                                }
                        }
                        else
                        {
                                TRACE( "GetDefaultValue: failed to lookup the indirected tag '%s'\n" _ name);
                                result = default_value;
                        }
                        free(descbuf);

			*pd++=INDIRECT_END; /* put it back - icky */
		}
                *ppd = SkipPast(pd, SEPARATOR);
	}
        else if (*pd == STRING_START)
        {
                /* default is a string                                                          */
                /* loc->value will be used as a pointer to a string                             */
                /* loc->flags will have a bit that indicates this - for internal use            */

                /* null strings can be included by setting the default value to a               */
                /* suitable string terminating value like 0 or 13  or with ""                   */
                /* to include a quote (") symbol use escape character i.e /"                    */
                /* e.g news_username:&100,,,"Jack /"The Hack/" McVitie"                         */
                /* I'm fairly sure the name above is wrong but it's only an example and I       */
                /* didn't know the bloke personally                                             */

                /* pointer to the workspace allocated to store the string                       */
                char *defaultSpace;

                /* move from quote to first char of string and remember this value              */
                char *stringStart = ++pd;

                /* max size of string (whichever is smaller out of buffer limit / length of tag */
                int max_size = value_size / 8; //(value_size/8 > DEFAULT_STRING_MAXLEN) ? DEFAULT_STRING_MAXLEN : value_size/8;

                TRACE("GetDefaultValue: DefaultString");

                while (*pd>'\0' && *pd!=STRING_END )
                {
                        if( *pd==STRING_ESCAPE )
                                pd+=2;
                        else
                                pd+=1;
                }

                if( getDefault )
                {
                        if( *pd == STRING_END && (value_size % 8 == 0) )
                        {
                                /* allocate some space for the string inc an extra byte for a zero terminator   */
                                /* this includes space for the escape character which are not really needed     */
                                defaultString = (char *)malloc( pd - stringStart + 2);
                                defaultSpace = defaultString;

                                /* if no memory was avilable then return the default value */
                                if (defaultString != NULL)
                                {
                                        /* work out how much to copy */
                                        char *stringEnd = (pd-stringStart > max_size) ? stringStart+max_size : pd;

                                        while( stringStart < stringEnd )
                                        {
                                                if( *stringStart == STRING_ESCAPE )
                                                {
                                                        /* if we get the escape character then blindly copy next char   */
                                                        /* need to add one to stringEnd if more string is available     */
                                                        /* i.e if stringEnd != pd                                       */
                                                        stringStart++;
                                                        if( stringEnd < pd )
                                                        {
                                                                stringEnd++;
                                                        }
                                                }
                                                *defaultSpace++ = *stringStart++;
                                        }

                                        /* terminate - we have reserved an extra byte for this purpose*/
                                        *defaultSpace = '\0';

                                        TRACE( " =  '%s'\n" _ defaultString);

                                        /* set flag to indicate we have returned a pointer */
                                        *flags |= LOCATION_FLAGS_POINTER;
                                        result = (int) defaultString;
                                }
                                else
                                {
                                        TRACE(" has been ignored - no memory available\n");
                                }
                        }
                        else
                        {
                                TRACE(" has been ignored - mistake in tag\n");
                        }
                }
                else
                {
                        TRACE(" has been ignored - getDefault=FALSE\n");
                }
                pd = SkipPast(pd, SEPARATOR);
                *ppd=pd;
        }
        else
		result=GetValue(ppd,default_value);

	TRACE( "GetDefaultValue: now pointing to '%s' got %i\n" _ *ppd _ result);
	return result;
}

static int
GetFlags(char *pd, int flags)
{
	pd = SkipSpaces(pd);

	TRACE( "GetFlags: parsing '%s'\n" _ pd );

	/* Assume that flags is the last field ie. is terminated with '\0'. */
	while (1)
	{
		switch (*pd)
		{
		case 'L':
		case 'l':
			flags |= LOCATION_FLAGS_LOCKED;
			break;

		case 'P':
		case 'p':
			flags |= LOCATION_FLAGS_PROTECTED;
			break;

		default:
			if (IsSpace(*pd)) break;

                        return (*pd != '\0') ? DEFAULT_FLAGS : flags;
		}
		pd++;
	}
	/* Compiler might whinge but don't worry. */
}

int
parse_description(char *pd, location *ploc, int nvram_limit, int getDefault)
{
        int flags = DEFAULT_FLAGS;

	TRACE( "parse_description: parsing '%s'\n" _ pd );

	/* Get values for all fields, providing defaults for missing or	*/
	/* broken fields.						*/

	ploc->location = GetValue(&pd, -1);
	ploc->start_bit = GetValue(&pd, DEFAULT_START_BIT);
	ploc->length = GetValue(&pd, DEFAULT_LENGTH);
        ploc->value = GetDefaultValue(&pd, DEFAULT_VALUE, ploc->length, &flags, getDefault);
	ploc->flags = GetFlags(pd, flags);

	TRACE( "location = &%03X, start_bit = %d, length = %d, value = %d, flags = %d\n" _ \
		ploc->location _ ploc->start_bit _ ploc->length _ ploc->value _ ploc->flags );

        /* If the field is outside the NVRAM, act as if the field doesn't exist */
	if (ploc->location >= nvram_limit)
	        return 0;

        /* Crop the field to the NVRAM available */
	if (ploc->location * 8 + ploc->start_bit + ploc->length > nvram_limit * 8)
	{
	        ploc->length = nvram_limit * 8 - (ploc->location * 8 + ploc->start_bit);
	}

	return (ploc->location != -1);
}
@


1.6
log
@  Added SWI NVRAM_Lookup which takes a pointer to a Tag in r0 on entry
  and returns startbyte within NVRAM (suitable for use with OS_NVMemory)
  in r0, startbit within byte in r1, length in r2 and flags in r3
  Added SWI NVRAM_Set and Get which take the same arguments as Read
  and Write but now return error pointers in r0 an error occurs
  instead of a -ve number.
  Added SWI NVRAM_SetBytes and GetBytes which work like Set/Get but also
  take an offset in r3 that is added to the address of the Tag to allow
  access to part of a Tag without needing to read or write the whole
  thing.

Detail:
  NVRAM_Read and Write used to pass on proper RISC OS errors if an external
  error was generated, but returned a -ve number in r0 if an internal error
  occured.
  NVRAM_Get and Set behave properly and use the error block 0x00819200
  this also means that Set preserves r0 (it used to return 0 for success)
  For compatibility Read and Write have not been removed but are deprecated,
  additionally the new error codes are the positive versions of the old
  error codes (hopefully this will ease converting code to use the new SWIs)
  The Messages file has been seperated from the Tags file and the module can
  return MsgTrans'ed error messages.

Admin:
  Tested all SWIs to a reasonable extent using a softloaded version.

Version 0.48. Tagged as 'NVRAM-0_48'
@
text
@d17 1
d21 1
d25 4
d107 4
d123 14
a136 1
 ******************************************************************/
d138 1
a138 1
GetDefaultValue(char **ppd, int default_value, int value_size)
d149 1
a149 1
		if (*pd==INDIRECT_END)
d151 4
a154 1
			int length;
d156 64
a219 15
			*pd++='\0'; /* terminate there */
			if (nvram_read(name,&result,sizeof result,&length) ||
			    length<=0)
			{
				result=default_value;
				TRACE( "GetDefaultValue: bad NVRAM value, using default, err= %i\n" ); //_ err );
			}
			else
			{
				if (length*8 < value_size)
				{
					result=default_value;
					TRACE( "GetDefaultValue: default indirection size is > value size, ignoring\n" );
				}
			}
a220 5

			pd = SkipSpaces(pd);
			if ((*pd != '\0') && (*pd != SEPARATOR))
				result = default_value;
			*ppd = SkipPast(pd, SEPARATOR);
d222 1
d224 90
a313 1
	else
d321 1
a321 1
GetFlags(char *pd, int default_flags)
a322 1
	int flags = 0;
d345 1
a345 1
			return (*pd != '\0') ? default_flags : flags;
d353 1
a353 1
parse_description(char *pd, location *ploc, int nvram_limit)
d355 2
d361 1
d365 2
a366 2
	ploc->value = GetDefaultValue(&pd, DEFAULT_VALUE, ploc->length);
	ploc->flags = GetFlags(pd, DEFAULT_FLAGS);
@


1.5
log
@  Changed method of referring to indirected tags
Detail:
  * After discussion with Kevin, changed to using <> instead of "'s around
    indirected tags. This might allow strings to be included at some
    future date.
Admin:
  Tested. Works the same as before.

Version 0.46. Tagged as 'NVRAM-0_46'
@
text
@d135 1
a135 1
				TRACE( "GetDefaultValue: bad NVRAM value, using default, err= %i\n" _ err );
d146 1
a146 1
			
d155 1
a155 1
	
@


1.4
log
@  Added support for default value indirected tags.
Detail:
  * Tags with a default value as a tagname in quotes will use the default
    value from that tag. This will allow certain tags to be programmed
    into the NVRAM at manufacture which are always restored, regardless of
    the configuration of the main tag. This is required
  * For reasons of ease, parts of the decoding process have been reworked;
    with the effect that pointers to register blocks aren't passed around
    now.
Admin:
  Tested locally; needs testing in a full build.
  This feature is needed for Bethany to support a default country, so that
  they will always start in a valid state.

Version 0.45. Tagged as 'NVRAM-0_45'
@
text
@d120 1
a120 1
	if (*pd == '"')
d124 1
a124 1
		while (*pd>=' ' && *pd!='"')
d126 1
a126 1
		if (*pd=='"')
d145 1
a145 1
			*pd++='"'; /* put it back - icky */
@


1.3
log
@Changed to use OS_NVMemory SWIs if available. Crops fields in Tags file to
available NVRAM.
Makefile changed to use Link 5.08.
nvcheck modified to cope with up to 16K of NVRAM.

Version 0.18. Tagged as 'NVRAM-0_18'
@
text
@d45 1
d92 68
d203 1
a203 1
	ploc->value = GetValue(&pd, DEFAULT_VALUE);
@


1.2
log
@Fix previous erroneous attempt to merge from branch Spinner.
Manually edited VersionNum to restore sane version number.
DO NOT USE THE PREVIOUS TRUNK COMMIT OF THIS MODULE (NVRAM-2_02).

Version 0.15. Tagged as 'NVRAM-0_15'
@
text
@d85 1
a85 1
	
d125 1
a125 1
parse_description(char *pd, location *ploc)
d139 10
@


1.1
log
@Initial revision
@
text
@d24 6
d33 1
a33 1
	while (isspace(*cp)) cp++;
d45 1
a45 1
static int
d51 2
d71 3
d85 3
d97 2
d115 1
a115 1
			if (isspace(*pd)) break;
d127 2
@


1.1.1.1
log
@Initial version.

@
text
@@


1.1.1.2
log
@Fixed various bugs, including not using isspace when using TinyStubs as
the shared C library doesn't seem to initialise its copy of __ctype.
@
text
@d27 1
a27 1
	while ( (*cp == ' ') || (*cp == 9) ) cp++;
a44 2
	TRACE( "GetValue: parsing '%s'\n" _ pd );

a62 3

			TRACE( "GetValue: digit = %X\n" _ digit );

a73 3
	
	TRACE( "GetValue: now pointing to '%s'\n" _ *ppd );

a82 2
	TRACE( "GetFlags: parsing '%s'\n" _ pd );

a110 2
	TRACE( "parse_description: parsing '%s'\n" _ pd );

@


1.1.1.3
log
@Fixed bug thrown up by development tests.
@
text
@d39 1
a39 1
static unsigned int
@


1.1.1.4
log
@No longer uses isspace as it doesn't work when using TinyStubs.
@
text
@a23 6
static int
IsSpace(char c)
{
	return (c == ' ') || (c == 9);
}

d109 1
a109 1
			if (IsSpace(*pd)) break;
@
