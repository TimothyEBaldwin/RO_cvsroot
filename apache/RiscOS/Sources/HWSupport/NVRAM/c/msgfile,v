head	1.4;
access;
symbols
	NVRAM-0_68:1.4
	NVRAM-0_67:1.4
	NVRAM-0_66:1.4
	RO_5_07:1.4
	NVRAM-0_65:1.4
	NVRAM-0_64:1.4
	NVRAM-0_63:1.4
	NVRAM-0_62:1.4
	NVRAM-0_61:1.4
	NVRAM-0_60:1.4
	NVRAM-0_59:1.4
	NVRAM-0_58:1.4
	NVRAM-0_57:1.4
	NVRAM-0_56:1.4
	NVRAM-0_55:1.4
	NVRAM-0_54:1.4
	NVRAM-0_53:1.4
	NVRAM-0_52:1.4
	NVRAM-0_51:1.4
	NVRAM-0_50:1.4
	dellis_autobuild_BaseSW:1.4
	NVRAM-0_49:1.4
	NVRAM-0_48:1.4
	NVRAM-0_47:1.3
	NVRAM-0_45:1.3
	NVRAM-0_44:1.2
	NVRAM-0_43:1.2
	NVRAM-0_42:1.2
	sbrodie_sedwards_16Mar2000:1.2
	NVRAM-0_41:1.2
	NVRAM-0_40:1.2
	NVRAM-0_39:1.2
	NVRAM-0_38:1.2
	NVRAM-0_37:1.2
	NVRAM-0_36:1.2
	NVRAM-0_35:1.2
	NVRAM-0_33:1.2
	NVRAM-0_31:1.2
	NVRAM-0_30:1.2
	NVRAM-0_29:1.2
	NVRAM-0_28:1.2
	NVRAM-0_27:1.2
	NVRAM-0_26:1.2
	NVRAM-0_25:1.2
	NVRAM-0_24:1.2
	NVRAM-0_23:1.2
	dcotton_autobuild_BaseSW:1.4
	nturton_NVRAM-0_21:1.2
	NVRAM-0_22:1.2
	dcotton_nvram-MPTInitialBuild:1.2
	NVRAM-0_21:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	NVRAM-0_20:1.2
	NVRAM-0_19:1.2
	NVRAM-0_18:1.2
	NVRAM-0_17:1.2
	NVRAM-0_16:1.2
	Spin_merge:1.1.1.3
	NVRAM-0_15:1.2
	NVRAM-2_02:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	jfarrell_NVRAM-0_13:1.1.1.3
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_NC2_Generic:1.1.1.3
	Spinner_B20_2:1.1.1.3
	Spinner_19_3:1.1.1.3
	Spinner_B18:1.1.1.3
	Spinner_B17:1.1.1.3
	Spinner_B15:1.1.1.3
	Spinner_B14:1.1.1.3
	Spinner_B13:1.1.1.3
	Spinner_B12:1.1.1.3
	Spinner_B10:1.1.1.3
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2000.09.08.17.32.11;	author rcathera;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.10.12.44.24;	author jfletche;	state Exp;
branches;
next	1.2;

1.2
date	98.09.10.18.03.57;	author jfarrell;	state Exp;
branches;
next	1.1;

1.1
date	97.03.18.18.10.11;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.18.10.11;	author scormie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.06.12.33.54;	author scormie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.08.09.43.55;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Added SWI NVRAM_Lookup which takes a pointer to a Tag in r0 on entry
  and returns startbyte within NVRAM (suitable for use with OS_NVMemory)
  in r0, startbit within byte in r1, length in r2 and flags in r3
  Added SWI NVRAM_Set and Get which take the same arguments as Read
  and Write but now return error pointers in r0 an error occurs
  instead of a -ve number.
  Added SWI NVRAM_SetBytes and GetBytes which work like Set/Get but also
  take an offset in r3 that is added to the address of the Tag to allow
  access to part of a Tag without needing to read or write the whole
  thing.

Detail:
  NVRAM_Read and Write used to pass on proper RISC OS errors if an external
  error was generated, but returned a -ve number in r0 if an internal error
  occured.
  NVRAM_Get and Set behave properly and use the error block 0x00819200
  this also means that Set preserves r0 (it used to return 0 for success)
  For compatibility Read and Write have not been removed but are deprecated,
  additionally the new error codes are the positive versions of the old
  error codes (hopefully this will ease converting code to use the new SWIs)
  The Messages file has been seperated from the Tags file and the module can
  return MsgTrans'ed error messages.

Admin:
  Tested all SWIs to a reasonable extent using a softloaded version.

Version 0.48. Tagged as 'NVRAM-0_48'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > msgfile.c
 *
 *	General purpose message lookup code adapted for use with our
 *      Tags file. If in the future we want to lookup our own errors
 *	too then this code should be enhanced to provide multiple
 *	open message files.
 */

#include <stddef.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "nvram.h"
#include "msgfile.h"
#include "error.h"

#include "trace.h"


/* [ might be useful whilst debugging ] */
/* #define MSGFILE_NAME	"Tags" */


/****************************************************************************
 * Static functions.
 */


/* Read up to 4 parameters using varargs, lastparm points to the last parameter
 * before the varargs and lastsize gives its size. The result is 4 character
 * pointers in p[] (some of which may be NULL).
 */
static void
GetParameters( char *lastparm, int lastsize, char *p[] )
{
	va_list args;
	int i;

	/* Can't use va_start as pointer to parameters has been passed in. */
	*args = lastparm + lastsize;
	for ( i = 0; i < 4; i++ )
		if ( (p[i] = va_arg(args, char *)) == NULL ) break;
	va_end( args );
	while ( ++i < 4 ) p[i] = NULL;
}


/****************************************************************************
 * msgfile_open
 *
 *	In:	fname = pointer to file name of message file
 *		buffer = optional buffer to open file into (can be NULL)
 *
 *	Opens the given message file. Any currently open file will be closed.
 */
_kernel_oserror *
msgfile_open( msgtransblock *mb, char *buffer)
{
        _kernel_oserror *e;

        if ( mb->open ) msgfile_close( mb );

        TRACE( "msgfile_open: opening '%s'\n" _ mb->filename );

        e = _swix( MessageTrans_OpenFile, _INR(0,2), mb->msgblock, mb->filename, buffer );
        if ( !e )
	{
		TRACE( "Messagefile opened\n" );
        	mb->open = 1;
	}
        return e;
}


/****************************************************************************
 * msgfile_lookup
 *
 *	In:	token = pointer to token to look up
 *		buffer = optional buffer to look up string into (can be NULL)
 *		bufsz = size of buffer if buffer != NULL
 *		... up to 4 substitution parameters
 *
 *	Out:	returns the looked up string (or NULL if not found)
 *
 *	Looks up the given token in the currently open message file.
 */
char *
msgfile_lookup( msgtransblock *mb, char *token, char *buffer, int bufsz, ... )
{
	char *p[4];
	char *result;
	int length;
        _kernel_oserror *e;

        if ( !mb->open ) msgfile_open( mb, NULL );

	GetParameters( (char *)&bufsz, sizeof(bufsz), p );

	TRACE( "msgfile_lookup: looking up '%s'\n" _ token );

        e = _swix( MessageTrans_Lookup, _INR(0,7)|_OUTR(2,3), mb->msgblock, token, buffer, bufsz,
                        p[0], p[1], p[2], p[3], &result, &length );

        TRACEIF( e != NULL, "msgfile_lookup: MessageTrans_Lookup returned '%s'\n" _ e->errmess );

        if ( (e == NULL) && (buffer != NULL) )
	{
		result[length] = '\0';

		TRACE( "msgfile_lookup: lookup returned '%s'\n" _ result );

		return result;
	}

	return NULL;
}


/****************************************************************************
 * msgfile_error_lookup
 *
 *	In:	err = pointer to error token block
 *
 *	Out:	returns an expanded error
 *
 *	Looks up the given error token block and returns the resulting error.
 */
_kernel_oserror *
msgfile_error_lookup( msgtransblock *mb, _kernel_oserror *err, ... )
{
        TRACE("msgfile_error_lookup have we got an error? ");
	if ( err != NULL )
	{
                TRACE( " - is it one of ours? - " );
		if ( err->errnum & ERROR_LOOKUP_BIT )
		{
			char *p[4];

                        /* A copy of the error (in RAM) that we can modify */
                        _kernel_oserror *e;

			TRACE( "msgfile_error_lookup: looking up error '%s'\n" _ err->errmess );

			GetParameters( (char *)&err, sizeof(err), p );

                        if( !mb->open ) msgfile_open( mb, NULL );

			/* Remove lookup flag and return the error. */
                        e = _swix( MessageTrans_ErrorLookup, _INR(0,7), err, mb->msgblock, 0, 0, p[0], p[1], p[2], p[3] );
                        e->errnum &= ~ERROR_LOOKUP_BIT;
                        return e;
		}
	}
	return err;
}


/****************************************************************************
 * msgfile_enumerate
 *
 *	In:	token = pointer to wildcarded token
 *		buffer = pointer to buffer for result
 *		bufsz = size of buffer
 *		index = pointer to index variable
 *
 *	Out:	returns buffer filled and index set to next index if successful
 *
 *	Enumerates massage file tokens.
 */
_kernel_oserror *
msgfile_enumerate( msgtransblock *mb, char *token, char *buffer, int bufsz, int *index )
{
        _kernel_oserror *e = NULL;

        if ( !mb->open ) e = msgfile_open( mb, NULL );

        if ( mb->open )
        {
                e = _swix( MessageTrans_EnumerateTokens, _INR(0,4)|_OUT(2)|_OUT(4),
                                mb->msgblock, token, buffer, bufsz, *index, &bufsz, index );

                TRACEIF( e != NULL, "msgfile_enumerate: returned error '%s'\n" _ e->errmess );

		if ( bufsz == 0 ) *index = 0;
	}
        return e;
}


/****************************************************************************
 * msgfile_close
 *
 *	  Closes the currently open message file.
 */
void
msgfile_close( msgtransblock *mb )
{
        if ( mb->open )
	{
		TRACE( "msgfile_close: closing file\n" );

                (void)_swix( MessageTrans_CloseFile, _IN(0), mb->msgblock );
                mb->open = 0;
        }
}
@


1.3
log
@  Added support for default value indirected tags.
Detail:
  * Tags with a default value as a tagname in quotes will use the default
    value from that tag. This will allow certain tags to be programmed
    into the NVRAM at manufacture which are always restored, regardless of
    the configuration of the main tag. This is required
  * For reasons of ease, parts of the decoding process have been reworked;
    with the effect that pointers to register blocks aren't passed around
    now.
Admin:
  Tested locally; needs testing in a full build.
  This feature is needed for Bethany to support a default country, so that
  they will always start in a valid state.

Version 0.45. Tagged as 'NVRAM-0_45'
@
text
@d28 2
a35 8
/****************************************************************************
 * Message file definitions and structures.
 */


/* Location of our Tags file. */
#define MSGFILE_NAME	"Resources:$.Resources.NVRAM.Tags"

a39 7
/* Pointer to message block and message block itself (pointer starts as 0 so
 * we still get Global messages even when our file has not been opened).
 */
static int *MBPtr = 0;
static int MsgBlock[4];


d73 1
a73 1
msgfile_open( char *fname, char *buffer )
d75 1
a75 1
	_kernel_oserror *err;
d77 1
a77 1
	if ( MBPtr ) msgfile_close();
d79 1
a79 1
	TRACE( "msgfile_open: opening '%s'\n" _ fname );
d81 2
a82 2
	err = _swix( MessageTrans_OpenFile, _INR(0,2), MsgBlock, fname, buffer );
	if ( !err )
d85 1
a85 1
		MBPtr = MsgBlock;
d87 1
a87 1
	return err;
d104 1
a104 1
msgfile_lookup( char *token, char *buffer, int bufsz, ... )
d109 1
a109 1
	_kernel_oserror *err;
d111 1
a111 1
	if ( !MBPtr ) msgfile_open( MSGFILE_NAME, NULL );
d117 2
a118 2
	err = _swix( MessageTrans_Lookup, _INR(0,7)|_OUTR(2,3), MBPtr, token, buffer, bufsz,
			p[0], p[1], p[2], p[3], &result, &length );
d120 1
a120 1
	TRACEIF( err != NULL, "msgfile_lookup: MessageTrans_Lookup returned '%s'\n" _ err->errmess );
d122 1
a122 1
	if ( (err == NULL) && (buffer != NULL) )
d125 1
a125 1
		
d127 1
a127 1
		
d145 1
a145 1
msgfile_error_lookup( _kernel_oserror *err, ... )
d147 1
d150 1
d155 3
a159 4
			/* Don't explicitly open message file for errors as in our case	*/
			/* it isn't a real Messages file, it's our Tags file.		*/
			/* if ( !MBPtr ) msgfile_open( MSGFILE_NAME, NULL );		*/
		
d162 2
d165 3
a167 2
			err->errnum &= ~ERROR_LOOKUP_BIT;
			return _swix( MessageTrans_ErrorLookup, _INR(0,7), err, MBPtr, 0, 0, p[0], p[1], p[2], p[3] );
d187 1
a187 1
msgfile_enumerate( char *token, char *buffer, int bufsz, int *index )
d189 1
a189 1
	_kernel_oserror *err = NULL;
d191 1
a191 1
	if ( !MBPtr ) err = msgfile_open( MSGFILE_NAME, NULL );
d193 4
a196 4
	if ( MBPtr )
	{
		err = _swix( MessageTrans_EnumerateTokens, _INR(0,4)|_OUT(2)|_OUT(4),
				MBPtr, token, buffer, bufsz, *index, &bufsz, index );
d198 1
a198 1
		TRACEIF( err != NULL, "msgfile_enumerate: returned error '%s'\n" _ err->errmess );
d202 1
a202 1
	return err;
d212 1
a212 1
msgfile_close( void )
d214 1
a214 1
	if ( MBPtr )
d216 1
a216 1
		TRACE( "msgfile_close: closing message file\n" );
d218 3
a220 3
		(void)_swix( MessageTrans_CloseFile, _IN(0), MBPtr );
		MBPtr = 0;
	}
@


1.2
log
@Fix previous erroneous attempt to merge from branch Spinner.
Manually edited VersionNum to restore sane version number.
DO NOT USE THE PREVIOUS TRUNK COMMIT OF THIS MODULE (NVRAM-2_02).

Version 0.15. Tagged as 'NVRAM-0_15'
@
text
@d42 3
@


1.1
log
@Initial revision
@
text
@d88 3
d92 5
a96 1
	if ( !err ) MBPtr = MsgBlock;
d118 2
d125 17
a141 4
	return _swix( MessageTrans_Lookup, _INR(0,7)|_OUT(2), MBPtr, token, buffer, bufsz,
			p[0], p[1], p[2], p[3], &result )
		? NULL
		: result;
d163 2
a169 1
			TRACE( "Error parameters are %s, %s, %s, %s\n" _ p[0] _ p[1] _ p[2] _ p[3] );
d171 2
d204 2
d222 2
@


1.1.1.1
log
@Initial version.

@
text
@@


1.1.1.2
log
@Re-open message file after Service_MessageFileClosed.
Remove lookup bit in internal error numbers before returning the error.
@
text
@a147 2
			/* Remove lookup flag and return the error. */
			err->errnum &= ~ERROR_LOOKUP_BIT;
@


1.1.1.3
log
@Fixed various bugs, including not using isspace when using TinyStubs as
the shared C library doesn't seem to initialise its copy of __ctype.
@
text
@a87 3

	TRACE( "msgfile_open: opening '%s'\n" _ fname );

d89 1
a89 5
	if ( !err )
	{
		TRACE( "Messagefile opened\n" );
		MBPtr = MsgBlock;
	}
a110 2
	int length;
	_kernel_oserror *err;
d116 4
a119 17
	TRACE( "msgfile_lookup: looking up '%s'\n" _ token );

	err = _swix( MessageTrans_Lookup, _INR(0,7)|_OUTR(2,3), MBPtr, token, buffer, bufsz,
			p[0], p[1], p[2], p[3], &result, &length );

	TRACEIF( err != NULL, "msgfile_lookup: MessageTrans_Lookup returned '%s'\n" _ err->errmess );

	if ( (err == NULL) && (buffer != NULL) )
	{
		result[length] = '\0';
		
		TRACE( "msgfile_lookup: lookup returned '%s'\n" _ result );
		
		return result;
	}

	return NULL;
a140 2
			TRACE( "msgfile_error_lookup: looking up error '%s'\n" _ err->errmess );

d146 1
a180 2
		TRACEIF( err != NULL, "msgfile_enumerate: returned error '%s'\n" _ err->errmess );

a196 2
		TRACE( "msgfile_close: closing message file\n" );

@
