head	1.6;
access;
symbols
	NVRAM-0_68:1.6
	NVRAM-0_67:1.6
	NVRAM-0_66:1.5
	RO_5_07:1.5
	NVRAM-0_65:1.5
	NVRAM-0_64:1.5
	NVRAM-0_63:1.5
	NVRAM-0_62:1.5
	NVRAM-0_61:1.5
	NVRAM-0_60:1.5
	NVRAM-0_59:1.5
	NVRAM-0_58:1.5
	NVRAM-0_57:1.5
	NVRAM-0_56:1.5
	NVRAM-0_55:1.5
	NVRAM-0_54:1.5
	NVRAM-0_53:1.5
	NVRAM-0_52:1.5
	NVRAM-0_51:1.5
	NVRAM-0_50:1.5
	dellis_autobuild_BaseSW:1.5
	NVRAM-0_49:1.5
	NVRAM-0_48:1.5
	NVRAM-0_47:1.4
	NVRAM-0_45:1.4
	NVRAM-0_44:1.3
	NVRAM-0_43:1.3
	NVRAM-0_42:1.3
	sbrodie_sedwards_16Mar2000:1.2
	NVRAM-0_41:1.2
	NVRAM-0_40:1.2
	NVRAM-0_39:1.2
	NVRAM-0_38:1.2
	NVRAM-0_37:1.2
	NVRAM-0_36:1.2
	NVRAM-0_35:1.2
	NVRAM-0_33:1.2
	NVRAM-0_31:1.2
	NVRAM-0_30:1.2
	NVRAM-0_29:1.2
	NVRAM-0_28:1.2
	NVRAM-0_27:1.2
	NVRAM-0_26:1.2
	NVRAM-0_25:1.2
	NVRAM-0_24:1.2
	NVRAM-0_23:1.2
	dcotton_autobuild_BaseSW:1.5
	nturton_NVRAM-0_21:1.2
	NVRAM-0_22:1.2
	dcotton_nvram-MPTInitialBuild:1.2
	NVRAM-0_21:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	NVRAM-0_20:1.2
	NVRAM-0_19:1.2
	NVRAM-0_18:1.2
	NVRAM-0_17:1.2
	NVRAM-0_16:1.2
	Spin_merge:1.1.1.3
	NVRAM-0_15:1.2
	NVRAM-2_02:1.1
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	jfarrell_NVRAM-0_13:1.1.1.3
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_NC2_Generic:1.1.1.3
	Spinner_B20_2:1.1.1.3
	Spinner_19_3:1.1.1.3
	Spinner_B18:1.1.1.3
	Spinner_B17:1.1.1.3
	Spinner_B15:1.1.1.3
	Spinner_B14:1.1.1.3
	Spinner_B13:1.1.1.3
	Spinner_B12:1.1.1.3
	Spinner_B10:1.1.1.3
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2012.01.01.09.19.08;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	oF6fBP1UW8OG0sNv;

1.5
date	2000.09.08.17.32.11;	author rcathera;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.10.12.44.24;	author jfletche;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.17.13.45.47;	author arodger;	state Exp;
branches;
next	1.2;

1.2
date	98.09.10.18.03.57;	author jfarrell;	state Exp;
branches;
next	1.1;

1.1
date	97.03.18.18.10.11;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.18.10.11;	author scormie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.06.12.33.54;	author scormie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.08.09.43.54;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Makefile rationalised a bit.
Error messages now not padded with one too many nulls.
Use CMHG's magic BAD_SWI return code rather than our own.
Compiles, but not tested.

Version 0.67. Tagged as 'NVRAM-0_67'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "nvram.h"
#include "msgfile.h"
#include "error.h"
#include "header.h"

#include "trace.h"


static _kernel_oserror *TinyError;
msgtransblock msgs;
msgtransblock tags;


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
	nvram_finalise();

	if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );

	return NULL;

	NOT_USED( fatal );
	NOT_USED( podule );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( const char *cmd_tail, int podule_base, void *pw )
{
	_kernel_oserror* err = NULL;

        msgs.filename = MSGFILE_NAME;
        msgs.open = 0;
        tags.filename = TAGFILE_NAME;
        tags.open = 0;

#ifdef DEBUGLIB
	trace_initialise();
#endif

	err = nvram_initialise();

	/* Try to use TinyStubs if possible.
	 */
	if ( err == NULL ) TinyError = _swix( TinySupport_Share, _IN(0), pw );

	if ( err != NULL ) nvram_finalise();

	return msgfile_error_lookup( &msgs, err, NULL );

	NOT_USED( cmd_tail );
	NOT_USED( podule_base );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_swi
 *
 *      Module SWI handler.
 */
_kernel_oserror *
module_swi( int swi_no, _kernel_swi_regs *r, void *pw )
{
	_kernel_oserror *err;

	switch ( swi_no )
	{
                case NVRAM_Read - NVRAM_00:
                        err = nvram_read( (char *)r->r[0], (void *)r->r[1], r->r[2],
                                                &r->r[0] );
                        break;

                case NVRAM_Write - NVRAM_00:
                        err = nvram_write( (char *)r->r[0], (void *)r->r[1], r->r[2],
                                                &r->r[0] );
                        break;

                case NVRAM_Lookup - NVRAM_00:
                        err = nvram_lookup( (char *)r->r[0],
                                                (unsigned int *)&r->r[0], (unsigned int *)&r->r[1], (unsigned int *)&r->r[2], (unsigned int *)&r->r[3] );
                        break;

                case NVRAM_Get - NVRAM_00:
                        err = nvram_get( (char *)r->r[0], (void *)r->r[1], r->r[2],
                                                &r->r[0] );
                        break;

                case NVRAM_Set - NVRAM_00:
                        err = nvram_set( (char *)r->r[0], (void *)r->r[1], r->r[2] );
                        break;

                case NVRAM_GetBytes - NVRAM_00:
                        err = nvram_getbytes( (char *)r->r[0], (void *)r->r[1], r->r[2], r->r[3],
                                                &r->r[0] );
                        break;

                case NVRAM_SetBytes - NVRAM_00:
                        err = nvram_setbytes( (char *)r->r[0], (void *)r->r[1], r->r[2], r->r[3] );
                        break;

                default:
                        return error_BAD_SWI;
	}
	return msgfile_error_lookup( &msgs, err, NULL );

	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
	switch ( service_no )
	{
		case Service_MessageFileClosed:
			msgfile_close( &msgs );
			msgfile_close( &tags );
			break;
	}
	NOT_USED( r );
	NOT_USED( pw );
}


#ifdef DEBUG

/*------------------------------------------------------------------------------
 * module_command
 *
 *	Module command handler.
 */
_kernel_oserror *
module_command( char *arg_string, int argc, int cmd_no, void *pw )
{
	_trace_on = (cmd_no == 0);
	return NULL;

	NOT_USED( arg_string );
	NOT_USED( argc );
	NOT_USED( pw );
}

#endif
@


1.5
log
@  Added SWI NVRAM_Lookup which takes a pointer to a Tag in r0 on entry
  and returns startbyte within NVRAM (suitable for use with OS_NVMemory)
  in r0, startbit within byte in r1, length in r2 and flags in r3
  Added SWI NVRAM_Set and Get which take the same arguments as Read
  and Write but now return error pointers in r0 an error occurs
  instead of a -ve number.
  Added SWI NVRAM_SetBytes and GetBytes which work like Set/Get but also
  take an offset in r3 that is added to the address of the Tag to allow
  access to part of a Tag without needing to read or write the whole
  thing.

Detail:
  NVRAM_Read and Write used to pass on proper RISC OS errors if an external
  error was generated, but returned a -ve number in r0 if an internal error
  occured.
  NVRAM_Get and Set behave properly and use the error block 0x00819200
  this also means that Set preserves r0 (it used to return 0 for success)
  For compatibility Read and Write have not been removed but are deprecated,
  additionally the new error codes are the positive versions of the old
  error codes (hopefully this will ease converting code to use the new SWIs)
  The Messages file has been seperated from the Tags file and the module can
  return MsgTrans'ed error messages.

Admin:
  Tested all SWIs to a reasonable extent using a softloaded version.

Version 0.48. Tagged as 'NVRAM-0_48'
@
text
@a35 2
ERROR_STRUCT( BADSWI, "BadSWI" );

d141 2
a142 3
		default:
                        return _swix (MessageTrans_ErrorLookup, _INR(0,4), ERROR(BADSWI), 0, 0, 0, MODULE_NAME);
			//msgfile_error_lookup( ERROR(BADSWI), 0, 0, 0, MODULE_NAME, 0, 0, 0 );
@


1.4
log
@  Added support for default value indirected tags.
Detail:
  * Tags with a default value as a tagname in quotes will use the default
    value from that tag. This will allow certain tags to be programmed
    into the NVRAM at manufacture which are always restored, regardless of
    the configuration of the main tag. This is required
  * For reasons of ease, parts of the decoding process have been reworked;
    with the effect that pointers to register blocks aren't passed around
    now.
Admin:
  Tested locally; needs testing in a full build.
  This feature is needed for Bethany to support a default country, so that
  they will always start in a valid state.

Version 0.45. Tagged as 'NVRAM-0_45'
@
text
@d31 1
d39 2
d69 1
a69 1
module_initialise( char *cmd_tail, int podule_base, void *pw )
d73 5
d90 1
a90 1
	return msgfile_error_lookup( err, NULL );
d110 32
a141 9
		case 0:
			err = nvram_read( (char *)r->r[0], (void *)r->r[1], r->r[2],
			                  &r->r[0] );
			break;

		case 1:
			err = nvram_write( (char *)r->r[0], (void *)r->r[1], r->r[2],
			                  &r->r[0] );
			break;
d144 2
a145 1
			return msgfile_error_lookup( ERROR(BADSWI), 0, 0, 0, MODULE_NAME );
d147 1
a147 1
	return msgfile_error_lookup( err, NULL );
d164 2
a165 1
			msgfile_close();
@


1.3
log
@   Added DebugLib support and target and added a preceeding zero to a tag
Detail:
   Added DebugLib to the trace file.
   All of the tags for the DSL400 resource are 3 digits with the exception
   of one this has been fixed.
Admin:
   Oh! ran it a couple of times.  Prodded it with a stick, it seemed alright.

Version 0.42. Tagged as 'NVRAM-0_42'
@
text
@d103 2
a104 1
			err = nvram_read( r );
d108 2
a109 1
			err = nvram_write( r );
@


1.2
log
@Fix previous erroneous attempt to merge from branch Spinner.
Manually edited VersionNum to restore sane version number.
DO NOT USE THE PREVIOUS TRUNK COMMIT OF THIS MODULE (NVRAM-2_02).

Version 0.15. Tagged as 'NVRAM-0_15'
@
text
@d49 1
a49 1
	
d51 1
a51 1
	
d53 1
a53 1
	
d68 8
a75 2
	_kernel_oserror *err = nvram_initialise();
	
d83 1
a83 1
	
d99 1
a99 1
	
@


1.1
log
@Initial revision
@
text
@d32 2
d111 40
@


1.1.1.1
log
@Initial version.

@
text
@@


1.1.1.2
log
@Re-open message file after Service_MessageFileClosed.
Remove lookup bit in internal error numbers before returning the error.
@
text
@a108 19


/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
	switch ( service_no )
	{
		case Service_MessageFileClosed:
			msgfile_close();
			break;
	}
	NOT_USED( r );
	NOT_USED( pw );
}
@


1.1.1.3
log
@Fixed various bugs, including not using isspace when using TinyStubs as
the shared C library doesn't seem to initialise its copy of __ctype.
@
text
@a31 2
#include "trace.h"

a127 21


#ifdef DEBUG

/*------------------------------------------------------------------------------
 * module_command
 *
 *	Module command handler.
 */
_kernel_oserror *
module_command( char *arg_string, int argc, int cmd_no, void *pw )
{
	_trace_on = (cmd_no == 0);
	return NULL;

	NOT_USED( arg_string );
	NOT_USED( argc );
	NOT_USED( pw );
}

#endif
@
