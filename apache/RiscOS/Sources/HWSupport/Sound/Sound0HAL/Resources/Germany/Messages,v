head	1.4;
access;
symbols
	Sound0HAL-1_88:1.4
	Sound0HAL-1_87:1.4
	Sound0HAL-1_86:1.4
	Sound0HAL-1_85:1.4
	Sound0HAL-1_84:1.4
	Sound0HAL-1_83:1.3
	Sound0HAL-1_82:1.3
	Sound0HAL-1_81:1.3
	Sound0HAL-1_80:1.2
	Sound0HAL-1_79:1.2
	Sound0HAL-1_78:1.2
	Sound0HAL-1_77:1.2
	Sound0HAL-1_76:1.2
	Sound0HAL-1_75:1.2
	Sound0HAL-1_74:1.2
	Sound0HAL-1_73:1.2
	Sound0HAL-1_72:1.2
	Sound0HAL-1_71:1.2
	Sound0HAL-1_70:1.2
	Sound0HAL-1_69:1.2
	Sound0HAL-1_68:1.1
	Sound0HAL-1_67:1.1
	Sound0HAL-1_66:1.1
	Sound0HAL-1_65:1.1;
locks; strict;
comment	@# @;


1.4
date	2016.06.08.21.32.20;	author jlee;	state Exp;
branches;
next	1.3;
commitid	l1TutttNkbdKZH9z;

1.3
date	2015.12.01.20.47.54;	author jlee;	state Exp;
branches;
next	1.2;
commitid	oU5pl7g7AqO7RhLy;

1.2
date	2012.03.24.23.00.25;	author jlee;	state Exp;
branches;
next	1.1;
commitid	CADwVz3oWer3TbYv;

1.1
date	2010.01.16.03.53.34;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Rename new device selection/enumeration SWIs. Add a way to query the supported sample rates of an arbitrary device. Add user-friendly names for the current HAL-based devices. Protect against level1 & level2 sound handlers that fail to preserve IRQ state.
Detail:
  hdr/Sound, s/Sound0:
  - After some discussion it was decided that "Device" was a bit too generic for the device selection/enumeration SWIs (e.g. could be confusing when also referring to peripheral devices such as headphones or speakers), and so they've been renamed to use "Controller" instead.
  - Added a new reason code to Sound_ControllerInfo to read the supported sample rates for a controller, similar to Sound_SampleRate 0 & 2
  - Update IRQ handler to make sure IRQs are still off after calling level 1 (channel) & level 2 (scheduler) handlers - there's evidence that some third-party handlers fail to do this, which original IOMD versions of SoundDMA were tolerant of but newer versions were not.
  Resources/Germany/Messages, Resources/UK/Messages:
  - Added user-friendly, localisation-friendly names/descriptions for the current ROM-based devices which this module supports
Admin:
  Tested on Raspberry Pi
  German messages in need of translation.


Version 1.84. Tagged as 'Sound0HAL-1_84'
@
text
@HAL_Name_0001:TPS65950 analogue audio
HAL_Name_0002:TWL6040 analogue audio
HAL_Name_0003:VCHIQ analogue/HDMI audio
HAL_Name_0004:Pandora analogue audio
HAL_Name_0005:SGTL5000 analogue audio
HAL_Name_0006:TLV320 analogue audio
HAL_Name_0007:HDMI audio
#{DictTokens}
M00:Die Parameter des Sound-Kommandos sind ungültig.
M01:Die Nummer des Sound-Kanals muß im Bereich 1-8 liegen.
M02:Die Stereoposition muß im Bereich -127 bis +127 angegeben werden.
M03:Gain value must be in the range 0-7
M04:No sound controller devices found
M05:VFPSupport module or NEON coprocessor not found
M06:Sound controller device initialisation failed
M07:Sound controller device not found
@


1.3
log
@Add device enumeration and selection APIs. Make audio HAL device API more flexible. Add a generic software mixer implementation that can be used for devices where no hardware mixer is available.
Detail:
  Makefile - Include new source files. Export a C version of hdr/Sound.
  Resources/* - Add new error text to messages file and update command help text
  Version - Update MaxDeviceVersion. Add MinDeviceVersion definition to get rid of a magic constant from the code. Add new switch for whether software mixer support is enabled.
  hdr/AudioDevice - Extend with audio device API 3 features. Buffer size granularity can now be non-power of 2 values, and CustomDMA can be used in a synchronous manner instead of an asynchronous manner (asynchronous defers buffer filling to an RTSupport routine, synchronous performs it directly from within the callback from the device). Also correct a comment relating to AudioRateTable_Frequency.
  hdr/Sound - Add new SWIs and reason codes. Protect a portion of the header from being processed by Hdr2H (Hdr2H can't handle it)
  s/Sound0 - Change default sample rate & buffer size settings to 22050Hz (none of the hardware currently supported by this version of the module supports 20833Hz). Add implementations of the new SWIs and features. Tidy up a couple of other bits.
  s/Sound0NEON - Refactor post-processing code to add support for the software mixer - code is now generated by macros rather than copy & paste. Fix indentation of some other code sections.
  s/DeviceList - New file to contain code related to managing the list of audio devices that SoundDMA now keeps.
  s/SoftMix - New file containing the software mixer device implementation. Implements a single mixer channel to control the overall gain of the sound system. Mixing/volume scaling is performed by the buffer post-processing sequences in Sound0ARM/Sound0NEON, with the optimisation of skipping the processing for a gain of +0dB. Note however that Sound0ARM has yet to be updated and so software mixing is currently only available for the NEON version of the module.
Admin:
  Tested in iMX6 ROM
  German resources are in need of translation


Version 1.81. Tagged as 'Sound0HAL-1_81'
@
text
@d1 7
d16 1
a16 1
M07:Sound device not found
@


1.2
log
@Major overhaul
Detail:
  s/Sound0ARM - Mulaw-to-linear and mono/oversampling code ripped out of s/Sound0 and moved to its own file. Minor optimisations for ARMv6+
  s/Sound0NEON - NEON-optimised Mulaw-to-linear and mono/oversampling code
  Version - Update UseLDRSH switch to depend on NoARMv4 arch flag. Add UseNEON switch.
  hdr/Sound - Added new sound start/stop/config changing service call & Sound_ReadSysInfo SWI definitions
  s/Sound0:
   - Added support for new service calls & Sound_ReadSysInfo SWI
   - Added support for oversampling
   - Fixed up stereo reversal to work if NoUnaligned is TRUE
   - Added support for using the new NEON-optimised buffer/manipulation fill routines. Currently whether to use NEON or not must be selected at compile time.
   - Added timing/profiling code, controlled via TimingCode switch. Uses a HAL timer to measure performance of various sections of the buffer fill/IRQ handling code
   - Updated buffer size constraints in Sound0Config to properly cope with oversampling and NEON code
   - Fixed Sound_SampleRate 3 corrupting the stored sound period value. This would cause Sound_Configure to switch to a different sample rate on next call (even if all 0 parameters were passed)
   - Fixed finalisation not releasing the DMA channel
   - Changed buffer fill code to run in an RTSupport routine instead of in the DMAManager DMASync callback (since we're not meant to be enabling IRQs from in there!). Old code resulted in buffer filling going out of sync with DMA if the IRQ timing was right.
   - Rewrote init/finalisation and sound enable/disable code so things don't fail horribly if one of the required modules (DMAManager, RTSupport, VFPSupport) dies.
   - Sound will be disabled if one of the required modules dies, but will automatically re-enable as the module(s) become available again.
  Resources/UK/Messages, Resources/Germany/Messages - New error messages
Admin:
  Tested in ROM softload on BB-xM, in both ARM and NEON versions
  German resources are in need of translation


Version 1.69. Tagged as 'Sound0HAL-1_69'
@
text
@d8 2
@


1.1
log
@Add initial version of new SoundDMA module, 'Sound0HAL'
Detail:
  Based on the Sound0Trid source code, this version of SoundDMA makes use of a new version of the audio controller HAL device API. Briefly:
  * DMA is handled by the HALified DMAManager
  * The DMASync callback is used to trigger audio buffer filling
  * The set of available sample rates is dictated by the audio controller device
  * Basic support for resetting the audio when an error occurs (e.g. FIFO under/overflow causing stereo channels to be swapped)
  * Module is now ARMv6/7-safe, due to use of LDR(S)H instead of unaligned loads. This comes at the cost of losing RiscPC compatability. Can be disabled if needed via setting UseLDRSH to false.
  * To keep the code simple, it only accepts devices which use the new API version.
  * Sound0Enable now enables IRQs for most of its execution, to allow for supporting slow devices (e.g. IIC communications with the TPS65950). The PRMs describe Sound_Enable as having undefined reentrancy & IRQ state, so this should be OK with regards to code compatability.
  * The stereo reverse code still needs to be made ARMv6/v7-safe, as well as (preferably) being something that can be selectively enabled at runtime, depending on the audio controller in use
  * The oversampling code is disabled, much as it was in Sound0Trid.
  * The pipelining of sample rate changes that Sound0Trid performed is gone - partly to keep the code simple, and partly because it wouldn't work too well with the TPS65950 (due to the intermediate FIFO that the samples pass through, and the fact that the TPS audio codec must be turned off to change the sample rate)
Admin:
  Tested on rev C2 beagleboard.


Version 1.65. Tagged as 'Sound0HAL-1_65'
@
text
@d6 2
@

