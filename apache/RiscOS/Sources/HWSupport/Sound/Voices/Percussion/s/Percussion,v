head	4.9;
access;
symbols
	Percussion-1_18:4.9
	Percussion-1_17:4.8
	Percussion-1_16:4.7
	RO_5_07:4.6
	Percussion-1_15:4.6
	Percussion-1_14:4.5
	Percussion-1_13:4.4
	Percussion-1_12:4.3
	Percussion-1_11:4.2
	Ursula_merge:4.1.4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.9
date	2016.05.08.17.05.08;	author jlee;	state Exp;
branches;
next	4.8;
commitid	EBoulAUhO9ORvH5z;

4.8
date	2015.04.19.15.20.47;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	IyNiXG75LIvkjdiy;

4.7
date	2014.06.28.12.59.12;	author jlee;	state Exp;
branches;
next	4.6;
commitid	LqlroSUNRMlF0iGx;

4.6
date	2004.06.21.12.38.22;	author mhobbs;	state Exp;
branches;
next	4.5;

4.5
date	2001.03.16.16.15.52;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	99.12.08.14.50.21;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.12.02.11.58.28;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.08.16.11.30.43;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.37.56;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.37.56;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.45.11;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.04.15.07.59.10;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.05.05;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.56.48;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.9
log
@Avoid unnecessary remainder calculations
Detail:
  s/Percussion - Avoid unnecessary remainder calculations in DivRem macro
Admin:
  Tested on Cortex-A15


Version 1.18. Tagged as 'Percussion-1_18'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        TTL     Sound System v3.0 -> <wini>arm.Percussion.Percussion

;*************************************************
;**                                             **
;**       ARTHUR Sound System Software          **
;**                                             **
;**    MODULE: Sound System Percussion          **
;**            Library module                   **
;**                                             **
;**    AUTHORS: David Flynn                     **
;**             Tim Dobson                      **
;**                                             **
;**    DESCRIPTION: percussion kernels          **
;**                 as voice install library    **
;**                                             **
;**    ENTRIES: Sound System Level1 Voice Entry **
;**                                             **
;*************************************************
;
;           1.04 fix RMTIDY problems
;           1.05 fix note off duration
; ---- Released for Arthur 1.20 ----
;           1.05 modified header GETs so they work again
; 15-Mar-91 1.06 Internationalised - Removed single error message
; 19-Aug-91 1.07 fixed workspace free botch
; 1.08  28 Feb 92  OSS  Changed to register voices with local name.
; 1.09  16 Mar 92  OSS  Now updates local names when Messages RAM loaded.

 GET Hdr:ListOpts
 GET Hdr:Macros
 GET Hdr:System
 GET Hdr:ModHand
 GET Hdr:Machine.<Machine>
; GET Hdr:APCS.<APCS>
 GET Hdr:PublicWS
 GET Hdr:Sound
 GET Hdr:Proc
 GET Hdr:MsgTrans
 GET Hdr:Services
 GET VersionASM

; Now we can start the module

   AREA |Percussion$$Code|, CODE, READONLY, PIC

Module_Base                ; label for calculating offsets
        &       0 ; not application
        &       Initialise_Module  - Module_Base
        &       Finalise_Module    - Module_Base
        &       Intercept_Services - Module_Base
        &       Module_Name        - Module_Base
        &       Help_String        - Module_Base
        &       0 ; no Keywords
        &       0 ; no SWI base
        &       0
        &       0
        &       0
        &       0 ; no international messages
 [ :LNOT: No32bitCode
        &       Module_Flags       - Module_Base
 ]

Module_Name = "Percussion", 0

Help_String
        =       "Percussion"
        =       9
        DCB     "$Module_HelpVersion"
        DCB     0
        ALIGN

 [ :LNOT: No32bitCode
Module_Flags
   DCD     ModuleFlag_32bit           ; 32-bit OK
 ]

; the initialisation :
Initialise_Module Entry "r11",16        ; MessageTrans file block on stack
        MOV     r11, sp                      ; held in r11
        LDR     R3, WorkSpaceSize
        LDR     R2, [R12]     ; check for reinitialisation
        CMP     R2, #0
        BNE     SoftStart
        MOV     R0, #ModHandReason_Claim
        SWI     XOS_Module
        EXIT    VS
        STR     R2, [R12]

SoftStart
        MOV     r12, r2                              ; Sensible workspace
        BL      open_message_file_r11                ; OSS Get Messages file open
; OSS No error exit - r11 is 0 if open failed and the other message file
; functions cope with this.

; OSS Do not EXIT VS from here on unless you close the Messages file.

 ; copy code into our workspace.
 ; voice code MUST be in RAM for speed..
 ; all position independent.
CopyWorkSpace
 ; R12 is the workspace pointer
        LDR     R3, AmountToCopy
        ADRL     R0, WorkSpaceImage
CopyLoop
        SUBS    R3, R3, #4
        LDRPL   R1, [R0, R3]
        STRPL   R1, [r12, R3]
        BPL     CopyLoop
        MOV     R0,#1
        MOV     R1,r12
        LDR     R2,AmountToCopy
        ADD     R2,r12,R2
        SUB     R2,R2,#4
        SWI     XOS_SynchroniseCodeAreas
        CLRV

; OSS Do the installs with local voice names from the Messages file.

        ADR     r0, Token_Soft
        BL      lookup_zero_file_r11
        BVS     %FT10                                ; Skip if no local name
        MOV     r3, r0                               ; Local name in R3
        ADD     R2,r12,#Voice1                       ; WS IS LINK in R2
        MOV     R1,#0                                ; First free slot please
        MOV     r0, #1                               ; Local name install
        SWI     XSound_InstallVoice
        ADD     R0,r12,#Voice1 ; WS IS LINK
        CMP     R1,#0                                ; fail?
        STRNE   R1,[R0,#SoundVoiceIndex]
10
        ADR     r0, Token_Medium
        BL      lookup_zero_file_r11
        BVS     %FT10                                ; Skip if no local name
        MOV     r3, r0                               ; Local name in R3
        ADD     R2,r12,#Voice2                       ; WS IS LINK in R2
        MOV     R1,#0                                ; First free slot please
        MOV     r0, #1                               ; Local name install
        SWI     XSound_InstallVoice
        ADD     R0,r12,#Voice2 ; WS IS LINK
        CMP     R1,#0                                ; fail?
        STRNE   R1,[R0,#SoundVoiceIndex]
10
        ADR     r0, Token_Snare
        BL      lookup_zero_file_r11
        BVS     %FT10                                ; Skip if no local name
        MOV     r3, r0                               ; Local name in R3
        ADD     R2,r12,#Voice3                       ; WS IS LINK in R2
        MOV     R1,#0                                ; First free slot please
        MOV     r0, #1                               ; Local name install
        SWI     XSound_InstallVoice
        ADD     R0,r12,#Voice3 ; WS IS LINK
        CMP     R1,#0                                ; fail?
        STRNE   R1,[R0,#SoundVoiceIndex]
10
        ADR     r0, Token_Noise
        BL      lookup_zero_file_r11
        BVS     %FT10                                ; Skip if no local name
        MOV     r3, r0                               ; Local name in R3
        ADD     R2,r12,#Voice4                       ; WS IS LINK in R2
        MOV     R1,#0                                ; First free slot please
        MOV     r0, #1                               ; Local name install
        SWI     XSound_InstallVoice
        ADD     R0,r12,#Voice4 ; WS IS LINK
        CMP     R1,#0                                ; fail?
        STRNE   R1,[R0,#SoundVoiceIndex]
10
        BL      close_message_file_r11               ; OSS Remember to close it!
        EXIT

; OSS Tokens for the 4 voice local names.

Token_Soft      DCB     "Soft", 0
Token_Medium    DCB     "Medium", 0
Token_Snare     DCB     "Snare", 0
Token_Noise     DCB     "Noise", 0
                ALIGN

Finalise_Module ROUT
        Entry
        LDR     R2,[R12] ; workspace
        ADD     R0,R2,#Voice1 ; WS IS LINK
        LDR     R1,[R0,#SoundVoiceIndex]
        SWI     XSound_RemoveVoice
        ADD     R0,R2,#Voice2 ; WS IS LINK
        LDR     R1,[R0,#SoundVoiceIndex]
        SWI     XSound_RemoveVoice
        ADD     R0,R2,#Voice3 ; WS IS LINK
        LDR     R1,[R0,#SoundVoiceIndex]
        SWI     XSound_RemoveVoice
        ADD     R0,R2,#Voice4 ; WS IS LINK
        LDR     R1,[R0,#SoundVoiceIndex]
        SWI     XSound_RemoveVoice
        CLRV
        EXIT ; return - the release is assumed to work correctly!

 ; Note that we can leave the workspace as it is : if this is a fatal entry,
 ; the workspace will be deleted, while for a non-fatal entry, the workspace
 ; will be moved and [R12] updated.

 ; end of finalisation code.


; OSS Update local voice names whenever new files are registered with
; ResourceFS.

;Ursula format
;
UServTab
        DCD     0
        DCD     UService - Module_Base
        DCD     Service_ResourceFSStarted
        DCD     0
        DCD     UServTab - Module_Base
Intercept_Services
        MOV     r0, r0
        TEQ     r1, #Service_ResourceFSStarted
        MOVNE   pc, r14
UService
change_names Entry "r0-r3, r11", 16     ; MessageTrans file block on
        MOV     r11, sp                 ; stack held in r11.
        BL      open_message_file_r11
        EXIT    VS                      ; Give up if no file.

        LDR     r12, [r12]              ; Workspace - points at voices.
        MOV     r2, #0                  ; Required.

        ADR     r0, Token_Soft
        BL      lookup_zero_file_r11
        BVS     %FT10                   ; Skip if no local name.
        ADD     r1, r12, #Voice1
        LDR     r1, [r1, #SoundVoiceIndex]
        MOV     r3, r0                  ; Local name in R3.
        MOV     r0, #3                  ; Change name please.
        TEQ     r1, #0
        SWINE   XSound_InstallVoice     ; Dont change if no voice.
10
        ADR     r0, Token_Medium
        BL      lookup_zero_file_r11
        BVS     %FT10                   ; Skip if no local name
        ADD     r1, r12, #Voice2
        LDR     r1, [r1, #SoundVoiceIndex]
        MOV     r3, r0                  ; Local name in R3.
        MOV     r0, #3                  ; Change name please.
        TEQ     r1, #0
        SWINE   XSound_InstallVoice     ; Dont change if no voice.
10
        ADR     r0, Token_Snare
        BL      lookup_zero_file_r11
        BVS     %FT10                   ; Skip if no local name
        ADD     r1, r12, #Voice3
        LDR     r1, [r1, #SoundVoiceIndex]
        MOV     r3, r0                  ; Local name in R3.
        MOV     r0, #3                  ; Change name please.
        TEQ     r1, #0
        SWINE   XSound_InstallVoice     ; Dont change if no voice.
10
        ADR     r0, Token_Noise
        BL      lookup_zero_file_r11
        BVS     %FT10                   ; Skip if no local name
        ADD     r1, r12, #Voice4
        LDR     r1, [r1, #SoundVoiceIndex]
        MOV     r3, r0                  ; Local name in R3.
        MOV     r0, #3                  ; Change name please.
        TEQ     r1, #0
        SWINE   XSound_InstallVoice     ; Dont change if no voice.
10
        BL      close_message_file_r11  ; OSS Remember to close it!
        EXIT


; now the workspace image : it consists purely of the voice code
; and the reserved table and data segment spaces.

WorkSpaceImage

; MODULE SND06
;  code fragments for plucked string sounds
;   PLKINIT (Random signed samples, amp in R0)
;   Fill_Filt (Filter N samples in delay line)
;           and produce new 256 log sample table
;
; D. Flynn
; 13-Jan-87 ; pluck inversion...
;

;**************************************
;* VOICE INSTANCE DATA SEGMENT HEADER *
;**************************************
; DataSeg
 ^ 0
RegSavBlk # 0   ; co-routine save block
Flags     # 4   ; workspace
RegSav1   # 4   ; Oscillator Phase Acc
RegSav2   # 4   ; 7-bit log amp
RegSav3   # 4   ; Tempo Count
RegSav4   # 4   ; Temp Acc
RegSav5   # 4   ; Evolution Acc
RegSav6   # 4   ; delay line pointer
RegSav7   # 4   ; lookup table base
RegSav8   # 4   ; log sample base
FillPC    # 4   ; fill code
KillPC    # 4   ; kill code
EvntPC    # 4   ; scheduler code
SeedL     # 4   ; random number bit gen
SeedH     # 4   ;
; require 258-long delay line
DLineSave # 4   ; sample -1
DLine     # 128 * 4  ; samples 0-255
DLine256  # 4   ; sample 256
; must be immediate constant!
WaveBuff  # 256 ; 256 bytes

DSegSize  # 0

        MACRO
        GetChannelDataSeg $D,$C,$W
 [ {TRUE}
        ADRL    $D, Instance0
        LDR     $D, [$D, $C, ASL #2]
 |
        ADRL    $D, Instance0   ; base instance
        LDR     $W, DSize       ; instance data segment size (not =DSegSize to ensure location of constant)
        TST     $C, #4
        ADDNE   $D, $D, $W,LSL #2
        TST     $C, #2
        ADDNE   $D, $D, $W,LSL #1
        TST     $C, #1
        ADDNE   $D, $D, $W
 ]
        MEND

;**************************************
;*   VOICE CO-ROUTINE CODE SEGMENT    *
;**************************************
; On installation, point Level1 code
; pointer to one of the following voice tables
; ALL CALLS return using PC on top of stack
;
Voice1 * .-WorkSpaceImage
Voice1Base
        B       Fill1
        B       UpdateFill1
        B       GateOn1
        B       GateOff1
        B       Instantiate
        B       Free
        LDMFD   R13!,{PC}       ; dummy entry per PRM 4-13
        DCD     Voice1TitleString - Voice1Base
        DCD     DSegSize
        DCD     0 ; data segmentSSCB index at load time..
;
Voice1TitleString = "Percussion-Soft",0
  ALIGN
Fill1
        ADRL    R0,Filt1
        Push    "R0" ; filter code pointer
        B       Fill
UpdateFill1
        ADRL    R0,Filt1
        Push    "R0" ; filter code pointer
        B       UpdateFill
GateOn1
        ADRL    R0,Filt1
        Push    "R0" ; filter code pointer
        B       GateOn
GateOff1
        ADRL    R0,Filt1
        Push    "R0" ; filter code pointer
        B       GateOff

Voice2 * .-WorkSpaceImage
Voice2Base
        B       Fill2
        B       UpdateFill2
        B       GateOn2
        B       GateOff2
        B       Instantiate
        B       Free
        Pull    "PC"
        &       Voice2TitleString - Voice2Base
        &       DSegSize
        &       0 ; data segmentSSCB index at load time..
;
Voice2TitleString = "Percussion-Medium",0
  ALIGN
Fill2
        ADRL    R0,Filt2
        Push    "R0" ; filter code pointer
        B       Fill
UpdateFill2
        ADRL    R0,Filt2
        Push    "R0" ; filter code pointer
        B       UpdateFill
GateOn2
        ADRL    R0,Filt2
        Push    "R0" ; filter code pointer
        B       GateOn
GateOff2
        ADRL    R0,Filt2
        Push    "R0" ; filter code pointer
        B       GateOff

Voice3 * .-WorkSpaceImage
Voice3Base
        B       Fill3
        B       UpdateFill3
        B       GateOn3
        B       GateOff3
        B       Instantiate
        B       Free
        Pull    "PC"
        &       Voice3TitleString - Voice3Base
        &       DSegSize
        &       0 ; data segmentSSCB index at load time..
;
Voice3TitleString = "Percussion-Snare",0
  ALIGN
Fill3
        ADRL    R0,Filt3
        Push    "R0" ; filter code pointer
        B       Fill
UpdateFill3
        ADRL    R0,Filt3
        Push    "R0" ; filter code pointer
        B       UpdateFill
GateOn3
        ADRL    R0,Filt3
        Push    "R0" ; filter code pointer
        B       GateOn
GateOff3
        ADRL    R0,Filt3
        Push    "R0" ; filter code pointer
        B       GateOff

Voice4 * .-WorkSpaceImage
Voice4Base
        B       Fill4
        B       UpdateFill4
        B       GateOn4
        B       GateOff4
        B       Instantiate
        B       Free
        Pull    "PC"
        &       Voice3TitleString - Voice3Base
        &       DSegSize
        &       0 ; data segmentSSCB index at load time..
;
Voice4TitleString = "Percussion-Noise",0
        ALIGN
Fill4
        ADRL    R0,Filt4
        Push    "R0" ; filter code pointer
        B       Fill
UpdateFill4
        ADRL    R0,Filt4
        Push    "R0" ; filter code pointer
        B       UpdateFill
GateOn4
        ADRL    R0,Filt4
        Push    "R0" ; filter code pointer
        B       GateOn
GateOff4
        ADRL    R0,Filt4
        Push    "R0" ; filter code pointer
        B       GateOff

DSize   &       DSegSize

LintoLog & SoundLevel1Base + SoundLevel1LogTable

;**************************************
;*  VOICE INSTANTIATE                 *
;**************************************
; Entry:
;   R0 is channel number to instantiate (0-7)
; Return:
;   R0 preserved if success, R0 changed if fail
Instantiate
 [ {TRUE}
        Push    "r0-r3,lr"
        MOV     r1, r0                  ; preserve channel in r1
        MOV     r0, #ModHandReason_Claim
        LDR     r3, DSize
        SWI     XOS_Module
        ADRL    lr, Instance0
        MOVVS   r2, #0
        STR     r2, [lr, r1, ASL #2]
        MOVVS   r0, #-1                 ; a different r0 on exit to indicate failure
        STRVS   r0, [sp]
        Pull    "r0-r3,lr"
        Pull    "pc"
 |
        Pull    "PC"
 ]

;**************************************
;*  VOICE FREE                        *
;**************************************
; Entry:
;   R0 is channel number to de-instantiate! (0-7)
; Return:
;   R0 preserved ; always works!
Free ROUT
 [ {TRUE}
        Push    "r0-r3,lr"
        ADRL    r3, Instance0
        LDR     r2, [r3, r0, ASL #2]
        MOV     lr, #0
        STR     lr, [r3, r0, ASL #2]
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        Pull    "r0-r3,lr"
        Pull    "pc"
 |
        Pull    "PC"
 ]

; Constants
CentiSecScale & &68DB8 ; (2^32)/10000
RandSeed  &  &AAAAAAAA
DrumPitch & &D055 ; Drum pitch scale factor:
                  ; * Original CentiSec value was 65536*4/208
                  ; * Which was really an approximation of 65536*48*4/10000,
                  ;   for a 48µs sample period
                  ; * Original DrumPitch was &400
                  ; * 65536*OriginalDrumPitch/OriginalCentiSec = &D055

;**************************************
;*  VOICE INITIALISE/GATE ON          *
;**************************************
; Init Entry -
;  Initialise WaveTable for this instance
; R7 is channel number
; R8 is sample period in µs 
; R9 is SoundChannelB base:
; r10 DMA buffer limit (+1)
; r11 DMA buffer interleave increment
; r12 DMA buffer base pointer
; R13 Sound System Stack with return address and flags
; *** PLUS FILTER algorithm pointer on top (LDR ptr,[R13])
;     on RETURN mext down (must LDMFD R13!,{junk,pc})
; NO r14 - IRQs are enabled and r14 cannot be trusted
GateOn ROUT
        ; Calculate increment such that a 16 bit accumulator will overflow every
        ; centisecond, when incremented after every 4th sample
        ; i.e. 65536*period*4/10000
        ; or   65536*102400*4/ratein1024hz
        MSR     CPSR_c,#SVC32_mode
        Push    "R14"
        MOV     R0,#0
        SWI     XSound_Mode      ; Check Sound_SampleRate supported
        TEQ     R0,#1
        BEQ     %FT01
        LDR     R0,CentiSecScale
        MUL     R4,R0,R8
        MOV     R4,R4,LSR #14
        B       %FT02
01
        SWI     XSound_SampleRate ; Get current rate (r0=1)
        ; 65536*102400*4 is too large for a 32 bit int, divide everything by 8
        MOV     R2,R2,LSR #3     ; /8
        MOV     R0,#&C8000000    ; 65536*102400*4/8
        DivRem  R4,R0,R2,R1,norem
02
        Pull    "R14"
        MSR     CPSR_c,#IRQ32_mode
        LDMIA   R9,{R0,R1,R2,R3} ; get instance params
        ; R3 is our duration in buffer fills
        ; Recalculate it to be the duration in centiseconds
        ; i.e. R3*cs_per_buffer = R3*(R8/10000)*(R10-R12)/R11
        ; -> R3*R4*(R10-R12)/(R11*65536*4)
        MUL     R3,R4,R3
        SUB     R8,R10,R12
        MUL     R3,R8,R3
        ; Noddy division by R11, assuming 1/2/4/8 byte channel interleave
        TEQ     R11,#2
        MOVEQ   R3,R3,LSR #1
        CMP     R11,#4
        MOVEQ   R3,R3,LSR #2
        MOVGT   R3,R3,LSR #3
        MOV     R3,R3,LSR #16+2
; compute instance data segment pointer
 [ {TRUE}
        GetChannelDataSeg R8, R7, R6
 |
        ADRL    R8,Instance0 ; base instance
        LDR     R6,DSize ; instance data segment size
        TST     R7,#4
        ADDNE   R8,R8,R6,LSL #2
        TST     R7,#2
        ADDNE   R8,R8,R6,LSL #1
        TST     R7,#1
        ADDNE   R8,R8,R6
 ]
; R8 now points to the channel instance data segment
;  set up R6-R7
        ADD     R6,R8,#DLine     ; Delay line base
        ADD     R7,R8,#WaveBuff  ; Wavetable
        STR     R6,[R9,#SoundChannelUserParam3] ; return pointers
        STR     R7,[R9,#SoundChannelUserParam4]
;**************************************
; Initialise Data Segment Instance
;**************************************
; Control/Update Information
;  noddy immediate command interface
; Enter:
;  R0b  amp 7-bit log
;  R2  31-bit phase inc (0 for ignore)
;      -ve for mod phase?
;  R3  duration in csec (0 for ignore)
;      -ve for tempo??

; Duration update
; t in centi-seconds
                MOV     R3,R3,LSL #20 ; mask to 12-bit
                MOV     R3,R3,LSR #20
; Duration update
; set default to every n centi-seconds
;        LDR     R5,DrumPitch DWFDWF
;        MOV     R5,R5,LSL #1         ; *4 for 4 samples/check
        LDR     R5,DrumPitch
        MUL     R5,R4,R5
        MOVS    R5,R5,LSR #16

        ADC     R5,R5,#&FF000000 ; force acc overflow! (+ round up division)
        ORR     R5,R5,#&00FF0000 ; immediately
; must convert amp to linear...
; algorithm:
;  ((SSSS+16) x 2^(CCC) - 16) x 2^19
        AND     R0,R0,#&7F      ;  low byte is 0CCCSSSS
        ORR     R0,R0,R0,LSL #8 ; ...00000CCCSSSS0CCCSSSS
        BIC     R0,R0,#&0FF0    ; ...00000CCC00000000SSSS
        ADD     R0,R0,#&0010    ; ...00000CCC00000001SSSS
        MOV     R0,R0,ROR #12   ; 00000001SSSS...00000CCC
        MOV     R0,R0,LSL R0    ; shift left by ccc (0-7)
        SUBS    R0,R0,#&01000000 ; remove bias
        MOV     R2,R0,LSR #1
; pitch
;        BIC     R1,R1,#&80000000
;        MOV     R1,R1,LSL #16
;        MOV     R1,R1,LSR #16
        LDR     R0,[R8,#RegSav1] ; smooth update of
        BIC     R0,R0,#&00FF  ; preserve 16-bit acc
        BIC     R0,R0,#&FF00
        MOV     R1,R5,LSL #16
        ORRS    R1,R0,R1,LSR #16+2 ; original pitch was &100, i.e. DrumPitch/4
        ADDCS   R1,R1,#1
;       ORR     R1,R1,R0      ; new inc

;  swap R9 to local instance...
;  R8 is data segment pointer
        MOV     R9,R8
        LDR     R8,LintoLog
        LDR     R8,[R8]          ; r8 is lin -> log table
; set up necessary variables
        LDR     R0,RandSeed      ; init RND seed
        STR     R0,[R9,#SeedL]
        STR     R0,[R9,#SeedH]

;;
;;InitRegs
;;; set up r4,r5
;;        LDR     R4,CentiSec      ; set tempo to cSec
;;        MOV     R5,R4,LSR #2     ; filter every 4?
        STMIB   R9,{R1,R2,R3,R4,R5,R6,R7,R8}
;
; local data segment now set up
;

;**************************************
;*  VOICE CO-ROUTINE CODE SEQUENCES   *
;**************************************
; Fill Init -
; r0 is Level1 information word
; r2-r8 are save block values
; r9  is data segment base pointer
; r10 DMA buffer limit (+1)
; r11 DMA buffer interleave increment
; r12 DMA buffer base pointer
; R13 Sound System Stack with return address and flags
; *** PLUS FILTER algorithm pointer on top (LDR ptr,[R13])
;     on RETURN mext down (must LDMFD R13!,{junk,pc})
; NO r14 - IRQs are enabled and r14 cannot be trusted

Fill_Init ; initialisation entry point
          ; also for restart after errors
; Enter: R3 is linear amplitude
; Fill_RND
;  generate random signed samples in delay line
; enter:
;  R9 channel data segment pointer
; Use:
;  R0-2 random word generator
;  R3 positive amplitude
;  R4 negative amplitude
;  R5 bit count
;  R6 delay line pointer
;  R7 log sample buffer
;  R8 log table base
Fill_RND
        MOV     R3,R2            ; put amp in r3
        RSB     R4,R3,#0         ; neg in R4
        LDR     R0,[R9,#SeedL]   ; see RND32
        LDR     R1,[R9,#SeedH]
        ADD     R6,R9,#DLineSave
        ADD     R7,R9,#WaveBuff
Fill_RND1
        MOVS    R2,R0,LSR #1    ; 33 bit rotate right
        ORR     R2,R2,R1,LSL #31
        ADC     R1,R1,R1 ;carry into lsb of R1
        EOR     R2,R2,R0,LSL #12 ;(involved!)
        EOR     R0,R2,R2,LSR #20 ;(similarly involved!)
        MOV     R5,#31
Fill_RND2
        MOVS    R0,R0,ROR #1    ; extract random bit
        STRCS   R3,[R6],#4     ; and init word
        STRCC   R4,[R6],#4
        SUBS    R5,R5,#1
        BPL     Fill_RND2        ; loop through 32 bits
        CMP     R6,R7
        BLT     Fill_RND1
        STR     R0,[R9,#SeedL]
        STR     R1,[R9,#SeedH]
        ADD     R6,R9,#DLine     ; restore r6
        ADR     R1,Fill_RND3
        Push    "r1"
        LDR     PC,[R13,#4]
;       B       Fill_Filt
Fill_RND3             ; mute first buffer
        MOV     R0,#0
Fill_RND4
        STRB    R0,[R12],R11
        STRB    R0,[R12],R11
        STRB    R0,[R12],R11
        STRB    R0,[R12],R11
        CMP     R12,R10
        BLT     Fill_RND4
;
        MOV     R0,#SoundChannelActive ; return active
        LDMFD   R13!,{R1,PC} ; exit

;**************************************
;*  VOICE FILL CONTINUATION           *
;**************************************
; Fill Entry -
;  FIll ASAP and return
;Entry:
; R7 is channel number
; R9 is SoundChannelB base:
; r10 DMA buffer limit (+1)
; r11 DMA buffer interleave increment
; r12 DMA buffer base pointer
; R13 Sound System Stack with return address and flags
; *** PLUS FILTER algorithm pointer on top (LDR ptr,[R13])
;     on RETURN mext down (must LDMFD R13!,{junk,pc})
; NO r14 - IRQs are enabled and r14 cannot be trusted
;Return:
; R0 = Active
;
Fill
; compute instance data segment pointer
 [ {TRUE}
        GetChannelDataSeg R5, R7, R6
 |
        ADRL    R5,Instance0 ; base instance
        LDR     R6,DSize ; instance data segment size
        TST     R7,#4
        ADDNE   R5,R5,R6,LSL #2
        TST     R7,#2
        ADDNE   R5,R5,R6,LSL #1
        TST     R7,#1
        ADDNE   R5,R5,R6
 ]
; R5 now points to the channel instance data segment
;  swap R9 to local instance...
        MOV     R9,R5

        LDMIB   R9,{R1,R2,R3,R4,R5,R6,R7,R8} ; and fill..
;
; Fill_Wave
;  Run wavesynth oscillator on WaveBuff
;  works on chunks of 4 bytes
; enter:
;  R9 channel data segment pointer
;  R1 Osc Phase Accumulator
; ( R2 Amplitude )
;  R3 Segemt Count (-ve to exit)
;  R4 Segment Advance Accumulator
; ( R5 Modulation )
; ( R6 Delay Line )
;  R7 WaveTable
; use R0-R4
; restore:
;  R1-R4 to coroutine save block
; *** PLUS FILTER algorithm pointer on top (LDR ptr,[R13])
;     on RETURN mext down (must LDMFD R13!,{junk,pc})
Fill_Wave ROUT
        ADDS    R4,R4,R4,LSL #16 ; tempo advance
        BVS     %30
        ADDS    R5,R5,R5,LSL #16 ; timbre advance
        BVS     %40
20 ; Fill_Wave1
        ADD     R1,R1,R1,LSL #16
        LDRB    R0,[R7,R1,LSR #25]
        STRB    R0,[R12],R11
        ADD     R1,R1,R1,LSL #16
        LDRB    R0,[R7,R1,LSR #25]
        STRB    R0,[R12],R11
        ADD     R1,R1,R1,LSL #16
        LDRB    R0,[R7,R1,LSR #25]
        STRB    R0,[R12],R11
        ADD     R1,R1,R1,LSL #16
        LDRB    R0,[R7,R1,LSR #25]
        STRB    R0,[R12],R11
        CMP     R12,R10
        BLT     Fill_Wave
; coroutine exit
        STMIB   R9,{R1,R2,R3,R4,R5}
        MOV     R0,#SoundChannelActive
        LDMFD   R13!,{R1,PC}

;
30 ; Fill_Period
        SUBS    R3,R3,#1        ; timeout ?
        BPL     %20 ; Fill_Wave1  ; done
        B       Fill_Zero
;
40
        STMIB   R9,{R1,R2,R3,R4,R5} ; preserve world
        ADR     R1,%45
        Push    "r1"
        LDR     PC,[R13,#4]
;        B       Fill_Filt
45      B       %20 ; return

;GateOff
Fill_Zero             ; Flush partial buffer
        STMIB   R9,{R1,R2,R3,R4,R5}
GateOff
        MOV     R0,#0
        STR     R0,[R9,#SoundChannelDuration]
Fill_Zero1
        STRB    R0,[R12],R11
        STRB    R0,[R12],R11
        STRB    R0,[R12],R11
        STRB    R0,[R12],R11
        CMP     R12,R10
        BLT     Fill_Zero1
        MOV     R0,#SoundChannelForceFlush
        LDMFD   R13!,{R1,PC}

RandMask
        &       &1D872B41

; Filt
;  filter the next 256 samples
;  works on chunks of 4 words
; enter:
;  R9 channel data segment pointer
;  R6 delay line pointer
;  R7 log sample buffer
;  R8 log table base
; use R0-R7
; restore:
;  R1-R7 to coroutine entry values
; Sy = S(y-257)/64 + S(y-256)/32 + S(y-255)/64
; Return by popping PC on stack

Filt4 ROUT
        STMFD   R13!,{R10,R11,R12}
        LDR     R11,[R9,#SeedL]
        LDR     R12,RandMask
        SUB     R2,R6,#4         ; special case for wrap
        LDMIA   R2,{R4,R5,R10} ; generate new 256
        MOV     R0,R4,ASR #6
        ADD     R0,R0,R10,ASR #6
        SUB     R0,R0,R5,ASR #5
        ADD     R0,R0,R5
        STR     R0,[R7,#-4]      ; sample 256 used (as r5) for sample 255
        LDR     R0,[R7,#-8]      ; must preserve old sample 255
        STR     R0,[R6,#-4]
        SUB     R10,R7,#4        ; use R10 as limit
10      MOV     R0,R4            ; copy down pipelined reads
        MOV     R1,R5
        LDMIB   R6,{R2,R3,R4,R5} ; always on boundaries
        MOV     R0,R0,ASR #6
        ADD     R0,R0,R2,ASR #6
        SUB     R0,R0,R1,ASR #5
        ADD     R0,R0,R1
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS    R0,R0,#0
        MOV     R1,R1,ASR #6
        ADD     R1,R1,R3,ASR #6
        SUB     R1,R1,R2,ASR #5
        ADD     R1,R1,R2
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS    R1,R1,#0
        MOV     R2,R2,ASR #6
        ADD     R2,R2,R4,ASR #6
        SUB     R2,R2,R3,ASR #5
        ADD     R2,R2,R3
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS    R2,R2,#0
        MOV     R3,R3,ASR #6
        ADD     R3,R3,R5,ASR #6
        SUB     R3,R3,R4,ASR #5
        ADD     R3,R3,R4
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R3,R3,#0
        STMIA   R6!,{R0,R1,R2,R3} ; always on boundaries
        LDRB    R0,[R8,R0,LSR #19] ; lin -> log
        LDRB    R1,[R8,R1,LSR #19]
        ORR     R0,R0,R1,LSL #8
        LDRB    R2,[R8,R2,LSR #19]
        ORR     R0,R0,R2,LSL #16
        LDRB    R3,[R8,R3,LSR #19]
        ORR     R0,R0,R3,LSL #24
        STR     R0,[R7],#4
        CMP     R6,R10
        BLT     %10
        STR     R11,[R9,#SeedL]
        LDMIB   R9,{R1,R2,R3,R4,R5,R6,R7} ; and fill..
        LDMFD   R13!,{R10,R11,R12,PC} ; restore and return

; Sy = S(y-257)/32 + S(y-256)/30 + S(y-255)/32
Filt3 ROUT
        STMFD   R13!,{R10,R11,R12}
        LDR     R11,[R9,#SeedL]
        LDR     R12,RandMask
        SUB     R2,R6,#4         ; special case for wrap
        LDMIA   R2,{R4,R5,R10} ; generate new 256
        MOV     R0,R4,ASR #5
        ADD     R0,R0,R10,ASR #5
        SUB     R0,R0,R5,ASR #4
        ADD     R0,R0,R5
        STR     R0,[R7,#-4]      ; sample 256 used (as r5) for sample 255
        LDR     R0,[R7,#-8]      ; must preserve old sample 255
        STR     R0,[R6,#-4]
        SUB     R10,R7,#4        ; use R10 as limit
10      MOV     R0,R4            ; copy down pipelined reads
        MOV     R1,R5
        LDMIB   R6,{R2,R3,R4,R5} ; always on boundaries
        MOV     R0,R0,ASR #5
        ADD     R0,R0,R2,ASR #5
        SUB     R0,R0,R1,ASR #4
        ADD     R0,R0,R1
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R0,R0,#0
        MOV     R1,R1,ASR #5
        ADD     R1,R1,R3,ASR #5
        SUB     R1,R1,R2,ASR #4
        ADD     R1,R1,R2
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R1,R1,#0
        MOV     R2,R2,ASR #5
        ADD     R2,R2,R4,ASR #5
        SUB     R2,R2,R3,ASR #4
        ADD     R2,R2,R3
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R2,R2,#0
        MOV     R3,R3,ASR #5
        ADD     R3,R3,R5,ASR #5
        SUB     R3,R3,R4,ASR #4
        ADD     R3,R3,R4
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R3,R3,#0
        STMIA   R6!,{R0,R1,R2,R3} ; always on boundaries
        LDRB    R0,[R8,R0,LSR #19] ; lin -> log
        LDRB    R1,[R8,R1,LSR #19]
        ORR     R0,R0,R1,LSL #8
        LDRB    R2,[R8,R2,LSR #19]
        ORR     R0,R0,R2,LSL #16
        LDRB    R3,[R8,R3,LSR #19]
        ORR     R0,R0,R3,LSL #24
        STR     R0,[R7],#4
        CMP     R6,R10
        BLT     %10
        STR     R11,[R9,#SeedL]
        LDMIB   R9,{R1,R2,R3,R4,R5,R6,R7} ; and fill..
        LDMFD   R13!,{R10,R11,R12,PC} ; restore and return

; Sy = S(y-257)/16 + S(y-256)/14 + S(y-255)/16
Filt2 ROUT
        STMFD   R13!,{R10,R11,R12}
        LDR     R11,[R9,#SeedL]
        LDR     R12,RandMask
        SUB     R2,R6,#4         ; special case for wrap
        LDMIA   R2,{R4,R5,R10} ; generate new 256
        MOV     R0,R4,ASR #4
        ADD     R0,R0,R10,ASR #4
        SUB     R0,R0,R5,ASR #3
        ADD     R0,R0,R5
        STR     R0,[R7,#-4]      ; sample 256 used (as r5) for sample 255
        LDR     R0,[R7,#-8]      ; must preserve old sample 255
        STR     R0,[R6,#-4]
        SUB     R10,R7,#4        ; use R10 as limit
10      MOV     R0,R4            ; copy down pipelined reads
        MOV     R1,R5
        LDMIB   R6,{R2,R3,R4,R5} ; always on boundaries
        MOV     R0,R0,ASR #4
        ADD     R0,R0,R2,ASR #4
        SUB     R0,R0,R1,ASR #3
        ADD     R0,R0,R1
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R0,R0,#0
        MOV     R1,R1,ASR #4
        ADD     R1,R1,R3,ASR #4
        SUB     R1,R1,R2,ASR #3
        ADD     R1,R1,R2
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R1,R1,#0
        MOV     R2,R2,ASR #4
        ADD     R2,R2,R4,ASR #4
        SUB     R2,R2,R3,ASR #3
        ADD     R2,R2,R3
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R2,R2,#0
        MOV     R3,R3,ASR #4
        ADD     R3,R3,R5,ASR #4
        SUB     R3,R3,R4,ASR #3
        ADD     R3,R3,R4
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R3,R3,#0
        STMIA   R6!,{R0,R1,R2,R3} ; always on boundaries
        LDRB    R0,[R8,R0,LSR #19] ; lin -> log
        LDRB    R1,[R8,R1,LSR #19]
        ORR     R0,R0,R1,LSL #8
        LDRB    R2,[R8,R2,LSR #19]
        ORR     R0,R0,R2,LSL #16
        LDRB    R3,[R8,R3,LSR #19]
        ORR     R0,R0,R3,LSL #24
        STR     R0,[R7],#4
        CMP     R6,R10
        BLT     %10
        STR     R11,[R9,#SeedL]
        LDMIB   R9,{R1,R2,R3,R4,R5,R6,R7} ; and fill..
        LDMFD   R13!,{R10,R11,R12,PC} ; restore and return

; Sy = S(y-257)/8 + S(y-256)/4 + S(y-255)/8
Filt1 ROUT
        STMFD   R13!,{R10,R11,R12}
        LDR     R11,[R9,#SeedL]
        LDR     R12,RandMask
        SUB     R2,R6,#4         ; special case for wrap
        LDMIA   R2,{R4,R5,R10} ; generate new 256
        MOV     R0,R4,ASR #3
        ADD     R0,R0,R10,ASR #3
        SUB     R0,R0,R5,ASR #2
        ADD     R0,R0,R5
        STR     R0,[R7,#-4]      ; sample 256 used (as r5) for sample 255
        LDR     R0,[R7,#-8]      ; must preserve old sample 255
        STR     R0,[R6,#-4]
        SUB     R10,R7,#4        ; use R10 as limit
10      MOV     R0,R4            ; copy down pipelined reads
        MOV     R1,R5
        LDMIB   R6,{R2,R3,R4,R5} ; always on boundaries
        MOV     R0,R0,ASR #3
        ADD     R0,R0,R2,ASR #3
        SUB     R0,R0,R1,ASR #2
        ADD     R0,R0,R1
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R0,R0,#0
        MOV     R1,R1,ASR #3
        ADD     R1,R1,R3,ASR #3
        SUB     R1,R1,R2,ASR #2
        ADD     R1,R1,R2
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R1,R1,#0
        MOV     R2,R2,ASR #3
        ADD     R2,R2,R4,ASR #3
        SUB     R2,R2,R3,ASR #2
        ADD     R2,R2,R3
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R2,R2,#0
        MOV     R3,R3,ASR #3
        ADD     R3,R3,R5,ASR #3
        SUB     R3,R3,R4,ASR #2
        ADD     R3,R3,R4
        MOVS    R11,R11,LSL #1
        EORCS   R11,R11,R12
        RSBCS   R3,R3,#0
        STMIA   R6!,{R0,R1,R2,R3} ; always on boundaries
        LDRB    R0,[R8,R0,LSR #19] ; lin -> log
        LDRB    R1,[R8,R1,LSR #19]
        ORR     R0,R0,R1,LSL #8
        LDRB    R2,[R8,R2,LSR #19]
        ORR     R0,R0,R2,LSL #16
        LDRB    R3,[R8,R3,LSR #19]
        ORR     R0,R0,R3,LSL #24
        STR     R0,[R7],#4
        CMP     R6,R10
        BLT     %10
        STR     R11,[R9,#SeedL]
        LDMIB   R9,{R1,R2,R3,R4,R5,R6,R7} ; and fill..
        LDMFD   R13!,{R10,R11,R12,PC} ; restore and return



;**************************************
;*  VOICE UPDATE/FILL                 *
;**************************************
; Fill Update Entry -
;  Smooth control change params
; R7 is channel number
; R8 is sample period in µs 
; R9 is SoundChannelB base:
; r10 DMA buffer limit (+1)
; r11 DMA buffer interleave increment
; r12 DMA buffer base pointer
; R13 Sound System Stack with return address and flags
; *** PLUS FILTER algorithm pointer on top (LDR ptr,[R13])
;     on RETURN mext down (must LDMFD R13!,{junk,pc})
; NO r14 - IRQs are enabled and r14 cannot be trusted
UpdateFill ROUT
        ; Calculate increment such that a 16 bit accumulator will overflow every
        ; centisecond, when incremented after every 4th sample
        ; i.e. 65536*period*4/10000
        ; or   65536*102400*4/ratein1024hz
        MSR     CPSR_c,#SVC32_mode
        Push    "R14"
        MOV     R0,#0
        SWI     XSound_Mode      ; Check Sound_SampleRate supported
        TEQ     R0,#1
        BEQ     %FT01
        LDR     R0,CentiSecScale
        MUL     R4,R0,R8
        MOV     R4,R4,LSR #14
        B       %FT02
01
        SWI     XSound_SampleRate ; Get current rate (r0=1)
        ; 65536*102400*4 is too large for a 32 bit int, divide everything by 8
        MOV     R2,R2,LSR #3     ; /8
        MOV     R0,#&C8000000    ; 65536*102400*4/8
        DivRem  R4,R0,R2,R1,norem
02
        Pull    "R14"
        MSR     CPSR_c,#IRQ32_mode
        LDMIA   R9,{R0,R1,R2,R3} ; get instance params
        ; R3 is our duration in buffer fills
        ; Recalculate it to be the duration in centiseconds
        ; i.e. R3*cs_per_buffer = R3*(R8/10000)*(R10-R12)/R11
        ; -> R3*R4*(R10-R12)/(R11*65536*4)
        MUL     R3,R4,R3
        SUB     R8,R10,R12
        MUL     R3,R8,R3
        ; Noddy division by R11, assuming 1/2/4/8 byte channel interleave
        TEQ     R11,#2
        MOVEQ   R3,R3,LSR #1
        CMP     R11,#4
        MOVEQ   R3,R3,LSR #2
        MOVGT   R3,R3,LSR #3
        MOV     R3,R3,LSR #16+2
; compute instance data segment pointer
 [ {TRUE}
        GetChannelDataSeg R8, R7, R6
 |
        ADRL    R8,Instance0 ; base instance
        LDR     R6,DSize ; instance data segment size
        TST     R7,#4
        ADDNE   R8,R8,R6,LSL #2
        TST     R7,#2
        ADDNE   R8,R8,R6,LSL #1
        TST     R7,#1
        ADDNE   R8,R8,R6
 ]
; R8 now points to the channel instance data segment
;  set up R6-R7
        ADD     R6,R8,#DLine     ; Delay line base
        ADD     R7,R8,#WaveBuff  ; Wavetable
        STR     R6,[R9,#SoundChannelUserParam3] ; return pointers
        STR     R7,[R9,#SoundChannelUserParam4]
;**************************************
; Initialise Data Segment Instance
;**************************************
; Control/Update Information
;  noddy immediate command interface
; Enter:
;  R0b  amp 7-bit log
;  R2  31-bit phase inc (0 for ignore)
;      -ve for mod phase?
;  R3  duration in csec (0 for ignore)
;      -ve for tempo??

; Duration update
; t in centi-seconds
        CMP     R3,#0
        LDREQ   R3,[R8,#RegSav3]
        LDREQ   R4,[R8,#RegSav4]
        LDREQ   R5,[R8,#RegSav5]
        BEQ     %10
        MOV     R3,R3,LSL #20 ; mask to 12-bit
        MOV     R3,R3,LSR #20
; Duration update
; set default to every n centi-seconds
;        MOV     R5,R4,LSR #1  ; div by 4
        LDR     R5,DrumPitch
        MUL     R5,R4,R5
        MOVS    R5,R5,LSR #16
        ADC     R5,R5,#&FF000000 ; force acc overflow! (+ round up division)
        ORR     R5,R5,#&00FF0000 ; immediately
; must convert amp to linear...
; algorithm:
;  ((SSSS+16) x 2^(CCC) - 16) x 2^19
10      CMP     R0,#0
        LDREQ   R2,[R8,#RegSav2]
        BEQ     %20
        AND     R0,R0,#&7F      ;  low byte is 0CCCSSSS
        ORR     R0,R0,R0,LSL #8 ; ...00000CCCSSSS0CCCSSSS
        BIC     R0,R0,#&0FF0    ; ...00000CCC00000000SSSS
        ADD     R0,R0,#&0010    ; ...00000CCC00000001SSSS
        MOV     R0,R0,ROR #12   ; 00000001SSSS...00000CCC
        MOV     R0,R0,LSL R0    ; shift left by ccc (0-7)
        SUBS    R0,R0,#&01000000 ; remove bias
        MOV     R2,R0,LSR #1
; pitch
20      CMP     R1,#0
        LDREQ   R1,[R8,#RegSav1]
        BEQ     %30
;        BIC     R1,R1,#&80000000
;        MOV     R1,R1,LSR #16
;        MOV     R1,R1,LSR #16
        LDR     R0,[R8,#RegSav1] ; smooth update of
        BIC     R0,R0,#&00FF  ; preserve 16-bit acc
        BIC     R0,R0,#&FF00
        MOV     R1,R5,LSL #16
        ORRS    R1,R0,R1,LSR #16+2 ; original pitch was &100, i.e. DrumPitch/4
        ADDCS   R1,R1,#1
;       ORR     R1,R1,R0      ; new inc
;  swap R9 to local instance...
;  R8 is data segment pointer
30      MOV     R9,R8
        LDR     R8,LintoLog
        LDR     R8,[R8]          ; r8 is lin -> log table
        STMIB   R9,{R1,R2,R3,R4,R5,R6,R7,R8}
;
; local data segment now set up
;
        B       Fill_Wave

End_Of_Code
AmountToCopy & . - WorkSpaceImage

 [ {TRUE}
WorkSpaceSize &  . + 8*4 - WorkSpaceImage;
 |
WorkSpaceSize &  . + 8*DSegSize - WorkSpaceImage;
 ]

Instance0 * .

 GET    s.MsgCode
 END
@


4.8
log
@Adjust redundant voice entry
PRM 4-13 says it should be LDMFD, whereas the Pull macro will emit something different for 1 register. Lead by example and use an explicit LDMFD.
Not tested - this entry point hasn't been used for years.

Version 1.17. Tagged as 'Percussion-1_17'
@
text
@d577 1
a577 1
        DivRem  R4,R0,R2,R1
d1163 1
a1163 1
        DivRem  R4,R0,R2,R1
@


4.7
log
@Make the voice generator correctly adjust itself for the current sound system configuration
Detail:
  s/Percussion - Similar to StringLib, Percussion uses various accumulator values that were tuned for a 48us sample period an 100Hz buffer fill rate. These values will now be calculated dynamically based around the current sound system configuration, ensuring the correct output is produced across all sensible configurations. Also swapped single-reg LDM/STM for Pull/Push to fix performance warnings from the assembler.
Admin:
  Tested on BB-xM
  Voices now sound correct at high and low sample rates, small and large buffer sizes
  Part of the fix for ticket #347:
  https://www.riscosopen.org/tracker/tickets/347


Version 1.16. Tagged as 'Percussion-1_16'
@
text
@d361 4
a364 4
        Pull    "PC"
        &       Voice1TitleString - Voice1Base
        &       DSegSize
        &       0 ; data segmentSSCB index at load time..
@


4.6
log
@  Adapted for DB220.
Detail:
  Files modified: s.Percussion
Admin:
  Updated from Kev's machine.

Version 1.15. Tagged as 'Percussion-1_15'
@
text
@d193 1
a193 1
        STMFD   R13!,{R14}
d207 2
a208 2
        LDMFD   R13!,{R14} ; return - the release is assumed to work correctly!
        RETURNVC
d361 1
a361 1
        LDMFD   R13!,{PC}
d370 1
a370 1
        STMFD   R13!,{R0} ; filter code pointer
d374 1
a374 1
        STMFD   R13!,{R0} ; filter code pointer
d378 1
a378 1
        STMFD   R13!,{R0} ; filter code pointer
d382 1
a382 1
        STMFD   R13!,{R0} ; filter code pointer
d393 1
a393 1
        LDMFD   R13!,{PC}
d402 1
a402 1
        STMFD   R13!,{R0} ; filter code pointer
d406 1
a406 1
        STMFD   R13!,{R0} ; filter code pointer
d410 1
a410 1
        STMFD   R13!,{R0} ; filter code pointer
d414 1
a414 1
        STMFD   R13!,{R0} ; filter code pointer
d425 1
a425 1
        LDMFD   R13!,{PC}
d434 1
a434 1
        STMFD   R13!,{R0} ; filter code pointer
d438 1
a438 1
        STMFD   R13!,{R0} ; filter code pointer
d442 1
a442 1
        STMFD   R13!,{R0} ; filter code pointer
d446 1
a446 1
        STMFD   R13!,{R0} ; filter code pointer
d457 1
a457 1
        LDMFD   R13!,{PC}
d466 1
a466 1
        STMFD   R13!,{R0} ; filter code pointer
d470 1
a470 1
        STMFD   R13!,{R0} ; filter code pointer
d474 1
a474 1
        STMFD   R13!,{R0} ; filter code pointer
d478 1
a478 1
        STMFD   R13!,{R0} ; filter code pointer
d494 1
a494 1
        STMFD   r13!, {r0-r3,lr}
d504 2
a505 1
        LDMFD   r13!,{r0-r3,lr,pc}
d507 1
a507 1
        LDMFD   R13!,{PC}
d519 1
a519 1
        STMFD   r13!, {r0-r3,lr}
d526 2
a527 1
        LDMFD   r13!, {r0-r3,lr,pc}
d529 1
a529 1
        LDMFD   R13!,{PC}
d533 1
a533 1
CentiSec  &  65536*4/208 ; truncated divide
d535 6
d548 1
d558 23
d582 14
a630 1
                LDR     R4,CentiSec   ; centi-second count
d635 3
a637 1
        MOV     R5,#&400
d639 1
a639 1
        ORR     R5,R5,#&FF000000 ; force acc overflow!
d659 3
a661 1
        ORR     R1,R0,#&100
d740 1
a740 1
        STMFD   R13!,{R1}
d845 1
a845 1
        STMFD   R13!,{R1}
d1134 1
d1144 23
d1168 14
a1221 1
        LDR     R4,CentiSec   ; centi-second count
d1225 4
a1228 2
        MOV     R5,#&400
        ORR     R5,R5,#&FF000000 ; force acc overflow!
d1254 3
a1256 1
        ORR     R1,R0,#&100
@


4.5
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.71 or later.
  Requires BuildSys 3.06 or later.
  Requires Env 0.65 or later.

Version 1.14. Tagged as 'Percussion-1_14'
@
text
@d123 6
@


4.4
log
@  32-bit compatibility improved to only declare itself as 32-bit if
    the build was 32-bit.
Detail:
  Code updated to use macros from HdrSrc for mode changing and IRQ
    state updates.
Admin:
  Tested 26-bit and 32-bit builds on Risc PC by pressing ^G to generate
    the system beep, Maestro to play several sounds concurrently, and
    Replay to play audio files.

Version 1.13. Tagged as 'Percussion-1_13'
@
text
@d58 1
a58 1
   LEADR Module_LoadAddr    ; give output the right addresses
d82 1
a82 4
        DCB     "$Module_MajorVersion ($Module_Date)"
      [ Module_MinorVersion <> ""
        DCB     " $Module_MinorVersion"
      ]
d88 1
a88 1
   DCD     1           ; 32-bit OK
d92 1
a92 1
Initialise_Module ENTRY "r11",16        ; MessageTrans file block on stack
d227 1
a227 1
change_names ENTRY "r0-r3, r11", 16     ; MessageTrans file block on
@


4.3
log
@  Moved to srccommit
  32-bit compatible module.
Detail:
  This one didn't get srccommit'ed either.
Admin:
  Built and tested on desktop machine.

Version 1.12. Tagged as 'Percussion-1_12'
@
text
@d48 1
a48 1
 GET Hdr:APCS.<APCS>
d73 1
d75 1
d89 1
d92 1
@


4.2
log
@Ursula branch merged
@
text
@d47 2
a49 2
; GET Hdr:File
; GET Hdr:NewErrors
d54 1
a54 1
 GET Version
d69 5
d80 5
a84 2
        =       "$Version ($CurrentDate)"
        =       0
d87 3
d201 1
a201 1
        BICS    PC,R14,#V_bit
d203 1
a203 1
 ; Note that we can leave the workspace as it is : if this is a fatal entry, 
d224 1
a224 1
        MOVNES  pc, r14
d229 1
a229 1
        EXITS   VS                      ; Give up if no file.
d275 1
a275 1
        EXITS
d602 1
a602 1
        LDR     R0,[R8,#RegSav1] ; smooth update of 
d674 1
a674 1
        STRCS   R3,[R6],#4     ; and init word 
d1156 1
a1156 1
        LDR     R0,[R8,#RegSav1] ; smooth update of 
@


4.1
log
@Initial revision
@
text
@d202 8
d211 1
d214 1
a214 1

@


4.1.4.1
log
@update to Ursula service format
@
text
@a201 8
;Ursula format
;
UServTab
        DCD     0
        DCD     UService - Module_Base
        DCD     Service_ResourceFSStarted
        DCD     0
        DCD     UServTab - Module_Base
a202 1
        MOV     r0, r0
d205 1
a205 1
UService
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
