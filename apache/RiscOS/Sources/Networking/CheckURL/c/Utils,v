head	1.4;
access;
symbols
	CheckURL-0_17:1.4
	CheckURL-0_16:1.4
	CheckURL-0_15:1.4
	CheckURL-0_14:1.4
	CheckURL-0_13:1.4
	CheckURL-0_12:1.4
	CheckURL-0_11:1.4
	CheckURL-0_10:1.4
	CheckURL-0_09:1.4
	CheckURL-0_08:1.3
	CheckURL-0_07:1.2
	CheckURL-0_06:1.2
	CheckURL-0_05:1.2
	CheckURL-0_04:1.2
	CheckURL-0_03:1.1.1.1
	CheckURL-0_02:1.1.1.1
	CheckURL-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.07.06.16.47.34;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.26.10.51.57;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.28.10.06.58;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.16.15.04.54;	author ahodgkin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.03.16.15.04.54;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Tidied Utils.c. Better atexit code.
Detail:
  Better ordering - e.g. close messages file before deleting areas, so
  if there is e.g. list corruption and the area freeing fails, it won't
  leave a stray messages file open and stuff the box later.
Admin:
  Built and run.

Version 0.09. Tagged as 'CheckURL-0_09'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Utils.c                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Miscellaneous utility functions.                  */
/*                                                            */
/* Author:  IDJ                                               */
/*                                                            */
/* History: 08-Mar-2000 (ADH): Imported to Check URL.         */
/*          03-Jul-2001 (ADH): Merged back to Video Control.  */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include "debuglib/debuglib.h"

#include "Utils.h"

/* Local definitions */

#define ERR_BLOCKS                 3
#define MessageTrans_TokenNotFound 0xAC2

/* Local variables */

static int             registered = 0;
static int             messages_fd[4];
static _kernel_oserror stored_error;

/**************************************************************/
/* find_error()                                               */
/*                                                            */
/* Get a pointer to one of ERR_BLOCKS locally stored error    */
/* blocks, in which error messages can be stored for future   */
/* reference. Each request increments the internal counter    */
/* until it wraps around back to the first error block held.  */
/*                                                            */
/* See also utils_store_error, utils_recall_error for a       */
/* different way of accessing similar functionality.          */
/**************************************************************/

_kernel_oserror * find_error(void)
{
  static _kernel_oserror global_error_block[ERR_BLOCKS];
  static int             errblock = 0;

  errblock = (errblock+1) % ERR_BLOCKS;
  return &global_error_block[errblock];
}

/**************************************************************/
/* make_error()                                               */
/*                                                            */
/* Raise an error based on an error number masked with &FF -  */
/* see the Messages file for a list.                          */
/*                                                            */
/* Parameters: Error number;                                  */
/*                                                            */
/*             Number of arguments given that are to be       */
/*             substituted into the message string;           */
/*                                                            */
/*             Zero to four NUL terminated strings to use for */
/*             substitution.                                  */
/**************************************************************/

extern _kernel_oserror * make_error(int err_num, int num_args, ...)
{
  va_list            ap;
  char             * s, token[4];
  int                i = 4;
  _kernel_oserror  * e, * ptr;
  char             * sub[4] = {0,0,0,0};

  ptr         = find_error();
  ptr->errnum = err_num;

  num_args    = (num_args > 4) ? 4 : num_args;

  for (va_start (ap, num_args); num_args--; i++)
  {
    s      = va_arg (ap, char *);
    sub[i] = (s && *s) ? s : NULL; /* copy (pointer to args)s into registers */
  }

  sprintf(token, "E%02x", err_num & 0xff);

  e = _swix(MessageTrans_Lookup,
            _INR(0,7),

            messages_fd,
            token,
            ptr->errmess,
            sizeof(*ptr) - sizeof(ptr->errnum) /* 252! */,
            sub[0],
            sub[1],
            sub[2],
            sub[3]);

  /* if the token isn't found, generate our own not found report */

  if ((e != NULL) && (e->errnum == MessageTrans_TokenNotFound))
  {
    _swix(MessageTrans_Lookup,
          _INR(0,7),

          messages_fd,
          "E09",
          ptr->errmess,
          sizeof(*ptr) - sizeof(ptr->errnum) /* 252! */,
          0,
          0,
          0,
          0);
  }

  va_end (ap);
  return ptr;
}

/**************************************************************/
/* messages_file_open()                                       */
/*                                                            */
/* Open the named messages file, using the global messages    */
/* block.                                                     */
/*                                                            */
/* Parameters: Pointer to the filename of the Messages file.  */
/**************************************************************/

extern _kernel_oserror * messages_file_open(char * messages_filename)
{
  _kernel_oserror * e = _swix(MessageTrans_OpenFile,
                              _INR(0,2),

                              messages_fd,
                              messages_filename,
                              0);

  if (e == NULL) registered = 1;

  return e;
}

/**************************************************************/
/* messages_file_close()                                      */
/*                                                            */
/* Close the Messages file using the global messages block.   */
/**************************************************************/

extern _kernel_oserror * messages_file_close(void)
{
  _kernel_oserror * e;

  if (registered == 1) e = _swix(MessageTrans_CloseFile,
                                 _IN(0),

                                 messages_fd);

  else                 e = NULL;

  registered = 0;

  return e;
}

/**************************************************************/
/* read_message()                                             */
/*                                                            */
/* Look up a given message through MessageTrans into a given  */
/* buffer with no parameter substitution. You must have first */
/* opened a Messages file with messages_file_open.            */
/*                                                            */
/* Parameters: Pointer to the token to look up;               */
/*                                                            */
/*             Pointer to a char * pointing to the buffer -   */
/*             this is updated on exit to point to the result */
/*             string ("*value" is given in R2 of             */
/*             MessageTrans_Lookup and R2 on exit is written  */
/*             back);                                         */
/*                                                            */
/*             Pointer to a size_t holding the buffer size,   */
/*             updated on exit to hold the size of the looked */
/*             up string.                                     */
/**************************************************************/

_kernel_oserror * read_message(const char * token, const char ** buffer, size_t * inoutlength)
{
  return _swix(MessageTrans_Lookup,
               _INR(0,7) | _OUTR(2,3),

               messages_fd,
               token,
               *buffer,
               *inoutlength,
               0,
               0,
               0,
               0,

               buffer,
               inoutlength);
}

/**************************************************************/
/* utils_store_error()                                        */
/*                                                            */
/* Stores a copy of an error into a local block, overwriting  */
/* any previously stored error. See also find_error for a     */
/* different way of accessing similar functionality.          */
/*                                                            */
/* Parameters: Pointer to the _kernel_oserror * struct to     */
/*             copy away. May be NULL.                        */
/**************************************************************/

void utils_store_error(_kernel_oserror * e)
{
  if (e != NULL)
  {
    stored_error.errnum = e->errnum;
    strncpy(stored_error.errmess, e->errmess, sizeof(stored_error.errmess));
  }

  return;
}

/**************************************************************/
/* utils_recall_error()                                       */
/*                                                            */
/* Recall an error stored with utils_store_error. The caller  */
/* bears responsibility for matching store to recall. Only    */
/* one error can be stored at a time. See also find_error for */
/* a different way of accessing similar functionality.        */
/*                                                            */
/* Returns:    Pointer to the stored error.                   */
/**************************************************************/

_kernel_oserror * utils_recall_error(void)
{
  return &stored_error;
}
@


1.3
log
@  New * command, tidying up.
Detail:
  *CheckURLAreas added; lists defined areas. Allocation pending. Tidied
  up module init code based on RTSP MB; removes need for module_kill
  finalisation code by using an atexit handler instead. Corrected typo
  in preamble text printed out by test program.
Admin:
  All tests still pass. Star command output is as expected for various
  area definitions or no areas at all. CMHG 5.30 or later required
  (enforced by Module.c).

Version 0.08. Tagged as 'CheckURL-0_08'
@
text
@d25 1
d45 2
d50 2
d56 11
a66 4
_kernel_oserror *read_message (const char * token, const char ** buffer, size_t * inoutlength)
{
  return _swix(MessageTrans_Lookup,
               _INR(0,7) | _OUTR(2,3),
d68 1
a68 14
               messages_fd,
               token,
               *buffer,
               *inoutlength,
               0,
               0,
               0,
               0,

               buffer,
               inoutlength);
}

_kernel_oserror * find_error (void)
d77 14
a90 1
/* ------------------------------------ raising errors ---------------------------------------- */
d92 1
a92 1
extern _kernel_oserror * make_error (int err_num, int num_args, ...)
a93 4
  /*
   * Generate a RISC OS error block.
   */

d146 8
a153 1
/* --------------------------------------- message file handling ------------------------------ */
d155 1
a155 1
extern _kernel_oserror * messages_file_open (char * messages_filename)
d169 7
a175 1
extern _kernel_oserror * messages_file_close (void)
d192 38
d233 2
a234 1
/* any previously stored error.                               */
d256 2
a257 1
/* one error can be stored at a time.                         */
@


1.2
log
@  Bug fix in URL matching, two character error in source file header comments
  corrected.
Detail:
  Paths with colons in had those colons interpreted as port separators; the
  URL_Fetcher module only escapes chars 0-32 and 127 and I'd been relying on
  it doing other characters too. Whilst I was at it, I made the legacy
  support for a comma separated list of the match strings a compile-time
  option and compiled it out as CheckURL never uses this. In addition, every
  source file had a cut-and-paste propagated two character error in the
  source file header comments, which has been corrected.
Admin:
  Confirmed that ROM, RAM and debug builds compile. Tested various port
  and path combinations and modified test suite slightly to ensure that
  whilst ports work, colons in paths will work too.

Version 0.04. Tagged as 'CheckURL-0_04'
@
text
@d47 1
d142 2
a143 2
  return _swix(MessageTrans_OpenFile,
               _INR(0,2),
d145 7
a151 3
               messages_fd,
               messages_filename,
               0);
d156 10
a165 2
  return _swix(MessageTrans_CloseFile,
               _IN(0),
d167 1
a167 1
               messages_fd);
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
/* Author : IDJ                                               */
@


1.1.1.1
log
@  First complete version of Check URL.
Detail:
  Check URL allows applications to match URLs against URL fragments to
  perform domain, port and/or path specific activities. This could be
  used in a browser to block advert loading, in Video Control to select
  a protocol module, or in JavaScript to enable or disable the Pace VOD
  extensions, for example. See 2501,846 for details.
Admin:
  This has only been lightly tested, but I believe it's functionally
  complete according to issue 1 of the specification.
@
text
@@
