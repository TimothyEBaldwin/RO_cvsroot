head	1.3;
access;
symbols
	CheckURL-0_17:1.3
	CheckURL-0_16:1.3
	CheckURL-0_15:1.3
	CheckURL-0_14:1.3
	CheckURL-0_13:1.3
	CheckURL-0_12:1.3
	CheckURL-0_11:1.3
	CheckURL-0_10:1.3
	CheckURL-0_09:1.3
	CheckURL-0_08:1.3
	CheckURL-0_07:1.3
	CheckURL-0_06:1.3
	CheckURL-0_05:1.3
	CheckURL-0_04:1.3
	CheckURL-0_03:1.2
	CheckURL-0_02:1.2
	CheckURL-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2000.03.28.10.06.57;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.17.17.19.25;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.16.15.04.54;	author ahodgkin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.03.16.15.04.54;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Bug fix in URL matching, two character error in source file header comments
  corrected.
Detail:
  Paths with colons in had those colons interpreted as port separators; the
  URL_Fetcher module only escapes chars 0-32 and 127 and I'd been relying on
  it doing other characters too. Whilst I was at it, I made the legacy
  support for a comma separated list of the match strings a compile-time
  option and compiled it out as CheckURL never uses this. In addition, every
  source file had a cut-and-paste propagated two character error in the
  source file header comments, which has been corrected.
Admin:
  Confirmed that ROM, RAM and debug builds compile. Tested various port
  and path combinations and modified test suite slightly to ensure that
  whilst ports work, colons in paths will work too.

Version 0.04. Tagged as 'CheckURL-0_04'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* Area   : Check.c                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: URL to URL fragment comparison.                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 08-Mar-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Area.h"
#include "CheckURL.h"
#include "File.h"
#include "Generic.h"
#include "URLUtils.h"
#include "Utils.h"

#include "Check.h"

/**************************************************************/
/* check_check()                                              */
/*                                                            */
/* Implement CheckURL_Check. See the Check URL specification, */
/* 2501,846/FS, for more.                                     */
/**************************************************************/

_kernel_oserror * check_check(_kernel_swi_regs * r)
{
  area            * found;
  config          * match;
  url_description * d;
  bool              f = false;

  dprintf(("", "check_check: Called\n"));

  if ((r->r[0] & CU_Check_OnEntry_GivenAreaID) != 0)
  {
    /* Area ID to name */

    found = area_resolve(r->r[1]);
  }
  else
  {
    /* Name to area ID */

    found = area_find((const char *) r->r[1], NULL);
  }

  if (found == NULL) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);

  dprintf(("", "check_check: Area %p\n", found));

  if (r->r[2] == 0)
  {
    r->r[0] = 0; /* No match URL so no match found, but no error either */
    return NULL;
  }

  if ((r->r[0] & CU_Check_OnEntry_GivenURLDescriptor) != 0)
  {
    /* Given a URL descriptor */

    d = (url_description *) r->r[2];
  }
  else
  {
    _kernel_oserror * e;

    /* Construct a URL descriptor */

    dprintf(("", "check_check: Descriptor required for '%s'\n",(const char *) r->r[2]));

    e = urlutils_return_description((const char *) r->r[2], &d);
    if (e != NULL) return e;

    if (d == NULL)
    {
      dprintf(("", "check_check: d or canonical is NULL, out of memory\n"));
      return make_error(cu_ERROR_MEMORY_EXHAUSTED, 0);
    }

    f = true;
  }

  dprintf(("",
           "check_check: URL %p -> '%s', '%s', '%s', '%s'\n",
           d,
           d->host  ? d->host  : "<NULL>",
           d->port  ? d->port  : "<NULL>",
           d->path  ? d->path  : "<NULL>",
           d->query ? d->query : "<NULL>"));

  /* Try to match within the area */

  match = found->head;

  while (match)
  {
    if (match->parameter != NULL)
    {
      char * dupm = Strdup(match->fragment);
      int    result;

      if (dupm == NULL)
      {
        dprintf(("", "check_check: Can't duplicate match fragment, out of memory\n"));

        if (f) urlutils_free_description(d);
        return make_error(cu_ERROR_MEMORY_EXHAUSTED, 0);
      }

      result = urlutils_matches_special(d, dupm);

      free(dupm);

      if (result == 1)
      {
        dprintf(("", "check_check: Matched to '%s'\n",match->fragment));

        if (f) urlutils_free_description(d);

        r->r[0] = CU_Check_OnExit_MatchFound;
        r->r[1] = (int) match->parameter;

        return NULL;
      }
    }

    match = match->next;
  }

  if (f) urlutils_free_description(d);

  r->r[0] = 0;

  dprintf(("", "check_check: No match, exitting\n"));

  return NULL;
}
@


1.2
log
@Test harness added, with a few minor bug fixes arising from the test
results. URL_Fetcher handling improved.

Version 0.02. Tagged as 'CheckURL-0_02'
@
text
@d22 1
a22 1
/* Author : A.D.Hodgkinson.                                   */
@


1.1
log
@Initial revision
@
text
@a45 1
#include "ParseURL.h"
a66 6
  if (r->r[1] == 0 || r->r[2] == 0)
  {
    dprintf(("", "check_check: R1 or R2 are zero! Bailing\n"));
    return NULL;
  }

a71 1
    if (found == NULL) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);
a77 1
    if (found == NULL) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);
d80 2
d84 6
d98 1
a98 1
    char * canonical;
d104 2
a105 6
    canonical = parseurl_canonicalise(parseurlflags_APPLY_HEX_ENCODE, (char *) r->r[2]);
    d         = NULL;

    if (canonical != NULL) d = urlutils_return_description(canonical);

    free(canonical);
d107 1
a107 1
    if (d == NULL || canonical == NULL)
@


1.1.1.1
log
@  First complete version of Check URL.
Detail:
  Check URL allows applications to match URLs against URL fragments to
  perform domain, port and/or path specific activities. This could be
  used in a browser to block advert loading, in Video Control to select
  a protocol module, or in JavaScript to enable or disable the Pace VOD
  extensions, for example. See 2501,846 for details.
Admin:
  This has only been lightly tested, but I believe it's functionally
  complete according to issue 1 of the specification.
@
text
@@
