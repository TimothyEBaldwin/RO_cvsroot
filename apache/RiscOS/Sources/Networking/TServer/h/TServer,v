head	1.11;
access;
symbols
	TServer-0_16:1.11
	TServer-0_15:1.11
	TServer-0_14:1.10
	TServer-0_12:1.9
	TServer-0_11:1.8
	TServer-0_10:1.7
	TServer-0_09:1.6
	TServer-0_08:1.5
	TServer-0_07:1.5
	TServer-0_06:1.5
	TServer-0_05:1.5
	TServer-0_04:1.5
	TServer-0_03:1.4
	TServer-0_02:1.3
	TServer-0_01:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2004.11.30.00.45.21;	author jballance;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.06.16.34.03;	author bavison;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.24.13.15.16;	author dellis;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.04.17.17.39;	author srevill;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.17.18.33.59;	author dellis;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.16.16.17.34;	author dellis;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.18.14.14.37;	author dellis;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.01.15.29.44;	author dellis;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.13.18.17.22;	author dellis;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.12.13.25.45;	author dellis;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.07.10.51.56;	author dellis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.07.10.51.56;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.11
log
@         updates to TServer required for SVD
Detail:
         added session inactivity timeout and ensure socket closure
         captured correctly in all guises.
         variable TServer$SessionTimeout can be used to alter
         session inactivity timeout from default 5 mins
Admin:
      caste added ip


Version 0.15. Tagged as 'TServer-0_15'
@
text
@/* Copyright 2001 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#if !defined(TSERVER_H) /* file used if not already included */
#define TSERVER_H
/*****************************************************************************
* $Id: TServer,v 1.7 2001/11/17 18:33:59 dellis Exp $
* $Name:  $
*
* Author(s):  Daniel R Ellis, JWB
* Project(s): IA Next Generation (A148)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: This program provides a simple telnet server running under RISC OS
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/

/*****************************************************************************
* Constants
*****************************************************************************/

/* Kernel constants */
#define Event_Disable               0xd
#define Event_Enable                0xe
#define Module_Enter                2

/* TaskWindow SWIs */
#define TaskWindow_Input            0x808c0
#define TaskWindow_Output           0x808c1
#define TaskWindow_Ego              0x808c2
#define TaskWindow_Morio            0x808c3
#define TaskWindow_Morite           0x808c4
#define TaskWindow_NewTask          0x808c5
#define TaskWindow_Suspend          0x808c6
#define TaskWindow_Resume           0x808c7

/* DebugIt SWIs */
#define  DebugIt_Register           0x4ba80
#define  DebugIt_DeRegister         0x4ba81
#define  DebugIt_WriteC             0x4ba82
#define  DebugIt_GetString          0x4ba83
#define  DebugIt_ResetBufferSize    0x4ba84
#define  DebugIt_GetBufferSize      0x4ba85

/* pollword constants */
#define TServer_PollWord_RecvSock   (1<<0)
#define TServer_PollWord_MsgSock    (1<<1)
#define TServer_PollWord_DebugIt    (1<<2)
#define TServer_PollWord_SendSock   (1<<3)
#define TServer_PollWord_DebugItLock (1<<4)

#ifdef __AuthCode
/* FTPs SWIs */
#define  FTPs_CheckPassword         0x57140
#endif


/* Socket events */
#define Socket_Async_Event          1
#define Socket_Urgent_Event         2
#define Socket_Broken_Event         3
#define RarpReply                   4

/*****************************************************************************
* New type definitions
*****************************************************************************/

typedef struct {
    int     size;
    char    data[232];
} TaskWindowInputMessage,
  TaskWindowOutputMessage;

typedef struct {
    int     handle;
} TaskWindowEgoMessage;

typedef struct task_block task_block;

struct task_block {
    task_block* next;
    int         task_id;
    int         sock;
    int         flags;
#define Task_DataReceived       (1<<0)
#define Task_OutputDisabled     (1<<1)
#define Task_ConnectionBroken   (1<<2)
#define Task_EventFlags         (Task_DataReceived | Task_ConnectionBroken)
#define Task_SpawnedTask        (1<<3)
#ifdef __AuthCode
#define Task_NeedUser           (1<<4)
#define Task_NeedPassword       (1<<5)
#define Task_NeedTaskPrompt     (1<<6)
#endif
    int         state;
    int         esc_state;
    int         width;  /* current width of display */
    int         telopt_ptr;
    char        telopt[8];
    char*       com;
    int         timeout;
#ifdef __AuthCode
    char        authuser[16];   // max length 15 user and 15 passwd
    char        authpass[16];
#endif
};

/* main entry point */
extern void tserver (void* pw);

/* read the pollword atomically, resetting it */
extern int atomic_swap (int, int*);

/* assembler routines for filter */
void taskwindow_postfilter (void);
void taskwindow_prefilter (void);

/* called to kill the task */
void taskwindow_morio (task_block* tsk);

/* the address of the application stack (so we can free it) */
extern char* appstack;

#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
@


1.10
log
@  New version from John, including contributions from Dan.
Detail:
  Only starts a task window once an application starts, otherwise commands
  operate from within callbacks.
  Many other unspecified updates.
Admin:
  As distributed to SVD.
  We don't seem to have ever received version 0.13.

Version 0.14. Tagged as 'TServer-0_14'
@
text
@d124 1
@


1.9
log
@Commit of latest TServer from Dan Ellis:
> Here's some changes I made to tserver which allow it to respond on
> callbacks rather than just using a taskwindow. A taskwindow is only fired
> up when upcall application started occurs, so otherwise the command
> executes int the background.
>
> There's a new *command to give taskwindow which executes a *command at an
> address in memory (TServer_OSCLI) this allows just a single command to be
> executed by the taskwindow (the one which was being executed on the
> callback), then the taskwindow quits.
>
> This might prove a good point to add authentication.
>
> There's a bit of cruft in there as well, e.g. some debug stuff for
> reporting when I file has changed.
>
> Also, I think you might not have the code which restricts the size of the
> terminal from the remote machine. This is good for directory listings, so
> that they come out well formatted.


Version 0.12. Tagged as 'TServer-0_12'
@
text
@d21 1
a21 1
* Author(s):  Daniel R Ellis
d75 6
d112 6
d124 4
@


1.8
log
@  Commit of latest TServer from Dan Ellis.
Detail:
> I've made tserver listen to TELOPT_NAWS and set the window size in a
> postfilter.  (You may also have seen my similar patch to zap's taskwindow
> mode).
>
> This means that help and directory listings work properly in a telnet
> session.
Admin:
  Builds.

Version 0.11. Tagged as 'TServer-0_11'
@
text
@d73 1
d111 1
@


1.7
log
@  - task closedown cleaned up
  - media not present upcall trapped
  - VDU processing much enhanced
  - task quit fixed

Detail:
  The stack claimed from RMA is now released on Service_WimpCloseDown rather
than on exit.  This means it also gets released if the program exits
abnormally.  Service_WimpCloseDown also resets the task handle, so that if
the Wimp exits and restarts, TServer will restart as well, previously it was
failing to do this because it hadn't reset its task handle.

  There was a problem with media not present error boxes popping up, for
example when an attempt was made to access an unavailable share. This has
been fixed by sitting on UpCallV and cancelling it if the current task is one
of ours (determined by calling Wimp_ReadSysInfo).  This results in an
immediate response of 'shared disc not available' which is quite
satisfactory.

  Additional VDU Sequences now understood:

  6 and 21 turn on and off VDU output (control whether anything gets written
to the socket)

  17 sets foreground and background text colour

  30 homes the cursor

  31 tabs the cursor to position x, y.

  Multibyte VDU sequences other than these aren't eaten at the
moment.

  Task quit wan't being listened to.  Typing ShellCLI_TaskQuit in a session
will now quit it cleanly.  (you may like to alias this to something a little
easier to type!).

Admin:
  Tested extensively on RiscPC and STB3.



Version 0.10. Tagged as 'TServer-0_10'
@
text
@d18 1
a18 1
* $Id: TServer,v 1.6 2001/11/16 16:17:34 dellis Exp $
a45 1

a50 1

a60 1

a68 1

d74 5
d101 4
a104 2
#define Task_InternetEvent    (1<<0)
#define Task_OutputDisabled   (1<<1)
d107 3
d113 13
a125 1
extern void tserver (void);
@


1.6
log
@  (this time with the header file)
  Added clear screen to VT commands known.
  Added TServer_VTCommand

Detail:
  The server didn't understand clear screen.  This is quite nice to have.

  There is now a way of sending generic VT control sequences using the
TServer_VTCommand *command.  This prefixes the string with the escape
character e.g. TServer_VTCommand [A will send '\x1b[A' to the terminal and
cause the cursor to go up one line.

Admin:
  Tested RiscPC.



Version 0.09. Tagged as 'TServer-0_09'
@
text
@d18 1
a18 1
* $Id: TServer,v 1.5 2001/10/18 14:14:37 dellis Exp $
d45 1
a45 2
#define Event_Disable       0xd
#define Event_Enable        0xe
d47 3
a49 1
#define Module_Enter    2
d53 8
a60 8
#define TaskWindow_Input    0x808c0
#define TaskWindow_Output   0x808c1
#define TaskWindow_Ego      0x808c2
#define TaskWindow_Morio    0x808c3
#define TaskWindow_Morite   0x808c4
#define TaskWindow_NewTask  0x808c5
#define TaskWindow_Suspend  0x808c6
#define TaskWindow_Resume   0x808c7
d64 6
a69 6
#define  DebugIt_Register         0x4ba80
#define  DebugIt_DeRegister       0x4ba81
#define  DebugIt_WriteC           0x4ba82
#define  DebugIt_GetString        0x4ba83
#define  DebugIt_ResetBufferSize  0x4ba84
#define  DebugIt_GetBufferSize    0x4ba85
d71 1
a72 3
#define TServer_SlotSize    16384

/* pollword constants */
d78 1
d100 2
a101 1
#define Task_InternetEvent    1
d108 1
a108 2

void vtcommand (const char* com);
@


1.5
log
@  - Now uses no wimpslot so can just be run
  - Now supports multiple telnet sessions

Detail:
  Previously the module had to be started with *desktop so that it was
started with the service call mechanism in order that the wimpslot could be
explicitly set.  Since the only memory required for C is for the Stack,
this is allocated in RMA.  Internal memory allocation is done from the RMA
explicitly.

  This enables the module to be run simply by double clicking on it rather
than having to start it's Task part separately, a technique used by ShareFS,
and maybe of use in other components.

  There is now support for multiple telnet sessions.  Previously only one was
supported at a time.  If debugit output is switched on, it will be displayed
in the last session opened.

Admin:
  Tested on a RiscPC.




Version 0.04. Tagged as 'TServer-0_04'
@
text
@d18 1
a18 1
* $Id: TServer,v 1.4 2001/05/01 15:29:44 dellis Exp $
d107 2
@


1.4
log
@  Added debugit support.

Detail:
  The debugit module is one of the options for output from Debuglib.  It
buffers output and will set a pollword for an app to display the output at an
opportune time, !ListDebug is the standard handler for this.

  For embedded work it is useful for debug output to come out in the terminal
window on which you are working, since you may not have !Listdebug running on
the client and you probably don't want it to be displayed on the device
anyway.  Issuing the command TServer_DebugItStart will register the
application part of TServer with the DebugIt module, and send debugit output
back across the socket to the telnet terminal being communicated to.

  This provides a capability not available with normal taskwindows - you
can't run a program with debuglib and get output in the taskwindow because
the module producing the output has no idea which taskwindow to output the
debug data to, running from the command prompt you can achieve this as the
machine is then no longer multitasking and you can use printf debuglib
output.  TServer debug output is very similar to this.

  There is a complementary command, TServer_DebugitStop which deregisters
TServer from debugit.

Admin:
  Tested extensively on the Customer L SDB.  If a lot of debug output is
generated, it can get choked, although it usually seems to come through.
Version 0.03. Tagged as 'TServer-0_03'
@
text
@d18 1
a18 1
* $Id: TServer,v 1.3 2001/03/13 18:17:22 dellis Exp $
d73 1
a73 1
/* pollord constants */
d77 1
d93 14
@


1.3
log
@  Made ROMMable

Detail:
  The module now listens to Service_StartWimp and friends so that it
will behave itself when started from a ROM.

Admin:
  Tested on a RiscPC


Version 0.02. Tagged as 'TServer-0_02'
@
text
@d18 1
a18 1
* $Id: TServer,v 1.2 2001/03/12 13:25:45 dellis Exp $
d45 2
a46 2
#define Event_Disable       13
#define Event_Enable        14
d50 2
d61 10
d72 5
@


1.2
log
@  Restricts wimpslot, and some minor tweaks.

Detail:
  The module now sets the wimpslot during the Service_Memory call.

  The makefile has been tidied a bit and the cmhg file now uses VersionNum

  Added a !MkDebug

Admin:
  Tested on a RiscPC


Version 0.01. Tagged as 'TServer-0_01'
@
text
@d18 1
a18 1
* $Id: TServer,v 1.1.1.1 2001/03/07 10:51:56 dellis Exp $
d47 3
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
* $Id: template.h,v 1.5 2000/02/21 10:25:28 rwarren Exp $
d55 2
@


1.1.1.1
log
@  A telnet server for RISC OS

Details:
  This is a simple telnet server for RISC OS.  It supports a subset of the
telnet protocol but has hooks to extend it if desired.

  One connection at a time is supported, a second connection will kick off the 
first one.

Admin:
  Used extensively on the Customer L development board.  Doesn't have a ROM build
rule at the moment.
@
text
@@
