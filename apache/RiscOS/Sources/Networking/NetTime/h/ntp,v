head	4.4;
access;
symbols
	NetTime-0_43:4.4
	NetTime-0_42:4.4
	NetTime-0_41:4.4
	NetTime-0_40:4.4
	NetTime-0_39:4.4
	NetTime-0_38:4.4
	NetTime-0_37:4.4
	NetTime-0_36:4.4
	NetTime-0_35:4.4
	NetTime-0_34:4.4
	NetTime-0_33:4.4
	NetTime-0_32:4.4
	NetTime-0_31:4.3
	NetTime-0_30:4.2
	NetTime-0_29:4.2
	dellis_autobuild_BaseSW:4.2
	NetTime-0_28:4.2
	NetTime-0_26:4.2
	NetTime-0_25:4.2
	NetTime-0_24:4.2
	NetTime-0_23:4.2
	sbrodie_sedwards_16Mar2000:4.1
	NetTime-0_22:4.2
	NetTime-0_21:4.1
	dcotton_autobuild_BaseSW:4.2
	NetTime-0_20:4.1;
locks; strict;
comment	@# @;


4.4
date	2004.05.19.18.21.24;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2002.07.23.12.39.03;	author srevill;	state Exp;
branches;
next	4.2;

4.2
date	2000.03.16.16.50.19;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	2000.03.07.10.44.56;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.4
log
@* Added support for non-IOMD, HAL-based platforms.
* Improved *NetTime_PollInterval to make sure next poll happens at
  the expected time.
* On module init, no longer sets the time from the NVRAM if the current
  time seems sensible (ie >= 2003ish).
* Sets the time NVRAM on shutdown (was only on packet reception).

Version 0.32. Tagged as 'NetTime-0_32'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdint.h>

struct ntp_time
{
    uint32_t secs, frac;
};

struct riscos_time
{
    uint64_t cs;        /* 40-bit RISC OS time (cs since 1900) */
    uint32_t extrans;   /* Extra nanoseconds to add */
};

struct ntp
{
    unsigned char flags;
    unsigned char stratum;
    signed char poll;
    signed char precision;
    int32_t root_delay;
    uint32_t root_dispersion;
    char reference_identifier[4];
    struct ntp_time reference_timestamp;
    struct ntp_time originate_timestamp;
    struct ntp_time receive_timestamp;
    struct ntp_time transmit_timestamp;
};

/* RISC OS 5-byte time extended with 24 bits of fraction - ie
 * centiseconds since 1900 as 40.24 fixed point. */
typedef uint64_t riscos_time8;
typedef int64_t riscos_timediff8;

size_t ntp_construct_request(struct ntp *n, size_t len);
int ntp_process_reply(const struct ntp *n, size_t len, int64_t *offset_out);
struct riscos_time current_time(void);
const char *riscos_to_text(struct riscos_time t);
struct ntp_time riscos_to_ntp(struct riscos_time t);
@


4.3
log
@  Fixed to build with the latest cc (5.54) compiler.
Detail:
  This version now builds with cc-5_45. Note: it has not been verified as
  actually functioning correctly.
Admin:
  Tested in DSL Baseline build.

Version 0.31. Tagged as 'NetTime-0_31'
@
text
@d52 1
@


4.2
log
@Precision of internal arithmetic and clock reading improved. Now possible
to maintain time to within a couple of milliseconds (given frequent enough
polling).

Version 0.22. Tagged as 'NetTime-0_22'
@
text
@d15 2
d19 1
a19 1
    u_int32_t secs, frac;
d24 2
a25 3
    u_int32_t l;
    u_char h;
    u_int32_t extrans; /* Extra nanoseconds to add */
d35 1
a35 1
    u_int32_t root_dispersion;
d45 1
a45 1
typedef u_int64_t riscos_time8;
@


4.1
log
@  Added support for NTP, gradual time adjustment, configurable DST,
  and DHCP timezone.

Detail:
  If Inet$NTPServer is set, NetTime will use NTP (unicast SNTP, as per RFC2030).
  Otherwise it will use the UDP time protocol (it used to use TCP).

  NetTime will use the RTCAdjust algorithms to adjust the centisecond clock
  rate by +/-10% to get in step with the time server. By polling every 30
  minutes on a LAN, time will not deviate by more than 0.1 seconds once
  synchronised. It interoperates with RTCAdjust and the hardware RTC to ensure
  correct operation on a machine with RTC.

  NetTime has returned to polling every 30 minutes. This may defeat PPP
  timeouts - a suggested fix is to change PPP to only have TCP traffic keep the
  link up, or to have a separate user inactivity timeout (like Lazarus).

  The system variable NetTime$DST controls DST behaviour. Set to "European"
  (the default) to use European rules. Set it to something like
  "03-May-2000.01:00:00; 14-Sep-2000.01:00:00" to specify this year's start
  and end dates (in UTC). Set to "No" to make it leave DST alone.

  If a DHCP reply arrives while NetTime is loaded, it will check for the time
  offset option - if present, the timezone will be configured.

  New command *NetTime_Status gives information about the clock adjustments.

  NetTime attempts to start operation immediately on a non-dialup machine -
  removes the need for a *NetTime_Kick after softloading. *NetTime_Kick will
  still be required after, say, setting Inet$NTPServer manually.

Admin:
  Tested on desktop systems and STBs. NTP operation on an NC will require a
  way of finding out an NTP server - possibly redefining TIME_SERVER smartcard
  tag to be NTP? Anycast operation may also be worth adding.

Version 0.20. Tagged as 'NetTime-0_20'
@
text
@d42 5
d48 1
a48 1
int ntp_process_reply(const struct ntp *n, size_t len, struct riscos_time *time_out);
d50 1
a50 1
const char *riscos_to_text(struct riscos_time t, int precise);
@

