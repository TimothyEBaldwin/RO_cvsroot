head	4.18;
access;
symbols
	NetTime-0_43:4.18
	NetTime-0_42:4.17
	NetTime-0_41:4.17
	NetTime-0_40:4.17
	NetTime-0_39:4.17
	NetTime-0_38:4.16
	NetTime-0_37:4.15
	NetTime-0_36:4.14
	NetTime-0_35:4.14
	NetTime-0_34:4.14
	NetTime-0_33:4.14
	NetTime-0_32:4.14
	NetTime-0_31:4.13
	NetTime-0_30:4.12
	NetTime-0_29:4.11
	dellis_autobuild_BaseSW:4.11
	NetTime-0_28:4.11
	NetTime-0_26:4.10
	NetTime-0_25:4.10
	NetTime-0_24:4.10
	NetTime-0_23:4.10
	sbrodie_sedwards_16Mar2000:4.9
	NetTime-0_22:4.10
	NetTime-0_21:4.9
	NetTime-0_20:4.8
	dcotton_autobuild_BaseSW:4.11
	NetTime-0_16:4.7
	NetTime-0_15:4.6
	NetTime-0_14:4.6
	NetTime-0_13:4.6
	NetTime-0_12:4.5
	NetTime-0_11:4.5
	NetTime-0_10:4.5
	NetTime-0_09:4.5
	NetTime-0_08:4.4
	NetTime-0_07:4.4
	NetTime-0_06:4.3
	NetTime-0_05:4.3
	NetTime-0_04:4.2
	afrost_NC2_Generic:4.1.7.4
	Spinner_RCA116:4.1.7.4
	Spinner_B20_2:4.1.7.4
	Spinner_19_3:4.1.7.4
	Spinner_B18:4.1.7.4
	Spinner_B17:4.1.7.4
	Spinner_B15:4.1.7.4
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Spinner_B7:4.1.7.2
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.4
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.18
date	2013.11.28.21.44.24;	author rsprowson;	state Exp;
branches;
next	4.17;
commitid	rSY16SsDgYrjJ5fx;

4.17
date	2012.02.25.08.18.19;	author rsprowson;	state Exp;
branches;
next	4.16;
commitid	7cQZQe1cYi4cUvUv;

4.16
date	2012.02.12.15.36.23;	author rsprowson;	state Exp;
branches;
next	4.15;
commitid	Z5V6e85W3FhqKSSv;

4.15
date	2012.02.04.22.08.44;	author rsprowson;	state Exp;
branches;
next	4.14;
commitid	W0erdTttgEwVaTRv;

4.14
date	2004.05.19.18.21.24;	author kbracey;	state Exp;
branches;
next	4.13;

4.13
date	2002.07.23.12.39.03;	author srevill;	state Exp;
branches;
next	4.12;

4.12
date	2002.04.25.15.20.54;	author srevill;	state Exp;
branches;
next	4.11;

4.11
date	2000.09.08.15.35.40;	author mjrobert;	state Exp;
branches;
next	4.10;

4.10
date	2000.03.16.16.50.19;	author kbracey;	state Exp;
branches;
next	4.9;

4.9
date	2000.03.15.15.38.02;	author kbracey;	state Exp;
branches;
next	4.8;

4.8
date	2000.03.07.10.44.54;	author kbracey;	state Exp;
branches;
next	4.7;

4.7
date	99.07.05.18.11.17;	author dcotton;	state Exp;
branches;
next	4.6;

4.6
date	99.04.08.10.04.34;	author dcotton;	state Exp;
branches;
next	4.5;

4.5
date	98.12.01.12.03.20;	author jfarrell;	state Exp;
branches;
next	4.4;

4.4
date	98.11.24.16.26.07;	author jfarrell;	state Exp;
branches;
next	4.3;

4.3
date	98.11.24.10.51.44;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	98.11.23.19.44.51;	author smiddle;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.13.41.12;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.13.41.12;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.22.15.59;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.04.22.15.26.50;	author askelton;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.06.25.10.30.05;	author askelton;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	97.06.26.17.24.48;	author askelton;	state Exp;
branches;
next	;


desc
@@


4.18
log
@Fix failure to make large time jumps when delagating
NetTime intercepts OS_Word 15, but when calling RTC_Adjust was not disabling that interception, so the time got set twice, ending up back at a copy of the (incorrect) soft clock.

Version 0.43. Tagged as 'NetTime-0_43'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "swis.h"
#include "debug.h"

/* Event stuff */
#define Event_Disable		13	/* OS_Byte reason code */
#define Event_Enable		14	/* OS_Byte reason code */
typedef enum { Async=1, Urgent=2, Broken=3, RarpReply=4 } internet_event_t;

/* PPP module */
#define PPP_DCIVersion		0x4b600

/* Dialler */
#define Dialler_Dial		0x4c6c0
#define Dialler_HangUp		0x4c6c1
#define Dialler_Status		0x4c6c2
#define Dialler_Answering	0x4c6c3
#define Dialler_Configure	0x4c6c4
typedef enum { Disconnected=1, Executing=2, ConnectedOut=4, HangingUp=8, Answering=0x10, ConnectedIn=0x20 } dialler_status_t;
#define CONNECTED(x)		(((x)&(ConnectedIn|ConnectedOut))!=0)

#ifdef USE_REGISTRY
/* Registry */
#define NCRegistry_EnumerateNetworkDrivers	0x4d380
#define NCRegistry_EnumerateSmartCardBlocks	0x4D381
#define NCRegistry_Enquiry			0x4D382
#define NCRegistry_LoadSmartCardBlock		0x4D383
#define NCRegistry_Status			0x4D384
#else
#define NCAccessManager_Enquiry			0x4F000
#define NCBootblock_EnumerateNetworkDrivers	0x4f380
#define NCBootblock_EnumerateSmartCardBlocks	0x4f381
#define NCBootblock_Enquiry			0x4f382
#define NCBootblock_Status			0x4f383
#define NCBootblock_Write			0x4f384
#define NCBootblock_Authenticate		0x4f385
#define NCBootblock_ChangeSmartcardCHV		0x4f386
#define NCBootblock_Proxy			0x4f387
#define NCBootblock_PinInfo			0x4f388
#define NCBootblock_UnblockCHV			0x4f389
#endif

#define NCRegistry_TimeServerTag		"TIME_PRIMARY"
/* Service_NCRegistry flags */
#define BB_STATUS_INSERTED	0x1	/* bootblock present */
#define BB_STATUS_SC_VALID	0x2	/* smartcard validated */
#define BB_STATUS_BB_VALID	0x4	/* smartcard boot block validated */
#define BB_STATUS_PIN		0x8	/* smartcard is PIN protected */
#define BB_STATUS_LOCKED	0x10	/* smartcard is currently locked */
#define BB_STATUS_WRITEOK	0x20	/* write to smartcard succeeded */
#define BB_STATUS_WRITEFAIL	0x40	/* write to smartcard failed */


/* Timers */
#define POLL_TIMER		(1*100)		/* 1 second */
#define RETRY_TIMER             (1*100)         /* 1 second (first retry - exponential backoff) */
#define SHORT_TIMER		(5*60*100)	/* 5 minutes*/
#define LONG_TIMER		(30*60*100)	/* 1/2 hr */

/* Environment variables */
#define ENV_TIME_SERVER  "NetTime$Server"
#define ENV_TIME_SERVER2 "Inet$TimeServer"
#define ENV_NTP_SERVER   "Inet$NTPServer"
#define ENV_RESOLVER     "Inet$Resolvers"
#define MAX_ENV_TIME_SERVER 64

/* Port numbers */
#define PORT_TIME 37
#define PORT_NTP 123

/* Placate the compiler */
#define UNUSED(k) (k)=(k);
struct riscos_time;

/*
 * State machine types
 */
typedef enum { Dormant, NoLink, Sleeping, Expecting, DNSWait } state_t;
typedef enum { NoTrans, Init, Die, PostInit, Response, Failure, Timer, LinkUp, LinkDown, RegistryChanged, DoDNS} transition_t;
typedef struct
{
  uint32_t       state;                 /* one of NetTime_Past|Current|Future */
  uint32_t       timeof_last_action;    /* cs ago */
  uint32_t       timeof_current_action; /* 0 */
  uint32_t       timeof_next_action;    /* future cs */
} nettime_state_t;

/*
 * Public functions
 */
extern void wordv_veneer(void);
void machine(transition_t transition);
_kernel_oserror *set_time(const struct riscos_time *);
void handle_dhcp(_kernel_swi_regs *);
void print_status(void);
void fill_status(nettime_state_t *);
void change_poll_period(int);
void setcallback(transition_t, void *);
void removecallback(transition_t, void *);
_kernel_oserror *module_set_time(const struct riscos_time *);
unsigned int get_t0_count(void);
unsigned int get_hal_t0_count(uint32_t, void *);

/*
 * Public variables
 */
extern int sockno;
extern void *privateword;
extern int we_are_setting;
extern int synchronised;
extern struct in_addr last_server;
extern int last_protocol;
extern int poll_period;
extern transition_t callback_reason;
@


4.17
log
@Remove DST CMOS fiddling code.
Shortly to be handled by TerritoryManager, but the DST fiddling in this module was already broken. Aside from only knowing about Europe and Australia, the Australia rules were wrong too (since they've been changed again).
dhcp.c: use names for timezone CMOS rather than magic numbers.
Rework read_os_var() to remove the 'read length when buff = NULL' which is never used, but also wouldn't have worked because the read length call to OS_ReadVarVal returns an error which is caught by the _swix() hence you always got -1.
Put resolver variable name into a define in the header file.

Version 0.39. Tagged as 'NetTime-0_39'
@
text
@d122 1
@


4.16
log
@Exports added.
SWI numbers and some bit fields for both C and assembler use.

Version 0.38. Tagged as 'NetTime-0_38'
@
text
@d74 1
a74 1
#define ENV_TIME_SERVER "NetTime$Server"
d76 2
a77 1
#define ENV_NTP_SERVER "Inet$NTPServer"
@


4.15
log
@Add SWI NetTime_States.
Makefile changed to use "CModule" fragment.
Soak up some compiler warnings.
Extralong functions removed.
Use central header files in preference to local defines.
A failure to register resources no longer leaves EventV and WordV claimed.

Version 0.37. Tagged as 'NetTime-0_37'
@
text
@d94 1
a94 12
  enum
  {
    state_unknown = 0,
    state_sync_via_sntp = 1,            /* b0-7 past */
    state_sync_via_time,                
    state_sync_failed,                  
    state_asleep = 0x100,               /* b8-15 current */
    state_prerequisites_missing,
    state_busy,                         
    state_retry = 0x10000,              /* b16-23 future */
    state_periodic_sync
  }              state;
@


4.14
log
@* Added support for non-IOMD, HAL-based platforms.
* Improved *NetTime_PollInterval to make sure next poll happens at
  the expected time.
* On module init, no longer sets the time from the NVRAM if the current
  time seems sensible (ie >= 2003ish).
* Sets the time NVRAM on shutdown (was only on packet reception).

Version 0.32. Tagged as 'NetTime-0_32'
@
text
@a14 1
#include <stdio.h>
a15 2

#include <stdlib.h>
a17 14
#ifdef DEBUGLIB
#  pragma continue_after_hash_error
#  error  Building debug version !
#endif


/* Swis */
#define SWI_NetTime_Status      0       /* NetTime_Status SWI */


/* Vectors */
#define WordV                   7
#define EventV			16

a20 1
#define Internet_Event		19
a22 6
/* TinyStubs */
#define TinySupport_Init        0x82c40
#define TinySupport_Die         0x82c41
#define TinySupport_Init2       0x82c42
#define TinySupport_Share       0x82c43

d83 4
d90 1
a90 1
typedef enum { Dormant, NoLink, Sleeping, Expecting, DNSWait} state_t;
d92 18
a109 2

struct riscos_time;
a113 1
extern void mul64(uint32_t a1, uint32_t a2, uint64_t *result);
d119 1
a119 1
void removecallback(transition_t reason, void *pw);
d121 3
d125 1
a125 1
unsigned int get_hal_t0_count(uint32_t hal_sb, void * hal_fn_ptr);
d136 1
@


4.13
log
@  Fixed to build with the latest cc (5.54) compiler.
Detail:
  This version now builds with cc-5_45. Note: it has not been verified as
  actually functioning correctly.
Admin:
  Tested in DSL Baseline build.

Version 0.31. Tagged as 'NetTime-0_31'
@
text
@d127 1
@


4.12
log
@  * Fixed all of the !Mk... files.
  * Now builds with the latest TCPIPLibs.
Detail:
  * All of the !Mk... files are required to pass TARGET into the makefile.
  * The new TCPIPLibs use the standard types.h from RISC_OSLib if it is
    available. This defines u_int32 types using int rather than long, which
    TCPIPLibs uses. Thus, NetTime needed a little tweaking to adjust for
    this change.
Admin:
  Builds.
  Requires TCPIPLibs-5_42 or later.

Version 0.30. Tagged as 'NetTime-0_30'
@
text
@d118 1
a118 1
extern void mul64(u_int32_t a1, u_int32_t a2, u_int64_t *result);
@


4.11
log
@Added NetTime_Status SWI

Version 0.28. Tagged as 'NetTime-0_28'
@
text
@d118 1
a118 1
extern void mul64(u_int32_t a1, u_int32_t a2, u_int32_t *result);
@


4.10
log
@Precision of internal arithmetic and clock reading improved. Now possible
to maintain time to within a couple of milliseconds (given frequent enough
polling).

Version 0.22. Tagged as 'NetTime-0_22'
@
text
@d27 4
@


4.9
log
@Can now change the poll interval via a *Command.
If the time server came from NetTime$Server or NCMA, both NTP and Time/UDP
will be tried.
Maximum adjustment rate limited to +/-1%, rather than 10%.

Version 0.21. Tagged as 'NetTime-0_21'
@
text
@d115 1
d122 1
@


4.8
log
@  Added support for NTP, gradual time adjustment, configurable DST,
  and DHCP timezone.

Detail:
  If Inet$NTPServer is set, NetTime will use NTP (unicast SNTP, as per RFC2030).
  Otherwise it will use the UDP time protocol (it used to use TCP).

  NetTime will use the RTCAdjust algorithms to adjust the centisecond clock
  rate by +/-10% to get in step with the time server. By polling every 30
  minutes on a LAN, time will not deviate by more than 0.1 seconds once
  synchronised. It interoperates with RTCAdjust and the hardware RTC to ensure
  correct operation on a machine with RTC.

  NetTime has returned to polling every 30 minutes. This may defeat PPP
  timeouts - a suggested fix is to change PPP to only have TCP traffic keep the
  link up, or to have a separate user inactivity timeout (like Lazarus).

  The system variable NetTime$DST controls DST behaviour. Set to "European"
  (the default) to use European rules. Set it to something like
  "03-May-2000.01:00:00; 14-Sep-2000.01:00:00" to specify this year's start
  and end dates (in UTC). Set to "No" to make it leave DST alone.

  If a DHCP reply arrives while NetTime is loaded, it will check for the time
  offset option - if present, the timezone will be configured.

  New command *NetTime_Status gives information about the clock adjustments.

  NetTime attempts to start operation immediately on a non-dialup machine -
  removes the need for a *NetTime_Kick after softloading. *NetTime_Kick will
  still be required after, say, setting Inet$NTPServer manually.

Admin:
  Tested on desktop systems and STBs. NTP operation on an NC will require a
  way of finding out an NTP server - possibly redefining TIME_SERVER smartcard
  tag to be NTP? Anycast operation may also be worth adding.

Version 0.20. Tagged as 'NetTime-0_20'
@
text
@d90 1
a90 1
#define SHORT_TIMER		(15*60*100)	/* 15 minutes*/
d93 1
a93 1
/* Environment Variable */
d99 4
d120 1
d128 3
@


4.7
log
@ 	NetTime now looks at the Inet$TimeServer system variable before
looking at the NetTime$Server variable or the smartcard.
 	This fixes a bug where the server was not getting set if there was
not a time server on the smartcard (or it was present but was not a valid
DNS) as the Inet$TimeServer was not being looked at.

Detail:
 	When attempting to locate a server to gain the time from, it now does
it on the following order:
 	* Checks the Inet$TimeServer system variable first;
 	* If not present, checks the NetTime$Server system variable;
 	* If not present, finally attmepts to get the server off the
smartcard.

Admin:
 	Tested as a softload on an ethernet Customer M box.

Version 0.16. Tagged as 'NetTime-0_16'
@
text
@d27 3
a29 2
/* Service calls */
#define Service_PostInit	0x73
a31 1
#define EventV			16
a46 1
#define Service_Dialler		0xb4
d77 1
a77 1
#define Service_NCRegistry	0xba
d89 1
d96 1
d105 2
d110 1
a110 1
extern void mul64(int a1, int a2, int *result);
d112 4
d122 1
@


4.6
log
@Added a header file, debug.h, that is used to redefine some debuglib macros
if a non-debug build is being built. This is to allow the module to be built
on machines where debuglib is not present.

Validated by building both the old (v0.12) and new versions and ensuring that
the non-debug versions were identical. Also checked that the debug version
still built.

Version 0.13. Tagged as 'NetTime-0_13'
@
text
@d95 1
@


4.5
log
@Make DNS lookup non-blocking:
  New state (DNSWait) and internal transition (DoDNS) added.
  Machine now support internal transitions, and DoDNS is injected by
  transitions that previously called tryconnect() to start lookup.
  State DNSWait polls resolver every second while it returns EINPROGRESS.
  Resolver interface (dns.c) taken from Acorn FTP fetcher.

Version 0.09. Tagged as 'NetTime-0_09'
@
text
@d19 1
a19 1
#include "DebugLib/DebugLib.h"
@


4.4
log
@Convert to using DebugLib for debug output.

Version 0.07. Tagged as 'NetTime-0_07'
@
text
@d18 1
d89 2
a90 1
#define SHORT_TIMER		(15*60*100)	/* 15 mins */
d100 2
a101 2
typedef enum { Dormant, NoLink, Sleeping, Expecting } state_t;
typedef enum { Init, Die, PostInit, Response, Failure, Timer, LinkUp, LinkDown, RegistryChanged } transition_t;
@


4.3
log
@Code clean-up.

Version 0.05. Tagged as 'NetTime-0_05'
@
text
@d18 3
a20 2
#ifdef DEBUG
#  define DEBUGFN(x)	x
a22 2
#else
#  define DEBUGFN(x)
@


4.2
log
@Moved module to trunk and srccommitted. No code changes other
than removing some warnings.

Version 0.04. Tagged as 'NetTime-0_04'
@
text
@a106 3
extern int module_timerentry(_kernel_swi_regs *r, void *pw);
extern int module_evententry(_kernel_swi_regs *r, void *pw);
extern int module_callentry(_kernel_swi_regs *r, void *pw);
@


4.1
log
@Initial revision
@
text
@d56 1
d63 14
d89 1
a89 1
#define SHORT_TIMER		(5*60*100)	/* 5 mins */
d91 4
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Altered NetTime to use NCAccessManager and NCBootblock instead of NCRegistry
@
text
@a55 1
#ifdef USE_REGISTRY
a61 14
#else
#define NCAccessManager_Enquiry			0x4F000
#define NCBootblock_EnumerateNetworkDrivers	0x4f380
#define NCBootblock_EnumerateSmartCardBlocks	0x4f381
#define NCBootblock_Enquiry			0x4f382
#define NCBootblock_Status			0x4f383
#define NCBootblock_Write			0x4f384
#define NCBootblock_Authenticate		0x4f385
#define NCBootblock_ChangeSmartcardCHV		0x4f386
#define NCBootblock_Proxy			0x4f387
#define NCBootblock_PinInfo			0x4f388
#define NCBootblock_UnblockCHV			0x4f389
#endif

@


4.1.7.3
log
@Modified to overcome some shortcomings in the downright shoddy NVRAM
interface.

Changed the timeouts so that the line gets a chance to drop now and again.
@
text
@d89 1
a89 1
#define SHORT_TIMER		(15*60*100)	/* 15 mins */
@


4.1.7.4
log
@Fixed some stuff. Added some stuff. Moved some other stuff about a bit.
But I didn't remove any stuff.
@
text
@a91 4
/* Environment Variable */
#define ENV_TIME_SERVER "NetTime$Server"
#define MAX_ENV_TIME_SERVER 64

@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
