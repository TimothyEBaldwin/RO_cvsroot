head	4.2;
access;
symbols
	NetTime-0_43:4.2
	NetTime-0_42:4.2
	NetTime-0_41:4.2
	NetTime-0_40:4.2
	NetTime-0_39:4.2
	NetTime-0_38:4.2
	NetTime-0_37:4.2
	NetTime-0_36:4.2
	NetTime-0_35:4.2
	NetTime-0_34:4.2
	NetTime-0_33:4.2
	NetTime-0_32:4.2
	NetTime-0_31:4.2
	NetTime-0_30:4.2
	NetTime-0_29:4.2
	dellis_autobuild_BaseSW:4.2
	NetTime-0_28:4.2
	NetTime-0_26:4.2
	NetTime-0_25:4.2
	NetTime-0_24:4.2
	NetTime-0_23:4.2
	sbrodie_sedwards_16Mar2000:4.2
	NetTime-0_22:4.2
	NetTime-0_21:4.2
	NetTime-0_20:4.2
	dcotton_autobuild_BaseSW:4.2
	NetTime-0_16:4.2
	NetTime-0_15:4.2
	NetTime-0_14:4.2
	NetTime-0_13:4.2
	NetTime-0_12:4.1
	NetTime-0_11:4.1
	NetTime-0_10:4.1
	NetTime-0_09:4.1;
locks; strict;
comment	@# @;


4.2
date	99.04.08.10.04.32;	author dcotton;	state Exp;
branches;
next	4.1;

4.1
date	98.12.01.12.03.17;	author jfarrell;	state Exp;
branches;
next	;


desc
@DNS interface module from Acorn FTP fetcher
@


4.2
log
@Added a header file, debug.h, that is used to redefine some debuglib macros
if a non-debug build is being built. This is to allow the module to be built
on machines where debuglib is not present.

Validated by building both the old (v0.12) and new versions and ensuring that
the non-debug versions were identical. Also checked that the debug version
still built.

Version 0.13. Tagged as 'NetTime-0_13'
@
text
@/* Copyright 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generic (c.dns)
 *
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>
#include "sys/errno.h"
#include "stdio.h"
#include "swis.h"
#include <string.h>
#pragma no_warn_deprecated
#include "inetlib.h"
#include "socklib.h"
#pragma warn_deprecated
#include "sys/types.h"
#include "sys/socket.h"
#include "ctype.h"
#include "netinet/in.h"
#include "netdb.h"
#include "sys/ioctl.h"
#include "sys/types.h"
#include "sys/time.h"
#include "sys/ioctl.h"
#include "arpa/inet.h"

#include "dns.h"

#include "debug.h"

#ifdef TML
  #include "svcprint.h"
#endif

#define Resolver_GetHostByName	(0x46000)
#define Resolver_GetHost	(0x46001)


/* This source file can be used totally independently of any specific protocol module.
 * All it exports is a function for polling a DNS lookup which should be called during
 * a state machine dispatch function from the main ReadData protocol SWI.
 */

 /* It relies on the Resolver 0.48 or later module being loaded and present.  The Acorn
  * browser will ensure that this is the case, but for safety's sake, we'll check
  * that resolver is present.
  */

static int resolver_present = -1;

static int dns_resolver_46001_present(void)
{
	char buffer[40];
	_kernel_oserror *e;

	e = _swix(OS_SWINumberToString, _IN(0)|_IN(1)|_IN(2),
		Resolver_GetHost, buffer, sizeof(buffer));

	return (!e && strncmp(buffer, "Resolver_GetHost", sizeof("Resolver_GetHost")) == 0);
}


/* Convert name or ip number string to an in_addr */
static int get_host_address(const char *name, struct in_addr *addr)
{
	struct hostent *h;

	if ((h = gethostbyname(name)) != NULL) {
		*addr = **((struct in_addr **)h->h_addr_list);
		dprintf(("dns", "Resolve succeeded (gethostbyname) `%s' --> %s\n",
			name, inet_ntoa(*addr)));
		return 0;
	}

	return ENOENT;
}


/* Lookup the IP address of a remote host.  The return parameter is errno.
 * The "sin" parameter will be updated with IP address of the remote host
 * This is only valid if the return value was zero
 */
int dns_find_ip_address(const char *hostname, struct in_addr *ip)
{
	_kernel_oserror *e;
	int errno;  /* <-- we are preserving the global errno */
	struct hostent *h;

	dprintf(("", "Looking up host `%s'\n", hostname));

	if (inet_aton(hostname, ip)) {
		/* We were supplied with a dotted-quad address */
		dprintf(("", "Dotted-quad address supplied: %s\n", hostname));
		return 0;
	}

	if (resolver_present == -1) {
		resolver_present = dns_resolver_46001_present();
		dprintf(("", "Acorn DNS Resolver presence check: %s\n",
			resolver_present ? "Yes" : "No!!!"));
	}

	if (!resolver_present) {
		return get_host_address(hostname, ip);
	}
	else {
		e = _swix(Resolver_GetHost, _IN(0) | _OUT(0) | _OUT(1), hostname, &errno, &h);
		dprintf(("", "e=%p; R0 was %d (dec); R1 was %p\n", e, errno, h));
	}

	if (e || errno<0) return ENOENT;
	if (errno == EINPROGRESS || h == NULL) return errno;

	/* To get here, we got a valid hostent */
	*ip = **((struct in_addr **)h->h_addr_list);
	dprintf(("", "Resolve succeeded: `%s' --> `%s'\n", hostname, inet_ntoa(*ip)));
	return 0;
}
@


4.1
log
@Make DNS lookup non-blocking:
  New state (DNSWait) and internal transition (DoDNS) added.
  Machine now support internal transitions, and DoDNS is injected by
  transitions that previously called tryconnect() to start lookup.
  State DNSWait polls resolver every second while it returns EINPROGRESS.
  Resolver interface (dns.c) taken from Acorn FTP fetcher.

Version 0.09. Tagged as 'NetTime-0_09'
@
text
@d50 1
a50 1
#include "DebugLib/DebugLib.h"
@
