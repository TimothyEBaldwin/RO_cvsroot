head	4.3;
access;
symbols
	NetTime-0_38:4.2
	NetTime-0_37:4.2
	NetTime-0_36:4.2
	NetTime-0_35:4.2
	NetTime-0_34:4.2
	NetTime-0_33:4.2
	NetTime-0_32:4.2
	NetTime-0_31:4.2
	NetTime-0_30:4.2
	NetTime-0_29:4.2
	dellis_autobuild_BaseSW:4.2
	NetTime-0_28:4.2
	NetTime-0_26:4.2
	NetTime-0_25:4.2
	NetTime-0_24:4.2
	NetTime-0_23:4.2
	sbrodie_sedwards_16Mar2000:4.2
	NetTime-0_22:4.2
	NetTime-0_21:4.2
	NetTime-0_20:4.2
	dcotton_autobuild_BaseSW:4.2
	NetTime-0_16:4.1
	NetTime-0_15:4.1
	NetTime-0_14:4.1
	NetTime-0_13:4.1
	NetTime-0_12:4.1
	NetTime-0_11:4.1;
locks; strict;
comment	@# @;


4.3
date	2012.02.25.08.18.16;	author rsprowson;	state dead;
branches;
next	4.2;
commitid	7cQZQe1cYi4cUvUv;

4.2
date	2000.03.07.10.44.48;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	99.01.13.19.12.17;	author jfarrell;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Remove DST CMOS fiddling code.
Shortly to be handled by TerritoryManager, but the DST fiddling in this module was already broken. Aside from only knowing about Europe and Australia, the Australia rules were wrong too (since they've been changed again).
dhcp.c: use names for timezone CMOS rather than magic numbers.
Rework read_os_var() to remove the 'read length when buff = NULL' which is never used, but also wouldn't have worked because the read length call to OS_ReadVarVal returns an error which is caught by the _swix() hence you always got -1.
Put resolver variable name into a define in the header file.

Version 0.39. Tagged as 'NetTime-0_39'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*  Copyright (c) Element 14 Ltd. 1999
 *
 *  edst.c - European Daylight Savings Time
 *
 *  Routines to determine whether a date is during Daylight Savings Time in
 *  Europe for the years 1998-2001 in accordance with the Eighth Directive
 *  97/44/EC of the European Parliament and the Council of the European Union.
 *
 *  This directive states that in 1998, 1999, 2000 and 2001, DST starts at
 *  01:00 GMT on the last Sunday in March, and ends at 01:00 GMT on the last
 *  Sunday in October.  A new directive will be adopted before 1 January 2001
 *  to cover arrangements from 2002 onwards.  A software upgrade will be
 *  required if the new directive does not apply the same rule.
 *
 *  History:
 *
 *  12-Jan-1999 jmf - Created.
 */

#include <sys/types.h>

#include "nettime.h"
#include "edst.h"

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif



typedef struct utc_ordinals
{
    int	    csecs;	/* centiseconds past second (0-99) */
    int	    secs;	/* seconds past minute (0-59) */
    int	    mins;	/* minutes past hour (0-59) */
    int	    hour;	/* hours past midnight (0-23) */
    int	    mday;	/* day in month (1-31) */
    int	    month;	/* month in year (1-12) */
    int	    year;	/* year */
    int	    wday;	/* day of week (1-7, 1=Sunday) */
    int	    yday;	/* day of year (1-366) */
} UTCOrdinals;

static int clock2utc (const struct riscos_time *clock, UTCOrdinals *utc);


/*  Check whether Daylight Savings is in force in Europe at the time
 *  represented by the RISCOS 5 byte UTC Time 'clock' (PRM 1-401).
 *
 *  This assumes that DST starts at 01:00 UTC on the last Sunday in March,
 *  and ends at 01:00 UTC on the last Sunday in October.  This is correct
 *  for Europe for the years 1998-2001.
 */
int edst_isdst (const struct riscos_time *clock)
{
    int isdst;
    UTCOrdinals utc;

    if (! clock2utc(clock, &utc))
        return FALSE;

    switch (utc.month)
    {
        case 11: case 12: case 1: case 2:
            /* DST is NOT in force for all of November through February */
            isdst = FALSE;
            break;

        case 4: case 5: case 6: case 7: case 8: case 9:
	    /* DST is in force for all of April through September */
            isdst = TRUE;
	    break;

	case 3:
	    /* In March, DST is in force on and after 01:00 on the last Sunday */
	    if (utc.mday + (7 - utc.wday) >= 31)
	        isdst = ((utc.wday == 1) && (utc.hour < 1)) ? FALSE : TRUE;
	    else
	        isdst = FALSE;
	    break;

        case 10:
	    /* In October, DST is in force before 01:00 on the last Sunday */
	    if (utc.mday + (7 - utc.wday) >= 31)
	        isdst = ((utc.wday == 1) && (utc.hour < 1)) ? TRUE : FALSE;
	    else
	        isdst = TRUE;
	    break;

        default:
	    dprintf(("", "Bad month %d\n", utc.month));
            isdst = FALSE;
	    break;
    }

    dprintf(("", "isdst -> %d\n", isdst));

    return isdst;
}

static int clock2utc (const struct riscos_time *clock, UTCOrdinals *utc)
{
    _kernel_swi_regs r;

    r.r[1] = (int) clock;
    r.r[2] = (int) utc;

    if (_kernel_swi(Territory_ConvertTimeToUTCOrdinals, &r, &r) != NULL)
    {
        dprintf(("", "Territory_ConvertTimeToUTCOrdinals failed\n"));
        return FALSE;
    }

    dprintf(("", "clock2utc -> %1dday, %02d/%02d/%04d %02d:%02d:%02d.%02d\n",
    	utc->wday,
        utc->mday, utc->month, utc->year,
        utc->hour, utc->mins, utc->secs, utc->csecs));

    return TRUE;
}

@


4.2
log
@  Added support for NTP, gradual time adjustment, configurable DST,
  and DHCP timezone.

Detail:
  If Inet$NTPServer is set, NetTime will use NTP (unicast SNTP, as per RFC2030).
  Otherwise it will use the UDP time protocol (it used to use TCP).

  NetTime will use the RTCAdjust algorithms to adjust the centisecond clock
  rate by +/-10% to get in step with the time server. By polling every 30
  minutes on a LAN, time will not deviate by more than 0.1 seconds once
  synchronised. It interoperates with RTCAdjust and the hardware RTC to ensure
  correct operation on a machine with RTC.

  NetTime has returned to polling every 30 minutes. This may defeat PPP
  timeouts - a suggested fix is to change PPP to only have TCP traffic keep the
  link up, or to have a separate user inactivity timeout (like Lazarus).

  The system variable NetTime$DST controls DST behaviour. Set to "European"
  (the default) to use European rules. Set it to something like
  "03-May-2000.01:00:00; 14-Sep-2000.01:00:00" to specify this year's start
  and end dates (in UTC). Set to "No" to make it leave DST alone.

  If a DHCP reply arrives while NetTime is loaded, it will check for the time
  offset option - if present, the timezone will be configured.

  New command *NetTime_Status gives information about the clock adjustments.

  NetTime attempts to start operation immediately on a non-dialup machine -
  removes the need for a *NetTime_Kick after softloading. *NetTime_Kick will
  still be required after, say, setting Inet$NTPServer manually.

Admin:
  Tested on desktop systems and STBs. NTP operation on an NC will require a
  way of finding out an NTP server - possibly redefining TIME_SERVER smartcard
  tag to be NTP? Anycast operation may also be worth adding.

Version 0.20. Tagged as 'NetTime-0_20'
@
text
@@


4.1
log
@Automatically switch into and out of Daylight Savings for Europe in
1998-2001, if EUROPEAN_DST_BODGE is defined.

Version 0.11. Tagged as 'NetTime-0_11'
@
text
@d20 1
a20 1
 *  Europe for the years 1998-2001 in accordance with the Eighth Directive 
d26 2
a27 2
 *  to cover arrangements from 2002 onwards.  A software upgrade will be 
 *  required if the new directive does not apply the same rule. 
d34 2
d47 1
a47 2
#ifdef EUROPEAN_DST_BODGE
 
d62 1
a62 1
static int clock2utc (const char *clock, UTCOrdinals *utc);
d71 2
a72 2
 */ 
int edst_isdst (const char *clock)
d76 1
a76 1
    
d79 1
a79 1
    
d86 1
a86 1
            
d91 1
a91 1
	    
d99 1
a99 1
    	    
d105 1
a105 1
	        isdst = TRUE;   
d107 2
a108 2
	         
        default:        
d115 1
a115 1
    
d119 1
a119 1
static int clock2utc (const char *clock, UTCOrdinals *utc)
d122 1
a122 1
    
d125 1
a125 1
    
d132 2
a133 2
    dprintf(("", "clock2utc -> %1dday, %02d/%02d/%04d %02d:%02d:%02d.%02d\n", 
    	utc->wday, 
a139 5
#else

static int dummy; /* to supress empty translation unit error */

#endif /* EUROPEAN_DST_BODGE */
@

