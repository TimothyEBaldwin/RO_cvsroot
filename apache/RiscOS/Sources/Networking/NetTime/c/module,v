head	4.20;
access;
symbols
	NetTime-0_43:4.20
	NetTime-0_42:4.19
	NetTime-0_41:4.19
	NetTime-0_40:4.19
	NetTime-0_39:4.19
	NetTime-0_38:4.18
	NetTime-0_37:4.18
	NetTime-0_36:4.17
	NetTime-0_35:4.16
	NetTime-0_34:4.16
	NetTime-0_33:4.16
	NetTime-0_32:4.16
	NetTime-0_31:4.15
	NetTime-0_30:4.14
	NetTime-0_29:4.13
	dellis_autobuild_BaseSW:4.13
	NetTime-0_28:4.13
	NetTime-0_26:4.12
	NetTime-0_25:4.11
	NetTime-0_24:4.10
	NetTime-0_23:4.10
	sbrodie_sedwards_16Mar2000:4.9
	NetTime-0_22:4.10
	NetTime-0_21:4.9
	NetTime-0_20:4.8
	dcotton_autobuild_BaseSW:4.13
	NetTime-0_16:4.7
	NetTime-0_15:4.6
	NetTime-0_14:4.6
	NetTime-0_13:4.6
	NetTime-0_12:4.6
	NetTime-0_11:4.6
	NetTime-0_10:4.6
	NetTime-0_09:4.6
	NetTime-0_08:4.5
	NetTime-0_07:4.5
	NetTime-0_06:4.4
	NetTime-0_05:4.3
	NetTime-0_04:4.2
	afrost_NC2_Generic:4.1.7.4
	Spinner_RCA116:4.1.7.4
	Spinner_B20_2:4.1.7.4
	Spinner_19_3:4.1.7.4
	Spinner_B18:4.1.7.4
	Spinner_B17:4.1.7.4
	Spinner_B15:4.1.7.4
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.4
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.20
date	2013.11.28.21.44.21;	author rsprowson;	state Exp;
branches;
next	4.19;
commitid	rSY16SsDgYrjJ5fx;

4.19
date	2012.02.25.08.45.56;	author rsprowson;	state Exp;
branches;
next	4.18;
commitid	MNSXKB2FVvJD3wUv;

4.18
date	2012.02.04.22.08.39;	author rsprowson;	state Exp;
branches;
next	4.17;
commitid	W0erdTttgEwVaTRv;

4.17
date	2005.01.17.22.50.51;	author jballance;	state Exp;
branches;
next	4.16;

4.16
date	2004.05.19.18.21.24;	author kbracey;	state Exp;
branches;
next	4.15;

4.15
date	2002.07.23.12.39.02;	author srevill;	state Exp;
branches;
next	4.14;

4.14
date	2002.04.25.15.20.53;	author srevill;	state Exp;
branches;
next	4.13;

4.13
date	2000.09.08.15.35.40;	author mjrobert;	state Exp;
branches;
next	4.12;

4.12
date	2000.09.06.13.40.26;	author dcotton;	state Exp;
branches;
next	4.11;

4.11
date	2000.08.01.10.27.43;	author jfletche;	state Exp;
branches;
next	4.10;

4.10
date	2000.03.16.16.50.17;	author kbracey;	state Exp;
branches;
next	4.9;

4.9
date	2000.03.15.15.38.01;	author kbracey;	state Exp;
branches;
next	4.8;

4.8
date	2000.03.07.10.44.49;	author kbracey;	state Exp;
branches;
next	4.7;

4.7
date	99.07.05.18.11.16;	author dcotton;	state Exp;
branches;
next	4.6;

4.6
date	98.12.01.12.03.18;	author jfarrell;	state Exp;
branches;
next	4.5;

4.5
date	98.11.24.16.26.06;	author jfarrell;	state Exp;
branches;
next	4.4;

4.4
date	98.11.24.13.15.34;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	98.11.24.10.51.41;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	98.11.23.19.44.48;	author smiddle;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.13.41.12;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.13.41.12;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.22.15.57;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.05.30.13.08.13;	author askelton;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.06.26.10.37.33;	author askelton;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	97.06.26.17.24.06;	author askelton;	state Exp;
branches;
next	;


desc
@@


4.20
log
@Fix failure to make large time jumps when delagating
NetTime intercepts OS_Word 15, but when calling RTC_Adjust was not disabling that interception, so the time got set twice, ending up back at a copy of the (incorrect) soft clock.

Version 0.43. Tagged as 'NetTime-0_43'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <string.h>
#include <sys/types.h>

#include <Global/Services.h>
#include <Global/Countries.h>
#include <Global/RISCOS.h>

#include "nettime.h"
#include "nt_nvram.h"
#include "header.h"
#include "rtcadjust.h"
#include "ntp.h"

static _kernel_oserror *err;
static int grabbed_event;

int we_are_setting;
void *privateword;
#ifdef STANDALONE
extern void *resource_files(void);
#endif

_kernel_oserror *module_init(const char *cmd_tail, int podule, void *pw)
{
  uint32_t time;
  struct riscos_time ltime = { 0 };

  /* Initialise DebugLib (if DEBUGLIB defined) */
  debug_initialise("NetTime", "NFS::NFSBoot.$.NetTimeLog", "");
  //debug_initialise_trace(FILE_OUTPUT, "");
  debug_atexit();
  debug_output_device(PRINTF_OUTPUT);
  debug_set_screen_cornering(0);

  privateword = pw;

  /* Enable and claim internet event */
  if (!grabbed_event)
  {
    if ((err = _swix(OS_Claim, _INR(0,2), EventV, module_evententry, pw)) != NULL)
      return err;

    if ((err = _swix(OS_Byte, _INR(0,1), Event_Enable, Event_Internet)) != NULL)
      goto getoffvector;

    grabbed_event = 1;
  }

  if ((err = _swix(OS_Claim, _INR(0,2), WordV, wordv_veneer, pw)) != NULL)
    goto getoffvector;

  if (current_time().cs < 0x4C00000000) /* Jun 2003, ish */
  {
      /* Time <= 2003, so duff */
      time = nvram_gettime(); /* get last stored time in seconds, host byte order */

      if (time)
      {
        ltime.cs = time * UINT64_C(100);
        if ((time & 0x80000000) == 0) ltime.cs += 0x100000000 * UINT64_C(100);

        module_set_time(&ltime);
      }
  }

  rtcadjust_init();

  machine(Init);

#ifdef STANDALONE
  if ((err = _swix(ResourceFS_RegisterFiles, _IN (0), resource_files())) != NULL)
    goto getoffvector;
#endif

  UNUSED(podule);
  UNUSED(cmd_tail);
  return NULL;

getoffvector:
  /* Here for fatal errors during initialisation */
  _swix(OS_Release, _INR(0,2), EventV, module_evententry, pw);
  _swix(OS_Release, _INR(0,2), WordV, wordv_veneer, pw);
  return err;
}


_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
  machine(Die);

  rtcadjust_final(1);

  _swix(OS_RemoveTickerEvent, _INR(0,1), module_timerentry, pw);
  _swix(OS_RemoveCallBack, _INR(0,1), module_callentry, pw);

  _swix(OS_Release, _INR(0,2), WordV, wordv_veneer, pw);

  /* Disable and release internet event */
  _swix(OS_Byte, _INR(0,1), Event_Disable, Event_Internet);
  _swix(OS_Release, _INR(0,2), EventV, module_evententry, pw);
  grabbed_event = 0;
#ifdef STANDALONE
  _swix(ResourceFS_DeregisterFiles, _IN (0), resource_files());
#endif

  UNUSED(podule);
  UNUSED(fatal);
  return NULL;
}


void module_service(int service, _kernel_swi_regs *r, void *pw)
{
  switch (service)
  {
  case Service_PreReset:
  case Service_ShutDown:
    rtcadjust_fixup_hardware_rtc();
    return;

  case Service_PostInit:
    machine(PostInit);
    return;

  case Service_Dialler:
    machine(CONNECTED(r->r[2]) ? LinkUp : LinkDown);
    return;

  case Service_InternetStatus:
    handle_dhcp(r);
    return;

  case Service_NCRegistry:
    if ((r->r[5] & BB_STATUS_BB_VALID) ||	/* Network bootblock changed */
        (r->r[4] & BB_STATUS_BB_VALID))
      machine(RegistryChanged);
    return;

  case Service_ResourceFSStarting:
#ifdef STANDALONE
    (*(void (*) (void*,void*,void*,void*)) r->r[2])
          (resource_files(), 0, 0, (void*) r->r[3]);
#endif
    return;

  default:
    dprintf(("debug", "Bogus service call &%x\n", service));
  }
  
  UNUSED(pw);
}


_kernel_oserror *module_timerhandler(_kernel_swi_regs *r, void *pw)
{
  setcallback(Timer, pw);

  UNUSED(r);
  return NULL;
}


int module_eventhandler(_kernel_swi_regs *r, void *pw)
{
  /* Assumes only requested event in CMHG is Internet */
  if ((r->r[2] == sockno))	/* Pour moi? */
  {
    switch (r->r[1])
    {
    case Async:
      setcallback(Response, pw);
      return 0;	/* Claim */

    case Broken:
      setcallback(Failure, pw);
      return 0;	/* Claim */
    }
  }

  return 1;	/* Don't claim */
}


_kernel_oserror *module_callhandler(_kernel_swi_regs *r, void *pw)
{
  machine(callback_reason);
  
  UNUSED(r);
  UNUSED(pw);
  return NULL;
}

_kernel_oserror *module_set_time(const struct riscos_time *t)
{
    _kernel_oserror *e;

    we_are_setting = 1;
    e = _swix(Territory_SetTime, _IN(0), t);
    we_are_setting = 0;

    return e;
}


int module_osword15handler(_kernel_swi_regs *r, void *pw)
{
  if (!we_are_setting)
  {
      machine(Die);
      rtcadjust_final(0);
  }

  UNUSED(pw);
  UNUSED(r);
  return 1;
}


_kernel_oserror *module_cmd_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
    switch (cmd_no)
    {
      case CMD_NetTime_Kick:
        _swix(OS_RemoveTickerEvent, _INR(0,1), module_timerentry, pw);
        setcallback(LinkUp, pw);
        break;

      case CMD_NetTime_Status:
      {
        print_status();
        break;
      }

      case CMD_NetTime_PollInterval:
      {
        struct
        {
            unsigned char *param1;
            char buffer[12];
        } arg_buff;
        _kernel_oserror *e;
        int p;
        e = _swix(OS_ReadArgs, _INR(0,3), "/A/E", arg_string, &arg_buff, sizeof arg_buff);
        if (e) return e;
        if (arg_buff.param1[4]) arg_buff.param1[4] = 1; /* Prevent overflow */
        p = (arg_buff.param1[4] << 24) | (arg_buff.param1[3] << 16) | (arg_buff.param1[2] << 8) |
             arg_buff.param1[1];
        /* Clamp to between 5 seconds and 1 day */
        if (p != 0 && p < 5)
            p = 5;
        else if (p > 24*60*60)
            p = 24*60*60;

        p *= 100;
        change_poll_period(p);
        break;
      }
    }

    UNUSED(argc);
    return NULL;
}


_kernel_oserror *module_swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
    switch(swi_offset)
    {
      case NetTime_Status - NetTime_00:
        /* Hard to see what this is for, since the text can't easily be parsed */
        print_status();
        break;

      case NetTime_States - NetTime_00:
        /* Read the past, present, and future states */
        fill_status((nettime_state_t *)r);
        break;
    }

    UNUSED(pw);
    return NULL;
}
@


4.19
log
@No need to set a default value for Nettime$DST now.
Retagged.
@
text
@a28 1
static int we_are_setting;
d31 1
a206 1

@


4.18
log
@Add SWI NetTime_States.
Makefile changed to use "CModule" fragment.
Soak up some compiler warnings.
Extralong functions removed.
Use central header files in preference to local defines.
A failure to register resources no longer leaves EventV and WordV claimed.

Version 0.37. Tagged as 'NetTime-0_37'
@
text
@a40 23
  _kernel_swi_regs r;

  r.r[0] = (int) "NetTime$DST";
  r.r[2] = -1;
  r.r[3] = 0;
  r.r[4] = 0;
  _kernel_swi(OS_ReadVarVal, &r, &r);
  if (r.r[2] == 0)
  {
      int territory;
      const char *string = "European";
      if (_swix(Territory_Number, _OUT(0), &territory) != NULL)
        territory = TerritoryNum_UK; /* If we failed assume UK */

      switch (territory)
      {
        case TerritoryNum_Australia: /* Australia */
          string = "Australian";
          break;
      }

      _swix(OS_SetVarVal, _INR(0,4), "NetTime$DST", string, strlen(string), 0, 0);
  }
@


4.17
log
@        added compile in of messages file for StandAlone build
Detail:
Admin:  no other changes



Version 0.36. Tagged as 'NetTime-0_36'
@
text
@a18 1

d20 1
a21 1
#include "debug.h"
a28 3
static int grabbed_event = 0;
static transition_t callback_reason;
void *privateword;
d30 1
d32 1
d34 1
a34 1
extern void* resource_files (void);
a36 3
void setcallback(transition_t reason, void *pw);


d51 3
a53 3
      const char *string="European";
      if (_swix(Territory_Number, _OUT(0), &territory))
        territory=1; /* if we failed, assume UK territory */
d58 1
a58 1
          string="Australian";
d65 1
a65 2
  /* Initialise DebugLib (if DEBUGLIB defined)
   */
d67 1
a67 1
/*  debug_initialise_trace(FILE_OUTPUT, ""); */
d73 1
d77 1
a77 2
    if ((err = _swix(OS_Claim, _INR(0,2),
        EventV, module_evententry, pw)) != NULL)
d80 4
a83 6
    if ((err = _swix(OS_Byte, _INR(0,1), Event_Enable, Internet_Event)) != NULL)
    {
      _swix(OS_Release, _INR(0,2), EventV, module_evententry, pw);
      return err;
    };
    grabbed_event = -1;
d87 1
a87 4
  {
    _swix(OS_Release, _INR(0,2), EventV, module_evententry, pw);
    return err;
  }
d94 2
a95 1
      if (time) {
d98 2
a99 1
        set_time(&ltime);
d106 1
d108 2
a109 2
    err = _swix (ResourceFS_RegisterFiles, _IN (0), resource_files ());
    if (err != NULL) return err;
d111 3
d115 6
d136 1
a136 1
  _swix(OS_Byte, _INR(0,1), Event_Disable, Internet_Event);
d140 1
a140 1
    _swix (ResourceFS_DeregisterFiles, _IN (0), resource_files ());
d143 2
d178 2
a179 2
        (*(void (*) (void*,void*,void*,void*)) r->r[2])
            (resource_files (), 0, 0, (void*) r->r[3]);
d186 2
d194 2
d224 3
d230 13
d250 3
a255 11
void setcallback(transition_t reason, void *pw)
{
  callback_reason = reason;
  _swix(OS_AddCallBack, _INR(0,1), module_callentry, pw);
}

void removecallback(transition_t reason, void *pw)
{
  if (callback_reason == Timer)
     _swix(OS_RemoveCallBack, _INR(0,1), module_callentry, pw);
}
d297 2
d303 8
a310 3
// SWI Handler Function
_kernel_oserror *module_swi_handler(int swi_offset, _kernel_swi_regs *r,
                                                              void *pw)      {
d312 4
a315 9

  switch(swi_offset)
  {

    // NetTime_Status SWI
    case SWI_NetTime_Status:
    {
      print_status();
      break;
d318 2
a319 22
  }

// return success
return( (_kernel_oserror*)NULL );

}







_kernel_oserror *set_time(const struct riscos_time *t)
{
    _kernel_oserror *e;

    we_are_setting = 1;
    e = _swix(Territory_SetTime, _IN(0), t);
    we_are_setting = 0;

    return e;
@


4.16
log
@* Added support for non-IOMD, HAL-based platforms.
* Improved *NetTime_PollInterval to make sure next poll happens at
  the expected time.
* On module init, no longer sets the time from the NVRAM if the current
  time seems sensible (ie >= 2003ish).
* Sets the time NVRAM on shutdown (was only on packet reception).

Version 0.32. Tagged as 'NetTime-0_32'
@
text
@d35 4
d115 4
a118 1

d138 3
d173 7
@


4.15
log
@  Fixed to build with the latest cc (5.54) compiler.
Detail:
  This version now builds with cc-5_45. Note: it has not been verified as
  actually functioning correctly.
Admin:
  Tested in DSL Baseline build.

Version 0.31. Tagged as 'NetTime-0_31'
@
text
@d96 4
a99 1
  time = nvram_gettime(); /* get last stored time in seconds, host byte order */
d101 5
a105 4
  if (time) {
    ltime.cs = time * UINT64_C(100);
    if ((time & 0x80000000) == 0) ltime.cs += 0x100000000 * UINT64_C(100);
    set_time(&ltime);
d107 2
@


4.14
log
@  * Fixed all of the !Mk... files.
  * Now builds with the latest TCPIPLibs.
Detail:
  * All of the !Mk... files are required to pass TARGET into the makefile.
  * The new TCPIPLibs use the standard types.h from RISC_OSLib if it is
    available. This defines u_int32 types using int rather than long, which
    TCPIPLibs uses. Thus, NetTime needed a little tweaking to adjust for
    this change.
Admin:
  Builds.
  Requires TCPIPLibs-5_42 or later.

Version 0.30. Tagged as 'NetTime-0_30'
@
text
@a19 1
#include <DebugLib/DebugLib.h>
d22 1
d30 1
a30 1
static grabbed_event = 0;
d40 1
a40 2

  u_int32_t time;
d99 2
a100 2
    mul64(time, 100, (u_int64_t *)&ltime); /* convert to centiseconds */
    if ((time & 0x80000000) == 0) ltime.h += 100;
@


4.13
log
@Added NetTime_Status SWI

Version 0.28. Tagged as 'NetTime-0_28'
@
text
@d41 1
a41 1
  int time;
d100 1
a100 1
    mul64(time, 100, (u_int32_t *)&ltime); /* convert to centiseconds */
@


4.12
log
@	Now builds. Updated documentation.
Detail:
	Last checkin did not include the file adst.o in the makefile, meaning
that a routine was not being linked against.
	Updated the Functional Specification with the latest changes.
	c.module now uses the global countries header file to get Australia#s
territory number, rather than using the hard-coded value of 29.
Admin:
	Tested.

Version 0.26. Tagged as 'NetTime-0_26'
@
text
@d230 1
d233 1
d262 29
@


4.11
log
@  Added Australian Rules DST.
Detail:
  * If NetTime$DST is set to Australian, instead of European, the
    Australian rules for daylight saving time are applied.
Admin:
  * Tested, and appears to work as expected.
  * Included documentation from Australian legislature detailing the
    changes for DST, and the special case for 2000. Not really required
    for projects at present, but useful to be correct nonetheless.

Version 0.25. Tagged as 'NetTime-0_25'
@
text
@d21 1
d53 1
a53 1
      char *string="European";
d56 1
a56 1
      
d59 1
a59 1
        case 29: /* Australia */
d63 1
a63 1
      
@


4.10
log
@Precision of internal arithmetic and clock reading improved. Now possible
to maintain time to within a couple of milliseconds (given frequent enough
polling).

Version 0.22. Tagged as 'NetTime-0_22'
@
text
@d15 1
d50 15
a64 1
      _swix(OS_SetVarVal, _INR(0,4), "NetTime$DST", "European", 8, 0, 0);
@


4.9
log
@Can now change the poll interval via a *Command.
If the time server came from NetTime$Server or NCMA, both NTP and Time/UDP
will be tried.
Maximum adjustment rate limited to +/-1%, rather than 10%.

Version 0.21. Tagged as 'NetTime-0_21'
@
text
@d19 2
d56 2
a57 1
  debug_output_device(FILE_OUTPUT);
d75 1
a75 1
  if ((err = _swix(OS_Claim, _INR(0,2), WordV, module_wordentry, pw)) != NULL)
d104 1
a104 1
  _swix(OS_Release, _INR(0,2), WordV, module_wordentry, pw);
d182 1
a182 1
int module_wordhandler(_kernel_swi_regs *r, void *pw)
d184 1
a184 1
  if (r->r[0] == 15 && !we_are_setting)
@


4.8
log
@  Added support for NTP, gradual time adjustment, configurable DST,
  and DHCP timezone.

Detail:
  If Inet$NTPServer is set, NetTime will use NTP (unicast SNTP, as per RFC2030).
  Otherwise it will use the UDP time protocol (it used to use TCP).

  NetTime will use the RTCAdjust algorithms to adjust the centisecond clock
  rate by +/-10% to get in step with the time server. By polling every 30
  minutes on a LAN, time will not deviate by more than 0.1 seconds once
  synchronised. It interoperates with RTCAdjust and the hardware RTC to ensure
  correct operation on a machine with RTC.

  NetTime has returned to polling every 30 minutes. This may defeat PPP
  timeouts - a suggested fix is to change PPP to only have TCP traffic keep the
  link up, or to have a separate user inactivity timeout (like Lazarus).

  The system variable NetTime$DST controls DST behaviour. Set to "European"
  (the default) to use European rules. Set it to something like
  "03-May-2000.01:00:00; 14-Sep-2000.01:00:00" to specify this year's start
  and end dates (in UTC). Set to "No" to make it leave DST alone.

  If a DHCP reply arrives while NetTime is loaded, it will check for the time
  offset option - if present, the timezone will be configured.

  New command *NetTime_Status gives information about the clock adjustments.

  NetTime attempts to start operation immediately on a non-dialup machine -
  removes the need for a *NetTime_Kick after softloading. *NetTime_Kick will
  still be required after, say, setting Inet$NTPServer manually.

Admin:
  Tested on desktop systems and STBs. NTP operation on an NC will require a
  way of finding out an NTP server - possibly redefining TIME_SERVER smartcard
  tag to be NTP? Anycast operation may also be worth adding.

Version 0.20. Tagged as 'NetTime-0_20'
@
text
@d213 25
@


4.7
log
@ 	NetTime now looks at the Inet$TimeServer system variable before
looking at the NetTime$Server variable or the smartcard.
 	This fixes a bug where the server was not getting set if there was
not a time server on the smartcard (or it was present but was not a valid
DNS) as the Inet$TimeServer was not being looked at.

Detail:
 	When attempting to locate a server to gain the time from, it now does
it on the following order:
 	* Checks the Inet$TimeServer system variable first;
 	* If not present, checks the NetTime$Server system variable;
 	* If not present, finally attmepts to get the server off the
smartcard.

Admin:
 	Tested as a softload on an ethernet Customer M box.

Version 0.16. Tagged as 'NetTime-0_16'
@
text
@d15 4
d22 2
d25 1
a25 1
static _kernel_oserror *TinyError, *err;
d29 1
d38 2
a39 1
  char ltime[8];
d41 7
a47 2
  /* Try to use TinyStubs if possible. */
  TinyError = _swix( TinySupport_Share, _IN(0), pw );
d51 1
a51 1
  debug_initialise("NetTime", "izipfs:$.netlog", "");
d72 6
d81 3
a83 2
    mul64(time, 100, (int *)ltime); /* convert to centiseconds */
    _swix(Territory_SetTime, _IN(0), ltime); /* set time */
d96 6
a101 2
  if ( TinyError == NULL )
    _swix( TinySupport_Die, 0 );
d116 5
d129 4
d155 1
a155 1
  if ((r->r[1] != RarpReply) && (r->r[2] == sockno))	/* Pour moi? */
d161 1
a161 1
      break;
d165 1
a165 1
      break;
a166 2

    return 0;	/* Claim */
d179 9
d195 6
d203 11
a213 2
    _swix(OS_RemoveTickerEvent, _INR(0,1), module_timerentry, pw);
    setcallback(LinkUp, pw);
d215 11
@


4.6
log
@Make DNS lookup non-blocking:
  New state (DNSWait) and internal transition (DoDNS) added.
  Machine now support internal transitions, and DoDNS is injected by
  transitions that previously called tryconnect() to start lookup.
  State DNSWait polls resolver every second while it returns EINPROGRESS.
  Resolver interface (dns.c) taken from Acorn FTP fetcher.

Version 0.09. Tagged as 'NetTime-0_09'
@
text
@d38 1
a38 1
  debug_initialise("NetTime", "", "");
d40 1
a41 1
  debug_atexit();
@


4.5
log
@Convert to using DebugLib for debug output.

Version 0.07. Tagged as 'NetTime-0_07'
@
text
@d39 1
a39 1
  debug_initialise_trace(FILE_OUTPUT, "");
@


4.4
log
@Changed to use Link 5.08. Internationalised help.

Version 0.06. Tagged as 'NetTime-0_06'
@
text
@d36 7
a43 1

d107 1
a107 1
    DEBUGFN(printf("Bogus service call &%x\n", service));
@


4.3
log
@Code clean-up.

Version 0.05. Tagged as 'NetTime-0_05'
@
text
@d153 1
a153 2
    return((_kernel_oserror *)NULL);

@


4.2
log
@Moved module to trunk and srccommitted. No code changes other
than removing some warnings.

Version 0.04. Tagged as 'NetTime-0_04'
@
text
@d17 1
d27 1
a27 1
_kernel_oserror *module_init(char *cmd_tail, int podule, void *pw)
d41 1
a41 1
    if ((err = _swix(OS_Claim, _IN(0)|_IN(1)|_IN(2),
d45 1
a45 1
    if ((err = _swix(OS_Byte, _IN(0)|_IN(1), Event_Enable, Internet_Event)) != NULL)
d47 1
a47 1
      _swix(OS_Release, _IN(0)|_IN(1)|_IN(2), EventV, module_evententry, pw);
d74 2
a75 2
  _swix(OS_Byte, _IN(0)|_IN(1), Event_Disable, Internet_Event);
  _swix(OS_Release, _IN(0)|_IN(1)|_IN(2), EventV, module_evententry, pw);
d106 1
a106 1
int module_timerhandler(_kernel_swi_regs *r, void *pw)
d109 1
a109 1
  return -1;
d136 1
a136 1
int module_callhandler(_kernel_swi_regs *r, void *pw)
d139 1
a139 1
  return -1;
d146 1
a146 1
  _swix(OS_AddCallBack, _IN(0)|_IN(1), module_callentry, pw);
d149 1
a149 1
_kernel_oserror *module_cmd_handler(char *arg_string, int argc, int cmd_no, void *pw)
d151 1
a151 1
  _swix(OS_RemoveTickerEvent, _IN(0)|_IN(1), module_timerentry, pw);
@


4.1
log
@Initial revision
@
text
@d16 1
d27 5
a31 1
{    
d34 1
a34 1
  
d36 1
a36 1
  
d40 2
a41 2
    if (err = _swix(OS_Claim, _IN(0)|_IN(1)|_IN(2),
        EventV, module_evententry, pw))
d43 2
a44 2
      
    if (err = _swix(OS_Byte, _IN(0)|_IN(1), Event_Enable, Internet_Event))
d51 8
a58 1
  
d68 1
a68 1
  
d92 1
a92 1
    
d98 1
a98 1
    
d122 1
a122 1
      
d127 1
a127 1
    
d146 8
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Added support for the "SystemTime" NVRAM tag.
@
text
@a15 1
#include "nt_nvram.h"
d26 1
a26 5
{

  int time;
  char ltime[8];

d29 1
a29 1

d31 1
a31 1

d38 1
a38 1

d46 1
a46 5

  time = nvram_gettime(); /* get last stored time in seconds, host byte order */
  mul64(time, 100, (int *)ltime); /* convert to centiseconds */
  _swix(Territory_SetTime, _IN(0), ltime); /* set time */

d56 1
a56 1

d80 1
a80 1

d86 1
a86 1

d110 1
a110 1

d115 1
a115 1

@


4.1.7.3
log
@Fixed the amazing 'jumping into the future' bug.
@
text
@d53 2
a54 5

  if (time) {
    mul64(time, 100, (int *)ltime); /* convert to centiseconds */
    _swix(Territory_SetTime, _IN(0), ltime); /* set time */
  }
@


4.1.7.4
log
@Fixed some stuff. Added some stuff. Moved some other stuff about a bit.
But I didn't remove any stuff.
@
text
@a146 8

_kernel_oserror *module_cmd_handler(char *arg_string, int argc, int cmd_no, void *pw)
{
  _swix(OS_RemoveTickerEvent, _IN(0)|_IN(1), module_timerentry, pw);
    setcallback(LinkUp, pw);
    return((_kernel_oserror *)NULL);

}
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
