head	4.10;
access;
symbols
	NetTime-0_43:4.10
	NetTime-0_42:4.10
	NetTime-0_41:4.10
	NetTime-0_40:4.10
	NetTime-0_39:4.10
	NetTime-0_38:4.9
	NetTime-0_37:4.9
	NetTime-0_36:4.9
	NetTime-0_35:4.9
	NetTime-0_34:4.9
	NetTime-0_33:4.9
	NetTime-0_32:4.9
	NetTime-0_31:4.9
	NetTime-0_30:4.8
	NetTime-0_29:4.8
	dellis_autobuild_BaseSW:4.8
	NetTime-0_28:4.8
	NetTime-0_26:4.8
	NetTime-0_25:4.8
	NetTime-0_24:4.8
	NetTime-0_23:4.8
	sbrodie_sedwards_16Mar2000:4.8
	NetTime-0_22:4.8
	NetTime-0_21:4.8
	NetTime-0_20:4.8
	dcotton_autobuild_BaseSW:4.8
	NetTime-0_16:4.7
	NetTime-0_15:4.7
	NetTime-0_14:4.7
	NetTime-0_13:4.7
	NetTime-0_12:4.6
	NetTime-0_11:4.5
	NetTime-0_10:4.4
	NetTime-0_09:4.3
	NetTime-0_08:4.3
	NetTime-0_07:4.2
	NetTime-0_06:4.2
	NetTime-0_05:4.2
	NetTime-0_04:4.1
	Spin_merge:1.1.2.3
	afrost_NC2_Generic:1.1.2.3
	Spinner_RCA116:1.1.2.3
	Spinner_B20_2:1.1.2.3
	Spinner_19_3:1.1.2.3
	Spinner_B18:1.1.2.3
	Spinner_B17:1.1.2.3
	Spinner_B15:1.1.2.3
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


4.10
date	2012.02.25.08.18.16;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	7cQZQe1cYi4cUvUv;

4.9
date	2002.07.23.12.39.02;	author srevill;	state Exp;
branches;
next	4.8;

4.8
date	2000.03.07.10.44.50;	author kbracey;	state Exp;
branches;
next	4.7;

4.7
date	99.04.08.10.04.32;	author dcotton;	state Exp;
branches;
next	4.6;

4.6
date	99.03.04.16.42.56;	author nturton;	state Exp;
branches;
next	4.5;

4.5
date	99.01.13.19.12.18;	author jfarrell;	state Exp;
branches;
next	4.4;

4.4
date	98.12.14.13.53.43;	author ahodgkin;	state Exp;
branches;
next	4.3;

4.3
date	98.11.24.16.52.28;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	98.11.24.10.51.42;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	98.11.23.19.44.49;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	97.05.30.13.08.14;	author askelton;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.05.30.13.08.15;	author askelton;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.06.25.10.29.51;	author askelton;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	97.06.26.17.24.07;	author askelton;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Remove DST CMOS fiddling code.
Shortly to be handled by TerritoryManager, but the DST fiddling in this module was already broken. Aside from only knowing about Europe and Australia, the Australia rules were wrong too (since they've been changed again).
dhcp.c: use names for timezone CMOS rather than magic numbers.
Rework read_os_var() to remove the 'read length when buff = NULL' which is never used, but also wouldn't have worked because the read length call to OS_ReadVarVal returns an error which is caught by the _swix() hence you always got -1.
Put resolver variable name into a define in the header file.

Version 0.39. Tagged as 'NetTime-0_39'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "nt_nvram.h"
#include "debug.h"

#define TAG "SystemTime"

int nvram_gettime(void)
{
#ifdef STB22
    return 0;
#else
    int time[2];
    int res;

    /* Call the SWI, and if it fails, just return 0 */
    if(_swix(NVRAM_Read, _INR(0,2)|_OUT(0), TAG, time, sizeof time, &res))
        return 0;

    if(res<0)
        return 0;

    return time[0];
#endif
}

void nvram_settime(int time)
{
#ifdef STB22
    return;
#else
    _swix(NVRAM_Write, _INR(0,2), TAG, &time, sizeof time);
#endif
}

int read_os_var(const char *varname, char *buff, size_t n)
{
    _kernel_swi_regs r;

    /* Get the variable, and return its length (possibly 0),
     * or return -1 if it doesn't exist
     */
    r.r[0] = (int)varname;
    r.r[1] = (int)buff;
    r.r[2] = (int)n;
    r.r[3] = 0;
    r.r[4] = 0;
    if (_kernel_swi(OS_ReadVarVal, &r, &r) != NULL)
        return -1;

    buff[r.r[2]] = '\0';

    return r.r[2];
}
@


4.9
log
@  Fixed to build with the latest cc (5.54) compiler.
Detail:
  This version now builds with cc-5_45. Note: it has not been verified as
  actually functioning correctly.
Admin:
  Tested in DSL Baseline build.

Version 0.31. Tagged as 'NetTime-0_31'
@
text
@a17 1

a18 1

a25 1

a26 1

a27 1

d33 1
a33 1
      return 0;
d36 1
a36 1
      return 0;
a38 1

d51 1
a51 19
int read_os_var(char *varname, char *buff, int n)
{
  _kernel_swi_regs r;

  r.r[0] = (int)varname;
  r.r[1] = (int)buff;
  r.r[2] = (buff==NULL)?0x80000000:n;
  r.r[3] = 0;
  r.r[4] = 0;
  if(_kernel_swi(OS_ReadVarVal, &r, &r) != NULL) return(-1);
  if(buff) {
      *(buff + r.r[2]) = 0;
      return(r.r[2]);
  }
  return(-(r.r[2]));

}

int nvram_set_dst (int on)
d55 10
d66 1
a66 6
    r.r[0] = 161; /* read CMOS */
    r.r[1] = 0xdc; /* alarm and time byte */
    if(_kernel_swi(OS_Byte, &r, &r) != NULL) {
        dprintf(("", "nvram_set_dst: CMOS byte read failed\n"));
        return 0;
    }
d68 1
a68 22
    if ((r.r[2] & 0x80) && on) {
        dprintf(("", "nvram_set_dst: DST already ON\n"));
        return 1;
    }
    if (!(r.r[2] & 0x80) && !on) {
        dprintf(("", "nvram_set_dst: DST already OFF\n"));
        return 1;
    }

    r.r[0] = 162; /* write CMOS */
    if (on) { /* set DST */
      dprintf(("", "nvram_set_dst: DST now ON\n"));
      r.r[2] |= 0x80; /* set top bit */
    } else { /* clr DST */
      dprintf(("", "nvram_set_dst: DST now OFF\n"));
      r.r[2] &= 0x7f; /* clr top bit */
    }
    if(_kernel_swi(OS_Byte, &r, &r) != NULL) {
        dprintf (("", "nvram_set_dst: CMOS byte write failed\n"));
	return 0;
    }
    return 1;
@


4.8
log
@  Added support for NTP, gradual time adjustment, configurable DST,
  and DHCP timezone.

Detail:
  If Inet$NTPServer is set, NetTime will use NTP (unicast SNTP, as per RFC2030).
  Otherwise it will use the UDP time protocol (it used to use TCP).

  NetTime will use the RTCAdjust algorithms to adjust the centisecond clock
  rate by +/-10% to get in step with the time server. By polling every 30
  minutes on a LAN, time will not deviate by more than 0.1 seconds once
  synchronised. It interoperates with RTCAdjust and the hardware RTC to ensure
  correct operation on a machine with RTC.

  NetTime has returned to polling every 30 minutes. This may defeat PPP
  timeouts - a suggested fix is to change PPP to only have TCP traffic keep the
  link up, or to have a separate user inactivity timeout (like Lazarus).

  The system variable NetTime$DST controls DST behaviour. Set to "European"
  (the default) to use European rules. Set it to something like
  "03-May-2000.01:00:00; 14-Sep-2000.01:00:00" to specify this year's start
  and end dates (in UTC). Set to "No" to make it leave DST alone.

  If a DHCP reply arrives while NetTime is loaded, it will check for the time
  offset option - if present, the timezone will be configured.

  New command *NetTime_Status gives information about the clock adjustments.

  NetTime attempts to start operation immediately on a non-dialup machine -
  removes the need for a *NetTime_Kick after softloading. *NetTime_Kick will
  still be required after, say, setting Inet$NTPServer manually.

Admin:
  Tested on desktop systems and STBs. NTP operation on an NC will require a
  way of finding out an NTP server - possibly redefining TIME_SERVER smartcard
  tag to be NTP? Anycast operation may also be worth adding.

Version 0.20. Tagged as 'NetTime-0_20'
@
text
@d25 1
a25 1
int nvram_gettime()
@


4.7
log
@Added a header file, debug.h, that is used to redefine some debuglib macros
if a non-debug build is being built. This is to allow the module to be built
on machines where debuglib is not present.

Validated by building both the old (v0.12) and new versions and ensuring that
the non-debug versions were identical. Also checked that the debug version
still built.

Version 0.13. Tagged as 'NetTime-0_13'
@
text
@a74 1
#ifdef EUROPEAN_DST_BODGE
a109 1
#endif /* EUROPEAN_DST_BODGE */
@


4.6
log
@Check for errors from the NVRAM call, and don't set the time if it fails.

Version 0.12. Tagged as 'NetTime-0_12'
@
text
@d21 1
a21 1
#include "DebugLib/DebugLib.h"
d96 1
a96 1
    
@


4.5
log
@Automatically switch into and out of Daylight Savings for Europe in
1998-2001, if EUROPEAN_DST_BODGE is defined.

Version 0.11. Tagged as 'NetTime-0_11'
@
text
@d34 1
d36 6
a41 1
    _swix(NVRAM_Read, _INR(0,2), TAG, time, sizeof time);
@


4.4
log
@If STB22 is defined, no attempts to use NVRAM are made. !MkSTB22
builds such a variant.

Version 0.10. Tagged as 'NetTime-0_10'
@
text
@d21 2
d68 38
@


4.3
log
@Fixed typo in my enthusiastic code clean-up.

Version 0.08. Tagged as 'NetTime-0_08'
@
text
@d25 6
d36 2
d42 3
d46 1
@


4.2
log
@Code clean-up.

Version 0.05. Tagged as 'NetTime-0_05'
@
text
@d34 1
a34 1
    _swix(NVRAM_Write, _INR(0,2), TAG, time, sizeof time);
@


4.1
log
@Moved module to trunk and srccommitted. No code changes other
than removing some warnings.

Version 0.04. Tagged as 'NetTime-0_04'
@
text
@d21 1
a21 1
static char tag[] = "SystemTime";
d23 1
a23 1
int nvram_gettime(void)
d25 1
a25 2
    _kernel_swi_regs r;
    char time[8];
d27 1
a27 4
    r.r[0] = (int)tag;
    r.r[1] = (int)&time;
    r.r[2] = 8;
    _kernel_swi(NVRAM_Read, &r, &r);
d29 1
a29 1
    return(*(int *)time);
d34 1
a34 7
    _kernel_swi_regs r;

    r.r[0] = (int)tag;
    r.r[1] = (int)&time;
    r.r[2] = 4;
    _kernel_swi(NVRAM_Write, &r, &r);
    return;
@


1.1
log
@file nt_nvram was initially added on branch Spinner.
@
text
@d1 63
@


1.1.2.1
log
@Added support for the "SystemTime" NVRAM tag.
@
text
@a0 46
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "nt_nvram.h"

static char tag[] = "SystemTime";

int nvram_gettime(void)
{
    _kernel_swi_regs r;
    int time;

    r.r[0] = (int)tag;
    r.r[1] = (int)&time;
    r.r[2] = 0;
    _kernel_swi(NVRAM_Read, &r, &r);

    return(time);
}

void nvram_settime(int time)
{
    _kernel_swi_regs r;

    r.r[0] = (int)tag;
    r.r[1] = (int)&time;
    r.r[2] = 0;
    _kernel_swi(NVRAM_Write, &r, &r);
    return;
}

@


1.1.2.2
log
@Modified to overcome some shortcomings in the downright shoddy NVRAM
interface.

Changed the timeouts so that the line gets a chance to drop now and again.
@
text
@d26 1
a26 1
    char time[8];
d30 1
a30 1
    r.r[2] = 8;
d33 1
a33 1
    return(*(int *)time);
d42 1
a42 1
    r.r[2] = 4;
@


1.1.2.3
log
@Fixed some stuff. Added some stuff. Moved some other stuff about a bit.
But I didn't remove any stuff.
@
text
@a46 17
int read_os_var(char *varname, char *buff, int n)
{
  _kernel_swi_regs r;

  r.r[0] = (int)varname;
  r.r[1] = (int)buff;
  r.r[2] = (buff==NULL)?0x80000000:n;
  r.r[3] = 0;
  r.r[4] = 0;
  if(_kernel_swi(OS_ReadVarVal, &r, &r) != NULL) return(-1);
  if(buff) {
      *(buff + r.r[2]) = 0;
      return(r.r[2]);
  }
  return(-(r.r[2]));

}
@
