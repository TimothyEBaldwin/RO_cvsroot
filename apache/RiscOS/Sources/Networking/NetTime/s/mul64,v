head	4.7;
access;
symbols
	NetTime-0_43:4.7
	NetTime-0_42:4.7
	NetTime-0_41:4.7
	NetTime-0_40:4.7
	NetTime-0_39:4.7
	NetTime-0_38:4.7
	NetTime-0_37:4.7
	NetTime-0_36:4.6
	NetTime-0_35:4.6
	NetTime-0_34:4.6
	NetTime-0_33:4.6
	NetTime-0_32:4.6
	NetTime-0_31:4.5
	NetTime-0_30:4.4
	NetTime-0_29:4.4
	dellis_autobuild_BaseSW:4.4
	NetTime-0_28:4.4
	NetTime-0_26:4.4
	NetTime-0_25:4.4
	NetTime-0_24:4.4
	NetTime-0_23:4.4
	sbrodie_sedwards_16Mar2000:4.3
	NetTime-0_22:4.4
	NetTime-0_21:4.3
	NetTime-0_20:4.3
	dcotton_autobuild_BaseSW:4.4
	NetTime-0_16:4.1
	NetTime-0_15:4.1
	NetTime-0_14:4.1
	NetTime-0_13:4.1
	NetTime-0_12:4.1
	NetTime-0_11:4.1
	NetTime-0_10:4.1
	NetTime-0_09:4.1
	NetTime-0_08:4.1
	NetTime-0_07:4.1
	NetTime-0_06:4.1
	NetTime-0_05:4.1
	NetTime-0_04:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.7
date	2012.02.04.22.08.47;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	W0erdTttgEwVaTRv;

4.6
date	2004.05.19.18.21.25;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	2002.07.23.12.39.03;	author srevill;	state Exp;
branches;
next	4.4;

4.4
date	2000.03.16.16.50.20;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2000.03.07.10.53.36;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.03.07.10.44.58;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.13.41.14;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.13.41.14;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.22.16.02;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Add SWI NetTime_States.
Makefile changed to use "CModule" fragment.
Soak up some compiler warnings.
Extralong functions removed.
Use central header files in preference to local defines.
A failure to register resources no longer leaves EventV and WordV claimed.

Version 0.37. Tagged as 'NetTime-0_37'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:Machine.<Machine>
        GET     Hdr:APCS.<APCS>
        GET     Hdr:System

	AREA |C$$Code|, CODE, READONLY

        EXPORT  ntp_add[LEAF]
ntp_add
        LDR     ip,[sp,#0]      ; ip := b.frac
        ADDS    ip,a3,ip        ; ip := a.frac + b.frac
        STR     ip,[a1,#4]      ; output->frac := ip
        ADC     ip,a2,a4        ; ip := a.secs + b.secs with carry
        STR     ip,[a1,#0]      ; output->secs := ip
        Return  ,LinkNotStacked

        EXPORT  ntp_sub[LEAF]
ntp_sub
        LDR     ip,[sp,#0]      ; ip := b.frac
        SUBS    ip,a3,ip        ; ip := a.frac - b.frac
        STR     ip,[a1,#4]      ; output->frac := ip
        SBC     ip,a2,a4        ; ip := a.secs - b.secs with carry
        STR     ip,[a1,#0]      ; output->secs := ip
        Return  ,LinkNotStacked

        IMPORT  module_osword15entry
        EXPORT  wordv_veneer
wordv_veneer
        TEQ     r0,#15                  ; fast check for OS_Word 15
        MOVNE   pc,lr
        B       module_osword15entry    ; if it is, then on to CMHG veneer


        EXPORT  get_t0_count
get_t0_count
        MOV     ip, lr
        [ {CONFIG}<>26
        MRS     a3, CPSR
        ]
        SWI     XOS_EnterOS             ; Must be in SVC mode to peek IOC/IOMD
        MOV     a4,#IOC
; Shut off interrupts (briefly) to ensure an atomic read of these
; silly hardware registers.
        [ {CONFIG}=26
        TEQP    pc,#I_bit :OR: SVC_mode
        |
        MRS     a1, CPSR
        ORR     a1, a1, #I32_bit
        MSR     CPSR_c, a1              ; Disable interrupts
        ]
        STRB    a4,[a4,#Timer0LR]
        LDRB    a2,[a4,#Timer0CL]
        LDRB    a1,[a4,#Timer0CH]
        ORR     a1,a2,a1,LSL #8
        [ {CONFIG}<>26
        MSR     CPSR_c, a3              ; Restore entry mode and irq state
        ]
        Return  ,LinkNotStacked,,ip


sb      RN      9
SB      RN      9

; unsigned long _get_hal_t0_count(uint32_t hal_sb, void * hal_fn_ptr);
;
; Call HAL_TimerReadCountdown to get current Timer 0 countdown value.
;
;   Static base value in a1
;   Pointer to HAL_TimerReadCountdown routine in a2

        EXPORT  get_hal_t0_count
get_hal_t0_count   ROUT
; Are we in USR mode?
        [ {CONFIG} = 26
        TST     lr, #3                  ; Is mode USR26?
        |
        MRS     a3, CPSR
        TST     a3, #3                  ; Is mode USR26 or USR32?
        ]
        BEQ     %FT50

; We are in SVC mode already
        FunctionEntry   sb
        MOV     sb, a1
        MOV     a1, #0                  ; We want to read timer 0
        ADR     lr, %FT01
        MOV     pc, a2                  ; Call HAL
01
        Return  sb

50
; We are in USR mode
        [ {CONFIG} = 26
        MOV     ip, lr
        ]
        SWI     XOS_EnterOS             ; Enter SVC mode
        [ {CONFIG} = 26
        STMFD   sp!,{sb, ip}
        |
        STMFD   sp!,{a3, sb}
        ]
        MOV     sb, a1
        MOV     a1, #0                  ; We want to read timer 0
        ADR     lr, %FT51
        MOV     pc, a2                  ; Call HAL
51
        [ {CONFIG} = 26
        Return  sb                      ; Return and restore entry mode
        |
        LDMFD   sp!,{a3, sb}
        MSR     CPSR_c, a3              ; Restore entry mode
        Return  ,LinkNotStacked
        ]

	END
@


4.6
log
@* Added support for non-IOMD, HAL-based platforms.
* Improved *NetTime_PollInterval to make sure next poll happens at
  the expected time.
* On module init, no longer sets the time from the NVRAM if the current
  time seems sensible (ie >= 2003ish).
* Sets the time NVRAM on shutdown (was only on packet reception).

Version 0.32. Tagged as 'NetTime-0_32'
@
text
@a40 8
        EXPORT  ntp_div2[LEAF]
ntp_div2
        MOVS    a2,a2,ASR #1    ; a2 := secs >> 1
        STR     a2,[a1,#0]      ; output->secs := a2
        MOV     a3,a3,RRX       ; a3 := carried down + frac >> 1
        STR     a3,[a1,#4]      ; output->frac := a3
        Return  ,LinkNotStacked

@


4.5
log
@  Fixed to build with the latest cc (5.54) compiler.
Detail:
  This version now builds with cc-5_45. Note: it has not been verified as
  actually functioning correctly.
Admin:
  Tested in DSL Baseline build.

Version 0.31. Tagged as 'NetTime-0_31'
@
text
@d83 55
@


4.4
log
@Precision of internal arithmetic and clock reading improved. Now possible
to maintain time to within a couple of milliseconds (given frequent enough
polling).

Version 0.22. Tagged as 'NetTime-0_22'
@
text
@a14 3
; General purpose full 32-bit multiply (to 64-bit result).
; Adapted from code in back of Acorn Assembler manual.

a21 19

	EXPORT mul64[LEAF]
mul64
        FunctionEntry "v1,v2"
	MOVS	v2,a1,LSR #16
	BIC	a1,a1,v2,LSL #16
	MOV	v1,a2,LSR #16
	BIC	a2,a2,v1,LSL #16
	MUL	a4,a1,a2
	MUL	a2,v2,a2
	MUL	a1,v1,a1
	MULNE	v2,v1,v2
	ADDS	a1,a1,a2
	ADDCS	v2,v2,#&10000
	ADDS	a4,a4,a1,LSL #16
	ADC	v2,v2,a1,LSR #16
	STMIA	a3,{a4,v2}

        Return  "v1,v2"
@


4.3
log
@Minor correction to some last minute 32-bit macros
@
text
@d22 1
d70 34
@


4.2
log
@  Added support for NTP, gradual time adjustment, configurable DST,
  and DHCP timezone.

Detail:
  If Inet$NTPServer is set, NetTime will use NTP (unicast SNTP, as per RFC2030).
  Otherwise it will use the UDP time protocol (it used to use TCP).

  NetTime will use the RTCAdjust algorithms to adjust the centisecond clock
  rate by +/-10% to get in step with the time server. By polling every 30
  minutes on a LAN, time will not deviate by more than 0.1 seconds once
  synchronised. It interoperates with RTCAdjust and the hardware RTC to ensure
  correct operation on a machine with RTC.

  NetTime has returned to polling every 30 minutes. This may defeat PPP
  timeouts - a suggested fix is to change PPP to only have TCP traffic keep the
  link up, or to have a separate user inactivity timeout (like Lazarus).

  The system variable NetTime$DST controls DST behaviour. Set to "European"
  (the default) to use European rules. Set it to something like
  "03-May-2000.01:00:00; 14-Sep-2000.01:00:00" to specify this year's start
  and end dates (in UTC). Set to "No" to make it leave DST alone.

  If a DHCP reply arrives while NetTime is loaded, it will check for the time
  offset option - if present, the timezone will be configured.

  New command *NetTime_Status gives information about the clock adjustments.

  NetTime attempts to start operation immediately on a non-dialup machine -
  removes the need for a *NetTime_Kick after softloading. *NetTime_Kick will
  still be required after, say, setting Inet$NTPServer manually.

Admin:
  Tested on desktop systems and STBs. NTP operation on an NC will require a
  way of finding out an NTP server - possibly redefining TIME_SERVER smartcard
  tag to be NTP? Anycast operation may also be worth adding.

Version 0.20. Tagged as 'NetTime-0_20'
@
text
@d51 1
a51 1
        Return  ,,LinkNotStacked
d60 1
a60 1
        Return  ,,LinkNotStacked
d68 1
a68 1
        Return  ,,LinkNotStacked
@


4.1
log
@Initial revision
@
text
@d18 5
d27 1
a27 1
	STMFD	sp!,{v1-v2,lr}
d41 28
a68 1
	LDMFD	sp!,{v1-v2,pc}^
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
