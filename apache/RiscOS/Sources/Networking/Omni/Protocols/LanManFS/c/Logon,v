head	1.5;
access;
symbols
	LanManFS-2_62:1.5
	LanManFS-2_61:1.5
	LanManFS-2_60:1.5
	LanManFS-2_59:1.5
	LanManFS-2_58:1.5
	LanManFS-2_57:1.5
	LanManFS-2_56:1.5
	LanManFS-2_55:1.5
	LanManFS-2_54:1.5
	LanManFS-2_53:1.5
	LanManFS-2_52:1.5
	LanManFS-2_51:1.5
	LanManFS-2_50:1.5
	LanManFS-2_49:1.5
	LanManFS-2_48:1.5
	LanManFS-2_47:1.5
	LanManFS-2_46:1.4
	LanManFS-2_45:1.4
	LanManFS-2_44:1.4
	LanManFS-2_43:1.4
	LanManFS-2_42:1.4
	LanManFS-2_41:1.4
	LanManFS-2_40:1.4
	LanManFS-2_39:1.3
	LanManFS-2_38:1.3
	LanManFS-2_37:1.3
	LanManFS-2_36:1.3
	LanManFS-2_35:1.3
	LanManFS-2_34:1.3
	LanManFS-2_33:1.2
	LanManFS-2_32:1.2
	LanManFS-2_31:1.2
	RO_5_07:1.2
	LanManFS-2_30:1.2
	LanManFS-2_29:1.2
	LanManFS-2_28:1.2
	LanManFS-2_27:1.2
	LanManFS-2_26:1.2
	LanManFS-2_25:1.2
	LanManFS-2_24:1.2
	LanManFS-2_23:1.2
	LanManFS-2_22:1.2
	LanManFS-2_21:1.2
	LanManFS-2_20:1.2
	LanManFS-2_19:1.2
	LanManFS-2_18:1.2
	LanManFS-2_17:1.2
	LanManFS-2_16:1.2
	LanManFS-2_15:1.2
	LanManFS-2_14:1.2
	LanManFS-2_13:1.2
	LanManFS-2_12:1.2
	LanManFS-2_11:1.2
	LanManFS-2_10:1.2
	LanManFS-2_09:1.2
	LanManFS-2_08:1.2
	LanManFS-2_07:1.2
	LanManFS-2_06:1.2
	LanManFS-2_05:1.2
	LanManFS-2_04:1.2
	LanManFS-2_03:1.2
	LanManFS-2_02:1.2
	LanManFS-2_01:1.2
	LanManFS-2_00:1.2
	LanManFS-1_87-1_1_1_1_2_13:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_12:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_11:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_10:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_9:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_8:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_7:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_6:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_5:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_4:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_3:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_2:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_1:1.1.1.1
	sbrodie_LanManFS_dev:1.1.1.1.0.2
	sbrodie_LanManFS_dev_bp:1.1.1.1
	LanManFS-1_87:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2014.08.06.20.57.20;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	ZDoXXBFnai2XolLx;

1.4
date	2013.10.03.07.27.08;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	iTaBDwF1woaPMO7x;

1.3
date	2009.08.01.08.10.27;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.12.52.00;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.03.13.54.45;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.03.13.54.45;	author sbrodie;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	99.01.19.14.24.43;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Get version number from messages file
Also, rationalise the two Omni_RegisterClient calls to both use _swix since they're virtually the same function repeated twice.

Version 2.47. Tagged as 'LanManFS-2_47'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*  Lan Manager client
*
*  Logon.C -- "Logon" interface to Omniclient
*
*  This module produces a "Log on to Lan Manager" icon in the FS List
*    !Omni window, which lets the user log on (i.e. set a default
*    workgroup/domain, user name, and password).
*
*  Versions
*  29-05-96 INH Original, for LanMan 1.69
*  10-06-96 NAS Minor fixes for domain logon/OmniClient interface to work
*  12-06-96 INH "Dismount" call deleted, OmniOp 17 made instead.
*  25-07-96 INH Home directory stuff added
*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"

#include "stdtypes.h"
#include "LanMan.h"
#include "LMVars.h"
#include "Omni.h"
#include "RPC.h"
#include "Logon.h"
#include "Xlate.h"
#include "VersionNum"
#include "LanMan_MH.h"

/* ----------------------------------- */

static void SetPassword ( char * pwd )
{
  static char pass_buf[NAME_LIMIT];
  if ( pwd == NULL ) pwd = "";

  strcpyn ( pass_buf, pwd, NAME_LIMIT );
  Xlt_Jumble ( pass_buf );
  LM_Vars.password_ptr = pass_buf;
}

/* ----------------------------------- */

static void SetOSVar ( char *varname, char *value )
{
  _kernel_swi_regs R;

  R.r[0] = (int) varname;
  R.r[1] = (int) value;

  if ( value == NULL )  /* Unset it */
    R.r[2] = -1;
  else
    R.r[2] = strlen (value);

  R.r[3] = 0;
  R.r[4] = 4; /* Literal string */
  _kernel_swi ( OS_SetVarVal, &R, &R );
}

/* ----------------------------------- */

char Lgn_PrimaryDCName[NAME_LIMIT];  /* For debugging */
char Lgn_HomeServerName[NAME_LIMIT];
char Lgn_HomeShareName[NAME_LIMIT];
char Lgn_HomeDirName[DOS_NAME_LEN];

static bool get_path ( char **ptr_in_out, char *result )
{
  int i;
  char *p = *ptr_in_out;

  if (*p++ != '\\') return false;

  i=0;
  while ( *p != '\\' && *p != 0 )
  {
    if ( i < NAME_LIMIT-1 )
      result[i++] = *p;
    p++;
  }

  result[i] = 0;
  *ptr_in_out = p;
  return (bool) (i>0);
}

/* ----------------------------------- */

static err_t ParseHomeDir ( char *name )
{
  char *p;
  char leaf_name[NAME_LIMIT];


  /* We expect the string to be of the form \\servername\sharename,
     with optionally a path on the end of it, which will be
     translated to RISCOS format. */

  while ( isspace(*name) ) name++; /* Skip leading whitespace */

  if ( name[0] != '\\' || name[1] != '\\' ) /* Doesn't start '\\' */
    return EHOMEDIRNAME;

  name++;  /* Make name \SERVER\SHARE[\path] */

  if ( !get_path ( &name, Lgn_HomeServerName ) ||
       !get_path ( &name, Lgn_HomeShareName ) )
    return EHOMEDIRNAME;

  sprintf ( Lgn_HomeDirName, "%s::Home.$", FilingSystemName );
  p = Lgn_HomeDirName + strlen(Lgn_HomeDirName);
  while ( get_path ( &name, leaf_name ) )
  {
    *p++ = '.';
    Xlt_NameDOStoRO ( p, leaf_name );
    p += strlen(p);
  }

  return OK;
}


/* ----------------------------------- */
/* This function should check for CMOS default values, *
 * and use them if present - RCE 980122                *
 * Achieved by modifying its caller 980127:RCE         *
 */

err_t Lgn_Init ( void )
{
  strcpy ( LM_Vars.workgroup, "WORKGROUP" );
  strcpy ( LM_Vars.username,  "GUEST" );
  SetPassword ( NULL );
  LM_Vars.logged_on = true;
  return  OK;
}

/* ----------------------------------- */

err_t Lgn_Logon ( char *wkgrp, char *userid, char *pwd )
{
  char *serv_name;
  char *dir_name;
  int   tmp;
  err_t res;

  if ( userid == NULL || userid[0] == 0 )
    return EUSERUNKNOWN;

  if ( wkgrp != NULL && strlen(wkgrp) > 0 )
    strcpyn_upper ( LM_Vars.workgroup, wkgrp, NAME_LIMIT );

  /* pwd may be NULL */

  strcpyn ( LM_Vars.username,  userid, NAME_LIMIT );
  SetPassword ( pwd );
  LM_Vars.logged_on = true;

  SetOSVar("Omni$UserLanMan", LM_Vars.username);
  SetOSVar("LanMan$HomeDir", NULL );
  Lgn_HomeDirName[0] = 0;

  Omni_RecheckInfo (RI_MOUNTS);
  Omni_RecheckInfo (RI_SERVERS);
  Omni_RecheckInfo (RI_PRINTERS);

  /* Now attempt to find home directory */

  serv_name = RPC_GetDomainController ( LM_Vars.workgroup );
  if ( serv_name == NULL ) /* No DC: Don't worry about it */
  {
    strcpy ( Lgn_PrimaryDCName, MsgLookup("NoDC") );
    return OK;
  }

  strcpy ( Lgn_PrimaryDCName, serv_name );

  /* Report bad passwords & other errors, ignore unset home directories */


  res = RPC_LogonUser ( serv_name, LM_Vars.username, pwd, &dir_name );
  if ( res == ENOTPRESENT ) /* Server doesn't support it */
    return OK;

  if ( res != OK )
    return res;

  /* Extract fields from name, & try to connect to it */

  if ( dir_name == NULL || dir_name[0] == 0 )
    return OK;

  res = ParseHomeDir ( dir_name );
  if ( res != OK )
    return res;

  /* Set the home directory name so it is available to the boot file */

  SetOSVar ( "LanMan$HomeDir", Lgn_HomeDirName );

  res =  Omni_MountServer ( Lgn_HomeServerName,
                            LM_Vars.username,
                            pwd,
                            "Home", /* Mountname */
                            Lgn_HomeShareName,
                            &tmp ); /* MountID_out */

  /* Caution - this could potentially recurse, as the !ARMBOOT file
     may contain an LMLogon command!
  */

  if ( res == OK || res == ECONNEXISTS )
    return OK;
  else
    return EHOMEDIRCONN;
}

/* ----------------------------------- */

err_t Lgn_Logoff ( void )
{
  strcpy ( LM_Vars.username, "" );
  SetPassword(NULL);
  LM_Vars.logged_on = false;
  Omni_ClearLists();

  SetOSVar ( "Omni$UserLanMan", NULL );
  SetOSVar ( "LanMan$HomeDir", NULL );

  Omni_RecheckInfo ( RI_SERVERS );

  return OK;
}

/* --------------------------------------- */

void Lgn_Register(void)
{
  char titlebar[24];  /* Title bar - 24 max */
  char infobox[3*32]; /* Info box - 3x32 max */

  strcpy( titlebar, MsgLookup("_Version") ); /* Temp copy */
  sprintf( infobox, "%s\n"
                    "\xA9 Acorn Computers Ltd, 1997\n"
                    "%s",
                    MsgLookup("WhoLogon"),
                    titlebar );
  strncpy( titlebar, MsgLookup("DispName"), sizeof(titlebar) );

  _swix( SWI_Omni_RegisterClient, _INR(0,6),
         LanMan_LogonOp, /* Client ID */
         RC_LOGON_TYPE |  RC_NEEDS_AUTHSERV | RC_NEEDS_USERID | RC_NEEDS_PASSWD,
         "lmlgni", /* Sprite name - 12 max */
         titlebar, /* Title bar - 24 max */
         infobox,  /* Info box - 3x32 max */
         0, /* Site ID (ignored) */
         FilingSystemName "+" ); /* Just needs to be unique from LanManFS name */
}

/* ---------------------------------------- */

static err_t Lgn_ListServers ( char *buf_ptr, int buf_size, int token_in,
              char * *pNextByte_out, int *pToken_out )
{
  char  temp[32];
  int   serverid  = (int) "?"; /* A unique memory address */
  int   tot_size;

  tot_size = sizeof( serverid ) +
             (2 * (strlen( MsgLookup("DispName") ) + 1)) +
             strlen( MsgLookup("XtrLogon") ) + 2 + 2 + 1;

  tot_size = (tot_size + 3) & ~3;  /* Round to dword boundary */

  /* We only ever write one record */
  if ( token_in != 0 || tot_size > buf_size )
  {
    *pNextByte_out = buf_ptr;  /* No records written */
    *pToken_out = 0;           /* All done */
    return OK;
  }

  *pNextByte_out = buf_ptr + tot_size;
  *pToken_out = 0;

  memcpy ( buf_ptr, &serverid, sizeof(serverid) );
  buf_ptr += sizeof(serverid);

  strncpy( temp, MsgLookup("DispName"), sizeof(temp) );

  strcpy( buf_ptr, temp ); /* Short name */
  buf_ptr += strlen(temp) + 1;

  strcpy( buf_ptr, temp ); /* Long name (the same!) */
  buf_ptr += strlen(temp)+1;

  sprintf( buf_ptr, "%s\n \n ", MsgLookup("XtrLogon") ); /* Extra details */

  return OK;
}





/* ---------------------------------------- */

_kernel_oserror *Lgn_LogonOp_SWI ( _kernel_swi_regs *R )
{
  err_t res;

  debug1(" Omni Op(%d):", R->r[0]);

#define Rin_int(a)   (R->r[a])
#define Rout_int(a) &(R->r[a])
#define Rin_chr(a)   (char *)(R->r[a])
#define Rout_chr(a)  (char **)&(R->r[a])

  switch ( R->r[0] )
  {
    case 0:  /* Mount */
      res = Lgn_Logon ( Rin_chr(1), /* "Server" => domain/workgroup */
                        Rin_chr(2), /* User ID */
                        Rin_chr(3) ); /* Password */
      if ( res == OK || res == EHOMEDIRCONN || res == EHOMEDIRNAME)
        R->r[1] = 1; /* Keep the Smith happy */
      else
        R->r[1] = 0; /* NAS 05/Dec/96: needs to return mount_id of 0 if error */
      break;


    case 3:  /* Enumerate servers */
      res = Lgn_ListServers ( Rin_chr(1),
                               Rin_int(2),
                               Rin_int(3),
                               Rout_chr(1),
                               Rout_int(3) );
      break;

   case 9:   /* Get mount info - (mild bodge - say it's not there!) */
     R->r[3] = 0;
     res = OK;
     break;


   case 17:  /* Log out of domain */
     res = Lgn_Logoff(); /* Clear all user ID's & passwords */
     break;

   default:
     res = ENOTPRESENT;
  }

  return MsgError(res);
}


@


1.4
log
@Internationalised
Unused LMFiler put in the attic.
As LanMan has historically put its resources into ThirdPart/OmniClient this component has no ROM resources phase - it still registers the resources at run time.

Version 2.40. Tagged as 'LanManFS-2_40'
@
text
@d257 2
a258 2
  char titlebar[24];
  char infobox[3*32];
d260 1
a260 1
  strncpy( titlebar, MsgLookup("DispName"), sizeof(titlebar) );
d263 5
a267 2
                    Module_FullVersion " (" Module_ApplicationDate ")",
                    MsgLookup("WhoLogon") );
d274 1
a274 1
         0, /* Site ID */
@


1.3
log
@Fix for renames where only the case has changed.
Detail:
 Added an extra check after the Xlate path resolution code so that
 the case of the path given to resolve is honoured. This now means that
 the strcmp() done in SMB_Rename fails and the rename is actually sent to
 the server. Before "*rename test Test" would have the path resolved and
 since 'test' already existed both names would be the same, in this example
 something like "*rename A:\test A:\test" would result.
Admin:
 Made the non LONGNAMES version compile again (not tested).
 Removed local definitions of FSControl reason codes, uses Interface header
 now.
 Made the case of #includes match CVS to allow future compilation on a case
 sensitive system.
 Deleted unused "Version" header.

Version 2.34. Tagged as 'LanManFS-2_34'
@
text
@d44 1
d190 1
a190 1
    strcpy ( Lgn_PrimaryDCName, "<not found>");
d257 16
a272 8
  (void) _swix( SWI_Omni_RegisterClient, _INR(0,6),
  	LanMan_LogonOp, /* Client ID */
  	RC_LOGON_TYPE |  RC_NEEDS_AUTHSERV | RC_NEEDS_USERID | RC_NEEDS_PASSWD,
  	"lmlgni",
  	"LAN Manager",        /* Needs to be reasonably short. NAS */
  	"LanManFS Logon bit", /* Info string - shouldn't appear*/
  	0, /* Site ID */
  	"LanMan+"); /* Needs to be unique from LanMan FS name. NAS */
d280 1
a280 3
  char *shortname = "LanManager";  /* Needs to be reasonably short. NAS */
  char *longname  = "LanManager";  /* Needs to be reasonably short. NAS */
  char *extradetails = "Logon Network\n \n ";
a281 1

d284 3
a286 3
  tot_size = sizeof ( serverid ) + strlen(shortname) + 1 +
                                   strlen (longname ) + 1 +
                                   strlen (extradetails) + 1;
a290 1

d303 10
a312 5
  strcpy ( buf_ptr, shortname );
  buf_ptr += strlen(shortname)+1;
  strcpy ( buf_ptr, longname );
  buf_ptr += strlen(longname)+1;
  strcpy ( buf_ptr, extradetails );
d369 1
a369 1
  return Xlt_Error(res);
@


1.2
log
@  Support for long filename.
  Support for spaces in machine names.
  Merge of sbrodie_LanManFS_dev branch to trunk.
Detail:
  LanManFS 2.00 supports the "NT LM 0.12" protocol, enabling it to
    use long filenames on mounted shares.
Admin:
  Supporting documentation:
    1215,256/FS: LanManFS Software Functional Specification.
  Same as LanManFS-1_87_1_1_1_1_2_13.

Version 2.00. Tagged as 'LanManFS-2_00'
@
text
@d38 6
a43 7
#include "lanman.h"
#include "lmvars.h"
#include "omni.h"
#include "rpc.h"
#include "logon.h"
#include "xlate.h"

@


1.1
log
@Initial revision
@
text
@d45 2
d257 8
a264 14
  _kernel_swi_regs R;

  R.r[0] = SWI_LanMan_LogonOp; /* Client ID */
  R.r[1] = RC_LOGON_TYPE |  RC_NEEDS_AUTHSERV |
           RC_NEEDS_USERID | RC_NEEDS_PASSWD ;

  R.r[2] = (int) "lmlgni";
  R.r[3] = (int) "LAN Manager";       /* Needs to be reasonably short. NAS */
  R.r[4] = (int) "LanManFS Logon bit"; /* Info string - shouldn't appear*/
  R.r[5] = 0; /* Site ID */
  R.r[6] = (int) "LanMan+"; /* Needs to be unique from LanMan FS name. NAS */

  _kernel_swi( SWI_Omni_RegisterClient, &R, &R );

@


1.1.1.1
log
@
LanManFS moved into Omni subdirectory.  Previous version in
RiscOS/Sources/Networking/LanManFS is now locked out.

The rest of Omni will be imported at a later date.

Version 1.87, tagged as LanManFS-1_87

@
text
@@


1.1.1.1.2.1
log
@  Check-in of all files comprising this development build of LanManFS
  Spaces in NetBIOS names are now allowed.
Detail:
  Now supports NetBIOS hostnames which contain spaces.  Use hardspaces
    in the Omni frontend or at the command-line (unless you can get
    away with a normal space without confusing the CLI parser)
Admin:
  Tested by attempting to connect to machines with spaces in their
    names.  Got the expected response from the target machine, so
    this aspect is working.
  It appears that several files did not get checked in due to datestamp
    problems when LanManFS's location in CVS was changed.  This is now
    fixed.

Version 1.87, 1.1.1.1.2.7. Tagged as 'LanManFS-1_87-1_1_1_1_2_7'
@
text
@a44 2
#include "LanMan_MH.h"

d255 14
a268 8
  (void) _swix( SWI_Omni_RegisterClient, _INR(0,6),
  	LanMan_LogonOp, /* Client ID */
  	RC_LOGON_TYPE |  RC_NEEDS_AUTHSERV | RC_NEEDS_USERID | RC_NEEDS_PASSWD,
  	"lmlgni",
  	"LAN Manager",        /* Needs to be reasonably short. NAS */
  	"LanManFS Logon bit", /* Info string - shouldn't appear*/
  	0, /* Site ID */
  	"LanMan+"); /* Needs to be unique from LanMan FS name. NAS */
@
