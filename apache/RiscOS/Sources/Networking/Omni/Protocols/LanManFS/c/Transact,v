head	1.4;
access;
symbols
	LanManFS-2_62:1.4
	LanManFS-2_61:1.4
	LanManFS-2_60:1.4
	LanManFS-2_59:1.4
	LanManFS-2_58:1.4
	LanManFS-2_57:1.4
	LanManFS-2_56:1.4
	LanManFS-2_55:1.4
	LanManFS-2_54:1.4
	LanManFS-2_53:1.4
	LanManFS-2_52:1.4
	LanManFS-2_51:1.4
	LanManFS-2_50:1.4
	LanManFS-2_49:1.4
	LanManFS-2_48:1.4
	LanManFS-2_47:1.4
	LanManFS-2_46:1.4
	LanManFS-2_45:1.4
	LanManFS-2_44:1.4
	LanManFS-2_43:1.4
	LanManFS-2_42:1.4
	LanManFS-2_41:1.4
	LanManFS-2_40:1.4
	LanManFS-2_39:1.3
	LanManFS-2_38:1.3
	LanManFS-2_37:1.3
	LanManFS-2_36:1.3
	LanManFS-2_35:1.3
	LanManFS-2_34:1.3
	LanManFS-2_33:1.2
	LanManFS-2_32:1.2
	LanManFS-2_31:1.2
	RO_5_07:1.2
	LanManFS-2_30:1.2
	LanManFS-2_29:1.2
	LanManFS-2_28:1.2
	LanManFS-2_27:1.2
	LanManFS-2_26:1.2
	LanManFS-2_25:1.2
	LanManFS-2_24:1.2
	LanManFS-2_23:1.2
	LanManFS-2_22:1.2
	LanManFS-2_21:1.2
	LanManFS-2_20:1.2
	LanManFS-2_19:1.2
	LanManFS-2_18:1.2
	LanManFS-2_17:1.2
	LanManFS-2_16:1.2
	LanManFS-2_15:1.2
	LanManFS-2_14:1.2
	LanManFS-2_13:1.2
	LanManFS-2_12:1.2
	LanManFS-2_11:1.2
	LanManFS-2_10:1.2
	LanManFS-2_09:1.2
	LanManFS-2_08:1.2
	LanManFS-2_07:1.2
	LanManFS-2_06:1.2
	LanManFS-2_05:1.2
	LanManFS-2_04:1.2
	LanManFS-2_03:1.2
	LanManFS-2_02:1.2
	LanManFS-2_01:1.2
	LanManFS-2_00:1.2
	LanManFS-1_87-1_1_1_1_2_13:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_12:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_11:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_10:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_9:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_8:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_7:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_6:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_5:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_4:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_3:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_2:1.1.2.1
	sbrodie_LanManFS_dev:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2013.10.03.07.27.09;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	iTaBDwF1woaPMO7x;

1.3
date	2009.08.01.08.10.27;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.12.52.15;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.11.17.26.29;	author sbrodie;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.12.11.17.26.29;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Internationalised
Unused LMFiler put in the attic.
As LanMan has historically put its resources into ThirdPart/OmniClient this component has no ROM resources phase - it still registers the resources at run time.

Version 2.40. Tagged as 'LanManFS-2_40'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*
*  Transact.C  -- SMB Transact and Transact2 related support routines
*
*  08-12-98 sbrodie  Original
*
*/

/* Standard includes */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"

/* Our includes */

#include "stdtypes.h"
#include "LanMan.h"
#include "SMB.h"
#include "Transact.h"

/*
 * These routines are provided for the benefit of SMB.c:SMB_Transact2()
 *
 */

void Transact_addword(struct TransactParms *TP, int value)
{
  BYTE *p = TP->parms_in + TP->parms_in_len;
  p[0] = (value & 0xFF);
  p[1] = (value >> 8 );
  TP->parms_in_len+=2;
}

/* ---------- */

void Transact_addlong(struct TransactParms *TP, long value)
{
  BYTE *p = TP->parms_in + TP->parms_in_len;
  p[0] = (BYTE) (value & 0xFF);
  p[1] = (BYTE) (value >> 8 );
  p[2] = (BYTE) (value >> 16 );
  p[3] = (BYTE) (value >> 24 );
  TP->parms_in_len+=4;
}

/* ---------- */

void Transact_addstring(struct TransactParms *TP, const char *str)
{
  BYTE *p = TP->parms_in + TP->parms_in_len;
  int l = strlen(str)+1;
  //*p++ = 4; /* ASCII string */
  memcpy ( p, str, l );
  TP->parms_in_len += l;// + 1;
}

WORD Transact_getword(BYTE *p)
{
  return ( p[0] + (p[1] << 8));
}

DWORD Transact_getlong(BYTE *p)
{
  return ( p[0] + (p[1] << 8) + (p[2] << 16)+ (p[3] << 24));
}

BYTE *Transact_getpointer(struct TransactParms *TP, BYTE *p)
{
  int ptrval;

  ptrval = Transact_getword(p) + TP->data_out_len - TP->data_out_maxlen;
  if ( ptrval <= 0 || ptrval >= TP->data_out_len )
    return NULL;

  return TP->data_out_buf + ptrval;
}


/* ---------- */

#ifdef LONGNAMES
void Transact_addsetupword(struct TransactParms *TP, int value)
{
  if (TP->setup_in_len < MAX_SETUPWORDS)
    TP->setup_in[TP->setup_in_len++] = value;
  else
    debug0("**** Transact_addsetupword = TOO MANY SETUP WORDS\n");
}

void Transact_addroutepath(struct TransactParms *TP, const char *path)
{
   int len = strlen(path), wds;
   if (len % 2) ++len;
   wds = len / 2;
   if ((wds + TP->setup_in_len) < MAX_SETUPWORDS) {
     /* NOTE - we do not put the terminator in if the string was an even
      * number of bytes long.  If it was an odd number of bytes long we
      * need to zero pad, hence we can just round len up to a multiple
      * of 2 and allow the source string terminator to be the destination
      * buffer pad byte.
      */
     memcpy(&TP->setup_in[TP->setup_in_len], path, len);
     TP->setup_in_len += wds;
   }
   else
     debug0("**** Transact_addroutepath => too long!!\n");
}
#endif

void Transact_init(struct TransactParms *TP, int ret_param_len)
{
        TP->parms_in = SMB_WorkBuf;
        TP->parms_in_len = 0;
        TP->data_in = NULL;
        TP->data_in_len = 0;
        TP->parms_out_buf = SMB_WorkBuf;
        TP->parms_out_maxlen = min(ret_param_len, SMBWORKBUF_SIZE);
        TP->data_out_maxlen = SMBWORKBUF_SIZE - TP->parms_out_maxlen;
        TP->data_out_buf = SMB_WorkBuf + TP->parms_out_maxlen;
#ifdef LONGNAMES
        TP->setup_out_maxlen = MAX_SETUPWORDS;
        TP->setup_in_len = 0;
#endif
}
@


1.3
log
@Fix for renames where only the case has changed.
Detail:
 Added an extra check after the Xlate path resolution code so that
 the case of the path given to resolve is honoured. This now means that
 the strcmp() done in SMB_Rename fails and the rename is actually sent to
 the server. Before "*rename test Test" would have the path resolved and
 since 'test' already existed both names would be the same, in this example
 something like "*rename A:\test A:\test" would result.
Admin:
 Made the non LONGNAMES version compile again (not tested).
 Removed local definitions of FSControl reason codes, uses Interface header
 now.
 Made the case of #includes match CVS to allow future compilation on a case
 sensitive system.
 Deleted unused "Version" header.

Version 2.34. Tagged as 'LanManFS-2_34'
@
text
@d33 1
a34 1
#include "stdtypes.h"
@


1.2
log
@  Support for long filename.
  Support for spaces in machine names.
  Merge of sbrodie_LanManFS_dev branch to trunk.
Detail:
  LanManFS 2.00 supports the "NT LM 0.12" protocol, enabling it to
    use long filenames on mounted shares.
Admin:
  Supporting documentation:
    1215,256/FS: LanManFS Software Functional Specification.
  Same as LanManFS-1_87_1_1_1_1_2_13.

Version 2.00. Tagged as 'LanManFS-2_00'
@
text
@d33 1
d35 1
a35 3
#include "buflib.h"
#include "NetBIOS.h"
#include "smb.h"
@


1.1
log
@file Transact was initially added on branch sbrodie_LanManFS_dev.
@
text
@d1 142
@


1.1.2.1
log
@  First cut at long filenames in LanManFS.  *Cat and *Ex work.
  Pretty much nothing else does.
Detail:
  Now uses long filenames if available, and switches to the advanced
    SMB protocol and Transact2 commands to do work with long filenames.
Admin:
  Work in progress.  End of week's work checkin point only.  Do not use.

Version 1.87, 1.1.1.1.2.2. Tagged as 'LanManFS-1_87-1_1_1_1_2_2'
@
text
@a0 142
/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*
*  Transact.C  -- SMB Transact and Transact2 related support routines
*
*  08-12-98 sbrodie  Original
*
*/

/* Standard includes */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"

/* Our includes */

#include "stdtypes.h"
#include "buflib.h"
#include "NetBIOS.h"
#include "smb.h"
#include "Transact.h"

/*
 * These routines are provided for the benefit of SMB.c:SMB_Transact2()
 *
 */

void Transact_addword(struct TransactParms *TP, int value)
{
  BYTE *p = TP->parms_in + TP->parms_in_len;
  p[0] = (value & 0xFF);
  p[1] = (value >> 8 );
  TP->parms_in_len+=2;
}

/* ---------- */

void Transact_addlong(struct TransactParms *TP, long value)
{
  BYTE *p = TP->parms_in + TP->parms_in_len;
  p[0] = (BYTE) (value & 0xFF);
  p[1] = (BYTE) (value >> 8 );
  p[2] = (BYTE) (value >> 16 );
  p[3] = (BYTE) (value >> 24 );
  TP->parms_in_len+=4;
}

/* ---------- */

void Transact_addstring(struct TransactParms *TP, const char *str)
{
  BYTE *p = TP->parms_in + TP->parms_in_len;
  int l = strlen(str)+1;
  //*p++ = 4; /* ASCII string */
  memcpy ( p, str, l );
  TP->parms_in_len += l;// + 1;
}

WORD Transact_getword(BYTE *p)
{
  return ( p[0] + (p[1] << 8));
}

DWORD Transact_getlong(BYTE *p)
{
  return ( p[0] + (p[1] << 8) + (p[2] << 16)+ (p[3] << 24));
}

BYTE *Transact_getpointer(struct TransactParms *TP, BYTE *p)
{
  int ptrval;

  ptrval = Transact_getword(p) + TP->data_out_len - TP->data_out_maxlen;
  if ( ptrval <= 0 || ptrval >= TP->data_out_len )
    return NULL;

  return TP->data_out_buf + ptrval;
}


/* ---------- */

#ifdef LONGNAMES
void Transact_addsetupword(struct TransactParms *TP, int value)
{
  if (TP->setup_in_len < MAX_SETUPWORDS)
    TP->setup_in[TP->setup_in_len++] = value;
  else
    debug0("**** Transact_addsetupword = TOO MANY SETUP WORDS\n");
}

void Transact_addroutepath(struct TransactParms *TP, const char *path)
{
   int len = strlen(path), wds;
   if (len % 2) ++len;
   wds = len / 2;
   if ((wds + TP->setup_in_len) < MAX_SETUPWORDS) {
     /* NOTE - we do not put the terminator in if the string was an even
      * number of bytes long.  If it was an odd number of bytes long we
      * need to zero pad, hence we can just round len up to a multiple
      * of 2 and allow the source string terminator to be the destination
      * buffer pad byte.
      */
     memcpy(&TP->setup_in[TP->setup_in_len], path, len);
     TP->setup_in_len += wds;
   }
   else
     debug0("**** Transact_addroutepath => too long!!\n");
}
#endif

void Transact_init(struct TransactParms *TP, int ret_param_len)
{
        TP->parms_in = SMB_WorkBuf;
        TP->parms_in_len = 0;
        TP->data_in = NULL;
        TP->data_in_len = 0;
        TP->parms_out_buf = SMB_WorkBuf;
        TP->parms_out_maxlen = min(ret_param_len, SMBWORKBUF_SIZE);
        TP->data_out_maxlen = SMBWORKBUF_SIZE - TP->parms_out_maxlen;
        TP->data_out_buf = SMB_WorkBuf + TP->parms_out_maxlen;
#ifdef LONGNAMES
        TP->setup_out_maxlen = MAX_SETUPWORDS;
        TP->setup_in_len = 0;
#endif
}
@
