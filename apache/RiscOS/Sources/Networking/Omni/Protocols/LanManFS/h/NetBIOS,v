head	1.4;
access;
symbols
	LanManFS-2_62:1.4
	LanManFS-2_61:1.4
	LanManFS-2_60:1.4
	LanManFS-2_59:1.4
	LanManFS-2_58:1.4
	LanManFS-2_57:1.4
	LanManFS-2_56:1.4
	LanManFS-2_55:1.4
	LanManFS-2_54:1.4
	LanManFS-2_53:1.4
	LanManFS-2_52:1.4
	LanManFS-2_51:1.4
	LanManFS-2_50:1.4
	LanManFS-2_49:1.4
	LanManFS-2_48:1.4
	LanManFS-2_47:1.4
	LanManFS-2_46:1.4
	LanManFS-2_45:1.4
	LanManFS-2_44:1.4
	LanManFS-2_43:1.4
	LanManFS-2_42:1.4
	LanManFS-2_41:1.4
	LanManFS-2_40:1.4
	LanManFS-2_39:1.4
	LanManFS-2_38:1.4
	LanManFS-2_37:1.3
	LanManFS-2_36:1.3
	LanManFS-2_35:1.3
	LanManFS-2_34:1.3
	LanManFS-2_33:1.3
	LanManFS-2_32:1.3
	LanManFS-2_31:1.3
	RO_5_07:1.3
	LanManFS-2_30:1.3
	LanManFS-2_29:1.3
	LanManFS-2_28:1.3
	LanManFS-2_27:1.3
	LanManFS-2_26:1.3
	LanManFS-2_25:1.3
	LanManFS-2_24:1.3
	LanManFS-2_23:1.3
	LanManFS-2_22:1.3
	LanManFS-2_21:1.3
	LanManFS-2_20:1.3
	LanManFS-2_19:1.3
	LanManFS-2_18:1.3
	LanManFS-2_17:1.2
	LanManFS-2_16:1.2
	LanManFS-2_15:1.2
	LanManFS-2_14:1.2
	LanManFS-2_13:1.1.1.1
	LanManFS-2_12:1.1.1.1
	LanManFS-2_11:1.1.1.1
	LanManFS-2_10:1.1.1.1
	LanManFS-2_09:1.1.1.1
	LanManFS-2_08:1.1.1.1
	LanManFS-2_07:1.1.1.1
	LanManFS-2_06:1.1.1.1
	LanManFS-2_05:1.1.1.1
	LanManFS-2_04:1.1.1.1
	LanManFS-2_03:1.1.1.1
	LanManFS-2_02:1.1.1.1
	LanManFS-2_01:1.1.1.1
	LanManFS-2_00:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_13:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_12:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_11:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_10:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_9:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_8:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_7:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_6:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_5:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_4:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_3:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_2:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_1:1.1.1.1
	sbrodie_LanManFS_dev:1.1.1.1.0.2
	sbrodie_LanManFS_dev_bp:1.1.1.1
	LanManFS-1_87:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2012.11.11.20.43.20;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	3D5DE5lr2isCFZrw;

1.3
date	2001.01.15.12.49.49;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.11.15.55.01;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.03.13.54.47;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.03.13.54.47;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix and speed up EXT#handle=number doing nothing when number is beyond 2GB
Internally LanManFS was representing file offsets and data lengths as signed numbers, while in general this doesn't matter (they are passed through opaquely as just numbers and not manipulated) in a couple of places they were being used as while () loop exit conditions.
Function WriteZeroes (used when extending a file via OS_Args) therefore never performed the call to SMB_Write when beyond 2G because the loop condition was never met.
Additionally, it was literally transferring buffers of zeros across the network which is unnecessary as the server is documented as doing a zero fill itself, this represents at least a x40 speed up (on a slow 1MB/s drive write speed at the server end) or more.
Changed offset & lengths from int to uint.
Added the earlier CIFS spec (the later copy is missing section 5 for some reason) to docs.

Version 2.38. Tagged as 'LanManFS-2_38'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*
*  NETBIOS.H  -- Header for NetBIOS functions
*
*  14-02-94 INH  Original
*  11-10-94      Revamped, new name management
*  18-12-95	 NB_Init now does most network startup.
*  25-04-96	 Now uses function pointers to allow IP/NetBEUI switch
*/

/* Basic types & structures --------------------------- */

typedef void *hNAME;     /* NetBIOS name handle */
typedef void *hSESSION;  /* NetBIOS session handle */

/* ---------- */

typedef enum
{
  ntSERVER   = 0x20,
  ntMACHINE  = 0x00,
  ntUSER     = 0x03,
  ntFORWD    = 0x05,
  ntPRIMARYDC= 0x1B,
  ntMBROWSER = 0x1D,
  ntELECTION = 0x1E
}
  nametype_t;

#define ANY_NAME_TYPE   (-1)

/* ---------- */

typedef union
{
  int   c4 [4];
  BYTE  b[16];
}
  NETNAME;

/* ---------- */

struct FindName_res
{
  NETNAME    name;
  nametype_t type;
  char       flags;
#define FN_GROUPNAME 0x80
};

/* Structure containing all transport type declarations ---------- */

/* We have two transport protocols (IP and NetBEUI) and currently
   we select which one to use by redirecting all the function calls
   via function pointers. It's not the ideal situation, where both
   transports could operate simultaneously, but if I'm going to do
   that, I'm going to do it in C++ */

struct NETBIOS_TRANSPORT
{
  hNAME	hMachineName;
  err_t	(*pfnStartup) (void);
  void	(*pfnShutdown) (void);
  err_t	(*pfnFormatName) ( nametype_t nt, char *name, NETNAME *pnn );
  nametype_t (*pfnDecodeName) ( NETNAME *pnn, char *buf);
  bool  (*pfnMatchName) ( NETNAME *pnn1, NETNAME *pnn2 );
  err_t (*pfnAddLocalName) ( nametype_t nt, char *name, hNAME *phName );
  err_t (*pfnRemoveLocalName) ( hNAME hName );
  err_t (*pfnOpenSession) ( hNAME hLocalName, NETNAME *pnnFarEnd,
                              hSESSION *phSession );
  err_t (*pfnSendData) ( hSESSION hS, BUFCHAIN Data );
  err_t (*pfnSendBlockData) ( hSESSION hS, BYTE *where, uint datalen );
  err_t (*pfnClearRxQueue) ( hSESSION hS );
  err_t (*pfnGetData) ( hSESSION hS, BUFCHAIN *pOutData, int timeout );
  err_t (*pfnGetBlockData) ( hSESSION hS, BYTE *where, uint *len_in_out,
                                                  int timeout );
  bool  (*pfnLinkOK) ( hSESSION hS );
  err_t (*pfnCloseSession) ( hSESSION hS );
  int   (*pfnFindNames) ( NETNAME *pnnFind,
                          nametype_t ntFind,
                          struct FindName_res *pResults,
                          int results_max,
                          int timeout );
  char * (*pfnDescribeLink) ( hSESSION hS );
  void   (*pfnInternetGone) ( void );
  void   (*pfnInternetInit) ( void );
};

/* Definitions for supplied transports ------------------------- */

extern struct NETBIOS_TRANSPORT *NB_ActiveTransport;

/* Call one of these setup functions to point NB_ActiveTransport at the
   correct set of functions */

extern void NB_NetBEUI_Setup(void);
extern void NB_NBIP_Setup(void);


/* Macro definitions ----------------- */

#define NB_MachineName		(NB_ActiveTransport->hMachineName)
#define NB_Startup(a)		(NB_ActiveTransport->pfnStartup(a))
#define NB_Shutdown(a)		(NB_ActiveTransport->pfnShutdown(a))
#define NB_FormatName(a,b,c)	(NB_ActiveTransport->pfnFormatName(a,b,c))
#define NB_DecodeName(a,b)	(NB_ActiveTransport->pfnDecodeName(a,b))

#define NB_MatchName(a,b)	(NB_ActiveTransport->pfnMatchName(a,b))
#define NB_AddLocalName(a,b,c)	(NB_ActiveTransport->pfnAddLocalName(a,b,c))
#define NB_RemoveLocalName(a)	(NB_ActiveTransport->pfnRemoveLocalName(a))
#define NB_OpenSession(a,b,c)	(NB_ActiveTransport->pfnOpenSession(a,b,c))
#define NB_SendData(a,b)	(NB_ActiveTransport->pfnSendData(a,b))

#define NB_SendBlockData(a,b,c) (NB_ActiveTransport->pfnSendBlockData(a,b,c))
#define NB_ClearRxQueue(a)	(NB_ActiveTransport->pfnClearRxQueue(a))
#define NB_GetData(a,b,c)	(NB_ActiveTransport->pfnGetData(a,b,c))
#define NB_GetBlockData(a,b,c,d) (NB_ActiveTransport->pfnGetBlockData(a,b,c,d))
#define NB_LinkOK(a)		(NB_ActiveTransport->pfnLinkOK(a))

#define NB_CloseSession(a)	(NB_ActiveTransport->pfnCloseSession(a))
#define NB_FindNames(a,b,c,d,e)	(NB_ActiveTransport->pfnFindNames(a,b,c,d,e))
#define NB_DescribeLink(a)	(NB_ActiveTransport->pfnDescribeLink(a))

#define NB_InternetGone(a)	(NB_ActiveTransport->pfnInternetGone(a))
#define NB_InternetInit(a)	(NB_ActiveTransport->pfnInternetInit(a))
@


1.3
log
@  Experimental change to handle Internet modules in flash.
Detail:
  This module was ignoring the possibility of the Internet module being
    re-initialised underneath it - something which can happen if there
    is an Internet module in flash as well as main ROM.  This is an
    experimental fix for this problem.
Admin:
  Not tested.

Version 2.18. Tagged as 'LanManFS-2_18'
@
text
@d86 1
a86 1
  err_t (*pfnSendBlockData) ( hSESSION hS, BYTE *where, int datalen );
d89 1
a89 1
  err_t (*pfnGetBlockData) ( hSESSION hS, BYTE *where, int *len_in_out,
@


1.2
log
@  New build option to exclude NetBEUI support.
Detail:
  Pass OPTIONS=-DNO_NETBEUI from the Components file if you do not need
    NetBEUI support, and LanManFS will be 12K smaller.
  In NetBEUI mode, LanManFS sends Service_DCIProtocolStatus as required.
  In IP mode, LanManFS notices Service_DCIProtocolStatus from the Internet
    module when it dies and marks all its sockets as needing reconnection.
  Booting behaviour changed to look for !ArmBoot again and not attempt
    the boot if it is missing.  Removed lots of grotty backdoor hacks
    that used to be used to determine this.
Admin:
  Not tested at all.  This will need very thorough testing before it can
    be considered for release.

Version 2.14. Tagged as 'LanManFS-2_14'
@
text
@d100 1
d139 1
@


1.1
log
@Initial revision
@
text
@d99 1
d137 1
a137 8








@


1.1.1.1
log
@
LanManFS moved into Omni subdirectory.  Previous version in
RiscOS/Sources/Networking/LanManFS is now locked out.

The rest of Omni will be imported at a later date.

Version 1.87, tagged as LanManFS-1_87

@
text
@@
