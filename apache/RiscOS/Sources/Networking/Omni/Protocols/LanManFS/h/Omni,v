head	1.5;
access;
symbols
	LanManFS-2_62:1.5
	LanManFS-2_61:1.5
	LanManFS-2_60:1.5
	LanManFS-2_59:1.5
	LanManFS-2_58:1.5
	LanManFS-2_57:1.5
	LanManFS-2_56:1.5
	LanManFS-2_55:1.5
	LanManFS-2_54:1.5
	LanManFS-2_53:1.5
	LanManFS-2_52:1.5
	LanManFS-2_51:1.5
	LanManFS-2_50:1.5
	LanManFS-2_49:1.5
	LanManFS-2_48:1.5
	LanManFS-2_47:1.5
	LanManFS-2_46:1.5
	LanManFS-2_45:1.5
	LanManFS-2_44:1.5
	LanManFS-2_43:1.5
	LanManFS-2_42:1.5
	LanManFS-2_41:1.5
	LanManFS-2_40:1.5
	LanManFS-2_39:1.4
	LanManFS-2_38:1.3
	LanManFS-2_37:1.3
	LanManFS-2_36:1.3
	LanManFS-2_35:1.3
	LanManFS-2_34:1.3
	LanManFS-2_33:1.3
	LanManFS-2_32:1.3
	LanManFS-2_31:1.2
	RO_5_07:1.2
	LanManFS-2_30:1.2
	LanManFS-2_29:1.2
	LanManFS-2_28:1.2
	LanManFS-2_27:1.2
	LanManFS-2_26:1.2
	LanManFS-2_25:1.2
	LanManFS-2_24:1.2
	LanManFS-2_23:1.2
	LanManFS-2_22:1.2
	LanManFS-2_21:1.2
	LanManFS-2_20:1.2
	LanManFS-2_19:1.2
	LanManFS-2_18:1.2
	LanManFS-2_17:1.2
	LanManFS-2_16:1.2
	LanManFS-2_15:1.2
	LanManFS-2_14:1.2
	LanManFS-2_13:1.2
	LanManFS-2_12:1.2
	LanManFS-2_11:1.2
	LanManFS-2_10:1.2
	LanManFS-2_09:1.2
	LanManFS-2_08:1.2
	LanManFS-2_07:1.2
	LanManFS-2_06:1.2
	LanManFS-2_05:1.2
	LanManFS-2_04:1.2
	LanManFS-2_03:1.2
	LanManFS-2_02:1.1.1.1
	LanManFS-2_01:1.1.1.1
	LanManFS-2_00:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_13:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_12:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_11:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_10:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_9:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_8:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_7:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_6:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_5:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_4:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_3:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_2:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_1:1.1.1.1
	sbrodie_LanManFS_dev:1.1.1.1.0.2
	sbrodie_LanManFS_dev_bp:1.1.1.1
	LanManFS-1_87:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2013.10.03.07.27.13;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	iTaBDwF1woaPMO7x;

1.4
date	2013.09.30.19.47.07;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	MoU9V9JbMV2FYu7x;

1.3
date	2009.04.15.16.00.08;	author bavison;	state Exp;
branches;
next	1.2;
commitid	GhZBwZ2GN8lg58Kt;

1.2
date	99.03.01.16.58.31;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.03.13.54.47;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.03.13.54.47;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Internationalised
Unused LMFiler put in the attic.
As LanMan has historically put its resources into ThirdPart/OmniClient this component has no ROM resources phase - it still registers the resources at run time.

Version 2.40. Tagged as 'LanManFS-2_40'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*  Lan Manager client
*
*  Omni.H -- OmniFiler interface header
*
*  Versions
*  14-10-94 INH Original
*
*/

extern err_t Omni_MountServer ( char *servname, char *userID, char *passwd,
         char *mountname, char *mountpath, int *mount_id_out );

extern err_t Omni_DismountServer ( int mount_id );

extern err_t Omni_GetMountInfo ( int mount_id, const char **pServName,
  const char **pUserName, const char **pMountName, const char **pMountPath, int *pServerID );

extern err_t Omni_GetDefaultType ( char *leafname, int *ptype_out );

extern int Omni_GetMountID ( char *name );

extern char Omni_GetDrvLetter ( char *name );

extern void Omni_StartUp ( void );
extern void Omni_Shutdown ( void );
extern void Omni_ClearLists ( void );

extern void Omni_ServiceCall ( _kernel_swi_regs *R );

extern void Omni_RecheckInfo ( int flags );
#define RI_SERVERS   0
#define RI_MOUNTS    1
#define RI_PRINTERS  2

extern _kernel_oserror *OmniOp_SWI ( _kernel_swi_regs *R );
extern _kernel_oserror *Omni_FreeOp_SWI ( _kernel_swi_regs *R );


extern void Omni_Debug(void);
extern _kernel_oserror *Omni_DumpShares(char *server_name);
extern _kernel_oserror *Omni_DumpServers(void);

extern void Omni_AddInfo ( int flags, const char *server, const char *descr, const char *comment );
#define OAI_SERVER     0
#define OAI_DISK       1
#define OAI_PRINTER    2
#define OAI_DEVICE     3
#define OAI_IPC        4

/* These routines are actually in S.Interface */
extern void OmniS_Suicide (char *modname);
extern void OmniS_ResourceInit (void);
extern void OmniS_ResourceShutdown (void);
extern void OmniS_ResFSStarting(int R2, int R3);

/* OmniClient SWI definitions --------------- */
#define Omni_base 0x4A200

#define SWI_Omni_EnumerateMounts      (Omni_base+0)
#define SWI_Omni_RegisterClient       (Omni_base+1)
#define RC_DOES_FILES      (1<<0)
#define RC_NEEDS_USERID    (1<<1)
#define RC_NEEDS_PASSWD    (1<<2)
#define RC_NEEDS_MOUNTPATH (1<<3)
#define RC_NEEDS_AUTHSERV  (1<<4)
#define RC_LOGON_TYPE      (1<<6)
#define RC_DOES_PRINT      (1<<8)
#define RC_NEEDS_PRINTPWD  (1<<9)
#define RC_NEEDS_PRINTLEN  (1<<10)
#define RC_EXTN_CHAR(a) ((a) << 16)
#define SWI_Omni_DeregisterClient     (Omni_base+2)
#define SWI_Omni_ConvertClientToAcorn (Omni_base+4)
@


1.4
log
@Makefile recreated from fragments
Fixed up a couple of trivial warnings with the stricter checking.
Removed OmniS_FastMultiply64 and rewrote the function in C, this allows the compiler to spot and use UMULL on architectures supporting that instruction.
Tested in a RAM build against a WinXP SP3 server with a drive > 4GB.

Version 2.39. Tagged as 'LanManFS-2_39'
@
text
@a24 2
#define Service_OmniAction 0xA0

d30 2
a31 2
extern err_t Omni_GetMountInfo ( int mount_id, char **pServName,
  char **pUserName, char **pMountName, char **pMountPath, int *pServerID );
d58 1
a58 1
extern void Omni_AddInfo ( int flags, char *server, char *descr, char *comment );
@


1.3
log
@  Multiple fixes.
Detail:
  Too many to list here: see doc/RPSChanges.
Admin:
  Received from Rob Sprowson approx 2009-02-08. Builds, but not tested by ROOL.

Version 2.32. Tagged as 'LanManFS-2_32'
@
text
@a71 1
extern void OmniS_FastMultiply64(void *result, int arg1, int arg2);
@


1.2
log
@  New *LMLS command.
  Fix for ./.. files in short filename shares.
  Long multiply now provided in assembler.
Detail:
  *LMLS is a new filesystem-specific command which performs the same
    task as "smbclient -L" does under UNIX - ie. listing all the shares
    available on the specified host.
  When enumerating the shares on a remote server, LanManFS now remembers
    all the printers, IPC, device and disc shares (for *LMLS to output).
  The 32x32->64 multiply routine is now provided in assembler instead of
    the previous huge amount of obscure C taken from NSPRLib.  This is
    more understandable (and almost certainly far smaller and quicker
    and doesn't need a hack to stop the compiler mis-optimising it!)
  Old short filename shares still had problems with the . and .. file
    filtering.  Programmer fault there - should've let the compiler do
    the optimisations :-)
  Server info string fixed to byte-reverse the port numbers when printing
    the string into the info buffer.  Now claims to be talking to port 139
    as it should.
Admin:
  Tested in general desktop use for several days, plus experimental versions
    tested in other boot ROMs.

Version 2.03. Tagged as 'LanManFS-2_03'
@
text
@a44 1
extern bool Omni_Registered;
@


1.1
log
@Initial revision
@
text
@d58 2
d61 1
a61 1
extern void Omni_AddInfo ( int flags, char *server, char *descr );
d65 2
d73 1
@


1.1.1.1
log
@
LanManFS moved into Omni subdirectory.  Previous version in
RiscOS/Sources/Networking/LanManFS is now locked out.

The rest of Omni will be imported at a later date.

Version 1.87, tagged as LanManFS-1_87

@
text
@@
