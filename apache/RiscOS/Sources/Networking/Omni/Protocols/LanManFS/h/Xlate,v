head	1.7;
access;
symbols
	LanManFS-2_62:1.7
	LanManFS-2_61:1.7
	LanManFS-2_60:1.7
	LanManFS-2_59:1.7
	LanManFS-2_58:1.7
	LanManFS-2_57:1.7
	LanManFS-2_56:1.7
	LanManFS-2_55:1.7
	LanManFS-2_54:1.7
	LanManFS-2_53:1.7
	LanManFS-2_52:1.7
	LanManFS-2_51:1.7
	LanManFS-2_50:1.7
	LanManFS-2_49:1.7
	LanManFS-2_48:1.7
	LanManFS-2_47:1.7
	LanManFS-2_46:1.7
	LanManFS-2_45:1.7
	LanManFS-2_44:1.7
	LanManFS-2_43:1.7
	LanManFS-2_42:1.7
	LanManFS-2_41:1.7
	LanManFS-2_40:1.7
	LanManFS-2_39:1.6
	LanManFS-2_38:1.6
	LanManFS-2_37:1.6
	LanManFS-2_36:1.6
	LanManFS-2_35:1.5
	LanManFS-2_34:1.5
	LanManFS-2_33:1.4
	LanManFS-2_32:1.4
	LanManFS-2_31:1.3
	RO_5_07:1.3
	LanManFS-2_30:1.3
	LanManFS-2_29:1.3
	LanManFS-2_28:1.3
	LanManFS-2_27:1.3
	LanManFS-2_26:1.3
	LanManFS-2_25:1.3
	LanManFS-2_24:1.3
	LanManFS-2_23:1.3
	LanManFS-2_22:1.2
	LanManFS-2_21:1.2
	LanManFS-2_20:1.2
	LanManFS-2_19:1.2
	LanManFS-2_18:1.2
	LanManFS-2_17:1.2
	LanManFS-2_16:1.2
	LanManFS-2_15:1.2
	LanManFS-2_14:1.2
	LanManFS-2_13:1.2
	LanManFS-2_12:1.2
	LanManFS-2_11:1.2
	LanManFS-2_10:1.2
	LanManFS-2_09:1.2
	LanManFS-2_08:1.2
	LanManFS-2_07:1.2
	LanManFS-2_06:1.2
	LanManFS-2_05:1.2
	LanManFS-2_04:1.2
	LanManFS-2_03:1.2
	LanManFS-2_02:1.2
	LanManFS-2_01:1.2
	LanManFS-2_00:1.2
	LanManFS-1_87-1_1_1_1_2_13:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_12:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_11:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_10:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_9:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_8:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_7:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_6:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_5:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_4:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_3:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_2:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_1:1.1.1.1
	sbrodie_LanManFS_dev:1.1.1.1.0.2
	sbrodie_LanManFS_dev_bp:1.1.1.1
	LanManFS-1_87:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2013.10.03.07.27.13;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	iTaBDwF1woaPMO7x;

1.6
date	2012.04.14.20.57.35;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	W1UWVt811sQ2xS0w;

1.5
date	2009.08.01.08.10.28;	author rsprowson;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.15.16.00.08;	author bavison;	state Exp;
branches;
next	1.3;
commitid	GhZBwZ2GN8lg58Kt;

1.3
date	2002.12.14.13.51.17;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.12.52.35;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.03.13.54.48;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.03.13.54.48;	author sbrodie;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	98.12.11.17.26.33;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.2;

1.1.1.1.2.2
date	99.01.08.14.04.25;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.3;

1.1.1.1.2.3
date	99.01.11.15.35.26;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Internationalised
Unused LMFiler put in the attic.
As LanMan has historically put its resources into ThirdPart/OmniClient this component has no ROM resources phase - it still registers the resources at run time.

Version 2.40. Tagged as 'LanManFS-2_40'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*  Lan Manager client
*
*  Xlate.H --  DOS to RISCOS name & attrib mapping header
*
*  Versions
*  08-03-94 INH Original
*
*/

/* Some general functions */
extern int stricmp ( const char *s1, const char *s2 );
extern void strcpyn ( char *d, const char *s, int n );
extern void strcpyn_upper ( char *d, const char *s, int n );
extern void strcpyn_lower ( char *d, const char *s, int n );

extern void Xlt_Jumble ( char *str );
extern void Xlt_Unjumble ( char *str );

#define CNV_DEFAULT_TYPE        FileType_Text
#define CNV_DATETIME            1
#define CNV_ATTRIBS             2

extern void Xlt_CnvDOStoRO ( DOS_ATTRIBS *pInAttr,
                             RISCOS_ATTRIBS *pOutAttr, int flags );

extern void Xlt_CnvROtoDOS ( RISCOS_ATTRIBS *pInAttr,
                             DOS_ATTRIBS *pOutAttr, int flags );


extern char *Xlt_GetRISCOSLeafName ( char *name );
extern void Xlt_NameDOStoRO ( char *riscos_dst, char *dos_src );

/* Name mode */
#define NM_PRESERVED 0
#define NM_LOWERCASE 1
#define NM_FIRSTCAPS 2
#define NM_INTERNAL  4 /* Can't be selected at the CLI */


extern err_t Xlt_ExpandSearchEntry ( BYTE *entry,
            char *DOS_pathname,
            char *name_out,
            DOS_ATTRIBS *pOutDA,
            RISCOS_ATTRIBS *pOutRA );
extern err_t Xlt_ExpandSearchEntryX2 ( BYTE *entry,
            char *DOS_pathname,
            char *name_out,
            DOS_ATTRIBS *pOutDA,
            RISCOS_ATTRIBS *pOutRA );


extern err_t Xlt_SetDefaultDrv ( char *path );
extern err_t Xlt_ConvertPath ( char *RO_name_in,
                               char *DOS_name_out );

#ifdef LONGNAMES
/* Looks at the specified path/leaf name and determines if it has
 * a ,xxx type specifier on the end of it.  If it does, it returns
 * the address of the comma in the terminator parameter, and updates
 * the RISCOS_ATTRIBS.loadaddr field to contain the type of the file.
 * The source string is not modified (but cannot be const without
 * requiring a cast to store the address of the terminator)
 */
extern err_t Xlt_SplitLeafnameX2 ( char *leafname, RISCOS_ATTRIBS *pRA,
  char **terminator);

/* Trims the optional ",ttt" extension from 'name'
 * and returns the updated string
 */
extern err_t Xlt_RemoveROType ( char *name );

/* Alters the filename specified so that it co-incides with the
 * type encoded in the given "load addr" parameter,
 * Returns 1 if it changed the filetype, 0 otherwise
 */
extern int Xlt_AddROType ( char *leafname, uint loadaddr );
#endif
@


1.6
log
@Replace 2 (!) local definitions with MimeMap header

Version 2.36. Tagged as 'LanManFS-2_36'
@
text
@a70 6
/* Translate from our error code to RISCOS error block */
extern _kernel_oserror *Xlt_Error ( err_t err );

/* Translate from RISCOS error block to our error code */
extern err_t Xlt_SetOSError ( _kernel_oserror *err );

@


1.5
log
@Fix for renames where only the case has changed.
Detail:
 Added an extra check after the Xlate path resolution code so that
 the case of the path given to resolve is honoured. This now means that
 the strcmp() done in SMB_Rename fails and the rename is actually sent to
 the server. Before "*rename test Test" would have the path resolved and
 since 'test' already existed both names would be the same, in this example
 something like "*rename A:\test A:\test" would result.
Admin:
 Made the non LONGNAMES version compile again (not tested).
 Removed local definitions of FSControl reason codes, uses Interface header
 now.
 Made the case of #includes match CVS to allow future compilation on a case
 sensitive system.
 Deleted unused "Version" header.

Version 2.34. Tagged as 'LanManFS-2_34'
@
text
@a54 7
/* Mime mappings */
#define MimeMap_Translate       0x50B00
#define MMM_TYPE_RISCOS         0
#define MMM_TYPE_RISCOS_STRING  1
#define MMM_TYPE_MIME           2
#define MMM_TYPE_DOT_EXTN       3

@


1.4
log
@  Multiple fixes.
Detail:
  Too many to list here: see doc/RPSChanges.
Admin:
  Received from Rob Sprowson approx 2009-02-08. Builds, but not tested by ROOL.

Version 2.32. Tagged as 'LanManFS-2_32'
@
text
@d95 2
a96 2
/* Looks at the source filename for a rename operation and updates the
 * target filename to preserve any filetyping information
d98 1
a98 1
extern err_t Xlt_CnvRenameX2 ( char *src, char *dst );
@


1.3
log
@LanmanFS help syntax corrected and tidied
Change lmls command to ListFS in line with NFS
Supress LF when ListFS is issued but there are no servers present.
Cast a few things to shut some compiler warnings up.
Addition of MimeMap lookups where the file has no ",ttt" style type
appended.Previously any such files were all reported as text files so
viewing a machine would typically show whole directories full of
identical filetypes.

Version 2.23. Tagged as 'LanManFS-2_23'
@
text
@d34 3
a36 3

#define CNV_DATETIME 1
#define CNV_ATTRIBS  2
d52 2
@


1.2
log
@  Support for long filename.
  Support for spaces in machine names.
  Merge of sbrodie_LanManFS_dev branch to trunk.
Detail:
  LanManFS 2.00 supports the "NT LM 0.12" protocol, enabling it to
    use long filenames on mounted shares.
Admin:
  Supporting documentation:
    1215,256/FS: LanManFS Software Functional Specification.
  Same as LanManFS-1_87_1_1_1_1_2_13.

Version 2.00. Tagged as 'LanManFS-2_00'
@
text
@d53 7
@


1.1
log
@Initial revision
@
text
@d58 5
d75 22
a96 6






@


1.1.1.1
log
@
LanManFS moved into Omni subdirectory.  Previous version in
RiscOS/Sources/Networking/LanManFS is now locked out.

The rest of Omni will be imported at a later date.

Version 1.87, tagged as LanManFS-1_87

@
text
@@


1.1.1.1.2.1
log
@  First cut at long filenames in LanManFS.  *Cat and *Ex work.
  Pretty much nothing else does.
Detail:
  Now uses long filenames if available, and switches to the advanced
    SMB protocol and Transact2 commands to do work with long filenames.
Admin:
  Work in progress.  End of week's work checkin point only.  Do not use.

Version 1.87, 1.1.1.1.2.2. Tagged as 'LanManFS-1_87-1_1_1_1_2_2'
@
text
@a57 5
extern err_t Xlt_ExpandSearchEntryX2 ( BYTE *entry,
            char *DOS_pathname,
            char *name_out,
            DOS_ATTRIBS *pOutDA,
            RISCOS_ATTRIBS *pOutRA );
@


1.1.1.1.2.2
log
@  A few more battles have been won.  War finally starting to go my way.
Detail:
  LanManFS now uses ,xxx type notation on long filename shares.
  Character mappings improved (necessary because Windows allows so
    many extra daft characters to appear in filenames) and one-to-many
    mappings for awkward charcacters in the RISC OS->DOS world have
    been added.
  Directory searching improved so that the wildcard matching can be
    done properly.  Only Microsoft could provide you an API call to
    discover information about a filename specified with wildcards and
    NOT tell you which filename it matched. :-/
  Things remaining unimplemented so far:
    Setting filetypes.
    Creating files with specific types
    Renaming.
  All those outstanding things relate to the work done by Attr_SetInfo
    which should be the final major piece of hacking required.
Admin:
  Tested by connecting to a long filename share from both a RISC OS
    machine and a Windows NT machine.  All behaviour of the RISC OS
    machine has been verified against what the NT machine is seeing
    happening.  No surprises.  One-to-many character mappings are
    being matched correctly.
  Also tested using the Filer at the RISC OS end to navigate, run,
    and edit things on the remote share.

Version 1.87, 1.1.1.1.2.4. Tagged as 'LanManFS-1_87-1_1_1_1_2_4'
@
text
@d75 6
a80 4
#ifdef LONGNAMES
extern err_t Xlt_SplitLeafnameX2 ( char *leafname, RISCOS_ATTRIBS *pRA,
  char **terminator);
#endif
@


1.1.1.1.2.3
log
@  First version which should contain everything required for full
    long filename support of SMB shares.
Detail:
  Renaming works; setting filetypes results in a rename occurring;
  setting load/exec/attributes works - causing a rename where
  appropriate; creation of files to overwrite existing objects of
  different types causes old file to be deleted first.
Admin:
  Tested briefly and everything seems happy both at the command-line
    and from the RISC OS Filer.  More thorough development testing can
    now commence properly.

Version 1.87, 1.1.1.1.2.5. Tagged as 'LanManFS-1_87-1_1_1_1_2_5'
@
text
@a75 7
/* Looks at the specified path/leaf name and determines if it has
 * a ,xxx type specifier on the end of it.  If it does, it returns
 * the address of the comma in the terminator parameter, and updates
 * the RISCOS_ATTRIBS.loadaddr field to contain the type of the file.
 * The source string is not modified (but cannot be const without
 * requiring a cast to store the address of the terminator)
 */
a77 11

/* Looks at the source filename for a rename operation and updates the
 * target filename to preserve any filetyping information
 */
extern err_t Xlt_CnvRenameX2 ( char *src, char *dst );

/* Alters the filename specified so that it co-incides with the
 * type encoded in the given "load addr" parameter,
 * Returns 1 if it changed the filetype, 0 otherwise
 */
extern int Xlt_AddROType ( char *leafname, uint loadaddr );
@
