head	1.1;
access;
symbols
	LanManFS-2_62:1.1
	LanManFS-2_61:1.1
	LanManFS-2_60:1.1
	LanManFS-2_59:1.1
	LanManFS-2_58:1.1
	LanManFS-2_57:1.1
	LanManFS-2_56:1.1
	LanManFS-2_55:1.1
	LanManFS-2_54:1.1
	LanManFS-2_53:1.1
	LanManFS-2_52:1.1;
locks; strict;
comment	@# @;


1.1
date	2015.08.09.10.42.55;	author rool;	state Exp;
branches;
next	;
commitid	TYF5qIOL7WOKaAwy;


desc
@@


1.1
log
@Add support for NTLM authenticated logins
SMB.c:
Line 875 don't free chain pB that early it is (and was being) used later on.
Fixes to correct which SMB_RxWords the Sesskey and bloblen are retrieved from, for each of the dialects supported.
Call the new auth code when the protocol flags require it.
Don't uppercase passwords all the time, the server may require case sensitivity.
md5c.c/md4c.c:
Verbatim copies of the RSA reference implementations of MD4 and MD5 from the respective RFC's.
Auth.c:
Implementation of the hash/mash/reply that Microsoft requires. Define AUTHTEST of this file to build a simple application that verifies the algorithms.

Tested against a Win7 install, inspecting in Wireshark that the passwords are no longer sent in the clear.
Implements ticket #332.
Submission from Colin Granville.

Version 2.52. Tagged as 'LanManFS-2_52'
@
text
@/* GLOBAL.H - RSAREF types and constants
 */

/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
rights reserved.

License to copy and use this software is granted provided that it
is identified as the "RSA Data Security, Inc. MD5 Message-Digest
Algorithm" in all material mentioning or referencing this software
or this function.

License is also granted to make and use derivative works provided
that such works are identified as "derived from the RSA Data
Security, Inc. MD5 Message-Digest Algorithm" in all material
mentioning or referencing the derived work.

RSA Data Security, Inc. makes no representations concerning either
the merchantability of this software or the suitability of this
software for any particular purpose. It is provided "as is"
without express or implied warranty of any kind.

These notices must be retained in any copies of any part of this
documentation and/or software.
 */

/* PROTOTYPES should be set to one if and only if the compiler supports
  function argument prototyping.
  The following makes PROTOTYPES default to 0 if it has not already
  been defined with C compiler flags.
 */

#ifndef PROTOTYPES
#define PROTOTYPES 1
#endif

/* POINTER defines a generic pointer type */
typedef unsigned char *POINTER;

/* UINT2 defines a two byte word */
typedef unsigned short int UINT2;

/* UINT4 defines a four byte word */
typedef unsigned long int UINT4;

/* PROTO_LIST is defined depending on how PROTOTYPES is defined above.
If using PROTOTYPES, then PROTO_LIST returns the list, otherwise it
  returns an empty list.
 */
#if PROTOTYPES
#define PROTO_LIST(list) list
#else
#define PROTO_LIST(list) ()
#endif

@
