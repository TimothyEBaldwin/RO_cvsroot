head	1.6;
access;
symbols
	LanManFS-2_62:1.6
	LanManFS-2_61:1.6
	LanManFS-2_60:1.6
	LanManFS-2_59:1.6
	LanManFS-2_58:1.6
	LanManFS-2_57:1.6
	LanManFS-2_56:1.6
	LanManFS-2_55:1.5
	LanManFS-2_54:1.5
	LanManFS-2_53:1.5
	LanManFS-2_52:1.5
	LanManFS-2_51:1.5
	LanManFS-2_50:1.5
	LanManFS-2_49:1.5
	LanManFS-2_48:1.5
	LanManFS-2_47:1.5
	LanManFS-2_46:1.5
	LanManFS-2_45:1.5
	LanManFS-2_44:1.5
	LanManFS-2_43:1.5
	LanManFS-2_42:1.5
	LanManFS-2_41:1.5
	LanManFS-2_40:1.5
	LanManFS-2_39:1.5
	LanManFS-2_38:1.5
	LanManFS-2_37:1.5
	LanManFS-2_36:1.5
	LanManFS-2_35:1.5
	LanManFS-2_34:1.5
	LanManFS-2_33:1.5
	LanManFS-2_32:1.4
	LanManFS-2_31:1.3
	RO_5_07:1.3
	LanManFS-2_30:1.3
	LanManFS-2_29:1.3
	LanManFS-2_28:1.3
	LanManFS-2_27:1.3
	LanManFS-2_26:1.3
	LanManFS-2_25:1.3
	LanManFS-2_24:1.3
	LanManFS-2_23:1.3
	LanManFS-2_22:1.3
	LanManFS-2_21:1.3
	LanManFS-2_20:1.3
	LanManFS-2_19:1.3
	LanManFS-2_18:1.3
	LanManFS-2_17:1.3
	LanManFS-2_16:1.3
	LanManFS-2_15:1.3
	LanManFS-2_14:1.3
	LanManFS-2_13:1.3
	LanManFS-2_12:1.3
	LanManFS-2_11:1.3
	LanManFS-2_10:1.3
	LanManFS-2_09:1.3
	LanManFS-2_08:1.3
	LanManFS-2_07:1.3
	LanManFS-2_06:1.2
	LanManFS-2_05:1.2
	LanManFS-2_04:1.2
	LanManFS-2_03:1.2
	LanManFS-2_02:1.2
	LanManFS-2_01:1.2
	LanManFS-2_00:1.2
	LanManFS-1_87-1_1_1_1_2_13:1.1.2.2
	LanManFS-1_87-1_1_1_1_2_12:1.1.2.2
	LanManFS-1_87-1_1_1_1_2_11:1.1.2.2
	LanManFS-1_87-1_1_1_1_2_10:1.1.2.2
	LanManFS-1_87-1_1_1_1_2_9:1.1.2.2
	LanManFS-1_87-1_1_1_1_2_8:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_7:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_6:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_5:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_4:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_3:1.1.2.1
	LanManFS-1_87-1_1_1_1_2_2:1.1.2.1
	sbrodie_LanManFS_dev:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2016.05.14.12.55.16;	author rool;	state Exp;
branches;
next	1.5;
commitid	MC8JaBywHOhbWr6z;

1.5
date	2009.07.19.22.25.09;	author rsprowson;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.15.16.00.08;	author bavison;	state Exp;
branches;
next	1.3;
commitid	GhZBwZ2GN8lg58Kt;

1.3
date	99.04.29.14.27.45;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.12.52.32;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.11.17.26.32;	author sbrodie;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.12.11.17.26.33;	author sbrodie;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	99.02.03.12.51.45;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[419] LanManFS does not see all visible files
Detail:
  When the number of files read from the server didn't fit in the OS_GBPB buffer, continuation of the enumeration would fail.
  Resume key *and* filename used when resuming a directory enumeration to the same directory.
Admin:
  Submission from Colin Granville.

Version 2.56. Tagged as 'LanManFS-2_56'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*
*  Transact.h  -- SMB Transact and Transact2 related support routines
*
*  08-12-98 sbrodie  Original
*
*/

typedef struct ActiveShare  *hSHARE;

#define SEARCH_ST_SIZE  21
typedef struct {
  /* Common state */
  hSHARE search_drive;
  struct TransactParms tp;
  char   dir_path[DOS_NAME_LEN];
  DWORD  resume_key;
  DWORD  resume_fake;
  bool   resume_key_stuck;
  bool   resume_key_encountered;
  WORD   dir_handle;
  bool   dir_handle_valid;
  DWORD  actual_resume_key;
  char   resume_file_name[DOS_NAME_LEN];
  /* Cached state for short names */
  BYTE   resume_state[SEARCH_ST_SIZE];
} Transact_SearchContext;

extern void Transact_addword(struct TransactParms *TP, int value);
extern void Transact_addlong(struct TransactParms *TP, long value);
extern void Transact_addstring(struct TransactParms *TP, const char *str);

extern WORD Transact_getword(BYTE *p);
extern DWORD Transact_getlong(BYTE *p);
extern BYTE *Transact_getpointer(struct TransactParms *TP, BYTE *p);

extern void Transact_addsetupword(struct TransactParms *TP, int value);

/* The following function is used only by TRANSACT2_FSCTL - beware of
 * the length limit on path - see define for MAX_SETUPWORDS in SMB.h */
extern void Transact_addroutepath(struct TransactParms *TP, const char *path);

extern void Transact_init(struct TransactParms *TP, int ret_param_len);
@


1.5
log
@Workaround for NTFS returning resume keys of zero.
Detail:
  When the underlying FS is NTFS, eg. WinXP Pro, the requested
  resume keys for a directory search are always zero - this is passed
  back via OSGBPB and on the next call it triggers a new search. So
  we get stuck in an infinite loop.
  Now checks for a resume key stuck at zero, and makes a fake one static
  to the search context then sets the continuation bit in the SMB_FIND_NEXT
  call because the server returning the duff key remembers the position.
  Dir_CallbackFn could return with "taken" undefined. Move a few lines
  higher.
  Missing "#else" added to CHECK_ARMBOOT_EXISTS so if this is disabled
  no further attempt is made to find !ArmBoot.
  Couple of typos corrected.
  Spelling of "disk" changed to "disc" in an error message.
Admin:
  Tested with XP Pro SP3 with NTFS, directories which previously hung
  the filer now open correctly. Checked with XP Home SP3 with FAT32 to
  verify behaviour unchanged from 2.32.
  Note, with large directories the initial path translation triggers a
  dir search too which takes ages compared with the actual number of
  entries returned. This could be cached to make counting far faster.

Version 2.33. Tagged as 'LanManFS-2_33'
@
text
@d37 2
a38 1

@


1.4
log
@  Multiple fixes.
Detail:
  Too many to list here: see doc/RPSChanges.
Admin:
  Received from Rob Sprowson approx 2009-02-08. Builds, but not tested by ROOL.

Version 2.32. Tagged as 'LanManFS-2_32'
@
text
@d32 2
@


1.3
log
@  Now uses DebugLib.
  Fixed search handle haemorrhaging.
Detail:
  The directory lookup routines cached directory search handles to avoid
    hammering the server with repeated requests to open directories.
    Unfortunately, it was possible for these to be forgotten without
    being freed up leading to resource loss at the server end.  Eventually,
    the server gives up servicing you and reports errors.  This will only
    occur once a significant number of accesses have been performed (the
    number depends entirely on server configuration).  This leak is now
    fixed.
Admin:
  Tested against Cerium - debug reports that no handles are being leaked.

Version 2.07. Tagged as 'LanManFS-2_07'
@
text
@a22 2
#define SEARCH_ST_SIZE  21

d25 14
a38 16
union Transact_SearchContext {
  struct Transact1_SearchContext {
    bool NextSearchOK;
    BYTE SearchState[SEARCH_ST_SIZE];
    hSHARE SearchDrive;
  } t1;
  struct Transact2_SearchContext {
    struct Transact1_SearchContext t1;
    struct TransactParms tp;
    DWORD resume_key;
    WORD dir_handle;
    bool dir_handle_valid;
    char last_filename[DOS_NAME_LEN];
  } t2;
};

@


1.2
log
@  Support for long filename.
  Support for spaces in machine names.
  Merge of sbrodie_LanManFS_dev branch to trunk.
Detail:
  LanManFS 2.00 supports the "NT LM 0.12" protocol, enabling it to
    use long filenames on mounted shares.
Admin:
  Supporting documentation:
    1215,256/FS: LanManFS Software Functional Specification.
  Same as LanManFS-1_87_1_1_1_1_2_13.

Version 2.00. Tagged as 'LanManFS-2_00'
@
text
@d38 1
@


1.1
log
@file Transact was initially added on branch sbrodie_LanManFS_dev.
@
text
@d1 57
@


1.1.2.1
log
@  First cut at long filenames in LanManFS.  *Cat and *Ex work.
  Pretty much nothing else does.
Detail:
  Now uses long filenames if available, and switches to the advanced
    SMB protocol and Transact2 commands to do work with long filenames.
Admin:
  Work in progress.  End of week's work checkin point only.  Do not use.

Version 1.87, 1.1.1.1.2.2. Tagged as 'LanManFS-1_87-1_1_1_1_2_2'
@
text
@a0 37
/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*
*  Transact.h  -- SMB Transact and Transact2 related support routines
*
*  08-12-98 sbrodie  Original
*
*/

extern void Transact_addword(struct TransactParms *TP, int value);
extern void Transact_addlong(struct TransactParms *TP, long value);
extern void Transact_addstring(struct TransactParms *TP, const char *str);

extern WORD Transact_getword(BYTE *p);
extern DWORD Transact_getlong(BYTE *p);
extern BYTE *Transact_getpointer(struct TransactParms *TP, BYTE *p);

extern void Transact_addsetupword(struct TransactParms *TP, int value);

/* The following function is used only by TRANSACT2_FSCTL - beware of
 * the length limit on path - see define for MAX_SETUPWORDS in SMB.h */
extern void Transact_addroutepath(struct TransactParms *TP, const char *path);

extern void Transact_init(struct TransactParms *TP, int ret_param_len);
@


1.1.2.2
log
@  Fixed most dodgy pathname problems.
  All *LM... commands are now filing system commands.
  *Connect and *Disconnect renamed to *LMConnect and *LMDisconnect.
Detail:
  When translating RISC OS to DOS filenames, a loop could develop if
    any path component contained a dodgy character.  This is now fixed
    with the exception of problems when both < and > characters appear
    in pathnames since that confuses FileSwitch.  New mappings will be
    need to be agreed for these characters (and remappings for $ and %
    which overload < and > respectively)
  All *LM... commands are now filing system commands, which means that
    you need to prefix them with LanMan: unless LanManFS is the current
    filesystem (following spec review).
  *Connect and *Disconnect renamed to *LMConnect and *LMDisconnect
    (following spec review).
  Trace builds allow "*LanMan:LMNameMode 4" to enable display of system
    and hidden files on the remote filesystem.
Admin:
  Tested briefly against Windows 98 and Windows NT 4 SP3.
  If a directory name contains a dodgy character, repeated searches will
    be made on the remote filesystem.  This is inefficient and a name
    cache would alleviate this.  There is no name cacheing in the current
    version.

Version 1.87, 1.1.1.1.2.9. Tagged as 'LanManFS-1_87-1_1_1_1_2_9'
@
text
@a22 20
#define SEARCH_ST_SIZE  21

typedef struct ActiveShare  *hSHARE;

union Transact_SearchContext {
  struct Transact1_SearchContext {
    bool NextSearchOK;
    BYTE SearchState[SEARCH_ST_SIZE];
    hSHARE SearchDrive;
  } t1;
  struct Transact2_SearchContext {
    struct Transact1_SearchContext t1;
    struct TransactParms tp;
    DWORD resume_key;
    WORD dir_handle;
    char last_filename[DOS_NAME_LEN];
  } t2;
};


@
