head	1.10;
access;
symbols
	LanManFS-2_62:1.10
	LanManFS-2_61:1.10
	LanManFS-2_60:1.10
	LanManFS-2_59:1.10
	LanManFS-2_58:1.10
	LanManFS-2_57:1.10
	LanManFS-2_56:1.10
	LanManFS-2_55:1.10
	LanManFS-2_54:1.10
	LanManFS-2_53:1.10
	LanManFS-2_52:1.10
	LanManFS-2_51:1.10
	LanManFS-2_50:1.10
	LanManFS-2_49:1.10
	LanManFS-2_48:1.10
	LanManFS-2_47:1.10
	LanManFS-2_46:1.10
	LanManFS-2_45:1.10
	LanManFS-2_44:1.10
	LanManFS-2_43:1.10
	LanManFS-2_42:1.10
	LanManFS-2_41:1.9
	LanManFS-2_40:1.9
	LanManFS-2_39:1.8
	LanManFS-2_38:1.7
	LanManFS-2_37:1.6
	LanManFS-2_36:1.6
	LanManFS-2_35:1.6
	LanManFS-2_34:1.6
	LanManFS-2_33:1.5
	LanManFS-2_32:1.5
	LanManFS-2_31:1.4
	RO_5_07:1.4
	LanManFS-2_30:1.4
	LanManFS-2_29:1.4
	LanManFS-2_28:1.4
	LanManFS-2_27:1.4
	LanManFS-2_26:1.4
	LanManFS-2_25:1.4
	LanManFS-2_24:1.4
	LanManFS-2_23:1.4
	LanManFS-2_22:1.4
	LanManFS-2_21:1.4
	LanManFS-2_20:1.4
	LanManFS-2_19:1.4
	LanManFS-2_18:1.4
	LanManFS-2_17:1.4
	LanManFS-2_16:1.4
	LanManFS-2_15:1.4
	LanManFS-2_14:1.4
	LanManFS-2_13:1.4
	LanManFS-2_12:1.4
	LanManFS-2_11:1.4
	LanManFS-2_10:1.4
	LanManFS-2_09:1.4
	LanManFS-2_08:1.4
	LanManFS-2_07:1.4
	LanManFS-2_06:1.3
	LanManFS-2_05:1.3
	LanManFS-2_04:1.3
	LanManFS-2_03:1.2
	LanManFS-2_02:1.2
	LanManFS-2_01:1.2
	LanManFS-2_00:1.2
	LanManFS-1_87-1_1_1_1_2_13:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_12:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_11:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_10:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_9:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_8:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_7:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_6:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_5:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_4:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_3:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_2:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_1:1.1.1.1
	sbrodie_LanManFS_dev:1.1.1.1.0.2
	sbrodie_LanManFS_dev_bp:1.1.1.1
	LanManFS-1_87:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2013.10.04.21.00.10;	author rsprowson;	state Exp;
branches;
next	1.9;
commitid	eiQDL9obBhdLf18x;

1.9
date	2013.10.03.07.27.13;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	iTaBDwF1woaPMO7x;

1.8
date	2013.09.30.19.47.07;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	MoU9V9JbMV2FYu7x;

1.7
date	2012.11.11.20.43.21;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	3D5DE5lr2isCFZrw;

1.6
date	2009.08.01.08.10.28;	author rsprowson;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.15.16.00.08;	author bavison;	state Exp;
branches;
next	1.4;
commitid	GhZBwZ2GN8lg58Kt;

1.4
date	99.04.29.14.27.47;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	99.03.09.15.07.40;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.12.52.36;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.03.13.54.48;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.03.13.54.48;	author sbrodie;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	98.12.11.17.26.34;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.2;

1.1.1.1.2.2
date	99.01.08.14.04.26;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.3;

1.1.1.1.2.3
date	99.02.10.14.55.55;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Fix for converting "OK" into "Internal error"
Whose bright idea was it to use 0 for both? Fixes problem reported
  http://www.riscosopen.org/forum/forums/4/topics/2122

Version 2.42. Tagged as 'LanManFS-2_42'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*
*     STDTYPES.H - Header for standard types
*
*     05-02-92 INH    Original
*
*/

#include "DebugLib/DebugLib.h"

#define debug0(f) dprintf((__FILE__, f))
#define debug1(f,a) dprintf((__FILE__, f,a))
#define debug2(f,a,b) dprintf((__FILE__, f,a,b))
#define debug3(f,a,b,c) dprintf((__FILE__, f,a,b,c))

/* For RISCOS */
typedef enum { false, true }    bool;
typedef unsigned char           BYTE;
typedef unsigned short int      WORD;
typedef unsigned int            LONG;
typedef unsigned int            DWORD;
typedef unsigned long long      QWORD;
typedef int                     err_t;

#include "sys/types.h"

#define min(a,b)  ((a)<(b) ? (a):(b))
#define max(a,b)  ((a)>(b) ? (a):(b))

/* Return error codes */
#define  OK               0
#define  EHOWDTHATHAPPEN  0
#define  EBADPARAM        1
#define  ENOCONN          2
#define  EOUTOFMEM        3
#define  ELINKFAILED      4
#define  ENOHANDLES       5
#define  ERXNOTREADY      6
#define  ELINKEXISTS      7
#define  ETIMEOUT         8
#define  ENAMEEXISTS      9
#define  ECANTFINDNAME    10
#define  EDATALEN         11

/* SMB errors */
#define  ESERVERROR       12
#define  EDOSERROR        13
#define  EHARDERROR       14
#define  EPROTOCOLERR     15
#define  ENOMOREFILES     16
#define  EFILENOTFOUND    17
#define  EPATHNOTFOUND    18
#define  ENOFHANDLES      19
#define  ENOACCESS        20
#define  EFILEEXISTS      21
#define  EBADPASSWD       22
#define  EBADNAME         23
#define  EBADDRV          24
#define  ENORISCOS2       25
#define  ENOGBPB          26
#define  ENOUNBUFF        27
#define  ENOTINSTALLED    28
#define  ENOTPRESENT      29
#define  ENOWILDCARD      30
#define  EATTRIBREAD      31
#define  EATTRIBWRITE     32
#define  ESHARING         33
#define  ECONNLIMIT       34
#define  ENOSUCHSHARE     35

/* Installation errors */
#define  ECMDLINE         36
#define  ERISCOSVER       37
#define  EINITFAILED      38
#define  EDRIVERNAME      39
#define  EDRIVERTYPE      40
#define  EDRIVERVER       41

#define  ECONNEXISTS      42
#define  EPACKETTYPE      43
#define  EMBUFMODULE      44

#define  ERPCERROR        45
#define  EDISCFULL        46
#define  EDIRNOTEMPTY     47
#define  EBADRENAME       48
#define  EFILEHANDLE      49

/* NetBIOS-over-IP errors */
#define  ECREATESOCKET    50
#define  ECONNECTSOCKET   51
#define  ECONNREJECT      52
#define  ERETARGET        53
#define  ENOIFADDR        54
#define  ENOSOCKETS       55

/* More errors */
#define  EBOOTREENTRY     56
#define  EBOOTERROR       57
#define  EHOMEDIRNAME     58
#define  EHOMEDIRCONN     59
#define  EUSERUNKNOWN     60
#define  EACCDISABLED     61
#define  ELANMANFSINUSE   62

#define  EUSELASTSETOSERR 0x10000 /* Signifies non-LanMan error */

#define  OPEN_READ        0
#define  OPEN_WRITE       1
#define  OPEN_READWRITE   2

/* DOS attributes */
#define ATTR_NORM 0
#define ATTR_RO   1
#define ATTR_HID  2
#define ATTR_SYS  4
#define ATTR_VOL  8
#define ATTR_DIR  0x10
#define ATTR_ARC  0x20

typedef struct
{
  int  attr;
  uint utime;
  int  length;
  int  riscos_type;
} DOS_ATTRIBS;

/* RISCOS attributes */
#define ROA_READ   ((1<<0) | (1<<4))
#define ROA_WRITE  2
#define ROA_LOCKED 8

typedef struct
{
  uint  loadaddr;
  uint  execaddr;
  uint  flags;
} RISCOS_ATTRIBS;
@


1.9
log
@Internationalised
Unused LMFiler put in the attic.
As LanMan has historically put its resources into ThirdPart/OmniClient this component has no ROM resources phase - it still registers the resources at run time.

Version 2.40. Tagged as 'LanManFS-2_40'
@
text
@d46 1
@


1.8
log
@Makefile recreated from fragments
Fixed up a couple of trivial warnings with the stricter checking.
Removed OmniS_FastMultiply64 and rewrote the function in C, this allows the compiler to spot and use UMULL on architectures supporting that instruction.
Tested in a RAM build against a WinXP SP3 server with a drive > 4GB.

Version 2.39. Tagged as 'LanManFS-2_39'
@
text
@d119 1
a119 2
#define  MAX_ERRS         62  /* Highest error number */
#define  EXT_OS_ERROR     0x10000 /* Signifies non-LanMan error */
@


1.7
log
@Fix and speed up EXT#handle=number doing nothing when number is beyond 2GB
Internally LanManFS was representing file offsets and data lengths as signed numbers, while in general this doesn't matter (they are passed through opaquely as just numbers and not manipulated) in a couple of places they were being used as while () loop exit conditions.
Function WriteZeroes (used when extending a file via OS_Args) therefore never performed the call to SMB_Write when beyond 2G because the loop condition was never met.
Additionally, it was literally transferring buffers of zeros across the network which is unnecessary as the server is documented as doing a zero fill itself, this represents at least a x40 speed up (on a slow 1MB/s drive write speed at the server end) or more.
Changed offset & lengths from int to uint.
Added the earlier CIFS spec (the later copy is missing section 5 for some reason) to docs.

Version 2.38. Tagged as 'LanManFS-2_38'
@
text
@d36 1
a153 5

typedef struct
{
        uint lo, hi;
} fspc_64;
@


1.6
log
@Fix for renames where only the case has changed.
Detail:
 Added an extra check after the Xlate path resolution code so that
 the case of the path given to resolve is honoured. This now means that
 the strcmp() done in SMB_Rename fails and the rename is actually sent to
 the server. Before "*rename test Test" would have the path resolved and
 since 'test' already existed both names would be the same, in this example
 something like "*rename A:\test A:\test" would result.
Admin:
 Made the non LONGNAMES version compile again (not tested).
 Removed local definitions of FSControl reason codes, uses Interface header
 now.
 Made the case of #includes match CVS to allow future compilation on a case
 sensitive system.
 Deleted unused "Version" header.

Version 2.34. Tagged as 'LanManFS-2_34'
@
text
@d96 1
a96 1
#define  EDISKFULL        46
@


1.5
log
@  Multiple fixes.
Detail:
  Too many to list here: see doc/RPSChanges.
Admin:
  Received from Rob Sprowson approx 2009-02-08. Builds, but not tested by ROOL.

Version 2.32. Tagged as 'LanManFS-2_32'
@
text
@d31 6
a37 12
typedef enum { false, true } bool;

typedef unsigned char      BYTE;
typedef unsigned short int WORD;
typedef unsigned int       LONG;
#ifdef LONGNAMES
typedef unsigned int       DWORD;
#endif

/* General purpose */

/*typedef unsigned int uint;*/
a43 1

a57 1

a83 1

a94 1

d109 1
a109 1
/* More errors ----------- */
d119 1
a119 1
#define  EXT_OS_ERROR   0x10000 /* Signifies non-LanMan error */
a124 3
typedef int err_t;


a125 1

d140 1
a140 2
}
  DOS_ATTRIBS;
a142 1

d152 1
a152 4
}
  RISCOS_ATTRIBS;

#define DOS_NAME_LEN    256
d157 1
a157 13
}
  fspc_64;

/* Maximum number of connections */
#define MAX_DRIVES 8

/* Size of a userID or password (etc), including 0 at end */
#define NAME_LIMIT 16





@


1.4
log
@  Now uses DebugLib.
  Fixed search handle haemorrhaging.
Detail:
  The directory lookup routines cached directory search handles to avoid
    hammering the server with repeated requests to open directories.
    Unfortunately, it was possible for these to be forgotten without
    being freed up leading to resource loss at the server end.  Eventually,
    the server gives up servicing you and reports errors.  This will only
    occur once a significant number of accesses have been performed (the
    number depends entirely on server configuration).  This leak is now
    fixed.
Admin:
  Tested against Cerium - debug reports that no handles are being leaked.

Version 2.07. Tagged as 'LanManFS-2_07'
@
text
@d173 6
@


1.3
log
@  Changed idle-out strategy.
  Introduced new error message for re-entrancy prevention trap to use.
Detail:
  When 'pinging' an SMB server, LanManFS does not wait for any response
    but the response reading routine knows to just throw away any old
    SMBchkpth responses that it gets and try reading again.
  Re-entrancy trap now has its own error "LanManFS in use" &1663E, which
    means you no longer see "!Armboot files nested too deeply" which is
    confusing.  The only way you can provoke this message is if you use
    Alt-Break whilst the NetBIOS/IP code is executing.  The error plays
    the same part as "FileCore in use" does for FileCore.
Admin:
  Verified module still works and the anti idle-out features still work.

Version 2.04. Tagged as 'LanManFS-2_04'
@
text
@d23 1
a23 11
#ifdef DEBUG
#define debug0(f) printf (f)
#define debug1(f,a) printf (f,a)
#define debug2(f,a,b) printf (f,a,b)
#define debug3(f,a,b,c) printf (f,a,b,c)
#else
#define debug0(f)
#define debug1(f,a)
#define debug2(f,a,b)
#define debug3(f,a,b,c)
#endif
d25 4
@


1.2
log
@  Support for long filename.
  Support for spaces in machine names.
  Merge of sbrodie_LanManFS_dev branch to trunk.
Detail:
  LanManFS 2.00 supports the "NT LM 0.12" protocol, enabling it to
    use long filenames on mounted shares.
Admin:
  Supporting documentation:
    1215,256/FS: LanManFS Software Functional Specification.
  Same as LanManFS-1_87_1_1_1_1_2_13.

Version 2.00. Tagged as 'LanManFS-2_00'
@
text
@d132 1
d134 1
a134 1
#define  MAX_ERRS         61  /* Highest error number */
@


1.1
log
@Initial revision
@
text
@d24 4
a27 4
#define debug0(f) printf(f)
#define debug1(f,a) printf(f,a)
#define debug2(f,a,b) printf(f,a,b)
#define debug3(f,a,b,c) printf(f,a,b,c)
d43 3
d158 1
d164 1
a164 1
#define ROA_READ   1
@


1.1.1.1
log
@
LanManFS moved into Omni subdirectory.  Previous version in
RiscOS/Sources/Networking/LanManFS is now locked out.

The rest of Omni will be imported at a later date.

Version 1.87, tagged as LanManFS-1_87

@
text
@@


1.1.1.1.2.1
log
@  First cut at long filenames in LanManFS.  *Cat and *Ex work.
  Pretty much nothing else does.
Detail:
  Now uses long filenames if available, and switches to the advanced
    SMB protocol and Transact2 commands to do work with long filenames.
Admin:
  Work in progress.  End of week's work checkin point only.  Do not use.

Version 1.87, 1.1.1.1.2.2. Tagged as 'LanManFS-1_87-1_1_1_1_2_2'
@
text
@a42 3
#ifdef LONGNAMES
typedef unsigned int       DWORD;
#endif
@


1.1.1.1.2.2
log
@  A few more battles have been won.  War finally starting to go my way.
Detail:
  LanManFS now uses ,xxx type notation on long filename shares.
  Character mappings improved (necessary because Windows allows so
    many extra daft characters to appear in filenames) and one-to-many
    mappings for awkward charcacters in the RISC OS->DOS world have
    been added.
  Directory searching improved so that the wildcard matching can be
    done properly.  Only Microsoft could provide you an API call to
    discover information about a filename specified with wildcards and
    NOT tell you which filename it matched. :-/
  Things remaining unimplemented so far:
    Setting filetypes.
    Creating files with specific types
    Renaming.
  All those outstanding things relate to the work done by Attr_SetInfo
    which should be the final major piece of hacking required.
Admin:
  Tested by connecting to a long filename share from both a RISC OS
    machine and a Windows NT machine.  All behaviour of the RISC OS
    machine has been verified against what the NT machine is seeing
    happening.  No surprises.  One-to-many character mappings are
    being matched correctly.
  Also tested using the Filer at the RISC OS end to navigate, run,
    and edit things on the remote share.

Version 1.87, 1.1.1.1.2.4. Tagged as 'LanManFS-1_87-1_1_1_1_2_4'
@
text
@a157 1
  int  riscos_type;
@


1.1.1.1.2.3
log
@  Boot behaviour fixes.
  More debug added.
Detail:
  Trapped Service_InternetStatus reason code 0 as a tipoff to try
    to continue a pending boot operation.  Internet module is not
    sending the expected reason code 2 to indicate that the interface
    has come up when it is also having its address changed.
  Holding down SHIFT when a new connection is made prevents execution
    of !ArmBoot on the newly connected share.
  Several more debug statements added to track progress through the
    booting.
  IPConfig's internal logging system imported.  *LanMan:Free shows
    the contents of the log.
  Free space information still seems to be broken against Windows 95/98.
    Works against NT4SP4 though.
  *Free filesystem-specific command added.
Admin:
  This version managed to boot an STB22 from our NT4 server which
    was supplying it with baseline 303.
  *LanMan:Free is not yet implemented and in debug builds, shows
     the debug log instead.
  Anti-idleout work still pending.

Version 1.87, 1.1.1.1.2.11. Tagged as 'LanManFS-1_87-1_1_1_1_2_11'
@
text
@d24 4
a27 4
#define debug0(f) printf (f)
#define debug1(f,a) printf (f,a)
#define debug2(f,a,b) printf (f,a,b)
#define debug3(f,a,b,c) printf (f,a,b,c)
d164 1
a164 1
#define ROA_READ   ((1<<0) | (1<<4))
@
