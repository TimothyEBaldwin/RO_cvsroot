head	1.2;
access;
symbols
	LanManFS-2_62:1.2
	LanManFS-2_61:1.2
	LanManFS-2_60:1.2
	LanManFS-2_59:1.2
	LanManFS-2_58:1.2
	LanManFS-2_57:1.2
	LanManFS-2_56:1.2
	LanManFS-2_55:1.2
	LanManFS-2_54:1.2
	LanManFS-2_53:1.2
	LanManFS-2_52:1.2
	LanManFS-2_51:1.2
	LanManFS-2_50:1.2
	LanManFS-2_49:1.2
	LanManFS-2_48:1.2
	LanManFS-2_47:1.2
	LanManFS-2_46:1.2
	LanManFS-2_45:1.2
	LanManFS-2_44:1.2
	LanManFS-2_43:1.2
	LanManFS-2_42:1.2
	LanManFS-2_41:1.2
	LanManFS-2_40:1.2
	LanManFS-2_39:1.2
	LanManFS-2_38:1.2
	LanManFS-2_37:1.2
	LanManFS-2_36:1.2
	LanManFS-2_35:1.2
	LanManFS-2_34:1.2
	LanManFS-2_33:1.2
	LanManFS-2_32:1.2
	LanManFS-2_31:1.2
	RO_5_07:1.2
	LanManFS-2_30:1.2
	LanManFS-2_29:1.2
	LanManFS-2_28:1.2
	LanManFS-2_27:1.2
	LanManFS-2_26:1.2
	LanManFS-2_25:1.2
	LanManFS-2_24:1.2
	LanManFS-2_23:1.2
	LanManFS-2_22:1.2
	LanManFS-2_21:1.2
	LanManFS-2_20:1.2
	LanManFS-2_19:1.2
	LanManFS-2_18:1.2
	LanManFS-2_17:1.2
	LanManFS-2_16:1.2
	LanManFS-2_15:1.2
	LanManFS-2_14:1.2
	LanManFS-2_13:1.2
	LanManFS-2_12:1.2
	LanManFS-2_11:1.2
	LanManFS-2_10:1.2
	LanManFS-2_09:1.2
	LanManFS-2_08:1.2
	LanManFS-2_07:1.2
	LanManFS-2_06:1.2
	LanManFS-2_05:1.2
	LanManFS-2_04:1.2
	LanManFS-2_03:1.2
	LanManFS-2_02:1.2
	LanManFS-2_01:1.2
	LanManFS-2_00:1.2
	LanManFS-1_87-1_1_1_1_2_13:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_12:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_11:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_10:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_9:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_8:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_7:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_6:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_5:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_4:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_3:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_2:1.1.1.1.2.1
	LanManFS-1_87-1_1_1_1_2_1:1.1.1.1.2.1
	sbrodie_LanManFS_dev:1.1.1.1.0.2
	sbrodie_LanManFS_dev_bp:1.1.1.1
	LanManFS-1_87:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.02.16.12.52.23;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.03.13.54.47;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.03.13.54.47;	author sbrodie;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	98.12.04.11.37.35;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Support for long filename.
  Support for spaces in machine names.
  Merge of sbrodie_LanManFS_dev branch to trunk.
Detail:
  LanManFS 2.00 supports the "NT LM 0.12" protocol, enabling it to
    use long filenames on mounted shares.
Admin:
  Supporting documentation:
    1215,256/FS: LanManFS Software Functional Specification.
  Same as LanManFS-1_87_1_1_1_1_2_13.

Version 2.00. Tagged as 'LanManFS-2_00'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*
*     LLC.H - Header for LLC Related exports
*
*     05-02-92 INH    Original
*
*/

/* Connection handle */

typedef int HCONN;


/* Physical network address */

typedef struct
{
  BYTE b[6];
}
  NETADDR;

/* Received Packet processing functions ***************** */

/* Receive functions are expected to dispose of the mbuf chains
   they are handed. Beware! The source address for a UI_RCV_PROC is
   a transient value only!
*/

typedef void (*UI_RCV_PROC) ( NETADDR *src, BUFCHAIN data, void *private );
typedef void (*LLC_RCV_PROC) ( HCONN hc, BUFCHAIN data, void *private );


/* Connection for LLC-level streams ******************** */

extern bool  LLC_Init ( void );
extern err_t LLC_AttachDriver ( char *drivername, const NETADDR *multi_hw );
extern void  LLC_Shutdown ( void );

/* UI (Datagram) service */

extern err_t UI_SetReceiver ( int SAP, UI_RCV_PROC RcvFn, void *private );
extern err_t UI_SendData ( NETADDR *dst, int SAP, BUFCHAIN pB );

/* LLC (Logical Link) service */

extern err_t LLC_SendData ( HCONN hc, BUFCHAIN data );

extern err_t LLC_OpenLink ( NETADDR *dst, int DSAP, LLC_RCV_PROC RcvFn,
            void *Private, HCONN *pHandleOut );

extern err_t LLC_CloseLink ( HCONN hc );

extern bool LLC_LinkOK ( HCONN hc );

extern int  LLC_GetMTU (void);

/* General */

extern void          LLC_BackgroundProcess(void);
extern NETADDR       LLC_MachineAddress;
extern volatile int  LLC_TickerTime;
/*extern int LLC_CallbackFn_handler(void);*/

/* Timers ------------- */

/* We implement a general-purpose timer library, which
   provides a 'safe' callback when a given timer has
   expired.
*/

typedef void (*pfnExpire) ( void *prvdata );

struct Timer
{
  struct Timer *next, *prev;
  int           status;
#define TMR_INACTIVE 0
#define TMR_ACTIVE   1
  int           expiretime;


  pfnExpire     expirefn;
  void *        prvdata;
};

extern void TimerInit
       ( struct Timer *pT, pfnExpire expire_fn, void *prvdata );

extern void TimerStart
       ( struct Timer *pT, int timeout );

extern void TimerClear
       ( struct Timer *pT );

#define TimerRunning(p) ((p)->status == TMR_ACTIVE)


/* Exports used by CMHG veneers */

/*
extern int CallbackFn_handler(void);
extern int TickerFn_handler ( _kernel_swi_regs *R, int pw );
extern int ReceiveFn_handler ( _kernel_swi_regs *R, int pw );












*/
@


1.1
log
@Initial revision
@
text
@d50 1
a50 1
extern err_t LLC_AttachDriver ( char *drivername );
d76 1
a76 1
extern int LLC_CallbackFn_handler(void);
d114 1
d130 1
@


1.1.1.1
log
@
LanManFS moved into Omni subdirectory.  Previous version in
RiscOS/Sources/Networking/LanManFS is now locked out.

The rest of Omni will be imported at a later date.

Version 1.87, tagged as LanManFS-1_87

@
text
@@


1.1.1.1.2.1
log
@  Implemented h/w multicast filtering.
  Uses our DCI4 header file.
Detail:
  Now uses DCI4 MulticastRequest SWIs to selectively receive NetBEUI specific
    multicast IEEE frames.
  LLC_AttachDriver now takes an additional multicast MAC address parameter
    which is automatically claimed when the frames are claimed.
  Uses sys/dcistructs.h instead of its private ancient DCI4.h.  Some of the
    constants are different (old header shifted some numbers into correct
    positions for various calls - notably FRMLVL_* definitions).  Code modified
    to use the proper macros to construct these constants.
Admin:
  Build and tested briefly.  EHInfo reports MAR for IEEE frames has been set
    as expected, and *LanMan:LMLogon seems to work.

Version 1.87, 1.1.1.1.2.1. Tagged as 'LanManFS-1_87-1_1_1_1_2_1'
@
text
@d50 1
a50 1
extern err_t LLC_AttachDriver ( char *drivername, const NETADDR *multi_hw );
d76 1
a76 1
/*extern int LLC_CallbackFn_handler(void);*/
a113 1
/*
a128 1
*/
@
