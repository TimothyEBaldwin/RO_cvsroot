head	1.19;
access;
symbols
	LanManFS-2_62:1.19
	LanManFS-2_61:1.19
	LanManFS-2_60:1.19
	LanManFS-2_59:1.19
	LanManFS-2_58:1.19
	LanManFS-2_57:1.19
	LanManFS-2_56:1.19
	LanManFS-2_55:1.19
	LanManFS-2_54:1.19
	LanManFS-2_53:1.19
	LanManFS-2_52:1.19
	LanManFS-2_51:1.18
	LanManFS-2_50:1.16
	LanManFS-2_49:1.16
	LanManFS-2_48:1.16
	LanManFS-2_47:1.16
	LanManFS-2_46:1.15
	LanManFS-2_45:1.15
	LanManFS-2_44:1.15
	LanManFS-2_43:1.15
	LanManFS-2_42:1.15
	LanManFS-2_41:1.15
	LanManFS-2_40:1.14
	LanManFS-2_39:1.13
	LanManFS-2_38:1.12
	LanManFS-2_37:1.12
	LanManFS-2_36:1.12
	LanManFS-2_35:1.12
	LanManFS-2_34:1.12
	LanManFS-2_33:1.12
	LanManFS-2_32:1.12
	LanManFS-2_31:1.12
	RO_5_07:1.12
	LanManFS-2_30:1.12
	LanManFS-2_29:1.12
	LanManFS-2_28:1.12
	LanManFS-2_27:1.12
	LanManFS-2_26:1.12
	LanManFS-2_25:1.11
	LanManFS-2_24:1.11
	LanManFS-2_23:1.11
	LanManFS-2_22:1.11
	LanManFS-2_21:1.11
	LanManFS-2_20:1.10
	LanManFS-2_19:1.9
	LanManFS-2_18:1.8
	LanManFS-2_17:1.8
	LanManFS-2_16:1.8
	LanManFS-2_15:1.7
	LanManFS-2_14:1.7
	LanManFS-2_13:1.5
	LanManFS-2_12:1.5
	LanManFS-2_11:1.5
	LanManFS-2_10:1.5
	LanManFS-2_09:1.5
	LanManFS-2_08:1.4
	LanManFS-2_07:1.3
	LanManFS-2_06:1.2
	LanManFS-2_05:1.2
	LanManFS-2_04:1.2
	LanManFS-2_03:1.2
	LanManFS-2_02:1.2
	LanManFS-2_01:1.2
	LanManFS-2_00:1.2
	LanManFS-1_87-1_1_1_1_2_13:1.1.1.1.2.7
	LanManFS-1_87-1_1_1_1_2_12:1.1.1.1.2.7
	LanManFS-1_87-1_1_1_1_2_11:1.1.1.1.2.7
	LanManFS-1_87-1_1_1_1_2_10:1.1.1.1.2.6
	LanManFS-1_87-1_1_1_1_2_9:1.1.1.1.2.5
	LanManFS-1_87-1_1_1_1_2_8:1.1.1.1.2.5
	LanManFS-1_87-1_1_1_1_2_7:1.1.1.1.2.5
	LanManFS-1_87-1_1_1_1_2_6:1.1.1.1.2.5
	LanManFS-1_87-1_1_1_1_2_5:1.1.1.1.2.4
	LanManFS-1_87-1_1_1_1_2_4:1.1.1.1.2.3
	LanManFS-1_87-1_1_1_1_2_3:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_2:1.1.1.1.2.2
	LanManFS-1_87-1_1_1_1_2_1:1.1.1.1.2.1
	sbrodie_LanManFS_dev:1.1.1.1.0.2
	sbrodie_LanManFS_dev_bp:1.1.1.1
	LanManFS-1_87:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.19
date	2015.08.09.10.42.46;	author rool;	state Exp;
branches;
next	1.18;
commitid	TYF5qIOL7WOKaAwy;

1.18
date	2015.08.02.22.13.51;	author rsprowson;	state Exp;
branches;
next	1.16;
commitid	x7Azmlj12hKEdKvy;

1.16
date	2014.08.06.20.57.14;	author rsprowson;	state Exp;
branches;
next	1.15;
commitid	ZDoXXBFnai2XolLx;

1.15
date	2013.10.03.07.46.11;	author rsprowson;	state Exp;
branches;
next	1.14;
commitid	BeiPxSOMs39oTO7x;

1.14
date	2013.10.03.07.27.04;	author rsprowson;	state Exp;
branches;
next	1.13;
commitid	iTaBDwF1woaPMO7x;

1.13
date	2013.09.30.19.47.02;	author rsprowson;	state Exp;
branches;
next	1.12;
commitid	MoU9V9JbMV2FYu7x;

1.12
date	2003.03.11.20.49.00;	author kbracey;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.01.09.11.34;	author sbrodie;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.02.10.47.34;	author sbrodie;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.13.10.28.56;	author sbrodie;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.14.18.29.53;	author nbingham;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.11.15.55.55;	author sbrodie;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.11.15.55.01;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	99.11.29.13.25.38;	author sbrodie;	state Exp;
branches;
next	1.4;

1.4
date	99.11.09.14.12.06;	author nbingham;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.14.27.28;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.12.51.47;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.03.13.54.44;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.03.13.54.44;	author sbrodie;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	98.12.03.14.08.56;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.2;

1.1.1.1.2.2
date	98.12.11.17.26.23;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.3;

1.1.1.1.2.3
date	99.01.08.14.04.16;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.4;

1.1.1.1.2.4
date	99.01.11.15.35.20;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.5;

1.1.1.1.2.5
date	99.01.15.15.58.33;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.6;

1.1.1.1.2.6
date	99.02.05.15.57.11;	author sbrodie;	state Exp;
branches;
next	1.1.1.1.2.7;

1.1.1.1.2.7
date	99.02.10.14.55.45;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Add support for NTLM authenticated logins
SMB.c:
Line 875 don't free chain pB that early it is (and was being) used later on.
Fixes to correct which SMB_RxWords the Sesskey and bloblen are retrieved from, for each of the dialects supported.
Call the new auth code when the protocol flags require it.
Don't uppercase passwords all the time, the server may require case sensitivity.
md5c.c/md4c.c:
Verbatim copies of the RSA reference implementations of MD4 and MD5 from the respective RFC's.
Auth.c:
Implementation of the hash/mash/reply that Microsoft requires. Define AUTHTEST of this file to build a simple application that verifies the algorithms.

Tested against a Win7 install, inspecting in Wireshark that the passwords are no longer sent in the clear.
Implements ticket #332.
Submission from Colin Granville.

Version 2.52. Tagged as 'LanManFS-2_52'
@
text
@# Copyright 1998 Acorn Computers Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Makefile for LanManFS
#

COMPONENT    = LanManFS
OBJS         = Xlate Transact Stats SMB RPC Printers Omni NetBIOS NBIP \
               NameCache Logon LLC LanMan CoreFn buflib Attr \
               Interface Auth md5c md4c MyResObj
CINCLUDES    = -ITCPIPLibs:,C:
HDRS         =
CMHGFILE     = Lanman_MH
CMHGDEPENDS  = LanMan LLC Logon NBIP Omni
LIBS         = ${NET4LIBS} ${ASMUTILS}
RES_PATH     = ThirdParty.OmniClient
CUSTOMRES    = custom
CDEFINES     = -DCOMPAT_INET4 -DLONGNAMES ${OPTIONS}
CFLAGS       = -Wp
CDFLAGS      = -DDEBUG -DDEBUGLIB -DTRACE -Dprintf=module_printf
ROMCDEFINES  = -DROM
CMHGDEFINES  = ${OPTIONS}
ifeq ("${CMDHELP}","None")
CMHGDEFINES += -DNO_INTERNATIONAL_HELP
endif

include CModule

#
# Static dependencies
#
o.MyResObj od.MyResObj: LocalRes:ROM.Sprites ${MERGEDMSGS}PP ${DIRS}
        ${RESGEN} ${RES_AREA} $@@ ${MERGEDMSGS}PP ${RES_PATH}.${TARGET}.Messages LocalRes:ROM.Sprites ${RES_PATH}.${TARGET}.Sprites 

${MERGEDMSGS}PP: LocalRes:Messages LocalRes:CmdHelp
        ${MKDIR} ${MERGEDRDIR}${SEP}${TARGET}
        ${FAPPEND} ${MERGEDMSGS} LocalRes:Messages LocalRes:CmdHelp
        ${INSERTVERSION} ${MERGEDMSGS} > $@@

# Dynamic dependencies:
@


1.18
log
@Build fix
RES_PATH needs the component name too.

Version 2.51. Tagged as 'LanManFS-2_51'
@
text
@d21 1
a21 1
               Interface MyResObj
@


1.16
log
@Get version number from messages file
Also, rationalise the two Omni_RegisterClient calls to both use _swix since they're virtually the same function repeated twice.

Version 2.47. Tagged as 'LanManFS-2_47'
@
text
@d27 1
a27 2
RES_PATH     = ThirdParty.OmniClient.LanManFS
RES_OBJ      =
d40 1
d42 1
d44 1
a44 1
        ${RESGEN} ${RES_AREA} $@@ ${MERGEDMSGS}PP ${RES_PATH}.Messages LocalRes:ROM.Sprites ${RES_PATH}.Sprites 
d46 3
a48 1
${MERGEDMSGS}PP: ${MERGEDMSGS}
@


1.15
log
@Removed verbose mode
With LanManFS in ROM it's not actually possible to enable verbose mode, since it relies on command arguments being passed to it on initialisation. Since RMREINIT doesn't allow that you can't ever pass '-v'. Even the RAM loaded case isn't that useful, since the verbose text is output via printf() which doesn't appear in the desktop (with OmniClient).
Swap the few uses of verbose mode to route via DebugLib instead, controlled via the 'DEBUG' predefine.
Also
  Makefile ammended so debug version has a rule to make the resources area.
Built, but not tested.

Version 2.41. Tagged as 'LanManFS-2_41'
@
text
@d42 5
a46 2
o.MyResObj od.MyResObj: LocalRes:ROM.Sprites ${MERGEDMSGS} ${DIRS}
        ${RESGEN} ${RES_AREA} $@@ ${MERGEDMSGS} ${RES_PATH}.Messages LocalRes:ROM.Sprites ${RES_PATH}.Sprites 
@


1.14
log
@Internationalised
Unused LMFiler put in the attic.
As LanMan has historically put its resources into ThirdPart/OmniClient this component has no ROM resources phase - it still registers the resources at run time.

Version 2.40. Tagged as 'LanManFS-2_40'
@
text
@d42 1
a42 1
MyResObj.o: LocalRes:ROM.Sprites ${MERGEDMSGS} ${DIRS}
@


1.13
log
@Makefile recreated from fragments
Fixed up a couple of trivial warnings with the stricter checking.
Removed OmniS_FastMultiply64 and rewrote the function in C, this allows the compiler to spot and use UMULL on architectures supporting that instruction.
Tested in a RAM build against a WinXP SP3 server with a drive > 4GB.

Version 2.39. Tagged as 'LanManFS-2_39'
@
text
@d21 1
a21 1
               Errors Interface
d27 1
a32 1
ASFLAGS      = -pd "ROMSPRITES SETL {${ROMSPRITES}}"
d35 3
d41 4
@


1.12
log
@Tightened up checking of when sockets get opened and closed in an
attempt to work out why Freeway gets upset when LanManFS is
configured in IP mode.
Changed app date that OmniClient shows to be dd-mmm-yy
Added ability to include slimmer ROMSPRITES and deleted the resources
phase from the makefile: the sprites were being included once in
ResourceFS and again embedded in the module.
If the FS is unset it says so in *status rather than a blank line.

Version 2.26. Tagged as 'LanManFS-2_26'
@
text
@a16 3
# Paths
#
EXP_HDR = <export$dir>
d18 17
a34 8
#
# Component specific options:
#
COMPONENT  = LanManFS
TARGET     = LanManFS
ROM_MODULE = aof.${TARGET}
RAM_MODULE = rm.${TARGET}
DBG_MODULE = rm.${TARGET}D
d36 1
a36 143
#
# Generic options:
#
include StdTools

DFLAGS    = -DCOMPAT_INET4 -DLONGNAMES ${OPTIONS}
AFLAGS    = -depend !Depend ${THROWBACK} -Stamp -quit -predefine "ROMSPRITES SETL {${ROMSPRITES}}"
CFLAGS    = -depend !Depend ${THROWBACK} -c -Wpcs -ff -zps1 -zM ${INCLUDES},. ${DFLAGS}
CMHGFLAGS = -depend !Depend ${THROWBACK} -p ${OPTIONS}
INCLUDES  = -ITCPIPLibs:,C:

#
# Libraries
#
include ModuleLibs

MAINOBJS  = LanMan.o Omni.o Logon.o CoreFn.o Printers.o NameCache.o \
            Xlate.o buflib.o Transact.o \
            LLC.o NetBIOS.o SMB.o Attr.o RPC.o NBIP.o Stats.o

NONCOBJS  = LanMan_MH.o Errors.o Interface.o

OBJS      = ${MAINOBJS} ${NONCOBJS}

ROM_OBJS  = ${NONCOBJS} ${MAINOBJS:%.o=or.%}

DBG_OBJS  = ${NONCOBJS} ${MAINOBJS:%.o=od.%}

OBJSI     = ${NONCOBJS} ${MAINOBJS:%.o=i.%}

OBJSINST  = ${NONCOBJS} ${MAINOBJS:%.o=inst.%}

LanMan_MH.h: LanMan_MH.o
        ${CMHG} ${CMHGFLAGS} cmhg.$* -d $@@

#
# Rule patterns
#
.SUFFIXES:  .o .od .or .s .c .i .h .cmhg .inst
.c.o:;      ${CC} ${CFLAGS} -o $@@ $<
.c.or:;     ${CC} ${CFLAGS} -DROM -o $@@ $<
.c.od:;     ${CC} ${CFLAGS} -DDEBUG -DDEBUGLIB -DTRACE -Dprintf=module_printf -o $@@ $<
.c.i:;      $(CC) $(CFLAGS) -c -C -E $< >> $@@
.i.inst:;   $(CC) $(CFLAGS) -C++ -o $@@ $<
.cmhg.o:;   ${CMHG} ${CMHGFLAGS} -o $@@ $< -d $*.h
.cmhg.h:;   ${CMHG} ${CMHGFLAGS} -o $@@ -d $<
.s.o:;      ${AS} ${AFLAGS} $< $@@

#
# Build target
#
all: ${RAM_MODULE}
        @@echo ${COMPONENT}: all complete

install: ${RAM_MODULE} dirs
        ${CP} ${RAM_MODULE} ${INSTDIR}.${COMPONENT} ${CPFLAGS}
        @@echo ${COMPONENT}: all complete

dirs:
        ${MKDIR} ${INSTDIR}

o.LanMan o.LLC o.Logon o.NBIP o.Omni: LanMan_MH.h
or.LanMan or.LLC or.Logon or.NBIP or.Omni: LanMan_MH.h
od.LanMan od.LLC od.Logon od.NBIP od.Omni: LanMan_MH.h
i.LanMan i.LLC i.Logon i.NBIP i.Omni: LanMan_MH.h

#
# RISC OS ROM build rules:
#
rom: ${ROM_MODULE}
        @@echo ${COMPONENT}: rom module built

resources:
        @@echo ${COMPONENT}: no resource files to copy

preprocess: ${OBJSI} i.dirs
        @@echo ${COMPONENT}: preprocess build complete

instrument: ${OBJSINST} inst.instlib i.dirs o.dirs 
        $(LD) -rmf -o $@@ $(OBJSINST) inst.instlib $(STUBS)
        ${MODSQZ} $@@
        @@echo ${COMPONENT}: instrument build complete

o.dirs:
        ${MKDIR} o
        ${MKDIR} od
        ${MKDIR} or
        create o.dirs

i.dirs:
        ${MKDIR} i
        ${MKDIR} inst

export: 
        @@echo ${COMPONENT}: export complete

install_rom: ${ROM_MODULE}
        ${CP} ${ROM_MODULE} ${INSTDIR}.${COMPONENT} ${CPFLAGS}
        @@echo ${COMPONENT}: rom module installed

clean:
        ${WIPE} o ${WFLAGS}
        ${WIPE} od ${WFLAGS}
        ${WIPE} or ${WFLAGS}
        ${WIPE} i ${WFLAGS}
        ${WIPE} inst ${WFLAGS}
        ${WIPE} map ${WFLAGS}
        ${WIPE} linked ${WFLAGS}
        ${WIPE} aof ${WFLAGS}
        ${WIPE} rm ${WFLAGS}
        ${RM} h.LanMan_MH
        ${RM} NameCache
        @@echo ${COMPONENT}: cleaned

#
# Target 
#
${RAM_MODULE}: ${OBJS} o.dirs
        ${MKDIR} rm
        ${LD} -o $@@ -rmf ${OBJS} ${NET4LIBS} ${CLIB} ${ASMUTILS}
        ${MODSQZ} $@@
        Access $@@ RW/R

${DBG_MODULE}: ${DBG_OBJS} o.dirs
        ${MKDIR} rm
        ${LD} -o $@@ -rmf ${DBG_OBJS} ${DEBUGLIB} ${NET4LIBS} ${CLIB} ${ASMUTILS}
        ${MODSQZ} $@@

#
# ROM Target 
#
${ROM_MODULE}: ${ROM_OBJS} ${NET4LIBS} o.dirs
        ${MKDIR} aof
        ${LD} -o $@@ -aof ${ROM_OBJS} ${ROMCSTUBS} ${NET4LIBS} ${ASMUTILS}
        
#
# Final link for the ROM Image (using given base address)
#
rom_link:
        ${MKDIR} linked
        ${LD} -o linked.${COMPONENT} -rmf -base ${ADDRESS} ${ROM_MODULE} ${ABSSYM}
        ${CP} linked.${COMPONENT} ${LINKDIR}.${COMPONENT} ${CPFLAGS}
        @@echo ${COMPONENT}: rom_link complete
@


1.11
log
@  Makefile fix - a : instead of an = was causing amu to reject the Makefile.
Admin:
  Tested.


Version 2.21. Tagged as 'LanManFS-2_21'
@
text
@d36 1
a36 1
AFLAGS    = -depend !Depend ${THROWBACK} -Stamp -quit
d63 1
a63 1
	${CMHG} ${CMHGFLAGS} cmhg.$* -d $@@
d70 4
a73 4
.c.or:;      ${CC} ${CFLAGS} -DROM -o $@@ $<
.c.od:;      ${CC} ${CFLAGS} -DDEBUG -DDEBUGLIB -DTRACE -Dprintf=module_printf -o $@@ $<
.c.i:;		$(CC) $(CFLAGS) -c -C -E $< >> $@@
.i.inst:;	$(CC) $(CFLAGS) -C++ -o $@@ $<
d89 1
a89 1
	${MKDIR} ${INSTDIR}
d103 1
a103 3
        ${MKDIR} ${RESDIR}.${TARGET}
        ${CP} LocalRes:Sprites ${RESDIR}.${TARGET}.Sprites  ${CPFLAGS}
        @@echo ${COMPONENT}: resource files copied
d106 1
a106 1
	@@echo ${COMPONENT}: preprocess build complete
d109 3
a111 3
	$(LD) -rmf -o $@@ $(OBJSINST) inst.instlib $(STUBS)
	${MODSQZ} $@@
	@@echo ${COMPONENT}: instrument build complete
d114 4
a117 4
	${MKDIR} o
	${MKDIR} od
	${MKDIR} or
	create o.dirs
d120 2
a121 2
	${MKDIR} i
	${MKDIR} inst
d148 1
a148 1
	${MKDIR} rm
d154 1
a154 1
	${MKDIR} rm
d162 1
a162 1
	${MKDIR} aof
d170 1
a170 1
	${LD} -o linked.${COMPONENT} -rmf -base ${ADDRESS} ${ROM_MODULE} ${ABSSYM}
@


1.10
log
@  Added explicit dependencies on the automatically generated header.
Detail:
  Due to re-ordering of object files, the CMHG header wasn't being
    generated by the time it was first required for inclusion.  Static
    dependencies have been added to fix this.  This is going to affect
    a lot of components which rely on amu's odd order to processing
    object files (back to front compared to other makes).
Admin:
  Fixes Bugzilla bug #4064
  Tested manually.

Version 2.20. Tagged as 'LanManFS-2_20'
@
text
@d60 1
a60 1
OBJSINST  = ${NONCOBJS} ${MAINOBJS:%.o:inst.%}
@


1.9
log
@  Moved Sprites file into sensible place.
  Removed BBE specific rules due to above change obsoleting it.
Admin:
  Built.
  Requires Library 0.70 or later (RiscOS/Library; Library-0_70)

Version 2.19. Tagged as 'LanManFS-2_19'
@
text
@d75 1
d90 5
@


1.8
log
@  BBE support.
Detail:
  Private bbe rule to deal with Ant putting files in the wrong place :-(
  Resource files should be in Resources/... and not in the component root.
Admin:
  Tested on Fun8JP Source & BBE builds.

Version 2.16. Tagged as 'LanManFS-2_16'
@
text
@d25 4
a28 4
ROM_MODULE = aof.${COMPONENT}
RAM_MODULE = rm.${COMPONENT}
DBG_MODULE = rm.${COMPONENT}D

d33 1
a33 15
MKDIR   = mkdir -p
AS      = objasm
CC      = cc
CMHG    = cmhg
CP      = copy
LD      = link
RM      = remove
MODSQZ  = modsqz
WIPE    = -wipe
CD      = dir
RESGEN  = resgen


CPFLAGS = ~cfr~v
WFLAGS  = ~c~v
d44 5
a48 11
CLIB      = CLIB:o.stubs
RLIB      = RISCOSLIB:o.risc_oslib
RSTUBS    = RISCOSLIB:o.rstubs
ROMSTUBS  = RISCOSLIB:o.romstubs
ROMCSTUBS = RISCOSLIB:o.romcstubs
ABSSYM    = RISC_OSLib:o.AbsSym
INETLIB   = TCPIPLibs:o.inetlibzm
SOCKLIB   = TCPIPLibs:o.socklibzm
UNIXLIB   = TCPIPLibs:o.unixlibzm
DEBUGLIB  = C:DebugLib.o.DebugLibZM
ASMUTILS  = C:AsmUtils.o.AsmUtilsZM
d50 1
d52 1
d54 7
a60 29
OBJS      = LanMan.o Omni.o Logon.o CoreFn.o Printers.o NameCache.o \
            Xlate.o Interface.o buflib.o Transact.o \
            LLC.o NetBIOS.o SMB.o Errors.o Attr.o RPC.o NBIP.o Stats.o LanMan_MH.o

ROM_OBJS  = or.LanMan or.Omni or.Logon or.CoreFn or.Printers or.NameCache \
            or.Xlate or.buflib  Interface.o Errors.o or.Transact \
            or.LLC or.NetBIOS or.SMB or.Attr or.RPC or.NBIP or.Stats LanMan_MH.o 

#DBG_OBJS  = od.LanMan od.Omni od.Logon od.CoreFn od.Printers od.NameCache \
#            od.Xlate od.buflib  Interface.o Errors.o o.Transact \
#            od.LLC od.NetBIOS od.SMB od.Attr od.RPC od.NBIP od.Stats LanMan_MH.o 

#DBG_OBJS  = od.LanMan od.Omni od.Logon od.CoreFn od.Printers od.NameCache \
#            od.Xlate od.buflib Interface.o Errors.o od.Transact \
#            o.LLC o.NetBIOS od.SMB o.Attr od.RPC od.NBIP od.Stats LanMan_MH.o 

DBG_OBJS  = od.LanMan o.Omni o.Logon o.CoreFn o.Printers o.NameCache \
            o.Xlate o.buflib Interface.o Errors.o o.Transact \
            o.LLC o.NetBIOS od.SMB o.Attr o.RPC o.NBIP o.Stats LanMan_MH.o 


OBJSI     = i.LanMan i.Omni i.Logon i.CoreFn i.Printers i.NameCache \
            i.Xlate i.buflib i.Transact \
            i.LLC i.NetBIOS i.SMB i.Attr i.RPC i.NBIP i.Stats

OBJSINST  = LanMan_MH.o inst.LanMan inst.Omni inst.Logon inst.CoreFn inst.Printers \
            inst.Xlate inst.buflib Interface.o Errors.o inst.Transact\
            inst.NameCache\
            inst.LLC inst.NetBIOS inst.SMB inst.Attr inst.RPC inst.NBIP inst.Stats 
a76 5
# Binary Build Environment augmenting rules
BBETYPE   = local
bbe-local: bbe-generic-resources-get-alias
  BBE_Export_File Sprites

d97 2
a98 2
        ${MKDIR} ${RESDIR}.${COMPONENT}
        ${CP} Sprites ${RESDIR}.${COMPONENT}.Sprites  ${CPFLAGS}
d106 1
a106 1
	ModSqz $@@
d145 1
a145 1
        ${LD} -o $@@ -rmf ${OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} ${CLIB} ${ASMUTILS}
d151 1
a151 1
        ${LD} -o $@@ -rmf ${DBG_OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} ${DEBUGLIB} ${CLIB} ${ASMUTILS}
d157 1
a157 1
${ROM_MODULE}: ${ROM_OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} o.dirs
d159 1
a159 1
        ${LD} -o $@@ -aof ${ROM_OBJS} ${ROMCSTUBS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} ${ASMUTILS}
@


1.7
log
@Re-instated the modsqz'ing of RAM modules
@
text
@d117 5
@


1.6
log
@  New build option to exclude NetBEUI support.
Detail:
  Pass OPTIONS=-DNO_NETBEUI from the Components file if you do not need
    NetBEUI support, and LanManFS will be 12K smaller.
  In NetBEUI mode, LanManFS sends Service_DCIProtocolStatus as required.
  In IP mode, LanManFS notices Service_DCIProtocolStatus from the Internet
    module when it dies and marks all its sockets as needing reconnection.
  Booting behaviour changed to look for !ArmBoot again and not attempt
    the boot if it is missing.  Removed lots of grotty backdoor hacks
    that used to be used to determine this.
Admin:
  Not tested at all.  This will need very thorough testing before it can
    be considered for release.

Version 2.14. Tagged as 'LanManFS-2_14'
@
text
@d40 1
a40 1
MODSQZ  = |modsqz
@


1.5
log
@  32-bit compatibility added.
  Removed obsolete header files.
  Removed obsolete assembler.
  Fixed flag preservation in remaining assembler.
Detail:
  See above.
Admin:
  Built RAM build.

Version 2.09. Tagged as 'LanManFS-2_09'
@
text
@d40 1
a40 1
MODSQZ  = modsqz
d42 1
a42 1
CD	= dir
d49 1
a49 1
DFLAGS    = -UTML -DCOMPAT_INET4 -DLONGNAMES
d52 1
a52 1
CMHGFLAGS = -depend !Depend ${THROWBACK} -p
@


1.4
log
@  Updated makefile rules.
Detail:
  Added Install phase to Makefile.
  Added !MkInstall.
Admin:
  Tested on FastNC Ethernet card build.

Version 2.08. Tagged as 'LanManFS-2_08'
@
text
@d43 1
d68 1
d73 1
a73 1
            Xlate.o Interface.o RMInfo.o buflib.o Transact.o \
d77 1
a77 1
            or.Xlate or.buflib  Interface.o RMInfo.o Errors.o or.Transact \
d81 1
a81 1
#            od.Xlate od.buflib  Interface.o RMInfo.o Errors.o o.Transact \
d85 1
a85 1
#            od.Xlate od.buflib Interface.o RMInfo.o Errors.o od.Transact \
d89 1
a89 1
            o.Xlate o.buflib Interface.o RMInfo.o Errors.o o.Transact \
d98 1
a98 1
            inst.Xlate inst.buflib Interface.o RMInfo.o Errors.o inst.Transact\
d136 5
d185 1
a185 1
        ${LD} -o $@@ -rmf ${OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} ${CLIB}
d191 1
a191 1
        ${LD} -o $@@ -rmf ${DBG_OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} ${DEBUGLIB} ${CLIB}
d199 1
a199 1
        ${LD} -o $@@ -aof ${ROM_OBJS} ${ROMCSTUBS} ${UNIXLIB} ${INETLIB} ${SOCKLIB}
@


1.3
log
@  Now uses DebugLib.
  Fixed search handle haemorrhaging.
Detail:
  The directory lookup routines cached directory search handles to avoid
    hammering the server with repeated requests to open directories.
    Unfortunately, it was possible for these to be forgotten without
    being freed up leading to resource loss at the server end.  Eventually,
    the server gives up servicing you and reports errors.  This will only
    occur once a significant number of accesses have been performed (the
    number depends entirely on server configuration).  This leak is now
    fixed.
Admin:
  Tested against Cerium - debug reports that no handles are being leaked.

Version 2.07. Tagged as 'LanManFS-2_07'
@
text
@d33 1
a33 1
MKDIR   = cdir
d120 7
@


1.2
log
@  Support for long filename.
  Support for spaces in machine names.
  Merge of sbrodie_LanManFS_dev branch to trunk.
Detail:
  LanManFS 2.00 supports the "NT LM 0.12" protocol, enabling it to
    use long filenames on mounted shares.
Admin:
  Supporting documentation:
    1215,256/FS: LanManFS Software Functional Specification.
  Same as LanManFS-1_87_1_1_1_1_2_13.

Version 2.00. Tagged as 'LanManFS-2_00'
@
text
@d48 1
a48 2
# sbrodie 5/1/99: Define LANMANFS to enable use of NFS headers
DFLAGS    = -UTML -DCOMPAT_INET4 -DLANMANFS -DLONGNAMES
d66 1
d82 8
a89 3
DBG_OBJS  = od.LanMan od.Omni od.Logon od.CoreFn od.Printers od.NameCache \
            od.Xlate od.buflib Interface.o RMInfo.o Errors.o od.Transact \
            o.LLC o.NetBIOS od.SMB o.Attr od.RPC od.NBIP od.Stats LanMan_MH.o 
d109 1
a109 1
.c.od:;      ${CC} ${CFLAGS} -DDEBUG -DTRACE -Dprintf=module_printf -o $@@ $<
d177 1
a177 1
        ${LD} -o $@@ -rmf ${DBG_OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} ${CLIB}
@


1.1
log
@Initial revision
@
text
@d22 9
a44 5
AFLAGS = -depend !Depend ${THROWBACK} -Stamp -quit
CFLAGS  = -depend !Depend ${THROWBACK} -c -pcc -ff -zps1 -zM -I${INCLUDES},. ${DFLAGS} -UTML -DCOMPAT_INET4
CMHGFLAGS = -p -depend !Depend ${THROWBACK}


d48 7
a67 5
#
# Include files
#
LEVEL=		^
INCLUDES=	TCPIPLibs:,C:
a68 2
#DFLAGS   = -dDEBUG
DFLAGS   =
d70 15
a84 6
COMPONENT = LanManFS
TARGET    = rm.LanManFS
ROMTARGET = aof.LanManFS
OBJS      = LanMan_MH.o LanMan.o Omni.o Logon.o CoreFn.o Printers.o \
            Xlate.o Interface.o RMInfo.o buflib.o \
            LLC.o NetBIOS.o SMB.o Errors.o Attr.o RPC.o NBIP.o Stats.o
d86 2
a87 2
OBJSI     = i.LanMan i.Omni i.Logon i.CoreFn i.Printers \
            i.Xlate i.buflib \
d91 6
a96 2
            inst.Xlate inst.buflib Interface.o RMInfo.o Errors.o \
            inst.LLC inst.NetBIOS inst.SMB inst.Attr inst.RPC inst.NBIP inst.Stats
d101 1
a101 1
.SUFFIXES:  .o .s .c .i .h .cmhg .inst
d103 2
d107 1
a107 1
.cmhg.o:;   ${CMHG} ${CMHGFLAGS} -o $@@ $<
d113 1
a113 1
all: ${TARGET}
d119 1
a119 1
rom: ${ROMTARGET}
d122 1
a122 1
preprocess: ${OBJSI} local_dirs
d125 3
a127 3
instrument: ${OBJSINST} inst.instlib local_dirs 
	$(LD) -rmf -s link/sym -o rm.AcornPOP3u $(OBJSINST) inst.instlib $(STUBS)
	ModSqz rm.AcornPOP3u rm.AcornPOP3
d130 1
a130 1
local_dirs:
d132 5
a136 2
	${MKDIR} aof
	${MKDIR} rm
a139 1

d143 2
a144 2
install_rom: ${ROMTARGET}
        ${CP} ${ROMTARGET} ${INSTDIR}.${COMPONENT} ${CPFLAGS}
d148 11
a158 7
        ${WIPE} o.* ${WFLAGS}
        ${WIPE} i.* ${WFLAGS}
        ${WIPE} inst.* ${WFLAGS}
        ${RM} ${TARGET}
        ${RM} ${ROMTARGET}
        ${RM} map.${COMPONENT}
        ${RM} linked.${COMPONENT}
d164 2
a165 1
${TARGET}: ${OBJS}
d167 7
a173 1
        $(MODSQZ) $(TARGET)
d178 3
a180 2
${ROMTARGET}: ${OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB}
        ${LD} -o $@@ -aof ${OBJS} ${ROMCSTUBS} ${UNIXLIB} ${INETLIB} ${SOCKLIB}
d187 1
a187 3
        ${MKDIR} map
        ${LD} -o linked.${COMPONENT} -map -bin -base ${ADDRESS} ${ROMTARGET} ${ABSSYM} > map.${COMPONENT}
        truncate map.${COMPONENT} linked.${COMPONENT}
@


1.1.1.1
log
@
LanManFS moved into Omni subdirectory.  Previous version in
RiscOS/Sources/Networking/LanManFS is now locked out.

The rest of Omni will be imported at a later date.

Version 1.87, tagged as LanManFS-1_87

@
text
@@


1.1.1.1.2.1
log
@Tidying up of clean rules and directory creation
@
text
@a21 9
# Component specific options:
#
COMPONENT  = LanManFS
ROM_MODULE = aof.${COMPONENT}
RAM_MODULE = rm.${COMPONENT}
DBG_MODULE = rm.${COMPONENT}D


#
d36 5
a43 6
DFLAGS    = -UDEBUG -UTML -DCOMPAT_INET4
AFLAGS    = -depend !Depend ${THROWBACK} -Stamp -quit
CFLAGS    = -depend !Depend ${THROWBACK} -c -Wpc -ff -zps1 -zM ${INCLUDES},. ${DFLAGS}
CMHGFLAGS = -depend !Depend ${THROWBACK} -p
INCLUDES  = -ITCPIPLibs:,C:

d57 5
d63 2
d66 4
a69 1
OBJS      = LanMan.o Omni.o Logon.o CoreFn.o Printers.o \
d71 1
a71 9
            LLC.o NetBIOS.o SMB.o Errors.o Attr.o RPC.o NBIP.o Stats.o LanMan_MH.o

ROM_OBJS  = or.LanMan or.Omni or.Logon or.CoreFn or.Printers \
            or.Xlate or.buflib  Interface.o RMInfo.o Errors.o \
            or.LLC or.NetBIOS or.SMB or.Attr or.RPC or.NBIP or.Stats LanMan_MH.o 

DBG_OBJS  = od.LanMan od.Omni od.Logon od.CoreFn od.Printers \
            od.Xlate od.buflib  Interface.o RMInfo.o Errors.o \
            od.LLC od.NetBIOS od.SMB od.Attr od.RPC od.NBIP od.Stats LanMan_MH.o 
a80 3
LanMan_MH.h: LanMan_MH.o
	@@|

d84 1
a84 1
.SUFFIXES:  .o .od .or .s .c .i .h .cmhg .inst
a85 2
.c.or:;      ${CC} ${CFLAGS} -DROM -o $@@ $<
.c.od:;      ${CC} ${CFLAGS} -DTRACE -o $@@ $<
d88 1
a88 1
.cmhg.o:;   ${CMHG} ${CMHGFLAGS} -o $@@ $< -d $*.h
d94 1
a94 1
all: ${RAM_MODULE}
d100 1
a100 1
rom: ${ROM_MODULE}
d103 1
a103 1
preprocess: ${OBJSI} i.dirs
d106 3
a108 3
instrument: ${OBJSINST} inst.instlib i.dirs o.dirs 
	$(LD) -rmf -o $@@ $(OBJSINST) inst.instlib $(STUBS)
	ModSqz $@@
d111 1
a111 1
o.dirs:
d113 2
a114 5
	${MKDIR} od
	${MKDIR} or
	create o.dirs

i.dirs:
d118 1
d122 2
a123 2
install_rom: ${ROM_MODULE}
        ${CP} ${ROM_MODULE} ${INSTDIR}.${COMPONENT} ${CPFLAGS}
d127 7
a133 10
        ${WIPE} o ${WFLAGS}
        ${WIPE} od ${WFLAGS}
        ${WIPE} or ${WFLAGS}
        ${WIPE} i ${WFLAGS}
        ${WIPE} inst ${WFLAGS}
        ${WIPE} map ${WFLAGS}
        ${WIPE} linked ${WFLAGS}
        ${WIPE} aof ${WFLAGS}
        ${WIPE} rm ${WFLAGS}
        ${RM} h.LanMan_MH
d139 1
a139 2
${RAM_MODULE}: ${OBJS} o.dirs
	${MKDIR} rm
d141 1
a141 7
        ${MODSQZ} $@@
        Access $@@ RW/R

${DBG_MODULE}: ${DBG_OBJS} o.dirs
	${MKDIR} rm
        ${LD} -o $@@ -rmf $DBG_{OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} ${CLIB}
        ${MODSQZ} $@@
d146 2
a147 3
${ROM_MODULE}: ${ROM_OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} o.dirs
	${MKDIR} aof
        ${LD} -o $@@ -aof ${ROM_OBJS} ${ROMCSTUBS} ${UNIXLIB} ${INETLIB} ${SOCKLIB}
d155 2
a156 1
	${LD} -o linked.${COMPONENT} -rmf -base ${ADDRESS} ${ROM_MODULE} ${ABSSYM}
@


1.1.1.1.2.2
log
@  First cut at long filenames in LanManFS.  *Cat and *Ex work.
  Pretty much nothing else does.
Detail:
  Now uses long filenames if available, and switches to the advanced
    SMB protocol and Transact2 commands to do work with long filenames.
Admin:
  Work in progress.  End of week's work checkin point only.  Do not use.

Version 1.87, 1.1.1.1.2.2. Tagged as 'LanManFS-1_87-1_1_1_1_2_2'
@
text
@d48 1
a48 1
DFLAGS    = -UTML -DCOMPAT_INET4 -DLONGNAMES
d70 1
a70 1
            Xlate.o Interface.o RMInfo.o buflib.o Transact.o \
d74 1
a74 1
            or.Xlate or.buflib  Interface.o RMInfo.o Errors.o or.Transact \
d77 3
a79 7
#DBG_OBJS  = od.LanMan od.Omni od.Logon od.CoreFn od.Printers \
#            od.Xlate od.buflib  Interface.o RMInfo.o Errors.o o.Transact \
#            od.LLC od.NetBIOS od.SMB od.Attr od.RPC od.NBIP od.Stats LanMan_MH.o 

DBG_OBJS  = od.LanMan o.Omni od.Logon od.CoreFn od.Printers \
            od.Xlate od.buflib  Interface.o RMInfo.o Errors.o od.Transact \
            od.LLC o.NetBIOS od.SMB o.Attr od.RPC o.NBIP od.Stats LanMan_MH.o 
d82 1
a82 1
            i.Xlate i.buflib i.Transact \
d86 1
a86 1
            inst.Xlate inst.buflib Interface.o RMInfo.o Errors.o inst.Transact\
d90 1
a90 1
	${CMHG} ${CMHGFLAGS} cmhg.$* -d $@@
d98 1
a98 1
.c.od:;      ${CC} ${CFLAGS} -DDEBUG -DTRACE -o $@@ $<
d165 1
a165 1
        ${LD} -o $@@ -rmf ${DBG_OBJS} ${UNIXLIB} ${INETLIB} ${SOCKLIB} ${CLIB}
d180 1
@


1.1.1.1.2.3
log
@  A few more battles have been won.  War finally starting to go my way.
Detail:
  LanManFS now uses ,xxx type notation on long filename shares.
  Character mappings improved (necessary because Windows allows so
    many extra daft characters to appear in filenames) and one-to-many
    mappings for awkward charcacters in the RISC OS->DOS world have
    been added.
  Directory searching improved so that the wildcard matching can be
    done properly.  Only Microsoft could provide you an API call to
    discover information about a filename specified with wildcards and
    NOT tell you which filename it matched. :-/
  Things remaining unimplemented so far:
    Setting filetypes.
    Creating files with specific types
    Renaming.
  All those outstanding things relate to the work done by Attr_SetInfo
    which should be the final major piece of hacking required.
Admin:
  Tested by connecting to a long filename share from both a RISC OS
    machine and a Windows NT machine.  All behaviour of the RISC OS
    machine has been verified against what the NT machine is seeing
    happening.  No surprises.  One-to-many character mappings are
    being matched correctly.
  Also tested using the Filer at the RISC OS end to navigate, run,
    and edit things on the remote share.

Version 1.87, 1.1.1.1.2.4. Tagged as 'LanManFS-1_87-1_1_1_1_2_4'
@
text
@d48 1
a48 2
# sbrodie 5/1/99: Define LANMANFS to enable use of NFS headers
DFLAGS    = -UTML -DCOMPAT_INET4 -DLANMANFS -DLONGNAMES
d82 2
a83 2
            od.Xlate od.buflib Interface.o RMInfo.o Errors.o od.Transact \
            o.LLC o.NetBIOS o.SMB o.Attr od.RPC o.NBIP od.Stats LanMan_MH.o 
d85 1
a85 1
OBJSI     = i.LanMan i.Omni i.Logon i.CoreFn i.Printers i.PathMunge \
d91 1
a91 2
            inst.LLC inst.NetBIOS inst.SMB inst.Attr inst.RPC inst.NBIP inst.Stats \
            inst.PathMunge 
@


1.1.1.1.2.4
log
@  First version which should contain everything required for full
    long filename support of SMB shares.
Detail:
  Renaming works; setting filetypes results in a rename occurring;
  setting load/exec/attributes works - causing a rename where
  appropriate; creation of files to overwrite existing objects of
  different types causes old file to be deleted first.
Admin:
  Tested briefly and everything seems happy both at the command-line
    and from the RISC OS Filer.  More thorough development testing can
    now commence properly.

Version 1.87, 1.1.1.1.2.5. Tagged as 'LanManFS-1_87-1_1_1_1_2_5'
@
text
@d86 1
a86 1
OBJSI     = i.LanMan i.Omni i.Logon i.CoreFn i.Printers \
d92 2
a93 1
            inst.LLC inst.NetBIOS inst.SMB inst.Attr inst.RPC inst.NBIP inst.Stats 
@


1.1.1.1.2.5
log
@  Fixed logon behaviour against NT4 servers.
  Added automatic bug detection code.
Detail:
  NT4 servers use differently formatted buffer to response to the logon
    requests and this was confusing the code which only knew about the
    oldest format of this buffer.  The code now knows about all three
    different possible response formats and processes them all properly.
  Windows 95/98 servers contain a bug which cause them to reverse the
    order of the date and time fields in QPathInformation transactions.
    My earlier workaround for this was to always reverse the time/date
    pairs - which causes it to fail when talking to Windows NT servers.
    On the first QPathInformation request on a given share, the request
    is first done on the root directory, and then the (non-broken) dir
    search transaction is executed and the results compared to determine
    whether the server is broken or not.  This means that it should
    interwork with NT, 95, 98 and also with Samba (which has a build
    option for emulating this bug or not!)
  Transact2 processing code is now aware of the multiple response packet
    options and can cope with the server sending secondary responses.
  Directory search entry per call limiter re-introduced to prevent these
    from secondary responses occurring anyway as they are still a pain to
    process efficiently.
Admin:
  Tested against Windows 98 and Windows NT 4.

Version 1.87, 1.1.1.1.2.6. Tagged as 'LanManFS-1_87-1_1_1_1_2_6'
@
text
@d84 1
a84 1
            o.LLC o.NetBIOS od.SMB o.Attr od.RPC o.NBIP od.Stats LanMan_MH.o 
@


1.1.1.1.2.6
log
@  End of week checkin.  No bug fixes.  Some performance improvements.
Detail:
  Added a basic name cacheing facility.  For safety this is flushed
    every time the module returns to FileSwitch.  This does at least
    help reduce the name of directory searches required during a
    name translation.  NameCache.c comes with a test program built-in
    for stressing the cache manager.
Admin:
  Free space display doesn't work yet.
  Anti-idleout measures not implemented yet.

Version 1.87, 1.1.1.1.2.10. Tagged as 'LanManFS-1_87-1_1_1_1_2_10'
@
text
@d51 1
a51 1
CFLAGS    = -depend !Depend ${THROWBACK} -c -Wpcs -ff -zps1 -zM ${INCLUDES},. ${DFLAGS}
d70 1
a70 1
OBJS      = LanMan.o Omni.o Logon.o CoreFn.o Printers.o NameCache.o \
d74 1
a74 1
ROM_OBJS  = or.LanMan or.Omni or.Logon or.CoreFn or.Printers or.NameCache \
d78 1
a78 1
#DBG_OBJS  = od.LanMan od.Omni od.Logon od.CoreFn od.Printers od.NameCache \
d82 1
a82 1
DBG_OBJS  = od.LanMan o.Omni od.Logon od.CoreFn od.Printers od.NameCache \
d86 1
a86 1
OBJSI     = i.LanMan i.Omni i.Logon i.CoreFn i.Printers i.NameCache \
a91 1
            inst.NameCache\
a156 1
        ${RM} NameCache
@


1.1.1.1.2.7
log
@  Boot behaviour fixes.
  More debug added.
Detail:
  Trapped Service_InternetStatus reason code 0 as a tipoff to try
    to continue a pending boot operation.  Internet module is not
    sending the expected reason code 2 to indicate that the interface
    has come up when it is also having its address changed.
  Holding down SHIFT when a new connection is made prevents execution
    of !ArmBoot on the newly connected share.
  Several more debug statements added to track progress through the
    booting.
  IPConfig's internal logging system imported.  *LanMan:Free shows
    the contents of the log.
  Free space information still seems to be broken against Windows 95/98.
    Works against NT4SP4 though.
  *Free filesystem-specific command added.
Admin:
  This version managed to boot an STB22 from our NT4 server which
    was supplying it with baseline 303.
  *LanMan:Free is not yet implemented and in debug builds, shows
     the debug log instead.
  Anti-idleout work still pending.

Version 1.87, 1.1.1.1.2.11. Tagged as 'LanManFS-1_87-1_1_1_1_2_11'
@
text
@d82 1
a82 1
DBG_OBJS  = od.LanMan od.Omni od.Logon od.CoreFn od.Printers od.NameCache \
d84 1
a84 1
            o.LLC o.NetBIOS od.SMB o.Attr od.RPC od.NBIP od.Stats LanMan_MH.o 
d104 1
a104 1
.c.od:;      ${CC} ${CFLAGS} -DDEBUG -DTRACE -Dprintf=module_printf -o $@@ $<
@
