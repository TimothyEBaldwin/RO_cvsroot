head	1.11;
access;
symbols
	LanManFS-2_62:1.11
	LanManFS-2_61:1.11
	LanManFS-2_60:1.11
	LanManFS-2_59:1.11
	LanManFS-2_58:1.11
	LanManFS-2_57:1.11
	LanManFS-2_56:1.11
	LanManFS-2_55:1.11
	LanManFS-2_54:1.11
	LanManFS-2_53:1.11
	LanManFS-2_52:1.11
	LanManFS-2_51:1.11
	LanManFS-2_50:1.11
	LanManFS-2_49:1.11
	LanManFS-2_48:1.11
	LanManFS-2_47:1.11
	LanManFS-2_46:1.11
	LanManFS-2_45:1.11
	LanManFS-2_44:1.11
	LanManFS-2_43:1.11
	LanManFS-2_42:1.11
	LanManFS-2_41:1.11
	LanManFS-2_40:1.11
	LanManFS-2_39:1.10
	LanManFS-2_38:1.9
	LanManFS-2_37:1.9
	LanManFS-2_36:1.9
	LanManFS-2_35:1.9
	LanManFS-2_34:1.7
	LanManFS-2_33:1.7
	LanManFS-2_32:1.6
	LanManFS-2_31:1.5
	RO_5_07:1.5
	LanManFS-2_30:1.5
	LanManFS-2_29:1.5
	LanManFS-2_28:1.5
	LanManFS-2_27:1.5
	LanManFS-2_26:1.5
	LanManFS-2_25:1.4
	LanManFS-2_24:1.4
	LanManFS-2_23:1.4
	LanManFS-2_22:1.4
	LanManFS-2_21:1.4
	LanManFS-2_20:1.4
	LanManFS-2_19:1.4
	LanManFS-2_18:1.3
	LanManFS-2_17:1.3
	LanManFS-2_16:1.3
	LanManFS-2_15:1.3
	LanManFS-2_14:1.3
	LanManFS-2_13:1.3
	LanManFS-2_12:1.3
	LanManFS-2_11:1.3
	LanManFS-2_10:1.3
	LanManFS-2_09:1.3
	kbracey_32bit:1.2.0.2
	LanManFS-2_08:1.2
	LanManFS-2_07:1.2
	LanManFS-2_06:1.2
	LanManFS-2_05:1.2
	LanManFS-2_04:1.2
	LanManFS-2_03:1.2
	LanManFS-2_02:1.1.1.1
	LanManFS-2_01:1.1.1.1
	LanManFS-2_00:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_13:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_12:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_11:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_10:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_9:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_8:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_7:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_6:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_5:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_4:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_3:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_2:1.1.1.1
	LanManFS-1_87-1_1_1_1_2_1:1.1.1.1
	sbrodie_LanManFS_dev:1.1.1.1.0.2
	sbrodie_LanManFS_dev_bp:1.1.1.1
	LanManFS-1_87:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2013.10.03.07.27.15;	author rsprowson;	state Exp;
branches;
next	1.10;
commitid	iTaBDwF1woaPMO7x;

1.10
date	2013.09.30.19.47.09;	author rsprowson;	state Exp;
branches;
next	1.9;
commitid	MoU9V9JbMV2FYu7x;

1.9
date	2011.12.14.11.02.56;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	CGImv1wEytvZ99Lv;

1.8
date	2011.10.15.07.30.22;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	HPAQrxWHCl3LUpDv;

1.7
date	2009.07.19.22.25.14;	author rsprowson;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.15.16.00.08;	author bavison;	state Exp;
branches;
next	1.5;
commitid	GhZBwZ2GN8lg58Kt;

1.5
date	2003.03.11.20.49.02;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.13.10.28.57;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	99.11.29.13.25.41;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.16.58.33;	author sbrodie;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.12.03.13.54.48;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.2.2.1
date	99.11.20.17.38.05;	author sbrodie;	state Exp;
branches;
next	;

1.1.1.1
date	98.12.03.13.54.48;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Internationalised
Unused LMFiler put in the attic.
As LanMan has historically put its resources into ThirdPart/OmniClient this component has no ROM resources phase - it still registers the resources at run time.

Version 2.40. Tagged as 'LanManFS-2_40'
@
text
@; Copyright 1998 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; **************************************************
;
; !Lanman.s.interface
;
; All those horrible little assembler bits
;
; Original based on FSinC
; 20-10-94  IH  Add suicide callback bit
;               Add 'free' veneer
; **************************************************

        GET   Hdr:ListOpts
        GET   Hdr:Macros
        GET   Hdr:System
        GET   Hdr:APCS.<APCS>
        GET   Hdr:ModHand
        GET   Hdr:ResourceFS

        ; ---------------------------

SWIClass        SETS    "LanMan"

        ^       &49240
        AddSWI  OmniOp  ; &49240
        AddSWI  FreeOp  ; &49241

        ; -----------------------------

        IMPORT  |Image$$RO$$Base|
        IMPORT  |_Lib$Reloc$Off$DP|
        IMPORT  fsentry_open
        IMPORT  fsentry_getbytes
        IMPORT  fsentry_putbytes
        IMPORT  fsentry_args
        IMPORT  fsentry_close
        IMPORT  fsentry_file
        IMPORT  fsentry_func
        IMPORT  fsentry_gbpb

        EXPORT  veneer_fsentry_open
        EXPORT  veneer_fsentry_getbytes
        EXPORT  veneer_fsentry_putbytes
        EXPORT  veneer_fsentry_args
        EXPORT  veneer_fsentry_close
        EXPORT  veneer_fsentry_file
        EXPORT  veneer_fsentry_func
        EXPORT  veneer_fsentry_gbpb

        AREA    FSEntry_Interfaces,REL,CODE,READONLY

        LTORG

veneer_fsentry_open
        Push    "R8"
        MOV     R8, #fsentry_branchtable - %F10 + 4*0
        B       fsentry_common
veneer_fsentry_getbytes
        Push    "R8"
        MOV     R8, #fsentry_branchtable - %F10 + 4*1
        B       fsentry_common
veneer_fsentry_putbytes
        Push    "R8"
        MOV     R8, #fsentry_branchtable - %F10 + 4*2
        B       fsentry_common
veneer_fsentry_args
        Push    "R8"
        MOV     R8, #fsentry_branchtable - %F10 + 4*3
        B       fsentry_common
veneer_fsentry_close
        Push    "R8"
        MOV     R8, #fsentry_branchtable - %F10 + 4*4
        B       fsentry_common
veneer_fsentry_file
        Push    "R8"
        MOV     R8, #fsentry_branchtable - %F10 + 4*5
        B       fsentry_common
veneer_fsentry_func
        Push    "R8"
        MOV     R8, #fsentry_branchtable - %F10 + 4*6
        B       fsentry_common
veneer_fsentry_gbpb
        Push    "R8"
        MOV     R8, #fsentry_branchtable - %F10 + 4*7
        B       fsentry_common


fsentry_common  ; os_error *fsentry_common( Parameter_Block * )

        ; Store the input registers onto the stack
        Push    "R0-R7, SL, FP, IP, LR"

        MOV     sl, SP, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        LDR     r12, [r12]              ; private word pointer
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
        MOV     fp, #0                  ; halt C backtrace here!

        ; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E28AA000

        ; Pass a pointer to the structure on the stack
        MOV     a1, SP

        ; BL    fsentry_branchtable[R8]
        MOV     lr, pc
        ADD     pc, pc, R8

        ; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E24AA000

10      ; This label must be the 2nd instruction past the above ADD pc, pc, R8

        STMIA   sl, {v1, v2}            ; restore old reloc modifiers

        ; Save the returned value in R8
        MOVS    R8, r0
        ; Get the stuff off the stack
        Pull    "r0-r7, sl, fp, ip, lr"
        ; If returned value indicates an error, then set the overflow and put it back in r0
        MOVNE   r0, R8

        ; Mess about with the flag bits in R8
        [ :LNOT: No32bitCode
        ; If we're allowed to use 32-bit code, it all falls out really nicely
        MOVNE   R8, #V_bit              ; R8 == 0 if Z, V set if !Z
        |
        MOV     R8, pc
        BIC     R8, R8, #C_bit + V_bit
        ORRNE   R8, R8, #V_bit          ; V = err != 0
        ]
        TST     r1, r1                  ; C = r1 == 0
        ORREQ   R8, R8, #C_bit

        ; Move the flag bits into psr
        [ :LNOT: No32bitCode
        MSR     CPSR_f, r8
        |
        TEQP    R8, #0
        NOP
        ]

        Pull    "R8"

        MOV     pc, lr

fsentry_branchtable
        B       fsentry_open
        B       fsentry_getbytes
        B       fsentry_putbytes
        B       fsentry_args
        B       fsentry_close
        B       fsentry_file
        B       fsentry_func
        B       fsentry_gbpb

        AREA    |C$$code|, CODE, READONLY

; Suicide callback --------------------------------------------------

; This is used when we get a service call to terminate the module.
; For some reason, we can't terminate there and then, so it has to
; be done on a callback.

        EXPORT   OmniS_Suicide

OmniS_Suicide ; (char *modulename)
        FunctionEntry
        MOV     r1, r0                  ; save module_title address (called as r12)
        ADR     r0, suicide_cb
        SWI     XOS_AddCallBack
        Return

suicide_cb
        Push    "r0-r1, r14"
        MOV     r0, #ModHandReason_Delete
        MOV     r1, r12
        SWI     XOS_Module
        Pull    "r0-r1, pc"

; Free routine -------------------------------------------

; This is the routine which is passed to Free_Register. It has
; a number of particularly poor characteristics like being called
; in user mode with little or no stack, and returning a value
; in the Z bit. For this reason the routine calls our 'FreeOp'
; SWI.

; Free module only worried about V and Z, doesn't mind C and N being
; corrupted.  Removed all the unnecessary flag todging and non-32-bit
; friendly code: V is already set correctly, the TEQ sets the Z as
; required.  Yes, the return value is already stacked. (sbrodie: 19/11/99)

        EXPORT   Free_ServiceRoutine

Free_ServiceRoutine ; On entry R0 = reason code 0-3
        Push   "R1, R4"
        SWI    XLanMan_FreeOp
        TEQ    R1,#0                    ; set Z if R1 was 0 on exit, preserve V
        Pull   "R1, R4, PC"             ; As it says in book

        DCB    "Nothing libellous or obscene", 0 ; Contractual obligation
        ALIGN

        END
        
@


1.10
log
@Makefile recreated from fragments
Fixed up a couple of trivial warnings with the stricter checking.
Removed OmniS_FastMultiply64 and rewrote the function in C, this allows the compiler to spot and use UMULL on architectures supporting that instruction.
Tested in a RAM build against a WinXP SP3 server with a drive > 4GB.

Version 2.39. Tagged as 'LanManFS-2_39'
@
text
@d217 1
a217 1
        DCB "Nothing libellous or obscene", 0 ; Contractual obligation
a219 47
; Resources ----------------------------------------------

; This is Acorn's sorry excuse for the lack of a resource compiler.

        EXPORT  OmniS_ResourceInit
        EXPORT  OmniS_ResourceShutdown
        EXPORT  OmniS_ResFSStarting

; Register & Deregister routines for our ResourceFS block

OmniS_ResourceInit ; (void)
        FunctionEntry
        ADR     r0, Resource_Base
        SWI     XResourceFS_RegisterFiles
        MOVVC   r0, #0
        Return

OmniS_ResourceShutdown ; (void)
        FunctionEntry
        ADR     r0, Resource_Base
        SWI     XResourceFS_DeregisterFiles
        MOVVC   r0, #0
        Return

OmniS_ResFSStarting ; (int R2, int R3 )
        ; Dunno what this does!!
        FunctionEntry
        MOV     r2, r0
        MOV     r3, r1
        ADR     r0, Resource_Base
        MOV     r14, pc
        MOV     pc, r2
        Return


; Data block
Resource_Base
      [ ROMSPRITES
        ; Slim or low res sprites in ROM to save space
        ResourceFile "LocalRes:ROM.Sprites", "ThirdParty.OmniClient.LanMan.Sprites"
      |
        ; Deep colour high res sprites for RAM modules
        ResourceFile "LocalRes:Sprites", "ThirdParty.OmniClient.LanMan.Sprites"
      ]
        DCD     0


d221 1
@


1.9
log
@CollectCallbacks -> usermode_donothing() the preferred AsmUtils name.
Retagged.
@
text
@a28 1
        GET   Hdr:Machine.<Machine>
d30 1
a171 2
; Suicide callback --------------------------------------------------

d174 1
d191 1
a191 1
        MOV     r0, #4                  ; kill named module
a219 26
; Collect callbacks routine ------------------------------

; Long multiplier ----------------------------------------
; Taken from Acorn Assembler manual.
; extern void OmniS_FastMultiply64(fspc_64 *, unsigned, unsigned);
        EXPORT OmniS_FastMultiply64

OmniS_FastMultiply64
        FunctionEntry
        MOVS    lr, a2, LSR #16
        BIC     a2, a2, lr, LSL #16
        MOV     ip, a3, LSR #16
        BIC     a3, a3, ip, LSL #16
        MUL     a4, a2, a3
        MUL     a3, lr, a3
        MUL     a2, ip, a2
        MULNE   lr, ip, lr
        ADDS    a2, a2, a3
        ADDCS   lr, lr, #&10000
        ADDS    a4, a4, a2, LSL #16
        ADC     lr, lr, a2, LSR #16
        STMIA   a1, {a4, lr}
        Return



@


1.8
log
@Fix for *INFO dates not matching *EX dates
These two displays take different code paths, and *INFO goes via a check to workaround a bug in Win98 servers. Unfortunately, the check no longer works because Microsoft don't return the '.' and '..' entries in SMB Trans2 FIND_FIRST, and the logic previously always set the "need to frig the dates" flag. Now, the flag is only set if something comes back and after doing a test swap the results are also correct.
Turned on the 'auto close Trans2 FIND_FIRST' flag in the request block to save having to do a second transaction to close it.
Swapped the LDMFD/STMFD for Push and Pull in the assembler.
Tested against WinXP SP3, dates are no longer bonkers.

Version 2.35. Tagged as 'LanManFS-2_35'
@
text
@a23 1
; 26-01-96      Add CollectCallbacks
@


1.7
log
@Workaround for NTFS returning resume keys of zero.
Detail:
  When the underlying FS is NTFS, eg. WinXP Pro, the requested
  resume keys for a directory search are always zero - this is passed
  back via OSGBPB and on the next call it triggers a new search. So
  we get stuck in an infinite loop.
  Now checks for a resume key stuck at zero, and makes a fake one static
  to the search context then sets the continuation bit in the SMB_FIND_NEXT
  call because the server returning the duff key remembers the position.
  Dir_CallbackFn could return with "taken" undefined. Move a few lines
  higher.
  Missing "#else" added to CHECK_ARMBOOT_EXISTS so if this is disabled
  no further attempt is made to find !ArmBoot.
  Couple of typos corrected.
  Spelling of "disk" changed to "disc" in an error message.
Admin:
  Tested with XP Pro SP3 with NTFS, directories which previously hung
  the filer now open correctly. Checked with XP Home SP3 with FAT32 to
  verify behaviour unchanged from 2.32.
  Note, with large directories the initial path translation triggers a
  dir search too which takes ages compared with the actual number of
  entries returned. This could be cached to make counting far faster.

Version 2.33. Tagged as 'LanManFS-2_33'
@
text
@d69 1
a69 1
        STMFD   SP!, {R8}
d73 1
a73 1
        STMFD   SP!, {R8}
d77 1
a77 1
        STMFD   SP!, {R8}
d81 1
a81 1
        STMFD   SP!, {R8}
d85 1
a85 1
        STMFD   SP!, {R8}
d89 1
a89 1
        STMFD   SP!, {R8}
d93 1
a93 1
        STMFD   SP!, {R8}
d97 1
a97 1
        STMFD   SP!, {R8}
d105 1
a105 1
        STMFD   SP!,{R0-R7, SL, FP, IP, LR}
d135 1
a135 1
        LDMFD   SP!, {r0-r7, sl, fp, ip, lr}
d159 1
a159 1
        LDMFD   SP!, {R8}
d192 1
a192 1
        STMFD   SP!, {r0-r1, r14}
d196 1
a196 2
        LDMFD   SP!, {r0-r1, r14}
        MOV     pc, r14
d214 1
a214 1
        STMFD  SP!, {R1, R4}
d217 1
a217 1
        LDMFD  SP!, {R1, R4, PC}        ; As it says in book
@


1.6
log
@  Multiple fixes.
Detail:
  Too many to list here: see doc/RPSChanges.
Admin:
  Received from Rob Sprowson approx 2009-02-08. Builds, but not tested by ROOL.

Version 2.32. Tagged as 'LanManFS-2_32'
@
text
@d128 1
a128 1
10      ; This label must be the 2nd instructions past the above ADD pc, pc, R8
@


1.5
log
@Tightened up checking of when sockets get opened and closed in an
attempt to work out why Freeway gets upset when LanManFS is
configured in IP mode.
Changed app date that OmniClient shows to be dd-mmm-yy
Added ability to include slimmer ROMSPRITES and deleted the resources
phase from the makefile: the sprites were being included once in
ResourceFS and again embedded in the module.
If the FS is unset it says so in *status rather than a blank line.

Version 2.26. Tagged as 'LanManFS-2_26'
@
text
@a231 1
        STMFD   sp!, {lr}
@


1.4
log
@  Moved Sprites file into sensible place.
  Removed BBE specific rules due to above change obsoleting it.
Admin:
  Built.
  Requires Library 0.70 or later (RiscOS/Library; Library-0_70)

Version 2.19. Tagged as 'LanManFS-2_19'
@
text
@d220 2
a221 2
	DCB "Nothing libellous or obscene", 0 ; Contractual obligation
	ALIGN
d228 1
a228 1
	EXPORT OmniS_FastMultiply64
d232 15
a246 15
	STMFD	sp!, {lr}
	MOVS	lr, a2, LSR #16
	BIC	a2, a2, lr, LSL #16
	MOV	ip, a3, LSR #16
	BIC	a3, a3, ip, LSL #16
	MUL	a4, a2, a3
	MUL	a3, lr, a3
	MUL	a2, ip, a2
	MULNE	lr, ip, lr
	ADDS	a2, a2, a3
	ADDCS	lr, lr, #&10000
	ADDS	a4, a4, a2, LSL #16
	ADC	lr, lr, a2, LSR #16
	STMIA	a1, {a4, lr}
	Return
d287 5
d293 1
@


1.3
log
@  32-bit compatibility added.
  Removed obsolete header files.
  Removed obsolete assembler.
  Fixed flag preservation in remaining assembler.
Detail:
  See above.
Admin:
  Built RAM build.

Version 2.09. Tagged as 'LanManFS-2_09'
@
text
@d287 1
a287 1
        ResourceFile "Sprites", "ThirdParty.OmniClient.LanMan.Sprites"
@


1.2
log
@  New *LMLS command.
  Fix for ./.. files in short filename shares.
  Long multiply now provided in assembler.
Detail:
  *LMLS is a new filesystem-specific command which performs the same
    task as "smbclient -L" does under UNIX - ie. listing all the shares
    available on the specified host.
  When enumerating the shares on a remote server, LanManFS now remembers
    all the printers, IPC, device and disc shares (for *LMLS to output).
  The 32x32->64 multiply routine is now provided in assembler instead of
    the previous huge amount of obscure C taken from NSPRLib.  This is
    more understandable (and almost certainly far smaller and quicker
    and doesn't need a hack to stop the compiler mis-optimising it!)
  Old short filename shares still had problems with the . and .. file
    filtering.  Programmer fault there - should've let the compiler do
    the optimisations :-)
  Server info string fixed to byte-reverse the port numbers when printing
    the string into the info buffer.  Now claims to be talking to port 139
    as it should.
Admin:
  Tested in general desktop use for several days, plus experimental versions
    tested in other boot ROMs.

Version 2.03. Tagged as 'LanManFS-2_03'
@
text
@d27 6
a32 3
        GET   Hdr.RegNames
        GET   Hdr.SwiNames
        GET   Hdr.ResourceFS
d140 4
d147 1
d152 3
d156 2
a157 1
        MOV	R0,R0			; added 980127:RCE
d185 1
a185 1
        STMFD   SP!, {r14}
d189 1
a189 1
        LDMFD   SP!, {pc}
d207 5
d217 2
a218 11

        MOV    R4, PC
        BIC    R4, R4, #V_bit + C_bit + Z_bit
        ORRVS  R4, R4, #V_bit           ; V set & R0->error block if error
        CMP    R1, #0                   ; Set Z if R1 was 0 on exit
        ORREQ  R4, R4, #Z_bit
        TEQP   R4, #0                   ; Set flags to PC
        MOV    R0,R0			; added 980127:RCE

        LDMFD  SP!, {R1, R4}
        LDMIA  R13!, {PC}               ; As it says in book
a224 17
	EXPORT CollectCallbacks  ; (void)

CollectCallbacks
        STMFD  SP!, {LR}

        TSTP   PC,#&FC                    ;Set User mode.
        MOV    R0, R0

        MOV    R0,#0
        MOV    R1,#1
        SWI    OS_Byte                  ; Does callbacks on exit

        SWI    OS_EnterOS               ;Set SVC mode.
        MOV    R0, R0

	LDMFD  SP!, {PC}^

d231 1
d246 1
a246 1
	LDMFD	sp!, {pc}^
d261 1
a261 1
        STMFD   sp!, {r14}
d265 1
a265 1
        LDMFD   sp!, {pc}
d268 1
a268 1
        STMFD   sp!, {r14}
d272 1
a272 1
        LDMFD   sp!, {pc}
d276 1
a276 1
        STMFD   sp!, {r14}
d282 1
a282 1
        LDMFD   sp!, {pc}^
@


1.2.2.1
log
@  Made assembler code APCS-R compatible!!
  Retained old code as 32-bit APCS compatible on the usual switches.
Detail:
  ANT were clearly ahead of their time when they wrote all of
    this assembler, because none of it bothers to preserve the
    PSR flags like the C code requires them to.  Could this
    perhaps be a contributing factor to why Omni is so unstable?!
Admin:
  Requires AsmUtils.
  Intermediate version. Do not use.
@
text
@d27 3
a29 6
        GET   Hdr:ListOpts
        GET   Hdr:Macros
        GET   Hdr:System
        GET   Hdr:Machine.<Machine>
        GET   Hdr:APCS.<APCS>
        GET   Hdr:ResourceFS
a136 4
        [ :LNOT: No32bitCode
        ; If we're allowed to use 32-bit code, it all falls out really nicely
        MOVNE   R8, #V_bit              ; R8 == 0 if Z, V set if !Z
        |
a139 1
        ]
a143 3
        [ :LNOT: No32bitCode
        MSR     CPSR_f, r8
        |
d145 1
a145 2
        NOP
        ]
d173 1
a173 1
        FunctionEntry
d177 1
a177 1
        Return
a194 5
; Free module only worried about V and Z, doesn't mind C and N being
; corrupted.  Removed all the unnecessary flag todging and non-32-bit
; friendly code: V is already set correctly, the TEQ sets the Z as
; required.  Yes, the return value is already stacked. (sbrodie: 19/11/99)

d200 11
a210 2
        TEQ    R1,#0                    ; set Z if R1 was 0 on exit, preserve V
        LDMFD  SP!, {R1, R4, PC}        ; As it says in book
d220 1
a220 1
        FunctionEntry
d232 1
a232 1
        Return
a239 1
        FunctionEntry
d254 1
a254 1
	Return
d269 1
a269 1
        FunctionEntry
d273 1
a273 1
        Return
d276 1
a276 1
        FunctionEntry
d280 1
a280 1
        Return
d284 1
a284 1
        FunctionEntry
d290 1
a290 1
        Return
@


1.1
log
@Initial revision
@
text
@d234 24
@


1.1.1.1
log
@
LanManFS moved into Omni subdirectory.  Previous version in
RiscOS/Sources/Networking/LanManFS is now locked out.

The rest of Omni will be imported at a later date.

Version 1.87, tagged as LanManFS-1_87

@
text
@@
