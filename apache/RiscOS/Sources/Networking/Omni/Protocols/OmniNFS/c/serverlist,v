head	1.6;
access;
symbols
	OmniNFS-0_72:1.6
	OmniNFS-0_71:1.5
	OmniNFS-0_70-2:1.4
	OmniNFS-0_70-1:1.3
	OmniNFS-0_70-0:1.3
	OmniNFS-0_69:1.3
	OmniNFS-0_68:1.3
	OmniNFS-0_67:1.3
	OmniNFS-0_66:1.3
	OmniNFS-0_65:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2018.09.25.16.58.17;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	GFJOSkFX3KOGvvTA;

1.5
date	2018.01.29.21.52.30;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	jxnHhDaBaRHUOOoA;

1.4
date	2018.01.29.21.49.27;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	JbejJtfNqqtCNOoA;

1.3
date	2009.07.16.19.15.38;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	99.11.29.18.32.27;	author blaughto;	state Exp;
branches;
next	1.1;

1.1
date	99.11.29.14.05.55;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.29.14.05.55;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fix handle and memory leaks on error
Found by cppcheck static analysis.

Version 0.72. Tagged as 'OmniNFS-0_72'
@
text
@/* Copyright 1999 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-c-*- */

/* serverlist.c */

/* Use a portmapper broadcast to locate all mountd servers */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include <kernel.h>
#include <swis.h>

#include <sys/types.h>
#include <sys/errno.h>
#include <netinet/in.h>
#include <netdb.h>
#include <sys/socket.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <sys/wait.h>
#include <arpa/inet.h>

#include <inetlib.h>
#include <socklib.h>
#include <unixlib.h>

#include "DebugLib/DebugLib.h"

#include "omnifiler.h"
#include "omninfs.h"
#include "serverlist.h"

#define XDR_INT(x) ( ((x >> 24) & 0xff) | ((x >> 8) & 0xff00) | ((x << 8) & 0xff0000) | ((x << 24) & 0xff000000) )

#define MAX_BROADCAST_SIZE 1400

#ifndef RPC_MSG_VERSION
#define RPC_MSG_VERSION	2
#endif

#define RPC_CANTSEND	3
#define RPC_CANTRECV	4

#define PMAPPORT	111
#define PMAPPROG	100000
#define PMAPVERS	2
#define PMAPPROC_CALLIT	5

#define MOUNTPROG	100005
#define MOUNTVERS	1
#define MOUNTPROC_NULL	0

/**********************************************************************/

static struct in_addr addrs[20];
static int nets;
static char outbuf[MAX_BROADCAST_SIZE];
static fd_set mask;
static u_long xid;
/*static enum clnt_stat stat;*/
static int outlen;
static struct sockaddr_in baddr; /* broadcast address */
static serverlist_incoming inpacket;

/**********************************************************************/

#define	MAXALIASES	35
#define	MAXADDRS	35

static struct hostent host;
static char *host_aliases[MAXALIASES];
static char hostbuf[BUFSIZ+1];
static FILE *hostf = NULL;
static char hostaddr[MAXADDRS];
static char *host_addrs[2];
static int stayopen = 0;

#ifndef _PATH_HOSTS
#define _PATH_HOSTS	"InetDBase:Hosts"
#endif

static void _sethtent(int f)
{
	if (hostf == NULL)
		hostf = fopen(_PATH_HOSTS, "r" );
	else
		rewind(hostf);
	stayopen |= f;
}

static void _endhtent(void)
{
	if (hostf && !stayopen) {
		(void) fclose(hostf);
		hostf = NULL;
	}
}

static struct hostent *_gethtent(void)
{
	char *p;
	register char *cp, **q;

	if (hostf == NULL && (hostf = fopen(_PATH_HOSTS, "r" )) == NULL)
		return (NULL);
again:
	if ((p = fgets(hostbuf, BUFSIZ, hostf)) == NULL)
	{
		fclose(hostf);
		return (NULL);
	}
	if (*p == '#')
		goto again;
	cp = strpbrk(p, "#\n");
	if (cp == NULL)
		goto again;
	*cp = '\0';
	cp = strpbrk(p, " \t");
	if (cp == NULL)
		goto again;
	*cp++ = '\0';
	/* THIS STUFF IS INTERNET SPECIFIC */
	host.h_addr_list = host_addrs;
	host.h_addr = hostaddr;
	*((u_long *)host.h_addr) = inet_addr(p);
	host.h_length = sizeof (u_long);
	host.h_addrtype = AF_INET;
	while (*cp == ' ' || *cp == '\t')
		cp++;
	host.h_name = cp;
	q = host.h_aliases = host_aliases;
	cp = strpbrk(cp, " \t");
	if (cp != NULL)
		*cp++ = '\0';
	while (cp && *cp) {
		if (*cp == ' ' || *cp == '\t') {
			cp++;
			continue;
		}
		if (q < &host_aliases[MAXALIASES - 1])
			*q++ = cp;
		cp = strpbrk(cp, " \t");
		if (cp != NULL)
			*cp++ = '\0';
	}
	*q = NULL;
	return (&host);
}

static struct hostent *_gethtbyaddr(char *addr, int len, int type)
{
    register struct hostent *p;

    _sethtent(0);
    while (p = _gethtent())
    {
	if (p->h_addrtype == type && !bcmp(p->h_addr, addr, len))
	    break;
    }
    _endhtent();
    return (p);
}

char *get_dotted_ip_addr(u_long addr)
{
    static char buffer[16];

    sprintf(buffer, "%d.%d.%d.%d",
	    ((int) addr >> 0) & 0xff,
	    ((int) addr >> 8) & 0xff,
	    ((int) addr >> 16) & 0xff,
	    ((int) addr >> 24) & 0xff );

    return buffer;
}

char *get_name_from_dns(u_long addr)
{
    _kernel_swi_regs r;
    _kernel_oserror *ep;

    struct hostent *hp;

    r.r[0] = (int) get_dotted_ip_addr(addr);

    ep = _kernel_swi(Resolver_GetHost, &r, &r);
    if (ep)
       return NULL;

    hp = (struct hostent *) r.r[1];

    if (r.r[0] == 0)
       return hp->h_name;
    else
       return NULL;
}

char *get_name_from_addr(u_long addr)
{
    struct hostent *hp;

    hp = _gethtbyaddr((char *) &addr, sizeof(u_long), AF_INET);
    if (hp)
	return hp->h_name;
    else
	return get_dotted_ip_addr(addr);
}

static int getbroadcastnets(struct in_addr *addrs, int sock, char *buf)
{
    struct ifconf ifc;
    struct ifreq ifreq, *ifr;
    struct sockaddr_in *sin;
    int n, i;

    ifc.ifc_len = MAX_BROADCAST_SIZE;
    ifc.ifc_buf = buf;
    if (socketioctl(sock, SIOCGIFCONF, (char *)&ifc) < 0)
    {
	return 0;
    }
    ifr = ifc.ifc_req;
    for (i = 0, n = ifc.ifc_len/sizeof (struct ifreq); n > 0; n--, ifr++)
    {
	ifreq = *ifr;
	if (socketioctl(sock, SIOCGIFFLAGS, (char *)&ifreq) < 0)
	{
	    continue;
	}
	if ((ifreq.ifr_flags & IFF_BROADCAST) &&
	    (ifreq.ifr_flags & IFF_UP) &&
	    ifr->ifr_addr.sa_family == AF_INET)
	{
	    sin = (struct sockaddr_in *)&ifr->ifr_addr;
	    if (socketioctl(sock, SIOCGIFBRDADDR, (char *)&ifreq) < 0)
	    {
		addrs[i++] = inet_makeaddr(inet_netof(sin->sin_addr), INADDR_ANY);
	    }
	    else
	    {
		addrs[i++] = ((struct sockaddr_in*) &ifreq.ifr_addr)->sin_addr;
	    }
	}
    }
    return (i);
}

_kernel_oserror *find_server_setup(void)
{
    int on = 1;
    serverlist_outgoing_front *fp;
    serverlist_outgoing_back  *bp;
    int len;
    char *hname;
    int ttt = (int) time(0);

    /*
     * initialization: create a socket, a broadcast address, and
     * preserialize the arguments into a send buffer.
     */
    if ((rpc_socket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
    {
	return intl_error(err_CANT_SET_SOCKET);
    }

    if (setsockopt(rpc_socket, SOL_SOCKET, SO_BROADCAST, &on, sizeof (on)) < 0)
    {
	return intl_error(err_CANT_SET_SOCKET);
    }

    if (socketioctl(rpc_socket, FIOASYNC, &on) == -1)
    {
	return intl_error(err_BAD_IOCTL);
    }

    FD_ZERO(&mask);
    FD_SET(rpc_socket, &mask);

    nets = getbroadcastnets(addrs, rpc_socket, outbuf);

    /* if (nets == 0)
	return intl_error(err_CANT_SET_SOCKET); We don't want an error */

    bzero((char *)&baddr, sizeof (baddr));
    baddr.sin_family = AF_INET;
    baddr.sin_port = htons(PMAPPORT);
    baddr.sin_addr.s_addr = htonl(INADDR_ANY);

    memset(outbuf, 0, MAX_BROADCAST_SIZE);

    fp = (serverlist_outgoing_front *) outbuf;

    fp->xid = xid = rand() ^ (rand() << 16);
    /* fp->dir = 0 */
    fp->rpc_vers = XDR_INT(RPC_MSG_VERSION);
    fp->prog = XDR_INT(PMAPPROG);
    fp->vers = XDR_INT(PMAPVERS);
    fp->func = XDR_INT(PMAPPROC_CALLIT);
    fp->ctype = XDR_INT(1);
    fp->timestamp = XDR_INT(ttt);

    hname = (char*) (fp + 1);
    if (_kernel_getenv("Inet$Hostname", hname, MAX_BROADCAST_SIZE - sizeof(serverlist_outgoing_front) - sizeof(serverlist_outgoing_back))) return intl_error(err_CANT_READHOST);

    len = strlen(hname);
    fp->nlen = XDR_INT(len);
    len += 3;
    len &= (~3);
    fp->clen = XDR_INT(len + 0x18);	/* 24 bytes of other credential information */

    hname += len;

    bp = (serverlist_outgoing_back *) hname;

    /* bp->uid = 0; */
    /* bp->gid = 0; */
    bp->gcount = XDR_INT(1);
    /* bp->g0 = 0; */
    /* bp->vtype = 0; */
    /* bp->vlen = 0; */
    bp->prog = XDR_INT(MOUNTPROG);
    bp->vers = XDR_INT(MOUNTVERS);
    /* bp->func = 0; */
    /* bp->plen = 0; */

    outlen = sizeof(serverlist_outgoing_front) + sizeof(serverlist_outgoing_back) + len;

    dprintf (("", "Memory b %p +%x", outbuf, outlen));

    return NULL;
}

_kernel_oserror *find_server_send(void)
{
    int i;

    for (i = 0; i < nets; i++)
    {
	baddr.sin_addr = addrs[i];
	if (sendto(rpc_socket, outbuf, outlen, 0, (struct sockaddr *)&baddr, sizeof (struct sockaddr)) != outlen)
	{
	    return intl_error(err_CANT_SEND);
	}
    }
    return 0;
}

_kernel_oserror *find_server_data(void)
{
    struct sockaddr_in raddr; /* response address */
    fd_set readfds;
    struct timeval t;
    int inlen, fromlen;
    int snum;

    do
    {
	readfds = mask;
	t.tv_sec = t.tv_usec = 0;

	snum = select(rpc_socket + 1, &readfds, NULL, NULL, &t);

	if (snum > 0)
	{
	    fromlen = sizeof(struct sockaddr);
	    inlen = recvfrom(rpc_socket, (char*) &inpacket, sizeof(inpacket), 0,
			     (struct sockaddr *)&raddr, &fromlen);
	    if (inlen < 0)
	    {
		return intl_error(err_CANT_RECV);
	    }
	    if (inlen < sizeof(u_long))
		continue;

	    dprintf(("", "Got a packet, id = 0x%08x, dir = %d, status = %d, success = %d\n",
		   inpacket.xid,
		   XDR_INT(inpacket.dir),
		   XDR_INT(inpacket.status),
		   XDR_INT(inpacket.data.accept.stat) ));

	    if (inpacket.xid == xid &&
		inpacket.dir == XDR_INT(1) && /* Reply */
		inpacket.status == 0 && /* Accepted */
		inpacket.data.accept.stat == 0 ) /* Success */
	    {
		server_list_insert(raddr.sin_addr.s_addr);
	    }
	}
    } while (snum > 0);
    return NULL;
}

_kernel_oserror *find_server_clear(void)
{
    (void)socketclose(rpc_socket);
    return NULL;
}
@


1.5
log
@Internationalised
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 0.71. Tagged as 'OmniNFS-0_71'
@
text
@d124 2
d127 1
@


1.4
log
@Cleanup pass
Callback.s copied from NetFiler (expands tabs, use Hdr:ModHand names)
Quit peeking kernel workspace, just use OS_ReadMonotonicTime since no uses of MONOTIME are in places where calling a SWI is prohibited.
Don't abuse InetDBase$Path, use InetDBase:
Use constants from Global/OsBytes.h and Interface/HighFSI.h
Use NFS SWI numbers from Interface/NFS.h (requires NFS-3_23 or later)
Get Omni constants from Interface/OmniClient.h
Tagged as OmniNFS-0_70-2.
@
text
@d45 2
a46 3
#include "OmniNFS.h"
#include "makeerror.h"

d276 1
a276 1
	return make_error(err_CANT_SET_SOCKET);
d281 1
a281 1
	return make_error(err_CANT_SET_SOCKET);
d286 1
a286 1
	return make_error(err_BAD_IOCTL);
d295 1
a295 1
	return make_error(err_CANT_SET_SOCKET); We don't want an error */
d316 1
a316 1
    if (_kernel_getenv("Inet$Hostname", hname, MAX_BROADCAST_SIZE - sizeof(serverlist_outgoing_front) - sizeof(serverlist_outgoing_back))) return make_error(err_CANT_READHOST);
d355 1
a355 1
	    return make_error(err_CANT_SEND);
d383 1
a383 1
		return make_error(err_CANT_RECV);
@


1.3
log
@Reduce number of compiler warnings.
Removed 2 dead variables; renamed a variable called "new" not to be a C++ keyword, removed assumptions that malloc() returns 0 for fail (now NULL).
The makefile "clean" target no longer trys to compile anything either.

Version 0.66. Tagged as 'OmniNFS-0_66'
@
text
@d43 1
a43 1
#include <DebugLib/DebugLib.h>
a86 2
static char *h_addr_ptrs[MAXADDRS + 1];

d96 1
a96 1
#define _PATH_HOSTS	"<InetDBase$Path>Hosts"
d262 1
a262 1
_kernel_oserror *find_server_setup()
d362 1
a362 1
_kernel_oserror *find_server_data()
d407 1
a407 1
_kernel_oserror *find_server_clear()
@


1.2
log
@  * Further rationalisations to fit into our build system.
  * Now builds.
Detail:
  * Altered to use auto-generated or centralised declarations, constants etc.
    whereever possible.
  * Altered to use some library routines instead of local equivalents.
  * Debug build uses DebugLib; different CMHG header for debug builds now
    generated using conditional compilation in preference to a completely
    separate CMHG file.
  * serverlist.c no longer built in pcc mode.
  * Internet event handler enables interrupts on entry and disables them again
    on exit.
  * Modified to use SrcCommit.
Admin:
  * Removed all files in hdr directory; assembler sources now use macros from
    HdrSrc.
  * Removed cmhg.OmniNFSDbg
  * Removed base.h and Base.s.
  * Removed builddate.h.
  * Requires AsmUtils.
  * Both builds compiled.

Version 0.65. Tagged as 'OmniNFS-0_65'
@
text
@d66 3
a68 3
#define MOUNTPROG 100005
#define MOUNTVERS 1
#define MOUNTPROC_NULL 0
a78 1
static u_long port;
a91 1
static struct in_addr host_addr;
@


1.1
log
@Initial revision
@
text
@d21 8
d30 1
a31 2

#include <stdio.h>
d39 3
a41 3
#include <rpc/rpc.h>

#include <string.h>
d43 1
a43 1
#include "time.h"
a44 2
#include "kernel.h"
#include "swis.h"
a53 4
extern int errno;

extern char *inet_ntoa(struct in_addr);

d77 1
a77 1
static enum clnt_stat stat;
d255 1
a255 1
		addrs[i++] = inet_makeaddr(inet_netof(sin->sin_addr.s_addr), INADDR_ANY);
d346 1
a346 7
#if DEBUG
{
    char pbuf[256];
    sprintf(pbuf, "Memory b %p +%x", outbuf, outlen);
    printf("%s\n", pbuf);
}
#endif
d379 1
a379 1
	snum = select(rpc_socket + 1, &readfds, (int *)NULL, (int *)NULL, &t);
d393 1
a393 2
#if DEBUG
	    printf("Got a packet, id = 0x%08x, dir = %d, status = %d, success = %d\n",
d397 1
a397 2
		   XDR_INT(inpacket.data.accept.stat) );
#endif
a414 10
}

int bcmp(char *s, char *d, int l)
{
    return memcmp(s, d, l);
}

int bzero(char *s, int l)
{
    return (int) memset(s, 0, l);
@


1.1.1.1
log
@  Initial import of OmniNFS.
Detail:
  ANT sources unmodified; just converted to conform to our build structure.
  Some modifications should be made, in particular: 
    serverlist.c is currently compiled in pcc mode - should convert to ANSI
    module entry point declarations should be altered so that it actually
      builds with our version of CMHG.
Admin:
  Completely untested as it won't build properly yet.
@
text
@@
