head	1.2;
access;
symbols
	Omni-2_30:1.2
	Omni-2_29:1.2
	Omni-2_28:1.2
	Omni-2_27:1.2
	Omni-2_26:1.2
	Omni-2_25:1.2
	Omni-2_24:1.2
	Omni-2_23:1.2
	Omni-2_22:1.2
	Omni-2_21:1.2
	Omni-2_20:1.2
	Omni-2_19:1.2
	Omni-2_18:1.2
	Omni-2_17:1.2
	Omni-2_16:1.2
	Omni-2_15:1.2
	Omni-2_14:1.2
	Omni-2_13:1.2
	Omni-2_12:1.2
	Omni-2_11:1.2
	Omni-2_10:1.2
	Omni-2_09:1.2
	Omni-2_08:1.2
	Omni-2_07:1.2
	Omni-2_06:1.2
	Omni-2_05:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.03.07.19.24.19;	author blaughto;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.02.19.41.34;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.03.02.19.41.34;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Several major bugfixes and further tidying to make Omni fit into our
  build environment better.
Detail:
  * Bug fix: ClientList function (Client.c) creates a textual menu desription
    for a list of clients (Info and Mounts submenus).  The description was
    generated on the stack and a pointer to it was returned.  The buffer is now
    static.
  * Bug fix: select or adjust clicks on the Omni icon just after it's loaded
    would kill the task part of Omni.  FilerCreate function (List.c) always
    calls FilerDelete, which would always attempt to close any existing filer
    window.  However, on the first call, no window exists so it passes the Wimp
    a 0 window handle.  This only appeared to happen on RISC OS 4, but I suspect
    this is to do with RISC OS 4's stricter protection of zero page.  Current
    fix is for FilerDelete to check if window handle is 0 before closing it;
    this is not very elegant - would be nicer to only call FilerDelete when the
    window was actually closed.
  * Bug fix: writable icon handling overhauled completely.  Many of the buffers
    which Omni would read the contents of writable icons into were too short
    to hold the maximum amount of text allowed in the icon.  New Icon_GetText
    call added (ExtLib.c) to allow Omni to work directly on indirected icon
    buffers wherever possible, thus removing the whole issue.
  * Stripped commented-out code from several places.
  * Changed use of Desk_bool to bool in most places.  This is a bit grim, but
    the way Desk_bool is implemented means you need to cast it in many places,
    which is even more grim.
  * Removed a few error assignements(!) because
    a) they weren't even being checked
    b) Desk's psuedo-exception system should now catch them
  * Got rid of home-grown strcasecmp calls and used Desk's instead.
  * Removed many local constants definitions and get them from system header
    files instead.
  * Removed Hdrs.h which would include *every* header file in *every* C file
    in the interests of compilation times.  C files now only include what they
    need.
  * Reimplemented the fully recursive Menu_Dispose along the lines of the
    non-recursive Desk_Menu_Dispose, which had changed since ANT's DeskLib
    split-off.
  * Altered quite a bit of code to prevent compiler warnings (mainly
    "use of '=' in condition context" and "variable declared but not used").
  * Uses 'proper' module finalisation instead of atexit in the interests of
    consistency and symmetry.
  * Added MemCheck support.
  * Reimplemented rma_alloc and rma_free in C (side effect of MemCheck support).
  * Altered assembler to use system header files instead of local ones.
  * Omni previously used a seeming random mixture of _kernel_swi and Desk_SWI
    SWI veneers.  All have now been changed to use _swix/_swi as appropriate.
  * Converted to use srccommit.
Admin:
  Files removed:
   c.Error
   c.StrCaseCmp
   h.Debug
   h.Hdrs
   h.ModuleWrap
   h.OmniClient
   h.StrCaseCmp
   hdr.Macros
   hdr.RegDefs
   hdr.SwiNos

  Files added:
   Docs.DeskLibDiffs
   Docs.EventHandling
   h.Omni

  * Compiled.
  * All windows, menus checked to make sure they at least display.
  * Played around with a new NFS and LanMan mounts.
  * Basically, there shouldn't be any showstoppers, but the change from a very
    old DeskLib to Desk is a large one.  I'd be surprised if there aren't a
    few problems and this should definitely be thrashed a bit by people
    willing to do so before anyone has any confidence in it.



Version 2.05. Tagged as 'Omni-2_05'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Filer.h
 * Header file for !Omni application - part of the OmniClient project
 */

#ifndef __FILER_H
#define __FILER_H

#include <stdbool.h>

#include <Desk/LinkList.h>
#include <Desk/Wimp.h>

#include "Config.h"

/* Should be Acorn-allocated SWI chunk number */
#define ERR_BASE				0x080d100
#define ERR_MESSBASE				ERR_BASE + 192

#define RUNNABLE				/* to enable direct running */
#define TASK    				('K'<<24|'S'<<16|'A'<<8|'T')

/* Macros for error reporting */
extern _kernel_oserror  omni_errblk;          	/* Global error block */
#define returnOK()	{ r->r[0] = 0; return(NULL); }

/* FilerAction SWI calls */
#define wimp_MFilerSelectionDirectory           0x000403
#define wimp_MFilerAddSelection                 0x000404
#define wimp_MFilerAction                       0x000405

#define OmniAccess_Reset			0x04a902


/* Reason codes for OS SWIs */
enum
{
  OS_FSControl_AddFilingSystem    = 12,
  OS_FSControl_SelectFilingSystem = 14,
  OS_FSControl_RemoveFilingSystem = 16,
  OS_FSControl_Wipe               = 27
};


/* Define TRACESERVICE in order to output trace of service calls */
/* #define TRACESERVICE */

typedef struct				/* Structure for a mount */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  Desk_icon_handle		icon;		/* Bar icon handle, or -1 */
  Desk_icon_createblock	icon_create;	/* Icon block */
  int			icon_state;	/* State of icon (ISTATE_BROKEN, etc) */
  int			client_id;	/* Client ID word, or -1 */
  int			server_id;	/* Server ID word, or -1 */
  int			mount_id;	/* Mount ID word, or -1 */
  char			mount[16];	/* Mount name string */
  Desk_menu_ptr		menu;		/* Open root submenu pointer */
} mount_record;

/* Server states */
#define ISTATE_BROKEN	-1
#define ISTATE_OK	0
#define ISTATE_NEW	1

typedef struct				/* Struct for mount list */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			mount_id;	/* Mount ID word, or -1 */
  int   		server_id;	/* Server ID word, or -1 */
  int			client_id;	/* Client ID word, or -1 */
  char			*server;
  char			*user;
  char			*passwd;
  char 			*mount;
  char			*path;
  char			*auth;
  bool			transient;	/* Static (in mounts file) or transient */
  bool			hidden;         /* Hidden (no iconbar/menus) */
  bool			locked;         /* Locked (don't save in mounts file) */
  bool			preset;		/* Preset (only in filer window) */
  bool			connected;	/* TRUE if mlist item is currently connected */
  bool			open; 		/* TRUE if open filer window upon connection */
} mlist_record;

typedef struct				/* Structure for a mount connection window */
{
  Desk_linklist_header	header;		/* Link list pointers */
  Desk_window_handle	w;		/* Window handle, or NULL */
  Desk_caret_block	caret;		/* Caret previous to us opening */
  mlist_record		*ml;		/* List item that static dbox was created from */
  bool			domain;		/* Domain dbox or mount dbox */
} mwind_record;

typedef struct				/* Structure for a client module */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			client_id;	/* Client ID word, or -1 */
  int			flags;		/* Service flags word */
  char			*spritename;	/* Sprite name pointer */
  char 			*clientname;	/* Client name pointer */
  char 			*clientdesc;	/* Client description pointer */
  int			site_id;	/* Security word */
  char			*fsname;	/* Filing system name pointer */
} client_record;

/* Features flag word - see SWI Omni_RegisterClient for details */
#define flag_FS             	0x001
#define flag_USER		0x002
#define flag_PW			0x004
#define flag_PATH             	0x008
#define flag_AUTH             	0x010
#define flag_MOUNT		0x020	/* SWI_Spec 0.997 or later */
#define flag_SPECIAL		0x040	/* SWI_Spec 0.997 or later */
#define flag_PRINT             	0x100
#define flag_PRINTPW           	0x200
#define flag_PRINTFILE          0x400
#define flag_EXTmask		0x00ff0000
#define flag_EXTshft		16

#define flagSET(cr,flag)	((cr->flags & flag) == flag)

typedef struct item_struct		/* Struct for an item (server or mount) list */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			client_id;	/* Client ID word, or -1 */
  int			server_id;	/* Server ID word, or -1 */
  int			mount_id;	/* Mount ID word, or -1 */
  char			*shortname;	/* Item Short name, or NULL */
  char			*fullname;	/* Item Full name, or NULL */
  char			*field1;	/* Item description, or NULL */
  char			*field2;	/* Item description, or NULL */
  char			*field3;	/* Item description, or NULL */
  bool			alias;		/* From a mlist entry? shortname/fullname is alias */
} item_record;

typedef struct wind_record 		/* Struct for a 'filer/server' Mounts window */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  Desk_linklist_header	anchor;		/* Anchor to list of subwindows, or {NULL,NULL} */
  Desk_window_handle	w;              /* Window handle */
  int			sort;		/* Local Sort type */
  int			display;	/* Local Display type */
  int			d_width;	/* OS Unit width of item */
  int			d_fwidth;	/* OS Unit field width of item */
  int			d_widths[6];	/* OS Unit widths of item fields 0..5 */
  int			d_height;	/* OS Unit height of item */
  int			nitems;         /* Number of items in window */
  int			witems;		/* Number of items horizontally across window */
  int			item;		/* This item number in parent window */
  bool			update;		/* Flag is TRUE if window needs updating on screen */
  item_record 		**index;	/* Pointer to sorted array of window items, or NULL */
  Desk_linklist_header	items;		/* Anchor to list of window contents, or {NULL,NULL} */
  int			client_id;	/* Client ID word, or -1 */
  int			server_id;	/* Server ID word, or -1 */
} wind_record;

typedef struct				/* Struct for printer job */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			print_id;	/* print_id word */
  int 			pjob_id;	/* pjob_id word */
  int 			client_id;	/* client_id of protocol used for job */
  int 			status;		/* Local status word (internal copy) */
  int 			time;		/* Monotonic time job was started */
  int			handle;		/* Fileswitch file handle */
  char			*buf;		/* Buffer to store pending output data */
  int			buflen;         /* Size of buffer */
  int			bufused;        /* Bytes currently used in buffer */
  int			sent;		/* Bytes sent so far */
} print_record;

typedef struct				/* Struct for file extension mapping */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int 			client_id;	/* client_id of protocol used, or -1 for default */
  int			flags;		/* Flags word */
  char			ext[8];		/* 8 character extension string */
  int			filetype;	/* RISC OS filetype, or &9999 for global */
} ext_record;

typedef struct				/* Struct for printer list */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int 			client_id;	/* client_id of protocol used by printer */
  char			*printer;	/* Name of printer */
  char			*server;	/* Name of network server */
  int			flags;		/* Flags word */
} plist_record;


/* Display types */
#define display_LARGE		0
#define display_SMALL		1
#define display_FULL		2

/* Sort types */
#define sort_NONE		0
#define sort_NAME		1
#define sort_PROTOCOL		2

/* Pollword flag states */
#define pollword_NONE		0x00
#define pollword_ENUMERATE	0x01
#define pollword_ENUMERATENET	0x02
#define pollword_ENUMERATEPRINT	0x04
#define pollword_REGISTER       0x08
#define pollword_DEREGISTER	0x10
#define pollword_MOUNTCLI       0x20

/* Print job status flags */
#define print_STATUS		0x1
#define print_mask		0xE
#define print_PENDING		(0 << 1)
#define print_CONNECTED		(1 << 1)
#define	print_SENDING		(2 << 1)
#define print_COMPLETE		(3 << 1)
#define print_TEMPERROR		(4 << 1)
#define print_ERROR		(5 << 1)
#define printer_TIMEOUT		(360000 * 24)  /* 24 hrs timeout */
#define pflagSET(status,flag)	((status & print_mask) == flag)

/* Extension flags */
#define ext_KEEP		0x1
#define ext_SUBDIR		0x2
#define ext_TOTYPE		0x4
#define ext_CASE		0x8
#define eflagSET(er,flag)	((er->flags & flag) == flag)


extern Desk_linklist_header	mount_anchor;	/* List of mount records */
extern Desk_linklist_header	client_anchor;	/* List of client module records */
extern Desk_linklist_header	mlist_anchor;	/* List of mount list records */
extern Desk_linklist_header	mwind_anchor;	/* List of mount connection window records */
extern Desk_linklist_header	print_anchor;	/* List of print job records */
extern Desk_linklist_header	plist_anchor;	/* List of print list records */
extern Desk_linklist_header	ext_anchor;	/* List of file extension mapping records */
extern wind_record	wind_filer;	/* Record of servers 'filer' window */
extern int      	wind_info;	/* Window handle */
extern int      	wind_client;	/* Window handle */
extern int      	wind_mounttmp;	/* Window handle */
extern int      	wind_mountinfo;	/* Window handle */
extern int      	wind_mountdom;	/* Window handle */
extern int		pollword;	/* Poll word non-zero */
extern int		pollword_r0;	/* Poll word non-zero parameter word */
extern config_record	prog_config;	/* Global program configuration */
extern char		*pollword_str;	/* Poll word string */
extern bool		all_restart;	/* TRUE if we are just RMLoading */
extern bool 		all_hasrun;	/* TRUE if we have been running task */

extern void mlist_clean(void);
extern void plist_clean(void);
extern void serviceomni(int num);

#endif
@


1.1
log
@Initial revision
@
text
@d23 2
a30 2
#define SWI_BASE				0x004a200
#define Service_OmniAction      		0x00000a0
a41 3
#define FilerAction_SendSelectedDirectory       0x040f80
#define FilerAction_SendSelectedFile            0x040f81
#define FilerAction_SendStartOperation          0x040f82
d46 2
a47 28
#define XOS_Bit                        		0x020000
#define OS_Module                      		0x00001e
#define OS_ServiceCall                      	0x000030
#define OS_ExitAndDie                      	0x000050
#define OS_CLI					0x000005
#define OS_Args					0x000009
#define OS_Find					0x00000D
#define OS_GBPB					0x00000C

#define MessageTrans_OpenFile			0x041501
#define MessageTrans_Lookup			0x041502
#define MessageTrans_CloseFile			0x041504

#define Omni_EnumerateMounts			SWI_BASE + 0
#define Omni_RegisterClient			SWI_BASE + 1
#define Omni_DeregisterClient			SWI_BASE + 2
#define Omni_MessageLookup			SWI_BASE + 3
#define Omni_ConvertClientToAcorn 		SWI_BASE + 4
#define Omni_ConvertAcornToClient 		SWI_BASE + 5
#define Omni_ConvertTime			SWI_BASE + 6
#define Omni_Printers				SWI_BASE + 7
#define Omni_CreateJob				SWI_BASE + 8
#define Omni_SendJob				SWI_BASE + 9
#define Omni_EndJob				SWI_BASE + 10
#define Omni_AbortJob				SWI_BASE + 11
#define Omni_JobStatus				SWI_BASE + 12
#define Omni_ClearJob				SWI_BASE + 13
#define Omni_PrinterInfo			SWI_BASE + 14
d49 8
a56 1
#define OmniAccess_Reset			0x04a902
d92 6
a97 6
  Desk_bool			transient;	/* Static (in mounts file) or transient */
  Desk_bool			hidden;         /* Hidden (no iconbar/menus) */
  Desk_bool			locked;         /* Locked (don't save in mounts file) */
  Desk_bool			preset;		/* Preset (only in filer window) */
  Desk_bool			connected;	/* TRUE if mlist item is currently connected */
  Desk_bool			open; 		/* TRUE if open filer window upon connection */
d102 3
a104 3
  Desk_linklist_header 	header;		/* Link list pointers */
  Desk_window_handle		w;		/* Window handle, or NULL */
  Desk_caret_block		caret;		/* Caret previous to us opening */
d106 1
a106 1
  Desk_bool			domain;		/* Domain dbox or mount dbox */
d148 1
a148 1
  Desk_bool			alias;		/* From a mlist entry? shortname/fullname is alias */
d155 1
a155 1
  Desk_window_handle		w;              /* Window handle */
d165 1
a165 1
  Desk_bool			update;		/* Flag is TRUE if window needs updating on screen */
d262 2
a263 2
extern Desk_bool		all_restart;	/* TRUE if we are just RMLoading */
extern Desk_bool 		all_hasrun;	/* TRUE if we have been running task */
d267 1
@


1.1.1.1
log
@  Initial import of Omni into CVS.

Detail:
  This is an import of the sources obtained from ANT some time ago, with
  sufficient changes to allow it to build in our standard environment.  In
  particular, this involved converting Omni to use Desk instead of DeskLib.
  ANT's DeskLib was not 'off-the-shelf' - it was based on DeskLib 2.04 (very
  old), with their own modifications.
  
  This means that there are quite severe bugs in the Omni code, which will
  show up if you attempt to use this version, which were previously masked by
  some of ANT's DeskLib alterations.  (Hopefully) most of these have already
  been identified, fixed and will be checked-in soon.  I felt that a
  minimal version that would simply build would be worthwhile, so that as
  many changes as possible end up under CVS' control.

Admin:
  Compiled.
  Untested.
@
text
@@
