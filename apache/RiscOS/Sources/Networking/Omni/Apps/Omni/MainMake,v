head	1.18;
access;
symbols
	Omni-2_30:1.18
	Omni-2_29:1.18
	Omni-2_28:1.18
	Omni-2_27:1.17
	Omni-2_26:1.16
	Omni-2_25:1.15
	Omni-2_24:1.15
	Omni-2_23:1.15
	Omni-2_22:1.14
	Omni-2_21:1.13
	Omni-2_20:1.13
	Omni-2_19:1.12
	Omni-2_18:1.10
	Omni-2_17:1.10
	Omni-2_16:1.9
	Omni-2_15:1.9
	Omni-2_14:1.8
	Omni-2_13:1.8
	Omni-2_12:1.7
	Omni-2_11:1.6
	Omni-2_10:1.6
	Omni-2_09:1.6
	Omni-2_08:1.5
	Omni-2_07:1.4
	Omni-2_06:1.3
	Omni-2_05:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.18
date	2018.03.15.20.51.48;	author rsprowson;	state Exp;
branches;
next	1.17;
commitid	7j2CJaj8MVpr2BuA;

1.17
date	2018.01.29.21.39.30;	author rsprowson;	state Exp;
branches;
next	1.16;
commitid	HTYsKv7JAeouKOoA;

1.16
date	2017.05.21.08.36.00;	author rsprowson;	state Exp;
branches;
next	1.15;
commitid	4xmHSuHvaw6UxeSz;

1.15
date	2016.09.11.09.53.34;	author rsprowson;	state Exp;
branches;
next	1.14;
commitid	JGhMYY8fzJLI4Rlz;

1.14
date	2016.09.10.18.32.06;	author rsprowson;	state Exp;
branches;
next	1.13;
commitid	o6STXeGW5koBYLlz;

1.13
date	2014.08.06.20.53.47;	author rsprowson;	state Exp;
branches;
next	1.12;
commitid	BqXL5wzJunJLnlLx;

1.12
date	2013.11.22.19.10.02;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	xkLFtQpJlYbn3jex;

1.11
date	2013.11.22.17.56.49;	author rsprowson;	state Exp;
branches;
next	1.10;
commitid	9mAsVrxUXmieFiex;

1.10
date	2012.08.29.20.07.45;	author rsprowson;	state Exp;
branches;
next	1.9;
commitid	FFRNeJSOf4FXQtiw;

1.9
date	2009.10.01.17.15.50;	author srevill;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.02.22.46.08;	author jballance;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.18.14.32.01;	author srevill;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.17.09.37.44;	author blaughto;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.16.18.28.03;	author blaughto;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.12.17.06.27;	author blaughto;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.23.17.44.09;	author blaughto;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.19.24.12;	author blaughto;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.02.19.41.33;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.03.02.19.41.33;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Recreate some lost utils
Trying to enable OmniAccess by just turning on the flag in Startup would lead to failure because the Dormant and KillTask utilities were missing. Manually running the modules worked though.
Dormat/KillTask:Recreate them.
Makefile/StartShare:Install them under Utils/Access rather than in the RMStore since they're not modules.
Startup:Sort out the ensures; don't bother supporting DCI2 any more, since we ensure UtilityModule 3.50 because of some MRS/MSR, also avoids funny business with AUNMsgs.

Version 2.28. Tagged as 'Omni-2_28'
@
text
@# File:    Makefile
# Purpose: Makefile for Omni
# Author:  Ben Laughton
#
# History:
#
# 2000-03-02: BAL
# Created.




# ------------------------------------------------------------------------------
# Paths
#

EXP_HDR         = <export$dir>.^.Interface2
EXP_C_H         = <Cexport$dir>.Interface.h

LIBDIR          = <Lib$Dir>

RESFSDIR        = Resources.OmniClient
INSTAPP         = $(INSTDIR).!Omni

# ------------------------------------------------------------------------------
# Generic options
#

MKDIR           = do mkdir -p
AS              = objasm
CC              = $(MemCheckCC) cc
C++             = c++
CMHG            = cmhg
CP              = copy
LD              = $(MemCheckLD) link
RM              = remove
WIPE            = x wipe
CD              = dir
CHMOD           = access
TOUCH           = create
MODSQZ          = modsqz
AWK             = GNU.gawk 
INSERTVERSION   = ${AWK} -f Build:AwkVers


# ------------------------------------------------------------------------------
# Flags
#

ASFLAGS         += -depend !Depend $(THROWBACK) -stamp -quit
CFLAGS          += -depend !Depend $(THROWBACK) $(CINCLUDES) $(CDEFINES) -c -Wp -zM -ffah -strict
C++FLAGS        += -depend !Depend $(THROWBACK) $(CINCLUDES) $(CDEFINES) -c -Wp -zM -ffa +a1
CMHGFLAGS       = -depend !Depend $(THROWBACK) $(CINCLUDES) $(CDEFINES) -p
LDFLAGS         =
CPFLAGS         = ~cfr~v
WFLAGS          = ~c~vr
CHMOCDEFINES    = RW/r

CDEFINES        += -DINET -DCOMPAT_INET4 $(EXPERT)

CINCLUDES       = -IC:,TCPIPLibs:




# ------------------------------------------------------------------------------
# Libraries
#

CLIB            = CLIB:o.stubs
RLIB            = RISCOSLIB:o.risc_oslib
RSTUBS          = RISCOSLIB:o.rstubs
ROMSTUBS        = RISCOSLIB:o.romstubs
ROMCSTUBS       = RISCOSLIB:o.romcstubs
ABSSYM          = RISC_OSLib:o.c_AbsSym

DEBUGLIB        = $(LIBDIR).DebugLib.o.DebugLibzm
INETLIB         = TCPIPLibs:o.inetlibzm
SOCKLIB         = TCPIPLibs:o.socklibzm
#DESKLIB        = $(LIBDIR).Desk.o.Desk_D $(LIBDIR).Desk.o.Debug.tml
DESKLIB         = $(LIBDIR).Desk.o.Desk_M
ASMUTILS        = $(LIBDIR).AsmUtils.o.AsmUtilszm

# Allow libraries to vary according to the type of build, distingusihed by
# whatever "extension" is being used for the object code files.  This is
# because the old trick of (probably) DebugLib adding lots to the size of a
# module, even when none of the code in it is referenced seems to have come
# back.
L_o   = $(DESKLIB) $(INETLIB) $(ASMUTILS)
L_od  = $(DEBUGLIBS) $(DEBUGLIB) $(INETLIB) $(SOCKLIB) $(DESKLIB) $(ASMUTILS)
L_oMC = $(DEBUGLIB) $(INETLIB) $(SOCKLIB) $(DESKLIB) $(ASMUTILS)

LIBS = $(L_$(EXT))

include ModuleLibs


# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT       = OmniClient
TARGET         ?= Omni
RAMTARGET       = rm.$(TARGET)
ROMTARGET       = aof.$(TARGET)

ROMOBJS =\
 $(EXT).Client\
 $(EXT).Close\
 $(EXT).CoreInit\
 $(EXT).Events\
 $(EXT).ExtLib\
 $(EXT).ExtLibAsm\
 $(EXT).Filer\
 $(EXT).FileType\
 $(EXT).Heap\
 $(EXT).List\
 $(EXT).MakeError\
 $(EXT).Mount\
 $(EXT).OmniClient\
 $(EXT).Omni\
 $(EXT).Parse\
 $(EXT).Print\
 $(EXT).PrintFS\
 $(EXT).Redraw\
 $(EXT).Sort\
 $(EXT).Time\
 $(EXT)._Args\
 $(EXT)._Close\
 $(EXT)._Errs\
 $(EXT)._File\
 $(EXT)._Func\
 $(EXT)._GBPB\
 $(EXT)._GetBytes\
 $(EXT)._Open\
 $(EXT)._PutBytes\
 $(EXT)._Veneers\

RAMOBJS =\
 $(ROMOBJS)\


# $(EXT).resources

HDR = h.OmniClient




# ------------------------------------------------------------------------------
# Rule patterns
#

.SUFFIXES:      .o .od .oHP .oMC .i .s .c++ .c .cmhg
.c.i:;          $(CC)   $(CFLAGS)       -C -E $< >> $@@
.c.o:;          $(CC)   $(CFLAGS)       -o $@@ $<
.c.od:;         $(CC)   $(CFLAGS)       -fn -o $@@ $<
.c.oMC:;        $(CC)   $(CFLAGS)       -fn -g -o $@@ $<
#.c.oMC:;       $(CC)   $(CFLAGS)       -o $@@ $<
.c.oHP:;        $(CC)   $(CFLAGS)       -fn -o $@@ $<
.cmhg.i:;       @@echo $@@
.cmhg.o:;       $(CMHG) $(CMHGFLAGS)    $< -o $@@
.cmhg.od:;      $(CMHG) $(CMHGFLAGS)    $< -o $@@
.cmhg.oMC:;     $(CMHG) $(CMHGFLAGS)    $< -o $@@
.cmhg.oHP:;     $(CMHG) $(CMHGFLAGS)    $< -o $@@
.s.i:;          @@echo $@@
.s.o:;          $(AS)   $(ASFLAGS)      $< $@@
.s.od:;         $(AS)   $(ASFLAGS)      $< $@@
.s.oMC:;        $(AS)   $(ASFLAGS)      $< $@@
.s.oHP:;        $(AS)   $(ASFLAGS)      $< $@@



# ------------------------------------------------------------------------------
# Local build rules
#

all: $(RAMTARGET)

debug: $(RAMTARGET)

memcheck: $(RAMTARGET)

preprocess: $(ROMTARGET)

$(RAMTARGET): $(RAMOBJS) $(LIBS) $(HDR) $(EXT).local_dirs
        $(MKDIR) rm
        $(LD) -rmf $(LDFLAGS) -o $@@ $(RAMOBJS) $(LIBS) $(CLIB)
        $(MODSQZ) $@@

$(EXT).resources: LocalRes:Messages
        ResGen messages_data $@@ LocalRes:Messages Resources.$(COMPONENT).Messages

$(HDR): cmhg.OmniClient VersionNum C:Global.h.Services
        $(CMHG) $(CMHGFLAGS) cmhg.OmniClient -d $@@




# ------------------------------------------------------------------------------
# Common build rules

$(EXT).local_dirs:
        $(MKDIR) $(EXT)
        $(TOUCH) $@@




# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

rom: $(ROMTARGET)
        @@echo $(COMPONENT): rom complete

export: hdr.OmniClient cmhg.OmniClient
        $(MKDIR) o
        $(CMHG) -p -d h.OmniClientHdr cmhg.OmniClient
        do $(AWK) -- "/.ifndef Omni/,/endif/" h.OmniClientHdr > o._h_Omni
        do <Perl$Dir>.perl Build:Hdr2H hdr.OmniClient $(EXP_C_H).OmniClient
        FAppend $(EXP_C_H).OmniClient $(EXP_C_H).OmniClient o._h_Omni
        $(CP) hdr.OmniClient $(EXP_HDR).OmniClient $(CPFLAGS)
        @@echo $(COMPONENT): header export complete

install: $(RAMTARGET)
        $(MKDIR) $(INSTAPP).Utils
        $(MKDIR) $(INSTAPP).Utils.Access
        $(MKDIR) $(INSTAPP).RMStore
        $(MKDIR) $(INSTAPP).Themes.Ursula
        $(MKDIR) $(INSTAPP).Themes.Morris4
        $(MKDIR) $(INSTAPP).Resources.${LOCALE}
        $(CP) Resources.!Boot      $(INSTAPP).!Boot                          $(CPFLAGS)
        $(CP) Resources.HourOn     $(INSTAPP).Utils.HourOn                   $(CPFLAGS)
        $(CP) Resources.HourOff    $(INSTAPP).Utils.HourOff                  $(CPFLAGS)
        $(CP) Resources.KillTask   $(INSTAPP).Utils.Access.KillTask          $(CPFLAGS)
        $(CP) Resources.Dormant    $(INSTAPP).Utils.Access.Dormant           $(CPFLAGS)
        $(CP) LocalRes:!Help       $(INSTAPP).!Help                          $(CPFLAGS)
        $(CP) LocalRes:!Run        $(INSTAPP).!Run                           $(CPFLAGS)
        $(CP) LocalRes:Files       $(INSTAPP).Files                          $(CPFLAGS)
        $(CP) $(RAMTARGET)         $(INSTAPP).RMStore.$(COMPONENT)           $(CPFLAGS)
        $(CP) LocalRes:Templates   $(INSTAPP).Resources.${LOCALE}.Templates  $(CPFLAGS)
        $(CP) LocalRes:Template3D  $(INSTAPP).Resources.${LOCALE}.Template3D $(CPFLAGS)
        ${INSERTVERSION} LocalRes:Messages > $(INSTAPP).Resources.${LOCALE}.Messages
        $(CP) Resources.!Sprites           $(INSTAPP).Themes.!Sprites           $(CPFLAGS)
        $(CP) Resources.!Sprites11         $(INSTAPP).Themes.!Sprites11         $(CPFLAGS)
        $(CP) Resources.!Sprites22         $(INSTAPP).Themes.!Sprites22         $(CPFLAGS)
        $(CP) Resources.Ursula.!Sprites    $(INSTAPP).Themes.Ursula.!Sprites    $(CPFLAGS)
        $(CP) Resources.Ursula.!Sprites22  $(INSTAPP).Themes.Ursula.!Sprites22  $(CPFLAGS)
        $(CP) Resources.Morris4.!Sprites   $(INSTAPP).Themes.Morris4.!Sprites   $(CPFLAGS)
        $(CP) Resources.Morris4.!Sprites22 $(INSTAPP).Themes.Morris4.!Sprites22 $(CPFLAGS)
        # For LanManFS
        $(CP) Resources.LanMan             $(INSTAPP).Themes.LanMan             $(CPFLAGS)
        $(CP) Resources.Ursula.LanMan      $(INSTAPP).Themes.Ursula.LanMan      $(CPFLAGS)
        $(CP) Resources.Morris4.LanMan     $(INSTAPP).Themes.Morris4.LanMan     $(CPFLAGS)
        # For NetFiler
        $(CP) Resources.Net                $(INSTAPP).Themes.Net                $(CPFLAGS)
        $(CP) Resources.Ursula.Net         $(INSTAPP).Themes.Ursula.Net         $(CPFLAGS)
        $(CP) Resources.Morris4.Net        $(INSTAPP).Themes.Morris4.Net        $(CPFLAGS)
        # For OmniAccess
        $(CP) Resources.Share              $(INSTAPP).Themes.Share              $(CPFLAGS)
        $(CP) Resources.Ursula.Share       $(INSTAPP).Themes.Ursula.Share       $(CPFLAGS)
        $(CP) Resources.Morris4.Share      $(INSTAPP).Themes.Morris4.Share      $(CPFLAGS)
        # For OmniNFS
        $(CP) Resources.NFS                $(INSTAPP).Themes.NFS                $(CPFLAGS)
        $(CP) Resources.Ursula.NFS         $(INSTAPP).Themes.Ursula.NFS         $(CPFLAGS)
        $(CP) Resources.Morris4.NFS        $(INSTAPP).Themes.Morris4.NFS        $(CPFLAGS)
        @@echo $(COMPONENT): $(RAMTARGET) installed

install_rom: $(ROMTARGET)
        $(CP) $(ROMTARGET) $(INSTAPP).$(COMPONENT) $(CPFLAGS)
        @@echo $(COMPONENT): rom module installed

clean:
        $(WIPE) $(EXT)  $(WFLAGS)


# ROM target (re-linked at ROM Image build time)

$(ROMTARGET): $(ROMOBJS) $(LIBS) $(ROMCSTUBS) $(EXT).local_dirs
        $(MKDIR) aof
        $(LD) -aof $(LDFLAGS) -o $@@ $(ROMOBJS) $(LIBS) $(ROMCSTUBS)


# Final link for the ROM Image (using given base address)

rom_link:
        $(MKDIR) linked
        $(LD) $(LDFLAGS) -o linked.$(COMPONENT) -map -rmf -base $(ADDRESS) $(ROMTARGET) $(ABSSYM) > map.$(COMPONENT)
        $(CP) linked.$(COMPONENT) $(LINKDIR).$(COMPONENT) $(CPFLAGS)
        @@echo $(COMPONENT): rom_link complete

# ------------------------------------------------------------------------------
# Dynamic dependencies:
@


1.17
log
@Add OmniNFS resources
Install the hi-res sprites for OmniNFS, and tidy up the Startup script to require DCI4 minimum (since it's built with COMPAT_INET4.
Trim out an unused error string.

Version 2.27. Tagged as 'Omni-2_27'
@
text
@d228 1
d236 2
@


1.16
log
@Add sprites for OmniAccess
Deeper colour themes-based sprites for disc based OmniAccess.

Version 2.26. Tagged as 'Omni-2_26'
@
text
@d261 4
@


1.15
log
@Install NetFiler icons to !Omni
Also, in the various script files, stop abusing <Omni$Path> variable, use it as Omni: like it was intended.

Version 2.23. Tagged as 'Omni-2_23'
@
text
@d257 4
@


1.14
log
@Export some Omni constants
Create an export Interface/OmniClient.h with the SWI numbers and subreason codes in.
Use these in Client.c in place of local copy.
Minor typos in Docs/SWI_Spec corrected.

Version 2.22. Tagged as 'Omni-2_22'
@
text
@d253 4
@


1.13
log
@Get version number from messages file

Version 2.20. Tagged as 'Omni-2_20'
@
text
@d18 1
a18 2
EXP_C_H         = <Cexport$dir>.h
EXP_C_O         = <Cexport$dir>.o
d103 1
a105 1
EXPORTS         = $(EXP_C_H).$(COMPONENT)
d217 8
a224 2
export: $(EXPORTS)
        @@echo $(COMPONENT): export complete
a277 8
# Odds and ends

$(EXP_C_H).$(COMPONENT): h.$(COMPONENT)
        $(CP) h.$(COMPONENT) $@@ $(CPFLAGS)




@


1.12
log
@Import of alternate sprites for clients
Thanks to Chris Wraight for Morris4 and Ursula designs.
Richard Hallas' Iyonix theme sprites for LanMan also move here which resolves a longstanding glitch that the 4bpp ROM copy got used by default so didn't quite match the rest of the colours in that theme.
Retagged as Omni-2_19.
@
text
@d43 2
a44 2


d236 1
a236 1
        $(CP) LocalRes:Messages    $(INSTAPP).Resources.${LOCALE}.Messages   $(CPFLAGS)
@


1.11
log
@Allow OmniClient clients to provide theme specific sprites
OmniClient will now check its disc based sprites to see if there are any higher res or theme specific ones available (if there aren't then it is still assumed that the client has *ICONSPRITES'd his own as before).
No longer looks for "_22" suffix manually, the Wimp will do that for us.
Added file type sprites extracted from earlier CVS history.
New application sprites for Morris4 and Ursula imported, thanks to Chris Wraight for these.

Version 2.19. Tagged as 'Omni-2_19'
@
text
@d244 4
@


1.10
log
@Import of missing Sprites11 file
Lost in time and space.

Version 2.17. Tagged as 'Omni-2_17'
@
text
@a41 1
DATA2AOF        = datatoaof
d224 2
a231 3
        $(CP) Resources.!Sprites   $(INSTAPP).!Sprites                       $(CPFLAGS)
        $(CP) Resources.!Sprites22 $(INSTAPP).!Sprites22                     $(CPFLAGS)
        $(CP) Resources.!Sprites11 $(INSTAPP).!Sprites11                     $(CPFLAGS)
d237 7
@


1.9
log
@Fixed export phase and clean phase.

Detail:
  * Clean phase no longer generates (ignored) errors and actual errors.
  * Export phase no longer falls over
  * Removed some cruft relating to MemCheck
  * Added a stripdepnd to the !MkClean script - over-engineering
Admin:
  Tested briefly for Disc build.
Note:
  The export phase error from Make was completely misleading as it was
  quoting a completely wrong line number! I have no idea how it arrived
  at the line number it did for the "mal-formed suffix rule". The line it
  quoted happened to be in the middle of a bunch of suffix rules but these
  were totally unrelated - even if you commented the whole block out, it'd
  report that line as being the problem!! Doh.

Version 2.15. Tagged as 'Omni-2_15'
@
text
@d233 1
@


1.8
log
@  2 bug fixes to avoid AODT failures

Detail:
  c.FileType c. 298 .. initialise strings to null
  c.Event c.line 1943 .. dont use mw if it has been freed

Admin:
  tested at castle
  castle added ip


Version 2.13. Tagged as 'Omni-2_13'
@
text
@d38 1
a38 1
WIPE            = -wipe
a81 1
MEMCHECKLIB     = MemCheck:o.MC_M
d93 1
a93 1
L_oMC = $(MEMCHECKLIB) $(DEBUGLIB) $(INETLIB) $(SOCKLIB) $(DESKLIB) $(ASMUTILS)
a175 1

d265 1
a265 1
$(EXP_C_H).$(COMPONENT):        h.$(COMPONENT)
@


1.7
log
@Adds BASIC version of houron and houroff so it'll run on machines with
old HourGlass modules (no *HON *HOFF).
Enlarged tiddy little buttons in connection dialogue.
Reorganised iconbar menu so it makes sense,and changed help.
Increased RMEnsure to require Utility module 3.5 due to use of MSR/MRS.

Version 2.12. Tagged as 'Omni-2_12'
@
text
@d53 2
a54 2
CFLAGS          += -depend !Depend $(THROWBACK) $(CINCLUDES) $(CDEFINES) -c -Wsp -zM -ffah -strict
C++FLAGS        += -depend !Depend $(THROWBACK) $(CINCLUDES) $(CDEFINES) -c -Wsp -zM -ffa +a1
d93 1
a93 1
L_od  = $(DEBUGLIB) $(INETLIB) $(SOCKLIB) $(DESKLIB) $(ASMUTILS)
d98 1
@


1.6
log
@  * Fixed Omni$Running system variable bug introduced in previous revision.
  * Fixed bug where Quit->All in expert mode would only quit the filer and
    not the whole filing system.
  * Fixed bug where just quitting the filer and attempting to re-run OmniClient
    would produce the error "Some protocols in the mounts file are not
    available, and have been ignored".
  * Added resources and fleshed-out install phase.
Detail:
  * An internal error would be generated every time the Omni$Running system
    variable was read.  This was my fault, due to a change I made when removing
    the s.Base file in the previous revision .  The code variable block used
    to reference a location defined in s.Base, in which to store the generated
    string in.  I changed this to store it in the code variable block directly,
    but forgot to change an LDR to an ADR at the same time.

  * The application cleanup code was calling InitVars to reset global variables
    to their initial state, thus trashing the global_run_state variable which
    indicated that the entire filing system should be killed.  This was
    overly paranoid, as InitVars is always called on initialisation, which is
    perfectly adequete.  c.corefini removed as a result, as all it did was
    call InitVars.

  * The failure to restart cleanly on every 2nd attempt was caused by a
    horrible interaction between OmniClient's finalisation code, it's !Run
    file, callbacks and service calls.  It's too complicated to explain here,
    so if you're interested then ask me.  It's been hackily fixed for now by
    placing a call to Inet:Utils.TriggerCBs in Omni's !Run file, between the
    place where it kills the OmniClient module and reloads it (if it detects
    that the module is still running, but the task is not).  A cleaner solution
    should be implemented by making OmniClient able to restart its task in an
    intelligent manner, without requiring the module to be killed.

  * Previously, only Messages, Templates and Templates3D resource files were
    present, and nothing was done with them.  Added the remaining resources
    and fleshed-out the install phase to contruct the full application
    distribution instead of just copying the OmniClient module.
Admin:
  Tested on a Risc PC.

Version 2.09. Tagged as 'Omni-2_09'
@
text
@d17 3
a19 3
EXP_HDR		= <export$dir>.^.Interface2
EXP_C_H		= <Cexport$dir>.h
EXP_C_O		= <Cexport$dir>.o
d21 1
a21 1
LIBDIR		= <Lib$Dir>
d23 2
a24 2
RESFSDIR	= Resources.OmniClient
INSTAPP		= $(INSTDIR).!Omni
d30 14
a43 14
MKDIR		= mkdir -p
AS		= objasm
CC		= $(MemCheckCC) cc
C++		= c++
CMHG		= cmhg
CP		= copy
LD		= $(MemCheckLD) link
RM		= remove
WIPE		= -wipe
CD		= dir
CHMOD		= access
TOUCH		= create
DATA2AOF	= datatoaof
MODSQZ		= modsqz
d52 8
a59 8
ASFLAGS		+= -depend !Depend $(THROWBACK) -stamp -quit
CFLAGS		+= -depend !Depend $(THROWBACK) $(CINCLUDES) $(CDEFINES) -c -Wsp -zM -ffah -strict
C++FLAGS	+= -depend !Depend $(THROWBACK) $(CINCLUDES) $(CDEFINES) -c -Wsp -zM -ffa +a1
CMHGFLAGS	= -depend !Depend $(THROWBACK) $(CINCLUDES) $(CDEFINES) -p
LDFLAGS		= 
CPFLAGS		= ~cfr~v
WFLAGS		= ~c~vr
CHMOCDEFINES	= RW/r
d61 1
a61 1
CDEFINES	+= -DINET -DCOMPAT_INET4 $(EXPERT)
d63 1
a63 1
CINCLUDES	= -IC:,TCPIPLibs:
d72 14
a85 14
CLIB		= CLIB:o.stubs
RLIB		= RISCOSLIB:o.risc_oslib
RSTUBS		= RISCOSLIB:o.rstubs
ROMSTUBS	= RISCOSLIB:o.romstubs
ROMCSTUBS	= RISCOSLIB:o.romcstubs
ABSSYM		= RISC_OSLib:o.c_AbsSym

DEBUGLIB	= $(LIBDIR).DebugLib.o.DebugLibzm
INETLIB		= TCPIPLibs:o.inetlibzm
SOCKLIB		= TCPIPLibs:o.socklibzm
MEMCHECKLIB	= MemCheck:o.MC_M
#DESKLIB	= $(LIBDIR).Desk.o.Desk_D $(LIBDIR).Desk.o.Debug.tml
DESKLIB		= $(LIBDIR).Desk.o.Desk_M
ASMUTILS	= $(LIBDIR).AsmUtils.o.AsmUtilszm
d93 2
a94 2
L_od  = $(DEBUGLIB) $(INETLIB) $(SOCKLIB) $(DESKLIB) $(ASMUTILS) 
L_oMC = $(MEMCHECKLIB) $(DEBUGLIB) $(INETLIB) $(SOCKLIB) $(DESKLIB) $(ASMUTILS) 
d104 4
a107 4
COMPONENT	= OmniClient
RAMTARGET	= rm.$(TARGET)
ROMTARGET	= aof.$(TARGET)
EXPORTS		= $(EXP_C_H).$(COMPONENT)
d156 17
a172 17
.SUFFIXES:	.o .od .oHP .oMC .i .s .c++ .c .cmhg
.c.i:;		$(CC)	$(CFLAGS)	-C -E $< >> $@@
.c.o:;		$(CC)	$(CFLAGS)	-o $@@ $<
.c.od:;		$(CC)	$(CFLAGS)	-fn -o $@@ $<
.c.oMC:;	$(CC)	$(CFLAGS)	-fn -g -o $@@ $<
#.c.oMC:;	$(CC)	$(CFLAGS)	-o $@@ $<
.c.oHP:;	$(CC)	$(CFLAGS)	-fn -o $@@ $<
.cmhg.i:;	@@echo $@@
.cmhg.o:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@@
.cmhg.od:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@@
.cmhg.oMC:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@@
.cmhg.oHP:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@@
.s.i:;		@@echo $@@
.s.o:;		$(AS)	$(ASFLAGS)	$< $@@
.s.od:;		$(AS)	$(ASFLAGS)	$< $@@
.s.oMC:;	$(AS)	$(ASFLAGS)	$< $@@
.s.oHP:;	$(AS)	$(ASFLAGS)	$< $@@
d190 3
a192 3
	$(MKDIR) rm
	$(LD) -rmf $(LDFLAGS) -o $@@ $(RAMOBJS) $(LIBS) $(CLIB)
	$(MODSQZ) $@@
d195 1
a195 1
	ResGen messages_data $@@ LocalRes:Messages Resources.$(COMPONENT).Messages
d197 2
a198 2
$(HDR):	cmhg.OmniClient VersionNum C:Global.h.Services
	$(CMHG)	$(CMHGFLAGS) cmhg.OmniClient -d $@@
d207 2
a208 2
	$(MKDIR) $(EXT)
	$(TOUCH) $@@
d218 1
a218 1
	@@echo $(COMPONENT): rom complete
d221 1
a221 1
	@@echo $(COMPONENT): export complete
d224 16
a239 11
	$(MKDIR) $(INSTAPP)
	$(MKDIR) $(INSTAPP).RMStore
	$(CP) Resources.!Boot      $(INSTAPP).!Boot                $(CPFLAGS)
	$(CP) LocalRes:!Help       $(INSTAPP).!Help                $(CPFLAGS)
	$(CP) LocalRes:!Run        $(INSTAPP).!Run                 $(CPFLAGS)
	$(CP) Resources.!Sprites   $(INSTAPP).!Sprites             $(CPFLAGS)
	$(CP) Resources.!Sprites22 $(INSTAPP).!Sprites22           $(CPFLAGS)
	$(CP) LocalRes:Files       $(INSTAPP).Files                $(CPFLAGS)
	$(CP) Resources.Utils      $(INSTAPP).Utils                $(CPFLAGS)
	$(CP) $(RAMTARGET)         $(INSTAPP).RMStore.$(COMPONENT) $(CPFLAGS)
	@@echo $(COMPONENT): $(RAMTARGET) installed
d242 2
a243 2
	$(CP) $(ROMTARGET) $(INSTAPP).$(COMPONENT) $(CPFLAGS)
	@@echo $(COMPONENT): rom module installed
d246 1
a246 1
	$(WIPE) $(EXT)	$(WFLAGS)
d252 2
a253 2
	$(MKDIR) aof
	$(LD) -aof $(LDFLAGS) -o $@@ $(ROMOBJS) $(LIBS) $(ROMCSTUBS)
d259 4
a262 4
	$(MKDIR) linked
	$(LD) $(LDFLAGS) -o linked.$(COMPONENT) -map -rmf -base $(ADDRESS) $(ROMTARGET) $(ABSSYM) > map.$(COMPONENT)
	$(CP) linked.$(COMPONENT) $(LINKDIR).$(COMPONENT) $(CPFLAGS)
	@@echo $(COMPONENT): rom_link complete
d266 2
a267 2
$(EXP_C_H).$(COMPONENT):	h.$(COMPONENT)
	$(CP) h.$(COMPONENT) $@@ $(CPFLAGS)
@


1.5
log
@  * Fixed Bugzilla ID 21, where typing *RMKill OmniClient from the command
    line would cause the error "free failed, (heap overwritten)" if task part
    of the OmniClient module task was running at the time, rendering
    OmniClient unusable and unloadable until the next reboot.
  * Fixed Bugzilla ID 19, where killing a protocol module when OmniClient was
    already loaded would cause an "Invalid Wimp Operation In This Context"
    error.

  * Miscellaneous bug fixes and tidy-ups.
Detail:
  * The "free failed, (heap overwritten)" error is due to a bug in the
    SharedCLibrary, triggered by OmniClient calling getenv in the C library
    from its task.  The bug results from the implementation of getenv calling
    malloc - see Bugzilla ID 28 for further details.  This has been worked
    around by copying the C Library's getenv routine into OmniClient,
    renaming it to omni_getenv, and making all calls to getenv call
    omni_getenv instead; if the malloc happens from within the task rather
    than from within the C library, then things are fine.
  * The "Invalid Wimp Operation In This Context" error is caused by OmniClient
    calling Wimp_CreateMenu with R0=-1 from within the SWI handler that deals
    with protocol module deregistration.  The reasoning for this is that if,
    for example, you have the Mounts menu open, it becomes invalid at this point
    as all of the dying protocol module's mounts become unavailable.  However,
    it is not legal to call Wimp_CreateMenu at this point as you are not in
    your Wimp task context!

    The call to Wimp_CreateMenu has simply been removed.  This doesn't appear
    to cause a problem if you have a menu open with mounts belonging to the
    dying protocol module - attemping to perform an operation on one causes a
    sensible error to be reported.  A possible future enhancement would be to
    use OmniClient's pollword mechanism to cause the task to close any open
    menus on the module's behalf.

    The reason it never occurred before is that it used to call the X-bit-set
    form of the SWI and didn't check the error returned.  When I modified
    OmniClient to use Desk instead of DeskLib, I changed most SWI calls from
    the task part to be non-X-bit-set calls, and used Desk's psuedo-exception
    system to catch and report all errors at the top level of the
    application.

  * Uses AsmUtils to obtain Image$$RO$$Base.

  * Potential write through null pointer fixed in string duplication routines
    cpystr and cpyrma - they weren't checking the result of their allocation
    calls.

  * Replaced the somewhat confusing all_done variable, which could take (magic)
    values between 0 and 2 inclusive to cause different sorts of quit, with
    an enumerated type called RunState.

  * Issuing of Service_OmniClient (dying) in module finalisation made
    unconditional (was previously conditional on the value of all_done), as it's
    most definitely always dying if the finalisation routine is called.  I
    think this was a hangover from when the module finalisation code was
    implemented as an atexit handler.

  * Exit code in the task does not issue Service_OmniClient (dying) if the
    entire filing system is being killed off - this will happen in module
    finalisation, which will be called as a result of the task calling
    OS_ExitAndDie.  This can only happen in "expert" builds.

  * Fixed allocation of too much memory in ItemParse routine!  It dynamically
    creates an array of pointers to structures, but was allocating enough space
    for an array of structures.

  * Fixed potential memory leak in PrintListServers routine - was calling
    realloc and assigning the result directly to the original pointer, instead
    of assigning it to a temporary and only updating the original poiiner if
    the realloc succeeds.

  * Fixed potential null pointer dereference in SortMessages routine - had a
    check for a null pointer parameter at the start, but managed to dereference
    the pointer before the check as part of a variable initialisation.

  * Added all documents from ANT's Docs directory into ours.

Admin:
  Tested on a Risc PC.
  Fixes Bugzilla bugs 19 & 21.

Version 2.08. Tagged as 'Omni-2_08'
@
text
@d24 1
d30 1
a30 1
MKDIR		= cdir
d104 1
a104 1
COMPONENT	= Omni
a111 1
 $(EXT).CoreFini\
d224 10
a233 1
	$(CP) $(RAMTARGET) $(INSTDIR).$(COMPONENT) $(CPFLAGS)
d237 1
a237 1
	$(CP) $(ROMTARGET) $(INSTDIR).$(COMPONENT) $(CPFLAGS)
@


1.4
log
@  Fixed a bug where submenus would sometimes not open.
Detail:
  More fallout from the modifications to use Desk's standard event handling
  mechanisms rather that ANT's customised one.

  Releasing Wimp message event claims in Desk releases all handlers
  registered for that message, not just one.  The Omni code was
  (re)registering the event handlers for all new mounts, so if you had more
  than one mount active and did a dismount, the message event handler would
  be deregistered for all the other active mounts as well.  This means you'd
  no longer revceive MenuWarn messages, so submenus wouldn't be opened.

  All mount event handlers with the exception of the ButtonClick handler are
  now only registered once, irrespective of the number of active mounts, and
  only deregistered once there are no active mounts.  Non-message event
  handlers do not suffer the problem described above, so the ButtonClick
  handler is safe.  The reason it is still registered for each mount is that
  the handler actually uses the user-supplied data for context, whereas none
  of the other handlers did; they obtain it from global variables instead -
  lovely.
Admin:
  Compiled and tested on a Risc PC.

Version 2.07. Tagged as 'Omni-2_07'
@
text
@d48 1
a48 1
# Flags - see FlagReadMe
d51 4
a54 5
AFLAGS		= -depend !Depend $(THROWBACK) $(EXTRA_A_FLAGS) -stamp -quit
CCFLAGS		= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -c -Wsp -zM -ffah -strict
C++FLAGS	= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -c -Wsp -zM -ffa +a1
CMHGFLAGS	= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -p
DATA2AOFFLAGS	= -L _length -S -P -DP
d58 1
a58 1
CHMODFLAGS	= RW/r
d60 1
a60 1
DFLAGS		= $(EXTRA_C_FLAGS) -DINET -DCOMPAT_INET4
d62 1
a62 1
INCLUDES	= -IC:,TCPIPLibs:
a77 1
C++LIB		= $(LIBDIR).C++Lib.o.C++Libz
d82 1
a82 1
#DESKLIB		= $(LIBDIR).Desk.o.Desk_D $(LIBDIR).Desk.o.Debug.tml
d84 1
d86 10
a95 3
LIBS = $(DEBUGLIB) $(DESKLIB) $(SOCKLIB) $(INETLIB) $(MEMCHECKLIB)
#LIBS = $(DEBUGLIB) $(DESKLIB) $(SOCKLIB) $(INETLIB) $(MEMCHECKLIB)
#LIBS = $(CallXLib) $(DCILib) $(DEBUGLIB) $(SOCKLIB) $(INETLIB) $(MEMCHECKLIB) $(C++Lib)
a108 1
 $(EXT).Base\
d157 6
a162 6
.c.i:;		$(CC)	$(CCFLAGS)	-C -E $< >> $@@
.c.o:;		$(CC)	$(CCFLAGS)	-o $@@ $<
.c.od:;		$(CC)	$(CCFLAGS)	-fn -o $@@ $<
.c.oMC:;	$(CC)	$(CCFLAGS)	-fn -g -o $@@ $<
#.c.oMC:;	$(CC)	$(CCFLAGS)	-o $@@ $<
.c.oHP:;	$(CC)	$(CCFLAGS)	-fn -o $@@ $<
d169 4
a172 4
.s.o:;		$(AS)	$(AFLAGS)	$< $@@
.s.od:;		$(AS)	$(AFLAGS)	$< $@@
.s.oMC:;	$(AS)	$(AFLAGS)	$< $@@
.s.oHP:;	$(AS)	$(AFLAGS)	$< $@@
d253 1
a253 1
        $(CP) h.$(COMPONENT) $@@ $(CPFLAGS)
@


1.3
log
@  * Fixed bug which I introduced in previous version, where errors that
    occurred when trying to connect to a mount would cause two errors to be
    reported.
Detail:
  * When I went through blindly changing all _kernel_swi or Desk_SWI calls
    to _swix, I failed to notice that one or two of the calls rely on the
    output parameters being filled in even if an error occurs - _swix does not
    do this.  I've now created a set of type safe C veneers for all calls to
    client modules, which use _swix or _kernel_swi as necessary.  This has the
    additional benefit of making the code more readable and getting rid of
    quite a few uses of magic numbers.
Admin:
  * Compiled and tested on a Risc PC.

Version 2.06. Tagged as 'Omni-2_06'
@
text
@d151 1
a151 1
.SUFFIXES:	.o .od .oHP .oMC .i .h .s .c++ .c .cmhg
a162 1
.cmhg.h:;	$(CMHG)	$(CMHGFLAGS)	$< -d $@@
d191 3
@


1.2
log
@  Several major bugfixes and further tidying to make Omni fit into our
  build environment better.
Detail:
  * Bug fix: ClientList function (Client.c) creates a textual menu desription
    for a list of clients (Info and Mounts submenus).  The description was
    generated on the stack and a pointer to it was returned.  The buffer is now
    static.
  * Bug fix: select or adjust clicks on the Omni icon just after it's loaded
    would kill the task part of Omni.  FilerCreate function (List.c) always
    calls FilerDelete, which would always attempt to close any existing filer
    window.  However, on the first call, no window exists so it passes the Wimp
    a 0 window handle.  This only appeared to happen on RISC OS 4, but I suspect
    this is to do with RISC OS 4's stricter protection of zero page.  Current
    fix is for FilerDelete to check if window handle is 0 before closing it;
    this is not very elegant - would be nicer to only call FilerDelete when the
    window was actually closed.
  * Bug fix: writable icon handling overhauled completely.  Many of the buffers
    which Omni would read the contents of writable icons into were too short
    to hold the maximum amount of text allowed in the icon.  New Icon_GetText
    call added (ExtLib.c) to allow Omni to work directly on indirected icon
    buffers wherever possible, thus removing the whole issue.
  * Stripped commented-out code from several places.
  * Changed use of Desk_bool to bool in most places.  This is a bit grim, but
    the way Desk_bool is implemented means you need to cast it in many places,
    which is even more grim.
  * Removed a few error assignements(!) because
    a) they weren't even being checked
    b) Desk's psuedo-exception system should now catch them
  * Got rid of home-grown strcasecmp calls and used Desk's instead.
  * Removed many local constants definitions and get them from system header
    files instead.
  * Removed Hdrs.h which would include *every* header file in *every* C file
    in the interests of compilation times.  C files now only include what they
    need.
  * Reimplemented the fully recursive Menu_Dispose along the lines of the
    non-recursive Desk_Menu_Dispose, which had changed since ANT's DeskLib
    split-off.
  * Altered quite a bit of code to prevent compiler warnings (mainly
    "use of '=' in condition context" and "variable declared but not used").
  * Uses 'proper' module finalisation instead of atexit in the interests of
    consistency and symmetry.
  * Added MemCheck support.
  * Reimplemented rma_alloc and rma_free in C (side effect of MemCheck support).
  * Altered assembler to use system header files instead of local ones.
  * Omni previously used a seeming random mixture of _kernel_swi and Desk_SWI
    SWI veneers.  All have now been changed to use _swix/_swi as appropriate.
  * Converted to use srccommit.
Admin:
  Files removed:
   c.Error
   c.StrCaseCmp
   h.Debug
   h.Hdrs
   h.ModuleWrap
   h.OmniClient
   h.StrCaseCmp
   hdr.Macros
   hdr.RegDefs
   hdr.SwiNos

  Files added:
   Docs.DeskLibDiffs
   Docs.EventHandling
   h.Omni

  * Compiled.
  * All windows, menus checked to make sure they at least display.
  * Played around with a new NFS and LanMan mounts.
  * Basically, there shouldn't be any showstoppers, but the change from a very
    old DeskLib to Desk is a large one.  I'd be surprised if there aren't a
    few problems and this should definitely be thrashed a bit by people
    willing to do so before anyone has any confidence in it.



Version 2.05. Tagged as 'Omni-2_05'
@
text
@a225 1
	@@echo $(COMPONENT): cleaned
@


1.1
log
@Initial revision
@
text
@d52 1
a52 1
CCFLAGS		= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -c -Wsp -zM -ffah
d88 1
a123 1
 $(EXT).StrCaseCmp\
d154 1
a154 2
#.c.od:;		$(CC)	$(CCFLAGS)	-fn -o $@@ $<
.c.od:;		$(CC)	$(CCFLAGS)	-o $@@ $<
d188 1
a188 2

#	$(MODSQZ) $@@
@


1.1.1.1
log
@  Initial import of Omni into CVS.

Detail:
  This is an import of the sources obtained from ANT some time ago, with
  sufficient changes to allow it to build in our standard environment.  In
  particular, this involved converting Omni to use Desk instead of DeskLib.
  ANT's DeskLib was not 'off-the-shelf' - it was based on DeskLib 2.04 (very
  old), with their own modifications.
  
  This means that there are quite severe bugs in the Omni code, which will
  show up if you attempt to use this version, which were previously masked by
  some of ANT's DeskLib alterations.  (Hopefully) most of these have already
  been identified, fixed and will be checked-in soon.  I felt that a
  minimal version that would simply build would be worthwhile, so that as
  many changes as possible end up under CVS' control.

Admin:
  Compiled.
  Untested.
@
text
@@
