head	1.1;
access;
symbols
	Omni-2_30:1.1
	Omni-2_29:1.1
	Omni-2_28:1.1
	Omni-2_27:1.1
	Omni-2_26:1.1
	Omni-2_25:1.1
	Omni-2_24:1.1
	Omni-2_23:1.1
	Omni-2_22:1.1
	Omni-2_21:1.1
	Omni-2_20:1.1
	Omni-2_19:1.1
	Omni-2_18:1.1
	Omni-2_17:1.1
	Omni-2_16:1.1
	Omni-2_15:1.1
	Omni-2_14:1.1
	Omni-2_13:1.1
	Omni-2_12:1.1
	Omni-2_11:1.1
	Omni-2_10:1.1
	Omni-2_09:1.1
	Omni-2_08:1.1
	Omni-2_07:1.1
	Omni-2_06:1.1
	Omni-2_05:1.1;
locks; strict;
comment	@# @;


1.1
date	2000.03.07.19.24.13;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Several major bugfixes and further tidying to make Omni fit into our
  build environment better.
Detail:
  * Bug fix: ClientList function (Client.c) creates a textual menu desription
    for a list of clients (Info and Mounts submenus).  The description was
    generated on the stack and a pointer to it was returned.  The buffer is now
    static.
  * Bug fix: select or adjust clicks on the Omni icon just after it's loaded
    would kill the task part of Omni.  FilerCreate function (List.c) always
    calls FilerDelete, which would always attempt to close any existing filer
    window.  However, on the first call, no window exists so it passes the Wimp
    a 0 window handle.  This only appeared to happen on RISC OS 4, but I suspect
    this is to do with RISC OS 4's stricter protection of zero page.  Current
    fix is for FilerDelete to check if window handle is 0 before closing it;
    this is not very elegant - would be nicer to only call FilerDelete when the
    window was actually closed.
  * Bug fix: writable icon handling overhauled completely.  Many of the buffers
    which Omni would read the contents of writable icons into were too short
    to hold the maximum amount of text allowed in the icon.  New Icon_GetText
    call added (ExtLib.c) to allow Omni to work directly on indirected icon
    buffers wherever possible, thus removing the whole issue.
  * Stripped commented-out code from several places.
  * Changed use of Desk_bool to bool in most places.  This is a bit grim, but
    the way Desk_bool is implemented means you need to cast it in many places,
    which is even more grim.
  * Removed a few error assignements(!) because
    a) they weren't even being checked
    b) Desk's psuedo-exception system should now catch them
  * Got rid of home-grown strcasecmp calls and used Desk's instead.
  * Removed many local constants definitions and get them from system header
    files instead.
  * Removed Hdrs.h which would include *every* header file in *every* C file
    in the interests of compilation times.  C files now only include what they
    need.
  * Reimplemented the fully recursive Menu_Dispose along the lines of the
    non-recursive Desk_Menu_Dispose, which had changed since ANT's DeskLib
    split-off.
  * Altered quite a bit of code to prevent compiler warnings (mainly
    "use of '=' in condition context" and "variable declared but not used").
  * Uses 'proper' module finalisation instead of atexit in the interests of
    consistency and symmetry.
  * Added MemCheck support.
  * Reimplemented rma_alloc and rma_free in C (side effect of MemCheck support).
  * Altered assembler to use system header files instead of local ones.
  * Omni previously used a seeming random mixture of _kernel_swi and Desk_SWI
    SWI veneers.  All have now been changed to use _swix/_swi as appropriate.
  * Converted to use srccommit.
Admin:
  Files removed:
   c.Error
   c.StrCaseCmp
   h.Debug
   h.Hdrs
   h.ModuleWrap
   h.OmniClient
   h.StrCaseCmp
   hdr.Macros
   hdr.RegDefs
   hdr.SwiNos

  Files added:
   Docs.DeskLibDiffs
   Docs.EventHandling
   h.Omni

  * Compiled.
  * All windows, menus checked to make sure they at least display.
  * Played around with a new NFS and LanMan mounts.
  * Basically, there shouldn't be any showstoppers, but the change from a very
    old DeskLib to Desk is a large one.  I'd be surprised if there aren't a
    few problems and this should definitely be thrashed a bit by people
    willing to do so before anyone has any confidence in it.



Version 2.05. Tagged as 'Omni-2_05'
@
text
@Thoughts on Wimp event handling

There are several aspects of this that I don't like.  Too much use is made of
'catch-all' type handlers which deal with any occurance of certain event and
then find out which window it applied to and what to do about it.  This
has the side effect of leading to some huge functions which are hard to
follow.  IMHO it's better to make event handlers more specific (certainly
specific to a certain window if not to particular icons) - this leads to
smaller, simpler functions and allows better partitioning and separation of
the code into e.g. mount related stuff, filer related stuff etc.

Another thing that's particularly nasty is the way a 'catch all' event
handler is registered per mount for each event.  Each time an event occurs to
do with a particular mount, you might cycle through several instances of the
same event handler before you match the one for the mount you're interested
in (it does this match using the 'user data' pointer).

This is completely pointless: either register a *single* non-window or icon
specific event handler that is used for all mounts, then decode which
particular mount the event occurred on at the start of the handler (i.e.
trust the value of the global variable it currently compares the user data
pointer against when cycling through them), or register multiple window and
icon specific handlers (possibly using the same handler routine) and trust
your user data pointer to give you appropriate context.@
