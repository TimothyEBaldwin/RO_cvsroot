head	1.6;
access;
symbols
	Omni-2_30:1.6
	Omni-2_29:1.6
	Omni-2_28:1.6
	Omni-2_27:1.6
	Omni-2_26:1.6
	Omni-2_25:1.6
	Omni-2_24:1.6
	Omni-2_23:1.6
	Omni-2_22:1.6
	Omni-2_21:1.6
	Omni-2_20:1.6
	Omni-2_19:1.6
	Omni-2_18:1.6
	Omni-2_17:1.6
	Omni-2_16:1.6
	Omni-2_15:1.5
	Omni-2_14:1.5
	Omni-2_13:1.5
	Omni-2_12:1.5
	Omni-2_11:1.5
	Omni-2_10:1.4
	Omni-2_09:1.4
	Omni-2_08:1.3
	Omni-2_07:1.2
	Omni-2_06:1.2
	Omni-2_05:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2011.12.14.13.51.51;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	Zvyz3NZzpUnQ5aLv;

1.5
date	2002.11.24.19.14.17;	author rsprowson;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.17.09.37.44;	author blaughto;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.16.18.28.04;	author blaughto;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.19.24.22;	author blaughto;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.02.19.41.35;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.03.02.19.41.35;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Resolve some warnings.
Was actually looking for a different problem, turned out to be nothing to do with OmniClient.

Version 2.16. Tagged as 'Omni-2_16'
@
text
@; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Title:   s.ExtLibAsm
; Purpose: Extensions in assembler
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services
        GET     Hdr:Wimp

        AREA    ExtLibAsm, CODE, READONLY

; Issue Service_OmniAction on a transient callback

        EXPORT  serviceomni_delay

serviceomni_delay
        STMFD   sp!, {lr}
        MOV     a2, a1                  ; save R0 parameter (called as r12)
        ADR     a1, serviceomni_cb
        SWI     XOS_AddCallBack
        LDMFD   sp!, {pc}

serviceomni_cb
        STMFD   sp!, {a1-a2, lr}
        MOV     a1, ip                  ; issue service call
        MOV     a2, #Service_OmniAction
        SWI     XOS_ServiceCall
        LDMFD   sp!, {a1-a2, pc}

; Wimp_SpriteReadInfo

        EXPORT  Wimp_SpriteReadInfo

Wimp_SpriteReadInfo
        STMFD   sp!, {a2, v1, v2, v3, lr}
        MOV     a3, a1
        MOV     a1, #40
        SWI     XWimp_SpriteOp
        LDMFD   sp!, {a2}
        STMVCIA a2, {a4, v1, v2, v3}
        MOVVC   a1, #0
        [ {CONFIG}=26
        LDMFD   sp!, {v1, v2, v3, pc}^
        |
        LDMFD   sp!, {v1, v2, v3, pc}
        ]

; SetVar_Code - sets up/removes a code system variable

        EXPORT  SetVar_Code

SetVar_Code
        STMFD   sp!, {v1, lr}
        MOVS    a3, a1                  ; r0 = -ve on entry to remove variable
        MOVGE   a3, #var_end-var_code
        STR     a2, var_taskhandle      ; r1 = address of taskhandle int
        ADR     a1, var_name
        ADR     a2, var_code
        MOV     a4, #0
        MOV     v1, #16
        SWI     XOS_SetVarVal
        [ {CONFIG}=26
        LDMFD   sp!, {v1, pc}^
        |
        LDMFD   sp!, {v1, pc}
        ]

; var_code - evaluates the system variable

var_code
        B       var_write               ; write entry point
        LDR     a1, var_taskhandle      ; read entry point
        LDR     a1, [a1]
        CMP     a1, #0
        MOVHI   a2, #"1"
        MOVLS   a2, #"0"
        ADR     a1, var_state
        STRB    a2, [a1, #0]
        MOV     a3, #1
var_write
        MOV     pc, lr
var_taskhandle
        DCD     0
var_state
        DCB     "0"
var_end

var_name
        =       "Omni$Running", 0

        END
@


1.5
log
@Put util binaries in the attic
Deleted a few ^ in the veneers to gain 32 bit compatibility
Info template resized to match Edit
Ant and Acorn contact addresses removed from !Help
The makefile for this is seriously broken,for example MkClean appears
to compile it!

Version 2.11. Tagged as 'Omni-2_11'
@
text
@a25 1
        IMPORT  taskhandle
@


1.4
log
@  * Fixed Omni$Running system variable bug introduced in previous revision.
  * Fixed bug where Quit->All in expert mode would only quit the filer and
    not the whole filing system.
  * Fixed bug where just quitting the filer and attempting to re-run OmniClient
    would produce the error "Some protocols in the mounts file are not
    available, and have been ignored".
  * Added resources and fleshed-out install phase.
Detail:
  * An internal error would be generated every time the Omni$Running system
    variable was read.  This was my fault, due to a change I made when removing
    the s.Base file in the previous revision .  The code variable block used
    to reference a location defined in s.Base, in which to store the generated
    string in.  I changed this to store it in the code variable block directly,
    but forgot to change an LDR to an ADR at the same time.

  * The application cleanup code was calling InitVars to reset global variables
    to their initial state, thus trashing the global_run_state variable which
    indicated that the entire filing system should be killed.  This was
    overly paranoid, as InitVars is always called on initialisation, which is
    perfectly adequete.  c.corefini removed as a result, as all it did was
    call InitVars.

  * The failure to restart cleanly on every 2nd attempt was caused by a
    horrible interaction between OmniClient's finalisation code, it's !Run
    file, callbacks and service calls.  It's too complicated to explain here,
    so if you're interested then ask me.  It's been hackily fixed for now by
    placing a call to Inet:Utils.TriggerCBs in Omni's !Run file, between the
    place where it kills the OmniClient module and reloads it (if it detects
    that the module is still running, but the task is not).  A cleaner solution
    should be implemented by making OmniClient able to restart its task in an
    intelligent manner, without requiring the module to be killed.

  * Previously, only Messages, Templates and Templates3D resource files were
    present, and nothing was done with them.  Added the remaining resources
    and fleshed-out the install phase to contruct the full application
    distribution instead of just copying the OmniClient module.
Admin:
  Tested on a Risc PC.

Version 2.09. Tagged as 'Omni-2_09'
@
text
@d19 5
a23 5
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Services
	GET	Hdr:Wimp
d25 2
a26 2
        AREA	ExtLibAsm, CODE, READONLY
	IMPORT	taskhandle
d30 1
a30 1
	EXPORT	serviceomni_delay
d33 5
a37 5
	STMFD	sp!, {lr}
	MOV	a2, a1			; save R0 parameter (called as r12)
	ADR 	a1, serviceomni_cb
	SWI	XOS_AddCallBack
        LDMFD	sp!, {pc}
d40 5
a44 5
	STMFD	sp!, {a1-a2, lr}
	MOV	a1, ip			; issue service call
	MOV	a2, #Service_OmniAction
        SWI	XOS_ServiceCall
        LDMFD	sp!, {a1-a2, pc}
d58 1
d60 3
d70 9
a78 8
	MOVS	a3, a1			; r0 = -ve on entry to remove variable
	MOVGE	a3, #var_end-var_code
	STR	a2, var_taskhandle	; r1 = address of taskhandle int
	ADR	a1, var_name
	ADR	a2, var_code
	MOV	a4, #0
	MOV	v1, #16
	SWI	XOS_SetVarVal
d80 3
d87 9
a95 9
	B	var_write		; write entry point
	LDR	a1, var_taskhandle	; read entry point
	LDR	a1, [a1]
	CMP	a1, #0
	MOVGT	a2, #"1"
	MOVLE	a2, #"0"
	ADR	a1, var_state
	STRB	a2, [a1, #0]
	MOV	a3, #1
d97 1
a97 1
	MOV	pc, lr
d99 1
a99 1
	DCD	0
d101 1
a101 1
	DCB	"0"
d105 1
a105 1
	=	"Omni$Running", 0
@


1.3
log
@  * Fixed Bugzilla ID 21, where typing *RMKill OmniClient from the command
    line would cause the error "free failed, (heap overwritten)" if task part
    of the OmniClient module task was running at the time, rendering
    OmniClient unusable and unloadable until the next reboot.
  * Fixed Bugzilla ID 19, where killing a protocol module when OmniClient was
    already loaded would cause an "Invalid Wimp Operation In This Context"
    error.

  * Miscellaneous bug fixes and tidy-ups.
Detail:
  * The "free failed, (heap overwritten)" error is due to a bug in the
    SharedCLibrary, triggered by OmniClient calling getenv in the C library
    from its task.  The bug results from the implementation of getenv calling
    malloc - see Bugzilla ID 28 for further details.  This has been worked
    around by copying the C Library's getenv routine into OmniClient,
    renaming it to omni_getenv, and making all calls to getenv call
    omni_getenv instead; if the malloc happens from within the task rather
    than from within the C library, then things are fine.
  * The "Invalid Wimp Operation In This Context" error is caused by OmniClient
    calling Wimp_CreateMenu with R0=-1 from within the SWI handler that deals
    with protocol module deregistration.  The reasoning for this is that if,
    for example, you have the Mounts menu open, it becomes invalid at this point
    as all of the dying protocol module's mounts become unavailable.  However,
    it is not legal to call Wimp_CreateMenu at this point as you are not in
    your Wimp task context!

    The call to Wimp_CreateMenu has simply been removed.  This doesn't appear
    to cause a problem if you have a menu open with mounts belonging to the
    dying protocol module - attemping to perform an operation on one causes a
    sensible error to be reported.  A possible future enhancement would be to
    use OmniClient's pollword mechanism to cause the task to close any open
    menus on the module's behalf.

    The reason it never occurred before is that it used to call the X-bit-set
    form of the SWI and didn't check the error returned.  When I modified
    OmniClient to use Desk instead of DeskLib, I changed most SWI calls from
    the task part to be non-X-bit-set calls, and used Desk's psuedo-exception
    system to catch and report all errors at the top level of the
    application.

  * Uses AsmUtils to obtain Image$$RO$$Base.

  * Potential write through null pointer fixed in string duplication routines
    cpystr and cpyrma - they weren't checking the result of their allocation
    calls.

  * Replaced the somewhat confusing all_done variable, which could take (magic)
    values between 0 and 2 inclusive to cause different sorts of quit, with
    an enumerated type called RunState.

  * Issuing of Service_OmniClient (dying) in module finalisation made
    unconditional (was previously conditional on the value of all_done), as it's
    most definitely always dying if the finalisation routine is called.  I
    think this was a hangover from when the module finalisation code was
    implemented as an atexit handler.

  * Exit code in the task does not issue Service_OmniClient (dying) if the
    entire filing system is being killed off - this will happen in module
    finalisation, which will be called as a result of the task calling
    OS_ExitAndDie.  This can only happen in "expert" builds.

  * Fixed allocation of too much memory in ItemParse routine!  It dynamically
    creates an array of pointers to structures, but was allocating enough space
    for an array of structures.

  * Fixed potential memory leak in PrintListServers routine - was calling
    realloc and assigning the result directly to the original pointer, instead
    of assigning it to a temporary and only updating the original poiiner if
    the realloc succeeds.

  * Fixed potential null pointer dereference in SortMessages routine - had a
    check for a null pointer parameter at the start, but managed to dereference
    the pointer before the check as part of a variable initialisation.

  * Added all documents from ANT's Docs directory into ours.

Admin:
  Tested on a Risc PC.
  Fixes Bugzilla bugs 19 & 21.

Version 2.08. Tagged as 'Omni-2_08'
@
text
@d85 1
a85 1
	LDR	a1, var_state
d93 1
a93 1
	DCB	1
@


1.2
log
@  Several major bugfixes and further tidying to make Omni fit into our
  build environment better.
Detail:
  * Bug fix: ClientList function (Client.c) creates a textual menu desription
    for a list of clients (Info and Mounts submenus).  The description was
    generated on the stack and a pointer to it was returned.  The buffer is now
    static.
  * Bug fix: select or adjust clicks on the Omni icon just after it's loaded
    would kill the task part of Omni.  FilerCreate function (List.c) always
    calls FilerDelete, which would always attempt to close any existing filer
    window.  However, on the first call, no window exists so it passes the Wimp
    a 0 window handle.  This only appeared to happen on RISC OS 4, but I suspect
    this is to do with RISC OS 4's stricter protection of zero page.  Current
    fix is for FilerDelete to check if window handle is 0 before closing it;
    this is not very elegant - would be nicer to only call FilerDelete when the
    window was actually closed.
  * Bug fix: writable icon handling overhauled completely.  Many of the buffers
    which Omni would read the contents of writable icons into were too short
    to hold the maximum amount of text allowed in the icon.  New Icon_GetText
    call added (ExtLib.c) to allow Omni to work directly on indirected icon
    buffers wherever possible, thus removing the whole issue.
  * Stripped commented-out code from several places.
  * Changed use of Desk_bool to bool in most places.  This is a bit grim, but
    the way Desk_bool is implemented means you need to cast it in many places,
    which is even more grim.
  * Removed a few error assignements(!) because
    a) they weren't even being checked
    b) Desk's psuedo-exception system should now catch them
  * Got rid of home-grown strcasecmp calls and used Desk's instead.
  * Removed many local constants definitions and get them from system header
    files instead.
  * Removed Hdrs.h which would include *every* header file in *every* C file
    in the interests of compilation times.  C files now only include what they
    need.
  * Reimplemented the fully recursive Menu_Dispose along the lines of the
    non-recursive Desk_Menu_Dispose, which had changed since ANT's DeskLib
    split-off.
  * Altered quite a bit of code to prevent compiler warnings (mainly
    "use of '=' in condition context" and "variable declared but not used").
  * Uses 'proper' module finalisation instead of atexit in the interests of
    consistency and symmetry.
  * Added MemCheck support.
  * Reimplemented rma_alloc and rma_free in C (side effect of MemCheck support).
  * Altered assembler to use system header files instead of local ones.
  * Omni previously used a seeming random mixture of _kernel_swi and Desk_SWI
    SWI veneers.  All have now been changed to use _swix/_swi as appropriate.
  * Converted to use srccommit.
Admin:
  Files removed:
   c.Error
   c.StrCaseCmp
   h.Debug
   h.Hdrs
   h.ModuleWrap
   h.OmniClient
   h.StrCaseCmp
   hdr.Macros
   hdr.RegDefs
   hdr.SwiNos

  Files added:
   Docs.DeskLibDiffs
   Docs.EventHandling
   h.Omni

  * Compiled.
  * All windows, menus checked to make sure they at least display.
  * Played around with a new NFS and LanMan mounts.
  * Basically, there shouldn't be any showstoppers, but the change from a very
    old DeskLib to Desk is a large one.  I'd be surprised if there aren't a
    few problems and this should definitely be thrashed a bit by people
    willing to do so before anyone has any confidence in it.



Version 2.05. Tagged as 'Omni-2_05'
@
text
@a62 1
	IMPORT	Image__Var_State
d66 2
a67 1
	MOV	a3, a1			; r0 = -ve on entry to remove variable
a72 2
	CMP	a3, #0
	MOVGE	a3, #var_end-var_code
a74 3
var_name
	=	"Omni$Running", 0
	ALIGN
d89 1
a89 1
	MOVS	pc, lr
d93 1
a93 1
	DCD	Image__Var_State
d95 3
@


1.1
log
@Initial revision
@
text
@d19 5
a23 3
        GET     hdr.regdefs
        GET     hdr.swinos
        GET     hdr.macros
d36 1
a36 1
	SWI	OS_AddCallBack + XOS_Bit
d43 1
a43 1
        SWI	OS_ServiceCall + XOS_Bit
d54 1
a54 1
        SWI     Wimp_SpriteOp + XOS_Bit
a59 21
; RMA alloc/dealloc routines

	EXPORT	rma_alloc
	EXPORT	rma_free

rma_alloc
	STMFD	sp!, {lr}
	MOV	a4, a1
	MOV	a1, #6
	SWI	OS_Module + XOS_Bit
	MOVVS	a1, #0
	MOVVC	a1, a3
	LDMFD	sp!, {pc}

rma_free
	STMFD	sp!, {lr}
	MOV	a3, a1
	MOV	a1, #7
	SWI	OS_Module + XOS_Bit
	LDMFD	sp!, {pc}

d75 1
a75 1
	SWI	OS_SetVarVal + XOS_Bit
@


1.1.1.1
log
@  Initial import of Omni into CVS.

Detail:
  This is an import of the sources obtained from ANT some time ago, with
  sufficient changes to allow it to build in our standard environment.  In
  particular, this involved converting Omni to use Desk instead of DeskLib.
  ANT's DeskLib was not 'off-the-shelf' - it was based on DeskLib 2.04 (very
  old), with their own modifications.
  
  This means that there are quite severe bugs in the Omni code, which will
  show up if you attempt to use this version, which were previously masked by
  some of ANT's DeskLib alterations.  (Hopefully) most of these have already
  been identified, fixed and will be checked-in soon.  I felt that a
  minimal version that would simply build would be worthwhile, so that as
  many changes as possible end up under CVS' control.

Admin:
  Compiled.
  Untested.
@
text
@@
