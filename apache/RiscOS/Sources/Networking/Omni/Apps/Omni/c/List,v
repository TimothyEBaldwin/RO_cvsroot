head	1.5;
access;
symbols
	Omni-2_30:1.5
	Omni-2_29:1.4
	Omni-2_28:1.4
	Omni-2_27:1.4
	Omni-2_26:1.4
	Omni-2_25:1.4
	Omni-2_24:1.4
	Omni-2_23:1.4
	Omni-2_22:1.4
	Omni-2_21:1.4
	Omni-2_20:1.3
	Omni-2_19:1.3
	Omni-2_18:1.2
	Omni-2_17:1.2
	Omni-2_16:1.2
	Omni-2_15:1.2
	Omni-2_14:1.2
	Omni-2_13:1.2
	Omni-2_12:1.2
	Omni-2_11:1.2
	Omni-2_10:1.2
	Omni-2_09:1.2
	Omni-2_08:1.2
	Omni-2_07:1.2
	Omni-2_06:1.2
	Omni-2_05:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2018.09.20.21.05.41;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	ljMsoSQjcEAv2TSA;

1.4
date	2015.02.01.10.25.45;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	TBqB5VZAzQbz9i8y;

1.3
date	2013.11.22.17.57.01;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	9mAsVrxUXmieFiex;

1.2
date	2000.03.07.19.24.15;	author blaughto;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.02.19.41.33;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.03.02.19.41.33;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Various fixes
Events.c: refactor ActiveMounts() to not return a pointer to a local buffer array; avoid potential NULL pointer issue on 'ir'.
FileType.c: avoid undefined sprintf() when destination appears as one of the args
List.c: defer dereferencing 'wr' until checked for NULL
Print.c: don't leak 'tmp' on error
Parse.c: defer dereferencing 'wr' until checked for NULL, tweak dprintf() to avoid potential NULL pointer read in debug output
Found by cppcheck static analysis.

Version 2.30. Tagged as 'Omni-2_30'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Program:	List.c - routines to deal with Server/Mounts 'filer' windows
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@@ant.co.uk
 *
 * Date:	25 September 1994
 * Last Edited:	5 May 1995
 *
 * Copyright 1994,1995 by ANT Limited
 */

#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <Desk/GFX.h>
#include <Desk/Hourglass.h>
#include <Desk/Kbd.h>
#include <Desk/LinkList.h>
#include <Desk/Msgs.h>
#include <Desk/Screen.h>
#include <Desk/Template.h>
#include <Desk/WimpSWIs.h>
#include <Desk/Window.h>

#include <DebugLib/DebugLib.h>

#include "Client.h"
#include "Defs.h"
#include "Events.h"
#include "Expert.h"
#include "ExtLib.h"
#include "Filer.h"
#include "Heap.h"
#include "List.h"
#include "Parse.h"
#include "Redraw.h"


static Desk_wimp_point openlast = {-1, -1};	/* Last position mount opened */

/*  ************************** Public functions *****************************
 */


/*  Hack on RedrawItem() to only force a redraw of part of the filer item.
 */
static void HackRedraw(Desk_window_handle w, int item)
{
  wind_record *r;
  int width;

  dprintf (("", "HackRedraw: %x %d\n", (int) w, item));
  r = FilerFind(w, -1, -1, -1);
  dprintf (("", "HackRedraw: %x\n", (int) r));
  if (!r) return;
  width = r->d_width;
  if ((r == &wind_filer) && (r->display == display_FULL)) r->d_width = 66 + r->d_widths[1];
  if ((r != &wind_filer) && (r->display == display_FULL)) r->d_width = 68 + r->d_widths[1];
  RedrawItem(w, item);
  r->d_width = width;
}


/*  Find item in linked list from either window handle or item number.
 */
extern wind_record *FilerFind(Desk_window_handle w, int item, int client_id, int server_id)
{
  wind_record *r = (wind_record *) wind_filer.anchor.next;
  int searchtype = 0;

  dprintf (("", "FilerFind:\n"));
  if (w != NULL) searchtype = 1;
  if ((w == wind_filer.w) && (searchtype == 1)) return(&wind_filer);
  if (client_id != -1) searchtype = 2;
  dprintf (("", "FilerFind: %x\n", (int) r));
  dprintf (("", "FilerFind:window list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor)));
  while (r != NULL)
  {
    dprintf (("", "FilerFind: %x\n", (int) r));
    switch (searchtype)
    {
      case 0: if (r->item == item) return(r);
              break;
      case 1: if (r->w == w) return(r);
              break;
      case 2: if ((r->client_id == client_id) && (r->server_id == server_id)) return(r);
              break;
      default:
        break;
    }
    r = (wind_record *) r->header.next;
  }
  return(NULL);
}


/*  Find item in linked list from item [1..n] number.
 */
extern item_record *ItemFind(wind_record *wr, int item)
{
  item_record *r;
  item_record *tr = NULL;

  dprintf (("", "ItemFind: %x %d\n", (int) wr, item));
  if ((!wr) || (!wr->index) || (item > wr->nitems)) return(NULL);
  tr = wr->index[item-1];
  r = (item_record *) wr->items.next;
  while (r != NULL)
  {
    dprintf (("", "ItemFind: %x\n", (int) r));
    if (tr == r) return(r);
    r = (item_record *) r->header.next;
  }
  return(NULL);
}


/*  Clear selection in filer window.
 */
extern void FilerSelection(void)
{
  dprintf (("", "FilerSelection:\n"));
  if ((select_item != 0) && (select_wind != NULL))
  {
    int t_item = select_item;
    Desk_window_handle t_wind = select_wind;
    select_item = 0;
    select_wind = NULL;
    select_transient = false;
    HackRedraw(t_wind, t_item);
  }
}


/*  Update display fields widths.
 */
extern void FilerUpdateWidth(wind_record *r)
{
  int loop, tmp;
  item_record *ir = (item_record *) r->items.next;
  client_record *cr = NULL;

  dprintf (("", "FilerUpdateWidth: %x\n", (int) r));
  r->d_widths[0] = 36;
  r->d_widths[1] = 128;
  r->d_widths[2] = 0;
  r->d_widths[3] = 0;
  r->d_widths[4] = 0;
  r->d_widths[5] = 0;
  switch (r->display)
  {
    case display_LARGE:
    case display_SMALL:
      r->d_height = (r->display == display_LARGE) ? 124 : 44;
      r->d_width = 128;
      while (ir != NULL)
      {
        dprintf (("", "FilerUpdateWidth: ir %x\n", (int) ir));
        tmp = Text_StringWidth(ir->shortname);
        if (tmp > r->d_widths[1]) r->d_widths[1] = tmp;
        ir = (item_record *) ir->header.next;
      }
      r->d_width = r->d_widths[0] + r->d_widths[1] + 32;
      break;

    case display_FULL:
      r->d_width = 196;
      r->d_height = 44;
      if (r == (wind_record *) &wind_filer)
      {
        /* Server window */
        while (ir != NULL)
        {
          dprintf (("", "FilerUpdateWidth: ir %x\n", (int) ir));
          tmp = Text_StringWidth(ir->fullname);
          if (tmp > r->d_widths[1]) r->d_widths[1] = tmp;
          cr = ClientFind(ir->client_id, NULL, -1, NULL);
          tmp = Text_StringWidth(cr->clientname);
          if (tmp > r->d_widths[2]) r->d_widths[2] = tmp;
          tmp = Text_StringWidth(ir->field1);
          if (tmp > r->d_widths[3]) r->d_widths[3] = tmp;
          tmp = Text_StringWidth(ir->field2);
          if (tmp > r->d_widths[4]) r->d_widths[4] = tmp;
          tmp = Text_StringWidth(ir->field3);
          if (tmp > r->d_widths[5]) r->d_widths[5] = tmp;
          ir = (item_record *) ir->header.next;
        }
        tmp = 0;
        for (loop = 0; loop < 6; loop++)
          tmp += (r->d_widths[loop] > 0) ? r->d_widths[loop]+32 : 0;
        if (tmp > r->d_width) r->d_width = tmp;
      }
      else
      {
        /* Mounts windows */
        while (ir != NULL)
        {
          dprintf (("", "FilerUpdateWidth: ir %x\n", (int) ir));
          tmp = Text_StringWidth(ir->shortname);
          if (tmp > r->d_widths[1]) r->d_widths[1] = tmp;
          tmp = Text_StringWidth(ir->fullname);
          if (tmp > r->d_widths[2]) r->d_widths[2] = tmp;
          ir = (item_record *) ir->header.next;
        }
        tmp = 0;
        for (loop = 0; loop < 6; loop++)
          tmp += (r->d_widths[loop] > 0) ? r->d_widths[loop]+32 : 0;
        if (tmp > r->d_width) r->d_width = tmp;
      }
      break;

    default:
      break;
  }
  dprintf (("", "FilerUpdateWidth: width %d height %d\n", r->d_width, r->d_height));
  for (loop = 0; loop < 6; loop++)
  {
    dprintf (("", "FilerUpdateWidth: [%d] = %d\n", loop, r->d_widths[loop]));
  }
  r->d_fwidth = r->d_width;
}


/*  Update display type size fields.
 */
extern void FilerDisplay(wind_record *r)
{
  Desk_window_state state;

  dprintf (("", "FilerDisplay:\n"));
  if (r == NULL) return;
  FilerUpdateWidth(r);
  /* Redraw window */
  Desk_Wimp_GetWindowState(r->w, &state);
  FilerResetExtent(&state.openblock, r, true, true);
}


/*  Set initial extend of window.
 */
static Desk_bool FilerInitialExtent(wind_record *r)
{
  Desk_wimp_box extent;
  int min_witems, max_hitems;
  int witems, hitems;
  int max_witems;
  Desk_window_state state;

  /* Set minimum/maximum sizes */
  dprintf (("", "FilerInitialExtent:\n"));
  if (r == NULL) return(Desk_FALSE);
  switch (r->display)
  {
    case display_LARGE: min_witems = 4;
    			max_hitems = 6;
    			break;
    case display_FULL: 	min_witems = 1;
    			max_hitems = 17;
    			break;
    default:
    case display_SMALL: min_witems = 3;
    			max_hitems = 17;
    			break;
  }
  if (r->nitems > min_witems)
  {
    Desk_Screen_CacheModeInfo();
    witems = min_witems;
    hitems = (r->nitems / witems) + (((r->nitems % witems) > 0) ? 1 : 0);
    if (hitems == 0) hitems = 1;
    max_witems = (Desk_screen_size.x / r->d_width);
    if (max_witems < 1) max_witems = 1;
  }
  else
  {
    max_witems = witems = r->nitems;
    hitems = 1;
  }
  if (max_hitems > hitems) max_hitems = hitems;

  /* Update records */
  r->witems = witems;

  /* Set window extent */
  extent.min.x = 0; extent.max.x = (max_witems * r->d_width);
  extent.max.y = 0; extent.min.y = -(hitems * r->d_height) - 18;
  Desk_Wimp_SetExtent(r->w, &extent);

  /* Open with window position */
  Desk_Wimp_GetWindowState(r->w, &state);
  state.openblock.screenrect.min.y = state.openblock.screenrect.max.y -
    (max_hitems * r->d_height) - 18;
  state.openblock.screenrect.max.x = state.openblock.screenrect.min.x +
    (witems * r->d_width);
  Desk_Wimp_OpenWindow(&state.openblock);
  return(Desk_TRUE);
}


/*  Reset extend of window.
 */
extern bool FilerResetExtent(Desk_window_openblock *openblock, wind_record *r, bool force,
	bool forcewidth)
{
  int hitems, witems, tmp, max_witems;
  Desk_wimp_box extent;

  dprintf (("", "FilerResetExtent:\n"));
  if (r == NULL) return false;
  tmp = (openblock->screenrect.max.x - openblock->screenrect.min.x);
  witems = (tmp / r->d_width);
  if (witems == 0) witems = 1;
  hitems = (r->nitems / witems) + (((r->nitems % witems) > 0) ? 1 : 0);
  if (hitems == 0) hitems = 1;
  if (r->nitems > witems)
  {
    Desk_Screen_CacheModeInfo();
    max_witems = (Desk_screen_size.x / r->d_width);
    if (max_witems < 1) max_witems = 1;
  } else max_witems = r->nitems;
  if (r == &wind_filer)
  {
    Desk_window_state wstate;

    Desk_Wimp_GetWindowState(r->w, &wstate);
    openlast.y = openblock->screenrect.max.y - 32;
    if (wstate.openblock.screenrect.min.x != openblock->screenrect.min.x)
      openlast.x = openblock->screenrect.min.x;
  }

  /* Only do updates if required */
  if ((witems != r->witems) || (force))
  {
    Desk_window_redrawblock redraw;

    dprintf (("", "FilerResetExtent: update %d %d\n", witems, hitems));

    /* Set window extent */
    extent.min.x = 0; extent.max.x = (max_witems * r->d_width);
    extent.max.y = 0; extent.min.y = -(hitems * r->d_height) - 18;
    Desk_Wimp_SetExtent(r->w, &extent);

    /* Update record */
    r->witems = witems;

    /* Force to an integer number of fields */
    if (forcewidth)
    {
      if (openblock->screenrect.min.x + (witems * r->d_width) > Desk_screen_size.x)
        openblock->screenrect.min.x = Desk_screen_size.x - (witems * r->d_width);
      openblock->screenrect.max.x = openblock->screenrect.min.x + (witems * r->d_width);
    }

    /* Force a redraw */
    redraw.window = r->w;
    redraw.rect.min.x = 0;
    redraw.rect.max.y = 0;
    redraw.rect.max.x = 32000;
    redraw.rect.min.y = -32000;
    Desk_Wimp_ForceRedraw(&redraw);
  }
  /* Open with window position */
  if (Desk_Window_IsOpen(r->w)) Desk_Wimp_OpenWindow(openblock);
  return true;
}


/*  Open window in appropriate position.
 */
static void FilerPosition(Desk_window_handle window, int open)
{
  Desk_mouse_block ptr;
  Desk_window_state wstate;
  int w, h;

  dprintf (("", "FilerPosition: %d %d\n", window, open));
  Desk_Wimp_GetWindowState(window, &wstate);
  if (open < 0)
  {
    wstate.openblock.behind = -1;    			    /* open in front */
    Desk_Wimp_OpenWindow(&wstate.openblock);
    return;
  }
  Desk_Screen_CacheModeInfo();            /* Ensure got correct screen mode info. */
  wstate.openblock.behind = -1;                             /* open in front */
  w = wstate.openblock.screenrect.max.x - wstate.openblock.screenrect.min.x;
  h = wstate.openblock.screenrect.max.y - wstate.openblock.screenrect.min.y;
  Desk_Wimp_GetPointerInfo(&ptr);

  /* Open types */
  dprintf (("", "FilerPosition: old x %d y %d\n", openlast.x, openlast.y));
  switch (open)
  {
    case 0: openlast.y = (Desk_screen_size.y + h) / 2;
            openlast.x = ptr.pos.x-128;
            break;
    case 1: openlast.x -= 32;
            openlast.y += 32;
            break;
    case 2: openlast.x += 24;
            break;
    default:
      break;
  }

  /* Check for screen boundaries */
  if (openlast.x < 0)  openlast.x = 0;
  if (openlast.x + w > Desk_screen_size.x) openlast.x = Desk_screen_size.x - w;
  if (openlast.y > Desk_screen_size.y - 32) openlast.y = Desk_screen_size.y - 32;
  if (openlast.y - h < 0) openlast.y = h;
  dprintf (("", "FilerPosition: new x %d y %d\n", openlast.x, openlast.y));

  wstate.openblock.screenrect.min.x = openlast.x;
  wstate.openblock.screenrect.max.y = openlast.y;
  if (window == wind_filer.w) openlast.y -= 32;
  wstate.openblock.screenrect.max.x = wstate.openblock.screenrect.min.x + w;
  wstate.openblock.screenrect.min.y = wstate.openblock.screenrect.max.y - h;
  Desk_Wimp_OpenWindow(&wstate.openblock);
}


/*  Create a new filer window.
 *  Return Desk_FALSE if cannot create, else Desk_TRUE.
 */
extern bool FilerCreate(int item, int open)
{
  wind_record *r = NULL;
  client_record *cr = NULL;

  dprintf (("", "FilerCreate:create new filer window %d %d\n", item, open));
  Desk_Hourglass_Start(25);
  if ((item == 0) && (open == 0))
  {
    /* Delete filer window ready for a rescan */
    FilerDelete(&wind_filer);
  }
  if (item == 0)
  {
    /* Main server window */
    r = &wind_filer;
    r->item = 0;
  }
  else
  {
    /* Mounts subwindow */
    if ((r = FilerFind(NULL, item, -1, -1)) == NULL)
    {
      r = (wind_record *) heap_alloc(sizeof(wind_record));
      if (r == NULL)
      {
        Desk_Hourglass_Off();
        Desk_Msgs_Report(Desk_FALSE, "No free memory for filer window");
        return false;
      }
      Desk_LinkList_AddToTail(&wind_filer.anchor, &(r->header));
      dprintf (("", "FilerCreate:new filer list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor)));
      r->w = NULL;
      r->item = item;
      r->index = NULL;
    }
  }
  if (r->w == NULL)
  {
    Desk_wimp_point origin = {6, -6};
    char buf[96];

    r->w = Desk_Window_Create("filer", Desk_template_TITLEMIN);
    if (r->w == NULL)
    {
      /* Error creating window, exit gracefully, stage left ... */
      if (r != &wind_filer)
      {
        Desk_LinkList_Unlink(&wind_filer.anchor, &(r->header));
        FREE(r);
      }
      return false;
    }
    if (r != &wind_filer)
    {
      item_record *ir = wind_filer.index[item-1];
      cr = ClientFind(ir->client_id, NULL, -1, NULL);
      sprintf(buf, "%s:%s", cr->fsname, ir->fullname);
      Desk_Window_SetTitle(r->w, buf);
    }
    else
    {
      Desk_Msgs_Lookup("filer.title", buf, 95);
      Desk_Window_SetTitle(r->w, buf);
    }

    /* Initialise any values in record */
    r->nitems = 0;
    r->witems = 0;
    r->update = Desk_FALSE;
    r->index = NULL;
    r->display = prog_config.display;
    r->sort = prog_config.sort;
    Desk_LinkList_Init(&r->items);
    if (r == &wind_filer)
    {
      dprintf (("", "FilerCreate: server window data\n"));
      r->client_id = r->server_id = 0;
      /* Call client module(s) for new details, builds new tree */
      cr = (client_record *) client_anchor.next;
      while (cr != NULL)
      {
        ItemParse(r, cr->client_id, -1);
        cr = (client_record *) cr->header.next;
      }
    }
    else
    {
      item_record *ir = ItemFind(&wind_filer, item);
      dprintf (("", "FilerCreate: mount window data\n"));
      r->client_id = ir ? ir->client_id : 0;
      r->server_id = ir ? ir->server_id : 0;
      /* Get data as required */
      dprintf (("", "FilerCreate: mount window pre parse\n"));
      ItemParse(r, r->client_id, r->server_id);
      dprintf (("", "FilerCreate: mount window post parse\n"));
      /* Empty mounts window ? */
      if (r->items.next == NULL)
      {
        FilerDelete(r);
        Menu_Close();
        Desk_menu_currentopen = NULL;
        clientwindow = ClientFind(ir->client_id, NULL, -1, NULL);
        dprintf (("", "FilerCreate: ir %x client_id %x\n", (int) ir, ir->client_id));
        dprintf (("", "FilerCreate: cwin %x cwin.client_id %x\n", (int) clientwindow, clientwindow->client_id));
        Desk_Hourglass_Off();
        if (CreateMount(mount_WINDOW, -1, true))
        {
          FilerSelection();
          return true;
        } else return false;
      }
      dprintf (("", "FilerCreate: mount window data OK\n"));
    }
    FilerUpdateWidth(r);
    if (wind_filer.anchor.next == NULL)
    {
      select_item = 0;
      select_wind = NULL;
    }
    RedrawClaim((void *) r, (redraw_itemproc) FilerRedraw, &(r->d_height), &(r->d_width),
      &(r->d_fwidth), origin, &(r->nitems), &(r->witems), r->w, true);
    FilerInitialExtent(r);
    Desk_Event_Claim(Desk_event_OPEN,  r->w, Desk_event_ANY, (Desk_event_handler) Filer_OpenHandler, r);
    Desk_Event_Claim(Desk_event_CLOSE, r->w, Desk_event_ANY, (Desk_event_handler) Filer_CloseWindow, r);
    Desk_Event_Claim(Desk_event_CLICK, r->w, Desk_event_ANY, (Desk_event_handler) Filer_ButtonClick, r);
    FilerPosition(r->w, open);
  } else FilerPosition(r->w, -1);
  Menu_Close();
  Desk_Hourglass_Off();
  return true;
}


/*  Delete a Filer window entry.
 */
extern void FilerDelete(wind_record *r)
{
  dprintf (("", "FilerDelete: %x\n", (int) r));
  dprintf (("", "FilerDelete:window list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor)));

  if (r == NULL) return;
  if (select_wind == r->w)
  {
    select_wind = NULL;
    select_item = 0;
  }
  if (r == &wind_filer)
  {
    if (r->w > 0)
    {
      Desk_Window_Hide(r->w);
    }
    return;
  }
  RedrawRelease((void *) r, r->w);
  Desk_Event_ReleaseWindow(r->w);
  Desk_Window_Delete(r->w);
  r->update = false;
  if (r->index) heap_free(r->index);
  r->index = NULL;
  ItemChainFree(r);
  r->w = NULL;
  if (r != &wind_filer)
  {
    dprintf (("", "FilerDelete: unlink mount window\n"));
    Desk_LinkList_Unlink(&wind_filer.anchor, &(r->header));
    FREE(r);
  }
  dprintf (("", "FilerDelete:window list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor)));
}


/*  Returns true if sprite exists in wimp sprite pool.
 */
static bool SpriteExists(char *name)
{
  dprintf (("", "SpriteExists: %s\n", name));

  return (_swix (Wimp_SpriteOp, _INR (0, 2), 24, 0, name) == NULL ? true : false);
}


/*  Return correct sprite name (small/large/hi/lo-res) from prefix 'name'.
 *  Checks if sprite is in wimp sprite spool first, and returns default if not.
 */
extern char *SpriteName(char *name, char *buf, bool small)
{
  if (small) sprintf(buf, "%ssm", name);
    else strcpy(buf, name);
  if (!SpriteExists(buf))
  {
    if (small) strcpy(buf, "sm!omni");
      else strcpy(buf, "!omni");
  }
  dprintf (("", "SpriteName: %s\n", buf));
  return(buf);
}


/*  Filer window redraw code
 */
extern bool FilerRedraw(wind_record *r, int item, Desk_wimp_point origin, int minx, int maxx)
{
  bool indent = ((select_item == item) && (select_wind == r->w));
  item_record *ir = NULL;
  client_record *cr = NULL;
  int flags_text = 0, flags_sprite = 0;
  int tmp, tmp2;
  char buf[32];

  UNUSED (minx);
  UNUSED (maxx);

  dprintf (("", "FilerRedraw: item %d xpos %d", item, origin.x));
  dprintf (("", " ypos %d minx %d", origin.y, minx));
  dprintf (("", " maxx %d\n", maxx));
  if ((!r) || (!r->index)) return false;
  if ((item < 1) || (item > r->nitems)) return false;
  ir = r->index[item-1];

  /* If highlighted, then need SELECTED and FILLED for text icons */
  if (indent)
  {
    flags_text = Desk_icon_SELECTED | Desk_icon_FILLED;
    flags_sprite = Desk_icon_SELECTED;
  }
  if (r == &wind_filer)
  {
    dprintf (("", "FilerRedraw: server plot\n"));
    cr = ClientFind(ir->client_id, NULL, -1, NULL);
    if (!cr) return false;
    switch (r->display)
    {
      case display_SMALL:
        PlotSprite(origin.x, origin.y, SpriteName(cr->spritename,buf,Desk_TRUE), 36, 36,
          flags_sprite);
        PlotIcon(origin.x+34, origin.y, ir->shortname, Text_StringWidth(ir->shortname),
          flags_text);
        break;
      case display_LARGE:
        flags_sprite |= Desk_icon_HCENTRE;
        PlotSprite(origin.x, origin.y+40, SpriteName(cr->spritename, buf, Desk_FALSE), r->d_width,
          68, flags_sprite);
        tmp2 = Text_StringWidth(ir->shortname);
        tmp = (r->d_width - tmp2) / 2;
        PlotIcon(origin.x+tmp, origin.y, ir->shortname, tmp2, flags_text);
        break;
      case display_FULL:
        PlotSprite(origin.x, origin.y, SpriteName(cr->spritename, buf, Desk_TRUE), 36, 36,
          flags_sprite);
        PlotIcon(origin.x+34, origin.y, ir->fullname, Text_StringWidth(ir->fullname),
          flags_text);
        strcpy(buf, cr->clientname);
        tmp = 34 + r->d_widths[1] + 32;
        PlotIcon(origin.x+tmp, origin.y, buf, Text_StringWidth(buf), 0);
        strcpy(buf, ir->field1 ? ir->field1 : "");
        tmp += r->d_widths[2] + 32;
        PlotIcon(origin.x+tmp, origin.y, buf, Text_StringWidth(buf), 0);
        strcpy(buf, ir->field2 ? ir->field2 : "");
        tmp += r->d_widths[3] + 32;
        PlotIcon(origin.x+tmp, origin.y, buf, Text_StringWidth(buf), 0);
        strcpy(buf, ir->field3 ? ir->field3 : "");
        tmp += r->d_widths[4] + 32;
        PlotIcon(origin.x+tmp, origin.y, buf, Text_StringWidth(buf), 0);
        break;
      default:
        break;
    }
  }
  else
  {
    dprintf (("", "FilerRedraw: mount plot\n"));
    switch (r->display)
    {
      case display_SMALL:
        PlotSprite(origin.x, origin.y, "small_dir", 36, 36, flags_sprite);
        PlotIcon(origin.x+38, origin.y, ir->shortname, Text_StringWidth(ir->shortname),
          flags_text);
        break;
      case display_LARGE:
        flags_sprite |= Desk_icon_HCENTRE;
        PlotSprite(origin.x, origin.y+40, "directory", r->d_width, 68, flags_sprite);
        tmp2 = Text_StringWidth(ir->shortname);
        tmp = (r->d_width - tmp2) / 2;
        PlotIcon(origin.x+tmp, origin.y, ir->shortname, tmp2, flags_text);
        break;
      case display_FULL:
        PlotSprite(origin.x, origin.y, "small_dir", 36, 36, flags_sprite);
        PlotIcon(origin.x+38, origin.y, ir->shortname, Text_StringWidth(ir->shortname),
          flags_text);
        tmp = 38 + r->d_widths[1] + 32;
        PlotIcon(origin.x+tmp, origin.y, ir->fullname, Text_StringWidth(ir->fullname), 0);
        break;
      default:
        break;
    }
  }
  /* Return OK */
  return true;
}


/*  ************************* Event handlers *********************************
 */


/*  Filer window open handler.
 */
extern Desk_bool Filer_OpenHandler(Desk_event_pollblock *event, wind_record *r)
{
  Desk_window_handle w = event->data.openblock.window;

  if (w != r->w) return(Desk_FALSE);
  FilerResetExtent(&(event->data.openblock), r, false, false);
  return(Desk_TRUE);
}


/*  Filer window close handler.
 */
extern Desk_bool Filer_CloseWindow(Desk_event_pollblock *event, wind_record *r)
{
  Desk_window_handle w = event->data.openblock.window;

  /* Release window details */
  if (w != r->w) return(Desk_FALSE);
  if (w == r->w)
  {
    Desk_mouse_block ptr;

    Desk_Wimp_GetPointerInfo(&ptr);
    /* ADJUST-close on a mount window should (re)open servers window */
    if ((ptr.button.data.adjust) && (r != &wind_filer)) FilerCreate(0, 1);
    if (!Desk_Kbd_KeyDown(Desk_inkey_SHIFT)) FilerDelete(r);
  } /*else Desk_Wimp_CloseWindow(event->data.openblock.window); */
  return(Desk_TRUE);
}


/*  Update menu flags - shared by a number of routines.
 */
static void FilerUpdateMenu(wind_record *r)
{
  int loop;
  char buf[32];
  bool expert = false;

  /* Update menu structure */
  if (r == NULL) return;
#ifdef EXPERT
  if (prog_config.expert) expert = true;
#endif
  if (expert)
  {
    if ((select_item == 0) || (r->index == NULL))
    {
      strcpy(buf, "Connect ");
      if (!menu_icon_mo) menu_icon_mo = ClientMakeMenu(menu_icon_mo);
      Desk_Menu_AddSubMenu(menu_main, mmenu_CONNECT, menu_icon_mo);
    }
    else
    {
      item_record *ir = r->index[select_item-1];
      sprintf(buf, "Connect '%s'", ir->shortname);
      Desk_Menu_AddSubMenu(menu_main, mmenu_CONNECT, NULL);
    }
    Desk_Menu_SetText(menu_main, mmenu_CONNECT, buf);
    Desk_Menu_SetFlags(menu_main, mmenu_CONNECT, Desk_FALSE, Desk_FALSE);
    }
  else
  {
    if ((select_item == 0) || (r->index == NULL))
    {
      sprintf(buf, "Connect%s", (r == &wind_filer) ? " ''" : " ");
    }
    else
    {
      item_record *ir = r->index[select_item-1];
      sprintf(buf, "Connect '%s'", ir->shortname);
    }
    Desk_Menu_SetText(menu_main, mmenu_CONNECT, buf);
    Desk_Menu_SetFlags(menu_main, mmenu_CONNECT, Desk_FALSE, (r == &wind_filer) && (select_item == 0));
  }
  for (loop = mdmenu_LARGE; loop <= mdmenu_FULL; loop++)
    Desk_Menu_SetFlags(menu_main_d, loop, (r->display == loop), Desk_FALSE);
  Desk_Menu_SetFlags(menu_main_d, mdmenu_NAME, (r->sort == sort_NAME), Desk_FALSE);
  Desk_Menu_SetFlags(menu_main_d, mdmenu_TYPE, (r->sort == sort_PROTOCOL), Desk_FALSE);
  /* Fix the menu width (hack!) */
  Desk_Screen_CacheModeInfo();
  menu_main->width = (strlen(buf)+1) * 8 * Desk_screen_delta.x;
}


/*  Handler attached to all button click events.
 *  If no other handler specifically handles the click, and it was a menu
 *  click, we will pop up our menu in an appropriate position.
 */
extern Desk_bool Filer_ButtonClick(Desk_event_pollblock *event, wind_record *r)
{
  Desk_window_handle w = event->data.mouse.window;
  Desk_button_state  b;
  int 	        item;
  item_record   *ir = NULL;

  if ((r == NULL) || (w == NULL) || (w != r->w)) return(Desk_FALSE);
  b.value = event->data.mouse.button.value;
  dprintf (("", "Filer_ButtonClick: %x %d\n", (int) r, (int) b.value));
  item = SelectGetItem(w, &event->data.mouse.pos);

  if (b.data.menu) 	   			/* is a MENU click */
  {
    /* Click on an item - if no selection, then set it, else preserve */
    if ((item > 0) && (select_item == 0) && (w == r->w))
    {
      select_item = item;
      select_wind = w;
      select_transient = true;
      HackRedraw(w, item);
    }

    /* Update menu structure */
    FilerUpdateMenu(r);
    Desk_Menu_Show(menu_main, event->data.mouse.pos.x, event->data.mouse.pos.y);
    menuwindow = (void *) r;
    if (select_item != 0)
    {
      if (!r->index) return(Desk_FALSE);
      ir = r->index[select_item-1];
      clientwindow = ClientFind(ir->client_id, NULL, -1, NULL);
    } else clientwindow = ClientFind(r->client_id, NULL, -1, NULL);
    return(Desk_TRUE);
  }

  /* Select click - reset selection, and possibly set to single message */
  if (b.data.clickselect)
  {
    dprintf (("", "Filer_ButtonClick: click select\n"));
    /* Click on a item */
    if ((item == select_item) && (r->w == select_wind)) return(Desk_TRUE);
    FilerSelection();
    if (item > 0)
    {
      select_item = item;
      select_wind = r->w;
      HackRedraw(r->w, item);
    }
    select_transient = false;
    return(Desk_TRUE);
  }

  /* Adjust click - possibly toggle single message in selection */
  if ((b.data.clickadjust) && (item != 0))
  {
    dprintf (("", "Filer_ButtonClick: click adjust\n"));
    if ((select_item == item) && (select_wind == r->w))
    {
      select_item = 0;
      select_wind = NULL;
    }
    else
    {
      FilerSelection();
      select_item = item;
      select_wind = r->w;
    }
    HackRedraw(r->w, item);
    select_transient = false;
    return(Desk_TRUE);
  }

  /* Select/Adjust double click - create subwindow [and close parent] */
  if (((b.data.select) || (b.data.adjust)) && (item > 0))
  {
    bool result = false;

    dprintf (("", "Double click: %d\n", item));
    select_item = item;
    select_wind = r->w;
    if (r == &wind_filer)
    {
      result = FilerCreate(item, 2);
    }
    else
    {
      if (!r->index) return(Desk_FALSE);
      ir = r->index[item-1];
      if (!ir) return(Desk_FALSE);
      clientwindow = ClientFind(ir->client_id, NULL, -1, NULL);
      if (!clientwindow) return(Desk_FALSE);
      result = CreateMount(mount_WINDOW, -1, true);
    }
    dprintf (("", "Double click: result %s\n", result ? "true" : "false"));
    if (result)
    {
      FilerSelection();
      if (b.data.adjust) FilerDelete(r);
    }
  }

  return(Desk_FALSE);
}

@


1.4
log
@Fix for menu opening position
Was trying to open its file server menu at x-72,y+16 not realising that the 'Desk' library already did the correct x-64,y+0 offset for you, leading to double adjustment fun.

Version 2.21. Tagged as 'Omni-2_21'
@
text
@d124 1
a124 1
  item_record *r = (item_record *) wr->items.next;
d130 1
@


1.3
log
@Allow OmniClient clients to provide theme specific sprites
OmniClient will now check its disc based sprites to see if there are any higher res or theme specific ones available (if there aren't then it is still assumed that the client has *ICONSPRITES'd his own as before).
No longer looks for "_22" suffix manually, the Wimp will do that for us.
Added file type sprites extracted from earlier CVS history.
New application sprites for Morris4 and Ursula imported, thanks to Chris Wraight for these.

Version 2.19. Tagged as 'Omni-2_19'
@
text
@d870 1
a870 1
    Desk_Menu_Show(menu_main, event->data.mouse.pos.x-72, event->data.mouse.pos.y+16);
@


1.2
log
@  Several major bugfixes and further tidying to make Omni fit into our
  build environment better.
Detail:
  * Bug fix: ClientList function (Client.c) creates a textual menu desription
    for a list of clients (Info and Mounts submenus).  The description was
    generated on the stack and a pointer to it was returned.  The buffer is now
    static.
  * Bug fix: select or adjust clicks on the Omni icon just after it's loaded
    would kill the task part of Omni.  FilerCreate function (List.c) always
    calls FilerDelete, which would always attempt to close any existing filer
    window.  However, on the first call, no window exists so it passes the Wimp
    a 0 window handle.  This only appeared to happen on RISC OS 4, but I suspect
    this is to do with RISC OS 4's stricter protection of zero page.  Current
    fix is for FilerDelete to check if window handle is 0 before closing it;
    this is not very elegant - would be nicer to only call FilerDelete when the
    window was actually closed.
  * Bug fix: writable icon handling overhauled completely.  Many of the buffers
    which Omni would read the contents of writable icons into were too short
    to hold the maximum amount of text allowed in the icon.  New Icon_GetText
    call added (ExtLib.c) to allow Omni to work directly on indirected icon
    buffers wherever possible, thus removing the whole issue.
  * Stripped commented-out code from several places.
  * Changed use of Desk_bool to bool in most places.  This is a bit grim, but
    the way Desk_bool is implemented means you need to cast it in many places,
    which is even more grim.
  * Removed a few error assignements(!) because
    a) they weren't even being checked
    b) Desk's psuedo-exception system should now catch them
  * Got rid of home-grown strcasecmp calls and used Desk's instead.
  * Removed many local constants definitions and get them from system header
    files instead.
  * Removed Hdrs.h which would include *every* header file in *every* C file
    in the interests of compilation times.  C files now only include what they
    need.
  * Reimplemented the fully recursive Menu_Dispose along the lines of the
    non-recursive Desk_Menu_Dispose, which had changed since ANT's DeskLib
    split-off.
  * Altered quite a bit of code to prevent compiler warnings (mainly
    "use of '=' in condition context" and "variable declared but not used").
  * Uses 'proper' module finalisation instead of atexit in the interests of
    consistency and symmetry.
  * Added MemCheck support.
  * Reimplemented rma_alloc and rma_free in C (side effect of MemCheck support).
  * Altered assembler to use system header files instead of local ones.
  * Omni previously used a seeming random mixture of _kernel_swi and Desk_SWI
    SWI veneers.  All have now been changed to use _swix/_swi as appropriate.
  * Converted to use srccommit.
Admin:
  Files removed:
   c.Error
   c.StrCaseCmp
   h.Debug
   h.Hdrs
   h.ModuleWrap
   h.OmniClient
   h.StrCaseCmp
   hdr.Macros
   hdr.RegDefs
   hdr.SwiNos

  Files added:
   Docs.DeskLibDiffs
   Docs.EventHandling
   h.Omni

  * Compiled.
  * All windows, menus checked to make sure they at least display.
  * Played around with a new NFS and LanMan mounts.
  * Basically, there shouldn't be any showstoppers, but the change from a very
    old DeskLib to Desk is a large one.  I'd be surprised if there aren't a
    few problems and this should definitely be thrashed a bit by people
    willing to do so before anyone has any confidence in it.



Version 2.05. Tagged as 'Omni-2_05'
@
text
@a634 2
  /* Ensure cached screen info */
  Desk_Screen_CacheModeInfo();
a636 10
  if (Desk_screen_eig.y <= 1)
  {
    /* Square pixel mode, or better */
    strcat(buf, "_22");
    if (!SpriteExists(buf))
    {
      if (small) sprintf(buf, "%ssm", name);
        else strcpy(buf, name);
    }
  }
@


1.1
log
@Initial revision
@
text
@d31 29
a59 6
/* #undef DEBUG */
#include "Hdrs.h"
#include "Desk/GFX.h"
#include "Desk/Screen.h"
#include "Desk/Kbd.h"         	/*    */
#include "Expert.h"         	/*    */
d75 1
a75 1
  TRACE2("HackRedraw: %x %d\n", (int) w, item);
d77 1
a77 1
  TRACE1("HackRedraw: %x\n", (int) r);
d94 1
a94 1
  TRACE("FilerFind:\n");
d98 2
a99 2
  TRACE1("FilerFind: %x\n", (int) r);
  TRACE1("FilerFind:window list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor));
d102 1
a102 1
    TRACE1("FilerFind: %x\n", (int) r);
d127 1
a127 1
  TRACE2("ItemFind: %x %d\n", (int) wr, item);
d132 1
a132 1
    TRACE1("ItemFind: %x\n", (int) r);
d144 1
a144 1
  TRACE("FilerSelection:\n");
d151 1
a151 1
    select_transient = Desk_FALSE;
d165 1
a165 1
  TRACE1("FilerUpdateWidth: %x\n", (int) r);
d180 1
a180 1
        TRACE1("FilerUpdateWidth: ir %x\n", (int) ir);
d196 1
a196 1
          TRACE1("FilerUpdateWidth: ir %x\n", (int) ir);
d220 1
a220 1
          TRACE1("FilerUpdateWidth: ir %x\n", (int) ir);
d237 1
a237 1
  TRACE2("FilerUpdateWidth: width %d height %d\n", r->d_width, r->d_height);
d240 1
a240 1
    TRACE2("FilerUpdateWidth: [%d] = %d\n", loop, r->d_widths[loop]);
d252 1
a252 1
  TRACE("FilerDisplay:\n");
d257 1
a257 1
  FilerResetExtent(&state.openblock, r, Desk_TRUE, Desk_TRUE);
d272 1
a272 1
  TRACE("FilerInitialExtent:\n");
d324 2
a325 2
extern Desk_bool FilerResetExtent(Desk_window_openblock *openblock, wind_record *r, Desk_bool force,
	Desk_bool forcewidth)
d330 2
a331 2
  TRACE("FilerResetExtent:\n");
  if (r == NULL) return(Desk_FALSE);
d358 1
a358 1
    TRACE2("FilerResetExtent: update %d %d\n", witems, hitems);
d386 1
a386 1
  return(Desk_TRUE);
d398 1
a398 1
  TRACE2("FilerPosition: %d %d\n", window, open);
d413 1
a413 1
  TRACE2("FilerPosition: old x %d y %d\n", openlast.x, openlast.y);
d433 1
a433 1
  TRACE2("FilerPosition: new x %d y %d\n", openlast.x, openlast.y);
d447 1
a447 1
extern Desk_bool FilerCreate(int item, int open)
d452 1
a452 1
  TRACE2("FilerCreate:create new filer window %d %d\n", item, open);
d475 1
a475 1
        return(Desk_FALSE);
d478 1
a478 1
      TRACE1("FilerCreate:new filer list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor));
d498 1
a498 1
      return(Desk_FALSE);
d523 1
a523 1
      TRACE("FilerCreate: server window data\n");
d536 1
a536 1
      TRACE("FilerCreate: mount window data\n");
d540 1
a540 1
      TRACE("FilerCreate: mount window pre parse\n");
d542 1
a542 1
      TRACE("FilerCreate: mount window post parse\n");
d550 2
a551 2
        TRACE2("FilerCreate: ir %x client_id %x\n", (int) ir, ir->client_id);
        TRACE2("FilerCreate: cwin %x cwin.client_id %x\n", (int) clientwindow, clientwindow->client_id);
d553 1
a553 1
        if (CreateMount(mount_WINDOW, -1, Desk_TRUE))
d556 2
a557 2
          return(Desk_TRUE);
        } else return(Desk_FALSE);
d559 1
a559 1
      TRACE("FilerCreate: mount window data OK\n");
d568 1
a568 1
      &(r->d_fwidth), origin, &(r->nitems), &(r->witems), r->w, Desk_TRUE);
d577 1
a577 1
  return(Desk_TRUE);
d585 2
a586 2
  TRACE1("FilerDelete: %x\n", (int) r);
  TRACE1("FilerDelete:window list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor));
d596 4
a599 1
    Desk_Window_Hide(r->w);
d605 1
a605 1
  r->update = Desk_FALSE;
d612 1
a612 1
    TRACE("FilerDelete: unlink mount window\n");
d616 1
a616 1
  TRACE1("FilerDelete:window list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor));
d620 1
a620 1
/*  Returns Desk_TRUE if sprite exists in wimp sprite pool.
d622 1
a622 1
static Desk_bool SpriteExists(char *name)
d624 1
a624 8
  #if 0
  _kernel_swi_regs r;

  /* Do a sprite_select on the Wimp sprite pool. */
  r.r[0] = 24;
  r.r[2] = (int) name;
  #endif
  TRACE1("SpriteExists: %s\n", name);
d626 1
a626 8
  #if 0
  if (Desk_Wimp_SpriteOp(&r) != NULL) return(Desk_FALSE);
    else return(Desk_TRUE);
  #else
  #define SWI_Wimp_SpriteOp 0x0400e9
  if (Desk_SWI(3, 0, SWI_Wimp_SpriteOp, 24, 0, name) != NULL) return(Desk_FALSE);
    else return(Desk_TRUE);
  #endif
d633 1
a633 1
extern char *SpriteName(char *name, char *buf, Desk_bool small)
d654 1
a654 1
  TRACE1("SpriteName: %s\n", buf);
d661 1
a661 1
extern Desk_bool FilerRedraw(wind_record *r, int item, Desk_wimp_point origin, int minx, int maxx)
d663 1
a663 1
  Desk_bool indent = ((select_item == item) && (select_wind == r->w));
d670 8
a677 5
  TRACE2("FilerRedraw: item %d xpos %d", item, origin.x);
  TRACE2(" ypos %d minx %d", origin.y, minx);
  TRACE1(" maxx %d\n", maxx);
  if ((!r) || (!r->index)) return(Desk_FALSE);
  if ((item < 1) || (item > r->nitems)) return(Desk_FALSE);
d688 1
a688 1
    TRACE("FilerRedraw: server plot\n");
d690 1
a690 1
    if (!cr) return(NULL);
d731 1
a731 1
    TRACE("FilerRedraw: mount plot\n");
d758 1
a758 1
  return(Desk_TRUE);
d773 1
a773 1
  FilerResetExtent(&(event->data.openblock), r, Desk_FALSE, Desk_FALSE);
d805 1
a805 1
  Desk_bool expert = Desk_FALSE;
d810 1
a810 1
  if (prog_config.expert) expert = Desk_TRUE;
d866 1
a866 1
  TRACE2("Filer_ButtonClick: %x %d\n", (int) r, (int) b.value);
d876 1
a876 1
      select_transient = Desk_TRUE;
d896 1
a896 1
    TRACE("Filer_ButtonClick: click select\n");
d906 1
a906 1
    select_transient = Desk_FALSE;
d913 1
a913 1
    TRACE("Filer_ButtonClick: click adjust\n");
d926 1
a926 1
    select_transient = Desk_FALSE;
d933 1
a933 1
    Desk_bool result = Desk_FALSE;
d935 1
a935 1
    TRACE1("Double click: %d\n", item);
d949 1
a949 1
      result = CreateMount(mount_WINDOW, -1, Desk_TRUE);
d951 1
a951 1
    TRACE1("Double click: result %s\n", result ? "Desk_TRUE" : "Desk_FALSE");
@


1.1.1.1
log
@  Initial import of Omni into CVS.

Detail:
  This is an import of the sources obtained from ANT some time ago, with
  sufficient changes to allow it to build in our standard environment.  In
  particular, this involved converting Omni to use Desk instead of DeskLib.
  ANT's DeskLib was not 'off-the-shelf' - it was based on DeskLib 2.04 (very
  old), with their own modifications.
  
  This means that there are quite severe bugs in the Omni code, which will
  show up if you attempt to use this version, which were previously masked by
  some of ANT's DeskLib alterations.  (Hopefully) most of these have already
  been identified, fixed and will be checked-in soon.  I felt that a
  minimal version that would simply build would be worthwhile, so that as
  many changes as possible end up under CVS' control.

Admin:
  Compiled.
  Untested.
@
text
@@
