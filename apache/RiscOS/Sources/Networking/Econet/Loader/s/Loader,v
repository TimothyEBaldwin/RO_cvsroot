head	4.1;
access;
symbols
	Econet-5_80:4.1
	Econet-5_79:4.1
	Econet-5_78:4.1
	Econet-5_77:4.1
	Econet-5_76:4.1
	Econet-5_76-pre2:4.1
	Econet-5_76-pre1:4.1
	Econet-5_75:4.1
	Econet-5_74:4.1
	Econet-5_73:4.1
	RO_5_07:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Ursula_merge:4.1
	Econet-5_72:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	nicke_Econet_70:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.28.44;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.28.44;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.25.19;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.22.14.51.36;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.02.00;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        TTL Econet Podule loader code definition => Loader

        ; Modifications:
        ;
        ; 11-Jan-88 SKS Created
        ; 07-Dec-88 SKS Put into MidiPodule structure before I go
        ; 05-May-89 TMD Updated to new source release scheme
        ;
        ; All code must be relocatable and position independent.  It can be
        ; assumed that the code will be run in RAM in SVC mode.  The base
        ; address will be as if an ALIGN 16, 4 had be 'executed' before the
        ; code was assembled.
        ;
        ; Registers
        ; ---------
        ;
        ;         Input       Output     Comments
        ;         -----       ------     --------
        ; R0      Write data  Read data  Treated as a byte
        ; R1      Address                Must be preserved
        ; R2 - R4                        May be used
        ; R5 - R9                        Must be preserved
        ; R10                            May be used
        ; R11     Hardware               Base address of hardware, must be preserved 
        ; R12                            Private, must be preserved
        ; R13     sp                     Stack pointer (FD)
        ; R14                            Return address use BICS pc, lr, #V_bit
        ; R15                            PC
        ;
        ; Entry points
        ; ------------
        ; Origin + &00     Read a byte
        ; Origin + &04     Write a byte
        ; Origin + &08     Reset to initial state, if possible
        ; Origin + &0C     SWI XROMPodule_CallLoader
        ;
        ; Initialisation
        ; --------------
        ; The first call will be to Read address 0.
        ;
        ; Errors
        ; ------
        ; Read and Write may be able to return errors like 'Bad address' if the
        ; device is not as big as the address given, or 'Bad write' if using
        ; read after write checks on the Write call.  If the SWI entry is not
        ; supported then don't return an error.  If reset fails or can't be done
        ; then report an error.  Since device drivers may well be short of space
        ; it will be possible to return an error with R0=0 and an error string will
        ; be used from the Podule manager, note that this is not encouraged but is
        ; offered as a last resort.  Errors ar returned to the caller by using
        ; ORRS pc, lr, #V_bit rather than the usual BICS exit.
        ;
        ; Example
        ; -------

        SUBT Podule loader for Econet podule

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:Podule

        GET     Version

        LEADR   &FFFFFD00                               ; Data

PageRegister    * &3100

PageSize        * 10                                    ; Bits

DeviceSize      * 128 * 1024                            ; A 1 megabit EPROM (128K)

Origin
        B       ReadByte
        B       WriteByte
        B       Reset
        BICS    pc, lr, #V_bit

Reset
        LDR     r10, =Podule_BaseAddressANDMask
        AND     r10, r11, r10                           ; Hardware address only
        ADD     r10, r10, #PageRegister                 ; Now the actual address
        MOV     r2, #0                                  ; Default page is zero
        STR     r2, [ r10 ]
        BICS    pc, lr, #V_bit

ReadByte
        LDR     r10, =Podule_BaseAddressANDMask
        AND     r10, r11, r10                           ; Hardware address only
        CMP     r1, #DeviceSize - (1 :SHL: PageSize)    ; There are N-1 pages
        BHS     ErrorTooBig
        ; Compute and set the page number
        MOV     r0, r1, LSR #PageSize
        ADD     r0, r0, #1                              ; Account for the first physical page
        ; Duplicate the bottom 16 bits in the top 16 bits
        ORR     r0, r0, r0, LSL #16
        ADD     r2, r10, #PageRegister                  ; Now the actual address
        STR     r0, [ r2 ]                              ; Select the page we want
        ; Now clear all but the bottom <PageSize> Bits
        MOV     r0, r1, LSL #32 - PageSize              ; Leaves only <PageSize> bits
        MOV     r0, r0, LSR #32 - PageSize - 2          ; Puts them back where they belong
        LDRB    r0, [ r10, r0 ]                         ; accounting for word addressing
        BICS    pc, lr, #V_bit

ErrorTooBig
        ADR     r0, ErrorBlock_AddressTooBig
        ORRS    pc, lr, #V_bit

        MakeErrorBlock AddressTooBig
        ALIGN

WriteByte
        ADR     r0, ErrorBlock_NotWriteable
        ORRS    pc, lr, #V_bit

        MakeErrorBlock NotWriteable
        ALIGN

        LTORG

VersionString
        DCB     "EconetLoader", 9, "$Version ($CurrentDate)", 0

        END
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
