head	4.7;
access;
symbols
	Econet-5_80:4.7
	Econet-5_79:4.7
	Econet-5_78:4.6
	Econet-5_77:4.6
	Econet-5_76:4.5
	Econet-5_76-pre2:4.5
	Econet-5_76-pre1:4.4
	Econet-5_75:4.4
	Econet-5_74:4.4
	Econet-5_73:4.3
	RO_5_07:4.3
	dellis_autobuild_BaseSW:4.3
	sbrodie_sedwards_16Mar2000:4.3
	Ursula_merge:4.3
	Econet-5_72:4.3
	dcotton_autobuild_BaseSW:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	Ursula_RiscPC:4.3.0.8
	nicke_Econet_70:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.6
	Ursula_13May1998_bp:4.3
	Ursula_13May1998:4.3.0.2
	rthornb_UrsulaBuild_01May1998:4.3
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.3.0.4
	Daytona_bp:4.3
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.2
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2016.07.02.08.41.51;	author rool;	state Exp;
branches;
next	4.6;
commitid	OOr0IB5BDmRAXIcz;

4.6
date	2015.08.14.07.52.04;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	PYhZPwRcZ6Hc4dxy;

4.5
date	2015.07.24.21.48.09;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	TevoQPbltY0dmAuy;

4.4
date	2011.11.17.21.23.14;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	2yUxEneZK2WKsJHv;

4.3
date	97.05.01.17.39.51;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.22.15.57.20;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.46;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.28.46;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.25.26;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	4.1.3.2;

4.1.3.2
date	97.05.01.14.24.16;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1.2.1
date	97.04.30.10.15.42;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.22.14.51.44;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.02.10;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@32-bit compatible
Detail:
  Added a veneer to the SWI handler so that internally they can corrupt flags and only on exit are 26 .v. 32 bit differences considered.
  No need to flags preserve the service call handler(s), module init, module finalisation.
  Fix bug in RxGetRegisters, the value in r9 pointing to the register block is a banked FIQ mode register, so the IRQ r13/r14 and SVC r13/r14 would be written whereever the unbanked r9 happened to be pointing. May also be worth considering adding a RxGetRegisters32 so the extra PSR fields can be read (not done).
  Changed references to ADR rN, IOC to MOV rN, #IOC.
  For OS_Byte calls use names from Hdr:OsBytes.
  Fix for lock up in SetTicker. If Service_ClaimFIQ were to return an error, the function returned without re-enabling interrupts. Extra PLP inserted.
  Removed manual NOPs after PSR fiddling macros, these are now included in the macro where required with HdrSrc-2_63.
  Delete many unused macros from Macros.s to save having to bother 32 bitting them.
  Made 32 bit write of processor vector (required in a 32 bit configuration on a 26 bit system) conditional on :LNOT:No32bitCode, so it's omitted for machines without MSR/MRS.
Admin:
  Submission from Ian Bradbury, with input from Rob Sprowson.
  Tested with AEH60 NIC on Risc PC with RISC OS 3.71, 4.02, 5.22.
  Tested using motherboard Econet module with RISC OS 3.10 on an A5000.
  For RISC OS 5, requires Podule-1_71 for the NIC address lookup, and also hardwiring a different IOC address (this is not currently looked up at runtime).

Version 5.79. Tagged as 'Econet-5_79'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        SUBT    Macros for Econet debugging

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************
;
; Date       Name          Description
; ----       ----          -----------
; 01-Jul-93  BCockburn     Created from Hdr:EcoMacros
; 29-Mar-94  BCockburn     Moved all Econet specific macros in from Hdr:EcoMacros

ARM_config_cp	CP 15	; coprocessor number for configuration control
ARM_ID_reg	CN 0	; processor ID
ARM8A_cache_reg	CN 7	; cache operations, ARM 8 or StrongARM
C0		CN 0
C5		CN 5
C10		CN 10

        MACRO
$a      SetFIQ  $dest,$rega,$regb,$style,$init,$regc
        ; $dest is the label of the code to jump to
        ; $rega is the register to use for the pointer
        ; $regb is the register to use for the instruction
        ; $regc is an extra register required to preserve the mode during initialisation
        [       "$rega" = "" :LOR: "$regb" = "" :LOR: ("$init" = "Init" :LAND: "$regc" = "")
        !       1,"Syntax is: SetFIQ dest, rega, regb [, long [, init, regc]]"
        ]
        [       "$init" = "Init"
$a
        [ :LNOT: No32bitCode                            ; Cope with 32bit CPUs
        MRS     $regc, CPSR                             ; Switch to _32 mode with IRQs and FIQs off
        ORR     $regb, $regc, #I32_bit :OR: F32_bit     ; Has to be done in two stages because RISC OS
        MSR     CPSR_cxsf, $regb                        ; can't return to a 32bit mode and interrupts
        ORR     $regb, $regb, #2_10000                  ; can occur after the MSR but before the following
        MSR     CPSR_cxsf, $regb                        ; instruction.
        ]
        ADR     $rega, FIQVector
        LDR     $regb, =&E51FF004                       ; LDR pc, .+4 = LDR pc, [ pc, #-4 ]
        STR     $regb, [ $rega ], #4
        [ :LNOT: No32bitCode                            ; Cope with 32bit CPUs
        ; And switch back
        MSR     CPSR_cxsf, $regc
        ]
        [ StrongARM
        ; Local version of OS_SynchroniseCodeAreas, because it's far too much hassle
        ; calling a SWI in these circumstances
        MRC     ARM_config_cp, 0, $regc, ARM_ID_reg, C0, 0
        AND     $regc,$regc,#&F000
        TEQS    $regc,#&A000
        BNE     %FT01                                   ; not StrongARM
        ; We want to clean the (32-byte) data cache line containing
        ; the FIQVector word.
        ADR     $regc, FIQVector
        MCR     ARM_config_cp, 0, $regc, ARM8A_cache_reg, C10, 1  ; clean DC entry
        MCR     ARM_config_cp, 0, $regc, ARM8A_cache_reg, C10, 4  ; drain WB
        MCR     ARM_config_cp, 0, $regc, ARM8A_cache_reg, C5, 0   ; flush IC
        ; Normally 4 NOPs could be required to make sure the
        ; modified instruction wasn't in the pipeline. Fortunately
        ; we know that the FIQ vector can't be called within 3
        ; instructions of here (and if an FIQ were to go off, the
        ; pipeline would be flushed anyway).
1
        ]
        |
$a      ADR     $rega, FIQVector + 4
        ]
        [       "$style" = "Long"
        ADRL    $regb, $dest
        |
        ADR     $regb, $dest
        ]
        STR     $regb, [ $rega, #0 ]
        MEND

        MACRO
$a      SetJump $dest,$rega,$regb,$style
        ; $dest is the label of the code to jump to
        ; $rega is the register to use for the instruction
        ; $regb is the register to use for the pointer
        [       "$rega" = "" :LOR: "$regb" = ""
        !       1,"Syntax is: SetJump dest, temp, address [, long]"
        ]
        [       "$style" = "Long"
$a      ADRL    $rega, $dest
        |
$a      ADR     $rega, $dest
        ]
        ADR     $regb, NextJump
        STR     $rega, [ $regb, #0 ]
        MEND

        MACRO
$a      PutFIQ  $rega,$regb
        ; $rega is the register with the instruction in it
        ; $regb is the register to use for the pointer
        [       "$rega" = "" :LOR: "$regb" = ""
        !       1,"Syntax is: PutFIQ instruction, address"
        ]
$a      ADR     $rega, FIQVector + 4
        ADR     $regb, NextJump
        LDR     $regb, [ $regb, #0 ]
        STR     $regb, [ $rega, #0 ]
        MEND

        MACRO
$a      RTFIQ
$a      SUBS    pc, lr, #4
        MEND

        MACRO
$a      WaitForFIQ  $rega,$regb
        ; rega is the register to use for the instruction
        ; regb is the register to use for the pointer
        [       "$rega" = "" :LOR: "$regb" = ""
        !       1,"Syntax is: WaitForFIQ rega, regb"
        ]
$a      ADR     $rega, FIQVector + 4
        ADR     $regb, %FT10
        STR     $regb, [ $rega, #0 ]
        SUBS    pc, lr, #4
        ALIGN   $Alignment
10
        MEND

        MACRO
        MakeNetError    $cond
        [               Debug
        MOV$cond        r8, pc                          ; Goes into Offset_NetError
        ]
        B$cond          NetError
        MEND

        MACRO
        MakeNetError1   $cond
        [               Debug
        MOV$cond        r8, pc                          ; Goes into Offset_NetError
        ]
        B$cond          NetErrorWithSReg1
        MEND

        MACRO
        MakeNetError2   $cond
        [               Debug
        MOV$cond        r8, pc                          ; Goes into Offset_NetError
        ]
        B$cond          NetErrorWithSReg2
        MEND

        MACRO
        MakeReceptionError $cond
        [               Debug
        MOV$cond        r8, pc                          ; Goes into Offset_NetError
        ]
        B$cond          ReceptionError
        MEND

        MACRO
        MakeReceptionError2 $cond
        [               Debug
        MOV$cond        r8, pc                          ; Goes into Offset_NetError
        ]
        B$cond          ReceptionErrorWithSReg2
        MEND

        MACRO
        TurnAroundDelay $reg1,$reg2,$reg3,$delay
        MOV     r10, #IOC
        [               "$delay" = ""                   ; Default case is 40 microseconds
        MOV     $reg1, #80
        |                                               ; Delay value in microseconds
        MOV     $reg1, #(($delay)*2)
        ]
        STRB    $reg1, [ r10, #Timer0LR ]               ; Copies counter to output latch
        LDRB    $reg2, [ r10, #Timer0CL ]               ; Reg2 = low output latch
10                                                      ; loop waiting for 2MHz counter to change
        STRB    $reg1, [ r10, #Timer0LR ]               ; Copies counter to output latch
        LDRB    $reg3, [ r10, #Timer0CL ]               ; Reg3 = low output latch
        TEQS    $reg2, $reg3                            ; Has counter changed?
        BEQ     %BT10                                   ; Else wait for it to change
        ; counter has changed, decrement our count of ticks
        MOV     $reg2, $reg3                            ; Update copy of counter
        SUBS    $reg1, $reg1, #1                        ; Decrement ticks
        BNE     %BT10                                   ; Then continue if not done
; delay has expired
        LDR     r10, HardwareAddress
        MEND

        OPT OldOpt

        END
@


4.6
log
@Add Ursula fast service table, make hardware base common
Added an Ursula fast reject service call table, inspected in !Verma for correctness.
Remove the 'PoduleCapable' switch, since in both cases it boils down to an LDR of the address of the 68B54 controller there's little to choose between it being in the workspace or a constant in ROM.
Changed 2x unaligned loads into LDRB's since only 1 byte values are needed (Commands.s).

Tested on an AEH60 on RISC OS 3.70.

Version 5.77. Tagged as 'Econet-5_77'
@
text
@a36 162
        FIQStr  $s
        STR     r4, [ r0, -r0 ]                         ; Save in a known place
        LDR     r4, =DebugTraceRegs                     ; Work area
        STMIA   r4!, { r0-r3 }
        LDMIA   r4!, { r1, r2 }
        STMIA   r4!, { r5 }
        MOV     r5, psr                                 ; Preserve mode
        TEQP    psr, #( FFlag + IFlag + SVC_mode )      ; Set FIQ flag and goto SVC mode
        CMP     r2, #50
        BLT     %FT30
        ADR     r3, %FT20
10
        LDRB    r0, [ r3 ], #1
        STRB    r0, [ r1, #0 ]
        TEQ     r0, #0
        SUBNE   r2, r2, #1
        ADDNE   r1, r1, #1
        BNE     %BT10
        B       %FT30
20
        DCB     $s, 0
        ALIGN
30
        TEQP    r5, #0                                  ; Return to Correct mode
        LDMDB   r4!, { r5 }
        STMDB   r4!, { r1, r2 }
        LDMDB   r4!, { r0-r3 }
        LDR     r4, [ r0, -r0 ]
        MEND

        MACRO
        FIQReg  $r
        STR     r4, [ r0, -r0 ]                         ; Save in a known place
        LDR     r4, =DebugTraceRegs                     ; Work area
        STMIA   r4!, { r0-r3 }
        MOV     r3, psr                                 ; Preserve mode
        [       $r = r4
        LDR     r0, [ r0, -r0 ]
        |
        MOV     r0, $r
        ]
        TEQP    psr, #( FFlag + IFlag + SVC_mode )      ; Set FIQ flag and goto SVC mode
        LDMIA   r4!, { r1, r2 }
        STMIA   r4!, { r14 }                            ; Preserve SVC r14
        SWI     XOS_ConvertHex8
        LDMDB   r4!, { r14 }
        STMDB   r4!, { r1, r2 }
        TEQP    r3, #0                                  ; Return to Correct mode
        LDMDB   r4!, { r0-r3 }
        LDR     r4, [ r0, -r0 ]
        MEND

        MACRO
        Str     $s
        Push    "r0-r4"
        MOV     r4, psr                                 ; Preserve mode
        TEQP    psr, #( FFlag + IFlag + SVC_mode )      ; Set FIQ flag and goto SVC mode
        LDR     r0, =DebugTraceAddr                     ; Work area
        LDMIA   r0, { r1, r2 }
        CMP     r2, #50
        BLT     %FT30
        ADR     r3, %FT20
10
        LDRB    r0, [ r3 ], #1
        STRB    r0, [ r1, #0 ]
        TEQ     r0, #0
        SUBNE   r2, r2, #1
        ADDNE   r1, r1, #1
        BNE     %BT10
        B       %FT30
20
        DCB     $s, 0
        ALIGN
30
        LDR     r0, =DebugTraceAddr                     ; Work area
        STMIA   r0, { r1, r2 }
        TEQP    r4, #0                                  ; Return to Correct mode
        Pull    "r0-r4"
        MEND

        MACRO
        Reg     $r
        Push    "r0-r4"
        MOV     r4, psr                                 ; Preserve mode
        TEQP    psr, #( FFlag + IFlag + SVC_mode )      ; Set FIQ flag and goto SVC mode
        LDR     r0, =DebugTraceAddr                     ; Work area
        LDMIA   r0, { r1, r2 }
        CMP     r2, #50
        BLT     %FT30
        [       $r = r0
        LDR     r0, [ sp, #0 ]
        |
        [       $r = r1
        LDR     r0, [ sp, #4 ]
        |
        [       $r = r2
        LDR     r0, [ sp, #8 ]
        |
        [       $r = r3
        LDR     r0, [ sp, #12 ]
        |
        [       $r = r4
        LDR     r0, [ sp, #16 ]
        |
        MOV     r0, $r
        ]
        ]
        ]
        ]
        ]
        Push    "lr"
        SWI     XOS_ConvertHex8
        Pull    "lr"
30
        LDR     r0, =DebugTraceAddr                     ; Work area
        STMIA   r0, { r1, r2 }
        TEQP    r4, #0                                  ; Return to Correct mode
        Pull    "r0-r4"
        MEND

        MACRO
        DebugStats $Reg,$Id
        STR     r0, [ r0, -r0 ]
        LDR     r0, =DebugRegs
        STMIA   r0, { r1, r2, r3 }
        LDR     r1, =DebugPtr
        LDR     r2, [ r1, #0 ]
        LDR     r3, [ r1, #DebugLimit-DebugPtr ]
        CMP     r3, r2
        ORR     r3, $Reg, #($Id :SHL: 16)
        STMLTDB r2!, { r3 }
        STRLT   r2, [ r1, #0 ]
        LDMIA   r0, { r1, r2, r3 }
        LDR     r0, [ r0, -r0 ]
        MEND

        MACRO
        Load    $reg,$identifier,$c
        ; If the global variable with the same name as "$identifier"
        ; is null then it is assumed that a variable exists and can be
        ; LD'd from, otherwise the global variable is assumed to contain
        ; the text of the value that can be LDR ='d.
        [       $identifier = ""
        LD      $reg, $identifier.Var, $c
        |
        LDR$c   $reg, =$$$identifier
        ]
        MEND

        MACRO
        Stor    $reg,$identifier,$cond
        ; If the global variable with the same name as the identifier
        ; is null then it is assumed that a variable exists and can be
        ; ST'd to, otherwise an error is raised
        [       $identifier = ""
        ST      $reg, $identifier.Var, $cond
        |
        !       0, "Storing to constant value"
        ]
        MEND

        MACRO
d47 1
a47 1
        [       {TRUE} ;                                ; Cope with 32bit CPUs
d57 1
a57 1
        [       {TRUE} ;                                ; Cope with 32bit CPUs
d61 18
a78 18
	[	StrongARM
	; Local version of OS_SynchroniseCodeAreas, because it's far too much hassle
	; calling a SWI in these circumstances
	MRC	ARM_config_cp, 0, $regc, ARM_ID_reg, C0, 0
	AND	$regc,$regc,#&F000
	TEQS	$regc,#&A000
	BNE	%FT01					; not StrongARM
	; We want to clean the (32-byte) data cache line containing
	; the FIQVector word.
	ADR	$regc, FIQVector
	MCR	ARM_config_cp, 0, $regc, ARM8A_cache_reg, C10, 1  ; clean DC entry
	MCR	ARM_config_cp, 0, $regc, ARM8A_cache_reg, C10, 4  ; drain WB
	MCR	ARM_config_cp, 0, $regc, ARM8A_cache_reg, C5, 0   ; flush IC
	; Normally 4 NOPs could be required to make sure the
	; modified instruction wasn't in the pipeline. Fortunately
	; we know that the FIQ vector can't be called within 3
	; instructions of here (and if an FIQ were to go off, the
	; pipeline would be flushed anyway).
d80 1
a80 1
	]
d110 1
a110 1
$a      PutFIQ  $rega,$regb,$init
d114 1
a114 1
        !       1,"Syntax is: PutFIQ instruction, address [, init]"
a115 8
        [       "$init" = "Init"
	[	StrongARM
	!	1,"PutFIQ Init won't work on StrongARM!"
	]
$a      ADR     $rega, FIQVector
        LDR     $regb, =&E51FF004                       ; LDR pc, .+4 = LDR pc, [ pc, #-4 ]
        STR     $regb, [ $rega ], #4
        |
a116 1
        ]
d184 1
a184 1
        ADR     r10, IOC
a204 10
        MACRO
        Err     $name
        ALIGN
Error$name
        DCD     ErrorNumber_$name
        DCB     ErrorString_$name
        DCB     0
        ALIGN
        MEND

@


4.5
log
@Rationalise build switches
Drop support for OldOS (RISC OS 2), it's time to accept MessageTrans does exist now.
Drop support for ARM8, the processor that never was.
Use {TRUE} and {FALSE} objasm built in variables.
Tagged as Econet-5_76-pre2.
@
text
@a372 1
        [       PoduleCapable
a373 3
        |
        LDR     r10, =EconetController
        ]
@


4.4
log
@Assemble with objasm not aasm.
Messages resources now gets both the date and the version from the VersionNum file.

Version 5.74. Tagged as 'Econet-5_74'
@
text
@a241 3
  [ ARM810support
	SUB	PC,PC,#4	; flushes branch predict on ARM810 (local equivalent of OS_SynchroniseCodeAreas)
  ]
@


4.3
log
@Version RO_3_71 taken
@
text
@d210 1
a210 1
        mrs     AL, $regc, CPSR_all                     ; Switch to _32 mode with IRQs and FIQs off
d212 1
a212 1
        msr     AL, CPSR_all, $regb                     ; can't return to a 32bit mode and interrupts
d214 1
a214 1
        msr     AL, CPSR_all, $regb                     ; instruction.
d221 1
a221 1
        msr     AL, CPSR_all, $regc
@


4.2
log
@Version RO_3_70 taken
@
text
@d242 3
@


4.1
log
@Initial revision
@
text
@d29 6
a34 2
        GBLL    UseLDR
UseLDR  SETL    {TRUE}
a206 1
        [       UseLDR
d223 20
a251 11
        |
        [       "$style" = ""
$a      ADR     $rega, $dest - ( FIQVector + 8 )
        |
$a      ADRL    $rega, $dest - ( FIQVector + 8 )
        ]
        MOV     $rega, $rega, LSR#2
        ORR     $rega, $rega, #&EA000000                ; BAL
        ADR     $regb, FIQVector
        STR     $rega, [ $regb, #0 ]
        ]
a277 1
        [       UseLDR
d279 3
a290 8
        |
$a      ADR     $rega, NextJump
        LDR     $regb, [ $rega, #0 ]
        SUB     $regb, $regb #FIQVector + 8
        MOV     $regb, $regb, LSR#2
        ORR     $regb, $regb, #&EA000000                ; BAL
        STR     $regb, [ $rega, #FIQVector - NextJump ]
        ]
a304 1
        [       UseLDR
a307 7
        |
$a      ADR     $rega, %FT10 - ( FIQVector + 8 )        ; Byte offset
        MOV     $rega, $rega, LSR#2                     ; Word offset
        ORR     $rega, $rega, #&EA000000                ; BAL
        ADR     $regb, FIQVector                        ; Place for new instruction
        STR     $rega, [ $regb, #0 ]
        ]
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d29 2
a30 6
ARM_config_cp	CP 15	; coprocessor number for configuration control
ARM_ID_reg	CN 0	; processor ID
ARM8A_cache_reg	CN 7	; cache operations, ARM 8 or StrongARM
C0		CN 0
C5		CN 5
C10		CN 10
d203 1
a219 20
	[	StrongARM
	; Local version of OS_SynchroniseCodeAreas, because it's far too much hassle
	; calling a SWI in these circumstances
	MRC	ARM_config_cp, 0, $regc, ARM_ID_reg, C0, 0
	AND	$regc,$regc,#&F000
	TEQS	$regc,#&A000
	BNE	%FT01					; not StrongARM
	; We want to clean the (32-byte) data cache line containing
	; the FIQVector word.
	ADR	$regc, FIQVector
	MCR	ARM_config_cp, 0, $regc, ARM8A_cache_reg, C10, 1  ; clean DC entry
	MCR	ARM_config_cp, 0, $regc, ARM8A_cache_reg, C10, 4  ; drain WB
	MCR	ARM_config_cp, 0, $regc, ARM8A_cache_reg, C5, 0   ; flush IC
	; Normally 4 NOPs could be required to make sure the
	; modified instruction wasn't in the pipeline. Fortunately
	; we know that the FIQ vector can't be called within 3
	; instructions of here (and if an FIQ were to go off, the
	; pipeline would be flushed anyway).
1
	]
d229 11
d266 1
a267 3
	[	StrongARM
	!	1,"PutFIQ Init won't work on StrongARM!"
	]
d277 8
d299 1
d303 7
@


4.1.3.2
log
@Version RO_3_71 taken
@
text
@a241 3
  [ ARM810support
	SUB	PC,PC,#4	; flushes branch predict on ARM810 (local equivalent of OS_SynchroniseCodeAreas)
  ]
@


4.1.3.1.2.1
log
@Updated from 3.71 CD
@
text
@a241 3
  [ ARM810support
	SUB	PC,PC,#4	; flushes branch predict on ARM810 (local equivalent of OS_SynchroniseCodeAreas)
  ]
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
