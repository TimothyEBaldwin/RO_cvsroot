head	4.5;
access;
symbols
	Econet-5_80:4.5
	Econet-5_79:4.4
	Econet-5_78:4.3
	Econet-5_77:4.3
	Econet-5_76:4.2
	Econet-5_76-pre2:4.2
	Econet-5_76-pre1:4.1
	Econet-5_75:4.1
	Econet-5_74:4.1
	Econet-5_73:4.1
	RO_5_07:4.1
	dellis_autobuild_BaseSW:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Ursula_merge:4.1
	Econet-5_72:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	nicke_Econet_70:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2016.07.02.08.44.23;	author rool;	state Exp;
branches;
next	4.4;
commitid	gPbL3vsJu9TrYIcz;

4.4
date	2016.07.02.08.41.51;	author rool;	state Exp;
branches;
next	4.3;
commitid	OOr0IB5BDmRAXIcz;

4.3
date	2015.08.14.07.52.04;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	PYhZPwRcZ6Hc4dxy;

4.2
date	2015.07.24.21.48.09;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	TevoQPbltY0dmAuy;

4.1
date	96.11.05.09.28.46;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.28.46;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.25.23;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.22.14.51.41;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.02.06;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Minor fixes
Detail:
  Change some signed pointer compares to be unsigned.
  Report network speed in kilohertz not kelvinhertz.
Admin:
  Not tested - the code changes are in debug switches only.

Version 5.80. Tagged as 'Econet-5_80'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        SUBT    Arthur.  File ==> &.Arthur.Econet.Commands
        TTL     Econet for Arthur.

HelpTable
        DCB     "Station", 0
        ALIGN
        DCD     0                               ; No code here
        InfoWord 0, 0, Help_Is_Code_Flag
        DCD     0                               ; No syntax
        DCD     DoStarHelpStation - Origin
        [       ErrorInfo
        DCB     "Econet_Info", 0
        ALIGN
        DCD     DoStarErrorInfo - Origin
        InfoWord 0, 0, 0
        DCD     SyntaxOfStarErrorInfo - Origin
        DCD     HelpForStarErrorInfo - Origin
        ]
        [       ControlBlocks
        DCB     "Econet_ControlBlocks", 0
        ALIGN
        DCD     DoStarControlBlocks - Origin
        InfoWord 0, 0, 0
        DCD     SyntaxOfStarControlBlocks - Origin
        DCD     HelpForStarControlBlocks - Origin
        ]
        [       PortInfo
        DCB     "Econet_Ports", 0
        ALIGN
        DCD     DoStarPortInfo - Origin
        InfoWord 0, 0, 0
        DCD     SyntaxOfStarPortInfo - Origin
        DCD     HelpForStarPortInfo - Origin
        ]
        [       Variables
        DCB     "Econet_Variables", 0
        ALIGN
        DCD     DoStarVariables - Origin
        InfoWord 0, 0, 0
        DCD     SyntaxOfStarVariables - Origin
        DCD     HelpForStarVariables - Origin
        ]
        DCD     0

DoStarHelpStation ROUT
        Push    "r0-r6, lr"
        ;       R0 is a buffer address
        ;       R1 is the buffer size
        LDR     wp, [ r12 ]
        SWI     XEconet_ReadTransportType               ; Quick one to ensure we are running and Status2 is up-to-date
        DEC     sp, 28                                  ; Make a stack frame for the data & resultant strings
        ;       SP + 00  ==> Full station address string
        ;       SP + 10  ==> Network speed as a string or zero
        ;       SP + 20  ==> Station number
        ;       SP + 24  ==> Network number
        MOV     r14, #0
        STRB    r14, [ sp, #10 ]                        ; Initialise the second string
        BL      NetworkParameters                       ; Can't SWI because of AUN
        BVS     JustStationNumber
        MOVS    r0, r1                                  ; Value
        BEQ     JustStationNumber
        LD      r1, Status2
        TST     r1, #DCD
        BNE     JustStationNumber                       ; No clock means no frequency
        ADD     r1, sp, #10                             ; Pointer to buffer
        MOV     r2, #10
        SWIVC   XOS_ConvertCardinal2
        ADR     r6, Token_HelpStationFrequency
        B       LookUpHelp

JustStationNumber
        LD      r1, Status2
        TST     r1, #DCD
        ADRNE   r6, Token_HelpStationNoClock
        ADREQ   r6, Token_HelpStation
LookUpHelp
        SWI     XEconet_ReadLocalStationAndNet
        ADD     r2, sp, #20                             ; Pointer to data area
        STMVCIA r2, { r0, r1 }
        MOVVC   r0, r2                                  ; Point at the station number
        MOV     r1, sp
        MOV     r2, #10
        SWIVC   XOS_ConvertNetStation
        MOV     r1, r6                                  ; Token to use
        ADD     r14, sp, #28                            ; Address of incoming R0 and R1
        LDMVCIA r14, { r2, r3 }                         ; Buffer address and length
        MOV     r4, sp                                  ; Station number as text
        ADD     r5, sp, #10                             ; Frequency
        BLVC    MessageTransGSLookup2
ExitStarHelp
        INC     sp, 28
        STRVS   r0, [ sp, #0 ]
        Pull    "r0-r6, pc"

Token_HelpStation
        DCB     "HelpStn", 0
Token_HelpStationNoClock
        DCB     "StnNClk", 0
Token_HelpStationFrequency
        DCB     "StnFreq", 0
        ALIGN

        [       ErrorInfo
HelpForStarErrorInfo
        DCB     "*"
        DCB     TokenEscapeChar,Token0
        DCB     " prints out information about the number"
        DCB     " of errors since starting up.", 13
SyntaxOfStarErrorInfo
        DCB     "Syntax: *"
        DCB     TokenEscapeChar,Token0
        DCB     0

RxMessage
        DCB     "Receive information:", 10, 13, 0
TxMessage
        DCB     10, 13, "Transmit information:", 10, 13, 0
        [       Debug
NetErrorListMessage
        DCB     10, 13, "Net Error Listing:", 10, 13, 0
        ]
        ALIGN

DoStarErrorInfo ROUT
        LDR     wp, [ r12 ]
        Push    "r0-r10, lr"
        MOV     r3, #0
        MOV     r4, #0
        ADR     r0, RxMessage
        SWI     XOS_Write0
        ADRL    r6, RxErrors
        BLVC    PrintErrorStats                         ; Increments R6 to point to TxErrors
        ADRVC   r0, TxMessage
        SWIVC   XOS_Write0
        BLVC    PrintErrorStats
        [       Debug
        ADRVCL  r0, NetErrorListMessage
        SWIVC   XOS_Write0
        BVS     ExitErrorInfo
        ADRL    r4, NetErrorList
NetErrorListLoop
        LDR     r3, NetErrorListPointer
        CMP     r4, r3
        ADRCSL  r4, NetErrorList
        STRCS   r4, NetErrorListPointer
        BCS     ExitErrorInfo
        ADRL    r1, TextBuffer
        MOV     r2, #?TextBuffer
        BL      AddString
        DCB     "Time &", 0
        ALIGN
        LDRVC   r0, [ r4, #8 ]
        SWIVC   XOS_ConvertHex8
        BVS     ExitErrorInfo
        BL      AddString
        DCB     ", PC &", 0
        ALIGN
        LDRVC   r0, [ r4, #4 ]
        BICVC   r0, r0, #ARM_CC_Mask
        SWIVC   XOS_ConvertHex8
        BVS     ExitErrorInfo
        LDR     r0, [ r4, #12 ]
        CMP     r0, #-1
        BEQ     NetErrorNoHandle
        BL      AddString
        DCB     ", Handle &", 0
        ALIGN
        SWIVC   XOS_ConvertHex8
        BVS     ExitErrorInfo
        BL      AddString
        DCB     ", &", 0
        ALIGN
        LDRVCB  r0, [ r4, #3 ]
        SWIVC   XOS_ConvertHex2
        BVS     ExitErrorInfo
        BL      AddString
        DCB     ".&", 0
        ALIGN
        LDRVCB  r0, [ r4, #2 ]
        SWIVC   XOS_ConvertHex2
        BVS     ExitErrorInfo
NetErrorNoHandle
        LDRB    r0, [ r4, #0 ]
        TEQ     r0, #255
        BEQ     NetErrorNoSReg1
        BL      AddString
        DCB     ", SReg1 &", 0
        ALIGN
        SWIVC   XOS_ConvertHex2
        BVS     ExitErrorInfo
NetErrorNoSReg1
        LDRB    r0, [ r4, #1 ]
        TEQ     r0, #255
        BEQ     NetErrorNoSReg2
        BL      AddString
        DCB     ", SReg2 &", 0
        ALIGN
        SWIVC   XOS_ConvertHex2
        BVS     ExitErrorInfo
NetErrorNoSReg2
        ADRL    r0, TextBuffer
        SWI     XOS_Write0
        SWIVC   XOS_NewLine
        INC     r4, 16
        BVC     NetErrorListLoop
        ]
ExitErrorInfo
        STRVS   r0, [ sp ]
        Pull    "r0-r10, pc"

PrintErrorStats
        Push    lr
        MOV     r7, #0
10
        ADRL    r1, TextBuffer
        MOV     r2, #?TextBuffer
        LDR     r8, [ r6 ], #4
        TEQ     r8, #0
        BEQ     %20
        MOV     r0, r7
        SWI     XEconet_ConvertStatusToString
        Pull    pc, VS
        BL      AddString
        DCB     " = ", 0
        ALIGN
        MOVVC   r0, r8
        SWIVC   XOS_ConvertSpacedCardinal4
        ADRVCL  r0, TextBuffer
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        Pull    pc, VS
20
        INC     r7
        TEQ     r7, #Status_MaxValue+1
        BNE     %10
        ADRL    r1, TextBuffer
        MOV     r2, #?TextBuffer
        BL      AddString
        DCB     "Total = ", 0
        ALIGN
        LDRVC   r0, [ r6 ], #4
        SWIVC   XOS_ConvertSpacedCardinal4
        ADRVCL  r0, TextBuffer
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        Pull    pc
        ]

        [       ControlBlocks
HelpForStarControlBlocks
        DCB     "*"
        DCB     TokenEscapeChar,Token0
        DCB     " prints out info about all currently open"
        DCB     " receive and transmit blocks.", 13
SyntaxOfStarControlBlocks
        DCB     "Syntax: *"
        DCB     TokenEscapeChar,Token0
        DCB     0

DoStarControlBlocks ROUT
        LDR     wp, [ r12 ]
        Push    lr
        LDR     r10, TxCBList
        TEQ     r10, #NIL
        BEQ     ShowOpenRxCBs
        ADR     r0, OpenTxMessage
        SWI     XOS_Write0
        Pull    pc, VS
ShowTxBlockLoop
        LDR     r1, =TxCBIdentifier
        LDR     r2, [ r10, #Offset_Identifier ]
        TEQ     r2, r1
        Pull    "lr", NE
        BNE     InternalErrorExit
        ADRL    r1, TextBuffer
        MOV     r2, #?TextBuffer
        BL      AddCBHandleAndEvent
        Pull    pc, VS
        BL      AddString
        DCB     ", Station ", 0
        ALIGN
        LDRVCB   r6, [ r10, #Offset_Station ]
        LDRVCB   r7, [ r10, #Offset_Network ]
        Push    "r6, r7"
        MOVVC   r0, sp
        SWIVC   XOS_ConvertNetStation
        INC     sp, 8
        Pull    pc, VS
        BL      AddString
        DCB     ", Port &", 0
        ALIGN
        LDRVCB  r0, [ r10, #Offset_Port ]
        SWIVC   XOS_ConvertHex2
        BLVC    AddCBStatus
        ADRVCL  r0, TextBuffer
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        Pull    pc, VS
        LDR     r10, [ r10, #Offset_Link ]
        TEQ     r10, #NIL
        BNE     ShowTxBlockLoop
ShowOpenRxCBs
        LDR     r10, RxCBList
        TEQ     r10, #NIL
        Pull    pc, EQ
        ADR     r0, OpenRxMessage
        SWI     XOS_Write0
ShowRxBlockLoop
        LDR     r1, =RxCBIdentifier
        LDR     r2, [ r10, #Offset_Identifier ]
        TEQ     r2, r1
        Pull    "lr", NE
        BNE     InternalErrorExit
        ADRL    r1, TextBuffer
        MOV     r2, #?TextBuffer
        BL      AddCBHandleAndEvent
        Pull    pc, VS
        BL      AddString
        DCB     ", Station ", 0
        ALIGN
        Pull    pc, VS
        TEQ     r5, #Status_Received
        LDREQB   r6, [ r10, #Offset_Station ]
        LDRNEB   r6, [ r10, #Offset_RxStation ]
        LDREQB   r7, [ r10, #Offset_Network ]
        LDRNEB   r7, [ r10, #Offset_RxNetwork ]
        Push    "r6, r7"
        MOVVC   r0, sp
        SWIVC   XOS_ConvertNetStation
        INC     sp, 8
        Pull    pc, VS
        BL      AddString
        DCB     ", Port &", 0
        ALIGN
        Pull    pc, VS
        TEQ     r5, #Status_Received
        LDREQB  r0, [ r10, #Offset_Port ]
        LDRNEB  r0, [ r10, #Offset_RxPort ]
        SWI     XOS_ConvertHex2
        BLVC    AddCBStatus
        ADRVCL  r0, TextBuffer
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        Pull    pc, VS
        LDR     r10, [ r10, #Offset_Link ]
        TEQ     r10, #NIL
        BNE     ShowRxBlockLoop
        Pull    pc

OpenTxMessage
        DCB     "Open Transmit blocks:", 10, 13, 0
OpenRxMessage
        DCB     "Open Receive blocks:", 10, 13, 0
        ALIGN

AddCBHandleAndEvent
        Push    "lr"
        BL      AddString
        DCB     "Handle &", 0
        ALIGN
        LDRVC   r0, [ r10, #Offset_Handle ]
        SWIVC   XOS_ConvertHex8
        Pull    "pc", VS
        BL      AddString
        DCB     ", Event &", 0
        ALIGN
        LDRVC   r0, [ r10, #Offset_Event ]
        SWIVC   XOS_ConvertHex8
        ADRVCL  r0, TextBuffer
        Pull    "pc"

AddCBStatus
        Push    "r3, r4, lr"
        MOV     r3, r1
        MOV     r4, r2
        BL      AddString
        DCB     ", ==> ", 0
        ALIGN
        LDRVCB  r0, [ r10, #Offset_Status ]
        SWIVC   XEconet_ConvertStatusToString
        Pull    "r3, r4, pc", VC
        MOV     r1, r3
        MOV     r2, r4
        LDR     r3, [ r0 ]
        LDR     r4, =ErrorNumber_BadStatus
        TEQ     r3, r4
        Pull    "r3, r4, pc", NE                                ; Exit, it isn't the error we want
        BL      AddString
        DCB     "Status &", 0
        ALIGN
        LDRVCB  r0, [ r10, #Offset_Status ]
        SWIVC   XOS_ConvertHex2
        Pull    "r3, r4, pc"
        ]

        [       PortInfo
HelpForStarPortInfo
        DCB     "*"
        DCB     TokenEscapeChar,Token0
        DCB     " prints out information about the current"
        DCB     " status of the Port Allocator.", 13
SyntaxOfStarPortInfo
        DCB     "Syntax: *"
        DCB     TokenEscapeChar,Token0
        DCB     0

DoStarPortInfo  ROUT
        LDR     wp, [ r12 ]
        Push    lr
        SWI     XOS_WriteS
        DCB     "Current port hint is ", 0
        ALIGN
        ADRL    r5, TextBuffer
        LD      r0, PortHint, VC
        MOVVC   r1, r5                                  ; TextBuffer
        MOVVC   r2, #?TextBuffer
        SWIVC   XOS_ConvertHex2
        SWIVC   XOS_Write0
        Pull    pc, VS
        SWI     XOS_WriteS
        DCB     13, 10, "Port allocations:", 13, 10
        ALIGN
        Pull    pc, VS
        MOV     r4, #-1                                 ; The port we're looking at
PortInfoLoop
        INC     r4
        CMP     r4, #256                                ; Clears V
        Pull    pc, EQ
        MOV     r0, r4
        BL      FindPort
        LDR     r3, [ r1 ]
        MOV     r3, r3, LSR r2                          ; Put the state at the bottom
        ANDS    r3, r3, #2_11                           ; Mask to get only this value
        BEQ     PortInfoLoop                            ; Zero is the free state
        MOV     r0, r4
        MOV     r1, r5                                  ; TextBuffer
        MOV     r2, #?TextBuffer
        SWI     XOS_ConvertHex2
        Pull    pc, VS
        BL      AddString
        DCB     "  ", 0
        ALIGN
        MOV     r0, r5                                  ; TextBuffer
        SWIVC   XOS_Write0
        Pull    pc, VS

        TEQ     r3, #2_01
        ADREQ   r0, String_Allocated
        BEQ     PrintPortStatus
        TEQ     r3, #2_10
        ADREQ   r0, String_Claimed
        ADRNE   r0, String_Reserved
PrintPortStatus
        SWI     XOS_Write0
        SWIVC   XOS_NewLine
        Pull    pc, VS
        B       PortInfoLoop

String_Allocated
        DCB     "Allocated", 0
String_Claimed
        DCB     "Claimed", 0
String_Reserved
        DCB     "Reserved", 0
        ALIGN
        ]

        [       Variables
HelpForStarVariables
        DCB     "*"
        DCB     TokenEscapeChar,Token0
        DCB     " prints out the values of all the"
        DCB     " important internal variables.", 13
SyntaxOfStarVariables
        DCB     "Syntax: *"
        DCB     TokenEscapeChar,Token0
        DCB     0

DoStarVariables  ROUT
        LDR     wp, [ r12 ]
        Push    lr
        ADR     r0, String_Status
        LDRB    r1, Status2
        BL      PrintNameAndValueAsByte
        ADRVC   r0, String_Time
        LDR     r1, Time
        BLVC    PrintNameAndValueAsWord
        ADRVC   r0, String_PowerDownTime
        LDR     r1, PowerDownTime
        BLVC    PrintNameAndValueAsWord
        ADRVC   r0, String_FIQBusy
        LDRB    r1, FIQBusy
        BLVC    PrintNameAndValueAsByte
        ADRVC   r0, String_FIQStatus
        LDRB    r1, FIQStatus
        BLVC    PrintNameAndValueAsByte
        ADRVC   r0, String_Event
        LDR     r1, EventSequenceNumber
        BLVC    PrintNameAndValueAsWord
        ADRVC   r0, String_Speed
        LDR     r1, BroadcastTime
        BLVC    PrintNameAndValueAsWord

        Pull    pc

String_Status
        DCB     "Status register 2 = &", 0
String_Time
        DCB     "Time = &", 0
String_PowerDownTime
        DCB     "PowerDownTime = &", 0
String_FIQBusy
        DCB     "FIQ busy flag = &", 0
String_FIQStatus
        DCB     "FIQ status flag = &", 0
String_Event
        DCB     "Event sequence number = &", 0
String_Speed
        DCB     "Clock period = &", 0
        ALIGN

PrintNameAndValueAsWord
        ;       R0 => Pointer to name string.
        ;       R1 => The value to print out.
        Push    "r2, lr"
        SWI     XOS_Write0
        MOVVC   r0, r1
        ADRVCL  r1, TextBuffer
        MOVVC   r2, #?TextBuffer
        SWIVC   XOS_ConvertHex8
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        Pull    "r2, pc"

PrintNameAndValueAsByte
        ;       R0 => Pointer to name string.
        ;       R1 => The value to print out.
        Push    "r2, lr"
        SWI     XOS_Write0
        MOVVC   r0, r1
        ADRVCL  r1, TextBuffer
        MOVVC   r2, #?TextBuffer
        SWIVC   XOS_ConvertHex2
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        Pull    "r2, pc"

        ]

        [       ErrorInfo :LOR: ControlBlocks
AddString       ROUT
        Push    r1
        CLRV
      [ :LNOT: No32bitCode
        TEQ     pc, pc                                  ; Check processor mode
        BICNE   lr, lr, #ARM_CC_Mask
        BICEQ   lr, lr, #3 
      |
        BIC     lr, lr, #ARM_CC_Mask
      ]
10
        TEQ     r2, #0
        SETV    EQ
        LDRB    r0, [ lr ], #1
        STRVCB  r0, [ r1 ], #1
        SUBVC   r2, r2, #1                              ; One less byte in the buffer
        TEQ     r0, #0
        BNE     %10
        DEC     r1                                      ; Point back at the zero
        INC     lr, 3                                   ; Get to the right word boundary
        BIC     lr, lr, #3                              ; Align afterwards
        Pull    r0
        MOVVC   pc, lr
        ADR     r0, ErrorBufferOverflow
        B       MakeError

ErrorBufferOverflow
        DCD     ErrorNumber_CDATBufferOverflow
        DCB     "BufOFlo", 0
        ALIGN
        ]

        END
@


4.4
log
@32-bit compatible
Detail:
  Added a veneer to the SWI handler so that internally they can corrupt flags and only on exit are 26 .v. 32 bit differences considered.
  No need to flags preserve the service call handler(s), module init, module finalisation.
  Fix bug in RxGetRegisters, the value in r9 pointing to the register block is a banked FIQ mode register, so the IRQ r13/r14 and SVC r13/r14 would be written whereever the unbanked r9 happened to be pointing. May also be worth considering adding a RxGetRegisters32 so the extra PSR fields can be read (not done).
  Changed references to ADR rN, IOC to MOV rN, #IOC.
  For OS_Byte calls use names from Hdr:OsBytes.
  Fix for lock up in SetTicker. If Service_ClaimFIQ were to return an error, the function returned without re-enabling interrupts. Extra PLP inserted.
  Removed manual NOPs after PSR fiddling macros, these are now included in the macro where required with HdrSrc-2_63.
  Delete many unused macros from Macros.s to save having to bother 32 bitting them.
  Made 32 bit write of processor vector (required in a 32 bit configuration on a 26 bit system) conditional on :LNOT:No32bitCode, so it's omitted for machines without MSR/MRS.
Admin:
  Submission from Ian Bradbury, with input from Rob Sprowson.
  Tested with AEH60 NIC on Risc PC with RISC OS 3.71, 4.02, 5.22.
  Tested using motherboard Econet module with RISC OS 3.10 on an A5000.
  For RISC OS 5, requires Podule-1_71 for the NIC address lookup, and also hardwiring a different IOC address (this is not currently looked up at runtime).

Version 5.79. Tagged as 'Econet-5_79'
@
text
@d158 3
a160 3
        ADRGEL  r4, NetErrorList
        STRGE   r4, NetErrorListPointer
        BGE     ExitErrorInfo
@


4.3
log
@Add Ursula fast service table, make hardware base common
Added an Ursula fast reject service call table, inspected in !Verma for correctness.
Remove the 'PoduleCapable' switch, since in both cases it boils down to an LDR of the address of the 68B54 controller there's little to choose between it being in the workspace or a constant in ROM.
Changed 2x unaligned loads into LDRB's since only 1 byte values are needed (Commands.s).

Tested on an AEH60 on RISC OS 3.70.

Version 5.77. Tagged as 'Econet-5_77'
@
text
@d568 5
d574 1
@


4.2
log
@Rationalise build switches
Drop support for OldOS (RISC OS 2), it's time to accept MessageTrans does exist now.
Drop support for ARM8, the processor that never was.
Use {TRUE} and {FALSE} objasm built in variables.
Tagged as Econet-5_76-pre2.
@
text
@d197 1
a197 1
        LDR     r0, [ r4, #0 ]
d206 1
a206 1
        LDR     r0, [ r4, #1 ]
@


4.1
log
@Initial revision
@
text
@a59 1
        [       UseMsgTrans
a115 29
        |
        Push    "r0-r2, lr"
        ;       R0 is a buffer address
        ;       R1 is the buffer size
        LDR     wp, [ r12 ]
        MOV     r2, r1                                  ; Buffer length
        MOV     r1, r0                                  ; Buffer address
        BL      AddString
        DCB     "Econet station ", 0
        ALIGN
        Push    r1
        SWIVC   XEconet_ReadLocalStationAndNet
        Push    "r0, r1"
        MOVVC   r0, sp                                  ; Point at the station number
        LDRVC   r1, [ sp, #8 ]
        SWIVC   XOS_ConvertNetStation
        INC     sp, 12                                  ; Trash two data values and the saved R1
        BVS     ExitHelpCode
        LD      r0, Status2
        TST     r0, #DCD
        BEQ     ExitHelpCode
        BL      AddString
NoClockString
        DCB     " no clock", 0
        ALIGN
ExitHelpCode
        STRVS   r0, [ sp, #0 ]
        Pull    "r0-r2, pc"
        ]
d564 1
a564 1
        [       (:LNOT: UseMsgTrans) :LOR: ErrorInfo :LOR: ControlBlocks
a580 1
        [       UseMsgTrans
a588 4
        |
        ADRVSL  Error, ErrorCDATBufferOverflow
        MOV     pc, lr
        ]
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
