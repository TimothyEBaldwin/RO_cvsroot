head	4.8;
access;
symbols
	Econet-5_80:4.8
	Econet-5_79:4.7
	Econet-5_78:4.6
	Econet-5_77:4.6
	Econet-5_76:4.5
	Econet-5_76-pre2:4.5
	Econet-5_76-pre1:4.4
	Econet-5_75:4.4
	Econet-5_74:4.3
	Econet-5_73:4.2
	RO_5_07:4.2
	dellis_autobuild_BaseSW:4.2
	sbrodie_sedwards_16Mar2000:4.2
	Ursula_merge:4.2
	Econet-5_72:4.2
	dcotton_autobuild_BaseSW:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.10
	nicke_Econet_70:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.8
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.8
date	2016.07.02.08.44.23;	author rool;	state Exp;
branches;
next	4.7;
commitid	gPbL3vsJu9TrYIcz;

4.7
date	2016.07.02.08.41.51;	author rool;	state Exp;
branches;
next	4.6;
commitid	OOr0IB5BDmRAXIcz;

4.6
date	2015.08.14.07.52.05;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	PYhZPwRcZ6Hc4dxy;

4.5
date	2015.07.24.21.48.10;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	TevoQPbltY0dmAuy;

4.4
date	2011.11.26.13.22.05;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	zmHFSWM4gjaOvQIv;

4.3
date	2011.11.17.21.23.14;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	2yUxEneZK2WKsJHv;

4.2
date	97.01.22.15.57.19;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.47;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.28.47;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.25.30;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.22.14.51.48;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.02.15;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.8
log
@Minor fixes
Detail:
  Change some signed pointer compares to be unsigned.
  Report network speed in kilohertz not kelvinhertz.
Admin:
  Not tested - the code changes are in debug switches only.

Version 5.80. Tagged as 'Econet-5_80'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        SUBT    Receive routines. => &.Arthur.Econet.Receive
        OPT     OptPage

        ALIGN   $Alignment
StartReception  ROUT
        LD      r13, SReg1
        TST     r13, #SReg2Req
        BEQ     FrameDiscontinue
        LD      r13, SReg2
        ST      r13, Status2
        TST     r13, #AddressPresent
        BEQ     Reset                                   ; No, so give up and start again
        LD      r9, RxByte                              ; Get the first byte, keep in R9 for later
        LD      r13, LocalStation                       ; Get our station number
        TEQ     r9, r13
        BNE     %30                                     ; It might be a broadcast
        SetFIQ  CheckNetOfScout, r11, r13
        B       %40

30
        TEQ     r9, #255                                ; Is it a broadcast?
        BNE     FrameDiscontinue
        SetFIQ  CheckNetOfScoutForBroadcast, r11, r13
40
	MOV	r13, #-1
	ST	r13, FIQBusy				; Set the Busy flag
        RTFIQ

        ALIGN   $Alignment
CheckNetOfScout
        LD      r13, SReg2
        TST     r13, #RxDA
        MakeReceptionError2 EQ
        LD      r13, RxByte
        TEQ     r13, #0                                 ; Local net of zero
        BNE     FrameDiscontinue
        B       %60

        ALIGN   $Alignment
CheckNetOfScoutForBroadcast
        LD      r13, SReg2
        TST     r13, #RxDA
        BEQ     FrameDiscontinue
        LD      r13, RxByte
        TEQ     r13, #0                                 ; Local short broadcast?
        BEQ     %50                                     ; Yes, so get on with the reception
        CMP     r13, #&FC                               ; Global short (FF), Global long (FE), Local long (FD), or Reserved (FC)?
        BLT     FrameDiscontinue                        ; No
50
        ORR     r13, r13, #( BroadcastBit :SHR: 8 )
60
        ORR     r13, r9, r13, ASL #8                    ; Bottom 16 bits are the destination Address
        ST      r13, RxMode
        SetFIQ  BufferData, r8, r9
        SetJump CheckScoutBuffer, r11, r13
        ADRL    r8, ScoutBuffer
        MOV     r9, #?ScoutBuffer
        RTFIQ

ReceptionErrorWithSReg2
        [       Debug
        LDR     r11, NetErrorListPointer
        STRB    r13, [ r11, #1 ]                        ; SReg 2 at offset 1
        ]
ReceptionError
        [       Debug
        LDR     r11, NetErrorListPointer
        STR     r8, [ r11, #4 ]                         ; The PC where it happened
        LD      r8, Time
        STR     r8, [ r11, #8 ]                         ; The time it happened
        ]
        LD      r8, Record
        TEQ     r8, #NIL                                ; Is there a valid record (ie is this an Immediate Op)?
        BEQ     NoRxRecordToUpdate
        [       Debug
        LDR     r13, [ r8, #Offset_Handle ]
        STR     r13, [ r11, #12 ]                       ; To whom it happened
        LDRB    r13, [ r8, #Offset_Station ]
        STRB    r13, [ r11, #2 ]
        LDRB    r13, [ r8, #Offset_Network ]
        STRB    r13, [ r11, #3 ]
        MOV     r13, #-1                                ; Initialise the next record
        STR     r13, [ r11, #16 ] !
        STR     r13, [ r11, #12 ]
        STR     r11, NetErrorListPointer                ; Store the pointer for next time
        ]
        LDRB    r9, [ r8, #Offset_Status ]
        LDR     r11, [ r8, #Offset_Identifier ]
        LDR     r13, =TxCBIdentifier
        TEQ     r11, r13                                ; Check if it is a Tx record
        MOVEQ   r9, #Status_NetError
        BEQ     DecrementCountAndWriteStatus            ; Yes, deal with it as a Tx record
TransmissionErrorDuringReceive
        MOV     r9, #Status_RxReady
        STRB    r9, [ r8, #Offset_Status ]
        MOV     r8, #NIL                               ; NIL the record pointer
        STR     r8, Record
NoRxRecordToUpdate
        LD      r13, SReg2
        ST      r13, Status2
        TST     r13, #(RxDA :OR: AddressPresent)
        BEQ     Reset
        B       ReInit


FrameDiscontinue
        MOV     r13, #2_10100010                        ; TxRS, Frame discontinue, RxIE
        ST      r13, CReg1
        B       Ready

        ALIGN   $Alignment
BufferData      ROUT
        LD      r13, SReg2
        TST     r13, #RxDA
        BEQ     WasThatTheEnd
        LD      r13, RxByte
        STRB    r13, [ r8 ], #1
        DECS    r9
        BEQ     FrameDiscontinue
        LD      r13, SReg2
        TST     r13, #RxDA
        BNE     %20
        TEQ     r13, #0
        BNE     WasThatTheEnd
20
        LD      r13, RxByte
        STRB    r13, [ r8 ], #1
        DECS    r9
        BEQ     FrameDiscontinue
        RTFIQ

WasThatTheEnd
        LD      r13, RxMode                             ; Turn the line around if not a broadcast
        TST     r13, #BroadcastBit
        MOVEQ   r13, #2_10000100                        ; RTS, Flag idle, 1 byte mode, NO PSE
        MOVNE   r13, #2_00000100                        ; Flag idle, 1 byte mode, NO PSE
        ST      r13, CReg2                              ; So we can see an RxDA if there is one
        MOV     r13, #2_00000000                        ; Disable interupts
        ST      r13, CReg1
        LD      r13, SReg2
        TST     r13, #FrameValid
        MakeReceptionError2 EQ
        TST     r13, #RxDA
        BEQ     %10
        LD      r13, RxByte
        STRB    r13, [ r8 ], #1
        DECS    r9
10
        TurnAroundDelay r8, r11, r13
        ADR     r13, NextJump                           ; The data fitted in the buffer and all is well
        LDR     pc, [ r13 ]

        ALIGN   $Alignment
CheckScoutBuffer ROUT
        [       DebugFIQ
        LDRNE   r11, =Border_Green
        ADR     r13, VIDC
        STR     r11, [ r13, #0 ]
        ]
        RSB     r9, r9, #?ScoutBuffer                   ; The number of bytes now in the scout buffer
        SUBS    r9, r9, #4                              ; Now the actual number of data bytes received
        BLT     Reset                                   ; FrameDiscontinue ; ReceptionError
        LDR     r11, RxCBList
        LDRB    r13, ScoutBuffer + 3                    ; Destination port
        TEQ     r13, #0                                 ; Is this an immediate operation ??
        BEQ     RxImmediate
CheckRxCB
        TEQ     r11, #NIL                               ; Scan RxCBs for a match
        BEQ     Reset                                   ; FrameDiscontinue ; ReceptionError
        LDRB    r13, [ r11, #Offset_RxStation ]         ; Check the station number first
        TEQ     r13, #255                               ; Wild, skip to check network
        BEQ     %05
        LDRB    r10, ScoutBuffer + 0                    ; Source station
        TEQ     r10, r13
        BNE     TryNextRxCB
05
        LDRB    r13, [ r11, #Offset_RxNetwork ]         ; Now check net number
        TEQ     r13, #255                               ; Wild, skip to check port
        BEQ     %10
        LDRB    r10, ScoutBuffer + 1                    ; Source network
        TEQ     r10, r13
        BNE     TryNextRxCB
10
        LDRB    r13, [ r11, #Offset_RxPort ]            ; Now check port
        TEQ     r13, #255                               ; Wild, skip to check status
        BEQ     %20
        LDRB    r10, ScoutBuffer + 3                    ; Destination port
        TEQ     r10, r13
        BNE     TryNextRxCB
20
        LDRB    r13, [ r11, #Offset_Status ]            ; Now check status
        TEQ     r13, #Status_RxReady
TryNextRxCB
        LDR     r10, HardwareAddress                    ; Always branched to with BNE, because something didn't match
        BEQ     ScoutMatch                              ; This branch taken on the TEQ above
        LDR     r11, [ r11, #Offset_Link ]
        B       CheckRxCB

ScoutMatch
        LD      r13, RxMode
        TST     r13, #BroadcastBit
        BNE     RxBroadcast

        MOV     r13, #Status_Receiving
        STRB    r13, [ r11, #Offset_Status ]
        LDR     r13, ScoutBuffer + 0                    ; Source Station, Network, Control, Port
        STRB    r13, [ r11, #Offset_Station ]
        MOV     r13, r13, ASR #8
        STRB    r13, [ r11, #Offset_Network ]
        MOV     r13, r13, ASR #8
        STRB    r13, [ r11, #Offset_Control ]
        MOV     r13, r13, ASR #8
        STRB    r13, [ r11, #Offset_Port ]
        ST      r11, Record

        SetFIQ  TxFromMe, r8, r13, Long
        SetJump WaitForData, r8, r13

        MOV     r13, #2_11100111                        ; RTS, CLRTxST, CLRRxST, FlagIdle, 2Byte, PSE
        ST      r13, CReg2
        MOV     r13, #2_01000100                        ; RxRS, TxIE
        ST      r13, CReg1
        RTFIQ

        ALIGN   $Alignment
WaitForData                                             ; Shared with reception of Poke
        [       {FALSE} ; DebugFIQ
        ADR     r8, DebugSpacePointer
        LDR     r9, [ r8, #0 ]
        TEQ     r9, #0
        LDRNEB  r13, SReg1
        STRNEB  r13, [ r9 ], #1
        LDRNEB  r13, SReg2
        STRNEB  r13, [ r9 ], #1
        CMP     r9, #DebugSpaceEnd
        MOVCS   r9, #0
        STR     r9, [ r8, #0 ]
        ]
        SetJump EndOfData, r8, r13
        MOV     r13, #2_00111111                        ; -RTS, ClrRxST, TxLast, FC, FlagIdle, 2Byte, PSE
        ST      r13, CReg2
        WaitForFIQ r8, r9
        [       DebugFIQ
        LDR     r8, =Border_Red
        ADR     r9, VIDC
        STR     r8, [ r9, #0 ]
        ]
        LD      r13, SReg1
        TST     r13, #FrameComplete
        MakeReceptionError EQ
        MOV     r13, #2_10000010                        ; TxRS, RxIE
        ST      r13, CReg1
        WaitForFIQ r8, r9
        LD      r13, SReg2
        [       DebugFIQ
        ADR     r8, DebugSpacePointer
        LDR     r9, [ r8, #0 ]
        TEQ     r9, #0
        STRNEB  r13, [ r9 ], #1
        CMP     r9, #DebugSpaceEnd
        MOVCS   r9, #0
        STR     r9, [ r8, #0 ]
        ]
        TST     r13, #AddressPresent
        [       DebugFIQ
        LDRNE   r8, =Border_Green
        LDREQ   r8, =Border_Pink
        ADR     r9, VIDC
        STR     r8, [ r9, #0 ]
        ]
        MakeReceptionError2 EQ
        LD      r13, RxByte
        LD      r8, LocalStation
        TEQ     r13, r8
        MakeReceptionError NE
        WaitForFIQ r8, r9
        [       DebugFIQ
        LDR     r8, =Border_Yellow
        ADR     r9, VIDC
        STR     r8, [ r9, #0 ]
        ]
        LD      r13, SReg2
        TST     r13, #RxDA
        MakeReceptionError2 EQ
        LD      r13, RxByte
        TEQ     r13, #0                                 ; Local network must be zero
        MakeReceptionError NE
        WaitForFIQ r8, r9
        LD      r13, SReg2
        TST     r13, #RxDA
        MakeReceptionError2 EQ
        LD      r13, RxByte
        LDRB    r8, [ r11, #Offset_Station ]
        TEQ     r13, r8
        MakeReceptionError NE
        LD      r13, RxByte
        LDRB    r8, [ r11, #Offset_Network ]
        TEQ     r13, r8
        MakeReceptionError NE
        SetFIQ  BufferData, r8, r13, Long
        ADD     r11, r11, #Offset_Start
        LDMIA   r11, { r8, r9 }                         ; Start & Length
        RTFIQ

        ALIGN   $Alignment
EndOfData
        LD      r11, Record
        LDR     r8, [ r11, #Offset_Size ]               ; The original size
        SUB     r9, r8, r9                              ; The number of bytes received
        STR     r9, [ r11, #Offset_RxSize ]             ; Mark reception so client can find out

        SetFIQ  TxFromMe, r8, r9, Long
        SetJump EndOfData2, r8, r9
        MOV     r13, #2_11100111                        ; RTS, CLRTxST, CLRRxST, FlagIdle, 2Byte, PSE
        ST      r13, CReg2
        [       Analyser
        MOV     r13, #2_01000101                        ; RxRS, TxIE, AC=1
        ST      r13, CReg1
        MOV     r13, #2_10000000                        ; +DTR, NONLOOP
        ST      r13, CReg3
        [       DebugFIQ
        LDR     r8, =Border_Magenta
        ADR     r9, VIDC
        STR     r8, [ r9, #0 ]
        ]
        ]
        MOV     r13, #2_01000100                        ; RxRS, TxIE, AC=0
        ST      r13, CReg1
        RTFIQ

        ALIGN   $Alignment
EndOfData2
        MOV     r13, #2_00111111                        ; -RTS, ClrRxST, TxLast, FC, FlagIdle, 2Byte, PSE
        ST      r13, CReg2
        WaitForFIQ r8, r13
        LD      r13, SReg1
        TST     r13, #FrameComplete
        MakeReceptionError EQ
CompleteReception
        MOV     r13, #Status_Received
        STRB    r13, [ r11, #Offset_Status ]
CauseEventAndReset
        LD      r13, EventSequenceNumber
        INC     r13
        ST      r13, EventSequenceNumber
        STR     r13, [ r11, #Offset_Event ]
CauseInterruptAndReset
        MOV     r11, #IOC
        LDRB    r13, [ r11, #IOCIRQMSKA ]               ; IRQ Mask register
        ORR     r13, r13, #force_bit                    ; FIQ to IRQ down-grade
        STRB    r13, [ r11, #IOCIRQMSKA ]               ; IRQ Mask register
        B       Reset

RxBroadcast
        LDR     r13, [ r11, #Offset_Size ]              ; Check that the user's buffer is big enough
        CMP     r9, r13                                 ; Actual size of reception
        MakeReceptionError GT
        MOV     r13, #Status_Receiving
        STRB    r13, [ r11, #Offset_Status ]
        STR     r9, [ r11, #Offset_RxSize ]
        ADR     r12, ScoutBuffer
        LDR     r13, [ r12 ], #4                        ; Source station, net, control and port
        ; R12 now pointing at the actual data
        STRB    r13, [ r11, #Offset_Station ]
        MOV     r13, r13, ASR #8
        STRB    r13, [ r11, #Offset_Network ]
        MOV     r13, r13, ASR #8
        BIC     r13, r13, #BitSeven
        STRB    r13, [ r11, #Offset_Control ]
        MOV     r13, r13, ASR #8
        STRB    r13, [ r11, #Offset_Port ]
        LDR     r8, [ r11, #Offset_Start ]
        ; At this point the register useage is as follows;
        ; R8  is the destination address, doesn't need to be preserved
        ; R9  is the length, in bytes, of the copy required
        ; R10 is free, it is set to its usual value by "CauseInterruptAndReset"
        ; R11 is a pointer to the receive record, not stored in "Record"
        ; R12 is the source address, known to be word aligned, see R10
        ; R13 is free
        TEQ     r9, #0
        BEQ     CompleteReception
        LDR     r10, [ r12 ], #4                        ; Get the first byte(s)
        TST     r8, #3                                  ; Check for alignment
        BEQ     CopyAlignmentZero
        STRB    r10, [ r8 ], #1                         ; Copy the first byte
        DECS    r9
        BEQ     CompleteReception                       ; There was only one byte
        MOV     r10, r10, LSR #8
        TST     r8, #3                                  ; Check for alignment
        BEQ     CopyAlignmentOne
        STRB    r10, [ r8 ], #1                         ; Copy the second byte
        DECS    r9
        BEQ     CompleteReception                       ; There were only two bytes
        MOV     r10, r10, LSR #8
        TST     r8, #3                                  ; Check for alignment
        BEQ     CopyAlignmentTwo
        STRB    r10, [ r8 ], #1                         ; Copy the third byte
        DECS    r9
        BEQ     CompleteReception                       ; There were only three bytes
        MOV     r10, r10, LSR #8

CopyAlignmentThree                                      ; There is one byte left in R10
        LDR     r13, [ r12 ], #4
        ADD     r10, r10, r13, LSL #8                   ; Add in the next three bytes
        CMP     r9, #3
        BLT     CompleteCopy
        STR     r10, [ r8 ], #4
        DEC     r9, 4
        MOV     r10, r13, LSR #24
        B       CopyAlignmentThree

CopyAlignmentTwo                                        ; There are two bytes left in R10
        LDR     r13, [ r12 ], #4
        ADD     r10, r10, r13, LSL #16                  ; Add in the next two bytes
        CMP     r9, #3
        BLT     CompleteCopy
        STR     r10, [ r8 ], #4
        DEC     r9, 4
        MOV     r10, r13, LSR #16
        B       CopyAlignmentTwo

CopyAlignmentOne                                        ; There are three bytes left in R10
        LDR     r13, [ r12 ], #4
        ADD     r10, r10, r13, LSL #24                  ; Add in the next byte
        CMP     r9, #3
        BLT     CompleteCopy
        STR     r10, [ r8 ], #4
        DEC     r9, 4
        MOV     r10, r13, LSR #8
        B       CopyAlignmentOne

CopyAlignmentZero                                       ; There are four bytes left in R10
        CMP     r9, #3
        BLT     CompleteCopy
AlignmentZeroLoop
        STR     r10, [ r8 ], #4
        LDR     r10, [ r12 ], #4
        DEC     r9, 4
        CMP     r9, #3
        BGE     AlignmentZeroLoop

CompleteCopy                                            ; There are 0, 1, 2, or 3 bytes left to go, data is in R10
        TEQ     r9, #0                                  ; No bytes left?
        STRNEB  r10, [ r8 ], #1                         ; No, so store one
        SUBNES  r9, r9, #1                              ; Was that the last one?
        MOVNE   r10, r10, LSR #8                        ; No get the next byte
        STRNEB  r10, [ r8 ], #1                         ; And store it
        SUBNES  r9, r9, #1
        MOVNE   r10, r10, LSR #8
        STRNEB  r10, [ r8 ], #1
        B       CompleteReception

RxImmediate
        [       DebugFIQ
        LDR     r8, =Border_Pink
        ADR     r11, VIDC
        STR     r8, [ r11, #0 ]
        ]
        ADRL    r11, ImmediateRecord
        ST      r11, Record
        MOV     r8, #Status_Receiving
        STRB    r8, [ r11, #Offset_Status ]
        LDR     r8, ScoutBuffer + 0                     ; Station
        STRB    r8, [ r11, #Offset_Station ]
        MOV     r8, r8, ASR #8
        STRB    r8, [ r11, #Offset_Network ]
        MOV     r8, r8, ASR #8                          ; Control, Port is always zero
        STRB    r8, [ r11, #Offset_Control ]
        DEC     r8                                      ; Make base of Immediates &80 not &81
        AND     r8, r8, #2_00011111                     ; Clear the top bits [ 0..31 ]
        LD      r9, LockOut
        LD      r13, Protection
        ORR     r13, r13, r9                            ; Add in the lock out state
        MOV     r13, r13, ASR r8                        ; Put relevant protection bit in bit zero
        TST     r13, #BitZero
        MakeReceptionError NE                           ; That operation was protected
        CMP     r8, #( ( ImmediateEnd - ImmediateJumpTable ) / 4 )
        ADDLT   pc, pc, r8, ASL #2
        B       Reset                                   ; That operation we have no implementation for yet
ImmediateJumpTable
        B       RxPeekData                              ; &81
        B       RxPokeData                              ; &82
        B       RxJSR                                   ; &83
        B       RxUserRPC                               ; &84
        B       RxSystemRPC                             ; &85
        B       RxHalt                                  ; &86
        B       RxContinue                              ; &87
        B       RxMachinePeek                           ; &88
        B       RxGetRegisters                          ; &89
ImmediateEnd

RxPeekData                                              ; &81
        SetJump TxStartData, r9, r13, Long
        B       ValidatePeekPokeAddress

RxPokeData                                              ; &82
        SetJump WaitForData, r9, r13                    ; Share with normal reception
ValidatePeekPokeAddress
        ADR     r8, ScoutBuffer + 4                     ; Start, End
        LDMIA   r8, { r8, r9 }
        STR     r8, [ r11, #Offset_Start ]
        SUB     r9, r9, r8                              ; Size = End - Start
        STR     r9, [ r11, #Offset_Size ]

        MOV     r8, #-1
	ST	r8, PeekPokeFlag			; Set flag

        MOV     r8, #IOC
        LDRB    r13, [ r8, #IOCIRQMSKA ]                ; IRQ Mask register
        ORR     r13, r13, #force_bit                    ; FIQ to IRQ down-grade
        STRB    r13, [ r8, #IOCIRQMSKA ]                ; IRQ Mask register
        SetFIQ  TxFromMe, r9, r13, Long
        RTFIQ

RxJSR                                                   ; &83
RxUserRPC                                               ; &84
RxSystemRPC                                             ; &85
        SetFIQ  TxFromMe, r8, r9
        SetJump WaitForArguments, r8, r9
        MOV     r13, #2_11100111                        ; RTS, CLRTxST, CLRRxST, FlagIdle, 2Byte, PSE
        ST      r13, CReg2
        MOV     r13, #2_01000100                        ; RxRS, TxIE
        ST      r13, CReg1
        RTFIQ                                           ; Goes off to TxFromMe, then goes to WaitForArguments

        ALIGN   $Alignment
WaitForArguments
        MOV     r13, #2_00111111                        ; -RTS, ClrRxST, TxLast, FC, FlagIdle, 2Byte, PSE
        ST      r13, CReg2
        WaitForFIQ r8, r9
        LD      r13, SReg1
        TST     r13, #FrameComplete
        MakeReceptionError EQ
        MOV     r13, #2_10000010                        ; TxRS, RxIE
        ST      r13, CReg1
        SetJump EndOfArguments, r8, r9                  ; Do this early
        WaitForFIQ r8, r9
        LD      r13, SReg2
        TST     r13, #AddressPresent
        MakeReceptionError2 EQ
        LD      r13, RxByte
        LD      r9, LocalStation
        TEQ     r13, r9
        MakeReceptionError NE                           ; Station number is wrong
        LDR     r13, ScoutBuffer + 4                    ; The JSR address or Procedure number
        ST      r13, ArgumentsAddressOrNumber
        WaitForFIQ r8, r9
        LD      r13, SReg2
        TST     r13, #RxDA
        MakeReceptionError2 EQ                          ; What?
        LD      r13, RxByte
        TEQ     r13, #0                                 ; Local network must be zero
        MakeReceptionError NE                           ; Network number is wrong
        WaitForFIQ r8, r9
        LD      r13, SReg2
        TST     r13, #RxDA
        MakeReceptionError2 EQ                          ; What?
        LD      r13, RxByte
        LDRB    r9, ImmediateRecord + Offset_Station
        TEQ     r13, r9
        MakeReceptionError NE
        LD      r13, RxByte
        LDRB    r9, ImmediateRecord + Offset_Network
        TEQ     r13, r9
        MakeReceptionError NE
        SetFIQ  BufferData, r9, r13, Long
        ADRL    r8, ArgumentsBuffer
        MOV     r9, #?ArgumentsBuffer
        RTFIQ

        ALIGN   $Alignment
EndOfArguments
        RSB     r9, r9, #?ArgumentsBuffer               ; Size of transmission
        STR     r9, ArgumentsSize
        MOV     r13, #2_11100111                        ; RTS, CLRTxST, CLRRxST, FlagIdle, 2Byte, PSE
        ST      r13, CReg2
        MOV     r13, #2_01000100                        ; RxRS, TxIE
        ST      r13, CReg1
        SetFIQ  TxFromMe, r9, r13
        SetJump EndOfArguments2, r9, r13
        RTFIQ

        ALIGN   $Alignment
EndOfArguments2
        MOV     r13, #2_00111111                        ; -RTS, ClrRxST, TxLast, FC, FlagIdle, 2Byte, PSE
        ST      r13, CReg2
        WaitForFIQ r9, r13
        LD      r13, SReg1
        TST     r13, #FrameComplete
        MakeReceptionError EQ
        MOV     r9, #2_000011100                        ; Protect against another immediate op of this class
        ST      r9, LockOut                             ; Set the lock out state
        B       CauseInterruptAndReset

RxHalt                                                  ; &86
RxContinue                                              ; &87
        B       Reset

RxMachinePeek                                           ; &88
        [       DebugFIQ
        LDR     r8, =Border_Red
        ADR     r9, VIDC
        STR     r8, [ r9, #0 ]
        ]
        ADR     r8, MachinePeekData
        MOV     r9, #?MachinePeekData - 1
        B       CommonPeek

RxGetRegisters                                          ; &89
        ADR     r9, Registers
        STMIA   r9!, { r0-r7 }                          ; Using 2x STMs because SASTMhatbroken
        STMIA   r9, { r8-r14 } ^                        ; Put down user R0 to R14
        ADD     r9, r9, #7 * 4                          ; R9 now has address of R15
        SUB     r8, lr, #4                              ; Correct PC
      [ No26bitCode
        STR     r8, [ r9 ], #4                          ; Store R15 (PC), perhaps need RxGetRegisters32 for PSR?
      |
        STR     r8, [ r9 ], #4                          ; Store R15 (PC+PSR)
      ]
        MOV     r7, r9                                  ; Put register block into unbanked register

        WritePSRc I_bit+F_bit+IRQ_mode, r8              ; Go to IRQ Mode
        STMIA   r7!, { r13, r14 }

        WritePSRc I_bit+F_bit+SVC_mode, r8              ; Go to SVC Mode
        STMIA   r7, { r13, r14 }

        WritePSRc I_bit+F_bit+FIQ_mode, r8              ; Go back to FIQ Mode
        ADR     r8, Registers
        LDR     r7, [ r8, #7 * 4 ]                      ; Restore unbanked register
        MOV     r9, #?Registers - 1
CommonPeek
        SetFIQ  TxFromMe, r11, r13
        SetJump TxCommonPeekData, r11, r13
        MOV     r13, #2_11100111                        ; RTS, CLRTxST, CLRRxST, FlagIdle, 2Byte, PSE
        ST      r13, CReg2
        MOV     r13, #2_01000100                        ; RxRS, TxIE
        ST      r13, CReg1
        RTFIQ

TxCommonPeekData ROUT
        LD      r13, SReg1
20
        TSTS    r13, #TxDRA                             ; TDRA OK ?
        MakeNetError EQ

        LDRB    r13, [ r8 ], #1
        ST      r13, TxByte
        SetFIQ  TxData, r11, r13, Long
        RTFIQ

        LTORG

        END
@


4.7
log
@32-bit compatible
Detail:
  Added a veneer to the SWI handler so that internally they can corrupt flags and only on exit are 26 .v. 32 bit differences considered.
  No need to flags preserve the service call handler(s), module init, module finalisation.
  Fix bug in RxGetRegisters, the value in r9 pointing to the register block is a banked FIQ mode register, so the IRQ r13/r14 and SVC r13/r14 would be written whereever the unbanked r9 happened to be pointing. May also be worth considering adding a RxGetRegisters32 so the extra PSR fields can be read (not done).
  Changed references to ADR rN, IOC to MOV rN, #IOC.
  For OS_Byte calls use names from Hdr:OsBytes.
  Fix for lock up in SetTicker. If Service_ClaimFIQ were to return an error, the function returned without re-enabling interrupts. Extra PLP inserted.
  Removed manual NOPs after PSR fiddling macros, these are now included in the macro where required with HdrSrc-2_63.
  Delete many unused macros from Macros.s to save having to bother 32 bitting them.
  Made 32 bit write of processor vector (required in a 32 bit configuration on a 26 bit system) conditional on :LNOT:No32bitCode, so it's omitted for machines without MSR/MRS.
Admin:
  Submission from Ian Bradbury, with input from Rob Sprowson.
  Tested with AEH60 NIC on Risc PC with RISC OS 3.71, 4.02, 5.22.
  Tested using motherboard Econet module with RISC OS 3.10 on an A5000.
  For RISC OS 5, requires Podule-1_71 for the NIC address lookup, and also hardwiring a different IOC address (this is not currently looked up at runtime).

Version 5.79. Tagged as 'Econet-5_79'
@
text
@d250 1
a250 1
        MOVGE   r9, #0
d275 1
a275 1
        MOVGE   r9, #0
@


4.6
log
@Add Ursula fast service table, make hardware base common
Added an Ursula fast reject service call table, inspected in !Verma for correctness.
Remove the 'PoduleCapable' switch, since in both cases it boils down to an LDR of the address of the 68B54 controller there's little to choose between it being in the workspace or a constant in ROM.
Changed 2x unaligned loads into LDRB's since only 1 byte values are needed (Commands.s).

Tested on an AEH60 on RISC OS 3.70.

Version 5.77. Tagged as 'Econet-5_77'
@
text
@d362 1
a362 1
        ADR     r11, IOC
d522 1
a522 1
        ADR     r8, IOC
d625 3
a627 2
        STMIA   r9, { r0-r14 } ^                        ; Put down user R0 to R14
        ADD     r9, r9, #15 * 4                         ; R9 now has address of R15
d629 3
d633 10
a642 8
        TEQP    psr, #FFlag + IFlag + IRQ_mode          ; Go to IRQ Mode
        NOP
        STMIA   r9!, { r13, r14 }
        TEQP    psr, #FFlag + IFlag + SVC_mode          ; Go to SVC Mode
        NOP
        STMIA   r9, { r13, r14 }
        TEQP    psr, #FFlag + IFlag + FIQ_mode          ; Go back to FIQ Mode
        NOP
d644 1
@


4.5
log
@Rationalise build switches
Drop support for OldOS (RISC OS 2), it's time to accept MessageTrans does exist now.
Drop support for ARM8, the processor that never was.
Use {TRUE} and {FALSE} objasm built in variables.
Tagged as Econet-5_76-pre2.
@
text
@d208 1
a208 5
        [       PoduleCapable
        LDR     r10, HardwareAddress
        |
        LDR     r10, =EconetController                  ; Always branched to with BNE, because something didn't match
        ]
@


4.4
log
@STRB of PC conditional on StrongARM switch removed.
Assembles OK, not tested.

Version 5.75. Tagged as 'Econet-5_75'
@
text
@d245 1
a245 1
        [       False ; DebugFIQ
a622 4
        [       OldOs
        ADRL    r8, MachineVersionNumber
        MOV     r9, #4 - 1
        |
a624 1
        ]
@


4.3
log
@Assemble with objasm not aasm.
Messages resources now gets both the date and the version from the VersionNum file.

Version 5.74. Tagged as 'Econet-5_74'
@
text
@d39 2
a40 6
      [ StrongARM
	MOV	r13, #1
	ST	r13, FIQBusy				; Can't STRB PC in ARMv4
      |
        ST      pc, FIQBusy                             ; Set the Busy flag, since this is not executed in UserMode
      ]
d522 4
a525 6
      [ StrongARM
        MOV     r8, #1
	ST	r8, PeekPokeFlag			; Can't STRB PC in ARMv4
      |
        ST      pc, PeekPokeFlag                        ; Non zero because of the mode
      ]
@


4.2
log
@Version RO_3_70 taken
@
text
@d230 1
a230 1
        ASR     r13, 8
d232 1
a232 1
        ASR     r13, 8
d234 1
a234 1
        ASR     r13, 8
d387 1
a387 1
        ASR     r13, 8
d389 1
a389 1
        ASR     r13, 8
d392 1
a392 1
        ASR     r13, 8
d410 1
a410 1
        LSR     r10, 8
d416 1
a416 1
        LSR     r10, 8
d422 1
a422 1
        LSR     r10, 8
d487 1
a487 1
        ASR     r8, 8                                   ; Network
d489 1
a489 1
        ASR     r8, 8                                   ; Control, Port is always zero
d640 2
a641 1
        STMIA   r9!, { r0-r14 } ^                       ; Put down user R0 to R14, R9 now has address of R15
@


4.1
log
@Initial revision
@
text
@d39 4
d44 1
d235 1
a235 1
        STRB    r13, [ r11, #Offset_Port ] 
d526 4
d531 1
d645 1
a645 1
        STMIA   r9!, { r13, r14 } 
d648 1
a648 1
        STMIA   r9, { r13, r14 } 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a38 4
      [ StrongARM
	MOV	r13, #1
	ST	r13, FIQBusy				; Can't STRB PC in ARMv4
      |
a39 1
      ]
d230 1
a230 1
        STRB    r13, [ r11, #Offset_Port ]
a520 4
      [ StrongARM
        MOV     r8, #1
	ST	r8, PeekPokeFlag			; Can't STRB PC in ARMv4
      |
a521 1
      ]
d635 1
a635 1
        STMIA   r9!, { r13, r14 }
d638 1
a638 1
        STMIA   r9, { r13, r14 }
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
