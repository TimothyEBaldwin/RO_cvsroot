head	4.3;
access;
symbols
	BBCEconet-0_20:4.3
	BBCEconet-0_19:4.2
	BBCEconet-0_18:4.2
	RO_5_07:4.1
	BBCEconet-0_17:4.1;
locks; strict;
comment	@# @;


4.3
date	2011.10.16.11.56.03;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	hOHIoVjn4jj0mzDv;

4.2
date	2009.05.17.02.53.52;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	2002.11.12.21.14.49;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Fix undefined r6 calling wrong OS_Word.
Move module flags to not immediately after module flag offset.
Fix deprecated POP.
Swap mySHIFT for longhand form.

Version 0.20. Tagged as 'BBCEconet-0_20'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        TTL     A veneer for Econet/NetFS/NetPrint to look like NFS/ANFS ==> Module

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Debug
        GET     Hdr:ModHand
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:Services
        GET     Hdr:Econet
        GET     Hdr:MsgTrans
        GET     Hdr:Symbols
        GET     Hdr:CPU.Arch

        GET     VersionASM

        SUBT    Module header ==> Networking.BBCEconet.Module

        AREA    |Econet$$Code|, CODE, READONLY, PIC
Origin

        DCD     0 ; Start
        DCD     InitModule - Origin             ; Initialisation
        DCD     KillModule - Origin             ; Finalisation
        DCD     Service - Origin
        DCD     ModuleTitle - Origin
        DCD     HelpString - Origin
        DCD     0 ; UtilsCommands               ; Command Table
        DCD     0 ; MySWIChunkBase
        DCD     0 ; SVCEntry
        DCD     0 ; SWINameTable
        DCD     0
        [ No26bitCode
        DCD     0 ; No messages
        DCD     ModuleFlags - Origin
        ]

        GBLL    ReleaseVersion
ReleaseVersion  SETL True

        [       :LNOT: ReleaseVersion
        InsertDebugRoutines
        ]

MinRxHandle     * 3
MaxRxHandle     * 17

        ^       0, wp ; Store
        Word    TransmitHandle
        Word    LastTxStatus
        Word    RxHandles, MaxRxHandle - MinRxHandle + 1
        ; Compute back to 'begining' of table
ReceiveHandles * RxHandles - (MinRxHandle * 4)

TotalRAMRequired * @@

        GBLL    Debug
Debug   SETL    (:LNOT:ReleaseVersion) :LAND: False

        SUBT    Module entry stuff
        OPT     OptPage
ModuleTitle
        DCB     "BBCEconet",0
        ALIGN

        [ No26bitCode
ModuleFlags
        DCD     ModuleFlag_32bit
        ]
        
HelpString
        DCB     "BBCEconet", 9, "$Module_HelpVersion"
        DCB     0
        ALIGN

        SUBT    Initialisation code
        OPT     OptPage

InitModule ROUT
        Push    "r0-r4, lr"
        LDR     r2, [ r12 ]
        TEQ     r2, #0
        BNE     StoreClaimed
        [       Debug
        DLINE   "BBCEconet - Init"
        ]
        MOV     r0, #0
        MOV     r1, #-1
        SWI     XEconet_SetProtection           ; Do a read to discover if Econet is there
        BVS     EconetError
        MOV     r0, #ModHandReason_Claim
        LDR     r3, =:INDEX: TotalRAMRequired
        SWI     XOS_Module
        BVS     ExitInitialisation
        STR     r2, [ r12 ]
StoreClaimed
        MOV     wp, r2
        [       Debug
        DLINE   "BBCEconet - Init"
        ]
        ; Now the stuff which just requires zeroing
        MOV     r0, #0
        MOV     r1, wp                          ; Start of variables
        ADR     r2, TotalRAMRequired
InitialisationLoop
        STR     r0, [ r1 ], #4                  ; It should be all words
        TEQ     r1, r2
        BNE     InitialisationLoop
ClaimVectors
        MOV     r0, #ByteV
        ADRL    r1, OsByte
        MOV     r2, wp
        SWI     XOS_Claim
        MOVVC   r0, #WordV
        ADRL    r1, OsWord
        MOV     r2, wp
        SWIVC   XOS_Claim
ExitInitialisation
        STRVS   r0, [ sp ]
        Pull    "r0-r4, pc"

EconetError
        LDR     r14, [ r0 ]
        LDR     r3, =ErrorNumber_NoSuchSWI
        TEQ     r14, r3
        ADREQ   r0, ErrorNoEconet
        MOVEQ   r1, #0
        MOVEQ   r2, #0
        SWIEQ   XMessageTrans_ErrorLookup
        B       ExitInitialisation

ErrorNoEconet
        DCD     ErrorNumber_NoEconet
        DCB     "NoEco", 0
        ALIGN

ServiceTable
        DCD     0
        DCD     ServiceDecoding - Origin
        DCD     Service_Reset
        DCD     0
        DCD     ServiceTable - Origin

Service         ROUT
        MOV     r0, r0                          ; I have a service call table
        TEQ     r1, #Service_Reset
        MOVNE   pc, lr
ServiceDecoding
        Push    "r0-r4, lr"
        LDR     wp, [ r12 ]
        MOV     r0, #253                        ; Now check reset was NOT hard
        MOV     r1, #0
        MOV     r2, #255
        SWI     XOS_Byte                        ; Read last reset type, only do reset when it was soft
        TEQ     r1, #0
        BEQ     ClaimVectors
        Pull    "r0-r4, pc"

KillModule      ROUT
        ; Totally ignore all errors in this section
        Push    "r0-r2, lr"
        LDR     wp, [ r12 ]
        [       Debug
        DLINE   "BBCEconet - Finalise"
        ]
        MOV     r0, #ByteV
        ADRL    r1, OsByte
        MOV     r2, wp
        SWI     XOS_Release
        [       Debug
        DLINE   "BBCEconet - OsByte released"
        ]
        MOV     r0, #WordV
        ADRL    r1, OsWord
        MOV     r2, wp
        SWI     XOS_Release
        [       Debug
        DLINE   "BBCEconet - OsWord released"
        ]
        LDR     r0, TransmitHandle
        [       Debug
        DREG    r0, "Abandon Tx &"
        ]
        SWI     XEconet_AbandonTransmit
        [       Debug
        DLINE   "BBCEconet - Transmit abandoned"
        ]
        ADR     r1, ReceiveHandles
        MOV     r2, #MinRxHandle
AbandonNextReceiveHandle
        LDR     r0, [ r1, r2, ASL #2 ]
        SWI     XEconet_AbandonReceive
        [       Debug
        DLINE   "BBCEconet - Receive abandoned"
        ]
        INC     r2
        CMP     r2, #MaxRxHandle + 1
        BLE     AbandonNextReceiveHandle
        [       Debug
        DLINE   "BBCEconet - Finalise finished"
        ]
        CLRV                           ; Note that this can't fail
        Pull    "r0-r2, pc"
        
        LTORG
        GET     Interface.s
        END
@


4.2
log
@  Build fix
Detail:
  This module uses the LDW macro, so now it needs to include Hdr:CPU.Arch
  to decide whether to use ARMv6 optimisations
Admin:
  Untested, but should be safe

Version 0.18. Tagged as 'BBCEconet-0_18'
@
text
@d50 1
a50 3
        DCD     Flags - Origin
Flags
        DCD     ModuleFlag_32bit
d81 5
@


4.1
log
@Changed to get version number from VersionASM,Time+Data and MkRelease
eliminated.
Change to use objasm,renamed "Module" to "BBCEconet" so common Makefile
can be used.
Added high speed service call decoding table and 32 bit flags.

Version 0.17. Tagged as 'BBCEconet-0_17'
@
text
@d28 1
@

