head	4.4;
access;
symbols
	RO_5_07:4.4
	NetStatus-2_09:4.4
	NetStatus-2_08:4.3
	NetStatus-2_07:4.2
	Ursula_merge:4.1.1.1
	Ursula_13May1998_merge:4.1.1.1.2.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	Ursula_bp:4.1.1.1
	Ursula:4.1.1.1.0.6
	Ursula_13May1998_bp:4.1.1.1
	Ursula_13May1998:4.1.1.1.0.2
	rthornb_UrsulaBuild_01May1998:4.1.1.1.2.1
	Daytona:4.1.1.1.0.4
	Daytona_bp:4.1.1.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2003.01.17.17.34.07;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	99.08.17.20.25.06;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.08.17.19.16.46;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.56;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.56;	author nturton;	state Exp;
branches
	4.1.1.1.2.1;
next	;

4.1.1.1.2.1
date	98.04.16.10.40.21;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.23.25.41;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@32-bit compatible.

Version 2.09. Tagged as 'NetStatus-2_09'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > &.Arthur.NetStatus.NetStatus

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:Econet
        GET     Hdr:Hourglass
        GET     Hdr:Services
        GET     Hdr:Debug
	GET	Hdr:Machine.<Machine>
        GET     Hdr:CMOS
        GET     Hdr:Symbols

	GET	VersionASM

	GBLL	ReleaseVersion
ReleaseVersion SETL	True

        GBLL    Debug
Debug   SETL    False

;===================================================================
;
; Instance Data - kept in RMA Heap blocks
;
;===================================================================
        ^ 0, wp

FirstWord       Word 0          ; Unused - a placeholder for allocating space

TotalSize       Word            ; OK. only one word today, but who knows ???
DepthSize       Word            ; The depth at which this size started
Depth           Word            ; The current invocation depth
OldColours      Word 2          ; Previous colours
AllowColour     Word            ; -1 ==> No

LastWord        Word 0          ; Unused - a placeholder for allocating space

ReceiveLED      * 1
TransmitLED     * 2
WaitLED         * 3

BroadcastLoadColour1    *       &0000FF00       ; Green
BroadcastLoadColour3    *       &00FF0000       ; Blue
BroadcastSaveColour1    *       &000000FF       ; Red
BroadcastSaveColour3    *       &00FF0000       ; Blue

;=========================================================================
;
; The RM header
;
; As laid down by the founding fathers
;
;=========================================================================

        AREA    |NetStatus$$Code|,CODE,READONLY,PIC

Origin  DCD     0 ; StartCode
        DCD     InitialisationCode - Origin
        DCD     FinalisationCode - Origin
        DCD     ServiceCall - Origin
        DCD     TitleString - Origin
        DCD     HelpString - Origin
        DCD     0 ; HelpAndCommandKeywordTable
        [       :LNOT:No32bitCode
        DCD     0 ; SwiChunk
        DCD     0 ; SwiHandler
        DCD     0 ; SwiNameTable
        DCD     0 ; SwiNameCode
        DCD     0 ; MessagesFile
        DCD     ModuleFlags - Origin
        ]

;=========================================================================

TitleString
        =       "NetStatus", 0
HelpString
        =       "NetStatus", 9, "$Module_MajorVersion ($Module_Date)"
        [       Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
        ]
        DCB     0
        ALIGN

        [       :LNOT:No32bitCode
ModuleFlags
        DCD     ModuleFlag_32bit
        ]

        [       (:LNOT: ReleaseVersion) :LAND: Debug
        InsertDebugRoutines
        ]

BroadcastLoadColours
        DCD     BroadcastLoadColour1
        DCD     BroadcastLoadColour3
BroadcastSaveColours
        DCD     BroadcastSaveColour1
        DCD     BroadcastSaveColour3

InitialisationCode ROUT
;=================
; claim some workspace
        MOV     r6, lr
        LDR     r2, [ r12 ]
        CMP     r2, #0                          ; Clears V
        BNE     OnlyInitDontClaim
        MOV     r0, #ModHandReason_Claim        ; we need this much free space
        MOV     r3, #(LastWord - FirstWord)
        SWI     XOS_Module                      ; claim RMA
        STRVC   r2, [ r12 ]                     ; update the private word
OnlyInitDontClaim
        MOVVS   pc, r6
        MOV     wp, r2                          ; now point to my workspace
        MOV     r0, #0
        STR     r0, TotalSize
        STR     r0, DepthSize
        STR     r0, Depth
        MOV     r0, #-1
        STR     r0, OldColours
        STR     r0, AllowColour                 ; Don't allow until proven
        MOV     r0, #ReadCMOS
        MOV     r1, #Mode2CMOS
        SWI     XOS_Byte                        ; Get the CMOS byte
        BVS     ClaimVector                     ; Ignore error, disallow colour
        TST     r2, #BitSeven                   ; Our bit is 1 for enable
        [       Debug
        BREG    r2, "CMOS byte = &"
        ]
        BEQ     ClaimVector                     ; Our bit is clear
        MOV     r0, #ModHandReason_LookupName
        ADR     r1, HourglassNameString         ; The "Hourglass" is what we want
        SWI     XOS_Module                      ; Get its address
        MOVVS   pc, r6
        LDR     r0, [ r3, #20 ]                 ; Offset of the help string
        ADD     r3, r3, r0                      ; Address of the help string
        ADD     r3, r3, #9                      ; Should be the address of the TAB
        LDRB    r0, [ r3 ], #1                  ; Get the TAB
        TEQ     r0, #9                          ; Is it a TAB character
        BNE     ClaimVector                     ; No, so disallow
        LDRB    r0, [ r3 ], #1                  ; Get the first digit of the version
        CMP     r0, #"2"                        ; Test for "2"
        BLT     ClaimVector                     ; Outrageously old version
        LDRB    r0, [ r3 ], #1                  ; Get the decimal point character
        TEQ     r0, #"."                        ; Test for "2."
        BNE     ClaimVector                     ; No, so disallow
        MOV     r0, #10                         ; Read in a base 10 number
        MOV     r1, r3                          ; From after the decimal point
        SWI     XOS_ReadUnsigned
        BVS     ClaimVector                     ; Ignore error, disallow colour
        CMP     r2, #5                          ; Version 2.05 is the first to support colour
        MOVGE   r0, #0
        STRGE   r0, AllowColour
ClaimVector
        [       Debug
        LDR     r0, AllowColour
        DREG    r0, "AllowColour = &"
        ]
        MOV     r0, #EconetV
        ADR     r1, MyEconetV
        MOV     r2, wp
        SWI     XOS_Claim
        MOV     pc, r6

HourglassNameString
        DCB     "Hourglass", 0
        ALIGN

FinalisationCode ROUT
;===============
; Must preserve r7-r11 and r13
; Only die if we have nothing to support
        MOV     r6, lr
        MOV     r0, #EconetV
        ADR     r1, MyEconetV
        LDR     r2, [ r12 ] ; Get address of my workspace
        SWI     XOS_Release
        RETURNVC

ServiceTable
        DCD     0
        DCD     ServiceMain - Origin
        DCD     Service_Reset
        DCD     0

        DCD     ServiceTable - Origin
ServiceCall ROUT
;==========
        MOV     r0, r0
        TEQ     r1, #Service_Reset
        MOVNE   pc, lr         ; ignore all other service calls
ServiceMain
        Push    "r0-r2, lr"
        MOV     r0, #253       ; Now check reset was NOT hard
        MOV     r1, #0
        MOV     r2, #255
        SWI     XOS_Byte ; Read last reset type, only do reset when it was soft
        TEQ     r1, #0
        MOVEQ   r0, #EconetV
        ADREQ   r1, MyEconetV
        LDREQ   r2, [ r12 ] ; Address of workspace
        SWIEQ   XOS_Claim
        Pull    "r0-r2, pc"

;===================================================================
;
MyEconetV ROUT
;
;===================================================================
        Push    "r0-r2, lr"
        [       Debug
        DREG r0, "NS: R0 = &", cc
        DREG r1, "  R1 = &"
        ]
        CLRV
        ANDS    r2, r0, #2_00000011     ; Get the bottom two bits
        BNE     %10
        SWI     XHourglass_On           ; It ended 2_xx00
        BVS     ExitWithError
        LDR     r0, Depth
        INC     r0
        STR     r0, Depth
        B       FunctionCheck
10
        TEQ     r2, #2
        BNE     %20
        SWI     XHourglass_Off          ; It ended 2_xx10
        BVS     ExitWithError
        LDR     r0, Depth
        SUBS    r1, r0, #1
        MOVMI   r1, #0                  ; Don't go past zero
        STRPL   r1, Depth               ; Don't store -ve; we've been called badly
        B       FunctionCheck
20
        TEQ     r2, #1
        BNE     Exit                    ; No codes end in 3
        LDR     r0, Depth
FunctionCheck
        LDR     r14, [ sp, #0 ]         ; Passed R0
        TEQ     r14, #NetFS_StartWait
        TEQNE   r14, #NetFS_FinishWait
        BEQ     LowLevelFunction
        CMP     r14, #&A0               ; Is it a hi-level thing ?
        BLO     HighLevelFunction
LowLevelFunction                        ; It's a low level Xmit/Rcv/Wait operation
        MOV     r1, #WaitLED            ; assume it's a wait
        CMP     r14, #&C0
        MOVHS   r1, #TransmitLED        ; now assume a transmit
        CMP     r14, #&D0
        MOVHS   r1, #ReceiveLED         ; it must be a receive

        TEQ     r2, #2                  ; Is this a ...Finish
        MOVEQ   r0, #0                  ; Yes, turn LEDs off
        MOVNE   r0, r1                  ; No, set LEDs as computed
        MOV     r1, #0                  ; NewState := (OldState AND r1) EOR r0
        [       Debug
        DREG r0, "LEDs become = &"
        ]
        SWI     XHourglass_LEDs
        B       ExitWithError

HighLevelFunction
        ;       It a Load/Save/Create etc. operation
        ;       R0 ==> Current value of Depth
        ;       R1 ==> The size parameter as passed
        ;       R2 ==> [ 0..2 ] function type
        [       Debug
        DREG r0, "Depth = &"
        ]
        CLRV
        TEQ     r2, #2                  ; Is this a ...Finish
        BNE     %30                     ; No, check for other cases
        LDR     r2, DepthSize           ; Get the current operation level
        [       Debug
        DREG r2, "DepthSize = &"
        ]
        TEQ     r0, r2                  ; Are we at that level?
        MOVEQ   r2, #0                  ; If yes
        STREQ   r2, DepthSize           ; Show that no operation is current
        TEQ     r0, #1                  ; Is this the first level?
        BNE     Exit                    ; No, so nothing more to do
        LDR     r0, AllowColour
        CMP     r0, #-1
        LDRNE   r0, OldColours
        CMPNE   r0, #-1
        BEQ     Exit                    ; No colours to restore, or not allowed
        LDR     r1, OldColours + 4
        MOV     r14, #-1
        STR     r14, OldColours
        SWI     XHourglass_Colours
        B       ExitWithError
30
        TEQ     r2, #0                  ; Is this a ...Start
        BNE     %40                     ; No, so it must be a ...Part
        LDR     r2, DepthSize           ; Is there an operation current?
        [       Debug
        DREG r2, "DepthSize = &"
        ]
        TEQ     r2, #0
        BNE     Exit
        STR     r0, DepthSize           ; There isn't a current operation
        STR     r1, TotalSize           ; So set these values
        TEQ     r0, #1                  ; Have we got our first call?
        BNE     %35
        LDR     r0, AllowColour
        CMP     r0, #-1
        BEQ     Exit                    ; Colour ops disallowed
        LDR     r0, [ sp, #0 ]          ; Passed R0
        TEQ     r0, #NetFS_StartBroadcastLoad
        TEQNE   r0, #NetFS_StartBroadcastSave
        BNE     %35                     ; We aren't doing a coloured op
        TEQ     r0, #NetFS_StartBroadcastLoad
        ADREQ   r14, BroadcastLoadColours
        ADRNE   r14, BroadcastSaveColours
        LDMIA   r14, { r0, r1 }
        SWI     XHourglass_Colours
        ADRVC   r14, OldColours
        STMVCIA r14, { r0, r1 }
35
        MOV     r1, #0                  ; assume zero of it done so far
        B       SizeIsZero              ; So set an appropriate percentage
40
        LDR     r2, DepthSize           ; Get the current operation level
        [       Debug
        DREG r2, "DepthSize = &"
        ]
        TEQ     r0, r2                  ; Are we at that level?
        BNE     Exit                    ; No, so nothing to do
        MOV     r0, #100                ; Multiply by 100 so DIV yeilds a percentage
        MUL     r2, r1, r0
        LDR     r1, TotalSize
        CMP     r1, #0                  ; ignore DIV if Total Size = 0
        BEQ     SizeIsZero              ; we just setup zero %
        DivRem  r0, r2, r1, r14
SizeIsZero
        SWI     XHourglass_Percentage
ExitWithError
        STRVS   r0, [ sp ]
Exit
        Pull    "r0-r2, pc"

        END
@


4.3
log
@Sorted out untidiness in s.Module (use of TAB instead of 9)

Version 2.08. Tagged as 'NetStatus-2_08'
@
text
@d71 2
d80 8
d95 1
a95 1
      [ Module_MinorVersion <> ""
d97 1
a97 1
      ]
d101 5
d194 1
a194 1
        MOVS    pc, r6
d207 1
a207 1
        MOVNES  pc, lr         ; ignore all other service calls
@


4.2
log
@Merged Ursula_13May1998 branch.
Merged Ursula branch.
Moved to srccommit
Added inclusion of Machine file for new CMOS header.

Version 2.07. Tagged as 'NetStatus-2_07'
@
text
@d84 1
a84 1
        =       "NetStatus", TAB, "$Module_MajorVersion ($Module_Date)"
@


4.1
log
@Initial revision
@
text
@d25 1
d29 4
a32 1
        GET     Time+Date 
d84 5
a88 9
        =       "NetStatus", 9, "2.", CurrentVersion
        [       :LNOT: ReleaseVersion
        =       "/", CurrentIteration
        ]
        =       " (", CurrentDate, ")"
        [       :LNOT: ReleaseVersion
        =       " assembled at ", CurrentTime
        ]
        =       0
d101 1
a101 1
                                                                
d181 7
d190 1
d192 2
a193 1
        MOVNES  pc, lr         ; ignore all other service calls 
d310 1
a310 1
        TEQ     r0, #NetFS_StartBroadcastLoad  
d313 1
a313 1
        TEQ     r0, #NetFS_StartBroadcastLoad  
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@


4.1.1.1.2.1
log
@Ursula service call table added
@
text
@d28 1
a28 1
        GET     Time+Date
d101 1
a101 1

a180 7
ServiceTable
        DCD     0
        DCD     ServiceMain - Origin
        DCD     Service_Reset
        DCD     0

        DCD     ServiceTable - Origin
a182 1
        MOV     r0, r0
d184 1
a184 2
        MOVNES  pc, lr         ; ignore all other service calls
ServiceMain
d301 1
a301 1
        TEQ     r0, #NetFS_StartBroadcastLoad
d304 1
a304 1
        TEQ     r0, #NetFS_StartBroadcastLoad
@
