head	1.10;
access;
symbols
	DHCP-0_23:1.9
	DHCP-0_22:1.8
	RO_5_07:1.7
	DHCP-0_21:1.7
	DHCP-0_20:1.7
	DHCP-0_19:1.7
	DHCP-0_18:1.7
	dellis_autobuild_BaseSW:1.7
	DHCP-0_17:1.7
	DHCP-0_16:1.7
	DHCP-0_15:1.7
	sbrodie_sedwards_16Mar2000:1.6
	DHCP-0_14:1.6
	DHCP-0_13:1.5
	DHCP-0_12:1.5
	dcotton_autobuild_BaseSW:1.7
	DHCP-0_11:1.5
	DHCP-0_10:1.5
	DHCP-0_09:1.5
	DHCP-0_08:1.5
	DHCP-0_07:1.5
	DHCP-0_06:1.4
	DHCP-0_05:1.4
	DHCP-0_04:1.3
	DHCP-0_03:1.2
	DHCP-0_02:1.2
	DHCP-0_01:1.2
	DHCP-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2013.09.04.07.10.40;	author rsprowson;	state dead;
branches;
next	1.9;
commitid	Mw18urjsIckYC54x;

1.9
date	2012.07.20.11.16.56;	author rgriffin;	state Exp;
branches;
next	1.8;
commitid	ut8dDdScdaiycidw;

1.8
date	2012.07.19.10.27.48;	author rgriffin;	state Exp;
branches;
next	1.7;
commitid	MFH9W84jn7sEX9dw;

1.7
date	2000.04.26.14.49.00;	author sbrodie;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.14.12.45.42;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	99.06.28.14.04.08;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	99.06.25.13.24.53;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	99.06.11.15.45.53;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.03.30.12.41.20;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.03.26.16.11.18;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.26.16.11.18;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Makefile recreated from fragments
Renamed dhcpextern.h to DHCP.h so the shared makefiles can export it without needing a different source and target filename.

Version 0.24. Tagged as 'DHCP-0_24'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *  DHCP (dhcp.h)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#ifndef dhcp_h_included
#define dhcp_h_included

#ifdef __cplusplus
extern "C" {
#endif

#ifdef TRACE
//#define trace(x) printf x
#define trace(x) tracef x
extern void tracef(char *format, ...);
#else
#define trace(x) ((void)0)
#endif

#include "dhcpextern.h"

/* protocols/dhcp.h defines the buffer in terms of a structure called BOOTP.
 * We'll typedef this to DHCP to make things clearer - does that actually help?
 */
typedef BOOTP DHCP;

#ifndef __cplusplus
/* Define the structure tags */
typedef struct dhcp_interface dhcp_interface;
#endif

enum dhcprequest_opts {
        dhcprequest_retain_T2,
        dhcprequest_set_T2
};

/* These are the parameters that arrive when the Internet module indicates that
 * a dynamic boot request is about to be broadcast.  The _kernel_swi_regs *
 * is cast to a dhcp_start_params * for passing to dhcp_prepare_request.
 */
typedef struct {
        const int       three;          /* InternetStatus_DynamicBootStart (R0) */
        const int       service;        /* Service_InternetStatus (R1) */
        const char	*ifname;	/* interface name (R2) */
        Dib		*dib;		/* interface DIB (R3) */
        DHCP            *request;       /* the actual request (R4) */
        size_t          request_max;    /* limit of R4 buffer (R5) */
        int             *end_offset;    /* end of options (R6) */
}  dhcp_start_params;


/* This routine is invoked when the dynamic boot start service call arrives.
 * Return one of the two enumeration constants to indicate whether to claim
 * the service call or not - do not attempt to alter the service member of
 * the structure above.
 */
enum {
        dhcp_IGNORE,
        dhcp_CLAIM
};

extern int dhcp_prepare_request(dhcp_start_params *, void *);


/* These is the parameter block that the dispatcher packet dispatcher
 * creates to describe the incoming packet when it wants to pass its
 * details on to the second stage dispatch (dhcp_interpret_reply) and
 * thereafter onto the specific message handlers.
 */
typedef struct {
        const char	*ifname;	/* interface name (R2) */
        Dib		*dib;		/* interface DIB (R3) */
        DHCP            *reply;         /* the actual reply (R4) */
        size_t          reply_len;      /* size of R4 buffer (R5) */
} dhcp_reply_params;


/* This is the pair of incoming dispatchers for DHCP packets */
extern void dhcp_deliver_incoming_packet(DHCP *, void *);
extern void dhcp_interpret_reply(dhcp_interface *, dhcp_reply_params *, void *);


/* These are the handler routines for the outgoing messages.  They
 * are called to trigger their particular message into being sent.
 */
extern void dhcp_discover(dhcp_interface *);
extern void dhcp_request(dhcp_interface *, dhcp_state, enum dhcprequest_opts);
extern void dhcp_decline(dhcp_interface *, const char *);
extern void dhcp_release(dhcp_interface *, const char *);
extern void dhcp_inform(dhcp_interface *);

/* These are the handler routines for the incoming messages.
 * They are called in response to a DHCP reply message arriving
 * in the dispatcher.
 */
extern void dhcp_offer(dhcp_interface *, dhcp_reply_params *);
extern void dhcp_ack(dhcp_interface *, dhcp_reply_params *);
extern void dhcp_nak(dhcp_interface *, dhcp_reply_params *);

/* This handler routine copes with incoming non-DHCP messages
 * which are responses to our DISCOVER messages - ie. the case
 * where a BOOTP server responds to our DHCP request.
 */
extern void bootp_ack(dhcp_interface *, dhcp_reply_params *);

/* This does the necessary work to accept our best "offer" -
 * be it a BOOTP response or a DHCPOFFER.
 */
extern void dhcp_accept_offer(dhcp_interface *);

/* These are the SWI gateways into the internal functions */
extern _kernel_oserror *dhcp_swi_getstate(_kernel_swi_regs *);
extern _kernel_oserror *dhcp_swi_getoption(_kernel_swi_regs *);
extern _kernel_oserror *dhcp_swi_setoption(_kernel_swi_regs *);
extern _kernel_oserror *dhcp_swi_execute(_kernel_swi_regs *, void *);
extern _kernel_oserror *dhcp_swi_inform(_kernel_swi_regs *);

/* The register map for SWI DHCP_Execute */
typedef struct {
        int flags;
        const char *if_name;
	dhcp_state out_status;
} dhcp_swi_execute_regs;

enum dhcp_swi_execute_flags {
        dse_IMMEDIATE_START = 1,
        dse_WAIT_FOR_INTERFACE = 2,
        /* Added by R Griffin 16 Jul 2012	*/
        dse_BLOCKING_MODE = 4,
        dse_ASSIGN_PRIVATE_IP = 8
};

#ifdef __cplusplus
}
#endif

#endif
@


1.9
log
@Fixed data abort on RPi when setting private IP address.
Delete existing address from interface before setting a private one.

Version 0.23. Not tagged
@
text
@@


1.8
log
@Added -p switch to DHCPExecute command, that causes DHCP to assign
a private IP address in the event of DHCP discovery timing out.
Changed DHCP discovery timeout from 10 minutes to 20 seconds.

Version 0.22. Tagged as 'DHCP-0_22'
@
text
@d29 2
a30 2
#define trace(x) printf x
//#define trace(x) tracef x
@


1.7
log
@  New -w option to *DHCPExecute
Detail:
  The -w option is similar to the -block option, except that it waits
    for the interface to appear if it is not already registered with
    the Internet module.  This means that the Internet Startup file
    no longer has to trigger callbacks after loading drivers in order
    to ensure that they are initialised enough for DHCP to start
    using them.
Admin:
  Tested softload on Risc PC.

Version 0.15. Tagged as 'DHCP-0_15'
@
text
@d30 2
d143 4
a146 1
        dse_WAIT_FOR_INTERFACE = 2
@


1.6
log
@  Initial delays are vastly reduced when the DHCP process is invoked
    via *DHCPExecute.
Detail:
  Without this change, it takes an age for desktop machines to boot.
  Particularly my test machine with its three interfaces, each one having
    a random delay of up to 10 seconds before anything actually happens.
Admin:
  Tested in Risc PC.  Does not affect STB builds.

Version 0.14. Tagged as 'DHCP-0_14'
@
text
@d140 2
a141 1
        dse_IMMEDIATE_START = 1
@


1.5
log
@* Added initial delay in INIT-REBOOT state to match INIT state.
* Stopped extra DHCPREQUESTs being generated by ioctl calls in REBOOTING state.
* Don't reject BOOTP packets just because they don't have a cookie. Treat
  those without the correct cookie as containing no options.
* Reject BOOTP packets < 300 bytes, as per RFC 1542.
* Treat BOOTP responses in a more considered fashion - old versions would go
  nuts as soon as they saw any non-DHCP response. BOOTP replies now treated as
  (not very good) offers. BOOTP responses with correct address also accepted
  in REBINDING state.
* Decline DHCPACKs with no server identifier.
* Add server to blacklist if its offer ended up being DHCPDECLINEd for any
  reason.
* Add server to blacklist if we timeout requests.
* Initial boot delay now better randomised (seeded on MAC address), and in the
  range 1-10 seconds, as per RFC 2131.
* Corrected REBOOTING and REQUESTING back-off timers - first retransmission
  was too slow.
* DHCPREQUEST packets now have secs filled in correctly in REBOOTING state.
* Voting rules extended - prefer DHCP servers to BOOTP servers and prefer
  servers providing vendor options to those who don't.

Version 0.07. Tagged as 'DHCP-0_07'
@
text
@d129 1
a129 1
extern _kernel_oserror *dhcp_swi_execute(_kernel_swi_regs *);
d139 3
@


1.4
log
@  Support for DHCPINFORM
  Dynamic leasing behaviour brought in line with DHCP specification
Detail:
  New *-command *DHCPExecute to enable CLI launching of DHCP interface
    control.
  Output of *DHCPInfo tidied up and irrevelant timer info is suppressed.
  The algorithm for deciding which offer to accept (where multiple offers
    are received) has been significantly enhanced (and moved to voting.c)
    If a previous offer from a server has been DHCPNAK'd by something else
    then the server offering the dodgy IP address is blacklisted and will
    no longer be preferred to a server which isn't blacklisted.
  DHCP module will request and prefer offers of an existing IP address
    configuration wherever possible.
  DHCP module will initialise an interface into the INITREBOOT/REBOOTING
    states if it is asked to take control of an interface which has
    already been configured externally.
  IP lease length suggestions are no longer sent in appropriate messages.
    The server is trusted to choose an appropriate value.
  The DHCP module is more careful to insert appropriate options into each
    message.  It is no longer in breach of RFC2131 in this respect.
  Timer values for renew and rebind times are now inferred automatically
    where necessary (server doesn't have to send them) and are now correct.
  DHCPRELEASE and DHCPDECLINE now include a textual message indicating the
    reason for the message's generation.
  Where allowed, outgoing messages contain a client class identifier to
    enable the server to vary configuration information depending on the
    client hardware/software type.  Currently, this information is the
    output of OS_Byte 0.
  In the SWI interface for examining DHCP packets, a pointer to a specific
    packet to examine may be supplied instead of an interface identifier
    (depending on a flag bit)
  New SWI DHCP_Inform for sending DHCPINFORM messages to arbitrary servers
    in order to enable retrieval of configuration information when the IP
    address has been established via other means (eg. from NVRAM).
  DHCP module is now capable of deleting IP addresses from interfaces.
  DHCP module will cede control of an interface if something else changes
    the interface's address and send a message to the server indicating
    that the lease is being relinquished.
  DHCP will trap the Internet (5.26 and later) module's panic service call
    when a duplicate IP address is detected on the network, and resolve
    the situation (send the server DHCPDECLINE and deconfigure the interface
    and restart address discovery) if it was controlling that interface.
  Transaction ID generation improved (uses interface MAC address to
    reduce chance of duplication with other hosts)
  MAC address discovery code added.
  DHCP module attempts to unicast packets wherever possible.
  Retry delays adjusted to conform more closely to spec (RFC2131)
  Possible hole in state table that IPConfig triggered which caused several
    DHCPDISCOVER messages to be sent in succession very quickly has been
    closed.
  Co-operates with Internet 5.26 to ensure that callers of the Internet
    module's BOOTP ioctl are returned sensible error values so that they
    no longer need to probe the DHCP module independently to discover
    whether an interface has been configured successfully or not.
Admin:
  Requires Internet 5.26
  Requires TCPIPLibs 5.19

Version 0.05. Tagged as 'DHCP-0_05'
@
text
@d120 4
@


1.3
log
@  BOOTP server interaction policy change and fix.
Detail:
  If a BOOTP response is received in reply to a DHCPDISCOVER message,
    the DHCP module will no longer ignore it or try to palm it off to
    the Internet module, but will accept it as a valid response (ie.
    as if it were a DHCPACK with an infinite lease offer).
Admin:
  Tested in MPT Ethernet ROM.

Version 0.04. Tagged as 'DHCP-0_04'
@
text
@d102 2
a103 2
extern void dhcp_decline(dhcp_interface *);
extern void dhcp_release(dhcp_interface *);
d126 8
@


1.2
log
@  Integration with IPConfig completed.
  Header export added.
Detail:
  Blocking added to enable IPConfig to work correctly.
  Header file exported containing states and SWI identifiers.
  Brings loopback interface up so that it can bind to the DHCP client
    port (failure to have any AF_INET interfaces configured causes
    the bind() call to fail, even when INADDR_ANY is specified)
  Failure to read ARP cache now treated as a go-ahead to accept the
    IP address rather than a rejection.
  Keeps a copy of Internet BOOTP requests so that the options can
    be copied across to the DHCPDISCOVER if required.
Admin:
  Header export required by Internet 5.21 and IPConfig 0.15
  Requires Internet 5.21.
  Requires TCPIPLibs 5.11.
  Requires IPConfig 0.15.
  Add module after all other expansion card networking modules and
    any attempt to BOOTP will be transparently upgraded to DHCP.


Version 0.01. Tagged as 'DHCP-0_01'
@
text
@d114 6
@


1.1
log
@Initial revision
@
text
@d34 2
a49 15

/* All the states through which an interface binding can pass, from machine
 * initialisation onwards.  Lots of the timer related states won't ever be
 * entered in our infinite-lease-duration world, though.
 */
typedef enum {
        dhcpstate_INIT,
        dhcpstate_SELECTING,
        dhcpstate_REQUESTING,
        dhcpstate_BOUND,
        dhcpstate_RENEWING,
        dhcpstate_REBINDING,
        dhcpstate_INITREBOOT,
        dhcpstate_REBOOTING
} dhcp_state;
@


1.1.1.1
log
@  Fully functional DHCP client.
Detail:
  Implements the Dynamic Host Configuration Protocol (RFC2131 and RFC2132)
  This module usurps the Internet module's implementation of BOOTP in order
    to use the superior DHCP protocol.
Admin:
  Requires Internet 5.20 or later.
    (RiscOS/Sources/Networking/AUN/Internet  tag: Internet-5_20)
  Requires TCPIPLibs 5.09 or later.
    (RiscOS/Sources/Libs/TCPIPLibs  tag: TCPIPLibs-5_09)
  

Tagged as DHCP-0_00

@
text
@@
