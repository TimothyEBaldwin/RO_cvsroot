head	1.4;
access;
symbols
	DHCP-0_27:1.4
	DHCP-0_26:1.4
	DHCP-0_25:1.4
	DHCP-0_24:1.4
	DHCP-0_23:1.4
	DHCP-0_22:1.4
	RO_5_07:1.3
	DHCP-0_21:1.3
	DHCP-0_20:1.3
	DHCP-0_19:1.3
	DHCP-0_18:1.3
	dellis_autobuild_BaseSW:1.3
	DHCP-0_17:1.3
	DHCP-0_16:1.3
	DHCP-0_15:1.3
	sbrodie_sedwards_16Mar2000:1.3
	DHCP-0_14:1.3
	DHCP-0_13:1.3
	DHCP-0_12:1.3
	dcotton_autobuild_BaseSW:1.3
	DHCP-0_11:1.3
	DHCP-0_10:1.3
	DHCP-0_09:1.3
	DHCP-0_08:1.3
	DHCP-0_07:1.3
	DHCP-0_06:1.3
	DHCP-0_05:1.3
	DHCP-0_04:1.2
	DHCP-0_03:1.2
	DHCP-0_02:1.2
	DHCP-0_01:1.2
	DHCP-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2012.07.19.10.27.48;	author rgriffin;	state Exp;
branches;
next	1.3;
commitid	MFH9W84jn7sEX9dw;

1.3
date	99.06.25.13.24.55;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.03.30.12.41.22;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.03.26.16.11.28;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.26.16.11.28;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Added -p switch to DHCPExecute command, that causes DHCP to assign
a private IP address in the event of DHCP discovery timing out.
Changed DHCP discovery timeout from 10 minutes to 20 seconds.

Version 0.22. Tagged as 'DHCP-0_22'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *  DHCP (interfaces.h)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#ifndef dhcpinterfaces_h_included
#define dhcpinterfaces_h_included

#ifdef __cplusplus
extern "C" {
#endif

typedef time_t dhcp_time;
enum {
        dhcp_immediate_action = 0,
        dhcp_infinite_lease = -1,
        dhcp_maximum_lease = -2,
        dhcp_any_lease = -3,

        /* Assert a minimum lease request duration */
        dhcp_minimum_lease_request = 100 * 60 * 5
};

enum {
        blacklist_MAX = 8
};

typedef struct {
        struct in_addr	server[blacklist_MAX];
} dhcp_blacklist;

typedef union {
        struct ifdhcpreq ifd;		/* For DHCP ioctl call */
        struct ifreq ifr;		/* For general interface ioctl calls */
        struct {
                char name[IFNAMSIZ];	/* Interface name */
                struct sockaddr_in sin;	/* an Internet socket address */
        } ifr_in;			/* To avoid casting to sockaddr_in */
} di_ifdhcpreq;

struct dhcp_interface {
        dhcp_interface	*next;		/* Link to next dhcp_interface object */
        dhcp_state	state;		/* current state of the interface */
	Dib		*dib;           /* DIB for which this interface is */
	dhcp_time	request_lease;  /* Lease length to request from server */
	dhcp_time       first_send;     /* Time at which first attempt sent */
	dhcp_time       interval;       /* Current retry interval */
	dhcp_time       t1;             /* Initialisation of re-acquisition */
	dhcp_time       t2;             /* Minor panic - re-acquire from anywhere */
	dhcp_time       kill_if;        /* Time at which to kill the interface */
	dhcp_time	orig_t1;	/* Actual lease renew date */
	dhcp_time	orig_t2;	/* Actual lease rebind date */
	struct in_addr	preferred_ip;	/* The preferred IP address */
	di_ifdhcpreq	req;		/* Interface name and current DHCP buffer */
        DHCP		binding;	/* last DHCPACK message received */
        DHCP 		temp;           /* Temporary buffer to hold a packet */
        DHCP		offer;		/* Best offer so far */
        dhcp_blacklist	blacklist;	/* Nasty servers we don't like */
#define di_dhcp 	req.ifd.packet  /* last packet used by this interface */
#define di_name         req.ifr.ifr_name/* the interface name */
#define di_ifr		req.ifr         /* direct access to ifreq structure */

        /* Added by R Griffin 16 Jul 2012	*/
        unsigned int	flags;
};


extern void interfaces_init(void);
extern void interfaces_discard(void);
extern dhcp_interface *interfaces_find(const char *);
extern dhcp_interface *interfaces_find_by_xid(u_long);
extern dhcp_interface *interfaces_create(const dhcp_start_params *);
extern void interfaces_forget(dhcp_interface *);
extern void interfaces_print_information(const dhcp_interface *);
extern void interfaces_timer_fired(void *);
extern void interfaces_reschedule(void *);
extern int interfaces_current_time(void);
extern dhcp_time interfaces_random_delay(int);
extern void interfaces_address_changed(void);
extern int interfaces_address_clash(Dib *, u_long);

/* This routine is exported for the use of trace builds only */
extern const char *dhcp_state_name(const dhcp_interface *);

#ifdef __cplusplus
}
#endif

#endif
@


1.3
log
@  Support for DHCPINFORM
  Dynamic leasing behaviour brought in line with DHCP specification
Detail:
  New *-command *DHCPExecute to enable CLI launching of DHCP interface
    control.
  Output of *DHCPInfo tidied up and irrevelant timer info is suppressed.
  The algorithm for deciding which offer to accept (where multiple offers
    are received) has been significantly enhanced (and moved to voting.c)
    If a previous offer from a server has been DHCPNAK'd by something else
    then the server offering the dodgy IP address is blacklisted and will
    no longer be preferred to a server which isn't blacklisted.
  DHCP module will request and prefer offers of an existing IP address
    configuration wherever possible.
  DHCP module will initialise an interface into the INITREBOOT/REBOOTING
    states if it is asked to take control of an interface which has
    already been configured externally.
  IP lease length suggestions are no longer sent in appropriate messages.
    The server is trusted to choose an appropriate value.
  The DHCP module is more careful to insert appropriate options into each
    message.  It is no longer in breach of RFC2131 in this respect.
  Timer values for renew and rebind times are now inferred automatically
    where necessary (server doesn't have to send them) and are now correct.
  DHCPRELEASE and DHCPDECLINE now include a textual message indicating the
    reason for the message's generation.
  Where allowed, outgoing messages contain a client class identifier to
    enable the server to vary configuration information depending on the
    client hardware/software type.  Currently, this information is the
    output of OS_Byte 0.
  In the SWI interface for examining DHCP packets, a pointer to a specific
    packet to examine may be supplied instead of an interface identifier
    (depending on a flag bit)
  New SWI DHCP_Inform for sending DHCPINFORM messages to arbitrary servers
    in order to enable retrieval of configuration information when the IP
    address has been established via other means (eg. from NVRAM).
  DHCP module is now capable of deleting IP addresses from interfaces.
  DHCP module will cede control of an interface if something else changes
    the interface's address and send a message to the server indicating
    that the lease is being relinquished.
  DHCP will trap the Internet (5.26 and later) module's panic service call
    when a duplicate IP address is detected on the network, and resolve
    the situation (send the server DHCPDECLINE and deconfigure the interface
    and restart address discovery) if it was controlling that interface.
  Transaction ID generation improved (uses interface MAC address to
    reduce chance of duplication with other hosts)
  MAC address discovery code added.
  DHCP module attempts to unicast packets wherever possible.
  Retry delays adjusted to conform more closely to spec (RFC2131)
  Possible hole in state table that IPConfig triggered which caused several
    DHCPDISCOVER messages to be sent in succession very quickly has been
    closed.
  Co-operates with Internet 5.26 to ensure that callers of the Internet
    module's BOOTP ioctl are returned sensible error values so that they
    no longer need to probe the DHCP module independently to discover
    whether an interface has been configured successfully or not.
Admin:
  Requires Internet 5.26
  Requires TCPIPLibs 5.19

Version 0.05. Tagged as 'DHCP-0_05'
@
text
@d77 3
@


1.2
log
@  Integration with IPConfig completed.
  Header export added.
Detail:
  Blocking added to enable IPConfig to work correctly.
  Header file exported containing states and SWI identifiers.
  Brings loopback interface up so that it can bind to the DHCP client
    port (failure to have any AF_INET interfaces configured causes
    the bind() call to fail, even when INADDR_ANY is specified)
  Failure to read ARP cache now treated as a go-ahead to accept the
    IP address rather than a rejection.
  Keeps a copy of Internet BOOTP requests so that the options can
    be copied across to the DHCPDISCOVER if required.
Admin:
  Header export required by Internet 5.21 and IPConfig 0.15
  Requires Internet 5.21.
  Requires TCPIPLibs 5.11.
  Requires IPConfig 0.15.
  Add module after all other expansion card networking modules and
    any attempt to BOOTP will be transparently upgraded to DHCP.


Version 0.01. Tagged as 'DHCP-0_01'
@
text
@d33 1
d39 8
d66 3
d73 1
d91 2
@


1.1
log
@Initial revision
@
text
@d79 3
@


1.1.1.1
log
@  Fully functional DHCP client.
Detail:
  Implements the Dynamic Host Configuration Protocol (RFC2131 and RFC2132)
  This module usurps the Internet module's implementation of BOOTP in order
    to use the superior DHCP protocol.
Admin:
  Requires Internet 5.20 or later.
    (RiscOS/Sources/Networking/AUN/Internet  tag: Internet-5_20)
  Requires TCPIPLibs 5.09 or later.
    (RiscOS/Sources/Libs/TCPIPLibs  tag: TCPIPLibs-5_09)
  

Tagged as DHCP-0_00

@
text
@@
