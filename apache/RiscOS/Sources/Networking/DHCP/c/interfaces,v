head	1.14;
access;
symbols
	DHCP-0_27:1.14
	DHCP-0_26:1.14
	DHCP-0_25:1.14
	DHCP-0_24:1.13
	DHCP-0_23:1.12
	DHCP-0_22:1.10
	RO_5_07:1.9
	DHCP-0_21:1.9
	DHCP-0_20:1.9
	DHCP-0_19:1.9
	DHCP-0_18:1.9
	dellis_autobuild_BaseSW:1.9
	DHCP-0_17:1.9
	DHCP-0_16:1.9
	DHCP-0_15:1.9
	sbrodie_sedwards_16Mar2000:1.9
	DHCP-0_14:1.9
	DHCP-0_13:1.9
	DHCP-0_12:1.9
	dcotton_autobuild_BaseSW:1.9
	DHCP-0_11:1.9
	DHCP-0_10:1.9
	DHCP-0_09:1.7
	DHCP-0_08:1.6
	DHCP-0_07:1.5
	DHCP-0_06:1.4
	DHCP-0_05:1.4
	DHCP-0_04:1.3
	DHCP-0_03:1.3
	DHCP-0_02:1.3
	DHCP-0_01:1.2
	DHCP-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2013.09.05.19.23.06;	author rsprowson;	state Exp;
branches;
next	1.13;
commitid	U4CSaZZlAOLfEh4x;

1.13
date	2013.09.04.07.10.38;	author rsprowson;	state Exp;
branches;
next	1.12;
commitid	Mw18urjsIckYC54x;

1.12
date	2012.09.15.10.27.17;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	axcbDoyNNXkO5Ckw;

1.11
date	2012.07.20.11.12.22;	author rgriffin;	state Exp;
branches;
next	1.10;
commitid	Me55MBo8gjiOaidw;

1.10
date	2012.07.19.10.27.43;	author rgriffin;	state Exp;
branches;
next	1.9;
commitid	MFH9W84jn7sEX9dw;

1.9
date	99.07.22.16.00.51;	author kbracey;	state Exp;
branches;
next	1.8;

1.8
date	99.07.09.09.27.21;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	99.07.01.11.28.53;	author kbracey;	state Exp;
branches;
next	1.6;

1.6
date	99.06.29.09.34.20;	author kbracey;	state Exp;
branches;
next	1.5;

1.5
date	99.06.28.14.04.04;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	99.06.25.13.24.47;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	99.04.01.12.18.52;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.03.30.12.41.15;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.03.26.16.10.29;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.26.16.10.29;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Internationalised

Version 0.25. Tagged as 'DHCP-0_25'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *  DHCP (interfaces.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"

#include "Global/OsWords.h"

#include "sys/types.h"
#include "sys/socket.h"
#include "net/if.h"
#include "protocols/dhcp.h"
#include "sys/dcistructs.h"
#include "netinet/in.h"
#include "arpa/inet.h"

#include "dhcpintern.h"
#include "interfaces.h"
#include "sockets.h"
#include "module.h"
#include "packets.h"
#include "voting.h"

/* Data structure holding details of active DHCP leasing interfaces */
static dhcp_interface *ichain;


int interfaces_current_time(void)
{
	int timenow;
	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &timenow);
	return timenow;
}

/* Return the current time + a random interval uniformly chosen from [1..max_secs].
 */
dhcp_time interfaces_random_delay(int max_secs)
{
        if (max_secs <= 1) {
                return interfaces_current_time() + 100;
        }
        return interfaces_current_time() + 100 + (rand() % ((max_secs-1) * 100 + 1));
}

/* Initialisation and finalisation routines */
void interfaces_init(void)
{
	ichain = NULL;
}

/* Throws away all known interface information - relies on tail recursion
 * and is more efficient than a while loop in Norcroft!
 *
 * 19990702 KJB - You're a very sick bunny.
 */
void interfaces_discard(void)
{
	if (ichain != NULL) {
		interfaces_forget(ichain);
		interfaces_discard();
	}
}

/* Locate interfaces given various attributes: name or transaction ID */
dhcp_interface *interfaces_find(const char *name)
{
	dhcp_interface *di;

	for (di = ichain; di != NULL; di = di->next) {
		if (strcmp(di->di_name, name) == 0) {
			break;
		}
	}

	return di;
}

dhcp_interface *interfaces_find_by_xid(u_long xid)
{
	dhcp_interface *di;

	for (di = ichain; di != NULL; di = di->next) {
		if (di->di_dhcp.xid == xid)  {
			break;
		}
	}

	return di;
}

/* Creation of structure representing new interface based on incoming dynamic boot
 * start service call.  If we were asked to DHCP explicitly through a call to SWI
 * DHCP_Execute, we just ask Internet to "BOOTP" and then trap the service call to
 * minimise the number of entry points into the system.
 */
dhcp_interface *interfaces_create(const dhcp_start_params *dsp)
{
	dhcp_interface *di;
	u_int *hwint;

	di = interfaces_find(dsp->ifname);
	if (di != NULL) {
	        /* We already know about this interface.  Probably caused by
	         * something trying to prod Internet (IPConfig, for example).
	         */
		return di;
	}

	di = calloc(1, sizeof(dhcp_interface));
	if (di != NULL) {
	        /* Name is copied to ensure that the
	         * struct ifreq is initialised correctly
	         */
		(void) strncpy(di->di_name, dsp->ifname, IFNAMSIZ);
		dhcp_empty_blacklist(di);
		di->next = ichain;
		di->request_lease = dhcp_any_lease;
		di->dib = dsp->dib;
		di->t1 = interfaces_random_delay(10);
		di->t2 = dhcp_infinite_lease;
		di->orig_t1 = dhcp_infinite_lease;
		di->orig_t2 = dhcp_infinite_lease;
		di->kill_if = dhcp_infinite_lease;
		sockets_set_preferred_ip_address(di, INADDR_ANY);
		if (di->preferred_ip.s_addr != INADDR_ANY) {
                        di->state = dhcpstate_INITREBOOT;
		}
		else {
			di->state = dhcpstate_INIT;
		}
		ichain = di;
		/* A good opportunity to randomise */
		hwint = (u_int *) di->dib->dib_address;
		srand(hwint[0] ^ hwint[1] ^ interfaces_current_time());

		trace(("interfaces_create: state: %s  addr: %s  mac: %08x %08x  name: %s%d\n",
		  dhcp_state_name(di), inet_ntoa(di->preferred_ip), hwint[0], hwint[1],
		  di->dib->dib_name, di->dib->dib_unit));

	}

	return di;
}

void interfaces_address_changed(void)
{
        /* Check all the interfaces */
	dhcp_interface *di, *next;

	for (di = ichain; di != NULL; di = next) {
	        next = di->next;
        	if (sockets_verify_address(di) < 0) {
                	/* Interface configuration is incorrect. */
                        dhcp_release(di, "Manual reconfiguration");
                	interfaces_forget(di);
                }
	}
}

int interfaces_address_clash(Dib *dib, u_long iap)
{
        /* Check all the interfaces */
	dhcp_interface *di, *next;

#ifdef TRACE
	struct in_addr ia; ia.s_addr = iap;
	trace(("Internet has notified of an address clash (%s)\n", inet_ntoa(ia)));
#endif
	(void) iap;

	for (di = ichain; di != NULL; di = next) {
	        next = di->next;
        	if (di->dib == dib) {
                	/* This interface clashed - decommission it */
                	trace(("Decommissioning interface due to ARP probe clash\n"));
                        dhcp_decline(di, "Address clash detected by ARP probe");
                        di->binding.yiaddr = iap;
                        sockets_kill_interface(di);
        		sockets_trigger_internet_dhcp(di->di_name);
                	return 1; /* Instruct module.c to claim the service call */
                }
	}

	return 0; /* Don't claim the service call */
}

/* Deletion of a structure.  Triggered by module finalisation or explicit request
 * through SWI interface.
 */
void interfaces_forget(dhcp_interface *i)
{
	dhcp_interface *di = ichain, *prev = NULL;

       	trace(("DHCP abandons interface %s (%s)\n", i->di_name, dhcp_state_name(i)));

	for (di = ichain; di != NULL; prev = di, di = di->next) {
		if (di == i) {
			if (prev != NULL) {
				prev->next = di->next;
			}
			else {
				ichain = di->next;
			}
			free(di);
			return;
		}
	}
}

const char *dhcp_state_name(const dhcp_interface *di)
{
	char token[5];

	sprintf(token, "St%x", di->state & 0xFF);
	return module_lookup_msg(token);
}

/* Convert the time and display as a string.  The times passed in are
 * centisecond monotonic time values.  Hence we need to compute when the
 * time is relative to the current time.
 */
static void interfaces_print_time(const dhcp_time t)
{
	if (t == dhcp_infinite_lease) {
		printf("%s\n", module_lookup_msg("NevInf"));
	}
	else if (t == dhcp_maximum_lease) {
		printf("%s\n", module_lookup_msg("NevMax"));
	}
	else {
		char     buff[64];
		uint64_t fbt;

		*(uint64_t *)buff = 0;
		buff[0] = OWReadRTC_5ByteInt;
		_swix(OS_Word, _INR(0,1), OsWord_ReadRealTimeClock, buff);
		fbt = *(uint64_t *)buff + t - (uint64_t)interfaces_current_time();
		_swix(OS_ConvertStandardDateAndTime, _INR(0,2),
		      &fbt, buff, sizeof(buff));
		printf("%s\n", buff);
	}
}

/* Print a column heading, line up, a separator, line up.  Uses the module
 * message lookup therefore uses the shared static buffer.
 */
static void interfaces_print_heading(const char *token, char sep, size_t len)
{
	size_t output;

	output = printf(module_lookup_msg(token));
	while (output <= len)
	{
		putchar(' ');
		output++;
	}
	putchar(sep);
	putchar(' ');
}

void interfaces_print_information(const dhcp_interface *di)
{
        if (di == NULL) {
                /* Print information about all known interfaces */
                for (di = ichain; di != NULL; di = di->next) {
                        printf("\n");
                        interfaces_print_information(di);
                }
        }
	else {
		size_t column = strlen(module_lookup_msg("Headr"));

		interfaces_print_heading("Iface", ':', column);
		printf("%s\n", di->di_name);
		interfaces_print_heading("State", ':', column);
		printf("%s\n", dhcp_state_name(di));

		if (di->state == dhcpstate_BOUND || di->state == dhcpstate_RENEWING ||
		    di->state == dhcpstate_REBINDING) {
			interfaces_print_heading("IPadd", ':', column);
			printf("%s\n", inet_ntoa(*(struct in_addr *)&di->binding.yiaddr));
		}

		if (di->state == dhcpstate_BOUND || di->state == dhcpstate_RENEWING) {
		        struct in_addr ip;
			if (dhcp_find_server_identifier(&di->binding, &ip)) {
				interfaces_print_heading("DServ", ':', column);
				printf("%s\n", inet_ntoa(ip));
			}
		}

		if (di->state == dhcpstate_BOUND || di->state == dhcpstate_RENEWING ||
		    di->state == dhcpstate_REBINDING) {
			if (di->orig_t1 != dhcp_infinite_lease) {
				interfaces_print_heading("Renew", '@@', column);
				interfaces_print_time(di->orig_t1);
			}

			if (di->orig_t2 != dhcp_infinite_lease) {
				interfaces_print_heading("Rbind", '@@', column);
				interfaces_print_time(di->orig_t2);
			}

			interfaces_print_heading("Xpire", '@@', column);
			interfaces_print_time(di->kill_if);
		}

		if (di->t1 != dhcp_infinite_lease && di->t1 != di->orig_t1) {
			interfaces_print_heading("Retry", '@@', column);
			interfaces_print_time(di->t1);
		}
	}
}

/* This routines finds the earliest trigger date for the next interesting timed
 * event and returns it.  It is allowed to return times which are in the past -
 * as interfaces_reschedule specifically handles that.  Returns dhcp_infinite_lease
 * if there are no interesting events scheduled to happen at specific times.
 */
static dhcp_time interfaces_get_next_event_time(void)
{
        const dhcp_interface *di;
        dhcp_time earliest = dhcp_infinite_lease;

        for (di = ichain; di != NULL; di = di->next) {
                if (di->t1 < earliest) earliest = di->t1;
                if (di->t2 < earliest) earliest = di->t2;
                if (di->kill_if < earliest) earliest = di->kill_if;
        }

        return earliest;
}


/* The Kill Interface timer triggered.  This should only occur in the REBINDING state
 * (as we would have been attempting to RENEW and REBIND as the end of the lease
 * approached).  We must take the interface out of commission immediately and try to
 * get a new address.  Behaviour of other network software on the host in response to
 * this sudden change of IP address appears to be "beyond the scope of RFC2131".  How
 * convenient!
 */
static void interfaces_terminate(dhcp_interface *di)
{
        trace(("Interface kill timer triggered on %s in state %s\n", di->di_name,
                	dhcp_state_name(di)));

	if (sockets_kill_interface(di) < 0) {
	        /* Unable to manipulate interface as we wanted to.  Go into a
	         * huff and forget about the interface.
	         */
	        interfaces_forget(di);
	}
	else {
		/* In the unlikely event of the machine not have died unrecoverably
		 * by now, re-initialise the interface's DHCP state so that it attempts
		 * to find a new IP address to use.  Frankly, I'll be amazed if this
		 * works.
		 */
		di->state = dhcpstate_INIT;
		di->t1 = interfaces_random_delay(10);
		di->t2 = dhcp_infinite_lease;
		di->kill_if = dhcp_infinite_lease;
		di->orig_t1 = dhcp_infinite_lease;
		di->orig_t2 = dhcp_infinite_lease;
		sockets_trigger_internet_dhcp(di->di_name);
	}
}


/* Timer 2 triggered on this interface.  When BOUND, this means that we haven't been
 * able to renew our lease and that we should now try to rebind.  If we are in any
 * other state, then it means that we need to give up the current operation and not
 * retry it any more (retries would have been occuring on T1).
 */
static void interfaces_T2_triggered(dhcp_interface *di)
{
        trace(("T2 triggered on %s in state %s\n", di->di_name, dhcp_state_name(di)));

	if (di->state == dhcpstate_SELECTING) {
	        /* Our initial collection period has expired */
		if (di->offer.op == BOOTREQUEST) {
		        /* No response yet - if the -p flag was used, abort the
		         * process and assign a private IP address
		         */
		       if (di->flags & dse_ASSIGN_PRIVATE_IP) {
		         trace(("timed out on %s - abandoning interface\n", di->di_name));

		         if (di->flags & dse_BLOCKING_MODE) {
		           /*
		            * Mark this interface for deletion by the swi handler
		            */
		           di->state = dhcpstate_ABANDON;
		           di->t2 = dhcp_infinite_lease;

		         } else {
		           /*
		            * It's safe to delete it now. And in fact we must, as in
		            * non blocking mode the swi handler is not called again
		            */
		           Dib dib = *di->dib; /* Copy the driver information block */
		           struct in_addr del = di->preferred_ip;
                           interfaces_forget(di);
		           sockets_delete_address(&dib, &del);
  		           module_apply_private_ip(&dib);
		         }

		       } else {
		         /*
		          * Start again
		          */
		         trace(("timed out on %s - restarting\n", di->di_name));
  		         dhcp_discover(di);
		       }

		}
		else {
		        /* Had a response - try it! */
		        dhcp_accept_offer(di);
		}
	}
	else if (di->state == dhcpstate_BOUND ||
	         di->state == dhcpstate_RENEWING) {
	        /* We have lost contact with our original server, so break the
	         * binding and try to find a new server to continue holding our lease.
	         */
		di->binding.siaddr = htonl(INADDR_ANY);
		dhcp_request(di, dhcpstate_REBINDING, dhcprequest_set_T2);
	}
	else {
		struct in_addr difficult_server;
	        /* No response to the request message - try again?  Add the
	         * server to the blacklist, as it's being naughty.
	         */
	        if (dhcp_find_server_identifier(&di->offer, &difficult_server)) {
	        	dhcp_add_to_blacklist(di, difficult_server);
	        }
		dhcp_discover(di);
	}
}

/* Timer 1 triggered on this interface.  In the BOUND state, it is time to attempt
 * to renew the lease.  If already renewing the lease, this is a retry of that op.
 * If we are in the INIT state, kick off the discover message (this event is timed so
 * we can enforce random fuzz to desynchronise synchronised network power restoration,
 * for example).  If we were waiting for offers (SELECTING) and none have been
 * forthcoming, retry the discover message, otherwise kick of the acceptance of the
 * favourite offer.  If we were already REQUESTING, then retry that.
 */
static void interfaces_T1_triggered(dhcp_interface *di)
{
        trace(("T1 triggered on %s in state %s\n", di->di_name, dhcp_state_name(di)));

        if (di->state == dhcpstate_BOUND) {
        	/* The time to attempt a lease extension has arrived.
        	 * In a "standard" configuration, this means that the lease
        	 * has reached its half-life and we should attempt to renew
        	 * it, but not all *that* urgently.
        	 */
                di->offer = di->binding;
                dhcp_request(di, dhcpstate_RENEWING, dhcprequest_retain_T2);
        }
        else if (di->state == dhcpstate_INIT) {
                /* Start-up fuzz timer has expired.  Let's get going! */
                dhcp_discover(di);
        }
        else if (di->state == dhcpstate_INITREBOOT) {
                /* Start-up fuzz timer has expired.  Let's get going! */
                dhcp_request(di, dhcpstate_REBOOTING, dhcprequest_set_T2);
        }
        else if (di->state == dhcpstate_SELECTING) {
                /* We are waiting for offers to arrive.  When this timer fires,
                 * this means we want to retransmit the DHCPDISCOVER packet
                 */
                if (di->offer.op == BOOTREQUEST) {
                        /* No responses yet */
	                dhcp_transmit(di);
		        module_idle(mir_WAKEUP);
                }
                else {
                        /* OK - we're happy with the one we have been offered */
		        dhcp_accept_offer(di);
                }
        }
        else {
                /* Time to retry the request message */
                dhcp_transmit(di);
	        module_idle(mir_WAKEUP);
        }
}

static void interfaces_check_timers(dhcp_interface *di, dhcp_time trigger)
{
        if (trigger > di->kill_if) {
                /* We have a major problem - our interface allocation has
                 * expired.  The following call will bring down the interface
                 * probably with spectacular consequences for the system,
                 * but the RFC is quite clear on this issue.  This condition
                 * will never occur if we are holding an infinite lease.
                 */
                interfaces_terminate(di);
        }
        else if (trigger > di->t2) {
                /* We have a minor problem - we were unable to negotiate a
                 * lease extension with our original DHCP server.  This
                 * condition will never occur if we are holding an infinite
                 * lease.  However, we also use this as a retry giveup timeout,
                 * so this call can be made in those circumstances.
                 */
                interfaces_T2_triggered(di);
        }
        else if (trigger > di->t1) {
                /* The re-acquisition timer has fired.  In a system such as
                 * that recommended by the DHCP RFC, this condition indicates
                 * that half of our lease time has expired and that now is a
                 * good time to try to negotiate an extension.  This condition
                 * will never occur if we are holding an infinite lease. However,
                 * we also use this as a retry timer, so it may be called in
                 * those circumstances.
                 */
                interfaces_T1_triggered(di);
        }
}


/* This routine is called on a callback (set on the callafter).
 * It is called when one of our timers has expired.  Note that
 * if the earliest timer has been moved, nothing will happen except
 * that a new callafter will be scheduled if necessary.
 */
void interfaces_timer_fired(void *private_word)
{
        dhcp_interface *di;

	/* Release the block on the original caller, thus enforcing a timeout
	 * or wakeup (in this case, a timeout) so that the original caller's
	 * retry algorithms can function correctly.
	 */

        for (di = ichain; di != NULL; ) {
                /* The timer check may result in the deletion of the
                 * dhcp_interface object - so we cannot rely on the next
                 * field still being there after the function call!
                 */
                dhcp_interface *const next = di->next;
                interfaces_check_timers(di, interfaces_current_time());
                di = next;
        }

	interfaces_reschedule(private_word);
}

/* Be very careful of the two routines either side of this comment.  They
 * are mutually recursive, and they have been carefully written to ensure
 * that they are both tail-recursive.
 */

void interfaces_reschedule(void *private_word)
{
        int timenow = interfaces_current_time();
        dhcp_time next_event = interfaces_get_next_event_time();

	if (next_event != dhcp_infinite_lease) {
	        /* Allow an event to be scheduled in the past - and don't
	         * actually set a timer, but just cross-recurse back into
	         * interfaces_timer_fired to make things go quickly.
	         */
	        if (next_event > timenow) {
		        module_reschedule(next_event - timenow, private_word);
	        }
	        else {
		        interfaces_timer_fired(private_word);
	        }
	}
}

@


1.13
log
@Makefile recreated from fragments
Renamed dhcpextern.h to DHCP.h so the shared makefiles can export it without needing a different source and target filename.

Version 0.24. Tagged as 'DHCP-0_24'
@
text
@d28 2
d233 1
a233 22
	switch (di->state) {
		case dhcpstate_INIT:
                        return "INIT";
		case dhcpstate_SELECTING:
                        return "SELECTING";
		case dhcpstate_REQUESTING:
                        return "REQUESTING";
		case dhcpstate_BOUND:
                        return "BOUND";
		case dhcpstate_RENEWING:
                        return "RENEWING";
		case dhcpstate_REBINDING:
                        return "REBINDING";
		case dhcpstate_INITREBOOT:
                        return "INIT-REBOOT";
		case dhcpstate_REBOOTING:
                        return "REBOOTING";
		case dhcpstate_ABANDON:
                        return "ABANDON";
                default:
                        return "UNKNOWN STATE";
	}
d235 2
d239 1
a239 3
/* Convert the time into a displayable string.  Note that ctime() is evil
 * and uses an internal static buffer within the C library data, so multiple
 * calls to this function will corrupt the buffer.  The times passed in are
d243 1
a243 1
static const char *interfaces_ctime(const dhcp_time t)
d245 3
a247 3
        if (t == dhcp_infinite_lease) {
		return "Never (infinite lease)\n";
        }
d249 1
a249 1
	        return "Never (maximum lease)\n";
d252 25
a276 3
                /* Assumes time_t is in seconds... */
	        time_t tt = time(NULL) + (t - interfaces_current_time()) / 100;
		return ctime(&tt);
d278 2
d291 2
a292 2
        else {
		/* ctime uses a static buffer - so only one per printf! */
d294 4
a297 5
		printf(
			"Interface     : %s\n"
			"State         : %s\n",
			di->di_name,
			dhcp_state_name(di));
d300 4
a303 4
		    di->state == dhcpstate_REBINDING) printf(
			"IP address    : %s\n",
			inet_ntoa(*(struct in_addr *) &di->binding.yiaddr)
			);
d307 4
a310 4
		        if (dhcp_find_server_identifier(&di->binding, &ip)) {
			        printf(
		        	"DHCP server   : %s\n", inet_ntoa(ip));
		        }
d315 4
a318 20
        	        if (di->orig_t1 != dhcp_infinite_lease) printf(
				"Renew lease   @@ %s",
				interfaces_ctime(di->orig_t1)
				);

			if (di->orig_t2 != dhcp_infinite_lease) printf(
				"Rebind lease  @@ %s",
				interfaces_ctime(di->orig_t2)
				);

        		printf(
				"Lease expires @@ %s",
				interfaces_ctime(di->kill_if)
				);
		}

                if (di->t1 != dhcp_infinite_lease && di->t1 != di->orig_t1) printf(
			"Retry         @@ %s",
			interfaces_ctime(di->t1)
			);
d320 4
d325 3
a327 1
        }
d329 5
d425 1
a425 1
  		           apply_private_ip(&dib);
@


1.12
log
@Line up a few comments
No code changes, retagged as DHCP-0_23.
@
text
@d36 1
a36 1
#include "dhcp.h"
@


1.11
log
@Fixed data abort on RPi when setting private IP address.
Delete existing address from interface before setting a private one.

Version 0.23. Tagged as 'DHCP-0_23'
@
text
@d406 1
a406 1
		        */
d413 1
a413 1
		           */
d421 2
a422 2
		           */
		           Dib dib = *di->dib;		// copy the driver information block
d431 2
a432 2
		          * start again
		         */
@


1.10
log
@Added -p switch to DHCPExecute command, that causes DHCP to assign
a private IP address in the event of DHCP discovery timing out.
Changed DHCP discovery timeout from 10 minutes to 20 seconds.

Version 0.22. Tagged as 'DHCP-0_22'
@
text
@d423 1
a423 1

d425 1
@


1.9
log
@Tweaked to build with latest TCPIPLibs
@
text
@d154 5
d248 2
d251 1
a251 1
                        return "INTERNAL ERROR";
d391 1
d404 27
a430 2
		        /* No response yet - we're in trouble here - try starting
		         * again from scratch.
d432 4
a435 1
		        dhcp_discover(di);
@


1.8
log
@* Ignores DHCPACKS from incorrect servers.
* DHCP_GetOption and associated internal calls support sub-options and
  extended options.
* Random time intervals more uniformly spread.
* Time reports in *DHCPInfo were incorrect when real-time clock had changed
  since module initialisation.
* Server priority option supported.
* CMHG file optimised - syntax not duplicated.

Version 0.10. Tagged as 'DHCP-0_10'
@
text
@d29 1
@


1.7
log
@If our lease expires, call sockets_trigger_internet_dhcp() to tell the
Internet module that we're going to restart at the DHCP INIT state.
Don't show lease times if we don't have a lease.
Random delay after lease expiry now 0-10 seconds, instead of 0-5.

Version 0.09. Tagged as 'DHCP-0_09'
@
text
@a45 3
static time_t reference_time_t;
static int reference_monotonic_time;

d53 2
d57 2
a58 14
        /* Don't really need a spectacular random number generator.
 	 * Convert maximum time to eighths of seconds and use it to divide
 	 * the random number remainder.  Multiplication by 12 rather than 12.5
 	 * for efficiency - it's close enough.  This results in a timer value
 	 * of at least 0.12 seconds in the future, and at most just under
 	 * max_secs seconds in the future, unless max_secs <= 0 ...
 	 */
        if (max_secs <= 0) {
                /* Zero timeout? Silly - if you wanted an immediate action,
                 * you would have just rescheduled and allowed a fake callafter
                 * to trigger again immediately, so you're going to get a
                 * 5cs delay to avoid thrashing the system nastily.
                 */
                return interfaces_current_time() + 5;
d60 1
a60 1
        return interfaces_current_time() + (rand() % (max_secs << 3) + 1) * 12;
a66 2
	time(&reference_time_t);
	reference_monotonic_time = interfaces_current_time();
d71 2
d239 1
a239 1
                        return "INITREBOOT";
d251 2
a252 3
 * centisecond monotonic time values.  Hence we convert to monotonic seconds
 * and use our reference matching values from init time to convert to time_t
 * units.
d263 2
a264 1
	        time_t tt = reference_time_t + (t - reference_monotonic_time) / 100;
d283 6
a288 1
			"State         : %s\n"
d290 2
a291 3
			di->di_name,
			dhcp_state_name(di),
			inet_ntoa(*(struct in_addr *) &di->binding.yiaddr));
@


1.6
log
@Improved randomisation further from 0.07 - now we seed on all bytes of the
hardware address, not just the first four :)
Transaction IDs now totally random.

Version 0.08. Tagged as 'DHCP-0_08'
@
text
@d310 17
a326 14
                if (di->orig_t1 != dhcp_infinite_lease) printf(
			"Renew lease   @@ %s",
			interfaces_ctime(di->orig_t1)
			);

		if (di->orig_t2 != dhcp_infinite_lease) printf(
			"Rebind lease  @@ %s",
			interfaces_ctime(di->orig_t2)
			);

        	printf(
			"Lease expires @@ %s",
			interfaces_ctime(di->kill_if)
			);
d383 1
a383 1
		di->t1 = interfaces_random_delay(5);
d388 1
@


1.5
log
@* Added initial delay in INIT-REBOOT state to match INIT state.
* Stopped extra DHCPREQUESTs being generated by ioctl calls in REBOOTING state.
* Don't reject BOOTP packets just because they don't have a cookie. Treat
  those without the correct cookie as containing no options.
* Reject BOOTP packets < 300 bytes, as per RFC 1542.
* Treat BOOTP responses in a more considered fashion - old versions would go
  nuts as soon as they saw any non-DHCP response. BOOTP replies now treated as
  (not very good) offers. BOOTP responses with correct address also accepted
  in REBINDING state.
* Decline DHCPACKs with no server identifier.
* Add server to blacklist if its offer ended up being DHCPDECLINEd for any
  reason.
* Add server to blacklist if we timeout requests.
* Initial boot delay now better randomised (seeded on MAC address), and in the
  range 1-10 seconds, as per RFC 2131.
* Corrected REBOOTING and REQUESTING back-off timers - first retransmission
  was too slow.
* DHCPREQUEST packets now have secs filled in correctly in REBOOTING state.
* Voting rules extended - prefer DHCP servers to BOOTP servers and prefer
  servers providing vendor options to those who don't.

Version 0.07. Tagged as 'DHCP-0_07'
@
text
@d130 1
d164 2
a165 1
		srand(*(u_int *) di->dib->dib_address ^ interfaces_current_time());
@


1.4
log
@  Support for DHCPINFORM
  Dynamic leasing behaviour brought in line with DHCP specification
Detail:
  New *-command *DHCPExecute to enable CLI launching of DHCP interface
    control.
  Output of *DHCPInfo tidied up and irrevelant timer info is suppressed.
  The algorithm for deciding which offer to accept (where multiple offers
    are received) has been significantly enhanced (and moved to voting.c)
    If a previous offer from a server has been DHCPNAK'd by something else
    then the server offering the dodgy IP address is blacklisted and will
    no longer be preferred to a server which isn't blacklisted.
  DHCP module will request and prefer offers of an existing IP address
    configuration wherever possible.
  DHCP module will initialise an interface into the INITREBOOT/REBOOTING
    states if it is asked to take control of an interface which has
    already been configured externally.
  IP lease length suggestions are no longer sent in appropriate messages.
    The server is trusted to choose an appropriate value.
  The DHCP module is more careful to insert appropriate options into each
    message.  It is no longer in breach of RFC2131 in this respect.
  Timer values for renew and rebind times are now inferred automatically
    where necessary (server doesn't have to send them) and are now correct.
  DHCPRELEASE and DHCPDECLINE now include a textual message indicating the
    reason for the message's generation.
  Where allowed, outgoing messages contain a client class identifier to
    enable the server to vary configuration information depending on the
    client hardware/software type.  Currently, this information is the
    output of OS_Byte 0.
  In the SWI interface for examining DHCP packets, a pointer to a specific
    packet to examine may be supplied instead of an interface identifier
    (depending on a flag bit)
  New SWI DHCP_Inform for sending DHCPINFORM messages to arbitrary servers
    in order to enable retrieval of configuration information when the IP
    address has been established via other means (eg. from NVRAM).
  DHCP module is now capable of deleting IP addresses from interfaces.
  DHCP module will cede control of an interface if something else changes
    the interface's address and send a message to the server indicating
    that the lease is being relinquished.
  DHCP will trap the Internet (5.26 and later) module's panic service call
    when a duplicate IP address is detected on the network, and resolve
    the situation (send the server DHCPDECLINE and deconfigure the interface
    and restart address discovery) if it was controlling that interface.
  Transaction ID generation improved (uses interface MAC address to
    reduce chance of duplication with other hosts)
  MAC address discovery code added.
  DHCP module attempts to unicast packets wherever possible.
  Retry delays adjusted to conform more closely to spec (RFC2131)
  Possible hole in state table that IPConfig triggered which caused several
    DHCPDISCOVER messages to be sent in succession very quickly has been
    closed.
  Co-operates with Internet 5.26 to ensure that callers of the Internet
    module's BOOTP ioctl are returned sensible error values so that they
    no longer need to probe the DHCP module independently to discover
    whether an interface has been configured successfully or not.
Admin:
  Requires Internet 5.26
  Requires TCPIPLibs 5.19

Version 0.05. Tagged as 'DHCP-0_05'
@
text
@d149 1
a149 1
		di->t1 = interfaces_random_delay(2);
d162 2
d405 1
a405 2
		        dhcp_vote_notify_offer_accepted(di);
	                dhcp_request(di, dhcpstate_REQUESTING, dhcprequest_set_T2);
d417 3
a419 3
	        /* No response to the request message - try again?  Perhaps we
	         * should log the naughty server identifier and make sure we
	         * don't accept any DHCPOFFER messages from it for a while.
d421 3
d453 4
d468 1
a468 2
		        dhcp_vote_notify_offer_accepted(di);
                        dhcp_request(di, dhcpstate_REQUESTING, dhcprequest_set_T2);
@


1.3
log
@  Error message text corrected.
  Policy change: T2 timeouts increased substantially.
  "SWI value out of range for module DHCP" errors on DHCP_SetOption fixed.
Detail:
  Sub-error 3 is "Option not added" not "Option not present".
  The timeouts for giving up on retries of DHCPDISCOVER and
    DHCPREQUEST messages have been substantially increased for
    the benefit of IPConfig.
  The SWI dispatcher was missing a "break" statement which
    caused Unknown DHCP SWI errors to occur on any call to
    SWI DHCP_SetOption.
  Sleep states (idling on calls that have come indirectly from tools
    such as IPConfig) are awoken more regularly.
Admin:
  Tested in STB22 NEC and on desktop machine.

Version 0.02. Tagged as 'DHCP-0_02'
@
text
@d40 1
d145 1
d147 1
a147 2
		di->state = dhcpstate_INIT;
		di->request_lease = dhcp_infinite_lease;
d151 2
d154 7
d167 42
d216 3
a218 1
	for (di = ichain; di != NULL; di = di->next) {
a288 2
                const int infinite = (di->kill_if == dhcp_infinite_lease);
		const char *expiry  = interfaces_ctime(dhcp_infinite_lease);
d293 1
a293 2
			"IP address    : %s\n"
			"Lease expires @@ %s",
d296 9
a304 3
			inet_ntoa(*(struct in_addr *) &di->binding.yiaddr),
			infinite ? expiry : interfaces_ctime(di->kill_if)
			);
d306 1
a306 1
		printf(
d308 1
a308 1
			infinite ? expiry : interfaces_ctime(di->t1)
d311 1
a311 1
		printf(
d313 1
a313 1
			infinite ? expiry : interfaces_ctime(di->t2)
d315 12
d379 2
d403 1
a418 2
	         * INIT and INITREBOOT are really fatal errors - should never
	         * get into those states under RISC OS.
d460 1
d555 1
@


1.2
log
@  Integration with IPConfig completed.
  Header export added.
Detail:
  Blocking added to enable IPConfig to work correctly.
  Header file exported containing states and SWI identifiers.
  Brings loopback interface up so that it can bind to the DHCP client
    port (failure to have any AF_INET interfaces configured causes
    the bind() call to fail, even when INADDR_ANY is specified)
  Failure to read ARP cache now treated as a go-ahead to accept the
    IP address rather than a rejection.
  Keeps a copy of Internet BOOTP requests so that the options can
    be copied across to the DHCPDISCOVER if required.
Admin:
  Header export required by Internet 5.21 and IPConfig 0.15
  Requires Internet 5.21.
  Requires TCPIPLibs 5.11.
  Requires IPConfig 0.15.
  Add module after all other expansion card networking modules and
    any attempt to BOOTP will be transparently upgraded to DHCP.


Version 0.01. Tagged as 'DHCP-0_01'
@
text
@d386 1
d396 1
@


1.1
log
@Initial revision
@
text
@d33 1
d83 3
d178 1
a178 1
static const char *dhcp_state_name(const dhcp_interface *di)
d241 1
d245 1
d440 5
@


1.1.1.1
log
@  Fully functional DHCP client.
Detail:
  Implements the Dynamic Host Configuration Protocol (RFC2131 and RFC2132)
  This module usurps the Internet module's implementation of BOOTP in order
    to use the superior DHCP protocol.
Admin:
  Requires Internet 5.20 or later.
    (RiscOS/Sources/Networking/AUN/Internet  tag: Internet-5_20)
  Requires TCPIPLibs 5.09 or later.
    (RiscOS/Sources/Libs/TCPIPLibs  tag: TCPIPLibs-5_09)
  

Tagged as DHCP-0_00

@
text
@@
