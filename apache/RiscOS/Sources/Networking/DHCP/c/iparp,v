head	1.8;
access;
symbols
	DHCP-0_27:1.8
	DHCP-0_26:1.8
	DHCP-0_25:1.8
	DHCP-0_24:1.7
	DHCP-0_23:1.6
	DHCP-0_22:1.5
	RO_5_07:1.4
	DHCP-0_21:1.4
	DHCP-0_20:1.4
	DHCP-0_19:1.4
	DHCP-0_18:1.4
	dellis_autobuild_BaseSW:1.4
	DHCP-0_17:1.4
	DHCP-0_16:1.4
	DHCP-0_15:1.4
	sbrodie_sedwards_16Mar2000:1.4
	DHCP-0_14:1.4
	DHCP-0_13:1.4
	DHCP-0_12:1.4
	dcotton_autobuild_BaseSW:1.4
	DHCP-0_11:1.4
	DHCP-0_10:1.4
	DHCP-0_09:1.3
	DHCP-0_08:1.3
	DHCP-0_07:1.3
	DHCP-0_06:1.3
	DHCP-0_05:1.3
	DHCP-0_04:1.2
	DHCP-0_03:1.2
	DHCP-0_02:1.2
	DHCP-0_01:1.2
	DHCP-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2013.09.05.19.23.06;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	U4CSaZZlAOLfEh4x;

1.7
date	2013.09.04.07.10.38;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	Mw18urjsIckYC54x;

1.6
date	2012.09.15.10.27.17;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	axcbDoyNNXkO5Ckw;

1.5
date	2012.07.19.10.27.43;	author rgriffin;	state Exp;
branches;
next	1.4;
commitid	MFH9W84jn7sEX9dw;

1.4
date	99.07.09.09.27.22;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	99.06.25.13.24.47;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.03.30.12.41.16;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.03.26.16.10.39;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.26.16.10.39;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Internationalised

Version 0.25. Tagged as 'DHCP-0_25'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *  DHCP (iparp.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "sys/dcistructs.h"
#include "sys/file.h"
#include "sys/socket.h"
#include "sys/sysctl.h"
#include "net/if.h"
#include "net/if_dl.h"
#include "net/if_types.h"
#include "net/route.h"
#include "netinet/in.h"
#include "netinet/if_ether.h"
#include "arpa/inet.h"
#include "protocols/dhcp.h"
#include "sys/errno.h"
#include "socklib.h"

#include "dhcpintern.h"
#include "interfaces.h"
#include "packets.h"
#include "consts.h"
#include "module.h"
#include "sockets.h"
#include "iparp.h"

/* This code has been adapted from the ARP command-line utility
 *
 * It extracts the ARP cache from the Internet module and then searches through it
 * for the address of the proposed IP address.  arp_for_ip will return 0 if the IP
 * address does not appear in the ARP cache or if it is there and the hardware
 * address matches our local hardware address for the interface.  It returns -1
 * otherwise, indicating that the address is believed to be in and that we should
 * send a DHCPDECLINE to the server which offered it to us.
 *
 */

static char *iparp_get_arp_cache(size_t *needed)
{
        char *buf;
	int mib[6];
	mib[0] = CTL_NET;
	mib[1] = PF_ROUTE;
	mib[2] = 0;
	mib[3] = AF_INET;
	mib[4] = NET_RT_FLAGS;
	mib[5] = RTF_LLINFO;

	if (sysctl(mib, sizeof(mib)/sizeof(*mib), NULL, needed, NULL, 0) < 0) {
	        trace(("sysctl(1) -> %d\n", errno));
	        return NULL;
	}
	if (*needed == 0)
		return NULL; /* Avoid bogus error report in trace */

	buf = malloc(*needed);
	if (buf != NULL) {
		if (sysctl(mib, sizeof(mib)/sizeof(*mib), buf, needed, NULL, 0) < 0) {
	        	trace(("sysctl(2) -> %d\n", errno));
		        free(buf);
		        buf = NULL;
		}
	}
	else {
	        trace(("iparp: malloc failed (needed %d)\n", *needed));
	}

	return buf;
}

static int iparp_search(char *buf, char *lim, u_long sought, void *dib_address, int write_ea)
{
	char *next;
	struct rt_msghdr *rtm;
	struct sockaddr_inarp *sin;
	struct sockaddr_dl *sdl;

	for (next = buf; next < lim; next += rtm->rtm_msglen) {
		rtm = (struct rt_msghdr *)next;
		sin = (struct sockaddr_inarp *)(rtm + 1);
		sdl = (struct sockaddr_dl *)(sin + 1);
		if (sought != sin->sin_addr.s_addr)
			continue;
		if (sdl->sdl_alen) {
		        if (write_ea) {
		                memcpy(dib_address, LLADDR(sdl), sizeof(struct ether_addr));
		                return 0;
		        }
			else if (memcmp(LLADDR(sdl), dib_address, sizeof(struct ether_addr)) == 0) {
			        /* OK - ARP entry matches us */
			        trace(("iparp: Local ARP cache has our address and it's right\n"));
			        break;
			}
			trace(("iparp: Local ARP cache knows this IP address and it's WRONG\n"));
			trace(("iparp: iparp recommends that we decline this address\n"));
			return -1;
		}
		break;
	}

	/* OK - we are happy - there were no conflicts in the local ARP cache */
	return 0;
}

/*
 * RG: changed to take a DIB as 1st parameter instead of interface block
 * This is so we can do an ARP lookup after deleting an interface
*/
int arp_for_ip(Dib *dib, u_long addr)
{
        int res;
        char *buf;
	size_t needed;

	/* Should we attempt to force a network ARP lookup to find this address first? */

	buf = iparp_get_arp_cache(&needed);
	if (buf == NULL) {
	        /* Unable to retrieve ARP cache - allow address to go through as we don't know */
	        trace(("iparp: Unable to read ARP cache from Internet module\n"));
	        res = 0;
	}
	else {
		res = iparp_search(buf, buf + needed, addr, dib->dib_address, 0);
		free(buf);
	}

	return res;
}


int iparp_lookup_local_ip_address(struct in_addr ia, struct ether_addr *ea)
{
        int res;
        char *buf;
	size_t needed;

	buf = iparp_get_arp_cache(&needed);
	if (buf == NULL) {
	        /* Unable to retrieve ARP cache - allow address to go through as we don't know */
	        trace(("iparp: Unable to read ARP cache from Internet module\n"));
	        res = 0;
	}
	else {
		res = iparp_search(buf, buf + needed, ia.s_addr, ea, 1);
		free(buf);
	}

	return res;
}
@


1.7
log
@Makefile recreated from fragments
Renamed dhcpextern.h to DHCP.h so the shared makefiles can export it without needing a different source and target filename.

Version 0.24. Tagged as 'DHCP-0_24'
@
text
@a44 1
#include "dhcperrors.h"
@


1.6
log
@Line up a few comments
No code changes, retagged as DHCP-0_23.
@
text
@d43 1
a43 1
#include "dhcp.h"
@


1.5
log
@Added -p switch to DHCPExecute command, that causes DHCP to assign
a private IP address in the event of DHCP discovery timing out.
Changed DHCP discovery timeout from 10 minutes to 20 seconds.

Version 0.22. Tagged as 'DHCP-0_22'
@
text
@d78 2
a79 1
	if (*needed == 0) return NULL;	// RG - avoid bogus error report in log
@


1.4
log
@* Ignores DHCPACKS from incorrect servers.
* DHCP_GetOption and associated internal calls support sub-options and
  extended options.
* Random time intervals more uniformly spread.
* Time reports in *DHCPInfo were incorrect when real-time clock had changed
  since module initialisation.
* Server priority option supported.
* CMHG file optimised - syntax not duplicated.

Version 0.10. Tagged as 'DHCP-0_10'
@
text
@d78 2
d129 5
a133 1
int arp_for_ip(dhcp_interface *di, DHCP *d)
d148 1
a148 1
		res = iparp_search(buf, buf + needed, d->yiaddr, di->dib->dib_address, 0);
d155 1
@


1.3
log
@  Support for DHCPINFORM
  Dynamic leasing behaviour brought in line with DHCP specification
Detail:
  New *-command *DHCPExecute to enable CLI launching of DHCP interface
    control.
  Output of *DHCPInfo tidied up and irrevelant timer info is suppressed.
  The algorithm for deciding which offer to accept (where multiple offers
    are received) has been significantly enhanced (and moved to voting.c)
    If a previous offer from a server has been DHCPNAK'd by something else
    then the server offering the dodgy IP address is blacklisted and will
    no longer be preferred to a server which isn't blacklisted.
  DHCP module will request and prefer offers of an existing IP address
    configuration wherever possible.
  DHCP module will initialise an interface into the INITREBOOT/REBOOTING
    states if it is asked to take control of an interface which has
    already been configured externally.
  IP lease length suggestions are no longer sent in appropriate messages.
    The server is trusted to choose an appropriate value.
  The DHCP module is more careful to insert appropriate options into each
    message.  It is no longer in breach of RFC2131 in this respect.
  Timer values for renew and rebind times are now inferred automatically
    where necessary (server doesn't have to send them) and are now correct.
  DHCPRELEASE and DHCPDECLINE now include a textual message indicating the
    reason for the message's generation.
  Where allowed, outgoing messages contain a client class identifier to
    enable the server to vary configuration information depending on the
    client hardware/software type.  Currently, this information is the
    output of OS_Byte 0.
  In the SWI interface for examining DHCP packets, a pointer to a specific
    packet to examine may be supplied instead of an interface identifier
    (depending on a flag bit)
  New SWI DHCP_Inform for sending DHCPINFORM messages to arbitrary servers
    in order to enable retrieval of configuration information when the IP
    address has been established via other means (eg. from NVRAM).
  DHCP module is now capable of deleting IP addresses from interfaces.
  DHCP module will cede control of an interface if something else changes
    the interface's address and send a message to the server indicating
    that the lease is being relinquished.
  DHCP will trap the Internet (5.26 and later) module's panic service call
    when a duplicate IP address is detected on the network, and resolve
    the situation (send the server DHCPDECLINE and deconfigure the interface
    and restart address discovery) if it was controlling that interface.
  Transaction ID generation improved (uses interface MAC address to
    reduce chance of duplication with other hosts)
  MAC address discovery code added.
  DHCP module attempts to unicast packets wherever possible.
  Retry delays adjusted to conform more closely to spec (RFC2131)
  Possible hole in state table that IPConfig triggered which caused several
    DHCPDISCOVER messages to be sent in succession very quickly has been
    closed.
  Co-operates with Internet 5.26 to ensure that callers of the Internet
    module's BOOTP ioctl are returned sensible error values so that they
    no longer need to probe the DHCP module independently to discover
    whether an interface has been configured successfully or not.
Admin:
  Requires Internet 5.26
  Requires TCPIPLibs 5.19

Version 0.05. Tagged as 'DHCP-0_05'
@
text
@d87 1
a87 1
	        trace(("iparp: malloc failed\n"));
@


1.2
log
@  Integration with IPConfig completed.
  Header export added.
Detail:
  Blocking added to enable IPConfig to work correctly.
  Header file exported containing states and SWI identifiers.
  Brings loopback interface up so that it can bind to the DHCP client
    port (failure to have any AF_INET interfaces configured causes
    the bind() call to fail, even when INADDR_ANY is specified)
  Failure to read ARP cache now treated as a go-ahead to accept the
    IP address rather than a rejection.
  Keeps a copy of Internet BOOTP requests so that the options can
    be copied across to the DHCPDISCOVER if required.
Admin:
  Header export required by Internet 5.21 and IPConfig 0.15
  Requires Internet 5.21.
  Requires TCPIPLibs 5.11.
  Requires IPConfig 0.15.
  Add module after all other expansion card networking modules and
    any attempt to BOOTP will be transparently upgraded to DHCP.


Version 0.01. Tagged as 'DHCP-0_01'
@
text
@d93 1
a93 1
static int iparp_search(char *buf, char *lim, u_long sought, const void *dib_address)
d107 5
a111 1
			if (memcmp(LLADDR(sdl), dib_address, sizeof(struct ether_addr)) == 0) {
d142 21
a162 1
		res = iparp_search(buf, buf + needed, d->yiaddr, di->dib->dib_address);
@


1.1
log
@Initial revision
@
text
@d40 2
d75 1
d81 1
d86 3
d133 3
a135 2
	        /* Unable to retrieve ARP cache - force rejection as we can't be sure */
	        res = -1;
@


1.1.1.1
log
@  Fully functional DHCP client.
Detail:
  Implements the Dynamic Host Configuration Protocol (RFC2131 and RFC2132)
  This module usurps the Internet module's implementation of BOOTP in order
    to use the superior DHCP protocol.
Admin:
  Requires Internet 5.20 or later.
    (RiscOS/Sources/Networking/AUN/Internet  tag: Internet-5_20)
  Requires TCPIPLibs 5.09 or later.
    (RiscOS/Sources/Libs/TCPIPLibs  tag: TCPIPLibs-5_09)
  

Tagged as DHCP-0_00

@
text
@@
