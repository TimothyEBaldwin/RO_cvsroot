head	1.6;
access;
symbols
	DHCP-0_27:1.6
	DHCP-0_26:1.6
	DHCP-0_25:1.6
	DHCP-0_24:1.5
	DHCP-0_23:1.4
	DHCP-0_22:1.4
	RO_5_07:1.4
	DHCP-0_21:1.4
	DHCP-0_20:1.4
	DHCP-0_19:1.4
	DHCP-0_18:1.4
	dellis_autobuild_BaseSW:1.4
	DHCP-0_17:1.4
	DHCP-0_16:1.4
	DHCP-0_15:1.4
	sbrodie_sedwards_16Mar2000:1.4
	DHCP-0_14:1.4
	DHCP-0_13:1.4
	DHCP-0_12:1.4
	dcotton_autobuild_BaseSW:1.4
	DHCP-0_11:1.4
	DHCP-0_10:1.4
	DHCP-0_09:1.2
	DHCP-0_08:1.2
	DHCP-0_07:1.2
	DHCP-0_06:1.1
	DHCP-0_05:1.1;
locks; strict;
comment	@# @;


1.6
date	2013.09.05.19.23.06;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	U4CSaZZlAOLfEh4x;

1.5
date	2013.09.04.07.10.38;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	Mw18urjsIckYC54x;

1.4
date	99.07.22.16.00.56;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	99.07.09.09.27.26;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	99.06.28.14.04.07;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	99.06.25.13.24.50;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Internationalised

Version 0.25. Tagged as 'DHCP-0_25'
@
text
@/* Copyright 1999 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *  DHCP (voting.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <stdbool.h>
#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "sys/socket.h"
#include "net/if.h"
#include "protocols/dhcp.h"
#include "sys/dcistructs.h"
#include "netinet/in.h"
#include "arpa/inet.h"

#include "dhcpintern.h"
#include "interfaces.h"
#include "packets.h"
#include "voting.h"

static bool dhcp_vote_is_null_ip(struct in_addr ia)
{
        return ia.s_addr == INADDR_ANY;
}

void dhcp_add_to_blacklist(dhcp_interface *di, struct in_addr ia)
{
        size_t i;

	trace(("Adding server %s to the blacklist\n", inet_ntoa(ia)));

        for (i = 0; i < blacklist_MAX; ++i) {
                struct in_addr *iap = &di->blacklist.server[i];
                if (memcmp(iap, &ia, sizeof(*iap)) == 0) {
                        /* Already in blacklist */
                        return;
                }
                else if (dhcp_vote_is_null_ip(*iap)) {
                        /* Found a hole in the blacklist */
                        *iap = ia;
                        return;
                }
        }

	/* Expire oldest entry, and add new entry at the end */
        (void) memmove(&di->blacklist.server[0], &di->blacklist.server[1],
        	sizeof(di->blacklist.server[0]) * (blacklist_MAX - 1));
        di->blacklist.server[blacklist_MAX - 1] = ia;
}

void dhcp_empty_blacklist(dhcp_interface *di)
{
        trace(("Emptying blacklist\n"));
        (void) memset(&di->blacklist, 0, sizeof(di->blacklist));
}

static bool dhcp_vote_server_in_blacklist(dhcp_interface *di, const DHCP *offer)
{
        size_t i;
        struct in_addr si;

	if (!dhcp_find_server_identifier(offer, &si)) {
	        return true;
        }

        for (i=0; i < blacklist_MAX; ++i) {
                if (si.s_addr == di->blacklist.server[i].s_addr) {
                        return true;
                }
        }
        return false;
}

void dhcp_vote_notify_offer_accepted(dhcp_interface *di)
{
        /* If we have been forced to accept an offer from somebody in the
         * blacklist, then all of the available servers must presumably
         * also be in the blacklist, so we clear it out and try to work
         * out the friendly server list again
         */
        if (dhcp_vote_server_in_blacklist(di, &di->offer)) {
                dhcp_empty_blacklist(di);
        }
}

/* Compare the two DHCPOFFER messages and decide whether the new one is "better"
 * than the currently preferred offer or not.
 */

int dhcp_vote(dhcp_interface *di, const DHCP *offer)
{
        dhcp_time new_expiry, current_expiry;
       	bool current_in_blacklist, new_in_blacklist;
	bool current_has_vendor_options, new_has_vendor_options;
	bool current_is_bootp, new_is_bootp;
	int current_priority, new_priority;

        if (di->offer.op != BOOTREPLY) {
                /* We haven't had any other offers yet - remember this one */
                return vote_PREFER;
        }

	/* Prefer non-blacklisted servers */
	current_in_blacklist = dhcp_vote_server_in_blacklist(di, &di->offer);
	new_in_blacklist = dhcp_vote_server_in_blacklist(di, offer);

	if (current_in_blacklist == false && new_in_blacklist == true) {
	        trace(("Rejecting blacklisted server\n"));
	        return vote_REJECT;
	}

	if (current_in_blacklist == true && new_in_blacklist == false) {
	        trace(("Preferring non-blacklisted server\n"));
	        return vote_PREFER;
	}

	/* Prefer according to server priority option (draft-ietf-dhc-sso-01.txt) */
	dhcp_find_server_priority(&di->offer, &current_priority);
	dhcp_find_server_priority(offer, &new_priority);
	if (new_priority > current_priority) {
		trace(("Preferring server with higher priority\n"));
		return vote_PREFER;
	}
	else if (new_priority < current_priority) {
		trace(("Rejecting server with lower priority\n"));
		return vote_REJECT;
	}

	/* Prefer our current IP address */
	if (!dhcp_vote_is_null_ip(di->preferred_ip)) {
	        if (offer->yiaddr == di->preferred_ip.s_addr && di->offer.yiaddr != di->preferred_ip.s_addr) {
	                /* This is the one we wanted - prefer it */
	                return vote_PREFER;
	        }
	        if (offer->yiaddr != di->preferred_ip.s_addr && di->offer.yiaddr == di->preferred_ip.s_addr) {
	                /* This isn't the one we wanted and we have a preferred one - reject it */
	                return vote_REJECT;
	        }
	}

	/* Prefer DHCP over BOOTP */
	current_is_bootp = !dhcp_find_option(&di->offer, OPTION_DHCPMESSAGETYPE);
	new_is_bootp = !dhcp_find_option(offer, OPTION_DHCPMESSAGETYPE);

	if (current_is_bootp == false && new_is_bootp == true) {
		trace(("Rejecting BOOTP server\n"));
		return vote_REJECT;
	}

	if (current_is_bootp == true && new_is_bootp == false) {
		trace(("Preferring DHCP server\n"));
		return vote_PREFER;
	}


	/* Prefer a server providing vendor-specific options */
	current_has_vendor_options = !!dhcp_find_option(&di->offer, OPTION_VENDORSPECIFIC);
	new_has_vendor_options = !!dhcp_find_option(offer, OPTION_VENDORSPECIFIC);

	if (current_has_vendor_options == false && new_has_vendor_options == true) {
		trace(("Preferring server providing vendor-specific options\n"));
		return vote_PREFER;
	}

	if (current_has_vendor_options == true && new_has_vendor_options == false) {
		trace(("Rejecting server not providing vendor-specific options\n"));
		return vote_REJECT;
	}


	/* Prefer a longer lease (DHCP only) */

	if (!new_is_bootp) {  /* Old must also be DHCP or we would have already preferred this one */

		if (dhcp_find_lease_expiry(offer, &new_expiry, OPTION_IPADDRLEASETIME) == NULL) {
		        /* new message didn't have an expiry date suggestion! */
		        return vote_REJECT;
		}

		if (dhcp_find_lease_expiry(&di->offer, &current_expiry, OPTION_IPADDRLEASETIME) == NULL) {
		        /* Current reply didn't have an expiry suggestion! */
			return vote_PREFER;
		}

 		if (new_expiry > current_expiry) {
	    		/* This was a longer lease offer - prefer it */
	        	return vote_PREFER;
		}
	}

	/* Prefer the server who responded first */
	return vote_REJECT;
}
@


1.5
log
@Makefile recreated from fragments
Renamed dhcpextern.h to DHCP.h so the shared makefiles can export it without needing a different source and target filename.

Version 0.24. Tagged as 'DHCP-0_24'
@
text
@a37 1
#include "dhcperrors.h"
@


1.4
log
@Tweaked to build with latest TCPIPLibs
@
text
@d36 1
a36 1
#include "dhcp.h"
@


1.3
log
@* Ignores DHCPACKS from incorrect servers.
* DHCP_GetOption and associated internal calls support sub-options and
  extended options.
* Random time intervals more uniformly spread.
* Time reports in *DHCPInfo were incorrect when real-time clock had changed
  since module initialisation.
* Server priority option supported.
* CMHG file optimised - syntax not duplicated.

Version 0.10. Tagged as 'DHCP-0_10'
@
text
@d29 1
@


1.2
log
@* Added initial delay in INIT-REBOOT state to match INIT state.
* Stopped extra DHCPREQUESTs being generated by ioctl calls in REBOOTING state.
* Don't reject BOOTP packets just because they don't have a cookie. Treat
  those without the correct cookie as containing no options.
* Reject BOOTP packets < 300 bytes, as per RFC 1542.
* Treat BOOTP responses in a more considered fashion - old versions would go
  nuts as soon as they saw any non-DHCP response. BOOTP replies now treated as
  (not very good) offers. BOOTP responses with correct address also accepted
  in REBINDING state.
* Decline DHCPACKs with no server identifier.
* Add server to blacklist if its offer ended up being DHCPDECLINEd for any
  reason.
* Add server to blacklist if we timeout requests.
* Initial boot delay now better randomised (seeded on MAC address), and in the
  range 1-10 seconds, as per RFC 2131.
* Corrected REBOOTING and REQUESTING back-off timers - first retransmission
  was too slow.
* DHCPREQUEST packets now have secs filled in correctly in REBOOTING state.
* Voting rules extended - prefer DHCP servers to BOOTP servers and prefer
  servers providing vendor options to those who don't.

Version 0.07. Tagged as 'DHCP-0_07'
@
text
@d112 5
a116 8
        dhcp_time new_expiry;
       	dhcp_time current_expiry;
       	bool current_in_blacklist;
       	bool new_in_blacklist;
	bool current_has_vendor_options;
	bool new_has_vendor_options;
	bool current_is_bootp;
	bool new_is_bootp;
d135 12
@


1.1
log
@  Support for DHCPINFORM
  Dynamic leasing behaviour brought in line with DHCP specification
Detail:
  New *-command *DHCPExecute to enable CLI launching of DHCP interface
    control.
  Output of *DHCPInfo tidied up and irrevelant timer info is suppressed.
  The algorithm for deciding which offer to accept (where multiple offers
    are received) has been significantly enhanced (and moved to voting.c)
    If a previous offer from a server has been DHCPNAK'd by something else
    then the server offering the dodgy IP address is blacklisted and will
    no longer be preferred to a server which isn't blacklisted.
  DHCP module will request and prefer offers of an existing IP address
    configuration wherever possible.
  DHCP module will initialise an interface into the INITREBOOT/REBOOTING
    states if it is asked to take control of an interface which has
    already been configured externally.
  IP lease length suggestions are no longer sent in appropriate messages.
    The server is trusted to choose an appropriate value.
  The DHCP module is more careful to insert appropriate options into each
    message.  It is no longer in breach of RFC2131 in this respect.
  Timer values for renew and rebind times are now inferred automatically
    where necessary (server doesn't have to send them) and are now correct.
  DHCPRELEASE and DHCPDECLINE now include a textual message indicating the
    reason for the message's generation.
  Where allowed, outgoing messages contain a client class identifier to
    enable the server to vary configuration information depending on the
    client hardware/software type.  Currently, this information is the
    output of OS_Byte 0.
  In the SWI interface for examining DHCP packets, a pointer to a specific
    packet to examine may be supplied instead of an interface identifier
    (depending on a flag bit)
  New SWI DHCP_Inform for sending DHCPINFORM messages to arbitrary servers
    in order to enable retrieval of configuration information when the IP
    address has been established via other means (eg. from NVRAM).
  DHCP module is now capable of deleting IP addresses from interfaces.
  DHCP module will cede control of an interface if something else changes
    the interface's address and send a message to the server indicating
    that the lease is being relinquished.
  DHCP will trap the Internet (5.26 and later) module's panic service call
    when a duplicate IP address is detected on the network, and resolve
    the situation (send the server DHCPDECLINE and deconfigure the interface
    and restart address discovery) if it was controlling that interface.
  Transaction ID generation improved (uses interface MAC address to
    reduce chance of duplication with other hosts)
  MAC address discovery code added.
  DHCP module attempts to unicast packets wherever possible.
  Retry delays adjusted to conform more closely to spec (RFC2131)
  Possible hole in state table that IPConfig triggered which caused several
    DHCPDISCOVER messages to be sent in succession very quickly has been
    closed.
  Co-operates with Internet 5.26 to ensure that callers of the Internet
    module's BOOTP ioctl are returned sensible error values so that they
    no longer need to probe the DHCP module independently to discover
    whether an interface has been configured successfully or not.
Admin:
  Requires Internet 5.26
  Requires TCPIPLibs 5.19

Version 0.05. Tagged as 'DHCP-0_05'
@
text
@d116 4
a119 5

	if (dhcp_find_lease_expiry(offer, &new_expiry, OPTION_IPADDRLEASETIME) == NULL) {
	        /* new message didn't have an expiry date suggestion! */
	        return vote_REJECT;
	}
d126 1
a129 1

d140 1
d152 12
a163 3
	if (dhcp_find_lease_expiry(&di->offer, &current_expiry, OPTION_IPADDRLEASETIME) == NULL) {
	        /* Current reply didn't have an expiry suggestion! */
        	return vote_PREFER;
d166 34
a199 3
 	if (new_expiry > current_expiry) {
	        /* This was a longer lease offer - prefer it */
	        return vote_PREFER;
d202 1
@
