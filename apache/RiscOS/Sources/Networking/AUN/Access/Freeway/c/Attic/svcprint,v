head	4.4;
access;
symbols
	RO_5_07:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	Ursula_RiscPC:4.3.0.4
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.2
	celkins_Freeway-0_28:4.3
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.2
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	99.08.16.15.11.48;	author sbrodie;	state dead;
branches;
next	4.3;

4.3
date	98.06.16.15.57.11;	author celkins;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.11.38.34;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.26.40;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.26.40;	author nturton;	state Exp;
branches;
next	4.1.1.2;

4.1.1.2
date	96.11.05.15.39.31;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.58.47;	author nturton;	state Exp;
branches;
next	4.1.3.2;

4.1.3.2
date	96.11.08.17.19.55;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@  Much tidying up, and support for new CMOS bit to prevent Freeway setting
    default addresses on interfaces.
Detail:
  Removed obsolete source files and headers.
  CMHG file pulls in details from global header files and VersionNum.
  CMHG uses proper veneers for functions and generates the header file
    for module.c to relieve it from having to mis-declare the veneer
    functions.
  Debugging is now entirely DebugLib based.
  Fixed short buffer which would cause the machine to die with aborts
    if an error message was just a bit too long for it.
Admin:
  Requires HdrSrc-0_28 or later.
  Tested in Ursula ROM build.

Version 0.29. Tagged as 'Freeway-0_29'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Header: /home/renaissa/cvsroot/RiscOS/Sources/Networking/AUN/Access/Freeway/c/svcprint,v 4.3 1998/06/16 15:57:11 celkins Exp $
 * $Source: /home/renaissa/cvsroot/RiscOS/Sources/Networking/AUN/Access/Freeway/c/svcprint,v $
 *
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * svcprint.c
 *
 * print debugging information down the TML tube link.
 *
 * provides:
 *	     %s - string
 *	     %C - character in range 20->7F (space printed if outside range)
 *	     %c - any character
 *	     %X - reverses order of bytes if >2 (or >4) specified as width
 *	     %x - hex
 *	     %B - reverses order of bytes if >2 (or >4) specified as width
 *	     %b - binary
 *	     %D - reverses order of bytes if >2 (or >4) specified as width
 *	     %d - decimal
 *
 * field width can be specified by placing a decimal number after the "%"
 * character... if the width is started by a "0" then numbers are padded
 * with "0"...
 *
 * standard format specifiers o,u,e,f and g are NOT supported
 *
 * $Log: svcprint,v $
 * Revision 4.3  1998/06/16 15:57:11  celkins
 * Unfortunately, this logs changes that were made some time ago.
 *
 * Added facility for clients to register a descriptive string for a type.
 * (Printers are still special cased, since I've not modified the client code).
 * Added support for use of a single point to point interface.
 *
 * Removed local copies of standard library functions, and linked against
 * library instead.
 *
 * Revision 1.1  95/01/26  09:42:34  pwain
 * Initial revision
 * 
 * Revision 1.1  94/12/02  09:57:20  kwelton
 * Initial revision
 * 
 */
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "svcdebug.h"

#ifndef NULL
# define NULL	((void *)0)
#endif

#ifdef DEBUG
int debug = 1;
#endif

/**********************************************************************/

static unsigned short ntohs(unsigned short n)
{
    return(((n << 8) & 0xff00) | ((n >> 8) & 0x00ff));
}

/**********************************************************************/

static unsigned long ntohl(unsigned long n)
{
    return(((n >> 24) & 0x000000ff) | ((n >> 8) & 0x0000ff00) |
	   ((n << 8) & 0x00ff0000) | ((n << 24) & 0xff000000) );
}

/**********************************************************************/

/*
 * call processor mode independant character output routine
 */
static void oswrch(unsigned char ch)
{
    _kernel_swi_regs regset;

    /*
     * use HostFS_WriteC (SWI 0x40102) to print the character
     */
    regset.r[0] = ch;
    (void)_kernel_swi(0x40102, &regset, &regset);
}

/**********************************************************************/

/*
 * Printn prints a number n in base b, minimum width w adding pad chars
 * if needed.
 */
static void printn(unsigned n, unsigned b, int w, char pad)
{
    if( n >= b )
    {
	printn(n / b, b, --w, pad);
	oswrch("0123456789abcdef"[n % b]);
    }
    else
    {
	while (--w > 0)
	    oswrch(pad);

	oswrch("0123456789abcdef"[n]);
    }
}

/**********************************************************************/

static void prf(char *format, unsigned *argp, ...)
{
    register int b; /* base to be used when displaying numbers */
    register int c; /* current character read from format string */
    register int w; /* field width */
    char pad;	    /* field padding character */
    unsigned val;   /* value of argument */

  loop:
    val = *argp;
    w = 0;
    pad = ' ';

    while( (c = *format++) != '%' )
    {
	if( c == '\0' )
	    return;
	if( c == '\n' )
	    oswrch('\r');
	oswrch(c);
    }

  again:
    /*
     * we have a special format command
     */
    c = *format++;
    switch( c )
    {
      case 's':
	{
	    /* string */
	    char *p = (char *)*argp++;
	    int	 width = 0;

	    if (p != NULL)
	    {
		/* NOT a NULL pointer */
		while (*p)
		{
		    oswrch(*p++);
		    width++;
		}
	    }

	    while( width++ < w )
		oswrch(' ');
	    goto loop;
	}

      case 'C':
	if( (*argp < ' ') || (*argp > '~') )
	{
	    oswrch(' ');
	    argp++;
	    goto loop;
	}

      case 'c':
	/* character */
	oswrch(*argp++);
	goto loop;

      case '0':
	if (w == 0)
	    pad = '0';

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
	/* field width */
	w = (w * 10) + ((int) c - '0');
	goto again;

      case 'X':
	/* hex number */
	if (w > 4)
	    val = (unsigned)ntohl(val);
	else
	{
	    if (w > 2)
		val = (unsigned)ntohs(val);
	}

	/*
	 * NB
	 *
	 * fall through to set base
	 */

      case 'x':
	/* hex number */
	b = 16;
	goto number;

      case 'B':
	/* binary number */
	if (w > 4)
	    val = (unsigned)ntohl(val);
	else
	{
	    if( w > 2 )
		val = (unsigned)ntohs(val);
	}

	/*
	 * NB
	 *
	 * fall through to set base
	 */

      case 'b':
	/* binary number */
	b = 2;
	goto number;

      case 'D':
	/* decimal number */
	if (w > 4)
	    val = (unsigned)ntohl(val);
	else
	{
	    if (w > 2)
		val = (unsigned)ntohs(val);
	}

	/*
	 * NB
	 *
	 * fall through to set base
	 */

      case 'd':
	b = 10;
	/*
	 * NB
	 *
	 * fall through to write number
	 */

      number:
	printn(val,b,w,pad);
	argp++;

	break;
    } /* switch */

    goto loop;
}

/**********************************************************************/

/*
 * strprint - print a string to the tube podule
 */
static void strprint(char *s)
{
    _kernel_swi_regs r;

    r.r[0] = (int)s;
    (void)_kernel_swi(0x40104, &r, &r);
}

/**********************************************************************/

#if 0
# define USETUBE
#endif /* 0/1 */

void Printf(char *format, ...)
{
    unsigned *argp = (unsigned *)&format;

#ifdef USETUBE
    _kernel_swi_regs reglist;
    _kernel_oserror *err;
/*     int s = ensure_irqs_off(); */

    if( (err = _kernel_swi(0x40100, &reglist, &reglist)) != NULL )
    {
	prf("HostVDU: ", 0);
	prf(err->errmess, 0);
/*	restore_irqs(s); */
	return;
    }
#endif /* USETUBE */

    int s = ensure_irqs_off();
    prf(format, (argp + 1));
    restore_irqs(s);

#ifdef USETUBE
    if( (err = _kernel_swi(0x40101, &reglist, &reglist)) != NULL )
    {
	prf("TubeVDU: ", 0);
	prf(err->errmess, 0);
/*	restore_irqs(s); */
	return;
    }
/*    restore_irqs(s); */
#endif /* USETUBE */
}

/**********************************************************************/

#define	FCMAX	40
#ifdef	GPROF
#define FN_ENTRY_SIZE (5+3)/* -p adds an extra 3 words to procedure entry */
#else	/* GPROF */
#define FN_ENTRY_SIZE (5)
#endif	/* GPROF */

backtrace(int dummy)
{
    int frames = FCMAX;
    int *fp, *ip, i;
    int linechars = 0;
    char *sep = "\021\006Stack backtrace: ";
    char card[81];

    fp = (int *)&dummy - 1;  /* Points at stacked entry mask pointer */
    fp = (int *)fp[-3];	 /* Points at	  ditto of caller */

    /*
     * NOTE
     *
     * this stack backtracing loop works only
     * for code from the Norcroft compiler.
     */

    /* limit the scan number of frames backtraced  */
    while( frames-- >= 0 )
    {
	int *next_fp;
	char *name = NULL;

	ip = ((int *)(fp[0] & 0x03fffffc)) - 3;

	/* ip now points at stmdb sp!, { .., fp, ip, lr, pc } */
	for( i = FN_ENTRY_SIZE; i > 0; i-- )
	{
	    if( (ip[0] & 0xffffff00) == 0xff000000 )
	    {
		int len = ip[0] & 0xff;
		if( (len % 4) == 0 )
		{
		    name = (char *)ip - len;
		    break;
		}
	    }
	    ip--;
	}

	if (name == NULL)
	    sprintf(card, "%s<fn@@%08x>", sep, ip+3);
	else
	    sprintf(card, "%s%s", sep, name);

	sep = ", ";

	linechars += strlen(card);
	if( linechars >= 80 )
	{
	    strprint(",\r\n	");
	    strprint(card + 2);
	    linechars = 5;
	}
	else
	    strprint(card);

	/* TRACE */
	if( !strcmp(name, "callb_handler") )
	{
	    /*
	     * I think this is what is breaking
	     * the debugging module
	     */
	    strprint(" (and that's as far as we're going)");
	    break;
	}

	next_fp = (int *)(fp[-3]);
	if (next_fp == 0)
	    break;
	else
	{
#ifdef __KERNEL__
	    if( (next_fp < fp) ||
	       (next_fp > (int *)((int)&u + (UPAGES*NBPG))) )
#else
	    if( (next_fp < fp ) )
#endif
	    {
		Printf("**** broken stack frame fp %08x, next fp %08x ****\n",
		       fp, next_fp);
		break;
	    }
	    fp = next_fp;
	}
    }
    Printf("\021\007\n");
}

/**********************************************************************/

/* EOF svcprint.c */
@


4.3
log
@Unfortunately, this logs changes that were made some time ago.

Added facility for clients to register a descriptive string for a type.
(Printers are still special cased, since I've not modified the client code).
Added support for use of a single point to point interface.

Removed local copies of standard library functions, and linked against
library instead.
@
text
@d17 2
a18 2
 * $Header: /ax/networking:Starling/Freeway/svcprint.c:networking  1.1  $
 * $Source: /ax/networking:Starling/Freeway/svcprint.c: $
d43 11
a53 1
 * $Log:	svcprint.c,v $
@


4.2
log
@Version RO_3_71 taken
@
text
@d17 2
a18 2
 * $Header: /projects2/renaissa/cvsroot/RiscOS/Sources/Networking/AUN/Access/Freeway/c/svcprint,v 4.1.3.2 1996/11/08 17:19:55 nturton Exp $
 * $Source: /projects2/renaissa/cvsroot/RiscOS/Sources/Networking/AUN/Access/Freeway/c/svcprint,v $
d43 1
a43 1
 * :RCS Log discontinued:
@


4.1
log
@Initial revision
@
text
@d17 2
a18 2
 * $Header: /ax/networking:Starling/Freeway/svcprint.c:networking  1.1  $
 * $Source: /ax/networking:Starling/Freeway/svcprint.c: $
d43 1
a43 1
 * $Log:	svcprint.c,v $
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.2
log
@RCS Log keyword removed
@
text
@d43 1
a43 1
 * :RCS Log discontinued:
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@


4.1.1.2
log
@Log keyword removed
@
text
@d43 1
a43 1
 * :RCS Log discontinued:
@
