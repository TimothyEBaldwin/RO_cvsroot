head	4.9;
access;
symbols
	Freeway-0_41:4.9
	Freeway-0_40:4.9
	Freeway-0_39:4.9
	Freeway-0_38:4.9
	Freeway-0_37:4.8
	Freeway-0_36:4.7
	Freeway-0_35:4.7
	RO_5_07:4.7
	Freeway-0_34:4.7
	Freeway-0_33:4.7
	Freeway-0_32:4.6
	Freeway-0_31:4.5
	Freeway-0_30:4.4
	Freeway-0_29:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	Ursula_RiscPC:4.3.0.4
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.2
	celkins_Freeway-0_28:4.3
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.2
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.9
date	2013.08.26.10.28.55;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	5t2rCCsxEEOV0X2x;

4.8
date	2013.04.06.06.44.31;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	RiXDM7HRu9lVkGKw;

4.7
date	2003.02.27.15.02.34;	author rsprowson;	state Exp;
branches;
next	4.6;

4.6
date	2002.12.13.20.41.18;	author rsprowson;	state Exp;
branches;
next	4.5;

4.5
date	2001.11.13.14.44.54;	author dellis;	state Exp;
branches;
next	4.4;

4.4
date	99.08.16.15.11.47;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	98.06.16.15.57.10;	author celkins;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.11.38.33;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.26.40;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.26.40;	author nturton;	state Exp;
branches;
next	4.1.1.2;

4.1.1.2
date	96.11.05.16.16.39;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.58.46;	author nturton;	state Exp;
branches;
next	4.1.3.2;

4.1.3.2
date	96.11.08.17.19.54;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.9
log
@Internationalised non error strings
Freeway looked up its error messages via MessageTrans but for some reason used baked in english everywhere else.
* New function fw_lookup() looks up a token
* Removed Err_FWCAASyn since it had the wrong error number, and (using the Wimp as precedence) can just return configure_BAD_OPTION instead
* Lined up remote nets in *FwShow with remote objects
* Help and Syntax taken from messages file (requires RISC OS 3.60+)
* Other strings now looked up too

Tested with 1 printer, 1 disc, 1 host, 2 remote nets, and brief check of help.
Requires AUNMsgs-0_23.

Version 0.38. Tagged as 'Freeway-0_38'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Freeway (objects.c)
 *
 * Copyright (C) Acorn Computers Ltd. 1992-9
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "sys/uio.h"
#include "sys/socket.h"

#include "netinet/in.h"
#include "net/if.h"
#include "inetlib.h"

#include "module.h"

/**********************************************************************/

static int caseless_strcmp(char *a, char *b)
{
    int d;

    while ( *a || *b )
    {
	d = toupper( *(a++) ) - toupper( *(b++) );
	if ( d )
	    return d;
    }

    return 0;
}

/**********************************************************************/

static void new_object(struct fwtype *f, u_long src, int format,
		       char *title, char *desc, int desclen,
		       int authval, struct object_q **rqp)
{
    struct object_q *rq;

    /* shut the compiler up */
    f = f;
    format = format;

    if( *rqp == 0 )
    {
	rq = (struct object_q *)malloc(sizeof(struct object_q));
	if (rq == 0)
	    return;
	    
	memset((char *)rq, 0, sizeof(struct object_q));
	*rqp = rq;
    }
    else
	rq = *rqp;

    if( title )
    {
	if( rq->r_title && strlen(title) > strlen(rq->r_title) )
	{
	    free(rq->r_title);
	    rq->r_title = 0;
	}

	if( rq->r_title == 0 )
	    rq->r_title = malloc(strlen(title)+1);

	if( rq->r_title )
	    strcpy(rq->r_title, title);
    }

    rq->r_ip.s_addr = src;
    rq->r_desclen = 0;

    if( desclen && desc )
    {
	if( rq->r_desc == 0 )
	    rq->r_desc = malloc(desclen+1);

	if( rq->r_desc )
	{
	    memcpy(rq->r_desc, desc, desclen);
	    rq->r_desclen = desclen;
	}
    }
    rq->r_authval = authval;
    rq->r_validate = REFRESH_INTERVAL + RETRY_INTERVAL;
    rq->r_retries = 0;
    rq->r_inuse = 1;
    rq->r_local=0;
}

/**********************************************************************/

static void send_fw_message(struct fwtype *f, u_long dest, short mtype,
			    int nblocks, char *blocks, int blen, int format)
{
    struct sockaddr_in sin;
    struct rs_msg rs;
    struct msghdr msg;
    struct iovec msgvec[2];
    int i, nvec = 1;


    dprintf(("objects", "SFM> Sending message:"));
    if( format )
	dprintf(("objects", "auth,"));
    else
	dprintf(("objects", "unauth,"));

    if( mtype == REQUEST )
	dprintf(("objects", "request\n"));
    if( mtype == ADD )
	dprintf(("objects", "add\n"));
    if( mtype == REMOVE )
	dprintf(("objects", "remove\n"));
    if( mtype == REFRESH )
	dprintf(("objects", "refresh\n"));

    memset((char *)&rs, 0, sizeof(rs));
    rs.rs_msgid = mtype;
    rs.rs_type = f->fw_number;
    /* cast added 22/7/94 gw */
    rs.rs_format = (short)format;
    rs.rs_nblocks = nblocks;
    msgvec[0].iov_base = (char *)&rs;
    msgvec[0].iov_len  = sizeof(struct rs_msg);
    if( nblocks > 0 )
    {
	msgvec[1].iov_base = blocks;
	msgvec[1].iov_len  = blen;
	nvec = 2;
    }
    sin.sin_family	 = AF_INET;
    sin.sin_port	 = (format == 1) ?
	htons((u_short)FWPORT1) : htons((u_short)FWPORT);
    sin.sin_addr.s_addr	 = dest;
    msg.msg_name	 = (char *)&sin;
    msg.msg_namelen	 = sizeof(sin);
    msg.msg_iov		 = &msgvec[0];
    msg.msg_iovlen	 = nvec;
    msg.msg_accrights	 = 0;
    msg.msg_accrightslen = 0;

    if( dest == INADDR_BROADCAST )
    {
	if( format==0 || !fw.fw_netadrs )
	{
	    for( i = 0; i < fw.fw_ifcnt; i++ )
	    {
		if (fw.fw_ifbcast[i] == INADDR_NONE)
      	        {
         	  dprintf(("objects", "SFM> Called with INADDR_NONE (%s)- skipping\n",fw.fw_ifunit[i]));
		  continue;
		}
		sin.sin_addr.s_addr = fw.fw_ifbcast[i];
		(void) sendmsg(format ? fw.fw_rssock1 : fw.fw_rssock, &msg, 0);
	    }
	}
	else
	{
	    struct address_q *q;
	    for( q = fw.fw_netadrs; q; q = q->q_next )
	    {
		if((q->q_bcast.s_addr) &&  ((q->q_bcast.s_addr) != INADDR_NONE))
		{
		    dprintf(("objects", "SFM> sending message to %s\n",
		        inet_ntoa(q->q_bcast)));
		    sin.sin_addr.s_addr = q->q_bcast.s_addr;
		    (void)sendmsg(format ? fw.fw_rssock1 : fw.fw_rssock,
				  &msg, 0);
		}
	    }
	}
    }
    else
	(void)sendmsg(format ? fw.fw_rssock1 : fw.fw_rssock, &msg, 0);
}

/**********************************************************************/

void do_protocol(struct fwtype *f, u_long dest, struct object_q *rq,
		 int msgid, int format, int rauthval, int skipauth)
{
    int nblocks, mlen;
    char blocks[1024], *b;
    struct object_q *r;
    int titlelen, desclen, authval;

    b = blocks;
    nblocks = 0;
    mlen = 0;
    for( r = f->fw_remobj; r; r = r->r_next )
    {
	if( !r->r_inuse || !r->r_local || (rq && rq != r) ||
	   (rauthval && r->r_authval != rauthval) ||
	   (skipauth && r->r_authval) )
	    continue;

	titlelen = strlen(r->r_title);
	desclen = r->r_desclen;
	authval = r->r_authval;
	if( (mlen + titlelen + desclen + 12) >= sizeof(blocks) )
	{
	    send_fw_message(f, dest, msgid, nblocks, blocks, mlen, format);
	    b = blocks;
	    nblocks = 0;
	    mlen = 0;
	}

	*(short *)b = titlelen;
	*(short *)(b+2) = desclen;
	b += 4;

	/* modified 25/7/94 gw */
	if( format == 1 )
	{
#ifndef AUTH32
	    *(u_short *)b = authval & 0xffff;
	    b += 2;
#else
	    *(u_int *)b = authval;
	    b += 4;
#endif
	}

	memcpy(b, r->r_title, titlelen);
	b += titlelen;
	if( desclen )
	{
	    memcpy(b, r->r_desc, desclen);
	    b += desclen;
	}

        b = (char *) (((unsigned)b + 3) &~ 3);

	nblocks++;
	mlen = b - blocks;
	if (rq)
	    break;
    }

    if( nblocks > 0 )
	send_fw_message(f, dest, msgid, nblocks, blocks, mlen, format);
}

/**********************************************************************/

void process_message(u_long src, struct rs_msg *rsm, int len, int format)
{
    struct object_q **r;
    short mtype = rsm->rs_msgid;
    int n, namelen, desclen, authval, type = rsm->rs_type;
    char name[64], *desc, *b;
    struct fwtype *f;
    int changed = 0;

    /* shut the compiler up */
    (void) len;

    dprintf(("objects", "process message:"));

    if( format )
    {
	dprintf(("objects", "auth,"));
	dprintf(("objects", "val=%d",*(((u_short *)rsm)+4)));
    }
    else
	dprintf(("objects", "unauth,"));

    dprintf(("objects", "type %d,",type));
    if( mtype==REQUEST )
	dprintf(("objects", "request\n"));
    if( mtype==ADD )
	dprintf(("objects", "add\n"));

    if( mtype==REMOVE )
	dprintf(("objects", "remove\n"));

    if( mtype==REFRESH )
	dprintf(("objects", "refresh\n"));

    if( (f = gettype(type)) == 0 || f->fw_refcount < 1 )
	return;

    if( format == 0 && mtype == REQUEST )
    {
	do_protocol(f, src, 0, REFRESH, 0, 0, 1);
	return;
    }

    if( format == 1 )
    {
	if( mtype == REMOVE )
	{
	    struct object_q *rq;
	    for( rq = f->fw_remobj; rq; rq = rq->r_next )
	    {
		if( rq->r_inuse && !rq->r_local &&
		   rq->r_authval &&
		   rq->r_validate > 0 )
		{
		    rq->r_validate = 1;
		    rq->r_retries = 1;	/* set dodgy object flags; validate
					 * on next event */
		}
	    }
	    return;
	}
	else if( mtype == ADD )
	{
	    if (f->fw_authreqtout > 0)
		f->fw_authreqtout = 1; /* refresh all on next timeout */
	    return;
	}
	/* 25/7/94 gw */
	else if( mtype == REQUEST && rsm->rs_nblocks )
	{
#ifndef AUTH32
	    authval = *(((u_short *)rsm) + 4);
#else
	    authval = *(((u_int *)rsm) + 2);
#endif

	    dprintf(("objects", "sending refresh for authval %d\n",authval));
	    do_protocol(f, src, 0, REFRESH, 1, authval, 0);
	    return;
	}
    }

    if( rsm->rs_nblocks == 0 )
	return;

    b = (char *)(&rsm->rs_nblocks);
    b += 2;
    authval = 0;

    for( n = 0; n < rsm->rs_nblocks; n++ )
    {
	namelen = *(short *)b;
	if( namelen <= 0 || namelen >= 64 )
	    return;

	desclen = *(short *)(b + 2);
	if( desclen < 0 || desclen >= 256 )
	    return;

	b += 4;
	if( format == 1 )
	{
#ifndef AUTH32
	    /* move+modify 25/7/94 gw */
	    authval=*(u_short *)b;
	    b += 2;
#else
	    authval=*(u_int *)b;
	    b+=4;
#endif
	}

	memcpy(name, b, namelen);
	name[namelen] = 0;
	b += namelen;
	desc = b;

	/*
	 * first check to see if object is also held locally.
	 * If so, there is a possible name clash; delete the object.
	 */
	r = &(f->fw_remobj);
	while( *r )
	{
	    if( (*r)->r_inuse && (*r)->r_local &&
	       caseless_strcmp((*r)->r_title, name) == 0 )
	    {
		if( mtype != REMOVE )
		{
		    if( format == 0 )
			do_protocol(f, INADDR_BROADCAST, *r, REMOVE, 0, 0, 1);
		    else if( !f->fw_removetout )
			f->fw_removetout = REMOVE_TOUT; /* if not already done,
							 * flag for remove on
							 * next tick */
		}

		(*r)->r_inuse = 0;
		fw_upcall(FW_DELETED, type, (*r));

		if( (*r)->r_desc )
		{
		    /* 22/7/94 moved gw */
		    free((*r)->r_desc);
		    (*r)->r_desc = 0;
		}

		if( mtype==REMOVE )
		    /* 22/7/94 modified gw */
		    goto next;
	    }
	    r = &((*r)->r_next);
	}

	/*
	 * now add, remove, or change the object on the remote list
	 */
	r = &(f->fw_remobj);
	while( *r )
	{
	    if( (*r)->r_inuse &&
	       !(*r)->r_local && caseless_strcmp((*r)->r_title, name) == 0 )
	    {
		if( mtype == REMOVE )
		{
		    (*r)->r_inuse = 0;
		    fw_upcall(FW_REMOVED, type, (*r));
		    if( (*r)->r_desc )
		    {
			free((*r)->r_desc); /* 22/7/94 moved gw */
			(*r)->r_desc = 0;
		    }
		}
		else
		{
		    /* if mtype != REMOVE */
		    (*r)->r_validate = REFRESH_INTERVAL + RETRY_INTERVAL;
		    (*r)->r_retries = 0;
		    if( (*r)->r_desc != 0 &&
		       ((*r)->r_desclen != desclen ||
			memcmp((*r)->r_desc, desc, desclen) != 0) )
		    {
			if( (*r)->r_desclen < desclen )
			{
			    /*
			     * can free here; will call
			     * new_object before upcall
			     */
			    free((*r)->r_desc);
			    (*r)->r_desc = 0;
			}

			changed = 1;
		    }
		    else if( (*r)->r_ip.s_addr != src )
			changed = 1;

		    if( changed )
			new_object(f, src, format, name, desc,
				   desclen, authval, r);

		    if( mtype == REFRESH && changed )
			fw_upcall(FW_CHANGED, type, (*r));

		    if( mtype == ADD )
		    {
			fw_upcall(FW_REMOVED, type, (*r));
			fw_upcall(FW_ADDED, type, (*r));
		    }
		    changed = 0;
		}
		goto next;
	    }
	    r = &((*r)->r_next);
	}

	if( mtype != REMOVE )
	{
	    r = &(f->fw_remobj);
	    while( *r )
	    {
		if( !(*r)->r_inuse )
		    break;

		r = &((*r)->r_next);
	    }

	    if( authval )
	    {
		/*
		 * surely this should be if (format == 1),
		 * though as written above it will work
		 */
		struct authreq_q *a;

		for( a = f->fw_authreq; a; a = a->a_next )
		{
		    if (a->a_authval == authval)
			break;
		}
		if( !a )
		    goto next;
	    }

	    new_object(f, src, format, name, desc, desclen, authval, r);
	    fw_upcall(FW_ADDED, type, (*r));
	}

      next:
	b += desclen;
        b = (char *) (((unsigned)b + 3) &~ 3);
    }
}

/**********************************************************************/

/* performed on tick event for each known type */
void check_objects(struct fwtype *f)
{
    struct object_q *r;
    int callb = 0;

    for (r = f->fw_remobj; r; r = r->r_next)
    {
	if (r->r_inuse && !(r->r_local) &&
	    (r->r_validate > 0 && --r->r_validate == 0))
	{
	    r->r_dovalidate = 1;
	    callb = 1;
	}
    }

    if (f->fw_validate > 0 && --f->fw_validate == 0)
    {
	f->fw_dovalidate = 1;
	callb = 1;
    }

    if (f->fw_authreqtout > 0 && --f->fw_authreqtout == 0)
    {
	f->fw_doauthreq = 1;
	callb = 1;
    }

    if (f->fw_removetout > 0 && --f->fw_removetout == 0)
    {
	f->fw_doremove = 1;
	callb = 1;
    }

    if (f->fw_addtout > 0 && --f->fw_addtout == 0)
    {
	f->fw_doadd = 1;
	callb = 1;
    }

    if (callb)
    {
	doobjects = 1;
	setcallback();
    }
}

/**********************************************************************/

static void send_auth_message(struct fwtype *f, int mtype,
			      u_long dst, int authval)
{
    char *b, block[12];

    b = block;
#ifndef AUTH32
    /* modified 25/7/94 gw */
    *(u_short *)b = authval & 0xffff;
#else
    *(u_int *)b = authval;
#endif
    send_fw_message(f, dst, mtype, 1, block, 4, 1);
}

/**********************************************************************/

void do_objects_on_callback(void)
{
    struct fwtype *f;
    struct object_q *r, *rr;
    struct authreq_q *a;

    for (f = fw.fw_types; f != 0; f = f->fw_next) {
#ifdef DEBUGLIB
        dprintf(("objects", "OOC> Refreshing objects:"));
	switch(f->fw_number) {
	    case DOMAIN_DISC: dprintf(("objects", "Discs...")); break;
	    case DOMAIN_PRINTER: dprintf(("objects", "Printers...")); break;
	    case DOMAIN_HOST: dprintf(("objects", "Hosts...")); break;
	    default: dprintf(("objects", "type %d...",f->fw_number)); break;
	    }
#endif/* DEBUGLIB */

	for (r = f->fw_remobj; r; r = r->r_next)
	{
	    dprintf(("objects", "Object: %s ", r->r_title));

	    if (!r->r_inuse || r->r_local || !r->r_dovalidate)
		continue;

	    dprintf(("objects", "Retries: %d ", r->r_retries));
	    r->r_dovalidate = 0;
	    if (r->r_retries < MAX_RETRIES)
	    {
		if (r->r_authval != 0) {
		    dprintf(("objects", "Sending auth request...\n"));
		    send_auth_message(f, REQUEST, r->r_ip.s_addr,
				      r->r_authval);
		    }
		else {
		    dprintf(("objects", "Sending unauth request...\n"));
		    send_fw_message(f, r->r_ip.s_addr, REQUEST,
				    0, (char *)0, 0, 0);
		    }
		r->r_retries++;
		r->r_validate = RETRY_INTERVAL;

		for (rr = r->r_next; rr; rr = rr->r_next)
		{
		    if (!rr->r_inuse)
			continue;

		    if (rr->r_ip.s_addr != r->r_ip.s_addr ||
			rr->r_authval != r->r_authval)
			continue;

		    dprintf(("objects", "Updating other objects too"));

		    rr->r_retries++;
		    rr->r_validate = RETRY_INTERVAL + 1;
		}
	    }
	    else
	    {
		dprintf(("objects", "Max retries exceeded. Removing!"));
		r->r_inuse = 0;
		r->r_retries = 0;
		fw_upcall(FW_REMOVED, f->fw_number, r);
	    }
	}
	dprintf(("objects", "\n"));

	if (f->fw_dovalidate)
	{
	    dprintf(("objects", "OOC> Periodic revalidation of all.\n"));

	    f->fw_dovalidate = 0;
	    do_protocol(f, INADDR_BROADCAST, 0, REFRESH, 0, 0, 1);
	    f->fw_validate = REFRESH_INTERVAL;
	}

	if (f->fw_doremove)
	{
	    dprintf(("objects", "OOC> Doing send_auth_message, REMOVE, INADDR_BROADCAST\n"));
	    f->fw_doremove = 0;
	    send_auth_message(f, REMOVE, INADDR_BROADCAST, 0);
	}

	if (f->fw_doadd)
	{
	    dprintf(("objects", "OOC> Doing send_auth_message, ADD, INADDR_BROADCAST\n"));
	    f->fw_doadd = 0;
	    send_auth_message(f, ADD, INADDR_BROADCAST, 0);
	}

	if (f->fw_doauthreq)
	{
	    dprintf(("objects", "OOC> Refreshing all authenticated objects:-\n"));

	    f->fw_doauthreq = 0;
	    for (a = f->fw_authreq; a; a = a->a_next)
	    {
		if (!a->a_refcount)
		    continue;

		dprintf(("objects", "OOC> key: %d \n", a->a_authval));

		send_auth_message(f, REQUEST, INADDR_BROADCAST, a->a_authval);
	    }
	    f->fw_authreqtout = REFRESH_INTERVAL;
	}
    }
}

/**********************************************************************/

_kernel_oserror *RegisterType(_kernel_swi_regs *r)
{
    int    type, newinterest, format, authval ;
    const char *name;
    struct fwtype *f;
    struct object_q *rq;
    struct authreq_q *a;
    int    error = 0;

    dprintf(("objects", "registertype flg %x type %x authval %x name@@ %p\n",
	r->r[0], r->r[1], r->r[2], r->r[3]));

    newinterest = (r->r[0] & (1<<0)) ? 0 : 1;
    format = (r->r[0] & (1<<1)) ? 1 : 0;   /* format=0 for unauthenticated */
    type = (u_short)r->r[1];
    authval = format==1 ? r->r[2] : 0;
    if (r->r[0] & (1<<2))
    {
      name = (char *)r->r[3];              /* CE - 27/11/96 */
    }
    else
    {
      char token[10];

      sprintf(token, "Type%u", type);
      name = fw_lookup(token);
    }

    dprintf(("objects", "RT>> newinterest=%x format=%x type=%x authval=%x name=%s\n",
	newinterest,format,type,authval,name));

    for (f = fw.fw_types; f != 0; f = f->fw_next)
	if (f->fw_number == type) {
	    dprintf(("objects", "RT>> Found existing objects of same type\n"));
	    break;
	    }


    if (f == 0)
    {
	if (!newinterest)   /* misfeature fix 3/8/94 gw  -- why? PWain */
	    goto out;

	dprintf(("objects", "RT>> No existing objects found - creating a new one\n"));

	f = (struct fwtype *)malloc(sizeof(struct fwtype));

	if (f == 0)
	{
	    error = Err_FWNMem;
	    goto out;
	}

	memset((char *)f, 0, sizeof(struct fwtype));
	f->fw_number = type;
	strncpy(f->fw_name,name,sizeof(f->fw_name));	/* CE - 27/11/96 */
	f->fw_validate = REFRESH_INTERVAL;
	f->fw_next = fw.fw_types;
	fw.fw_types = f;
    }

    if (newinterest)
    {
	dprintf(("objects", "RT>> New interest. No information known.\n"));
	f->fw_refcount++;
	if (f->fw_refcount == 1) {
	    dprintf(("objects", "RT>> Broadcasting request for info\n"));
	    send_fw_message(f, INADDR_BROADCAST, REQUEST, 0, (char *)0, 0, 0);
	    }

	if (format==1)
	{
	    dprintf(("objects", "RT>> Doing Authentication checks\n"));
	    for (a = f->fw_authreq; a; a = a->a_next)
		if (a->a_authval == authval) {
		    dprintf(("objects", "RT>> Matched password. Using found object\n"));
		    break;
		    }

	    if (!a)
	    {
		dprintf(("objects", "RT>> Nothing found. Creating dummy entry.\n"));
		a = (struct authreq_q *) malloc(sizeof(struct authreq_q));
		if (a == 0)
		{
		    error = Err_FWNMem;
		    goto out;
		}

		a->a_refcount = 0;
		a->a_authval = authval;
		a->a_next = f->fw_authreq;
		f->fw_authreq = a;
		f->fw_refcount++;
	    }

	    if (++a->a_refcount == 1) {
		dprintf(("objects", "RT>> Broadcasting authentication request!\n"));
		send_auth_message(f, REQUEST, INADDR_BROADCAST, authval);
		}

	    if (!f->fw_authreqtout && !f->fw_doauthreq)
		f->fw_authreqtout = REFRESH_INTERVAL;
	}
    }
    else
    {
	/* if !newinterest */
	if (f->fw_refcount > 0)
	{
	    f->fw_refcount--;
	    if (f->fw_refcount == 0)
	    {
		for (rq = f->fw_remobj; rq; rq = rq->r_next)
		{
		    if (rq->r_inuse)
			fw_upcall(FW_REMOVED, f->fw_number, rq);
		    rq->r_inuse = 0;
		}

		for (a = f->fw_authreq; a; a = a->a_next)
		    a->a_refcount = 0;

		f->fw_authreqtout = 0;
		f->fw_doauthreq = 0;	/* really should free the memory */
	    }
	}

	if (format==1 && f->fw_refcount>0)
	{
	    for (a = f->fw_authreq; a; a = a->a_next)
	    {
		if (a->a_authval == authval && a->a_refcount > 0)
		{
		    a->a_refcount--;
		    if (a->a_refcount == 0)
		    {
			for (rq = f->fw_remobj; rq; rq = rq->r_next)
			{
			    if (rq->r_inuse && rq->r_authval == authval)
			    {
				rq->r_inuse = 0;
				fw_upcall(FW_REMOVED, f->fw_number, rq);
			    }
			}
		    }
		    break;
		}
	    }
	}
    }

  out:
    return(fw_error(error));
}

/**********************************************************************/

_kernel_oserror *WriteObject(_kernel_swi_regs *r)
{
    struct object_q *rl, *freerl, **rlq;
    int doregister, type, desclen, authval, format, local;
    char *title, *desc;
    struct fwtype *f;
    int error = 0;

    dprintf(("objects", "writeobject flg %x type %x name %s auth %x\n",
	   r->r[0], r->r[1], (char *)r->r[2], r->r[5]));

    type = r->r[1];
    f = gettype(type);
    if (f == 0 || f->fw_refcount < 1)
    {
	/* returns error if not registered */
	error = Err_FWType;
	goto out;
    }

    doregister = (r->r[0] & 01) ? 0 : 1;
    format = (r->r[0] & 02) ? 1 : 0;
    local = (r->r[0] & 04) ? 0 : 1;
    title = (char *)r->r[2];
    desclen = r->r[3];
    desc = (char *)r->r[4];
    authval = format==1 ? r->r[5] : 0;

    if (strlen(title) >= 64 || desclen >= 255)
    {
	/* should generate error */
	error = Err_FWLStr; /* 26/7/94 gw */
	goto out;
    }

    for (rl = f->fw_remobj; rl; rl = rl->r_next)
    {
	if (rl->r_inuse && !rl->r_local &&
	    caseless_strcmp(title, rl->r_title) == 0)
	{
	    error = Err_FWNLoc; /* 26/7/94 gw */
	    goto out;
	}
    }

    rlq = &(f->fw_remobj);  /* why is further indirection needed here? */
    freerl = 0;

    while (*rlq)
    {
	if (!(*rlq)->r_inuse)
	    freerl = *rlq;    /*note unused chain blocks for later use*/

	if ((*rlq)->r_inuse && (*rlq)->r_local &&
	    caseless_strcmp((*rlq)->r_title, title) == 0)
	{
	    if (!doregister)
	    {
		if ((*rlq)->r_authval && (*rlq)->r_authval != authval)
		{
		    error = Err_FWNAut; /* 26/7/94 gw */
		    goto out;
		}

		if (format == 0)
		{
		    fw_upcall(FW_REMOVED, type, *rlq);
		    do_protocol(f, INADDR_BROADCAST, *rlq, REMOVE, 0, 0, 1);
		}
		else if (!f->fw_removetout)
		    f->fw_removetout = REMOVE_TOUT; /* remove on next tick */

		(*rlq)->r_inuse = 0;
	    }
	    else
	    {
		/* if doregister and object name known */
		if ((format == 1) && ((*rlq)->r_authval != authval))
		{
		    /* 25/7/94 gw */
		    send_auth_message(f, REMOVE, INADDR_BROADCAST,
				      (*rlq)->r_authval);
		}

		if (((*rlq)->r_desc &&
		     (desclen != (*rlq)->r_desclen ||
		      memcmp(desc, (*rlq)->r_desc, desclen) != 0)) ||
		    ((format == 1) && ((*rlq)->r_authval != authval)))
		{
		    /* 26/7/94 gw */
		    rl = *rlq;
		    free(rl->r_desc);
		    rl->r_desc = 0;
		    rl->r_desclen = 0;
		    goto newdesc;
		}
	    }
	    goto out;
	}

	rlq = &((*rlq)->r_next);
    }

    /*
     * at this point, we know we have
     * no record of the object
     */
    if (!doregister)
    {
	/* 26/7/94 gw */
	error = Err_FWONex;
	goto out;
    }

    rl = freerl ? freerl : *rlq;
    if (rl == 0)
    {
	rl = (struct object_q *)malloc(sizeof(struct object_q));

	if (rl == 0)
	{
	    error = Err_FWNMem;
	    goto out;
	}

	memset((char *)rl, 0, sizeof(struct object_q));
	*rlq = rl;
    }

    rl->r_ip.s_addr = local_adr;
    rl->r_local=1;
    if (rl->r_title && strlen(title) > strlen(rl->r_title))
    {
	free(rl->r_title);
	rl->r_title = 0;
    }

    if (rl->r_title == 0)
    {
	rl->r_title = malloc(strlen(title)+1);

	if (rl->r_title == 0)
	{
	    error = Err_FWNMem;
	    goto out;
	}
    }
    strcpy(rl->r_title, title);

  newdesc:
    if (desc && desclen)
    {
	rl->r_desc = malloc(desclen + 1);
	if (rl->r_desc == 0)
	{
	    error = Err_FWNMem;
	    goto out;
	}

	memcpy(rl->r_desc, desc, desclen);
	rl->r_desclen = desclen;
    }

    rl->r_authval = authval;
    rl->r_inuse = 1;

    if (format == 0)
    {
	do_protocol(f, INADDR_BROADCAST, rl, ADD, 0, 0, 1);
	fw_upcall(FW_ADDED, type, rl);
    }
    else
	f->fw_addtout = ADD_TOUT; /* ?again, process on tick */

  out:
    return(fw_error(error));
}

/**********************************************************************/

_kernel_oserror *ReadObject(_kernel_swi_regs *r)
{
    struct fwtype *f;
    struct object_q *rq;
    int desclen, auth, authval, error = 0;

    dprintf(("objects", "FRO> Auth=%d PIN=%d\n",(r->r[0] & 01) ? 1 : 0 , r->r[5]));
    f = gettype(r->r[1]);
    if (f == 0 || f->fw_refcount < 1)
    {
	error = Err_FWType;
	goto out;
    }

    auth = (r->r[0] & 01) ? 1 : 0;
    desclen = r->r[3];
    /*
     * Is this correct? I think it should be r->r[1] (see
     * ../ShareFS/ShareFS/internet.c in owner_logon() )
     * PWAIN 060295
     *
     * authval = auth ? r->r[5] : 0;     corrected 22/7/94 gw
     */
    authval = auth ? r->r[5] : 0;

    for (rq = f->fw_remobj; rq; rq = rq->r_next)
    {
	if (!rq->r_inuse || caseless_strcmp((char *)r->r[2], rq->r_title) != 0)
	    continue;

	if (auth && rq->r_authval != authval)
	    continue;

	r->r[3] = rq->r_desclen;
	if (rq->r_desc && r->r[4])
	{
	    if (desclen < rq->r_desclen)
		error = Err_FWDBuf;
	    else
		memcpy((char *)r->r[4], rq->r_desc, rq->r_desclen);
	}

	r->r[5] = (int)rq->r_ip.s_addr;
	break;
    }

    if (!rq)
	error = Err_FWOUnk;

  out:
    return(fw_error(error));
}

/**********************************************************************/

_kernel_oserror *EnumerateObjects(_kernel_swi_regs *r)
{
    struct fwtype *f;
    struct object_q *rq;
    int desclen, namelen, auth, authval, error = 0;

    dprintf(("objects", "FEO> enum flg %x type %x enumref %x authval %x\n",
	   r->r[0], r->r[1], r->r[7], r->r[8]));

    f = gettype(r->r[1]);
    if (f == 0 || f->fw_refcount < 1)
    {
	dprintf(("objects", "FEO> Error: Err_FWType\n"));
	error = Err_FWType;
	goto out;
    }

    auth = (r->r[0] & 01) ? 1 : 0;
    namelen = r->r[2];
    desclen = r->r[4];
    authval = (auth==1) ? r->r[8] : 0;
    rq = (struct object_q *)r->r[7];

    for (rq = rq ? rq->r_next : f->fw_remobj; rq; rq = rq->r_next)
    {
	if (!rq->r_inuse)
	    continue;

	if (auth && rq->r_authval != authval)
	    continue;

	break;
    }

    if (rq == 0)
    {
	r->r[7] = -1;
	goto out;

}
    r->r[2] = strlen(rq->r_title) + 1;
    r->r[4] = rq->r_desclen;

    if (r->r[3])
    {
	if (namelen <= strlen(rq->r_title))
	{
	    dprintf(("objects", "FEO> Error: Err_FWNBuf"));
	    error = Err_FWNBuf;
	    goto out;
	}
	strcpy((char *)r->r[3], rq->r_title);
    }

    if (rq->r_desc && r->r[5])
    {
	if (desclen < rq->r_desclen)
	{
	    dprintf(("objects", "FEO> Error: Err_FWNBuf"));
	    error = Err_FWDBuf;
	    goto out;
	}
	memcpy((char *)r->r[5], rq->r_desc, rq->r_desclen);
    }

    r->r[6] = (int)rq->r_ip.s_addr;
    r->r[7] = (int)rq;

  out:
    dprintf(("objects", "FEO> Returning error code: %d (%x)\n", error, error));
    return(fw_error(error));
}

/**********************************************************************/

/* EOF objects.c */
@


4.8
log
@Makefile recreated from fragments
Usual drill
* Rename CMHG file to be the auto generated one
* Cast away some warnings
* Swap a few header files around, use defs from central headers where available
Also, add hdr/Freeway which in turn will be exported and end up in <swis.h>.

Participated in a ROM build, but not functionally tested.

Version 0.37. Tagged as 'Freeway-0_37'
@
text
@d602 1
a602 1
	    case DOMAIN_DISK: dprintf(("objects", "Disks...")); break;
d705 1
a705 1
    char   *name;
d711 2
a712 2
    dprintf(("objects", "registertype flg %x type %x authval %x name@@ %s\n",
	   r->r[0], r->r[1], r->r[2], (char *) r->r[3]));
d716 1
a716 1
    type = r->r[1];
d718 11
a728 1
    name = (r->r[0] & (1<<2)) ? (char *)r->r[3] : (char *)NULL;	/* CE - 27/11/96 */
d730 1
a730 1
    dprintf(("objects", "RT>> newinterest=%x format=%x type=%x authval=%x name=%p\n",
d757 1
a757 4
	if (name)
	  strncpy(f->fw_name,name,16);	/* CE - 27/11/96 */
	else if (type == DOMAIN_PRINTER)
	  strncpy(f->fw_name,DOMAIN_PRINTER_N,16);
@


4.7
log
@Wasn't freeing the fw_types structures leading to a whopper memory leak
provoked by REPEAT:OSCLI"RMReinit Freeway":WAIT:WAIT:UNTIL 0.

Version 0.33. Tagged as 'Freeway-0_33'
@
text
@d34 1
@


4.6
log
@Changed tab to a space and capitalised on and off to On and Off.
Fixes report that "Freewayautoaddress" status is garbled in a task
window.

Version 0.32. Tagged as 'Freeway-0_32'
@
text
@d70 1
a70 1

@


4.5
log
@  - Added command to add a remote subnet.

Detail:
  Freeway will interrogate an AUN server to discover subnets on which it
should broadcast.  However there was no other way to explicitly add another
subnet on which freeway should broadcast.

  The new *command FWAddnet will do this.  This allows ShareFS to talk to a
RISC OS machine on a different subet, e.g. between an STB and a RiscPC on the
engineering and house networks.  If the intervening router doesn't allow
directed broadcasts (as is quite often the case), you can specify a specific
host on the other network.

Admin:
  Tested on a DSL4000 and RiscPC on the house and engineering networks.


Version 0.31. Tagged as 'Freeway-0_31'
@
text
@d205 1
a205 1
    int nblocks, mlen, pad;
d255 1
a255 3
	pad = (((int)b) % 4) ? 4 - (((int)b) % 4) : 0;
	while( pad-- > 0 )
	    *b++ = 0;
d273 1
a273 1
    int n, pad, namelen, desclen, authval, type = rsm->rs_type;
d519 1
a519 3
	pad = (((int)b) % 4) ? 4 - (((int)b) % 4) : 0;
	while( pad-- > 0 )
	    b++;
@


4.4
log
@  Much tidying up, and support for new CMOS bit to prevent Freeway setting
    default addresses on interfaces.
Detail:
  Removed obsolete source files and headers.
  CMHG file pulls in details from global header files and VersionNum.
  CMHG uses proper veneers for functions and generates the header file
    for module.c to relieve it from having to mis-declare the veneer
    functions.
  Debugging is now entirely DebugLib based.
  Fixed short buffer which would cause the machine to die with aborts
    if an error message was just a bit too long for it.
Admin:
  Requires HdrSrc-0_28 or later.
  Tested in Ursula ROM build.

Version 0.29. Tagged as 'Freeway-0_29'
@
text
@d187 2
@


4.3
log
@Unfortunately, this logs changes that were made some time ago.

Added facility for clients to register a descriptive string for a type.
(Printers are still special cased, since I've not modified the client code).
Added support for use of a single point to point interface.

Removed local copies of standard library functions, and linked against
library instead.
@
text
@d15 2
a16 28
/* -*-C-*-
 *
 * $Header: /ax/networking:Starling/Freeway/objects.c:networking  1.5  $
 * $Source: /ax/networking:Starling/Freeway/objects.c: $
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * 96/11/27 - CE
 * added support for freeway clients supplying a descriptive name
 * for the types they register (special case for printers, 'cause I
 * don't think I'll get time to fix remote printer support, yet.
 *
 * $Log:	objects.c,v $
 * Revision 1.5  95/03/31  11:03:23  pwain
 * Added copious amounts of debug for Black testing.
 *
 * Revision 1.4  95/03/05  16:05:16  kwelton
 * Tidied up scope and declarations of both functions and
 * variables; the module now compiles cleanly with -ffah.
 *
 * Revision 1.3  95/02/13  17:01:01  pwain
 * Added in lots of debuging statements.
 *
 * Revision 1.2  95/02/01  15:22:27  pwain
 * Added in a few more debug messages.
 *
 * Revision 1.1  95/01/03  18:56:54  kwelton
 * Initial revision
d18 1
a35 1
#include "stubs.h"
d125 1
a125 2
#ifdef DEBUG
    Printf("SFM> Sending message:");
d127 1
a127 1
	Printf("auth,");
d129 1
a129 1
	Printf("unauth,");
d132 1
a132 1
	Printf("request\n");
d134 1
a134 1
	Printf("add\n");
d136 1
a136 1
	Printf("remove\n");
d138 1
a138 2
	Printf("refresh\n");
#endif
d173 1
a173 3
      	      	  #ifdef DEBUG
              	    Printf("SFM> Called with INADDR_NONE (%s)- skipping\n",fw.fw_ifunit[i]);
      	      	  #endif
d279 1
a279 1
    len = len;
d281 1
a281 2
#ifdef DEBUGPM
    Printf("process message:");
d285 2
a286 2
	Printf("auth,");
	Printf("val=%d",*(((u_short *)rsm)+4));
d289 1
a289 1
	Printf("unauth,");
d291 1
a291 1
    Printf("type %d,",type);
d293 1
a293 1
	Printf("request\n");
d295 1
a295 1
	Printf("add\n");
d298 1
a298 1
	Printf("remove\n");
d301 1
a301 2
	Printf("refresh\n");
#endif
d345 1
a345 3
#ifdef DEBUGPM
	    Printf("sending refresh for authval %d\n",authval);
#endif
d600 2
a601 2
#ifdef DEBUG
        Printf("OOC> Refreshing objects:");
d603 4
a606 4
	    case DOMAIN_DISK: Printf("Disks..."); break;
	    case DOMAIN_PRINTER: Printf("Printers..."); break;
	    case DOMAIN_HOST: Printf("Hosts..."); break;
	    default: Printf("type %d...",f->fw_number); break;
d608 1
a608 1
#endif/* DEBUG */
d612 1
a612 3
#ifdef DEBUG
	    Printf("Object: %s ", r->r_title);
#endif/* DEBUG */
d617 1
a617 3
#ifdef DEBUG
	    Printf("Retries: %d ", r->r_retries);
#endif/* DEBUG */
d622 1
a622 3
#ifdef DEBUG
		    Printf("Sending auth request...\n");
#endif/* DEBUG */
d627 1
a627 3
#ifdef DEBUG
		    Printf("Sending unauth request...\n");
#endif/* DEBUG */
d643 1
a643 3
#ifdef DEBUG
		    Printf("Updating other objects too");
#endif/* DEBUG */
d651 1
a651 3
#ifdef DEBUG
		Printf("Max retries exceeded. Removing!");
#endif/* DEBUG */
d657 1
a657 3
#ifdef DEBUG
	Printf("\n");
#endif/* DEBUG */
d661 1
a661 3
#ifdef DEBUG
	    Printf("OOC> Periodic revalidation of all.\n");
#endif/* DEBUG */
d670 1
a670 3
#ifdef DEBUG
	    Printf("OOC> Doing send_auth_message, REMOVE, INADDR_BROADCAST\n");
#endif/* DEBUG */
d677 1
a677 3
#ifdef DEBUG
	    Printf("OOC> Doing send_auth_message, ADD, INADDR_BROADCAST\n");
#endif/* DEBUG */
d684 1
a684 3
#ifdef DEBUG
	    Printf("OOC> Refreshing all authenticated objects:-\n");
#endif/* DEBUG */
d692 1
a692 3
#ifdef DEBUG
		Printf("OOC> key: %d \n", a->a_authval);
#endif/* DEBUG */
d712 2
a713 5
#ifdef DEBUG
/*    _kernel_swi(OS_WriteI+4,(_kernel_swi_regs *)0,(_kernel_swi_regs *)0); */
    Printf("registertype flg %x type %x authval %x name@@ %s\n",
	   r->r[0], r->r[1], r->r[2], r->r[3]);
#endif
d721 2
a722 4
#ifdef DEBUG
    Printf("RT>> newinterest=%x format=%x type=%x authval=%x name=%x\n",
	newinterest,format,type,authval,name);
#endif
d726 1
a726 3
#ifdef DEBUG
	    Printf("RT>> Found existing objects of same type\n");
#endif
d736 1
a736 3
#ifdef DEBUG
	Printf("RT>> No existing objects found - creating a new one\n");
#endif
d759 1
a759 3
#ifdef DEBUG
	Printf("RT>> New interest. No information known.\n");
#endif
d762 1
a762 3
#ifdef DEBUG
	    Printf("RT>> Broadcasting request for info\n");
#endif
d768 1
a768 3
#ifdef DEBUG
	    Printf("RT>> Doing Authentication checks\n");
#endif
d771 1
a771 3
#ifdef DEBUG
		    Printf("RT>> Matched password. Using found object\n");
#endif
d777 1
a777 3
#ifdef DEBUG
		Printf("RT>> Nothing found. Creating dummy entry.\n");
#endif
d793 1
a793 3
#ifdef DEBUG
		Printf("RT>> Broadcasting authentication request!\n");
#endif
d862 2
a863 4
#ifdef DEBUG
    Printf("writeobject flg %x type %x name %s auth %x\n",
	   r->r[0], r->r[1], (char *)r->r[2], r->r[5]);
#endif
d1040 1
a1040 3
#ifdef DEBUG
    Printf("FRO> Auth=%d PIN=%d\n",(r->r[0] & 01) ? 1 : 0 , r->r[5]);
#endif
d1095 2
a1096 4
#ifdef DEBUG
    Printf("FEO> enum flg %x type %x enumref %x authval %x\n",
	   r->r[0], r->r[1], r->r[7], r->r[8]);
#endif
d1101 1
a1101 3
#ifdef DEBUG
	Printf("FEO> Error: Err_FWType\n");
#endif
d1136 1
a1136 3
#ifdef DEBUG
	    Printf("FEO> Error: Err_FWNBuf");
#endif
d1147 1
a1147 3
#ifdef DEBUG
	    Printf("FEO> Error: Err_FWNBuf");
#endif
d1158 1
a1158 3
#ifdef DEBUG
    Printf("FEO> Returning error code: %d (%x)\n", error, error);
#endif
@


4.2
log
@Version RO_3_71 taken
@
text
@d17 2
a18 2
 * $Header: /projects2/renaissa/cvsroot/RiscOS/Sources/Networking/AUN/Access/Freeway/c/objects,v 4.1.3.2 1996/11/08 17:19:54 nturton Exp $
 * $Source: /projects2/renaissa/cvsroot/RiscOS/Sources/Networking/AUN/Access/Freeway/c/objects,v $
d22 6
a27 1
 * :RCS Log discontinued:
d30 1
a30 1
 * 
d34 1
a34 1
 * 
d37 1
a37 1
 * 
d40 1
a40 1
 * 
d43 1
a43 1
 * 
d150 1
d199 7
d215 1
a215 1
		if( q->q_bcast.s_addr )
d311 1
a311 1
#ifdef DEBUG
d377 1
a377 1
#ifdef DEBUG
d763 2
a764 1
    int type, newinterest, format, authval;
d768 1
a768 1
    int error = 0;
d771 3
a773 3
    _kernel_swi(OS_WriteI+4,(_kernel_swi_regs *)0,(_kernel_swi_regs *)0);
    Printf("registertype flg %x type %x authval %x\n",
	   r->r[0], r->r[1], r->r[2]);
d776 2
a777 2
    newinterest = (r->r[0] & 01) ? 0 : 1;
    format = (r->r[0] & 02) ? 1 : 0;   /* format=0 for unauthenticated */
d780 1
d783 2
a784 2
    Printf("RT>> newinterest=%x format=%x type=%x authval=%x\n", 
	newinterest,format,type,authval);
d815 4
d1133 2
a1134 2
    /* 
     * Is this correct? I think it should be r->r[1] (see 
d1214 1
a1214 1
    
@


4.1
log
@Initial revision
@
text
@d17 2
a18 2
 * $Header: /ax/networking:Starling/Freeway/objects.c:networking  1.5  $
 * $Source: /ax/networking:Starling/Freeway/objects.c: $
d22 1
a22 1
 * $Log:	objects.c,v $
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.2
log
@RCS Log keyword removed
@
text
@d22 1
a22 1
 * :RCS Log discontinued:
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@


4.1.1.2
log
@Log keyword removed
@
text
@d22 1
a22 1
 * :RCS Log discontinued:
@
