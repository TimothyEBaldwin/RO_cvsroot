head	4.2;
access;
symbols
	Net-6_26:4.2
	Net-6_25:4.2
	Net-6_24:4.2
	Net-6_23:4.2
	Net-6_22:4.2
	Net-6_21:4.2
	RO_5_07:4.2
	Net-6_20:4.2
	Net-6_19:4.2
	Net-6_18:4.2
	Ursula_merge:4.2
	Ursula_13May1998_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	97.05.13.11.25.55;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.28;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.28;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.39;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Version RO_3_71 taken
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* table.h
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Header file for routing table
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 17-Oct-95  10:06  JPD  Version 1.00
 * First version with change record.
 *
 *
 **End of change record*
 */

/******************************************************************************/

#define rtentry ortentry

/*
 * Routing table structure
 */
#ifdef OldCode
struct rthash {
        struct  rt_entry *rt_forw;
        struct  rt_entry *rt_back;
};

struct rt_entry {
        struct  rt_entry *rt_forw;
        struct  rt_entry *rt_back;
        union {
                struct  rtentry rtu_rt;
                struct {
                        u_long  rtu_hash;
                        struct  sockaddr rtu_dst;
                        struct  sockaddr rtu_router;
                        short   rtu_flags;
                        short   rtu_state;
                        int     rtu_timer;
                        int     rtu_metric;
                        int     rtu_ifmetric;
                        struct  interface *rtu_ifp;
                } rtu_entry;
        } rt_rtu;
};
#else

struct rthash
{
   struct rt_entry *rt_forw;
   struct rt_entry *rt_back;
};

struct rt_entry
{
   struct rt_entry *rt_forw;
   struct rt_entry *rt_back;
   union
   {
      struct rtentry rtu_rt;
      struct rtuentry
      {
         u_long rtu_hash;
         struct sockaddr rtu_dst;
         struct sockaddr rtu_router;
         short  rtu_flags;
         short  rtu_state;
         int    rtu_timer;
         int    rtu_metric;
         int    rtu_ifmetric;
         struct interface *rtu_ifp;
      } rtu_entry;
   } rt_rtu;
};

#endif

#define rt_rt           rt_rtu.rtu_rt
#define rt_hash         rt_rtu.rtu_entry.rtu_hash
#define rt_dst          rt_rtu.rtu_entry.rtu_dst
#define rt_router       rt_rtu.rtu_entry.rtu_router
#define rt_flags        rt_rtu.rtu_entry.rtu_flags
#define rt_timer        rt_rtu.rtu_entry.rtu_timer
#define rt_state        rt_rtu.rtu_entry.rtu_state
#define rt_metric       rt_rtu.rtu_entry.rtu_metric
#define rt_ifmetric     rt_rtu.rtu_entry.rtu_ifmetric
#define rt_ifp          rt_rtu.rtu_entry.rtu_ifp

#define ROUTEHASHSIZ    32
#define ROUTEHASHMASK   (ROUTEHASHSIZ - 1)

/*
 * "State" of routing table entry.
 */
#define RTS_CHANGED     0x1
#define RTS_EXTERNAL    0x2
#define RTS_INTERNAL    0x4
#ifdef OldCode
#define RTS_PASSIVE     IFF_PASSIVE    /* appears unused? */
#endif
#define RTS_INTERFACE   IFF_INTERFACE
#define RTS_REMOTE      IFF_REMOTE
#define RTS_SUBNET      IFF_SUBNET


#define RTF_SUBNET      0x8000

#define ADD 1
#define DELETE 2
#define CHANGE 3

#ifdef OldCode
extern struct  rthash nethash[ROUTEHASHSIZ];
extern struct  rthash hosthash[ROUTEHASHSIZ];
#endif

#ifdef OldCode
struct rt_entry *rtlookup();
struct rt_entry *rtfind();
#else
extern struct rt_entry *rtlookup(struct sockaddr *dst);
extern struct rt_entry *rtfind(struct sockaddr *dst);
extern void rtadd(struct sockaddr *dst, struct sockaddr *gate, int metric,
                                                                     int state);
extern void rtchange(struct rt_entry *rt, struct sockaddr *gate, short metric);
extern void rtdelete(struct rt_entry *rt);
extern void rtinit(void);
#endif

/******************************************************************************/

/* EOF table.h */
@


4.1
log
@Initial revision
@
text
@d15 32
d50 1
d74 31
d106 8
a113 8
#define rt_rt           rt_rtu.rtu_rt 
#define rt_hash         rt_rtu.rtu_entry.rtu_hash 
#define rt_dst          rt_rtu.rtu_entry.rtu_dst 
#define rt_router       rt_rtu.rtu_entry.rtu_router 
#define rt_flags        rt_rtu.rtu_entry.rtu_flags 
#define rt_timer        rt_rtu.rtu_entry.rtu_timer 
#define rt_state        rt_rtu.rtu_entry.rtu_state 
#define rt_metric       rt_rtu.rtu_entry.rtu_metric 
d115 1
a115 1
#define rt_ifp          rt_rtu.rtu_entry.rtu_ifp 
d117 1
a117 1
#define ROUTEHASHSIZ    32 
d123 16
a138 7
#define RTS_CHANGED     0x1 
#define RTS_EXTERNAL    0x2 
#define RTS_INTERNAL    0x4  
#define RTS_PASSIVE     IFF_PASSIVE 
#define RTS_INTERFACE   IFF_INTERFACE 
#define RTS_REMOTE      IFF_REMOTE 
#define RTS_SUBNET      IFF_SUBNET  
d140 4
d145 12
a156 1
#define RTF_SUBNET      0x8000 
d158 3
a160 4
extern struct  rthash nethash[ROUTEHASHSIZ];
extern struct  rthash hosthash[ROUTEHASHSIZ];
struct  rt_entry *rtlookup();
struct  rt_entry *rtfind();
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a0 46
/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* table.h
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Header file for routing table
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 17-Oct-95  10:06  JPD  Version 1.00
 * First version with change record.
 *
 *
 **End of change record*
 */

/******************************************************************************/

#define rtentry ortentry

a17 1
#ifdef OldCode
a40 31
#else

struct rthash
{
   struct rt_entry *rt_forw;
   struct rt_entry *rt_back;
};

struct rt_entry
{
   struct rt_entry *rt_forw;
   struct rt_entry *rt_back;
   union
   {
      struct rtentry rtu_rt;
      struct rtuentry
      {
         u_long rtu_hash;
         struct sockaddr rtu_dst;
         struct sockaddr rtu_router;
         short  rtu_flags;
         short  rtu_state;
         int    rtu_timer;
         int    rtu_metric;
         int    rtu_ifmetric;
         struct interface *rtu_ifp;
      } rtu_entry;
   } rt_rtu;
};

#endif
d42 8
a49 8
#define rt_rt           rt_rtu.rtu_rt
#define rt_hash         rt_rtu.rtu_entry.rtu_hash
#define rt_dst          rt_rtu.rtu_entry.rtu_dst
#define rt_router       rt_rtu.rtu_entry.rtu_router
#define rt_flags        rt_rtu.rtu_entry.rtu_flags
#define rt_timer        rt_rtu.rtu_entry.rtu_timer
#define rt_state        rt_rtu.rtu_entry.rtu_state
#define rt_metric       rt_rtu.rtu_entry.rtu_metric
d51 1
a51 1
#define rt_ifp          rt_rtu.rtu_entry.rtu_ifp
d53 1
a53 1
#define ROUTEHASHSIZ    32
d59 10
a68 16
#define RTS_CHANGED     0x1
#define RTS_EXTERNAL    0x2
#define RTS_INTERNAL    0x4
#ifdef OldCode
#define RTS_PASSIVE     IFF_PASSIVE    /* appears unused? */
#endif
#define RTS_INTERFACE   IFF_INTERFACE
#define RTS_REMOTE      IFF_REMOTE
#define RTS_SUBNET      IFF_SUBNET


#define RTF_SUBNET      0x8000

#define ADD 1
#define DELETE 2
#define CHANGE 3
a69 1
#ifdef OldCode
d72 2
a73 18
#endif

#ifdef OldCode
struct rt_entry *rtlookup();
struct rt_entry *rtfind();
#else
extern struct rt_entry *rtlookup(struct sockaddr *dst);
extern struct rt_entry *rtfind(struct sockaddr *dst);
extern void rtadd(struct sockaddr *dst, struct sockaddr *gate, int metric,
                                                                     int state);
extern void rtchange(struct rt_entry *rt, struct sockaddr *gate, short metric);
extern void rtdelete(struct rt_entry *rt);
extern void rtinit(void);
#endif

/******************************************************************************/

/* EOF table.h */
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
