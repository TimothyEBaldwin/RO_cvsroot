head	4.2;
access;
symbols
	Net-6_26:4.2
	Net-6_25:4.2
	Net-6_24:4.2
	Net-6_23:4.2
	Net-6_22:4.2
	Net-6_21:4.2
	RO_5_07:4.2
	Net-6_20:4.2
	Net-6_19:4.2
	Net-6_18:4.2
	Ursula_merge:4.2
	Ursula_13May1998_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	97.05.13.11.25.41;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.26;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.26;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.28;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Version RO_3_71 taken
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* inet.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * internet routines
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 18-Oct-95  12:38  JPD  Version 1.00
 * First version with change record.
 *
 *
 **End of change record*
 */

#ifdef OldCode
#include "defs.h"
extern struct interface *ifnet;

#else
#include <ctype.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "net/route.h"
#include "protocols/routed.h"

#include "table.h"
#include "data.h"
#include "interface.h"
#include "inetcode.h"
#endif

/******************************************************************************/

#ifdef OldCode
/*
 * Formulate an Internet address from network + host.
 */
struct in_addr
inet_rmakeaddr(net, host)
        u_long net, host;
{
        register struct interface *ifp;
        register u_long mask;
        u_long addr;

        if (IN_CLASSA(net))
                mask = IN_CLASSA_HOST;
        else if (IN_CLASSB(net))
                mask = IN_CLASSB_HOST;
        else
                mask = IN_CLASSC_HOST;
        for (ifp = ifnet; ifp; ifp = ifp->int_next)
                if ((ifp->int_netmask & net) == ifp->int_net) {
`                        mask = ~ifp->int_subnetmask;
                        break;
                }
        addr = net | (host & mask);
        addr = htonl(addr);
        return (*(struct in_addr *)&addr);
}
#else
struct in_addr inet_rmakeaddr(u_long net, u_long host)
{
/*
 * Formulate an Internet address from network + host.
 */
   register struct interface *ifp;
   register u_long mask;
   u_long addr;

   if (IN_CLASSA(net))
      mask = IN_CLASSA_HOST;
   else if (IN_CLASSB(net))
      mask = IN_CLASSB_HOST;
   else
      mask = IN_CLASSC_HOST;
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      if ((ifp->int_netmask & net) == ifp->int_net)
      {
         mask = ~ifp->int_subnetmask;
         break;
      }

   addr = net | (host & mask);
   addr = htonl(addr);

   return (*(struct in_addr *)&addr);

} /* in_addr() */

#endif

/******************************************************************************/

#ifdef OldCode
/*
 * Return the network number from an internet address.
 */
inet_rnetof(in)
        struct in_addr in;
{
        register u_long i = ntohl(in.s_addr);
        register u_long net;
        register struct interface *ifp;

        if (IN_CLASSA(i))
                net = i & IN_CLASSA_NET;
        else if (IN_CLASSB(i))
                net = i & IN_CLASSB_NET;
        else
                net = i & IN_CLASSC_NET;

        /*
         * Check whether network is a subnet;
         * if so, return subnet number.
         */
        for (ifp = ifnet; ifp; ifp = ifp->int_next)
                if ((ifp->int_netmask & net) == ifp->int_net)
                        return (i & ifp->int_subnetmask);
        return (net);
}
#else
u_long inet_rnetof(struct in_addr in)
{
/*
 * Return the network number from an internet address.
 */

   register u_long i = ntohl(in.s_addr);
   register u_long net;
   register struct interface *ifp;

   if (IN_CLASSA(i))
      net = i & IN_CLASSA_NET;
   else
      if (IN_CLASSB(i))
         net = i & IN_CLASSB_NET;
      else
         net = i & IN_CLASSC_NET;

   /*
    * Check whether network is a subnet;
    * if so, return subnet number.
    */
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      if ((ifp->int_netmask & net) == ifp->int_net)
         return (i & ifp->int_subnetmask);

   return net;

} /* inet_rnetof() */

#endif

/******************************************************************************/
#ifdef OldCode
/*
 * Return the host portion of an internet address.
 */
inet_rlnaof(in)
        struct in_addr in;
{
        register u_long i = ntohl(in.s_addr);
        register u_long net, host;
        register struct interface *ifp;

        if (IN_CLASSA(i)) {
                net = i & IN_CLASSA_NET;
                host = i & IN_CLASSA_HOST;
        } else if (IN_CLASSB(i)) {
                net = i & IN_CLASSB_NET;
                host = i & IN_CLASSB_HOST;
        } else {
                net = i & IN_CLASSC_NET;
                host = i & IN_CLASSC_HOST;
        }

        /*
         * Check whether network is a subnet;
         * if so, use the modified interpretation of `host'.
         */
        for (ifp = ifnet; ifp; ifp = ifp->int_next)
                if ((ifp->int_netmask & net) == ifp->int_net)
                        return (host &~ ifp->int_subnetmask);
        return (host);
}
#else
u_long inet_rlnaof(struct in_addr in)
{
/*
 * Return the host portion of an internet address.
 */

   register u_long i = ntohl(in.s_addr);
   register u_long net, host;
   register struct interface *ifp;

   if (IN_CLASSA(i))
   {
      net = i & IN_CLASSA_NET;
      host = i & IN_CLASSA_HOST;
   }
   else
      if (IN_CLASSB(i))
      {
         net = i & IN_CLASSB_NET;
         host = i & IN_CLASSB_HOST;
      }
      else
      {
         net = i & IN_CLASSC_NET;
         host = i & IN_CLASSC_HOST;
      }

   /*
    * Check whether network is a subnet;
    * if so, use the modified interpretation of `host'.
    */
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      if ((ifp->int_netmask & net) == ifp->int_net)
          return (host &~ ifp->int_subnetmask);

   return host;

} /* inet_rlnaof() */

#endif

/******************************************************************************/

#ifdef OldCode
/*
 * Return RTF_HOST if the address is
 * for an Internet host, RTF_SUBNET for a subnet,
 * 0 for a network.
 */
inet_rtflags(sin)
        struct sockaddr_in *sin;
{
        register u_long i = ntohl(sin->sin_addr.s_addr);
        register u_long net, host;
        register struct interface *ifp;

        if (IN_CLASSA(i)) {
                net = i & IN_CLASSA_NET;
                host = i & IN_CLASSA_HOST;
        } else if (IN_CLASSB(i)) {
                net = i & IN_CLASSB_NET;
                host = i & IN_CLASSB_HOST;
        } else {
                net = i & IN_CLASSC_NET;
                host = i & IN_CLASSC_HOST;
        }

        /*
         * Check whether this network is subnetted;
         * if so, check whether this is a subnet or a host.
         */
        for (ifp = ifnet; ifp; ifp = ifp->int_next)
                if (net == ifp->int_net) {
                        if (host &~ ifp->int_subnetmask)
                                return (RTF_HOST);
                        else if (ifp->int_subnetmask != ifp->int_netmask)
                                return (RTF_SUBNET);
                        else
                                return (0);             /* network */
                }
        if (host == 0)
                return (0);     /* network */
        else
                return (RTF_HOST);
}
#else
int inet_rtflags(struct sockaddr_in *sin)
{
/*
 * Return RTF_HOST if the address is for an Internet host,
 * RTF_SUBNET for a subnet, 0 for a network.
 */

   register u_long i = ntohl(sin->sin_addr.s_addr);
   register u_long net, host;
   register struct interface *ifp;

   if (IN_CLASSA(i))
   {
      net = i & IN_CLASSA_NET;
      host = i & IN_CLASSA_HOST;
   }
   else
      if (IN_CLASSB(i))
      {
         net = i & IN_CLASSB_NET;
         host = i & IN_CLASSB_HOST;
      }
      else
      {
         net = i & IN_CLASSC_NET;
         host = i & IN_CLASSC_HOST;
      }

   /*
    * Check whether this network is subnetted;
    * if so, check whether this is a subnet or a host.
    */
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      if (net == ifp->int_net)
      {
         if (host &~ ifp->int_subnetmask)
             return RTF_HOST;
         else
            if (ifp->int_subnetmask != ifp->int_netmask)
               return RTF_SUBNET;
            else
               return 0;             /* network */
      }

   if (host == 0)
      return 0;     /* network */
   else
      return RTF_HOST;

} /* inet_rtflags() */

#endif
/******************************************************************************/

#ifdef OldCode
/*
 * Return true if a route to subnet/host of route rt should be sent to dst.
 * Send it only if dst is on the same logical network if not "internal",
 * otherwise only if the route is the "internal" route for the logical net.
 */
inet_sendroute(rt, dst)
        struct rt_entry *rt;
        struct sockaddr_in *dst;
{
        register u_long r =
            ntohl(((struct sockaddr_in *)&rt->rt_dst)->sin_addr.s_addr);
        register u_long d = ntohl(dst->sin_addr.s_addr);

        if (IN_CLASSA(r)) {
                if ((r & IN_CLASSA_NET) == (d & IN_CLASSA_NET)) {
                        if ((r & IN_CLASSA_HOST) == 0)
                                return ((rt->rt_state & RTS_INTERNAL) == 0);
                        return (1);
                }
                if (r & IN_CLASSA_HOST)
                        return (0);
                return ((rt->rt_state & RTS_INTERNAL) != 0);
        } else if (IN_CLASSB(r)) {
                if ((r & IN_CLASSB_NET) == (d & IN_CLASSB_NET)) {
                        if ((r & IN_CLASSB_HOST) == 0)
                                return ((rt->rt_state & RTS_INTERNAL) == 0);
                        return (1);
                }
                if (r & IN_CLASSB_HOST)
                        return (0);
                return ((rt->rt_state & RTS_INTERNAL) != 0);
        } else {
                if ((r & IN_CLASSC_NET) == (d & IN_CLASSC_NET)) {
                        if ((r & IN_CLASSC_HOST) == 0)
                                return ((rt->rt_state & RTS_INTERNAL) == 0);
                        return (1);
                }
                if (r & IN_CLASSC_HOST)
                        return (0);
                return ((rt->rt_state & RTS_INTERNAL) != 0);
        }
}
#else
int inet_sendroute(struct rt_entry *rt, struct sockaddr_in *dst)
{
/*
 * Return true if a route to subnet/host of route rt should be sent to dst.
 * Send it only if dst is on the same logical network if not "internal",
 * otherwise only if the route is the "internal" route for the logical net.
 */

   register u_long r =
                    ntohl(((struct sockaddr_in *)&rt->rt_dst)->sin_addr.s_addr);
   register u_long d = ntohl(dst->sin_addr.s_addr);

   if (IN_CLASSA(r))
   {
      if ((r & IN_CLASSA_NET) == (d & IN_CLASSA_NET))
      {
         if ((r & IN_CLASSA_HOST) == 0)
            return ((rt->rt_state & RTS_INTERNAL) == 0);
         return 1;
      }

      if (r & IN_CLASSA_HOST)
         return 0;

      return ((rt->rt_state & RTS_INTERNAL) != 0);

   }
   else
      if (IN_CLASSB(r))
      {
         if ((r & IN_CLASSB_NET) == (d & IN_CLASSB_NET))
         {
            if ((r & IN_CLASSB_HOST) == 0)
               return ((rt->rt_state & RTS_INTERNAL) == 0);

            return 1;
         }
         if (r & IN_CLASSB_HOST)
            return 0;

         return ((rt->rt_state & RTS_INTERNAL) != 0);
      }
      else
      {
         if ((r & IN_CLASSC_NET) == (d & IN_CLASSC_NET))
         {
            if ((r & IN_CLASSC_HOST) == 0)
               return ((rt->rt_state & RTS_INTERNAL) == 0);

            return 1;
         }
         if (r & IN_CLASSC_HOST)
            return 0;

         return ((rt->rt_state & RTS_INTERNAL) != 0);
      }

} /* inet_sendroute() */

#endif

#ifdef OldCode
#include <sys/types.h>
#include <ctype.h>
#endif

/******************************************************************************/

#ifdef OldCode
/*
 * Internet address interpretation routine.
 * All the network library routines call this
 * routine to interpret entries in the data bases
 * which are expected to be an address.
 * The value returned is in network order.
 */
u_long
inet_addr(cp)
        register char *cp;
{
        u_long val, base, n;
        char c;
        u_long parts[4], *pp = parts;

again:
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, other=decimal.
         */
        val = 0; base = 10;
        if (*cp == '0')
                base = 8, cp++;
        if (*cp == 'x' || *cp == 'X')
                base = 16, cp++;
        while (c = *cp) {
                if (isdigit(c)) {
                        val = (val * base) + (c - '0');
                        cp++;
                        continue;
                }
                if (base == 16 && isxdigit(c)) {
                        val = (val << 4) + (c + 10 - (islower(c) ? 'a' : 'A'));
                        cp++;
                        continue;
                }
                break;
        }
        if (*cp == '.') {
                /*
                 * Internet format:
                 *      a.b.c.d
                 *      a.b.c   (with c treated as 16-bits)
                 *      a.b     (with b treated as 24 bits)
                 */
                if (pp >= parts + 4)
                        return (-1);
                *pp++ = val, cp++;
                goto again;
        }
        /*
         * Check for trailing characters.
         */
        if (*cp && !isspace(*cp))
                return (-1);
        *pp++ = val;
        /*
         * Concoct the address according to
         * the number of parts specified.
         */
        n = pp - parts;
        switch (n) {

        case 1:                         /* a -- 32 bits */
                val = parts[0];
                break;

        case 2:                         /* a.b -- 8.24 bits */
                val = (parts[0] << 24) | (parts[1] & 0xffffff);
                break;

        case 3:                         /* a.b.c -- 8.8.16 bits */
                val = (parts[0] << 24) | ((parts[1] & 0xff) << 16) |
                        (parts[2] & 0xffff);
                break;

        case 4:                         /* a.b.c.d -- 8.8.8.8 bits */
                val = (parts[0] << 24) | ((parts[1] & 0xff) << 16) |
                      ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);
                break;

        default:
                return (-1);
        }
        val = htonl(val);
        return (val);
}
#else
u_long inet_addr(register char *cp)
{
/*
 * Internet address interpretation routine. All the network library routines
 * call this routine to interpret entries in the data bases which are
 * expected to be an address. The value returned is in network order.
 */

   u_long val, base, n;
   char c;
   u_long parts[4], *pp = parts;

again:
   /*
    * Collect number up to ``.''.
    * Values are specified as for C:
    * 0x=hex, 0=octal, other=decimal.
    */
   val = 0; base = 10;
   if (*cp == '0')
      base = 8, cp++;
   if (*cp == 'x' || *cp == 'X')
      base = 16, cp++;

   while (c = *cp)
   {
      if (isdigit(c))
      {
         val = (val * base) + (c - '0');
         cp++;
         continue;
      }

      if (base == 16 && isxdigit(c))
      {
         val = (val << 4) + (c + 10 - (islower(c) ? 'a' : 'A'));
         cp++;
         continue;
      }
      break;
   }

   if (*cp == '.')
   {
      /* Internet format:
       *      a.b.c.d
       *      a.b.c   (with c treated as 16-bits)
       *      a.b     (with b treated as 24 bits)
       */
      if (pp >= parts + 4)
         return -1;

      *pp++ = val, cp++;
      goto again;
   }

   /*
    * Check for trailing characters.
    */
   if (*cp && !isspace(*cp))
      return -1;

   *pp++ = val;

   /*
    * Concoct the address according to
    * the number of parts specified.
    */
   n = pp - parts;

   switch (n)
   {
      case 1:                         /* a -- 32 bits */
         val = parts[0];
         break;

      case 2:                         /* a.b -- 8.24 bits */
         val = (parts[0] << 24) | (parts[1] & 0xffffff);
         break;

      case 3:                         /* a.b.c -- 8.8.16 bits */
         val = (parts[0] << 24) | ((parts[1] & 0xff) << 16) |
                                                            (parts[2] & 0xffff);
         break;

      case 4:                         /* a.b.c.d -- 8.8.8.8 bits */
         val = (parts[0] << 24) | ((parts[1] & 0xff) << 16) |
                                   ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);
         break;

      default:
         return -1;
   }

   val = htonl(val);

   return val;

}

#endif

/******************************************************************************/

/* EOF inet.c */
@


4.1
log
@Initial revision
@
text
@d15 27
d43 1
d45 4
d50 13
a62 1
extern struct interface *ifnet;
d64 1
d84 1
a84 1
                        mask = ~ifp->int_subnetmask;
d91 31
d123 3
d152 28
d181 6
d217 37
d255 1
d257 5
d303 51
d355 4
d374 1
a374 1
                        if ((r & IN_CLASSA_HOST) == 0) 
d378 1
a378 1
                if (r & IN_CLASSA_HOST) 
d401 61
d463 1
d466 1
d468 3
d559 106
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a0 41
/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* inet.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * internet routines
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 18-Oct-95  12:38  JPD  Version 1.00
 * First version with change record.
 *
 *
 **End of change record*
 */
a15 1
#ifdef OldCode
d17 1
a19 18
#else
#include <ctype.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "net/route.h"
#include "protocols/routed.h"

#include "table.h"
#include "data.h"
#include "interface.h"
#include "inetcode.h"
#endif

/******************************************************************************/

#ifdef OldCode
d39 1
a39 1
`                        mask = ~ifp->int_subnetmask;
a45 31
#else
struct in_addr inet_rmakeaddr(u_long net, u_long host)
{
/*
 * Formulate an Internet address from network + host.
 */
   register struct interface *ifp;
   register u_long mask;
   u_long addr;

   if (IN_CLASSA(net))
      mask = IN_CLASSA_HOST;
   else if (IN_CLASSB(net))
      mask = IN_CLASSB_HOST;
   else
      mask = IN_CLASSC_HOST;
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      if ((ifp->int_netmask & net) == ifp->int_net)
      {
         mask = ~ifp->int_subnetmask;
         break;
      }

   addr = net | (host & mask);
   addr = htonl(addr);

   return (*(struct in_addr *)&addr);

} /* in_addr() */

#endif
a46 3
/******************************************************************************/

#ifdef OldCode
a72 28
#else
u_long inet_rnetof(struct in_addr in)
{
/*
 * Return the network number from an internet address.
 */

   register u_long i = ntohl(in.s_addr);
   register u_long net;
   register struct interface *ifp;

   if (IN_CLASSA(i))
      net = i & IN_CLASSA_NET;
   else
      if (IN_CLASSB(i))
         net = i & IN_CLASSB_NET;
      else
         net = i & IN_CLASSC_NET;

   /*
    * Check whether network is a subnet;
    * if so, return subnet number.
    */
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      if ((ifp->int_netmask & net) == ifp->int_net)
         return (i & ifp->int_subnetmask);

   return net;
a73 6
} /* inet_rnetof() */

#endif

/******************************************************************************/
#ifdef OldCode
a103 37
#else
u_long inet_rlnaof(struct in_addr in)
{
/*
 * Return the host portion of an internet address.
 */

   register u_long i = ntohl(in.s_addr);
   register u_long net, host;
   register struct interface *ifp;

   if (IN_CLASSA(i))
   {
      net = i & IN_CLASSA_NET;
      host = i & IN_CLASSA_HOST;
   }
   else
      if (IN_CLASSB(i))
      {
         net = i & IN_CLASSB_NET;
         host = i & IN_CLASSB_HOST;
      }
      else
      {
         net = i & IN_CLASSC_NET;
         host = i & IN_CLASSC_HOST;
      }

   /*
    * Check whether network is a subnet;
    * if so, use the modified interpretation of `host'.
    */
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      if ((ifp->int_netmask & net) == ifp->int_net)
          return (host &~ ifp->int_subnetmask);

   return host;
a104 1
} /* inet_rlnaof() */
a105 5
#endif

/******************************************************************************/

#ifdef OldCode
a146 51
#else
int inet_rtflags(struct sockaddr_in *sin)
{
/*
 * Return RTF_HOST if the address is for an Internet host,
 * RTF_SUBNET for a subnet, 0 for a network.
 */

   register u_long i = ntohl(sin->sin_addr.s_addr);
   register u_long net, host;
   register struct interface *ifp;

   if (IN_CLASSA(i))
   {
      net = i & IN_CLASSA_NET;
      host = i & IN_CLASSA_HOST;
   }
   else
      if (IN_CLASSB(i))
      {
         net = i & IN_CLASSB_NET;
         host = i & IN_CLASSB_HOST;
      }
      else
      {
         net = i & IN_CLASSC_NET;
         host = i & IN_CLASSC_HOST;
      }

   /*
    * Check whether this network is subnetted;
    * if so, check whether this is a subnet or a host.
    */
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      if (net == ifp->int_net)
      {
         if (host &~ ifp->int_subnetmask)
             return RTF_HOST;
         else
            if (ifp->int_subnetmask != ifp->int_netmask)
               return RTF_SUBNET;
            else
               return 0;             /* network */
      }

   if (host == 0)
      return 0;     /* network */
   else
      return RTF_HOST;

} /* inet_rtflags() */
a147 4
#endif
/******************************************************************************/

#ifdef OldCode
d163 1
a163 1
                        if ((r & IN_CLASSA_HOST) == 0)
d167 1
a167 1
                if (r & IN_CLASSA_HOST)
a189 61
#else
int inet_sendroute(struct rt_entry *rt, struct sockaddr_in *dst)
{
/*
 * Return true if a route to subnet/host of route rt should be sent to dst.
 * Send it only if dst is on the same logical network if not "internal",
 * otherwise only if the route is the "internal" route for the logical net.
 */

   register u_long r =
                    ntohl(((struct sockaddr_in *)&rt->rt_dst)->sin_addr.s_addr);
   register u_long d = ntohl(dst->sin_addr.s_addr);

   if (IN_CLASSA(r))
   {
      if ((r & IN_CLASSA_NET) == (d & IN_CLASSA_NET))
      {
         if ((r & IN_CLASSA_HOST) == 0)
            return ((rt->rt_state & RTS_INTERNAL) == 0);
         return 1;
      }

      if (r & IN_CLASSA_HOST)
         return 0;

      return ((rt->rt_state & RTS_INTERNAL) != 0);

   }
   else
      if (IN_CLASSB(r))
      {
         if ((r & IN_CLASSB_NET) == (d & IN_CLASSB_NET))
         {
            if ((r & IN_CLASSB_HOST) == 0)
               return ((rt->rt_state & RTS_INTERNAL) == 0);

            return 1;
         }
         if (r & IN_CLASSB_HOST)
            return 0;

         return ((rt->rt_state & RTS_INTERNAL) != 0);
      }
      else
      {
         if ((r & IN_CLASSC_NET) == (d & IN_CLASSC_NET))
         {
            if ((r & IN_CLASSC_HOST) == 0)
               return ((rt->rt_state & RTS_INTERNAL) == 0);

            return 1;
         }
         if (r & IN_CLASSC_HOST)
            return 0;

         return ((rt->rt_state & RTS_INTERNAL) != 0);
      }

} /* inet_sendroute() */

#endif
a190 1
#ifdef OldCode
a192 1
#endif
a193 3
/******************************************************************************/

#ifdef OldCode
a281 106
#else
u_long inet_addr(register char *cp)
{
/*
 * Internet address interpretation routine. All the network library routines
 * call this routine to interpret entries in the data bases which are
 * expected to be an address. The value returned is in network order.
 */

   u_long val, base, n;
   char c;
   u_long parts[4], *pp = parts;

again:
   /*
    * Collect number up to ``.''.
    * Values are specified as for C:
    * 0x=hex, 0=octal, other=decimal.
    */
   val = 0; base = 10;
   if (*cp == '0')
      base = 8, cp++;
   if (*cp == 'x' || *cp == 'X')
      base = 16, cp++;

   while (c = *cp)
   {
      if (isdigit(c))
      {
         val = (val * base) + (c - '0');
         cp++;
         continue;
      }

      if (base == 16 && isxdigit(c))
      {
         val = (val << 4) + (c + 10 - (islower(c) ? 'a' : 'A'));
         cp++;
         continue;
      }
      break;
   }

   if (*cp == '.')
   {
      /* Internet format:
       *      a.b.c.d
       *      a.b.c   (with c treated as 16-bits)
       *      a.b     (with b treated as 24 bits)
       */
      if (pp >= parts + 4)
         return -1;

      *pp++ = val, cp++;
      goto again;
   }

   /*
    * Check for trailing characters.
    */
   if (*cp && !isspace(*cp))
      return -1;

   *pp++ = val;

   /*
    * Concoct the address according to
    * the number of parts specified.
    */
   n = pp - parts;

   switch (n)
   {
      case 1:                         /* a -- 32 bits */
         val = parts[0];
         break;

      case 2:                         /* a.b -- 8.24 bits */
         val = (parts[0] << 24) | (parts[1] & 0xffffff);
         break;

      case 3:                         /* a.b.c -- 8.8.16 bits */
         val = (parts[0] << 24) | ((parts[1] & 0xff) << 16) |
                                                            (parts[2] & 0xffff);
         break;

      case 4:                         /* a.b.c.d -- 8.8.8.8 bits */
         val = (parts[0] << 24) | ((parts[1] & 0xff) << 16) |
                                   ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);
         break;

      default:
         return -1;
   }

   val = htonl(val);

   return val;

}

#endif

/******************************************************************************/

/* EOF inet.c */
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
