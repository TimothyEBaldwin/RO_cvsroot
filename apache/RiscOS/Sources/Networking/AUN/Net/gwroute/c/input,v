head	4.2;
access;
symbols
	Net-6_26:4.2
	Net-6_25:4.2
	Net-6_24:4.2
	Net-6_23:4.2
	Net-6_22:4.2
	Net-6_21:4.2
	RO_5_07:4.2
	Net-6_20:4.2
	Net-6_19:4.2
	Net-6_18:4.2
	Ursula_merge:4.2
	Ursula_13May1998_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	97.05.13.11.25.43;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.27;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.27;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.29;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Version RO_3_71 taken
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* input.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * RIP Input routine
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 13-Oct-95  15:43  JPD  Version 1.00
 * First version with change record.
 *
 *
 **End of change record*
 */

#ifdef OldCode

#include "defs.h"
#include <sys/syslog.h>
#else

#include <string.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "net/if.h"
#include "netinet/in.h"
#include "net/route.h"
#include "protocols/routed.h"

#include "mnsg.h"
#include "debug.h"
#include "interface.h"
#include "table.h"
#include "data.h"
#include "startup.h"
#include "trace.h"
#include "defs.h"
#include "input.h"
#endif

/******************************************************************************/

#ifdef OldCode
extern int startup_timer, not_routing;
#endif

/******************************************************************************/
#ifdef OldCode
/*
 * Process a newly received packet.
 */
rip_input(from, rip, size)
        struct sockaddr *from;
        struct rip *rip;
        int size;
{
        struct rt_entry *rt;
        struct netinfo *n;
        struct interface *ifp;
        struct interface *if_ifwithdstaddr();
        int count;
        static struct sockaddr badfrom, badfrom2;

        ifp = 0;
        TRACE_INPUT(ifp, from, (char *)rip, size);
        if (rip->rip_vers == 0)
                return;
        switch (rip->rip_cmd) {

        case RIPCMD_REQUEST:
                n = rip->rip_nets;
                count = size - ((char *)n - (char *)rip);
                if (count < sizeof (struct netinfo))
                        return;
                for (; count > 0; n++) {
                        if (count < sizeof (struct netinfo))
                                break;
                        count -= sizeof (struct netinfo);
                        n->rip_metric = ntohl(n->rip_metric);

                        if (n->rip_dst.sa_family == AF_UNSPEC && n->rip_metric == HOPCNT_INFINITY && count == 0) {
                                supply(from, 0, 0);
                                return;
                        }
                        rt = rtlookup(&n->rip_dst);
                        n->rip_metric = rt == 0 ? HOPCNT_INFINITY :
                                min(rt->rt_metric + 1, HOPCNT_INFINITY);
                        n->rip_metric = htonl(n->rip_metric);
                }
                rip->rip_cmd = RIPCMD_RESPONSE;
                memcpy(packet, (char *)rip, size);
                inet_output(*routedsock, 0, from, size);
                return;

        case RIPCMD_TRACEON:
        case RIPCMD_TRACEOFF:
                return;

        case RIPCMD_RESPONSE:
                ifp = if_ifwithaddr(from);
                if (ifp || not_routing)
                        return;

                if (startup_timer)
                        startup_timer = 0;
                if ((rt = rtfind(from)) && (rt->rt_state & (RTS_INTERFACE | RTS_REMOTE)))
                        rt->rt_timer = 0;
                else if ((ifp = if_ifwithdstaddr(from)) &&
                    (rt == 0 || rt->rt_metric >= ifp->int_metric))
                        addrouteforif(ifp);

                if ((ifp = if_iflookup(from)) == 0 || (ifp->int_flags &
                    (IFF_BROADCAST | IFF_POINTOPOINT | IFF_REMOTE)) == 0) {
                        if (memcmp((char *)from, (char *)&badfrom, sizeof(badfrom)) != 0)
                                badfrom = *from;
                        return;
                }
                size -= 4 * sizeof (char);
                n = rip->rip_nets;
                for (; size > 0; size -= sizeof (struct netinfo), n++) {
                        if (size < sizeof (struct netinfo))
                                break;
                        n->rip_metric = ntohl(n->rip_metric);
                        if (n->rip_metric == 0 || (unsigned) n->rip_metric > HOPCNT_INFINITY) {
                                if (memcmp((char *)from, (char *)&badfrom2, sizeof(badfrom2)) != 0)
                                        badfrom2 = *from;
                                continue;
                        }

                        if ((unsigned) n->rip_metric < HOPCNT_INFINITY)
                                n->rip_metric += ifp->int_metric;
                        if ((unsigned) n->rip_metric > HOPCNT_INFINITY)
                                n->rip_metric = HOPCNT_INFINITY;
                        rt = rtlookup(&n->rip_dst);
                        if (rt == 0 || (rt->rt_state & (RTS_INTERNAL|RTS_INTERFACE)) == (RTS_INTERNAL|RTS_INTERFACE)) {
                                /*
                                 * If we're hearing a logical network route
                                 * back from a peer to which we sent it,
                                 * ignore it.
                                 */
                                if (rt && rt->rt_state & RTS_SUBNET && inet_sendroute(rt, from))
                                        continue;
                                if ((unsigned)n->rip_metric < HOPCNT_INFINITY) {
                                    /*
                                     * Look for an equivalent route that
                                     * includes this one before adding
                                     * this route.
                                     */
                                    rt = rtfind(&n->rip_dst);
                                    if (rt && equal(from, &rt->rt_router))
                                            continue;
                                    rtadd(&n->rip_dst, from, n->rip_metric, 0);
                                    setrtdelay();
                                }
                                continue;
                        }

                        if (n->rip_metric < rt->rt_metric) {
                                 rtchange(rt, from, n->rip_metric);
                                 setrtdelay();
                                 rt->rt_timer = 0;
                        }
                }
                return;
        }
}
#else

void rip_input(struct sockaddr *from, struct rip *rip, int size)
{
/*
 * Process a newly received packet.
 */

   struct rt_entry *rt;
   struct netinfo *n;
   struct interface *ifp;
   int count;
   static struct sockaddr badfrom, badfrom2;

   DEBUGP2("#rip_input() from %08X\n\r",
                                 ((struct sockaddr_in *)from)->sin_addr.s_addr);

   ifp = 0;

   DEBUGP2("#Calling TRACE_INPUT, traceactions = %d\n\r", traceactions);
   TRACE_INPUT(ifp, (struct sockaddr_in *)from, (char *)rip, size);

   if (rip->rip_vers == 0)
      return;

   switch (rip->rip_cmd)
   {
      case RIPCMD_REQUEST:
         DEBUGP1("#rip_input() RIPCMD_REQUEST\n\r");
         n = rip->rip_nets;
         count = size - ((char *)n - (char *)rip);

         if (count < sizeof (struct netinfo))
            return;

         for (; count > 0; n++)
         {
            if (count < sizeof (struct netinfo))
               break;
            count -= sizeof (struct netinfo);
            n->rip_metric = ntohl(n->rip_metric);

            if (n->rip_dst.sa_family == AF_UNSPEC &&
                                 n->rip_metric == HOPCNT_INFINITY && count == 0)
            {
               supply(from, 0, 0);
               return;
            }

            rt = rtlookup(&n->rip_dst);
            n->rip_metric = rt == 0 ? HOPCNT_INFINITY :
                    min(rt->rt_metric + 1, HOPCNT_INFINITY);
            n->rip_metric = htonl(n->rip_metric);
         }
         rip->rip_cmd = RIPCMD_RESPONSE;
         memcpy(packet, (char *)rip, size);
         inet_output(*routedsock, 0, from, size);
         return;

      case RIPCMD_TRACEON:
      case RIPCMD_TRACEOFF:
         return;

      case RIPCMD_RESPONSE:
         DEBUGP1("#rip_input() RIPCMD_RESPONSE\n\r");
         ifp = if_ifwithaddr(from);
         if (ifp || not_routing)
            return;

         if (startup_timer)
            startup_timer = 0;

         if ((rt = rtfind(from)) &&
                                  (rt->rt_state & (RTS_INTERFACE | RTS_REMOTE)))
            rt->rt_timer = 0;
         else
            if ((ifp = if_ifwithdstaddr(from)) &&
                                  (rt == 0 || rt->rt_metric >= ifp->int_metric))
               addrouteforif(ifp);

         if ((ifp = if_iflookup(from)) == 0 || (ifp->int_flags &
                           (IFF_BROADCAST | IFF_POINTOPOINT | IFF_REMOTE)) == 0)
         {
            if (memcmp((char *)from, (char *)&badfrom, sizeof(badfrom)) != 0)
               badfrom = *from;
            return;
         }

         size -= 4 * sizeof (char);
         n = rip->rip_nets;
         for (; size > 0; size -= sizeof (struct netinfo), n++)
         {
            if (size < sizeof (struct netinfo))
               break;

            n->rip_metric = ntohl(n->rip_metric);
            if (n->rip_metric == 0 ||
                                     (unsigned) n->rip_metric > HOPCNT_INFINITY)
            {
               if (memcmp((char *)from, (char *)&badfrom2, sizeof(badfrom2))
                                                                          != 0)
                  badfrom2 = *from;
               continue;
            }

            if ((unsigned) n->rip_metric < HOPCNT_INFINITY)
               n->rip_metric += ifp->int_metric;
            if ((unsigned) n->rip_metric > HOPCNT_INFINITY)
               n->rip_metric = HOPCNT_INFINITY;
            rt = rtlookup(&n->rip_dst);
            if (rt == 0 || (rt->rt_state & (RTS_INTERNAL|RTS_INTERFACE)) ==
                                                   (RTS_INTERNAL|RTS_INTERFACE))
            {
               /*
                * If we're hearing a logical network route back from a peer to
                * which we sent it, ignore it.
                */
               if (rt && rt->rt_state & RTS_SUBNET && inet_sendroute(rt, from))
                  continue;
               if ((unsigned)n->rip_metric < HOPCNT_INFINITY)
               {
                  /*
                   * Look for an equivalent route that
                   * includes this one before adding
                   * this route.
                   */
                  rt = rtfind(&n->rip_dst);
                  if (rt && equal(from, &rt->rt_router))
                     continue;
                  rtadd(&n->rip_dst, from, n->rip_metric, 0);
                  setrtdelay();
               }
               continue;
            }

            if (n->rip_metric < rt->rt_metric)
            {
               rtchange(rt, from, n->rip_metric);
               setrtdelay();
               rt->rt_timer = 0;
            }
         }
      return;
   }

} /* rip_input() */

#endif

/******************************************************************************/

/* EOF input.c */
@


4.1
log
@Initial revision
@
text
@d15 30
d47 1
d49 23
d73 1
d75 2
d129 1
a129 1
                if (ifp || not_routing) 
d142 1
a142 1
                        if (memcmp((char *)from, (char *)&badfrom, sizeof(badfrom)) != 0) 
d153 1
a153 1
                                if (memcmp((char *)from, (char *)&badfrom2, sizeof(badfrom2)) != 0) 
d195 152
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a0 44
/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* input.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * RIP Input routine
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 13-Oct-95  15:43  JPD  Version 1.00
 * First version with change record.
 *
 *
 **End of change record*
 */

#ifdef OldCode

a16 1
#else
a17 23
#include <string.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "net/if.h"
#include "netinet/in.h"
#include "net/route.h"
#include "protocols/routed.h"

#include "mnsg.h"
#include "debug.h"
#include "interface.h"
#include "table.h"
#include "data.h"
#include "startup.h"
#include "trace.h"
#include "defs.h"
#include "input.h"
#endif

/******************************************************************************/

#ifdef OldCode
a18 1
#endif
a19 2
/******************************************************************************/
#ifdef OldCode
d72 1
a72 1
                if (ifp || not_routing)
d85 1
a85 1
                        if (memcmp((char *)from, (char *)&badfrom, sizeof(badfrom)) != 0)
d96 1
a96 1
                                if (memcmp((char *)from, (char *)&badfrom2, sizeof(badfrom2)) != 0)
a137 152
#else

void rip_input(struct sockaddr *from, struct rip *rip, int size)
{
/*
 * Process a newly received packet.
 */

   struct rt_entry *rt;
   struct netinfo *n;
   struct interface *ifp;
   int count;
   static struct sockaddr badfrom, badfrom2;

   DEBUGP2("#rip_input() from %08X\n\r",
                                 ((struct sockaddr_in *)from)->sin_addr.s_addr);

   ifp = 0;

   DEBUGP2("#Calling TRACE_INPUT, traceactions = %d\n\r", traceactions);
   TRACE_INPUT(ifp, (struct sockaddr_in *)from, (char *)rip, size);

   if (rip->rip_vers == 0)
      return;

   switch (rip->rip_cmd)
   {
      case RIPCMD_REQUEST:
         DEBUGP1("#rip_input() RIPCMD_REQUEST\n\r");
         n = rip->rip_nets;
         count = size - ((char *)n - (char *)rip);

         if (count < sizeof (struct netinfo))
            return;

         for (; count > 0; n++)
         {
            if (count < sizeof (struct netinfo))
               break;
            count -= sizeof (struct netinfo);
            n->rip_metric = ntohl(n->rip_metric);

            if (n->rip_dst.sa_family == AF_UNSPEC &&
                                 n->rip_metric == HOPCNT_INFINITY && count == 0)
            {
               supply(from, 0, 0);
               return;
            }

            rt = rtlookup(&n->rip_dst);
            n->rip_metric = rt == 0 ? HOPCNT_INFINITY :
                    min(rt->rt_metric + 1, HOPCNT_INFINITY);
            n->rip_metric = htonl(n->rip_metric);
         }
         rip->rip_cmd = RIPCMD_RESPONSE;
         memcpy(packet, (char *)rip, size);
         inet_output(*routedsock, 0, from, size);
         return;

      case RIPCMD_TRACEON:
      case RIPCMD_TRACEOFF:
         return;

      case RIPCMD_RESPONSE:
         DEBUGP1("#rip_input() RIPCMD_RESPONSE\n\r");
         ifp = if_ifwithaddr(from);
         if (ifp || not_routing)
            return;

         if (startup_timer)
            startup_timer = 0;

         if ((rt = rtfind(from)) &&
                                  (rt->rt_state & (RTS_INTERFACE | RTS_REMOTE)))
            rt->rt_timer = 0;
         else
            if ((ifp = if_ifwithdstaddr(from)) &&
                                  (rt == 0 || rt->rt_metric >= ifp->int_metric))
               addrouteforif(ifp);

         if ((ifp = if_iflookup(from)) == 0 || (ifp->int_flags &
                           (IFF_BROADCAST | IFF_POINTOPOINT | IFF_REMOTE)) == 0)
         {
            if (memcmp((char *)from, (char *)&badfrom, sizeof(badfrom)) != 0)
               badfrom = *from;
            return;
         }

         size -= 4 * sizeof (char);
         n = rip->rip_nets;
         for (; size > 0; size -= sizeof (struct netinfo), n++)
         {
            if (size < sizeof (struct netinfo))
               break;

            n->rip_metric = ntohl(n->rip_metric);
            if (n->rip_metric == 0 ||
                                     (unsigned) n->rip_metric > HOPCNT_INFINITY)
            {
               if (memcmp((char *)from, (char *)&badfrom2, sizeof(badfrom2))
                                                                          != 0)
                  badfrom2 = *from;
               continue;
            }

            if ((unsigned) n->rip_metric < HOPCNT_INFINITY)
               n->rip_metric += ifp->int_metric;
            if ((unsigned) n->rip_metric > HOPCNT_INFINITY)
               n->rip_metric = HOPCNT_INFINITY;
            rt = rtlookup(&n->rip_dst);
            if (rt == 0 || (rt->rt_state & (RTS_INTERNAL|RTS_INTERFACE)) ==
                                                   (RTS_INTERNAL|RTS_INTERFACE))
            {
               /*
                * If we're hearing a logical network route back from a peer to
                * which we sent it, ignore it.
                */
               if (rt && rt->rt_state & RTS_SUBNET && inet_sendroute(rt, from))
                  continue;
               if ((unsigned)n->rip_metric < HOPCNT_INFINITY)
               {
                  /*
                   * Look for an equivalent route that
                   * includes this one before adding
                   * this route.
                   */
                  rt = rtfind(&n->rip_dst);
                  if (rt && equal(from, &rt->rt_router))
                     continue;
                  rtadd(&n->rip_dst, from, n->rip_metric, 0);
                  setrtdelay();
               }
               continue;
            }

            if (n->rip_metric < rt->rt_metric)
            {
               rtchange(rt, from, n->rip_metric);
               setrtdelay();
               rt->rt_timer = 0;
            }
         }
      return;
   }

} /* rip_input() */

#endif

/******************************************************************************/

/* EOF input.c */
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
