head	4.2;
access;
symbols
	Net-6_26:4.2
	Net-6_25:4.2
	Net-6_24:4.2
	Net-6_23:4.2
	Net-6_22:4.2
	Net-6_21:4.2
	RO_5_07:4.2
	Net-6_20:4.2
	Net-6_19:4.2
	Net-6_18:4.2
	Ursula_merge:4.2
	Ursula_13May1998_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	97.05.13.11.25.40;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.26;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.26;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.27;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Version RO_3_71 taken
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* if.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * interface routines
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 13-Oct-95  15:41  JPD  Version 1.00
 * First version with change record.
 *
 *
 **End of change record*
 */

#ifdef OldCode
#include "defs.h"

extern  struct interface *ifnet;
#else
#include "sys/types.h"
#include "sys/socket.h"
#include "net/route.h"
#include "netinet/in.h"
#include "protocols/routed.h"
#include "net/if.h"

#include "interface.h"
#include "table.h"
#include "data.h"
#endif

/******************************************************************************/

#ifdef OldCode
/*
 * Find the interface with address addr.
 */
struct interface *
if_ifwithaddr(addr)
        struct sockaddr *addr;
{
        struct interface *ifp;

#define same(a1, a2) \
        (memcmp((caddr_t)((a1)->sa_data), (caddr_t)((a2)->sa_data), 14) == 0)
        for (ifp = ifnet; ifp; ifp = ifp->int_next) {
                if (ifp->int_flags & IFF_REMOTE)
                        continue;
                if (ifp->int_addr.sa_family != addr->sa_family)
                        continue;
                if (same(&ifp->int_addr, addr))
                        break;
                if ((ifp->int_flags & IFF_BROADCAST) &&
                    same(&ifp->int_broadaddr, addr))
                        break;
        }
        return (ifp);
}
#else
struct interface *if_ifwithaddr(struct sockaddr *addr)
{
/*
 * Find the interface with address addr.
 */

   struct interface *ifp;

#define same(a1, a2) \
   (memcmp((caddr_t)((a1)->sa_data), (caddr_t)((a2)->sa_data), 14) == 0)

   for (ifp = ifnet; ifp; ifp = ifp->int_next)
   {
      if (ifp->int_flags & IFF_REMOTE)
         continue;

      if (ifp->int_addr.sa_family != addr->sa_family)
         continue;

      if (same(&ifp->int_addr, addr))
         break;

      if ((ifp->int_flags & IFF_BROADCAST) && same(&ifp->int_broadaddr, addr))
         break;
   }

   return ifp;

} /* if_withaddr() */

#endif
/******************************************************************************/

#ifdef OldCode
/*
 * Find the point-to-point interface with destination address addr.
 */
struct interface *
if_ifwithdstaddr(addr)
        struct sockaddr *addr;
{
        struct interface *ifp;

        for (ifp = ifnet; ifp; ifp = ifp->int_next) {
                if ((ifp->int_flags & IFF_POINTOPOINT) == 0)
                        continue;
                if (same(&ifp->int_dstaddr, addr))
                        break;
        }
        return (ifp);
}
#else
struct interface *if_ifwithdstaddr(struct sockaddr *addr)
{
/*
 * Find the point-to-point interface with destination address addr.
 */
   struct interface *ifp;

   for (ifp = ifnet; ifp; ifp = ifp->int_next)
   {
      if ((ifp->int_flags & IFF_POINTOPOINT) == 0)
         continue;
      if (same(&ifp->int_dstaddr, addr))
         break;
   }
   return ifp;

} /* if_ifwithdstaddr() */

#endif

/******************************************************************************/

#ifdef OldCode
/*
 * Find the interface on the network
 * of the specified address.
 */
struct interface *
if_ifwithnet(addr)
        struct sockaddr *addr;
{
        struct interface *ifp;

        for (ifp = ifnet; ifp; ifp = ifp->int_next) {
                if (ifp->int_flags & IFF_REMOTE)
                        continue;
                if (inet_netmatch(addr, &ifp->int_addr))
                        break;
        }
        return (ifp);
}
#else
struct interface *if_ifwithnet(struct sockaddr *addr)
{
/*
 * Find the interface on the network
 * of the specified address.
 */
   struct interface *ifp;

   for (ifp = ifnet; ifp; ifp = ifp->int_next)
   {
      if (ifp->int_flags & IFF_REMOTE)
         continue;
      if (inet_netmatch(addr, &ifp->int_addr))
         break;
   }

   return ifp;

} /* if_ifwithnet() */

#endif

/******************************************************************************/

#ifdef OldCode
/*
 * Find an interface from which the specified address
 * should have come from.
 */
struct interface *
if_iflookup(addr)
        struct sockaddr *addr;
{
        struct interface *ifp, *maybe;

        maybe = 0;
        for (ifp = ifnet; ifp; ifp = ifp->int_next) {
                if (same(&ifp->int_addr, addr))
                        break;
                if ((ifp->int_flags & IFF_BROADCAST) &&
                    same(&ifp->int_broadaddr, addr))
                        break;
                if ((ifp->int_flags & IFF_POINTOPOINT) &&
                    same(&ifp->int_dstaddr, addr))
                        break;
                if (maybe == 0 && inet_netmatch(addr, &ifp->int_addr))
                        maybe = ifp;
        }
        if (ifp == 0)
                ifp = maybe;
        return (ifp);
}
#else
struct interface *if_iflookup(struct sockaddr *addr)
{
/*
 * Find an interface from which the specified address
 * should have come from.
 */

   struct interface *ifp, *maybe;

   maybe = 0;
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
   {
      if (same(&ifp->int_addr, addr))
         break;
      if ((ifp->int_flags & IFF_BROADCAST) && same(&ifp->int_broadaddr, addr))
         break;
      if ((ifp->int_flags & IFF_POINTOPOINT) && same(&ifp->int_dstaddr, addr))
         break;
      if (maybe == 0 && inet_netmatch(addr, &ifp->int_addr))
         maybe = ifp;
   }

   if (ifp == 0)
           ifp = maybe;

   return ifp;

} /* if_iflookup() */

#endif

/******************************************************************************/

/* EOF if.c */
@


4.1
log
@Initial revision
@
text
@d15 27
d43 1
d47 14
d62 1
d87 22
d110 12
d139 20
d160 3
d164 1
a164 1
 * Find the interface on the network 
d181 16
d198 9
d209 1
a209 1
 * should have come from.  
d234 35
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a0 41
/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* if.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * interface routines
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 13-Oct-95  15:41  JPD  Version 1.00
 * First version with change record.
 *
 *
 **End of change record*
 */
a15 1
#ifdef OldCode
a18 14
#else
#include "sys/types.h"
#include "sys/socket.h"
#include "net/route.h"
#include "netinet/in.h"
#include "protocols/routed.h"
#include "net/if.h"

#include "interface.h"
#include "table.h"
#include "data.h"
#endif

/******************************************************************************/
a19 1
#ifdef OldCode
a43 22
#else
struct interface *if_ifwithaddr(struct sockaddr *addr)
{
/*
 * Find the interface with address addr.
 */

   struct interface *ifp;

#define same(a1, a2) \
   (memcmp((caddr_t)((a1)->sa_data), (caddr_t)((a2)->sa_data), 14) == 0)

   for (ifp = ifnet; ifp; ifp = ifp->int_next)
   {
      if (ifp->int_flags & IFF_REMOTE)
         continue;

      if (ifp->int_addr.sa_family != addr->sa_family)
         continue;

      if (same(&ifp->int_addr, addr))
         break;
a44 12
      if ((ifp->int_flags & IFF_BROADCAST) && same(&ifp->int_broadaddr, addr))
         break;
   }

   return ifp;

} /* if_withaddr() */

#endif
/******************************************************************************/

#ifdef OldCode
a61 20
#else
struct interface *if_ifwithdstaddr(struct sockaddr *addr)
{
/*
 * Find the point-to-point interface with destination address addr.
 */
   struct interface *ifp;

   for (ifp = ifnet; ifp; ifp = ifp->int_next)
   {
      if ((ifp->int_flags & IFF_POINTOPOINT) == 0)
         continue;
      if (same(&ifp->int_dstaddr, addr))
         break;
   }
   return ifp;

} /* if_ifwithdstaddr() */

#endif
a62 3
/******************************************************************************/

#ifdef OldCode
d64 1
a64 1
 * Find the interface on the network
a80 16
#else
struct interface *if_ifwithnet(struct sockaddr *addr)
{
/*
 * Find the interface on the network
 * of the specified address.
 */
   struct interface *ifp;

   for (ifp = ifnet; ifp; ifp = ifp->int_next)
   {
      if (ifp->int_flags & IFF_REMOTE)
         continue;
      if (inet_netmatch(addr, &ifp->int_addr))
         break;
   }
a81 9
   return ifp;

} /* if_ifwithnet() */

#endif

/******************************************************************************/

#ifdef OldCode
d84 1
a84 1
 * should have come from.
a108 35
#else
struct interface *if_iflookup(struct sockaddr *addr)
{
/*
 * Find an interface from which the specified address
 * should have come from.
 */

   struct interface *ifp, *maybe;

   maybe = 0;
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
   {
      if (same(&ifp->int_addr, addr))
         break;
      if ((ifp->int_flags & IFF_BROADCAST) && same(&ifp->int_broadaddr, addr))
         break;
      if ((ifp->int_flags & IFF_POINTOPOINT) && same(&ifp->int_dstaddr, addr))
         break;
      if (maybe == 0 && inet_netmatch(addr, &ifp->int_addr))
         maybe = ifp;
   }

   if (ifp == 0)
           ifp = maybe;

   return ifp;

} /* if_iflookup() */

#endif

/******************************************************************************/

/* EOF if.c */
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
