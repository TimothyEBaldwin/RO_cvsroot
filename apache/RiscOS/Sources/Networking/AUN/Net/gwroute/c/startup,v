head	4.4;
access;
symbols
	Net-6_26:4.4
	Net-6_25:4.4
	Net-6_24:4.3
	Net-6_23:4.3
	Net-6_22:4.3
	Net-6_21:4.3
	RO_5_07:4.3
	Net-6_20:4.3
	Net-6_19:4.3
	Net-6_18:4.2
	Ursula_merge:4.2
	Ursula_13May1998_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2015.05.29.19.29.03;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	2VVHsW5ULMhIonny;

4.3
date	2003.01.17.14.59.57;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.11.25.46;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.27;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.27;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.31;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Have Net look after its own messages
Net was trying to share some messages with the Econet module, though on balance this wasn't particularly useful as it then needed to duplicate message handling code to keep 2 files open. Because those messages were held in AUNMsgs they didn't get tokenised in ROM, overall ending up taking more space.

Register in ResourcesFS at run time for RAM targets, add tokenisation directives for ROM targets, removed redundant !Configure related strings.
Changed the messages fd to be int's to ensure word alignment.
Removed inappropriate Service_MessageFileClosed handler, MessageTrans reopens the files (since the fd is in the RMA) so no need to reopen them a second time. This service call is intended to recache direct pointers to tokens, but none are ever taken.
Save time by just making textbuf a zero length string rather than memset()ing the whole buffer.
Resolved a couple more compiler warnings (but NetG still doesn't compile).
Fix bug where a failure to enable the internet event would decrement the internet event count for any other modules interested in that event.
Use CMHG finalisation rather than atexit().
Error "AUN not configured" now uses a non zero trappable error number.
Error number for BadSWI corrected from 0x111 to 0x110.

Requires HdrSrc-2_51 for the error number.

Version 6.25. Tagged as 'Net-6_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* startup.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * startup routines
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 20-Oct-95  18:11  JPD  Version 1.00
 * First version with change record.
 *
 **End of change record*
 */

#ifdef OldCode

#include "defs.h"
#include <sys/ioctl.h>
#include <net/if.h>
#include <sys/syslog.h>

extern struct  interface *ifnet;
extern struct  interface **ifnext;
extern int routed_changes, startup_timer;

int startup_count = 0;

#else

#include <stdlib.h>
#include <string.h>

#include "sys/types.h"
#include "sys/time.h"
#include "sys/ioctl.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "net/if.h"
#include "net/route.h"
#include "protocols/routed.h"
#include "socklib.h"
#include "unixlib.h"

#include "mnsg.h"
#include "module.h"
#include "debug.h"
#include "table.h"
#include "data.h"
#include "inetcode.h"
#include "output.h"
#include "interface.h"
#include "startup.h"

static void ifinit(void);
static void ifdinit(void);

#endif

static int startup_count = 0;

#define STARTUP_RETRIES  6
#define STARTUP_DELAY    2000

/******************************************************************************/

void startup_routed(void)
{
   DEBUGP1("#startup_routed()\n\r");

   msg = (struct rip *)packet;
   routed_changes = 0;
   ifdinit();
   rtinit();
   ifinit();
   startup_count = STARTUP_RETRIES;
   do_ripcmd_req();

   return;

} /* startup_routed() */

/******************************************************************************/

void do_ripcmd_req(void)
{
   DEBUGP1("#do_ripcmd_req()\n\r");

   msg->rip_cmd = RIPCMD_REQUEST;
   msg->rip_vers = RIPVERSION;
   msg->rip_nets[0].rip_dst.sa_family = htons((u_short)AF_UNSPEC);
   msg->rip_nets[0].rip_metric = htonl((u_long)HOPCNT_INFINITY);
   toall(rsendmsg);
   startup_timer = --startup_count > 0 ? STARTUP_DELAY : 0;

   return;

} /* do_ripcmd_req() */

/******************************************************************************/

static void ifdinit(void)
{
   struct interface *ifp;

   DEBUGP1("#ifdinit()\n\r");

   ifnext = &ifnet;
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      free ((char *)ifp);
   ifnet = 0;

   return;

} /* ifdinit() */

/******************************************************************************/
#ifdef OldCode
ifinit()
{
        struct interface ifs, *ifp;
        int s, n;
        char buf[512];
        struct ifconf ifc;
        struct ifreq ifreq, *ifr;
        struct sockaddr_in *sin;
        u_long i;

        if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
                return;

        ifc.ifc_len = sizeof (buf);
        ifc.ifc_buf = buf;
        if (socketioctl(s, SIOCGIFCONF, (char *)&ifc) < 0) {
                socketclose(s);
                return;
        }
        ifr = ifc.ifc_req;
        for (n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++) {
                bzero((char *)&ifs, sizeof(ifs));
                ifs.int_addr = ifr->ifr_addr;
                ifreq = *ifr;
                if (socketioctl(s, SIOCGIFFLAGS, (char *)&ifreq) < 0) {
                        continue;
                }
                ifs.int_flags = ifreq.ifr_flags | IFF_INTERFACE;
                if (ifs.int_flags & IFF_LOOPBACK)
                        continue;
                if ((ifs.int_flags & IFF_UP) == 0 ||
                    ((struct sockaddr *)&ifr->ifr_addr)->sa_family != AF_INET)
                        continue;
                if (if_ifwithaddr(&ifs.int_addr))
                        continue;
                if (ifs.int_flags & IFF_BROADCAST) {
                        if (socketioctl(s, SIOCGIFBRDADDR, (char *)&ifreq) < 0) {
                                continue;
                        }
                        ifs.int_broadaddr = ifreq.ifr_broadaddr;
                }
#ifdef SIOCGIFMETRIC
                if (socketioctl(s, SIOCGIFMETRIC, (char *)&ifreq) < 0) {
                        ifs.int_metric = 0;
                } else
                        ifs.int_metric = ifreq.ifr_metric;
#else
                ifs.int_metric = 0;
#endif

                ifs.int_metric++;
                if (socketioctl(s, SIOCGIFNETMASK, (char *)&ifreq) < 0) {
                        continue;
                }
                sin = (struct sockaddr_in *)&ifreq.ifr_addr;
                ifs.int_subnetmask = ntohl(sin->sin_addr.s_addr);
                sin = (struct sockaddr_in *)&ifs.int_addr;
                i = ntohl(sin->sin_addr.s_addr);
                if (IN_CLASSA(i))
                        ifs.int_netmask = IN_CLASSA_NET;
                else if (IN_CLASSB(i))
                        ifs.int_netmask = IN_CLASSB_NET;
                else
                        ifs.int_netmask = IN_CLASSC_NET;
                ifs.int_net = i & ifs.int_netmask;
                ifs.int_subnet = i & ifs.int_subnetmask;
                if (ifs.int_subnetmask != ifs.int_netmask)
                        ifs.int_flags |= IFF_SUBNET;
                ifp = (struct interface *)malloc(sizeof (struct interface));
                if (ifp == 0)
                        break;
                *ifp = ifs;
                ifp->int_name = malloc(strlen(ifr->ifr_name) + 1);
                if (ifp->int_name == 0) {
                        socketclose(s);
                        return;
                }
                strcpy(ifp->int_name, ifr->ifr_name);
                *ifnext = ifp;
                ifnext = &ifp->int_next;
                addrouteforif(ifp);
                setrtdelay();
        }
        socketclose(s);
        return;
}
#else
static void ifinit(void)
{
   struct interface ifs, *ifp;
   int s, n, l;
   char buf[512];
   struct ifconf ifc;
   struct ifreq ifreq, *ifr;
   struct sockaddr_in *sin;
   u_long i;

   DEBUGP1("#ifinit()\n\r");

   if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
      return;

   ifc.ifc_len = sizeof(buf);
   ifc.ifc_buf = buf;
   if (socketioctl(s, SIOCGIFCONF, (char *)&ifc) < 0)
   {
      socketclose(s);
      return;
   }

   ifr = ifc.ifc_req;

   for (n = ifc.ifc_len; n > 0; n-=l, ifr = (struct ifreq *) ((char *) ifr + l))
   {
      DEBUGP2("#ifinit(), doing interface %s\n\r", ifr->ifr_name);

      l = sizeof(struct ifreq);
      if (ifr->ifr_addr.sa_len)
         l += ifr->ifr_addr.sa_len - sizeof(struct sockaddr);

      if (ifr->ifr_addr.sa_family != AF_INET)
         continue;

      bzero((char *)&ifs, sizeof(ifs));
      ifs.int_addr = ifr->ifr_addr;
      ifreq = *ifr;

      if (socketioctl(s, SIOCGIFFLAGS, (char *)&ifreq) < 0)
      {
         DEBUGP1("#SIOCGIFFLAGS failed\n\r");
         continue;
      }

      ifs.int_flags = ifreq.ifr_flags | IFF_INTERFACE;

      if (ifs.int_flags & IFF_LOOPBACK)
      {
         DEBUGP1("#LOOPBACK interface\n\r");
         continue;
      }

      if ((ifs.int_flags & IFF_UP) == 0)
         continue;

      if (if_ifwithaddr(&ifs.int_addr))
         continue;

      if (ifs.int_flags & IFF_BROADCAST)
      {
         if (socketioctl(s, SIOCGIFBRDADDR, (char *)&ifreq) < 0)
         {
            DEBUGP1("#SIOCGIFBRDADDR failed\n\r");
            continue;
         }
         ifs.int_broadaddr = ifreq.ifr_broadaddr;
      }
#ifdef SIOCGIFMETRIC
      if (socketioctl(s, SIOCGIFMETRIC, (char *)&ifreq) < 0)
      {
         DEBUGP1("#SIOCGIFMETRIC failed\n\r");
         ifs.int_metric = 0;
      }
      else
         ifs.int_metric = ifreq.ifr_metric;
#else
      ifs.int_metric = 0;
#endif

      ifs.int_metric++;

      if (socketioctl(s, SIOCGIFNETMASK, (char *)&ifreq) < 0)
      {
         DEBUGP1("#SIOCGIFNETMASK failed\n\r");
         continue;
      }

      sin = (struct sockaddr_in *)&ifreq.ifr_addr;
      ifs.int_subnetmask = ntohl(sin->sin_addr.s_addr);
      DEBUGP2("#subnetmask = %08X\n\r", ifs.int_subnetmask);
      sin = (struct sockaddr_in *)&ifs.int_addr;
      i = ntohl(sin->sin_addr.s_addr);
      DEBUGP2("#address = %08X\n\r", i);
      if (IN_CLASSA(i))
      {
         DEBUGP1("#Interface has a CLASS A address\n\r");
         ifs.int_netmask = IN_CLASSA_NET;
      }
      else
         if (IN_CLASSB(i))
         {
            DEBUGP1("#Interface has a CLASS B address\n\r");
            ifs.int_netmask = IN_CLASSB_NET;
         }
         else
         {
            DEBUGP1("#Interface has a CLASS C address\n\r");
            ifs.int_netmask = IN_CLASSC_NET;
         }

/*      ifs.int_netmask = IN_CLASSB_NET;*/
      DEBUGP2("#netmask = %08X\n\r", ifs.int_netmask);
      ifs.int_net = i & ifs.int_netmask;
      ifs.int_subnet = i & ifs.int_subnetmask;
      if (ifs.int_subnetmask != ifs.int_netmask)
      {
         DEBUGP1("#ifinit() setting IFF_SUBNET\n\r");
         ifs.int_flags |= IFF_SUBNET;
      }
      ifp = (struct interface *)malloc(sizeof(struct interface));

      if (ifp == 0)
         break;

      *ifp = ifs;
      ifp->int_name = malloc(strlen(ifr->ifr_name) + 1);
      if (ifp->int_name == 0)
      {
         socketclose(s);
         return;
      }

      strcpy(ifp->int_name, ifr->ifr_name);
      *ifnext = ifp;
      ifnext = &ifp->int_next;

      addrouteforif(ifp);

      setrtdelay();

   } /* endfor */

   socketclose(s);

   return;

} /* ifinit() */

#endif

/******************************************************************************/
#ifdef OldCode
addrouteforif(ifp)
        struct interface *ifp;
{
        struct sockaddr_in net;
        struct sockaddr *dst;
        register struct rt_entry *rt;

        if (ifp->int_flags & IFF_POINTOPOINT)
                dst = &ifp->int_dstaddr;
        else {
                bzero((char *)&net, sizeof (net));
                net.sin_family = AF_INET;
                net.sin_addr = inet_rmakeaddr(ifp->int_subnet, INADDR_ANY);
                dst = (struct sockaddr *)&net;
        }
        rt = rtfind(dst);
        if (rt &&
            (rt->rt_state & (RTS_INTERFACE | RTS_INTERNAL)) == RTS_INTERFACE)
                return;
        if (rt)
                rtdelete(rt);

        if ((ifp->int_flags & (IFF_SUBNET|IFF_POINTOPOINT)) == IFF_SUBNET) {
                struct in_addr subnet;

                subnet = net.sin_addr;
                net.sin_addr = inet_rmakeaddr(ifp->int_net, INADDR_ANY);
                rt = rtfind(dst);
                if (rt == 0)
                        rtadd(dst, &ifp->int_addr, ifp->int_metric,
                            ((ifp->int_flags & (IFF_INTERFACE|IFF_REMOTE)) |
                            RTS_INTERNAL | RTS_SUBNET));
                else if ((rt->rt_state & (RTS_INTERNAL|RTS_SUBNET)) ==
                    (RTS_INTERNAL|RTS_SUBNET) &&
                    ifp->int_metric < rt->rt_metric)
                        rtchange(rt, &rt->rt_router, ifp->int_metric);
                net.sin_addr = subnet;
        }
        rtadd(dst, &ifp->int_addr, ifp->int_metric,
            ifp->int_flags & (IFF_INTERFACE | IFF_REMOTE | IFF_SUBNET));
}
#else
void addrouteforif(struct interface *ifp)
{
   struct sockaddr_in net;
   struct sockaddr *dst;
   register struct rt_entry *rt;

   DEBUGP2("#addrouteforif() %s\n\r", ifp->int_name);

   if (ifp->int_flags & IFF_POINTOPOINT)
      dst = &ifp->int_dstaddr;
   else
   {
      bzero((char *)&net, sizeof(net));
      net.sin_family = AF_INET;
      net.sin_addr = inet_rmakeaddr(ifp->int_subnet, INADDR_ANY);
      dst = (struct sockaddr *)&net;
      DEBUGP2("#addrouteforif() dst = %08X\n\r",
                                  ((struct sockaddr_in *)dst)->sin_addr.s_addr);
   }
   rt = rtfind(dst);
   DEBUGP3("#addrouteforif() rt1 = %08X, dst = %08X\n\r",
                              rt, ((struct sockaddr_in *)dst)->sin_addr.s_addr);

   if (rt && (rt->rt_state & (RTS_INTERFACE | RTS_INTERNAL)) == RTS_INTERFACE)
      return;

   if (rt)
      rtdelete(rt);

   if ((ifp->int_flags & (IFF_SUBNET|IFF_POINTOPOINT)) == IFF_SUBNET)
   {
      struct in_addr subnet;

      DEBUGP2("#addrouteforif() IFF_SUBNET set, dst = %08X\n\r",
                                  ((struct sockaddr_in *)dst)->sin_addr.s_addr);

      subnet = net.sin_addr;
      net.sin_addr = inet_rmakeaddr(ifp->int_net, INADDR_ANY);
      DEBUGP2("#addrouteforif() dst = %08X\n\r",
                                  ((struct sockaddr_in *)dst)->sin_addr.s_addr);
      rt = rtfind(dst);
      DEBUGP3("#addrouteforif() rt2 = %08X, dst = %08X\n\r",
                              rt, ((struct sockaddr_in *)dst)->sin_addr.s_addr);
      if (rt == 0)
         rtadd(dst, &ifp->int_addr, ifp->int_metric,
                                ((ifp->int_flags & (IFF_INTERFACE|IFF_REMOTE)) |
                                                    RTS_INTERNAL | RTS_SUBNET));
      else
         if ((rt->rt_state & (RTS_INTERNAL|RTS_SUBNET)) ==
                   (RTS_INTERNAL|RTS_SUBNET) && ifp->int_metric < rt->rt_metric)
            rtchange(rt, &rt->rt_router, ifp->int_metric);
      net.sin_addr = subnet;
   }

   DEBUGP2("#addrouteforif() dst now = %08X\n\r",
                                  ((struct sockaddr_in *)dst)->sin_addr.s_addr);
   rtadd(dst, &ifp->int_addr, ifp->int_metric,
                    ifp->int_flags & (IFF_INTERFACE | IFF_REMOTE | IFF_SUBNET));

   DEBUGP1("#addrouteforif() exit\n\r");

   return;

} /* addrouteforif() */

#endif


/******************************************************************************/
#ifdef OldCode
struct qelem {
        struct qelem *q_forw;
        struct qelem *q_back;
        char *q_data;
};
#endif

/******************************************************************************/
#ifdef OldCode
void
insque(elem, pred)
struct qelem *elem, *pred;
{
        if (pred == 0 || elem == 0)
                return;
        if (pred->q_forw)
                pred->q_forw->q_back = elem;
        elem->q_forw = pred->q_forw;
        pred->q_forw = elem;
        elem->q_back = pred;
}
#else
void insque(struct qelem *elem, struct qelem *pred)
{
   if (pred == 0 || elem == 0)
      return;
   if (pred->q_forw)
      pred->q_forw->q_back = elem;
   elem->q_forw = pred->q_forw;
   pred->q_forw = elem;
   elem->q_back = pred;

   return;

} /* insque() */

#endif

/******************************************************************************/
#ifdef OldCode
void
remque(elem)
struct qelem *elem;
{
        if (elem == 0)
                return;
        if (elem->q_back != 0)
                elem->q_back->q_forw = elem->q_forw;
        if (elem->q_forw)
                elem->q_forw->q_back = elem->q_back;
}
#else
void remque(struct qelem *elem)
{
   if (elem == 0)
      return;
   if (elem->q_back != 0)
      elem->q_back->q_forw = elem->q_forw;
   if (elem->q_forw)
      elem->q_forw->q_back = elem->q_back;

   return;

} /* remque() */

#endif

/******************************************************************************/

u_int min(u_int a, u_int b)
{
   return (a < b ? a : b);

} /* min() */

/******************************************************************************/

/* EOF startup.c */
@


4.3
log
@Made 32-bit compatible.
Changed to use VersionNum.

Version 6.19. Tagged as 'Net-6_19'
@
text
@d58 1
d68 2
@


4.2
log
@Version RO_3_71 taken
@
text
@a89 13
#ifdef OldCode
startup_routed()
{
    msg = (struct rip *)packet;
    routed_changes = 0;
    ifdinit();
    rtinit();
    ifinit();
    startup_count = STARTUP_RETRIES;
    do_ripcmd_req();
    return (0);
}
#else
d106 1
a106 1
#endif
a107 12
/******************************************************************************/
#ifdef OldCode
do_ripcmd_req()
{
    msg->rip_cmd = RIPCMD_REQUEST;
    msg->rip_vers = RIPVERSION;
    msg->rip_nets[0].rip_dst.sa_family = htons((u_short)AF_UNSPEC);
    msg->rip_nets[0].rip_metric = htonl((u_long)HOPCNT_INFINITY);
    toall(rsendmsg);
    startup_timer = --startup_count > 0 ? STARTUP_DELAY : 0;
}
#else
a122 2
#endif

a123 4
#ifdef OldCode
ifdinit()
{
        struct interface *ifp;
a124 6
        ifnext = &ifnet;
        for (ifp = ifnet; ifp; ifp = ifp->int_next)
            free ((char *)ifp);
        ifnet = 0;
}
#else
a139 2
#endif

d232 1
a232 1
   int s, n;
d246 1
a246 1
   if (socketioctl(s, OSIOCGIFCONF, (char *)&ifc) < 0)
d254 1
a254 1
   for (n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++)
d258 5
a262 1
      if (((struct osockaddr *)&ifr->ifr_addr)->sa_family != AF_INET)
d283 1
a283 1
      if ((ifs.int_flags & IFF_UP) == 0 || ifr->ifr_addr.sa_family == AF_UNSPEC)
a562 5
#ifdef OldCode
unsigned
min(a, b)
        u_int a, b;
{
a563 3
        return (a < b ? a : b);
}
#else
a568 2

#endif
@


4.1
log
@Initial revision
@
text
@d15 29
d52 1
d55 30
d88 3
d102 18
d121 2
d132 15
d148 4
d157 1
a157 1
        for (ifp = ifnet; ifp; ifp = ifp->int_next) 
d161 4
d166 1
d168 13
d191 1
a191 1
        if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0) 
d212 1
a212 1
                    ifr->ifr_addr.sa_family == AF_UNSPEC) 
d214 1
a214 1
                if (if_ifwithaddr(&ifs.int_addr)) 
d250 1
a250 1
                if (ifp == 0) 
d262 1
a262 1
                setrtdelay(); 
d267 142
d410 1
d412 6
d435 1
a435 1
            (rt->rt_state & (RTS_INTERFACE | RTS_INTERNAL)) == RTS_INTERFACE) 
d450 1
a450 1
                else if ((rt->rt_state & (RTS_INTERNAL|RTS_SUBNET)) == 
d456 1
a456 1
        rtadd(dst, &ifp->int_addr, ifp->int_metric, 
d459 63
d523 3
d527 3
d535 1
d537 2
d551 10
d562 8
d581 15
d597 2
d606 4
d611 7
a617 6
int gettimeofday( struct timeval *tv, struct timezone *tzp )
{
        tv->tv_sec = time( NULL );
        tv->tv_usec = 0;
        return NULL;
}
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a0 43
/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* startup.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * startup routines
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 20-Oct-95  18:11  JPD  Version 1.00
 * First version with change record.
 *
 **End of change record*
 */

#ifdef OldCode

a22 1

a24 30
#else

#include <stdlib.h>

#include "sys/types.h"
#include "sys/time.h"
#include "sys/ioctl.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "net/if.h"
#include "net/route.h"
#include "protocols/routed.h"

#include "mnsg.h"
#include "module.h"
#include "debug.h"
#include "table.h"
#include "data.h"
#include "inetcode.h"
#include "output.h"
#include "interface.h"
#include "startup.h"

static void ifinit(void);
static void ifdinit(void);

#endif

static int startup_count = 0;

a27 3
/******************************************************************************/

#ifdef OldCode
a38 18
#else
void startup_routed(void)
{
   DEBUGP1("#startup_routed()\n\r");

   msg = (struct rip *)packet;
   routed_changes = 0;
   ifdinit();
   rtinit();
   ifinit();
   startup_count = STARTUP_RETRIES;
   do_ripcmd_req();

   return;

} /* startup_routed() */

#endif
a39 2
/******************************************************************************/
#ifdef OldCode
a48 15
#else
void do_ripcmd_req(void)
{
   DEBUGP1("#do_ripcmd_req()\n\r");

   msg->rip_cmd = RIPCMD_REQUEST;
   msg->rip_vers = RIPVERSION;
   msg->rip_nets[0].rip_dst.sa_family = htons((u_short)AF_UNSPEC);
   msg->rip_nets[0].rip_metric = htonl((u_long)HOPCNT_INFINITY);
   toall(rsendmsg);
   startup_timer = --startup_count > 0 ? STARTUP_DELAY : 0;

   return;

} /* do_ripcmd_req() */
a49 4
#endif

/******************************************************************************/
#ifdef OldCode
d55 1
a55 1
        for (ifp = ifnet; ifp; ifp = ifp->int_next)
a58 4
#else
static void ifdinit(void)
{
   struct interface *ifp;
a59 1
   DEBUGP1("#ifdinit()\n\r");
a60 13
   ifnext = &ifnet;
   for (ifp = ifnet; ifp; ifp = ifp->int_next)
      free ((char *)ifp);
   ifnet = 0;

   return;

} /* ifdinit() */

#endif

/******************************************************************************/
#ifdef OldCode
d71 1
a71 1
        if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
d92 1
a92 1
                    ((struct sockaddr *)&ifr->ifr_addr)->sa_family != AF_INET)
d94 1
a94 1
                if (if_ifwithaddr(&ifs.int_addr))
d130 1
a130 1
                if (ifp == 0)
d142 1
a142 1
                setrtdelay();
a146 142
#else
static void ifinit(void)
{
   struct interface ifs, *ifp;
   int s, n;
   char buf[512];
   struct ifconf ifc;
   struct ifreq ifreq, *ifr;
   struct sockaddr_in *sin;
   u_long i;

   DEBUGP1("#ifinit()\n\r");

   if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
      return;

   ifc.ifc_len = sizeof(buf);
   ifc.ifc_buf = buf;
   if (socketioctl(s, OSIOCGIFCONF, (char *)&ifc) < 0)
   {
      socketclose(s);
      return;
   }

   ifr = ifc.ifc_req;

   for (n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++)
   {
      DEBUGP2("#ifinit(), doing interface %s\n\r", ifr->ifr_name);

      if (((struct osockaddr *)&ifr->ifr_addr)->sa_family != AF_INET)
         continue;

      bzero((char *)&ifs, sizeof(ifs));
      ifs.int_addr = ifr->ifr_addr;
      ifreq = *ifr;

      if (socketioctl(s, SIOCGIFFLAGS, (char *)&ifreq) < 0)
      {
         DEBUGP1("#SIOCGIFFLAGS failed\n\r");
         continue;
      }

      ifs.int_flags = ifreq.ifr_flags | IFF_INTERFACE;

      if (ifs.int_flags & IFF_LOOPBACK)
      {
         DEBUGP1("#LOOPBACK interface\n\r");
         continue;
      }

      if ((ifs.int_flags & IFF_UP) == 0 || ifr->ifr_addr.sa_family == AF_UNSPEC)
         continue;

      if (if_ifwithaddr(&ifs.int_addr))
         continue;

      if (ifs.int_flags & IFF_BROADCAST)
      {
         if (socketioctl(s, SIOCGIFBRDADDR, (char *)&ifreq) < 0)
         {
            DEBUGP1("#SIOCGIFBRDADDR failed\n\r");
            continue;
         }
         ifs.int_broadaddr = ifreq.ifr_broadaddr;
      }
#ifdef SIOCGIFMETRIC
      if (socketioctl(s, SIOCGIFMETRIC, (char *)&ifreq) < 0)
      {
         DEBUGP1("#SIOCGIFMETRIC failed\n\r");
         ifs.int_metric = 0;
      }
      else
         ifs.int_metric = ifreq.ifr_metric;
#else
      ifs.int_metric = 0;
#endif

      ifs.int_metric++;

      if (socketioctl(s, SIOCGIFNETMASK, (char *)&ifreq) < 0)
      {
         DEBUGP1("#SIOCGIFNETMASK failed\n\r");
         continue;
      }

      sin = (struct sockaddr_in *)&ifreq.ifr_addr;
      ifs.int_subnetmask = ntohl(sin->sin_addr.s_addr);
      DEBUGP2("#subnetmask = %08X\n\r", ifs.int_subnetmask);
      sin = (struct sockaddr_in *)&ifs.int_addr;
      i = ntohl(sin->sin_addr.s_addr);
      DEBUGP2("#address = %08X\n\r", i);
      if (IN_CLASSA(i))
      {
         DEBUGP1("#Interface has a CLASS A address\n\r");
         ifs.int_netmask = IN_CLASSA_NET;
      }
      else
         if (IN_CLASSB(i))
         {
            DEBUGP1("#Interface has a CLASS B address\n\r");
            ifs.int_netmask = IN_CLASSB_NET;
         }
         else
         {
            DEBUGP1("#Interface has a CLASS C address\n\r");
            ifs.int_netmask = IN_CLASSC_NET;
         }

/*      ifs.int_netmask = IN_CLASSB_NET;*/
      DEBUGP2("#netmask = %08X\n\r", ifs.int_netmask);
      ifs.int_net = i & ifs.int_netmask;
      ifs.int_subnet = i & ifs.int_subnetmask;
      if (ifs.int_subnetmask != ifs.int_netmask)
      {
         DEBUGP1("#ifinit() setting IFF_SUBNET\n\r");
         ifs.int_flags |= IFF_SUBNET;
      }
      ifp = (struct interface *)malloc(sizeof(struct interface));

      if (ifp == 0)
         break;

      *ifp = ifs;
      ifp->int_name = malloc(strlen(ifr->ifr_name) + 1);
      if (ifp->int_name == 0)
      {
         socketclose(s);
         return;
      }

      strcpy(ifp->int_name, ifr->ifr_name);
      *ifnext = ifp;
      ifnext = &ifp->int_next;

      addrouteforif(ifp);

      setrtdelay();

   } /* endfor */

   socketclose(s);
a147 1
   return;
a148 6
} /* ifinit() */

#endif

/******************************************************************************/
#ifdef OldCode
d166 1
a166 1
            (rt->rt_state & (RTS_INTERFACE | RTS_INTERNAL)) == RTS_INTERFACE)
d181 1
a181 1
                else if ((rt->rt_state & (RTS_INTERNAL|RTS_SUBNET)) ==
d187 1
a187 1
        rtadd(dst, &ifp->int_addr, ifp->int_metric,
a189 63
#else
void addrouteforif(struct interface *ifp)
{
   struct sockaddr_in net;
   struct sockaddr *dst;
   register struct rt_entry *rt;

   DEBUGP2("#addrouteforif() %s\n\r", ifp->int_name);

   if (ifp->int_flags & IFF_POINTOPOINT)
      dst = &ifp->int_dstaddr;
   else
   {
      bzero((char *)&net, sizeof(net));
      net.sin_family = AF_INET;
      net.sin_addr = inet_rmakeaddr(ifp->int_subnet, INADDR_ANY);
      dst = (struct sockaddr *)&net;
      DEBUGP2("#addrouteforif() dst = %08X\n\r",
                                  ((struct sockaddr_in *)dst)->sin_addr.s_addr);
   }
   rt = rtfind(dst);
   DEBUGP3("#addrouteforif() rt1 = %08X, dst = %08X\n\r",
                              rt, ((struct sockaddr_in *)dst)->sin_addr.s_addr);

   if (rt && (rt->rt_state & (RTS_INTERFACE | RTS_INTERNAL)) == RTS_INTERFACE)
      return;

   if (rt)
      rtdelete(rt);

   if ((ifp->int_flags & (IFF_SUBNET|IFF_POINTOPOINT)) == IFF_SUBNET)
   {
      struct in_addr subnet;

      DEBUGP2("#addrouteforif() IFF_SUBNET set, dst = %08X\n\r",
                                  ((struct sockaddr_in *)dst)->sin_addr.s_addr);

      subnet = net.sin_addr;
      net.sin_addr = inet_rmakeaddr(ifp->int_net, INADDR_ANY);
      DEBUGP2("#addrouteforif() dst = %08X\n\r",
                                  ((struct sockaddr_in *)dst)->sin_addr.s_addr);
      rt = rtfind(dst);
      DEBUGP3("#addrouteforif() rt2 = %08X, dst = %08X\n\r",
                              rt, ((struct sockaddr_in *)dst)->sin_addr.s_addr);
      if (rt == 0)
         rtadd(dst, &ifp->int_addr, ifp->int_metric,
                                ((ifp->int_flags & (IFF_INTERFACE|IFF_REMOTE)) |
                                                    RTS_INTERNAL | RTS_SUBNET));
      else
         if ((rt->rt_state & (RTS_INTERNAL|RTS_SUBNET)) ==
                   (RTS_INTERNAL|RTS_SUBNET) && ifp->int_metric < rt->rt_metric)
            rtchange(rt, &rt->rt_router, ifp->int_metric);
      net.sin_addr = subnet;
   }

   DEBUGP2("#addrouteforif() dst now = %08X\n\r",
                                  ((struct sockaddr_in *)dst)->sin_addr.s_addr);
   rtadd(dst, &ifp->int_addr, ifp->int_metric,
                    ifp->int_flags & (IFF_INTERFACE | IFF_REMOTE | IFF_SUBNET));

   DEBUGP1("#addrouteforif() exit\n\r");

   return;
a190 3
} /* addrouteforif() */

#endif
a191 3

/******************************************************************************/
#ifdef OldCode
a196 1
#endif
a197 2
/******************************************************************************/
#ifdef OldCode
a209 10
#else
void insque(struct qelem *elem, struct qelem *pred)
{
   if (pred == 0 || elem == 0)
      return;
   if (pred->q_forw)
      pred->q_forw->q_back = elem;
   elem->q_forw = pred->q_forw;
   pred->q_forw = elem;
   elem->q_back = pred;
a210 8
   return;

} /* insque() */

#endif

/******************************************************************************/
#ifdef OldCode
a221 15
#else
void remque(struct qelem *elem)
{
   if (elem == 0)
      return;
   if (elem->q_back != 0)
      elem->q_back->q_forw = elem->q_forw;
   if (elem->q_forw)
      elem->q_forw->q_back = elem->q_back;

   return;

} /* remque() */

#endif
a222 2
/******************************************************************************/
#ifdef OldCode
d230 2
a231 2
#else
u_int min(u_int a, u_int b)
d233 4
a236 9
   return (a < b ? a : b);

} /* min() */

#endif

/******************************************************************************/

/* EOF startup.c */
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
