head	4.6;
access;
symbols
	Net-6_26:4.6
	Net-6_25:4.6
	Net-6_24:4.5
	Net-6_23:4.4
	Net-6_22:4.3
	Net-6_21:4.3
	RO_5_07:4.3
	Net-6_20:4.3
	Net-6_19:4.2
	Net-6_18:4.2
	Ursula_merge:4.2
	Ursula_13May1998_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2015.05.29.19.29.05;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	2VVHsW5ULMhIonny;

4.5
date	2013.03.04.21.40.20;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	6nodLtD9YevXlwGw;

4.4
date	2012.05.10.07.13.52;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	yxijtnXXcm9B894w;

4.3
date	2003.12.03.19.22.00;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.11.26.02;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.29;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.29;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.48;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Have Net look after its own messages
Net was trying to share some messages with the Econet module, though on balance this wasn't particularly useful as it then needed to duplicate message handling code to keep 2 files open. Because those messages were held in AUNMsgs they didn't get tokenised in ROM, overall ending up taking more space.

Register in ResourcesFS at run time for RAM targets, add tokenisation directives for ROM targets, removed redundant !Configure related strings.
Changed the messages fd to be int's to ensure word alignment.
Removed inappropriate Service_MessageFileClosed handler, MessageTrans reopens the files (since the fd is in the RMA) so no need to reopen them a second time. This service call is intended to recache direct pointers to tokens, but none are ever taken.
Save time by just making textbuf a zero length string rather than memset()ing the whole buffer.
Resolved a couple more compiler warnings (but NetG still doesn't compile).
Fix bug where a failure to enable the internet event would decrement the internet event count for any other modules interested in that event.
Use CMHG finalisation rather than atexit().
Error "AUN not configured" now uses a non zero trappable error number.
Error number for BadSWI corrected from 0x111 to 0x110.

Requires HdrSrc-2_51 for the error number.

Version 6.25. Tagged as 'Net-6_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* module.h
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Main Net module header file
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 *
 * 09-Dec-94  17:30  JPD  Version 1.00
 * First version with change record. Modified some definitions to remove
 * compiler warnings, to cope with DCI-4 and new mbuf structure.
 *
 * 20-Dec-94  15:37  JPD  Version 1.01
 * Added definitions for reading CMOS, definition for Internet module name.
 * Increased CURRENT_DCI_VERSION to 401.
 *
 * 05-Jan-95  15:40  JPD  Version 1.02
 * Removed Service_MessageFileClosed (defined elsewhere).
 *
 * 02-Feb-95  09:57  JPD  Version 1.03
 * Removed some redundant definitions. Added extern definition for mns struct
 * and msg_fd_eco, added UNUSED definition. Changed RELEASE_NBR to 9
 *
 * 13-Feb-95  10:02  JPD  Version 1.04
 * Changed RELEASE_NBR to 10.
 *
 * 22-Feb-95  11:22  JPD  Version 1.05
 * Changed RELEASE_NBR to 11. Removed OldCode.
 *
 * 28-Feb-95  12:22  JPD  Version 1.06
 * Added MAACHINE_TYPE_ definitions.
 *
 * 09-Mar-95  17:07  JPD  Version 1.07
 * Changed RELEASE_NBR to 12.
 *
 * 14-Mar-95  12:28  JPD  Version 1.08
 * Changed RELEASE_NBR to 13. Moved struct client and struct ebuf
 * definitions here.
 *
 * 15-Mar-95  13:05  JPD  Version 1.09
 * Changed RELEASE_NBR to 14. Unfortunately previous change did not happen,
 * 6.13 wil return 612 as its version.
 *
 * 21-Mar-95  11:07  JPD  Version 1.10
 * Changed RELEASE_NBR to 15. Added modules_present definition.
 *
 * 18-Oct-95  11:35  JPD  Version 1.11
 * Changed RELEASE_NBR to 16: no major changes to most variants, but sources
 * changed to allow NetG to be made.
 *
 **End of change record*
 */

/* machine types returned by Econet_PeekMachine SWI */
#define MACHINE_TYPE_ARC      7
#define MACHINE_TYPE_RISC_PC 15

extern unsigned char machine_type;

/* The minimum version we can cope with. We need a later version (403) for
 * certain features, but not all use
 */

#define MINIMUM_DCI_VERSION 401

#define STARTUP_TIMEOUT     10

#define DFT_SEGSIZE        8192
#define MAX_SEGSIZE       12288

#define MNS_HANDLE_BASE   2
#define MNS_HANDLE_INCR   4

#define RESERVED_NET    128
#define ITEM_NAMELEN     16
#define BRIDGE_PORT    0x9c

#define MAX_ALLOCATE   0x90

#define ALL_ONES         0xffffffff

#define Err_BadPort       1   /* Bad port number */
#define Err_TooBig        2   /* Bad buffer size */
#define Err_PtNtAlc       3   /* Port not already allocated */
#define Err_PortAlc       4   /* Port not unallocated */
#define Err_NoPorts       5   /* All ports allocated */
#define Err_NoMem         6   /* no store */
#define Err_BadSWI        7   /* SWI number out of range */
#define Err_BadMask       8   /* Bad mask */
#define Err_NoHware       9   /* No Econet hardware */
#define Err_Fatal        10   /* Fatal error */
#define Err_BadStn       11   /* Bad station number */
#define Err_BadNet       12   /* Bad net number */
#define Err_Channel      13   /* Bad handle */
#define Err_NotConf      14   /* AUN is not configured */

struct eblk {
    int   err_nbr;
    char *err_token;
};

#define Str_TxOk     0
#define Str_NotAcc   1
#define Str_FullAd   2
#define Str_Noclck   3
#define Str_IfType   4
#define Str_Down     5
#define Str_StaNum   6
#define Str_BrdCst   7
#define Str_GlbBct   8
#define Str_AccNet   9
#define Str_ModSts  10
#define Str_TxStat  11
#define Str_Data    12
#define Str_Immedt  13
#define Str_ImmRep  14
#define Str_Retry   15
#define Str_Error   16
#define Str_DtaAck  17
#define Str_DtaRej  18
#define Str_Local   19
#define Str_Global  20
#define Str_Dscard  21
#define Str_RxStat  22
#define Str_InvRep  23
#define Str_MNSBan  24
#define Str_Gteway  25
#define Str_Gtewys  26
#define Str_Warn    27
#define Str_NoMap   28
#define Str_NoRout  29
#define Str_GwConf  30
#define Str_BadSta  31
#define Str_BadDev  32
#define Str_BadInet 33
#define Str_NtvEco  34
#define Str_BadGwy  35
#define Str_GtwSta  36

/************************************************************************88****/

extern void *module_wsp;
extern int restarting;

/* MessageTrans file descriptors */
extern int msg_fd_mns[4];

struct s_ebuf
{
   int  e_nbr;
   char e_string[36];
};

extern struct s_ebuf ebuf;

extern char textbuf[64];

/******************************************************************************/


struct mns
{
   int             mns_flags;
#define MNS_SOCKET             01
#define MNS_SEEKADDR           02
#define MNS_WANTMAP            04
#define MNS_WANTROUTE         010
#define MNS_DSINUSE           020
#define MNS_GATEWAY           040
#define MNS_MAPISSET         0100
#define MNS_SETADDR          0200
#define MNS_ALLSET           0400
   int              mns_atpsock;
   int              mns_routedsock;
   int              mns_rxdsock;
   int              mns_txdsock;
   int              mns_stationnumber;
   int              mns_randcount;
   int              mns_retrydelay;
   int              mns_retrycount;
#define RETRY_DELAY     100
#define RETRY_COUNT     2
   int              mns_nextport;
   u_char           mns_netnumber;
   u_char           mns_econetnumber;
   u_long           mns_econetipadr;
   u_long           mns_serverip;
   int              mns_ifcnt;
   char             mns_device[6];
   char             mns_module[24];
   u_long           mns_ifaddrs[4];
   int              mns_timer;
   u_int            mns_txhandle;
   u_int            mns_rxhandle;
   int              mns_segsize;
   struct address_q *mns_mapq;
   struct rxcb      *mns_rxlist;
   struct rxcb      *mns_rxwild;
   struct rxcb      *mns_rxfree;
   struct txcb      *mns_txlist;
   struct txcb      *mns_txfree;
   char             *mns_route;
   u_char   mns_states[256];
#define PORTALLOCATED        01
#define PORTCLAIMED          02
#define PORTRESERVED         04
#define ECONET_IS_CONNECTED 010
#define MNS_IS_CONNECTED    020
   /* stats counters */
   int              mns_txcnt;
   int              mns_txerrs;
   int              mns_txrej;
   int              mns_txacks;
   int              mns_tximmcnt;
   int              mns_tximmrcnt;
   int              mns_txretry;
   int              mns_txbccnt;
   int              mns_txlbc;
   int              mns_txgbc;
   int              mns_rxcnt;
   int              mns_rxacks;
   int              mns_rxrej;
   int              mns_rxdiscard;
   int              mns_rximmcnt;
   int              mns_rximreply;
   int              mns_rxackdiscard;
   int              mns_rxerrs;
   int              mns_rxbc;
   int              mns_rxretries;
};

extern struct mns mns;

/*
 *  MNS message format
 */

struct mns_msg
{
   u_char  mns_opcode;
   u_char  mns_port;
   u_char  mns_control;
#define Econet_MachinePeek        8
   u_char  mns_status;
#define MSG_IS_RETRY    01
#define MSG_IS_DATAGRAM 02
   u_int   mns_handle;
};

#define UNHDRSIZE  8

/*
 * Data Transform Protocol format
 *    ______________
 *   |opcode| count |
 *   |--------------|
 *   |  net |station|
 *   |--------------|
 *   |IP address blk|
 *   |______________|
 */

struct atp_block
{
   u_char   atpb_net;
   u_char   atpb_station;
   u_long   atpb_ipadr;
   char     atpb_sitename[ITEM_NAMELEN];
   char     atpb_netname[ITEM_NAMELEN];
};

struct atp_msg
{
   u_char    atp_opcode;
#define MNS_TRANSFORM_REQUEST       1
#define MNS_TRANSFORM_REPLY         2
   u_char   atp_count;
   u_char   atp_address;
};

struct address_q
{
   struct address_q  *q_next;
   u_char             q_net;
   u_char             q_station;
   u_long             q_ip;
   u_long             q_bcast;
   char               q_sitename[ITEM_NAMELEN];
   char               q_netname[ITEM_NAMELEN];
};

#define SocketIO              1    /* Internet event subreasons */
#define RarpReply             4

#define ANY_PORT    255
#define ANY_STATION 255
#define ANY_NETWORK 255

#define MNSDATAPORT    0x8000
#define MNSATPPORT     0x8001
#define ROUTEDPORT     520

#define BROADCAST_DATA_FRAME       1
#define DATA_FRAME                 2
#define DATA_FRAME_ACK             3
#define DATA_FRAME_REJ             4
#define IMMEDIATE_OP               5
#define IMMEDIATE_OP_REPLY         6

/*
 * cb template for list processing
 */
struct cbh
{
   struct cbh   *cb_next;
   u_int         cb_handle;
};

/*
 * Control blocks
 */

struct rxcb
{
   struct rxcb   *rx_next;
   u_int         rx_handle;
   u_char        rx_port;
   int           rx_station;
   int           rx_network;
   char          *rx_buf;
   int           rx_bufsize;
   int           rx_status;
#define Status_Free        -1
#define Status_RxReady      7
#define Status_Receiving    8
#define Status_Received     9
#define Status_NoReply     10
#define Status_Escape      11
#define Status_EcoReceived 12
#define Status_Dead        13
#define Status_Init        14
#define Status_EventPend   15
   int           rx_delay;
   int           rx_flag;
   int           rx_count;
   int           rx_ecotype;
   int           rx_wait;
};


struct txcb
{
   struct txcb   *tx_next;
   u_int         tx_handle;
   int           tx_status;
#define Status_Transmitted  0
#define Status_NetError     2
#define Status_NotListening 3
#define Status_TxReady      5
#define Status_Transmitting 6
   int           tx_control;
   int           tx_port;
   int           tx_network;
   int           tx_station;
   u_long        tx_dst;
   char          *tx_buf;
   int           tx_bufsize;
   int           tx_type;
   char          tx_ecotype;
   char          tx_callb;
   int           tx_rtcount;
   int           tx_rtmax;
   int           tx_rtdelay;
#define TX_RETRY_DELAY   500
   int           tx_rjcount;
   int           tx_rjmax;
   int           tx_rjdelay;
   int           tx_rjdelayval;
   int           tx_flag;
#define TX_WAIT            01
};

#define INTERNET_MODULE_NAME "Internet"

#define AUNBoot       SystemSpeedCMOS /* Byte for *Configure BootNet */
#define AUNBootBit    0x01            /* Bit in byte */

#ifndef UNUSED
#define UNUSED(x) (x = x)
#endif

extern int connected_econet;
extern int econet_transport_type;
extern int econet_not_present;

struct client
{
   void (*cli_call)(int argc, char **argv);      /* cli handler */
};

extern struct client mns_cli_call[];


/* whether necessary modules (DCI driver and Internet) are present and OK */
extern int modules_present;

/******************************************************************************/

/* EOF module.h */
@


4.5
log
@Makefile recreated from fragments
Reduce proliferation of cmhg files by passing in international help switch
Remove use of module name in MNS (using cmhg's magic no-such-swi return value)

Version 6.24. Tagged as 'Net-6_24'
@
text
@a109 3
#define MSG_FILE  "Resources:$.Resources.Econet.Messages"
#define MSG_FILE1 "Resources:$.Resources.Net.Messages"

a123 1
#define error_BAD_SWI    (_kernel_oserror *)-1 /* Let CMHG translate it */
d174 1
a174 2
extern char msg_fd_eco[16];
extern char msg_fd_mns[16];
@


4.4
log
@Build fix to work with TCPIPLibs-5_54.
Service calls, OSBytes, vector numbers all changed to use centralised defines.
Econet peek modified to use Module_Version from the VersionNum file.
Compiles, but not tested.

Version 6.23. Tagged as 'Net-6_23'
@
text
@d127 1
@


4.3
log
@ANSIized.

Version 6.20. Tagged as 'Net-6_20'
@
text
@a87 4
#define VERSION_NBR       6
#define RELEASE_NBR       18     /* NB: Match with module version number in
                                  * CMHG file - curr 6.18 */

d324 1
a324 8

#define EventV               16
#define TickerV              28
#define Event_Econet_Rx      14
#define Event_Econet_Tx      15

#define Internet_Event       19
#define SocketIO              1
a325 2
#define Event_Enable         14
#define Event_Disable        13
a414 3
#define Service_Reset               0x27
#define Service_ReAllocatePorts     0x48
#define Service_EconetDying         0x56
d417 2
a418 4
#define READCMOS      161       /* OS_Byte no. to read CMOS */
#define AUNBoot       0xc3      /* Byte for *Configure BootNet */
#define AUNBootBit    0x01      /* Bit in byte */
#define CMOS_Stn      0         /* byte for configured Econet station no. */
@


4.2
log
@Version RO_3_71 taken
@
text
@a179 3
/* whether reinitialising on a callback due to a service call */
extern int reinit_on_callback;

@


4.1
log
@Initial revision
@
text
@d64 14
d89 2
a90 1
#define RELEASE_NBR       12     /* NB: Match with module version number in CMHG file - curr 6.12 */
d92 5
a96 1
#define CURRENT_DCI_VERSION 401
d175 8
d185 14
d448 11
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a63 14
 * 14-Mar-95  12:28  JPD  Version 1.08
 * Changed RELEASE_NBR to 13. Moved struct client and struct ebuf
 * definitions here.
 *
 * 15-Mar-95  13:05  JPD  Version 1.09
 * Changed RELEASE_NBR to 14. Unfortunately previous change did not happen,
 * 6.13 wil return 612 as its version.
 *
 * 21-Mar-95  11:07  JPD  Version 1.10
 * Changed RELEASE_NBR to 15. Added modules_present definition.
 *
 * 18-Oct-95  11:35  JPD  Version 1.11
 * Changed RELEASE_NBR to 16: no major changes to most variants, but sources
 * changed to allow NetG to be made.
d75 1
a75 2
#define RELEASE_NBR       18     /* NB: Match with module version number in
                                  * CMHG file - curr 6.18 */
d77 1
a77 5
/* The minimum version we can cope with. We need a later version (403) for
 * certain features, but not all use
 */

#define MINIMUM_DCI_VERSION 401
a155 8
/************************************************************************88****/

extern void *module_wsp;
extern int restarting;

/* whether reinitialising on a callback due to a service call */
extern int reinit_on_callback;

a157 14
extern char msg_fd_mns[16];

struct s_ebuf
{
   int  e_nbr;
   char e_string[36];
};

extern struct s_ebuf ebuf;

extern char textbuf[64];

/******************************************************************************/

a406 11

struct client
{
   void (*cli_call)(int argc, char **argv);      /* cli handler */
};

extern struct client mns_cli_call[];


/* whether necessary modules (DCI driver and Internet) are present and OK */
extern int modules_present;
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
