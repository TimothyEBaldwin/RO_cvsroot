head	4.3;
access;
symbols
	Net-6_26:4.3
	Net-6_25:4.3
	Net-6_24:4.2
	Net-6_23:4.2
	Net-6_22:4.2
	Net-6_21:4.2
	RO_5_07:4.2
	Net-6_20:4.2
	Net-6_19:4.2
	Net-6_18:4.2
	Ursula_merge:4.2
	Ursula_13May1998_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.05.29.19.29.05;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	2VVHsW5ULMhIonny;

4.2
date	97.05.13.11.26.00;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.29;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.29;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.47;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Have Net look after its own messages
Net was trying to share some messages with the Econet module, though on balance this wasn't particularly useful as it then needed to duplicate message handling code to keep 2 files open. Because those messages were held in AUNMsgs they didn't get tokenised in ROM, overall ending up taking more space.

Register in ResourcesFS at run time for RAM targets, add tokenisation directives for ROM targets, removed redundant !Configure related strings.
Changed the messages fd to be int's to ensure word alignment.
Removed inappropriate Service_MessageFileClosed handler, MessageTrans reopens the files (since the fd is in the RMA) so no need to reopen them a second time. This service call is intended to recache direct pointers to tokens, but none are ever taken.
Save time by just making textbuf a zero length string rather than memset()ing the whole buffer.
Resolved a couple more compiler warnings (but NetG still doesn't compile).
Fix bug where a failure to enable the internet event would decrement the internet event count for any other modules interested in that event.
Use CMHG finalisation rather than atexit().
Error "AUN not configured" now uses a non zero trappable error number.
Error number for BadSWI corrected from 0x111 to 0x110.

Requires HdrSrc-2_51 for the error number.

Version 6.25. Tagged as 'Net-6_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* mns.h
 *
 * Author: Jem Davies (Cambridge Systems Design)
 *
 * Description
 * ===========
 * Header file for routines defined in main module file
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 *
 * 16-Dec-94  09:37  JPD  Version 1.00
 * Created.
 *
 * 13-Jan-95  12:13  JPD  Version 1.01
 * Attempt to allow compilation with -fah option.
 *
 * 14-Mar-95  12:57  JPD  Version 1.02
 * Moved some code to mnscommon.c.
 *
 *
 **End of change record*
 */

/******************************************************************************/

extern int do_mns_init(int booting);

/*
 * Perform initialisation
 *
 * Parameters:
 *    booting : !0 => initialisation for first time
 *               0 => reinitialisation as result of service call
 *
 * Returns:
 *    !0 : => successfully initialised
 *     0 : => either a problem, or reinitialised
 */

/******************************************************************************/

extern void free_sockets(void);

/******************************************************************************/

extern int ip_to_mns(u_long addr, int *net, int *station);

/******************************************************************************/

extern int src_is_ok(struct rxcb *rx, int net, int station);

/******************************************************************************/

extern u_long mns_to_ip(int net, int station);

/******************************************************************************/

extern int msg_broadcast(u_char flag, u_char port, char *data, int len,
                                                                     int local);

/******************************************************************************/

extern int in_local_aun_network(int net);

/******************************************************************************/

extern _kernel_oserror *range_check(int port, int station, int net);

/******************************************************************************/

extern int is_wild(int port, int station, int network);

/******************************************************************************/

extern int mns_addrtoname(char *b, u_long i);

/******************************************************************************/

/* EOF mns.h */
@


4.2
log
@Version RO_3_71 taken
@
text
@a51 33
extern _kernel_oserror *mns_swi_handler(int swinum, _kernel_swi_regs *r,
                                                                      void *pw);

/******************************************************************************/

extern _kernel_oserror *mns_init(char *cmd_tail, int pbase, void *pw);

/******************************************************************************/

extern int mns_event_entry(_kernel_swi_regs *regs, void *pwp);

/******************************************************************************/

extern int tick_entry(_kernel_swi_regs *regs, void *pwp);

/******************************************************************************/

extern int callb_entry(_kernel_swi_regs *regs, void *pwp);

/******************************************************************************/

extern int tick_handler(_kernel_swi_regs *r, void *pw);

/******************************************************************************/

extern void mns_sc_handler(int sn, _kernel_swi_regs *r);

/******************************************************************************/

extern int mns_event_handler(_kernel_swi_regs *r, void *pw);

/******************************************************************************/

@


4.1
log
@Initial revision
@
text
@d29 1
a29 1
 * Acorn Archimedes C release 5.02 or later.
d43 3
d73 1
a73 2
extern _kernel_oserror *mns_cli_handler(char *arg_string, int arg_count,
                                                          int cmd_no, void *pw);
d77 1
a77 1
extern _kernel_oserror *mns_error(int error);
d81 1
a81 1
extern char *mns_str(int strnbr);
d85 1
a85 1
extern void generate_event(int rx, int handle, int status, int port);
d87 11
a97 7
/******************************************************************************/

extern void generate_event_on_callback(struct txcb *tx);

/******************************************************************************/

extern void retransmit_on_callback(struct txcb *tx);
d101 1
a101 13
extern int callb_handler(const _kernel_swi_regs *rr);

/******************************************************************************/

extern int tick_handler(_kernel_swi_regs *r, void *pw);

/******************************************************************************/

extern void mns_sc_handler(int sn, _kernel_swi_regs *r);

/******************************************************************************/

extern int mns_event_handler(_kernel_swi_regs *r, void *pw);
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d29 1
a29 1
 * Acorn Archimedes C release 5.06 or later.
a42 3
 * 14-Mar-95  12:57  JPD  Version 1.02
 * Moved some code to mnscommon.c.
 *
d70 18
a87 1
extern int tick_handler(_kernel_swi_regs *r, void *pw);
d91 1
a91 1
extern void mns_sc_handler(int sn, _kernel_swi_regs *r);
d95 1
a95 1
extern int mns_event_handler(_kernel_swi_regs *r, void *pw);
d99 1
a99 1
extern int do_mns_init(int booting);
d101 3
a103 11
/*
 * Perform initialisation
 *
 * Parameters:
 *    booting : !0 => initialisation for first time
 *               0 => reinitialisation as result of service call
 *
 * Returns:
 *    !0 : => successfully initialised
 *     0 : => either a problem, or reinitialised
 */
d107 1
a107 1
extern void free_sockets(void);
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
