head	4.6;
access;
symbols
	Net-6_26:4.6
	Net-6_25:4.6
	Net-6_24:4.5
	Net-6_23:4.5
	Net-6_22:4.4
	Net-6_21:4.4
	RO_5_07:4.4
	Net-6_20:4.4
	Net-6_19:4.4
	Net-6_18:4.3
	Ursula_merge:4.1.1.1
	Ursula_13May1998_merge:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	Ursula_bp:4.1.1.1
	Ursula:4.1.1.1.0.6
	Ursula_13May1998_bp:4.1.1.1
	Ursula_13May1998:4.1.1.1.0.2
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.4
	Daytona_bp:4.1.1.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2015.05.29.19.29.08;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	2VVHsW5ULMhIonny;

4.5
date	2012.05.10.07.13.58;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	yxijtnXXcm9B894w;

4.4
date	2003.01.17.14.59.58;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	99.08.18.15.40.35;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.08.18.15.37.10;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.31;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.31;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.36.06;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Have Net look after its own messages
Net was trying to share some messages with the Econet module, though on balance this wasn't particularly useful as it then needed to duplicate message handling code to keep 2 files open. Because those messages were held in AUNMsgs they didn't get tokenised in ROM, overall ending up taking more space.

Register in ResourcesFS at run time for RAM targets, add tokenisation directives for ROM targets, removed redundant !Configure related strings.
Changed the messages fd to be int's to ensure word alignment.
Removed inappropriate Service_MessageFileClosed handler, MessageTrans reopens the files (since the fd is in the RMA) so no need to reopen them a second time. This service call is intended to recache direct pointers to tokens, but none are ever taken.
Save time by just making textbuf a zero length string rather than memset()ing the whole buffer.
Resolved a couple more compiler warnings (but NetG still doesn't compile).
Fix bug where a failure to enable the internet event would decrement the internet event count for any other modules interested in that event.
Use CMHG finalisation rather than atexit().
Error "AUN not configured" now uses a non zero trappable error number.
Error number for BadSWI corrected from 0x111 to 0x110.

Requires HdrSrc-2_51 for the error number.

Version 6.25. Tagged as 'Net-6_25'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; s.netasm
;
; Author: Keith Ruttle? (Acorn)
;
; Description
; ===========
; Assembler functions for Net module
;
; Environment
; ===========
; Acorn RISC OS 3.10 or later
;
; Assembler
; =========
; ObjAsm 3.06 or later
;
; Change record
; =============
;
; JPD  Jem Davies (Cambridge Systems Design)
;
;
; 22-Feb-95  16:12  JPD  Version 1.00
; First version with change record
;
;
;*End of change record*


        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:APCS.<APCS>
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:OsBytes
        GET     Hdr:Econet
        GET     Hdr:MsgTrans

        EXPORT  escape_seen
        EXPORT  do_econet
        EXPORT  do_ConvertStatusToString
        EXPORT  do_ConvertStatusToError
        EXPORT  do_ReadStationNumber

        AREA    netasm,PIC,CODE,REL

; This routine returns 1 if escape condition set, else 0
escape_seen
        Push    "lr"
        SWI     XOS_ReadEscapeState
        MOVCS   r0, #1
        MOVCC   r0, #0

        Push    "r0"
        MOV     r0, #OsByte_ClearEscape
        SWI     XOS_Byte

        PullAPCS "r0, pc"



do_econet       ; ( int SWI_Number, int *Regs_In, int *Regs_Out, int SWI_Code, int SWI_Data )

        ;       R0 is the SWI offset to call, only range 0 to &3F significant
        ;       R1 is a pointer to an array of registers to pass in (R0-R9)
        ;       R2 is a pointer to an array of registers to return (R0-R9)
        ;       R3 is the address of the routine to call
        ;       [ sp, #0 ] is the value to pass as the workspace (pointed to by R12)

        ADD     r12, sp, #0                             ; Pointer to the workspace
        Push    "r2, r4-r9, r10, r11, lr"               ; Save volatile registers
        MOV     r10, r3                                 ; Actual address to call, entry R3
        AND     r11, r0, #&3F                           ; SWI number to call, entry R0
        LDMIA   r1, { r0-r9 }                           ; Get registers to pass
        MOV     lr, pc                                  ; Calculate return address
        MOV     pc, r10                                 ; Go off the the Econet module
        Pull    r12                                     ; Address for return values, entry R2
        STMIA   r12, { r0-r9 }                          ; Put return registers back
        MOVVC   r0, #0                                  ; Indicate no error
        PullAPCS "r4-r9, r10, r11, pc"                  ; Return to caller; some bit of C

do_ConvertStatusToString ROUT
        ;       R0 ==> Pointer to register block for input and output
        ;       R1 ==> Pointer to the message block for Econet.Messages
        ;       R0 <== 0 for no error, else pointer to error as usual
        ;       Structure of the register block
        ;       R0 ==> Status number
        ;       R1 ==> Destination core
        ;       R2 ==> Number of bytes remaining in the buffer
        ;       R3 ==> Station number
        ;       R4 ==> Network number
        ;       R0 <== Input value of R1, else pointer to error as usual
        ;       R1 <== Updated pointer
        ;       R2 <== Bytes remaining, updated
        Push    "r0-r7, lr"
        MOV     r6, r0                                  ; Keep a pointer to the registers
        LDR     r0, [ r6, #0 ]                          ; Load up real input value
        AND     r0, r0, #&FF                            ; Only bother with the bottom byte
        CMP     r0, #Status_MaxValue
        BGT     BadStatus
        TEQ     r0, #Status_NotListening
        ADREQ   r7, TokenStationNotListening
        BEQ     ConvertStringWithArgument
        TEQ     r0, #Status_NoReply
        ADREQ   r7, TokenNoReplyFromStation
        BEQ     ConvertStringWithArgument
        TEQ     r0, #Status_NotPresent
        ADREQ   r7, TokenStationNotPresent
        BEQ     ConvertStringWithArgument
        TEQ     r0, #Status_NetError
        ADREQ   r7, TokenStationNetError
        BEQ     ConvertStringWithArgument
StandardConvert
        LDR     r0, [r6, #0]                            ; Recover status when branched to
        AND     r0, r0, #&ff
        ADR     r14, TokenTable + 4                     ; Skip the error numbers
        ADD     r14, r14, r0, LSL #3                    ; TokenTable + Status * 8
        ADD     r7, r14, r0, LSL #2                     ; TokenTable + Status * 12
        MOV     r4, #0
DoConvert
        MOV     r1, r7                                  ; Selected error token
        LDR     r0, [ sp, #4 ]                          ; MessageBlock
        ADD     r2, r6, #4
        LDMIA   r2, { r2, r3 }                          ; Initial values for R1 and R2
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
; ECN - 19/10/93
;   GSLookup corrupts SP & R11 and probably some other registers as well
;   Work around this by stuffing regs on stack and moving SP to somewhere
;   where it will hopefully be safe from the vagracies of GSLookup
        STMDB   sp!, {r8, r9, r10, r11, r12}
        MOV     r8, sp
        SWI     XMessageTrans_GSLookup
        MOV     sp, r8
        LDMIA   sp!, {r8, r9, r10, r11, r12}
        BVS     ErrorExitConvertToString
        LDR     r5, [ sp ], #16                         ; Pointer to register block
        ADD     r6, r2, r3                              ; Point at the message terminator
        LDR     r2, [ r5, #8 ]                          ; Entry value of R2
        SUBVC   r7, r2, r3                              ; Work out how much space is left
        LDR     r2, [r5, #4]                            ; Recover R1
        STMIA   r5, { r2, r6, r7 }                      ; Exit values R0, R1, and R2
        MOV     r0, #0                                  ; Indicate success
        PullAPCS "r4-r7, pc"

BadStatus
        ADR     r0, ErrorBadStatus
        LDR     r1, [ sp, #4 ]
        BL      LookupError
ErrorExitConvertToString
        LDR     r5, [ sp ], #16                         ; Pointer to register block
        STR     r0, [ r5, #0 ]
        PullAPCS "r4-r7, pc"

ConvertStringWithArgument
        LDR     r14, [ r6, #12 ]                        ; Get the station number
        TEQ     r14, #0                                 ; Is the station number zero?
        BEQ     StandardConvert                         ; Yes so no substitution
        CMP     r14, #255
        BGT     TryConvertWithText
        ADD     r0, r6, #12                             ; Point at Station number and Network number
        ADD     r1, sp, #8                              ; Point at the output string space
        MOV     r2, #8                                  ; String size
        SWI     XOS_ConvertNetStation
        BVS     StandardConvert
        ADD     r4, sp, #8
        B       DoConvert

TryConvertWithText
        LDR     r0, [ r6, #12 ]                         ; Get the Text pointer
        MOV     r1, r0
ConvertTextTerminationLoop
        SWI     XOS_ValidateAddress
        BVS     StandardConvert
        BCS     StandardConvert
        LDRB    r2, [ r1 ], #1
        TEQ     r2, #0                                  ; Is this the terminator?
        BNE     ConvertTextTerminationLoop
        MOV     r4, r0                                  ; The argument pointer
        B       DoConvert

do_ConvertStatusToError ROUT

        ;       R0 ==> Pointer to register block for input and output
        ;       R1 ==> Pointer to the message block for Econet.Messages
        ;       R0 <== Pointer to an error block as usual
        ;       Structure of the register block
        ;       R0 ==> Status number
        ;       R1 ==> Pointer to core if required (or used)
        ;       R2 ==> Maximum buffer size
        ;       R3 ==> Station number
        ;       R4 ==> Network number
        ;       R0 <== Pointer to an error block as usual (maybe R1, maybe ROM (or RMA allocated buffer))
        Push    "r0-r7, lr"
        MOV     r6, r0                                  ; Keep a pointer to the registers
        LDR     r0, [ r6, #0 ]                          ; Load up real input value
        AND     r0, r0, #&FF                            ; Only bother with the bottom byte
        CMP     r0, #Status_MaxValue
        BGT     BadStatus
        TEQ     r0, #Status_NotListening
        ADREQ   r7, ErrorStationNotListening
        BEQ     ConvertErrorWithArgument
        TEQ     r0, #Status_NoReply
        ADREQ   r7, ErrorNoReplyFromStation
        BEQ     ConvertErrorWithArgument
        TEQ     r0, #Status_NotPresent
        ADREQ   r7, ErrorStationNotPresent
        BEQ     ConvertErrorWithArgument
        TEQ     r0, #Status_NetError
        ADREQ   r7, ErrorStationNetError
        BEQ     ConvertErrorWithArgument
StandardError
        LDR     r0, [r6, #0]
        AND     r0, r0, #&ff
        ADR     r14, TokenTable
        ADD     r14, r14, r0, LSL #3                    ; TokenTable + Status * 8
        ADD     r7, r14, r0, LSL #2                     ; TokenTable + Status * 12
        MOV     r4, #0
DoError
        MOV     r0, r7                                  ; Selected error block (token)
        LDR     r1, [ sp, #4 ]                          ; MessageBlock
        ADD     r2, r6, #4
        LDMIA   r2, { r2, r3 }                          ; Initial values for R1 and R2
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        LDR     r5, [ sp ], #16                         ; Pointer to register block
        STR     r0, [ r5, #0 ]
        PullAPCS "r4-r7, pc"

ConvertErrorWithArgument
        LDR     r14, [ r6, #12 ]                        ; Get the station number
        TEQ     r14, #0                                 ; Is the station number zero?
        BEQ     StandardError                           ; Yes so no substitution
        CMP     r0, #255
        BGT     TryErrorWithText
        ADD     r0, r6, #12                             ; Point at Station number and Network number
        ADD     r1, sp, #8                              ; Point at the output string space
        MOV     r2, #8                                  ; String size
        SWI     XOS_ConvertNetStation
        BVS     StandardError
        ADD     r4, sp, #8
        B       DoError

TryErrorWithText
        LDR     r0, [ r6, #12 ]                         ; Get the Station number, or Text pointer
        MOV     r1, r0
ErrorTextTerminationLoop
        SWI     XOS_ValidateAddress
        BVS     StandardError
        BCS     StandardError
        LDRB    r2, [ r1 ], #1
        TEQ     r2, #0                                  ; Is this the terminator?
        BNE     ErrorTextTerminationLoop
        MOV     r4, r0                                  ; The argument pointer
        B       DoError

do_ReadStationNumber ROUT
        ;       R0 ==> Pointer to register block for input and output
        ;       R1 ==> Pointer to the message block for Econet.Messages
        ;       R0 <== 0 for no error, else pointer to error as usual
        ;       Structure of the register block
        ;       R1 ==> Address of number string
        ;       R0 <== Preserved if no error, else pointer to error as usual
        ;       R1 <== Updated
        ;       R2 <== Station number (-1 for not found)
        ;       R3 <== Network number (-1 for not found)
        ;       May trash R1 to R3, Must preserve R4 to R11
        Push    "r0, r1, r4, lr"
        LDR     r1, [ r0, #4 ]                          ; Load the pointer to the string (R1)
        MOV     r2, #0                                  ; Handle no text at all
        MOV     r3, #-1                                 ; Set up the default values
        MOV     r4, #-1
        LDRB    r0, [ r1 ]                              ; Check the first character
        TEQ     r0, #"."                                ; In case we have the special case
        MOVEQ   r4, #0                                  ; Default leading zero
        ADDEQ   r1, r1, #1
        BEQ     ReadStationNumberPart
        CMP     r0, #" "
        BLE     ReadCompleted
        MOV     r0, #10                                 ; Default base
        SWI     XOS_ReadUnsigned                        ; First number, could be either type
        BVS     ErrorExitReadStation
        LDRB    r0, [ r1 ]                              ; Check the terminating character
        TEQ     r0, #"."
        ADDEQ   r1, r1, #1
        MOVEQ   r4, r2                                  ; It was a net nunber
        BNE     ReadCompleted
ReadStationNumberPart
        CMP     r2, #-1                                 ; Check returned value
        BEQ     DoErrorBadNetwork                       ; Out of range input (large number)
        LDRB    r0, [ r1 ]                              ; Check the first character
        CMP     r0, #" "
        BLE     DoneReadingStation                      ; Exit if not any more characters
        MOV     r0, #10                                 ; Default base
        SWI     XOS_ReadUnsigned                        ; Second number will be station
        BVS     ErrorExitReadStation
ReadCompleted
        CMP     r2, #-1                                 ; Check returned value
        BEQ     DoErrorBadStation                       ; Out of range input (large number)
        LDRB    r0, [ r1 ]                              ; Check the terminating character again
        CMP     r0, #" "
        BGT     DoErrorBadNumber                        ; Must be bad
        MOV     r3, r2                                  ; It was a station number
DoneReadingStation
        CMP     r3, #-1
        BEQ     CheckNetworkNumber                      ; No station number to check
        TEQ     r3, #0
        BEQ     DoErrorBadStation
        CMP     r3, #254
        BHI     DoErrorBadStation
CheckNetworkNumber
        CMP     r4, #-1
        BEQ     ExitOK
        CMP     r4, #254
        BHI     DoErrorBadNetwork
ExitOK
        Pull    r0                                      ; Pointer to the register block
        ADD     r0, r0, #4                              ; Point at R1
        STMIA   r0, { r1, r3, r4 }                      ; Output of R1, R2, R3
        MOV     r0, #0                                  ; Indicate no error
        PullAPCS "r1, r4, pc"                           ; Return to C calling function

DoErrorBadNumber
        ADR     r0, ErrorBadNumb
        B       MakeError

DoErrorBadNetwork
        ADR     r0, ErrorBadNetwork
        B       MakeError

DoErrorBadStation
        ADR     r0, ErrorBadStation
MakeError
        LDR     r1, [ sp, #4 ]                          ; Get the passed message block pointer
        BL      LookupError
ErrorExitReadStation
        Pull    r1                                      ; Pointer to register block
        STR     r0, [ r1, #0 ]                          ; Exit value of R0
        PullAPCS "r1, r4, pc"                           ; Return to C calling function

LookupError
        ;       R0 ==> Pointer to an error number and tokenised message
        ;       R1 ==> Pointer to message block
        ;       R0 <== Pointer to a buffer with a proper error in it
        Push    "r2-r7, lr"
        MOV     r2, #0
        MOV     r3, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "r2-r7, pc"

        LTORG

        ;       ********************************************************************

ErrorBadMask
        DCD     ErrorNumber_BadMask
        DCB     "BadMask", 0
        ALIGN

ErrorBadNumb
        DCD     ErrorNumber_BadNumb
        DCB     "BadNumb", 0
        ALIGN

ErrorBadNetwork
        DCD     ErrorNumber_BadNetwork
        DCB     "BadNet", 0 ; Global error
        ALIGN

ErrorBadStation
        DCD     ErrorNumber_BadStation
        DCB     "BadStn", 0 ; Global error
        ALIGN

ErrorBadStatus
        DCD     ErrorNumber_BadStatus
        DCB     "BadStat", 0
        ALIGN

ErrorStationNotListening
        DCD     ErrorNumber_NotListening
TokenStationNotListening
        DCB     "StnNLsn", 0
        ALIGN

ErrorNoReplyFromStation
        DCD     ErrorNumber_NoReply
TokenNoReplyFromStation
        DCB     "StnNRpy", 0
        ALIGN

ErrorStationNotPresent
        DCD     ErrorNumber_NotPresent
TokenStationNotPresent
        DCB     "StnNPrs", 0
        ALIGN

ErrorStationNetError
        DCD     ErrorNumber_NetError
TokenStationNetError
        DCB     "StnNErr", 0
        ALIGN

TokenTable
        DCD     ErrorNumber_Transmitted
        DCB     "TxOK", 0
        ALIGN
        ASSERT  ( Status_LineJammed * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_LineJammed
        DCB     "LineJam", 0
        ALIGN
        ASSERT  ( Status_NetError * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_NetError
        DCB     "NetErr", 0
        ALIGN
        ASSERT  ( Status_NotListening * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_NotListening
        DCB     "NotLstn", 0
        ALIGN
        ASSERT  ( Status_NoClock * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_NoClock
        DCB     "NoClk", 0
        ALIGN
        ASSERT  ( Status_TxReady * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_TxReady
        DCB     "TxReady", 0
        ALIGN
        ASSERT  ( Status_Transmitting * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_Transmitting
        DCB     "Txing", 0
        ALIGN
        ASSERT  ( Status_RxReady * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_RxReady
        DCB     "RxReady", 0
        ALIGN
        ASSERT  ( Status_Receiving * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_Receiving
        DCB     "Rxing", 0
        ALIGN
        ASSERT  ( Status_Received * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_Received
        DCB     "Rxd", 0, 0
        ALIGN
        ASSERT  ( Status_NoReply * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_NoReply
        DCB     "NoReply", 0
        ALIGN
        ASSERT  ( Status_Escape * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_Escape
        DCB     "Escape", 0 ; Global error
        ALIGN
        ASSERT  ( Status_NotPresent * 12 ) = ( . - TokenTable )
        DCD     ErrorNumber_NotPresent
        DCB     "NotPres", 0
        ALIGN
        ASSERT  ( ( Status_MaxValue + 1 ) * 12 ) = ( . - TokenTable )

        END

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; EOF s.netasm
@


4.5
log
@Build fix to work with TCPIPLibs-5_54.
Service calls, OSBytes, vector numbers all changed to use centralised defines.
Econet peek modified to use Module_Version from the VersionNum file.
Compiles, but not tested.

Version 6.23. Tagged as 'Net-6_23'
@
text
@d389 1
a389 1
        DCB     "BadNet", 0
d394 1
a394 1
        DCB     "BadStn", 0
d472 1
a472 1
        DCB     "Escape", 0
@


4.4
log
@Made 32-bit compatible.
Changed to use VersionNum.

Version 6.19. Tagged as 'Net-6_19'
@
text
@a47 1
        GET     Hdr:EnvNumbers
d50 1
a50 1
        GET     Hdr:ModHand
a52 3
        GET     Hdr:Symbols
	GET	Hdr:Machine.<Machine>
        GET     Hdr:CMOS
a58 1
        ^       0
a61 3
        ALIGN


d64 8
a71 8
        Push lr
        SWI XOS_ReadEscapeState
        MOVCS r0, #1
        MOVCC r0, #0

        Push r0
        MOV r0, #124                    ; OS_Byte 124 = Clear escape condition
        SWI XOS_Byte
@


4.3
log
@s/Get/GET/ :-)
@
text
@d47 1
a58 1
        EXPORT  user_mode_donothing
a62 3
        EXPORT  ensure_irqs_off
        EXPORT  restore_irqs
        EXPORT  ensure_irqs_on
a69 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_off:
;
; Disable IRQs). Once IRQs are disabled, we cannot/must not be reentered.
;
; Returns a value indicating the state of interrupts prior to calling here.
;

ensure_irqs_off 
        AND     r0, lr, # I_bit
        ORRS    pc, lr, # I_bit

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; restore_irqs:
;
; Restore interrupts to the state they were in prior to a call to
; ensure_irqs_off, using the value returned by ensure_irqs_off.
;

restore_irqs    
        BIC     lr, lr, # I_bit
        ORRS    pc, lr, r0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_on:
;
; Ensure that interrupts are enabled. Returns a value that, when passed
; to restore_irqs, will restore the state prior to enabling interrupts.
;
 
ensure_irqs_on
        AND     r0, lr, # I_bit
        BICS    pc, lr, # I_bit


d81 1
a81 41
        Pull "r0, pc",,^


; This callback handler simple defers the callback until later
defer_callback
        SWI XOS_SetCallBack             ; Defer callback
        MOV r14, r12                    ; Register block
        LDMIA r14, {r0-r14}^            ; Loads USR r13,r14
        MOV r0, r0                      ; NOOP after accessing user
                                        ; registers before accessing banked
                                        ; register.
        LDR r14, [r14, #15*4]           ; Loads user PC into SVC r14
        MOVS pc, r14                    ; Drop back to USR mode


; os_error *usermode_donothing();
user_mode_donothing ROUT

        Push "r0-r3, lr"
        SUB sp, sp, #&40                ; Make space on stack for reg dump

        ; Update callback handler atomically in case an event occurs
        ; between reading the old handler and writing the new handler
        MOV r0, #CallBackHandler
        ADR r1, defer_callback
        MOV r2, sp                      ; R12 in defer_callback = reg ptr
        MOV r3, sp                      ; Reg save area on stack
        SWI XOS_ChangeEnvironment
        Push "r1-r3"                    ; Save old handler

        ; Now execute a SWI in user mode to trigger callbacks
        TEQP pc, #0                     ; To user mode
        MOV r0, #0
        MOV r1, #1
        SWI XOS_Byte                    ; Read OS version
        SWI XOS_EnterOS                 ; Back to SVC mode

        ; Restore old callback handler
        MOV r0, #CallBackHandler
        Pull "r1-r3"
        SWI XOS_ChangeEnvironment
a82 2
        ADD sp, sp, #&40
        Pull "r0-r3, pc",,^
d95 1
a95 1
        ADD     r10, r3, #SVC_mode                      ; Actual address to call, entry R3
d98 1
a98 1
        ADR     lr, ReturnPlace + SVC_mode              ; Calculate return address
a99 1
ReturnPlace
d103 1
a103 1
        Pull    "r4-r9, r10, r11, pc",, ^               ; Return to caller; some bit of C
d168 1
a168 1
        Pull    "r4-r7, pc",, ^
d177 1
a177 1
        Pull    "r4-r7, pc",, ^
d254 1
a254 1
        Pull    "r4-r7, pc",, ^
d347 1
a347 1
        Pull    "r1, r4, pc",, ^                        ; Return to C calling function
d365 1
a365 1
        Pull    "r1, r4, pc",, ^                        ; Return to C calling function
@


4.2
log
@Ursula branch merged (no changes)
Ursula_13May1998 branch merged (only dynamic dependency removals)
No version number increment.
Added inclusion of Machine header file for new CMOS header.

Tagged as Net-6_18
@
text
@d54 1
a54 1
	Get	Hdr:Machine.<Machine>
@


4.1
log
@Initial revision
@
text
@d54 1
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
