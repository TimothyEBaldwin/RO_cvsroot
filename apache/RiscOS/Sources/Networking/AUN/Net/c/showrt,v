head	4.3;
access;
symbols
	Net-6_26:4.3
	Net-6_25:4.3
	Net-6_24:4.2
	Net-6_23:4.2
	Net-6_22:4.2
	Net-6_21:4.2
	RO_5_07:4.2
	Net-6_20:4.2
	Net-6_19:4.2
	Net-6_18:4.2
	Ursula_merge:4.2
	Ursula_13May1998_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.05.29.19.28.57;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	2VVHsW5ULMhIonny;

4.2
date	97.05.13.11.25.27;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.23;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.23;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.13;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Have Net look after its own messages
Net was trying to share some messages with the Econet module, though on balance this wasn't particularly useful as it then needed to duplicate message handling code to keep 2 files open. Because those messages were held in AUNMsgs they didn't get tokenised in ROM, overall ending up taking more space.

Register in ResourcesFS at run time for RAM targets, add tokenisation directives for ROM targets, removed redundant !Configure related strings.
Changed the messages fd to be int's to ensure word alignment.
Removed inappropriate Service_MessageFileClosed handler, MessageTrans reopens the files (since the fd is in the RMA) so no need to reopen them a second time. This service call is intended to recache direct pointers to tokens, but none are ever taken.
Save time by just making textbuf a zero length string rather than memset()ing the whole buffer.
Resolved a couple more compiler warnings (but NetG still doesn't compile).
Fix bug where a failure to enable the internet event would decrement the internet event count for any other modules interested in that event.
Use CMHG finalisation rather than atexit().
Error "AUN not configured" now uses a non zero trappable error number.
Error number for BadSWI corrected from 0x111 to 0x110.

Requires HdrSrc-2_51 for the error number.

Version 6.25. Tagged as 'Net-6_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* showrt.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Code to support *Networks command
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 *
 * 12-Dec-94  09:36  JPD  Version 1.00
 * First version with change record. Modified: #includes to be ANSI-compliant.
 *
 * 13-Jan-95  12:17  JPD  Version 1.01
 * Modified to add static declarations and begin changes to enable
 * compilation with -fah option.
 *
 * 19-Jan-95  11:04  JPD  Version 1.02
 * Correct problem in mns_showroutes() with mbuf handling
 *
 * 14-Mar-95  15:47  JPD  Version 1.03
 * Removed OldCode.
 *
 * 11-Oct-95  17:33  JPD  Version 1.04
 * Changed to make sprintnet() and sprintroute() not static: needed by NetG.
 *
 *
 **End of change record*
 */

#include <stdio.h>
#include <string.h>

#include "kernel.h"

#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "sys/mbuf.h"
#include "net/route.h"
#include "netinet/in.h"
#include "nlist.h"

#include "module.h"
#include "mnscommon.h"
#include "mns.h"
#include "showrt.h"
#include "socklib.h"

static void p_tree(struct radix_node *rn);

/******************************************************************************/

void mns_showroutes(void)
{
#define kread(v, b, l) (memcpy((b), (void *)(v), (l)))
#define kget(p, d) (kread((u_long)(p), (char *)&(d), sizeof (d)))
   struct nlist nl[] = { { "_rt_tables" }, "" };
   struct radix_node_head *rt_tables[AF_MAX];
   struct radix_node_head *rnh, head;
   /* If we've received map info from a !Gateway, get it */
   if ((mns.mns_flags & MNS_SEEKADDR) != 0 || kvm_nlist(0, nl) < 0)
      return;

   kget(nl[0].n_value, rt_tables);

   if ((rnh = rt_tables[AF_INET]) == 0)
      return;
   kget(rnh, head);
   p_tree(head.rnh_treetop);

   return;
} /* mns_showroutes() */

static void p_rtentry(struct rtentry *rt);

static struct	rtentry rtentry;
static struct	radix_node rnode;

static void p_tree(struct radix_node *rn)
{

again:
	kget(rn, rnode);
	if (rnode.rn_b < 0) {
		if (!(rnode.rn_flags & RNF_ROOT)) {
			kget(rn, rtentry);
			p_rtentry(&rtentry);
		}
		if (rn = rnode.rn_dupedkey)
			goto again;
	} else {
		rn = rnode.rn_r;
		p_tree(rnode.rn_l);
		p_tree(rn);
	}
}

static void p_rtentry(struct rtentry *rt)
{
	/*
	 * Don't print cloned routes
	 */
	if (rt->rt_parent || (rt->rt_flags & RTF_WASCLONED))
		return;

        /* print the name of the network */
        printf("%-16s", sprintnet(rt_key(rt)));
        /* if a gateway print "gateway = " and address of gateway */
        if (rt->rt_flags & RTF_GATEWAY)
           printf("%s=%s\n", mns_str(Str_Gteway),sprintroute(rt->rt_gateway));
        else
           /* print "local" to show this name is name of local network */
           printf("%s\n", mns_str(Str_Local));
}

/******************************************************************************/

char *sprintroute(struct sockaddr *sa)
{
/*
 * return network address (as a string) of a gateway to a network
 */

   static char line[32];
   struct in_addr in;

   in = ((struct sockaddr_in *)sa)->sin_addr;
   in.s_addr = ntohl(in.s_addr);
#define C(x) ((x) & 0xff)
#ifdef FULL
   (void) sprintf(line, "%u.%u.%u.%u", C(in.s_addr >> 24),
                           C(in.s_addr >> 16), C(in.s_addr >> 8), C(in.s_addr));
#else
   (void) sprintf(line, "%lu.%lu", C(in.s_addr >> 8), C(in.s_addr));
#endif
   return line;

} /* sprintroute() */

/******************************************************************************/

char *sprintnet(struct sockaddr *sa)
{
/*
 * return network name (as a string) of a network address
 */

   static char line[32];
   struct in_addr in;

   in = ((struct sockaddr_in *)sa)->sin_addr;
   in.s_addr = ntohl(in.s_addr);
   if (!mns_addrtoname(line, in.s_addr))
      (void) sprintf(line, "%lu.%lu", C(in.s_addr >> 24), C(in.s_addr >> 16));

   return line;

} /* sprintnet() */

/******************************************************************************/

/* EOF showrt.c */
@


4.2
log
@Version RO_3_71 taken
@
text
@a81 55
#ifdef OldCode
   struct rtentry *rt;
   struct mbuf *m;
   struct mbuf **routehash;
   int rthashsize, i;
   struct rttinfo rttab;

   /* If we've received map info from a !Gateway, get it */
   if ((mns.mns_flags & MNS_SEEKADDR) != 0 ||
        socketioctl(mns.mns_rxdsock, SIOCGETRT, (caddr_t)&rttab) < 0)
      return;

   /* Get a buffer to hold pointers to mbufs holding routes to nets */
   rthashsize = rttab.r_rthashsize;
   routehash = (struct mbuf **)malloc(rthashsize * sizeof(struct mbuf *));

   if (routehash == 0)
      return;

   /* take copy of table of pointers */
   memcpy(routehash, rttab.r_rtnet, rthashsize * sizeof(struct mbuf *));

   for (i = 0; i < rthashsize; i++)
   {
      /* ignore null pointers in table */
      if (routehash[i] == 0)
         continue;

      m = routehash[i];

      /* follow down chain of route entries */
      while (m)
      {
         /* mbuf holds an rtentry */
         rt = mtod(m, struct rtentry *);

         /* print the name of the network */
         printf("%-16s", sprintnet(&rt->rt_dst));

         /* if a gateway print "gateway = " and address of gateway */
         if (rt->rt_flags & RTF_GATEWAY)
            printf("%s=%s\n", mns_str(Str_Gteway),sprintroute(&rt->rt_gateway));
         else
            /* print "local" to show this name is name of local network */
            printf("%s\n", mns_str(Str_Local));

         /* move on down chain */
         m = m->m_next;
      }
   }
   free(routehash);

   return;
#else

a98 1
#endif
a100 1
#ifndef OldCode
a141 1
#endif
@


4.1
log
@Initial revision
@
text
@d29 1
a29 1
 * Acorn Archimedes C release 5.02 or later.
d47 6
a56 14
#ifdef OldCode
#include <sys/types.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/mbuf.h>
#include <net/route.h>
#include <net/routed.h>
#include <netinet/in.h>
#include <stdio.h>
#include <ctype.h>
#include "module.h"
#else

d68 1
d71 1
d74 1
a74 6
#include "stubs.h"
#endif

#ifdef OldCode
extern struct mns mns;
#endif
d76 1
a76 5
#ifdef OldCode
char *sprintnet(), *sprintroute(), *mns_str();
#else
static char *sprintnet(struct sockaddr *sa), *sprintroute(struct sockaddr *sa);
#endif
a79 40
#ifdef OldCode
/*ARGSUSED*/
mns_showroutes(argc, argv)
int argc;
char **argv;
{
        struct mbuf mb;
        struct rtentry *rt;
        struct mbuf *m;
        struct mbuf **routehash;
        int rthashsize, i;
        struct rttinfo rttab;

        if ((mns.mns_flags & MNS_SEEKADDR) != 0 ||
            socketioctl(mns.mns_rxdsock, SIOCGETRT, (caddr_t)&rttab) < 0)
            return;

        rthashsize = rttab.r_rthashsize;
        routehash = (struct mbuf **)malloc(rthashsize*sizeof (struct mbuf *));
        if (routehash == 0)
            return;
        memcpy(routehash, rttab.r_rtnet, rthashsize*sizeof (struct mbuf *));
        for (i = 0; i < rthashsize; i++) {
            if (routehash[i] == 0)
                continue;
            m = routehash[i];
            while (m) {
                mb = *m;
                rt = mtod(&mb, struct rtentry *);
                printf("%-16s", sprintnet(&rt->rt_dst));
                if (rt->rt_flags & RTF_GATEWAY)
                    printf("%s=%s\n", mns_str(Str_Gteway), sprintroute(&rt->rt_gateway));
                else
                    printf("%s\n", mns_str(Str_Local));
                m = mb.m_next;
            }
        }
        free(routehash);
}
#else
d82 1
d135 17
d153 2
d157 2
a158 1
#endif
d160 2
a161 1
/******************************************************************************/
d163 1
a163 4
#ifdef OldCode
char *
sprintroute(sa)
struct sockaddr *sa;
a164 2
    static char line[32];
    struct in_addr in;
d166 33
a198 8
    in = ((struct sockaddr_in *)sa)->sin_addr;
    in.s_addr = ntohl(in.s_addr);
#define C(x)    ((x) & 0xff)
#ifdef FULL
    (void) sprintf(line, "%u.%u.%u.%u", C(in.s_addr >> 24),
                        C(in.s_addr >> 16), C(in.s_addr >> 8), C(in.s_addr));
#else
    (void) sprintf(line, "%lu.%lu", C(in.s_addr >> 8), C(in.s_addr));
d200 4
a203 4
    return (line);
}
#else
static char *sprintroute(struct sockaddr *sa)
d206 1
a206 1
 * return network address (as a string) of a gateway to a netwoRk
a224 2
#endif

d227 1
a227 17
#ifdef OldCode
char *
sprintnet(sa)
struct sockaddr *sa;
{
    static char line[32];
    struct in_addr in;

    in = ((struct sockaddr_in *)sa)->sin_addr;
    in.s_addr = ntohl(in.s_addr);
#define C(x)    ((x) & 0xff)
    if (!mns_addrtoname(line, in.s_addr))
        (void) sprintf(line, "%lu.%lu", C(in.s_addr >> 24), C(in.s_addr >> 16));
    return (line);
}
#else
static char *sprintnet(struct sockaddr *sa)
a243 2

#endif
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d29 1
a29 1
 * Acorn Archimedes C release 5.06 or later.
a46 6
 * 14-Mar-95  15:47  JPD  Version 1.03
 * Removed OldCode.
 *
 * 11-Oct-95  17:33  JPD  Version 1.04
 * Changed to make sprintnet() and sprintroute() not static: needed by NetG.
 *
d51 14
a75 1
#include "nlist.h"
a77 1
#include "mnscommon.h"
d80 6
a85 1
#include "socklib.h"
d87 5
a91 1
static void p_tree(struct radix_node *rn);
d95 40
a136 1
#ifdef OldCode
a188 1
#else
d190 1
a190 15
#define kread(v, b, l) (memcpy((b), (void *)(v), (l)))
#define kget(p, d) (kread((u_long)(p), (char *)&(d), sizeof (d)))
   struct nlist nl[] = { { "_rt_tables" }, "" };
   struct radix_node_head *rt_tables[AF_MAX];
   struct radix_node_head *rnh, head;
   /* If we've received map info from a !Gateway, get it */
   if ((mns.mns_flags & MNS_SEEKADDR) != 0 || kvm_nlist(0, nl) < 0)
      return;

   kget(nl[0].n_value, rt_tables);

   if ((rnh = rt_tables[AF_INET]) == 0)
      return;
   kget(rnh, head);
   p_tree(head.rnh_treetop);
a191 1
   return;
a192 1
} /* mns_showroutes() */
d194 1
a194 2
#ifndef OldCode
static void p_rtentry(struct rtentry *rt);
d196 4
a199 4
static struct	rtentry rtentry;
static struct	radix_node rnode;

static void p_tree(struct radix_node *rn)
d201 2
d204 10
a213 14
again:
	kget(rn, rnode);
	if (rnode.rn_b < 0) {
		if (!(rnode.rn_flags & RNF_ROOT)) {
			kget(rn, rtentry);
			p_rtentry(&rtentry);
		}
		if (rn = rnode.rn_dupedkey)
			goto again;
	} else {
		rn = rnode.rn_r;
		p_tree(rnode.rn_l);
		p_tree(rn);
	}
d215 2
a216 23

static void p_rtentry(struct rtentry *rt)
{
	/*
	 * Don't print cloned routes
	 */
	if (rt->rt_parent || (rt->rt_flags & RTF_WASCLONED))
		return;

        /* print the name of the network */
        printf("%-16s", sprintnet(rt_key(rt)));
        /* if a gateway print "gateway = " and address of gateway */
        if (rt->rt_flags & RTF_GATEWAY)
           printf("%s=%s\n", mns_str(Str_Gteway),sprintroute(rt->rt_gateway));
        else
           /* print "local" to show this name is name of local network */
           printf("%s\n", mns_str(Str_Local));
}
#endif

/******************************************************************************/

char *sprintroute(struct sockaddr *sa)
d219 1
a219 1
 * return network address (as a string) of a gateway to a network
d238 2
d242 17
a258 1
char *sprintnet(struct sockaddr *sa)
d275 2
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
