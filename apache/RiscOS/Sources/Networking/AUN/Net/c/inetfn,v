head	4.3;
access;
symbols
	Net-6_26:4.3
	Net-6_25:4.3
	Net-6_24:4.3
	Net-6_23:4.3
	Net-6_22:4.3
	Net-6_21:4.3
	RO_5_07:4.3
	Net-6_20:4.3
	Net-6_19:4.3
	Net-6_18:4.3
	Ursula_merge:4.3
	Ursula_13May1998_merge:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	Ursula_RiscPC:4.3.0.8
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.6
	Ursula_13May1998_bp:4.3
	Ursula_13May1998:4.3.0.2
	rthornb_UrsulaBuild_01May1998:4.3
	Daytona:4.3.0.4
	Daytona_bp:4.3
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	97.05.13.19.00.34;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.11.25.16;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.22;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.22;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Made to build correctly on trunk
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* inetfn.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Internet and network address manipulation routines
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 *
 * 04-Jan-95  11:56  JPD  Version 1.00
 * First version with change record. Modified: #includes to be ANSI-compliant,
 * added header file for extern delarations.
 *
 * 22-Feb-95  11:53  JPD  Vesrion 1.01
 * Removed OldCode
 *
 *
 **End of change record*
 */

#include "sys/types.h"
#include "netinet/in.h"

#include "inetfn.h"


/*
 * Return the netmask pertaining to an internet address.
 */
u_long inet_maskof(u_long inaddr)
{
	register u_long i = ntohl(inaddr);
	register u_long mask;

        /* All hard-wired in AUN! */
	if (i == 0)
		mask = 0;
	else
		mask = IN_CLASSB_NET;

	return (htonl(mask));
}


/******************************************************************************/

/* EOF inetfn.c */
@


4.2
log
@Version RO_3_71 taken
@
text
@a52 152
/******************************************************************************/

char *inet_ntoa(u_long in)
{
/*
 * Convert network-format internet address to string d.d.d.d representation
 *
 * Parameters:
 *    in : address
 *
 * Returns:
 *    pointer to static string
 */

   static char b[18];
   register char *p;

   p = (char *)&in;
#define UC(b)   (((int)b)&0xff)
   sprintf(b, "%d.%d.%d.%d", UC(p[0]), UC(p[1]), UC(p[2]), UC(p[3]));

   return (b);

} /* inet_ntoa() */

/******************************************************************************/

u_long htonl(u_long x)
{
/*
 * Convert host to network long
 *
 * Parameters:
 *    x : value
 *
 * Returns:
 *    value in network form
 *
 */

   return ntohl(x);

} /* htonl() */

/******************************************************************************/

int htons(int x)
{
/*
 * Convert host to network short
 *
 * Parameters:
 *    x : value
 *
 * Returns:
 *    value in network form
 *
 */

   return ntohs(x);

} /* ntohs() */

/******************************************************************************/

int ntohl(u_long x)
{
/*
 * Convert network to host long
 *
 * Parameters:
 *    x : value
 *
 * Returns:
 *    value in host form
 *
 */

   return( ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24) );

} /* ntohl() */

/******************************************************************************/

int ntohs(int x)
{
/*
 * Convert network to host short
 *
 * Parameters:
 *    x : value
 *
 * Returns:
 *    value in host form
 *
 */

   return ( (x & 0xff) << 8 | (x & 0xff00) >> 8 );

} /* ntohs() */


/******************************************************************************/

u_long inet_makeaddr(int net, int host)
{
/*
 * Make an Internet address from a host and net address
 *
 * Parameters:
 *    net  : network number
 *    host : host part of the address
 *
 * Returns:
 *    the internet address
 *
 */

   u_long addr;

   if (net < 128)
      addr = (net << IN_CLASSA_NSHIFT) | (host & IN_CLASSA_HOST);
   else if (net < 65536)
      addr = (net << IN_CLASSB_NSHIFT) | (host & IN_CLASSB_HOST);
   else
      addr = (net << IN_CLASSC_NSHIFT) | (host & IN_CLASSC_HOST);
   addr = htonl(addr);

   return addr;

} /* inet_makeaddr() */

/******************************************************************************/

void bzero(void *b, int length)
{
/*
 * Clear buffer to zero
 *
 *
 * Parameters:
 *    b      : pointer to buffer
 *    length : length to clear
 *
 * Returns:
 *    None
 *
 */

   memset(b, 0, length);

} /* bzero() */
@


4.1
log
@Initial revision
@
text
@d187 1
a187 1
void bzero(char *b, int length)
d205 18
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d187 1
a187 1
void bzero(void *b, int length)
a204 18

/*
 * Return the netmask pertaining to an internet address.
 */
u_long inet_maskof(u_long inaddr)
{
	register u_long i = ntohl(inaddr);
	register u_long mask;

        /* All hard-wired in AUN! */
	if (i == 0)
		mask = 0;
	else
		mask = IN_CLASSB_NET;

	return (htonl(mask));
}

@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
