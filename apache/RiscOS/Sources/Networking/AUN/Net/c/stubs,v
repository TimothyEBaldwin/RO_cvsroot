head	4.3;
access;
symbols
	Net-6_26:4.3
	Net-6_25:4.3
	Net-6_24:4.3
	Net-6_23:4.3
	Net-6_22:4.3
	Net-6_21:4.3
	RO_5_07:4.3
	Net-6_20:4.3
	Net-6_19:4.2
	Net-6_18:4.2
	Ursula_merge:4.2
	Ursula_13May1998_merge:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2003.12.03.19.21.59;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	97.05.13.11.25.29;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.23;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.28.23;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.31.15;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@ANSIized.

Version 6.20. Tagged as 'Net-6_20'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* stubs.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Socket interface stubs
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 *
 * 09-Dec-94  17:40  JPD  Version 1.00
 * First version with change record. Modified: #includes to be ANSI-compliant.
 *
 * 10-Jan-95  16:26  JPD  Version 1.01
 * Added debugging.
 *
 * 13-Jan-95  15:01  JPD  Version 1.02
 * Modified to compile with -fah option.
 *
 * 14-Feb-95  09:24  JPD  Version 1.03
 * Added further debugging.
 *
 * 23-Feb-95  11:33  JPD  Version 1.04
 * Modified debugging.
 *
 * 14-Mar-95  15:54  JPD  Version 1.05
 * Removed OldCode.
 *
 *
 **End of change record*
 */

#include "kernel.h"

#include "sys/types.h"
#include "sys/errno.h"
#include "sys/socket.h"
#include "sys/time.h"

#include "stubs.h"
#include "debug.h"

#define XBIT            0x20000
#define BASESOCKETSWI   0x41200+XBIT

#define Socket          BASESOCKETSWI+0
#define Bind            BASESOCKETSWI+1
#define Recvfrom        BASESOCKETSWI+6
#define Recvmsg         BASESOCKETSWI+7
#define Sendto          BASESOCKETSWI+9
#define Sendmsg         BASESOCKETSWI+10
#define Setsockopt      BASESOCKETSWI+12
#define Socketclose     BASESOCKETSWI+16
#define Socketselect    BASESOCKETSWI+17
#define Socketioctl     BASESOCKETSWI+18
#define SendtoSM        BASESOCKETSWI+25

/*
 * socket interface stubs
 */
int errno;


/******************************************************************************/

int socket(int domain, int type, int protocol)
{
   _kernel_oserror *e;
   _kernel_swi_regs rin, rout;

   rin.r[0] = domain;
   rin.r[1] = type;
   rin.r[2] = protocol;
   xDEBUGP2("#calling SWI socket (0x%08X)\n\r", Socket);
   e = _kernel_swi(Socket, &rin, &rout);
   xDEBUGP1("#back from SWI socket\n\r");
   errno = e ? e->errnum : 0;
   if (errno > EREMOTE)
      errno = ESRCH;

   return (errno ? -1 : rout.r[0]);

} /* socket() */

/******************************************************************************/

int bind(int s, struct sockaddr *name, int namelen)
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)name;
        rin.r[2] = namelen;
        e = _kernel_swi(Bind, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

/******************************************************************************/

int sendtosm(int s, char *buf, int len, char *buf1, int len1, struct sockaddr_in *to)
{
        _kernel_oserror *e;
        _kernel_swi_regs r;

        r.r[0] = s;
        r.r[1] = (int)buf;
        r.r[2] = len;
        r.r[3] = (int)buf1;
        r.r[4] = len1;
        r.r[5] = (int)to;
        e = _kernel_swi(SendtoSM, &r, &r);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

/******************************************************************************/

int sendto(int s, const void *msg, size_t len, int flag,
                                           const struct sockaddr *to, int tolen)
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)msg;
        rin.r[2] = len;
        rin.r[3] = flag;
        rin.r[4] = (int)to;
        rin.r[5] = tolen;
        e = _kernel_swi(Sendto, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

/******************************************************************************/

#ifdef NEVER_DEFINED
sendmsg(s, msg, flag)
int s;
struct msghdr *msg;
int flag;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)msg;
        rin.r[2] = flag;
        e = _kernel_swi(Sendmsg, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}
#endif

/******************************************************************************/

int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from,
                                                               int *fromlenaddr)
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)buf;
        rin.r[2] = len;
        rin.r[3] = flags;
        rin.r[4] = (int)from;
        rin.r[5] = (int)fromlenaddr;
        e = _kernel_swi(Recvfrom, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

/******************************************************************************/

#ifdef NEVER_DEFINED
recvmsg(s, msg, flags)
int s;
struct msghdr *msg;
int flags;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)msg;
        rin.r[2] = flags;
        e = _kernel_swi(Recvmsg, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}
#endif

/******************************************************************************/

int setsockopt(int s, int level, int optname, const void *optval, int optlen)
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = level;
        rin.r[2] = optname;
        rin.r[3] = (int)optval;
        rin.r[4] = optlen;
        e = _kernel_swi(Setsockopt, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

/******************************************************************************/

int socketclose(int d)
{
   _kernel_oserror *e;
   _kernel_swi_regs rin, rout;

   xDEBUGP2("#socketclose(%d)\n\r", d);
   rin.r[0] = d;
   e = _kernel_swi(Socketclose, &rin, &rout);
   errno = e ? e->errnum : 0;
   if (errno > EREMOTE)
      errno = ESRCH;

   return (errno ? -1 : 0);

} /* socketclose() */

/******************************************************************************/

int select(int nfds, fd_set *rfds, fd_set *wfds, fd_set *efds,
                                                             struct timeval *tv)
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = nfds;
        rin.r[1] = (int)rfds;
        rin.r[2] = (int)wfds;
        rin.r[3] = (int)efds;
        rin.r[4] = (int)tv;
        e = _kernel_swi(Socketselect, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

/******************************************************************************/

int socketioctl(int s, int cmd, char *data)
{
   _kernel_oserror *e;
   _kernel_swi_regs rin, rout;

   rin.r[0] = s;
   rin.r[1] = cmd;
   rin.r[2] = (int)data;
   e = _kernel_swi(Socketioctl, &rin, &rout);
   errno = e ? e->errnum : 0;
#ifdef DEBUG
   if (errno != 0)
      DEBUGP2("#socketioctl() errno = %d\n\r", errno);
#endif
   if (errno > EREMOTE)
      errno = ESRCH;

   return (errno ? -1 : 0);

} /* socketioctl() */

/******************************************************************************/

/* EOF stubs.c */
@


4.2
log
@Version RO_3_71 taken
@
text
@d129 1
a129 1
int sendtosm(int s, char *buf, int len, char *buf1, int len1, char *to)
@


4.1
log
@Initial revision
@
text
@d29 1
a29 1
 * Acorn Archimedes C release 5.02 or later.
d52 3
a58 9

#ifdef OldCode
#include <sys/types.h>
#include <sys/uio.h>
#include <sys/errno.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <kernel.h>
#else
a67 1
#endif
d88 1
a88 3
#ifdef OldCode
extern _kernel_oserror *_kernel_swi();
#endif
a91 4
#ifdef OldCode
socket(domain, type, protocol)
int domain, type, protocol;
#else
a92 1
#endif
a112 6
#ifdef OldCode
bind(s, name, namelen)
int s;
struct sockaddr *name;
int namelen;
#else
a113 1
#endif
a128 9
#ifdef OldCode
sendtosm(s, buf, len, buf1, len1, to)
int     s;
char    *buf;
int     len;
char    *buf1;
int     len1;
char    *to;
#else
a129 1
#endif
d148 2
a149 10
#ifdef OldCode
sendto(s, msg, len, flag, to, tolen)
int     s;
char    *msg;
int     len, flag;
char    *to;
int     tolen;
#else
int sendto(int s, char *msg, int len, int flag, struct sockaddr *to, int tolen)
#endif
a165 1

d168 1
a168 1
#ifdef OldCode
a186 1

d189 1
a189 9
#ifdef OldCode
recvfrom(s, buf, len, flags, from, fromlenaddr)
int     s;
char    *buf;
int     len, flags;
struct sockaddr *from;
int     *fromlenaddr;
#else
int recvfrom(int s, char *buf, int len, int flags, struct sockaddr *from,
a190 1
#endif
a206 1

d209 1
a209 1
#ifdef OldCode
a227 1

d230 1
a230 8
#ifdef OldCode
setsockopt(s, level, optname, optval, optlen)
int s, level, optname;
char *optval;
int optlen;
#else
int setsockopt(int s, int level, int optname, char *optval, int optlen)
#endif
a245 1

a247 4
#ifdef OldCode
socketclose(d)
int d;
#else
a248 1
#endif
a265 4
#ifdef OldCode
select(nfds, rfds, wfds, efds, tv)
int nfds, rfds, wfds, efds, tv;
#else
a267 1
#endif
a284 5
#ifdef OldCode
socketioctl(s, cmd, data)
int s, cmd;
char *data;
#else
a285 1
#endif
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d29 1
a29 1
 * Acorn Archimedes C release 5.06 or later.
a51 3
 * 14-Mar-95  15:54  JPD  Version 1.05
 * Removed OldCode.
 *
d56 9
d74 1
d95 3
a97 1

d101 4
d106 1
d127 6
d134 1
d150 9
d160 1
d179 10
a188 2
int sendto(int s, const void *msg, size_t len, int flag,
                                           const struct sockaddr *to, int tolen)
d205 1
d208 1
a208 1
#ifdef NEVER_DEFINED
d227 1
d230 9
a238 1
int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from,
d240 1
d257 1
d260 1
a260 1
#ifdef NEVER_DEFINED
d279 1
d282 8
a289 1
int setsockopt(int s, int level, int optname, const void *optval, int optlen)
d305 1
d308 4
d313 1
d331 4
d337 1
d355 5
d361 1
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
