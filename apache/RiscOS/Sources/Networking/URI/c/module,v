head	1.10;
access;
symbols
	URI-0_27:1.10
	URI-0_26:1.10
	URI-0_25:1.9
	URI-0_24:1.8
	URI-0_23:1.7
	URI-0_22:1.6
	URI-0_21:1.6
	URI-0_20:1.6
	URI-0_19:1.6
	URI-0_18:1.6
	URI-0_17:1.6
	URI-0_16:1.5
	URI-0_15:1.5
	URI-0_14:1.5
	sbrodie_URI-0_12-interim-2:1.4
	sbrodie_URI-0_12-interim:1.3
	sbrodie_Expresso_final_190298:1.2
	sbrodie_URI_0_12:1.2
	sbrodie_URI_0_11:1.1;
locks; strict;
comment	@# @;


1.10
date	2016.04.14.20.12.57;	author jlee;	state Exp;
branches;
next	1.9;
commitid	1Kpk8Nm3jdZ7kD2z;

1.9
date	2013.09.02.20.33.41;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	yRQOE2rU7y5s8U3x;

1.8
date	2013.09.01.17.46.11;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	nwdFl6Gx7PnZeL3x;

1.7
date	2012.10.08.13.37.13;	author srevill;	state Exp;
branches;
next	1.6;
commitid	TKv27HDWNyQfpAnw;

1.6
date	2000.07.24.12.31.01;	author jfletche;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.14.15.42.39;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.14.10.40.27;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.14.10.38.40;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.02.12.13.13.44;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.16.12.55;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Don't pass silly error numbers to MsgTrans
Detail:
  c/module - Don't pass silly error numbers to MessageTrans_ErrorLookup - the kernel will now fault them.
Admin:
  Tested on Raspberry Pi 3


Version 0.26. Tagged as 'URI-0_26'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File		: module.c
 * Purpose	: URI handler module code
 * Author	: C.Elkins
 * History	: Started 8/2/97
 */

#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
#include "Global/Services.h"

#include "ralloc.h"
#include "globals.h"
#include "URIHdr.h"
#include "task.h"
#include "module.h"
#include "URIswis.h"

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif


static int module_send_service(int, URI_handle_t);
static void clearcallback(void);

static int msg_struct[4];
static _kernel_oserror msg_buff;

_kernel_oserror *module_initialise(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e;

  UNUSED(podule_base);
  UNUSED(cmd_tail);

#if defined DEBUG && defined PDebug_DEBUG
  PDebug_XInit ();
#endif

#ifndef ROM
  e = _swix(ResourceFS_RegisterFiles, _IN(0), Resources());
  if (e != NULL)
  {
    return(e);
  }
#endif
  e = _swix(MessageTrans_OpenFile, _INR(0,2),
            msg_struct, Module_MessagesFile, 0);
  if (e != NULL)
  {
#ifndef ROM
     _swix(ResourceFS_DeregisterFiles, _IN(0), Resources());
#endif
    return(e);
  }

  ModuleR12      = pw;
  URI_taskhandle = 0;
  URI_taskstack  = 0;
  if ((URI_handle_chain = rcalloc(sizeof(URI_t),1)) == 0)
  {
    return ERR(err_nomemory);
  }
  else
  {
    URI_handle_chain->guardword	= MagicWord;
    URI_handle_chain->action	= 0;
    URI_handle_chain->previous	= NULL;
    URI_handle_chain->next	= NULL;
    URI_handle_chain->string	= NULL;
  }
  /* XXX: Wrong - need to send this on a callback??? */
  module_send_service(ServiceA7_Started, NULL);
  return(0);
}


_kernel_oserror *module_finalise(int fatal, int podule, void *pw)
{
  _kernel_oserror*	e;
  URI_handle_t		handle;

  UNUSED(podule);
  UNUSED(pw);
  UNUSED(fatal);

  clearcallback();
  module_send_service(ServiceA7_Dying, NULL);


  /* must free up URI chain */
  while (URI_handle_chain)
  {
    handle = URI_handle_chain->next;
    URI_handle_chain->guardword = NULL;
    rfree(URI_handle_chain);
    URI_handle_chain = handle;
  }

#if defined DEBUG && defined PDebug_DEBUG
  PDebug_XFinal ();
#endif

  e = task_closedown(0);

  if (e == NULL)
  {
    _swix(MessageTrans_CloseFile, _IN(0), msg_struct);
#ifndef ROM
    _swix(ResourceFS_DeregisterFiles, _IN(0), Resources());
#endif
  }

  return(e);
}


void module_service(int service_number, _kernel_swi_regs *r, void *pw)
{
  UNUSED(pw);

  M_debug(("URI service handler entered : service &%x\n",service_number));

  switch(service_number)
  {
    case Service_StartedWimp:
      if (URI_taskhandle != -1) break;
    case Service_Reset:
      URI_taskhandle = 0;
      break;

    case Service_StartWimp:
      if (URI_taskhandle == 0)
      {
        URI_taskhandle = -1;
        r->r[0] = (int) (ModuleStartCommand);
        r->r[1] = 0;
      }
      break;

    case Service_WimpCloseDown:
      if (r->r[0] > 0 && r->r[2] > 0 && r->r[2] == URI_taskhandle) {
        r->r[0] = (int)ERR(err_feactive);
        /* Must not claim */
      }
      break;
  }
}



_kernel_oserror *module_swi(int swi_no, _kernel_swi_regs *r, void *pw)
{
	(void) pw;

  	switch(swi_no) {
    		case URI_Version - URI_00:
      			r->r[0] = Module_VersionNumber;
      			return(0);

    		case URI_Dispatch - URI_00:
      			return(swi_dispatchURI(r));

    		case URI_RequestURI - URI_00:
      			return(swi_requestURI(r));

    		case URI_InvalidateURI - URI_00:
      			return(swi_invalidateURI(r));

    		default:
      			return(error_BAD_SWI);
        }
}



_kernel_oserror *module_command(CMHG_CONST char *arg_string, int argc, int cmd_no, void *pw)
{
  	URI_handle_t		entry_ptr;
  	UNUSED(pw);

  	switch(cmd_no) {
    		case CMD_Desktop_AcornURI:
      			if (URI_taskhandle != -1) {
              			return ERR(err_usedesktop);
                        }
      			else {
              			/* Call will not return if SWI call was successful */
              			(void) _swix(OS_Module,_INR(0,2),2,ModuleName,arg_string);
              			return 0;
                        }

    case CMD_URIinfo:
      entry_ptr = URI_handle_chain;
      printf("%s: &%08X\n", msg_lookup("TskHand"), (unsigned int) URI_taskhandle);
      printf("%s: &%08X\n", msg_lookup("ChStart"), (unsigned int) URI_handle_chain);
      while (entry_ptr->next != NULL)
      {
        entry_ptr = entry_ptr->next;
        if (entry_ptr->guardword != MagicWord)
        {
          printf(msg_lookup("ChBad"), (void *)entry_ptr);
          printf("\n");
        }
        else
        {
          printf("%s: %p ", msg_lookup("ChHand"), (void *)entry_ptr);
          printf("(%s:%08x) '%s'\n", msg_lookup("ChAct"), entry_ptr->action, (char*)&entry_ptr->string);
        }
      }
      return(0);

    case CMD_URIdispatch:
    {
      char *uri;
      const char *c = arg_string;
      int len = 0;
      _kernel_oserror *e;
      _kernel_swi_regs r;

      /* strip trailing control characters from URI */
      c = arg_string;
      while (*c++ >= ' ') ++len;

      if ((uri = rmalloc (len + 1)) == NULL)    /* +1 for 0 terminator */
        return ERR(err_nomemory);
      strncpy (uri, arg_string, len);
      uri[len] = '\0';

      r.r[0] = 0;
      r.r[1] = (int) uri;

      e = swi_dispatchURI(&r);
      rfree (uri);
      return e;
    }

    default:
      return(0);
      break;
  }
  UNUSED(argc);
}



static int module_send_service(int service_call, URI_handle_t handle)
{
  _kernel_swi_regs	r;
  _kernel_oserror*	e;

  r.r[1] = 0xa7;

  switch(service_call)
  {
    case ServiceA7_Started:
      r.r[0] = 0;
      break;

    case ServiceA7_Dying:
      r.r[0] = 1;
      break;

    case ServiceA7_Check:
      r.r[0] = 2;
      r.r[2] = (int) &handle->string;
      r.r[3] = (int) handle;
      break;

    case ServiceA7_Process:
      r.r[0] = 3;
      r.r[2] = (int) &handle->string;
      r.r[3] = (int) handle;
      break;

    default:
      return(0);
  }
  e = _kernel_swi(OS_ServiceCall,&r,&r);
  if (e) return(0);
  return(r.r[1]);
}


/*
 * Callback handler - used for asynchronous dispatches
 */

_kernel_oserror *callback_handler(_kernel_swi_regs *r, void *pw)
{
  URI_handle_t		uri_handle;
  int			action,result;


  M_debug (("callback handler entered\n"));
  if (callback_flag == 0) return(NULL);
  callback_flag = 0;

  uri_handle = URI_handle_chain;
  while (uri_handle->next != NULL)
  {
    uri_handle = uri_handle->next;
    M_debug(("URI handle %08x action %08x\n",(int) uri_handle,(int) uri_handle->action));
    if ((action = uri_handle->action) == 0) continue;	/* nothing to do, so be quick */
    if (action & Action_ServiceA7)				/* implies service call broadcast needed */
    {
      action &= ~Action_ServiceA7;				/* clear 'need service flag' */
      if (action & Action_Check)
      {
        result = module_send_service(ServiceA7_Check,uri_handle);
        if (result == 0) action = (action | Action_Claimed) & ~Action_WimpBroad;
      }
      else
      {
        result = module_send_service(ServiceA7_Process,uri_handle);
        if (result == 0) action = (action | Action_Claimed) & ~Action_WimpBroad;
      }
      M_debug(("URI handle %08x action %08x\n",(int) uri_handle,(int) action));
    }
    if (action & (Action_WimpBroad|Action_WimpUnicast|Action_URLProto))
    {
      poll_word = (int) URI_handle_chain;
      M_debug (("set pollword to %p\n", poll_word));
    }
    if (action & Action_Delete)
    {
      uri_remove_from_chain(uri_handle);
      uri_handle->guardword = NULL;
      rfree(uri_handle);
    }

    uri_handle->action = action;
    M_debug(("URI handle %08x action %08x\n",(int) uri_handle,(int) uri_handle->action));
  }
  UNUSED(pw);
  UNUSED(r);
  
  return NULL;
}

/**********************************************************************/

const char *msg_lookup(const char *token)
{
  if (_swix(MessageTrans_Lookup, _INR(0,7),
            msg_struct, token, &msg_buff, sizeof(msg_buff), 0, 0, 0, 0) != NULL)
  {
    return "";
  }
  return (const char *)&msg_buff;
}

/**********************************************************************/

_kernel_oserror *msg_error(int which)
{
  struct {
    int errnum;
    char errmess[8];
  } token;

  token.errnum = URI_ErrorChunk + which;
  sprintf(token.errmess, "E%02u", which);
  return _swix(MessageTrans_ErrorLookup, _INR(0,3),
            &token, msg_struct, &msg_buff, sizeof(msg_buff));
}

/**********************************************************************/

static int set_callback(void (*func)())
{
    _kernel_swi_regs r;

    r.r[0] = (int) func;
    r.r[1] = (int) ModuleR12;
    return(_kernel_swi(XOS_Bit | OS_AddCallBack,&r,&r) != 0 ? -1 : 0);
}

/**********************************************************************/

static void clear_callback(void (*func)())
{
    _kernel_swi_regs r;

    r.r[0] = (int) func;
    r.r[1] = (int) ModuleR12;
    (void)_kernel_swi(XOS_Bit | OS_RemoveCallBack,&r,&r);
}

/**********************************************************************/


void setcallback(void)
{
  M_debug(("SCB> setcallback (flag = %d) ",callback_flag));
  if (callback_flag == 0)
  {
    callback_flag = 1;
    if (set_callback(callback_entry) != 0)
      {
        M_debug(("Failed\n"));
        callback_flag = 0;
      }
  }
  M_debug(("Ok!\n"));
}



static void clearcallback(void)
{
  M_debug(("CCB> clearcallback (flag = %d) ",callback_flag));
  if (callback_flag == 1)
  {
    callback_flag = 0;
    clear_callback(callback_entry);
  }
  M_debug(("Ok!\n"));
}

@


1.9
log
@Internationalised

Version 0.25. Tagged as 'URI-0_25'
@
text
@d376 9
a384 12
  char token[12];
  _kernel_oserror *e;

  sprintf(token, "@@@@@@@@E%02u", which);
  e = _swix(MessageTrans_ErrorLookup, _INR(0,3),
            token, msg_struct, &msg_buff, sizeof(msg_buff));
  if (e->errnum == 0x40404040)
  {
      /* Same error number out as went in, looked up OK */
      msg_buff.errnum = URI_ErrorChunk + which;
  }
  return(e);
@


1.8
log
@Makefile recreated from fragment
Usual drill: cast away some warnings, shuffle header files a bit, remove redundant files, rename CMHG file to auto generated one.
Tested briefly, still seemed to work.

Version 0.24. Tagged as 'URI-0_24'
@
text
@a24 2
#include "wimp.h"
#include "wimplib.h"
d26 1
a26 2

#include "OS:os.h"
d42 2
a43 3
int module_send_service(int, URI_handle_t);
void clearcallback(void);

d45 2
d50 2
d55 20
a74 3
  #if defined DEBUG && defined PDebug_DEBUG
    PDebug_XInit ();
  #endif
d119 3
a121 3
  #if defined DEBUG && defined PDebug_DEBUG
    PDebug_XFinal ();
  #endif
d125 8
d162 1
a162 1
        r->r[0] = (int) &error_block[6];
d199 1
a199 2

  	(void) pw;
d204 1
a204 1
              			return (_kernel_oserror *)&error_block[5];
d214 2
a215 5
    #ifdef DEBUG
      printf("URI info command handler entered\n");
    #endif
      printf("URI task handle: &%08X\n", (unsigned int) URI_taskhandle);
      printf("URI chain start: &%08X\n", (unsigned int) URI_handle_chain);
d221 2
a222 1
          printf("URI chain appears corrupt at %p\n",(void *)entry_ptr);
d226 2
a227 1
          printf("URI handle: %p (action:%08x) '%s'\n",(void *)entry_ptr,entry_ptr->action, (char*) &entry_ptr->string);
d266 1
a266 1
int module_send_service(int service_call, URI_handle_t handle)
d360 11
d372 17
d432 1
a432 1
void clearcallback(void)
@


1.7
log
@Got fed up with build warnings and throwback windows.

Fixed a couple of warnings in c.module.

Stopped it from building with throwback when not started from the
!Mk file (i.e. when built using !Builder/srcbuild).

Version 0.23. Tagged as 'URI-0_23'
@
text
@d33 1
a33 2
#include "ModHdr.h"
#include "URIdefs.h"
d35 1
d238 1
a238 1

d331 3
a333 1

@


1.6
log
@  Command lines are control, not \r terminated
Detail:
  * *URIDispatch was only looking for \r to terminate its strings. Command
    lines passed to modules commands are control terminated.
Admin:
  Tested and fixed the problems I was seeing with commands from my obey
  file giving data aborts.

Version 0.17. Tagged as 'URI-0_17'
@
text
@d200 1
a200 1
          printf("URI chain appears corrupt at %p\n",entry_ptr);
d204 1
a204 1
          printf("URI handle: %p (action:%08x) '%s'\n",entry_ptr,entry_ptr->action, (char*) &entry_ptr->string);
@


1.5
log
@  Brought URI module up to date.
Detail:
  Sorted Makefile to have a dirs rule and export a URI SWI veneer (this
  was previously referred to as 'URILib'). Module gets version details
  from the VersionNum file now. Improved *command '*help' output. Got rid
  of redundant Service_Memory handler. Rewrote CMHG file. Added Docs
  and Utils directory, the latter holding Ben Laughton's transmit and
  receive tests - these used !Make-style Makefiles, which have been
  slightly updated to run in a more standard fashion but are still not at
  all pretty. They work though.
Admin:
  RAM and ROM builds (the latter just via. !MkROM directly) tested.
  Export tested. Both test programs built and tested.

Version 0.14. Tagged as 'URI-0_14'
@
text
@d217 1
a217 1
      /* strip trailing CR from URI */
d219 1
a219 1
      while (*c++ != '\r') ++len;
@


1.4
log
@  Intermediate attempt to support ANT's URL protocol.
Admin:
  Not compiled, not tested, don't use.
@
text
@a140 6

    case Service_Memory:
      /* This is not now needed, since application space is no-longer used */
      /* CMHG input file masks this service call out before it gets here */
      if (r->r[2] == Image_RO_Base) r->r[1] = 0;
      break;
d193 2
a194 2
      printf("URI_taskhandle: %08x\n",URI_taskhandle);
      printf("URI chain start: %p\n",URI_handle_chain);
@


1.3
log
@  URI 0.12 and a half.
Detail:
  This never got checked in before - it appears to have the "directed
    broadcast" fix in it to ensure that the task that launched the URI
    gets the first chance to handle it.
@
text
@d154 1
a154 1
  UNUSED(pw);
d156 4
a159 6
  swi_no += URI_00;			/* Correct for swi_no being *offset* into chunk */
  switch(swi_no)
  {
    case URI_Version:
      r->r[0] = Module_VersionNumber;
      return(0);
d161 2
a162 2
    case URI_Dispatch:
      return(swi_dispatchURI(r));
d164 2
a165 2
    case URI_RequestURI:
      return(swi_requestURI(r));
d167 2
a168 2
    case URI_InvalidateURI:
      return(swi_invalidateURI(r));
d170 3
a172 3
    default:
      return(error_BAD_SWI);
  }
d179 1
a179 1
  URI_handle_t		entry_ptr;
d181 1
a181 1
  UNUSED(pw);
d183 10
a192 8
  switch(cmd_no)
  {
    case CMD_Desktop_AcornURI:
      if (URI_taskhandle != -1) {
              return (_kernel_oserror *)&error_block[5];
      }
      _swix(OS_Module,_INR(0,2),2,ModuleName,arg_string);
      return(0);
d322 1
a322 1
    if (action & (Action_WimpBroad|Action_WimpUnicast))
@


1.2
log
@Const-ness of veneers modified on the basis of the CMHG version number to
avoid build problems.

URI handler now attempts to launch tasks properly to satisfy requests if
the appropriate alias$open_uri_* variable is set
@
text
@d26 1
d74 1
a91 1
  e = task_closedown(0);
d106 2
d135 10
a144 1
    case Service_Memory:	/* This is not now needed, since application space is no-longer used */
d322 1
a322 1
    if (action & Action_WimpBroad)
@


1.1
log
@Imported from various ad hoc source control methods
@
text
@d37 6
a47 2
extern volatile int	poll_word;

d49 1
a49 1
_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base, void *pw)
d167 1
a167 1
_kernel_oserror *module_command(const char *arg_string, int argc, int cmd_no, void *pw)
@
