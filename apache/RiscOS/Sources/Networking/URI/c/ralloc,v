head	1.2;
access;
symbols
	URI-0_27:1.2
	URI-0_26:1.2
	URI-0_25:1.2
	URI-0_24:1.2
	URI-0_23:1.2
	URI-0_22:1.2
	URI-0_21:1.2
	URI-0_20:1.2
	URI-0_19:1.2
	URI-0_18:1.2
	URI-0_17:1.2
	URI-0_16:1.2
	URI-0_15:1.2
	URI-0_14:1.2
	sbrodie_URI-0_12-interim-2:1.2
	sbrodie_URI-0_12-interim:1.1
	sbrodie_Expresso_final_190298:1.1
	sbrodie_URI_0_12:1.1
	sbrodie_URI_0_11:1.1;
locks; strict;
comment	@# @;


1.2
date	2000.04.14.10.40.28;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.16.12.56;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Intermediate attempt to support ANT's URL protocol.
Admin:
  Not compiled, not tested, don't use.
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Header: /ax/networking:Starling/ShareFS/rmalib/ralloc.c:networking  1.2  $
 * $Source: /ax/networking:Starling/ShareFS/rmalib/ralloc.c: $
 *
 * Copyright(c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * $Log:	ralloc.c,v $
 * Revision 1.2  95/01/09  13:44:28  kwelton
 * The header file _swis.h no longer exists, it has been adsorbed into the
 * (new) system version of swis.h.
 *
 * Revision 1.1  95/01/04  09:57:03  kwelton
 * Initial revision
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define NORALLOCDEFINES
#include "ralloc.h"
#include "globals.h"

int do_not_mix_debugging_ralloc = 0;

#define size(b)		(((int *)b)[-1] - 4)	/* Gives size of block */

void *rmalloc(size_t size)
{
    void *p;
    _kernel_oserror *err;

    err = _swix(OS_Module, _IN(0) | _IN(3) | _OUT(2), 6, size, &p);
    if (err)
	return NULL;
    return p;
}

void rfree(void *p)
{
     _swix(OS_Module, _IN(0) | _IN(2), 7, p);
}

void *rrealloc(void *p, size_t size)
{
    _kernel_oserror *err;
    if (!p)
	return rmalloc(size);
    err = _swix(OS_Module, _IN(0) | _IN(2) | _IN(3) | _OUT(2),
		13, p, size - size(p), &p);
    if (err)
	return NULL;
    return p;
}

void *rcalloc(size_t n, size_t m)
{
    void *p = rmalloc(n * m);
    if (p)
	memset(p, 0, (size_t) (n * m));
    return p;
}

char *rstrdup(const char *s)
{
    char *p;
    int l = strlen(s);
    p = rmalloc(l + 1);
    if (p)
	strcpy(p, s);
    return p;
}

/* EOF ralloc.c */
@


1.1
log
@Imported from various ad hoc source control methods
@
text
@@

