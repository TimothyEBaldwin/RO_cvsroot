head	1.1;
branch	1.1.1;
access;
symbols
	URL-0_58:1.1.1.1
	URL-0_57:1.1.1.1
	URL-0_56:1.1.1.1
	URL-0_55:1.1.1.1
	URL-0_54:1.1.1.1
	URL-0_53:1.1.1.1
	URL-0_52:1.1.1.1
	URL-0_51:1.1.1.1
	URL-0_50:1.1.1.1
	dellis_autobuild_BaseSW:1.1.1.1
	URL-0_49:1.1.1.1
	URL-0_48:1.1.1.1
	URL-0_47:1.1.1.1
	URL-0_46:1.1.1.1
	sbrodie_sedwards_16Mar2000:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	URL-0_45:1.1.1.1
	URL-0_44:1.1.1.1
	URL-0_43:1.1.1.1
	URL-0_42:1.1.1.1
	URL-0_41:1.1.1.1
	URL-0_40:1.1.1.1
	URL-0_39:1.1.1.1
	sbrodie_URL_0_38:1.1.1.1
	sbrodie_URL_0_37:1.1.1.1
	sbrodie_URL_0_36:1.1.1.1
	sbrodie_URL_0_35:1.1.1.1
	sbrodie_URL_0_33:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_URL_0_31:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.01.29.18.32.35;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.35;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source: /ax/networking:Phileas/URL/register.c: $
 *
 * $Log:	register.c,v $
 * Revision 1.1  95/09/08  09:35:16  pwain
 * Initial revision
 *
 *
 * Handle requests to register!
 */

#include <stdio.h>
#include <stdlib.h>
#include "swis.h"
#include "url.h"
#include "protocol.h"
#include "utils.h"
#include "externs.h"

/* Must preserve all registers except r->r[1] */
static Client *make_new_client(_kernel_swi_regs *r)
{
        Client *c = malloc(sizeof(Client));
        
        if (c == NULL) return c;
        c->next = NULL;
        c->client.proxy = NULL;
        c->client.no_proxy = NULL;
        c->client.protocol = 0;
        c->client.had_connection = 0;
        r->r[1] = (int) &(c->client.poll_word);
        
        return c;
}

/* Must preserve all registers except r->r[1] */
_kernel_oserror *url_reg(_kernel_swi_regs *r)
{
	Client *newc = make_new_client(r);

	if (newc == NULL) {
	        return make_error(url_ERROR_MEMORY_EXHAUSTED, 0);
	}

    	if (client_list == NULL) {
		client_list = newc;
	}
	else {
	        Client *list;
	        for (list = client_list; list->next; list = list->next) ;;
	        list->next = newc;
	}
	
	return NULL;
}

/* handle deregistering of a client */
_kernel_oserror *deregister(_kernel_swi_regs *r)
{
	Client *list = find_client(r->r[1]);
	
    	if (list == NULL) {
		return make_error(url_ERROR_CLIENT_ID_NOT_FOUND, 0);
	}

    	/* if we are in the middle of a down load, dont disconnect */
    	if (list->client.protocol != 0) {
       		(void) stop(r);
    	}

    	if (client_list==list) {
        	/* special case - client at head of the list */
		client_list = client_list->next;
	}
    	else {
        	Client *mainlist=client_list;
        	/* Locate this element as a "next" entry for removal */
		for (mainlist=client_list; mainlist; mainlist=mainlist->next) {
                        if (mainlist->next == list) {
                                break;
                        }
		}
		if (mainlist == NULL)  {
		        return make_error(url_ERROR_CLIENT_ID_NOT_FOUND, 0);
		}
		mainlist->next = list->next;
	}

    	/* we have now found the client we need to free up */
    	if (list->client.proxy != NULL) {
    	        Proxy *p=list->client.proxy;
		while (p != NULL) {
		        Proxy *const next_p = p->next;
	    		free(p->proxy);
	    		free(p->url_base);
	    		free(p);
	    		p = next_p;
	        }
        }

    	if (list->client.no_proxy != NULL) {
    		Proxy *p=list->client.no_proxy;
		while (p != NULL) {
		        Proxy *const next_p = p->next;
	    		free(p->proxy);
	    		free(p->url_base);
	    		free(p);
	    		p = next_p;
	        }
        }

    	free(list);
    	return NULL;
}
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
