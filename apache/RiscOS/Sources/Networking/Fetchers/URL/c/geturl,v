head	1.4;
access;
symbols
	URL-0_58:1.4
	URL-0_57:1.4
	URL-0_56:1.4
	URL-0_55:1.4
	URL-0_54:1.4
	URL-0_53:1.4
	URL-0_52:1.4
	URL-0_51:1.4
	URL-0_50:1.4
	dellis_autobuild_BaseSW:1.4
	URL-0_49:1.4
	URL-0_48:1.3
	URL-0_47:1.3
	URL-0_46:1.3
	sbrodie_sedwards_16Mar2000:1.3
	dcotton_autobuild_BaseSW:1.4
	URL-0_45:1.3
	URL-0_44:1.3
	URL-0_43:1.2
	URL-0_42:1.2
	URL-0_41:1.1.1.1
	URL-0_40:1.1.1.1
	URL-0_39:1.1.1.1
	sbrodie_URL_0_38:1.1.1.1
	sbrodie_URL_0_37:1.1.1.1
	sbrodie_URL_0_36:1.1.1.1
	sbrodie_URL_0_35:1.1.1.1
	sbrodie_URL_0_33:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_URL_0_31:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2000.09.14.11.11.59;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	99.02.15.15.27.40;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.11.13.14.13.52;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.35;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.35;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  New export phase for exporting SWI number symbols.
Detail:
  Exports a header file for C code to use to define SWI numbers for
    the URL module.  Include "Interface/URL.h" to get the header.
  Updated to use DebugLib instead of its own private debugging system.
Admin:
  Requires RiscOS/BuildSys 2.51 or later.
  Requires RiscOS/Library 0.53 or later

Version 0.49. Tagged as 'URL-0_49'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * Copyright © Pace Micro Technology plc. 1995-2000
 *
 * Get a URL handler
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "url.h"
#include "externs.h"
#include "protocol.h"
#include "utils.h"
#include "parseurl.h"
#include "parseflags.h"
#include "generic.h"

static _kernel_oserror *get_process(Control *client, _kernel_swi_regs *r);
static int make_proxyed(const char *request, Proxy *proxy, char **address);

_kernel_oserror *geturl(_kernel_swi_regs *r)
{
        Client *list = find_client(r->r[1]);
        /* Return an error if we arent registered */
        if (list == NULL) {
                return make_error(url_ERROR_CLIENT_ID_NOT_FOUND, 0);
        }

        if (list->client.protocol != 0) {
                return make_error(url_ERROR_ALREADY_CONNECTED, 0);
        }

        /* try and do something */
        return get_process(&(list->client),r);
}

static _kernel_oserror *get_process(Control *client, _kernel_swi_regs *r)
{
        Control c=*client;
        char *buffer=NULL;
        char *request=NULL;
        int no_proxy=-1;
        int done_proxy = 0;
        _kernel_oserror *error;
        int original_request_r3 = r->r[3];

        request = URL_canonicalise(parseurlflags_APPLY_HEX_ENCODE, (char *)r->r[3]);
        if (request == NULL) {
                return make_error(url_ERROR_NO_PARSE_URL, 0);
        }
        buffer = NULL;

        dprintf(("geturl", "GetURL: Canonical URL is `%s'\n", request));

        /* first check to see if this is an explicit no-proxy request */
        if (c.no_proxy != NULL) {
                done_proxy = make_proxyed(request,c.no_proxy,&buffer);
                no_proxy=1;
        }

        /* Now find out if there is a client proxy requirement. */
        if(done_proxy == 0 && (c.proxy != NULL))  {
                done_proxy = make_proxyed(request,c.proxy,&buffer);
                no_proxy=0;
        }

        /* Now look at the global no_proxy bits */
        if((done_proxy == 0) && (no_proxy_list != NULL)) {
                done_proxy = make_proxyed(request,global_proxy_list,&buffer);
                no_proxy=1;
        }

        /*
         * Do the same for the global proxy list only if the session one
         * didn't override it
         */
        if((done_proxy == 0) && (global_proxy_list != NULL)) {
                done_proxy=make_proxyed(request,global_proxy_list,&buffer);
                no_proxy=0;
        }

        /*
         * Ensure that the final check doesn't break things for URLs
         * that are not proxied.
         */

        /* Based upon what went on above, decide what URL to use */

        if (buffer && !*buffer) buffer = NULL;

        dprintf(("geturl", "Request is `%s'\n", request));
        dprintf(("geturl", "Proxy   is `%s'\n", buffer?buffer:"<UNSET>"));

        /* Look for a protocol module */
        client->protocol = protocol_get_swibase(buffer?buffer:request);

        if (!client->protocol) {
                if (request) free(request);
                r->r[3] = original_request_r3;
                return make_error(url_ERROR_NO_FETCHER_SERVICE, 0);
        }

        /* We now have a request that we can send on */
        r->r[3] = (int)request;
        if (buffer != NULL) {
                r->r[7] = (int)buffer;
                r->r[0] |= (1U<<31);
        }
        error = _kernel_swi(client->protocol + 0,r,r);
        if (buffer != NULL) {
                if (error == NULL) {
                        r->r[0] &= ~(1U<<31);
                }
        }

        if (request) free(request);
        r->r[3] = original_request_r3;
        return error;
}

int make_proxyed(const char *request, Proxy *proxy, char **host)
{
        while (proxy != NULL) {
                if (proxy->url_base==NULL) {
                        proxy=proxy->next;
                        continue;
                }

                if (!strncmp(request, proxy->url_base, strlen(proxy->url_base))) {
                        /* yes there is */
                        dprintf(("proxy", "Matched an entry (%s) => %s\n",
                          proxy->url_base, proxy->proxy ? proxy->proxy : "<NONE>"));
                        *host = proxy->proxy;
                        return 1;
                }
                proxy=proxy->next;
        }

        return 0;
}
@


1.3
log
@  Via file for resource generation updated to use LocalRes:
Detail:
  Also, log tags removed from geturl.c to stop CVS inserting the
    changelogs in that file.
Admim:
  No functional change.

Version 0.44. Tagged as 'URL-0_44'
@
text
@d17 1
a17 5
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/RiscOS/Sources/Networking/Fetchers/URL/c/geturl,v $
 *
 * © Acorn Computers Ltd. 1995-1999
d39 4
a42 4
    	Client *list = find_client(r->r[1]);
    	/* Return an error if we arent registered */
    	if (list == NULL) {
        	return make_error(url_ERROR_CLIENT_ID_NOT_FOUND, 0);
d45 2
a46 2
    	if (list->client.protocol != 0) {
    	        return make_error(url_ERROR_ALREADY_CONNECTED, 0);
d49 2
a50 2
    	/* try and do something */
    	return get_process(&(list->client),r);
d55 80
a134 84
	Control c=*client;
	char *buffer=NULL;
	char *request=NULL;
	int no_proxy=-1;
	int done_proxy = 0;
	_kernel_oserror *error;
	int original_request_r3 = r->r[3];

	request = URL_canonicalise(parseurlflags_APPLY_HEX_ENCODE, (char *)r->r[3]);
	if (request == NULL) {
	        return make_error(url_ERROR_NO_PARSE_URL, 0);
	}
	buffer = NULL;

	#ifdef TRACE
	protocol_debug("GetURL: Canonical URL is `%s'\n", request);
	#endif

	/* first check to see if this is an explicit no-proxy request */
  	if (c.no_proxy != NULL) {
    		done_proxy = make_proxyed(request,c.no_proxy,&buffer);
    		no_proxy=1;
        }

	/* Now find out if there is a client proxy requirement. */
  	if(done_proxy == 0 && (c.proxy != NULL))  {
    		done_proxy = make_proxyed(request,c.proxy,&buffer);
    		no_proxy=0;
        }

	/* Now look at the global no_proxy bits */
  	if((done_proxy == 0) && (no_proxy_list != NULL)) {
    		done_proxy = make_proxyed(request,global_proxy_list,&buffer);
    		no_proxy=1;
        }

	/*
	 * Do the same for the global proxy list only if the session one
	 * didn't override it
	 */
	if((done_proxy == 0) && (global_proxy_list != NULL)) {
    		done_proxy=make_proxyed(request,global_proxy_list,&buffer);
    		no_proxy=0;
        }

	/*
	 * Ensure that the final check doesn't break things for URLs
	 * that are not proxied.
	 */

	/* Based upon what went on above, decide what URL to use */

	if (buffer && !*buffer) buffer = NULL;

	#ifdef TRACE
	protocol_debug("Request is `%s'\n", request);
	protocol_debug("Proxy   is `%s'\n", buffer?buffer:"<UNSET>");
	#endif

	/* Look for a protocol module */
  	client->protocol = protocol_get_swibase(buffer?buffer:request);

  	if (!client->protocol) {
    		if (request) free(request);
    		r->r[3] = original_request_r3;
    		return make_error(url_ERROR_NO_FETCHER_SERVICE, 0);
        }

	/* We now have a request that we can send on */
  	r->r[3] = (int)request;
  	if (buffer != NULL) {
	  	r->r[7] = (int)buffer;
  	        r->r[0] |= (1U<<31);
  	}
  	error = _kernel_swi(client->protocol + 0,r,r);
	if (buffer != NULL) {
	        if (error == NULL) {
		        r->r[0] &= ~(1U<<31);
		}
	}

	if (request) free(request);
	r->r[3] = original_request_r3;
  	return error;
d139 4
a142 4
  	while (proxy != NULL) {
    		if (proxy->url_base==NULL) {
      			proxy=proxy->next;
      			continue;
d145 6
a150 8
    		if (!strncmp(request, proxy->url_base, strlen(proxy->url_base))) {
			/* yes there is */
			#ifdef TRACE
			protocol_debug("Matched an entry (%s) => %s\n", proxy->url_base,
				proxy->proxy ? proxy->proxy : "<NONE>");
			#endif
		        *host = proxy->proxy;
		        return 1;
d152 1
a152 1
    		proxy=proxy->next;
d155 1
a155 1
  	return 0;
@


1.2
log
@  New flag to control hex encoding of URLs.
  Now takes notice of R0:0 on URL_ParseURL (field count in R5)
Admin:
  Supporting documentation:
    Acorn URL fetcher API specification (1215,220/FS; ECO4131)

Version 0.42. Tagged as 'URL-0_42'
@
text
@d21 1
a21 7
 * $Log: geturl,v $
 * Revision 1.1.1.1  1998/01/29 18:32:35  sbrodie
 * Import from SrcFiler of Browser fetchers
 *
 * Revision 1.1  95/09/08  09:34:51  pwain
 * Initial revision
 *
@


1.1
log
@Initial revision
@
text
@d19 5
a23 1
 * $Source: /ax/networking:Phileas/URL/geturl.c: $
a24 1
 * $Log:	geturl.c,v $
d41 1
d73 1
a73 1
	request = URL_canonicalise(0, (char *)r->r[3]);
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
