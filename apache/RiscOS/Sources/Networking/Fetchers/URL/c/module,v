head	1.9;
access;
symbols
	URL-0_58:1.9
	URL-0_57:1.8
	URL-0_56:1.8
	URL-0_55:1.8
	URL-0_54:1.8
	URL-0_53:1.8
	URL-0_52:1.8
	URL-0_51:1.8
	URL-0_50:1.8
	dellis_autobuild_BaseSW:1.8
	URL-0_49:1.8
	URL-0_48:1.7
	URL-0_47:1.7
	URL-0_46:1.7
	sbrodie_sedwards_16Mar2000:1.7
	dcotton_autobuild_BaseSW:1.8
	URL-0_45:1.7
	URL-0_44:1.7
	URL-0_43:1.7
	URL-0_42:1.7
	URL-0_41:1.7
	URL-0_40:1.7
	URL-0_39:1.6
	sbrodie_URL_0_38:1.5
	sbrodie_URL_0_37:1.5
	sbrodie_URL_0_36:1.5
	sbrodie_URL_0_35:1.4
	sbrodie_URL_0_33:1.4
	sbrodie_Expresso_final_190298:1.4
	sbrodie_URL_0_31:1.3
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2018.05.12.08.55.34;	author rool;	state Exp;
branches;
next	1.8;
commitid	Z9VvVF7l3Nu5dZBA;

1.8
date	2000.09.14.11.11.59;	author sbrodie;	state Exp;
branches;
next	1.7;

1.7
date	98.09.16.10.38.11;	author sbrodie;	state Exp;
branches;
next	1.6;

1.6
date	98.06.29.13.57.14;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	98.03.31.10.38.42;	author sbrodie;	state Exp;
branches;
next	1.4;

1.4
date	98.02.18.10.33.19;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	98.02.11.19.28.04;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.02.10.18.56.45;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.35;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.35;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Makefile recreated from fragments
Detail:
  Now exports its SWIs & service calls to Interface/URL.h
Admin:
  Submission for TCP/IP bounty.

Version 0.58. Tagged as 'URL-0_58'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Id: module,v 1.8 2000/09/14 11:11:59 sbrodie Exp $
 *
 * The URL module performs a number of tasks. These are related to providing
 * a protocol independant view of the WWW/FTP/Gopher etc. This routine
 * is used as a general data fetching system....
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include "sys/errno.h"
#include "swis.h"

#include "Global/Services.h"
#include "Interface/URL.h"

#include "url.h"
#include "urlhdr.h"
#include "externs.h"
#include "protocol.h"
#include "utils.h"
#include "parseurl.h"
#include "enumerate.h"

/*
 * This macro, when defined, includes the code for the two debugging *-commands
 * You need to enable the commands in the CMHG header file too.
 * #define TRACE2
 */

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

/*
 * These are the global variables  (see url.h)
 */
Proxy *global_proxy_list;
Proxy *no_proxy_list;
Client *client_list;

#ifndef ROM
extern int Resources(void); /* From resgen */
#endif

#ifndef ROM
#ifdef DEFINE_ERRNO
int __errno;
#endif
#endif


static int callback_pending_flag;

/* Sets clibrary_realloc_routine_is_buggy non-zero if RISC OS 3.1 or earlier (ie. ROM realloc is broken) */
static int clibrary_realloc_routine_is_buggy;
static void module_check_os_version(void)
{
        int os;
        (void) _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &os);
        clibrary_realloc_routine_is_buggy = (os <= 0xA4);
}


/*
 * Startup code. We just need to set up the initial proxy. Should probably
 * send out a service call saying that we are starting.
 */
_kernel_oserror *module_init(CMHG_CONST char *cmd_fail, int podule_base, void *pw)
{
	_kernel_oserror *e;

    	(void) cmd_fail;
    	(void) podule_base;
    	(void) pw;

        debug_initialise("URL", NULL, NULL);
        debug_set_device(DEBUGIT_OUTPUT);

    	callback_pending_flag = 0;

    	/* since we dont have any proxy services requested at this point */
    	global_proxy_list=NULL;
    	no_proxy_list=NULL;
    	client_list=NULL;

	module_check_os_version();

        #ifndef ROM
        e = _swix(ResourceFS_RegisterFiles, _IN(0), Resources());
	if (e != NULL) return e;
	#endif

        if (getenv(Module_Title "$Path")) {
                e = messages_file_open(Module_Title ":Messages");
        }
        else {
        	e = messages_file_open("Resources:$.Resources.URL." "URL" ".Messages");
        }

        if (e != NULL) {
                #ifndef ROM
		(void) _swix(ResourceFS_DeregisterFiles, _IN(0), Resources());
                #endif
		return e;
	}

	if (_swix(OS_AddCallBack, _INR(0,1), callback_entry, pw) == NULL) {
		callback_pending_flag = 1;
	}

    	return NULL;
}

int callback_handler(_kernel_swi_regs *r, void *pw)
{
	(void) pw;
	(void) r;

	if (callback_pending_flag == 0) {
		return 1;
	}
	callback_pending_flag = 0;

	_swix(OS_ServiceCall, _INR(0,2),
	      Service_URLModule_Started, Service_URLModule, Module_VersionNumber);
	return 1;
}

/*
 * The finalisation code should probably send out a service call or
 * something saying that its going away!
 */
_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
    	(void) fatal;
    	(void) podule;

	if (callback_pending_flag) {
		(void) _swix(OS_RemoveCallBack, _INR(0,1), callback_entry, pw);
	        callback_pending_flag = 0;
	}

	messages_file_close();
#ifndef ROM
	_swix(ResourceFS_DeregisterFiles, _IN(0), Resources());
#endif
	_swix(OS_ServiceCall, _INR(0,2),
	      Service_URLModule_Dying, Service_URLModule, Module_VersionNumber);

	return NULL;
}

/*
 * SWI handler.  Just the usual dispatch table.
 *
 */
_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    	(void) pw;

    	switch(swi_no) {
        	case URL_Register - URL_00: /* URL_Register */
			return(url_reg(r));  /* register.c */

        	case URL_GetURL - URL_00: /* URL_GetURL */
			return(geturl(r));  /* geturl.c */

		case URL_Status - URL_00: /* URL_Status */
			return(status(r));  /* status.c */

		case URL_ReadData- URL_00: /* URL_ReadData */
			return(readdata(r));  /* readdata.c */

		case URL_SetProxy - URL_00: /* URL_SetProxy */
			return(setproxy(r));  /* proxy.c */

		case URL_Stop - URL_00: /* URL_Stop */
			return(stop(r));  /* stop.c */

		case URL_Deregister - URL_00: /* URL_Deregister */
			return(deregister(r)); /* in register.c */

		case URL_ParseURL - URL_00: /* URL_ParseURL */
			return(parse_url(r)); /* parseurl.c */

		case URL_EnumerateSchemes - URL_00: /* URL_EnumerateSchemes */
			return(proto_enumerate(r)); /* in enumerate.c */

		case URL_EnumerateProxies - URL_00: /* URL_EnumerateProxies */
			return(proxy_enumerate(r)); /* proxy.c */

		case URL_ProtocolRegister - URL_00: /* Protocol Register */
			return (protocol_register(r)); /* protocol.c */

		case URL_ProtocolDeregister - URL_00: /* Protocol Deregister */
			return (protocol_deregister(r)); /* protocol.c */

		default:
			return error_BAD_SWI;
	}
}


/******************************************************************/
/* Client *find_client(unsigned int id)                           */
/******************************************************************/
/* Given a client's poll word identifier locate the session       */
/* control block for the client in the main control block list    */
/******************************************************************/
Client *find_client(unsigned int id)
{
	Client *list;

	/* try and find the client we are after */
	for (list = client_list; list; list=list->next) {
    		if (id == (unsigned int) &((list->client).poll_word)) {
      			return list;
                }
        }

  	return NULL;
}

#ifdef TRACE2
static _kernel_oserror *clients_list(void)
{
        Client *list;

        for (list = client_list; list; list=list->next) {
                Control *c = &list->client;
                printf("%p %08x %d %p %p %08x\n",
                	list, c->poll_word, c->had_connection,
                	c->proxy, c->no_proxy, c->protocol);
        }

        return NULL;
}

static void show_proxies(void *id, Proxy *p, int ch)
{
        if (p == NULL) {
                return;
        }
        else {
		printf("%p %c %-.50s   %s\n", id, ch, p->url_base ? p->url_base : "*",
			p->proxy ? p->proxy : "<NONE>");
        }
	show_proxies(id, p->next, ch);
}

static _kernel_oserror *show_proxy_list(void)
{
        Client *c;

        for (c = client_list; c; c=c->next) {
                show_proxies(c, c->client.no_proxy,  '-');
                show_proxies(c, c->client.proxy, '+');
        }

        show_proxies(c, no_proxy_list, '-');
        show_proxies(c, global_proxy_list, '+');

        return NULL;
}
#endif

_kernel_oserror *command_line_handler(CMHG_CONST char *a, int ac, int cmd_no, void *pw)
{

	(void) a;
	(void) ac;
	(void) pw;

	switch (cmd_no) {
	        case CMD_URLProtoShow:
  			return protocol_list();
		#ifdef TRACE2
  		case CMD_URLClients:
  			return clients_list();
  		case CMD_URLProxyShow:
                        return show_proxy_list();
  		#endif
  		default:
  			break;
  	}

  	return NULL;
}


/* RISC OS 3.1 SVC mode realloc is broken, so we must provide our own */
void *module_realloc(void *ptr, size_t size)
{
        dprintf(("realloc", "module_realloc(%p, %d)\n", ptr, size));
	if (!clibrary_realloc_routine_is_buggy) return realloc(ptr, size);

        if (ptr == NULL) {
                return malloc(size);
        }
        if (size == 0) {
                free(ptr);
		return NULL;
        }
	else {
	        const int *rma_block = ptr;
	        const size_t newsize = size - (rma_block[-1] - 4);
	        char *newptr;

		if (_swix(OS_Module, _IN(0)|_INR(2,3)|_OUT(2), 0xD, ptr, newsize, &newptr) != NULL) {
		        return NULL;
		}

		return newptr;
	}
}
@


1.8
log
@  New export phase for exporting SWI number symbols.
Detail:
  Exports a header file for C code to use to define SWI numbers for
    the URL module.  Include "Interface/URL.h" to get the header.
  Updated to use DebugLib instead of its own private debugging system.
Admin:
  Requires RiscOS/BuildSys 2.51 or later.
  Requires RiscOS/Library 0.53 or later

Version 0.49. Tagged as 'URL-0_49'
@
text
@d17 1
a17 1
 * $Id$
d28 4
d60 1
a60 1
extern int messages_file(void);
d107 1
a107 1
        e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
d120 1
a120 1
		(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
d142 2
a143 1
	_swix(OS_ServiceCall, _INR(0,2), 0, URL_00, Module_VersionNumber);
d162 5
a166 4
        #ifndef ROM
	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
	#endif
	(void) _swix(OS_ServiceCall, _INR(0,2), 1, URL_00, Module_VersionNumber);
@


1.7
log
@  No longer uses TinyStubs (due to __ctype)
  Extra ResourceFS files added for shared fetcher use.
Detail:
  TinyStubs usage for ROM builds removed due to library static data
    reference problems.
  Added code for direct SWI calling to protocol modules.  This code
    is switched out on the DIRECTSWI macro which is set in Makefile.
  RCS log tags removed from source files.
  New tests added to OddURLs test file.
Admin:
  Built from clean; tested in RAM build.

Version 0.40. Tagged as 'URL-0_40'
@
text
@d17 1
a17 3
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/RiscOS/Sources/Networking/Fetchers/URL/c/module,v $
a47 16

/* TinySupport SWIs.  This does not work if any library static data
 * is used within the module.  This means errno (__errno) and __ctype
 * (as used by any macro call to is.... functions)  If you re-enable
 * this SWI call, this module will fail to work at all.
 */
#define NO_TINYSTUBS

#ifdef ROM
#ifndef NO_TINYSTUBS
static _kernel_oserror *__ROM;
#define TinySupport_Share	(0x82c43)
#define TinySupport_Die		(0x82c41)
#endif
#endif

d90 2
a91 5
      	#ifdef ROM
      	#ifndef NO_TINYSTUBS
    	__ROM = _swix(TinySupport_Share, _IN(0), pw);
    	#endif
	#endif
a161 6
        #ifdef ROM
        #ifndef NO_TINYSTUBS
    	if(!__ROM) _swix(TinySupport_Die, 0);
    	#endif
	#endif

d306 1
a306 3
        #ifdef TRACE
        protocol_debug("module_realloc(%p, %d)\n", ptr, size);
        #endif
@


1.6
log
@New SWI added to enumerate proxies, plus new test program for the SWI.
New *-command for dumping proxy information - only in debug builds.

Version 0.39. Tagged as 'URL-0_39'
@
text
@a20 8
 * $Log: module,v $
 * Revision 1.1.1.1  1998/01/29 18:32:35  sbrodie
 * Import from SrcFiler of Browser fetchers
 *
 * Revision 1.1  95/09/08  09:34:55  pwain
 * Initial revision
 *
 *
d50 8
d59 1
d61 3
d108 4
a111 2
        #ifdef ROM
    	__ROM = _swix(0xa2c43, _IN(0), pw);
d184 3
a186 1
    	if(!__ROM) _swix(0xa2c41, 0);
@


1.5
log
@Bug fix for looking up protocol as port number - which still looked it
up in most circumstances.  This lookup only occurs on unknown protocols
now.
@
text
@d46 6
d151 1
a153 2

	callback_pending_flag = 0;
d185 1
a185 1
 * This is the only real entry point to the module. SWIs!
a186 4
 * These are:
 *
 * URL_Register, URL_GetURL, URL_Status, URL_ReadData, URL_SetProxy and
 * URL_Stop.
d215 1
a215 1
			return(parse_url(r)); /* in parseurl.c */
d220 3
d269 27
d311 2
@


1.4
log
@Version number increase for all modules for final Expresso release.
@
text
@@


1.3
log
@Dependency on Syslog removed
Const-ness of veneers modified on the basis of the CMHG version number to
avoid build problems.
@
text
@d68 1
d70 1
@


1.2
log
@URL version 0.31.
Build process changed to use standard !Mk... taskobey scripts.
Makefile is now capable of producing RAM and ROM versions of URL.
Resources moved into standard subdirectory of Resources:$.Resources.URL
General code tidies to remove all compilation warnings
@
text
@d46 6
d88 1
a88 1
_kernel_oserror *module_init(const char *cmd_fail, int podule_base, void *pw)
d265 1
a265 1
_kernel_oserror *command_line_handler(const char *a, int ac, int cmd_no, void *pw)
@


1.1
log
@Initial revision
@
text
@d19 5
a23 1
 * $Source: /ax/networking:Phileas/URL/module.c: $
a24 1
 * $Log:	module.c,v $
d36 1
d39 1
a39 1
#include "urlmodule.h"
d46 4
d53 12
a64 3
Proxy *global_proxy_list=NULL;
Proxy *no_proxy_list=NULL;
Client *client_list=NULL;
a67 2
extern int messages_file(void);

d85 1
a85 1
	
d89 5
a93 1
    	
d103 2
a104 1
	e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
d106 11
a116 2
	e = messages_file_open("Resources:$.Resources.URLFetcher.Messages");
	if (e != NULL) {
d118 1
d159 1
d161 1
d164 5
a168 1
    	return NULL;
d207 1
a207 1
			
d216 1
a216 1
			
d247 1
a247 1
        
d254 1
a254 1
        
d265 1
a265 1
	
d276 1
a276 1
  	
d288 1
a288 1
	        
d304 1
a304 1
		
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
