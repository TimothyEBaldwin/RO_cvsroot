head	1.3;
access;
symbols
	Gopher-0_17:1.3
	Gopher-0_16:1.3
	Gopher-0_15:1.3
	Gopher-0_14:1.3
	Gopher-0_13:1.2
	Gopher-0_12:1.2
	Gopher-0_11:1.2
	sbrodie_Expresso_final_190298:1.2
	sbrodie_Gopher_0_09:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2000.05.05.11.09.55;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.02.11.11.56.58;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.26;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.26;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  32-bit compatible.
  Uses shared fetcher code
Detail:
  Common DNS code, URL client code abstracted out to Common library.
Admin:
  Requires BuildSys 1.94 or later.
  Requires Common 0.01 or later (RiscOS/Sources/Networking/Fetchers/Common)

Version 0.14. Tagged as 'Gopher-0_14'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * HTTP (c.ses_ctrl)
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include "sys/errno.h"
#include "module.h"
#include "socklib.h"
#include "protocol.h"
#include "generic.h"

/*
 * This file contains the routines needed to manipulate sessions
 * within the contect of multiple clients of the module.
 */

static Session *session_list = NULL;

/*************************************************************/
/* Session *find_session(unsigned int id)		     */
/*************************************************************/
/* Given a session ID, return the session control block	     */
/* associated with it.					     */
/*************************************************************/
Session *find_session(unsigned int id)
{
	Session *session;

	for (session = session_list; session; session = session->next) {
		if (session->id == id) return session;
	}

	return NULL;
}

/*************************************************************/
/* Session *new_session(void)				     */
/*************************************************************/
/* Create a new session, taking into account starting the    */
/* sessions list					     */
/*************************************************************/
Session *new_session(void)
{
	Session *ses = calloc(1, sizeof(Session));

	if (ses == NULL) {
		return ses;
	}

	if (session_list == NULL) {
		/* no list so create a new one */
		session_list = ses;
	}
	else {
		/* else find end of list and add an element */
		Session *s;

		for (s=session_list; s->next; s=s->next) ;;
		s->next = ses;
	}

	return ses;
}

static Session *kill_session_data(Session *s)
{
	Session *result = s->next;

	if (s->control_sd != -1) {
		#ifdef TRACE
		protocol_debug("socketclose(%d) in kill_session_data\n", s->control_sd);
		#endif
		close_socket(&s->control_sd);
	}

	free(s->uri);
	free(s->host);
	free(s->url);
	free(s->selector);
	memset(s, '\0', sizeof(*s)); /* Let's be careful */
	free(s);

	return result;
}


/*************************************************************/
/* void kill_session(Session *s)			     */
/*************************************************************/
/* Given the location of the session block, delete the	     */
/* session cleanly, taking into account the session next     */
/* pointers and any memory associated with it		     */
/*************************************************************/
void kill_session(Session *s)
{
	Session *ses = session_list, *prev_ses = NULL;

	for (ses = session_list; ses; prev_ses = ses, ses = ses->next) {
		if (ses == s) {
			Session *const next = kill_session_data(s);
			if (prev_ses == NULL) {
				session_list = next;
			}
			else {
				prev_ses->next = next;
			}
			break;
		}
	}

	#ifdef TRACE
	protocol_debug("\nkill_session %p completed.  Dump of session chain\n", s);
	for (ses=session_list; ses; ses=ses->next) {
		protocol_debug("%p (socket %d) URL %s\n", ses, ses->control_sd, ses->url);
	}
	protocol_debug("End of session chain\n\n");
	#endif
}

/*************************************************************/
/* void ses_kill_all(void)				     */
/*************************************************************/
/* A small routine to kill off all sessions at module shut-  */
/* down.						     */
/*************************************************************/
void ses_kill_all(void)
{
	while (session_list) {
		kill_session(session_list);
	}
}


/* session_check is called by the callback routine in order to
 * timeout any inactive connections or anything.  Currently, it
 * does nothing, however nothing is lost by having it here, since
 * callbacks are required for the connection pool monitoring
 * anyway.
 */
void session_check(void)
{
	/* Nothing */
}

void session_init(void)
{
	session_list = NULL;
}

@


1.2
log
@Build process improvements :
* Standardised make process in common with other protocol modules.
* Resources put into standard structure for internationalisation
* Standard !MkClean, !MkRom, !MkRam to build different versions
@
text
@d89 1
a89 1
		protocol_debug("socketclose(%d) in kill_session_data\n", s->sd);
d132 1
a132 1
		protocol_debug("%p (socket %d) URL %s\n", ses, ses->sd, ses->url);
@


1.1
log
@Initial revision
@
text
@d86 1
a86 1
	
d93 1
a93 1
	
d100 1
a100 1
	
d103 1
a103 1
	        
d162 6
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
