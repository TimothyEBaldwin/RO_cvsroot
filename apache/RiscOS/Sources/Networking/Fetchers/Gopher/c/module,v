head	1.7;
access;
symbols
	Gopher-0_17:1.7
	Gopher-0_16:1.7
	Gopher-0_15:1.6
	Gopher-0_14:1.6
	Gopher-0_13:1.5
	Gopher-0_12:1.4
	Gopher-0_11:1.4
	sbrodie_Expresso_final_190298:1.4
	sbrodie_Gopher_0_09:1.3
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2007.09.22.20.23.14;	author srevill;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.05.11.09.54;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	98.09.16.12.15.47;	author sbrodie;	state Exp;
branches;
next	1.4;

1.4
date	98.02.18.10.33.02;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	98.02.11.19.32.52;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.02.11.11.56.57;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.26;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.26;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@  Made MemCheck stuff optional.
Detail:
  This component wouldn't build in the ROOL release because it required the
  MemCheck library which is a part of the Dr Smiths Toolkit (we can't
  release that). Unfortunately, Dr Smiths was installed in another build on
  the build machine so the dependency wasn't spotted.

  Now this feature is compiled conditionally upon the existence of the
  MemCheck_MEMCHECK symbol at build time.
Admin:
  Tested on IYONIX build machine with clean ROOL build environment.
Notes:
  Changes by Steve Revill.

Version 0.16. Tagged as 'Gopher-0_16'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Gopher (c.module)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include "sys/errno.h"
#include "module.h"
#include "Gopherhdr.h"
#include "processdir.h"
#include "utils.h"
#include "protocol.h"

#ifdef MemCheck_MEMCHECK
#  include "MemCheck:MemCheck.h"
#endif

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

/* TinySupport SWIs.  This does not work if any library static data
 * is used within the module.  This means errno (__errno) and __ctype
 * (as used by any macro call to is.... functions)  If you re-enable
 * this SWI call, this module will fail to work at all.
 */
#define NO_TINYSTUBS

#ifdef ROM
#ifndef NO_TINYSTUBS
static _kernel_oserror *__ROM;
#define TinySupport_Share	(0x82c43)
#define TinySupport_Die		(0x82c41)
#endif
#endif

#define NO_SUCH_SWI	(0x1E6)


#define URL_PROTOCOL_REGISTER 0x83e20
#define URL_PROTOCOL_DEREGISTER 0x83e21

#ifndef ROM
extern int messages_file(void);
#endif

#ifndef ROM
#ifdef DEFINE_ERRNO
int __errno;
#endif
#endif


static int registered;

static _kernel_oserror *try_to_register(void)
{
	_kernel_oserror *e;

	if (registered) return NULL;
	e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0, GopherFetcher_00, "gopher:",
		Module_VersionNumber, Module_Help " © Acorn 1997-8 (Built: " Module_Date ")");
	if (e == NULL) {
		registered = 1;
	}
	return e;
}

static _kernel_oserror *try_to_deregister(void)
{
	if (!registered) {
		return NULL;
	}
	else {
		registered = 0;
		return _swix(URL_PROTOCOL_DEREGISTER, _INR(0,1), 0, GopherFetcher_00);
	}
}

static _kernel_oserror *register_with_url(void)
{
	_kernel_oserror *e;

	e = try_to_register();
	if (e == NULL) return e;
	if (e->errnum != NO_SUCH_SWI) return e;
	#ifndef ROM
	e = _swix(OS_Module, _INR(0,1), 1 /* Load */, "System:Modules.Network.URL.URL");
	return try_to_register();
	#else
	return NULL;
	#endif
}


void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
	#ifdef TRACE
	protocol_debug("Service &%X: R0 = %d for URL version  %03d\n", service_number, r->r[0], r->r[2]);
	#endif
	(void) pw;
	(void) service_number;

	switch (r->r[0]) {
		case 0:
			(void) try_to_register();
			break;
		case 1:
			(void) try_to_deregister();
			break;
		default:
			break;
	}
}

/*************************************************************/
/* _kernel_oserror *module_init(char *cmd_fail, int podu...  */
/*************************************************************/
/* Start up and register ourselves with the URL module	     */
/*************************************************************/
_kernel_oserror *module_init(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
	_kernel_oserror *e;

	(void) podule_base;
	(void) cmd_tail;
	(void) pw;

      	#ifdef ROM
      	#ifndef NO_TINYSTUBS
    	__ROM = _swix(TinySupport_Share, _IN(0), pw);
    	#endif
	#endif

	session_init();

#ifdef MemCheck_MEMCHECK
	MemCheck_InitNoDebug();
	MemCheck_SetQuitting(0,0);
	MemCheck_RedirectToFilename("adfs::4.tmp.Gopher_mem");
	MemCheck_InterceptSCLStringFunctions();
	MemCheck_RegisterMiscBlock((void *)0x01c0001c,8164);  /* StB: wonderful - the SVC stack I presume? */
	MemCheck_SetStoreMallocFunctions(1);
	MemCheck_SetReportFrees(1);
	MemCheck_SetChecking(0,0);
#endif

	registered = 0;
	e = register_with_url();
	if (e) {
		#ifndef ROM
		if (e->errnum == NO_SUCH_SWI) {
			_kernel_oserror *newe = find_error();
			const size_t length = strlen(strcpy(newe->errmess, e->errmess));

			newe->errnum = NO_SUCH_SWI;
			strncat(newe->errmess, " (Load the URL module)", sizeof(newe->errmess) - length);
			return newe;
		}
		#endif
		return e;
	}

	#ifndef ROM
	e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
	if (e) {
		(void) try_to_deregister();
		return e;
	}
	#endif

	if (getenv(Module_Title "$Path")) {
		e = messages_file_open(Module_Title ":Messages");
	}
	else {
		e = messages_file_open("Resources:$.Resources.URL." "Gopher" ".Messages");
	}

	if (e) {
		#ifndef ROM
		(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
		#endif
		(void) try_to_deregister();
		return e;
	}

	gopherdir_init();
	return NULL;
}
/*************************************************************/
/* _kernel_oserror *module_kill(int fatal, int podule, ...   */
/*************************************************************/
/* When we are killed off, deregister ourselves from the URL */
/* module						     */
/*************************************************************/
_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
	(void) podule;
	(void) fatal;
	(void) pw;

	(void) messages_file_close();
	#ifndef ROM
	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
	#endif

	ses_kill_all();
	(void) try_to_deregister();

        #ifdef ROM
        #ifndef NO_TINYSTUBS
    	if(!__ROM) _swix(TinySupport_Die, 0);
    	#endif
	#endif

	return NULL;
}


/*************************************************************/
/* _kernel_oserror *swi_handler(int swi_no, _kernel_swi_...  */
/*************************************************************/
/* Upon a SWI call into this module decide what to do and    */
/* how to do it and all that. Just an excuse for a case	     */
/* statement						     */
/*************************************************************/
_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
	#ifdef TRACE
	{const char *swinames[64] = { "GetData", "Status", "ReadData", "Stop" };
	protocol_debug("\nIn Gopher Swi handler, SWI no %d (%s)\n", swi_no, swinames[swi_no % 64]
	?swinames[swi_no % 64]:"<UNKNOWN!>");
	}
	#endif

	(void) pw;

	switch (swi_no) {
		case GopherFetcher_GetData - GopherFetcher_00: /* Gopher_GetData */
			return(gopher_start(r));

		case GopherFetcher_Status - GopherFetcher_00: /* Gopher_Status */
			return(gopher_status(r));

		case GopherFetcher_ReadData - GopherFetcher_00: /* Gopher_ReadData */
			return(gopher_readdata(r));

		case GopherFetcher_Stop - GopherFetcher_00: /* Gopher_Stop */
			return (gopher_stop(r));

		default:
			return error_BAD_SWI;

	}
}

@


1.6
log
@  32-bit compatible.
  Uses shared fetcher code
Detail:
  Common DNS code, URL client code abstracted out to Common library.
Admin:
  Requires BuildSys 1.94 or later.
  Requires Common 0.01 or later (RiscOS/Sources/Networking/Fetchers/Common)

Version 0.14. Tagged as 'Gopher-0_14'
@
text
@d34 3
a36 1
#include "MemCheck:MemCheck.h"
d159 1
d168 1
@


1.5
log
@Removed TinyStubs stuff for ROM builds (due to __ctype/__errno problem)

Version 0.13. Tagged as 'Gopher-0_13'
@
text
@d32 1
@


1.4
log
@Version number increase for all modules for final Expresso release.
@
text
@d41 7
d49 1
d51 3
d148 4
a151 2
	#ifdef ROM
	__ROM = _swix(0xa2c43, _IN(0), pw);
d227 4
a230 2
	#ifdef ROM
	if(!__ROM) _swix(0xa2c41, 0);
@


1.3
log
@Const-ness of veneers modified on the basis of the CMHG version number to
avoid build problems.
@
text
@d56 1
d58 1
@


1.2
log
@Build process improvements :
* Standardised make process in common with other protocol modules.
* Resources put into standard structure for internationalisation
* Standard !MkClean, !MkRom, !MkRam to build different versions
@
text
@d35 6
d127 1
a127 1
_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
@


1.1
log
@Initial revision
@
text
@d35 4
d45 9
a53 1
extern int resources_area(void);
d62 1
a62 1
		Module_VersionNumber, Module_Help " © Acorn 1997 (Built: " Module_Date ")");
d87 1
d90 3
d129 2
a130 2
	#ifdef TINYSTUBS
	sessions=NULL;
d133 2
d147 1
d156 1
d160 2
a161 1
	e = _swix(ResourceFS_RegisterFiles, _IN(0), resources_area());
d166 8
a174 1
	e = messages_file_open("Resources:$.Resources.GopherFetcher.Messages");
d176 3
a178 1
		(void) _swix(ResourceFS_DeregisterFiles, _IN(0), resources_area());
d199 3
a201 1
	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), resources_area());
d205 5
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
