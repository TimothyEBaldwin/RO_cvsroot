head	1.4;
access;
symbols
	File-0_49:1.4
	File-0_48:1.4
	File-0_47:1.4
	File-0_46:1.3
	File-0_45:1.3
	File-0_44:1.3
	File-0_43:1.3
	File-0_42:1.3
	File-0_41:1.3
	File-0_40:1.2
	File-0_39:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_File_0_37:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2012.04.14.21.06.49;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	2ylzPc3rM6SdAS0w;

1.3
date	2005.06.14.23.10.17;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.06.10.11.15;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.17;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.17;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changed to use MimeMap header file.
Compiles, but not tested.

Version 0.47. Tagged as 'File-0_47'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Example of a fetcher module for use with Acorn URL system
 *
 * © Acorn Computers Ltd. 1995-1998
 *
 */

/*************************************************************/
/* First off a structure!                                    */
/*************************************************************/
/* The session control block. Refered to as "Session *"      */
/*************************************************************/
#include <stdio.h>
#define MAX_RETRIES 2      /* Max times fopen() can fail on a file */

typedef unsigned char byte;

typedef struct session
{
  unsigned int id;         /* Session id */
  char 	       *filename;  /* File name to return */
  signed int   filetype;   /* 12-bits of RISC OS filetype */
  unsigned int size;	   /* File length in bytes */
  unsigned int loadaddr;   /* File load addr field*/
  unsigned int execaddr;   /* File exec addr field */
  unsigned int sent;	   /* size of data sent so far */
  byte	       retries;    /* retries at opening the file */
  byte	       done;	   /* Have we finished? */
  byte	       headers;	   /* Have we sent the headers */
  byte	       headerlen;  /* Length of HTTP header for this file */
  char	       *buffer;    /* Buffer for directory listing */
  unsigned int offset;     /* Amount of buffer already sent */
  struct session *next;
} Session, *SessionReg;

/*************************************************************/
/* Found in ^.c.sess_ctrl                                    */
/*************************************************************/
/* These functions are used to manipulate session control    */
/* structures; find, create and kill sessions	  	     */
/*************************************************************/
extern Session *find_session(unsigned int id);
extern Session *new_session(void);
extern void kill_session(Session *s);
extern void init_sessions(void);

/*************************************************************/
/* Found in ^.c.module                                       */
/*************************************************************/
/* The basic module entry points                             */
/*************************************************************/

/*************************************************************/
/* Found in ^.c.start                                        */
/*************************************************************/
/* Start a file transaction. Connect to the remote host and  */
/* send the requisit data    	     	    	   	     */
/*************************************************************/
_kernel_oserror *file_start(_kernel_swi_regs *r);

/*************************************************************/
/* Found in ^.c.stop                                         */
/*************************************************************/
/* Stop a filel transaction. Connect to the remote host and   */
/* send the requisit data    	     	    	   	     */
/*************************************************************/
_kernel_oserror *file_stop(_kernel_swi_regs *r);

/*************************************************************/
/* Found in ^.c.readdata                                     */
/*************************************************************/
/* Routine to read the result back from a file requestr.     */
/*************************************************************/
_kernel_oserror *file_readdata(_kernel_swi_regs *r);

/*************************************************************/
/* Found in ^.c.processdir                                   */
/*************************************************************/
/* Routine to generate HTML for a directory listing          */
/*************************************************************/
char *file_gen_dir_listing(Session *, char *, char *);

/*************************************************************/
/* Found in ^.c.status                                       */
/*************************************************************/
/* Routine to fake a status request back to the URL module   */
/*************************************************************/
_kernel_oserror *file_status(_kernel_swi_regs *r);

/*************************************************************/
/* Since this is all part and parcle of the URL module, the  */
/* error block has been extracted from that allocated to the */
/* the whole URL project. This makes some sense. Allocation  */
/* from the block can be found in url.h in the URL module    */
/* source tree.	      	       	  	      	      	     */
/*************************************************************/

/*************************************************************/
/* This is the description of the URL module error base and  */
/* where we are within it. We have 15 error messages that    */
/* have been allocated to us. 	      	    	     	     */
/*************************************************************/

#define ERROR_BASE  0x80de00 /* URL module base */
#define FILE_OFFSET 0x000060 /* File module base */

/*************************************************************/
/* So the real error number that we have to return is:       */
/*************************************************************/

#define FILE_ERROR  (ERROR_BASE+FILE_OFFSET)

/*************************************************************/
/* The error message #defines                                */
/*************************************************************/
#define FILE_NOT_FOUND  (FILE_ERROR+0)
#define FILE_READ_ERROR (FILE_ERROR+1)
#define FILE_ZERO_LEN	(FILE_ERROR+2)
@


1.3
log
@	Added 'Last-Modified' header field to File fetcher.
Detail:
	Added Last-Modified header field to returned data for
	files that have a date stamp.Field not added for files
	with real load/exec addresses.
Admin:  Castle added IP. Tested at Castle.. does as expected in
	simple test.


Version 0.41. Tagged as 'File-0_41'
@
text
@a120 2
#define MimeMap_Translate	0x50B00	/* MimeMap SWI base */

@


1.2
log
@  File module can now generate directory listings.
Detail:
  A long forgotten wishlist item that finally got implemented last night.
Admin:
  Tested briefly by browsing around a hard disc or two.

Version 0.40. Tagged as 'File-0_40'
@
text
@d38 2
@


1.1
log
@Initial revision
@
text
@d44 1
d87 7
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
