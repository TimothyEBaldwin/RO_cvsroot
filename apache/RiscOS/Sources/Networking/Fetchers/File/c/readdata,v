head	1.9;
access;
symbols
	File-0_49:1.9
	File-0_48:1.8
	File-0_47:1.7
	File-0_46:1.6
	File-0_45:1.6
	File-0_44:1.6
	File-0_43:1.6
	File-0_42:1.5
	File-0_41:1.4
	File-0_40:1.3
	File-0_39:1.2
	sbrodie_Expresso_final_190298:1.2
	sbrodie_File_0_37:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2018.09.25.17.10.36;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	k8h20GpcDBhVzvTA;

1.8
date	2013.05.26.16.32.32;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	4eCp56xpOXK1Z9Rw;

1.7
date	2012.04.14.21.06.47;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	2ylzPc3rM6SdAS0w;

1.6
date	2005.07.04.10.25.26;	author jballance;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.15.09.00.31;	author jballance;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.14.23.10.17;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.06.10.11.15;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.02.05.12.22.50;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.17;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.17;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fix handle leak on error and string termination
processdir.c: add explicit terminator after strncpy()
readdata.c: don't leak 'fp'
Found by cppcheck static analysis.

Version 0.49. Tagged as 'File-0_49'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Example of a fetcher module for use with Acorn URL system
 *
 * © Acorn Computers Ltd. 1995-1998
 *
 */

/*
 * Handle a request to get data!
 */
#include <stdio.h>	/* file handling */
#include <stdlib.h>	/* for malloc/calloc */
#include "kernel.h"	/* registers */
#include "swis.h"	/* swis */
#include "Interface/MimeMap.h"
#include <string.h>	/* string handling */
#include "module.h"
#include "utils.h"
#include "FileHdr.h"	/* module name etc */

/*************************************************************/
/* _kernel_oserror *file_readdata(_kernel_swi_regs *r)       */
/*************************************************************/
/* The call to get the actual data from a file. The values   */
/* in the registers are:	     	       	       	     */
/*                       r0 = flags word		     */
/*			 r1 = poll word			     */
/* 			 r2 = buffer			     */
/*			 r3 = sizeof(buffer)		     */
/* 			      				     */
/* On exit:						     */
/*                       r0 = protocol status 		     */
/*			 r1 = pollword of client	     */
/*			 r2 = modified buffer		     */
/*			 r3 = unchanged			     */
/*			 r4 = bytes read		     */
/*			 r5 = bytes left (-1 if unknown)     */
/*************************************************************/
_kernel_oserror *file_readdata(_kernel_swi_regs *r)
{
  int *pollword	= (int *)r->r[1];
  char *buffer	= (char *)r->r[2];
  int   size	= r->r[3];

  Session *ses	= NULL;
  int count	= 0;
  FILE *fp;

  /*
   * Check to see session exists and has connected cleanly first
   * If it doesnt/hasnt, reject this request cleanly
   */
  ses = find_session((unsigned int)pollword);
  if (ses==NULL)
  {
    r->r[0]   = 64;   /* Buggy clients beware :) */
    *pollword = 64;
    r->r[4]   = 0;
    r->r[5]   = 0;
    return NULL;
  }

  if (ses->headers==0)
  {
    char mimetype[64], ourbuffer[256];
    _kernel_oserror *e;
    int fiddled_type = 0;
    if (ses->filetype == 0xfe4 || ses->filetype == 0xffd) {
            /* Filetype was DOS (&FE4) or Data (&FFD).  Let's check the leafname */
            char *file_component = strrchr(ses->filename, '.');
            if (file_component == NULL) file_component = strrchr(ses->filename, ':');
            if (file_component == NULL) file_component = ses->filename;

	    /* Look for any extension */
            file_component = strrchr(file_component, '/');
            if (file_component != NULL) {
		    *file_component = '.';
                    e = _swix(MimeMap_Translate, _INR(0,3), 3, file_component, 2, ourbuffer);
                    *file_component = '/';
                    if (e == NULL) {
                            fiddled_type = 1;
                            strncpy(mimetype, ourbuffer, 63);
                    }
            }
    }

    if (ses->filetype == -2) {
	/* special value indicating we want a redirection */
      #define REDIR_STRING "HTTP/1.0 301 Redirect\r\nLocation: %.*s\r\n\r\n"
      ses->headerlen = sprintf(ourbuffer, REDIR_STRING, sizeof(ourbuffer)-sizeof(REDIR_STRING),
      	ses->filename);
      ses->size = 0;
    }
    else if (fiddled_type) {
            /* Do nothing - already copied the guessed type */
    }
    else if ((e = _swix(MimeMap_Translate,_INR(0,3),MMM_TYPE_RISCOS,ses->filetype,MMM_TYPE_MIME,ourbuffer)) == NULL)
      strncpy(mimetype,ourbuffer,63);
    else
    {
  switch (ses->filetype)	/* Decide on an appropriate content type */
      {
        case 0xfff:
          strcpy(mimetype,"text/plain");
          break;
        case 0xfaf:
          strcpy(mimetype,"text/html");
          break;
        case 0xc85:
          strcpy(mimetype,"image/jpeg");
          break;
        case 0xff0:
          strcpy(mimetype,"image/tiff");
          break;
        case 0xb60:
          strcpy(mimetype,"image/png");
          break;
        case 0x695:
          strcpy(mimetype,"image/gif");
          break;
        default:
          strcpy(mimetype,"application/octet-stream");
      }
    }

    /* NOTE: Since headerlen is an unsigned char, this had better not exceed 255 bytes! */
    if (ses->filetype != -2) {
      /* enough room for 'Wed, 15 Jun 2005 00:06:48 GMT\r\n' */
      char datebuf[36] = {0};

      if (ses->loadaddr & 0xfff00000 == 0xfff00000)
      {
        char tbuf[8];
        tbuf[4]=(char)ses->loadaddr&0xff;
        *((int*)(&tbuf[0]))=ses->execaddr;
        /* check if it is reporting BST in UK type time */
        _swix(Territory_ConvertDateAndTime,_INR(0,4),
             1,tbuf,datebuf,sizeof(datebuf),"%TZ");
        if(!strcmp(datebuf,"BST"))
        { /* BST reported .. subtract 1 hour for GMT */
          
          *((long long*)tbuf) -=
          (long long)360000;
        }
        _swix(Territory_ConvertDateAndTime,_INR(0,4),
             1,tbuf,datebuf,sizeof(datebuf),"%W3, %DY %M3 %CE%YR %24:%MI:%SE ");
        strcat(datebuf,"GMT");              
      }
    ses->headerlen = sprintf(ourbuffer,ses->filename?"HTTP/1.0 200 OK\r\nContent-Type: %s\r\nContent-Length: %d\r\n"
        "%s%s%s"
    	"Server: " Module_Title "/" Module_VersionString "\r\n\r\n":"HTTP/1.0 404 Not Found\r\n", mimetype, ses->size,
    	*datebuf?"Last-Modified: ":"",*datebuf?datebuf:"",*datebuf?"\r\n":""
    	);
    }

    r->r[0]   = 31;
    *pollword = 31;

    if (buffer && (size > ses->headerlen))
    {
      strcpy(buffer,ourbuffer);
      r->r[4]      = ses->headerlen;
      r->r[5]      = ses->size;
      ses->headers = 1;
      if (ses->filetype==-2) ses->done=1;
      return NULL;
    }
    else
    {
      r->r[4] = 0;
      r->r[5] = ses->size + ses->headerlen;
      return NULL;
    }
  }

  if (ses->buffer) {
    /* Directory listing pumper */
    unsigned int amount_to_copy = ses->size - ses->offset;
    if (!buffer) {
      r->r[4] = 0;
    }
    else if (amount_to_copy <= size) {
      memcpy(buffer, ses->buffer + ses->offset, amount_to_copy);
      r->r[4] = amount_to_copy;
      r->r[0] = 32;
      *pollword = 32;
      ses->done = 1;
    }
    else {
      memcpy(buffer, ses->buffer + ses->offset, size);
      r->r[4] = size;
    }
    ses->offset += r->r[4];
    r->r[5] = ses->size - ses->offset;
    return NULL;
  }

  fp = fopen(ses->filename,"r");
  /* If we cannot open the file return, decide what to do based on retries */
  if (!fp)
  {
    ses->retries++;
    if (ses->retries >= MAX_RETRIES)
    {
      r->r[0]   = 64+31;   /* Buggy clients beware :) */
      *pollword = 64+31;
      r->r[4]   = 0;
      r->r[5]   = 0;
      ses->done = 2;
      return make_error(FILE_READ_ERROR, 0);
    }
    else
    {
      r->r[0]   = 31;   /* Buggy clients beware :) */
      *pollword = 31;
      r->r[4]   = 0;
      r->r[5]   = ses->size - ses->sent;
      return NULL;
    }
  }

   if (ses->filetype == -2) {
     r->r[4] = 0;
     r->r[5] = 0;
     r->r[0] = 32;
     *pollword = 32;
     ses->done = 1;
     fclose(fp);
     return NULL;
   }

  if (buffer)
  {
    if (ses->sent > 0)		/* Seek the correct position in the file */
      fseek(fp,(long)ses->sent,SEEK_SET);

    count = fread(buffer, sizeof(char), r->r[3], fp);
  }
  else
    count = 0;

  fclose(fp);
  if (count < 0)
    count = 0;

  ses->sent += count;

  r->r[4] = count;
  r->r[5] = ses->size - ses->sent;

  if (r->r[5] <= 0)
  {
    r->r[0]   = 32;
    *pollword = 32;
    ses->done = 1;
  }
  else
  {
    r->r[0]   = 31;
    *pollword = 31;
  }
  return NULL;

}
@


1.8
log
@Remove excess inclusion of <errno.h> or sys/errno.h
Weren't actually being used, therefore no net code change.
Built, but not tested.

Version 0.48. Tagged as 'File-0_48'
@
text
@d242 1
@


1.7
log
@Changed to use MimeMap header file.
Compiles, but not tested.

Version 0.47. Tagged as 'File-0_47'
@
text
@a30 1
#include <errno.h>	/* Include errno variable */
@


1.6
log
@	Updates to ensure that requesting a non existant directory
	returns a not found error rather than an incomplete page.
Detail:
Admin:  jb tested .. will be tested further before any public release
	castle added IP


Version 0.43. Tagged as 'File-0_43'
@
text
@d29 1
d112 1
a112 1
    else if ((e = _swix(MimeMap_Translate,_INR(0,3),0,ses->filetype,2,ourbuffer)) == NULL)
@


1.5
log
@	use Territory SWI for date conversion. Return all modified times
	in GMT only.
Detail:
Admin:  Castle added IP. verified o/p as expected


Version 0.42. Tagged as 'File-0_42'
@
text
@d115 1
a115 1
      switch (ses->filetype)	/* Decide on an appropriate content type */
d144 1
d163 1
a163 1
    ses->headerlen = sprintf(ourbuffer,"HTTP/1.0 200 OK\r\nContent-Type: %s\r\nContent-Length: %d\r\n"
d165 1
a165 1
    	"Server: " Module_Title "/" Module_VersionString "\r\n\r\n", mimetype, ses->size,
a192 1

@


1.4
log
@	Added 'Last-Modified' header field to File fetcher.
Detail:
	Added Last-Modified header field to returned data for
	files that have a date stamp.Field not added for files
	with real load/exec addresses.
Admin:  Castle added IP. Tested at Castle.. does as expected in
	simple test.


Version 0.41. Tagged as 'File-0_41'
@
text
@d142 2
a143 1
      char datebuf[256] = {0};
d149 12
a160 2
        _swix(OS_ConvertDateAndTime,_INR(0,3),
                      tbuf,datebuf,255,"%W3, %DY %M3 %CE%YR %24:%MI:%SE %TZ");
@


1.3
log
@  File module can now generate directory listings.
Detail:
  A long forgotten wishlist item that finally got implemented last night.
Admin:
  Tested briefly by browsing around a hard disc or two.

Version 0.40. Tagged as 'File-0_40'
@
text
@a81 1

d142 9
d152 4
a155 1
    	"Server: " Module_Title "/" Module_VersionString "\r\n\r\n", mimetype, ses->size);
@


1.2
log
@File 0.37.  Issues "301" relocations instead of "303".
Build for Expresso final beta release 5th Feburary 1998
@
text
@d167 23
@


1.1
log
@Initial revision
@
text
@d104 1
a104 1
      #define REDIR_STRING "HTTP/1.0 303 Redirect\r\nLocation: %.*s\r\n\r\n"
d156 1
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
