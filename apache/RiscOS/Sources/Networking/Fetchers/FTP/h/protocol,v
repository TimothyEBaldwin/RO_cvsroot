head	1.4;
access;
symbols
	FTP-0_43:1.4
	FTP-0_42:1.4
	FTP-0_41:1.4
	FTP-0_40:1.4
	dcotton_autobuild_BaseSW:1.3
	FTP-0_39:1.3
	FTP-0_38:1.3
	FTP-0_37:1.3
	FTP-0_36:1.3
	FTP-0_35:1.3
	FTP-0_34:1.3
	FTP-0_33:1.2
	FTP-0_32:1.2
	FTP-0_31-1_4_2_1:1.2
	FTP-0_31:1.2
	FTP-0_30:1.2
	FTP-0_29:1.2
	sbrodie_FTP_0_28:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_FTP_0_26:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2007.09.13.18.24.14;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	98.10.12.14.05.00;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.07.07.12.06.05;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.13;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.13;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Minor tidy-up.
Detail:
  Made cvs version of sources match Batch One release.
Admin:
  No code change.

Version 0.40. Tagged as 'FTP-0_40'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* FTP (h.protocol)
 *
 * © Acorn Computers Ltd. 1996, 1997, 1998
 *
 */

/* This is actually a bit-field used as the return flags value in R0 for
 * various protocol module SWIs.  Some common combinations have been
 * included in the list here too
 */

typedef enum {
	status_NOT_YET_CONNECTED = 0,
	status_CONNECTED_TO_SERVER = 1,
	status_SENT_REQUEST = 2,
	status_SENT_DATA = 4,
	status_WAIT_INITIAL_RESPONSE = 7,
	status_HAVE_INITIAL_RESPONSE = 8,
	status_WAIT_FOR_BODY = 15,
	status_TRANSFER_IN_PROGRESS = 16,
	status_READING_REPLY = 31,
	status_ALL_DATA_RECEIVED = 32,
	status_ABORTED = 64
} network_protocol_status_flags;


typedef enum {
        ftp_INFORMATIONAL	= 1,
        ftp_OK,
        ftp_PENDING,
        ftp_CLIENT_ERROR,
        ftp_SERVER_ERROR
} ftp_protocol_response_code_classes;

#define ftp_class(rc) ((rc)/100)

typedef enum {
	FTP_DISCONNECTED,
	FTP_STATUS_DNS,
	FTP_CONNECTED,

	FTP_GREETING_RECEIVED,
	FTP_SYST_RECEIVED,
	FTP_USER_RESP_RECEIVED,
	FTP_PASS_RESP_RECEIVED,
	FTP_ACCT_RESP_RECEIVED,

	FTP_LOGGED_IN,
	FTP_GOT_PWD_RESP,
	FTP_SEND_CWD_HOME,
	FTP_GOT_CWD_HOME_RESP,
	FTP_INITIATE_COMMAND,

	FTP_DELE_RESP_RECEIVED,
	FTP_MKDIR_RESP_RECEIVED,
	FTP_RMDIR_RESP_RECEIVED,
	FTP_RNFR_RESP_RECEIVED,
	FTP_RNTO_RESP_RECEIVED,

	FTP_CWD_DIR_RESP_RECEIVED,
	FTP_LIST_RESP_RECEIVED,
	FTP_PASV_RESP_RECEIVED,
	FTP_PORT_RESP_RECEIVED,
	FTP_WAIT_DATA_CONNECTION,

	FTP_INITIATE_DIR_TRANSFER,
	FTP_INITIATE_FILE_TRANSFER,

	FTP_STOR_RESP_RECEIVED,
	FTP_RETR_RESP_RECEIVED,
	FTP_DIR_RESP_RECEIVED,
	FTP_SIZE_RESP_RECEIVED,
	FTP_STAT_RESP_RECEIVED,

	FTP_RETR_DIR_RESP_RECEIVED,

	FTP_READ_DATA,
	FTP_READ_DIR_DATA,
	FTP_WRITE_DATA,

	FTP_XFER_RESP_RECEIVED,
	FTP_XFER_DONE_RECEIVED,
	FTP_DIR_XFER_COMPLETE,

	FTP_SENDING_COMMAND,
	FTP_RECEIVING_RESPONSE,
	FTP_RECEIVING_DIR_RESPONSE,

	FTP_PUMPING_CLIENT_RESPONSE,
	FTP_ABOR_RESP_RECEIVED,

	FTP_STATUS_ENDED,
	FTP_STATUS_DEAD,
	FTP_STATUS_ERROR_CREATE,
	FTP_STATUS_ERROR_CONN,
	FTP_STATUS_ERROR_MEM,
	FTP_STATUS_ERROR_WRITE,
	FTP_STATUS_ERROR_CLOSE,
	FTP_STATUS_ERROR_READ,
	FTP_STATUS_ERROR_BADRD,
	FTP_STATUS_TOKEN_NOT_FOUND,
	FTP_STATUS_ERROR_UNEXPECTED

} ftp_fsm_states;


/* Method is NOT a bitfield */
typedef enum {
	method_FTP_RETR		= 1, /* = LIST for directories */
	method_FTP_STOR		= 8,
	method_FTP_MKDIR	= 9,
	method_FTP_RMDIR	= 10,
	method_FTP_RENAME	= 11,
	method_FTP_DELETE	= 12,
	method_FTP_STOU		= 13
} ftp_method_in_r2_codes;

/*************************************************************/
/* A debugging thing; goes to file if the file can be opened */
/*************************************************************/
#pragma -v1
extern void protocol_debug(const char */*format*/, ...);
#pragma -v0
extern void protocol_dump(const char *ptr, int size);

extern const char *ftp_state_name(int);
extern char *protocol_network_states(int status);

#define state_BLOCKING ((_kernel_oserror *)-3)
@


1.3
log
@  Debug messages beautified a bit; several new ones added
  Doesn't unescape the path twice
Detail:
  Missing newlines added to debug statements in several source files
  protocol.h now exports the function which maps state numbers to the
  string describing the state for the benefit of debug functions in
  other source files.
Admin:
  RAM build tested; verified that module works when being requested
  to retrieve data one byte at a time.

Version 0.34. Tagged as 'FTP-0_34'
@
text
@a133 2
/*                                                           */
/*                                                           */
@


1.2
log
@* We've had several reports of servers refusing to use passive connections
  for data sockets.  This is now cured by falling back to using PORT under
  the specific condition of a Permission Denied response to PASV.
  Full details in Docs/ImpDetails.
* Incresed the amount of work done per-ReadData call.  This improves
  performance by reducing the number of times the client has to poll
  for data.
* Module version number now maintained by srccommit.

Version 0.29. Tagged as 'FTP-0_29'
@
text
@d15 1
a15 1
/* Generic (h.protocol)
d17 1
a17 1
 * © Acorn Computers Ltd. 1996-1997
d142 1
a142 1
extern char *protocol_states(int state);
@


1.1
log
@Initial revision
@
text
@d55 1
a55 1
	
d61 1
a61 1
	
d77 2
d82 1
a82 1
	
d88 1
a88 1
	
d90 1
a90 1
	
d94 1
a94 1
	
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
