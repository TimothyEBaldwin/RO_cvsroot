head	1.2;
access;
symbols
	FTP-0_43:1.2
	FTP-0_42:1.2
	FTP-0_41:1.2
	FTP-0_40:1.2
	dcotton_autobuild_BaseSW:1.2
	FTP-0_39:1.2
	FTP-0_38:1.2
	FTP-0_37:1.2
	FTP-0_36:1.2
	FTP-0_35:1.2
	FTP-0_34:1.2
	FTP-0_33:1.1.1.1
	FTP-0_32:1.1.1.1
	FTP-0_31-1_4_2_1:1.1.1.1
	FTP-0_31:1.1.1.1
	FTP-0_30:1.1.1.1
	FTP-0_29:1.1.1.1
	sbrodie_FTP_0_28:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_FTP_0_26:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.10.12.14.04.51;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.10;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.10;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Debug messages beautified a bit; several new ones added
  Doesn't unescape the path twice
Detail:
  Missing newlines added to debug statements in several source files
  protocol.h now exports the function which maps state numbers to the
  string describing the state for the benefit of debug functions in
  other source files.
Admin:
  RAM build tested; verified that module works when being requested
  to retrieve data one byte at a time.

Version 0.34. Tagged as 'FTP-0_34'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * FTP (c.commands)
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 */
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include "kernel.h"
#include "sys/errno.h"
#include "socklib.h"
#include "module.h"
#include "commands.h"
#include "protocol.h"
#include "processdir.h"

/* This function initiates the sending of a command on the command socket.
 * It needs to know the command to send (minus the \r\n) and the state into
 * which to go when the transmission is completed.  Usually this will be
 * immediately, but you never know.  Doing it this way all the time makes
 * the code smaller and less complicated anyway.
 *
 * If "next_state" is negative, then "-next_state" will be entered immediately
 * upon completion of command transmission.  Otherwise, FTP_RECEIVING_RESPONSE
 * is entered and the value of next_state passed on to command_recv as the
 * next state.  Hence, callers can say things like:
 *      commands_send(s, FTP_GOT_SYST_RESPONSE, "SYST")
 * and know that by the time the state moves to FTP_GOT_SYST_REPONSE, the command
 * was sent successfully, and the server's response was received and decoded and
 * can be examined by looking at Session.response_code to determine whether it
 * succeeded or not.
 */
_kernel_oserror *commands_send(Session *session, int next_state, const char *command)
{
        const size_t length = strlen(command);

        #ifdef TRACE
        protocol_debug("commands_send(Session = %p, next_state = %s, command = %s )\n", session,
        	ftp_state_name(next_state), command);
        #endif

	free(session->command.data);
	session->command.data = malloc(length + 2 + 1);
	if (session->command.data == 0) {
	        session->state = FTP_STATUS_ERROR_MEM;
	        return NULL;
	}
        memcpy(session->command.data, command, length);
        session->command.data[length] = '\r';
        session->command.data[length+1] = '\n';
        session->command.data[length+2] = '\0';
        session->command.next_state = next_state;
        session->command.length = length + 2;
        session->command.done = 0;

	session->state = FTP_SENDING_COMMAND;
	session->outstanding_response = 1;

	#ifdef TRACE
	protocol_debug("---> %s\r\rn", command);
	#endif
	return commands_continue_sending(session);
}

/* Specify command and parameters separately */
_kernel_oserror *vcommands_send(Session *session, int next_state, const char *command, const char *params)
{
        const size_t length_command = strlen(command);
        const size_t length_parameters = strlen(params);
        char *full_string;

        #ifdef TRACE
        protocol_debug("vcommands_send(Session = %p, next_state = %s, command = %s %s)\n", session,
        	ftp_state_name(next_state), command, params);
        #endif

        full_string = malloc(length_command + length_parameters + sizeof(" "));
        if (full_string == NULL) {
		session->state = FTP_STATUS_ERROR_MEM;
                return NULL;
        }
        else {
                _kernel_oserror *result;
                memcpy(full_string, command, length_command);
                memcpy(full_string + length_command + 1, params, length_parameters + 1);
                full_string[length_command] = ' ';
                result = commands_send(session, next_state, full_string);
                free(full_string);
                return result;
        }
}

/*
 *  This function is called during state table dispatch to continue pumping out
 *  data to the remote server.  It returns 1 if the pumping operation has completed
 *  and sets the state ready for the continuation of the processing.
 */
_kernel_oserror *commands_continue_sending(Session *s)
{
        int result;
        size_t remaining = s->command.length - s->command.done;

        result = send(s->control_sd, s->command.data + s->command.done, remaining, 0);
        if (result >= 0) {
                s->command.done += result;
                if (s->command.done < s->command.length) {
                        /* Not yet sent the command - it MUST be big :-) */
                        #ifdef TRACE
                        protocol_debug("%d sent of %d total\n", s->command.done, s->command.length);
                        #endif
                        return state_BLOCKING;
                }
                free(s->command.data);
              	s->command.data = NULL;
                if (s->command.next_state < 0) {
                        s->state = -s->command.next_state;
			return NULL;
                }
                return commands_recv(s, s->command.next_state);
        }
        if (errno == ENOTCONN || errno == EWOULDBLOCK) {
                return state_BLOCKING;
        }

        /* Oh dear - a real error */
	s->error_state = s->command.next_state;
	s->state = FTP_STATUS_ERROR_WRITE;
        return NULL;
}


static _kernel_oserror *commands_process_read_line(Session *s)
{
        /* Parse the line.  Currently, we are going to discard the stuff, but we really ought
         * to be saving up directory headers in order to pass them on to our client if required.
         * eg. welcome messages or directory messages.
         */
        const size_t length = strlen(s->response.data);

	#ifdef TRACE
	protocol_debug("<---- %s\r\n", s->response.data);
	#endif

	if (s->response_code == -1) {
                /* First time through.  We MUST have a numeric code on this response */
		if (length < 3) {
	        	/* Oh dear */
	                s->state = FTP_STATUS_ERROR_BADRD;
                	return NULL;
	        }
	        else {
			char *ptr;

			s->response_code = (int) strtoul(s->response.data, &ptr, 10);
			if (ptr != s->response.data +3) {
			        /* We don't think this is a numeric lead */
			        s->state = FTP_STATUS_ERROR_BADRD;
			        return NULL;
			}

			if (s->response_code < 100 || s->response_code > 999) {
                                s->state = FTP_STATUS_ERROR_BADRD;
                                return NULL;
			}
	        }

	        if (s->response.data[3] != '-') {
	                /* Right, this is the one and only line of the response */
			if ((s->response_code % 100) >= 90) {
			        /* Debug information - discard it */
			        s->response_code = -1;
			        return NULL;
			}

	                s->state = s->response.next_state;
	                s->outstanding_response = 0;
	                return NULL;
	        }
		/* We have started a contination line */
		return NULL;
	}

	if (length < 3) {
	        /* Must be part of a nasty continuation line - keep looking */
	        return NULL;
	}
	else {
	        char code[4];

	        sprintf(code, "%d", s->response_code); /* Already know 100<=s->response_code<=999 */
		if (memcmp(s->response.data, code, 3) != 0) {
		        /* Three digit code does not match */
		        return NULL;
		}
	        if (!(s->response.data[3] == '\0' || isspace(s->response.data[3]))) {
	                /* Didn't have the required whitespace character */
	                return NULL;
	        }
		if ((s->response_code % 100) >= 90) {
		        /* Debug - discard it */
		        return NULL;
		}

		s->state = s->response.next_state;
	        return NULL;
	}
}


/* This routine reads textual data from either the control or data connection into
 * the buffer system "data".  By accessing the buffer pointers, lengths, etc.
 * through the pointer, we can use this code for reading directory entries as
 * well as control connection responses.  The routine compares the "data" pointer
 * with the address of s->response to determine which socket to read and how to
 * go about processing the received line of data.
 */
_kernel_oserror *commands_continue_reading(Session *s, ftp_arbitrary_data *data)
{
        size_t buffer_space = data->length - data->done;
        int result;
        const int control = (data == &s->response);
        int sd = control ? s->control_sd : s->data_sd;

	/* Initialise the error state here, because there are too many places where
	 * errors are generated to remember to set it everywhere
	 */
	s->error_state = data->next_state;

	/* If there is no space left in the buffer (this will be the case if the buffer
	 * has not yet been allocated, but since the magic of realloc will magically do
	 * the malloc for us, we do not need to special case that code.
	 */
        if (buffer_space == 0) {
                char *buffer;
                buffer = module_realloc(data->data, data->length + INTERNAL_BUFFER_SIZE + 4);
                if (buffer != NULL) {
                        data->data = buffer;
                        data->length += INTERNAL_BUFFER_SIZE;
                        buffer_space += INTERNAL_BUFFER_SIZE;
                }
                else {
                        s->state = FTP_STATUS_ERROR_MEM;
                        return NULL;
                }
        }

	/* Obtain copy of the data ONLY - we discard the appropriate amount later */
        result = recv(sd, data->data + data->done, buffer_space, MSG_PEEK);
        if (result == 0) {
                if (control) {
                        /* Closing control connection is an error */
	                s->state = FTP_STATUS_ERROR_CLOSE;
        	        return NULL;
        	}
        	else {
        	        /* Closing data connection is end of transfer so switch to next state */
        	        s->state = data->next_state;
			return NULL;
        	}
        }
        else if (result < 0) {
                /* Errors are errors either way, unless we are waiting for connection/data */
                if (errno == ENOTCONN || errno == EWOULDBLOCK) {
                        #ifdef TRACE
                        if (errno == ENOTCONN) {
	                        protocol_debug("recv() -> ENOTCONN - waiting for connection\n");
                        }
                        #endif
                        return state_BLOCKING;
                }
                s->state = FTP_STATUS_ERROR_READ;
                return NULL;
        }
	else {
		/* Seek out a newline character.  More efficient to use memchr than
		 * writing a zero byte and using strchr, especially as we know the
		 * length of the buffer!
		 */
	        char *const eol = memchr(data->data, '\n', data->done + result);

		if (eol == NULL) {
		        /* Have not read a complete line - suck all of the data into the buffer
		         * immediately, and then block until we get called again
		         */
		        (void) recv(sd, data->data + data->done, result, 0);
			data->done += result;
		        return state_BLOCKING;
		}
		else {
			/* Read for real - remembering we've already read "done" bytes previously
		 	 * Errors cannot occur - we've just been told the data is there.
		 	 */
		        const size_t bytes_to_read = (eol + 1 - data->data) - data->done;
	        	(void) recv(sd, data->data + data->done, bytes_to_read, 0);

			/* Terminate buffer, zero counters for next response */
			*eol = '\0';
			data->done = 0;

			if (eol > data->data) {
		        	/* Look for and remove an immediately preceding \r */
		        	if (eol[-1] == '\r') {
		                	eol[-1] = '\0';
			        }
			}
		}

		/* Process this line of data as approproate */
		if (control) {
			return commands_process_read_line(s);
		}
		else {
		        return ftp_process_directory_data(s);
		}
	}
}

/* This function initiates the process of receiving an FTP command response
 * from a remote server.  It performs the read version of commands_send.
 */
_kernel_oserror *commands_recv(Session *session, int next_state)
{
        #ifdef TRACE
        protocol_debug("commands_recv(Session = %p, next_state = %s)\n", session,
        	ftp_state_name(next_state));
        #endif
	session->response.next_state = next_state;
        session->response.length = INTERNAL_BUFFER_SIZE - 4;
	session->response.done = 0;
	session->response_code = -1;
        free(session->response.data);
        session->response.data = malloc(INTERNAL_BUFFER_SIZE);
        if (session->response.data == NULL) {
                session->state = FTP_STATUS_ERROR_MEM;
                return NULL;
        }
        session->state = FTP_RECEIVING_RESPONSE;
        return commands_continue_reading(session, &session->response);
}

/* This function initiates the process of receiving an FTP directory response
 * from a remote server.  It performs the directory read version of commands_send.
 */
_kernel_oserror *commands_recv_dir(Session *session, int next_state)
{
        #ifdef TRACE
        protocol_debug("commands_recv_dir(Session = %p, next_state = %s)\n", session,
        	ftp_state_name(next_state));
        #endif
	session->directory.next_state = next_state;
        session->directory.length = INTERNAL_BUFFER_SIZE - 4;
	session->directory.done = 0;
        free(session->directory.data);
        session->directory.data = malloc(INTERNAL_BUFFER_SIZE);
        if (session->directory.data == NULL) {
                session->state = FTP_STATUS_ERROR_MEM;
                return NULL;
        }
        session->state = FTP_RECEIVING_DIR_RESPONSE;
        return commands_continue_reading(session, &session->directory);
}
@


1.1
log
@Initial revision
@
text
@d52 6
a57 1
	
d76 1
a76 1
	protocol_debug("<--- %s\r\rn", command);
d78 1
a78 1
	return commands_continue_sending(session);	
d82 1
a82 1
_kernel_oserror *vcommands_send(Session *session, int next_state, const char *command, const char *parameters)
d85 1
a85 1
        const size_t length_parameters = strlen(parameters);
d87 6
d101 1
a101 1
                memcpy(full_string + length_command + 1, parameters, length_parameters + 1);
d118 1
a118 1
        
d125 1
a125 1
                        protocol_debug("%d sent total, %d total to send\n", s->command.done, s->command.length);
d157 1
a157 1
	protocol_debug("---> %s\r\n", s->response.data);
d169 1
a169 1
			
d176 1
a176 1
			
d190 1
a190 1
			
d198 1
a198 1
	
d205 1
a205 1
	        
d219 1
a219 1
		
d244 1
a244 1
        
d262 1
a262 1
        
d280 5
d325 1
a325 1
		if (control) {		
d339 4
d362 4
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
