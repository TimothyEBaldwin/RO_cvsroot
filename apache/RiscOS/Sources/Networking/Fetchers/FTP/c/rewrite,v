head	1.2;
access;
symbols
	FTP-0_43:1.2
	FTP-0_42:1.2
	FTP-0_41:1.2
	FTP-0_40:1.2
	dcotton_autobuild_BaseSW:1.2
	FTP-0_39:1.2
	FTP-0_38:1.2
	FTP-0_37:1.2
	FTP-0_36:1.2
	FTP-0_35:1.2
	FTP-0_34:1.2
	FTP-0_33:1.2
	FTP-0_32:1.1.1.1
	FTP-0_31-1_4_2_1:1.1.1.1
	FTP-0_31:1.1.1.1
	FTP-0_30:1.1.1.1
	FTP-0_29:1.1.1.1
	sbrodie_FTP_0_28:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_FTP_0_26:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.10.09.16.04.10;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.11;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.11;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@FTP module now removes hex encodings from usernames, passwords,
accounts and paths.  Allows passwords containing encoded characters
such as @@ (coded as %40) to work properly.

Version 0.33. Tagged as 'FTP-0_33'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * FTP (c.rewrite)
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "module.h"
#include "protocol.h"
#include "processdir.h"
#include "rewrite.h"
#include "servertype.h"
#include "generic.h"


/* These functions rewrite a given path to ensure that it meets the server's idea
 * of what a fully qualified path should look like.  It means that we can talk to
 * various different types of machine and yet still use an optimised form of full
 * pathnames in order to increase speed.
 *
 * Stores new pointer in *dest and returns that value too.  Source string is not
 * free'd or touched.
 */
static char *ftp_rewrite_path_unix(Session *s, const char *source, char **dest);
static char *ftp_rewrite_path_vms(Session *s, const char *source, char **dest);

char *ftp_rewrite_path(Session *s, const char *source, char **dest)
{
	switch (s->server_type) {
		case ftp_server_VMS:
			return ftp_rewrite_path_vms(s, source, dest);
		default:
			return ftp_rewrite_path_unix(s, source, dest);
	}
}

/* UNIX systems.  Fortunately, these correspond strongly with URL formats.
 * This makes this function less complex than the others.
 */

static char *ftp_rewrite_path_unix(Session *s, const char *source, char **dest)
{
	size_t length = strlen(source);

	free(*dest);

	if (length == 0) {
		*dest = Strdup("");
	}
	else {
		if (source[length-1] == '/') {
		        s->is_dir = 1;
		        --length;
		}
		else {
                        s->is_dir = 0;
		}

		*dest = malloc(length+1);
		if (*dest != NULL) {
		        memcpy(*dest, source, length);
		        (*dest)[length] = '\0';
			ftp_remove_hex_encoding(*dest);
		}

	}

	return *dest;
}

static char *ftp_rewrite_path_vms(Session *s, const char *source, char **dest)
{
	char *copy = ftp_rewrite_path_unix(s, source, dest);

	if (copy == NULL) {
	        return NULL;
	}
	else if (copy[0] == '\0') {
                return copy;
	}
	else {
		*dest = malloc(strlen(copy) + 4);
		if (*dest == NULL) {
		        free(copy);
                        return NULL;
		}
		else {
			char *ptr;
			sprintf(*dest, "[/%s]", copy);
			for (ptr = *dest; *ptr; ++ptr) {
                        	if (*ptr == '/') {
                                	*ptr = '.';
	                        }
			}

			free(copy);
			return *dest;
		}
	}
}


static int hex_value(const char x)
{
        if (isdigit(x)) return x - '0';
        return tolower(x) + 10 - 'a';
}

void ftp_remove_hex_encoding(char *path)
{
        char *dest = path;

        while (*path) {
                if (*path != '%') {
                        *dest++ = *path++;
                }
                else {
                        const char hex_hi = path[1];
                        const char hex_lo = path[2];

                        if (isxdigit(hex_hi) && isxdigit(hex_lo)) {
				const int c = (hex_value(hex_hi) << 4) | hex_value(hex_lo);
				if (c >= ' ' && c != '\x7F') {
	                                *dest ++ = c;
	                                path += 3;
	                                continue;
	                        }
                        }
                        *dest++ = *path++;
                }
        }

        *dest = '\0';
}
@


1.1
log
@Initial revision
@
text
@a33 2
static void ftp_unescape_path(char *);

d64 1
a64 1
	
d76 1
a76 1
		
d81 1
a81 1
			ftp_unescape_path(*dest);
d83 1
a83 1
		
d113 1
a113 1
		
d127 1
a127 1
static void ftp_unescape_path(char *path)
d130 1
a130 1
        
d138 1
a138 1
                        
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
