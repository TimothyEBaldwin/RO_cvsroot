head	1.2;
access;
symbols
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.02.11.12.02.38;	author sbrodie;	state dead;
branches;
next	1.1;

1.1
date	98.01.29.18.32.11;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.11;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Build process improvements :
* Standardised make process in common with other protocol modules.
* Resources put into standard structure for internationalisation
* Standard !MkClean, !MkRom, !MkRam to build different versions
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Small quick and ready test of the FTP module.
 * © Acorn Computers Ltd. 1996-1997
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include "sys/errno.h"
#include "module.h"

#define URLBASE 0x83e00
#define URLREG  URLBASE
#define URLGET  URLBASE+1
#define URLSTAT URLBASE+2
#define URLREAD URLBASE+3
#define URLSETP URLBASE+4
#define URLSTOP URLBASE+5
#define URLDERE URLBASE+6

int main(int argc, char *argv[])
{
  _kernel_swi_regs r;
  char *url_to_get=argc>1?argv[1]:"ftp://ftp.acorn.co.uk/pub/";
  char *buffer;

  int pollword;

  buffer=calloc(10240,1);

  r.r[0] = 0;
  _kernel_swi(URLREG,&r,&r);
  pollword=r.r[1];

  r.r[0]=0;
  r.r[1]=pollword;
  r.r[2]=1;
  r.r[3]=(int)url_to_get;
  r.r[4]=0;
  r.r[5]=0;
  _kernel_swi(URLGET,&r,&r);

keep_trying:

  r.r[0]=0;
  r.r[1]=pollword;
  r.r[2]=(int)buffer;
  r.r[3]=10240;
  _kernel_swi(URLREAD,&r,&r);

  printf("Registers:\n R0=%d\n*R1=%d\n R4=%d\nR5=%d",
  		       r.r[0],*(int *)r.r[1],r.r[4],r.r[5]);

  if ((r.r[4] == 0) && (r.r[0] <= 31)) goto keep_trying;

  buffer[r.r[4]]='\0';
  printf("Dataread:\n>>>>%s<<<<\n",buffer);

  if (r.r[0] <= 31) goto keep_trying;

  r.r[1]=pollword;
  _kernel_swi(URLDERE,&r,&r);
  return 0;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
