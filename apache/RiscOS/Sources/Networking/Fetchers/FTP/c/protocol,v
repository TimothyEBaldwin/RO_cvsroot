head	1.2;
access;
symbols
	FTP-0_43:1.2
	FTP-0_42:1.2
	FTP-0_41:1.2
	FTP-0_40:1.2
	dcotton_autobuild_BaseSW:1.2
	FTP-0_39:1.2
	FTP-0_38:1.2
	FTP-0_37:1.2
	FTP-0_36:1.2
	FTP-0_35:1.2
	FTP-0_34:1.2
	FTP-0_33:1.1.1.1
	FTP-0_32:1.1.1.1
	FTP-0_31-1_4_2_1:1.1.1.1
	FTP-0_31:1.1.1.1
	FTP-0_30:1.1.1.1
	FTP-0_29:1.1.1.1
	sbrodie_FTP_0_28:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_FTP_0_26:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.10.12.14.04.53;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.11;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.11;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Debug messages beautified a bit; several new ones added
  Doesn't unescape the path twice
Detail:
  Missing newlines added to debug statements in several source files
  protocol.h now exports the function which maps state numbers to the
  string describing the state for the benefit of debug functions in
  other source files.
Admin:
  RAM build tested; verified that module works when being requested
  to retrieve data one byte at a time.

Version 0.34. Tagged as 'FTP-0_34'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generic (c.protocol)
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 */
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <ctype.h>
#include" protocol.h"

#ifdef TRACE
#ifdef USE_SYSLOG
#include "<syslog$dir>.C-veneer.h.syslog"
#endif
#endif

/*************************************************************/
/* static void protocol_debug(const char *format, ...	     */
/*************************************************************/
/* Output trace information to the TRACE_FILE		     */
/*************************************************************/
#ifdef TRACE
void protocol_debug(const char *format, ...)
{
	#ifdef TRACE
	if (getenv("NoTrace$FTP")) return; else {
		va_list ap;
		#ifdef USE_SYSLOG
		static char buffer[1024];
		va_start(ap, format);
		vsprintf(buffer, format, ap);
		va_end(ap);
		(void) xsyslog_logmessage("FTP", buffer, 100);
		#else
		FILE *fp = fopen("ADFS::4.$.Trace.ProtoFTP", "a");

		if (fp != 0) {
			va_start(ap, format);
			(void) vfprintf(fp, format, ap);
			va_end(ap);
			fclose(fp);
		}
		#endif
	}
	#else
	(void) format;
	#endif
}
#endif


#ifdef TRACE

#ifndef USE_SYSLOG
static char *filter(char *buf, const char *ptr, int max)
{
	int i;
	for (i=0; i<=max; ++i) {
		int p = ptr[i];
		if (p<32 || p == 127) buf[i] = '.'; else buf[i] = p;
	}
	buf[i] = '\0';
	return buf;
}
#endif

void protocol_dump(const char *ptr, int size)
{
	#ifdef TRACE
	if (getenv("NoTrace$FTP") || getenv("NoTrace$FTPRaw")) return; else {
		#ifdef USE_SYSLOG
		(void) xsyslog_logdata("FTP", 100, ptr, size, 0);
		#else
		FILE *fp = fopen("ADFS::4.$.Trace.ProtoFTP", "a");
		if (fp != NULL) {
			int ctr;
			char buf[48];
			fprintf(fp, "%08x: ", 0);
			for (ctr=0; ctr<size; ++ctr) {
				fprintf(fp, "%02x ", ptr[ctr]);
				if ((ctr & 31) == 31) {
					fprintf(fp, "  %s",
						filter(buf, ptr+(ctr & ~31), ctr & 31));
					fprintf(fp, "\n%08x: ", ctr+1);
				}
			}
			if (ctr & 31) {
				const char *start = ptr + (ctr & ~31);
				while (ctr & 31) {
					fprintf(fp, "   ");
					++ctr;
				}
				fprintf(fp, "  %s", filter(buf, start, (size & 31)-1));
			}
			fputc('\n', fp);
			fclose(fp);
		}
		#endif
	}
	#else
	(void) ptr;
	(void) size;
	#endif
}
#endif

#ifdef TRACE
char *protocol_network_states(int status)
{
	switch (status) {
		case status_NOT_YET_CONNECTED: return "status_NOT_YET_CONNECTED";
		case status_CONNECTED_TO_SERVER: return "status_CONNECTED_TO_SERVER";
		case status_SENT_REQUEST: return "status_SENT_REQUEST";
		case status_SENT_DATA: return "status_SENT_DATA";
		case status_WAIT_INITIAL_RESPONSE: return "status_WAIT_INITIAL_RESPONSE";
		case status_HAVE_INITIAL_RESPONSE: return "status_HAVE_INITIAL_RESPONSE";
		case status_WAIT_FOR_BODY: return "status_WAIT_FOR_BODY";
		case status_TRANSFER_IN_PROGRESS: return "status_TRANSFER_IN_PROGRESS";
		case status_READING_REPLY: return "status_READING_REPLY";
		case status_ALL_DATA_RECEIVED: return "status_ALL_DATA_RECEIVED";
		case status_ABORTED: return "status_ABORTED";

		default:
		{
		        static char charbuf[16];
		        sprintf(charbuf, "&%08X", status);
		        return charbuf;
		}
	}
}
#endif
@


1.1
log
@Initial revision
@
text
@a123 8
char *protocol_states(int state)
{
	(void) state;
	return "Lookup Not Implemented";
}
#endif

#ifdef TRACE
d138 1
a138 1
		
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
