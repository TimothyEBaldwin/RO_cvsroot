head	1.4;
access;
symbols
	FTP-0_43:1.4
	FTP-0_42:1.3
	FTP-0_41:1.3
	FTP-0_40:1.3
	dcotton_autobuild_BaseSW:1.3
	FTP-0_39:1.3
	FTP-0_38:1.3
	FTP-0_37:1.3
	FTP-0_36:1.3
	FTP-0_35:1.3
	FTP-0_34:1.3
	FTP-0_33:1.2
	FTP-0_32:1.2
	FTP-0_31-1_4_2_1:1.2
	FTP-0_31:1.2
	FTP-0_30:1.2
	FTP-0_29:1.2
	sbrodie_FTP_0_28:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_FTP_0_26:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.05.26.16.27.32;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	EXXUJhkUPgKjX9Rw;

1.3
date	98.10.12.14.04.56;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.07.07.12.05.59;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.11;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.11;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove excess inclusion of <errno.h> or sys/errno.h
Built, but not tested.

Version 0.43. Tagged as 'FTP-0_43'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * FTP (c.ses_ctrl)
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "socklib.h"
#include "module.h"
#include "protocol.h"
#include "utils.h"
#include "generic.h"
#include "FTPhdr.h"

/*
 * This file contains the routines needed to manipulate sessions
 * within the contect of multiple clients of the module.
 */

static Session *session_list = NULL;
static Connection *connection_list = NULL;

/*************************************************************/
/* Session *find_session(unsigned int id)		     */
/*************************************************************/
/* Given a session ID, return the session control block	     */
/* associated with it.					     */
/*************************************************************/
Session *find_session(unsigned int id)
{
	Session *session;

	for (session = session_list; session; session = session->next) {
		if (session->id == id) return session;
	}

	return NULL;
}

/*************************************************************/
/* Session *new_session(void)				     */
/*************************************************************/
/* Create a new session, taking into account starting the    */
/* sessions list					     */
/*************************************************************/
Session *new_session(void)
{
	Session *ses = calloc(1, sizeof(Session));

	if (ses == NULL) {
		return ses;
	}

	if (session_list == NULL) {
		/* no list so create a new one */
		session_list = ses;
	}
	else {
		/* else find end of list and add an element */
		Session *s;

		for (s=session_list; s->next; s=s->next) ;;
		s->next = ses;
	}

	return ses;
}

/* This function frees up any of the data associated with a dying
 * session.  This ensures that all such freeing up is centralised
 */
static Session *kill_session_data(Session *s)
{
	Session *result = s->next;

	if (s->control_sd != -1) {
		(void) close_socket(&s->control_sd);
	}
	if (s->data_sd != -1) {
		(void) close_socket(&s->data_sd);
	}
	if (s->listen_sd != -1) {
	        (void) close_socket(&s->listen_sd);
	}

	free(s->uri);
	free(s->url);
	free(s->host);
	free(s->user);
	free(s->pass);
	free(s->acct);
	free(s->home);
	free(s->target_name);
	free(s->command.data);
	free(s->client_pump.data);
	free(s->response.data);
	free(s->directory.data);
	free(s->put_data.data);
	free(s->rename_name);
	free(s->rename_uri);

	memset(s, '\0', sizeof(*s)); /* Let's be careful */
	free(s);

	return result;
}

/*************************************************************/
/* void kill_session(Session *s)			     */
/*************************************************************/
/* Given the location of the session block, delete the	     */
/* session cleanly, taking into account the session next     */
/* pointers and any memory associated with it		     */
/*************************************************************/
void kill_session(Session *s)
{
	Session *ses = session_list, *prev_ses = NULL;

	for (ses = session_list; ses; prev_ses = ses, ses = ses->next) {
		if (ses == s) {
			Session *const next = kill_session_data(s);
			if (prev_ses == NULL) {
				session_list = next;
			}
			else {
				prev_ses->next = next;
			}
			break;
		}
	}

	#ifdef TRACE
	protocol_debug("kill_session %p completed.  Dump of session chain\n", s);
	for (ses=session_list; ses; ses=ses->next) {
		protocol_debug("%p (socket %d) URL %s\n", ses, ses->control_sd, ses->url);
	}
	protocol_debug("End of session chain\n\n");
	#endif
}

/*************************************************************/
/* void ses_kill_all(void)				     */
/*************************************************************/
/* A small routine to kill off all sessions at module shut-  */
/* down.						     */
/*************************************************************/
void ses_kill_all(void)
{
	while (session_list) {
		kill_session(session_list);
	}
}

#ifdef TRACE
static void dump_connection_chain(void)
{
        Connection *c;

	protocol_debug("Start of connection chain\n");
	for (c = connection_list; c; c=c->next) {
		protocol_debug("%p (socket %d) host %s:%d user %s home `%s'\n", c, c->control_sd,
			c->host, c->port, c->user ? c->user : "<ANON>", c->home ? c->home : "<NULL>");
	}
	protocol_debug("End of connection chain\n\n");
}

#endif

/*************************************************************/
/* void kill_connection(Session *s)				*/
/*************************************************************/
/* Given the location of the session block, delete the	     */
/* session cleanly, taking into account the session next     */
/* pointers and any memory associated with it		     */
/*************************************************************/
void kill_connection(Connection *co)
{
	Connection *c = connection_list, *prev_c = NULL;

	for (c = connection_list; c; prev_c = c, c = c->next) {
		if (c == co) {
			Connection *const next = co->next;
			(void) close_socket(&co->control_sd);
			free(co->user);
			free(co->home);
			free(co->host);
			free(co);
			if (prev_c == NULL) {
				connection_list = next;
			}
			else {
				prev_c->next = next;
			}
			break;
		}
	}

	#ifdef TRACE
	protocol_debug("kill_connection %p completed.  Dump of connection chain\n", co);
	dump_connection_chain();
	#endif

}

/*************************************************************/
/* Session *find_connection(Session *ses, char *host, int port)*/
/*************************************************************/
/* Given a host and port, set up a session control block with */
/* an established connection, if one exists.		      */
/*************************************************************/
int find_connection(Session *ses, const char *host, const int port, const char *user)
{
	Connection *c;

	for (c = connection_list; c; c=c->next) {
	        if (c->port != port) continue;
	        if (c->user != NULL) {
	                if (user == NULL) continue;
	                if (strcmp(c->user, user) != 0) continue;
	        }
	        else {
	                if (user != NULL) {
	                        if (Strcmp_ci(user, "ftp") != 0 && Strcmp_ci(user, "anonymous") != 0) {
	                                /* Trap these "special" usernames */
	                                continue;
	                        }
	                }
	        }
		if (Strcmp_ci(c->host, host) == 0) {
			#ifdef TRACE
			protocol_debug("Reusing socket %d to %s:%d\n", c->control_sd, c->host, c->port);
			#endif
			ses->control_sd = c->control_sd;
			free(ses->home);
			ses->home = c->home;
			ses->server_type = c->server_type;
			ses->connectionflags = c->flags;
			c->home = NULL;
			c->control_sd = -1;
			kill_connection(c);
			return 1;
		}
	}

	#ifdef TRACE
	protocol_debug("Didn't find existing connection to %s:%d\n", host, port);
	#endif

	return 0;
}

/*************************************************************/
/* Connection *new_connection(Session *ses)		     */
/*************************************************************/
/* Transfer a session into the spare connection list	     */
/*************************************************************/
Connection *new_connection(Session *ses)
{
	if (ses->control_sd == -1 || !ses->cacheable) {
		return NULL;
	}
	else {
		Connection *const c = calloc(1, sizeof(Connection));
		if (c != NULL) {
			_swix(OS_ReadMonotonicTime, _OUT(0), &c->last_use);
			c->control_sd = ses->control_sd;
			ses->control_sd = -1;
			c->host = ses->host;
			ses->host = NULL;
			c->port = ses->port;
			c->user = ses->user;
			ses->user = NULL;
			c->home = ses->home;
			ses->home = NULL;
			ses->cacheable = 0;
			c->next = connection_list;
			c->server_type = ses->server_type;
			c->flags = ses->connectionflags;
			connection_list = c;
			#ifdef TRACE
			protocol_debug("new_connection completed.  Dump of connection chain\n");
			dump_connection_chain();
			#endif
		}
		return c;
	}
}

void init_sessions(void)
{
	session_list = NULL;
	connection_list = NULL;
}

void conn_kill_all(void)
{
        while (connection_list != NULL) {
                kill_connection(connection_list);
        }
}

Connection *find_first_connection(void)
{
        return connection_list;
}

Session *find_first_session(void)
{
        return session_list;
}
@


1.3
log
@  Debug messages beautified a bit; several new ones added
  Doesn't unescape the path twice
Detail:
  Missing newlines added to debug statements in several source files
  protocol.h now exports the function which maps state numbers to the
  string describing the state for the benefit of debug functions in
  other source files.
Admin:
  RAM build tested; verified that module works when being requested
  to retrieve data one byte at a time.

Version 0.34. Tagged as 'FTP-0_34'
@
text
@a26 1
#include "sys/errno.h"
@


1.2
log
@* We've had several reports of servers refusing to use passive connections
  for data sockets.  This is now cured by falling back to using PORT under
  the specific condition of a Permission Denied response to PASV.
  Full details in Docs/ImpDetails.
* Incresed the amount of work done per-ReadData call.  This improves
  performance by reducing the number of times the client has to poll
  for data.
* Module version number now maintained by srccommit.

Version 0.29. Tagged as 'FTP-0_29'
@
text
@d251 1
a251 1
			protocol_debug("Reusing socket %d to %s:%d", c->control_sd, c->host, c->port);
d266 1
a266 1
	protocol_debug("Didn't find existing connection to %s:%d", host, port);
@


1.1
log
@Initial revision
@
text
@d102 3
d178 1
a178 1
        
d257 1
d298 1
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
