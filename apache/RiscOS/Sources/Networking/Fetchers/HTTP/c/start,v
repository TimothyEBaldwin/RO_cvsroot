head	1.9;
access;
symbols
	HTTP-1_00:1.9
	HTTP-0_99:1.8
	HTTP-0_98:1.8
	HTTP-0_97:1.7
	HTTP-0_96:1.7
	HTTP-0_95:1.7
	HTTP-0_94:1.7
	HTTP-0_93:1.7
	HTTP-0_92:1.7
	HTTP-0_91:1.7
	HTTP-0_90:1.7
	HTTP-0_89:1.7
	HTTP-0_88:1.7
	dcotton_autobuild_BaseSW:1.7
	HTTP-0_87:1.7
	HTTP-0_86:1.7
	HTTP-0_85:1.6
	HTTP-0_84:1.5
	HTTP-0_83:1.5
	sbrodie_HTTP_0_82:1.5
	sbrodie_HTTP_0_81:1.5
	sbrodie_HTTP_0_80:1.5
	sbrodie_HTTP_0_79:1.5
	sbrodie_HTTP_0_78:1.3
	sbrodie_HTTP_0_77:1.3
	sbrodie_HTTP_0_76:1.2
	sbrodie_Expresso_final_190298:1.2
	sbrodie_HTTP_0_73:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2018.09.25.17.17.57;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	CVj93RyBuh7rCvTA;

1.8
date	2018.05.19.09.28.50;	author rool;	state Exp;
branches;
next	1.7;
commitid	RYc3OcNBKyzAaTCA;

1.7
date	99.05.20.10.56.22;	author sbrodie;	state Exp;
branches;
next	1.6;

1.6
date	99.02.15.15.58.38;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	98.03.31.13.35.38;	author sbrodie;	state Exp;
branches;
next	1.4;

1.4
date	98.03.31.11.05.13;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	98.03.19.17.37.00;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.02.11.10.51.56;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.30;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.30;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fix possible NULL pointer dereference, add clarity
decompress.c: remove double assignment to ses->compression, let it fall through
start.c: don't dereference 'ses' until after the check for it being NULL
Found by cppcheck static analysis.

Version 1.00. Tagged as 'HTTP-1_00'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * HTTP (c.start)
 *
 * © Acorn Computers Ltd. 1997-1998
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "sys/errno.h"
#include "module.h"
#include "HTTPHdr.h"
#include "socklib.h"
#include "protocol.h"
#include "cookie.h"
#include "netdb.h"
#include "header.h"
#include "hosttrack.h"
#include "generic.h"
#include "URLstruct.h"
#include "URLclient.h"
#include "security.h"
#include "connect.h"

static int http_generate_request(Session *ses, _kernel_swi_regs *r);
static Session *http_new_session(_kernel_swi_regs *r);
static int http_connect(Session *ses);
static const char *http_method_text(const int);
static int http_parse_url(Session *ses, char *proxy);
static _kernel_oserror *http_start_main(_kernel_swi_regs *r);

/*************************************************************/
/* _kernel_oserror http_start(_kernel_swi_regs *r)	     */
/*************************************************************/
/* The call to start getting data from a site. The values in */
/* ther registers are:					     */
/*  r0 = Flags word					     */
/*  r1 = pollword of client				     */
/*  r2 = method to use					     */
/*  r3 = url to get					     */
/*  r4 = additional data for put etc			     */
/*  r5 = data wanted back				     */
/*  r6 = pointer to user agent string (if R0:0 set)	     */
/* On exit:						     */
/*  r0 = Protocol status				     */
/*************************************************************/
_kernel_oserror *http_start(_kernel_swi_regs *r)
{
        r->r[0] &= ~flags_USING_HTTPS;
        return http_start_main(r);
}

_kernel_oserror *https_start(_kernel_swi_regs *r)
{
        r->r[0] |= flags_USING_HTTPS;
        return http_start_main(r);
}


static _kernel_oserror *http_start_main(_kernel_swi_regs *r)
{
	int flags	= r->r[0];
	int *pollword	= (int *)r->r[1];
	int method	= r->r[2];
	char *url	= (char *)r->r[3];
	char *data	= (char *)r->r[4];
	char *agent	= (char *)r->r[6];
	char *proxy	= (char *)r->r[7];
	Session *ses;

	int	error;

	#ifdef TRACE
	protocol_debug("HTTP_Start for `%s'\n", url);
	protocol_debug("Data pointer is %p; R0=&%08x R2=%d; R5=%d; R3=%d\n",
		data, r->r[0], r->r[2], r->r[5], r->r[3]);
	#endif

	/* Check to see if this session already exists before doing anything */
	if (find_session((unsigned int)pollword) != NULL) {
		return return_error(HTTP_ERROR_BADSESSION);
	}

	/* Create a session control block */
	ses = http_new_session(r);
	if (ses == NULL) {
		return return_error(HTTP_ERROR_BADSESSION);
	}

	ses->flags = flags;
	if (flags & flags_USING_HTTPS) {
	        ses->op = security_get_ssl_vtable();
	}
	else {
	        ses->op = security_get_normal_vtable();
	}

	if (flags & flags_DATA_LENGTH_IN_R5) {
		/* Pull the bits out of R2 instead and mask them out */
		ses->data_wanted = (method >> 8) & 0xFF;
		method = method & 0xFF;
	}
	else {
		ses->data_wanted = r->r[5] & 0xFF;
	}

	if (http_method_text(method) == NULL) {
		kill_session(ses);
		return return_error(HTTP_ERROR_BAD_METHOD);
	}

	/* Start sending the request if we can */
	if (flags & flags_DATA_LENGTH_IN_R5) {
		ses->data_len = r->r[5];
	}
	else {
		if (data != NULL) {
			ses->data_len = strlen(data);
		}
		else {
			ses->data_len = 0;
		}
	}

	#ifdef TRACE
	protocol_debug("ses->data_len = %d\n", ses->data_len);
	#endif

	if (ses->data_len > 0) {
		ses->data = malloc(ses->data_len+1);
		if (ses->data == NULL) {
			kill_session(ses);
			return return_error(HTTP_ERROR_INIT_ERR);
		}
		memcpy(ses->data, data, ses->data_len);
		/* We zero terminate the buffer for safety */
		ses->data[ses->data_len] = '\0';
	}
	else {
		ses->data = NULL;
	}

	ses->url = Strdup(url);
	ses->method = method;

	/* This routine validates the characters in the User-Agent and removes
	 * anything nasty looking.  ß is replaced by B since some servers
	 * (incorrectly) die or become very confused by its presence
	 */
	if ((flags & flags_USER_AGENT_IN_R6) && (agent != NULL)) {
		char *ag;
		char *our_ua_string = http_generate_agent();

		if (*agent != NULL) {
			if (our_ua_string == NULL || strstr(agent, our_ua_string) != NULL) {
				ses->agent = Strdup(agent);
			}
			else {
				const size_t our_ua_len = 1 + strlen(our_ua_string) + 1;
				const size_t their_ua_len = strlen(agent);

				ses->agent = malloc(their_ua_len + our_ua_len);
				if (ses->agent != NULL) {
					memcpy(ses->agent, agent, their_ua_len);
					ses->agent[their_ua_len] = ' ';
					memcpy(ses->agent + their_ua_len + 1, our_ua_string, our_ua_len - 1);
				}
			}
		}
		/* This is a hack to get around broken servers who don't like top-bit set characters
		 * appearing in headers.  This this code will replace such chars with a space (and ß with B)
		 */
		if (ses->agent != NULL) {
			for (ag = ses->agent; *ag; ++ag) {
				if (*ag == 'ß') *ag = 'B';
				else if (*ag > 0x7E || !isprint(*ag)) *ag = ' ';
			}
		}
	}

	if (ses->agent == NULL) {
		ses->agent = Strdup(http_generate_agent());
	}

	if (!(flags & flags_PROXY)) {
	        proxy=NULL;
	}

	if (http_parse_url(ses,proxy) != 0) {
		kill_session(ses);
		return return_error(HTTP_ERROR_NO_PARSE);
	}

	if (http_generate_request(ses, r) == 0) {
		kill_session(ses);
		return return_error(HTTP_ERROR_BADSESSION);
	}

	error = http_connect(ses);

	if (ses->done < HTTP_SENDING_REQUEST) {
		r->r[0] = status_NOT_YET_CONNECTED;
	}
	else if (ses->done < HTTP_RECEIVING) {
		r->r[0] = status_WAIT_INITIAL_RESPONSE;
	}
	else if (ses->done > HTTP_ERROR_NOLINK) {
		r->r[0] = status_ABORTED;
	}

	if (ses->done < HTTP_CONNECT_TIMED_OUT) return NULL;
	return return_error(ses->done);
}

/*************************************************************/
/* static void http_get_request(char *url, char **host, ...  */
/*************************************************************/
/* Given a null terminated string containing a URL, extract  */
/* the host name, port and URI to get. The URI portion needs */
/* to be intelligent enough to know if it is actually a URL  */
/* That is, it needs to spot if it is being used as in proxy */
/* request mode	and thus strip any initial '/' from the URI. */
/*************************************************************/
static void http_get_request(Session *ses, const char *url, char **host, int *port, char **uri)
{
	URL		u;
	_kernel_oserror	*e;
	int		i;
	size_t		path_len, query_len;

	*uri = NULL;
	*host = NULL;
	*port = (ses->flags & flags_USING_HTTPS) ? CONNECT_DEFAULT_PORT_NUMBER2:CONNECT_DEFAULT_PORT_NUMBER;

	e = URL_find_lengths(0, url, NULL, &u);
	if (e) {
		#ifdef TRACE
		protocol_debug("http_get_request> URL_find_lengths> %s\n", e->errmess);
		#endif
		return;
	}

	path_len = u.lengths.path;
	query_len = u.lengths.query;

	for (i=0; i<URL_fields; ++i) switch (i) {
		case urlfield_HOST:
		case urlfield_PORT:
		case urlfield_SCHEME:
			if (u.len[i]) {
				u.field[i] = malloc(u.len[i]);
			}
			break;

		case urlfield_PATH:
			u.data.path = malloc(path_len + query_len + 2);
			if (u.data.path != NULL) {
				if (query_len == 0) {
					u.data.query = NULL;
				}
				else {
					u.data.query = u.data.path + path_len;
				}
				if (path_len == 0) {
					u.data.path[0] = '\0';
					++path_len;
					if (query_len > 0) {
						u.data.query++;
					}
				}
			}
			else {
				u.data.query = NULL;
			}
			break;

		case urlfield_QUERY:
			break;

		default:
			u.field[i] = NULL;
			break;
	}

	e = URL_find_data(0, url, NULL, &u);
	if (e) {
		#ifdef TRACE
		protocol_debug("http_get_request> URL_find_data> %s\n", e->errmess);
		#endif
		for (i=0; i<URL_fields; ++i) {
			if (i != urlfield_QUERY) free(u.field[i]);
		}
		return;
	}

	if (path_len > 0 && query_len > 0) {
		u.data.path[path_len - 1] = '?';
	}

	*uri = u.data.path;
	*host = u.data.host;

	if (u.data.port) {
		int i = atoi(u.data.port);
		if (i != 0) *port = i;
		free(u.data.port);
	}

	/* Check the scheme here if we handle multiple schemes */
	free(u.data.scheme);
}

/*************************************************************/
/* static void http_send_request(int sd, char *uri, int m... */
/*************************************************************/
/* Send the actual request to the remote server cleanly	     */
/* Return value is the number of bytes that were NOT SENT to */
/* the server successfully.				     */
/*************************************************************/
static int http_send_request(Session *ses)
{
	char *tosend;
	int sentthisgo = 0;

	tosend = ses->fullreq + ses->total_send - ses->to_send;

	if (tosend == ses->fullreq) {
		/* Only check the error status if we KNOW we haven't
		 * got a connection yet
		 */
		int pending, len = sizeof(int);

		#ifdef TML
		Printf("http:send_request> initial errno=%d\n",errno);
		#endif
		(void) ses->op->s_getsockopt(ses->sd,SOL_SOCKET,SO_ERROR,&pending,&len);
		#ifdef TML
		Printf("http:send_request> pending error=%d\n",pending);
		#endif

		if (pending == ECONNREFUSED || pending == ETIMEDOUT) {
			errno = pending;
			return ses->total_send;
		}
	}

	errno = 0;
	sentthisgo = ses->op->s_write(ses->sd, tosend, ses->to_send);

	#ifdef TRACE
	protocol_debug("http:send_request> session:%p (sd=%d errno=%d) ret status %d\n",ses,ses->sd,errno,ses->done);
	#endif

	if (sentthisgo < 0) {
		/* Error - it has to return ses->total_send and not to_send because
		 * otherwise http_retry_request doesn't bother to check errno! */
		return ses->total_send;
	}

	ses->to_send -= sentthisgo;
	return ses->to_send;
}

static const char *http_method_text(const int method)
{
	switch (method) {
		case method_HTTP_GET:  return "GET";
		case method_HTTP_HEAD: return "HEAD";
		case method_HTTP_POST: return "POST";
		case method_HTTP_PUT:  return "PUT";
		case method_HTTP_OPTIONS:  return "OPTIONS";
		case method_HTTP_TRACE:  return "TRACE";
		case method_HTTP_DELETE:  return "DELETE";
		default:
			return NULL;
	}
}


static int http_validate_user_supplied_data(Session *ses)
{
	http_header *hdr = http_find_header(ses->headers, "content-length");

	if (hdr) {
		/* Looks like client is attempting to transmit some data */
		size_t data_size = (unsigned int) strtoul(hdr->value, NULL, 10);

		#ifdef TRACE
		protocol_debug("Client is sending an entity-body with declared length %d\n", data_size);
		protocol_debug("Looking at the data, we can see %d bytes\n", ses->data_len);
		#endif

		if (data_size > ses->data_len) {
			/* Ah.  There is a problem here.  The user has overstated the data
			 * buffer length.  What do we do?  We MUST correct it (IMHO)
			 */
			char len[16];
			sprintf(len, "%d", ses->data_len);
			http_delete_header(&ses->headers, hdr);
			http_add_header(&ses->headers, "content-length", len);
			ses->data_len = data_size;
			#ifdef TRACE
			protocol_debug("WARNING: We have rewritten the client length declaration\n");
			#endif
		}
	}


	if (ses->method == method_HTTP_GET || ses->method == method_HTTP_HEAD) {
		/* ... and add any other HTTP methods that MUST NOT include an entity
		 * body along with the request
		 */
		for (;;) {
			http_header *hdr = http_find_header(ses->headers, "content-type");
			if (!hdr) break;
			#ifdef TRACE
			protocol_debug("Grrr.  Removing content-type from idempotent request\n");
			#endif
			http_delete_header(&ses->headers, hdr);
		}
		for (;;) {
			http_header *hdr = http_find_header(ses->headers, "content-length");
			if (!hdr) break;
			#ifdef TRACE
			protocol_debug("Grrr.  Removing content-length from idempotent request\n");
			#endif
			http_delete_header(&ses->headers, hdr);
		}
		for (;;) {
			http_header *hdr = http_find_header(ses->headers, "transfer-encoding");
			if (!hdr) break;
			#ifdef TRACE
			protocol_debug("Grrr.  Removing transfer-encoding from idempotent request\n");
			#endif
			http_delete_header(&ses->headers, hdr);
		}
		#ifdef COMPRESSION
		for (;;) {
			http_header *hdr = http_find_header(ses->headers, "content-encoding");
			if (!hdr) break;
			#ifdef TRACE
			protocol_debug("Grrr.  Removing content-encoding from idempotent request\n");
			#endif
			http_delete_header(&ses->headers, hdr);
		}
		#endif

		ses->data_len = 0; /* Forcibly ignore the extra data */
	}

	if (ses->method == method_HTTP_PUT || ses->method == method_HTTP_POST) {
		/* ... and add any other HTTP methods that MUST include an entity
		 * body along with the request
		 */
		http_header *hdr = http_find_header(ses->headers, "content-type");

		if (hdr == NULL) {
			#ifdef TRACE
			protocol_debug("PROTOCOL ERROR: Client did not specify a content-type\n");
			#endif
			http_add_header(&ses->headers, "content-type", "application/x-www-form-urlencoded");
		}

		hdr = http_find_header(ses->headers, "content-length");
		if (hdr == NULL && http_find_header(ses->headers, "transfer-encoding") == NULL) {
			/* HTTP/1.1 requires one of these to be present, so we'll add one */
			char len[16];
			sprintf(len, "%d", ses->data_len);
			http_add_header(&ses->headers, "content-length", len);
		}
	}

	do {
		http_header *hdr = http_find_header(ses->headers, "user-agent");
		if (hdr == NULL) break;
		http_delete_header(&ses->headers, hdr);
	} while (1);

	do {
		http_header *hdr = http_find_header(ses->headers, "cookie2");
		if (hdr == NULL) break;
		http_delete_header(&ses->headers, hdr);
	} while (1);

	#ifdef COMPRESSION
	do {
		http_header *hdr = http_find_header(ses->headers, "accept-encoding");
		if (hdr == NULL) break;
		http_delete_header(&ses->headers, hdr);
	} while (1);
	#endif

	return 1;
}

/* This function generates a request buffer and stores it in ses->fullreq.
 * It returns zero if it failed, non-zero if it succeeded.
 */
static int http_generate_request(Session *ses, _kernel_swi_regs *r)
{
	char *endhost = ses->endhost ? ses->endhost : ses->host;
	int endport = ses->endhost ? ses->endport : ses->port;
	int proto_major_version = 1;
	int proto_minor_version = 0;
	char *reqline;
	size_t data_offset;

	/* Decide how to send the request */
	const char *m = http_method_text(ses->method);

	if (m == NULL) {
		ses->fullreq = NULL;
		return 0;
	}

	if (ses->method == 1) {
		/* We only do this got GET */
		proto_minor_version = 1;
	}
	else {
		proto_minor_version = 0;
	}

	#ifdef TRACE
	if (1) {
		hosttrack_info *hti = hosttrack_known(ses->host, ses->port);
		if (hti != NULL) {
			const int ver = hosttrack_http_version(hti);
			div_t version = div(ver, 100);

			protocol_debug("Host %s:%d is known to use HTTP version %d.%d\n",
				ses->host, ses->port, version.quot, version.rem);
		}
	}
	#endif

	http_free_headers(&ses->headers);
	reqline = malloc(strlen(ses->uri) + sizeof(" HTTP/1234567890.1234567890"));
	if (reqline == NULL) {
		ses->fullreq = NULL;
		return 0;
	}

	/* Fake the first header by assuming the method is the "header" and the URI + HTTP
	 * version number string is the "value"
	 */
	sprintf(reqline, "%s%s HTTP/%d.%d", ses->endhost ? "" : "/", ses->uri, proto_major_version, proto_minor_version);
	http_add_header(&ses->headers, m, reqline);
	free(reqline);
	http_add_header(&ses->headers, "Connection", "close");

	/* Construct the host header as required */
	if (endport == ((ses->flags & flags_USING_HTTPS) ? CONNECT_DEFAULT_PORT_NUMBER2:CONNECT_DEFAULT_PORT_NUMBER) || endhost == 0) {
		http_add_header(&ses->headers, "Host", endhost);
	}
	else {
		char *host = malloc(strlen(endhost) + sizeof(":1234567890"));
		if (host == NULL) {
			http_add_header(&ses->headers, "Host", endhost);
		}
		else {
			sprintf(host, "%s:%d", endhost, endport);
			http_add_header(&ses->headers, "Host", host);
			free(host);
		}
	}

	#ifdef COOKIE
	if (!(ses->flags & flags_NO_COOKIES)) {
		send_cookies_to_domain(ses);
	}
	#endif

	/* Now parse the user passed data */
	if (ses->data_len > 0) {
		const int consumed = parse_user_header(ses->data, ses->data_len, ses);

		if (consumed > 0 && consumed <= ses->data_len) {
			const int size = ses->data_len - consumed;
			memcpy(ses->data, ((char *)r->r[4]) + consumed, size);
			ses->data_len = size;
		}
	}

	/* Now ensure that nothing odd is happening (client problems mostly) */
	if (http_validate_user_supplied_data(ses) == 0) {
		return 0;
	}

	if (!http_find_header(ses->headers, "cookie2")) {
		http_add_header(&ses->headers, "Cookie2", "$Version=\"1\"");
	}

	#ifdef COMPRESSION
	{
	        http_header *hdr;
        	if ((hdr = http_find_header(ses->headers, "accept-encoding")) != NULL) {
        	        http_delete_header(&ses->headers, hdr);
        	}
	        http_add_header(&ses->headers, "Accept-Encoding", "deflate, gzip");
	}
	#endif

	http_add_header(&ses->headers, "User-Agent",
		ses->agent == NULL ? Module_Help "/" Module_VersionString : ses->agent);

	if (http_find_header(ses->headers, "Accept") == NULL) {
		/* 0.58 fix for broken servers which reject requests with no Accept
     * headers despite a CLEAR statement in the specification of the
     * HTTP protocols that omission of Accept implies acceptance of ANY
     * media type
		 */
		http_add_header(&ses->headers, "Accept", "*/*");
	}


	/* Construct the request buffer, allocating an extra "ses->data_len" bytes to hold
	 * the entity body that the client has supplied
	 */
	data_offset = http_construct_header_buffer(ses, ses->data_len);
	http_free_headers(&ses->headers);
	ses->fullreq = ses->current_header;
	ses->current_header = NULL;
	if (ses->fullreq == NULL) {
		return 0;
	}

	if (ses->data_len > 0) {
		memcpy(ses->fullreq + data_offset, ses->data, ses->data_len);
	}

	ses->to_send = data_offset + ses->data_len;
	ses->total_send = ses->to_send;

	#ifdef TRACE
	protocol_debug("Full request is (raw dump if enabled):\n");
	protocol_dump(ses->fullreq, ses->to_send);
	#endif
	return 1;
}

/*************************************************************/
/* int http_retry_request(Session *ses);		     */
/*************************************************************/
/* Send the actual request to the remote server cleanly	     */
/* Return code is immaterial? Some places seem to ignore it! */
/*************************************************************/
int http_retry_request(Session *ses)
{
	/* Send what we have to send */
	/* Returns amount *not yet sent* */
	const int remaining = http_send_request(ses);

	/* Decide our current state based upon what we have done so far */
	if (remaining == ses->total_send) {
		/* Looks like we havent connected yet! */
		if (errno == ECONNREFUSED) {
			ses->done = HTTP_ERROR_NOCONNECTION;
		}
		else if (errno == ENOTCONN || errno == EWOULDBLOCK) {
		        if (ses->done != HTTP_DNS) {
				ses->done = HTTP_CONNECTING;
			}
			else {
			        /* Remain in state HTTP_DNS */
			}
		}
		else {
		        /* a real error occurred */
			if (errno == ETIMEDOUT) {
				ses->done = HTTP_CONNECT_TIMED_OUT;
			}
			else {
			        ses->done = HTTP_ERROR_NOCONNECTION;
			}
		}
	}
	else if (remaining != 0) {
		/*
		 * Connected but not all data sent - we probably will never enter this
		 * because we are using non-blocking sockets.
		 * StB: what rubbish - large requests (>16KB) will cause this state
		 * to be entered because it will overflow the stack's internal SendQ
		 * default buffer size.
		 */
		ses->done = HTTP_SENDING_REQUEST;
	}
	else {
		/* We don't have any data pending so we have sent the request */
		ses->done = HTTP_SENT_REQUEST;
	}

	return remaining;
}

/*************************************************************/
/* static Session *http_new_session(_kernel_swi_regs *r)     */
/*************************************************************/
/* Create and initilise a new session structure		     */
/*************************************************************/
static Session *http_new_session(_kernel_swi_regs *r)
{
	Session *ses;

	/* Create a session control block */
	ses = new_session();
	if (ses == NULL) return ses;

	ses->next		= NULL;
	ses->done		= HTTP_NEWSESSION;
	ses->id			= r->r[1];
	ses->sd			= -1;
	ses->server_code	= 0;
	ses->size		= -1;
	ses->sent		= 0;
	ses->to_send		= 0;
	ses->total_send		= 0;
	ses->data_wanted	= 0;
	ses->method		= 0;
	ses->data		= NULL;
	ses->data_len		= 0;
	ses->uri		= NULL;
	ses->url		= NULL;
	ses->host		= NULL;
	ses->port		= 0;
	ses->endhost		= NULL;
	ses->endport		= 0;
	ses->agent		= NULL;
	ses->fullreq		= NULL;
	ses->current_header	= NULL;
	ses->final_pump		= 0;
	ses->hdrptr		= 0;
	ses->buffer		= NULL;
	ses->bufptr		= 0;
	ses->read_status	= 0;
	ses->bufsize		= 0;
	ses->donehead		= 0;
	ses->compression        = compression_NONE;
	ses->chunking		= 0;
	ses->chunk_bytes	= 0;
	ses->chunk_state	= 0;
	ses->wait_interim	= 0;
	ses->reused_socket	= 0;
	ses->headers		= NULL;
	ses->last		= time(NULL);

	return ses;
}

static int http_parse_url(Session *ses, char *proxied)
{
	char *host = NULL;
	char *uri  = NULL;
	char *url;
	int   port; 

	if (!ses) return -1;
	url = ses->url;
	port = (ses->flags & flags_USING_HTTPS) ? CONNECT_DEFAULT_PORT_NUMBER2:CONNECT_DEFAULT_PORT_NUMBER;
	if (!url || !*url ) return -1;

	#ifdef TRACE
	protocol_debug("URL is `%s', Proxy is `%s'\n", ses->url, proxied?proxied:"<UNSET>");
	#endif

	/* Now work out the host and port and URI bit we are after */
	http_get_request(ses, url, &host, &port, &uri);

	if (host==NULL) {
		ses->done = HTTP_ERROR; /* Cant understand URL */
		return -1;
	}

	/* Fill in a bit more detail */
	if (proxied==NULL) {
		ses->host    = host;
		ses->port    = port;
		ses->endhost = NULL;
		ses->endport = -1;
		ses->uri     = uri;
		ses->url     = Strdup(uri);
		return 0;
	}

	ses->uri = url;
	ses->url = uri;
	ses->endhost = host;
	ses->endport = port;

	http_get_request(ses, proxied, &ses->host, &ses->port, &uri);
	free(uri);
	if (ses->host == NULL) {
		#ifdef TRACE
		protocol_debug("Proxy request: unable to parse proxy details: `%s'\n", proxied);
		#endif
                free(ses->endhost);
                ses->endhost = 0;
                return 1;
	}

	return 0;
}

/*************************************************************/
/* static int http_connect(char *url, Session *ses)	     */
/*************************************************************/
/* Given a URL connect to the remote host and initiate	     */
/* the request for data.				     */
/*************************************************************/
static int http_connect(Session *ses)
{
	/* Then establish the connection */
	ses->sd = opensock(ses->host, ses->port, NULL, &ses->done, ses->sd, ses);

	/* We failed to create the socket - notice that DNS lookup may be going
	 * on in which case the socket will have been created (and an error here
	 * means that the socket create failed and no DNS lookup is happening)
	 */
	if (ses->sd < 0) {
		if ((ses->sd == -ENETUNREACH) || (ses->sd == -EWOULDBLOCK) || (ses->sd == -EHOSTUNREACH)) {
			ses->done = HTTP_ERROR_NOLINK;
		}
		else {
			ses->done = ses->endhost ? HTTP_ERROR_NO_PROXY : HTTP_ERROR_HOSTNAME;
		}
		#ifdef TML
		Printf("http:connect> OpenSocket returning errno=%d : status %d\n",-ses->sd,ses->done);
		#endif
		ses->sd = -1;
		return -1;
	}

	/* This won't succeed, but it IS necessary in order to set up the request data structure */
	ses->to_send = http_retry_request(ses);

	return ses->sd;
}


static char *agent = NULL;

void http_free_agent(void)
{
	free(agent);
	agent = NULL;
}

/* This function to be expanded later if we want to be able to append information
 * about the OS version to our user-agent headers.  Currently, this code just
 * generates a duplicate of the module name plus version number.
 */
#define AGENT_TOKEN	"Acorn-HTTP"
char *http_generate_agent(void)
{
	if (agent != NULL) {
		return agent;
	}
	else {
		size_t size = sizeof(AGENT_TOKEN "/" Module_VersionString);

		agent = malloc(size);
		if (agent != NULL) {
			memcpy(agent, AGENT_TOKEN "/" Module_VersionString, size);
		}

		return agent;
	}
}
@


1.8
log
@Finish implementation of head/body/both flags
Detail:
  Per Docs/SWIs the flags in R5 (or R2 b8-15) should allow a client to request only the head/body or both, but the implementation was incomplete in places.
  Where http_write_data_to_client() is called, check what the request was and filter appropriately.
Admin:
  Submission from Chris Mahoney.

Version 0.98. Tagged as 'HTTP-0_98'
@
text
@d770 2
a771 2
	char *url  = ses->url;
	int   port = (ses->flags & flags_USING_HTTPS) ? CONNECT_DEFAULT_PORT_NUMBER2:CONNECT_DEFAULT_PORT_NUMBER;
d773 4
a776 1
	if (!ses || !url || !*url ) return -1;
@


1.7
log
@  Adds missing Content-Type header to form postings.
Detail:
  The NT based CTS plugin fails to put Content-Type headers in
    posted form submissions.  The Microsoft server seems happy
    with this illegal form, but AcornHTTP isn't - and it decides
    that the post attempt is bogus and rejects it.  Instead of
    that, it now adds the application/x-www-form-urlencoded
    as the default content type.
Admin:
  Tested by proxying the NT plugin via WebServe and verified that
    the content-type is being added.

Version 0.86. Tagged as 'HTTP-0_86'
@
text
@d120 1
a120 1
		ses->data_wanted = (r->r[5] > 0);
@


1.6
log
@  Commit of old modified sources from last September.
Detail:
  Added knowledge of OPTIONS and TRACE to the option decoder.
  Now knows about new SWI names of AcornSSL module.
Admin:
  Tested briefly.
  Requires AcornSSL-0_08 header export to have occurred.

Version 0.85. Tagged as 'HTTP-0_85'
@
text
@d477 1
a477 1
			return 0;
@


1.5
log
@* Duplicate header suppression code moved to later in the header generator
  so that it actually does override user headers as it is supposed to.
  (affects Cookie2 and Accept-Encoding headers)

* Security code includes header exported by AcornSSL to <CExport$Dir>
  instead of requiring it to be present in a specific place relative to
  the HTTP sources.
@
text
@d387 3
@


1.4
log
@Added support for Content-Encoding: gzip and deflate.
Appears to work on the one server I've found to test against - more
servers need to be found. Particularly, we need to test unusual gzip
headers and interaction with chunking.
@
text
@d421 1
d492 14
a563 17
	if (!http_find_header(ses->headers, "cookie2")) {
		http_add_header(&ses->headers, "Cookie2", "$Version=\"1\"");
	}
	#if 0
	/* Removed in version 0.57 because it is the *client's* responsibility to send this information */
	http_add_header(&ses->headers, "Accept", "image/png; q=1.0, image/jpeg; q=0.9, image/*; q=0.8, */*");
	#endif

	#ifdef COMPRESSION
	{
	        http_header *hdr;
        	if ((hdr = http_find_header(ses->headers, "accept-encoding")) != NULL) {
        	        http_delete_header(&ses->headers, hdr);
        	}
	        http_add_header(&ses->headers, "Accept-Encoding", "deflate, gzip");
	}
	#endif
d602 14
@


1.3
log
@* https: support infrastructure has been added.  The API calls to the
  Internet module are now vectored through a look up table so that the
  calls for an https request are sent via the AcornSSL module.   The HTTP
  module will only register https: protocol capability with the URL
  module if the AcornSSL module is present, thus allowing transparent
  addition of SSL support without requiring an update for the HTTP
  module.

* There is no encryption code in the HTTP module at all.  It is all
  confined to the AcornSSL module.
@
text
@d449 10
d557 10
d739 1
@


1.2
log
@Build process improvements :
* Standardised make process in common with other protocol modules.
* Resources put into standard structure for internationalisation
* Standard !MkClean, !MkRom, !MkRam to build different versions
@
text
@d38 2
d46 1
d65 13
d107 6
d240 1
a240 1
static void http_get_request(const char *url, char **host, int *port, char **uri)
d249 1
a249 1
	*port = 80;
d352 1
a352 1
		(void) getsockopt(ses->sd,SOL_SOCKET,SO_ERROR,&pending,&len);
d364 1
a364 1
	sentthisgo = socketwrite(ses->sd, tosend, ses->to_send);
d548 1
a548 1
	if (endport == 80 || endhost == 0) {
d641 1
a641 1
		else if (errno == ENOTCONN) {
d735 1
a735 1
	int   port = 80;
d744 1
a744 1
	http_get_request(url, &host, &port, &uri);
d767 1
a767 1
	http_get_request(proxied, &ses->host, &ses->port, &uri);
d790 1
a790 1
	ses->sd = opensock(ses->host, ses->port, NULL, &ses->done, ses->sd);
@


1.1
log
@Initial revision
@
text
@d28 1
a28 1
#include "HTTP.h"
d91 1
a91 1
	
d739 1
a739 1
	
d744 1
a744 1
	
d755 1
a755 1
	
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
