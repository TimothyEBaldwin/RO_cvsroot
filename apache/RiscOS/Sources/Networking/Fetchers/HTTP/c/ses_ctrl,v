head	1.3;
access;
symbols
	HTTP-1_00:1.3
	HTTP-0_99:1.3
	HTTP-0_98:1.3
	HTTP-0_97:1.3
	HTTP-0_96:1.3
	HTTP-0_95:1.3
	HTTP-0_94:1.3
	HTTP-0_93:1.3
	HTTP-0_92:1.3
	HTTP-0_91:1.3
	HTTP-0_90:1.3
	HTTP-0_89:1.3
	HTTP-0_88:1.3
	dcotton_autobuild_BaseSW:1.3
	HTTP-0_87:1.3
	HTTP-0_86:1.3
	HTTP-0_85:1.3
	HTTP-0_84:1.3
	HTTP-0_83:1.3
	sbrodie_HTTP_0_82:1.3
	sbrodie_HTTP_0_81:1.3
	sbrodie_HTTP_0_80:1.3
	sbrodie_HTTP_0_79:1.3
	sbrodie_HTTP_0_78:1.2
	sbrodie_HTTP_0_77:1.2
	sbrodie_HTTP_0_76:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_HTTP_0_73:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	98.03.31.11.05.12;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	98.03.19.17.36.59;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.30;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.30;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added support for Content-Encoding: gzip and deflate.
Appears to work on the one server I've found to test against - more
servers need to be found. Particularly, we need to test unusual gzip
headers and interaction with chunking.
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * HTTP (c.ses_ctrl)
 *
 * © Acorn Computers Ltd. 1997
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "sys/errno.h"
#include "module.h"
#include "socklib.h"
#include "protocol.h"
#include "generic.h"
#include "header.h"

/*
 * This file contains the routines needed to manipulate sessions
 * within the contect of multiple clients of the module.
 */

static Session *session_list = NULL;

/*************************************************************/
/* Session *find_session(unsigned int id)		     */
/*************************************************************/
/* Given a session ID, return the session control block	     */
/* associated with it.					     */
/*************************************************************/
Session *find_session(unsigned int id)
{
	Session *session;

	for (session = session_list; session; session = session->next) {
		if (session->id == id) return session;
	}

	return NULL;
}

/*************************************************************/
/* Session *new_session(void)				     */
/*************************************************************/
/* Create a new session, taking into account starting the    */
/* sessions list					     */
/*************************************************************/
Session *new_session(void)
{
	Session *ses = calloc(1, sizeof(Session));

	if (ses == NULL) {
		return ses;
	}

	if (session_list == NULL) {
		/* no list so create a new one */
		session_list = ses;
	}
	else {
		/* else find end of list and add an element */
		Session *s;

		for (s=session_list; s->next; s=s->next) ;;
		s->next = ses;
	}

	return ses;
}

static Session *kill_session_data(Session *s)
{
	Session *result = s->next;

	if (s->sd != -1) {
		#ifdef TRACE
		protocol_debug("socketclose(%d) in kill_session_data\n", s->sd);
		#endif
		close_socket(s, &s->sd);
	}

	free(s->uri);
	free(s->fullreq);
	free(s->endhost);
	free(s->data);
	free(s->url);
	free(s->host);
	free(s->buffer);
	if (s->agent != http_generate_agent()) {
	        free(s->agent);
	}
	free(s->current_header);
	if (s->headers != NULL) {
		http_free_headers(&s->headers);
	}
	#ifdef COMPRESSION
	if (s->compression) {
	        inflateEnd(&s->zstream);
	}
	free(s->compbuf);
	#endif

	memset(s, '\0', sizeof(*s)); /* Let's be careful */
	free(s);

	return result;
}

/*************************************************************/
/* void kill_session(Session *s)			     */
/*************************************************************/
/* Given the location of the session block, delete the	     */
/* session cleanly, taking into account the session next     */
/* pointers and any memory associated with it		     */
/*************************************************************/
void kill_session(Session *s)
{
	Session *ses = session_list, *prev_ses = NULL;

	for (ses = session_list; ses; prev_ses = ses, ses = ses->next) {
		if (ses == s) {
			Session *const next = kill_session_data(s);
			if (prev_ses == NULL) {
				session_list = next;
			}
			else {
				prev_ses->next = next;
			}
			break;
		}
	}

	#ifdef TRACE
	protocol_debug("\nkill_session %p completed.  Dump of session chain\n", s);
	for (ses=session_list; ses; ses=ses->next) {
		protocol_debug("%p (socket %d) URL %s\n", ses, ses->sd, ses->url);
	}
	protocol_debug("End of session chain\n\n");
	#endif
}

/*************************************************************/
/* void ses_kill_all(void)				     */
/*************************************************************/
/* A small routine to kill off all sessions at module shut-  */
/* down.						     */
/*************************************************************/
void ses_kill_all(void)
{
	while (session_list) {
		kill_session(session_list);
	}
}


/* session_check is called by the callback routine in order to
 * timeout any inactive connections or anything.  Currently, it
 * does nothing, however nothing is lost by having it here, since
 * callbacks are required for the connection pool monitoring
 * anyway.
 */
void session_check(void)
{
	/* Nothing */
}

void session_init(void)
{
        session_list = NULL;
}
@


1.2
log
@* https: support infrastructure has been added.  The API calls to the
  Internet module are now vectored through a look up table so that the
  calls for an https request are sent via the AcornSSL module.   The HTTP
  module will only register https: protocol capability with the URL
  module if the AcornSSL module is present, thus allowing transparent
  addition of SSL support without requiring an update for the HTTP
  module.

* There is no encryption code in the HTTP module at all.  It is all
  confined to the AcornSSL module.
@
text
@d110 6
@


1.1
log
@Initial revision
@
text
@d93 1
a93 1
		close_socket(&s->sd);
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
