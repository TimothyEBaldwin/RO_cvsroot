head	1.1;
branch	1.1.1;
access;
symbols
	HTTP-1_00:1.1.1.1
	HTTP-0_99:1.1.1.1
	HTTP-0_98:1.1.1.1
	HTTP-0_97:1.1.1.1
	HTTP-0_96:1.1.1.1
	HTTP-0_95:1.1.1.1
	HTTP-0_94:1.1.1.1
	HTTP-0_93:1.1.1.1
	HTTP-0_92:1.1.1.1
	HTTP-0_91:1.1.1.1
	HTTP-0_90:1.1.1.1
	HTTP-0_89:1.1.1.1
	HTTP-0_88:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	HTTP-0_87:1.1.1.1
	HTTP-0_86:1.1.1.1
	HTTP-0_85:1.1.1.1
	HTTP-0_84:1.1.1.1
	HTTP-0_83:1.1.1.1
	sbrodie_HTTP_0_82:1.1.1.1
	sbrodie_HTTP_0_81:1.1.1.1
	sbrodie_HTTP_0_80:1.1.1.1
	sbrodie_HTTP_0_79:1.1.1.1
	sbrodie_HTTP_0_78:1.1.1.1
	sbrodie_HTTP_0_77:1.1.1.1
	sbrodie_HTTP_0_76:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_HTTP_0_73:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.01.29.18.32.31;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.31;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * URL module client code (URLclient.c)
 *
 * © Acorn Computers Ltd. 1997
 *
 *
 *  This is the test program for SWI URL_ParseURL.
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "URLstruct.h"
#include "URLclient.h"

#define URL_ParseURL	(0x83E07)

/* The following three calls are purely veneers to SWI URL_ParseURL */
_kernel_oserror *URL_find_lengths(int flags, const char *url, const char *rel, URL *u)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_buffer_lengths, url, rel, u,
        	sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *URL_find_data(int flags, const char *url, const char *rel, URL *u)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_return_data, url, rel, u,
        	sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *URL_compose_from_components(int flags, const char *url, const char *rel, URL *u)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_compose_from_components,
        	url, rel, u, sizeof(*u)/sizeof(size_t));
}

/* The following call resolves a relative URL to the given base URL and returns
 * the canonical resolved form of the URL.
 */
char *URL_resolve(int flags, const char *url, const char *rel)
{
        _kernel_oserror *e;
        char *ptr;
        URL u;
        
        e = URL_find_lengths(flags, url, rel, &u);
        if (e != NULL) return NULL;

	if (u.len[urlfield_FULL] == 0) {
	        return NULL;
	}
	else {
		int i;
		
		for (i=urlfield_SCHEME; i<=urlfield_MINIMAL; ++i) {
		        u.field[i] = NULL;
		}
	}

	u.field[urlfield_FULL] = ptr = malloc(u.len[urlfield_FULL]);
	if (ptr == NULL) {
	        return NULL;
	}

	e = URL_find_data(flags, url, rel, &u);
	if (e != NULL) {
	        free(ptr);
	        return NULL;
	}

	return ptr;
}

char *URL_canonicalise(int flags, const char *url)
{
        return URL_resolve(flags, url, NULL);
}
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
