head	1.3;
access;
symbols
	HTTP-1_00:1.3
	HTTP-0_99:1.3
	HTTP-0_98:1.3
	HTTP-0_97:1.3
	HTTP-0_96:1.3
	HTTP-0_95:1.3
	HTTP-0_94:1.3
	HTTP-0_93:1.3
	HTTP-0_92:1.3
	HTTP-0_91:1.3
	HTTP-0_90:1.3
	HTTP-0_89:1.3
	HTTP-0_88:1.3
	dcotton_autobuild_BaseSW:1.3
	HTTP-0_87:1.3
	HTTP-0_86:1.3
	HTTP-0_85:1.3
	HTTP-0_84:1.3
	HTTP-0_83:1.3
	sbrodie_HTTP_0_82:1.2
	sbrodie_HTTP_0_81:1.2
	sbrodie_HTTP_0_80:1.2
	sbrodie_HTTP_0_79:1.2
	sbrodie_HTTP_0_78:1.2
	sbrodie_HTTP_0_77:1.2
	sbrodie_HTTP_0_76:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_HTTP_0_73:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	98.08.24.14.41.25;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.03.19.17.36.48;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.29;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.29;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Cookie header parser tweaked to strip redundant characters.
  Updated version number control to srccommit.
  AcornSSL version mismatch detection code added for safety.
  No longer enables event generation for HTTP sockets.
Detail:
  * Cookie parser was getting confused by a trailing ; character on
  the end of set-cookie headers being sent to it by the Electronics
  Weekly web server.  This meant that it was rejecting the key
  cookie being used to control access to the site thus preventing
  people from accessing the site.
  * AcornHTTP now checks that the AcornSSL module is implementing a
  known SWI interface (the AcornSSL SWI interface changed in 0.03)
  * No longer uses ioctl(..FIOASYNC..) to enable event generation as
  the events aren't required and it wastes system resource to have
  them going off.
  * Makefile contains rules for generating .i files suitable for
  feeding to the McCabe toolset.
Admin:
  Built from clean; tested on Ursula & 3.70; verified access to
  Electronics Weekly (www.electronicsweekly.co.uk) now works.

Version 0.83. Tagged as 'HTTP-0_83'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * HTTP (c.connect) (minor customisation for persistent sockets from Generic version)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "inetlib.h"
#include "socklib.h"

#include "module.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "ctype.h"
#include "netinet/in.h"
#include "netdb.h"
#include "sys/ioctl.h"
#include "sys/types.h"
#include "sys/time.h"
#include "sys/ioctl.h"
#include "arpa/inet.h"
#include "sys/errno.h"
#include "dns.h"
#include "protocol.h"
#include "generic.h"
#include "connect.h"

static int make_sock_nonblocking(Session *ses, int fd)
{
	int one = 1;
	int (*s_ioctl)(int, unsigned long, ...) = ses->op->s_ioctl;

	if (s_ioctl(fd, FIONBIO,  &one) < 0) return 0;
	#if 0
	/* sbrodie: We do not use these events - so why waste time enabling
	 * then in the first place?
	 */
	if (s_ioctl(fd, FIOASYNC, &one) < 0) return 0; /* Causes Internet events */
	#endif
	return 1;
}

/************************************************************************/
/* opensock(host, port, portname, pointer to state, current descriptor) */
/************************************************************************/
/* This function is responsible for initiating connections to remote	*/
/* hosts.  It tries to connect to "host" on the port specified by the	*/
/* "sername" parameter unless this is NULL - in which case the "port"	*/
/* parameter is used.  "port" is ignored if "sername" is non-NULL	*/
/* This function must fill in the state with the appropriate state so	*/
/* that when the ReadData SWI handler comes to dispatch through the	*/
/* state table, it goes to the right place.  "fd" is the current socket */
/* descriptor or -1 if there is no socket yet.  It will be -1 on the	*/
/* first call (typically from the GetData SWI handler) and then be a	*/
/* real socket handle in subsequent calls from a ReadData FSM handler.  */
/* This function returns the handle of the created socket - the caller  */
/* *must* prefer this to any handle it passed in the "fd" parameter.	*/
/* This function will close the passed "fd" if it so desires.		*/
/* If the return value is <0, this indicates an error (the value is	*/
/* actually "-errno" so you can use the value if you really want to)	*/
/* Note that the socket to be used is always created on the first time  */
/* through this routine and it is left unbound until the DNS lookup	*/
/* has succeeded.  This means that if you happen to use *inetstat to	*/
/* see all the sockets, you'll see a strange entry for a socket with    */
/* an unknown port and unknown protocol.  This is normal and correct.	*/
/************************************************************************/

int opensock(char *name, int port, char *sername, int *state, int fd, Session *ses)
{
	static int can_nonblock = 1;

	int status=-1;
	struct sockaddr_in addr;

	addr.sin_family = AF_INET;
	memset(addr.sin_zero, '\0', sizeof(addr.sin_zero));

	if (sername == NULL) {
		addr.sin_port = htons(port);
	}
	else {
		struct servent *service = NULL;
		short port = CONNECT_DEFAULT_PORT_NUMBER;
	        if (strcmp(sername, CONNECT_DEFAULT_PROTOCOL_NAME) == 0) {
	                port = CONNECT_DEFAULT_PORT_NUMBER;
	        }
	        else if (strcmp(sername, CONNECT_DEFAULT_PROTOCOL_NAME2) == 0) {
			port = CONNECT_DEFAULT_PORT_NUMBER2;
	        }
	        else {
		        service = getservbyname(sername, "tcp");
		}
		addr.sin_port = service ? service->s_port : htons(port);
	}

	/* Jump back here if we start a nonblocking connect and then discover
	 * that the platform has a broken read() or select().
	 */
	retry:

	errno = 0;

	if (fd < 0) {
	        /* Persistent connections implemented at this point */
	        /*
	        if (!connpool_find_http(host, htons(addr.sin_port), &addr.sin_addr
	        */
	}

	if (fd < 0) {
		#ifdef TRACE
		protocol_debug("Creating socket ...\n");
		#endif
		if ((fd = ses->op->s_creat(PF_INET, SOCK_STREAM, 0)) < 0) {
			#ifdef TRACE
			protocol_debug(".. error = %d\n", errno);
			#endif
			*state = CONNECT_ERROR_STATE;
			return -errno;
		}
		#ifdef TRACE
		protocol_debug(".. result = %d\n", fd);
		#endif

		if (can_nonblock) {
			if (!make_sock_nonblocking(ses, fd)) can_nonblock=0;
			#ifdef TML
			Printf("opensock> nonblock=%x (errno=%d)\n",can_nonblock,errno);
			#endif
		}
	}

	status = dns_find_ip_address(name, &addr.sin_addr);
	if (status == EINPROGRESS) {
		#ifdef TRACE
		protocol_debug("dns_find_ip_address(%s) incomplete ... waiting\n", name);
		#endif
		*state = CONNECT_DNS_STATE;
		return fd;
	}
	else if (status != 0) {
		#ifdef TRACE
		protocol_debug("dns_find_ip_address(%s) failed (%d)\n", name, status);
		#endif
		close_socket(ses, &fd);
		*state = CONNECT_CONNECTED_STATE;
		return -status;
	}

	#ifdef TRACE
	protocol_debug("dns_find_ip_address(%s) worked --> %s\n",
		name, inet_ntoa(addr.sin_addr));
	#endif

	/* Set the state */
	*state = CONNECT_CONNECTED_STATE;

	status = ses->op->s_connect(fd, (struct sockaddr*)&addr, sizeof(addr));

	if (status == 0) {
		/* The connection completed successfully. */
		#ifdef TRACE
		protocol_debug("connect() returned 0!  Returning %d\n", fd);
		#endif
		return fd;
	}
	else {
		if ((errno == EINPROGRESS) || (errno==0)) {
			#ifdef TML
			Printf("opensock> OK2: returning sd=%d (errno=%d)\n",fd,errno);
			#endif
			#ifdef TRACE
			protocol_debug("errno==0 or EINPROGRESS - returning %d\n", fd);
			#endif
			return fd;
		}
		else {
			if ((errno == EAGAIN) || (errno == EWOULDBLOCK)) {
				#ifdef TML
				Printf("closing %d (errno=%d), trying again\n",fd,errno);
				#endif
				#ifdef TRACE
				protocol_debug("EAGAIN/WOULDBLOCK closing %d\n", fd);
				#endif
				close_socket(ses, &fd);
				can_nonblock = 0;
				goto retry; /* try again */
			}
		}
	}

	#ifdef TRACE
	protocol_debug("connect() return value was %d (errno now %d)\n",
		status, errno);
	#endif
	status = errno;
	close_socket(ses, &fd);
	return -status;
}
@


1.2
log
@* https: support infrastructure has been added.  The API calls to the
  Internet module are now vectored through a look up table so that the
  calls for an https request are sent via the AcornSSL module.   The HTTP
  module will only register https: protocol capability with the URL
  module if the AcornSSL module is present, thus allowing transparent
  addition of SSL support without requiring an update for the HTTP
  module.

* There is no encryption code in the HTTP module at all.  It is all
  confined to the AcornSSL module.
@
text
@d52 4
d57 1
@


1.1
log
@Initial revision
@
text
@d46 1
a46 1
int make_sock_nonblocking(int fd)
d49 1
d51 2
a52 2
	if (socketioctl(fd, FIONBIO,  &one) < 0) return 0;
	if (socketioctl(fd, FIOASYNC, &one) < 0) return 0; /* Causes Internet events */
d81 1
a81 1
int opensock(char *name, int port, char *sername, int *state, int fd)
d96 8
a103 1
	        if (strcmp(sername, CONNECT_DEFAULT_PROTOCOL_NAME) != 0) {
d106 1
a106 1
		addr.sin_port = service ? service->s_port : htons(CONNECT_DEFAULT_PORT_NUMBER);
d122 1
a122 1
	
d127 1
a127 1
		if ((fd = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
d139 1
a139 1
			if (!make_sock_nonblocking(fd)) can_nonblock=0;
d158 1
a158 1
		close_socket(&fd);
d171 1
a171 1
	status = connect(fd, (struct sockaddr*)&addr, sizeof(addr));
d198 1
a198 1
				close_socket(&fd);
d210 1
a210 1
	close_socket(&fd);
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
