head	1.12;
access;
symbols
	HTTP-1_00:1.12
	HTTP-0_99:1.12
	HTTP-0_98:1.11
	HTTP-0_97:1.11
	HTTP-0_96:1.10
	HTTP-0_95:1.10
	HTTP-0_94:1.10
	HTTP-0_93:1.9
	HTTP-0_92:1.9
	HTTP-0_91:1.9
	HTTP-0_90:1.9
	HTTP-0_89:1.9
	HTTP-0_88:1.9
	dcotton_autobuild_BaseSW:1.9
	HTTP-0_87:1.9
	HTTP-0_86:1.9
	HTTP-0_85:1.9
	HTTP-0_84:1.9
	HTTP-0_83:1.8
	sbrodie_HTTP_0_82:1.8
	sbrodie_HTTP_0_81:1.7
	sbrodie_HTTP_0_80:1.7
	sbrodie_HTTP_0_79:1.6
	sbrodie_HTTP_0_78:1.6
	sbrodie_HTTP_0_77:1.5
	sbrodie_HTTP_0_76:1.4
	sbrodie_Expresso_final_190298:1.4
	sbrodie_HTTP_0_73:1.3
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2018.08.25.20.18.30;	author rool;	state Exp;
branches;
next	1.11;
commitid	xhqN7zhPUwX9CxPA;

1.11
date	2018.05.17.07.56.59;	author rsprowson;	state Exp;
branches;
next	1.10;
commitid	TaypA9bDOgq3JCCA;

1.10
date	2018.05.12.09.08.21;	author rool;	state Exp;
branches;
next	1.9;
commitid	Yb3QUAvruF0whZBA;

1.9
date	98.09.16.12.05.04;	author sbrodie;	state Exp;
branches;
next	1.8;

1.8
date	98.04.27.11.56.11;	author sbrodie;	state Exp;
branches;
next	1.7;

1.7
date	98.04.21.13.28.04;	author sbrodie;	state Exp;
branches;
next	1.6;

1.6
date	98.03.25.16.02.52;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	98.03.19.17.36.55;	author sbrodie;	state Exp;
branches;
next	1.4;

1.4
date	98.02.18.10.33.10;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	98.02.11.19.30.52;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.02.11.10.51.55;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.30;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.30;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Show live build date rather than hardwired one
Detail:
  When AcornHTTP is registering on behalf of AcornSSL with the URL module, it makes up an info string using the live version number.
  Use the AcornSSL module date too, rather than that of AcornHTTP.
Admin:
  Submission for TCP/IP bounty.

Version 0.99. Tagged as 'HTTP-0_99'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * HTTP (c.module)
 *
 * © Acorn Computers Ltd. 1997, 1998
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "Global/ModHand.h"
#include "sys/errno.h"
#include "HTTPHdr.h"
#include "module.h"
#include "protocol.h"
#include "cookie.h"
#include "hosttrack.h"
#include "connpool.h"
#include "utils.h"
#include "dns.h"
#include "config.h"
#include "security.h"

volatile static int callback_pending_flag = 0;

#define NO_SUCH_SWI	(0x1E6)

#define URL_PROTOCOL_REGISTER	(0x83e20)
#define URL_PROTOCOL_DEREGISTER (0x83e21)

#define URL_00			(0x83e00)
#define URL_SSL_AVAILABLE	(0x83e02)


#ifndef ROM
extern int Resources(void); /* From resgen */
#endif

#ifndef ROM
#ifdef DEFINE_ERRNO
int __errno;
#endif
#endif


/*************************************************************/
/* So the real error number that we have to return is:	     */
/*************************************************************/
#define HTTP_ERROR_NUM  (ERROR_BASE+HTTP_OFFSET)

/*************************************************************/
/* The error message definitions			     */
/*************************************************************/
typedef enum {
	HTTP_HOST_NOT_FOUND	= HTTP_ERROR_NUM + 0,	/* DNS lookup failed */
	HTTP_HOST_CONNECT_ERROR = HTTP_ERROR_NUM + 1,	/* connect() failed */
	HTTP_DATA_READ_ERROR	= HTTP_ERROR_NUM + 2,	/* unexpected read error on socket */
	HTTP_GENERAL_ERROR	= HTTP_ERROR_NUM + 3,	/* Misc. - not helpful */
	HTTP_BAD_SESSION_ERROR	= HTTP_ERROR_NUM + 4,	/* Failed to locate session in session table */
	HTTP_CONNECTION_FAILED	= HTTP_ERROR_NUM + 5,	/* Failed to establish connection */
	HTTP_METHOD_UNSUPPORTED	= HTTP_ERROR_NUM + 6,	/* Unknown method in R2 */
	HTTP_METHOD_INIT_ERR	= HTTP_ERROR_NUM + 7,	/* Failed to start a fetch completely */
	HTTP_BAD_URL_PARSE	= HTTP_ERROR_NUM + 8,	/* Unable to parse URL (URL module too old?) */
	HTTP_PROXY_NOT_FOUND	= HTTP_ERROR_NUM + 9,	/* Unable to contact the proxy */
	HTTP_NO_SECURITY	= HTTP_ERROR_NUM + 10	/* No SSL support present */
} http_internal_error_codes;



/* Sets clibrary_realloc_routine_is_buggy non-zero if RISC OS 3.1 or earlier (ie. ROM realloc is broken) */
static int clibrary_realloc_routine_is_buggy;
static void module_check_os_version(void)
{
        int os;
        (void) _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &os);
        clibrary_realloc_routine_is_buggy = (os <= 0xA4);
}

static int registered_http;
static int registered_https;

static _kernel_oserror *try_to_register_for_https(void)
{
        if (!registered_https) {
                int ver = security_ssl_available();
                if (ver > 0) {
                        _kernel_oserror *e;
                        int base;
                        char info[sizeof("Acorn SSL © Acorn 1066 (Built: 14-Oct-1066)")];
                        const char *help, *bracket = NULL;

			e = _swix(OS_Module, _INR(0,1)|_OUT(3), ModHandReason_LookupName, "AcornSSL", &base);
			if (e == NULL) {
				help = (const char *)(base + *(int *)(base + Module_HelpStr));
				bracket = strstr(help, "(");
			}
			strcpy(info, "Acorn SSL © Acorn 1998");
			if (bracket) {
				strcat(info, " (Built: ");
				strcat(info, bracket + 1);
			}
			e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0, HTTP_SecureGetData, "https:",
				ver, info);
			if (e == NULL) {
		        	registered_https = 1;
			}
                }
        }

        return NULL;
}

static _kernel_oserror *try_to_register(void)
{
        _kernel_oserror *e = NULL;

	if (!registered_http) {
		e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0, HTTP_00, "http:",
			Module_VersionNumber, Module_Help " © Acorn 1997 (Built: " Module_Date ")");
		if (e != NULL) return e;
        	registered_http = 1;
	}

	if (registered_http) {
	        (void) try_to_register_for_https();
	}

        return e;
}

static _kernel_oserror *try_to_deregister_for_https(void)
{
        if (!registered_https) {
                return NULL;
        }
        else {
                registered_https = 0;
	        return _swix(URL_PROTOCOL_DEREGISTER, _INR(0,1), 0, HTTP_SecureGetData);
        }
}

static _kernel_oserror *try_to_deregister(void)
{
	(void) try_to_deregister_for_https();
        if (!registered_http) {
                return NULL;
        }
        else {
                registered_http = 0;
		return _swix(URL_PROTOCOL_DEREGISTER, _INR(0,1), 0, HTTP_00);
        }
}

static _kernel_oserror *register_with_url(void)
{
        _kernel_oserror *e;

	e = try_to_register();
	if (e == NULL) return e;
	if (e->errnum != NO_SUCH_SWI) return e;
	#ifndef ROM
	e = _swix(OS_Module, _INR(0,1), 1 /* Load */, "System:Modules.Network.URL.URL");
	return try_to_register();
	#else
	return NULL;
	#endif
}

/*************************************************************/
/* _kernel_oserror *module_init(char *cmd_fail, int podu...  */
/*************************************************************/
/* Start up and register ourselves with the URL module	     */
/*************************************************************/
_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
{
	_kernel_oserror *e;

	(void) podule_base;
	(void) cmd_tail;

	registered_http = 0;
	registered_https = 0;
	module_check_os_version();
	security_init();
	config_init();
	session_init();
	hosttrack_init();
	connpool_init();
	dns_init();

	e = register_with_url();
	if (e == NULL) {
#ifndef ROM
		e = _swix(ResourceFS_RegisterFiles, _IN(0), Resources());
#endif
		if (e == NULL) {
			if (getenv(Module_Title "$Path")) {
				e = messages_file_open(Module_Title ":Messages");
			}
			else {
				e = messages_file_open("Resources:$.Resources.URL." Module_Title ".Messages");
			}
			if (e == NULL) {
				callback_pending_flag = 0;
				e = _swix(OS_CallEvery, _INR(0,2), 5*100, callevery_entry, pw); /* 5 secs */
				if (e != NULL) messages_file_close();
			}
#ifndef ROM
			if (e != NULL) (void) _swix(ResourceFS_DeregisterFiles, _IN(0), Resources());
#endif
		}
		if (e != NULL) (void) try_to_deregister();
	}
	else {
		#ifndef ROM
  	        if (e->errnum == NO_SUCH_SWI) {
  	                _kernel_oserror *newe = find_error();
  	                const size_t length = strlen(strcpy(newe->errmess, e->errmess));

  	                newe->errnum = NO_SUCH_SWI;
			strncat(newe->errmess, " (Load the URL module)", sizeof(newe->errmess) - length);
			e = newe;
  	        }
		#endif
	}

	if (e == NULL) {
		read_cookie_file();
	}

	return e;
}

void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
        #ifdef TRACE
        protocol_debug("Service &%X: R0 = %d for URL version  %03d\n", service_number, r->r[0], r->r[2]);
        #endif
        (void) pw;

	if (service_number == URL_SSL_AVAILABLE) {
	        switch (r->r[0]) {
	                case 0:
	                        if (security_ssl_arrived(r->r[2])) {
	                                (void) try_to_register();
	                        }
		                break;
	                case 1:
	                        (void) security_ssl_gone();
	                	if (registered_https) {
                                        try_to_deregister_for_https();
                                }
	                	break;
                        default:
                                break;
	        }
	}
	else {
		switch (r->r[0]) {
		        case 0:
	        		(void) try_to_register();
	        		break;
		        case 1:
		        	(void) try_to_deregister();
	        		break;
		        default:
		        	break;
		}
	}
}

/*************************************************************/
/* _kernel_oserror *module_kill(int fatal, int podule, ...   */
/*************************************************************/
/* When we are killed off, deregister ourselves from the URL */
/* module						     */
/*************************************************************/
_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
	(void) podule;
	(void) fatal;

	_swix(OS_RemoveTickerEvent, _INR(0,1), callevery_entry, pw);
	if (callback_pending_flag) {
		_swix(OS_RemoveCallBack, _INR(0,1), callback_entry, pw);
	}

	ses_kill_all();
	session_init();
	hosttrack_exit();
	connpool_exit();
	http_free_agent();

	messages_file_close();
#ifndef ROM
	_swix(ResourceFS_DeregisterFiles, _IN(0), Resources());
#endif

	(void) try_to_deregister();

	return NULL;
}


/*************************************************************/
/* _kernel_oserror *swi_handler(int swi_no, _kernel_swi_...  */
/*************************************************************/
/* Upon a SWI call into this module decide what to do and    */
/* how to do it and all that. Just an excuse for a case	     */
/* statement						     */
/*************************************************************/
static _kernel_oserror *swi_handler_2(int swi_offset, _kernel_swi_regs *r, void *pw)
{
	/* Instead of adding the SWI chunk to the offset and comparing with the
	 * various cmhg defined macros, mask off the SWI chunk identifier at
	 * compile time.  This may well enable the C compiler to do better when
	 * it builds the switch table
	 */
	(void) pw;

	switch (swi_offset) {
		/* Generic protocol module SWIs */
		case HTTP_GetData - HTTP_00:
			return(http_start(r));

		case HTTP_Status - HTTP_00:
			return(http_status(r));

		case HTTP_ReadData - HTTP_00:
			return(http_readdata(r));

		case HTTP_Stop - HTTP_00:
			return(http_stop(r));

		/* Generic security protocol module SWIs */
		case HTTP_SecureGetData - HTTP_00:
		        if (security_ssl_available()) {
				return(https_start(r));
		        }
		        else {
		                return(make_error(HTTP_NO_SECURITY, 0));
		        }

		case HTTP_SecureStatus - HTTP_00:
		        if (security_ssl_available()) {
				return(https_status(r));
		        }
		        else {
		                return(make_error(HTTP_NO_SECURITY, 0));
		        }

		case HTTP_SecureReadData - HTTP_00:
		        if (security_ssl_available()) {
				return(https_readdata(r));
		        }
		        else {
		                return(make_error(HTTP_NO_SECURITY, 0));
		        }

		case HTTP_SecureStop - HTTP_00:
		        if (security_ssl_available()) {
				return(https_stop(r));
		        }
		        else {
		                return(make_error(HTTP_NO_SECURITY, 0));
		        }

		/* HTTP specific SWIs (at the upper end of the SWI range */
		#ifdef COOKIE
		case HTTP_EnumerateCookies - HTTP_00:
			return(enumerate_cookies(r));

		case HTTP_ConsumeCookie - HTTP_00:
			return(consume_cookie(r));

		case HTTP_AddCookie - HTTP_00:
			return(add_cookie(r));
		#endif

		default:
			return(error_BAD_SWI);
	}
}

_kernel_oserror *swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
	_kernel_oserror *e;
	#ifdef TRACE
	static const char *swi[] = {"GetData", "Status", "ReadData", "Stop"};
	protocol_debug(">>Handling SWI &%02X (HTTP_%s%s) for R1=%08x\n", swi_offset,
		(swi_offset >= 16 && (swi_offset-16) < (sizeof(swi)/sizeof(char*))) ? "Secure" : "",
		swi_offset < (sizeof(swi)/sizeof(char*)) ? swi[swi_offset] :
		(swi_offset >= 16 && (swi_offset-16) < (sizeof(swi)/sizeof(char*))) ? swi[swi_offset-16] :
		swi_offset == (HTTP_EnumerateCookies - HTTP_00) ? "EnumerateCookies" :
		swi_offset == (HTTP_ConsumeCookie - HTTP_00) ? "ConsumeCookie" :
		swi_offset == (HTTP_AddCookie - HTTP_00) ? "AddCookie" : "UNKNOWN!",
		r->r[1]);
	#endif
	e = swi_handler_2(swi_offset, r, pw);
	#ifdef TRACE
	protocol_debug("<<Exiting  SWI &%02X (HTTP_%s%s) for R1=%08x  %s "
		"R0=%s; R2=%d (=&%p); R3=%d; R4=%d; R5=%d\n\n", swi_offset,
		(swi_offset >= 16 && (swi_offset-16) < (sizeof(swi)/sizeof(char*))) ? "Secure" : "",
		swi_offset < (sizeof(swi)/sizeof(char*)) ? swi[swi_offset] :
		(swi_offset >= 16 && (swi_offset-16) < (sizeof(swi)/sizeof(char*))) ? swi[swi_offset-16] :
		swi_offset == (HTTP_EnumerateCookies - HTTP_00) ? "EnumerateCookies" :
		swi_offset == (HTTP_ConsumeCookie - HTTP_00 ) ? "ConsumeCookie" :
		swi_offset == (HTTP_AddCookie - HTTP_00 ) ? "AddCookie" : "UNKNOWN!",
		r->r[1],
		e ? e->errmess : "<V flag clear>",
		e ? "<errorblock>" : protocol_network_states(r->r[0]),
		r->r[2], (void *) r->r[2], r->r[3], r->r[4], r->r[5]);
	#endif

	return e;
}

/*************************************************************/
/* _kernel_oserror *return_error(int status_code)	     */
/*************************************************************/
/* Given a HTTP internal status code generate the correct    */
/* error block.						     */
/*************************************************************/
_kernel_oserror *return_error(int status_code)
{
	#ifdef TRACE
	protocol_debug("http:return_error called (code %d)\n",status_code);
	#endif

	if (status_code < HTTP_CONNECT_TIMED_OUT) {
	        #ifdef TRACE
	        protocol_debug("!!>> BAD STATUS CODE IN RETURN_ERROR\n");
	        #endif
	        return NULL;
	}
	switch (status_code) {
		case HTTP_ERROR_NOLINK:
			/* This is not *really* an error (fatal)... */
			/* StB: so what's it doing here then?? */
			return NULL;

		case HTTP_CONNECT_TIMED_OUT:
			return make_error(HTTP_HOST_CONNECT_ERROR,0);

		case HTTP_ERROR_READ:
			return make_error(HTTP_DATA_READ_ERROR,0);

		case HTTP_ERROR_HOSTNAME:
			return make_error(HTTP_HOST_NOT_FOUND,0);

		case HTTP_ERROR_BADSESSION:
			return make_error(HTTP_BAD_SESSION_ERROR,0);

		case HTTP_ERROR_NOCONNECTION:
			return make_error(HTTP_CONNECTION_FAILED,0);

		case HTTP_ERROR_BAD_METHOD:
			return make_error(HTTP_METHOD_UNSUPPORTED,0);

		case HTTP_ERROR_INIT_ERR:
			return make_error(HTTP_METHOD_INIT_ERR,0);

		case HTTP_ERROR_NO_PARSE:
			return make_error(HTTP_BAD_URL_PARSE,0);

		case HTTP_ERROR_NO_PROXY:
			return make_error(HTTP_PROXY_NOT_FOUND,0);

		case HTTP_ERROR_NO_SECURITY:
		        return make_error(HTTP_NO_SECURITY,0);

		default:
			return make_error(HTTP_GENERAL_ERROR,0);
	}
}


/* Poll the active connection pool */
int callback_handler(_kernel_swi_regs *r, void *pw)
{
	(void) pw;
	(void) r;

	if (callback_pending_flag == 0) {
		return 1;
	}

	connpool_poll();
	session_check();

	callback_pending_flag = 0;
	return 1;
}

int callevery_handler(_kernel_swi_regs *r, void *pw)
{
	(void) r;

	if (callback_pending_flag==1) {
		return 1;
	}

	callback_pending_flag = 1;
	_swix(OS_AddCallBack, _INR(0,1), callback_entry, pw);
	return 1;
}


/* RISC OS 3.1 SVC mode realloc is broken, so we must provide our own */
char *module_realloc(void *ptr, size_t size)
{
        #ifdef TRACE
        protocol_debug("module_realloc(%p, %d)\n", ptr, size);
        #endif
	if (!clibrary_realloc_routine_is_buggy) return realloc(ptr, size);

        if (ptr == NULL) {
                return malloc(size);
        }
        if (size == 0) {
                free(ptr);
		return NULL;
        }
	else {
	        const int *rma_block = ptr;
	        const size_t newsize = size - (rma_block[-1] - 4);
	        char *newptr;

		if (_swix(OS_Module, _IN(0)|_INR(2,3)|_OUT(2), 0xD, ptr, newsize, &newptr) != NULL) {
		        return NULL;
		}

		return newptr;
	}
}
@


1.11
log
@Correction to resources path
Remove hardwired path element, use Module_Title instead.
Delete (already disabled) TinyStubs support.
Delete support for old CMHG.

Version 0.97. Tagged as 'HTTP-0_97'
@
text
@d27 1
d104 14
d119 1
a119 2
				ver, Module_Help " (SSL) © Acorn 1998 (Built: "
				Module_Date ")");
@


1.10
log
@Makefile recreated from fragments
Detail:
  Now exports its SWIs to Interface/HTTP.h
  Replaced defunct www.acorn.com address in the test program.
Admin:
  Submission for TCP/IP bounty.

Version 0.94. Tagged as 'HTTP-0_94'
@
text
@a40 21
#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

/* TinySupport SWIs.  This does not work if any library static data
 * is used within the module.  This means errno (__errno) and __ctype
 * (as used by any macro call to is.... functions)  If you re-enable
 * this SWI call, this module will fail to work at all.
 */
#define NO_TINYSTUBS

#ifdef ROM
#ifndef NO_TINYSTUBS
static _kernel_oserror *__ROM;
#define TinySupport_Share	(0x82c43)
#define TinySupport_Die		(0x82c41)
#endif
#endif

d121 1
a121 1
			Module_VersionNumber, Module_Help " © Acorn 1997-8 (Built: " Module_Date ")");
d176 1
a176 1
_kernel_oserror *module_init(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
a182 6
      	#ifdef ROM
      	#ifndef NO_TINYSTUBS
    	__ROM = _swix(TinySupport_Share, _IN(0), pw);
    	#endif
	#endif

d203 1
a203 1
				e = messages_file_open("Resources:$.Resources.URL." "HTTP" ".Messages");
a302 6
        #ifdef ROM
        #ifndef NO_TINYSTUBS
    	if(!__ROM) _swix(TinySupport_Die, 0);
    	#endif
	#endif

@


1.9
log
@  Removed TinyStubs from ROM build
Detail:
  Can't use __ctype with TinyStubs.
Admin:
  Built from clean; verified RAM build works.

Version 0.84. Tagged as 'HTTP-0_84'
@
text
@d72 1
a72 1
extern int messages_file(void);
d222 3
a224 3
	        #ifndef ROM
		e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
	        #endif
d237 3
a239 3
			#ifndef ROM
			if (e != NULL) (void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
			#endif
d324 3
a326 3
	#ifndef ROM
	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
	#endif
@


1.8
log
@HTTP 0.82

* First block of data was being thrown on the floor during
  decompression in some cases.  This is now fixed.

* Debug output now knows about cookie related SWIs and won't claim that
  they are unknown SWIs.

* Transfers which are both Chunked and compressed work correctly now.
@
text
@d47 7
d55 1
d57 3
d204 4
a207 2
        #ifdef ROM
	__ROM = _swix(0xa2c43, _IN(0), pw);
d330 4
a333 2
	#ifdef ROM
	if(!__ROM) _swix(0xa2c41, 0);
@


1.7
log
@Single character cookie names weren't being accepted as valid.  They now
are.  This means that my.yahoo.com will now work properly (at least as
far as cookie support is concerned, anyway ;-)

Also fixed a bug that was yet to appear but that would have hit eventually
whereby you couldn't load more than 100 cookies from a previously saved
cookie file.

Security errors are thrown if one of the secure SWIs is called and the SSL
services are not available any more.

Several comments added to explain deviances from standards and why we need
them.

More fixes to portlist handling to allow parameter-less Port attributes to
work on cookies.
@
text
@d414 3
a416 3
		swi_offset == HTTP_EnumerateCookies ? "EnumerateCookies" :
		swi_offset == HTTP_ConsumeCookie ? "ConsumeCookie" :
		swi_offset == HTTP_AddCookie ? "AddCookie" : "UNKNOWN!",
d426 3
a428 3
		swi_offset == HTTP_EnumerateCookies ? "EnumerateCookies" :
		swi_offset == HTTP_ConsumeCookie ? "ConsumeCookie" :
		swi_offset == HTTP_AddCookie ? "AddCookie" : "UNKNOWN!",
@


1.6
log
@Debug code now HTTPS aware; registration of https: protocol with the URL
module now sanitised.
@
text
@d357 6
a362 1
			return(https_start(r));
d365 6
a370 1
			return(https_status(r));
d373 6
a378 1
			return(https_readdata(r));
d381 6
a386 1
			return(https_stop(r));
@


1.5
log
@* https: support infrastructure has been added.  The API calls to the
  Internet module are now vectored through a look up table so that the
  calls for an https request are sent via the AcornSSL module.   The HTTP
  module will only register https: protocol capability with the URL
  module if the AcornSSL module is present, thus allowing transparent
  addition of SSL support without requiring an update for the HTTP
  module.

* There is no encryption code in the HTTP module at all.  It is all
  confined to the AcornSSL module.
@
text
@d390 2
a391 1
	protocol_debug(">>Handling SWI &%02X (HTTP_%s) for R1=%08x\n", swi_offset,
d401 1
a401 1
	protocol_debug("<<Exiting  SWI &%02X (HTTP_%s) for R1=%08x  %s "
d403 1
@


1.4
log
@Version number increase for all modules for final Expresso release.
@
text
@d37 1
d56 4
d89 2
a90 1
	HTTP_PROXY_NOT_FOUND	= HTTP_ERROR_NUM + 9	/* Unable to contact the proxy */
d104 20
a123 1
static int registered;
d127 8
a134 1
        _kernel_oserror *e;
d136 2
a137 5
	if (registered) return NULL;
	e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0, HTTP_00, "http:",
		Module_VersionNumber, Module_Help " © Acorn 1997-8 (Built: " Module_Date ")");
	if (e == NULL) {
	        registered = 1;
d139 1
d143 11
d156 2
a157 1
        if (!registered) {
d161 1
a161 1
                registered = 0;
d197 2
a198 1
	registered = 0;
d200 1
a255 1
        (void) service_number;
d257 28
a284 9
	switch (r->r[0]) {
	        case 0:
	        	(void) try_to_register();
	        	break;
	        case 1:
	        	(void) try_to_deregister();
	        	break;
	        default:
	        	break;
d355 12
d392 1
d403 1
d466 3
@


1.3
log
@Dependency on Syslog removed
Const-ness of veneers modified on the basis of the CMHG version number to
avoid build problems.
@
text
@d60 1
d62 1
@


1.2
log
@Build process improvements :
* Standardised make process in common with other protocol modules.
* Resources put into standard structure for internationalisation
* Standard !MkClean, !MkRom, !MkRam to build different versions
@
text
@d40 6
d142 1
a142 1
_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
 * © Acorn Computers Ltd. 1997
d28 1
a28 1
#include "HTTP.h"
d40 4
d46 11
a78 4
#define URL_PROTOCOL_REGISTER	(0x83e20)
#define URL_PROTOCOL_DEREGISTER (0x83e21)

extern int messages_file(void);
d95 1
a95 1
        
d119 2
a120 2
        
	e = try_to_register(); 
d123 1
d126 3
d143 4
d157 1
d159 1
d161 6
a166 1
			e = messages_file_open("Resources:$.Resources.HTTPFetcher.Messages");
d172 1
d174 1
d179 1
d188 1
d241 1
d243 1
d246 5
d376 1
a376 1
			
d427 1
a427 1
	        
d443 1
a443 1
		
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
