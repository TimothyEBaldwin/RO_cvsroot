head	1.2;
access;
symbols
	HTTP-1_00:1.2
	HTTP-0_99:1.2
	HTTP-0_98:1.2
	HTTP-0_97:1.2
	HTTP-0_96:1.2
	HTTP-0_95:1.2
	HTTP-0_94:1.2
	HTTP-0_93:1.2
	HTTP-0_92:1.2
	HTTP-0_91:1.2
	HTTP-0_90:1.2
	HTTP-0_89:1.2
	HTTP-0_88:1.2
	dcotton_autobuild_BaseSW:1.2
	HTTP-0_87:1.2
	HTTP-0_86:1.2
	HTTP-0_85:1.2
	HTTP-0_84:1.2
	HTTP-0_83:1.2
	sbrodie_HTTP_0_82:1.2
	sbrodie_HTTP_0_81:1.2
	sbrodie_HTTP_0_80:1.2
	sbrodie_HTTP_0_79:1.2
	sbrodie_HTTP_0_78:1.2
	sbrodie_HTTP_0_77:1.2
	sbrodie_HTTP_0_76:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_HTTP_0_73:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.03.19.17.37.01;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.30;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.30;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* https: support infrastructure has been added.  The API calls to the
  Internet module are now vectored through a look up table so that the
  calls for an https request are sent via the AcornSSL module.   The HTTP
  module will only register https: protocol capability with the URL
  module if the AcornSSL module is present, thus allowing transparent
  addition of SSL support without requiring an update for the HTTP
  module.

* There is no encryption code in the HTTP module at all.  It is all
  confined to the AcornSSL module.
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * HTTP (c.status)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "sys/errno.h"
#include "module.h"
#include "protocol.h"

/*************************************************************/
/* _kernel_oserror http_status(_kernel_swi_regs *r)	     */
/*************************************************************/
/* The call to stop getting data from a site. The values in  */
/* ther registers are:					     */
/*		       r0 = Flags word			     */
/*		       r1 = pollword of client		     */
/* On exit they are:					     */
/*		       r0 = status word			     */
/*		       r2 = server response code (0 if none) */
/*		       r3 = bytes read so far if known	     */
/*		       r4 = Total bytes to be transferred    */
/*************************************************************/
_kernel_oserror *http_status(_kernel_swi_regs *r)
{
	int *pollword=(int *)r->r[1];
	Session *ses;

	ses = find_session((unsigned int)pollword);
	if (ses == NULL) {
                r->r[0] = r->r[2] = r->r[3] = r->r[4] = 0;
	        return NULL;
	}


	switch (ses->done) {
		case HTTP_DNS:
		case HTTP_NEWSESSION:
		case HTTP_NOHOST:
		case HTTP_CONNECTING:
			r->r[0] = *((int *)ses->id) = status_NOT_YET_CONNECTED;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_SENDING_REQUEST:
			*((int *)ses->id) = r->r[0] = status_CONNECTED_TO_SERVER;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_SENT_REQUEST:
			r->r[0]		  =
			*((int *)ses->id) = status_WAIT_INITIAL_RESPONSE;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_RECEIVING:
			r->r[0]		  =
			*((int *)ses->id) = status_WAIT_FOR_BODY;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_RECEIVING_BODY:
			r->r[0]		  =
			*((int *)ses->id) = status_READING_REPLY;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_ERROR_NOLINK:
			r->r[0]		  =
			*((int *)ses->id) = status_ABORTED;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_CONNECT_TIMED_OUT:
		case HTTP_ERROR_READ:
		case HTTP_ERROR_HOSTNAME:
		case HTTP_ERROR_NO_PROXY:
		case HTTP_ERROR:
		case HTTP_ERROR_NOCONNECTION:
			#ifdef TML
			Printf("http:status> session:%x returning status %d (sd=%d)\n",ses,ses->done,ses->sd);
			#endif
			return return_error(ses->done);

		default:
			r->r[0] = *((int *)ses->id) = status_ALL_DATA_RECEIVED;
			r->r[2] = ses->server_code;
			break;
	}

	r->r[3] = ses->sent;

	/* Note.  The following condition is CORRECT.  We don't want to confuse the caller
	 * into thinking that there is no more data left just because we've seen a
	 * Content-Length: 0   header.  We need it to continue to read the header information.
	 * Only once we are into body transfers can be legally set this to zero
	 */
	r->r[4] = ses->size > 0 ? ses->size : -1;

	return NULL;
}

_kernel_oserror *https_status(_kernel_swi_regs *r)
{
        return http_status(r);
}

@


1.1
log
@Initial revision
@
text
@d122 6
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
