head	1.6;
access;
symbols
	HTTP-1_00:1.6
	HTTP-0_99:1.6
	HTTP-0_98:1.6
	HTTP-0_97:1.6
	HTTP-0_96:1.6
	HTTP-0_95:1.5
	HTTP-0_94:1.4
	HTTP-0_93:1.4
	HTTP-0_92:1.4
	HTTP-0_91:1.4
	HTTP-0_90:1.4
	HTTP-0_89:1.4
	HTTP-0_88:1.4
	dcotton_autobuild_BaseSW:1.4
	HTTP-0_87:1.4
	HTTP-0_86:1.4
	HTTP-0_85:1.4
	HTTP-0_84:1.3
	HTTP-0_83:1.3
	sbrodie_HTTP_0_82:1.2
	sbrodie_HTTP_0_81:1.2
	sbrodie_HTTP_0_80:1.2
	sbrodie_HTTP_0_79:1.2
	sbrodie_HTTP_0_78:1.1
	sbrodie_HTTP_0_77:1.1;
locks; strict;
comment	@# @;


1.6
date	2018.05.12.09.30.09;	author rool;	state Exp;
branches;
next	1.5;
commitid	tfbwo3c54IBZoZBA;

1.5
date	2018.05.12.09.23.19;	author rool;	state Exp;
branches;
next	1.4;
commitid	eK50JBULf75EmZBA;

1.4
date	99.02.15.15.58.37;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	98.08.24.14.41.27;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.03.31.13.35.37;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.03.19.17.36.57;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Error and cookie handling improvements
Detail:
  Use GETDCI4ERRNO macro to safely extract errno from RISC OS error blocks.
  Fix for NULL pointer dereference when adding the first cookie to the cookie queue.
Admin:
  Submission for TCP/IP bounty.

Version 0.96. Tagged as 'HTTP-0_96'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * HTTP (c.config)
 *
 * © Acorn Computers Ltd. 1998
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "sys/errno.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "module.h"
#include "socklib.h"
#include "security.h"

static int ssl_module_present;

static int sec_socketioctl(int, unsigned long, ...);
static int sec_socket(int domain, int type, int protocol);
static int sec_connect(int s, const struct sockaddr *name, int namelen);
static int sec_shutdown(int s, int how);
static int sec_socketclose(int d);
static int sec_getsockopt(int s, int level, int optname,
		      void *optval, int *optlen);
static int sec_socketwrite(int s, const void *buf, unsigned int len);
static int sec_recv(int s, void *data, size_t size, int flags);

int security_ssl_available(void)
{
        return ssl_module_present;
}

void security_init(void)
{
        ssl_module_present = 0;
}

int security_ssl_arrived(int ver)
{
        if (ver < 3) {
                /* We do not support the 'old' interface */
                return security_ssl_gone();
        }
        ssl_module_present = ver;
        return ssl_module_present;
}

int security_ssl_gone(void)
{
        ssl_module_present = 0;
        return ssl_module_present;
}

const sock_vtbl *security_get_ssl_vtable(void)
{
        static const sock_vtbl vtable = {
                sec_socketioctl,
                sec_socket,
                sec_connect,
                sec_shutdown,
                sec_socketclose,
                sec_getsockopt,
                sec_socketwrite,
                sec_recv
        };
        return &vtable;
}

const sock_vtbl *security_get_normal_vtable(void)
{
        static const sock_vtbl vtable = {
                socketioctl,
                socket,
                connect,
                shutdown,
                socketclose,
                getsockopt,
                socketwrite,
                recv
        };
        return &vtable;
}

/* ---- implementation veneers to the secure socket stuff */

#ifdef FAKE_SSL_MODULE
/* Dummy implementation */

static int sec_socketioctl(int s, unsigned long op, ...)
{
        void *data;
        va_list ap;
        va_start(ap, op);
	data = va_arg(ap, void *);
        va_end(ap);
        return socketioctl(s, op, data);
}

static int sec_socket(int domain, int type, int protocol)
{
        return socket(domain, type, protocol);
}

static int sec_connect(int s, const struct sockaddr *name, int namelen)
{
        return connect(s, name, namelen);
}

static int sec_shutdown(int s, int how)
{
        return shutdown(s, how);
}

static int sec_socketclose(int d)
{
        return socketclose(d);
}

static int sec_getsockopt(int s, int level, int optname,
		      void *optval, int *optlen)
{
        return getsockopt(s, level, optname, optval, optlen);
}

static int sec_socketwrite(int s, const void *buf, unsigned int len)
{
        return socketwrite(s, buf, len);
}

static int sec_recv(int s, void *data, size_t size, int flags)
{
        return recv(s, data, size, flags);
}

#else

#include "sys/dcistructs.h"
#include "Interface/AcornSSL.h"

static int sec_socketioctl(int s, unsigned long op, ...)
{
        _kernel_oserror *e;
        int result;

        void *data;
        va_list ap;
        va_start(ap, op);
	data = va_arg(ap, void *);
        va_end(ap);

        e = _swix(AcornSSL_Ioctl, _INR(0,2)|_OUT(0),
        	s, op, data, &result);
        if (!e) return result;
        errno = GETDCI4ERRNO(e->errnum);
        return -1;
}

static int sec_socket(int domain, int type, int protocol)
{
        _kernel_oserror *e;
	int result;

	e = _swix(AcornSSL_Creat, _INR(0,2)|_OUT(0),
		domain, type, protocol,
		&result);
	if (!e) return result;
	errno = GETDCI4ERRNO(e->errnum);
	return -1;
}

static int sec_connect(int s, const struct sockaddr *name, int namelen)
{
        _kernel_oserror *e;
	int result;

	e = _swix(AcornSSL_Connect, _INR(0,2)|_OUT(0),
		s, name, namelen,
		&result);
	if (!e) return result;
	errno = GETDCI4ERRNO(e->errnum);
	return -1;
}

static int sec_shutdown(int s, int how)
{
        _kernel_oserror *e;
	int result;

	e = _swix(AcornSSL_Shutdown, _INR(0,1)|_OUT(0),
		s, how,
		&result);
	if (!e) return result;
	errno = GETDCI4ERRNO(e->errnum);
	return -1;
}

static int sec_socketclose(int d)
{
        _kernel_oserror *e;
	int result;

	e = _swix(AcornSSL_Close, _IN(0)|_OUT(0),
		d,
		&result);
	if (!e) return result;
	errno = GETDCI4ERRNO(e->errnum);
	return -1;
}

static int sec_getsockopt(int s, int level, int optname,
		      void *optval, int *optlen)
{
        _kernel_oserror *e;
	int result;

	e = _swix(AcornSSL_Getsockopt, _INR(0,4)|_OUT(0),
		s, level, optname, optval, optlen,
		&result);
	if (!e) return result;
	errno = GETDCI4ERRNO(e->errnum);
	return -1;
}

static int sec_socketwrite(int s, const void *buf, unsigned int len)
{
        _kernel_oserror *e;
	int result;

	e = _swix(AcornSSL_Write, _INR(0,2)|_OUT(0),
		s, buf, len,
		&result);
	if (!e) return result;
	errno = GETDCI4ERRNO(e->errnum);
	return -1;
}

static int sec_recv(int s, void *data, size_t size, int flags)
{
        _kernel_oserror *e;
	int result;

	e = _swix(AcornSSL_Recv, _INR(0,3)|_OUT(0),
		s, data, size, flags,
		&result);
	if (!e) return result;
	errno = GETDCI4ERRNO(e->errnum);
	return -1;
}
#endif
@


1.5
log
@Build fix
Detail:
  Use updated AcornSSL.h header location and contents.
Admin:
  Requires Export-0_10.

Version 0.95. Tagged as 'HTTP-0_95'
@
text
@d156 1
d173 1
a173 1
        errno = e->errnum;
d186 1
a186 1
	errno = e->errnum;
d199 1
a199 1
	errno = e->errnum;
d212 1
a212 1
	errno = e->errnum;
d225 1
a225 1
	errno = e->errnum;
d239 1
a239 1
	errno = e->errnum;
d252 1
a252 1
	errno = e->errnum;
d265 1
a265 1
	errno = e->errnum;
@


1.4
log
@  Commit of old modified sources from last September.
Detail:
  Added knowledge of OPTIONS and TRACE to the option decoder.
  Now knows about new SWI names of AcornSSL module.
Admin:
  Tested briefly.
  Requires AcornSSL-0_08 header export to have occurred.

Version 0.85. Tagged as 'HTTP-0_85'
@
text
@d156 1
a156 1
#include "AcornSSL.h"
d181 1
a181 1
	e = _swix(AcornSSL_Socket, _INR(0,2)|_OUT(0),
@


1.3
log
@  Cookie header parser tweaked to strip redundant characters.
  Updated version number control to srccommit.
  AcornSSL version mismatch detection code added for safety.
  No longer enables event generation for HTTP sockets.
Detail:
  * Cookie parser was getting confused by a trailing ; character on
  the end of set-cookie headers being sent to it by the Electronics
  Weekly web server.  This meant that it was rejecting the key
  cookie being used to control access to the site thus preventing
  people from accessing the site.
  * AcornHTTP now checks that the AcornSSL module is implementing a
  known SWI interface (the AcornSSL SWI interface changed in 0.03)
  * No longer uses ioctl(..FIOASYNC..) to enable event generation as
  the events aren't required and it wastes system resource to have
  them going off.
  * Makefile contains rules for generating .i files suitable for
  feeding to the McCabe toolset.
Admin:
  Built from clean; tested on Ursula & 3.70; verified access to
  Electronics Weekly (www.electronicsweekly.co.uk) now works.

Version 0.83. Tagged as 'HTTP-0_83'
@
text
@d169 1
a169 1
        e = _swix(HTTPS_Ioctl, _INR(0,2)|_OUT(0),
d181 1
a181 1
	e = _swix(HTTPS_Socket, _INR(0,2)|_OUT(0),
d194 1
a194 1
	e = _swix(HTTPS_Connect, _INR(0,2)|_OUT(0),
d207 1
a207 1
	e = _swix(HTTPS_Shutdown, _INR(0,1)|_OUT(0),
d220 1
a220 1
	e = _swix(HTTPS_Close, _IN(0)|_OUT(0),
d234 1
a234 1
	e = _swix(HTTPS_Getsockopt, _INR(0,4)|_OUT(0),
d247 1
a247 1
	e = _swix(HTTPS_Write, _INR(0,2)|_OUT(0),
d260 1
a260 1
	e = _swix(HTTPS_Recv, _INR(0,3)|_OUT(0),
@


1.2
log
@* Duplicate header suppression code moved to later in the header generator
  so that it actually does override user headers as it is supposed to.
  (affects Cookie2 and Accept-Encoding headers)

* Security code includes header exported by AcornSSL to <CExport$Dir>
  instead of requiring it to be present in a specific place relative to
  the HTTP sources.
@
text
@d59 4
@


1.1
log
@* https: support infrastructure has been added.  The API calls to the
  Internet module are now vectored through a look up table so that the
  calls for an https request are sent via the AcornSSL module.   The HTTP
  module will only register https: protocol capability with the URL
  module if the AcornSSL module is present, thus allowing transparent
  addition of SSL support without requiring an update for the HTTP
  module.

* There is no encryption code in the HTTP module at all.  It is all
  confined to the AcornSSL module.
@
text
@d152 1
a152 1
#include "^.SSL.h.SSLHdr"
@
