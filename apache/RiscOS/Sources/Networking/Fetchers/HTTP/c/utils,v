head	1.2;
access;
symbols
	HTTP-1_00:1.2
	HTTP-0_99:1.2
	HTTP-0_98:1.2
	HTTP-0_97:1.2
	HTTP-0_96:1.2
	HTTP-0_95:1.2
	HTTP-0_94:1.2
	HTTP-0_93:1.2
	HTTP-0_92:1.2
	HTTP-0_91:1.2
	HTTP-0_90:1.2
	HTTP-0_89:1.2
	HTTP-0_88:1.2
	dcotton_autobuild_BaseSW:1.2
	HTTP-0_87:1.2
	HTTP-0_86:1.2
	HTTP-0_85:1.2
	HTTP-0_84:1.2
	HTTP-0_83:1.2
	sbrodie_HTTP_0_82:1.2
	sbrodie_HTTP_0_81:1.2
	sbrodie_HTTP_0_80:1.2
	sbrodie_HTTP_0_79:1.2
	sbrodie_HTTP_0_78:1.2
	sbrodie_HTTP_0_77:1.2
	sbrodie_HTTP_0_76:1.2
	sbrodie_Expresso_final_190298:1.2
	sbrodie_HTTP_0_73:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.02.11.10.51.57;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.31;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.31;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Build process improvements :
* Standardised make process in common with other protocol modules.
* Resources put into standard structure for internationalisation
* Standard !MkClean, !MkRom, !MkRam to build different versions
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Example of a fetcher module for use with Acorn URL system
 *
 * © Acorn Computers Ltd. 1995-1997
 *
 */

/* File:    utils.c
 * Purpose: miscellaneous utility functions
 * Author:  IDJ
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#define ERR_BLOCKS 3


static int messages_fd[4];


_kernel_oserror *find_error (void)
{
	static _kernel_oserror global_error_block[ERR_BLOCKS];
   	static int errblock = 0;

	errblock = (errblock+1) % ERR_BLOCKS;
	return &global_error_block[errblock];
}


/* ------------------------------------ raising errors ---------------------------------------- */


extern _kernel_oserror *make_error (int err_num, int num_args, ...)
{
   /*
    * Generate a RISC OS error block.
    */

   va_list           ap;
   char             *s, token[4];
   int               i=4;
   _kernel_oserror  *e, *ptr;
   char             *sub[4]={0,0,0,0};

	ptr = find_error();

   ptr->errnum = err_num;

   num_args = (num_args>4)?4:num_args;

   for (va_start (ap, num_args); num_args--; i++)
   {
      s      = va_arg (ap, char *);
      sub[i] =   (s && *s) ? s : NULL; /* copy (pointer to args)s into registers */
   }

   sprintf (token, "E%02x", err_num&0x1f);

   e = _swix(MessageTrans_Lookup, _INR(0,7), messages_fd, token, ptr->errmess,
                  sizeof(*ptr) - sizeof(ptr->errnum) /* 252! */,
                  sub[0],sub[1],sub[2],sub[3]);
   va_end (ap);
   return ptr;
}


/* --------------------------------------- message file handling ------------------------------ */


extern _kernel_oserror *messages_file_open (char *messages_filename)
{
        memset(messages_fd, '\0', sizeof(messages_fd));
    return _swix(MessageTrans_OpenFile, _INR(0,2), messages_fd, messages_filename, 0);
}


extern _kernel_oserror *messages_file_close (void)
{
    return _swix(MessageTrans_CloseFile, _IN(0), messages_fd);
}

@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
	static _kernel_oserror global_error_block[ERR_BLOCKS] ={{0,0}};
d68 1
a68 1
	
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
