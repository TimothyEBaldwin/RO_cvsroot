head	1.3;
access;
symbols
	HTTP-1_00:1.3
	HTTP-0_99:1.3
	HTTP-0_98:1.3
	HTTP-0_97:1.3
	HTTP-0_96:1.3
	HTTP-0_95:1.3
	HTTP-0_94:1.3
	HTTP-0_93:1.2
	HTTP-0_92:1.2
	HTTP-0_91:1.2
	HTTP-0_90:1.2
	HTTP-0_89:1.2
	HTTP-0_88:1.2
	dcotton_autobuild_BaseSW:1.2
	HTTP-0_87:1.2
	HTTP-0_86:1.2
	HTTP-0_85:1.2
	HTTP-0_84:1.2
	HTTP-0_83:1.1.1.1
	sbrodie_HTTP_0_82:1.1.1.1
	sbrodie_HTTP_0_81:1.1.1.1
	sbrodie_HTTP_0_80:1.1.1.1
	sbrodie_HTTP_0_79:1.1.1.1
	sbrodie_HTTP_0_78:1.1.1.1
	sbrodie_HTTP_0_77:1.1.1.1
	sbrodie_HTTP_0_76:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_HTTP_0_73:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2018.05.12.09.08.21;	author rool;	state Exp;
branches;
next	1.2;
commitid	Yb3QUAvruF0whZBA;

1.2
date	98.09.16.12.05.05;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.31;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.31;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Makefile recreated from fragments
Detail:
  Now exports its SWIs to Interface/HTTP.h
  Replaced defunct www.acorn.com address in the test program.
Admin:
  Submission for TCP/IP bounty.

Version 0.94. Tagged as 'HTTP-0_94'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * HTTP (c.test)
 *
 * Copyright (C) Acorn Computers Ltd. 1997, 1998.
 *
 *
 */

#include "kernel.h"	/* registers */
#include "swis.h"	/* swis */
#include <stdio.h>	/* file handling */
#include <stdlib.h>	/* for malloc/calloc */
#include <string.h>	/* string handling */
#include <errno.h>	/* Include errno variable */

#define URLBASE 0x83e00
#define URLREG  URLBASE
#define URLGET  URLBASE+1
#define URLREAD URLBASE+3
#define URLDERE URLBASE+6

#define BUFFER_SIZE	(10240)

static int URL_handle = 0;

static void die(void)
{
  (void) _swix(URLDERE, _INR(0,1), 0, URL_handle);
}

static _kernel_oserror *fail(_kernel_oserror *e)
{
  if (e) {
          (void) fprintf(stderr, "httptest: %s\n", e->errmess);
          exit(1);
  }
  return 0;
}

int main(int argc, char *argv[])
{
  const char *url_to_get=argc>1?argv[1]:"http://www.castle-technology.co.uk/";
  FILE *out=argc>2?fopen(argv[2],"wb"):stdout;

  if (!out) {
          fprintf(stderr, "Unable to open output file\n");
          return 1;
  }

  fail(_swix(URLREG, _IN(0)|_OUT(1), 0, &URL_handle));
  (void) atexit(die);
  fail(_swix(URLGET, _INR(0,5), 0, URL_handle, 1, url_to_get, 0, 2));

  for (;;) {
    char buffer[BUFFER_SIZE];
    int flags, done;
    fail(_swix(URLREAD, _INR(0,3)|_OUT(0)|_OUT(4), 0, URL_handle, buffer,
      sizeof(buffer), &flags, &done));
    if (done>0) (void) fwrite(buffer, done, 1, out);
    if (flags & 96) break;
  }

  (void) fclose(out);
  return 0;
}
@


1.2
log
@  Removed TinyStubs from ROM build
Detail:
  Can't use __ctype with TinyStubs.
Admin:
  Built from clean; verified RAM build works.

Version 0.84. Tagged as 'HTTP-0_84'
@
text
@d56 1
a56 1
  const char *url_to_get=argc>1?argv[1]:"http://www.acorn.com/browser/";
@


1.1
log
@Initial revision
@
text
@d16 4
a19 2
 * Small quick and ready test of the HTTP module. Relies on there
 * being a URL "http://www/" avaliable!
a20 3
 * ADH 06/08/97: Well, OK, it's way out of date now. But someone
 *               may find an adapted version useful in future, so
 *               I decided not to get rid of it.
a22 2
#include "stdio.h"	/* file handling */
#include "stdlib.h"	/* for malloc/calloc */
d25 4
a28 3
#include "string.h"	/* string handling */
#include "errno.h"	/* Include errno variable */
#include "module.h"	/* Module name etc */
a32 1
#define URLSTAT URLBASE+2
a33 2
#define URLSETP URLBASE+4
#define URLSTOP URLBASE+5
d36 1
a36 6
int main(int argc, char *argv[])
{
  _kernel_swi_regs r;
  char *url_to_get=argc>1?argv[1]:"http://www.acorn.com/acorn/";
  char *buffer;
  int pollword;
d38 1
a38 1
  buffer=calloc(10240,1);
d40 4
a43 3
  r.r[0] = 0;
  _kernel_swi(URLREG,&r,&r);
  pollword=r.r[1];
d45 8
a52 7
  r.r[0]=0;
  r.r[1]=pollword;
  r.r[2]=1;
  r.r[3]=(int)url_to_get;
  r.r[4]=0;
  r.r[5]=2;
  _kernel_swi(URLGET,&r,&r);
d54 4
a57 15
keep_trying:

  r.r[0]=0;
  r.r[1]=pollword;
  r.r[2]=(int)buffer;
  r.r[3]=10240;
  _kernel_swi(URLREAD,&r,&r);

  printf("Registers:\n R0=%d\n*R1=%d\n R4=%d\nR5=%d",
  		       r.r[0],*(int *)r.r[1],r.r[4],r.r[5]);

  if ((r.r[4] == 0) && (r.r[0] <= 31)) goto keep_trying;

  buffer[r.r[4]]='\0';
  printf("Dataread:\n>>>>%s<<<<\n",buffer);
d59 17
a75 1
  if (r.r[0] <= 31) goto keep_trying;
d77 1
a77 2
  r.r[1]=pollword;
  _kernel_swi(URLDERE,&r,&r);
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
