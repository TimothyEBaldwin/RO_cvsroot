head	1.2;
access;
symbols
	HTTP-1_00:1.2
	HTTP-0_99:1.2
	HTTP-0_98:1.2
	HTTP-0_97:1.2
	HTTP-0_96:1.2
	HTTP-0_95:1.2
	HTTP-0_94:1.2
	HTTP-0_93:1.2
	HTTP-0_92:1.2
	HTTP-0_91:1.2
	HTTP-0_90:1.2
	HTTP-0_89:1.2
	HTTP-0_88:1.2
	dcotton_autobuild_BaseSW:1.2
	HTTP-0_87:1.2
	HTTP-0_86:1.2
	HTTP-0_85:1.2
	HTTP-0_84:1.2
	HTTP-0_83:1.2
	sbrodie_HTTP_0_82:1.2
	sbrodie_HTTP_0_81:1.2
	sbrodie_HTTP_0_80:1.2
	sbrodie_HTTP_0_79:1.1.1.1
	sbrodie_HTTP_0_78:1.1.1.1
	sbrodie_HTTP_0_77:1.1.1.1
	sbrodie_HTTP_0_76:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_HTTP_0_73:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.04.21.11.31.10;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.34;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.34;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Implementation detail documentation updates to cover recent API changes
and stuff not generally suitable for specification documents.
@
text
@
Protocol specific information
-----------------------------

SWI HTTP_GetData
================

Meaning of flags in R0 on entry to this SWI are:

  bit 0 set:   R6 points to alternative user agent identifier
  bit 1 set:   R5 is the length of data pointed to by R4 (if R4 not zero)
  bits 2-7 :   reserved
  bit 29:      reserved for internal use (secure connection flag)
  bit 30:      reserved for use by WebServe (request to not add cookies)
  bit 31:      reserved for use by URL module (if set, this is a proxy request)

Methods in bottom 8 bits of R2 are (NOT a bitfield)
          1:   GET
          2:   HEAD
          3:   reserved - do not use
          4:   POST
      5,6,7:   reserved - do not use
          8:   PUT

Bits 8-15 of R2 are the type of data wanted (if R0:1 set, else in bits 0-31 of R5)
          0:   Body only
          1:   Head only
          2:   Both

Bits 16-31 are reserved and should be zero




SWI "HTTP_EnumerateCookies"
===========================
On entry:
R0 = flags (bit 0 set means action, unset means info only)
     ie only reset bit 16 if bit zero is set
     (bit 1 set means cookies in list, unset means in queue)
R1 = unique cookie handle, 0 for initial call

On exit:
R0 = flags (bit 0 set means secure channel should be used)
R1 = unique cookie handle, 0 for no more cookies
R2 = total number of cookies created
R3 = number of cookies not read
R4 = pointer to domain name string
R5 = pointer to NAME string
R6 = pointer to VALUE string
R7 = pointer to path string



SWI "HTTP_ConsumeCookie"
========================
On entry:
R0 - flags, bit zero set for accept or unset for reject
R1 - session, forget what this is for
R2 - cookie handle

No exit defined


SWI "HTTP_AddCookie"
====================
On entry:
R0 - flags, bit 0 set for secure
R1 - name
R2 - value
R3 - expires
R4 - path
R5 - domain

No exit defined


The following SWI has been withdrawn in favour of an additional parameter
supplied to HTTP_Start.

## SWI "HTTP_UserAgent"
## ====================
## On entry:
## R0 - flags (currently reserved)
## R1 - session ID (ie pollword address, as per all other normal SWIs)
## R2 - pointer to a null terminated string giving the user agent string
## 
## No exit defined
@


1.1
log
@Initial revision
@
text
@d12 4
d20 1
d22 1
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
