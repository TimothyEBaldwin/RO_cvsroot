head	1.2;
access;
symbols
	HTTP-1_00:1.2
	HTTP-0_99:1.2
	HTTP-0_98:1.2
	HTTP-0_97:1.2
	HTTP-0_96:1.2
	HTTP-0_95:1.2
	HTTP-0_94:1.2
	HTTP-0_93:1.2
	HTTP-0_92:1.2
	HTTP-0_91:1.2
	HTTP-0_90:1.2
	HTTP-0_89:1.2
	HTTP-0_88:1.2
	dcotton_autobuild_BaseSW:1.2
	HTTP-0_87:1.2
	HTTP-0_86:1.2
	HTTP-0_85:1.2
	HTTP-0_84:1.2
	HTTP-0_83:1.2
	sbrodie_HTTP_0_82:1.2
	sbrodie_HTTP_0_81:1.2
	sbrodie_HTTP_0_80:1.2
	sbrodie_HTTP_0_79:1.2
	sbrodie_HTTP_0_78:1.2
	sbrodie_HTTP_0_77:1.2
	sbrodie_HTTP_0_76:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_HTTP_0_73:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.03.19.17.37.14;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.32;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.32;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* https: support infrastructure has been added.  The API calls to the
  Internet module are now vectored through a look up table so that the
  calls for an https request are sent via the AcornSSL module.   The HTTP
  module will only register https: protocol capability with the URL
  module if the AcornSSL module is present, thus allowing transparent
  addition of SSL support without requiring an update for the HTTP
  module.

* There is no encryption code in the HTTP module at all.  It is all
  confined to the AcornSSL module.
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Generic (h.generic)
 *
 */

/* Duplicate a string.  Passing NULL returns NULL.  Failure to allocate
 * space for duplicate returns NULL.
 */
extern char *Strdup(const char */*s1*/);
extern char *Strndup(const char *s1, size_t size);

/* Case-insensitive versions of strcmp and strncmp - exit conditions
 * identical to the normal case-sensitive versions
 */
extern int Strcmp_ci(const char *first, const char *second);
extern int Strncmp_ci(const char *first, const char *second, size_t limit);


/* Closes a socket - this routine MUST be used instead of socketclose()
 * if you want to make sure that persistent connections work.
 */
extern int close_socket(Session */*ses*/, int */*psd*/);
extern char *Strdup_ext(const char *s1, const size_t extra);
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
extern int close_socket(int */*psd*/);
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
