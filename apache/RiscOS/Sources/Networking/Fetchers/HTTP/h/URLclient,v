head	1.1;
branch	1.1.1;
access;
symbols
	HTTP-1_00:1.1.1.1
	HTTP-0_99:1.1.1.1
	HTTP-0_98:1.1.1.1
	HTTP-0_97:1.1.1.1
	HTTP-0_96:1.1.1.1
	HTTP-0_95:1.1.1.1
	HTTP-0_94:1.1.1.1
	HTTP-0_93:1.1.1.1
	HTTP-0_92:1.1.1.1
	HTTP-0_91:1.1.1.1
	HTTP-0_90:1.1.1.1
	HTTP-0_89:1.1.1.1
	HTTP-0_88:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	HTTP-0_87:1.1.1.1
	HTTP-0_86:1.1.1.1
	HTTP-0_85:1.1.1.1
	HTTP-0_84:1.1.1.1
	HTTP-0_83:1.1.1.1
	sbrodie_HTTP_0_82:1.1.1.1
	sbrodie_HTTP_0_81:1.1.1.1
	sbrodie_HTTP_0_80:1.1.1.1
	sbrodie_HTTP_0_79:1.1.1.1
	sbrodie_HTTP_0_78:1.1.1.1
	sbrodie_HTTP_0_77:1.1.1.1
	sbrodie_HTTP_0_76:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_HTTP_0_73:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.01.29.18.32.32;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.32;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * URL (URLclient.h)
 *
 * © Acorn Computers Ltd. 1997
 */
 
/* The following two calls are purely veneers to SWI URL_ParseURL */
extern _kernel_oserror *URL_find_lengths(int flags, const char *url, const char *rel, URL *u);
extern _kernel_oserror *URL_find_data(int flags, const char *url, const char *rel, URL *u);
extern _kernel_oserror *URL_compose_from_components(int flags, const char *url, const char *rel, URL *u);

/* The following call resolves a relative URL to the given base URL and returns
 * the canonical resolved form of the URL.
 */
extern char *URL_resolve(int flags, const char *url, const char *rel);

/* The following call is used to ensure that the given URL is in canonical form.
 * It returns NULL on failure, and a pointer to a newly malloced block if it has
 * succeeded.  It is equivalent to URL_resolve(flags, url, NULL);
 */
extern char *URL_canonicalise(int flags, const char *url);

/* The following call resolves a relative URL to the given base URL and returns
 * the minimal relative link which would navigate from the base to the relative
 *
 */
extern char *URL_minimise(int flags, const char *url, const char *rel);
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
