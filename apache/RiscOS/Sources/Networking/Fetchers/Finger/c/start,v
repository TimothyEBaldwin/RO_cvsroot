head	1.3;
access;
symbols
	Finger-0_08:1.3
	Finger-0_07:1.2
	Finger-0_06:1.2
	sbrodie_Finger_0_05:1.2
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_Finger_0_04:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2007.09.22.20.22.12;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	98.03.11.13.26.21;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.19;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.19;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Made MemCheck stuff optional.
Detail:
  This component wouldn't build in the ROOL release because it required the
  MemCheck library which is a part of the Dr Smiths Toolkit (we can't
  release that). Unfortunately, Dr Smiths was installed in another build on
  the build machine so the dependency wasn't spotted.

  Now this feature is compiled conditionally upon the existence of the
  MemCheck_MEMCHECK symbol at build time.
Admin:
  Tested on IYONIX build machine with clean ROOL build environment.
Notes:
  Changes by Steve Revill.

Version 0.08. Tagged as 'Finger-0_08'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Generic (c.start)
 *
 * Requires customisation
 *
 * © Acorn Computers Ltd. 1997
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "sys/errno.h"
#include "socklib.h"
#include "module.h"
#include "protocol.h"
#include "utils.h"
#include "generic.h"
#include "urlstruct.h"
#include "urlclient.h"
#include "connect.h"

#ifdef MemCheck_MEMCHECK
#   include "MemCheck:MemCheck.h"
#endif

static void start_get_request(const char *url, char **host, int *port, char **uri, char **urlcopy);
static char *finger_generate_selector(const char *);

_kernel_oserror *generic_start(_kernel_swi_regs *r)
{
	int flags	= r->r[0];
	int *pollword 	= (int *)r->r[1];
	char *url	= (char *)r->r[3];
	char *data	= (char *)r->r[4];
	int style	= r->r[5];
	char *uri;
	char *urlcopy;
	char *host;
	int  port;
	Session *ses;

	#ifdef TRACE
	protocol_debug("Asking for url %s\n", url);
	#endif
	(void) flags;
	(void) style;

#ifdef MemCheck_MEMCHECK
	MemCheck_RegisterMiscBlock((void *) url,strlen(url)+1);
	MemCheck_SetBlockAccess((void *) url,1,0);
#endif

	/* Check to see if this session already exists before doing anything */
	if (find_session(r->r[1])) {
		return make_error(errortoken_ERROR_BAD_SESSION, 0);
	}

	/* Create a session control block */
	ses = new_session();
	if (ses == NULL) {
	        return make_error(errortoken_ERROR_NO_SESSION, 0);
	}

	/* fill in a few bits */
	ses->id	      	= (unsigned int)pollword;
	ses->uri	= NULL;
	ses->url	= NULL;

	/* Now work out the host and port and URI bit we are after */
	host = NULL;
	uri  = NULL;
	start_get_request(url, &host, &port, &uri, &urlcopy);
	if (host == NULL) {
	        host = Strdup("localhost");
	}
	if (host == NULL || urlcopy == NULL) {
                kill_session(ses);
	        return make_error(errortoken_ERROR_NO_URL_DECODE, 0);
	}

	#ifdef TRACE
	protocol_debug("Host:%s Port:%d URI:%s URL:%s\n", host, port, uri, urlcopy);
	#endif

	ses->uri 	= uri;
	ses->selector	= finger_generate_selector(uri);
	ses->url	= urlcopy;
	ses->data	= data;

	ses->host	= host;
	ses->port	= port;

#ifdef MemCheck_MEMCHECK
	MemCheck_UnRegisterMiscBlock((void *) url);
#endif

	/* establish the connection */
	#ifdef TRACE
	protocol_debug("Preparing to send URL %s to %s port %d\n", uri, host, port);
	#endif

	ses->state = protostate_INITIAL;
	return NULL;
}

static void start_get_request(const char *url, char **host, int *port, char **uri, char **urlcopy)
{
	URL		u;
	_kernel_oserror	*e;
	int		i;
	size_t		path_len, query_len;

	*uri = NULL;
	*host = NULL;
	*urlcopy = NULL;
	*port = CONNECT_DEFAULT_PORT_NUMBER;

	e = URL_find_lengths(0, url, NULL, &u);
	if (e) {
		#ifdef TRACE
		protocol_debug("start_get_request> URL_find_lengths> %s\n", e->errmess);
		#endif
		return;
	}

	path_len = u.lengths.path;
	query_len = u.lengths.query;

	for (i=0; i<URL_fields; ++i) switch (i) {
		case urlfield_HOST:
		case urlfield_PORT:
		case urlfield_FULL:
		case urlfield_SCHEME:
			if (u.len[i]) {
				u.field[i] = malloc(u.len[i]);
			}
			break;

		case urlfield_PATH:
			u.data.path = malloc(path_len + query_len + 2);
			if (u.data.path != NULL) {
				if (query_len == 0) {
					u.data.query = NULL;
				}
				else {
					u.data.query = u.data.path + path_len;
				}
				if (path_len == 0) {
					u.data.path[0] = '\0';
					++path_len;
					if (query_len > 0) {
						u.data.query++;
					}
				}
			}
			else {
				u.data.query = NULL;
			}
			break;

		case urlfield_QUERY:
			break;

		default:
			u.field[i] = NULL;
			break;
	}

	e = URL_find_data(0, url, NULL, &u);
	if (e) {
		#ifdef TRACE
		protocol_debug("start_get_request> URL_find_data> %s\n", e->errmess);
		#endif
		for (i=0; i<URL_fields; ++i) {
			if (i != urlfield_QUERY) free(u.field[i]);
		}
		return;
	}

	if (path_len > 0 && query_len > 0) {
		u.data.path[path_len - 1] = '?';
	}

	*uri = u.data.path;
	*host = u.data.host;
	*urlcopy = u.data.full;

	if (u.data.port) {
		int i = atoi(u.data.port);
		if (i != 0) *port = i;
		free(u.data.port);
	}

	/* Check the scheme here if we handle multiple schemes */
	free(u.data.scheme);
}

static char *finger_generate_selector(const char *uri)
{
        size_t length = strlen(uri);
        char *sel = malloc(length+1), *s = sel;
        const char *p = uri;

	if (sel == NULL) return NULL;

	for (;;) {
	        int c = *p++;
	        *s = c;
	        if (c == 0) break;
	        if (iscntrl(c)) continue;
	        ++s;
	        if (c != '%') {
	                continue;
	        }
	        else {
	                unsigned int hi = (unsigned int) p[0];
	                unsigned int lo = (unsigned int) p[1];
	                unsigned int value;

	        	if (!isxdigit(hi) || !isxdigit(lo)) continue;
			/* The Norcroft compiler does surprisingly well on this
			 * digit evaluation code.
			 */
	                hi -= '0';
	                if (hi > 10) hi -= ('a' - '0' - 10);
	                if (hi > 16) hi -= ('A' - 'a');
	                lo -= '0';
	                if (lo > 10) lo -= ('a' - '0' - 10);
	                if (lo > 16) lo -= ('A' - 'a');
	                value = (hi << 4) | lo;
	                if (!iscntrl(value)) {
	                        s[-1] = value;
		                p += 2;
		        }
	        }
	}

	#ifdef TRACE
	protocol_debug("selector is `%s'\n", sel);
	#endif
        return sel;
}
@


1.2
log
@Fix for empty selectors causing problems.  malloc(0) was being called and
the returned block being written into.  The end result appears to have
been that the module was sending a (hex-encoded :-) copy of zero page to the
remote server!
@
text
@d40 3
a42 1
#include "MemCheck:MemCheck.h"
d66 1
d69 1
d111 1
d113 1
@


1.1
log
@Initial revision
@
text
@d213 1
a213 1
        char *sel = malloc(length), *s = sel;
d231 1
a231 1
	                
d250 3
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
