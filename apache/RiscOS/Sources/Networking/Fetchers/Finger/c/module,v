head	1.6;
access;
symbols
	Finger-0_08:1.6
	Finger-0_07:1.5
	Finger-0_06:1.5
	sbrodie_Finger_0_05:1.4
	sbrodie_Expresso_final_190298:1.4
	sbrodie_Finger_0_04:1.3
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.09.22.20.22.12;	author srevill;	state Exp;
branches;
next	1.5;

1.5
date	98.09.16.12.28.26;	author sbrodie;	state Exp;
branches;
next	1.4;

1.4
date	98.02.18.10.32.47;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	98.02.11.19.37.20;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	98.02.11.12.00.22;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.19;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.19;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  Made MemCheck stuff optional.
Detail:
  This component wouldn't build in the ROOL release because it required the
  MemCheck library which is a part of the Dr Smiths Toolkit (we can't
  release that). Unfortunately, Dr Smiths was installed in another build on
  the build machine so the dependency wasn't spotted.

  Now this feature is compiled conditionally upon the existence of the
  MemCheck_MEMCHECK symbol at build time.
Admin:
  Tested on IYONIX build machine with clean ROOL build environment.
Notes:
  Changes by Steve Revill.

Version 0.08. Tagged as 'Finger-0_08'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Generic (c.module)
 *
 * THIS FILE REQUIRES CUSTOMISATION
 *
 * © Acorn Computers Ltd. 1997
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "sys/errno.h"
#include "module.h"
#include "FingerHdr.h"
#include "utils.h"
#include "protocol.h"
#include "connect.h"

#ifdef MemCheck_MEMCHECK
#  include "MemCheck:MemCheck.h"
#endif

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

/* TinySupport SWIs.  This does not work if any library static data
 * is used within the module.  This means errno (__errno) and __ctype
 * (as used by any macro call to is.... functions)  If you re-enable
 * this SWI call, this module will fail to work at all.
 */
#define NO_TINYSTUBS

#ifdef ROM
#ifndef NO_TINYSTUBS
static _kernel_oserror *__ROM;
#define TinySupport_Share	(0x82c43)
#define TinySupport_Die		(0x82c41)
#endif
#endif

#define NO_SUCH_SWI	(0x1E6)

#define URL_PROTOCOL_REGISTER 0x83e20
#define URL_PROTOCOL_DEREGISTER 0x83e21

#ifndef ROM
extern int messages_file(void);
#endif

#ifndef ROM
#ifdef DEFINE_ERRNO
int __errno;
#endif
#endif

static int callback_pending_flag;

/* Sets clibrary_realloc_routine_is_buggy to 1 if RISC OS 3.1 or earlier (ROM realloc is broken) */
static int clibrary_realloc_routine_is_buggy;
static void module_check_os_version(void)
{
        int os;
        (void) _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &os);
        clibrary_realloc_routine_is_buggy = (os <= 0xA4);
}


static int registered;

static _kernel_oserror *try_to_register(void)
{
        _kernel_oserror *e;

	if (registered) return NULL;
	e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0,
		Finger_00,
		CONNECT_DEFAULT_PROTOCOL_NAME ":",
		Module_VersionNumber, Module_Help " © Acorn 1997-8 (Built: " Module_Date ")");
	if (e == NULL) {
	        registered = 1;
	}
        return e;
}

static _kernel_oserror *try_to_deregister(void)
{
        if (!registered) {
                return NULL;
        }
        else {
                registered = 0;
		return _swix(URL_PROTOCOL_DEREGISTER, _INR(0,1), 0, Finger_00);
        }
}

static _kernel_oserror *register_with_url(void)
{
        _kernel_oserror *e;

	e = try_to_register();
	if (e == NULL) return e;
	if (e->errnum != NO_SUCH_SWI) return e;
        #ifndef ROM
	e = _swix(OS_Module, _INR(0,1), 1 /* Load */, "System:Modules.Network.URL.URL");
	return try_to_register();
	#else
	return NULL;
        #endif
}

/*************************************************************/
/* _kernel_oserror *module_init(char *cmd_fail, int podu...  */
/*************************************************************/
/* Start up and register ourselves with the URL module       */
/*************************************************************/
_kernel_oserror *module_init(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
    	_kernel_oserror *e;

    	(void) podule_base;
    	(void) cmd_tail;

      	#ifdef ROM
      	#ifndef NO_TINYSTUBS
    	__ROM = _swix(TinySupport_Share, _IN(0), pw);
    	#endif
	#endif

	registered = 0;
	callback_pending_flag = 0;

	module_check_os_version();

#ifdef MemCheck_MEMCHECK
  	MemCheck_InitNoDebug();
        MemCheck_SetQuitting(0,0);
  	MemCheck_RedirectToFilename("adfs::4.Trace.Genericmem");
  	MemCheck_InterceptSCLStringFunctions();
  	MemCheck_RegisterMiscBlock((void *)0x01c0001c,8164);
  	MemCheck_SetStoreMallocFunctions(1);
  	MemCheck_SetReportFrees(1);
  	MemCheck_SetChecking(0,0);
#endif

  	e = register_with_url();
  	if (e) {
                #ifndef ROM
  	        if (e->errnum == NO_SUCH_SWI) {
  	                _kernel_oserror *newe = find_error();
  	                const size_t length = strlen(strcpy(newe->errmess, e->errmess));

  	                newe->errnum = NO_SUCH_SWI;
			strncat(newe->errmess, " (Load the URL module)", sizeof(newe->errmess) - length);
			return newe;
  	        }
                #endif
    		return e;
    	}

        #ifndef ROM
        e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
  	if (e) {
  	        (void) try_to_deregister();
    		return e;
        }
        #endif

        if (getenv(Module_Title "$Path")) {
                e = messages_file_open(Module_Title ":Messages");
        }
        else {
        	e = messages_file_open("Resources:$.Resources.URL." "Finger" ".Messages");
        }
  	if (e) {
                #ifndef ROM
                (void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
                #endif
  	        (void) try_to_deregister();
    		return e;
    	}

  	callback_pending_flag = 0;
  	/* Set up a callevery */
  	e = _swix(OS_CallEvery, _INR(0,2), 15*100-1, callevery_entry, pw);
  	if (e) {
    		messages_file_close();
                #ifndef ROM
    		(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
                #endif
                (void) try_to_deregister();
    		return e;
        }

  	return NULL;
}


void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
        #ifdef TRACE
        protocol_debug("Service &%X: R0 = %d for URL version  %03d\n", service_number, r->r[0], r->r[2]);
        #endif
        (void) pw;
        (void) service_number;

	switch (r->r[0]) {
	        case 0:
	        	(void) try_to_register();
	        	break;
	        case 1:
	        	(void) try_to_deregister();
	        	break;
	        default:
	        	break;
	}
}


_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
    	(void) fatal;
    	(void) podule;

	(void) _swix(OS_RemoveTickerEvent, _INR(0,1), callevery_entry, pw);
    	if (callback_pending_flag) {
      		(void) _swix(OS_RemoveCallBack, _INR(0,1), callback_entry, pw);
    	}
    	messages_file_close();
        #ifndef ROM
    	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
	#endif

	ses_kill_all();

        (void) try_to_deregister();

        #ifdef ROM
        #ifndef NO_TINYSTUBS
    	if(!__ROM) _swix(TinySupport_Die, 0);
    	#endif
	#endif

    	return NULL;
}


_kernel_oserror *swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
	(void) pw;

  	switch (swi_offset) {
     		case Finger_GetData - Finger_00:
       			return(generic_start(r));

     		case Finger_Status - Finger_00:
       			return(generic_status(r));

     		case Finger_ReadData - Finger_00:
       			return(generic_readdata(r));

     		case Finger_Stop - Finger_00:
		       return (generic_stop(r));

     		default:
       			return(error_BAD_SWI);
        }
}


int callback_handler(_kernel_swi_regs *r, void *pw)
{
    	(void) pw;
    	(void) r;

    	if (!callback_pending_flag) {
      		return 1;
      	}

    	callback_pending_flag = 0;
	return 1;
}

int callevery_handler(_kernel_swi_regs *r, void *pw)
{
        (void) r;
  	if (callback_pending_flag) {
   		return 1;
   	}
  	callback_pending_flag = 1;
  	(void) _swix(OS_AddCallBack, _INR(0,1), callback_entry, pw);
  	return 1;
}

/* RISC OS 3.1 SVC mode realloc is broken, so we must provide our own */
char *module_realloc(void *ptr, size_t size)
{
        #ifdef TRACE
        protocol_debug("module_realloc(%p, %d)\n", ptr, size);
        #endif
	if (!clibrary_realloc_routine_is_buggy) return realloc(ptr, size);

        if (ptr == NULL) {
                return malloc(size);
        }
        if (size == 0) {
                free(ptr);
		return NULL;
        }
	else {
	        const int *rma_block = ptr;
	        const size_t newsize = size - (rma_block[-1] - 4);
	        char *newptr;

		if (_swix(OS_Module, _IN(0)|_INR(2,3)|_OUT(2), 0xD, ptr, newsize, &newptr) != NULL) {
		        return NULL;
		}

		return newptr;
	}
}
@


1.5
log
@  Removed TinyStubs stuff from ROM build.
  Moved to srccommit
Detail:
  Summary above wraps it up.
Admin:
  Verified clean RAM build works.

Version 0.06. Tagged as 'Finger-0_06'
@
text
@d35 3
a37 1
#include "MemCheck:MemCheck.h"
d153 1
d162 1
@


1.4
log
@Version number increase for all modules for final Expresso release.
@
text
@d43 7
d51 1
d53 3
d140 4
a143 2
       	#ifdef ROM
    	__ROM = _swix(0xa2c43, _IN(0), pw);
d253 3
a255 1
    	if(!__ROM) _swix(0xa2c41, 0);
@


1.3
log
@Dependency on Syslog removed
Const-ness of veneers modified on the basis of the CMHG version number to
avoid build problems.
@
text
@d57 1
d59 1
@


1.2
log
@Build process improvements :
* Standardised make process in common with other protocol modules.
* Resources put into standard structure for internationalisation
* Standard !MkClean, !MkRom, !MkRam to build different versions
@
text
@d37 6
d120 1
a120 1
_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
 * 
d30 1
a30 1
#include "FingerMod.h"
d37 4
d46 8
d71 1
a71 1
        
d76 1
a76 1
		Module_VersionNumber, Module_Help " © Acorn 1997 (Built: " Module_Date ")");
d97 2
a98 2
        
	e = try_to_register(); 
d101 1
d104 3
d117 1
a117 1
    
d121 4
d141 1
d150 1
d154 2
a155 1
  	e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
d160 8
a167 2
  
  	e = messages_file_open("Resources:$.Resources.URL." Module_Title ".Messages");
d169 3
a171 1
    		(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
d181 1
d183 2
a184 1
  	        (void) try_to_deregister();
d223 1
d225 1
d229 5
a233 1
       (void) try_to_deregister();
d293 1
a293 1
	        
d309 1
a309 1
		
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
