head	1.4;
access;
symbols
	Generic-0_11:1.4
	Generic-0_10:1.4
	Generic-0_09:1.3
	Generic-0_08:1.2
	Generic-0_07:1.1.1.1
	Generic-0_06:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_GenericFetcher_0_04:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2009.04.24.02.02.54;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.22.20.22.39;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.20.15.05.34;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.22;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.22;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fixed a reference to MemCheck that caused the component to fail to build.

Spotted by Rob F Johnson, ticket #149

Version 0.10. Tagged as 'Generic-0_10'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Generic (c.start)
 *
 * Requires customisation
 *
 * © Acorn Computers Ltd. 1997
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "sys/errno.h"
#include "socklib.h"
#include "module.h"
#include "protocol.h"
#include "utils.h"
#include "generic.h"
#include "connect.h"
#include "URLstruct.h"
#include "URLclient.h"

#ifdef MemCheck_MEMCHECK
#  include "MemCheck:MemCheck.h"
#endif

static void start_get_request(const char *url, char **host, int *port, char **uri, char **urlcopy);

_kernel_oserror *generic_start(_kernel_swi_regs *r)
{
        int flags       = r->r[0];
        int *pollword   = (int *)r->r[1];
        char *url       = (char *)r->r[3];
        char *data      = (char *)r->r[4];
        int style       = r->r[5];
        char *uri;
        char *urlcopy;
        char *host;
        int  port;
        Session *ses;

        dprintf(("start_1", "Asking for url %s\n", url));
        (void) flags;

#ifdef MemCheck_MEMCHECK
        MemCheck_RegisterMiscBlock((void *) url,strlen(url)+1);
        MemCheck_SetBlockAccess((void *) url,1,0);
#endif

        /* Check to see if this session already exists before doing anything */
        if (find_session(r->r[1])) {
                return make_error(errortoken_ERROR_BAD_SESSION, 0);
        }

        /* Create a session control block */
        ses = new_session();
        if (ses == NULL) {
                return make_error(errortoken_ERROR_NO_SESSION, 0);
        }

        /* fill in a few bits */
        ses->id         = (unsigned int)pollword;
        ses->uri        = NULL;
        ses->url        = NULL;

        if (flags & flags_DATA_LENGTH_IN_R5) {
                style = ((r->r[2] >> 8) & 0xFF);
                r->r[2] &= 0xFF;
        }
        else {
                style = r->r[5];
        }

        /* Now work out the host and port and URI bit we are after */
        host = NULL;
        uri  = NULL;
        start_get_request(url, &host, &port, &uri, &urlcopy);
        if (host == NULL) {
                kill_session(ses);
                return make_error(errortoken_ERROR_NO_URL_DECODE, 0);
        }

        dprintf(("start_1", "Host:%s Port:%d URI:%s URL:%s\n", host, port, uri, urlcopy));

        ses->uri        = uri;
        ses->url        = urlcopy;
        ses->data       = data;

        ses->host       = host;
        ses->port       = port;

        //MemCheck_UnRegisterMiscBlock((void *) url);

        /* establish the connection */
        dprintf(("start_1", "Preparing to send URL %s to %s port %d\n", uri, host, port));

        ses->state = protostate_INITIAL;
        return NULL;
}

static void start_get_request(const char *url, char **host, int *port, char **uri, char **urlcopy)
{
        URL             u;
        _kernel_oserror *e;
        int             i;
        size_t          path_len, query_len;

        *uri = NULL;
        *host = NULL;
        *urlcopy = NULL;
        *port = CONNECT_DEFAULT_PORT_NUMBER;

        e = URL_find_lengths(0, url, NULL, &u);
        if (e) {
                dprintf(("start_1", "start_get_request> URL_find_lengths> %s\n", e->errmess));
                return;
        }

        path_len = u.lengths.path;
        query_len = u.lengths.query;

        for (i=0; i<URL_fields; ++i) switch (i) {
                case urlfield_HOST:
                case urlfield_PORT:
                case urlfield_FULL:
                case urlfield_SCHEME:
                        if (u.len[i]) {
                                u.field[i] = malloc(u.len[i]);
                        }
                        break;

                case urlfield_PATH:
                        u.data.path = malloc(path_len + query_len + 2);
                        if (u.data.path != NULL) {
                                if (query_len == 0) {
                                        u.data.query = NULL;
                                }
                                else {
                                        u.data.query = u.data.path + path_len;
                                }
                                if (path_len == 0) {
                                        u.data.path[0] = '\0';
                                        ++path_len;
                                        if (query_len > 0) {
                                                u.data.query++;
                                        }
                                }
                        }
                        else {
                                u.data.query = NULL;
                        }
                        break;

                case urlfield_QUERY:
                        break;

                default:
                        u.field[i] = NULL;
                        break;
        }

        e = URL_find_data(0, url, NULL, &u);
        if (e) {
                dprintf(("start_1", "start_get_request> URL_find_data> %s\n", e->errmess));
                for (i=0; i<URL_fields; ++i) {
                        if (i != urlfield_QUERY) free(u.field[i]);
                }
                return;
        }

        if (path_len > 0 && query_len > 0) {
                u.data.path[path_len - 1] = '?';
        }

        *uri = u.data.path;
        *host = u.data.host;
        *urlcopy = u.data.full;

        if (u.data.port) {
                int i = atoi(u.data.port);
                if (i != 0) *port = i;
                free(u.data.port);
        }

        /* Check the scheme here if we handle multiple schemes */
        free(u.data.scheme);
}
@


1.3
log
@  Made MemCheck stuff optional.
Detail:
  This component wouldn't build in the ROOL release because it required the
  MemCheck library which is a part of the Dr Smiths Toolkit (we can't
  release that). Unfortunately, Dr Smiths was installed in another build on
  the build machine so the dependency wasn't spotted.

  Now this feature is compiled conditionally upon the existence of the
  MemCheck_MEMCHECK symbol at build time.
Admin:
  Tested on IYONIX build machine with clean ROOL build environment.
Notes:
  Changes by Steve Revill.

Version 0.09. Tagged as 'Generic-0_09'
@
text
@d109 1
a109 1
        MemCheck_UnRegisterMiscBlock((void *) url);
@


1.2
log
@  Modified to use DebugLib
Detail:
  Since these modifications were made before customising the code as the
    LDAP module, there seems little point doing that all again, so this
    is the latest DebugLib-enabled version of the generic fetcher.
Admin:
  Module builds and runs (albeit not doing anything much)

Version 0.08. Tagged as 'Generic-0_08'
@
text
@d40 3
a42 1
#include "MemCheck:MemCheck.h"
d62 1
d65 1
@


1.1
log
@Initial revision
@
text
@d46 46
a91 48
	int flags	= r->r[0];
	int *pollword 	= (int *)r->r[1];
	char *url	= (char *)r->r[3];
	char *data	= (char *)r->r[4];
	int style	= r->r[5];
	char *uri;
	char *urlcopy;
	char *host;
	int  port;
	Session *ses;

	#ifdef TRACE
	protocol_debug("Asking for url %s\n", url);
	#endif
	(void) flags;

	MemCheck_RegisterMiscBlock((void *) url,strlen(url)+1);
	MemCheck_SetBlockAccess((void *) url,1,0);

	/* Check to see if this session already exists before doing anything */
	if (find_session(r->r[1])) {
		return make_error(errortoken_ERROR_BAD_SESSION, 0);
	}

	/* Create a session control block */
	ses = new_session();
	if (ses == NULL) {
	        return make_error(errortoken_ERROR_NO_SESSION, 0);
	}

	/* fill in a few bits */
	ses->id	      	= (unsigned int)pollword;
	ses->uri	= NULL;
	ses->url	= NULL;

	if (flags & flags_DATA_LENGTH_IN_R5) {
	        style = ((r->r[2] >> 8) & 0xFF);
	        r->r[2] &= 0xFF;
	}
	else {
	        style = r->r[5];
	}

	/* Now work out the host and port and URI bit we are after */
	host = NULL;
	uri  = NULL;
	start_get_request(url, &host, &port, &uri, &urlcopy);
	if (host == NULL) {
d93 2
a94 2
	        return make_error(errortoken_ERROR_NO_URL_DECODE, 0);
	}
d96 1
a96 3
	#ifdef TRACE
	protocol_debug("Host:%s Port:%d URI:%s URL:%s\n", host, port, uri, urlcopy);
	#endif
d98 3
a100 3
	ses->uri	= uri;
	ses->url	= urlcopy;
	ses->data	= data;
d102 2
a103 2
	ses->host	= host;
	ses->port	= port;
d105 1
a105 1
	MemCheck_UnRegisterMiscBlock((void *) url);
d107 2
a108 4
	/* establish the connection */
	#ifdef TRACE
	protocol_debug("Preparing to send URL %s to %s port %d\n", uri, host, port);
	#endif
d110 2
a111 2
	ses->state = protostate_INITIAL;
	return NULL;
d116 81
a196 85
	URL		u;
	_kernel_oserror	*e;
	int		i;
	size_t		path_len, query_len;

	*uri = NULL;
	*host = NULL;
	*urlcopy = NULL;
	*port = CONNECT_DEFAULT_PORT_NUMBER;

	e = URL_find_lengths(0, url, NULL, &u);
	if (e) {
		#ifdef TRACE
		protocol_debug("start_get_request> URL_find_lengths> %s\n", e->errmess);
		#endif
		return;
	}

	path_len = u.lengths.path;
	query_len = u.lengths.query;

	for (i=0; i<URL_fields; ++i) switch (i) {
		case urlfield_HOST:
		case urlfield_PORT:
		case urlfield_FULL:
		case urlfield_SCHEME:
			if (u.len[i]) {
				u.field[i] = malloc(u.len[i]);
			}
			break;

		case urlfield_PATH:
			u.data.path = malloc(path_len + query_len + 2);
			if (u.data.path != NULL) {
				if (query_len == 0) {
					u.data.query = NULL;
				}
				else {
					u.data.query = u.data.path + path_len;
				}
				if (path_len == 0) {
					u.data.path[0] = '\0';
					++path_len;
					if (query_len > 0) {
						u.data.query++;
					}
				}
			}
			else {
				u.data.query = NULL;
			}
			break;

		case urlfield_QUERY:
			break;

		default:
			u.field[i] = NULL;
			break;
	}

	e = URL_find_data(0, url, NULL, &u);
	if (e) {
		#ifdef TRACE
		protocol_debug("start_get_request> URL_find_data> %s\n", e->errmess);
		#endif
		for (i=0; i<URL_fields; ++i) {
			if (i != urlfield_QUERY) free(u.field[i]);
		}
		return;
	}

	if (path_len > 0 && query_len > 0) {
		u.data.path[path_len - 1] = '?';
	}

	*uri = u.data.path;
	*host = u.data.host;
	*urlcopy = u.data.full;

	if (u.data.port) {
		int i = atoi(u.data.port);
		if (i != 0) *port = i;
		free(u.data.port);
	}
d198 2
a199 2
	/* Check the scheme here if we handle multiple schemes */
	free(u.data.scheme);
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
