head	1.2;
access;
symbols
	Generic-0_11:1.2
	Generic-0_10:1.2
	Generic-0_09:1.2
	Generic-0_08:1.2
	Generic-0_07:1.1.1.1
	Generic-0_06:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_GenericFetcher_0_04:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.07.20.15.05.34;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.23;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.23;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Modified to use DebugLib
Detail:
  Since these modifications were made before customising the code as the
    LDAP module, there seems little point doing that all again, so this
    is the latest DebugLib-enabled version of the generic fetcher.
Admin:
  Module builds and runs (albeit not doing anything much)

Version 0.08. Tagged as 'Generic-0_08'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Generic (c.writedata)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "kernel.h"
#include "writedata.h"
#include "protocol.h"

/* This function is used to write data into the client's buffer.  It updates
 * R2, R3 and R4 to indicate what it has done.  It the passed buffer corresponds
 * to the address of the client's buffer already, the copy is not performed (as
 * the data is already in the right place!)  This enabled this routine to be used
 * always as the only correct method to write data into the client buffer.
 */
int generic_write_data_to_client(_kernel_swi_regs *r, const char *buffer, int size)
{
        int copied = r->r[3] > size ? size : r->r[3];

        if (copied > 0) {
                char *const dest = (char *) r->r[2];
                if (dest != buffer && buffer != NULL) {
                        memcpy(dest, buffer, copied);
                        dprintf(("writedata_1", "Copying data to client buffer:\n"));
                        /*ddumpbuf("writedata_1", dest, copied, 0);*/
                }
                else {
                        dprintf(("writedata_1", "Client data already in situ\n"));
                }
        }
        else {
                copied = 0;
        }

        r->r[2] += copied; /* increment buffer - ReadData SWI preserves this */
        r->r[3] -= copied; /* Decrement buflen - ReadData SWI preserves this */
        r->r[4] += copied; /* Increment sent counter */
        return copied;

}
@


1.1
log
@Initial revision
@
text
@d40 20
a59 24
        
	if (copied > 0) {
	        char *const dest = (char *) r->r[2];
		if (dest != buffer && buffer != NULL) {
		        memcpy(dest, buffer, copied);
			#ifdef TRACE
			protocol_debug("Copying data to client buffer:\n");
			protocol_dump(dest, copied);
			#endif
		}
		else {
			#ifdef TRACE
			protocol_debug("Client data already in situ\n");
			#endif
		}
	}
	else {
	        copied = 0;
	}
	
	r->r[2] += copied; /* increment buffer - ReadData SWI preserves this */
	r->r[3] -= copied; /* Decrement buflen - ReadData SWI preserves this */
	r->r[4] += copied; /* Increment sent counter */
	return copied;
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
