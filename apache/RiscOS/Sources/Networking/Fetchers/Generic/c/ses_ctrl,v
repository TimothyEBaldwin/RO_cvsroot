head	1.2;
access;
symbols
	Generic-0_11:1.2
	Generic-0_10:1.2
	Generic-0_09:1.2
	Generic-0_08:1.2
	Generic-0_07:1.1.1.1
	Generic-0_06:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_GenericFetcher_0_04:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.07.20.15.05.34;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.22;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.22;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Modified to use DebugLib
Detail:
  Since these modifications were made before customising the code as the
    LDAP module, there seems little point doing that all again, so this
    is the latest DebugLib-enabled version of the generic fetcher.
Admin:
  Module builds and runs (albeit not doing anything much)

Version 0.08. Tagged as 'Generic-0_08'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Generic (c.ses_ctrl)
 *
 * NOTE: Requires customised kill_session_data function.
 *
 * © Acorn Computers Ltd. 1997
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "sys/errno.h"
#include "module.h"
#include "generic.h"
#include "protocol.h"
#include "headers.h"

/*
 * This file contains the routines needed to manipulate sessions
 * within the contect of multiple clients of the module.
 */

static Session *session_list = NULL;

/*************************************************************/
/* Session *find_session(unsigned int id)                    */
/*************************************************************/
/* Given a session ID, return the session control block      */
/* associated with it.                                       */
/*************************************************************/
Session *find_session(unsigned int id)
{
        Session *session;

        for (session = session_list; session; session = session->next) {
                if (session->id == id) return session;
        }

        return NULL;
}

/*************************************************************/
/* Session *new_session(void)                                */
/*************************************************************/
/* Create a new session, taking into account starting the    */
/* sessions list                                             */
/*************************************************************/
Session *new_session(void)
{
        Session *ses = calloc(1, sizeof(Session));

        if (ses == NULL) {
                return ses;
        }

        ses->sd = -1;

        if (session_list == NULL) {
                /* no list so create a new one */
                session_list = ses;
        }
        else {
                /* else find end of list and add an element */
                Session *s;

                for (s=session_list; s->next; s=s->next) ;;
                s->next = ses;
        }

        return ses;
}

static Session *kill_session_data(Session *s)
{
        Session *result = s->next;

        close_socket(&s->sd);
        http_free_headers(&s->headers);
        free(s->command.data);
        free(s->response.data);
        free(s->client_pump.data);
        free(s->uri);
        free(s->url);
        free(s->host);
        free(s->data);
        free(s->agent);

        /* Insert protocol specific stuff here */
        /* End protocol specific stuff here */

        memset(s, '\0', sizeof(*s)); /* Let's be careful */
        free(s);

        return result;
}


/*************************************************************/
/* void kill_session(Session *s)                             */
/*************************************************************/
/* Given the location of the session block, delete the       */
/* session cleanly, taking into account the session next     */
/* pointers and any memory associated with it                */
/*************************************************************/
void kill_session(Session *s)
{
        Session *ses = session_list, *prev_ses = NULL;

        for (ses = session_list; ses; prev_ses = ses, ses = ses->next) {
                if (ses == s) {
                        Session *const next = kill_session_data(s);
                        if (prev_ses == NULL) {
                                session_list = next;
                        }
                        else {
                                prev_ses->next = next;
                        }
                        break;
                }
        }

        dprintf(("sesctrl_1", "\nkill_session %p completed.  Dump of session chain\n", s));
        for (ses=session_list; ses; ses=ses->next) {
                dprintf(("sesctrl_1", "%p (socket %d) URL %s\n", ses, ses->sd, ses->url));
        }
        dprintf(("sesctrl_1", "End of session chain\n\n"));
}

/*************************************************************/
/* void ses_kill_all(void)                                   */
/*************************************************************/
/* A small routine to kill off all sessions at module shut-  */
/* down.                                                     */
/*************************************************************/
void ses_kill_all(void)
{
        while (session_list) {
                kill_session(session_list);
        }
}


/* session_check is called by the callback routine in order to
 * timeout any inactive connections or anything.  Currently, it
 * does nothing, however nothing is lost by having it here, since
 * callbacks are required for the connection pool monitoring
 * anyway.
 */
void session_check(void)
{
        /* Nothing */
}

/* session_init is called by the module's init entry to ensure
 * that the session list has been initialised correctly.
 */
void session_init(void)
{
        session_list = NULL;
}
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
 * 
d40 1
a40 1
/* Session *find_session(unsigned int id)		     */
d42 2
a43 2
/* Given a session ID, return the session control block	     */
/* associated with it.					     */
d47 1
a47 1
	Session *session;
d49 3
a51 3
	for (session = session_list; session; session = session->next) {
		if (session->id == id) return session;
	}
d53 1
a53 1
	return NULL;
d57 1
a57 1
/* Session *new_session(void)				     */
d60 1
a60 1
/* sessions list					     */
d64 1
a64 1
	Session *ses = calloc(1, sizeof(Session));
d66 17
a82 17
	if (ses == NULL) {
		return ses;
	}

	ses->sd = -1;

	if (session_list == NULL) {
		/* no list so create a new one */
		session_list = ses;
	}
	else {
		/* else find end of list and add an element */
		Session *s;

		for (s=session_list; s->next; s=s->next) ;;
		s->next = ses;
	}
d84 1
a84 1
	return ses;
d89 15
a103 1
	Session *result = s->next;
d105 4
a108 18
	close_socket(&s->sd);
	http_free_headers(&s->headers);
	free(s->command.data);
	free(s->response.data);
	free(s->client_pump.data);
	free(s->uri);
	free(s->url);
	free(s->host);
	free(s->data);
	free(s->agent);

	/* Insert protocol specific stuff here */
	/* End protocol specific stuff here */
	
	memset(s, '\0', sizeof(*s)); /* Let's be careful */
	free(s);
	
	return result;
d110 1
a110 1
	        
d113 1
a113 1
/* void kill_session(Session *s)			     */
d115 1
a115 1
/* Given the location of the session block, delete the	     */
d117 1
a117 1
/* pointers and any memory associated with it		     */
d121 1
a121 1
	Session *ses = session_list, *prev_ses = NULL;
d123 18
a140 20
	for (ses = session_list; ses; prev_ses = ses, ses = ses->next) {
		if (ses == s) {
			Session *const next = kill_session_data(s);
			if (prev_ses == NULL) {
				session_list = next;
			}
			else {
				prev_ses->next = next;
			}
			break;
		}
	}

	#ifdef TRACE
	protocol_debug("\nkill_session %p completed.  Dump of session chain\n", s);
	for (ses=session_list; ses; ses=ses->next) {
		protocol_debug("%p (socket %d) URL %s\n", ses, ses->sd, ses->url);
	}
	protocol_debug("End of session chain\n\n");
	#endif
d144 1
a144 1
/* void ses_kill_all(void)				     */
d147 1
a147 1
/* down.						     */
d151 3
a153 3
	while (session_list) {
		kill_session(session_list);
	}
d165 1
a165 1
	/* Nothing */
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
