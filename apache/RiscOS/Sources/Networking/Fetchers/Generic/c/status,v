head	1.2;
access;
symbols
	Generic-0_11:1.2
	Generic-0_10:1.2
	Generic-0_09:1.2
	Generic-0_08:1.2
	Generic-0_07:1.1.1.1
	Generic-0_06:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_GenericFetcher_0_04:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.07.20.15.05.34;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.22;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.22;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Modified to use DebugLib
Detail:
  Since these modifications were made before customising the code as the
    LDAP module, there seems little point doing that all again, so this
    is the latest DebugLib-enabled version of the generic fetcher.
Admin:
  Module builds and runs (albeit not doing anything much)

Version 0.08. Tagged as 'Generic-0_08'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Generic (c.status)
 *
 * © Acorn Computers Ltd. 1997
 */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include "sys/errno.h"
#include "module.h"
#include "protocol.h"

_kernel_oserror *generic_status(_kernel_swi_regs *r)
{
        int *pollword=(int *)r->r[1];
        Session *ses;

        ses = find_session(r->r[1]);
        if (ses == NULL) {
                r->r[0] = r->r[2] = r->r[3] = r->r[4] = 0;
                return NULL;
        }

        r->r[0] = *pollword = ses->reported_state;
        r->r[3] = ses->sent;

        /* Note.  The following condition is CORRECT.  We don't want to confuse the caller
         * into thinking that there is no more data left just because we've seen a
         * Content-Length: 0   header.  We need it to continue to read the header information.
         * Only once we are into body transfers can be legally set this to zero
         */
        r->r[4] = ses->size > 0 ? ses->size : -1;

        return NULL;
}
@


1.1
log
@Initial revision
@
text
@d31 2
a32 2
	int *pollword=(int *)r->r[1];
	Session *ses;
d34 2
a35 2
	ses = find_session(r->r[1]);
	if (ses == NULL) {
d37 2
a38 2
	        return NULL;
	}
d40 2
a41 2
	r->r[0] = *pollword = ses->reported_state;
	r->r[3] = ses->sent;
d43 6
a48 6
	/* Note.  The following condition is CORRECT.  We don't want to confuse the caller
	 * into thinking that there is no more data left just because we've seen a
	 * Content-Length: 0   header.  We need it to continue to read the header information.
	 * Only once we are into body transfers can be legally set this to zero
	 */
	r->r[4] = ses->size > 0 ? ses->size : -1;
d50 1
a50 1
	return NULL;
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
