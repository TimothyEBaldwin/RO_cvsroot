head	1.2;
access;
symbols
	Generic-0_11:1.2
	Generic-0_10:1.2
	Generic-0_09:1.2
	Generic-0_08:1.2
	Generic-0_07:1.1.1.1
	Generic-0_06:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_GenericFetcher_0_04:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.07.20.15.05.34;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.01.29.18.32.24;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.29.18.32.24;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Modified to use DebugLib
Detail:
  Since these modifications were made before customising the code as the
    LDAP module, there seems little point doing that all again, so this
    is the latest DebugLib-enabled version of the generic fetcher.
Admin:
  Module builds and runs (albeit not doing anything much)

Version 0.08. Tagged as 'Generic-0_08'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Generic (h.protocol)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

/* This is actually a bit-field used as the return flags value in R0 for
 * various protocol module SWIs.  Some common combinations have been
 * included in the list here too
 */

typedef enum {
        status_NOT_YET_CONNECTED = 0,
        status_CONNECTED_TO_SERVER = 1,
        status_SENT_REQUEST = 2,
        status_SENT_DATA = 4,
        status_WAIT_INITIAL_RESPONSE = 7,
        status_HAVE_INITIAL_RESPONSE = 8,
        status_WAIT_FOR_BODY = 15,
        status_TRANSFER_IN_PROGRESS = 16,
        status_READING_REPLY = 31,
        status_ALL_DATA_RECEIVED = 32,
        status_ABORTED = 64
} network_protocol_status_flags;


/* This is the method that is passed in the low-byte of R2 to the
 * protocol module's GetData SWI.  Protocol modules need only support
 * those methods which are relevant, but must fault all other method
 * codes (both known and unknown codes, although it may be possible to
 * generate more meaningful error messages if the method is a known one)
 */
typedef enum {
        method_GET      = 1,
        method_HEAD     = 2,
        method_OPTIONS  = 3,
        method_POST     = 4,
        method_TRACE    = 5,
        method__resv_1  = 6,
        method__resv_2  = 7,
        method_PUT      = 8,
        method_MKDIR    = 9,
        method_RMDIR    = 10,
        method_RENAME   = 11,
        method_DELETE   = 12,
        method_FTP_STOU = 13
} protocol_method_in_r2_codes;

#include "protostate.h"
#include "protoerror.h"
#include "DebugLib.h"
#ifndef BOOL_DEFINED
#define BOOL_DEFINED
#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif
#endif

#pragma -v1
extern void protocol_debug(const char */*format*/, ...);
#pragma -v0
extern void protocol_dump(const char *ptr, int size);

extern char *protocol_states(int state);
extern char *protocol_network_states(int status);
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
 
d28 1
a28 1
	status_NOT_YET_CONNECTED = 0,
d34 1
a34 1
	status_WAIT_FOR_BODY = 15,
d49 13
a61 13
        method_GET 	= 1,
        method_HEAD 	= 2,
        method_OPTIONS	= 3,
        method_POST	= 4,
        method_TRACE	= 5,
        method__resv_1	= 6,
        method__resv_2	= 7,
        method_PUT	= 8,
        method_MKDIR	= 9,
        method_RMDIR	= 10,
        method_RENAME	= 11,
        method_DELETE	= 12,
	method_FTP_STOU	= 13
d66 9
@


1.1.1.1
log
@Import from SrcFiler of Browser fetchers
@
text
@@
