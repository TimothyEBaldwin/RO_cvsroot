head	1.1;
access;
symbols
	Ether1-4_01:1.1;
locks; strict;
comment	@# @;


1.1
date	2000.12.05.20.37.19;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  DCI-4 compatible.
  32-bit compatible.
  Fixed timing problem causing instablility on fast machines.
Details:
  Bits in mbuf header fields were being set that shouldn't, which is why it
  didn't work with Internet5 - Kevin found this one.

  Made assembler 32-bit compatible - now uses AsmUtils for some stuff and
  based the rest on the 32-bit compatible poduleirq code in EtherI.

  Setting DCI-4 filters causes the hardware to be reconfigured.  On fast
  (StrongARM) machines, a second DCI-4 filter call could occur before the
  hardware had finished dealing with the first reconfigure command.  The
  reconfigure command structure would be overwritten and linked back to
  itself, causing an infinite loop in the ISR.  Fixed by adding a busy flag
  to the command structures which is polled until clear before constructing
  a command and sending it to the hardware.
Admin:
  Tested on and off over several months.  Performance may degrade on Internet 5
  because card is put into promiscuous mode due to an inadequecy in its
  hardware multicast filtering (no easy way to tell it to receive all multicast
  addresses).  This might be work-aroundable by discovering the hashing
  algorithm that the card uses and finding a canned list of addresses that fills
  in all the bits in the table, but probably isn't worth the effort.

  Still appear to be some timing related problems if you reload the driver
  after the interface has been configured.  Doesn't crash, but get hardware
  timeouts that it doesn't recover from - will look at.

  Briefly tested 26bit/32bit stuff - appears to work for both.

Version 4.01. Tagged as 'Ether1-4_01'
@
text
@# File:    Makefile
# Purpose: Makefile for Ether1
# Author:  Ben Laughton
#
# History:
#
# 1999-03-12: BAL
# Created.




# ------------------------------------------------------------------------------
# Paths
#

EXP_HDR		= <export$dir>.^.Interface2
EXP_C_H		= <Cexport$dir>.h
EXP_C_O		= <Cexport$dir>.o

LIBDIR		= <Lib$Dir>

RESFSDIR	= Resources.Ether1

# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= cdir
AS		= objasm
CC		= cc
C++		= c++
CMHG		= cmhg
CP		= copy
LD		= link
RM		= remove
WIPE		= -wipe
CD		= dir
CHMOD		= access
TOUCH		= create
MODSQZ		= modsqz




# ------------------------------------------------------------------------------
# Flags - see FlagReadMe
#

AFLAGS		= -depend !Depend $(THROWBACK) $(EXTRA_A_FLAGS) -stamp -quit
CCFLAGS		= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -c -Wsp -strict -zM -ffah
CMHGFLAGS	= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -p
LDFLAGS		= 
CPFLAGS		= ~cfr~v
WFLAGS		= ~c~vr
CHMODFLAGS	= RW/r

DFLAGS		= $(EXTRA_C_FLAGS) -DCOMPAT_INET4 -DINET

INCLUDES	= -IC:,TCPIPLibs:




# ------------------------------------------------------------------------------
# Libraries
#

CLIB		= CLIB:o.stubs
RLIB		= RISCOSLIB:o.risc_oslib
RSTUBS		= RISCOSLIB:o.rstubs
ROMSTUBS	= RISCOSLIB:o.romstubs
ROMCSTUBS	= RISCOSLIB:o.romcstubs
ABSSYM		= RISC_OSLib:o.c_AbsSym

DEBUGLIB	= $(LIBDIR).DebugLib.o.DebugLibzm
INETLIB		= TCPIPLibs:o.inetlibzm
SOCKLIB		= TCPIPLibs:o.socklibzm
MEMCHECKLIB	= MemCheck:o.MC_M
ASMUTILS	= $(LIBDIR).AsmUtils.o.AsmUtilszm

#LIBS = $(ASMUTILS) $(MEMCHECKLIB) $(DEBUGLIB) $(SOCKLIB) $(INETLIB)
LIBS = $(ASMUTILS) $(INETLIB)



# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= Ether1
RAMTARGET	= rm.$(TARGET)
ROMTARGET	= aof.$(TARGET)
EXPORTS		= $(EXP_C_H).$(COMPONENT)

ROMOBJS =\
 $(EXT).e1module\
 $(EXT).EtHdr\
 $(EXT).handlink\
 $(EXT).if_et\
 $(EXT).iocopy\
 $(EXT).mbuf\
 $(EXT).poduleirq\
 $(EXT).support\
 $(EXTRAOBJS)

RAMOBJS =\
 $(ROMOBJS)

_OBJS =

HDR = h.EtHdr




# ------------------------------------------------------------------------------
# Rule patterns
#

.SUFFIXES:	.o .od .oHP .oMC .i .h .s .c .cmhg
.c.i:;		$(CC)	$(CCFLAGS)	-C -E $< >> $@@
.c.o:;		$(CC)	$(CCFLAGS)	-o $@@ $<
.c.od:;		$(CC)	$(CCFLAGS)	 -o $@@ $<
.c.oMC:;	$(CC)	$(CCFLAGS)	-fn -g -o $@@ $<
.c.oHP:;	$(CC)	$(CCFLAGS)	-fn -o $@@ $<
.cmhg.i:;	@@echo $@@
.cmhg.o:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@@
.cmhg.od:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@@
.cmhg.oMC:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@@
.cmhg.oHP:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@@
.cmhg.h:;	$(CMHG)	$(CMHGFLAGS)	$< -d $@@
.s.i:;		@@echo $@@
.s.o:;		$(AS)	$(AFLAGS)	$< $@@
.s.od:;		$(AS)	$(AFLAGS)	$< $@@
.s.oMC:;	$(AS)	$(AFLAGS)	$< $@@
.s.oHP:;	$(AS)	$(AFLAGS)	$< $@@




# ------------------------------------------------------------------------------
# Local build rules
#

all: $(RAMTARGET)

debug: $(RAMTARGET)

memcheck: $(RAMTARGET)

preprocess: $(ROMTARGET)

$(RAMTARGET): $(RAMOBJS) $(LIBS) $(HDR) $(EXT).local_dirs
	$(MKDIR) rm
	$(LD) -rmf $(LDFLAGS) -o $@@ $(RAMOBJS) $(LIBS) $(CLIB)
	$(MODSQZ) $@@

#$(EXT).resources: LocalRes:Messages
#	ResGen messages_data $@@ LocalRes:Messages Resources.$(COMPONENT).Messages




# ------------------------------------------------------------------------------
# Common build rules

$(EXT).local_dirs:
	$(MKDIR) $(EXT)
	$(TOUCH) $@@




# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

rom: $(ROMTARGET)
	@@echo $(COMPONENT): rom complete

export: $(EXPORTS)
	@@echo $(COMPONENT): export complete

install: $(RAMTARGET)
	$(CP) $(RAMTARGET) $(INSTDIR).$(COMPONENT) $(CPFLAGS)
	@@echo $(COMPONENT): $(RAMTARGET) installed

install_rom: $(ROMTARGET)
	$(CP) $(ROMTARGET) $(INSTDIR).$(COMPONENT) $(CPFLAGS)
	@@echo $(COMPONENT): rom module installed

clean:
	$(WIPE) $(EXT)	$(WFLAGS)
	@@echo $(COMPONENT): cleaned


# ROM target (re-linked at ROM Image build time)

$(ROMTARGET): $(ROMOBJS) $(LIBS) $(ROMCSTUBS) $(EXT).local_dirs
	$(MKDIR) aof
	$(LD) -aof $(LDFLAGS) -o $@@ $(ROMOBJS) $(LIBS) $(ROMCSTUBS)


# Final link for the ROM Image (using given base address)

rom_link:
	$(MKDIR) linked
	$(LD) $(LDFLAGS) -o linked.$(COMPONENT) -map -rmf -base $(ADDRESS) $(ROMTARGET) $(ABSSYM) > map.$(COMPONENT)
	$(CP) linked.$(COMPONENT) $(LINKDIR).$(COMPONENT) $(CPFLAGS)
	@@echo $(COMPONENT): rom_link complete

# Odds and ends

$(EXP_C_H).$(COMPONENT):	h.$(COMPONENT)
        $(CP) h.$(COMPONENT) $@@ $(CPFLAGS)




# ------------------------------------------------------------------------------
# Dynamic dependencies:
@
