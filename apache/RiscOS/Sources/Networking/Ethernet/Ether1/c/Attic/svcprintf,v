head	1.2;
access;
symbols
	initial:1.1.1.1 TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.12.05.20.37.22;	author blaughto;	state dead;
branches;
next	1.1;

1.1
date	2000.04.13.16.59.07;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.13.16.59.07;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  DCI-4 compatible.
  32-bit compatible.
  Fixed timing problem causing instablility on fast machines.
Details:
  Bits in mbuf header fields were being set that shouldn't, which is why it
  didn't work with Internet5 - Kevin found this one.

  Made assembler 32-bit compatible - now uses AsmUtils for some stuff and
  based the rest on the 32-bit compatible poduleirq code in EtherI.

  Setting DCI-4 filters causes the hardware to be reconfigured.  On fast
  (StrongARM) machines, a second DCI-4 filter call could occur before the
  hardware had finished dealing with the first reconfigure command.  The
  reconfigure command structure would be overwritten and linked back to
  itself, causing an infinite loop in the ISR.  Fixed by adding a busy flag
  to the command structures which is polled until clear before constructing
  a command and sending it to the hardware.
Admin:
  Tested on and off over several months.  Performance may degrade on Internet 5
  because card is put into promiscuous mode due to an inadequecy in its
  hardware multicast filtering (no easy way to tell it to receive all multicast
  addresses).  This might be work-aroundable by discovering the hashing
  algorithm that the card uses and finding a canned list of addresses that fills
  in all the bits in the table, but probably isn't worth the effort.

  Still appear to be some timing related problems if you reload the driver
  after the interface has been configured.  Doesn't crash, but get hardware
  timeouts that it doesn't recover from - will look at.

  Briefly tested 26bit/32bit stuff - appears to work for both.

Version 4.01. Tagged as 'Ether1-4_01'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Header: /home/renaissa/cvsroot/RiscOS/Sources/Networking/Ethernet/Ether1/c/svcprintf,v 1.1 2000/04/13 16:59:07 blaughto Exp $
 * $Source: /home/renaissa/cvsroot/RiscOS/Sources/Networking/Ethernet/Ether1/c/svcprintf,v $
 *
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * svcprint.c
 *
 * print debugging information down the TML tube link.
 *
 * provides:
 *	     %s - string
 *	     %C - character in range 20->7F (space printed if outside range)
 *	     %c - any character
 *	     %X - reverses order of bytes if >2 (or >4) specified as width
 *	     %x - hex
 *	     %B - reverses order of bytes if >2 (or >4) specified as width
 *	     %b - binary
 *	     %D - reverses order of bytes if >2 (or >4) specified as width
 *	     %d - decimal
 *
 * field width can be specified by placing a decimal number after the "%"
 * character... if the width is started by a "0" then numbers are padded
 * with "0"...
 *
 * standard format specifiers o,u,e,f and g are NOT supported
 *
 * $Log: svcprintf,v $
 * Revision 1.1  2000/04/13 16:59:07  blaughto
 * Initial revision
 *
 * Revision 1.2  95/03/31  11:36:04  kwelton
 * Added new debugging function ctosym().
 * 
 * Revision 1.1  94/12/02  09:57:20  kwelton
 * Initial revision
 * 
 */
#include "kernel.h"
#include "swis.h"
#include "svcdebug.h"

#include "sys/types.h"

#ifndef NULL
# define NULL	((void *)0)
#endif

#ifdef DEBUG
int debug = 1;
#endif

/**********************************************************************/

static unsigned short ntohs(unsigned short n)
{
    return(((n << 8) & 0xff00) | ((n >> 8) & 0x00ff));
}

/**********************************************************************/

static unsigned long ntohl(unsigned long n)
{
    return(((n >> 24) & 0x000000ff) | ((n >> 8) & 0x0000ff00) |
	   ((n << 8) & 0x00ff0000) | ((n << 24) & 0xff000000) );
}

/**********************************************************************/

/*
 * call processor mode independant character output routine
 */
static void oswrch(unsigned char ch)
{
    _kernel_swi_regs regset;

    /*
     * use HostFS_WriteC (SWI 0x40102) to print the character
     */
    regset.r[0] = ch;
    (void)_kernel_swi(0x40102, &regset, &regset);
}

/**********************************************************************/

/*
 * Printn prints a number n in base b, minimum width w adding pad chars
 * if needed.
 */
static void printn(unsigned n, unsigned b, int w, char pad)
{
    if( n >= b )
    {
	printn(n / b, b, --w, pad);
	oswrch("0123456789abcdef"[n % b]);
    }
    else
    {
	while (--w > 0)
	    oswrch(pad);

	oswrch("0123456789abcdef"[n]);
    }
}

/**********************************************************************/

static void prf(char *format, unsigned *argp, ...)
{
    register int b; /* base to be used when displaying numbers */
    register int c; /* current character read from format string */
    register int w; /* field width */
    char pad;	    /* field padding character */
    unsigned val;   /* value of argument */

  loop:
    val = *argp;
    w = 0;
    pad = ' ';

    while( (c = *format++) != '%' )
    {
	if( c == '\0' )
	    return;
	if( c == '\n' )
	    oswrch('\r');
	oswrch(c);
    }

  again:
    /*
     * we have a special format command
     */
    c = *format++;
    switch( c )
    {
      case 's':
	{
	    /* string */
	    char *p = (char *)*argp++;
	    int	 width = 0;

	    if (p != NULL)
	    {
		/* NOT a NULL pointer */
		while (*p)
		{
		    oswrch(*p++);
		    width++;
		}
	    }

	    while( width++ < w )
		oswrch(' ');
	    goto loop;
	}

      case 'C':
	if( (*argp < ' ') || (*argp > '~') )
	{
	    oswrch(' ');
	    argp++;
	    goto loop;
	}

      case 'c':
	/* character */
	oswrch(*argp++);
	goto loop;

      case '0':
	if (w == 0)
	    pad = '0';

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
	/* field width */
	w = (w * 10) + ((int) c - '0');
	goto again;

      case 'X':
	/* hex number */
	if (w > 4)
	    val = (unsigned)ntohl(val);
	else
	{
	    if (w > 2)
		val = (unsigned)ntohs(val);
	}

	/*
	 * NB
	 *
	 * fall through to set base
	 */

      case 'x':
	/* hex number */
	b = 16;
	goto number;

      case 'B':
	/* binary number */
	if (w > 4)
	    val = (unsigned)ntohl(val);
	else
	{
	    if( w > 2 )
		val = (unsigned)ntohs(val);
	}

	/*
	 * NB
	 *
	 * fall through to set base
	 */

      case 'b':
	/* binary number */
	b = 2;
	goto number;

      case 'D':
	/* decimal number */
	if (w > 4)
	    val = (unsigned)ntohl(val);
	else
	{
	    if (w > 2)
		val = (unsigned)ntohs(val);
	}

	/*
	 * NB
	 *
	 * fall through to set base
	 */

      case 'd':
	b = 10;
	/*
	 * NB
	 *
	 * fall through to write number
	 */

      number:
	printn(val,b,w,pad);
	argp++;

	break;
    } /* switch */

    goto loop;
}

/**********************************************************************/

/*
 * strprint - print a string to the tube podule
 */
static void strprint(char *s)
{
    _kernel_swi_regs r;

    r.r[0] = (int)s;
    (void)_kernel_swi(0x40104, &r, &r);
}

/**********************************************************************/

#if 0
# define USETUBE
#endif /* 0/1 */

void Printf(char *format, ...)
{
    unsigned *argp = (unsigned *)&format;

#ifdef USETUBE
    _kernel_swi_regs reglist;
    _kernel_oserror *err;
/*     int s = splhi(); */

    if( (err = _kernel_swi(0x40100, &reglist, &reglist)) != NULL )
    {
	prf("HostVDU: ", 0);
	prf(err->errmess, 0);
/*	splx(s); */
	return;
    }
#endif /* USETUBE */

    int s = splhi();
    prf(format, (argp + 1));
    splx(s);

#ifdef USETUBE
    if( (err = _kernel_swi(0x40101, &reglist, &reglist)) != NULL )
    {
	prf("TubeVDU: ", 0);
	prf(err->errmess, 0);
/*	splx(s); */
	return;
    }
/*    splx(s); */
#endif /* USETUBE */
}

/**********************************************************************/

/*
 * ctosym - convert an address to an entry in the module's symbol
 * table
 */
int ctosym(caddr_t ptr)
{
    /*
     * XXX
     *
     * declare __module_header as an external *function*
     * -- this stops it being incorrectly relocated
     */
    extern void __module_header(void);
    caddr_t address = (caddr_t)__module_header;

    /*
     * the hard part has alredy been done (finding the start
     * address of the module) - all that remains is to convert
     * passed pointer to an offset within the module.
     *
     * XXX
     *
     * the linker assumes a default offset of 32k, even for
     * modules, when writing the symbol table; this could
     * be considered a bug, but it is easily overcome.
     */
    return((ptr - address) + 0x8000);
}

/**********************************************************************/

#define	FCMAX	40
#ifdef	GPROF
#define FN_ENTRY_SIZE (5+3)	/* -p adds an extra 3 words to procedure entry */
#else	GPROF
#define FN_ENTRY_SIZE (5)
#endif	GPROF

backtrace(int dummy)
{
    int frames = FCMAX;
    int *fp, *ip, i;
    int linechars = 0;
    char *sep = "\021\004Stack backtrace: ";
    char card[81];

    fp = (int *)&dummy - 1;  /* Points at stacked entry mask pointer */
    fp = (int *)fp[-3];	 /* Points at	  ditto of caller */

    /*
     * NOTE
     *
     * this stack backtracing loop works only
     * for code from the Norcroft compiler.
     */

    /* limit the scan number of frames backtraced  */
    while( frames-- >= 0 )
    {
	int *next_fp;
	char *name = NULL;

	ip = ((int *)(fp[0] & 0x03fffffc)) - 3;

	/* ip now points at stmdb sp!, { .., fp, ip, lr, pc } */
	for( i = FN_ENTRY_SIZE; i > 0; i-- )
	{
	    if( (ip[0] & 0xffffff00) == 0xff000000 )
	    {
		int len = ip[0] & 0xff;
		if( (len % 4) == 0 )
		{
		    name = (char *)ip - len;
		    break;
		}
	    }
	    ip--;
	}

	if (name == NULL)
	    sprintf(card, "%s<fn@@%08x>", sep, ip+3);
	else
	    sprintf(card, "%s%s", sep, name);

	sep = ", ";

	linechars += strlen(card);
	if( linechars >= 80 )
	{
	    strprint(",\r\n	");
	    strprint(card + 2);
	    linechars = 5;
	}
	else
	    strprint(card);

	/* TRACE */
	if( !strcmp(name, "callb_handler") )
	{
	    /*
	     * I think this is what is breaking
	     * the debugging module
	     */
	    strprint(" (and that's as far as we're going)");
	    break;
	}

	next_fp = (int *)(fp[-3]);
	if (next_fp == 0)
	    break;
	else
	{
#ifdef __KERNEL__
	    if( (next_fp < fp) ||
	       (next_fp > (int *)((int)&u + (UPAGES*NBPG))) )
#else
	    if( (next_fp < fp ) )
#endif
	    {
		Printf("**** broken stack frame fp %08x, next fp %08x ****\n",
		       fp, next_fp);
		break;
	    }
	    fp = next_fp;
	}
    }
    Printf("\021\007\n");
}

/**********************************************************************/

/* EOF svcprint.c */
@


1.1
log
@Initial revision
@
text
@d17 2
a18 2
 * $Header: /ax/networking:Internet/build/svcprint.c:networking  1.2  $
 * $Source: /ax/networking:Internet/build/svcprint.c: $
d43 4
a46 1
 * $Log:	svcprint.c,v $
@


1.1.1.1
log
@Initial import of Ether1 into CVS.  These sources will not even compile with
current libraries, and are just here to act as a reference point for imminent
changes.
@
text
@@
