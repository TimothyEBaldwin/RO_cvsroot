head	1.2;
access;
symbols
	Ether1-4_01:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.12.05.20.37.22;	author blaughto;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.13.16.59.07;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.13.16.59.07;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  DCI-4 compatible.
  32-bit compatible.
  Fixed timing problem causing instablility on fast machines.
Details:
  Bits in mbuf header fields were being set that shouldn't, which is why it
  didn't work with Internet5 - Kevin found this one.

  Made assembler 32-bit compatible - now uses AsmUtils for some stuff and
  based the rest on the 32-bit compatible poduleirq code in EtherI.

  Setting DCI-4 filters causes the hardware to be reconfigured.  On fast
  (StrongARM) machines, a second DCI-4 filter call could occur before the
  hardware had finished dealing with the first reconfigure command.  The
  reconfigure command structure would be overwritten and linked back to
  itself, causing an infinite loop in the ISR.  Fixed by adding a busy flag
  to the command structures which is polled until clear before constructing
  a command and sending it to the hardware.
Admin:
  Tested on and off over several months.  Performance may degrade on Internet 5
  because card is put into promiscuous mode due to an inadequecy in its
  hardware multicast filtering (no easy way to tell it to receive all multicast
  addresses).  This might be work-aroundable by discovering the hashing
  algorithm that the card uses and finding a canned list of addresses that fills
  in all the bits in the table, but probably isn't worth the effort.

  Still appear to be some timing related problems if you reload the driver
  after the interface has been configured.  Doesn't crash, but get hardware
  timeouts that it doesn't recover from - will look at.

  Briefly tested 26bit/32bit stuff - appears to work for both.

Version 4.01. Tagged as 'Ether1-4_01'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Header: /ax/networking:Ether2/support.c:networking  1.1  $
 * $Source: /ax/networking:Ether2/support.c: $
 *
 * Copyright(c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * Revision 1.1  95/09/18  15:17:56  kwelton
 * Initial revision
 *
 */

#include <stdio.h>
#include <sys/types.h>

#include "support.h"

/**********************************************************************/

/*
 * Convert Ethernet address to printable representation.
 */
extern char *ether_sprintf(register u_char *ap)
{
    register i;
    static char etherbuf[18];
    register char *cp = etherbuf;
    static char digits[] = "0123456789abcdef";

    for( i = 0; i < 6; i++ )
    {
	*cp++ = digits[*ap >> 4];
	*cp++ = digits[*ap++ & 0xf];
	*cp++ = ':';
    }
    *--cp = 0;
    return (etherbuf);
}

/**********************************************************************/

extern int panic(char *s)
{
    printf("et: panic: %s\n", s);
    return(0);
}

/**********************************************************************/

/* EOF support.c */
@


1.1
log
@Initial revision
@
text
@a21 1
 * $Log:	support.c,v $
d26 5
a30 1
#include "sys/types.h"
d37 1
a37 1
char *ether_sprintf(register u_char *ap)
d56 1
a56 44
htonl(u_long x)
{
    return ( ntohl(x) );
}

/**********************************************************************/

htons(int x)
{
    return ( ntohs(x) );
}

/**********************************************************************/

ntohl(u_long x)
{
    return( ((x & 0xff) << 24) | ((x & 0xff00) << 8) |
	   ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24) );
}

/**********************************************************************/

ntohs(int x)
{
    return ( (x & 0xff) << 8 | (x & 0xff00) >> 8 );
}

/**********************************************************************/

unsigned min(u_int a, u_int b)
{
    return (a < b ? a : b);
}

/**********************************************************************/

unsigned max(u_int a, u_int b)
{
    return (a > b ? a : b);
}

/**********************************************************************/

int panic(char *s)
@


1.1.1.1
log
@Initial import of Ether1 into CVS.  These sources will not even compile with
current libraries, and are just here to act as a reference point for imminent
changes.
@
text
@@
