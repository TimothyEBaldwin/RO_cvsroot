head	1.2;
access;
symbols
	Ether1-4_01:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.12.05.20.37.25;	author blaughto;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.13.16.59.08;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.13.16.59.08;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  DCI-4 compatible.
  32-bit compatible.
  Fixed timing problem causing instablility on fast machines.
Details:
  Bits in mbuf header fields were being set that shouldn't, which is why it
  didn't work with Internet5 - Kevin found this one.

  Made assembler 32-bit compatible - now uses AsmUtils for some stuff and
  based the rest on the 32-bit compatible poduleirq code in EtherI.

  Setting DCI-4 filters causes the hardware to be reconfigured.  On fast
  (StrongARM) machines, a second DCI-4 filter call could occur before the
  hardware had finished dealing with the first reconfigure command.  The
  reconfigure command structure would be overwritten and linked back to
  itself, causing an infinite loop in the ISR.  Fixed by adding a busy flag
  to the command structures which is polled until clear before constructing
  a command and sending it to the hardware.
Admin:
  Tested on and off over several months.  Performance may degrade on Internet 5
  because card is put into promiscuous mode due to an inadequecy in its
  hardware multicast filtering (no easy way to tell it to receive all multicast
  addresses).  This might be work-aroundable by discovering the hashing
  algorithm that the card uses and finding a canned list of addresses that fills
  in all the bits in the table, but probably isn't worth the effort.

  Still appear to be some timing related problems if you reload the driver
  after the interface has been configured.  Doesn't crash, but get hardware
  timeouts that it doesn't recover from - will look at.

  Briefly tested 26bit/32bit stuff - appears to work for both.

Version 4.01. Tagged as 'Ether1-4_01'
@
text
@; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Assembler function to enable podule irqs

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:EnvNumbers
        GET     Hdr:ModHand

        EXPORT  DELAY_
        EXPORT  disable_irqs
        EXPORT  enable_irqs
        EXPORT  splet
        EXPORT  splimp
        EXPORT  splnet
        EXPORT  splx
        EXPORT  set_irqsareoff
        EXPORT  clear_irqsareoff
        EXPORT  et_irq_entry1

        ^       0

        AREA    poduleirqs,PIC,CODE,REL

        IMPORT  et_irq_entry
et_irq_entry1
        LDR     R0,[R12,#4]       ; unit
        LDR     R12,[R12,#12]     ; wsp
        B       et_irq_entry

irqsareoff
        DCD     0

;
;    **********************************************************************
;

;
;       implement an n-microsecond delay: this code is pretty naff,
;       it is derived from _DELAY_ (arm/delay.s) and calculates the
;       delay for a 32MHz arm3 machine with all the code running in
;       the cache, i.e. this is a *minimum* delay of n microseconds.
;
;       void DELAY_(int n)
;

DELAY_          ROUT
                STMFD   sp!, {r4,lr}

;
;       this loop takes 8 fast cycles, so need to multiply loop
;       count by 4 to acheive 1us per loop
;
                MOV     r0, r0, LSL #2

delayloop       SUBS    r0, r0, #1              ; 1 F
                MOV     r4, r4, LSL r4          ; 2 F
                MOV     r4, r4, LSL r4          ; 2 F
                BGT     delayloop               ; 2 F + 1 F
                                                ; ---------
                                                ; 8 F
;
;       all done
;
                LDMFD   sp!, {r4,pc}^

;
;       ************************************************************
;

; os_error *enable_podule_irqs();
enable_podule_irqs ROUT
        Entry  "r0-r1"

        SavePSR R12                      ;Hold current I_bit & F_bit & Mode
        WritePSRc I_bit+F_bit+SVC_mode,R3 ;Disable IRQs & FIQs
        MOV     R0,#IOC                  ;whilst enabling Podule IRQs
        LDRB    R1,[R0,#IOCIRQMSKB]      ;in IOC
        ORR     R1,R1,#podule_IRQ_bit
        STRB    R1,[R0,#IOCIRQMSKB]
        RestPSR R12,,c                   ;Restore original I_bit & F_bit
        NOP                              ;And the Mode.

        ; Exit with no recovery
        EXIT

; os_error *disable_podule_irqs();
disable_podule_irqs ROUT
        Entry  "r0-r1"

        SavePSR R12                      ;Hold current I_bit & F_bit & Mode
        WritePSRc I_bit+F_bit+SVC_mode,R3 ;Disable IRQs & FIQs
        MOV     R0,#IOC                  ; whilst disabling Podule IRQs
        LDRB    R1,[R0,#IOCIRQMSKB]      ; in IOC
        BIC     R1,R1,#podule_IRQ_bit
        STRB    R1,[R0,#IOCIRQMSKB]
        RestPSR R12,,c                   ;Restore original I_bit & F_bit
        NOP                              ;And mode.

        ; Exit with no recovery
        EXIT

;int  disable_irqs();
; returns:
;         1 - If IRQs were already disabled.
;         0 - If this call disabled IRQs.
;
disable_irqs ROUT
splet
splnet
splimp
        LDR    r0,irqsareoff
        MOVS   r0,r0
        MOVNE  pc,lr
        B      disable_podule_irqs

;void  enable_irqs();
;  irqsareoff
;         1 - Just return.
;         0 - Enable podule IRQs.
;
enable_irqs ROUT
splx
        LDR   r0,irqsareoff
        MOVS  r0,r0
        MOVNE pc,lr                 ;If so, return.
        B     enable_podule_irqs

set_irqsareoff
        MOV   r0,#1
        STR   r0,irqsareoff
        MOV   pc,lr

clear_irqsareoff
        MOV   r0,#0
        STR   r0,irqsareoff
        MOV   pc,lr

        END

@


1.1
log
@Initial revision
@
text
@d20 1
a24 2
        EXPORT  enable_podule_irqs
        EXPORT  disable_podule_irqs
a30 2
	EXPORT  splhi
        EXPORT  splrestore
d33 1
a33 4
        EXPORT  ensure_irqs_off
        EXPORT  restore_irqs
        EXPORT  ensure_irqs_on
	EXPORT	et_irq_entry1
d39 1
a39 1
	IMPORT	et_irq_entry
d41 3
a43 4
	LDR	R0,[R12,#4]       ; unit
	LDR	R12,[R12,#12]     ; wsp
	B	et_irq_entry

a47 3
memc_type
        DCD     0

d87 1
a87 2
        Push    "r0-r1,lr"

d89 7
a95 8
        MOV  R14,PC                      ;Hold current I_bit & F_bit & Mode
        SWI  XOS_EnterOS                  ;Set SVC Mode.
        TEQP PC,#I_bit+F_bit+SVC_mode    ;Disable IRQs & FIRQs
        MOV  R0,#IOC                     ;whilst enabling Podule IRQs
        LDRB R1,[R0,#IOCIRQMSKB]         ;in IOC
        ORR  R1,R1,#podule_IRQ_bit
        STRB R1,[R0,#IOCIRQMSKB]
        TEQP PC,R14                      ;Restore original I_bit & F_bit
d99 1
a99 1
        Pull    "r0-r1,pc",,^
d103 1
a103 1
        Push    "r0-r1,lr"
d105 7
a111 9

        MOV  R14,PC                      ;Hold current I_bit & F_bit &Mode
        SWI  XOS_EnterOS                  ;Set SVC Mode.
        TEQP PC,#I_bit+F_bit+SVC_mode    ;Disable IRQs & FIRQs
        MOV  R0,#IOC                     ; whilst disabling Podule IRQs
        LDRB R1,[R0,#IOCIRQMSKB]         ; in IOC
        AND  R1,R1,#(&FF-podule_IRQ_bit)
        STRB R1,[R0,#IOCIRQMSKB]
        TEQP PC,R14                      ;Restore original I_bit & F_bit
d115 1
a115 1
        Pull    "r0-r1,pc",,^
d153 1
a153 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_off:
;
; Disables interrupts up to the level of the ethernet driver (for RISC OS,
; this is just disable IRQs). Once IRQs are disabled, we cannot/must not
; be reentered.
;
; Returns a value indicating the state of interrupts prior to calling here.
;

ensure_irqs_off
        AND     r0, lr, # I_bit
        ORRS    pc, lr, # I_bit

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; restore_irqs:
;
; Restore interrupts to the state they were in prior to a call to
; ensure_irqs_off, using the value returned by ensure_irqs_off.
;

restore_irqs
        BIC     lr, lr, # I_bit
        ORRS    pc, lr, r0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_on:
;
; Ensure that interrupts are enabled. Returns a value that, when passed
; to restore_irqs, will restore the state prior to enabling interrupts.
;

ensure_irqs_on
        AND     r0, lr, # I_bit
        BICS    pc, lr, # I_bit


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; splhi etc:
;
; Disable IRQs). Once IRQs are disabled, we cannot/must not be reentered.
;
; Returns a value indicating the state of interrupts prior to calling here.
;

splhi
	AND	r0, lr, # I_bit
	ORRS	pc, lr, # I_bit

splrestore
	BIC	lr, lr, # I_bit
	ORRS	pc, lr, r0

	END
@


1.1.1.1
log
@Initial import of Ether1 into CVS.  These sources will not even compile with
current libraries, and are just here to act as a reference point for imminent
changes.
@
text
@@
