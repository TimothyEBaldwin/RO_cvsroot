head	1.5;
access;
symbols
	IOMD-0_36:1.5
	SMP:1.4.0.2
	SMP_bp:1.4
	IOMD-0_35:1.4
	IOMD-0_34:1.3
	IOMD-0_33:1.3
	IOMD-0_32:1.3
	IOMD-0_31:1.3
	IOMD-0_30:1.3
	IOMD-0_29:1.3
	IOMD-0_28:1.3
	IOMD-0_27:1.2
	IOMD-0_26:1.2
	IOMD-0_25:1.2
	IOMD-0_24:1.2
	IOMD-0_23:1.2
	IOMD-0_22:1.2
	IOMD-0_20:1.1
	IOMD-0_19:1.1
	IOMD-0_18:1.1
	IOMD-0_17:1.1
	IOMD-0_16:1.1
	IOMD-0_15:1.1
	IOMD-0_14:1.1
	IOMD-0_13:1.1
	IOMD-0_12:1.1
	IOMD-0_11:1.1;
locks; strict;
comment	@# @;


1.5
date	2017.09.09.10.40.59;	author rool;	state Exp;
branches;
next	1.4;
commitid	dKxxNzzikYuxFv6A;

1.4
date	2016.11.29.20.27.30;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	Wx1fz688KFXJ24wz;

1.3
date	2013.05.26.16.59.56;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	GMODlInzBrXp8aRw;

1.2
date	2013.01.12.10.41.02;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	ZzPrVbzkYwpulUzw;

1.1
date	2012.02.25.17.16.39;	author jlee;	state Exp;
branches;
next	;
commitid	Dn81wPJ3GobPSyUv;


desc
@@


1.5
log
@Participate in keyboard scan dependencies
Detail:
  Replace keyboard scan code with list of modules that the kernel needs to do the same.
  Reorder the HALEntries to match Kernel-5_89.
  Delete unused workspace.
Admin:
  Submission for USB bounty.

Version 0.36. Tagged as 'IOMD-0_36'
@
text
@; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:HALEntries

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  HAL_KbdScanDependencies
        
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

HAL_KbdScanDependencies ROUT
        ADR     a1, %FT10
        MOV     pc, lr 
10
        ; Modules needed for keyboard scanning, no need to list those
        ; before 'FirstUnpluggableModule' since they can't be unplugged
        DCB     "PS2Driver,InternationalKeyboard", 0
       
        END
@


1.4
log
@Don't accept backspace-power-on
None of the other HALs equate backspace to delete-power-on, so don't bother scanning for it on IOMD either.

Version 0.35. Tagged as 'IOMD-0_35'
@
text
@a17 4
        GET     Hdr:Machine.<Machine>
        $GetIO

        GET     Hdr:OSEntries
a18 12
        GET     Hdr:Proc
        GET     Hdr:DevNos

        GET     hdr.StaticWS

        EXPORT  HAL_KbdScanSetup
        EXPORT  HAL_KbdScanFinish
        EXPORT  HAL_KbdScan
        EXPORT  HAL_KbdScanInterrupt
        IMPORT  HAL_IRQEnable
        IMPORT  HAL_IRQDisable
        IMPORT  HAL_IRQClear
d22 2
a23 117
; This file contains the minimal PC keyboard control stuff required for the boot-time keyboard scan

; PC command codes we send.
PCReset         *       &FF     ; Outgoing command

; PC keyboard codes we are interested in.
PCSpecial       *       &E0
PCCTRLL         *       &14
PCCTRLR         *       &14     ; Preceded by &E0
PCSHIFTL        *       &12
PCSHIFTR        *       &59
PCR             *       &2D
PCT             *       &2C
PCDelete        *       &71     ; Preceded by &E0
PCEnd           *       &69     ; Preceded by &E0

; How long we're prepared to wait for activity (cs)
TimeoutPost     *       75      ; Longest BAT time
TimeoutPress    *       50      ; If initial key down missed, wait 1 typematic delay
TimeoutMargin   *       75      ; Generous to a fault

KeyData
        DCB     PCCTRLL,  KbdFlag_Ctrl
        DCB     PCSHIFTL, KbdFlag_Shift
        DCB     PCSHIFTR, KbdFlag_Shift
        DCB     PCR,      KbdFlag_R
        DCB     PCT,      KbdFlag_T
        DCB     0
        ALIGN

SpecialData
        DCB     PCCTRLR,  KbdFlag_Ctrl
        DCB     PCDelete, KbdFlag_Delete
        DCB     PCEnd,    KbdFlag_Copy
        DCB     0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

HAL_KbdScanSetup ROUT
        EntryS
        MRS     r0, CPSR
        ORR     r0, r0, #I32_bit
        MSR     CPSR_c, r0

        LDR     r0, IOMD_Address
        MOV     r1, #IOMD_KBDCR_Enable
        STRB    r1, [r0, #IOMD_KBDCR]
10
        LDRB    r1, [r0, #IOMD_KBDCR]
        TST     r1, #IOMD_KBDCR_TxE
        MOVNE   r1, #PCReset
        STRNEB  r1, [r0, #IOCSERTX]
        BEQ     %BT10

 [ MorrisSupport
        LDRB    r1, [r0, #IOMD_ID0]
        LDRB    r2, [r0, #IOMD_ID1]
        ORR     r1, r1, r2, LSL #8
        LDR     r2, =IOMD_Original
        TEQ     r1, r2
        BEQ     %FT30

        MOV     R1, #IOMD_MSECR_Enable          ; 7500(FE), so initialise 2nd PS2 (mouse) port cos
        STRB    R1, [R0, #IOMD_MSECR]           ; keyboard may be connected there instead
20
        LDRB    R1, [R0, #IOMD_MSECR]
        TST     R1, #IOMD_MSECR_TxE             ; Is port ready to accept data
        MOVNE   R1, #PCReset                    ; NE: port ready, so send 'reset' command
        STRNEB  R1, [R0, #IOMD_MSEDAT]          ;
        BEQ     %BT20                           ; EQ: loop til port ready

        ; Enable mouse RX interrupt
        MOV     r0, #IOMD_MouseRxFull_DevNo
        BL      HAL_IRQEnable

        MOV     R1, #2
        STRB    R1, KbdPort2Present
30
 ]
        ADR     r1, KeyData
        STR     r1, KbdKeyNumTable

        ; Enable main keyboard RX interrupt
        MOV     r0, #IOMD_SerialRx_DevNo
        BL      HAL_IRQEnable

        ; And your time starts now
        LDR     r1, =TimeoutPost + TimeoutPress + TimeoutMargin
        STR     r1, KbdCountDown
        MOV     r0, #IOMD_Timer0_DevNo
        BL      HAL_IRQEnable

        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

HAL_KbdScanFinish ROUT
        MOV     r0, #IOMD_Timer0_DevNo
        B       HAL_IRQDisable

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

HAL_KbdScan ROUT
        ; HAL spec says that bits which are reported as being set must
        ; never be cleared later on. But with MorrisSupport keyboards can
        ; vanish after being detected; assume that it's not a serious issue
        ; if a keyboard vanishes before any keys have been pressed
        LDR     r2, KbdCountDown
        LDRB    r1, KbdPresentFlags
        LDR     r0, KbdFlags
        CMP     r1, #0
        ORRNE   r0, r0, #KbdFlag_Present
        CMP     r2, #0
        ORREQ   r0, r0, #KbdFlag_Done
        MOV     pc, lr

d26 3
a28 57
HAL_KbdScanInterrupt ROUT
        Entry

        TEQ     r0, #IOMD_Timer0_DevNo
        BNE     %FT3
        BL      HAL_IRQClear
        LDR     r1, KbdCountDown
        SUBS    r1, r1, #1              ; Be a little more patient
        STRPL   r1, KbdCountDown
        B       %FT90
3
        LDR     r2, IOMD_Address
 [ MorrisSupport
        LDRB    r1, KbdPort2Present     ; Check if 2nd PS2 port (in Morris) is available
        TEQ     r1, #0
        BEQ     %FT4

        TEQ     r0, #IOMD_MouseRxFull_DevNo
        LDREQB  r2, [r2, #IOMD_MSEDAT]  ; EQ: 2nd port present and interrupting, get scan code
        MOVEQ   r1, #2                  ; EQ: indicate which port
        BEQ     %FT5                    ; EQ: process it
                                        ; NE: 2nd port not present or interrupting
                                        ;     drop through and check 1st port
4
 ]
        TEQ     r0, #IOMD_SerialRx_DevNo 
        EXIT    NE                      ; If not keyboard then exit.

        LDRB    r2, [r2, #IOCSERRX]     ; Get scan code.

 [ MorrisSupport
        MOV     r1, #1
5
        LDRB    r0, KbdPresentFlags

        TEQ     r2, #0                  ; Assume that zero is the end of a mouse AA 00 start up
        BICEQ   r0, r0, r1              ; sequence, so clear keyboard present indication.
        STREQB  r0, KbdPresentFlags
        BEQ     %FT90                   ; and exit

        ORR     r0, r0, r1              ; Not zero, mark keyboard present
 |
        MOV     r0, #1                  ; Medusa keyboard, not a mouse
 ]
        STRB    r0, KbdPresentFlags

        ADR     r1, SpecialData

        TEQ     r2, #PCSpecial          ; If special code then
        STREQ   r1, KbdKeyNumTable      ;   switch tables
        BEQ     %FT90                   ;   and exit.

        LDR     r0, KbdKeyNumTable      ; Get pointer to current table.

        TEQ     r0, r1                  ; Only use special table once, then
        ADREQ   r1, KeyData             ;   switch back to normal table.
        STREQ   r1, KbdKeyNumTable
d30 4
a33 16
        LDRB    r1, [r0], #2            ; Get key code from table.
        TEQ     r1, #0                  ; If at end of table then
        BEQ     %FT90                   ;   ignore key.

        TEQ     r1, r2                  ; If not this key then
        BNE     %BT10                   ;   try the next.

        LDRB    r1, [r0, #-1]           ; Get flag.
        LDR     r3, KbdFlags
        ORR     r3, r3, #KbdFlag_Present :OR: KbdFlag_Done ; End the scan if we got a valid key
        ORR     r3, r3, r1
        STR     r3, KbdFlags
90
        MOV     r0, #-1                 ; IRQ handled
        EXIT

@


1.3
log
@Run boot time keyboard scan in parallel with RAM clear
Previously the RAM clear would take place (in the kernel startup) then 5s of waiting for the keyboard would occur.
Now, if a keypress is detected the scan is terminated early, or if 2s has elapsed (allowing for the keyboard's POST plus a typematic repeat plus a bit of slack).
This way, if your RAM clear takes 2s or more the boot process is 5s faster.
Tested on a Risc PC with 128MB of RAM.

Version 0.28. Tagged as 'IOMD-0_28'
@
text
@a51 1
PCBSpace        *       &66
a64 1
        DCB     PCBSpace, KbdFlag_Delete
@


1.2
log
@Correct the sense of the protection link LK5
Top.s: ORRNE -> ORREQ to match RISC OS 3.70 et al
KbdScan.s: Substitute a few of the constants to make it simpler to read
Tested on a Risc PC with and without protection enabled, compared with RISC OS 3.70 ROMs.

Version 0.21. Tagged as 'IOMD-0_21'
@
text
@d33 2
d40 3
a43 1
PCReset         *       &AA
d55 5
d91 1
a91 1
        MOVNE   r1, #&FF
d108 1
a108 1
        MOVNE   R1, #&FF                        ; NE: port ready, so send 'reset' command
d117 1
a117 1
        STRB    R1, Port2Present
d121 1
a121 1
        STR     r1, KeyDataPtr
d124 7
a130 1
        MOV     r0, #IOMDr_SerialRx_DevNo
d138 2
a139 1
        MOV     pc, lr
d148 1
d153 2
d162 8
d172 1
a172 1
        LDRB    r1, Port2Present        ; Check if 2nd PS2 port (in Morris) is available
a197 1
 ]
d200 3
d208 1
a208 1
        STREQ   r1, KeyDataPtr          ;   switch tables
d211 1
a211 1
        LDR     r0, KeyDataPtr          ; Get pointer to current table.
d215 1
a215 2
        STREQ   r1, KeyDataPtr
        LDR     r3, KbdFlags
d219 1
a219 1
        BEQ     %FT80                   ;   ignore key.
d225 2
a226 1
        ORR     r3, r3, #KbdFlag_Present; Keyboard definitely present if we got a valid key
a227 1
80
@


1.1
log
@Rewrite Makefile & RAM setup code. Remove/tidy other scripts. Add support for compressed ROMs, keyboard scan, HAL_Reset, HAL_MonitorLeadID and HAL_PhysInfo.
Detail:
  Makefile, MkClean,fd7, MkRom,fd7 - Rewritten
  CopyIt,feb, CopyIt2,feb, CopyItKB,feb, GlueIt,feb, aif, bin, gpa, o - Deleted obsolete files/folders
  s/Boot, s/Top - Moved image entry point from s/Boot to s/Top, to match other HALs. Rewritten RAM setup code to avoid poking dangerous registers during softloads, and to hopefully fix problems people have been having with some memory configurations.
  c/cbits - C code for use during RAM initialisation. Examines the detected RAM banks to work out the optimal physical RAM layout and where to relocate the ROM image, taking into account any ROM compression.
  s/ATA - Convert tabs to spaces for consistency. Fix conditional MOV pc,lr in HAL_ATACableID.
  s/Boot - Added HAL_PhysInfo implementation, based around pre-HAL kernel code. Added HAL_Reset implementation, using similar code to the softload tool to disable the MMU and restart the ROM. Convert tabs to spaces for consistency.
  s/Video, hdr/StaticWS - Added HAL_MonitorLeadID implementation, based around pre-HAL kernel code. Retab Video_init.
  s/KbdScan, hdr/StaticWS - Added HAL_KbdScan_* implementation, based around pre-HAL kernel code.
  s/NVRAM - Convert tabs to spaces for consistency
  hdr/Copro15ops - ARMv3/v4 cache/TLB macros for use during HAL_Reset
  hdr/IOMD - New header to pull together all the physical memory map definitions
Admin:
  Tested in IOMD ROM softload on RiscPC, plus as 'real' ROM under RPCEmu
  New RAM setup code may be a bit buggy still


Version 0.11. Tagged as 'IOMD-0_11'
@
text
@a18 1
        GET     Hdr:ImageSize.<ImageSize>
d24 1
a37 9
IOData          *       IOCSERTX
IOStatus        *       IOMD_KBDCR
IOControl       *       IOMD_KBDCR
stat_RXF        *       IOMD_KBDCR_RxF
stat_TXE        *       IOMD_KBDCR_TxE
ctl_Enable      *       IOMD_KBDCR_Enable
ctl_EnableIRQ   *       0       ; not needed on IOMD


d77 2
a78 2
        MOV     r1, #ctl_Enable + ctl_EnableIRQ
        STRB    r1, [r0, #IOControl]
d80 2
a81 2
        LDRB    r1, [r0, #IOStatus]
        TST     r1, #stat_TXE
d83 1
a83 1
        STRNEB  r1, [r0, #IOData]
d94 2
a95 2
        MOV     R1, #IOMD_MSECR_Enable          ;7500(FE), so initialise 2nd PS2 (mouse) port cos
        STRB    R1, [R0, #IOMD_MSECR]           ;keyboard may be connected there instead
d98 2
a99 2
        TST     R1, #IOMD_MSECR_TxE             ;Is port ready to accept data
        MOVNE   R1, #&FF                        ;NE: port ready, so send 'reset' command
d101 1
a101 1
        BEQ     %BT20                           ;EQ: loop til port ready
d104 1
a104 1
        MOV     r0, #22
d115 1
a115 1
        MOV     r0, #15
d145 1
a145 1
        LDRB    r1, Port2Present ;Check if 2nd PS2 port (in Morris) is available
d149 6
a154 6
        TEQ     r0, #22                 ; Mouse IRQ?
        LDREQB  r2, [r2, #IOMD_MSEDAT]  ;EQ: 2nd port present and interrupting, get scan code
        MOVEQ   r1, #2                  ;EQ: indicate which port
        BEQ     %FT5                    ;EQ: process it
                                        ;NE: 2nd port not present or interrupting
                                        ;    drop through and check 1st port
d157 2
a158 2
        TEQ     r0, #15                 ; If not keyboard then
        EXIT    NE                      ;   exit.
d160 1
a160 1
        LDRB    r2, [r2, #IOData]       ; Get scan code.
d167 1
a167 1
        TEQ     r2, #0                  ;Assume that zero is the end of a mouse AA 00 start up
d173 1
a173 1
        ORR     r0, r0, r1              ;Not zero, mark keyboard present
@

