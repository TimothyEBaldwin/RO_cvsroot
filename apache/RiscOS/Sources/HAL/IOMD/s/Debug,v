head	1.1;
access;
symbols
	IOMD-0_36:1.1
	SMP:1.1.0.2
	SMP_bp:1.1
	IOMD-0_35:1.1
	IOMD-0_34:1.1
	IOMD-0_33:1.1
	IOMD-0_32:1.1
	IOMD-0_31:1.1
	IOMD-0_30:1.1
	IOMD-0_29:1.1
	IOMD-0_28:1.1
	IOMD-0_27:1.1
	IOMD-0_26:1.1
	IOMD-0_25:1.1
	IOMD-0_24:1.1
	IOMD-0_23:1.1
	IOMD-0_22:1.1
	IOMD-0_20:1.1
	IOMD-0_19:1.1
	IOMD-0_18:1.1
	IOMD-0_17:1.1
	IOMD-0_16:1.1
	IOMD-0_15:1.1
	IOMD-0_14:1.1
	IOMD-0_13:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.06.19.23.38.31;	author jlee;	state Exp;
branches;
next	;
commitid	bSrBAroyIB3Jin9w;


desc
@@


1.1
log
@Add debugging code. Fix detection of RAM in bank 3.
Detail:
  hdr/Debug, hdr/UART, s/Boot, s/Debug, Makefile - Added HAL_DebugTX/HAL_DebugRX implementations, and assorted functions/macros for getting pre-MMU debug output from the HAL. Use Debug switch in hdr/Debug to turn debugging on/off (currently off by default).
  s/Top - Added lots of debug output to help track down RAM detection/configuration issues. Fixed RAM detection result for bank 3 being overwritten with result for bank 2 in NoRelocate.
Admin:
  Tested under RPCEmu & StrongARM softload
  Warning - RPCEmu doesn't emulate the serial line status register. This means debug builds will hang on startup.


Version 0.13. Tagged as 'IOMD-0_13'
@
text
@; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS
        GET     hdr.Debug
        GET     hdr.IOMD

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  HAL_DebugRX
        EXPORT  HAL_DebugTX

  [ Debug
        IMPORT  Config710

        EXPORT  Debug_Init
        EXPORT  Debug0
        EXPORT  DebugStr
        EXPORT  DebugHex

Debug_Init      ROUT
        MOV     v1, lr
        LDR     a1, =C710Phys
        BL      Config710
        ; Configure for 115200 baud, 8N1, no flow control
        MOV     a2, #0
        STRB    a2, [a1, #UART_IER]
        MOV     a2, #DLAB
        STRB    a2, [a1, #UART_LCR]
        MOV     a2, #1                          ; 115200 baud
        STRB    a2, [a1, #UART_DLL]
        MOV     a2, #0
        STRB    a2, [a1, #UART_DLM]
        MOV     a2, #FIFOEN+FIFORSTRX+FIFORSTTX
        STRB    a2, [a1, #UART_FCR]
        MOV     a2, #WLS_8
        STRB    a2, [a1, #UART_LCR]
        MOV     a2, #DTR+RTS+OUT2
        STRB    a2, [a1, #UART_MCR]
        MOV     pc, v1

        ; Output string at a1
        ; Corrupts a1-a3
Debug0          ROUT
        DebugStr_inl a1, a2, a3
        MOV     pc, lr

        ; Output string at lr
        ; Corrupts a1-a2
DebugStr        ROUT
        DebugStr_inl lr, a1, a2
        ADD     lr, lr, #3
        BIC     pc, lr, #3

        ; Output hex number in a1
        ; Corrupts a2-a3
DebugHex        ROUT
        LDR     a2, =C710Phys
        GBLA    nibble
nibble  SETA    0
        WHILE   nibble < 8
nibble  SETA    nibble + 1
10      LDRB    a3, [a2, #UART_LSR]
        TST     a3, #THRE
        BEQ     %BT10
        ADR     a3, HexTab
        LDRB    a3, [a3, a1, LSR #28]
        MOV     a1, a1, ROR #28 ; ROR to preserve a1
        STRB    a3, [a2, #UART_THR]
        WEND
        MOV     pc, lr

HexTab  = "0123456789abcdef"

; out: a1 = character, or -1 if none available
HAL_DebugRX     ROUT
        LDR     ip, C710_Address
        LDRB    a2, [ip, #UART_LSR]
        TST     a2, #DR
        MOVEQ   a1, #-1
        LDRNEB  a1, [ip, #UART_RBR]
        MOV     pc, lr

; in: a1 = character to TX
HAL_DebugTX     ROUT
        LDR     ip, C710_Address
05      LDRB    a2, [ip, #UART_LSR]
        TST     a2, #THRE
        BEQ     %BT05
        STRB    a1, [ip, #UART_THR]
        MOV     pc, lr

  | ; Debug
HAL_DebugRX
        MOV     a1, #-1
HAL_DebugTX
        MOV     pc, lr
  ] ; Debug


        END
@
