head	1.5;
access;
symbols
	IOMD-0_36:1.5
	SMP:1.5.0.2
	SMP_bp:1.5
	IOMD-0_35:1.5
	IOMD-0_34:1.5
	IOMD-0_33:1.5
	IOMD-0_32:1.5
	IOMD-0_31:1.5
	IOMD-0_30:1.5
	IOMD-0_29:1.5
	IOMD-0_28:1.5
	IOMD-0_27:1.5
	IOMD-0_26:1.5
	IOMD-0_25:1.5
	IOMD-0_24:1.5
	IOMD-0_23:1.5
	IOMD-0_22:1.5
	IOMD-0_20:1.5
	IOMD-0_19:1.5
	IOMD-0_18:1.5
	IOMD-0_17:1.5
	IOMD-0_16:1.5
	IOMD-0_15:1.5
	IOMD-0_14:1.5
	IOMD-0_13:1.5
	IOMD-0_12:1.5
	IOMD-0_11:1.5
	IOMD-0_10:1.4
	IOMD-0_09:1.4
	IOMD-0_08:1.4
	IOMD-0_07:1.4
	IOMD-0_06:1.4
	IOMD-0_05:1.3
	IOMD-0_04:1.3
	IOMD-0_03:1.3
	IOMD-0_02:1.3
	HAL_merge:1.1.2.2
	IOMD-0_01:1.2
	Kernel-5_35-4_79_2_59:1.1.2.2
	Kernel-5_35-4_79_2_58:1.1.2.2
	Kernel-5_35-4_79_2_57:1.1.2.2
	Kernel-5_35-4_79_2_56:1.1.2.2
	Kernel-5_35-4_79_2_55:1.1.2.2
	Kernel-5_35-4_79_2_54:1.1.2.2
	Kernel-5_35-4_79_2_53:1.1.2.2
	Kernel-5_35-4_79_2_52:1.1.2.2
	Kernel-5_35-4_79_2_51:1.1.2.2
	Kernel-5_35-4_79_2_50:1.1.2.2
	Kernel-5_35-4_79_2_49:1.1.2.2
	Kernel-5_35-4_79_2_48:1.1.2.2
	Kernel-5_35-4_79_2_47:1.1.2.2
	Kernel-5_35-4_79_2_46:1.1.2.2
	Kernel-5_35-4_79_2_45:1.1.2.2
	Kernel-5_35-4_79_2_44:1.1.2.2
	MSI_Demo_merge:1.1.2.2
	Kernel-5_35-4_79_2_25_2_2:1.1.2.2
	Kernel-5_35-4_79_2_43:1.1.2.2
	Kernel-5_35-4_79_2_42:1.1.2.2
	Kernel-5_35-4_79_2_41:1.1.2.2
	Kernel-5_35-4_79_2_40:1.1.2.2
	Kernel-5_35-4_79_2_39:1.1.2.2
	Kernel-5_35-4_79_2_38:1.1.2.2
	Kernel-5_35-4_79_2_37:1.1.2.2
	Kernel-5_35-4_79_2_36:1.1.2.2
	Kernel-5_35-4_79_2_35:1.1.2.2
	Kernel-5_35-4_79_2_34:1.1.2.2
	Kernel-5_35-4_79_2_33:1.1.2.2
	Kernel-5_35-4_79_2_32:1.1.2.2
	Kernel-5_35-4_79_2_25_2_1:1.1.2.2
	MSI_Demo:1.1.2.2.0.2
	Kernel-5_35-4_79_2_31:1.1.2.2
	Kernel-5_35-4_79_2_30:1.1.2.2
	Kernel-5_35-4_79_2_29:1.1.2.2
	Kernel-5_35-4_79_2_28:1.1.2.2
	Kernel-5_35-4_79_2_27:1.1.2.2
	Kernel-5_35-4_79_2_26:1.1.2.2
	Kernel-5_35-4_79_2_25:1.1.2.2
	Kernel-5_35-4_79_2_24:1.1.2.2
	Kernel-5_35-4_79_2_23:1.1.2.2
	Kernel-5_35-4_79_2_22:1.1.2.2
	Kernel-5_35-4_79_2_21:1.1.2.2
	Kernel-5_35-4_79_2_20:1.1.2.2
	Kernel-5_35-4_79_2_19:1.1.2.2
	Kernel-5_35-4_79_2_18:1.1.2.2
	Kernel-5_35-4_79_2_17:1.1.2.2
	Kernel-5_35-4_79_2_16:1.1.2.2
	Kernel-5_35-4_79_2_15:1.1.2.2
	Kernel-5_35-4_79_2_14:1.1.2.2
	Kernel-5_35-4_79_2_13:1.1.2.2
	Kernel-5_35-4_79_2_12:1.1.2.2
	Kernel-5_35-4_79_2_11:1.1.2.2
	Kernel-5_35-4_79_2_10:1.1.2.2
	Kernel-5_35-4_79_2_9:1.1.2.2
	Kernel-5_35-4_79_2_8:1.1.2.1
	HAL:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2012.02.25.17.16.39;	author jlee;	state Exp;
branches;
next	1.4;
commitid	Dn81wPJ3GobPSyUv;

1.4
date	2010.02.02.00.56.55;	author jlee;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.22.01.41.45;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.22.00.15.18;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.16.46.36;	author dellis;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.10.05.16.46.36;	author dellis;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2000.10.06.09.08.11;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Rewrite Makefile & RAM setup code. Remove/tidy other scripts. Add support for compressed ROMs, keyboard scan, HAL_Reset, HAL_MonitorLeadID and HAL_PhysInfo.
Detail:
  Makefile, MkClean,fd7, MkRom,fd7 - Rewritten
  CopyIt,feb, CopyIt2,feb, CopyItKB,feb, GlueIt,feb, aif, bin, gpa, o - Deleted obsolete files/folders
  s/Boot, s/Top - Moved image entry point from s/Boot to s/Top, to match other HALs. Rewritten RAM setup code to avoid poking dangerous registers during softloads, and to hopefully fix problems people have been having with some memory configurations.
  c/cbits - C code for use during RAM initialisation. Examines the detected RAM banks to work out the optimal physical RAM layout and where to relocate the ROM image, taking into account any ROM compression.
  s/ATA - Convert tabs to spaces for consistency. Fix conditional MOV pc,lr in HAL_ATACableID.
  s/Boot - Added HAL_PhysInfo implementation, based around pre-HAL kernel code. Added HAL_Reset implementation, using similar code to the softload tool to disable the MMU and restart the ROM. Convert tabs to spaces for consistency.
  s/Video, hdr/StaticWS - Added HAL_MonitorLeadID implementation, based around pre-HAL kernel code. Retab Video_init.
  s/KbdScan, hdr/StaticWS - Added HAL_KbdScan_* implementation, based around pre-HAL kernel code.
  s/NVRAM - Convert tabs to spaces for consistency
  hdr/Copro15ops - ARMv3/v4 cache/TLB macros for use during HAL_Reset
  hdr/IOMD - New header to pull together all the physical memory map definitions
Admin:
  Tested in IOMD ROM softload on RiscPC, plus as 'real' ROM under RPCEmu
  New RAM setup code may be a bit buggy still


Version 0.11. Tagged as 'IOMD-0_11'
@
text
@; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS

        EXPORT  HAL_NVMemoryType
        EXPORT  HAL_NVMemorySize
        EXPORT  HAL_NVMemoryPageSize
        EXPORT  HAL_NVMemoryProtectedSize
        EXPORT  HAL_NVMemoryProtection
        EXPORT  HAL_NVMemoryIICAddress
        EXPORT  HAL_NVMemoryRead
        EXPORT  HAL_NVMemoryWrite

        AREA    |Asm$$Code|, CODE, READONLY, PIC

HAL_NVMemoryType
        LDR     R0, =NVMemoryFlag_IIC :OR: NVMemoryFlag_ProtectAtEnd
        MOV     pc, lr

HAL_NVMemorySize
        MOV     R0, #256
        MOV     pc, lr

HAL_NVMemoryPageSize
        MOV     R0, #16
        MOV     pc, lr

HAL_NVMemoryProtectedSize
        MOV     R0, #0
        MOV     pc, lr

; in: r0 = 0/1 to unprotect/protect
HAL_NVMemoryProtection
        MOV     pc, lr

HAL_NVMemoryIICAddress
        MOV     R0, #&a0
        MOV     pc, lr

HAL_NVMemoryRead
        MOV     pc, lr

HAL_NVMemoryWrite
        MOV     pc, lr

        END

@


1.4
log
@Tweak IOMD HAL NVRAM settings and add dummy keyboard scan code to get CMOS working properly
Detail:
  s/NVRAM - Changed the NVRAM setting from 'MaybeIIC' to just 'IIC', as a workaround for RPCemu's apparently buggy support for IIC probing (plus we know the address of the RTC/CMOS chip anyway - no need for the kernel to probe for it)
  s/Boot - Add dummy keyboard scan functions, so kernel doesn't think the CMOS reset keys are being held down on each boot.
Admin:
  Tested under RPCemu. CMOS settings now seem to load and save properly.


Version 0.06. Tagged as 'IOMD-0_06'
@
text
@d27 8
a34 8
    	EXPORT	HAL_NVMemoryType
    	EXPORT	HAL_NVMemorySize
    	EXPORT  HAL_NVMemoryPageSize
    	EXPORT	HAL_NVMemoryProtectedSize
    	EXPORT	HAL_NVMemoryProtection
    	EXPORT	HAL_NVMemoryIICAddress
    	EXPORT	HAL_NVMemoryRead
    	EXPORT	HAL_NVMemoryWrite
d39 1
a39 1
    	LDR 	R0, =NVMemoryFlag_IIC :OR: NVMemoryFlag_ProtectAtEnd
d43 1
a43 1
    	MOV 	R0, #256
d51 1
a51 1
    	MOV 	R0, #0
d59 1
a59 1
    	MOV 	R0, #&a0
@


1.3
log
@  Updating and development of the IOMD HAL.
Detail:
  * Resolved multiple declaration of HighestOSEntry
  * Extended IRQ code to modern HAL API
  * New FIQ code, partially copied from Tungsten HAL
  * Added HAL_PlatformInfo and HAL_NVMemoryPageSize, both additional
    requirements of recent kernels
  * Default hard-coded screen mode changed to VGA timings - few modern monitors
    will sync down to the old TV rate modes
  * RAM map hard-coded to match the A7000 I'm using for development
    (previously was hard-coded for a 2MB VRAM + 16 MB DRAM Risc PC -
    ultimately, we need to merge in the autodetection code from non-HAL kernels)
  * Video DMA width tweaked so it works on non-VRAM machines (again this should
    be autodetected)
Admin:
  Known issues include: OS_Reset and hardware scrolling don't work
                        CMOS appears to be reset on every boot
  Work in progress

Version 0.02. Tagged as 'IOMD-0_02'
@
text
@d39 1
a39 1
    	LDR 	R0, =NVMemoryFlag_MaybeIIC :OR: NVMemoryFlag_ProtectAtEnd
@


1.2
log
@Merged IOMD HAL to trunk.

Version 0.01. Tagged as 'IOMD-0_01'
@
text
@d29 1
d46 4
@


1.1
log
@file NVRAM was initially added on branch HAL.
@
text
@d1 64
@


1.1.2.1
log
@  Added HAL NVRAM support
Detail:
  Added the HAL NVRAM entries.
  Modified i2cutils to use the HAL entries for NVRAM and behave sensibly if the HAL reports that there is no NVRAM, in which case there must be a forced reset_cmos call so that the cache gets set up sensibly.
Admin:
  Tested under the RPC emulator and appears to be working correctly, although some calls to IIC are still being made in the no nvram case.

Version 5.35, 4.79.2.8. Tagged as 'Kernel-5_35-4_79_2_8'
@
text
@a0 67
; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS

    	EXPORT	HAL_NVMemoryType
    	EXPORT	HAL_NVMemorySize
    	EXPORT	HAL_NVMemoryProtectedSize
    	EXPORT	HAL_NVMemoryProtection
    	EXPORT	HAL_NVMemoryIICAddress
    	EXPORT	HAL_NVMemoryRead
    	EXPORT	HAL_NVMemoryWrite

        AREA    |Asm$$Code|, CODE, READONLY, PIC

HAL_NVMemoryTypeFlags
    	DCD 	NVMemoryFlag_MaybeIIC :OR: NVMemoryFlag_ProtectAtEnd
HAL_NVMemoryType
    	LDR 	R0, HAL_NVMemoryTypeFlags
        MOV     pc, lr

; Number of 256 blocks available
HAL_NVMemorySize
    	MOV 	R0, #1
        MOV     pc, lr

HAL_NVMemoryProtectedSize
    	MOV 	R0, #0
        MOV     pc, lr

; in: r0 = 0/1 to unprotect/protect
HAL_NVMemoryProtection
        MOV     pc, lr

HAL_NVMemoryIICAddress
    	MOV 	R0, #&a0
        MOV     pc, lr

HAL_NVMemoryRead
        MOV     pc, lr

HAL_NVMemoryWrite
        MOV     pc, lr

        END

@


1.1.2.2
log
@Wahey! This version gives you a display.

It says "Abort on data transfer".
@
text
@d37 2
d40 1
a40 1
    	LDR 	R0, =NVMemoryFlag_MaybeIIC :OR: NVMemoryFlag_ProtectAtEnd
d43 1
d45 1
a45 1
    	MOV 	R0, #256
@


