head	1.6;
access;
symbols
	IOMD-0_36:1.6
	SMP:1.6.0.2
	SMP_bp:1.6
	IOMD-0_35:1.6
	IOMD-0_34:1.6
	IOMD-0_33:1.6
	IOMD-0_32:1.6
	IOMD-0_31:1.5
	IOMD-0_30:1.5
	IOMD-0_29:1.5
	IOMD-0_28:1.5
	IOMD-0_27:1.5
	IOMD-0_26:1.4
	IOMD-0_25:1.4
	IOMD-0_24:1.3
	IOMD-0_23:1.3
	IOMD-0_22:1.3
	IOMD-0_20:1.3
	IOMD-0_19:1.3
	IOMD-0_18:1.3
	IOMD-0_17:1.2
	IOMD-0_16:1.1
	IOMD-0_15:1.1
	IOMD-0_14:1.1
	IOMD-0_13:1.1
	IOMD-0_12:1.1
	IOMD-0_11:1.1;
locks; strict;
comment	@# @;


1.6
date	2014.10.07.07.25.07;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	6z0LCoFhcaULUeTx;

1.5
date	2013.05.25.15.52.25;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	kwoJ5V6eAGLfN1Rw;

1.4
date	2013.03.28.21.48.41;	author jlee;	state Exp;
branches;
next	1.3;
commitid	4NAwCJkLkDe3DBJw;

1.3
date	2012.07.15.12.07.29;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	th0BmFZji9LRDEcw;

1.2
date	2012.07.09.07.32.07;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	5eSZam1l3tbmjRbw;

1.1
date	2012.02.25.17.16.34;	author jlee;	state Exp;
branches;
next	;
commitid	Dn81wPJ3GobPSyUv;


desc
@@


1.6
log
@Extend HAL_ControllerAddress to report where the Gemini ASIC is
Useful for a future 32 bit PC card, or similar coprocessor plugins.

Version 0.32. Tagged as 'IOMD-0_32'
@
text
@; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

ROMBank0Phys      *  &00000000
ROMBank1Phys      *  &01000000

VideoPhysRam      *  &02000000       ; Amazing - it's in the same place!
SAMLength         *  512*4           ; SAM length in bytes for 1 bank of VRAM

IOPhys            *  &03000000
IOSize            *  &00800000

C710Phys          *  &03010000       ; 82C710/SuperIO/SMC37C665/whatever you want to call it
IOMDPhys          *  &03200000       ; aka 'S Space', see TRM table 1.15
VIDCPhys          *  &03400000       ; used to address VIDC when MMU is off
GeminiPhys        *  &03600000       ; PC coprocessor ASIC

EASIPhys          *  &08000000
EASISlotSize      *  &01000000
EASISlotSizeShift *  24
EASISlots         *  8
EASISize          *  EASISlotSize * EASISlots

DRAM0PhysRam      *  &10000000       ; 4 DRAM banks
DRAM1PhysRam      *  &14000000
DRAM2PhysRam      *  &18000000
DRAM3PhysRam      *  &1C000000
DRAMBankSize      *  &04000000       ; Size of each bank

IOMDPhysSpaceSize *  &20000000       ; IOMD physical map is 512M big

; Extra Kinetic areas
SDRAM0PhysRam     *  &20000000       ; 2 SDRAM banks
SDRAM1PhysRam     *  &30000000
SDRAMBankSize     *  &08000000       ; Size of each bank

ZeroWaitState     *  &E8000000       ; Cache cleaner area

SDCfgReg          *  &EC000000       ; RAM steering
SDCfg_RAM_ROM     *  1:SHL:0         ; 0 => ROM, 1 => SDRAM at address 0
SDCfg_SHAD_SIZE   *  1:SHL:1         ; Not implemented
SDCfg_SHAD_WP     *  1:SHL:2         ; Not implemented
SDCfg_SIZE_12_2_8 *  2_00:SHL:3
SDCfg_SIZE_12_2_9 *  2_01:SHL:3      ; Default row/bank/columns
SDCfg_SIZE_13_2_9 *  2_10:SHL:3

A0      *       1 :SHL: 00           ; Address line constants
A1      *       1 :SHL: 01
A2      *       1 :SHL: 02
A3      *       1 :SHL: 03
A4      *       1 :SHL: 04
A5      *       1 :SHL: 05
A6      *       1 :SHL: 06
A7      *       1 :SHL: 07
A8      *       1 :SHL: 08
A9      *       1 :SHL: 09
A10     *       1 :SHL: 10
A11     *       1 :SHL: 11
A12     *       1 :SHL: 12
A13     *       1 :SHL: 13
A14     *       1 :SHL: 14
A15     *       1 :SHL: 15
A16     *       1 :SHL: 16
A17     *       1 :SHL: 17
A18     *       1 :SHL: 18
A19     *       1 :SHL: 19
A20     *       1 :SHL: 20
A21     *       1 :SHL: 21
A22     *       1 :SHL: 22
A23     *       1 :SHL: 23
A24     *       1 :SHL: 24
A25     *       1 :SHL: 25
A26     *       1 :SHL: 26
A27     *       1 :SHL: 27
A28     *       1 :SHL: 28
A29     *       1 :SHL: 29
A30     *       1 :SHL: 30
A31     *       1 :SHL: 31

                END
@


1.5
log
@Change to SDRAM probing for 256MB Kinetic
The RAM probing for Kinetic relied on the default row/column split which doesn't quite have enough address lines for 256MB SODIMMs.
Try probing each of the 3 supported row/column splits in descending order, stopping when either no RAM is found (it's not a Kinetic) or when the address lines have no holes, whichever is sooner.
Careful not to rearrange the memory when softloaded!
Tested with a 64MB, 128MB, 256MB SODIMM in both physical ROM and softload form.

Version 0.27. Tagged as 'IOMD-0_27'
@
text
@d25 2
a26 1
IOMDPhys          *  &03200000
d28 1
a28 1
C710Phys          *  &03010000       ; 82C710/SuperIO/SMC37C665/whatever you want to call it
@


1.4
log
@Add Kinetic support
Detail:
  hdr/IOMD - Add definitions for the interesting bits of the Kinetic memory map
  hdr/StaticWS - Add an extra flag to workspace for whether we're running on a Kinetic
  s/Top - Add debug options for ignoring DRAM & ignoring the Kinetic card. Update startup code to add Kinetic card + SDRAM detection. Current code makes no attempt to configure the SDRAM timings and assumes the correct settings have been set via the DIP switches.
  s/Boot - Update HAL_CleanerSpace, HAL_PhysInfo & HAL_InitDevices to cope with running on a Kinetic.
  s/Post - Update POST routine register usage. Add experimental (disabled) code to not count a "SDRAM+VRAM but no DRAM" situation as a POST failure. The OS will boot in that configuration, but lack of DMA capable memory is troublesome.
  s/ATA - Adjust the flags returned by HAL_ATAControllerInfo to match the comments. Although the old flags were technically wrong, this had no effect on function as the lack of DMA support meant they were never acted on by ADFS.
Admin:
  Tested in ROM softload on Kinetic RiscPC, and in RPCEmu
  Note that if a Kinetic card is fitted, the IOMD DMA HAL devices won't be registered with the OS, as DMAManager isn't yet ready to cope with the possibility of DMA-incapable memory.


Version 0.25. Tagged as 'IOMD-0_25'
@
text
@d50 7
@


1.3
log
@Addition of POST checking
Unlike some more recent targets, there are a lot of optional/removeable bits on IOMD platforms which may stop the machine booting, this checks for
* VRAM (non fatal if missing)
* RAM
* ROM checksum
* Video timing
* IOMD
in the event of a failure the fault code is flashed on the floppy drive LED (pattern decoder in TRM appendix A).

Video.s: the POST code highlighted that the VIDCTAB had the wrong VCO reference clock on Medusa - this is now corrected for a 60Hz mode.
IOMD.hdr: share the address line bits
Tested on Risc PC + A7000, the timing emulation is not accurate enough on RPCEmu, so POST is skipped under emulation.

Version 0.18. Tagged as 'IOMD-0_18'
@
text
@d41 9
a49 1
PhysSpaceSize     *  &20000000       ; IOMD physical map is 512M big. Will be wrong for Kinetic!
@


1.2
log
@Added autodetection of ROM size
New function Count_Hard_ROM looks with the MMU off at how big the ROM chip is (because both softloaded and compressed ROMs might be smaller or larger than the chips themselves).
Adopt revised HAL_PhysInfo API.
Removed pointless setting of ECTCR since the podule manager does that itself anyway.
Last two NullEntry in the entry point table trimmed.
Tested on RPCEmu (which emulates 8MB of ROM) and a Risc PC (with 4MB ROM).

Version 0.17. Tagged as 'IOMD-0_17'
@
text
@d43 32
@


1.1
log
@Rewrite Makefile & RAM setup code. Remove/tidy other scripts. Add support for compressed ROMs, keyboard scan, HAL_Reset, HAL_MonitorLeadID and HAL_PhysInfo.
Detail:
  Makefile, MkClean,fd7, MkRom,fd7 - Rewritten
  CopyIt,feb, CopyIt2,feb, CopyItKB,feb, GlueIt,feb, aif, bin, gpa, o - Deleted obsolete files/folders
  s/Boot, s/Top - Moved image entry point from s/Boot to s/Top, to match other HALs. Rewritten RAM setup code to avoid poking dangerous registers during softloads, and to hopefully fix problems people have been having with some memory configurations.
  c/cbits - C code for use during RAM initialisation. Examines the detected RAM banks to work out the optimal physical RAM layout and where to relocate the ROM image, taking into account any ROM compression.
  s/ATA - Convert tabs to spaces for consistency. Fix conditional MOV pc,lr in HAL_ATACableID.
  s/Boot - Added HAL_PhysInfo implementation, based around pre-HAL kernel code. Added HAL_Reset implementation, using similar code to the softload tool to disable the MMU and restart the ROM. Convert tabs to spaces for consistency.
  s/Video, hdr/StaticWS - Added HAL_MonitorLeadID implementation, based around pre-HAL kernel code. Retab Video_init.
  s/KbdScan, hdr/StaticWS - Added HAL_KbdScan_* implementation, based around pre-HAL kernel code.
  s/NVRAM - Convert tabs to spaces for consistency
  hdr/Copro15ops - ARMv3/v4 cache/TLB macros for use during HAL_Reset
  hdr/IOMD - New header to pull together all the physical memory map definitions
Admin:
  Tested in IOMD ROM softload on RiscPC, plus as 'real' ROM under RPCEmu
  New RAM setup code may be a bit buggy still


Version 0.11. Tagged as 'IOMD-0_11'
@
text
@d25 4
d41 1
a41 3
IOMDPhys          *  &03200000
VIDCPhys          *  &03400000       ; used to address VIDC when MMU is off
C710Phys          *  &03010000       ; 82C710/SuperIO/SMC37C665/whatever you want to call it
@

