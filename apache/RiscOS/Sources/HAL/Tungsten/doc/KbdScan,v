head	1.1;
access;
symbols
	Tungsten-0_63:1.1
	Tungsten-0_62:1.1
	Tungsten-0_61:1.1
	Tungsten-0_60:1.1
	SMP:1.1.0.2
	SMP_bp:1.1
	Tungsten-0_59:1.1
	Tungsten-0_58:1.1
	Tungsten-0_57:1.1
	Tungsten-0_56:1.1
	Tungsten-0_55:1.1
	Tungsten-0_54:1.1
	Tungsten-0_53:1.1
	Tungsten-0_52:1.1
	Tungsten-0_51:1.1
	Tungsten-0_50:1.1
	Tungsten-0_49:1.1
	Tungsten-0_48:1.1
	Tungsten-0_47:1.1
	Tungsten-0_46:1.1
	Tungsten-0_45:1.1
	Tungsten-0_44:1.1
	Tungsten-0_43:1.1
	Tungsten-0_42:1.1
	Tungsten-0_41:1.1
	Tungsten-0_40:1.1
	Tungsten-0_39:1.1
	Tungsten-0_38:1.1
	Tungsten-0_37:1.1
	Tungsten-0_36:1.1
	Tungsten-0_35:1.1
	Tungsten-0_34:1.1
	Tungsten-0_33:1.1
	Tungsten-0_32:1.1
	Tungsten-0_31:1.1
	Tungsten-0_30:1.1
	Tungsten-0_29:1.1
	Tungsten-0_28:1.1
	Tungsten-Official514:1.1
	Tungsten-0_27:1.1
	Tungsten-0_26:1.1
	Tungsten-0_25:1.1
	Tungsten-0_24:1.1
	Tungsten-0_23:1.1
	Tungsten-0_22:1.1
	Tungsten-0_21:1.1
	Tungsten-0_20:1.1
	RO_5_07:1.1
	Tungsten-0_19:1.1
	Tungsten-0_18:1.1
	Tungsten-0_17:1.1
	Tungsten-0_16:1.1
	Tungsten-0_15:1.1
	Tungsten-0_14:1.1
	Tungsten-0_13:1.1
	Tungsten-0_12:1.1
	Tungsten-0_11:1.1
	Tungsten-0_10:1.1
	Tungsten-0_09:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.01.20.19.00.25;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Bugfixes:
* XINT0 could not be masked using HAL_IRQDisable() (a hangover from a
  RevA hardware workaround)
* SlotTablePrototype wasn't correct

Version 0.09. Tagged as 'Tungsten-0_09'
@
text
@void HAL_KbdScanSetup(void)
---------------------------
Called when the Kernel is ready for the HAL to start scanning the keyboard
for boot-time keys. The scan must happen under interrupts - the HAL
should arrange for its keyboard controller to be set up to generate
interrupts, and for the appropriate interrupt to be unmasked in the
IRQ controller.

void HAL_KbdScanInterrupt(void)
-------------------------------
Attached to the processor IRQ hardware vector - called whenever an IRQ
occurs between the calls to HAL_KbdScanSetup and HAL_KbdScanFinish.
Uses standard HAL calling conventions; will be in IRQ mode with IRQs
disabled.

unsigned int HAL_KbdScan(void)
------------------------------
Called when the Kernel wants to check the results of the keyboard scan
so far.

The return value indicates which keys have been detected:

    bit 0: Ctrl down (indicating hard reset)
    bit 1: Shift down (indicating reversal of *Configure Boot)
    bits 2-3: reserved, should be 0
    bit 4: R down (CMOS reset, auto sync)
    bit 5: T down (CMOS reset, separate sync)
    bit 6: Delete down (full CMOS reset, auto sync)
    bit 7: Copy/End down (full CMOS reset, separate sync)
    bits 8-30: reserved, should be 0
    bit 30: Keyboard presence detected
    bit 31: Keyboard scan complete

Bits must never be reported clear when they have been reported set
by a previous call.

The "complete" bit indicates that the HAL is confident that sufficient
time has elapsed for the keyboard (if present) to have reported all
keypresses.

The Kernel will typically make this call repeatedly until the
"complete" bit is set, although the HAL should not rely on this - the
Kernel may have its own timeout.


void HAL_KbdScanFinish(void)
----------------------------
Called when the Kernel wishes to terminate the keyboard scan.

The HAL should disable interrupt generation from the keyboard controller;
it may leave the interrupt enabled in the IRQ controller.

The calls to Setup and Finish currently bracket the RAM clear, providing a
reasonable length of time to perform a keyboard scan. The HAL may request
extra time by using the "complete" bit in the KbdScan call.
@
