head	1.2;
access;
symbols
	Tungsten-0_63:1.2
	Tungsten-0_62:1.2
	Tungsten-0_61:1.2
	Tungsten-0_60:1.2
	SMP:1.2.0.2
	SMP_bp:1.2
	Tungsten-0_59:1.2
	Tungsten-0_58:1.2
	Tungsten-0_57:1.2
	Tungsten-0_56:1.2
	Tungsten-0_55:1.2
	Tungsten-0_54:1.2
	Tungsten-0_53:1.2
	Tungsten-0_52:1.2
	Tungsten-0_51:1.2
	Tungsten-0_50:1.2
	Tungsten-0_49:1.2
	Tungsten-0_48:1.2
	Tungsten-0_47:1.2
	Tungsten-0_46:1.2
	Tungsten-0_45:1.2
	Tungsten-0_44:1.2
	Tungsten-0_43:1.2
	Tungsten-0_42:1.2
	Tungsten-0_41:1.2
	Tungsten-0_40:1.2
	Tungsten-0_39:1.2
	Tungsten-0_38:1.2
	Tungsten-0_37:1.2
	Tungsten-0_36:1.2
	Tungsten-0_35:1.2
	Tungsten-0_34:1.2
	Tungsten-0_33:1.2
	Tungsten-0_32:1.2
	Tungsten-0_31:1.2
	Tungsten-0_30:1.2
	Tungsten-0_29:1.2
	Tungsten-0_28:1.2
	Tungsten-Official514:1.2
	Tungsten-0_27:1.2
	Tungsten-0_26:1.2
	Tungsten-0_25:1.2
	Tungsten-0_24:1.2
	Tungsten-0_23:1.2
	Tungsten-0_22:1.2
	Tungsten-0_21:1.2
	Tungsten-0_20:1.2
	RO_5_07:1.2
	Tungsten-0_19:1.2
	Tungsten-0_18:1.2
	Tungsten-0_17:1.2
	Tungsten-0_16:1.2
	Tungsten-0_15:1.2
	Tungsten-0_14:1.2
	Tungsten-0_13:1.1
	Tungsten-0_12:1.1
	Tungsten-0_11:1.1
	Tungsten-0_10:1.1
	Tungsten-0_09:1.1
	Tungsten-0_08:1.1
	Tungsten-0_07:1.1
	Tungsten-0_06:1.1
	Tungsten-0_05:1.1
	Tungsten-0_04:1.1
	Tungsten-0_03:1.1
	Tungsten-0_02:1.1
	Tungsten-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2003.04.15.20.03.35;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.07.12.34.05;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@First venture into the world of message signalled interrupts (s.MSI).
High speed RAM clear added using AAU in the XScale.
Tighten up check on RAM modules to reject some 4 bit wide devices.
Fix for CMOS protect link being ignored.
Add table returned by ReadPhysicalMemory.
New poke to move sound DMA into the top half of physical memory.
PCI rewrite.

Version 0.14. Tagged as 'Tungsten-0_14'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
SPD_Address             *       &AC

                        ^       0
RAMSPD_ManBytes         #       1
RAMSPD_TotalBytes       #       1       ; 2^n (1<=n<=14)
RAMSPD_MemoryType       #       1
RAMSPD_Rows             #       1       ; two nibbles (1 for each bank), top nibble = 0
RAMSPD_Cols             #       1       ; if no second bank or symmetrical
RAMSPD_Banks            #       1
RAMSPD_WidthL           #       1       ; (0,32,33,36,64,72,80,128,144,254,255)
RAMSPD_WidthH           #       1       ; (0,256,512,1024,2048)
RAMSPD_Voltage          #       1
RAMSPD_Tcyc             #       1       ; top nibble = ns, bottom = .1ns (at max CAS)
RAMSPD_Tac              #       1       ; top nibble = .1ns, bottom = .01ns
RAMSPD_Error            #       1
RAMSPD_Refresh          #       1       ; See below
RAMSPD_PrimaryWidth     #       1       ; Bit 7 => 2nd bank's devices 2x width of 1st's
RAMSPD_ErrorWidth       #       1       ; ditto
RAMSPD_BackToBackCol    #       1       ; minimum clock delay
RAMSPD_BurstLength      #       1       ; bit field of supported (see below)
RAMSPD_DeviceLeaves     #       1       ; (or banks)
RAMSPD_CASLatency       #       1       ; bit field of supported
RAMSPD_CSLatency        #       1       ; bit field of supported
RAMSPD_WELatency        #       1       ; bit field of supported
RAMSPD_ModuleAttr       #       1
RAMSPD_DeviceAttr       #       1
RAMSPD_Tcyc_CLX_5       #       1       ; as Tcyc, but at max CAS latency - 0.5ns
RAMSPD_Tac_CLX_5        #       1       ; as Tac, but at max CAS latency - 0.5ns
RAMSPD_Tcyc_CLX_1       #       1       ; as Tcyc, but at max CAS latency - 1ns
RAMSPD_Tac_CLX_1        #       1       ; as Tac, but at max CAS latency - 1ns
RAMSPD_Trp              #       1       ; in 0.25ns units
RAMSPD_Trrd             #       1       ; in 0.25ns units
RAMSPD_Trcd             #       1       ; in 0.25ns units
RAMSPD_Tras             #       1       ; in ns
RAMSPD_Density          #       1       ; bits for each bank ORed together
RAMSPD_Tacsetup         #       1       ; top nibble = .1ns, bottom = .01ns
RAMSPD_Tachold          #       1       ; top nibble = .1ns, bottom = .01ns
RAMSPD_Tinputsetup      #       1       ; top nibble = .1ns, bottom = .01ns
RAMSPD_Tinputhold       #       1       ; top nibble = .1ns, bottom = .01ns
                        ^       62
RAMSPD_Revision         #       1       ; JEDEC standard revision (currently 0)
RAMSPD_Checksum         #       1       ; (sum of bytes 0-62 modulo 256)
RAMSPD_ManufID          #       8
RAMSPD_ManufLoc         #       1
RAMSPD_ModPartNumb      #       18
RAMSPD_ModRevision      #       2
RAMSPD_ModDate          #       2
RAMSPD_ModSerial        #       4
RAMSPD_ManufUse         #       29
RAMSPD_CustomerUse      #       128




RAMSPD_MemType_FPM      *       1
RAMSPD_MemType_EDO      *       2
RAMSPD_MemType_SDRAM    *       4
RAMSPD_MemType_SGRAM    *       6
RAMSPD_MemType_DDR      *       7

RAMSPD_Volt_TTL5VTol    *       0
RAMSPD_Volt_LVTTL       *       1
RAMSPD_Volt_HSTL15V     *       2
RAMSPD_Volt_SSTL33V     *       3
RAMSPD_Volt_SSTL25V     *       4

RAMSPD_Error_None       *       0
RAMSPD_Error_Parity     *       1
RAMSPD_Error_ECC        *       2

RAMSPD_Refresh_15us     *       0
RAMSPD_Refresh_4us      *       1
RAMSPD_Refresh_8us      *       2
RAMSPD_Refresh_31us     *       3
RAMSPD_Refresh_63us     *       4
RAMSPD_Refresh_125us    *       5
RAMSPD_Refresh_SelfRef  *       128

RAMSPD_Burst_1          *       1
RAMSPD_Burst_2          *       2
RAMSPD_Burst_4          *       4
RAMSPD_Burst_8          *       8
RAMSPD_Burst_Page       *       128

RAMSPD_CAS_1            *       1
RAMSPD_CAS_15           *       2
RAMSPD_CAS_2            *       4
RAMSPD_CAS_25           *       8
RAMSPD_CAS_3            *       16
RAMSPD_CAS_35           *       32

RAMSPD_CS_0             *       1
RAMSPD_CS_1             *       2
RAMSPD_CS_2             *       4
RAMSPD_CS_3             *       8
RAMSPD_CS_4             *       16
RAMSPD_CS_5             *       32
RAMSPD_CS_6             *       64

RAMSPD_WE_0             *       1
RAMSPD_WE_1             *       2
RAMSPD_WE_2             *       4
RAMSPD_WE_3             *       8

RAMSPD_ModAttr_BuffAC   *       1
RAMSPD_ModAttr_RegAC    *       2
RAMSPD_ModAttr_PLLOnCard *      4
RAMSPD_ModAttr_FETOnCard *      8
RAMSPD_ModAttr_FETExt   *       16
RAMSPD_ModAttr_DiffClock *      32

RAMSPD_DevAttr_WeakDrive *      1
RAMSPD_DevAttr_QFCOutput *      2

RAMSPD_Density_16MB     *       4
RAMSPD_Density_32MB     *       8
RAMSPD_Density_64MB     *       16
RAMSPD_Density_128MB    *       32
RAMSPD_Density_256MB    *       64
RAMSPD_Density_512MB    *       128
RAMSPD_Density_1GB      *       1
RAMSPD_Density_2GB      *       2

        END
@


1.1
log
@Initial check-in.

Version 0.01. Tagged as 'Tungsten-0_01'
@
text
@d17 5
a21 5
			^	0
RAMSPD_ManBytes		#	1
RAMSPD_TotalBytes	#	1	; 2^n (1<=n<=14)
RAMSPD_MemoryType	#	1
RAMSPD_Rows		#	1	; two nibbles (1 for each bank), top nibble = 0
d24 41
a64 41
RAMSPD_WidthL		#	1	; (0,32,33,36,64,72,80,128,144,254,255)
RAMSPD_WidthH		#	1	; (0,256,512,1024,2048)
RAMSPD_Voltage		#	1
RAMSPD_Tcyc             #	1	; top nibble = ns, bottom = .1ns (at max CAS)
RAMSPD_Tac		#	1	; top nibble = .1ns, bottom = .01ns
RAMSPD_Error		#	1
RAMSPD_Refresh		#	1       ; See below
RAMSPD_PrimaryWidth	#	1	; Bit 7 => 2nd bank 2x width of first
RAMSPD_ErrorWidth	#	1	; ditto
RAMSPD_BackToBackCol    #	1	; minimum clock delay
RAMSPD_BurstLength	#	1	; bit field of supported (see below)
RAMSPD_DeviceLeaves	#	1	; (or banks)
RAMSPD_CASLatency	#	1	; bit field of supported
RAMSPD_CSLatency	#	1	; bit field of supported
RAMSPD_WELatency	#	1	; bit field of supported
RAMSPD_ModuleAttr	#	1
RAMSPD_DeviceAttr	#	1
RAMSPD_Tcyc_CLX_5	#	1	; as Tcyc, but at max CAS latency - 0.5ns
RAMSPD_Tac_CLX_5	#	1	; as Tac, but at max CAS latency - 0.5ns
RAMSPD_Tcyc_CLX_1	#	1	; as Tcyc, but at max CAS latency - 1ns
RAMSPD_Tac_CLX_1	#	1	; as Tac, but at max CAS latency - 1ns
RAMSPD_Trp		#	1	; in 0.25ns units
RAMSPD_Trrd		#	1	; in 0.25ns units
RAMSPD_Trcd		#	1	; in 0.25ns units
RAMSPD_Tras		#	1	; in ns
RAMSPD_Density		#	1	; bits for each bank ORed together
RAMSPD_Tacsetup		#	1	; top nibble = .1ns, bottom = .01ns
RAMSPD_Tachold		#	1	; top nibble = .1ns, bottom = .01ns
RAMSPD_Tinputsetup	#	1	; top nibble = .1ns, bottom = .01ns
RAMSPD_Tinputhold	#	1	; top nibble = .1ns, bottom = .01ns
			^	62
RAMSPD_Revision		#	1	; JEDEC standard revision (currently 0)
RAMSPD_Checksum		#	1	; (sum of bytes 0-62 modulo 256)
RAMSPD_ManufID		#	8
RAMSPD_ManufLoc		#	1
RAMSPD_ModPartNumb	#	18
RAMSPD_ModRevision	#	2
RAMSPD_ModDate		#	2
RAMSPD_ModSerial	#	4
RAMSPD_ManufUse		#	29
RAMSPD_CustomerUse	#	128
d69 3
a71 3
RAMSPD_MemType_FPM	*	1
RAMSPD_MemType_EDO	*	2
RAMSPD_MemType_SDRAM    *	4
d75 16
a90 16
RAMSPD_Volt_TTL5VTol    *	0
RAMSPD_Volt_LVTTL	*	1
RAMSPD_Volt_HSTL15V     *	2
RAMSPD_Volt_SSTL33V	*	3
RAMSPD_Volt_SSTL25V	*	4

RAMSPD_Error_None	*	0
RAMSPD_Error_Parity	*	1
RAMSPD_Error_ECC	*	2

RAMSPD_Refresh_15us	*	0
RAMSPD_Refresh_4us	*	1
RAMSPD_Refresh_8us	*	2
RAMSPD_Refresh_31us	*	3
RAMSPD_Refresh_63us	*	4
RAMSPD_Refresh_125us    *	5
d93 44
a136 44
RAMSPD_Burst_1		*	1
RAMSPD_Burst_2		*	2
RAMSPD_Burst_4		*	4
RAMSPD_Burst_8		*	8
RAMSPD_Burst_Page	*	128

RAMSPD_CAS_1		*	1
RAMSPD_CAS_15		*	2
RAMSPD_CAS_2		*	4
RAMSPD_CAS_25		*	8
RAMSPD_CAS_3		*	16
RAMSPD_CAS_35		*	32

RAMSPD_CS_0		*	1
RAMSPD_CS_1		*	2
RAMSPD_CS_2		*	4
RAMSPD_CS_3		*	8
RAMSPD_CS_4		*	16
RAMSPD_CS_5		*	32
RAMSPD_CS_6		*	64

RAMSPD_WE_0		*	1
RAMSPD_WE_1		*	2
RAMSPD_WE_2		*	4
RAMSPD_WE_3		*	8

RAMSPD_ModAttr_BuffAC	*	1
RAMSPD_ModAttr_RegAC	*	2
RAMSPD_ModAttr_PLLOnCard *	4
RAMSPD_ModAttr_FETOnCard *	8
RAMSPD_ModAttr_FETExt	*	16
RAMSPD_ModAttr_DiffClock *	32

RAMSPD_DevAttr_WeakDrive *	1
RAMSPD_DevAttr_QFCOutput *	2

RAMSPD_Density_16MB	*	4
RAMSPD_Density_32MB	*	8
RAMSPD_Density_64MB	*	16
RAMSPD_Density_128MB    *	32
RAMSPD_Density_256MB    *	64
RAMSPD_Density_512MB    *	128
RAMSPD_Density_1GB	*	1
RAMSPD_Density_2GB	*	2
@

