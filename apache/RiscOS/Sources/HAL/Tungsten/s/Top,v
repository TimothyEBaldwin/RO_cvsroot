head	1.7;
access;
symbols
	Tungsten-0_63:1.7
	Tungsten-0_62:1.7
	Tungsten-0_61:1.7
	Tungsten-0_60:1.7
	SMP:1.7.0.2
	SMP_bp:1.7
	Tungsten-0_59:1.7
	Tungsten-0_58:1.7
	Tungsten-0_57:1.7
	Tungsten-0_56:1.7
	Tungsten-0_55:1.7
	Tungsten-0_54:1.7
	Tungsten-0_53:1.7
	Tungsten-0_52:1.7
	Tungsten-0_51:1.7
	Tungsten-0_50:1.7
	Tungsten-0_49:1.7
	Tungsten-0_48:1.7
	Tungsten-0_47:1.7
	Tungsten-0_46:1.7
	Tungsten-0_45:1.7
	Tungsten-0_44:1.7
	Tungsten-0_43:1.7
	Tungsten-0_42:1.7
	Tungsten-0_41:1.7
	Tungsten-0_40:1.7
	Tungsten-0_39:1.6
	Tungsten-0_38:1.6
	Tungsten-0_37:1.6
	Tungsten-0_36:1.5
	Tungsten-0_35:1.5
	Tungsten-0_34:1.5
	Tungsten-0_33:1.5
	Tungsten-0_32:1.5
	Tungsten-0_31:1.4
	Tungsten-0_30:1.4
	Tungsten-0_29:1.4
	Tungsten-0_28:1.3
	Tungsten-Official514:1.2
	Tungsten-0_27:1.2
	Tungsten-0_26:1.2
	Tungsten-0_25:1.2
	Tungsten-0_24:1.2
	Tungsten-0_23:1.2
	Tungsten-0_22:1.2
	Tungsten-0_21:1.2
	Tungsten-0_20:1.2
	RO_5_07:1.2
	Tungsten-0_19:1.2
	Tungsten-0_18:1.2
	Tungsten-0_17:1.2
	Tungsten-0_16:1.2
	Tungsten-0_15:1.2
	Tungsten-0_14:1.2
	Tungsten-0_13:1.1;
locks; strict;
comment	@# @;


1.7
date	2012.03.07.21.49.12;	author jlee;	state Exp;
branches;
next	1.6;
commitid	RsSkxpv2obxv20Wv;

1.6
date	2012.02.25.16.43.17;	author jlee;	state Exp;
branches;
next	1.5;
commitid	jZ2NTOmQjvfsHyUv;

1.5
date	2011.12.06.00.18.19;	author jlee;	state Exp;
branches;
next	1.4;
commitid	q4Iqqfm8nb60R3Kv;

1.4
date	2011.08.08.21.13.51;	author jlee;	state Exp;
branches;
next	1.3;
commitid	xMdaqswlSv6QEKuv;

1.3
date	2009.06.11.21.05.12;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.15.20.03.35;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.23.18.19.43;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fix bug when linked against old kernels
Detail:
  s/Top - If a kernel which doesn't support compression was in use, a typo would lead to the ROM image size being calculated incorrectly, most likely causing the ROM relocation code to fail.
Admin:
  Tested in Iyonix ROM softload
  Bug spotted by Willi Theiss


Version 0.40. Tagged as 'Tungsten-0_40'
@
text
@; Copyright 2003 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:HALSize.<HALSize>
        GET     Hdr:PCI

        GET     Hdr:MEMM.ARM600

        GET     Hdr:Proc
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS
        GET     hdr.80321
        GET     hdr.RAM
        GET     hdr.UART
        GET     hdr.Post

        AREA    |!!!ROMStart|, CODE, READONLY, PIC

        ; Note: there must be only one fixed link from "Top" to "Boot" at +&2000
        IMPORT  rom_checkedout_ok
        EXPORT  HAL_Base
        ; With Debug on,the flash recovery is off anyway so it's safe to export this
        EXPORT  ConfigureDebugUART

        ; This is more of a warning than a requirement; if you make a habit of
        ; changing the HAL size then anyone who uses the recovery code to
        ; recover their machine may end up inadvertently programming a ROM with
        ; a differing HAL size, causing the machine to enter the recovery phase
        ; again when rebooted
        ASSERT  OSROM_HALSize = 65536

HAL_Base

        B       start
        B       .
        B       .
        B       .
        B       .
        B       .
        B       .
        B       .
        DCD     1024*1024       ; image size (temp hack)

        ASSERT  . - HAL_Base < 0x60
        %       0x60 - (. - HAL_Base)
        DCD     0 ; Uncompressed ROM size patched in here by build system. But we don't want to rely on it in the HAL since we might be compressed.

        ENTRY
start
        B       restart

        LTORG

        MACRO
        CallOSM $entry, $reg
        LDR     ip, [v8, #$entry*4]
        MOV     lr, pc
        ADD     pc, v8, ip
        MEND

; ------------------------------------------------------------------------------
; Start of ROM,do some ARM core set up then see if
; there's any RAM plugged in
restart
        MSR     CPSR_c, #F32_bit+I32_bit+SVC32_mode
        MOV     a1, #&70
        MCR     p15, 0, a1, c1, c0              ; MMU, caches etc off
        MOV     a1, #0
        MCR     p15, 0, a1, c7, c7              ; invalidate caches
        MCR     p15, 0, a1, c8, c7              ; invalidate TLBs

        ADRL    v1, HAL_Base + OSROM_HALSize    ; v1 -> RISC OS image

        LDR     v8, [v1, #OSHdr_Entries]
        ADD     v8, v8, v1                      ; v8 -> RISC OS entry table

 [ :LNOT: FlashCheck
        ; Can't do this,as the OS might be corrupt
        MOV     a1, #0
        CallOSM OS_InitARM
 |
        ; Take a local copy from the Kernel,knowing we're on an XScale
        GET     hdr.Copro15ops

        [ {FALSE}
        MOV     a4, lr
        ; Check if we're architecture 3. If so, don't read the control register.
        BL      Init_ARMarch
        |
        MOVS    a1, #4                          ; XScale is ARM V5T
        ]
        MOVEQ   a1, #0
        ARM_read_control a1, NE
        ; Late abort (ARM6 only), 32-bit Data and Program space. No Write buffer (ARM920T
        ; spec says W bit should be set, but I reckon they're bluffing).
        ;
        ; The F bit's tricky. (1 => CPCLK=FCLK, 0=>CPCLK=FCLK/2). The only chip using it was the
        ; ARM700, it never really reached the customer, and it's always been programmed with
        ; CPCLK=FCLK. Therefore we'll keep it that way, and ignore the layering violation.
        ORR     a1, a1, #MMUC_F+MMUC_L+MMUC_D+MMUC_P
        ; All of these bits should be off already, but just in case...
        BIC     a1, a1, #MMUC_B+MMUC_W+MMUC_C+MMUC_A+MMUC_M
        BIC     a1, a1, #MMUC_RR+MMUC_V+MMUC_I+MMUC_Z+MMUC_R+MMUC_S

        ; Off we go.
        ARM_write_control a1

        ; In case it wasn't a hard reset
        MOV     a2, #0
        MCR     ARM_config_cp,0,a2,ARMv4_cache_reg,C7           ; invalidate I+D caches
        MCREQ   ARM_config_cp,0,a2,ARMv3_TLBflush_reg,C0        ; flush TLBs
        MCRNE   ARM_config_cp,0,a2,ARMv4_TLB_reg,C7             ; flush TLBs

        ; We assume that ARMs with an I cache can have it enabled while the MMU is off.
        [ :LNOT:CacheOff
        ORRNE   a1, a1, #MMUC_I
        ARM_write_control a1, NE                                ; whoosh
        ]

        ; Check if we are in a 26-bit mode.
        MRS     a2, CPSR
        ; Keep a soft copy of the CR in a banked register (R13_und)
        MSR     CPSR_c, #F32_bit+I32_bit+UND32_mode
        MOV     sp, a1
        ; Switch into SVC32 mode (we may have been in SVC26 before).
        MSR     CPSR_c, #F32_bit+I32_bit+SVC32_mode

        [ {FALSE}
        ; If we were in a 26-bit mode, the lr value given to us would have had PSR flags in.
        TST     a2, #2_11100
        MOVNE   pc, a4
        BICEQ   pc, a4, #ARM_CC_Mask
        ]
 ]

        MRC     p15, 0, a1, c15, c1             ; Ensure access to CP0,6,7 enabled
        ORR     a1, a1, #2_11000001
        MCR     p15, 0, a1, c15, c1

        MOV     a1, #0
        MCR     p15, 0, a1, c7, c10, 4          ; drain buffers (just in case)

        MOV     sb, #0

        ; Detect if we've been softloaded, and if so, jump to a different initialisation sequence
        ASSERT  ROM_Base < RAM_Base
        CMP     pc, #RAM_Base
        BHI     softloaded

        BL      initialise_rom

        BL      initialise_iic

        BL      initialise_ram

        BL      clear_ram

        LDR     sp, =Boot_RAM_Base + &1000      ; Wahey! A stack!

; ------------------------------------------------------------------------------
; Hand copy down the ROM into it's new RAM location
; total up the checksum on the way
copy_rom_to_ram
        STMFD   sp!, {v1-v3}
        ; Now that we support compressed images, we need to read the size of
        ; the uncompressed image from the OS header so that we can make sure
        ; there's enough memory available for in-place ROM expansion
        ;
        ; To keep things safe/simple, the size of the compressed image is
        ; required to be 4MB
        ADRL    v1, HAL_Base + OSROM_HALSize
        LDR     v2, [v1, #OSHdr_ImageSize]
        SUB     v1, v1, #OSROM_HALSize          ; start of ROM
        ADD     v2, v2, #OSROM_HALSize          ; size of uncompressed ROM
        MOV     v3, #sizeofROM                  ; size of compressed ROM
 [ FlashCheck
        ; Sanity check the uncompressed ROM size
        ; If any checks fail, the only part of the ROM we'll copy will be the
        ; recovery code, and then we'll enter recovery mode
        CMP     v2, #sizeofROM
        MOVLT   v8, #0                          ; illegal size - should always be >= our physical ROM size
        CMP     v2, #32*1024*1024
        MOVGT   v8, #0                          ; suspiciously large, and beyond the limits of the current ROM format
        TST     v2, #3
        MOVNE   v8, #0                          ; size not aligned!

        CMP     v8, #0                          ; If the checks failed...
        MOVEQ   v2, #sizeofRecoveryArea         ; ...only reserve 8K of RAM
        MOVEQ   v3, #sizeofRecoveryArea         ; ...and only copy 8K from ROM
 ]
        ; Now we can copy the ROM to RAM. 
        BL      get_end_of_ram
        SUB     a2, a1, v2                      ; a2 -> start of RAM copy

 [ {FALSE}
        ; We'll use the AAU (it can do it faster than we can with the MMU off)
        MOV     a3, sp
        SUB     sp, sp, #32
        BIC     sp, sp, #31                     ; align to 8-word boundary

        STR     a2, [sp, #AAUDesc_DAR]
        STR     v1, [sp, #AAUDesc_SAR1]
        STR     v3, [sp, #AAUDesc_BC]
        MOV     a1, #0
        STR     a1, [sp, #AAUDesc_NDA]

        MOV     a1, #ADCR_WriteEnable + ADCR_DirectCmd:SHL:ADCR_1
        STR     a1, [sp, #AAUDesc_DC]

        ; Write buffer is off, so no need to synchronise

        LDR     ip, =PMMR
        STR     sp, [ip, #AAU_ANDAR]
        MOV     a1, #0
        STR     a1, [ip, #AAU_ASR]
        MOV     a1, #ACR_Enable
        STR     a1, [ip, #AAU_ACR]

        ; Not using interrupts, and we don't have anything better to do
        ; while it's running. Put a delay in so we're not constantly
        ; accessing the bus. It will take something of the order of 0.25s.
wait_for_aau
        Delay   10
        LDR     a1, [ip, #AAU_ASR]
        TST     a1, #ASR_Active
        BNE     wait_for_aau

 |
        ADD     v2, a2, v3 ; End of destination region
        ADD     v3, v1, v3 ; End of source region

        LDMDB   v3, {a1,a3}
        RSB     v4, a1, #0
        SUB     v4, v4, a3      ; don't include the checksum itself

10      LDMDB   v3!, {a1,a3,a4,lr}
        CMP     v3, v1
        STMDB   v2!, {a1,a3,a4,lr}
        ADD     a3, a3, a1
        ADD     a4, a4, lr
        ADD     v4, v4, a3
        ADD     v4, v4, a4      ; accumulate checksum
        BHI     %BT10
 ]

        ; Now we trampoline into the RAM copy. Invalidate the instruction cache
        ; before (just in case) and after.

        MOV     a1, #0
        MCR     p15, 0, a1, c7, c5

        SUB     a4, a2, v1
        ADD     pc, pc, a4
        NOP

; re-entry point (now in RAM). invalidate the I-cache as we're about to move the ROM.
        MCR     p15, 0, a1, c7, c5

 [ FlashCheck
        CMP     v8, #0          ; v8 will be 0 if ImageSize looked funny
        MOVEQ   v4, #1          ; So force a checksum failure
 ]

        ADD     v8, v8, a4      ; Also update OS entry pointer

; now re-program ROM location back out of the way of the PCI direct-addressing window
; this means the processor vectors aren't there any longer, but we don't need them.
        LDR     a2, [ip, #PBI_PBBAR0]
        ADD     a2, a2, #ROM_Base
        STR     a2, [ip, #PBI_PBBAR0]

; now back up to ROM

 [ FlashCheck :LAND: (FlashCheckInDebug :LOR: :LNOT: Debug)
        ; Is the ROM valid?
        TEQ     v4, #0
        ; if not signal the failure on the floppy drive light and
        ; request a new ROM image down the serial port
        BNE     recover_flash
 ]
        ; relative branch as ROM moved
        B       rom_checkedout_ok

; ------------------------------------------------------------------------------
; Set bits 4-7 of GPIO data register to 0 as specified in the manual
; actually sets up both IIC busses
initialise_iic
        LDR     a4, =PMMR
        LDRB    a1, [a4, #GPOD]
        BIC     a1, a1, #2_11110000
        STRB    a1, [a4, #GPOD]
        MOV     a1, #ICR_Reset
        STR     a1, [a4, #IIC_ICR0]
        STR     a1, [a4, #IIC_ICR1]
        MOV     a1, #ISR_AllInts
        STR     a1, [a4, #IIC_ISR0]
        STR     a1, [a4, #IIC_ISR1]
        MOV     a1, #ICR_Enable
        STR     a1, [a4, #IIC_ICR0]
        STR     a1, [a4, #IIC_ICR1]
        MOV     pc, lr

; ------------------------------------------------------------------------------
; The ROM is a 16-bit flash device on the PBI bus. We set up the rest of the PBI
; bus here too.
initialise_rom
        LDR     a4, =PMMR
        ; Need to figure out a good speed setting for the flash here
        ; Dev manual section 8.6.3 says we can't do this while executing from flash.
        ; Let's risk it, as we're not changing the address, or moving the limit.
        ASSERT  PBICLK=66666667
        ; 90ns ROM - 8 address-data wait states, 4 recovery wait states, 16-bit
        MOV     a3, #&00000244
        ORR     a3, a3, #2_01
        STR     a3, [a4, #PBI_PBBAR0]
        MOV     a3, #&FF000000                  ; 16MB of memory space
        STR     a3, [a4, #PBI_PBLR0]

        MOV     a3, #IO_Base
        ORR     a3, a3, #2_10                   ; 32-bit, handshaking (not timed)
        STR     a3, [a4, #PBI_PBBAR1]
        LDR     a3, =-IO_Size
        STR     a3, [a4, #PBI_PBLR1]

        MOV     a3, #EASI_Base
        ORR     a3, a3, #2_10                   ; 32-bit, handshaking (not timed)
        STR     a3, [a4, #PBI_PBBAR2]
        LDR     a3, =-EASI_Size
        STR     a3, [a4, #PBI_PBLR2]

        MOV     pc, lr

softloaded      ROUT
        ; We've been softloaded; determine where we need to relocate to
        BL      get_end_of_ram
        ; Self-relocation code borrowed from OMAP3 HAL
        ADRL    v1, HAL_Base + OSROM_HALSize
        LDR     v2, [v1, #OSHdr_ImageSize]
        LDR     lr, [v1, #OSHdr_Flags]
        TST     lr, #OSHdrFlag_SupportsCompression
        LDRNE   lr, [v1, #OSHdr_CompressedSize]
        MOVEQ   lr, v2
        SUB     v1, v1, #OSROM_HALSize ; Start of HAL
        ADD     v2, v2, #OSROM_HALSize ; Size of HAL+OS
        ADD     lr, lr, #OSROM_HALSize ; Size of compressed HAL+OS
        ADD     v3, v1, lr ; End of OS
        MOV     v4, a1 ; End of RAM
        SUB     v5, v4, v2 ; New start address of HAL
        CMP     v1, v5
        BEQ     %FT10 ; No copy needed
        CMP     v1, v4
        BHI     %FT20 ; We're in some ROM above RAM. OK to continue with copy.
        CMP     v3, v5
        BLS     %FT20 ; We're in some ROM/RAM below our copy destination. OK to continue with copy.
        ; Else we currently overlap the area we want to copy ourselves into.
        SUB     v5, v1, lr ; Copy the HAL+OS to just before itself
20
        MOV     a1, v5
        MOV     a2, v1 ; Copy source
        MOV     a3, lr
30
        LDR     a4, [a2], #4
        SUBS    a3, a3, #4
        STR     a4, [a1], #4
        BGT     %BT30
        ; Invalidate I-cache
        MOV     a1, #0
        MCR     p15, 0, a1, c7, c5
        ; Jump to our new copy
        ADR     a1, softloaded ; Keep things simple by just running through the same code again
        SUB     a2, v5, v1
        ADD     a1, a1, a2 ; relocate our branch target
        ADD     v8, v8, a2 ; Update OS entry table ptr
        MOV     pc, a1
10
        ; Go ahead and clear the rest of RAM
        MOV     v6, v5
        ADRL    v7, rom_checkedout_ok
        LDR     sp, =Boot_RAM_Base + &1000 - 12 ; Set up a stack, with 3 fake words for rom_checkedout_ok to pop
        B       clear_ram_softload

; ------------------------------------------------------------------------------
; The RAM setup is locked in the first 8k of ROM
; as is the flash recovery code
        GET     RAM.s
        GET     FlashProg.s
        LTORG

        ALIGN   sizeofRecoveryArea

        END
@


1.6
log
@Add compressed ROM support. Make softload-aware.
Detail:
  hdr/Post, s/FlashProg - Add sizeofROM definition, for expected size of compressed ROM/physical ROM chip. Used to replace references to OSROM_ImageSize throughout the code.
  s/ATA, s/Boot, s/Debug, s/DebugPCI, s/IIC, s/Interrupts, s/MSI, s/NVMemory, s/Timers, s/Top, s/UART - Removed unnecessary GETs of Hdr:ImageSize.<ImageSize>
  s/Boot, s/Video - Add a new 'Tungsten video' HAL device, for storing the NVidia STRAP data that the softload & ROM flash tools need to poke into the ROMs on a per-machine basis. Previously the data was stored in the NVidia module, which would have caused complications with compressed ROM images.
  s/RAM, s/Top - Add compressed ROM & softload support. Softload code just skips some hardware initialisation and relocates the ROM to the high end of RAM.
Admin:
  Tested as Tungsten ROM softload only.
  For safety, compressed ROMs that have been burnt to ROM are required to be 4MB in size. This helps to simplify the ROM consistency checks and recovery code.
  Softloaded ROMs aren't subjected to the FlashCheck code and can be any size.


Version 0.37. Tagged as 'Tungsten-0_37'
@
text
@d360 1
a360 1
        MOVEQ   lr, r2
@


1.5
log
@Update to support alternate HAL sizes
Detail:
  s/Boot, s/Top - Now uses OSROM_HALSize for the HAL size instead of fixed 64K constant.
Admin:
  Tested in ROM softload with 64K & 32K HAL sizes.
  However, Aemulor doesn't seem to like a 32K HAL size.


Version 0.32. Tagged as 'Tungsten-0_32'
@
text
@a19 1
        GET     Hdr:ImageSize.<ImageSize>
d43 7
d64 1
a64 2
ROMsize
        DCD     0                               ; patched in by build system
d163 5
d183 6
a188 4
 [ FlashCheck
        ADRL    v1, HAL_Base
        LDR     v2, =OSROM_ImageSize * 1024
 |
d192 16
a207 1
        ADD     v2, v2, #OSROM_HALSize          ; size of ROM
d209 1
d221 1
a221 1
        STR     v2, [sp, #AAUDesc_BC]
d247 2
a248 2
        ADD     v3, v1, v2
        ADD     v2, a2, v2
d277 5
d351 49
d406 1
@


1.4
log
@Tweak debug code
Detail:
  hdr/80321 - Improved notes about debug options.
  s/Boot - Don't reinit UART 3 if it's already in use for debugging
  s/Top, hdr/80321 - Use new FlashCheckInDebug option to help work out whether flash check failure code is called
  s/UART - Disable HAL UART API if UART 3 is in use for debugging
Admin:
  Tested in ROM softload


Version 0.29. Tagged as 'Tungsten-0_29'
@
text
@d21 1
d85 1
a85 1
        ADRL    v1, HAL_Base + 64*1024          ; v1 -> RISC OS image
d177 1
a177 1
        ADRL    v1, HAL_Base + 64*1024
d179 2
a180 2
        SUB     v1, v1, #64*1024                ; start of ROM
        ADD     v2, v2, #64*1024                ; size of ROM
@


1.3
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.27. Not tagged
@
text
@d258 1
a258 1
 [ FlashCheck :LAND: :LNOT: Debug
@


1.2
log
@First venture into the world of message signalled interrupts (s.MSI).
High speed RAM clear added using AAU in the XScale.
Tighten up check on RAM modules to reject some 4 bit wide devices.
Fix for CMOS protect link being ignored.
Add table returned by ReadPhysicalMemory.
New poke to move sound DMA into the top half of physical memory.
PCI rewrite.

Version 0.14. Tagged as 'Tungsten-0_14'
@
text
@d320 2
a321 2
        GET     s.RAM
        GET     s.FlashProg
@


1.1
log
@Kevin's new PCI enumeration C.
Kevin's UART control for DualSerial to talk to.
Completion of flash recovery stuff - it now flashes the floppy drive
light appropriately then requests a new OS image down the serial port
but is careful never to erase itself.To allow this has required some
shuffling to ensure the first 8k of binary is fixed and makes no
external calls - "s.Top" arranges this and effectively moves the
HAL up 8k in ROM.

Version 0.13. Tagged as 'Tungsten-0_13'
@
text
@d42 1
a42 1
        
d66 7
d162 2
@

