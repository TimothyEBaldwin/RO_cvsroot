head	1.4;
access;
symbols
	Tungsten-0_63:1.4
	Tungsten-0_62:1.4
	Tungsten-0_61:1.4
	Tungsten-0_60:1.4
	SMP:1.4.0.2
	SMP_bp:1.4
	Tungsten-0_59:1.4
	Tungsten-0_58:1.4
	Tungsten-0_57:1.4
	Tungsten-0_56:1.4
	Tungsten-0_55:1.4
	Tungsten-0_54:1.4
	Tungsten-0_53:1.4
	Tungsten-0_52:1.4
	Tungsten-0_51:1.4
	Tungsten-0_50:1.4
	Tungsten-0_49:1.4
	Tungsten-0_48:1.4
	Tungsten-0_47:1.4
	Tungsten-0_46:1.4
	Tungsten-0_45:1.4
	Tungsten-0_44:1.4
	Tungsten-0_43:1.4
	Tungsten-0_42:1.4
	Tungsten-0_41:1.4
	Tungsten-0_40:1.4
	Tungsten-0_39:1.4
	Tungsten-0_38:1.4
	Tungsten-0_37:1.4
	Tungsten-0_36:1.3
	Tungsten-0_35:1.3
	Tungsten-0_34:1.3
	Tungsten-0_33:1.3
	Tungsten-0_32:1.3
	Tungsten-0_31:1.3
	Tungsten-0_30:1.3
	Tungsten-0_29:1.3
	Tungsten-0_28:1.3
	Tungsten-Official514:1.3
	Tungsten-0_27:1.3
	Tungsten-0_26:1.3
	Tungsten-0_25:1.3
	Tungsten-0_24:1.3
	Tungsten-0_23:1.3
	Tungsten-0_22:1.3
	Tungsten-0_21:1.3
	Tungsten-0_20:1.3
	RO_5_07:1.3
	Tungsten-0_19:1.3
	Tungsten-0_18:1.3
	Tungsten-0_17:1.3
	Tungsten-0_16:1.3
	Tungsten-0_15:1.3
	Tungsten-0_14:1.3
	Tungsten-0_13:1.3
	Tungsten-0_12:1.2
	Tungsten-0_11:1.2
	Tungsten-0_10:1.1
	Tungsten-0_09:1.1
	Tungsten-0_08:1.1
	Tungsten-0_07:1.1
	Tungsten-0_06:1.1
	Tungsten-0_05:1.1
	Tungsten-0_04:1.1
	Tungsten-0_03:1.1
	Tungsten-0_02:1.1
	Tungsten-0_01:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.02.25.16.43.16;	author jlee;	state Exp;
branches;
next	1.3;
commitid	jZ2NTOmQjvfsHyUv;

1.3
date	2003.02.23.18.19.43;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.16.18.55.45;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.07.12.34.09;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add compressed ROM support. Make softload-aware.
Detail:
  hdr/Post, s/FlashProg - Add sizeofROM definition, for expected size of compressed ROM/physical ROM chip. Used to replace references to OSROM_ImageSize throughout the code.
  s/ATA, s/Boot, s/Debug, s/DebugPCI, s/IIC, s/Interrupts, s/MSI, s/NVMemory, s/Timers, s/Top, s/UART - Removed unnecessary GETs of Hdr:ImageSize.<ImageSize>
  s/Boot, s/Video - Add a new 'Tungsten video' HAL device, for storing the NVidia STRAP data that the softload & ROM flash tools need to poke into the ROMs on a per-machine basis. Previously the data was stored in the NVidia module, which would have caused complications with compressed ROM images.
  s/RAM, s/Top - Add compressed ROM & softload support. Softload code just skips some hardware initialisation and relocates the ROM to the high end of RAM.
Admin:
  Tested as Tungsten ROM softload only.
  For safety, compressed ROMs that have been burnt to ROM are required to be 4MB in size. This helps to simplify the ROM consistency checks and recovery code.
  Softloaded ROMs aren't subjected to the FlashCheck code and can be any size.


Version 0.37. Tagged as 'Tungsten-0_37'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Flash recovery

; Note: Currently this only deals with 4MB ROM images.
; Other sizes would be trickier, since we can't be certain that the HAL size
; hasn't changed (and if someone did use this code to reprogram an image with a different HAL size, you'd just end up here again on the next reboot, because we don't erase the first 8K of ROM)

p555    RN      3
p2AA    RN      5
c55     RN      6
cAA     RN      7
DQ5     *       &20
DQ7     *       &80
ts_665LED_on    *       &10             ; assert SEL0 and MotorEN0
ts_665LED_off   *       &11
ts_665LEDaddr   *       &03f2           ; 82C711 FDC digital output port

recover_flash
      [ FlashCheck
        ; Get some static workspace above the stack
        LDR     sb, =Boot_RAM_Base + &1000

        ; Need these variables,but they're physical addresses now
        LDR     ip, =PMMR
        STR     ip, PMMR_Address
        LDR     a1, =PCI_IO_Base
        STR     a1, PCI_IO_Address

        BL      minimal_pci_setup

        ; HAL_PCIWriteConfigWord(0, PCI_DEVFN(8,0), PCI_PRIMARY_BUS, 0x00010100);
        LDR     a1, =&01000018          ; set bridge's primary bus to 0,
        STR     a1, [ip, #ATU_OCCAR]    ; and secondary and subordinate to 1
        LDR     a2, =&00010100          ; to allow config cycles to pass
        STR     a2, [ip, #ATU_OCCDR]

        ; HAL_PCIWriteConfigHalfword(0, PCI_DEVFN(8,0), PCI_IO_BASE, 0x7F00);
        LDR     a1, =&0100001C          ; set I/O cycle address region (also does IO_LIMIT)
        STR     a1, [ip, #ATU_OCCAR]    ; so we can get at the serial port and floppy
        LDR     a2, =&7F00
        ADD     a1, ip, #ATU_OCCDR:AND::NOT:&FF
        STRH    a2, [a1, #ATU_OCCDR:AND:&FF]

        ; HAL_PCIWriteConfigWord(0, PCI_DEVFN(8,0), PCI_IO_BASE_UPPER, 0x0);
        LDR     a1, =&01000030          ; in case it's not zero already (also does IO_LIMIT_UPPER)
        STR     a1, [ip, #ATU_OCCAR]
        LDR     a2, =&0
        STR     a2, [ip, #ATU_OCCDR]

        ; HAL_PCIWriteConfigHalfword(0, PCI_DEVFN(8,0), PCI_COMMAND, 0x00000005);
        LDR     a1, =&01000004          ; set bridge to let through I/O cycles up and downstream
        STR     a1, [ip, #ATU_OCCAR]
        LDR     a2, =&00000005
        ADD     a1, ip, #ATU_OCCDR:AND::NOT:&FF
        STRH    a2, [a1, #ATU_OCCDR:AND:&FF]

        LDR     a1, PCI_IO_Address
        BL      Configure37C665

        LDR     v1, PCI_IO_Address
      [ DebugPort = 3
        ADD     v1, v1, #IO_UART3
      |
        ADD     v1, v1, #IO_UART1
      ]
        BL      ConfigureDebugUART

05
        ADR     a3, recover_corruptmssg
        BL      recover_print_string
        LDR     a1, =R_ROMFAILBIT + R_MEMSKIP + R_ARM3   ; the rom sum failed,we didn't do a memory test,
        BL      recover_morse                            ;    and the ARM id was read
        BEQ     %BT05                                    ; keep shouting until the user guesses the serial settings!

        ; Get 4M of data
        ADRL    a3, recover_sendmssg
        BL      recover_print_string
10
        LDRB    a2, [ip, #UART_LSR]
        TST     a2, #DR
        BEQ     %BT10                                    ; wait for serial port action
        ADRL    a3, recover_rcvbusy
        BL      recover_print_string
        LDR     a3, =Boot_RAM_Base + &100000
        MOV     a4, #sizeofROM
        MOV     v4, #0                                   ; for the checksum
15
        BL      recover_rxbyte
        CMP     a1, #-1
        BEQ     %BT15
        STRB    a1, [a3], #1
        BL      recover_hourglass
        ANDS    a1, a3, #3
        LDREQ   a1, [a3, #-4]
        ADDEQ   v4, v4, a1                               ; checksum
        SUBS    a4, a4, #1
        BNE     %BT15

        SUB     v4, v4, a1                               ; correct for overshoot
        LDR     a1, [a3, #-8]
        SUBS    v4, v4, a1
        BEQ     %FT20
        ADRL    a3, recover_duffrom                      ; failed checksum,try again
        BL      recover_print_string
        B       %BT10
20
        ; Next,rechecksum the image given the first 8k never gets erased
        ADRL    a3, HAL_Base
        ADD     a2, a3, #sizeofRecoveryArea
        MOV     a4, #-1
        MOV     v4, #0
25
        LDR     a1, [a3], #4
        TEQ     a3, a2
        LDREQ   a3, =Boot_RAM_Base + &100000             ; hop to the ram portion now
        ADDEQ   a4, a3, #sizeofROM
        ADDEQ   a3, a3, #sizeofRecoveryArea
        SUB     v4, v4, a1
        TEQ     a3, a4
        BNE     %BT25

        ADD     v4, v4, a1                               ; correct for overshoot
        LDR     a1, [a3, #-8]
        ADD     v4, v4, a1
        LDR     a1, [a3, #-12]                           ; don't include the checksum itself!
        ADD     v4, v4, a1
        STR     v4, [a3, #-12]
30
        ; This flash programming stuff should look familiar!
        LDR     R0, =Boot_RAM_Base + &100000
        ADD     R1, R0, #sizeofROM
        MOV     R4, #ROM_Base
        ADD     p555, R4, #&055*2
        ADD     p555, p555, #&500*2     ; R3 -> &555
        ADD     p2AA, R4, #&0AA*2
        ADD     p2AA, p2AA, #&200*2     ; R5 -> &2AA
        MOV     c55, #&55               ; R6 = &55
        MOV     cAA, #&AA               ; R7 = &AA
        ; Erase
        Push    "a1-a3,ip"
        ADRL    a3, recover_erasebusy
        BL      recover_print_string
        Pull    "a1-a3,ip"

        Push    "R4"
        ADD     R4, R4, #sizeofROM
        SUB     R4, R4, #sizeofSectors
02
        STRH    cAA, [p555]
        STRH    c55, [p2AA]
        MOV     R8, #&80
        STRH    R8, [p555]
        STRH    cAA, [p555]
        STRH    c55, [p2AA]
        MOV     R8, #&30
        STRH    R8, [R4]
        ; Poll for completion
        MOV     R8, #&FF
        ORR     R8, R8, #&FF00
        BL      recover_poll
        BVS     recover_fatalerror
        MOV     a3, R4, LSR#3           ; keep the egg timer active
        BL      recover_hourglass
        MOV     a3, #ROM_Base
        ADD     a3, a3, #sizeofBootArea
        CMP     R4, a3
        SUBHI   R4, R4, #sizeofSectors  ; the flash better be bottom boot!
        SUBLS   R4, R4, #sizeofBootSectors
        TEQ     R4, #ROM_Base           ; Don't erase 1st 8k
        BNE     %BT02
        Pull    "R4"
        ADD     R4, R4, #sizeofRecoveryArea   ; Don't program 1st 8k either
        ADD     R0, R0, #sizeofRecoveryArea

        ; Program
        Push    "a1-a3,ip"
        ADRL    a3, recover_progbusy
        BL      recover_print_string
        Pull    "a1-a3,ip"

        SUB     R4, R4, #2
05
        STRH    cAA, [p555]
        STRH    c55, [p2AA]
        MOV     R8, #&A0
        STRH    R8, [p555]
        LDRH    R8, [R0], #2
        STRH    R8, [R4, #2]!
        BL      recover_poll
        BVS     recover_fatalerror
        MOV     a3, R4                  ; my head hurts
        BL      recover_hourglass
        TEQ     R0, R1
        BNE     %BT05

        ; Job done!
        ADRL    a3, recover_success
        BL      recover_print_string
        LDR     ip, PMMR_Address
        LDR     a1, [ip, #ATU_PCSR]
        ORR     a1, a1, #1:SHL:5
        STR     a1, [ip, #ATU_PCSR]
        B       .

recover_poll    ROUT
        AND     R10, R8, #DQ7
10      LDRH    R12,[R4]
        AND     R11, R12, #DQ7
        CMP     R11, R10        ; Clear V
        BEQ     %FT15
        TST     R12, #DQ5
        BEQ     %BT10
15      LDRH    R12, [R4]
        TEQ     R12, R8
        MOVEQ   PC,R14
        ; Read/Reset
        MOV     R10, #&F0
        STRH    R10, [R4]
        MSR     CPSR_f, #V_bit
        MOV     PC, R14

recover_fatalerror
        ADRL    a3, recover_fatal
        BL      recover_print_string
        B       .

recover_corruptmssg
        =       13,10,"Warning: the operating system image is damaged!",13,10
        =       "To begin recovery, ensure your settings are 115200 baud 8N1 with",13,10
        =       "hardware handshaking then press a key on the serial console...",13,10,7,0
recover_sendmssg
        =       13,10,"Waiting to accept a replacement image in binary mode now.",13,10,0
recover_sands
        =       45,92,124,47
recover_rcvbusy
        =       13,10,"Receiving  ",0
recover_erasebusy
        =       13,10,"Erasing  ",0
recover_progbusy
        =       13,10,"Programming  ",0
recover_fatal
        =       13,10,"Flash recovery failed, return unit for service",7,0
recover_duffrom
        =       13,10,"Receive error detected, please resend now.",13,10,7,0
recover_success
        =       13,10,"Flash recovery successful, rebooting...",0
        ALIGN

recover_hourglass ROUT
        ; In: a3 is some number such that the hourglass advances every 16k
        ;     and uses bits 14 & 15 to decide where the hourglass is
        Push    "a1,a2,lr"
        BIC     a1, a3, #&FF
        BICS    a1, a1, #&3F00
        TEQ     a1, a3
        Pull    "a1,a2,pc", NE
        MOV     a1, #8
        BL      recover_txbyte_nohandshake
        ADR     a1, recover_sands
        MOV     a2, a3, LSR#14
        AND     a2, a2, #3
        LDRB    a1, [a1, a2]
        BL      recover_txbyte_nohandshake
        Pull    "a1,a2,pc"

recover_print_string ROUT
        ; Print a zero terminated string
        ; In: a3 -> string
        Push    "lr"
10
        LDRB    a1, [a3], #1
        TEQ     a1, #0
        Pull    "pc", EQ
        BLNE    recover_txbyte_nohandshake
        B       %BT10

recover_txbyte_nohandshake ROUT
        ; Send a byte serially,ignoring CTS (might be no cable plugged in)
        LDR     ip, DebugUART_Address
05      LDRB    a2, [ip, #UART_LSR]
        TST     a2, #THRE
        BEQ     %BT05
        STRB    a1, [ip, #UART_THR]
        MOV     pc, lr

recover_rxbyte ROUT
        ; Get a byte serially
        LDR     ip, DebugUART_Address
        LDRB    a2, [ip, #UART_LSR]
        TST     a2, #DR
        MOVEQ   a1, #-1
        LDRNEB  a1, [ip, #UART_RBR]
        MOV     pc, lr

recover_morse ROUT
        ; Flash the floppy drive light with the bit pattern in a1
        ; To mimick a Risc PC the MSB is sent first
        ; Data is sent in nybbles with 1s between nybbles
        ; For a '0' send OFF - ON
        ; For a '1' send OFF - ON - ON - ON

        ; Exit: EQ = no key pressed
        ;       NE = a key pressed
        Push    "lr"
        LDR     ip, PCI_IO_Address
        LDR     a4, =ts_665LEDaddr
        ADD     ip, a4, ip
        MOV     a2, #ts_665LED_off     ; force off at start
        STRB    a2, [ip]
        Delay   2000000, a3
        MOV     a4, #0
05
        Delay   250000, a3
        MOV     a2, #ts_665LED_on      ; now on
        STRB    a2, [ip]
        Delay   250000, a3
        ADDS    a1, a1, a1
        BCC     %FT10
        Delay   500000, a3             ; was '1',so keep on
10
        MOV     a2, #ts_665LED_off
        STRB    a2, [ip]

        Push    "ip,a1"
        BL      recover_rxbyte         ; scan the keyboard
        CMP     a1, #-1
        Pull    "ip,a1,pc", NE
        Pull    "ip,a1", EQ

        ADD     a4, a4, #1
        TST     a4, #3                 ; check for nybble boundary
        BNE     %FT15
        Delay   1000000, a3
15
        TEQ     a4, #32
        BNE     %BT05
        Pull    "pc"

      ] ; FlashCheck

;
; Set the ATU up to get the PCI bus going
;

minimal_pci_setup
        LDR     ip, PMMR_Address
        MOV     a1, #8
        STRB    a1, [ip, #ATU_ATUCLSR]          ; Cache line size = 8 words
        MOV     a1, #&20
        STRB    a1, [ip, #ATU_ATULT]            ; Latency timer = 32 clocks
        MOV     a1, #0
        STR     a1, [ip, #ATU_IABAR0]
        STR     a1, [ip, #ATU_IALR0]            ; Close window 0 (for now)
        MOV     a1, #&C0000000
        STR     a1, [ip, #ATU_IALR2]            ; RAM window is 1GB
 [ ShadowRAMWindow
        STR     a1, [ip, #ATU_IALR3]
 ]
        MOV     a1, #RAM_Base
        ORR     a1, a1, #2_1100                 ; Prefetchable, 64-bit
        STR     a1, [ip, #ATU_IABAR2]           ; RAM window (&C0000000)
 [ ShadowRAMWindow
        MOV     a1, #&40000000
        ORR     a1, a1, #2_1000                 ; Prefetchable, 32-bit
        STR     a1, [ip, #ATU_IABAR3]
 ]
        MOV     a1, #RAM_Base
        STR     a1, [ip, #ATU_IATVR2]
 [ ShadowRAMWindow
        STR     a1, [ip, #ATU_IATVR3]
 ]
        LDR     a1, [ip, #ATU_ATUCMD]
        ORR     a1, a1, #2_110                  ; Bus Master and memory response
        STR     a1, [ip, #ATU_ATUCMD]
        LDR     a1, [ip, #ATU_ATUCR]
        ORR     a1, a1, #1:SHL:1                ; Outbound ATU enable
        ORR     a1, a1, #1:SHL:8                ; Direct addressing enable
        STR     a1, [ip, #ATU_ATUCR]
        MOV     pc, lr

;
; Simplified version of Configure82C710 programs ALI 1535 only.
;

Configure37C665 Entry
        SETPSR  I_bit + F_bit, ip,, r2  ; Disable FIQ and IRQ

        MOV     lr, #&51
        STRB    lr, [r0, #IO_ConfigIndex]    ; Write magic &51 &23 to CRI711
        MOV     lr, #&23
        STRB    lr, [r0, #IO_ConfigIndex]    ;   to enter configuration mode

        ADR     r1, ConfigSMCTable      ; R1-> SMC 665 configuration data
20
        LDRB    lr, [r1], #1            ; get config index
        STRB    lr, [r0, #IO_ConfigIndex]
        TEQ     lr, #&BB                ; end of table?
        LDRNEB  lr, [r1], #1            ; if not then get config data
        STRNEB  lr, [r0, #IO_ConfigData]    ; and write it
        BNE     %BT20

        MOV     r1, #IOST_37C665
30
        STRB    r1, IOSystemType

        RestPSR r2                      ; Restore IRQ/FIQ state

        EXIT

ConfigSMCTable
        DCB     &07, 0                  ; Access device 0 (FDC)
        DCB     &30, 1                  ; Enable device (IO 03F0, IRQ6, DMA2)
        DCB     &07, 4                  ; Access device 4 (UART 1)
        DCB     &70, 9                  ; Select IRQ9
        DCB     &30, 1                  ; Enable device (at &03F8)
        DCB     &F0, 2                  ; Enable UART 1 high speed mode
        DCB     &07, &B                 ; Access device B (UART 3)
        DCB     &70, 10                 ; Select IRQ10
        DCB     &30, 1                  ; Enable device (at &02F8)
        DCB     &F0, 2                  ; Enable UART 3 high speed mode
        DCB     &BB                     ; Exit config mode
        ALIGN

;
; Do some UART set up
;

ConfigureDebugUART  Entry
;       In:  v1 = address of UART
;       Out: a1 corrupt
        STR     v1, DebugUART_Address
        MOV     a1, #0
        STRB    a1, [v1, #UART_IER]
        MOV     a1, #DLAB
        STRB    a1, [v1, #UART_LCR]
        MOV     a1, #1                          ; 115200 baud
        STRB    a1, [v1, #UART_DLL]
        MOV     a1, #0
        STRB    a1, [v1, #UART_DLM]
        MOV     a1, #FIFOEN+FIFORSTRX+FIFORSTTX+FIFO64
        STRB    a1, [v1, #UART_FCR]
        MOV     a1, #WLS_8
        STRB    a1, [v1, #UART_LCR]
        MOV     a1, #DTR+RTS
        STRB    a1, [v1, #UART_MCR]

        EXIT

        END
@


1.3
log
@Kevin's new PCI enumeration C.
Kevin's UART control for DualSerial to talk to.
Completion of flash recovery stuff - it now flashes the floppy drive
light appropriately then requests a new OS image down the serial port
but is careful never to erase itself.To allow this has required some
shuffling to ensure the first 8k of binary is fixed and makes no
external calls - "s.Top" arranges this and effectively moves the
HAL up 8k in ROM.

Version 0.13. Tagged as 'Tungsten-0_13'
@
text
@d15 5
a19 1
; Flash recovery 
d98 1
a98 1
        MOV     a4, #OSROM_ImageSize * 1024
d129 1
a129 1
        ADDEQ   a4, a3, #OSROM_ImageSize * 1024
d144 1
a144 1
        ADD     R1, R0, #OSROM_ImageSize * 1024
d159 1
a159 1
        ADD     R4, R4, #OSROM_ImageSize * 1024
@


1.2
log
@Random check in as it's been rather a long time and I don't trust
people's harddiscs.
Changes for DMA support (s.ATA)
Bug fix to HAL Counter info,it only worked if R0=0 on entry - spotted
by Dan Ellis
Power on <key held down> support in C.USBHAL and H.USBHAL
Reads the CMOS lock jumper
The beginnings of flash recovery code
Some code tidy ups and documentation updates

Version 0.11. Tagged as 'Tungsten-0_11'
@
text
@d15 3
a17 20
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:PCI
        GET     Hdr:OSEntries
        GET     Hdr:Proc

        GET     hdr.80321
        GET     hdr.StaticWS
        GET     hdr.UART
        
        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  recover_flash
        EXPORT  minimal_pci_setup
        EXPORT  Configure37C665
        EXPORT  ConfigureDebugUART
        IMPORT  printf
        
p555    RN      4
d23 3
a25 2
CRI711Off       *       &03F0           ; 82C711 Configuration Register Index port
CAP711Off       *       CRI711Off +1    ; 82C711 Configuration Access Port (data)
a28 1
        Push    "v1,r11,lr"
d32 1
a32 1
        ; Need these addresses,but they're physical now
d46 7
d54 1
a54 1
        LDR     a1, =&01000030          ; just in case it's not zero already
d59 6
a64 6
        ; HAL_PCIWriteConfigHalfword(0, PCI_DEVFN(8,0), PCI_IO_BASE, 0x7F00);
        LDR     a1, =&0100001C          ; set bridge to let through I/O cycles
        STR     a1, [ip, #ATU_OCCAR]    ; so we can get at the serial port
        LDR     a2, =&7F00              ; and floppy
        ADD     ip, ip, #ATU_OCCDR:AND::NOT:&FF
        STRH    a2, [ip, #ATU_OCCDR:AND:&FF]
d70 5
a74 1
        ADD     v1, v1, #&2F8
d77 68
a144 20
        ADR     a1, FlashString
        BL      printf

        Pull    "v1,r11,lr"

        ; It's the end of the road
        BKPT    &BADF

FlashString
        =       "Flash corrupt!",13,10,0
        ALIGN

        MOV     R0, #&C0000000
        ADD     R0, R0, #128*1024*1024
        SUB     R0, R0, #4*1024*1024    ; &C7C00000
        ADD     R1, R0, #4*1024*1024    ; Image size
        MOV     R3, #&00000000
        ADD     p555, R3, #&055*2
        ADD     p555, p555, #&500*2     ; R4 -> &555
        ADD     p2AA, R3, #&0AA*2
d149 9
d164 2
a165 2
        MOV     R8, #&10
        STRH    R8, [p555]
d169 15
a183 2
        BL      Poll
        BVS     EraseError
d185 7
a191 2
        SUB     R3, R3, #2
ProgramLoop
d197 5
a201 3
        STRH    R8, [R3, #2]!
        BL      Poll
        BVS     ProgramError
d203 1
a203 13
        BNE     ProgramLoop

Success
        BKPT    &600D
        B       Stop
ProgramError
        BKPT    &BADF
        B       Stop
EraseError
        BKPT    &BADE
        B       Stop

Stop    B       Stop
d205 8
d214 1
a214 1
Poll    ROUT
d216 2
a217 2
10      LDRH    R9, [R3]
        AND     R11, R9, #DQ7
d219 2
a220 2
        BEQ     Done
        TST     R9, #DQ5
d222 2
a223 2
Done    LDRH    R9, [R3]
        TEQ     R9, R8
d227 1
a227 1
        STRH    R10, [R3]
d231 117
d350 1
a350 1
; 
d398 1
a398 1
        STRB    lr, [r0, #CRI711Off]    ; Write magic &51 &23 to CRI711
d400 1
a400 1
        STRB    lr, [r0, #CRI711Off]    ;   to enter configuration mode
d405 1
a405 1
        STRB    lr, [r0, #CRI711Off]
d408 1
a408 1
        STRNEB  lr, [r0, #CAP711Off]    ; and write it
d457 1
@


1.1
log
@Initial check-in.

Version 0.01. Tagged as 'Tungsten-0_01'
@
text
@d15 6
a20 1
        AREA    FlashProg, CODE, READONLY
d22 12
d40 54
a93 1
V_bit   *       1:SHL:28
d121 1
a121 1
	SUB	R3, R3, #2
d148 1
a148 1
	AND	R10, R8, #DQ7
d150 2
a151 2
	AND	R11, R9, #DQ7
	CMP	R11, R10	; Clear V
d164 109
@

