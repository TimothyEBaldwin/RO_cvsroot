head	1.7;
access;
symbols
	Tungsten-0_63:1.7
	Tungsten-0_62:1.7
	Tungsten-0_61:1.7
	Tungsten-0_60:1.7
	SMP:1.7.0.2
	SMP_bp:1.7
	Tungsten-0_59:1.7
	Tungsten-0_58:1.7
	Tungsten-0_57:1.7
	Tungsten-0_56:1.7
	Tungsten-0_55:1.7
	Tungsten-0_54:1.7
	Tungsten-0_53:1.7
	Tungsten-0_52:1.7
	Tungsten-0_51:1.7
	Tungsten-0_50:1.7
	Tungsten-0_49:1.6
	Tungsten-0_48:1.5
	Tungsten-0_47:1.5
	Tungsten-0_46:1.5
	Tungsten-0_45:1.5
	Tungsten-0_44:1.5
	Tungsten-0_43:1.5
	Tungsten-0_42:1.5
	Tungsten-0_41:1.4
	Tungsten-0_40:1.4
	Tungsten-0_39:1.4
	Tungsten-0_38:1.4
	Tungsten-0_37:1.4
	Tungsten-0_36:1.3
	Tungsten-0_35:1.3
	Tungsten-0_34:1.3
	Tungsten-0_33:1.3
	Tungsten-0_32:1.3
	Tungsten-0_31:1.3
	Tungsten-0_30:1.3
	Tungsten-0_29:1.3
	Tungsten-0_28:1.3
	Tungsten-Official514:1.3
	Tungsten-0_27:1.3
	Tungsten-0_26:1.3
	Tungsten-0_25:1.3
	Tungsten-0_24:1.3
	Tungsten-0_23:1.3
	Tungsten-0_22:1.3
	Tungsten-0_21:1.3
	Tungsten-0_20:1.3
	RO_5_07:1.3
	Tungsten-0_19:1.3
	Tungsten-0_18:1.2
	Tungsten-0_17:1.2
	Tungsten-0_16:1.2
	Tungsten-0_15:1.2
	Tungsten-0_14:1.2
	Tungsten-0_13:1.2
	Tungsten-0_12:1.1
	Tungsten-0_11:1.1
	Tungsten-0_10:1.1
	Tungsten-0_09:1.1
	Tungsten-0_08:1.1
	Tungsten-0_07:1.1
	Tungsten-0_06:1.1
	Tungsten-0_05:1.1
	Tungsten-0_04:1.1
	Tungsten-0_03:1.1
	Tungsten-0_02:1.1
	Tungsten-0_01:1.1;
locks; strict;
comment	@# @;


1.7
date	2014.04.14.19.26.32;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	ikND5SRJmhl1zGwx;

1.6
date	2014.04.06.19.08.50;	author jlee;	state Exp;
branches;
next	1.5;
commitid	ExLYS4GjAtKSIEvx;

1.5
date	2012.07.04.18.00.47;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	SL20BFLvbcrZWgbw;

1.4
date	2012.02.25.16.43.16;	author jlee;	state Exp;
branches;
next	1.3;
commitid	jZ2NTOmQjvfsHyUv;

1.3
date	2004.09.08.11.25.25;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.23.18.19.43;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.07.12.34.10;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Changed to use simpler HAL_IICDevice
Also now range checks the bus argument.

Version 0.50. Tagged as 'Tungsten-0_50'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; IIC buses

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>

        GET     Hdr:MEMM.ARM600

        GET     Hdr:HALEntries
        GET     Hdr:OSEntries

        GET     hdr.80321
        GET     hdr.StaticWS
        GET     hdr.RAM

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  HAL_IICBuses
        EXPORT  HAL_IICType
        EXPORT  HAL_IICDevice
        EXPORT  HAL_IICTransfer
        EXPORT  HAL_IICMonitorTransfer

HAL_IICBuses
        MOV     a1, #2
        MOV     pc, lr

HAL_IICType
        MOV     a1, #IICFlag_HighLevel+IICFlag_Background
        MOV     pc, lr

HAL_IICDevice
        CMP     a1, #2                  ; Safety first
        MOVCS   a1, #-1
        ASSERT  Device_IIC1 = Device_IIC0 + 1
        ADDCC   a1, a1, #Device_IIC0
        MOV     pc, lr

; We don't support slaving yet.

HAL_IICTransfer
        STMFD   sp!, {v1-v5,lr}
        TEQ     a1, #0
        ADREQ   v5, IICTransferBlk0     ; address appropriate block
        ADRNE   v5, IICTransferBlk1
        MRS     ip, CPSR
        ORR     a4, ip, #I32_bit
        MSR     CPSR_c, a4              ; disable interrupts for atomic claim
        LDR     a4, [v5, #IIC_XStart]
        TEQ     a4, #0                  ; in use already?
        STREQ   a3, [v5, #IIC_XStart]   ; if not, claim it
        MSR     CPSR_c, ip
        MOVNE   a1, #IICStatus_Busy     ; if it is, return "BUSY"
        LDMNEFD sp!, {v1-v5,pc}

        STR     a3, [v5, #IIC_XCurrent]
        SUB     a2, a2, #1              ; a2 = transfers - 1 (needed below)
        ADD     ip, a3, a2, LSL #3
        ADD     ip, ip, a2, LSL #2
        STR     ip, [v5, #IIC_XEnd]
        MOV     lr, #0
        STR     lr, [v5, #IIC_XBytes]

        LDR     v4, PMMR_Address
        TEQ     a1, #0
        ADDNE   v4, v4, #IIC_ICR1 - IIC_ICR0

        LDRB    a1, [a3, #0]
        STRB    a1, [v4, #IIC_IDBR0]

        LDR     a1, [v4, #IIC_ISR0]     ; clear any interrupts
        STR     a1, [v4, #IIC_ISR0]

        LDR     a1, [v4, #IIC_ICR0]
        ORR     a1, a1, #ICR_TransmitIE+ICR_ReceiveIE+ICR_BusErrorIE
        BIC     a1, a1, #ICR_ArbLossIE
        ORR     a1, a1, #ICR_SCLEnable+ICR_Transfer+ICR_Start
        BIC     a1, a1, #ICR_Abort+ICR_Nack+ICR_Stop
        ; Figure out whether we need to signal STOP
        LDR     a4, [a3, #8]            ; a4 = length of first transfer
        TEQ     a4, #0                  ; if at end of this transfer
        TEQEQ   a2, #0                  ; and no more transfers
 [ {TRUE}
        BEQ     unexpected_error
 |
        ORREQ   a1, a1, #ICR_Stop
 ]
        STR     a1, [v4, #IIC_ICR0]

        MOV     a1, #IICStatus_InProgress
        LDMFD   sp!, {v1-v5,pc}

HAL_IICMonitorTransfer
        STMFD   sp!, {v1-v5,lr}
        TEQ     a1, #0
        ADREQ   v5, IICTransferBlk0     ; address appropriate block
        ADRNE   v5, IICTransferBlk1
        LDR     v4, PMMR_Address
        ADDNE   v4, v4, #IIC_ICR1 - IIC_ICR0
        LDR     a1, [v5, #IIC_XStart]   ; a1 = start pointer
        LDR     a2, [v4, #IIC_ISR0]     ; a2 = ISR
        TEQ     a1, #0                  ; if no transfer in progress - odd
        ASSERT  IICStatus_Completed=0   ; just shut off all interrupts
        STREQ   a2, [v4, #IIC_ISR0]
        LDMEQFD sp!, {v1-v5,pc}
        LDR     v1, [v5, #IIC_XCurrent] ; v1 -> current transfer block
        LDR     a3, [v5, #IIC_XBytes]   ; a3 = bytes transmitted
        TST     a2, #ISR_SlaveAddr+ISR_SlaveStop
        BNE     unexpected_error
        TST     a2, #ISR_BusError
        BNE     bus_error
        TST     a2, #ISR_ArbLoss
        CMPNE   a3, #0                  ; only process if past address
        BNE     arb_loss
        TST     a2, #ISR_TransmitEmpty
        BNE     tx_empty
        TST     a2, #ISR_ReceiveFull
        BNE     rx_full
        ; No interrupts pending - hmm
        MOV     a1, #IICStatus_InProgress
        LDMFD   sp!, {v1-v5,pc}

tx_empty
        BIC     a2, a2, #ISR_AllInts:AND::NOT:ISR_TransmitEmpty
        STR     a2, [v4, #IIC_ISR0]
        LDR     a4, [v1, #8]
        TEQ     a3, a4
        BEQ     next_transaction
        TST     a2, #ISR_RnW            ; go into read mode (just written address)
        BNE     next_read
next_write
        LDR     ip, [v1, #4]
        LDRB    a1, [ip, a3]
        ADD     a3, a3, #1
        STRB    a1, [v4, #IIC_IDBR0]
        ; Figure out whether we need to signal STOP
        TEQ     a3, a4                  ; if at end of this transfer
        LDREQ   ip, [v5, #IIC_XEnd]     ; and it's the last one
        TEQEQ   ip, v1
10      LDR     a1, [v4, #IIC_ICR0]
        ORR     a1, a1, #ICR_ArbLossIE
        ORR     a1, a1, #ICR_Transfer
        BIC     a1, a1, #ICR_Start+ICR_Stop
        ORREQ   a1, a1, #ICR_Stop
        STR     a1, [v4, #IIC_ICR0]
        STR     a3, [v5, #IIC_XBytes]
        MOV     a1, #IICStatus_InProgress
        LDMFD   sp!, {v1-v5,pc}

rx_full
        BIC     a2, a2, #ISR_AllInts:AND::NOT:ISR_ReceiveFull
        STR     a2, [v4, #IIC_ISR0]
        LDR     a4, [v1, #8]
        LDR     ip, [v1, #4]
        LDR     v3, [v1, #0]
        LDRB    a1, [v4, #IIC_IDBR0]
        TST     v3, #1:SHL:30
        ADDNE   ip, ip, a1
        STREQB  a1, [ip, a3]
        STRNE   ip, [v1, #4]
        ADD     a3, a3, #1
        TEQ     a3, a4
        BEQ     next_transaction
next_read
        LDR     a1, [v4, #IIC_ICR0]
        ; Figure out whether to NAK
        SUB     a4, a4, #1
        TEQ     a3, a4                  ; if at end of this transfer
        BNE     %FT20
        LDR     ip, [v5, #IIC_XEnd]     ; NAK+STOP if last transfer
        TEQ     ip, v1
        ORREQ   a1, a1, #ICR_Stop+ICR_Nack
        BEQ     %FT20
        LDR     ip, [v1, #12]           ; NAK if next transfer has START
        TST     ip, #1:SHL:31
        ORRNE   a1, a1, #ICR_Nack
20      ORR     a1, a1, #ICR_Transfer
        BIC     a1, a1, #ICR_Start
        STR     a1, [v4, #IIC_ICR0]
        STR     a3, [v5, #IIC_XBytes]
        MOV     a1, #IICStatus_InProgress
        LDMFD   sp!, {v1-v5,pc}

next_transaction
        LDR     ip, [v5, #IIC_XEnd]
        TEQ     v1, ip
        BEQ     done
        LDR     a1, [v1, #12]!
        STR     v1, [v5, #IIC_XCurrent]
        MOV     a3, #0
        TST     a1, #1:SHL:30           ; checksum?.. zero needed
        TSTNE   a1, #1                  ; only for reads..
        STRNE   a3, [v1, #4]            ; yes .. do so
        TST     a1, #1:SHL:31           ; EQ if doing START
        BEQ     next_start
        TST     a2, #ISR_RnW
        LDR     a4, [v1, #8]
        BNE     next_read
        B       next_write

next_start
        STRB    a1, [v4, #IIC_IDBR0]
        LDR     a1, [v4, #IIC_ICR0]
        ORR     a1, a1, #ICR_Transfer+ICR_Start
        BIC     a1, a1, #ICR_Nack+ICR_Stop
        BIC     a1, a1, #ICR_ArbLossIE
        ; Figure out whether we need to signal STOP
        LDR     lr, [v1, #8]            ; lr = length of transfer
        TEQ     lr, #0                  ; if zero length
        LDREQ   ip, [v5, #IIC_XEnd]     ; and it's the last one
        TEQEQ   ip, v1
 [ {TRUE}
        BEQ     unexpected_error
 |
        ORREQ   a1, a1, #ICR_Stop
 ]
        STR     a1, [v4, #IIC_ICR0]
        MOV     a3, #0
        STR     a3, [v5, #IIC_XBytes]
        MOV     a1, #IICStatus_InProgress
        LDMFD   sp!, {v1-v5,pc}

done
        MOV     a1, #IICStatus_Completed
        B       clear_and_return

bus_error
        MOV     a1, #IICStatus_NoACK
clear_and_return
        STR     a2, [v4, #IIC_ISR0]
        MOV     ip, #0
        STR     ip, [v5, #IIC_XStart]
        LDMFD   sp!, {v1-v5,pc}

unexpected_error
        MOV     a1, #IICStatus_Error
        B       clear_and_return

arb_loss
        STR     a2, [v4, #IIC_ISR0]
        LDR     a1, [v5, #IIC_XStart]
        STR     a1, [v5, #IIC_XCurrent]
        B       next_start


        END

@


1.6
log
@Fix to chained IIC transfers
Detail:
  s/IIC - Make sure next_transaction initialises R4 (transfer length) before calling next_read/next_write. Without this the usual method of performing multi-byte writes (transaction 1: write 1 byte containing address, transaction 2: write N bytes of data) will fail and be left in a zombie state due to a stop bit being sent after the first byte of the 2nd transaction. A similar situation is possible if you want to perform a multi-byte read, split into multiple buffers.
Admin:
  Tested in Iyonix ROM softload
  OS_NVMemory 4 no longer hangs with transfer lengths > 1


Version 0.49. Tagged as 'Tungsten-0_49'
@
text
@d48 4
a51 4
        ADD     a2, a2, #Device_IIC0
        MOV     a3, #0
        MOV     a4, #0
        STMIA   a1, {a2-a4}
@


1.5
log
@Mark some unused video entrypoints as NullEntry
Rename HAL_Video_ to HAL_Video.
Make use of IICStatus defines.
Compiles, but not tested.

Version 0.42. Tagged as 'Tungsten-0_42'
@
text
@d212 1
d214 1
a214 1
        BEQ     next_write
@


1.4
log
@Add compressed ROM support. Make softload-aware.
Detail:
  hdr/Post, s/FlashProg - Add sizeofROM definition, for expected size of compressed ROM/physical ROM chip. Used to replace references to OSROM_ImageSize throughout the code.
  s/ATA, s/Boot, s/Debug, s/DebugPCI, s/IIC, s/Interrupts, s/MSI, s/NVMemory, s/Timers, s/Top, s/UART - Removed unnecessary GETs of Hdr:ImageSize.<ImageSize>
  s/Boot, s/Video - Add a new 'Tungsten video' HAL device, for storing the NVidia STRAP data that the softload & ROM flash tools need to poke into the ROMs on a per-machine basis. Previously the data was stored in the NVidia module, which would have caused complications with compressed ROM images.
  s/RAM, s/Top - Add compressed ROM & softload support. Softload code just skips some hardware initialisation and relocates the ROM to the high end of RAM.
Admin:
  Tested as Tungsten ROM softload only.
  For safety, compressed ROMs that have been burnt to ROM are required to be 4MB in size. This helps to simplify the ROM consistency checks and recovery code.
  Softloaded ROMs aren't subjected to the FlashCheck code and can be any size.


Version 0.37. Tagged as 'Tungsten-0_37'
@
text
@a38 6
ECOMPLETED *    0
EINPROGRESS *   1
ENOACK  *       2
EBUSY   *       3
EERROR  *       5

d68 1
a68 1
        MOVNE   a1, #EBUSY              ; if it is, return "BUSY"
d105 1
a105 1
        MOV     a1, #EINPROGRESS
d118 1
a118 1
        ASSERT  ECOMPLETED=0            ; just shut off all interrupts
d135 1
a135 1
        MOV     a1, #EINPROGRESS
d162 1
a162 1
        MOV     a1, #EINPROGRESS
d196 1
a196 1
        MOV     a1, #EINPROGRESS
d234 1
a234 1
        MOV     a1, #EINPROGRESS
d238 1
a238 1
        MOV     a1, #ECOMPLETED
d242 1
a242 1
        MOV     a1, #ENOACK
d250 1
a250 1
        MOV     a1, #EERROR
@


1.3
log
@   HAL High level IIC checksumming did not initialise checksum to
   zero at start of read block
Detail:
   s.IIC changed to initialise checksum to zero close to 'next_transaction'
   label
Admin:
   verified at castle
   castle added IP


Version 0.19. Tagged as 'Tungsten-0_19'
@
text
@a20 1
        GET     Hdr:ImageSize.<ImageSize>
@


1.2
log
@Kevin's new PCI enumeration C.
Kevin's UART control for DualSerial to talk to.
Completion of flash recovery stuff - it now flashes the floppy drive
light appropriately then requests a new OS image down the serial port
but is careful never to erase itself.To allow this has required some
shuffling to ensure the first 8k of binary is fixed and makes no
external calls - "s.Top" arranges this and effectively moves the
HAL up 8k in ROM.

Version 0.13. Tagged as 'Tungsten-0_13'
@
text
@d212 4
a217 1
        MOV     a3, #0
@


1.1
log
@Initial check-in.

Version 0.01. Tagged as 'Tungsten-0_01'
@
text
@a33 2
        EXPORT  initialise_iic
        EXPORT  ReadSPD
a38 83

initialise_iic
        ; Set bits 4-7 of GPIO data register to 0 as specified in the manual
        LDR     a4, =PMMR
        LDRB    a1, [a4, #GPOD]
        BIC     a1, a1, #2_11110000
        STRB    a1, [a4, #GPOD]
        MOV     a1, #ICR_Reset
        STR     a1, [a4, #IIC_ICR0]
        STR     a1, [a4, #IIC_ICR1]
        MOV     a1, #ISR_AllInts
        STR     a1, [a4, #IIC_ISR0]
        STR     a1, [a4, #IIC_ISR1]
        MOV     a1, #ICR_Enable
        STR     a1, [a4, #IIC_ICR0]
        STR     a1, [a4, #IIC_ICR1]
        MOV     pc, lr

; Bus 1 access for the RAM Serial Presence Detect devices

        EXPORT  ReadSPD
ReadSPD
        ; Enable the IIC clock
        MOV     ip, #ICR_Enable+ICR_SCLEnable
        STR     ip, [a4, #IIC_ICR1]
        MVN     ip, #ISR_AllInts
        STR     ip, [a4, #IIC_ISR1]

        ; Transmit SPD IIC address
        MOV     a2, #SPD_Address
        STR     a2, [a4, #IIC_IDBR1]
        LDR     a2, [a4, #IIC_ICR1]
        ORR     a2, a2, #ICR_Transfer+ICR_Start
        STR     a2, [a4, #IIC_ICR1]
10      LDR     a3, [a4, #IIC_ISR1]
        TST     a3, #ISR_TransmitEmpty
        BEQ     %BT10
        STR     a3, [a4, #IIC_ISR1]

        ; Transmit SPD location
        STR     a1, [a4, #IIC_IDBR1]
        LDR     a2, [a4, #IIC_ICR1]
        ORR     a2, a2, #ICR_Transfer
        BIC     a2, a2, #ICR_Start
        STR     a2, [a4, #IIC_ICR1]
20      LDR     a3, [a4, #IIC_ISR1]
        TST     a3, #ISR_TransmitEmpty
        BEQ     %BT20
        STR     a3, [a4, #IIC_ISR1]

        ; Repeated start
        MOV     a2, #SPD_Address+1
        STR     a2, [a4, #IIC_IDBR1]
        LDR     a2, [a4, #IIC_ICR1]
        ORR     a2, a2, #ICR_Transfer+ICR_Start
        STR     a2, [a4, #IIC_ICR1]
30      LDR     a3, [a4, #IIC_ISR1]
        TST     a3, #ISR_TransmitEmpty
        BEQ     %BT30
        STR     a3, [a4, #IIC_ISR1]

        ; Read data byte
        LDR     a2, [a4, #IIC_ICR1]
        BIC     a2, a2, #ICR_Start
        ORR     a2, a2, #ICR_Transfer+ICR_Nack+ICR_Stop
        STR     a2, [a4, #IIC_ICR1]
40      LDR     a3, [a4, #IIC_ISR1]
        TST     a3, #ISR_ReceiveFull
        BEQ     %BT40
        STR     a3, [a4, #IIC_ISR1]

        LDRB    a1, [a4, #IIC_IDBR1]

        ; Wait until unit not busy (ie finished transmitting STOP)
50      LDR     a3, [a4, #IIC_ISR1]
        TST     a3, #ISR_UnitBusy
        BNE     %BT50

        ; Disable the clock (but leave IIC enabled)
        MOV     a2, #ICR_Enable
        STR     a2, [a4, #IIC_ICR1]

        MOV     pc, lr
@

