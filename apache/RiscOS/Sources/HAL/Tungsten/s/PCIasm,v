head	1.9;
access;
symbols
	Tungsten-0_63:1.9
	Tungsten-0_62:1.9
	Tungsten-0_61:1.9
	Tungsten-0_60:1.9
	SMP:1.8.0.2
	SMP_bp:1.8
	Tungsten-0_59:1.8
	Tungsten-0_58:1.8
	Tungsten-0_57:1.8
	Tungsten-0_56:1.8
	Tungsten-0_55:1.8
	Tungsten-0_54:1.8
	Tungsten-0_53:1.8
	Tungsten-0_52:1.7
	Tungsten-0_51:1.7
	Tungsten-0_50:1.7
	Tungsten-0_49:1.7
	Tungsten-0_48:1.7
	Tungsten-0_47:1.7
	Tungsten-0_46:1.7
	Tungsten-0_45:1.7
	Tungsten-0_44:1.7
	Tungsten-0_43:1.7
	Tungsten-0_42:1.7
	Tungsten-0_41:1.7
	Tungsten-0_40:1.7
	Tungsten-0_39:1.7
	Tungsten-0_38:1.7
	Tungsten-0_37:1.7
	Tungsten-0_36:1.7
	Tungsten-0_35:1.7
	Tungsten-0_34:1.7
	Tungsten-0_33:1.7
	Tungsten-0_32:1.7
	Tungsten-0_31:1.7
	Tungsten-0_30:1.7
	Tungsten-0_29:1.7
	Tungsten-0_28:1.7
	Tungsten-Official514:1.7
	Tungsten-0_27:1.7
	Tungsten-0_26:1.7
	Tungsten-0_25:1.7
	Tungsten-0_24:1.7
	Tungsten-0_23:1.7
	Tungsten-0_22:1.7
	Tungsten-0_21:1.7
	Tungsten-0_20:1.7
	RO_5_07:1.7
	Tungsten-0_19:1.7
	Tungsten-0_18:1.7
	Tungsten-0_17:1.7
	Tungsten-0_16:1.7
	Tungsten-0_15:1.7
	Tungsten-0_14:1.7
	Tungsten-0_13:1.6
	Tungsten-0_12:1.5
	Tungsten-0_11:1.5
	Tungsten-0_10:1.4
	Tungsten-0_09:1.4
	Tungsten-0_08:1.3
	Tungsten-0_07:1.3
	Tungsten-0_06:1.3
	Tungsten-0_05:1.2
	Tungsten-0_04:1.1
	Tungsten-0_03:1.1
	Tungsten-0_02:1.1
	Tungsten-0_01:1.1;
locks; strict;
comment	@# @;


1.9
date	2017.09.09.10.57.04;	author rool;	state Exp;
branches;
next	1.8;
commitid	JbhyAilQebq1Lv6A;

1.8
date	2014.11.27.23.15.57;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	mMySUaQX4UphxSZx;

1.7
date	2003.04.15.20.03.35;	author kbracey;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.23.18.19.43;	author rsprowson;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.16.18.55.45;	author rsprowson;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.20.19.00.26;	author bavison;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.18.54.52;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.18.10.34.00;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.07.12.34.11;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Participate in keyboard scan dependencies
Detail:
  Replace keyboard scan code with list of modules that the kernel needs to do the same.
  Reorder the HALEntries to match Kernel-5_89.
  Back fill missing UARTDefault entry point.
  Delete unused workspace.
  Remove now unused USB driver and local copies of OHCI registers.
Admin:
  Submission for USB bounty.

Version 0.60. Tagged as 'Tungsten-0_60'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:PCI
        GET     Hdr:OSEntries
        GET     Hdr:Proc

        GET     hdr.80321
        GET     hdr.StaticWS

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  PCI_Init
        EXPORT  PCI_TungstenSecondaryBus
        EXPORT  HAL_PCIFeatures
        EXPORT  HAL_PCIReadConfigByte
        EXPORT  HAL_PCIReadConfigHalfword
        EXPORT  HAL_PCIReadConfigWord
        EXPORT  HAL_PCIWriteConfigByte
        EXPORT  HAL_PCIWriteConfigHalfword
        EXPORT  HAL_PCIWriteConfigWord
        EXPORT  HAL_PCIAddresses
        EXPORT  HAL_PCISlotTable
        EXPORT  generate_POR_flags
        EXPORT  pci_set_host_fastb2b

        IMPORT  pci_initialise
        IMPORT  get_end_of_ram

        MACRO
        pci_config_prelim $wordaligned
        ; In: a1 = bus, a2 = dev/fn, a3 = addr
        ; Out: a1 = address for OCCAR, ip -> PMMR, a2 -> PMMR + low 2 bits of addr
        TEQ     a1, #0                          ; make a type 0 access for bus 0
        MOVEQ   a1, #1:SHL:16                   ; - set bit 16+dev
        MOVEQ   ip, a2, LSR #3
        ORREQ   a1, a3, a1, LSL ip
        ORRNE   a1, a3, a1, LSL #16             ; type 1 for other buses - need bus no
        LDR     ip, PMMR_Address
        ORR     a1, a1, a2, LSL #8              ; merge in dev no + func
      [ "$wordaligned" = ""
        BIC     a1, a1, #2_11
        AND     a2, a3, #3
        ADD     a2, ip, a2
      ]
        ORRNE   a1, a1, #2_01                   ; set type
        MEND

; void PCI_Init(void)
PCI_Init
        Push    "v1,r11,lr"

        LDR     ip, PMMR_Address
        MOV     a1, #8
        STRB    a1, [ip, #ATU_ATUCLSR]          ; Cache line size = 8 words
        MOV     a1, #&20
        STRB    a1, [ip, #ATU_ATULT]            ; Latency timer = 32 clocks
        MOV     a1, #0
        STR     a1, [ip, #ATU_IABAR0]
        STR     a1, [ip, #ATU_IALR0]            ; Close window 0 (for now)
        MOV     a1, #&C0000000
        STR     a1, [ip, #ATU_IALR2]            ; RAM window is 1GB
 [ ShadowRAMWindow
        STR     a1, [ip, #ATU_IALR3]
 ]
        MOV     a1, #RAM_Base
        ORR     a1, a1, #2_1100                 ; Prefetchable, 64-bit
        STR     a1, [ip, #ATU_IABAR2]           ; RAM window (&C0000000)
 [ ShadowRAMWindow
        MOV     a1, #&40000000
        ORR     a1, a1, #2_1000                 ; Prefetchable, 32-bit
        STR     a1, [ip, #ATU_IABAR3]
 ]
        MOV     a1, #RAM_Base
        STR     a1, [ip, #ATU_IATVR2]
 [ ShadowRAMWindow
        STR     a1, [ip, #ATU_IATVR3]
 ]
        LDR     a1, [ip, #ATU_ATUCMD]
        ORR     a1, a1, #2_1000110              ; Bus Master + memory + parity
        ORR     a1, a1, #1:SHL:8                ; SERR# enable
        STR     a1, [ip, #ATU_ATUCMD]
        LDR     a1, [ip, #ATU_ATUCR]
        ORR     a1, a1, #1:SHL:1                ; Outbound ATU enable
        ORR     a1, a1, #1:SHL:8                ; Direct addressing enable
        STR     a1, [ip, #ATU_ATUCR]
        MOV     r11, #0
 [ (RAM_Base :AND: &80000000) = 0
        BL      get_end_of_ram
 |
        MOV     a1, #0
 ]
        MOV     a2, #PCI_Size
        SUB     a2, a2, #1
        BL      pci_initialise          ; scan the world for PCI devices

        LDR     a1, PCI_IO_Address
        BL      Configure37C665         ; set the 665 up

        Pull    "v1,r11,pc"

; uint8_t PCI_TungstenSecondaryBus(void)
; returns bus number of the secondary bus
PCI_TungstenSecondaryBus
        Push    "lr"
        MOV     a1, #0                  ; Bus 0
        MOV     a2, #8*8                ; Dev 8, Fn 0 = PCI-PCI bridge
        MOV     a3, #PCIConf1_SecondaryBus
        BL      HAL_PCIReadConfigByte
        Pull    "pc"

; uint8_t pci_read_config_byte(int bus, int devfn, int addr)
HAL_PCIReadConfigByte
        pci_config_prelim
        LDR     a3, [ip, #ATU_OCCAR]
        STR     a1, [ip, #ATU_OCCAR]
        MOV     a1, #&FF                ; Default return value in case of abort
        LDRB    a1, [a2, #ATU_OCCDR]
        NOP
        NOP
        NOP
        STR     a3, [ip, #ATU_OCCAR]
        MOV     pc, lr

; uint16_t pci_read_config_halfword(int bus, int devfn, int addr)
HAL_PCIReadConfigHalfword
        pci_config_prelim
        LDR     a3, [ip, #ATU_OCCAR]
        STR     a1, [ip, #ATU_OCCAR]
        ADD     a2, a2, #ATU_OCCDR:AND::NOT:&FF
        MOV     a1, #&FF00
        ORR     a1, a1, #&FF            ; Default return value in case of abort
        LDRH    a1, [a2, #ATU_OCCDR:AND:&FF]
        NOP
        NOP
        NOP
        STR     a3, [ip, #ATU_OCCAR]
        MOV     pc, lr

; uint32_t pci_read_config_word(int bus, int devfn, int addr)
HAL_PCIReadConfigWord
        pci_config_prelim wordaligned
        LDR     a3, [ip, #ATU_OCCAR]
        STR     a1, [ip, #ATU_OCCAR]
        MVN     a1, #0                  ; Default return value in case of abort
        LDR     a1, [ip, #ATU_OCCDR]
        NOP
        NOP
        NOP
        STR     a3, [ip, #ATU_OCCAR]
        MOV     pc, lr

; void pci_write_config_byte(int bus, int devfn, int addr, uint8_t value)
HAL_PCIWriteConfigByte
        pci_config_prelim
        LDR     a3, [ip, #ATU_OCCAR]
        STR     a1, [ip, #ATU_OCCAR]
        STRB    a4, [a2, #ATU_OCCDR]
        STR     a3, [ip, #ATU_OCCAR]
        MOV     pc, lr

; void pci_write_config_halfword(int bus, int devfn, int addr, uint16_t value)
HAL_PCIWriteConfigHalfword
        pci_config_prelim
        LDR     a3, [ip, #ATU_OCCAR]
        STR     a1, [ip, #ATU_OCCAR]
        ADD     a2, a2, #ATU_OCCDR:AND::NOT:&FF
        STRH    a4, [a2, #ATU_OCCDR:AND:&FF]
        STR     a3, [ip, #ATU_OCCAR]
        MOV     pc, lr

; void pci_read_config_word(int bus, int devfn, int addr, uint32_t value)
HAL_PCIWriteConfigWord
        pci_config_prelim wordaligned
        LDR     a3, [ip, #ATU_OCCAR]
        STR     a1, [ip, #ATU_OCCAR]
        STR     a4, [ip, #ATU_OCCDR]
        STR     a3, [ip, #ATU_OCCAR]
        MOV     pc, lr

     [ {FALSE}
; uint8_t pci_read_io_byte(uint32_t address)
HAL_PCIReadIOByte
        LDR     a4, PCI_IO_Address
        CMP     a1, #&10000
        MOVHS   a1, #&FF
        LDRLOB  a1, [a4, a1]
        MOV     pc, lr

HAL_PCIReadIOHalfword
        LDR     a4, PCI_IO_Address
        CMP     a1, #&10000
        LDRHS   a1, =&FFFF
        LDRLOH  a1, [a4, a1]
        MOV     pc, lr

HAL_PCIReadIOWord
        LDR     a4, PCI_IO_Address
        CMP     a1, #&10000
        MOVHS   a1, #&FFFFFFFF
        LDRLO   a1, [a4, a1]
        MOV     pc, lr

; void pci_write_io_byte(uint32_t address, uint8_t value)
HAL_PCIWriteIOByte
        LDR     a4, PCI_IO_Address
        CMP     a1, #&10000
        STRLOB  a2, [a4, a1]
        MOV     pc, lr

HAL_PCIWriteIOHalfword
        LDR     a4, PCI_IO_Address
        CMP     a1, #&10000
        STRLOH  a2, [a4, a1]
        MOV     pc, lr

HAL_PCIWriteIOWord
        LDR     a4, PCI_IO_Address
        CMP     a1, #&10000
        STRLO   a2, [a4, a1]
        MOV     pc, lr
     ]

; Word 0: number of entries
; Words 1+: 8 bytes per "slot"
;
; Byte 0: Bus number
; Byte 1: Device number (times 8)
; Byte 2: INTA# interrupt number (255 if none)
; Byte 3: INTB# interrupt number
; Byte 4: INTC# interrupt number
; Byte 5: INTD# interrupt number
; Byte 6: flags: bits 0-3 set if INTx# is not shared
;                bit 4: set if 64-bit slot
;                bit 5: set if 66-MHz capable slot
;                bit 6: network interface (=> gets NIC CMOS)
;                bit 7 reserved
; Byte 7: slot number (0 if motherboard)
SlotTablePrototype
        DCD     (SlotTablePrototypeEnd - SlotTablePrototype - 4) / 8
        DCB     0, 6*8, Device_XINT2, Device_XINT3, Device_XINT0, Device_XINT1, 2_00110000, 7
        DCB     0, 7*8, Device_XINT3, Device_XINT0, Device_XINT1, Device_XINT2, 2_00110000, 6
        DCB     1, 8*8, Device_XINT0, Device_XINT1, Device_XINT2, Device_XINT3, 2_00000000, 4
        DCB     1, 9*8, Device_XINT1, Device_XINT2, Device_XINT3, Device_XINT0, 2_00000000, 5
        DCB     0, 4*8, Device_XINT0, 255,          255,          255,          2_01100000, 0
        DCB     0, 8*8, Device_XINT0, Device_XINT1, Device_XINT2, Device_XINT3, 2_00110000, 0
        DCB     1, 1*8, Device_AC97,  255,          255,          255,          2_00000000, 0
        DCB     1, 2*8, 255,          255,          255,          255,          2_00000000, 0
        DCB     1, 3*8, Device_Modem, 255,          255,          255,          2_00000000, 0
        DCB     1,10*8, Device_USB2,  255,          255,          255,          2_00000000, 0
        DCB     1,11*8, Device_XINT1, 255,          255,          255,          2_00000000, 0
        DCB     1,12*8, Device_XINT1, 255,          255,          255,          2_00000000, 0
        DCB     1,15*8, Device_XINT1, 255,          255,          255,          2_00000000, 0
SlotTablePrototypeEnd

; In: a1 -> buffer, or 0
;     a2 = buffer size, or 0
; Out: a1 = buffer length required; buffer filled in if a2 in >= a1 out
HAL_PCISlotTable ROUT
        CMP     a2, #SlotTablePrototypeEnd - SlotTablePrototype
        MOVLO   a1, #SlotTablePrototypeEnd - SlotTablePrototype
        MOVLO   pc, lr
        Push    "a1,lr"                 
        ; Check secondary bus number of PCI-PCI bridge (OS may have renumbered)
        BL      PCI_TungstenSecondaryBus
        Pull    "lr"
        ADR     ip, SlotTablePrototype
        LDR     a4, [ip], #4
        STR     a4, [lr], #4
10      LDMIA   ip!, {a2, a3}
        STMIA   lr!, {a2, a3}
        AND     a3, a2, #&FF
        TEQ     a3, #1                  ; Update secondary bus number
        STREQB  a1, [lr, #-8]
        SUBS    a4, a4, #1
        BNE     %BT10
        MOV     a1, #SlotTablePrototypeEnd - SlotTablePrototype
        Pull    "pc"

; Number to add to PCI memory address to get ARM physical address
; Range of PCI memory addresses available for allocation
; Number to add to PCI I/O address to get ARM physical address
; Range of PCI I/O addresses available for allocation
; Value to add to physical RAM address to get PCI memory address
;
address_table
        DCD     PCI_Base
        DCD     &00000000
        DCD     &7FFFFFFF
        DCD     PCI_IO_Base
        DCD     &00001000       ; steer clear of crufty super I/O
        DCD     &0000FFFF
        DCD     0

; In: a1 -> buffer
;     a2 = length
; Out: a1 = length filled in
HAL_PCIAddresses
        ADR     a4, address_table
        MOV     a3, a1
10      SUBS    a2, a2, #4
        LDRPL   ip, [a4], #4
        STRPL   ip, [a1], #4
        BPL     %BT10
        SUB     a1, a1, a3
        MOV     pc, lr

; Not called by PCI manager? Also doesn't even vaguely match docs!
; TODO: Fix me
HAL_PCIFeatures
        MOV     a1, #&0220
        MOV     pc, lr

;
; Simplified version of Configure82C710 programs ALI 1535 only.
;

Configure37C665 Entry
        SETPSR  I_bit + F_bit, ip,, r2  ; Disable FIQ and IRQ

        MOV     lr, #&51
        STRB    lr, [r0, #IO_ConfigIndex]    ; Write magic &51 &23 to CRI711
        MOV     lr, #&23
        STRB    lr, [r0, #IO_ConfigIndex]    ;   to enter configuration mode

        ADR     r1, ConfigSMCTable      ; R1-> SMC 665 configuration data
20
        LDRB    lr, [r1], #1            ; get config index
        STRB    lr, [r0, #IO_ConfigIndex]
        TEQ     lr, #&BB                ; end of table?
        LDRNEB  lr, [r1], #1            ; if not then get config data
        STRNEB  lr, [r0, #IO_ConfigData]    ; and write it
        BNE     %BT20

        MOV     r1, #IOST_37C665
30
        STRB    r1, IOSystemType

        RestPSR r2                      ; Restore IRQ/FIQ state

        EXIT

ConfigSMCTable
        DCB     &07, 0                  ; Access device 0 (FDC)
        DCB     &30, 1                  ; Enable device (IO 03F0, IRQ6, DMA2)
        DCB     &07, 4                  ; Access device 4 (UART 1)
        DCB     &70, 9                  ; Select IRQ9
        DCB     &30, 1                  ; Enable device (at &03F8)
        DCB     &F0, 2                  ; Enable UART 1 high speed mode
        DCB     &07, &B                 ; Access device B (UART 3)
        DCB     &70, 10                 ; Select IRQ10
        DCB     &30, 1                  ; Enable device (at &02F8)
        DCB     &F0, 2                  ; Enable UART 3 high speed mode
        DCB     &BB                     ; Exit config mode
        ALIGN

generate_POR_flags
;       In:  No registers, pre-MMU stage;
;       Out: a1 = OSStartFlag

        LDR     ip, =PMMR

        LDR     a1, [ip, #ATU_ATUCMD]
        ORR     a1, a1, #2_100          ; Bus Master enable
        STR     a1, [ip, #ATU_ATUCMD]
        LDR     a1, [ip, #ATU_ATUCR]
        ORR     a1, a1, #1:SHL:1        ; Outbound ATU enable
        STR     a1, [ip, #ATU_ATUCR]

        LDR     a1, =&01000018          ; set bridge's primary bus to 0,
        STR     a1, [ip, #ATU_OCCAR]    ; and secondary and subordinate to 1
        LDR     a2, =&00010100          ; to allow config cycles to pass
        STR     a2, [ip, #ATU_OCCDR]

        LDR     a1, =&00011040 :OR: 1   ; check the "32-bit DMA" flag in config byte &42
        STR     a1, [ip, #ATU_OCCAR]    ; the 1535. If set, it's not a
        LDRB    a1, [ip, #ATU_OCCDR+2]  ; power-on reset.
        TST     a1, #&40
        MOVEQ   a3, #OSStartFlag_POR
        MOVNE   a3, #0

        LDR     a1, =&000160B4 :OR: 1   ; check the GPI25 bit in config byte &B6
        STR     a1, [ip, #ATU_OCCAR]    ; the 7101. If set, the CMOS protection
        LDRB    a1, [ip, #ATU_OCCDR+2]  ; link is open
        TST     a1, #&2
        ORREQ   a3, a3, #OSStartFlag_NoCMOSReset

        MOV     a1, a3
        MOV     pc, lr

; bool pci_set_host_fastb2b(bool)
pci_set_host_fastb2b
        LDR     ip, PMMR_Address
        ADD     ip, ip, #ATU_ATUCMD:AND::NOT:&FF
        TEQ     a1, #0
        LDRH    a2, [ip, #ATU_ATUCMD:AND:&FF]
        ORRNE   a2, a2, #&0200
        BICEQ   a2, a2, #&0200
        STRH    a2, [ip, #ATU_ATUCMD:AND:&FF]
        MOV     pc, lr

        EXPORT  memset
memset
        ORR     ip, a1, a3
        TST     ip, #3
        BEQ     memset_wordaligned
        MOV     a4, a1
        TEQ     a3, #0
10      STRNEB  a2, [a4], #1
        SUBS    a3, a3, #1
        BNE     %BT10
        MOV     pc, lr

memset_wordaligned
        AND     a2, a2, #&FF
        ORR     a2, a2, a2, LSL #8
        ORR     a2, a2, a2, LSL #16
        ; fall through

        EXPORT  _memset
_memset
        MOV     a4, a1
        TEQ     a3, #0
10      STRNE   a2, [a4], #4
        SUBS    a3, a3, #4
        BNE     %BT10
        MOV     pc, lr

; alloc_usbhal relies on hal_alloc not corrupting a4
        EXPORT  hal_alloc
hal_alloc
        ADD     a1, a1, #3
        BIC     a1, a1, #3
        LDR     a2, AllocNext
        TEQ     a2, #0
        ADREQ   a2, AllocArea
        ADD     a3, a2, a1
        STR     a3, AllocNext
        MOV     a1, a2
        MOV     pc, lr

        EXPORT  hal_free
hal_free
        MOV     pc, lr

        EXPORT  alloc_contig
alloc_contig
        CMP     a2, #4
        MOVLO   a2, #4
        SUB     a2, a2, #1
        LDR     ip, NCNBAllocNext
        TEQ     ip, #0
        LDREQ   ip, NCNBWorkspace
        ADD     ip, ip, a2
        BIC     ip, ip, a2
        ADD     a4, ip, a1
        STR     a4, NCNBAllocNext
        MOV     a3, a1
        MOV     a2, #0
        MOV     a1, ip
        B       memset

        EXPORT  free_contig
free_contig
        MOV     pc, lr

        EXPORT  pci_set_state
pci_set_state
        STR     a1, PCIState
        MOV     pc, lr

        EXPORT  pci_get_state
pci_get_state
        LDR     a1, PCIState
        MOV     pc, lr

        EXPORT  panic
panic
        BKPT    &1234
        B       panic

        END
@


1.8
log
@Delete some dead code, update docs
doc/PCI_HALAPI:
 Updated docs for PCI_HALAPI a bit.
hdr/80321:
 Typo.
hdr/StaticWS:
 2 dead variables removed.
s/PCIasm
 HAL_PCI[Read|Write]IO[Byte|Halfword|Word] switched out as they're never used and don't appear in the HAL entry points table either.
 Unused pci_device_for_int and pci_found_vram deleted.
 Added a couple of function block comments, and other general commenting.
 Unused HAL_PCISlotNumber deleted.

Version 0.53. Tagged as 'Tungsten-0_53'
@
text
@a480 12
        EXPORT  alloc_usbhal
alloc_usbhal
        MOV     a4, lr
        BL      hal_alloc
        STR     a1, USBHALws
        MOV     pc, a4

        EXPORT  get_usbhal
get_usbhal
        LDR     a1, USBHALws
        MOV     pc, lr

@


1.7
log
@First venture into the world of message signalled interrupts (s.MSI).
High speed RAM clear added using AAU in the XScale.
Tighten up check on RAM modules to reject some 4 bit wide devices.
Fix for CMOS protect link being ignored.
Add table returned by ReadPhysicalMemory.
New poke to move sound DMA into the top half of physical memory.
PCI rewrite.

Version 0.14. Tagged as 'Tungsten-0_14'
@
text
@d28 1
a35 6
        EXPORT  HAL_PCIReadIOByte
        EXPORT  HAL_PCIReadIOHalfword
        EXPORT  HAL_PCIReadIOWord
        EXPORT  HAL_PCIWriteIOByte
        EXPORT  HAL_PCIWriteIOHalfword
        EXPORT  HAL_PCIWriteIOWord
a39 2
        EXPORT  pci_device_for_int
        EXPORT  pci_found_vram
d63 1
d116 2
a117 2

        EXPORT  PCI_TungstenSecondaryBus
d120 2
a121 2
        MOV     a1, #0
        MOV     a2, #8*8                ; Bus 0, Dev 8 = 21154
d131 1
a131 1
        MOV     a1, #&FF
d146 1
a146 1
        ORR     a1, a1, #&FF
d159 1
a159 1
        MVN     a1, #0
d195 1
d236 1
a237 2
; Out: table of slots:
;
a252 1

d254 14
a267 14
        & (SlotTablePrototypeEnd - SlotTablePrototype - 4) / 8
        = 0, 6*8, Device_XINT2, Device_XINT3, Device_XINT0, Device_XINT1, 2_00110000, 7
        = 0, 7*8, Device_XINT3, Device_XINT0, Device_XINT1, Device_XINT2, 2_00110000, 6
        = 1, 8*8, Device_XINT0, Device_XINT1, Device_XINT2, Device_XINT3, 2_00000000, 4
        = 1, 9*8, Device_XINT1, Device_XINT2, Device_XINT3, Device_XINT0, 2_00000000, 5
        = 0, 4*8, Device_XINT0, 255,          255,          255,          2_01100000, 0
        = 0, 8*8, Device_XINT0, Device_XINT1, Device_XINT2, Device_XINT3, 2_00110000, 0
        = 1, 1*8, Device_AC97,  255,          255,          255,          2_00000000, 0
        = 1, 2*8, 255,          255,          255,          255,          2_00000000, 0
        = 1, 3*8, Device_Modem, 255,          255,          255,          2_00000000, 0
        = 1,10*8, Device_USB2,  255,          255,          255,          2_00000000, 0
        = 1,11*8, Device_XINT1, 255,          255,          255,          2_00000000, 0
        = 1,12*8, Device_XINT1, 255,          255,          255,          2_00000000, 0
        = 1,15*8, Device_XINT1, 255,          255,          255,          2_00000000, 0
a269 1
HAL_PCISlotTable
d273 1
d277 3
a279 5
        Push    "a1,lr"
        MOV     a1, #0
        MOV     a2, #8*8
        MOV     a3, #&19                ; check secondary bus number of 21154 bridge
        BL      HAL_PCIReadConfigByte   ; (OS may have renumbered)
d287 1
a287 1
        TEQ     a3, #1
a293 29
; In: a1 = bus number
;     a2 = device/function
; Out: a1 = slot number (0 = motherboard, 1 upwards = slots, -1 = not known)
HAL_PCISlotNumber ROUT
        TEQ     a1, #0                  ; Primary bus is always bus 0
        MOV     a2, a2, LSR #3
        BNE     %FT20
        TEQ     a2, #6
        TEQNE   a2, #7
        SUBEQ   a1, a2, #5              ; Bus 0 devices 6 and 7 = Slots 1 & 2
        MOVNE   a1, #0
        MOV     pc, lr
20
        Push    "a1,a2,lr"
        MOV     a1, #0
        MOV     a2, #8*8
        MOV     a3, #&19                ; check secondary bus number of 21154 bridge
        BL      HAL_PCIReadConfigByte   ; (OS may have renumbered)
        MOV     a3, a1
        Pull    "a1,a2,lr"
        TEQ     a1, a3
        MOVNE   a1, #-1                 ; Not on either of our buses
        MOVNE   pc, lr
        TEQ     a2, #8
        TEQNE   a2, #9
        SUBEQ   a1, a2, #5              ; secondary bus devices 8 and 9 = Slots 3 & 4
        MOVNE   a1, #0
        MOV     pc, lr

a320 1
;
d322 2
a404 6

pci_found_vram
        STR     a1, VRAM_PhysAddr
        STR     a2, VRAM_Size
        MOV     pc, lr

a415 8
; int pci_device_for_int(int device, int line)
pci_device_for_int
        SUB     a2, a2, #1
        ADD     a1, a1, a2
        AND     a1, a1, #3
        ADD     a1, a1, #Device_XINT0
        MOV     pc, lr

@


1.6
log
@Kevin's new PCI enumeration C.
Kevin's UART control for DualSerial to talk to.
Completion of flash recovery stuff - it now flashes the floppy drive
light appropriately then requests a new OS image down the serial port
but is careful never to erase itself.To allow this has required some
shuffling to ensure the first 8k of binary is fixed and makes no
external calls - "s.Top" arranges this and effectively moves the
HAL up 8k in ROM.

Version 0.13. Tagged as 'Tungsten-0_13'
@
text
@d47 1
a47 1
        
d100 2
a101 1
        ORR     a1, a1, #2_110                  ; Bus Master and memory response
d437 1
a437 1
        ORREQ   a1, a3, #OSStartFlag_NoCMOSReset
d439 1
d469 3
d476 15
@


1.5
log
@Random check in as it's been rather a long time and I don't trust
people's harddiscs.
Changes for DMA support (s.ATA)
Bug fix to HAL Counter info,it only worked if R0=0 on entry - spotted
by Dan Ellis
Power on <key held down> support in C.USBHAL and H.USBHAL
Reads the CMOS lock jumper
The beginnings of flash recovery code
Some code tidy ups and documentation updates

Version 0.11. Tagged as 'Tungsten-0_11'
@
text
@d44 1
a44 1
        EXPORT  pcibios_set_host_fastb2b
d47 1
a47 1

a49 2
        IMPORT  minimal_pci_setup
        IMPORT  Configure37C665
d69 1
a69 1
        
d73 33
a105 2
        BL      minimal_pci_setup       ; set the ATU up a bit

d118 1
a118 1
 
d364 42
d433 1
a433 1
        STR     a1, [ip, #ATU_OCCAR]    ; the 7101. If set, the CMOS protection 
d447 1
a447 1
pcibios_set_host_fastb2b
d450 1
d452 2
a453 1
        ORR     a2, a2, #&0200
@


1.4
log
@Bugfixes:
* XINT0 could not be masked using HAL_IRQDisable() (a hangover from a
  RevA hardware workaround)
* SlotTablePrototype wasn't correct

Version 0.09. Tagged as 'Tungsten-0_09'
@
text
@d43 1
d47 1
d50 2
d53 2
a54 103
PCI_Init
        Push    "v1,r11,lr"
        LDR     ip, PMMR_Address
        MOV     a1, #8
        STRB    a1, [ip, #ATU_ATUCLSR]          ; Cache line size = 8 words
        MOV     a1, #&20
        STRB    a1, [ip, #ATU_ATULT]            ; Latency timer = 32 clocks
        MOV     a1, #0
        STR     a1, [ip, #ATU_IABAR0]
        STR     a1, [ip, #ATU_IALR0]            ; Close window 0 (for now)
        MOV     a1, #&C0000000
        STR     a1, [ip, #ATU_IALR2]            ; RAM window is 1GB
 [ ShadowRAMWindow
        STR     a1, [ip, #ATU_IALR3]
 ]
        MOV     a1, #RAM_Base
        ORR     a1, a1, #2_1100                 ; Prefetchable, 64-bit
        STR     a1, [ip, #ATU_IABAR2]           ; RAM window (&C0000000)
 [ ShadowRAMWindow
        MOV     a1, #&40000000
        ORR     a1, a1, #2_1000                 ; Prefetchable, 32-bit
        STR     a1, [ip, #ATU_IABAR3]
 ]
        MOV     a1, #RAM_Base
        STR     a1, [ip, #ATU_IATVR2]
 [ ShadowRAMWindow
        STR     a1, [ip, #ATU_IATVR3]
 ]
        LDR     a1, [ip, #ATU_ATUCMD]
        ORR     a1, a1, #2_110                  ; Bus Master & Memory enable
        STR     a1, [ip, #ATU_ATUCMD]
        LDR     a1, [ip, #ATU_ATUCR]
        ORR     a1, a1, #1:SHL:1                ; Outbound ATU enable
        ORR     a1, a1, #1:SHL:8                ; Direct addressing enable
        STR     a1, [ip, #ATU_ATUCR]
        MOV     r11, #0
 [ (RAM_Base :AND: &80000000) = 0
        BL      get_end_of_ram
 |
        MOV     a1, #0
 ]
        MOV     a2, #PCI_Size
        SUB     a2, a2, #1
        BL      pci_initialise
        LDR     a1, PCI_IO_Address
        BL      Configure37C665
        Pull    "v1,r11,pc"

Combo_Init
; 82C710 stuff


CRI711Off       *       &03F0           ; 82C711 Configuration Register Index port
CAP711Off       *       CRI711Off +1    ; 82C711 Configuration Access Port (data)


ConfigSMCTable
        DCB     &07, 0                  ; Access device 0 (FDC)
        DCB     &30, 1                  ; Enable device (IO 03F0, IRQ6, DMA2)
        DCB     &07, 4                  ; Access device 4 (UART 1)
        DCB     &70, 9                  ; Select IRQ9
        DCB     &30, 1                  ; Enable device (at &03F8)
        DCB     &F0, 2                  ; Enable UART 1 high speed mode
        DCB     &07, &B                 ; Access device B (UART 3)
        DCB     &70, 10                 ; Select IRQ10
        DCB     &30, 1                  ; Enable device (at &02F8)
        DCB     &F0, 2                  ; Enable UART 3 high speed mode
        DCB     &BB                     ; Exit config mode

        ALIGN

;
;
; Simplified version of Configure82C710 programs SMC 37C665 only.
;
Configure37C665 Entry
        SETPSR  I_bit + F_bit, ip,, r2  ; Disable FIQ and IRQ

; First try to configure the SMC665

        MOV     lr, #&51
        STRB    lr, [r0, #CRI711Off]    ; Write &55 to CRI711 twice
        MOV     lr, #&23
        STRB    lr, [r0, #CRI711Off]    ; to enter configuration mode

        ADR     r1, ConfigSMCTable      ; R1-> SMC 665 configuration data
20
        LDRB    lr, [r1], #1            ; get config index
        STRB    lr, [r0, #CRI711Off]
        TEQ     lr, #&BB                ; end of table?
        LDRNEB  lr, [r1], #1            ; if not then get config data
        STRNEB  lr, [r0, #CAP711Off]    ; and write it
        BNE     %BT20

        MOV     r1, #IOST_37C665
30
        STRB    r1, IOSystemType

        RestPSR r2                      ; Restore IRQ/FIQ state

        EXIT


a56 2
        MACRO
        pci_config_prelim $wordaligned
d64 1
a64 1
 [ "$wordaligned" = ""
d68 1
a68 1
 ]
d71 21
d335 35
d394 1
d396 1
a396 1
10      STRNEB  a2, [a1], #1
d401 1
d416 43
@


1.3
log
@Changed to activate UART3 instead of UART2. UART3 used for HAL debugging.

Version 0.06. Tagged as 'Tungsten-0_06'
@
text
@d316 7
a322 7
        = 1, 1*8, Device_XINT0, 255,          255,          255,          2_00000000, 0
        = 1, 2*8, Device_XINT0, 255,          255,          255,          2_00000000, 0
        = 1, 3*8, Device_XINT0, 255,          255,          255,          2_00000000, 0
        = 1,10*8, Device_XINT0, 255,          255,          255,          2_00000000, 0
        = 1,11*8, Device_XINT0, 255,          255,          255,          2_00000000, 0
        = 1,12*8, Device_XINT0, 255,          255,          255,          2_00000000, 0
        = 1,15*8, Device_XINT0, 255,          255,          255,          2_00000000, 0
@


1.2
log
@Change to new IIC address
Uncommented HAL_SuperIOInfo,fixes bug report of ReadSysInfo 3
returning garbled R0.
Misc other serial port changes.

Version 0.05. Tagged as 'Tungsten-0_05'
@
text
@d112 1
a112 1
        DCB     &07, 5                  ; Access device 5 (UART 2)
d114 2
a115 1
        DCB     &30, 1                  ; Enable device (at &3E8)
a132 7

        MOV     lr, #&20                ; Check for SMC 665
        STRB    lr, [r0, #CRI711Off]
        LDRB    lr, [r0, #CAP711Off]
        TEQ     lr, #&53
        MOVNE   r1, #0                  ;NE: not a SMC 665 this should never happen
        BNE     %FT30                   ;NE: on a RiscPC, Kryten or Stork
@


1.1
log
@Initial check-in.

Version 0.01. Tagged as 'Tungsten-0_01'
@
text
@d20 1
d42 1
a42 1
        EXPORT  HAL_PCISlotNumber
d93 2
d97 61
d310 2
a311 1
;                bits 6-7 reserved
d316 5
a320 5
        = 0, 6*8, Device_XINT2, Device_XINT3, Device_XINT0, Device_XINT1, 2_00110000, 1
        = 0, 7*8, Device_XINT3, Device_XINT0, Device_XINT1, Device_XINT2, 2_00110000, 2
        = 1, 8*8, Device_XINT0, Device_XINT1, Device_XINT2, Device_XINT3, 2_00000000, 3
        = 1, 9*8, Device_XINT1, Device_XINT2, Device_XINT3, Device_XINT0, 2_00000000, 4
        = 0, 4*8, Device_XINT0, 255,          255,          255,          2_00100000, 0
@

