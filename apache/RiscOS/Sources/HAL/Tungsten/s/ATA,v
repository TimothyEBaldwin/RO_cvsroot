head	1.7;
access;
symbols
	Tungsten-0_63:1.7
	Tungsten-0_62:1.7
	Tungsten-0_61:1.7
	Tungsten-0_60:1.7
	SMP:1.7.0.2
	SMP_bp:1.7
	Tungsten-0_59:1.7
	Tungsten-0_58:1.7
	Tungsten-0_57:1.6
	Tungsten-0_56:1.6
	Tungsten-0_55:1.6
	Tungsten-0_54:1.6
	Tungsten-0_53:1.6
	Tungsten-0_52:1.6
	Tungsten-0_51:1.6
	Tungsten-0_50:1.6
	Tungsten-0_49:1.6
	Tungsten-0_48:1.6
	Tungsten-0_47:1.6
	Tungsten-0_46:1.6
	Tungsten-0_45:1.6
	Tungsten-0_44:1.6
	Tungsten-0_43:1.6
	Tungsten-0_42:1.6
	Tungsten-0_41:1.6
	Tungsten-0_40:1.6
	Tungsten-0_39:1.6
	Tungsten-0_38:1.6
	Tungsten-0_37:1.6
	Tungsten-0_36:1.5
	Tungsten-0_35:1.5
	Tungsten-0_34:1.5
	Tungsten-0_33:1.5
	Tungsten-0_32:1.5
	Tungsten-0_31:1.5
	Tungsten-0_30:1.5
	Tungsten-0_29:1.5
	Tungsten-0_28:1.5
	Tungsten-Official514:1.5
	Tungsten-0_27:1.5
	Tungsten-0_26:1.5
	Tungsten-0_25:1.5
	Tungsten-0_24:1.5
	Tungsten-0_23:1.5
	Tungsten-0_22:1.5
	Tungsten-0_21:1.5
	Tungsten-0_20:1.5
	RO_5_07:1.5
	Tungsten-0_19:1.5
	Tungsten-0_18:1.5
	Tungsten-0_17:1.5
	Tungsten-0_16:1.5
	Tungsten-0_15:1.5
	Tungsten-0_14:1.5
	Tungsten-0_13:1.5
	Tungsten-0_12:1.5
	Tungsten-0_11:1.4
	Tungsten-0_10:1.3
	Tungsten-0_09:1.2
	Tungsten-0_08:1.2
	Tungsten-0_07:1.1
	Tungsten-0_06:1.1
	Tungsten-0_05:1.1
	Tungsten-0_04:1.1
	Tungsten-0_03:1.1
	Tungsten-0_02:1.1
	Tungsten-0_01:1.1;
locks; strict;
comment	@# @;


1.7
date	2016.01.05.21.57.26;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	vUYZfnjeXR8f7NPy;

1.6
date	2012.02.25.16.43.16;	author jlee;	state Exp;
branches;
next	1.5;
commitid	jZ2NTOmQjvfsHyUv;

1.5
date	2003.02.21.20.26.36;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.16.18.55.45;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.22.14.58.45;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.13.19.26.25;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.07.12.34.07;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Declare the presence of an IDE controller
ATA.s:
  Refactor to report a PATA IDE controller.
Boot.s:
  Init the ATA device.
Report a HAL platform name string for OS_ReadSysInfo 9,7.

Version 0.58. Tagged as 'Tungsten-0_58'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     Hdr:HALDevice
        GET     Hdr:IDEDevice
        GET     Hdr:PCI
        GET     Hdr:DMA

        GET     hdr.StaticWS
        GET     hdr.80321

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  IDE_Init
        EXPORT  IDEDevice_Init
        IMPORT  HAL_PCIReadConfigByte
        IMPORT  HAL_PCIReadConfigHalfword
        IMPORT  HAL_PCIReadConfigWord
        IMPORT  HAL_PCIWriteConfigByte
        IMPORT  HAL_PCIWriteConfigHalfword
        IMPORT  HAL_PCIWriteConfigWord
        IMPORT  PCI_TungstenSecondaryBus
        IMPORT  memcpy

                   ^ 0
                   # HALDevice_IDESize  ; Public bits
IDEDeviceHAL_SB    # 4
IDEDevice_IDE_Size # 0

IDE_Init
        Push    "v1,v2,lr"
        ; Find bus number
        BL      PCI_TungstenSecondaryBus
        ; Enable ATA-4, cable detect, Ultra DMA, make simplex bus master bit R/W
        MOV     v1, a1
        MOV     a2, #11*8
        MOV     a3, #&4A
        LDR     a4, =&C900
        BL      HAL_PCIWriteConfigHalfword
        ; Get bus master register address
        MOV     a1, v1
        MOV     a2, #11*8
        MOV     a3, #PCIConf0_BaseAddresses+16
        BL      HAL_PCIReadConfigWord
        BIC     v1, a1, #3
        ; Clear simplex bit
        MOV     a1, v1
        MOV     a2, #11*8
        ADD     a3, v1, #2
        MOV     a4, #0
        BL      HAL_PCIWriteConfigByte
        ; Make simplex bus master bit RO
        MOV     a1, v1
        MOV     a2, #11*8
        MOV     a3, #&4A
        LDR     a4, =&C904
        BL      HAL_PCIWriteConfigHalfword
        ; Disable Ultra DMA on all 4 devices
        MOV     a1, v1
        MOV     a2, #11*8
        MOV     a3, #&56
        LDR     a4, =&8888
        BL      HAL_PCIWriteConfigHalfword
        ; Set max slow PIO for primary controller
        MOV     a1, v1
        MOV     a2, #11*8
        MOV     a3, #&58
        MOV     a4, #0
        BL      HAL_PCIWriteConfigWord
        ; Set max slow PIO for secondary controller
        MOV     a1, v1
        MOV     a2, #11*8
        MOV     a3, #&5C
        MOV     a4, #0
        BL      HAL_PCIWriteConfigWord
        Pull    "v1,v2,pc"

IDEDevice_Init
        Push    "lr"
        ADRL    a1, IDEDeviceStruct
        ADR     a2, IDEDeviceTemplate
        MOV     a3, #IDEDevice_IDE_Size
        BL      memcpy

        STR     sb, [a1, #IDEDeviceHAL_SB]

        MOV     a2, a1
        MOV     a1, #0                  ; No flags
        CallOS  OS_AddDevice
        Pull    "pc"

IDEDeviceTemplate
        ; Public interface
        DCW     HALDeviceType_ExpCtl + HALDeviceExpCtl_IDE
        DCW     HALDeviceID_IDE_M5229
        DCD     HALDeviceBus_Exp + HALDeviceExpBus_PCI
        DCD     &0000                   ; API version - 0.0
        DCD     IDEDeviceDesc
        DCD     0                       ; Address - N/A
        %       12                      ; Reserved
        DCD     IDE_Activate
        DCD     IDE_Deactivate
        DCD     IDE_Reset
        DCD     IDE_Sleep
        DCD     -1                      ; Device
        DCD     0                       ; TestIRQ cannot be called
        %       8
        ; Specifics for an IDE controller
        DCD     IDE_CableID
        DCD     IDE_ControllerInfo
        DCD     IDE_SetModes
        ASSERT  (.-IDEDeviceTemplate) = HALDevice_IDESize
        ; Controller's private data from here onwards
        DCD     0                       ; Copy of HAL's SB
        ASSERT  (.-IDEDeviceTemplate) = IDEDevice_IDE_Size
        ASSERT  ?IDEDeviceStruct = IDEDevice_IDE_Size

IDEDeviceDesc
        DCB     "ALi M5229 IDE controller", 0
        ALIGN

IDE_Activate
        MOV     a1, #1
IDE_Deactivate
IDE_Reset
        MOV     pc, lr

IDE_Sleep
        MOV     a1, #0
        MOV     pc, lr

; size_t ControllerInfo(struct idedevice *ide,
;                       int bus, union atainfo *info, size_t buflen)
IDE_ControllerInfo
        CMP     a2, #-1                 ; group info?
        BEQ     %FT50
        CMP     a2, #2                  ; bus limit
        MOVHS   a1, #0
        MOVHS   pc, lr

        Push    "a3,a4,v1-v5,sb,lr"
        LDR     sb, [a1, #IDEDeviceHAL_SB]
        MOV     v5, a2                  ; v5 = Controller number

        SUB     sp, sp, #12*4           ; construct on stack
        MOV     v1, sp

        MOV     a1, #2_1010             ; 32-bit PIO, no 48-bit DMA
        STR     a1, [v1], #4

        BL      PCI_TungstenSecondaryBus
        MOV     v2, a1                  ; v2 = bus of 1535+

        LDR     v3, PCI_IO_Address
        MOV     v4, #PCIConf0_BaseAddresses

        ; Read command block address
        MOV     a2, #11*8               ; Secondary bus, Dev 11 = M5229
        ADD     a3, v4, v5, LSL #3
        BL      HAL_PCIReadConfigWord
        BIC     a1, a1, #3
        ADD     a1, a1, v3
        STR     a1, [v1], #4

        ; Read control block address
        MOV     a1, v2
        MOV     a2, #11*8
        ADD     a3, v4, v5, LSL #3
        ADD     a3, a3, #4
        BL      HAL_PCIReadConfigWord
        BIC     a1, a1, #3
        ADD     a1, a1, v3
        STR     a1, [v1], #4

        ; Read bus master address
        MOV     a1, v2
        MOV     a2, #11*8
        ADD     a3, v4, #16
        BL      HAL_PCIReadConfigWord
        BIC     a1, a1, #3
        ADD     a1, a1, v5, LSL #3
        ADD     a1, a1, v3
        STR     a1, [v1], #4

        TEQ     v5, #0
        MOVEQ   a1, #Device_ATA1
        MOVNE   a1, #Device_ATA2
        MOV     a2, #2_11111            ; PIO modes 0-4
        MOV     a3, #2_111              ; Multiword DMA modes 0-2
        MOV     a4, #2_111111           ; Ultra DMA modes 0-5
        STMIA   v1!, {a1-a4}

        BL      PCI_TungstenSecondaryBus
        LDR     a2, =HALDeviceBus_Exp + HALDeviceExpBus_PCI + 11:SHL:8
        ORR     a2, a2, a1, LSL #16
        MOV     a1, #HALDeviceID_DMAL_M5229
        TEQ     v5, #0
        ADREQ   a3, DeviceDescr0
        ADRNE   a3, DeviceDescr1
        LDREQ   a4, =DMALC_IDE0
        LDRNE   a4, =DMALC_IDE1
        STMIA   v1!, {a1-a4}

        LDMIA   v1!, {a1,a3}            ; caller's buffer + length
        CMP     a3, #12*4
        MOVHI   a3, #12*4
        MOV     a2, sp
        BL      memcpy                  ; copy in as much as possible

        MOV     sp, v1

        MOV     a1, #12*4               ; say how much we gave them
        Pull    "v1-v5,sb,pc"

50
        Push    "a3,a4,v1,sb,lr"
        LDR     sb, [a1, #IDEDeviceHAL_SB]
        SUB     sp, sp, #4*4            ; construct on stack
        MOV     v1, sp

        BL      PCI_TungstenSecondaryBus
        LDR     a3, =HALDeviceBus_Exp + HALDeviceExpBus_PCI + 11:SHL:8
        ORR     a3, a3, a1, LSL #16
        MOV     a1, #2
        MOV     a2, #HALDeviceID_DMAC_M5229
        ADR     a4, DeviceDescr
        STMIA   v1!, {a1-a4}

        LDMIA   v1!, {a1,a3}            ; caller's buffer + length
        CMP     a3, #4*4
        MOVHI   a3, #4*4
        MOV     a2, sp
        BL      memcpy                  ; copy in as much as possible

        MOV     sp, v1

        MOV     a1, #4*4                ; say how much we gave them
        Pull    "v1,sb,pc"

DeviceDescr  = "ALi M5229 IDE controller bus master", 0
DeviceDescr0 = "ALi M5229 IDE controller bus master primary channel", 0
DeviceDescr1 = "ALi M5229 IDE controller bus master secondary channel", 0
        ALIGN

; void SetModes(struct idedevice *ide,
;               int bus, struct atamode *dev0, struct atamode *dev1)
IDE_SetModes ROUT
        CMP     a2, #2          ; bus count
        MOVHS   pc, lr

        Push    "a3,a4,v1-v5,sb,lr"
        LDR     sb, [a1, #IDEDeviceHAL_SB]
        MOV     v4, #0          ; v4=DMA control value
        MOV     v5, a2          ; v5=controller number
        MOV     v1, a3          ; v1->device 0 speed settings
        MOV     v2, a4          ; v2->device 1 speed settings
        BL      PCI_TungstenSecondaryBus
        MOV     v3, a1          ; v3=ATA controller PCI bus

        MACRO
        EvaluateBasics $r,$dev
        TEQ     $r, #0
        BEQ     %FT20

        LDRB    lr, [$r, #6]    ; check for UltraDMA
        TEQ     lr, #&FF
        BEQ     %FT15

        ; UltraDMA mode in use
        CMP     lr, #5
        MOVHI   lr, #5          ; we do up to mode 5
        STRHIB  lr, [$r, #6]
        RSB     lr, lr, #12     ; -> 12,11,10,9,8,7
        ORR     lr, lr, #8      ; -> 12,11,10,9,8,15
        ORR     v4, v4, lr, LSL #$dev*4
        MOV     lr, #&FF
        STRB    lr, [$r, #5]    ; indicate normal DMA off
        B       %FT18

15      LDRB    lr, [$r, #5]    ; check for multiword DMA
        TEQ     lr, #&FF
        BEQ     %FT18

        ; multiword DMA mode in use
        CMP     lr, #2
        MOVHI   lr, #2          ; we do up to mode 2
        STRHIB  lr, [$r, #5]
        MOV     lr, #&FF
        STRB    lr, [$r, #6]    ; indicate UltraDMA off

18      LDRB    lr, [$r, #4]    ; check and limit PIO speed
        CMP     lr, #4
        MOVHI   lr, #4
        STRHIB  lr, [$r, #4]
20
        MEND

        EvaluateBasics v1,0
        EvaluateBasics v2,1

        ; Now PIO and DMA values regularised in parameters
        ; v4 = Ultra DMA mode register value

        ; Set Ultra DMA mode/timing
        MOV     a1, v3
        MOV     a2, #11*8
        ADD     a3, v5, #&56
        MOV     a4, v4
        BL      HAL_PCIWriteConfigByte

        ; Set data timing (device $dev), from data at $r
        ; Leave $r set to PIO mode value
        MACRO
        SetDataTiming $r,$dev
        TEQ     $r, #0
        MOVEQ   v4, #&FF
        MOVEQ   $r, #4
        LDRNEB  v4, [$r, #5]            ; v4 = multiword DMA mode (or &FF)
        LDRNEB  $r, [$r, #4]            ; $r = PIO mode
        ADR     a1, PIO_Data_Table
        LDRB    a2, [a1, $r, LSL #1]!   ; a2 = PIO pulse time
        LDRB    a3, [a1, #1]            ; a3 = PIO recovery time
        TEQ     v4, #&FF
        BEQ     %FT20
        ADR     a1, DMA_Data_Table
        LDRB    a4, [a1, v4, LSL #1]!   ; a4 = DMA pulse time
        LDRB    lr, [a1, #1]            ; lr = DMA recovery time
        CMP     a4, a2
        MOVHI   a2, a4                  ; get higher of each
        CMP     lr, a3
        MOVHI   a3, lr
20      AND     a3, a3, #2_1111         ; recovery time is a 4-bit field
        AND     a2, a2, #2_111          ; pulse time is a 3-bit field
        ORR     a4, a3, a2, LSL #4      ; combine into register format
        MOV     a1, v3
        MOV     a2, #11*8
        MOV     a3, #&5A+$dev
        ADD     a3, a3, v5, LSL #2
        BL      HAL_PCIWriteConfigByte
        MEND

        SetDataTiming v1,0
        SetDataTiming v2,1

        ; Now v1 = device 0 PIO mode, v2 = device 1 PIO mode
        ; Select highest common mode

        CMP     v1, v2
        MOVHI   v1, v2

        ; Set control timing (both devices)
        ADR     a1, PIO_Reg_Table
        LDRB    a4, [a1, v1]
        MOV     a1, v3
        MOV     a2, #11*8
        MOV     a3, #&59
        ADD     a3, a3, v5, LSL #2
        BL      HAL_PCIWriteConfigByte

        ; Set address setup timing (both devices)
        ADR     a1, PIO_Addr_Table
        LDRB    a4, [a1, v1]
        MOV     a1, v3
        MOV     a2, #11*8
        MOV     a3, #&58
        ADD     a3, a3, v5, LSL #2
        BL      HAL_PCIWriteConfigByte

        ; Now FIFO control of each device
        Pull    "v1,v2"                 ; dev0/dev1 struct pointers
        TEQ     v1, #0
        LDRNE   v1, [v1, #0]
        TEQ     v2, #0
        LDRNE   v2, [v2, #0]
        MOV     a4, #0
        TST     v1, #1
        ORRNE   a4, a4, #&05
        TST     v2, #1
        ORRNE   a4, a4, #&50
        MOV     a1, v3
        MOV     a2, #11*8
        MOV     a3, #&54
        ADD     a3, a3, v5
        BL      HAL_PCIWriteConfigByte

        Pull    "v1-v5,sb,pc"

; Data timings are shared between PIO and multiword DMA, so need to select
; timings that meet both the PIO and DMA requirements.

;      Pulse time,recovery time (33MHz clocks)
PIO_Data_Table
        =       8,12    ; 240ns,360ns = 600ns cycle
        =       5,8     ; 150ns,240ns = 390ns cycle (standard=383ns)
        =       4,4     ; 120ns,120ns = 240ns cycle
        =       3,3     ; 90ns,90ns   = 180ns cycle
        =       3,1     ; 90ns,30ns   = 120ns cycle
        ALIGN

DMA_Data_Table
        =       8,8     ; 240ns,240ns = 480ns cycle
        =       3,2     ; 90ns,60ns   = 150ns cycle
        =       3,1     ; 90ns,30ns   = 120ns cycle
        ALIGN

; Register values for PIO modes (no clash with DMA, so use raw)
PIO_Reg_Table
        =       &0C     ; 240ns,360ns = 600ns cycle (ATA spec says 290ns
        =       &05     ; 240ns,150ns = 390ns cycle  pulse for modes 0-2
        =       &03     ; 240ns,90ns  = 330ns cycle  but controller can't
        =       &33     ; 90ns,90ns   = 180ns cycle  go that high)
        =       &31     ; 90ns,30ns   = 120ns cycle
        ALIGN

PIO_Addr_Table
        =       &03, &02, &01, &01, &01
        ALIGN

; bool CableID(struct idedevice *ide, int bus)
IDE_CableID ROUT
        CMP     a2, #2                  ; bus count
        MOVHS   a1, #0
        MOVHS   pc, lr
        Push    "v1,sb,lr"
        LDR     sb, [a1, #IDEDeviceHAL_SB]
        ADD     v1, a2, #1              ; 0/1 => bit 0/bit 1
        BL      PCI_TungstenSecondaryBus
        MOV     a2, #11*8
        MOV     a3, #&4A
        BL      HAL_PCIReadConfigHalfword
        TST     a1, v1
        MOVEQ   a1, #1
        MOVNE   a1, #0
        Pull    "v1,sb,pc"

        END
@


1.6
log
@Add compressed ROM support. Make softload-aware.
Detail:
  hdr/Post, s/FlashProg - Add sizeofROM definition, for expected size of compressed ROM/physical ROM chip. Used to replace references to OSROM_ImageSize throughout the code.
  s/ATA, s/Boot, s/Debug, s/DebugPCI, s/IIC, s/Interrupts, s/MSI, s/NVMemory, s/Timers, s/Top, s/UART - Removed unnecessary GETs of Hdr:ImageSize.<ImageSize>
  s/Boot, s/Video - Add a new 'Tungsten video' HAL device, for storing the NVidia STRAP data that the softload & ROM flash tools need to poke into the ROMs on a per-machine basis. Previously the data was stored in the NVidia module, which would have caused complications with compressed ROM images.
  s/RAM, s/Top - Add compressed ROM & softload support. Softload code just skips some hardware initialisation and relocates the ROM to the high end of RAM.
Admin:
  Tested as Tungsten ROM softload only.
  For safety, compressed ROMs that have been burnt to ROM are required to be 4MB in size. This helps to simplify the ROM consistency checks and recovery code.
  Softloaded ROMs aren't subjected to the FlashCheck code and can be any size.


Version 0.37. Tagged as 'Tungsten-0_37'
@
text
@a17 1
        GET     Hdr:Machine.<Machine>
d21 2
d31 2
a39 1

d42 4
d47 1
a47 6
        EXPORT  ATA_Init
        EXPORT  HAL_ATAControllerInfo
        EXPORT  HAL_ATASetModes
        EXPORT  HAL_ATACableID

ATA_Init
d95 58
a152 2
HAL_ATAControllerInfo
        CMP     a1, #-1
d154 1
a154 1
        CMP     a1, #2
d158 3
a160 2
        Push    "a2,a3,v1-v5,lr"
        MOV     v5, a1                  ; v5 = Controller number
d230 1
a230 1
        Pull    "v1-v5,pc"
d233 2
a234 1
        Push    "a2,a3,v1,lr"
d255 1
a255 1
        Pull    "v1,pc"
d257 3
a259 3
DeviceDescr  = "Acer M5229 ATA controller bus master", 0
DeviceDescr0 = "Acer M5229 ATA controller bus master primary channel", 0
DeviceDescr1 = "Acer M5229 ATA controller bus master secondary channel", 0
d262 4
a265 2
HAL_ATASetModes
        CMP     a1, #2
d268 2
a269 1
        Push    "a2,a3,v1-v5,lr"
d271 3
a273 3
        MOV     v5, a1          ; v5=controller number
        MOV     v1, a2          ; v1->device 0 speed settings
        MOV     v2, a3          ; v2->device 1 speed settings
d387 1
a387 1
        LDMFD   sp!, {v1,v2}
d403 1
a403 1
        Pull    "v1-v5,pc"
d436 3
a438 2
HAL_ATACableID
        CMP     a1, #2
d441 3
a443 2
        Push    "v1,lr"
        ADD     v1, a1, #1              ; 0/1 => bit 0/bit 1
d451 1
a451 1
        Pull    "v1,pc"
@


1.5
log
@Added HAL devices for the sound system (controller and mixer). Requires
today's kernel to build. Required by today's SoundDMA and SoundControl in
order to function correctly at run-time.

Version 0.12. Tagged as 'Tungsten-0_12'
@
text
@a18 1
        GET     Hdr:ImageSize.<ImageSize>
@


1.4
log
@Random check in as it's been rather a long time and I don't trust
people's harddiscs.
Changes for DMA support (s.ATA)
Bug fix to HAL Counter info,it only worked if R0=0 on entry - spotted
by Dan Ellis
Power on <key held down> support in C.USBHAL and H.USBHAL
Reads the CMOS lock jumper
The beginnings of flash recovery code
Some code tidy ups and documentation updates

Version 0.11. Tagged as 'Tungsten-0_11'
@
text
@d156 1
a156 1
        MOV     a1, #HALDeviceID_DMAL_M1535IDE
d184 1
a184 1
        MOV     a2, #HALDeviceID_DMAC_M1535IDE
@


1.3
log
@  DMA changes.
Detail:
  * Extended HAL_ATAControllerInfo to return information for the creation of
    IDE bus mastering devices (to interface with the DMA Manager).
  * Removed some obsolete code from the M1535+ legacy DMA controller device,
    and changed it to use the ID codes exported from Kernel-5_35-4_79_2_54.
Admin:
  Tested on Tungsten.

Version 0.10. Tagged as 'Tungsten-0_10'
@
text
@d108 1
a108 1
        MOV     a1, #2_10               ; 32-bit PIO
d347 1
a347 1
;               Pulse time,recovery time (33MHz clocks)
d349 1
a349 1
        =       6,14    ; 180ns,420ns = 600ns cycle
d351 1
a351 1
        =       4,7     ; 120ns,210ns = 330ns cycle
d364 5
a368 1
        =       &0C, &05, &03, &33, &31
@


1.2
log
@ATA setup now extended to handle setting of multiword and Ultra DMA modes.
If the PCI-PCI bridge is the Intel 21154, Hint HB2 or Pericom device, then
it deactivates unused clock outputs, and assigns the PCI-PCI bridge and
super-IO chip to the high-priority arbiter group.

Version 0.08. Tagged as 'Tungsten-0_08'
@
text
@d24 1
d96 2
d105 1
a105 1
        SUB     sp, sp, #8*4            ; construct on stack
d153 11
d165 2
a166 2
        CMP     a3, #8*4
        MOVHI   a3, #8*4
d172 1
a172 1
        MOV     a1, #8*4                ; say how much we gave them
d174 29
@


1.1
log
@Initial check-in.

Version 0.01. Tagged as 'Tungsten-0_01'
@
text
@a160 7
PIO_Reg_Table
        =       &0C, &05, &03, &33, &31
PIO_Data_Table
        =       &6E, &58, &47, &33, &31
PIO_Addr_Table
        =       &03, &02, &01, &01, &01

d166 4
a169 3
        MOV     v5, a1
        MOV     v1, a2
        MOV     v2, a3
d171 1
a171 1
        MOV     v3, a1
d173 3
a175 2
        TEQ     v1, #0
        MOVEQ   v1, #&FF
d177 12
d190 2
a191 7
        STRB    lr, [v1, #5]
        STRB    lr, [v1, #6]
        LDRB    lr, [v1, #4]
        CMP     lr, #4
        MOVHI   lr, #4
        STRHIB  lr, [v1, #4]
        MOV     v1, lr
d193 8
a200 3
20      TEQ     v2, #0
        MOVEQ   v2, #&FF
        BEQ     %FT30
d202 3
a204 3
        STRB    lr, [v2, #5]
        STRB    lr, [v2, #6]
        LDRB    lr, [v2, #4]
d207 3
a209 3
        STRB    lr, [v2, #4]
        MOV     v2, lr
30
d211 7
a217 5
        TEQ     v1, #&FF
        ; Set data timing (device 0)
        ADR     a1, PIO_Data_Table
        LDRNEB  a4, [a1, v1]
        MOVEQ   a4, #&00
d220 2
a221 2
        MOV     a3, #&5A
        ADD     a3, a3, v5, LSL #2
d224 9
a232 2
        TEQ     v2, #&FF
        ; Set data timing (device 1)
d234 14
a247 2
        LDRNEB  a4, [a1, v2]
        MOVEQ   a4, #&00
d250 1
a250 1
        MOV     a3, #&5B
d253 7
a263 1
        TEQ     v1, #&FF
d266 1
a266 2
        LDRNEB  a4, [a1, v1]
        MOVEQ   a4, #&00
a272 1
        TEQ     v1, #&FF
d275 1
a275 2
        LDRNEB  a4, [a1, v1]
        MOVEQ   a4, #&00
d300 27
@

