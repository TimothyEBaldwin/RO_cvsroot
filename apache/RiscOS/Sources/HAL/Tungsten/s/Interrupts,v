head	1.10;
access;
symbols
	Tungsten-0_63:1.10
	Tungsten-0_62:1.10
	Tungsten-0_61:1.9
	Tungsten-0_60:1.8
	SMP:1.8.0.2
	SMP_bp:1.8
	Tungsten-0_59:1.8
	Tungsten-0_58:1.8
	Tungsten-0_57:1.8
	Tungsten-0_56:1.8
	Tungsten-0_55:1.8
	Tungsten-0_54:1.8
	Tungsten-0_53:1.8
	Tungsten-0_52:1.8
	Tungsten-0_51:1.8
	Tungsten-0_50:1.8
	Tungsten-0_49:1.8
	Tungsten-0_48:1.8
	Tungsten-0_47:1.8
	Tungsten-0_46:1.8
	Tungsten-0_45:1.8
	Tungsten-0_44:1.7
	Tungsten-0_43:1.6
	Tungsten-0_42:1.6
	Tungsten-0_41:1.6
	Tungsten-0_40:1.6
	Tungsten-0_39:1.6
	Tungsten-0_38:1.6
	Tungsten-0_37:1.6
	Tungsten-0_36:1.5
	Tungsten-0_35:1.5
	Tungsten-0_34:1.5
	Tungsten-0_33:1.5
	Tungsten-0_32:1.5
	Tungsten-0_31:1.5
	Tungsten-0_30:1.5
	Tungsten-0_29:1.5
	Tungsten-0_28:1.5
	Tungsten-Official514:1.4
	Tungsten-0_27:1.5
	Tungsten-0_26:1.5
	Tungsten-0_25:1.4
	Tungsten-0_24:1.4
	Tungsten-0_23:1.4
	Tungsten-0_22:1.4
	Tungsten-0_21:1.4
	Tungsten-0_20:1.4
	RO_5_07:1.4
	Tungsten-0_19:1.4
	Tungsten-0_18:1.4
	Tungsten-0_17:1.4
	Tungsten-0_16:1.4
	Tungsten-0_15:1.4
	Tungsten-0_14:1.4
	Tungsten-0_13:1.4
	Tungsten-0_12:1.3
	Tungsten-0_11:1.3
	Tungsten-0_10:1.3
	Tungsten-0_09:1.3
	Tungsten-0_08:1.2
	Tungsten-0_07:1.2
	Tungsten-0_06:1.2
	Tungsten-0_05:1.2
	Tungsten-0_04:1.1
	Tungsten-0_03:1.1
	Tungsten-0_02:1.1
	Tungsten-0_01:1.1;
locks; strict;
comment	@# @;


1.10
date	2018.02.19.20.13.52;	author jlee;	state Exp;
branches;
next	1.9;
commitid	yl7evcW5oUteBvrA;

1.9
date	2018.02.08.00.26.31;	author jlee;	state Exp;
branches;
next	1.8;
commitid	YMfT17CbT7cPnZpA;

1.8
date	2013.01.22.23.30.50;	author jlee;	state Exp;
branches;
next	1.7;
commitid	Q6Z3DTOeKB1EhgBw;

1.7
date	2012.10.20.18.15.56;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	xlAz6BiMg5SWy9pw;

1.6
date	2012.02.25.16.43.17;	author jlee;	state Exp;
branches;
next	1.5;
commitid	jZ2NTOmQjvfsHyUv;

1.5
date	2008.12.22.01.53.37;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.23.18.19.43;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.20.19.00.26;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.18.10.34.00;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.07.12.34.10;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Allow XScale core interrupts to be routed to FIQ
Detail:
  s/Interrupts - Update FIQ handling so that arbitrary XScale core interrupts can be routed to FIQ (previously, only IOMD FIQs were supported). This allows software such as HangWatch or fiqprof to operate on the Iyonix without using special-case code to configure the timer FIQ manually.
Admin:
  Tested on Iyonix


Version 0.62. Tagged as 'Tungsten-0_62'
@
text
@; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>

        GET     Hdr:OSEntries

        GET     hdr.StaticWS
        GET     hdr.80321

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  Interrupt_Init
        EXPORT  HAL_IRQEnable
        EXPORT  HAL_IRQDisable
        EXPORT  HAL_IRQSource
        EXPORT  HAL_IRQStatus
        EXPORT  HAL_FIQEnable
        EXPORT  HAL_FIQDisable
        EXPORT  HAL_FIQDisableAll
        EXPORT  HAL_FIQSource
        EXPORT  HAL_FIQStatus
        EXPORT  HAL_IRQMax


Interrupt_Init
        LDR     ip, PMMR_Address
        MOV     a1, #0
        WriteINTCTL a1                  ; mask all interrupts
        MOV     a1, #2_1111
        STR     a1, [ip, #ATU_PIRSR]    ; route XINT[0:3] to XScale core
        MOV     a1, #1:SHL:(Device_HPI-Device_80321_0)
        WriteINTSTR a1                  ; HPI to FIQ, rest to IRQ

        LDR     a2, PCI_IO_Address
        ADR     a3, PICInitTable
10      LDRB    a4, [a3], #1
        TEQ     a4, #0
        LDRNEB  a1, [a3], #1
        STRNEB  a1, [a2, a4]
        BNE     %BT10
        MOV     a1, #&FF
        STRB    a1, MasterPICMask
        STRB    a1, SlavePICMask
        ASSERT  Device_AC97 :AND: 15 = 1
        ASSERT  Device_ATA1 :AND: 15 = 3
        ASSERT  Device_ATA2 :AND: 15 = 4
        ASSERT  Device_USB1 :AND: 15 = 5
        ASSERT  Device_USB2 :AND: 15 = 6
        MOV     a1, #2_01111010         ; level sensitive for USB & ATA
        STRB    a1, [a2, #IO_MasterPICLevel]
        MOV     pc, lr

PICInitTable
        =       IO_MasterPIC+0, &11     ; Edge, cascade, ICW4
        =       IO_MasterPIC+1, &00     ; (interrupt vector address)
        =       IO_MasterPIC+1, &04     ; IR2 has a slave
        =       IO_MasterPIC+1, &01     ; 8086 mode, normal EOI
        =       IO_MasterPIC+1, &FF     ; mask everything
        =       IO_SlavePIC+0,  &11     ; Edge, cascade, ICW4
        =       IO_SlavePIC+1,  &00     ; (interrupt vector address)
        =       IO_SlavePIC+1,  &02     ; slave number 2
        =       IO_SlavePIC+1,  &01     ; 8086 mode, normal EOI
        =       IO_SlavePIC+1,  &FF     ; mask everything
        =       0
        ALIGN

HAL_IRQEnable
        MOV     ip, #1
        CMP     a1, #Device_80321_0
        BLO     HAL_IRQEnable_Extra
        MRS     a4, CPSR
        AND     a1, a1, #31
        MOV     ip, ip, LSL a1
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ReadINTCTL a1
        ORR     a2, a1, ip
        WriteINTCTL a2
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        MOV     pc, lr

HAL_IRQEnable_Extra
        CMP     a1, #Device_MPIC_0
        BHS     HAL_IRQEnable_PIC
        LDR     a2, IOMD_Address
        CMP     a1, #Device_IRQB_0
        AND     a1, a1, #7
        ADDHS   a2, a2, #IRQMSKB-IRQMSKA
        MOV     ip, ip, LSL a1
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        LDRB    a1, [a2, #IRQMSKA]
        ORR     a3, a1, ip
        STRB    a3, [a2, #IRQMSKA]
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        Push    "a1,lr"
        MOV     a1, #Device_IOMD
        BL      HAL_IRQEnable
        Pull    "a1,pc"

HAL_IRQEnable_PIC
        CMP     a1, #Device_SPIC_0
        AND     a1, a1, #7
        LDR     a2, PCI_IO_Address
        MOV     ip, ip, LSL a1
        BHS     HAL_IRQEnable_SlavePIC
        MRS     a4, CPSR
        ORR     a3, a4, #I32_bit
        MSR     CPSR_c, a3
        LDRB    a1, MasterPICMask
        BIC     a3, a1, ip
        TEQ     a3, a1
        STRNEB  a3, [a2, #IO_MasterPIC+1]
        STRNEB  a3, MasterPICMask
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        EOR     a1, a1, ip
        Push    "a1,lr"
        MOV     a1, #Device_PIC
        BL      HAL_IRQEnable
        Pull    "a1,pc"

HAL_IRQEnable_SlavePIC
        MRS     a4, CPSR
        ORR     a3, a4, #I32_bit
        MSR     CPSR_c, a3
        LDRB    a1, SlavePICMask
        BIC     a3, a1, ip
        TEQ     a3, a1
        STRNEB  a3, [a2, #IO_SlavePIC+1]
        STRNEB  a3, SlavePICMask
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        EOR     a1, a1, ip
        Push    "a1,lr"
        MOV     a1, #Device_SlavePIC
        BL      HAL_IRQEnable
        Pull    "a1,pc"

HAL_IRQDisable
        MOV     ip, #1
        CMP     a1, #Device_80321_0
        BLO     HAL_IRQDisable_Extra
 [ :LNOT:RevB
        TEQ     a1, #Device_XINT0
        BEQ     BadXINT0Mask
 ]
        AND     a1, a1, #31
        MRS     a4, CPSR
        MOV     ip, ip, LSL a1
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ReadINTCTL a1
        BIC     a2, a1, ip
        WriteINTCTL a2
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        MOV     pc, lr

 [ :LNOT:RevB
BadXINT0Mask
        LDR     a4, XINT0Masks
        ADD     a4, a4, #1
        STR     a4, XINT0Masks
        MOV     pc, lr
 ]

HAL_IRQDisable_Extra
        CMP     a1, #Device_MPIC_0
        BHS     HAL_IRQDisable_PIC
        LDR     a2, IOMD_Address
        CMP     a1, #Device_IRQB_0
        AND     a1, a1, #7
        ADDHS   a2, a2, #IRQMSKB-IRQMSKA
        MOV     ip, ip, LSL a1
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        LDRB    a1, [a2, #IRQMSKA]
        BIC     a3, a1, ip
        STRB    a3, [a2, #IRQMSKA]
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        MOV     pc, lr


HAL_IRQDisable_PIC
        CMP     a1, #Device_SPIC_0
        AND     a1, a1, #7
        LDR     a2, PCI_IO_Address
        MOV     ip, ip, LSL a1
        MRS     a4, CPSR
        ORR     a3, a4, #I32_bit
        MSR     CPSR_c, a3
        BHS     HAL_IRQDisable_SlavePIC
        LDRB    a1, MasterPICMask
        ORR     a3, a1, ip
        TEQ     a3, a1
        STRNEB  a3, [a2, #IO_MasterPIC+1]
        STRNEB  a3, MasterPICMask
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        EOR     a1, a1, ip
        MOV     pc, lr

HAL_IRQDisable_SlavePIC
        LDRB    a1, SlavePICMask
        ORR     a3, a1, ip
        TEQ     a3, a1
        STRNEB  a3, [a2, #IO_SlavePIC+1]
        STRNEB  a3, SlavePICMask
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        EOR     a1, a1, ip
        MOV     pc, lr

        ASSERT  Device_IRQB_0 > Device_IRQA_0
        ASSERT  Device_MPIC_0 > Device_IRQB_0
        ASSERT  Device_SPIC_0 > Device_MPIC_0
        ASSERT  Device_80321_0 > Device_SPIC_0

; Mickey-mouse prioritisation, but I get to use CLZ. Whoot.
HAL_IRQSource
        ReadIINTSRC a1
        CLZ     a1, a1
        RSB     a1, a1, #31 + Device_80321_0
 [ {TRUE}
        CMP     a1, #Device_80321_0 - 1
        BEQ     BadInt1
 ]
        TEQ     a1, #Device_IOMD
        MOVNE   pc, lr

        LDR     a4, IOMD_Address
        LDRB    a3, [a4, #IRQRQA]
        MOV     a2, #31 + Device_IRQA_0
        TEQ     a3, #0
        LDREQB  a3, [a4, #IRQRQB]
        MOVEQ   a2, #31 + Device_IRQB_0
        TEQ     a3, #0
        MOVEQ   pc, lr
        CLZ     a3, a3
        RSB     a1, a3, a2
        ; return IOMD address in R3 for compatibility
        TEQ     a1, #Device_PIC
        MOVNE   pc, lr

HAL_IRQSource_SuperIO
; Now read the Interrupt Request register of the PIC, and mask
; manually. This allows us to treat interrupts as level-sensitive,
; avoiding all the latching and servicing nonsense.
        LDR     a2, PCI_IO_Address
        LDRB    a3, MasterPICMask
        LDRB    a4, [a2, #IO_MasterPIC+0]
        BICS    a4, a4, a3
; If it claims it isn't interrupting, it's lying. We say "no interrupt"
; to prevent the OS masking anything. We may get re-entered until it
; shuts up.
        BEQ     BadInt3
        CLZ     a1, a4
        RSB     a1, a1, #31+Device_MPIC_0
        TEQ     a1, #Device_SlavePIC
        MOVNE   pc, lr
; Now check the slave PIC. Similarly, if it denies it, say "no
; interrupt".
        LDRB    a3, SlavePICMask
        LDRB    a4, [a2, #IO_SlavePIC+0]
        BICS    a4, a4, a3
        BEQ     BadInt4
        CLZ     a1, a4
        RSB     a1, a1, #31+Device_SPIC_0
        MOV     pc, lr

HAL_IRQStatus
        MOV     ip, #1
        CMP     a1, #Device_80321_0
        BLO     HAL_IRQStatus_Extra
        AND     a1, a1, #31
        MOV     a1, ip, LSL a1
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ReadINTCTL ip
        MOV     a2, #-1
        WriteINTCTL a2          ; Unmask all
        ReadIINTSRC a2          ; Read source
        WriteINTCTL ip          ; Put mask back
        MSR     CPSR_c, a4
        AND     a1, a1, a2
        MOV     pc, lr

HAL_IRQStatus_Extra
        CMP     a1, #Device_MPIC_0
        BHS     HAL_IRQStatus_PIC
        LDR     a2, IOMD_Address
        CMP     a1, #Device_IRQB_0
        ADDHS   a2, a2, #IRQSTB-IRQSTA
        AND     a1, a1, #7
        LDRB    a3, [a2, #IRQSTA]
        AND     a1, a3, ip, LSL a1
        MOV     pc, lr

HAL_IRQStatus_PIC
        LDR     a2, PCI_IO_Address
        CMP     a1, #Device_SPIC_0
        AND     a1, a1, #7
        ADDHS   a2, a2, #IO_SlavePIC-IO_MasterPIC
        LDRB    a2, [a2, #IO_MasterPIC]
        AND     a1, a2, ip, LSL a1
        MOV     pc, lr


BadInt1 ADR     a3, SpuriousIRQs1
        B       BadInt
BadInt2 ADR     a3, SpuriousIRQs2
        B       BadInt
BadInt3 ADR     a3, SpuriousIRQs3
        B       BadInt
BadInt4 ADR     a3, SpuriousIRQs4
BadInt  LDR     a4, [a3]
        MOV     a1, #-1
        ADD     a4, a4, #1
        STR     a4, [a3]
        MOV     pc, lr

HAL_FIQEnable
        CMP     a1, #Device_80321_0
        MOV     ip, #1
        BHS     HAL_FIQEnable_Core
        LDR     a4, IOMD_Address
        MRS     a3, CPSR
        MOV     ip, ip, LSL a1
        ORR     a2, a3, #F32_bit+I32_bit
        MSR     CPSR_c, a2
        LDRB    a1, [a4, #FIQMSK]
        ORR     a2, a1, ip
        STRB    a2, [a4, #FIQMSK]
        MSR     CPSR_c, a3
        AND     a1, a1, ip
        MOV     pc, lr

HAL_FIQEnable_Core
        MRS     a4, CPSR
        AND     a1, a1, #31
        MOV     ip, ip, LSL a1
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ReadINTSTR a2
        ORR     a2, a2, ip
        WriteINTSTR a2
        ReadINTCTL a1
        ORR     a2, a1, ip
        WriteINTCTL a2
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        MOV     pc, lr

HAL_FIQDisable
        CMP     a1, #Device_80321_0
        MOV     ip, #1
        BHS     HAL_FIQDisable_Core
        LDR     a4, IOMD_Address
        MRS     a3, CPSR
        MOV     ip, ip, LSL a1
        ORR     a2, a3, #F32_bit+I32_bit
        MSR     CPSR_c, a2
        LDRB    a1, [a4, #FIQMSK]
        BIC     a2, a1, ip
        STRB    a2, [a4, #FIQMSK]
        MSR     CPSR_c, a3
        AND     a1, a1, ip
        MOV     pc, lr

HAL_FIQDisable_Core
        MRS     a4, CPSR
        AND     a1, a1, #31
        MOV     ip, ip, LSL a1
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ReadINTSTR a2
        BIC     a2, a2, ip
        WriteINTSTR a2
        ReadINTCTL a1
        BIC     a2, a1, ip
        WriteINTCTL a2
        MSR     CPSR_c, a4
        AND     a1, a1, ip
        MOV     pc, lr

HAL_FIQDisableAll
        ; Disable IOMD FIQs
        LDR     a4, IOMD_Address
        MOV     a1, #0
        STRB    a1, [a4, #FIQMSK]
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ; Disable any other FIQs
        ReadINTSTR a2
        BICS    a2, a2, #1:SHL:(Device_HPI-Device_80321_0)
        BEQ     %FT90
        ReadINTCTL a3
        BIC     a3, a3, a2
        WriteINTCTL a3
        MOV     a2, #1:SHL:(Device_HPI-Device_80321_0)
        WriteINTSTR a2
90
        MSR     CPSR_c, a4
        MOV     pc, lr

HAL_FIQStatus
        MOV     ip, #1
        CMP     a1, #Device_80321_0
        BHS     HAL_FIQStatus_Core
        LDR     a4, IOMD_Address
        LDRB    a2, [a4, #FIQST]
        AND     a1, a2, ip, LSL a1
        MOV     pc, lr

HAL_FIQStatus_Core
        AND     a1, a1, #31
        MOV     a1, ip, LSL a1
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ReadINTCTL ip
        MOV     a2, #-1
        WriteINTCTL a2          ; Unmask all
        ReadIINTSRC a2          ; Read source
        ReadFINTSRC a3          ; Check FIQ as well, in case it's routed to that
        WriteINTCTL ip          ; Put mask back
        MSR     CPSR_c, a4
        ORR     a2, a2, a3
        AND     a1, a1, a2
        MOV     pc, lr

HAL_FIQSource
        ReadFINTSRC a1
        TST     a1, #1:SHL:(Device_HPI-Device_80321_0)
        CLZEQ   a1, a1
        RSBEQ   a1, a1, #31 + Device_80321_0
        MOVEQ   pc, lr
        LDR     a4, IOMD_Address
        LDRB    a1, [a4, #FIQRQ]
        CLZ     a1, a1
        RSB     a1, a1, #31
        MOV     pc, lr

HAL_IRQMax
        MOV     a1, #64
        MOV     pc, lr

        END
@


1.9
log
@Implement HAL_TimerIRQClear
Detail:
  s/Timers - Implement HAL_TimerIRQClear
  s/Interupts - Remove HAL_IRQClear implementation, since clearing the timer interrupts was the only thing it did. Remove empty HAL_FIQClear as well.
  s/Boot - NOP out HAL_IRQClear & HAL_FIQClear entry points. Hook up HAL_TimerIRQClear entry point.
Admin:
  Tested on Iyonix


Version 0.61. Tagged as 'Tungsten-0_61'
@
text
@d345 3
a348 1
        MOV     ip, #1
d360 16
d377 3
a380 1
        MOV     ip, #1
d392 16
d409 1
d413 14
d430 3
a433 1
        MOV     ip, #1
d438 17
d456 5
@


1.8
log
@Implement HAL_IRQMax
Detail:
  s/Boot, s/Interrupts - Added HAL_IRQMax implementation, to ensure correct functionality with latest Kernel
Admin:
  Tested in Iyonix ROM softload
  Requires Kernel-5_35-4_79_2_182


Version 0.45. Tagged as 'Tungsten-0_45'
@
text
@a29 1
        EXPORT  HAL_IRQClear
a34 1
        EXPORT  HAL_FIQClear
a234 13
; FFS - get this sorted
HAL_IRQClear
        TEQ     a1, #Device_Timer0
        TEQNE   a1, #Device_Timer1
        BEQ     HAL_IRQClear_Timer
        MOV     pc, lr

HAL_IRQClear_Timer
        ASSERT  Device_Timer1 = Device_Timer0 + 1
        SUB     a1, a1, #Device_Timer0 - 1              ; 1 or 2
        WriteTISR a1
        MOV     pc, lr

a377 3
HAL_FIQClear
        MOV     pc, lr

@


1.7
log
@Fix to HAL_FIQEnable and HAL_FIQDisable
Interrupts.s
 A typo meant that any attempt to enable FIQs actually OR'd the mask register with the temporary PSR value. To add to the woes this PSR value has I32 and F32 set, which means the bit 7 (software generated FIQ) was getting enabled.
Mirrors change in IOMD-0_19, though as this bug seems to have been there since inception it would seem nothing much uses FIQs on Tungsten.


Version 0.44. Tagged as 'Tungsten-0_44'
@
text
@d39 1
d410 4
@


1.6
log
@Add compressed ROM support. Make softload-aware.
Detail:
  hdr/Post, s/FlashProg - Add sizeofROM definition, for expected size of compressed ROM/physical ROM chip. Used to replace references to OSROM_ImageSize throughout the code.
  s/ATA, s/Boot, s/Debug, s/DebugPCI, s/IIC, s/Interrupts, s/MSI, s/NVMemory, s/Timers, s/Top, s/UART - Removed unnecessary GETs of Hdr:ImageSize.<ImageSize>
  s/Boot, s/Video - Add a new 'Tungsten video' HAL device, for storing the NVidia STRAP data that the softload & ROM flash tools need to poke into the ROMs on a per-machine basis. Previously the data was stored in the NVidia module, which would have caused complications with compressed ROM images.
  s/RAM, s/Top - Add compressed ROM & softload support. Softload code just skips some hardware initialisation and relocates the ROM to the high end of RAM.
Admin:
  Tested as Tungsten ROM softload only.
  For safety, compressed ROMs that have been burnt to ROM are required to be 4MB in size. This helps to simplify the ROM consistency checks and recovery code.
  Softloaded ROMs aren't subjected to the FlashCheck code and can be any size.


Version 0.37. Tagged as 'Tungsten-0_37'
@
text
@d366 1
a366 1
        ORR     a2, a2, ip
d380 1
a380 1
        BIC     a2, a2, ip
@


1.5
log
@  Fixed a few bugs in the interrupt code I noticed in passing.
Detail:
  * HAL_IRQStatus would always return 0 for 80321 devices
  * HAL_FIQEnable/HAL_FIQDisable got their maths wrong and adjusted an
    unhelpful bit pattern of device enable flags in the FIQ controller
Admin:
  Not tested

Version 0.26. Tagged as 'Tungsten-0_26'
@
text
@a18 1
        GET     Hdr:ImageSize.<ImageSize>
@


1.4
log
@Kevin's new PCI enumeration C.
Kevin's UART control for DualSerial to talk to.
Completion of flash recovery stuff - it now flashes the floppy drive
light appropriately then requests a new OS image down the serial port
but is careful never to erase itself.To allow this has required some
shuffling to ensure the first 8k of binary is fixed and makes no
external calls - "s.Top" arranges this and effectively moves the
HAL up 8k in ROM.

Version 0.13. Tagged as 'Tungsten-0_13'
@
text
@d311 1
d363 1
a363 1
        MOV     ip, a1, LSL ip
d377 1
a377 1
        MOV     ip, a1, LSL ip
@


1.3
log
@Bugfixes:
* XINT0 could not be masked using HAL_IRQDisable() (a hangover from a
  RevA hardware workaround)
* SlotTablePrototype wasn't correct

Version 0.09. Tagged as 'Tungsten-0_09'
@
text
@a24 1
;        GET     hdr.Video
@


1.2
log
@Change to new IIC address
Uncommented HAL_SuperIOInfo,fixes bug report of ReadSysInfo 3
returning garbled R0.
Misc other serial port changes.

Version 0.05. Tagged as 'Tungsten-0_05'
@
text
@d165 1
d168 1
d181 1
d187 1
@


1.1
log
@Initial check-in.

Version 0.01. Tagged as 'Tungsten-0_01'
@
text
@d51 1
@

