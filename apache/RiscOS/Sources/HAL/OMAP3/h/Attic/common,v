head	1.3;
access;
symbols
	OMAP3-0_55:1.2
	OMAP3-0_54:1.2
	OMAP3-0_53:1.2
	OMAP3-0_52:1.2
	OMAP3-0_51:1.2
	OMAP3-0_50:1.2
	OMAP3-0_49:1.1
	OMAP3-0_48:1.1
	OMAP3-0_47:1.1
	OMAP3-0_46:1.1
	OMAP3-0_45:1.1
	OMAP3-0_44:1.1
	OMAP3-0_43:1.1
	OMAP3-0_42:1.1
	OMAP3-0_41:1.1
	OMAP3-0_40:1.1
	OMAP3-0_39:1.1
	OMAP3-0_38:1.1;
locks; strict;
comment	@# @;


1.3
date	2012.01.07.21.22.19;	author rsprowson;	state dead;
branches;
next	1.2;
commitid	ZJYg3muaiybPOhOv;

1.2
date	2011.11.06.13.51.33;	author jlee;	state Exp;
branches;
next	1.1;
commitid	xDHSfy5FwWIFjhGv;

1.1
date	2011.01.23.22.48.14;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Prep for SDFS and support for hardware CMOS adapter board.
To avoid conflicting use of the SDIO controller by higher level filing system (and the need for a HAL to somehow ask for a disc to be reinserted) this HAL onwards supports hardware CMOS attached via the JTAG connector.
On power up the presence and size of EEPROM is detected (sizes from 256 to 2048 bytes are understood corresponding to 24AA02 to 24AA16 family of parts).
If no EEPROM is found the HAL falls back to permitting a CMOS file to be loaded off the SD card, but crucially this is done by uboot before FileCore starts.
If no EEPROM is found, or the CMOS file looks suspicious, some fake CMOS is made and the kernel defaults used.
The "ProbeEESize" switch enables size probing, otherwise 256 bytes is assumed.
The "TryLoadedCMOS" switch enables use of a CMOS file from the SD card, if that's off and nothing is found the HAL declares that there is no CMOS at all!
The respective boot script needs the line
  fatload mmc 0:1 0x4020F000 cmos
adding to it, though the filename 'cmos' is arbitrary and only used as a suggestion.

Version 0.56. Tagged as 'OMAP3-0_56'
@
text
@/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdbool.h>
#include <string.h>

__global_reg(6) void *sb;

typedef unsigned int uint;
typedef unsigned short ushort;
typedef unsigned char uchar;

typedef union data_area
{
  unsigned int word[128];
  unsigned char byte[512];
} data_area;

typedef struct block_cache
{
  int blocknum;
  union data_area da;
} block_cache;

typedef struct
{
  // NOTE - THIS STRUCT MUST BE IDENTICAL TO THE
  // NVMem_workspace DECLARATION IN StaticWS
  volatile uint* PRCM_CM_ICLKEN1_CORE;
  volatile uint* PRCM_CM_FCLKEN1_CORE;
  volatile uint* MMCHS1_SYSCONFIG;
  volatile uint* MMCHS1_SYSSTATUS;
  volatile uint* MMCHS1_CSRE;
  volatile uint* MMCHS1_SYSTEST;
  volatile uint* MMCHS1_CON;
  volatile uint* MMCHS1_PWCNT;
  volatile uint* MMCHS1_BLK;
  volatile uint* MMCHS1_ARG;
  volatile uint* MMCHS1_CMD;
  volatile uint* MMCHS1_RSP10;
  volatile uint* MMCHS1_RSP32;
  volatile uint* MMCHS1_RSP54;
  volatile uint* MMCHS1_RSP76;
  volatile uint* MMCHS1_DATA;
  volatile uint* MMCHS1_PSTATE;
  volatile uint* MMCHS1_HCTL;
  volatile uint* MMCHS1_SYSCTL;
  volatile uint* MMCHS1_STAT;
  volatile uint* MMCHS1_IE;
  volatile uint* MMCHS1_ISE;
  volatile uint* MMCHS1_AC12;
  volatile uint* MMCHS1_CAPA;
  volatile uint* MMCHS1_CUR;
  volatile uint* MMCHS1_REV;
  uint  CardType;
  uint  volume_base;
  uint  BPB_BytsPerSec;
  uint  BPB_SecPerClus;
  uint  bytespercluster;
  uint  BPB_RsvdSecCnt;
  uint  offset_to_FAT1;
  uint  BPB_NumFATs;
  uint  BPB_RootEntCnt;
  uint  BPB_TotSec16;
  uint  RootDirSectors;
  uint  BPB_FATSz16;
  uint  BPB_FATSz32;
  uint  FATSz;
  uint  offset_to_root_dir;
  uint  BPB_TotSec32;
  uint  TotSec;
  uint  DataSec;
  uint  CountOfClusters;
  uint  cluster0base;
  uint  BPB_RootClus;
  uint  bytesperFATentry;
  uint  FirstDataSector;
  uint  FATType;
  uint  BootDollarOSVersion;
  uchar NVRAMCache[2048];
} ws;

typedef struct RTCTime
{
  uchar Centiseconds;
  uchar Seconds;
  uchar Minutes;
  uchar Hours;
  uchar DayOfMonth;
  uchar Month;
  uchar YearLow;
  uchar YearHigh;
} RTCTime;

#define FATTYPE_UNKNOWN 0
#define FATTYPE_FAT12   1
#define FATTYPE_FAT16   2
#define FATTYPE_FAT32   3

#define CARDTYPE_UNKNOWN 0
#define CARDTYPE_SD      1
#define CARDTYPE_SDHC    2
#define CARDTYPE_MMC     3

#define uintMin(a, b) (a < b ? a : b)

//#define DEBUG_ENABLED /* Global debug switch */

#ifdef DEBUG_ENABLED
  #define dprintf printf
#else
  #define dprintf(...) {}
#endif

@


1.2
log
@Add Dave Higton's CMOS save code
Detail:
  Makefile - fixed warning about StdRules being included twice (via CModule)
  c/NVMem, c/fat, h/NVMem, h/common, h/fat, hdr/StaticWS, s/NVMemory, s/RTC - Added Dave Higton's code to create/update the 'CMOS' file on NVRAM writes
Admin:
  Tested on rev A2 BB-xM


Version 0.50. Tagged as 'OMAP3-0_50'
@
text
@@


1.1
log
@Add Dave Higton's SD/MMC & CMOS code
Detail:
  c/NVMem, c/fat, h/NVMem, h/common, h/fat - C code for reading a 'CMOS' file off the SD card on boot, for use as a CMOS RAM image
  c/CLib - Added extra functions needed by the SD/MMC driver
  s/NVMemory - Implementation of the HAL NVRAM API, for reading/writing the loaded CMOS file. The read/write functions handle RISC OS's CMOS address mangling, so that CMOS files saved by *SaveCMOS can be used as-is.
  hdr/StaticWS - Updated with workspace needed by the new code
  s/Boot - Initialise the CMOS cache on boot
  s/Stubs - Removed the stub NVRAM function
  Makefile - Added the new files
Admin:
  Tested on rev A2 BB-xM.


Version 0.38. Tagged as 'OMAP3-0_38'
@
text
@d22 1
d29 7
a35 1
}data_area;
d91 1
d95 12
d117 2
@

