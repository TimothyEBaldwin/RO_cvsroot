head	1.4;
access;
symbols
	OMAP3-0_55:1.3
	OMAP3-0_54:1.3
	OMAP3-0_53:1.3
	OMAP3-0_52:1.2
	OMAP3-0_51:1.2
	OMAP3-0_50:1.2
	OMAP3-0_49:1.1
	OMAP3-0_48:1.1
	OMAP3-0_47:1.1
	OMAP3-0_46:1.1
	OMAP3-0_45:1.1
	OMAP3-0_44:1.1
	OMAP3-0_43:1.1
	OMAP3-0_42:1.1
	OMAP3-0_41:1.1
	OMAP3-0_40:1.1
	OMAP3-0_39:1.1
	OMAP3-0_38:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.01.07.21.22.19;	author rsprowson;	state dead;
branches;
next	1.3;
commitid	ZJYg3muaiybPOhOv;

1.3
date	2011.12.06.00.53.09;	author jlee;	state Exp;
branches;
next	1.2;
commitid	GOsa7uJEOvnW24Kv;

1.2
date	2011.11.06.13.51.32;	author jlee;	state Exp;
branches;
next	1.1;
commitid	xDHSfy5FwWIFjhGv;

1.1
date	2011.01.23.22.48.14;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Prep for SDFS and support for hardware CMOS adapter board.
To avoid conflicting use of the SDIO controller by higher level filing system (and the need for a HAL to somehow ask for a disc to be reinserted) this HAL onwards supports hardware CMOS attached via the JTAG connector.
On power up the presence and size of EEPROM is detected (sizes from 256 to 2048 bytes are understood corresponding to 24AA02 to 24AA16 family of parts).
If no EEPROM is found the HAL falls back to permitting a CMOS file to be loaded off the SD card, but crucially this is done by uboot before FileCore starts.
If no EEPROM is found, or the CMOS file looks suspicious, some fake CMOS is made and the kernel defaults used.
The "ProbeEESize" switch enables size probing, otherwise 256 bytes is assumed.
The "TryLoadedCMOS" switch enables use of a CMOS file from the SD card, if that's off and nothing is found the HAL declares that there is no CMOS at all!
The respective boot script needs the line
  fatload mmc 0:1 0x4020F000 cmos
adding to it, though the filename 'cmos' is arbitrary and only used as a suggestion.

Version 0.56. Tagged as 'OMAP3-0_56'
@
text
@/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
int NVMem_C_read (ws* wsptr);
int NVMem_C_write (ws* wsptr);
int InterfaceAndCard_Init (ws* wsptr);
uint GetUInt (const union data_area *da, uint uiOfs);
uint GetUShort (const union data_area *da, uint uiOfs);
void PutUInt (uint val, union data_area* da, uint uiOfs);
void PutUShort (uint val, union data_area* da, uint uiOfs);
bool ReadBlockAbsolute (ws* wsptr, uint uiBlockNum, union data_area* da);
bool ReadBlockOfPartition (ws* wsptr, uint uiBlockNum, union data_area* da);
bool WriteBlockAbsolute (ws* wsptr, uint uiBlockNum, union data_area* da);
bool WriteBlockOfPartition (ws* wsptr, uint uiBlockNum, union data_area* da);
bool WaitForDataReady (ws* wsptr);
bool WaitForWriteBufferReady (ws* wsptr);
void print_block_data (union data_area* da);
void WaitForCMDI (ws* wsptr);
void SoftwareResetCMDLine (ws* wsptr);
int SendSDMMCCommand (ws* wsptr, uint uiCmd);
uint get_bitfield (uint value, uint bitnum, uint numbits);
uint set_bitfield (uint value, uint bitnum, uint numbits, uint bitfield);
uint read_and_clear_stat (ws* wsptr);
void change_clock_divider (ws* wsptr, uint uiRatio);
void GetDOSDateAndTimeFromRTC (uint* DatePtr, uint* TimePtr);
uchar BCD2Bin(uchar uc);
@


1.3
log
@NVMem tweaks and fixes
Detail:
  c/fat - Fixed ReadRootDirectoryBlock and WriteRootDirectoryBlock when dealing with FAT32 cards
  c/NVMem - Ensure FATbc.blocknum is initialised to an invalid value inside NVMem_C_write
  c/NVMem, c/far, h/NVMem - Change GetUInt() and GetUShort() to take data_area pointers instead of passing by reference, to reduce stack thrashing
Admin:
  Tested on rev A2 BB-xM
  Fixes supplied by Willi Theiss


Version 0.53. Tagged as 'OMAP3-0_53'
@
text
@@


1.2
log
@Add Dave Higton's CMOS save code
Detail:
  Makefile - fixed warning about StdRules being included twice (via CModule)
  c/NVMem, c/fat, h/NVMem, h/common, h/fat, hdr/StaticWS, s/NVMemory, s/RTC - Added Dave Higton's code to create/update the 'CMOS' file on NVRAM writes
Admin:
  Tested on rev A2 BB-xM


Version 0.50. Tagged as 'OMAP3-0_50'
@
text
@d18 2
a19 2
uint GetUInt (union data_area da, uint uiOfs);
uint GetUShort (union data_area da, uint uiOfs);
@


1.1
log
@Add Dave Higton's SD/MMC & CMOS code
Detail:
  c/NVMem, c/fat, h/NVMem, h/common, h/fat - C code for reading a 'CMOS' file off the SD card on boot, for use as a CMOS RAM image
  c/CLib - Added extra functions needed by the SD/MMC driver
  s/NVMemory - Implementation of the HAL NVRAM API, for reading/writing the loaded CMOS file. The read/write functions handle RISC OS's CMOS address mangling, so that CMOS files saved by *SaveCMOS can be used as-is.
  hdr/StaticWS - Updated with workspace needed by the new code
  s/Boot - Initialise the CMOS cache on boot
  s/Stubs - Removed the stub NVRAM function
  Makefile - Added the new files
Admin:
  Tested on rev A2 BB-xM.


Version 0.38. Tagged as 'OMAP3-0_38'
@
text
@d16 2
d20 2
d24 2
d27 1
d36 2
@

