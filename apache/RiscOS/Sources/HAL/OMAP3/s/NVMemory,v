head	1.7;
access;
symbols
	OMAP3-1_18:1.7
	OMAP3-1_17:1.7
	OMAP3-1_16:1.7
	OMAP3-1_15:1.7
	OMAP3-1_14:1.7
	SMP:1.7.0.2
	SMP_bp:1.7
	OMAP3-1_13:1.7
	OMAP3-1_12:1.7
	OMAP3-1_11:1.7
	OMAP3-1_10:1.7
	OMAP3-1_09:1.7
	OMAP3-1_08:1.7
	OMAP3-1_07:1.7
	OMAP3-1_06:1.7
	OMAP3-1_05:1.7
	OMAP3-1_04:1.7
	OMAP3-1_03:1.7
	OMAP3-1_02:1.7
	OMAP3-1_01:1.7
	OMAP3-1_00:1.7
	OMAP3-0_99:1.7
	OMAP3-0_98:1.7
	OMAP3-0_97:1.7
	OMAP3-0_96:1.7
	OMAP3-0_95:1.7
	OMAP3-0_94:1.7
	OMAP3-0_93:1.7
	OMAP3-0_92:1.7
	OMAP3-0_91:1.7
	OMAP3-0_90:1.7
	OMAP3-0_89:1.7
	OMAP3-0_88:1.7
	OMAP3-0_87:1.6
	OMAP3-0_86:1.5
	OMAP3-0_85:1.5
	OMAP3-0_84:1.5
	OMAP3-0_83:1.5
	OMAP3-0_82:1.5
	OMAP3-0_81:1.5
	OMAP3-0_80:1.5
	OMAP3-0_79:1.5
	OMAP3-0_78:1.5
	OMAP3-0_77:1.5
	OMAP3-0_76:1.5
	OMAP3-0_75:1.5
	OMAP3-0_74:1.5
	OMAP3-0_73:1.5
	OMAP3-0_72:1.5
	OMAP3-0_71:1.5
	OMAP3-0_70:1.5
	OMAP3-0_69:1.5
	OMAP3-0_68:1.5
	OMAP3-0_67:1.5
	OMAP3-0_66:1.5
	OMAP3-0_65:1.5
	OMAP3-0_64:1.5
	OMAP3-0_63:1.5
	OMAP3-0_62:1.5
	OMAP3-0_61:1.5
	OMAP3-0_60:1.5
	OMAP3-0_59:1.5
	OMAP3-0_58:1.4
	OMAP3-0_57:1.4
	OMAP3-0_56:1.4
	OMAP3-0_55:1.3
	OMAP3-0_54:1.3
	OMAP3-0_53:1.2
	OMAP3-0_52:1.2
	OMAP3-0_51:1.2
	OMAP3-0_50:1.2
	OMAP3-0_49:1.1
	OMAP3-0_48:1.1
	OMAP3-0_47:1.1
	OMAP3-0_46:1.1
	OMAP3-0_45:1.1
	OMAP3-0_44:1.1
	OMAP3-0_43:1.1
	OMAP3-0_42:1.1
	OMAP3-0_41:1.1
	OMAP3-0_40:1.1
	OMAP3-0_39:1.1
	OMAP3-0_38:1.1;
locks; strict;
comment	@# @;


1.7
date	2013.08.17.13.13.54;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	sIqq7KO5sExsdO1x;

1.6
date	2013.08.15.13.39.58;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	lNtJbslyvHNmqy1x;

1.5
date	2012.02.25.16.28.11;	author jlee;	state Exp;
branches;
next	1.4;
commitid	8PdHKiULlWJhCyUv;

1.4
date	2012.01.07.21.22.24;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	ZJYg3muaiybPOhOv;

1.3
date	2011.12.11.20.05.49;	author jlee;	state Exp;
branches;
next	1.2;
commitid	qwIOyJsuN21ngOKv;

1.2
date	2011.11.06.13.51.46;	author jlee;	state Exp;
branches;
next	1.1;
commitid	xDHSfy5FwWIFjhGv;

1.1
date	2011.01.23.22.48.21;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Probe earlier, declare device later
Revision 0.87 moved the NVMemory probe too late for the kernel, which fell back to using its default table.
Fixes problem of apparently lost configuration
  http://www.riscosopen.org/forum/forums/4/topics/2063
Video_Init capitalised like the other initialisation functions.

Version 0.88. Tagged as 'OMAP3-0_88'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; NVMemory functions

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     hdr.omap3530
        GET     hdr.StaticWS
        GET     hdr.GPIO

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  NVMemory_Init
        EXPORT  NVMemory_InitDevice
        EXPORT  HAL_NVMemoryType
        EXPORT  HAL_NVMemorySize
        EXPORT  HAL_NVMemoryPageSize
        EXPORT  HAL_NVMemoryProtectedSize
        EXPORT  HAL_NVMemoryProtection
        EXPORT  HAL_NVMemoryRead
        EXPORT  HAL_NVMemoryWrite

        IMPORT  memcpy
        IMPORT  HAL_CounterDelay

        ; Autodetect the EEPROM at runtime in the range 2kbit to 16kbit
        GBLL    ProbeEESize
ProbeEESize     SETL {TRUE}

        ; If no EEPROM found, permit FAT loaded CMOS image in SRAM by u-boot
        GBLL    TryLoadedCMOS
TryLoadedCMOS   SETL {TRUE}

        ; Assume u-boot loads at the top of the internal SRAM
        ASSERT  BoardConfig_Size <= &F000
                ^ 0
                # &F000
FATLoadedCMOS   # 2048 + 4

EE_Read_Addr    * 2_10100001
EE_Write_Addr   * 2_10100000
EE_SCL_Line     * 31       ; SCL on EMU1 on GPIO31
EE_SDA_Line     * 11       ; SDA on EMU0 on GPIO11
EE_Clock_Speed  * 10       ; microseconds

        MACRO
        SCLLow
        ; Actively drive low
        GPIO_SetOutput0  v1, v2
        MOV     a1, #EE_Clock_Speed:SHR:1
        BL      HAL_CounterDelay
        MEND

        MACRO
        SCLHigh
        ; Actively drive high
        GPIO_SetOutput1  v1, v2
        MOV     a1, #EE_Clock_Speed:SHR:1
        BL      HAL_CounterDelay
        MEND

        MACRO
        SDALow
        ; Actively drive low
        GPIO_SetOutput0  v1, v3
        GPIO_SetAsOutput v1, v3, a4
        MOV     a1, #EE_Clock_Speed:SHR:1
        BL      HAL_CounterDelay
        MEND

        MACRO
        SDAHigh
        ; Float high
        GPIO_SetAsInput  v1, v3, a4
        MOV     a1, #EE_Clock_Speed:SHR:1
        BL      HAL_CounterDelay
        MEND

HAL_NVMemoryType
        LDR     a2, NVMemoryFound
        TEQ     a2, #0
        MOV     a1, #NVMemoryFlag_HAL
        ORR     a1, a1, #NVMemoryFlag_LowRead :OR: NVMemoryFlag_LowWrite
      [ :LNOT: TryLoadedCMOS
        ; There's nothing, not even fake CMOS
        MOVEQ   a1, #NVMemoryFlag_None
      ]
        MOV     pc, lr

HAL_NVMemorySize
        LDR     a1, NVMemoryFound
      [ TryLoadedCMOS
        ; Pretend there is some
        TEQ     a1, #0
        MOVEQ   a1, #?FATLoadedCMOS:AND:&FF00
      ]
        MOV     pc, lr

HAL_NVMemoryPageSize
        MOV     a1, #16    ; Try it the same size as the original
        MOV     pc, lr

HAL_NVMemoryProtectedSize
        MOV     a1, #0     ; No protected memory
        MOV     pc, lr

HAL_NVMemoryProtection
        MOV     pc, lr     ; No memory protection, nothing to do

HAL_NVMemoryRead
        ; In:  a1 = physical address
        ;      a2 = destination buffer
        ;      a3 = count
        ; Out: a1 = number of bytes read
        Push    "v1-v4, lr"
        MOV     v1, a1
        MOV     v2, a2
        MOV     v3, a3
        MOV     v4, #0     ; Bytes read
10
        LDR     a3, NVMemoryFound
        TEQ     a3, #0

        ADD     a1, v1, v4
      [ TryLoadedCMOS
        LDREQ   a3, IntSRAM_Log
        ADDEQ   a3, a3, #:INDEX:FATLoadedCMOS
        LDREQB  a1, [a3, a1]
      |
        MOVEQ   a1, #-1
      ]
        BLNE    NVMemory_BGet
        CMP     a1, #-1
        STRNEB  a1, [v2], #1
        ADDNE   v4, v4, #1
        SUBNES  v3, v3, #1
        BNE     %BT10

        MOV     a1, v4
        Pull    "v1-v4, pc"

HAL_NVMemoryWrite
        ; In:  a1 = physical address
        ;      a2 = source buffer
        ;      a3 = count
        ; Out: a1 = number of bytes written
        Push    "v1-v4, lr"
        MOV     v1, a1
        MOV     v2, a2
        MOV     v3, a3
        MOV     v4, #0     ; Bytes written
10
        LDR     a3, NVMemoryFound
        TEQ     a3, #0

        ADD     a1, v1, v4
        LDRB    a2, [v2], #1
      [ TryLoadedCMOS
        LDREQ   a3, IntSRAM_Log
        ADDEQ   a3, a3, #:INDEX:FATLoadedCMOS
        STREQB  a2, [a3, a1]
        MOVEQ   a1, #0     ; Success
      |
        MOVEQ   a1, #-1
      ]
        BLNE    NVMemory_BPut
        CMP     a1, #-1
        ADDNE   v4, v4, #1
        SUBNES  v3, v3, #1
        BNE     %BT10

        MOV     a1, v4
        Pull    "v1-v4, pc"

NVMemory_Init
        Push    "v1-v3, lr"

        ; Read DSCR to check if ARM debugging is enabled
        ; This is the best method we have of working out if a JTAG cable is
        ; connected?
        MRC     p14, 0, a1, c0, c1, 0
        TST     a1, #&c000 ; Check halting debug & monitor debug enable bits
        MOVNE   a1, #-1
        BNE     %FT05
        
        ; Set EMU0 and EMU1 as bidir GPIO with no pullups
        ; nor off state nor wakeup
        LDR     a1, L4_Core_Log
        ADD     a1, a1, #&2A00
        ADD     a1, a1, #&0024
        LDR     a2, =&01040104
        STR     a2, [a1]   ; CONTROL_PADCONF_JTAG_EMU0 and EMU1

        ; Drive SCL high, float SDA high
        ASSERT  (EE_SCL_Line:SHR:5) = (EE_SDA_Line:SHR:5)
        GPIO_PrepareC a1, a2, EE_SCL_Line
        GPIO_PrepareC a1, a3, EE_SDA_Line
        GPIO_SetOutput1 a1, a2
        GPIO_SetOutput1 a1, a3
        GPIO_SetAsOutput a1, a2, a4
        GPIO_SetAsInput a1, a3, a4

        MOV     a1, #0
        BL      NVMemory_BGet
05
        CMP     a1, #-1
        MOVEQ   v3, #0     ; No reply
        MOVNE   v3, #256   ; Must be at least 256

      [ ProbeEESize
        LDR     v2, IntSRAM_Log
        ADD     v2, v2, #:INDEX:FATLoadedCMOS
        BEQ     %FT30

        ; So there's an EEPROM of at least 256 bytes present
        MOV     v1, #255
10
        MOV     a1, v1
        BL      NVMemory_BGet
        STRB    a1, [v2, v1]
        SUBS    v1, v1, #1
        BPL     %BT10
15
        ; Compare blocks of 2048 bits in powers of 2 until alias found
        ; This has 2 weaknesses
        ; - when the chip is initially blank it will appear to be 256 bytes
        ;   for the first boot (done during the factory test anyway)
        ; - it may underreport if the chip is filled with exact copies of the
        ;   first 256 bytes for reason (unlikely, versus a destructive test)
        MOV     v1, #255
20
        ADD     a1, v1, v3
        BL      NVMemory_BGet
        LDRB    a2, [v2, v1]
        TEQ     a1, a2
        BNE     %FT25
        SUBS    v1, v1, #1
        BPL     %BT20

        ; All 256 matched, it's an alias
        B       %FT30
25
        ; Non match, not an alias, try next power of 2
        MOV     v3, v3, LSL #1

        ; Stop probing when address wont fit in the address byte
        CMP     v3, #2_11100000000
        BLS     %BT15
30
      ]
        STR     v3, NVMemoryFound
    [ TryLoadedCMOS
        TEQ     v3, #0
        BNE     %FT50

        ; Check the loaded CMOS is from the 5.xx era
      [ :LNOT: ProbeEESize
        LDR     v2, IntSRAM_Log
      ]
        LDR     a1, [v2, #?FATLoadedCMOS - 4]
        SUB     a1, a1, #500
        CMP     a1, #100

        ; Go unpickle the CMOS data file logical to physical addresses
        BCC     %FT40

        ; Looks dodgy, make it a blank chip
        MOV     a1, #-1
        MOV     a3, #?FATLoadedCMOS - 4
35
        SUBS    a3, a3, #4
        STRPL   a1, [v2, a3]
        BNE     %BT35
40
        ; Roll top 4 by 1 step to get [00-BF][F0-FF][C0-EF]
        ADD     a1, v2, #&C0
        MOV     a2, #4
        BL      NVMemory_Barrel16

        ; Roll bottom 16 by 4 steps to get [F0-FF][C0-EF][00-BF]
        MOV     v1, #4
45
        MOV     a1, v2
        MOV     a2, #16
        BL      NVMemory_Barrel16
        SUBS    v1, v1, #1
        BNE     %BT45
50
    ]
        Pull    "v1-v3, pc"
        
NVMemory_Barrel16
        ; void NVMemory_Barrel16(uint32_t *base, size_t wrapsize)
        ; Moves 16 bytes up in memory, wrapping what fell off the top
        Push    "v1-v2, lr"

        ; Pick up the end data to keep
        ADD     ip, a1, a2, LSL #4
        LDMDB   ip, {a3-a4, v1-v2}
        Push    "a3-a4, v1-v2"
10
        ; And the move part
        SUBS    a2, a2, #1
        ADDNE   ip, a1, a2, LSL #4
        LDMNEDB ip, {a3-a4, v1-v2}
        STMNEIA ip, {a3-a4, v1-v2}
        BNE     %BT10

        ; Replace the wrapped bit
        Pull    "a3-a4, v1-v2"
        STMIA   a1, {a3-a4, v1-v2}

        Pull    "v1-v2, pc"

NVMemory_InitDevice
        ; void NVMemory_InitDevice(void)
        LDR     a3, NVMemoryFound
        TEQ     a3, #0
        MOVEQ   pc, lr
        Push    "a3, lr"

        ; Copy over template
        ADRL    a1, NVRAMWS
        ADR     a2, NVMemory_Device_Template
        MOV     a3, #HALDeviceSize
        BL      memcpy

        ; Map 256/512/1024/2048 to table index 0/1/2/3
        MOV     a2, a1
        Pull    "a3, lr"
        CLZ     a1, a3
        RSB     a1, a1, #31 - 8

        ADR     a4, NVMemory_Device_IDs
        MOV     a3, a1, LSL #1
        LDRH    a3, [a4, a3]
        STRH    a3, [a2, #HALDevice_ID]

        ADR     a4, NVMemory_Device_Descs
        MOV     a3, #1 + :LEN:"24Cxx EEPROM"
        MLA     a3, a3, a1, a4
        STR     a3, [a2, #HALDevice_Description]

        ; Tail call the OS to add it
        MOV     a1, #0
        LDR     pc, OSentries + 4*OS_AddDevice

NVMemory_Device_Template
        DCW     HALDeviceType_SysPeri + HALDeviceSysPeri_NVRAM
        DCW     &1234           ; ID filled at runtime
        DCD     HALDeviceBus_Ser + HALDeviceSerBus_IIC
        DCD     0               ; API version 0
        DCD     &12345678       ; Description filled at runtime
        DCD     0               ; Address - N/A
        %       12              ; Reserved
        DCD     NVMemory_Device_Activate
        DCD     NVMemory_Device_Deactivate
        DCD     NVMemory_Device_Reset
        DCD     NVMemory_Device_Sleep
        DCD     -1
        DCD     0
        %       8
        ASSERT  (. - NVMemory_Device_Template) = HALDeviceSize

NVMemory_Device_Activate
        MOV     a1, #1
        MOV     pc, lr
NVMemory_Device_Sleep
        MOV     a1, #0
NVMemory_Device_Deactivate
NVMemory_Device_Reset
        MOV     pc, lr
NVMemory_Device_IDs
        DCW    HALDeviceID_NVRAM_24C02
        DCW    HALDeviceID_NVRAM_24C04
        DCW    HALDeviceID_NVRAM_24C08
        DCW    HALDeviceID_NVRAM_24C16
NVMemory_Device_Descs
        DCB    "24C02 EEPROM", 0
        DCB    "24C04 EEPROM", 0
        DCB    "24C08 EEPROM", 0
        DCB    "24C16 EEPROM", 0
        ALIGN
        
NVMemory_BGet
        ; int32_t NVMemory_BGet(uint32_t loc)
        ; Returns -1 if no ACK otherwise the byte read
        Push    "v1, v3, lr"
        MOV     v1, a1
        MOV     v3, #-1

        BL      BashIIC_Start

      [ ProbeEESize
        ; Take bits 8-10 to be the device id
        AND     a2, v1, #2_11100000000
        MOV     a2, a2, LSR #7
        ORR     a1, a2, #EE_Write_Addr
      |
        ; The device id is zero
        MOV     a1, #EE_Write_Addr
      ]
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        AND     a1, v1, #255
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        BL      BashIIC_Start

      [ ProbeEESize
        ; Take bits 8-10 to be the device id
        AND     a2, v1, #2_11100000000
        MOV     a2, a2, LSR #7
        ORR     a1, a2, #EE_Read_Addr
      |
        ; The device id is zero
        MOV     a1, #EE_Read_Addr
      ]
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        BL      BashIIC_In
        MOV     v3, a1

        BL      BashIIC_NACK
10        
        BL      BashIIC_Stop
        MOV     a1, v3
        Pull    "v1, v3, pc"
        
NVMemory_BPut
        ; int32_t NVMemory_BPut(uint32_t loc, uint8_t byte)
        ; Returns -1 if no ACK
        Push    "v1-v3, lr"
        MOV     v1, a1
        MOV     v2, a2
        MOV     v3, #-1

        BL      BashIIC_Start

      [ ProbeEESize
        ; Take bits 8-10 to be the device id
        AND     a2, v1, #2_11100000000
        MOV     a2, a2, LSR #7
        ORR     a1, a2, #EE_Write_Addr
      |
        ; The device id is zero
        MOV     a1, #EE_Write_Addr
      ]
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        AND     a1, v1, #255
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10
        
        MOV     a1, v2
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        BL      BashIIC_Stop
05
        ; Poll for completion (any address will do)
        BL      BashIIC_Start
        MOV     a1, #EE_Write_Addr
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        MOV     v2, a1
        BL      BashIIC_Stop
        CMP     v2, #-1
        BNE     %BT05

        MOV     v3, #0
10
        MOV     a1, v3
        Pull    "v1-v3, pc"

BashIIC_Out
        ; Clock out a byte MSB first
        Push    "v1-v2, lr"
        MOV     v1, a1, LSL #24
        MOV     v2, #8
10
        MOVS    v1, v1, LSL #1
        BCC     %FT20
        BL      BashIIC_NACK
        B       %FT30
20
        BL      BashIIC_ACK
30
        SUBS    v2, v2, #1
        BNE     %BT10
        Pull    "v1-v2, pc"
        
BashIIC_In
        ; Clock in a byte MSB first
        Push    "v1-v2, lr"
        MOV     v1, #0
        MOV     v2, #8
10
        BL      BashIIC_ACKIn
        MOV     v1, v1, LSL #1
        TEQ     a1, #0
        ORREQ   v1, v1, #1
        SUBS    v2, v2, #1
        BNE     %BT10
        MOV     a1, v1
        Pull    "v1-v2, pc"
        
BashIIC_Start
        Push    "v1-v3, lr"
        ; SCL ensure high, SDA falls
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        SDAHigh
        SCLHigh
        SDALow
        Pull    "v1-v3, pc"

BashIIC_Stop
        Push    "v1-v3, lr"
        ; SCL ensure high, SDA rises
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        SDALow
        SCLHigh
        SDAHigh
        Pull    "v1-v3, pc"

BashIIC_ACK
        Push    "v1-v3, lr"
        ; Clock low, data low, clock high
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        SDALow
        SCLHigh
        Pull    "v1-v3, pc"

BashIIC_NACK
        Push    "v1-v3, lr"
        ; Clock low, data high, clock high
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        SDAHigh
        SCLHigh
        Pull    "v1-v3, pc"

BashIIC_ACKIn
        ; Clock in a bit (SCL high on entry) by sampling SDA
        Push    "v1-v3, lr"
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        GPIO_SetAsInput v1, v3, a4
        SCLHigh
        GPIO_GetInput a1, v1, v3
        EORS    a1, a1, v3
        MOVNE   a1, #-1
        Pull    "v1-v3, pc"

        END
@


1.6
log
@Create placeholder NVMemory HAL device when EEPROM detected
The HAL device created is merely a dummy one, but presents any EEPROM detected for completeness of stuff the HAL knows about.

Version 0.87. Tagged as 'OMAP3-0_87'
@
text
@d28 1
a303 5
        ; If some was found, create a placeholder HAL device
        LDR     a1, NVMemoryFound
        TEQ     a1, #0
        BLNE    NVMemory_AddDevice

d329 6
a334 3
NVMemory_AddDevice
        ; void NVMemory_AddDevice(uint32_t bytesize)
        Push    "a1, lr"
d338 1
a338 1
        ADR     a2, NVMemory_AddDevice_Template
d348 1
a348 1
        ADR     a4, NVMemory_AddDevice_IDs
d353 1
a353 1
        ADR     a4, NVMemory_AddDevice_Descs
d362 1
a362 1
NVMemory_AddDevice_Template
d370 4
a373 4
        DCD     NVMemory_AddDevice_Activate
        DCD     NVMemory_AddDevice_Deactivate
        DCD     NVMemory_AddDevice_Reset
        DCD     NVMemory_AddDevice_Sleep
d377 1
a377 1
        ASSERT  (. - NVMemory_AddDevice_Template) = HALDeviceSize
d379 1
a379 1
NVMemory_AddDevice_Activate
d382 1
a382 1
NVMemory_AddDevice_Sleep
d384 2
a385 2
NVMemory_AddDevice_Deactivate
NVMemory_AddDevice_Reset
d387 1
a387 1
NVMemory_AddDevice_IDs        
d392 1
a392 1
NVMemory_AddDevice_Descs
@


1.5
log
@Add compressed ROM support. Add boot timing code. Other misc tweaks.
Detail:
  hdr/omap3530, s/Boot, s/KbdScan, s/Top, s/Video - Added code for profiling/timing the startup sequence, using the 32K system timer
  s/Boot - Ensure VAUX2 is enabled during EVM startup
  s/Boot, s/CPUClk - Go to full CPU speed during HAL_Init instead of HAL_InitDevices.
  s/KbdScan - Print out heap usage stats when debugging is enabled
  s/NVMemory - Skip probing for CMOS carrier board if JTAG is active
  s/RAM, s/Top - Use DMA to relocate the ROM image instead of simple memcpy code. Relocate compressed ROMs to a location suitable for decompression.
Admin:
  Tested with compressed & uncompressed OMAP3/OMAP3Live images


Version 0.59. Tagged as 'OMAP3-0_59'
@
text
@d36 1
a215 1

d265 1
a265 1
      [ TryLoadedCMOS
d302 6
a307 1
      ]
d309 1
a309 1

d333 67
@


1.4
log
@Prep for SDFS and support for hardware CMOS adapter board.
To avoid conflicting use of the SDIO controller by higher level filing system (and the need for a HAL to somehow ask for a disc to be reinserted) this HAL onwards supports hardware CMOS attached via the JTAG connector.
On power up the presence and size of EEPROM is detected (sizes from 256 to 2048 bytes are understood corresponding to 24AA02 to 24AA16 family of parts).
If no EEPROM is found the HAL falls back to permitting a CMOS file to be loaded off the SD card, but crucially this is done by uboot before FileCore starts.
If no EEPROM is found, or the CMOS file looks suspicious, some fake CMOS is made and the kernel defaults used.
The "ProbeEESize" switch enables size probing, otherwise 256 bytes is assumed.
The "TryLoadedCMOS" switch enables use of a CMOS file from the SD card, if that's off and nothing is found the HAL declares that there is no CMOS at all!
The respective boot script needs the line
  fatload mmc 0:1 0x4020F000 cmos
adding to it, though the filename 'cmos' is arbitrary and only used as a suggestion.

Version 0.56. Tagged as 'OMAP3-0_56'
@
text
@d188 10
a214 1
        Push    "v1-v3, lr"
d218 1
d270 3
@


1.3
log
@NVMem fixes
Detail:
  c/NVMem - Fixed NVMem_C_write() to skip creating a CMOS file if the directory is full
  c/fat - Fixed FindDirectoryEntry() to ensure short_name[] is always terminated properly
  s/NVMemory - Only update the CMOS file if bytes have changed
  s/Boot - Fixed beagleboard revision detection GPIOs not being configured correctly
Admin:
  Tested on rev A2 BB-xM


Version 0.54. Tagged as 'OMAP3-0_54'
@
text
@d15 1
a15 1
; NVMemory* functions
d23 1
a23 1
        GET     hdr.PRCM
d27 1
a34 1
        EXPORT  NVMem_Init
d36 54
a89 2
        IMPORT  NVMem_C_read
        IMPORT  NVMem_C_write
d92 8
a99 2
        MOV     a1, #&C00  ; Bytes 0..15 readable and writeable,
        ORR     a1, a1, #3 ; HAL provides access calls
d103 6
a108 1
        MOV     a1, #2048 ; 2 kiB
d112 1
a112 1
        MOV     a1,#16  ; Try it the same size as the original
d116 1
a116 1
        MOV     a1, #0  ; No protected memory
d120 1
a120 1
        MOV     pc, lr  ; No memory protection, nothing to do
d127 63
a189 43
        ;
        ; To make things complicated, we want to maintain compatability with
        ; CMOS RAM files saved by *SaveCMOS. So we must translate the physical
        ; CMOS address back to RISC OS's original logical one:
        ;
        ; Logical      Physical
        ; &00...&BF    &40...&FF
        ; &C0...&EF    &10...&3F
        ; &F0...&FF    &00...&0F
        ; &100...max   &100...max
        Push    "a3,lr"
        ADRL    ip, NVRAMCache ; Point at our cache
10      CMP     a1, #&100
        ADD     a4, ip, a1
        BHS     %FT20
        CMP     a1, #&40
        SUBHS   a4, a4, #&40
        BHS     %FT20
        CMP     a1, #&10
        ADDHS   a4, a4, #&B0
        ADDLO   a4, a4, #&F0
20      LDRB    a4, [a4]
        ADD     a1, a1, #1
        STRB    a4, [a2], #1
        SUBS    a3, a3, #1
        BGT     %BT10
        Pull    "a1,pc"

;MapInSDMMCIO and read the CMOS file into the NVRAM cache
NVMem_Init
; Add the PRCM offsets to the base address and store them in the
; PRCM address table in static WS
        LDR     a1, L4_ClockMan_Log
        ADR     a2, PRCM_offset_table
        ADRL    a3, PRCM_address_table
        MOV     a4, #PRCM_offset_table_length
20      LDRH    ip, [a2], #2  ; Get an offset and bump the pointer
        ADD     ip, a1, ip    ; Add offset to base address
        STR     ip, [a3], #4  ; Store the address and bump the pointer
        SUBS    a4, a4, #1    ; Decrement the loop counter
        BGT     %BT20         ; Loop back until done
; Add the MMCHS1 offsets to the base address and store them in the
; MMCHS1 address table in static WS
d191 13
a203 49
        ADD     a1, a1, #L4_MemCard1-L4_Core
        ADR     a2, MMCHS1_offset_table
        ADRL    a3, MMCHS1_address_table
        MOV     a4, #MMCHS1_offset_table_length
30      LDRH    ip, [a2], #2  ; Get an offset and bump the pointer
        ADD     ip, a1, ip    ; Add offset to base address
        STR     ip, [a3], #4  ; Store the address and bump the pointer
        SUBS    a4, a4, #1    ; Decrement the loop counter
        BGT     %BT30         ; Loop back until done
; Clear BootDollarOSVersion
        ADRL    a3, BootDollarOSVersion
        MOV     a1, #0
        STR     a1, [a3]
; Read the CMOS file
        ADRL    a1, NVMem_workspace ; Point at base of our workspace
        B       NVMem_C_read

; Offsets to PRCM registers, from L4_ClockMan
PRCM_offset_table
        DCW CM_ICLKEN1_CORE
        DCW CM_FCLKEN1_CORE
PRCM_offset_table_length * (. - PRCM_offset_table) / 2
; Offsets to MMCHS1 registers, from L4_MemCard1
MMCHS1_offset_table
MMCHS_SYSCONFIG DCW &010
MMCHS_SYSSTATUS DCW &014
MMCHS_CSRE      DCW &024
MMCHS_SYSTEST   DCW &028
MMCHS_CON       DCW &02C
MMCHS_PWCNT     DCW &030
MMCHS_BLK       DCW &104
MMCHS_ARG       DCW &108
MMCHS_CMD       DCW &10C
MMCHS_RSP10     DCW &110
MMCHS_RSP32     DCW &114
MMCHS_RSP54     DCW &118
MMCHS_RSP76     DCW &11C
MMCHS_DATA      DCW &120
MMCHS_PSTATE    DCW &124
MMCHS_HCTL      DCW &128
MMCHS_SYSCTL    DCW &12C
MMCHS_STAT      DCW &130
MMCHS_IE        DCW &134
MMCHS_ISE       DCW &138
MMCHS_AC12      DCW &13C
MMCHS_CAPA      DCW &140
MMCHS_CUR_CAPA  DCW &148
MMCHS_REV       DCW &1FC
MMCHS1_offset_table_length * (. - MMCHS1_offset_table) / 2
d205 1
a205 2
        ASSERT  PRCM_address_table_length = PRCM_offset_table_length
        ASSERT  MMCHS1_address_table_length = MMCHS1_offset_table_length
d207 235
a441 7
HAL_NVMemoryWrite
        ; We need to do physical -> logical address translation here too
        ; Technically we only need to do it just the once, since the writes
        ; shouldn't cross page boundaries. But let's play it safe and do it on
        ; all bytes.
        Push    "a3,v1-v2,lr"
        ADRL    ip, NVRAMCache
d443 65
a507 22
10      CMP     a1, #&100
        ADD     a4, ip, a1
        BHS     %FT20
        CMP     a1, #&40
        SUBHS   a4, a4, #&40
        BHS     %FT20
        CMP     a1, #&10
        ADDHS   a4, a4, #&B0
        ADDLO   a4, a4, #&F0
20      LDRB    lr, [a2], #1
        ADD     a1, a1, #1
        LDRB    v2, [a4]
        EOR     v2, v2, lr
        STRB    lr, [a4]
        ORR     v1, v1, v2
        SUBS    a3, a3, #1
        BGT     %BT10
        ; Only write to the card if the bytes were changed
        CMP     v1, #0
        ADRL    a1, NVMem_workspace ; Point at base of our workspace
        BLNE    NVMem_C_write
        Pull    "a1,v1-v2,pc"
@


1.2
log
@Add Dave Higton's CMOS save code
Detail:
  Makefile - fixed warning about StdRules being included twice (via CModule)
  c/NVMem, c/fat, h/NVMem, h/common, h/fat, hdr/StaticWS, s/NVMemory, s/RTC - Added Dave Higton's code to create/update the 'CMOS' file on NVRAM writes
Admin:
  Tested on rev A2 BB-xM


Version 0.50. Tagged as 'OMAP3-0_50'
@
text
@d166 1
a166 1
        Push    "a3,lr"
d168 1
d180 2
d183 1
d186 2
d189 2
a190 2
        BL      NVMem_C_write
        Pull    "a1,pc"
@


1.1
log
@Add Dave Higton's SD/MMC & CMOS code
Detail:
  c/NVMem, c/fat, h/NVMem, h/common, h/fat - C code for reading a 'CMOS' file off the SD card on boot, for use as a CMOS RAM image
  c/CLib - Added extra functions needed by the SD/MMC driver
  s/NVMemory - Implementation of the HAL NVRAM API, for reading/writing the loaded CMOS file. The read/write functions handle RISC OS's CMOS address mangling, so that CMOS files saved by *SaveCMOS can be used as-is.
  hdr/StaticWS - Updated with workspace needed by the new code
  s/Boot - Initialise the CMOS cache on boot
  s/Stubs - Removed the stub NVRAM function
  Makefile - Added the new files
Admin:
  Tested on rev A2 BB-xM.


Version 0.38. Tagged as 'OMAP3-0_38'
@
text
@d37 1
d77 1
a77 1
        ADD     a4, ip, a1        
d117 5
d169 1
a169 1
        ADD     a4, ip, a1        
d182 2
@

