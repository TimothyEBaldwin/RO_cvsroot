head	1.8;
access;
symbols
	OMAP3-1_18:1.8
	OMAP3-1_17:1.8
	OMAP3-1_16:1.8
	OMAP3-1_15:1.8
	OMAP3-1_14:1.8
	SMP:1.8.0.2
	SMP_bp:1.8
	OMAP3-1_13:1.8
	OMAP3-1_12:1.8
	OMAP3-1_11:1.8
	OMAP3-1_10:1.8
	OMAP3-1_09:1.8
	OMAP3-1_08:1.8
	OMAP3-1_07:1.8
	OMAP3-1_06:1.8
	OMAP3-1_05:1.8
	OMAP3-1_04:1.8
	OMAP3-1_03:1.7
	OMAP3-1_02:1.7
	OMAP3-1_01:1.7
	OMAP3-1_00:1.7
	OMAP3-0_99:1.7
	OMAP3-0_98:1.7
	OMAP3-0_97:1.6
	OMAP3-0_96:1.6
	OMAP3-0_95:1.6
	OMAP3-0_94:1.6
	OMAP3-0_93:1.6
	OMAP3-0_92:1.6
	OMAP3-0_91:1.6
	OMAP3-0_90:1.6
	OMAP3-0_89:1.6
	OMAP3-0_88:1.6
	OMAP3-0_87:1.6
	OMAP3-0_86:1.6
	OMAP3-0_85:1.6
	OMAP3-0_84:1.6
	OMAP3-0_83:1.6
	OMAP3-0_82:1.6
	OMAP3-0_81:1.6
	OMAP3-0_80:1.6
	OMAP3-0_79:1.6
	OMAP3-0_78:1.6
	OMAP3-0_77:1.6
	OMAP3-0_76:1.6
	OMAP3-0_75:1.6
	OMAP3-0_74:1.6
	OMAP3-0_73:1.6
	OMAP3-0_72:1.6
	OMAP3-0_71:1.6
	OMAP3-0_70:1.6
	OMAP3-0_69:1.6
	OMAP3-0_68:1.6
	OMAP3-0_67:1.6
	OMAP3-0_66:1.6
	OMAP3-0_65:1.6
	OMAP3-0_64:1.5
	OMAP3-0_63:1.5
	OMAP3-0_62:1.5
	OMAP3-0_61:1.5
	OMAP3-0_60:1.4
	OMAP3-0_59:1.4
	OMAP3-0_58:1.4
	OMAP3-0_57:1.4
	OMAP3-0_56:1.4
	OMAP3-0_55:1.4
	OMAP3-0_54:1.4
	OMAP3-0_53:1.4
	OMAP3-0_52:1.4
	OMAP3-0_51:1.4
	OMAP3-0_50:1.4
	OMAP3-0_49:1.4
	OMAP3-0_48:1.4
	OMAP3-0_47:1.4
	OMAP3-0_46:1.4
	OMAP3-0_45:1.4
	OMAP3-0_44:1.4
	OMAP3-0_43:1.4
	OMAP3-0_42:1.4
	OMAP3-0_41:1.4
	OMAP3-0_40:1.4
	OMAP3-0_39:1.4
	OMAP3-0_38:1.4
	OMAP3-0_37:1.4
	OMAP3-0_36:1.4
	OMAP3-0_35:1.4
	OMAP3-0_34:1.4
	OMAP3-0_33:1.4
	OMAP3-0_32:1.4
	OMAP3-0_31:1.4
	OMAP3-0_30:1.4
	OMAP3-0_29:1.4
	OMAP3-0_28:1.4
	OMAP3-0_27:1.4
	OMAP3-0_26:1.4
	OMAP3-0_25:1.4
	OMAP3-0_24:1.4
	OMAP3-0_23:1.4
	OMAP3-0_22:1.4
	OMAP3-0_21:1.4
	OMAP3-0_20:1.3
	OMAP3-0_19:1.3
	OMAP3-0_18:1.2
	OMAP3-0_17:1.2
	OMAP3-0_16:1.2
	OMAP3-0_15:1.2
	OMAP3-0_14:1.2
	OMAP3-0_13:1.2
	OMAP3-0_12:1.2
	OMAP3-0_11:1.2
	OMAP3-0_10:1.1
	OMAP3-0_09:1.1
	OMAP3-0_08:1.1;
locks; strict;
comment	@# @;


1.8
date	2015.04.08.07.37.49;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	KMkj6KKX1Lup6Lgy;

1.7
date	2014.10.25.17.35.39;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	f6nsEIQ8JetkIBVx;

1.6
date	2012.06.06.23.24.44;	author jlee;	state Exp;
branches;
next	1.5;
commitid	V8uU5ZGnsNVTDH7w;

1.5
date	2012.03.25.11.49.09;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	c99VvmwezV2J8gYv;

1.4
date	2010.01.30.00.23.21;	author jlee;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.24.02.49.33;	author jlee;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.02.19.37.05;	author jlee;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.09.19.04.58;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Turn off debug
Anyone using the serial port for other peripheral uses might get confused if some HAL debug comes out on it.
Move the IMPORTs into a header so we don't end up with lots of unresolved symbols with Debug {FALSE}.
Rename a couple of symbols in PAudio missed in OMAP3-1_03.
Built, but not tested.


Version 1.04. Tagged as 'OMAP3-1_04'
@
text
@; Copyright 2009 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.omap3530
        GET     hdr.StaticWS
        GET     hdr.Timers
        GET     hdr.PRCM
        GET     hdr.USB
        GET     hdr.GPIO

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  USB_Init
        
        EXPORT  HAL_USBControllerInfo

        IMPORT  HAL_CounterDelay
        IMPORT  GPIOx_SetAsOutput
        IMPORT  GPIOx_SetOutput

; USB PHY power is controlled via GPIO
;USB2_PHY_GPIO * 147  -> board config
USB2_PHY_Reset_delay * 10000 ; 10msec

OHCI_IRQ  * 76
EHCI_IRQ  * 77
MUSB_IRQ  * 92

USB_Init
        Push    "lr"
        ; Initialise USB
        ; This assumes we're running on a rev C beagleboard, i.e. we're using EHCI via an external PHY
        ; This provides us with two ports, although the board only has a transceiver & connector for one (port #2)
        ; This code is roughly the same as omap_start_ehc() in the linux sources, except DPLL5 will already be running (initialised in PRCM_SetClocks)
        LDR     a1, L4_ClockMan_Log
        ; Set up autoidle/sleep mode stuff for USBHOST
        MOV     a2, #0
        LDR     a3, =CM_AUTOIDLE_USBHOST
        STR     a2, [a1, a3]
        LDR     a3, =CM_SLEEPDEP_USBHOST
        STR     a2, [a1, a3]
        LDR     a3, =CM_CLKSTCTRL_USBHOST
        STR     a2, [a1, a3]
        ; Enable the clocks
        MOV     a2, #1
        LDR     a3, =CM_ICLKEN_USBHOST
        STR     a2, [a1, a3]
        MOV     a2, #3
        LDR     a3, =CM_FCLKEN_USBHOST
        STR     a2, [a1, a3]
        ; Bring the external PHY out of reset
        LDRB    a1, [sb, #BoardConfig_USBGPIO]
        CMP     a1, #255
        BEQ     %FT10 ; Do nothing if no GPIO?
        MOV     a2, #0 ; Set pin to 0 to place PHY in reset
        BL      GPIOx_SetAsOutput
        ; Wait a while
        LDR     a1, =USB2_PHY_Reset_delay
        BL      HAL_CounterDelay
        ; Disable the integrated STP pull-up resistor
        LDR     a1, L4_USB_Host_Log
        ADD     a2, a1, #EHCI_BASE
        LDR     a3, =&81870090 ; Write 0x90 to port 1 addr 7 (surely this should be port 2?)
        STR     a3, [a2, #EHCI_INSNREG05_ULPI]
        ; Wait
5
        LDR     a3, [a2, #EHCI_INSNREG05_ULPI]
        TST     a3, #&80000000
        BEQ     %BT5
        ; Force PHY to HS
        LDR     a3, =&81840040 ; Write 0x40 to port 1 addr 4
        STR     a3, [a2, #EHCI_INSNREG05_ULPI]
        ; Wait
5
        LDR     a3, [a2, #EHCI_INSNREG05_ULPI]
        TST     a3, #&80000000
        BEQ     %BT5
        ; Enable USBHOST TLL clocks
        LDR     a1, L4_ClockMan_Log
        LDR     a2, =CM_FCLKEN3_CORE
        LDR     a3, [a1, a2]
        ORR     a3, a3, #1:SHL:2 ; EN_USBTLL
        STR     a3, [a1, a2]
        LDR     a2, =CM_ICLKEN3_CORE
        LDR     a3, [a1, a2]
        ORR     a3, a3, #1:SHL:2 ; EN_USBTLL
        STR     a3, [a1, a2]
        ; Disable auto-idle
        LDR     a2, =CM_AUTOIDLE3_CORE
        LDR     a3, [a1, a2]
        BIC     a3, a3, #1:SHL:2
        STR     a3, [a1, a2]
        ; Wait for TLL to become active
5
        LDR     a2, =CM_IDLEST3_CORE
        LDR     a3, [a1, a2]
        TST     a3, #1:SHL:2
        BNE     %BT5
        ; TLL soft reset
        LDR     a1, L4_USBTLL_Log
        MOV     a2, #2
        STR     a2, [a1, #USBTLL_SYSCONFIG]
5
        LDR     a2, [a1, #USBTLL_SYSSTATUS]
        TST     a2, #1
        BEQ     %BT5               
        ; Disable auto-idle (TODO - why?), enable wakeup
        MOV     a2, #&10C
        STR     a2, [a1, #USBTLL_SYSCONFIG]
        ; Now configure UHH
        ; no auto-idle/standby (TODO - why?)
        LDR     a1, L4_USB_Host_Log
        LDR     a2, =&110C
        STR     a2, [a1, #UHH_SYSCONFIG]
        ; Configure for UPLI PHY mode
        MOV     a2, #&1C ; ULPI bypass enabled, INCR4/8/16 bursts enabled 
        STR     a2, [a1, #UHH_HOSTCONFIG]
5
        LDR     a2, [a1, #UHH_HOSTCONFIG]
        TST     a2, #1
        BNE     %BT5
        ; Wait for things to settle
        LDR     a1, =USB2_PHY_Reset_delay
        BL      HAL_CounterDelay
        ; Now wake up the PHY
        LDRB    a1, [sb, #BoardConfig_USBGPIO]
        MOV     a2, #1
        BL      GPIOx_SetOutput
        ; Success!


10
        Pull    "pc"

        ; a1 = interface #
        ; a2 = usbinfo ptr
        ; a3 = sizeof(usbinfo)
        ; Return sizeof(usbinfo) or 0 for no more devices
        ; If supplied size isn't large enough, only the controller type will be filled in
HAL_USBControllerInfo
        CMP     a1, #1
        MOVHI   a1, #0
        MOVHI   pc, lr
        BEQ     %FT10
        ; Fill in the usbinfo struct
        MOV     a1, #HALUSBControllerType_EHCI
        STR     a1, [a2, #HALUSBControllerInfo_Type]
        CMP     a3, #HALUSBControllerInfo_SizeOf
        MOV     a1, #HALUSBControllerInfo_SizeOf
        MOVLO   pc, lr
        MOV     a4, #HALUSBControllerFlag_32bit_Regs ; EHCI did seem to work OK without forcing 32bit register access, but it is technically needed so I'll leave it set.
        STR     a4, [a2, #HALUSBControllerInfo_Flags]
        LDR     a4, L4_USB_Host_Log
        ADD     a4, a4, #EHCI_BASE
        STR     a4, [a2, #HALUSBControllerInfo_HW]
        MOV     a4, #EHCI_IRQ
        STR     a4, [a2, #HALUSBControllerInfo_DevNo]
        MOV     pc, lr
10
        MOV     a1, #HALUSBControllerType_MUSBMHDRC
        STR     a1, [a2, #HALUSBControllerInfo_Type]
        CMP     a3, #HALUSBControllerInfo_SizeOf
        MOV     a1, #HALUSBControllerInfo_SizeOf
        MOVLO   pc, lr
        MOV     a4, #0
        STR     a4, [a2, #HALUSBControllerInfo_Flags]
        LDR     a4, L4_USB_OTG_Log
        STR     a4, [a2, #HALUSBControllerInfo_HW]
        MOV     a4, #MUSB_IRQ
        STR     a4, [a2, #HALUSBControllerInfo_DevNo]
        MOV     pc, lr

        END
@


1.7
log
@Don't bother providing even dummy implementations of USB port and overcurrent functions
As the flag bit in HAL_USBControllerInfo isn't set, no need to provide them.
Use symbols from Hdr:HALEntries when building the USB info.
No need for AASMFLAGS in the makefile.
Built, but not tested.

Version 0.98. Tagged as 'OMAP3-0_98'
@
text
@a39 1
        IMPORT  DebugHALPrintReg
@


1.6
log
@Sanitise HAL_USBControllerInfo
Detail:
  s/USB - For valid controllers, HAL_USBControllerInfo now always returns the correct USB struct size and fills in the controller type. The rest of the buffer is filled in only if the supplied size is large enough. This allows for proper probing of controllers without knowing the required buffer sizes beforehand.
Admin:
  Tested on rev A2 BB-xM


Version 0.65. Tagged as 'OMAP3-0_65'
@
text
@a37 3
        EXPORT  HAL_USBPortPower
        EXPORT  HAL_USBPortStatus
        EXPORT  HAL_USBPortIRQ
d169 4
a172 4
        MOV     a1, #1 ; EHCI
        STR     a1, [a2, #USBINFO_TYPE]
        CMP     a3, #USBINFO_SIZEOF
        MOV     a1, #USBINFO_SIZEOF
d174 2
a175 2
        MOV     a4, #USBINFO_FLAG_32bit_Regs ; EHCI did seem to work OK without forcing 32bit register access, but it is technically needed so I'll leave it set.
        STR     a4, [a2, #USBINFO_FLAGS]
d178 1
a178 1
        STR     a4, [a2, #USBINFO_HW]
d180 1
a180 1
        STR     a4, [a2, #USBINFO_DEVNO]
d183 4
a186 4
        MOV     a1, #2 ; MUSBMHDRC
        STR     a1, [a2, #USBINFO_TYPE]
        CMP     a3, #USBINFO_SIZEOF
        MOV     a1, #USBINFO_SIZEOF
d189 1
a189 1
        STR     a4, [a2, #USBINFO_FLAGS]
d191 1
a191 1
        STR     a4, [a2, #USBINFO_HW]
d193 1
a193 9
        STR     a4, [a2, #USBINFO_DEVNO]
        MOV     pc, lr


        ; These are unused for EHCI/MUSB
HAL_USBPortPower
HAL_USBPortStatus
HAL_USBPortIRQ
        MOV     a1, #-1
@


1.5
log
@Line some things up.
To help OMAP4 tracking changes a number of the changes were purely cosmetic lining up differences, this change is where OMAP3 wasn't on a conventional column layout.

Version 0.61. Tagged as 'OMAP3-0_61'
@
text
@d164 2
a165 1
        ; Return sizeof(usbinfo) or 0 for fail
a166 3
        CMP     a3, #USBINFO_SIZEOF
        MOVNE   a1, #0
        MOVNE   pc, lr
d174 1
a174 7
        MOV     a1, #USBINFO_FLAG_32bit_Regs ; EHCI did seem to work OK without forcing 32bit register access, but it is technically needed so I'll leave it set.
        STR     a1, [a2, #USBINFO_FLAGS]
        LDR     a1, L4_USB_Host_Log
        ADD     a1, a1, #EHCI_BASE
        STR     a1, [a2, #USBINFO_HW]
        MOV     a1, #EHCI_IRQ
        STR     a1, [a2, #USBINFO_DEVNO]
d176 8
d188 1
a188 6
        MOV     a1, #0
        STR     a1, [a2, #USBINFO_FLAGS]
        LDR     a1, L4_USB_OTG_Log
        STR     a1, [a2, #USBINFO_HW]
        MOV     a1, #MUSB_IRQ
        STR     a1, [a2, #USBINFO_DEVNO]
d190 7
@


1.4
log
@Various OMAP3 HAL power management improvements, plus add support for board config autodetection via Linux machine ID
Detail:
  s/board, hdr/board - Add Linux machine ID & available mixer channels to board config table
  s/Top - Add new entry point at offset &64, for booting as a fake Linux kernel. Searches the board config table until it finds a config matching the machine ID passed in R1. Also minor ROM copy optimisation, unsigned pointer comparison fixes
  s/Audio, hdr/Audio - Use board config to lock-out mixer channels that aren't connected to any hardware, to avoid excessive power drain or other problems if the channels get turned on. Also perform many other setting tweaks to tidy up default settings for unused mixer paths/channels.
  s/Video - Fix Video_Init logic when deciding whether to reset DSS, enable DSI PLL drift guard
  s/I2C - Increase I2C timeout values, since the previous values were perhaps a bit low
  s/Audio, s/I2C, s/Interrupts, s/RAM, s/SDMA, s/Timers, s/UART, hdr/UART, s/USB, s/Video - Enable autoidle/smart idle where possible to help save power.
Admin:
  Tested on rev C2 beagleboard


Version 0.21. Tagged as 'OMAP3-0_21'
@
text
@d15 1
d156 2
d196 1
a196 1
         
@


1.3
log
@Update OMAP HAL to support different board configs, plus use new YearLOIsGood flag to ensure correct RTC handling, plus other misc tidying
Detail:
  The OMAP HAL now has multiple entry points, one per board config. See Top.s/board.s for more info.
  audio.s - Moved APLL_CTL value to board config
  board.s - New file to list all the settings for the different board configs
  boot.s - Change HAL_Init to deal with the new board config stuff
  debug.s - Debug UART now specified in board config
  GPIO.s - A few utility functions for handling OMAP/TPS GPIO pins
  I2C.s - Update to use new board config struct
  RAM.s - Disable the beagleboard-specific RAM init code. Instead we'll just rely on u-boot to initialise all our RAM for us.
  RTC.s - Get rid of the magic numbers, and use the YearLOIsGood flag to indicate to RISC OS that YearLO is 2-digit BCD
  Top.s - Got rid of old debug code and rewrote initial flow to handle detecting & storing the board config
  UART.s - Update to use board config struct, support multiple UARTs
  USB.s - Get EHCI PHY power GPIO from board config
  Video.s - Get DVI framer power GPIO and max pixel rate from board config. Add 'PassiveVideo' option, to build a driver that doesn't alter the video output settings - should hopefully result in a usable display on Touch Book, etc.
  board.hdr - Definition of board config table struct
  GPIO.hdr - Add lots of macros for handling OMAP GPIO pins, new constants for OMAP/TPS GPIO
  I2C.hdr - Added I2C transfer block struct, HAL I2C API transfer states (both moved here from other source files)
  omap3530.hdr - Move/remove some unwanted constants, disable DebugChar for now
  StaticWS.hdr - Move I2C transfer block struct to I2C.hdr, add board config struct to HAL workspace, get rid of unused 64K AllocArea
  Timers.hdr - Tidy up constants a bit
  UART.hdr - Add UARTCLK (moved from StaticWS.hdr), UART IRQ #'s
  Makefile - add GPIO.s
Admin:
  Tested on rev C2 beagleboard. Board configs for other board types may be inaccurate in a couple of places.


Version 0.19. Tagged as 'OMAP3-0_19'
@
text
@d132 1
a132 1
        ; Disable auto-idle, enable wakeup
d136 1
a136 1
        ; no auto-idle/standby
@


1.2
log
@Update OMAP3 HAL to expose USB OTG controller via HAL_USBControllerInfo
Detail:
  hdr/StaticWS, s/Boot - Store logical address of OTG controller
  hdr/USB, s/USB - Expose OTG controller by HAL_USBControllerInfo API
Admin:
  Tested on Rev C2 beagleboard


Version 0.11. Tagged as 'OMAP3-0_11'
@
text
@d43 2
d46 2
a47 4
; USB PHY power is controlled via GPIO           
USB2_PHY_GPIO * 147
USB2_PHY_Ptr  * L4_GPIO_Table+4*(USB2_PHY_GPIO>>5)
USB2_PHY_Pin  * 1 :SHL: (USB2_PHY_GPIO :AND: 31)
d59 1
a59 3
        ; This code is roughly the same as omap_start_ehc() in the linux sources
        ; First program DPLL5
        ; Like linux, we assume that the input clock is 13MHz!
a60 15
        LDR     a2, =(12 :OR: (120:SHL:8))
        LDR     a3, =CM_CLKSEL4_PLL
        STR     a2, [a1, a3]
        MOV     a2, #1
        LDR     a3, =CM_CLKSEL5_PLL
        STR     a2, [a1, a3]
        MOV     a2, #&77
        LDR     a3, =CM_CLKEN2_PLL
        STR     a2, [a1, a3]
        ; Wait for lock
5
        LDR     a3, =CM_IDLEST2_CKGEN
        LDR     a2, [a1, a3]
        TST     a2, #1
        BEQ     %BT5
d77 5
a81 6
        LDR     a3, USB2_PHY_Ptr
        LDR     a1, [a3, #GPIO_OE]
        MOV     a2, #USB2_PHY_Pin
        BIC     a1, a1, a2
        STR     a1, [a3, #GPIO_OE] ; Set GPIO pin to output
        STR     a2, [a3, #GPIO_CLEARDATAOUT] ; Set pin to 0 to place PHY in reset
d151 3
a153 3
        LDR     a3, USB2_PHY_Ptr
        MOV     a2, #USB2_PHY_Pin
        STR     a2, [a3, #GPIO_SETDATAOUT]
d155 1
@


1.1
log
@OMAP3 HAL USB (EHCI) support, interrupt handling fixes
Detail:
  Makefile - added USB to objects list
  s/Boot, s/USB, hdr/StaticWS, hdr/USB - USB EHCI code
  s/Debug, s/Stubs, s/Timers, s/Top, s/UART, s/Video - Debugging tweaks and header dependency fixes
  s/Interrupts, hdr/omap3530 - Interrupt fixes & debugging code
  hdr/PRCM - typo fix
Admin:
  Tested on rev C2 beagleboard


Version 0.08. Tagged as 'OMAP3-0_08'
@
text
@d52 1
d180 1
a180 2
        CMP     a1, #0
        CMPEQ   a3, #USBINFO_SIZEOF
d183 4
d199 12
d212 1
a212 1
        ; These are unused for EHCI
@

