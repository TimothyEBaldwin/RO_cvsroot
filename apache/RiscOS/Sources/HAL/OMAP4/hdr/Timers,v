head	1.3;
access;
symbols
	OMAP4-0_60:1.3
	OMAP4-0_59-1_52_2_3:1.3
	OMAP4-0_59:1.3
	OMAP4-0_58:1.3
	OMAP4-0_57:1.3
	OMAP4-0_56:1.3
	OMAP4-0_55:1.3
	OMAP4-0_54-1_52_2_2:1.3
	OMAP4-0_54:1.3
	OMAP4-0_53:1.3
	OMAP4-0_52-1_52_2_1:1.3
	SMP:1.3.0.2
	SMP_bp:1.3
	OMAP4-0_52:1.3
	OMAP4-0_51:1.3
	OMAP4-0_50:1.3
	OMAP4-0_49:1.3
	OMAP4-0_48:1.3
	OMAP4-0_47:1.3
	OMAP4-0_46:1.3
	OMAP4-0_45:1.3
	OMAP4-0_44:1.3
	OMAP4-0_43:1.3
	OMAP4-0_42:1.3
	OMAP4-0_41:1.3
	OMAP4-0_40:1.3
	OMAP4-0_39:1.3
	OMAP4-0_38:1.3
	OMAP4-0_37:1.3
	OMAP4-0_36:1.3
	OMAP4-0_35:1.3
	OMAP4-0_34:1.3
	OMAP4-0_33:1.3
	OMAP4-0_32:1.3
	OMAP4-0_31:1.3
	OMAP4-0_30:1.3
	OMAP4-0_29:1.3
	OMAP4-0_28:1.3
	OMAP4-0_27:1.3
	OMAP4-0_26:1.3
	OMAP4-0_25:1.3
	OMAP4-0_24:1.3
	OMAP4-0_23:1.3
	OMAP4-0_22:1.3
	OMAP4-0_21:1.2
	OMAP4-0_20:1.2
	OMAP4-0_19:1.2
	OMAP4-0_18:1.2
	OMAP4-0_17:1.2
	OMAP4-0_16:1.2
	OMAP4-0_15:1.2
	OMAP4-0_14:1.2
	OMAP4-0_13:1.2
	OMAP4-0_12:1.2
	OMAP4-0_11:1.2
	OMAP4-0_10:1.2
	OMAP4-0_09:1.2
	OMAP4-0_08:1.2
	OMAP4-0_07:1.2
	OMAP4-0_06:1.1.1.1
	OMAP4-0_05:1.1.1.1
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2013.10.30.00.41.28;	author bavison;	state Exp;
branches;
next	1.2;
commitid	Qv6dpkuXjCtQFfbx;

1.2
date	2012.03.25.11.42.54;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	4FjnaYBzkPTA6gYv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.3
log
@  Replaced header file for licensing reasons
Detail:
  omap4_reg.h taken from FreeBSD projects/armv6/sys/arm/ti/omap4, trimmed to
  only include interrupt definitions, then updated so that symbol names and
  comments match Table 17.2 of the OMAP4460 TRM (SWPU235F) more closely - now
  the symbol names only differ in the prefix, and the absence of "IRQ"
  mid-string.  This was then translated very literally into objasm syntax to
  create hdr.omap4_reg, and used in place of hdr.irqs44xx.
Admin:
  Builds OK

Version 0.22. Tagged as 'OMAP4-0_22'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        [       :LNOT: :DEF: __HAL_TIMERS_HDR__
        GBLL    __HAL_TIMERS_HDR__

        GET     hdr.omap4_reg

TIMER_MAX               *       4 ; GPTIMER5-8.
; Other timers could be supported, but these 4 are in consecutive memory locations, making
; addressing easier. These timers are located inside L3_ABE; Cortex-A9 MPUs can access them
; through L3_ABE (private access) or through L3_Interconnect (L4_ABE).
TIMER_BASE              *       L4_GPTIMER5
TIMER_STRIDE_POW2       *       13
TIMER_STRIDE            *       (1 << TIMER_STRIDE_POW2)
TIMER_SIZE              *       (TIMER_MAX * TIMER_STRIDE)

; Make sure stuff really is where we expect it to be
        ASSERT L4_GPTIMER6 = L4_GPTIMER5 + TIMER_STRIDE
        ASSERT L4_GPTIMER7 = L4_GPTIMER6 + TIMER_STRIDE
        ASSERT L4_GPTIMER8 = L4_GPTIMER7 + TIMER_STRIDE

TIMER_IRQ_BASE          *       OMAP44XX_IRQ_GPT5


; Remark:
; T1,T2 and T10 are special on OMAP4 (1ms functionality)
;  they have a similar register layout as in OMAP3xxx
; T3 - T9, T11 have a different register layout

; Timer registers (offset from base)
; for GPTIMER1, GPTIMER2 and GPTIMER10
GPT1MS_TIDR             *       &0000   ; Timer IDentification Register
GPT1MS_TIOCP_CFG        *       &0010   ; Timer Interface OCP Configuration register
GPT1MS_TISTAT           *       &0014   ; Timer Status Information (without interrupts)
GPT1MS_TISR             *       &0018   ; Timer Interrupt Status Register
GPT1MS_TIER             *       &001C   ; Timer Interrupt Enable Register
GPT1MS_TWER             *       &0020   ; Timer Wakeup Enable Register
GPT1MS_TCLR             *       &0024   ; Timer Control register
GPT1MS_TCRR             *       &0028   ; Timer Counter value register
GPT1MS_TLDR             *       &002C   ; Timer Reload register
GPT1MS_TTGR             *       &0030   ; trigger for reloading counter with reload value
GPT1MS_TWPS             *       &0034   ; Timer Write Pending Status
GPT1MS_TMAR             *       &0038   ; Timer MAtch Register
GPT1MS_TCAR1            *       &003C   ; Timer CApture Register 1
GPT1MS_TSICR            *       &0040   ; Timer Synchronous Interface Control Register
GPT1MS_TCAR2            *       &0044   ; Timer CApture Register 2
GPT1MS_TPIR             *       &0048   ; Timer Positive Increment Register
GPT1MS_TNIR             *       &004C   ; Timer Negative Increment Register
GPT1MS_TCVR             *       &0050   ; Timer Counter Value register (1 ms generation)
GPT1MS_TOCR             *       &0054   ; Timer Overflow Counter Register
GPT1MS_TOWR             *       &0058   ; Timer Overflow Wrapper Register

; bits in GPT1MS_TIOCP_CFG
GPT1MS_TIOCP_CFG_AUTOIDLE       *       (1 << 0)
GPT1MS_TIOCP_CFG_SOFTRESET      *       (1 << 1)
GPT1MS_TIOCP_CFG_ENAWAKEUP      *       (1 << 2)
GPT1MS_TIOCP_CFG_IDLEMODE       *       (3 << 3)
GPT1MS_TIOCP_CFG_IDLEMODE_FORCE *       (0 << 3) ; Force Idle mode
GPT1MS_TIOCP_CFG_IDLEMODE_NONE  *       (1 << 3) ; No Idle mode
GPT1MS_TIOCP_CFG_IDLEMODE_SMART *       (2 << 3) ; Smart Idle mode
GPT1MS_TIOCP_CFG_EMUFREE        *       (1 << 5)
GPT1MS_TIOCP_CFG_CLOCKACTIVITY  *       (3 << 8)

; bits in GPT1MS_TISTAT
GPT1MS_TISTAT_RESETDONE         *       (1 << 0)

; bits in interrupt registers: GPT1MS_TISR, GPT1MS_TIER + GPT1MS_TWER
GPT1MS_IRQ_MAT                  *       (1 << 0) ; match event
GPT1MS_IRQ_OVF                  *       (1 << 1) ; overflow event
GPT1MS_IRQ_TCAR                 *       (1 << 2) ; compare event


; Timer registers (for GPTIMER3 - GPTIMER9, GPTIMER11)
GPT_TIDR                *       &0000   ; Timer IDentification Register
GPT_TIOCP_CFG           *       &0010   ; Timer Interface OCP Configuration register
GPT_IRQSTATUS_RAW       *       &0024   ; Timer Raw (unmasked) Interrupt Status
GPT_IRQSTATUS           *       &0028   ; Timer (masked) Interrupt Status
GPT_IRQENABLE_SET       *       &002C   ; Timer Interrupt Enable Set Register
GPT_IRQENABLE_CLR       *       &0030   ; Timer Interrupt Enable Clear Register
GPT_IRQWAKEEN           *       &0034   ; Timer Wakeup Enable Register
GPT_TCLR                *       &0038   ; Timer Control register
GPT_TCRR                *       &003C   ; Timer Counter value register
GPT_TLDR                *       &0040   ; Timer Reload register
GPT_TTGR                *       &0044   ; trigger for reloading counter with reload value
GPT_TWPS                *       &0048   ; Timer Write Pending Status
GPT_TMAR                *       &004C   ; Timer MAtch Register
GPT_TCAR1               *       &0050   ; Timer CApture Register 1
GPT_TSICR               *       &0054   ; Timer Synchronous Interface Control Register
GPT_TCAR2               *       &0058   ; Timer CApture Register 2

; bits in GPT_TIOCP_CFG
GPT_TIOCP_CFG_SOFTRESET         *       (1 << 0)
GPT_TIOCP_CFG_EMUFREE           *       (1 << 1)
GPT_TIOCP_CFG_IDLEMODE          *       (3 << 2)
GPT_TIOCP_CFG_IDLEMODE_FORCE    *       (0 << 2) ; Force Idle mode
GPT_TIOCP_CFG_IDLEMODE_NONE     *       (1 << 2) ; No Idle mode
GPT_TIOCP_CFG_IDLEMODE_SMART    *       (2 << 2) ; Smart Idle mode
GPT_TIOCP_CFG_IDLEMODE_SMWUP    *       (3 << 2) ; smartidle_wakeup

; bits in GPT_IRQ* registers
GPT_IRQ_MAT                     *       (1 << 0) ; match event
GPT_IRQ_OVF                     *       (1 << 1) ; overflow event
GPT_IRQ_TCAR                    *       (1 << 2) ; compare event

; bits in GPT_TCLR (timer control)
GPT_TCLR_ST                     *       (1 << 0)  ; Start/Stop timer (1=Start,0=Stop)
GPT_TCLR_AR                     *       (1 << 1)  ; AutoReload mode
GPT_TCLR_PTV                    *       (7 << 2)  ; Prescale clock Timer Value
GPT_TCLR_PRE                    *       (1 << 5)  ; Prescaler Enable
GPT_TCLR_CE                     *       (1 << 6)  ; Compare Enable
GPT_TCLR_SCPWM                  *       (1 << 7)  ; PWM output default level (1=Set,0=Clr)
GPT_TCLR_TCM                    *       (3 << 8)  ; Transition Capture Mode
GPT_TCLR_TRG                    *       (3 << 10) ; Trigger output mode
GPT_TCLR_PT                     *       (1 << 12) ; Pulse or Toggle mode (PWM)
GPT_TCLR_CAPT_MODE              *       (1 << 13) ; Capture Mode
GPT_TCLR_GPO_CFG                *       (1 << 14) ; General-Purpose Output Configuration


; 32KTimer registers - relative to L4_32KTIMER
REG_32KSYNCNT_REV               *       &0000
REG_32KSYNCNT_SYSCONFIG         *       &0004
REG_32KSYNCNT_CR                *       &0010 ; Counter value Register

        ] ; __HAL_TIMERS_HDR__

        END
@


1.2
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d19 1
a19 1
        GET     hdr.irqs44xx
@


1.1
log
@Initial revision
@
text
@d16 2
a17 2
	[	:LNOT: :DEF: __HAL_TIMERS_HDR__
	GBLL	__HAL_TIMERS_HDR__
d19 1
a19 1
	GET	hdr.irqs44xx
d21 1
a21 1
TIMER_MAX		*	4 ; GPTIMER5-8.
d25 4
a28 4
TIMER_BASE		*	L4_GPTIMER5
TIMER_STRIDE_POW2	*	13
TIMER_STRIDE		*	(1 << TIMER_STRIDE_POW2)
TIMER_SIZE		*	(TIMER_MAX * TIMER_STRIDE)
d31 3
a33 3
	ASSERT L4_GPTIMER6 = L4_GPTIMER5 + TIMER_STRIDE
	ASSERT L4_GPTIMER7 = L4_GPTIMER6 + TIMER_STRIDE
	ASSERT L4_GPTIMER8 = L4_GPTIMER7 + TIMER_STRIDE
d35 1
a35 1
TIMER_IRQ_BASE		*	OMAP44XX_IRQ_GPT5
d45 20
a64 20
GPT1MS_TIDR		*	&0000	; Timer IDentification Register
GPT1MS_TIOCP_CFG	*	&0010	; Timer Interface OCP Configuration register
GPT1MS_TISTAT		*	&0014	; Timer Status Information (without interrupts)
GPT1MS_TISR		*	&0018	; Timer Interrupt Status Register
GPT1MS_TIER		*	&001C	; Timer Interrupt Enable Register
GPT1MS_TWER		*	&0020	; Timer Wakeup Enable Register
GPT1MS_TCLR		*	&0024	; Timer Control register
GPT1MS_TCRR		*	&0028	; Timer Counter value register
GPT1MS_TLDR		*	&002C	; Timer Reload register
GPT1MS_TTGR		*	&0030	; trigger for reloading counter with reload value
GPT1MS_TWPS		*	&0034	; Timer Write Pending Status
GPT1MS_TMAR		*	&0038	; Timer MAtch Register
GPT1MS_TCAR1		*	&003C	; Timer CApture Register 1
GPT1MS_TSICR		*	&0040	; Timer Synchronous Interface Control Register
GPT1MS_TCAR2		*	&0044	; Timer CApture Register 2
GPT1MS_TPIR		*	&0048	; Timer Positive Increment Register
GPT1MS_TNIR		*	&004C	; Timer Negative Increment Register
GPT1MS_TCVR		*	&0050	; Timer Counter Value register (1 ms generation)
GPT1MS_TOCR		*	&0054	; Timer Overflow Counter Register
GPT1MS_TOWR		*	&0058	; Timer Overflow Wrapper Register
d67 9
a75 9
GPT1MS_TIOCP_CFG_AUTOIDLE	*	(1 << 0)
GPT1MS_TIOCP_CFG_SOFTRESET	*	(1 << 1)
GPT1MS_TIOCP_CFG_ENAWAKEUP	*	(1 << 2)
GPT1MS_TIOCP_CFG_IDLEMODE	*	(3 << 3)
GPT1MS_TIOCP_CFG_IDLEMODE_FORCE	*	(0 << 3) ; Force Idle mode
GPT1MS_TIOCP_CFG_IDLEMODE_NONE	*	(1 << 3) ; No Idle mode
GPT1MS_TIOCP_CFG_IDLEMODE_SMART	*	(2 << 3) ; Smart Idle mode
GPT1MS_TIOCP_CFG_EMUFREE	*	(1 << 5)
GPT1MS_TIOCP_CFG_CLOCKACTIVITY	*	(3 << 8)
d78 1
a78 1
GPT1MS_TISTAT_RESETDONE		*	(1 << 0)
d81 3
a83 3
GPT1MS_IRQ_MAT			*	(1 << 0) ; match event
GPT1MS_IRQ_OVF			*	(1 << 1) ; overflow event
GPT1MS_IRQ_TCAR			*	(1 << 2) ; compare event
d87 16
a102 16
GPT_TIDR		*	&0000	; Timer IDentification Register
GPT_TIOCP_CFG		*	&0010	; Timer Interface OCP Configuration register
GPT_IRQSTATUS_RAW	*	&0024	; Timer Raw (unmasked) Interrupt Status
GPT_IRQSTATUS		*	&0028	; Timer (masked) Interrupt Status
GPT_IRQENABLE_SET	*	&002C	; Timer Interrupt Enable Set Register
GPT_IRQENABLE_CLR	*	&0030	; Timer Interrupt Enable Clear Register
GPT_IRQWAKEEN		*	&0034	; Timer Wakeup Enable Register
GPT_TCLR		*	&0038	; Timer Control register
GPT_TCRR		*	&003C	; Timer Counter value register
GPT_TLDR		*	&0040	; Timer Reload register
GPT_TTGR		*	&0044	; trigger for reloading counter with reload value
GPT_TWPS		*	&0048	; Timer Write Pending Status
GPT_TMAR		*	&004C	; Timer MAtch Register
GPT_TCAR1		*	&0050	; Timer CApture Register 1
GPT_TSICR		*	&0054	; Timer Synchronous Interface Control Register
GPT_TCAR2		*	&0058	; Timer CApture Register 2
d105 7
a111 7
GPT_TIOCP_CFG_SOFTRESET		*	(1 << 0)
GPT_TIOCP_CFG_EMUFREE		*	(1 << 1)
GPT_TIOCP_CFG_IDLEMODE		*	(3 << 2)
GPT_TIOCP_CFG_IDLEMODE_FORCE	*	(0 << 2) ; Force Idle mode
GPT_TIOCP_CFG_IDLEMODE_NONE	*	(1 << 2) ; No Idle mode
GPT_TIOCP_CFG_IDLEMODE_SMART	*	(2 << 2) ; Smart Idle mode
GPT_TIOCP_CFG_IDLEMODE_SMWUP	*	(3 << 2) ; smartidle_wakeup
d114 3
a116 3
GPT_IRQ_MAT			*	(1 << 0) ; match event
GPT_IRQ_OVF			*	(1 << 1) ; overflow event
GPT_IRQ_TCAR			*	(1 << 2) ; compare event
d119 11
a129 11
GPT_TCLR_ST			*	(1 << 0)  ; Start/Stop timer (1=Start,0=Stop)
GPT_TCLR_AR			*	(1 << 1)  ; AutoReload mode
GPT_TCLR_PTV			*	(7 << 2)  ; Prescale clock Timer Value
GPT_TCLR_PRE			*	(1 << 5)  ; Prescaler Enable
GPT_TCLR_CE			*	(1 << 6)  ; Compare Enable
GPT_TCLR_SCPWM			*	(1 << 7)  ; PWM output default level (1=Set,0=Clr)
GPT_TCLR_TCM			*	(3 << 8)  ; Transition Capture Mode
GPT_TCLR_TRG			*	(3 << 10) ; Trigger output mode
GPT_TCLR_PT			*	(1 << 12) ; Pulse or Toggle mode (PWM)
GPT_TCLR_CAPT_MODE		*	(1 << 13) ; Capture Mode
GPT_TCLR_GPO_CFG		*	(1 << 14) ; General-Purpose Output Configuration
d133 3
a135 3
REG_32KSYNCNT_REV		*	&0000
REG_32KSYNCNT_SYSCONFIG		*	&0004
REG_32KSYNCNT_CR		*	&0010 ; Counter value Register
d137 1
a137 1
	] ; __HAL_TIMERS_HDR__
d139 1
a139 1
	END
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
