head	1.4;
access;
symbols
	OMAP4-0_60:1.4
	OMAP4-0_59-1_52_2_3:1.4
	OMAP4-0_59:1.4
	OMAP4-0_58:1.4
	OMAP4-0_57:1.4
	OMAP4-0_56:1.4
	OMAP4-0_55:1.4
	OMAP4-0_54-1_52_2_2:1.4
	OMAP4-0_54:1.4
	OMAP4-0_53:1.4
	OMAP4-0_52-1_52_2_1:1.4
	SMP:1.4.0.2
	SMP_bp:1.4
	OMAP4-0_52:1.4
	OMAP4-0_51:1.4
	OMAP4-0_50:1.4
	OMAP4-0_49:1.4
	OMAP4-0_48:1.4
	OMAP4-0_47:1.4
	OMAP4-0_46:1.4
	OMAP4-0_45:1.4
	OMAP4-0_44:1.4
	OMAP4-0_43:1.4
	OMAP4-0_42:1.4
	OMAP4-0_41:1.4
	OMAP4-0_40:1.4
	OMAP4-0_39:1.4
	OMAP4-0_38:1.4
	OMAP4-0_37:1.4
	OMAP4-0_36:1.4
	OMAP4-0_35:1.4
	OMAP4-0_34:1.4
	OMAP4-0_33:1.4
	OMAP4-0_32:1.4
	OMAP4-0_31:1.4
	OMAP4-0_30:1.4
	OMAP4-0_29:1.4
	OMAP4-0_28:1.4
	OMAP4-0_27:1.4
	OMAP4-0_26:1.4
	OMAP4-0_25:1.4
	OMAP4-0_24:1.4
	OMAP4-0_23:1.4
	OMAP4-0_22:1.4
	OMAP4-0_21:1.3
	OMAP4-0_20:1.3
	OMAP4-0_19:1.3
	OMAP4-0_18:1.3
	OMAP4-0_17:1.3
	OMAP4-0_16:1.3
	OMAP4-0_15:1.3
	OMAP4-0_14:1.3
	OMAP4-0_13:1.3
	OMAP4-0_12:1.3
	OMAP4-0_11:1.3
	OMAP4-0_10:1.2
	OMAP4-0_09:1.2
	OMAP4-0_08:1.2
	OMAP4-0_07:1.2
	OMAP4-0_06:1.1.1.1
	OMAP4-0_05:1.1.1.1
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.10.30.00.41.28;	author bavison;	state Exp;
branches;
next	1.3;
commitid	Qv6dpkuXjCtQFfbx;

1.3
date	2012.07.04.17.59.06;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	7eFD0kniLkapWgbw;

1.2
date	2012.03.25.11.42.53;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	4FjnaYBzkPTA6gYv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.4
log
@  Replaced header file for licensing reasons
Detail:
  omap4_reg.h taken from FreeBSD projects/armv6/sys/arm/ti/omap4, trimmed to
  only include interrupt definitions, then updated so that symbol names and
  comments match Table 17.2 of the OMAP4460 TRM (SWPU235F) more closely - now
  the symbol names only differ in the prefix, and the absence of "IRQ"
  mid-string.  This was then translated very literally into objasm syntax to
  create hdr.omap4_reg, and used in place of hdr.irqs44xx.
Admin:
  Builds OK

Version 0.22. Tagged as 'OMAP4-0_22'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        [       :LNOT: :DEF: __HAL_I2C_HDR__
        GBLL    __HAL_I2C_HDR__

        GET     hdr.omap4_reg

; I2C registers - relative to L4_I2C1, L4_I2C2, etc.
I2C_REVNB_LO            *       &00
I2C_REVNB_HI            *       &04
I2C_SYSC                *       &10
I2C_IRQSTATUS_RAW       *       &24
I2C_IRQSTATUS           *       &28
I2C_IRQENABLE_SET       *       &2C
I2C_IRQENABLE_CLR       *       &30
I2C_WE                  *       &34
I2C_DMARXENABLE_SET     *       &38
I2C_DMATXENABLE_SET     *       &3C
I2C_DMARXENABLE_CLR     *       &40
I2C_DMATXENABLE_CLR     *       &44
I2C_DMARXWAKE_EN        *       &48
I2C_DMATXWAKE_EN        *       &4C
I2C_IE                  *       &84
I2C_STAT                *       &88
I2C_SYSS                *       &90
I2C_BUF                 *       &94
I2C_CNT                 *       &98
I2C_DATA                *       &9C
I2C_CON                 *       &A4
I2C_OA0                 *       &A8
I2C_SA                  *       &AC
I2C_PSC                 *       &B0
I2C_SCLL                *       &B4
I2C_SCLH                *       &B8
I2C_SYSTEST             *       &BC
I2C_BUFSTAT             *       &C0
I2C_OA1                 *       &C4
I2C_OA2                 *       &C8
I2C_OA3                 *       &CC
I2C_ACTOA               *       &D0
I2C_SBLOCK              *       &D4

; bits in I2C_SYSC (system configuration register)
I2C_SYSC_AUTOIDLE       *       (1 << 0)
I2C_SYSC_SRST           *       (1 << 1) ; soft reset
I2C_SYSC_ENAWAKEUP      *       (1 << 2)
I2C_SYSC_IDLEMODE_FORCE *       (0 << 3) ; Force Idle mode
I2C_SYSC_IDLEMODE_NONE  *       (1 << 3) ; No Idle mode
I2C_SYSC_IDLEMODE_SMART *       (2 << 3) ; Smart Idle mode
I2C_SYSC_IDLEMODE_SMWUP *       (3 << 3) ; smartidle_wakeup
I2C_SYSC_CLKACTIVITY_0  *       (0 << 8) ; both clocks can be cut off
I2C_SYSC_CLKACTIVITY_1  *       (1 << 8) ; only OCP clock must be kept active
I2C_SYSC_CLKACTIVITY_2  *       (2 << 8) ; only system clock must be kept active
I2C_SYSC_CLKACTIVITY_3  *       (3 << 8) ; both clocks must be kept active

; interrupt bits (IRQSTATUS, IRQSTATUS_RAW, IRQENABLE_SET, IRQENABLE_CLR, IE, WE, STAT)
I2C_INT_AL              *       (1 << 0)  ; Arbitration Lost
I2C_INT_NACK            *       (1 << 1)  ; No ACKnowledge
I2C_INT_ARDY            *       (1 << 2)  ; Access ready
I2C_INT_RRDY            *       (1 << 3)  ; Receive data ready
I2C_INT_XRDY            *       (1 << 4)  ; Transmit data ready
I2C_INT_GC              *       (1 << 5)  ; General Call address detected
I2C_INT_STC             *       (1 << 6)  ; Start condition
I2C_INT_AERR            *       (1 << 7)  ; Access Error
I2C_INT_BF              *       (1 << 8)  ; Bus Free
I2C_INT_AAS             *       (1 << 9)  ; Address as slave recognized
I2C_INT_XUDF            *       (1 << 10) ; Transmit underflow
I2C_INT_ROVR            *       (1 << 11) ; Receive overrun
I2C_INT_BB              *       (1 << 12) ; Bus Busy (only IRQSTATUS*, STAT)
I2C_INT_RDR             *       (1 << 13) ; Receive draining
I2C_INT_XDR             *       (1 << 14) ; Transmit draining

; bits in I2C_SYSS (system status register)
I2C_SYSS_RDONE          *       (1 << 0)  ; Reset done bit

; bits in I2C_CON (configuration register)
I2C_CON_STT             *       (1 << 0)  ; Start condition (master only)
I2C_CON_STP             *       (1 << 1)  ; Stop condition (master only)
I2C_CON_XOA3            *       (1 << 4)  ; eXpand Own Address 3
I2C_CON_XOA2            *       (1 << 5)  ; eXpand Own Address 2
I2C_CON_XOA1            *       (1 << 6)  ; eXpand Own Address 1
I2C_CON_XOA0            *       (1 << 7)  ; eXpand Own Address 0
I2C_CON_XSA             *       (1 << 8)  ; eXpand Slave Address
I2C_CON_TRX             *       (1 << 9)  ; Transmitter/Receiver mode (master only)
I2C_CON_MST             *       (1 << 10) ; Master mode
I2C_CON_STB             *       (1 << 11) ; Start byte mode (master only)
I2C_CON_OPMODE_FS       *       (0 << 12) ; Fast/Standard mode
I2C_CON_OPMODE_HS       *       (1 << 12) ; High Speed mode
I2C_CON_OPMODE_SCCB     *       (2 << 12) ; SCCB mode
I2C_CON_EN              *       (1 << 15) ; I2C module ENable

; bits in I2C_BUF (buffer configuration register)
I2C_BUF_TXTRSH          *       (0x3F << 0)     ; threshold value for TX FIFO
I2C_BUF_TXTRSH_SHIFT    *       0
I2C_BUF_TXFIFO_CLR      *       (1 << 6)        ; TX FIFO clear
I2C_BUF_XDMA_EN         *       (1 << 7)        ; TX DMA channel enable
I2C_BUF_RXTRSH          *       (0x3F << 8)     ; threshold value for RX FIFO
I2C_BUF_RXTRSH_SHIFT    *       8
I2C_BUF_RXFIFO_CLR      *       (1 << 14)       ; RX FIFO clear
I2C_BUF_RDMA_EN         *       (1 << 15)       ; RX DMA channel enable

; bits in I2C_BUFSTAT (buffer status register)
I2C_BUFSTAT_TXSTAT      *       (0x3F << 0)     ; TX buffer status
I2C_BUFSTAT_TXSTAT_SHIFT *      0
I2C_BUFSTAT_RXSTAT      *       (0x3F << 8)     ; RX buffer status
I2C_BUFSTAT_RXSTAT_SHIFT *      8
I2C_BUFSTAT_FIFODEPTH   *       (3 << 14)       ; Internal FIFO buffers depth
I2C_BUFSTAT_FIFODEPTH8  *       (0 << 14)       ; 8 bytes
I2C_BUFSTAT_FIFODEPTH16 *       (1 << 14)       ; 16 bytes
I2C_BUFSTAT_FIFODEPTH32 *       (2 << 14)       ; 32 bytes
I2C_BUFSTAT_FIFODEPTH64 *       (3 << 14)       ; 64 bytes


; Interrupt numbers
I2C1_IRQ        * OMAP44XX_IRQ_I2C1
I2C2_IRQ        * OMAP44XX_IRQ_I2C2
I2C3_IRQ        * OMAP44XX_IRQ_I2C3
I2C4_IRQ        * OMAP44XX_IRQ_I2C4

; I2C transfer block/hardware info

                ^       0
I2C_HW          #       4 ; Address of I2C hardware regs
I2C_XStart      #       4 ; iic_transfer array ptr (null for idle channel)
I2C_XEnd        #       4 ; array end ptr (inclusive)
I2C_XCurrent    #       4 ; Current iic_transfer ptr
I2C_XBytes      #       4 ; Bytes transferred in stage so far
I2CBlockSize    #       0

        ] ; __HAL_I2C_HDR__

        END
@


1.3
log
@Refactor HAL_VideoIICOp to be ATPCS
No longer specified to return _kernel_oserror * implements GraphicsV 14.
Make use of IICStatus defines instead of local copies.
Rename HAL_Video_ to HAL_Video.
Compiles, but not tested.


Version 0.11. Tagged as 'OMAP4-0_11'
@
text
@d19 1
a19 1
        GET     hdr.irqs44xx
@


1.2
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@a142 8
; HAL API I2C transfer states
ECOMPLETED      * 0
EINPROGRESS     * 1
ENOACK          * 2
EBUSY           * 3
EERROR          * 5


@


1.1
log
@Initial revision
@
text
@d16 2
a17 2
	[	:LNOT: :DEF: __HAL_I2C_HDR__
	GBLL	__HAL_I2C_HDR__
d19 1
a19 1
	GET	hdr.irqs44xx
d22 33
a54 33
I2C_REVNB_LO		*	&00
I2C_REVNB_HI		*	&04
I2C_SYSC		*	&10
I2C_IRQSTATUS_RAW	*	&24
I2C_IRQSTATUS		*	&28
I2C_IRQENABLE_SET	*	&2C
I2C_IRQENABLE_CLR	*	&30
I2C_WE			*	&34
I2C_DMARXENABLE_SET	*	&38
I2C_DMATXENABLE_SET	*	&3C
I2C_DMARXENABLE_CLR	*	&40
I2C_DMATXENABLE_CLR	*	&44
I2C_DMARXWAKE_EN	*	&48
I2C_DMATXWAKE_EN	*	&4C
I2C_IE			*	&84
I2C_STAT		*	&88
I2C_SYSS		*	&90
I2C_BUF			*	&94
I2C_CNT			*	&98
I2C_DATA		*	&9C
I2C_CON			*	&A4
I2C_OA0			*	&A8
I2C_SA			*	&AC
I2C_PSC			*	&B0
I2C_SCLL		*	&B4
I2C_SCLH		*	&B8
I2C_SYSTEST		*	&BC
I2C_BUFSTAT		*	&C0
I2C_OA1			*	&C4
I2C_OA2			*	&C8
I2C_OA3			*	&CC
I2C_ACTOA		*	&D0
I2C_SBLOCK		*	&D4
d57 11
a67 11
I2C_SYSC_AUTOIDLE	*	(1 << 0)
I2C_SYSC_SRST		*	(1 << 1) ; soft reset
I2C_SYSC_ENAWAKEUP	*	(1 << 2)
I2C_SYSC_IDLEMODE_FORCE	*	(0 << 3) ; Force Idle mode
I2C_SYSC_IDLEMODE_NONE	*	(1 << 3) ; No Idle mode
I2C_SYSC_IDLEMODE_SMART	*	(2 << 3) ; Smart Idle mode
I2C_SYSC_IDLEMODE_SMWUP	*	(3 << 3) ; smartidle_wakeup
I2C_SYSC_CLKACTIVITY_0	*	(0 << 8) ; both clocks can be cut off
I2C_SYSC_CLKACTIVITY_1	*	(1 << 8) ; only OCP clock must be kept active
I2C_SYSC_CLKACTIVITY_2	*	(2 << 8) ; only system clock must be kept active
I2C_SYSC_CLKACTIVITY_3	*	(3 << 8) ; both clocks must be kept active
d70 15
a84 15
I2C_INT_AL		*	(1 << 0)  ; Arbitration Lost
I2C_INT_NACK		*	(1 << 1)  ; No ACKnowledge
I2C_INT_ARDY		*	(1 << 2)  ; Access ready
I2C_INT_RRDY		*	(1 << 3)  ; Receive data ready
I2C_INT_XRDY		*	(1 << 4)  ; Transmit data ready
I2C_INT_GC		*	(1 << 5)  ; General Call address detected
I2C_INT_STC		*	(1 << 6)  ; Start condition
I2C_INT_AERR		*	(1 << 7)  ; Access Error
I2C_INT_BF		*	(1 << 8)  ; Bus Free
I2C_INT_AAS		*	(1 << 9)  ; Address as slave recognized
I2C_INT_XUDF		*	(1 << 10) ; Transmit underflow
I2C_INT_ROVR		*	(1 << 11) ; Receive overrun
I2C_INT_BB		*	(1 << 12) ; Bus Busy (only IRQSTATUS*, STAT)
I2C_INT_RDR		*	(1 << 13) ; Receive draining
I2C_INT_XDR		*	(1 << 14) ; Transmit draining
d87 1
a87 1
I2C_SYSS_RDONE		*	(1 << 0)  ; Reset done bit
d90 14
a103 14
I2C_CON_STT		*	(1 << 0)  ; Start condition (master only)
I2C_CON_STP		*	(1 << 1)  ; Stop condition (master only)
I2C_CON_XOA3		*	(1 << 4)  ; eXpand Own Address 3
I2C_CON_XOA2		*	(1 << 5)  ; eXpand Own Address 2
I2C_CON_XOA1		*	(1 << 6)  ; eXpand Own Address 1
I2C_CON_XOA0		*	(1 << 7)  ; eXpand Own Address 0
I2C_CON_XSA		*	(1 << 8)  ; eXpand Slave Address
I2C_CON_TRX		*	(1 << 9)  ; Transmitter/Receiver mode (master only)
I2C_CON_MST		*	(1 << 10) ; Master mode
I2C_CON_STB		*	(1 << 11) ; Start byte mode (master only)
I2C_CON_OPMODE_FS	*	(0 << 12) ; Fast/Standard mode
I2C_CON_OPMODE_HS	*	(1 << 12) ; High Speed mode
I2C_CON_OPMODE_SCCB	*	(2 << 12) ; SCCB mode
I2C_CON_EN		*	(1 << 15) ; I2C module ENable
d106 8
a113 8
I2C_BUF_TXTRSH		*	(0x3F << 0)	; threshold value for TX FIFO
I2C_BUF_TXTRSH_SHIFT	*	0
I2C_BUF_TXFIFO_CLR	*	(1 << 6)	; TX FIFO clear
I2C_BUF_XDMA_EN		*	(1 << 7)	; TX DMA channel enable
I2C_BUF_RXTRSH		*	(0x3F << 8)	; threshold value for RX FIFO
I2C_BUF_RXTRSH_SHIFT	*	8
I2C_BUF_RXFIFO_CLR	*	(1 << 14)	; RX FIFO clear
I2C_BUF_RDMA_EN		*	(1 << 15)	; RX DMA channel enable
d116 9
a124 9
I2C_BUFSTAT_TXSTAT	*	(0x3F << 0)	; TX buffer status
I2C_BUFSTAT_TXSTAT_SHIFT *	0
I2C_BUFSTAT_RXSTAT	*	(0x3F << 8)	; RX buffer status
I2C_BUFSTAT_RXSTAT_SHIFT *	8
I2C_BUFSTAT_FIFODEPTH	*	(3 << 14)	; Internal FIFO buffers depth
I2C_BUFSTAT_FIFODEPTH8	*	(0 << 14)	; 8 bytes
I2C_BUFSTAT_FIFODEPTH16	*	(1 << 14)	; 16 bytes
I2C_BUFSTAT_FIFODEPTH32	*	(2 << 14)	; 32 bytes
I2C_BUFSTAT_FIFODEPTH64	*	(3 << 14)	; 64 bytes
d128 4
a131 4
I2C1_IRQ	*	OMAP44XX_IRQ_I2C1
I2C2_IRQ	*	OMAP44XX_IRQ_I2C2
I2C3_IRQ	*	OMAP44XX_IRQ_I2C3
I2C4_IRQ	*	OMAP44XX_IRQ_I2C4
d135 7
a141 7
		^	0
I2C_HW		#	4 ; Address of I2C hardware regs
I2C_XStart	#	4 ; iic_transfer array ptr (null for idle channel)
I2C_XEnd	#	4 ; array end ptr (inclusive)
I2C_XCurrent	#	4 ; Current iic_transfer ptr
I2C_XBytes	#	4 ; Bytes transferred in stage so far
I2CBlockSize	#	0
d144 5
a148 5
ECOMPLETED	*	0
EINPROGRESS	*	1
ENOACK		*	2
EBUSY		*	3
EERROR		*	5
d151 1
a151 1
	] ; __HAL_I2C_HDR__
d153 1
a153 1
	END
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
