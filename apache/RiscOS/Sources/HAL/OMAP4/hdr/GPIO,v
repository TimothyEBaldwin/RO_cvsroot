head	1.6;
access;
symbols
	OMAP4-0_60:1.6
	OMAP4-0_59-1_52_2_3:1.5.2.1
	OMAP4-0_59:1.6
	OMAP4-0_58:1.6
	OMAP4-0_57:1.5
	OMAP4-0_56:1.5
	OMAP4-0_55:1.5
	OMAP4-0_54-1_52_2_2:1.5
	OMAP4-0_54:1.5
	OMAP4-0_53:1.5
	OMAP4-0_52-1_52_2_1:1.5
	SMP:1.5.0.2
	SMP_bp:1.5
	OMAP4-0_52:1.5
	OMAP4-0_51:1.5
	OMAP4-0_50:1.5
	OMAP4-0_49:1.5
	OMAP4-0_48:1.5
	OMAP4-0_47:1.5
	OMAP4-0_46:1.5
	OMAP4-0_45:1.5
	OMAP4-0_44:1.5
	OMAP4-0_43:1.5
	OMAP4-0_42:1.5
	OMAP4-0_41:1.5
	OMAP4-0_40:1.5
	OMAP4-0_39:1.5
	OMAP4-0_38:1.5
	OMAP4-0_37:1.5
	OMAP4-0_36:1.5
	OMAP4-0_35:1.5
	OMAP4-0_34:1.5
	OMAP4-0_33:1.5
	OMAP4-0_32:1.5
	OMAP4-0_31:1.5
	OMAP4-0_30:1.5
	OMAP4-0_29:1.5
	OMAP4-0_28:1.5
	OMAP4-0_27:1.5
	OMAP4-0_26:1.5
	OMAP4-0_25:1.5
	OMAP4-0_24:1.5
	OMAP4-0_23:1.5
	OMAP4-0_22:1.5
	OMAP4-0_21:1.4
	OMAP4-0_20:1.4
	OMAP4-0_19:1.4
	OMAP4-0_18:1.4
	OMAP4-0_17:1.4
	OMAP4-0_16:1.4
	OMAP4-0_15:1.4
	OMAP4-0_14:1.3
	OMAP4-0_13:1.2
	OMAP4-0_12:1.2
	OMAP4-0_11:1.2
	OMAP4-0_10:1.2
	OMAP4-0_09:1.2
	OMAP4-0_08:1.2
	OMAP4-0_07:1.2
	OMAP4-0_06:1.1.1.1
	OMAP4-0_05:1.1.1.1
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2018.04.01.21.25.21;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	DGu4k0OhERg3GMwA;

1.5
date	2013.10.30.00.41.28;	author bavison;	state Exp;
branches
	1.5.2.1;
next	1.4;
commitid	Qv6dpkuXjCtQFfbx;

1.4
date	2013.04.10.21.15.47;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	qm7wa7AC4tnS1hLw;

1.3
date	2013.04.07.08.13.09;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	pJ3reWwimQfmNOKw;

1.2
date	2012.03.25.11.42.53;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	4FjnaYBzkPTA6gYv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.5.2.1
date	2018.07.07.14.32.10;	author jlee;	state Exp;
branches;
next	;
commitid	0eMRUMdd3I00hdJA;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.6
log
@Add GPIO device implementation
Update to API 1.0, and corresponding set of register wide accessor functions.
The tables of permitted pins come from staring at the schematics for any connectors, minus those that are "owned" by the OS.

Tested on a Pandaboard, toggling the two user LEDs and scanning the 'USER' push button (which, by the way, needs the pullup enabling as there isn't a discrete one).

Version 0.58. Tagged as 'OMAP4-0_58'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        [       :LNOT: :DEF: __HAL_GPIO_HDR__
        GBLL    __HAL_GPIO_HDR__

        GET     hdr.omap4_reg

; GPIO registers - relative to L4_GPIO1, L4_GPIO2, L4_GPIO3, etc.

GPIO_REVISION           *       &000
GPIO_SYSCONFIG          *       &010
GPIO_IRQSTATUS_RAW_0    *       &024
GPIO_IRQSTATUS_RAW_1    *       &028
GPIO_IRQSTATUS_0        *       &02C
GPIO_IRQSTATUS_1        *       &030
GPIO_IRQSTATUS_SET_0    *       &034
GPIO_IRQSTATUS_SET_1    *       &038
GPIO_IRQSTATUS_CLR_0    *       &03C
GPIO_IRQSTATUS_CLR_1    *       &040
GPIO_IRQWAKEN_0         *       &044
GPIO_IRQWAKEN_1         *       &048

GPIO_SYSTATUS           *       &114
GPIO_IRQSTATUS1         *       &118
GPIO_IRQENABLE1         *       &11C
GPIO_WAKEUPENABLE       *       &120
GPIO_IRQSTATUS2         *       &128
GPIO_IRQENABLE2         *       &12C
GPIO_CTRL               *       &130
GPIO_OE                 *       &134
GPIO_DATAIN             *       &138
GPIO_DATAOUT            *       &13C
GPIO_LEVELDETECT0       *       &140
GPIO_LEVELDETECT1       *       &144
GPIO_RISINGDETECT       *       &148
GPIO_FALLINGDETECT      *       &14C
GPIO_DEBOUNCEENABLE     *       &150
GPIO_DEBOUNCINGTIME     *       &154
GPIO_CLEARIRQENABLE1    *       &160
GPIO_SETIRQENABLE1      *       &164
GPIO_CLEARIRQENABLE2    *       &170
GPIO_SETIRQENABLE2      *       &174
GPIO_CLEARWKUPENA       *       &180
GPIO_SETWKUENA          *       &184
GPIO_CLEARDATAOUT       *       &190
GPIO_SETDATAOUT         *       &194


GPIO_PORT_MAX           * 6
GPIO_PIN_MAX            * (32 * GPIO_PORT_MAX)

; Flags for GPIOx_SetAndEnableIRQ
GPIO_LEVELDETECT0_FLAG  *       1
GPIO_LEVELDETECT1_FLAG  *       2
GPIO_RISINGDETECT_FLAG  *       4
GPIO_FALLINGDETECT_FLAG *       8

; interrupt number of lowest GPIO port
GPIO1_IRQ_NO            *       OMAP44XX_IRQ_GPIO1_MPU



; OMAP GPIO related macros
; All assume sb = HAL workspace

        ; Prepare for GPIO operations (constant pin)
        ; In:
        ;   $num = constant GPIO pin number
        ;   $cc = condition code
        ; Out:
        ;   $regs = GPIO register block ptr
        ;   $mask = bit mask for pin
        MACRO
        GPIO_PrepareC $regs, $mask, $num, $cc
        ASSERT  $regs <> $mask
        ASSERT  $num < GPIO_PIN_MAX
        LDR$cc  $regs, L4_GPIO_Table+4*($num>>5)
        MOV$cc  $mask, #1 :SHL: ($num :AND: 31)
        MEND
 
        ; Prepare for GPIO operations (register pin)
        ; In:
        ;   $num = register containing GPIO pin number
        ;   $cc = condition code
        ;   $tmp = optional temp register to avoid clobbering $num
        ; Out:
        ;   $regs = GPIO register block ptr
        ;   $mask = bit mask for pin
        ;   $num corrupted, unless $tmp specified
        MACRO
        GPIO_PrepareR $regs, $mask, $num, $cc, $tmp
        ASSERT  $regs <> $mask
 [ "$tmp" = ""
        ASSERT  $mask <> $num
  [ $regs = $num
        EOR$cc  $num, $num, #31
        MOV$cc  $mask, #&80000000
        MOV$cc  $mask, $mask, ROR $num
        MOV$cc  $regs, $num, LSR #5
        ADD$cc  $regs, sb, $regs, LSL #2
        LDR$cc  $regs, [$regs, #:INDEX:L4_GPIO_Table]
  |
        ; Slightly better instruction ordering
        MOV$cc  $regs, $num, LSR #5
        EOR$cc  $num, $num, #31
        ADD$cc  $regs, sb, $regs, LSL #2
        MOV$cc  $mask, #&80000000
        LDR$cc  $regs, [$regs, #:INDEX:L4_GPIO_Table]
        MOV$cc  $mask, $mask, ROR $num
  ]
 |
        ASSERT  $mask <> $tmp
        ASSERT  $regs <> $tmp
        ASSERT  $num <> $tmp ; no point using $tmp if the two are the same!
        ASSERT  $regs <> $num
        MOV$cc  $regs, $num, LSR #5
        EOR$cc  $tmp, $num, #31
        ADD$cc  $regs, sb, $regs, LSL #2
        MOV$cc  $mask, #&80000000
        LDR$cc  $regs, [$regs, #:INDEX:L4_GPIO_Table]
        MOV$cc  $mask, $mask, ROR $num
 ]
        MEND
 
        ; Set pin for output
        MACRO
        GPIO_SetAsOutput $regs, $mask, $temp, $cc
        ASSERT  $regs <> $temp
        ASSERT  $mask <> $temp
        LDR$cc  $temp, [$regs, #GPIO_OE]
        BIC$cc  $temp, $temp, $mask
        STR$cc  $temp, [$regs, #GPIO_OE]
        MEND
 
        ; Set pin for input
        MACRO
        GPIO_SetAsInput $regs, $mask, $temp, $cc
        ASSERT  $regs <> $temp
        ASSERT  $mask <> $temp
        LDR$cc  $temp, [$regs, #GPIO_OE]
        ORR$cc  $temp, $temp, $mask
        STR$cc  $temp, [$regs, #GPIO_OE]
        MEND
 
        ; Set output to 0
        MACRO
        GPIO_SetOutput0 $regs, $mask, $cc
        STR$cc  $mask, [$regs, #GPIO_CLEARDATAOUT]
        MEND
 
        ; Set output to 1
        MACRO
        GPIO_SetOutput1 $regs, $mask, $cc
        STR$cc  $mask, [$regs, #GPIO_SETDATAOUT]
        MEND
 
        ; Set output 0/1
        ; In:
        ;  $val = zero, or non-zero
        MACRO
        GPIO_SetOutput $val, $regs, $mask
        TEQ     $val, #0
        STRNE   $mask, [$regs, #GPIO_SETDATAOUT]
        STREQ   $mask, [$regs, #GPIO_CLEARDATAOUT]
        MEND
 
        ; Get input value
        ; Out:
        ;  $val = zero, or non-zero
        MACRO
        GPIO_GetInput $val, $regs, $mask, $cc 
        ASSERT  $mask <> $val
        LDR$cc  $val, [$regs, #GPIO_DATAIN]
        AND$cc  $val, $val, $mask
        MEND
 
        ; Get GPIO IRQ # (constant pin)
        MACRO
        GPIO_GetIRQC $irq, $pin, $cc
        MOV$cc  $irq, #($pin>>5) + GPIO1_IRQ_NO
        MEND
 
        ; Get GPIO IRQ # (register pin)
        MACRO
        GPIO_GetIRQR $irq, $pin, $cc
        MOV$cc  $irq, $pin, LSR #5
        ADD$cc  $irq, $irq, #GPIO1_IRQ_NO
        MEND
 
        ; Get GPIO IRQ # (as DCD)
        ; In:
        ;   $shared = "shared" to set bit 31
        MACRO
        GPIO_GetIRQD $pin, $shared
 [ $shared = "shared"
        DCD     ($pin>>5) + GPIO1_IRQ_NO + (1<<31)
 |
        ASSERT  $shared = ""
        DCD     ($pin>>5) + GPIO1_IRQ_NO
 ]
        MEND

        ] ; __HAL_GPIO_HDR__

        END
@


1.5
log
@  Replaced header file for licensing reasons
Detail:
  omap4_reg.h taken from FreeBSD projects/armv6/sys/arm/ti/omap4, trimmed to
  only include interrupt definitions, then updated so that symbol names and
  comments match Table 17.2 of the OMAP4460 TRM (SWPU235F) more closely - now
  the symbol names only differ in the prefix, and the absence of "IRQ"
  mid-string.  This was then translated very literally into objasm syntax to
  create hdr.omap4_reg, and used in place of hdr.irqs44xx.
Admin:
  Builds OK

Version 0.22. Tagged as 'OMAP4-0_22'
@
text
@d62 2
a63 1
GPIO_PIN_MAX            *       192
d93 1
a93 1

d189 1
a189 1

d195 1
a195 1

d202 1
a202 1

@


1.5.2.1
log
@Merge in latest changes from HEAD

Version 0.59, 1.52.2.3. Tagged as 'OMAP4-0_59-1_52_2_3'
@
text
@d62 1
a62 2
GPIO_PORT_MAX           * 6
GPIO_PIN_MAX            * (32 * GPIO_PORT_MAX)
d92 1
a92 1
 
d188 1
a188 1
 
d194 1
a194 1
 
d201 1
a201 1
 
@


1.4
log
@Tidy ups to OMAP4
hdr.GPIO
  removed TWL/TPS pins (not available on OMAP4/TWL6030)
s.GPIO
  removed TWL/TPS related GPIO pins (not available on OMAP4/TWL6030)
s.SDIO
  some code cleanup (remove OMAP3 specific stuff)
s.Boot
  some code tweaks (tidy up)

Changes from Willi Theiss. Built, but not tested here.

Version 0.15. Tagged as 'OMAP4-0_15'
@
text
@d19 1
a19 1
        GET     hdr.irqs44xx
d71 1
a71 1
GPIO1_IRQ_NO            *       OMAP44XX_IRQ_GPIO1
@


1.3
log
@Changes for OMAP4 HAL
hdr/GPIO: aligned columns
hdr/USB: added more USB related register definitions (OTG and USBPHY)
hdr/Video: global variable for preventing multiple inclusion renamed to its original
hdr/irqs44xx: interrupt numbers and naming according to latest OMAP44xx TRMs
hdr/omap4430: address correction for L4_USBPHY
s/Audio:
    changed recovering from error conditions
    disabled kludge for supporting non native samplerates (44.1 + 48k)
s/PRCM:
    removed unused function PRCM_GetFreqSel and related table
s/SDIO
    aligned columns
s/USB
    name change for OTG interrupt source

Part of a number of changes from Willi Theiss.
Build, but not tested.

Version 0.14. Tagged as 'OMAP4-0_14'
@
text
@a73 33
; TWL/TPS GPIO registers
TPS_GPIODATAIN1         * &98 ; *3
TPS_GPIODATADIR1        * &9B ; *3
TPS_GPIODATAOUT1        * &9E ; *3
TPS_CLEARGPIODATAOUT1   * &A1 ; *3
TPS_SETGPIODATAOUT1     * &A4 ; *3
TPS_GPIO_DEBEN1         * &A7 ; *3
TPS_GPIO_CTRL           * &AA
TPS_GPIOPUPCTR1         * &AB ; *5
TPS_GPIO_ISR1A          * &B1 ; *3
TPS_GPIO_IMR1A          * &B4 ; *3
TPS_GPIO_ISR1B          * &B7 ; *3
TPS_GPIO_IMR1B          * &BA ; *3
TPS_GPIO_EDR1           * &C0 ; *5
TPS_GPIO_SIH_CTRL       * &C5
TPS_PMBR1               * &92
TPS_PMBR2               * &93

TPSGPIO_IIC             * &49

TPS_GPIO_PIN_MAX        * 17

; TWL/TPS LED registers
; (we treat these as extra output-only GPIOs, like Linux)
TPS_LEDEN               * &EE
TPS_PWMAON              * &EF
TPS_PWMAOFF             * &F0
TPS_PWMBON              * &F1
TPS_PWMBOFF             * &F2

TPSLED_IIC              * &4A

TPS_LED_PIN_MAX         * 2
@


1.2
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d23 37
a59 37
GPIO_REVISION           * &000
GPIO_SYSCONFIG          * &010
GPIO_IRQSTATUS_RAW_0    * &024
GPIO_IRQSTATUS_RAW_1    * &028
GPIO_IRQSTATUS_0        * &02C
GPIO_IRQSTATUS_1        * &030
GPIO_IRQSTATUS_SET_0    * &034
GPIO_IRQSTATUS_SET_1    * &038
GPIO_IRQSTATUS_CLR_0    * &03C
GPIO_IRQSTATUS_CLR_1    * &040
GPIO_IRQWAKEN_0         * &044
GPIO_IRQWAKEN_1         * &048

GPIO_SYSTATUS           * &114
GPIO_IRQSTATUS1         * &118
GPIO_IRQENABLE1         * &11C
GPIO_WAKEUPENABLE       * &120
GPIO_IRQSTATUS2         * &128
GPIO_IRQENABLE2         * &12C
GPIO_CTRL               * &130
GPIO_OE                 * &134
GPIO_DATAIN             * &138
GPIO_DATAOUT            * &13C
GPIO_LEVELDETECT0       * &140
GPIO_LEVELDETECT1       * &144
GPIO_RISINGDETECT       * &148
GPIO_FALLINGDETECT      * &14C
GPIO_DEBOUNCEENABLE     * &150
GPIO_DEBOUNCINGTIME     * &154
GPIO_CLEARIRQENABLE1    * &160
GPIO_SETIRQENABLE1      * &164
GPIO_CLEARIRQENABLE2    * &170
GPIO_SETIRQENABLE2      * &174
GPIO_CLEARWKUPENA       * &180
GPIO_SETWKUENA          * &184
GPIO_CLEARDATAOUT       * &190
GPIO_SETDATAOUT         * &194
d62 1
a62 1
GPIO_PIN_MAX            * 192
d65 4
a68 4
GPIO_LEVELDETECT0_FLAG  * 1
GPIO_LEVELDETECT1_FLAG  * 2
GPIO_RISINGDETECT_FLAG  * 4
GPIO_FALLINGDETECT_FLAG * 8
d71 1
a71 1
GPIO1_IRQ_NO            * OMAP44XX_IRQ_GPIO1
d138 1
a138 1
  [ "$tmp" = ""
d140 1
a140 1
   [ $regs = $num
d147 1
a147 1
   |
d155 2
a156 2
   ]
  |
d167 1
a167 1
  ]
@


1.1
log
@Initial revision
@
text
@d16 2
a17 2
	[	:LNOT: :DEF: __HAL_GPIO_HDR__
	GBLL	__HAL_GPIO_HDR__
d19 1
a19 1
	GET	hdr.irqs44xx
d23 37
a59 37
GPIO_REVISION		*	&000
GPIO_SYSCONFIG		*	&010
GPIO_IRQSTATUS_RAW_0	*	&024
GPIO_IRQSTATUS_RAW_1	*	&028
GPIO_IRQSTATUS_0	*	&02C
GPIO_IRQSTATUS_1	*	&030
GPIO_IRQSTATUS_SET_0	*	&034
GPIO_IRQSTATUS_SET_1	*	&038
GPIO_IRQSTATUS_CLR_0	*	&03C
GPIO_IRQSTATUS_CLR_1	*	&040
GPIO_IRQWAKEN_0		*	&044
GPIO_IRQWAKEN_1		*	&048

GPIO_SYSTATUS		*	&114
GPIO_IRQSTATUS1		*	&118
GPIO_IRQENABLE1		*	&11C
GPIO_WAKEUPENABLE	*	&120
GPIO_IRQSTATUS2		*	&128
GPIO_IRQENABLE2		*	&12C
GPIO_CTRL		*	&130
GPIO_OE			*	&134
GPIO_DATAIN		*	&138
GPIO_DATAOUT		*	&13C
GPIO_LEVELDETECT0	*	&140
GPIO_LEVELDETECT1	*	&144
GPIO_RISINGDETECT	*	&148
GPIO_FALLINGDETECT	*	&14C
GPIO_DEBOUNCEENABLE	*	&150
GPIO_DEBOUNCINGTIME	*	&154
GPIO_CLEARIRQENABLE1	*	&160
GPIO_SETIRQENABLE1	*	&164
GPIO_CLEARIRQENABLE2	*	&170
GPIO_SETIRQENABLE2	*	&174
GPIO_CLEARWKUPENA	*	&180
GPIO_SETWKUENA		*	&184
GPIO_CLEARDATAOUT	*	&190
GPIO_SETDATAOUT		*	&194
d62 1
a62 1
GPIO_PIN_MAX		*	192
d65 4
a68 4
GPIO_LEVELDETECT0_FLAG	*	1
GPIO_LEVELDETECT1_FLAG	*	2
GPIO_RISINGDETECT_FLAG	*	4
GPIO_FALLINGDETECT_FLAG	*	8
d71 1
a71 1
GPIO1_IRQ_NO		*	OMAP44XX_IRQ_GPIO1
d75 16
a90 16
TPS_GPIODATAIN1		*	&98 ; *3
TPS_GPIODATADIR1	*	&9B ; *3
TPS_GPIODATAOUT1	*	&9E ; *3
TPS_CLEARGPIODATAOUT1	*	&A1 ; *3
TPS_SETGPIODATAOUT1	*	&A4 ; *3
TPS_GPIO_DEBEN1		*	&A7 ; *3
TPS_GPIO_CTRL		*	&AA
TPS_GPIOPUPCTR1		*	&AB ; *5
TPS_GPIO_ISR1A		*	&B1 ; *3
TPS_GPIO_IMR1A		*	&B4 ; *3
TPS_GPIO_ISR1B		*	&B7 ; *3
TPS_GPIO_IMR1B		*	&BA ; *3
TPS_GPIO_EDR1		*	&C0 ; *5
TPS_GPIO_SIH_CTRL	*	&C5
TPS_PMBR1		*	&92
TPS_PMBR2		*	&93
d92 1
a92 1
TPSGPIO_IIC		*	&49
d94 1
a94 1
TPS_GPIO_PIN_MAX	*	17
d98 5
a102 5
TPS_LEDEN		*	&EE
TPS_PWMAON		*	&EF
TPS_PWMAOFF		*	&F0
TPS_PWMBON		*	&F1
TPS_PWMBOFF		*	&F2
d104 1
a104 1
TPSLED_IIC		*	&4A
d106 1
a106 1
TPS_LED_PIN_MAX		*	2
d111 45
a155 36
	; Prepare for GPIO operations (constant pin)
	; In:
	;   $num = constant GPIO pin number
	;   $cc = condition code
	; Out:
	;   $regs = GPIO register block ptr
	;   $mask = bit mask for pin
	MACRO
	GPIO_PrepareC $regs, $mask, $num, $cc
	ASSERT	$regs <> $mask
	ASSERT	$num < GPIO_PIN_MAX
	LDR$cc	$regs, L4_GPIO_Table+4*($num>>5)
	MOV$cc	$mask, #1 :SHL: ($num :AND: 31)
	MEND

	; Prepare for GPIO operations (register pin)
	; In:
	;   $num = register containing GPIO pin number
	;   $cc = condition code
	;   $tmp = optional temp register to avoid clobbering $num
	; Out:
	;   $regs = GPIO register block ptr
	;   $mask = bit mask for pin
	;   $num corrupted, unless $tmp specified
	MACRO
	GPIO_PrepareR $regs, $mask, $num, $cc, $tmp
	ASSERT	$regs <> $mask
 [ "$tmp" = ""
	ASSERT	$mask <> $num
  [ $regs = $num
	EOR$cc	$num, $num, #31
	MOV$cc	$mask, #&80000000
	MOV$cc	$mask, $mask, ROR $num
	MOV$cc	$regs, $num, LSR #5
	ADD$cc	$regs, sb, $regs, LSL #2
	LDR$cc	$regs, [$regs, #:INDEX:L4_GPIO_Table]
d157 10
a166 7
	; Slightly better instruction ordering
	MOV$cc	$regs, $num, LSR #5
	EOR$cc	$num, $num, #31
	ADD$cc	$regs, sb, $regs, LSL #2
	MOV$cc	$mask, #&80000000
	LDR$cc	$regs, [$regs, #:INDEX:L4_GPIO_Table]
	MOV$cc	$mask, $mask, ROR $num
d168 72
a239 84
 |
	ASSERT	$mask <> $tmp
	ASSERT	$regs <> $tmp
	ASSERT	$num <> $tmp ; no point using $tmp if the two are the same!
	ASSERT	$regs <> $num
	MOV$cc	$regs, $num, LSR #5
	EOR$cc	$tmp, $num, #31
	ADD$cc	$regs, sb, $regs, LSL #2
	MOV$cc	$mask, #&80000000
	LDR$cc	$regs, [$regs, #:INDEX:L4_GPIO_Table]
	MOV$cc	$mask, $mask, ROR $num
 ]
	MEND

	; Set pin for output
	MACRO
	GPIO_SetAsOutput $regs, $mask, $temp, $cc
	ASSERT	$regs <> $temp
	ASSERT	$mask <> $temp
	LDR$cc	$temp, [$regs, #GPIO_OE]
	BIC$cc	$temp, $temp, $mask
	STR$cc	$temp, [$regs, #GPIO_OE]
	MEND

	; Set pin for input
	MACRO
	GPIO_SetAsInput $regs, $mask, $temp, $cc
	ASSERT	$regs <> $temp
	ASSERT	$mask <> $temp
	LDR$cc	$temp, [$regs, #GPIO_OE]
	ORR$cc	$temp, $temp, $mask
	STR$cc	$temp, [$regs, #GPIO_OE]
	MEND

	; Set output to 0
	MACRO
	GPIO_SetOutput0 $regs, $mask, $cc
	STR$cc	$mask, [$regs, #GPIO_CLEARDATAOUT]
	MEND

	; Set output to 1
	MACRO
	GPIO_SetOutput1 $regs, $mask, $cc
	STR$cc	$mask, [$regs, #GPIO_SETDATAOUT]
	MEND

	; Set output 0/1
	; In:
	;  $val = zero, or non-zero
	MACRO
	GPIO_SetOutput $val, $regs, $mask
	TEQ	$val, #0
	STRNE	$mask, [$regs, #GPIO_SETDATAOUT]
	STREQ	$mask, [$regs, #GPIO_CLEARDATAOUT]
	MEND

	; Get input value
	; Out:
	;  $val = zero, or non-zero
	MACRO
	GPIO_GetInput $val, $regs, $mask, $cc
	ASSERT	$mask <> $val
	LDR$cc	$val, [$regs, #GPIO_DATAIN]
	AND$cc	$val, $val, $mask
	MEND

	; Get GPIO IRQ # (constant pin)
	MACRO
	GPIO_GetIRQC $irq, $pin, $cc
	MOV$cc	$irq, #($pin>>5) + GPIO1_IRQ_NO
	MEND

	; Get GPIO IRQ # (register pin)
	MACRO
	GPIO_GetIRQR $irq, $pin, $cc
	MOV$cc	$irq, $pin, LSR #5
	ADD$cc	$irq, $irq, #GPIO1_IRQ_NO
	MEND

	; Get GPIO IRQ # (as DCD)
	; In:
	;   $shared = "shared" to set bit 31
	MACRO
	GPIO_GetIRQD $pin, $shared
d241 1
a241 1
	DCD	($pin>>5) + GPIO1_IRQ_NO + (1<<31)
d243 2
a244 2
	ASSERT	$shared = ""
	DCD	($pin>>5) + GPIO1_IRQ_NO
d246 1
a246 1
	MEND
d248 1
a248 1
	] ; __HAL_GPIO_HDR__
d250 1
a250 1
	END
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
