head	1.7;
access;
symbols
	OMAP4-0_60:1.7
	OMAP4-0_59-1_52_2_3:1.7
	OMAP4-0_59:1.7
	OMAP4-0_58:1.7
	OMAP4-0_57:1.7
	OMAP4-0_56:1.7
	OMAP4-0_55:1.7
	OMAP4-0_54-1_52_2_2:1.7
	OMAP4-0_54:1.7
	OMAP4-0_53:1.7
	OMAP4-0_52-1_52_2_1:1.7
	SMP:1.7.0.2
	SMP_bp:1.7
	OMAP4-0_52:1.7
	OMAP4-0_51:1.7
	OMAP4-0_50:1.7
	OMAP4-0_49:1.7
	OMAP4-0_48:1.7
	OMAP4-0_47:1.7
	OMAP4-0_46:1.7
	OMAP4-0_45:1.7
	OMAP4-0_44:1.7
	OMAP4-0_43:1.7
	OMAP4-0_42:1.7
	OMAP4-0_41:1.7
	OMAP4-0_40:1.7
	OMAP4-0_39:1.7
	OMAP4-0_38:1.7
	OMAP4-0_37:1.7
	OMAP4-0_36:1.7
	OMAP4-0_35:1.7
	OMAP4-0_34:1.7
	OMAP4-0_33:1.6
	OMAP4-0_32:1.6
	OMAP4-0_31:1.6
	OMAP4-0_30:1.6
	OMAP4-0_29:1.6
	OMAP4-0_28:1.6
	OMAP4-0_27:1.6
	OMAP4-0_26:1.6
	OMAP4-0_25:1.5
	OMAP4-0_24:1.5
	OMAP4-0_23:1.5
	OMAP4-0_22:1.5
	OMAP4-0_21:1.4
	OMAP4-0_20:1.4
	OMAP4-0_19:1.4
	OMAP4-0_18:1.4
	OMAP4-0_17:1.4
	OMAP4-0_16:1.4
	OMAP4-0_15:1.4
	OMAP4-0_14:1.4
	OMAP4-0_13:1.4
	OMAP4-0_12:1.4
	OMAP4-0_11:1.4
	OMAP4-0_10:1.4
	OMAP4-0_09:1.4
	OMAP4-0_08:1.4
	OMAP4-0_07:1.4
	OMAP4-0_06:1.3
	OMAP4-0_05:1.2
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.04.22.06.48.03;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	eiJRxQSZyLUP6Exx;

1.6
date	2013.11.16.12.42.11;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	rq7TCNxuD31f7vdx;

1.5
date	2013.10.30.00.41.28;	author bavison;	state Exp;
branches;
next	1.4;
commitid	Qv6dpkuXjCtQFfbx;

1.4
date	2012.03.25.11.42.53;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	4FjnaYBzkPTA6gYv;

1.3
date	2012.03.25.10.28.43;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	wcxutstPODhaHfYv;

1.2
date	2012.02.11.17.48.05;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	W3PfhFs2h9uBvLSv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.7
log
@Improvements to audio FIFOing
hdr/Audio: split AudioChannels to allow new AudioDMASize field to differentiate OMAP4430 v 4460.
Audio.s: handle FIFO underflow events of the audio stream, differentiate FIFO sizes for OMAP4430 v 4460.
SDMA.s: add prefetch flag in DMA control for audio channel
Submission from Willi Theiss.

Version 0.34. Tagged as 'OMAP4-0_34'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        [       :LNOT: :DEF: __HAL_AUDIO_HDR__
        GBLL    __HAL_AUDIO_HDR__

        GET     hdr.omap4_reg
        GET     hdr.SDMA

        GET     Hdr:AudioDevice
        GET     Hdr:MixerDevice



; McPDM (Multi channel Pulse Density Modulation) - relative to L4_McPDM
MCPDM_REVISION          *       &0000
MCPDM_SYSCONFIG         *       &0010
MCPDM_IRQSTATUS_RAW     *       &0024
MCPDM_IRQSTATUS         *       &0028
MCPDM_IRQENABLE_SET     *       &002C
MCPDM_IRQENABLE_CLR     *       &0030
MCPDM_IRQWAKEEN         *       &0034
MCPDM_DMAENABLE_SET     *       &0038
MCPDM_DMAENABLE_CLR     *       &003C
MCPDM_DMAWAKEEN         *       &0040
MCPDM_CTRL              *       &0044
MCPDM_DN_DATA           *       &0048
MCPDM_UP_DATA           *       &004C
MCPDM_FIFO_CTRL_DN      *       &0050
MCPDM_FIFO_CTRL_UP      *       &0054
MCPDM_DN_OFFSET         *       &0058

; bits in MCPDM_SYSCONFIG
MCPDM_SYSCONFIG_SOFTRESET       *       (1 << 0)
MCPDM_SYSCONFIG_FREEMU          *       (1 << 1)
MCPDM_SYSCONFIG_IDLEMODE        *       (3 << 2)
MCPDM_SYSCONFIG_IDLEMODE_FORCE  *       (0 << 2)
MCPDM_SYSCONFIG_IDLEMODE_NONE   *       (1 << 2)
MCPDM_SYSCONFIG_IDLEMODE_SMART  *       (2 << 2)
MCPDM_SYSCONFIG_IDLEMODE_WAKEUP *       (3 << 2)

; IRQ bits in MCPDM_IRQSTATUS, MCPDM_IRQSTATUS_RAW, MCPDM_IRQENABLE_SET/CLR
MCPDM_IRQ_DN                    *       (1 << 0)
MCPDM_IRQ_DN_EMPTY              *       (1 << 1)
MCPDM_IRQ_DN_ALST_EMPTY         *       (1 << 2)
MCPDM_IRQ_DN_FULL               *       (1 << 3)
MCPDM_IRQ_UP                    *       (1 << 8)
MCPDM_IRQ_UP_EMPTY              *       (1 << 9)
MCPDM_IRQ_UP_ALST_FULL          *       (1 << 10)
MCPDM_IRQ_UP_FULL               *       (1 << 11)

; bits in MCPDM_IRQWAKEEN
MCPDM_IRQWAKEEN_DN              *       (1 << 0)
MCPDM_IRQWAKEEN_UP              *       (1 << 1)

; DMA bits in MCPDM_DMAENABLE_SET/CLR + MCPDM_DMAWAKEEN
MCPDM_DMA_DN                    *       (1 << 0)
MCPDM_DMA_UP                    *       (1 << 1)

; bits in MCPDM_CTRL
MCPDM_CTRL_PDM_UP1_EN           *       (1 << 0)
MCPDM_CTRL_PDM_UP2_EN           *       (1 << 1)
MCPDM_CTRL_PDM_UP3_EN           *       (1 << 2)
MCPDM_CTRL_PDM_DN1_EN           *       (1 << 3)
MCPDM_CTRL_PDM_DN2_EN           *       (1 << 4)
MCPDM_CTRL_PDM_DN3_EN           *       (1 << 5)
MCPDM_CTRL_PDM_DN4_EN           *       (1 << 6)
MCPDM_CTRL_PDM_DN5_EN           *       (1 << 7)
MCPDM_CTRL_PDMOUTFORMAT         *       (1 << 8)
MCPDM_CTRL_CMD_INT              *       (1 << 9)
MCPDM_CTRL_STATUS_INT           *       (1 << 10)
MCPDM_CTRL_SW_UP_RST            *       (1 << 11)
MCPDM_CTRL_SW_DN_RST            *       (1 << 12)
MCPDM_CTRL_DIV_SEL              *       (1 << 13)
MCPDM_CTRL_WD_EN                *       (1 << 14)

; bits in MCPDM_FIFO_CTRL_UP/DN
MCPDM_FIFO_CTRL_THRESH_MAX      *       0x0F

; bits in MCPDM_DN_OFFSET
MCPDM_DN_OFFSET_DN_OFST_RX1_EN  *       (1 << 0)
MCPDM_DN_OFFSET_DN_OFST_RX1     *       (0x1F << 1)
MCPDM_DN_OFFSET_DN_OFST_RX2_EN  *       (1 << 8)
MCPDM_DN_OFFSET_DN_OFST_RX2     *       (0x1F << 9)


; TWL6040 audio IIC address
TWL6040_IIC     *       &4B

; TWL6040 register
TWL6040_REG_ASICID              *       0x01
TWL6040_REG_ASICREV             *       0x02
TWL6040_REG_INTID               *       0x03    ; Interrupt ID Register
TWL6040_REG_INTMR               *       0x04    ; Interrupt Mask Register
TWL6040_REG_NCPCTL              *       0x05    ; NCP Control
TWL6040_REG_LDOCTL              *       0x06    ; LDO Control
TWL6040_REG_HPPLLCTL            *       0x07    ; High Performance PLL Control
TWL6040_REG_LPPLLCTL            *       0x08    ; Low Power PLL Control
TWL6040_REG_LPPLLDIV            *       0x09    ; Low Power PLL Divider
TWL6040_REG_AMICBCTL            *       0x0A    ; Analog Microphone Biasing Control
TWL6040_REG_DMICBCTL            *       0x0B    ; Digital Microphone Biasing Control
TWL6040_REG_MICLCTL             *       0x0C    ; Microphone Left Channel Control
TWL6040_REG_MICRCTL             *       0x0D    ; Microphone Right Channel Control
TWL6040_REG_MICGAIN             *       0x0E    ; Microphone Amplifier Gain
TWL6040_REG_LINEGAIN            *       0x0F    ; Line Amplifier Gain
TWL6040_REG_HSLCTL              *       0x10    ; Headset Left Channel Control
TWL6040_REG_HSRCTL              *       0x11    ; Headset Right Channel Control
TWL6040_REG_HSGAIN              *       0x12    ; Headset Left/Right Channel Gain
TWL6040_REG_EARCTL              *       0x13    ; Ear Channel Control
TWL6040_REG_HFLCTL              *       0x14    ; Hands-free Left Channel Control
TWL6040_REG_HFLGAIN             *       0x15    ; Hands-free Left Channel Gain
TWL6040_REG_HFRCTL              *       0x16    ; Hands-free Right Channel Control
TWL6040_REG_HFRGAIN             *       0x17    ; Hands-free Right Channel Gain
TWL6040_REG_VIBCTLL             *       0x18    ; Vibrator Left Channel Control
TWL6040_REG_VIBDATL             *       0x19    ; Vibrator Left Channel Data
TWL6040_REG_VIBCTLR             *       0x1A    ; Vibrator Right Channel Control
TWL6040_REG_VIBDATR             *       0x1B    ; Vibrator Right Channel Data
TWL6040_REG_HKCTL1              *       0x1C    ; Hook Detect Control 1
TWL6040_REG_HKCTL2              *       0x1D    ; Hook Detect Control 2
TWL6040_REG_GPOCTL              *       0x1E    ; General Purpose Output Buffer Control
TWL6040_REG_ALB                 *       0x1F    ; Analog Loop-Back
TWL6040_REG_DLB                 *       0x20    ; Digital Loop-Back
TWL6040_REG_TRIM1               *       0x28
TWL6040_REG_TRIM2               *       0x29
TWL6040_REG_TRIM3               *       0x2A
TWL6040_REG_HSOTRIM             *       0x2B    ; Headset Offset Trimming
TWL6040_REG_HFOTRIM             *       0x2C    ; Hands-free Offset Trimming
TWL6040_REG_ACCCTL              *       0x2D    ; Access Control
TWL6040_REG_STATUS              *       0x2E

; INTID (0x03) fields
TWL6040_THINT                   *       (1 << 0) ; Die temperature overlimit detection
TWL6040_PLUGINT                 *       (1 << 1) ; Plug insertion detection
TWL6040_UNPLUGINT               *       (1 << 2) ; Plug removal detection
TWL6040_HOOKINT                 *       (1 << 3) ; Hook send/end detection
TWL6040_HFINT                   *       (1 << 4) ; Hands-free driver overcurrent detection
TWL6040_VIBINT                  *       (1 << 5) ; Vibrator driver overcurrent detection
TWL6040_READYINT                *       (1 << 6) ; Completion of power-up sequence

; INTMR (0x04) fields
TWL6040_READYMSK                *       (1 << 6)
TWL6040_ALLINT_MSK              *       0x7B

; NCPCTL (0x05) fields
TWL6040_NCPENA                  *       (1 << 0)
TWL6040_NCPMODE                 *       (1 << 1)
TWL6040_NCPFETCTL               *       (1 << 2)
TWL6040_NCPFETSIZE              *       (7 << 3)
TWL6040_NCPOPEN                 *       (1 << 6)

; LDOCTL (0x06) fields
TWL6040_LSLDOENA                *       (1 << 0)
TWL6040_LSLDOSLEEP              *       (1 << 1)
TWL6040_HSLDOENA                *       (1 << 2)
TWL6040_HSLDOSLEEP              *       (1 << 3)
TWL6040_LSLDOHZ                 *       (1 << 4)
TWL6040_HSLDOHZ                 *       (1 << 5)
TWL6040_REFENA                  *       (1 << 6)
TWL6040_OSCENA                  *       (1 << 7)

; HPPLLCTL (0x07) fields
TWL6040_HPLLENA                 *       (1 << 0)
TWL6040_HPLLRST                 *       (1 << 1)
TWL6040_HPLLBP                  *       (1 << 2)
TWL6040_HPLLSQRENA              *       (1 << 3)
TWL6040_HPLLSQRBP               *       (1 << 4)
TWL6040_MCLK_MSK                *       (3 << 5)
TWL6040_MCLK_12000KHZ           *       (0 << 5)
TWL6040_MCLK_19200KHZ           *       (1 << 5)
TWL6040_MCLK_26000KHZ           *       (2 << 5)
TWL6040_MCLK_38400KHZ           *       (3 << 5)

; LPPLLCTL (0x08) fields
TWL6040_LPLLENA                 *       (1 << 0)
TWL6040_LPLLRST                 *       (1 << 1)
TWL6040_LPLLSEL                 *       (1 << 2)
TWL6040_LPLLFIN                 *       (1 << 3)
TWL6040_HPLLSEL                 *       (1 << 4)

; AMICBCTL (0x0A) fields
TWL6040_HMICBENA                *       (1 << 0)
TWL6040_HMICBSLP                *       (1 << 1)
TWL6040_HMICBPD                 *       (1 << 2)
TWL6040_HMICBSCDIS              *       (1 << 3)
TWL6040_MMICBENA                *       (1 << 4)
TWL6040_MMICBSLP                *       (1 << 5)
TWL6040_MMICBPD                 *       (1 << 6)
TWL6040_MMICBSCDIS              *       (1 << 7)

; DMICBCTL (0x0B) fields
TWL6040_DMICB1ENA               *       (1 << 0)
TWL6040_DMICB1SLP               *       (1 << 1)
TWL6040_DMICB1SEL               *       (1 << 2)
TWL6040_DMICB1SCDIS             *       (1 << 3)
TWL6040_DMICB2ENA               *       (1 << 4)
TWL6040_DMICB2SLP               *       (1 << 5)
TWL6040_DMICB2SEL               *       (1 << 6)
TWL6040_DMICB2SCDIS             *       (1 << 7)

; MICLCTL (0x0C) fields
TWL6040_MICAMPLENA              *       (1 << 0)
TWL6040_LINAMPLENA              *       (1 << 1)
TWL6040_ADCLENA                 *       (1 << 2)
TWL6040_MICLSEL                 *       (3 << 3)
TWL6040_MICLSEL_HS              *       (0 << 3)
TWL6040_MICLSEL_MAIN            *       (1 << 3)
TWL6040_MICLSEL_AUXFM           *       (2 << 3)
TWL6040_MICLSEL_NONE            *       (3 << 3)

; MICRCTL (0x0D) fields
TWL6040_MICAMPRENA              *       (1 << 0)
TWL6040_LINAMPRENA              *       (1 << 1)
TWL6040_ADCRENA                 *       (1 << 2)
TWL6040_MICRSEL                 *       (3 << 3)
TWL6040_MICRSEL_HS              *       (0 << 3)
TWL6040_MICRSEL_AUXMIC          *       (1 << 3)
TWL6040_MICRSEL_AUXFM           *       (2 << 3)
TWL6040_MICRSEL_NONE            *       (3 << 3)

; MICGAIN (0x0E) fields
TWL6040_MICGAINL                *       (7 << 0)
TWL6040_MICGAINR                *       (7 << 3)
TWL6040_MICATTL                 *       (1 << 6)
TWL6040_MICATTR                 *       (1 << 7)

; LINEGAIN (0x0F) fields
TWL6040_LINEGAINL               *       (7 << 0)
TWL6040_LINEGAINR               *       (7 << 3)

; HSLCTL (0x10) & HSRCTL (0x11) fields
TWL6040_HSDACENA                *       (1 << 0)
TWL6040_HSDACMODE               *       (1 << 1)
TWL6040_HSDRVENA                *       (1 << 2)
TWL6040_HSDRVMODE               *       (1 << 3)
TWL6040_HSDRVPD                 *       (1 << 4)
TWL6040_HSDAC                   *       (1 << 5)
TWL6040_HSFMLOOP                *       (1 << 6)
TWL6040_HSMN2ST                 *       (1 << 7)        ; only HSRCTL: Mono to Stereo

; HSGAIN (0x12) fields
TWL6040_HSGAINL                 *       (15 << 0)
TWL6040_HSGAINR                 *       (15 << 4)

; EARCTL (0x13) fields
TWL6040_EARENA                  *       (1 << 0)
TWL6040_EARGAIN                 *       (15 << 1)
TWL6040_SELEARFIR               *       (1 << 5)

; HFLCTL (0x14) & HFRCTL (0x16) fields
TWL6040_HFDACENA                *       (1 << 0)
TWL6040_HFPGAENA                *       (1 << 1)
TWL6040_HFDAC                   *       (1 << 2)
TWL6040_HFFMLOOP                *       (1 << 3)
TWL6040_HFDRVENA                *       (1 << 4)
TWL6040_HFMN2ST                 *       (1 << 5)        ; only HFRCTL: Mono to Stereo
TWL6040_HFSWENA                 *       (1 << 6)

; VIBCTLL (0x18) & VIBCTLR (0x1A) fields
TWL6040_VIBENA                  *       (1 << 0)
TWL6040_VIBSEL                  *       (1 << 1)
TWL6040_VIBCTRL                 *       (1 << 2)
TWL6040_VIBCTRLP                *       (1 << 3)
TWL6040_VIBCTRLN                *       (1 << 4)
TWL6040_VIBLOOPDIS              *       (1 << 5)

; HSOTRIM (0x2B) fields
TWL6040_HSLO                    *       (15 << 0)
TWL6040_HSRO                    *       (15 << 4)

; HFOTRIM (0x2C) fields
TWL6040_HFLO                    *       (15 << 0)
TWL6040_HFRO                    *       (15 << 4)

; ACCCTL (0x2D) fields
TWL6040_I2CSEL                  *       (1 << 0)
TWL6040_PDMI2CSEL               *       (1 << 1)
TWL6040_RESETSPLIT              *       (1 << 2)
TWL6040_INTCLRMODE              *       (1 << 3)
TWL6040_I2CMODE                 *       (3 << 4)
TWL6040_I2CMODE_NM              *       (0 << 4)        ; Normal Mode
TWL6040_I2CMODE_FM              *       (1 << 4)        ; Fast Mode
TWL6040_I2CMODE_FMP             *       (2 << 4)        ; Fast Mode Plus
TWL6040_I2CMODE_HS              *       (3 << 4)        ; High Speed Mode
TWL6040_CLK32KSEL               *       (1 << 6)

; STATUS (0x2E) fields
TWL6040_HKCOMP                  *       (1 << 0)
TWL6040_PLUGCOMP                *       (1 << 1)
TWL6040_HFLOCDET                *       (1 << 2)        ; HFL Over Current Detection
TWL6040_HFROCDET                *       (1 << 3)        ; HFR Over Current Detection
TWL6040_VIBLOCDET               *       (1 << 4)        ; VIBL Over Current Detection
TWL6040_VIBROCDET               *       (1 << 5)        ; VIBR Over Current Detection
TWL6040_TSHUTDET                *       (1 << 6)        ; Thermal Detection Status



; McPDM DMA request IDs
McPDM_DMA_UP    *       SDMA_MCPDM_DMA_UP
McPDM_DMA_DN    *       SDMA_MCPDM_DMA_DOWN

AUDIO_DMA_CHAN  *       McPDM_DMA_DN

; McPDM IRQ numbers
AUDIO_IRQ       *       OMAP44XX_IRQ_MCPDM




; Audio device
                        ^       0, a1
; Public bits
AudioDevice             #       HALDevice_Audio_Size_2  ; API 2.0
; Private bits
AudioRegs               #       4       ; L4_McPDM_Log
AudioWorkspace          #       4       ; HAL workspace pointer
AudioMode               #       1       ; Softcopy of LPPLLCTL register
AudioMono               #       1       ; flag (mono or stereo)
AudioDMASize            #       1       ; max. FIFO size (used for DMA)
AudioChannels           #       1       ; McPDM channel mask
AudioChipCache          #       48      ; Softcopy of Audio chip register
Audio_DeviceSize        *       :INDEX: @@

; Mixer device
                        ^       0
MixerChannel_HeadsetOut #       1 ; Stereo headset output
MixerChannel_Earphone   #       1 ; Mono speaker output
MixerChannel_HandsFree  #       1 ; Stereo hands-free output
MixerChannel_AuxOutput  #       1 ; Stereo FM/aux output
MixerChannel_System     #       1 ; Stereo sound data generated by computer
MixerChannel_HeadsetMic #       1 ; Stereo headset mic
MixerChannel_AuxInput   #       1 ; Stereo FM/aux input
MixerChannel_MainMic    #       1 ; Mono main mic
MixerChannels           *       :INDEX: @@

                        ^       0, a1
; Public bits
MixerDevice             #       HALDevice_Mixer_Size_0_1        ; API 0.1
; Private bits
MixerSettings           #       8 * MixerChannels
MixerHeadsetGain        #       2 ; Cached HSGAIN value
MixerEarphoneGain       #       2 ; Cached EARCTL reg
MixerHandsFreeGain      #       2 ; Cached HFLCTL, HFRCTL regs
MixerAuxOutputGain      #       2 ; Cached HFLCTL, HFRCTL regs
MixerSystemGain         #       2 ; Cached LINEGAIN regs
MixerDisableFlags       #       1 ; Copy of BoardConfig_MixerChans, for convenience
                        #       1 ; Spare
Mixer_DeviceSize        *       :INDEX: @@

Audio_WorkspaceSize     *       (Audio_DeviceSize + Mixer_DeviceSize)


        ] ; __HAL_AUDIO_HDR__

        END
@


1.6
log
@Change audio device to API v2.0
For stereo reversal.
Comment corrections and extensions.
Added range check to gain controls.
Submission from Willi Theiss, built but not tested here.

Version 0.26. Tagged as 'OMAP4-0_26'
@
text
@d330 2
a331 1
AudioChannels           #       2       ; McPDM channel mask
@


1.5
log
@  Replaced header file for licensing reasons
Detail:
  omap4_reg.h taken from FreeBSD projects/armv6/sys/arm/ti/omap4, trimmed to
  only include interrupt definitions, then updated so that symbol names and
  comments match Table 17.2 of the OMAP4460 TRM (SWPU235F) more closely - now
  the symbol names only differ in the prefix, and the absence of "IRQ"
  mid-string.  This was then translated very literally into objasm syntax to
  create hdr.omap4_reg, and used in place of hdr.irqs44xx.
Admin:
  Builds OK

Version 0.22. Tagged as 'OMAP4-0_22'
@
text
@d324 1
a324 1
AudioDevice             #       HALDevice_Audio_Size_1
d348 1
a348 1
MixerDevice             #       HALDevice_Mixer_Size + 4        ; +4 for API 0.1
@


1.4
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d19 1
a19 1
        GET     hdr.irqs44xx
@


1.3
log
@Updates to OMAP4 port.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added DebugTiming macros
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.StaticWS
    added variable NVMemoryFound
    removed variables for NVRAM over SD card support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.KdbScan
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.NVMemory
    EEPROM support over JTAG port (EMU0/EMU1)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    use DMA for copying ROM at top of RAM
    added debug timing
    support for compressed images (as in OMAP3)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added debug timing OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.c.CLib
    reverted to version without SD card NVRAM support

Changes from Willi Theiss.
Assembles without errors, but not tested here.

Version 0.06. Tagged as 'OMAP4-0_06'
@
text
@d16 2
a17 2
	[	:LNOT: :DEF: __HAL_AUDIO_HDR__
	GBLL	__HAL_AUDIO_HDR__
d19 2
a20 2
	GET	hdr.irqs44xx
	GET	hdr.SDMA
d22 2
a23 2
	GET	Hdr:AudioDevice
	GET	Hdr:MixerDevice
d28 16
a43 16
MCPDM_REVISION		*	&0000
MCPDM_SYSCONFIG		*	&0010
MCPDM_IRQSTATUS_RAW	*	&0024
MCPDM_IRQSTATUS		*	&0028
MCPDM_IRQENABLE_SET	*	&002C
MCPDM_IRQENABLE_CLR	*	&0030
MCPDM_IRQWAKEEN		*	&0034
MCPDM_DMAENABLE_SET	*	&0038
MCPDM_DMAENABLE_CLR	*	&003C
MCPDM_DMAWAKEEN		*	&0040
MCPDM_CTRL		*	&0044
MCPDM_DN_DATA		*	&0048
MCPDM_UP_DATA		*	&004C
MCPDM_FIFO_CTRL_DN	*	&0050
MCPDM_FIFO_CTRL_UP	*	&0054
MCPDM_DN_OFFSET		*	&0058
d46 7
a52 7
MCPDM_SYSCONFIG_SOFTRESET	*	(1 << 0)
MCPDM_SYSCONFIG_FREEMU		*	(1 << 1)
MCPDM_SYSCONFIG_IDLEMODE	*	(3 << 2)
MCPDM_SYSCONFIG_IDLEMODE_FORCE	*	(0 << 2)
MCPDM_SYSCONFIG_IDLEMODE_NONE	*	(1 << 2)
MCPDM_SYSCONFIG_IDLEMODE_SMART	*	(2 << 2)
MCPDM_SYSCONFIG_IDLEMODE_WAKEUP	*	(3 << 2)
d55 8
a62 8
MCPDM_IRQ_DN			*	(1 << 0)
MCPDM_IRQ_DN_EMPTY		*	(1 << 1)
MCPDM_IRQ_DN_ALST_EMPTY		*	(1 << 2)
MCPDM_IRQ_DN_FULL		*	(1 << 3)
MCPDM_IRQ_UP			*	(1 << 8)
MCPDM_IRQ_UP_EMPTY		*	(1 << 9)
MCPDM_IRQ_UP_ALST_FULL		*	(1 << 10)
MCPDM_IRQ_UP_FULL		*	(1 << 11)
d65 2
a66 2
MCPDM_IRQWAKEEN_DN		*	(1 << 0)
MCPDM_IRQWAKEEN_UP		*	(1 << 1)
d69 2
a70 2
MCPDM_DMA_DN			*	(1 << 0)
MCPDM_DMA_UP			*	(1 << 1)
d73 15
a87 15
MCPDM_CTRL_PDM_UP1_EN		*	(1 << 0)
MCPDM_CTRL_PDM_UP2_EN		*	(1 << 1)
MCPDM_CTRL_PDM_UP3_EN		*	(1 << 2)
MCPDM_CTRL_PDM_DN1_EN		*	(1 << 3)
MCPDM_CTRL_PDM_DN2_EN		*	(1 << 4)
MCPDM_CTRL_PDM_DN3_EN		*	(1 << 5)
MCPDM_CTRL_PDM_DN4_EN		*	(1 << 6)
MCPDM_CTRL_PDM_DN5_EN		*	(1 << 7)
MCPDM_CTRL_PDMOUTFORMAT		*	(1 << 8)
MCPDM_CTRL_CMD_INT		*	(1 << 9)
MCPDM_CTRL_STATUS_INT		*	(1 << 10)
MCPDM_CTRL_SW_UP_RST		*	(1 << 11)
MCPDM_CTRL_SW_DN_RST		*	(1 << 12)
MCPDM_CTRL_DIV_SEL		*	(1 << 13)
MCPDM_CTRL_WD_EN		*	(1 << 14)
d90 1
a90 1
MCPDM_FIFO_CTRL_THRESH_MAX	*	0x0F
d93 4
a96 4
MCPDM_DN_OFFSET_DN_OFST_RX1_EN	*	(1 << 0)
MCPDM_DN_OFFSET_DN_OFST_RX1	*	(0x1F << 1)
MCPDM_DN_OFFSET_DN_OFST_RX2_EN	*	(1 << 8)
MCPDM_DN_OFFSET_DN_OFST_RX2	*	(0x1F << 9)
d100 1
a100 1
TWL6040_IIC	*	&4B
d103 39
a141 39
TWL6040_REG_ASICID		*	0x01
TWL6040_REG_ASICREV		*	0x02
TWL6040_REG_INTID		*	0x03	; Interrupt ID Register
TWL6040_REG_INTMR		*	0x04	; Interrupt Mask Register
TWL6040_REG_NCPCTL		*	0x05	; NCP Control
TWL6040_REG_LDOCTL		*	0x06	; LDO Control
TWL6040_REG_HPPLLCTL		*	0x07	; High Performance PLL Control
TWL6040_REG_LPPLLCTL		*	0x08	; Low Power PLL Control
TWL6040_REG_LPPLLDIV		*	0x09	; Low Power PLL Divider
TWL6040_REG_AMICBCTL		*	0x0A	; Analog Microphone Biasing Control
TWL6040_REG_DMICBCTL		*	0x0B	; Digital Microphone Biasing Control
TWL6040_REG_MICLCTL		*	0x0C	; Microphone Left Channel Control
TWL6040_REG_MICRCTL		*	0x0D	; Microphone Right Channel Control
TWL6040_REG_MICGAIN		*	0x0E	; Microphone Amplifier Gain
TWL6040_REG_LINEGAIN		*	0x0F	; Line Amplifier Gain
TWL6040_REG_HSLCTL		*	0x10	; Headset Left Channel Control
TWL6040_REG_HSRCTL		*	0x11	; Headset Right Channel Control
TWL6040_REG_HSGAIN		*	0x12	; Headset Left/Right Channel Gain
TWL6040_REG_EARCTL		*	0x13	; Ear Channel Control
TWL6040_REG_HFLCTL		*	0x14	; Hands-free Left Channel Control
TWL6040_REG_HFLGAIN		*	0x15	; Hands-free Left Channel Gain
TWL6040_REG_HFRCTL		*	0x16	; Hands-free Right Channel Control
TWL6040_REG_HFRGAIN		*	0x17	; Hands-free Right Channel Gain
TWL6040_REG_VIBCTLL		*	0x18	; Vibrator Left Channel Control
TWL6040_REG_VIBDATL		*	0x19	; Vibrator Left Channel Data
TWL6040_REG_VIBCTLR		*	0x1A	; Vibrator Right Channel Control
TWL6040_REG_VIBDATR		*	0x1B	; Vibrator Right Channel Data
TWL6040_REG_HKCTL1		*	0x1C	; Hook Detect Control 1
TWL6040_REG_HKCTL2		*	0x1D	; Hook Detect Control 2
TWL6040_REG_GPOCTL		*	0x1E	; General Purpose Output Buffer Control
TWL6040_REG_ALB			*	0x1F	; Analog Loop-Back
TWL6040_REG_DLB			*	0x20	; Digital Loop-Back
TWL6040_REG_TRIM1		*	0x28
TWL6040_REG_TRIM2		*	0x29
TWL6040_REG_TRIM3		*	0x2A
TWL6040_REG_HSOTRIM		*	0x2B	; Headset Offset Trimming
TWL6040_REG_HFOTRIM		*	0x2C	; Hands-free Offset Trimming
TWL6040_REG_ACCCTL		*	0x2D	; Access Control
TWL6040_REG_STATUS		*	0x2E
d144 7
a150 7
TWL6040_THINT			*	(1 << 0) ; Die temperature overlimit detection
TWL6040_PLUGINT			*	(1 << 1) ; Plug insertion detection
TWL6040_UNPLUGINT		*	(1 << 2) ; Plug removal detection
TWL6040_HOOKINT			*	(1 << 3) ; Hook send/end detection
TWL6040_HFINT			*	(1 << 4) ; Hands-free driver overcurrent detection
TWL6040_VIBINT			*	(1 << 5) ; Vibrator driver overcurrent detection
TWL6040_READYINT		*	(1 << 6) ; Completion of power-up sequence
d153 2
a154 2
TWL6040_READYMSK		*	(1 << 6)
TWL6040_ALLINT_MSK		*	0x7B
d157 5
a161 5
TWL6040_NCPENA			*	(1 << 0)
TWL6040_NCPMODE			*	(1 << 1)
TWL6040_NCPFETCTL		*	(1 << 2)
TWL6040_NCPFETSIZE		*	(7 << 3)
TWL6040_NCPOPEN			*	(1 << 6)
d164 8
a171 8
TWL6040_LSLDOENA		*	(1 << 0)
TWL6040_LSLDOSLEEP		*	(1 << 1)
TWL6040_HSLDOENA		*	(1 << 2)
TWL6040_HSLDOSLEEP		*	(1 << 3)
TWL6040_LSLDOHZ			*	(1 << 4)
TWL6040_HSLDOHZ			*	(1 << 5)
TWL6040_REFENA			*	(1 << 6)
TWL6040_OSCENA			*	(1 << 7)
d174 10
a183 10
TWL6040_HPLLENA			*	(1 << 0)
TWL6040_HPLLRST			*	(1 << 1)
TWL6040_HPLLBP			*	(1 << 2)
TWL6040_HPLLSQRENA		*	(1 << 3)
TWL6040_HPLLSQRBP		*	(1 << 4)
TWL6040_MCLK_MSK		*	(3 << 5)
TWL6040_MCLK_12000KHZ		*	(0 << 5)
TWL6040_MCLK_19200KHZ		*	(1 << 5)
TWL6040_MCLK_26000KHZ		*	(2 << 5)
TWL6040_MCLK_38400KHZ		*	(3 << 5)
d186 5
a190 5
TWL6040_LPLLENA			*	(1 << 0)
TWL6040_LPLLRST			*	(1 << 1)
TWL6040_LPLLSEL			*	(1 << 2)
TWL6040_LPLLFIN			*	(1 << 3)
TWL6040_HPLLSEL			*	(1 << 4)
d193 8
a200 8
TWL6040_HMICBENA		*	(1 << 0)
TWL6040_HMICBSLP		*	(1 << 1)
TWL6040_HMICBPD			*	(1 << 2)
TWL6040_HMICBSCDIS		*	(1 << 3)
TWL6040_MMICBENA		*	(1 << 4)
TWL6040_MMICBSLP		*	(1 << 5)
TWL6040_MMICBPD			*	(1 << 6)
TWL6040_MMICBSCDIS		*	(1 << 7)
d203 8
a210 8
TWL6040_DMICB1ENA		*	(1 << 0)
TWL6040_DMICB1SLP		*	(1 << 1)
TWL6040_DMICB1SEL		*	(1 << 2)
TWL6040_DMICB1SCDIS		*	(1 << 3)
TWL6040_DMICB2ENA		*	(1 << 4)
TWL6040_DMICB2SLP		*	(1 << 5)
TWL6040_DMICB2SEL		*	(1 << 6)
TWL6040_DMICB2SCDIS		*	(1 << 7)
d213 8
a220 8
TWL6040_MICAMPLENA		*	(1 << 0)
TWL6040_LINAMPLENA		*	(1 << 1)
TWL6040_ADCLENA			*	(1 << 2)
TWL6040_MICLSEL			*	(3 << 3)
TWL6040_MICLSEL_HS		*	(0 << 3)
TWL6040_MICLSEL_MAIN		*	(1 << 3)
TWL6040_MICLSEL_AUXFM		*	(2 << 3)
TWL6040_MICLSEL_NONE		*	(3 << 3)
d223 8
a230 8
TWL6040_MICAMPRENA		*	(1 << 0)
TWL6040_LINAMPRENA		*	(1 << 1)
TWL6040_ADCRENA			*	(1 << 2)
TWL6040_MICRSEL			*	(3 << 3)
TWL6040_MICRSEL_HS		*	(0 << 3)
TWL6040_MICRSEL_AUXMIC		*	(1 << 3)
TWL6040_MICRSEL_AUXFM		*	(2 << 3)
TWL6040_MICRSEL_NONE		*	(3 << 3)
d233 4
a236 4
TWL6040_MICGAINL		*	(7 << 0)
TWL6040_MICGAINR		*	(7 << 3)
TWL6040_MICATTL			*	(1 << 6)
TWL6040_MICATTR			*	(1 << 7)
d239 2
a240 2
TWL6040_LINEGAINL		*	(7 << 0)
TWL6040_LINEGAINR		*	(7 << 3)
d243 8
a250 8
TWL6040_HSDACENA		*	(1 << 0)
TWL6040_HSDACMODE		*	(1 << 1)
TWL6040_HSDRVENA		*	(1 << 2)
TWL6040_HSDRVMODE		*	(1 << 3)
TWL6040_HSDRVPD			*	(1 << 4)
TWL6040_HSDAC			*	(1 << 5)
TWL6040_HSFMLOOP		*	(1 << 6)
TWL6040_HSMN2ST			*	(1 << 7)	; only HSRCTL: Mono to Stereo
d253 2
a254 2
TWL6040_HSGAINL			*	(15 << 0)
TWL6040_HSGAINR			*	(15 << 4)
d257 3
a259 3
TWL6040_EARENA			*	(1 << 0)
TWL6040_EARGAIN			*	(15 << 1)
TWL6040_SELEARFIR		*	(1 << 5)
d262 7
a268 7
TWL6040_HFDACENA		*	(1 << 0)
TWL6040_HFPGAENA		*	(1 << 1)
TWL6040_HFDAC			*	(1 << 2)
TWL6040_HFFMLOOP		*	(1 << 3)
TWL6040_HFDRVENA		*	(1 << 4)
TWL6040_HFMN2ST			*	(1 << 5)	; only HFRCTL: Mono to Stereo
TWL6040_HFSWENA			*	(1 << 6)
d271 6
a276 6
TWL6040_VIBENA			*	(1 << 0)
TWL6040_VIBSEL			*	(1 << 1)
TWL6040_VIBCTRL			*	(1 << 2)
TWL6040_VIBCTRLP		*	(1 << 3)
TWL6040_VIBCTRLN		*	(1 << 4)
TWL6040_VIBLOOPDIS		*	(1 << 5)
d279 2
a280 2
TWL6040_HSLO			*	(15 << 0)
TWL6040_HSRO			*	(15 << 4)
d283 2
a284 2
TWL6040_HFLO			*	(15 << 0)
TWL6040_HFRO			*	(15 << 4)
d287 10
a296 10
TWL6040_I2CSEL			*	(1 << 0)
TWL6040_PDMI2CSEL		*	(1 << 1)
TWL6040_RESETSPLIT		*	(1 << 2)
TWL6040_INTCLRMODE		*	(1 << 3)
TWL6040_I2CMODE			*	(3 << 4)
TWL6040_I2CMODE_NM		*	(0 << 4)	; Normal Mode
TWL6040_I2CMODE_FM		*	(1 << 4)	; Fast Mode
TWL6040_I2CMODE_FMP		*	(2 << 4)	; Fast Mode Plus
TWL6040_I2CMODE_HS		*	(3 << 4)	; High Speed Mode
TWL6040_CLK32KSEL		*	(1 << 6)
d299 7
a305 7
TWL6040_HKCOMP			*	(1 << 0)
TWL6040_PLUGCOMP		*	(1 << 1)
TWL6040_HFLOCDET		*	(1 << 2)	; HFL Over Current Detection
TWL6040_HFROCDET		*	(1 << 3)	; HFR Over Current Detection
TWL6040_VIBLOCDET		*	(1 << 4)	; VIBL Over Current Detection
TWL6040_VIBROCDET		*	(1 << 5)	; VIBR Over Current Detection
TWL6040_TSHUTDET		*	(1 << 6)	; Thermal Detection Status
d310 2
a311 2
McPDM_DMA_UP	*	SDMA_MCPDM_DMA_UP
McPDM_DMA_DN	*	SDMA_MCPDM_DMA_DOWN
d313 1
a313 1
AUDIO_DMA_CHAN	*	McPDM_DMA_DN
d316 1
a316 1
AUDIO_IRQ	*	OMAP44XX_IRQ_MCPDM
d322 1
a322 1
			^	0, a1
d324 1
a324 1
AudioDevice		#	HALDevice_Audio_Size_1
d326 7
a332 7
AudioRegs		#	4	; L4_McPDM_Log
AudioWorkspace		#	4	; HAL workspace pointer
AudioMode		#	1	; Softcopy of LPPLLCTL register
AudioMono		#	1	; flag (mono or stereo)
AudioChannels		#	2	; McPDM channel mask
AudioChipCache		#	48	; Softcopy of Audio chip register
Audio_DeviceSize	*	:INDEX: @@
d335 10
a344 10
			^	0
MixerChannel_HeadsetOut #	1 ; Stereo headset output
MixerChannel_Earphone	#	1 ; Mono speaker output
MixerChannel_HandsFree	#	1 ; Stereo hands-free output
MixerChannel_AuxOutput	#	1 ; Stereo FM/aux output
MixerChannel_System	#	1 ; Stereo sound data generated by computer
MixerChannel_HeadsetMic #	1 ; Stereo headset mic
MixerChannel_AuxInput	#	1 ; Stereo FM/aux input
MixerChannel_MainMic	#	1 ; Mono main mic
MixerChannels		*	:INDEX: @@
d346 1
a346 1
			^	0, a1
d348 1
a348 1
MixerDevice		#	HALDevice_Mixer_Size + 4	; +4 for API 0.1
d350 9
a358 9
MixerSettings		#	8 * MixerChannels
MixerHeadsetGain	#	2 ; Cached HSGAIN value
MixerEarphoneGain	#	2 ; Cached EARCTL reg
MixerHandsFreeGain	#	2 ; Cached HFLCTL, HFRCTL regs
MixerAuxOutputGain	#	2 ; Cached HFLCTL, HFRCTL regs
MixerSystemGain		#	2 ; Cached LINEGAIN regs
MixerDisableFlags	#	1 ; Copy of BoardConfig_MixerChans, for convenience
			#	1 ; Spare
Mixer_DeviceSize	*	:INDEX: @@
d360 1
a360 1
Audio_WorkspaceSize	*	(Audio_DeviceSize + Mixer_DeviceSize)
d363 1
a363 1
	] ; __HAL_AUDIO_HDR__
d365 1
a365 1
	END
@


1.2
log
@Update to OMAP4 HAL.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    added further definitions for TWL6040 audio chip
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
    added further register descriptions according OMAP4 TRM
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.UART
    added further register descriptions according OMAP4 TRM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added definitions for OMAP4460 (Panda ES)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
    order of UART entries changed
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    don't reset debug UART
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    modifications according to OMAP3 version
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.debug
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.UART
    changes according to hdr.UART changes; HAL_UARTModemControl
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
    use definitions from hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    use definitions from hdr.SDMA
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added code to VideoDevice_Activate (enable DSS power)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    changes for working sound support

Submissions from Willi Theiss. Compiles, but not tested here.

Version 0.05. Tagged as 'OMAP4-0_05'
@
text
@d326 6
a331 4
AudioRegs		#	4 ; L4_McPDM_Log
AudioWorkspace		#	4 ; HAL workspace pointer
AudioMode		#	4 ; Softcopy of CODEC_MODE register
AudioChipCache		#	48 ; Softcopy of Audio chip register
@


1.1
log
@Initial revision
@
text
@d105 30
a134 30
TWL6040_REG_INTID		*	0x03
TWL6040_REG_INTMR		*	0x04
TWL6040_REG_NCPCTL		*	0x05
TWL6040_REG_LDOCTL		*	0x06
TWL6040_REG_HPPLLCTL		*	0x07
TWL6040_REG_LPPLLCTL		*	0x08
TWL6040_REG_LPPLLDIV		*	0x09
TWL6040_REG_AMICBCTL		*	0x0A
TWL6040_REG_DMICBCTL		*	0x0B
TWL6040_REG_MICLCTL		*	0x0C
TWL6040_REG_MICRCTL		*	0x0D
TWL6040_REG_MICGAIN		*	0x0E
TWL6040_REG_LINEGAIN		*	0x0F
TWL6040_REG_HSLCTL		*	0x10
TWL6040_REG_HSRCTL		*	0x11
TWL6040_REG_HSGAIN		*	0x12
TWL6040_REG_EARCTL		*	0x13
TWL6040_REG_HFLCTL		*	0x14
TWL6040_REG_HFLGAIN		*	0x15
TWL6040_REG_HFRCTL		*	0x16
TWL6040_REG_HFRGAIN		*	0x17
TWL6040_REG_VIBCTLL		*	0x18
TWL6040_REG_VIBDATL		*	0x19
TWL6040_REG_VIBCTLR		*	0x1A
TWL6040_REG_VIBDATR		*	0x1B
TWL6040_REG_HKCTL1		*	0x1C
TWL6040_REG_HKCTL2		*	0x1D
TWL6040_REG_GPOCTL		*	0x1E
TWL6040_REG_ALB			*	0x1F
TWL6040_REG_DLB			*	0x20
d138 3
a140 3
TWL6040_REG_HSOTRIM		*	0x2B
TWL6040_REG_HFOTRIM		*	0x2C
TWL6040_REG_ACCCTL		*	0x2D
d158 3
d165 1
d167 3
d192 93
a284 17
; HSLCTL (0x10) fields
TWL6040_HSDACMODEL		*	(1 << 1)
TWL6040_HSDRVMODEL		*	(1 << 3)

; HSRCTL (0x11) fields
TWL6040_HSDACMODER		*	(1 << 1)
TWL6040_HSDRVMODER		*	(1 << 3)

; VIBCTLL (0x18) fields
TWL6040_VIBCTRLLN		*	(1 << 4)
TWL6040_VIBCTRLLP		*	(1 << 2)
TWL6040_VIBENAL			*	(1 << 0)

; VIBCTLL (0x19) fields
TWL6040_VIBCTRLRN		*	(1 << 4)
TWL6040_VIBCTRLRP		*	(1 << 2)
TWL6040_VIBENAR			*	(1 << 0)
d287 2
d290 7
d299 1
d301 6
d329 1
d335 1
a335 1
MixerChannel_Predriver	#	1 ; Stereo speaker predriver output
d337 1
a337 1
MixerChannel_CarkitOut	#	1 ; Stereo carkit output
d339 1
a339 1
MixerChannel_HeadsetMic #	1 ; Mono headset mic
d341 1
a341 1
MixerChannel_CarkitMic	#	1 ; Mono carkit mic
d346 1
a346 1
MixerDevice		#	HALDevice_Mixer_Size
d349 5
a353 5
MixerHeadsetGain	#	2 ; Cached HS_GAIN_SET value
MixerPredriverGain	#	2 ; Cached PREDL_CTL, PREDR_CTL regs
MixerHandsFreeGain	#	2 ; Cached HFL_CTL, HFR_CTL regs
MixerCarkitOutGain	#	2 ; Cached PRECKL_CTL, PRECKR_CTL regs
MixerSystemGain		#	2 ; Cached ARXL1PGA, ARXR1PGA regs
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
