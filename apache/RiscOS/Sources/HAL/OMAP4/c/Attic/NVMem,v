head	1.2;
access;
symbols
	OMAP4-0_05:1.1.1.1
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.03.25.10.28.40;	author rsprowson;	state dead;
branches;
next	1.1;
commitid	wcxutstPODhaHfYv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.2
log
@Updates to OMAP4 port.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added DebugTiming macros
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.StaticWS
    added variable NVMemoryFound
    removed variables for NVRAM over SD card support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.KdbScan
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.NVMemory
    EEPROM support over JTAG port (EMU0/EMU1)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    use DMA for copying ROM at top of RAM
    added debug timing
    support for compressed images (as in OMAP3)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added debug timing OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.c.CLib
    reverted to version without SD card NVRAM support

Changes from Willi Theiss.
Assembles without errors, but not tested here.

Version 0.06. Tagged as 'OMAP4-0_06'
@
text
@/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//#define DEBUG_ENABLED

#include "common.h"
#include "NVMem.h"
#include "fat.h"

#ifdef DEBUG_ENABLED
#define DEBUG_SRCMDLINE
#define DEBUG_CHANGECLOCKDIVIDER
//#define DEBUG_WAITFORCMDI
#endif /* DEBUG_ENABLED */

/* SD/MMC commands */
#define CMD0		0x00000000
#define CMD1		0x01020000
#define CMD2		0x02090000
#define CMD3		0x031A0000
#define CMD5		0x05020000
#define CMD6		0x061B0000
#define CMD7		0x071A0000
#define CMD8		0x081A0000
#define CMD9		0x09090000
#define CMD16		0x101A0000
#define CMD17		0x113A0016
#define CMD18		0x123A0033
#define CMD23		0x171A0000
#define CMD25		0x193A0023
#define CMD55		0x371A0000
#define ACMD41		0x29020000

// The CAPA register
#define MMCHS_CAPA_VS18_1	26
#define MMCHS_CAPA_VS30_1	25
#define MMCHS_CAPA_VS33_1	24
#define MMCHS_CAPA_SRS_1	23
#define MMCHS_CAPA_DS_1		22
#define MMCHS_CAPA_HSS_1	21
#define MMCHS_CAPA_MBL_2	16
#define MMCHS_CAPA_TCU_1	7

static bool WaitForDataReady(ws *wsptr);
static void WaitForCMDI(ws *wsptr);
static void SoftwareResetCMDLine(ws *wsptr);
static int SendSDMMCCommand(ws *wsptr, uint uiCmd, uint uiArg);
static uint get_bitfield(uint value, uint bitnum, uint numbits);
static uint set_bitfield(uint value, uint bitnum, uint numbits, uint bitfield);
static uint read_and_clear_stat(ws *wsptr);
static void change_clock_divider(ws *wsptr, uint uiRatio);

static __inline uint min_uint(uint ui1, uint ui2)
{
	return (ui1 < ui2) ? ui1 : ui2;
}

extern void HAL_CounterDelay(int delay_microseconds);

int NVMem_C_read(ws *wsptr)
{
	uint uiDump = 0;
	int i = 0;
	int iLoopCounter = 0;
	bool bDone = false;
	uint uiVoltageWindow = 0;
	uint uiRCA = 0;	/* Relative Card Address */
	union data_area data_main;
	char volume_label[12] = "";
	char fattype[9] = "";
	int found = 0;
	uint FirstCluster = 0;
	uint Offset = 0;
	bool bCTO = false;
	uint FileSize = 0;
	uint BytesLoaded = 0;

	dprintf("Workspace = %X, a1 = %X\n", (uint)sb, (uint)wsptr);

#if 0
	/* OMAP44xx boots from MMC1 device ==> clocks are already enabled */
	/* Enable the MMCHS1 interface and functional clocks */
	uiDump = *(wsptr->PRCM_CM_ICLKEN1_CORE);
	dprintf("PRCM_CM_ICLKEN1_CORE is %08X\n", uiDump);
	*(wsptr->PRCM_CM_ICLKEN1_CORE) = uiDump | 0x01000000;
	uiDump = *(wsptr->PRCM_CM_ICLKEN1_CORE);
	dprintf("PRCM_CM_ICLKEN1_CORE is %08X\n", uiDump);

	uiDump = *(wsptr->PRCM_CM_FCLKEN1_CORE);
	dprintf("PRCM_CM_FCLKEN1_CORE is %08X\n", uiDump);
	*(wsptr->PRCM_CM_FCLKEN1_CORE) = uiDump | 0x01000000;
	uiDump = *(wsptr->PRCM_CM_FCLKEN1_CORE);
	dprintf("PRCM_CM_FCLKEN1_CORE is %08X\n", uiDump);
#endif

	/* Software reset the controller */
	uiDump = *(wsptr->MMCHS1_SYSSTATUS);
	dprintf("MMCHS1_SYSSTATUS is %08X\n", uiDump);
	*(wsptr->MMCHS1_SYSCONFIG) = 0x00000002;	/* Activate the reset */
	uiDump = *(wsptr->MMCHS1_SYSSTATUS);
	dprintf("MMCHS1_SYSSTATUS is %08X\n", uiDump);
	/* reset must get finished before we can do anything with this hardware module */
	do
	{
		uiDump = *(wsptr->MMCHS1_SYSSTATUS);
		if (uiDump & 1)
		{
			bDone = true;
		}
	} while (!bDone);

	/* Get the current value of CAPA */
	dprintf("About to read from MMCHS1_CAPA(%08p)\n", (void *)wsptr->MMCHS1_CAPA);
	uiDump = *(wsptr->MMCHS1_CAPA);

	dprintf("Value read from CAPA = %08X\n", uiDump);
	dprintf("VS18: %d (must be 1)\n", get_bitfield(uiDump, MMCHS_CAPA_VS18_1, 1));
	dprintf("VS30: %d (must be 1)\n", get_bitfield(uiDump, MMCHS_CAPA_VS30_1, 1));
	dprintf("VS33: %d (must be 0)\n", get_bitfield(uiDump, MMCHS_CAPA_VS33_1, 1));
	dprintf("SRS : %d (suspend-resume-functionality)\n",
			get_bitfield(uiDump, MMCHS_CAPA_SRS_1, 1));
	dprintf("DS  : %d (DMA support)\n", get_bitfield(uiDump, MMCHS_CAPA_DS_1, 1));
	dprintf("HSS : %d (HighSpeedSupport)\n", get_bitfield(uiDump, MMCHS_CAPA_HSS_1, 1));
	dprintf("MBL : %d (0:512,1:1024,2:2048 MaxBlockLength)\n",
			get_bitfield(uiDump, MMCHS_CAPA_MBL_2, 2));
	dprintf("TCU : %d (0:kHz,1:MHzTimeoutClockUnit)\n",
			get_bitfield(uiDump, MMCHS_CAPA_TCU_1, 1));
	*(wsptr->MMCHS1_CAPA) = uiDump | 0x06000000;	/* Activate VS18 and VS30 */

	// MMCHS default controller initialisation (22.6.1.3.1.4, p3134)

	// 1) Set default voltage support to 1.8V - set MMCHS1_HCTL[11:9] to 0x5
	*(wsptr->MMCHS1_HCTL) = set_bitfield(*(wsptr->MMCHS1_HCTL), 9, 3, 0x5);
	// note: 0x5 for 1.8V operation results in 0xA00 according to register explanation
	// not 0xB00 as stated in the step-by step Manual portion!!
	// 2) MMC bus to open drain -> set MMCHS1_CON[0] to 1
	*(wsptr->MMCHS1_CON) = set_bitfield(*(wsptr->MMCHS1_CON), 0, 1, 1);
	// 3) MMC data bus width to 1 -> set MMCHS1_HCTL[1] to 0
	*(wsptr->MMCHS1_HCTL) = set_bitfield(*(wsptr->MMCHS1_HCTL), 1, 1, 0);
	// 4) MMC Card's power off -> set MMCHS1_HCTL[8] to 0  //???
	*(wsptr->MMCHS1_HCTL) = set_bitfield(*(wsptr->MMCHS1_HCTL), 8, 1, 0);
	// 5) MMC Card's Clock is on : we switch off first, enable the clock and switch on again
	change_clock_divider(wsptr, 600);
	// 6) MMCHS1 controller bus power up -> set MMCHS1_HCTL[8] to 1
	*(wsptr->MMCHS1_HCTL) = set_bitfield(*(wsptr->MMCHS1_HCTL), 8, 1, 1);

	uiDump = *(wsptr->MMCHS1_CON);
	*(wsptr->MMCHS1_CON) = uiDump | 0x00000002; // set INIT to 1
	*(wsptr->MMCHS1_CMD) = 0; // Send Dummy command
	// Wait.  The TRM says 1 ms.
	// NOTE - This call assumes the counter has already been initialised.
	HAL_CounterDelay(1000); // Wait at least 1 ms

	SoftwareResetCMDLine(wsptr);
	WaitForCMDI(wsptr);
	// The STAT register should have bit 1 set.  In turn
	// we should set bit 1 to clear the status.
	uiDump = *(wsptr->MMCHS1_STAT);
	dprintf("Stage 1, STAT = %d\n", uiDump);
	*(wsptr->MMCHS1_STAT) = uiDump;

	// MMCHS Controller Pre-card Identification Configuration
	// (22.6.1.3.1.6, p3134)

	change_clock_divider(wsptr, 240);  // Should give 400 kHz
	*(wsptr->MMCHS1_CON) = 0x00000001; // Set MMC bus open drain

	HAL_CounterDelay(1000); // Wait at least 1 ms

	// MMC Card Identification (22.6.1.3.2, p3135)
	// Send CMD0
	*(wsptr->MMCHS1_CON) = 0x00000001; // MMC bus still open drain
	*(wsptr->MMCHS1_IE) = 0x00050001; // Enabe CC, CTO and CEB events
	// Don't set ISE as we aren't servicing interrupts!
	// Clear all status bits
	read_and_clear_stat(wsptr);
	i = SendSDMMCCommand(wsptr, CMD0, 0); // Set argument to 0
	dprintf("Result of CMD0 is %d\n", i);
	uiDump = read_and_clear_stat(wsptr);
	dprintf("CMD0 gives status %08X\n", uiDump);

	for (iLoopCounter = 0, bDone = false; (iLoopCounter < 32) && !bDone; iLoopCounter++)
	{
		read_and_clear_stat(wsptr);
		i = SendSDMMCCommand(wsptr, CMD1, 0x00FF8000); // Send op cond; OCR - JEDEC p 113/131
		dprintf("Result of CMD1 is %d\n", i);
		uiDump = read_and_clear_stat(wsptr);
		dprintf("CMD1 gives status %08X\n", uiDump);
		if (uiDump & 0x00010000) // CTO?
		{
			bCTO = true;
			bDone = true;
		}
		uiDump = *(wsptr->MMCHS1_RSP10);
		dprintf("CMD1 gives response %08X\n", uiDump);
		if (uiDump & 0x80000000) bDone = true;
	}
	if (!bCTO)
	{
		// If CMD1 didn't time out, it's an MMC.
		wsptr->CardType = CARDTYPE_MMC;
	}

	// If bCTO is true, it's an SD or SDHC card, so perform this
	// initialisation:
	if (bCTO)
	{
		HAL_CounterDelay(1000); // Wait at least 1 ms

		// Enable CERR, CIE, CCRC, CC, CTO and CEB events to occur
		*(wsptr->MMCHS1_IE) = 0x100F0001;
		// Send CMD8: Voltage select = 1, check pattern = AA
		i = SendSDMMCCommand(wsptr, CMD8, 0x000001AA);
		dprintf("Result of CMD8 is %d\n", i);
		uiDump = read_and_clear_stat(wsptr);
		dprintf("CMD8 gives status %08X\n", uiDump);
		uiDump = *(wsptr->MMCHS1_RSP10);
		dprintf("CMD8 gives response %08X\n", uiDump);

		HAL_CounterDelay(1000); // Wait at least 1 ms

		// Now we must loop round issuing CMD55 followed by ACMD41 until
		// the response to ACMD41 has the top bit set.
		for (iLoopCounter = 0, bDone = false, uiVoltageWindow = 0;
				(iLoopCounter < 5000) && !bDone; iLoopCounter++)
		{
			// The arg MUST be set to 0
			i = SendSDMMCCommand(wsptr, CMD55, 0x00000000);
			//dprintf("Result of CMD55 is %d\n", i);
			//dprintf("CMD55 gives status %08X\n", read_and_clear_stat());
			read_and_clear_stat(wsptr);
			uiDump = *(wsptr->MMCHS1_RSP10);
			//dprintf("CMD55 gives response %08X\n", uiDump);

			// Send ACMD41 with HCS = 1 and the voltage window in bits 23:0
			i = SendSDMMCCommand(wsptr, ACMD41, uiVoltageWindow | 0x40000000);
			//dprintf("Result of ACMD41 is %d\n", i);
			//dprintf("ACMD41 gives status %08X\n", read_and_clear_stat());
			read_and_clear_stat(wsptr);
			uiVoltageWindow = *(wsptr->MMCHS1_RSP10);
			//dprintf("ACMD41 gives response %08X\n", uiVoltageWindow);

			// Check the top bit
			bDone = ((uiVoltageWindow & 0x80000000) != 0);
			if ((uiVoltageWindow & 0x40000000) != 0)
			{
				wsptr->CardType = CARDTYPE_SDHC;
			}
			else
			{
				wsptr->CardType = CARDTYPE_SD;
			}
			uiVoltageWindow &= 0x00FFFFFF;
		}
		dprintf("Exited the card initialisation loop with counter = %d\n", iLoopCounter);
		dprintf("Card %s High Capacity\n", (wsptr->CardType == CARDTYPE_SDHC) ? "IS" : "is NOT");
	}

	// Let's try a CMD2.
	i = SendSDMMCCommand(wsptr, CMD2, 0); // Stuff bits, PLSS p60/49
	dprintf("Result of CMD2 is %d\n", i);
	uiDump = read_and_clear_stat(wsptr);
	dprintf("CMD2 gives status %08X\n", uiDump);
	// This time there are 128 bits of response, so:
	dprintf("Bits 127..96: %08X\n", *(wsptr->MMCHS1_RSP76));
	dprintf("Bits  95..64: %08X\n", *(wsptr->MMCHS1_RSP54));
	dprintf("Bits  63..32: %08X\n", *(wsptr->MMCHS1_RSP32));
	dprintf("Bits  31.. 0: %08X\n", *(wsptr->MMCHS1_RSP10));

	// Now CMD3, which will give us a new RCA (Relative Card Address).
	i = SendSDMMCCommand(wsptr, CMD3, 0);
	dprintf("Result of CMD3 is %d\n", i);
	uiDump = read_and_clear_stat(wsptr);
	dprintf("CMD3 gives status %08X\n", uiDump);
	uiDump = *(wsptr->MMCHS1_RSP10);
	dprintf("CMD3 gives response %08X\n", uiDump);
	uiRCA = (uiDump >> 16) & 0xFFFF;
	dprintf("RCA = %08X\n", uiRCA);

	change_clock_divider(wsptr, 12); // Should give 8 MHz

#if 0
	HAL_CounterDelay(1000);	/* Wait at least 1 ms */
#endif

	// Now CMD9, which will give us the CSD register's contents
	*(wsptr->MMCHS1_CON) = 0; // Bus is in push-pull mode
	*(wsptr->MMCHS1_IE) = 0x00070001; // CCRC, CC, CTO and CEB events
	i = SendSDMMCCommand(wsptr, CMD9, uiRCA << 16);
	dprintf("Result of CMD9 is %d\n", i);
	uiDump = read_and_clear_stat(wsptr);
	dprintf("CMD9 gives status %08X\n", uiDump);
	// This time there are 128 bits of response, so:
	dprintf("Bits 127..96: %08X\n", *(wsptr->MMCHS1_RSP76));
	dprintf("Bits  95..64: %08X\n", *(wsptr->MMCHS1_RSP54));
	dprintf("Bits  63..32: %08X\n", *(wsptr->MMCHS1_RSP32));
	dprintf("Bits  31.. 0: %08X\n", *(wsptr->MMCHS1_RSP10));

	// Issue CMD7 to select the card
	i = SendSDMMCCommand(wsptr, CMD7, uiRCA << 16);
	dprintf("Result of CMD7 is %d\n", i);
	uiDump = read_and_clear_stat(wsptr);
	dprintf("CMD7 gives status %08X\n", uiDump);
	uiDump = *(wsptr->MMCHS1_RSP10);
	dprintf("CMD7 gives response %08X\n", uiDump);

	// Issue CMD16 to set the block length to 512 bytes
	// We don't need to do this for SDHC, as it's fixed
	// by specification at 512, but it shouldn't cause
	// any error to do so
	i = SendSDMMCCommand(wsptr, CMD16, 512); // Block length
	dprintf("Result of CMD16 is %d\n", i);
	uiDump = read_and_clear_stat(wsptr);
	dprintf("CMD16 gives status %08X\n", uiDump);
	uiDump = *(wsptr->MMCHS1_RSP10);
	dprintf("CMD16 gives response %08X\n", uiDump);

	ReadBlockAbsolute(wsptr, 0, &data_main);
	//print_block_data(&data_main);

	wsptr->volume_base = GetUInt(&data_main, 454);
	dprintf("Base of first partition is 0x%X\n", wsptr->volume_base);

	ReadBlockOfPartition(wsptr, 0, &data_main);
	//print_block_data(&data_main);

	// Get the drive parameters from the BPB
	// Code is largely translated from my !ROFS
	wsptr->BPB_BytsPerSec = GetUShort(&data_main, 0x0B);
	wsptr->BPB_SecPerClus = data_main.byte[0x0D];
	wsptr->bytespercluster = wsptr->BPB_BytsPerSec * wsptr->BPB_SecPerClus;
	wsptr->BPB_RsvdSecCnt = GetUShort(&data_main, 0x0E);
	wsptr->offset_to_FAT1 = wsptr->BPB_RsvdSecCnt;
	wsptr->BPB_NumFATs = data_main.byte[0x10];
	wsptr->BPB_RootEntCnt = GetUShort(&data_main, 0x11);
	wsptr->BPB_TotSec16 = GetUShort(&data_main, 0x13);
	wsptr->RootDirSectors = (wsptr->BPB_RootEntCnt * 32) / wsptr->BPB_BytsPerSec;
	wsptr->BPB_FATSz16 = GetUShort(&data_main, 0x16);
	wsptr->BPB_FATSz32 = GetUShort(&data_main, 0x24);
	if (wsptr->BPB_FATSz16 == 0)
	{
		wsptr->FATSz = wsptr->BPB_FATSz32;
	}
	else
	{
		wsptr->FATSz = wsptr->BPB_FATSz16;
	}
	wsptr->offset_to_root_dir = wsptr->offset_to_FAT1 + (wsptr->BPB_NumFATs * wsptr->FATSz);
	wsptr->FirstDataSector = wsptr->offset_to_root_dir + wsptr->RootDirSectors;
	wsptr->BPB_TotSec32 = GetUInt(&data_main, 0x20);
	// Either BPB_TotSec16 or BPB_TotSec32 should be 0; the other one is
	// the total sectors count.
	if (wsptr->BPB_TotSec16 == 0)
	{
		wsptr->TotSec = wsptr->BPB_TotSec32;
	}
	else
	{
		wsptr->TotSec = wsptr->BPB_TotSec16;
	}
	// Calculate the number of clusters in a FAT, from which we
	// choose FAT16 or FAT32 organisation
	wsptr->DataSec = wsptr->TotSec - (wsptr->BPB_RsvdSecCnt + (wsptr->BPB_NumFATs * wsptr->FATSz) + wsptr->RootDirSectors);
	wsptr->CountOfClusters = wsptr->DataSec / wsptr->BPB_SecPerClus;
	if (wsptr->CountOfClusters < 4085)
	{
		wsptr->FATType = FATTYPE_FAT12;
	}
	else if (wsptr->CountOfClusters < 65525)
	{
		wsptr->FATType = FATTYPE_FAT16;
	}
	else
	{
		wsptr->FATType = FATTYPE_FAT32;
	}
	if (wsptr->FATType == FATTYPE_FAT32)
	{
		wsptr->BPB_RootClus = GetUInt(&data_main, 44);
		strncpy(volume_label, (char *)&(data_main.byte[71]), 11);
		strncpy(fattype, (char *)&(data_main.byte[82]), 8);
		wsptr->bytesperFATentry = 4;
	}
	else
	{
		wsptr->BPB_RootClus = 0; // Defined to prevent error
		strncpy(volume_label, (char *)&(data_main.byte[43]), 11);
		strncpy(fattype, (char *)&(data_main.byte[54]), 8);
		wsptr->bytesperFATentry = 2;
	}

#ifdef DEBUG_ENABLED
	// Textify that lot
	dprintf("Sector size            = %d\n", wsptr->BPB_BytsPerSec);
	dprintf("Sectors per cluster    = %d\n", wsptr->BPB_SecPerClus);
	dprintf("Bytes per cluster      = %d\n", wsptr->bytespercluster);
	dprintf("Reserved sectors       = %d\n", wsptr->BPB_RsvdSecCnt);
	dprintf("Offset to FAT1         = %d\n", wsptr->offset_to_FAT1);
	dprintf("Number of FATs         = %d\n", wsptr->BPB_NumFATs);
	dprintf("Number of root entries = %d\n", wsptr->BPB_RootEntCnt);
	dprintf("Total sectors (16)     = %d\n", wsptr->BPB_TotSec16);
	dprintf("Total sectors (32)     = %d\n", wsptr->BPB_TotSec32);
	dprintf("Sectors in root dir    = %d\n", wsptr->RootDirSectors);
	dprintf("Sectors per FAT (16)   = %d\n", wsptr->BPB_FATSz16);
	dprintf("Sectors per FAT (32)   = %d\n", wsptr->BPB_FATSz32);
	dprintf("Sectors per FAT        = %d\n", wsptr->FATSz);
	dprintf("Offset to root dir     = %d\n", wsptr->offset_to_root_dir);
	dprintf("Total sectors          = %d\n", wsptr->TotSec);
	dprintf("Data sectors           = %d\n", wsptr->DataSec);
	dprintf("Count of clusters      = %d\n", wsptr->CountOfClusters);
	switch (wsptr->FATType)
	{
		case FATTYPE_FAT12:
			dprintf("FAT organisation       = FAT12\n");
			break;
		case FATTYPE_FAT16:
			dprintf("FAT organisation       = FAT16\n");
			break;
		case FATTYPE_FAT32:
			dprintf("FAT organisation       = FAT32\n");
			break;
		case FATTYPE_UNKNOWN:
			dprintf("FAT organisation       = UNKNOWN!!!\n");
			break;
		default:
			dprintf("FAT organisation       = ILLEGAL VALUE!!!\n");
			break;
	}
	dprintf("Root cluster           = %d\n", wsptr->BPB_RootClus);
	dprintf("Volume label           = %s\n", volume_label);
	dprintf("FAT type string        = %s\n", fattype);
	dprintf("Bytes per FAT entry    = %d\n", wsptr->bytesperFATentry);
#endif

	// Search for one of "CMOS", "CMOS." and "CMOS.DAT"
	found = FindDirectoryEntry(wsptr, "cmos", &data_main);
	if (found < 0)
	{
		found = FindDirectoryEntry(wsptr, "cmos.", &data_main);
	}
	if (found < 0)
	{
		found = FindDirectoryEntry(wsptr, "cmos.dat", &data_main);
	}
	if (found >= 0)
	{
		dprintf("We found a match at index %d\n", found);
		FileSize = GetUInt(&data_main, (found * 32) + 28);
		dprintf("File size = %u\n", FileSize);
		if (FileSize > 2048)
		{
			FileSize = 2048;
			dprintf("File size reduced to %u\n", FileSize);
		}
		FirstCluster = GetUShort(&data_main, (found * 32) + 26);
		if (wsptr->FATType == FATTYPE_FAT32)
		{
			FirstCluster += GetUShort(&data_main, (found * 32) + 20) << 16;
		}
		dprintf("First cluster = %u\n", FirstCluster);
		Offset = 0;
		BytesLoaded = 0;
		do
		{
			ReadBlockClustered(wsptr, &FirstCluster, &Offset, &data_main);
			//print_block_data(&data_main);
			memcpy(&wsptr->NVRAMCache[BytesLoaded], &data_main.byte[0],
				   min_uint(FileSize - BytesLoaded, 512));
			BytesLoaded += 512;
		} while (BytesLoaded < FileSize);
	}

	return uiDump;
}

/******************************************************************
*          GetUInt
*   This reads an unsigned int, little endian, from a data_area.
*   In:     byte offset to first (LS) byte
*           pointer to data_area union
*   Return: uint
******************************************************************/
uint GetUInt(union data_area *da, uint uiOfs)
{
	return da->byte[uiOfs] + (da->byte[uiOfs + 1] << 8)
		+ (da->byte[uiOfs + 2] << 16) + (da->byte[uiOfs + 3] << 24);
}

/******************************************************************
*          GetUShort
*   This reads an unsigned short, little endian, from a data_area.
*   In:     byte offset to first (LS) byte
*           data_area union
*   Return: uint
******************************************************************/
uint GetUShort(union data_area *da, uint uiOfs)
{
	return da->byte[uiOfs] + (da->byte[uiOfs + 1] << 8);
}

/******************************************************************
*          ReadBlockAbsolute
*   This reads one block of data from the SD/SDHC card.
*   In:     pointer to ws
*           block number
*           data_area union
*   Return: true if data were read successfully,
*           false if any error occurred while reading
******************************************************************/
bool ReadBlockAbsolute(ws *wsptr, uint uiBlockNum, union data_area *da)
{
	bool bRetVal = false;
	uint uiDump = 0;
	int i = 0;

	/* Issue CMD17 to read a block at given address */
	//dprintf("PSTATE before = %08X\n", *(wsptr->MMCHS1_PSTATE));
	*(wsptr->MMCHS1_BLK) = 512 + (1 << 16);	/* 1 block of 512 bytes */
	/* prepare argument */
	if (wsptr->CardType == CARDTYPE_SDHC)
	{
		uiDump = uiBlockNum;		/* Block address for SDHC */
	}
	else
	{
		uiDump = uiBlockNum << 9;	/* Byte address for SD */
	}
	i = SendSDMMCCommand(wsptr, CMD17, uiDump);
	//dprintf("Result of CMD17 is %d\n", i);
	//dprintf("CMD17 gives status %08X\n", read_and_clear_stat());
	uiDump = *(wsptr->MMCHS1_RSP10);
	//dprintf("CMD17 gives response %08X\n", uiDump);
	// At this point, the read shoud have completed,
	// and there should be a block waiting to be collected.
	// Read the PSTATE register.
	//dprintf("PSTATE after = %08X\n", *(wsptr->MMCHS1_PSTATE));
	bRetVal = WaitForDataReady(wsptr);
	//dprintf("PSTATE after = %08X\n", *(wsptr->MMCHS1_PSTATE));

	for (i = 0; i < 128; i++)
	{
		da->word[i] = *(wsptr->MMCHS1_DATA);
	}
	return bRetVal;
}

bool ReadBlockOfPartition(ws *wsptr, uint uiBlockNum, union data_area *da)
{
	return ReadBlockAbsolute(wsptr, uiBlockNum + wsptr->volume_base, da);
}

/******************************************************************
*          WaitForDataReady
*   This waits for the data ready bit in PSTATE.
*   In:     pointer to ws
*   Return: true if data became ready within the timeout,
*           false if the loop has timed out waiting
******************************************************************/
static bool WaitForDataReady(ws *wsptr)
{
	bool bRetVal = false;
	uint ui = 0;

	for (ui = 0, bRetVal = false; (ui < 1000000) & !bRetVal; ui++)
	{
		if (get_bitfield(*(wsptr->MMCHS1_PSTATE), 11, 1) != 0)
		{
			bRetVal = true;
		}
	}
	return bRetVal;
}

void print_block_data(union data_area *da)
{
#ifdef DEBUG_ENABLED
	char s[100] = "";
	char ss[20] = "";
	int inner = 0;
	int outer = 0;
	unsigned char c = 0;

	for (outer = 0; outer < 512; outer += 16)
	{
		s[0] = '\0';	/* Null string */
		for (inner = 0; inner < 16; inner++)
		{
			sprintf(ss, "%02X ", da->byte[outer + inner]);
			strcat(s, ss);
		}
		for (inner = 0; inner < 16; inner++)
		{
			c = da->byte[outer + inner];
			if (( c >= 32) && (c < 127))
			{
				ss[inner] = c;
			}
			else
			{
				ss[inner] = '.';
			}
		}
		ss[16] = '\0';	/* Null terminate the string */
		strcat(s, ss);
		dprintf("%s\n", s);
	}
	dprintf("\n");
#else
	(void)da;
#endif
}

/******************************************************************
*          WaitForCMDI
*   See p3126.  This waits for the PSTATE CMDI bit to be clear.
*   In:     pointer to ws struct
*   Return: void, but not until either the CMDI bit is clear or
*           the loop has timed out waiting.
******************************************************************/
static void WaitForCMDI(ws *wsptr)
{
	uint uiDump = 0;
	bool bDone = false;

	/* wait for ever (avoiding conflicts with SendSDMMCCommand) */
	do
	{
		uiDump = *(wsptr->MMCHS1_PSTATE);
		if ((uiDump & 0x00000001) == 0)
		{
			bDone = true;
		}
	} while (!bDone);
}

/******************************************************************
*          SoftwareResetCMDLine
*   Sends a software reset to the mmci_cmd line.
*   In:     pointer to ws struct
*   Return: void, but not until either the software reset has
*           completed, or the loop has timed out.
******************************************************************/
static void SoftwareResetCMDLine(ws *wsptr)
{
	/* Set SYSCTL[25] and wait until it returns to 0. */
	*(wsptr->MMCHS1_SYSCTL) |= (1u << 25);
	while ((*(wsptr->MMCHS1_SYSCTL) & (1u << 25)) != 0)
		;
}

/******************************************************************
*          SendMMCCommand
*   See p3126.  This sends an SD/MMC command to the card.
*   In:     uiCmd (uint) - SD/MMC command
*           uiArg (uint) - SD/MMC argument
*   Return: -1 if something times out,
*           0..3 if a response is present.
******************************************************************/
static int SendSDMMCCommand(ws *wsptr, uint uiCmd, uint uiArg)
{
	uint uiDump = 0;
	bool bDone = false;

	/* wait for ever (otherwise the return code of this function must be checked!) */
	do
	{
		uiDump = *(wsptr->MMCHS1_PSTATE);
		if ((uiDump & 0x00000001) == 0)
		{
			bDone = true;
		}
	} while (!bDone);

	/* write argument and command */
	*(wsptr->MMCHS1_ARG) = uiArg;
	*(wsptr->MMCHS1_CMD) = uiCmd;

	/* now check for status */
	do
	{
		uiDump = *(wsptr->MMCHS1_STAT);
	} while (uiDump == 0);
	/* check for error */
	if (uiDump & (1 << 15))
	{
		/* check for CTO */
		if (uiDump & (1 << 16))
		{
			/* Set SYSCTL[25] and wait until it returns to 0. */
			*(wsptr->MMCHS1_SYSCTL) |= (1u << 25);
			while ((*(wsptr->MMCHS1_SYSCTL) & (1u << 25)) != 0)
				;
		}
		return -1;
	}
	/* check for command complete */
	if (uiDump & (1 << 0))
	{
#if 0
		/* reset command complete flag */
		*(wsptr->MMCHS1_STAT) = (1 << 0);
#endif
		return (*(wsptr->MMCHS1_CMD) >> 16) & 0x03;
	}

	return -1;
}

static uint get_bitfield(uint value, uint bitnum, uint numbits)
{
	/* get bitfield value starting from lowest bitnum using numbits bits in 32 bit word */
	return (value >> bitnum) & ((1 << numbits) - 1);
}


static uint set_bitfield(uint value, uint bitnum, uint numbits, uint bitfield)
{
	// set a bitmask at specified location inside 32 bit word
	// example: set_bitfield(0xffffffff,16,4,0xC); gives 0xFFFCFFFF
	uint field = (1 << numbits) - 1;
	return (value & ~(field << bitnum)) | (bitfield << bitnum);
}

/******************************************************************
*          read_and_clear_stat
*   Clears all the status bits.
*   In:     wsptr - pointer to ws struct.
*   Return: void
******************************************************************/
static uint read_and_clear_stat(ws *wsptr)
{
	uint uiStat = *(wsptr->MMCHS1_STAT);
	*(wsptr->MMCHS1_STAT) = uiStat;
	return uiStat;
}

/******************************************************************
*          change_clock_divider
*   See p3128.  This changes the clock divider part of the SYSCTL register.
*   In:     wsptr - pointer to ws struct.
*   In:     uiRatio (uint) - New ratio, right justified
*   Return: void
******************************************************************/
static void change_clock_divider(ws *wsptr, uint uiRatio)
{
	uint uiUI = 0, uiDump = 0;
	bool bDone = false;

	/* Clear the SYSCTL CEN bit */
	uiUI = *(wsptr->MMCHS1_SYSCTL);
	set_bitfield(uiUI, 2, 1, 0);
	*(wsptr->MMCHS1_SYSCTL) = uiUI;

	/* Set the new ratio */
	/* Clip to make sure no problem caused by excessive values */
	uiUI = set_bitfield(uiUI, 6, 10, (uiRatio & 0x3ff));
	uiUI = set_bitfield(uiUI, 0, 1, 1); /* Set ICE */
#ifdef DEBUG_CHANGECLOCKDIVIDER
	dprintf("Writing %08X to SYSCTL\n", uiUI);
#endif
	*(wsptr->MMCHS1_SYSCTL) = uiUI;

	/* wait for ever */
	do
	{
		uiDump = *(wsptr->MMCHS1_SYSCTL);
		bDone = ((uiDump & 0x02) != 0);
	} while (!bDone);

	/* set the SYSCTL CEN bit again */
	uiUI = set_bitfield(uiUI, 2, 1, 1);
#ifdef DEBUG_CHANGECLOCKDIVIDER
	dprintf("Writing %08X to SYSCTL\n", uiUI);
#endif
	*(wsptr->MMCHS1_SYSCTL) = uiUI;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi TheiÃ
@
text
@@
