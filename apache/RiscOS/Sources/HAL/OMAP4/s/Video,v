head	1.12;
access;
symbols
	OMAP4-0_60:1.12
	OMAP4-0_59-1_52_2_3:1.12
	OMAP4-0_59:1.12
	OMAP4-0_58:1.12
	OMAP4-0_57:1.12
	OMAP4-0_56:1.12
	OMAP4-0_55:1.12
	OMAP4-0_54-1_52_2_2:1.12
	OMAP4-0_54:1.12
	OMAP4-0_53:1.12
	OMAP4-0_52-1_52_2_1:1.12
	SMP:1.12.0.2
	SMP_bp:1.12
	OMAP4-0_52:1.12
	OMAP4-0_51:1.12
	OMAP4-0_50:1.12
	OMAP4-0_49:1.12
	OMAP4-0_48:1.12
	OMAP4-0_47:1.12
	OMAP4-0_46:1.12
	OMAP4-0_45:1.12
	OMAP4-0_44:1.12
	OMAP4-0_43:1.12
	OMAP4-0_42:1.12
	OMAP4-0_41:1.12
	OMAP4-0_40:1.12
	OMAP4-0_39:1.12
	OMAP4-0_38:1.11
	OMAP4-0_37:1.11
	OMAP4-0_36:1.11
	OMAP4-0_35:1.10
	OMAP4-0_34:1.10
	OMAP4-0_33:1.10
	OMAP4-0_32:1.10
	OMAP4-0_31:1.10
	OMAP4-0_30:1.10
	OMAP4-0_29:1.10
	OMAP4-0_28:1.10
	OMAP4-0_27:1.9
	OMAP4-0_26:1.8
	OMAP4-0_25:1.8
	OMAP4-0_24:1.8
	OMAP4-0_23:1.8
	OMAP4-0_22:1.7
	OMAP4-0_21:1.7
	OMAP4-0_20:1.6
	OMAP4-0_19:1.6
	OMAP4-0_18:1.6
	OMAP4-0_17:1.5
	OMAP4-0_16:1.5
	OMAP4-0_15:1.5
	OMAP4-0_14:1.5
	OMAP4-0_13:1.5
	OMAP4-0_12:1.5
	OMAP4-0_11:1.5
	OMAP4-0_10:1.4
	OMAP4-0_09:1.4
	OMAP4-0_08:1.4
	OMAP4-0_07:1.4
	OMAP4-0_06:1.3
	OMAP4-0_05:1.2
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2014.12.06.10.46.39;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	xF8TrVZkCuXk6Y0y;

1.11
date	2014.09.04.21.41.12;	author jlee;	state Exp;
branches;
next	1.10;
commitid	AjMWLbVyJ9pcI4Px;

1.10
date	2014.03.08.16.55.57;	author rsprowson;	state Exp;
branches;
next	1.9;
commitid	tpkfnWqSEp73VUrx;

1.9
date	2013.12.15.22.47.22;	author jlee;	state Exp;
branches;
next	1.8;
commitid	cmuaDr9qMOE2xhhx;

1.8
date	2013.11.01.19.01.19;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	3j2IHKaDTdkbHBbx;

1.7
date	2013.09.21.18.37.00;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	YWWJ9M47msawSk6x;

1.6
date	2013.08.17.13.15.02;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	PyZVfvLeTl0RdO1x;

1.5
date	2012.07.04.17.59.09;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	7eFD0kniLkapWgbw;

1.4
date	2012.03.25.11.42.59;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	4FjnaYBzkPTA6gYv;

1.3
date	2012.03.25.10.28.47;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	wcxutstPODhaHfYv;

1.2
date	2012.02.11.17.48.09;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	W3PfhFs2h9uBvLSv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.12
log
@Change over to reassigned bus types
Note, the SDIO controller was previously misreported as being on L4, when in fact it's on L3.

Version 0.39. Tagged as 'OMAP4-0_39'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO
        GET     Hdr:Proc

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.omap4430
        GET     hdr.StaticWS
        GET     hdr.PRCM
        GET     hdr.GPIO
        GET     hdr.Timers

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  Video_Init
        EXPORT  VideoDevice_Init
        EXPORT  Video_Power_VBC_DVI

        IMPORT  memcpy
        IMPORT  GPIOx_SetAsOutput
        IMPORT  GPIOx_SetOutput

; A brief rundown of OMAP4430 video output modes:
; The display subsystem (DSS) provides the logic to display a video frame from the
; memory frame buffer on a LCD panel or a TV set.
; DSS can display different pictures simultaneously by using the primary LCD1 and
; secondary LCD2 outputs, in addition to the TV output.
; The primary LCD output can be one of the following:
;   DSI  - Display serial interface using MIPI DSI
;   RFBI - Parallel interface using MIPI DBI protocol 2.0
; The secondary LCD output can be one of the following:
;   DPI  - Parallel CMOS output (MIPI DPI 1.0)
;   DSI  - Display serial interface using MIPI DSI
;   RFBI - Parallel interface using MIPI DBI protocol 2.0
; The TV output can be one of the following:
;   Composite signal
;   HDMI - High definition multimedia interface

; The modules integrated in the DSS are:
;   Display controller (DISPC)
;     1 direct memory access (DMA) engine
;     2 LCD outputs + 1 TV output
;     1 graphics pipeline (GFX), 3 video pipelines + 1 write-back pipeline
;   RFBI (Remote Frame Buffer Interface)
;     8-, 9-, 16-bit parallel interface
;     programmable pixel memory formats
;     programmable output formats on one or multiple cycles per pixel
;  2 DSI protocol engines
;     4-data lane complex I/O for DSI1, 2-data lane I/O for DSI2
;     bidirectional data link support
;     supports video mode + command mode
;     supports data interleaving
;   NTSC/PAL video encoder (VENC)
;     composite output signal through external video DAC
;   HDMI protocol engine
;     supports HDMI 1.3
;     30-bit RGB color
;     HDCP key protection
;     deep color mode support

; Currently this code only supports the RFBI bypass mode, as used to interface with
; the TFP410 DVI framer used on the pandaboard. Luckily this is also the simplest
; interface of the lot. This mode is only available for LCD2.

; Video is handled by OMAP4Video module ==> no HAL implementation

; -------------------------------------------------------------------------


Video_Init
        Push    "lr"

        ; Configure GPIO pins as DISPC2 signals
        LDR     a1, L4_Core_Log
        LDR     a2, =(L4_SYSCTRL_PADCONF_CORE - L4_Core)
        ADD     a1, a2, a1
        ADD     a3, a1, #0x100
        ; Configure DVI framer pin (Panda)
        LDRB    a4, [sb, #BoardConfig_VideoGPIO]
        CMP     a4, #0                  ; check for GPIO_0
        LDREQ   a4, =0x11B              ; output: IEN + PullUp + Mode 3 (GPIO)
        STREQH  a4, [a3, #0x084]        ; GPIO_0 at offset 0x184
        LDR     a2, =0x00050005
        STRH    a2, [a3, #0x0D4]        ; GPIO_191/DISPC2_DATA0
        STR     a2, [a1, #0x1D0]        ; GPIO_190/DISPC2_DATA1 + GPIO_28/DISPC2_DATA2
        STR     a2, [a1, #0x1CC]        ; GPIO_27/DISPC2_DATA3 + GPIO_26/DISPC2_DATA4
        STR     a2, [a1, #0x1C8]        ; GPIO_25/DISPC2_DATA5 + GPIO_24/DISPC2_DATA6
        STR     a2, [a1, #0x1C4]        ; GPIO_23/DISPC2_DATA7 + GPIO_22/DISPC2_DATA8
        STR     a2, [a1, #0x1C0]        ; GPIO_21/DISPC2_DE + GPIO_20/DISPC2_VSYNC
        STR     a2, [a1, #0x1BC]        ; GPIO_19/DISPC2_PCLK + GPIO_18/DISPC2_HSYNC
        STR     a2, [a1, #0x1B8]        ; GPIO_17/DISPC2_DATA17 + GPIO_16/DISPC2_DATA16
        STR     a2, [a1, #0x1B4]        ; GPIO_15/DISPC2_DATA9 + GPIO_14/DISPC2_DATA10
        STR     a2, [a1, #0x174]        ; GPIO_168/DISPC2_DATA11 + GPIO_167/DISPC2_DATA12
        STR     a2, [a1, #0x170]        ; GPIO_166/DISPC2_DATA13 + GPIO_165/DISPC2_DATA14
        STR     a2, [a1, #0x16C]        ; GPIO_164/DISPC2_DATA15 + GPIO_163/DISPC2_DATA18
        STR     a2, [a1, #0x168]        ; GPIO_162/DISPC2_DATA19 + GPIO_161/DISPC2_DATA20
        STR     a2, [a1, #0x164]        ; GPIO_160/DISPC2_DATA21 + GPIO_159/DISPC2_DATA22
        STRH    a2, [a3, #0x062]        ; GPIO_158/DISPC2_DATA23

        ; Configure GPIO pins so we can turn the DVI framer on/off
        LDRB    a1, [sb, #BoardConfig_VideoGPIO]
        CMP     a1, #255
        MOV     a2, #0
        BLNE    GPIOx_SetAsOutput       ; Turn DVI framer off

        ; Enable DSS power domain
        LDR     a1, L4_PowerMan_Log
        ADD     a1, a1, #DSS_PRM
        LDR     a2, [a1, #PM_DSS_PWRSTCTRL]
        ORR     a2, a2, #3              ; ON state
        STR     a2, [a1, #PM_DSS_PWRSTCTRL]

        ; Activate Thermal Sensor Clock (not done by U-Boot 2014)
        ; Is there a better place to do it?
        ; I'm doing it here because it is the only location where L4_PowerMan is used.
        ADD     a1, a1, #(WKUP_CM - DSS_PRM)
        LDR     a2, [a1, #CM_WKUP_BANDGAP_CLKCTRL]
        ORR     a2, a2, #(1 << 8)       ; OPTFCLKEN_TS_FCLK
        STR     a2, [a1, #CM_WKUP_BANDGAP_CLKCTRL]

        ; Activate DSS specific clocks
        LDR     a1, L4_ClockMan2_Log
        ADD     a1, a1, #DSS_CM2
        LDR     a2, =((0xF << 8) + 2)   ; OPTFCLKEN_* + enable module
        STR     a2, [a1, #CM_DSS_DSS_CLKCTRL]
        MOV     a2, #2                  ; SW_WKUP
        STR     a2, [a1, #CM_DSS_CLKSTCTRL]

        Pull    "pc"

VideoDevice_Init
        ; Not much to do here - just register our HAL device
        Push    "v1,lr"
        ADRL    v1, VideoDevice
        MOV     a1, v1
        ADR     a2, VideoDeviceTemplate
        MOV     a3, #Video_DeviceSize
        BL      memcpy
        LDR     a1, L4_Display_Log
        STR     a1, [v1, #HALDevice_Address]
        ADRL    a3, VideoBoardConfig
        STR     a3, [v1, #HALDevice_VDUDeviceSpecificField]
        STR     sb, [v1, #:INDEX:VideoWorkspace]
        ; Fill in the board config
        LDR     a2, sys_clk
        STR     a2, [a3, #VideoBoardConfig_sys_clk]
        BL      Determine_PorchSync_Limits
        STRH    a1, [a3, #VideoBoardConfig_Max_Porch]
        STRH    a2, [a3, #VideoBoardConfig_Max_Sync]
        LDR     a2, L4_sDMA_Log
        STR     a2, [a3, #VideoBoardConfig_DMA_Ptr]
        MOV     a2, #SDMA_IRQ_1
        STR     a2, [a3, #VideoBoardConfig_DMA_Device]
        ASSERT  SDMA_NumDevices = 31
        MOV     a2, #&80000000
        STR     a2, [a3, #VideoBoardConfig_DMA_Chans]
        LDRB    a2, [sb, #BoardConfig_VBC_Flags]
        STRB    a2, [a3, #VideoBoardConfig_Flags]
        LDRB    a2, [sb, #BoardConfig_VBC_LCDNum]
        STRB    a2, [a3, #VideoBoardConfig_Num_LCDs]
        LDR     a2, [sb, #BoardConfig_VBC_LCDPtr]
        STR     a2, [a3, #VideoBoardConfig_LCD_Configs]
        MOV     a1, #0
        MOV     a2, v1
        CallOS  OS_AddDevice
        Pull    "v1,pc"

VideoDeviceTemplate
        DCW     HALDeviceType_Video + HALDeviceVideo_VDU
        DCW     HALDeviceID_VDU_OMAP4
        DCD     HALDeviceBus_Sys + HALDeviceSysBus_NoC
        DCD     0               ; API version 0
        DCD     VideoDevice_Desc
        DCD     0               ; Address - filled in later
        %       12              ; Reserved
        DCD     VideoDevice_Activate
        DCD     VideoDevice_Deactivate
        DCD     VideoDevice_Reset
        DCD     VideoDevice_Sleep
        DCD     VIDEO_IRQ       ; Device interrupt
        DCD     0               ; TestIRQ cannot be called
        %       8
        DCD     0               ; Pointer to board config stuff - filled in later
        ASSERT (. - VideoDeviceTemplate) = HALDevice_VDU_Size
        DCD     0               ; HAL workspace pointer - filled in later
        ASSERT (. - VideoDeviceTemplate) = Video_DeviceSize

VideoDevice_Desc
        =       "OMAP4 video controller", 0
        ALIGN

VideoDevice_Activate
        Entry   "sb"
        LDR     sb, VideoWorkspace
        ; Enable DSS power (if not already activated)
        LDR     a1, L4_ClockMan2_Log
        ADD     a1, a1, #DSS_CM2
        LDR     a2, [a1, #CM_DSS_DSS_CLKCTRL]
        ANDS    a2, a2, #(3 << 16)      ; IDLEST
        BEQ     %FT10
        MOV     a2, #2                  ; SW_WKUP
        STR     a2, [a1, #CM_DSS_CLKSTCTRL]
        ; Wait until module is active
05
        LDR     a2, [a1, #CM_DSS_DSS_CLKCTRL]
        ANDS    a2, a2, #(3 << 16)      ; IDLEST
        BNE     %BT05

10
        MOV     a1, #1
        EXIT

VideoDevice_Deactivate
VideoDevice_Reset
        MOV     pc, lr

VideoDevice_Sleep
        MOV     a1, #0
        MOV     pc, lr

Video_Power_VBC_DVI
        ; a1 = HAL device
        ; a2 = brightness 0-65536, which we treat as a simple on/off flag
        Entry   "sb"
        LDR     sb, VideoWorkspace
  [ DebugTiming
        CMP     a2, #0
        BEQ     %FT10
        DebugTime a1, "Video on @@ "
10
  ]
        ; Just set the GPIO to the right value
        LDRB    a1, [sb, #BoardConfig_VideoGPIO]
        CMP     a1, #255
        BLNE    GPIOx_SetOutput
        EXIT

Determine_PorchSync_Limits
        ; Returns:
        ; a1 = max porch value
        ; a2 = max sync value
        ; OMAP44xx has fixed values
        MOV     a1, #(1 << 12)
        MOV     a2, #(1 << 8)
        MOV     pc, lr

        END
@


1.11
log
@Add support for recent U-Boot versions
Detail:
  hdr/PRCM:
  - added further definitions (not listed in older TRMs)
  s/Audio:
  - configure all GPIO pads used by audio system
    (for supporting latest U-Boot 2014-7)
  s/Boot:
  - added overflow check for address range
  s/RAM:
  - added overflow check for address range
  - address comparison with unsigned arithmetic
  s/RTC:
  - added initialisation code and pad configuration for TWL6030 RTC
    (for supporting latest U-Boot 2014-07)
  s/SDIO:
  - added pad configuration for LEDs used by SDIO
    (for supporting latest U-Boot 2014-07)
  s/USB:
  - removed unused code parts
  - use defines for controller types
  s/Video:
  - added pad configuration for DVI framer pin
  - enable DSS power and clock domain and DSS specific clocks
  - activate thermal sensor clock
  - wait for activated module in VideoDevice_Activate
    (for supporting latest U-Boot 2014-07)
Admin:
  Submission from Willi Theiss
  Tested on Panda ES rev B3 (Willi), Panda rev A6 (myself)


Version 0.36. Tagged as 'OMAP4-0_36'
@
text
@d191 1
a191 1
        DCD     HALDeviceBus_Interconnect + HALDeviceInterconnectBus_L3
@


1.10
log
@Use DSB/ISB directly
Objasm 4 supports ARMv7 opcodes, and this HAL is only every for ARMv7.
Built, but not tested. Submission from Willi Theiss.

Version 0.28. Tagged as 'OMAP4-0_28'
@
text
@d93 1
a93 7
        ; Configure GPIO pins so we can turn the DVI framer on/off
        LDRB    a1, [sb, #BoardConfig_VideoGPIO]
        CMP     a1, #255
        MOV     a2, #0
        BLNE    GPIOx_SetAsOutput       ; Turn DVI framer off

        ; configure GPIO pins as DISPC2 signals
d98 5
d120 20
a139 2
  [ {FALSE}
        ; Linux does not do this
d141 7
a147 21
        ; set all pins as output
        ; GPIO_14 .. GPIO_28
        LDR     a1, L4_GPIO1_Log
        LDR     a2, [a1, #GPIO_OE]
        BIC     a2, a2, #(0xFF << (14 - 0))
        BIC     a2, a2, #(0x7F << (22 - 0))
        STR     a2, [a1, #GPIO_OE]
        ; GPIO_158 .. GPIO_159
        LDR     a1, L4_GPIO5_Log
        LDR     a2, [a1, #GPIO_OE]
        BIC     a2, a2, #(0x03 << (158 - 4 * 32))
        STR     a2, [a1, #GPIO_OE]
        ; GPIO_160 .. GPIO_168
        LDR     a1, L4_GPIO6_Log
        LDR     a2, [a1, #GPIO_OE]
        BIC     a2, a2, #(0xFF << (160 - 5 * 32))
        BIC     a2, a2, #(0x01 << (168 - 5 * 32))
        ; GPIO_190 .. GPIO_191
        BIC     a2, a2, #(0x03 << (190 - 5 * 32))
        STR     a2, [a1, #GPIO_OE]
  ]
d219 11
a229 3
        ANDS    a2, a2, #((1 << 18) + (3 << 16))        ; STDBST | IDLEST
        MOVNE   a2, #2                                  ; SW_WKUP
        STRNE   a2, [a1, #CM_DSS_CLKSTCTRL]
@


1.9
log
@Remove obsolete stub HAL video API implementation
Detail:
  hdr/Video - Remove unused local VIDC list type 3 definition
  s/Boot, s/Video - Removed obsolete HAL video API implementation. A stub implementation is no longer required for systems that have a GraphicsV driver in a module, and can even cause problems if the OS decides to use the HAL implementation instead of the module one.
Admin:
  Builds, but untested. Essentially the same changes as for the OMAP3 HAL.
  Requires Kernel-5_35-4_79_2_203


Version 0.27. Tagged as 'OMAP4-0_27'
@
text
@a30 1
        GET     hdr.CoPro15ops
@


1.8
log
@Refactor IIC calls to use RISCOS_IICOpV
Copy changes from OMAP3-0_90 to OMAP4.
Built, but not tested.

Version 0.23. Tagged as 'OMAP4-0_23'
@
text
@a35 16
        EXPORT  HAL_VideoFlybackDevice
        EXPORT  HAL_VideoSetMode
        EXPORT  HAL_VideoWritePaletteEntry
        EXPORT  HAL_VideoWritePaletteEntries
        EXPORT  HAL_VideoReadPaletteEntry
        EXPORT  HAL_VideoSetInterlace
        EXPORT  HAL_VideoSetBlank
        EXPORT  HAL_VideoSetPowerSave
        EXPORT  HAL_VideoUpdatePointer
        EXPORT  HAL_VideoSetDAG
        EXPORT  HAL_VideoVetMode
        EXPORT  HAL_VideoPixelFormats
        EXPORT  HAL_VideoFeatures
        EXPORT  HAL_VideoBufferAlignment
        EXPORT  HAL_VideoOutputFormat

a148 39

; Stubs for unused HAL functions

HAL_VideoOutputFormat
HAL_VideoVetMode
        MOV     r0, #0
HAL_VideoSetMode
HAL_VideoWritePaletteEntry
HAL_VideoWritePaletteEntries
HAL_VideoSetInterlace
HAL_VideoSetBlank
HAL_VideoSetPowerSave
HAL_VideoUpdatePointer
HAL_VideoSetDAG
HAL_VideoReadPaletteEntry
        MOV     pc, lr

HAL_VideoFlybackDevice
        MOV     a1, #-1
        MOV     pc, lr

HAL_VideoPixelFormats
; OMAP4430 Silicon Errata Public RevD chapter 2.4
; BITMAP 1-2-4 formats not supported by the graphics pipeline
 [ {FALSE}
        MOV     a1, #2_111111   ; 1,2,4,8,16,32 bpp
 |
        MOV     a1, #2_111000   ; 8,16,32 bpp
 ]
        MOV     pc, lr

HAL_VideoFeatures
        MOV     a1, #2_10010    ; h/w pointer, no VSyncs
        MOV     pc, lr

HAL_VideoBufferAlignment
        MOV     a1, #4
        MOV     pc, lr

@


1.7
log
@Comment corrected
Not tagged.
@
text
@a59 7
        MACRO
        CallOS  $entry
        ASSERT  $entry <= HighestOSEntry
        MOV     lr, pc
        LDR     pc, OSentries + 4*$entry
        MEND

@


1.6
log
@Probe earlier, declare device later
Reflects changes in OMAP3-0_88.

Version 0.18. Tagged as 'OMAP4-0_18'
@
text
@d99 1
a99 1
;   HDMI protocl engine
@


1.5
log
@Refactor HAL_VideoIICOp to be ATPCS
No longer specified to return _kernel_oserror * implements GraphicsV 14.
Make use of IICStatus defines instead of local copies.
Rename HAL_Video_ to HAL_Video.
Compiles, but not tested.


Version 0.11. Tagged as 'OMAP4-0_11'
@
text
@a35 1
        EXPORT  Video_init
d52 1
d114 1
a114 1
Video_init
@


1.4
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d38 14
a51 14
        EXPORT  HAL_Video_SetMode
        EXPORT  HAL_Video_WritePaletteEntry
        EXPORT  HAL_Video_WritePaletteEntries
        EXPORT  HAL_Video_ReadPaletteEntry
        EXPORT  HAL_Video_SetInterlace
        EXPORT  HAL_Video_SetBlank
        EXPORT  HAL_Video_SetPowerSave
        EXPORT  HAL_Video_UpdatePointer
        EXPORT  HAL_Video_SetDAG
        EXPORT  HAL_Video_VetMode
        EXPORT  HAL_Video_PixelFormats
        EXPORT  HAL_Video_Features
        EXPORT  HAL_Video_BufferAlignment
        EXPORT  HAL_Video_OutputFormat
d175 2
a176 2
HAL_Video_OutputFormat
HAL_Video_VetMode
d178 9
a186 9
HAL_Video_SetMode
HAL_Video_WritePaletteEntry
HAL_Video_WritePaletteEntries
HAL_Video_SetInterlace
HAL_Video_SetBlank
HAL_Video_SetPowerSave
HAL_Video_UpdatePointer
HAL_Video_SetDAG
HAL_Video_ReadPaletteEntry
d193 1
a193 1
HAL_Video_PixelFormats
d203 1
a203 1
HAL_Video_Features
d207 1
a207 1
HAL_Video_BufferAlignment
@


1.3
log
@Updates to OMAP4 port.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added DebugTiming macros
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.StaticWS
    added variable NVMemoryFound
    removed variables for NVRAM over SD card support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.KdbScan
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.NVMemory
    EEPROM support over JTAG port (EMU0/EMU1)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    use DMA for copying ROM at top of RAM
    added debug timing
    support for compressed images (as in OMAP3)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added debug timing OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.c.CLib
    reverted to version without SD card NVRAM support

Changes from Willi Theiss.
Assembles without errors, but not tested here.

Version 0.06. Tagged as 'OMAP4-0_06'
@
text
@d16 50
a65 50
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Machine.<Machine>
	GET	Hdr:ImageSize.<ImageSize>
	$GetIO
	GET	Hdr:Proc

	GET	Hdr:OSEntries
	GET	Hdr:HALEntries

	GET	hdr.omap4430
	GET	hdr.StaticWS
	GET	hdr.PRCM
	GET	hdr.GPIO
	GET	hdr.CoPro15ops
	GET	hdr.Timers

	AREA	|Asm$$Code|, CODE, READONLY, PIC

	EXPORT	Video_init
	EXPORT	HAL_VideoFlybackDevice
	EXPORT	HAL_Video_SetMode
	EXPORT	HAL_Video_WritePaletteEntry
	EXPORT	HAL_Video_WritePaletteEntries
	EXPORT	HAL_Video_ReadPaletteEntry
	EXPORT	HAL_Video_SetInterlace
	EXPORT	HAL_Video_SetBlank
	EXPORT	HAL_Video_SetPowerSave
	EXPORT	HAL_Video_UpdatePointer
	EXPORT	HAL_Video_SetDAG
	EXPORT	HAL_Video_VetMode
	EXPORT	HAL_Video_PixelFormats
	EXPORT	HAL_Video_Features
	EXPORT	HAL_Video_BufferAlignment
	EXPORT	HAL_Video_OutputFormat

	EXPORT	VideoDevice_Init
	EXPORT	Video_Power_VBC_DVI

	IMPORT	memcpy
	IMPORT	GPIOx_SetAsOutput
	IMPORT	GPIOx_SetOutput

	MACRO
	CallOS	$entry
	ASSERT	$entry <= HighestOSEntry
	MOV	lr, pc
	LDR	pc, OSentries + 4*$entry
	MEND
d115 1
a115 1
	Push	"lr"
d117 27
a143 27
	; Configure GPIO pins so we can turn the DVI framer on/off
	LDRB	a1, [sb, #BoardConfig_VideoGPIO]
	CMP	a1, #255
	MOV	a2, #0
	BLNE	GPIOx_SetAsOutput	; Turn DVI framer off

	; configure GPIO pins as DISPC2 signals
	LDR	a1, L4_Core_Log
	LDR	a2, =(L4_SYSCTRL_PADCONF_CORE - L4_Core)
	ADD	a1, a2, a1
	ADD	a3, a1, #0x100
	LDR	a2, =0x00050005
	STRH	a2, [a3, #0x0D4]	; GPIO_191/DISPC2_DATA0
	STR	a2, [a1, #0x1D0]	; GPIO_190/DISPC2_DATA1 + GPIO_28/DISPC2_DATA2
	STR	a2, [a1, #0x1CC]	; GPIO_27/DISPC2_DATA3 + GPIO_26/DISPC2_DATA4
	STR	a2, [a1, #0x1C8]	; GPIO_25/DISPC2_DATA5 + GPIO_24/DISPC2_DATA6
	STR	a2, [a1, #0x1C4]	; GPIO_23/DISPC2_DATA7 + GPIO_22/DISPC2_DATA8
	STR	a2, [a1, #0x1C0]	; GPIO_21/DISPC2_DE + GPIO_20/DISPC2_VSYNC
	STR	a2, [a1, #0x1BC]	; GPIO_19/DISPC2_PCLK + GPIO_18/DISPC2_HSYNC
	STR	a2, [a1, #0x1B8]	; GPIO_17/DISPC2_DATA17 + GPIO_16/DISPC2_DATA16
	STR	a2, [a1, #0x1B4]	; GPIO_15/DISPC2_DATA9 + GPIO_14/DISPC2_DATA10
	STR	a2, [a1, #0x174]	; GPIO_168/DISPC2_DATA11 + GPIO_167/DISPC2_DATA12
	STR	a2, [a1, #0x170]	; GPIO_166/DISPC2_DATA13 + GPIO_165/DISPC2_DATA14
	STR	a2, [a1, #0x16C]	; GPIO_164/DISPC2_DATA15 + GPIO_163/DISPC2_DATA18
	STR	a2, [a1, #0x168]	; GPIO_162/DISPC2_DATA19 + GPIO_161/DISPC2_DATA20
	STR	a2, [a1, #0x164]	; GPIO_160/DISPC2_DATA21 + GPIO_159/DISPC2_DATA22
	STRH	a2, [a3, #0x062]	; GPIO_158/DISPC2_DATA23
d146 1
a146 1
	; Linux does not do this
d148 20
a167 20
	; set all pins as output
	; GPIO_14 .. GPIO_28
	LDR	a1, L4_GPIO1_Log
	LDR	a2, [a1, #GPIO_OE]
	BIC	a2, a2, #(0xFF << (14 - 0))
	BIC	a2, a2, #(0x7F << (22 - 0))
	STR	a2, [a1, #GPIO_OE]
	; GPIO_158 .. GPIO_159
	LDR	a1, L4_GPIO5_Log
	LDR	a2, [a1, #GPIO_OE]
	BIC	a2, a2, #(0x03 << (158 - 4 * 32))
	STR	a2, [a1, #GPIO_OE]
	; GPIO_160 .. GPIO_168
	LDR	a1, L4_GPIO6_Log
	LDR	a2, [a1, #GPIO_OE]
	BIC	a2, a2, #(0xFF << (160 - 5 * 32))
	BIC	a2, a2, #(0x01 << (168 - 5 * 32))
	; GPIO_190 .. GPIO_191
	BIC	a2, a2, #(0x03 << (190 - 5 * 32))
	STR	a2, [a1, #GPIO_OE]
d170 1
a170 1
	Pull	"pc"
d177 1
a177 1
	MOV	r0, #0
d187 1
a187 1
	MOV	pc, lr
d190 2
a191 2
	MOV	a1, #-1
	MOV	pc, lr
d197 1
a197 1
	MOV	a1, #2_111111	; 1,2,4,8,16,32 bpp
d199 1
a199 1
	MOV	a1, #2_111000	; 8,16,32 bpp
d201 1
a201 1
	MOV	pc, lr
d204 2
a205 2
	MOV	a1, #2_10010	; h/w pointer, no VSyncs
	MOV	pc, lr
d208 2
a209 2
	MOV	a1, #4
	MOV	pc, lr
d212 35
a246 35
	; Not much to do here - just register our HAL device
	Push	"v1,lr"
	ADRL	v1, VideoDevice
	MOV	a1, v1
	ADR	a2, VideoDeviceTemplate
	MOV	a3, #Video_DeviceSize
	BL	memcpy
	LDR	a1, L4_Display_Log
	STR	a1, [v1, #HALDevice_Address]
	ADRL	a3, VideoBoardConfig
	STR	a3, [v1, #HALDevice_VDUDeviceSpecificField]
	STR	sb, [v1, #:INDEX:VideoWorkspace]
	; Fill in the board config
	LDR	a2, sys_clk
	STR	a2, [a3, #VideoBoardConfig_sys_clk]
	BL	Determine_PorchSync_Limits
	STRH	a1, [a3, #VideoBoardConfig_Max_Porch]
	STRH	a2, [a3, #VideoBoardConfig_Max_Sync]
	LDR	a2, L4_sDMA_Log
	STR	a2, [a3, #VideoBoardConfig_DMA_Ptr]
	MOV	a2, #SDMA_IRQ_1
	STR	a2, [a3, #VideoBoardConfig_DMA_Device]
	ASSERT	SDMA_NumDevices = 31
	MOV	a2, #&80000000
	STR	a2, [a3, #VideoBoardConfig_DMA_Chans]
	LDRB	a2, [sb, #BoardConfig_VBC_Flags]
	STRB	a2, [a3, #VideoBoardConfig_Flags]
	LDRB	a2, [sb, #BoardConfig_VBC_LCDNum]
	STRB	a2, [a3, #VideoBoardConfig_Num_LCDs]
	LDR	a2, [sb, #BoardConfig_VBC_LCDPtr]
	STR	a2, [a3, #VideoBoardConfig_LCD_Configs]
	MOV	a1, #0
	MOV	a2, v1
	CallOS	OS_AddDevice
	Pull	"v1,pc"
d249 18
a266 18
	DCW	HALDeviceType_Video + HALDeviceVideo_VDU
	DCW	HALDeviceID_VDU_OMAP4
	DCD	HALDeviceBus_Interconnect + HALDeviceInterconnectBus_L3
	DCD	0		; API version 0
	DCD	VideoDevice_Desc
	DCD	0		; Address - filled in later
	%	12		; Reserved
	DCD	VideoDevice_Activate
	DCD	VideoDevice_Deactivate
	DCD	VideoDevice_Reset
	DCD	VideoDevice_Sleep
	DCD	VIDEO_IRQ	; Device interrupt
	DCD	0		; TestIRQ cannot be called
	%	8
	DCD	0		; Pointer to board config stuff - filled in later
	ASSERT (. - VideoDeviceTemplate) = HALDevice_VDU_Size
	DCD	0		; HAL workspace pointer - filled in later
	ASSERT (. - VideoDeviceTemplate) = Video_DeviceSize
d269 2
a270 2
	=	"OMAP4 video controller", 0
	ALIGN
d273 11
a283 11
	Entry	"sb"
	LDR	sb, VideoWorkspace
	; Enable DSS power (if not already activated)
	LDR	a1, L4_ClockMan2_Log
	ADD	a1, a1, #DSS_CM2
	LDR	a2, [a1, #CM_DSS_DSS_CLKCTRL]
	ANDS	a2, a2, #((1 << 18) + (3 << 16))	; STDBST | IDLEST
	MOVNE	a2, #2					; SW_WKUP
	STRNE	a2, [a1, #CM_DSS_CLKSTCTRL]
	MOV	a1, #1
	EXIT
d287 1
a287 1
	MOV	pc, lr
d290 2
a291 2
	MOV	a1, #0
	MOV	pc, lr
d294 4
a297 4
	; a1 = HAL device
	; a2 = brightness 0-65536, which we treat as a simple on/off flag
	Entry	"sb"
	LDR	sb, VideoWorkspace
d299 3
a301 3
	CMP	a2, #0
	BEQ	%FT10
	DebugTime a1, "Video on @@ "
d304 5
a308 5
	; Just set the GPIO to the right value
	LDRB	a1, [sb, #BoardConfig_VideoGPIO]
	CMP	a1, #255
	BLNE	GPIOx_SetOutput
	EXIT
d311 7
a317 7
	; Returns:
	; a1 = max porch value
	; a2 = max sync value
	; OMAP44xx has fixed values
	MOV	a1, #(1 << 12)
	MOV	a2, #(1 << 8)
	MOV	pc, lr
d319 1
a319 1
	END
@


1.2
log
@Update to OMAP4 HAL.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    added further definitions for TWL6040 audio chip
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
    added further register descriptions according OMAP4 TRM
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.UART
    added further register descriptions according OMAP4 TRM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added definitions for OMAP4460 (Panda ES)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
    order of UART entries changed
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    don't reset debug UART
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    modifications according to OMAP3 version
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.debug
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.UART
    changes according to hdr.UART changes; HAL_UARTModemControl
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
    use definitions from hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    use definitions from hdr.SDMA
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added code to VideoDevice_Activate (enable DSS power)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    changes for working sound support

Submissions from Willi Theiss. Compiles, but not tested here.

Version 0.05. Tagged as 'OMAP4-0_05'
@
text
@d298 6
@


1.1
log
@Initial revision
@
text
@d275 7
a281 9
	; Enable DSS power
	; TODO - should disable interrupts for this bit!
;	LDR	a1, L4_ClockMan_Log
;	LDR	a2, [a1, #CM_ICLKEN_DSS]
;	ORR	a2, a2, #1	; EN_DSS (correct to enable iclk before fclk?)
;	STR	a2, [a1, #CM_ICLKEN_DSS]
;	LDR	a2, [a1, #CM_FCLKEN_DSS]
;	ORR	a2, a2, #7	; EN_DSS1, EN_DSS2, EN_TV (required for reset)
;	STR	a2, [a1, #CM_FCLKEN_DSS]
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
