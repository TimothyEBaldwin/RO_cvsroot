head	1.7;
access;
symbols
	OMAP4-0_60:1.7
	OMAP4-0_59-1_52_2_3:1.7
	OMAP4-0_59:1.7
	OMAP4-0_58:1.7
	OMAP4-0_57:1.7
	OMAP4-0_56:1.7
	OMAP4-0_55:1.7
	OMAP4-0_54-1_52_2_2:1.7
	OMAP4-0_54:1.7
	OMAP4-0_53:1.7
	OMAP4-0_52-1_52_2_1:1.7
	SMP:1.7.0.2
	SMP_bp:1.7
	OMAP4-0_52:1.7
	OMAP4-0_51:1.7
	OMAP4-0_50:1.7
	OMAP4-0_49:1.7
	OMAP4-0_48:1.7
	OMAP4-0_47:1.7
	OMAP4-0_46:1.7
	OMAP4-0_45:1.7
	OMAP4-0_44:1.7
	OMAP4-0_43:1.7
	OMAP4-0_42:1.7
	OMAP4-0_41:1.7
	OMAP4-0_40:1.7
	OMAP4-0_39:1.7
	OMAP4-0_38:1.7
	OMAP4-0_37:1.7
	OMAP4-0_36:1.7
	OMAP4-0_35:1.7
	OMAP4-0_34:1.7
	OMAP4-0_33:1.7
	OMAP4-0_32:1.7
	OMAP4-0_31:1.7
	OMAP4-0_30:1.7
	OMAP4-0_29:1.7
	OMAP4-0_28:1.7
	OMAP4-0_27:1.7
	OMAP4-0_26:1.7
	OMAP4-0_25:1.7
	OMAP4-0_24:1.7
	OMAP4-0_23:1.7
	OMAP4-0_22:1.7
	OMAP4-0_21:1.7
	OMAP4-0_20:1.7
	OMAP4-0_19:1.7
	OMAP4-0_18:1.7
	OMAP4-0_17:1.7
	OMAP4-0_16:1.7
	OMAP4-0_15:1.7
	OMAP4-0_14:1.7
	OMAP4-0_13:1.7
	OMAP4-0_12:1.7
	OMAP4-0_11:1.7
	OMAP4-0_10:1.7
	OMAP4-0_09:1.6
	OMAP4-0_08:1.5
	OMAP4-0_07:1.5
	OMAP4-0_06:1.4
	OMAP4-0_05:1.4
	OMAP4-0_04:1.3
	OMAP4-0_03:1.2
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2012.07.03.23.09.04;	author bavison;	state Exp;
branches;
next	1.6;
commitid	0Wfi25ZdrHiIGabw;

1.6
date	2012.06.11.22.45.13;	author jlee;	state Exp;
branches;
next	1.5;
commitid	1gu7Xe3Epacpgl8w;

1.5
date	2012.03.25.11.42.58;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	4FjnaYBzkPTA6gYv;

1.4
date	2012.02.11.17.48.09;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	W3PfhFs2h9uBvLSv;

1.3
date	2011.12.06.20.10.49;	author jlee;	state Exp;
branches;
next	1.2;
commitid	TzK0OVOgNG36saKv;

1.2
date	2011.12.04.19.08.48;	author jlee;	state Exp;
branches;
next	1.1;
commitid	Ep3imxm1UGrOaUJv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.7
log
@  Added SD support for Pandaboard
Detail:
  SDHCI HAL device created. Also, Entry HAL_UARTDefault added (supports
  OS_SerialOp) and HALDoesVideo switch, previously disabled, is now removed.
Admin:
  Requires SDIODriver 0.04.
  Changes received from Willi Theiss.

Version 0.10. Tagged as 'OMAP4-0_10'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        EXPORT  HAL_UARTPorts
        EXPORT  HAL_UARTStartUp
        EXPORT  HAL_UARTShutdown
        EXPORT  HAL_UARTFeatures
        EXPORT  HAL_UARTReceiveByte
        EXPORT  HAL_UARTTransmitByte
        EXPORT  HAL_UARTLineStatus
        EXPORT  HAL_UARTInterruptEnable
        EXPORT  HAL_UARTRate
        EXPORT  HAL_UARTFormat
        EXPORT  HAL_UARTFIFOSize
        EXPORT  HAL_UARTFIFOClear
        EXPORT  HAL_UARTFIFOEnable
        EXPORT  HAL_UARTFIFOThreshold
        EXPORT  HAL_UARTInterruptID
        EXPORT  HAL_UARTBreak
        EXPORT  HAL_UARTModemControl
        EXPORT  HAL_UARTModemStatus
        EXPORT  HAL_UARTDevice
        EXPORT  HAL_UARTDefault

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>

        GET     Hdr:Proc
        GET     Hdr:OSEntries

        GET     hdr.omap4430
        GET     hdr.StaticWS
        GET     hdr.UART

; Put base address into the a1, given port number in a1
        MACRO
        BaseAddr
        ADD     a1, sb, a1, LSL #2
        LDR     a1, [a1, #BoardConfig_HALUART]
        MEND

        AREA    |Asm$$Code|, CODE, READONLY, PIC

; int Ports(void)
;
;   Return array of UART port physical addresses.
;
HAL_UARTPorts
        LDRB    a1, [sb, #BoardConfig_NumUART]
        MOV     pc, lr

; void Shutdown(int port)
;
HAL_UARTShutdown
        ; Just reuse the startup code

; void StartUp(int port)
;
HAL_UARTStartUp
        ADD     a3, sb, a1
        BaseAddr

        ; Perform soft reset
        MOV     a2, #UART_SYSC_SOFTRESET
        STRB    a2, [a1, #UART_SYSC]
10
        LDRB    a2, [a1, #UART_SYSS]
        TST     a2, #UART_SYSS_RDONE
        BEQ     %BT10

        ; Autoidle, smart idle
        MOV     a2, #(UART_SYSC_AUTOIDLE + UART_SYSC_IDLEMODE_SMART)
        STRB    a2, [a1, #UART_SYSC]

        MOV     a2, #0
        STRB    a2, [a3, #:INDEX:UARTFCRSoftCopy]
        MOV     a2, #UART_LCR_CHAR_LENGTH_8
        STRB    a2, [a1, #UART_LCR]
        MOV     pc, lr

; int Features(int port)
;
;      Bit 0:  FIFOs available
;      Bit 1:  DMA available
;      Bit 2:  Modem lines available
;
HAL_UARTFeatures
        MOV     a1, #2_101
        MOV     pc, lr

; int ReceiveByte(int port, int *status)
;
;   Returns the next byte from the FIFO (if enabled) or the holding register.
;   If status is non-NULL, the line status associated with the byte is
;   read (see LineStatus). The return value is only meaningful if a
;   received byte is available (bit 0 of *status will be set).
;
HAL_UARTReceiveByte
        BaseAddr
        TEQ     a2, #0
        LDRNEB  a3, [a1, #UART_LSR]     ; Read int state if returning status
        LDRB    a1, [a1, #UART_RHR]
        STRNE   a3, [a2]
        MOV     pc, lr

; void TransmitByte(int port, int byte)
;
HAL_UARTTransmitByte
        BaseAddr
        STRB    a2, [a1, #UART_THR]
        MOV     pc, lr

; int LineStatus(int port)
;
;      Bit 0: Receiver Data Ready
;      Bit 1: Overrun Error
;      Bit 2: Parity Error
;      Bit 3: Framing Error
;      Bit 4: Break Error
;      Bit 5: Transmitter Holding Register Empty
;      Bit 6: Transmitter Empty (including FIFO)
;      Bit 7: FIFO contains a Parity, Framing or Break error
;
;   Parity, Framing and Break errors are associated with each byte received.
;   Whether the values reported here are associated with the last byte
;   read using ReceiveByte or with the next byte to be read is undefined.
;   You should request the status using ReceiveByte to ensure accurate
;   identification of bytes with errors.
;
;   Error bits are cleared whenever status is read, using either LineStatus
;   or ReceiveByte with status non-NULL.
;
HAL_UARTLineStatus
        BaseAddr
        LDRB    a1, [a1, #UART_LSR]
        MOV     pc, lr

; int InterruptEnable(int port, int eor, int mask)
;
;   Enables interrupts. Bits are:
;
;      Bit 0: Received Data Available (and Character Timeout)
;      Bit 1: Transmitter Holding Register Empty
;      Bit 2: Received Line Status
;      Bit 3: Modem Status
;
;   Returns previous state.
;
HAL_UARTInterruptEnable
        BaseAddr
        PHPSEI  ip, a4
        LDRB    a4, [a1, #UART_IER]
        AND     a3, a4, a3
        EOR     a3, a2, a3
        STRB    a3, [a1, #UART_IER]
        PLP     ip
        MOV     a1, a4
        MOV     pc, lr


; int Rate(int port, int baud16)
;
;   Sets the rate, in units of 1/16 of a baud. Returns the previous rate.
;   Use -1 to read.
;
HAL_UARTRate
        Entry   "v1,v3"
        BaseAddr
        PHPSEI  ip, a4

        MOV     v1, #UART_MDR1_MODE_SELECT_DISABLE
        STRB    v1, [a1, #UART_MDR1]    ; Disable UART

        LDRB    v3, [a1, #UART_LCR]
        ORR     a4, v3, #UART_LCR_DIV_EN        ; Access divisor latch registers
        STRB    a4, [a1, #UART_LCR]

        LDRB    a3, [a1, #UART_DLL]     ; Read the current baud rate
        LDRB    a4, [a1, #UART_DLH]
        LDR     v1, =UARTCLK
        ADDS    a4, a3, a4, LSL#8
        BEQ     %FT05                   ; Skip divide if no baud programmed yet
        DivRem  a3, v1, a4, lr          ; a3 now contains baud rate * 16
        CMP     v1, a4, LSR#1           ; If the remainder is greater than 1/2
        ADDGE   a3, a3, #1              ; the divisor, round up
05
        CMN     a2, #1                  ; Don't write if we're reading!
        BEQ     %FT10

; We need to program 48MHz / (16 * baud rate)

        LDR     v1, =UARTCLK            ; This was corrupted by the above DIVREM
        DivRem  a4, v1, a2, lr
        CMP     v1, a2, LSR#1           ; If the remainder is greater than 1/2
        ADDGE   a4, a4, #1              ; the divisor, round up

        STRB    a4, [a1, #UART_DLL]
        MOV     a4, a4, LSR#8
        STRB    a4, [a1, #UART_DLH]

10      STRB    v3, [a1, #UART_LCR]     ; Turn off divisor latch access
        MOV     v3, #UART_MDR1_MODE_SELECT_UART_16X
        STRB    v3, [a1, #UART_MDR1]    ; Restart UART
        MOV     a1, a3                  ; Return previous state
        PLP     ip
        EXIT

; int Format(int port, int format)
;
;   Bits 0-1: Bits per word  0=>5, 1=>6, 2=>7, 3=>8
;   Bit 2:    Stop length 0=>1, 1=>2 (1.5 if 5 bits)
;   Bit 3:    Parity enabled
;   Bits 4-5: Parity:  0 => Odd (or disabled)
;                      1 => Even
;                      2 => Mark (parity bit = 1)
;                      3 => Space (parity bit = 0)
;
;   Returns previous format. -1 to read.
;

HAL_UARTFormatMask * (UART_LCR_PARITY_TYPE2 + UART_LCR_PARITY_TYPE1 + UART_LCR_PARITY_EN + UART_LCR_NB_STOP + UART_LCR_CHAR_LENGTH)

HAL_UARTFormat
        BaseAddr
        PHPSEI  ip, a3
        LDRB    a3, [a1, #UART_LCR]
        CMP     a2, #-1
        AND     a4, a3, #HAL_UARTFormatMask     ; a4 = relevant bits of current LCR
        BIC     a3, a3, #HAL_UARTFormatMask     ; a3 = other bits of current LCR
        ANDNE   a2, a2, #HAL_UARTFormatMask     ; a2 = relevant bits on entry
        ORRNE   a2, a2, a3
        STRNEB  a2, [a1, #UART_LCR]
        PLP     ip
        MOV     a1, a4
        MOV     pc, lr

; void FIFOSize(int port, int *rx, int *tx)
;
;   Returns the size of the RX and TX FIFOs. Either parameter may be NULL.
;   Note that the size of the TX FIFO is the total amount of data that can
;   be sent immediately when the Transmitter Holding Register Empty
;   status holds. (So an unusual UART that had a transmit threshold
;   should return total FIFO size minus threshold).
;
HAL_UARTFIFOSize
        BaseAddr
        MOV     a1, #64
        TEQ     a2, #0
        STRNE   a1, [a2]
        TEQ     a3, #0
        STRNE   a1, [a3]
        MOV     pc, lr

; void FIFOClear(int port, int flags)
;
;   Clears the input FIFO (if bit 0 set) and the output FIFO (if bit 1 set).
;
HAL_UARTFIFOClear
        ADD     a4, sb, a1
        BaseAddr
        AND     a2, a2, #2_11
        PHPSEI  ip, a3
        LDRB    a3, [a4, #:INDEX:UARTFCRSoftCopy]
        ORR     a3, a3, a2, LSL #1
        STRB    a3, [a1, #UART_FCR]
        PLP     ip
        MOV     pc, lr

; int FIFOEnable(int port, int enable)
;
;   Enables or disables the RX and TX FIFOs: 0 => disable, 1 => enable
;   -1 => read status. Returns previous status.
;
HAL_UARTFIFOEnable
        Entry   "v1-v2"
        ADD     v1, sb, a1
        BaseAddr
        PHPSEI  ip, a3
        LDRB    a3, [v1, #:INDEX:UARTFCRSoftCopy]
        ASSERT  UART_FCR_FIFO_EN=1
        AND     a4, a3, #UART_FCR_FIFO_EN
        CMP     a2, #-1
        BEQ     %FT10
        CMP     a2, #0
        BICEQ   a2, a3, #UART_FCR_FIFO_EN
        ORRNE   a2, a3, #UART_FCR_FIFO_EN
        CMP     a2, a3
        BEQ     %FT10

        STRB    a2, [v1, #:INDEX:UARTFCRSoftCopy]

        ; Must disable the baud clock to flush the FIFO
        MOV     lr, #UART_MDR1_MODE_SELECT_DISABLE
        STRB    lr, [a1, #UART_MDR1]    ; Disable UART

        LDRB    v2, [a1, #UART_LCR]
        ORR     a3, v2, #UART_LCR_DIV_EN        ; Access divisor latch registers
        STRB    a3, [a1, #UART_LCR]

        LDRB    a3, [a1, #UART_DLL]     ; Read the current baud rate
        LDRB    v1, [a1, #UART_DLH]
        MOV     lr, #0
        STRB    lr, [a1, #UART_DLL]     ; Stop the clock
        STRB    lr, [a1, #UART_DLH]

        STRB    a2, [a1, #UART_FCR]     ; Configure FIFO

        STRB    a3, [a1, #UART_DLL]     ; Restart clock
        STRB    v1, [a1, #UART_DLH]

        STRB    v2, [a1, #UART_LCR]     ; Restore operational mode
        STRB    lr, [a1, #UART_MDR1]    ; Restart UART

10      MOV     a1, a4
        PLP     ip
        EXIT

; int FIFOThreshold(int port, int threshold)
;
;   Sets the receive threshold level for the FIFO RX interrupt. For OMAP4430
;   this is 8, 16, 56 or 60 bytes. Returns previous value. -1 to read.
;
HAL_UARTFIFOThreshold
        Entry   "v1"
        ADD     v1, sb, a1
        BaseAddr
        PHPSEI  ip, a3
        LDRB    a3, [v1, #:INDEX:UARTFCRSoftCopy]
        ANDS    a4, a3, #UART_FCR_RX_FIFO_TRIG
        BIC     a3, a3, #UART_FCR_RX_FIFO_TRIG
        ASSERT  UART_FCR_RX_FIFO_TRIG_8 = 0
        MOVEQ   a4, #8
        BEQ     %FT10
        CMP     a4, #UART_FCR_RX_FIFO_TRIG_56
        MOVLO   a4, #16
        MOVEQ   a4, #56
        MOVHI   a4, #60
10      CMP     a2, #-1
        BEQ     %FT20
        CMP     a2, #16
        ADDGE   a3, a3, #UART_FCR_RX_FIFO_TRIG_16
        CMP     a2, #56
        ADDGE   a3, a3, #(UART_FCR_RX_FIFO_TRIG_56 - UART_FCR_RX_FIFO_TRIG_16)
        CMP     a2, #60
        ADDGE   a3, a3, #(UART_FCR_RX_FIFO_TRIG_60 - UART_FCR_RX_FIFO_TRIG_56)
        STRB    a3, [a1, #UART_FCR]
        STRB    a3, [v1, #:INDEX:UARTFCRSoftCopy]
20      MOV     a1, a4
        PLP     ip
        EXIT

; int InterruptID(int port)
;
;   Returns the highest priority interrupt currently asserted. In order
;   of priority:
;
;   3 => Receiver Line Status (Cleared by ReceiveByte)
;   2 => Received Data Available (Cleared by reading enough data)
;   6 => Character Timeout (received data waiting)
;   1 => Transmitter Holding Register Empty (Cleared by this call)
;   0 => Modem Status (Cleared by ModemStatus)
;   -1 => No Interrupt
;
;   The Modem Status interrupt occurs when the CTS, DSR or DCD inputs
;   change, or when RI goes from high to low (ie bits 0 to 3 of ModemStatus
;   are set).
;
HAL_UARTInterruptID
        BaseAddr
        LDRB    a4, [a1, #UART_IIR]
        TST     a4, #1
        MOVEQ   a1, a4, LSR #1
        ANDEQ   a1, a1, #7
        MOVNE   a1, #-1
        MOV     pc, lr

; int Break(int port, int enable)
;
;   Activates (1) or deactivates (0) a break condition. -1 to read,
;   returns previous state.
;
HAL_UARTBreak
        BaseAddr
        PHPSEI  ip, a3
        LDRB    a3, [a1, #UART_LCR]
        ANDS    a4, a3, #UART_LCR_BREAK_EN
        MOVNE   a4, #1
        CMP     a2, #-1
        BEQ     %FT10
        CMP     a2, #0
        BICEQ   a3, a3, #UART_LCR_BREAK_EN
        ORRNE   a3, a3, #UART_LCR_BREAK_EN
        STRB    a3, [a1, #UART_LCR]
10      MOV     a1, a4
        PLP     ip
        MOV     pc, lr

; int ModemControl(int port, int eor, int mask)
;
;   Modifies the modem control outputs.
;
;   Bit 0: DTR
;   Bit 1: RTS
;
;   Note that these are logical outputs, although the physical pins may be
;   inverted.  So 1 indicates a request to send.  Returns previous state.
;   Needs to clear the modem interrupt status.
;

HAL_UARTModemControl
        BaseAddr
        PHPSEI  ip, a4
        LDRB    a4, [a1, #UART_MCR]
        ORR     a3, a3, #(255 - (UART_MCR_DTR + UART_MCR_RTS))  ; Only allow DTR+RTS to be modified
        AND     a2, a2, #(UART_MCR_DTR + UART_MCR_RTS)
        AND     a3, a3, a4
        EOR     a3, a3, a2
        CMP     a3, a4
        STRNEB  a3, [a1, #UART_MCR]
        PLP     ip
        AND     a1, a4, #(UART_MCR_DTR + UART_MCR_RTS)
        MOV     pc, lr

; int ModemStatus(int port)
;
;   Reads the modem status inputs.
;
;   Bit 0: CTS changed since last call
;   Bit 1: DSR changed since last call
;   Bit 2: RI changed from high to low since last call
;   Bit 3: DCD changed since last call
;   Bit 4: CTS
;   Bit 5: DSR
;   Bit 6: RI
;   Bit 7: DCD
;
;   Note that these are logical inputs, although the physical pins may be
;   inverted.  So 1 indicates a Clear To Send condition.  This must also clear
;   the modem interrupt status.
;
HAL_UARTModemStatus
        BaseAddr
        LDRB    a1, [a1, #UART_MSR]
        MOV     pc, lr

; int Device(int port)
;
;   Return the device number allocated to the UART port
;
HAL_UARTDevice
        ADD     a1, sb, a1
        LDRB    a1, [a1, #BoardConfig_HALUARTIRQ]
        MOV     pc, lr

; int Default(void)
;
;   Return the default UART for the OS to use, or -1 for none
;
HAL_UARTDefault
        LDRB    a1, [sb, #BoardConfig_DefaultUART]
        MOV     pc, lr

        END
@


1.6
log
@Fix HAL_UARTModemControl
Detail:
  s/UART:
  - HAL_UARTModemControl now uses the correct AND mask; previous code would have always had bit 0 of the mask set.
  - Fixed code in HAL_UARTModemControl that was testing for calls that don't update the register
Admin:
  Builds, but untested
  Identical fix was tested in OMAP3 HAL


Version 0.09. Tagged as 'OMAP4-0_09'
@
text
@d35 1
d305 1
a305 1
        STRB    a3, [v1, #:INDEX:UARTFCRSoftCopy]
d470 8
@


1.5
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d428 1
a428 2
        CMP     a2, #-1
        ORR     a3, a3, #(256 - (UART_MCR_DTR + UART_MCR_RTS))  ; Only allow DTR+RTS to be modified
d430 3
a432 2
        ANDNE   a3, a3, a4
        EORNE   a3, a3, a2
@


1.4
log
@Update to OMAP4 HAL.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    added further definitions for TWL6040 audio chip
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
    added further register descriptions according OMAP4 TRM
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.UART
    added further register descriptions according OMAP4 TRM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added definitions for OMAP4460 (Panda ES)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
    order of UART entries changed
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    don't reset debug UART
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    modifications according to OMAP3 version
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.debug
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.UART
    changes according to hdr.UART changes; HAL_UARTModemControl
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
    use definitions from hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    use definitions from hdr.SDMA
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added code to VideoDevice_Activate (enable DSS power)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    changes for working sound support

Submissions from Willi Theiss. Compiles, but not tested here.

Version 0.05. Tagged as 'OMAP4-0_05'
@
text
@d16 32
a47 32
	EXPORT	HAL_UARTPorts
	EXPORT	HAL_UARTStartUp
	EXPORT	HAL_UARTShutdown
	EXPORT	HAL_UARTFeatures
	EXPORT	HAL_UARTReceiveByte
	EXPORT	HAL_UARTTransmitByte
	EXPORT	HAL_UARTLineStatus
	EXPORT	HAL_UARTInterruptEnable
	EXPORT	HAL_UARTRate
	EXPORT	HAL_UARTFormat
	EXPORT	HAL_UARTFIFOSize
	EXPORT	HAL_UARTFIFOClear
	EXPORT	HAL_UARTFIFOEnable
	EXPORT	HAL_UARTFIFOThreshold
	EXPORT	HAL_UARTInterruptID
	EXPORT	HAL_UARTBreak
	EXPORT	HAL_UARTModemControl
	EXPORT	HAL_UARTModemStatus
	EXPORT	HAL_UARTDevice

	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Machine.<Machine>
	GET	Hdr:ImageSize.<ImageSize>

	GET	Hdr:Proc
	GET	Hdr:OSEntries

	GET	hdr.omap4430
	GET	hdr.StaticWS
	GET	hdr.UART
d50 5
a54 5
	MACRO
	BaseAddr
	ADD	a1, sb, a1, LSL #2
	LDR	a1, [a1, #BoardConfig_HALUART]
	MEND
d56 1
a56 1
	AREA	|Asm$$Code|, CODE, READONLY, PIC
d63 2
a64 2
	LDRB	a1, [sb, #BoardConfig_NumUART]
	MOV	pc, lr
d69 1
a69 1
	; Just reuse the startup code
d74 2
a75 2
	ADD	a3, sb, a1
	BaseAddr
d77 3
a79 3
	; Perform soft reset
	MOV	a2, #UART_SYSC_SOFTRESET
	STRB	a2, [a1, #UART_SYSC]
d81 13
a93 13
	LDRB	a2, [a1, #UART_SYSS]
	TST	a2, #UART_SYSS_RDONE
	BEQ	%BT10

	; Autoidle, smart idle
	MOV	a2, #(UART_SYSC_AUTOIDLE + UART_SYSC_IDLEMODE_SMART)
	STRB	a2, [a1, #UART_SYSC]

	MOV	a2, #0
	STRB	a2, [a3, #:INDEX:UARTFCRSoftCopy]
	MOV	a2, #UART_LCR_CHAR_LENGTH_8
	STRB	a2, [a1, #UART_LCR]
	MOV	pc, lr
d102 2
a103 2
	MOV	a1, #((1 << 2) + (1 << 0))
	MOV	pc, lr
d113 6
a118 6
	BaseAddr
	TEQ	a2, #0
	LDRNEB	a3, [a1, #UART_LSR]	; Read int state if returning status
	LDRB	a1, [a1, #UART_RHR]
	STRNE	a3, [a2]
	MOV	pc, lr
d123 3
a125 3
	BaseAddr
	STRB	a2, [a1, #UART_THR]
	MOV	pc, lr
d148 3
a150 3
	BaseAddr
	LDRB	a1, [a1, #UART_LSR]
	MOV	pc, lr
d164 9
a172 9
	BaseAddr
	PHPSEI	ip, a4
	LDRB	a4, [a1, #UART_IER]
	AND	a3, a4, a3
	EOR	a3, a2, a3
	STRB	a3, [a1, #UART_IER]
	PLP	ip
	MOV	a1, a4
	MOV	pc, lr
d181 19
a199 19
	Entry	"v1,v3"
	BaseAddr
	PHPSEI	ip, a4

	MOV	v1, #UART_MDR1_MODE_SELECT_DISABLE
	STRB	v1, [a1, #UART_MDR1]	; Disable UART

	LDRB	v3, [a1, #UART_LCR]
	ORR	a4, v3, #UART_LCR_DIV_EN	; Access divisor latch registers
	STRB	a4, [a1, #UART_LCR]

	LDRB	a3, [a1, #UART_DLL]	; Read the current baud rate
	LDRB	a4, [a1, #UART_DLH]
	LDR	v1, =UARTCLK
	ADDS	a4, a3, a4, LSL#8
	BEQ	%FT05			; Skip divide if no baud programmed yet
	DivRem	a3, v1, a4, lr		; a3 now contains baud rate * 16
	CMP	v1, a4, LSR#1		; If the remainder is greater than 1/2
	ADDGE	a3, a3, #1		; the divisor, round up
d201 2
a202 2
	CMN	a2, #1			; Don't write if we're reading!
	BEQ	%FT10
d206 15
a220 15
	LDR	v1, =UARTCLK		; This was corrupted by the above DIVREM
	DivRem	a4, v1, a2, lr
	CMP	v1, a2, LSR#1		; If the remainder is greater than 1/2
	ADDGE	a4, a4, #1		; the divisor, round up

	STRB	a4, [a1, #UART_DLL]
	MOV	a4, a4, LSR#8
	STRB	a4, [a1, #UART_DLH]

10	STRB	v3, [a1, #UART_LCR]	; Turn off divisor latch access
	MOV	v3, #UART_MDR1_MODE_SELECT_UART_16X
	STRB	v3, [a1, #UART_MDR1]	; Restart UART
	MOV	a1, a3			; Return previous state
	PLP	ip
	EXIT
d228 3
a230 3
;		       1 => Even
;		       2 => Mark (parity bit = 1)
;		       3 => Space (parity bit = 0)
d238 12
a249 12
	BaseAddr
	PHPSEI	ip, a3
	LDRB	a3, [a1, #UART_LCR]
	CMP	a2, #-1
	AND	a4, a3, #HAL_UARTFormatMask	; a4 = relevant bits of current LCR
	BIC	a3, a3, #HAL_UARTFormatMask	; a3 = other bits of current LCR
	ANDNE	a2, a2, #HAL_UARTFormatMask	; a2 = relevant bits on entry
	ORRNE	a2, a2, a3
	STRNEB	a2, [a1, #UART_LCR]
	PLP	ip
	MOV	a1, a4
	MOV	pc, lr
d260 7
a266 7
	BaseAddr
	MOV	a1, #64
	TEQ	a2, #0
	STRNE	a1, [a2]
	TEQ	a3, #0
	STRNE	a1, [a3]
	MOV	pc, lr
d273 9
a281 9
	ADD	a4, sb, a1
	BaseAddr
	AND	a2, a2, #2_11
	PHPSEI	ip, a3
	LDRB	a3, [a4, #:INDEX:UARTFCRSoftCopy]
	ORR	a3, a3, a2, LSL #1
	STRB	a3, [a1, #UART_FCR]
	PLP	ip
	MOV	pc, lr
d289 42
a330 42
	Entry	"v1-v2"
	ADD	v1, sb, a1
	BaseAddr
	PHPSEI	ip, a3
	LDRB	a3, [v1, #:INDEX:UARTFCRSoftCopy]
	ASSERT	UART_FCR_FIFO_EN=1
	AND	a4, a3, #UART_FCR_FIFO_EN
	CMP	a2, #-1
	BEQ	%FT10
	CMP	a2, #0
	BICEQ	a2, a3, #UART_FCR_FIFO_EN
	ORRNE	a2, a3, #UART_FCR_FIFO_EN
	CMP	a2, a3
	BEQ	%FT10

	STRB	a3, [v1, #:INDEX:UARTFCRSoftCopy]

	; Must disable the baud clock to flush the FIFO
	MOV	lr, #UART_MDR1_MODE_SELECT_DISABLE
	STRB	lr, [a1, #UART_MDR1]	; Disable UART

	LDRB	v2, [a1, #UART_LCR]
	ORR	a3, v2, #UART_LCR_DIV_EN	; Access divisor latch registers
	STRB	a3, [a1, #UART_LCR]

	LDRB	a3, [a1, #UART_DLL]	; Read the current baud rate
	LDRB	v1, [a1, #UART_DLH]
	MOV	lr, #0
	STRB	lr, [a1, #UART_DLL]	; Stop the clock
	STRB	lr, [a1, #UART_DLH]

	STRB	a2, [a1, #UART_FCR]	; Configure FIFO

	STRB	a3, [a1, #UART_DLL]	; Restart clock
	STRB	v1, [a1, #UART_DLH]

	STRB	v2, [a1, #UART_LCR]	; Restore operational mode
	STRB	lr, [a1, #UART_MDR1]	; Restart UART

10	MOV	a1, a4
	PLP	ip
	EXIT
d338 27
a364 27
	Entry	"v1"
	ADD	v1, sb, a1
	BaseAddr
	PHPSEI	ip, a3
	LDRB	a3, [v1, #:INDEX:UARTFCRSoftCopy]
	ANDS	a4, a3, #UART_FCR_RX_FIFO_TRIG
	BIC	a3, a3, #UART_FCR_RX_FIFO_TRIG
	ASSERT	UART_FCR_RX_FIFO_TRIG_8 = 0
	MOVEQ	a4, #8
	BEQ	%FT10
	CMP	a4, #UART_FCR_RX_FIFO_TRIG_56
	MOVLO	a4, #16
	MOVEQ	a4, #56
	MOVHI	a4, #60
10	CMP	a2, #-1
	BEQ	%FT20
	CMP	a2, #16
	ADDGE	a3, a3, #UART_FCR_RX_FIFO_TRIG_16
	CMP	a2, #56
	ADDGE	a3, a3, #(UART_FCR_RX_FIFO_TRIG_56 - UART_FCR_RX_FIFO_TRIG_16)
	CMP	a2, #60
	ADDGE	a3, a3, #(UART_FCR_RX_FIFO_TRIG_60 - UART_FCR_RX_FIFO_TRIG_56)
	STRB	a3, [a1, #UART_FCR]
	STRB	a3, [v1, #:INDEX:UARTFCRSoftCopy]
20	MOV	a1, a4
	PLP	ip
	EXIT
d383 7
a389 7
	BaseAddr
	LDRB	a4, [a1, #UART_IIR]
	TST	a4, #1
	MOVEQ	a1, a4, LSR #1
	ANDEQ	a1, a1, #7
	MOVNE	a1, #-1
	MOV	pc, lr
d397 14
a410 14
	BaseAddr
	PHPSEI	ip, a3
	LDRB	a3, [a1, #UART_LCR]
	ANDS	a4, a3, #UART_LCR_BREAK_EN
	MOVNE	a4, #1
	CMP	a2, #-1
	BEQ	%FT10
	CMP	a2, #0
	BICEQ	a3, a3, #UART_LCR_BREAK_EN
	ORRNE	a3, a3, #UART_LCR_BREAK_EN
	STRB	a3, [a1, #UART_LCR]
10	MOV	a1, a4
	PLP	ip
	MOV	pc, lr
d425 12
a436 13
	BaseAddr
	PHPSEI	ip, a4
	LDRB	a4, [a1, #UART_MCR]
	CMP	a2, #-1
	ORR	a3, a3, #(256 - (UART_MCR_DTR + UART_MCR_RTS))	; Only allow DTR+RTS to be modified
	AND	a2, a2, #(UART_MCR_DTR + UART_MCR_RTS)
	ANDNE	a3, a3, a4
	EORNE	a3, a3, a2
	STRNEB	a3, [a1, #UART_MCR]
	PLP	ip
	AND	a1, a4, #(UART_MCR_DTR + UART_MCR_RTS)
	MOV	pc, lr

d456 3
a458 3
	BaseAddr
	LDRB	a1, [a1, #UART_MSR]
	MOV	pc, lr
d465 3
a467 3
	ADD	a1, sb, a1
	LDRB	a1, [a1, #BoardConfig_HALUARTIRQ]
	MOV	pc, lr
d469 1
a469 1
	END
@


1.3
log
@Fix compile error
Detail:
  s/UART - Fixed HAL_UARTModemControl to use UART_MCR_DTR and UART_MCR_RTS constants instead of DTR and RTS
Admin:
  OMAP4 HAL now compiles again


Version 0.04. Tagged as 'OMAP4-0_04'
@
text
@d51 1
a51 1
$label	BaseAddr
d66 5
d76 9
a84 6
	MOV	a2, #0
	STRB	a2, [a1, #UART_IER]
	STRB	a2, [a1, #UART_FCR]
	STRB	a2, [a3, #:INDEX:UARTFCRSoftCopy]
	MOV	a2, #UART_LCR_WLS_8
	STRB	a2, [a1, #UART_LCR]
a85 1
	; TODO - we should really perform a full reset too
a87 1
	MOV	pc, lr
a88 4
; void Shutdown(int port)
;
HAL_UARTShutdown
	BaseAddr
d90 3
a92 3
	STRB	a2, [a1, #UART_IER]
	STRB	a2, [a1, #UART_FCR]
	STRB	a2, [a1, #UART_MCR]
d102 1
a102 1
	MOV	a1, #2_101
d116 1
a116 1
	LDRB	a1, [a1, #UART_RBR]
d184 4
d189 1
a189 1
	ORR	a4, v3, #UART_LCR_DLAB	; Access divisor latch registers
d193 1
a193 1
	LDRB	a4, [a1, #UART_DLM]
d195 2
a196 1
	ADD	a4, a3, a4, LSL#8
d200 1
d213 1
a213 1
	STRB	a4, [a1, #UART_DLM]
d216 2
d235 1
a235 1
HAL_UARTFormatMask * (UART_LCR_SPA + UART_LCR_EPS + UART_LCR_PEN + UART_LCR_STP + UART_LCR_WLS)
d289 1
a289 1
	Entry	"v1"
d294 2
a295 2
	ASSERT	UART_FCR_FIFOEN=1
	AND	a4, a3, #UART_FCR_FIFOEN
d299 5
a303 3
	BICEQ	a3, a3, #UART_FCR_FIFOEN
	ORRNE	a3, a3, #UART_FCR_FIFOEN
	STRB	a3, [a1, #UART_FCR]
d305 23
d343 3
a345 3
	ANDS	a4, a3, #UART_FCR_FIFOTHR
	BIC	a3, a3, #UART_FCR_FIFOTHR
	ASSERT	UART_FCR_FIFOTHR_8 = 0
d348 1
a348 1
	CMP	a4, #UART_FCR_FIFOTHR_56
d355 1
a355 1
	ADDGE	a3, a3, #UART_FCR_FIFOTHR_16
d357 1
a357 1
	ADDGE	a3, a3, #(UART_FCR_FIFOTHR_56 - UART_FCR_FIFOTHR_16)
d359 1
a359 1
	ADDGE	a3, a3, #(UART_FCR_FIFOTHR_60 - UART_FCR_FIFOTHR_56)
d400 1
a400 1
	ANDS	a4, a3, #UART_LCR_BCR
d405 2
a406 2
	BICEQ	a3, a3, #UART_LCR_BCR
	ORRNE	a3, a3, #UART_LCR_BCR
d429 2
a430 2
	ORR	a3, a3, #256-(UART_MCR_DTR+UART_MCR_RTS) ; Only allow DTR+RTS to be modified
	AND	a2, a2, #UART_MCR_DTR+UART_MCR_RTS      
d435 1
a435 1
	AND	a1, a4, #UART_MCR_DTR+UART_MCR_RTS
@


1.2
log
@Fix HAL_UARTModemControl
Detail:
  s/UART - Fixed HAL_UARTModemControl to pay attention to the 'mask' parameter
Admin:
  Fix was tested on OMAP3 & Iyonix


Version 0.03. Tagged as 'OMAP4-0_03'
@
text
@d394 2
a395 2
	ORR	a3, a3, #256-(DTR+RTS) ; Only allow DTR+RTS to be modified
	AND	a2, a2, #DTR+RTS      
d400 1
a400 1
	AND	a1, a4, #DTR+RTS
@


1.1
log
@Initial revision
@
text
@a14 1
; This is currently set up to provide only 1 serial port - UART3
d391 2
a392 2
	PHPSEI	ip, a3
	LDRB	a3, [a1, #UART_MCR]
d394 5
a398 5
	AND	a4, a3, #(UART_MCR_DTR + UART_MCR_RTS)	; a4 = relevant bits of current MCR
	BIC	a3, a3, #(UART_MCR_DTR + UART_MCR_RTS)	; a3 = other bits of current MCR
	ANDNE	a2, a2, #(UART_MCR_DTR + UART_MCR_RTS)	; a2 = relevant bits on entry
	ORRNE	a2, a2, a3
	STRNEB	a2, [a1, #UART_MCR]
d400 1
a400 1
	MOV	a1, a4
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
