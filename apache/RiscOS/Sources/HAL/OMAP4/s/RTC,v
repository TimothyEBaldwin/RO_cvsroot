head	1.8;
access;
symbols
	OMAP4-0_60:1.8
	OMAP4-0_59-1_52_2_3:1.8
	OMAP4-0_59:1.8
	OMAP4-0_58:1.8
	OMAP4-0_57:1.8
	OMAP4-0_56:1.8
	OMAP4-0_55:1.8
	OMAP4-0_54-1_52_2_2:1.8
	OMAP4-0_54:1.8
	OMAP4-0_53:1.8
	OMAP4-0_52-1_52_2_1:1.8
	SMP:1.8.0.2
	SMP_bp:1.8
	OMAP4-0_52:1.8
	OMAP4-0_51:1.8
	OMAP4-0_50:1.8
	OMAP4-0_49:1.8
	OMAP4-0_48:1.8
	OMAP4-0_47:1.8
	OMAP4-0_46:1.8
	OMAP4-0_45:1.8
	OMAP4-0_44:1.7
	OMAP4-0_43:1.7
	OMAP4-0_42:1.7
	OMAP4-0_41:1.7
	OMAP4-0_40:1.7
	OMAP4-0_39:1.7
	OMAP4-0_38:1.7
	OMAP4-0_37:1.7
	OMAP4-0_36:1.7
	OMAP4-0_35:1.6
	OMAP4-0_34:1.6
	OMAP4-0_33:1.6
	OMAP4-0_32:1.6
	OMAP4-0_31:1.6
	OMAP4-0_30:1.6
	OMAP4-0_29:1.6
	OMAP4-0_28:1.6
	OMAP4-0_27:1.6
	OMAP4-0_26:1.6
	OMAP4-0_25:1.6
	OMAP4-0_24:1.5
	OMAP4-0_23:1.4
	OMAP4-0_22:1.3
	OMAP4-0_21:1.3
	OMAP4-0_20:1.3
	OMAP4-0_19:1.3
	OMAP4-0_18:1.3
	OMAP4-0_17:1.3
	OMAP4-0_16:1.3
	OMAP4-0_15:1.3
	OMAP4-0_14:1.3
	OMAP4-0_13:1.3
	OMAP4-0_12:1.3
	OMAP4-0_11:1.3
	OMAP4-0_10:1.2
	OMAP4-0_09:1.2
	OMAP4-0_08:1.2
	OMAP4-0_07:1.2
	OMAP4-0_06:1.1.1.1
	OMAP4-0_05:1.1.1.1
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2015.04.16.20.30.59;	author jlee;	state Exp;
branches;
next	1.7;
commitid	mS8MdJKQy19I7Rhy;

1.7
date	2014.09.04.21.41.12;	author jlee;	state Exp;
branches;
next	1.6;
commitid	AjMWLbVyJ9pcI4Px;

1.6
date	2013.11.12.21.13.50;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	shNC1iEaRRcJ42dx;

1.5
date	2013.11.09.16.00.17;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	2WLVAyRjeuE9rCcx;

1.4
date	2013.11.01.19.01.19;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	3j2IHKaDTdkbHBbx;

1.3
date	2012.07.04.17.59.09;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	7eFD0kniLkapWgbw;

1.2
date	2012.03.25.11.42.58;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	4FjnaYBzkPTA6gYv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.8
log
@Fix time warp caused by TWL6030 RTC being set running before a valid time has been programmed
Detail:
  s/RTC - Remove TWL6030 RTC startup code from RTC_Init, to ensure that RTC_Read is able to report that the time is invalid if the RTC isn't running. This avoids the RTC module getting confused and thinking the century needs incrementing (RTC will report a year of xx00, CMOS will hold 2015, RTC module assumes year can only go forward -> therefore must be 2100)
  Also perform a dummy read of RTC_STATUS_REG before reading actual value, as the manual warns that this is required.
Admin:
  Tested on Pandaboard
  With CMOS available:
  - *Time defaults to year 1970 on power up (CMOS year ignored due to RTC read error)
  - After setting time and rebooting, time is retained and 4 digit year is reconstructed correctly
  Without CMOS available:
  - *Time defaults to year 1970 on power up (default CMOS year ignored due to RTC read error)
  - After setting time and rebooting, time is retained and 4 digit year is reconstructed correctly (RTC year xx15 deemed higher than CMOS default year 2000)


Version 0.45. Tagged as 'OMAP4-0_45'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     Hdr:HALDevice
        GET     Hdr:RTCDevice

        GET     hdr.omap4430
        GET     hdr.StaticWS
        GET     hdr.Timers
        GET     hdr.PRCM

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  I2CBusRead
        EXPORT  I2CBusWrite
        EXPORT  RTC_Init
        IMPORT  TPSRead
        IMPORT  TPSWrite
        IMPORT  IIC_DoOp_Poll
        IMPORT  memcpy

; TWL6030 RTC IIC address
TPSRTC_IIC              *       (&48 * 2)

; Some RTC registers
SECONDS_REG             *       &00
RTC_CTRL_REG            *       &10
RTC_STATUS_REG          *       &11

; RTC_CTRL_REG bitfields
RTC_CTRL_STOP_RTC_M             *       (1 << 0)
RTC_CTRL_ROUND_30S_M            *       (1 << 1)
RTC_CTRL_AUTO_COMP_M            *       (1 << 2)
RTC_CTRL_MODE_12_24_M           *       (1 << 3)
RTC_CTRL_TEST_MODE_M            *       (1 << 4)
RTC_CTRL_SET_32_COUNTER_M       *       (1 << 5)
RTC_CTRL_GET_TIME_M             *       (1 << 6)

; RTC_STATUS_REG bitfields
RTC_STATUS_RUN_M                *       (1 << 1)
RTC_STATUS_1S_EVENT_M           *       (1 << 2)
RTC_STATUS_1M_EVENT_M           *       (1 << 3)
RTC_STATUS_1H_EVENT_M           *       (1 << 4)
RTC_STATUS_1D_EVENT_M           *       (1 << 5)
RTC_STATUS_ALARM_M              *       (1 << 6)
RTC_STATUS_POWER_UP_M           *       (1 << 7)

; support for external DS1338 RTC chip
DS1338_IIC_BUS          *       (4 - 1) ; I2C4 (on expansion connector A)
DS1338_IIC_ADDR         *       (&68 * 2)

DS_RTC_SEC_REG          *       0
DS_RTC_MIN_REG          *       1
DS_RTC_HOUR_REG         *       2
DS_RTC_WDAY_REG         *       3
DS_RTC_DAY_REG          *       4
DS_RTC_MONTH_REG        *       5
DS_RTC_YEAR_REG         *       6
DS_RTC_CTRL_REG         *       7

; bits in DS_RTC_CTRL_REG
DS_RTC_CTRL_RS0         *       (1 << 0)
DS_RTC_CTRL_RS1         *       (1 << 1)
DS_RTC_CTRL_SQWE        *       (1 << 4)
DS_RTC_CTRL_OSF         *       (1 << 5)
DS_RTC_CTRL_OUT         *       (1 << 7)

; read/write functions for I2C on any bus

I2CBusRead
        ; a1 = IIC address(*2)
        ; a2 = buffer
        ; a3 = count
        ; a4 = start register
        ; v1 = IIC func
        ; v2 = IIC bus no
        ; out:
        ; a1 = return code
        ; ip corrupted
        ; buffer updated
        ORR     a1, a1, #1      ; read
        Push    "a1-a4,lr"      ; Push regs and second iic_transfer block
        EOR     a1, a1, #1+(1:SHL:29) ; write with retry
        ADD     a2, sp, #12
        MOV     a3, #1
        Push    "a1-a3"         ; push first iic_transfer block
        MOV     a1, sp
        MOV     a2, v2, LSL #24 ; bus number goes here
        ADD     a2, a2, #2
        MOV     a3, #0
        BLX     v1
        ADD     sp, sp, #16
        Pull    "a2-a4,pc"

I2CBusWrite
        ; a1 = IIC address(*2)
        ; a2 = buffer
        ; a3 = count
        ; a4 = start register
        ; v1 = IIC func
        ; v2 = IIC bus no
        ; out:
        ; a1 = return code
        ; ip corrupted
        ORR     a1, a1, #1:SHL:31 ; Write (no start bit)
        Push    "a1-a4,lr"      ; Push regs and second iic_transfer block
        EOR     a1, a1, #(1:SHL:29)+(1:SHL:31) ; Write (retries)
        ADD     a2, sp, #12
        MOV     a3, #1
        Push    "a1-a3"         ; push first iic_transfer block
        MOV     a1, sp
        MOV     a2, v2, LSL #24 ; bus number goes here
        ADD     a2, a2, #2
        MOV     a3, #0
        BLX     v1
        ADD     sp, sp, #16
        Pull    "a2-a4,pc"

RTC_Init
        Push    "v1-v2,lr"
        ADRL    a1, RTCWS
        ADR     a2, RTCDeviceTemplate
        MOV     a3, #RTCSize
        BL      memcpy
        STR     sb, [a1, #RTCDeviceHAL_SB]
        SUB     sp, sp, #4                      ; temp small buffer on stack

        ; check for external DS1338 chip on I2C4 bus
        LDR     v1, OSentries+4*OS_IICOpV       ; for I2CBusRead/I2CBusWrite
        MOV     v2, #DS1338_IIC_BUS             ; specify I2C bus
        MOV     a1, #DS1338_IIC_ADDR
        MOV     a3, #1
        MOV     a4, #DS_RTC_CTRL_REG
        MOV     a2, sp
        BL      I2CBusRead
        CMP     a1, #IICStatus_Completed
        BNE     %FT10
        LDRB    a1, [a2]
        TST     a1, #DS_RTC_CTRL_OSF
        BEQ     %FT05
        BIC     a1, a1, #DS_RTC_CTRL_OSF
        STRB    a1, [a2]
        MOV     a1, #DS1338_IIC_ADDR
        BL      I2CBusWrite

05      ; we have seen a DS1338 chip ==> mark it in our workspace
        ADRL    a3, RTCWS
        ADR     a1, DS_RTCReadTime
        STR     a1, [a3, #HALDevice_RTCReadTime]
        ADR     a1, DS_RTCWriteTime
        STR     a1, [a3, #HALDevice_RTCWriteTime]
        ADR     a1, DS_RTCDesc
        STR     a1, [a3, #HALDevice_Description]
        MOV     a1, #HALDeviceID_RTC_DS1307     ; at least we are compatible to this one :-)
        STRH    a1, [a3, #HALDevice_ID]

        B       %FT50

10
        ; no external RTC ==> initialise TWL6030 RTC
        ; prepare GPIO pad for TWL6030 MSECURE input pin (allow write access to RTC)
        LDR     a1, L4_Wakeup_Log
        LDR     a2, =(L4_SYSCTRL_PADCONF_WKUP - L4_Wakeup)
        ADD     a1, a2, a1
        LDR     a2, =0x0002                     ; output + Mode 2 (Reserved)
        STRH    a2, [a1, #0x0054]               ; gpio_wk6

50
        ADD     sp, sp, #4

        Pull    "v1-v2,lr"
        MOV     a1, #0
        ADRL    a2, RTCWS
        CallOS  OS_AddDevice, tailcall

RTCDeviceTemplate
        DCW     HALDeviceType_SysPeri + HALDeviceSysPeri_RTC
        DCW     HALDeviceID_RTC_TWL6030
        DCD     HALDeviceBus_Ser + HALDeviceSerBus_IIC
        DCD     0               ; API version
        DCD     RTCDesc
        DCD     0               ; Address - N/A
        %       12              ; Reserved
        DCD     RTCActivate
        DCD     RTCDeactivate
        DCD     RTCReset
        DCD     RTCSleep
        DCD     -1              ; Interrupt N/A
        DCD     0
        %       8
        DCB     RTCTimeFormat_BCD
        DCB     RTCFormatFlags_BCD_1BasedDay + \
                RTCFormatFlags_BCD_1BasedMonth + \
                RTCFormatFlags_BCD_YearLOIsGood + \
                RTCFormatFlags_BCD_NeedsYearHelp
        %       2
        DCD     RTCReadTime
        DCD     RTCWriteTime

RTCDesc
        DCB     "TWL6030-compatible real-time clock",0
DS_RTCDesc
        DCB     "DS1338-compatible real-time clock",0
        ALIGN

RTCActivate
        MOV     a1, #1
RTCDeactivate
RTCReset
        MOV     pc, lr

RTCSleep
        MOV     a1, #0 ; Previously at full power
        MOV     pc, lr

RTCReadTime
        ; In:
        ; a1 = HALDevice ptr
        ; a2 = RTCTimeStruct ptr
        ; Out:
        ; a1 = return code
        ; RTCTimeStruct updated
        Push    "v1,v3,sb,lr"
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        LDR     v1, OSentries+4*OS_IICOpV ; for TPSRead/TPSWrite
        MOV     v3, a2
        ; Reading the time safely involves several transfers:
        ; 1. Read RTC_STATUS_REG. If bit 1 is clear, the RTC is stopped and we can just
        ;    assume its contents are invalid.
        ; 2. Set RTC_CTRL_REG=&41 (RTC running, GET_TIME set, 24hr mode). GET_TIME will read
        ;    the time from the RTC circuitry and latch it into the time registers (the regular
        ;    time registers, NOT the alarm ones as stated by the manual!)
        ; 3. Read the time regs to read latched time.
        ; There's no need to clear GET_TIME either, as it is cleared automatically by the HW.
        MOV     a1, #TPSRTC_IIC
        SUB     sp, sp, #4 ; temp small buffer on stack
        MOV     a3, #1
        MOV     a4, #RTC_STATUS_REG
        MOV     a2, sp
        BL      TPSRead ; RTC_STATUS_REG requires a dummy read to ensure the status is correct
        MOV     a1, #TPSRTC_IIC
        BL      TPSRead
        CMP     a1, #IICStatus_Completed
        LDRB    ip, [a2]
        MOV     a1, #RTCRetCode_InvalidTime
        MOVNE   a1, #RTCRetCode_Error
        EOR     ip, ip, #RTC_STATUS_RUN_M
        TSTEQ   ip, #RTC_STATUS_RUN_M
        ADDNE   sp, sp, #4
        Pull    "v1,v3,sb,pc", NE
        MOV     ip, #(RTC_CTRL_GET_TIME_M + RTC_CTRL_STOP_RTC_M)
        STR     ip, [a2]
        MOV     a1, #TPSRTC_IIC
        MOV     a4, #RTC_CTRL_REG
        BL      TPSWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ADD     sp, sp, #4
        Pull    "v1,v3,sb,pc", NE
        MOV     a1, #TPSRTC_IIC
        ; We can read the time directly into the RTCTimeStruct buffer
        ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
        ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
        ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
        ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
        ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
        ADD     a2, v3, #RTCTimeStruct_BCD_Seconds
        MOV     a3, #6
        MOV     a4, #SECONDS_REG
        BL      TPSRead
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ASSERT  IICStatus_Completed = 0
        STREQB  a1, [v3, #RTCTimeStruct_BCD_Centiseconds] ; No centisecond time
        STREQB  a1, [v3, #RTCTimeStruct_BCD_YearHI] ; Kernel gives year help
        ASSERT  RTCRetCode_OK = 0
        Pull    "v1,v3,sb,pc"

RTCWriteTime
        ; In:
        ; a1 = HALDevice ptr
        ; a2 = RTCTimeStruct ptr
        ; Out:
        ; a1 = return code
        Push    "v1,v3,sb,lr"
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        ; check if we are called with interrupts disabled - do a polling transfer
        ; this can happen during the shutdown sequence
        MRS     v1, CPSR
        TST     v1, #I32_bit
        ADRNEL  v1, IIC_DoOp_Poll
        LDREQ   v1, OSentries+4*OS_IICOpV ; for TPSRead/TPSWrite
        MOV     v3, a2
        ; Writing the time safely involves several transfers:
        ; 1. Write 0 to RTC_CTRL_REG to stop the clock (just in case there are any issues with
        ;    the clock updating while it's being written to)
        ; 2. Write the new time values
        ; 3. Write 1 to RTC_CTRL_REG to start the clock
        MOV     a1, #TPSRTC_IIC
        MOV     ip, #0
        STR     ip, [sp,#-4]! ; temp small buffer on stack
        MOV     a3, #1
        MOV     a4, #RTC_CTRL_REG
        MOV     a2, sp
        BL      TPSWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ADDNE   sp, sp, #4
        Pull    "v1,v3,sb,pc", NE
        MOV     a1, #TPSRTC_IIC
        ; We can write the time directly from the RTCTimeStruct buffer
        ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
        ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
        ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
        ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
        ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
        ADD     a2, v3, #RTCTimeStruct_BCD_Seconds
        MOV     a3, #6
        MOV     a4, #SECONDS_REG
        ; Sometimes we don't write the time, so skip those bytes if necessary
        LDRB    ip, [a2]
        CMP     ip, #255
        ADDEQ   a2, a2, #3
        SUBEQ   a3, a3, #3
        ADDEQ   a4, a4, #3
        ; Sometimes we don't write the date either
        LDRB    ip, [v3, #RTCTimeStruct_BCD_DayOfMonth]
        CMP     ip, #255
        SUBEQS  a3, a3, #3
        BEQ     %FT01 ; Nothing left to write!
        BL      TPSWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ADDNE   sp, sp, #4
        Pull    "v1,v3,sb,pc", NE
01
        MOV     a3, #RTC_CTRL_STOP_RTC_M
        STR     a3, [sp]
        MOV     a2, sp
        MOV     a4, #RTC_CTRL_REG
        MOV     a1, #TPSRTC_IIC
        BL      TPSWrite
        CMP     a1, #IICStatus_Completed
        ASSERT  RTCRetCode_OK = IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ADD     sp, sp, #4
        Pull    "v1,v3,sb,pc"

; read/write functions for DS1338 chip

DS_RTCReadTime
        ; In:
        ; a1 = HALDevice ptr
        ; a2 = RTCTimeStruct ptr
        ; Out:
        ; a1 = return code
        ; RTCTimeStruct updated
        Push    "v1-v3,sb,lr"
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        LDR     v1, OSentries+4*OS_IICOpV       ; for I2CBusRead
        MOV     v2, #DS1338_IIC_BUS             ; specify I2C bus
        MOV     v3, a2
        ; Reading the time starting with DS_RTC_SEC_REG automatically latches the current time.
        ; There is nothing else to do. We must read the time in 2 blocks because there is
        ; the weekday register in between which has no corresponding part in RTCTimeStruct.
        MOV     a1, #DS1338_IIC_ADDR
        ; We can read the time directly into the RTCTimeStruct buffer
        ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
        ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
        ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
        ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
        ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
        ADD     a2, v3, #RTCTimeStruct_BCD_Seconds
        MOV     a3, #(DS_RTC_WDAY_REG - DS_RTC_SEC_REG)
        MOV     a4, #DS_RTC_SEC_REG
        BL      I2CBusRead
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        Pull    "v1-v3,sb,pc", NE
        ; read second part
        MOV     a1, #DS1338_IIC_ADDR
        ADD     a2, v3, #RTCTimeStruct_BCD_DayOfMonth
        MOV     a3, #(DS_RTC_YEAR_REG - DS_RTC_WDAY_REG)
        MOV     a4, #DS_RTC_DAY_REG
        BL      I2CBusRead
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ASSERT  IICStatus_Completed = 0
        STREQB  a1, [v3, #RTCTimeStruct_BCD_Centiseconds] ; No centisecond time
        STREQB  a1, [v3, #RTCTimeStruct_BCD_YearHI] ; Kernel gives year help
        ASSERT  RTCRetCode_OK = 0
        Pull    "v1-v3,sb,pc"

DS_RTCWriteTime
        ; In:
        ; a1 = HALDevice ptr
        ; a2 = RTCTimeStruct ptr
        ; Out:
        ; a1 = return code
        Push    "v1-v3,sb,lr"
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        ; check if we are called with interrupts disabled - do a polling transfer
        ; this can happen during the shutdown sequence
        MRS     v1, CPSR
        TST     v1, #I32_bit
        ADRNEL  v1, IIC_DoOp_Poll
        LDREQ   v1, OSentries+4*OS_IICOpV       ; for I2CBusWrite
        MOV     v2, #DS1338_IIC_BUS             ; specify I2C bus
        MOV     v3, a2
        ; Writing the time starting with DS_RTC_SEC_REG automatically synchronises the write.
        ; There is nothing else to do. But we must cope for differences in the register layout
        ; and the RTCTimeStruct (weekday register in between).
        ; We can write the time directly from the RTCTimeStruct buffer
        ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
        ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
        ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
        ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
        ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
        ADD     a2, v3, #RTCTimeStruct_BCD_Seconds
        ; Sometimes we don't write the time, so skip those bytes if necessary
        LDRB    ip, [a2]
        CMP     ip, #255
        BEQ     %FT10
        MOV     a1, #DS1338_IIC_ADDR
        MOV     a3, #(DS_RTC_WDAY_REG - DS_RTC_SEC_REG)
        MOV     a4, #DS_RTC_SEC_REG
        BL      I2CBusWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        Pull    "v1-v3,sb,pc", NE
10
        ; write second part
        ; Sometimes we don't write the date either
        LDRB    ip, [v3, #RTCTimeStruct_BCD_DayOfMonth]
        CMP     ip, #255
        BEQ     %FT20
        MOV     a1, #DS1338_IIC_ADDR
        ADD     a2, v3, #RTCTimeStruct_BCD_DayOfMonth
        MOV     a3, #(DS_RTC_YEAR_REG - DS_RTC_WDAY_REG)
        MOV     a4, #DS_RTC_DAY_REG
        BL      I2CBusWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        Pull    "v1-v3,sb,pc"
20
        MOV     a1, #RTCRetCode_OK
        Pull    "v1-v3,sb,pc"

        END
@


1.7
log
@Add support for recent U-Boot versions
Detail:
  hdr/PRCM:
  - added further definitions (not listed in older TRMs)
  s/Audio:
  - configure all GPIO pads used by audio system
    (for supporting latest U-Boot 2014-7)
  s/Boot:
  - added overflow check for address range
  s/RAM:
  - added overflow check for address range
  - address comparison with unsigned arithmetic
  s/RTC:
  - added initialisation code and pad configuration for TWL6030 RTC
    (for supporting latest U-Boot 2014-07)
  s/SDIO:
  - added pad configuration for LEDs used by SDIO
    (for supporting latest U-Boot 2014-07)
  s/USB:
  - removed unused code parts
  - use defines for controller types
  s/Video:
  - added pad configuration for DVI framer pin
  - enable DSS power and clock domain and DSS specific clocks
  - activate thermal sensor clock
  - wait for activated module in VideoDevice_Activate
    (for supporting latest U-Boot 2014-07)
Admin:
  Submission from Willi Theiss
  Tested on Panda ES rev B3 (Willi), Panda rev A6 (myself)


Version 0.36. Tagged as 'OMAP4-0_36'
@
text
@a188 23
        ; check TWL6030 RTC state
        LDR     v1, OSentries+4*OS_IICOpV       ; for TPSRead/TPSWrite
        MOV     a1, #TPSRTC_IIC
        MOV     a3, #1
        MOV     a4, #RTC_STATUS_REG
        MOV     a2, sp
        BL      TPSRead
        CMP     a1, #IICStatus_Completed
        BNE     %FT50
        MOV     a1, #TPSRTC_IIC
        BL      TPSWrite
        ; check for running clock and start it (if not running)
        MOV     a4, #RTC_CTRL_REG
        MOV     a1, #TPSRTC_IIC
        BL      TPSRead
        LDRB    a1, [a2]
        TST     a1, #RTC_CTRL_STOP_RTC_M
        BNE     %FT50
        ORR     a1, a1, #RTC_CTRL_STOP_RTC_M
        STRB    a1, [a2]
        MOV     a1, #TPSRTC_IIC
        BL      TPSWrite

d261 2
@


1.6
log
@Add support for IIC attached power control and real time clock addons
Boot.s: reorder the SmartReflex turn off to allow for power control module
PowerCtrl.s: new
RTC: scan for a DS1338 real time clock too (and prefer that if found)
Built, but not tested here.

Version 0.25. Tagged as 'OMAP4-0_25'
@
text
@d44 1
a44 1
TPSRTC_IIC              *       &48
d147 1
a151 1
        SUB     sp, sp, #4      ; temp small buffer on stack
d178 2
d181 32
d279 1
a279 1
        MOV     a1, #TPSRTC_IIC*2
d295 1
a295 1
        MOV     a1, #TPSRTC_IIC*2
d302 1
a302 1
        MOV     a1, #TPSRTC_IIC*2
d341 1
a341 1
        MOV     a1, #TPSRTC_IIC*2
d352 1
a352 1
        MOV     a1, #TPSRTC_IIC*2
d383 1
a383 1
        MOV     a1, #TPSRTC_IIC*2
@


1.5
log
@Pass the right address to register the RTC
Mirrors change in OMAP3-0_91.

Version 0.24. Tagged as 'OMAP4-0_24'
@
text
@d35 2
d40 1
d69 71
d141 1
a141 1
        ; Just register our HAL Device with the OS
a144 1
        Push    "lr"
a145 1
        Pull    "lr"
d147 35
a181 2
        
        MOV     a2, a1
d183 1
d212 2
a213 1

d295 6
a300 1
        LDR     v1, OSentries+4*OS_IICOpV ; for TPSRead/TPSWrite
d357 100
@


1.4
log
@Refactor IIC calls to use RISCOS_IICOpV
Copy changes from OMAP3-0_90 to OMAP4.
Built, but not tested.

Version 0.23. Tagged as 'OMAP4-0_23'
@
text
@d76 1
a77 1
        ADR     a2, RTCDevice
@


1.3
log
@Refactor HAL_VideoIICOp to be ATPCS
No longer specified to return _kernel_oserror * implements GraphicsV 14.
Make use of IICStatus defines instead of local copies.
Rename HAL_Video_ to HAL_Video.
Compiles, but not tested.


Version 0.11. Tagged as 'OMAP4-0_11'
@
text
@d38 1
a38 6

;       Note - debug stuff won't work since we don't get passed a HAL workspace pointer!
;       IMPORT  DebugHALPrint
;       IMPORT  DebugHALPrintReg
;       IMPORT  DebugMemDump
;       IMPORT  DebugHALPrintByte
a65 14

        MACRO
        CallOS  $entry, $tailcall
        ASSERT  $entry <= HighestOSEntry
 [ "$tailcall"=""
        MOV     lr, pc
 |
   [ "$tailcall"<>"tailcall"
        ! 0, "Unrecognised parameter to CallOS"
   ]
 ]
        LDR     pc, OSentries + 4*$entry
        MEND

d68 8
d80 1
a80 1
RTCDevice
d96 4
a99 1
        DCB     RTCFormatFlags_BCD_1BasedDay+RTCFormatFlags_BCD_1BasedMonth+RTCFormatFlags_BCD_YearLOIsGood ; todo - add RTCFormatFlags_BCD_NeedsYearHelp once NVRAM is implemented
d105 1
a105 1
        DCB "TWL6030-compatible real-time clock",0
a122 2
        ; a3 = IICOp func ptr
        ; a4 = kernel workspace ptr
d126 3
a128 3
        Push    "v1-v3,lr"
        MOV     v1, a3
        MOV     v2, a4
d151 1
a151 1
        Pull    "v1-v3,pc", NE
d160 1
a160 1
        Pull    "v1-v3,pc", NE
a173 1
        Pull    "v1-v3,pc", NE
d175 2
a176 10
        STRB    a1, [v3, #RTCTimeStruct_BCD_Centiseconds] ; No centisecond time
        ; Construct a fakey YearHI by looking at YearLO
        ; Anything 70 or above is considered 1970+, else 2000+
        ; This should work OK, since RISC OS clamps the time to 1970 for unix compatability
        ; (or it does on boot, at least)
        LDRB    a2, [v3, #RTCTimeStruct_BCD_YearLO]
        CMP     a2, #&70
        MOVGE   a3, #&19
        MOVLT   a3, #&20
        STRB    a3, [v3, #RTCTimeStruct_BCD_YearHI]
d178 1
a178 1
        Pull    "v1-v3,pc"
a183 2
        ; a3 = IICOp func ptr
        ; a4 = kernel workspace ptr
d186 3
a188 3
        Push    "v1-v3,lr"
        MOV     v1, a3
        MOV     v2, a4
d205 1
a205 1
        Pull    "v1-v3,pc", NE
d231 1
a231 1
        Pull    "v1-v3,pc", NE
d243 1
a243 2
        Pull    "v1-v3,pc"

@


1.2
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d154 1
a154 1
        CMP     a1, #ECOMPLETED
d167 1
a167 1
        CMP     a1, #ECOMPLETED
d182 1
a182 1
        CMP     a1, #ECOMPLETED
d185 1
a185 1
        ASSERT  ECOMPLETED = 0
d223 1
a223 1
        CMP     a1, #ECOMPLETED
d249 1
a249 1
        CMP     a1, #ECOMPLETED
d260 2
a261 2
        CMP     a1, #ECOMPLETED
        ASSERT  RTCRetCode_OK = ECOMPLETED
@


1.1
log
@Initial revision
@
text
@d15 29
a43 28
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Machine.<Machine>
	GET	Hdr:ImageSize.<ImageSize>
	$GetIO

	GET	Hdr:OSEntries
	GET	Hdr:HALEntries
	GET	Hdr:HALDevice
	GET	Hdr:RTCDevice

	GET	hdr.omap4430
	GET	hdr.StaticWS
	GET	hdr.Timers
	GET	hdr.PRCM

	AREA	|Asm$$Code|, CODE, READONLY, PIC

	EXPORT	RTC_Init
	IMPORT	TPSRead
	IMPORT	TPSWrite

;	Note - debug stuff won't work since we don't get passed a HAL workspace pointer!
;	IMPORT	DebugHALPrint
;	IMPORT	DebugHALPrintReg
;	IMPORT	DebugMemDump
;	IMPORT	DebugHALPrintByte
d46 1
a46 1
TPSRTC_IIC		*	&48
d49 3
a51 3
SECONDS_REG		*	&00
RTC_CTRL_REG		*	&10
RTC_STATUS_REG		*	&11
d54 7
a60 7
RTC_CTRL_STOP_RTC_M		*	(1 << 0)
RTC_CTRL_ROUND_30S_M		*	(1 << 1)
RTC_CTRL_AUTO_COMP_M		*	(1 << 2)
RTC_CTRL_MODE_12_24_M		*	(1 << 3)
RTC_CTRL_TEST_MODE_M		*	(1 << 4)
RTC_CTRL_SET_32_COUNTER_M	*	(1 << 5)
RTC_CTRL_GET_TIME_M		*	(1 << 6)
d63 7
a69 7
RTC_STATUS_RUN_M		*	(1 << 1)
RTC_STATUS_1S_EVENT_M		*	(1 << 2)
RTC_STATUS_1M_EVENT_M		*	(1 << 3)
RTC_STATUS_1H_EVENT_M		*	(1 << 4)
RTC_STATUS_1D_EVENT_M		*	(1 << 5)
RTC_STATUS_ALARM_M		*	(1 << 6)
RTC_STATUS_POWER_UP_M		*	(1 << 7)
d72 3
a74 3
	MACRO
	CallOS	$entry, $tailcall
	ASSERT	$entry <= HighestOSEntry
d76 1
a76 1
	MOV	lr, pc
d79 1
a79 1
	! 0, "Unrecognised parameter to CallOS"
d82 2
a83 2
	LDR	pc, OSentries + 4*$entry
	MEND
d86 4
a89 4
	; Just register our HAL Device with the OS
	MOV	a1, #0
	ADR	a2, RTCDevice
	CallOS	OS_AddDevice, tailcall
d92 19
a110 19
	DCW	HALDeviceType_SysPeri + HALDeviceSysPeri_RTC
	DCW	HALDeviceID_RTC_TWL6030
	DCD	HALDeviceBus_Ser + HALDeviceSerBus_IIC
	DCD	0		; API version
	DCD	RTCDesc
	DCD	0		; Address - N/A
	%	12		; Reserved
	DCD	RTCActivate
	DCD	RTCDeactivate
	DCD	RTCReset
	DCD	RTCSleep
	DCD	-1		; Interrupt N/A
	DCD	0
	%	8
	DCB	RTCTimeFormat_BCD
	DCB	RTCFormatFlags_BCD_1BasedDay+RTCFormatFlags_BCD_1BasedMonth+RTCFormatFlags_BCD_YearLOIsGood ; todo - add RTCFormatFlags_BCD_NeedsYearHelp once NVRAM is implemented
	%	2
	DCD	RTCReadTime
	DCD	RTCWriteTime
d113 1
a113 1
	DCB "TWL6030-compatible real-time clock",0
d115 1
a115 1
	ALIGN
d118 1
a118 1
	MOV	a1, #1
d121 1
a121 1
	MOV	pc, lr
d124 2
a125 2
	MOV	a1, #0 ; Previously at full power
	MOV	pc, lr
d128 70
a197 70
	; In:
	; a1 = HALDevice ptr
	; a2 = RTCTimeStruct ptr
	; a3 = IICOp func ptr
	; a4 = kernel workspace ptr
	; Out:
	; a1 = return code
	; RTCTimeStruct updated
	Push	"v1-v3,lr"
	MOV	v1, a3
	MOV	v2, a4
	MOV	v3, a2
	; Reading the time safely involves several transfers:
	; 1. Read RTC_STATUS_REG. If bit 1 is clear, the RTC is stopped and we can just
	;    assume its contents are invalid.
	; 2. Set RTC_CTRL_REG=&41 (RTC running, GET_TIME set, 24hr mode). GET_TIME will read
	;    the time from the RTC circuitry and latch it into the time registers (the regular
	;    time registers, NOT the alarm ones as stated by the manual!)
	; 3. Read the time regs to read latched time.
	; There's no need to clear GET_TIME either, as it is cleared automatically by the HW.
	MOV	a1, #TPSRTC_IIC*2
	SUB	sp, sp, #4 ; temp small buffer on stack
	MOV	a3, #1
	MOV	a4, #RTC_STATUS_REG
	MOV	a2, sp
	BL	TPSRead
	CMP	a1, #ECOMPLETED
	LDRB	ip, [a2]
	MOV	a1, #RTCRetCode_InvalidTime
	MOVNE	a1, #RTCRetCode_Error
	EOR	ip, ip, #RTC_STATUS_RUN_M
	TSTEQ	ip, #RTC_STATUS_RUN_M
	ADDNE	sp, sp, #4
	Pull	"v1-v3,pc", NE
	MOV	ip, #(RTC_CTRL_GET_TIME_M + RTC_CTRL_STOP_RTC_M)
	STR	ip, [a2]
	MOV	a1, #TPSRTC_IIC*2
	MOV	a4, #RTC_CTRL_REG
	BL	TPSWrite
	CMP	a1, #ECOMPLETED
	MOVNE	a1, #RTCRetCode_Error
	ADD	sp, sp, #4
	Pull	"v1-v3,pc", NE
	MOV	a1, #TPSRTC_IIC*2
	; We can read the time directly into the RTCTimeStruct buffer
	ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
	ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
	ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
	ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
	ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
	ADD	a2, v3, #RTCTimeStruct_BCD_Seconds
	MOV	a3, #6
	MOV	a4, #SECONDS_REG
	BL	TPSRead
	CMP	a1, #ECOMPLETED
	MOVNE	a1, #RTCRetCode_Error
	Pull	"v1-v3,pc", NE
	ASSERT	ECOMPLETED = 0
	STRB	a1, [v3, #RTCTimeStruct_BCD_Centiseconds] ; No centisecond time
	; Construct a fakey YearHI by looking at YearLO
	; Anything 70 or above is considered 1970+, else 2000+
	; This should work OK, since RISC OS clamps the time to 1970 for unix compatability
	; (or it does on boot, at least)
	LDRB	a2, [v3, #RTCTimeStruct_BCD_YearLO]
	CMP	a2, #&70
	MOVGE	a3, #&19
	MOVLT	a3, #&20
	STRB	a3, [v3, #RTCTimeStruct_BCD_YearHI]
	ASSERT	RTCRetCode_OK = 0
	Pull	"v1-v3,pc"
d200 53
a252 53
	; In:
	; a1 = HALDevice ptr
	; a2 = RTCTimeStruct ptr
	; a3 = IICOp func ptr
	; a4 = kernel workspace ptr
	; Out:
	; a1 = return code
	Push	"v1-v3,lr"
	MOV	v1, a3
	MOV	v2, a4
	MOV	v3, a2
	; Writing the time safely involves several transfers:
	; 1. Write 0 to RTC_CTRL_REG to stop the clock (just in case there are any issues with
	;    the clock updating while it's being written to)
	; 2. Write the new time values
	; 3. Write 1 to RTC_CTRL_REG to start the clock
	MOV	a1, #TPSRTC_IIC*2
	MOV	ip, #0
	STR	ip, [sp,#-4]! ; temp small buffer on stack
	MOV	a3, #1
	MOV	a4, #RTC_CTRL_REG
	MOV	a2, sp
	BL	TPSWrite
	CMP	a1, #ECOMPLETED
	MOVNE	a1, #RTCRetCode_Error
	ADDNE	sp, sp, #4
	Pull	"v1-v3,pc", NE
	MOV	a1, #TPSRTC_IIC*2
	; We can write the time directly from the RTCTimeStruct buffer
	ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
	ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
	ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
	ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
	ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
	ADD	a2, v3, #RTCTimeStruct_BCD_Seconds
	MOV	a3, #6
	MOV	a4, #SECONDS_REG
	; Sometimes we don't write the time, so skip those bytes if necessary
	LDRB	ip, [a2]
	CMP	ip, #255
	ADDEQ	a2, a2, #3
	SUBEQ	a3, a3, #3
	ADDEQ	a4, a4, #3
	; Sometimes we don't write the date either
	LDRB	ip, [v3, #RTCTimeStruct_BCD_DayOfMonth]
	CMP	ip, #255
	SUBEQS	a3, a3, #3
	BEQ	%FT01 ; Nothing left to write!
	BL	TPSWrite
	CMP	a1, #ECOMPLETED
	MOVNE	a1, #RTCRetCode_Error
	ADDNE	sp, sp, #4
	Pull	"v1-v3,pc", NE
d254 11
a264 11
	MOV	a3, #RTC_CTRL_STOP_RTC_M
	STR	a3, [sp]
	MOV	a2, sp
	MOV	a4, #RTC_CTRL_REG
	MOV	a1, #TPSRTC_IIC*2
	BL	TPSWrite
	CMP	a1, #ECOMPLETED
	ASSERT	RTCRetCode_OK = ECOMPLETED
	MOVNE	a1, #RTCRetCode_Error
	ADD	sp, sp, #4
	Pull	"v1-v3,pc"
d267 1
a267 1
	END
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
