head	1.7;
access;
symbols
	OMAP4-0_60:1.7
	OMAP4-0_59-1_52_2_3:1.7
	OMAP4-0_59:1.7
	OMAP4-0_58:1.7
	OMAP4-0_57:1.7
	OMAP4-0_56:1.7
	OMAP4-0_55:1.7
	OMAP4-0_54-1_52_2_2:1.7
	OMAP4-0_54:1.7
	OMAP4-0_53:1.7
	OMAP4-0_52-1_52_2_1:1.7
	SMP:1.7.0.2
	SMP_bp:1.7
	OMAP4-0_52:1.7
	OMAP4-0_51:1.7
	OMAP4-0_50:1.7
	OMAP4-0_49:1.7
	OMAP4-0_48:1.7
	OMAP4-0_47:1.7
	OMAP4-0_46:1.7
	OMAP4-0_45:1.7
	OMAP4-0_44:1.7
	OMAP4-0_43:1.7
	OMAP4-0_42:1.7
	OMAP4-0_41:1.7
	OMAP4-0_40:1.7
	OMAP4-0_39:1.7
	OMAP4-0_38:1.7
	OMAP4-0_37:1.7
	OMAP4-0_36:1.7
	OMAP4-0_35:1.6
	OMAP4-0_34:1.6
	OMAP4-0_33:1.6
	OMAP4-0_32:1.6
	OMAP4-0_31:1.6
	OMAP4-0_30:1.6
	OMAP4-0_29:1.6
	OMAP4-0_28:1.5
	OMAP4-0_27:1.4
	OMAP4-0_26:1.4
	OMAP4-0_25:1.4
	OMAP4-0_24:1.4
	OMAP4-0_23:1.4
	OMAP4-0_22:1.4
	OMAP4-0_21:1.4
	OMAP4-0_20:1.4
	OMAP4-0_19:1.4
	OMAP4-0_18:1.4
	OMAP4-0_17:1.4
	OMAP4-0_16:1.4
	OMAP4-0_15:1.4
	OMAP4-0_14:1.4
	OMAP4-0_13:1.4
	OMAP4-0_12:1.4
	OMAP4-0_11:1.4
	OMAP4-0_10:1.4
	OMAP4-0_09:1.4
	OMAP4-0_08:1.4
	OMAP4-0_07:1.4
	OMAP4-0_06:1.3
	OMAP4-0_05:1.2
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.09.04.21.41.12;	author jlee;	state Exp;
branches;
next	1.6;
commitid	AjMWLbVyJ9pcI4Px;

1.6
date	2014.03.09.09.44.55;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	sHn8PVob0xicv0sx;

1.5
date	2014.03.08.16.55.57;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	tpkfnWqSEp73VUrx;

1.4
date	2012.03.25.11.42.58;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	4FjnaYBzkPTA6gYv;

1.3
date	2012.03.25.10.28.47;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	wcxutstPODhaHfYv;

1.2
date	2012.02.11.17.48.09;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	W3PfhFs2h9uBvLSv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.7
log
@Add support for recent U-Boot versions
Detail:
  hdr/PRCM:
  - added further definitions (not listed in older TRMs)
  s/Audio:
  - configure all GPIO pads used by audio system
    (for supporting latest U-Boot 2014-7)
  s/Boot:
  - added overflow check for address range
  s/RAM:
  - added overflow check for address range
  - address comparison with unsigned arithmetic
  s/RTC:
  - added initialisation code and pad configuration for TWL6030 RTC
    (for supporting latest U-Boot 2014-07)
  s/SDIO:
  - added pad configuration for LEDs used by SDIO
    (for supporting latest U-Boot 2014-07)
  s/USB:
  - removed unused code parts
  - use defines for controller types
  s/Video:
  - added pad configuration for DVI framer pin
  - enable DSS power and clock domain and DSS specific clocks
  - activate thermal sensor clock
  - wait for activated module in VideoDevice_Activate
    (for supporting latest U-Boot 2014-07)
Admin:
  Submission from Willi Theiss
  Tested on Panda ES rev B3 (Willi), Panda rev A6 (myself)


Version 0.36. Tagged as 'OMAP4-0_36'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Using the DMA controller to clear RAM is much faster than doing it with the CPU
; (with the cache/write buffer off, at least)

                GBLL    Use_DMA_Clear
Use_DMA_Clear   SETL    {TRUE}

init_ram
        ; nothing to do here: MLO (x-loader) has already done it

        ; Done!
        MOV     pc, lr



; a1 <= Highest physical address in RAM +1
get_end_of_ram
        LDR     v1, =DMM_Base
        ; check all DMM_LISA_MAP_i registers (starting with highest priority)
        LDR     a1, =DMM_LISA_MAP_3
        LDR     a4, =DMM_LISA_MAP_i_SDRC_ADDRSPC
05
        LDR     a2, =DMM_LISA_MAP_i_SDRC_MAP
        LDR     a3, [v1, a1]
        ANDS    a2, a3, a2      ; MAP_x used ?
        BEQ     %FT10
        AND     a2, a3, a4      ; check ADDRSPC
        CMP     a2, #DMM_LISA_MAP_i_SDRC_ADDRSPC_SDRAM
        BEQ     %FT15
10
        ; next DMM_LISA_MAP_x
        CMP     a1, #DMM_LISA_MAP_0
        SUBHI   a1, a1, #4
        BHI     %BT05

        ; this should not happen: no RAM found
12
        B       %BT12

15
        ; check DMM_LISA_MAP_x
        LDR     a2, =DMM_LISA_MAP_i_SYS_SIZE
        AND     a2, a3, a2
        MOV     a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
        LDR     a4, =(16 * 1024 * 1024) ; 16 MiB smallest size
        MOV     a4, a4, LSL a2          ; final size
        AND     a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
        ; check for overflow of address range
        ADDS    a1, a4, a2
        LDRCS   a1, =((4096 - 16) << 20)        ; round down to next 16 MiB boundary
        MOV     pc, lr


clear_ram
        ; Clear everything up to a1
        ; Can clobber all regs except v8 & sb
        ; If DMA clear is disabled, the clear areas must be multiples of 128 bytes in length.
        ; Else they must be multiples of 4 bytes.
 [ Use_DMA_Clear
        ; Reset the DMA controller
        LDR     v5, =L4_sDMA
   [ :LNOT: Use_DMA_Copy ; Already done if using DMA copy
;       MOV     v1, #2          ; this bit is reserved on OMAP4430 (!?)
;       STR     v1, [v5, #DMA4_OCP_SYSCONFIG]
5
        LDR     v1, [v5, #DMA4_SYSSTATUS]
        TST     v1, #DMA4_SYSSTATUS_RESETDONE
        BEQ     %BT5
        ; Set a sensible FIFO budget (as per SDMACReset)
        LDR     a2, =((1 << DMA4_GCR_ARBITRAION_RATE_SHIFT) + 128)
        STR     a2, [v5, #DMA4_GCR]
        ; Configure channel 0 for the right settings
        ADD     v5, v5, #DMA4_i
        MOV     v1, #0          ; Disable channel linking
        STR     v1, [v5, #DMA4_CLNK_CTRLi]
        MOV     v1, #DMA4_CICR_LAST_IE
        STR     v1, [v5, #DMA4_CICRi] ; frame end interrupt enabled
        MOV     v1, #1
        STR     v1, [v5, #DMA4_CFNi] ; 1 frame
   |
        ADD     v5, v5, #DMA4_i
   ] ; :LNOT: Use_DMA_Copy
        LDR     v1, =(DMA4_CSDP_DATA_TYPE_32BIT + DMA4_CSDP_DST_BURST_EN_64B + DMA4_CSDP_WRITE_MODE_LAST_WRNP) ; 32bit elements, 64 byte bursts, last write non-posted
        STR     v1, [v5, #DMA4_CSDPi]
        ; Clear colour of 0. Although the clear colour register only holds a 24 bit value,
        ; the MSB (for 4-byte DMA) is always written as 0.
        MOV     v1, #0
        STR     v1, [v5, #DMA4_COLORi]
 ]
        MOV     v2, a1
        LDR     v1, =DMM_Base

        ; check all DMM_LISA_MAP_i registers (starting with highest priority)
        LDR     a1, =DMM_LISA_MAP_3
        LDR     a4, =DMM_LISA_MAP_i_SDRC_ADDRSPC
05
        LDR     a2, =DMM_LISA_MAP_i_SDRC_MAP
        LDR     a3, [v1, a1]
        ANDS    a2, a3, a2      ; MAP_x used ?
        BEQ     %FT10
        AND     a2, a3, a4      ; check ADDRSPC
        CMP     a2, #DMM_LISA_MAP_i_SDRC_ADDRSPC_SDRAM
        BEQ     %FT15
10
        ; next DMM_LISA_MAP_x
        CMP     a1, #DMM_LISA_MAP_0
        SUBHI   a1, a1, #4
        BHI     %BT05

        ; this should not happen: no RAM found
12
        B       %BT12

15
        ; check DMM_LISA_MAP_x
        LDR     a2, =DMM_LISA_MAP_i_SYS_SIZE
        AND     a2, a3, a2
        MOV     a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
        LDR     a4, =(16 * 1024 * 1024) ; 16 MiB smallest size
        MOV     a4, a4, LSL a2          ; final size
        AND     a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
        SUB     a1, v2, a2
        CMP     a1, a4
        MOVHI   a1, a4  ; Work out how much we're meant to be clearing
        CMP     a1, #0
        BEQ     %FT30

 [ Use_DMA_Clear
        ; To keep things simple we split the transfer into chunks small enough to fit inside
        ; one frame (64MB) and wait for each one to complete
        ; This means we don't have to worry about the code breaking if the clear area isn't
        ; MB aligned (or 128 byte aligned, as the original code assumed)
        MOV     a1, a1, LSR #2 ; Number of elements remaining
        MOV     a3, #&1000000 ; Max elements per transfer+1 (not quite 64MB!)
40
        LDR     v1, [v5, #DMA4_CSRi]
        STR     v1, [v5, #DMA4_CSRi] ; Clear status register
        CMP     a1, a3
        MOVLT   v1, a1
        SUBGE   v1, a3, #1
        STR     v1, [v5, #DMA4_CENi]
        SUB     a1, a1, v1
        STR     a2, [v5, #DMA4_CDSAi]
        ADD     a2, a2, v1, LSL #2
        LDR     a4, =(DMA4_CCR_SEL_SRC_DST_SYNC + DMA4_CCR_CONST_FILL_ENABLE + DMA4_CCR_DST_AMODE_POST_INC + DMA4_CCR_ENABLE)
        STR     a4, [v5, #DMA4_CCRi] ; Enable channel
        ; Use the transfer size as a rough timer for how long we should wait before
        ; we start hammering the status register
50
        SUBS    v1, v1, #256
        BGT     %BT50
50
        LDR     v1, [v5, #DMA4_CSRi]
        TST     v1, #DMA4_CSR_LAST
        BEQ     %BT50
        ; Make doubly sure that it's finished by checking WR_ACTIVE/RD_ACTIVE
50
        LDR     v1, [v5, #DMA4_CCRi]
        TST     v1, #(DMA4_CCR_RD_ACTIVE + DMA4_CCR_WR_ACTIVE)
        BNE     %BT50
        CMP     a1, #0
        BNE     %BT40
 |
        MOV     a3, #0
        MOV     a4, #0
        MOV     v1, #0
        MOV     v3, #0
        MOV     v4, #0
        MOV     v5, #0
        MOV     sp, #0
        MOV     ip, #0
20
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 32 bytes
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 64 bytes
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 96 bytes
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 128 bytes
        SUBS    a1, a1, #128
        BGT     %BT20
 ]

30
 [ Use_DMA_Clear
        ; Invalidate the I-cache & BTC, just in case
        ; (D cache & L2 cache should be turned off, so no need to worry about them)
        MOV     a1, #0
        MCR     p15, 0, a1, c7, c5, 0
        MCR     p15, 0, a1, c7, c5, 6
        DSB     SY
        ISB     SY
 ]
        MOV     pc, lr

        END
@


1.6
log
@Rework of SDRAM detection
hdr.SDRC: Extra bit fields added to definitions
s.RAM: scan through all LISA_MAP register
       rework of clear loop (only one instance used)
s.Boot: scan through all LISA_MAP register

This should remove the dependence of the OMAP4 HAL to be run with a specific version of the accompanying loader.
Submission from Willi Theiss. Built, but not tested here,

Version 0.29. Tagged as 'OMAP4-0_29'
@
text
@d61 3
a63 1
        ADD     a1, a4, a2
d137 1
a137 1
        MOVGT   a1, a4  ; Work out how much we're meant to be clearing
@


1.5
log
@Use DSB/ISB directly
Objasm 4 supports ARMv7 opcodes, and this HAL is only every for ARMv7.
Built, but not tested. Submission from Willi Theiss.

Version 0.28. Tagged as 'OMAP4-0_28'
@
text
@d15 5
a19 3
; Using the DMA controller to clear RAM is much faster than doing it with the CPU (with the cache/write buffer off, at least)
                 GBLL Use_DMA_Clear
Use_DMA_Clear    SETL {TRUE}
d32 4
a35 2
        ; Check LISA_MAP_1
        LDR     a3, [v1, #DMM_LISA_MAP_1]
d37 1
d40 3
a42 8
        LDR     a2, =DMM_LISA_MAP_i_SYS_SIZE
        AND     a2, a3, a2
        MOV     a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
        LDR     a4, =(16 * 1024 * 1024) ; 16 MiB smallest size
        MOV     a4, a4, LSL a2          ; final size
        AND     a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
        ADD     a1, a4, a2
        MOV     pc, lr
d44 11
a54 2
        ; No RAM in CS1; therefore must be in CS0
        LDR     a3, [v1, #DMM_LISA_MAP_0]
a64 1

d103 5
a107 1
        LDR     a3, [v1, #DMM_LISA_MAP_0]
d109 1
d112 15
d137 1
a137 1
        BEQ     %FT10
a190 17
10
        LDR     v1, =DMM_Base
        LDR     a3, [v1, #DMM_LISA_MAP_1]
        LDR     a2, =DMM_LISA_MAP_i_SDRC_MAP
        ANDS    a2, a3, a2      ; MAP_x used ?
        BEQ     %FT30
        LDR     a2, =DMM_LISA_MAP_i_SYS_SIZE
        AND     a2, a3, a2
        MOV     a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
        LDR     a4, =(16 * 1024 * 1024) ; 16 MiB smallest size
        MOV     a4, a4, LSL a2          ; final size
        AND     a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
        SUB     a1, v2, a2
        CMP     a1, a4
        MOVGT   a1, a4 ; Work out how much we're meant to be clearing
        CMP     a1, #0
        BEQ     %FT30
a191 53
 [ Use_DMA_Clear
        ; To keep things simple we split the transfer into chunks small enough to fit inside
        ; one frame (64MB) and wait for each one to complete
        ; This means we don't have to worry about the code breaking if the clear area isn't
        ; MB aligned (or 128 byte aligned, as the original code assumed)
        MOV     a1, a1, LSR #2 ; Number of elements remaining
        MOV     a3, #&1000000 ; Max elements per transfer+1 (not quite 64MB!)
40
        LDR     v1, [v5, #DMA4_CSRi]
        STR     v1, [v5, #DMA4_CSRi] ; Clear status register
        CMP     a1, a3
        MOVLT   v1, a1
        SUBGE   v1, a3, #1
        STR     v1, [v5, #DMA4_CENi]
        SUB     a1, a1, v1
        STR     a2, [v5, #DMA4_CDSAi]
        ADD     a2, a2, v1, LSL #2
        LDR     a4, =(DMA4_CCR_SEL_SRC_DST_SYNC + DMA4_CCR_CONST_FILL_ENABLE + DMA4_CCR_DST_AMODE_POST_INC + DMA4_CCR_ENABLE)
        STR     a4, [v5, #DMA4_CCRi] ; Enable channel
        ; Use the transfer size as a rough timer for how long we should wait
        ; before we start hammering the status register
50
        SUBS    v1, v1, #256
        BGT     %BT50
50
        LDR     v1, [v5, #DMA4_CSRi]
        TST     v1, #DMA4_CSR_LAST
        BEQ     %BT50
        ; Make doubly sure that it's finished by checking WR_ACTIVE/RD_ACTIVE
50
        LDR     v1, [v5, #DMA4_CCRi]
        TST     v1, #(DMA4_CCR_RD_ACTIVE + DMA4_CCR_WR_ACTIVE)
        BNE     %BT50
        CMP     a1, #0
        BNE     %BT40
 |

        MOV     a3, #0
        MOV     a4, #0
        MOV     v1, #0
        MOV     v3, #0
        MOV     v4, #0
        MOV     v5, #0
        MOV     sp, #0
        MOV     ip, #0
40
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 32 bytes
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 64 bytes
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 96 bytes
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 128 bytes
        SUBS    a1, a1, #128
        BGT     %BT40
 ]
@


1.4
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d241 2
a242 2
        myDSB
        myISB
@


1.3
log
@Updates to OMAP4 port.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added DebugTiming macros
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.StaticWS
    added variable NVMemoryFound
    removed variables for NVRAM over SD card support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.KdbScan
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.NVMemory
    EEPROM support over JTAG port (EMU0/EMU1)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    use DMA for copying ROM at top of RAM
    added debug timing
    support for compressed images (as in OMAP3)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added debug timing OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.c.CLib
    reverted to version without SD card NVRAM support

Changes from Willi Theiss.
Assembles without errors, but not tested here.

Version 0.06. Tagged as 'OMAP4-0_06'
@
text
@d15 3
a17 5
; Using the DMA controller to clear RAM is much faster than doing it with the CPU
; (with the cache/write buffer off, at least)

		GBLL	Use_DMA_Clear
Use_DMA_Clear	SETL	{TRUE}
d20 1
a20 1
	; nothing to do here: MLO (x-loader) has already done it
d22 2
a23 2
	; Done!
	MOV	pc, lr
d29 14
a42 14
	LDR	v1, =DMM_Base
	; Check LISA_MAP_1
	LDR	a3, [v1, #DMM_LISA_MAP_1]
	LDR	a2, =DMM_LISA_MAP_i_SDRC_MAP
	ANDS	a2, a3, a2	; MAP_x used ?
	BEQ	%FT10
	LDR	a2, =DMM_LISA_MAP_i_SYS_SIZE
	AND	a2, a3, a2
	MOV	a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
	LDR	a4, =(16 * 1024 * 1024)	; 16 MiB smallest size
	MOV	a4, a4, LSL a2		; final size
	AND	a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
	ADD	a1, a4, a2
	MOV	pc, lr
d44 10
a53 10
	; No RAM in CS1; therefore must be in CS0
	LDR	a3, [v1, #DMM_LISA_MAP_0]
	LDR	a2, =DMM_LISA_MAP_i_SYS_SIZE
	AND	a2, a3, a2
	MOV	a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
	LDR	a4, =(16 * 1024 * 1024)	; 16 MiB smallest size
	MOV	a4, a4, LSL a2		; final size
	AND	a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
	ADD	a1, a4, a2
	MOV	pc, lr
d58 4
a61 4
	; Clear everything up to a1
	; Can clobber all regs except v8 & sb
	; If DMA clear is disabled, the clear areas must be multiples of 128 bytes in length.
	; Else they must be multiples of 4 bytes.
d63 2
a64 2
	; Reset the DMA controller
	LDR	v5, =L4_sDMA
d66 2
a67 2
;	MOV	v1, #2		; this bit is reserved on OMAP4430 (!?)
;	STR	v1, [v5, #DMA4_OCP_SYSCONFIG]
d69 14
a82 14
	LDR	v1, [v5, #DMA4_SYSSTATUS]
	TST	v1, #DMA4_SYSSTATUS_RESETDONE
	BEQ	%BT5
	; Set a sensible FIFO budget (as per SDMACReset)
	LDR	a2, =((1 << DMA4_GCR_ARBITRAION_RATE_SHIFT) + 128)
	STR	a2, [v5, #DMA4_GCR]
	; Configure channel 0 for the right settings
	ADD	v5, v5, #DMA4_i
	MOV	v1, #0		; Disable channel linking
	STR	v1, [v5, #DMA4_CLNK_CTRLi]
	MOV	v1, #DMA4_CICR_LAST_IE
	STR	v1, [v5, #DMA4_CICRi] ; frame end interrupt enabled
	MOV	v1, #1
	STR	v1, [v5, #DMA4_CFNi] ; 1 frame
d84 1
a84 1
	ADD	v5, v5, #DMA4_i
d86 6
a91 6
	LDR	v1, =(DMA4_CSDP_DATA_TYPE_32BIT + DMA4_CSDP_DST_BURST_EN_64B + DMA4_CSDP_WRITE_MODE_LAST_WRNP) ; 32bit elements, 64 byte bursts, last write non-posted
	STR	v1, [v5, #DMA4_CSDPi]
	; Clear colour of 0. Although the clear colour register only holds a 24 bit value,
	; the MSB (for 4-byte DMA) is always written as 0.
	MOV	v1, #0
	STR	v1, [v5, #DMA4_COLORi]
d93 17
a109 17
	MOV	v2, a1
	LDR	v1, =DMM_Base
	LDR	a3, [v1, #DMM_LISA_MAP_0]
	LDR	a2, =DMM_LISA_MAP_i_SDRC_MAP
	ANDS	a2, a3, a2	; MAP_x used ?
	BEQ	%FT10
	LDR	a2, =DMM_LISA_MAP_i_SYS_SIZE
	AND	a2, a3, a2
	MOV	a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
	LDR	a4, =(16 * 1024 * 1024)	; 16 MiB smallest size
	MOV	a4, a4, LSL a2		; final size
	AND	a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
	SUB	a1, v2, a2
	CMP	a1, a4
	MOVGT	a1, a4	; Work out how much we're meant to be clearing
	CMP	a1, #0
	BEQ	%FT10
d112 6
a117 6
	; To keep things simple we split the transfer into chunks small enough to fit inside
	; one frame (64MB) and wait for each one to complete
	; This means we don't have to worry about the code breaking if the clear area isn't
	; MB aligned (or 128 byte aligned, as the original code assumed)
	MOV	a1, a1, LSR #2 ; Number of elements remaining
	MOV	a3, #&1000000 ; Max elements per transfer+1 (not quite 64MB!)
d119 27
a145 27
	LDR	v1, [v5, #DMA4_CSRi]
	STR	v1, [v5, #DMA4_CSRi] ; Clear status register
	CMP	a1, a3
	MOVLT	v1, a1
	SUBGE	v1, a3, #1
	STR	v1, [v5, #DMA4_CENi]
	SUB	a1, a1, v1
	STR	a2, [v5, #DMA4_CDSAi]
	ADD	a2, a2, v1, LSL #2
	LDR	a4, =(DMA4_CCR_SEL_SRC_DST_SYNC + DMA4_CCR_CONST_FILL_ENABLE + DMA4_CCR_DST_AMODE_POST_INC + DMA4_CCR_ENABLE)
	STR	a4, [v5, #DMA4_CCRi] ; Enable channel
	; Use the transfer size as a rough timer for how long we should wait before
	; we start hammering the status register
50
	SUBS	v1, v1, #256
	BGT	%BT50
50
	LDR	v1, [v5, #DMA4_CSRi]
	TST	v1, #DMA4_CSR_LAST
	BEQ	%BT50
	; Make doubly sure that it's finished by checking WR_ACTIVE/RD_ACTIVE
50
	LDR	v1, [v5, #DMA4_CCRi]
	TST	v1, #(DMA4_CCR_RD_ACTIVE + DMA4_CCR_WR_ACTIVE)
	BNE	%BT50
	CMP	a1, #0
	BNE	%BT40
d147 8
a154 8
	MOV	a3, #0
	MOV	a4, #0
	MOV	v1, #0
	MOV	v3, #0
	MOV	v4, #0
	MOV	v5, #0
	MOV	sp, #0
	MOV	ip, #0
d156 6
a161 6
	STMIA	a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 32 bytes
	STMIA	a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 64 bytes
	STMIA	a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 96 bytes
	STMIA	a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 128 bytes
	SUBS	a1, a1, #128
	BGT	%BT20
d164 16
a179 16
	LDR	v1, =DMM_Base
	LDR	a3, [v1, #DMM_LISA_MAP_1]
	LDR	a2, =DMM_LISA_MAP_i_SDRC_MAP
	ANDS	a2, a3, a2	; MAP_x used ?
	BEQ	%FT30
	LDR	a2, =DMM_LISA_MAP_i_SYS_SIZE
	AND	a2, a3, a2
	MOV	a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
	LDR	a4, =(16 * 1024 * 1024)	; 16 MiB smallest size
	MOV	a4, a4, LSL a2		; final size
	AND	a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
	SUB	a1, v2, a2
	CMP	a1, a4
	MOVGT	a1, a4 ; Work out how much we're meant to be clearing
	CMP	a1, #0
	BEQ	%FT30
d182 6
a187 6
	; To keep things simple we split the transfer into chunks small enough to fit inside
	; one frame (64MB) and wait for each one to complete
	; This means we don't have to worry about the code breaking if the clear area isn't
	; MB aligned (or 128 byte aligned, as the original code assumed)
	MOV	a1, a1, LSR #2 ; Number of elements remaining
	MOV	a3, #&1000000 ; Max elements per transfer+1 (not quite 64MB!)
d189 27
a215 27
	LDR	v1, [v5, #DMA4_CSRi]
	STR	v1, [v5, #DMA4_CSRi] ; Clear status register
	CMP	a1, a3
	MOVLT	v1, a1
	SUBGE	v1, a3, #1
	STR	v1, [v5, #DMA4_CENi]
	SUB	a1, a1, v1
	STR	a2, [v5, #DMA4_CDSAi]
	ADD	a2, a2, v1, LSL #2
	LDR	a4, =(DMA4_CCR_SEL_SRC_DST_SYNC + DMA4_CCR_CONST_FILL_ENABLE + DMA4_CCR_DST_AMODE_POST_INC + DMA4_CCR_ENABLE)
	STR	a4, [v5, #DMA4_CCRi] ; Enable channel
	; Use the transfer size as a rough timer for how long we should wait
	; before we start hammering the status register
50
	SUBS	v1, v1, #256
	BGT	%BT50
50
	LDR	v1, [v5, #DMA4_CSRi]
	TST	v1, #DMA4_CSR_LAST
	BEQ	%BT50
	; Make doubly sure that it's finished by checking WR_ACTIVE/RD_ACTIVE
50
	LDR	v1, [v5, #DMA4_CCRi]
	TST	v1, #(DMA4_CCR_RD_ACTIVE + DMA4_CCR_WR_ACTIVE)
	BNE	%BT50
	CMP	a1, #0
	BNE	%BT40
d218 8
a225 8
	MOV	a3, #0
	MOV	a4, #0
	MOV	v1, #0
	MOV	v3, #0
	MOV	v4, #0
	MOV	v5, #0
	MOV	sp, #0
	MOV	ip, #0
d227 6
a232 6
	STMIA	a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 32 bytes
	STMIA	a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 64 bytes
	STMIA	a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 96 bytes
	STMIA	a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 128 bytes
	SUBS	a1, a1, #128
	BGT	%BT40
d236 7
a242 7
	; Invalidate the I-cache & BTC, just in case
	; (D cache & L2 cache should be turned off, so no need to worry about them)
	MOV	a1, #0
	MCR	p15, 0, a1, c7, c5, 0
	MCR	p15, 0, a1, c7, c5, 6
	myDSB
	myISB
d244 1
a244 1
	MOV	pc, lr
d246 1
a246 1
	END
@


1.2
log
@Update to OMAP4 HAL.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    added further definitions for TWL6040 audio chip
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
    added further register descriptions according OMAP4 TRM
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.UART
    added further register descriptions according OMAP4 TRM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added definitions for OMAP4460 (Panda ES)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
    order of UART entries changed
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    don't reset debug UART
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    modifications according to OMAP3 version
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.debug
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.UART
    changes according to hdr.UART changes; HAL_UARTModemControl
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
    use definitions from hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    use definitions from hdr.SDMA
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added code to VideoDevice_Activate (enable DSS power)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    changes for working sound support

Submissions from Willi Theiss. Compiles, but not tested here.

Version 0.05. Tagged as 'OMAP4-0_05'
@
text
@d22 1
a22 10
	; There is some setup we want to do here - auto & smart idle modes!
;	LDR	v1, =SDRC_Regs
;	MOV	a1, #1+(2<<3)
;	STR	a1, [v1, #SDRC_SYSCONFIG]
	; With multiple board types supported, it's now much easier just to rely on u-boot
	; to set everything up properly.
	; Make sure all attached RAM is initialised
	; Although x-loader will initialise some RAM for us, it might not necessarily use the
	; best settings, and it might not initialise all the RAM that's available
	; (e.g. CS1 on rev C beagleboard)
d67 1
d79 2
a80 5
	LDR	v1, =(DMA4_CCR_SEL_SRC_DST_SYNC + DMA4_CCR_CONST_FILL_ENABLE + DMA4_CCR_DST_AMODE_POST_INC) ; Constant fill, post-increment destination, source synchronised
	STR	v1, [v5, #DMA4_CCRi]
	MOV	v1, #0
	STR	v1, [v5, #DMA4_CLNK_CTRLi] ; Disable channel linking
	STR	v1, [v5, #DMA4_COLORi] ; Clear colour of 0. Although the clear colour register only holds a 24 bit value, the MSB (for 4-byte DMA) is always written as 0.
d83 5
d90 4
a93 2
	MOV	v1, #1
	STR	v1, [v5, #DMA4_CFNi] ; 1 frame
@


1.1
log
@Initial revision
@
text
@d76 2
a77 2
	MOV	v1, #2
	STR	v1, [v5, #DMA4_OCP_SYSCONFIG]
d80 1
a80 1
	TST	v1, #1
d83 1
a83 1
	LDR	a2, =&100080
d87 1
a87 1
	LDR	v1, =&1014000 ; Constant fill, post-increment destination, source synchronised
d92 1
a92 1
	MOV	v1, #1<<4
d94 1
a94 1
	LDR	v1, =&2C002 ; 32bit elements, 64 byte bursts, last write non-posted
d134 1
a134 1
	LDR	a4, =&1014080
d143 1
a143 1
	TST	v1, #1<<4
d148 1
a148 1
	TST	v1, #&600
d204 1
a204 1
	LDR	a4, =&1014080
d213 1
a213 1
	TST	v1, #1<<4
d218 1
a218 1
	TST	v1, #&600
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
