head	1.4;
access;
symbols
	OMAP4-0_60:1.4
	OMAP4-0_59-1_52_2_3:1.4
	OMAP4-0_59:1.4
	OMAP4-0_58:1.4
	OMAP4-0_57:1.4
	OMAP4-0_56:1.4
	OMAP4-0_55:1.4
	OMAP4-0_54-1_52_2_2:1.4
	OMAP4-0_54:1.4
	OMAP4-0_53:1.4
	OMAP4-0_52-1_52_2_1:1.4
	SMP:1.4.0.2
	SMP_bp:1.4
	OMAP4-0_52:1.4
	OMAP4-0_51:1.4
	OMAP4-0_50:1.4
	OMAP4-0_49:1.4
	OMAP4-0_48:1.4
	OMAP4-0_47:1.4
	OMAP4-0_46:1.3
	OMAP4-0_45:1.3
	OMAP4-0_44:1.3
	OMAP4-0_43:1.3
	OMAP4-0_42:1.3
	OMAP4-0_41:1.3
	OMAP4-0_40:1.3
	OMAP4-0_39:1.3
	OMAP4-0_38:1.3
	OMAP4-0_37:1.3
	OMAP4-0_36:1.3
	OMAP4-0_35:1.3
	OMAP4-0_34:1.3
	OMAP4-0_33:1.3
	OMAP4-0_32:1.3
	OMAP4-0_31:1.3
	OMAP4-0_30:1.3
	OMAP4-0_29:1.3
	OMAP4-0_28:1.3
	OMAP4-0_27:1.3
	OMAP4-0_26:1.3
	OMAP4-0_25:1.3
	OMAP4-0_24:1.3
	OMAP4-0_23:1.3
	OMAP4-0_22:1.3
	OMAP4-0_21:1.3
	OMAP4-0_20:1.3
	OMAP4-0_19:1.3
	OMAP4-0_18:1.3
	OMAP4-0_17:1.3
	OMAP4-0_16:1.3
	OMAP4-0_15:1.3
	OMAP4-0_14:1.3
	OMAP4-0_13:1.3
	OMAP4-0_12:1.3
	OMAP4-0_11:1.3
	OMAP4-0_10:1.3
	OMAP4-0_09:1.3
	OMAP4-0_08:1.3
	OMAP4-0_07:1.3
	OMAP4-0_06:1.2
	OMAP4-0_05:1.2
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.09.01.21.22.45;	author rool;	state Exp;
branches;
next	1.3;
commitid	wG3IDGBgTDRpYAzy;

1.3
date	2012.03.25.11.42.57;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	4FjnaYBzkPTA6gYv;

1.2
date	2012.02.11.17.48.09;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	W3PfhFs2h9uBvLSv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.4
log
@Minor OMAP4 tidying
omap4430.hdr/Debug,s:
  Define a dummy symbol so when debug is enabled there aren't conflicting IMPORT and EXPORTs.
PRCM.s:
  Fill in missing frequency.
Boot.s:
  Update comment to match HAL function names.
NVMemory.s:
  Add offset to account for FATLoadedCMOS not being at offset 0.
Top.s:
  Remove unused Post header. Replace DCI with instruction now objasm supports it.
Submission from Willi Theiss.

Version 0.47. Tagged as 'OMAP4-0_47'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        GET     Hdr:Proc

        GET     Hdr:OSEntries

        ; prevent incompatible debug definitions from central header file
        GBLL    DebugExported
        GET     hdr.omap4430
        GET     hdr.UART
        GET     hdr.StaticWS

        EXPORT  HAL_DebugTX
        EXPORT  HAL_DebugRX
 [ Debug
        EXPORT  DebugHALPrint
        EXPORT  DebugHALPrintReg
        EXPORT  DebugMemDump
        EXPORT  DebugHALPrintByte
        EXPORT  DebugCallstack
 ]

        AREA    |Asm$$Code|, CODE, READONLY, PIC

 [ Debug

; No initialisation; assumes we've booted from x-loader and thus the serial
; port is already set up

; In all cases, sb must be HAL workspace ptr/board config ptr

; in: a1 = character to TX
HAL_DebugTX
        LDR     a2, [sb, #BoardConfig_DebugUART]
HAL_DebugTX_Loop
        LDRB    a3, [a2, #UART_LSR]
        TST     a3, #UART_LSR_TX_FIFO_E
        BEQ     HAL_DebugTX_Loop
        STRB    a1, [a2, #UART_THR]
        MOV     pc, lr

; out: a1 = character, or -1 if none available
HAL_DebugRX     ROUT
        LDR     a2, [sb, #BoardConfig_DebugUART]
        LDRB    a1, [a2, #UART_LSR]
        TST     a1, #UART_LSR_RX_FIFO_E
        MOVEQ   a1, #-1
        LDRNEB  a1, [a2, #UART_RHR]
        MOV     pc, lr

DebugHALPrint
        Push    "a1-a4,v1"
        MOV     v1, lr
10      LDRB    a1, [v1], #1
        TEQ     a1, #0
        BEQ     %FT20
        BL      HAL_DebugTX
        B       %BT10
20      ADD     v1, v1, #3
        BIC     lr, v1, #3
        Pull    "a1-a4,v1"
        MOV     pc, lr

DebugHALPrintReg ; Output number on top of stack to the serial port
        Push    "a1-a4,v1"
        LDR     a1, [sp,#5*4]
        LDR     a2, [sb, #BoardConfig_DebugUART]
        ADR     a3, hextab
        MOV     a4, #8
10
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT10
        LDRB    v1, [a3, a1, LSR #28]
        STRB    v1, [a2, #UART_THR]
        MOV     a1, a1, LSL #4
        SUBS    a4, a4, #1
        BNE     %BT10
20
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT20
        MOV     v1, #13
        STRB    v1, [a2, #UART_THR]
30
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT30
        MOV     v1, #10
        STRB    v1, [a2, #UART_THR]

        Pull    "a1-a4,v1"
        ADD     sp, sp, #4
        MOV     pc, lr

hextab  DCB "0123456789abcdef"

DebugMemDump ; r0 = start, r1 = size
        Push    "a1-a4,v1-v3,lr"
        MOV     v2, a1
        MOV     v3, a2
        LDR     a2, [sb, #BoardConfig_DebugUART]
        ADR     a3, hextab
100
        ; Print addr
        MOV     a1, v2
        MOV     a4, #8
10
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT10
        LDRB    v1, [a3, a1, LSR #28]
        STRB    v1, [a2, #UART_THR]
        MOV     a1, a1, LSL #4
        SUBS    a4, a4, #1
        BNE     %BT10
20
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT20
        MOV     v1, #32
        STRB    v1, [a2, #UART_THR]

        ; Print value
        LDR     a1, [v2]
        MOV     a4, #8
10
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT10
        LDRB    v1, [a3, a1, LSR #28]
        STRB    v1, [a2, #UART_THR]
        MOV     a1, a1, LSL #4
        SUBS    a4, a4, #1
        BNE     %BT10
20
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT20
        MOV     v1, #13
        STRB    v1, [a2, #UART_THR]
30
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT30
        MOV     v1, #10
        STRB    v1, [a2, #UART_THR]

        ADD     v2, v2, #4 ; Counter dodgy exception vector
        SUBS    v3, v3, #4
        BGT     %BT100
        Pull    "a1-a4,v1-v3,pc"

DebugHALPrintByte ; Output a byte on top of stack to the serial port
        Push    "a1-a4,v1"
        LDR     a1, [sp,#5*4]
        LDR     a2, [sb, #BoardConfig_DebugUART]
        ADR     a3, hextab
        MOV     a4, #2
10
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT10
        LDRB    v1, [a3, a1, LSR #4]
        STRB    v1, [a2, #UART_THR]
10
        LDRB    v1, [a2, #UART_LSR]
        TST     v1, #UART_LSR_TX_FIFO_E
        BEQ     %BT10
        AND     a1, a1, #&F
        LDRB    v1, [a3, a1]
        STRB    v1, [a2, #UART_THR]
        Pull    "a1-a4,v1"
        ADD     sp, sp, #4
        MOV     pc, lr

DebugCallstack ; Dump the stack until we crash
        Push    "r14"
        ADD     r14,r13,#4 ; Push original SP onto stack
        Push    "r0-r12,r14"
        MRS     a1, CPSR
        Push    "a1"
        ORR     a1, a1, #F32_bit+I32_bit ; No interruptions!
        MSR     CPSR_c, a1
        ADR     lr, DebugHALPrintReg
        B       DebugHALPrintReg

 | ; Debug

HAL_DebugRX
        MOV     a1, #-1
        ; fall through
HAL_DebugTX
        MOV     pc, lr

 ] ; Debug

;       EXPORT  |_dprintf|
;|_dprintf|
;       B       printf

        END
@


1.3
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d25 2
@


1.2
log
@Update to OMAP4 HAL.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    added further definitions for TWL6040 audio chip
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
    added further register descriptions according OMAP4 TRM
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.UART
    added further register descriptions according OMAP4 TRM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added definitions for OMAP4460 (Panda ES)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
    order of UART entries changed
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    don't reset debug UART
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    modifications according to OMAP3 version
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.debug
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.UART
    changes according to hdr.UART changes; HAL_UARTModemControl
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
    use definitions from hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    use definitions from hdr.SDMA
    changes for working sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added code to VideoDevice_Activate (enable DSS power)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.SDMA
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.SDMA
    changes for working sound support

Submissions from Willi Theiss. Compiles, but not tested here.

Version 0.05. Tagged as 'OMAP4-0_05'
@
text
@d16 12
a27 12
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Machine.<Machine>
	GET	Hdr:ImageSize.<ImageSize>
	GET	Hdr:Proc

	GET	Hdr:OSEntries

	GET	hdr.omap4430
	GET	hdr.UART
	GET	hdr.StaticWS
d29 2
a30 2
	EXPORT	HAL_DebugTX
	EXPORT	HAL_DebugRX
d32 5
a36 5
	EXPORT	DebugHALPrint
	EXPORT	DebugHALPrintReg
	EXPORT	DebugMemDump
	EXPORT	DebugHALPrintByte
	EXPORT	DebugCallstack
d39 1
a39 1
	AREA	|Asm$$Code|, CODE, READONLY, PIC
d50 1
a50 1
	LDR	a2, [sb, #BoardConfig_DebugUART]
d52 5
a56 5
	LDRB	a3, [a2, #UART_LSR]
	TST	a3, #UART_LSR_TX_FIFO_E
	BEQ	HAL_DebugTX_Loop
	STRB	a1, [a2, #UART_THR]
	MOV	pc, lr
d59 7
a65 7
HAL_DebugRX	ROUT
	LDR	a2, [sb, #BoardConfig_DebugUART]
	LDRB	a1, [a2, #UART_LSR]
	TST	a1, #UART_LSR_RX_FIFO_E
	MOVEQ	a1, #-1
	LDRNEB	a1, [a2, #UART_RHR]
	MOV	pc, lr
d68 11
a78 11
	Push	"a1-a4,v1"
	MOV	v1, lr
10	LDRB	a1, [v1], #1
	TEQ	a1, #0
	BEQ	%FT20
	BL	HAL_DebugTX
	B	%BT10
20	ADD	v1, v1, #3
	BIC	lr, v1, #3
	Pull	"a1-a4,v1"
	MOV	pc, lr
d81 5
a85 5
	Push	"a1-a4,v1"
	LDR	a1, [sp,#5*4]
	LDR	a2, [sb, #BoardConfig_DebugUART]
	ADR	a3, hextab
	MOV	a4, #8
d87 8
a94 8
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT10
	LDRB	v1, [a3, a1, LSR #28]
	STRB	v1, [a2, #UART_THR]
	MOV	a1, a1, LSL #4
	SUBS	a4, a4, #1
	BNE	%BT10
d96 5
a100 5
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT20
	MOV	v1, #13
	STRB	v1, [a2, #UART_THR]
d102 9
a110 9
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT30
	MOV	v1, #10
	STRB	v1, [a2, #UART_THR]

	Pull	"a1-a4,v1"
	ADD	sp, sp, #4
	MOV	pc, lr
d112 1
a112 1
hextab	DCB "0123456789abcdef"
d115 5
a119 5
	Push	"a1-a4,v1-v3,lr"
	MOV	v2, a1
	MOV	v3, a2
	LDR	a2, [sb, #BoardConfig_DebugUART]
	ADR	a3, hextab
d121 3
a123 3
	; Print addr
	MOV	a1, v2
	MOV	a4, #8
d125 8
a132 8
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT10
	LDRB	v1, [a3, a1, LSR #28]
	STRB	v1, [a2, #UART_THR]
	MOV	a1, a1, LSL #4
	SUBS	a4, a4, #1
	BNE	%BT10
d134 9
a142 9
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT20
	MOV	v1, #32
	STRB	v1, [a2, #UART_THR]

	; Print value
	LDR	a1, [v2]
	MOV	a4, #8
d144 8
a151 8
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT10
	LDRB	v1, [a3, a1, LSR #28]
	STRB	v1, [a2, #UART_THR]
	MOV	a1, a1, LSL #4
	SUBS	a4, a4, #1
	BNE	%BT10
d153 5
a157 5
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT20
	MOV	v1, #13
	STRB	v1, [a2, #UART_THR]
d159 10
a168 10
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT30
	MOV	v1, #10
	STRB	v1, [a2, #UART_THR]

	ADD	v2, v2, #4 ; Counter dodgy exception vector
	SUBS	v3, v3, #4
	BGT	%BT100
	Pull	"a1-a4,v1-v3,pc"
d171 5
a175 5
	Push	"a1-a4,v1"
	LDR	a1, [sp,#5*4]
	LDR	a2, [sb, #BoardConfig_DebugUART]
	ADR	a3, hextab
	MOV	a4, #2
d177 5
a181 5
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT10
	LDRB	v1, [a3, a1, LSR #4]
	STRB	v1, [a2, #UART_THR]
d183 9
a191 9
	LDRB	v1, [a2, #UART_LSR]
	TST	v1, #UART_LSR_TX_FIFO_E
	BEQ	%BT10
	AND	a1, a1, #&F
	LDRB	v1, [a3, a1]
	STRB	v1, [a2, #UART_THR]
	Pull	"a1-a4,v1"
	ADD	sp, sp, #4
	MOV	pc, lr
d194 9
a202 9
	Push	"r14"
	ADD	r14,r13,#4 ; Push original SP onto stack
	Push	"r0-r12,r14"
	MRS	a1, CPSR
	Push	"a1"
	ORR	a1, a1, #F32_bit+I32_bit ; No interruptions!
	MSR	CPSR_c, a1
	ADR	lr, DebugHALPrintReg
	B	DebugHALPrintReg
d207 2
a208 2
	MOV	a1, #-1
	; fall through
d210 1
a210 1
	MOV	pc, lr
d214 1
a214 1
;	EXPORT  |_dprintf|
d216 1
a216 1
;	B	printf
d218 1
a218 1
	END
@


1.1
log
@Initial revision
@
text
@d53 1
a53 1
	TST	a3, #UART_LSR_THRE
d62 1
a62 1
	TST	a1, #UART_LSR_DR
d64 1
a64 1
	LDRNEB	a1, [a2, #UART_RBR]
d88 1
a88 1
	TST	v1, #UART_LSR_THRE
d97 1
a97 1
	TST	v1, #UART_LSR_THRE
d103 1
a103 1
	TST	v1, #UART_LSR_THRE
d126 1
a126 1
	TST	v1, #UART_LSR_THRE
d135 1
a135 1
	TST	v1, #UART_LSR_THRE
d145 1
a145 1
	TST	v1, #UART_LSR_THRE
d154 1
a154 1
	TST	v1, #UART_LSR_THRE
d160 1
a160 1
	TST	v1, #UART_LSR_THRE
d178 1
a178 1
	TST	v1, #UART_LSR_THRE
d184 1
a184 1
	TST	v1, #UART_LSR_THRE
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
