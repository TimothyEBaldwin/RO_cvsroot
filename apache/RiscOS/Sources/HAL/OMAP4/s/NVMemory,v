head	1.6;
access;
symbols
	OMAP4-0_60:1.6
	OMAP4-0_59-1_52_2_3:1.6
	OMAP4-0_59:1.6
	OMAP4-0_58:1.6
	OMAP4-0_57:1.6
	OMAP4-0_56:1.6
	OMAP4-0_55:1.6
	OMAP4-0_54-1_52_2_2:1.6
	OMAP4-0_54:1.6
	OMAP4-0_53:1.6
	OMAP4-0_52-1_52_2_1:1.6
	SMP:1.6.0.2
	SMP_bp:1.6
	OMAP4-0_52:1.6
	OMAP4-0_51:1.6
	OMAP4-0_50:1.6
	OMAP4-0_49:1.6
	OMAP4-0_48:1.6
	OMAP4-0_47:1.6
	OMAP4-0_46:1.5
	OMAP4-0_45:1.5
	OMAP4-0_44:1.5
	OMAP4-0_43:1.5
	OMAP4-0_42:1.5
	OMAP4-0_41:1.5
	OMAP4-0_40:1.5
	OMAP4-0_39:1.5
	OMAP4-0_38:1.5
	OMAP4-0_37:1.5
	OMAP4-0_36:1.5
	OMAP4-0_35:1.5
	OMAP4-0_34:1.5
	OMAP4-0_33:1.5
	OMAP4-0_32:1.5
	OMAP4-0_31:1.5
	OMAP4-0_30:1.5
	OMAP4-0_29:1.5
	OMAP4-0_28:1.5
	OMAP4-0_27:1.5
	OMAP4-0_26:1.5
	OMAP4-0_25:1.5
	OMAP4-0_24:1.5
	OMAP4-0_23:1.5
	OMAP4-0_22:1.5
	OMAP4-0_21:1.5
	OMAP4-0_20:1.5
	OMAP4-0_19:1.5
	OMAP4-0_18:1.5
	OMAP4-0_17:1.4
	OMAP4-0_16:1.3
	OMAP4-0_15:1.3
	OMAP4-0_14:1.3
	OMAP4-0_13:1.3
	OMAP4-0_12:1.3
	OMAP4-0_11:1.3
	OMAP4-0_10:1.3
	OMAP4-0_09:1.3
	OMAP4-0_08:1.3
	OMAP4-0_07:1.3
	OMAP4-0_06:1.2
	OMAP4-0_05:1.1.1.1
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2015.09.01.21.22.45;	author rool;	state Exp;
branches;
next	1.5;
commitid	wG3IDGBgTDRpYAzy;

1.5
date	2013.08.17.13.15.01;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	PyZVfvLeTl0RdO1x;

1.4
date	2013.08.15.13.49.09;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	HeOil151Spdxty1x;

1.3
date	2012.03.25.11.42.58;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	4FjnaYBzkPTA6gYv;

1.2
date	2012.03.25.10.28.47;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	wcxutstPODhaHfYv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.6
log
@Minor OMAP4 tidying
omap4430.hdr/Debug,s:
  Define a dummy symbol so when debug is enabled there aren't conflicting IMPORT and EXPORTs.
PRCM.s:
  Fill in missing frequency.
Boot.s:
  Update comment to match HAL function names.
NVMemory.s:
  Add offset to account for FATLoadedCMOS not being at offset 0.
Top.s:
  Remove unused Post header. Replace DCI with instruction now objasm supports it.
Submission from Willi Theiss.

Version 0.47. Tagged as 'OMAP4-0_47'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; NVMemory functions

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     hdr.omap4430
        GET     hdr.StaticWS
        GET     hdr.GPIO

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  NVMemory_Init
        EXPORT  NVMemory_InitDevice
        EXPORT  HAL_NVMemoryType
        EXPORT  HAL_NVMemorySize
        EXPORT  HAL_NVMemoryPageSize
        EXPORT  HAL_NVMemoryProtectedSize
        EXPORT  HAL_NVMemoryProtection
        EXPORT  HAL_NVMemoryRead
        EXPORT  HAL_NVMemoryWrite

        IMPORT  memcpy
        IMPORT  HAL_CounterDelay

        ; Autodetect the EEPROM at runtime in the range 2kbit to 16kbit
        GBLL    ProbeEESize
ProbeEESize     SETL {TRUE}

        ; If no EEPROM found, permit FAT loaded CMOS image in SRAM by u-boot
        GBLL    TryLoadedCMOS
TryLoadedCMOS   SETL {TRUE}

        ; Assume u-boot loads at the top of the internal SRAM
        ASSERT  BoardConfig_Size <= &C000
                ^ 0
                # &C000
FATLoadedCMOS   # 2048 + 4

EE_Read_Addr    * 2_10100001
EE_Write_Addr   * 2_10100000
EE_SCL_Line     * 12            ; SCL on EMU1 on GPIO12
EE_SDA_Line     * 11            ; SDA on EMU0 on GPIO11
EE_Clock_Speed  * 10            ; microseconds

        MACRO
        SCLLow
        ; Actively drive low
        GPIO_SetOutput0  v1, v2
        MOV     a1, #EE_Clock_Speed:SHR:1
        BL      HAL_CounterDelay
        MEND

        MACRO
        SCLHigh
        ; Actively drive high
        GPIO_SetOutput1  v1, v2
        MOV     a1, #EE_Clock_Speed:SHR:1
        BL      HAL_CounterDelay
        MEND

        MACRO
        SDALow
        ; Actively drive low
        GPIO_SetOutput0  v1, v3
        GPIO_SetAsOutput v1, v3, a4
        MOV     a1, #EE_Clock_Speed:SHR:1
        BL      HAL_CounterDelay
        MEND

        MACRO
        SDAHigh
        ; Float high
        GPIO_SetAsInput  v1, v3, a4
        MOV     a1, #EE_Clock_Speed:SHR:1
        BL      HAL_CounterDelay
        MEND

HAL_NVMemoryType
        LDR     a2, NVMemoryFound
        TEQ     a2, #0
        MOV     a1, #NVMemoryFlag_HAL
        ORR     a1, a1, #NVMemoryFlag_LowRead :OR: NVMemoryFlag_LowWrite
      [ :LNOT: TryLoadedCMOS
        ; There's nothing, not even fake CMOS
        MOVEQ   a1, #NVMemoryFlag_None
      ]
        MOV     pc, lr

HAL_NVMemorySize
        LDR     a1, NVMemoryFound
      [ TryLoadedCMOS
        ; Pretend there is some
        TEQ     a1, #0
        MOVEQ   a1, #?FATLoadedCMOS:AND:&FF00
      ]
        MOV     pc, lr

HAL_NVMemoryPageSize
        MOV     a1, #16    ; Try it the same size as the original
        MOV     pc, lr

HAL_NVMemoryProtectedSize
        MOV     a1, #0     ; No protected memory
        MOV     pc, lr

HAL_NVMemoryProtection
        MOV     pc, lr     ; No memory protection, nothing to do

HAL_NVMemoryRead
        ; In:  a1 = physical address
        ;      a2 = destination buffer
        ;      a3 = count
        ; Out: a1 = number of bytes read
        Push    "v1-v4, lr"
        MOV     v1, a1
        MOV     v2, a2
        MOV     v3, a3
        MOV     v4, #0     ; Bytes read
10
        LDR     a3, NVMemoryFound
        TEQ     a3, #0

        ADD     a1, v1, v4
      [ TryLoadedCMOS
        LDREQ   a3, IntSRAM_Log
        ADDEQ   a3, a3, #:INDEX:FATLoadedCMOS
        LDREQB  a1, [a3, a1]
      |
        MOVEQ   a1, #-1
      ]
        BLNE    NVMemory_BGet
        CMP     a1, #-1
        STRNEB  a1, [v2], #1
        ADDNE   v4, v4, #1
        SUBNES  v3, v3, #1
        BNE     %BT10

        MOV     a1, v4
        Pull    "v1-v4, pc"

HAL_NVMemoryWrite
        ; In:  a1 = physical address
        ;      a2 = source buffer
        ;      a3 = count
        ; Out: a1 = number of bytes written
        Push    "v1-v4, lr"
        MOV     v1, a1
        MOV     v2, a2
        MOV     v3, a3
        MOV     v4, #0     ; Bytes written
10
        LDR     a3, NVMemoryFound
        TEQ     a3, #0

        ADD     a1, v1, v4
        LDRB    a2, [v2], #1
      [ TryLoadedCMOS
        LDREQ   a3, IntSRAM_Log
        ADDEQ   a3, a3, #:INDEX:FATLoadedCMOS
        STREQB  a2, [a3, a1]
        MOVEQ   a1, #0     ; Success
      |
        MOVEQ   a1, #-1
      ]
        BLNE    NVMemory_BPut
        CMP     a1, #-1
        ADDNE   v4, v4, #1
        SUBNES  v3, v3, #1
        BNE     %BT10

        MOV     a1, v4
        Pull    "v1-v4, pc"

NVMemory_Init
        Push    "v1-v3, lr"

        ; Read DSCR to check if ARM debugging is enabled
        ; This is the best method we have of working out if a JTAG cable is
        ; connected?
        MRC     p14, 0, a1, c0, c1, 0
        TST     a1, #&c000 ; Check halting debug & monitor debug enable bits
        MOVNE   a1, #-1
        BNE     %FT05
        
        ; Set EMU0 and EMU1 as bidir GPIO with no pullups
        ; nor off state nor wakeup
        LDR     a1, L4_Core_Log
        LDR     a2, =(L4_SYSCTRL_PADCONF_CORE - L4_Core)
        ADD     a1, a2, a1
        LDR     a2, =0x0103
        ADD     a1, a1, #0x100          ; add common offset for pad fields
        STRH    a2, [a1, #0x0AE]        ; CONTROL_CORE_PAD1_DPM_EMU0
        STRH    a2, [a1, #0x0B0]        ; CONTROL_CORE_PAD0_DPM_EMU1

        ; Drive SCL high, float SDA high
        ASSERT  (EE_SCL_Line:SHR:5) = (EE_SDA_Line:SHR:5)
        GPIO_PrepareC a1, a2, EE_SCL_Line
        GPIO_PrepareC a1, a3, EE_SDA_Line
        GPIO_SetOutput1 a1, a2
        GPIO_SetOutput1 a1, a3
        GPIO_SetAsOutput a1, a2, a4
        GPIO_SetAsInput a1, a3, a4

        MOV     a1, #0
        BL      NVMemory_BGet
05
        CMP     a1, #-1
        MOVEQ   v3, #0     ; No reply
        MOVNE   v3, #256   ; Must be at least 256

      [ ProbeEESize
        LDR     v2, IntSRAM_Log
        ADD     v2, v2, #:INDEX:FATLoadedCMOS
        BEQ     %FT30

        ; So there's an EEPROM of at least 256 bytes present
        MOV     v1, #255
10
        MOV     a1, v1
        BL      NVMemory_BGet
        STRB    a1, [v2, v1]
        SUBS    v1, v1, #1
        BPL     %BT10
15
        ; Compare blocks of 2048 bits in powers of 2 until alias found
        ; This has 2 weaknesses
        ; - when the chip is initially blank it will appear to be 256 bytes
        ;   for the first boot (done during the factory test anyway)
        ; - it may underreport if the chip is filled with exact copies of the
        ;   first 256 bytes for reason (unlikely, versus a destructive test)
        MOV     v1, #255
20
        ADD     a1, v1, v3
        BL      NVMemory_BGet
        LDRB    a2, [v2, v1]
        TEQ     a1, a2
        BNE     %FT25
        SUBS    v1, v1, #1
        BPL     %BT20

        ; All 256 matched, it's an alias
        B       %FT30
25
        ; Non match, not an alias, try next power of 2
        MOV     v3, v3, LSL #1

        ; Stop probing when address wont fit in the address byte
        CMP     v3, #2_11100000000
        BLS     %BT15
30
      ]
        STR     v3, NVMemoryFound
    [ TryLoadedCMOS
        TEQ     v3, #0
        BNE     %FT50

        ; Check the loaded CMOS is from the 5.xx era
      [ :LNOT: ProbeEESize
        LDR     v2, IntSRAM_Log
        ADD     v2, v2, #:INDEX:FATLoadedCMOS
      ]
        LDR     a1, [v2, #?FATLoadedCMOS - 4]
        SUB     a1, a1, #500
        CMP     a1, #100

        ; Go unpickle the CMOS data file logical to physical addresses
        BCC     %FT40

        ; Looks dodgy, make it a blank chip
        MOV     a1, #-1
        MOV     a3, #?FATLoadedCMOS - 4
35
        SUBS    a3, a3, #4
        STRPL   a1, [v2, a3]
        BNE     %BT35
40
        ; Roll top 4 by 1 step to get [00-BF][F0-FF][C0-EF]
        ADD     a1, v2, #&C0
        MOV     a2, #4
        BL      NVMemory_Barrel16

        ; Roll bottom 16 by 4 steps to get [F0-FF][C0-EF][00-BF]
        MOV     v1, #4
45
        MOV     a1, v2
        MOV     a2, #16
        BL      NVMemory_Barrel16
        SUBS    v1, v1, #1
        BNE     %BT45
50
    ]
        Pull    "v1-v3, pc"
        
NVMemory_Barrel16
        ; void NVMemory_Barrel16(uint32_t *base, size_t wrapsize)
        ; Moves 16 bytes up in memory, wrapping what fell off the top
        Push    "v1-v2, lr"

        ; Pick up the end data to keep
        ADD     ip, a1, a2, LSL #4
        LDMDB   ip, {a3-a4, v1-v2}
        Push    "a3-a4, v1-v2"
10
        ; And the move part
        SUBS    a2, a2, #1
        ADDNE   ip, a1, a2, LSL #4
        LDMNEDB ip, {a3-a4, v1-v2}
        STMNEIA ip, {a3-a4, v1-v2}
        BNE     %BT10

        ; Replace the wrapped bit
        Pull    "a3-a4, v1-v2"
        STMIA   a1, {a3-a4, v1-v2}

        Pull    "v1-v2, pc"

NVMemory_InitDevice
        ; void NVMemory_InitDevice(void)
        LDR     a3, NVMemoryFound
        TEQ     a3, #0
        MOVEQ   pc, lr
        Push    "a3, lr"

        ; Copy over template
        ADRL    a1, NVRAMWS
        ADR     a2, NVMemory_Device_Template
        MOV     a3, #HALDeviceSize
        BL      memcpy

        ; Map 256/512/1024/2048 to table index 0/1/2/3
        MOV     a2, a1
        Pull    "a3, lr"
        CLZ     a1, a3
        RSB     a1, a1, #31 - 8

        ADR     a4, NVMemory_Device_IDs
        MOV     a3, a1, LSL #1
        LDRH    a3, [a4, a3]
        STRH    a3, [a2, #HALDevice_ID]

        ADR     a4, NVMemory_Device_Descs
        MOV     a3, #1 + :LEN:"24Cxx EEPROM"
        MLA     a3, a3, a1, a4
        STR     a3, [a2, #HALDevice_Description]

        ; Tail call the OS to add it
        MOV     a1, #0
        LDR     pc, OSentries + 4*OS_AddDevice

NVMemory_Device_Template
        DCW     HALDeviceType_SysPeri + HALDeviceSysPeri_NVRAM
        DCW     &1234           ; ID filled at runtime
        DCD     HALDeviceBus_Ser + HALDeviceSerBus_IIC
        DCD     0               ; API version 0
        DCD     &12345678       ; Description filled at runtime
        DCD     0               ; Address - N/A
        %       12              ; Reserved
        DCD     NVMemory_Device_Activate
        DCD     NVMemory_Device_Deactivate
        DCD     NVMemory_Device_Reset
        DCD     NVMemory_Device_Sleep
        DCD     -1
        DCD     0
        %       8
        ASSERT  (. - NVMemory_Device_Template) = HALDeviceSize

NVMemory_Device_Activate
        MOV     a1, #1
        MOV     pc, lr
NVMemory_Device_Sleep
        MOV     a1, #0
NVMemory_Device_Deactivate
NVMemory_Device_Reset
        MOV     pc, lr
NVMemory_Device_IDs
        DCW    HALDeviceID_NVRAM_24C02
        DCW    HALDeviceID_NVRAM_24C04
        DCW    HALDeviceID_NVRAM_24C08
        DCW    HALDeviceID_NVRAM_24C16
NVMemory_Device_Descs
        DCB    "24C02 EEPROM", 0
        DCB    "24C04 EEPROM", 0
        DCB    "24C08 EEPROM", 0
        DCB    "24C16 EEPROM", 0
        ALIGN
        
NVMemory_BGet
        ; int32_t NVMemory_BGet(uint32_t loc)
        ; Returns -1 if no ACK otherwise the byte read
        Push    "v1, v3, lr"
        MOV     v1, a1
        MOV     v3, #-1

        BL      BashIIC_Start

      [ ProbeEESize
        ; Take bits 8-10 to be the device id
        AND     a2, v1, #2_11100000000
        MOV     a2, a2, LSR #7
        ORR     a1, a2, #EE_Write_Addr
      |
        ; The device id is zero
        MOV     a1, #EE_Write_Addr
      ]
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        AND     a1, v1, #255
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        BL      BashIIC_Start

      [ ProbeEESize
        ; Take bits 8-10 to be the device id
        AND     a2, v1, #2_11100000000
        MOV     a2, a2, LSR #7
        ORR     a1, a2, #EE_Read_Addr
      |
        ; The device id is zero
        MOV     a1, #EE_Read_Addr
      ]
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        BL      BashIIC_In
        MOV     v3, a1

        BL      BashIIC_NACK
10        
        BL      BashIIC_Stop
        MOV     a1, v3
        Pull    "v1, v3, pc"
        
NVMemory_BPut
        ; int32_t NVMemory_BPut(uint32_t loc, uint8_t byte)
        ; Returns -1 if no ACK
        Push    "v1-v3, lr"
        MOV     v1, a1
        MOV     v2, a2
        MOV     v3, #-1

        BL      BashIIC_Start

      [ ProbeEESize
        ; Take bits 8-10 to be the device id
        AND     a2, v1, #2_11100000000
        MOV     a2, a2, LSR #7
        ORR     a1, a2, #EE_Write_Addr
      |
        ; The device id is zero
        MOV     a1, #EE_Write_Addr
      ]
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        AND     a1, v1, #255
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10
        
        MOV     a1, v2
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        CMP     a1, #-1
        BNE     %FT10

        BL      BashIIC_Stop
05
        ; Poll for completion (any address will do)
        BL      BashIIC_Start
        MOV     a1, #EE_Write_Addr
        BL      BashIIC_Out
        BL      BashIIC_ACKIn
        MOV     v2, a1
        BL      BashIIC_Stop
        CMP     v2, #-1
        BNE     %BT05

        MOV     v3, #0
10
        MOV     a1, v3
        Pull    "v1-v3, pc"

BashIIC_Out
        ; Clock out a byte MSB first
        Push    "v1-v2, lr"
        MOV     v1, a1, LSL #24
        MOV     v2, #8
10
        MOVS    v1, v1, LSL #1
        BCC     %FT20
        BL      BashIIC_NACK
        B       %FT30
20
        BL      BashIIC_ACK
30
        SUBS    v2, v2, #1
        BNE     %BT10
        Pull    "v1-v2, pc"
        
BashIIC_In
        ; Clock in a byte MSB first
        Push    "v1-v2, lr"
        MOV     v1, #0
        MOV     v2, #8
10
        BL      BashIIC_ACKIn
        MOV     v1, v1, LSL #1
        TEQ     a1, #0
        ORREQ   v1, v1, #1
        SUBS    v2, v2, #1
        BNE     %BT10
        MOV     a1, v1
        Pull    "v1-v2, pc"
        
BashIIC_Start
        Push    "v1-v3, lr"
        ; SCL ensure high, SDA falls
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        SDAHigh
        SCLHigh
        SDALow
        Pull    "v1-v3, pc"

BashIIC_Stop
        Push    "v1-v3, lr"
        ; SCL ensure high, SDA rises
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        SDALow
        SCLHigh
        SDAHigh
        Pull    "v1-v3, pc"

BashIIC_ACK
        Push    "v1-v3, lr"
        ; Clock low, data low, clock high
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        SDALow
        SCLHigh
        Pull    "v1-v3, pc"

BashIIC_NACK
        Push    "v1-v3, lr"
        ; Clock low, data high, clock high
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        SDAHigh
        SCLHigh
        Pull    "v1-v3, pc"

BashIIC_ACKIn
        ; Clock in a bit (SCL high on entry) by sampling SDA
        Push    "v1-v3, lr"
        GPIO_PrepareC v1, v2, EE_SCL_Line
        GPIO_PrepareC v1, v3, EE_SDA_Line
        SCLLow
        GPIO_SetAsInput v1, v3, a4
        SCLHigh
        GPIO_GetInput a1, v1, v3
        EORS    a1, a1, v3
        MOVNE   a1, #-1
        Pull    "v1-v3, pc"

        END
@


1.5
log
@Probe earlier, declare device later
Reflects changes in OMAP3-0_88.

Version 0.18. Tagged as 'OMAP4-0_18'
@
text
@d275 1
@


1.4
log
@Create placeholder NVMemory HAL device when EEPROM detected
Merged from OMAP3-0_87, builds but not tested.
Expanded tabs in hdr/StaticWS.

Version 0.17. Tagged as 'OMAP4-0_17'
@
text
@d28 1
d199 1
a199 1

d268 1
a268 1
      [ TryLoadedCMOS
d305 1
a305 6
      ]
        ; If some was found, create a placeholder HAL device
        LDR     a1, NVMemoryFound
        TEQ     a1, #0
        BLNE    NVMemory_AddDevice

d331 6
a336 3
NVMemory_AddDevice
        ; void NVMemory_AddDevice(uint32_t bytesize)
        Push    "a1, lr"
d340 1
a340 1
        ADR     a2, NVMemory_AddDevice_Template
d350 1
a350 1
        ADR     a4, NVMemory_AddDevice_IDs
d355 1
a355 1
        ADR     a4, NVMemory_AddDevice_Descs
d364 1
a364 1
NVMemory_AddDevice_Template
d372 4
a375 4
        DCD     NVMemory_AddDevice_Activate
        DCD     NVMemory_AddDevice_Deactivate
        DCD     NVMemory_AddDevice_Reset
        DCD     NVMemory_AddDevice_Sleep
d379 1
a379 1
        ASSERT  (. - NVMemory_AddDevice_Template) = HALDeviceSize
d381 1
a381 1
NVMemory_AddDevice_Activate
d384 1
a384 1
NVMemory_AddDevice_Sleep
d386 2
a387 2
NVMemory_AddDevice_Deactivate
NVMemory_AddDevice_Reset
d389 1
a389 1
NVMemory_AddDevice_IDs        
d394 1
a394 1
NVMemory_AddDevice_Descs
@


1.3
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d36 1
d305 5
d311 1
a311 1

d335 67
@


1.2
log
@Updates to OMAP4 port.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added DebugTiming macros
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.StaticWS
    added variable NVMemoryFound
    removed variables for NVRAM over SD card support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.KdbScan
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.NVMemory
    EEPROM support over JTAG port (EMU0/EMU1)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    use DMA for copying ROM at top of RAM
    added debug timing
    support for compressed images (as in OMAP3)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added debug timing OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.c.CLib
    reverted to version without SD card NVRAM support

Changes from Willi Theiss.
Assembles without errors, but not tested here.

Version 0.06. Tagged as 'OMAP4-0_06'
@
text
@d17 73
a89 73
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:OSEntries
	GET	Hdr:HALEntries
	GET	hdr.omap4430
	GET	hdr.StaticWS
	GET	hdr.GPIO

	AREA	|Asm$$Code|, CODE, READONLY, PIC

	EXPORT	NVMemory_Init
	EXPORT	HAL_NVMemoryType
	EXPORT	HAL_NVMemorySize
	EXPORT	HAL_NVMemoryPageSize
	EXPORT	HAL_NVMemoryProtectedSize
	EXPORT	HAL_NVMemoryProtection
	EXPORT	HAL_NVMemoryRead
	EXPORT	HAL_NVMemoryWrite

	IMPORT	HAL_CounterDelay

	; Autodetect the EEPROM at runtime in the range 2kbit to 16kbit
	GBLL	ProbeEESize
ProbeEESize	SETL	{TRUE}

	; If no EEPROM found, permit FAT loaded CMOS image in SRAM by u-boot
	GBLL	TryLoadedCMOS
TryLoadedCMOS	SETL	{TRUE}

	; Assume u-boot loads at the top of the internal SRAM
	ASSERT	BoardConfig_Size <= &C000
		^ 0
		# &C000
FATLoadedCMOS	# 2048 + 4

EE_Read_Addr	* 2_10100001
EE_Write_Addr	* 2_10100000
EE_SCL_Line	* 12		; SCL on EMU1 on GPIO12
EE_SDA_Line	* 11		; SDA on EMU0 on GPIO11
EE_Clock_Speed	* 10		; microseconds

	MACRO
	SCLLow
	; Actively drive low
	GPIO_SetOutput0  v1, v2
	MOV	a1, #EE_Clock_Speed:SHR:1
	BL	HAL_CounterDelay
	MEND

	MACRO
	SCLHigh
	; Actively drive high
	GPIO_SetOutput1  v1, v2
	MOV	a1, #EE_Clock_Speed:SHR:1
	BL	HAL_CounterDelay
	MEND

	MACRO
	SDALow
	; Actively drive low
	GPIO_SetOutput0  v1, v3
	GPIO_SetAsOutput v1, v3, a4
	MOV	a1, #EE_Clock_Speed:SHR:1
	BL	HAL_CounterDelay
	MEND

	MACRO
	SDAHigh
	; Float high
	GPIO_SetAsInput  v1, v3, a4
	MOV	a1, #EE_Clock_Speed:SHR:1
	BL	HAL_CounterDelay
	MEND
d92 9
a100 9
	LDR	a2, NVMemoryFound
	TEQ	a2, #0
	MOV	a1, #NVMemoryFlag_HAL
	ORR	a1, a1, #NVMemoryFlag_LowRead :OR: NVMemoryFlag_LowWrite
  [ :LNOT: TryLoadedCMOS
	; There's nothing, not even fake CMOS
	MOVEQ	a1, #NVMemoryFlag_None
  ]
	MOV	pc, lr
d103 7
a109 7
	LDR	a1, NVMemoryFound
  [ TryLoadedCMOS
	; Pretend there is some
	TEQ	a1, #0
	MOVEQ	a1, #?FATLoadedCMOS:AND:&FF00
  ]
	MOV	pc, lr
d112 2
a113 2
	MOV	a1,#16	; Try it the same size as the original
	MOV	pc, lr
d116 2
a117 2
	MOV	a1, #0	; No protected memory
	MOV	pc, lr
d120 1
a120 1
	MOV	pc, lr	; No memory protection, nothing to do
d123 9
a131 9
	; In:  a1 = physical address
	;      a2 = destination buffer
	;      a3 = count
	; Out: a1 = number of bytes read
	Push	"v1-v4, lr"
	MOV	v1, a1
	MOV	v2, a2
	MOV	v3, a3
	MOV	v4, #0		; Bytes read
d133 2
a134 2
	LDR	a3, NVMemoryFound
	TEQ	a3, #0
d136 14
a149 14
	ADD	a1, v1, v4
  [ TryLoadedCMOS
	LDREQ	a3, IntSRAM_Log
	ADDEQ	a3, a3, #:INDEX:FATLoadedCMOS
	LDREQB	a1, [a3, a1]
  |
	MOVEQ	a1, #-1
  ]
	BLNE	NVMemory_BGet
	CMP	a1, #-1
	STRNEB	a1, [v2], #1
	ADDNE	v4, v4, #1
	SUBNES	v3, v3, #1
	BNE	%BT10
d151 2
a152 2
	MOV	a1, v4
	Pull	"v1-v4, pc"
d155 9
a163 9
	; In:  a1 = physical address
	;      a2 = source buffer
	;      a3 = count
	; Out: a1 = number of bytes written
	Push	"v1-v4, lr"
	MOV	v1, a1
	MOV	v2, a2
	MOV	v3, a3
	MOV	v4, #0		; Bytes written
d165 2
a166 2
	LDR	a3, NVMemoryFound
	TEQ	a3, #0
d168 15
a182 15
	ADD	a1, v1, v4
	LDRB	a2, [v2], #1
  [ TryLoadedCMOS
	LDREQ	a3, IntSRAM_Log
	ADDEQ	a3, a3, #:INDEX:FATLoadedCMOS
	STREQB	a2, [a3, a1]
	MOVEQ	a1, #0		; Success
  |
	MOVEQ	a1, #-1
  ]
	BLNE	NVMemory_BPut
	CMP	a1, #-1
	ADDNE	v4, v4, #1
	SUBNES	v3, v3, #1
	BNE	%BT10
d184 2
a185 2
	MOV	a1, v4
	Pull	"v1-v4, pc"
d188 1
a188 1
	Push	"v1-v3, lr"
d190 26
a215 26
	; Read DSCR to check if ARM debugging is enabled
	; This is the best method we have of working out if a JTAG cable is
	; connected?
	MRC	p14, 0, a1, c0, c1, 0
	TST	a1, #&c000	; Check halting debug & monitor debug enable bits
	MOVNE	a1, #-1
	BNE	%FT05

	; Set EMU0 and EMU1 as bidir GPIO with no pullups
	; nor off state nor wakeup
	LDR	a1, L4_Core_Log
	LDR	a2, =(L4_SYSCTRL_PADCONF_CORE - L4_Core)
	ADD	a1, a2, a1
	LDR	a2, =0x0103
	ADD	a1, a1, #0x100		; add common offset for pad fields
	STRH	a2, [a1, #0x0AE]	; CONTROL_CORE_PAD1_DPM_EMU0
	STRH	a2, [a1, #0x0B0]	; CONTROL_CORE_PAD0_DPM_EMU1

	; Drive SCL high, float SDA high
	ASSERT	(EE_SCL_Line:SHR:5) = (EE_SDA_Line:SHR:5)
	GPIO_PrepareC a1, a2, EE_SCL_Line
	GPIO_PrepareC a1, a3, EE_SDA_Line
	GPIO_SetOutput1 a1, a2
	GPIO_SetOutput1 a1, a3
	GPIO_SetAsOutput a1, a2, a4
	GPIO_SetAsInput a1, a3, a4
d217 2
a218 2
	MOV	a1, #0
	BL	NVMemory_BGet
d220 8
a227 8
	CMP	a1, #-1
	MOVEQ	v3, #0		; No reply
	MOVNE	v3, #256	; Must be at least 256

  [ ProbeEESize
	LDR	v2, IntSRAM_Log
	ADD	v2, v2, #:INDEX:FATLoadedCMOS
	BEQ	%FT30
d229 2
a230 2
	; So there's an EEPROM of at least 256 bytes present
	MOV	v1, #255
d232 5
a236 5
	MOV	a1, v1
	BL	NVMemory_BGet
	STRB	a1, [v2, v1]
	SUBS	v1, v1, #1
	BPL	%BT10
d238 7
a244 7
	; Compare blocks of 2048 bits in powers of 2 until alias found
	; This has 2 weaknesses
	; - when the chip is initially blank it will appear to be 256 bytes
	;   for the first boot (done during the factory test anyway)
	; - it may underreport if the chip is filled with exact copies of the
	;   first 256 bytes for reason (unlikely, versus a destructive test)
	MOV	v1, #255
d246 7
a252 7
	ADD	a1, v1, v3
	BL	NVMemory_BGet
	LDRB	a2, [v2, v1]
	TEQ	a1, a2
	BNE	%FT25
	SUBS	v1, v1, #1
	BPL	%BT20
d254 2
a255 2
	; All 256 matched, it's an alias
	B	%FT30
d257 2
a258 2
	; Non match, not an alias, try next power of 2
	MOV	v3, v3, LSL #1
d260 3
a262 3
	; Stop probing when address wont fit in the address byte
	CMP	v3, #2_11100000000
	BLS	%BT15
d264 20
a283 20
  ]
	STR	v3, NVMemoryFound
  [ TryLoadedCMOS
	TEQ	v3, #0
	BNE	%FT50

	; Check the loaded CMOS is from the 5.xx era
    [ :LNOT: ProbeEESize
	LDR	v2, IntSRAM_Log
    ]
	LDR	a1, [v2, #?FATLoadedCMOS - 4]
	SUB	a1, a1, #500
	CMP	a1, #100

	; Go unpickle the CMOS data file logical to physical addresses
	BCC	%FT40

	; Looks dodgy, make it a blank chip
	MOV	a1, #-1
	MOV	a3, #?FATLoadedCMOS - 4
d285 3
a287 3
	SUBS	a3, a3, #4
	STRPL	a1, [v2, a3]
	BNE	%BT35
d289 4
a292 4
	; Roll top 4 by 1 step to get [00-BF][F0-FF][C0-EF]
	ADD	a1, v2, #&C0
	MOV	a2, #4
	BL	NVMemory_Barrel16
d294 2
a295 2
	; Roll bottom 16 by 4 steps to get [F0-FF][C0-EF][00-BF]
	MOV	v1, #4
d297 5
a301 5
	MOV	a1, v2
	MOV	a2, #16
	BL	NVMemory_Barrel16
	SUBS	v1, v1, #1
	BNE	%BT45
d303 2
a304 2
  ]
	Pull	"v1-v3, pc"
d307 8
a314 8
	; void NVMemory_Barrel16(uint32_t *base, size_t wrapsize)
	; Moves 16 bytes up in memory, wrapping what fell off the top
	Push	"v1-v2, lr"

	; Pick up the end data to keep
	ADD	ip, a1, a2, LSL #4
	LDMDB	ip, {a3-a4, v1-v2}
	Push	"a3-a4, v1-v2"
d316 10
a325 10
	; And the move part
	SUBS	a2, a2, #1
	ADDNE	ip, a1, a2, LSL #4
	LDMNEDB ip, {a3-a4, v1-v2}
	STMNEIA ip, {a3-a4, v1-v2}
	BNE	%BT10

	; Replace the wrapped bit
	Pull	"a3-a4, v1-v2"
	STMIA	a1, {a3-a4, v1-v2}
d327 1
a327 1
	Pull	"v1-v2, pc"
d330 53
a382 53
	; int32_t NVMemory_BGet(uint32_t loc)
	; Returns -1 if no ACK otherwise the byte read
	Push	"v1, v3, lr"
	MOV	v1, a1
	MOV	v3, #-1

	BL	BashIIC_Start

  [ ProbeEESize
	; Take bits 8-10 to be the device id
	AND	a2, v1, #2_11100000000
	MOV	a2, a2, LSR #7
	ORR	a1, a2, #EE_Write_Addr
  |
	; The device id is zero
	MOV	a1, #EE_Write_Addr
  ]
	BL	BashIIC_Out
	BL	BashIIC_ACKIn
	CMP	a1, #-1
	BNE	%FT10

	AND	a1, v1, #255
	BL	BashIIC_Out
	BL	BashIIC_ACKIn
	CMP	a1, #-1
	BNE	%FT10

	BL	BashIIC_Start

  [ ProbeEESize
	; Take bits 8-10 to be the device id
	AND	a2, v1, #2_11100000000
	MOV	a2, a2, LSR #7
	ORR	a1, a2, #EE_Read_Addr
  |
	; The device id is zero
	MOV	a1, #EE_Read_Addr
  ]
	BL	BashIIC_Out
	BL	BashIIC_ACKIn
	CMP	a1, #-1
	BNE	%FT10

	BL	BashIIC_In
	MOV	v3, a1

	BL	BashIIC_NACK
10
	BL	BashIIC_Stop
	MOV	a1, v3
	Pull	"v1, v3, pc"

d384 34
a417 34
	; int32_t NVMemory_BPut(uint32_t loc, uint8_t byte)
	; Returns -1 if no ACK
	Push	"v1-v3, lr"
	MOV	v1, a1
	MOV	v2, a2
	MOV	v3, #-1

	BL	BashIIC_Start

  [ ProbeEESize
	; Take bits 8-10 to be the device id
	AND	a2, v1, #2_11100000000
	MOV	a2, a2, LSR #7
	ORR	a1, a2, #EE_Write_Addr
  |
	; The device id is zero
	MOV	a1, #EE_Write_Addr
  ]
	BL	BashIIC_Out
	BL	BashIIC_ACKIn
	CMP	a1, #-1
	BNE	%FT10

	AND	a1, v1, #255
	BL	BashIIC_Out
	BL	BashIIC_ACKIn
	CMP	a1, #-1
	BNE	%FT10

	MOV	a1, v2
	BL	BashIIC_Out
	BL	BashIIC_ACKIn
	CMP	a1, #-1
	BNE	%FT10
d419 1
a419 1
	BL	BashIIC_Stop
d421 9
a429 9
	; Poll for completion (any address will do)
	BL	BashIIC_Start
	MOV	a1, #EE_Write_Addr
	BL	BashIIC_Out
	BL	BashIIC_ACKIn
	MOV	v2, a1
	BL	BashIIC_Stop
	CMP	v2, #-1
	BNE	%BT05
d431 1
a431 1
	MOV	v3, #0
d433 2
a434 2
	MOV	a1, v3
	Pull	"v1-v3, pc"
d437 4
a440 4
	; Clock out a byte MSB first
	Push	"v1-v2, lr"
	MOV	v1, a1, LSL #24
	MOV	v2, #8
d442 4
a445 4
	MOVS	v1, v1, LSL #1
	BCC	%FT20
	BL	BashIIC_NACK
	B	%FT30
d447 1
a447 1
	BL	BashIIC_ACK
d449 4
a452 4
	SUBS	v2, v2, #1
	BNE	%BT10
	Pull	"v1-v2, pc"

d454 4
a457 4
	; Clock in a byte MSB first
	Push	"v1-v2, lr"
	MOV	v1, #0
	MOV	v2, #8
d459 9
a467 9
	BL	BashIIC_ACKIn
	MOV	v1, v1, LSL #1
	TEQ	a1, #0
	ORREQ	v1, v1, #1
	SUBS	v2, v2, #1
	BNE	%BT10
	MOV	a1, v1
	Pull	"v1-v2, pc"

d469 9
a477 9
	Push	"v1-v3, lr"
	; SCL ensure high, SDA falls
	GPIO_PrepareC v1, v2, EE_SCL_Line
	GPIO_PrepareC v1, v3, EE_SDA_Line
	SCLLow
	SDAHigh
	SCLHigh
	SDALow
	Pull	"v1-v3, pc"
d480 9
a488 9
	Push	"v1-v3, lr"
	; SCL ensure high, SDA rises
	GPIO_PrepareC v1, v2, EE_SCL_Line
	GPIO_PrepareC v1, v3, EE_SDA_Line
	SCLLow
	SDALow
	SCLHigh
	SDAHigh
	Pull	"v1-v3, pc"
d491 8
a498 8
	Push	"v1-v3, lr"
	; Clock low, data low, clock high
	GPIO_PrepareC v1, v2, EE_SCL_Line
	GPIO_PrepareC v1, v3, EE_SDA_Line
	SCLLow
	SDALow
	SCLHigh
	Pull	"v1-v3, pc"
d501 8
a508 8
	Push	"v1-v3, lr"
	; Clock low, data high, clock high
	GPIO_PrepareC v1, v2, EE_SCL_Line
	GPIO_PrepareC v1, v3, EE_SDA_Line
	SCLLow
	SDAHigh
	SCLHigh
	Pull	"v1-v3, pc"
d511 11
a521 11
	; Clock in a bit (SCL high on entry) by sampling SDA
	Push	"v1-v3, lr"
	GPIO_PrepareC v1, v2, EE_SCL_Line
	GPIO_PrepareC v1, v3, EE_SDA_Line
	SCLLow
	GPIO_SetAsInput v1, v3, a4
	SCLHigh
	GPIO_GetInput a1, v1, v3
	EORS	a1, a1, v3
	MOVNE	a1, #-1
	Pull	"v1-v3, pc"
d523 1
a523 1
	END
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
; NVMemory* functions
d23 1
a23 1
	GET	hdr.PRCM
d27 1
a34 1
	EXPORT	NVMem_Init
d36 54
a89 1
	IMPORT	NVMem_C_read
d92 8
a99 2
	MOV	a1, #&C00  ; Bytes 0..15 readable and writeable,
	ORR	a1, a1, #3 ; HAL provides access calls
d103 6
a108 1
	MOV	a1, #2048 ; 2 kiB
d127 23
a149 88
	;
	; To make things complicated, we want to maintain compatability with
	; CMOS RAM files saved by *SaveCMOS. So we must translate the physical
	; CMOS address back to RISC OS's original logical one:
	;
	; Logical      Physical
	; &00...&BF    &40...&FF
	; &C0...&EF    &10...&3F
	; &F0...&FF    &00...&0F
	; &100...max   &100...max
	Push	"a3,lr"
	ADRL	ip, NVRAMCache ; Point at our cache
10	CMP	a1, #&100
	ADD	a4, ip, a1
	BHS	%FT20
	CMP	a1, #&40
	SUBHS	a4, a4, #&40
	BHS	%FT20
	CMP	a1, #&10
	ADDHS	a4, a4, #&B0
	ADDLO	a4, a4, #&F0
20	LDRB	a4, [a4]
	ADD	a1, a1, #1
	STRB	a4, [a2], #1
	SUBS	a3, a3, #1
	BGT	%BT10
	Pull	"a1,pc"

; MapInSDMMCIO and read the CMOS file into the NVRAM cache
NVMem_Init
; Add the PRCM offsets to the base address and store them in the
; PRCM address table in static WS
	LDR	a1, L4_ClockMan2_Log
	ADR	a2, PRCM_offset_table
	ADRL	a3, PRCM_address_table
	MOV	a4, #PRCM_offset_table_length
20	LDRH	ip, [a2], #2	; Get an offset and bump the pointer
	ADD	ip, a1, ip	; Add offset to base address
	STR	ip, [a3], #4	; Store the address and bump the pointer
	SUBS	a4, a4, #1	; Decrement the loop counter
	BGT	%BT20		; Loop back until done
; Add the MMCHS1 offsets to the base address and store them in the
; MMCHS1 address table in static WS
	LDR	a1, L4_Per_Log
	ADD	a1, a1, #(L4_HSMMC1 - L4_Per)
	ADR	a2, MMCHS1_offset_table
	ADRL	a3, MMCHS1_address_table
	MOV	a4, #MMCHS1_offset_table_length
30	LDRH	ip, [a2], #2	; Get an offset and bump the pointer
	ADD	ip, a1, ip	; Add offset to base address
	STR	ip, [a3], #4	; Store the address and bump the pointer
	SUBS	a4, a4, #1	; Decrement the loop counter
	BGT	%BT30		; Loop back until done
	ADRL	a1, NVMem_workspace ; Point at base of our workspace
	B	NVMem_C_read

; Offsets to PRCM registers, from L4_ClockMan
PRCM_offset_table
	DCW	(L3INIT_CM2 + CM_L3INIT_HSMMC1_CLKCTRL)
	DCW	(L3INIT_CM2 + CM_L3INIT_HSMMC2_CLKCTRL)
PRCM_offset_table_length * (. - PRCM_offset_table) / 2
; Offsets to MMCHS1 registers, from L4_MemCard1
MMCHS1_offset_table
MMCHS_SYSCONFIG	DCW	&0110
MMCHS_SYSSTATUS	DCW	&0114
MMCHS_CSRE	DCW	&0124
MMCHS_SYSTEST	DCW	&0128
MMCHS_CON	DCW	&012C
MMCHS_PWCNT	DCW	&0130
MMCHS_BLK	DCW	&0204
MMCHS_ARG	DCW	&0208
MMCHS_CMD	DCW	&020C
MMCHS_RSP10	DCW	&0210
MMCHS_RSP32	DCW	&0214
MMCHS_RSP54	DCW	&0218
MMCHS_RSP76	DCW	&021C
MMCHS_DATA	DCW	&0220
MMCHS_PSTATE	DCW	&0224
MMCHS_HCTL	DCW	&0228
MMCHS_SYSCTL	DCW	&022C
MMCHS_STAT	DCW	&0230
MMCHS_IE	DCW	&0234
MMCHS_ISE	DCW	&0238
MMCHS_AC12	DCW	&023C
MMCHS_CAPA	DCW	&0240
MMCHS_CUR_CAPA	DCW	&0248
MMCHS_REV	DCW	&02FC
MMCHS1_offset_table_length * (. - MMCHS1_offset_table) / 2
d151 2
a152 2
	ASSERT	PRCM_address_table_length = PRCM_offset_table_length
	ASSERT	MMCHS1_address_table_length = MMCHS1_offset_table_length
d155 367
a521 21
	; We need to do physical -> logical address translation here too
	; Technically we only need to do it just the once, since the writes
	; shouldn't cross page boundaries. But let's play it safe and do it on
	; all bytes.
	Push	"a3,lr"
	ADRL	ip, NVRAMCache
10	CMP	a1, #&100
	ADD	a4, ip, a1
	BHS	%FT20
	CMP	a1, #&40
	SUBHS	a4, a4, #&40
	BHS	%FT20
	CMP	a1, #&10
	ADDHS	a4, a4, #&B0
	ADDLO	a4, a4, #&F0
20	LDRB	lr, [a2], #1
	ADD	a1, a1, #1
	STRB	lr, [a4]
	SUBS	a3, a3, #1
	BGT	%BT10
	Pull	"a1,pc"
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
