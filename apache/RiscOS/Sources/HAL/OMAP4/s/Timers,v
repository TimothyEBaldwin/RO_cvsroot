head	1.3;
access;
symbols
	OMAP4-0_60:1.3
	OMAP4-0_59-1_52_2_3:1.3
	OMAP4-0_59:1.3
	OMAP4-0_58:1.3
	OMAP4-0_57:1.3
	OMAP4-0_56:1.3
	OMAP4-0_55:1.3
	OMAP4-0_54-1_52_2_2:1.3
	OMAP4-0_54:1.3
	OMAP4-0_53:1.3
	OMAP4-0_52-1_52_2_1:1.3
	SMP:1.3.0.2
	SMP_bp:1.3
	OMAP4-0_52:1.3
	OMAP4-0_51:1.3
	OMAP4-0_50:1.2
	OMAP4-0_49:1.2
	OMAP4-0_48:1.2
	OMAP4-0_47:1.2
	OMAP4-0_46:1.2
	OMAP4-0_45:1.2
	OMAP4-0_44:1.2
	OMAP4-0_43:1.2
	OMAP4-0_42:1.2
	OMAP4-0_41:1.2
	OMAP4-0_40:1.2
	OMAP4-0_39:1.2
	OMAP4-0_38:1.2
	OMAP4-0_37:1.2
	OMAP4-0_36:1.2
	OMAP4-0_35:1.2
	OMAP4-0_34:1.2
	OMAP4-0_33:1.2
	OMAP4-0_32:1.2
	OMAP4-0_31:1.2
	OMAP4-0_30:1.2
	OMAP4-0_29:1.2
	OMAP4-0_28:1.2
	OMAP4-0_27:1.2
	OMAP4-0_26:1.2
	OMAP4-0_25:1.2
	OMAP4-0_24:1.2
	OMAP4-0_23:1.2
	OMAP4-0_22:1.2
	OMAP4-0_21:1.2
	OMAP4-0_20:1.2
	OMAP4-0_19:1.2
	OMAP4-0_18:1.2
	OMAP4-0_17:1.2
	OMAP4-0_16:1.2
	OMAP4-0_15:1.2
	OMAP4-0_14:1.2
	OMAP4-0_13:1.2
	OMAP4-0_12:1.2
	OMAP4-0_11:1.2
	OMAP4-0_10:1.2
	OMAP4-0_09:1.2
	OMAP4-0_08:1.2
	OMAP4-0_07:1.2
	OMAP4-0_06:1.1.1.1
	OMAP4-0_05:1.1.1.1
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2016.05.06.21.41.51;	author jlee;	state Exp;
branches;
next	1.2;
commitid	kj2dniyIsLwM6t5z;

1.2
date	2012.03.25.11.42.58;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	4FjnaYBzkPTA6gYv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.3
log
@Implement HAL_TimerIRQClear
Detail:
  s/Boot, s/Interrupts, s/Timers - Move timer IRQ clear code out of HAL_IRQClear and into HAL_TimerIRQClear. Streamlines HAL_IRQClear, and necessary to avoid undefined symbols when linking with latest HAL USB library
Admin:
  Builds, untested


Version 0.51. Tagged as 'OMAP4-0_51'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.omap4430
        GET     hdr.StaticWS
        GET     hdr.Timers
        GET     hdr.PRCM

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  HAL_Timers
        EXPORT  HAL_TimerDevice
        EXPORT  HAL_TimerGranularity
        EXPORT  HAL_TimerMaxPeriod
        EXPORT  HAL_TimerSetPeriod
        EXPORT  HAL_TimerPeriod
        EXPORT  HAL_TimerReadCountdown
        EXPORT  HAL_TimerIRQClear

        EXPORT  HAL_CounterRate
        EXPORT  HAL_CounterPeriod
        EXPORT  HAL_CounterRead
        EXPORT  HAL_CounterDelay

        EXPORT  Timer_Init

        IMPORT  __rt_udiv10

        MACRO
        SetRegBits $r,$bits
        LDR     a3, =$r
        LDR     a4, =$bits
        LDR     a2, [a1, a3]
        ORR     a2, a2, a4
        STR     a2, [a1, a3]
        MEND

Timer_Init
        ; Make sure all the timers are actually enabled
        LDR     a1, L4_ClockMan_Log
        ADD     a1, a1, #ABE_CM1
        MOV     a2, #2          ; enable module
        STR     a2, [a1, #CM1_ABE_GPTIMER5_CLKCTRL]
        STR     a2, [a1, #CM1_ABE_GPTIMER6_CLKCTRL]
        STR     a2, [a1, #CM1_ABE_GPTIMER7_CLKCTRL]
        STR     a2, [a1, #CM1_ABE_GPTIMER8_CLKCTRL]

        ; Now reset each timer for good luck
        LDR     a1, Timers_Log
        MOV     a2, #TIMER_MAX
        MOV     a3, #GPT_TIOCP_CFG_SOFTRESET
Timer_Init_Loop
        STR     a3, [a1,#GPT_TIOCP_CFG]
        ; Wait for reset to complete
Timer_Init_ResetLoop
        LDR     a4, [a1,#GPT_TIOCP_CFG]
        TST     a4, #GPT_TIOCP_CFG_SOFTRESET
        BNE     Timer_Init_ResetLoop
        ; smart idle
        MOV     a4, #GPT_TIOCP_CFG_IDLEMODE_SMART
        STR     a4, [a1,#GPT_TIOCP_CFG]
        SUBS    a2, a2, #1
        ADD     a1, a1, #TIMER_STRIDE
        BNE     Timer_Init_Loop
        MOV     pc, lr


HAL_Timers
        MOV     a1, #TIMER_MAX
        MOV     pc, lr

HAL_TimerDevice
        CMP     a1, #TIMER_MAX
        MVNHS   a1, #0          ; Error!
        ADDLO   a1, a1, #TIMER_IRQ_BASE
        MOV     pc, lr

HAL_CounterRate
HAL_TimerGranularity
        LDR     a1, sys_clk
        MOV     pc, lr

HAL_TimerMaxPeriod
        MVN     a1, #0  ; 32-bit timers
        MOV     pc, lr

HAL_TimerSetPeriod
        CMP     a1, #TIMER_MAX
        MOVHS   pc, lr
        ; Get pointer to registers
        LDR     a3, Timers_Log
        ADD     a3, a3, a1, LSL #TIMER_STRIDE_POW2
        ; Temporarily stop the timer to avoid unexpected shenanigans
        LDR     a4, [a3, #GPT_TCLR]
        BIC     a4, a4, #GPT_TCLR_ST    ; Stop timer
        STR     a4, [a3, #GPT_TCLR]
        ; If we actually wanted to stop the timer, we can exit now
        CMP     a2, #0
        MOVEQ   pc, lr
        ; Else set up the timer to auto-reload
        ; OMAP manual warns against writing &FFFFFFFF to the reload register,
        ; so limit the timer interrupt frequency to TIMER_FREQUENCY/2
        CMP     a2, #1
        MOVEQ   a2, #2
        RSB     a2, a2, #0
        STR     a2, [a3, #GPT_TLDR]     ; Reload value set
        STR     a2, [a3, #GPT_TCRR]     ; Timer current value set
        MOV     a2, #GPT_IRQ_OVF        ; Enable overflow interrupt
        STR     a2, [a3, #GPT_IRQENABLE_SET]
        ; Re-enable the timer, in auto-reload mode
        ORR     a4, a4, #(GPT_TCLR_ST + GPT_TCLR_AR)
        STR     a4, [a3, #GPT_TCLR]
        MOV     pc, lr

HAL_CounterPeriod
        MOV     a1, #0
        ; Fall through

HAL_TimerPeriod
        CMP     a1, #TIMER_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        LDR     a2, Timers_Log
        ADD     a2, a2, a1, LSL #TIMER_STRIDE_POW2
        LDR     a1, [a2, #GPT_TCLR]
        ANDS    a1, a1, #GPT_TCLR_ST    ; =0 if timer is stopped
        LDRNE   a1, [a2, #GPT_TLDR]
        ; if timer running, get reload value and invert to convert back to original input value
        RSBNE   a1, a1, #0
        MOV     pc, lr

HAL_CounterRead
        MOV     a1, #0
        ; Fall through

HAL_TimerReadCountdown
        CMP     a1, #TIMER_MAX
        MOVHS   a1, #0
        LDRLO   a2, Timers_Log
        ADDLO   a2, a2, a1, LSL #TIMER_STRIDE_POW2
        LDRLO   a1, [a2, #GPT_TCRR]
        RSBLO   a1, a1, #0
        MOV     pc, lr

; If they want n ticks, wait until we've seen n+1 transitions of the clock.
; This function is limited to delays of around 223.6 seconds. Should be plenty!
HAL_CounterDelay
        LDR     a2, Timer_DelayMul
        MUL     a1, a2, a1 ; Calculate required ticks*10
        MOV     a4, lr
        BL      __rt_udiv10 ; Actual required ticks
        MOV     lr, a4
        LDR     a4, Timers_Log ; Get timer 0
        LDR     a2, [a4, #GPT_TCRR]
        RSB     a2, a2, #0 ; Convert to countdown time for ease of reuse of Tungsten code
10
        LDR     a3, [a4, #GPT_TCRR]
        RSB     a3, a3, #0
        SUBS    ip, a2, a3              ; ip = difference in ticks
        ADDLO   ip, a2, #1              ; if wrapped, must have had at least old latch+1 ticks
        SUBS    a1, a1, ip
        MOVLO   pc, lr
        LDR     a2, [a4, #GPT_TCRR]
        RSB     a2, a2, #0
        SUBS    ip, a3, a2              ; ip = difference in ticks
        ADDLO   ip, a3, #1              ; if wrapped, must have had at least old latch+1 ticks
        SUBS    a1, a1, ip
        BHS     %BT10
        MOV     pc, lr

HAL_TimerIRQClear
        CMP     a1, #TIMER_MAX
        LDRLO   a2, Timers_Log
        MOVLO   a3, #7          ; Clear all interrupts
        ADDLO   a1, a2, a1, LSL #TIMER_STRIDE_POW2
        STRLO   a3, [a1, #GPT_IRQSTATUS]
        MOV     pc, lr

        END
@


1.2
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d40 1
d193 8
@


1.1
log
@Initial revision
@
text
@d16 42
a57 42
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Machine.<Machine>
	GET	Hdr:ImageSize.<ImageSize>
	$GetIO

	GET	Hdr:OSEntries
	GET	Hdr:HALEntries

	GET	hdr.omap4430
	GET	hdr.StaticWS
	GET	hdr.Timers
	GET	hdr.PRCM

	AREA	|Asm$$Code|, CODE, READONLY, PIC

	EXPORT	HAL_Timers
	EXPORT	HAL_TimerDevice
	EXPORT	HAL_TimerGranularity
	EXPORT	HAL_TimerMaxPeriod
	EXPORT	HAL_TimerSetPeriod
	EXPORT	HAL_TimerPeriod
	EXPORT	HAL_TimerReadCountdown

	EXPORT	HAL_CounterRate
	EXPORT	HAL_CounterPeriod
	EXPORT	HAL_CounterRead
	EXPORT	HAL_CounterDelay

	EXPORT	Timer_Init

	IMPORT	__rt_udiv10

	MACRO
	SetRegBits $r,$bits
	LDR	a3, =$r
	LDR	a4, =$bits
	LDR	a2, [a1, a3]
	ORR	a2, a2, a4
	STR	a2, [a1, a3]
	MEND
d60 13
a72 13
	; Make sure all the timers are actually enabled
	LDR	a1, L4_ClockMan_Log
	ADD	a1, a1, #ABE_CM1
	MOV	a2, #2		; enable module
	STR	a2, [a1, #CM1_ABE_GPTIMER5_CLKCTRL]
	STR	a2, [a1, #CM1_ABE_GPTIMER6_CLKCTRL]
	STR	a2, [a1, #CM1_ABE_GPTIMER7_CLKCTRL]
	STR	a2, [a1, #CM1_ABE_GPTIMER8_CLKCTRL]

	; Now reset each timer for good luck
	LDR	a1, Timers_Log
	MOV	a2, #TIMER_MAX
	MOV	a3, #GPT_TIOCP_CFG_SOFTRESET
d74 2
a75 2
	STR	a3, [a1,#GPT_TIOCP_CFG]
	; Wait for reset to complete
d77 10
a86 10
	LDR	a4, [a1,#GPT_TIOCP_CFG]
	TST	a4, #GPT_TIOCP_CFG_SOFTRESET
	BNE	Timer_Init_ResetLoop
	; smart idle
	MOV	a4, #GPT_TIOCP_CFG_IDLEMODE_SMART
	STR	a4, [a1,#GPT_TIOCP_CFG]
	SUBS	a2, a2, #1
	ADD	a1, a1, #TIMER_STRIDE
	BNE	Timer_Init_Loop
	MOV	pc, lr
d90 2
a91 2
	MOV	a1, #TIMER_MAX
	MOV	pc, lr
d94 4
a97 4
	CMP	a1, #TIMER_MAX
	MVNHS	a1, #0		; Error!
	ADDLO	a1, a1, #TIMER_IRQ_BASE
	MOV	pc, lr
d101 2
a102 2
	LDR	a1, sys_clk
	MOV	pc, lr
d105 2
a106 2
	MVN	a1, #0	; 32-bit timers
	MOV	pc, lr
d109 26
a134 26
	CMP	a1, #TIMER_MAX
	MOVHS	pc, lr
	; Get pointer to registers
	LDR	a3, Timers_Log
	ADD	a3, a3, a1, LSL #TIMER_STRIDE_POW2
	; Temporarily stop the timer to avoid unexpected shenanigans
	LDR	a4, [a3, #GPT_TCLR]
	BIC	a4, a4, #GPT_TCLR_ST	; Stop timer
	STR	a4, [a3, #GPT_TCLR]
	; If we actually wanted to stop the timer, we can exit now
	CMP	a2, #0
	MOVEQ	pc, lr
	; Else set up the timer to auto-reload
	; OMAP manual warns against writing &FFFFFFFF to the reload register,
	; so limit the timer interrupt frequency to TIMER_FREQUENCY/2
	CMP	a2, #1
	MOVEQ	a2, #2
	RSB	a2, a2, #0
	STR	a2, [a3, #GPT_TLDR]	; Reload value set
	STR	a2, [a3, #GPT_TCRR]	; Timer current value set
	MOV	a2, #GPT_IRQ_OVF	; Enable overflow interrupt
	STR	a2, [a3, #GPT_IRQENABLE_SET]
	; Re-enable the timer, in auto-reload mode
	ORR	a4, a4, #(GPT_TCLR_ST + GPT_TCLR_AR)
	STR	a4, [a3, #GPT_TCLR]
	MOV	pc, lr
d137 2
a138 2
	MOV	a1, #0
	; Fall through
d141 11
a151 11
	CMP	a1, #TIMER_MAX
	MOVHS	a1, #0
	MOVHS	pc, lr
	LDR	a2, Timers_Log
	ADD	a2, a2, a1, LSL #TIMER_STRIDE_POW2
	LDR	a1, [a2, #GPT_TCLR]
	ANDS	a1, a1, #GPT_TCLR_ST	; =0 if timer is stopped
	LDRNE	a1, [a2, #GPT_TLDR]
	; if timer running, get reload value and invert to convert back to original input value
	RSBNE	a1, a1, #0
	MOV	pc, lr
d154 2
a155 2
	MOV	a1, #0
	; Fall through
d158 7
a164 7
	CMP	a1, #TIMER_MAX
	MOVHS	a1, #0
	LDRLO	a2, Timers_Log
	ADDLO	a2, a2, a1, LSL #TIMER_STRIDE_POW2
	LDRLO	a1, [a2, #GPT_TCRR]
	RSBLO	a1, a1, #0
	MOV	pc, lr
d169 8
a176 8
	LDR	a2, Timer_DelayMul
	MUL	a1, a2, a1 ; Calculate required ticks*10
	MOV	a4, lr
	BL	__rt_udiv10 ; Actual required ticks
	MOV	lr, a4
	LDR	a4, Timers_Log ; Get timer 0
	LDR	a2, [a4, #GPT_TCRR]
	RSB	a2, a2, #0 ; Convert to countdown time for ease of reuse of Tungsten code
d178 13
a190 13
	LDR	a3, [a4, #GPT_TCRR]
	RSB	a3, a3, #0
	SUBS	ip, a2, a3		; ip = difference in ticks
	ADDLO	ip, a2, #1		; if wrapped, must have had at least old latch+1 ticks
	SUBS	a1, a1, ip
	MOVLO	pc, lr
	LDR	a2, [a4, #GPT_TCRR]
	RSB	a2, a2, #0
	SUBS	ip, a3, a2		; ip = difference in ticks
	ADDLO	ip, a3, #1		; if wrapped, must have had at least old latch+1 ticks
	SUBS	a1, a1, ip
	BHS	%BT10
	MOV	pc, lr
d192 1
a192 1
	END
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
