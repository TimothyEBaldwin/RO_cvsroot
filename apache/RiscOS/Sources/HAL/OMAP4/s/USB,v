head	1.8;
access;
symbols
	OMAP4-0_60:1.8
	OMAP4-0_59-1_52_2_3:1.8
	OMAP4-0_59:1.8
	OMAP4-0_58:1.8
	OMAP4-0_57:1.8
	OMAP4-0_56:1.8
	OMAP4-0_55:1.8
	OMAP4-0_54-1_52_2_2:1.8
	OMAP4-0_54:1.8
	OMAP4-0_53:1.8
	OMAP4-0_52-1_52_2_1:1.8
	SMP:1.8.0.2
	SMP_bp:1.8
	OMAP4-0_52:1.8
	OMAP4-0_51:1.8
	OMAP4-0_50:1.8
	OMAP4-0_49:1.8
	OMAP4-0_48:1.8
	OMAP4-0_47:1.8
	OMAP4-0_46:1.8
	OMAP4-0_45:1.8
	OMAP4-0_44:1.8
	OMAP4-0_43:1.7
	OMAP4-0_42:1.7
	OMAP4-0_41:1.7
	OMAP4-0_40:1.7
	OMAP4-0_39:1.7
	OMAP4-0_38:1.7
	OMAP4-0_37:1.7
	OMAP4-0_36:1.6
	OMAP4-0_35:1.5
	OMAP4-0_34:1.5
	OMAP4-0_33:1.5
	OMAP4-0_32:1.5
	OMAP4-0_31:1.5
	OMAP4-0_30:1.5
	OMAP4-0_29:1.5
	OMAP4-0_28:1.5
	OMAP4-0_27:1.5
	OMAP4-0_26:1.5
	OMAP4-0_25:1.5
	OMAP4-0_24:1.5
	OMAP4-0_23:1.5
	OMAP4-0_22:1.5
	OMAP4-0_21:1.4
	OMAP4-0_20:1.4
	OMAP4-0_19:1.4
	OMAP4-0_18:1.4
	OMAP4-0_17:1.4
	OMAP4-0_16:1.4
	OMAP4-0_15:1.4
	OMAP4-0_14:1.4
	OMAP4-0_13:1.3
	OMAP4-0_12:1.3
	OMAP4-0_11:1.3
	OMAP4-0_10:1.3
	OMAP4-0_09:1.3
	OMAP4-0_08:1.3
	OMAP4-0_07:1.2
	OMAP4-0_06:1.1.1.1
	OMAP4-0_05:1.1.1.1
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2015.04.08.07.33.53;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	ziZUYwsqx4235Lgy;

1.7
date	2014.10.25.17.47.13;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	eUvY0kdCylOiMBVx;

1.6
date	2014.09.04.21.41.12;	author jlee;	state Exp;
branches;
next	1.5;
commitid	AjMWLbVyJ9pcI4Px;

1.5
date	2013.10.30.00.41.31;	author bavison;	state Exp;
branches;
next	1.4;
commitid	Qv6dpkuXjCtQFfbx;

1.4
date	2013.04.07.08.13.12;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	pJ3reWwimQfmNOKw;

1.3
date	2012.06.06.23.27.28;	author jlee;	state Exp;
branches;
next	1.2;
commitid	3GomJ8iB5rqREH7w;

1.2
date	2012.03.25.11.42.59;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	4FjnaYBzkPTA6gYv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.8
log
@Turn off debug
Anyone using the serial port for other peripheral uses might get confused if some HAL debug comes out on it.
Move the IMPORTs into a header so we don't end up with lots of unresolved symbols with Debug {FALSE}.
Built, but not tested.

Version 0.44. Tagged as 'OMAP4-0_44'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.omap4430
        GET     hdr.StaticWS
        GET     hdr.Timers
        GET     hdr.PRCM
        GET     hdr.USB
        GET     hdr.GPIO
        GET     hdr.omap4_reg

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  USB_Init

        EXPORT  HAL_USBControllerInfo

        IMPORT  HAL_CounterDelay
        IMPORT  GPIOx_SetAsOutput
        IMPORT  GPIOx_SetOutput


; GPIO pins for USB
GPIO_HUB_NRESET *       62
GPIO_HUB_POWER  *       1

OHCI_IRQ        *       OMAP44XX_IRQ_HSUSB_OHCI
EHCI_IRQ        *       OMAP44XX_IRQ_HSUSB_EHCI
MUSB_IRQ        *       OMAP44XX_IRQ_HSUSB_OTG

USB_Init
        Push    "lr"
        ; Initialise USB
        ; This code is roughly the same as omap4_ehci_init() in the linux sources
        ; remark: there is no need to configure pins GPIO_HUB_POWER + GPIO_HUB_NRESET
        ;         because it is already done by U-Boot (it uses USB itself)

        ; disable the power to the usb hub prior to init
        MOV     a1, #GPIO_HUB_POWER
        MOV     a2, #0
        BL      GPIOx_SetAsOutput

        ; reset phy+hub
        MOV     a1, #GPIO_HUB_NRESET
        MOV     a2, #0
        BL      GPIOx_SetAsOutput
        MOV     a1, #GPIO_HUB_NRESET
        MOV     a2, #1
        BL      GPIOx_SetOutput

        ; usb_ehci_init()
        ; initialise port 1 in EHCI_HCD_OMAP_MODE_PHY
        ; setup_4430ehci_io_mux()
        LDR     a1, L4_Core_Log
        LDR     a2, =(L4_SYSCTRL_PADCONF_CORE - L4_Core)
        ADD     a1, a2, a1
        LDR     a2, =0x010C010C
        LDR     a3, =0x0004
        STRH    a2, [a1, #0xC2]         ; USBB1_ULPIPHY_CLK (I)
        STRH    a3, [a1, #0xC4]         ; USBB1_ULPIPHY_STP (O)
        STRH    a2, [a1, #0xC6]         ; USBB1_ULPIPHY_DIR (I)
        STR     a2, [a1, #0xC8]         ; USBB1_ULPIPHY_NXT (I) + USBB1_ULPIPHY_DAT0 (IO)
        STR     a2, [a1, #0xCC]         ; USBB1_ULPIPHY_DAT2 (IO) + USBB1_ULPIPHY_DAT1 (IO)
        STR     a2, [a1, #0xD0]         ; USBB1_ULPIPHY_DAT4 (IO) + USBB1_ULPIPHY_DAT3 (IO)
        STR     a2, [a1, #0xD4]         ; USBB1_ULPIPHY_DAT6 (IO) + USBB1_ULPIPHY_DAT5 (IO)
        STRH    a2, [a1, #0xD8]         ; USBB1_ULPIPHY_DAT7 (IO)

        ; enable power to hub
        MOV     a1, #GPIO_HUB_POWER
        MOV     a2, #1
        BL      GPIOx_SetOutput

        ; Enable USBHOST TLL clocks
        LDR     a1, L4_ClockMan2_Log
        ADD     a1, a1, #L3INIT_CM2
        MOV     a2, #1
        STR     a2, [a1, #CM_L3INIT_HSUSBTLL_CLKCTRL]

        ; Enable external PHY clock for port 1
        LDR     a2, [a1, #CM_L3INIT_HSUSBHOST_CLKCTRL]
        ORR     a2, a2, #(3 << 24)      ; == (CLKSEL_UTMI_P2 | CLKSEL_UTMI_P1)
        BIC     a2, a2, #3
        ORR     a2, a2, #2              ; enable module
        STR     a2, [a1, #CM_L3INIT_HSUSBHOST_CLKCTRL]

        ; TLL soft reset
        LDR     a1, L4_USBTLL_Log
        MOV     a2, #2          ; SOFTRESET
        STR     a2, [a1, #USBTLL_SYSCONFIG]
5
        LDR     a2, [a1, #USBTLL_SYSSTATUS]
        TST     a2, #1          ; RESETDONE
        BEQ     %BT5

        ; Now configure UHH
        ; no auto-idle/standby (TODO - why?)
        LDR     a1, L4_USB_Host_Log
        LDR     a2, =((1 << 4) + (1 << 2))
        STR     a2, [a1, #UHH_SYSCONFIG]
        ; Configure for UPLI TTL mode port1 + port2
        ; P2: ULPI PHY, P1: ULPI PHY, INCR4/8/16 bursts enabled
        LDR     a2, =((0 << 18) + (0 << 16) + (1 << 4) + (1 << 3) + (1 << 2))
        STR     a2, [a1, #UHH_HOSTCONFIG]

        ; Success!


10
        Pull    "pc"

        ; a1 = interface #
        ; a2 = usbinfo ptr
        ; a3 = sizeof(usbinfo)
        ; Return sizeof(usbinfo) or 0 for no more devices
        ; If supplied size isn't large enough, only the controller type will be filled in
HAL_USBControllerInfo
        CMP     a1, #1
        MOVHI   a1, #0
        MOVHI   pc, lr
        BEQ     %FT10
        ; Fill in the usbinfo struct
        MOV     a1, #HALUSBControllerType_EHCI
        STR     a1, [a2, #HALUSBControllerInfo_Type]
        CMP     a3, #HALUSBControllerInfo_SizeOf
        MOV     a1, #HALUSBControllerInfo_SizeOf
        MOVLO   pc, lr
        ; EHCI did seem to work OK without forcing 32bit register access,
        ; but it is technically needed so I'll leave it set.
        MOV     a4, #HALUSBControllerFlag_32bit_Regs
        STR     a4, [a2, #HALUSBControllerInfo_Flags]
        LDR     a4, L4_USB_Host_Log
        ADD     a4, a4, #EHCI_BASE
        STR     a4, [a2, #HALUSBControllerInfo_HW]
        MOV     a4, #EHCI_IRQ
        STR     a4, [a2, #HALUSBControllerInfo_DevNo]
        MOV     pc, lr
10
        MOV     a1, #HALUSBControllerType_MUSBMHDRC
        STR     a1, [a2, #HALUSBControllerInfo_Type]
        CMP     a3, #HALUSBControllerInfo_SizeOf
        MOV     a1, #HALUSBControllerInfo_SizeOf
        MOVLO   pc, lr
        MOV     a4, #0
        STR     a4, [a2, #HALUSBControllerInfo_Flags]
        LDR     a4, L4_USB_OTG_Log
        STR     a4, [a2, #HALUSBControllerInfo_HW]
        MOV     a4, #MUSB_IRQ
        STR     a4, [a2, #HALUSBControllerInfo_DevNo]
        MOV     pc, lr

        END
@


1.7
log
@Don't bother providing even dummy implementations of USB port and overcurrent functions
As the flag bit in HAL_USBControllerInfo isn't set, no need to provide them.
Use symbols from Hdr:HALEntries when building the USB info.
No need for AASMFLAGS in the makefile.
Built, but not tested.

Version 0.37. Tagged as 'OMAP4-0_37'
@
text
@a40 1
        IMPORT  DebugHALPrintReg
@


1.6
log
@Add support for recent U-Boot versions
Detail:
  hdr/PRCM:
  - added further definitions (not listed in older TRMs)
  s/Audio:
  - configure all GPIO pads used by audio system
    (for supporting latest U-Boot 2014-7)
  s/Boot:
  - added overflow check for address range
  s/RAM:
  - added overflow check for address range
  - address comparison with unsigned arithmetic
  s/RTC:
  - added initialisation code and pad configuration for TWL6030 RTC
    (for supporting latest U-Boot 2014-07)
  s/SDIO:
  - added pad configuration for LEDs used by SDIO
    (for supporting latest U-Boot 2014-07)
  s/USB:
  - removed unused code parts
  - use defines for controller types
  s/Video:
  - added pad configuration for DVI framer pin
  - enable DSS power and clock domain and DSS specific clocks
  - activate thermal sensor clock
  - wait for activated module in VideoDevice_Activate
    (for supporting latest U-Boot 2014-07)
Admin:
  Submission from Willi Theiss
  Tested on Panda ES rev B3 (Willi), Panda rev A6 (myself)


Version 0.36. Tagged as 'OMAP4-0_36'
@
text
@a38 3
        EXPORT  HAL_USBPortPower
        EXPORT  HAL_USBPortStatus
        EXPORT  HAL_USBPortIRQ
d146 3
a148 3
        STR     a1, [a2, #USBINFO_TYPE]
        CMP     a3, #USBINFO_SIZEOF
        MOV     a1, #USBINFO_SIZEOF
d152 2
a153 2
        MOV     a4, #USBINFO_FLAG_32bit_Regs
        STR     a4, [a2, #USBINFO_FLAGS]
d156 1
a156 1
        STR     a4, [a2, #USBINFO_HW]
d158 1
a158 1
        STR     a4, [a2, #USBINFO_DEVNO]
d162 3
a164 3
        STR     a1, [a2, #USBINFO_TYPE]
        CMP     a3, #USBINFO_SIZEOF
        MOV     a1, #USBINFO_SIZEOF
d167 1
a167 1
        STR     a4, [a2, #USBINFO_FLAGS]
d169 1
a169 1
        STR     a4, [a2, #USBINFO_HW]
d171 1
a171 9
        STR     a4, [a2, #USBINFO_DEVNO]
        MOV     pc, lr


        ; These are unused for EHCI/MUSB
HAL_USBPortPower
HAL_USBPortStatus
HAL_USBPortIRQ
        MOV     a1, #-1
@


1.5
log
@  Replaced header file for licensing reasons
Detail:
  omap4_reg.h taken from FreeBSD projects/armv6/sys/arm/ti/omap4, trimmed to
  only include interrupt definitions, then updated so that symbol names and
  comments match Table 17.2 of the OMAP4460 TRM (SWPU235F) more closely - now
  the symbol names only differ in the prefix, and the absence of "IRQ"
  mid-string.  This was then translated very literally into objasm syntax to
  create hdr.omap4_reg, and used in place of hdr.irqs44xx.
Admin:
  Builds OK

Version 0.22. Tagged as 'OMAP4-0_22'
@
text
@a47 3
; USB PHY power is controlled via GPIO
;USB2_PHY_GPIO * 147  -> board config
USB2_PHY_Reset_delay * 10000 ; 10msec
d61 2
a93 10
  [ {FALSE}
        ; Linux does not do this
        ; set IO pins and O pins as output: GPIO_85, GPIO_88 .. GPIO_95
        LDR     a1, L4_GPIO3_Log
        LDR     a2, [a1, #GPIO_OE]
        BIC     a2, a2, #(0xFF << (88 - 64))
        BIC     a2, a2, #(1 << (85 - 64))
        STR     a2, [a1, #GPIO_OE]
  ]

d148 1
a148 1
        MOV     a1, #1 ; EHCI
d153 3
a155 1
        MOV     a4, #USBINFO_FLAG_32bit_Regs ; EHCI did seem to work OK without forcing 32bit register access, but it is technically needed so I'll leave it set.
d164 1
a164 1
        MOV     a1, #2 ; MUSBMHDRC
@


1.4
log
@Changes for OMAP4 HAL
hdr/GPIO: aligned columns
hdr/USB: added more USB related register definitions (OTG and USBPHY)
hdr/Video: global variable for preventing multiple inclusion renamed to its original
hdr/irqs44xx: interrupt numbers and naming according to latest OMAP44xx TRMs
hdr/omap4430: address correction for L4_USBPHY
s/Audio:
    changed recovering from error conditions
    disabled kludge for supporting non native samplerates (44.1 + 48k)
s/PRCM:
    removed unused function PRCM_GetFreqSel and related table
s/SDIO
    aligned columns
s/USB
    name change for OTG interrupt source

Part of a number of changes from Willi Theiss.
Build, but not tested.

Version 0.14. Tagged as 'OMAP4-0_14'
@
text
@d32 1
a32 1
        GET     hdr.irqs44xx
@


1.3
log
@Sanitise HAL_USBControllerInfo
Detail:
  s/USB - For valid controllers, HAL_USBControllerInfo now always returns the correct USB struct size and fills in the controller type. The rest of the buffer is filled in only if the supplied size is large enough. This allows for proper probing of controllers without knowing the required buffer sizes beforehand.
Admin:
  Builds, but untested at runtime
  (Code identical to OMAP3 HAL anyway)


Version 0.08. Tagged as 'OMAP4-0_08'
@
text
@d56 3
a58 3
OHCI_IRQ        *       OMAP44XX_IRQ_OHCI
EHCI_IRQ        *       OMAP44XX_IRQ_EHCI
MUSB_IRQ        *       OMAP44XX_IRQ_HS_USB_MC_N
@


1.2
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d151 2
a152 1
        ; Return sizeof(usbinfo) or 0 for fail
a153 3
        CMP     a3, #USBINFO_SIZEOF
        MOVNE   a1, #0
        MOVNE   pc, lr
d161 1
a161 7
        MOV     a1, #USBINFO_FLAG_32bit_Regs ; EHCI did seem to work OK without forcing 32bit register access, but it is technically needed so I'll leave it set.
        STR     a1, [a2, #USBINFO_FLAGS]
        LDR     a1, L4_USB_Host_Log
        ADD     a1, a1, #EHCI_BASE
        STR     a1, [a2, #USBINFO_HW]
        MOV     a1, #EHCI_IRQ
        STR     a1, [a2, #USBINFO_DEVNO]
d163 8
d175 1
a175 6
        MOV     a1, #0
        STR     a1, [a2, #USBINFO_FLAGS]
        LDR     a1, L4_USB_OTG_Log
        STR     a1, [a2, #USBINFO_HW]
        MOV     a1, #MUSB_IRQ
        STR     a1, [a2, #USBINFO_DEVNO]
d177 7
@


1.1
log
@Initial revision
@
text
@d16 31
a46 31
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Machine.<Machine>
	GET	Hdr:ImageSize.<ImageSize>
	$GetIO

	GET	Hdr:OSEntries
	GET	Hdr:HALEntries

	GET	hdr.omap4430
	GET	hdr.StaticWS
	GET	hdr.Timers
	GET	hdr.PRCM
	GET	hdr.USB
	GET	hdr.GPIO
	GET	hdr.irqs44xx

	AREA	|Asm$$Code|, CODE, READONLY, PIC

	EXPORT	USB_Init

	EXPORT	HAL_USBControllerInfo
	EXPORT	HAL_USBPortPower
	EXPORT	HAL_USBPortStatus
	EXPORT	HAL_USBPortIRQ

	IMPORT	HAL_CounterDelay
	IMPORT	DebugHALPrintReg
	IMPORT	GPIOx_SetAsOutput
	IMPORT	GPIOx_SetOutput
d53 2
a54 2
GPIO_HUB_NRESET	*	62
GPIO_HUB_POWER	*	1
d56 3
a58 3
OHCI_IRQ	*	OMAP44XX_IRQ_OHCI
EHCI_IRQ	*	OMAP44XX_IRQ_EHCI
MUSB_IRQ	*	OMAP44XX_IRQ_HS_USB_MC_N
d61 33
a93 33
	Push	"lr"
	; Initialise USB
	; This code is roughly the same as omap4_ehci_init() in the linux sources

	; disable the power to the usb hub prior to init
	MOV	a1, #GPIO_HUB_POWER
	MOV	a2, #0
	BL	GPIOx_SetAsOutput

	; reset phy+hub
	MOV	a1, #GPIO_HUB_NRESET
	MOV	a2, #0
	BL	GPIOx_SetAsOutput
	MOV	a1, #GPIO_HUB_NRESET
	MOV	a2, #1
	BL	GPIOx_SetOutput

	; usb_ehci_init()
	; initialise port 1 in EHCI_HCD_OMAP_MODE_PHY
	; setup_4430ehci_io_mux()
	LDR	a1, L4_Core_Log
	LDR	a2, =(L4_SYSCTRL_PADCONF_CORE - L4_Core)
	ADD	a1, a2, a1
	LDR	a2, =0x010C010C
	LDR	a3, =0x0004
	STRH	a2, [a1, #0xC2]		; USBB1_ULPIPHY_CLK (I)
	STRH	a3, [a1, #0xC4]		; USBB1_ULPIPHY_STP (O)
	STRH	a2, [a1, #0xC6]		; USBB1_ULPIPHY_DIR (I)
	STR	a2, [a1, #0xC8]		; USBB1_ULPIPHY_NXT (I) + USBB1_ULPIPHY_DAT0 (IO)
	STR	a2, [a1, #0xCC]		; USBB1_ULPIPHY_DAT2 (IO) + USBB1_ULPIPHY_DAT1 (IO)
	STR	a2, [a1, #0xD0]		; USBB1_ULPIPHY_DAT4 (IO) + USBB1_ULPIPHY_DAT3 (IO)
	STR	a2, [a1, #0xD4]		; USBB1_ULPIPHY_DAT6 (IO) + USBB1_ULPIPHY_DAT5 (IO)
	STRH	a2, [a1, #0xD8]		; USBB1_ULPIPHY_DAT7 (IO)
d96 7
a102 7
	; Linux does not do this
	; set IO pins and O pins as output: GPIO_85, GPIO_88 .. GPIO_95
	LDR	a1, L4_GPIO3_Log
	LDR	a2, [a1, #GPIO_OE]
	BIC	a2, a2, #(0xFF << (88 - 64))
	BIC	a2, a2, #(1 << (85 - 64))
	STR	a2, [a1, #GPIO_OE]
d105 22
a126 22
	; enable power to hub
	MOV	a1, #GPIO_HUB_POWER
	MOV	a2, #1
	BL	GPIOx_SetOutput

	; Enable USBHOST TLL clocks
	LDR	a1, L4_ClockMan2_Log
	ADD	a1, a1, #L3INIT_CM2
	MOV	a2, #1
	STR	a2, [a1, #CM_L3INIT_HSUSBTLL_CLKCTRL]

	; Enable external PHY clock for port 1
	LDR	a2, [a1, #CM_L3INIT_HSUSBHOST_CLKCTRL]
	ORR	a2, a2, #(3 << 24)	; == (CLKSEL_UTMI_P2 | CLKSEL_UTMI_P1)
	BIC	a2, a2, #3
	ORR	a2, a2, #2		; enable module
	STR	a2, [a1, #CM_L3INIT_HSUSBHOST_CLKCTRL]

	; TLL soft reset
	LDR	a1, L4_USBTLL_Log
	MOV	a2, #2		; SOFTRESET
	STR	a2, [a1, #USBTLL_SYSCONFIG]
d128 13
a140 13
	LDR	a2, [a1, #USBTLL_SYSSTATUS]
	TST	a2, #1		; RESETDONE
	BEQ	%BT5

	; Now configure UHH
	; no auto-idle/standby (TODO - why?)
	LDR	a1, L4_USB_Host_Log
	LDR	a2, =((1 << 4) + (1 << 2))
	STR	a2, [a1, #UHH_SYSCONFIG]
	; Configure for UPLI TTL mode port1 + port2
	; P2: ULPI PHY, P1: ULPI PHY, INCR4/8/16 bursts enabled
	LDR	a2, =((0 << 18) + (0 << 16) + (1 << 4) + (1 << 3) + (1 << 2))
	STR	a2, [a1, #UHH_HOSTCONFIG]
d142 1
a142 1
	; Success!
d146 1
a146 1
	Pull	"pc"
d148 4
a151 4
	; a1 = interface #
	; a2 = usbinfo ptr
	; a3 = sizeof(usbinfo)
	; Return sizeof(usbinfo) or 0 for fail
d153 19
a171 19
	CMP	a3, #USBINFO_SIZEOF
	MOVNE	a1, #0
	MOVNE	pc, lr
	CMP	a1, #1
	MOVHI	a1, #0
	MOVHI	pc, lr
	BEQ	%FT10
	; Fill in the usbinfo struct
	MOV	a1, #1 ; EHCI
	STR	a1, [a2, #USBINFO_TYPE]
	MOV	a1, #USBINFO_FLAG_32bit_Regs ; EHCI did seem to work OK without forcing 32bit register access, but it is technically needed so I'll leave it set.
	STR	a1, [a2, #USBINFO_FLAGS]
	LDR	a1, L4_USB_Host_Log
	ADD	a1, a1, #EHCI_BASE
	STR	a1, [a2, #USBINFO_HW]
	MOV	a1, #EHCI_IRQ
	STR	a1, [a2, #USBINFO_DEVNO]
	MOV	a1, #USBINFO_SIZEOF
	MOV	pc, lr
d173 10
a182 10
	MOV	a1, #2 ; MUSBMHDRC
	STR	a1, [a2, #USBINFO_TYPE]
	MOV	a1, #0
	STR	a1, [a2, #USBINFO_FLAGS]
	LDR	a1, L4_USB_OTG_Log
	STR	a1, [a2, #USBINFO_HW]
	MOV	a1, #MUSB_IRQ
	STR	a1, [a2, #USBINFO_DEVNO]
	MOV	a1, #USBINFO_SIZEOF
	MOV	pc, lr
d185 1
a185 1
	; These are unused for EHCI/MUSB
d189 2
a190 2
	MOV	a1, #-1
	MOV	pc, lr
d192 1
a192 1
	END
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
