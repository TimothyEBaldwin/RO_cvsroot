head	1.8;
access;
symbols
	OMAP4-0_60:1.8
	OMAP4-0_59-1_52_2_3:1.8
	OMAP4-0_59:1.8
	OMAP4-0_58:1.8
	OMAP4-0_57:1.8
	OMAP4-0_56:1.8
	OMAP4-0_55:1.8
	OMAP4-0_54-1_52_2_2:1.8
	OMAP4-0_54:1.8
	OMAP4-0_53:1.8
	OMAP4-0_52-1_52_2_1:1.8
	SMP:1.8.0.2
	SMP_bp:1.8
	OMAP4-0_52:1.8
	OMAP4-0_51:1.8
	OMAP4-0_50:1.8
	OMAP4-0_49:1.8
	OMAP4-0_48:1.8
	OMAP4-0_47:1.8
	OMAP4-0_46:1.7
	OMAP4-0_45:1.7
	OMAP4-0_44:1.7
	OMAP4-0_43:1.6
	OMAP4-0_42:1.6
	OMAP4-0_41:1.6
	OMAP4-0_40:1.6
	OMAP4-0_39:1.6
	OMAP4-0_38:1.6
	OMAP4-0_37:1.6
	OMAP4-0_36:1.6
	OMAP4-0_35:1.6
	OMAP4-0_34:1.6
	OMAP4-0_33:1.6
	OMAP4-0_32:1.6
	OMAP4-0_31:1.6
	OMAP4-0_30:1.6
	OMAP4-0_29:1.6
	OMAP4-0_28:1.6
	OMAP4-0_27:1.5
	OMAP4-0_26:1.5
	OMAP4-0_25:1.5
	OMAP4-0_24:1.5
	OMAP4-0_23:1.5
	OMAP4-0_22:1.5
	OMAP4-0_21:1.5
	OMAP4-0_20:1.5
	OMAP4-0_19:1.5
	OMAP4-0_18:1.5
	OMAP4-0_17:1.5
	OMAP4-0_16:1.5
	OMAP4-0_15:1.5
	OMAP4-0_14:1.5
	OMAP4-0_13:1.5
	OMAP4-0_12:1.5
	OMAP4-0_11:1.5
	OMAP4-0_10:1.5
	OMAP4-0_09:1.5
	OMAP4-0_08:1.5
	OMAP4-0_07:1.5
	OMAP4-0_06:1.3
	OMAP4-0_05:1.2
	OMAP4-0_04:1.2
	OMAP4-0_03:1.2
	OMAP4-0_02:1.2
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2015.09.01.21.22.46;	author rool;	state Exp;
branches;
next	1.7;
commitid	wG3IDGBgTDRpYAzy;

1.7
date	2015.04.08.07.33.53;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	ziZUYwsqx4235Lgy;

1.6
date	2014.03.08.16.55.57;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	tpkfnWqSEp73VUrx;

1.5
date	2012.04.29.17.59.58;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	l513GfgtlbPA3N2w;

1.4
date	2012.03.25.11.42.58;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	4FjnaYBzkPTA6gYv;

1.3
date	2012.03.25.10.28.47;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	wcxutstPODhaHfYv;

1.2
date	2011.10.19.14.04.03;	author bavison;	state Exp;
branches;
next	1.1;
commitid	wCOk0IJpLoeUXXDv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.8
log
@Minor OMAP4 tidying
omap4430.hdr/Debug,s:
  Define a dummy symbol so when debug is enabled there aren't conflicting IMPORT and EXPORTs.
PRCM.s:
  Fill in missing frequency.
Boot.s:
  Update comment to match HAL function names.
NVMemory.s:
  Add offset to account for FATLoadedCMOS not being at offset 0.
Top.s:
  Remove unused Post header. Replace DCI with instruction now objasm supports it.
Submission from Willi Theiss.

Version 0.47. Tagged as 'OMAP4-0_47'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:HALSize.<HALSize>

        GET     Hdr:MEMM.VMSAv6

        GET     Hdr:Proc
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.omap4430
        GET     hdr.StaticWS
        GET     hdr.UART
        GET     hdr.SDRC
        GET     hdr.GPIO

        AREA    |!!!ROMStart|, CODE, READONLY, PIC

        IMPORT  rom_checkedout_ok
        EXPORT  HAL_Base
        IMPORT  HAL_DebugTX

; Using the DMA controller to relocate the ROM image is much faster than doing it with the CPU
                GBLL Use_DMA_Copy
Use_DMA_Copy    SETL {TRUE}
 
        MACRO
        CallOSM $entry, $reg
        LDR     ip, [v8, #$entry*4]
        MOV     lr, pc
        ADD     pc, v8, ip
        MEND

        ; Jump table used to select board config on startup
        ; See board.s for ordering of configs, and therefore what entry corresponds to what board
HAL_Base
        BL      selectconfig
        BL      selectconfig
        BL      selectconfig
        BL      selectconfig
        BL      selectconfig
        BL      selectconfig
JumpTableEnd
        ASSERT  . - HAL_Base < 0x60
        %       0x60 - (. - HAL_Base)
ROMsize
        DCD     0                       ; patched in by build system
        B       selectconfig_linux      ; offset &64 - for booting as a uImage/Linux kernel.
                                        ; Uses Linux machine type ID to select board config.

        ENTRY
selectconfig
        ; Get pointer to board config
        ADR     v1, HAL_Base+4
        SUB     v1, lr, v1
        ADR     a1, BoardConfigTable
        MOV     a2, #BoardConfig_Size>>2
        MLA     v1, a2, v1, a1
foundconfig
        ; v1 = board config
        MSR     CPSR_c, #F32_bit+I32_bit+SVC32_mode ; Get into SVC mode now, so we can write to sb without much fear of losing it (we may have been in FIQ)
 [ Debug
        ; Announce ourselves if debug
        ADR     v2, HelloWorld
        MOV     sb, v1
10      LDRB    a1, [v2], #1
        CMP     a1, #0
        ADRNE   lr, %BT10
        BNE     HAL_DebugTX
        ADD     v2, v1, #BoardConfig_Name
10      LDRB    a1, [v2], #1
        CMP     a1, #0
        ADRNE   lr, %BT10
        BNE     HAL_DebugTX
        MOV     a1, #13
        BL      HAL_DebugTX
        MOV     a1, #10
        BL      HAL_DebugTX
 ]
        ; Now copy the config to SRAM
        ; We'll assume that the L3 interconnect has been correctly configured to give us access
        LDR     sb, =IntSRAM_Base
        MOV     a2, #BoardConfig_Size
10      SUBS    a2, a2, #4
        LDR     a3, [v1, a2]
        STR     a3, [sb, a2]
        BGT     %BT10
 [ DebugTiming
        ADD     sp, sb, #32768 ; Temp stack for debug code
        ; Ensure debug UART FIFO is enabled (assuming UART 3)
        MOV     a1, #0
        STRB    a1, UARTFCRSoftCopy+2
        MOV     a1, #2
        STRB    a1, [sb, #BoardConfig_NumUART] ; Hide UART from RO
        MOV     a2, #1
        IMPORT  HAL_UARTFIFOEnable
        BL      HAL_UARTFIFOEnable
        DebugTimeNoMMU a1, "@@ "
 ]
        ; Now do common init
        B       restart

 [ Debug
HelloWorld DCB "OMAP4 HAL init",13,10,"Board config=",0
        ALIGN
 ]

        ; Entry point for masquerading as a Linux kernel
        ; r0=0
        ; r1=machine type ID
        ; r2=ptr to tag list (linux/include/asm/setup.h)
selectconfig_linux
        ADR     v1, BoardConfigTable_End-BoardConfig_Size
        ADR     a3, BoardConfigTable
10
        LDR     a1, [v1, #BoardConfig_MachID]
        CMP     a1, a2
        CMPNE   v1, a3 ; If we can't find a config, abort and use default? (i.e. beagleboard)
        BEQ     foundconfig
        SUB     v1, v1, #BoardConfig_Size
        B       %BT10

        LTORG
        GET     board.s
        ASSERT  ((JumpTableEnd-HAL_Base)/4) >= (BoardConfigTable_End-BoardConfigTable)/BoardConfig_Size ; If this fires, we need a bigger jump table!

; ------------------------------------------------------------------------------
; Perform some Cortex-A9 specific CPU setup
; Then start looking for RAM
; In: sb = board config ptr
restart
        DebugChar a3,a4,48
        MSR     CPSR_c, #F32_bit+I32_bit+SVC32_mode
        DebugChar a3,a4,49

        ADRL    v1, HAL_Base + OSROM_HALSize    ; v1 -> RISC OS image

        LDR     v8, [v1, #OSHdr_Entries]
        ADD     v8, v8, v1                      ; v8 -> RISC OS entry table

        ; Ensure CPU is set up
        MOV     a1, #0
        CallOSM OS_InitARM
        DebugChar a3,a4,50

        ; Initialise RAM
        BL      init_ram

        ; The first 4K of the first registered block of RAM is used by RISC OS's init code,
        ; and also contains the stack
        ; To keep things simple and safe, we'll relocate the HAL and OS image to the top end
        ; of RAM
        ; Although with the pandaboard we know we'll be booted from RAM, this code has been
        ; written so that it should work if running from ROM

        ; First, identify the top end of RAM
        ; Then check if we intersect it
        ; If we do, first copy ourselves down
        ; Then copy ourselves up

 [ Use_DMA_Copy
        ; We'll use DMA for extra speed, so start by initialising the DMA controller
        LDR     v5, =L4_sDMA
;       MOV     v1, #2          ; this bit is reserved on OMAP4430 (!?)
;       STR     v1, [v5, #DMA4_OCP_SYSCONFIG]
5
        LDR     v1, [v5, #DMA4_SYSSTATUS]
        TST     v1, #DMA4_SYSSTATUS_RESETDONE
        BEQ     %BT5
        ; Set a sensible FIFO budget (as per SDMACReset)
        LDR     a2, =((1 << DMA4_GCR_ARBITRAION_RATE_SHIFT) + 128)
        STR     a2, [v5, #DMA4_GCR]
        ; Configure channel 0 for the right settings
        ADD     v5, v5, #DMA4_i
        MOV     v1, #0          ; Disable channel linking
        STR     v1, [v5, #DMA4_CLNK_CTRLi]
        MOV     v1, #DMA4_CICR_LAST_IE
        STR     v1, [v5, #DMA4_CICRi] ; frame end interrupt enabled
        ; 32bit elements, 64 byte bursts with packing, last write non-posted
        LDR     v1, =(DMA4_CSDP_DATA_TYPE_32BIT + DMA4_CSDP_SRC_PACKED + DMA4_CSDP_DST_BURST_EN_64B + DMA4_CSDP_DST_PACKED + DMA4_CSDP_DST_BURST_EN_64B + DMA4_CSDP_WRITE_MODE_LAST_WRNP)
        STR     v1, [v5, #DMA4_CSDPi]
        MOV     v1, #1
        STR     v1, [v5, #DMA4_CFNi] ; 1 frame
 ] ; Use_DMA_Copy

relocate_code
        DebugChar a1,a2,66
        BL      get_end_of_ram
        DebugChar v1,v2,67

        ; How big are we?
        ADRL    v1, HAL_Base + OSROM_HALSize
        LDR     v2, [v1, #OSHdr_ImageSize]
        LDR     lr, [v1, #OSHdr_Flags]
        TST     lr, #OSHdrFlag_SupportsCompression
        LDRNE   lr, [v1, #OSHdr_CompressedSize]
        MOVEQ   lr, v2
        SUB     v1, v1, #OSROM_HALSize ; Start of HAL
        ADD     v2, v2, #OSROM_HALSize ; Size of HAL+OS
        ADD     lr, lr, #OSROM_HALSize ; Size of compressed HAL+OS
        ADD     v3, v1, lr ; End of OS
        MOV     v4, a1 ; End of RAM
        SUB     v5, v4, v2 ; New start address of HAL
        CMP     v1, v5
        BEQ     %FT10 ; No copy needed
        CMP     v1, v4
        BHI     %FT20 ; We're in some ROM above RAM. OK to continue with copy.
        CMP     v3, v5
        BLS     %FT20 ; We're in some ROM/RAM below our copy destination. OK to continue with copy.
        ; Else we currently overlap the area we want to copy ourselves into.
        SUB     v5, v1, lr ; Copy the HAL+OS to just before itself
20
 [ Use_DMA_Copy
        ; Transfer everything in one DMA frame; this gives us a max ROM size of 64MB-4 bytes
        LDR     a3, =(L4_sDMA + DMA4_i)
        LDR     a1, [a3, #DMA4_CSRi]
        STR     a1, [a3, #DMA4_CSRi] ; Clear status register
        MOV     a1, lr, LSR #2
        STR     a1, [a3, #DMA4_CENi]
        STR     v5, [a3, #DMA4_CDSAi]
        STR     v1, [a3, #DMA4_CSSAi]
        ; Enable channel with post-increment source & destination, prefetch
        LDR     a1, =(DMA4_CCR_ENABLE + DMA4_CCR_SRC_AMODE_POST_INC + DMA4_CCR_DST_AMODE_POST_INC + DMA4_CCR_PREFETCH)
        STR     a1, [a3, #DMA4_CCRi]
        ; Wait for copy to complete
30
        LDR     a1, [a3, #DMA4_CSRi]
        TST     a1, #DMA4_CICR_LAST_IE
        BEQ     %BT30
        ; Make doubly sure that it's finished by checking WR_ACTIVE/RD_ACTIVE
40
        LDR     a1, [a3, #DMA4_CCRi]
        TST     a1, #(DMA4_CCR_RD_ACTIVE + DMA4_CCR_WR_ACTIVE)
        BNE     %BT40
 |
        MOV     a1, v5
        MOV     a2, v1 ; Copy source
        MOV     a3, lr
30
        LDR     a4, [a2], #4
        SUBS    a3, a3, #4
        STR     a4, [a1], #4
        BGT     %BT30
 ] ; Use_DMA_Copy
        ; Invalidate I-cache, branch predictors
        MOV     a1, #0
        MCR     p15, 0, a1, c7, c5, 0
        MCR     p15, 0, a1, c7, c5, 6
        DSB     SY ; Wait for I-cache invalidation to complete
        ISB     SY ; Wait for branch predictor invalidation to complete?
        DebugChar a1,a2,68
        ; Jump to our new copy
        ADR     a1, relocate_code ; Keep things simple by just running through the same code again
        SUB     a2, v5, v1
        ADD     a1, a1, a2 ; relocate our branch target
        ADD     v8, v8, a2 ; Update OS entry table ptr
        MOV     pc, a1
10
        ; Copy completed OK.
        ; v2 = size of HAL+OS
        ; v4 = end of OS/RAM
        ; v5 = start of HAL
        ; v8 = OS entry table ptr
        DebugChar a1,a2,69
        DebugTimeNoMMU a1, "ROM relocated @@ "
        ; Clear RAM up to v5
        MOV     a1, v5
        BL      clear_ram

        DebugChar a1,a2,70
        DebugTimeNoMMU a1, "RAM cleared @@ "

; TODO - NEON seems to be on by default, need to work out how to turn it off before I can test code to turn it on!
;       ; Enable power to the NEON unit, if present
;       LDR     a1, =&4800244C ; 'control OMAP status register'
;       LDR     a1, [a1]
;       TST     a1, #1<<4
;       BNE     %FT10
;;      ; NEON is available, make sure it's turned on
;       ; Enable CP10/CP11 access
;       MRC     p15, 0, a1, c1, c0, 2
;       ORR     a1, a1, #&F<<20
;       MCR     p15, 0, a1, c1, c0, 2
;       ISB     SY
;       ; Now enable the unit
;       MOV     a1, #1<<30 ; EN bit
;       VMSR    FPEXC, a1

        B       rom_checkedout_ok

        GET     RAM.s
        LTORG
        
        END
@


1.7
log
@Turn off debug
Anyone using the serial port for other peripheral uses might get confused if some HAL debug comes out on it.
Move the IMPORTs into a header so we don't end up with lots of unresolved symbols with Debug {FALSE}.
Built, but not tested.

Version 0.44. Tagged as 'OMAP4-0_44'
@
text
@a30 1
        GET     hdr.Post
d41 2
a42 2
             GBLL Use_DMA_Copy
Use_DMA_Copy SETL {TRUE}
d201 1
a201 1
 ]
d261 1
a261 1
 ]
d304 1
a304 1
;       DCI     &EEE80A10 ; VMSR FPEXC, a1
@


1.6
log
@Use DSB/ISB directly
Objasm 4 supports ARMv7 opcodes, and this HAL is only every for ARMv7.
Built, but not tested. Submission from Willi Theiss.

Version 0.28. Tagged as 'OMAP4-0_28'
@
text
@a39 2
        IMPORT  DebugHALPrint
        IMPORT  DebugHALPrintReg
@


1.5
log
@Comment correction and reinstate some lost spaces.
Submission from Willi Theiss.
Retagged as OMAP4-0_07.
@
text
@a32 1
        GET     hdr.Copro15ops
d269 2
a270 2
        myDSB ; Wait for I-cache invalidation to complete
        myISB ; Wait for branch predictor invalidation to complete?
d304 1
a304 1
;       DCI     &F57FF06F ; ISB {SY}
@


1.4
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@d47 1
a47 1

@


1.3
log
@Updates to OMAP4 port.
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.omap4430
    added DebugTiming macros
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.hdr.StaticWS
    added variable NVMemoryFound
    removed variables for NVRAM over SD card support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Audio
    changes for better sound support
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.board
    adjusted max pixel-clock rate
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Boot
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.KdbScan
    added debug timing
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.NVMemory
    EEPROM support over JTAG port (EMU0/EMU1)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.RAM
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Top
    use DMA for copying ROM at top of RAM
    added debug timing
    support for compressed images (as in OMAP3)
OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.s.Video
    added debug timing OMAP4Dev.castle.RiscOS.Sources.HAL.OMAP4.c.CLib
    reverted to version without SD card NVRAM support

Changes from Willi Theiss.
Assembles without errors, but not tested here.

Version 0.06. Tagged as 'OMAP4-0_06'
@
text
@d16 27
a42 27
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Machine.<Machine>
	GET	Hdr:HALSize.<HALSize>

	GET	Hdr:MEMM.VMSAv6

	GET	Hdr:Proc
	GET	Hdr:OSEntries
	GET	Hdr:HALEntries

	GET	hdr.omap4430
	GET	hdr.StaticWS
	GET	hdr.UART
	GET	hdr.Post
	GET	hdr.SDRC
	GET	hdr.Copro15ops
	GET	hdr.GPIO

	AREA	|!!!ROMStart|, CODE, READONLY, PIC

	IMPORT	rom_checkedout_ok
	EXPORT	HAL_Base
	IMPORT	HAL_DebugTX
	IMPORT	DebugHALPrint
	IMPORT	DebugHALPrintReg
d45 2
a46 2
		GBLL	Use_DMA_Copy
Use_DMA_Copy	SETL	{TRUE}
d48 6
a53 6
	MACRO
	CallOSM $entry, $reg
	LDR	ip, [v8, #$entry*4]
	MOV	lr, pc
	ADD	pc, v8, ip
	MEND
d55 2
a56 2
	; Jump table used to select board config on startup
	; See board.s for ordering of configs, and therefore what entry corresponds to what board
d58 6
a63 6
	BL	selectconfig
	BL	selectconfig
	BL	selectconfig
	BL	selectconfig
	BL	selectconfig
	BL	selectconfig
d65 2
a66 2
	ASSERT	. - HAL_Base < 0x60
	%	0x60 - (. - HAL_Base)
d68 3
a70 3
	DCD	0			; patched in by build system
	B	selectconfig_linux	; offset &64 - for booting as a uImage/Linux kernel.
					; Uses Linux machine type ID to select board config.
d72 1
a72 1
	ENTRY
d74 6
a79 6
	; Get pointer to board config
	ADR	v1, HAL_Base+4
	SUB	v1, lr, v1
	ADR	a1, BoardConfigTable
	MOV	a2, #BoardConfig_Size>>2
	MLA	v1, a2, v1, a1
d81 2
a82 2
	; v1 = board config
	MSR	CPSR_c, #F32_bit+I32_bit+SVC32_mode ; Get into SVC mode now, so we can write to sb without much fear of losing it (we may have been in FIQ)
d84 16
a99 16
	; Announce ourselves if debug
	ADR	v2, HelloWorld
	MOV	sb, v1
10	LDRB	a1, [v2], #1
	CMP	a1, #0
	ADRNE	lr, %BT10
	BNE	HAL_DebugTX
	ADD	v2, v1, #BoardConfig_Name
10	LDRB	a1, [v2], #1
	CMP	a1, #0
	ADRNE	lr, %BT10
	BNE	HAL_DebugTX
	MOV	a1, #13
	BL	HAL_DebugTX
	MOV	a1, #10
	BL	HAL_DebugTX
d101 8
a108 8
	; Now copy the config to SRAM
	; We'll assume that the L3 interconnect has been correctly configured to give us access
	LDR	sb, =IntSRAM_Base
	MOV	a2, #BoardConfig_Size
10	SUBS	a2, a2, #4
	LDR	a3, [v1, a2]
	STR	a3, [sb, a2]
	BGT	%BT10
d110 10
a119 10
	ADD	sp, sb, #32768 ; Temp stack for debug code
	; Ensure debug UART FIFO is enabled (assuming UART 3)
	MOV	a1, #0
	STRB	a1, UARTFCRSoftCopy+2
	MOV	a1, #2
	STRB	a1, [sb, #BoardConfig_NumUART] ; Hide UART from RO
	MOV	a2, #1
	IMPORT	HAL_UARTFIFOEnable
	BL	HAL_UARTFIFOEnable
	DebugTimeNoMMU a1, "@@ "
d121 2
a122 2
	; Now do common init
	B	restart
d126 1
a126 1
	ALIGN
d129 4
a132 4
	; Entry point for masquerading as a Linux kernel
	; r0=0
	; r1=machine type ID
	; r2=ptr to tag list (linux/include/asm/setup.h)
d134 2
a135 2
	ADR	v1, BoardConfigTable_End-BoardConfig_Size
	ADR	a3, BoardConfigTable
d137 10
a146 10
	LDR	a1, [v1, #BoardConfig_MachID]
	CMP	a1, a2
	CMPNE	v1, a3 ; If we can't find a config, abort and use default? (i.e. beagleboard)
	BEQ	foundconfig
	SUB	v1, v1, #BoardConfig_Size
	B	%BT10

	LTORG
	GET	board.s
	ASSERT	((JumpTableEnd-HAL_Base)/4) >= (BoardConfigTable_End-BoardConfigTable)/BoardConfig_Size ; If this fires, we need a bigger jump table!
d153 28
a180 28
	DebugChar a3,a4,48
	MSR	CPSR_c, #F32_bit+I32_bit+SVC32_mode
	DebugChar a3,a4,49

	ADRL	v1, HAL_Base + OSROM_HALSize	; v1 -> RISC OS image

	LDR	v8, [v1, #OSHdr_Entries]
	ADD	v8, v8, v1			; v8 -> RISC OS entry table

	; Ensure CPU is set up
	MOV	a1, #0
	CallOSM	OS_InitARM
	DebugChar a3,a4,50

	; Initialise RAM
	BL	init_ram

	; The first 4K of the first registered block of RAM is used by RISC OS's init code,
	; and also contains the stack
	; To keep things simple and safe, we'll relocate the HAL and OS image to the top end
	; of RAM
	; Although with the pandaboard we know we'll be booted from RAM, this code has been
	; written so that it should work if running from ROM

	; First, identify the top end of RAM
	; Then check if we intersect it
	; If we do, first copy ourselves down
	; Then copy ourselves up
d183 4
a186 4
	; We'll use DMA for extra speed, so start by initialising the DMA controller
	LDR	v5, =L4_sDMA
;	MOV	v1, #2		; this bit is reserved on OMAP4430 (!?)
;	STR	v1, [v5, #DMA4_OCP_SYSCONFIG]
d188 18
a205 18
	LDR	v1, [v5, #DMA4_SYSSTATUS]
	TST	v1, #DMA4_SYSSTATUS_RESETDONE
	BEQ	%BT5
	; Set a sensible FIFO budget (as per SDMACReset)
	LDR	a2, =((1 << DMA4_GCR_ARBITRAION_RATE_SHIFT) + 128)
	STR	a2, [v5, #DMA4_GCR]
	; Configure channel 0 for the right settings
	ADD	v5, v5, #DMA4_i
	MOV	v1, #0		; Disable channel linking
	STR	v1, [v5, #DMA4_CLNK_CTRLi]
	MOV	v1, #DMA4_CICR_LAST_IE
	STR	v1, [v5, #DMA4_CICRi] ; frame end interrupt enabled
	; 32bit elements, 64 byte bursts with packing, last write non-posted
	LDR	v1, =(DMA4_CSDP_DATA_TYPE_32BIT + DMA4_CSDP_SRC_PACKED + DMA4_CSDP_DST_BURST_EN_64B + DMA4_CSDP_DST_PACKED + DMA4_CSDP_DST_BURST_EN_64B + DMA4_CSDP_WRITE_MODE_LAST_WRNP)
	STR	v1, [v5, #DMA4_CSDPi]
	MOV	v1, #1
	STR	v1, [v5, #DMA4_CFNi] ; 1 frame
 ] ; Use_DMA_Copy
d208 25
a232 25
	DebugChar a1,a2,66
	BL	get_end_of_ram
	DebugChar v1,v2,67

	; How big are we?
	ADRL	v1, HAL_Base + OSROM_HALSize
	LDR	v2, [v1, #OSHdr_ImageSize]
	LDR	lr, [v1, #OSHdr_Flags]
	TST	lr, #OSHdrFlag_SupportsCompression
	LDRNE	lr, [v1, #OSHdr_CompressedSize]
	MOVEQ	lr, v2
	SUB	v1, v1, #OSROM_HALSize ; Start of HAL
	ADD	v2, v2, #OSROM_HALSize ; Size of HAL+OS
	ADD	lr, lr, #OSROM_HALSize ; Size of compressed HAL+OS
	ADD	v3, v1, lr ; End of OS
	MOV	v4, a1 ; End of RAM
	SUB	v5, v4, v2 ; New start address of HAL
	CMP	v1, v5
	BEQ	%FT10 ; No copy needed
	CMP	v1, v4
	BHI	%FT20 ; We're in some ROM above RAM. OK to continue with copy.
	CMP	v3, v5
	BLS	%FT20 ; We're in some ROM/RAM below our copy destination. OK to continue with copy.
	; Else we currently overlap the area we want to copy ourselves into.
	SUB	v5, v1, lr ; Copy the HAL+OS to just before itself
d235 12
a246 12
	; Transfer everything in one DMA frame; this gives us a max ROM size of 64MB-4 bytes
	LDR	a3, =(L4_sDMA + DMA4_i)
	LDR	a1, [a3, #DMA4_CSRi]
	STR	a1, [a3, #DMA4_CSRi] ; Clear status register
	MOV	a1, lr, LSR #2
	STR	a1, [a3, #DMA4_CENi]
	STR	v5, [a3, #DMA4_CDSAi]
	STR	v1, [a3, #DMA4_CSSAi]
	; Enable channel with post-increment source & destination, prefetch
	LDR	a1, =(DMA4_CCR_ENABLE + DMA4_CCR_SRC_AMODE_POST_INC + DMA4_CCR_DST_AMODE_POST_INC + DMA4_CCR_PREFETCH)
	STR	a1, [a3, #DMA4_CCRi]
	; Wait for copy to complete
d248 4
a251 4
	LDR	a1, [a3, #DMA4_CSRi]
	TST	a1, #DMA4_CICR_LAST_IE
	BEQ	%BT30
	; Make doubly sure that it's finished by checking WR_ACTIVE/RD_ACTIVE
d253 3
a255 3
	LDR	a1, [a3, #DMA4_CCRi]
	TST	a1, #(DMA4_CCR_RD_ACTIVE + DMA4_CCR_WR_ACTIVE)
	BNE	%BT40
d257 3
a259 3
	MOV	a1, v5
	MOV	a2, v1 ; Copy source
	MOV	a3, lr
d261 18
a278 18
	LDR	a4, [a2], #4
	SUBS	a3, a3, #4
	STR	a4, [a1], #4
	BGT	%BT30
 ] ; Use_DMA_Copy
	; Invalidate I-cache, branch predictors
	MOV	a1, #0
	MCR	p15, 0, a1, c7, c5, 0
	MCR	p15, 0, a1, c7, c5, 6
	myDSB ; Wait for I-cache invalidation to complete
	myISB ; Wait for branch predictor invalidation to complete?
	DebugChar a1,a2,68
	; Jump to our new copy
	ADR	a1, relocate_code ; Keep things simple by just running through the same code again
	SUB	a2, v5, v1
	ADD	a1, a1, a2 ; relocate our branch target
	ADD	v8, v8, a2 ; Update OS entry table ptr
	MOV	pc, a1
d280 10
a289 10
	; Copy completed OK.
	; v2 = size of HAL+OS
	; v4 = end of OS/RAM
	; v5 = start of HAL
	; v8 = OS entry table ptr
	DebugChar a1,a2,69
	DebugTimeNoMMU a1, "ROM relocated @@ "
	; Clear RAM up to v5
	MOV	a1, v5
	BL	clear_ram
d291 2
a292 2
	DebugChar a1,a2,70
	DebugTimeNoMMU a1, "RAM cleared @@ "
d295 21
a315 21
;	; Enable power to the NEON unit, if present
;	LDR	a1, =&4800244C ; 'control OMAP status register'
;	LDR	a1, [a1]
;	TST	a1, #1<<4
;	BNE	%FT10
;;	; NEON is available, make sure it's turned on
;	; Enable CP10/CP11 access
;	MRC	p15, 0, a1, c1, c0, 2
;	ORR	a1, a1, #&F<<20
;	MCR	p15, 0, a1, c1, c0, 2
;	DCI	&F57FF06F ; ISB {SY}
;	; Now enable the unit
;	MOV	a1, #1<<30 ; EN bit
;	DCI	&EEE80A10 ; VMSR FPEXC, a1

	B	rom_checkedout_ok

	GET	RAM.s
	LTORG

	END
@


1.2
log
@  Minor additions to OMAP4 HAL
Detail:
  s.board: adjusted max pixel-clock rate
  s.Top: changed to match rev 1.15 of HAL.OMAP3.s.Top
Admin:
  Updates from Willi Theiss

Version 0.02. Tagged as 'OMAP4-0_02'
@
text
@d41 6
d109 12
d182 25
d215 4
d221 2
a222 1
	ADD	v3, v1, v2 ; End of OS
d227 1
d232 1
a232 1
	SUB	v5, v1, v2 ; Copy the HAL+OS to just before itself
d234 23
d259 1
a259 1
	MOV	a3, v2
d265 1
d286 1
d292 1
@


1.1
log
@Initial revision
@
text
@a137 67
	; Invalidate L1 I/D
	MOV	a1, #0			; set up for MCR
	MCR	p15, 0, a1, c8, c7, 0	; invalidate TLBs
	DebugChar a3,a4,50
	MCR	p15, 0, a1, c7, c5, 0	; invalidate icache
	DebugChar a3,a4,51
	MCR	p15, 0, a1, c7, c5, 6	; invalidate BP array
;	myISB
	DebugChar a3,a4,52

	; disable MMU stuff and caches
	MRC	p15, 0, a1, c1, c0, 0
	BIC	a1, a1, #&00002000	; clear bit 13 (--V-)
	BIC	a1, a1, #&00000007	; clear bits 2:0 (-CAM)
	ORR	a1, a1, #&00000002	; set bit 1 (--A-) Align
	ORR	a1, a1, #&00000400	; set bit 10 (-SW--) Enable SWP/SWPB instruction
	ORR	a1, a1, #&00000800	; set bit 11 (Z---) BTB
	ORR	a1, a1, #&00001000	; set bit 12 (I) I-cache
	MCR	p15, 0, a1, c1, c0, 0	; MMU, caches etc off
	myISB
	DebugChar a3,a4,53

	; Invalidate data caches. To do this we must query their sizes
	; The register describes up to 8 cache levels, so to provide some future-proofing
	; I might as well implement a full cache clean routine here
	MRC	p15, 1, a1, c0, c0, 1 ; Cache level ID register
	DebugChar a3,a4,54
	BIC	a1, a1, #&FF000000 ; Discard unification/coherency bits
	MOV	a2, #0 ; Current cache level
20
	DebugChar a3,a4,49
	ANDS	a3, a1, #7 ; Get flags
	BEQ	%FT10 ; Cache clean complete
	MCR	p15, 2, a2, c0, c0, 0 ; Program cache size selection register
	myISB
	MRC	p15, 1, a3, c0, c0, 0 ; Get size info
	AND	v1, a3, #&7 ; log2(Line size)-2
	BIC	a3, a3, #&F0000007 ; Clear flags & line size
	MOV	v2, a3, LSL #19 ; Number of ways-1 in upper 10 bits
	MOV	v3, a3, LSR #13 ; Number of sets-1 in lower 15 bits
	; Way number needs to be packed right up at the high end of the data word; shift it up
	CLZ	a4, v2
	MOV	v2, v2, LSL a4
	; Set number needs to start at log2(Line size)+2
	MOV	v3, v3, LSL #4 ; Start at bit 4
	MOV	v3, v3, LSL v1 ; Start at log2(Line size)+2
	; Now calculate the offset numbers we will use to increment sets & ways
	BIC	v4, v2, v2, LSL #1 ; Way increment
	BIC	v5, v3, v3, LSL #1 ; Set increment
	; Now we can finally clean this cache!
	ORR	a3, a2, v3 ; Current way (0), set (max), and level
30
	MCR	p15, 0, a3, c7, c6, 2 ; Invalidate
	ADDS	a3, a3, v4 ; Increment way
	BCC	%BT30 ; Overflow will occur once ways are enumerated
	TST	a3, v3 ; Are set bits all zero?
	SUBNE	a3, a3, v5 ; No, so decrement set and loop around again
	BNE	%BT30
	; This cache is now clean. Move on to the next level.
	DebugChar a3,a4,50
	ADD	a2, a2, #2
	MOVS	a1, a1, LSR #3
	BNE	%BT20
10
	myDSB
	myISB
	DebugChar a1,a2,51
d144 4
a147 13
	ARM_read_control a1
	; We assume that ARMs with an I cache can have it enabled while the MMU is off.
	[ :LNOT:CacheOff
	ORR   a1, a1, #MMUC_I
	]
	ARM_write_control a1			; whoosh
	myISB

	; Keep a soft copy of the CR in a banked register (R13_und)
	MSR	CPSR_c, #F32_bit+I32_bit+UND32_mode
	MOV	sp, a1
	; Switch into SVC32 mode (we may have been in SVC26 before).
	MSR	CPSR_c, #F32_bit+I32_bit+SVC32_mode
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
