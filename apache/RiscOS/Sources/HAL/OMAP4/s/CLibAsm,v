head	1.2;
access;
symbols
	OMAP4-0_60:1.2
	OMAP4-0_59-1_52_2_3:1.2
	OMAP4-0_59:1.2
	OMAP4-0_58:1.2
	OMAP4-0_57:1.2
	OMAP4-0_56:1.2
	OMAP4-0_55:1.2
	OMAP4-0_54-1_52_2_2:1.2
	OMAP4-0_54:1.2
	OMAP4-0_53:1.2
	OMAP4-0_52-1_52_2_1:1.2
	SMP:1.2.0.2
	SMP_bp:1.2
	OMAP4-0_52:1.2
	OMAP4-0_51:1.2
	OMAP4-0_50:1.2
	OMAP4-0_49:1.2
	OMAP4-0_48:1.2
	OMAP4-0_47:1.2
	OMAP4-0_46:1.2
	OMAP4-0_45:1.2
	OMAP4-0_44:1.2
	OMAP4-0_43:1.2
	OMAP4-0_42:1.2
	OMAP4-0_41:1.2
	OMAP4-0_40:1.2
	OMAP4-0_39:1.2
	OMAP4-0_38:1.2
	OMAP4-0_37:1.2
	OMAP4-0_36:1.2
	OMAP4-0_35:1.2
	OMAP4-0_34:1.2
	OMAP4-0_33:1.2
	OMAP4-0_32:1.2
	OMAP4-0_31:1.2
	OMAP4-0_30:1.2
	OMAP4-0_29:1.2
	OMAP4-0_28:1.2
	OMAP4-0_27:1.2
	OMAP4-0_26:1.2
	OMAP4-0_25:1.2
	OMAP4-0_24:1.2
	OMAP4-0_23:1.2
	OMAP4-0_22:1.2
	OMAP4-0_21:1.2
	OMAP4-0_20:1.2
	OMAP4-0_19:1.2
	OMAP4-0_18:1.2
	OMAP4-0_17:1.2
	OMAP4-0_16:1.2
	OMAP4-0_15:1.2
	OMAP4-0_14:1.2
	OMAP4-0_13:1.2
	OMAP4-0_12:1.2
	OMAP4-0_11:1.2
	OMAP4-0_10:1.2
	OMAP4-0_09:1.2
	OMAP4-0_08:1.2
	OMAP4-0_07:1.2
	OMAP4-0_06:1.1.1.1
	OMAP4-0_05:1.1.1.1
	OMAP4-0_04:1.1.1.1
	OMAP4-0_03:1.1.1.1
	OMAP4-0_02:1.1.1.1
	OMAP4-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.03.25.11.42.57;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	4FjnaYBzkPTA6gYv;

1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	M3eV6gzJuoHHMezv;

1.1.1.1
date	2011.09.12.19.01.15;	author bavison;	state Exp;
branches;
next	;
commitid	M3eV6gzJuoHHMezv;


desc
@@


1.2
log
@Bulk expand of tabs.
Helps to make tracking changes between OMAP3 and OMAP4 less eye watering, but otherwise functionally the same as 0.06.

Version 0.07. Tagged as 'OMAP4-0_07'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  |__rt_sdiv|

|__rt_sdiv|
; Signed divide of a2 by a1: returns quotient in a1, remainder in a2
; Quotient is truncated (rounded towards zero).
; Sign of remainder = sign of dividend.
; Destroys a3, a4 and ip
; Negates dividend and divisor, then does an unsigned divide; signs
; get sorted out again at the end.

        ANDS    a3, a1, #&80000000
        RSBMI   a1, a1, #0
        EORS    a4, a3, a2, ASR #32
        RSBCS   a2, a2, #0
        RSBS    ip, a1, a2, LSR #3
        BCC     s_sh2
        RSBS    ip, a1, a2, LSR #8
        BCC     s_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&FF000000
        RSBS    ip, a1, a2, LSR #4
        BCC     s_sh3
        RSBS    ip, a1, a2, LSR #8
        BCC     s_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&00FF0000
        RSBS    ip, a1, a2, LSR #8
        MOVCS   a1, a1, LSL #8
        ORRCS   a3, a3, #&0000FF00
        RSBS    ip, a1, a2, LSR #4
        BCC     s_sh3
        RSBS    ip, a1, #0
        BCS     dividebyzero
s_loop  MOVCS   a1, a1, LSR #8
s_sh7   RSBS    ip, a1, a2, LSR #7
        SUBCS   a2, a2, a1, LSL #7
        ADC     a3, a3, a3
s_sh6   RSBS    ip, a1, a2, LSR #6
        SUBCS   a2, a2, a1, LSL #6
        ADC     a3, a3, a3
s_sh5   RSBS    ip, a1, a2, LSR #5
        SUBCS   a2, a2, a1, LSL #5
        ADC     a3, a3, a3
s_sh4   RSBS    ip, a1, a2, LSR #4
        SUBCS   a2, a2, a1, LSL #4
        ADC     a3, a3, a3
s_sh3   RSBS    ip, a1, a2, LSR #3
        SUBCS   a2, a2, a1, LSL #3
        ADC     a3, a3, a3
s_sh2   RSBS    ip, a1, a2, LSR #2
        SUBCS   a2, a2, a1, LSL #2
        ADC     a3, a3, a3
s_sh1   RSBS    ip, a1, a2, LSR #1
        SUBCS   a2, a2, a1, LSL #1
        ADC     a3, a3, a3
s_sh0   RSBS    ip, a1, a2
        SUBCS   a2, a2, a1
        ADCS    a3, a3, a3
        BCS     s_loop
        EORS    a1, a3, a4, ASR #31
        ADD     a1, a1, a4, LSR #31
        RSBCS   a2, a2, #0
        MOV     pc, lr

dividebyzero
        B       panic

        EXPORT  |__rt_udiv|
|__rt_udiv|
; Unsigned divide of a2 by a1: returns quotient in a1, remainder in a2
; Destroys a3 and ip

        MOV     a3, #0
        RSBS    ip, a1, a2, LSR #3
        BCC     u_sh2
        RSBS    ip, a1, a2, LSR #8
        BCC     u_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&FF000000
        RSBS    ip, a1, a2, LSR #4
        BCC     u_sh3
        RSBS    ip, a1, a2, LSR #8
        BCC     u_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&00FF0000
        RSBS    ip, a1, a2, LSR #8
        MOVCS   a1, a1, LSL #8
        ORRCS   a3, a3, #&0000FF00
        RSBS    ip, a1, a2, LSR #4
        BCC     u_sh3
        RSBS    ip, a1, #0
        BCS     dividebyzero
u_loop  MOVCS   a1, a1, LSR #8
u_sh7   RSBS    ip, a1, a2, LSR #7
        SUBCS   a2, a2, a1, LSL #7
        ADC     a3, a3, a3
u_sh6   RSBS    ip, a1, a2, LSR #6
        SUBCS   a2, a2, a1, LSL #6
        ADC     a3, a3, a3
u_sh5   RSBS    ip, a1, a2, LSR #5
        SUBCS   a2, a2, a1, LSL #5
        ADC     a3, a3, a3
u_sh4   RSBS    ip, a1, a2, LSR #4
        SUBCS   a2, a2, a1, LSL #4
        ADC     a3, a3, a3
u_sh3   RSBS    ip, a1, a2, LSR #3
        SUBCS   a2, a2, a1, LSL #3
        ADC     a3, a3, a3
u_sh2   RSBS    ip, a1, a2, LSR #2
        SUBCS   a2, a2, a1, LSL #2
        ADC     a3, a3, a3
u_sh1   RSBS    ip, a1, a2, LSR #1
        SUBCS   a2, a2, a1, LSL #1
        ADC     a3, a3, a3
u_sh0   RSBS    ip, a1, a2
        SUBCS   a2, a2, a1
        ADCS    a3, a3, a3
        BCS     u_loop
        MOV     a1, a3
        MOV     pc, lr

; Fast unsigned divide by 10: dividend in a1
; Returns quotient in a1, remainder in a2

        EXPORT  |__rt_udiv10|
|__rt_udiv10|
        SUB     a2, a1, #10
        SUB     a1, a1, a1, LSR #2
        ADD     a1, a1, a1, LSR #4
        ADD     a1, a1, a1, LSR #8
        ADD     a1, a1, a1, LSR #16
        MOV     a1, a1, LSR #3
        ADD     a3, a1, a1, LSL #2
        SUBS    a2, a2, a3, LSL #1
        ADDPL   a1, a1, #1
        ADDMI   a2, a2, #10
        MOV     pc, lr

        ; Divide a uint64_t by 10, returning both quotient and remainder
        ; In:  (a1,a2)
        ; Out: quotient (a1,a2), remainder (a3,a4)
        EXPORT  _ll_udiv10
_ll_udiv10
        STR     a1, [sp, #-4]!
        ; Multiply by 0.6 (= &0.999 recurring)
        ; and subtract multiplication by 0.5 (LSR #1).
        ; Ignore fractional parts for now.
        LDR     ip, =&99999999
        UMULL   a4, a3, a1, ip
        UMULL   a4, ip, a2, ip
        MOVS    a2, a2, LSR #1
        MOVS    a1, a1, RRX
        ADCS    a1, a1, #0
        ADC     a2, a2, #0
        SUBS    a1, a4, a1
        SBC     a2, ip, a2
        ADDS    a1, a1, ip
        ADC     a2, a2, #0
        ADDS    a1, a1, a3
        ADC     a2, a2, #0
        ; It can be shown mathematically that this is an underestimate
        ; of the true quotient by up to 2.5. Compensate by detecting
        ; over-large remainders.
40      MOV     ip, #10
        MUL     a3, a1, ip ; quotient * 10 (MSW is unimportant)
        LDR     a4, [sp], #4
        SUB     a3, a4, a3 ; remainder between 0 and 25
        ; Bring the remainder back within range.
        ; For a number x <= 68, x / 10 == (x * 13) >> 7
        MOV     a4, #13
        MUL     a4, a3, a4
        MOV     a4, a4, LSR #7
        ADDS    a1, a1, a4
        ADC     a2, a2, #0
        MUL     a4, ip, a4
        SUB     a3, a3, a4
        MOV     a4, #0
        MOV     pc, lr

        ; Logical-shift a 64-bit number right
        ; In:  (a1,a2),a3
        ; Out: (a1,a2)
        EXPORT  _ll_ushift_r
_ll_ushift_r
        RSBS    ip, a3, #32
        MOVHI   a1, a1, LSR a3
        ORRHI   a1, a1, a2, LSL ip
        MOVHI   a2, a2, LSR a3
        MOVHI   pc, lr
        SUB     ip, a3, #32
        MOV     a1, a2, LSR ip
        MOV     a2, #0
        MOV     pc, lr

        ; Multiply a 64-bit number by a uint32_t
        ; In:  (a1,a2),a3
        ; Out: (a1,a2)
        EXPORT _ll_mullu
_ll_mullu
        UMULL   a1, lr, a3, a1
        MLA     a2, a3, a2, lr
        MOV     pc, lr

        IMPORT  sprintf
        IMPORT  printf
        EXPORT  |_sprintf|
        EXPORT  |_printf|

_sprintf
        B       sprintf

_printf
        B       printf

        ; Compare two uint64_t numbers, or test two int64_t numbers for equality
        ; In:  (a1,a2),(a3,a4)
        ; Out: Z set if equal, Z clear if different
        ;      C set if unsigned higher or same, C clear if unsigned lower
        ;      all registers preserved
        EXPORT  _ll_cmpu
_ll_cmpu
        CMP     a2, a4
        CMPEQ   a1, a3
        MOV     pc, lr

        EXPORT  memset
memset
        ORR     ip, a1, a3
        TST     ip, #3
        BEQ     memset_wordaligned
        MOV     a4, a1
        TEQ     a3, #0
10      STRNEB  a2, [a4], #1
        SUBS    a3, a3, #1
        BNE     %BT10
        MOV     pc, lr

memset_wordaligned
        AND     a2, a2, #&FF
        ORR     a2, a2, a2, LSL #8
        ORR     a2, a2, a2, LSL #16
        ; fall through

        EXPORT  _memset
_memset
        MOV     a4, a1
        TEQ     a3, #0
10      STRNE   a2, [a4], #4
        SUBS    a3, a3, #4
        BNE     %BT10
        MOV     pc, lr

        EXPORT  panic
panic
        BKPT    &1234
        B       panic

        END
@


1.1
log
@Initial revision
@
text
@a14 1
	AREA	|Asm$$Code|, CODE, READONLY, PIC
d16 3
a18 1
	EXPORT	|__rt_sdiv|
d28 53
a80 53
	ANDS	a3, a1, #&80000000
	RSBMI	a1, a1, #0
	EORS	a4, a3, a2, ASR #32
	RSBCS	a2, a2, #0
	RSBS	ip, a1, a2, LSR #3
	BCC	s_sh2
	RSBS	ip, a1, a2, LSR #8
	BCC	s_sh7
	MOV	a1, a1, LSL #8
	ORR	a3, a3, #&FF000000
	RSBS	ip, a1, a2, LSR #4
	BCC	s_sh3
	RSBS	ip, a1, a2, LSR #8
	BCC	s_sh7
	MOV	a1, a1, LSL #8
	ORR	a3, a3, #&00FF0000
	RSBS	ip, a1, a2, LSR #8
	MOVCS	a1, a1, LSL #8
	ORRCS	a3, a3, #&0000FF00
	RSBS	ip, a1, a2, LSR #4
	BCC	s_sh3
	RSBS	ip, a1, #0
	BCS	dividebyzero
s_loop	MOVCS	a1, a1, LSR #8
s_sh7	RSBS	ip, a1, a2, LSR #7
	SUBCS	a2, a2, a1, LSL #7
	ADC	a3, a3, a3
s_sh6	RSBS	ip, a1, a2, LSR #6
	SUBCS	a2, a2, a1, LSL #6
	ADC	a3, a3, a3
s_sh5	RSBS	ip, a1, a2, LSR #5
	SUBCS	a2, a2, a1, LSL #5
	ADC	a3, a3, a3
s_sh4	RSBS	ip, a1, a2, LSR #4
	SUBCS	a2, a2, a1, LSL #4
	ADC	a3, a3, a3
s_sh3	RSBS	ip, a1, a2, LSR #3
	SUBCS	a2, a2, a1, LSL #3
	ADC	a3, a3, a3
s_sh2	RSBS	ip, a1, a2, LSR #2
	SUBCS	a2, a2, a1, LSL #2
	ADC	a3, a3, a3
s_sh1	RSBS	ip, a1, a2, LSR #1
	SUBCS	a2, a2, a1, LSL #1
	ADC	a3, a3, a3
s_sh0	RSBS	ip, a1, a2
	SUBCS	a2, a2, a1
	ADCS	a3, a3, a3
	BCS	s_loop
	EORS	a1, a3, a4, ASR #31
	ADD	a1, a1, a4, LSR #31
	RSBCS	a2, a2, #0
	MOV	pc, lr
d83 1
a83 1
	B	panic
d85 1
a85 1
	EXPORT	|__rt_udiv|
d90 48
a137 48
	MOV	a3, #0
	RSBS	ip, a1, a2, LSR #3
	BCC	u_sh2
	RSBS	ip, a1, a2, LSR #8
	BCC	u_sh7
	MOV	a1, a1, LSL #8
	ORR	a3, a3, #&FF000000
	RSBS	ip, a1, a2, LSR #4
	BCC	u_sh3
	RSBS	ip, a1, a2, LSR #8
	BCC	u_sh7
	MOV	a1, a1, LSL #8
	ORR	a3, a3, #&00FF0000
	RSBS	ip, a1, a2, LSR #8
	MOVCS	a1, a1, LSL #8
	ORRCS	a3, a3, #&0000FF00
	RSBS	ip, a1, a2, LSR #4
	BCC	u_sh3
	RSBS	ip, a1, #0
	BCS	dividebyzero
u_loop	MOVCS	a1, a1, LSR #8
u_sh7	RSBS	ip, a1, a2, LSR #7
	SUBCS	a2, a2, a1, LSL #7
	ADC	a3, a3, a3
u_sh6	RSBS	ip, a1, a2, LSR #6
	SUBCS	a2, a2, a1, LSL #6
	ADC	a3, a3, a3
u_sh5	RSBS	ip, a1, a2, LSR #5
	SUBCS	a2, a2, a1, LSL #5
	ADC	a3, a3, a3
u_sh4	RSBS	ip, a1, a2, LSR #4
	SUBCS	a2, a2, a1, LSL #4
	ADC	a3, a3, a3
u_sh3	RSBS	ip, a1, a2, LSR #3
	SUBCS	a2, a2, a1, LSL #3
	ADC	a3, a3, a3
u_sh2	RSBS	ip, a1, a2, LSR #2
	SUBCS	a2, a2, a1, LSL #2
	ADC	a3, a3, a3
u_sh1	RSBS	ip, a1, a2, LSR #1
	SUBCS	a2, a2, a1, LSL #1
	ADC	a3, a3, a3
u_sh0	RSBS	ip, a1, a2
	SUBCS	a2, a2, a1
	ADCS	a3, a3, a3
	BCS	u_loop
	MOV	a1, a3
	MOV	pc, lr
d142 1
a142 1
	EXPORT	|__rt_udiv10|
d144 16
a159 16
	SUB	a2, a1, #10
	SUB	a1, a1, a1, LSR #2
	ADD	a1, a1, a1, LSR #4
	ADD	a1, a1, a1, LSR #8
	ADD	a1, a1, a1, LSR #16
	MOV	a1, a1, LSR #3
	ADD	a3, a1, a1, LSL #2
	SUBS	a2, a2, a3, LSL #1
	ADDPL	a1, a1, #1
	ADDMI	a2, a2, #10
	MOV	pc, lr

	; Divide a uint64_t by 10, returning both quotient and remainder
	; In:  (a1,a2)
	; Out: quotient (a1,a2), remainder (a3,a4)
	EXPORT	_ll_udiv10
d161 40
a200 40
	STR	a1, [sp, #-4]!
	; Multiply by 0.6 (= &0.999 recurring)
	; and subtract multiplication by 0.5 (LSR #1).
	; Ignore fractional parts for now.
	LDR	ip, =&99999999
	UMULL	a4, a3, a1, ip
	UMULL	a4, ip, a2, ip
	MOVS	a2, a2, LSR #1
	MOVS	a1, a1, RRX
	ADCS	a1, a1, #0
	ADC	a2, a2, #0
	SUBS	a1, a4, a1
	SBC	a2, ip, a2
	ADDS	a1, a1, ip
	ADC	a2, a2, #0
	ADDS	a1, a1, a3
	ADC	a2, a2, #0
	; It can be shown mathematically that this is an underestimate
	; of the true quotient by up to 2.5. Compensate by detecting
	; over-large remainders.
40	MOV	ip, #10
	MUL	a3, a1, ip ; quotient * 10 (MSW is unimportant)
	LDR	a4, [sp], #4
	SUB	a3, a4, a3 ; remainder between 0 and 25
	; Bring the remainder back within range.
	; For a number x <= 68, x / 10 == (x * 13) >> 7
	MOV	a4, #13
	MUL	a4, a3, a4
	MOV	a4, a4, LSR #7
	ADDS	a1, a1, a4
	ADC	a2, a2, #0
	MUL	a4, ip, a4
	SUB	a3, a3, a4
	MOV	a4, #0
	MOV	pc, lr

	; Logical-shift a 64-bit number right
	; In:  (a1,a2),a3
	; Out: (a1,a2)
	EXPORT	_ll_ushift_r
d202 14
a215 14
	RSBS	ip, a3, #32
	MOVHI	a1, a1, LSR a3
	ORRHI	a1, a1, a2, LSL ip
	MOVHI	a2, a2, LSR a3
	MOVHI	pc, lr
	SUB	ip, a3, #32
	MOV	a1, a2, LSR ip
	MOV	a2, #0
	MOV	pc, lr

	; Multiply a 64-bit number by a uint32_t
	; In:  (a1,a2),a3
	; Out: (a1,a2)
	EXPORT _ll_mullu
d217 8
a224 8
	UMULL	a1, lr, a3, a1
	MLA	a2, a3, a2, lr
	MOV	pc, lr

	IMPORT	sprintf
	IMPORT	printf
	EXPORT	|_sprintf|
	EXPORT	|_printf|
d227 1
a227 1
	B	sprintf
d230 1
a230 1
	B	printf
d232 6
a237 6
	; Compare two uint64_t numbers, or test two int64_t numbers for equality
	; In:  (a1,a2),(a3,a4)
	; Out: Z set if equal, Z clear if different
	;      C set if unsigned higher or same, C clear if unsigned lower
	;      all registers preserved
	EXPORT	_ll_cmpu
d239 3
a241 3
	CMP	a2, a4
	CMPEQ	a1, a3
	MOV	pc, lr
d243 1
a243 1
	EXPORT	memset
d245 9
a253 9
	ORR	ip, a1, a3
	TST	ip, #3
	BEQ	memset_wordaligned
	MOV	a4, a1
	TEQ	a3, #0
10	STRNEB	a2, [a4], #1
	SUBS	a3, a3, #1
	BNE	%BT10
	MOV	pc, lr
d256 4
a259 4
	AND	a2, a2, #&FF
	ORR	a2, a2, a2, LSL #8
	ORR	a2, a2, a2, LSL #16
	; fall through
d261 1
a261 1
	EXPORT	_memset
d263 6
a268 6
	MOV	a4, a1
	TEQ	a3, #0
10	STRNE	a2, [a4], #4
	SUBS	a3, a3, #4
	BNE	%BT10
	MOV	pc, lr
d270 1
a270 1
	EXPORT	panic
d272 2
a273 2
	BKPT	&1234
	B	panic
d275 1
a275 1
	END
@


1.1.1.1
log
@  Initial import of OMAP4 HAL
Detail:
  Target platform is the Pandaboard, based on the TI OMAP4 SoC.
  Port is not yet complete, in particular, audio is not yet working.
Admin:
  Submission from Willi Theiß
@
text
@@
