head	1.5;
access;
symbols
	DebugLib-0_72:1.5
	DebugLib-0_71:1.5
	DebugLib-0_70:1.5
	DebugLib-0_69:1.5
	DebugLib-0_68:1.5
	DebugLib-0_67:1.5
	DebugLib-0_66:1.5
	DebugLib-0_65:1.5
	DebugLib-0_64:1.5
	RO_5_07:1.5
	DebugLib-0_63:1.5
	DebugLib-0_62:1.5
	DebugLib-0_61:1.5
	DebugLib-0_60:1.4
	DebugLib-0_59:1.4
	DebugLib-0_58:1.4
	DebugLib-0_57:1.4
	dellis_autobuild_BaseSW:1.4
	DebugLib-0_56:1.4
	DebugLib-0_55:1.4
	DebugLib-0_54:1.4
	DebugLib-0_53:1.4
	DebugLib-0_52:1.4
	DebugLib-0_51:1.4
	DebugLib-0_50:1.4
	DebugLib-0_49:1.4
	sbrodie_sedwards_16Mar2000:1.4
	DebugLib-0_48:1.4
	DebugLib-0_47:1.4
	DebugLib-0_46:1.3
	dcotton_autobuild_BaseSW:1.5
	DebugLib-0_45:1.3
	DebugLib-0_44:1.3
	DebugLib-0_43:1.3
	DebugLib-0_42:1.3
	DebugLib-0_41:1.3
	DebugLib-0_40:1.3
	DebugLib-0_39:1.3
	DebugLib-0_38:1.3
	DebugLib-0_33-1_28_2_1:1.2
	DebugLib-0_37:1.2
	DebugLib-0_36:1.2
	DebugLib-0_35:1.2
	DebugLib-0_34:1.2
	nturton_DebugLib-0_24:1.2
	DebugLib-0_33:1.2
	DebugLib-0_32:1.2
	DebugLib-0_31:1.2
	DebugLib-0_30:1.2
	DebugLib-0_29:1.2
	DebugLib-0_28:1.2
	DebugLib-0_27:1.2
	DebugLib-0_26:1.2
	DebugLib-0_25:1.2
	DebugLib-0_24:1.2
	DebugLib-0_23:1.2
	DebugLib-0_22:1.2
	DebugLib-0_21:1.2
	DebugLib-0_20:1.2
	DebugLib-0_19:1.2
	DebugLib-0_18:1.2
	DebugLib-0_17:1.2
	DebugLib-0_16:1.2
	DebugLib-0_15:1.2
	DebugLib-0_14:1.2
	DebugLib-0_13:1.2
	DebugLib-0_12:1.2
	DebugLib-0_11:1.2
	DebugLib-0_10:1.1;
locks; strict;
comment	@# @;


1.5
date	2001.09.17.10.53.32;	author jberanek;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.21.10.56.46;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	99.05.26.13.19.53;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	98.09.15.14.31.05;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.09.04.17.19.08;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  Updated Copyrights, tidied comment header blocks
Detail:
  Updated Copyright messages to show range of years, up to 2001...a bit
 late in the year for that...

  Tidied a few file header comment blocks.

Admin:
  Built on RiscPC.


Version 0.61. Tagged as 'DebugLib-0_61'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************************/
/* File:    serial_lib.h                                                  */
/* Purpose: C interface to Dual Serial module                             */
/*                                                                        */
/* Copyright [1999-2001] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#ifndef serial_lib_h
#define serial_lib_h


/* =============================================================================
 * Include header files
 */

#include "kernel.h"

/* =============================================================================
 * Define constants
 */

/* Filenames for serial streams, and access priviledges */
#define SerialPort_o  "Devices:$.Serial"
#define SerialPort_1  "Devices:$.Serial1"
#define SerialPort_2  "Devices:$.Serial2"

#define Serial_Input  (0x4F)
#define Serial_Output (0xCF)


/* Reason codes */
#define OS_Args_IOCtl    0x09  /* New reason code for SWI OS_Args */
#define DeviceCall_IOCtl 0x0E  /* New reason code for SWI DeviceFS_CallDevice */


/* Serial IOCtl reason codes */
enum
{
  IOCtl_baud_rate = 1,
  IOCtl_data_format,
  IOCtl_handshaking,
  IOCtl_buffer_size,
  IOCtl_buffer_threshold,
  IOCtl_control_lines,
  IOCtl_fifo_trigger_level,
  IOCtl_enumerate_baud_rates,
  IOCtl_baud_rate_from_index
};

/* Bit masks for reading/writing data length */
#define data_length_5 (0x00000005)
#define data_length_6 (0x00000006)
#define data_length_7 (0x00000007)
#define data_length_8 (0x00000008)

/* Bit masks for reading/writing number of start/stop bits */
#define stop_bits_1 (0x00000100)
#define stop_bits_2 (0x00000200)

/* Bit masks for reading/writing parity */
#define no_parity   (0x00000000)
#define even_parity (0x00010000)
#define odd_parity  (0x00020000)

/* Bit masks for reading/writing handshake status */
#define no_handshake       (0x00000000)
#define rts_cts_handshake  (0x00000001)
#define xon_xoff_handshake (0x00000002)
#define dtr_dsr_handshake  (0x00000003)

/* Bit masks for reading/writing control lines */
#define ctrl_line_DTR   (0x00000001)
#define ctrl_line_RTS   (0x00000002)
#define ctrl_line_CTS   (0x00010000)
#define ctrl_line_DSR   (0x00020000)
#define ctrl_line_RI    (0x00040000)
#define ctrl_line_DCD   (0x00080000)
#define ctrl_line_FIFOs (0x00100000)

/* Bit masks to set data read/write flag */
#define read_flag  (0x01)
#define write_flag (0x02)


/* =============================================================================
 * Declare new types
 */

/* IOCtl block */
typedef struct
{
  unsigned int reason    : 16; /* ioctl reason code */
  unsigned int group	 : 8;  /* ioctl group code */
  unsigned int reserved	 : 6;  /* should be zero */
  unsigned int read	 : 1;  /* read flag */
  unsigned int write	 : 1;  /* write flag */
  unsigned int data;	       /* data */
} ioctl_t;


/* =============================================================================
 * Declare function prototypes
 */

/*
 * Open stream on specified device.
 *
 * In: filename - filename of device to open stream on
 *     rights - RiscOS file access rights, SERIAL_INPUT or SERIAL_OUTPUT
 *
 * Ret: file handle of stream or 0 for failure
 *
 */
int debug_serial_lib_open_stream(char *filename, int rights);

/*
 * Close an open stream.
 *
 * In: handle - handle previously returned from serial_open_stream
 *
 */
void debug_serial_lib_close_stream(int handle);

/*
 * Perform a serial ioctl on an open stream.
 *
 * In: handle - handle previously returned from serial_open_stream
 *     ioctl_block - pointer to populated ioctl control block
 *
 * Ret: ioctl_block->data
 *
 * Contents of IOCtl control block will have been modifed depending on the
 * state of the write flag.
 *
 * Some IOCtls will only perform operations on the stream specified. others
 * will affect the general state of the serial port, ie DTR flag.
 *
 */
unsigned int debug_serial_lib_ioctl(int handle, ioctl_t *ioctl_block);

/*
 * Read a block of data from an open stream.
 *
 * In: handle - handle previously returned from serial_open_stream
 *     data_block - area to copy data to
 *     size - maximum size of data_block area
 *
 * Ret: amount of data copied into data_block area, -1 for error.
 *
 * If there is more than size bytes of data in stream then size bytes are
 * copied. otherwise all the data is copied.
 *
 */
int debug_serial_lib_read_stream(int handle, char *data_block, int size);

/*
 * Reads a single byte from an open stream.
 *
 * In: handle - handle previously returned from serial_open_stream
 *
 * Ret: byte of data, -1 for error or no data present.
 *
 */
int debug_serial_lib_read_byte(int handle);

/*
 * Writes a block of data to an open stream.
 *
 * In: handle - handle previously returned from serial_open_stram
 *     data_block - area to copy data from
 *     size - amount of data in data_block area
 *
 * Ret: Amount of data copied, -1 for error
 *
 * If there is more than size bytes of free space in stream, then size bytes
 * are written to the stream. Otherwise as much data as will fit will be
 * written.
 *
 */
int debug_serial_lib_write_stream(int handle, char *data_block, int size);

/*
 * Writes a single byte to an open stream.
 *
 * In: handle - handle previously returned from serial_open_stram
 *     data - byte to write
 *
 * Ret: 1 for success, -1 for error
 *
 */
int debug_serial_lib_write_byte(int handle, char data);

/*
 * Returns the number of characters in an input buffer and the amount of free
 * space in an output buffer.
 *
 * In: handle - handle previously returned from serial_open_stream
 *
 */
int debug_serial_lib_size(int handle);

/*
 * Perform a serial IOCtl call
 */
extern _kernel_oserror* debug_serial_lib_osargs_ioctl (int serial_file, int reason, int group, int flags,
                                                   unsigned int data_in, unsigned int *const data_out);

/*
 * Write a string to an open stream
 *
 * In: handle - handle previously returned from serial_open_stream
 *     string - string to write
 *
 */
void debug_serial_lib_write_str(int handle, char* string);

#endif

/* End of serial_lib.h */
@


1.4
log
@  Tidy-up
Detail:
  Stewart's checkin about LibVersion reminded me I'd done some tidying
  (including the LibVersion thing) and not checked it in.  So here it is.

  Tidied Makefile, added standard headers to all the c and h files,
  including the regulation copyright message.

  Changed options.c so that it fits the coding style of the rest of
  DebugLib (naughty Stewart).

  Improved "strdup" routine.

  Moved stripdepend call into Makefile.

Admin:
  Built and tested.


Version 0.47. Tagged as 'DebugLib-0_47'
@
text
@d15 12
a26 14
/************************************************************************/
/* File:    serial_lib.h                                                */
/* Purpose: C interface to Dual Serial module                           */
/* Author:  S.B. Forrest (based on code by R.W. Buckley)                */
/* History: 28-May-97 : SBF : Created                                   */
/*                                                                      */
/* Copyright [1999] Pace Micro Technology PLC.  All rights reserved.    */
/*                                                                      */
/* The copyright in this material is owned by Pace Micro Technology PLC */
/* ("Pace").  This material is regarded as a highly confidential trade  */
/* secret of Pace.  It may not be reproduced, used, sold or in any      */
/* other way exploited or transferred to any third party without the    */
/* prior written permission of Pace.                                    */
/************************************************************************/
@


1.3
log
@ * Continued tidy-up of DebugLib:

 * All DebugLib functions now namespaced, they all start debug_<filename>_
  (except the functions in debug.c which are debug_).

 * Device specific #defines etc moved into device specific header files,
   e.g. debugit.h

 * Moved taskname prefixing to a central location, moved timestamping here
   also, added area/level prefixing, and tidied up this prefixing to make
   sure it looks good on all the possible debug devices.

 * Can now do any debuglib function to any debug device, including trace
   output, this hasn't been the case for a while.

 * Added new option, to set whether you want to prefix all debug lines
   with the area/level pair specified in dprintf, dfprintf etc.  Added
   new function to set this option.  debug_set_area_level_prefix ()

 * remotedb output now uses new "raw" output mode added to remotedb in
   version 0.06.  _DebugLib now requires remotedb version >= 0.06_

 * Added new test cases into CLI_App test harness, and changed a few things
   in TestMod.

 * Added Memcheck misc block registration into buffering code, which allows
   buffering to be used on the DebugLib Memcheck build.

 * Added lots of new function names into the always_ignore field which is
   used to tell trace which functions to ignore.  It seems that some the
   internet libraries have function names emebedded, which causes horrible
   loops when using DebugLib to output trace info to remotedb.  Also added
   debug_* and remote_debug_*

 * Added StrongHelp topics for ddumpbuf, debug_output_buffer_* and
   debug_set_area_level_prefix.  Updated the "Setting up the library"
   section.

 * Checked with all the debug devices except TML and serial.


Version 0.38. Tagged as 'DebugLib-0_38'
@
text
@d15 14
a28 5
/* File:    serial_lib.h
 * Purpose: C interface to Dual Serial module
 * Author:  S.B. Forrest (based on code by R.W. Buckley)
 * History: 28-May-97 : SBF : Created
 */
@


1.2
log
@Somehow the serial_lib header file got corrupted when it got copied to
  the Unix domain for CVS checkin
Rectified this by checking in the proper header file

Version 0.11. Tagged as 'DebugLib-0_11'
@
text
@d127 1
a127 1
int serial_open_stream(char *filename, int rights);
d135 1
a135 1
void serial_close_stream(int handle);
d152 1
a152 1
unsigned int serial_ioctl(int handle, ioctl_t *ioctl_block);
d167 1
a167 1
int serial_read_stream(int handle, char *data_block, int size);
d177 1
a177 1
int serial_read_byte(int handle);
d193 1
a193 1
int serial_write_stream(int handle, char *data_block, int size);
d204 1
a204 1
int serial_write_byte(int handle, char data);
d213 1
a213 1
int serial_size(int handle);
d218 2
a219 2
extern _kernel_oserror* osargs_ioctl(const int serial_file, const int reason, const int group, const int flags,
                                     const unsigned int data_in, unsigned int *const data_out);
d228 1
a228 1
void serial_write_str(int handle, char* string);
@


1.1
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@d15 218
@
