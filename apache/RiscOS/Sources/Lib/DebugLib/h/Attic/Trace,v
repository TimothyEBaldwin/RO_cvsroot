head	1.2;
access;
symbols
	RO_5_07:1.2
	DebugLib-0_51:1.1
	DebugLib-0_50:1.1
	DebugLib-0_49:1.1
	sbrodie_sedwards_16Mar2000:1.1
	DebugLib-0_48:1.1
	DebugLib-0_47:1.1
	DebugLib-0_46:1.1
	dcotton_autobuild_BaseSW:1.1
	DebugLib-0_45:1.1
	DebugLib-0_44:1.1
	DebugLib-0_43:1.1
	DebugLib-0_42:1.1
	DebugLib-0_41:1.1
	DebugLib-0_40:1.1
	DebugLib-0_39:1.1
	DebugLib-0_38:1.1
	DebugLib-0_33-1_28_2_1:1.1
	DebugLib-0_37:1.1
	DebugLib-0_36:1.1
	DebugLib-0_35:1.1
	DebugLib-0_34:1.1
	nturton_DebugLib-0_24:1.1
	DebugLib-0_33:1.1
	DebugLib-0_32:1.1
	DebugLib-0_31:1.1
	DebugLib-0_30:1.1
	DebugLib-0_29:1.1
	DebugLib-0_28:1.1
	DebugLib-0_27:1.1
	DebugLib-0_26:1.1
	DebugLib-0_25:1.1
	DebugLib-0_24:1.1
	DebugLib-0_23:1.1
	DebugLib-0_22:1.1
	DebugLib-0_21:1.1
	DebugLib-0_20:1.1
	DebugLib-0_19:1.1
	DebugLib-0_18:1.1
	sforrest_daytona_appflash-0_31:1.1
	DebugLib-0_17:1.1
	DebugLib-0_16:1.1
	DebugLib-0_15:1.1
	DebugLib-0_14:1.1
	DebugLib-0_13:1.1
	DebugLib-0_12:1.1
	DebugLib-0_11:1.1
	DebugLib-0_10:1.1
	blaughto_daytona_appflash-0_30:1.1
	blaughto_daytona_appflash-0_29:1.1
	blaughto_daytona_appflash-0_28:1.1
	jberanek_debuglib-0_09:1.1
	blaughto_daytona_appflash-0_27:1.1
	blaughto_daytona_appflash-0_26:1.1
	blaughto_daytona_appflash-0_25:1.1
	blaughto_daytona_appflash-0_24:1.1
	blaughto_daytona_appflash-0_23:1.1
	jberanek_debuglib-0_08:1.1
	blaughto_daytona_appflash-0_21:1.1
	blaughto_daytona_appflash-0_20:1.1
	rwarren_debuglib-0_07:1.1
	blaughto_daytona_appflash-0_19:1.1
	jberanek_debuglib-0_06:1.1
	blaughto_daytona_appflash-0_18:1.1
	jberanek_debuglib-0_05:1.1
	Daytona_bp:1.1
	Daytona:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2000.04.20.17.50.07;	author jberanek;	state dead;
branches;
next	1.1;

1.1
date	98.02.16.14.18.29;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Build changes + doc update
Detail:
  DebugLib now gets the Trace header file from the build system, now
   that it lives there.  Deleted local copy.

  Checked in updated StrongHelp manual that shows deprecation of
   debug_atexit() function, and that no longer tells you to use
   it in the "Setting up the library" section.
Admin:
  Built.


Version 0.52. Tagged as 'DebugLib-0_52'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef __Trace_Trace_h
#define __Trace_Trace_h


#ifdef __cplusplus
extern "C"	{
#endif



typedef void	(*Trace_fnstarthandler)	( const char* fnname);
typedef void	(*Trace_fnstophandler)	( const char* fnname);
typedef void	(*Trace_addresshandler)	( const void* address);
typedef	void	(*Trace__genericfn)	( void);

void	Trace_StartHandler( const char* fnname);
/*
Default handler of function start. Outputs indented function name to
stderr.

Also see Trace_StopHandler_Verbose.
 */

void	Trace_StopHandler( const char* fnname);
/*
Default handler of function stop. Outputs indented function name to
stderr.

Also see Trace_StopHandler_Verbose.
 */


#ifdef Trace_TRACE
	
	void	Trace_SetHandlers( Trace_fnstarthandler starthandler, Trace_fnstophandler stophandler);
	/*
	Sets the user-supplied functions which will be called before and after
	each intercepted function.
	
	Note that any functions already intercepted will now call the
	new handlers - the handler to call isn't stored with each
	wrapper code.
	
	Initially, the handlers are Trace_StartHandler and
	Trace_StopHandler.
	 */
	
	int	Trace_InterceptAllFunctions( void);
	/*
	Seaches for embedded function names in the executable and inserts
	veneers around each function which call the Trace library before and
	after each function.
	 */
	
	
	int	Trace_IgnoreFunctions( char* names);
	/*
	Makes future calls to Trace_InterceptAllFunctions ignore all functions
	which match any space-separated wild-carded specification within the
	string pointed to by 'names'.
	
	'#' matches any character, '*' matches any number of characters.
	Take care not to leave a space at the end of 'names' - this will
	be interpreted as '*'.
	
	Note that a copy is /not/ made of the string pointed to by 'names', so
	this string should be permanent.
	
	Returns 0 if ok, 1 if failed (eg out of memory).
	 */
	
	#define	Trace_InterceptFunction( fnname)	\
			Trace__InterceptFunction( (Trace__genericfn) fnname, #fnname)
	/*
	Call this to intercept an individual function. Useful for functions
	which don't use any stack - cc doesn't bother to embed the function name
	in code for such functions so Trace_InterceptAllFunctions() doesn't find
	them.
	
	Note that 'fnname' is intercepted even if it matches any spec passed
	previously to Trace_IgnoreFunctions.
	
	Returns 0 if fnname was succesfully found and modified for profiling.
	Non-zero indicates an error.
	 */
	
	int	Trace__InterceptFunction( Trace__genericfn fn, const char* fnname);
	/*
	For internal use only.
	 */
	
	
	void	Trace_SetAddressHandler( Trace_addresshandler handler);
	/*
	Sets the function to be called when intercepted addresses are
	executed.
	See Trace_InterceptAddress().
	 */
	
	int	Trace_InterceptAddress( void* address);
	/*
	Calls the handler past to Trace_SetAddressHandler whenever the
	specified address is executed.
	 */
	
	void	Trace_SetVerboseLevel( int level);
	

#else
	#define	Trace_SetHandlers( starthandler, stophandler)
	#define	Trace_InterceptAllFunctions()		0
	#define	Trace_IgnoreFunctions( names)		0
	#define	Trace_InterceptFunction( fnname)	0
	#define	Trace__InterceptFunction( fn, fnname)	0
	#define	Trace_SetAddressHandler( handler)
	#define	Trace_InterceptAddress( address)	0
	#define	Trace_SetVerboseLevel( level)
#endif


#ifdef __cplusplus
}
#endif

#endif
@


1.1
log
@Debug Library used in Daytona project.  First CVS checkin
@
text
@@

