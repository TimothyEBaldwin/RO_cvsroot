head	1.4;
access;
symbols
	DebugLib-0_72:1.4
	DebugLib-0_71:1.4
	DebugLib-0_70:1.4
	DebugLib-0_69:1.4
	DebugLib-0_68:1.4
	DebugLib-0_67:1.4
	DebugLib-0_66:1.4
	DebugLib-0_65:1.4
	DebugLib-0_64:1.4
	RO_5_07:1.4
	DebugLib-0_63:1.4
	DebugLib-0_62:1.4
	DebugLib-0_61:1.4
	DebugLib-0_60:1.3
	DebugLib-0_59:1.3
	DebugLib-0_58:1.3
	DebugLib-0_57:1.3
	dellis_autobuild_BaseSW:1.3
	DebugLib-0_56:1.3
	DebugLib-0_55:1.3
	DebugLib-0_54:1.3
	DebugLib-0_53:1.3
	DebugLib-0_52:1.3
	DebugLib-0_51:1.3
	DebugLib-0_50:1.3
	DebugLib-0_49:1.3
	sbrodie_sedwards_16Mar2000:1.3
	DebugLib-0_48:1.3
	DebugLib-0_47:1.3
	DebugLib-0_46:1.2
	dcotton_autobuild_BaseSW:1.4
	DebugLib-0_45:1.2
	DebugLib-0_44:1.2
	DebugLib-0_43:1.2
	DebugLib-0_42:1.2
	DebugLib-0_41:1.2
	DebugLib-0_40:1.2
	DebugLib-0_39:1.2
	DebugLib-0_38:1.2
	DebugLib-0_33-1_28_2_1:1.1
	DebugLib-0_37:1.1
	DebugLib-0_36:1.1
	DebugLib-0_35:1.1
	DebugLib-0_34:1.1
	nturton_DebugLib-0_24:1.1
	DebugLib-0_33:1.1
	DebugLib-0_32:1.1
	DebugLib-0_31:1.1
	DebugLib-0_30:1.1
	DebugLib-0_29:1.1
	DebugLib-0_28:1.1
	DebugLib-0_27:1.1
	DebugLib-0_26:1.1
	DebugLib-0_25:1.1
	DebugLib-0_24:1.1
	DebugLib-0_23:1.1
	DebugLib-0_22:1.1
	DebugLib-0_21:1.1
	DebugLib-0_20:1.1
	DebugLib-0_19:1.1
	DebugLib-0_18:1.1
	DebugLib-0_17:1.1
	DebugLib-0_16:1.1
	DebugLib-0_15:1.1
	DebugLib-0_14:1.1
	DebugLib-0_13:1.1
	DebugLib-0_12:1.1
	DebugLib-0_11:1.1
	DebugLib-0_10:1.1;
locks; strict;
comment	@# @;


1.4
date	2001.09.17.10.53.31;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.21.10.56.42;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	99.05.26.13.19.40;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.09.04.17.19.00;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Updated Copyrights, tidied comment header blocks
Detail:
  Updated Copyright messages to show range of years, up to 2001...a bit
 late in the year for that...

  Tidied a few file header comment blocks.

Admin:
  Built on RiscPC.


Version 0.61. Tagged as 'DebugLib-0_61'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************************/
/* File:    serial_lib.c                                                  */
/* Purpose: C interface to Dual Serial module                             */
/*                                                                        */
/* Copyright [1999-2001] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <stddef.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "serial_lib.h"

/*
 * Open a stream on the given filename
 */
int debug_serial_lib_open_stream(char *filename, int rights)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  reg.r[0] = rights;
  reg.r[1] = (int)filename;
  err = _kernel_swi(OS_Find, &reg, &reg);
  if (err) return (0);

  return (reg.r[0]);
}

/*
 * Close stream specified by handle
 */
void debug_serial_lib_close_stream(int handle)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  reg.r[1] = handle;
  err = _kernel_swi(OS_Find, &reg, &reg);
}

/*
 * Execute an ioctl and return the data
 */
unsigned int debug_serial_lib_ioctl(int handle, ioctl_t *ioctl_block)
{
  _kernel_swi_regs reg;

  reg.r[0] = 9;                    /* ioctl */
  reg.r[1] = handle;
  reg.r[2] = (int)ioctl_block;
  _kernel_swi(OS_Args, &reg, &reg);

  return (ioctl_block->data);
}

/*
 * Fill buffer with as much data as will fit, or as much as is in the RX stream.
 * Return amount of data read.
 */
int debug_serial_lib_read_stream(int handle, char *data_block, int size)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int rx_datasize;

  reg.r[0] = 2;                         /* get amount of data in buffer */
  reg.r[1] = handle;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err) return (-1);

  rx_datasize = reg.r[2];
  if (!rx_datasize) return (0);         /* no data */

  if (rx_datasize>size) rx_datasize = size;

  reg.r[0] = 4;	      	                /* read data */
  reg.r[1] = handle;
  reg.r[2] = (int)data_block;
  reg.r[3] = rx_datasize;
  err = _kernel_swi(OS_GBPB, &reg, &reg);
  if (err) return (-1);

  return (rx_datasize);
}

/*
 * Get a single byte from the serial stream. Will return -1 for failure.
 */
int debug_serial_lib_read_byte(int handle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int carry;

  reg.r[0] = 5;                    /* read eof */
  reg.r[1] = handle;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err || reg.r[2]) return (-1);

  err = _kernel_swi_c(OS_BGet, &reg, &reg, &carry);
  if (err || carry) return (-1);

  return (reg.r[0]);
}

/*
 * Write to TX stream as much data as given or as much as will fit in the
 * stream. Return amount of data written.
 */
int debug_serial_lib_write_stream(int handle, char *data_block, int size)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int tx_freesize;

  reg.r[0] = 2;                         /* get amount of free space in buffer */
  reg.r[1] = handle;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err) return (-1);

  tx_freesize = reg.r[2];
  if (!tx_freesize) return (0);         /* no free space */

  if (size>tx_freesize) size = tx_freesize;

  reg.r[0] = 2;	      	                /* write data */
  reg.r[1] = handle;
  reg.r[2] = (int)data_block;
  reg.r[3] = size;
  err = _kernel_swi(OS_GBPB, &reg, &reg);
  if (err) return (-1);

  return (size);
}

/*
 * Send a single byte to the serial stream. Will return 1 for success
 */
int debug_serial_lib_write_byte(int handle, char data)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = (int)data;
  reg.r[1] = handle;
  err = _kernel_swi(OS_BPut, &reg, &reg);
  if (err) return (-1);

  return (1);
}

/*
 * Return free space/amount of data
 */
int debug_serial_lib_size(int handle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = 2;
  reg.r[1] = handle;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err) return (-1);

  return (reg.r[2]);
}

/*
 * Write a string to an open stream
 *
 */
void debug_serial_lib_write_str(int handle, char* string)
{
  int ptr;

  for (ptr = 0; (ptr <= strlen(string)); ptr++)
    debug_serial_lib_write_byte(handle, string[ptr]);
}

/*
 * Serial IOCtl call handler
 */

_kernel_oserror* debug_serial_lib_osargs_ioctl(int serial_file, int reason, int group, int flags,
                                           unsigned int data_in, unsigned int *const data_out)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  ioctl_t ioctl;

  ioctl.reason = reason;
  ioctl.group = group;
  ioctl.reserved = 0;
  ioctl.read = (flags & read_flag) ? 1 : 0;
  ioctl.write = (flags & write_flag) ? 1 : 0;
  ioctl.data = data_in;

  reg.r[0] = OS_Args_IOCtl;
  reg.r[1] = serial_file;
  reg.r[2] = (int)&ioctl;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err == NULL && data_out != NULL && (flags & read_flag))
    *data_out = ioctl.data;

  return(err);
}

/* End of serial_lib.c */
@


1.3
log
@  Tidy-up
Detail:
  Stewart's checkin about LibVersion reminded me I'd done some tidying
  (including the LibVersion thing) and not checked it in.  So here it is.

  Tidied Makefile, added standard headers to all the c and h files,
  including the regulation copyright message.

  Changed options.c so that it fits the coding style of the rest of
  DebugLib (naughty Stewart).

  Improved "strdup" routine.

  Moved stripdepend call into Makefile.

Admin:
  Built and tested.


Version 0.47. Tagged as 'DebugLib-0_47'
@
text
@d15 12
a26 14
/************************************************************************/
/* File:    serial_lib.c                                                */
/* Purpose: C interface to Dual Serial module                           */
/* Author:  S.B. Forrest (based on code by R.W. Buckley)                */
/* History: 28-May-97 : SBF : Created                                   */
/*                                                                      */
/* Copyright [1999] Pace Micro Technology PLC.  All rights reserved.    */
/*                                                                      */
/* The copyright in this material is owned by Pace Micro Technology PLC */
/* ("Pace").  This material is regarded as a highly confidential trade  */
/* secret of Pace.  It may not be reproduced, used, sold or in any      */
/* other way exploited or transferred to any third party without the    */
/* prior written permission of Pace.                                    */
/************************************************************************/
@


1.2
log
@ * Continued tidy-up of DebugLib:

 * All DebugLib functions now namespaced, they all start debug_<filename>_
  (except the functions in debug.c which are debug_).

 * Device specific #defines etc moved into device specific header files,
   e.g. debugit.h

 * Moved taskname prefixing to a central location, moved timestamping here
   also, added area/level prefixing, and tidied up this prefixing to make
   sure it looks good on all the possible debug devices.

 * Can now do any debuglib function to any debug device, including trace
   output, this hasn't been the case for a while.

 * Added new option, to set whether you want to prefix all debug lines
   with the area/level pair specified in dprintf, dfprintf etc.  Added
   new function to set this option.  debug_set_area_level_prefix ()

 * remotedb output now uses new "raw" output mode added to remotedb in
   version 0.06.  _DebugLib now requires remotedb version >= 0.06_

 * Added new test cases into CLI_App test harness, and changed a few things
   in TestMod.

 * Added Memcheck misc block registration into buffering code, which allows
   buffering to be used on the DebugLib Memcheck build.

 * Added lots of new function names into the always_ignore field which is
   used to tell trace which functions to ignore.  It seems that some the
   internet libraries have function names emebedded, which causes horrible
   loops when using DebugLib to output trace info to remotedb.  Also added
   debug_* and remote_debug_*

 * Added StrongHelp topics for ddumpbuf, debug_output_buffer_* and
   debug_set_area_level_prefix.  Updated the "Setting up the library"
   section.

 * Checked with all the debug devices except TML and serial.


Version 0.38. Tagged as 'DebugLib-0_38'
@
text
@d15 14
a28 5
/* File:    serial_lib.c
 * Purpose: C interface to Dual Serial module
 * Author:  S.B. Forrest (based on code by R.W. Buckley)
 * History: 28-May-97 : SBF : Created
 */
@


1.1
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@d30 1
a30 1
int serial_open_stream(char *filename, int rights)
d46 1
a46 1
void serial_close_stream(int handle)
d59 1
a59 1
unsigned int serial_ioctl(int handle, ioctl_t *ioctl_block)
d75 1
a75 1
int serial_read_stream(int handle, char *data_block, int size)
d104 1
a104 1
int serial_read_byte(int handle)
d125 1
a125 1
int serial_write_stream(int handle, char *data_block, int size)
d154 1
a154 1
int serial_write_byte(int handle, char data)
d170 1
a170 1
int serial_size(int handle)
d187 1
a187 1
void serial_write_str(int handle, char* string)
d192 1
a192 1
    serial_write_byte(handle, string[ptr]);
d199 2
a200 2
_kernel_oserror* osargs_ioctl(const int serial_file, const int reason, const int group, const int flags,
                                     const unsigned int data_in, unsigned int *const data_out)
@
