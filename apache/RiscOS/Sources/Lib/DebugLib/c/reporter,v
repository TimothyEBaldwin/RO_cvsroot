head	1.1;
access;
symbols
	DebugLib-0_72:1.1
	DebugLib-0_71:1.1
	DebugLib-0_70:1.1
	DebugLib-0_69:1.1
	DebugLib-0_68:1.1
	DebugLib-0_67:1.1
	DebugLib-0_66:1.1
	DebugLib-0_65:1.1
	DebugLib-0_64:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.09.10.15.39.58;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Adding SysLog and Reporter logging backends to the DebugLib library.
Detail:
  I've added simple backends for the standard SysLog SWI interface and
  the Reporter module. Both of these provide line based APIs so the output
  is line buffered (to a width of 80 characters). I also removed two
  unnecessary forward declarations for static functions in debug.c which
  were producing warnings from Norcroft CC.
Admin:
   Compiled with Norcroft 5.65. Tested on RISC OS 5.13, using DoggySoft
   SysLog 0.20, Reporter 2.64d via a debug build of the USBDriver module.

Version 0.64. Tagged as 'DebugLib-0_64'
@
text
@/* Copyright 2008 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**************************************************************************/
/* File:    reporter.c                                                    */
/* Debug to Reporter module                                               */
/**************************************************************************/

#include "include.h"
#include "globals.h"
#include "reporter.h"

#define Reporter_Text0 0x54C80

static char* s_line_pos = 0;
static char* s_line_end = 0;
static char  s_line[80];

static void output_line(void)
{
  if (s_line_pos)
  {
    *s_line_pos = 0;
    _swix(Reporter_Text0, _IN(0), s_line);
    s_line_pos = s_line;
  }
}

bool debug_reporter_init (void)
{
  s_line_pos = s_line;
  s_line_end = s_line + sizeof(s_line) - 1;
  return true;
}

void debug_reporter_output (const char *buffer, size_t len)
{
  const char* buffer_end = buffer + len;
  if (!s_line_pos) return;
  while (buffer!=buffer_end)
  {
    char ch = *buffer++;
    if (ch=='\n' || s_line_pos==s_line_end)
    {
      output_line();
    }
    else
    {
      if (ch<32) ch = '.';
      *s_line_pos++ = ch;
    }
  }
}

void debug_reporter_quit (void)
{
  output_line();
}
@
