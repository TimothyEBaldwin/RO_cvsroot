head	1.7;
access;
symbols
	DebugLib-0_72:1.7
	DebugLib-0_71:1.7
	DebugLib-0_70:1.7
	DebugLib-0_69:1.7
	DebugLib-0_68:1.7
	DebugLib-0_67:1.7
	DebugLib-0_66:1.7
	DebugLib-0_65:1.7
	DebugLib-0_64:1.7
	RO_5_07:1.7
	DebugLib-0_63:1.7
	DebugLib-0_62:1.7
	DebugLib-0_61:1.7
	DebugLib-0_60:1.6
	DebugLib-0_59:1.6
	DebugLib-0_58:1.6
	DebugLib-0_57:1.6
	dellis_autobuild_BaseSW:1.5
	DebugLib-0_56:1.5
	DebugLib-0_55:1.5
	DebugLib-0_54:1.5
	DebugLib-0_53:1.4
	DebugLib-0_52:1.4
	DebugLib-0_51:1.4
	DebugLib-0_50:1.4
	DebugLib-0_49:1.4
	sbrodie_sedwards_16Mar2000:1.4
	DebugLib-0_48:1.4
	DebugLib-0_47:1.4
	DebugLib-0_46:1.3
	dcotton_autobuild_BaseSW:1.7
	DebugLib-0_45:1.3
	DebugLib-0_44:1.3
	DebugLib-0_43:1.3
	DebugLib-0_42:1.3
	DebugLib-0_41:1.3
	DebugLib-0_40:1.3
	DebugLib-0_39:1.3
	DebugLib-0_38:1.3
	DebugLib-0_37:1.2
	DebugLib-0_36:1.1
	DebugLib-0_35:1.1;
locks; strict;
comment	@# @;


1.7
date	2001.09.17.10.53.31;	author jberanek;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.16.11.52.50;	author jberanek;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.17.09.56.22;	author jberanek;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.21.10.56.40;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	99.05.26.13.19.35;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	99.05.20.10.00.55;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	99.05.19.19.10.57;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.7
log
@  Updated Copyrights, tidied comment header blocks
Detail:
  Updated Copyright messages to show range of years, up to 2001...a bit
 late in the year for that...

  Tidied a few file header comment blocks.

Admin:
  Built on RiscPC.


Version 0.61. Tagged as 'DebugLib-0_61'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************************/
/* File:    file.c                                                        */
/* Purpose: Routines for the File output method.                          */
/*                                                                        */
/* Copyright [1999-2001] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "globals.h"
#include "file.h"

/* -------------------------------------- LOCAL VARIABLES --------------------------------------- */

static FILE *debug_file_pointer = NULL;          /* File pointer */

/**********************/
/* Exported functions */


/************************************************************************/
/* debug_file_init                                                      */
/*                                                                      */
/* Function to initialise File Debugging                                */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
bool debug_file_init (void)
{
  char *fname;

  if (debug_file_pointer == NULL)
  {
    /* Device currently not initialised */
    if (strlen (debug_current_options.filename) == 0)
    {
      /* No filename specified at startup, so save in WimpScrap */
      fname = "<Wimp$ScrapDir>.DebugLib";
    }
    else
    {
      /* Filename specified in debug_initialise() so use it */
      fname = debug_current_options.filename;
    }

    debug_file_pointer = fopen (fname, "a");
  }

  return true;
}


/************************************************************************/
/* debug_file_output                                                    */
/*                                                                      */
/* Function is the output routine for file debug                        */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_file_output (const char *buffer, size_t len)
{
  if (debug_file_pointer)
  {
    fwrite (buffer, sizeof (char), len, debug_file_pointer);
    if (debug_current_options.unbuffered_files == true)
      fflush (debug_file_pointer);
  }
}


/************************************************************************/
/* debug_file_quit                                                      */
/*                                                                      */
/* Function to terminate  File Debugging                                */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void debug_file_quit (void)
{
  if (debug_file_pointer)
  {
    fclose (debug_file_pointer);
    debug_file_pointer = NULL;
  }
}
@


1.6
log
@  A number of changes, made over the months, but which I'd failed to
   checkin.  Tsk.
Detail:
  Some additions to CLI test harness.

  Bits of code in CLI and GUI test harness to check at compile time if
   OSLib and "Toolbox" style boolean definitions work with DebugLib.h

  Changed GUI test harness Makefile to use LocalRes:

  Removed calls to debug_atexit() in test harnesses, they're no longer
   necessary.

  Behaviour change: if you set a device in DebugLib$Device_<taskname>,
   debug_set_device() is called for that device on debug_initialise().

  Added check into debug_set_device(), if it's called with the current
   device, and the current device is initialised, it now does nothing,
   because it doesn't need to.

  Added extra checks into file and socket output methods that ensure
   initialising and/or terminating these devices repeatedly won't
   cause problems.

  Added some extra preprocessor malarky into DebugLib.h so that it should
   handle more boolean definitions.  It should handle (at least) "Toolbox"
   style ones and OSLib ones.

  Changed some used of debug_output_device() to debug_set_device() in Module
   test harness. debug_output_device() is deprecated.

  Fixed a bug in the core termination code...all open devices should now
   be closed correctly on exit.
Admin:
  Built library.
  Built and ran through some tests in the 3 test harnesses.


Version 0.57. Tagged as 'DebugLib-0_57'
@
text
@d15 12
a26 12
/************************************************************************/
/* File:    file.c                                                      */
/* Purpose: Routines for the File output method.                        */
/*                                                                      */
/* Copyright [1999] Pace Micro Technology PLC.  All rights reserved.    */
/*                                                                      */
/* The copyright in this material is owned by Pace Micro Technology PLC */
/* ("Pace").  This material is regarded as a highly confidential trade  */
/* secret of Pace.  It may not be reproduced, used, sold or in any      */
/* other way exploited or transferred to any third party without the    */
/* prior written permission of Pace.                                    */
/************************************************************************/
@


1.5
log
@  More boolean type changes.
Detail:
  More drastic changes to try and fix all the wonderful variants of
   the boolean type.

  DebugLib now uses <stdbool.h>, "bool", "false" and "true"
   internally.

  DebugLib.h now prototypes its functions with the type DebugLib_BOOL,
   and does preprocessor jiggery-pokery to try and ensure that
   it, plus TRUE, FALSE and BOOL get defined as something appropriate.
Admin:
  Tested by changing some of the test harnesses to include OSLib,
   stdbool and tboxlib headers.
  Fixed test harness module Makefile to include zm versions of
   libraries in all cases.


Version 0.54. Tagged as 'DebugLib-0_54'
@
text
@d57 1
a57 2
  /* Device currently not initialised */
  if (strlen (debug_current_options.filename) == 0)
d59 13
a71 7
    /* No filename specified at startup, so save in WimpScrap */
    fname = "<Wimp$ScrapDir>.DebugLib";
  }
  else
  {
    /* Filename specified in debug_initialise() so use it */
    fname = debug_current_options.filename;
a73 2
  debug_file_pointer = fopen (fname, "a");

d112 5
a116 2
  fclose (debug_file_pointer);
  debug_file_pointer = NULL;
@


1.4
log
@  Tidy-up
Detail:
  Stewart's checkin about LibVersion reminded me I'd done some tidying
  (including the LibVersion thing) and not checked it in.  So here it is.

  Tidied Makefile, added standard headers to all the c and h files,
  including the regulation copyright message.

  Changed options.c so that it fits the coding style of the rest of
  DebugLib (naughty Stewart).

  Improved "strdup" routine.

  Moved stripdepend call into Makefile.

Admin:
  Built and tested.


Version 0.47. Tagged as 'DebugLib-0_47'
@
text
@d53 1
a53 1
BOOL debug_file_init (void)
d71 1
a71 1
  return TRUE;
d90 1
a90 1
    if (debug_current_options.unbuffered_files == TRUE)
@


1.3
log
@ * Continued tidy-up of DebugLib:

 * All DebugLib functions now namespaced, they all start debug_<filename>_
  (except the functions in debug.c which are debug_).

 * Device specific #defines etc moved into device specific header files,
   e.g. debugit.h

 * Moved taskname prefixing to a central location, moved timestamping here
   also, added area/level prefixing, and tidied up this prefixing to make
   sure it looks good on all the possible debug devices.

 * Can now do any debuglib function to any debug device, including trace
   output, this hasn't been the case for a while.

 * Added new option, to set whether you want to prefix all debug lines
   with the area/level pair specified in dprintf, dfprintf etc.  Added
   new function to set this option.  debug_set_area_level_prefix ()

 * remotedb output now uses new "raw" output mode added to remotedb in
   version 0.06.  _DebugLib now requires remotedb version >= 0.06_

 * Added new test cases into CLI_App test harness, and changed a few things
   in TestMod.

 * Added Memcheck misc block registration into buffering code, which allows
   buffering to be used on the DebugLib Memcheck build.

 * Added lots of new function names into the always_ignore field which is
   used to tell trace which functions to ignore.  It seems that some the
   internet libraries have function names emebedded, which causes horrible
   loops when using DebugLib to output trace info to remotedb.  Also added
   debug_* and remote_debug_*

 * Added StrongHelp topics for ddumpbuf, debug_output_buffer_* and
   debug_set_area_level_prefix.  Updated the "Setting up the library"
   section.

 * Checked with all the debug devices except TML and serial.


Version 0.38. Tagged as 'DebugLib-0_38'
@
text
@d18 8
@


1.2
log
@ * Continued tidy of DebugLib structure/implementation...added an "Open"
   variable to the debug_output_method structure, to replace the
   sessions_available struct that was used previously.  Now check for
   whether a device is open at the top level (debug.c) instead of once
   for each device.  Removed the "quit" function for a few devices, because
   it was doing nothing.
 * Reduced global variable count to 1. :)

 * Split option setting functions to options.[ch], left debug_set_device
   in c.debug, as it does a bit more that just set an option.


Version 0.37. Tagged as 'DebugLib-0_37'
@
text
@d77 1
a77 1
void debug_file_output (const char *buffer)
d81 1
a81 1
    fwrite (buffer, sizeof (char), strlen (buffer), debug_file_pointer);
@


1.1
log
@ * Initial work on tidying design of DebugLib.  Each output method is now
   more or less independant, and in its own file.  The common functions
   of each debug output method are accessed using an array of function
   pointers.  In the fullness of time this should make it easy to add new
   devices (and perhaps some cunning stuff with the linker).

 * Code re-org has been tested, and seen to work for at least one debug
   method.


Version 0.35. Tagged as 'DebugLib-0_35'
@
text
@d26 3
d47 9
a55 1
  if (sessions_available.file == FALSE)
d57 3
a59 1
    char *fname;
d61 1
a61 11
    /* Device currently not initialised */
    if (strlen (debug_current_options.filename) == 0)
    {
      /* No filename specified at startup, so save in WimpScrap */
      fname = "<Wimp$ScrapDir>.DebugLib";
    }
    else
    {
      /* Filename specified in debug_initialise() so use it */
      fname = debug_current_options.filename;
    }
d63 1
a63 7
    debug_file_pointer = fopen (fname, "a");

    sessions_available.file = TRUE;
    return TRUE;
  }
  else
    return TRUE;
d101 2
a102 7
  if (sessions_available.file == TRUE)
  {
    /* Device currently initialised */
    fclose (debug_file_pointer);
    debug_file_pointer = NULL;
    sessions_available.file = FALSE;
  }
@
