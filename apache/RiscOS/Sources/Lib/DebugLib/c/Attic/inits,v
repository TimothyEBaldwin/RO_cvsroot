head	1.7;
access;
symbols
	RO_5_07:1.7
	DebugLib-0_33-1_28_2_1:1.6
	DebugLib-0_34:1.6
	nturton_DebugLib-0_24:1.5
	DebugLib-0_33:1.6
	DebugLib-0_32:1.5
	DebugLib-0_31:1.5
	DebugLib-0_30:1.5
	DebugLib-0_29:1.5
	DebugLib-0_28:1.5
	DebugLib-0_27:1.5
	DebugLib-0_26:1.5
	DebugLib-0_25:1.5
	DebugLib-0_24:1.4
	DebugLib-0_23:1.4
	DebugLib-0_22:1.4
	DebugLib-0_21:1.4
	DebugLib-0_20:1.4
	DebugLib-0_19:1.4
	DebugLib-0_18:1.4
	sforrest_daytona_appflash-0_31:1.1.2.1
	DebugLib-0_17:1.4
	DebugLib-0_16:1.4
	DebugLib-0_15:1.4
	DebugLib-0_14:1.4
	DebugLib-0_13:1.3
	DebugLib-0_12:1.3
	DebugLib-0_11:1.3
	DebugLib-0_10:1.3
	blaughto_daytona_appflash-0_30:1.1.2.1
	blaughto_daytona_appflash-0_29:1.1.2.1
	blaughto_daytona_appflash-0_28:1.1.2.1
	jberanek_debuglib-0_09:1.1.2.1
	blaughto_daytona_appflash-0_27:1.1.2.1
	blaughto_daytona_appflash-0_26:1.1.2.1
	blaughto_daytona_appflash-0_25:1.1.2.1
	blaughto_daytona_appflash-0_24:1.1.2.1
	blaughto_daytona_appflash-0_23:1.1.2.1
	jberanek_debuglib-0_08:1.1.2.1
	blaughto_daytona_appflash-0_21:1.1.2.1
	blaughto_daytona_appflash-0_20:1.1.2.1
	rwarren_debuglib-0_07:1.1.2.1
	blaughto_daytona_appflash-0_19:1.1
	jberanek_debuglib-0_06:1.1.2.1
	blaughto_daytona_appflash-0_18:1.1
	jberanek_debuglib-0_05:1.1
	Daytona_bp:1.1
	Daytona:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	99.05.19.19.10.58;	author jberanek;	state dead;
branches;
next	1.6;

1.6
date	99.05.10.15.48.47;	author jberanek;	state Exp;
branches;
next	1.5;

1.5
date	98.11.24.17.05.25;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	98.09.17.12.48.17;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	98.09.04.17.18.57;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	98.09.04.15.33.32;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.02.16.14.18.21;	author jberanek;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.03.23.11.15.04;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ * Initial work on tidying design of DebugLib.  Each output method is now
   more or less independant, and in its own file.  The common functions
   of each debug output method are accessed using an array of function
   pointers.  In the fullness of time this should make it easy to add new
   devices (and perhaps some cunning stuff with the linker).

 * Code re-org has been tested, and seen to work for at least one debug
   method.


Version 0.35. Tagged as 'DebugLib-0_35'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    inits.c                                                     */
/* Purpose: Initialisation routines for output devices.                 */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@@acorn.co.uk)                  */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "output.h"
#include "inits.h"
#include "debug.h"
#include "globals.h"


#define Serial_Stream	"devices#baud%d;data8;stop1;noparity;rts;size1024;thres32:$.serial%d"
#define Serial1_Default	"devices#baud9600;data8;stop1;noparity;rts;size1024;thres32:$.serial1"

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* ensure_module                                                        */
/*                                                                      */
/* Function checks to see if a module is loaded.  Stops debug output    */
/* going to unpredictable places.                                       */
/*                                                                      */
/* Parameters: name - Module name.                                      */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
static BOOL ensure_module (char *name)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	regs;

  /* Check that module is present */
  regs.r[0] = 18;
  regs.r[1] = (int) name;

  er = _kernel_swi (OS_Module, &regs, &regs);

  if (er != NULL)
  {
    /* Module not present */
    return FALSE;
  }
  else
  {
    /* Module present */
    return TRUE;
  }
}


/************************************************************************/
/* init_printf                                                          */
/*                                                                      */
/* Function to initialise printf output                                 */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL init_printf (void)
{
  /* Do nothing */
  return TRUE;
}


/************************************************************************/
/* init_debugit                                                         */
/*                                                                      */
/* Function to initialise DebugIt                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL init_debugit (void)
{
  if (sessions_available.debugit == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("DebugIt") == TRUE)
    {
      sessions_available.debugit = TRUE;
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.debugit = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_file                                                            */
/*                                                                      */
/* Function to initialise File Debugging                                */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL init_file (void)
{
  if (sessions_available.file == FALSE)
  {
    char *fname;

    /* Device currently not initialised */
    if (strlen (debug_current_options.filename) == 0)
    {
      /* No filename specified at startup, so save in WimpScrap */
      fname = "<Wimp$ScrapDir>.DebugLib";
    }
    else
    {
      /* Filename specified in debug_initialise() so use it */
      fname = debug_current_options.filename;
    }

    debug_file_pointer = fopen (fname, "a");

    sessions_available.file = TRUE;
    return TRUE;
  }
  else
    return TRUE;
}


/************************************************************************/
/* init_pdebug                                                          */
/*                                                                      */
/* Function to initialise Parallel Debugging.                           */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL init_pdebug (void)
{
  if (sessions_available.pdebug == FALSE)
  {
    _kernel_oserror *er;

    er = PDebug_XInit ();
    if (er != NULL)
    {
      _swix(OS_WriteI + 7, 0);
      _kernel_setenv ("PDebug$Error", er->errmess);
      pdebug_error = TRUE;
    }
    else
      pdebug_error = FALSE;

    sessions_available.pdebug = TRUE;
    return TRUE;
  }
  else
  {
    sessions_available.pdebug = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_socket                                                          */
/*                                                                      */
/* Function to initialise RemoteDB                                      */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL init_socket (void)
{
#ifndef NOSOCKETS
  if (sessions_available.remotedb == FALSE)
  {
    /* Device currently not initialised */
    remote_debug_open (debug_current_options.taskname, (&remotedb_info));
    sessions_available.remotedb = TRUE;
    return TRUE;
  }
  else
  {
    sessions_available.remotedb = TRUE;
    return TRUE;
  }
#else
  return TRUE;
#endif
}


/************************************************************************/
/* init_tml                                                             */
/*                                                                      */
/* Function to initialise TML Podule                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL init_tml(void)
{
  if (sessions_available.tml == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("TML_HostFS") == TRUE)
    {
      sessions_available.tml = TRUE;
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.tml = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_tracker                                                         */
/*                                                                      */
/* Function to initialise Tracker                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL init_tracker(void)
{
  if (sessions_available.tracker == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("Tracker") == TRUE)
    {
      sessions_available.tracker = TRUE;
      _swix (Tracker_Open, _INR(0,3) | _OUT(0), debug_current_options.taskname, 132, 500, 1,
             &tracker_window_handle);
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.tracker = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_serial                                                          */
/*                                                                      */
/* Function to initialise Serial Port debugging.                        */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL init_serial (void)
{
  char		*device_setup;

  if (sessions_available.serial == FALSE)
  {
    if ((device_setup = malloc(strlen(Serial_Stream) + 25)) != NULL)
    {
      /* Setup device string */
      sprintf(device_setup, Serial_Stream, debug_current_options.serial_port_speed,
              debug_current_options.serial_port_number);

      serial_handle = serial_open_stream(device_setup, Serial_Output);

      free(device_setup);

      if (serial_handle == 0)
      {
        /* Failed to open socket */
        sessions_available.serial = FALSE;
        return FALSE;
      }
      else
      {
        sessions_available.serial = TRUE;
        return TRUE;
      }
    }
    else
    {
      sessions_available.serial = FALSE;
      return FALSE;
    }
  }
  else
  {
    sessions_available.serial = TRUE;
    return TRUE;
  }
}
@


1.6
log
@ * Overhauled how DebugLib options are handled.  Options are now held in
   an options structure internal to DebugLib.  Options are set one at a
   time by function calls, this makes it much easier to add new options
   over time.  debug_set_options and debug_output_device now deprecated,
   but still provided.  Updated StrongHelp manual to document this
   new behaviour.

 * Fixed trace output somewhat...should now look better on remotedb
   output (no extraneous CRs), and you can now set the trace device to
   be the same as the main debug device.  Setting trace device to "printf"
   now also works (file still to do, as you still can't "dfprintf" to file)

 * Added one of the new options function calls to the CLI_App test harness,
   to test functionality.

 * Improved the !MkCleans for the test harnesses.


Version 0.33. Tagged as 'DebugLib-0_33'
@
text
@@


1.5
log
@Fixed a couple of _swix calls that cc 5.10 complained about.

Version 0.24. Not tagged
@
text
@d49 1
a49 1
int ensure_module (char *name)
d73 17
d102 1
a102 1
int init_debugit (void)
d136 1
a136 1
int init_file (void)
d143 1
a143 1
    if (strlen (FILE_FILENAME) == 0)
d151 1
a151 1
      fname = FILE_FILENAME;
d175 1
a175 1
int init_pdebug (void)
d213 1
a213 1
int init_socket (void)
d219 1
a219 1
    remote_debug_open (TASK_NAME, (&remotedb_info));
d244 1
a244 1
int init_tml(void)
d278 1
a278 1
int init_tracker(void)
d286 2
a287 1
      _swix (Tracker_Open, _INR(0,3) | _OUT(0), TASK_NAME, 132, 500, 1, &tracker_window_handle);
d313 1
a313 1
int init_serial (void)
d322 2
a323 1
      sprintf(device_setup, Serial_Stream, serial_port_speed, serial_port_number);
@


1.4
log
@  Updated Documentation for debug_initialise, to clarify some of the
parameters.
  Fixed a few cases where NULLs could be passed to strcpy etc. in
debug_initialise.
  VersionNum file now gets exported to the DebugLib's Export directory, so
you always know what version you've got compiled.
  Tidied some header files a bit.

Version 0.14. Tagged as 'DebugLib-0_14'
@
text
@d167 1
a167 1
      _swix(0x107, _IN(0));
@


1.3
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@d126 1
a126 1
    if (strcmp (FILE_FILENAME, "") == 0)
@


1.2
log
@Merged DebugLib from Daytona branch onto trunk

Version 0.09. Not tagged
@
text
@d28 1
d31 4
d37 1
d123 2
a124 1
#if 1
d129 1
a129 1
      debug_file_pointer = fopen ("<Wimp$ScrapDir>.DebugLib", "a");
d134 1
a134 1
      debug_file_pointer = fopen (FILE_FILENAME, "a");
d136 3
a138 1
#endif
d162 4
a165 2
    /* Device currently not initialised */
    if (ensure_module ("PDebugM") == TRUE)
d167 3
a169 3
      PDebug_XInit ();
      sessions_available.pdebug = TRUE;
      return TRUE;
d172 4
a175 3
    {
      return FALSE;
    }
d269 1
d280 51
@


1.1
log
@Debug Library used in Daytona project.  First CVS checkin
@
text
@d47 1
a47 1
  
d51 1
a51 1
  
d53 1
a53 1
  
d65 1
a65 1
  
d117 1
d129 1
@


1.1.2.1
log
@  File debug now conforms more closely to all the other debug devices, with
a separate function to handle output to a file, output_file
@
text
@d47 1
a47 1

d51 1
a51 1

d53 1
a53 1

d65 1
a65 1

a116 1
#if 1
a127 1
#endif
@
