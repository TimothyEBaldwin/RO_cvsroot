head	1.8;
access;
symbols
	RO_5_07:1.8
	DebugLib-0_33-1_28_2_1:1.7
	DebugLib-0_34:1.7
	nturton_DebugLib-0_24:1.6
	DebugLib-0_33:1.7
	DebugLib-0_32:1.6
	DebugLib-0_31:1.6
	DebugLib-0_30:1.6
	DebugLib-0_29:1.6
	DebugLib-0_28:1.6
	DebugLib-0_27:1.6
	DebugLib-0_26:1.6
	DebugLib-0_25:1.6
	DebugLib-0_24:1.6
	DebugLib-0_23:1.6
	DebugLib-0_22:1.6
	DebugLib-0_21:1.6
	DebugLib-0_20:1.5
	DebugLib-0_19:1.5
	DebugLib-0_18:1.5
	sforrest_daytona_appflash-0_31:1.1.2.1
	DebugLib-0_17:1.4
	DebugLib-0_16:1.4
	DebugLib-0_15:1.4
	DebugLib-0_14:1.4
	DebugLib-0_13:1.4
	DebugLib-0_12:1.4
	DebugLib-0_11:1.3
	DebugLib-0_10:1.3
	blaughto_daytona_appflash-0_30:1.1.2.1
	blaughto_daytona_appflash-0_29:1.1.2.1
	blaughto_daytona_appflash-0_28:1.1.2.1
	jberanek_debuglib-0_09:1.1.2.1
	blaughto_daytona_appflash-0_27:1.1.2.1
	blaughto_daytona_appflash-0_26:1.1.2.1
	blaughto_daytona_appflash-0_25:1.1.2.1
	blaughto_daytona_appflash-0_24:1.1.2.1
	blaughto_daytona_appflash-0_23:1.1.2.1
	jberanek_debuglib-0_08:1.1.2.1
	blaughto_daytona_appflash-0_21:1.1.2.1
	blaughto_daytona_appflash-0_20:1.1.2.1
	rwarren_debuglib-0_07:1.1.2.1
	blaughto_daytona_appflash-0_19:1.1
	jberanek_debuglib-0_06:1.1.2.1
	blaughto_daytona_appflash-0_18:1.1
	jberanek_debuglib-0_05:1.1
	Daytona_bp:1.1
	Daytona:1.1.0.2;
locks; strict;
comment	@# @;


1.8
date	99.05.19.19.10.59;	author jberanek;	state dead;
branches;
next	1.7;

1.7
date	99.05.10.15.48.48;	author jberanek;	state Exp;
branches;
next	1.6;

1.6
date	98.11.11.15.20.10;	author jberanek;	state Exp;
branches;
next	1.5;

1.5
date	98.11.02.16.45.58;	author jberanek;	state Exp;
branches;
next	1.4;

1.4
date	98.09.16.11.28.47;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	98.09.04.17.18.58;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	98.09.04.15.33.33;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.02.16.14.18.23;	author jberanek;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.03.23.11.15.05;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.8
log
@ * Initial work on tidying design of DebugLib.  Each output method is now
   more or less independant, and in its own file.  The common functions
   of each debug output method are accessed using an array of function
   pointers.  In the fullness of time this should make it easy to add new
   devices (and perhaps some cunning stuff with the linker).

 * Code re-org has been tested, and seen to work for at least one debug
   method.


Version 0.35. Tagged as 'DebugLib-0_35'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    output.c                                                    */
/* Purpose: Debug output rountines.  This file contains the output      */
/* rountines rather than having them in several locations in main.      */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@@acorn.co.uk)                  */
/* History: Wed 23rd July 1997      ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "output.h"
#include "debug.h"
#include "globals.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


static void output_debugit_printtaskname (void);


/************************************************************************/
/* output_tml_printtaskname                                             */
/*                                                                      */
/* Outputs "<Task name>: " for the tml output method                    */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_tml_printtaskname (void)
{
  int count;
  int len = strlen (debug_current_options.taskname);

  for (count = 0; count < len; count++)
  {
    _swix (HostFS_WriteC, _IN(0), (int) debug_current_options.taskname[count]);
  }

  _swix (HostFS_WriteC, _IN(0), (int) ':');
  _swix (HostFS_WriteC, _IN(0), (int) ' ');
}


/************************************************************************/
/* output_tml                                                           */
/*                                                                      */
/* Function outputs the data from the library to the TML podule.        */
/*                                                                      */
/* Parameters: buffer - text to output.                                 */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_tml (const char *buffer)
{
  static char start = 1;
  int len, count;

  if (start && debug_current_options.taskname_prefix == TRUE)
  {
    output_tml_printtaskname ();
    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    _swix (HostFS_WriteC, _IN(0), (int) buffer[count]);

    /* Check to see if \n has been passed.  If so, add a CR and (optionally
       the prefix the taskname) */
    if (buffer[count] == '\n')
    {
      _swix (HostFS_WriteC, _IN(0), '\r');
      if (count < len-1 && debug_current_options.taskname_prefix == TRUE)
        output_tml_printtaskname ();
      else
        start = 1;
    }

  }
}


/************************************************************************/
/* output_debugit                                                       */
/*                                                                      */
/* Function is the output routine for !ListDebug.                       */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_debugit (const char *buffer)
{
  static char start = 1;
  int len, count;

  if (start && debug_current_options.taskname_prefix == TRUE)
  {
    output_debugit_printtaskname ();
    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    _swix (DebugIt_WriteC, _IN(0), (int) buffer[count]);
    if (buffer[count] == '\n' && debug_current_options.taskname_prefix == TRUE)
    {
      if (count < len-1)
        output_debugit_printtaskname ();
      else
        start = 1;
    }
  }
}


/************************************************************************/
/* output_debugit_printtaskname                                         */
/*                                                                      */
/* Outputs "<Task name>: " for the debugit output method                */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_debugit_printtaskname (void)
{
  int count;
  int len = strlen (debug_current_options.taskname);

  for (count = 0; count < len; count++)
  {
    _swix (DebugIt_WriteC, _IN(0), (int) debug_current_options.taskname[count]);
  }

  _swix (DebugIt_WriteC, _IN(0), (int) ':');
  _swix (DebugIt_WriteC, _IN(0), (int) ' ');
}


/************************************************************************/
/* output_tracker                                                       */
/*                                                                      */
/* Function is the output routine for !Tracker.                         */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_tracker (const char *buffer)
{
  _swix (Tracker_WriteS, _INR(0,1), tracker_window_handle, buffer);
}


/************************************************************************/
/* output_pdebug_printtaskname                                          */
/*                                                                      */
/* Outputs "<Task name>: " for the pdebug output method                 */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_pdebug_printtaskname (void)
{
  PDebug_Printf ("%s: ", debug_current_options.taskname);
}


/************************************************************************/
/* output_pdebug                                                        */
/*                                                                      */
/* Function is the output routine for !PDebug.                          */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_pdebug (const char *buffer)
{
  static char start = 1;
  int len, count;

  if (pdebug_error == TRUE)
    return;

  /* If we're not prefixing the output with the taskname, use the efficient method */
  if (debug_current_options.taskname_prefix == FALSE)
  {
    PDebug_Print (buffer, sizeof (buffer));
  }
  /* else, go character by character to spot line feeds */
  else
  {
    if (start)
    {
      output_pdebug_printtaskname ();
      start = 0;
    }

    len = strlen (buffer);
    for (count = 0; count < len; count++)
    {
      PDebug_Print (&buffer[count], 1);
      if (buffer[count] == '\n')
      {
        if (count < len-1)
          output_pdebug_printtaskname ();
        else
          start = 1;
      }
    }
  }
}


/************************************************************************/
/* output_socket                                                        */
/*                                                                      */
/* Function is the output routine for !PDebug.                          */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_socket (const char *buffer)
{
#ifndef NOSOCKETS
  debug_print_line (remotedb_info, (char *)buffer);
#else
  IGNORE (buffer);
#endif
}


/************************************************************************/
/* output_file                                                          */
/*                                                                      */
/* Function is the output routine for file debug                        */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_file (const char *buffer)
{
  if (debug_file_pointer)
  {
    fwrite (buffer, sizeof (char), strlen (buffer), debug_file_pointer);
    if (debug_current_options.unbuffered_files == TRUE)
      fflush (debug_file_pointer);
  }
}


/************************************************************************/
/* output_serial_printtaskname                                          */
/*                                                                      */
/* Outputs "<Task name>: " for the serial output method                 */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_serial_printtaskname (void)
{
  int count;
  int len = strlen (debug_current_options.taskname);

  for (count = 0; count < len; count++)
  {
    serial_write_byte(serial_handle, debug_current_options.taskname[count]);
  }
  serial_write_byte(serial_handle, ':');
  serial_write_byte(serial_handle, ' ');
}


/************************************************************************/
/* output_serial                                                        */
/*                                                                      */
/* Function outputs the data from the library to the serial port.       */
/*                                                                      */
/* Parameters: buffer - text to output.                                 */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_serial (const char *buffer)
{
  static char start = 1;
  int len, count;

  if ((start) && (debug_current_options.taskname_prefix == TRUE))
  {
    output_serial_printtaskname ();
    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    serial_write_byte(serial_handle, buffer[count]);

    if (buffer[count] == '\n')
    {
      if (debug_current_options.serial_lf == TRUE)
      {
        serial_write_byte(serial_handle, '\r');
      }
      if (count < len-1 && debug_current_options.taskname_prefix == TRUE)
        output_serial_printtaskname ();
      else
        start = 1;
    }
  }
}


/************************************************************************/
/* output_printf_printtaskname                                          */
/*                                                                      */
/* Outputs "<Task name>: " for the printf output method                 */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_printf_printtaskname (void)
{
  int count;
  int len = strlen (debug_current_options.taskname);

  for (count = 0; count < len; count++)
  {
    _swix (OS_WriteC, _IN(0), (int) debug_current_options.taskname[count]);
  }

  _swix (OS_WriteC, _IN(0), (int) ':');
  _swix (OS_WriteC, _IN(0), (int) ' ');
}


/************************************************************************/
/* output_printf                                                        */
/*                                                                      */
/* Function outputs the data from the library to stdout.                */
/*                                                                      */
/* Parameters: buffer - text to output.                                 */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_printf (const char *buffer)
{
  static char start = 1;
  int len, count;

  /* If we want "Screen cornering (TM)", do it. */
  if (debug_current_options.screen_cornering == 1)
  {
    _swix (OS_WriteC, _IN(0), 4);
    _swix (OS_WriteC, _IN(0), 26);
  }

  if (start && debug_current_options.taskname_prefix == TRUE)
  {
    output_printf_printtaskname ();
    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    _swix (OS_WriteC, _IN(0), (int) buffer[count]);

    /* Check to see if \n has been passed.  If so, add a CR and (optionally
       the prefix the taskname) */
    if (buffer[count] == '\n')
    {
      _swix (OS_WriteC, _IN(0), '\r');
      if (count < len-1 && debug_current_options.taskname_prefix == TRUE)
        output_printf_printtaskname ();
      else
        start = 1;
    }
  }
}
@


1.7
log
@ * Overhauled how DebugLib options are handled.  Options are now held in
   an options structure internal to DebugLib.  Options are set one at a
   time by function calls, this makes it much easier to add new options
   over time.  debug_set_options and debug_output_device now deprecated,
   but still provided.  Updated StrongHelp manual to document this
   new behaviour.

 * Fixed trace output somewhat...should now look better on remotedb
   output (no extraneous CRs), and you can now set the trace device to
   be the same as the main debug device.  Setting trace device to "printf"
   now also works (file still to do, as you still can't "dfprintf" to file)

 * Added one of the new options function calls to the CLI_App test harness,
   to test functionality.

 * Improved the !MkCleans for the test harnesses.


Version 0.33. Tagged as 'DebugLib-0_33'
@
text
@@


1.6
log
@ * Added new feature.  Can now override the filename which the file output
   method uses at runtime by setting a system variable
   "DebugLib$Filename_<Taskname>"

 * Can now tell debuglib to turn off file buffering for the file output
   method, with a system variable. "DebugLib$UnbufferedFiles<Taskname>" set
   to any value

 * Tidied make system, so throwback is only turned on by the build obey
   files

 * Tidied a few switch statements

 * Updated StrongHelp manual to reflect new system variables and features.


Version 0.21. Tagged as 'DebugLib-0_21'
@
text
@d46 1
a46 1
/* Outputs "<TASK_NAME>: " for the tml output method                    */
d56 1
a56 1
  int len = strlen (TASK_NAME);
d60 1
a60 1
    _swix (HostFS_WriteC, _IN(0), (int) TASK_NAME[count]);
d83 1
a83 1
  if (start && use_taskname_prefix == TRUE)
d99 1
a99 1
      if (count < len-1 && use_taskname_prefix == TRUE)
d124 1
a124 1
  if (start && use_taskname_prefix == TRUE)
d134 1
a134 1
    if (buffer[count] == '\n' && use_taskname_prefix == TRUE)
d148 1
a148 1
/* Outputs "<TASK_NAME>: " for the debugit output method                */
d158 1
a158 1
  int len = strlen (TASK_NAME);
d162 1
a162 1
    _swix (DebugIt_WriteC, _IN(0), (int) TASK_NAME[count]);
d189 1
a189 1
/* Outputs "<TASK_NAME>: " for the pdebug output method                 */
d198 1
a198 1
  PDebug_Printf ("%s: ",TASK_NAME);
d221 1
a221 1
  if (use_taskname_prefix == FALSE)
d285 1
a285 1
    if (file_output_nonbuffered == TRUE)
d294 1
a294 1
/* Outputs "<TASK_NAME>: " for the serial output method                 */
d304 1
a304 1
  int len = strlen (TASK_NAME);
d308 1
a308 1
    serial_write_byte(serial_handle, TASK_NAME[count]);
d330 1
a330 1
  if ( (start) && (use_taskname_prefix == TRUE))
d343 1
a343 1
      if (serial_lf == TRUE)
d347 1
a347 1
      if (count < len-1 && use_taskname_prefix == TRUE)
d359 1
a359 1
/* Outputs "<TASK_NAME>: " for the printf output method                 */
d369 1
a369 1
  int len = strlen (TASK_NAME);
d373 1
a373 1
    _swix (OS_WriteC, _IN(0), (int) TASK_NAME[count]);
d397 1
a397 1
  if (printf_screen_cornering == 1)
d403 1
a403 1
  if (start && use_taskname_prefix == TRUE)
d419 1
a419 1
      if (count < len-1 && use_taskname_prefix == TRUE)
@


1.5
log
@ * The remotedb output method was "double vsprintf"ing things.  i.e.
   DebugLib was doing a vsprintf, and then passing this to a function in
   remotedb that did a vsprintf.  This meant that if a string came out of
   vsprintf that had, for example, '%f' in it, horrible things would happen.
   Fixed by making DebugLib use "debug_print_line" instead, which doesn't
   do any vsprintf'ing.


Version 0.18. Tagged as 'DebugLib-0_18'
@
text
@d285 2
@


1.4
log
@ * New features:
   - You can now set a system variable to override the output method
     compiled into the program. (DebugLib$Device_<Taskname>)
   - Printf output now has an option bit associated with it.  This option
     being whether or not the cursor is sent to the top-left of the screen
     before outputting text.  Default is on.

 * Bug fix - printf output wasn't working due to an oversight in the device
   selection function.
 * Updated manual for new features

Version 0.12. Tagged as 'DebugLib-0_12'
@
text
@d263 1
a263 1
  debug_printf (remotedb_info, (char *)buffer);
@


1.3
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@d352 72
@


1.2
log
@Merged DebugLib from Daytona branch onto trunk

Version 0.09. Not tagged
@
text
@d39 29
d80 8
a87 1
  int	len, count;
d92 5
a96 3
    /* Check to see if \n has been passed.  If so added a CR as well
       (for Commandline TML) */
    if (buffer[count] == 10)
d98 5
a102 1
      _swix (HostFS_WriteC, _IN(0), (int) 13);
d104 1
a104 1
    _swix (HostFS_WriteC, _IN(0), (int) buffer[count]);
d119 1
a119 1
void output_debugit (const char *level, const char *buffer)
d122 1
a122 1
  int	len, len2, count, count2;
d124 1
a124 3
  IGNORE (level);

  if (start)
d126 1
a126 9
    len = strlen (TASK_NAME);
    for (count = 0; count < len; count++)
    {
      _swix (DebugIt_WriteC, _IN(0), (int) TASK_NAME[count]);
    }

    _swix (DebugIt_WriteC, _IN(0), (int) ':');
    _swix (DebugIt_WriteC, _IN(0), (int) ' ');

d134 1
a134 1
    if (buffer[count] == '\n')
d137 1
a137 10
      {
        len2 = strlen (TASK_NAME);
        for (count2 = 0; count2 < len2; count2++)
        {
          _swix (DebugIt_WriteC, _IN(0), (int) TASK_NAME[count2]);
        }

        _swix (DebugIt_WriteC, _IN(0), (int) ':');
        _swix (DebugIt_WriteC, _IN(0), (int) ' ');
      }
d146 25
d182 2
a183 1
  _kernel_swi_regs	regs;
d185 14
a198 2
  regs.r[0] = (int) buffer;
  _kernel_swi (Tracker_Simple, &regs, &regs);
d214 33
a246 1
  PDebug_Printf (buffer);
d269 1
d271 1
a271 1
/* output_socket                                                        */
d280 20
a299 1
void output_file (const char *level, const char *buffer)
d301 4
a304 3
#if 0
  /* Device currently not initialised */
  if (strcmp (FILE_FILENAME, "") == 0)
d306 1
a306 2
    /* No filename specified at startup, so save in WimpScrap */
    debug_file_pointer = fopen ("<Wimp$ScrapDir>.DebugLib", "a");
d308 21
a328 1
  else
d330 2
a331 2
    /* Filename specified in debug_initialise() so use it */
    debug_file_pointer = fopen (FILE_FILENAME, "a");
a332 1
#endif
d334 2
a335 1
  if (debug_file_pointer)
d337 13
a349 5
    fwrite (buffer, sizeof (char), strlen (buffer), debug_file_pointer);
#if 0
    fclose (debug_file_pointer);
    debug_file_pointer = NULL;
#endif
@


1.1
log
@Debug Library used in Daytona project.  First CVS checkin
@
text
@d175 36
@


1.1.2.1
log
@  File debug now conforms more closely to all the other debug devices, with
a separate function to handle output to a file, output_file
@
text
@a174 36

/************************************************************************/
/* output_socket                                                        */
/*                                                                      */
/* Function is the output routine for file debug                        */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_file (const char *level, const char *buffer)
{
#if 0
  /* Device currently not initialised */
  if (strcmp (FILE_FILENAME, "") == 0)
  {
    /* No filename specified at startup, so save in WimpScrap */
    debug_file_pointer = fopen ("<Wimp$ScrapDir>.DebugLib", "a");
  }
  else
  {
    /* Filename specified in debug_initialise() so use it */
    debug_file_pointer = fopen (FILE_FILENAME, "a");
  }
#endif

  if (debug_file_pointer)
  {
    fwrite (buffer, sizeof (char), strlen (buffer), debug_file_pointer);
#if 0
    fclose (debug_file_pointer);
    debug_file_pointer = NULL;
#endif
  }
}
@
