head	1.3;
access;
symbols
	RO_5_07:1.3
	DebugLib-0_33-1_28_2_1:1.2
	DebugLib-0_34:1.2
	nturton_DebugLib-0_24:1.2
	DebugLib-0_33:1.2
	DebugLib-0_32:1.2
	DebugLib-0_31:1.2
	DebugLib-0_30:1.2
	DebugLib-0_29:1.2
	DebugLib-0_28:1.2
	DebugLib-0_27:1.2
	DebugLib-0_26:1.2
	DebugLib-0_25:1.2
	DebugLib-0_24:1.2
	DebugLib-0_23:1.2
	DebugLib-0_22:1.2
	DebugLib-0_21:1.2
	DebugLib-0_20:1.2
	DebugLib-0_19:1.2
	DebugLib-0_18:1.2
	sforrest_daytona_appflash-0_31:1.1
	DebugLib-0_17:1.2
	DebugLib-0_16:1.2
	DebugLib-0_15:1.2
	DebugLib-0_14:1.2
	DebugLib-0_13:1.2
	DebugLib-0_12:1.2
	DebugLib-0_11:1.2
	DebugLib-0_10:1.2
	blaughto_daytona_appflash-0_30:1.1
	blaughto_daytona_appflash-0_29:1.1
	blaughto_daytona_appflash-0_28:1.1
	jberanek_debuglib-0_09:1.1
	blaughto_daytona_appflash-0_27:1.1
	blaughto_daytona_appflash-0_26:1.1
	blaughto_daytona_appflash-0_25:1.1
	blaughto_daytona_appflash-0_24:1.1
	blaughto_daytona_appflash-0_23:1.1
	jberanek_debuglib-0_08:1.1
	blaughto_daytona_appflash-0_21:1.1
	blaughto_daytona_appflash-0_20:1.1
	rwarren_debuglib-0_07:1.1
	blaughto_daytona_appflash-0_19:1.1
	jberanek_debuglib-0_06:1.1
	blaughto_daytona_appflash-0_18:1.1
	jberanek_debuglib-0_05:1.1
	Daytona_bp:1.1
	Daytona:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	99.05.19.19.11.02;	author jberanek;	state dead;
branches;
next	1.2;

1.2
date	98.09.04.17.18.59;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.02.16.14.18.24;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.3
log
@ * Initial work on tidying design of DebugLib.  Each output method is now
   more or less independant, and in its own file.  The common functions
   of each debug output method are accessed using an array of function
   pointers.  In the fullness of time this should make it easy to add new
   devices (and perhaps some cunning stuff with the linker).

 * Code re-org has been tested, and seen to work for at least one debug
   method.


Version 0.35. Tagged as 'DebugLib-0_35'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    quits.c                                                     */
/* Purpose: Termination of debug output devices.                        */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@@acorn.co.uk)                  */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "quits.h"
#include "globals.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */
extern SessionsAvailable sessions_available;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* quit_debugit                                                         */
/*                                                                      */
/* Function to terminate  DebugIt                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void         .                                           */
/*                                                                      */
/************************************************************************/
void quit_debugit (void)
{
  if (sessions_available.debugit == TRUE)
  {
    /* Device currently initialised */
    sessions_available.debugit = FALSE;
  }
}


/************************************************************************/
/* quit_file                                                            */
/*                                                                      */
/* Function to terminate  File Debugging                                */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void quit_file (void)
{
  if (sessions_available.file == TRUE)
  {
    /* Device currently initialised */
    fclose (debug_file_pointer);
    debug_file_pointer = NULL;
    sessions_available.file = FALSE;
  }
}


/************************************************************************/
/* quit_pdebug                                                          */
/*                                                                      */
/* Function to terminate  Parallel Debugging.                           */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void quit_pdebug (void)
{
  if (sessions_available.pdebug == TRUE)
  {
    /* Device currently initialised */
    PDebug_XFinal ();
    sessions_available.pdebug = FALSE;
  }
}


/************************************************************************/
/* quit_socket                                                          */
/*                                                                      */
/* Function to terminate RemoteDB                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void         .                                           */
/*                                                                      */
/************************************************************************/
void quit_socket (void)
{
#ifndef NOSOCKETS
  if (sessions_available.remotedb == TRUE)
  {
    /* Device currently initialised */
    remote_debug_close (remotedb_info);
    sessions_available.remotedb = FALSE;
  }
#endif
}


/************************************************************************/
/* quit_tml                                                             */
/*                                                                      */
/* Function to terminate  TML Podule                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void quit_tml (void)
{
  if (sessions_available.tml == TRUE)
  {
    /* Device currently initialised */
      sessions_available.tml = FALSE;
  }
}


/************************************************************************/
/* quit_tracker                                                         */
/*                                                                      */
/* Function to terminate  Tracker                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void         .                                           */
/*                                                                      */
/************************************************************************/
void quit_tracker (void)
{
  if (sessions_available.tracker == TRUE)
  {
    /* Device currently initialised */
    sessions_available.tracker = FALSE;

    _swix (Tracker_Close, _IN(0), tracker_window_handle);
  }
}


/************************************************************************/
/* quit_serial                                                          */
/*                                                                      */
/* Function to terminate  Serial.                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void quit_serial (void)
{
  if (sessions_available.serial == TRUE)
  {
    /* Device currently initialised */
    sessions_available.serial = FALSE;

    serial_close_stream(serial_handle);
  }
}


@


1.2
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@@


1.1
log
@Debug Library used in Daytona project.  First CVS checkin
@
text
@d164 2
d168 25
@
