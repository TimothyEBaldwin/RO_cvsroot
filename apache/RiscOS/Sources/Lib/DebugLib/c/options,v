head	1.10;
access;
symbols
	DebugLib-0_72:1.10
	DebugLib-0_71:1.10
	DebugLib-0_70:1.10
	DebugLib-0_69:1.10
	DebugLib-0_68:1.10
	DebugLib-0_67:1.10
	DebugLib-0_66:1.10
	DebugLib-0_65:1.10
	DebugLib-0_64:1.10
	RO_5_07:1.10
	DebugLib-0_63:1.10
	DebugLib-0_62:1.10
	DebugLib-0_61:1.10
	DebugLib-0_60:1.9
	DebugLib-0_59:1.9
	DebugLib-0_58:1.9
	DebugLib-0_57:1.9
	dellis_autobuild_BaseSW:1.9
	DebugLib-0_56:1.9
	DebugLib-0_55:1.9
	DebugLib-0_54:1.9
	DebugLib-0_53:1.8
	DebugLib-0_52:1.8
	DebugLib-0_51:1.8
	DebugLib-0_50:1.8
	DebugLib-0_49:1.8
	sbrodie_sedwards_16Mar2000:1.8
	DebugLib-0_48:1.8
	DebugLib-0_47:1.8
	DebugLib-0_46:1.7
	dcotton_autobuild_BaseSW:1.10
	DebugLib-0_45:1.7
	DebugLib-0_44:1.7
	DebugLib-0_43:1.7
	DebugLib-0_42:1.7
	DebugLib-0_41:1.7
	DebugLib-0_40:1.6
	DebugLib-0_39:1.5
	DebugLib-0_38:1.2
	DebugLib-0_37:1.1;
locks; strict;
comment	@# @;


1.10
date	2001.09.17.10.53.31;	author jberanek;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.17.09.56.22;	author jberanek;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.21.10.56.41;	author jberanek;	state Exp;
branches;
next	1.7;

1.7
date	99.09.08.13.40.15;	author jberanek;	state Exp;
branches;
next	1.6;

1.6
date	99.05.28.15.21.54;	author jberanek;	state Exp;
branches;
next	1.5;

1.5
date	99.05.27.15.51.51;	author nbingham;	state Exp;
branches;
next	1.4;

1.4
date	99.05.26.17.47.30;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	99.05.26.17.28.04;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	99.05.26.13.19.37;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	99.05.20.10.00.56;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.10
log
@  Updated Copyrights, tidied comment header blocks
Detail:
  Updated Copyright messages to show range of years, up to 2001...a bit
 late in the year for that...

  Tidied a few file header comment blocks.

Admin:
  Built on RiscPC.


Version 0.61. Tagged as 'DebugLib-0_61'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************************/
/* File:    options.c                                                     */
/* Purpose: This file contains the routines for debugging options.        */
/*                                                                        */
/* Copyright [1999-2001] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "serial.h"
#include "globals.h"
#include "options.h"


void debug_set_trace_device (debug_device device)
{
  debug_current_options.trace_device = device;
}

void debug_set_taskname_prefix (bool on)
{
  debug_current_options.taskname_prefix = on;
}

void debug_set_area_level_prefix (bool on)
{
  debug_current_options.area_level_prefix = on;
}

void debug_set_stamp_debug (bool on)
{
  debug_current_options.stamp_debug = on;
}

void debug_set_screen_cornering (bool on)
{
  debug_current_options.screen_cornering = on;
}

void debug_set_unbuffered_files (bool on)
{
  debug_current_options.unbuffered_files = on;
}

void debug_set_serial_lf (bool on)
{
  debug_current_options.serial_lf = on;
}

void debug_set_serial_port_speed (int speed)
{
  debug_current_options.serial_port_speed = speed;
}

void debug_set_serial_port_number (int num)
{
  debug_current_options.serial_port_number = num;
}

void debug_set_dump_width (size_t width)
{
  debug_current_options.dump_width = width;
}

void debug_set_area_pad_limit (size_t limit)
{
  debug_current_options.area_pad_limit = limit;
}

/************************************************************************/
/* debug_options_initialise                                             */
/*                                                                      */
/* Function initialises the library's options to default values         */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_options_initialise (void)
{
  debug_current_options.taskname = NULL;
  debug_current_options.filename = NULL;
  debug_current_options.device = NULL_OUTPUT;
  debug_current_options.raw_device = NULL_OUTPUT;
  debug_current_options.trace_device = NULL_OUTPUT;
  debug_current_options.taskname_prefix = true;
  debug_current_options.area_level_prefix = false;
  debug_current_options.stamp_debug = false;
  debug_current_options.screen_cornering = false;
  debug_current_options.unbuffered_files = false;
  debug_current_options.serial_lf = true;
  debug_current_options.serial_port_speed = SerialPort_DefaultSpeed;
  debug_current_options.serial_port_number = SerialPort_DefaultPort;
  debug_current_options.dump_width = DumpWidth_DefaultWidth;
  debug_current_options.area_pad_limit = AreaPadLimit_DefaultLimit;
}


/************************************************************************/
/* debug_set_options                                                    */
/*                                                                      */
/* Function sets up debuglib options.                                   */
/*                                                                      */
/* Parameters: options - Bit 0 Set,    Enable taskname prefixing (def). */
/*                             Unset,  Disable taskname prefixing.      */
/*                     - Bit 1 Set,    Add \r to serial output (def).   */
/*                             Unset,  No \r.                           */
/*                     - Bit 2 Set,    Enable printf "screen cornering" */
/*                                     i.e. each successive "printf"    */
/*                                     output is sent to the top-left   */
/*                                     corner of the screen (default)   */
/*                             Unset,  Disable "screen cornering"       */
/*             sport   - Serial port to use (1|2) - def = 1.            */
/*             sspeed  - Serial port speed (300 - 115200) - def = 9600. */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_set_options (unsigned int options, int sport, int sspeed)
{
  /* Task prefixing */
  if (options & DebugLib_Options_TasknamePrefix_On)
    debug_current_options.taskname_prefix = true;
  else
    debug_current_options.taskname_prefix = false;

  /* Serial port \r */
  if (options & DebugLib_Options_SerialPortLF_On)
    debug_current_options.serial_lf = true;
  else
    debug_current_options.serial_lf = false;

  /* Serial port number */
  if ((sport > 0) && (sport < 3))
    debug_current_options.serial_port_number = sport;

  /* Serial port speed */
  if ((sspeed >= 300) && (sspeed <= 115200))
    debug_current_options.serial_port_speed = sspeed;

  /* Printf "screen cornering (TM)" */
  if (options & DebugLib_Options_ScreenCornering_On)
    debug_current_options.screen_cornering = true;
  else
    debug_current_options.screen_cornering = false;

  if (options & DebugLib_Options_StampDebug_On)
    debug_current_options.stamp_debug = true;
  else
    debug_current_options.stamp_debug = false;
}


/************************************************************************/
/* debug_get_internal_options                                           */
/*                                                                      */
/* Function reads in the current options into the specified var.        */
/*                                                                      */
/* Parameters: opts   - where to store the options.                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_get_internal_options (debug_options *opts)
{
  *opts = debug_current_options;
}


/************************************************************************/
/* debug_set_internal_options                                           */
/*                                                                      */
/* Function sets the current options to whatever the var is set to.     */
/*                                                                      */
/* Parameters: opts   - the options to set to.                          */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_set_internal_options (debug_options opts)
{
  debug_current_options = opts;
}


/************************************************************************/
/* debug_set_internal_options_raw                                       */
/*                                                                      */
/* Function sets the options to nothing.                                */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_set_internal_options_raw (void)
{
  debug_current_options.taskname_prefix = false;
  debug_current_options.area_level_prefix = false;
  debug_current_options.stamp_debug = false;
  debug_current_options.screen_cornering = false;
}
@


1.9
log
@  More boolean type changes.
Detail:
  More drastic changes to try and fix all the wonderful variants of
   the boolean type.

  DebugLib now uses <stdbool.h>, "bool", "false" and "true"
   internally.

  DebugLib.h now prototypes its functions with the type DebugLib_BOOL,
   and does preprocessor jiggery-pokery to try and ensure that
   it, plus TRUE, FALSE and BOOL get defined as something appropriate.
Admin:
  Tested by changing some of the test harnesses to include OSLib,
   stdbool and tboxlib headers.
  Fixed test harness module Makefile to include zm versions of
   libraries in all cases.


Version 0.54. Tagged as 'DebugLib-0_54'
@
text
@d15 12
a26 12
/************************************************************************/
/* File:    options.c                                                   */
/* Purpose: This file contains the routines for debugging options.      */
/*                                                                      */
/* Copyright [1999] Pace Micro Technology PLC.  All rights reserved.    */
/*                                                                      */
/* The copyright in this material is owned by Pace Micro Technology PLC */
/* ("Pace").  This material is regarded as a highly confidential trade  */
/* secret of Pace.  It may not be reproduced, used, sold or in any      */
/* other way exploited or transferred to any third party without the    */
/* prior written permission of Pace.                                    */
/************************************************************************/
@


1.8
log
@  Tidy-up
Detail:
  Stewart's checkin about LibVersion reminded me I'd done some tidying
  (including the LibVersion thing) and not checked it in.  So here it is.

  Tidied Makefile, added standard headers to all the c and h files,
  including the regulation copyright message.

  Changed options.c so that it fits the coding style of the rest of
  DebugLib (naughty Stewart).

  Improved "strdup" routine.

  Moved stripdepend call into Makefile.

Admin:
  Built and tested.


Version 0.47. Tagged as 'DebugLib-0_47'
@
text
@d40 1
a40 1
void debug_set_taskname_prefix (BOOL on)
d45 1
a45 1
void debug_set_area_level_prefix (BOOL on)
d50 1
a50 1
void debug_set_stamp_debug (BOOL on)
d55 1
a55 1
void debug_set_screen_cornering (BOOL on)
d60 1
a60 1
void debug_set_unbuffered_files (BOOL on)
d65 1
a65 1
void debug_set_serial_lf (BOOL on)
d107 6
a112 6
  debug_current_options.taskname_prefix = TRUE;
  debug_current_options.area_level_prefix = FALSE;
  debug_current_options.stamp_debug = FALSE;
  debug_current_options.screen_cornering = FALSE;
  debug_current_options.unbuffered_files = FALSE;
  debug_current_options.serial_lf = TRUE;
d144 1
a144 1
    debug_current_options.taskname_prefix = TRUE;
d146 1
a146 1
    debug_current_options.taskname_prefix = FALSE;
d150 1
a150 1
    debug_current_options.serial_lf = TRUE;
d152 1
a152 1
    debug_current_options.serial_lf = FALSE;
d164 1
a164 1
    debug_current_options.screen_cornering = TRUE;
d166 1
a166 1
    debug_current_options.screen_cornering = FALSE;
d169 1
a169 1
    debug_current_options.stamp_debug = TRUE;
d171 1
a171 1
    debug_current_options.stamp_debug = FALSE;
d219 4
a222 4
  debug_current_options.taskname_prefix = FALSE;
  debug_current_options.area_level_prefix = FALSE;
  debug_current_options.stamp_debug = FALSE;
  debug_current_options.screen_cornering = FALSE;
@


1.7
log
@ * Improved DebugLib's area handling system.  Lines of debug may now belong
   to multiple "areas" of code, each at a specific level.  The filtering of
   debug at runtime is now done with a much more flexible system,
   areas/levels are masked in/out based on a new format for the
   DebugLib$Level_<taskname> system variable.  The description of this
   format has not made it into the StrongHelp document, it will go into
   this, and into the DebugLib web docs ASAP.

 * Added a new option to allow the area/level prefix in debug output to
   be padded to a particular width.  This makes the prefix much more
   useable.  The prefixing is turned on with the option
   "debug_set_area_level_prefix", and the padding controlled with
   "debug_set_area_pad_limit".

 * Added test cases for new levelling scheme into CLI test harness.

 * Updated StrongHelp manual somewhat.


Version 0.41. Tagged as 'DebugLib-0_41'
@
text
@d18 8
@


1.6
log
@ * Fixed the logic in debug_close_device.  The changes made for raw mode
   meant that the raw device wouldn't be closed.

 * Changed the copyright messages a little.


Version 0.40. Tagged as 'DebugLib-0_40'
@
text
@d77 4
d108 1
@


1.5
log
@Summary
-------
  * Initial checkin of code to allow data to be output in a raw form.
  * Added copyright messages to DebugLib.h (the exported header) as
    DebugLib has now been shipped to one customer.
Detail
------
  * Two new functions debug_set_raw_device() and dprintf_raw() have been
    added to debug.c.  This allows debug data to be output unprocessed;
    i.e. without taskname prefixing, timestamping etc.  This was done for
    HierProf, MemCheck and McCabe.  This is especially important for McCabe
    as no formatting must be done to the output generated by the program.
    Subject to testing against McCabe, it will be possible to send output
    for analysis via any debug stream (except RemoteDB due to the nature
    of the daemon).  DebugLib$RawDevice_<taskname> can be used to override
    debug_set_raw_device().
Admin
-----
  * Tested that the data is output in a raw form.  Testing with McCabe
    not yet accomplished.

Version 0.39. Tagged as 'DebugLib-0_39'
@
text
@a210 2


@


1.4
log
@ * Tidied "include.h":

 * Moved non-general definitions into appropriate
   header files.  e.g. Default serial options into serial.h etc.
 * Removed DEBUGLIB_UNUSED() macro, as there was already a similar macro
   IGNORE()

 * "globals.h" now includes "options.h" to get the definition of the
   options structure.


Version 0.38. Not tagged
@
text
@d93 1
d160 53
@


1.3
log
@ * Changed the default setting for the "screen cornering" option to FALSE.


Version 0.38. Not tagged
@
text
@d22 1
@


1.2
log
@ * Continued tidy-up of DebugLib:

 * All DebugLib functions now namespaced, they all start debug_<filename>_
  (except the functions in debug.c which are debug_).

 * Device specific #defines etc moved into device specific header files,
   e.g. debugit.h

 * Moved taskname prefixing to a central location, moved timestamping here
   also, added area/level prefixing, and tidied up this prefixing to make
   sure it looks good on all the possible debug devices.

 * Can now do any debuglib function to any debug device, including trace
   output, this hasn't been the case for a while.

 * Added new option, to set whether you want to prefix all debug lines
   with the area/level pair specified in dprintf, dfprintf etc.  Added
   new function to set this option.  debug_set_area_level_prefix ()

 * remotedb output now uses new "raw" output mode added to remotedb in
   version 0.06.  _DebugLib now requires remotedb version >= 0.06_

 * Added new test cases into CLI_App test harness, and changed a few things
   in TestMod.

 * Added Memcheck misc block registration into buffering code, which allows
   buffering to be used on the DebugLib Memcheck build.

 * Added lots of new function names into the always_ignore field which is
   used to tell trace which functions to ignore.  It seems that some the
   internet libraries have function names emebedded, which causes horrible
   loops when using DebugLib to output trace info to remotedb.  Also added
   debug_* and remote_debug_*

 * Added StrongHelp topics for ddumpbuf, debug_output_buffer_* and
   debug_set_area_level_prefix.  Updated the "Setting up the library"
   section.

 * Checked with all the debug devices except TML and serial.


Version 0.38. Tagged as 'DebugLib-0_38'
@
text
@d96 1
a96 1
  debug_current_options.screen_cornering = TRUE;
@


1.1
log
@ * Continued tidy of DebugLib structure/implementation...added an "Open"
   variable to the debug_output_method structure, to replace the
   sessions_available struct that was used previously.  Now check for
   whether a device is open at the top level (debug.c) instead of once
   for each device.  Removed the "quit" function for a few devices, because
   it was doing nothing.
 * Reduced global variable count to 1. :)

 * Split option setting functions to options.[ch], left debug_set_device
   in c.debug, as it does a bit more that just set an option.


Version 0.37. Tagged as 'DebugLib-0_37'
@
text
@d36 5
d94 1
@
