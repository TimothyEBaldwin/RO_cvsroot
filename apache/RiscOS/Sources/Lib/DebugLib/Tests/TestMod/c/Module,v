head	1.6;
access;
symbols
	DebugLib-0_72:1.6
	DebugLib-0_71:1.6
	DebugLib-0_70:1.6
	DebugLib-0_69:1.6
	DebugLib-0_68:1.6
	DebugLib-0_67:1.6
	DebugLib-0_66:1.6
	DebugLib-0_65:1.6
	DebugLib-0_64:1.6
	RO_5_07:1.6
	DebugLib-0_63:1.6
	DebugLib-0_62:1.6
	DebugLib-0_61:1.6
	DebugLib-0_60:1.6
	DebugLib-0_59:1.6
	DebugLib-0_58:1.6
	DebugLib-0_57:1.6
	dellis_autobuild_BaseSW:1.5
	DebugLib-0_56:1.5
	DebugLib-0_55:1.5
	DebugLib-0_54:1.5
	DebugLib-0_53:1.4
	DebugLib-0_52:1.4
	DebugLib-0_51:1.4
	DebugLib-0_50:1.4
	DebugLib-0_49:1.4
	sbrodie_sedwards_16Mar2000:1.4
	DebugLib-0_48:1.4
	DebugLib-0_47:1.4
	DebugLib-0_46:1.3
	dcotton_autobuild_BaseSW:1.6
	DebugLib-0_45:1.3
	DebugLib-0_44:1.3
	DebugLib-0_43:1.3
	DebugLib-0_42:1.3
	DebugLib-0_41:1.3
	DebugLib-0_40:1.3
	DebugLib-0_39:1.3
	DebugLib-0_38:1.3
	DebugLib-0_33-1_28_2_1:1.2
	DebugLib-0_37:1.2
	DebugLib-0_36:1.2
	DebugLib-0_35:1.2
	DebugLib-0_34:1.2
	nturton_DebugLib-0_24:1.2
	DebugLib-0_33:1.2
	DebugLib-0_32:1.2
	DebugLib-0_31:1.2
	DebugLib-0_30:1.2
	DebugLib-0_29:1.2
	DebugLib-0_28:1.2
	DebugLib-0_27:1.2
	DebugLib-0_26:1.2
	DebugLib-0_25:1.2
	DebugLib-0_24:1.2
	DebugLib-0_23:1.1
	DebugLib-0_22:1.1
	DebugLib-0_21:1.1
	DebugLib-0_20:1.1
	DebugLib-0_19:1.1
	DebugLib-0_18:1.1
	DebugLib-0_17:1.1
	DebugLib-0_16:1.1
	DebugLib-0_15:1.1
	DebugLib-0_14:1.1
	DebugLib-0_13:1.1
	DebugLib-0_12:1.1
	DebugLib-0_11:1.1
	DebugLib-0_10:1.1;
locks; strict;
comment	@# @;


1.6
date	2000.10.16.11.52.50;	author jberanek;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.17.09.56.21;	author jberanek;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.21.10.56.37;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	99.05.26.13.19.28;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	98.11.17.12.35.06;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.09.04.17.18.50;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  A number of changes, made over the months, but which I'd failed to
   checkin.  Tsk.
Detail:
  Some additions to CLI test harness.

  Bits of code in CLI and GUI test harness to check at compile time if
   OSLib and "Toolbox" style boolean definitions work with DebugLib.h

  Changed GUI test harness Makefile to use LocalRes:

  Removed calls to debug_atexit() in test harnesses, they're no longer
   necessary.

  Behaviour change: if you set a device in DebugLib$Device_<taskname>,
   debug_set_device() is called for that device on debug_initialise().

  Added check into debug_set_device(), if it's called with the current
   device, and the current device is initialised, it now does nothing,
   because it doesn't need to.

  Added extra checks into file and socket output methods that ensure
   initialising and/or terminating these devices repeatedly won't
   cause problems.

  Added some extra preprocessor malarky into DebugLib.h so that it should
   handle more boolean definitions.  It should handle (at least) "Toolbox"
   style ones and OSLib ones.

  Changed some used of debug_output_device() to debug_set_device() in Module
   test harness. debug_output_device() is deprecated.

  Fixed a bug in the core termination code...all open devices should now
   be closed correctly on exit.
Admin:
  Built library.
  Built and ran through some tests in the 3 test harnesses.


Version 0.57. Tagged as 'DebugLib-0_57'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* module.c - RISC OS module related code. */

/* ANSI Includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Risc OS Includes */
#include "kernel.h"
#include "swis.h"
#include "wimp.h"
#include "wimplib.h"

/* Other libraries */
#include "Debuglib/Debuglib.h"

#ifdef MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

/* Local Includes */
#include "module.h"
#include "error.h"

ERROR_STRUCT (BADSWI, "BadSWI");
#define TaskModule_SendMessage 0x4D300


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *module_initialise (char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *er = NULL;

#ifdef MEMCHECK
  MemCheck_Init();
  MemCheck_InterceptSCLStringFunctions();
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_RedirectToFilename ("RAM::0.$.tm_memch");
  atexit (MemCheck_OutputBlocksInfo);
  MemCheck_SetReadChecking (0);
#endif

  debug_initialise ("TestMod", "ram::0.$.out", "");
  debug_initialise_trace (DEBUGIT_OUTPUT, "");
  debug_set_device (FILE_OUTPUT);
  /* debug_set_device (SOCKET_OUTPUT); */
  /* debug_set_device (PRINTF_OUTPUT); */
  /* debug_set_device (DEBUGIT_OUTPUT); */
  /* debug_set_device (TRACKER_OUTPUT); */
  /* debug_set_device (OSFILE_OUTPUT); */
  /* debug_set_device (PDEBUG_OUTPUT); */

  return er;

  NOT_USED (cmd_tail);
  NOT_USED (podule_base);
  NOT_USED (pw);
}


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *module_finalise (int fatal, int podule, void *pw)
{
  return NULL;
  NOT_USED (fatal);
  NOT_USED (podule);
  NOT_USED (pw);
}


static void send_message(const char *url, int ordered)
{
  _kernel_oserror *er;
#if 0
  WimpMessage message;
  strncpy (message.data.bytes, url, 235);
  message.data.bytes[235] = '\0';

  message.hdr.size = 256;           /* its not really but it works */
  message.hdr.sender = 0;           /* my task handle */
  message.hdr.my_ref = 0;           /* no ref */
  message.hdr.your_ref = 0;         /* no ref */
  message.hdr.action_code = 307072; /* the (ANT) URL action code */

  /* Send the global message */
  /*wimp_send_message (Wimp_EUserMessageRecorded, &message, 0, 0, &th);*/

  er = _swix (TaskModule_SendMessage, _INR(0,4), 0u, &message, 0, 0, 0);
#else
  char message[256];
  int n;
  _kernel_swi_regs r;

  n = strlen(url);
  n = n>236?236:n;

  memset(message, 0, 256);

//    *(int *)msg_block = n + 20;
    *(int *)message = 256;
    *(int *)(message + 16) = 0x4af80; /* Message_URL */
    strncpy(message + 20, url, n);

    r.r[0] = ordered ? 2u : 0u;
    r.r[1] = (int)message;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    er = _kernel_swi(TaskModule_SendMessage, &r, &r);
#endif
  dprintf (("", "er = \"%s\"\n", er ? er->errmess : "<none>"));
}


/*------------------------------------------------------------------------------
 * module_swi
 *
 *      Module SWI handler.
 */
_kernel_oserror *module_swi (int swi_no, _kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *er =  NULL;

  switch (swi_no)
  {
    case 0:
      dprintf (("", "Changing output device to: %d\n", r->r[0]));
      debug_set_device ((debug_device)r->r[0]);
      break;

    case 1:
    /*  dprintf (((char *) r->r[0], (char *) r->r[1])); */
      dprintf (("", "Some text\n"));
      break;

    case 2:
      send_message("http://url1", 0);
      send_message("http://url2", 0);
      break;

    case 3:
      send_message("http://url1", 1);
      send_message("http://url2", 1);
      send_message("http://url3", 1);
      break;

    /* Unknown SWI */
    default:
      er = _swix (MessageTrans_ErrorLookup,
                  _INR(0,4), ERROR (BADSWI), 0, 0, 0, MODULE_NAME);
  }

  return er;
  NOT_USED (pw);
}
@


1.5
log
@  More boolean type changes.
Detail:
  More drastic changes to try and fix all the wonderful variants of
   the boolean type.

  DebugLib now uses <stdbool.h>, "bool", "false" and "true"
   internally.

  DebugLib.h now prototypes its functions with the type DebugLib_BOOL,
   and does preprocessor jiggery-pokery to try and ensure that
   it, plus TRUE, FALSE and BOOL get defined as something appropriate.
Admin:
  Tested by changing some of the test harnesses to include OSLib,
   stdbool and tboxlib headers.
  Fixed test harness module Makefile to include zm versions of
   libraries in all cases.


Version 0.54. Tagged as 'DebugLib-0_54'
@
text
@a20 1
#include <stdbool.h>
d30 1
d63 7
a69 9
  debug_output_device (FILE_OUTPUT);
  /* debug_output_device (SOCKET_OUTPUT); */
  /* debug_output_device (PRINTF_OUTPUT); */
  /* debug_output_device (DEBUGIT_OUTPUT); */
  /* debug_output_device (TRACKER_OUTPUT); */
  /* debug_output_device (OSFILE_OUTPUT); */
  /* debug_output_device (PDEBUG_OUTPUT); */

  debug_atexit ();
d152 1
a152 1
      debug_output_device ((debug_device)r->r[0]);
@


1.4
log
@  Tidy-up
Detail:
  Stewart's checkin about LibVersion reminded me I'd done some tidying
  (including the LibVersion thing) and not checked it in.  So here it is.

  Tidied Makefile, added standard headers to all the c and h files,
  including the regulation copyright message.

  Changed options.c so that it fits the coding style of the rest of
  DebugLib (naughty Stewart).

  Improved "strdup" routine.

  Moved stripdepend call into Makefile.

Admin:
  Built and tested.


Version 0.47. Tagged as 'DebugLib-0_47'
@
text
@d20 2
d26 2
d40 2
d95 46
d160 11
@


1.3
log
@ * Continued tidy-up of DebugLib:

 * All DebugLib functions now namespaced, they all start debug_<filename>_
  (except the functions in debug.c which are debug_).

 * Device specific #defines etc moved into device specific header files,
   e.g. debugit.h

 * Moved taskname prefixing to a central location, moved timestamping here
   also, added area/level prefixing, and tidied up this prefixing to make
   sure it looks good on all the possible debug devices.

 * Can now do any debuglib function to any debug device, including trace
   output, this hasn't been the case for a while.

 * Added new option, to set whether you want to prefix all debug lines
   with the area/level pair specified in dprintf, dfprintf etc.  Added
   new function to set this option.  debug_set_area_level_prefix ()

 * remotedb output now uses new "raw" output mode added to remotedb in
   version 0.06.  _DebugLib now requires remotedb version >= 0.06_

 * Added new test cases into CLI_App test harness, and changed a few things
   in TestMod.

 * Added Memcheck misc block registration into buffering code, which allows
   buffering to be used on the DebugLib Memcheck build.

 * Added lots of new function names into the always_ignore field which is
   used to tell trace which functions to ignore.  It seems that some the
   internet libraries have function names emebedded, which causes horrible
   loops when using DebugLib to output trace info to remotedb.  Also added
   debug_* and remote_debug_*

 * Added StrongHelp topics for ddumpbuf, debug_output_buffer_* and
   debug_set_area_level_prefix.  Updated the "Setting up the library"
   section.

 * Checked with all the debug devices except TML and serial.


Version 0.38. Tagged as 'DebugLib-0_38'
@
text
@d71 1
d85 1
d102 1
a102 1
      debug_output_device (r->r[0]);
@


1.2
log
@ * Fixed Makefile so that it doesn't use "newer" when copying files.  This
   meant that an export wouldn't overwrite newer libraries, when you'd
   expect it to.

 * Tidied test app Makefiles and build obey files.

 * Fixed GUI test app, wasn't declaring it's windows as autocreate and/or
   shared, which meant it missed events.  Removed all warnings also.

 * Now outputs the PDebug version information when a device is activiated.


Version 0.24. Tagged as 'DebugLib-0_24'
@
text
@d56 1
a56 1
  /* debug_initialise_trace (PDEBUG_OUTPUT, ""); */
@


1.1
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@d55 1
a55 1
  debug_initialise ("TestMod", "parallel:", "");
d57 1
a57 1
  /* debug_output_device (FILE_OUTPUT); */
d63 1
a63 1
  debug_output_device (PDEBUG_OUTPUT);
@
