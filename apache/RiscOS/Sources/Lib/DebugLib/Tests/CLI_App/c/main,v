head	1.12;
access;
symbols
	DebugLib-0_72:1.12
	DebugLib-0_71:1.12
	DebugLib-0_70:1.12
	DebugLib-0_69:1.12
	DebugLib-0_68:1.12
	DebugLib-0_67:1.12
	DebugLib-0_66:1.12
	DebugLib-0_65:1.12
	DebugLib-0_64:1.12
	RO_5_07:1.12
	DebugLib-0_63:1.12
	DebugLib-0_62:1.12
	DebugLib-0_61:1.12
	DebugLib-0_60:1.12
	DebugLib-0_59:1.12
	DebugLib-0_58:1.12
	DebugLib-0_57:1.12
	dellis_autobuild_BaseSW:1.11
	DebugLib-0_56:1.11
	DebugLib-0_55:1.10
	DebugLib-0_54:1.9
	DebugLib-0_53:1.8
	DebugLib-0_52:1.8
	DebugLib-0_51:1.8
	DebugLib-0_50:1.8
	DebugLib-0_49:1.8
	sbrodie_sedwards_16Mar2000:1.8
	DebugLib-0_48:1.8
	DebugLib-0_47:1.8
	DebugLib-0_46:1.8
	dcotton_autobuild_BaseSW:1.12
	DebugLib-0_45:1.8
	DebugLib-0_44:1.8
	DebugLib-0_43:1.8
	DebugLib-0_42:1.8
	DebugLib-0_41:1.8
	DebugLib-0_40:1.7
	DebugLib-0_39:1.7
	DebugLib-0_38:1.7
	DebugLib-0_33-1_28_2_1:1.5
	DebugLib-0_37:1.6
	DebugLib-0_36:1.6
	DebugLib-0_35:1.6
	DebugLib-0_34:1.6
	nturton_DebugLib-0_24:1.3
	DebugLib-0_33:1.5
	DebugLib-0_32:1.4
	DebugLib-0_31:1.3
	DebugLib-0_30:1.3
	DebugLib-0_29:1.3
	DebugLib-0_28:1.3
	DebugLib-0_27:1.3
	DebugLib-0_26:1.3
	DebugLib-0_25:1.3
	DebugLib-0_24:1.3
	DebugLib-0_23:1.2
	DebugLib-0_22:1.2
	DebugLib-0_21:1.2
	DebugLib-0_20:1.2
	DebugLib-0_19:1.2
	DebugLib-0_18:1.2
	DebugLib-0_17:1.2
	DebugLib-0_16:1.2
	DebugLib-0_15:1.1
	DebugLib-0_14:1.1
	DebugLib-0_13:1.1
	DebugLib-0_12:1.1
	DebugLib-0_11:1.1
	DebugLib-0_10:1.1;
locks; strict;
comment	@# @;


1.12
date	2000.10.16.11.52.50;	author jberanek;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.13.12.00.11;	author jberanek;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.18.15.33.04;	author jberanek;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.17.09.56.20;	author jberanek;	state Exp;
branches;
next	1.8;

1.8
date	99.09.08.13.40.12;	author jberanek;	state Exp;
branches;
next	1.7;

1.7
date	99.05.26.13.19.27;	author jberanek;	state Exp;
branches;
next	1.6;

1.6
date	99.05.19.15.20.13;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	99.05.10.15.48.37;	author jberanek;	state Exp;
branches;
next	1.4;

1.4
date	99.04.29.15.51.04;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.12.34.47;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	98.10.07.08.39.24;	author nbingham;	state Exp;
branches;
next	1.1;

1.1
date	98.09.04.17.18.25;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.12
log
@  A number of changes, made over the months, but which I'd failed to
   checkin.  Tsk.
Detail:
  Some additions to CLI test harness.

  Bits of code in CLI and GUI test harness to check at compile time if
   OSLib and "Toolbox" style boolean definitions work with DebugLib.h

  Changed GUI test harness Makefile to use LocalRes:

  Removed calls to debug_atexit() in test harnesses, they're no longer
   necessary.

  Behaviour change: if you set a device in DebugLib$Device_<taskname>,
   debug_set_device() is called for that device on debug_initialise().

  Added check into debug_set_device(), if it's called with the current
   device, and the current device is initialised, it now does nothing,
   because it doesn't need to.

  Added extra checks into file and socket output methods that ensure
   initialising and/or terminating these devices repeatedly won't
   cause problems.

  Added some extra preprocessor malarky into DebugLib.h so that it should
   handle more boolean definitions.  It should handle (at least) "Toolbox"
   style ones and OSLib ones.

  Changed some used of debug_output_device() to debug_set_device() in Module
   test harness. debug_output_device() is deprecated.

  Fixed a bug in the core termination code...all open devices should now
   be closed correctly on exit.
Admin:
  Built library.
  Built and ran through some tests in the 3 test harnesses.


Version 0.57. Tagged as 'DebugLib-0_57'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <time.h>

#include "OSLib/Core/macros.h"
#include "OSLib/Core/types.h"

#include "DebugLib/DebugLib.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

static void bogus3 (void)
{
  dprintf (("", "bogus3\n"));
}

static void bogus2 (void)
{
  dprintf (("", "bogus2\n"));
  bogus3 ();
}

static void bogus (void)
{
  dprintf (("", "bogus\n"));
  bogus2 ();
}

int main (void)
{
#ifdef MemCheck_MEMCHECK
  MemCheck_Init();
  MemCheck_InterceptSCLStringFunctions();
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_RedirectToFilename ("RAM::0.$.cli_memch");
  atexit (MemCheck_OutputBlocksInfo);
#endif

  debug_initialise ("CLI_App", "ram::0.$.cli_out", "");

  /* See what happens if you do a dprintf before setting a device */
  dprintf (("", "Test\n"));

  debug_set_device (DEBUGIT_OUTPUT);

  /* Try old-style monolithic set options call */
  debug_set_options (DebugLib_Options_StampDebug_On |
                     DebugLib_Options_TasknamePrefix_On, 1, 9600);

  /* And a new one, odd construct is to test DebugLib.h's handling
     of OSLib boolean type */
  {
    bool testing;

    testing = TRUE;

    /* debug_set_stamp_debug (FALSE); */
    debug_set_area_level_prefix (testing);
  }

#if 0
  debug_output_buffer_on (0, 1024);
#endif

  /* Call it a second time, to check how this behaves */
  debug_set_device (DEBUGIT_OUTPUT);

 /* { clock_t t = clock() + (5 * CLOCKS_PER_SEC); while (clock() < t); }*/

  /* And try using same device for trace and debug output */
  debug_initialise_trace (DEBUGIT_OUTPUT, "");

  dprintf (("", "No level\n"));
  dprintf (("UILib_7", "UILib 7\n"));
  dprintf (("UILib", "UILib\n"));
  dprintf (("UILib_2", "UILib 2\n"));
  dprintf (("UILib_", "UILib\n"));
  dprintf (("UILib_1,Flib_5","UILib_1,Flib_5\n"));


  dprintf (("h", "A little "));
  dprintf (("", "test\noh yes\n"));
  dprintf (("Error", "Is this gonna work?\n"));

  ddumpbuf("test", "012345678901234567", 17, 0);
  debug_set_dump_width(3);
  ddumpbuf("test", "012345678901234567", 17, 0);
  ddumpbuf("test", "012345678901234567", 17, 100);
  debug_set_dump_width(16);
  ddumpbuf("test", "012345678901234567", 16, 100);

  /* Trace testing */
  bogus ();

  /* Area padding tests */
  dprintf (("mmmmThisIs16Long", "16 long exactly\n"));
  dprintf (("mmmmmThisIs17Long", "17 long\n"));
  debug_set_area_pad_limit (6u);
  dprintf (("m6Long", "6 long exactly\n"));
  dprintf (("mm7Long", "7 long\n"));
  dprintf (("5Long", "5 long\n"));
  debug_set_area_pad_limit (0u);
  dprintf (("Short", "No padding\n"));
  dprintf (("LongLongLong", "No padding\n"));

  dprintf (("1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18","blah\n"));

#if 0
  debug_output_buffer_off (1, NULL_OUTPUT);
#endif

  /* Call terminate twice, to see how it behaves. */
  debug_terminate();
  debug_terminate();

  return 1;
}
@


1.11
log
@  Few little fixes
Detail:
  Levels specifier in DebugLib header now outputs correctly.  It now
   prints out a human readable form of what it's parsed from the
   DebugLib$Level_<taskname> system variable, showing the areas and
   levels specified.

  Added a few variable resets into "quit" functions of some of the
   output devices.  Done after a report from Ben that calling
   debug_terminate twice could cause a crash.  Not sure what
   device was used to cause the crash, also not sure if any of my
   changes will have changed the behaviour.  Added an extra test
   into the CLI_App test harness, it calls debug_terminate twice
   at the end. (Didn't manage to make it crash before or after
   changes).
Admin:
  StrongHelp document now gets copied to Export dir, along with
   headers, library and LibVersion.


Version 0.56. Tagged as 'DebugLib-0_56'
@
text
@d54 5
a58 1
  debug_atexit ();
d63 11
a73 3
  /* And a new one */
  /* debug_set_stamp_debug (FALSE); */
  debug_set_area_level_prefix (TRUE);
d79 1
d106 1
d126 1
@


1.10
log
@  Efficiency improvement and obscure overflow fix in area checking code
Detail:
  Every dprintf() call calls debug_check_level() to check whether the
   statement should be printed or not.  This function did take 2
   parameters, the 2nd of which was no longer being used.  The function
   now only takes 1 parameter.

  You are limited to having 16 comma-seperated area/level
   pairs in each dprintf(), but the routine to tokenise this string
   would've written into and beyond position 16 of a 16 element
   array if you passed a string with more than 16 pairs.  Routine now
   bails out after 16 pairs.
Admin:
  MemCheck rule of CLI test harness now uses correct MemCheck library,
   so actually does check memory. Only violations appear to be deep
   inside trace library.

  Added debug statement into CLI test harness with 18 levels, and
   verified DebugLib only uses 16. [Unfortunately couldn't verify
   array bounds were(n't) being violated, cos of MemCheck's limited
   stack protection].

  Fiddled with DebugLib's internal debugging so that DebugLib internal
   debug gets labelled with the level "__DebugLib".


Version 0.55. Tagged as 'DebugLib-0_55'
@
text
@d112 3
@


1.9
log
@  More boolean type changes.
Detail:
  More drastic changes to try and fix all the wonderful variants of
   the boolean type.

  DebugLib now uses <stdbool.h>, "bool", "false" and "true"
   internally.

  DebugLib.h now prototypes its functions with the type DebugLib_BOOL,
   and does preprocessor jiggery-pokery to try and ensure that
   it, plus TRUE, FALSE and BOOL get defined as something appropriate.
Admin:
  Tested by changing some of the test harnesses to include OSLib,
   stdbool and tboxlib headers.
  Fixed test harness module Makefile to include zm versions of
   libraries in all cases.


Version 0.54. Tagged as 'DebugLib-0_54'
@
text
@d106 2
@


1.8
log
@ * Improved DebugLib's area handling system.  Lines of debug may now belong
   to multiple "areas" of code, each at a specific level.  The filtering of
   debug at runtime is now done with a much more flexible system,
   areas/levels are masked in/out based on a new format for the
   DebugLib$Level_<taskname> system variable.  The description of this
   format has not made it into the StrongHelp document, it will go into
   this, and into the DebugLib web docs ASAP.

 * Added a new option to allow the area/level prefix in debug output to
   be padded to a particular width.  This makes the prefix much more
   useable.  The prefixing is turned on with the option
   "debug_set_area_level_prefix", and the padding controlled with
   "debug_set_area_pad_limit".

 * Added test cases for new levelling scheme into CLI test harness.

 * Updated StrongHelp manual somewhat.


Version 0.41. Tagged as 'DebugLib-0_41'
@
text
@d18 4
a21 1
#include "DebugLib/debuglib.h"
@


1.7
log
@ * Continued tidy-up of DebugLib:

 * All DebugLib functions now namespaced, they all start debug_<filename>_
  (except the functions in debug.c which are debug_).

 * Device specific #defines etc moved into device specific header files,
   e.g. debugit.h

 * Moved taskname prefixing to a central location, moved timestamping here
   also, added area/level prefixing, and tidied up this prefixing to make
   sure it looks good on all the possible debug devices.

 * Can now do any debuglib function to any debug device, including trace
   output, this hasn't been the case for a while.

 * Added new option, to set whether you want to prefix all debug lines
   with the area/level pair specified in dprintf, dfprintf etc.  Added
   new function to set this option.  debug_set_area_level_prefix ()

 * remotedb output now uses new "raw" output mode added to remotedb in
   version 0.06.  _DebugLib now requires remotedb version >= 0.06_

 * Added new test cases into CLI_App test harness, and changed a few things
   in TestMod.

 * Added Memcheck misc block registration into buffering code, which allows
   buffering to be used on the DebugLib Memcheck build.

 * Added lots of new function names into the always_ignore field which is
   used to tell trace which functions to ignore.  It seems that some the
   internet libraries have function names emebedded, which causes horrible
   loops when using DebugLib to output trace info to remotedb.  Also added
   debug_* and remote_debug_*

 * Added StrongHelp topics for ddumpbuf, debug_output_buffer_* and
   debug_set_area_level_prefix.  Updated the "Setting up the library"
   section.

 * Checked with all the debug devices except TML and serial.


Version 0.38. Tagged as 'DebugLib-0_38'
@
text
@d60 1
a60 1
#if 1
d66 1
a66 1
  { clock_t t = clock() + (5 * CLOCKS_PER_SEC); while (clock() < t); }
d76 1
d92 12
a103 1
#if 1
@


1.6
log
@  Buffer dumper added.
  A handful of miscellaneous header file fixes.
Detail:
  ddumpbuf(area, buffer pointer, size of buffer, offset) added to enable
    binary data to be dumped out to debug.
  debug_set_dump_width(width) sets the number of bytes of data per line
    of debug output.  This must be a positive integer greater than zero
    and less than 64.
  Macro out of serial port function fixed.
  Pragma declarations fixed.
Admin:
  Modified CLI test program to dump buffers out and verified the widthing
    and offset work.

Version 0.34. Tagged as 'DebugLib-0_34'
@
text
@d16 1
d46 1
a46 1
  MemCheck_RedirectToFilename ("RAM::0.$.db_memch");
d50 3
a52 2
  debug_initialise ("CLI_App", "ram::0.$.flibble", "");
  debug_output_device (DEBUGIT_OUTPUT);
d57 11
a67 1
  debug_set_stamp_debug (FALSE);
a69 1
  debug_atexit ();
d77 1
d90 4
@


1.5
log
@ * Overhauled how DebugLib options are handled.  Options are now held in
   an options structure internal to DebugLib.  Options are set one at a
   time by function calls, this makes it much easier to add new options
   over time.  debug_set_options and debug_output_device now deprecated,
   but still provided.  Updated StrongHelp manual to document this
   new behaviour.

 * Fixed trace output somewhat...should now look better on remotedb
   output (no extraneous CRs), and you can now set the trace device to
   be the same as the main debug device.  Setting trace device to "printf"
   now also works (file still to do, as you still can't "dfprintf" to file)

 * Added one of the new options function calls to the CLI_App test harness,
   to test functionality.

 * Improved the !MkCleans for the test harnesses.


Version 0.33. Tagged as 'DebugLib-0_33'
@
text
@d70 7
@


1.4
log
@ * Added debug and MemCheck targets to DebugLib.  They don't get exported,
   as they are only for DebugLib development.  They were used to spot...

 * Found and fixed malloc block overwrite in the level checking code.  I
   was mallocing too small of a block by doing strlen on the wrong
   string.  This bug was causing problems when level filtering was used
   with apps compiled with DebugLib.

 * Tidied OS_ReadVarVal veneer.

 * Added MemCheck code and build target to CLI_App test program, which uses
   the new MemCheck target of DebugLib.


Version 0.32. Tagged as 'DebugLib-0_32'
@
text
@d50 2
a51 1
  debug_output_device (FILE_OUTPUT);
d54 4
a57 1
/*  debug_initialise_trace (TML_OUTPUT, ""); */
@


1.3
log
@ * Fixed Makefile so that it doesn't use "newer" when copying files.  This
   meant that an export wouldn't overwrite newer libraries, when you'd
   expect it to.

 * Tidied test app Makefiles and build obey files.

 * Fixed GUI test app, wasn't declaring it's windows as autocreate and/or
   shared, which meant it missed events.  Removed all warnings also.

 * Now outputs the PDebug version information when a device is activiated.


Version 0.24. Tagged as 'DebugLib-0_24'
@
text
@d18 3
d41 8
d51 2
@


1.2
log
@Changed Makefile to remove mistake in Module build.

Version 0.16. Tagged as 'DebugLib-0_16'
@
text
@d19 1
a19 1
void bogus3 (void)
d24 1
a24 1
void bogus2 (void)
d30 1
a30 1
void bogus (void)
a37 1
/*  debug_initialise ("CLI_App", "parallel:", "");*/
d39 2
a40 9
/*  debug_set_options (0u);*/
  debug_output_device (TML_OUTPUT);
/*   debug_output_device (PDEBUG_OUTPUT); */
/*  debug_output_device (SOCKET_OUTPUT); */
/*   debug_output_device (TRACKER_OUTPUT); */
/*  debug_output_device (PDEBUG_OUTPUT); */
/*  debug_set_options (0u, 57600, 1); */
/*  debug_output_device (OSFILE_OUTPUT); */
  debug_initialise_trace (TML_OUTPUT, "");
d51 1
@


1.1
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@d41 1
a41 1
  debug_output_device (DEBUGIT_OUTPUT);
d48 1
a48 1
  debug_initialise_trace (DEBUGIT_OUTPUT, "");
@
