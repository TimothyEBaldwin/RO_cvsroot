head	1.2;
access;
symbols
	DebugLib-0_72:1.2
	DebugLib-0_71:1.2
	DebugLib-0_70:1.2
	DebugLib-0_69:1.2
	DebugLib-0_68:1.2
	DebugLib-0_67:1.2
	DebugLib-0_66:1.2
	DebugLib-0_65:1.2
	DebugLib-0_64:1.2
	RO_5_07:1.2
	DebugLib-0_63:1.2
	DebugLib-0_62:1.2
	DebugLib-0_61:1.2
	DebugLib-0_60:1.2
	DebugLib-0_59:1.2
	DebugLib-0_58:1.2
	DebugLib-0_57:1.2
	dellis_autobuild_BaseSW:1.2
	DebugLib-0_56:1.2
	DebugLib-0_55:1.2
	DebugLib-0_54:1.2
	DebugLib-0_53:1.2
	DebugLib-0_52:1.2
	DebugLib-0_51:1.2
	DebugLib-0_50:1.2
	DebugLib-0_49:1.2
	sbrodie_sedwards_16Mar2000:1.2
	DebugLib-0_48:1.2
	DebugLib-0_47:1.2
	DebugLib-0_46:1.2
	dcotton_autobuild_BaseSW:1.2
	DebugLib-0_45:1.2
	DebugLib-0_44:1.2
	DebugLib-0_43:1.2
	DebugLib-0_42:1.2
	DebugLib-0_41:1.2
	DebugLib-0_40:1.2
	DebugLib-0_39:1.2
	DebugLib-0_38:1.2
	DebugLib-0_33-1_28_2_1:1.2
	DebugLib-0_37:1.2
	DebugLib-0_36:1.2
	DebugLib-0_35:1.2
	DebugLib-0_34:1.2
	nturton_DebugLib-0_24:1.2
	DebugLib-0_33:1.2
	DebugLib-0_32:1.2
	DebugLib-0_31:1.2
	DebugLib-0_30:1.2
	DebugLib-0_29:1.2
	DebugLib-0_28:1.2
	DebugLib-0_27:1.2
	DebugLib-0_26:1.2
	DebugLib-0_25:1.2
	DebugLib-0_24:1.2
	DebugLib-0_23:1.1
	DebugLib-0_22:1.1
	DebugLib-0_21:1.1
	DebugLib-0_20:1.1
	DebugLib-0_19:1.1
	DebugLib-0_18:1.1
	DebugLib-0_17:1.1
	DebugLib-0_16:1.1
	DebugLib-0_15:1.1
	DebugLib-0_14:1.1
	DebugLib-0_13:1.1
	DebugLib-0_12:1.1
	DebugLib-0_11:1.1
	DebugLib-0_10:1.1;
locks; strict;
comment	@# @;


1.2
date	98.11.17.12.34.58;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.09.04.17.18.38;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.2
log
@ * Fixed Makefile so that it doesn't use "newer" when copying files.  This
   meant that an export wouldn't overwrite newer libraries, when you'd
   expect it to.

 * Tidied test app Makefiles and build obey files.

 * Fixed GUI test app, wasn't declaring it's windows as autocreate and/or
   shared, which meant it missed events.  Removed all warnings also.

 * Now outputs the PDebug version information when a device is activiated.


Version 0.24. Tagged as 'DebugLib-0_24'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    main.c                                                      */
/* Purpose: Main file for project.  This contains all                   */
/*          the code necessary for a bare toolbox                       */
/*          application by default.                                     */
/* Author:  Neil Bingham (mailto:NBingham@@acorn.com)                    */
/* History: 0.00  - dd                                                  */
/*                  Created.                                            */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "GadgetDefs.h"
#include "EventMgr.h"

/*- --------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* Declaration of window & menu handles                                                           */
ObjectId Main_WindowHandle;
ObjectId Ibar_MenuHandle;
ObjectId Icon_BarHandle;
ObjectId ProgInfo_WindowHandle;
ObjectId Output_WindowHandle;

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

MessagesFD message_block;              /* declare a message block for use with toolbox initialise */
IdBlock    event_id_block;             /* declare an event block for use with toolbox initialise  */
int        current_wimp;               /* the current version of the wimp we are using            */
int        task_id;                    /* and our task handle                                     */
int        quit = 0;                   /* declare a flag to indicate when we should quit          */


/* This array tells toolbox initialise which wimp messages we want to know about                  */
static int wimp_messages[]  = {
                                Wimp_MQuit,
                                Wimp_MPreQuit
                              };


/* This array tells toolbox initialise which toolbox events we are interested in.  A value        */
/* of 0 indicates we want all events.                                                             */
static int toolbox_events[] = {0};


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* quit_program                                                         */
/*                                                                      */
/* Function is called when quit is selected from the TaskWindow, or the */
/* user selects quit from the iconbar menu                              */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int quit_program(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE (event_code); IGNORE (event); IGNORE (id_block); IGNORE (handle);
  quit = 1;
  return(TRUE);
}


/************************************************************************/
/* startup                                                              */
/*                                                                      */
/* Function is called upon startup of the program after initialisation, */
/* and Toolbox registration.                                            */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void startup(void)
{
  /* Nothing to do */
}


/************************************************************************/
/* attach_handlers                                                      */
/*                                                                      */
/* Function will be called when an object is auto-created (usually the  */
/* Iconbar).  We can now register all our other objects, plus the events*/
/* associated with them.                                                */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int attach_handlers(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  _kernel_oserror               *er;
  ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

  IGNORE (event_code); IGNORE (handle);

  /* Deal with all events on the main window */
  if (strcmp(created_event->template_name, "main_win")==0)
  {
    /* Define handle for main_win */
    Main_WindowHandle = id_block->self_id;

    er = event_register_toolbox_handler (Main_WindowHandle, ActionButton_Selected,
                                         main_ab_clicked, NULL);
    error_check_exit(er);
  }

  else if (strcmp(created_event->template_name, "output_win")==0)
  {
    /* Assign a handle to the ibar_menu */
    Output_WindowHandle = id_block->self_id;

    er = event_register_toolbox_handler (Output_WindowHandle, ActionButton_Selected,
                                         output_ab_clicked, NULL);
  }

  /* Deal with all events on the iconbar menu */
  else if (strcmp(created_event->template_name, "ibar_menu")==0)
  {
    /* Assign a handle to the ibar_menu */
    Ibar_MenuHandle = id_block->self_id;

    /* Quit menu entry - ibar menu */
    er = event_register_toolbox_handler(id_block->self_id, menu_quit_event, quit_program, NULL);
    error_check(er);
  }

  /* Create handle for Proginfo */
  if (strcmp(created_event->template_name, "ProgInfo")==0)
  {
    ProgInfo_WindowHandle = id_block->self_id;
  }

  /* Deal with all events on the Iconbar */
  else if (strcmp(created_event->template_name, "Iconbar")==0)
  {
    /* Assign a handle to the ibar_menu */
    Icon_BarHandle = id_block->self_id;

    /* Run startup() function from here. */
    startup();
  }

  return (TRUE);
}



/************************************************************************/
/* message_control                                                      */
/*                                                                      */
/* Function handles wimp messages coming to the program.  Then,         */
/* depending on the message, the relevant function is called.           */
/*                                                                      */
/* Parameters: WimpMessage parameters.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int message_control(WimpMessage *message, void *handle)
{
  IGNORE (handle);

  switch(message->hdr.action_code)
  {
    /* Quit Message */
    case Wimp_MQuit:
      quit = 1;
    break;
  }
  return (TRUE);
}


/************************************************************************/
/* default_key_handler                                                  */
/*                                                                      */
/* Function processes all key presses, and if they are not used by this */
/* program (e.g. F12), then they are ignored, and the WIMP process them */
/*                                                                      */
/* Parameters: WimpEventHandler parameters.                             */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpKeyPressedEvent *key_event = (WimpKeyPressedEvent *) event;

  IGNORE (event_code); IGNORE (id_block); IGNORE (handle);

  wimp_process_key(key_event->key_code);

  return(TRUE);
}


/************************************************************************/
/* initialise                                                           */
/*                                                                      */
/* Function is from main() to setup various things vital to the program */
/* including Toolbox registration, message handle creation...           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void initialise(void)
{
  _kernel_oserror *er;

  /* Initialise ourselves with the event library. */
  er = event_initialise(&event_id_block);
  error_check_exit(er);

  /* As we have set the object flags on our iconbar object to be auto-create and auto_show,       */
  /* we are initially only interested in an auto create event when we receive this we can then    */
  /* attach handlers for our window and menu.                                                     */
  er=event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,attach_handlers,NULL);
  error_check_exit(er);

  /* We must register our Message handler for the Quit message. In this way we can be told to     */
  /* quit by the task manager                                                                     */
  er = event_register_message_handler(Wimp_MQuit, message_control, NULL);
  error_check_exit(er);

  /* This function prevents the program trapping unnecessary key presses such as F12 and lets     */
  /* them get through to the WIMP                                                                 */
  er = event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL);
  error_check_exit(er);

  /* Now we have set up our handlers, we must initialise ourselves with the toolbox. Note that    */
  /* a parameter that we are not interested in (eg. in this case the sprite area) can be set to   */
  /* NULL.                                                                                        */
  er = toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                          &message_block, &event_id_block,
                          &current_wimp, &task_id, NULL);
  error_check_exit(er);
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* Function is called on initialisation.  initialise() is called from   */
/* here, and then event_poll().                                         */
/*                                                                      */
/* Parameters: Command line parameters supported.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int main (void)
{

  WimpPollBlock   block;
  int             code;
  _kernel_oserror *er;

#ifdef MEM_CHECK
  MemCheck_Init();
  MemCheck_InterceptSCLStringFunctions();
  MemCheck_RedirectToFilename("adfs::4.$.mc");
#endif

/*   debug_initialise("Blah", "", ""); */
/*   debug_atexit(); */
/*   debug_output_device(SERIAL_OUTPUT); */
/*   debug_set_options(0, 1, 9600); */
/*  */
/*   dprintf(("", "Test")); */
/*  */
/*   dfprintf(("", DEBUGIT_OUTPUT, "Hello\n")); */
/*   dfprintf(("", PDEBUG_OUTPUT, "Hello\n")); */

  error_initialise(0, "DebugTest", ERRORS_TO_TBACK);

  /* Perform initialisation of various aspects of ourselves */
  initialise();

  /* While we do not have our quit flag set call event poll */
  while(!quit)
  {
    er = event_poll(&code, &block, NULL);
    error_check(er);
  }

  /* It is time to quit. By simply calling exit the toolbox will be informed of our demise */
  exit(0);
}
@


1.1
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@d76 1
d95 1
a95 1
  // Do stuff here :-)
d116 2
d123 4
d133 3
a160 3
    /* Register all events */
    tbox_event_control();

d183 2
d211 2
d275 1
a275 1
int main(int argc, char *argv[])
@
