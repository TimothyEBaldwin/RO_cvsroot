head	1.5;
access;
symbols
	DebugLib-0_72:1.5
	DebugLib-0_71:1.5
	DebugLib-0_70:1.5
	DebugLib-0_69:1.5
	DebugLib-0_68:1.5
	DebugLib-0_67:1.5
	DebugLib-0_66:1.5
	DebugLib-0_65:1.5
	DebugLib-0_64:1.5
	RO_5_07:1.5
	DebugLib-0_63:1.5
	DebugLib-0_62:1.5
	DebugLib-0_61:1.5
	DebugLib-0_60:1.5
	DebugLib-0_59:1.4
	DebugLib-0_58:1.4
	DebugLib-0_57:1.4
	dellis_autobuild_BaseSW:1.3
	DebugLib-0_56:1.3
	DebugLib-0_55:1.3
	DebugLib-0_54:1.3
	DebugLib-0_53:1.3
	DebugLib-0_52:1.3
	DebugLib-0_51:1.3
	DebugLib-0_50:1.3
	DebugLib-0_49:1.3
	sbrodie_sedwards_16Mar2000:1.3
	DebugLib-0_48:1.3
	DebugLib-0_47:1.3
	DebugLib-0_46:1.3
	dcotton_autobuild_BaseSW:1.5
	DebugLib-0_45:1.3
	DebugLib-0_44:1.3
	DebugLib-0_43:1.3
	DebugLib-0_42:1.3
	DebugLib-0_41:1.3
	DebugLib-0_40:1.3
	DebugLib-0_39:1.3
	DebugLib-0_38:1.3
	DebugLib-0_33-1_28_2_1:1.3
	DebugLib-0_37:1.3
	DebugLib-0_36:1.3
	DebugLib-0_35:1.3
	DebugLib-0_34:1.3
	nturton_DebugLib-0_24:1.2
	DebugLib-0_33:1.3
	DebugLib-0_32:1.2
	DebugLib-0_31:1.2
	DebugLib-0_30:1.2
	DebugLib-0_29:1.2
	DebugLib-0_28:1.2
	DebugLib-0_27:1.2
	DebugLib-0_26:1.2
	DebugLib-0_25:1.2
	DebugLib-0_24:1.2
	DebugLib-0_23:1.1
	DebugLib-0_22:1.1
	DebugLib-0_21:1.1
	DebugLib-0_20:1.1
	DebugLib-0_19:1.1
	DebugLib-0_18:1.1
	DebugLib-0_17:1.1
	DebugLib-0_16:1.1
	DebugLib-0_15:1.1
	DebugLib-0_14:1.1
	DebugLib-0_13:1.1
	DebugLib-0_12:1.1
	DebugLib-0_11:1.1
	DebugLib-0_10:1.1;
locks; strict;
comment	@# @;


1.5
date	2001.05.02.17.08.19;	author mjenning;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.16.11.52.50;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	99.05.10.15.48.41;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	98.11.17.12.34.56;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.09.04.17.18.36;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  A new DebugLib device added to allow debugging via the BrainLink module.
  The GUI_test program has been modified to support the new DebugLib device.
  DebugLib stronghelp documentaion has been updated.
Detail:

Admin:
  Tested on my RiscPC, seems to work fine.


Version 0.60. Tagged as 'DebugLib-0_60'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:                                                                */
/* Purpose:                                                             */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@@acorn.com>                    */
/* History: 0.01  d                                                     */
/*                Created.                                              */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "EventMgr.h"
#include "GadgetDefs.h"
#include "Outputer.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

#define Filename_Length		55
#define Sockets_Length		25
#define Level_Length		255
#define Trace_Length		255
#define TraceDev_Length		20

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* main_ab_clicked                                                      */
/*                                                                      */
/* Function is called when an actionbutton in the main window is clicked*/
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
int main_ab_clicked(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  IGNORE (event_code); IGNORE (event); IGNORE (id_block); IGNORE (handle);

  activate_library();

  return(TRUE);
}


/************************************************************************/
/* output_ab_clicked                                                    */
/*                                                                      */
/* Function is called when an actionbutton in the output win is clicked */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
int output_ab_clicked(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  IGNORE (event_code); IGNORE (event); IGNORE (handle);

  switch(id_block->self_component)
  {
    case(OutputWin_Send_Dprintf_Data):		send_dprintf_output();		break;
    case(OutputWin_Send_Dfprintf_Data):		send_dfprintf_output();		break;
    case(OutputWin_Send_All_Data):
    {
      send_dprintf_output();
      send_dfprintf_output();
      break;
    }
  }
  return(TRUE);
}


/************************************************************************/
/* activate_library                                                     */
/*                                                                      */
/* Function is called when the user enables the library from the main   */
/* window.                                                              */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void activate_library(void)
{
  _kernel_oserror	*er;
  int			 state=0;
  debug_device output = NULL_OUTPUT;
  ComponentId		 selected=0;
  char			*filename, *socket_settings, *level_var, *trace, *trace_dev;
  char			 sspeed[10], sport[3];
  int			 sspeed_i, sport_i;

  /* Find out which option is selected */
  er = radiobutton_get_state(0, Main_WindowHandle, MainWin_Stream_TML, &state, &selected);
  error_check(er);

  switch(selected)
  {
    case(MainWin_Stream_File):		output = FILE_OUTPUT;		break;
    case(MainWin_Stream_Sockets):	output = SOCKET_OUTPUT;		break;
    case(MainWin_Stream_Parallel):	output = PDEBUG_OUTPUT;		break;
    case(MainWin_Stream_Printf):	output = PRINTF_OUTPUT;		break;
    case(MainWin_Stream_DebugIt):	output = DEBUGIT_OUTPUT;	break;
    case(MainWin_Stream_TML):		output = TML_OUTPUT;		break;
    case(MainWin_Stream_Tracker):	output = TRACKER_OUTPUT;	break;
    case(MainWin_Stream_Serial):	output = SERIAL_OUTPUT;		break;
    case(MainWin_Stream_BrainLink):     output = BRAINLINK_OUTPUT;      break;
  }

  /* OK, now read the other options. */
  if ( ((filename = malloc(Filename_Length)) == NULL)		||
       ((socket_settings = malloc(Sockets_Length)) == NULL)	||
       ((trace = malloc(Trace_Length)) == NULL)			||
       ((trace_dev = malloc(TraceDev_Length)) == NULL)		||
       ((level_var = malloc(Level_Length)) == NULL)		)
  {
    error_check_malloc(message_block, "NoMem");
  }
  else
  {
    er = writablefield_get_value(0, Main_WindowHandle, MainWin_Stream_File_Writable, filename,
                                 Filename_Length, 0);
    error_check(er);
    er = writablefield_get_value(0, Main_WindowHandle, MainWin_Stream_Sockets_Writable,
                                 socket_settings, Sockets_Length, 0);
    error_check(er);
    er = writablefield_get_value(0, Main_WindowHandle, MainWin_Level_Writable, level_var,
                                 Level_Length, 0);
    error_check(er);
    er = writablefield_get_value(0, Main_WindowHandle, MainWin_Trace_Exclude, trace,
                                 Trace_Length, 0);
    error_check(er);
    er = stringset_get_selected(0, Main_WindowHandle, MainWin_Trace_Device, trace_dev,
                                TraceDev_Length, 0);
    error_check(er);
    er = stringset_get_selected(0, Main_WindowHandle, MainWin_Stream_Serial_Port, sport, 3, 0);
    error_check(er);
    sport_i = atoi(sport);
    er = stringset_get_selected(0, Main_WindowHandle, MainWin_Stream_Serial_Speed, sspeed, 10,0);
    error_check(er);
    sspeed_i = atoi(sspeed);


    /* Setup Level System variable */
    state = 0;
    er = optionbutton_get_state(0, Main_WindowHandle, MainWin_Level_Option, &state);
    error_check(er);

    if (state == 0)
    {
      /* Option is off.  Set variable to be contents of writable */
      _kernel_setenv(LEVEL_VAR, level_var);
    }
    else
    {
      /* Option is on.  Set variable to be undefined. HACK.  _kernel_setenv with second parameter
       * set to NULL is supposed to undefined a var - it doesn't :-( */
      _kernel_oscli("unset Test$DB");
/*       _kernel_setenv(LEVEL_VAR, NULL); */
    }

    /* Setup socket system variable */
    _kernel_setenv(SOCKET_VAR, socket_settings);

    /* Setup Debug_Initialise */
    debug_initialise(APP_NAME, filename, LEVEL_VAR);

    /* A little compile time test here, see if DebugLib.h handles "Toolbox" style
       boolean definition */
    {
      BOOL on;

      on = TRUE;

      debug_set_stamp_debug(on);
    }

    /* Setup debug_set_options */
    er = optionbutton_get_state(0, Main_WindowHandle, MainWin_Prefix_Taskname, &state);
    error_check(er);

    if (state == 0)
    {
      debug_set_options(DebugLib_Options_TasknamePrefix_Off | DebugLib_Options_SerialPortLF_On,
                        sport_i, sspeed_i);
    }
    else
    {
      debug_set_options(DebugLib_Options_TasknamePrefix_On | DebugLib_Options_SerialPortLF_On,
                        sport_i, sspeed_i);
    }

    /* Setup device */
    debug_output_device(output);

    /* See if trace is required */
    state = 0;
    er = optionbutton_get_state(0, Main_WindowHandle, MainWin_Trace_Option, &state);
    error_check(er);

    if (state == 1)
    {
      if (strcmp(trace_dev, "PDebug") == 0)
      {
        debug_initialise_trace(PDEBUG_OUTPUT, trace);
      }
      else if (strcmp(trace_dev, "File") == 0)
      {
        debug_initialise_trace(FILE_OUTPUT, trace);
      }
      else if (strcmp(trace_dev, "TML") == 0)
      {
        debug_initialise_trace(TML_OUTPUT, trace);
      }
    }

    /* Send a welcome message */
    dprintf(("", "\nWelcome to the DebugLib test harness!\n\n"));

    /* OK, Fade Activate Library button */
    er = gadget_set_flags(0, Main_WindowHandle, MainWin_Activate_Library, Gadget_Faded);
    error_check(er);
    /* Setup Output Window */
    setup_output_win(output);

    free(filename);
    free(socket_settings);
    free(level_var);
    free(trace);
    free(trace_dev);
  }
}
@


1.4
log
@  A number of changes, made over the months, but which I'd failed to
   checkin.  Tsk.
Detail:
  Some additions to CLI test harness.

  Bits of code in CLI and GUI test harness to check at compile time if
   OSLib and "Toolbox" style boolean definitions work with DebugLib.h

  Changed GUI test harness Makefile to use LocalRes:

  Removed calls to debug_atexit() in test harnesses, they're no longer
   necessary.

  Behaviour change: if you set a device in DebugLib$Device_<taskname>,
   debug_set_device() is called for that device on debug_initialise().

  Added check into debug_set_device(), if it's called with the current
   device, and the current device is initialised, it now does nothing,
   because it doesn't need to.

  Added extra checks into file and socket output methods that ensure
   initialising and/or terminating these devices repeatedly won't
   cause problems.

  Added some extra preprocessor malarky into DebugLib.h so that it should
   handle more boolean definitions.  It should handle (at least) "Toolbox"
   style ones and OSLib ones.

  Changed some used of debug_output_device() to debug_set_device() in Module
   test harness. debug_output_device() is deprecated.

  Fixed a bug in the core termination code...all open devices should now
   be closed correctly on exit.
Admin:
  Built library.
  Built and ran through some tests in the 3 test harnesses.


Version 0.57. Tagged as 'DebugLib-0_57'
@
text
@d130 1
@


1.3
log
@ * Overhauled how DebugLib options are handled.  Options are now held in
   an options structure internal to DebugLib.  Options are set one at a
   time by function calls, this makes it much easier to add new options
   over time.  debug_set_options and debug_output_device now deprecated,
   but still provided.  Updated StrongHelp manual to document this
   new behaviour.

 * Fixed trace output somewhat...should now look better on remotedb
   output (no extraneous CRs), and you can now set the trace device to
   be the same as the main debug device.  Setting trace device to "printf"
   now also works (file still to do, as you still can't "dfprintf" to file)

 * Added one of the new options function calls to the CLI_App test harness,
   to test functionality.

 * Improved the !MkCleans for the test harnesses.


Version 0.33. Tagged as 'DebugLib-0_33'
@
text
@d189 10
a198 1
    debug_atexit();
@


1.2
log
@ * Fixed Makefile so that it doesn't use "newer" when copying files.  This
   meant that an export wouldn't overwrite newer libraries, when you'd
   expect it to.

 * Tidied test app Makefiles and build obey files.

 * Fixed GUI test app, wasn't declaring it's windows as autocreate and/or
   shared, which meant it missed events.  Removed all warnings also.

 * Now outputs the PDebug version information when a device is activiated.


Version 0.24. Tagged as 'DebugLib-0_24'
@
text
@d22 1
d109 2
a110 1
  int			 state=0, output=0;
@


1.1
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@a43 21
/************************************************************************/
/* tbox_event_control                                                   */
/*                                                                      */
/* Function registers all required events.                              */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void tbox_event_control(void)
{
  _kernel_oserror	*er;

  er = event_register_toolbox_handler(Main_WindowHandle,ActionButton_Selected,main_ab_clicked,NULL);
  error_check_exit(er);
  er = event_register_toolbox_handler(Output_WindowHandle, ActionButton_Selected, output_ab_clicked,
                                      NULL);
  error_check_exit(er);
}

d57 2
d77 2
@
