head	1.4;
access;
symbols
	DebugLib-0_72:1.4
	DebugLib-0_71:1.4
	DebugLib-0_70:1.4
	DebugLib-0_69:1.4
	DebugLib-0_68:1.4
	DebugLib-0_67:1.4
	DebugLib-0_66:1.4
	DebugLib-0_65:1.4
	DebugLib-0_64:1.4
	RO_5_07:1.4
	DebugLib-0_63:1.4
	DebugLib-0_62:1.4
	DebugLib-0_61:1.4
	DebugLib-0_60:1.4
	DebugLib-0_59:1.3
	DebugLib-0_58:1.3
	DebugLib-0_57:1.3
	dellis_autobuild_BaseSW:1.3
	DebugLib-0_56:1.3
	DebugLib-0_55:1.3
	DebugLib-0_54:1.3
	DebugLib-0_53:1.3
	DebugLib-0_52:1.3
	DebugLib-0_51:1.3
	DebugLib-0_50:1.3
	DebugLib-0_49:1.3
	sbrodie_sedwards_16Mar2000:1.3
	DebugLib-0_48:1.3
	DebugLib-0_47:1.3
	DebugLib-0_46:1.2
	dcotton_autobuild_BaseSW:1.4
	DebugLib-0_45:1.2
	DebugLib-0_44:1.2
	DebugLib-0_43:1.2
	DebugLib-0_42:1.2
	DebugLib-0_41:1.2
	DebugLib-0_40:1.2
	DebugLib-0_39:1.2
	DebugLib-0_38:1.2
	DebugLib-0_33-1_28_2_1:1.2
	DebugLib-0_37:1.2
	DebugLib-0_36:1.2
	DebugLib-0_35:1.2
	DebugLib-0_34:1.2
	nturton_DebugLib-0_24:1.2
	DebugLib-0_33:1.2
	DebugLib-0_32:1.2
	DebugLib-0_31:1.2
	DebugLib-0_30:1.2
	DebugLib-0_29:1.2
	DebugLib-0_28:1.2
	DebugLib-0_27:1.2
	DebugLib-0_26:1.2
	DebugLib-0_25:1.2
	DebugLib-0_24:1.2
	DebugLib-0_23:1.1
	DebugLib-0_22:1.1
	DebugLib-0_21:1.1
	DebugLib-0_20:1.1
	DebugLib-0_19:1.1
	DebugLib-0_18:1.1
	DebugLib-0_17:1.1
	DebugLib-0_16:1.1
	DebugLib-0_15:1.1
	DebugLib-0_14:1.1
	DebugLib-0_13:1.1
	DebugLib-0_12:1.1
	DebugLib-0_11:1.1
	DebugLib-0_10:1.1;
locks; strict;
comment	@# @;


1.4
date	2001.05.02.17.08.19;	author mjenning;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.21.10.56.36;	author jberanek;	state Exp;
branches;
next	1.2;

1.2
date	98.11.17.12.35.00;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.09.04.17.18.39;	author jberanek;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  A new DebugLib device added to allow debugging via the BrainLink module.
  The GUI_test program has been modified to support the new DebugLib device.
  DebugLib stronghelp documentaion has been updated.
Detail:

Admin:
  Tested on my RiscPC, seems to work fine.


Version 0.60. Tagged as 'DebugLib-0_60'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:                                                                */
/* Purpose:                                                             */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@@acorn.com>                    */
/* History: 0.01  d                                                     */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "GadgetDefs.h"
#include "Outputer.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

#define Text_Length		30
#define Level_Length		10

static char text[Text_Length];
static char level[Level_Length];

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

void setup_output_win(int dev)
{
  _kernel_oserror	*er;

  switch(dev)
  {
    case(FILE_OUTPUT):
    {
      displayfield_set_value(0, Output_WindowHandle, OutputWin_Device, "File");
      break;
    }
    case(SOCKET_OUTPUT):
    {
      displayfield_set_value(0, Output_WindowHandle, OutputWin_Device, "Sockets");
      break;
    }
    case(PDEBUG_OUTPUT):
    {
      displayfield_set_value(0, Output_WindowHandle, OutputWin_Device, "Parallel");
      break;
    }
    case(PRINTF_OUTPUT):
    {
      displayfield_set_value(0, Output_WindowHandle, OutputWin_Device, "printf (stdout)");
      break;
    }
    case(DEBUGIT_OUTPUT):
    {
      displayfield_set_value(0, Output_WindowHandle, OutputWin_Device, "DebugIt (!ListDebug)");
      break;
    }
    case(TML_OUTPUT):
    {
      displayfield_set_value(0, Output_WindowHandle, OutputWin_Device, "TML Podule");
      break;
    }
    case(TRACKER_OUTPUT):
    {
      displayfield_set_value(0, Output_WindowHandle, OutputWin_Device, "!Tracker");
      break;
    }
    case(SERIAL_OUTPUT):
    {
      displayfield_set_value(0, Output_WindowHandle, OutputWin_Device, "Serial");
      break;
    }
    case(BRAINLINK_OUTPUT):
    {
       displayfield_set_value(0, Output_WindowHandle, OutputWin_Device, "Serial");
       break;
    }
  }
  er = gadget_set_flags(0, Output_WindowHandle, OutputWin_Send_Dprintf_Data, 0);
  error_check(er);
  er = gadget_set_flags(0, Output_WindowHandle, OutputWin_Send_Dfprintf_Data, 0);
  error_check(er);
  er = gadget_set_flags(0, Output_WindowHandle, OutputWin_Send_All_Data, 0);
  error_check(er);
}


/************************************************************************/
/* send_dprintf_data                                                    */
/*                                                                      */
/* Function reads the data from the supplied ComponentIds and then      */
/* outputs with, or without, levelling enabled.                         */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void send_dprintf_data(ComponentId text_cid, ComponentId level_option, ComponentId level_cid)
{
  _kernel_oserror	*er;
  int			 state;

  er = writablefield_get_value(0, Output_WindowHandle, text_cid, text, Text_Length, 0);
  error_check(er);
  strcat(text, "\n");
  er = optionbutton_get_state(0, Output_WindowHandle, level_option, &state);
  error_check(er);

  if (state == 0)
  {
    dprintf(("", text));
  }
  else
  {
    er =writablefield_get_value(0, Output_WindowHandle,level_cid, level, Level_Length, 0);
    error_check(er);
    dprintf((level, text));
  }
}


/************************************************************************/
/* send_dprintf_output                                                  */
/*                                                                      */
/* Function is called when the dprintf() output is to be sent.          */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void send_dprintf_output(void)
{
  send_dprintf_data(OutputWin_Test1_Text, OutputWin_Test1_Level_Option, OutputWin_Test1_Level);
  send_dprintf_data(OutputWin_Test2_Text, OutputWin_Test2_Level_Option, OutputWin_Test2_Level);
  send_dprintf_data(OutputWin_Test3_Text, OutputWin_Test3_Level_Option, OutputWin_Test3_Level);
  send_dprintf_data(OutputWin_Test4_Text, OutputWin_Test4_Level_Option, OutputWin_Test4_Level);
  send_dprintf_data(OutputWin_Test5_Text, OutputWin_Test5_Level_Option, OutputWin_Test5_Level);
}


/************************************************************************/
/* send_dfprintf_output                                                 */
/*                                                                      */
/* Function output data from dprintf section of Output window.          */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void send_dfprintf_output(void)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	 regs;
  int			 state;

  /* Get Stream */
  regs.r[0] = 1;
  regs.r[1] = Output_WindowHandle;
  regs.r[2] = 899;
  regs.r[3] = OutputWin_Dfprintf_Device;
  regs.r[4] = 0;
  regs.r[5] = 0;
  er = _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);

  /* Get Data */

  er = writablefield_get_value(0, Output_WindowHandle,OutputWin_Dfprintf_Text,text,Text_Length, 0);
  error_check(er);
  strcat(text, "\n");

  er = optionbutton_get_state(0, Output_WindowHandle, OutputWin_Dfprintf_Level_Option, &state);
  error_check(er);

  if (state == 0)
  {
    dfprintf(("", (debug_device)regs.r[0], text));
  }
  else
  {
    er=writablefield_get_value(0,Output_WindowHandle,OutputWin_Dfprintf_Level,level,Level_Length,0);
    error_check(er);
    dfprintf((level, (debug_device)(regs.r[0]+1), text));
  }

}
@


1.3
log
@  Tidy-up
Detail:
  Stewart's checkin about LibVersion reminded me I'd done some tidying
  (including the LibVersion thing) and not checked it in.  So here it is.

  Tidied Makefile, added standard headers to all the c and h files,
  including the regulation copyright message.

  Changed options.c so that it fits the coding style of the rest of
  DebugLib (naughty Stewart).

  Improved "strdup" routine.

  Moved stripdepend call into Makefile.

Admin:
  Built and tested.


Version 0.47. Tagged as 'DebugLib-0_47'
@
text
@d89 5
@


1.2
log
@ * Fixed Makefile so that it doesn't use "newer" when copying files.  This
   meant that an export wouldn't overwrite newer libraries, when you'd
   expect it to.

 * Tidied test app Makefiles and build obey files.

 * Fixed GUI test app, wasn't declaring it's windows as autocreate and/or
   shared, which meant it missed events.  Removed all warnings also.

 * Now outputs the PDebug version information when a device is activiated.


Version 0.24. Tagged as 'DebugLib-0_24'
@
text
@d190 1
a190 1
    dfprintf(("", (regs.r[0]), text));
d196 1
a196 1
    dfprintf((level, (regs.r[0]+1), text));
@


1.1
log
@Added Serial Output device.
Added CLI, Module and Toolbox test applications
Tidied various sections
Tidied StrongHelp manual
Removed remotedb from Libs folder, now fetched from build structure
Removed svcprint from Libs folder, wasn't being used
Added srccommit support

Version 0.10. Tagged as 'DebugLib-0_10'
@
text
@d35 2
a36 2
char	text[Text_Length];
char	level[Level_Length];
@
