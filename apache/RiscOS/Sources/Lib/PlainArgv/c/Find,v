head	1.1;
access;
symbols
	PlainArgv-0_05:1.1;
locks; strict;
comment	@# @;


1.1
date	2014.12.13.10.45.20;	author rsprowson;	state Exp;
branches;
next	;
commitid	vj4meFaOKWEVRR1y;


desc
@@


1.1
log
@Makefile recreated from fragments
Note, the original makefile passed -DDesk__MODULE_CLIENT into the module variant, however inspection of Desk shows this just defines Desk__zm, neither of which are used in the library sources. To fit within the shared makefile scheme (which doesn't currently allow switches specific to library variants) this has been dropped.
Binary with and without the switch came out the same too.

Version 0.05. Tagged as 'PlainArgv-0_05'
@
text
@/* Copyright 2014 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <ctype.h>
#include <string.h>

#include "Desk.Debug.h"
#include "Desk.DeskMem.h"
#include "Desk.Error.h"
#include "Desk.Error2.h"

#include "PlainArgv.PlainArgv.h"



void	PlainArgv_GetArgs( PlainArgv_argsblock* args, char* string)
	{
	char*	start;
	char*	end;
	int	i;
	
	args->argc = 0;
	args->argv = NULL;
	
	Desk_Debug_Printf( Desk_error_PLACE "Scanning '%s'\n", string);
	
	for ( start = string;;)	{
		
		while ( isspace( *start))	{
			*start = 0;
			start++;
			}
		
		Desk_Debug_Printf( Desk_error_PLACE "start = %i\n", start-string);
		
		if ( start[0]=='\"')	{
			*start = 0;
			start++;
			end = strchr( start, '\"');
			if (!end)	Desk_Error2_HandleText( "Couldn't find closing quote");
			}
		else	{
			end = start;
			while ( !isspace( *end) && *end)	end++;
			}
		
		if ( end==start)	break;
		
		args->argc++;
		if ( *end==0)	break;
		
		*end = 0;
		start = end+1;
		}
	
	args->argv = Desk_DeskMem_CallocType( args->argc, char*);
	start = string;
	
	for ( i=0; i<args->argc; i++)	{
		Desk_Debug_Printf( Desk_error_PLACE "start = %i\n", start-string);
		while ( *start==0)	start++;	/* We have added some extra 0s (eg to replace opening '"'	*/
		Desk_Debug_Printf( Desk_error_PLACE "start = %i\n", start-string);
		args->argv[i] = start;
		start += strlen( start)+1;
		Desk_Debug_Printf( Desk_error_PLACE "Argv[%i]='%s' (0x%p)\n", i, args->argv[i], args->argv[i]);
		}
	}
@
