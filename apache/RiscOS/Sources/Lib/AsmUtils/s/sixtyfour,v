head	1.4;
access;
symbols
	AsmUtils-0_19:1.4
	AsmUtils-0_18:1.4
	AsmUtils-0_17:1.4
	AsmUtils-0_16:1.4
	AsmUtils-0_15:1.4
	AsmUtils-0_14:1.4
	AsmUtils-0_13:1.4
	AsmUtils-0_12:1.4
	AsmUtils-0_11:1.4
	AsmUtils-0_10:1.4
	RO_5_07:1.4
	dellis_autobuild_BaseSW:1.4
	AsmUtils-0_09:1.4
	AsmUtils-0_08:1.4
	AsmUtils-0_07:1.4
	sbrodie_sedwards_16Mar2000:1.4
	AsmUtils-0_06:1.4
	AsmUtils-0_05:1.3
	dcotton_autobuild_BaseSW:1.4
	AsmUtils-0_04:1.3
	AsmUtils-0_03:1.3
	AsmUtils-0_02:1.3
	AsmUtils-0_01:1.2
	AsmUtils-0_00_prerelease:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2000.03.15.13.03.18;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	99.11.29.11.33.33;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.11.26.14.48.21;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.11.22.12.23.56;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.22.12.23.56;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Added a couple of new APIs to the 64-bit number support.
Detail:
  The ui64_value and si64_value routines now have versions with a
    return value of type unsigned int and int respectively, to
    allow callers to avoid narrowing cast warnings during builds.
Admin:
  Compiled.
  Required by NFS 3.07

Version 0.06. Tagged as 'AsmUtils-0_06'
@
text
@; Copyright 1999 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; sixtyfour.s
;
; Author: SBrodie
;

        GET   Hdr:ListOpts
        GET   Hdr:Macros
        GET   Hdr:System
        GET   Hdr:Machine.<Machine>
        GET   Hdr:APCS.<APCS>

; Long multiplier ----------------------------------------
; Taken from Acorn Assembler manual.
; extern u_int64_t *ui64_multiply_uu(u_int64_t *, unsigned, unsigned);

        AREA    |AsmUtils$$SixtyFour1$$Code|, CODE, READONLY, PIC
        EXPORT ui64_multiply_uu
ui64_multiply_uu
        FunctionEntry
        MOVS    lr, a2, LSR #16
        BIC     a2, a2, lr, LSL #16
        MOV     ip, a3, LSR #16
        BIC     a3, a3, ip, LSL #16
        MUL     a4, a2, a3
        MUL     a3, lr, a3
        MUL     a2, ip, a2
        MULNE   lr, ip, lr
        ADDS    a2, a2, a3
        ADDCS   lr, lr, #&10000
        ADDS    a4, a4, a2, LSL #16
        ADC     lr, lr, a2, LSR #16
        STMIA   a1, {a4, lr}
        Return

        AREA    |AsmUtils$$SixtyFour2$$Code|, CODE, READONLY, PIC
        EXPORT ui64_multiply_u64u64
; extern u_int64_t *ui64_multiply_u64u64(u_int64_t *res, u_int64_t *a, u_int64_t *b);
res_lo  RN      v1
res_hi  RN      v2
a_lo    RN      v3
a_hi    RN      v4
b_lo    RN      v5
b_hi    RN      ip
zero    RN      a4
tmp     RN      lr

ui64_multiply_u64u64
        FunctionEntry "v1-v5"
        LDMIA   a2, {a_lo, a_hi}
        LDMIA   a3, {b_lo, b_hi}
        MOV     res_lo, #0
        MOV     res_hi, #0
        MOV     zero, #0
10
        MOVS    b_hi, b_hi, LSR #1
        MOVS    b_lo, b_lo, RRX
        BCC     %FT20
        ADDS    res_lo, res_lo, a_lo
        ADC     res_hi, res_hi, a_hi
20
        MOVS    a_lo, a_lo, LSL #1
        ADCS    a_hi, zero, a_hi, LSL #1
        TEQEQ   a_lo, zero
        ORRNES  tmp, b_hi, b_lo
        BNE     %BT10
        STMIA   a1, {res_lo, res_hi}
        Return  "v1-v5"

        AREA    |AsmUtils$$SixtyFour3$$Code|, CODE, READONLY, PIC
; extern u_int64_t *ui64_subtract_u64u64(u_int64_t *, const u_int64_t *, const u_int64_t *);
; extern int64_t *si64_subtract_s64s64(int64_t *, const int64_t *, const int64_t *);
        EXPORT ui64_subtract_u64u64
        EXPORT si64_subtract_s64s64
ui64_subtract_u64u64
si64_subtract_s64s64
        LDMIA   a3, {a4, ip}
        LDMIA   a2, {a2, a3}
        SUBS    a2, a2, a4
        SBC     a3, a3, ip
        STMIA   a1, {a2, a3}
        Return  ,LinkNotStacked

        AREA    |AsmUtils$$SixtyFour4$$Code|, CODE, READONLY, PIC
; extern u_int64_t *ui64_add_u64u64(u_int64_t *, const u_int64_t *, const u_int64_t *);
; extern int64_t *si64_add_s64s64(int64_t *, const int64_t *, const int64_t *);
        EXPORT ui64_add_u64u64
        EXPORT si64_add_s64s64
ui64_add_u64u64
si64_add_s64s64
        LDMIA   a3, {a4, ip}
        LDMIA   a2, {a2, a3}
        ADDS    a2, a2, a4
        ADC     a3, a3, ip
        STMIA   a1, {a2, a3}
        Return  ,LinkNotStacked

        AREA    |AsmUtils$$SixtyFour5$$Code|, CODE, READONLY, PIC
; extern u_int64_t *ui64_add(u_int64_t *, unsigned long);
; extern int64_t *si64_add(int64_t *, unsigned long);
        EXPORT  ui64_add
        EXPORT  si64_add
ui64_add
si64_add
        LDMIA   a1, {a3, a4}
        ADDS    a3, a3, a2
        ADC     a4, a4, #0
        STMIA   a1, {a3, a4}
        Return  ,LinkNotStacked

        AREA    |AsmUtils$$SixtyFour6a$$Code|, CODE, READONLY, PIC
; extern u_int64_t *ui64_create2(u_int64_t *, unsigned long, unsigned long);
; extern u_int64_t *ui64_create(u_int64_t *, unsigned long);
        EXPORT  ui64_create
        EXPORT ui64_create2
ui64_create
        MOV     a3, #0
ui64_create2
        STMIA   a1, {a2, a3}
        Return  ,LinkNotStacked

        AREA    |AsmUtils$$SixtyFour6b$$Code|, CODE, READONLY, PIC
; extern int64_t *si64_create2(int64_t *, unsigned long, long);
; extern int64_t *si64_create(int64_t *, unsigned long);
        EXPORT  si64_create
        EXPORT  si64_create2
si64_create
        MOV     a3, a2, ASR #31         ; sign extension
si64_create2
        STMIA   a1, {a2, a3}
        Return  ,LinkNotStacked


        AREA    |AsmUtils$$SixtyFour7a$$Code|, CODE, READONLY, PIC
; extern u_int64_t *ui64_shift_right(u_int64_t *, unsigned);
        EXPORT  ui64_shift_right
ui64_shift_right
        LDMIA   a1, {a3, a4}
        RSB     ip, a2, #32
        MOV     a3, a3, LSR a2
        ORR     a3, a3, a4, LSL ip
        MOV     a4, a4, LSR a2
        STMIA   a1, {a3, a4}
        Return  ,LinkNotStacked

        AREA    |AsmUtils$$SixtyFour7b$$Code|, CODE, READONLY, PIC
; extern int64_t *si64_shift_right(int64_t *, unsigned);
        EXPORT  si64_shift_right
si64_shift_right
        LDMIA   a1, {a3, a4}
        RSB     ip, a2, #32
        MOV     a3, a3, LSR a2
        ORR     a3, a3, a4, LSL ip
        MOV     a4, a4, ASR a2
        STMIA   a1, {a3, a4}
        Return  ,LinkNotStacked

        AREA    |AsmUtils$$SixtyFour8$$Code|, CODE, READONLY, PIC
; extern unsigned long ui64_value(const u_int64_t *);
; extern long si64_value(const int64_t *);
; extern unsigned int ui64_value_as_int(const u_int64_t *);
; extern int si64_value_as_int(const int64_t *);
        EXPORT  ui64_value
        EXPORT  si64_value
        EXPORT  ui64_value_as_int
        EXPORT  si64_value_as_int
ui64_value
si64_value
ui64_value_as_int
si64_value_as_int
        LDR     a1, [a1, #0]
        Return  ,LinkNotStacked

        END
@


1.3
log
@  IRQ management support added.
Detail:
  IRQ management code has been added, provided irqs_on/irqs_off
    and ensure_irqs_on/ensure_irqs_off/restore_irqs.
  Removed the hardwiring of No26bitCode from sixtyfour.s :-)
  Missing #endif's added to other header files.
Admin:
  Code examined in decaof to validate output.
  Required by ShareFS 3.45 et al.

Version 0.02. Tagged as 'AsmUtils-0_02'
@
text
@d174 2
d178 2
d182 2
@


1.2
log
@  Updated to use Hdr:APCS.<APCS>
Detail:
  26-bit builds OK.
  32-bit builds OK - don't rely on UMULL working.
Admin:
  Tested by examination of object code.

Version 0.01. Tagged as 'AsmUtils-0_01'
@
text
@a25 2
No26bitCode     SETL {TRUE}

@


1.1
log
@Initial revision
@
text
@a34 5
        [ No26bitCode
        UMULL   a3, a4, a2, a3
        STMIA   a1, {a3, a4}
        MOV     pc, lr
        |
a49 1
        ]
d135 1
a135 1
        MOV     pc, lr
d146 2
a147 1
        MOV     pc, lr
d159 1
a159 1
        MOV     pc, lr
d171 1
a171 1
        MOV     pc, lr
d181 1
a181 1
        MOV     pc, lr
@


1.1.1.1
log
@  Import of library providing assembler abstractions for C code.
Detail:
  Contains code for collecting callbacks, obtaining the base address
    of a module, 64-bit maths and the veneers to OS_Heap that pervade
    the source tree.
Admin:
  Requires kbracey_32bit:RiscOS/Sources/Programmer/HdrSrc
  Do not use (yet) on main trunk.

Tagged as AsmUtils-0_00_prerelease
 
@
text
@@
