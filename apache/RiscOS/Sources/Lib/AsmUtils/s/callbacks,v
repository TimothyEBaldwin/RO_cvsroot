head	1.5;
access;
symbols
	AsmUtils-0_19:1.5
	AsmUtils-0_18:1.5
	AsmUtils-0_17:1.5
	AsmUtils-0_16:1.5
	AsmUtils-0_15:1.4
	AsmUtils-0_14:1.4
	AsmUtils-0_13:1.4
	AsmUtils-0_12:1.3
	AsmUtils-0_11:1.2
	AsmUtils-0_10:1.2
	RO_5_07:1.2
	dellis_autobuild_BaseSW:1.2
	AsmUtils-0_09:1.2
	AsmUtils-0_08:1.1.1.1
	AsmUtils-0_07:1.1.1.1
	sbrodie_sedwards_16Mar2000:1.1.1.1
	AsmUtils-0_06:1.1.1.1
	AsmUtils-0_05:1.1.1.1
	dcotton_autobuild_BaseSW:1.2
	AsmUtils-0_04:1.1.1.1
	AsmUtils-0_03:1.1.1.1
	AsmUtils-0_02:1.1.1.1
	AsmUtils-0_01:1.1.1.1
	AsmUtils-0_00_prerelease:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2012.09.16.10.43.10;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	8gMOKXLJM5Wn9Kkw;

1.4
date	2011.12.24.12.02.30;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	u9gSHjeqOuIGarMv;

1.3
date	2011.12.14.10.42.20;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	wC1I0cEKJEq639Lv;

1.2
date	2000.06.04.19.48.40;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.11.22.12.23.56;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.22.12.23.56;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Allow No32bitCode=FALSE No26bitCode=FALSE to work
For disc targets the above condition is true, so things using AsmUtils in this situtation might be run on something with no MSR/MRS.
No32bitCode=TRUE with No26bitCode=TRUE remains invalid, but the 3 other combinations are now supported.
Binaries inspected by eye for 3 combinations.

Version 0.16. Tagged as 'AsmUtils-0_16'
@
text
@; Copyright 1999 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Title:   s.callbacks
; Purpose: 'Usermode do-nothing' function to enable callbacks to fire
;

; Enclosed is the source to the function usermode_donothing.  This drops you
; into user mode, does an OS_LeaveOS (or OS_Byte 0,1 if that SWI is absent)
; and then returns to supervisor mode.
; On returns from the SWI called in user mode, callbacks are collected.

; Pre-condition: processor is in SVC26 or SVC32 mode
; Post-condition: processor is in same mode as on entry

        AREA    |asmutils$callback$$Code|,CODE,READONLY,PIC

        GET     hdr:ListOpts
        GET     hdr:Macros
        GET     hdr:System
        GET     hdr:Machine.<Machine>
        GET     hdr:APCS.<APCS>

; This function is currently known under many different names.
; Until they all synchronise (on usermode_donothing), export the
; aliases too.
        [ :LNOT: :DEF: DefineAliases
        GBLL    DefineAliases
DefineAliases SETL {TRUE}
        ]

        EXPORT  usermode_donothing
        [ DefineAliases
        EXPORT  CollectCallbacks
        EXPORT  user_mode_donothing
        ]

        [ No32bitCode :LAND: No26bitCode
        ! 1, "This code cannot be used in No26bitCode and No32bitCode!"
        ]

; extern void usermode_donothing(void);
        [ DefineAliases
CollectCallbacks
user_mode_donothing
        ]
usermode_donothing
        Push    "lr"
    [ :LNOT: (No32bitCode :LOR: No26bitCode)
        ; 32 or 26 bit selected at run time
        ; The 26 bit case preserves flags, so works with APCS-R (and APCS-32)
        TEQ     pc, pc
        TEQNEP  pc, #0                  ; Set USR mode, IRQs and FIQs enabled
        MRSEQ   r3, CPSR                ; Get current PSR
        BICEQ   r3, r3, #I32_bit :OR: F32_bit :OR: 2_1111
        MSREQ   CPSR_c, r3              ; Set USR26/USR32 mode, IRQs and FIQs enabled
    |
      [ :LNOT: No26bitCode
        TEQP    pc, #0                  ; Set USR mode, IRQs and FIQs enabled
      ]
      [ :LNOT: No32bitCode
        MRS     r3, CPSR                ; Get current PSR
        BIC     r3, r3, #I32_bit :OR: F32_bit :OR: 2_1111
        MSR     CPSR_c, r3              ; Set USR26/USR32 mode, IRQs and FIQs enabled
      ]
    ]
        SWI     XOS_LeaveOS             ; SWI call from USR mode with interrupts enabled triggers callbacks
        MOVVS   r0, #0
        MOVVS   r1, #1
        SWIVS   XOS_Byte                ; No 'OS_LeaveOS', do this instead (slower)
        SWI     XOS_EnterOS             ; Re-enter SVC26/SVC32 mode
    [ :LNOT: (No32bitCode :LOR: No26bitCode)
        ; 32 or 26 bit selected at run time
        ; The 26 bit case preserves flags, so works with APCS-R (and APCS-32)
        TEQ     pc, pc
        Pull    "pc",NE,^
        Pull    "pc"
    |
      [ :LNOT: No26bitCode
        Pull    "pc",,^
      ]
      [ :LNOT: No32bitCode
        Pull    "pc"
      ]
    ]

        END
@


1.4
log
@Fix bug in usermode_donothing() exposed by using this from the Internet module.
In the 26 bit case the TEQP pc,#0 switches to user mode and enables interrupts (see section 8.2.1 of ARM ARM revision E), however the 32 bit case only switched to user mode.
Since interrupts were not enabled, no callbacks got collected, and you just sit in a tight loop. Since a precondition of collecting callbacks is that interrupts are enabled it is safe to reenable them since the caller must have expected this to happen.
Since none of the SWIs in question corrupt R12, we no longer stack it either.

Version 0.13. Tagged as 'AsmUtils-0_13'
@
text
@d20 3
a22 2
; into user mode, does an OS_Byte 0,1 and then returns to supervisor mode.
; As the OS returns from the OS_Byte call callbacks are collected.
d59 11
a69 2
        FunctionEntry
        [ No32bitCode
d71 2
a72 1
        |
d76 2
a77 1
        ]
d83 14
a96 4
        [ No32bitCode
        NOP
        ]
        Return
@


1.3
log
@Use OS_LeaveOS where possible.

Version 0.12. Tagged as 'AsmUtils-0_12'
@
text
@d58 1
a58 4
        FunctionEntry "r12"
        SWI     XOS_LeaveOS             ; Have we got the nice SWI to do it?
        SWIVC   XOS_EnterOS
        Return  "r12",,VC
d60 1
a60 1
        TEQP    pc, #0                  ; Set USR26 mode
d63 2
a64 2
        BIC     r3, r3, #2_01111        ; r2_c now USR26 or USR32 mode
        MSR     CPSR_c, r3              ; change mode
d66 5
a70 4
        MOV     r0, #0
        MOV     r1, #1
        SWI     XOS_Byte                ; make a SWI call from USR mode
        SWI     XOS_EnterOS             ; re-enter SVC26/SVC32 mode
d74 1
a74 1
        Return  "r12"
@


1.2
log
@  Added new alias for callback collection.
Detail:
  Quite a few modules seem to use user_mode_donothing instead of just
    usermode_donothing.  This alias is now provided here too.
Admin:
  Built.

Version 0.09. Tagged as 'AsmUtils-0_09'
@
text
@a42 1
        EXPORT  user_mode_donothing
d45 1
d55 1
a57 1
user_mode_donothing
d59 2
a60 2
        [ :DEF: XOS_ProcessCallbacks
        SWI     XOS_ProcessCallbacks    ; Have we got the nice SWI to do it?
a61 1
        ]
@


1.1
log
@Initial revision
@
text
@d43 1
d57 1
@


1.1.1.1
log
@  Import of library providing assembler abstractions for C code.
Detail:
  Contains code for collecting callbacks, obtaining the base address
    of a module, 64-bit maths and the veneers to OS_Heap that pervade
    the source tree.
Admin:
  Requires kbracey_32bit:RiscOS/Sources/Programmer/HdrSrc
  Do not use (yet) on main trunk.

Tagged as AsmUtils-0_00_prerelease
 
@
text
@@
