head	1.1;
access;
symbols
	AsmUtils-0_19:1.1
	AsmUtils-0_18:1.1
	AsmUtils-0_17:1.1
	AsmUtils-0_16:1.1
	AsmUtils-0_15:1.1
	AsmUtils-0_14:1.1
	AsmUtils-0_13:1.1
	AsmUtils-0_12:1.1
	AsmUtils-0_11:1.1
	AsmUtils-0_10:1.1
	RO_5_07:1.1
	dellis_autobuild_BaseSW:1.1
	AsmUtils-0_09:1.1
	dcotton_autobuild_BaseSW:1.1
	AsmUtils-0_08:1.1;
locks; strict;
comment	@# @;


1.1
date	2000.05.08.08.04.50;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Added escape condition checking and handling code.
Detail:
  escape_check returns R0:0 as the escape condition flag (returned in
    C flag from OS_ReadEscapeState).
  escape_check_ack will acknowledge an escape condition if one exists
    (OS_Byte 126)
  escape_check_clear will clear an escape condition if one exists
    (OS_Byte 124)
Admin:
  Built.

Version 0.08. Tagged as 'AsmUtils-0_08'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *  AsmUtils (irqs.h)
 *
 * Copyright (C) Pace Micro Technology plc. 2000
 *
 */
#ifndef asmutils_escape_h_inluded
#define asmutils_escape_h_inluded

#ifdef __cplusplus
extern "C" {
#endif

/* Support for ESCAPE condition detection, clearing & acknowledging */

/* Bit 0 of the return value is set if an escape condition existed
 * Bits 1-31 are indeterminate
 */
extern unsigned int escape_check(void);
extern unsigned int escape_check_ack(void);
extern unsigned int escape_check_clear(void);

#ifdef __cplusplus
}
#endif

#endif
@
