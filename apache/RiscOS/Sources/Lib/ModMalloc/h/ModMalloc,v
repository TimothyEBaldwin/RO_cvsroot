head	1.1;
access;
symbols
	ModMalloc-0_07:1.1
	ModMalloc-0_06:1.1
	ModMalloc-0_05:1.1
	ModMalloc-0_04:1.1
	RO_5_07:1.1
	ModMalloc-0_03:1.1
	dellis_autobuild_BaseSW:1.1
	sbrodie_sedwards_16Mar2000:1.1
	ModMalloc-0_02:1.1
	dcotton_autobuild_BaseSW:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_NC2_Generic:1.1.1.1
	afrost_Funai01-33:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Spin_merge:1.1.1.1
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.03.18.17.15.19;	author jsmith;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.17.15.19;	author jsmith;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
For use by module apps which use malloc. malloc tries to use app memory
if called from user mode, so will always return 0 if the module app has
zero app space.

These malloc replacements use OS_Module 6/7 instead.

Due to problems with atexit() in module code, ModMalloc doesn't do a
'atexit( ModMalloc_FreeAll)', which would ensure all allocated memory
was freed. Instead, your module finalisation code should call
ModMalloc_FreeAll explicitly.
 */

#ifndef __ModMalloc_ModMalloc_h
#define __ModMalloc_ModMalloc_h

#include <stddef.h>

void*	ModMalloc_Malloc( size_t size);
void	ModMalloc_Free( void* ptr);
void*	ModMalloc_Realloc( void* ptr, size_t newsize);
void*	ModMalloc_Calloc( size_t n, size_t size);

void	ModMalloc_FreeDownTo( void* first);
/*
Starts freeing blocks, starting with most recent, up till and including
'first'.

Thus:

a = ModMalloc( 40*sizeof( int*));
for ( i=0; i<40; i++)	a[i] = ModMalloc( 30);
...
ModMalloc_FreeDownTo( a);

- will allocate an array and then free it completely.

Note that this won't work if a is reallocated.
 */

void	ModMalloc_FreeAll( void);
/*
Frees all blocks. Equivalent to ModMalloc_FreeDownTo( NULL);
 */


#endif
@


1.1.1.1
log
@Initial import of ModMalloc library
@
text
@@
