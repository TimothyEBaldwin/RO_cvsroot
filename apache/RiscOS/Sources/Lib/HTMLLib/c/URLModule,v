head	1.3;
access;
symbols
	HTMLLib-0_04:1.3
	HTMLLib-0_03:1.3
	HTMLLib-0_02:1.3
	HTMLLib-0_01:1.3
	ahodgkin_207release:1.2
	ahodgkin_206release:1.2
	ahodgkin_205release:1.2
	ahodgkin_204release:1.2
	ahodgkin_133beta:1.1.2.2
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	98.11.05.15.14.18;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	98.02.17.10.42.08;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	98.01.06.17.35.10;	author ahodgkin;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.01.06.17.35.11;	author ahodgkin;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	98.01.07.15.31.13;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@For URL quick resolving, add one more to the buffer size than should be
required and use this to force in a terminator.

Removed second attempt to strip trailing spaces in incoming URLs (which
has been broken since the URL module started escaping characters anyway).
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * A set of veneers for SWI URL_ParseURL
 */

#include <stdio.h>        /* For NULL etc */
#include <string.h>       /* For string handling */
#include "kernel.h"       /* For _kernel_oserror */
#include "swis.h"         /* For _swix etc. */
#include "internal.h"     /* predefinitions of functions */

/*
 * Pass a base and relative URL to obtain a
 * canonicalised (__html_malloc'd) URL string.
 */
char *__html_url_canonicalise_url(int flags, const char*url, const char*rel)
{
// Old code - uses find lengths then return data; slow...
//
//  _kernel_oserror *e;
//  char *ptr;
//  URL u;
//
//  e = __html_url_find_lengths(flags, url, rel, &u);
//  if (e != NULL) return NULL;
//
//  if (u.len[urlfield_FULL] == 0)
//  {
//    return NULL;
//  }
//  else
//  {
//    int i;
//
//    for (i=urlfield_SCHEME; i<=urlfield_MINIMAL; ++i) {
//      u.field[i] = NULL;
//    }
//  }
//
//  u.field[urlfield_FULL] = ptr = __html_malloc(u.len[urlfield_FULL], 1);
//  if (ptr == NULL) return NULL;
//
//  e = __html_url_find_data(flags, url, rel, &u);
//
//  if (e != NULL)
//  {
//    free(ptr);
//    return NULL;
//  }
//
//  return ptr;

  _kernel_oserror *e;
  char *ptr;
  int blen;

  if (!url) url = "";

  blen = strlen(url) + 5 + (rel ? strlen(rel) : 0); /* + 5 = + 4 + terminator */
  ptr = __html_malloc(blen, 1);
  if (ptr == NULL) return NULL;

  e = _swix(URL_ParseURL,
            _INR(0,5),

            flags,
            url_parseurl_quick_resolve,
            url,
            rel,
            ptr,
            blen - 1);

  ptr[blen - 1] = '\0';

  if (e != NULL)
  {
    __html_free(ptr, 0);
    return NULL;
  }

  return ptr;
}

_kernel_oserror *__html_url_find_lengths(int flags, const char *url, const char *rel, URL *u)
{
  return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_buffer_lengths,
               url, rel, u, sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *__html_url_find_data(int flags, const char *url, const char *rel, URL *u)
{
  return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_return_data,
               url, rel, u, sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *__html_url_compose_from_components(int flags, const char *url, const char *rel, URL *u)
{
  return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_compose_from_components,
               url, rel, u, sizeof(*u)/sizeof(size_t));
}
@


1.2
log
@Web branch merged
@
text
@d72 1
a72 1
  blen = strlen(url) + 4 + (rel ? strlen(rel) : 0);
d84 3
a86 1
            blen);
@


1.1
log
@file URLModule was initially added on branch Web.
@
text
@d1 111
@


1.1.2.1
log
@*** empty log message ***
@
text
@a0 81
/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * A set of veneers for SWI URL_ParseURL
 */

#include <stdio.h>        /* For NULL etc */
#include <string.h>       /* For string handling */
#include "kernel.h"       /* For _kernel_oserror */
#include "swis.h"         /* For _swix etc. */
#include "internal.h"     /* predefinitions of functions */

/*
 * Pass a base and relative URL to obtain a
 * canonicalised (__html_malloc'd) URL string.
 */
char *__html_url_canonicalise_url(int flags, const char*url, const char*rel)
{
  _kernel_oserror *e;
  char *ptr;
  URL u;

  e = __html_url_find_lengths(flags, url, rel, &u);
  if (e != NULL) return NULL;

  if (u.len[urlfield_FULL] == 0)
  {
    return NULL;
  }
  else
  {
    int i;

    for (i=urlfield_SCHEME; i<=urlfield_MINIMAL; ++i) {
      u.field[i] = NULL;
    }
  }

  u.field[urlfield_FULL] = ptr = __html_malloc(u.len[urlfield_FULL], 1);
  if (ptr == NULL) return NULL;

  e = __html_url_find_data(flags, url, rel, &u);

  if (e != NULL)
  {
    free(ptr);
    return NULL;
  }

  return ptr;
}

_kernel_oserror *__html_url_find_lengths(int flags, const char *url, const char *rel, URL *u)
{
  return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_buffer_lengths,
               url, rel, u, sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *__html_url_find_data(int flags, const char *url, const char *rel, URL *u)
{
  return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_return_data,
               url, rel, u, sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *__html_url_compose_from_components(int flags, const char *url, const char *rel, URL *u)
{
  return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_compose_from_components,
               url, rel, u, sizeof(*u)/sizeof(size_t));
}
@


1.1.2.2
log
@*** empty log message ***
@
text
@a30 35
// Old code - uses find lengths then return data; slow...
//
//  _kernel_oserror *e;
//  char *ptr;
//  URL u;
//
//  e = __html_url_find_lengths(flags, url, rel, &u);
//  if (e != NULL) return NULL;
//
//  if (u.len[urlfield_FULL] == 0)
//  {
//    return NULL;
//  }
//  else
//  {
//    int i;
//
//    for (i=urlfield_SCHEME; i<=urlfield_MINIMAL; ++i) {
//      u.field[i] = NULL;
//    }
//  }
//
//  u.field[urlfield_FULL] = ptr = __html_malloc(u.len[urlfield_FULL], 1);
//  if (ptr == NULL) return NULL;
//
//  e = __html_url_find_data(flags, url, rel, &u);
//
//  if (e != NULL)
//  {
//    free(ptr);
//    return NULL;
//  }
//
//  return ptr;

d33 12
a44 1
  int blen;
d46 4
a49 1
  if (!url) url = "";
d51 1
a51 2
  blen = strlen(url) + 4 + (rel ? strlen(rel) : 0);
  ptr = __html_malloc(blen, 1);
d54 1
a54 9
  e = _swix(URL_ParseURL,
            _INR(0,5),

            flags,
            url_parseurl_quick_resolve,
            url,
            rel,
            ptr,
            blen);
d58 1
a58 1
    __html_free(ptr, 0);
@
