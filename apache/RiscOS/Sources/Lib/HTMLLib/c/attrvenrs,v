head	1.4;
access;
symbols
	HTMLLib-0_04:1.4
	HTMLLib-0_03:1.4
	HTMLLib-0_02:1.4
	HTMLLib-0_01:1.3
	ahodgkin_207release:1.3
	ahodgkin_206release:1.3
	ahodgkin_205release:1.2
	ahodgkin_204release:1.2
	ahodgkin_133beta:1.1.2.10
	kbracey_126:1.1.2.9
	kbracey_AW97patch:1.1.2.9
	ahodgkin_AW97:1.1.2.9
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2006.03.13.21.10.18;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	98.07.01.08.40.37;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	98.02.17.10.42.13;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.24.16.20.52;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.07.24.16.20.52;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.07.24.16.56.23;	author kbracey;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	97.07.30.12.09.27;	author kbracey;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	97.08.01.09.00.01;	author kbracey;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	97.08.18.16.13.27;	author kbracey;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	97.10.07.09.56.24;	author ahodgkin;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	97.10.08.12.33.38;	author kbracey;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	97.10.08.12.44.15;	author kbracey;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	97.10.13.10.01.23;	author kbracey;	state Exp;
branches;
next	1.1.2.10;

1.1.2.10
date	97.11.14.15.43.09;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  New build variants; minor API tweaks; const/restrict additions.
Detail:
  Builds Unicode versions as well as non-Unicode versions now, and
  exports them. Required by March 2006 era Browse sources. API tweaks
  including filling in more info fields with border widths. Tightened
  up use of const/restrict in various interfaces.
Admin:
  Tested under Browse, new facilities work as expected. Builds all
  four variants (non-Unicode/Unicode, application/module) from clean
  and returns to clean state with !MkClean.

Version 0.02. Tagged as 'HTMLLib-0_02'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "api.h"
#include "internal.h"
#include "elementinf.h"

const char   *HtmlBODYonload         (const HStream * restrict h) { return h->info->body.onload; }
const char   *HtmlBODYonunload       (const HStream * restrict h) { return h->info->body.onunload; }
const char   *HtmlBODYbackground     (const HStream * restrict h) { return h->info->body.background; }
unsigned int  HtmlBODYtext           (const HStream * restrict h) { return h->info->body.text; }
unsigned int  HtmlBODYbgcolour       (const HStream * restrict h) { return h->info->body.bgcolour; }
unsigned int  HtmlBODYlink           (const HStream * restrict h) { return h->info->body.link; }
unsigned int  HtmlBODYvlink          (const HStream * restrict h) { return h->info->body.vlink; }
unsigned int  HtmlBODYalink          (const HStream * restrict h) { return h->info->body.alink; }

const char   *HtmlMETAhttp_equiv     (const HStream * restrict h) { return h->info->meta.http_equiv; }
const char   *HtmlMETAname           (const HStream * restrict h) { return h->info->meta.name; }
const char   *HtmlMETAcontent        (const HStream * restrict h) { return h->info->meta.content; }
const char   *HtmlMETAscheme         (const HStream * restrict h) { return h->info->meta.scheme; }

const char   *HtmlFORMaction         (const HStream * restrict h) { return h->info->form.action; }
formmethod    HtmlFORMmethod         (const HStream * restrict h) { return h->info->form.method; }
const char   *HtmlFORMenctype        (const HStream * restrict h) { return h->info->form.enctype; }
const char   *HtmlFORMaccept_charset (const HStream * restrict h) { return h->info->form.accept_charset; }
const char   *HtmlFORMonreset        (const HStream * restrict h) { return h->info->form.onreset; }
const char   *HtmlFORMonsubmit       (const HStream * restrict h) { return h->info->form.onsubmit; }
const char   *HtmlFORMtarget         (const HStream * restrict h) { return h->info->form.target; }

inputtype     HtmlINPUTtype          (const HStream * restrict h) { return h->info->input.type; }
const char   *HtmlINPUTname          (const HStream * restrict h) { return h->info->input.name; }
const char   *HtmlINPUTvalue         (const HStream * restrict h) { return h->info->input.value; }
bool          HtmlINPUTchecked       (const HStream * restrict h) { return h->info->input.checked; }
bool          HtmlINPUTdisabled      (const HStream * restrict h) { return h->info->input.disabled; }
bool          HtmlINPUTreadonly      (const HStream * restrict h) { return h->info->input.readonly; }
unsigned int  HtmlINPUTsize          (const HStream * restrict h) { return h->info->input.size; }
unsigned int  HtmlINPUTmaxlength     (const HStream * restrict h) { return h->info->input.maxlength; }
const char   *HtmlINPUTsrc           (const HStream * restrict h) { return h->info->input.src; }
const char   *HtmlINPUTalt           (const HStream * restrict h) { return h->info->input.alt; }
const char   *HtmlINPUTusemap        (const HStream * restrict h) { return h->info->input.usemap; }
imgalign      HtmlINPUTalign         (const HStream * restrict h) { return h->info->input.align; }
int           HtmlINPUTtabindex      (const HStream * restrict h) { return h->info->input.tabindex; }
const char   *HtmlINPUTonfocus       (const HStream * restrict h) { return h->info->input.onfocus; }
const char   *HtmlINPUTonblur        (const HStream * restrict h) { return h->info->input.onblur; }
const char   *HtmlINPUTonselect      (const HStream * restrict h) { return h->info->input.onselect; }
const char   *HtmlINPUTonclick       (const HStream * restrict h) { return h->info->input.onclick; }
const char   *HtmlINPUTonchange      (const HStream * restrict h) { return h->info->input.onchange; }
const char   *HtmlINPUTaccept        (const HStream * restrict h) { return h->info->input.accept; }

const char   *HtmlSELECTname         (const HStream * restrict h) { return h->info->select.name; }
unsigned int  HtmlSELECTsize         (const HStream * restrict h) { return h->info->select.size; }
bool          HtmlSELECTmultiple     (const HStream * restrict h) { return h->info->select.multiple; }
bool          HtmlSELECTdisabled     (const HStream * restrict h) { return h->info->select.disabled; }
int           HtmlSELECTtabindex     (const HStream * restrict h) { return h->info->select.tabindex; }
const char   *HtmlSELECTonfocus      (const HStream * restrict h) { return h->info->select.onfocus; }
const char   *HtmlSELECTonblur       (const HStream * restrict h) { return h->info->select.onblur; }
const char   *HtmlSELECTonselect     (const HStream * restrict h) { return h->info->select.onselect; }
const char   *HtmlSELECTonclick      (const HStream * restrict h) { return h->info->select.onclick; }
const char   *HtmlSELECTonchange     (const HStream * restrict h) { return h->info->select.onchange; }
const int    *HtmlSELECToptions      (const HStream * restrict h) { return h->info->select.options; }

bool          HtmlOBJECTdeclare      (const HStream * restrict h) { return h->info->object.declare; }
bool          HtmlOBJECTshapes       (const HStream * restrict h) { return h->info->object.shapes; }
int           HtmlOBJECTtabindex     (const HStream * restrict h) { return h->info->object.tabindex; }
const char   *HtmlOBJECTtype         (const HStream * restrict h) { return h->info->object.type; }
const char   *HtmlOBJECTusemap       (const HStream * restrict h) { return h->info->object.usemap; }
int           HtmlOBJECTvspace       (const HStream * restrict h) { return h->info->object.vspace; }
int           HtmlOBJECThspace       (const HStream * restrict h) { return h->info->object.hspace; }
imgalign      HtmlOBJECTalign        (const HStream * restrict h) { return h->info->object.align; }
const char   *HtmlOBJECTarchive      (const HStream * restrict h) { return h->info->object.archive; }
int           HtmlOBJECTborder       (const HStream * restrict h) { return h->info->object.border; }
const char   *HtmlOBJECTclassid      (const HStream * restrict h) { return h->info->object.classid; }
const char   *HtmlOBJECTcodebase     (const HStream * restrict h) { return h->info->object.codebase; }
const char   *HtmlOBJECTcodetype     (const HStream * restrict h) { return h->info->object.codetype; }
const char   *HtmlOBJECTdata         (const HStream * restrict h) { return h->info->object.data; }
const char   *HtmlOBJECTstandby      (const HStream * restrict h) { return h->info->object.standby; }
HStream      *HtmlOBJECTstream       (const HStream * restrict h) { return h->info->object.hstream; }
HStream      *HtmlOBJECTparent       (const HStream * restrict h) { return h->info->object.parent; }

HStream      *HtmlOBJECTmapstream    (const HStream * restrict h)
{
    if (h->info->object.mapstream)
        return h->info->object.mapstream;

    if (!h->info->object.usemap)
        return NULL;

    return h->info->object.mapstream = __html_find_map(h->info->object.maps,
                                                       h->info->object.usemap);
}

const char   *HtmlPARAMname          (const HStream * restrict h) { return h->info->param.name; }
const char   *HtmlPARAMtype          (const HStream * restrict h) { return h->info->param.type; }
const char   *HtmlPARAMvalue         (const HStream * restrict h) { return h->info->param.value; }
paramtype     HtmlPARAMvaluetype     (const HStream * restrict h) { return h->info->param.valuetype; }

const char *HtmlELEMENTname(const HStream * restrict h)
{
  switch (h->tagno)
  {
    case TAG_META:   return h->info->meta.name;
    case TAG_SELECT: return h->info->select.name;
    case TAG_INPUT:  return h->info->input.name;
    case TAG_PARAM:  return h->info->param.name;
    default:         return h->name;
  }
}

int HtmlELEMENTtabindex(const HStream * restrict h)
{
  switch (h->tagno)
  {
    case TAG_SELECT: return h->info->select.tabindex;
    case TAG_INPUT:  return h->info->input.tabindex;
    case TAG_OBJECT: return h->info->object.tabindex;
    default:         return 0;
  }
}

const char *HtmlELEMENTonfocus(const HStream * restrict h)
{
  switch (h->tagno)
  {
    case TAG_SELECT: return h->info->select.onfocus;
    case TAG_INPUT:  return h->info->input.onfocus;
    default:         return NULL;
  }
}

const char *HtmlELEMENTonblur(const HStream * restrict h)
{
  switch (h->tagno)
  {
    case TAG_SELECT: return h->info->select.onblur;
    case TAG_INPUT:  return h->info->input.onblur;
    default:         return NULL;
  }
}

const char *HtmlELEMENTonselect(const HStream * restrict h)
{
  switch (h->tagno)
  {
    case TAG_SELECT: return h->info->select.onselect;
    case TAG_INPUT:  return h->info->input.onselect;
    default:         return NULL;
  }
}

const char *HtmlELEMENTonclick(const HStream * restrict h)
{
  switch (h->tagno)
  {
    case TAG_SELECT: return h->info->select.onclick;
    case TAG_INPUT:  return h->info->input.onclick;
    default:         return NULL;
  }
}

const char *HtmlELEMENTonchange(const HStream * restrict h)
{
  switch (h->tagno)
  {
    case TAG_SELECT: return h->info->select.onchange;
    case TAG_INPUT:  return h->info->input.onchange;
    default:         return NULL;
  }
}
@


1.3
log
@The sequence <option value=""> followed by a comment would lead to some
characters from zero page being spat out as menu entries; the browser
then failed with "Illegal character in font string" when it tried to do
things with those entries. NULL values in [HStream]->text are now
correctly checked for and dealt with in __html_form_parse_select().
@
text
@d19 71
a89 71
const char   *HtmlBODYonload         (HStream *h) { return h->info->body.onload; }
const char   *HtmlBODYonunload       (HStream *h) { return h->info->body.onunload; }
const char   *HtmlBODYbackground     (HStream *h) { return h->info->body.background; }
unsigned int  HtmlBODYtext           (HStream *h) { return h->info->body.text; }
unsigned int  HtmlBODYbgcolour       (HStream *h) { return h->info->body.bgcolour; }
unsigned int  HtmlBODYlink           (HStream *h) { return h->info->body.link; }
unsigned int  HtmlBODYvlink          (HStream *h) { return h->info->body.vlink; }
unsigned int  HtmlBODYalink          (HStream *h) { return h->info->body.alink; }

const char   *HtmlMETAhttp_equiv     (HStream *h) { return h->info->meta.http_equiv; }
const char   *HtmlMETAname           (HStream *h) { return h->info->meta.name; }
const char   *HtmlMETAcontent        (HStream *h) { return h->info->meta.content; }
const char   *HtmlMETAscheme         (HStream *h) { return h->info->meta.scheme; }

const char   *HtmlFORMaction         (HStream *h) { return h->info->form.action; }
formmethod    HtmlFORMmethod         (HStream *h) { return h->info->form.method; }
const char   *HtmlFORMenctype        (HStream *h) { return h->info->form.enctype; }
const char   *HtmlFORMaccept_charset (HStream *h) { return h->info->form.accept_charset; }
const char   *HtmlFORMonreset        (HStream *h) { return h->info->form.onreset; }
const char   *HtmlFORMonsubmit       (HStream *h) { return h->info->form.onsubmit; }
const char   *HtmlFORMtarget         (HStream *h) { return h->info->form.target; }

inputtype     HtmlINPUTtype          (HStream *h) { return h->info->input.type; }
const char   *HtmlINPUTname          (HStream *h) { return h->info->input.name; }
const char   *HtmlINPUTvalue         (HStream *h) { return h->info->input.value; }
bool          HtmlINPUTchecked       (HStream *h) { return h->info->input.checked; }
bool          HtmlINPUTdisabled      (HStream *h) { return h->info->input.disabled; }
bool          HtmlINPUTreadonly      (HStream *h) { return h->info->input.readonly; }
unsigned int  HtmlINPUTsize          (HStream *h) { return h->info->input.size; }
unsigned int  HtmlINPUTmaxlength     (HStream *h) { return h->info->input.maxlength; }
const char   *HtmlINPUTsrc           (HStream *h) { return h->info->input.src; }
const char   *HtmlINPUTalt           (HStream *h) { return h->info->input.alt; }
const char   *HtmlINPUTusemap        (HStream *h) { return h->info->input.usemap; }
imgalign      HtmlINPUTalign         (HStream *h) { return h->info->input.align; }
int           HtmlINPUTtabindex      (HStream *h) { return h->info->input.tabindex; }
const char   *HtmlINPUTonfocus       (HStream *h) { return h->info->input.onfocus; }
const char   *HtmlINPUTonblur        (HStream *h) { return h->info->input.onblur; }
const char   *HtmlINPUTonselect      (HStream *h) { return h->info->input.onselect; }
const char   *HtmlINPUTonclick       (HStream *h) { return h->info->input.onclick; }
const char   *HtmlINPUTonchange      (HStream *h) { return h->info->input.onchange; }
const char   *HtmlINPUTaccept        (HStream *h) { return h->info->input.accept; }

const char   *HtmlSELECTname         (HStream *h) { return h->info->select.name; }
unsigned int  HtmlSELECTsize         (HStream *h) { return h->info->select.size; }
bool          HtmlSELECTmultiple     (HStream *h) { return h->info->select.multiple; }
bool          HtmlSELECTdisabled     (HStream *h) { return h->info->select.disabled; }
int           HtmlSELECTtabindex     (HStream *h) { return h->info->select.tabindex; }
const char   *HtmlSELECTonfocus      (HStream *h) { return h->info->select.onfocus; }
const char   *HtmlSELECTonblur       (HStream *h) { return h->info->select.onblur; }
const char   *HtmlSELECTonselect     (HStream *h) { return h->info->select.onselect; }
const char   *HtmlSELECTonclick      (HStream *h) { return h->info->select.onclick; }
const char   *HtmlSELECTonchange     (HStream *h) { return h->info->select.onchange; }
const int    *HtmlSELECToptions      (HStream *h) { return h->info->select.options; }

bool          HtmlOBJECTdeclare      (HStream *h) { return h->info->object.declare; }
bool          HtmlOBJECTshapes       (HStream *h) { return h->info->object.shapes; }
int           HtmlOBJECTtabindex     (HStream *h) { return h->info->object.tabindex; }
const char   *HtmlOBJECTtype         (HStream *h) { return h->info->object.type; }
const char   *HtmlOBJECTusemap       (HStream *h) { return h->info->object.usemap; }
int           HtmlOBJECTvspace       (HStream *h) { return h->info->object.vspace; }
int           HtmlOBJECThspace       (HStream *h) { return h->info->object.hspace; }
imgalign      HtmlOBJECTalign        (HStream *h) { return h->info->object.align; }
const char   *HtmlOBJECTarchive      (HStream *h) { return h->info->object.archive; }
int           HtmlOBJECTborder       (HStream *h) { return h->info->object.border; }
const char   *HtmlOBJECTclassid      (HStream *h) { return h->info->object.classid; }
const char   *HtmlOBJECTcodebase     (HStream *h) { return h->info->object.codebase; }
const char   *HtmlOBJECTcodetype     (HStream *h) { return h->info->object.codetype; }
const char   *HtmlOBJECTdata         (HStream *h) { return h->info->object.data; }
const char   *HtmlOBJECTstandby      (HStream *h) { return h->info->object.standby; }
HStream      *HtmlOBJECTstream       (HStream *h) { return h->info->object.hstream; }
HStream      *HtmlOBJECTparent       (HStream *h) { return h->info->object.parent; }
d91 1
a91 1
HStream      *HtmlOBJECTmapstream    (HStream *h)
d103 4
a106 4
const char   *HtmlPARAMname          (HStream *h) { return h->info->param.name; }
const char   *HtmlPARAMtype          (HStream *h) { return h->info->param.type; }
const char   *HtmlPARAMvalue         (HStream *h) { return h->info->param.value; }
paramtype     HtmlPARAMvaluetype     (HStream *h) { return h->info->param.valuetype; }
d108 1
a108 1
const char *HtmlELEMENTname(HStream *h)
d120 1
a120 1
int HtmlELEMENTtabindex(HStream *h)
d131 1
a131 1
const char *HtmlELEMENTonfocus(HStream *h)
d141 1
a141 1
const char *HtmlELEMENTonblur(HStream *h)
d151 1
a151 1
const char *HtmlELEMENTonselect(HStream *h)
d161 1
a161 1
const char *HtmlELEMENTonclick(HStream *h)
d171 1
a171 1
const char *HtmlELEMENTonchange(HStream *h)
@


1.2
log
@Web branch merged
@
text
@d57 1
d69 1
d117 61
@


1.1
log
@file attrvenrs was initially added on branch Web.
@
text
@d1 116
@


1.1.2.1
log
@Totally redesigned attribute parsing code.
Started new API for accessing attributes - only implemented for BODY.
Added <BODY alink onload onunload> support.
@
text
@a0 26
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "api.h"
#include "internal.h"
#include "elementinf.h"

const char *HtmlBODYonload(HStream *h)     { return h->info->body.onload; }
const char *HtmlBODYonunload(HStream *h)   { return h->info->body.onunload; }
const char *HtmlBODYbackground(HStream *h) { return h->info->body.background; }
unsigned int HtmlBODYtext(HStream *h)      { return h->info->body.text; }
unsigned int HtmlBODYbgcolour(HStream *h)  { return h->info->body.bgcolour; }
unsigned int HtmlBODYlink(HStream *h)      { return h->info->body.link; }
unsigned int HtmlBODYvlink(HStream *h)     { return h->info->body.vlink; }
unsigned int HtmlBODYalink(HStream *h)     { return h->info->body.alink; }
@


1.1.2.2
log
@Added META support
@
text
@a26 5

const char *HtmlMETAhttp_equiv(HStream *h) { return h->info->meta.http_equiv; }
const char *HtmlMETAname(HStream *h)       { return h->info->meta.name; }
const char *HtmlMETAcontent(HStream *h)    { return h->info->meta.content; }
const char *HtmlMETAscheme(HStream *h)     { return h->info->meta.scheme; }
@


1.1.2.3
log
@Redid handling of FORM tags to use an elementinfo structure.
@
text
@a31 8

const char *HtmlFORMaction(HStream *h)     { return h->info->form.action; }
formmethod HtmlFORMmethod(HStream *h)      { return h->info->form.method; }
const char *HtmlFORMenctype(HStream *h)    { return h->info->form.enctype; }
const char *HtmlFORMaccept_charset(HStream *h) { return h->info->form.accept_charset; }
const char *HtmlFORMonreset(HStream *h)    { return h->info->form.onreset; }
const char *HtmlFORMonsubmit(HStream *h)   { return h->info->form.onsubmit; }
const char *HtmlFORMtarget(HStream *h)     { return h->info->form.target; }
@


1.1.2.4
log
@Revised INPUT handling - made INPUT type=image work
@
text
@a39 46

 inputtype  HtmlINPUTtype(HStream *h)      { return h->info->input.type; }
const char *HtmlINPUTname(HStream *h)      { return h->info->input.name; }
const char *HtmlINPUTvalue(HStream *h)     { return h->info->input.value; }
      bool  HtmlINPUTchecked(HStream *h)   { return h->info->input.checked; }
      bool  HtmlINPUTdisabled(HStream *h)  { return h->info->input.disabled; }
      bool  HtmlINPUTreadonly(HStream *h)  { return h->info->input.readonly; }
unsigned int HtmlINPUTsize(HStream *h)     { return h->info->input.size; }
unsigned int HtmlINPUTmaxlength(HStream *h) { return h->info->input.maxlength; }
const char *HtmlINPUTsrc(HStream *h)       { return h->info->input.src; }
const char *HtmlINPUTalt(HStream *h)       { return h->info->input.alt; }
const char *HtmlINPUTusemap(HStream *h)    { return h->info->input.usemap; }
  imgalign  HtmlINPUTalign(HStream *h)     { return h->info->input.align; }
       int  HtmlINPUTtabindex(HStream *h)  { return h->info->input.tabindex; }
const char *HtmlINPUTonfocus(HStream *h)   { return h->info->input.onfocus; }
const char *HtmlINPUTonblur(HStream *h)    { return h->info->input.onblur; }
const char *HtmlINPUTonselect(HStream *h)  { return h->info->input.onselect; }
const char *HtmlINPUTonchange(HStream *h)  { return h->info->input.onchange; }
const char *HtmlINPUTaccept(HStream *h)    { return h->info->input.accept; }

const char *HtmlSELECTname(HStream *h)     { return h->info->select.name; }
unsigned int HtmlSELECTsize(HStream *h)    { return h->info->select.size; }
      bool  HtmlSELECTmultiple(HStream *h) { return h->info->select.multiple; }
      bool  HtmlSELECTdisabled(HStream *h) { return h->info->select.disabled; }
       int  HtmlSELECTtabindex(HStream *h) { return h->info->select.tabindex; }
const char *HtmlSELECTonfocus(HStream *h)  { return h->info->select.onfocus; }
const char *HtmlSELECTonblur(HStream *h)   { return h->info->select.onblur; }
const char *HtmlSELECTonselect(HStream *h) { return h->info->select.onselect; }
const char *HtmlSELECTonchange(HStream *h) { return h->info->select.onchange; }
 const int *HtmlSELECToptions(HStream *h)  { return h->info->select.options; }

const char *HtmlELEMENTname(HStream *h)
{
    switch (h->tag)
    {
        case META: /* This is the same as SELECT (aapigigigiiddhhhhh!) */
            if (h->type & TYPE_HEAD)
                return h->info->meta.name;
            else
                return h->info->select.name;
        case INPUT:
            return h->info->input.name;
        default:
            return h->name;
    }
}
@


1.1.2.5
log
@Did align on <P> and right align on tables.
Fixed problem with the final ">" of "</SCRIPT>" ending up in the title.
Fixed problem of HtmlGetStream returning a pointer to the wrong parent table.
Added SUB and SUP.
@
text
@d73 1
a73 1
    switch (h->tagno)
d75 6
a80 5
        case TAG_META:
            return h->info->meta.name;
        case TAG_SELECT:
            return h->info->select.name;
        case TAG_INPUT:
@


1.1.2.6
log
@Added veneers for OBJECT tags in attrvenrs.c, and updated api.h as
appropriate - tidied this so comments appear before the functions they
apply to rather than after (!), and moved HtmlInit to the top, since
it's the first thing you're supposed to call (hence change to veneers.c).

Stripped dependencies out of Makefile prior to checkin.
@
text
@d19 51
a69 8
const char   * HtmlBODYonload         (HStream * h) { return h->info->body.onload; }
const char   * HtmlBODYonunload       (HStream * h) { return h->info->body.onunload; }
const char   * HtmlBODYbackground     (HStream * h) { return h->info->body.background; }
unsigned int   HtmlBODYtext           (HStream * h) { return h->info->body.text; }
unsigned int   HtmlBODYbgcolour       (HStream * h) { return h->info->body.bgcolour; }
unsigned int   HtmlBODYlink           (HStream * h) { return h->info->body.link; }
unsigned int   HtmlBODYvlink          (HStream * h) { return h->info->body.vlink; }
unsigned int   HtmlBODYalink          (HStream * h) { return h->info->body.alink; }
d71 1
a71 61
const char   * HtmlMETAhttp_equiv     (HStream * h) { return h->info->meta.http_equiv; }
const char   * HtmlMETAname           (HStream * h) { return h->info->meta.name; }
const char   * HtmlMETAcontent        (HStream * h) { return h->info->meta.content; }
const char   * HtmlMETAscheme         (HStream * h) { return h->info->meta.scheme; }

const char   * HtmlFORMaction         (HStream * h) { return h->info->form.action; }
formmethod     HtmlFORMmethod         (HStream * h) { return h->info->form.method; }
const char   * HtmlFORMenctype        (HStream * h) { return h->info->form.enctype; }
const char   * HtmlFORMaccept_charset (HStream * h) { return h->info->form.accept_charset; }
const char   * HtmlFORMonreset        (HStream * h) { return h->info->form.onreset; }
const char   * HtmlFORMonsubmit       (HStream * h) { return h->info->form.onsubmit; }
const char   * HtmlFORMtarget         (HStream * h) { return h->info->form.target; }

inputtype      HtmlINPUTtype          (HStream * h) { return h->info->input.type; }
const char   * HtmlINPUTname          (HStream * h) { return h->info->input.name; }
const char   * HtmlINPUTvalue         (HStream * h) { return h->info->input.value; }
bool           HtmlINPUTchecked       (HStream * h) { return h->info->input.checked; }
bool           HtmlINPUTdisabled      (HStream * h) { return h->info->input.disabled; }
bool           HtmlINPUTreadonly      (HStream * h) { return h->info->input.readonly; }
unsigned int   HtmlINPUTsize          (HStream * h) { return h->info->input.size; }
unsigned int   HtmlINPUTmaxlength     (HStream * h) { return h->info->input.maxlength; }
const char   * HtmlINPUTsrc           (HStream * h) { return h->info->input.src; }
const char   * HtmlINPUTalt           (HStream * h) { return h->info->input.alt; }
const char   * HtmlINPUTusemap        (HStream * h) { return h->info->input.usemap; }
imgalign       HtmlINPUTalign         (HStream * h) { return h->info->input.align; }
int            HtmlINPUTtabindex      (HStream * h) { return h->info->input.tabindex; }
const char   * HtmlINPUTonfocus       (HStream * h) { return h->info->input.onfocus; }
const char   * HtmlINPUTonblur        (HStream * h) { return h->info->input.onblur; }
const char   * HtmlINPUTonselect      (HStream * h) { return h->info->input.onselect; }
const char   * HtmlINPUTonchange      (HStream * h) { return h->info->input.onchange; }
const char   * HtmlINPUTaccept        (HStream * h) { return h->info->input.accept; }

const char   * HtmlSELECTname         (HStream * h) { return h->info->select.name; }
unsigned int   HtmlSELECTsize         (HStream * h) { return h->info->select.size; }
bool           HtmlSELECTmultiple     (HStream * h) { return h->info->select.multiple; }
bool           HtmlSELECTdisabled     (HStream * h) { return h->info->select.disabled; }
int            HtmlSELECTtabindex     (HStream * h) { return h->info->select.tabindex; }
const char   * HtmlSELECTonfocus      (HStream * h) { return h->info->select.onfocus; }
const char   * HtmlSELECTonblur       (HStream * h) { return h->info->select.onblur; }
const char   * HtmlSELECTonselect     (HStream * h) { return h->info->select.onselect; }
const char   * HtmlSELECTonchange     (HStream * h) { return h->info->select.onchange; }
const int    * HtmlSELECToptions      (HStream * h) { return h->info->select.options; }

bool           HtmlOBJECTdeclare      (HStream * h) { return h->info->object.declare; }
bool           HtmlOBJECTshapes       (HStream * h) { return h->info->object.shapes; }
int            HtmlOBJECTtabindex     (HStream * h) { return h->info->object.tabindex; }
const char   * HtmlOBJECTtype         (HStream * h) { return h->info->object.type; }
const char   * HtmlOBJECTusemap       (HStream * h) { return h->info->object.usemap; }
int            HtmlOBJECTvspace       (HStream * h) { return h->info->object.vspace; }
int            HtmlOBJECThspace       (HStream * h) { return h->info->object.hspace; }
imgalign       HtmlOBJECTalign        (HStream * h) { return h->info->object.align; }
const char   * HtmlOBJECTarchive      (HStream * h) { return h->info->object.archive; }
int            HtmlOBJECTborder       (HStream * h) { return h->info->object.border; }
const char   * HtmlOBJECTclassid      (HStream * h) { return h->info->object.classid; }
const char   * HtmlOBJECTcodebase     (HStream * h) { return h->info->object.codebase; }
const char   * HtmlOBJECTcodetype     (HStream * h) { return h->info->object.codetype; }
const char   * HtmlOBJECTdata         (HStream * h) { return h->info->object.data; }
HStream      * HtmlOBJECTstream       (HStream * h) { return h->info->object.hstream; }
HStream      * HtmlOBJECTparent       (HStream * h) { return h->info->object.parent; }

const char * HtmlELEMENTname(HStream * h)
d73 11
a83 7
  switch (h->tagno)
  {
    case TAG_META:   return h->info->meta.name;
    case TAG_SELECT: return h->info->select.name;
    case TAG_INPUT:  return h->info->input.name;
    default:         return h->name;
  }
@


1.1.2.7
log
@Implemented ordered lists.
Implemented <Q> ... </Q>.
Caused a linebreak after </DD>.
Finished implementing attributes for <OBJECT>.
Stopped HTML after a </FRAMESET> leaking through.
Ensured that FRAME and FRAMESET tokens aren't passed up if not using frames.

Removed lots of unnecessary #include "utf8.h" lines from encoding files.
Ensured unsigned constants used in UTF-8 code.
Added UTF8_next and UTF8_prev functions.
@
text
@d19 68
a86 69
const char   *HtmlBODYonload         (HStream *h) { return h->info->body.onload; }
const char   *HtmlBODYonunload       (HStream *h) { return h->info->body.onunload; }
const char   *HtmlBODYbackground     (HStream *h) { return h->info->body.background; }
unsigned int  HtmlBODYtext           (HStream *h) { return h->info->body.text; }
unsigned int  HtmlBODYbgcolour       (HStream *h) { return h->info->body.bgcolour; }
unsigned int  HtmlBODYlink           (HStream *h) { return h->info->body.link; }
unsigned int  HtmlBODYvlink          (HStream *h) { return h->info->body.vlink; }
unsigned int  HtmlBODYalink          (HStream *h) { return h->info->body.alink; }

const char   *HtmlMETAhttp_equiv     (HStream *h) { return h->info->meta.http_equiv; }
const char   *HtmlMETAname           (HStream *h) { return h->info->meta.name; }
const char   *HtmlMETAcontent        (HStream *h) { return h->info->meta.content; }
const char   *HtmlMETAscheme         (HStream *h) { return h->info->meta.scheme; }

const char   *HtmlFORMaction         (HStream *h) { return h->info->form.action; }
formmethod    HtmlFORMmethod         (HStream *h) { return h->info->form.method; }
const char   *HtmlFORMenctype        (HStream *h) { return h->info->form.enctype; }
const char   *HtmlFORMaccept_charset (HStream *h) { return h->info->form.accept_charset; }
const char   *HtmlFORMonreset        (HStream *h) { return h->info->form.onreset; }
const char   *HtmlFORMonsubmit       (HStream *h) { return h->info->form.onsubmit; }
const char   *HtmlFORMtarget         (HStream *h) { return h->info->form.target; }

inputtype     HtmlINPUTtype          (HStream *h) { return h->info->input.type; }
const char   *HtmlINPUTname          (HStream *h) { return h->info->input.name; }
const char   *HtmlINPUTvalue         (HStream *h) { return h->info->input.value; }
bool          HtmlINPUTchecked       (HStream *h) { return h->info->input.checked; }
bool          HtmlINPUTdisabled      (HStream *h) { return h->info->input.disabled; }
bool          HtmlINPUTreadonly      (HStream *h) { return h->info->input.readonly; }
unsigned int  HtmlINPUTsize          (HStream *h) { return h->info->input.size; }
unsigned int  HtmlINPUTmaxlength     (HStream *h) { return h->info->input.maxlength; }
const char   *HtmlINPUTsrc           (HStream *h) { return h->info->input.src; }
const char   *HtmlINPUTalt           (HStream *h) { return h->info->input.alt; }
const char   *HtmlINPUTusemap        (HStream *h) { return h->info->input.usemap; }
imgalign      HtmlINPUTalign         (HStream *h) { return h->info->input.align; }
int           HtmlINPUTtabindex      (HStream *h) { return h->info->input.tabindex; }
const char   *HtmlINPUTonfocus       (HStream *h) { return h->info->input.onfocus; }
const char   *HtmlINPUTonblur        (HStream *h) { return h->info->input.onblur; }
const char   *HtmlINPUTonselect      (HStream *h) { return h->info->input.onselect; }
const char   *HtmlINPUTonchange      (HStream *h) { return h->info->input.onchange; }
const char   *HtmlINPUTaccept        (HStream *h) { return h->info->input.accept; }

const char   *HtmlSELECTname         (HStream *h) { return h->info->select.name; }
unsigned int  HtmlSELECTsize         (HStream *h) { return h->info->select.size; }
bool          HtmlSELECTmultiple     (HStream *h) { return h->info->select.multiple; }
bool          HtmlSELECTdisabled     (HStream *h) { return h->info->select.disabled; }
int           HtmlSELECTtabindex     (HStream *h) { return h->info->select.tabindex; }
const char   *HtmlSELECTonfocus      (HStream *h) { return h->info->select.onfocus; }
const char   *HtmlSELECTonblur       (HStream *h) { return h->info->select.onblur; }
const char   *HtmlSELECTonselect     (HStream *h) { return h->info->select.onselect; }
const char   *HtmlSELECTonchange     (HStream *h) { return h->info->select.onchange; }
const int    *HtmlSELECToptions      (HStream *h) { return h->info->select.options; }

bool          HtmlOBJECTdeclare      (HStream *h) { return h->info->object.declare; }
bool          HtmlOBJECTshapes       (HStream *h) { return h->info->object.shapes; }
int           HtmlOBJECTtabindex     (HStream *h) { return h->info->object.tabindex; }
const char   *HtmlOBJECTtype         (HStream *h) { return h->info->object.type; }
const char   *HtmlOBJECTusemap       (HStream *h) { return h->info->object.usemap; }
int           HtmlOBJECTvspace       (HStream *h) { return h->info->object.vspace; }
int           HtmlOBJECThspace       (HStream *h) { return h->info->object.hspace; }
imgalign      HtmlOBJECTalign        (HStream *h) { return h->info->object.align; }
const char   *HtmlOBJECTarchive      (HStream *h) { return h->info->object.archive; }
int           HtmlOBJECTborder       (HStream *h) { return h->info->object.border; }
const char   *HtmlOBJECTclassid      (HStream *h) { return h->info->object.classid; }
const char   *HtmlOBJECTcodebase     (HStream *h) { return h->info->object.codebase; }
const char   *HtmlOBJECTcodetype     (HStream *h) { return h->info->object.codetype; }
const char   *HtmlOBJECTdata         (HStream *h) { return h->info->object.data; }
const char   *HTmlOBJECTstandby      (HStream *h) { return h->info->object.standby; }
HStream      *HtmlOBJECTstream       (HStream *h) { return h->info->object.hstream; }
HStream      *HtmlOBJECTparent       (HStream *h) { return h->info->object.parent; }
d88 1
a88 1
const char *HtmlELEMENTname(HStream *h)
@


1.1.2.8
log
@Added missing HtmlOBJECTstandby prototype
@
text
@d85 1
a85 1
const char   *HtmlOBJECTstandby      (HStream *h) { return h->info->object.standby; }
@


1.1.2.9
log
@PARAM and APPLET, take 1.
@
text
@a88 5
const char   *HtmlPARAMname          (HStream *h) { return h->info->param.name; }
const char   *HtmlPARAMtype          (HStream *h) { return h->info->param.type; }
const char   *HtmlPARAMvalue         (HStream *h) { return h->info->param.value; }
paramtype     HtmlPARAMvaluetype     (HStream *h) { return h->info->param.valuetype; }

a95 1
    case TAG_PARAM:  return h->info->param.name;
@


1.1.2.10
log
@MAP and AREA handling - first attempt
@
text
@a88 12
HStream      *HtmlOBJECTmapstream    (HStream *h)
{
    if (h->info->object.mapstream)
        return h->info->object.mapstream;

    if (!h->info->object.usemap)
        return NULL;

    return h->info->object.mapstream = __html_find_map(h->info->object.maps,
                                                       h->info->object.usemap);
}

@
