head	1.2;
access;
symbols
	HTMLLib-0_04:1.2
	HTMLLib-0_03:1.2
	HTMLLib-0_02:1.2
	HTMLLib-0_01:1.2
	ahodgkin_207release:1.2
	ahodgkin_206release:1.2
	ahodgkin_205release:1.2
	ahodgkin_204release:1.2
	ahodgkin_133beta:1.1.2.1
	kbracey_126:1.1.2.1
	kbracey_AW97patch:1.1.2.1
	ahodgkin_AW97:1.1.2.1
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	98.02.17.10.42.20;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.10.08.12.33.42;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.10.08.12.33.42;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Web branch merged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Ordered list routines */

#include <stdio.h>
#include <string.h>
#include "html2_ext.h" /* For the HTML bits */
#include "tags.h"      /* for PCDATA */
#include "internal.h"  /* predefinitions of functions */
#include "elementinf.h"

static void print_roman(char *temp, int value, bool upper);

void __html_construct_ol_text(StreamTokens *st, HStream *ret)
{
    char temp[32];
    int value, type;

    if (st->_stream_ol + st->_stream_ul <= MAX_OL)
    {
        value = st->_stream_olcount[st->_stream_ol + st->_stream_ul- 1];
        type = st->_stream_olstyle[st->_stream_ol + st->_stream_ul - 1];
    }
    else
    {
        value = 0;
        type = 'u';
    }

    switch (type)
    {
        case '1':
          sprintf(temp, "%d. ", value);
          break;

        case 'a':
          sprintf(temp, "%c. ", (value-1) % 26 + 'a');
          break;

        case 'A':
          sprintf(temp, "%c. ", (value-1) % 26 + 'A');
          break;

        case 'i':
        case 'I':
          print_roman(temp, value, type == 'I');
          strcat(temp, ". ");
          break;

        case 'u':
        default:
          return;
    }

    ret->text = strdup(temp);
}

static void print_roman(char *temp, int value, bool isupper)
{
    static const char ones[10][5] =
    {
        "", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix"
    };
    static const char tens[10][5] =
    {
        "", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc"
    };
    static const char hundreds[10][5] =
    {
        "", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm"
    };

    char *p = temp;
    const char *s;
    int o, t, h;

    value %= 5000;

    while (value >= 1000)
    {
        *p++ = 'm';
        value -= 1000;
    }

    t = value / 10;
    o = value % 10;
    h = t / 10;
    t = t % 10;

    for (s = hundreds[h]; *s; )
        *p++ = *s++;

    for (s = tens[t]; *s; )
        *p++ = *s++;

    for (s = ones[o]; *s; )
        *p++ = *s++;

    *p = '\0';

    if (isupper)
        while (*temp)
            *temp++ -= 32;
}
@


1.1
log
@file ol was initially added on branch Web.
@
text
@d1 116
@


1.1.2.1
log
@Implemented ordered lists.
Implemented <Q> ... </Q>.
Caused a linebreak after </DD>.
Finished implementing attributes for <OBJECT>.
Stopped HTML after a </FRAMESET> leaking through.
Ensured that FRAME and FRAMESET tokens aren't passed up if not using frames.

Removed lots of unnecessary #include "utf8.h" lines from encoding files.
Ensured unsigned constants used in UTF-8 code.
Added UTF8_next and UTF8_prev functions.
@
text
@a0 116
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Ordered list routines */

#include <stdio.h>
#include <string.h>
#include "html2_ext.h" /* For the HTML bits */
#include "tags.h"      /* for PCDATA */
#include "internal.h"  /* predefinitions of functions */
#include "elementinf.h"

static void print_roman(char *temp, int value, bool upper);

void __html_construct_ol_text(StreamTokens *st, HStream *ret)
{
    char temp[32];
    int value, type;

    if (st->_stream_ol + st->_stream_ul <= MAX_OL)
    {
        value = st->_stream_olcount[st->_stream_ol + st->_stream_ul- 1];
        type = st->_stream_olstyle[st->_stream_ol + st->_stream_ul - 1];
    }
    else
    {
        value = 0;
        type = 'u';
    }

    switch (type)
    {
        case '1':
          sprintf(temp, "%d. ", value);
          break;

        case 'a':
          sprintf(temp, "%c. ", (value-1) % 26 + 'a');
          break;

        case 'A':
          sprintf(temp, "%c. ", (value-1) % 26 + 'A');
          break;

        case 'i':
        case 'I':
          print_roman(temp, value, type == 'I');
          strcat(temp, ". ");
          break;

        case 'u':
        default:
          return;
    }

    ret->text = strdup(temp);
}

static void print_roman(char *temp, int value, bool isupper)
{
    static const char ones[10][5] =
    {
        "", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix"
    };
    static const char tens[10][5] =
    {
        "", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc"
    };
    static const char hundreds[10][5] =
    {
        "", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm"
    };

    char *p = temp;
    const char *s;
    int o, t, h;

    value %= 5000;

    while (value >= 1000)
    {
        *p++ = 'm';
        value -= 1000;
    }

    t = value / 10;
    o = value % 10;
    h = t / 10;
    t = t % 10;

    for (s = hundreds[h]; *s; )
        *p++ = *s++;

    for (s = tens[t]; *s; )
        *p++ = *s++;

    for (s = ones[o]; *s; )
        *p++ = *s++;

    *p = '\0';

    if (isupper)
        while (*temp)
            *temp++ -= 32;
}
@
