head	1.3;
access;
symbols
	HTMLLib-0_04:1.3
	HTMLLib-0_03:1.3
	HTMLLib-0_02:1.3
	HTMLLib-0_01:1.3
	ahodgkin_207release:1.2
	ahodgkin_206release:1.2
	ahodgkin_205release:1.2
	ahodgkin_204release:1.2
	ahodgkin_133beta:1.2
	kbracey_126:1.2
	kbracey_AW97patch:1.2
	ahodgkin_AW97:1.2
	kbracey_PreGordon:1.2
	Web_bp:1.2
	Web:1.2.0.2
	ARTtmp_merge:1.1.2.1
	ARTtmp:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2000.03.02.15.53.17;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.04.29.15.50.45;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.08.10.26.40;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.04.08.10.26.41;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Handle font colours inside anchors.
Detail:
  For code that changes font before the anchor, the link should be shown
  at link colour in a browser. For code that changes after, the link should
  be shown according to the colour specifier. It's the difference between
  <a href...><font color...>Link</font></a> and
  <font color...><a href...>Link</a></font>. Browse could never tell the
  difference previously so always used the link colour, but lots of sites
  these days seem to have a background colour that clashes with the link
  colour and use <font> tags to sort it out (ick). The solution is to stack
  the existing font settings on <a> and unstack on </a> (if there are any).
  Claimed a bit in COLOUR_INFO (internal.h) from the 'size' field to record
  if this was done - otherwise every anchor would have a stacked colour
  attached which is pretty inefficient.
Admin:
  Tested with a debug Browse and "production" Phoenix build, ensured the
  stack in/stack out behaviour is correct with TML debug in the library.
  Requires a Redraw.c in the browser from 02-Mar-2000 (15:30pm) or later.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>

#include "html2_ext.h"
#include "struct.h"
#include "tags.h"
#include "internal.h"

static void do_colourinfo_allocate(StreamTokens *st, int *allocate_required)
{
    if (*allocate_required)
    {
        ColourInfo *temp = st->_stream_colour;
        st->_stream_colour = (ColourInfo *) __html_malloc(sizeof(ColourInfo), 1);
        if (!st->_stream_colour)
        {
            st->_stream_colour = temp;
            return;
        }
        st->_stream_colour->next = temp;
        /* Inherit size/colour info */
        if (temp)
        {
            st->_stream_colour->colour       = temp->colour;
            st->_stream_colour->colour_valid = temp->colour_valid;
            st->_stream_colour->size         = temp->size;
        }
        else
        {
            st->_stream_colour->colour_valid = 0;
            st->_stream_colour->size         = st->_stream_basefont;
        }
        st->_stream_colour->stacked_for_link = 0;
        *allocate_required = 0;
    }

}

void add_colour_info(StreamTokens *st, unsigned int col, int *allocate_required)
{
    /*
     * If the <FONT> tag we're processing hasn't yet caused a ColourInfo
     * block to be stuck onto the stream, do it now
     */
    do_colourinfo_allocate(st, allocate_required);

    if (!st->_stream_colour) return;

    st->_stream_colour->colour_valid = 1;
    st->_stream_colour->colour       = col >> 8;
}

void add_size_info(StreamTokens *st, const char *ptr, int *allocate_required)
{
    int size;

    /*
     * If the <FONT> tag we're processing hasn't yet caused a ColourInfo
     * block to be stuck onto the stream, do it now
     */
    do_colourinfo_allocate(st, allocate_required);

    if (!st->_stream_colour) return;

    /*
     * Modify the size appropriately
     */
    if (*ptr == '+')
        size = st->_stream_basefont + atoi(ptr+1);
    else if (*ptr == '-')
        size = st->_stream_basefont - atoi(ptr+1);
    else
        size = atoi(ptr);

    if (size < 1) size = 1;
    if (size > 7) size = 7;

    st->_stream_colour->size = size;
}

void fill_in_colour_info(const StreamTokens *st, HStream *hs)
{
    if (!st->_stream_colour)
    {
        hs->fontsize = st->_stream_basefont;
        return;
    }

    /* Fill in colour if we have it */
    if (st->_stream_colour->colour_valid)
    {
        hs->type |= TYPE_COLOURED;
        hs->colour = st->_stream_colour->colour;
    }

    /* And the fontsize */
    hs->fontsize = st->_stream_colour->size;
}

void font_tag_closed(StreamTokens *st)
{
    /* The routine for TAG_A in __html_stream_end_tag (new_stream.c)
     * relies on this only freeing stacked colour details and nothing
     * else. If this changes, make sure it isn't going to break stuff
     * - may need to add/alter the stacking code used for TAG_A in
     * __html_stream_start_tag to compensate.
     */

    ColourInfo *temp;

    if (!st->_stream_colour) return;

    temp = st->_stream_colour->next;

    __html_free(st->_stream_colour, 0);

    st->_stream_colour = temp;
}
@


1.2
log
@Merged in ARTtmp_merge
@
text
@d46 1
d115 7
@


1.1
log
@file font was initially added on branch ARTtmp.
@
text
@d1 123
@


1.1.2.1
log
@Initial revision
@
text
@a0 123
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>

#include "html2_ext.h"
#include "struct.h"
#include "tags.h"
#include "internal.h"

static void do_colourinfo_allocate(StreamTokens *st, int *allocate_required)
{
    if (*allocate_required)
    {
        ColourInfo *temp = st->_stream_colour;
        st->_stream_colour = (ColourInfo *) __html_malloc(sizeof(ColourInfo), 1);
        if (!st->_stream_colour)
        {
            st->_stream_colour = temp;
            return;
        }
        st->_stream_colour->next = temp;
        /* Inherit size/colour info */
        if (temp)
        {
            st->_stream_colour->colour       = temp->colour;
            st->_stream_colour->colour_valid = temp->colour_valid;
            st->_stream_colour->size         = temp->size;
        }
        else
        {
            st->_stream_colour->colour_valid = 0;
            st->_stream_colour->size         = st->_stream_basefont;
        }
        *allocate_required = 0;
    }

}

void add_colour_info(StreamTokens *st, unsigned int col, int *allocate_required)
{
    /*
     * If the <FONT> tag we're processing hasn't yet caused a ColourInfo
     * block to be stuck onto the stream, do it now
     */
    do_colourinfo_allocate(st, allocate_required);

    if (!st->_stream_colour) return;

    st->_stream_colour->colour_valid = 1;
    st->_stream_colour->colour       = col >> 8;
}

void add_size_info(StreamTokens *st, const char *ptr, int *allocate_required)
{
    int size;

    /*
     * If the <FONT> tag we're processing hasn't yet caused a ColourInfo
     * block to be stuck onto the stream, do it now
     */
    do_colourinfo_allocate(st, allocate_required);

    if (!st->_stream_colour) return;

    /*
     * Modify the size appropriately
     */
    if (*ptr == '+')
        size = st->_stream_basefont + atoi(ptr+1);
    else if (*ptr == '-')
        size = st->_stream_basefont - atoi(ptr+1);
    else
        size = atoi(ptr);

    if (size < 1) size = 1;
    if (size > 7) size = 7;

    st->_stream_colour->size = size;
}

void fill_in_colour_info(const StreamTokens *st, HStream *hs)
{
    if (!st->_stream_colour)
    {
        hs->fontsize = st->_stream_basefont;
        return;
    }

    /* Fill in colour if we have it */
    if (st->_stream_colour->colour_valid)
    {
        hs->type |= TYPE_COLOURED;
        hs->colour = st->_stream_colour->colour;
    }

    /* And the fontsize */
    hs->fontsize = st->_stream_colour->size;
}

void font_tag_closed(StreamTokens *st)
{
    ColourInfo *temp;

    if (!st->_stream_colour) return;

    temp = st->_stream_colour->next;

    __html_free(st->_stream_colour, 0);

    st->_stream_colour = temp;
}
@
