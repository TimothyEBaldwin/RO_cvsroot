head	1.1;
access;
symbols
	kbracey_126:1.1.2.4
	kbracey_AW97patch:1.1.2.4
	ahodgkin_AW97:1.1.2.4
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	97.09.18.14.11.41;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.09.18.14.11.42;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.09.18.15.30.10;	author ahodgkin;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	97.09.30.14.13.51;	author kbracey;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	97.10.08.12.33.46;	author kbracey;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	97.11.28.15.32.16;	author kbracey;	state dead;
branches;
next	;


desc
@@


1.1
log
@file encoding was initially added on branch Web.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@


1.1.2.1
log
@Encoding support added (yippee). #define UNIFONT to get UTF-8 output,
otherwise Latin-1 output is provided. Lots of encoding files...
@
text
@a0 198
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"

#include "encoding.h"
#include "enc_ascii.h"
#include "iso8859-1.h"
#include "iso8859-2.h"
#include "iso8859-3.h"
#include "iso8859-4.h"
#include "iso8859-5.h"
#include "iso8859-7.h"
#include "iso8859-8.h"
#include "iso8859-9.h"
#include "iso8859-10.h"
#include "iso8859-13.h"
#include "sami.h"
#include "welsh.h"
#include "iso2022.h"
#include "shiftjis.h"
#include "bigfive.h"
#include "koi8r.h"
#include "microsoft.h"
#include "apple.h"
#include "euc-jp.h"
#include "euc-kr.h"
#include "euc-cn.h"
#include "enc_utf8.h"
#include "enc_utf16.h"
#include "enc_ucs4.h"

static struct EncList
{
    int identifier;
    char *names;
    Encoding *encoding;
}
enclist[] =
{
    3, "/US-ASCII/", &enc_ascii,
    4, "/ISO-8859-1/ISO-IR-101/", &enc_iso8859_1,
    5, "/ISO-8859-2/ISO-IR-102/", &enc_iso8859_2,
    6, "/ISO-8859-3/", &enc_iso8859_3,
    7, "/ISO-8859-4/", &enc_iso8859_4,
    8, "/ISO-8859-5/", &enc_iso8859_5,
   10, "/ISO-8859-7/", &enc_iso8859_7,
   11, "/ISO-8859-8/", &enc_iso8859_8,
   12, "/ISO-8859-9/", &enc_iso8859_9,
   13, "/ISO-8859-10/", &enc_iso8859_10,
   16, "/ISO-8859-13/", &enc_iso8859_13,
#ifdef UNIFONT
   17, "/SHIFT_JIS/X-SJIS/", &enc_shiftjis,
   18, "/EUC-JP/", &enc_euc_jp,
   37, "/ISO-2022-KR/", &enc_iso2022,
   38, "/EUC-KR/", &enc_euc_kr,
   39, "/ISO-2022-JP/", &enc_iso2022,
   40, "/ISO-2022-JP-2/", &enc_iso2022,
  104, "/ISO-2022-CN/", &enc_iso2022,
  105, "/ISO-2022-CN-EXT/", &enc_iso2022,
#endif
  106, "/UTF-8/UNICODE-1-1-UTF-8/UNICODE-2-0-UTF-8/", &enc_utf8, /* More general!!! */
 1001, "/ISO-10646-UCS-4/UCS-4/", &enc_ucs4,
 1010, "/UCS-2/UTF-16/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", &enc_utf16, /* More general!!! */
 2022, "/ISO-2022/", &enc_iso2022,
#ifdef UNIFONT
 2025, "/X-EUC_CN/GB2312/CN-GB/", &enc_euc_cn,
 2026, "/CN-BIG5/BIG5/", &enc_bigfive,
#endif
 2027, "/MACINTOSH/", &enc_mac_roman,
 2084, "/KOI8-R/", &enc_koi8r,
 2250, "/WINDOWS-1250/", &enc_cp1250,
 2252, "/WINDOWS-1252/", &enc_cp1252,
 4000, "/ISO-IR-182/", &enc_welsh,
 /*4001, "/ISO-IR-179/", &enc_baltic_rim,*/
 4002, "/ISO-8859-15/ISO-IR-197/", &enc_sami,
    0, NULL, NULL
};

Encoding *new_encoding(int n)
{
    struct EncList *e = enclist;
    struct Encoding *enc;

    for (e = enclist; e->identifier; e++)
    {
        if (e->identifier == n)
        {
            enc = malloc(sizeof(Encoding) + e->encoding->ws_size);
            if (!enc) return NULL;

            *enc = *e->encoding;
            enc->reset_decoder(enc);
            return enc;
        }
    }

    return NULL;
}

void delete_encoding(Encoding *e)
{
    e->delete(e);

    free(e);
}

static int mime_token_char(UCS4 c)
{
    if (c < 0x21 || c > 0x7E) return 0;

    switch (c)
    {
        case '(': case ')': case '<': case '>': case '@@':
        case ',': case ';': case ':': case '\\': case '"':
        case '/': case '[': case ']': case '?': case '=':
            return 0;
        default:
            return 1;
    }
}

int encoding_number_from_name(const char *name)
{
    const char *p = name;
    char *temp, *tp;
    struct EncList *e;
    char c;

    do
    {
        c = *p++;

    } while (mime_token_char(c));

    temp = (char *) malloc(p - name + 2);
    if (!temp) return 0;

    sprintf(temp, "/%.*s/", p - name - 1, name);

    /* Yuck, but it's simple, and we're only dealing with ASCII */
    for (tp = temp; *tp; tp++)
        if (*tp >= 'a' && *tp <= 'z')
            *tp -= 0x20;

    for (e = enclist; e->identifier; e++)
        if (strstr(e->names, temp))
            break;

    free(temp);
    return e->identifier;
}

/* To be supplied by the application */
extern void encoding_leaf_to_path(char *out, const char *leaf);

void *encoding_load_map_file(const char *leaf)
{
    int ftype = 0, flen;
    char fname[1024];
    _kernel_oserror *e;
    void *table;

    encoding_leaf_to_path(fname, leaf);
    sprintf(fname, "System:Data.Encodings.%s", leaf);

    _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 23, fname, &ftype, &flen);

    if (ftype != 1)
        return NULL;

    table = malloc(flen);
    if (!table)
        return NULL;

    e = _swix(OS_File, _INR(0,3), 16, fname, table, 0);
    if (e)
    {
        free(table);
        return NULL;
    }

    return table;
}
@


1.1.2.2
log
@Altered comment handling. It expects them to start with '<!', end with '>',
and there may be '<' '>' pairs inside but they must be correctly matched.
If there are too many '>'s, some of the commented out region will be visible
on the page. The other way round - you'll probably have a blank page ;-)
@
text
@d162 18
@


1.1.2.3
log
@Turned off CUSTOMER_SPECIAL.
Changed encoding tables to use FFFF as a null value instead of FFFD.
Added OBJECT support (more testing required - PARAM not yet done).
Added AREA support (commented out - MAP not yet done). They come out
looking like <A></A> elements.
Souped up mapping to Latin-1 (added lossy tables for Latin Extended
Additional, CJK Punctuation and Fullwidth forms).
Added support for <H1 align=...>
Stripped some superfluous whitespace caused by linefeeds.
Fixed missing linebreak in "<DT>One<DT>Two" by turning the second DT into
a BR.
Removed now unnecessary free(malloc(16384)) bodge.
Put in CJK code even if UNIFONT not defined (hey - why not?).
Added code to take direct pointer to table rather than loading it if
it's in ResourceFS.
Added support for encoding "x-acorn-latin1".
Ensured correct handling of OPTIONs when UNIFONT not defined.
@
text
@a39 1
#include "acorn.h"
d65 2
a66 1
/*#ifdef UNIFONT*/
d71 1
a71 1
   39, "/ISO-2022-JP/JIS_Encoding/", &enc_iso2022,
d75 1
a75 1
/*#endif*/
d80 2
a81 2
/*#ifdef UNIFONT*/
 2025, "/X-EUC_CN/GB2312/CN-GB/GB_2312-80", &enc_euc_cn,
d83 1
a83 1
/*#endif*/
a90 2
 4003, "/ISO-8859-13/", &enc_iso8859_13,
 5001, "/X-ACORN-LATIN1/", &enc_acorn_latin1,
d173 1
a173 2
    int ftype = 0, flen, fh, filesys;
    void *inthandle;
a179 1
    /* Check it's a file, and get it's length */
a184 18
    /* Open the file for input */
    e = _swix(OS_Find, _INR(0,1)|_OUT(0), 0x4F, fname, &fh);
    if (e)
        return NULL;

    /* Obtain the filing system number and internal handle */
    e = _swix(OS_FSControl, _INR(0,1)|_OUTR(1,2), 21, fh, &inthandle, &filesys);
    if (e)
        return NULL;

    /* Close the file */
    _swix(OS_Find, _INR(0,1), 0, fh);

    /* If it's ResourceFS, return a direct pointer */
    if ((filesys & 0xFF) == 46)
        return inthandle;

    /* Otherwise, load it */
@


1.1.2.4
log
@Implemented ordered lists.
Implemented <Q> ... </Q>.
Caused a linebreak after </DD>.
Finished implementing attributes for <OBJECT>.
Stopped HTML after a </FRAMESET> leaking through.
Ensured that FRAME and FRAMESET tokens aren't passed up if not using frames.

Removed lots of unnecessary #include "utf8.h" lines from encoding files.
Ensured unsigned constants used in UTF-8 code.
Added UTF8_next and UTF8_prev functions.
@
text
@d66 1
d75 1
d80 1
d83 1
@


1.1.2.5
log
@Modified to use external Unicode resources and UnicodeLib.
@
text
@@
