head	1.1;
access;
symbols
	kbracey_126:1.1.2.2
	kbracey_AW97patch:1.1.2.2
	ahodgkin_AW97:1.1.2.2
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	97.09.18.14.12.08;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.09.18.14.12.09;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.10.08.12.33.59;	author kbracey;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	97.11.28.15.32.28;	author kbracey;	state dead;
branches;
next	;


desc
@@


1.1
log
@file utf8 was initially added on branch Web.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@


1.1.2.1
log
@Encoding support added (yippee). #define UNIFONT to get UTF-8 output,
otherwise Latin-1 output is provided. Lots of encoding files...
@
text
@a0 230
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "utf8.h"

/*
 * UCS4_to_UTF8 converts a UCS-4 code to UTF-8, storing the result
 * in the array pointed to by out. This array must be large enough
 * to store the resulting UTF-8 element (6 bytes will always be
 * sufficient). The return value is a pointer to the byte after
 * the last one written.
 */
char *UCS4_to_UTF8(char *out, UCS4 code)
{
    if (code < 0x80)
    {
        *out++ = code;
        return out;
    }

    if (code < 0x800)
        *out++ = 0xC0 | (code >> 6);
    else
    {
        if (code < 0x10000)
            *out++ = 0xE0 | (code >> 12);
        else
        {
            if (code < 0x200000)
                *out++ = 0xF0 | (code >> 18);
            else
            {
                if (code < 0x4000000)
                    *out++ = 0xF8 | (code >> 24);
                else
                {
                    *out++ = 0xFC | (code >> 30);
                    *out++ = 0x80 | ((code >> 24) & 0x3F);
                }
                *out++ = 0x80 | ((code >> 18) & 0x3F);
            }
            *out++ = 0x80 | ((code >> 12) & 0x3F);
        }
        *out++ = 0x80 | ((code >> 6) & 0x3F);
    }
    *out++ = 0x80 | (code & 0x3F);

    return out;
}

/*
 * UTF8_to_UCS4 takes a pointer to a UTF-8 sequence and outputs
 * the corresponding UCS4 code, returning the number of bytes consumed.
 */
int UTF8_to_UCS4(const char *c, UCS4 *r)
{
    UCS4 c0 = c[0];
    UCS4 ucs, cn;

    /* Easy case - is code 0xxxxxxx? If so, just return it. */
    if (c0 < 0x80)
    {
        *r = c0;
        return 1;
    }

    /* If we have 10xxxxxx, we're broken */
    if (c0 < 0xC0)
        goto badutf;

    /* Check second byte is 10xxxxxx */
    cn = c[1] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (c0 << 6) | cn;

    /* Check for two byte codes - 110xxxxx 10xxxxxx */
    if (c0 < 0xE0)
    {
        /* ucs holds 00110xxx xxxxxxxx */
        ucs &=~ 0x3000;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x80)
            goto badutf;

        *r = ucs;
        return 2;
    }

    /* Check third byte is 10xxxxxx */
    cn = c[2] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 3 byte codes - 1110xxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF0)
    {
        /* ucs holds 1110 xxxxxxxx xxxxxxxx */
        ucs &=~ 0xE0000;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x800)
            goto badutf;

        *r = ucs;
        return 3;
    }

    /* Check fourth byte is 10xxxxxx */
    cn = c[3] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 4 byte codes - 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF8)
    {
        /* ucs holds 11 110xxxxx xxxxxxxx xxxxxxxx */
        ucs &=~ 0x3C00000;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x10000)
            goto badutf;

        *r = ucs;
        return 4;
    }

    /* Check fifth byte is 10xxxxxx */
    cn = c[4] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 5 byte codes - 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFC)
    {
        /* ucs holds 111110xx xxxxxxxx xxxxxxxx xxxxxxxx */
        ucs &=~ 0xF8000000;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x200000)
            goto badutf;

        *r = ucs;
        return 5;
    }

    /* Check sixth byte is 10xxxxxx */
    cn = c[5] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 6 byte codes - 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFE)
    {
        /* ucs holds 0xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx */

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x4000000)
            goto badutf;

        *r = ucs;
        return 6;
    }

    /* If we get this far, c0 = 1111111x which is bogus, so fall through to... */

  badutf:
    *r = 0xFFFD;
    return 1;
}

/*
 * UTF8_codelen gives the length of a UCS-4 code when converted to UTF-8
 * using UCS4_to_UTF8.
 */
int UTF8_codelen(UCS4 code)
{
    if (code < 0x80) return 1;
    if (code < 0x800) return 2;
    if (code < 0x10000) return 3;
    if (code < 0x200000) return 4;
    if (code < 0x4000000) return 5;
    return 6;
}

/*
 * UTF8_seqlen gives the length of a UTF-8 sequence, given its first
 * byte.
 */
int UTF8_seqlen(char c)
{
    if (c < 0xC0) return 1;
    if (c < 0xE0) return 2;
    if (c < 0xF0) return 3;
    if (c < 0xF8) return 4;
    if (c < 0xFC) return 5;
    if (c < 0xFE) return 6;
    return 1;
}
@


1.1.2.2
log
@Implemented ordered lists.
Implemented <Q> ... </Q>.
Caused a linebreak after </DD>.
Finished implementing attributes for <OBJECT>.
Stopped HTML after a </FRAMESET> leaking through.
Ensured that FRAME and FRAMESET tokens aren't passed up if not using frames.

Removed lots of unnecessary #include "utf8.h" lines from encoding files.
Ensured unsigned constants used in UTF-8 code.
Added UTF8_next and UTF8_prev functions.
@
text
@d9 18
a26 1
    if (code < 0x80u)
d32 2
a33 2
    if (code < 0x800u)
        *out++ = 0xC0u | (code >> 6);
d36 2
a37 2
        if (code < 0x10000u)
            *out++ = 0xE0u | (code >> 12);
d40 2
a41 2
            if (code < 0x200000u)
                *out++ = 0xF0u | (code >> 18);
d44 2
a45 2
                if (code < 0x4000000u)
                    *out++ = 0xF8u | (code >> 24);
d48 2
a49 2
                    *out++ = 0xFCu | (code >> 30);
                    *out++ = 0x80u | ((code >> 24) & 0x3Fu);
d51 1
a51 1
                *out++ = 0x80u | ((code >> 18) & 0x3Fu);
d53 1
a53 1
            *out++ = 0x80u | ((code >> 12) & 0x3Fu);
d55 1
a55 1
        *out++ = 0x80u | ((code >> 6) & 0x3Fu);
d57 1
a57 1
    *out++ = 0x80u | (code & 0x3Fu);
d72 1
a72 1
    if (c0 < 0x80u)
d79 1
a79 1
    if (c0 < 0xC0u)
d83 1
a83 1
    cn = c[1] ^ 0x80u;
d85 1
a85 1
    if (cn & 0xC0u)
d92 1
a92 1
    if (c0 < 0xE0u)
d95 1
a95 1
        ucs &=~ 0x3000u;
d98 1
a98 1
        if (ucs < 0x80u)
d106 1
a106 1
    cn = c[2] ^ 0x80u;
d108 1
a108 1
    if (cn & 0xC0u)
d115 1
a115 1
    if (c0 < 0xF0u)
d118 1
a118 1
        ucs &=~ 0xE0000u;
d121 1
a121 1
        if (ucs < 0x800u)
d129 1
a129 1
    cn = c[3] ^ 0x80u;
d131 1
a131 1
    if (cn & 0xC0u)
d138 1
a138 1
    if (c0 < 0xF8u)
d141 1
a141 1
        ucs &=~ 0x3C00000u;
d144 1
a144 1
        if (ucs < 0x10000u)
d152 1
a152 1
    cn = c[4] ^ 0x80u;
d154 1
a154 1
    if (cn & 0xC0u)
d161 1
a161 1
    if (c0 < 0xFCu)
d164 1
a164 1
        ucs &=~ 0xF8000000u;
d167 1
a167 1
        if (ucs < 0x200000u)
d175 1
a175 1
    cn = c[5] ^ 0x80u;
d177 1
a177 1
    if (cn & 0xC0u)
d184 1
a184 1
    if (c0 < 0xFEu)
d189 1
a189 1
        if (ucs < 0x4000000u)
d199 1
a199 1
    *r = 0xFFFDu;
d209 5
a213 5
    if (code < 0x80u) return 1;
    if (code < 0x800u) return 2;
    if (code < 0x10000u) return 3;
    if (code < 0x200000u) return 4;
    if (code < 0x4000000u) return 5;
d223 6
a228 6
    if (c < 0xC0u) return 1;
    if (c < 0xE0u) return 2;
    if (c < 0xF0u) return 3;
    if (c < 0xF8u) return 4;
    if (c < 0xFCu) return 5;
    if (c < 0xFEu) return 6;
a229 22
}

/*
 * UTF8_next advances the pointer to the next UTF-8 code in a string.
 */
char *UTF8_next(const char *p)
{
    while ((*++p & 0xC0u) == 0x80u)
        continue;

    return (char *) p;
}

/*
 * UTF8_prev reverses the pointer to the previous UTF-8 code in a string.
 */
char *UTF8_prev(const char *p)
{
    while ((*--p & 0xC0u) == 0x80u)
        continue;

    return (char *) p;
@


1.1.2.3
log
@Modified to use external Unicode resources and UnicodeLib.
@
text
@@
