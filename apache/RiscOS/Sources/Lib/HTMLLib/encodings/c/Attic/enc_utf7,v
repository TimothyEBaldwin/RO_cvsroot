head	1.1;
access;
symbols
	kbracey_126:1.1.2.1
	kbracey_AW97patch:1.1.2.1
	ahodgkin_AW97:1.1.2.1
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	97.09.18.14.11.38;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.09.18.14.11.39;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.11.28.15.32.14;	author kbracey;	state dead;
branches;
next	;


desc
@@


1.1
log
@file enc_utf7 was initially added on branch Web.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@


1.1.2.1
log
@Encoding support added (yippee). #define UNIFONT to get UTF-8 output,
otherwise Latin-1 output is provided. Lots of encoding files...
@
text
@a0 114
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>

#include "encoding.h"
#include "utf7.h"

#include "iso2022.h"
#include "enc_utf7.h"

typedef struct UTF7_Encoding
{
    Encoding e;
    char current[6];
    char *ptr;
    int count;
} UTF7_Encoding;

/*
 * Routines for encoding UTF-7
 * Number: 103
 * Names: UNICODE-1-1-UTF-7
 *        csUnicode11UTF7
 */
static void utf7_reset(Encoding *e)
{
    UTF7_Encoding *ue = (UTF7_Encoding *) e;

    ue->count = 0;
}

static unsigned int utf7_read(struct Encoding *e,
                              int (*ucs_out)(void *, UCS4),
                              const char *s,
                              unsigned int n,
                              void *handle)
{
    UTF7_Encoding *ue = (UTF7_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u;

    retry:
        if (ue->count)
        {
            if (c >= 0x80 && c <= 0xBF)
            {
                *ue->ptr++ = c;
                if (--ue->count == 0)
                    UTF7_to_UCS4(ue->current, &u);
                else
                    continue;
            }
            else
            {
                if (ucs_out)
                    if (ucs_out(handle, 0xFFFD))
                        break;

                ue->count = 0;

                goto retry;
            }
        }
        else
        {
            if (c <= 0x80)
                u = c;
            else if (c < 0xC0 || c >= 0xFE)
                u = 0xFFFD;
            else
            {
                ue->count = UTF7_seqlen(c) - 1;
                ue->current[0] = c;
                ue->ptr = ue->current + 1;

                continue;
            }
        }

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

static void utf7_delete(Encoding *e)
{
}

Encoding enc_utf7 =
{
    utf7_read,
    utf7_reset,
    sizeof(UTF7_Encoding) - sizeof(Encoding),
    utf7_delete
};
@


1.1.2.2
log
@Modified to use external Unicode resources and UnicodeLib.
@
text
@@
