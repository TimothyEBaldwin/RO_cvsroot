head	1.1;
access;
symbols
	kbracey_126:1.1.2.1
	kbracey_AW97patch:1.1.2.1
	ahodgkin_AW97:1.1.2.1
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	97.09.18.14.11.35;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.09.18.14.11.36;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.11.28.15.32.12;	author kbracey;	state dead;
branches;
next	;


desc
@@


1.1
log
@file enc_ucs4 was initially added on branch Web.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@


1.1.2.1
log
@Encoding support added (yippee). #define UNIFONT to get UTF-8 output,
otherwise Latin-1 output is provided. Lots of encoding files...
@
text
@a0 103
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>

#include "encoding.h"

#include "enc_ucs4.h"

typedef struct UCS4_Encoding
{
    Encoding e;
    union
    {
        char byte[4];
        UCS4 word;
    } code;
    char sync;
    enum { big_endian, little_endian } byte_sex;
} UCS4_Encoding;

/*
 * Routines for encoding UCS-4
 * Number: 1001
 * Names: ISO-10646-UCS-4
 *        csUCS4
 */
static void ucs4_reset(Encoding *e)
{
    UCS4_Encoding *ue = (UCS4_Encoding *) e;

    ue->code.word = 0;
    ue->sync = 3;
    ue->byte_sex = big_endian;
}

static unsigned int ucs4_read(struct Encoding *e,
                              int (*ucs_out)(void *, UCS4),
                              const char *s,
                              unsigned int n,
                              void *handle)
{
    UCS4_Encoding *ue = (UCS4_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u;

        if (ue->byte_sex == big_endian)
            ue->code.byte[ue->sync] = c;
        else
            ue->code.byte[3 - ue->sync] = c;

        if (ue->sync)
        {
            ue->sync--;
            continue;
        }

        ue->sync = 3;
        u = ue->code.word;

        if (u == 0xFFFE0000)
        {
            if (ue->byte_sex == big_endian)
                ue->byte_sex = little_endian;
            else
                ue->byte_sex = big_endian;
            u = 0xFEFF;
        }

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

static void ucs4_delete(Encoding *e)
{
}

Encoding enc_ucs4 =
{
    ucs4_read,
    ucs4_reset,
    sizeof(UCS4_Encoding) - sizeof(Encoding),
    ucs4_delete
};
@


1.1.2.2
log
@Modified to use external Unicode resources and UnicodeLib.
@
text
@@
