head	1.1;
access;
symbols
	kbracey_126:1.1.2.1
	kbracey_AW97patch:1.1.2.1
	ahodgkin_AW97:1.1.2.1
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	97.09.18.14.12.20;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.09.18.14.12.21;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file encoding was initially added on branch Web.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@


1.1.2.1
log
@Encoding support added (yippee). #define UNIFONT to get UTF-8 output,
otherwise Latin-1 output is provided. Lots of encoding files...
@
text
@a0 86
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "iso10646.h"

#ifndef encoding_H
#define encoding_H

/*
 * An Encoding structure provides a uniform interface to a document
 * encoding (such as ISO 8859/1, Shift-JIS, KSC 5601-1987), with
 * utilities for conversion to and from UTF-8 and UCS-4.
 */
typedef struct Encoding
{
    /*
     * read processes the next part of a stream. s points to the data, which
     * is n bytes long. For each UCS character found, ucs_out() will be called
     * with the character code and the value passed in handle.
     * It will cope correctly with multi-byte codes split across two calls.
     * ucs_out() may return non-zero to indicate that decoding should stop.
     * The function returns the number of bytes read - this will equal n unless
     * ucs_out() signals early termination.
     */
    unsigned int (*read)(struct Encoding *e,
                         int (*ucs_out)(void *, UCS4),
                         const char *s,
                         unsigned int n,
                         void *handle);

    /*
     * reset_decoder() resets the decoder to its default state. Some encodings
     * have state (eg ISO 2022's character set and UCS-2's byte ordering) - this
     * will reset to allow a stream to be rescanned or a new stream to be
     * decoded.
     */
    void (*reset_decoder)(struct Encoding *);

    /*
     * The following are for internal use only.
     */
    int ws_size;
    void (*delete)(struct Encoding *);
    void (*enable_iso2022)(struct Encoding *);

} Encoding;

/*
 * To obtain a new decoder session, use the following calls.
 *
 * new_encoding takes an encoding number. These numbers are Internet MIB numbers.
 */
Encoding *new_encoding(int n);

/*
 * When a decoding session has finished, call delete_encoding to free up the Encoding
 * structure and other associated workspace.
 */
void delete_encoding(Encoding *e);

/*
 * Given a MIME charset name (terminated by a character not valid in a MIME
 * charset name, so a direct pointer into the Content-Type header field will do),
 * this returns the encoding number (the Internet MIB coded value if assigned).
 * This number can be passed to new_encoding(). If the name is unknown or
 * unsupported, 0 is returned.
 */
int encoding_number_from_name(const char *name);

/*
 * Load a named map file into a malloc block, or return a pointer to it if in
 * ResourceFS.
 */
void *encoding_load_map_file(const char *fname);
#endif
@
