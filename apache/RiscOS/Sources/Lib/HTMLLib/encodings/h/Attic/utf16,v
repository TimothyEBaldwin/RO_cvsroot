head	1.1;
access;
symbols
	kbracey_126:1.1.2.1
	kbracey_AW97patch:1.1.2.1
	ahodgkin_AW97:1.1.2.1
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	97.10.08.12.34.01;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.10.08.12.34.01;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file utf16 was initially added on branch Web.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@


1.1.2.1
log
@Implemented ordered lists.
Implemented <Q> ... </Q>.
Caused a linebreak after </DD>.
Finished implementing attributes for <OBJECT>.
Stopped HTML after a </FRAMESET> leaking through.
Ensured that FRAME and FRAMESET tokens aren't passed up if not using frames.

Removed lots of unnecessary #include "utf8.h" lines from encoding files.
Ensured unsigned constants used in UTF-8 code.
Added UTF8_next and UTF8_prev functions.
@
text
@a0 66
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "iso10646.h"

#ifndef __utf16_h
#define __utf16_h

/*
 * UCS4_to_UTF16 converts a UCS-4 code to UTF-16, storing the result
 * in the array pointed to by out. This array must be large enough
 * to store the resulting UTF-16 element (4 bytes will always be
 * sufficient). The return value is a pointer to the byte after
 * the last one written. If code is not representable in UTF-16
 * (ie u >= 11000), it will output the UTF-16 element FFFD (replacement
 * character).
 */
extern UCS2 *UCS4_to_UTF16(UCS2 *out, UCS4 code);

/*
 * UTF16_codelen gives the length of a UCS-4 code (in 16-bit words) when
 * converted to UTF-16 using the above function. If not representable in
 * UTF-16, it will return 1, the length of FFFD (see above).
 */
extern int UTF16_codelen(UCS4 code);

/*
 * UTF16_seqlen gives the length of a UTF-16 sequence, given its first
 * 16-bit word.
 */
extern int UTF16_seqlen(UCS2 c);

/*
 * UTF16_to_UCS4 takes a pointer to a UTF-16 sequence and outputs
 * the corresponding UCS4 code, returning the number of 16-bit words
 * consumed. Incorrect sequences are dealt with by returning 1 and setting
 * *code_out to FFFD.
 */
extern int UTF16_to_UCS4(const UCS2 *in, UCS4 *code_out);

/*
 * UTF16_next advances the pointer to the next UTF-16 code in a string.
 * If p points to the middle of a UTF-16 sequence, it will be advanced
 * to the next UTF-16 sequence.
 */
UCS2 *UTF16_next(const UCS2 *p);

/*
 * UTF16_prev reverses the pointer to the previous UTF-16 code in a string.
 * If p points to the middle of a UTF-16 sequence, it will be reversed
 * to the start of that UTF-16 sequence.
 */
UCS2 *UTF16_prev(const UCS2 *p);

#endif
@
