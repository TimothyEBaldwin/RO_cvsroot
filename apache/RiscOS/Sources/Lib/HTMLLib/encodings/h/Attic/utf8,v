head	1.1;
access;
symbols
	kbracey_126:1.1.2.2
	kbracey_AW97patch:1.1.2.2
	ahodgkin_AW97:1.1.2.2
	Web:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	97.09.18.14.12.48;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.09.18.14.12.48;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.10.08.12.34.02;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file utf8 was initially added on branch Web.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@


1.1.2.1
log
@Encoding support added (yippee). #define UNIFONT to get UTF-8 output,
otherwise Latin-1 output is provided. Lots of encoding files...
@
text
@a0 45
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "iso10646.h"

/*
 * UCS4_to_UTF8 converts a UCS-4 code to UTF-8, storing the result
 * in the array pointed to by out. This array must be large enough
 * to store the resulting UTF-8 element (6 bytes will always be
 * sufficient). The return value is a pointer to the byte after
 * the last one written. Assumes code is a legal UCS value (ie
 * in the range 0-0x7FFFFFFF).
 */
extern char *UCS4_to_UTF8(char *out, UCS4 code);

/*
 * UTF8_codelen gives the length of a UCS-4 code when converted to UTF-8
 * using the above function.
 */
extern int UTF8_codelen(UCS4 code);

/*
 * UTF8_seqlen gives the length of a UTF-8 sequence, given its first
 * byte.
 */
extern int UTF8_seqlen(char c);

/*
 * UTF8_to_UCS4 takes a pointer to a UTF-8 sequence and outputs
 * the corresponding UCS4 code, returning the number of bytes consumed.
 * Incorrect sequences are dealt with by returning 1 and setting
 * *code_out to 0xFFFD.
 */
extern int UTF8_to_UCS4(const char *in, UCS4 *code_out);
@


1.1.2.2
log
@Implemented ordered lists.
Implemented <Q> ... </Q>.
Caused a linebreak after </DD>.
Finished implementing attributes for <OBJECT>.
Stopped HTML after a </FRAMESET> leaking through.
Ensured that FRAME and FRAMESET tokens aren't passed up if not using frames.

Removed lots of unnecessary #include "utf8.h" lines from encoding files.
Ensured unsigned constants used in UTF-8 code.
Added UTF8_next and UTF8_prev functions.
@
text
@a16 3
#ifndef __utf8_h
#define __utf8_h

a45 19

/*
 * UTF8_next advances the pointer to the next UTF-8 code in a string.
 * If p points to the middle of a UTF-8 sequence, it will be advanced
 * to the next UTF-8 sequence.
 *
 * Note that p + UTF8_seqlen(p[0]) != UTF8_next(p) if p points to the
 * middle of a sequence.
 */
char *UTF8_next(const char *p);

/*
 * UTF8_prev reverses the pointer to the previous UTF-8 code in a string.
 * If p points to the middle of a UTF-8 sequence, it will be reversed
 * to the start of that UTF-8 sequence.
 */
char *UTF8_prev(const char *p);

#endif
@
