head	1.3;
access;
symbols
	HTMLLib-0_04:1.3
	HTMLLib-0_03:1.3
	HTMLLib-0_02:1.3
	HTMLLib-0_01:1.3
	ahodgkin_207release:1.3
	ahodgkin_206release:1.3
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	ahodgkin_133beta:1.2.2.14
	kbracey_126:1.2.2.13
	kbracey_AW97patch:1.2.2.13
	ahodgkin_AW97:1.2.2.13
	kbracey_PreGordon:1.2
	Web_bp:1.2
	Web:1.2.0.2
	ARTtmp_merge:1.1.2.1
	ARTtmp:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	98.02.17.10.42.34;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.04.29.15.51.00;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.08.10.27.10;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.2.2.1
date	97.06.24.10.52.12;	author kbracey;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	97.07.02.08.39.47;	author kbracey;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	97.07.04.16.14.37;	author kbracey;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	97.07.24.16.21.09;	author kbracey;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	97.07.28.15.20.01;	author kbracey;	state Exp;
branches;
next	1.2.2.6;

1.2.2.6
date	97.07.29.09.22.40;	author ahodgkin;	state Exp;
branches;
next	1.2.2.7;

1.2.2.7
date	97.07.30.12.09.39;	author kbracey;	state Exp;
branches;
next	1.2.2.8;

1.2.2.8
date	97.08.01.09.00.09;	author kbracey;	state Exp;
branches;
next	1.2.2.9;

1.2.2.9
date	97.08.18.16.13.40;	author kbracey;	state Exp;
branches;
next	1.2.2.10;

1.2.2.10
date	97.09.18.14.12.54;	author kbracey;	state Exp;
branches;
next	1.2.2.11;

1.2.2.11
date	97.09.30.14.14.19;	author kbracey;	state Exp;
branches;
next	1.2.2.12;

1.2.2.12
date	97.10.02.14.49.14;	author kbracey;	state Exp;
branches;
next	1.2.2.13;

1.2.2.13
date	97.10.13.10.01.33;	author kbracey;	state Exp;
branches;
next	1.2.2.14;

1.2.2.14
date	98.01.06.17.35.13;	author ahodgkin;	state Exp;
branches;
next	;

1.1.2.1
date	97.04.08.10.27.10;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Web branch merged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef __html_structures
#define __html_structures

#include <stdlib.h>

#include "html2_ext.h"

/*
 * Give us the C++ bool type (ish)
 */
#ifndef __cplusplus
#if !defined(bool) && !defined(true) && !defined(false)
typedef int bool;
#define false 0
#define true 1
#else
#error "Please don't #define bool"
#endif
#endif

/*
 * An ascending priority scale for encoding selection. HtmlParse is
 * supplied with a suggested encoding, and the priority of that encoding choice.
 * This allows it, for example, to ignore a META charset= specification
 * if the user has specified something else. The ordering comes from the
 * draft HTML 4.0 specification.
 */
typedef enum encoding_priority
{
    priority_default,    /* The default: what the user has for global choices */
    priority_link,       /* What the link leading to the document said */
    priority_meta,       /* Specified in a META http-equiv in the HTML */
    priority_http,       /* As specified in the HTTP header */
    priority_user        /* A direct user override */
} encoding_priority;

/* The following are used to indicate alignment when a tag contains
 * an ALIGN= option
 */

#define _html_top 1
#define _html_middle 2
#define _html_bottom 3
#define _html_left 4
#define _html_right 5
#define _html_centre 6
#define _html_none 0

typedef enum imgalign
{
    imgalign_NONE,
    imgalign_TOP,
    imgalign_MIDDLE,
    imgalign_BOTTOM,
    imgalign_LEFT,
    imgalign_RIGHT,
    imgalign_CENTRE
} imgalign;

/* Shapes for client-side image maps */

typedef enum areashape
{
    areashape_RECT,
    areashape_CIRCLE,
    areashape_POLY,
    areashape_DEFAULT
} areashape;

/* Types of PARAM values */

typedef enum paramtype
{
    paramtype_DATA,
    paramtype_REF,
    paramtype_OBJECT
} paramtype;

/* This is for FRAMESET row & column width calculations ...
 */

#define ROWCOL_PERCENT (1U<<30)
#define ROWCOL_STAR    (1U<<31)
#define ROWCOL_VALUE   (~(ROWCOL_STAR|ROWCOL_PERCENT))

/*
 * FORM method possibilities
 */
typedef enum formmethod
{
    formmethod_GET,
    formmethod_POST
} formmethod;

/*
 * INPUT type possibilities
 */
typedef enum inputtype
{
    inputtype_TEXT,
    inputtype_PASSWORD,
    inputtype_CHECKBOX,
    inputtype_RADIO,
    inputtype_IMAGE,
    inputtype_HIDDEN,
    inputtype_SUBMIT,
    inputtype_RESET,
    inputtype_BUTTON,
    inputtype_FILE
} inputtype;

typedef struct AttrInfo {
    unsigned int attr:16;
    unsigned int processed:1;
    unsigned int pleasefree:1; /* data is a pointer and should be freed */
    unsigned int present:1;
    unsigned int miscflag:1;
    union
    {
        char *text;
        unsigned int number;
        int *coords;
        void *raw;
    } data;
} AttrInfo;

struct TABLECELL;
typedef union elementinfo elementinfo;

/* This structure is returned when a HTML Document structure above is
 * turned into a stream.
 */
typedef struct HTMLSTREAM {
    unsigned int        flags;   /* Flags for use by the caller; NOT touched by this library! */
    struct TABLECELL    *parent;
    unsigned int	type;	 /* Head or Body elements */
    unsigned int	style;   /* Bold, Anchor, TT etc. */
    /*unsigned int        style2;*/  /* Second style word */
    unsigned int	indent;  /* right margin units. */
    char 		*anchor; /* Anchor URL if text is anchor */
    char 		*text;	 /* PCData at this point */
    unsigned int	tag;	 /* if the element isnt text... e.g. HR */
    tag_no              tagno;   /* Use this, not tag... */
    char 		*src;	 /* the URL of images etc. */
    struct HTMLSTREAM   *next;	 /* next element */
    struct HTMLSTREAM   *prev;	 /* previous element */
    char     		*enctype;/* Encoding if used */
    char 		*name;
    char 		*value;
    char                *target;
    int                 *coords; /* Coords if part of a client-side image map */
    char                *onclick;
    unsigned int 	size;
    unsigned int	maxlen;
    unsigned int	rows;
    unsigned int	cols;
    unsigned int        colour:24;
    signed int          fontsize:8;
    elementinfo         *info;   /* General attributes attached to this element */
    } HStream, *HStreamRef;

#endif /* __html_structures */
@


1.2
log
@Merged in ARTtmp_merge
@
text
@a14 43
/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/struct,v $
 *
 * $Log: struct,v $
 * Revision 1.1.2.1  1997/04/08 10:27:10  kbracey
 * Initial revision
 *
 * Revision 1.1  95/10/12  12:49:23  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * Copyright (C) Acorn Computers Ltd. 1995
 *
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/struct,v $
 *
 * $Log: struct,v $
 * Revision 1.1.2.1  1997/04/08 10:27:10  kbracey
 * Initial revision
 *
 * Revision 1.1  95/10/12  12:49:23  pwain
 * Initial revision
 *
 * Revision 1.3  95/09/26  12:44:01  pwain
 * Added "none" to alignment enum.
 *
 * Revision 1.2  95/09/14  12:49:55  pwain
 * Lots more comments.
 *
 * Revision 1.1  95/09/08  10:06:17  pwain
 * Initial revision
 *
 *
 * This file contains the structures returned by the HTML parse routines.
 *
 */

d20 31
d63 30
d95 1
a95 1
 
d100 43
d149 1
d152 1
a152 1
    unsigned int        style2;  /* Second style word */
d157 1
d165 2
d173 1
a174 3

/* A(nother) useful macro to malloc and clear an area of memory */
#define HStreamalloc() (HStreamRef)__html_malloc(sizeof(HStream)+1,1)
@


1.2.2.1
log
@A couple more missing <TR> fixes - now copes with nested tables.
Added inheritance of ALIGN and BGCOLOR settings from <TR>s and <TABLE>s.
@
text
@d19 1
a19 1
 * $Source: /projects2/renaissa/cvsroot/Projects/Web/HTMLLib/h/struct,v $
a21 3
 * Revision 1.2  1997/04/29 15:51:00  kbracey
 * Merged in ARTtmp_merge
 *
d35 1
a35 1
 * $Source: /projects2/renaissa/cvsroot/Projects/Web/HTMLLib/h/struct,v $
a37 3
 * Revision 1.2  1997/04/29 15:51:00  kbracey
 * Merged in ARTtmp_merge
 *
d77 1
a77 1

@


1.2.2.2
log
@Added previous pointers to table rows and cells.
Implemented skipping of <STYLE> and <SCRIPT>.
@
text
@a87 1
struct TABLEHEADDATA;
a93 1
    struct TABLEHEADDATA *parent;
d115 3
@


1.2.2.3
log
@Made ALIGN=MIDDLE mean ALIGN=CENTRE in horizontal only contexts
@
text
@d15 49
@


1.2.2.4
log
@Totally redesigned attribute parsing code.
Started new API for accessing attributes - only implemented for BODY.
Added <BODY alink onload onunload> support.
@
text
@d39 1
a39 17

typedef struct AttrInfo {
    unsigned int attr:16;
    unsigned int processed:1;
    unsigned int pleasefree:1; /* data is a pointer and should be freed */
    unsigned int present:1;
    unsigned int miscflag:1;
    union
    {
        char *text;
        unsigned int number;
        void *raw;
    } data;
} AttrInfo;

struct TABLECELL;
typedef union elementinfo elementinfo;
d46 1
a46 1
    struct TABLECELL    *parent;
a66 1
    elementinfo         *info;   /* General attributes attached to this element */
@


1.2.2.5
log
@SCRIPT and <A onclick> handling, hopefully
@
text
@a76 3
    #ifdef CUSTOMER_SPECIAL
    char                *onclick;
    #endif
@


1.2.2.6
log
@Removed CUSTOMER_SPECIAL dependency from onclick field of HStream struct
@
text
@d77 1
d79 1
@


1.2.2.7
log
@Redid handling of FORM tags to use an elementinfo structure.
@
text
@a38 8
/*
 * FORM method possibilities
 */
typedef enum formmethod
{
    formmethod_GET,
    formmethod_POST
} formmethod;
@


1.2.2.8
log
@Revised INPUT handling - made INPUT type=image work
@
text
@a19 13
/*
 * Give us the C++ bool type (ish)
 */
#ifndef __cplusplus
#if !defined(bool) && !defined(true) && !defined(false)
typedef int bool;
#define false 0
#define true 1
#else
#error "Please don't #define bool"
#endif
#endif

a31 11
typedef enum imgalign
{
    imgalign_NONE,
    imgalign_TOP,
    imgalign_MIDDLE,
    imgalign_BOTTOM,
    imgalign_LEFT,
    imgalign_RIGHT,
    imgalign_CENTRE
} imgalign;

a46 17

/*
 * INPUT type possibilities
 */
typedef enum inputtype
{
    inputtype_TEXT,
    inputtype_PASSWORD,
    inputtype_CHECKBOX,
    inputtype_RADIO,
    inputtype_IMAGE,
    inputtype_HIDDEN,
    inputtype_SUBMIT,
    inputtype_RESET/*,
    inputtype_FILE,
    inputtype_BUTTON*/
} inputtype;
@


1.2.2.9
log
@Did align on <P> and right align on tables.
Fixed problem with the final ">" of "</SCRIPT>" ending up in the title.
Fixed problem of HtmlGetStream returning a pointer to the wrong parent table.
Added SUB and SUP.
@
text
@a19 2
#include "html2_ext.h"

a118 1
    tag_no              tagno;   /* Use this, not tag... */
@


1.2.2.10
log
@Encoding support added (yippee). #define UNIFONT to get UTF-8 output,
otherwise Latin-1 output is provided. Lots of encoding files...
@
text
@a34 16
/*
 * An ascending priority scale for encoding selection. HtmlParse is
 * supplied with a suggested encoding, and the priority of that encoding choice.
 * This allows it, for example, to ignore a META charset= specification
 * if the user has specified something else. The ordering comes from the
 * draft HTML 4.0 specification.
 */
typedef enum encoding_priority
{
    priority_default,    /* The default: what the user has for global choices */
    priority_link,       /* What the link leading to the document said */
    priority_meta,       /* Specified in a META http-equiv in the HTML */
    priority_http,       /* As specified in the HTTP header */
    priority_user        /* A direct user override */
} encoding_priority;

@


1.2.2.11
log
@Turned off CUSTOMER_SPECIAL.
Changed encoding tables to use FFFF as a null value instead of FFFD.
Added OBJECT support (more testing required - PARAM not yet done).
Added AREA support (commented out - MAP not yet done). They come out
looking like <A></A> elements.
Souped up mapping to Latin-1 (added lossy tables for Latin Extended
Additional, CJK Punctuation and Fullwidth forms).
Added support for <H1 align=...>
Stripped some superfluous whitespace caused by linefeeds.
Fixed missing linebreak in "<DT>One<DT>Two" by turning the second DT into
a BR.
Removed now unnecessary free(malloc(16384)) bodge.
Put in CJK code even if UNIFONT not defined (hey - why not?).
Added code to take direct pointer to table rather than loading it if
it's in ResourceFS.
Added support for encoding "x-acorn-latin1".
Ensured correct handling of OPTIONs when UNIFONT not defined.
@
text
@a73 10
/* Shapes for client-side image maps */

typedef enum areashape
{
    areashape_RECT,
    areashape_CIRCLE,
    areashape_POLY,
    areashape_DEFAULT
} areashape;

a116 1
        int *coords;
a144 1
    int                 *coords; /* Coords if part of a client-side image map */
@


1.2.2.12
log
@Added STRIKE and U
@
text
@d143 1
a143 1
    /*unsigned int        style2;*/  /* Second style word */
@


1.2.2.13
log
@PARAM and APPLET, take 1.
@
text
@a83 9
/* Types of PARAM values */

typedef enum paramtype
{
    paramtype_DATA,
    paramtype_REF,
    paramtype_OBJECT
} paramtype;

@


1.2.2.14
log
@*** empty log message ***
@
text
@d121 3
a123 3
    inputtype_RESET,
    inputtype_BUTTON,
    inputtype_FILE
@


1.1
log
@file struct was initially added on branch ARTtmp.
@
text
@d1 113
@


1.1.2.1
log
@Initial revision
@
text
@a0 107
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source: /ax/networking:Phileas/HTML/h/struct: $
 *
 * $Log:	struct,v $
 * Revision 1.1  95/10/12  12:49:23  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * Copyright (C) Acorn Computers Ltd. 1995
 *
 * $Version: networking $
 *
 * $Source: /ax/networking:Phileas/HTML/h/struct: $
 *
 * $Log:	struct,v $
 * Revision 1.1  95/10/12  12:49:23  pwain
 * Initial revision
 *
 * Revision 1.3  95/09/26  12:44:01  pwain
 * Added "none" to alignment enum.
 *
 * Revision 1.2  95/09/14  12:49:55  pwain
 * Lots more comments.
 *
 * Revision 1.1  95/09/08  10:06:17  pwain
 * Initial revision
 *
 *
 * This file contains the structures returned by the HTML parse routines.
 *
 */

#ifndef __html_structures
#define __html_structures

#include <stdlib.h>

/* The following are used to indicate alignment when a tag contains
 * an ALIGN= option
 */

#define _html_top 1
#define _html_middle 2
#define _html_bottom 3
#define _html_left 4
#define _html_right 5
#define _html_centre 6
#define _html_none 0

/* This is for FRAMESET row & column width calculations ...
 */
 
#define ROWCOL_PERCENT (1U<<30)
#define ROWCOL_STAR    (1U<<31)
#define ROWCOL_VALUE   (~(ROWCOL_STAR|ROWCOL_PERCENT))


/* This structure is returned when a HTML Document structure above is
 * turned into a stream.
 */
typedef struct HTMLSTREAM {
    unsigned int        flags;   /* Flags for use by the caller; NOT touched by this library! */
    unsigned int	type;	 /* Head or Body elements */
    unsigned int	style;   /* Bold, Anchor, TT etc. */
    unsigned int        style2;  /* Second style word */
    unsigned int	indent;  /* right margin units. */
    char 		*anchor; /* Anchor URL if text is anchor */
    char 		*text;	 /* PCData at this point */
    unsigned int	tag;	 /* if the element isnt text... e.g. HR */
    char 		*src;	 /* the URL of images etc. */
    struct HTMLSTREAM   *next;	 /* next element */
    struct HTMLSTREAM   *prev;	 /* previous element */
    char     		*enctype;/* Encoding if used */
    char 		*name;
    char 		*value;
    char                *target;
    unsigned int 	size;
    unsigned int	maxlen;
    unsigned int	rows;
    unsigned int	cols;
    unsigned int        colour:24;
    signed int          fontsize:8;
    } HStream, *HStreamRef;

/* A(nother) useful macro to malloc and clear an area of memory */
#define HStreamalloc() (HStreamRef)__html_malloc(sizeof(HStream)+1,1)

#endif /* __html_structures */
@
