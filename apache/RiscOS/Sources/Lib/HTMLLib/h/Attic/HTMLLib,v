head	1.3;
access;
symbols
	kbracey_PreGordon:1.2
	Web_bp:1.2
	Web:1.2.0.2
	ARTtmp_merge:1.1.2.2
	ARTtmp:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	98.02.17.10.42.24;	author kbracey;	state dead;
branches;
next	1.2;

1.2
date	97.04.29.15.50.51;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.08.10.26.52;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.04.08.10.26.52;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.04.09.16.44.41;	author kbracey;	state dead;
branches;
next	;

1.2.2.1
date	97.07.10.12.41.14;	author blaughto;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	97.07.15.16.57.31;	author kbracey;	state dead;
branches;
next	;


desc
@@


1.3
log
@Web branch merged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/RiscOS/Sources/Lib/HTMLLib/h/HTMLLib,v $
 *
 * $Log: HTMLLib,v $
 * Revision 1.2  1997/04/29 15:50:51  kbracey
 * Merged in ARTtmp_merge
 *
 * Revision 1.1.2.2  1997/04/09 16:44:41  kbracey
 * Spacing rules drastically improved. Major error in memory context handling
 * fixed. Bug in __html_strip_lf fixed.
 *
 * Revision 1.1.2.1  1997/04/08 10:26:52  kbracey
 * Initial revision
 *
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * Copyright (C) Acorn Computers Ltd.  1995
 *
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/RiscOS/Sources/Lib/HTMLLib/h/HTMLLib,v $
 *
 * $Log: HTMLLib,v $
 * Revision 1.2  1997/04/29 15:50:51  kbracey
 * Merged in ARTtmp_merge
 *
 * Revision 1.1.2.2  1997/04/09 16:44:41  kbracey
 * Spacing rules drastically improved. Major error in memory context handling
 * fixed. Bug in __html_strip_lf fixed.
 *
 * Revision 1.1.2.1  1997/04/08 10:26:52  kbracey
 * Initial revision
 *
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 * Revision 1.3  95/09/14  12:39:09  pwain
 * Comments, restructuring and bits.
 *
 * Revision 1.2  95/09/11  13:14:00  pwain
 * Fixes. The calls into __html_stream_free were typcasting a HStream to
 * type HTML, causing memory to be corrupted.
 *
 * Revision 1.1  95/09/08  10:06:13  pwain
 * Initial revision
 *
 *
 */

/*
 * This file contains the definitions of the API for using the HTML2
 * parser libraries.
 */
#ifndef __html2_parser_api_
#define __html2_parser_api_

/*
 * This file includes a number of other files. See these for comments
 * on their content. You will need them _all_ in your include path
 * when compiling with the HTMLlib object file.
 */
#include "html2_ext.h"	/* All the HTML 2 tags  */
#include "tags.h"	/* All the tag #defines */
#include "struct.h"	/* The structures used  */

/* Function calls provided. */

extern void *HtmlParse(char *url, int length, int type, int usingframes);
/* HtmlParse() is used to initialise the HTML parser for a document
 * to be parsed (the document need not actually be present). The
 * arguments passed in are:
 *
 *   (char *) url     - The full URL of the page to be parsed so
 *   	      	      	relative links may be established within the
 *		        document.
 *   (int) length     - The total length of the document (if known).
 *   	   	        This is used oven the chunk size argument for
 *			hourglass % calculation if it is non-zero.
 *   (int) type	      - The type as defined in the return value from
 *   	   	        HtmlIdentify. Typically this is 1 for HTML
 *			and 2 for plain text (this ensure plain text
 *   	   	        is PRE-formatted)
 *   (int) usingframes- If the front end is displaying frames, this
 *                      should equal 1. This will suppress NOFRAMES
 *                      data. Otherwise set to 0.
 */
extern HStream *HtmlGetStream(void *streamtok, char **document, int size);
/* HtmlGetStream() attempts to parse the next chunk of document in
 * the context of a previous document, or context created by HtmlParse().
 * The arguments passed in are:
 *
 *   (void *) streamtok - The context to parse in (provided from
 *   	      		  HTMLParse()).
 *   (char **) document - A pointer to a pointer to the start of the
 *   	       		  complete document (NOT the chunk to be
 *			  added).  As yet non-contiguous chunks are
 *			  not supported
 *   (int) size         - size of the chunk added.
 */
extern void HtmlStreamFree(void *stream);
/* Given a pointer to a HTML stream, this call will free up all memory
 * associated with the stream.
 */
extern int HttpStripHeaders(char *stream, size_t stream_len);
/* Given a pointer to the start of a data stream, and the amount of
 * data in the stream, HTTPStripHeaders returns the offset into the
 * stream at which the data segment starts assuming HTTP style headers
 */
extern unsigned int HtmlIdentify(char *stream, size_t stream_len, char done,
       		    		      char **url, int *file_type,
       		    		      int *canparse);
/* Given a pointer to the head of the data stream, the amount of data
 * currently in the stream, and a boolean flag to say if all the data
 * has been retrieved (done = 1 for complete stream, 0 for not), this call
 * attempts to understand the HTTP headers at the start of the stream,
 * indicating if a redirect is needed (return val = 302 and url becomes
 * a pointer to a buffer containing where to go to), authentication is
 * required (return val = 401), or the filetype of the document
 * derived from either the HTTP headers or the body data. If the
 * result is unknown, 0 is returned. If the filetype is known and no
 * redirect is needed, 200 is returned. (Yes these do look like the HTTP
 * response codes dont they :)
 *
 * The value passed back in can parse is as defined below:
 */
#define TYPE_UNKNOWN     0
#define TYPE_HTMLFILE    1
#define TYPE_TEXTFILE    2
#define TYPE_IMAGEFILE   3

/*
 */
extern char *HTTPEscapeString(char *string);
/* When returning data to a server, it is necessary to encode it in the
 * right way. This function call encodes the input string in this way,
 * returning the string to send (and not modifying the input string).
 */
#endif /* __html2_parser_api_ */
@


1.2
log
@Merged in ARTtmp_merge
@
text
@d19 1
a19 1
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/HTMLLib,v $
d22 3
d45 1
a45 1
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/HTMLLib,v $
d48 3
@


1.2.2.1
log
@Added HtmlInit function to explicitly initialse some static data so that a variant suitable for use by modules can be made
@
text
@d15 56
d108 1
a108 1
extern HStream *HtmlGetStream(void *streamtok, char **document, int size, unsigned int *flags);
a119 3
 *   (int *) flags      - output destintation for reported flags
 *
 * flags are:
a120 3
#define HTML_GOT_MORE 1u


a157 16
 */

extern void *HtmlMalloc(size_t size, void *parent);
/* Allocate memory associated with a stream - pass as parent a pointer to
 * a HStream or TableStream belonging to that stream. Then when HtmlStreamFree
 * is called, this block will be freed with it. The allocated memory is
 * zero-initialised.
 */

extern void HtmlFree(void *block);
/* Free a block allocated with HtmlMalloc
 */

extern void HtmlInit(void);
/* Initialise the HTML library.  *MUST* be called before any other routines
 * in the library.
@


1.2.2.2
log
@Removed stray file
@
text
@@


1.1
log
@file HTMLLib was initially added on branch ARTtmp.
@
text
@d1 159
@


1.1.2.1
log
@Initial revision
@
text
@a0 145
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source: /ax/networking:Phileas/HTML/h/api: $
 *
 * $Log:	api,v $
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * Copyright (C) Acorn Computers Ltd.  1995
 *
 * $Version: networking $
 *
 * $Source: /ax/networking:Phileas/HTML/h/api: $
 *
 * $Log:	api,v $
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 * Revision 1.3  95/09/14  12:39:09  pwain
 * Comments, restructuring and bits.
 *
 * Revision 1.2  95/09/11  13:14:00  pwain
 * Fixes. The calls into __html_stream_free were typcasting a HStream to
 * type HTML, causing memory to be corrupted.
 *
 * Revision 1.1  95/09/08  10:06:13  pwain
 * Initial revision
 *
 *
 */

/*
 * This file contains the definitions of the API for using the HTML2
 * parser libraries.
 */
#ifndef __html2_parser_api_
#define __html2_parser_api_

/*
 * This file includes a number of other files. See these for comments
 * on their content. You will need them _all_ in your include path
 * when compiling with the HTMLlib object file.
 */
#include "html2_ext.h"	/* All the HTML 2 tags  */
#include "tags.h"	/* All the tag #defines */
#include "struct.h"	/* The structures used  */

/* Function calls provided. */

extern void *HtmlParse(char *url, int length, int type, int usingframes);
/* HtmlParse() is used to initialise the HTML parser for a document
 * to be parsed (the document need not actually be present). The
 * arguments passed in are:
 *
 *   (char *) url     - The full URL of the page to be parsed so
 *   	      	      	relative links may be established within the
 *		        document.
 *   (int) length     - The total length of the document (if known).
 *   	   	        This is used oven the chunk size argument for
 *			hourglass % calculation if it is non-zero.
 *   (int) type	      - The type as defined in the return value from
 *   	   	        HtmlIdentify. Typically this is 1 for HTML
 *			and 2 for plain text (this ensure plain text
 *   	   	        is PRE-formatted)
 *   (int) usingframes- If the front end is displaying frames, this
 *                      should equal 1. This will suppress NOFRAMES
 *                      data. Otherwise set to 0.
 */
extern HStream *HtmlGetStream(void *streamtok, char **document, int size);
/* HtmlGetStream() attempts to parse the next chunk of document in
 * the context of a previous document, or context created by HtmlParse().
 * The arguments passed in are:
 *
 *   (void *) streamtok - The context to parse in (provided from
 *   	      		  HTMLParse()).
 *   (char **) document - A pointer to a pointer to the start of the
 *   	       		  complete document (NOT the chunk to be
 *			  added).  As yet non-contiguous chunks are
 *			  not supported
 *   (int) size         - size of the chunk added.
 */
extern void HtmlStreamFree(void *stream);
/* Given a pointer to a HTML stream, this call will free up all memory
 * associated with the stream.
 */
extern int HttpStripHeaders(char *stream, size_t stream_len);
/* Given a pointer to the start of a data stream, and the amount of
 * data in the stream, HTTPStripHeaders returns the offset into the
 * stream at which the data segment starts assuming HTTP style headers
 */
extern unsigned int HtmlIdentify(char *stream, size_t stream_len, char done,
       		    		      char **url, int *file_type,
       		    		      int *canparse);
/* Given a pointer to the head of the data stream, the amount of data
 * currently in the stream, and a boolean flag to say if all the data
 * has been retrieved (done = 1 for complete stream, 0 for not), this call
 * attempts to understand the HTTP headers at the start of the stream,
 * indicating if a redirect is needed (return val = 302 and url becomes
 * a pointer to a buffer containing where to go to), authentication is
 * required (return val = 401), or the filetype of the document
 * derived from either the HTTP headers or the body data. If the
 * result is unknown, 0 is returned. If the filetype is known and no
 * redirect is needed, 200 is returned. (Yes these do look like the HTTP
 * response codes dont they :)
 *
 * The value passed back in can parse is as defined below:
 */
#define TYPE_UNKNOWN     0
#define TYPE_HTMLFILE    1
#define TYPE_TEXTFILE    2
#define TYPE_IMAGEFILE   3

/*
 */
extern char *HTTPEscapeString(char *string);
/* When returning data to a server, it is necessary to encode it in the
 * right way. This function call encodes the input string in this way,
 * returning the string to send (and not modifying the input string).
 */
#endif /* __html2_parser_api_ */
@


1.1.2.2
log
@Spacing rules drastically improved. Major error in memory context handling
fixed. Bug in __html_strip_lf fixed.
@
text
@d19 1
a19 5
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/HTMLLib,v $
 *
 * $Log: HTMLLib,v $
 * Revision 1.1.2.1  1997/04/08 10:26:52  kbracey
 * Initial revision
d21 1
d35 1
a35 5
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/HTMLLib,v $
 *
 * $Log: HTMLLib,v $
 * Revision 1.1.2.1  1997/04/08 10:26:52  kbracey
 * Initial revision
d37 1
@
