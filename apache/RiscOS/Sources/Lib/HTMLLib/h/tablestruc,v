head	1.3;
access;
symbols
	HTMLLib-0_04:1.3
	HTMLLib-0_03:1.3
	HTMLLib-0_02:1.3
	HTMLLib-0_01:1.3
	ahodgkin_207release:1.3
	ahodgkin_206release:1.3
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	ahodgkin_133beta:1.2.2.15
	kbracey_126:1.2.2.13
	kbracey_AW97patch:1.2.2.13
	ahodgkin_AW97:1.2.2.13
	kbracey_PreGordon:1.2.2.4
	Web_bp:1.2
	Web:1.2.0.2
	ARTtmp_merge:1.1.2.1
	ARTtmp:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	98.02.17.10.42.34;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.04.29.15.51.01;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.28.14.20.29;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.2.2.1
date	97.05.12.12.10.23;	author kbracey;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	97.05.12.12.29.38;	author kbracey;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	97.05.12.12.35.34;	author kbracey;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	97.05.30.14.34.24;	author ahodgkin;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	97.06.03.12.50.17;	author kbracey;	state Exp;
branches;
next	1.2.2.6;

1.2.2.6
date	97.06.24.10.52.14;	author kbracey;	state Exp;
branches;
next	1.2.2.7;

1.2.2.7
date	97.07.02.08.39.48;	author kbracey;	state Exp;
branches;
next	1.2.2.8;

1.2.2.8
date	97.07.04.11.55.17;	author kbracey;	state Exp;
branches;
next	1.2.2.9;

1.2.2.9
date	97.07.24.16.21.10;	author kbracey;	state Exp;
branches;
next	1.2.2.10;

1.2.2.10
date	97.08.18.16.13.41;	author kbracey;	state Exp;
branches;
next	1.2.2.11;

1.2.2.11
date	97.09.17.15.08.40;	author ahodgkin;	state Exp;
branches;
next	1.2.2.12;

1.2.2.12
date	97.10.02.16.21.59;	author kbracey;	state Exp;
branches;
next	1.2.2.13;

1.2.2.13
date	97.10.03.10.57.02;	author ahodgkin;	state Exp;
branches;
next	1.2.2.14;

1.2.2.14
date	97.11.27.18.01.21;	author ahodgkin;	state Exp;
branches;
next	1.2.2.15;

1.2.2.15
date	98.01.13.11.43.35;	author ahodgkin;	state Exp;
branches;
next	;

1.1.2.1
date	97.04.28.14.20.30;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Web branch merged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef _TableSupport
#define _TableSupport

#ifdef StreamTest
#define CASTFROMTABLESTREAM (int)
#define CASTTOTABLESTREAM (table_stream *)
#else
#define CASTFROMTABLESTREAM
#define CASTTOTABLESTREAM
#endif

#ifdef StreamTest

#define StreamWidth    0 /*Usually generated from scanning*/
#define StreamHeight   4 /*Needed for Valign stuff...?*/
#define StreamColSpan  8 /*for table, the total Colspan*/
#define StreamRowSpan 12 /*ditto*/
#define StreamColOffs 16 /*for table only - the column offsets in OS units, for td/th the cell number?*/
#define StreamRowOffs 20 /*row offsets - first is 0, RowSpan+1 is total height*/
#define StreamTag     24
#define StreamNext    28
#define StreamList    32 /*linked list of other streams for the table rows/data or headers within rows/text or tables within data*/
#define StreamAlign   36
#define StreamValign  40
#define StreamData    44 /*text or may be a caption*/
#define StreamDataEnd 48 /*end of text*/
#define StreamBorder  52
#define StreamHSpace  56
#define StreamVSpace  60
#define StreamNoWrap  64 /*Usually false*/
#define StreamSize    68 /*i.e. 17 words*/

#endif

// typedef struct HTMLSTREAM {
//     unsigned int	type;	 /* Head or Body elements */
//     unsigned int	style;   /* Bold, Anchor, TT etc. */
//     unsigned int	indent;  /* right margin units. */
//     char 		*anchor; /* Anchor URL if text is anchor */
//     char 		*text;	 /* PCData at this point */
//     unsigned int	tag;	 /* if the element isnt text... e.g. HR */
//     char 		*src;	 /* the URL of images etc. */
//     struct HTMLSTREAM   *next;	 /* next element */
//     char     		*enctype;/* Encoding if used */
//     char 		*name;
//     char 		*value;
//     unsigned int 	size;
//     unsigned int	maxlen;
//     unsigned int	rows;
//     unsigned int	cols;
//     unsigned int        colour:24;
//     signed int          fontsize:8;
//     } HStream, *HStreamRef;
// #include "HTMLLib:struct.h"

// later definition is to allow for reinterpretation of the above...

// typedef struct HTMLSTREAM {
//     unsigned int        flags;   /* Flags for use by the caller; NOT touched by this library! */
//     unsigned int	type;	 /* Head or Body elements */
//     unsigned int	style;   /* Bold, Anchor, TT etc. */
//     unsigned int        style2;  /* Second style word */
//     unsigned int	indent;  /* right margin units. */
//     char 		*anchor; /* Anchor URL if text is anchor */
//     char 		*text;	 /* PCData at this point */
//     unsigned int	tag;	 /* if the element isnt text... e.g. HR */
//     char 		*src;	 /* the URL of images etc. */
//     struct HTMLSTREAM   *next;	 /* next element */
//     struct HTMLSTREAM   *prev;   /* previous element */
//     char     		*enctype;/* Encoding if used */
//     char 		*name;
//     char 		*value;
//     unsigned int 	size;
//     unsigned int	maxlen;
//     unsigned int	rows;
//     unsigned int	cols;
//     unsigned int        colour:24;
//     signed int          fontsize:8;
//     } HStream, *HStreamRef;

struct TABLESTREAM;

typedef struct TABLECELL
{
#ifdef StreamTest
 int dummy[2];
#endif
        int ColSpan;
        int RowSpan;
        int ColOffs; /*note different type to TABLESTREAM.ColOffs*/
        int RowOffs;
        unsigned int Tag; /* only TagTableData or TagTableHead */
        struct TABLEROW * parent;
        struct TABLECELL * Next;
        struct TABLECELL * Prev;
        struct TABLESTREAM * List;
        unsigned char Align; /*OTT*/
        unsigned char VAlign;
        char *background;
        unsigned int width;
        unsigned int height;
        unsigned int bgcol;
        unsigned int has_width:1;
        unsigned int has_height:1;
        unsigned int width_units:1;
        unsigned int height_units:1;
        unsigned int nowrap:1;
} table_cell, table_headdata;

/*************************************************************************/
/* Macros for accessing the fields of a TD/TH                            */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info()                                                */
/*************************************************************************/
#define TD_ALIGN(t)          ((unsigned)((t)->Align << TYPE_ALIGN_SHIFT))
#define TD_BACKGROUND(t)     ((unsigned)((t)->background))
#define TD_BGCOL(t)          ((unsigned)((t)->bgcol & 0xffffff00))
#define TD_HAS_BGCOL(t)      ((unsigned)((t)->bgcol != 0xffffffff))
#define TD_COLSPAN(t)        ((unsigned)((t)->ColSpan))
#define TD_HEIGHT(t)         ((unsigned)((t)->height))
#define TD_HEIGHT_UNITS(t)   ((unsigned)((t)->height_units))
#define TD_HAS_HEIGHT(t)     ((unsigned)((t)->has_height))
#define TD_NOWRAP(t)         ((unsigned)((t)->nowrap))
#define TD_ROWSPAN(t)        ((unsigned)((t)->RowSpan))
#define TD_VALIGN(t)         ((unsigned)((t)->VAlign))
#define TD_WIDTH(t)          ((unsigned)((t)->width))
#define TD_WIDTH_UNITS(t)    ((unsigned)((t)->width_units))
#define TD_HAS_WIDTH(t)      ((unsigned)((t)->has_width))

typedef struct TABLEROW
{
        int Width;
#ifdef StreamTest
 int dummy[6];
#endif
        struct TABLEROW * Next;
        struct TABLEROW * Prev;
        struct TABLESTREAM * parent;
        table_cell * List;
        unsigned char align;
        unsigned char valign;
        unsigned int bgcol;
#ifdef StreamTest
 int dummy2[6];
#endif
} table_row;

/*************************************************************************/
/* Macros for accessing the fields of a TR                               */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info()                                                */
/*************************************************************************/
#define TR_ALIGN(t)          ((unsigned)((t)->align << TYPE_ALIGN_SHIFT))
#define TR_VALIGN(t)         ((unsigned)((t)->valign))

// This is HStream really, but remapped...

struct styleinfo;

typedef struct TABLESTREAM {
        unsigned int flags; /*NEW ADDITION*/
        struct TABLECELL *parent;
        unsigned int type; /*KEPT FOR INTERPRETATION OF THIS BLOCK*/
        unsigned int style; /*DITTO*/
        /*unsigned int style2;*/ /*NEW ADDITION*/
        unsigned int indent;
        int RowSpan;
        int * ColOffs;
        unsigned int Tag; /*DITTO?*/
        tag_no   tagno;   /* Use this, not tag... */
        int * RowOffs;
        struct TABLESTREAM * Next; /*NOTE MUST BE IN THE RIGHT PLACE!!!*/
        struct TABLESTREAM * Prev; /*NEW ADDITION*/ //
        table_row * List;
        unsigned int bgcol;
        unsigned int cols;
        unsigned int width;
        unsigned int border;
        unsigned short cellspacing;
        unsigned short cellpadding;
        struct styleinfo *stackedstyle;
        void *cells;
        int ncells;
        unsigned int ColSpan:16;
        unsigned int Align:4;
        unsigned int VAlign:4;
        unsigned int awaiting_tr:1;
        unsigned int finished:1; /*OTT flag to say that we've finished - only used in real Parser*/
        unsigned int has_cols:1;
        unsigned int has_width:1;
        unsigned int width_units:1;
        unsigned int has_cellspacing:1;
        unsigned int has_cellpadding:1;
        unsigned int has_height:1;
        unsigned int height_units:1;
        unsigned int height;
        char *background;
        // Only add to the bottom of this, as some fields
        // must be in the same place as an HStream.
} table_stream;


/*************************************************************************/
/* Macros for accessing the fields of a TABLE                            */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info() and __html_table_start_tag()                   */
/*************************************************************************/
#define TABLE_HAS_COLS(t)        ((t)->has_cols)
#define TABLE_COLS(t)            ((t)->cols)
#define TABLE_HAS_WIDTH(t)       ((t)->has_width)
#define TABLE_WIDTH(t)           ((t)->width)
#define TABLE_WIDTH_UNITS(t)     ((t)->width_units)
#define TABLE_HAS_HEIGHT(t)      ((t)->has_height)
#define TABLE_HEIGHT(t)          ((t)->height)
#define TABLE_HEIGHT_UNITS(t)    ((t)->height_units)
#define TABLE_ALIGN(t)           ((t)->type & TYPE_ALIGN_MASK)
#define TABLE_BORDER(t)          ((t)->border)
#define TABLE_CELLSPACING(t)     ((t)->cellspacing)
#define TABLE_CELLPADDING(t)     ((t)->cellpadding)
#define TABLE_HAS_CELLSPACING(t) ((t)->has_cellspacing)
#define TABLE_HAS_CELLPADDING(t) ((t)->has_cellpadding)
#define TABLE_BGCOL(t)           ((t)->bgcol & 0xffffff00)
#define TABLE_HAS_BGCOL(t)       ((t)->bgcol != 0xffffffff)
#define TABLE_BACKGROUND(t)      ((t)->background)

//These must not conflict with HR,IMG etc.

#define TagText      0  /* Probably the same as PCDATA? */
#define TagPreText   1  /* but..only used by test code */
#define TagTable     ((unsigned int)1<<31)   /*Used - same as tag.h version */
#define TagRow       3  /*Used by test parser code only*/
#define TagTableData 4  /*Used*/
#define TagTableHead 5  /*Used*/

#endif /*_TableSupport*/
@


1.2
log
@Merged in ARTtmp_merge
@
text
@d97 1
a97 1
typedef struct TABLEHEADDATA
d107 3
a109 1
        struct TABLEHEADDATA * Next;
a113 1
        unsigned int flags;
d117 6
a122 5
} table_headdata;

#define TDFLAG_NOWRAP 1
#define TDFLAG_HEIGHT 2
#define TDFLAG_WIDTH  4
d135 3
a137 2
#define TD_HAS_HEIGHT(t)     ((unsigned)((t)->flags & TDFLAG_HEIGHT))
#define TD_NOWRAP(t)         ((unsigned)((t)->flags & TDFLAG_NOWRAP))
d140 3
a142 2
#define TD_WIDTH(t)          ((unsigned))(t)->width))
#define TD_HAS_WIDTH(t)      ((unsigned))(t)->flags & TDFLAG_WIDTH))
d151 3
a153 1
        table_headdata * List;
d156 1
d158 1
a158 1
 int dummy2[7];
d176 1
d179 2
a180 2
        unsigned int style2; /*NEW ADDITION*/
        int ColSpan;
d184 1
d187 1
a187 1
        struct TABLESTREAM * Prev; /*NEW ADDITION*/
d189 1
a189 3
// Reduce the following array size as more is needed
// If you run out, then add a dummy field to HStream, OR ELSE!
        int finished; /*OTT flag to say that we've finished - only used in real Parser*/
d196 18
a213 1
        unsigned int threefreespaces[2];
a215 7
#define TABLEFLAG_COLS  (1u<<0)
#define TABLEFLAG_WIDTH (1u<<1)
#define TABLEFLAG_UNITS_SHIFT 2
#define TABLEFLAG_UNITS_MASK (1u<<TABLEFLAG_UNITS_SHIFT)
#define TABLEFLAG_CELLSPACING (1u<<3)
#define TABLEFLAG_CELLPADDING (1u<<4)

d222 17
a238 11
#define TABLE_HAS_COLS(t)    ((t)->flags & TABLEFLAG_COLS)
#define TABLE_COLS(t)        ((t)->cols)
#define TABLE_HAS_WIDTH(t)   ((t)->flags & TABLEFLAG_WIDTH)
#define TABLE_WIDTH(t)       ((t)->width)
#define TABLE_WIDTH_UNITS(t) (((t)->flags & TABLEFLAG_UNITS_MASK) >> TABLEFLAG_UNITS_SHIFT)
#define TABLE_ALIGN(t)       ((unsigned)((t)->type & TYPE_ALIGN_MASK))
#define TABLE_BORDER(t)      ((t)->border)
#define TABLE_CELLSPACING(t) ((t)->cellspacing)
#define TABLE_CELLPADDING(t) ((t)->cellpadding)
#define TABLE_HAS_CELLSPACING(t) ((t)->flags & TABLEFLAG_CELLSPACING)
#define TABLE_HAS_CELLPADDING(t) ((t)->flags & TABLEFLAG_CELLPADDING)
@


1.2.2.1
log
@Typo in defines of TABLE_HAS_CELL{SPACING,PADDING} fixed
@
text
@d137 2
a138 2
#define TD_WIDTH(t)          ((unsigned)((t)->width))
#define TD_HAS_WIDTH(t)      ((unsigned)((t)->flags & TDFLAG_WIDTH))
@


1.2.2.2
log
@Dealt with percentages in table cell widths and heights
@
text
@d118 3
a120 7
#define TDFLAG_NOWRAP (1u<<0)
#define TDFLAG_HEIGHT (1u<<1)
#define TDFLAG_WIDTH  (1u<<2)
#define TDFLAG_WUNITS_SHIFT 3
#define TDFLAG_WUNITS_MASK (1u<<TDFLAG_WUNITS_SHIFT)
#define TDFLAG_HUNITS_SHIFT 4
#define TDFLAG_HUNITS_MASK (1u<<TDFLAG_HUNITS_SHIFT)
a132 1
#define TD_HEIGHT_UNITS(t)   ((unsigned)(t)->flags & TDFLAG_HUNITS_MASK) >> TDFLAG_HUNITS_SHIFT)
a137 1
#define TD_WIDTH_UNITS(t)    ((unsigned)(t)->flags & TDFLAG_WUNITS_MASK) >> TDFLAG_WUNITS_SHIFT)
@


1.2.2.3
log
@Another typo fixed
@
text
@d137 1
a137 1
#define TD_HEIGHT_UNITS(t)   ((unsigned)((t)->flags & TDFLAG_HUNITS_MASK) >> TDFLAG_HUNITS_SHIFT)
d143 1
a143 1
#define TD_WIDTH_UNITS(t)    ((unsigned)((t)->flags & TDFLAG_WUNITS_MASK) >> TDFLAG_WUNITS_SHIFT)
@


1.2.2.4
log
@Added "void * cells" to tablestream structure
@
text
@d195 1
a195 2
        void *cells;
        unsigned int freespaces[1];
@


1.2.2.5
log
@First attempt at "more HStreams have come in" flag and getting previous
pointers to work in tables. Various fiddles by GThorburn.
@
text
@a107 1
       /* struct TABLEHEADDATA * Prev;  //   */
a152 1
        /* struct TABLEROW * Prev;  //  */
d184 1
a184 1
        struct TABLESTREAM * Prev; /*NEW ADDITION*/ //
@


1.2.2.6
log
@A couple more missing <TR> fixes - now copes with nested tables.
Added inheritance of ALIGN and BGCOLOR settings from <TR>s and <TABLE>s.
@
text
@a157 1
        unsigned int bgcol;
d159 1
a159 1
 int dummy2[6];
d188 3
a190 1
        unsigned int bgcol;
d198 1
a198 6
        unsigned int Align:8;
        unsigned int awaiting_tr:1;
        unsigned int finished:1; /*OTT flag to say that we've finished - only used in real Parser*/
// Reduce the following array size as more is needed
// If you run out, then add a dummy field to HStream, OR ELSE!
        /*unsigned int freespaces[0]; No more free space */
@


1.2.2.7
log
@Added previous pointers to table rows and cells.
Implemented skipping of <STYLE> and <SCRIPT>.
@
text
@a106 1
        struct TABLEROW * parent;
d108 1
a108 1
        struct TABLEHEADDATA * Prev;
d154 1
a154 2
        struct TABLEROW * Prev;
        struct TABLESTREAM * parent;
a177 1
        struct TABLEHEADDATA *parent;
@


1.2.2.8
log
@Stopped table code using HStream flags word.
Allowed parsing of <--- Hello ---> style comments.
@
text
@d114 1
a117 5
        unsigned int has_width:1;
        unsigned int has_height:1;
        unsigned int width_units:1;
        unsigned int height_units:1;
        unsigned int nowrap:1;
d120 8
d139 3
a141 3
#define TD_HEIGHT_UNITS(t)   ((unsigned)((t)->height_units))
#define TD_HAS_HEIGHT(t)     ((unsigned)((t)->has_height))
#define TD_NOWRAP(t)         ((unsigned)((t)->nowrap))
d145 2
a146 2
#define TD_WIDTH_UNITS(t)    ((unsigned)((t)->width_units))
#define TD_HAS_WIDTH(t)      ((unsigned)((t)->has_width))
a202 5
        unsigned int has_cols:1;
        unsigned int has_width:1;
        unsigned int width_units:1;
        unsigned int has_cellspacing:1;
        unsigned int has_cellpadding:1;
d208 7
d221 1
a221 1
#define TABLE_HAS_COLS(t)    ((t)->has_cols)
d223 1
a223 1
#define TABLE_HAS_WIDTH(t)   ((t)->has_width)
d225 1
a225 1
#define TABLE_WIDTH_UNITS(t) ((t)->width_units)
d230 2
a231 2
#define TABLE_HAS_CELLSPACING(t) ((t)->has_cellspacing)
#define TABLE_HAS_CELLPADDING(t) ((t)->has_cellpadding)
@


1.2.2.9
log
@Totally redesigned attribute parsing code.
Started new API for accessing attributes - only implemented for BODY.
Added <BODY alink onload onunload> support.
@
text
@d97 1
a97 1
typedef struct TABLECELL
d108 2
a109 2
        struct TABLECELL * Next;
        struct TABLECELL * Prev;
d122 1
a122 1
} table_cell, table_headdata;
d153 1
a153 1
        table_cell * List;
d176 1
a176 1
        struct TABLECELL *parent;
@


1.2.2.10
log
@Did align on <P> and right align on tables.
Fixed problem with the final ">" of "</SCRIPT>" ending up in the title.
Fixed problem of HtmlGetStream returning a pointer to the wrong parent table.
Added SUB and SUP.
@
text
@a183 1
        tag_no   tagno;   /* Use this, not tag... */
@


1.2.2.11
log
@VALIGN on a TABLE tag is now inherited by TR. CENTER or CENTRE permitted,
as well as MIDDLE.
@
text
@d197 1
a197 2
        unsigned int Align:4;
        unsigned int VAlign:4;
@


1.2.2.12
log
@Removed style2 from table_stream structure too (oops)
@
text
@d179 1
a179 1
        /*unsigned int style2;*/ /*NEW ADDITION*/
@


1.2.2.13
log
@Now have an 'indent' field to TableStream structure to match that in
HStream, so that tables can be indented to the same horizontal position
as text; some page layouts rely on this (e.g. the current Acorn site!).
@
text
@d180 1
a180 1
        unsigned int indent;
a196 1
        unsigned int ColSpan:16;
@


1.2.2.14
log
@Extra field 'ncells' added to table_stream structure
@
text
@a196 1
        int ncells;
@


1.2.2.15
log
@HEIGHT and BACKGROUND attributes on a TABLE tag now supported, with appropriate
macros for extracting the information from a table_stream struct. A table_stream
no longer needs to be the same length or shorter than an HStream, though several
of the fields do still need to be in the same position in each structure.
@
text
@d208 3
a210 6
        unsigned int has_height:1;
        unsigned int height_units:1;
        unsigned int height;
        char *background;
        // Only add to the bottom of this, as some fields
        // must be in the same place as an HStream.
d219 9
a227 12
#define TABLE_HAS_COLS(t)        ((t)->has_cols)
#define TABLE_COLS(t)            ((t)->cols)
#define TABLE_HAS_WIDTH(t)       ((t)->has_width)
#define TABLE_WIDTH(t)           ((t)->width)
#define TABLE_WIDTH_UNITS(t)     ((t)->width_units)
#define TABLE_HAS_HEIGHT(t)      ((t)->has_height)
#define TABLE_HEIGHT(t)          ((t)->height)
#define TABLE_HEIGHT_UNITS(t)    ((t)->height_units)
#define TABLE_ALIGN(t)           ((t)->type & TYPE_ALIGN_MASK)
#define TABLE_BORDER(t)          ((t)->border)
#define TABLE_CELLSPACING(t)     ((t)->cellspacing)
#define TABLE_CELLPADDING(t)     ((t)->cellpadding)
a229 3
#define TABLE_BGCOL(t)           ((t)->bgcol & 0xffffff00)
#define TABLE_HAS_BGCOL(t)       ((t)->bgcol != 0xffffffff)
#define TABLE_BACKGROUND(t)      ((t)->background)
@


1.1
log
@file tablestruc was initially added on branch ARTtmp.
@
text
@d1 226
@


1.1.2.1
log
@Added in Tony Cheal's table code. Various other bug fixes.
@
text
@a0 226
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef _TableSupport
#define _TableSupport

#ifdef StreamTest
#define CASTFROMTABLESTREAM (int)
#define CASTTOTABLESTREAM (table_stream *)
#else
#define CASTFROMTABLESTREAM
#define CASTTOTABLESTREAM
#endif

#ifdef StreamTest

#define StreamWidth    0 /*Usually generated from scanning*/
#define StreamHeight   4 /*Needed for Valign stuff...?*/
#define StreamColSpan  8 /*for table, the total Colspan*/
#define StreamRowSpan 12 /*ditto*/
#define StreamColOffs 16 /*for table only - the column offsets in OS units, for td/th the cell number?*/
#define StreamRowOffs 20 /*row offsets - first is 0, RowSpan+1 is total height*/
#define StreamTag     24
#define StreamNext    28
#define StreamList    32 /*linked list of other streams for the table rows/data or headers within rows/text or tables within data*/
#define StreamAlign   36
#define StreamValign  40
#define StreamData    44 /*text or may be a caption*/
#define StreamDataEnd 48 /*end of text*/
#define StreamBorder  52
#define StreamHSpace  56
#define StreamVSpace  60
#define StreamNoWrap  64 /*Usually false*/
#define StreamSize    68 /*i.e. 17 words*/

#endif

// typedef struct HTMLSTREAM {
//     unsigned int	type;	 /* Head or Body elements */
//     unsigned int	style;   /* Bold, Anchor, TT etc. */
//     unsigned int	indent;  /* right margin units. */
//     char 		*anchor; /* Anchor URL if text is anchor */
//     char 		*text;	 /* PCData at this point */
//     unsigned int	tag;	 /* if the element isnt text... e.g. HR */
//     char 		*src;	 /* the URL of images etc. */
//     struct HTMLSTREAM   *next;	 /* next element */
//     char     		*enctype;/* Encoding if used */
//     char 		*name;
//     char 		*value;
//     unsigned int 	size;
//     unsigned int	maxlen;
//     unsigned int	rows;
//     unsigned int	cols;
//     unsigned int        colour:24;
//     signed int          fontsize:8;
//     } HStream, *HStreamRef;
// #include "HTMLLib:struct.h"

// later definition is to allow for reinterpretation of the above...

// typedef struct HTMLSTREAM {
//     unsigned int        flags;   /* Flags for use by the caller; NOT touched by this library! */
//     unsigned int	type;	 /* Head or Body elements */
//     unsigned int	style;   /* Bold, Anchor, TT etc. */
//     unsigned int        style2;  /* Second style word */
//     unsigned int	indent;  /* right margin units. */
//     char 		*anchor; /* Anchor URL if text is anchor */
//     char 		*text;	 /* PCData at this point */
//     unsigned int	tag;	 /* if the element isnt text... e.g. HR */
//     char 		*src;	 /* the URL of images etc. */
//     struct HTMLSTREAM   *next;	 /* next element */
//     struct HTMLSTREAM   *prev;   /* previous element */
//     char     		*enctype;/* Encoding if used */
//     char 		*name;
//     char 		*value;
//     unsigned int 	size;
//     unsigned int	maxlen;
//     unsigned int	rows;
//     unsigned int	cols;
//     unsigned int        colour:24;
//     signed int          fontsize:8;
//     } HStream, *HStreamRef;

struct TABLESTREAM;

typedef struct TABLEHEADDATA
{
#ifdef StreamTest
 int dummy[2];
#endif
        int ColSpan;
        int RowSpan;
        int ColOffs; /*note different type to TABLESTREAM.ColOffs*/
        int RowOffs;
        unsigned int Tag; /* only TagTableData or TagTableHead */
        struct TABLEHEADDATA * Next;
        struct TABLESTREAM * List;
        unsigned char Align; /*OTT*/
        unsigned char VAlign;
        char *background;
        unsigned int flags;
        unsigned int width;
        unsigned int height;
        unsigned int bgcol;
} table_headdata;

#define TDFLAG_NOWRAP 1
#define TDFLAG_HEIGHT 2
#define TDFLAG_WIDTH  4

/*************************************************************************/
/* Macros for accessing the fields of a TD/TH                            */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info()                                                */
/*************************************************************************/
#define TD_ALIGN(t)          ((unsigned)((t)->Align << TYPE_ALIGN_SHIFT))
#define TD_BACKGROUND(t)     ((unsigned)((t)->background))
#define TD_BGCOL(t)          ((unsigned)((t)->bgcol & 0xffffff00))
#define TD_HAS_BGCOL(t)      ((unsigned)((t)->bgcol != 0xffffffff))
#define TD_COLSPAN(t)        ((unsigned)((t)->ColSpan))
#define TD_HEIGHT(t)         ((unsigned)((t)->height))
#define TD_HAS_HEIGHT(t)     ((unsigned)((t)->flags & TDFLAG_HEIGHT))
#define TD_NOWRAP(t)         ((unsigned)((t)->flags & TDFLAG_NOWRAP))
#define TD_ROWSPAN(t)        ((unsigned)((t)->RowSpan))
#define TD_VALIGN(t)         ((unsigned)((t)->VAlign))
#define TD_WIDTH(t)          ((unsigned))(t)->width))
#define TD_HAS_WIDTH(t)      ((unsigned))(t)->flags & TDFLAG_WIDTH))

typedef struct TABLEROW
{
        int Width;
#ifdef StreamTest
 int dummy[6];
#endif
        struct TABLEROW * Next;
        table_headdata * List;
        unsigned char align;
        unsigned char valign;
#ifdef StreamTest
 int dummy2[7];
#endif
} table_row;

/*************************************************************************/
/* Macros for accessing the fields of a TR                               */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info()                                                */
/*************************************************************************/
#define TR_ALIGN(t)          ((unsigned)((t)->align << TYPE_ALIGN_SHIFT))
#define TR_VALIGN(t)         ((unsigned)((t)->valign))

// This is HStream really, but remapped...

struct styleinfo;

typedef struct TABLESTREAM {
        unsigned int flags; /*NEW ADDITION*/
        unsigned int type; /*KEPT FOR INTERPRETATION OF THIS BLOCK*/
        unsigned int style; /*DITTO*/
        unsigned int style2; /*NEW ADDITION*/
        int ColSpan;
        int RowSpan;
        int * ColOffs;
        unsigned int Tag; /*DITTO?*/
        int * RowOffs;
        struct TABLESTREAM * Next; /*NOTE MUST BE IN THE RIGHT PLACE!!!*/
        struct TABLESTREAM * Prev; /*NEW ADDITION*/
        table_row * List;
// Reduce the following array size as more is needed
// If you run out, then add a dummy field to HStream, OR ELSE!
        int finished; /*OTT flag to say that we've finished - only used in real Parser*/
        unsigned int cols;
        unsigned int width;
        unsigned int border;
        unsigned short cellspacing;
        unsigned short cellpadding;
        struct styleinfo *stackedstyle;
        unsigned int threefreespaces[2];
} table_stream;

#define TABLEFLAG_COLS  (1u<<0)
#define TABLEFLAG_WIDTH (1u<<1)
#define TABLEFLAG_UNITS_SHIFT 2
#define TABLEFLAG_UNITS_MASK (1u<<TABLEFLAG_UNITS_SHIFT)
#define TABLEFLAG_CELLSPACING (1u<<3)
#define TABLEFLAG_CELLPADDING (1u<<4)


/*************************************************************************/
/* Macros for accessing the fields of a TABLE                            */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info() and __html_table_start_tag()                   */
/*************************************************************************/
#define TABLE_HAS_COLS(t)    ((t)->flags & TABLEFLAG_COLS)
#define TABLE_COLS(t)        ((t)->cols)
#define TABLE_HAS_WIDTH(t)   ((t)->flags & TABLEFLAG_WIDTH)
#define TABLE_WIDTH(t)       ((t)->width)
#define TABLE_WIDTH_UNITS(t) (((t)->flags & TABLEFLAG_UNITS_MASK) >> TABLEFLAG_UNITS_SHIFT)
#define TABLE_ALIGN(t)       ((unsigned)((t)->type & TYPE_ALIGN_MASK))
#define TABLE_BORDER(t)      ((t)->border)
#define TABLE_CELLSPACING(t) ((t)->cellspacing)
#define TABLE_CELLPADDING(t) ((t)->cellpadding)
#define TABLE_HAS_CELLSPACING(t) ((t)->flags & TABLEFLAG_CELLSPACING)
#define TABLE_HAS_CELLPADDING(t) ((t)->flags & TABLEFLAG_CELLPADDING)

//These must not conflict with HR,IMG etc.

#define TagText      0  /* Probably the same as PCDATA? */
#define TagPreText   1  /* but..only used by test code */
#define TagTable     ((unsigned int)1<<31)   /*Used - same as tag.h version */
#define TagRow       3  /*Used by test parser code only*/
#define TagTableData 4  /*Used*/
#define TagTableHead 5  /*Used*/

#endif /*_TableSupport*/
@
