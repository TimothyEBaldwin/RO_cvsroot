head	1.8;
access;
symbols
	HTMLLib-0_04:1.8
	HTMLLib-0_03:1.8
	HTMLLib-0_02:1.8
	HTMLLib-0_01:1.8
	ahodgkin_207release:1.8
	ahodgkin_206release:1.5
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	ahodgkin_133beta:1.2.2.41
	kbracey_126:1.2.2.35
	kbracey_AW97patch:1.2.2.35
	ahodgkin_AW97:1.2.2.34
	kbracey_PreGordon:1.2
	Web_bp:1.2
	Web:1.2.0.2
	ARTtmp_merge:1.1.2.3
	ARTtmp:1.1.0.2;
locks; strict;
comment	@# @;


1.8
date	98.10.07.11.03.20;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.08.29.16.15.49;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.08.18.08.47.45;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	98.07.06.14.07.41;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	98.05.07.15.03.52;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	98.02.17.10.42.29;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.04.29.15.50.56;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.08.10.27.01;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.2.2.1
date	97.06.24.10.52.07;	author kbracey;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	97.06.26.11.02.50;	author kbracey;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	97.07.02.08.39.43;	author kbracey;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	97.07.02.09.05.58;	author gthorbur;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	97.07.02.09.23.51;	author gthorbur;	state Exp;
branches;
next	1.2.2.6;

1.2.2.6
date	97.07.02.16.02.00;	author kbracey;	state Exp;
branches;
next	1.2.2.7;

1.2.2.7
date	97.07.02.17.14.50;	author kbracey;	state Exp;
branches;
next	1.2.2.8;

1.2.2.8
date	97.07.03.13.57.51;	author kbracey;	state Exp;
branches;
next	1.2.2.9;

1.2.2.9
date	97.07.04.16.14.33;	author kbracey;	state Exp;
branches;
next	1.2.2.10;

1.2.2.10
date	97.07.07.12.14.41;	author kbracey;	state Exp;
branches;
next	1.2.2.11;

1.2.2.11
date	97.07.10.12.41.16;	author blaughto;	state Exp;
branches;
next	1.2.2.12;

1.2.2.12
date	97.07.24.16.21.04;	author kbracey;	state Exp;
branches;
next	1.2.2.13;

1.2.2.13
date	97.07.28.15.19.57;	author kbracey;	state Exp;
branches;
next	1.2.2.14;

1.2.2.14
date	97.07.30.12.09.35;	author kbracey;	state Exp;
branches;
next	1.2.2.15;

1.2.2.15
date	97.07.30.14.18.02;	author ahodgkin;	state Exp;
branches;
next	1.2.2.16;

1.2.2.16
date	97.07.31.13.30.04;	author ahodgkin;	state Exp;
branches;
next	1.2.2.17;

1.2.2.17
date	97.08.01.09.00.06;	author kbracey;	state Exp;
branches;
next	1.2.2.18;

1.2.2.18
date	97.08.04.10.23.43;	author ahodgkin;	state Exp;
branches;
next	1.2.2.19;

1.2.2.19
date	97.08.12.11.22.47;	author kbracey;	state Exp;
branches;
next	1.2.2.20;

1.2.2.20
date	97.08.12.14.05.32;	author ahodgkin;	state Exp;
branches;
next	1.2.2.21;

1.2.2.21
date	97.08.18.16.13.35;	author kbracey;	state Exp;
branches;
next	1.2.2.22;

1.2.2.22
date	97.08.27.08.33.33;	author ahodgkin;	state Exp;
branches;
next	1.2.2.23;

1.2.2.23
date	97.09.12.09.12.31;	author ahodgkin;	state Exp;
branches;
next	1.2.2.24;

1.2.2.24
date	97.09.17.15.08.39;	author ahodgkin;	state Exp;
branches;
next	1.2.2.25;

1.2.2.25
date	97.09.30.14.14.10;	author kbracey;	state Exp;
branches;
next	1.2.2.26;

1.2.2.26
date	97.10.02.14.49.11;	author kbracey;	state Exp;
branches;
next	1.2.2.27;

1.2.2.27
date	97.10.03.09.29.21;	author kbracey;	state Exp;
branches;
next	1.2.2.28;

1.2.2.28
date	97.10.03.14.17.09;	author kbracey;	state Exp;
branches;
next	1.2.2.29;

1.2.2.29
date	97.10.06.13.50.46;	author kbracey;	state Exp;
branches;
next	1.2.2.30;

1.2.2.30
date	97.10.08.12.34.06;	author kbracey;	state Exp;
branches;
next	1.2.2.31;

1.2.2.31
date	97.10.09.10.49.50;	author ahodgkin;	state Exp;
branches;
next	1.2.2.32;

1.2.2.32
date	97.10.13.10.01.30;	author kbracey;	state Exp;
branches;
next	1.2.2.33;

1.2.2.33
date	97.10.13.10.45.03;	author ahodgkin;	state Exp;
branches;
next	1.2.2.34;

1.2.2.34
date	97.10.15.21.01.28;	author ahodgkin;	state Exp;
branches;
next	1.2.2.35;

1.2.2.35
date	97.10.22.14.23.56;	author kbracey;	state Exp;
branches;
next	1.2.2.36;

1.2.2.36
date	97.11.24.16.15.00;	author ahodgkin;	state Exp;
branches;
next	1.2.2.37;

1.2.2.37
date	97.11.25.11.20.46;	author ahodgkin;	state Exp;
branches;
next	1.2.2.38;

1.2.2.38
date	98.01.07.15.31.17;	author ahodgkin;	state Exp;
branches;
next	1.2.2.39;

1.2.2.39
date	98.01.09.16.31.09;	author ahodgkin;	state Exp;
branches;
next	1.2.2.40;

1.2.2.40
date	98.01.13.11.43.34;	author ahodgkin;	state Exp;
branches;
next	1.2.2.41;

1.2.2.41
date	98.02.02.16.15.08;	author ahodgkin;	state Exp;
branches;
next	;

1.1.2.1
date	97.04.08.10.27.02;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.04.09.16.44.42;	author kbracey;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	97.04.28.14.20.24;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Corrected definition of frames border-related attributes to try and
walk a more sensible line between IE and Navigator behaviour.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file attempts to define the HTML2 DTD
 *
 * NOTE: Set terminal (display) width to about 192 chars!
 */

#ifndef __html2_h__
#define __html2_h__

#include "tags.h"
#include "rules.h"
#include "html2_ext.h"

static const Anchor A_Attributes[] = {
        { "ACCESSKEY",  ACCESSKEY, CDATA },
        { "CHARSET",    CHARSET,   CDATA },
        { "COORDS",     COORDS,    COORDS_RULE },
        { "HREF",       HREF,      URL_RULE },
        { "NAME",       NAME,      CDATA },
        { "REL",        REL,       CDATA },
        { "REV",        REV,       CDATA },
        { "SHAPE",      SHAPE,     SET, /*rect|*/"circle,circ|poly,polygon|default" },
        { "TABINDEX",   TABINDEX,  NUMBER },
        { "TARGET",     TARGET,    CDATA },
        };
#define MAX_A_ATTRIBUTES (SizeOfArray(A_Attributes))

static const Anchor Img_Attributes[] = {
        { "ALIGN",              ALIGN,   SET, "top|middle|bottom|left|right|centre,center" },
        { "ALT",                ALT,     CDATA },
        { "BORDER",             BORDER,  PIXELS_RULE },
        { "HEIGHT",             HEIGHT,  LENGTH_RULE },
        { "HSPACE",             HSPACE,  PIXELS_RULE },
        { "ISMAP",              ISMAP,   EMPTY },
        { "SRC",                SRC,     URL_RULE },
        { "USEMAP",             USEMAP,  CDATA /* Will be URL_RULE one day */ },
        { "VSPACE",             VSPACE,  PIXELS_RULE },
        { "WIDTH",              WIDTH,   LENGTH_RULE },
        };
#define MAX_IMG_ATTRIBUTES (SizeOfArray(Img_Attributes))


static const Anchor Object_Attributes[] = {
        { "ALIGN",             ALIGN,    SET, "top|middle|bottom|left|right|centre,center" },
        { "ARCHIVE",           ARCHIVE,  CDATA },
        { "BORDER",            BORDER,   LENGTH_RULE },
        { "CLASSID",           CLASSID,  CDATA }, /* Not URL_RULE */
        { "CODEBASE",          CODEBASE, CDATA },
        { "CODETYPE",          CODETYPE, CONTENTTYPE_RULE },
        { "DATA",              DATA,     CDATA },
        { "DECLARE",           DECLARE,  EMPTY },
        { "HEIGHT",            HEIGHT,   LENGTH_RULE },
        { "HSPACE",            HSPACE,   LENGTH_RULE },
        { "NAME",              NAME,     CDATA },
        { "SHAPES",            SHAPES,   EMPTY },
        { "STANDBY",           STANDBY,  CDATA },
        { "TABINDEX",          TABINDEX, NUMBER },
        { "TYPE",              TYPE,     CONTENTTYPE_RULE },
        { "USEMAP",            USEMAP,   CDATA /* Will be URL_RULE one day */ },
        { "VSPACE",            VSPACE,   LENGTH_RULE },
        { "WIDTH",             WIDTH,    LENGTH_RULE },
        };
#define MAX_OBJECT_ATTRIBUTES (SizeOfArray(Object_Attributes))


static const Anchor Param_Attributes[] = {
        { "ID",                ID,       ID_RULE },
        { "NAME",              NAME,     CDATA },
        { "TYPE",              TYPE,     CDATA },
        { "VALUE",             VALUE,    CDATA },
        { "VALUETYPE",         VALUETYPE,SET, /*data|*/"ref|object" },
        };

#define MAX_PARAM_ATTRIBUTES (SizeOfArray(Param_Attributes))


static const Anchor Applet_Attributes[] = {
        { "ALIGN",             ALIGN,    SET, "top|middle|bottom|left|right|centre,center" },
        { "ALT",               STANDBY,  CDATA },
        { "ARCHIVE",           ARCHIVE,  CDATA },
        { "CODE",              CLASSID,  CDATA },
        { "CODEBASE",          CODEBASE, URL_RULE },
        { "HEIGHT",            HEIGHT,   LENGTH_RULE },
        { "HSPACE",            HSPACE,   PIXELS_RULE },
        { "NAME",              NAME,     CDATA },
        { "OBJECT",            OBJECT,   CDATA },
        { "VSPACE",            VSPACE,   PIXELS_RULE },
        { "WIDTH",             WIDTH,    LENGTH_RULE },
        };
#define MAX_APPLET_ATTRIBUTES (SizeOfArray(Applet_Attributes))


/* EMBED (yeurch!) is a special case - it can take any extra attributes */
static const Anchor Embed_Attributes[] = {
        { "ALIGN",             ALIGN,    SET, "top|middle|bottom|left|right|centre,center" },
        { "HEIGHT",            HEIGHT,   LENGTH_RULE },
        { "SRC",               DATA,     CDATA },
        { "WIDTH",             WIDTH,    LENGTH_RULE },
        };
#define MAX_EMBED_ATTRIBUTES (SizeOfArray(Embed_Attributes))


static const Anchor Link_Attributes[] = {
        { "HREF",               HREF,    URL_RULE },
        { "MEDIA",              MEDIA,   CDATA },
        { "REL",                REL,     CDATA },
        { "REV",                REV,     CDATA },
        { "TARGET",             TARGET,  CDATA },
        { "TYPE",               TYPE,    CONTENTTYPE_RULE },
        };
#define MAX_LINK_ATTRIBUTES (SizeOfArray(Link_Attributes))

static const Anchor Meta_Attributes[] = {
        { "CONTENT",            CONTENT,    CDATA },
        { "HTTP-EQUIV",         HTTP_EQUIV, NAME_RULE },
        { "NAME",               NAME,       NAME_RULE },
        { "SCHEME",             SCHEME,     CDATA },
        };
#define MAX_META_ATTRIBUTES (SizeOfArray(Meta_Attributes))

static const Anchor Body_Attributes[] = {
        { "ALINK",              ALINK,    COLOUR_RULE },
        { "BACKGROUND",         BACKGROUND, URL_RULE  },
        { "BGCOLOR",            BGCOL,    COLOUR_RULE },
        { "BGCOLOUR",           BGCOL,    COLOUR_RULE },
        { "LINK",               LINKCOL,  COLOUR_RULE },
        { "ONLOAD",             ONLOAD,   SCRIPT_RULE },
        { "ONUNLOAD",           ONUNLOAD, SCRIPT_RULE },
        { "TEXT",               FGCOL,    COLOUR_RULE },
        { "VLINK",              VLINK,    COLOUR_RULE },
        };
#define MAX_BODY_ATTRIBUTES (SizeOfArray(Body_Attributes))

static const Anchor H_Attributes[] = {
        { "ALIGN",              ALIGN,   SET, "left|centre,center,middle|right"/*|justify*/ },
        };
#define MAX_H_ATTRIBUTES (SizeOfArray(H_Attributes))

static const Anchor OL_Attributes[] = {
        { "COMPACT",          COMPACT,   EMPTY },
        { "START",            STARTattr, NUMBER },
        { "TYPE",             TYPE,      OLSTYLE_RULE },
        };
#define MAX_OL_ATTRIBUTES (SizeOfArray(OL_Attributes))

static const Anchor LI_Attributes[] = {
        { "TYPE",             TYPE,      OLSTYLE_RULE },
        { "VALUE",            VALUE,     NUMBER },
        };
#define MAX_LI_ATTRIBUTES (SizeOfArray(LI_Attributes))

static const Anchor HR_Attributes[] = {
        { "ALIGN",              ALIGN,   SET, "left|right"/*|centre,center,middle*/ },
        { "NOSHADE",            NOSHADE, EMPTY       },
        { "SIZE",               SIZE,    PIXELS_RULE },
        { "WIDTH",              WIDTH,   LENGTH_RULE },
        };
#define MAX_HR_ATTRIBUTES (SizeOfArray(HR_Attributes))

static const Anchor P_Attributes[] = {
        { "ALIGN",              ALIGN,   SET, "left|centre,center,middle|right"/*|justify*/ },
        };
#define MAX_P_ATTRIBUTES (SizeOfArray(P_Attributes))

static const Anchor Base_Attributes[] = {
        { "HREF",               HREF,    URL_RULE },
        { "TARGET",             TARGET,  CDATA },
        };
#define MAX_BASE_ATTRIBUTES (SizeOfArray(Base_Attributes))

static const Anchor Form_Attributes[] = {
        { "ACCEPT-CHARSET",     ACCEPT_CHARSET, CDATA },
        { "ACTION",             ACTION,         URL_RULE },
        { "ENCTYPE",            ENCTYPE,        CONTENTTYPE_RULE },
        { "METHOD",             METHOD,         SET, /*get|*/ "post" },
        { "ONRESET",            ONRESET,        SCRIPT_RULE },
        { "ONSUBMIT",           ONSUBMIT,       SCRIPT_RULE },
        { "TARGET",             TARGET,         CDATA },
        };
#define MAX_FORM_ATTRIBUTES (SizeOfArray(Form_Attributes))

static const Anchor Input_Attributes[] = {
        { "ACCEPT",             ACCEPT,    CDATA       },
        { "ALIGN",              ALIGN,     SET, "top|middle|bottom|left|right|centre,center"},
        { "ALT",                ALT,       CDATA       },
        { "CHECKED",            CHECKED,   EMPTY       },
        { "DISABLED",           DISABLED,  EMPTY       },
        { "MAXLENGTH",          MAXLENGTH, NUMBER      },
        { "NAME",               NAME,      CDATA       },
        { "ONBLUR",             ONBLUR,    SCRIPT_RULE },
        { "ONCHANGE",           ONCHANGE,  SCRIPT_RULE },
        { "ONFOCUS",            ONFOCUS,   SCRIPT_RULE },
        { "ONSELECT",           ONSELECT,  SCRIPT_RULE },
        { "READONLY",           READONLY,  EMPTY       },
        { "SIZE",               SIZE,      NUMBER /* HTML 4.0 says CDATA */ },
        { "SRC",                SRC,       URL_RULE    },
        { "TABINDEX",           TABINDEX,  NUMBER      },
        { "TYPE",               TYPE,      SET, /*text|*/"password|checkbox|radio|image|hidden|submit|reset|button"/*file*/},
        { "USEMAP",             USEMAP,    CDATA /* Will be URL_RULE one day */ },
        { "VALUE",              VALUE,     CDATA       },
        };
#define MAX_INPUT_ATTRIBUTES (SizeOfArray(Input_Attributes))

static const Anchor Select_Attributes[] = {
        { "DISABLED",           DISABLED,  EMPTY },
        { "MULTIPLE",           MULTIPLE,  EMPTY },
        { "NAME",               NAME,      CDATA },
        { "ONBLUR",             ONBLUR,    SCRIPT_RULE },
        { "ONCHANGE",           ONCHANGE,  SCRIPT_RULE },
        { "ONFOCUS",            ONFOCUS,   SCRIPT_RULE },
        { "ONSELECT",           ONSELECT,  SCRIPT_RULE },
        { "SIZE",               SIZE,      NUMBER },
        { "TABINDEX",           TABINDEX,  NUMBER },
        };
#define MAX_SELECT_ATTRIBUTES (SizeOfArray(Select_Attributes))

static const Anchor Option_Attributes[] = {
        { "DISABLED",           DISABLED,  EMPTY },
        { "SELECTED",           SELECTED,  EMPTY },
        { "VALUE",              VALUE,     CDATA },
        };
#define MAX_OPTION_ATTRIBUTES (SizeOfArray(Option_Attributes))

static const Anchor Textarea_Attributes[] = {
        { "COLS",               COLS,     NUMBER      },
        { "DISABLED",           DISABLED, EMPTY       },
        { "NAME",               NAME,     CDATA       },
        { "ONBLUR",             ONBLUR,   SCRIPT_RULE },
        { "ONCHANGE",           ONCHANGE, SCRIPT_RULE },
        { "ONFOCUS",            ONFOCUS,  SCRIPT_RULE },
        { "ONSELECT",           ONSELECT, SCRIPT_RULE },
        { "READONLY",           READONLY, EMPTY       },
        { "ROWS",               ROWS,     NUMBER      },
        { "TABINDEX",           TABINDEX, NUMBER      },
        };
#define MAX_TEXTAREA_ATTRIBUTES (SizeOfArray(Textarea_Attributes))

static const Anchor Basefont_Attributes[] = {
        { "COLOR",              COLOUR,    COLOUR_RULE },
        { "COLOUR",             COLOUR,    COLOUR_RULE },
        { "FACE",               FACE,      CDATA       },
        { "SIZE",               FONTSIZE,  NUMBER      }, /* HTML 4.0 says CDATA */
        };
#define MAX_BASEFONT_ATTRIBUTES (SizeOfArray(Basefont_Attributes))

static const Anchor Font_Attributes[] = {
        { "COLOR",              COLOUR,    COLOUR_RULE },
        { "COLOUR",             COLOUR,    COLOUR_RULE },
        { "FACE",               FACE,      CDATA       },
        { "SIZE",               FONTSIZE,  CDATA       },
        };
#define MAX_FONT_ATTRIBUTES (SizeOfArray(Font_Attributes))

static const Anchor Table_Attributes[] = {
        { "ALIGN",              ALIGN,       SET, "left|centre,center,middle|right" },
        { "BACKGROUND",         BACKGROUND,  URL_RULE    },
        { "BGCOLOR",            BGCOL,       COLOUR_RULE },
        { "BGCOLOUR",           BGCOL,       COLOUR_RULE },
        { "BORDER",             BORDER,      NUMBER, "1" }, /* HTML 4.0 says CDATA, default to 1 if just "border" is given without a value */
        { "CELLPADDING",        CELLPADDING, NUMBER      }, /* HTML 4.0 implies LENGTH_RULE, says CDATA */
        { "CELLSPACING",        CELLSPACING, NUMBER      }, /* HTML 4.0 implies LENGTH_RULE, says CDATA */
        { "COLS",               COLS,        NUMBER      },
        { "FRAME",              TABLEFRAME,  SET, "void|above|below|hsides|lhs|rhs|vsides|box|border" },
        { "HEIGHT",             HEIGHT,      LENGTH_RULE }, /* Not sure about this */
        { "RULES",              TABLERULES,  SET, "none|groups|rows|cols|all" },
        { "VALIGN",             VALIGN,      SET, "top|middle,center,centre|bottom|baseline" },
        { "WIDTH",              WIDTH,       LENGTH_RULE }, /* Not sure about this either! */
        };
#define MAX_TABLE_ATTRIBUTES (SizeOfArray(Table_Attributes))

static const Anchor TR_Attributes[] = {
        { "ALIGN",              ALIGN,      SET, "left|centre,center,middle|right|justify|char" },
        { "BGCOLOR",            BGCOL,      COLOUR_RULE },
        { "BGCOLOUR",           BGCOL,      COLOUR_RULE },
        { "CHAR",               CHAR,       CDATA       },
        { "CHAROFF",            CHAROFF,    CDATA       },
        { "VALIGN",             VALIGN,     SET, "top|middle,center,centre|bottom|baseline" },
        };
#define MAX_TR_ATTRIBUTES (SizeOfArray(TR_Attributes))

static const Anchor Cell_Attributes[] = {
        { "ALIGN",              ALIGN,      SET, "left|centre,center,middle|right|justify|char" },
        { "BACKGROUND",         BACKGROUND, URL_RULE     },
        { "BGCOLOR",            BGCOL,      COLOUR_RULE  },
        { "BGCOLOUR",           BGCOL,      COLOUR_RULE  },
        { "CHAR",               CHAR,       CDATA        },
        { "CHAROFF",            CHAROFF,    CDATA        },
        { "COLSPAN",            COLSPAN,    NUMBER       },
        { "HEIGHT",             HEIGHT,     LENGTH_RULE  }, /* Not HTML 4.0 */
        { "NOWRAP",             NOWRAP,     EMPTY        },
        { "ROWSPAN",            ROWSPAN,    NUMBER       },
        { "VALIGN",             VALIGN,     SET, "top|middle,center,centre|bottom|baseline" },
        { "WIDTH",              WIDTH,      LENGTH_RULE  }, /* Not HTML 4.0 */
        };
#define MAX_CELL_ATTRIBUTES (SizeOfArray(Cell_Attributes))

static const Anchor Frameset_Attributes[] = {
        { "BORDER",             BORDER,           PIXELS_RULE }, /* Not HTML 4.0 */
        { "BORDERCOLOR",        BORDERCOLOUR,     COLOUR_RULE }, /* Not HTML 4.0 */
        { "BORDERCOLOUR",       BORDERCOLOUR,     COLOUR_RULE }, /* Not HTML 4.0 */
        { "COLS",               COLS,             CDATA /* Default 1 */ },
        { "FRAMEBORDER",        FRAMEBORDER,      CDATA       }, /* Not HTML 4.0 */
        { "FRAMESPACING",       BORDER,           PIXELS_RULE }, /* Not HTML 4.0 */
        { "ONLOAD",             ONLOAD,           SCRIPT_RULE },
        { "ONUNLOAD",           ONUNLOAD,         SCRIPT_RULE },
        { "ROWS",               ROWS,             CDATA /* Default 1 */ },
};
#define MAX_FRAMESET_ATTRIBUTES (SizeOfArray (Frameset_Attributes))

static const Anchor Frame_Attributes[] = {
        { "BORDER",             BORDER,           PIXELS_RULE },
        { "BORDERCOLOR",        BORDERCOLOUR,     COLOUR_RULE }, /* Not HTML 4.0 */
        { "BORDERCOLOUR",       BORDERCOLOUR,     COLOUR_RULE }, /* Not HTML 4.0 */
        { "FRAMEBORDER",        FRAMEBORDER,      CDATA },
        { "MARGINHEIGHT",       MARGINHEIGHT,     PIXELS_RULE },
        { "MARGINWIDTH",        MARGINWIDTH,      PIXELS_RULE },
        { "NAME",               NAME,             CDATA },
        { "NORESIZE",           NORESIZE,         EMPTY },
        { "SCROLLING",          SCROLLING,        SET, /*auto|*/"yes|no"},
        { "SRC",                SRC,              URL_RULE },
};
#define MAX_FRAME_ATTRIBUTES (SizeOfArray (Frame_Attributes))

static const Anchor Map_Attributes[] = {
        { "NAME",               NAME,             CDATA },
};
#define MAX_MAP_ATTRIBUTES (SizeOfArray (Map_Attributes))

static const Anchor Area_Attributes[] = {
        { "ACCESSKEY",          ACCESSKEY,        CDATA },
        { "ALT",                ALT,              CDATA },
        { "COORDS",             COORDS,           COORDS_RULE },
        { "HREF",               HREF,             URL_RULE },
        { "NOHREF",             NOHREF,           EMPTY },
        { "SHAPE",              SHAPE,            SET, /*rect|*/"circle,circ|poly,polygon|default" },
        { "TABINDEX",           TABINDEX,         NUMBER },
        { "TARGET",             TARGET,           CDATA },
};
#define MAX_AREA_ATTRIBUTES (SizeOfArray (Area_Attributes))

static const Anchor Div_Attributes[] = {
        { "ALIGN",              ALIGN,            SET, "left|centre,center,middle|right"/*|justify*/ },
};
#define MAX_DIV_ATTRIBUTES (SizeOfArray (Div_Attributes))

static const Anchor Script_Attributes[] = {
        { "CHARSET",            CHARSET,          CDATA },
        { "DEFER",              DEFER,            EMPTY },
        { "LANGUAGE",           LANGUAGE,         CDATA },
        { "SRC",                SRC,              URL_RULE },
        { "TYPE",               TYPE,             CDATA },
};
#define MAX_SCRIPT_ATTRIBUTES (SizeOfArray (Script_Attributes))

const Anchor Event_Attributes[] = {
        { "ONCLICK",            ONCLICK,          SCRIPT_RULE },
        { "ONDBLCLICK",         ONDBLCLICK,       SCRIPT_RULE },
        { "ONKEYDOWN",          ONKEYDOWN,        SCRIPT_RULE },
        { "ONKEYPRESS",         ONKEYPRESS,       SCRIPT_RULE },
        { "ONKEYUP",            ONKEYUP,          SCRIPT_RULE },
        { "ONMOUSEDOWN",        ONMOUSEDOWN,      SCRIPT_RULE },
        { "ONMOUSEMOVE",        ONMOUSEMOVE,      SCRIPT_RULE },
        { "ONMOUSEOUT",         ONMOUSEOUT,       SCRIPT_RULE },
        { "ONMOUSEOVER",        ONMOUSEOVER,      SCRIPT_RULE },
        { "ONMOUSEUP",          ONMOUSEUP,        SCRIPT_RULE },
};
const int MAX_EVENT_ATTRIBUTES=SizeOfArray(Event_Attributes);

const Anchor I18n_Attributes[] = {
        { "DIR" ,               DIRECTION,        SET, "ltr|rtl" },
        { "LANG",               LANG,             NAME_RULE },
};
const int MAX_I18N_ATTRIBUTES=SizeOfArray(I18n_Attributes);

const Anchor Core_Attributes[] = {
        { "CLASS",              CLASS,            CDATA },
        { "ID",                 ID,               ID_RULE },
        { "STYLE",              STYLEattr,        CDATA },
        { "TITLE",              TITLEattr,        CDATA }
};
const int MAX_CORE_ATTRIBUTES=SizeOfArray(Core_Attributes);

Tag Null_Tag;

Tag Tags[] = {

/*
 * The first field after the tag avoids number clashes
 * BAL: The anchor field in these data structures may no longer be initialised here.
 * They must be explicitly initialised in the funtion __html_rules_init in rules.c
 * Clients must call the new function HtmlInit before calling any other functions in
 * HTMLLib to ensure tht this initialisation happens.
 */

 /*                                                                                                        has_events
                                                                                                        has_i18n
                                                                                                     has_coreattrs
                                                                                                  block_tag
      start_tag     tag_no          tag           attributes          max_attributes           can_be_end     type */
    { "A",          TAG_A,          A,            A_Attributes,       MAX_A_ATTRIBUTES,        1, 0, 1, 1, 1, TYPE_BODY },
    { "ACRONYM",    TAG_ACRONYM,    0,            0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to SMALL -> FONT SIZE = "-1" */
    { "ADDRESS",    TAG_ADDRESS,    ADDRESS,      0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "APPLET",     TAG_APPLET,     0,            Applet_Attributes,  MAX_APPLET_ATTRIBUTES,   1, 1, 1, 0, 0, TYPE_BODY },
    { "AREA",       TAG_AREA,       0,            Area_Attributes,    MAX_AREA_ATTRIBUTES,     0, 1, 1, 1, 1, TYPE_BODY },
    { "B",          TAG_BOLD,       BOLD,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "BASE",       TAG_BASE,       0,            Base_Attributes,    MAX_BASE_ATTRIBUTES,     0, 0, 0, 0, 0, TYPE_HEAD },
    { "BASEFONT",   TAG_BASEFONT,   FONT,         Basefont_Attributes,MAX_BASEFONT_ATTRIBUTES, 0, 0, 0, 0, 0, TYPE_BODY },
    { "BIG",        TAG_BIG,        0,            0,                  0,                       1, 0, 0, 0, 0, TYPE_BODY }, /* Currently mapped to FONT SIZE = "+1" */
    { "BLINK",      TAG_DUMMY,      0,            0,                  0,                       1, 0, 0, 0, 0, TYPE_BODY }, /* Dummy to get white space after a </BLINK> working OK */
    { "BLOCKQUOTE", TAG_BLOCKQUOTE, BLOCKQUOTE,   0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "BODY",       TAG_BODY,       BODY,         Body_Attributes,    MAX_BODY_ATTRIBUTES,     1, 1, 1, 1, 1, TYPE_HEAD },
    { "BR",         TAG_BR,         BR,           0,                  0,                       0, 1, 1, 0, 0, TYPE_BODY },
    { "CENTER",     TAG_CENTER,     CENTER,       0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "CENTRE",     TAG_CENTER,     CENTER,       0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "CITE",       TAG_CITE,       CITE,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "CODE",       TAG_CODE,       CODE,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "DD",         TAG_DD,         DD,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DEL",        TAG_DEL,        STRIKE,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to STRIKE */
    { "DFN",        TAG_DFN,        ITALIC,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to I */
    { "DIR",        TAG_DIR,        UL,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DIV",        TAG_DIV,        0,            Div_Attributes,     MAX_DIV_ATTRIBUTES,      1, 1, 1, 1, 1, TYPE_BODY },
    { "DL",         TAG_DL,         DL,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DT",         TAG_DT,         DT,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "EM",         TAG_EM,         EM,           0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "EMBED",      TAG_EMBED,      0,            Embed_Attributes,   MAX_EMBED_ATTRIBUTES,    0, 1, 0, 0, 0, TYPE_BODY },
    { "FONT",       TAG_FONT,       FONT,         Font_Attributes,    MAX_FONT_ATTRIBUTES,     1, 0, 0, 0, 0, TYPE_BODY },
    { "FORM",       TAG_FORM,       FORM,         Form_Attributes,    MAX_FORM_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
    { "FRAME",      TAG_FRAME,      FRAME,        Frame_Attributes,   MAX_FRAME_ATTRIBUTES,    0, 0, 0, 0, 0, TYPE_FRAMESET },
    { "FRAMESET",   TAG_FRAMESET,   TYPE_FRAMESET,Frameset_Attributes,MAX_FRAMESET_ATTRIBUTES, 1, 1, 0, 0, 0, TYPE_FRAMESET },
    { "H1",         TAG_H1,         H1,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H2",         TAG_H2,         H2,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H3",         TAG_H3,         H3,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H4",         TAG_H4,         H4,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H5",         TAG_H5,         H5,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H6",         TAG_H6,         H6,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "HEAD",       TAG_HEAD,       HEAD,         0,                  0,                       1, 1, 0, 1, 0, TYPE_HEAD },
    { "HR",         TAG_HR,         HR,           HR_Attributes,      MAX_HR_ATTRIBUTES,       0, 1, 1, 0, 1, TYPE_BODY },
    { "I",          TAG_ITALIC,     ITALIC,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "IMG",        TAG_IMG,        IMG,          Img_Attributes,     MAX_IMG_ATTRIBUTES,      0, 0, 1, 1, 1, TYPE_BODY },
    { "INPUT",      TAG_INPUT,      0,            Input_Attributes,   MAX_INPUT_ATTRIBUTES,    0, 0, 1, 1, 1, TYPE_BODY },
    { "INS",        TAG_INS,        UNDERLINE,    0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to U */
    { "ISINDEX",    TAG_ISINDEX,    ISINDEX,      0,                  0,                       0, 0, 1, 1, 0, TYPE_HEAD },
    { "KBD",        TAG_KBD,        KBD,          0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "LI",         TAG_LI,         LI,           LI_Attributes,      MAX_LI_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
    { "LINK",       TAG_LINK,       LINK,         Link_Attributes,    MAX_LINK_ATTRIBUTES,     0, 0, 1, 1, 1, TYPE_HEAD },
    { "MAP",        TAG_MAP,        0,            Map_Attributes,     MAX_MAP_ATTRIBUTES,      1, 1, 1, 1, 1, TYPE_BODY },
    { "MENU",       TAG_MENU,       UL,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "META",       TAG_META,       META,         Meta_Attributes,    MAX_META_ATTRIBUTES,     0, 0, 0, 1, 0, TYPE_HEAD },
    { "NOBR",       TAG_NOBR,       NOBR,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "NOFRAMES",   TAG_NOFRAMES,   TYPE_NOFRAMES,0,                  0,                       1, 1, 0, 0, 0, TYPE_NOFRAMES },
    { "NOSCRIPT",   TAG_NOSCRIPT,   0,            0,                  0,                       0, 1, 0, 0, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
    { "OBJECT",     TAG_OBJECT,     0,            Object_Attributes,  MAX_OBJECT_ATTRIBUTES,   1, 1, 1, 1, 1, TYPE_BODY },
    { "OL",         TAG_OL,         0,            OL_Attributes,      MAX_OL_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
    { "OPTION",     TAG_OPTION,     0,            Option_Attributes,  MAX_OPTION_ATTRIBUTES,   1, 1, 1, 1, 1, TYPE_BODY },
    { "P",          TAG_P,          P,            P_Attributes,       MAX_P_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "PARAM",      TAG_PARAM,      0,            Param_Attributes,   MAX_PARAM_ATTRIBUTES,    0, 1, 0, 0, 0, TYPE_BODY },
    { "PRE",        TAG_PRE,        PRE,          0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "Q",          TAG_Q,          0,            0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "S",          TAG_STRIKE,     STRIKE,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SAMP",       TAG_SAMP,       SAMP,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SCRIPT",     TAG_SCRIPT,     0,            Script_Attributes,  MAX_SCRIPT_ATTRIBUTES,   0, 0, 0, 0, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
    { "SELECT",     TAG_SELECT,     0,            Select_Attributes,  MAX_SELECT_ATTRIBUTES,   1, 0, 1, 1, 1, TYPE_BODY },
    { "SMALL",      TAG_SMALL,      0,            0,                  0,                       1, 0, 0, 0, 0, TYPE_BODY }, /* Currently mapped to FONT SIZE = "-1" */
    { "STRIKE",     TAG_STRIKE,     STRIKE,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "STRONG",     TAG_STRONG,     STRONG,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "STYLE",      TAG_STYLE,      0,            0,                  0,                       0, 1, 0, 1, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
    { "SUB",        TAG_SUB,        SUB,          0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SUP",        TAG_SUP,        SUP,          0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "TABLE",      TAG_TABLE,      0,            Table_Attributes,   MAX_TABLE_ATTRIBUTES,    1, 1, 1, 1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         0,            Cell_Attributes,    MAX_CELL_ATTRIBUTES,     1, 1, 1, 1, 1, TYPE_BODY },
    { "TEXTAREA",   TAG_TEXTAREA,   0,            Textarea_Attributes,MAX_TEXTAREA_ATTRIBUTES, 1, 0, 1, 1, 1, TYPE_BODY },
    { "TH",         TAG_TH,         0,            Cell_Attributes,    MAX_CELL_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
    { "TITLE",      TAG_TITLE,      0,            0,                  0,                       1, 1, 0, 1, 0, TYPE_HEAD },
    { "TR",         TAG_TR,         0,            TR_Attributes,      MAX_TR_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
    { "TT",         TAG_TT,         TT,           0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "U",          TAG_U,          UNDERLINE,    0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "UL",         TAG_UL,         UL,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "VAR",        TAG_VAR,        VAR,          0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "XMP",        TAG_XMP,        PRE,          0,                  0,                       1, 1, 0, 0, 0, TYPE_BODY }, /* Not HTML 4.0 */
   };
const int MAX_TAGS=SizeOfArray(Tags);


#endif /* __html2_h__ */
@


1.7
log
@Shouldn't crash when it hits </option> in <select> lists now (oops).
Fixed buffer juggling done then <script> callback function returns data
to be written into the document; utf_end wasn't being correctly updated.
NOSCRIPT is now dealt with in the same way as STYLE - passed through as
raw text, but won't be parsed.
@
text
@d312 1
a312 1
        { "BORDER",             FRAMEBORDER,      CDATA       }, /* Not HTML 4.0 */
d317 1
a317 1
        { "FRAMESPACING",       FRAMEBORDER,      CDATA       }, /* Not HTML 4.0 */
d325 1
a325 1
        { "BORDER",             FRAMEBORDER,      CDATA },
@


1.6
log
@Daft bug in <option> element handling fixed. <script> element is no
longer block level, to try and avoid white space problems with calls
to document.write(). MemLib stuff in internal.h can be switched on by
cleaning the build, defining USE_MALLOC_REPLACEMENT on the CC command
line and rebuilding.
@
text
@d465 1
@


1.5
log
@Images (from IMG elements only at present) have an info field in their
internal structure, with 'hspace' and 'vspace' filled in - so you can
now use HtmlOBJECTvspace / HtmlOBJECThspace to get at this information
for both IMG and OBJECT elements (as with macros OBJECT_HAS_WIDTH etc.)
@
text
@d474 1
a474 1
    { "SCRIPT",     TAG_SCRIPT,     0,            Script_Attributes,  MAX_SCRIPT_ATTRIBUTES,   0, 1, 0, 0, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
@


1.4
log
@Removed unused function HTTPEscapeString.
Added SCRIPT element callback function with provision for source insertion.
@
text
@d273 1
a273 1
        { "BORDER",             BORDER,      NUMBER      }, /* HTML 4.0 says CDATA */
@


1.3
log
@Web branch merged
@
text
@d360 9
d474 1
a474 1
    { "SCRIPT",     TAG_SCRIPT,     0,            0,                  0,                       0, 1, 0, 0, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
@


1.2
log
@Merged in ARTtmp_merge
@
text
@a14 57
/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/html2,v $
 *
 * $Log: html2,v $
 * Revision 1.1.2.3  1997/04/28 14:20:24  kbracey
 * Added in Tony Cheal's table code. Various other bug fixes.
 *
 * Revision 1.1.2.2  1997/04/09 16:44:42  kbracey
 * Spacing rules drastically improved. Major error in memory context handling
 * fixed. Bug in __html_strip_lf fixed.
 *
 * Revision 1.1.2.1  1997/04/08 10:27:02  kbracey
 * Initial revision
 *
 *
 * Revision 1.3  96/01/06            kbracey
 * Made the whole lot alphabetical for easier searching
 *
 * Revision 1.2  95/12/06  16:35:21  pwain
 * Added FORM tags
 *
 * Revision 1.1  95/10/12  12:49:19  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/html2,v $
 *
 * $Log: html2,v $
 * Revision 1.1.2.3  1997/04/28 14:20:24  kbracey
 * Added in Tony Cheal's table code. Various other bug fixes.
 *
 * Revision 1.1.2.2  1997/04/09 16:44:42  kbracey
 * Spacing rules drastically improved. Major error in memory context handling
 * fixed. Bug in __html_strip_lf fixed.
 *
 * Revision 1.1.2.1  1997/04/08 10:27:02  kbracey
 * Initial revision
 *
 * Revision 1.2  95/12/06  16:35:21  pwain
 * Added FORM tags
 *
 * Revision 1.1  95/10/12  12:49:19  pwain
 * Initial revision
 *
 * Revision 1.1  95/09/08  10:06:14  pwain
 * Initial revision
 *
 *
 */

d18 1
a18 1
 * NOTE: Set term width to 100 chars!!!!!
d28 307
a334 148
#define MAX_A_ANCHORS 8
static const Anchor A_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
	{ "METHODS", 		METHODS, METHODS_RULE },
	{ "NAME",    		NAME,    NAME_RULE },
	{ "REL",     		REL,     REL_RULE },
	{ "REV",     		REV,     REV_RULE },
        { "TARGET",             TARGET,  0 },
	{ "TITLE",   		_TITLE,  _TITLE_RULE },
	{ "URN",     		URN,     URN_RULE },
	};

#define MAX_IMG_ANCHORS 7
static const Anchor Img_Anchors[] = {
	{ "ALIGN",   		ALIGN,   ALIGN_RULE },
	{ "ALT",     		ALT,     ALT_RULE },
	{ "BORDER",  		BORDER,  ROWS_RULE },
	{ "HEIGHT", 		ROWS,    ROWS_RULE },
	{ "ISMAP",   		ISMAP,   ISMAP_RULE },
	{ "SRC",     		SRC,     SRC_RULE },
	{ "WIDTH",   		COLS,    COLS_RULE },
	};


#define MAX_LINK_ANCHORS 6
static const Anchor Link_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
	{ "METHODS", 		METHODS, METHODS_RULE },
	{ "REL",     		REL,     REL_RULE },
	{ "REV",     		REV,     REV_RULE },
	{ "TITLE",   		_TITLE,  _TITLE_RULE },
	{ "URN",     		URN,     URN_RULE },
	};

#define MAX_BODY_ANCHORS 6
static const Anchor Body_Anchors[] = {
	{ "BACKGROUND",    	SRC,    SRC_RULE },
	{ "BGCOLOR",       	BGCOL,  SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,  SRC_RULE },
	{ "LINK",          	ALINK,  SRC_RULE },
	{ "TEXT",          	FGCOL,  SRC_RULE },
	{ "VLINK",         	VLINK,  SRC_RULE },
	};

#define MAX_HR_ANCHORS 4
static const Anchor HR_Anchors[] = {
        { "ALIGN",   		ALIGN,   ALIGN_RULE   },
        { "NOSHADE", 		NOSHADE, NOSHADE_RULE },
        { "SIZE",    		SIZE,    SIZE_RULE    },
        { "WIDTH",   		HRWIDTH, HRWIDTH_RULE },
        };

#define MAX_BASE_ANCHORS 2
static const Anchor Base_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
        { "TARGET",             TARGET,  0 },
	};

#define MAX_FORM_ANCHORS 4
static const Anchor Form_Anchors[] = {
        { "ACTION",  		ACTION,  ACTION_RULE },
        { "ENCTYPE", 		ENCTYPE, ENCTYPE_RULE },
        { "METHOD", 		METHOD,  METHOD_RULE },
        { "TARGET",             TARGET,  0 },
        };

#define MAX_INPUT_ANCHORS 7
static const Anchor Input_Anchors[] = {
        { "CHECKED",   		CHECKED,   CHECKED_RULE },
        { "MAXLENGTH", 		MAXLENGTH, MAXLENGTH_RULE },
        { "NAME",      		NAME,      NAME_RULE },
        { "SIZE",      		SIZE,	  SIZE_RULE},
        { "SRC",       		SRC,	  SRC_RULE},
        { "TYPE",      		TYPE,      TYPE_RULE },
        { "VALUE",     		VALUE,	  VALUE_RULE },
        };

#define MAX_SELECT_ANCHORS 3
static const Anchor Select_Anchors[] = {
        { "MULTIPLE",  		MULTIPLE,  MULTIPLE_RULE },
        { "NAME",      		NAME,	  NAME_RULE },
        { "SIZE",      		SIZE,	  SIZE_RULE },
        };

#define MAX_OPTION_ANCHORS 2
static const Anchor Option_Anchors[] = {
        { "SELECTED",  		SELECTED,  SELECTED_RULE },
        { "VALUE",     		VALUE,	  VALUE_RULE },
        };

#define MAX_TEXTAREA_ANCHORS 3
static const Anchor Textarea_Anchors[] = {
	{ "COLS",      		COLS,      COLS_RULE },
	{ "NAME",      		NAME,	  NAME_RULE },
	{ "ROWS",      		ROWS,	  ROWS_RULE },
	};

static const Anchor Table_Anchors[] = {
        { "ALIGN",              ALIGN,       ALIGN_RULE       },
        { "BORDER",    		BORDER,      ROWS_RULE        },
        { "CELLPADDING",        CELLPADDING, CELLPADDING_RULE },
        { "CELLSPACING",        CELLSPACING, CELLSPACING_RULE },
        { "COLS",               COLS,        COLS_RULE        },
        { "WIDTH",     		TABLEWIDTH,  TABLEWIDTH_RULE  },
        };
#define MAX_TABLE_ANCHORS (SizeOfArray(Table_Anchors))

#define MAX_BASEFONT_ANCHORS 1
static const Anchor Basefont_Anchors[] = {
        { "SIZE",      		BASEFONTSIZE,  BASEFONTSIZE_RULE },
        };

#define MAX_FONT_ANCHORS 3
static const Anchor Font_Anchors[] = {
        { "COLOR",     		COLOR,     COLOR_RULE },
        { "COLOUR",    		COLOR,     COLOR_RULE },
        { "SIZE",      		FONTSIZE,  FONTSIZE_RULE },
        };

#define MAX_TR_ANCHORS 2
static const Anchor Tr_Anchors[] = {
        { "ALIGN",     		ALIGN,     ALIGN_RULE  },
        { "VALIGN",    		VALIGN,    VALIGN_RULE },
        };

static const Anchor Cell_Anchors[] = {
        { "ALIGN",     		ALIGN,      ALIGN_RULE   },
	{ "BACKGROUND",    	SRC,        SRC_RULE },
	{ "BGCOLOR",       	BGCOL,      SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,      SRC_RULE },
        { "COLSPAN",   		COLSPAN,    COLSPAN_RULE },
        { "HEIGHT",             CELLHEIGHT, HEIGHT_RULE  },
        { "NOWRAP",             NOWRAP,     NOWRAP_RULE  },
        { "ROWSPAN",   		ROWSPAN,    ROWSPAN_RULE },
        { "VALIGN",    		VALIGN,     VALIGN_RULE  },
        { "WIDTH",              CELLWIDTH,  WIDTH_RULE   },
        };
#define MAX_CELL_ANCHORS (SizeOfArray(Cell_Anchors))

#ifdef FRAMESUPPORT
static const Anchor Frameset_Anchors[] = {
        { "BORDER",             FRAMEBORDER,      0 }, /* /* */
        { "BORDERCOLOR",        BORDERCOLOR,      0 }, /* /* */
        { "BORDERCOLOUR",       BORDERCOLOR,      0 }, /* /* */
        { "COLS",      		COLS,      COLS_RULE },
        { "FRAMEBORDER",        FRAMEBORDER,      0 }, /* /* */
        { "FRAMESPACING",       FRAMEBORDER,      0 }, /* /* */
        { "ROWS",      		ROWS,      ROWS_RULE },
d336 1
a336 1
#define MAX_FRAMESET_ANCHORS (SizeOfArray (Frameset_Anchors))
d338 2
a339 12
static const Anchor Frame_Anchors[] = {
        { "BORDER",             FRAMEBORDER,      0 }, /* /* */
        { "BORDERCOLOR",        BORDERCOLOR,      0 }, /* /* */
        { "BORDERCOLOUR",       BORDERCOLOR,      0 }, /* /* */
        { "FRAMEBORDER",        FRAMEBORDER,      0 }, /* /* */
//        { "FRAMESPACING",       FRAMEBORDER,      0 }, /* /* */
        { "MARGINHEIGHT", 	MARGINHEIGHT,     0 }, /* /* */
        { "MARGINWIDTH",        MARGINWIDTH,      0 }, /* /* */
	{ "NAME",      		NAME,	  NAME_RULE },
        { "NORESIZE",		NORESIZE, 	  0 }, /* /* */
        { "SCROLLING", 		SCROLLING,	  0 }, /* /* */
        { "SRC",       		SRC,       SRC_RULE },
d341 1
a341 1
#define MAX_FRAME_ANCHORS (SizeOfArray (Frame_Anchors))
d343 11
a353 1
#endif
d355 4
a358 1
const Tag Null_Tag={NULL,0,0,0,0,0};
d360 13
a372 72
int MAX_HEAD_TAGS=6;
const Tag Head_Tags[] = {
    { "BASE",    0,     BASE,    BASE_RULE,    Base_Anchors,	MAX_BASE_ANCHORS },
    { "ISINDEX", 0,     ISINDEX, ISINDEX_RULE, 0,		0},
    { "LINK",    0,     LINK,    LINK_RULE,    Link_Anchors, MAX_LINK_ANCHORS },
    { "META",    0,     META,    META_RULE,    0,		0},
    { "NEXTID",  0,     NEXTID,  NEXTID_RULE,  0,		0},
    { "TITLE",   1,     TITLE,   TITLE_RULE,   0 ,              0},
    };

const Tag Body_Tags[] = {
    { "!--",	    0, },
    { "A",          1,             A,          A_RULE,          A_Anchors,        MAX_A_ANCHORS,        0, 0 },
    { "ADDRESS",    1,             ADDRESS,    ADDRESS_RULE,	0,           	  0,                    0, 0 },
    { "B",	    1,             BOLD,       BOLD_RULE,	0,           	  0,                    0, 0 },
       /* We can treat BASEFONT pretty much as a FONT that only accepts size... */
    { "BASEFONT",   0,             FONT,       BASEFONT_RULE,   Basefont_Anchors, MAX_BASEFONT_ANCHORS, 0, 0 },
    { "BLOCKQUOTE", 1,             BLOCKQUOTE, BLOCKQUOTE_RULE, 0,	     	  0,                    1, 1 },
    { "BR",	    0,             BR,         BR_RULE,         0,	      	  0,                    1, 1 },
    { "CENTER",     1,             CENTER,     BODY_RULE,   	0,           	  0,                    1, 1 },
    { "CENTRE",     1,             CENTER,     BODY_RULE,       0,           	  0,                    1, 1 },
    { "CITE",	    1,             CITE,       CITE_RULE,	0,           	  0,                    0, 0 },
    { "CODE",	    1,      	   CODE,       CODE_RULE,	0,           	  0,                    0, 0 },
    { "DD",	    1,    	   DD,         DD_RULE,	 	0,	      	  0,                    1, 1 },
    { "DIR",	    1,     	   DIR,	       DIR_RULE,	0,	     	  0,                    1, 1 },
    { "DL",	    1,    	   DL,	       DL_RULE,         0,	      	  0,                    1, 1 },
    { "DT",	    1,    	   DT,	       DT_RULE,	 	0,	     	  0,                    1, 1 },
    { "EM",	    1,    	   EM,	       EM_RULE,		0,           	  0,                    0, 0 },
    { "FONT",	    1,      	   FONT,       FONT_RULE,	Font_Anchors,     MAX_FONT_ANCHORS,     0, 0 },
    { "FORM",	    1,      	   FORM,       FORM_RULE,	Form_Anchors,     MAX_FORM_ANCHORS,     0, 0 },
    { "H1",	    1,    	   H1,	       H1_RULE,	 	0,	      	  0,                    1, 1 },
    { "H2",	    1,    	   H2,	       H2_RULE,	 	0,	      	  0,                    1, 1 },
    { "H3",	    1,    	   H3,	       H3_RULE,	 	0,	      	  0,                    1, 1 },
    { "H4",	    1,             H4,	       H4_RULE,	 	0,	      	  0,                    1, 1 },
    { "H5",	    1,    	   H5,	       H5_RULE,	 	0,	      	  0,                    1, 1 },
    { "H6",	    1,    	   H6,	       H6_RULE,	 	0,	      	  0,                    1, 1 },
    { "HR",	    0,   	   HR,         HR_RULE,         HR_Anchors,       MAX_HR_ANCHORS,       1, 1 },
    { "I",	    1,             ITALIC,     ITALIC_RULE,	0,           	  0,                    0, 0 },
    { "IMG",	    0,   	   IMG,	       IMG_RULE,	Img_Anchors,  	  MAX_IMG_ANCHORS,      0, 0 },
    { "INPUT",	    0,   	   INPUT,      INPUT_RULE,      Input_Anchors,    MAX_INPUT_ANCHORS,    0, 0 },
    { "KBD",	    1,     	   KBD,	       KBD_RULE,        0,           	  0,                    0, 0 },
    { "LI",	    1,    	   LI,	       LI_RULE,	 	0,	     	  0,                    1, 1 },
    { "MENU", 	    1,      	   MENU,       MENU_RULE,	0,           	  0,                    0, 0 },
    { "OL",	    1,    	   OL,	       OL_RULE,	 	0,	     	  0,                    1, 1 },
    { "OPTION",	    0,   	   OPTION,     OPTION_RULE,	Option_Anchors,   MAX_OPTION_ANCHORS,   1, 0 },
    { "P",	    1,             P,	       P_RULE,		0,	      	  0,                    1, 1 },
    { "PRE",	    1,     	   PRE,        PRE_RULE,        0,	      	  0,                    1, 1 },
    { "SAMP",	    1,      	   SAMP,       SAMP_RULE,	0,           	  0,                    0, 0 },
    { "SELECT",	    1,        	   SELECT,     SELECT_RULE,     Select_Anchors,   MAX_SELECT_ANCHORS,   0, 0 },
    { "STRONG",	    1,        	   STRONG,     STRONG_RULE,	0,           	  0,                    0, 0 },
#ifdef TABLE_SUPPORT
    { "TABLE",      1,             TABLE,      0,               Table_Anchors,    MAX_TABLE_ANCHORS,    1, 1 },
    { "TD",         1,             TD,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     0, 0 },
#endif
#ifdef TonyTables
    { "TABLE",      1,             TABLE,      0,               Table_Anchors,    MAX_TABLE_ANCHORS,    1, 1 },
    { "TD",         1,             TD,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     1, 1 },
#endif
    { "TEXTAREA",   1,             TEXTAREA,   TEXTAREA_RULE,	Textarea_Anchors, MAX_TEXTAREA_ANCHORS, 0, 0 },
#ifdef TABLE_SUPPORT
    { "TH",         1,             TH,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     0, 0 },
    { "TR",         1,             TR,         0,               Tr_Anchors,       MAX_TR_ANCHORS,       1, 1 },
#endif
#ifdef TonyTables
    { "TH",         1,             TH,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     0, 0 },
    { "TR",         1,             TR,         0,               Tr_Anchors,       MAX_TR_ANCHORS,       1, 1 },
#endif
    { "TT",	    1,    	   TT,	       TT_RULE,		0,           	  0,                    0, 0 },
    { "UL",	    1,    	   UL,	       UL_RULE,	 	0,	     	  0,                    0, 0 },
    { "VAR",	    1,     	   VAR,	       VAR_RULE,	0,           	  0,                    0, 0 },
    { "XMP",	    1,     	   PRE,        PRE_RULE,        0,	      	  0,                    1, 1 },
   };
d374 5
a378 1
int MAX_BODY_TAGS = SizeOfArray(Body_Tags);
d380 5
a384 3
#ifdef FRAMESUPPORT
const Tag Frameset_Tags[] = {
   { "FRAME",       0, 	           FRAME,     FRAME_RULE,       Frame_Anchors,    MAX_FRAME_ANCHORS,    0, 0 },
d386 1
a386 1
int MAX_FRAMESET_TAGS = SizeOfArray (Frameset_Tags); //(sizeof Frameset_Tags/sizeof(Tag));
d388 1
a388 1
#endif
d390 96
a485 13
const Tag Document_Tags[] = {
    { "!DOCTYPE",  0,      0,    		0,	    	0,            0,                        0, 0 },
/* This next one is needed to keep things tidy :) */
    { "/HTML",     0,      0,    		0,	    	0,            0,                        0, 0 },
    { "BODY",      1,      TYPE_BODY, 		BODY_RULE, 	Body_Anchors, MAX_BODY_ANCHORS,         1, 1 },
#ifdef FRAMESUPPORT
    { "FRAMESET",  1,      TYPE_FRAMESET, 	FRAMESET_RULE,	Frameset_Anchors, MAX_FRAMESET_ANCHORS, 1, 1 },
#endif
    { "HEAD",      1,      TYPE_HEAD, 		HEAD_RULE, 	0,            0,                        1, 1 },
    { "HTML",      0,  	   0,    		0,	    	0,		  0,                    1, 1 },
//    { "NOFRAMES",      1,      TYPE_BODY, 		BODY_RULE, 	Body_Anchors, MAX_BODY_ANCHORS },
    { "NOFRAMES",      1,      TYPE_NOFRAMES, 		BODY_RULE, 	      0,      0,                1, 1 },
    };
a486 1
int MAX_DOC_TAGS = SizeOfArray (Document_Tags); //(sizeof Document_Tags/sizeof(Tag));
@


1.2.2.1
log
@A couple more missing <TR> fixes - now copes with nested tables.
Added inheritance of ALIGN and BGCOLOR settings from <TR>s and <TABLE>s.
@
text
@d19 1
a19 1
 * $Source: /projects2/renaissa/cvsroot/Projects/Web/HTMLLib/h/html2,v $
a21 3
 * Revision 1.2  1997/04/29 15:50:56  kbracey
 * Merged in ARTtmp_merge
 *
d47 1
a47 1
 * $Source: /projects2/renaissa/cvsroot/Projects/Web/HTMLLib/h/html2,v $
a49 3
 * Revision 1.2  1997/04/29 15:50:56  kbracey
 * Merged in ARTtmp_merge
 *
d182 10
d204 1
a204 12
static const Anchor Table_Anchors[] = {
        { "ALIGN",              ALIGN,       ALIGN_RULE       },
	{ "BGCOLOR",       	BGCOL,       SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,       SRC_RULE },
        { "BORDER",    		BORDER,      ROWS_RULE        },
        { "CELLPADDING",        CELLPADDING, CELLPADDING_RULE },
        { "CELLSPACING",        CELLSPACING, CELLSPACING_RULE },
        { "COLS",               COLS,        COLS_RULE        },
        { "WIDTH",     		TABLEWIDTH,  TABLEWIDTH_RULE  },
        };
#define MAX_TABLE_ANCHORS (SizeOfArray(Table_Anchors))

a206 2
	{ "BGCOLOR",       	BGCOL,     SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,     SRC_RULE },
a208 1
#define MAX_TR_ANCHORS (SizeOfArray(Tr_Anchors))
@


1.2.2.2
log
@Improved comment handling.
Started work on SUB, SUP, U and STRIKE support.
@
text
@d276 1
a313 1
    { "STRIKE",     1,             STRIKE,     STRIKE_RULE,     0,                0,                    0, 0 },
a314 2
    { "SUB",        1,             SUB,        SUB_RULE,        0,                0,                    0, 0 },
    { "SUP",        1,             SUP,        SUP_RULE,        0,                0,                    0, 0 },
a332 1
    { "U",          1,             UNDERLINE,  UNDERLINE_RULE,  0,                0,                    0, 0 },
@


1.2.2.3
log
@Added previous pointers to table rows and cells.
Implemented skipping of <STYLE> and <SCRIPT>.
@
text
@d15 63
a271 2
    { "SCRIPT",  1,     SCRIPT,  SCRIPT_RULE,  0,               0},
    { "STYLE",   1,     STYLE,   STYLE_RULE,   0,               0},
@


1.2.2.4
log
@updated to help enable head/body switching
@
text
@d173 3
a175 3
        { "BORDER",             FRAMEBORDER,      0 },
        { "BORDERCOLOR",        BORDERCOLOR,      0 },
        { "BORDERCOLOUR",       BORDERCOLOR,      0 },
d177 2
a178 2
        { "FRAMEBORDER",        FRAMEBORDER,      0 },
        { "FRAMESPACING",       FRAMEBORDER,      0 },
d184 7
a190 7
        { "BORDER",             FRAMEBORDER,      0 },
        { "BORDERCOLOR",        BORDERCOLOR,      0 },
        { "BORDERCOLOUR",       BORDERCOLOR,      0 },
        { "FRAMEBORDER",        FRAMEBORDER,      0 },
//        { "FRAMESPACING",       FRAMEBORDER,      0 },
        { "MARGINHEIGHT", 	MARGINHEIGHT,     0 },
        { "MARGINWIDTH",        MARGINWIDTH,      0 },
d192 2
a193 2
        { "NORESIZE",		NORESIZE, 	  0 },
        { "SCROLLING", 		SCROLLING,	  0 },
d202 16
a217 12
int MAX_HEAD_BODY_TAGS=57;
const Tag Head_Body_Tags[] = {

/*
 * The first field after the tag avoids number clashes
 */

    { "!--",	    0, },
    { "A",          TAG_A,          1,     A,             A_RULE,          A_Anchors,       MAX_A_ANCHORS,        0, 0, 3 },
    { "ADDRESS",    TAG_ADDRESS,    1,     ADDRESS,       ADDRESS_RULE,    0,               0,                    0, 0, 3 },
    { "B",	    TAG_BOLD,       1,     BOLD,          BOLD_RULE,       0,               0,                    0, 0, 3 },
    { "BASE",       TAG_BASE,       0,     BASE,          BASE_RULE,       Base_Anchors,    MAX_BASE_ANCHORS,     0, 0, 2 },
d219 37
a255 41
    { "BASEFONT",   TAG_BASEFONT,   0,     FONT,          BASEFONT_RULE,   Basefont_Anchors,MAX_BASEFONT_ANCHORS, 0, 0, 3 },
    { "BLOCKQUOTE", TAG_BLOCKQUOTE, 1,     BLOCKQUOTE,    BLOCKQUOTE_RULE, 0,	     	    0,                    1, 1, 3 },
    { "BR",	    TAG_BR,         0,     BR,            BR_RULE,         0,	      	    0,                    1, 1, 3 },
    { "CENTER",     TAG_CENTER,     1,     CENTER,        BODY_RULE,       0,          	    0,                    1, 1, 3 },
    { "CENTRE",     TAG_CENTRE,     1,     CENTER,        BODY_RULE,       0,               0,                    1, 1, 3 },
    { "CITE",	    TAG_CITE,       1,     CITE,          CITE_RULE,       0,          	    0,                    0, 0, 3 },
    { "CODE",	    TAG_CODE,       1,     CODE,          CODE_RULE,	   0,         	    0,                    0, 0, 3 },
    { "DD",	    TAG_DD,         1,     DD,            DD_RULE,	   0,	      	    0,                    1, 1, 3 },
    { "DIR",	    TAG_DIR,        1,     DIR,	          DIR_RULE,	   0,	     	    0,                    1, 1, 3 },
    { "DL",	    TAG_DL,         1,     DL,	          DL_RULE,         0,	      	    0,                    1, 1, 3 },
    { "DT",	    TAG_DT,         1,     DT,	          DT_RULE,	   0,	     	    0,                    1, 1, 3 },
    { "EM",	    TAG_EM,         1,     EM,	          EM_RULE,	   0,         	    0,                    0, 0, 3 },
    { "FONT",	    TAG_FONT,       1,     FONT,          FONT_RULE,	   Font_Anchors,    MAX_FONT_ANCHORS,     0, 0, 3 },
    { "FORM",	    TAG_FORM,       1,     FORM,          FORM_RULE,	   Form_Anchors,    MAX_FORM_ANCHORS,     0, 0, 3 },
    { "H1",	    TAG_H1,         1,     H1,	          H1_RULE,	   0,	      	    0,                    1, 1, 3 },
    { "H2",	    TAG_H2,         1,     H2,	          H2_RULE,	   0,	      	    0,                    1, 1, 3 },
    { "H3",	    TAG_H3,         1,     H3,	          H3_RULE,	   0,	      	    0,                    1, 1, 3 },
    { "H4",	    TAG_H4,         1,     H4,	          H4_RULE,	   0,	      	    0,                    1, 1, 3 },
    { "H5",	    TAG_H5,         1,     H5,	          H5_RULE,	   0,	      	    0,                    1, 1, 3 },
    { "H6",	    TAG_H6,         1,     H6,	          H6_RULE,	   0,	      	    0,                    1, 1, 3 },
    { "HR",	    TAG_HR,         0,     HR,            HR_RULE,         HR_Anchors,      MAX_HR_ANCHORS,       1, 1, 3 },
    { "I",	    TAG_ITALIC,     1,     ITALIC,        ITALIC_RULE,	   0,          	    0,                    0, 0, 3 },
    { "IMG",	    TAG_IMG,        0,     IMG,	          IMG_RULE,	   Img_Anchors,     MAX_IMG_ANCHORS,      0, 0, 3 },
    { "INPUT",	    TAG_INPUT,      0,     INPUT,         INPUT_RULE,      Input_Anchors,   MAX_INPUT_ANCHORS,    0, 0, 3 },
    { "ISINDEX",    TAG_ISINDEX,    0,     ISINDEX,       ISINDEX_RULE,    0,		    0,                    0, 0, 2 },
    { "KBD",	    TAG_KBD,        1,     KBD,	          KBD_RULE,        0,               0,                    0, 0, 3 },
    { "LI",	    TAG_LI,         1,     LI,	          LI_RULE,	   0, 	     	    0,                    1, 1, 3 },
    { "LINK",       TAG_LINK,       0,     LINK,          LINK_RULE,       Link_Anchors,    MAX_LINK_ANCHORS,     0, 0, 2 },
    { "MENU", 	    TAG_MENU,       1,     MENU,          MENU_RULE,	   0,               0,                    0, 0, 3 },
    { "META",       TAG_META,       0,     META,          META_RULE,       0,		    0,                    0, 0, 2 },
    { "NEXTID",     TAG_NEXTID,     0,     NEXTID,        NEXTID_RULE,     0,		    0,                    0, 0, 2 },
    { "OL",	    TAG_OL,         1,     OL,	          OL_RULE,	   0,	     	    0,                    1, 1, 3 },
    { "OPTION",	    TAG_OPTION,     0,     OPTION,        OPTION_RULE,	   Option_Anchors,  MAX_OPTION_ANCHORS,   1, 0, 3 },
    { "P",	    TAG_P,          1,     P,	          P_RULE,	   0, 	      	    0,                    1, 1, 3 },
    { "PRE",	    TAG_PRE,        1,     PRE,        	  PRE_RULE,        0,	      	    0,                    1, 1, 3 },
    { "SAMP",	    TAG_SAMP,       1,     SAMP,          SAMP_RULE,	   0,               0,                    0, 0, 3 },
    { "SCRIPT",     TAG_SCRIPT      1,     SCRIPT,        SCRIPT_RULE,     0,               0                     0, 0, 2 },
    { "SELECT",	    TAG_SELECT,     1,     SELECT,        SELECT_RULE,     Select_Anchors,  MAX_SELECT_ANCHORS,   0, 0, 3 },
    { "STYLE",      TAG_STYLE       1,     STYLE,         STYLE_RULE,      0,               0                     0, 0, 2 },
    { "STRONG",	    TAG_STRONG,     1,     STRONG,        STRONG_RULE,	   0,         	    0,                    0, 0, 3 },

d257 2
a258 2
    { "TABLE",      TAG_TABLE,      1,     TABLE,         0,               Table_Anchors,   MAX_TABLE_ANCHORS,    1, 1, 3 },
    { "TD",         TAG_TD,         1,     TD,            0,               Cell_Anchors,    MAX_CELL_ANCHORS,     0, 0, 3 },
d261 2
a262 2
    { "TABLE",      TAG_TABLE,      1,     TABLE,         0,               Table_Anchors,   MAX_TABLE_ANCHORS,    1, 1, 3 },
    { "TD",         TAG_TD,         1,     TD,            0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 1, 3 },
d264 1
a264 3
    { "TEXTAREA",   TAG_TEXTAREA,   1,     TEXTAREA,      TEXTAREA_RULE,   Textarea_Anchors,MAX_TEXTAREA_ANCHORS, 0, 0, 3 },
    { "TITLE",      TAG_TITLE,      1,     TITLE,         TITLE_RULE,      0,               0,                    0, 0, 2 },

d266 2
a267 2
    { "TH",         TAG_TH,         1,     TH,            0,               Cell_Anchors,    MAX_CELL_ANCHORS,     0, 0, 3 },
    { "TR",         TAG_TR,         1,     TR,            0,               Tr_Anchors,      MAX_TR_ANCHORS,       1, 1, 3 },
d270 2
a271 2
    { "TH",         TAG_TH,         1,     TH,            0,               Cell_Anchors,    MAX_CELL_ANCHORS,     0, 0, 3 },
    { "TR",         TAG_TR,         1,     TR,            0,               Tr_Anchors,      MAX_TR_ANCHORS,       1, 1, 3 },
d273 5
a277 4
    { "TT",	    TAG_TT,         1,     TT,	          TT_RULE,	   0,               0,                    0, 0, 3 },
    { "UL",	    TAG_UL,         1,     UL,	          UL_RULE,	   0,	     	    0,                    0, 0, 3 },
    { "VAR",	    TAG_VAR,        1,     VAR,	          VAR_RULE,	   0,          	    0,                    0, 0, 3 },
    { "XMP",	    TAG_XMP,        1,     PRE,           PRE_RULE,        0,	      	    0,                    1, 1, 3 },
d280 1
d284 1
a284 1
   { "FRAME",       TAG_FRAME,      0, 	   FRAME,         FRAME_RULE,      Frame_Anchors,   MAX_FRAME_ANCHORS,    0, 0, 4 },
d290 2
a291 2
const Tag Document_Tags[] = {
    { "!DOCTYPE",   TAG_DOCTYPE1,   0,     0,             0,	      	   0,               0,                    0, 0, 4 },
d293 9
a301 9
    { "/HTML",      TAG_HTML1,       0,     0,             0,	    	   0,               0,                    0, 0, 4 },
    { "BODY",       TAG_BODY,       1,     TYPE_BODY,     BODY_RULE, 	   Body_Anchors,    MAX_BODY_ANCHORS,     1, 1, 4 },
#ifdef FRAMESUPPORT
    { "FRAMESET",   TAG_FRAMESET,   1,     TYPE_FRAMESET, FRAMESET_RULE,   Frameset_Anchors,MAX_FRAMESET_ANCHORS, 1, 1, 4 },
#endif
    { "HEAD",       TAG_HEAD,       1,     TYPE_HEAD,     HEAD_RULE, 	   0,               0,                    1, 1, 4 },
    { "HTML",       TAG_HTML2,       0,     0,             0,	    	   0,		    0,                    1, 1, 4 },
//    { "NOFRAMES",   TAG_NOFRAMES,   1,     TYPE_BODY, 	  BODY_RULE, 	   Body_Anchors,    MAX_BODY_ANCHORS              },
    { "NOFRAMES",   TAG_NOFRAMES,   1,     TYPE_NOFRAMES, BODY_RULE, 	   0,               0,                    1, 1, 5 },
@


1.2.2.5
log
@modifications to head/body switching
@
text
@d251 1
a251 1
    { "SCRIPT",     TAG_SCRIPT,     1,     SCRIPT,        SCRIPT_RULE,     0,               0,                    0, 0, 2 },
d253 1
a253 1
    { "STYLE",      TAG_STYLE,      1,     STYLE,         STYLE_RULE,      0,               0,                    0, 0, 2 },
@


1.2.2.6
log
@Removed dependence on <HEAD> and <BODY>
@
text
@d200 1
a200 3
const Tag Null_Tag;

const Tag Tags[] = {
d202 3
d209 5
a213 5
    { "!DOCTYPE",   TAG_DOCTYPE1,   0,            0,	      	   0,               0,                    0, 0, 0, TYPE_HEAD },
    { "A",          TAG_A,          A,            A_RULE,          A_Anchors,       MAX_A_ANCHORS,        1, 0, 0, TYPE_BODY },
    { "ADDRESS",    TAG_ADDRESS,    ADDRESS,      ADDRESS_RULE,    0,               0,                    1, 0, 0, TYPE_BODY },
    { "B",	    TAG_BOLD,       BOLD,         BOLD_RULE,       0,               0,                    1, 0, 0, TYPE_BODY },
    { "BASE",       TAG_BASE,       BASE,         BASE_RULE,       Base_Anchors,    MAX_BASE_ANCHORS,     0, 0, 0, TYPE_HEAD },
d215 40
a254 47
    { "BASEFONT",   TAG_BASEFONT,   FONT,         BASEFONT_RULE,   Basefont_Anchors,MAX_BASEFONT_ANCHORS, 0, 0, 0, TYPE_BODY },
    { "BLOCKQUOTE", TAG_BLOCKQUOTE, BLOCKQUOTE,   BLOCKQUOTE_RULE, 0,	     	    0,                    1, 1, 1, TYPE_BODY },
    { "BODY",       TAG_BODY,       IMG,          BODY_RULE, 	   Body_Anchors,    MAX_BODY_ANCHORS,     1, 1, 1, TYPE_HEAD },
    { "BR",	    TAG_BR,         BR,           BR_RULE,         0,	      	    0,                    0, 1, 1, TYPE_BODY },
    { "CENTER",     TAG_CENTER,     CENTER,       BODY_RULE,       0,               0,                    1, 1, 1, TYPE_BODY },
    { "CENTRE",     TAG_CENTRE,     CENTER,       BODY_RULE,       0,               0,                    1, 1, 1, TYPE_BODY },
    { "CITE",	    TAG_CITE,       CITE,         CITE_RULE,       0,          	    0,                    1, 0, 0, TYPE_BODY },
    { "CODE",	    TAG_CODE,       CODE,         CODE_RULE,	   0,         	    0,                    1, 0, 0, TYPE_BODY },
    { "DD",	    TAG_DD,         DD,           DD_RULE,	   0,	      	    0,                    1, 1, 1, TYPE_BODY },
    { "DIR",	    TAG_DIR,        DIR,	  DIR_RULE,	   0,	     	    0,                    1, 1, 1, TYPE_BODY },
    { "DL",	    TAG_DL,         DL,	          DL_RULE,         0,	      	    0,                    1, 1, 1, TYPE_BODY },
    { "DT",	    TAG_DT,         DT,	          DT_RULE,	   0,	     	    0,                    1, 1, 1, TYPE_BODY },
    { "EM",	    TAG_EM,         EM,	          EM_RULE,	   0,         	    0,                    1, 0, 0, TYPE_BODY },
    { "FONT",	    TAG_FONT,       FONT,         FONT_RULE,	   Font_Anchors,    MAX_FONT_ANCHORS,     1, 0, 0, TYPE_BODY },
    { "FORM",	    TAG_FORM,       FORM,         FORM_RULE,	   Form_Anchors,    MAX_FORM_ANCHORS,     1, 0, 0, TYPE_BODY },
    { "FRAME",      TAG_FRAME,      FRAME,        FRAME_RULE,      Frame_Anchors,   MAX_FRAME_ANCHORS,    0, 0, 0, TYPE_FRAMESET },
    { "FRAMESET",   TAG_FRAMESET,   TYPE_FRAMESET,FRAMESET_RULE,   Frameset_Anchors,MAX_FRAMESET_ANCHORS, 1, 1, 1, TYPE_FRAMESET },
    { "H1",	    TAG_H1,         H1,	          H1_RULE,	   0,	      	    0,                    1, 1, 1, TYPE_BODY },
    { "H2",	    TAG_H2,         H2,	          H2_RULE,	   0,	      	    0,                    1, 1, 1, TYPE_BODY },
    { "H3",	    TAG_H3,         H3,	          H3_RULE,	   0,	      	    0,                    1, 1, 1, TYPE_BODY },
    { "H4",	    TAG_H4,         H4,	          H4_RULE,	   0,	      	    0,                    1, 1, 1, TYPE_BODY },
    { "H5",	    TAG_H5,         H5,	          H5_RULE,	   0,	      	    0,                    1, 1, 1, TYPE_BODY },
    { "H6",	    TAG_H6,         H6,	          H6_RULE,	   0,	      	    0,                    1, 1, 1, TYPE_BODY },
#if 0
    { "HEAD",       TAG_HEAD,       HEAD,         HEAD_RULE,       0,               0,                    1, 1, 1, TYPE_HEAD },
#endif
    { "HR",	    TAG_HR,         HR,           HR_RULE,         HR_Anchors,      MAX_HR_ANCHORS,       0, 1, 1, TYPE_BODY },
    { "I",	    TAG_ITALIC,     ITALIC,       ITALIC_RULE,	   0,          	    0,                    1, 0, 0, TYPE_BODY },
    { "IMG",	    TAG_IMG,        IMG,	  IMG_RULE,	   Img_Anchors,     MAX_IMG_ANCHORS,      0, 0, 0, TYPE_BODY },
    { "INPUT",	    TAG_INPUT,      INPUT,        INPUT_RULE,      Input_Anchors,   MAX_INPUT_ANCHORS,    0, 0, 0, TYPE_BODY },
    { "ISINDEX",    TAG_ISINDEX,    ISINDEX,      ISINDEX_RULE,    0,		    0,                    0, 0, 0, TYPE_HEAD },
    { "KBD",	    TAG_KBD,        KBD,	  KBD_RULE,        0,               0,                    1, 0, 0, TYPE_BODY },
    { "LI",	    TAG_LI,         LI,	          LI_RULE,	   0, 	     	    0,                    1, 1, 1, TYPE_BODY },
    { "LINK",       TAG_LINK,       LINK,         LINK_RULE,       Link_Anchors,    MAX_LINK_ANCHORS,     0, 0, 0, TYPE_HEAD },
    { "MENU", 	    TAG_MENU,       MENU,         MENU_RULE,	   0,               0,                    1, 0, 0, TYPE_BODY },
    { "META",       TAG_META,       META,         META_RULE,       0,		    0,                    0, 0, 0, TYPE_HEAD },
    { "NEXTID",     TAG_NEXTID,     NEXTID,       NEXTID_RULE,     0,		    0,                    0, 0, 0, TYPE_HEAD },
    { "NOFRAMES",   TAG_NOFRAMES,   TYPE_NOFRAMES,BODY_RULE, 	   0,               0,                    1, 1, 1, TYPE_NOFRAMES },
    { "OL",	    TAG_OL,         OL,	          OL_RULE,	   0,	     	    0,                    1, 1, 1, TYPE_BODY },
    { "OPTION",	    TAG_OPTION,     OPTION,       OPTION_RULE,	   Option_Anchors,  MAX_OPTION_ANCHORS,   0, 1, 0, TYPE_BODY },
    { "P",	    TAG_P,          P,	          P_RULE,	   0, 	      	    0,                    1, 1, 1, TYPE_BODY },
    { "PRE",	    TAG_PRE,        PRE,       	  PRE_RULE,        0,	      	    0,                    1, 1, 1, TYPE_BODY },
    { "SAMP",	    TAG_SAMP,       SAMP,         SAMP_RULE,	   0,               0,                    1, 0, 0, TYPE_BODY },
    { "SCRIPT",     TAG_SCRIPT,     SCRIPT,       SCRIPT_RULE,     0,               0,                    1, 0, 0, TYPE_HEAD },
    { "SELECT",	    TAG_SELECT,     SELECT,       SELECT_RULE,     Select_Anchors,  MAX_SELECT_ANCHORS,   1, 0, 0, TYPE_BODY },
    { "STRONG",	    TAG_STRONG,     STRONG,       STRONG_RULE,	   0,         	    0,                    1, 0, 0, TYPE_BODY },
    { "STYLE",      TAG_STYLE,      STYLE,        STYLE_RULE,      0,               0,                    1, 0, 0, TYPE_HEAD },
d257 2
a258 2
    { "TABLE",      TAG_TABLE,      TABLE,        0,               Table_Anchors,   MAX_TABLE_ANCHORS,    1, 1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         TD,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 0, 0, TYPE_BODY },
d261 2
a262 2
    { "TABLE",      TAG_TABLE,      TABLE,        0,               Table_Anchors,   MAX_TABLE_ANCHORS,    1, 1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         TD,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 1, 1, TYPE_BODY },
d264 2
a265 2
    { "TEXTAREA",   TAG_TEXTAREA,   TEXTAREA,     TEXTAREA_RULE,   Textarea_Anchors,MAX_TEXTAREA_ANCHORS, 1, 0, 0, TYPE_BODY },
    { "TITLE",      TAG_TITLE,      TITLE,        TITLE_RULE,      0,               0,                    1, 0, 0, TYPE_HEAD },
d268 2
a269 2
    { "TH",         TAG_TH,         TH,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 0, 0, TYPE_BODY },
    { "TR",         TAG_TR,         TR,           0,               Tr_Anchors,      MAX_TR_ANCHORS,       1, 1, 1, TYPE_BODY },
d272 2
a273 2
    { "TH",         TAG_TH,         TH,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 0, 0, TYPE_BODY },
    { "TR",         TAG_TR,         TR,           0,               Tr_Anchors,      MAX_TR_ANCHORS,       1, 1, 1, TYPE_BODY },
d275 4
a278 4
    { "TT",	    TAG_TT,         TT,	          TT_RULE,	   0,               0,                    1, 0, 0, TYPE_BODY },
    { "UL",	    TAG_UL,         UL,	          UL_RULE,	   0,	     	    0,                    1, 0, 0, TYPE_BODY },
    { "VAR",	    TAG_VAR,        VAR,	  VAR_RULE,	   0,          	    0,                    1, 0, 0, TYPE_BODY },
    { "XMP",	    TAG_XMP,        PRE,          PRE_RULE,        0,	      	    0,                    1, 1, 1, TYPE_BODY },
a279 1
const int MAX_TAGS=SizeOfArray(Tags);
d281 24
@


1.2.2.7
log
@Fixed some extra whitespace that had crept into the parser output
@
text
@d208 5
a212 5
    { "!DOCTYPE",   TAG_DOCTYPE1,   0,            0,	      	   0,               0,                    0, 0, TYPE_HEAD },
    { "A",          TAG_A,          A,            A_RULE,          A_Anchors,       MAX_A_ANCHORS,        1, 0, TYPE_BODY },
    { "ADDRESS",    TAG_ADDRESS,    ADDRESS,      ADDRESS_RULE,    0,               0,                    1, 0, TYPE_BODY },
    { "B",	    TAG_BOLD,       BOLD,         BOLD_RULE,       0,               0,                    1, 0, TYPE_BODY },
    { "BASE",       TAG_BASE,       BASE,         BASE_RULE,       Base_Anchors,    MAX_BASE_ANCHORS,     0, 0, TYPE_HEAD },
d214 47
a260 45
    { "BASEFONT",   TAG_BASEFONT,   FONT,         BASEFONT_RULE,   Basefont_Anchors,MAX_BASEFONT_ANCHORS, 0, 0, TYPE_BODY },
    { "BLOCKQUOTE", TAG_BLOCKQUOTE, BLOCKQUOTE,   BLOCKQUOTE_RULE, 0,	     	    0,                    1, 1, TYPE_BODY },
    { "BODY",       TAG_BODY,       IMG,          BODY_RULE, 	   Body_Anchors,    MAX_BODY_ANCHORS,     1, 1, TYPE_HEAD },
    { "BR",	    TAG_BR,         BR,           BR_RULE,         0,	      	    0,                    0, 1, TYPE_BODY },
    { "CENTER",     TAG_CENTER,     CENTER,       BODY_RULE,       0,               0,                    1, 1, TYPE_BODY },
    { "CENTRE",     TAG_CENTRE,     CENTER,       BODY_RULE,       0,               0,                    1, 1, TYPE_BODY },
    { "CITE",	    TAG_CITE,       CITE,         CITE_RULE,       0,          	    0,                    1, 0, TYPE_BODY },
    { "CODE",	    TAG_CODE,       CODE,         CODE_RULE,	   0,         	    0,                    1, 0, TYPE_BODY },
    { "DD",	    TAG_DD,         DD,           DD_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "DIR",	    TAG_DIR,        DIR,	  DIR_RULE,	   0,	     	    0,                    1, 1, TYPE_BODY },
    { "DL",	    TAG_DL,         DL,	          DL_RULE,         0,	      	    0,                    1, 1, TYPE_BODY },
    { "DT",	    TAG_DT,         DT,	          DT_RULE,	   0,	     	    0,                    1, 1, TYPE_BODY },
    { "EM",	    TAG_EM,         EM,	          EM_RULE,	   0,         	    0,                    1, 0, TYPE_BODY },
    { "FONT",	    TAG_FONT,       FONT,         FONT_RULE,	   Font_Anchors,    MAX_FONT_ANCHORS,     1, 0, TYPE_BODY },
    { "FORM",	    TAG_FORM,       FORM,         FORM_RULE,	   Form_Anchors,    MAX_FORM_ANCHORS,     1, 0, TYPE_BODY },
    { "FRAME",      TAG_FRAME,      FRAME,        FRAME_RULE,      Frame_Anchors,   MAX_FRAME_ANCHORS,    0, 0, TYPE_FRAMESET },
    { "FRAMESET",   TAG_FRAMESET,   TYPE_FRAMESET,FRAMESET_RULE,   Frameset_Anchors,MAX_FRAMESET_ANCHORS, 1, 1, TYPE_FRAMESET },
    { "H1",	    TAG_H1,         H1,	          H1_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H2",	    TAG_H2,         H2,	          H2_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H3",	    TAG_H3,         H3,	          H3_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H4",	    TAG_H4,         H4,	          H4_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H5",	    TAG_H5,         H5,	          H5_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H6",	    TAG_H6,         H6,	          H6_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "HEAD",       TAG_HEAD,       HEAD,         HEAD_RULE,       0,               0,                    1, 1, TYPE_HEAD },
    { "HR",	    TAG_HR,         HR,           HR_RULE,         HR_Anchors,      MAX_HR_ANCHORS,       0, 1, TYPE_BODY },
    { "I",	    TAG_ITALIC,     ITALIC,       ITALIC_RULE,	   0,          	    0,                    1, 0, TYPE_BODY },
    { "IMG",	    TAG_IMG,        IMG,	  IMG_RULE,	   Img_Anchors,     MAX_IMG_ANCHORS,      0, 0, TYPE_BODY },
    { "INPUT",	    TAG_INPUT,      INPUT,        INPUT_RULE,      Input_Anchors,   MAX_INPUT_ANCHORS,    0, 0, TYPE_BODY },
    { "ISINDEX",    TAG_ISINDEX,    ISINDEX,      ISINDEX_RULE,    0,		    0,                    0, 0, TYPE_HEAD },
    { "KBD",	    TAG_KBD,        KBD,	  KBD_RULE,        0,               0,                    1, 0, TYPE_BODY },
    { "LI",	    TAG_LI,         LI,	          LI_RULE,	   0, 	     	    0,                    1, 1, TYPE_BODY },
    { "LINK",       TAG_LINK,       LINK,         LINK_RULE,       Link_Anchors,    MAX_LINK_ANCHORS,     0, 0, TYPE_HEAD },
    { "MENU", 	    TAG_MENU,       MENU,         MENU_RULE,	   0,               0,                    1, 0, TYPE_BODY },
    { "META",       TAG_META,       META,         META_RULE,       0,		    0,                    0, 0, TYPE_HEAD },
    { "NEXTID",     TAG_NEXTID,     NEXTID,       NEXTID_RULE,     0,		    0,                    0, 0, TYPE_HEAD },
    { "NOFRAMES",   TAG_NOFRAMES,   TYPE_NOFRAMES,BODY_RULE, 	   0,               0,                    1, 1, TYPE_NOFRAMES },
    { "OL",	    TAG_OL,         OL,	          OL_RULE,	   0,	     	    0,                    1, 1, TYPE_BODY },
    { "OPTION",	    TAG_OPTION,     OPTION,       OPTION_RULE,	   Option_Anchors,  MAX_OPTION_ANCHORS,   0, 1, TYPE_BODY },
    { "P",	    TAG_P,          P,	          P_RULE,	   0, 	      	    0,                    1, 1, TYPE_BODY },
    { "PRE",	    TAG_PRE,        PRE,       	  PRE_RULE,        0,	      	    0,                    1, 1, TYPE_BODY },
    { "SAMP",	    TAG_SAMP,       SAMP,         SAMP_RULE,	   0,               0,                    1, 0, TYPE_BODY },
    { "SCRIPT",     TAG_SCRIPT,     SCRIPT,       SCRIPT_RULE,     0,               0,                    1, 0, TYPE_HEAD },
    { "SELECT",	    TAG_SELECT,     SELECT,       SELECT_RULE,     Select_Anchors,  MAX_SELECT_ANCHORS,   1, 0, TYPE_BODY },
    { "STRONG",	    TAG_STRONG,     STRONG,       STRONG_RULE,	   0,         	    0,                    1, 0, TYPE_BODY },
    { "STYLE",      TAG_STYLE,      STYLE,        STYLE_RULE,      0,               0,                    1, 0, TYPE_HEAD },
d263 2
a264 2
    { "TABLE",      TAG_TABLE,      TABLE,        0,               Table_Anchors,   MAX_TABLE_ANCHORS,    1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         TD,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 0, TYPE_BODY },
d267 2
a268 2
    { "TABLE",      TAG_TABLE,      TABLE,        0,               Table_Anchors,   MAX_TABLE_ANCHORS,    1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         TD,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 1, TYPE_BODY },
d270 2
a271 2
    { "TEXTAREA",   TAG_TEXTAREA,   TEXTAREA,     TEXTAREA_RULE,   Textarea_Anchors,MAX_TEXTAREA_ANCHORS, 1, 0, TYPE_BODY },
    { "TITLE",      TAG_TITLE,      TITLE,        TITLE_RULE,      0,               0,                    1, 0, TYPE_HEAD },
d274 2
a275 2
    { "TH",         TAG_TH,         TH,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 0, TYPE_BODY },
    { "TR",         TAG_TR,         TR,           0,               Tr_Anchors,      MAX_TR_ANCHORS,       1, 1, TYPE_BODY },
d278 2
a279 2
    { "TH",         TAG_TH,         TH,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 0, TYPE_BODY },
    { "TR",         TAG_TR,         TR,           0,               Tr_Anchors,      MAX_TR_ANCHORS,       1, 1, TYPE_BODY },
d281 4
a284 4
    { "TT",	    TAG_TT,         TT,	          TT_RULE,	   0,               0,                    1, 0, TYPE_BODY },
    { "UL",	    TAG_UL,         UL,	          UL_RULE,	   0,	     	    0,                    1, 0, TYPE_BODY },
    { "VAR",	    TAG_VAR,        VAR,	  VAR_RULE,	   0,          	    0,                    1, 0, TYPE_BODY },
    { "XMP",	    TAG_XMP,        PRE,          PRE_RULE,        0,	      	    0,                    1, 1, TYPE_BODY },
@


1.2.2.8
log
@Stopped the library passing Tag structures around by value (bleuch!)
@
text
@d200 1
a200 1
Tag Null_Tag;
d202 1
a202 1
Tag Tags[] = {
@


1.2.2.9
log
@Made ALIGN=MIDDLE mean ALIGN=CENTRE in horizontal only contexts
@
text
@d74 1
a74 1
        { "ALIGN",   		HALIGN,  ALIGN_RULE   },
d138 1
a138 1
        { "ALIGN",              HALIGN,      ALIGN_RULE       },
d150 1
a150 1
        { "ALIGN",     		HALIGN,    ALIGN_RULE  },
d158 1
a158 1
        { "ALIGN",     		HALIGN,     ALIGN_RULE   },
@


1.2.2.10
log
@Fixed tag ordering (TH and TITLE were swapped)
@
text
@d259 6
d267 1
d269 7
a276 1
    { "TITLE",      TAG_TITLE,      TITLE,        TITLE_RULE,      0,               0,                    1, 0, TYPE_HEAD },
d278 1
@


1.2.2.11
log
@Added HtmlInit function to explicitly initialse some static data so that a variant suitable for use by modules can be made
@
text
@a205 4
 * BAL: The anchor field in these data structures may no longer be initialised here.
 * They must be explicitly initialised in the funtion __html_rules_init in rules.c
 * Clients must call the new function HtmlInit before calling any other functions in
 * HTMLLib to ensure tht this initialisation happens.
d209 1
a209 1
    { "A",          TAG_A,          A,            A_RULE,          0,               MAX_A_ANCHORS,        1, 0, TYPE_BODY },
d212 1
a212 1
    { "BASE",       TAG_BASE,       BASE,         BASE_RULE,       0,               MAX_BASE_ANCHORS,     0, 0, TYPE_HEAD },
d214 1
a214 1
    { "BASEFONT",   TAG_BASEFONT,   FONT,         BASEFONT_RULE,   0,               MAX_BASEFONT_ANCHORS, 0, 0, TYPE_BODY },
d216 1
a216 1
    { "BODY",       TAG_BODY,       IMG,          BODY_RULE, 	   0,               MAX_BODY_ANCHORS,     1, 1, TYPE_HEAD },
d227 4
a230 4
    { "FONT",	    TAG_FONT,       FONT,         FONT_RULE,	   0,               MAX_FONT_ANCHORS,     1, 0, TYPE_BODY },
    { "FORM",	    TAG_FORM,       FORM,         FORM_RULE,	   0,               MAX_FORM_ANCHORS,     1, 0, TYPE_BODY },
    { "FRAME",      TAG_FRAME,      FRAME,        FRAME_RULE,      0,               MAX_FRAME_ANCHORS,    0, 0, TYPE_FRAMESET },
    { "FRAMESET",   TAG_FRAMESET,   TYPE_FRAMESET,FRAMESET_RULE,   0,               MAX_FRAMESET_ANCHORS, 1, 1, TYPE_FRAMESET },
d238 1
a238 1
    { "HR",	    TAG_HR,         HR,           HR_RULE,         0,               MAX_HR_ANCHORS,       0, 1, TYPE_BODY },
d240 2
a241 2
    { "IMG",	    TAG_IMG,        IMG,	  IMG_RULE,	   0,               MAX_IMG_ANCHORS,      0, 0, TYPE_BODY },
    { "INPUT",	    TAG_INPUT,      INPUT,        INPUT_RULE,      0,               MAX_INPUT_ANCHORS,    0, 0, TYPE_BODY },
d245 1
a245 1
    { "LINK",       TAG_LINK,       LINK,         LINK_RULE,       0,               MAX_LINK_ANCHORS,     0, 0, TYPE_HEAD },
d251 1
a251 1
    { "OPTION",	    TAG_OPTION,     OPTION,       OPTION_RULE,	   0,               MAX_OPTION_ANCHORS,   0, 1, TYPE_BODY },
d256 1
a256 1
    { "SELECT",	    TAG_SELECT,     SELECT,       SELECT_RULE,     0,               MAX_SELECT_ANCHORS,   1, 0, TYPE_BODY },
d259 4
a262 4
    { "TABLE",      TAG_TABLE,      TABLE,        0,               0,               MAX_TABLE_ANCHORS,    1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         TD,           0,               0,               MAX_CELL_ANCHORS,     1, 1, TYPE_BODY },
    { "TEXTAREA",   TAG_TEXTAREA,   TEXTAREA,     TEXTAREA_RULE,   0,               MAX_TEXTAREA_ANCHORS, 1, 0, TYPE_BODY },
    { "TH",         TAG_TH,         TH,           0,               0,               MAX_CELL_ANCHORS,     1, 0, TYPE_BODY },
d264 1
a264 1
    { "TR",         TAG_TR,         TR,           0,               0,               MAX_TR_ANCHORS,       1, 1, TYPE_BODY },
@


1.2.2.12
log
@Totally redesigned attribute parsing code.
Started new API for accessing attributes - only implemented for BODY.
Added <BODY alink onload onunload> support.
@
text
@d28 140
a167 62
static const Anchor A_Attributes[] = {
	{ "ACCESSKEY",  ACCESSKEY, CDATA },
	{ "CHARSET",   	CHARSET,   CDATA },
	{ "COORDS",   	COORDS,    COORDS_RULE },
	{ "HREF",    	HREF,      URL_RULE },
	{ "NAME",    	NAME,      CDATA },
	{ "REL",     	REL,       CDATA },
	{ "REV",     	REV,       CDATA },
	{ "SHAPE",     	SHAPE,     SHAPE_RULE },
        { "TABINDEX",   TABINDEX,  NUMBER },
        { "TARGET",     TARGET,    CDATA },
	};
#define MAX_A_ATTRIBUTES (SizeOfArray(A_Attributes))

static const Anchor Img_Attributes[] = {
	{ "ALIGN",   		ALIGN,   SET, "top|middle|bottom|left|right|centre,center" },
	{ "ALT",     		ALT,     CDATA },
	{ "BORDER",  		BORDER,  PIXELS_RULE },
	{ "HEIGHT", 		HEIGHT,  PIXELS_RULE },
	{ "HSPACE", 		HSPACE,  PIXELS_RULE },
	{ "ISMAP",   		ISMAP,   EMPTY },
	{ "SRC",     		SRC,     URL_RULE },
	{ "USEMAP",   		USEMAP,  URL_RULE },
	{ "VSPACE", 		VSPACE,  PIXELS_RULE },
	{ "WIDTH",   		WIDTH,   PIXELS_RULE },
	};
#define MAX_IMG_ATTRIBUTES (SizeOfArray(Img_Attributes))


static const Anchor Link_Attributes[] = {
	{ "HREF",    		HREF,    URL_RULE },
	{ "MEDIA",     		MEDIA,   CDATA },
	{ "REL",     		REL,     CDATA },
	{ "REV",     		REV,     CDATA },
	{ "TARGET",    		TARGET,  CDATA },
	{ "TYPE",    		TYPE,    CONTENTTYPE_RULE },
	};
#define MAX_LINK_ATTRIBUTES (SizeOfArray(Link_Attributes))

static const Anchor Meta_Attributes[] = {
	{ "CONTENT",   		CONTENT,    CDATA },
	{ "HTTP-EQUIV",    	HTTP_EQUIV, NAME_RULE },
	{ "NAME",     		NAME,       NAME_RULE },
	{ "SCHEME",    		SCHEME,     CDATA },
	};
#define MAX_META_ATTRIBUTES (SizeOfArray(Meta_Attributes))

static const Anchor Body_Attributes[] = {
	{ "ALINK",          	ALINK,    COLOUR_RULE },
	{ "BACKGROUND",    	BACKGROUND, URL_RULE  },
	{ "BGCOLOR",       	BGCOL,    COLOUR_RULE },
	{ "BGCOLOUR",      	BGCOL,    COLOUR_RULE },
	{ "LINK",          	LINKCOL,  COLOUR_RULE },
        { "ONLOAD",             ONLOAD,   SCRIPT_RULE },
        { "ONUNLOAD",           ONUNLOAD, SCRIPT_RULE },
	{ "TEXT",          	FGCOL,    COLOUR_RULE },
	{ "VLINK",         	VLINK,    COLOUR_RULE },
	};
#define MAX_BODY_ATTRIBUTES (SizeOfArray(Body_Attributes))

static const Anchor H_Attributes[] = {
        { "ALIGN",   		ALIGN,   SET, "left|centre,center|right"/*|justify*/ },
d169 1
a169 137
#define MAX_H_ATTRIBUTES (SizeOfArray(H_Attributes))

static const Anchor HR_Attributes[] = {
        { "ALIGN",   		ALIGN,   SET, "left|right|centre,center" },
        { "NOSHADE", 		NOSHADE, EMPTY       },
        { "SIZE",    		SIZE,    PIXELS_RULE },
        { "WIDTH",   		WIDTH,   LENGTH_RULE },
        };
#define MAX_HR_ATTRIBUTES (SizeOfArray(HR_Attributes))

static const Anchor P_Attributes[] = {
        { "ALIGN",   		ALIGN,   SET, "left|centre,center|right"/*|justify*/ },
        };
#define MAX_P_ATTRIBUTES (SizeOfArray(P_Attributes))

static const Anchor Base_Attributes[] = {
	{ "HREF",    		HREF,    URL_RULE },
        { "TARGET",             TARGET,  CDATA },
	};
#define MAX_BASE_ATTRIBUTES (SizeOfArray(Base_Attributes))

static const Anchor Form_Attributes[] = {
        { "ACCEPT-CHARSET",     ACCEPT_CHARSET, CDATA },
        { "ACTION",  		ACTION,         URL_RULE },
        { "ENCTYPE", 		ENCTYPE,        CONTENTTYPE_RULE },
        { "METHOD", 		METHOD,         SET, "get|post" },
        { "ONRESET",            ONRESET,        SCRIPT_RULE },
        { "ONSUBMIT",           ONSUBMIT,       SCRIPT_RULE },
        { "TARGET",             TARGET,         CDATA },
        };
#define MAX_FORM_ATTRIBUTES (SizeOfArray(Form_Attributes))

static const Anchor Input_Attributes[] = {
        { "CHECKED",   		CHECKED,   EMPTY       },
        { "DISABLED",  	        DISABLED,  EMPTY       },
        { "MAXLENGTH", 		MAXLENGTH, NUMBER      },
        { "NAME",      		NAME,      CDATA       },
        { "ONBLUR",             ONBLUR,    SCRIPT_RULE },
        { "ONCHANGE",           ONCHANGE,  SCRIPT_RULE },
        { "ONFOCUS",            ONFOCUS,   SCRIPT_RULE },
        { "ONSELECT",           ONSELECT,  SCRIPT_RULE },
        { "SIZE",      		SIZE,	   NUMBER /* HTML 4.0 says CDATA */ },
        { "SRC",       		SRC,	   URL_RULE    },
        { "TYPE",      		TYPE,      SET, /*text|*/"password|checkbox|radio|image|hidden|submit|reset"/*|file|button*/},
        { "VALUE",     		VALUE,	   CDATA       },
        };
#define MAX_INPUT_ATTRIBUTES (SizeOfArray(Input_Attributes))

static const Anchor Select_Attributes[] = {
        { "DISABLED",  	        DISABLED,  EMPTY },
        { "MULTIPLE",  		MULTIPLE,  EMPTY },
        { "NAME",      		NAME,	   CDATA },
        { "ONBLUR",             ONBLUR,    SCRIPT_RULE },
        { "ONCHANGE",           ONCHANGE,  SCRIPT_RULE },
        { "ONFOCUS",            ONFOCUS,   SCRIPT_RULE },
        { "ONSELECT",           ONSELECT,  SCRIPT_RULE },
        { "SIZE",      		SIZE,	   NUMBER },
        { "TABINDEX",           TABINDEX,  NUMBER },
        };
#define MAX_SELECT_ATTRIBUTES (SizeOfArray(Select_Attributes))

static const Anchor Option_Attributes[] = {
        { "DISABLED",  	        DISABLED,  EMPTY },
        { "SELECTED",  		SELECTED,  EMPTY },
        { "VALUE",     		VALUE,	   CDATA },
        };
#define MAX_OPTION_ATTRIBUTES (SizeOfArray(Option_Attributes))

static const Anchor Textarea_Attributes[] = {
	{ "COLS",      		COLS,     NUMBER      },
        { "DISABLED",  	        DISABLED, EMPTY       },
	{ "NAME",      		NAME,	  CDATA       },
        { "ONBLUR",             ONBLUR,   SCRIPT_RULE },
        { "ONCHANGE",           ONCHANGE, SCRIPT_RULE },
        { "ONFOCUS",            ONFOCUS,  SCRIPT_RULE },
        { "ONSELECT",           ONSELECT, SCRIPT_RULE },
        { "READONLY",           READONLY, EMPTY       },
	{ "ROWS",      		ROWS,	  NUMBER      },
        { "TABINDEX",           TABINDEX, NUMBER      },
	};
#define MAX_TEXTAREA_ATTRIBUTES (SizeOfArray(Textarea_Attributes))

static const Anchor Basefont_Attributes[] = {
        { "COLOR",     		COLOUR,    COLOUR_RULE },
        { "COLOUR",    		COLOUR,    COLOUR_RULE },
        { "FACE",      		FACE,      CDATA       },
        { "SIZE",      		FONTSIZE,  NUMBER      }, /* HTML 4.0 says CDATA */
        };
#define MAX_BASEFONT_ATTRIBUTES (SizeOfArray(Basefont_Attributes))

static const Anchor Font_Attributes[] = {
        { "COLOR",     		COLOUR,    COLOUR_RULE },
        { "COLOUR",    		COLOUR,    COLOUR_RULE },
        { "FACE",      		FACE,      CDATA       },
        { "SIZE",      		FONTSIZE,  CDATA       },
        };
#define MAX_FONT_ATTRIBUTES (SizeOfArray(Font_Attributes))

static const Anchor Table_Attributes[] = {
        { "ALIGN",              ALIGN,       SET, "left|centre,center|right" },
	{ "BGCOLOR",       	BGCOL,       COLOUR_RULE },
	{ "BGCOLOUR",      	BGCOL,       COLOUR_RULE },
        { "BORDER",    		BORDER,      NUMBER      }, /* HTML 4.0 says CDATA */
        { "CELLPADDING",        CELLPADDING, NUMBER      }, /* HTML 4.0 implies LENGTH_RULE, says CDATA */
        { "CELLSPACING",        CELLSPACING, NUMBER      }, /* HTML 4.0 implies LENGTH_RULE, says CDATA */
        { "COLS",               COLS,        NUMBER      },
        { "FRAME",              TABLEFRAME,  SET, "void|above|below|hsides|lhs|rhs|vsides|box|border" },
        { "RULES",              TABLERULES,  SET, "none|groups|rows|cols|all" },
        { "WIDTH",     		WIDTH,       LENGTH_RULE }, /* Not sure about this */
        };
#define MAX_TABLE_ATTRIBUTES (SizeOfArray(Table_Attributes))

static const Anchor Tr_Attributes[] = {
        { "ALIGN",     		ALIGN,      SET, "left|centre,center|right|justify|char" },
	{ "BGCOLOR",       	BGCOL,      COLOUR_RULE },
	{ "BGCOLOUR",      	BGCOL,      COLOUR_RULE },
        { "CHAR",               CHAR,       CDATA       },
        { "CHAROFF",            CHAROFF,    CDATA       },
        { "VALIGN",    		VALIGN,     SET, "top|middle|bottom|baseline" },
        };
#define MAX_TR_ATTRIBUTES (SizeOfArray(Tr_Attributes))

static const Anchor Cell_Attributes[] = {
        { "ALIGN",     		ALIGN,      SET, "left|centre,center|right|justify|char" },
	{ "BACKGROUND",    	BACKGROUND, URL_RULE     },
	{ "BGCOLOR",       	BGCOL,      COLOUR_RULE  },
	{ "BGCOLOUR",      	BGCOL,      COLOUR_RULE  },
        { "CHAR",               CHAR,       CDATA        },
        { "CHAROFF",            CHAROFF,    CDATA        },
        { "COLSPAN",   		COLSPAN,    NUMBER       },
        { "HEIGHT",             HEIGHT,     LENGTH_RULE  }, /* Not HTML 4.0 */
        { "NOWRAP",             NOWRAP,     EMPTY        },
        { "ROWSPAN",   		ROWSPAN,    NUMBER       },
        { "VALIGN",    		VALIGN,     SET, "top|middle|bottom|baseline" },
        { "WIDTH",              WIDTH,      LENGTH_RULE  }, /* Not HTML 4.0 */
        };
#define MAX_CELL_ATTRIBUTES (SizeOfArray(Cell_Attributes))
d172 8
a179 10
static const Anchor Frameset_Attributes[] = {
        { "BORDER",             FRAMEBORDER,      PIXELS_RULE }, /* Not HTML 4.0 */
        { "BORDERCOLOR",        BORDERCOLOUR,     COLOUR_RULE }, /* Not HTML 4.0 */
        { "BORDERCOLOUR",       BORDERCOLOUR,     COLOUR_RULE }, /* Not HTML 4.0 */
        { "COLS",      		COLS,             CDATA /* Default 1 */ },
        { "FRAMEBORDER",        FRAMEBORDER,      PIXELS_RULE }, /* Not HTML 4.0 */
        { "FRAMESPACING",       FRAMEBORDER,      PIXELS_RULE }, /* Not HTML 4.0 */
        { "ONLOAD",             ONLOAD,           SCRIPT_RULE },
        { "ONUNLOAD",           ONUNLOAD,         SCRIPT_RULE },
        { "ROWS",      		ROWS,             CDATA /* Default 1 */ },
d181 1
a181 1
#define MAX_FRAMESET_ATTRIBUTES (SizeOfArray (Frameset_Attributes))
d183 12
a194 11
static const Anchor Frame_Attributes[] = {
        { "BORDER",             FRAMEBORDER,      PCDATA },
        { "BORDERCOLOR",        BORDERCOLOUR,     COLOUR_RULE }, /* Not HTML 4.0 */
        { "BORDERCOLOUR",       BORDERCOLOUR,     COLOUR_RULE }, /* Not HTML 4.0 */
        { "FRAMEBORDER",        FRAMEBORDER,      SET, "0|1" },
        { "MARGINHEIGHT", 	MARGINHEIGHT,     PIXELS_RULE },
        { "MARGINWIDTH",        MARGINWIDTH,      PIXELS_RULE },
	{ "NAME",      		NAME,	          CDATA },
        { "NORESIZE",		NORESIZE, 	  EMPTY },
        { "SCROLLING", 		SCROLLING,	  SET, /*auto|*/"yes|no"},
        { "SRC",       		SRC,              URL_RULE },
d196 1
a196 1
#define MAX_FRAME_ATTRIBUTES (SizeOfArray (Frame_Attributes))
a199 28
const Anchor Event_Attributes[] = {
        { "ONCLICK",            ONCLICK,          SCRIPT_RULE },
        { "ONDBLCLICK",         ONDBLCLICK,       SCRIPT_RULE },
        { "ONKEYDOWN",          ONKEYDOWN,        SCRIPT_RULE },
        { "ONKEYPRESS",         ONKEYPRESS,       SCRIPT_RULE },
        { "ONKEYUP",            ONKEYUP,          SCRIPT_RULE },
        { "ONMOUSEDOWN",        ONMOUSEDOWN,      SCRIPT_RULE },
        { "ONMOUSEMOVE",        ONMOUSEMOVE,      SCRIPT_RULE },
        { "ONMOUSEOUT",         ONMOUSEOUT,       SCRIPT_RULE },
        { "ONMOUSEOVER",        ONMOUSEOVER,      SCRIPT_RULE },
        { "ONMOUSEUP",          ONMOUSEUP,        SCRIPT_RULE },
};
const int MAX_EVENT_ATTRIBUTES=SizeOfArray(Event_Attributes);

const Anchor I18n_Attributes[] = {
        { "DIR" ,               DIRECTION,        SET, "ltr|rtl" },
        { "LANG",               LANG,             NAME_RULE },
};
const int MAX_I18N_ATTRIBUTES=SizeOfArray(I18n_Attributes);

const Anchor Core_Attributes[] = {
        { "CLASS",              CLASS,            CDATA },
        { "ID",                 ID,               ID_RULE },
        { "STYLE",              STYLE,            CDATA },
        { "TITLE",              TITLE,            CDATA }
};
const int MAX_CORE_ATTRIBUTES=SizeOfArray(Core_Attributes);

d212 61
a272 63
 /*                                                                                                     has_events
                                                                                                     has_i18n
                                                                                                  has_coreattrs
                                                                                               block_tag
      start_tag     tag_no          tag           attributes       max_attributes           can_be_end     type */
    { "A",          TAG_A,          A,            0,               MAX_A_ATTRIBUTES,        1, 0, 1, 1, 1, TYPE_BODY },
    { "ADDRESS",    TAG_ADDRESS,    ADDRESS,      0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "B",	    TAG_BOLD,       BOLD,         0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "BASE",       TAG_BASE,       BASE,         0,               MAX_BASE_ATTRIBUTES,     0, 0, 0, 0, 0, TYPE_HEAD },
    { "BASEFONT",   TAG_BASEFONT,   FONT,         0,               MAX_BASEFONT_ATTRIBUTES, 0, 0, 0, 0, 0, TYPE_BODY },
    { "BLOCKQUOTE", TAG_BLOCKQUOTE, BLOCKQUOTE,   0,	  	   0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "BODY",       TAG_BODY,       BODY,         0,               MAX_BODY_ATTRIBUTES,     1, 1, 1, 1, 1, TYPE_HEAD },
    { "BR",	    TAG_BR,         BR,           0,	      	   0,                       0, 1, 1, 0, 0, TYPE_BODY },
    { "CENTER",     TAG_CENTER,     CENTER,       0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "CENTRE",     TAG_CENTRE,     CENTER,       0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "CITE",	    TAG_CITE,       CITE,         0,         	   0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "CODE",	    TAG_CODE,       CODE,         0,        	   0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "DD",	    TAG_DD,         DD,           0,    	   0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DIR",	    TAG_DIR,        UL, 	  0,    	   0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DL",	    TAG_DL,         DL,	          0,	      	   0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DT",	    TAG_DT,         DT,	          0,   	           0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "EM",	    TAG_EM,         EM,	          0,      	   0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "FONT",	    TAG_FONT,       FONT,         0,               MAX_FONT_ATTRIBUTES,     1, 0, 0, 0, 0, TYPE_BODY },
    { "FORM",	    TAG_FORM,       FORM,         0,               MAX_FORM_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
    { "FRAME",      TAG_FRAME,      FRAME,        0,               MAX_FRAME_ATTRIBUTES,    0, 0, 0, 0, 0, TYPE_FRAMESET },
    { "FRAMESET",   TAG_FRAMESET,   TYPE_FRAMESET,0,               MAX_FRAMESET_ATTRIBUTES, 1, 1, 0, 0, 0, TYPE_FRAMESET },
    { "H1",	    TAG_H1,         H1,	          0,    	   MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H2",	    TAG_H2,         H2,	          0,    	   MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H3",	    TAG_H3,         H3,	          0,    	   MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H4",	    TAG_H4,         H4,	          0,    	   MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H5",	    TAG_H5,         H5,	          0,    	   MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H6",	    TAG_H6,         H6,	          0,    	   MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "HEAD",       TAG_HEAD,       HEAD,         0,               0,                       1, 1, 0, 1, 0, TYPE_HEAD },
    { "HR",	    TAG_HR,         HR,           0,               MAX_HR_ATTRIBUTES,       0, 1, 1, 0, 1, TYPE_BODY },
    { "I",	    TAG_ITALIC,     ITALIC,       0,          	   0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "IMG",	    TAG_IMG,        IMG,	  0,               MAX_IMG_ATTRIBUTES,      0, 0, 1, 1, 1, TYPE_BODY },
    { "INPUT",	    TAG_INPUT,      INPUT,        0,               MAX_INPUT_ATTRIBUTES,    0, 0, 1, 1, 1, TYPE_BODY },
    { "ISINDEX",    TAG_ISINDEX,    ISINDEX,      0,		   0,                       0, 0, 1, 1, 0, TYPE_HEAD },
    { "KBD",	    TAG_KBD,        KBD,	  0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "LI",	    TAG_LI,         LI,	          0,    	   0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "LINK",       TAG_LINK,       LINK,         0,               MAX_LINK_ATTRIBUTES,     0, 0, 1, 1, 1, TYPE_HEAD },
    { "MENU", 	    TAG_MENU,       UL,           0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "META",       TAG_META,       META,         0,		   MAX_META_ATTRIBUTES,     0, 0, 0, 1, 0, TYPE_HEAD },
    { "NOFRAMES",   TAG_NOFRAMES,   TYPE_NOFRAMES,0,               0,                       1, 1, 0, 0, 0, TYPE_NOFRAMES },
    { "OL",	    TAG_OL,         OL,	          0,   	           0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "OPTION",	    TAG_OPTION,     OPTION,       0,               MAX_OPTION_ATTRIBUTES,   0, 1, 1, 1, 1, TYPE_BODY },
    { "P",	    TAG_P,          P,	          0,    	   MAX_P_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "PRE",	    TAG_PRE,        PRE,       	  0,	      	   0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "SAMP",	    TAG_SAMP,       SAMP,         0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SCRIPT",     TAG_SCRIPT,     SCRIPT,       0,               0,                       1, 0, 0, 0, 0, TYPE_HEAD },
    { "SELECT",	    TAG_SELECT,     SELECT,       0,               MAX_SELECT_ATTRIBUTES,   1, 0, 1, 1, 1, TYPE_BODY },
    { "STRONG",	    TAG_STRONG,     STRONG,       0,         	   0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "STYLE",      TAG_STYLE,      STYLE,        0,               0,                       1, 0, 0, 1, 0, TYPE_HEAD },
    { "TABLE",      TAG_TABLE,      TABLE,        0,               MAX_TABLE_ATTRIBUTES,    1, 1, 1, 1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         TD,           0,               MAX_CELL_ATTRIBUTES,     1, 1, 1, 1, 1, TYPE_BODY },
    { "TEXTAREA",   TAG_TEXTAREA,   TEXTAREA,     0,               MAX_TEXTAREA_ATTRIBUTES, 1, 0, 1, 1, 1, TYPE_BODY },
    { "TH",         TAG_TH,         TH,           0,               MAX_CELL_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
    { "TITLE",      TAG_TITLE,      TITLE,        0,               0,                       1, 0, 0, 1, 0, TYPE_HEAD },
    { "TR",         TAG_TR,         TR,           0,               MAX_TR_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
    { "TT",	    TAG_TT,         TT,	          0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "UL",	    TAG_UL,         UL,	          0,  	           0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "VAR",	    TAG_VAR,        VAR,	  0,        	   0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "XMP",	    TAG_XMP,        PRE,          0,	      	   0,                       1, 1, 0, 0, 0, TYPE_BODY }, /* Not HTML 4.0 */
@


1.2.2.13
log
@SCRIPT and <A onclick> handling, hopefully
@
text
@d229 1
d257 2
d282 2
a283 2
        { "STYLE",              STYLEattr,        CDATA },
        { "TITLE",              TITLEattr,        CDATA }
@


1.2.2.14
log
@Redid handling of FORM tags to use an elementinfo structure.
@
text
@d116 1
a116 1
        { "METHOD", 		METHOD,         SET, /*get|*/"post" },
@


1.2.2.15
log
@Allowed 'MIDDLE' as well as 'CENTER' and 'CENTRE' on some tags (e.g. table
cells), plus added temporary hack to convert INPUT TYPE=IMAGE to a submit
button (so AltaVista can work again).
@
text
@d29 8
a36 8
        { "ACCESSKEY",  ACCESSKEY, CDATA },
        { "CHARSET",    CHARSET,   CDATA },
        { "COORDS",     COORDS,    COORDS_RULE },
        { "HREF",       HREF,      URL_RULE },
        { "NAME",       NAME,      CDATA },
        { "REL",        REL,       CDATA },
        { "REV",        REV,       CDATA },
        { "SHAPE",      SHAPE,     SHAPE_RULE },
d39 1
a39 1
        };
d43 11
a53 11
        { "ALIGN",              ALIGN,   SET, "top|middle|bottom|left|right|centre,center" },
        { "ALT",                ALT,     CDATA },
        { "BORDER",             BORDER,  PIXELS_RULE },
        { "HEIGHT",             HEIGHT,  PIXELS_RULE },
        { "HSPACE",             HSPACE,  PIXELS_RULE },
        { "ISMAP",              ISMAP,   EMPTY },
        { "SRC",                SRC,     URL_RULE },
        { "USEMAP",             USEMAP,  URL_RULE },
        { "VSPACE",             VSPACE,  PIXELS_RULE },
        { "WIDTH",              WIDTH,   PIXELS_RULE },
        };
d58 7
a64 7
        { "HREF",               HREF,    URL_RULE },
        { "MEDIA",              MEDIA,   CDATA },
        { "REL",                REL,     CDATA },
        { "REV",                REV,     CDATA },
        { "TARGET",             TARGET,  CDATA },
        { "TYPE",               TYPE,    CONTENTTYPE_RULE },
        };
d68 5
a72 5
        { "CONTENT",            CONTENT,    CDATA },
        { "HTTP-EQUIV",         HTTP_EQUIV, NAME_RULE },
        { "NAME",               NAME,       NAME_RULE },
        { "SCHEME",             SCHEME,     CDATA },
        };
d76 5
a80 5
        { "ALINK",              ALINK,    COLOUR_RULE },
        { "BACKGROUND",         BACKGROUND, URL_RULE  },
        { "BGCOLOR",            BGCOL,    COLOUR_RULE },
        { "BGCOLOUR",           BGCOL,    COLOUR_RULE },
        { "LINK",               LINKCOL,  COLOUR_RULE },
d83 3
a85 3
        { "TEXT",               FGCOL,    COLOUR_RULE },
        { "VLINK",              VLINK,    COLOUR_RULE },
        };
d89 1
a89 1
        { "ALIGN",              ALIGN,   SET, "left|centre,center,middle|right"/*|justify*/ },
d94 4
a97 4
        { "ALIGN",              ALIGN,   SET, "left|right|centre,center,middle" },
        { "NOSHADE",            NOSHADE, EMPTY       },
        { "SIZE",               SIZE,    PIXELS_RULE },
        { "WIDTH",              WIDTH,   LENGTH_RULE },
d102 1
a102 1
        { "ALIGN",              ALIGN,   SET, "left|centre,center,middle|right"/*|justify*/ },
d107 1
a107 1
        { "HREF",               HREF,    URL_RULE },
d109 1
a109 1
        };
d114 3
a116 3
        { "ACTION",             ACTION,         URL_RULE },
        { "ENCTYPE",            ENCTYPE,        CONTENTTYPE_RULE },
        { "METHOD",             METHOD,         SET, /*get|*/"post" },
d124 4
a127 4
        { "CHECKED",            CHECKED,   EMPTY       },
        { "DISABLED",           DISABLED,  EMPTY       },
        { "MAXLENGTH",          MAXLENGTH, NUMBER      },
        { "NAME",               NAME,      CDATA       },
d132 4
a135 4
        { "SIZE",               SIZE,      NUMBER /* HTML 4.0 says CDATA */ },
        { "SRC",                SRC,       URL_RULE    },
        { "TYPE",               TYPE,      SET, /*text|*/"password|checkbox|radio|xxxxx|hidden|image,submit|reset"/*|file|button*/}, /* Hack alert! Temporarily sidestep lack of Image support in browser */
        { "VALUE",              VALUE,     CDATA       },
d140 3
a142 3
        { "DISABLED",           DISABLED,  EMPTY },
        { "MULTIPLE",           MULTIPLE,  EMPTY },
        { "NAME",               NAME,      CDATA },
d147 1
a147 1
        { "SIZE",               SIZE,      NUMBER },
d153 3
a155 3
        { "DISABLED",           DISABLED,  EMPTY },
        { "SELECTED",           SELECTED,  EMPTY },
        { "VALUE",              VALUE,     CDATA },
d160 3
a162 3
        { "COLS",               COLS,     NUMBER      },
        { "DISABLED",           DISABLED, EMPTY       },
        { "NAME",               NAME,     CDATA       },
d168 1
a168 1
        { "ROWS",               ROWS,     NUMBER      },
d170 1
a170 1
        };
d174 4
a177 4
        { "COLOR",              COLOUR,    COLOUR_RULE },
        { "COLOUR",             COLOUR,    COLOUR_RULE },
        { "FACE",               FACE,      CDATA       },
        { "SIZE",               FONTSIZE,  NUMBER      }, /* HTML 4.0 says CDATA */
d182 4
a185 4
        { "COLOR",              COLOUR,    COLOUR_RULE },
        { "COLOUR",             COLOUR,    COLOUR_RULE },
        { "FACE",               FACE,      CDATA       },
        { "SIZE",               FONTSIZE,  CDATA       },
d190 4
a193 4
        { "ALIGN",              ALIGN,       SET, "left|centre,center,middle|right" },
        { "BGCOLOR",            BGCOL,       COLOUR_RULE },
        { "BGCOLOUR",           BGCOL,       COLOUR_RULE },
        { "BORDER",             BORDER,      NUMBER      }, /* HTML 4.0 says CDATA */
d199 1
a199 1
        { "WIDTH",              WIDTH,       LENGTH_RULE }, /* Not sure about this */
d204 3
a206 3
        { "ALIGN",              ALIGN,      SET, "left|centre,center,middle|right|justify|char" },
        { "BGCOLOR",            BGCOL,      COLOUR_RULE },
        { "BGCOLOUR",           BGCOL,      COLOUR_RULE },
d209 1
a209 1
        { "VALIGN",             VALIGN,     SET, "top|middle|bottom|baseline" },
d214 4
a217 4
        { "ALIGN",              ALIGN,      SET, "left|centre,center,middle|right|justify|char" },
        { "BACKGROUND",         BACKGROUND, URL_RULE     },
        { "BGCOLOR",            BGCOL,      COLOUR_RULE  },
        { "BGCOLOUR",           BGCOL,      COLOUR_RULE  },
d220 1
a220 1
        { "COLSPAN",            COLSPAN,    NUMBER       },
d223 2
a224 2
        { "ROWSPAN",            ROWSPAN,    NUMBER       },
        { "VALIGN",             VALIGN,     SET, "top|middle|bottom|baseline" },
d233 1
a233 1
        { "COLS",               COLS,             CDATA /* Default 1 */ },
d238 1
a238 1
        { "ROWS",               ROWS,             CDATA /* Default 1 */ },
d247 1
a247 1
        { "MARGINHEIGHT",       MARGINHEIGHT,     PIXELS_RULE },
d249 4
a252 4
        { "NAME",               NAME,             CDATA },
        { "NORESIZE",           NORESIZE,         EMPTY },
        { "SCROLLING",          SCROLLING,        SET, /*auto|*/"yes|no"},
        { "SRC",                SRC,              URL_RULE },
d303 1
a303 1
    { "B",          TAG_BOLD,       BOLD,         0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
d306 1
a306 1
    { "BLOCKQUOTE", TAG_BLOCKQUOTE, BLOCKQUOTE,   0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
d308 1
a308 1
    { "BR",         TAG_BR,         BR,           0,               0,                       0, 1, 1, 0, 0, TYPE_BODY },
d311 9
a319 9
    { "CITE",       TAG_CITE,       CITE,         0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "CODE",       TAG_CODE,       CODE,         0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "DD",         TAG_DD,         DD,           0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DIR",        TAG_DIR,        UL,           0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DL",         TAG_DL,         DL,           0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DT",         TAG_DT,         DT,           0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "EM",         TAG_EM,         EM,           0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "FONT",       TAG_FONT,       FONT,         0,               MAX_FONT_ATTRIBUTES,     1, 0, 0, 0, 0, TYPE_BODY },
    { "FORM",       TAG_FORM,       FORM,         0,               MAX_FORM_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
d322 6
a327 6
    { "H1",         TAG_H1,         H1,           0,               MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H2",         TAG_H2,         H2,           0,               MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H3",         TAG_H3,         H3,           0,               MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H4",         TAG_H4,         H4,           0,               MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H5",         TAG_H5,         H5,           0,               MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H6",         TAG_H6,         H6,           0,               MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
d329 7
a335 7
    { "HR",         TAG_HR,         HR,           0,               MAX_HR_ATTRIBUTES,       0, 1, 1, 0, 1, TYPE_BODY },
    { "I",          TAG_ITALIC,     ITALIC,       0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "IMG",        TAG_IMG,        IMG,          0,               MAX_IMG_ATTRIBUTES,      0, 0, 1, 1, 1, TYPE_BODY },
    { "INPUT",      TAG_INPUT,      INPUT,        0,               MAX_INPUT_ATTRIBUTES,    0, 0, 1, 1, 1, TYPE_BODY },
    { "ISINDEX",    TAG_ISINDEX,    ISINDEX,      0,               0,                       0, 0, 1, 1, 0, TYPE_HEAD },
    { "KBD",        TAG_KBD,        KBD,          0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "LI",         TAG_LI,         LI,           0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
d337 2
a338 2
    { "MENU",       TAG_MENU,       UL,           0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "META",       TAG_META,       META,         0,               MAX_META_ATTRIBUTES,     0, 0, 0, 1, 0, TYPE_HEAD },
d340 5
a344 5
    { "OL",         TAG_OL,         OL,           0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "OPTION",     TAG_OPTION,     OPTION,       0,               MAX_OPTION_ATTRIBUTES,   0, 1, 1, 1, 1, TYPE_BODY },
    { "P",          TAG_P,          P,            0,               MAX_P_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "PRE",        TAG_PRE,        PRE,          0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "SAMP",       TAG_SAMP,       SAMP,         0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
d346 2
a347 2
    { "SELECT",     TAG_SELECT,     SELECT,       0,               MAX_SELECT_ATTRIBUTES,   1, 0, 1, 1, 1, TYPE_BODY },
    { "STRONG",     TAG_STRONG,     STRONG,       0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
d355 4
a358 4
    { "TT",         TAG_TT,         TT,           0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "UL",         TAG_UL,         UL,           0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "VAR",        TAG_VAR,        VAR,          0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "XMP",        TAG_XMP,        PRE,          0,               0,                       1, 1, 0, 0, 0, TYPE_BODY }, /* Not HTML 4.0 */
@


1.2.2.16
log
@Added HtmlReturnContext (__html_return_context) to get the context of a
block of memory (e.g. an HStream structure). This allows clients to check
if some particular block belongs to a stream that is about to be freed,
say, and take appropriate action before the freeing. Merged in a few
changes by Kevin Bracey to help with vertical white space problems,
mostly involving SCRIPT tags - there was also a bug in BASE which didn't
check for an HREF before trying to read the attributes value, so broken
HTML like <BASE FONT=1> would stop all subsequent HREFs from being
correctly relativised.
@
text
@d345 1
a345 1
    { "SCRIPT",     TAG_SCRIPT,     SCRIPT,       0,               0,                       0, 1, 0, 0, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
d348 1
a348 1
    { "STYLE",      TAG_STYLE,      STYLE,        0,               0,                       0, 1, 0, 1, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
@


1.2.2.17
log
@Revised INPUT handling - made INPUT type=image work
@
text
@a123 3
        { "ACCEPT",             ACCEPT,    CDATA       },
        { "ALIGN",              ALIGN,     SET, "top|middle|bottom|left|right|centre,center"},
        { "ALT",                ALT,       CDATA       },
a131 1
        { "READONLY",           READONLY,  EMPTY       },
d134 1
a134 3
        { "TABINDEX",           TABINDEX,  NUMBER      },
        { "TYPE",               TYPE,      SET, /*text|*/"password|checkbox|radio|image|hidden|submit|reset"/*|file|button*/},
        { "USEMAP",             USEMAP,    URL_RULE    },
@


1.2.2.18
log
@Rule on TITLE changed to make it a block-like element
@
text
@d359 1
a359 1
    { "TITLE",      TAG_TITLE,      TITLE,        0,               0,                       1, 1, 0, 1, 0, TYPE_HEAD },
@


1.2.2.19
log
@Fixed FRAME and FRAMESET border attributes
@
text
@d236 1
a236 1
        { "BORDER",             FRAMEBORDER,      CDATA       }, /* Not HTML 4.0 */
d240 2
a241 2
        { "FRAMEBORDER",        FRAMEBORDER,      CDATA       }, /* Not HTML 4.0 */
        { "FRAMESPACING",       FRAMEBORDER,      CDATA       }, /* Not HTML 4.0 */
d252 1
a252 1
        { "FRAMEBORDER",        FRAMEBORDER,      PCDATA },
@


1.2.2.20
log
@Small error in html2.h for frames attributes corrected
@
text
@d249 1
a249 1
        { "BORDER",             FRAMEBORDER,      CDATA },
d252 1
a252 1
        { "FRAMEBORDER",        FRAMEBORDER,      CDATA },
@


1.2.2.21
log
@Did align on <P> and right align on tables.
Fixed problem with the final ">" of "</SCRIPT>" ending up in the title.
Fixed problem of HtmlGetStream returning a pointer to the wrong parent table.
Added SUB and SUP.
@
text
@d249 1
a249 1
        { "BORDER",             FRAMEBORDER,      PCDATA },
d252 1
a252 1
        { "FRAMEBORDER",        FRAMEBORDER,      PCDATA },
d316 1
a316 1
    { "CENTRE",     TAG_CENTER,     CENTER,       0,               0,                       1, 1, 1, 1, 1, TYPE_BODY },
d338 1
a338 1
    { "INPUT",      TAG_INPUT,      0,            0,               MAX_INPUT_ATTRIBUTES,    0, 0, 1, 1, 1, TYPE_BODY },
d347 1
a347 1
    { "OPTION",     TAG_OPTION,     0,            0,               MAX_OPTION_ATTRIBUTES,   0, 1, 1, 1, 1, TYPE_BODY },
d352 1
a352 1
    { "SELECT",     TAG_SELECT,     0,            0,               MAX_SELECT_ATTRIBUTES,   1, 0, 1, 1, 1, TYPE_BODY },
a354 2
    { "SUB",        TAG_SUB,        SUB,          0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SUP",        TAG_SUP,        SUP,          0,               0,                       1, 0, 1, 1, 1, TYPE_BODY },
d357 1
a357 1
    { "TEXTAREA",   TAG_TEXTAREA,   0,            0,               MAX_TEXTAREA_ATTRIBUTES, 1, 0, 1, 1, 1, TYPE_BODY },
@


1.2.2.22
log
@FRAMEBORDER attribute on FRAME now CDATA not PCDATA (in html2.h)
@
text
@d18 1
a18 1
 * NOTE: Set terminal (display) width to about 192 chars!
d249 1
a249 1
        { "BORDER",             FRAMEBORDER,      CDATA },
d252 1
a252 1
        { "FRAMEBORDER",        FRAMEBORDER,      CDATA },
@


1.2.2.23
log
@Stopped clash with TABLE, SCRIPT or STYLE looking like TITLE - should now
check for titles with (tagno=TAG_TITLE), rather than (style & TITLE).
@
text
@d361 1
a361 1
    { "TITLE",      TAG_TITLE,      0,            0,               0,                       1, 1, 0, 1, 0, TYPE_HEAD },
@


1.2.2.24
log
@VALIGN on a TABLE tag is now inherited by TR. CENTER or CENTRE permitted,
as well as MIDDLE.
@
text
@a204 1
        { "VALIGN",             VALIGN,      SET, "top|middle,center,centre|bottom|baseline" },
d215 1
a215 1
        { "VALIGN",             VALIGN,     SET, "top|middle,center,centre|bottom|baseline" },
d230 1
a230 1
        { "VALIGN",             VALIGN,     SET, "top|middle,center,centre|bottom|baseline" },
@


1.2.2.25
log
@Turned off CUSTOMER_SPECIAL.
Changed encoding tables to use FFFF as a null value instead of FFFD.
Added OBJECT support (more testing required - PARAM not yet done).
Added AREA support (commented out - MAP not yet done). They come out
looking like <A></A> elements.
Souped up mapping to Latin-1 (added lossy tables for Latin Extended
Additional, CJK Punctuation and Fullwidth forms).
Added support for <H1 align=...>
Stripped some superfluous whitespace caused by linefeeds.
Fixed missing linebreak in "<DT>One<DT>Two" by turning the second DT into
a BR.
Removed now unnecessary free(malloc(16384)) bodge.
Put in CJK code even if UNIFONT not defined (hey - why not?).
Added code to take direct pointer to table rather than loading it if
it's in ResourceFS.
Added support for encoding "x-acorn-latin1".
Ensured correct handling of OPTIONs when UNIFONT not defined.
@
text
@d36 1
a36 1
        { "SHAPE",      SHAPE,     SET, /*rect|*/"circle|poly|default" },
a56 50
static const Anchor Object_Attributes[] = {
        { "ALIGN",             ALIGN,    SET, "top|middle|bottom|left|right|centre,center" },
        { "ARCHIVE",           ARCHIVE,  URL_RULE },
        { "BORDER",            BORDER,   LENGTH_RULE },
        { "CLASSID",           CLASSID,  URL_RULE },
        { "CODEBASE",          CODEBASE, URL_RULE },
        { "CODETYPE",          CODETYPE, CONTENTTYPE_RULE },
        { "DATA",              DATA,     URL_RULE },
        { "DECLARE",           DECLARE,  EMPTY },
        { "HEIGHT",            HEIGHT,   LENGTH_RULE },
        { "HSPACE",            HSPACE,   LENGTH_RULE },
        { "NAME",              NAME,     CDATA },
        { "SHAPES",            SHAPES,   EMPTY },
        { "STANDBY",           STANDBY,  CDATA },
        { "TABINDEX",          TABINDEX, NUMBER },
        { "TYPE",              TYPE,     CONTENTTYPE_RULE },
        { "USEMAP",            USEMAP,   URL_RULE },
        { "VSPACE",            VSPACE,   LENGTH_RULE },
        { "WIDTH",             WIDTH,    LENGTH_RULE },
        };
#define MAX_OBJECT_ATTRIBUTES (SizeOfArray(Object_Attributes))


static const Anchor Param_Attributes[] = {
        { "ID",                ID,       ID_RULE },
        { "NAME",              NAME,     CDATA },
        { "TYPE",              TYPE,     CDATA },
        { "VALUE",             VALUE,    CDATA },
        { "VALUETYPE",         VALUETYPE,SET, "data|ref|object" },
        };

#define MAX_PARAM_ATTRIBUTES (SizeOfArray(Param_Attributes))


static const Anchor Applet_Attributes[] = {
        { "ALIGN",             ALIGN,    SET, "top|middle|bottom|left|right|centre,center" },
        { "ALT",               ALT,      CDATA },
        { "ARCHIVE",           ARCHIVE,  CDATA },
        { "CODE",              CODEBASE, CDATA },
        { "CODEBASE",          CODEBASE, URL_RULE },
        { "HEIGHT",            HEIGHT,   PIXELS_RULE },
        { "HSPACE",            HSPACE,   PIXELS_RULE },
        { "NAME",              NAME,     CDATA },
        { "OBJECT",            OBJECT,   CDATA },
        { "VSPACE",            VSPACE,   PIXELS_RULE },
        { "WIDTH",             WIDTH,    PIXELS_RULE },
        };
#define MAX_APPLET_ATTRIBUTES (SizeOfArray(Applet_Attributes))


a262 17
static const Anchor Map_Attributes[] = {
        { "NAME",               NAME,             CDATA },
};
#define MAX_MAP_ATTRIBUTES (SizeOfArray (Map_Attributes))

static const Anchor Area_Attributes[] = {
        { "ACCESSKEY",          ACCESSKEY,        CDATA },
        { "ALT",                ALT,              CDATA },
        { "COORDS",             COORDS,           COORDS_RULE },
        { "HREF",               HREF,             URL_RULE },
        { "NOHREF",             NOHREF,           EMPTY },
        { "SHAPE",              SHAPE,            SET, /*rect|*/"circle|poly|default" },
        { "TABINDEX",           TABINDEX,         NUMBER },
        { "TARGET",             TARGET,           CDATA },
};
#define MAX_AREA_ATTRIBUTES (SizeOfArray (Area_Attributes))

d303 65
a367 70
 /*                                                                                                has_events
                                                                                                has_i18n
                                                                                             has_coreattrs
                                                                                          block_tag
      start_tag     tag_no          tag           attributes  max_attributes           can_be_end     type */
    { "A",          TAG_A,          A,            0,          MAX_A_ATTRIBUTES,        1, 0, 1, 1, 1, TYPE_BODY },
    { "ADDRESS",    TAG_ADDRESS,    ADDRESS,      0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "APPLET",     TAG_APPLET,     0,            0,          MAX_APPLET_ATTRIBUTES,   1, 1, 1, 0, 0, TYPE_BODY },
    { "AREA",       TAG_AREA,       0,            0,          MAX_AREA_ATTRIBUTES,     0, 1, 1, 1, 1, TYPE_BODY },
    { "B",          TAG_BOLD,       BOLD,         0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "BASE",       TAG_BASE,       0,            0,          MAX_BASE_ATTRIBUTES,     0, 0, 0, 0, 0, TYPE_HEAD },
    { "BASEFONT",   TAG_BASEFONT,   FONT,         0,          MAX_BASEFONT_ATTRIBUTES, 0, 0, 0, 0, 0, TYPE_BODY },
    { "BLOCKQUOTE", TAG_BLOCKQUOTE, BLOCKQUOTE,   0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "BODY",       TAG_BODY,       BODY,         0,          MAX_BODY_ATTRIBUTES,     1, 1, 1, 1, 1, TYPE_HEAD },
    { "BR",         TAG_BR,         BR,           0,          0,                       0, 1, 1, 0, 0, TYPE_BODY },
    { "CENTER",     TAG_CENTER,     CENTER,       0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "CENTRE",     TAG_CENTER,     CENTER,       0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "CITE",       TAG_CITE,       CITE,         0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "CODE",       TAG_CODE,       CODE,         0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "DD",         TAG_DD,         DD,           0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DIR",        TAG_DIR,        UL,           0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DL",         TAG_DL,         DL,           0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DT",         TAG_DT,         DT,           0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "EM",         TAG_EM,         EM,           0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "FONT",       TAG_FONT,       FONT,         0,          MAX_FONT_ATTRIBUTES,     1, 0, 0, 0, 0, TYPE_BODY },
    { "FORM",       TAG_FORM,       FORM,         0,          MAX_FORM_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
    { "FRAME",      TAG_FRAME,      FRAME,        0,          MAX_FRAME_ATTRIBUTES,    0, 0, 0, 0, 0, TYPE_FRAMESET },
    { "FRAMESET",   TAG_FRAMESET,   TYPE_FRAMESET,0,          MAX_FRAMESET_ATTRIBUTES, 1, 1, 0, 0, 0, TYPE_FRAMESET },
    { "H1",         TAG_H1,         H1,           0,          MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H2",         TAG_H2,         H2,           0,          MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H3",         TAG_H3,         H3,           0,          MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H4",         TAG_H4,         H4,           0,          MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H5",         TAG_H5,         H5,           0,          MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H6",         TAG_H6,         H6,           0,          MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "HEAD",       TAG_HEAD,       HEAD,         0,          0,                       1, 1, 0, 1, 0, TYPE_HEAD },
    { "HR",         TAG_HR,         HR,           0,          MAX_HR_ATTRIBUTES,       0, 1, 1, 0, 1, TYPE_BODY },
    { "I",          TAG_ITALIC,     ITALIC,       0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "IMG",        TAG_IMG,        IMG,          0,          MAX_IMG_ATTRIBUTES,      0, 0, 1, 1, 1, TYPE_BODY },
    { "INPUT",      TAG_INPUT,      0,            0,          MAX_INPUT_ATTRIBUTES,    0, 0, 1, 1, 1, TYPE_BODY },
    { "ISINDEX",    TAG_ISINDEX,    ISINDEX,      0,          0,                       0, 0, 1, 1, 0, TYPE_HEAD },
    { "KBD",        TAG_KBD,        KBD,          0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "LI",         TAG_LI,         LI,           0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "LINK",       TAG_LINK,       LINK,         0,          MAX_LINK_ATTRIBUTES,     0, 0, 1, 1, 1, TYPE_HEAD },
    { "MAP",        TAG_MAP,        0,            0,          MAX_MAP_ATTRIBUTES,      1, 0, 1, 1, 1, TYPE_BODY },
    { "MENU",       TAG_MENU,       UL,           0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "META",       TAG_META,       META,         0,          MAX_META_ATTRIBUTES,     0, 0, 0, 1, 0, TYPE_HEAD },
    { "NOFRAMES",   TAG_NOFRAMES,   TYPE_NOFRAMES,0,          0,                       1, 1, 0, 0, 0, TYPE_NOFRAMES },
    { "OBJECT",     TAG_OBJECT,     0,            0,          MAX_OBJECT_ATTRIBUTES,   1, 1, 1, 1, 1, TYPE_BODY },
    { "OL",         TAG_OL,         OL,           0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "OPTION",     TAG_OPTION,     0,            0,          MAX_OPTION_ATTRIBUTES,   1, 1, 1, 1, 1, TYPE_BODY },
    { "P",          TAG_P,          P,            0,          MAX_P_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "PARAM",      TAG_PARAM,      0,            0,          MAX_PARAM_ATTRIBUTES,    0, 1, 0, 0, 0, TYPE_BODY },
    { "PRE",        TAG_PRE,        PRE,          0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "SAMP",       TAG_SAMP,       SAMP,         0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SCRIPT",     TAG_SCRIPT,     0,            0,          0,                       0, 1, 0, 0, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
    { "SELECT",     TAG_SELECT,     0,            0,          MAX_SELECT_ATTRIBUTES,   1, 0, 1, 1, 1, TYPE_BODY },
    { "STRONG",     TAG_STRONG,     STRONG,       0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "STYLE",      TAG_STYLE,      0,            0,          0,                       0, 1, 0, 1, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
    { "SUB",        TAG_SUB,        SUB,          0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SUP",        TAG_SUP,        SUP,          0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "TABLE",      TAG_TABLE,      TABLE,        0,          MAX_TABLE_ATTRIBUTES,    1, 1, 1, 1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         TD,           0,          MAX_CELL_ATTRIBUTES,     1, 1, 1, 1, 1, TYPE_BODY },
    { "TEXTAREA",   TAG_TEXTAREA,   0,            0,          MAX_TEXTAREA_ATTRIBUTES, 1, 0, 1, 1, 1, TYPE_BODY },
    { "TH",         TAG_TH,         TH,           0,          MAX_CELL_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
    { "TITLE",      TAG_TITLE,      0,            0,          0,                       1, 1, 0, 1, 0, TYPE_HEAD },
    { "TR",         TAG_TR,         TR,           0,          MAX_TR_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
    { "TT",         TAG_TT,         TT,           0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "UL",         TAG_UL,         UL,           0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "VAR",        TAG_VAR,        VAR,          0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "XMP",        TAG_XMP,        PRE,          0,          0,                       1, 1, 0, 0, 0, TYPE_BODY }, /* Not HTML 4.0 */
@


1.2.2.26
log
@Added STRIKE and U
@
text
@a425 1
    { "STRIKE",     TAG_STRIKE,     STRIKE,       0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
a436 1
    { "U",          TAG_U,          UNDERLINE,    0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
@


1.2.2.27
log
@Deal more elegantly with <DT> and <DD> outside of a DL element.
Strip spaces after </MAP>.
@
text
@d413 1
a413 1
    { "MAP",        TAG_MAP,        0,            0,          MAX_MAP_ATTRIBUTES,      1, 1, 1, 1, 1, TYPE_BODY },
@


1.2.2.28
log
@Added simple support for <DIV align=...>
Forced linebreaks after </CENTRE> (and </DIV>).
@
text
@a329 5
static const Anchor Div_Attributes[] = {
        { "ALIGN",              ALIGN,            SET, "left|centre,center,middle|right"/*|justify*/ },
};
#define MAX_DIV_ATTRIBUTES (SizeOfArray (Div_Attributes))

a390 1
    { "DIV",        TAG_DIV,        0,            0,          MAX_DIV_ATTRIBUTES,      1, 1, 1, 1, 1, TYPE_BODY },
@


1.2.2.29
log
@Stopped style being attached to SCRIPT and STYLE tokens.
Stopping leading spaces being stripped from PRE elements.
Removed TABLE,TR,TD and TH from the style word.
@
text
@d437 2
a438 2
    { "TABLE",      TAG_TABLE,      0,            0,          MAX_TABLE_ATTRIBUTES,    1, 1, 1, 1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         0,            0,          MAX_CELL_ATTRIBUTES,     1, 1, 1, 1, 1, TYPE_BODY },
d440 1
a440 1
    { "TH",         TAG_TH,         0,            0,          MAX_CELL_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
d442 1
a442 1
    { "TR",         TAG_TR,         0,            0,          MAX_TR_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
@


1.2.2.30
log
@Implemented ordered lists.
Implemented <Q> ... </Q>.
Caused a linebreak after </DD>.
Finished implementing attributes for <OBJECT>.
Stopped HTML after a </FRAMESET> leaking through.
Ensured that FRAME and FRAMESET tokens aren't passed up if not using frames.

Removed lots of unnecessary #include "utf8.h" lines from encoding files.
Ensured unsigned constants used in UTF-8 code.
Added UTF8_next and UTF8_prev functions.
@
text
@a142 13
static const Anchor OL_Attributes[] = {
        { "COMPACT",          COMPACT,   EMPTY },
        { "START",            STARTattr, NUMBER },
        { "TYPE",             TYPE,      OLSTYLE_RULE },
        };
#define MAX_OL_ATTRIBUTES (SizeOfArray(OL_Attributes))

static const Anchor LI_Attributes[] = {
        { "TYPE",             TYPE,      OLSTYLE_RULE },
        { "VALUE",            VALUE,     NUMBER },
        };
#define MAX_LI_ATTRIBUTES (SizeOfArray(LI_Attributes))

d417 1
a417 1
    { "LI",         TAG_LI,         LI,           0,          MAX_LI_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
d424 1
a424 1
    { "OL",         TAG_OL,         OL,           0,          MAX_OL_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
a428 1
    { "Q",          TAG_Q,          0,            0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
@


1.2.2.31
log
@Added basic support - in terms of changing text styles as appropriate
but nothing more - for ACRONYM, BIG, BLINK, DEL, DFN, S, and SMALL.
XMP maps to PRE correctly now (so it isn't a correct implementation,
but again, the text style is OK) and ADDRESS has been flagged as a
block level element.
@
text
@d394 1
a394 2
    { "ACRONYM",    TAG_ACRONYM,    0,            0,          0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to SMALL -> FONT SIZE = "-1" */
    { "ADDRESS",    TAG_ADDRESS,    ADDRESS,      0,          0,                       1, 1, 1, 1, 1, TYPE_BODY },
a399 2
    { "BIG",        TAG_BIG,        0,            0,          0,                       1, 0, 0, 0, 0, TYPE_BODY }, /* Currently mapped to FONT SIZE = "+1" */
    { "BLINK",      TAG_DUMMY,      0,            0,          0,                       1, 0, 0, 0, 0, TYPE_BODY }, /* Dummy to get white space after a </BLINK> working OK */
a407 2
    { "DEL",        TAG_DEL,        STRIKE,       0,          0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to STRIKE */
    { "DFN",        TAG_DFN,        ITALIC,       0,          0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to I */
a427 1
    { "INS",        TAG_INS,        UNDERLINE,    0,          0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to U */
a442 1
    { "S",          TAG_STRIKE,     STRIKE,       0,          0,                       1, 0, 1, 1, 1, TYPE_BODY },
a445 1
    { "SMALL",      TAG_SMALL,      0,            0,          0,                       1, 0, 0, 0, 0, TYPE_BODY }, /* Currently mapped to FONT SIZE = "-1" */
@


1.2.2.32
log
@PARAM and APPLET, take 1.
@
text
@d61 1
a61 1
        { "CLASSID",           CLASSID,  CDATA }, /* Not URL_RULE */
d85 1
a85 1
        { "VALUETYPE",         VALUETYPE,SET, /*data|*/"ref|object" },
d93 1
a93 1
        { "ALT",               STANDBY,  CDATA },
d95 1
a95 1
        { "CODE",              CLASSID,  CDATA },
@


1.2.2.33
log
@APPLET and PARAM take 2
@
text
@d59 1
a59 1
        { "ARCHIVE",           ARCHIVE,  CDATA },
d62 1
a62 1
        { "CODEBASE",          CODEBASE, CDATA },
d64 1
a64 1
        { "DATA",              DATA,     CDATA },
@


1.2.2.34
log
@Changed WIDTH and HEIGHT from PIXELS_RULE to LENGTH_RULE for APPLET
and IMG tags.
@
text
@d46 1
a46 1
        { "HEIGHT",             HEIGHT,  LENGTH_RULE },
d52 1
a52 1
        { "WIDTH",              WIDTH,   LENGTH_RULE },
d97 1
a97 1
        { "HEIGHT",            HEIGHT,   LENGTH_RULE },
d102 1
a102 1
        { "WIDTH",             WIDTH,    LENGTH_RULE },
@


1.2.2.35
log
@Added EMBED support (creating lookalike OBJECTs).
Removed startup table initialisation, because latest compiler can do it.
@
text
@a106 10
/* EMBED (yeurch!) is a special case - it can take any extra attributes */
static const Anchor Embed_Attributes[] = {
        { "ALIGN",             ALIGN,    SET, "top|middle|bottom|left|right|centre,center" },
        { "HEIGHT",            HEIGHT,   LENGTH_RULE },
        { "SRC",               DATA,     CDATA },
        { "WIDTH",             WIDTH,    LENGTH_RULE },
        };
#define MAX_EMBED_ATTRIBUTES (SizeOfArray(Embed_Attributes))


d273 1
a273 1
static const Anchor TR_Attributes[] = {
d281 1
a281 1
#define MAX_TR_ATTRIBUTES (SizeOfArray(TR_Attributes))
d388 82
a469 83
 /*                                                                                                        has_events
                                                                                                        has_i18n
                                                                                                     has_coreattrs
                                                                                                  block_tag
      start_tag     tag_no          tag           attributes          max_attributes           can_be_end     type */
    { "A",          TAG_A,          A,            A_Attributes,       MAX_A_ATTRIBUTES,        1, 0, 1, 1, 1, TYPE_BODY },
    { "ACRONYM",    TAG_ACRONYM,    0,            0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to SMALL -> FONT SIZE = "-1" */
    { "ADDRESS",    TAG_ADDRESS,    ADDRESS,      0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "APPLET",     TAG_APPLET,     0,            Applet_Attributes,  MAX_APPLET_ATTRIBUTES,   1, 1, 1, 0, 0, TYPE_BODY },
    { "AREA",       TAG_AREA,       0,            Area_Attributes,    MAX_AREA_ATTRIBUTES,     0, 1, 1, 1, 1, TYPE_BODY },
    { "B",          TAG_BOLD,       BOLD,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "BASE",       TAG_BASE,       0,            Base_Attributes,    MAX_BASE_ATTRIBUTES,     0, 0, 0, 0, 0, TYPE_HEAD },
    { "BASEFONT",   TAG_BASEFONT,   FONT,         Basefont_Attributes,MAX_BASEFONT_ATTRIBUTES, 0, 0, 0, 0, 0, TYPE_BODY },
    { "BIG",        TAG_BIG,        0,            0,                  0,                       1, 0, 0, 0, 0, TYPE_BODY }, /* Currently mapped to FONT SIZE = "+1" */
    { "BLINK",      TAG_DUMMY,      0,            0,                  0,                       1, 0, 0, 0, 0, TYPE_BODY }, /* Dummy to get white space after a </BLINK> working OK */
    { "BLOCKQUOTE", TAG_BLOCKQUOTE, BLOCKQUOTE,   0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "BODY",       TAG_BODY,       BODY,         Body_Attributes,    MAX_BODY_ATTRIBUTES,     1, 1, 1, 1, 1, TYPE_HEAD },
    { "BR",         TAG_BR,         BR,           0,                  0,                       0, 1, 1, 0, 0, TYPE_BODY },
    { "CENTER",     TAG_CENTER,     CENTER,       0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "CENTRE",     TAG_CENTER,     CENTER,       0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "CITE",       TAG_CITE,       CITE,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "CODE",       TAG_CODE,       CODE,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "DD",         TAG_DD,         DD,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DEL",        TAG_DEL,        STRIKE,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to STRIKE */
    { "DFN",        TAG_DFN,        ITALIC,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to I */
    { "DIR",        TAG_DIR,        UL,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DIV",        TAG_DIV,        0,            Div_Attributes,     MAX_DIV_ATTRIBUTES,      1, 1, 1, 1, 1, TYPE_BODY },
    { "DL",         TAG_DL,         DL,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "DT",         TAG_DT,         DT,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "EM",         TAG_EM,         EM,           0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "EMBED",      TAG_EMBED,      0,            Embed_Attributes,   MAX_EMBED_ATTRIBUTES,    0, 1, 0, 0, 0, TYPE_BODY },
    { "FONT",       TAG_FONT,       FONT,         Font_Attributes,    MAX_FONT_ATTRIBUTES,     1, 0, 0, 0, 0, TYPE_BODY },
    { "FORM",       TAG_FORM,       FORM,         Form_Attributes,    MAX_FORM_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
    { "FRAME",      TAG_FRAME,      FRAME,        Frame_Attributes,   MAX_FRAME_ATTRIBUTES,    0, 0, 0, 0, 0, TYPE_FRAMESET },
    { "FRAMESET",   TAG_FRAMESET,   TYPE_FRAMESET,Frameset_Attributes,MAX_FRAMESET_ATTRIBUTES, 1, 1, 0, 0, 0, TYPE_FRAMESET },
    { "H1",         TAG_H1,         H1,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H2",         TAG_H2,         H2,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H3",         TAG_H3,         H3,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H4",         TAG_H4,         H4,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H5",         TAG_H5,         H5,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "H6",         TAG_H6,         H6,           H_Attributes,       MAX_H_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "HEAD",       TAG_HEAD,       HEAD,         0,                  0,                       1, 1, 0, 1, 0, TYPE_HEAD },
    { "HR",         TAG_HR,         HR,           HR_Attributes,      MAX_HR_ATTRIBUTES,       0, 1, 1, 0, 1, TYPE_BODY },
    { "I",          TAG_ITALIC,     ITALIC,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "IMG",        TAG_IMG,        IMG,          Img_Attributes,     MAX_IMG_ATTRIBUTES,      0, 0, 1, 1, 1, TYPE_BODY },
    { "INPUT",      TAG_INPUT,      0,            Input_Attributes,   MAX_INPUT_ATTRIBUTES,    0, 0, 1, 1, 1, TYPE_BODY },
    { "INS",        TAG_INS,        UNDERLINE,    0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY }, /* Currently mapped to U */
    { "ISINDEX",    TAG_ISINDEX,    ISINDEX,      0,                  0,                       0, 0, 1, 1, 0, TYPE_HEAD },
    { "KBD",        TAG_KBD,        KBD,          0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "LI",         TAG_LI,         LI,           LI_Attributes,      MAX_LI_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
    { "LINK",       TAG_LINK,       LINK,         Link_Attributes,    MAX_LINK_ATTRIBUTES,     0, 0, 1, 1, 1, TYPE_HEAD },
    { "MAP",        TAG_MAP,        0,            Map_Attributes,     MAX_MAP_ATTRIBUTES,      1, 1, 1, 1, 1, TYPE_BODY },
    { "MENU",       TAG_MENU,       UL,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "META",       TAG_META,       META,         Meta_Attributes,    MAX_META_ATTRIBUTES,     0, 0, 0, 1, 0, TYPE_HEAD },
    { "NOFRAMES",   TAG_NOFRAMES,   TYPE_NOFRAMES,0,                  0,                       1, 1, 0, 0, 0, TYPE_NOFRAMES },
    { "OBJECT",     TAG_OBJECT,     0,            Object_Attributes,  MAX_OBJECT_ATTRIBUTES,   1, 1, 1, 1, 1, TYPE_BODY },
    { "OL",         TAG_OL,         OL,           OL_Attributes,      MAX_OL_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
    { "OPTION",     TAG_OPTION,     0,            Option_Attributes,  MAX_OPTION_ATTRIBUTES,   1, 1, 1, 1, 1, TYPE_BODY },
    { "P",          TAG_P,          P,            P_Attributes,       MAX_P_ATTRIBUTES,        1, 1, 1, 1, 1, TYPE_BODY },
    { "PARAM",      TAG_PARAM,      0,            Param_Attributes,   MAX_PARAM_ATTRIBUTES,    0, 1, 0, 0, 0, TYPE_BODY },
    { "PRE",        TAG_PRE,        PRE,          0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "Q",          TAG_Q,          0,            0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "S",          TAG_STRIKE,     STRIKE,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SAMP",       TAG_SAMP,       SAMP,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SCRIPT",     TAG_SCRIPT,     0,            0,                  0,                       0, 1, 0, 0, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
    { "SELECT",     TAG_SELECT,     0,            Select_Attributes,  MAX_SELECT_ATTRIBUTES,   1, 0, 1, 1, 1, TYPE_BODY },
    { "SMALL",      TAG_SMALL,      0,            0,                  0,                       1, 0, 0, 0, 0, TYPE_BODY }, /* Currently mapped to FONT SIZE = "-1" */
    { "STRIKE",     TAG_STRIKE,     STRIKE,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "STRONG",     TAG_STRONG,     STRONG,       0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "STYLE",      TAG_STYLE,      0,            0,                  0,                       0, 1, 0, 1, 0, TYPE_HEAD }, /* Don't process end tags in the usual way, so can be end = 0 */
    { "SUB",        TAG_SUB,        SUB,          0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "SUP",        TAG_SUP,        SUP,          0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "TABLE",      TAG_TABLE,      0,            Table_Attributes,   MAX_TABLE_ATTRIBUTES,    1, 1, 1, 1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         0,            Cell_Attributes,    MAX_CELL_ATTRIBUTES,     1, 1, 1, 1, 1, TYPE_BODY },
    { "TEXTAREA",   TAG_TEXTAREA,   0,            Textarea_Attributes,MAX_TEXTAREA_ATTRIBUTES, 1, 0, 1, 1, 1, TYPE_BODY },
    { "TH",         TAG_TH,         0,            Cell_Attributes,    MAX_CELL_ATTRIBUTES,     1, 0, 1, 1, 1, TYPE_BODY },
    { "TITLE",      TAG_TITLE,      0,            0,                  0,                       1, 1, 0, 1, 0, TYPE_HEAD },
    { "TR",         TAG_TR,         0,            TR_Attributes,      MAX_TR_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
    { "TT",         TAG_TT,         TT,           0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "U",          TAG_U,          UNDERLINE,    0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "UL",         TAG_UL,         UL,           0,                  0,                       1, 1, 1, 1, 1, TYPE_BODY },
    { "VAR",        TAG_VAR,        VAR,          0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
    { "XMP",        TAG_XMP,        PRE,          0,                  0,                       1, 1, 0, 0, 0, TYPE_BODY }, /* Not HTML 4.0 */
@


1.2.2.36
log
@Client-side image map URLs CDATA not URL_RULE; recognise 'circle' as well as
'circ' (lots of people make this mistake).
@
text
@d36 1
a36 1
        { "SHAPE",      SHAPE,     SET, /*rect|*/"circle,circ|poly,polygon|default" },
d50 1
a50 1
        { "USEMAP",             USEMAP,  CDATA /* Will be URL_RULE one day */ },
d73 1
a73 1
        { "USEMAP",            USEMAP,   CDATA /* Will be URL_RULE one day */ },
d213 1
a213 1
        { "USEMAP",             USEMAP,    CDATA /* Will be URL_RULE one day */ },
d347 1
a347 1
        { "SHAPE",              SHAPE,            SET, /*rect|*/"circle,circ|poly,polygon|default" },
@


1.2.2.37
log
@Made BASE TARGET work for FORMs and AREAs.
@
text
@d189 1
a189 1
        { "METHOD",             METHOD,         SET, /*get|*/ "post" },
@


1.2.2.38
log
@*** empty log message ***
@
text
@d212 1
a212 1
        { "TYPE",               TYPE,      SET, /*text|*/"password|checkbox|radio|image|hidden|submit|reset|button"/*file*/},
@


1.2.2.39
log
@*** empty log message ***
@
text
@a451 1
    { "NOBR",       TAG_NOBR,       NOBR,         0,                  0,                       1, 0, 1, 1, 1, TYPE_BODY },
d454 1
a454 1
    { "OL",         TAG_OL,         0,            OL_Attributes,      MAX_OL_ATTRIBUTES,       1, 1, 1, 1, 1, TYPE_BODY },
@


1.2.2.40
log
@HEIGHT and BACKGROUND attributes on a TABLE tag now supported, with appropriate
macros for extracting the information from a table_stream struct. A table_stream
no longer needs to be the same length or shorter than an HStream, though several
of the fields do still need to be in the same position in each structure.
@
text
@a269 1
        { "BACKGROUND",         BACKGROUND,  URL_RULE    },
a276 1
        { "HEIGHT",             HEIGHT,      LENGTH_RULE }, /* Not sure about this */
d279 1
a279 1
        { "WIDTH",              WIDTH,       LENGTH_RULE }, /* Not sure about this either! */
@


1.2.2.41
log
@HRs default to centre, rather than left alignment
@
text
@d167 1
a167 1
        { "ALIGN",              ALIGN,   SET, "left|right"/*|centre,center,middle*/ },
@


1.1
log
@file html2 was initially added on branch ARTtmp.
@
text
@d1 354
@


1.1.2.1
log
@Initial revision
@
text
@a0 321
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source: /ax/networking:Phileas/HTML/h/html2: $
 *
 * $Log:	html2,v $
 *
 * Revision 1.3  96/01/06            kbracey
 * Made the whole lot alphabetical for easier searching
 *
 * Revision 1.2  95/12/06  16:35:21  pwain
 * Added FORM tags
 *
 * Revision 1.1  95/10/12  12:49:19  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * $Version: networking $
 *
 * $Source: /ax/networking:Phileas/HTML/h/html2: $
 *
 * $Log:	html2,v $
 * Revision 1.2  95/12/06  16:35:21  pwain
 * Added FORM tags
 *
 * Revision 1.1  95/10/12  12:49:19  pwain
 * Initial revision
 *
 * Revision 1.1  95/09/08  10:06:14  pwain
 * Initial revision
 *
 *
 */

/*
 * This file attempts to define the HTML2 DTD
 *
 * NOTE: Set term width to 100 chars!!!!!
 */

#ifndef __html2_h__
#define __html2_h__

#include "tags.h"
#include "rules.h"
#include "html2_ext.h"

extern Anchor A_Anchors[];

#define MAX_A_ANCHORS 8
Anchor A_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
	{ "METHODS", 		METHODS, METHODS_RULE },
	{ "NAME",    		NAME,    NAME_RULE },
	{ "REL",     		REL,     REL_RULE },
	{ "REV",     		REV,     REV_RULE },
        { "TARGET",             TARGET,  0 },
	{ "TITLE",   		_TITLE,  _TITLE_RULE },
	{ "URN",     		URN,     URN_RULE },
	};

#define MAX_IMG_ANCHORS 7
Anchor Img_Anchors[] = {
	{ "ALIGN",   		ALIGN,   ALIGN_RULE },
	{ "ALT",     		ALT,     ALT_RULE },
	{ "BORDER",  		BORDER,  ROWS_RULE },
	{ "HEIGHT", 		ROWS,    ROWS_RULE },
	{ "ISMAP",   		ISMAP,   ISMAP_RULE },
	{ "SRC",     		SRC,     SRC_RULE },
	{ "WIDTH",   		COLS,    COLS_RULE },
	};


#define MAX_LINK_ANCHORS 6
Anchor Link_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
	{ "METHODS", 		METHODS, METHODS_RULE },
	{ "REL",     		REL,     REL_RULE },
	{ "REV",     		REV,     REV_RULE },
	{ "TITLE",   		_TITLE,  _TITLE_RULE },
	{ "URN",     		URN,     URN_RULE },
	};

#define MAX_BODY_ANCHORS 6
Anchor Body_Anchors[] = {
	{ "BACKGROUND",    	SRC,    SRC_RULE },
	{ "BGCOLOR",       	BGCOL,  SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,  SRC_RULE },
	{ "LINK",          	ALINK,  SRC_RULE },
	{ "TEXT",          	FGCOL,  SRC_RULE },
	{ "VLINK",         	VLINK,  SRC_RULE },
	};

#define MAX_HR_ANCHORS 4
Anchor HR_Anchors[] = {
        { "ALIGN",   		ALIGN,   ALIGN_RULE   },
        { "NOSHADE", 		NOSHADE, NOSHADE_RULE },
        { "SIZE",    		SIZE,    SIZE_RULE    },
        { "WIDTH",   		HRWIDTH, HRWIDTH_RULE },
        };

#define MAX_BASE_ANCHORS 2
Anchor Base_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
        { "TARGET",             TARGET,  0 },
	};

#define MAX_FORM_ANCHORS 4
Anchor Form_Anchors[] = {
        { "ACTION",  		ACTION,  ACTION_RULE },
        { "ENCTYPE", 		ENCTYPE, ENCTYPE_RULE },
        { "METHOD", 		METHOD,  METHOD_RULE },
        { "TARGET",             TARGET,  0 },
        };

#define MAX_INPUT_ANCHORS 7
Anchor Input_Anchors[] = {
        { "CHECKED",   		CHECKED,   CHECKED_RULE },
        { "MAXLENGTH", 		MAXLENGTH, MAXLENGTH_RULE },
        { "NAME",      		NAME,      NAME_RULE },
        { "SIZE",      		SIZE,	  SIZE_RULE},
        { "SRC",       		SRC,	  SRC_RULE},
        { "TYPE",      		TYPE,      TYPE_RULE },
        { "VALUE",     		VALUE,	  VALUE_RULE },
        };

#define MAX_SELECT_ANCHORS 3
Anchor Select_Anchors[] = {
        { "MULTIPLE",  		MULTIPLE,  MULTIPLE_RULE },
        { "NAME",      		NAME,	  NAME_RULE },
        { "SIZE",      		SIZE,	  SIZE_RULE },
        };

#define MAX_OPTION_ANCHORS 2
Anchor Option_Anchors[] = {
        { "SELECTED",  		SELECTED,  SELECTED_RULE },
        { "VALUE",     		VALUE,	  VALUE_RULE },
        };

#define MAX_TEXTAREA_ANCHORS 3
Anchor Textarea_Anchors[] = {
	{ "COLS",      		COLS,      COLS_RULE },
	{ "NAME",      		NAME,	  NAME_RULE },
	{ "ROWS",      		ROWS,	  ROWS_RULE },
	};

#define MAX_TABLE_ANCHORS 2
Anchor Table_Anchors[] = {
        { "BORDER",    		BORDER,    ROWS_RULE  },
        { "WIDTH",     		COLS,      COLS_RULE  },
        };

#define MAX_BASEFONT_ANCHORS 1
Anchor Basefont_Anchors[] = {
        { "SIZE",      		BASEFONTSIZE,  BASEFONTSIZE_RULE },
        };

#define MAX_FONT_ANCHORS 3
Anchor Font_Anchors[] = {
        { "COLOR",     		COLOR,     COLOR_RULE },
        { "COLOUR",    		COLOR,     COLOR_RULE },
        { "SIZE",      		FONTSIZE,  FONTSIZE_RULE },
        };

#define MAX_TR_ANCHORS 2
Anchor Tr_Anchors[] = {
        { "ALIGN",     		ALIGN,     ALIGN_RULE  },
        { "VALIGN",    		VALIGN,    VALIGN_RULE },
        };

#define MAX_CELL_ANCHORS 4
Anchor Cell_Anchors[] = {
        { "ALIGN",     		ALIGN,     ALIGN_RULE   },
        { "COLSPAN",   		COLSPAN,   COLSPAN_RULE },
        { "ROWSPAN",   		ROWSPAN,   ROWSPAN_RULE },
        { "VALIGN",    		VALIGN,    VALIGN_RULE  },
        };

#ifdef FRAMESUPPORT
Anchor Frameset_Anchors[] = {
        { "BORDER",             FRAMEBORDER,      0 }, /* /* */
        { "BORDERCOLOR",        BORDERCOLOR,      0 }, /* /* */
        { "BORDERCOLOUR",       BORDERCOLOR,      0 }, /* /* */
        { "COLS",      		COLS,      COLS_RULE },
        { "FRAMEBORDER",        FRAMEBORDER,      0 }, /* /* */
        { "FRAMESPACING",       FRAMEBORDER,      0 }, /* /* */
        { "ROWS",      		ROWS,      ROWS_RULE },
};
#define MAX_FRAMESET_ANCHORS (SizeOfArray (Frameset_Anchors))

Anchor Frame_Anchors[] = {
        { "BORDER",             FRAMEBORDER,      0 }, /* /* */
        { "BORDERCOLOR",        BORDERCOLOR,      0 }, /* /* */
        { "BORDERCOLOUR",       BORDERCOLOR,      0 }, /* /* */
        { "FRAMEBORDER",        FRAMEBORDER,      0 }, /* /* */
//        { "FRAMESPACING",       FRAMEBORDER,      0 }, /* /* */
        { "MARGINHEIGHT", 	MARGINHEIGHT,     0 }, /* /* */
        { "MARGINWIDTH",        MARGINWIDTH,      0 }, /* /* */
	{ "NAME",      		NAME,	  NAME_RULE },
        { "NORESIZE",		NORESIZE, 	  0 }, /* /* */
        { "SCROLLING", 		SCROLLING,	  0 }, /* /* */
        { "SRC",       		SRC,       SRC_RULE },
};
#define MAX_FRAME_ANCHORS (SizeOfArray (Frame_Anchors))

#endif

Tag Null_Tag={NULL,0,0,0,0,0};

int MAX_HEAD_TAGS=6;
Tag Head_Tags[] = {
    { "BASE",    0,     BASE,    BASE_RULE,    Base_Anchors,	MAX_BASE_ANCHORS },
    { "ISINDEX", 0,     ISINDEX, ISINDEX_RULE, 0,		0},
    { "LINK",    0,     LINK,    LINK_RULE,    Link_Anchors, MAX_LINK_ANCHORS },
    { "META",    0,     META,    META_RULE,    0,		0},
    { "NEXTID",  0,     NEXTID,  NEXTID_RULE,  0,		0},
    { "TITLE",   1,     TITLE,   TITLE_RULE,   0 ,              0},
    };

#ifdef TABLE_SUPPORT
int MAX_BODY_TAGS=46;
#else
int MAX_BODY_TAGS=42;
#endif
Tag Body_Tags[] = {
    { "!--",	    0, },
    { "A",          1,             A,          A_RULE,          A_Anchors,        MAX_A_ANCHORS },
    { "ADDRESS",    1,             ADDRESS,    ADDRESS_RULE,	0,           	  0 },
    { "B",	    1,             BOLD,       BOLD_RULE,	0,           	  0 },
       /* We can treat BASEFONT pretty much as a FONT that only accepts size... */
    { "BASEFONT",   0,             FONT,       BASEFONT_RULE,   Basefont_Anchors, MAX_BASEFONT_ANCHORS },
    { "BLOCKQUOTE", 1,             BLOCKQUOTE, BLOCKQUOTE_RULE, 0,	     	  0 },
    { "BR",	    0,             BR,         BR_RULE,         0,	      	  0 },
    { "CENTER",     1,             CENTER,     BODY_RULE,   	0,           	  0 },
    { "CENTRE",     1,             CENTER,     BODY_RULE,       0,           	  0 },
    { "CITE",	    1,             CITE,       CITE_RULE,	0,           	  0 },
    { "CODE",	    1,      	   CODE,       CODE_RULE,	0,           	  0 },
    { "DD",	    1,    	   DD,         DD_RULE,	 	0,	      	  0 },
    { "DIR",	    1,     	   DIR,	       DIR_RULE,	0,	     	  0 },
    { "DL",	    1,    	   DL,	       DL_RULE,         0,	      	  0 },
    { "DT",	    1,    	   DT,	       DT_RULE,	 	0,	     	  0 },
    { "EM",	    1,    	   EM,	       EM_RULE,		0,           	  0 },
    { "FONT",	    1,      	   FONT,       FONT_RULE,	Font_Anchors,     MAX_FONT_ANCHORS },
    { "FORM",	    1,      	   FORM,       FORM_RULE,	Form_Anchors,     MAX_FORM_ANCHORS },
    { "H1",	    1,    	   H1,	       H1_RULE,	 	0,	      	  0 },
    { "H2",	    1,    	   H2,	       H2_RULE,	 	0,	      	  0 },
    { "H3",	    1,    	   H3,	       H3_RULE,	 	0,	      	  0 },
    { "H4",	    1,             H4,	       H4_RULE,	 	0,	      	  0 },
    { "H5",	    1,    	   H5,	       H5_RULE,	 	0,	      	  0 },
    { "H6",	    1,    	   H6,	       H6_RULE,	 	0,	      	  0 },
    { "HR",	    0,   	   HR,         HR_RULE,         HR_Anchors,       MAX_HR_ANCHORS },
    { "I",	    1,             ITALIC,     ITALIC_RULE,	0,           	  0 },
    { "IMG",	    0,   	   IMG,	       IMG_RULE,	Img_Anchors,  	  MAX_IMG_ANCHORS },
    { "INPUT",	    0,   	   INPUT,      INPUT_RULE,      Input_Anchors,    MAX_INPUT_ANCHORS},
    { "KBD",	    1,     	   KBD,	       KBD_RULE,        0,           	  0 },
    { "LI",	    1,    	   LI,	       LI_RULE,	 	0,	     	  0 },
    { "MENU", 	    1,      	   MENU,       MENU_RULE,	0,           	  0 },
    { "OL",	    1,    	   OL,	       OL_RULE,	 	0,	     	  0 },
    { "OPTION",	    0,   	   OPTION,     OPTION_RULE,	Option_Anchors,   MAX_OPTION_ANCHORS},
    { "P",	    1,             P,	       P_RULE,		0,	      	  0 },
    { "PRE",	    1,     	   PRE,        PRE_RULE,        0,	      	  0 },
    { "SAMP",	    1,      	   SAMP,       SAMP_RULE,	0,           	  0 },
    { "SELECT",	    1,        	   SELECT,     SELECT_RULE,     Select_Anchors,   MAX_SELECT_ANCHORS},
    { "STRONG",	    1,        	   STRONG,     STRONG_RULE,	0,           	  0 },
#ifdef TABLE_SUPPORT
    { "TABLE",      1,             TABLE,      0,               Table_Anchors,    MAX_TABLE_ANCHORS },
    { "TD",         1,             TD,         0,               Cell_Anchors,     MAX_CELL_ANCHORS },
#endif
    { "TEXTAREA",   1,             TEXTAREA,   TEXTAREA_RULE,	Textarea_Anchors, MAX_TEXTAREA_ANCHORS },
#ifdef TABLE_SUPPORT
    { "TH",         1,             TH,         0,               Cell_Anchors,     MAX_CELL_ANCHORS },
    { "TR",         1,             TR,         0,               Tr_Anchors,       MAX_TR_ANCHORS },
#endif
    { "TT",	    1,    	   TT,	       TT_RULE,		0,           	  0 },
    { "UL",	    1,    	   UL,	       UL_RULE,	 	0,	     	  0 },
    { "VAR",	    1,     	   VAR,	       VAR_RULE,	0,           	  0 },
    { "XMP",	    1,     	   PRE,        PRE_RULE,        0,	      	  0 },
   };

#ifdef FRAMESUPPORT
Tag Frameset_Tags[] = {
   { "FRAME",      1, 	           FRAME,     FRAME_RULE,       Frame_Anchors,    MAX_FRAME_ANCHORS },
};
int MAX_FRAMESET_TAGS = SizeOfArray (Frameset_Tags); //(sizeof Frameset_Tags/sizeof(Tag));

#endif

Tag Document_Tags[] = {
    { "!DOCTYPE",  0,      0,    		0,	    	0,            0 },
/* This next one is needed to keep things tidy :) */
    { "/HTML",     0,      0,    		0,	    	0,            0 },
    { "BODY",      1,      TYPE_BODY, 		BODY_RULE, 	Body_Anchors, MAX_BODY_ANCHORS },
#ifdef FRAMESUPPORT
    { "FRAMESET",  1,      TYPE_FRAMESET, 	FRAMESET_RULE,	Frameset_Anchors, MAX_FRAMESET_ANCHORS },
#endif
    { "HEAD",      1,      TYPE_HEAD, 		HEAD_RULE, 	0,            0 },
    { "HTML",      0,  	   0,    		0,	    	0,		  0 },
//    { "NOFRAMES",      1,      TYPE_BODY, 		BODY_RULE, 	Body_Anchors, MAX_BODY_ANCHORS },
    { "NOFRAMES",      1,      TYPE_NOFRAMES, 		BODY_RULE, 	      0,      0 },
    };

int MAX_DOC_TAGS = SizeOfArray (Document_Tags); //(sizeof Document_Tags/sizeof(Tag));

#endif /* __html2_h__ */
@


1.1.2.2
log
@Spacing rules drastically improved. Major error in memory context handling
fixed. Bug in __html_strip_lf fixed.
@
text
@d19 1
a19 5
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/html2,v $
 *
 * $Log: html2,v $
 * Revision 1.1.2.1  1997/04/08 10:27:02  kbracey
 * Initial revision
d21 1
d37 1
a37 5
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/html2,v $
 *
 * $Log: html2,v $
 * Revision 1.1.2.1  1997/04/08 10:27:02  kbracey
 * Initial revision
d39 1
d65 2
d68 1
a68 1
static const Anchor A_Anchors[] = {
d80 1
a80 1
static const Anchor Img_Anchors[] = {
d92 1
a92 1
static const Anchor Link_Anchors[] = {
d102 1
a102 1
static const Anchor Body_Anchors[] = {
d112 1
a112 1
static const Anchor HR_Anchors[] = {
d120 1
a120 1
static const Anchor Base_Anchors[] = {
d126 1
a126 1
static const Anchor Form_Anchors[] = {
d134 1
a134 1
static const Anchor Input_Anchors[] = {
d145 1
a145 1
static const Anchor Select_Anchors[] = {
d152 1
a152 1
static const Anchor Option_Anchors[] = {
d158 1
a158 1
static const Anchor Textarea_Anchors[] = {
d165 1
a165 1
static const Anchor Table_Anchors[] = {
d171 1
a171 1
static const Anchor Basefont_Anchors[] = {
d176 1
a176 1
static const Anchor Font_Anchors[] = {
d183 1
a183 1
static const Anchor Tr_Anchors[] = {
d189 1
a189 1
static const Anchor Cell_Anchors[] = {
d197 1
a197 1
static const Anchor Frameset_Anchors[] = {
d208 1
a208 1
static const Anchor Frame_Anchors[] = {
d225 1
a225 1
const Tag Null_Tag={NULL,0,0,0,0,0};
d228 1
a228 1
const Tag Head_Tags[] = {
d242 1
a242 1
const Tag Body_Tags[] = {
d244 3
a246 3
    { "A",          1,             A,          A_RULE,          A_Anchors,        MAX_A_ANCHORS,        0, 0 },
    { "ADDRESS",    1,             ADDRESS,    ADDRESS_RULE,	0,           	  0,                    0, 0 },
    { "B",	    1,             BOLD,       BOLD_RULE,	0,           	  0,                    0, 0 },
d248 34
a281 34
    { "BASEFONT",   0,             FONT,       BASEFONT_RULE,   Basefont_Anchors, MAX_BASEFONT_ANCHORS, 0, 0 },
    { "BLOCKQUOTE", 1,             BLOCKQUOTE, BLOCKQUOTE_RULE, 0,	     	  0,                    1, 1 },
    { "BR",	    0,             BR,         BR_RULE,         0,	      	  0,                    1, 1 },
    { "CENTER",     1,             CENTER,     BODY_RULE,   	0,           	  0,                    1, 1 },
    { "CENTRE",     1,             CENTER,     BODY_RULE,       0,           	  0,                    1, 1 },
    { "CITE",	    1,             CITE,       CITE_RULE,	0,           	  0,                    0, 0 },
    { "CODE",	    1,      	   CODE,       CODE_RULE,	0,           	  0,                    0, 0 },
    { "DD",	    1,    	   DD,         DD_RULE,	 	0,	      	  0,                    1, 1 },
    { "DIR",	    1,     	   DIR,	       DIR_RULE,	0,	     	  0,                    1, 1 },
    { "DL",	    1,    	   DL,	       DL_RULE,         0,	      	  0,                    1, 1 },
    { "DT",	    1,    	   DT,	       DT_RULE,	 	0,	     	  0,                    1, 1 },
    { "EM",	    1,    	   EM,	       EM_RULE,		0,           	  0,                    0, 0 },
    { "FONT",	    1,      	   FONT,       FONT_RULE,	Font_Anchors,     MAX_FONT_ANCHORS,     0, 0 },
    { "FORM",	    1,      	   FORM,       FORM_RULE,	Form_Anchors,     MAX_FORM_ANCHORS,     0, 0 },
    { "H1",	    1,    	   H1,	       H1_RULE,	 	0,	      	  0,                    1, 1 },
    { "H2",	    1,    	   H2,	       H2_RULE,	 	0,	      	  0,                    1, 1 },
    { "H3",	    1,    	   H3,	       H3_RULE,	 	0,	      	  0,                    1, 1 },
    { "H4",	    1,             H4,	       H4_RULE,	 	0,	      	  0,                    1, 1 },
    { "H5",	    1,    	   H5,	       H5_RULE,	 	0,	      	  0,                    1, 1 },
    { "H6",	    1,    	   H6,	       H6_RULE,	 	0,	      	  0,                    1, 1 },
    { "HR",	    0,   	   HR,         HR_RULE,         HR_Anchors,       MAX_HR_ANCHORS,       1, 1 },
    { "I",	    1,             ITALIC,     ITALIC_RULE,	0,           	  0,                    0, 0 },
    { "IMG",	    0,   	   IMG,	       IMG_RULE,	Img_Anchors,  	  MAX_IMG_ANCHORS,      0, 0 },
    { "INPUT",	    0,   	   INPUT,      INPUT_RULE,      Input_Anchors,    MAX_INPUT_ANCHORS,    0, 0 },
    { "KBD",	    1,     	   KBD,	       KBD_RULE,        0,           	  0,                    0, 0 },
    { "LI",	    1,    	   LI,	       LI_RULE,	 	0,	     	  0,                    1, 1 },
    { "MENU", 	    1,      	   MENU,       MENU_RULE,	0,           	  0,                    0, 0 },
    { "OL",	    1,    	   OL,	       OL_RULE,	 	0,	     	  0,                    1, 1 },
    { "OPTION",	    0,   	   OPTION,     OPTION_RULE,	Option_Anchors,   MAX_OPTION_ANCHORS,   1, 0 },
    { "P",	    1,             P,	       P_RULE,		0,	      	  0,                    1, 1 },
    { "PRE",	    1,     	   PRE,        PRE_RULE,        0,	      	  0,                    1, 1 },
    { "SAMP",	    1,      	   SAMP,       SAMP_RULE,	0,           	  0,                    0, 0 },
    { "SELECT",	    1,        	   SELECT,     SELECT_RULE,     Select_Anchors,   MAX_SELECT_ANCHORS,   0, 0 },
    { "STRONG",	    1,        	   STRONG,     STRONG_RULE,	0,           	  0,                    0, 0 },
d283 2
a284 2
    { "TABLE",      1,             TABLE,      0,               Table_Anchors,    MAX_TABLE_ANCHORS,    1, 1 },
    { "TD",         1,             TD,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     0, 0 },
d286 1
a286 1
    { "TEXTAREA",   1,             TEXTAREA,   TEXTAREA_RULE,	Textarea_Anchors, MAX_TEXTAREA_ANCHORS, 0, 0 },
d288 2
a289 2
    { "TH",         1,             TH,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     0, 0 },
    { "TR",         1,             TR,         0,               Tr_Anchors,       MAX_TR_ANCHORS,       1, 1 },
d291 4
a294 4
    { "TT",	    1,    	   TT,	       TT_RULE,		0,           	  0,                    0, 0 },
    { "UL",	    1,    	   UL,	       UL_RULE,	 	0,	     	  0,                    0, 0 },
    { "VAR",	    1,     	   VAR,	       VAR_RULE,	0,           	  0,                    0, 0 },
    { "XMP",	    1,     	   PRE,        PRE_RULE,        0,	      	  0,                    1, 1 },
d297 3
a299 3
#ifdef FRAMESUPPORT
const Tag Frameset_Tags[] = {
   { "FRAME",       0, 	           FRAME,     FRAME_RULE,       Frame_Anchors,    MAX_FRAME_ANCHORS,    0, 0 },
d305 2
a306 2
const Tag Document_Tags[] = {
    { "!DOCTYPE",  0,      0,    		0,	    	0,            0,                        0, 0 },
d308 4
a311 4
    { "/HTML",     0,      0,    		0,	    	0,            0,                        0, 0 },
    { "BODY",      1,      TYPE_BODY, 		BODY_RULE, 	Body_Anchors, MAX_BODY_ANCHORS,         1, 1 },
#ifdef FRAMESUPPORT
    { "FRAMESET",  1,      TYPE_FRAMESET, 	FRAMESET_RULE,	Frameset_Anchors, MAX_FRAMESET_ANCHORS, 1, 1 },
d313 2
a314 2
    { "HEAD",      1,      TYPE_HEAD, 		HEAD_RULE, 	0,            0,                        1, 1 },
    { "HTML",      0,  	   0,    		0,	    	0,		  0,                    1, 1 },
d316 1
a316 1
    { "NOFRAMES",      1,      TYPE_NOFRAMES, 		BODY_RULE, 	      0,      0,                1, 1 },
@


1.1.2.3
log
@Added in Tony Cheal's table code. Various other bug fixes.
@
text
@a21 4
 * Revision 1.1.2.2  1997/04/09 16:44:42  kbracey
 * Spacing rules drastically improved. Major error in memory context handling
 * fixed. Bug in __html_strip_lf fixed.
 *
a42 4
 * Revision 1.1.2.2  1997/04/09 16:44:42  kbracey
 * Spacing rules drastically improved. Major error in memory context handling
 * fixed. Bug in __html_strip_lf fixed.
 *
d168 1
d170 2
a171 6
        { "ALIGN",              ALIGN,       ALIGN_RULE       },
        { "BORDER",    		BORDER,      ROWS_RULE        },
        { "CELLPADDING",        CELLPADDING, CELLPADDING_RULE },
        { "CELLSPACING",        CELLSPACING, CELLSPACING_RULE },
        { "COLS",               COLS,        COLS_RULE        },
        { "WIDTH",     		TABLEWIDTH,  TABLEWIDTH_RULE  },
a172 1
#define MAX_TABLE_ANCHORS (SizeOfArray(Table_Anchors))
d192 1
d194 4
a197 10
        { "ALIGN",     		ALIGN,      ALIGN_RULE   },
	{ "BACKGROUND",    	SRC,        SRC_RULE },
	{ "BGCOLOR",       	BGCOL,      SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,      SRC_RULE },
        { "COLSPAN",   		COLSPAN,    COLSPAN_RULE },
        { "HEIGHT",             CELLHEIGHT, HEIGHT_RULE  },
        { "NOWRAP",             NOWRAP,     NOWRAP_RULE  },
        { "ROWSPAN",   		ROWSPAN,    ROWSPAN_RULE },
        { "VALIGN",    		VALIGN,     VALIGN_RULE  },
        { "WIDTH",              CELLWIDTH,  WIDTH_RULE   },
a198 1
#define MAX_CELL_ANCHORS (SizeOfArray(Cell_Anchors))
d241 5
a289 4
#ifdef TonyTables
    { "TABLE",      1,             TABLE,      0,               Table_Anchors,    MAX_TABLE_ANCHORS,    1, 1 },
    { "TD",         1,             TD,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     1, 1 },
#endif
a294 4
#ifdef TonyTables
    { "TH",         1,             TH,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     0, 0 },
    { "TR",         1,             TR,         0,               Tr_Anchors,       MAX_TR_ANCHORS,       1, 1 },
#endif
a299 2

int MAX_BODY_TAGS = SizeOfArray(Body_Tags);
@
