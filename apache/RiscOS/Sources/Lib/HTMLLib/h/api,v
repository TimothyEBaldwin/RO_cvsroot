head	1.11;
access;
symbols
	HTMLLib-0_04:1.11
	HTMLLib-0_03:1.11
	HTMLLib-0_02:1.11
	HTMLLib-0_01:1.10
	ahodgkin_207release:1.9
	ahodgkin_206release:1.7
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	ahodgkin_133beta:1.2.2.23
	kbracey_126:1.2.2.21
	kbracey_AW97patch:1.2.2.20
	ahodgkin_AW97:1.2.2.20
	kbracey_PreGordon:1.2.2.1
	Web_bp:1.2
	Web:1.2.0.2
	ARTtmp_merge:1.1.2.2
	ARTtmp:1.1.0.2;
locks; strict;
comment	@# @;


1.11
date	2006.03.13.21.10.18;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.13.13.10.38;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	98.09.10.15.54.03;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	98.08.07.16.11.46;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.07.01.08.40.39;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.06.16.15.36.34;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	98.05.27.15.30.48;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	98.05.07.15.03.50;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	98.02.17.10.42.26;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.04.29.15.50.54;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.08.10.26.56;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.2.2.1
date	97.05.30.10.03.14;	author kbracey;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	97.06.03.12.50.16;	author kbracey;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	97.07.10.12.41.15;	author blaughto;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	97.07.24.16.20.59;	author kbracey;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	97.07.24.16.56.27;	author kbracey;	state Exp;
branches;
next	1.2.2.6;

1.2.2.6
date	97.07.25.10.01.23;	author kbracey;	state Exp;
branches;
next	1.2.2.7;

1.2.2.7
date	97.07.30.12.09.32;	author kbracey;	state Exp;
branches;
next	1.2.2.8;

1.2.2.8
date	97.07.31.13.30.04;	author ahodgkin;	state Exp;
branches;
next	1.2.2.9;

1.2.2.9
date	97.08.01.09.00.04;	author kbracey;	state Exp;
branches;
next	1.2.2.10;

1.2.2.10
date	97.08.01.15.06.37;	author kbracey;	state Exp;
branches;
next	1.2.2.11;

1.2.2.11
date	97.08.05.16.10.28;	author ahodgkin;	state Exp;
branches;
next	1.2.2.12;

1.2.2.12
date	97.08.06.14.28.18;	author ahodgkin;	state Exp;
branches;
next	1.2.2.13;

1.2.2.13
date	97.08.12.16.24.28;	author kbracey;	state Exp;
branches;
next	1.2.2.14;

1.2.2.14
date	97.09.18.14.12.51;	author kbracey;	state Exp;
branches;
next	1.2.2.15;

1.2.2.15
date	97.09.25.16.50.39;	author ahodgkin;	state Exp;
branches;
next	1.2.2.16;

1.2.2.16
date	97.10.07.09.56.25;	author ahodgkin;	state Exp;
branches;
next	1.2.2.17;

1.2.2.17
date	97.10.08.12.34.04;	author kbracey;	state Exp;
branches;
next	1.2.2.18;

1.2.2.18
date	97.10.08.12.43.54;	author kbracey;	state Exp;
branches;
next	1.2.2.19;

1.2.2.19
date	97.10.13.10.01.27;	author kbracey;	state Exp;
branches;
next	1.2.2.20;

1.2.2.20
date	97.10.14.13.41.14;	author kbracey;	state Exp;
branches;
next	1.2.2.21;

1.2.2.21
date	97.10.27.18.21.49;	author kbracey;	state Exp;
branches;
next	1.2.2.22;

1.2.2.22
date	97.11.14.15.43.19;	author kbracey;	state Exp;
branches;
next	1.2.2.23;

1.2.2.23
date	98.02.16.11.45.03;	author ahodgkin;	state Exp;
branches;
next	;

1.1.2.1
date	97.04.08.10.26.57;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.04.28.14.20.23;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.11
log
@  New build variants; minor API tweaks; const/restrict additions.
Detail:
  Builds Unicode versions as well as non-Unicode versions now, and
  exports them. Required by March 2006 era Browse sources. API tweaks
  including filling in more info fields with border widths. Tightened
  up use of const/restrict in various interfaces.
Admin:
  Tested under Browse, new facilities work as expected. Builds all
  four variants (non-Unicode/Unicode, application/module) from clean
  and returns to clean state with !MkClean.

Version 0.02. Tagged as 'HTMLLib-0_02'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file contains the definitions of the API for using the HTML2
 * parser libraries.
 */

#ifndef __html2_parser_api_
#define __html2_parser_api_

/*
 * This file includes a number of other files. See these for comments
 * on their content. You will need them _all_ in your include path
 * when compiling with the HTMLlib object file.
 */

#include "html2_ext.h"  /* All the HTML 2 tags  */
#include "tags.h"       /* All the tag #defines */
#include "struct.h"     /* The structures used  */

/* Function calls provided. */

/*
 * Initialise the HTML library. *MUST* be called before any other routines
 * in the library.
 */
extern void HtmlInit(void);

/*
 * Obtain the VersionNum details for this library. The string
 * returned is private to HTMLLib.
 */

extern const char *HtmlVersion(void);

/*
 * HtmlParse() is used to initialise the HTML parser for a document
 * to be parsed (the document need not actually be present). The
 * arguments passed in are:
 *
 *   (char *) url      - The full URL of the page to be parsed so
 *                       relative links may be established within the
 *                       document.
 *   (int) length      - The total length of the document (if known).
 *                       This is used oven the chunk size argument for
 *                       hourglass % calculation if it is non-zero.
 *   (int) type        - The type as defined in the return value from
 *                       HtmlIdentify. Typically this is 1 for HTML
 *                       and 2 for plain text (this ensure plain text
 *                       is PRE-formatted)
 *   (int) frames      - If the front end is displaying frames, this
 *                       should equal 1. This will suppress NOFRAMES
 *                       data. Otherwise set to 0.
 *   (int) objects     - If objects should be parsed, 1, else 0.
 *   (int) tables      - If tables should be parsed, 1, else 0.
 *   (int) scripts     - If scripts should be parsed, 1 (<noscript>
 *                       container contents will be ignored), else 0
 *                       (<script> contents ignored, <noscript>
 *                       contents parsed).
 *   (int) encoding    - The identifier of the encoding in use.
 *   (enco...)priority - The priority of that encoding choice.
 */
extern void *HtmlParse(char *url, int length, int type, int frames, int objects, int tables,
                       int scripts, int encoding, encoding_priority priority);

/*
 * HtmlGetStream() attempts to parse the next chunk of document in
 * the context of a previous document, or context created by HtmlParse().
 * The arguments passed in are:
 *
 *   (void *) streamtok - The context to parse in (provided from
 *                        HTMLParse()).
 *   (char **) document - A pointer to a pointer to the start of the
 *                        complete document (NOT the chunk to be
 *                        added).  As yet non-contiguous chunks are
 *                        not supported
 *   (int) size         - size of the chunk added.
 *   (int *) flags      - output destintation for reported flags
 *
 * The HStream returned is either
 *
 *    a) NULL if no new tokens are produced
 *    b) the first new token produced (if we weren't in a table to start with)
 * or c) the top level table token in which we started (in which case the
 *       HTML_GOT_MORE_IN_A_TABLE flag will be set).
 * flags are:
 */

#define HTML_GOT_MORE_IN_A_TABLE 1u

extern HStream *HtmlGetStream(void *streamtok, char **document, int size, unsigned int *flags);

/*
 * Specify a routine to be called when a META tag changes the encoding.
 * The routine is called with the new encoding number as the first parameter,
 * and the supplied handle as the second parameter.
 */
extern void HtmlSetEncodingCallback(void *st, void (*cb) (int, void *), void *handle);

/*
 * Free all the structures involved in the parsing of a document,
 * but not the actual generated token stream, which is freed later
 * with HtmlStreamFree.
 */
extern void HtmlEndParse(void *stream);

/*
 * Given a pointer to a HTML stream, this call will free up all memory
 * associated with the stream.
 */
extern void HtmlStreamFree(void *stream);

/*
 * Given a pointer to the start of a data stream, and the amount of
 * data in the stream, HTTPStripHeaders returns the offset into the
 * stream at which the data segment starts assuming HTTP style headers
 */
extern int HttpStripHeaders(char *stream, size_t stream_len);

/*
 * Given a pointer to the head of the data stream, the amount of data
 * currently in the stream, and a boolean flag to say if all the data
 * has been retrieved (done = 1 for complete stream, 0 for not), this call
 * attempts to understand the HTTP headers at the start of the stream,
 * indicating if a redirect is needed (return val = 302 and url becomes
 * a pointer to a buffer containing where to go to), authentication is
 * required (return val = 401), or the filetype of the document
 * derived from either the HTTP headers or the body data. If the
 * result is unknown, 0 is returned. If the filetype is known and no
 * redirect is needed, 200 is returned. (Yes these do look like the HTTP
 * response codes dont they :)
 *
 * If it is an HTML or text file, an encoding number is returned in
 * *encoding - 0 if the encoding is not specified.
 *
 * For redirections, the first parameter is the base URL of the fetch.
 * This is for broken redirections where the server doesn't specify
 * a full URL, and relativisation is needed.
 *
 * The value passed back in can parse is as defined below:
 */

#define TYPE_UNKNOWN     0
#define TYPE_HTMLFILE    1
#define TYPE_TEXTFILE    2
#define TYPE_IMAGEFILE   3

extern unsigned int HtmlIdentify(char *base_url, char *stream,
                                 size_t stream_len, char done,
                                 char **url, int *file_type,
                                 int *canparse, int *encoding);

/*
 * The signature of a SCRIPT handler function (see below).
 */
typedef char *HtmlScriptHandler(void *stream, HStream *script_element, void *handle);

/*
 * Set a handler function up for dealing with SCRIPT elements the moment they are reached.
 * As soon as <SCRIPT>...</SCRIPT> has been found, the handler function will be called.
 * It is passed the stream handle, a pointer to an HStream describing the script and the
 * specified private handle. It can return an string pointer (which must be a pointer
 * to an object allocated with HtmlMalloc) giving data that is to be run through the parser
 * before it continues (as per JavaScript's "document.write" method).
 */

extern void HtmlSetScriptCallback(void *stream, HtmlScriptHandler handler, void *handle);

/*
 * The siugnature of a BASE handler function (see below).
 */

typedef void HtmlBaseHandler(void *stream, const char *href, const char *target, void *handle);

/*
 * Set a handler function up for dealing with BASE elements the moment they are reached.
 * If a client is interested in whether or not a BASE HREF or TARGET was set, they must
 * install this handler (the information cannot be recovered otherwise).
 *
 * The function will be called cumulatively - you may be called once with just the
 * HREF information, then again with both the HREF and TARGET. It depends on how the
 * HTML source is structured.
 */

extern void HtmlSetBaseCallback(void *stream, HtmlBaseHandler handler, void *handle);

/*
 * Given a MIME charset name (terminated by a character not valid in a MIME
 * charset name, so a direct pointer into the Content-Type header field will do),
 * this returns the encoding number (the Internet MIB coded value if assigned).
 * This number can be passed to HtmlParse(). If the name is unknown or
 * unsupported, 0 is returned.
 */
extern int HTTPEncodingNumberFromName(const char *name);

/*
 * Allocate memory associated with a stream - pass as parent a pointer to
 * a HStream or TableStream belonging to that stream. Then when HtmlStreamFree
 * is called, this block will be freed with it. The allocated memory is
 * zero-initialised.
 */
extern void * HtmlMalloc(size_t size, void *parent);

/*
 * Free a block allocated with HtmlMalloc.
 */
extern void HtmlFree(void *block);

/*
 * Given a base URL (eg http://www.acorn.co.uk/) and a possibly relative URL
 * as found in an href attribute (eg home.html), return the absolute URL
 * (eg http://www.acorn.co.uk/home.html). The returned string is in a buffer
 * allocated with HtmlMalloc, which will be discarded when HtmlStreamFree is
 * called. See HtmlMalloc for details of "parent". Don't forget to check for
 * NULL returns - memory is, alas, finite.
 */
extern char *HtmlRelativiseURL(const char * restrict base, const char * restrict link, const void * restrict parent);

/*
 * Return the memory context of an object allocated with HtmlMalloc. This
 * allows, for example, easy identification of objects that are part of a
 * wider collection of blocks that are to be freed with HtmlFree. If zero
 * is returned, the block was either not allocated with HtmlMalloc in the
 * first place or has since been freed (either way, the guard word on the
 * block is not what was expected).
 */
extern unsigned int HtmlReturnContext(void *block);

/*
 * Given an OBJECT token, insert its alternative HTML after it.
 * Returns a pointer to the token after the OBJECT, after any
 * insertion.
 */
extern HStream *HtmlReplaceOBJECT(HStream *object);

/*
 * Given a string holding a way of specifying a colour in HTML,
 * returns a RISC OS colour number (0xBBGGRR00). If the given
 * string is invalid or contains an unknown colour name, a
 * value of 1 (i.e. an answer not of the form '0xBBGGRR00')
 * will be returned.
 */
extern unsigned int HtmlParseColour(const char *colour);

/*
 * Now functions to check attributes applying to an element.
 *
 * Attributes specific to an element first. Conventions are:
 *
 * Function name is Html<ELEMENT><attribute>(HStream *h);
 * The function must be passed an HStream whose tag field is <ELEMENT>.
 * String returns are static, must not be modified, and can be relied upon until
 * HtmlStreamFree is called.
 * If a string attribute is not present, NULL is returned.
 * If a colour is not present, NULL_COLOUR is returned.
 */

extern const char   *HtmlBODYonload         (const HStream * restrict h);
extern const char   *HtmlBODYonunload       (const HStream * restrict h);
extern const char   *HtmlBODYbackground     (const HStream * restrict h);
extern unsigned int  HtmlBODYtext           (const HStream * restrict h);
extern unsigned int  HtmlBODYbgcolour       (const HStream * restrict h);
extern unsigned int  HtmlBODYlink           (const HStream * restrict h);
extern unsigned int  HtmlBODYvlink          (const HStream * restrict h);
extern unsigned int  HtmlBODYalink          (const HStream * restrict h);

extern const char   *HtmlMETAhttp_equiv     (const HStream * restrict h);
extern const char   *HtmlMETAname           (const HStream * restrict h);
extern const char   *HtmlMETAcontent        (const HStream * restrict h);
extern const char   *HtmlMETAscheme         (const HStream * restrict h);

extern const char   *HtmlFORMaction         (const HStream * restrict h);
extern formmethod    HtmlFORMmethod         (const HStream * restrict h);
extern const char   *HtmlFORMenctype        (const HStream * restrict h);
extern const char   *HtmlFORMaccept_charset (const HStream * restrict h);
extern const char   *HtmlFORMonreset        (const HStream * restrict h);
extern const char   *HtmlFORMonsubmit       (const HStream * restrict h);
extern const char   *HtmlFORMtarget         (const HStream * restrict h);

extern inputtype     HtmlINPUTtype          (const HStream * restrict h);
extern const char   *HtmlINPUTname          (const HStream * restrict h);
extern const char   *HtmlINPUTvalue         (const HStream * restrict h);
extern bool          HtmlINPUTchecked       (const HStream * restrict h);
extern bool          HtmlINPUTdisabled      (const HStream * restrict h);
extern bool          HtmlINPUTreadonly      (const HStream * restrict h);
extern unsigned int  HtmlINPUTsize          (const HStream * restrict h);
extern unsigned int  HtmlINPUTmaxlength     (const HStream * restrict h);
extern const char   *HtmlINPUTsrc           (const HStream * restrict h);
extern const char   *HtmlINPUTalt           (const HStream * restrict h);
extern const char   *HtmlINPUTusemap        (const HStream * restrict h);
extern imgalign      HtmlINPUTalign         (const HStream * restrict h);
extern int           HtmlINPUTtabindex      (const HStream * restrict h);
extern const char   *HtmlINPUTonfocus       (const HStream * restrict h);
extern const char   *HtmlINPUTonblur        (const HStream * restrict h);
extern const char   *HtmlINPUTonselect      (const HStream * restrict h);
extern const char   *HtmlINPUTonclick       (const HStream * restrict h);
extern const char   *HtmlINPUTonchange      (const HStream * restrict h);
extern const char   *HtmlINPUTaccept        (const HStream * restrict h);

extern const char   *HtmlSELECTname         (const HStream * restrict h);
extern unsigned int  HtmlSELECTsize         (const HStream * restrict h);
extern bool          HtmlSELECTmultiple     (const HStream * restrict h);
extern bool          HtmlSELECTdisabled     (const HStream * restrict h);
extern int           HtmlSELECTtabindex     (const HStream * restrict h);
extern const char   *HtmlSELECTonfocus      (const HStream * restrict h);
extern const char   *HtmlSELECTonblur       (const HStream * restrict h);
extern const char   *HtmlSELECTonselect     (const HStream * restrict h);
extern const char   *HtmlSELECTonclick      (const HStream * restrict h);
extern const char   *HtmlSELECTonchange     (const HStream * restrict h);
extern const int    *HtmlSELECToptions      (const HStream * restrict h);

extern bool          HtmlOBJECTdeclare      (const HStream * restrict h);
extern bool          HtmlOBJECTshapes       (const HStream * restrict h);
extern int           HtmlOBJECTtabindex     (const HStream * restrict h);
extern const char   *HtmlOBJECTtype         (const HStream * restrict h);
extern const char   *HtmlOBJECTusemap       (const HStream * restrict h);
extern int           HtmlOBJECTvspace       (const HStream * restrict h);
extern int           HtmlOBJECThspace       (const HStream * restrict h);
extern imgalign      HtmlOBJECTalign        (const HStream * restrict h);
extern const char   *HtmlOBJECTarchive      (const HStream * restrict h);
extern int           HtmlOBJECTborder       (const HStream * restrict h);
extern const char   *HtmlOBJECTclassid      (const HStream * restrict h);
extern const char   *HtmlOBJECTcodebase     (const HStream * restrict h);
extern const char   *HtmlOBJECTcodetype     (const HStream * restrict h);
extern const char   *HtmlOBJECTdata         (const HStream * restrict h);
extern const char   *HtmlOBJECTstandby      (const HStream * restrict h);
extern HStream      *HtmlOBJECTstream       (const HStream * restrict h);
extern HStream      *HtmlOBJECTmapstream    (const HStream * restrict h);
extern HStream      *HtmlOBJECTparent       (const HStream * restrict h);

extern const char   *HtmlPARAMname          (const HStream * restrict h);
extern const char   *HtmlPARAMtype          (const HStream * restrict h);
extern const char   *HtmlPARAMvalue         (const HStream * restrict h);
extern paramtype     HtmlPARAMvaluetype     (const HStream * restrict h);

#define HtmlIMGusemap(h)    HtmlOBJECTusemap(h)
#define HtmlIMGmapstream(h) HtmlOBJECTmapstream(h)
#define HtmlIMGvspace(h)    HtmlOBJECTvspace(h)
#define HtmlIMGhspace(h)    HtmlOBJECThspace(h)
#define HtmlIMGborder(h)    HtmlOBJECTborder(h)

/*
 * Attributes applying to more than one element
 */

extern const char   *HtmlELEMENTname        (const HStream * restrict h);
extern int           HtmlELEMENTtabindex    (const HStream * restrict h);
extern const char   *HtmlELEMENTonfocus     (const HStream * restrict h);
extern const char   *HtmlELEMENTonblur      (const HStream * restrict h);
extern const char   *HtmlELEMENTonselect    (const HStream * restrict h);
extern const char   *HtmlELEMENTonclick     (const HStream * restrict h);
extern const char   *HtmlELEMENTonchange    (const HStream * restrict h);

#endif /* __html2_parser_api_ */
@


1.10
log
@  Brought under srccommit control. Dependencies stripped on cleaning.
Detail:
  !MkClean now runs StripDepnd on the Makefile. VersionNum file is
  used to implement a new "HtmlVersion" call (which just returns the
  Module_HelpVersion string).
Admin:
  !MkClean tested. HtmlVersion call not tested.

Version 0.01. Tagged as 'HTMLLib-0_01'
@
text
@d229 1
a229 1
extern char *HtmlRelativiseURL(const char *base, const char *link, void *parent);
d270 77
a346 77
extern const char   *HtmlBODYonload         (HStream *h);
extern const char   *HtmlBODYonunload       (HStream *h);
extern const char   *HtmlBODYbackground     (HStream *h);
extern unsigned int  HtmlBODYtext           (HStream *h);
extern unsigned int  HtmlBODYbgcolour       (HStream *h);
extern unsigned int  HtmlBODYlink           (HStream *h);
extern unsigned int  HtmlBODYvlink          (HStream *h);
extern unsigned int  HtmlBODYalink          (HStream *h);

extern const char   *HtmlMETAhttp_equiv     (HStream *h);
extern const char   *HtmlMETAname           (HStream *h);
extern const char   *HtmlMETAcontent        (HStream *h);
extern const char   *HtmlMETAscheme         (HStream *h);

extern const char   *HtmlFORMaction         (HStream *h);
extern formmethod    HtmlFORMmethod         (HStream *h);
extern const char   *HtmlFORMenctype        (HStream *h);
extern const char   *HtmlFORMaccept_charset (HStream *h);
extern const char   *HtmlFORMonreset        (HStream *h);
extern const char   *HtmlFORMonsubmit       (HStream *h);
extern const char   *HtmlFORMtarget         (HStream *h);

extern inputtype     HtmlINPUTtype          (HStream *h);
extern const char   *HtmlINPUTname          (HStream *h);
extern const char   *HtmlINPUTvalue         (HStream *h);
extern bool          HtmlINPUTchecked       (HStream *h);
extern bool          HtmlINPUTdisabled      (HStream *h);
extern bool          HtmlINPUTreadonly      (HStream *h);
extern unsigned int  HtmlINPUTsize          (HStream *h);
extern unsigned int  HtmlINPUTmaxlength     (HStream *h);
extern const char   *HtmlINPUTsrc           (HStream *h);
extern const char   *HtmlINPUTalt           (HStream *h);
extern const char   *HtmlINPUTusemap        (HStream *h);
extern imgalign      HtmlINPUTalign         (HStream *h);
extern int           HtmlINPUTtabindex      (HStream *h);
extern const char   *HtmlINPUTonfocus       (HStream *h);
extern const char   *HtmlINPUTonblur        (HStream *h);
extern const char   *HtmlINPUTonselect      (HStream *h);
extern const char   *HtmlINPUTonclick       (HStream *h);
extern const char   *HtmlINPUTonchange      (HStream *h);
extern const char   *HtmlINPUTaccept        (HStream *h);

extern const char   *HtmlSELECTname         (HStream *h);
extern unsigned int  HtmlSELECTsize         (HStream *h);
extern bool          HtmlSELECTmultiple     (HStream *h);
extern bool          HtmlSELECTdisabled     (HStream *h);
extern int           HtmlSELECTtabindex     (HStream *h);
extern const char   *HtmlSELECTonfocus      (HStream *h);
extern const char   *HtmlSELECTonblur       (HStream *h);
extern const char   *HtmlSELECTonselect     (HStream *h);
extern const char   *HtmlSELECTonclick      (HStream *h);
extern const char   *HtmlSELECTonchange     (HStream *h);
extern const int    *HtmlSELECToptions      (HStream *h);

extern bool          HtmlOBJECTdeclare      (HStream *h);
extern bool          HtmlOBJECTshapes       (HStream *h);
extern int           HtmlOBJECTtabindex     (HStream *h);
extern const char   *HtmlOBJECTtype         (HStream *h);
extern const char   *HtmlOBJECTusemap       (HStream *h);
extern int           HtmlOBJECTvspace       (HStream *h);
extern int           HtmlOBJECThspace       (HStream *h);
extern imgalign      HtmlOBJECTalign        (HStream *h);
extern const char   *HtmlOBJECTarchive      (HStream *h);
extern int           HtmlOBJECTborder       (HStream *h);
extern const char   *HtmlOBJECTclassid      (HStream *h);
extern const char   *HtmlOBJECTcodebase     (HStream *h);
extern const char   *HtmlOBJECTcodetype     (HStream *h);
extern const char   *HtmlOBJECTdata         (HStream *h);
extern const char   *HtmlOBJECTstandby      (HStream *h);
extern HStream      *HtmlOBJECTstream       (HStream *h);
extern HStream      *HtmlOBJECTmapstream    (HStream *h);
extern HStream      *HtmlOBJECTparent       (HStream *h);

extern const char   *HtmlPARAMname          (HStream *h);
extern const char   *HtmlPARAMtype          (HStream *h);
extern const char   *HtmlPARAMvalue         (HStream *h);
extern paramtype     HtmlPARAMvaluetype     (HStream *h);
d348 1
a348 1
#define HtmlIMGusemap(h) HtmlOBJECTusemap(h)
d350 3
d358 7
a364 7
extern const char   *HtmlELEMENTname        (HStream *h);
extern int           HtmlELEMENTtabindex    (HStream *h);
extern const char   *HtmlELEMENTonfocus     (HStream *h);
extern const char   *HtmlELEMENTonblur      (HStream *h);
extern const char   *HtmlELEMENTonselect    (HStream *h);
extern const char   *HtmlELEMENTonclick     (HStream *h);
extern const char   *HtmlELEMENTonchange    (HStream *h);
@


1.9
log
@Euro sign mapping added to display.c's ISO10646 -> Acorn Extended Latin-1
transformation table. HtmlParse can be told whether or not it supports
JavaScript (if so, script callback function is called and <NOSCRIPT> contents
are ignored; else script callback function is not called and <NOSCRIPT> is
parsed, with <SCRIPT> contents just passed through). In veneers.c, names of
parameters to HtmlParse changed to match those in api.h.
@
text
@d42 7
@


1.8
log
@Added externally visible function HtmlParseColour, which maps to
__html_convcol internally. Extended API to the latter so that it
either does the "return random colour if I don't understand the
string" trick, or returns a value telling the caller it didn't
know what was going on. Needed all of this for JavaScript support
in Browse.
@
text
@d61 4
d69 1
a69 1
                       int encoding, encoding_priority priority);
@


1.7
log
@The sequence <option value=""> followed by a comment would lead to some
characters from zero page being spat out as menu entries; the browser
then failed with "Illegal character in font string" when it tried to do
things with those entries. NULL values in [HStream]->text are now
correctly checked for and dealt with in __html_form_parse_select().
@
text
@a210 6
 * Free all blocks allocated with HtmlMalloc in the same context as the
 * block given.
 */
extern void HtmlFreeAll(void *block);

/*
d236 9
@


1.6
log
@Multiple text tags inside one <OPTION> container are "glued together",
so HTML such as '<OPTION>Some <I>italicised</I> entries' will generate
meaningful menu entries.

<PRE> and <Hn> elements now cancel <P ALIN="...">, whereas they did
not before. This is special-cased for those elements, based on the
code already in place for <DIV>.
@
text
@d294 1
d306 1
d346 1
@


1.5
log
@Added calls to examine BASE element easily
@
text
@d171 18
a241 12

/*
 * Functions to return the values set by BASE HREF= and BASE TARGET=
 *
 * If no BASE HREF has been seen, the value will be the url specified
 * in the HtmlParse call. If no BASE TARGET has been seen, then a NULL
 * pointer will be returned.
 *
 * Strings returned should be copied away before the next call to HTMLLib.
 */
extern const char *HtmlDocumentBASEhref(void *stream);
extern const char *HtmlDocumentBASEtarget(void *stream);
@


1.4
log
@Removed unused function HTTPEscapeString.
Added SCRIPT element callback function with provision for source insertion.
@
text
@d226 12
@


1.3
log
@Web branch merged
@
text
@d155 1
a155 3
 * When returning data to a server, it is necessary to encode it in the
 * right way. This function call encodes the input string in this way,
 * returning the string to send (and not modifying the input string).
d157 12
a168 1
extern char *HTTPEscapeString(char *string);
d177 1
a177 1
int HTTPEncodingNumberFromName(const char *name);
@


1.2
log
@Merged in ARTtmp_merge
@
text
@a14 54
/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/api,v $
 *
 * $Log: api,v $
 * Revision 1.1.2.2  1997/04/28 14:20:23  kbracey
 * Added in Tony Cheal's table code. Various other bug fixes.
 *
 * Revision 1.1.2.1  1997/04/08 10:26:57  kbracey
 * Initial revision
 *
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * Copyright (C) Acorn Computers Ltd.  1995
 *
 * $Version: networking $
 *
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/api,v $
 *
 * $Log: api,v $
 * Revision 1.1.2.2  1997/04/28 14:20:23  kbracey
 * Added in Tony Cheal's table code. Various other bug fixes.
 *
 * Revision 1.1.2.1  1997/04/08 10:26:57  kbracey
 * Initial revision
 *
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 * Revision 1.3  95/09/14  12:39:09  pwain
 * Comments, restructuring and bits.
 *
 * Revision 1.2  95/09/11  13:14:00  pwain
 * Fixes. The calls into __html_stream_free were typcasting a HStream to
 * type HTML, causing memory to be corrupted.
 *
 * Revision 1.1  95/09/08  10:06:13  pwain
 * Initial revision
 *
 *
 */

d19 1
d28 4
a31 3
#include "html2_ext.h"	/* All the HTML 2 tags  */
#include "tags.h"	/* All the tag #defines */
#include "struct.h"	/* The structures used  */
d35 8
a42 2
extern void *HtmlParse(char *url, int length, int type, int usingframes);
/* HtmlParse() is used to initialise the HTML parser for a document
d46 17
a62 13
 *   (char *) url     - The full URL of the page to be parsed so
 *   	      	      	relative links may be established within the
 *		        document.
 *   (int) length     - The total length of the document (if known).
 *   	   	        This is used oven the chunk size argument for
 *			hourglass % calculation if it is non-zero.
 *   (int) type	      - The type as defined in the return value from
 *   	   	        HtmlIdentify. Typically this is 1 for HTML
 *			and 2 for plain text (this ensure plain text
 *   	   	        is PRE-formatted)
 *   (int) usingframes- If the front end is displaying frames, this
 *                      should equal 1. This will suppress NOFRAMES
 *                      data. Otherwise set to 0.
d64 5
a68 2
extern HStream *HtmlGetStream(void *streamtok, char **document, int size, unsigned int *flags);
/* HtmlGetStream() attempts to parse the next chunk of document in
d73 1
a73 1
 *   	      		  HTMLParse()).
d75 3
a77 3
 *   	       		  complete document (NOT the chunk to be
 *			  added).  As yet non-contiguous chunks are
 *			  not supported
d81 6
a88 3
#define HTML_GOT_MORE_TABLE    1
#define HTML_GOT_MORE_HSTREAMS 2
#define HTML_GOT_MORE (HTML_GOT_MORE_TABLE | HTML_GOT_MORE_HSTREAMS)
d90 17
d108 2
a109 2
extern void HtmlStreamFree(void *stream);
/* Given a pointer to a HTML stream, this call will free up all memory
d112 4
a115 2
extern int HttpStripHeaders(char *stream, size_t stream_len);
/* Given a pointer to the start of a data stream, and the amount of
d119 4
a122 4
extern unsigned int HtmlIdentify(char *stream, size_t stream_len, char done,
       		    		      char **url, int *file_type,
       		    		      int *canparse);
/* Given a pointer to the head of the data stream, the amount of data
d134 7
d143 1
d149 5
d155 3
d160 150
a309 3
/* When returning data to a server, it is necessary to encode it in the
 * right way. This function call encodes the input string in this way,
 * returning the string to send (and not modifying the input string).
d311 8
@


1.2.2.1
log
@Added HtmlMalloc and HtmlFree client calls
@
text
@d15 54
a163 11
 */

extern void *HtmlMalloc(size_t size, void *parent);
/* Allocate memory associated with a stream - pass as parent a pointer to
 * a HStream or TableStream belonging to that stream. Then when HtmlStreamFree
 * is called, this block will be freed with it. The allocated memory is
 * zero-initialised.
 */

extern void HtmlFree(void *block);
/* Free a block allocated with HtmlMalloc
@


1.2.2.2
log
@First attempt at "more HStreams have come in" flag and getting previous
pointers to work in tables. Various fiddles by GThorburn.
@
text
@d68 3
a70 1
#define HTML_GOT_MORE 1u
@


1.2.2.3
log
@Added HtmlInit function to explicitly initialse some static data so that a variant suitable for use by modules can be made
@
text
@a119 5

extern void HtmlInit(void);
/* Initialise the HTML library.  *MUST* be called before any other routines
 * in the library.
 */
@


1.2.2.4
log
@Totally redesigned attribute parsing code.
Started new API for accessing attributes - only implemented for BODY.
Added <BODY alink onload onunload> support.
@
text
@a124 23

/*
 * Now functions to check attributes applying to an element.
 *
 * Attributes specific to an element first. Conventions are:
 *
 * Function name is Html<ELEMENT><attribute>(HStream *h);
 * The function must be passed an HStream whose tag field is <ELEMENT>.
 * String returns are static, must not be modified, and can be relied upon until
 * HtmlStreamFree is called.
 * If a string attribute is not present, NULL is returned.
 * If a colour is not present, NULL_COLOUR is returned.
 */

extern  const char *HtmlBODYonload(HStream *h);
extern  const char *HtmlBODYonunload(HStream *h);
extern  const char *HtmlBODYbackground(HStream *h);
extern unsigned int HtmlBODYtext(HStream *h);
extern unsigned int HtmlBODYbgcolour(HStream *h);
extern unsigned int HtmlBODYlink(HStream *h);
extern unsigned int HtmlBODYvlink(HStream *h);
extern unsigned int HtmlBODYalink(HStream *h);

@


1.2.2.5
log
@Added META support
@
text
@a147 5
extern  const char *HtmlMETAname(HStream *h);
extern  const char *HtmlMETAhttp_equiv(HStream *h);
extern  const char *HtmlMETAcontent(HStream *h);
extern  const char *HtmlMETAscheme(HStream *h);

@


1.2.2.6
log
@Added new external call HtmlRelativiseURL, and added support for hex entities.
@
text
@a120 9
extern char *HtmlRelativiseURL(const char *base, const char *link, void *parent);
/* Given a base URL (eg http://www.acorn.co.uk/) and a possibly relative URL
 * as found in an href attribute (eg home.html), return the absolute URL
 * (eg http://www.acorn.co.uk/home.html). The returned string is in a buffer
 * allocated with HtmlMalloc, which will be discarded when HtmlStreamFree is
 * called. See HtmlMalloc for details of "parent". Don't forget to check for
 * NULL returns - memory is, alas, finite.
 */

@


1.2.2.7
log
@Redid handling of FORM tags to use an elementinfo structure.
@
text
@a161 8
extern  const char *HtmlFORMaction(HStream *h);
extern  formmethod  HtmlFORMmethod(HStream *h);
extern  const char *HtmlFORMenctype(HStream *h);
extern  const char *HtmlFORMaccept_charset(HStream *h);
extern  const char *HtmlFORMonreset(HStream *h);
extern  const char *HtmlFORMonsubmit(HStream *h);
extern  const char *HtmlFORMtarget(HStream *h);

@


1.2.2.8
log
@Added HtmlReturnContext (__html_return_context) to get the context of a
block of memory (e.g. an HStream structure). This allows clients to check
if some particular block belongs to a stream that is about to be freed,
say, and take appropriate action before the freeing. Merged in a few
changes by Kevin Bracey to help with vertical white space problems,
mostly involving SCRIPT tags - there was also a bug in BASE which didn't
check for an HREF before trying to read the attributes value, so broken
HTML like <BASE FONT=1> would stop all subsequent HREFs from being
correctly relativised.
@
text
@a134 9
extern unsigned int HtmlReturnContext(void *block);
/* Return the memory context of an object allocated with HtmlMalloc. This
 * allows, for example, easy identification of objects that are part of a
 * wider collection of blocks that are to be freed with HtmlFree. If zero
 * is returned, the block was either not allocated with HtmlMalloc in the
 * first place or has since been freed (either way, the guard word on the
 * block is not what was expected).
 */

@


1.2.2.9
log
@Revised INPUT handling - made INPUT type=image work
@
text
@a178 40
extern   inputtype  HtmlINPUTtype(HStream *h);
extern  const char *HtmlINPUTname(HStream *h);
extern  const char *HtmlINPUTvalue(HStream *h);
extern        bool  HtmlINPUTchecked(HStream *h);
extern        bool  HtmlINPUTdisabled(HStream *h);
extern        bool  HtmlINPUTreadonly(HStream *h);
extern unsigned int HtmlINPUTsize(HStream *h);
extern unsigned int HtmlINPUTmaxlength(HStream *h);
extern  const char *HtmlINPUTsrc(HStream *h);
extern  const char *HtmlINPUTalt(HStream *h);
extern  const char *HtmlINPUTusemap(HStream *h);
extern    imgalign  HtmlINPUTalign(HStream *h);
extern         int  HtmlINPUTtabindex(HStream *h);
extern  const char *HtmlINPUTonfocus(HStream *h);
extern  const char *HtmlINPUTonblur(HStream *h);
extern  const char *HtmlINPUTonselect(HStream *h);
extern  const char *HtmlINPUTonchange(HStream *h);
extern  const char *HtmlINPUTaccept(HStream *h);

extern  const char *HtmlSELECTname(HStream *h);
extern unsigned int HtmlSELECTsize(HStream *h);
extern        bool  HtmlSELECTmultiple(HStream *h);
extern        bool  HtmlSELECTdisabled(HStream *h);
extern         int  HtmlSELECTtabindex(HStream *h);
extern  const char *HtmlSELECTonfocus(HStream *h);
extern  const char *HtmlSELECTonblur(HStream *h);
extern  const char *HtmlSELECTonselect(HStream *h);
extern  const char *HtmlSELECTonchange(HStream *h);
extern   const int *HtmlSELECToptions(HStream *h);

/*
 * Attributes applying to more than one element.
 */
extern  const char *HtmlELEMENTname(HStream *h);
extern         int  HtmlELEMENTtabindex(HStream *h);
extern  const char *HtmlELEMENTonfocus(HStream *h);
extern  const char *HtmlELEMENTonblur(HStream *h);
extern  const char *HtmlELEMENTonselect(HStream *h);
extern  const char *HtmlELEMENTonchange(HStream *h);

@


1.2.2.10
log
@Fixed &#160;, fixed option selection, changed GOT_MORE flag
@
text
@a65 6
 * The HStream returned is either
 *
 *    a) NULL if no new tokens are produced
 *    b) the first new token produced (if we weren't in a table to start with)
 * or c) the top level table token in which we started (in which case the
 *       HTML_GOT_MORE_IN_A_TABLE flag will be set).
d68 1
a68 1
#define HTML_GOT_MORE_IN_A_TABLE 1u
@


1.2.2.11
log
@Made __html_stream_init() externally visible, as HtmlGetContext. The reasons
why are fully documented in the comments by the relevant part of either
api.h or veneers.c.
@
text
@a32 14
extern void *HtmlGetContext(void);
/* If a client wishes to use HTMLLib functions without having any
 * document stream to refer to, it should use this function. An
 * example is for broken server side redirections, where a client
 * may wish to use the URL relativisation functions. Since the
 * redirection can occur in an HTTP response header, there may be
 * no document yet, and so there is no context under which the URL
 * relativisation function can allocate memory. Such a context may
 * be gained with this function.
 *
 * The caller must, of course, be very careful to free the structures
 * this will set up using HtmlStreamFree when the context is no
 * longer required.
 */
@


1.2.2.12
log
@Removed the GetContext stuff (blimey, that was short lived) - a much better
approach to relativise broken redirections inside the header parsing
routines has been taken (see HtmlIdentify).
@
text
@d27 3
a29 3
#include "html2_ext.h"  /* All the HTML 2 tags  */
#include "tags.h"       /* All the tag #defines */
#include "struct.h"     /* The structures used  */
d33 14
d53 2
a54 2
 *                      relative links may be established within the
 *                      document.
d56 6
a61 6
 *                      This is used oven the chunk size argument for
 *                      hourglass % calculation if it is non-zero.
 *   (int) type       - The type as defined in the return value from
 *                      HtmlIdentify. Typically this is 1 for HTML
 *                      and 2 for plain text (this ensure plain text
 *                      is PRE-formatted)
d72 1
a72 1
 *                        HTMLParse()).
d74 3
a76 3
 *                        complete document (NOT the chunk to be
 *                        added).  As yet non-contiguous chunks are
 *                        not supported
d100 3
a102 4
extern unsigned int HtmlIdentify(char *base_url, char *stream,
                                      size_t stream_len,
                                      char done, char **url,
                                      int *file_type, int *canparse);
a114 4
 * For redirections, the first parameter is the base URL of the fetch.
 * This is for broken redirections where the server doesn't specify
 * a full URL, and relativisation is needed.
 *
d138 1
a138 6
/* Free a block allocated with HtmlMalloc.
 */

extern void HtmlFreeAll(void *block);
/* Free all blocks allocated with HtmlMalloc in the same context as the
 * block given.
@


1.2.2.13
log
@Removed a full stop
@
text
@d226 1
a226 1
 * Attributes applying to more than one element
@


1.2.2.14
log
@Encoding support added (yippee). #define UNIFONT to get UTF-8 output,
otherwise Latin-1 output is provided. Lots of encoding files...
@
text
@d33 1
a33 2
extern void *HtmlParse(char *url, int length, int type, int usingframes,
                       int encoding, encoding_priority priority);
a50 2
 *   (int) encoding   - The identifier of the encoding in use.
 *   (enco...)priority- The priority of that encoding choice.
a75 5
extern void HtmlSetEncodingCallback(void *st, void (*cb)(int, void *), void *handle);
/* Specify a routine to be called when a META tag changes the encoding.
 * The routine is called with the new encoding number as the first parameter,
 * and the supplied handle as the second parameter.
 */
d89 1
a89 2
                                      int *file_type, int *canparse,
                                      int *encoding);
a101 3
 * If it is an HTML or text file, an encoding number is returned in
 * *encoding - 0 if the encoding is not specified.
 *
a118 8
 */

int HTTPEncodingNumberFromName(const char *name);
/* Given a MIME charset name (terminated by a character not valid in a MIME
 * charset name, so a direct pointer into the Content-Type header field will do),
 * this returns the encoding number (the Internet MIB coded value if assigned).
 * This number can be passed to HtmlParse(). If the name is unknown or
 * unsupported, 0 is returned.
@


1.2.2.15
log
@Bras Direct now works. Woohoo. Doesn't die when loading extremely large
chunks - malloc failures due to a locked flex heap caused problems.
HttpEndParse call added to free up parse related blocks. To solve layout
problems on certain sizes, spacer images (align left or right) which are
less than 2 pixels wide, or are more than 15 times tall than wide, will
be ignored.
@
text
@a84 6
extern void HtmlEndParse(void *stream);
/* Free all the structures involved in the parsing of a document,
 * but not the actual generated token stream, which is freed later
 * with HtmlStreamFree.
 */

@


1.2.2.16
log
@Added veneers for OBJECT tags in attrvenrs.c, and updated api.h as
appropriate - tidied this so comments appear before the functions they
apply to rather than after (!), and moved HtmlInit to the top, since
it's the first thing you're supposed to call (hence change to veneers.c).

Stripped dependencies out of Makefile prior to checkin.
@
text
@a18 1

a26 1

d33 3
a35 8
/*
 * Initialise the HTML library. *MUST* be called before any other routines
 * in the library.
 */
extern void HtmlInit(void);

/*
 * HtmlParse() is used to initialise the HTML parser for a document
d39 15
a53 15
 *   (char *) url      - The full URL of the page to be parsed so
 *                       relative links may be established within the
 *                       document.
 *   (int) length      - The total length of the document (if known).
 *                       This is used oven the chunk size argument for
 *                       hourglass % calculation if it is non-zero.
 *   (int) type        - The type as defined in the return value from
 *                       HtmlIdentify. Typically this is 1 for HTML
 *                       and 2 for plain text (this ensure plain text
 *                       is PRE-formatted)
 *   (int) usingframes - If the front end is displaying frames, this
 *                       should equal 1. This will suppress NOFRAMES
 *                       data. Otherwise set to 0.
 *   (int) encoding    - The identifier of the encoding in use.
 *   (enco...)priority - The priority of that encoding choice.
d55 2
a56 5
extern void * HtmlParse(char * url, int length, int type, int usingframes,
                        int encoding, encoding_priority priority);

/*
 * HtmlGetStream() attempts to parse the next chunk of document in
a76 1

d79 2
a80 4
extern HStream * HtmlGetStream(void * streamtok, char ** document, int size, unsigned int * flags);

/*
 * Specify a routine to be called when a META tag changes the encoding.
a83 1
extern void HtmlSetEncodingCallback(void * st, void (* cb) (int, void *), void * handle);
d85 2
a86 2
/*
 * Free all the structures involved in the parsing of a document,
a89 1
extern void HtmlEndParse(void * stream);
d91 2
a92 2
/*
 * Given a pointer to a HTML stream, this call will free up all memory
d95 2
a96 4
extern void HtmlStreamFree(void * stream);

/*
 * Given a pointer to the start of a data stream, and the amount of
d100 6
a105 4
extern int HttpStripHeaders(char * stream, size_t stream_len);

/*
 * Given a pointer to the head of the data stream, the amount of data
a125 1

a130 5
extern unsigned int HtmlIdentify(char * base_url, char * stream,
                                 size_t stream_len, char done,
                                 char ** url, int * file_type,
                                 int * canparse, int * encoding);

d132 3
a134 1
 * When returning data to a server, it is necessary to encode it in the
a137 1
extern char * HTTPEscapeString(char * string);
d139 2
a140 2
/*
 * Given a MIME charset name (terminated by a character not valid in a MIME
a145 1
int HTTPEncodingNumberFromName(const char * name);
d147 2
a148 2
/*
 * Allocate memory associated with a stream - pass as parent a pointer to
a152 1
extern void * HtmlMalloc(size_t size, void * parent);
d154 2
a155 2
/*
 * Free a block allocated with HtmlMalloc.
a156 1
extern void HtmlFree(void * block);
d158 2
a159 2
/*
 * Free all blocks allocated with HtmlMalloc in the same context as the
a161 1
extern void HtmlFreeAll(void * block);
d163 2
a164 2
/*
 * Given a base URL (eg http://www.acorn.co.uk/) and a possibly relative URL
a170 1
extern char * HtmlRelativiseURL(const char * base, const char * link, void * parent);
d172 7
a178 2
/*
 * Return the memory context of an object allocated with HtmlMalloc. This
a184 1
extern unsigned int HtmlReturnContext(void * block);
d199 51
a249 68
extern const char   * HtmlBODYonload         (HStream * h);
extern const char   * HtmlBODYonunload       (HStream * h);
extern const char   * HtmlBODYbackground     (HStream * h);
extern unsigned int   HtmlBODYtext           (HStream * h);
extern unsigned int   HtmlBODYbgcolour       (HStream * h);
extern unsigned int   HtmlBODYlink           (HStream * h);
extern unsigned int   HtmlBODYvlink          (HStream * h);
extern unsigned int   HtmlBODYalink          (HStream * h);

extern const char   * HtmlMETAhttp_equiv     (HStream * h);
extern const char   * HtmlMETAname           (HStream * h);
extern const char   * HtmlMETAcontent        (HStream * h);
extern const char   * HtmlMETAscheme         (HStream * h);

extern const char   * HtmlFORMaction         (HStream * h);
extern formmethod     HtmlFORMmethod         (HStream * h);
extern const char   * HtmlFORMenctype        (HStream * h);
extern const char   * HtmlFORMaccept_charset (HStream * h);
extern const char   * HtmlFORMonreset        (HStream * h);
extern const char   * HtmlFORMonsubmit       (HStream * h);
extern const char   * HtmlFORMtarget         (HStream * h);

extern inputtype      HtmlINPUTtype          (HStream * h);
extern const char   * HtmlINPUTname          (HStream * h);
extern const char   * HtmlINPUTvalue         (HStream * h);
extern bool           HtmlINPUTchecked       (HStream * h);
extern bool           HtmlINPUTdisabled      (HStream * h);
extern bool           HtmlINPUTreadonly      (HStream * h);
extern unsigned int   HtmlINPUTsize          (HStream * h);
extern unsigned int   HtmlINPUTmaxlength     (HStream * h);
extern const char   * HtmlINPUTsrc           (HStream * h);
extern const char   * HtmlINPUTalt           (HStream * h);
extern const char   * HtmlINPUTusemap        (HStream * h);
extern imgalign       HtmlINPUTalign         (HStream * h);
extern int            HtmlINPUTtabindex      (HStream * h);
extern const char   * HtmlINPUTonfocus       (HStream * h);
extern const char   * HtmlINPUTonblur        (HStream * h);
extern const char   * HtmlINPUTonselect      (HStream * h);
extern const char   * HtmlINPUTonchange      (HStream * h);
extern const char   * HtmlINPUTaccept        (HStream * h);

extern const char   * HtmlSELECTname         (HStream * h);
extern unsigned int   HtmlSELECTsize         (HStream * h);
extern bool           HtmlSELECTmultiple     (HStream * h);
extern bool           HtmlSELECTdisabled     (HStream * h);
extern int            HtmlSELECTtabindex     (HStream * h);
extern const char   * HtmlSELECTonfocus      (HStream * h);
extern const char   * HtmlSELECTonblur       (HStream * h);
extern const char   * HtmlSELECTonselect     (HStream * h);
extern const char   * HtmlSELECTonchange     (HStream * h);
extern const int    * HtmlSELECToptions      (HStream * h);

extern bool           HtmlOBJECTdeclare      (HStream * h);
extern bool           HtmlOBJECTshapes       (HStream * h);
extern int            HtmlOBJECTtabindex     (HStream * h);
extern const char   * HtmlOBJECTtype         (HStream * h);
extern const char   * HtmlOBJECTusemap       (HStream * h);
extern int            HtmlOBJECTvspace       (HStream * h);
extern int            HtmlOBJECThspace       (HStream * h);
extern imgalign       HtmlOBJECTalign        (HStream * h);
extern const char   * HtmlOBJECTarchive      (HStream * h);
extern int            HtmlOBJECTborder       (HStream * h);
extern const char   * HtmlOBJECTclassid      (HStream * h);
extern const char   * HtmlOBJECTcodebase     (HStream * h);
extern const char   * HtmlOBJECTcodetype     (HStream * h);
extern const char   * HtmlOBJECTdata         (HStream * h);
extern HStream      * HtmlOBJECTstream       (HStream * h);
extern HStream      * HtmlOBJECTparent       (HStream * h);
d254 6
a259 7

extern  const char * HtmlELEMENTname     (HStream * h);
extern  int          HtmlELEMENTtabindex (HStream * h);
extern  const char * HtmlELEMENTonfocus  (HStream * h);
extern  const char * HtmlELEMENTonblur   (HStream * h);
extern  const char * HtmlELEMENTonselect (HStream * h);
extern  const char * HtmlELEMENTonchange (HStream * h);
@


1.2.2.17
log
@Implemented ordered lists.
Implemented <Q> ... </Q>.
Caused a linebreak after </DD>.
Finished implementing attributes for <OBJECT>.
Stopped HTML after a </FRAMESET> leaking through.
Ensured that FRAME and FRAMESET tokens aren't passed up if not using frames.

Removed lots of unnecessary #include "utf8.h" lines from encoding files.
Ensured unsigned constants used in UTF-8 code.
Added UTF8_next and UTF8_prev functions.
@
text
@d62 2
a63 2
extern void *HtmlParse(char *url, int length, int type, int usingframes,
                       int encoding, encoding_priority priority);
d90 1
a90 1
extern HStream *HtmlGetStream(void *streamtok, char **document, int size, unsigned int *flags);
d97 1
a97 1
extern void HtmlSetEncodingCallback(void *st, void (*cb) (int, void *), void *handle);
d104 1
a104 1
extern void HtmlEndParse(void *stream);
d110 1
a110 1
extern void HtmlStreamFree(void *stream);
d117 1
a117 1
extern int HttpStripHeaders(char *stream, size_t stream_len);
d147 1
a147 1
extern unsigned int HtmlIdentify(char *base_url, char *stream,
d149 2
a150 2
                                 char **url, int *file_type,
                                 int *canparse, int *encoding);
d157 1
a157 1
extern char *HTTPEscapeString(char *string);
d166 1
a166 1
int HTTPEncodingNumberFromName(const char *name);
d174 1
a174 1
extern void * HtmlMalloc(size_t size, void *parent);
d179 1
a179 1
extern void HtmlFree(void *block);
d185 1
a185 1
extern void HtmlFreeAll(void *block);
d195 1
a195 1
extern char *HtmlRelativiseURL(const char *base, const char *link, void *parent);
d205 1
a205 1
extern unsigned int HtmlReturnContext(void *block);
d220 68
a287 68
extern const char   *HtmlBODYonload         (HStream *h);
extern const char   *HtmlBODYonunload       (HStream *h);
extern const char   *HtmlBODYbackground     (HStream *h);
extern unsigned int  HtmlBODYtext           (HStream *h);
extern unsigned int  HtmlBODYbgcolour       (HStream *h);
extern unsigned int  HtmlBODYlink           (HStream *h);
extern unsigned int  HtmlBODYvlink          (HStream *h);
extern unsigned int  HtmlBODYalink          (HStream *h);

extern const char   *HtmlMETAhttp_equiv     (HStream *h);
extern const char   *HtmlMETAname           (HStream *h);
extern const char   *HtmlMETAcontent        (HStream *h);
extern const char   *HtmlMETAscheme         (HStream *h);

extern const char   *HtmlFORMaction         (HStream *h);
extern formmethod    HtmlFORMmethod         (HStream *h);
extern const char   *HtmlFORMenctype        (HStream *h);
extern const char   *HtmlFORMaccept_charset (HStream *h);
extern const char   *HtmlFORMonreset        (HStream *h);
extern const char   *HtmlFORMonsubmit       (HStream *h);
extern const char   *HtmlFORMtarget         (HStream *h);

extern inputtype     HtmlINPUTtype          (HStream *h);
extern const char   *HtmlINPUTname          (HStream *h);
extern const char   *HtmlINPUTvalue         (HStream *h);
extern bool          HtmlINPUTchecked       (HStream *h);
extern bool          HtmlINPUTdisabled      (HStream *h);
extern bool          HtmlINPUTreadonly      (HStream *h);
extern unsigned int  HtmlINPUTsize          (HStream *h);
extern unsigned int  HtmlINPUTmaxlength     (HStream *h);
extern const char   *HtmlINPUTsrc           (HStream *h);
extern const char   *HtmlINPUTalt           (HStream *h);
extern const char   *HtmlINPUTusemap        (HStream *h);
extern imgalign      HtmlINPUTalign         (HStream *h);
extern int           HtmlINPUTtabindex      (HStream *h);
extern const char   *HtmlINPUTonfocus       (HStream *h);
extern const char   *HtmlINPUTonblur        (HStream *h);
extern const char   *HtmlINPUTonselect      (HStream *h);
extern const char   *HtmlINPUTonchange      (HStream *h);
extern const char   *HtmlINPUTaccept        (HStream *h);

extern const char   *HtmlSELECTname         (HStream *h);
extern unsigned int  HtmlSELECTsize         (HStream *h);
extern bool          HtmlSELECTmultiple     (HStream *h);
extern bool          HtmlSELECTdisabled     (HStream *h);
extern int           HtmlSELECTtabindex     (HStream *h);
extern const char   *HtmlSELECTonfocus      (HStream *h);
extern const char   *HtmlSELECTonblur       (HStream *h);
extern const char   *HtmlSELECTonselect     (HStream *h);
extern const char   *HtmlSELECTonchange     (HStream *h);
extern const int    *HtmlSELECToptions      (HStream *h);

extern bool          HtmlOBJECTdeclare      (HStream *h);
extern bool          HtmlOBJECTshapes       (HStream *h);
extern int           HtmlOBJECTtabindex     (HStream *h);
extern const char   *HtmlOBJECTtype         (HStream *h);
extern const char   *HtmlOBJECTusemap       (HStream *h);
extern int           HtmlOBJECTvspace       (HStream *h);
extern int           HtmlOBJECThspace       (HStream *h);
extern imgalign      HtmlOBJECTalign        (HStream *h);
extern const char   *HtmlOBJECTarchive      (HStream *h);
extern int           HtmlOBJECTborder       (HStream *h);
extern const char   *HtmlOBJECTclassid      (HStream *h);
extern const char   *HtmlOBJECTcodebase     (HStream *h);
extern const char   *HtmlOBJECTcodetype     (HStream *h);
extern const char   *HtmlOBJECTdata         (HStream *h);
extern HStream      *HtmlOBJECTstream       (HStream *h);
extern HStream      *HtmlOBJECTparent       (HStream *h);
d293 6
a298 6
extern const char   *HtmlELEMENTname        (HStream *h);
extern int           HtmlELEMENTtabindex    (HStream *h);
extern const char   *HtmlELEMENTonfocus     (HStream *h);
extern const char   *HtmlELEMENTonblur      (HStream *h);
extern const char   *HtmlELEMENTonselect    (HStream *h);
extern const char   *HtmlELEMENTonchange    (HStream *h);
@


1.2.2.18
log
@Added missing HtmlOBJECTstandby prototype
@
text
@a285 1
extern const char   *HtmlOBJECTstandby      (HStream *h);
@


1.2.2.19
log
@PARAM and APPLET, take 1.
@
text
@a289 5
extern const char   *HtmlPARAMname          (HStream *h);
extern const char   *HtmlPARAMtype          (HStream *h);
extern const char   *HtmlPARAMvalue         (HStream *h);
extern paramtype     HtmlPARAMvaluetype     (HStream *h);

@


1.2.2.20
log
@Fixed links to "./".
Ensured incomplete OBJECTs not returned (I hope).
Stopped newlines being stripped inside PRE.
Made </P> turn off any paragraph alignment.
Added HtmlReplaceOBJECT call.
@
text
@a207 7
 * Given an OBJECT token, insert its alternative HTML after it.
 * Returns a pointer to the token after the OBJECT, after any
 * insertion.
 */
extern HStream *HtmlReplaceOBJECT(HStream *object);

/*
@


1.2.2.21
log
@Added objects flag to HtmlParse
@
text
@d56 1
a56 1
 *   (int) frames      - If the front end is displaying frames, this
a58 1
 *   (int) objects     - If objects should be parsed, 1, else 0.
d62 1
a62 1
extern void *HtmlParse(char *url, int length, int type, int frames, int objects,
@


1.2.2.22
log
@MAP and AREA handling - first attempt
@
text
@a295 1
extern HStream      *HtmlOBJECTmapstream    (HStream *h);
a301 3

#define HtmlIMGusemap(h) HtmlOBJECTusemap(h)
#define HtmlIMGmapstream(h) HtmlOBJECTmapstream(h)
@


1.2.2.23
log
@Added flag to HtmlParse to turn on or off tables support
@
text
@a59 1
 *   (int) tables      - If tables should be parsed, 1, else 0.
d63 1
a63 1
extern void *HtmlParse(char *url, int length, int type, int frames, int objects, int tables,
@


1.1
log
@file api was initially added on branch ARTtmp.
@
text
@d1 165
@


1.1.2.1
log
@Initial revision
@
text
@a0 145
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source: /ax/networking:Phileas/HTML/h/api: $
 *
 * $Log:	api,v $
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * Copyright (C) Acorn Computers Ltd.  1995
 *
 * $Version: networking $
 *
 * $Source: /ax/networking:Phileas/HTML/h/api: $
 *
 * $Log:	api,v $
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 * Revision 1.3  95/09/14  12:39:09  pwain
 * Comments, restructuring and bits.
 *
 * Revision 1.2  95/09/11  13:14:00  pwain
 * Fixes. The calls into __html_stream_free were typcasting a HStream to
 * type HTML, causing memory to be corrupted.
 *
 * Revision 1.1  95/09/08  10:06:13  pwain
 * Initial revision
 *
 *
 */

/*
 * This file contains the definitions of the API for using the HTML2
 * parser libraries.
 */
#ifndef __html2_parser_api_
#define __html2_parser_api_

/*
 * This file includes a number of other files. See these for comments
 * on their content. You will need them _all_ in your include path
 * when compiling with the HTMLlib object file.
 */
#include "html2_ext.h"	/* All the HTML 2 tags  */
#include "tags.h"	/* All the tag #defines */
#include "struct.h"	/* The structures used  */

/* Function calls provided. */

extern void *HtmlParse(char *url, int length, int type, int usingframes);
/* HtmlParse() is used to initialise the HTML parser for a document
 * to be parsed (the document need not actually be present). The
 * arguments passed in are:
 *
 *   (char *) url     - The full URL of the page to be parsed so
 *   	      	      	relative links may be established within the
 *		        document.
 *   (int) length     - The total length of the document (if known).
 *   	   	        This is used oven the chunk size argument for
 *			hourglass % calculation if it is non-zero.
 *   (int) type	      - The type as defined in the return value from
 *   	   	        HtmlIdentify. Typically this is 1 for HTML
 *			and 2 for plain text (this ensure plain text
 *   	   	        is PRE-formatted)
 *   (int) usingframes- If the front end is displaying frames, this
 *                      should equal 1. This will suppress NOFRAMES
 *                      data. Otherwise set to 0.
 */
extern HStream *HtmlGetStream(void *streamtok, char **document, int size);
/* HtmlGetStream() attempts to parse the next chunk of document in
 * the context of a previous document, or context created by HtmlParse().
 * The arguments passed in are:
 *
 *   (void *) streamtok - The context to parse in (provided from
 *   	      		  HTMLParse()).
 *   (char **) document - A pointer to a pointer to the start of the
 *   	       		  complete document (NOT the chunk to be
 *			  added).  As yet non-contiguous chunks are
 *			  not supported
 *   (int) size         - size of the chunk added.
 */
extern void HtmlStreamFree(void *stream);
/* Given a pointer to a HTML stream, this call will free up all memory
 * associated with the stream.
 */
extern int HttpStripHeaders(char *stream, size_t stream_len);
/* Given a pointer to the start of a data stream, and the amount of
 * data in the stream, HTTPStripHeaders returns the offset into the
 * stream at which the data segment starts assuming HTTP style headers
 */
extern unsigned int HtmlIdentify(char *stream, size_t stream_len, char done,
       		    		      char **url, int *file_type,
       		    		      int *canparse);
/* Given a pointer to the head of the data stream, the amount of data
 * currently in the stream, and a boolean flag to say if all the data
 * has been retrieved (done = 1 for complete stream, 0 for not), this call
 * attempts to understand the HTTP headers at the start of the stream,
 * indicating if a redirect is needed (return val = 302 and url becomes
 * a pointer to a buffer containing where to go to), authentication is
 * required (return val = 401), or the filetype of the document
 * derived from either the HTTP headers or the body data. If the
 * result is unknown, 0 is returned. If the filetype is known and no
 * redirect is needed, 200 is returned. (Yes these do look like the HTTP
 * response codes dont they :)
 *
 * The value passed back in can parse is as defined below:
 */
#define TYPE_UNKNOWN     0
#define TYPE_HTMLFILE    1
#define TYPE_TEXTFILE    2
#define TYPE_IMAGEFILE   3

/*
 */
extern char *HTTPEscapeString(char *string);
/* When returning data to a server, it is necessary to encode it in the
 * right way. This function call encodes the input string in this way,
 * returning the string to send (and not modifying the input string).
 */
#endif /* __html2_parser_api_ */
@


1.1.2.2
log
@Added in Tony Cheal's table code. Various other bug fixes.
@
text
@d19 1
a19 5
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/api,v $
 *
 * $Log: api,v $
 * Revision 1.1.2.1  1997/04/08 10:26:57  kbracey
 * Initial revision
d21 1
d35 1
a35 5
 * $Source: /projects2/renaissa/cvsroot/ART/Web/HTMLLib/h/Attic/api,v $
 *
 * $Log: api,v $
 * Revision 1.1.2.1  1997/04/08 10:26:57  kbracey
 * Initial revision
d37 1
d94 1
a94 1
extern HStream *HtmlGetStream(void *streamtok, char **document, int size, unsigned int *flags);
a105 3
 *   (int *) flags      - output destintation for reported flags
 *
 * flags are:
a106 5
#define HTML_GOT_MORE_TABLE    1
#define HTML_GOT_MORE_HSTREAMS 2
#define HTML_GOT_MORE (HTML_GOT_MORE_TABLE | HTML_GOT_MORE_HSTREAMS)


@
