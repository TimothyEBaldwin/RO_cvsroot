head	1.6;
access;
symbols
	remotedb-0_12:1.6
	remotedb-0_11:1.6
	RO_5_07:1.6
	remotedb-0_10:1.6
	remotedb-0_09:1.6
	dellis_autobuild_BaseSW:1.6
	sbrodie_sedwards_16Mar2000:1.6
	remotedb-0_08:1.6
	dcotton_autobuild_BaseSW:1.6
	remotedb-0_07:1.6
	remotedb-0_06:1.5
	remotedb-0_05:1.4
	remotedb-0_04:1.4
	remotedb-0_03:1.3
	remotedb-0_02:1.2
	Spin_Merge:1.1.2.5
	remotedb-0_01-1_1_2_5:1.1.2.5
	remotedb-0_01-1_1_2_4:1.1.2.5
	afrost_NC2_Generic:1.1.2.5
	remotedb-0_01-1_1_2_3:1.1.2.5
	remotedb-0_01-1_1_2_2:1.1.2.5
	Spinner_B20_2:1.1.2.4
	Spinner_19_3:1.1.2.4
	Spinner_B18:1.1.2.4
	Spinner_B17:1.1.2.4
	Spinner_B15:1.1.2.4
	Spinner_B14:1.1.2.4
	Spinner_B13:1.1.2.4
	Spinner_B12:1.1.2.4
	Spinner_B10:1.1.2.2
	Spinner_B7:1.1.2.2
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	99.09.21.08.50.50;	author jberanek;	state Exp;
branches;
next	1.5;

1.5
date	99.05.26.12.29.01;	author jberanek;	state Exp;
branches;
next	1.4;

1.4
date	99.02.24.16.57.37;	author smiddle;	state Exp;
branches;
next	1.3;

1.3
date	98.11.05.14.44.01;	author Spin;	state Exp;
branches;
next	1.2;

1.2
date	98.11.05.13.13.34;	author Spin;	state Exp;
branches;
next	1.1;

1.1
date	97.04.25.13.36.23;	author rbuckley;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.04.25.13.36.23;	author rbuckley;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.04.25.16.38.10;	author rbuckley;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	97.05.29.20.47.49;	author smiddle;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	97.05.30.17.33.51;	author smiddle;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	98.01.19.10.41.21;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ * remotedb is now properly namespaced, all calls and visible variables are
   prefixed "remote_". Previously only some of the calls were namespaced,
   now they all are.  This may break some apps that used remotedb directly
   instead of using DebugLib, but the changes needed will be small. This
   change was done because I was getting a nameclash with some other
   source that defined debug_vprintf.

 * Updated DebugLib will be checked-in that uses new naming scheme.


Version 0.07. Tagged as 'remotedb-0_07'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1997-1999 Pace Micro Technology plc       */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Pace Micro Tecnology.  It may not be reproduced,     */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Pace Micro Technology.  All rights reserved.     */
/*                                                                      */
/************************************************************************/

#ifndef __debug_remote_h
#define __debug_remote_h

#include <stdarg.h>

#ifdef REMOTE_DEBUG

/*
 * Function typedef for handlign commands sent from the server end
 */

typedef int (*remote_debug_cmd_handler)(int argc, char *argv[], void *handle);

/*
 * structure to fold session data
 */
typedef struct
{
  int  sock;
  char *info;
  unsigned char priority;
  remote_debug_cmd_handler cmd_handler;
  void *cmd_handle;
} remote_debug_session;

/*
 * Open a connection to host specified by Inet$DebugHost and send an initial
 * connection message. All future sends via this interface will be prefixed by
 * info. A copy of info is made internally. This call will return a pointer to
 * a session structure to be used in subsequent calls.
 */
void remote_debug_open(char *info, remote_debug_session **sess);

/*
 * Send an printf formatted string upto a max of 1024 characters to the debug
 * host. If string is prefixed by (n), this is treated as the debug priority
 * level.
 *
 * Also versions to send a neat string and one passed as a va_list.
 */
void remote_debug_printf (remote_debug_session *sess, char *format, ...);
void remote_debug_vprintf (remote_debug_session *sess, const char *format, va_list list);
void remote_debug_dvprintf (remote_debug_session *sess, int priority, const char *file, int line, const char *format,
                            va_list list);
void remote_debug_print_line_simple (remote_debug_session *sess, const char *line);
void remote_debug_print_line (unsigned int flags, remote_debug_session *sess, const char *line, size_t len);

/*
 * Register a command handler to handle commands sent from the server
 */

void remote_debug_register_cmd_handler (remote_debug_session *sess, remote_debug_cmd_handler fn, void *handle);
/*
 * Close a previously open debug channel.
 */
void remote_debug_close (remote_debug_session *sess);

/*
 * check the input port for any data. Call this every so often to ensure commands
 * get executed when entered rather than on the next debug write.
 */
int remote_debug_poll (remote_debug_session *sess);

const char *remote_debug_version (void);

#else

#define remote_debug_open(x,y)
#define remote_debug_printf 1?0:printf
#define remote_debug_vprintf(s,f,l)
#define remote_debug_print_line_simple(s,d)
#define remote_debug_print_line(f,s,l,le)
#define remote_debug_close(x)
#define remote_debug_version()

#endif /* REMOTE_DEBUG */

#endif
@


1.5
log
@ * Improved namespacing of functions throughout remotedb.  External
   functions weren't able to be renamed, so as not to break compatability
   with programs that use remotedb

 * Added a new API call "remote_debug_print_line".  It is similar to
   "debug_print_line", except that it takes flags, and you can pass the
   length of the line you want to output (so you can pass non-NULL
   terminated strings).  The one used bit in the flag is bit 1, which if
   set means that the debug output should be "raw", i.e. bypass the
   priority code, and not force a \n at the end of the line.  The next
   DebugLib version (0.38) will use this raw mode.

 * Renamed the remotedb_version function to remote_debug_version to better
   fit the namespacing of the rest of the (correctly namespaced) API calls.
   Compatability shouldn't be too much of a concern, because it's a new
   API call, which very few people will be using.

 * Added -throwback into !Mk and !MkExport

 * Changed C flags to -ffah, to stop function name embedding...this was
   causing problems with using DebugLib Trace output with remotedb.


Version 0.06. Tagged as 'remotedb-0_06'
@
text
@d16 1
a16 1
/*                  Copyright 1997-1999 Element 14 Ltd                  */
d19 3
a21 3
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
d48 1
a48 1
} debug_session;
d56 1
a56 1
void remote_debug_open(char *info, debug_session **sess);
d65 6
a70 6
void debug_printf(debug_session *sess, char *format, ...);
void debug_vprintf(debug_session *sess, const char *format, va_list list);
void debug_dvprintf(debug_session *sess, int priority, const char *file, int line, const char *format, va_list list);
void debug_print_line(debug_session *sess, const char *line);

void remote_debug_print_line (unsigned int flags, debug_session *sess, const char *line, size_t len);
d76 1
a76 1
void remote_debug_register_cmd_handler(debug_session *sess, remote_debug_cmd_handler fn, void *handle);
d80 1
a80 1
void remote_debug_close(debug_session *sess);
d86 1
a86 1
int debug_poll(debug_session *sess);
d93 3
a95 3
#define debug_printf 1?0:printf
#define debug_vprintf(s,f,l)
#define debug_print_line(s,d)
@


1.4
log
@Changed copyright messages.
Stopped  version string from including the space at the end
unnecessarily. This fix means that this code now works!
Previously the version string with the space wasn't matched
correctly by the daemon and so it failed with no errors.
This code will still fail if branmch development goes on.
Suggest that someone fix the daemon by then.

Version 0.04. Tagged as 'remotedb-0_04'
@
text
@d68 3
a70 1
void debug_print_line(debug_session *sess, const char *debug_line);
d88 1
a88 1
const char *remotedb_version (void);
d96 1
d98 1
a98 1
#define remotedb_version()
@


1.3
log
@ * Added version number string (created from SrcCommit info) and version
   number method (remotedb_version).

 * VersionNum file also gets copied to Export directory, so it's easy to
   see what version you've got compiled.


Version 0.03. Tagged as 'remotedb-0_03'
@
text
@d16 1
a16 1
/*                  Copyright 1996 Acorn Computers Ltd                  */
d19 1
a19 1
/*  information of Acorn Computers. It may not be reproduced, used      */
d21 1
a21 1
/*  consent of Acorn Computers. All rights reserved.                    */
@


1.2
log
@ * remotedb library moved onto trunk.


Version 0.02. Tagged as 'remotedb-0_02'
@
text
@a29 2
#define REMOTE_DEBUG_VERSION "0.03"

d86 2
d95 1
@


1.1
log
@file remote was initially added on branch Spinner.
@
text
@d1 98
@


1.1.2.1
log
@Put the wacky remote debug library into cvs for safe keeping.
@
text
@a0 72
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef __debug_remote_h
#define __debug_remote_h

#include <stdarg.h>

#define REMOTE_DEBUG_VERSION "0.02"

#ifdef REMOTE_DEBUG

/*
 * structure to fold session data
 */
typedef struct
{
  int  sock;
  char *info;
  unsigned char priority;
} debug_session;

/*
 * Open a connection to host specified by Inet$DebugHost and send an initial
 * connection message. All future sends via this interface will be prefixed by
 * info. A copy of info is made internally. This call will return a pointer to
 * a session structure to be used in subsequent calls.
 */
void remote_debug_open(char *info, debug_session **sess);

/*
 * Send an printf formatted string upto a max of 256 characters to the debug
 * host. If string is prefixed by (n), this is treated as the debug priority
 * level.
 */
void debug_printf(debug_session *sess, char *format, ...);

/*
 * Close a previously open debug channel.
 */
void remote_debug_close(debug_session *sess);

#else

#define remote_debug_open(x)
#define debug_printf 1?0:printf
#define remote_debug_close(x)

#endif /* REMOTE_DEBUG */

#endif
@


1.1.2.2
log
@Corrected the non-debug prototype for remote_debug_open.
@
text
@d66 1
a66 1
#define remote_debug_open(x,y)
@


1.1.2.3
log
@Extended to allow va_list's to be passed in directly to debug_printf
and to allow a command handling function to be registered to handle
commands coming down the wire from the server end.
@
text
@a34 6
 * Function typedef for handlign commands sent from the server end
 */

typedef int (*remote_debug_cmd_handler)(int argc, char *argv[], void *handle);

/*
a41 2
  remote_debug_cmd_handler cmd_handler;
  void *cmd_handle;
d53 1
a53 1
 * Send an printf formatted string upto a max of 1024 characters to the debug
a55 2
 *
 * Also versions to send a neat string and one passed as a va_list.
a57 6
void debug_vprintf(debug_session *sess, const char *format, va_list list);
void debug_print_line(debug_session *sess, const char *debug_line);

/*
 * Register a command handler to handle commands sent from the server
 */
a58 1
void remote_debug_register_cmd_handler(debug_session *sess, remote_debug_cmd_handler fn, void *handle);
a67 2
#define debug_vprintf(s,f,l)
#define debug_print_line(s,d)
@


1.1.2.4
log
@Upped version number, exported debug_poll and checked for null sess in
cmd_handler.
@
text
@d30 1
a30 1
#define REMOTE_DEBUG_VERSION "0.03"
a79 6

/*
 * check the input port for any data. Call this every so often to ensure commands
 * get executed when entered rather than on the next debug write.
 */
int debug_poll(debug_session *sess);
@


1.1.2.5
log
@Used srccommit.
Updated Makefile to create library versions.
 Upped max line length and allocated it via malloc.
Added new debug type with args for file and line.

Version 0.01, 1.1.2.2. Tagged as 'remotedb-0_01-1_1_2_2'
@
text
@a68 1
void debug_dvprintf(debug_session *sess, int priority, const char *file, int line, const char *format, va_list list);
@
