head	1.1;
access;
symbols
	dellis_autobuild_BaseSW:1.1
	dcotton_autobuild_BaseSW:1.1
	dcotton_Spin_Merge:1.1.1.1
	AcornNC-0_02:1.1
	nturton_AcornNC-0_00:1.1
	afrost_NC2_Generic:1.1.1.1
	afrost_Funai01-33:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	inital:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.03.18.21.10.03;	author jsmith;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.21.10.03;	author jsmith;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdarg.h>
#include <string.h>
#include <stdio.h>

#include "kernel.h"

#include "Desk.DeskMem.h"
#include "Desk.Error2.h"
#include "Desk.Debug.h"
#include "Desk.File.h"
#include "Desk.KernelSWIs.h"

#include "AcornNC.NC.h"
#include "HTML.Args.h"



#define	URL	"url=file:/"
#define	TARGET	"&target="


/*
This is all a bit hacky now...
 */


static Desk_deskmem_buffer	returnedframes;
static int			numframes;

static void	AcornNC_InformSTBWebOfNew_Init( void)
	{
	Desk_DeskMem_BufferInit( &returnedframes, 64);
	Desk_DeskMem_BufferStrCpy( &returnedframes, "");
	numframes = 0;
	}

static void	AcornNC_InformSTBWebOfNew_AddFile( const char* filename0, const char* frame)
	{
	char*	filename = (char*) filename0;
	AcornNC_SwapColonSlash( filename);
	
	if ( numframes>0)	Desk_DeskMem_BufferStrCat( &returnedframes, " ");
	
	Desk_DeskMem_BufferStrCat( &returnedframes, URL);
	
	HTML_Args_CatEscapedTextToBuffer( &returnedframes, filename);
	AcornNC_SwapColonSlash( filename);	/* Restore filename to original form.	*/
	
	if (frame && *frame)	{
		Desk_DeskMem_BufferStrCat( &returnedframes, TARGET);
		HTML_Args_CatEscapedTextToBuffer( &returnedframes, frame);
		}
	}

static void	AcornNC_InformSTBWebOfNew_AddFrame( Desk_deskmem_buffer* buffer, const char* frame)
	{
	char	filename[ 256];
	tmpnam( filename);
	Desk_File_SaveMemory2( filename, Desk_DeskMem_BufferGetString( buffer), strlen( Desk_DeskMem_BufferGetString( buffer)), Desk_filetype_HTML);
	AcornNC_InformSTBWebOfNew_AddFile( filename, frame);
	}

static void	AcornNC_InformSTBWebOfNew_Final( void)
	{
	/* Set system variable to inform STBWeb about the new page...	*/
	Desk_os_error*	e = _kernel_setenv( "NCFresco$ReturnedFrames", Desk_DeskMem_BufferGetString( &returnedframes));
	Desk_DeskMem_BufferFree( &returnedframes);
	Desk_Error2_CheckOS( e);
	}

static void	AcornNC_InformSTBWebOfNew_Cancel( void)
	{
	Desk_DeskMem_BufferFree( &returnedframes);
	}


void	AcornNC_InformSTBWebOfNewFrames( int n, ...)
	{
	volatile va_list	va;
	int	i;
	
	AcornNC_InformSTBWebOfNew_Init();
	
	Desk_Error2_Try	{
		va_start( va, n);
		
		for ( i=0; i<n; i++)	{
			Desk_deskmem_buffer*	buffer	= va_arg( va, Desk_deskmem_buffer*);
			char*			frame	= va_arg( va, char*);
			
			if ( buffer==NULL)	{
				Desk_Debug_Printf( Desk_error_PLACE "AcornNC_InformSTBWebOfNewFrames: Only %i buffer/frame pairs - expected %i\n", i, n);
				break;
				}
			
			AcornNC_InformSTBWebOfNew_AddFrame( buffer, frame);
			}
		}
	Desk_Error2_Catch	{
		va_end( va);
		AcornNC_InformSTBWebOfNew_Cancel();
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	va_end( va);
	
	AcornNC_InformSTBWebOfNew_Final();
	}




void	AcornNC_InformSTBWebOfNewFiles( int n, ...)
	{
	/*Desk_deskmem_buffer	buffer;*/
	volatile va_list	va;
	int			i;
	
	AcornNC_InformSTBWebOfNew_Init();
	/*
	Desk_DeskMem_BufferInit( &buffer, 512);
	Desk_DeskMem_BufferStrCpy( &buffer, "");
	*/
	va_start( va, n);
	
	Desk_Error2_Try	{
		for ( i=0; i<n; i++)	{
			char*	url = va_arg( va, char*);
			char*	frame = va_arg( va, char*);
			
			if ( url==NULL || *url==NULL)	{
				Desk_Debug_Printf( Desk_error_PLACE "AcornNC_InformSTBWebOfNewFiles: Only %i file/frame pairs - expected %i\n", i, n);
				break;
				}
			
			AcornNC_InformSTBWebOfNew_AddFile( url, frame);
			/*
			AcornNC_SwapColonSlash( url);
			if ( i!=0)	Desk_DeskMem_BufferStrCat( &buffer, " ");
			Desk_DeskMem_BufferStrCat( &buffer, URL);
			HTML_Args_CatEscapedTextToBuffer( &buffer, url);
			AcornNC_SwapColonSlash( url);
			
			if (frame && *frame)	{
				Desk_DeskMem_BufferStrCat( &buffer, TARGET);
				HTML_Args_CatEscapedTextToBuffer( &buffer, frame);
				}
			*/
			}
		}
	Desk_Error2_Catch	{
		va_end( va);
		AcornNC_InformSTBWebOfNew_Cancel();
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	
	va_end( va);
	
	AcornNC_InformSTBWebOfNew_Final();
	/*
	Desk_Debug_Printf( Desk_error_PLACE "NCConfig_InformSTBWebOfNewFile created '%s'\n", Desk_DeskMem_BufferGetString( &buffer));
	
	Desk_Error2_CheckOS( (Desk_os_error*) _kernel_setenv( "NCFresco$ReturnedFrames", Desk_DeskMem_BufferGetString( &buffer)));
	
	Desk_DeskMem_BufferFree( &buffer);
	*/
	}


void	AcornNC_InformSTBWebOfNewFile( const char* filename, const char* target)
	{
	AcornNC_InformSTBWebOfNewFiles( 1, filename, target);
	}



void	AcornNC_InformSTBWebOfExtraFile( const char* filename, const char* target)
	{
	AcornNC_InformSTBWebOfNew_Init();
	Desk_Error2_Try	{
		Desk_DeskMem_BufferStrCpy( &returnedframes, Desk_OS_ReadVarVal_AutoAlloc( "NCFresco$ReturnedFrames"));
		numframes = 1;	/* Make non-0 so that a space is inserted before new name.	*/
		AcornNC_InformSTBWebOfNew_AddFile( filename, target);
		}
	Desk_Error2_Catch	{
		AcornNC_InformSTBWebOfNew_Cancel();
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	AcornNC_InformSTBWebOfNew_Final();
	}



void	AcornNC_InformSTBWebOfExtraFrame( Desk_deskmem_buffer* buffer, const char* target)
	{
	char	filename[ 256];
	tmpnam( filename);
	Desk_File_SaveMemory2( filename, Desk_DeskMem_BufferGetString( buffer), strlen( Desk_DeskMem_BufferGetString( buffer)), Desk_filetype_HTML);
	AcornNC_InformSTBWebOfExtraFile( filename, target);
	}
@


1.1.1.1
log
@Initial import of AcornNC library
@
text
@@
