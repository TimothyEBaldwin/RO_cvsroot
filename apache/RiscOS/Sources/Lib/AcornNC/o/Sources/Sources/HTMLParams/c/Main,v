head	1.1;
access;
symbols
	dellis_autobuild_BaseSW:1.1
	dcotton_autobuild_BaseSW:1.1
	dcotton_Spin_Merge:1.1.1.1
	AcornNC-0_02:1.1
	nturton_AcornNC-0_00:1.1
	afrost_NC2_Generic:1.1.1.1
	afrost_Funai01-33:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	inital:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.03.18.21.10.05;	author jsmith;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.21.10.05;	author jsmith;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <ctype.h>
#include <string.h>

#include "Desk.DeskMem.h"
#include "Desk.Error2.h"
#include "Desk.Str.h"
#include "Desk.Debug.h"
#include "Desk.File.h"

#include "AcornNC.HTMLParams.h"


char*	AcornNC_GetFormArguments( const char* arg_string, int argc)
	{
	int	len = Desk_strlencr( arg_string);
	char*	args2 = Desk_DeskMem_Malloc( 1+len);
	Desk_strncpy0( args2, arg_string, len);
	
	Desk_Debug_Printf( Desk_error_PLACE "AcornNC_GetFormArguments( '%s', %i)\n", arg_string, argc);
	
	if ( argc==1)	{
		char*	q = strchr( args2, '?');
		Desk_Debug_Printf( Desk_error_PLACE "AcornNC_GetFormArguments: form is 'get', returning '%s'\n", arg_string);
		if ( !q)	{
			args2[0] = 0;	// No '?', so no arguments...
			args2 = Desk_DeskMem_Realloc( args2, 1);
			}
		else	{
			// Remove start of string up to and including first '?'
			memmove( args2, q+1, 1+strlen( q+1));
			args2 = Desk_DeskMem_Realloc( args2, 1+strlen( args2));
			}
		
		Desk_Debug_Printf( Desk_error_PLACE "Returning '%s'\n", args2);
		return args2;
		}
	
	else if ( argc==2)	{
		char*	filename = args2;
		char*	c;
		while ( (*filename) && !isspace( *filename))	filename++;
		while ( isspace( *filename))	filename++;
		c = filename;
		while ( (*c) && !isspace( *c))	c++;
		*c = 0;
		
		Desk_Debug_Printf( Desk_error_PLACE "AcornNC_GetFormArguments: 'post' filename is '%s'\n", filename);
			{
			char*	file = Desk_File_AllocLoad0( filename);
			Desk_DeskMem_Free( args2);
			return file;
			}
		}
	else	{
		Desk_DeskMem_Free( args2);
		Desk_Error2_HandleTextf( "Expecting 1 or 2 arguments from form, not %i", argc);
		}
	
	return NULL;
	}


void	AcornNC_FindHTMLVariables( AcornNC_args_variablelist* list, const char* arg_string, int argc)
	{
	list->args_string = AcornNC_GetFormArguments( arg_string, argc);
	Desk_Error2_TryCatch(
		Desk_Debug_Printf( Desk_error_PLACE "AcornNC_FindHTMLVariables, vars are '%s'\n", list->args_string);
		HTML_Args_FindHTMLVariables2( &list->list, list->args_string);
		Desk_Debug_Printf( Desk_error_PLACE "There are %i variables\n", list->list.num);
		,
		Desk_DeskMem_Free( list->args_string);
		Desk_Error2_ReThrow();
		)
	}

void	AcornNC_FreeHTMLVariables( AcornNC_args_variablelist* list)
	{
	HTML_Args_FreeHTMLVariables( &list->list);
	Desk_DeskMem_Free( list->args_string);
	}
@


1.1.1.1
log
@Initial import of AcornNC library
@
text
@@
