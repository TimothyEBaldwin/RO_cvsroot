head	4.2;
access;
symbols
	RISC_OSLib-5_54:4.1
	RISC_OSLib-5_53:4.1
	RISC_OSLib-5_52:4.1
	RISC_OSLib-5_51:4.1
	RO_5_07:4.1
	RISC_OSLib-5_50:4.1
	RISC_OSLib-5_49:4.1
	RISC_OSLib-5_46-4_64_2_1:4.1
	NoInlineAsm:4.1.0.16
	RISC_OSLib-5_48:4.1
	RISC_OSLib-5_47:4.1
	RISC_OSLib-5_46:4.1
	RISC_OSLib-5_45:4.1
	RISC_OSLib-5_44:4.1
	RISC_OSLib-5_43:4.1
	RISC_OSLib-5_42:4.1
	RISC_OSLib-5_41:4.1
	RISC_OSLib-5_40:4.1
	RISC_OSLib-5_39:4.1
	RISC_OSLib-5_38:4.1
	RISC_OSLib-5_37:4.1
	RISC_OSLib-5_36:4.1
	RISC_OSLib-5_35:4.1
	RISC_OSLib-5_34:4.1
	RISC_OSLib-5_33-4_50_2_1:4.1
	sbrodie_dev:4.1.0.14
	sbrodie_dev_bp:4.1
	RISC_OSLib-5_33:4.1
	RISC_OSLib-5_32:4.1
	RISC_OSLib-5_31:4.1
	RISC_OSLib-5_30:4.1
	RISC_OSLib-5_29:4.1
	RISC_OSLib-5_28:4.1
	RISC_OSLib-5_27:4.1
	RISC_OSLib-5_26:4.1
	RISC_OSLib-5_25:4.1
	RISC_OSLib-5_24:4.1
	RISC_OSLib-5_01-4_16_2_5:4.1
	RISC_OSLib-5_23:4.1
	RISC_OSLib-5_22:4.1
	RISC_OSLib-5_21:4.1
	RISC_OSLib-5_20:4.1
	RISC_OSLib-5_19:4.1
	RISC_OSLib-5_18:4.1
	RISC_OSLib-5_17:4.1
	RISC_OSLib-5_16:4.1
	RISC_OSLib-5_15:4.1
	dellis_autobuild_BaseSW:4.1
	RISC_OSLib-5_14:4.1
	RISC_OSLib-5_13:4.1
	RISC_OSLib-5_12:4.1
	RISC_OSLib-5_01-4_16_2_4:4.1
	RISC_OSLib-5_11:4.1
	RISC_OSLib-5_01-4_16_2_3:4.1
	RISC_OSLib-5_01-4_16_2_2:4.1
	RISC_OSLib-5_10:4.1
	RISC_OSLib-5_01-4_16_2_1:4.1
	Bethany:4.1.0.12
	RISC_OSLib-5_09:4.1
	RISC_OSLib-5_08:4.1
	RISC_OSLib-5_07:4.1
	RISC_OSLib-5_06:4.1
	RISC_OSLib-4_97-4_12_2_8:4.1
	RISC_OSLib-5_05:4.1
	RISC_OSLib-5_04:4.1
	sbrodie_sedwards_16Mar2000:4.1
	RISC_OSLib-5_03:4.1
	RISC_OSLib-5_02:4.1
	RISC_OSLib-4_97-4_12_2_7:4.1
	RISC_OSLib-5_01:4.1
	RISC_OSLib-5_00:4.1
	RISC_OSLib-4_99:4.1
	RISC_OSLib-4_98:4.1
	RISC_OSLib-4_97-4_12_2_6:4.1
	RISC_OSLib-4_97-4_12_2_5:4.1
	RISC_OSLib-4_97-4_12_2_4:4.1
	RISC_OSLib-4_97-4_12_2_3:4.1
	RISC_OSLib-4_97-4_12_2_2:4.1
	sbrodie_RISC_OSLib-4_97-4_12_2_1:4.1
	kbracey_32bit:4.1.0.10
	kbracey_32bit_bp:4.1
	dcotton_autobuild_BaseSW:4.1
	RISC_OSLib-4_97:4.1
	RISC_OSLib-4_96:4.1
	RISC_OSLib-4_95:4.1
	RISC_OSLib-4_94:4.1
	RISC_OSLib-4_93:4.1
	RISC_OSLib-4_92:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	sforrest_daytona_appflash-0_31:4.1
	RISC_OSLib-4_91:4.1
	RISC_OSLib-4_90:4.1
	RISC_OSLib-4_89:4.1
	Ursula_merge:4.1
	RISC_OSLib-4_88:4.1
	RISC_OSLib-4_87:4.1
	blaughto_daytona_appflash-0_30:4.1
	rmanby_clib-4_86:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2009.05.31.17.32.25;	author pnaulls;	state dead;
branches;
next	4.1;

4.1
date	96.11.05.09.25.34;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.25.34;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.55.45;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.34.26;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.51.22;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Rationalize C include path usage
 Detail:
  Parts of RISCOS_Lib use non-standard paths that only really work on native RISC OS compilitation.
  This moves the relevant files into a more normalized dir.h.file format.
 Admin:
  Not tested yet.  #include path changes to follow.

Version 5.54. Not tagged
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * An Abstract Data Type for Regular Expression pattern matching by NFA.
 *
 * LDS, 02-Oct-88
 *
 * Copyright (C) Acorn Computers Ltd., 1988
 */

#ifndef __re_h
#define __re_h

#ifndef BOOL
#define BOOL int
#endif

#ifndef __txt_h
#include "txt.h"
#endif

/*#include "clxdebug.h"*/

typedef long int32;

#ifdef LIB_DEBUGGING
  extern void re_debug(int level);
  /* debugging is turned on to the required level (0 = off) */
#endif

/*
 * The functions described in this header support the building of a Regular
 * Expression (RE) recognition 'engine' (Non-deterministic Finite state
 * Automaton - NFA) while parsing some concrete representation of the RE.
 * A function 'match' is also provided, which searches a buffer for substrings
 * matching the RE represented by an NFA.
 * 
 * The basic paradigm for NFA construction is 2-pass assembly - the expression
 * describing the RE is parsed once to gather information about the size of the
 * corresponding NFA and to check its correctness with respect to abstract-
 * syntactical constraints and implementation limits. If the first pass
 * succeeds then a second pass constructs the NFA (if it fails, the second
 * pass merely repeats the first). In outline:-
 *
 *   REHandle h;
 *   NFA *nfa;
 *   re_begin1(&h);
 *   <calls to re_bra(),re_ket(),re_char(),re_charclass(),re_or(),re_modify()>
 *   re_begin2(&h)
 *   <exactly the same sequence of calls as above>
 *   nfa = re_end(&h);
 *
 * Usually, the sequence of calls made when parsing the source RE are
 * encapsulated in a single function.
 *
 * Dynamically allocated storage can be freed with a single call to free(nfa).
 * The representation used is compact and little storage is used anyway.
 *
 * int re_match(char *buf, int len, NFA *nfa, scanning) returns the index
 * of the first character in [buf, buf+len) to match the pattern described
 * by 'nfa'. No match is signified by returning 'len' (when scanning != 0).
 *
 * re_match can also be used in a constrained mode (scanning == 0) to test
 * whether or not buf matches the specified pattern.
 *
 * CONSTRAINT: the NFA representing a RE may contain at most 254 nodes;
 *             REs bigger than this cannot be handled by this package.
 *
 */


/*
 * CharSets are 256-bit maps of the character set - a bit is 1 if the
 * corresponding character is in the CharSet. Bits are numbered in the
 * direction of increasing significance within words then in the direction
 * of increasing word index.
 */
typedef int32 CharSet[8];

typedef struct re_nfa NFA;      /* an opaque pointer type */

typedef struct {
   int :32, :32, :32, :32, :32, :32, :32, :32, :32, :32, :32, :32;
} REHandle;                     /* an opaque structure */

typedef struct {NFA *nfa;  char *p;  int len;} Pattern;

#ifdef FIELDNUM
#define F_RESET     0x00000001
#define F_AMBIGUOUS 0x00000002
#define F_0ORMORE   0x00000004
#define F_MOST      0x00000008
#define F_1ORMORE   0x00000010
typedef struct {unsigned int start_node; int flags; int start_pos;} SubPattern;  
typedef struct {int start, end;} Ambiguous_entry;
#define MAX_AMBIGUOUS 10
#endif

extern void re_begin1(REHandle *h);
/*
 * Note the start of the first pass of assembling a RE.
 */

extern void re_begin2(REHandle *h);
/*
 * Note the start of the second pass of assembling a RE.
 * This also ends the first pass.
 */

extern NFA *re_end(REHandle *h);
/*
 * End the second pass of assembling a RE and return a pointer to a
 * representation of an NFA capable of recognising it. If any implementation
 * limits have been violated then return NULL.
 */

extern void re_bra(REHandle *h);
/*
 * Open a sub-expression (left bracket).
 * Subexpressions can be (properly) nested to any depth.
 */

extern void re_ket(REHandle *h);
/*
 * Close a sub-expression (right bracket).
 * Subexpressions can be (properly) nested to any depth.
 */

extern void re_or(REHandle *h);
/*
 * Introduce an infix 'or' operator between the last regular expression
 * and the next.
 */

extern void re_modify(REHandle *h, int modifier);
/*
 * Modify the last regular expression with one of '?', '*', or '+',
 * denoting, respectively, 0 or 1, >= 0, >= 1 occurrences are acceptable.
 */

/*
 * The following pseudo-characters are used to represent useful, common
 * classes of character, including all but a specific character or class.
 * For technical reasons, NOT cannot be combined with ANY, SOB, and EOB.
 */
#define  RE_NOT      256        /* add to char or pseudo-char */
#define  RE_ANY      512        /* matches any char */
#define  RE_SOB      513        /* matches Start Of Buffer */
#define  RE_EOB      514        /* matches End Of Buffer */
#define  RE_ALPHA    515        /* matches when isalpha() matches */
#define  RE_ALPHANUM 516        /* matches when isalnum() matches */
#define  RE_DIGIT    517        /* matches when isdigit() matches */
#define  RE_XDIGIT   518        /* matches when isxdigit() matches*/
#define  RE_UPPER    519        /* matches when isupper() matches */
#define  RE_LOWER    520        /* matches when islower() matches */
#define  RE_SPACE    521        /* matches when isspace() matches */
#define  RE_CNTRL    522        /* matches when iscntrl() matches */
#define  RE_GRAPHIC  523        /* matches when isgraph() matches */
#define  RE_PRINT    524        /* matches when isprint() matches */
#define  RE_PUNCT    525        /* matches when ispunct() matches */ 

extern void re_char(REHandle *h, int ch, int modextra);
/*
 * If ch <= 255 recognise only 'ch'. Any of the 256 codes can be recognised.
 * If ch >= 256 && ch <= 511 recognise anything but (ch & 255).
 * If ch == 512 recognise any character.
 * If ch == 513 recognise only the start of the buffer.
 * If ch == 514 recognise only the end of the buffer.
 * If ch >  514 recognise only chars in (NOT in) the corresponding class.
 */

extern void re_charset(REHandle *h, CharSet *charset, int modextra);
/*
 * Recognise any character in 'charset', a bit vector of 256 bits.
 * 'charset' is copied during the second pass of 'assembly' and
 * need not be retained by the caller. It is the caller's problem
 * to set the correct bits in 'charset' (see top of this header).
 */

#ifdef FIELDNUM
extern int re_make_subpattern_table(NFA *nfa, SubPattern *sub_patterns);
#endif

extern int re_match(txt t, txt_index at, NFA *nfa, int scanning, int *p, int nocase
#ifdef FIELDNUM
, Ambiguous_entry *ambiguous
, SubPattern *sub_patterns
, BOOL rescanning
#endif
);
/*
 * If 'scanning', return the index of the first substring of buf[0..len] to
 * match the pattern described by 'nfa'. If no match, return -1.
 * Otherwise, if 'scanning'==0, return len of partial match, len+1
 * if match is total, otherwise -1.
 */

extern void re_head(NFA *nfa, char *buf, int buflen);
/*
 * Return the longest head of the expression to be matched which
 * consists entirely of simple characters (allows accelerated matching
 * using fgrep-like techniques). At most buflen-1 chars and a terminating
 * NUL are returned.
 */

#ifdef  LIB_DEBUGGING
extern void print_nfa(NFA *nfa);
/*
 * Print a presentation of nfa for debugging purposes only.
 */
#endif

#endif
@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
