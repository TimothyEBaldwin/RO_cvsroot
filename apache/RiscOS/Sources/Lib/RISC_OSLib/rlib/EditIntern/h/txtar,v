head	1.3;
access;
symbols
	RISC_OSLib-5_97:1.3
	RISC_OSLib-5_96:1.3
	RISC_OSLib-5_95:1.3
	RISC_OSLib-5_94:1.3
	RISC_OSLib-5_93:1.3
	RISC_OSLib-5_92:1.3
	RISC_OSLib-5_91:1.3
	RISC_OSLib-5_90:1.3
	RISC_OSLib-5_89:1.3
	RISC_OSLib-5_88:1.3
	RISC_OSLib-5_87:1.3
	RISC_OSLib-5_86-1:1.3
	RISC_OSLib-5_86:1.3
	RISC_OSLib-5_85:1.3
	RISC_OSLib-5_84:1.2
	RISC_OSLib-5_83-2:1.2
	RISC_OSLib-5_83-1:1.2
	RISC_OSLib-5_83:1.2
	RISC_OSLib-5_82:1.2
	RISC_OSLib-5_81:1.2
	RISC_OSLib-5_75-2:1.2
	RISC_OSLib-5_80:1.2
	RISC_OSLib-5_79:1.2
	RISC_OSLib-5_78:1.2
	RISC_OSLib-5_75-1:1.1
	RISC_OSLib-5_77:1.1
	RISC_OSLib-5_76:1.1
	RISC_OSLib-5_75:1.1
	RISC_OSLib-5_74:1.1
	RISC_OSLib-5_73:1.1
	RISC_OSLib-5_72:1.1
	RISC_OSLib-5_71:1.1
	RISC_OSLib-5_70:1.1
	RISC_OSLib-5_69:1.1
	RISC_OSLib-5_68:1.1
	RISC_OSLib-5_67:1.1
	RISC_OSLib-5_66:1.1
	RISC_OSLib-5_65:1.1
	RISC_OSLib-5_64:1.1
	RISC_OSLib-5_63:1.1
	RISC_OSLib-5_62:1.1
	RISC_OSLib-5_61:1.1
	RISC_OSLib-5_60:1.1
	RISC_OSLib-5_59:1.1
	RISC_OSLib-5_58:1.1
	RISC_OSLib-5_57:1.1
	RISC_OSLib-5_56:1.1
	RISC_OSLib-5_55:1.1
	RISC_OSLib-5_54:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.04.03.20.39.59;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	G8BXIPKUyzCGAbgy;

1.2
date	2013.10.24.20.03.52;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	8snV0tcFxVQyiAax;

1.1
date	2009.05.31.17.32.21;	author pnaulls;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Switch from ArcEdit style model to clipboard cut & paste model
The txt library part of RISC_OSLib was essentially contrary to everything Acorn was telling its developers, to use the global clipboard.
Additionally, support is added for swap case within a selection.
txt.h:
 Add a new charoption type 'txt_READONLY' to inform txt that the buffer is notionally read only, this is used to supress 'Paste' in the selection menu when appropriate.
 Correct some typos in the comments.
txt1.h:
 Kill off modula 2 dummy structure member.
txtar.h:
 Remove unused function export.
txtfile.h:
 Rename basicimport to be consistent with the text version of the same function. We use 'import' to denote RAM transfers and 'insert' to denote file/scrap transfers throughout.
txtmisc.h:
 Redundant internal functions removed.
txtundo.h:
 Add a new undo operation type 't' for swap case, to avoid polluting the undo buffer with an entire copy of the text where only the case changed.
 Kill off modula 2 double pointer requirement.
txtedit.h:
 Unused structure member 'selectctl' removed.
txt.c:
 Kill off modula 2 double pointer requirement.
txtar.c:
 Refactor message despatch with a switch statement so the save/load/open operations are explicitly checked for, in case the application enables other messages.
txtedit.c:
 Adopt MOVERWRITE, been enabled since 1988 so is probably good to keep.
 Dynamically generate the Select menu by first sending a clipboard request, and fading Paste if no reply comes back.
 Implement changed mouse selection logic.
 Implement different hotkeys and caret navigation.
 Implement copy and paste/replace operations.
 Implement swap case operation.
txtfile.c:
 Type corrections and function rename admin.
 Implement copy and paste/replace operation for detokenised BASIC.
txtmisc.c:
 Supporting functions for clipboard added, supporting functions for ArcEdit removed.
txtscrap.c:
 Make sure the caret is visible for programmatical zero sized selections.
txtundo.c:
 Allow suspension of undo during known complex operations, such as import via RAM transmit. This was a longstanding bug where the import buffer was grabbed in ~4k chunks (even if only 1 byte was being transferred) which in turn resulted in a +4000 undo insertion and a -3999 removal, which given the default undo buffer is only 5k would result in it failing the reversibility test, so no undo was possible.
 Now, during a RAM transmit undo is suspended until the total transfer size is known, and only that data is placed in the undo buffer (subject to the same 5k reversibility limit).
 Add new undo type 't' for swap case operation.
rlibdata.s:
 4 new ints and 1 new BOOL, so RlibSpace increases by 5.

Version 5.85. Tagged as 'RISC_OSLib-5_85'
@
text
@/* Copyright 2009 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Purpose: Internal module within Texts module
 *          Window-system-dependent operations
 *          Arthur-specific module within Texts2.
 *          (A Close cover over Texts2, with some extras (e.g. SetOptions))
 * Author: WRS
 * Status: under development
 * Requires:
 *   h.txt
 *   define BOOL int
 * History:
 *   19th July 87 -- started
 *   02-Nov-87 -- changed to class-like form of window implementation
 *   16-Jan-88: WRS: converted to C
 *   14-Mar-88: WRS: font width and height separated.
 *   10-Feb-90: IDJ: added new fields to txtar_options for setting work area size
 */

BOOL txtar_initwindow(txt, char *title);
/* Add a window to the implementation of txt. See txt1 for
explanation of the mechanics of this. Returns FALSE if not enough
space. */

/* -------- Arthur-specific Display Options. -------- */

/* Some of these are not too Arthur-specific. The general format should be
followed by the matching interface for other systems. */

void txtar_clone_current_window(txt t);
/* The current primary window on t is a txtar one. Clone it, using the
txt3 facilities, resulting in two windows. They should divide up between
them the screen space that the old one used to occupy. */

typedef struct {
  BOOL fixfont;
  int forecolour;
  int backcolour;
  char fontname[100];
  int fontwidth; /* in points */
  int fontheight; /* in points */
  int leading; /* in OS-units */
  int margin; /* in OS-units */
  BOOL wraptowindow; /* Alternative is wrap at screen width */
#ifdef SET_MISC_OPTIONS
  int  overwrite;
  int  wordtab;
  int  wordwrap;
  int  undosize;
#endif
#ifdef BIG_WINDOWS
  BOOL big_windows;
  int  big_window_size;
#define BIG_WINDOW_SIZE_LIMIT 480 /* Measured in characters. Mostly arbitrary: the writable icon will
                                  limit you to 3 digits, the 16 bit offsets will limit you to
                                  2^14 (worst case when whole buffer gets expanded to '[hh]'), the
                                  VDU should be good to 2^15/(bbc_GCharSpaceX in EX2) = 8192 */
#endif
} txtar_options;
/* Future fields may be added to this record in the future. So, always
update using a get before a set. */

void txtar_getoptions(txt, txtar_options* /*out*/);
void txtar_setoptions(txt, txtar_options* /*in*/);

/* end */
@


1.2
log
@Some library fixes
Fix for problem passing long command lines via system(), while there are good arguments to leave the threshold at 255, non DDEUtils aware programs get brutally truncated command strings, and since the old threshold of 255 applied when the kernel handled 256 command lines, upping the limit to 1k is no worse than before.
Fix for Edit failing to draw lines of text longer than 192 characters (ticket #350). Several factors were conspiring here: on a mode change the window width in characters wasn't being clamped, whereas user entered limits in the menu were, then the internal buffer ("PAINTBUFSIZE") was too short so lines got truncated, and when larger than 256 got wrapped modulo 256 due to the use of an array of chars. Now set at compile time with BIG_WINDOW_SIZE_LIMIT with a new theoretical maximum of 8192. Currently limited to 480 since it uses stack variables.

In the C library:
 armsys.c: adapt the threshold at which to use DDEUtils based on the kernel version number
 scanf.c: squash a warning
 time.c: mark the table of month lengths as constant so we can claw back 13 words of static workspace without having to change the stubs

In RISC OS lib:
 bbc.c: remove local definitions of some SWI numbers
 template.c: squash a warning
 txt.c: delete Modula-2 support
 txt1.c: compare pointer with NULL not an integer
 txtar.c: introduce BIG_WINDOW_SIZE_LIMIT, rationalise a few sprintf's, mark private functions as static
 txtundo.c/txtedit.c: squash old style function warnings
 txtoptmenu.c: clamp the window width read from Edit$Options properly, delete long disabled code
 txtscrap.c: dead function deleted


Version 5.78. Tagged as 'RISC_OSLib-5_78'
@
text
@a42 3
void txtar_movetoback(txt);
/* Functionality of the move-to-back mouse button. Gives away the cursor. */

@


1.1
log
@Rationalize C include path usage
 Detail:
  Parts of RISCOS_Lib use non-standard paths that only really work on native RISC OS compilitation.
  This moves the relevant files into a more normalized dir.h.file format.
 Admin:
  Not tested yet.  #include path changes to follow.

Version 5.54. Not tagged
@
text
@d70 4
@

