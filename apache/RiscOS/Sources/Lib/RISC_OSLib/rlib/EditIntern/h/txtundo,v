head	1.2;
access;
symbols
	RISC_OSLib-5_97:1.2
	RISC_OSLib-5_96:1.2
	RISC_OSLib-5_95:1.2
	RISC_OSLib-5_94:1.2
	RISC_OSLib-5_93:1.2
	RISC_OSLib-5_92:1.2
	RISC_OSLib-5_91:1.2
	RISC_OSLib-5_90:1.2
	RISC_OSLib-5_89:1.2
	RISC_OSLib-5_88:1.2
	RISC_OSLib-5_87:1.2
	RISC_OSLib-5_86-1:1.2
	RISC_OSLib-5_86:1.2
	RISC_OSLib-5_85:1.2
	RISC_OSLib-5_84:1.1
	RISC_OSLib-5_83-2:1.1
	RISC_OSLib-5_83-1:1.1
	RISC_OSLib-5_83:1.1
	RISC_OSLib-5_82:1.1
	RISC_OSLib-5_81:1.1
	RISC_OSLib-5_75-2:1.1
	RISC_OSLib-5_80:1.1
	RISC_OSLib-5_79:1.1
	RISC_OSLib-5_78:1.1
	RISC_OSLib-5_75-1:1.1
	RISC_OSLib-5_77:1.1
	RISC_OSLib-5_76:1.1
	RISC_OSLib-5_75:1.1
	RISC_OSLib-5_74:1.1
	RISC_OSLib-5_73:1.1
	RISC_OSLib-5_72:1.1
	RISC_OSLib-5_71:1.1
	RISC_OSLib-5_70:1.1
	RISC_OSLib-5_69:1.1
	RISC_OSLib-5_68:1.1
	RISC_OSLib-5_67:1.1
	RISC_OSLib-5_66:1.1
	RISC_OSLib-5_65:1.1
	RISC_OSLib-5_64:1.1
	RISC_OSLib-5_63:1.1
	RISC_OSLib-5_62:1.1
	RISC_OSLib-5_61:1.1
	RISC_OSLib-5_60:1.1
	RISC_OSLib-5_59:1.1
	RISC_OSLib-5_58:1.1
	RISC_OSLib-5_57:1.1
	RISC_OSLib-5_56:1.1
	RISC_OSLib-5_55:1.1
	RISC_OSLib-5_54:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.04.03.20.39.59;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	G8BXIPKUyzCGAbgy;

1.1
date	2009.05.31.17.32.21;	author pnaulls;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Switch from ArcEdit style model to clipboard cut & paste model
The txt library part of RISC_OSLib was essentially contrary to everything Acorn was telling its developers, to use the global clipboard.
Additionally, support is added for swap case within a selection.
txt.h:
 Add a new charoption type 'txt_READONLY' to inform txt that the buffer is notionally read only, this is used to supress 'Paste' in the selection menu when appropriate.
 Correct some typos in the comments.
txt1.h:
 Kill off modula 2 dummy structure member.
txtar.h:
 Remove unused function export.
txtfile.h:
 Rename basicimport to be consistent with the text version of the same function. We use 'import' to denote RAM transfers and 'insert' to denote file/scrap transfers throughout.
txtmisc.h:
 Redundant internal functions removed.
txtundo.h:
 Add a new undo operation type 't' for swap case, to avoid polluting the undo buffer with an entire copy of the text where only the case changed.
 Kill off modula 2 double pointer requirement.
txtedit.h:
 Unused structure member 'selectctl' removed.
txt.c:
 Kill off modula 2 double pointer requirement.
txtar.c:
 Refactor message despatch with a switch statement so the save/load/open operations are explicitly checked for, in case the application enables other messages.
txtedit.c:
 Adopt MOVERWRITE, been enabled since 1988 so is probably good to keep.
 Dynamically generate the Select menu by first sending a clipboard request, and fading Paste if no reply comes back.
 Implement changed mouse selection logic.
 Implement different hotkeys and caret navigation.
 Implement copy and paste/replace operations.
 Implement swap case operation.
txtfile.c:
 Type corrections and function rename admin.
 Implement copy and paste/replace operation for detokenised BASIC.
txtmisc.c:
 Supporting functions for clipboard added, supporting functions for ArcEdit removed.
txtscrap.c:
 Make sure the caret is visible for programmatical zero sized selections.
txtundo.c:
 Allow suspension of undo during known complex operations, such as import via RAM transmit. This was a longstanding bug where the import buffer was grabbed in ~4k chunks (even if only 1 byte was being transferred) which in turn resulted in a +4000 undo insertion and a -3999 removal, which given the default undo buffer is only 5k would result in it failing the reversibility test, so no undo was possible.
 Now, during a RAM transmit undo is suspended until the total transfer size is known, and only that data is placed in the undo buffer (subject to the same 5k reversibility limit).
 Add new undo type 't' for swap case operation.
rlibdata.s:
 4 new ints and 1 new BOOL, so RlibSpace increases by 5.

Version 5.85. Tagged as 'RISC_OSLib-5_85'
@
text
@/* Copyright 2009 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Title: h.txtundo
 * Purpose: Undo facilities for text objects
 * Author: W. Stoye
 * Status: system-independent
 * Requires:
 *   h.txt
 * History:
 *   13-Oct-87: started
 *   02-Mar-88: comments improved.
 *   08-Mar-88: WRS: txtundo_commit added.
 *   14-Mar-88: WRS: undoing of selection added.
 */

void txtundo_setbufsize(txt, int nbytes);
/* Every text object has an undo buffer within it. By default this is very
small, this call is necessary to make it larger. This buffer is used to
record all changes to the text in a form that allows the changes to be
reversed. */

void txtundo_separate_major_edits(txt);
/* This may be called between "major" edits, so that undoing can be done in
units that the user understands, rather than single moves, deletes and
inserts. Adjacent separators, without intermediate edits, will be ignored. */

void txtundo_purge_undo(txt);
/* Prevent undoing from going back beyond this point. This is useful if
the text object has been edited by direct access to txt_arraysegment, or if
for any other reason going back beyond this point is not reasonable. */

BOOL txtundo_suspend_undo(txt, BOOL);
/* Temporarily suspend (or resume) puts into the undo buffer. This is useful if
lots of edits are being implicitly being made by calling txt's internal routines
to achieve some overall much more simply expressed edit. The more simple
version can then be inserted manually rather than polluting the undo buffer
with all the intermediate steps. */

typedef enum {
  txtundo_MINOR,   /* successfully reversed a move/copy/delete */
  txtundo_MAJOR,   /* encountered a major edit separator */
  txtundo_RANOUT   /* coudn't do anything, it was too long ago and has
                    * been discarded, or there were no previous edits. */
} txtundo_result;

void txtundo_init(txt);
/* Prepare to start a sequence of undo operations. */

txtundo_result txtundo_undo(txt);
/* undo the last insert, delete, select or move operation. If successful the
inverse operation will be invoked on the text, further adding to the undo
buffer. A pointer to "current position" within the undo buffer is maintained,
so that subsequent calls to undo go further back into history. The pointer is
reset by a call to txtundo_init. No other edits to the text should occur
between a txtundo_init and subsequent undo/redo calls. */

txtundo_result txtundo_redo(txt);
/* Redo an operation caused by undo. The result concerns the operation that
will be processed by the next redo, this make it simple to contruct a loop
that redoes a major edit. */

/* Given a large enough undo buffer, undo/redo allow the client to move
at will between all past states of this text object. An operation will not be
undone unless its inverse will also fit in the undo buffer, so an undo
operation is always reversible. */

void txtundo_commit(txt);
/* At the end of a sequence of undos, this removes the ability to redo
the undos. In doing so it frees the space within the undo buffer required to
save the inverse operations. */

/* -------- Implementation Details. -------- */

/* The rest of this interface is only accessed within the implementation
of text objects. */

typedef struct txtundo__state *txtundo; /* abstract undo buffer state. */

txtundo txtundo_new(void); /* with small undo buffer. Will return
0 if not enough store. */

void txtundo_dispose(txtundo);

void txtundo_putbytes(txtundo, char*, int);
void txtundo_putnumber(txtundo, int);
void txtundo_putcode(txtundo, char);
/* The main editor buffer should use these in the following way:
  when deleting n chars:
    putbytes the chars themselves
    putnumber n
    putcode 'i'
  when inserting n chars:
    putnumber n
    putcode 'd'
  when moving from Index m to Index n:
    putnumber m
    putcode 'm'
  when setting the selection:
    putnumber index-of-old-start-of-selection
    putnumber index-of-old-end-of-selection
    putcode 'l'
  when toggling the case of the selection:
    putcode 't'
This can be done without regard for overflow etc.

Calling txtundo_putcode when not nested within any undo op on that
text object, has the additional effect of calling txtundo_init.
*/

void txtundo_pr(txtundo u);
/* For debugging purposes: print out a representation of the
undo buffer to the trace output stream. */

/* end */
@


1.1
log
@Rationalize C include path usage
 Detail:
  Parts of RISCOS_Lib use non-standard paths that only really work on native RISC OS compilitation.
  This moves the relevant files into a more normalized dir.h.file format.
 Admin:
  Not tested yet.  #include path changes to follow.

Version 5.54. Not tagged
@
text
@d40 1
a40 1
void txtundo_prevent_undo(txt);
d45 7
d63 6
a68 6
/* undo the last insert, move or delete operation. If successful the inverse
operation will be invoked on the text, further adding to the undo buffer. A
pointer to "current position" within the undo buffer is maintained, so that
subsequent calls to undo go further back into history. The pointer is reset
by a call to txtundo_init. No other edits to the text should occur between a
txtundo_init and subsequent undo/redo calls. */
d95 1
a95 2
void txtundo_dispose(txtundo*);
/* >>>> The extra * is for M2-compatibility: it will change. */
d115 2
@

