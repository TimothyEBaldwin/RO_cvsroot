head	1.3;
access;
symbols
	RISC_OSLib-5_97:1.3
	RISC_OSLib-5_96:1.3
	RISC_OSLib-5_95:1.3
	RISC_OSLib-5_94:1.3
	RISC_OSLib-5_93:1.3
	RISC_OSLib-5_92:1.3
	RISC_OSLib-5_91:1.3
	RISC_OSLib-5_90:1.3
	RISC_OSLib-5_89:1.3
	RISC_OSLib-5_88:1.3
	RISC_OSLib-5_87:1.3
	RISC_OSLib-5_86-1:1.3
	RISC_OSLib-5_86:1.3
	RISC_OSLib-5_85:1.3
	RISC_OSLib-5_84:1.1
	RISC_OSLib-5_83-2:1.1
	RISC_OSLib-5_83-1:1.1
	RISC_OSLib-5_83:1.1
	RISC_OSLib-5_82:1.1
	RISC_OSLib-5_81:1.1
	RISC_OSLib-5_75-2:1.1
	RISC_OSLib-5_80:1.1
	RISC_OSLib-5_79:1.1
	RISC_OSLib-5_78:1.1
	RISC_OSLib-5_75-1:1.1
	RISC_OSLib-5_77:1.1
	RISC_OSLib-5_76:1.1
	RISC_OSLib-5_75:1.1
	RISC_OSLib-5_74:1.1
	RISC_OSLib-5_73:1.1
	RISC_OSLib-5_72:1.1
	RISC_OSLib-5_71:1.1
	RISC_OSLib-5_70:1.1
	RISC_OSLib-5_69:1.1
	RISC_OSLib-5_68:1.1
	RISC_OSLib-5_67:1.1
	RISC_OSLib-5_66:1.1
	RISC_OSLib-5_65:1.1
	RISC_OSLib-5_64:1.1
	RISC_OSLib-5_63:1.1
	RISC_OSLib-5_62:1.1
	RISC_OSLib-5_61:1.1
	RISC_OSLib-5_60:1.1
	RISC_OSLib-5_59:1.1
	RISC_OSLib-5_58:1.1
	RISC_OSLib-5_57:1.1
	RISC_OSLib-5_56:1.1
	RISC_OSLib-5_55:1.1
	RISC_OSLib-5_54:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.04.03.22.43.41;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	4ZOxMlETYoK3gcgy;

1.2
date	2015.04.03.20.39.58;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	G8BXIPKUyzCGAbgy;

1.1
date	2009.05.31.17.32.21;	author pnaulls;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Clean up pass
Trim any #if FALSE switches over a decade old, and keep #if TRUE.
Accept EDIT2 and FMTTEXT1 bracketed code.
Remove unused internal functions txt1_dooaction txt1_dosetoaction.
Retagged as RISC_OSLib-5_85.
@
text
@/* Copyright 2009 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Title: h.txt1
 * Purpose: Internal module for module texts.
 *          Implementation of the text buffer.
 * Author: WRS
 * Status: under development.
 * Requires:
 *   BOOL
 *   h.txt
 *   h.txtundo
 * History:
 *   21 July 87 -- started
 *   18-Dec-87: WRS: converted to C.
 *   02-Mar-88: WRS: use of BOOL.
 */

typedef enum {txt_REFUSE, txt_CYCLE, txt_EXTEND} txt_overflowaction;

/* >>>> Some of the descriptions in the window record are not up to date,
and should be rephrased in the new flag formats. */

#define txt1_INBUFMAX 63
#define txt1_MAXWINDOWSPERTEXT 8

typedef int txt1_bufindex;    /* index into text implementation buffer */
typedef struct txt1_imarker { /* real structure of a txt_marker */
  struct txt1_imarker *next;
  txt1_bufindex pos;
} txt1_imarker;
typedef int txt1_windex;      /* [1..txt1_MAXWINDOWSPERTEXT */
typedef int txt1_zits;        /* small absolute measure of screen size */
typedef int txt1_percent;     /* [0..100] */

typedef enum {            /* possible end-of-line cases for paint */
  txt1_CECONTINUE,
  txt1_CETEXTLINE,
  txt1_CEDISPLINE
} txt1_callendopt;

typedef struct txt1_call {   /* paint call structure */
  struct txt1_call *next;    /* chain of calls */
  txt1_zits x;          /* coords of call within window */
  txt1_zits y;
  char *ad;             /* where to find characters */
  int n;                /* no of characters to paint */
  txt1_zits width;      /* space to fill with paper as you go. */
  BOOL highlight;       /* highlight all of that */
  txt1_callendopt callendopt;
                        /* do nothing to the right of this call,
                        or pad to the right with paper colour, or
                        right justify (if you wish to). */
} txt1_call;

/* A text object is viewed through a "window", which encapsulates all
system-dependent parts of the text implementation. A Window is a class-like
object, allowing several separate implementations of windows to exist. */

/* window state */
typedef struct txt1_window {
  /* the paint environment */
  txt1_zits limx;      /* size of visible window: (limx,limy) is just off */
  txt1_zits limy;
  txt1_zits linesep;   /* Vertical distance between text lines. */
  BOOL highlight_reversable; /* highlight display is reversable */
  BOOL italic;         /* repaint whole lines at a time. This bit is
                       set/cleared by the sys-dep part, and causes the
                       rest to always refresh whole lines rather than
                       just partial ones. If in doubt, leave 0. */

  /* the scroll bar */
  txt1_percent ioffset;    /* offset within the complete image of the
                           start of the window */
  txt1_percent isize;      /* size of the window rel to total image. */

  /* the caret */
  txt1_zits caretx;    /* position of the bot l.h. corner of
                       the char under the caret */
  txt1_zits carety;
  txt1_zits caretoffsetx; /* Used when MoveHorizontal/Vertical result
                          in the caret and dot not being coincicent. */
  txt1_zits caretoffsety;
  txt1_imarker caret;  /* usually points at gapend */

  /* the limits of displayed characters in this window */
  txt1_imarker firstvis;   /* first visible char, for calculating this */
  txt1_imarker lastvis;    /* last visible char */
  txt1_zits firstvisy;     /* y coord of first visible char */
  txt1_zits lastvisy;      /* y coord of first char not visible */

  /* workspace for replacechars screen update. */
  txt1_zits dotx;
  txt1_zits doty;
  txt1_zits delendx;
  txt1_zits delendy;

  /* system-dependent stuff */
  void *syshandle;
  /* The system-dependent module uses this for any additional state:
  e.g. window, font, title, paint handle. */

  /* procedures */
  void(*doshow)(txt);           /* Make the window visible. */
  void(*dohide)(txt);           /* Make the window invisible. */
  void(*dosettitle)(txt,char*);
  void(*disposewindow)(txt);
    /* Dispose of t->w->syshandle and associated resources. t->w will be
    cleaned up afterwards. */
  void(*rawsetsize)(txt);
    /* The fields isize and ioffset of the text state have been updated. The
    window is declared to show isize percent of the image, starting ioffset
    from its top. Update the scroll bar, if necessary, to reflect this. This
    routine must be fast if called with slight changes that do not affect the
    display, or with the same arguments as last time, as the caller cannot know
    how small a change is important. */
  void(*rawmeasure)(txt,char** /*inout*/,
      int* spacewidth /*inout*/,txt1_zits* /*out*/);
    /* This routine can be fed any characters. It will produce a representation
    (of some sort) for every single character code. If (FixPitch &
    t->charoptions) != 0 then they will all be the same size. It will stop if
    the display spaceWidth is used up, or if we run out of characters. at and
    n will be advanced as appropriate to show which characters we have managed
    to paint. On exit spacewidth shows the amount of space remaining. */

    /* It is necessary that measuring a sequence of characters comes to exactly
    the same answer as measuring any combination of substrings, e.g. width is a
    function of character and width of string is sum of widths of constituent
    characters. */

  void(*rawpaintseveral)(txt,txt1_call*,int alreadycorrect);
    /* Actually paint the given characters at the given location in the window.
    They should take up the same amount of space as rawmeasure predicted. The
    characters will be "width" wide, as according to rawmeasure. If "highlight"
    then invert (or something) these characters as they are part of the
    selection. If CECONTINUE then fill from the end of this string to the
    right hand edge of the window with paper, as there may be junk to rub out.
    RawPaint(t,x,y,0,0,n,0,1) is used to blank areas of the window.
    */

    /* Highlighting need not be reversible, but must not affect the size of the
    characters. Any change in highlighting causes a repaint of the data
    affected, but with alreadycorrect==1 (in all other circumstances it will
    be 0). In such circumstances, the window implementation may simply reverse
    the highlight of the indicated areas of the display, if it so desires.
    Trailing space filled in due to padtoright should not be highlighted. This
    feature will only be used if t->highlightreversable != 0. */

  int(*rawcopylines)(txt,txt1_zits srcy, txt1_zits dsty, txt1_zits size);
    /* Perform an on-screen copy of the source area, to the destination one.
    Overlapping areas should be handled correctly. If for any reason we can't
    arrange this then you'll have to order a redisplay of the whole thing,
    clipping as you can. Alternatively, return 0 and the text will
    repaint the entire window. */
    /* Redraw calls should not be done nested within this call. */
  void(*rawhidecaret)(txt);
  void(*rawshowcaret)(txt);
    /* Control of the visible caret, whose position within the window is at
    (t->caretx + t->caretoffsetx, t->carety + t->caretoffsety). This must be
    reversibly drawn on the screen, so that drawing and then undrawing have no
    net effect. Will not be called if NOT (Caret IN charOptionset). */
  int(*dovisiblelinecount)(txt);
  int(*dovisiblecolcount)(txt);
    /* Lines is precise, cols is a guess. */
  int(*doget)(txt);
    /* Input from the user must be queued up here. When something arrives,
    t->eventproc should be called if it is not (txt_event_proc) 0. It may
    perform any edits, so no secret locks may be held. */
  int(*doqueue)(txt);
  void(*dounget)(txt, int);
    /* Stuff the indicated value into the front of the queue. */
  void(*donewcharoptions)(txt,txt_charoption/*previous*/);
    /* The CharOptions have been changed by the client. Probably the only
    interesting change is that if FixPitch changes, rearrangement of fonts
    may be necessary. If Wrap or FixPitch has changed a redisplay will occur
    after this. */
  int(*dosyshandle)(txt);
} txt1_window;

typedef struct txt1_str {        /* the overall state object for a text */

    /* The main character array */
    char *buf;         /* the character buffer */
    txt1_bufindex top; /* no of chars in buffer - 1 */
    txt1_imarker *marksbefore;
    txt1_imarker *marksafter;
    txt1_bufindex gapstart;
    txt1_bufindex gapend;
    txt1_bufindex txtstart;

    /* the selection */
    txt1_imarker selstart;
    txt1_imarker selend;

    /* varied options */
    txt_charoption charoptionset;
    txt_overflowaction oaction;
    txtundo undostate;

    /* the input buffer */
    txt_eventcode inbuf[txt1_INBUFMAX+1];
    int inbufhead;
    int inbuftail;     /* head==tail ? buffer empty */
    txt_event_proc eventproc;
    void *eventprochandle;
    int eventnest;         /* for delayed deletion. 0 -> not nested. */
    BOOL disposepending;

    /* display calculation temporary, not inspected by window paint ops */
    txt1_call *calls;      /* calls pending */

    /* windows */
    txt1_window *w;        /* current window */
                           /* duplicate of one of following array */
    int nwindows;
    txt1_windex witer;     /* 0 or windex, used in window iteration */
    txt1_window *windows[txt1_MAXWINDOWSPERTEXT+1];

    int last_ref;          /* for Message_DataSaved handling */

} txt1_str;

/* About graphics coordinates: The window is measured in "zits", which are
small absolute units of measurement. (0,0) is the top left hand corner of the
window, (limx,limy) is just off at the bottom right. A character position is
specified by giving the coordinates of its bottom left hand corner of the
character. The characters' visual representations may overlap horizontally
if the "italic" flag is set, they may not overlap vertically. */

/* Destruction of the text within recursive calls to event handlers only
destroys the text when the last one has returned. This is what the eventnest
and disposepending calls are for. It must be implemented by event handling
code in txt2. */

/* -------- The text buffer. -------- */

/* These routines are provided by this module. For explanations see
h.txt. */

BOOL txt1_inittextbuffer(txt);
/* returns FALSE if not enough store */
void txt1_disposetextbuffer(txt);

int txt1_dobufsize(txt);
int txt1_dosetbufsize(txt, int);
txt_charoption txt1_docharoptions(txt);
void txt1_dosetcharoptions(txt, txt_charoption affect, txt_charoption values);
void txt1_dosetdisplayok(txt);

txt_index txt1_dodot(txt);
txt_index txt1_dosize(txt);
void txt1_dosetdot(txt, txt_index);
void txt1_domovedot(txt, int by);
void txt1_doinsertchar(txt, char);
void txt1_doinsertstring(txt, char*);
void txt1_doreplacechars(txt, int ntodelete, char*, int n);
void txt1_dodelete(txt, int);

char txt1_docharatdot(txt);
char txt1_docharat(txt, txt_index);
void txt1_docharsatdot(txt, char *buffer, int *n /*inout*/);
void txt1_doreplaceatend(txt t, int ntodelete, char *buffer, int n);

void txt1_domovevertical(txt, int by, int caretstill);
void txt1_domovehorizontal(txt, int by);

/* -------- selection and Marker Operations. -------- */

void txt1_donewmarker(txt, txt1_imarker*);
void txt1_domovemarker(txt, txt1_imarker*, txt_index);
void txt1_domovedottomarker(txt, txt1_imarker*);
txt_index txt1_doindexofmarker(txt, txt1_imarker*);
void txt1_dodisposemarker(txt, txt1_imarker*);

int txt1_doselectset(txt);
txt_index txt1_doselectstart(txt);
txt_index txt1_doselectend(txt);
void txt1_dosetselect(txt, txt_index, txt_index);

/* -------- Direct Access to the Underlying text. -------- */

void txt1_doarraysegment(txt, txt_index, char**, int*);

/* -------- Display. -------- */

/* These routines are not called by the program client, but from the window
system. Need to be able to sevice redraws, changes in window font/size,
scroll bar operations, mouse picks. */

void txt1_redisplay(txt, int fresh);
/* Redisplay the whole thing. This will happen using a single call to
RawPaintseveral, which will entirely cover all visible parts of the window.
No calls to RawCopyLines will be generated, and nothing assumed about what
is on the screen. */

/* If "fresh" is specified then this is a complete redisplay of all visible
portions of the window, so reformatting (e.g. dragging the bottom of file
down to the bottom of window) is permitted. */

void txt1_checklastvis(txt);
/* This happens in the special case when the window has shrunk, without
stepping on the caret. lastvis must be recalculated, no redisplay will be
necessary.
*/

void txt1_thumbforw(txt, int by);
/* Ideally, lastVis advances by "by" percent of the distance from it
to the end of the array. some approximation to this would be adequate. */

void txt1_thumbback(txt, int by);
/* Ideally, firstVis retreats by "by" percent of the distance from it
to the beginning of the array. */

txt_index txt1_windowcoordstoindex(txt, txt1_zits x, txt1_zits y);
/* say what character is displayed at the given window coordinates, such
that if a mouse pick happens there we know what character is being
indicated. */

/* end */
@


1.2
log
@Switch from ArcEdit style model to clipboard cut & paste model
The txt library part of RISC_OSLib was essentially contrary to everything Acorn was telling its developers, to use the global clipboard.
Additionally, support is added for swap case within a selection.
txt.h:
 Add a new charoption type 'txt_READONLY' to inform txt that the buffer is notionally read only, this is used to supress 'Paste' in the selection menu when appropriate.
 Correct some typos in the comments.
txt1.h:
 Kill off modula 2 dummy structure member.
txtar.h:
 Remove unused function export.
txtfile.h:
 Rename basicimport to be consistent with the text version of the same function. We use 'import' to denote RAM transfers and 'insert' to denote file/scrap transfers throughout.
txtmisc.h:
 Redundant internal functions removed.
txtundo.h:
 Add a new undo operation type 't' for swap case, to avoid polluting the undo buffer with an entire copy of the text where only the case changed.
 Kill off modula 2 double pointer requirement.
txtedit.h:
 Unused structure member 'selectctl' removed.
txt.c:
 Kill off modula 2 double pointer requirement.
txtar.c:
 Refactor message despatch with a switch statement so the save/load/open operations are explicitly checked for, in case the application enables other messages.
txtedit.c:
 Adopt MOVERWRITE, been enabled since 1988 so is probably good to keep.
 Dynamically generate the Select menu by first sending a clipboard request, and fading Paste if no reply comes back.
 Implement changed mouse selection logic.
 Implement different hotkeys and caret navigation.
 Implement copy and paste/replace operations.
 Implement swap case operation.
txtfile.c:
 Type corrections and function rename admin.
 Implement copy and paste/replace operation for detokenised BASIC.
txtmisc.c:
 Supporting functions for clipboard added, supporting functions for ArcEdit removed.
txtscrap.c:
 Make sure the caret is visible for programmatical zero sized selections.
txtundo.c:
 Allow suspension of undo during known complex operations, such as import via RAM transmit. This was a longstanding bug where the import buffer was grabbed in ~4k chunks (even if only 1 byte was being transferred) which in turn resulted in a +4000 undo insertion and a -3999 removal, which given the default undo buffer is only 5k would result in it failing the reversibility test, so no undo was possible.
 Now, during a RAM transmit undo is suspended until the total transfer size is known, and only that data is placed in the undo buffer (subject to the same 5k reversibility limit).
 Add new undo type 't' for swap case operation.
rlibdata.s:
 4 new ints and 1 new BOOL, so RlibSpace increases by 5.

Version 5.85. Tagged as 'RISC_OSLib-5_85'
@
text
@a257 2
txt_overflowaction txt1_dooaction(txt);
void txt1_dosetoaction(txt, txt_overflowaction);
@


1.1
log
@Rationalize C include path usage
 Detail:
  Parts of RISCOS_Lib use non-standard paths that only really work on native RISC OS compilitation.
  This moves the relevant files into a more normalized dir.h.file format.
 Admin:
  Not tested yet.  #include path changes to follow.

Version 5.54. Not tagged
@
text
@a193 2
    int dud;  /* >>>> for M2 compatibility */

@

