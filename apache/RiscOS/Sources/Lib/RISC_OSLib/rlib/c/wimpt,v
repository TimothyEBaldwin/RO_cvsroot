head	4.5;
access;
symbols
	RISC_OSLib-5_97:4.5
	RISC_OSLib-5_96:4.5
	RISC_OSLib-5_95:4.5
	RISC_OSLib-5_94:4.5
	RISC_OSLib-5_93:4.5
	RISC_OSLib-5_92:4.5
	RISC_OSLib-5_91:4.5
	RISC_OSLib-5_90:4.5
	RISC_OSLib-5_89:4.5
	RISC_OSLib-5_88:4.5
	RISC_OSLib-5_87:4.5
	RISC_OSLib-5_86-1:4.5
	RISC_OSLib-5_86:4.5
	RISC_OSLib-5_85:4.5
	RISC_OSLib-5_84:4.5
	RISC_OSLib-5_83-2:4.5
	RISC_OSLib-5_83-1:4.5
	RISC_OSLib-5_83:4.5
	RISC_OSLib-5_82:4.4
	RISC_OSLib-5_81:4.4
	RISC_OSLib-5_75-2:4.4
	RISC_OSLib-5_80:4.4
	RISC_OSLib-5_79:4.4
	RISC_OSLib-5_78:4.4
	RISC_OSLib-5_75-1:4.4
	RISC_OSLib-5_77:4.4
	RISC_OSLib-5_76:4.4
	RISC_OSLib-5_75:4.4
	RISC_OSLib-5_74:4.4
	RISC_OSLib-5_73:4.4
	RISC_OSLib-5_72:4.4
	RISC_OSLib-5_71:4.4
	RISC_OSLib-5_70:4.4
	RISC_OSLib-5_69:4.4
	RISC_OSLib-5_68:4.4
	RISC_OSLib-5_67:4.4
	RISC_OSLib-5_66:4.4
	RISC_OSLib-5_65:4.4
	RISC_OSLib-5_64:4.4
	RISC_OSLib-5_63:4.4
	RISC_OSLib-5_62:4.4
	RISC_OSLib-5_61:4.4
	RISC_OSLib-5_60:4.4
	RISC_OSLib-5_59:4.4
	RISC_OSLib-5_58:4.4
	RISC_OSLib-5_57:4.4
	RISC_OSLib-5_56:4.4
	RISC_OSLib-5_55:4.4
	RISC_OSLib-5_54:4.4
	RISC_OSLib-5_53:4.3
	RISC_OSLib-5_52:4.3
	RISC_OSLib-5_51:4.3
	RO_5_07:4.3
	RISC_OSLib-5_50:4.3
	RISC_OSLib-5_49:4.3
	RISC_OSLib-5_46-4_64_2_1:4.3
	NoInlineAsm:4.3.0.2
	RISC_OSLib-5_48:4.3
	RISC_OSLib-5_47:4.3
	RISC_OSLib-5_46:4.3
	RISC_OSLib-5_45:4.3
	RISC_OSLib-5_44:4.3
	RISC_OSLib-5_43:4.2
	RISC_OSLib-5_42:4.2
	RISC_OSLib-5_41:4.2
	RISC_OSLib-5_40:4.2
	RISC_OSLib-5_39:4.2
	RISC_OSLib-5_38:4.2
	RISC_OSLib-5_37:4.2
	RISC_OSLib-5_36:4.2
	RISC_OSLib-5_35:4.2
	RISC_OSLib-5_34:4.2
	RISC_OSLib-5_33-4_50_2_1:4.1.14.1
	sbrodie_dev:4.1.0.14
	sbrodie_dev_bp:4.1
	RISC_OSLib-5_33:4.1
	RISC_OSLib-5_32:4.1
	RISC_OSLib-5_31:4.1
	RISC_OSLib-5_30:4.1
	RISC_OSLib-5_29:4.1
	RISC_OSLib-5_28:4.1
	RISC_OSLib-5_27:4.1
	RISC_OSLib-5_26:4.1
	RISC_OSLib-5_25:4.1
	RISC_OSLib-5_24:4.1
	RISC_OSLib-5_01-4_16_2_5:4.1
	RISC_OSLib-5_23:4.1
	RISC_OSLib-5_22:4.1
	RISC_OSLib-5_21:4.1
	RISC_OSLib-5_20:4.1
	RISC_OSLib-5_19:4.1
	RISC_OSLib-5_18:4.1
	RISC_OSLib-5_17:4.1
	RISC_OSLib-5_16:4.1
	RISC_OSLib-5_15:4.1
	dellis_autobuild_BaseSW:4.1
	RISC_OSLib-5_14:4.1
	RISC_OSLib-5_13:4.1
	RISC_OSLib-5_12:4.1
	RISC_OSLib-5_01-4_16_2_4:4.1
	RISC_OSLib-5_11:4.1
	RISC_OSLib-5_01-4_16_2_3:4.1
	RISC_OSLib-5_01-4_16_2_2:4.1
	RISC_OSLib-5_10:4.1
	RISC_OSLib-5_01-4_16_2_1:4.1
	Bethany:4.1.0.12
	RISC_OSLib-5_09:4.1
	RISC_OSLib-5_08:4.1
	RISC_OSLib-5_07:4.1
	RISC_OSLib-5_06:4.1
	RISC_OSLib-4_97-4_12_2_8:4.1
	RISC_OSLib-5_05:4.1
	RISC_OSLib-5_04:4.1
	sbrodie_sedwards_16Mar2000:4.1
	RISC_OSLib-5_03:4.1
	RISC_OSLib-5_02:4.1
	RISC_OSLib-4_97-4_12_2_7:4.1
	RISC_OSLib-5_01:4.1
	RISC_OSLib-5_00:4.1
	RISC_OSLib-4_99:4.1
	RISC_OSLib-4_98:4.1
	RISC_OSLib-4_97-4_12_2_6:4.1
	RISC_OSLib-4_97-4_12_2_5:4.1
	RISC_OSLib-4_97-4_12_2_4:4.1
	RISC_OSLib-4_97-4_12_2_3:4.1
	RISC_OSLib-4_97-4_12_2_2:4.1
	sbrodie_RISC_OSLib-4_97-4_12_2_1:4.1
	kbracey_32bit:4.1.0.10
	kbracey_32bit_bp:4.1
	dcotton_autobuild_BaseSW:4.2
	RISC_OSLib-4_97:4.1
	RISC_OSLib-4_96:4.1
	RISC_OSLib-4_95:4.1
	RISC_OSLib-4_94:4.1
	RISC_OSLib-4_93:4.1
	RISC_OSLib-4_92:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	sforrest_daytona_appflash-0_31:4.1
	RISC_OSLib-4_91:4.1
	RISC_OSLib-4_90:4.1
	RISC_OSLib-4_89:4.1
	Ursula_merge:4.1
	RISC_OSLib-4_88:4.1
	RISC_OSLib-4_87:4.1
	blaughto_daytona_appflash-0_30:4.1
	rmanby_clib-4_86:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2014.07.31.08.24.09;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	jfGiiZxupMtuqvKx;

4.4
date	2009.05.31.17.58.59;	author pnaulls;	state Exp;
branches;
next	4.3;

4.3
date	2002.11.15.15.00.32;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2001.08.23.13.53.58;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.25.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.14.1;
next	;

4.1.1.1
date	96.11.05.09.25.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.54.27;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.31.49;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.50.09;	author nturton;	state Exp;
branches;
next	;

4.1.14.1
date	2001.07.02.15.01.16;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Some RISC_OSLib rlib enhancements
menu.c/menu.h:
Add a new menu_setcolours() function to allow the fore/background colour bits to be set on a menu entry.
colourmenu.c:
Use the new menu_setcolours() function instead of making assumptions about menu's internal structure layout.
dbox.c/dbox.h:
New functions dbox_hidefield and dbox_unhidefield added to complement the fade/unfade ones.
As dbox_findicon/findiconbefore are only ever used to find writables, rename them as such. Also, make them find writable (type 15) AND writable draggable (type 14) icons.
Allow navigation by tab/shift tab through icons like the Style Guide chapter 16 says we should. In fact it's a little odd that dbox is emulating 'Ktar' validation itself manually when the Wimp has done this since version 2.92, but maintaining it is less effort than going and checking all the templates.
Fix bug when looking for leading capital letter matches to complete a dbox, the previous code was looking at the cached copy of the icon flags in d->window rather than the ones the Wimp is actually showing on screen (as might have been modified by dbox_fadefield() for example), so it was possible to complete a dbox for an icon which wasn't visible or selectable.
Fix bug when looking for leading capital letter matches when the icon doesn't have any text - the template file format is defined as being 0x0D terminated. This would then lead to 'R' and 'S' being accepted as matches having run off the end of the text buffer and into the validation string (which usually contains an 'R' or 'S' validation first). Changed to accept any control terminator.
event.c:
When force closing the current menu, don't forget to set the two state variables back to 0.
fileicon.c/resspr.c/txt1.c/txtundo.c/wimp.c:
Use existing pointer type definitions.
flex.c:
Treat bools as bools and pointers as pointers.
Say something useful in an error box if flex fails its internal consistency check, rather than just data aborting.
font.c:
Remove ROM conditionals from around font_readdef() function, always include the function.
fontselect.c:
Use font_readdef() rather than local copies of the exact same function.
txtedit.c/txtfile.c/txtfind.c/txtedit.h:
Remove redundant 'deletepending' state variable, and confusion over 'selectrecent' being a bool.
Call os_byte directly rather than passing to os_cli("*FX").
Other minor tidy ups.
wimpt.c:
Mark messages list as a constant.
xferrecv.c:
Also preserve the size member while recycling the xferrecv_ack message block, rather than corrupting it as 256.
xfersend.c/xfersend.h:
Take out the leaf name formulator as a common function for the two places to use it. This also allows the function to return the length of the leaf name so the correct message block size can be used. Inspection with MsgMon/!Reporter was showing that all xfersend initiated saves were passing the leaf name padded to 256 with garbage.
Reindent a few functions.
Make the draggable sprite replacement follow the same validation string rules as the Wimp, previously only ";s" was accepted, so upper case 'S' and validation strings that start with the sprite validation didn't work.
xfersend_pipe() function prototype changed to match xfersend() more closely - not being able to respond to the context of a wimp_eventstr made this function practically unusable.
akbd.h:
Windows logo and menu keys defined.
flex.h/help.h/wimpt.h
Some typos in comments.
wimp.h:
Missing wimp message action codes and structure defs added for completeness.


Version 5.83. Not tagged
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.wimpt
 * Purpose: provides low-level Wimp functionality
 * History: IDJ: 07-Feb-92: prepared for source release
 *          JAB: 22-Apr-92: added wimpt_messages and appended wimpt_init
 *                          accordingly
 *
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>
#include "swis.h"

#include "akbd.h"
#include "os.h"
#include "bbc.h"
#include "wimp.h"
#include "wimpt.h"
#include "trace.h"
#include "werr.h"
#include "alarm.h"
#include "event.h"
#include "msgs.h"
#include "win.h"
#include "VerIntern/messages.h"

static int wimpt__fake_waiting = 0;
#ifdef SHARED_C_LIBRARY
static wimp_eventstr wimpt__fake_event = {0};
static wimp_eventstr wimpt__last_event = {0};
#else
static wimp_eventstr wimpt__fake_event;
static wimp_eventstr wimpt__last_event;
#endif

os_error * wimpt_poll(wimp_emask mask, wimp_eventstr * result)
{
  if (wimpt__fake_waiting != 0) {
    *result = wimpt__fake_event;
    wimpt__fake_waiting = 0;
    wimpt__last_event = wimpt__fake_event;
    return(0);
  } else {
    os_error *r;
    int next_alarm_time;
    if (alarm_next(&next_alarm_time) != 0 && ((event_getmask() & wimp_EMNULL))!=0)
    {
      tracef0("Polling idle\n");
      tracef2("Mask = %d   %d\n", mask & ~wimp_EMNULL, event_getmask());
      r = wimp_pollidle(mask & ~wimp_EMNULL, result, next_alarm_time);
    }
    else
    {
      tracef0("Polling busy\n");
      tracef2("Mask = %d   %d\n", mask, event_getmask());
      r = wimp_poll(mask, result);
    }
    wimpt__last_event = *result;
    return(r);
  }
}

void wimpt_fake_event(wimp_eventstr * e)
{
  if (wimpt__fake_waiting == 0) {
    wimpt__fake_waiting = 1;
    wimpt__fake_event = *e;
  } else {
    tracef1("double fake event, event of type %i dropped.\n", e->e);
  }
}

wimp_eventstr *wimpt_last_event(void)
{
  return &wimpt__last_event;
}

int wimpt_last_event_was_a_key(void)
{
  return(wimpt__last_event.e == wimp_EKEY);
}

/* -------- Control of graphics environment -------- */

static int wimpt__mode = 12;
static int wimpt__dx;
static int wimpt__dy;
static int wimpt__bpp;

static int wimpt__read_screen_mode(void)
{
  int x, y;
  (void) os_byte(135, &x, &y);
  return y;
}

BOOL wimpt_checkmode(void) {
  /* txtar was not noticing Medusa mode changes
     because txtar only checks at a redraw event, so if Edit has no
     windows open over two mode changes the info may then be wrong
     (because the pointer to the mode descriptor is unchanged). */

  BOOL changed = FALSE;
  int old = wimpt__mode;
  /* A fairly careful check mainly to help Edit, now that 16bpp and 32bpp modes
  can be different without their mode value changing. */

  wimpt__mode = wimpt__read_screen_mode();
  if (old != wimpt__mode) changed = TRUE;

  old = wimpt__dx;
  wimpt__dx = 1 << bbc_vduvar(bbc_XEigFactor);
  if (old != wimpt__dx) changed = TRUE;

  old = wimpt__dy;
  wimpt__dy = 1 << bbc_vduvar(bbc_YEigFactor);
  if (old != wimpt__dy) changed = TRUE;

  old = wimpt__bpp;
  wimpt__bpp = 1 << bbc_vduvar(bbc_Log2BPP);
  if (old != wimpt__bpp) changed = TRUE;

  return changed;
  /* This will now return TRUE if any interesting aspects of the
  window appearance have changed. */
}

#ifndef UROM
void wimpt_forceredraw()
{
  wimp_redrawstr r;
  r.w = (wimp_w) -1;
  r.box.x0 = 0;
  r.box.y0 = 0;
  r.box.x1 = (1 + bbc_vduvar(bbc_XWindLimit)) *
             (1 << bbc_vduvar(bbc_XEigFactor));
  r.box.y1 = (1 + bbc_vduvar(bbc_YWindLimit)) *
             (1 << bbc_vduvar(bbc_YEigFactor));
  (void) wimp_force_redraw(&r);
}
#endif

int wimpt_mode(void)
{
  return(wimpt__mode);
}

int wimpt_dx(void)
{
  return(wimpt__dx);
}

int wimpt_dy(void)
{
  return(wimpt__dy);
}

int wimpt_bpp(void)
{
  return(wimpt__bpp);
}

static wimp_t wimpt__task = 0;

static void wimpt__exit(void)
{
  wimpt_complain(wimp_taskclose(wimpt__task));
}

static char *programname = 0;

char *wimpt_programname(void)
{
  return programname;
}

void wimpt_reporterror(os_error *e, wimp_errflags f)
{
  if (!programname)
      f |= 1 << 4;
  wimp_reporterror(e,f,programname);
}

os_error *wimpt_complain(os_error *e) {
  if (e != 0)
    wimpt_reporterror(e, 0);
  return e;
}

typedef void SignalHandler(int);

static SignalHandler *oldhandler;

static void escape_handler(int sig)
{
  sig = sig; /* avoid compiler warning */
  (void) signal(SIGINT, &escape_handler);
}


static void handler(int signal)
{
  os_error er;

  er.errnum = 0;
  sprintf(
      er.errmess,
      msgs_lookup(MSGS_wimpt1),
      _kernel_last_oserror()->errmess);
  wimpt_reporterror(&er, 0);
  exit(1);
}

static void errhandler(int signal)
{
    wimpt_reporterror((os_error *)_kernel_last_oserror(), 0);
    exit(1);
}

static int wimpversion = 0;


void wimpt_wimpversion(int version)
{
  wimpversion = version;
}

static const wimp_msgaction *Messages = NULL;

void wimpt_messages(const wimp_msgaction *messages)
{
   /*Sets the list of messages to be passed to the WIMP.*/
    Messages = messages;
}

static int signal_handlers_installed;

void wimpt_install_signal_handlers(void)
{
  if (signal_handlers_installed) return;
  signal(SIGABRT, &handler);
  signal(SIGFPE, &handler);
  signal(SIGILL, &handler);
  signal(SIGINT, &escape_handler);
  signal(SIGSEGV, &handler);
  signal(SIGTERM, &handler);
  signal(SIGOSERROR, &errhandler);
  signal_handlers_installed = 1;
}

int wimpt_init(char *progname)
{
  os_regset r;
  wimp_msgaction quit = wimp_MCLOSEDOWN;

  wimpt_install_signal_handlers();
  programname = progname;
  if (wimpversion == 0) wimpversion = Messages == NULL? 200: 300;
  if (wimpversion == 300 && Messages == NULL) Messages = &quit;

  r.r [0] = wimpversion;
  r.r [1] = *(int *) "TASK";
  r.r [2] = (int) programname;
  r.r [3] = (int) Messages;

  #if TRACE
     {  int i;

        for (i = 0; Messages [i] != wimp_MCLOSEDOWN; i++)
           tracef1 ("message %d wanted\n", Messages [i]);
     }
  #endif

  wimpt_noerr (os_swix (Wimp_Initialise, &r));

  wimpversion = r.r [0];
  wimpt__task = r.r [1];

  wimpt_checkmode();
  atexit(wimpt__exit);
  if (!win_init()) werr(TRUE, msgs_lookup(MSGS_wimpt3));
  return wimpversion;
}

wimp_t wimpt_task (void) {return wimpt__task;}

void wimpt_noerr (os_error *e)
{
  if (e != 0) (void) os_swi1 (OS_GenerateError, (int) e);
}

/* end */
@


4.4
log
@Normalise C and assembler include paths
Detail:
 This changes all the C and assembler includes to be a canoncial Unix format.
 Also match include paths to previous commit for EditIntern/DrawIntern/VerIntern
 Finally, also include some minor type fixes (NULL vs 0)
Admin:
 May be some other paths elsewhere in the source I'm not immediately able to fix.  Will address any issues ASAP, since this is a huge change.

Version 5.54. Not tagged
@
text
@a41 1
#include <swis.h>
d46 1
d262 1
a262 1
static wimp_msgaction *Messages = NULL;
d264 1
a264 1
void wimpt_messages(wimp_msgaction *messages)
@


4.3
log
@ROM build fixed for 64-bit stuff.
PCI added to swis.h
alloc.c updated to handle bigger slots (new code merged from ARM libraries)
Various 32-bit fixes for backtracing, and general trap handling.
Polite "Application is not 32-bit compatible" message.
Headers <stdint.h> and <inttypes.h> fixed to work in non-C99 mode.
txt changed to do new-style Delete behaviour

Version 5.44. Tagged as 'RISC_OSLib-5_44'
@
text
@d59 1
a59 1
#include "h.verintern.messages"
@


4.2
log
@* Merged in (via sbrodie's branch) public source release of RISC_OSLib.
* Fixed C library tty so it can output '\b' (backspace).
* Made offsetof() and va_arg() macros work with C++.

Version 5.34. Tagged as 'RISC_OSLib-5_34'
@
text
@d63 2
a64 2
static wimp_eventstr wimpt__fake_event = {};
static wimp_eventstr wimpt__last_event = {};
@


4.1
log
@Initial revision
@
text
@d15 15
a29 1
/* Title  > c.wimpt
d31 4
a34 5
 * Version: 0.1
 * ECN 08-May-91 #ifndefed out unused ROM functions
 * IDJ 05-Jun-91 removed call to postmortem in signal handler
 * IDJ 01-Jul-91 fixed wimpt_messages to use first message in list
 * WRS 10-Feb-94 bugfix for Edit not noticing mode changes on VIDC20 machines.
d132 4
a135 12
#if 0
  int old = wimpt__mode;
  wimpt__mode = wimpt__read_screen_mode();
  wimpt__dx = 1 << bbc_vduvar(bbc_XEigFactor);
  wimpt__dy = 1 << bbc_vduvar(bbc_YEigFactor);
  wimpt__bpp = 1 << bbc_vduvar(bbc_Log2BPP);
  return old != wimpt__mode;
#else
  /* Bugfix 10-Feb-94 WRS for txtar not noticing Medusa mode changes
  because txtar only checks at a redraw event, so if Edit has no
  windows open over two mode changes the info may then be wrong
  (because the pointer to the mode descriptor is unchanged). */
a159 1
#endif
d207 3
a209 1
  {return programname;}
d257 1
a257 1
void wimpt_wimpversion (int version)
d265 1
a266 2

{
d299 1
a299 1
      
d302 1
a302 1
     
d315 1
a315 1
  if (!win_init()) werr(TRUE, msgs_lookup(MSGS_wimpt3)); 
d322 1
a322 3

{ /*FIX G-RO-???? JRC Raise SIGOSERROR here - lets the application trap
    its own errors and save files etc*/
@


4.1.14.1
log
@  Merge of multiple versions of RISC_OSLib.
Detail:
  This work may be incomplete - hence import on a branch.
  It has NOT been tested.
Admin:
  Might even build.


Version 5.33, 4.50.2.1. Tagged as 'RISC_OSLib-5_33-4_50_2_1'
@
text
@d15 1
a15 15
/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.wimpt
d17 5
a21 4
 * History: IDJ: 07-Feb-92: prepared for source release
 *          JAB: 22-Apr-92: added wimpt_messages and appended wimpt_init
 *                          accordingly
 *
d119 12
a130 4
  /* txtar was not noticing Medusa mode changes
     because txtar only checks at a redraw event, so if Edit has no
     windows open over two mode changes the info may then be wrong
     (because the pointer to the mode descriptor is unchanged). */
d155 1
d203 1
a203 3
{
  return programname;
}
d251 1
a251 1
void wimpt_wimpversion(int version)
d259 2
a261 1
   /*Sets the list of messages to be passed to the WIMP.*/
d294 1
a294 1

d297 1
a297 1

d310 1
a310 1
  if (!win_init()) werr(TRUE, msgs_lookup(MSGS_wimpt3));
d317 3
a319 1
{
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
