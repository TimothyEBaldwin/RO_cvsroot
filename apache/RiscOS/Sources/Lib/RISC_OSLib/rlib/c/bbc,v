head	4.5;
access;
symbols
	RISC_OSLib-5_97:4.5
	RISC_OSLib-5_96:4.5
	RISC_OSLib-5_95:4.5
	RISC_OSLib-5_94:4.5
	RISC_OSLib-5_93:4.5
	RISC_OSLib-5_92:4.5
	RISC_OSLib-5_91:4.5
	RISC_OSLib-5_90:4.5
	RISC_OSLib-5_89:4.5
	RISC_OSLib-5_88:4.5
	RISC_OSLib-5_87:4.5
	RISC_OSLib-5_86-1:4.5
	RISC_OSLib-5_86:4.5
	RISC_OSLib-5_85:4.5
	RISC_OSLib-5_84:4.5
	RISC_OSLib-5_83-2:4.5
	RISC_OSLib-5_83-1:4.5
	RISC_OSLib-5_83:4.5
	RISC_OSLib-5_82:4.5
	RISC_OSLib-5_81:4.5
	RISC_OSLib-5_75-2:4.5
	RISC_OSLib-5_80:4.5
	RISC_OSLib-5_79:4.5
	RISC_OSLib-5_78:4.5
	RISC_OSLib-5_75-1:4.4
	RISC_OSLib-5_77:4.4
	RISC_OSLib-5_76:4.4
	RISC_OSLib-5_75:4.4
	RISC_OSLib-5_74:4.4
	RISC_OSLib-5_73:4.4
	RISC_OSLib-5_72:4.4
	RISC_OSLib-5_71:4.4
	RISC_OSLib-5_70:4.4
	RISC_OSLib-5_69:4.4
	RISC_OSLib-5_68:4.4
	RISC_OSLib-5_67:4.4
	RISC_OSLib-5_66:4.4
	RISC_OSLib-5_65:4.4
	RISC_OSLib-5_64:4.4
	RISC_OSLib-5_63:4.4
	RISC_OSLib-5_62:4.4
	RISC_OSLib-5_61:4.4
	RISC_OSLib-5_60:4.4
	RISC_OSLib-5_59:4.4
	RISC_OSLib-5_58:4.4
	RISC_OSLib-5_57:4.3
	RISC_OSLib-5_56:4.3
	RISC_OSLib-5_55:4.3
	RISC_OSLib-5_54:4.3
	RISC_OSLib-5_53:4.2
	RISC_OSLib-5_52:4.2
	RISC_OSLib-5_51:4.2
	RO_5_07:4.2
	RISC_OSLib-5_50:4.2
	RISC_OSLib-5_49:4.2
	RISC_OSLib-5_46-4_64_2_1:4.2
	NoInlineAsm:4.2.0.2
	RISC_OSLib-5_48:4.2
	RISC_OSLib-5_47:4.2
	RISC_OSLib-5_46:4.2
	RISC_OSLib-5_45:4.2
	RISC_OSLib-5_44:4.2
	RISC_OSLib-5_43:4.2
	RISC_OSLib-5_42:4.2
	RISC_OSLib-5_41:4.2
	RISC_OSLib-5_40:4.2
	RISC_OSLib-5_39:4.2
	RISC_OSLib-5_38:4.2
	RISC_OSLib-5_37:4.2
	RISC_OSLib-5_36:4.2
	RISC_OSLib-5_35:4.2
	RISC_OSLib-5_34:4.2
	RISC_OSLib-5_33-4_50_2_1:4.1.14.1
	sbrodie_dev:4.1.0.14
	sbrodie_dev_bp:4.1
	RISC_OSLib-5_33:4.1
	RISC_OSLib-5_32:4.1
	RISC_OSLib-5_31:4.1
	RISC_OSLib-5_30:4.1
	RISC_OSLib-5_29:4.1
	RISC_OSLib-5_28:4.1
	RISC_OSLib-5_27:4.1
	RISC_OSLib-5_26:4.1
	RISC_OSLib-5_25:4.1
	RISC_OSLib-5_24:4.1
	RISC_OSLib-5_01-4_16_2_5:4.1
	RISC_OSLib-5_23:4.1
	RISC_OSLib-5_22:4.1
	RISC_OSLib-5_21:4.1
	RISC_OSLib-5_20:4.1
	RISC_OSLib-5_19:4.1
	RISC_OSLib-5_18:4.1
	RISC_OSLib-5_17:4.1
	RISC_OSLib-5_16:4.1
	RISC_OSLib-5_15:4.1
	dellis_autobuild_BaseSW:4.1
	RISC_OSLib-5_14:4.1
	RISC_OSLib-5_13:4.1
	RISC_OSLib-5_12:4.1
	RISC_OSLib-5_01-4_16_2_4:4.1
	RISC_OSLib-5_11:4.1
	RISC_OSLib-5_01-4_16_2_3:4.1
	RISC_OSLib-5_01-4_16_2_2:4.1
	RISC_OSLib-5_10:4.1
	RISC_OSLib-5_01-4_16_2_1:4.1
	Bethany:4.1.0.12
	RISC_OSLib-5_09:4.1
	RISC_OSLib-5_08:4.1
	RISC_OSLib-5_07:4.1
	RISC_OSLib-5_06:4.1
	RISC_OSLib-4_97-4_12_2_8:4.1
	RISC_OSLib-5_05:4.1
	RISC_OSLib-5_04:4.1
	sbrodie_sedwards_16Mar2000:4.1
	RISC_OSLib-5_03:4.1
	RISC_OSLib-5_02:4.1
	RISC_OSLib-4_97-4_12_2_7:4.1
	RISC_OSLib-5_01:4.1
	RISC_OSLib-5_00:4.1
	RISC_OSLib-4_99:4.1
	RISC_OSLib-4_98:4.1
	RISC_OSLib-4_97-4_12_2_6:4.1
	RISC_OSLib-4_97-4_12_2_5:4.1
	RISC_OSLib-4_97-4_12_2_4:4.1
	RISC_OSLib-4_97-4_12_2_3:4.1
	RISC_OSLib-4_97-4_12_2_2:4.1
	sbrodie_RISC_OSLib-4_97-4_12_2_1:4.1
	kbracey_32bit:4.1.0.10
	kbracey_32bit_bp:4.1
	dcotton_autobuild_BaseSW:4.2
	RISC_OSLib-4_97:4.1
	RISC_OSLib-4_96:4.1
	RISC_OSLib-4_95:4.1
	RISC_OSLib-4_94:4.1
	RISC_OSLib-4_93:4.1
	RISC_OSLib-4_92:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	sforrest_daytona_appflash-0_31:4.1
	RISC_OSLib-4_91:4.1
	RISC_OSLib-4_90:4.1
	RISC_OSLib-4_89:4.1
	Ursula_merge:4.1
	RISC_OSLib-4_88:4.1
	RISC_OSLib-4_87:4.1
	blaughto_daytona_appflash-0_30:4.1
	rmanby_clib-4_86:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2013.10.24.20.03.54;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	8snV0tcFxVQyiAax;

4.4
date	2010.11.30.09.29.08;	author rsprowson;	state Exp;
branches;
next	4.3;

4.3
date	2009.05.31.17.58.58;	author pnaulls;	state Exp;
branches;
next	4.2;

4.2
date	2001.08.23.13.53.44;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.25.07;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.14.1;
next	;

4.1.1.1
date	96.11.05.09.25.07;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.53.22;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.29.46;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.49.05;	author nturton;	state Exp;
branches;
next	;

4.1.14.1
date	2001.07.02.15.01.12;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Some library fixes
Fix for problem passing long command lines via system(), while there are good arguments to leave the threshold at 255, non DDEUtils aware programs get brutally truncated command strings, and since the old threshold of 255 applied when the kernel handled 256 command lines, upping the limit to 1k is no worse than before.
Fix for Edit failing to draw lines of text longer than 192 characters (ticket #350). Several factors were conspiring here: on a mode change the window width in characters wasn't being clamped, whereas user entered limits in the menu were, then the internal buffer ("PAINTBUFSIZE") was too short so lines got truncated, and when larger than 256 got wrapped modulo 256 due to the use of an array of chars. Now set at compile time with BIG_WINDOW_SIZE_LIMIT with a new theoretical maximum of 8192. Currently limited to 480 since it uses stack variables.

In the C library:
 armsys.c: adapt the threshold at which to use DDEUtils based on the kernel version number
 scanf.c: squash a warning
 time.c: mark the table of month lengths as constant so we can claw back 13 words of static workspace without having to change the stubs

In RISC OS lib:
 bbc.c: remove local definitions of some SWI numbers
 template.c: squash a warning
 txt.c: delete Modula-2 support
 txt1.c: compare pointer with NULL not an integer
 txtar.c: introduce BIG_WINDOW_SIZE_LIMIT, rationalise a few sprintf's, mark private functions as static
 txtundo.c/txtedit.c: squash old style function warnings
 txtoptmenu.c: clamp the window width read from Edit$Options properly, delete long disabled code
 txtscrap.c: dead function deleted


Version 5.78. Tagged as 'RISC_OSLib-5_78'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/*
 * Title  : c.bbc
 * Purpose: provides bbc-style graphics and mouse/keyboard control
 * History: IDJ: 05-Feb-92: prepared for source release
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdarg.h>
#include "os.h"
#include "bbc.h"

#include "swis.h"

/* Sound SWIs */

#define  Configure            0x00040140
#define  Enable               0x00040141
#define  Stereo               0x00040142
#define  Speaker              0x00040143

#define  Volume               0x00040180
#define  SoundLog             0x00040181
#define  LogScale             0x00040182
#define  InstallVoice         0x00040183
#define  RemoveVoice          0x00040184
#define  AttachVoice          0x00040185
#define  Sound                0x00040186
#define  Tuning               0x00040187
#define  Pitch                0x00040188
#define  Control              0x00040189
#define  AttachNamedVoice     0x0004018a

#define  QInit                0x000401c0
#define  QSchedule            0x000401c1
#define  QRemove              0x000401c2
#define  QSpace               0x000401c3
#define  QDispatch            0x000401c4
#define  QTempo               0x000401c5
#define  QBeats               0x000401c6

#ifndef NULL
   #define NULL 0
#endif

#pragma -s1

#ifndef UROM
/* Set screen mode. */
os_error *bbc_mode(int n)
{
   os_error *e = bbc_vdu(bbc_ScreenMode);
   if (!e) e = bbc_vdu(n);
   return(e);
}
#endif

#ifndef UROM
/* Physical to logical colour definition. Logical colour, Physical colour,
                                          Red level, Green level, Blue level.*/
os_error *bbc_palette(int l, int p, int r, int g, int b)
{
   os_error *e = bbc_vdu(bbc_DefLogical);
   if (!e) e = bbc_vdu(l);
   if (!e) e = bbc_vdu(p);
   if (!e) e = bbc_vdu(r);
   if (!e) e = bbc_vdu(g);
   if (!e) e = bbc_vdu(b);
   return(e);
}
#endif

/* Set white component of a colour in 256 colour modes. */
os_error *bbc_tint(int type, int value)
{
   os_error *e = bbc_vdu(bbc_MultiPurpose);
   if (!e) e = bbc_vdu(17);
   if (!e) e = bbc_vdu(type & 3);
   if (!e) e = bbc_vdu((value << 6) & 0x0C0);
   if (!e) e = bbc_vduw(0);
   if (!e) e = bbc_vduw(0);
   if (!e) e = bbc_vduw(0);
   return(e);
}

#ifndef UROM
/* Find the logical colour of a pixel at indicated coordinates. x, y. */
int bbc_point(int x, int y)
{
   int block[3];

   block[0] = x;
   block[1] = y;
   block[2] = 0;             /* to zero high byte */
   x = (int)os_word(9,block);
   return block[2];
}
#endif

int bbc_modevar (int mode, int varno)

{ int flags, result;

  if (_swix (OS_ReadModeVariable, _INR(0,1)|_OUT(2)| _OUT(_FLAGS),
      mode, varno, &result, &flags) != NULL || (flags & _C) != 0)
    return -1;

  return result;
}

int bbc_vduvar(int varno)
{
   int vars[2];
   int result;
   vars[0] = varno;
   vars[1] = -1; /* terminator. */
   return os_swi2 (os_X | OS_ReadVduVariables, (int) &vars[0], (int) &result) != NULL?
         -1: result; /*relies on -1 never being valid*/
}

os_error *bbc_vduvars(int *vars, int *values)
{
   return(os_swi2(os_X | OS_ReadVduVariables, (int) vars, (int) values));
}

/* Array of length of sequence for vdu codes. */
static char Qlen[32] =
{ 1,   /* VDU 0 */
  2,   /* next character to printer only */
  1,   /* printer on */
  1,   /* printer off */
  1,   /* print at text cursor */
  1,   /* print at graphics cursor */
  1,   /* enable VDU driver */
  1,   /* beep */
  1,   /* backspace */
  1,   /* forward space (horizontal tab) */
  1,   /* line feed */
  1,   /* up a line */
  1,   /* clear (text) screen */
  1,   /* carriage return */
  1,   /* page mode on */
  1,   /* page mode off */
  1,   /* clear graphics window */
  2,   /* define text colour */
  3,   /* define graphics colour */
  6,   /* define logical colour */
  1,   /* restore default palette */
  1,   /* disable VDU drivers */
  2,   /* Select screen mode */
  10,  /* VDU 23,.. */
  9,   /* set graphics window */
  6,   /* PLOT ... */
  1,   /* restore default windows */
  1,   /* ESCAPE char - no effect */
  5,   /* define text window */
  5,   /* define graphics origin */
  1,   /* home cursor */
  3    /* tab cursor */
/* and all the rest are 1 */
};

/*
 * Send the appropiate number of characters to vdu()
 * It is assumed that the correct number of arguments have been supplied
 */

/* Multiple character VDU call. */
os_error *bbc_vduq(int c,...)
{
   os_error *e;
   va_list ap;
   int n;
   e = bbc_vdu(c);

   if ((c >= ' ') || e) return(e);

   va_start(ap, c);
   n = Qlen[c];

   while ((--n) && (!e)) e = bbc_vdu(va_arg(ap,int));

   va_end(ap);
   return(e);
}


/* ---------- Graphics ----------- */

/* Clear graphics window. */
os_error *bbc_clg(void)
{
   return (bbc_vdu(bbc_ClearGraph));
}

/* Set up graphics window. */
os_error *bbc_gwindow(int a, int b, int c, int d)
{
   os_error *e = bbc_vdu(bbc_DefGraphWindow);
   if (!e) e = bbc_vduw(a);
   if (!e) e = bbc_vduw(b);
   if (!e) e = bbc_vduw(c);
   if (!e) e = bbc_vduw(d);
   return(e);
}

#ifndef UROM
/* Move the graphics origin to the given absolute coordinates. */
os_error *bbc_origin(int x, int y)
{
   os_error *e = bbc_vdu(bbc_DefGraphOrigin);
   if (!e) e = bbc_vduw(x);
   if (!e) e = bbc_vduw(y);
   return(e);
}
#endif

/* Set graphics foreground/background colour and action. */
os_error *bbc_gcol(int a, int b)
{
   os_error *e = bbc_vdu(bbc_DefGraphColour);
   if (!e) e = bbc_vdu(a);
   if (!e) e = bbc_vdu(b);
   return(e);
}


/* Perform an operating system plot operation. Plot number, x, y. */
os_error *bbc_plot(int n, int x, int y)
{
   return(os_swix3(OS_Plot, n, x, y));
}

/* Move graphics cursor to an absolute position. */
os_error *bbc_move(int x, int y)
{
   return(bbc_plot(bbc_SolidBoth + bbc_BMoveAbs, x, y));
}

#ifndef UROM
/* Move the graphics cursor to a position relative to its current position. */
os_error *bbc_moveby(int x, int y)
{
   return(bbc_plot(bbc_SolidBoth, x, y));
}
#endif

/* Draw a line to absolute coordinates from the current graphics position. */
os_error *bbc_draw(int x, int y)
{
   return(bbc_plot(bbc_SolidBoth + bbc_DrawAbsFore, x, y));
}


/* Draw a line to coordinates specified relative to current graphic cursor. */
os_error *bbc_drawby(int x, int y)
{
   return(bbc_plot(bbc_SolidBoth + bbc_DrawRelFore, x, y));
}


/* Plot a rectangular outline. Left X, bottom Y, Width, Height. */
os_error *bbc_rectangle(int x, int y, int w, int h)
{
   os_error *e = bbc_move(x, y);
   if (!e) e = bbc_plot(bbc_SolidExFinal + bbc_DrawRelFore,  0,  h);
   if (!e) e = bbc_plot(bbc_SolidExFinal + bbc_DrawRelFore,  w,  0);
   if (!e) e = bbc_plot(bbc_SolidExFinal + bbc_DrawRelFore,  0, -h);
   if (!e) e = bbc_plot(bbc_SolidExFinal + bbc_DrawRelFore, -w,  0);
   return(e);
}


/* Plot a solid rectangle. Left X, bottom Y, Width, Height. */
os_error *bbc_rectanglefill(int x, int y, int w, int h)
{
   os_error *e = bbc_move(x, y);
   if (!e) e = bbc_plot(bbc_RectangleFill + bbc_DrawRelFore, w, h);
   return(e);
}

#ifndef UROM
/* Draw a circle outline at absolute coordinates: x, y, radius. */
os_error *bbc_circle(int x, int y, int r)
{
   os_error *e = bbc_move(x, y);
   if (!e) e = bbc_plot(bbc_Circle + bbc_DrawAbsFore, x + r, y);
   return(e);
}
#endif

#ifndef UROM
/* Draw a solid circle at absolute coordinates: x, y, radius. */
os_error *bbc_circlefill(int x, int y, int r)
{
   os_error *e = bbc_move(x, y);
   if (!e) e = bbc_plot(bbc_CircleFill + bbc_DrawAbsFore, x + r, y);
   return(e);
}
#endif

#ifndef UROM
/* Flood-fill an area from absolute coordinates x, y. */
os_error *bbc_fill(int x, int y)
{
   return(bbc_plot(bbc_FloodToBack + bbc_DrawAbsFore, x, y));
}
#endif

/* --------- Text ----------- */

#ifndef UROM
/* Clear text window. */
os_error *bbc_cls(void)
{
   return(bbc_vdu(bbc_ClearText));
}
#endif

#ifndef UROM
/* Set text foreground/background colour. */
os_error *bbc_colour(int c)
{
   os_error *e = bbc_vdu(bbc_DefTextColour);
   if (!e) e = bbc_vdu(c);
   return(e);
}
#endif

#ifndef UROM
/* Return the X coordinate of the text cursor. */
int bbc_pos(void)
{
  int n, dmy;
  os_byte(0x86, &n, &dmy);
  return n & 0xFF;
}
#endif

#ifndef UROM
/* Return Y coordinate of text cursor. */
int bbc_vpos(void)
{
   int n, dmy;
   os_byte(0x86, &dmy, &n);
   return n & 0xFF;
}
#endif

#ifndef UROM
/* Alter text cursor appearance. Argument value 0 to 3. */
os_error *bbc_cursor(int c)
{
   return(bbc_vduq(bbc_MultiPurpose, 1, c, 0, 0, 0, 0, 0, 0, 0));
}
#endif

#ifndef UROM
/* Position text cursor. */
os_error *bbc_tab(int x, int y)
{
   os_error *e = bbc_vdu(bbc_MoveText);
   if (!e) e = bbc_vdu(x);
   if (!e) e = bbc_vdu(y);
   return(e);
}
#endif

/* Print a null-terminated string to the screen. */
os_error *bbc_stringprint(char *s)
{
  return(os_swix1(OS_Write0, (int) s));
}

/* ----------- Sound ----------- */

#ifndef UROM
/* Activate sound system. */
os_error *bbc_soundon(void)
{
   os_regset r;
   r.r[0] = 2;
   return(os_swix(Enable, &r));
}
#endif

#ifndef UROM
/* Deactivate sound system. */
os_error *bbc_soundoff(void)
{
   os_regset r;
   r.r[0] = 1;
   return(os_swix(Enable, &r));
}
#endif

#ifndef UROM
/* Set number of sound channels. 1, 2, 4 or 8. */
os_error *bbc_voices(int channels)
{
   os_regset r;
   r.r[1] = r.r[2] = r.r[3] = r.r[4] = 0;
   r.r[0] = channels;
   return(os_swix(Configure, &r));
}
#endif

#ifndef UROM
/* Return current beat value. */
int bbc_getbeat(void)
{
   os_regset r;
   os_error *e;
   r.r[0] = 0;
   e = os_swix(QBeats, &r);
   return r.r[0];
}
#endif

#ifndef UROM
/* Read beat counter cycle length. */
int bbc_getbeats(void)
{
   os_regset r;
   os_error *e;
   r.r[0] = -1;
   e = os_swix(QBeats, &r);
   return r.r[0];
}
#endif

#ifndef UROM
/* Set beat counter cycle length. */
os_error *bbc_setbeats(int l)
{
   os_regset r;
   r.r[0] = l;
   return(os_swix(QBeats, &r));
}
#endif

#ifndef UROM
/* Read rate at which beat counter counts. */
int bbc_gettempo(void)
{
   os_regset r;
   os_error *e;
   r.r[0] = 0;
   e = os_swix(QTempo, &r);
   return r.r[0];
}
#endif

#ifndef UROM
/* Set rate at which beat counter counts. */
os_error *bbc_settempo(int newtempo)
{
   os_regset r;
   r.r[0] = newtempo;
   return(os_swix(QTempo, &r));
}
#endif

#ifndef UROM
/* Set stereo position for specified channel. Channel, Position. */
os_error *bbc_stereo(int channel, int position)
{
   os_regset r;
   r.r[0] = channel;
   r.r[1] = position;
   return(os_swix(Stereo, &r));
}
#endif

#ifndef UROM
/* Make or schedule a sound. Channel, Amplitude, Pitch, Duration, future time. */
os_error *bbc_sound(int chan, int amp, int pitch, int dur, int futime)
{
   os_regset r;
   os_error *e;
   r.r[2] = (chan &0x0000ffff) | (amp << 16);
   r.r[3] = (pitch & 0x0000ffff) | (dur << 16);     /* compact bits */

   if (futime != -2)
   {
      r.r[0] = futime;
      r.r[1] = 0;
      e = os_swix(QSchedule, &r);
   }
   else
     e = os_swix(Sound, (os_regset *)(8 + (int)(&r))); /* fast! */

   return(e);
}
#endif

/* ------ Miscellaneous ------ */

#ifndef UROM
/* Read data from ADC conversion or give buffer data. */
int bbc_adval(int x)
{
   if ((x & 0xFF) < 0x80)
   { /* ADC conversion info */
      int y;
      os_error *e = os_byte(0x80, &x, &y);
      if (e) return -1; /* Panic! Return max conversion like an Electron does */
      return ((y << 24) | (x << 16)) >> 16; /* SignExtend result */
   }
   else
   { /* Read buffer status */
      int dmy;
      os_byte(0x80, &x, &dmy);
      return x;
   }
}
#endif

/* Return a character code from an input stream or the keyboard. */
int bbc_inkey(int n)
{
  int x = n & 0xFF;
  int y = (n & 0xFF00) / 256;
  os_byte(0x81, &x, &y);
  if (y == 0xFF) return -1;
  return x;
}

#pragma -s0

/* end of c.bbc */
@


4.4
log
@Enable 2 functions in RISC_OSLib shared entry table.
Needed by !Paint 2.02.
Fix some easy warnings in wimp.c/sprite.c.
Add new function (not in the ROM version) 'wimp_baseofromsprites()'.
bbc_adval fixed to return -1 when no ADC fitted to match Electron behaviour.
Note: the 2 reenabled functions haven't been appended to the table, so anyone who linked a RAM application against 'romastubs' would need to relink.

Version 5.58. Tagged as 'RISC_OSLib-5_58'
@
text
@a44 3
#define  XOS_Write0           0x00000002 | os_X
#define  XOS_Plot             0x00000045 | os_X

d261 1
a261 1
   return(os_swi3(XOS_Plot, n, x, y));
d402 1
a402 1
  return(os_swi1(XOS_Write0, (int) s));
@


4.3
log
@Normalise C and assembler include paths
Detail:
 This changes all the C and assembler includes to be a canoncial Unix format.
 Also match include paths to previous commit for EditIntern/DrawIntern/VerIntern
 Finally, also include some minor type fixes (NULL vs 0)
Admin:
 May be some other paths elsewhere in the source I'm not immediately able to fix.  Will address any issues ASAP, since this is a huge change.

Version 5.54. Not tagged
@
text
@d540 1
a540 1
      if (e) return 0x80000000; /* Panic, I suppose */
@


4.2
log
@* Merged in (via sbrodie's branch) public source release of RISC_OSLib.
* Fixed C library tty so it can output '\b' (backspace).
* Made offsetof() and va_arg() macros work with C++.

Version 5.34. Tagged as 'RISC_OSLib-5_34'
@
text
@d40 2
a41 2
#include "h.os"
#include "h.bbc"
@


4.1
log
@Initial revision
@
text
@d15 13
a27 14
/****************************************************************************
 * This source file was written by Acorn Computers Limited. It is part of   *
 * the "cwimp" library for writing applications in C for RISC OS. It may be *
 * used freely in the creation of programs for Archimedes. It should be     *
 * used with Acorn's C Compiler Release 2 or later.                         *
 *                                                                          *
 * No support can be given to programmers using this code and, while we     *
 * believe that it is correct, no correspondence can be entered into        *
 * concerning behaviour or bugs.                                            *
 *                                                                          *
 * Upgrades of this code may or may not appear, and while every effort will *
 * be made to keep such upgrades upwards compatible, no guarantees can be   *
 * given.                                                                   *
 ***************************************************************************/
d32 1
a32 7
 * Version: 0.1
 *          0.2 RCM all bbc_xxxx routines now return ->os_error
 *          0.3 SKS tidied up. Fixed bbc_soundoff AGAIN (someone had UNfixed it)
 *                  fixed bbc_adval to be useful.
 *           12-Apr-89 IDJ  Fixed header name
 *           13-Mar-90 IDJ fixed bbc_vpos
 *           08-May-91 ECN #ifndefed out unused ROM functions
d92 1
a92 1
/* Physical to logical colour definition. Logical colour, Physical colour, 
d137 1
a137 1
  if (_swix (OS_ReadModeVariable, _IN (0) | _IN (1) | _OUT (2) | _OUT (_FLAGS),
d159 1
a159 1
/* Array of length of sequence for vdu codes. */ 
d269 1
a269 1
{ 
d366 1
a366 1
{ 
d397 1
a397 1
   if (!e) e = bbc_vdu(y); 
d517 1
a517 1
   if (futime != -2) 
d548 1
a548 1
   };
@


4.1.14.1
log
@  Merge of multiple versions of RISC_OSLib.
Detail:
  This work may be incomplete - hence import on a branch.
  It has NOT been tested.
Admin:
  Might even build.


Version 5.33, 4.50.2.1. Tagged as 'RISC_OSLib-5_33-4_50_2_1'
@
text
@d15 14
a28 13
/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/
d33 7
a39 1
 * History: IDJ: 05-Feb-92: prepared for source release
d99 1
a99 1
/* Physical to logical colour definition. Logical colour, Physical colour,
d144 1
a144 1
  if (_swix (OS_ReadModeVariable, _INR(0,1)|_OUT(2)| _OUT(_FLAGS),
d166 1
a166 1
/* Array of length of sequence for vdu codes. */
d276 1
a276 1
{
d373 1
a373 1
{
d404 1
a404 1
   if (!e) e = bbc_vdu(y);
d524 1
a524 1
   if (futime != -2)
d555 1
a555 1
   }
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
