head	4.7;
access;
symbols
	RISC_OSLib-5_97:4.7
	RISC_OSLib-5_96:4.7
	RISC_OSLib-5_95:4.7
	RISC_OSLib-5_94:4.7
	RISC_OSLib-5_93:4.7
	RISC_OSLib-5_92:4.7
	RISC_OSLib-5_91:4.7
	RISC_OSLib-5_90:4.7
	RISC_OSLib-5_89:4.7
	RISC_OSLib-5_88:4.7
	RISC_OSLib-5_87:4.7
	RISC_OSLib-5_86-1:4.7
	RISC_OSLib-5_86:4.7
	RISC_OSLib-5_85:4.7
	RISC_OSLib-5_84:4.7
	RISC_OSLib-5_83-2:4.7
	RISC_OSLib-5_83-1:4.7
	RISC_OSLib-5_83:4.7
	RISC_OSLib-5_82:4.7
	RISC_OSLib-5_81:4.7
	RISC_OSLib-5_75-2:4.7
	RISC_OSLib-5_80:4.7
	RISC_OSLib-5_79:4.7
	RISC_OSLib-5_78:4.7
	RISC_OSLib-5_75-1:4.7
	RISC_OSLib-5_77:4.7
	RISC_OSLib-5_76:4.7
	RISC_OSLib-5_75:4.7
	RISC_OSLib-5_74:4.7
	RISC_OSLib-5_73:4.7
	RISC_OSLib-5_72:4.7
	RISC_OSLib-5_71:4.7
	RISC_OSLib-5_70:4.7
	RISC_OSLib-5_69:4.7
	RISC_OSLib-5_68:4.7
	RISC_OSLib-5_67:4.7
	RISC_OSLib-5_66:4.7
	RISC_OSLib-5_65:4.7
	RISC_OSLib-5_64:4.7
	RISC_OSLib-5_63:4.6
	RISC_OSLib-5_62:4.6
	RISC_OSLib-5_61:4.6
	RISC_OSLib-5_60:4.6
	RISC_OSLib-5_59:4.6
	RISC_OSLib-5_58:4.6
	RISC_OSLib-5_57:4.6
	RISC_OSLib-5_56:4.6
	RISC_OSLib-5_55:4.6
	RISC_OSLib-5_54:4.6
	RISC_OSLib-5_53:4.6
	RISC_OSLib-5_52:4.6
	RISC_OSLib-5_51:4.6
	RO_5_07:4.6
	RISC_OSLib-5_50:4.6
	RISC_OSLib-5_49:4.6
	RISC_OSLib-5_46-4_64_2_1:4.6
	NoInlineAsm:4.6.0.2
	RISC_OSLib-5_48:4.6
	RISC_OSLib-5_47:4.6
	RISC_OSLib-5_46:4.6
	RISC_OSLib-5_45:4.6
	RISC_OSLib-5_44:4.6
	RISC_OSLib-5_43:4.6
	RISC_OSLib-5_42:4.6
	RISC_OSLib-5_41:4.6
	RISC_OSLib-5_40:4.6
	RISC_OSLib-5_39:4.6
	RISC_OSLib-5_38:4.6
	RISC_OSLib-5_37:4.6
	RISC_OSLib-5_36:4.6
	RISC_OSLib-5_35:4.6
	RISC_OSLib-5_34:4.6
	RISC_OSLib-5_33-4_50_2_1:4.5
	sbrodie_dev:4.5.0.2
	sbrodie_dev_bp:4.5
	RISC_OSLib-5_33:4.5
	RISC_OSLib-5_32:4.5
	RISC_OSLib-5_31:4.5
	RISC_OSLib-5_30:4.5
	RISC_OSLib-5_29:4.5
	RISC_OSLib-5_28:4.4
	RISC_OSLib-5_27:4.4
	RISC_OSLib-5_26:4.4
	RISC_OSLib-5_25:4.4
	RISC_OSLib-5_24:4.4
	RISC_OSLib-5_01-4_16_2_5:4.3
	RISC_OSLib-5_23:4.4
	RISC_OSLib-5_22:4.4
	RISC_OSLib-5_21:4.4
	RISC_OSLib-5_20:4.4
	RISC_OSLib-5_19:4.4
	RISC_OSLib-5_18:4.4
	RISC_OSLib-5_17:4.4
	RISC_OSLib-5_16:4.4
	RISC_OSLib-5_15:4.4
	dellis_autobuild_BaseSW:4.4
	RISC_OSLib-5_14:4.4
	RISC_OSLib-5_13:4.4
	RISC_OSLib-5_12:4.4
	RISC_OSLib-5_01-4_16_2_4:4.3
	RISC_OSLib-5_11:4.4
	RISC_OSLib-5_01-4_16_2_3:4.3
	RISC_OSLib-5_01-4_16_2_2:4.3
	RISC_OSLib-5_10:4.4
	RISC_OSLib-5_01-4_16_2_1:4.3
	Bethany:4.3.0.4
	RISC_OSLib-5_09:4.4
	RISC_OSLib-5_08:4.4
	RISC_OSLib-5_07:4.4
	RISC_OSLib-5_06:4.4
	RISC_OSLib-4_97-4_12_2_8:4.3.2.3
	RISC_OSLib-5_05:4.3
	RISC_OSLib-5_04:4.3
	sbrodie_sedwards_16Mar2000:4.3
	RISC_OSLib-5_03:4.3
	RISC_OSLib-5_02:4.3
	RISC_OSLib-4_97-4_12_2_7:4.3.2.3
	RISC_OSLib-5_01:4.3
	RISC_OSLib-5_00:4.3
	RISC_OSLib-4_99:4.3
	RISC_OSLib-4_98:4.3
	RISC_OSLib-4_97-4_12_2_6:4.3.2.3
	RISC_OSLib-4_97-4_12_2_5:4.3.2.3
	RISC_OSLib-4_97-4_12_2_4:4.3.2.2
	RISC_OSLib-4_97-4_12_2_3:4.3.2.1
	RISC_OSLib-4_97-4_12_2_2:4.3
	sbrodie_RISC_OSLib-4_97-4_12_2_1:4.3
	kbracey_32bit:4.3.0.2
	kbracey_32bit_bp:4.3
	dcotton_autobuild_BaseSW:4.6
	RISC_OSLib-4_97:4.3
	RISC_OSLib-4_96:4.3
	RISC_OSLib-4_95:4.3
	RISC_OSLib-4_94:4.3
	RISC_OSLib-4_93:4.3
	RISC_OSLib-4_92:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	sforrest_daytona_appflash-0_31:4.2
	RISC_OSLib-4_91:4.3
	RISC_OSLib-4_90:4.3
	RISC_OSLib-4_89:4.3
	Ursula_merge:4.2
	RISC_OSLib-4_88:4.2
	RISC_OSLib-4_87:4.2
	blaughto_daytona_appflash-0_30:4.2
	rmanby_clib-4_86:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2011.10.28.14.23.42;	author bavison;	state Exp;
branches;
next	4.6;
commitid	hIG6j26y6NoxM7Fv;

4.6
date	2001.08.23.13.47.10;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	2001.04.06.14.29.06;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	2000.05.09.14.09.41;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	98.10.01.09.14.36;	author kbracey;	state Exp;
branches
	4.3.2.1;
next	4.2;

4.2
date	97.01.21.17.13.03;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.25.38;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.3.2.1
date	99.11.10.14.02.33;	author kbracey;	state Exp;
branches;
next	4.3.2.2;

4.3.2.2
date	99.11.10.16.59.09;	author kbracey;	state Exp;
branches;
next	4.3.2.3;

4.3.2.3
date	99.11.22.13.28.01;	author sbrodie;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.25.38;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.56.10;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.35.05;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.51.42;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@  File handling improvements
Detail:
  * Added 64-bit file pointer API support, following the LFS spec v1.5
    (see Docs directory). Internally, now uses 64-bit file pointers
    exclusively. For now, the backend still limits you to 4GB-1 files, but
    clients of the C library won't need recompiling again to support larger
    files than this once they use the new API.
  * Fixed a large number of warnings produced in compilation, assembly and
    linking, many of them new and resulting from the improved checks in the
    latest toolchain.
  * Increased the maximum stream buffer size from 16MB to 1GB.
  * Added Hdr:SDFS and Hdr:SDIO to the list of headers used to build swis.h
    if they are present.
Admin:
  Verified that the new 64-bit file pointer buffering code works using a
  ROM build (since the toolchain makes extensive use of reading, writing
  and seeking internally).

Version 5.64. Tagged as 'RISC_OSLib-5_64'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.swi

; ****************************************************************************
; * This source file was written by Acorn Computers Limited. It is part of   *
; * the "cwimp" library for writing applications in C for RISC OS. It may be *
; * used freely in the creation of programs for Archimedes. It should be     *
; * used with Acorn's objasm assembler                                       *
; *                                                                          *
; * No support can be given to programmers using this code and, while we     *
; * believe that it is correct, no correspondence can be entered into        *
; * concerning behaviour or bugs.                                            *
; *                                                                          *
; * Upgrades of this code may or may not appear, and while every effort will *
; * be made to keep such upgrades upwards compatible, no guarantees can be   *
; * given.                                                                   *
; ****************************************************************************

; Title  : s.swi
; Purpose: provide access to RISC OS SWIs from C
; Version: 0.1     created
;          0.2 RCM bbc_vdu & bbc_vduw now return ->os_error in R0
;          0.3 SKS made os_swi, os_swix accept NULL inout regset
;                  bbc_get now returns &1xx when an ESCAPE condition is present
;                  optional with names assembly for postmortem
;              ECN 08-May-91 Removed bbc_get for ROM release

        GBLL    names
names   SETL    {TRUE}

        GBLL    ModeMayBeNonUser
ModeMayBeNonUser   SETL  {FALSE}

        GET     Hdr:ListOpts
        GET     Hdr:APCS.Common
        GET     Hdr:Macros

XOS_MASK      * &00020000 ; mask to make a swi a RISC OS V-error SWI

XOS_WriteC      * XOS_MASK + 0
XOS_ReadC       * XOS_MASK + 4
XOS_Byte        * XOS_MASK + 6
XOS_Word        * XOS_MASK + 7
XOS_ReadVarVal  * XOS_MASK + &23
XOS_CallASWIR12 * XOS_MASK + &71


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Register names


        [ :LNOT:UROM
        EXPORT  |bbc_get|
        ]
        EXPORT  |bbc_vdu|
        EXPORT  |bbc_vduw|
        EXPORT  |os_swi|
        EXPORT  |os_swix|
        EXPORT  |os_swi0|
        EXPORT  |os_swi1|
        EXPORT  |os_swi2|
        EXPORT  |os_swi3|
        EXPORT  |os_swi4|
        EXPORT  |os_swi5|
        EXPORT  |os_swi6|
        EXPORT  |os_swi1r|
        EXPORT  |os_swi2r|
        EXPORT  |os_swi3r|
        EXPORT  |os_swi4r|
        EXPORT  |os_swi5r|
        EXPORT  |os_swi6r|
        EXPORT  |os_swix0|
        EXPORT  |os_swix1|
        EXPORT  |os_swix2|
        EXPORT  |os_swix3|
        EXPORT  |os_swix4|
        EXPORT  |os_swix5|
        EXPORT  |os_swix6|
        EXPORT  |os_swix1r|
        EXPORT  |os_swix2r|
        EXPORT  |os_swix3r|
        EXPORT  |os_swix4r|
        EXPORT  |os_swix5r|
        EXPORT  |os_swix6r|
        EXPORT  |os_byte|
        EXPORT  |os_word|
        EXPORT  |os_read_var_val|

        AREA    |C$$code|, CODE, READONLY

|v$codesegment|

        [ :LNOT:UROM
bbc_get SWI     XOS_ReadC
        Return  ,LinkNotStacked,VS
        ORRCS   a1, a1, #&100           ; SKS
        Return  ,LinkNotStacked
        ]

bbc_vduw
        SWI     XOS_WriteC
        Return  ,LinkNotStacked,VS
        MOV     a1, a1, LSR #8
bbc_vdu SWI     XOS_WriteC
        MOVVC   a1, #0
        Return  ,LinkNotStacked


; void os_swi(int swicode, os_regset* /*inout*/);

; In    a1 contains swi number, a2 points to ARM register structure

os_swi
        STMDB   sp!, {v1-v6, lr}
        MOV     r12, r0
        CMP     r1, #0
        BEQ     os_swi_noregset
        STR     r1, [sp, #-4]!
        LDMIA   r1, {r0-r9}
        SWI     XOS_CallASWIR12
        LDR     ip, [sp], #4
        STMIA   ip, {r0-r9}
        Return  "v1-v6"
os_swi_noregset
        SWI     XOS_CallASWIR12
        Return  "v1-v6"


; os_error *os_swix(int swicode, os_regset* /*inout*/);

; In    a1 contains swi number, a2 points to ARM register structure

os_swix
        STMDB   sp!, {v1-v6, lr}
        ORR     a1, a1, #XOS_MASK       ; make a SWI of V-error type
        MOV     r12, r0
        CMP     r1, #0
        BEQ     os_swix_noregset
        STR     r1, [sp, #-4]!
        LDMIA   r1, {r0-r9}
        SWI     XOS_CallASWIR12
        LDR     ip, [sp], #4
        STMIA   ip, {r0-r9}
        MOVVC   a1, #0
        Return  "v1-v6"
os_swix_noregset
        SWI     XOS_CallASWIR12
        MOVVC   a1, #0
        Return  "v1-v6"

os_swix0
os_swix1
os_swix2
os_swix3
os_swix4
os_swix5
os_swix6
os_swix7
        ORR     a1, a1, #&20000
os_swi0
os_swi1
os_swi2
os_swi3
os_swi4
os_swi5
os_swi6
        STMDB   sp!, {v1-v6, lr}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     lr, sp, #7*4
        LDMIA   lr, {a4, v1, v2}
        SWI     XOS_CallASWIR12
        MOVVC   a1, #0
        Return  "v1-v6"

swi_ret_inst
        MOV     pc, ip

os_swix1r
        ORR     a1, a1, #&20000
os_swi1r
        STMDB   sp!, {a3, v1-v6, lr}
        MOV     r12, r0
        MOV     r0, a2
        SWI     XOS_CallASWIR12
        LDR     ip, [sp]
        Return  "a2,v1-v6",,VS
        TEQ     ip, #0
        STRNE   a1, [ip]
        MOV     a1, #0
        Return  "a2,v1-v6"

os_swix2r
        ORR     a1, a1, #&20000
os_swi2r
        STMDB   sp!, {a4, v1-v6, lr}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        SWI     XOS_CallASWIR12
        LDR     ip, [sp]
        Return  "a2,v1-v6",,VS
        TEQ     ip, #0
        STRNE   a1, [ip]
        LDR     ip, [sp, #8 * 4]
        TEQ     ip, #0
        STRNE   a2, [ip]
        MOV     a1, #0
        Return  "a2,v1-v6"

os_swix3r
        ORR     a1, a1, #&20000
os_swi3r
        STMDB   sp!, {v1-v6, lr}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #7 * 4
        LDMIA   ip, {v1, v2, v3}
        Return  "v1-v6",,VS
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        MOV     a1, #0
        Return  "v1-v6"

os_swix4r
        ORR     a1, a1, #&20000
os_swi4r
        STMDB   sp!, {v1-v6, lr}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        LDR     a4, [sp, #7 * 4]
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #8 * 4
        LDMIA   ip, {v1-v4}
        Return  "v1-v6",,VS
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        TEQ     v4, #0
        STRNE   a4, [v4]
        MOV     a1, #0
        Return  "v1-v6"

os_swix5r
        ORR     a1, a1, #&20000
os_swi5r
        STMDB   sp!, {v1-v6, lr}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     lr, sp, #7 * 4
        LDMIA   lr, {a4, v1}
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #9 * 4
        LDMIA   ip, {v3-v6, ip}
        Return  "v1-v6",,VS
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        MOV     a1, #0
        Return  "v1-v6"

os_swix6r
        ORR     a1, a1, #&20000
os_swi6r
        STMDB   sp!, {v1-v6, lr}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     lr, sp, #7 * 4
        LDMIA   lr, {a4, v1, v2}
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #10 * 4
        LDMIA   ip, {v3-v6, ip, lr}     ; APCS-R assumption here
        Return  "v1-v6",,VS
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        TEQ     lr, #0
        STRNE   v2, [lr]
        MOV     a1, #0
        Return  "v1-v6"

os_byte
        FunctionEntry
        MOV     r3, r1
        MOV     ip, r2
        LDR     r1, [r1]
        LDR     r2, [r2]
        SWI     XOS_Byte
        STR     r1, [r3]
        STR     r2, [ip]
        MOVVC   r0, #0
        Return

os_word
        MOV     ip, lr
        SWI     XOS_Word
        MOVVC   r0, #0
        Return  ,LinkNotStacked,,ip

os_read_var_val
        FunctionEntry "r4"
        MOV     r3, #0
        MOV     r4, #3
        SWI     XOS_ReadVarVal
        MOV     r0, #0
        STRVSB  r0, [r1]
        STRVCB  r0, [r1, r2]
        Return  "r4"

        END
@


4.6
log
@* Merged in (via sbrodie's branch) public source release of RISC_OSLib.
* Fixed C library tty so it can output '\b' (backspace).
* Made offsetof() and va_arg() macros work with C++.

Version 5.34. Tagged as 'RISC_OSLib-5_34'
@
text
@d131 1
a131 1
        STMDB   sp!, {r1}
d134 1
a134 1
        LDMIA   sp!, {ip}
d152 1
a152 1
        STMDB   sp!, {r1}
d155 1
a155 1
        LDMIA   sp!, {ip}
@


4.5
log
@  Fix for strcmp().
  Fix for RISC_OSLib res() function.
Detail:
  Version 4.89 featured an improved strcmp() routine that didn't actually
    work properly (bug #4085).  The return values had the wrong sign if this
    optimised code was used and the string contained top-bit set chars.
  Removed that rlib.s.asmdefs hack as the comment in the makefile suggested.
    Nothing needs it any more as the assembler sources that require it now
    get via a -PD argument.
  res_ prefix function was still wrong as it failed to detect valid but wrong
    filenames, hence the "Make$Path not defined" errors in the latest tools
    release.
Admin:
  Fixes Bugzilla bug #4085
  Should fix BaseSW's build problems too.

Version 5.29. Tagged as 'RISC_OSLib-5_29'
@
text
@d47 3
a49 1
        GET     s.h_Brazil
a50 1
SWI_OP        * &EF000000 ; SWIAL opcode
d53 8
a63 3
;whether to avoid dynamic code for swi veneers
        GBLL    StaticSWIVeneer
StaticSWIVeneer  SETL StrongARM :LAND: {TRUE}
a126 1
  [ StaticSWIVeneer
a139 15
  |
        STMDB   sp!, {v1-v6, lr}
        ORR     a1, a1, #SWI_OP         ; make into SWI operation
        ADR     v1, exit_sequence
        LDMIA   v1,      {v2,v3}
        MOVS    ip, a2
        MOVEQ   v2, #0
        STMDB   sp!, {a1, v2,v3}        ; copy SWI and exit code onto stack
        LDMNEIA a2, {r0-r9}             ; load up registers for SWI if wanted
        MOV     pc, sp                  ; and jump to the sequence
;       SWI     whatever                ; <- sp
exit_sequence
        STMIA   ip, {r0-r9}
        Return  "a2-a4,v1-v6"           ; a2-a4 just to pop stack
  ]
a146 1
  [ StaticSWIVeneer
a162 21
  |
        STMDB   sp!, {v1-v6, lr}
        ORR     a1, a1, #XOS_MASK       ; make a SWI of V-error type
        ORR     a1, a1, #SWI_OP         ; make into SWI operation
        ADR     v1, xexit_sequence
        LDMIA   v1, {v2,v3,v4,v5}
        MOVS    ip, a2
        MOVEQ   v2, #0
        STMDB   sp!, {a1, v2,v3,v4,v5}  ; copy SWI and exit code onto stack
        LDMNEIA ip, {r0-r9}             ; load up registers for SWI if wanted
        MOV     pc, sp                  ; and jump to the sequence
;       SWI     Xwhatever               ; <- sp
xexit_sequence
        STMIA   ip, {r0-r9}
        MOVVC   a1, #0
        ADD     sp, sp, #4 * 4
        Return  "a3,v1-v6"
                                        ; a3 is junk (LDM)
                                        ; Note: CAN NOT move stack past LDM
                                        ; before instruction executes
  ]
a179 1
  [ StaticSWIVeneer
a189 16
  |
        STMDB   sp!, {v1-v6, lr}
        ORR     a1, a1, #SWI_OP
        ADR     ip, swi6_exit_sequence
        LDMIA   ip, {ip, lr}
        STMDB   sp!, {a1, ip, lr}
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     ip, sp, #10 * 4
        LDMIA   ip, {a4, v1, v2}
        MOV     pc, sp
swi6_exit_sequence
        MOVVC   a1, #0
        Return  "a2-a4,v1-v6"
  ]
a196 1
  [ StaticSWIVeneer
a206 14
  |
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, a3, v1-v6, lr}
        MOV     a1, a2
        MOV     ip, pc
        MOV     pc, sp
        LDR     ip, [sp, #8]!
        Return  "a2,v1-v6",,VS
        TEQ     ip, #0
        STRNE   a1, [ip]
        MOV     a1, #0
        Return  "a2,v1-v6"
  ]
a210 1
  [ StaticSWIVeneer
a224 19
  |
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, a4, v1-v6, lr}
        MOV     a1, ip
        MOV     a2, a3
        MOV     ip, pc
        MOV     pc, sp
        LDR     ip, [sp, #8]!
        Return  "a2,v1-v6",,VS
        TEQ     ip, #0
        STRNE   a1, [ip]
        LDR     ip, [sp, #8 * 4]
        TEQ     ip, #0
        STRNE   a2, [ip]
        MOV     a1, #0
        Return  "a2,v1-v6"
  ]
a228 1
  [ StaticSWIVeneer
a245 22
  |
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, v1-v6, lr}
        MOV     a1, ip
        MOV     a2, a3
        MOV     a3, a4
        MOV     ip, pc
        MOV     pc, sp
        ADD     ip, sp, #9 * 4
        LDMIA   ip, {v1, v2, v3}
        Return  "a2,a3,v1-v6",,VS
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        MOV     a1, #0
        Return  "a2,a3,v1-v6"
  ]
a249 1
  [ StaticSWIVeneer
a269 25
  |
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, v1-v6, lr}
        MOV     a1, ip
        MOV     a2, a3
        MOV     a3, a4
        LDR     a4, [sp, #9 * 4]
        MOV     ip, pc
        MOV     pc, sp
        ADD     ip, sp, #10 * 4
        LDMIA   ip, {v1-v4}
        Return  "a2,a3,v1-v6",,VS
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        TEQ     v4, #0
        STRNE   a4, [v4]
        MOV     a1, #0
        Return  "a2,a3v1-v6"
  ]
a273 1
  [ StaticSWIVeneer
a296 28
  |
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, v1-v6, lr}
        MOV     a1, ip
        MOV     a2, a3
        MOV     a3, a4
        ADD     ip, sp, #9 * 4
        LDMIA   ip, {a4, v1}
        MOV     ip, pc
        MOV     pc, sp
        ADD     ip, sp, #11 * 4
        LDMIA   ip, {v3-v6, ip}
        Return  "a3,a4,v1-v6",,VS
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        MOV     a1, #0
        Return  "a3,a4,v1-v6"
  ]
a300 1
  [ StaticSWIVeneer
a325 30
  |
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, v1-v6, lr}
        MOV     a1, ip
        MOV     a2, a3
        MOV     a3, a4
        ADD     ip, sp, #9 * 4
        LDMIA   ip, {a4, v1, v2}
        MOV     ip, pc
        MOV     pc, sp
        ADD     ip, sp, #12 * 4
        LDMIA   ip, {v3-v6, ip, lr} ; APCS-R assumption here
        Return  "a3,a4,v1-v6",,VS
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        TEQ     lr, #0
        STRNE   v2, [lr]
        MOV     a1, #0
        Return  "a3,a4,v1-v6"
  ]
@


4.4
log
@32-bit work merged from kbracey_32bit branch.

Version 5.06. Tagged as 'RISC_OSLib-5_06'
@
text
@a54 2
        GET     rlib.s.asmdefs

@


4.3
log
@Ursula branch merged.
StrongARMfudge flag removed.
StrongARM compatibility set according to AMBKernel flag in Hdr:RISCOS
strftime %U and %W specifiers fixed for week 0.

Version 4.89. Tagged as 'RISC_OSLib-4_89'
@
text
@d44 2
d47 1
a47 81
; SWI values

WriteC        * &00
WriteS        * &01
Write0        * &02
NewLine       * &03
ReadC         * &04
CLI           * &05
Byte          * &06
Word          * &07
File          * &08
Args          * &09
BGet          * &0A

BPut          * &0B
Multiple      * &0C
Open          * &0D
ReadLine      * &0E
Control       * &0F
GetEnv        * &10
Exit          * &11
SetEnv        * &12
IntOn         * &13
IntOff        * &14
CallBack      * &15
EnterOS       * &16
BreakPt       * &17
BreakCtrl     * &18
UnusedSWI     * &19
UpdateMEMC    * &1A
SetCallBack   * &1B
Mouse         * &1C

Heap          * &1D
Module        * &1E
Claim         * &1F     ; vector handling routines
Release       * &20     ; vector handling routines
ReadUnsigned  * &21     ; Read an unsigned number
GenerateEvent * &22
ReadVarVal    * &23     ; read variable value & type
SetVarVal     * &24     ; set  variable value & type
GSInit        * &25
GSRead        * &26
GSTrans       * &27
BinaryToDecimal   * &28
FSControl         * &29
ChangeDynamicArea * &2A
GenerateError     * &2B
ReadEscapeState   * &2C

WriteI        * &100

UserSWI       * &200


Initialise          *    &000400c0
CreateWindow        *    &000400c1
CreateIcon          *    &000400c2
DeleteWindow        *    &000400c3
DeleteIcon          *    &000400c4
OpenWindow          *    &000400c5
CloseWindow         *    &000400c6
Poll                *    &000400c7
RedrawWindow        *    &000400c8
UpdateWindow        *    &000400c9
GetRectangle        *    &000400ca
GetWindowState      *    &000400cb
GetWindowInfo       *    &000400cc
SetIconState        *    &000400cd
GetIconState        *    &000400ce
GetPointerInfo      *    &000400cf
DragBox             *    &000400d0
ForceRedraw         *    &000400d1
SetCaretPosition    *    &000400d2
GetCaretPosition    *    &000400d3
CreateMenu          *    &000400d4
DecodeMenu          *    &000400d5
WhichIcon           *    &000400d6
SetExtent           *    &000400d7
SetPointerShape     *    &000400d8

a54 35
r0 RN 0
r1 RN 1
r2 RN 2
r3 RN 3
r4 RN 4
r5 RN 5
r6 RN 6
r7 RN 7
r8 RN 8
r9 RN 9
r10 RN 10
r11 RN 11
r12 RN 12
r13 RN 13
r14 RN 14
r15 RN 15

a1 RN 0
a2 RN 1
a3 RN 2
a4 RN 3
v1 RN 4
v2 RN 5
v3 RN 6
v4 RN 7
v5 RN 8
v6 RN 9
sl RN 10
fp RN 11
ip RN 12
sp RN 13
lk RN 14
lr RN 14
pc RN 15

a55 1
        GET     s.h_StrongA
d103 4
a106 4
bbc_get SWI     XOS_MASK :OR: ReadC
        MOVVSS  pc, lk
        ORRCSS  a1, a1, #&100           ; SKS
        MOVS    pc, lk
d110 2
a111 2
        SWI     XOS_MASK :OR: WriteC
        MOVVSS  pc, lk
d113 1
a113 1
bbc_vdu SWI     XOS_MASK :OR: WriteC
d115 1
a115 1
        MOVS    pc, lk
d124 1
a124 1
        STMDB   sp!, {v1-v6, lk}
d133 1
a133 1
        LDMIA   sp!, {v1-v6, pc}^
d136 1
a136 1
        LDMIA   sp!, {v1-v6, pc}^
d138 1
a138 1
        STMDB   sp!, {v1-v6, lk}
d150 1
a150 1
        LDMIA   sp!, {a2-a4, v1-v6, pc}^ ; a2-a4 just to pop stack
d160 1
a160 1
        STMDB   sp!, {v1-v6, lk}
d171 1
a171 1
        LDMIA   sp!, {v1-v6, pc}^
d175 1
a175 1
        LDMIA   sp!, {v1-v6, pc}^
d177 1
a177 1
        STMDB   sp!, {v1-v6, lk}
d192 1
a192 1
        LDMIA   sp!, {a3, v1-v6, pc}^
d215 1
a215 1
        STMDB   sp!, {v1-v6, lk}
d220 2
a221 2
        ADD     lk, sp, #7*4
        LDMIA   lk, {a4, v1, v2}
d224 1
a224 1
        LDMIA   sp!, {v1-v6, pc}^
d226 1
a226 1
        STMDB   sp!, {v1-v6, lk}
d229 2
a230 2
        LDMIA   ip, {ip, lk}
        STMDB   sp!, {a1, ip, lk}
d239 1
a239 1
        LDMIA   sp!, {a2-a4, v1-v6, pc}^
d249 1
a249 1
        STMDB   sp!, {a3, v1-v6, lk}
d254 1
a254 1
        LDMVSIA sp!, {a2, v1-v6, pc}^
d258 1
a258 1
        LDMIA   sp!, {a2, v1-v6, pc}^
d262 1
a262 1
        STMDB   sp!, {a1, a2, a3, v1-v6, lk}
d267 1
a267 1
        LDMVSIA sp!, {a2, v1-v6, pc}^
d271 1
a271 1
        LDMIA   sp!, {a2, v1-v6, pc}^
d278 1
a278 1
        STMDB   sp!, {a4, v1-v6, lk}
d284 1
a284 1
        LDMVSIA sp!, {a2, v1-v6, pc}^
d291 1
a291 1
        LDMIA   sp!, {a2, v1-v6, pc}^
d296 1
a296 1
        STMDB   sp!, {a1, a2, a4, v1-v6, lk}
d302 1
a302 1
        LDMVSIA sp!, {a2, v1-v6, pc}^
d309 1
a309 1
        LDMIA   sp!, {a2, v1-v6, pc}^
d316 1
a316 1
        STMDB   sp!, {v1-v6, lk}
d324 1
a324 1
        LDMVSIA sp!, {v1-v6, pc}^
d332 1
a332 1
        LDMIA   sp!, {v1-v6, pc}^
d337 1
a337 1
        STMDB   sp!, {a1, a2, v1-v6, lk}
d345 1
a345 1
        LDMVSIA sp!, {a2, a3, v1-v6, pc}^
d353 1
a353 1
        LDMIA   sp!, {a2, a3, v1-v6, pc}^
d360 1
a360 1
        STMDB   sp!, {v1-v6, lk}
d369 1
a369 1
        LDMVSIA sp!, {v1-v6, pc}^
d379 1
a379 1
        LDMIA   sp!, {v1-v6, pc}^
d384 1
a384 1
        STMDB   sp!, {a1, a2, v1-v6, lk}
d393 1
a393 1
        LDMVSIA sp!, {a2, a3, v1-v6, pc}^
d403 1
a403 1
        LDMIA   sp!, {a2, a3, v1-v6, pc}^
d410 1
a410 1
        STMDB   sp!, {v1-v6, lk}
d415 2
a416 2
        ADD     lk, sp, #7 * 4
        LDMIA   lk, {a4, v1}
d420 1
a420 1
        LDMVSIA sp!, {v1-v6, pc}^
d432 1
a432 1
        LDMIA   sp!, {v1-v6, pc}^
d437 1
a437 1
        STMDB   sp!, {a1, a2, v1-v6, lk}
d447 1
a447 1
        LDMVSIA sp!, {a3, a4, v1-v6, pc}^
d459 1
a459 1
        LDMIA   sp!, {a3, a4, v1-v6, pc}^
d466 1
a466 1
        STMDB   sp!, {v1-v6, lk}
d471 2
a472 2
        ADD     lk, sp, #7 * 4
        LDMIA   lk, {a4, v1, v2}
d475 2
a476 2
        LDMIA   ip, {v3-v6, ip, lk}     ; APCS-R assumption here
        LDMVSIA sp!, {v1-v6, pc}^
d487 2
a488 2
        TEQ     lk, #0
        STRNE   v2, [lk]
d490 1
a490 1
        LDMIA   sp!, {v1-v6, pc}^
d495 1
a495 1
        STMDB   sp!, {a1, a2, v1-v6, lk}
d504 2
a505 2
        LDMIA   ip, {v3-v6, ip, lk} ; APCS-R assumption here
        LDMVSIA sp!, {a3, a4, v1-v6, pc}^
d516 2
a517 2
        TEQ     lk, #0
        STRNE   v2, [lk]
d519 1
a519 1
        LDMIA   sp!, {a3, a4, v1-v6, pc}^
d523 1
a523 1
        STMDB   sp!, {lk}
d528 1
a528 1
        SWI     XOS_MASK + Byte
d532 1
a532 1
        LDMIA   sp!, {pc}^
d535 2
a536 2
        MOV     ip, lk
        SWI     XOS_MASK + Word
d538 1
a538 1
        MOVS    pc, ip
d541 1
a541 1
        STMDB   sp!, {r4, lk}
d544 1
a544 1
        SWI     &20023
d548 1
a548 1
        LDMIA   sp!, {r4, pc}^
@


4.3.2.1
log
@_kernel_unwind now understands SFMFD instructions in function entry.
It also copes with STFE now - it was totally broken.
32-bit stubs and corresponding LibInit SWIs created.
All rather untested.

Version 4.97, 4.12.2.3. Tagged as 'RISC_OSLib-4_97-4_12_2_3'
@
text
@d169 1
a169 1
        GET     s.h_Brazil
@


4.3.2.2
log
@Most of the obvious problems in the last check-in fixed. It now builds, at
least.
Stubs now correctly, and internationalisably, report "C library too old".
Both BL and LDR PC forms of branch table successfully created.
Tested on various existing 26-bit programs, and one 32-bit program tested.

Version 4.97, 4.12.2.4. Tagged as 'RISC_OSLib-4_97-4_12_2_4'
@
text
@a43 2
        GBLL    ModeMayBeNonUser
ModeMayBeNonUser   SETL  {TRUE}
d45 81
a125 1
        GET     s.h_Brazil
d169 1
@


4.3.2.3
log
@  Work in progress.  Do not use.
Detail:
  Many changes to use the APCS macros for function entry and exit so
    that the code can build for 32-bit environments.  Changes are NOT
    yet complete.
  Makefile rebuilds swis.h header file but only exports it if it has
    changed to avoid unnecessary rebuilding of nearly all C sources
    in a build.
Admin:
  Work in progress.  Do not use.

Version 4.97, 4.12.2.5. Tagged as 'RISC_OSLib-4_97-4_12_2_5'
@
text
@d45 1
a45 1
ModeMayBeNonUser   SETL  {FALSE}
d55 35
d138 4
a141 4
bbc_get SWI     XOS_ReadC
        Return  ,LinkNotStacked,VS
        ORRCS   a1, a1, #&100           ; SKS
        Return  ,LinkNotStacked
d145 2
a146 2
        SWI     XOS_WriteC
        Return  ,LinkNotStacked,VS
d148 1
a148 1
bbc_vdu SWI     XOS_WriteC
d150 1
a150 1
        Return  ,LinkNotStacked
d159 1
a159 1
        STMDB   sp!, {v1-v6, lr}
d168 1
a168 1
        Return  "v1-v6"
d171 1
a171 1
        Return  "v1-v6"
d173 1
a173 1
        STMDB   sp!, {v1-v6, lr}
d185 1
a185 1
        Return  "a2-a4,v1-v6"           ; a2-a4 just to pop stack
d195 1
a195 1
        STMDB   sp!, {v1-v6, lr}
d206 1
a206 1
        Return  "v1-v6"
d210 1
a210 1
        Return  "v1-v6"
d212 1
a212 1
        STMDB   sp!, {v1-v6, lr}
d227 1
a227 1
        Return  "a3,v1-v6"
d250 1
a250 1
        STMDB   sp!, {v1-v6, lr}
d255 2
a256 2
        ADD     lr, sp, #7*4
        LDMIA   lr, {a4, v1, v2}
d259 1
a259 1
        Return  "v1-v6"
d261 1
a261 1
        STMDB   sp!, {v1-v6, lr}
d264 2
a265 2
        LDMIA   ip, {ip, lr}
        STMDB   sp!, {a1, ip, lr}
d274 1
a274 1
        Return  "a2-a4,v1-v6"
d284 1
a284 1
        STMDB   sp!, {a3, v1-v6, lr}
d289 1
a289 1
        Return  "a2,v1-v6",,VS
d293 1
a293 1
        Return  "a2,v1-v6"
d297 1
a297 1
        STMDB   sp!, {a1, a2, a3, v1-v6, lr}
d302 1
a302 1
        Return  "a2,v1-v6",,VS
d306 1
a306 1
        Return  "a2,v1-v6"
d313 1
a313 1
        STMDB   sp!, {a4, v1-v6, lr}
d319 1
a319 1
        Return  "a2,v1-v6",,VS
d326 1
a326 1
        Return  "a2,v1-v6"
d331 1
a331 1
        STMDB   sp!, {a1, a2, a4, v1-v6, lr}
d337 1
a337 1
        Return  "a2,v1-v6",,VS
d344 1
a344 1
        Return  "a2,v1-v6"
d351 1
a351 1
        STMDB   sp!, {v1-v6, lr}
d359 1
a359 1
        Return  "v1-v6",,VS
d367 1
a367 1
        Return  "v1-v6"
d372 1
a372 1
        STMDB   sp!, {a1, a2, v1-v6, lr}
d380 1
a380 1
        Return  "a2,a3,v1-v6",,VS
d388 1
a388 1
        Return  "a2,a3,v1-v6"
d395 1
a395 1
        STMDB   sp!, {v1-v6, lr}
d404 1
a404 1
        Return  "v1-v6",,VS
d414 1
a414 1
        Return  "v1-v6"
d419 1
a419 1
        STMDB   sp!, {a1, a2, v1-v6, lr}
d428 1
a428 1
        Return  "a2,a3,v1-v6",,VS
d438 1
a438 1
        Return  "a2,a3v1-v6"
d445 1
a445 1
        STMDB   sp!, {v1-v6, lr}
d450 2
a451 2
        ADD     lr, sp, #7 * 4
        LDMIA   lr, {a4, v1}
d455 1
a455 1
        Return  "v1-v6",,VS
d467 1
a467 1
        Return  "v1-v6"
d472 1
a472 1
        STMDB   sp!, {a1, a2, v1-v6, lr}
d482 1
a482 1
        Return  "a3,a4,v1-v6",,VS
d494 1
a494 1
        Return  "a3,a4,v1-v6"
d501 1
a501 1
        STMDB   sp!, {v1-v6, lr}
d506 2
a507 2
        ADD     lr, sp, #7 * 4
        LDMIA   lr, {a4, v1, v2}
d510 2
a511 2
        LDMIA   ip, {v3-v6, ip, lr}     ; APCS-R assumption here
        Return  "v1-v6",,VS
d522 2
a523 2
        TEQ     lr, #0
        STRNE   v2, [lr]
d525 1
a525 1
        Return  "v1-v6"
d530 1
a530 1
        STMDB   sp!, {a1, a2, v1-v6, lr}
d539 2
a540 2
        LDMIA   ip, {v3-v6, ip, lr} ; APCS-R assumption here
        Return  "a3,a4,v1-v6",,VS
d551 2
a552 2
        TEQ     lr, #0
        STRNE   v2, [lr]
d554 1
a554 1
        Return  "a3,a4,v1-v6"
d558 1
a558 1
        FunctionEntry
d563 1
a563 1
        SWI     XOS_Byte
d567 1
a567 1
        Return
d570 2
a571 2
        MOV     ip, lr
        SWI     XOS_Word
d573 1
a573 1
        Return  ,LinkNotStacked,,ip
d576 1
a576 1
        FunctionEntry "r4"
d579 1
a579 1
        SWI     XOS_ReadVarVal
d583 1
a583 1
        Return  "r4"
@


4.2
log
@Version RO_3_70 taken
@
text
@a174 4
;fudge needed for StrongARM when dynamic code used
        GBLL    StrongARMfudge
StrongARMfudge   SETL StrongARM :LAND: {TRUE}

a258 3
  [ StrongARMfudge
    SyncStackCode 3
  ]
a298 3
  [ StrongARMfudge
    SyncStackCode 5
  ]
a344 3
  [ StrongARMfudge
    SyncStackCode 3
  ]
d371 1
a371 1
        MOV     a1, #0        
a376 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a410 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a451 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a498 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a551 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a609 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
@


4.1
log
@Initial revision
@
text
@d169 9
d240 17
a256 2
os_swi  STMDB   sp!, {v1-v6, lk}

a257 1

d263 3
a267 1

d272 1
d279 21
a299 2
os_swix STMDB   sp!, {v1-v6, lk}

a300 2
        ORR     a1, a1, #XOS_MASK       ; make a SWI of V-error type

d306 3
a310 1

d320 2
d338 12
d355 3
a363 1

d367 1
d375 12
d390 3
d402 1
d407 16
d427 3
d443 1
d448 19
d471 3
d490 1
d495 22
d521 3
d543 1
d548 25
d577 3
d602 1
d607 27
d638 3
d665 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a168 9
        GET     s.h_StrongA

;whether to avoid dynamic code for swi veneers
        GBLL    StaticSWIVeneer
StaticSWIVeneer  SETL StrongARM :LAND: {TRUE}

;fudge needed for StrongARM when dynamic code used
        GBLL    StrongARMfudge
StrongARMfudge   SETL StrongARM :LAND: {TRUE}
d231 2
a232 17
os_swi
  [ StaticSWIVeneer
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        CMP     r1, #0
        BEQ     os_swi_noregset
        STMDB   sp!, {r1}
        LDMIA   r1, {r0-r9}
        SWI     XOS_CallASWIR12
        LDMIA   sp!, {ip}
        STMIA   ip, {r0-r9}
        LDMIA   sp!, {v1-v6, pc}^
os_swi_noregset
        SWI     XOS_CallASWIR12
        LDMIA   sp!, {v1-v6, pc}^
  |
        STMDB   sp!, {v1-v6, lk}
d234 1
a239 3
  [ StrongARMfudge
    SyncStackCode 3
  ]
d242 1
a246 1
  ]
d253 3
a255 3
os_swix
  [ StaticSWIVeneer
        STMDB   sp!, {v1-v6, lk}
d257 1
a257 18
        MOV     r12, r0
        CMP     r1, #0
        BEQ     os_swix_noregset
        STMDB   sp!, {r1}
        LDMIA   r1, {r0-r9}
        SWI     XOS_CallASWIR12
        LDMIA   sp!, {ip}
        STMIA   ip, {r0-r9}
        MOVVC   a1, #0
        LDMIA   sp!, {v1-v6, pc}^
os_swix_noregset
        SWI     XOS_CallASWIR12
        MOVVC   a1, #0
        LDMIA   sp!, {v1-v6, pc}^
  |
        STMDB   sp!, {v1-v6, lk}
        ORR     a1, a1, #XOS_MASK       ; make a SWI of V-error type
        ORR     a1, a1, #SWI_OP         ; make into SWI operation
a262 3
  [ StrongARMfudge
    SyncStackCode 5
  ]
d265 1
a274 2
  ]

a290 12
  [ StaticSWIVeneer
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     lk, sp, #7*4
        LDMIA   lk, {a4, v1, v2}
        SWI     XOS_CallASWIR12
        MOVVC   a1, #0
        LDMIA   sp!, {v1-v6, pc}^
  |
a295 3
  [ StrongARMfudge
    SyncStackCode 3
  ]
d302 1
a305 1
  ]
a312 12
  [ StaticSWIVeneer
        STMDB   sp!, {a3, v1-v6, lk}
        MOV     r12, r0
        MOV     r0, a2
        SWI     XOS_CallASWIR12
        LDR     ip, [sp]
        LDMVSIA sp!, {a2, v1-v6, pc}^
        TEQ     ip, #0
        STRNE   a1, [ip]
        MOV     a1, #0        
        LDMIA   sp!, {a2, v1-v6, pc}^
  |
a315 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a324 1
  ]
a328 16
  [ StaticSWIVeneer
        STMDB   sp!, {a4, v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        SWI     XOS_CallASWIR12
        LDR     ip, [sp]
        LDMVSIA sp!, {a2, v1-v6, pc}^
        TEQ     ip, #0
        STRNE   a1, [ip]
        LDR     ip, [sp, #8 * 4]
        TEQ     ip, #0
        STRNE   a2, [ip]
        MOV     a1, #0
        LDMIA   sp!, {a2, v1-v6, pc}^
  |
a332 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a345 1
  ]
a349 19
  [ StaticSWIVeneer
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #7 * 4
        LDMIA   ip, {v1, v2, v3}
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^
  |
a353 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a369 1
  ]
a373 22
  [ StaticSWIVeneer
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        LDR     a4, [sp, #7 * 4]
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #8 * 4
        LDMIA   ip, {v1-v4}
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        TEQ     v4, #0
        STRNE   a4, [v4]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^
  |
a377 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a396 1
  ]
a400 25
  [ StaticSWIVeneer
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     lk, sp, #7 * 4
        LDMIA   lk, {a4, v1}
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #9 * 4
        LDMIA   ip, {v3-v6, ip}
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^
  |
a404 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a426 1
  ]
a430 27
  [ StaticSWIVeneer
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     lk, sp, #7 * 4
        LDMIA   lk, {a4, v1, v2}
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #10 * 4
        LDMIA   ip, {v3-v6, ip, lk}     ; APCS-R assumption here
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        TEQ     lk, #0
        STRNE   v2, [lk]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^
  |
a434 3
  [ StrongARMfudge
    SyncStackCode 2
  ]
a458 1
  ]
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
