head	4.1;
access;
symbols
	RISC_OSLib-5_97:4.1
	RISC_OSLib-5_96:4.1
	RISC_OSLib-5_95:4.1
	RISC_OSLib-5_94:4.1
	RISC_OSLib-5_93:4.1
	RISC_OSLib-5_92:4.1
	RISC_OSLib-5_91:4.1
	RISC_OSLib-5_90:4.1
	RISC_OSLib-5_89:4.1
	RISC_OSLib-5_88:4.1
	RISC_OSLib-5_87:4.1
	RISC_OSLib-5_86-1:4.1
	RISC_OSLib-5_86:4.1
	RISC_OSLib-5_85:4.1
	RISC_OSLib-5_84:4.1
	RISC_OSLib-5_83-2:4.1
	RISC_OSLib-5_83-1:4.1
	RISC_OSLib-5_83:4.1
	RISC_OSLib-5_82:4.1
	RISC_OSLib-5_81:4.1
	RISC_OSLib-5_75-2:4.1
	RISC_OSLib-5_80:4.1
	RISC_OSLib-5_79:4.1
	RISC_OSLib-5_78:4.1
	RISC_OSLib-5_75-1:4.1
	RISC_OSLib-5_77:4.1
	RISC_OSLib-5_76:4.1
	RISC_OSLib-5_75:4.1
	RISC_OSLib-5_74:4.1
	RISC_OSLib-5_73:4.1
	RISC_OSLib-5_72:4.1
	RISC_OSLib-5_71:4.1
	RISC_OSLib-5_70:4.1
	RISC_OSLib-5_69:4.1
	RISC_OSLib-5_68:4.1
	RISC_OSLib-5_67:4.1
	RISC_OSLib-5_66:4.1
	RISC_OSLib-5_65:4.1
	RISC_OSLib-5_64:4.1
	RISC_OSLib-5_63:4.1
	RISC_OSLib-5_62:4.1
	RISC_OSLib-5_61:4.1
	RISC_OSLib-5_60:4.1
	RISC_OSLib-5_59:4.1
	RISC_OSLib-5_58:4.1
	RISC_OSLib-5_57:4.1
	RISC_OSLib-5_56:4.1
	RISC_OSLib-5_55:4.1
	RISC_OSLib-5_54:4.1
	RISC_OSLib-5_53:4.1
	RISC_OSLib-5_52:4.1
	RISC_OSLib-5_51:4.1
	RO_5_07:4.1
	RISC_OSLib-5_50:4.1
	RISC_OSLib-5_49:4.1
	RISC_OSLib-5_46-4_64_2_1:4.1
	NoInlineAsm:4.1.0.8
	RISC_OSLib-5_48:4.1
	RISC_OSLib-5_47:4.1
	RISC_OSLib-5_46:4.1
	RISC_OSLib-5_45:4.1
	RISC_OSLib-5_44:4.1
	RISC_OSLib-5_43:4.1
	RISC_OSLib-5_42:4.1
	RISC_OSLib-5_41:4.1
	RISC_OSLib-5_40:4.1
	RISC_OSLib-5_39:4.1
	RISC_OSLib-5_38:4.1
	RISC_OSLib-5_37:4.1
	RISC_OSLib-5_36:4.1
	RISC_OSLib-5_35:4.1
	RISC_OSLib-5_34:4.1
	RISC_OSLib-5_33-4_50_2_1:4.1
	sbrodie_dev:4.1.0.6
	sbrodie_dev_bp:4.1
	RISC_OSLib-5_33:4.1
	RISC_OSLib-5_32:4.1
	RISC_OSLib-5_31:4.1
	RISC_OSLib-5_30:4.1
	RISC_OSLib-5_29:4.1
	RISC_OSLib-5_28:4.1
	RISC_OSLib-5_27:4.1
	RISC_OSLib-5_26:4.1
	RISC_OSLib-5_25:4.1
	RISC_OSLib-5_24:4.1
	RISC_OSLib-5_01-4_16_2_5:4.1
	RISC_OSLib-5_23:4.1
	RISC_OSLib-5_22:4.1
	RISC_OSLib-5_21:4.1
	RISC_OSLib-5_20:4.1
	RISC_OSLib-5_19:4.1
	RISC_OSLib-5_18:4.1
	RISC_OSLib-5_17:4.1
	RISC_OSLib-5_16:4.1
	RISC_OSLib-5_15:4.1
	dellis_autobuild_BaseSW:4.1
	RISC_OSLib-5_14:4.1
	RISC_OSLib-5_13:4.1
	RISC_OSLib-5_12:4.1
	RISC_OSLib-5_01-4_16_2_4:4.1
	RISC_OSLib-5_11:4.1
	RISC_OSLib-5_01-4_16_2_3:4.1
	RISC_OSLib-5_01-4_16_2_2:4.1
	RISC_OSLib-5_10:4.1
	RISC_OSLib-5_01-4_16_2_1:4.1
	Bethany:4.1.0.4
	RISC_OSLib-5_09:4.1
	RISC_OSLib-5_08:4.1
	RISC_OSLib-5_07:4.1
	RISC_OSLib-5_06:4.1
	RISC_OSLib-4_97-4_12_2_8:4.1
	RISC_OSLib-5_05:4.1
	RISC_OSLib-5_04:4.1
	sbrodie_sedwards_16Mar2000:4.1
	RISC_OSLib-5_03:4.1
	RISC_OSLib-5_02:4.1
	RISC_OSLib-4_97-4_12_2_7:4.1
	RISC_OSLib-5_01:4.1
	RISC_OSLib-5_00:4.1
	RISC_OSLib-4_99:4.1
	RISC_OSLib-4_98:4.1
	RISC_OSLib-4_97-4_12_2_6:4.1
	RISC_OSLib-4_97-4_12_2_5:4.1
	RISC_OSLib-4_97-4_12_2_4:4.1
	RISC_OSLib-4_97-4_12_2_3:4.1
	RISC_OSLib-4_97-4_12_2_2:4.1
	sbrodie_RISC_OSLib-4_97-4_12_2_1:4.1
	kbracey_32bit:4.1.0.2
	kbracey_32bit_bp:4.1
	dcotton_autobuild_BaseSW:4.1
	RISC_OSLib-4_97:4.1
	RISC_OSLib-4_96:4.1
	RISC_OSLib-4_95:4.1
	RISC_OSLib-4_94:4.1
	RISC_OSLib-4_93:4.1
	RISC_OSLib-4_92:4.1
	RISC_OSLib-4_91:4.1
	RISC_OSLib-4_90:4.1;
locks; strict;
comment	@# @;


4.1
date	98.10.26.09.57.01;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.1
log
@  Added new -v4 pragma to derived swis.h header file.
  Moved template for swis.h out of asm source into separate text file.
Detail:
  s.makehswis: The text which forms the common header for the derived
    swis.h is now stored externally rather than declared inline with
    assembler directives.
  h.swisheaders: The external file containing the common header.
    Now wraps the declarations of _swi and _swix with "#pragma -v4"
    to activate the _swi/_swix parameter checking for those functions.
  Makefile: Added dependency of derived.swis on h.swisheader
Admin:
  Built and exported.  Tested with cc 5.09 and it was happy with the
  new pragma (it ignores it).  Tested with what will be cc 5.10 and
  it recognised it and started checking _swi and _swix calls.

Version 4.90. Tagged as 'RISC_OSLib-4_90'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma force_top_level
#pragma include_only_once

/*Name:    swis.h
  Purpose: Generalised SWI interface
  Author:  (c) Acorn Computers Ltd, 1989
  Version: 2.04 (09-Jan-1995)
  This file is automatically generated from Hdr:makehswis
*/

#ifndef __swis_h
#define __swis_h

#ifndef __kernel_h
  #include "kernel.h"
#endif

#ifdef __cplusplus
extern "C"
{
#endif

#pragma -v4
extern int _swi (int swi_no, unsigned int, ...);

extern _kernel_oserror *_swix (int swi_no, unsigned int, ...);
#pragma -v0

#ifdef __cplusplus
}
#endif

#define _FLAGS     0x10 /*use with _RETURN() or _OUT()*/
#define _IN(i)     (1U << (i))
#define _INR(i,j)  (~0 << (i) ^ ~0 << (j) + 1)
#define _OUT(i)    ((i) != _FLAGS? 1U << 31 - (i): 1U << 21)
#define _OUTR(i,j) (~0U >> (i) ^ ~0U >> (j) + 1)
#define _BLOCK(i)  (1U << 11 | (unsigned) (i) << 12)
#define _RETURN(i) ((i) != _FLAGS? (unsigned) (i) << 16: 0xFU << 16)
#define _C         (1U << 29)
#define _Z         (1U << 30)
#define _N         (1U << 31)

#define XOS_Bit    (1U << 17) /*deprecated: use _swi() or _swix()*/

/*
 * These functions provide a generic method of calling RISC OS SWIs from C or
 * C++.
 *
 * Two functions are provided:
 *     _swi for calling SWIs without setting the X bit
 *     _swix which sets the X bit before calling the SWI.
 *
 * swi_no is the number of the SWI to be called. This should never have the
 * X bit set.
 *
 * mask is a word containing an input and output register mask, a return
 * register, and a block parameter register.
 *
 * The arrangement of mask is as follows:
 *
 * Bits 0 -  9:  Set if R(N) is passed to the SWI.
 * Bits 22 - 31: Set if R(31-N) is output from the SWI (ie bit 31
 *               corresponds to R0, bit 22 corresponds to R9).
 * Bit 21:       Set if the PC (including the flags) is to be output.
 * Bits 16 - 19: Register no. to be returned from a _swi call. This is only
 *               applicable to _swi as _swix always returns either 0 or an error
 *               pointer.
 * Bit 11:       Set if a local block parameter is to be passed to the SWI
 * Bits 12 - 15: Register number for local block parameter if bit 11 set.
 *
 * If a register is specified as a return register (bits 16-19) it must not
 * also be specified as an output register in the output register mask
 * (bits 22-31).
 *
 * If a register is specified as a local block parameter register it must not
 * also be specified as an input register in the input register mask
 * (bits 0-9).
 *
 * If the PC is specified as a return register (ie bits 16-19 = 15) or as an
 * output registers (bit 21 = 1) the value returned will contain the flags in
 * bits 28 to 31 (28 = V, 29 = C, 30 = Z, 31 = N).
 *
 * The remainder of the variadic arguments are as follows (in order):
 *
 * The word value of each input register in order from 0 to 9 as specified by
 * bits 0 to 9 of the mask.
 *
 * The address of a word to be written for each output register in order from
 * 0 to 9 as specified by bits 31 downto 22 of the mask.
 *
 * The address of a word to be written with the PC value on exit from the SWI
 * if bit 21 of the register mask is set.
 *
 * If bit 11 is set the remainder of the arguments are placed in order in a
 * parameter block and the address of the parameter block is passed to the SWI
 * in the register specified by bits 12-15.
 *
 * The macros are as follows:
 *
 * _IN(n)       - Specifies that R(n) is used on input
 * _OUT(n)      - Specifies that R(n) is output
 * _BLOCK(n)    - Specifies that R(n) is a block parameter
 * _RETURN(n)   - Specifies that R(n) is returned from _swi.
 *
 * The values of the macros should be ORed together to produce the value for
 * the mask.
 *
 * The following constants are defined
 *
 * _FLAGS       - the register containing the flags (currently 15)
 * _C           - mask for the C bit in _FLAGS
 * _Z           - mask for the Z bit in _FLAGS
 * _N           - mask for the N bit in _FLAGS
 *
 * Example calls:
 *
 *     _swi(OS_NewLine, 0);   // Must specify 0 register mask
 *
 *     _swi(OS_Write0, _IN(0), "Hello, World");
 *
 *     task_handle = _swi(Wimp_Initialise, _IN(0)|_IN(1)|_IN(2)|_RETURN(1),
 *                        300, *(int *)"TASK", "Test");
 *
 *     e = _swix(Wimp_LoadTemplate, _IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5)|_IN(6)|
 *                                  _OUT(2)|_OUT(6),
 *               template_buffer, workspace, workspace_end, -1, "MyWind", next,
 *               &workspace_end, &next);
 *
 *     e = _swix(Wimp_SetExtent, _IN(0)|_BLOCK(1), w, minx, miny, maxx, maxy);
 */

@
