head	1.1;
access;
symbols
	RISC_OSLib-5_97:1.1
	RISC_OSLib-5_96:1.1
	RISC_OSLib-5_95:1.1
	RISC_OSLib-5_94:1.1
	RISC_OSLib-5_93:1.1
	RISC_OSLib-5_92:1.1
	RISC_OSLib-5_91:1.1
	RISC_OSLib-5_90:1.1
	RISC_OSLib-5_89:1.1
	RISC_OSLib-5_88:1.1
	RISC_OSLib-5_87:1.1
	RISC_OSLib-5_86-1:1.1
	RISC_OSLib-5_86:1.1
	RISC_OSLib-5_85:1.1
	RISC_OSLib-5_84:1.1
	RISC_OSLib-5_83-2:1.1
	RISC_OSLib-5_83-1:1.1
	RISC_OSLib-5_83:1.1
	RISC_OSLib-5_82:1.1
	RISC_OSLib-5_81:1.1
	RISC_OSLib-5_75-2:1.1
	RISC_OSLib-5_80:1.1
	RISC_OSLib-5_79:1.1
	RISC_OSLib-5_78:1.1
	RISC_OSLib-5_75-1:1.1
	RISC_OSLib-5_77:1.1
	RISC_OSLib-5_76:1.1
	RISC_OSLib-5_75:1.1
	RISC_OSLib-5_74:1.1
	RISC_OSLib-5_73:1.1
	RISC_OSLib-5_72:1.1
	RISC_OSLib-5_71:1.1
	RISC_OSLib-5_70:1.1
	RISC_OSLib-5_69:1.1
	RISC_OSLib-5_68:1.1
	RISC_OSLib-5_67:1.1
	RISC_OSLib-5_66:1.1
	RISC_OSLib-5_65:1.1
	RISC_OSLib-5_64:1.1
	RISC_OSLib-5_63:1.1
	RISC_OSLib-5_62:1.1
	RISC_OSLib-5_61:1.1
	RISC_OSLib-5_60:1.1
	RISC_OSLib-5_59:1.1
	RISC_OSLib-5_58:1.1
	RISC_OSLib-5_57:1.1
	RISC_OSLib-5_56:1.1
	RISC_OSLib-5_55:1.1
	RISC_OSLib-5_54:1.1
	RISC_OSLib-5_53:1.1
	RISC_OSLib-5_52:1.1
	RISC_OSLib-5_51:1.1
	RO_5_07:1.1
	RISC_OSLib-5_50:1.1
	RISC_OSLib-5_49:1.1
	RISC_OSLib-5_46-4_64_2_1:1.1
	NoInlineAsm:1.1.0.2
	RISC_OSLib-5_48:1.1
	RISC_OSLib-5_47:1.1
	RISC_OSLib-5_46:1.1
	RISC_OSLib-5_45:1.1
	RISC_OSLib-5_44:1.1
	RISC_OSLib-5_43:1.1
	RISC_OSLib-5_42:1.1
	RISC_OSLib-5_41:1.1
	RISC_OSLib-5_40:1.1
	RISC_OSLib-5_39:1.1
	RISC_OSLib-5_38:1.1
	RISC_OSLib-5_37:1.1
	RISC_OSLib-5_36:1.1
	RISC_OSLib-5_35:1.1;
locks; strict;
comment	@# @;


1.1
date	2002.01.29.16.03.34;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Abort and error handling massively overhauled:
  Aborts now give standard error messages (Abort on Data Transfer at... etc)
  *ShowRegs now filled in after aborts
  assert(), abort(), "free failed" and standard signal handlers now use Wimp
    error boxes if in the desktop
  Postmortem button on error boxes to view the postmortem

Also, x$multiply, x$divide, __rt_sdiv, x$remainder, x$udivide, __rt_udiv and
x$uremainder optimised.

Version 5.35. Tagged as 'RISC_OSLib-5_35'
@
text
@R0 -> error, R1-R9 as returned from SWI, R10-R12, SWI addr on stack, R14=SPSR

On entry to error handler, for SWI errors:

User mode - IRQs on

R0 -> error handler's buffer (containing PC error occured at (address of instr after SWI),
                              and a copy of the error)
R1-R9 as returned from the SWI
R10-R12 recovered from stack (may be wrong if SWI wasn't top level - bad person)
User R13,R14 as it was when SWI called


Default abort handler:
Register block filled in with registers for current mode at time of abort.
Stacks flattened
R10-R12, PC from dump placed in SVC stack
OS_Generate error called.
End result: R0-> error
            R1-R9 corrupt
            R10-R12 = registers at instant of abort (from mode in which abort happened)
            R13,R14 = USR registers at instant of abort
            Register block contains registers for current mode at time of abort.


C abort handler should note USR mode registers (only) then pass it on.
C error handler should note that it is an abort, and not touch the register dump.

Error numbers:
&800000XX - machine exceptions: 00=Undef, 01=PAbort, 02=DAbort, 03=AddrEx, 04=Unknown IRQ?
                                05=BThru0
&800002XX - FP exceptions:      00=IVO, 01=OFL, 02=DVZ, 03=UFL, 04=INX, 05=Faulty


FP exceptions:

User mode registers go into integer register dump.
FP registers go into FP register dump
OS_GenerateError from inside FPEm - error handler called with all except R1 intact.

@
