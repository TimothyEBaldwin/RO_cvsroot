head	4.6;
access;
symbols
	RISC_OSLib-5_97:4.6
	RISC_OSLib-5_96:4.6
	RISC_OSLib-5_95:4.6
	RISC_OSLib-5_94:4.6
	RISC_OSLib-5_93:4.6
	RISC_OSLib-5_92:4.6
	RISC_OSLib-5_91:4.6
	RISC_OSLib-5_90:4.6
	RISC_OSLib-5_89:4.6
	RISC_OSLib-5_88:4.6
	RISC_OSLib-5_87:4.6
	RISC_OSLib-5_86-1:4.6
	RISC_OSLib-5_86:4.6
	RISC_OSLib-5_85:4.6
	RISC_OSLib-5_84:4.6
	RISC_OSLib-5_83-2:4.6
	RISC_OSLib-5_83-1:4.6
	RISC_OSLib-5_83:4.6
	RISC_OSLib-5_82:4.6
	RISC_OSLib-5_81:4.6
	RISC_OSLib-5_75-2:4.6
	RISC_OSLib-5_80:4.6
	RISC_OSLib-5_79:4.6
	RISC_OSLib-5_78:4.6
	RISC_OSLib-5_75-1:4.6
	RISC_OSLib-5_77:4.6
	RISC_OSLib-5_76:4.6
	RISC_OSLib-5_75:4.6
	RISC_OSLib-5_74:4.6
	RISC_OSLib-5_73:4.6
	RISC_OSLib-5_72:4.6
	RISC_OSLib-5_71:4.6
	RISC_OSLib-5_70:4.6
	RISC_OSLib-5_69:4.6
	RISC_OSLib-5_68:4.6
	RISC_OSLib-5_67:4.6
	RISC_OSLib-5_66:4.6
	RISC_OSLib-5_65:4.6
	RISC_OSLib-5_64:4.6
	RISC_OSLib-5_63:4.6
	RISC_OSLib-5_62:4.6
	RISC_OSLib-5_61:4.6
	RISC_OSLib-5_60:4.6
	RISC_OSLib-5_59:4.6
	RISC_OSLib-5_58:4.6
	RISC_OSLib-5_57:4.6
	RISC_OSLib-5_56:4.6
	RISC_OSLib-5_55:4.6
	RISC_OSLib-5_54:4.6
	RISC_OSLib-5_53:4.6
	RISC_OSLib-5_52:4.6
	RISC_OSLib-5_51:4.6
	RO_5_07:4.6
	RISC_OSLib-5_50:4.6
	RISC_OSLib-5_49:4.6
	RISC_OSLib-5_46-4_64_2_1:4.6
	NoInlineAsm:4.6.0.2
	RISC_OSLib-5_48:4.6
	RISC_OSLib-5_47:4.6
	RISC_OSLib-5_46:4.6
	RISC_OSLib-5_45:4.5
	RISC_OSLib-5_44:4.4
	RISC_OSLib-5_43:4.3
	RISC_OSLib-5_42:4.3
	RISC_OSLib-5_41:4.3
	RISC_OSLib-5_40:4.2
	RISC_OSLib-5_39:4.2
	RISC_OSLib-5_38:4.2
	RISC_OSLib-5_37:4.2
	RISC_OSLib-5_36:4.1
	RISC_OSLib-5_35:4.1
	RISC_OSLib-5_34:4.1
	RISC_OSLib-5_33-4_50_2_1:4.1
	sbrodie_dev:4.1.0.6
	sbrodie_dev_bp:4.1
	RISC_OSLib-5_33:4.1
	RISC_OSLib-5_32:4.1
	RISC_OSLib-5_31:4.1
	RISC_OSLib-5_30:4.1
	RISC_OSLib-5_29:4.1
	RISC_OSLib-5_28:4.1
	RISC_OSLib-5_27:4.1
	RISC_OSLib-5_26:4.1
	RISC_OSLib-5_25:4.1
	RISC_OSLib-5_24:4.1
	RISC_OSLib-5_01-4_16_2_5:4.1
	RISC_OSLib-5_23:4.1
	RISC_OSLib-5_22:4.1
	RISC_OSLib-5_21:4.1
	RISC_OSLib-5_20:4.1
	RISC_OSLib-5_19:4.1
	RISC_OSLib-5_18:4.1
	RISC_OSLib-5_17:4.1
	RISC_OSLib-5_16:4.1
	RISC_OSLib-5_15:4.1
	dellis_autobuild_BaseSW:4.1
	RISC_OSLib-5_14:4.1
	RISC_OSLib-5_13:4.1
	RISC_OSLib-5_12:4.1
	RISC_OSLib-5_01-4_16_2_4:4.1
	RISC_OSLib-5_11:4.1
	RISC_OSLib-5_01-4_16_2_3:4.1
	RISC_OSLib-5_01-4_16_2_2:4.1
	RISC_OSLib-5_10:4.1
	RISC_OSLib-5_01-4_16_2_1:4.1
	Bethany:4.1.0.4
	RISC_OSLib-5_09:4.1
	RISC_OSLib-5_08:4.1
	RISC_OSLib-5_07:4.1
	RISC_OSLib-5_06:4.1
	RISC_OSLib-4_97-4_12_2_8:4.1
	RISC_OSLib-5_05:4.1
	RISC_OSLib-5_04:4.1
	sbrodie_sedwards_16Mar2000:4.1
	RISC_OSLib-5_03:4.1
	RISC_OSLib-5_02:4.1
	RISC_OSLib-4_97-4_12_2_7:4.1
	RISC_OSLib-5_01:4.1
	RISC_OSLib-5_00:4.1
	RISC_OSLib-4_99:4.1
	RISC_OSLib-4_98:4.1
	RISC_OSLib-4_97-4_12_2_6:4.1
	RISC_OSLib-4_97-4_12_2_5:4.1
	RISC_OSLib-4_97-4_12_2_4:4.1
	RISC_OSLib-4_97-4_12_2_3:4.1
	RISC_OSLib-4_97-4_12_2_2:4.1
	sbrodie_RISC_OSLib-4_97-4_12_2_1:4.1
	kbracey_32bit:4.1.0.2
	kbracey_32bit_bp:4.1
	dcotton_autobuild_BaseSW:4.1
	RISC_OSLib-4_97:4.1
	RISC_OSLib-4_96:4.1
	RISC_OSLib-4_95:4.1
	RISC_OSLib-4_94:4.1
	RISC_OSLib-4_93:4.1;
locks; strict;
comment	@# @;


4.6
date	2003.04.15.16.50.25;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	2003.01.17.19.13.00;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	2002.11.15.15.00.28;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2002.05.22.10.45.24;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2002.03.21.14.36.25;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	99.05.11.14.47.24;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.6
log
@* __assert2() added to support for C99 assert(), which displays
  function name.
* _Exit() added.
* Lots of new <math.h> functions (acosh, asinh, atanh, exp2, expm1,
  ilogb, log1p, log2, logb, scalbn, scalbln, cbrt, erf, erfc,
  lgamma, tgamma, nexttoward, fmaf). Float and long double forms
  of every function added; long double forms are included as another
  library object in the stubs rather than the shared library, as they
  just branch to the double form.
* Subnormal/NaN/infinity cases in various <math.h> functions improved.
* Added <tgmath.h>.
* Headers brought into line with CC 5.54.
* RMEnsures added to C library initialisation to try to load minimum
  CallASWI, FPEmulator, CLib. No errors reported if load fails.
* A few pointless inter-file dependencies removed to reduce minimum
  size of included ANSILib.

Version 5.46. Tagged as 'RISC_OSLib-5_46'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma force_top_level
#pragma include_only_once

/* inttypes.h: ISO 'C' (9899:1999) library header, section 7.8 */
/* Copyright (C) Acorn Computers Ltd. 2002 */
/* version 1.03 */

#ifndef __inttypes_h
#define __inttypes_h

#include <stdint.h>

#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS)

#define PRId8       "d"
#define PRId16      "d"
#define PRId32      "d"
#define PRIdLEAST8  "d"
#define PRIdLEAST16 "d"
#define PRIdLEAST32 "d"
#define PRIdFAST8   "d"
#define PRIdFAST16  "d"
#define PRIdFAST32  "d"
#define PRIdPTR     "d"

#define PRIi8       "i"
#define PRIi16      "i"
#define PRIi32      "i"
#define PRIiLEAST8  "i"
#define PRIiLEAST16 "i"
#define PRIiLEAST32 "i"
#define PRIiFAST8   "i"
#define PRIiFAST16  "i"
#define PRIiFAST32  "i"
#define PRIiPTR     "i"

#define PRIo8       "o"
#define PRIo16      "o"
#define PRIo32      "o"
#define PRIoLEAST8  "o"
#define PRIoLEAST16 "o"
#define PRIoLEAST32 "o"
#define PRIoFAST8   "o"
#define PRIoFAST16  "o"
#define PRIoFAST32  "o"
#define PRIoPTR     "o"

#define PRIu8       "u"
#define PRIu16      "u"
#define PRIu32      "u"
#define PRIuLEAST8  "u"
#define PRIuLEAST16 "u"
#define PRIuLEAST32 "u"
#define PRIuFAST8   "u"
#define PRIuFAST16  "u"
#define PRIuFAST32  "u"
#define PRIuPTR     "u"

#define PRIx8       "x"
#define PRIx16      "x"
#define PRIx32      "x"
#define PRIxLEAST8  "x"
#define PRIxLEAST16 "x"
#define PRIxLEAST32 "x"
#define PRIxFAST8   "x"
#define PRIxFAST16  "x"
#define PRIxFAST32  "x"
#define PRIxPTR     "x"

#define PRIX8       "X"
#define PRIX16      "X"
#define PRIX32      "X"
#define PRIXLEAST8  "X"
#define PRIXLEAST16 "X"
#define PRIXLEAST32 "X"
#define PRIXFAST8   "X"
#define PRIXFAST16  "X"
#define PRIXFAST32  "X"
#define PRIXPTR     "X"

#define SCNd8       "hhd"
#define SCNd16      "hd"
#define SCNd32      "d"
#define SCNdLEAST8  "hhd"
#define SCNdLEAST16 "hd"
#define SCNdLEAST32 "d"
#define SCNdFAST8   "d"
#define SCNdFAST16  "d"
#define SCNdFAST32  "d"
#define SCNdPTR     "d"

#define SCNi8       "hhi"
#define SCNi16      "hi"
#define SCNi32      "i"
#define SCNiLEAST8  "hhi"
#define SCNiLEAST16 "hi"
#define SCNiLEAST32 "i"
#define SCNiFAST8   "i"
#define SCNiFAST16  "i"
#define SCNiFAST32  "i"
#define SCNiPTR     "i"

#define SCNo8       "hho"
#define SCNo16      "ho"
#define SCNo32      "o"
#define SCNoLEAST8  "hho"
#define SCNoLEAST16 "ho"
#define SCNoLEAST32 "o"
#define SCNoFAST8   "o"
#define SCNoFAST16  "o"
#define SCNoFAST32  "o"
#define SCNoPTR     "o"

#define SCNu8       "hhu"
#define SCNu16      "hu"
#define SCNu32      "u"
#define SCNuLEAST8  "hhu"
#define SCNuLEAST16 "hu"
#define SCNuLEAST32 "u"
#define SCNuFAST8   "u"
#define SCNuFAST16  "u"
#define SCNuFAST32  "u"
#define SCNuPTR     "u"

#define SCNx8       "hhx"
#define SCNx16      "hx"
#define SCNx32      "x"
#define SCNxLEAST8  "hhx"
#define SCNxLEAST16 "hx"
#define SCNxLEAST32 "x"
#define SCNxFAST8   "x"
#define SCNxFAST16  "x"
#define SCNxFAST32  "x"
#define SCNxPTR     "x"

#ifdef __stdint_ll
#define PRId64      "lld"
#define PRIdLEAST64 "lld"
#define PRIdFAST64  "lld"
#define PRIdMAX     "jd"
#define PRIi64      "lli"
#define PRIiLEAST64 "lli"
#define PRIiFAST64  "lli"
#define PRIiMAX     "ji"
#define PRIo64      "llo"
#define PRIoLEAST64 "llo"
#define PRIoFAST64  "llo"
#define PRIoMAX     "jo"
#define PRIu64      "llu"
#define PRIuLEAST64 "llu"
#define PRIuFAST64  "llu"
#define PRIuMAX     "ju"
#define PRIx64      "llx"
#define PRIxLEAST64 "llx"
#define PRIxFAST64  "llx"
#define PRIxMAX     "jx"
#define PRIX64      "llX"
#define PRIXLEAST64 "llX"
#define PRIXFAST64  "llX"
#define PRIXMAX     "jX"
#define SCNd64      "lld"
#define SCNdLEAST64 "lld"
#define SCNdFAST64  "lld"
#define SCNdMAX     "jd"
#define SCNi64      "lli"
#define SCNiLEAST64 "lli"
#define SCNiFAST64  "lli"
#define SCNiMAX     "ji"
#define SCNo64      "llo"
#define SCNoLEAST64 "llo"
#define SCNoFAST64  "llo"
#define SCNoMAX     "jo"
#define SCNu64      "llu"
#define SCNuLEAST64 "llu"
#define SCNuFAST64  "llu"
#define SCNuMAX     "ju"
#define SCNx64      "llx"
#define SCNxLEAST64 "llx"
#define SCNxFAST64  "llx"
#define SCNxMAX     "jx"
#endif

#endif

#ifdef __stdint_ll
typedef struct imaxdiv_t { intmax_t quot, rem; } imaxdiv_t;
   /* type of the value returned by the imaxdiv function. */

intmax_t imaxabs(intmax_t /*j*/);
   /*
    * computes the absolute value of an integer j. If the result cannot be
    * represented, the behaviour is undefined.
    * Returns: the absolute value.
    */
imaxdiv_t imaxdiv(intmax_t /*numer*/, intmax_t /*denom*/);
   /*
    * computes numer / denom and numer % denom in a single operation.
    * Returns: a structure of type imaxdiv_t, comprising both the quotient and
    *          the remainder.
    */

intmax_t strtoimax(const char * restrict /*nptr*/,
                         char ** restrict /*endptr*/, int /*base*/);
   /*
    * equivalent to the strtoll function, except that the initial portion of the
    * string is converted to intmax_t representation.
    * Returns: the converted value if any. If no conversion could be performed,
    *          zero is returned. If the correct value is outside the range of
    *          representable values, INTMAX_MAX or INTMAX_MIN is returned
    *          (according to the sign of the value), and the value of the
    *          macro ERANGE is stored in errno.
    */
uintmax_t strtoumax(const char * restrict /*nptr*/,
                          char ** restrict /*endptr*/, int /*base*/);
   /*
    * equivalent to the strtoull function, except that the initial portion of
    * the string is converted to uintmax_t representation.
    * Returns: the converted value if any. If no conversion could be performed,
    *          zero is returned. If the correct value is outside the range of
    *          representable values, UINTMAX_MAX is returned, and the value of
    *          the macro ERANGE is stored in errno.
    */
#endif

#endif

/* end of inttypes.h */
@


4.5
log
@Added atoll, strtoll, strtoull, strtoimax, strtoumax, imaxabs and imaxdiv
functions to the standard C library.

Version 5.45. Tagged as 'RISC_OSLib-5_45'
@
text
@d203 1
a203 1
extern intmax_t imaxabs(intmax_t /*j*/);
d209 1
a209 1
extern imaxdiv_t imaxdiv(intmax_t /*numer*/, intmax_t /*denom*/);
d216 2
a217 2
extern intmax_t strtoimax(const char * restrict /*nptr*/,
                                char ** restrict /*endptr*/, int /*base*/);
d227 2
a228 2
extern uintmax_t strtoumax(const char * restrict /*nptr*/,
                                 char ** restrict /*endptr*/, int /*base*/);
@


4.4
log
@ROM build fixed for 64-bit stuff.
PCI added to swis.h
alloc.c updated to handle bigger slots (new code merged from ARM libraries)
Various 32-bit fixes for backtracing, and general trap handling.
Polite "Application is not 32-bit compatible" message.
Headers <stdint.h> and <inttypes.h> fixed to work in non-C99 mode.
txt changed to do new-style Delete behaviour

Version 5.44. Tagged as 'RISC_OSLib-5_44'
@
text
@d20 1
a20 1
/* version 1.02 */
d25 1
a25 1
#include "stdint.h"
d154 1
a154 1
#define PRIdMAX     "lld"
d158 1
a158 1
#define PRIiMAX     "lli"
d162 1
a162 1
#define PRIoMAX     "llo"
d166 1
a166 1
#define PRIuMAX     "llu"
d170 1
a170 1
#define PRIxMAX     "llx"
d174 1
a174 1
#define PRIXMAX     "llX"
d178 1
a178 1
#define SCNdMAX     "lld"
d182 1
a182 1
#define SCNiMAX     "lli"
d186 1
a186 1
#define SCNoMAX     "llo"
d190 1
a190 1
#define SCNuMAX     "llu"
d194 1
a194 1
#define SCNxMAX     "llx"
d199 1
a199 2
#if 0
/* Not actually in the C library yet */
d201 1
d204 5
d210 6
d217 10
a226 1
                          char ** restrict /*endptr*/, int /*base*/);
d228 10
a237 3
                           char ** restrict /*endptr*/, int /*base*/);

#endif /* 0 */
@


4.3
log
@* Added two new library chunks, 4 and 5, which contain extensions to the kernel
  and C library respectively. These have no static data associated with them,
  just being extensions of the stub tables. The reason for this is to minimise
  wasted space in programs that don't use the C99 facilities; o.stubs is now
  a library split into 3 pieces - basic kernel and CLib, extra kernel and extra
  CLib; only the bits a program needs get included.

* Previous extensions to the C library stubs revoked - they now stop at _swix;
  all the new C99 functions now live in chunk 4. Anyone using those new
  functions should relink with new stubs and ensure this C library version.

* printf/scanf now support 64-bit types through "ll" and "j" length modifiers.

* Run-time support for VLAs (__rt_allocauto and __rt_freeauto) added. No
  attempt is currently made to clear up on longjmp or to cope with someone
  changing the kernel allocator while a VLA is active. These would be a
  future enhancement.

* Added complete 64-bit run-time support (48 functions) to kernel library;
  these functions are compatible with the ones used by the ARM ADS. Many of
  the simpler functions will not normally be used by the compiler, as it
  will generate inline code. There is scope for improvement by switching
  in MULL and CLZ-using forms of multiply and divide when possible.

* llabs and lldiv added to C library.

* Header files corrected in a few areas, and changed to match the C compiler.
  <stdint.h> and <stdbool.h> now require the compiler to be in C99 mode
  (as detected using __STDC_VERSION__).


Version 5.41. Tagged as 'RISC_OSLib-5_41'
@
text
@d18 3
a20 3
/* inttypes.h: ISO 'C' (ISO/IEC 9899:1999) library header, section 7.8 */
/* Copyright (C) Element 14 Ltd. 1999 */
/* version 1.01 */
a31 1
#define PRId64      "lld"
a34 1
#define PRIdLEAST64 "lld"
a37 2
#define PRIdFAST64  "lld"
#define PRIdMAX     "lld"
a42 1
#define PRIi64      "lli"
a45 1
#define PRIiLEAST64 "lli"
a48 2
#define PRIiFAST64  "lli"
#define PRIiMAX     "lli"
a53 1
#define PRIo64      "llo"
a56 1
#define PRIoLEAST64 "llo"
a59 2
#define PRIoFAST64  "llo"
#define PRIoMAX     "llo"
a64 1
#define PRIu64      "llu"
a67 1
#define PRIuLEAST64 "llu"
a70 2
#define PRIuFAST64  "llu"
#define PRIuMAX     "llu"
a75 1
#define PRIx64      "llx"
a78 1
#define PRIxLEAST64 "llx"
a81 2
#define PRIxFAST64  "llx"
#define PRIxMAX     "llx"
a86 1
#define PRIX64      "llX"
a89 1
#define PRIXLEAST64 "llX"
a92 2
#define PRIXFAST64  "llX"
#define PRIXMAX     "llX"
a97 1
#define SCNd64      "lld"
d101 1
a101 2
#define SCNdLEAST64 "lld"
#define SCNdFAST8   "hhd"
a103 2
#define SCNdFAST64  "lld"
#define SCNdMAX     "lld"
a108 1
#define SCNi64      "lli"
d112 1
a112 2
#define SCNiLEAST64 "lli"
#define SCNiFAST8   "hhi"
a114 2
#define SCNiFAST64  "lli"
#define SCNiMAX     "lli"
a119 1
#define SCNo64      "llo"
d123 1
a123 2
#define SCNoLEAST64 "llo"
#define SCNoFAST8   "hho"
a125 2
#define SCNoFAST64  "llo"
#define SCNoMAX     "llo"
a130 1
#define SCNu64      "llu"
d134 1
a134 2
#define SCNuLEAST64 "llu"
#define SCNuFAST8   "hhu"
a136 2
#define SCNuFAST64  "llu"
#define SCNuMAX     "llu"
a141 1
#define SCNx64      "llx"
d145 1
a145 2
#define SCNxLEAST64 "llx"
#define SCNxFAST8   "hhx"
d148 45
d195 1
a195 1
#define SCNxPTR     "x"
a202 3
#ifdef __cplusplus
extern "C" {
#endif
a208 3
#ifdef __cplusplus
}
#endif
@


4.2
log
@Added the following C99 features:

  * snprintf(), vsnprintf(), vfscanf(), vscanf(), vsscanf()
  * hh, j, z and t printf length modifiers (indicating char, intmax_t, size_t
    and ptrdiff_t respectively)
  * Hexadecimal floating-point printing and scanning (%a/%A)
  * %F printf() specifier (upper-case form of %F)
  * Input/output of NaNs and Infinities
  * imaxdiv_t, imaxdiv(), strtoimax(), strtoumax() (simulated through macros)
  * <fenv.h>: feclearexcept(), fegetexceptflag(), feraiseexcept(),
              fesetexceptflag(), fetestexcept(), fegetround(), fesetround(),
              fegetenv(), feholdexcept(), fesetenv(), feupdateenv()
  * FLT_EVAL_METHOD, DECIMAL_DIG
  * hypot(), hypotf(), fabsf(), fdim(), fdimf(), fmax(), fmaxf(), fmin(),
    fminf()
  * INFINITY, NAN, fpclassify(), isfinite(), isinf(), isnan(), isnormal(),
    signbit(), copysign(), copysignf(), nan(), nanf(), nextafter(),
    nextafterf() isgreater(), isgreaterequal(), isless(), islessequal(),
    islessgreater(), isunordered()

This involves adding 36 new entries to the stubs. Current versions of the C
library will not fault client programs with such larger stubs, but will fill
in the extra entries with junk. Programs requiring the new functions will have
to RMEnsure this version of the Shared C Library.

This version of the C library has been fixed so that in future, any extra
unknown stubs entries will be filled in with a branch to zero, rather than
corrupted.

Requires cc 5.41 or later, both to build, and to make use of some of the extra
facilities.


Version 5.37. Tagged as 'RISC_OSLib-5_37'
@
text
@d20 1
a20 1
/* version 1.00 */
a26 7
/*
 * A set of C9X-style definitions that make sense for the current
 * (Norcroft 5) implementation. Note that we have no 64-bit types,
 * as a conforming C9X implementation must. We also don't supply
 * the four functions we're supposed to supply.
 */

d32 1
d36 1
d40 2
a41 1
#define PRIdMAX     "d"
d47 1
d51 1
d55 2
a56 1
#define PRIiMAX     "i"
d62 1
d66 1
d70 2
a71 1
#define PRIoMAX     "o"
d77 1
d81 1
d85 2
a86 1
#define PRIuMAX     "u"
d92 1
d96 1
d100 2
a101 1
#define PRIxMAX     "x"
d107 1
d111 1
d115 2
a116 1
#define PRIXMAX     "X"
d122 1
d126 1
d130 2
a131 1
#define SCNdMAX     "d"
d137 1
d141 1
d145 2
a146 1
#define SCNiMAX     "i"
d152 1
d156 1
d160 2
a161 1
#define SCNoMAX     "o"
d167 1
d171 1
d175 2
a176 1
#define SCNuMAX     "u"
d182 1
d186 1
d190 2
a191 1
#define SCNxMAX     "x"
d196 3
a198 11
/*
 * The following are fudged with macros, as we don't have real functions
 * for them.
 */

#ifndef __div_t
#  define __div_t 1
typedef struct div_t { int quot, rem; } div_t;
#endif

#define imaxdiv_t div_t
d203 6
a208 4
extern div_t div(int /*numer*/, int /*denom*/);
extern long int strtol(const char * /*nptr*/, char **/*endptr*/, int /*base*/);
extern unsigned long int strtoul(const char * /*nptr*/,
                                       char ** /*endptr*/, int /*base*/);
d213 1
a213 3
#define imaxdiv(a,b) div(a,b)
#define strtoimax(a,b,c) ((intmax_t)strtol(a,b,c))
#define strtoumax(a,b,c) ((uintmax_t)strtoul(a,b,c))
@


4.1
log
@Added <stdbool.h>, <iso646.h>, <stdint.h> and <inttypes.h>, as per the
current ISO C9X FDIS, as far as is possible given a non-C9X compiler.

Version 4.93. Tagged as 'RISC_OSLib-4_93'
@
text
@d18 1
a18 1
/* inttypes.h: ISO 'C' (WG14/N843 Aug 98) library header, section 7.8 */
d108 1
d111 1
d114 1
d120 1
d123 1
d126 1
d132 1
d135 1
d138 1
d144 1
d147 1
d150 1
d156 1
d159 1
d162 1
d169 27
@

