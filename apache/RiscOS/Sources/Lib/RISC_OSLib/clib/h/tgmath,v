head	4.3;
access;
symbols
	RISC_OSLib-5_97:4.3
	RISC_OSLib-5_96:4.3
	RISC_OSLib-5_95:4.3
	RISC_OSLib-5_94:4.3
	RISC_OSLib-5_93:4.3
	RISC_OSLib-5_92:4.3
	RISC_OSLib-5_91:4.3
	RISC_OSLib-5_90:4.3
	RISC_OSLib-5_89:4.3
	RISC_OSLib-5_88:4.3
	RISC_OSLib-5_87:4.3
	RISC_OSLib-5_86-1:4.3
	RISC_OSLib-5_86:4.3
	RISC_OSLib-5_85:4.3
	RISC_OSLib-5_84:4.3
	RISC_OSLib-5_83-2:4.3
	RISC_OSLib-5_83-1:4.3
	RISC_OSLib-5_83:4.3
	RISC_OSLib-5_82:4.3
	RISC_OSLib-5_81:4.3
	RISC_OSLib-5_75-2:4.3
	RISC_OSLib-5_80:4.3
	RISC_OSLib-5_79:4.3
	RISC_OSLib-5_78:4.3
	RISC_OSLib-5_75-1:4.3
	RISC_OSLib-5_77:4.3
	RISC_OSLib-5_76:4.3
	RISC_OSLib-5_75:4.3
	RISC_OSLib-5_74:4.3
	RISC_OSLib-5_73:4.3
	RISC_OSLib-5_72:4.3
	RISC_OSLib-5_71:4.3
	RISC_OSLib-5_70:4.3
	RISC_OSLib-5_69:4.3
	RISC_OSLib-5_68:4.3
	RISC_OSLib-5_67:4.3
	RISC_OSLib-5_66:4.3
	RISC_OSLib-5_65:4.3
	RISC_OSLib-5_64:4.3
	RISC_OSLib-5_63:4.3
	RISC_OSLib-5_62:4.3
	RISC_OSLib-5_61:4.3
	RISC_OSLib-5_60:4.3
	RISC_OSLib-5_59:4.3
	RISC_OSLib-5_58:4.3
	RISC_OSLib-5_57:4.3
	RISC_OSLib-5_56:4.3
	RISC_OSLib-5_55:4.3
	RISC_OSLib-5_54:4.3
	RISC_OSLib-5_53:4.3
	RISC_OSLib-5_52:4.3
	RISC_OSLib-5_51:4.2
	RO_5_07:4.2
	RISC_OSLib-5_50:4.2
	RISC_OSLib-5_49:4.2
	RISC_OSLib-5_46-4_64_2_1:4.1
	NoInlineAsm:4.1.0.2
	RISC_OSLib-5_48:4.1
	RISC_OSLib-5_47:4.1
	RISC_OSLib-5_46:4.1;
locks; strict;
comment	@# @;


4.3
date	2005.03.07.15.19.17;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2004.01.23.19.10.20;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	2003.04.15.16.50.25;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Added run-time and ISO C library support for C99 complex numbers.

Version 5.52. Tagged as 'RISC_OSLib-5_52'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma force_top_level
#pragma include_only_once

/* tgmath.h: ISO 'C' (9899:1999) library header, sections 7.22 and G.7 */
/* Copyright (C) Acorn Computers Ltd. 2003 */
/* version 1.02 */

/*
 * tgmath.h includes the headers <math.h> and <complex.h> and defines several
 * type-generic macros.
 *
 * Of the <math.h> and <complex.h> functions without an f or l suffix, several
 * have one or more parameters whose corresponding real type is double. For each
 * such function, except modf, there is a corresponding type-generic macro. The
 * parameters whose corresponding real type is double in the function synopsis
 * are generic parameters. Use of the macro invokes a function whose
 * corresponding real type and domain are determined by the arguments for the
 * generic parameters.
 *
 * Use of the macro invokes a function whose generic parameters have the
 * corresponding real type as follows:
 *
 *   - First, if any argument for generic parameters has type long double,
 *     the type determined is long double.
 *   - Otherwise, if any argument for generic parameters has type double or
 *     is of integer type, the type determined is double.
 *   - Otherwise, the type determined is float.
 */
#ifndef __tgmath_h
#define __tgmath_h

#include <math.h>
#include <complex.h>

/* Internal macros to simplify public macros */
#define _TG(o, ...)      (___select(0, o##f, o, o##l, __VA_ARGS__))(__VA_ARGS__)
#define _TG1(o, x,...)   (___select(0, o##f, o, o##l, x))(x,__VA_ARGS__)
#define _TG2(o, x,y,...) (___select(0, o##f, o, o##l, x,y))(x,y,__VA_ARGS__)

#define _TGx(f,d,l, ...) (___select(0, f, d, l, __VA_ARGS__))(__VA_ARGS__)

#define _TGZ(r,i,c, ...) (___select(1, r##f, r, r##l, \
                                       i##f, i, i##l, \
                                       c##f, c, c##l, __VA_ARGS__))(__VA_ARGS__)

#define _TGC(o, ...)     _TGZ(o,   c##o, c##o, __VA_ARGS__)
#define _TGI(o, ...)     _TGZ(o, __i##o, c##o, __VA_ARGS__)


/* Private inline functions to provide the special imaginary forms as
 * per G.7. This could be done using an expression inside ___select,
 * but that leads to explosive macro expansion with nested macros.
 * Inlining will occur for these as per <math.h>.
 */
#define _DEF_IFN1(fn, val, t, im) \
  static inline __caller_narrow t im __i##fn(t imaginary z) { return val(z/I); }

#define _DEF_IFN(im, fn, val) \
    _DEF_IFN1(fn,    val,    double, im) \
    _DEF_IFN1(fn##f, val##f, float, im) \
    _DEF_IFN1(fn##l, val##l, long double, im)

_DEF_IFN(imaginary, asin,  I*asinh)
_DEF_IFN(imaginary, atan,  I*atanh)
_DEF_IFN(imaginary, asinh, I*asin)
_DEF_IFN(imaginary, atanh, I*atan)
_DEF_IFN(         , cos,   cosh)
_DEF_IFN(imaginary, sin,   I*sinh)
_DEF_IFN(imaginary, tan,   I*tanh)
_DEF_IFN(         , cosh,  cos)
_DEF_IFN(imaginary, sinh,  I*sin)
_DEF_IFN(imaginary, tanh,  I*tan)
_DEF_IFN(         , abs,   fabs)

#undef _DEF_IFN
#undef _DEF_IFN1

/*
 * For each unsuffixed function in <math.h> for which there is a function in
 * <complex.h> with the same name except for a c prefix, the corresponding
 * type-generic macro (for both functions) has the same name as the function in
 * <math.h>. The corresponding type-generic macro for fabs and cabs is fabs.
 *
 * If at least one argument for a generic parameter is complex, then use of
 * the macro invokes a complex function; otherwise, if an argument is imaginary,
 * the macro expands to an expression whose type is real, imaginary or complex,
 * as appropriate for the particular function; otherwise, use of the macro
 * invokes a real function.
 */
#undef acos
#undef asin
#undef atan
#undef acosh
#undef asinh
#undef atanh
#undef cos
#undef sin
#undef tan
#undef cosh
#undef sinh
#undef tanh
#undef exp
#undef log
#undef pow
#undef sqrt
#undef fabs

#define acos(z)  _TGC(acos, z)
#define asin(z)  _TGI(asin, z)
#define atan(z)  _TGI(atan, z)
#define acosh(z) _TGC(acosh, z)
#define asinh(z) _TGI(asinh, z)
#define atanh(z) _TGI(atanh, z)
#define cos(z)   _TGI(cos, z)
#define sin(z)   _TGI(sin, z)
#define tan(z)   _TGI(tan, z)
#define cosh(z)  _TGI(cosh, z)
#define sinh(z)  _TGI(sinh, z)
#define tanh(z)  _TGI(tanh, z)
#define exp(z)   _TGC(exp, z)
#define log(z)   _TGC(log, z)
#define pow(x,y) _TGC(pow, x,y)
#define sqrt(z)  _TGC(sqrt, z)
#define fabs(z)  _TGZ(fabs,__iabs,cabs, z)

/*
 * For each unsuffixed function in <math.h> without a c-prefixed counterpart in
 * <complex.h>, the corresponding type-generic macro has the same name as the
 * function.
 *
 * If all arguments for generic parameters are real, then use of the macro
 * invokes a real function; otherwise, use of the macro results in undefined
 * behaviour.
 */
#undef atan2
#undef cbrt
#undef ceil
#undef copysign
#undef erf
#undef erfc
#undef expm1
#undef fdim
#undef floor
#undef fma
#undef fmax
#undef fmin
#undef fmod
#undef frexp
#undef hypot
#undef ilogb
#undef ldexp
#undef lgamma
#undef llrint
#undef llround
#undef log10
#undef log1p
#undef log2
#undef logb
#undef lrint
#undef lround
#undef nearbyint
#undef nextafter
#undef nexttoward
#undef remainder
#undef remquo
#undef rint
#undef round
#undef scalbn
#undef scalbln
#undef tgamma
#undef trunc

#define atan2(y,x)      _TG(atan2, y,x)
#define cbrt(x)         _TG(cbrt, x)
#define ceil(x)         _TG(ceil, x)
#define copysign(x,y)   _TG(copysign, x,y)
#define erf(x)          _TG(erf, x)
#define erfc(x)         _TG(erfc, x)
#define expm1(x)        _TG(expm1, x)
#define fdim(x,y)       _TG(fdim, x,y)
#define floor(x)        _TG(floor, x)
#define fma(x,y,z)      _TG(fma, x,y,z)
#define fmax(x,y)       _TG(fmax, x,y)
#define fmin(x,y)       _TG(fmin, x,y)
#define fmod(x,y)       _TG(fmod, x,y)
#define frexp(v,e)      _TG1(frexp, v,e)
#define hypot(x,y)      _TG(hypot, x,y)
#define ilogb(x)        _TG(ilogb, x)
#define ldexp(x,e)      _TG1(ldexp, x,e)
#define lgamma(x)       _TG(lgamma, x)
#define llrint(x)       _TG(llrint, x)
#define llround(x)      _TG(llround, x)
#define log10(x)        _TG(log10, x)
#define log1p(x)        _TG(log1p, x)
#define log2(x)         _TG(log2, x)
#define logb(x)         _TG(logb, x)
#define lrint(x)        _TG(lrint, x)
#define lround(x)       _TG(lround, x)
#define nearbyint(x)    _TG(nearbyint, x)
#define nextafter(x,y)  _TG(nextafter, x,y)
#define nexttoward(x,y) _TG1(nexttoward, x,y)
#define remainder(x,y)  _TG(remainder, x,y)
#define remquo(x,y,q)   _TG2(remquo, x,y,q)
#define rint(x)         _TG(rint, x)
#define round(x)        _TG(round, x)
#define scalbn(x,n)     _TG1(scalbn, x,n)
#define scalbln(x,n)    _TG1(scalbln, x,n)
#define tgamma(x)       _TG(tgamma, x)
#define trunc(x)        _TG(trunc, x)

/*
 * For each unsuffixed function in <complex.h> that is not a c-prefixed
 * counterpart to a function in <math.h>, the corresponding type-generic macro
 * has the same name as the function.
 *
 * Use of the macro with any real, imaginary or complex argument invokes a
 * complex function.
 */
#undef carg
#undef cimag
#undef conj
#undef cproj
#undef creal

#define carg(z)         _TG(carg, z)
#define cimag(z)        _TG(cimag, z)
#define conj(z)         _TG(conj, z)
#define cproj(z)        _TG(cproj, z)
#define creal(z)        _TG(creal, z)

/* Ensure inlining still happens, unless requested otherwise */
#ifndef __TGMATH_NO_INLINING
#undef atan
#undef fabs
#undef floor
#undef ceil
#undef trunc
#undef rint
#undef lrint
#undef remainder
#undef cimag
#undef conj
#undef creal
#define atan(z)  (___select(1, __r_atan, __d_atan, atanl, \
                               __iatanf, __iatan, __iatanl,\
                               catanf, catan, catanl, z))(z)
#define fabs(z)  (___select(1, __r_abs, __d_abs, fabsl, \
                               __iabsf, __iabs, __iabsl,\
                               cabsf, cabs, cabsl, z))(z)
#define floor(x) _TGx(__r_floor, __d_floor, floorl, x)
#define ceil(x)  _TGx(__r_ceil, __d_ceil, ceill, x)
#define trunc(x) _TGx(__r_trunc, __d_trunc, truncl, x)
#define rint(x)  _TGx(__r_rint, __d_rint, rintl, x)
#define lrint(x) _TGx(__r_lrint, __d_lrint, lrintl, x)
#define remainder(x,y) _TGx(__r_rem, __d_rem, remainderl, x,y)
#define cimag(z) ___select(0, (float _Imaginary)(z)/_Imaginary_I, \
                              (double _Imaginary)(z)/_Imaginary_I, \
                              (long double _Imaginary)(z)/_Imaginary_I, z)
#define conj(z)  ___select(0, __conj (float _Complex) (z), \
                              __conj (double _Complex) (z), \
                              __conj (long double _Complex) (z), z)
#define creal(z) ___select(0, (float)(z), \
                              (double)(z), \
                              (long double)(z), z)
#ifdef __MATH_FORCE_INLINING
#undef acos
#undef asin
#undef cos
#undef sin
#undef tan
#undef sqrt
#undef log
#undef exp
#undef log10
#define acos(z)  (___select(1, __r_acos, __d_acos, acosl, \
                               __iacosf, __iacos, __iacosl,\
                               cacosf, cacos, cacosl, z))(z)
#define asin(z)  (___select(1, __r_asin, __d_asin, asinl, \
                               __iasinf, __iasin, __iasinl,\
                               casinf, casin, casinl, z))(z)
#define cos(z)   (___select(1, __r_cos, __d_cos, cosl, \
                               __icosf, __icos, __icosl,\
                               ccosf, ccos, ccosl, z))(z)
#define sin(z)   (___select(1, __r_sin, __d_sin, sinl, \
                               __isinf, __isin, __isinl,\
                               csinf, csin, csinl, z))(z)
#define tan(z)   (___select(1, __r_tan, __d_tan, tanl, \
                               __itanf, __itan, __itanl,\
                               ctanf, ctan, ctanl, z))(z)
#define sqrt(z)  (___select(1, __r_sqrt, __d_sqrt, sqrtl, \
                               csqrtf, csqrt, csqrtl,\
                               csqrtf, csqrt, csqrtl, z))(z)
#define log(z)   (___select(1, __r_log, __d_log, logl, \
                                clogf, clog, clogl,\
                                clogf, clog, clogl, z))(z)
#define exp(z)   (___select(1, __r_exp, __d_exp, expl, \
                                cexpf, cexp, cexpl,\
                                cexpf, cexp, cexpl, z))(z)
#define log10(z)  _TGx(__r_lg10, __d_lg10, log10l, x)
#endif
#define cimag(z) ___select(0, (float _Imaginary)(z)/_Imaginary_I, \
                              (double _Imaginary)(z)/_Imaginary_I, \
                              (long double _Imaginary)(z)/_Imaginary_I, z)
#define conj(z)  ___select(0, __conj (float _Complex) (z), \
                              __conj (double _Complex) (z), \
                              __conj (long double _Complex) (z), z)
#define creal(z) ___select(0, (float)(z), \
                              (double)(z), \
                              (long double)(z), z)
#endif

#endif

/* end of tgmath.h */
@


4.2
log
@<ctype.h> * isblank() added.
          * isprint() now true for non-breaking spaces
<math.h>  * FP_INFINITY corrected to FP_INFINITE
          * fma(), fmal(), llrint(), llrintf(), llrintl(),
            llround(), llroundf(), llroundl(),
            remquo(), remquof(), remquol() added.
          * added inlining for remainder() and fmaf() and various
            float functions.
          * math_errhandling removed pending overhaul - it was misleading.
          * expm1() and log1p() now provide decent (< 1 ulp) accuracy,
            rather than only being marginally better than exp(x)-1 and
            log(1+x).
          * new version of copysign() with standard calling conventions.
          * some C99 functions changed to use infinity/NaNs and exceptions
            for error handling - see comments in header file about the
            changes in progress.
<stdio.h>  * output from %a now correctly rounded
<stdlib.h> * strtof() and strtold() added.
<string.h> * strerror() no longer clears _kernel_last_oserror().

Version 5.49. Tagged as 'RISC_OSLib-5_49'
@
text
@d20 1
a20 1
/* version 1.01 */
d23 19
a41 2
 * tgmath.h includes the headers <math.h> and <complex.h> and defines
 * several type-generic macros.
d47 1
d56 6
a61 1
#define _TGC(o, ...)     _TG(o, __VA_ARGS__)
a62 1
#define _TGI(o,i, z)     _TG(o, z)
d64 40
a103 1
/* Type-generic macros for functions with both real and complex forms */
d123 2
a124 2
#define asin(z)  _TGI(asin, I*asinh, z)
#define atan(z)  _TGI(atan, I*atanh, z)
d126 8
a133 8
#define asinh(z) _TGI(asinh, I*asin, z)
#define atanh(z) _TGI(atanh, I*atan, z)
#define cos(z)   _TGI(cos, cosh, z)
#define sin(z)   _TGI(sin, I*sinh, z)
#define tan(z)   _TGI(tan, I*tanh, z)
#define cosh(z)  _TGI(cosh, cos, z)
#define sinh(z)  _TGI(sinh, I*sin, z)
#define tanh(z)  _TGI(tanh, I*tan, z)
d138 1
a138 1
#define fabs(z)  _TG(fabs, z)
d140 9
a148 1
/* Type-generic macros for real-only functions */
d225 20
d255 9
a263 3
#undef fma
#define atan(x)  _TGx(__r_atan, __d_atan, atanl, x)
#define fabs(x)  ___select(0, __abs (x), __abs (double) (x), __abs (x), x)
d270 54
a323 1
#define fma(x,y,z) _TGx(__r_fma, fma, fmal, x,y,z)
@


4.1
log
@* __assert2() added to support for C99 assert(), which displays
  function name.
* _Exit() added.
* Lots of new <math.h> functions (acosh, asinh, atanh, exp2, expm1,
  ilogb, log1p, log2, logb, scalbn, scalbln, cbrt, erf, erfc,
  lgamma, tgamma, nexttoward, fmaf). Float and long double forms
  of every function added; long double forms are included as another
  library object in the stubs rather than the shared library, as they
  just branch to the double form.
* Subnormal/NaN/infinity cases in various <math.h> functions improved.
* Added <tgmath.h>.
* Headers brought into line with CC 5.54.
* RMEnsures added to C library initialisation to try to load minimum
  CallASWI, FPEmulator, CLib. No errors reported if load fails.
* A few pointless inter-file dependencies removed to reduce minimum
  size of included ANSILib.

Version 5.46. Tagged as 'RISC_OSLib-5_46'
@
text
@d18 3
a20 3
/* tgmath.h: ISO 'C' (9899:1999) library header, section 7.22 */
/* Copyright (C) Acorn Computers Ltd. 2002 */
/* version 1.00 */
d31 1
d38 4
d61 17
a77 17
#define acos(x)  _TG(acos, x)
#define asin(x)  _TG(asin, x)
#define atan(x)  _TG(atan, x)
#define acosh(x) _TG(acosh, x)
#define asinh(x) _TG(asinh, x)
#define atanh(x) _TG(atanh, x)
#define cos(x)   _TG(cos, x)
#define sin(x)   _TG(sin, x)
#define tan(x)   _TG(tan, x)
#define cosh(x)  _TG(cosh, x)
#define sinh(x)  _TG(sinh, x)
#define tanh(x)  _TG(tanh, x)
#define exp(x)   _TG(exp, x)
#define log(x)   _TG(log, x)
#define pow(x)   _TG(pow, x)
#define sqrt(x)  _TG(sqrt, x)
#define fabs(x)  _TG(fabs, x)
a158 2
#undef cos
#undef sin
d165 2
d168 1
a168 3
#define cos(x)   _TGx(__r_cos, __d_cos, cosl, x)
#define sin(x)   _TGx(__r_sin, __d_sin, sinl, x)
#define fabs(x)  (___select(0, __abs (x), __abs (double) (x), __abs (x), x))
d174 2
@

