head	4.5;
access;
symbols
	RISC_OSLib-5_97:4.5
	RISC_OSLib-5_96:4.5
	RISC_OSLib-5_95:4.5
	RISC_OSLib-5_94:4.5
	RISC_OSLib-5_93:4.5
	RISC_OSLib-5_92:4.5
	RISC_OSLib-5_91:4.5
	RISC_OSLib-5_90:4.5
	RISC_OSLib-5_89:4.5
	RISC_OSLib-5_88:4.5
	RISC_OSLib-5_87:4.5
	RISC_OSLib-5_86-1:4.5
	RISC_OSLib-5_86:4.5
	RISC_OSLib-5_85:4.5
	RISC_OSLib-5_84:4.5
	RISC_OSLib-5_83-2:4.5
	RISC_OSLib-5_83-1:4.5
	RISC_OSLib-5_83:4.5
	RISC_OSLib-5_82:4.5
	RISC_OSLib-5_81:4.5
	RISC_OSLib-5_75-2:4.5
	RISC_OSLib-5_80:4.5
	RISC_OSLib-5_79:4.5
	RISC_OSLib-5_78:4.5
	RISC_OSLib-5_75-1:4.5
	RISC_OSLib-5_77:4.5
	RISC_OSLib-5_76:4.5
	RISC_OSLib-5_75:4.5
	RISC_OSLib-5_74:4.5
	RISC_OSLib-5_73:4.5
	RISC_OSLib-5_72:4.5
	RISC_OSLib-5_71:4.5
	RISC_OSLib-5_70:4.5
	RISC_OSLib-5_69:4.5
	RISC_OSLib-5_68:4.5
	RISC_OSLib-5_67:4.5
	RISC_OSLib-5_66:4.5
	RISC_OSLib-5_65:4.5
	RISC_OSLib-5_64:4.5
	RISC_OSLib-5_63:4.5
	RISC_OSLib-5_62:4.5
	RISC_OSLib-5_61:4.5
	RISC_OSLib-5_60:4.5
	RISC_OSLib-5_59:4.5
	RISC_OSLib-5_58:4.5
	RISC_OSLib-5_57:4.5
	RISC_OSLib-5_56:4.5
	RISC_OSLib-5_55:4.5
	RISC_OSLib-5_54:4.5
	RISC_OSLib-5_53:4.5
	RISC_OSLib-5_52:4.5
	RISC_OSLib-5_51:4.5
	RO_5_07:4.5
	RISC_OSLib-5_50:4.5
	RISC_OSLib-5_49:4.5
	RISC_OSLib-5_46-4_64_2_1:4.4
	NoInlineAsm:4.4.0.2
	RISC_OSLib-5_48:4.4
	RISC_OSLib-5_47:4.4
	RISC_OSLib-5_46:4.4
	RISC_OSLib-5_45:4.4
	RISC_OSLib-5_44:4.4
	RISC_OSLib-5_43:4.3
	RISC_OSLib-5_42:4.3
	RISC_OSLib-5_41:4.3
	RISC_OSLib-5_40:4.2
	RISC_OSLib-5_39:4.2
	RISC_OSLib-5_38:4.2
	RISC_OSLib-5_37:4.2
	RISC_OSLib-5_36:4.2
	RISC_OSLib-5_35:4.2
	RISC_OSLib-5_34:4.2
	RISC_OSLib-5_33-4_50_2_1:4.2
	sbrodie_dev:4.2.0.6
	sbrodie_dev_bp:4.2
	RISC_OSLib-5_33:4.2
	RISC_OSLib-5_32:4.2
	RISC_OSLib-5_31:4.2
	RISC_OSLib-5_30:4.2
	RISC_OSLib-5_29:4.2
	RISC_OSLib-5_28:4.2
	RISC_OSLib-5_27:4.2
	RISC_OSLib-5_26:4.2
	RISC_OSLib-5_25:4.2
	RISC_OSLib-5_24:4.2
	RISC_OSLib-5_01-4_16_2_5:4.2
	RISC_OSLib-5_23:4.2
	RISC_OSLib-5_22:4.2
	RISC_OSLib-5_21:4.2
	RISC_OSLib-5_20:4.2
	RISC_OSLib-5_19:4.2
	RISC_OSLib-5_18:4.2
	RISC_OSLib-5_17:4.2
	RISC_OSLib-5_16:4.2
	RISC_OSLib-5_15:4.2
	dellis_autobuild_BaseSW:4.2
	RISC_OSLib-5_14:4.2
	RISC_OSLib-5_13:4.2
	RISC_OSLib-5_12:4.2
	RISC_OSLib-5_01-4_16_2_4:4.2
	RISC_OSLib-5_11:4.2
	RISC_OSLib-5_01-4_16_2_3:4.2
	RISC_OSLib-5_01-4_16_2_2:4.2
	RISC_OSLib-5_10:4.2
	RISC_OSLib-5_01-4_16_2_1:4.2
	Bethany:4.2.0.4
	RISC_OSLib-5_09:4.2
	RISC_OSLib-5_08:4.2
	RISC_OSLib-5_07:4.2
	RISC_OSLib-5_06:4.2
	RISC_OSLib-4_97-4_12_2_8:4.2
	RISC_OSLib-5_05:4.2
	RISC_OSLib-5_04:4.2
	sbrodie_sedwards_16Mar2000:4.2
	RISC_OSLib-5_03:4.2
	RISC_OSLib-5_02:4.2
	RISC_OSLib-4_97-4_12_2_7:4.2
	RISC_OSLib-5_01:4.2
	RISC_OSLib-5_00:4.2
	RISC_OSLib-4_99:4.2
	RISC_OSLib-4_98:4.2
	RISC_OSLib-4_97-4_12_2_6:4.2
	RISC_OSLib-4_97-4_12_2_5:4.2
	RISC_OSLib-4_97-4_12_2_4:4.2
	RISC_OSLib-4_97-4_12_2_3:4.2
	RISC_OSLib-4_97-4_12_2_2:4.2
	sbrodie_RISC_OSLib-4_97-4_12_2_1:4.2
	kbracey_32bit:4.2.0.2
	kbracey_32bit_bp:4.2
	dcotton_autobuild_BaseSW:4.2
	RISC_OSLib-4_97:4.2
	RISC_OSLib-4_96:4.2
	RISC_OSLib-4_95:4.2
	RISC_OSLib-4_94:4.2
	RISC_OSLib-4_93:4.1;
locks; strict;
comment	@# @;


4.5
date	2004.01.23.19.10.20;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	2002.11.15.15.00.28;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2002.05.22.10.45.24;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	99.05.12.09.56.50;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	99.05.11.14.47.26;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.5
log
@<ctype.h> * isblank() added.
          * isprint() now true for non-breaking spaces
<math.h>  * FP_INFINITY corrected to FP_INFINITE
          * fma(), fmal(), llrint(), llrintf(), llrintl(),
            llround(), llroundf(), llroundl(),
            remquo(), remquof(), remquol() added.
          * added inlining for remainder() and fmaf() and various
            float functions.
          * math_errhandling removed pending overhaul - it was misleading.
          * expm1() and log1p() now provide decent (< 1 ulp) accuracy,
            rather than only being marginally better than exp(x)-1 and
            log(1+x).
          * new version of copysign() with standard calling conventions.
          * some C99 functions changed to use infinity/NaNs and exceptions
            for error handling - see comments in header file about the
            changes in progress.
<stdio.h>  * output from %a now correctly rounded
<stdlib.h> * strtof() and strtold() added.
<string.h> * strerror() no longer clears _kernel_last_oserror().

Version 5.49. Tagged as 'RISC_OSLib-5_49'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma force_top_level
#pragma include_only_once

/* stdint.h: ISO 'C' (9899:1999) library header, section 7.18 */
/* Copyright (C) Acorn Computers Ltd. 2002 */
/* version 1.04 */

#ifndef __stdint_h
#define __stdint_h

#if __STDC_VERSION__ >= 199901
#  define __stdint_ll
#endif

/* Types with exactly the specified width */
typedef signed   char      int8_t;
typedef unsigned char      uint8_t;
typedef signed   short     int16_t;
typedef unsigned short     uint16_t;
typedef signed   int       int32_t;
typedef unsigned int       uint32_t;

/* The smallest types with at least the specified width */
typedef signed   char      int_least8_t;
typedef unsigned char      uint_least8_t;
typedef signed   short     int_least16_t;
typedef unsigned short     uint_least16_t;
typedef signed   int       int_least32_t;
typedef unsigned int       uint_least32_t;

/* The "fastest" types with at least the specified width */
typedef signed   int       int_fast8_t;
typedef unsigned int       uint_fast8_t;
typedef signed   int       int_fast16_t;
typedef unsigned int       uint_fast16_t;
typedef signed   int       int_fast32_t;
typedef unsigned int       uint_fast32_t;

/* Integer types capable of holding a "void *" pointer */
typedef signed   int       intptr_t;
typedef unsigned int       uintptr_t;

#ifdef __stdint_ll
typedef signed   long long int64_t;
typedef unsigned long long uint64_t;
typedef signed   long long int_least64_t;
typedef unsigned long long uint_least64_t;
typedef signed   long long int_fast64_t;
typedef unsigned long long uint_fast64_t;

/* Integer types that can hold any value of any type */
typedef signed   long long intmax_t;
typedef unsigned long long uintmax_t;
#endif

#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)

#define INT8_MIN         (-0x80)
#define INT8_MAX         0x7F
#define UINT8_MAX        0xFF
#define INT16_MIN        (-0x8000)
#define INT16_MAX        0x7FFF
#define UINT16_MAX       0xFFFF
#define INT32_MIN        (~0x7FFFFFFF)
#define INT32_MAX        0x7FFFFFFF
#define UINT32_MAX       0xFFFFFFFF

#define INT_LEAST8_MIN   (-0x80)
#define INT_LEAST8_MAX   0x7F
#define UINT_LEAST8_MAX  0xFF
#define INT_LEAST16_MIN  (-0x8000)
#define INT_LEAST16_MAX  0x7FFF
#define UINT_LEAST16_MAX 0xFFFF
#define INT_LEAST32_MIN  (~0x7FFFFFFF)
#define INT_LEAST32_MAX  0x7FFFFFFF
#define UINT_LEAST32_MAX 0xFFFFFFFF

#define INT_FAST8_MIN    (~0x7FFFFFFF)
#define INT_FAST8_MAX    0x7FFFFFFF
#define UINT_FAST8_MAX   0xFFFFFFFF
#define INT_FAST16_MIN   (~0x7FFFFFFF)
#define INT_FAST16_MAX   0x7FFFFFFF
#define UINT_FAST16_MAX  0xFFFFFFFF
#define INT_FAST32_MIN   (~0x7FFFFFFF)
#define INT_FAST32_MAX   0x7FFFFFFF
#define UINT_FAST32_MAX  0xFFFFFFFF

#define INTPTR_MIN       (~0x7FFFFFFF)
#define INTPTR_MAX       0x7FFFFFFF
#define UINTPTR_MAX      0xFFFFFFFF

#ifdef __stdint_ll
#define INT64_MIN        (~0x7FFFFFFFFFFFFFFF)
#define INT64_MAX        0x7FFFFFFFFFFFFFFF
#define UINT64_MAX       0xFFFFFFFFFFFFFFFF
#define INT_LEAST64_MIN  (~0x7FFFFFFFFFFFFFFF)
#define INT_LEAST64_MAX  0x7FFFFFFFFFFFFFFF
#define UINT_LEAST64_MAX 0xFFFFFFFFFFFFFFFF
#define INT_FAST64_MIN   (~0x7FFFFFFFFFFFFFFF)
#define INT_FAST64_MAX   0x7FFFFFFFFFFFFFFF
#define UINT_FAST64_MAX  0xFFFFFFFFFFFFFFFF

#define INTMAX_MIN       (~0x7FFFFFFFFFFFFFFF)
#define INTMAX_MAX       0x7FFFFFFFFFFFFFFF
#define UINTMAX_MAX      0xFFFFFFFFFFFFFFFF
#endif

#define PTRDIFF_MIN      (~0x7FFFFFFF)
#define PTRDIFF_MAX      0x7FFFFFFF

#define SIG_ATOMIC_MIN   (~0x7FFFFFFF)
#define SIG_ATOMIC_MAX   0x7FFFFFFF

#define SIZE_MAX         0xFFFFFFFF

#define WCHAR_MIN        (~0x7FFFFFFF)
#define WCHAR_MAX        0x7FFFFFFF

#endif

#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)

#define INT8_C(n)    n
#define UINT8_C(n)   n##u
#define INT16_C(n)   n
#define UINT16_C(n)  n##u
#define INT32_C(n)   n
#define UINT32_C(n)  n##u
#ifdef __stdint_ll
#define INT64_C(n)   n##ll
#define UINT64_C(n)  n##ull

#define INTMAX_C(n)  n##ll
#define UINTMAX_C(n) n##ull
#endif

#endif

#endif

/* end of stdint.h */
@


4.4
log
@ROM build fixed for 64-bit stuff.
PCI added to swis.h
alloc.c updated to handle bigger slots (new code merged from ARM libraries)
Various 32-bit fixes for backtracing, and general trap handling.
Polite "Application is not 32-bit compatible" message.
Headers <stdint.h> and <inttypes.h> fixed to work in non-C99 mode.
txt changed to do new-style Delete behaviour

Version 5.44. Tagged as 'RISC_OSLib-5_44'
@
text
@d20 1
a20 1
/* version 1.03 */
d25 2
a26 4
#ifdef __STDC_VERSION__
#  if __STDC_VERSION__ >= 199901
#    define __stdint_ll
#  endif
d72 6
a77 6
#define INT8_MIN         (-128)
#define INT8_MAX         127
#define UINT8_MAX        255
#define INT16_MIN        (-32768)
#define INT16_MAX        32767
#define UINT16_MAX       65535
d79 2
a80 2
#define INT32_MAX        2147483647
#define UINT32_MAX       4294967295u
d82 6
a87 6
#define INT_LEAST8_MIN   (-128)
#define INT_LEAST8_MAX   127
#define UINT_LEAST8_MAX  255
#define INT_LEAST16_MIN  (-32768)
#define INT_LEAST16_MAX  32767
#define UINT_LEAST16_MAX 65535
d89 2
a90 2
#define INT_LEAST32_MAX  2147483647
#define UINT_LEAST32_MAX 4294967295u
d93 2
a94 2
#define INT_FAST8_MAX    2147483647
#define UINT_FAST8_MAX   4294967295u
d96 2
a97 2
#define INT_FAST16_MAX   2147483647
#define UINT_FAST16_MAX  4294967295u
d99 2
a100 2
#define INT_FAST32_MAX   2147483647
#define UINT_FAST32_MAX  4294967295u
d103 2
a104 2
#define INTPTR_MAX       2147483647
#define UINTPTR_MAX      4294967295u
d108 2
a109 2
#define INT64_MAX        9223372036854775807
#define UINT64_MAX       18446744073709551615u
d111 2
a112 2
#define INT_LEAST64_MAX  9223372036854775807
#define UINT_LEAST64_MAX 18446744073709551615u
d114 2
a115 2
#define INT_FAST64_MAX   9223372036854775807
#define UINT_FAST64_MAX  18446744073709551615u
d118 2
a119 2
#define INTMAX_MAX       9223372036854775807
#define UINTMAX_MAX      18446744073709551615u
d123 1
a123 1
#define PTRDIFF_MAX      2147483647
d126 1
a126 1
#define SIG_ATOMIC_MAX   2147483647
d128 1
a128 1
#define SIZE_MAX         4294967295u
d131 1
a131 1
#define WCHAR_MAX        2147483647
@


4.3
log
@* Added two new library chunks, 4 and 5, which contain extensions to the kernel
  and C library respectively. These have no static data associated with them,
  just being extensions of the stub tables. The reason for this is to minimise
  wasted space in programs that don't use the C99 facilities; o.stubs is now
  a library split into 3 pieces - basic kernel and CLib, extra kernel and extra
  CLib; only the bits a program needs get included.

* Previous extensions to the C library stubs revoked - they now stop at _swix;
  all the new C99 functions now live in chunk 4. Anyone using those new
  functions should relink with new stubs and ensure this C library version.

* printf/scanf now support 64-bit types through "ll" and "j" length modifiers.

* Run-time support for VLAs (__rt_allocauto and __rt_freeauto) added. No
  attempt is currently made to clear up on longjmp or to cope with someone
  changing the kernel allocator while a VLA is active. These would be a
  future enhancement.

* Added complete 64-bit run-time support (48 functions) to kernel library;
  these functions are compatible with the ones used by the ARM ADS. Many of
  the simpler functions will not normally be used by the compiler, as it
  will generate inline code. There is scope for improvement by switching
  in MULL and CLZ-using forms of multiply and divide when possible.

* llabs and lldiv added to C library.

* Header files corrected in a few areas, and changed to match the C compiler.
  <stdint.h> and <stdbool.h> now require the compiler to be in C99 mode
  (as detected using __STDC_VERSION__).


Version 5.41. Tagged as 'RISC_OSLib-5_41'
@
text
@d20 1
a20 1
/* version 1.02 */
d25 4
a28 2
#if __STDC_VERSION__ < 199901
#  error <stdint.h> can only be used in C99
d33 1
d35 1
a36 3
typedef signed   long long int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
a37 1
typedef unsigned long long uint64_t;
d41 1
d43 1
a44 3
typedef signed   long long int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
a45 1
typedef unsigned long long uint_least64_t;
d48 4
a51 2
typedef signed   char      int_fast8_t;
typedef signed   int       int_fast16_t;        /* actually 32 bits */
a52 3
typedef signed   long long int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;       /* actually 32 bits */
a53 1
typedef unsigned long long uint_fast64_t;
d59 8
d70 1
d75 2
d78 2
a80 3
#define INT64_MIN        (~0x7FFFFFFFFFFFFFFF)
#define INT8_MAX         127
#define INT16_MAX        32767
a81 3
#define INT64_MAX        9223372036854775807
#define UINT8_MAX        255
#define UINT16_MAX       65535
a82 1
#define UINT64_MAX       18446744073709551615u
d85 2
d88 2
a90 3
#define INT_LEAST64_MIN  (~0x7FFFFFFFFFFFFFFF)
#define INT_LEAST8_MAX   127
#define INT_LEAST16_MAX  32767
a91 3
#define INT_LEAST64_MAX  9223372036854775807
#define UINT_LEAST8_MAX  255
#define UINT_LEAST16_MAX 65535
a92 1
#define UINT_LEAST64_MAX 18446744073709551615u
d94 3
a96 1
#define INT_FAST8_MIN    (-128)
d98 2
a100 3
#define INT_FAST64_MIN   (~0x7FFFFFFFFFFFFFFF)
#define INT_FAST8_MAX    127
#define INT_FAST16_MAX   2147483647
a101 3
#define INT_FAST64_MAX   9223372036854775807
#define UINT_FAST8_MAX   255u
#define UINT_FAST16_MAX  4294967295u
a102 1
#define UINT_FAST64_MAX  18446744073709551615u
d108 11
d122 1
d140 1
d142 1
d144 2
a146 3
#define UINT8_C(n)   n##u
#define UINT16_C(n)  n##u
#define UINT32_C(n)  n##u
d151 1
@


4.2
log
@  Fixed up Makefile to export new header files.
  Added protection for cfront inclusion of stdint.h to ensure
    inclusion is faulted.
Admin:
  Tested.
  Sources which are compiled -fussy will require Norcroft cc version
    5.11 or later in order to avoid the warning about the use of an
    undefined macro in an #if pre-processor statement and to avoid
    the non-ANSI include warning.

Version 4.94. Tagged as 'RISC_OSLib-4_94'
@
text
@d18 3
a20 3
/* stdint.h: ISO 'C' (WG14/N843 Aug 98) library header, section 7.18 */
/* Copyright (C) Element 14 Ltd. 1999 */
/* version 1.00 */
d25 2
a26 13
/*
 * A set of C9X-style definitions that make sense for the current
 * (Norcroft 5) implementation. Note that we have no 64-bit types,
 * as a conforming C9X implementation must.
 */

/*
 * cfront cannot cope with the signed type declarations
 */
#ifdef __cplusplus
#  if __cplusplus < 199711
#    error stdint.h cannot be used with this C++ compiler
#  endif
d30 8
a37 6
typedef signed   char  int8_t;
typedef signed   short int16_t;
typedef signed   int   int32_t;
typedef unsigned char  uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int   uint32_t;
d40 8
a47 6
typedef signed   char  int_least8_t;
typedef signed   short int_least16_t;
typedef signed   int   int_least32_t;
typedef unsigned char  uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int   uint_least32_t;
d50 8
a57 6
typedef signed   char  int_fast8_t;
typedef signed   int   int_fast16_t;     /* actually 32 bits */
typedef signed   int   int_fast32_t;
typedef unsigned char  uint_fast8_t;
typedef unsigned int   uint_fast16_t;    /* actually 32 bits */
typedef unsigned int   uint_fast32_t;
d60 2
a61 2
typedef signed   int   intptr_t;
typedef unsigned int   uintptr_t;
d64 2
a65 2
typedef signed   int   intmax_t;
typedef unsigned int   uintmax_t;
d72 1
d76 3
a78 2
#define UINT8_MAX        255u
#define UINT16_MAX       65535u
d80 1
d85 1
d89 3
a91 2
#define UINT_LEAST8_MAX  255u
#define UINT_LEAST16_MAX 65535u
d93 1
d98 1
d102 1
d106 1
d112 3
a114 3
#define INTMAX_MIN       (~0x7FFFFFFF)
#define INTMAX_MAX       2147483647
#define UINTMAX_MAX      4294967295u
d119 3
d134 1
d138 1
d140 2
a141 2
#define INTMAX_C(n)  n
#define UINTMAX_C(n) n##u
@


4.1
log
@Added <stdbool.h>, <iso646.h>, <stdint.h> and <inttypes.h>, as per the
current ISO C9X FDIS, as far as is possible given a non-C9X compiler.

Version 4.93. Tagged as 'RISC_OSLib-4_93'
@
text
@d31 9
@
