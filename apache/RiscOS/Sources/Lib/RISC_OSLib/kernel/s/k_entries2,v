head	4.2;
access;
symbols
	RISC_OSLib-5_97:4.2
	RISC_OSLib-5_96:4.2
	RISC_OSLib-5_95:4.2
	RISC_OSLib-5_94:4.2
	RISC_OSLib-5_93:4.2
	RISC_OSLib-5_92:4.2
	RISC_OSLib-5_91:4.2
	RISC_OSLib-5_90:4.1
	RISC_OSLib-5_89:4.1
	RISC_OSLib-5_88:4.1
	RISC_OSLib-5_87:4.1
	RISC_OSLib-5_86-1:4.1
	RISC_OSLib-5_86:4.1
	RISC_OSLib-5_85:4.1
	RISC_OSLib-5_84:4.1
	RISC_OSLib-5_83-2:4.1
	RISC_OSLib-5_83-1:4.1
	RISC_OSLib-5_83:4.1
	RISC_OSLib-5_82:4.1
	RISC_OSLib-5_81:4.1
	RISC_OSLib-5_75-2:4.1
	RISC_OSLib-5_80:4.1
	RISC_OSLib-5_79:4.1
	RISC_OSLib-5_78:4.1
	RISC_OSLib-5_75-1:4.1
	RISC_OSLib-5_77:4.1
	RISC_OSLib-5_76:4.1
	RISC_OSLib-5_75:4.1
	RISC_OSLib-5_74:4.1
	RISC_OSLib-5_73:4.1
	RISC_OSLib-5_72:4.1
	RISC_OSLib-5_71:4.1
	RISC_OSLib-5_70:4.1
	RISC_OSLib-5_69:4.1
	RISC_OSLib-5_68:4.1
	RISC_OSLib-5_67:4.1
	RISC_OSLib-5_66:4.1
	RISC_OSLib-5_65:4.1
	RISC_OSLib-5_64:4.1
	RISC_OSLib-5_63:4.1
	RISC_OSLib-5_62:4.1
	RISC_OSLib-5_61:4.1
	RISC_OSLib-5_60:4.1
	RISC_OSLib-5_59:4.1
	RISC_OSLib-5_58:4.1
	RISC_OSLib-5_57:4.1
	RISC_OSLib-5_56:4.1
	RISC_OSLib-5_55:4.1
	RISC_OSLib-5_54:4.1
	RISC_OSLib-5_53:4.1
	RISC_OSLib-5_52:4.1
	RISC_OSLib-5_51:4.1
	RO_5_07:4.1
	RISC_OSLib-5_50:4.1
	RISC_OSLib-5_49:4.1
	RISC_OSLib-5_46-4_64_2_1:4.1
	NoInlineAsm:4.1.0.2
	RISC_OSLib-5_48:4.1
	RISC_OSLib-5_47:4.1
	RISC_OSLib-5_46:4.1
	RISC_OSLib-5_45:4.1
	RISC_OSLib-5_44:4.1
	RISC_OSLib-5_43:4.1
	RISC_OSLib-5_42:4.1
	RISC_OSLib-5_41:4.1;
locks; strict;
comment	@# @;


4.2
date	2016.05.24.22.50.25;	author jlee;	state Exp;
branches;
next	4.1;
commitid	RYaH5CsBb1WpUM7z;

4.1
date	2002.05.22.10.45.27;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.2
log
@When multiple CPU architectures are supported, allow dynamically linked clients to be given optimal versions of routines where possible
Detail:
  This set of changes adds support for representing architecture-specific variants of routines within the export tables which the shared C library uses to fill in the client's stubs.
  This allows builds of the module which target multiple architectures (e.g. IOMD, Raspberry Pi, or softloads) to offer the most optimal versions of routines to clients wherever multiple variants exist.
  If only one architecture is supported, only one version of each routine will be built, and no variant tables will be generated.
  Currently routine selection for staticly linked clients isn't supported - staticly linked targets will only use the most backwards-compatible version of the routines, as before. Also not all routines are catered for yet (e.g. _ll_udiv)
  File changes:
  - s/h_common - New file containing macros used during variant table construction
  - Makefile - Set SHARED_C_LIBRARY to {TRUE} for SCL builds of assembler code, as per the SHARED_C_LIBRARY #define
  - kernel/s/k_body, s/longlong - For routines which have multiple variants available for the target architectures, build all variants, and generate variant table entries using the new RoutineVariant macro. This has required some reordering of the different variants to make sure that when both versions are built, the most backwards-compatible one will be first (and thus will be called by staticly linked clients)
  - s/h_modmacro - "Entry" macro (when building SCL export tables) changed to use DCD instead of B, to allow byte-aligned symbols to be represented (low bits of symbol address is now used as 'is a variant table' flag)
  - s/initmodule - Client stub initialisation rewritten to take into account the B -> DCD change, and to detect and evaluate variant entries
  - clib/s/cl_entries, kernel/s/k_entries, kernel/s/k_entries2 - Update library entry tables to reference the variant forms of routines where relevant
Admin:
  Tested on Raspberry Pi 1, 2, 3 (ROM), RISC OS 3.1 & StrongARM 3.7 (softload 26bit build)
  Requires Kernel-5_35-4_79_2_325


Version 5.91. Tagged as 'RISC_OSLib-5_91'
@
text
@; Copyright 2002 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;-*- Mode: Assembler -*-
; Last modified 20 May 02 16:30:31 by KJB
;
; Copyright (C) Acorn Computers Ltd., 2002.
;
; Add new entries ONLY AT THE END of the list

        Entry   __rt_allocauto, , , unveneered
        Entry   __rt_freeauto, , , unveneered

        Entry   _ll_from_u, imported, , unveneered
        Entry   _ll_from_l, imported, , unveneered
        Entry   _ll_to_l, imported, , unveneered

        Entry   _ll_add, imported, , unveneered
        Entry   _ll_addlu, imported, , unveneered
        Entry   _ll_addls, imported, , unveneered
        Entry   _ll_adduu, imported, , unveneered
        Entry   _ll_addss, imported, , unveneered
        Entry   _ll_sub, imported, , unveneered
        Entry   _ll_sublu, imported, , unveneered
        Entry   _ll_subls, imported, , unveneered
        Entry   _ll_subuu, imported, , unveneered
        Entry   _ll_subss, imported, , unveneered
        Entry   _ll_rsb, imported, , unveneered
        Entry   _ll_rsblu, imported, , unveneered
        Entry   _ll_rsbls, imported, , unveneered
        Entry   _ll_rsbuu, imported, , unveneered
        Entry   _ll_rsbss, imported, , unveneered
        Entry   _ll_mul, imported, |_ll_mul$variant|, unveneered
        Entry   _ll_mullu, imported, |_ll_mullu$variant|, unveneered
        Entry   _ll_mulls, imported, , unveneered
        Entry   _ll_muluu, imported, |_ll_muluu$variant|, unveneered
        Entry   _ll_mulss, imported, |_ll_mulss$variant|, unveneered
        Entry   _ll_udiv, imported, , unveneered
        Entry   _ll_urdv, imported, , unveneered
        Entry   _ll_udiv10, imported, |_ll_udiv10$variant|, unveneered
        Entry   _ll_sdiv, imported, , unveneered
        Entry   _ll_srdv, imported, , unveneered
        Entry   _ll_sdiv10, imported, , unveneered

        Entry   _ll_not, imported, , unveneered
        Entry   _ll_neg, imported, , unveneered
        Entry   _ll_and, imported, , unveneered
        Entry   _ll_or, imported, , unveneered
        Entry   _ll_eor, imported, , unveneered
        Entry   _ll_shift_l, imported, , unveneered
        Entry   _ll_ushift_r, imported, , unveneered
        Entry   _ll_sshift_r, imported, , unveneered

        Entry   _ll_cmpu, imported, , unveneered
        Entry   _ll_cmpge, imported, , unveneered
        Entry   _ll_cmple, imported, , unveneered

        Entry   _ll_uto_d, imported, , unveneered
        Entry   _ll_sto_d, imported, , unveneered
        Entry   _ll_uto_f, imported, , unveneered
        Entry   _ll_sto_f, imported, , unveneered
        Entry   _ll_ufrom_d, imported, , unveneered
        Entry   _ll_sfrom_d, imported, , unveneered
        Entry   _ll_ufrom_f, imported, , unveneered
        Entry   _ll_sfrom_f, imported, , unveneered

        END
@


4.1
log
@* Added two new library chunks, 4 and 5, which contain extensions to the kernel
  and C library respectively. These have no static data associated with them,
  just being extensions of the stub tables. The reason for this is to minimise
  wasted space in programs that don't use the C99 facilities; o.stubs is now
  a library split into 3 pieces - basic kernel and CLib, extra kernel and extra
  CLib; only the bits a program needs get included.

* Previous extensions to the C library stubs revoked - they now stop at _swix;
  all the new C99 functions now live in chunk 4. Anyone using those new
  functions should relink with new stubs and ensure this C library version.

* printf/scanf now support 64-bit types through "ll" and "j" length modifiers.

* Run-time support for VLAs (__rt_allocauto and __rt_freeauto) added. No
  attempt is currently made to clear up on longjmp or to cope with someone
  changing the kernel allocator while a VLA is active. These would be a
  future enhancement.

* Added complete 64-bit run-time support (48 functions) to kernel library;
  these functions are compatible with the ones used by the ARM ADS. Many of
  the simpler functions will not normally be used by the compiler, as it
  will generate inline code. There is scope for improvement by switching
  in MULL and CLZ-using forms of multiply and divide when possible.

* llabs and lldiv added to C library.

* Header files corrected in a few areas, and changed to match the C compiler.
  <stdint.h> and <stdbool.h> now require the compiler to be in C99 mode
  (as detected using __STDC_VERSION__).


Version 5.41. Tagged as 'RISC_OSLib-5_41'
@
text
@d44 2
a45 2
        Entry   _ll_mul, imported, , unveneered
        Entry   _ll_mullu, imported, , unveneered
d47 2
a48 2
        Entry   _ll_muluu, imported, , unveneered
        Entry   _ll_mulss, imported, , unveneered
d51 1
a51 1
        Entry   _ll_udiv10, imported, , unveneered
@

