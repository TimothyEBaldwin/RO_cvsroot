head	4.5;
access;
symbols
	RISC_OSLib-5_97:4.5
	RISC_OSLib-5_96:4.5
	RISC_OSLib-5_95:4.5
	RISC_OSLib-5_94:4.5
	RISC_OSLib-5_93:4.5
	RISC_OSLib-5_92:4.5
	RISC_OSLib-5_91:4.5
	RISC_OSLib-5_90:4.5
	RISC_OSLib-5_89:4.5
	RISC_OSLib-5_88:4.5
	RISC_OSLib-5_87:4.5
	RISC_OSLib-5_86-1:4.5
	RISC_OSLib-5_86:4.5
	RISC_OSLib-5_85:4.5
	RISC_OSLib-5_84:4.5
	RISC_OSLib-5_83-2:4.5
	RISC_OSLib-5_83-1:4.5
	RISC_OSLib-5_83:4.5
	RISC_OSLib-5_82:4.5
	RISC_OSLib-5_81:4.5
	RISC_OSLib-5_75-2:4.5
	RISC_OSLib-5_80:4.5
	RISC_OSLib-5_79:4.5
	RISC_OSLib-5_78:4.5
	RISC_OSLib-5_75-1:4.5
	RISC_OSLib-5_77:4.5
	RISC_OSLib-5_76:4.5
	RISC_OSLib-5_75:4.5
	RISC_OSLib-5_74:4.5
	RISC_OSLib-5_73:4.5
	RISC_OSLib-5_72:4.5
	RISC_OSLib-5_71:4.5
	RISC_OSLib-5_70:4.5
	RISC_OSLib-5_69:4.5
	RISC_OSLib-5_68:4.5
	RISC_OSLib-5_67:4.5
	RISC_OSLib-5_66:4.5
	RISC_OSLib-5_65:4.5
	RISC_OSLib-5_64:4.5
	RISC_OSLib-5_63:4.4
	RISC_OSLib-5_62:4.4
	RISC_OSLib-5_61:4.4
	RISC_OSLib-5_60:4.4
	RISC_OSLib-5_59:4.4
	RISC_OSLib-5_58:4.4
	RISC_OSLib-5_57:4.4
	RISC_OSLib-5_56:4.4
	RISC_OSLib-5_55:4.4
	RISC_OSLib-5_54:4.4
	RISC_OSLib-5_53:4.4
	RISC_OSLib-5_52:4.4
	RISC_OSLib-5_51:4.4
	RO_5_07:4.4
	RISC_OSLib-5_50:4.4
	RISC_OSLib-5_49:4.4
	RISC_OSLib-5_46-4_64_2_1:4.4
	NoInlineAsm:4.4.0.2
	RISC_OSLib-5_48:4.4
	RISC_OSLib-5_47:4.4
	RISC_OSLib-5_46:4.4
	RISC_OSLib-5_45:4.4
	RISC_OSLib-5_44:4.4
	RISC_OSLib-5_43:4.4
	RISC_OSLib-5_42:4.4
	RISC_OSLib-5_41:4.4
	RISC_OSLib-5_40:4.3
	RISC_OSLib-5_39:4.3
	RISC_OSLib-5_38:4.3
	RISC_OSLib-5_37:4.3
	RISC_OSLib-5_36:4.3
	RISC_OSLib-5_35:4.3
	RISC_OSLib-5_34:4.2
	RISC_OSLib-5_33-4_50_2_1:4.2
	sbrodie_dev:4.2.0.2
	sbrodie_dev_bp:4.2
	RISC_OSLib-5_33:4.2
	RISC_OSLib-5_32:4.2
	RISC_OSLib-5_31:4.2
	RISC_OSLib-5_30:4.2
	RISC_OSLib-5_29:4.2
	RISC_OSLib-5_28:4.2
	RISC_OSLib-5_27:4.2
	RISC_OSLib-5_26:4.2
	RISC_OSLib-5_25:4.2
	RISC_OSLib-5_24:4.2
	RISC_OSLib-5_01-4_16_2_5:4.1
	RISC_OSLib-5_23:4.2
	RISC_OSLib-5_22:4.2
	RISC_OSLib-5_21:4.2
	RISC_OSLib-5_20:4.2
	RISC_OSLib-5_19:4.2
	RISC_OSLib-5_18:4.2
	RISC_OSLib-5_17:4.2
	RISC_OSLib-5_16:4.2
	RISC_OSLib-5_15:4.2
	dellis_autobuild_BaseSW:4.2
	RISC_OSLib-5_14:4.2
	RISC_OSLib-5_13:4.2
	RISC_OSLib-5_12:4.2
	RISC_OSLib-5_01-4_16_2_4:4.1
	RISC_OSLib-5_11:4.2
	RISC_OSLib-5_01-4_16_2_3:4.1
	RISC_OSLib-5_01-4_16_2_2:4.1
	RISC_OSLib-5_10:4.2
	RISC_OSLib-5_01-4_16_2_1:4.1
	Bethany:4.1.0.12
	RISC_OSLib-5_09:4.2
	RISC_OSLib-5_08:4.2
	RISC_OSLib-5_07:4.2
	RISC_OSLib-5_06:4.2
	RISC_OSLib-4_97-4_12_2_8:4.1.10.1
	RISC_OSLib-5_05:4.1
	RISC_OSLib-5_04:4.1
	sbrodie_sedwards_16Mar2000:4.1
	RISC_OSLib-5_03:4.1
	RISC_OSLib-5_02:4.1
	RISC_OSLib-4_97-4_12_2_7:4.1.10.1
	RISC_OSLib-5_01:4.1
	RISC_OSLib-5_00:4.1
	RISC_OSLib-4_99:4.1
	RISC_OSLib-4_98:4.1
	RISC_OSLib-4_97-4_12_2_6:4.1.10.1
	RISC_OSLib-4_97-4_12_2_5:4.1
	RISC_OSLib-4_97-4_12_2_4:4.1
	RISC_OSLib-4_97-4_12_2_3:4.1
	RISC_OSLib-4_97-4_12_2_2:4.1
	sbrodie_RISC_OSLib-4_97-4_12_2_1:4.1
	kbracey_32bit:4.1.0.10
	kbracey_32bit_bp:4.1
	dcotton_autobuild_BaseSW:4.2
	RISC_OSLib-4_97:4.1
	RISC_OSLib-4_96:4.1
	RISC_OSLib-4_95:4.1
	RISC_OSLib-4_94:4.1
	RISC_OSLib-4_93:4.1
	RISC_OSLib-4_92:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	sforrest_daytona_appflash-0_31:4.1
	RISC_OSLib-4_91:4.1
	RISC_OSLib-4_90:4.1
	RISC_OSLib-4_89:4.1
	Ursula_merge:4.1
	RISC_OSLib-4_88:4.1
	RISC_OSLib-4_87:4.1
	blaughto_daytona_appflash-0_30:4.1
	rmanby_clib-4_86:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2011.10.28.14.23.18;	author bavison;	state Exp;
branches;
next	4.4;
commitid	hIG6j26y6NoxM7Fv;

4.4
date	2002.05.22.10.45.24;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2002.01.29.16.03.34;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.09.14.09.21;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.24.49;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.10.1;
next	;

4.1.1.1
date	96.11.05.09.24.49;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.51.52;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.27.14;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.47.35;	author nturton;	state Exp;
branches;
next	;

4.1.10.1
date	99.11.23.13.42.44;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.5
log
@  File handling improvements
Detail:
  * Added 64-bit file pointer API support, following the LFS spec v1.5
    (see Docs directory). Internally, now uses 64-bit file pointers
    exclusively. For now, the backend still limits you to 4GB-1 files, but
    clients of the C library won't need recompiling again to support larger
    files than this once they use the new API.
  * Fixed a large number of warnings produced in compilation, assembly and
    linking, many of them new and resulting from the improved checks in the
    latest toolchain.
  * Increased the maximum stream buffer size from 16MB to 1GB.
  * Added Hdr:SDFS and Hdr:SDIO to the list of headers used to build swis.h
    if they are present.
Admin:
  Verified that the new 64-bit file pointer buffering code works using a
  ROM build (since the toolchain makes extensive use of reading, writing
  and seeking internally).

Version 5.64. Tagged as 'RISC_OSLib-5_64'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* signal.c: ANSI draft (X3J11 Oct 86) library code, section 4.7 */
/* Copyright (C) Codemist Ltd, 1988                              */
/* version 0.01d */

/* N.B. machine dependent messages (only) below. */

#include "hostsys.h"
#include <signal.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>                             /* for exit()            */
#include <errno.h>
#include "kernel.h"

extern int _fprintf_lf(FILE *fp, const char *fmt, ...);
extern int _sprintf_lf(char *buff, const char *fmt, ...);

extern int _SignalNumber(int errnum);
extern _kernel_oserror *_kernel_peek_last_oserror(void);

#define SIGLAST 11  /* one after highest signal number (see <signal.h>) */

static void (*_signalvector[SIGLAST+1])(int);

/* HIDDEN EXPORTS - for compatibility with previous shared C libraries */
extern void __ignore_signal_handler(int sig);
extern void __error_signal_marker(int sig);
extern void __default_signal_handler(int sig);

extern void __ignore_signal_handler(int sig)
{
    /* do this in case called because of SharedCLibrary botch... */
    signal(sig, SIG_IGN);
}

static void _real_default_signal_handler(int sig)
{
    char *s = NULL, v[128];
    _kernel_oserror *e = _kernel_peek_last_oserror();

    if (((sig == SIGSEGV || sig == SIGILL) && _SignalNumber(e->errnum) == sig) ||
        sig == SIGFPE || sig == SIGOSERROR)
    {
        _postmortem(e->errmess, *((int *)"mesg"));
        return;
    }

    switch (sig)
    {
case SIGABRT:
#ifdef DEFAULT_TEXT
        s = "Abnormal termination (e.g. abort() function)";
#endif
        s = _kernel_getmessage(s, "C39");
        break;
case SIGILL:
#ifdef DEFAULT_TEXT
#ifdef __arm
        s = "Illegal instruction (call to non-function/code corrupted) [is the floating point emulator loaded?]";
#else
        s = "Illegal instruction (call to non-function/code corrupted)";
#endif
#endif
        s = _kernel_getmessage(s, "C40");
        break;
case SIGINT:
#ifdef DEFAULT_TEXT
        s = "Interrupt received from user - program terminated";
#endif
        _sys_msg(_kernel_getmessage(s, "C41"));
        exit(EXIT_FAILURE);
        break;
case SIGSEGV:
#ifdef DEFAULT_TEXT
        s = "Illegal address (e.g. wildly outside array bounds)";
#endif
        s = _kernel_getmessage(s, "C42");
        break;
case SIGTERM:
#ifdef DEFAULT_TEXT
        s = "Termination request received";
#endif
        s = _kernel_getmessage(s, "C43");
        break;
default:
#ifdef DEFAULT_TEXT
        s = "Unknown signal number %d";
#endif
        s = _kernel_getmessage(s, "C44");
        break;
    }
    _sprintf_lf(v, s, sig);
    _postmortem(v, *((int *)"mesg"));
}

#pragma -s1

#if 0
/* Stack overflow is either a normal exception in which case it should just
 * exit with an error return or a fatal system error in which case it shoul
 * generate an external error. I choose the latter. ECN
 */
static void _default_sigstak_handler()
{
    char *s = "Stack overflow\n\r";
    while (*s!=0) _kernel_oswrch(*s++);
    _kernel_setreturncode(100);
    _kernel_exit(100);
}
#else
extern void _default_sigstak_handler(void);
#endif

extern void __default_signal_handler(int sig)
{
    if (_kernel_processor_mode() & 0xF)
        _kernel_exit((int)(_kernel_last_oserror()));
    else if (sig==SIGSTAK)
      _default_sigstak_handler();
    else
      _real_default_signal_handler(sig);
}

extern void __error_signal_marker(int sig)
/* This function should NEVER be called - its value is used as a marker     */
/* return from signal (SIG_ERR).   If someone manages to use pass this      */
/* value back to signal and thence get it invoked we make it behave as      */
/* if signal got SIG_DFL:                                                   */
{
    __default_signal_handler(sig);
}

int raise(int sig)
{
    void (*handler)(int);
    if (sig<=0 || sig>=SIGLAST) return (errno = ESIGNUM);
    handler = _signalvector[sig];
    /* Mustn't call default_signal_handler via _kernel_call_client unless */
    /* it really is on the other side of the compatibility veneer.        */
    if (handler==__SIG_DFL)
        (*__default_signal_handler)(sig);
    else if (handler!=__SIG_IGN)
    {   _signalvector[sig] = __SIG_DFL;
        /* And this will fail for old clients setting SIG_IGN across */
        /* the compatibility veneer... Oh yuk yuk yuk...             */
        _call_client_1(handler, sig);
    }
    return 0;
}

int _signal_real_handler(int sig)
{
    if (sig<=0 || sig>=SIGLAST) return 0;
    return (_signalvector[sig]!=__SIG_DFL);
}

#pragma -s0

void (*signal(int sig, void (*func)(int)))(int)
{
    void (*oldf)(int);
    if (sig<=0 || sig>=SIGLAST) return __SIG_ERR;
    oldf = _signalvector[sig];
    _signalvector[sig] = func;
    return oldf;
}

void _signal_init(void)
{
    int i;
    /* do the following initialisation explicitly so code restartable */
    for (i=1; i<SIGLAST; i++) signal(i, __SIG_DFL);
}

/* end of signal.c */
@


4.4
log
@* Added two new library chunks, 4 and 5, which contain extensions to the kernel
  and C library respectively. These have no static data associated with them,
  just being extensions of the stub tables. The reason for this is to minimise
  wasted space in programs that don't use the C99 facilities; o.stubs is now
  a library split into 3 pieces - basic kernel and CLib, extra kernel and extra
  CLib; only the bits a program needs get included.

* Previous extensions to the C library stubs revoked - they now stop at _swix;
  all the new C99 functions now live in chunk 4. Anyone using those new
  functions should relink with new stubs and ensure this C library version.

* printf/scanf now support 64-bit types through "ll" and "j" length modifiers.

* Run-time support for VLAs (__rt_allocauto and __rt_freeauto) added. No
  attempt is currently made to clear up on longjmp or to cope with someone
  changing the kernel allocator while a VLA is active. These would be a
  future enhancement.

* Added complete 64-bit run-time support (48 functions) to kernel library;
  these functions are compatible with the ones used by the ARM ADS. Many of
  the simpler functions will not normally be used by the compiler, as it
  will generate inline code. There is scope for improvement by switching
  in MULL and CLZ-using forms of multiply and divide when possible.

* llabs and lldiv added to C library.

* Header files corrected in a few areas, and changed to match the C compiler.
  <stdint.h> and <stdbool.h> now require the compiler to be in C99 mode
  (as detected using __STDC_VERSION__).


Version 5.41. Tagged as 'RISC_OSLib-5_41'
@
text
@d52 1
a52 1
    char *s, v[128];
d182 1
a182 1
void _signal_init()
@


4.3
log
@Abort and error handling massively overhauled:
  Aborts now give standard error messages (Abort on Data Transfer at... etc)
  *ShowRegs now filled in after aborts
  assert(), abort(), "free failed" and standard signal handlers now use Wimp
    error boxes if in the desktop
  Postmortem button on error boxes to view the postmortem

Also, x$multiply, x$divide, __rt_sdiv, x$remainder, x$udivide, __rt_udiv and
x$uremainder optimised.

Version 5.35. Tagged as 'RISC_OSLib-5_35'
@
text
@d125 1
a125 1
extern void _default_sigstak_handler();
@


4.2
log
@32-bit work merged from kbracey_32bit branch.

Version 5.06. Tagged as 'RISC_OSLib-5_06'
@
text
@d32 3
d53 8
a68 4
        break;
case SIGFPE:
case SIGOSERROR:
        s = &(_kernel_last_oserror()->errmess[0]);
@


4.1
log
@Initial revision
@
text
@d123 1
a123 1
    if (_kernel_processor_mode() != 0)
@


4.1.10.1
log
@More 32-bit compatibility added.  All the C code should now be OK.
Fixed some typos in kernel.s.k_body too.

Version 4.97, 4.12.2.6. Tagged as 'RISC_OSLib-4_97-4_12_2_6'
@
text
@d123 1
a123 1
    if (_kernel_processor_mode() & 0xF)
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
