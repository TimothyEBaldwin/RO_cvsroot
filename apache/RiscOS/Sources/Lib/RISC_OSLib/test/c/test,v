head	1.2;
access;
symbols
	RISC_OSLib-5_97:1.2
	RISC_OSLib-5_96:1.2
	RISC_OSLib-5_95:1.2
	RISC_OSLib-5_94:1.2
	RISC_OSLib-5_93:1.2
	RISC_OSLib-5_92:1.2
	RISC_OSLib-5_91:1.2
	RISC_OSLib-5_90:1.2
	RISC_OSLib-5_89:1.2
	RISC_OSLib-5_88:1.2
	RISC_OSLib-5_87:1.2
	RISC_OSLib-5_86-1:1.2
	RISC_OSLib-5_86:1.2
	RISC_OSLib-5_85:1.2
	RISC_OSLib-5_84:1.2
	RISC_OSLib-5_83-2:1.2
	RISC_OSLib-5_83-1:1.2
	RISC_OSLib-5_83:1.2
	RISC_OSLib-5_82:1.2
	RISC_OSLib-5_81:1.2
	RISC_OSLib-5_75-2:1.2
	RISC_OSLib-5_80:1.2
	RISC_OSLib-5_79:1.2
	RISC_OSLib-5_78:1.2
	RISC_OSLib-5_75-1:1.2
	RISC_OSLib-5_77:1.2
	RISC_OSLib-5_76:1.2
	RISC_OSLib-5_75:1.2
	RISC_OSLib-5_74:1.2
	RISC_OSLib-5_73:1.2
	RISC_OSLib-5_72:1.2
	RISC_OSLib-5_71:1.2
	RISC_OSLib-5_70:1.2
	RISC_OSLib-5_69:1.2
	RISC_OSLib-5_68:1.2
	RISC_OSLib-5_67:1.2
	RISC_OSLib-5_66:1.2
	RISC_OSLib-5_65:1.2
	RISC_OSLib-5_64:1.2
	RISC_OSLib-5_63:1.2
	RISC_OSLib-5_62:1.2
	RISC_OSLib-5_61:1.2
	RISC_OSLib-5_60:1.2
	RISC_OSLib-5_59:1.2
	RISC_OSLib-5_58:1.2
	RISC_OSLib-5_57:1.2
	RISC_OSLib-5_56:1.2
	RISC_OSLib-5_55:1.2
	RISC_OSLib-5_54:1.2
	RISC_OSLib-5_53:1.2
	RISC_OSLib-5_52:1.2
	RISC_OSLib-5_51:1.2
	RO_5_07:1.2
	RISC_OSLib-5_50:1.2
	RISC_OSLib-5_49:1.2
	RISC_OSLib-5_46-4_64_2_1:1.2
	NoInlineAsm:1.2.0.4
	RISC_OSLib-5_48:1.2
	RISC_OSLib-5_47:1.2
	RISC_OSLib-5_46:1.2
	RISC_OSLib-5_45:1.2
	RISC_OSLib-5_44:1.2
	RISC_OSLib-5_43:1.2
	RISC_OSLib-5_42:1.2
	RISC_OSLib-5_41:1.2
	RISC_OSLib-5_40:1.2
	RISC_OSLib-5_39:1.2
	RISC_OSLib-5_38:1.2
	RISC_OSLib-5_37:1.2
	RISC_OSLib-5_36:1.2
	RISC_OSLib-5_35:1.2
	RISC_OSLib-5_34:1.2
	RISC_OSLib-5_33-4_50_2_1:1.2
	sbrodie_dev:1.2.0.2
	sbrodie_dev_bp:1.2
	RISC_OSLib-5_33:1.2
	RISC_OSLib-5_32:1.2
	RISC_OSLib-5_31:1.2
	RISC_OSLib-5_30:1.2
	RISC_OSLib-5_29:1.2
	RISC_OSLib-5_28:1.2
	RISC_OSLib-5_27:1.2
	RISC_OSLib-5_26:1.2
	RISC_OSLib-5_25:1.2
	RISC_OSLib-5_24:1.2
	RISC_OSLib-5_23:1.2
	RISC_OSLib-5_22:1.2
	RISC_OSLib-5_21:1.2
	RISC_OSLib-5_20:1.2
	RISC_OSLib-5_19:1.2
	RISC_OSLib-5_18:1.2
	RISC_OSLib-5_17:1.2
	RISC_OSLib-5_16:1.2
	RISC_OSLib-5_15:1.2
	dellis_autobuild_BaseSW:1.2
	RISC_OSLib-5_14:1.2
	RISC_OSLib-5_13:1.2
	RISC_OSLib-5_12:1.2
	RISC_OSLib-5_11:1.2
	RISC_OSLib-5_10:1.2
	RISC_OSLib-5_09:1.2
	RISC_OSLib-5_08:1.2
	RISC_OSLib-5_07:1.2
	dcotton_autobuild_BaseSW:1.2
	RISC_OSLib-5_06:1.2
	RISC_OSLib-4_97-4_12_2_8:1.1.2.1
	kbracey_32bit:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2000.05.09.14.09.44;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.09.13.58.58;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.05.09.13.58.58;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@32-bit work merged from kbracey_32bit branch.

Version 5.06. Tagged as 'RISC_OSLib-5_06'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <kernel.h>

#define double float

extern void init_unwind(_kernel_unwindblock *);
extern double get_extfp(const _extended_fp_number *);

void dump_uwb(_kernel_unwindblock *uwb)
{
    printf("v1=%08X, v2=%08X, v3=%08X, v4=%08X, v5=%08X, v6=%08X\n",
            uwb->r4, uwb->r5, uwb->r6, uwb->r7, uwb->r8, uwb->r9);
    printf("sl=%08X, fp=%08X, sp=%08X, pc=%08X\n",
            uwb->sl, uwb->fp, uwb->sp, uwb->pc);
    printf("f4=%f, f5=%f, f6=%f, f7=%f\n\n",
            get_extfp(&uwb->f4),
            get_extfp(&uwb->f5),
            get_extfp(&uwb->f6),
            get_extfp(&uwb->f7));
}

void harry(double b)
{
    static double x;
    static int dumped, t;

    _kernel_unwindblock uwb = { 0 };
    char *lang;
    x = b;
    if (dumped) return;
    init_unwind(&uwb);
    while ((t=_kernel_unwind(&uwb, &lang)) > 0)
    {
        printf("_kernel_unwind() returned %d (%s)\n", t, lang);
        dump_uwb(&uwb);
        continue;
    }
    printf("_kernel_unwind() returned %d\n", t);
    dumped = 1;
}

void jim(double a)
{
    harry(a*2);
    harry(a);
}

void fred(double a, double b, double c, int d, double e)
{
    jim(a*b*c*d*e);
    jim(a+b+c+d+e);
}

int main()
{
    fred(1,2,3,4,5);
    return 0;
}
@


1.1
log
@file test was initially added on branch kbracey_32bit.
@
text
@d1 72
@


1.1.2.1
log
@Features:

* APCS-32 support complete.
* APCS-A compatibility removed.
* Old ArthurLib code removed.
* _clib_version() now reports version from VersionNum.
* time() no longer does a run-time host check - I think we know we're not a BBC
  Master ARM second processor now.
* rename() now uses OS_FSControl 25 instead of *rename.
* getenv() can handle arbitrary length variables.
* Can now handle exceptions in 32-bit form of FPEmulator (on either 26 or 32
  bit systems).
* tmpnam() switches to SVC mode to access its zero page counter.
* Faster divide routines.

Admin:

  This will build all sorts of different things depending on the flags. See
  the Docs directory for details.

  As far as ROM builds are concerned, if using APCS-R, no changes are needed.
  If using APCS-32, the Shared C Library must be built as APCS-R to ensure
  compatibility with old binaries. To achieve this, pass in the option
  SCL_APCS="-APCS 3/26bit" in the Components file.

Version 4.97, 4.12.2.8. Tagged as 'RISC_OSLib-4_97-4_12_2_8'
@
text
@a0 72
/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <kernel.h>

#define double float

extern void init_unwind(_kernel_unwindblock *);
extern double get_extfp(const _extended_fp_number *);

void dump_uwb(_kernel_unwindblock *uwb)
{
    printf("v1=%08X, v2=%08X, v3=%08X, v4=%08X, v5=%08X, v6=%08X\n",
            uwb->r4, uwb->r5, uwb->r6, uwb->r7, uwb->r8, uwb->r9);
    printf("sl=%08X, fp=%08X, sp=%08X, pc=%08X\n",
            uwb->sl, uwb->fp, uwb->sp, uwb->pc);
    printf("f4=%f, f5=%f, f6=%f, f7=%f\n\n",
            get_extfp(&uwb->f4),
            get_extfp(&uwb->f5),
            get_extfp(&uwb->f6),
            get_extfp(&uwb->f7));
}

void harry(double b)
{
    static double x;
    static int dumped, t;

    _kernel_unwindblock uwb = { 0 };
    char *lang;
    x = b;
    if (dumped) return;
    init_unwind(&uwb);
    while ((t=_kernel_unwind(&uwb, &lang)) > 0)
    {
        printf("_kernel_unwind() returned %d (%s)\n", t, lang);
        dump_uwb(&uwb);
        continue;
    }
    printf("_kernel_unwind() returned %d\n", t);
    dumped = 1;
}

void jim(double a)
{
    harry(a*2);
    harry(a);
}

void fred(double a, double b, double c, int d, double e)
{
    jim(a*b*c*d*e);
    jim(a+b+c+d+e);
}

int main()
{
    fred(1,2,3,4,5);
    return 0;
}
@

