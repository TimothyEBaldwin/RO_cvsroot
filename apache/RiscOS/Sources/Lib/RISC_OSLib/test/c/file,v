head	1.2;
access;
symbols
	RISC_OSLib-5_97:1.2
	RISC_OSLib-5_96:1.2
	RISC_OSLib-5_95:1.2
	RISC_OSLib-5_94:1.2
	RISC_OSLib-5_93:1.2
	RISC_OSLib-5_92:1.2
	RISC_OSLib-5_91:1.2
	RISC_OSLib-5_90:1.2
	RISC_OSLib-5_89:1.2
	RISC_OSLib-5_88:1.2
	RISC_OSLib-5_87:1.2
	RISC_OSLib-5_86-1:1.2
	RISC_OSLib-5_86:1.2
	RISC_OSLib-5_85:1.2
	RISC_OSLib-5_84:1.2
	RISC_OSLib-5_83-2:1.2
	RISC_OSLib-5_83-1:1.2
	RISC_OSLib-5_83:1.2
	RISC_OSLib-5_82:1.2
	RISC_OSLib-5_81:1.2
	RISC_OSLib-5_75-2:1.2
	RISC_OSLib-5_80:1.2
	RISC_OSLib-5_79:1.2
	RISC_OSLib-5_78:1.2
	RISC_OSLib-5_75-1:1.2
	RISC_OSLib-5_77:1.2
	RISC_OSLib-5_76:1.2
	RISC_OSLib-5_75:1.2
	RISC_OSLib-5_74:1.2
	RISC_OSLib-5_73:1.2
	RISC_OSLib-5_72:1.2
	RISC_OSLib-5_71:1.2
	RISC_OSLib-5_70:1.2
	RISC_OSLib-5_69:1.2
	RISC_OSLib-5_68:1.2
	RISC_OSLib-5_67:1.1
	RISC_OSLib-5_66:1.1
	RISC_OSLib-5_65:1.1
	RISC_OSLib-5_64:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.05.28.18.04.08;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	psVvzYlFFIpQ9w6w;

1.1
date	2011.10.28.14.23.50;	author bavison;	state Exp;
branches;
next	;
commitid	hIG6j26y6NoxM7Fv;


desc
@@


1.2
log
@Add locale support for selecting timezones from C
armsys.c
  Ammended time() to match ISO9899 and just return UTC like it says.
  Inlined the single use of _bbctime() macro.
locale.c
  The timezone within a territory can now be specified as part of the setlocale() function.
  This uses a qualifier to the already accepted territory name, for an example see test/tzones.c
  Shock addition of some comments to the locale parsing function.
  To avoid needing to mess about with C library workspace the timezone and territory are encoded internally into 1 word, with 10 bits allowing up to 1024 territories worldwide.
  Ripple through to strftime().
time.c
  localtime() updated to respect locale selection.
test/file,gen_inputs,test64
  Copyright headers added.

Output compared with Windows XP using setlocale versus tzset to shift the program into Pacific time.

Version 5.68. Tagged as 'RISC_OSLib-5_68'
@
text
@/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Test harness for large file extensions
 * Intended for use in debug builds where the file size check in fopen_common()
 * has been disabled, and where OFF32_MAX has been reduced to 31
 */

#define _LARGEFILE_SOURCE
#define _FILE_OFFSET_BITS 64

#include <stdio.h>
#include <errno.h>
#include "swis.h"

#define BUFSIZE 16

int main(void)
{
  FILE *f;
  char buffer[BUFSIZE];
  int i;
  char string[80];
  
  /* Writing beyond file pointer limit */
  
  errno = 0;
  f = fopen("myfile", "w");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    
    for (i = 0; i < 34; i++)
    {
      errno = 0;
      int e = fputc(i, f);
      sprintf(string, "fputc %d=%d errno = %d\n\r", i, e, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
  
  /* Writing beyond file pointer limit, where the limit lies on a
   * buffer boundary */
  
  errno = 0;
  f = fopen("myfile", "w");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    errno = 0;
    fseeko(f, 15, SEEK_SET);
    sprintf(string, "fseeko errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
    
    for (i = 15; i < 34; i++)
    {
      errno = 0;
      int e = fputc(i, f);
      sprintf(string, "fputc %d=%d errno = %d\n\r", i, e, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
  
  /* Reading beyond file pointer limit */
  
  errno = 0;
  f = fopen("myfile2", "r");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    
    for (i = 0; i < 35; i++)
    {
      errno = 0;
      int c = fgetc(f);
      sprintf(string, "fgetc %d=%d errno = %d\n\r", i, c, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
  
  /* Reading beyond file pointer limit, when data has been written
   * up to a buffer boundary */
  
  errno = 0;
  f = fopen("myfile2", "r+");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    
    for (i = 0; i < 16; i++)
    {
      errno = 0;
      int e = fputc(i, f);
      sprintf(string, "fputc %d=%d errno = %d\n\r", i, e, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    errno = 0;
    fseeko(f, 0, SEEK_CUR);
    sprintf(string, "fseeko errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
    for (; i < 35; i++)
    {
      errno = 0;
      int c = fgetc(f);
      sprintf(string, "fgetc %d=%d errno = %d\n\r", i, c, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
  
  /* Reading beyond file pointer limit, when data has been written
   * up to NOT a buffer boundary */
  
  errno = 0;
  f = fopen("myfile2", "r+");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    
    for (i = 0; i < /*13*/19; i++)
    {
      errno = 0;
      int e = fputc(i, f);
      sprintf(string, "fputc %d=%d errno = %d\n\r", i, e, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    errno = 0;
    fseeko(f, 0, SEEK_CUR);
    sprintf(string, "fseeko errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
    for (; i < 35; i++)
    {
      errno = 0;
      int c = fgetc(f);
      sprintf(string, "fgetc %d=%d errno = %d\n\r", i, c, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
}
@


1.1
log
@  File handling improvements
Detail:
  * Added 64-bit file pointer API support, following the LFS spec v1.5
    (see Docs directory). Internally, now uses 64-bit file pointers
    exclusively. For now, the backend still limits you to 4GB-1 files, but
    clients of the C library won't need recompiling again to support larger
    files than this once they use the new API.
  * Fixed a large number of warnings produced in compilation, assembly and
    linking, many of them new and resulting from the improved checks in the
    latest toolchain.
  * Increased the maximum stream buffer size from 16MB to 1GB.
  * Added Hdr:SDFS and Hdr:SDIO to the list of headers used to build swis.h
    if they are present.
Admin:
  Verified that the new 64-bit file pointer buffering code works using a
  ROM build (since the toolchain makes extensive use of reading, writing
  and seeking internally).

Version 5.64. Tagged as 'RISC_OSLib-5_64'
@
text
@d1 14
@

