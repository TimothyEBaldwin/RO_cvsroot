head	1.2;
access;
symbols
	RISC_OSLib-5_97:1.2
	RISC_OSLib-5_96:1.2
	RISC_OSLib-5_95:1.2
	RISC_OSLib-5_94:1.2
	RISC_OSLib-5_93:1.2
	RISC_OSLib-5_92:1.2
	RISC_OSLib-5_91:1.2
	RISC_OSLib-5_90:1.2
	RISC_OSLib-5_89:1.2
	RISC_OSLib-5_88:1.2
	RISC_OSLib-5_87:1.2
	RISC_OSLib-5_86-1:1.2
	RISC_OSLib-5_86:1.2
	RISC_OSLib-5_85:1.2
	RISC_OSLib-5_84:1.2
	RISC_OSLib-5_83-2:1.2
	RISC_OSLib-5_83-1:1.2
	RISC_OSLib-5_83:1.2
	RISC_OSLib-5_82:1.2
	RISC_OSLib-5_81:1.2
	RISC_OSLib-5_75-2:1.2
	RISC_OSLib-5_80:1.2
	RISC_OSLib-5_79:1.2
	RISC_OSLib-5_78:1.2
	RISC_OSLib-5_75-1:1.2
	RISC_OSLib-5_77:1.2
	RISC_OSLib-5_76:1.2
	RISC_OSLib-5_75:1.2
	RISC_OSLib-5_74:1.2
	RISC_OSLib-5_73:1.2
	RISC_OSLib-5_72:1.2
	RISC_OSLib-5_71:1.2
	RISC_OSLib-5_70:1.2
	RISC_OSLib-5_69:1.2
	RISC_OSLib-5_68:1.2
	RISC_OSLib-5_67:1.1
	RISC_OSLib-5_66:1.1
	RISC_OSLib-5_65:1.1
	RISC_OSLib-5_64:1.1
	RISC_OSLib-5_63:1.1
	RISC_OSLib-5_62:1.1
	RISC_OSLib-5_61:1.1
	RISC_OSLib-5_60:1.1
	RISC_OSLib-5_59:1.1
	RISC_OSLib-5_58:1.1
	RISC_OSLib-5_57:1.1
	RISC_OSLib-5_56:1.1
	RISC_OSLib-5_55:1.1
	RISC_OSLib-5_54:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.05.28.18.04.08;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	psVvzYlFFIpQ9w6w;

1.1
date	2008.03.18.20.44.08;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Add locale support for selecting timezones from C
armsys.c
  Ammended time() to match ISO9899 and just return UTC like it says.
  Inlined the single use of _bbctime() macro.
locale.c
  The timezone within a territory can now be specified as part of the setlocale() function.
  This uses a qualifier to the already accepted territory name, for an example see test/tzones.c
  Shock addition of some comments to the locale parsing function.
  To avoid needing to mess about with C library workspace the timezone and territory are encoded internally into 1 word, with 10 bits allowing up to 1024 territories worldwide.
  Ripple through to strftime().
time.c
  localtime() updated to respect locale selection.
test/file,gen_inputs,test64
  Copyright headers added.

Output compared with Windows XP using setlocale versus tzset to shift the program into Pacific time.

Version 5.68. Tagged as 'RISC_OSLib-5_68'
@
text
@/* Copyright 2008 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generate test data for long long support
// Run this on a known good C library

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <stdbool.h>
#include <stdint.h>

uint64_t rand63(void)
{
  // Generate a 63-bit random number
  uint32_t a, b;
  a = rand();
  b = rand();
  return 0x4000000000000000 | ((uint64_t) a << 31) | b;
}

int main(void)
{
  // We want to create pairs of random 64-bit numbers with
  // every combination of 1-64 leading 0s and 1-64 leading 1s
  assert(RAND_MAX == 0x7FFFFFFF);
  srand(42);
  bool invertb = false;
  do
  {
    bool inverta = false;
    do
    {
      for (size_t bbits = 1; bbits <= 64; bbits++)
        for (size_t abits = 1; abits <= 64; abits++)
        {
          uint64_t a = rand63() >> (abits - 1);
          uint64_t b = rand63() >> (bbits - 1);
          if (inverta) a = ~a;
          if (invertb) b = ~b;
          printf("%016llX %016llX\n", a, b);
        }
    }
    while (!inverta++);
  }
  while (!invertb++);
  return 0;
}
@


1.1
log
@Created cleanroom implementation of 64-bit integer support for licencing
reasons. Tested fairly thoroughly (in fact, this testing showed up a bug in
the old code which unbalanced the stack for 50% of cases where you divided a
negative long long by 10). Hopefully should work faster than the old code too!
Reapplied all relevant old tags.
@
text
@d1 14
@

