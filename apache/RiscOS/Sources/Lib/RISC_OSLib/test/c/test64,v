head	1.2;
access;
symbols
	RISC_OSLib-5_97:1.2
	RISC_OSLib-5_96:1.2
	RISC_OSLib-5_95:1.2
	RISC_OSLib-5_94:1.2
	RISC_OSLib-5_93:1.2
	RISC_OSLib-5_92:1.2
	RISC_OSLib-5_91:1.2
	RISC_OSLib-5_90:1.2
	RISC_OSLib-5_89:1.2
	RISC_OSLib-5_88:1.2
	RISC_OSLib-5_87:1.2
	RISC_OSLib-5_86-1:1.2
	RISC_OSLib-5_86:1.2
	RISC_OSLib-5_85:1.2
	RISC_OSLib-5_84:1.2
	RISC_OSLib-5_83-2:1.2
	RISC_OSLib-5_83-1:1.2
	RISC_OSLib-5_83:1.2
	RISC_OSLib-5_82:1.2
	RISC_OSLib-5_81:1.2
	RISC_OSLib-5_75-2:1.2
	RISC_OSLib-5_80:1.2
	RISC_OSLib-5_79:1.2
	RISC_OSLib-5_78:1.2
	RISC_OSLib-5_75-1:1.2
	RISC_OSLib-5_77:1.2
	RISC_OSLib-5_76:1.2
	RISC_OSLib-5_75:1.2
	RISC_OSLib-5_74:1.2
	RISC_OSLib-5_73:1.2
	RISC_OSLib-5_72:1.2
	RISC_OSLib-5_71:1.2
	RISC_OSLib-5_70:1.2
	RISC_OSLib-5_69:1.2
	RISC_OSLib-5_68:1.2
	RISC_OSLib-5_67:1.1
	RISC_OSLib-5_66:1.1
	RISC_OSLib-5_65:1.1
	RISC_OSLib-5_64:1.1
	RISC_OSLib-5_63:1.1
	RISC_OSLib-5_62:1.1
	RISC_OSLib-5_61:1.1
	RISC_OSLib-5_60:1.1
	RISC_OSLib-5_59:1.1
	RISC_OSLib-5_58:1.1
	RISC_OSLib-5_57:1.1
	RISC_OSLib-5_56:1.1
	RISC_OSLib-5_55:1.1
	RISC_OSLib-5_54:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.05.28.18.04.08;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	psVvzYlFFIpQ9w6w;

1.1
date	2008.03.18.20.44.08;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Add locale support for selecting timezones from C
armsys.c
  Ammended time() to match ISO9899 and just return UTC like it says.
  Inlined the single use of _bbctime() macro.
locale.c
  The timezone within a territory can now be specified as part of the setlocale() function.
  This uses a qualifier to the already accepted territory name, for an example see test/tzones.c
  Shock addition of some comments to the locale parsing function.
  To avoid needing to mess about with C library workspace the timezone and territory are encoded internally into 1 word, with 10 bits allowing up to 1024 territories worldwide.
  Ripple through to strftime().
time.c
  localtime() updated to respect locale selection.
test/file,gen_inputs,test64
  Copyright headers added.

Output compared with Windows XP using setlocale versus tzset to shift the program into Pacific time.

Version 5.68. Tagged as 'RISC_OSLib-5_68'
@
text
@/* Copyright 2008 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Test long long support */

#include <stdio.h>
#include <stdint.h>

struct udivrem { uint64_t q; uint64_t r; };
struct  divrem {  int64_t q;  int64_t r; };

extern  int64_t _ll_from_u(uint32_t);
extern  int64_t _ll_from_l( int32_t);
extern uint32_t _ll_to_l  ( int64_t);

extern  int64_t _ll_add  ( int64_t,  int64_t);
extern  int64_t _ll_addlu( int64_t, uint32_t);
extern  int64_t _ll_addls( int64_t,  int32_t);
extern  int64_t _ll_adduu(uint32_t, uint32_t);
extern  int64_t _ll_addss( int32_t,  int32_t);

extern  int64_t _ll_sub  ( int64_t,  int64_t);
extern  int64_t _ll_sublu( int64_t, uint32_t);
extern  int64_t _ll_subls( int64_t,  int32_t);
extern  int64_t _ll_subuu(uint32_t, uint32_t);
extern  int64_t _ll_subss( int32_t,  int32_t);

extern  int64_t _ll_rsb  ( int64_t,  int64_t);
extern  int64_t _ll_rsblu( int64_t, uint32_t);
extern  int64_t _ll_rsbls( int64_t,  int32_t);
extern  int64_t _ll_rsbuu(uint32_t, uint32_t);
extern  int64_t _ll_rsbss( int32_t,  int32_t);

extern  int64_t _ll_mul  ( int64_t,  int64_t);
extern  int64_t _ll_mullu( int64_t, uint32_t);
extern  int64_t _ll_mulls( int64_t,  int32_t);
extern  int64_t _ll_muluu(uint32_t, uint32_t);
extern  int64_t _ll_mulss( int32_t,  int32_t);

extern __value_in_regs struct udivrem _ll_udiv  (uint64_t, uint64_t);
extern __value_in_regs struct udivrem _ll_urdv  (uint64_t, uint64_t);
extern __value_in_regs struct udivrem _ll_udiv10(uint64_t);
extern __value_in_regs struct  divrem _ll_sdiv  ( int64_t,  int64_t);
extern __value_in_regs struct  divrem _ll_srdv  ( int64_t,  int64_t);
extern __value_in_regs struct  divrem _ll_sdiv10( int64_t);

extern  int64_t _ll_not( int64_t);
extern  int64_t _ll_neg( int64_t);
extern  int64_t _ll_and( int64_t,  int64_t);
extern  int64_t _ll_or ( int64_t,  int64_t);
extern  int64_t _ll_eor( int64_t,  int64_t);

extern uint64_t _ll_shift_l (uint64_t, uint32_t);
extern uint64_t _ll_ushift_r(uint64_t, uint32_t);
extern  int64_t _ll_sshift_r( int64_t, uint32_t);

int main(void)
{
  FILE *f = fopen("inputs", "r");
  while (!feof(f))
  {
    int64_t a,b;
    fscanf(f, "%016llX %016llX\n", &a, &b);
    struct udivrem udr;
    struct divrem dr;
    printf("%016llX %016llX  "
           "%016llX %016llX %08X  "
           "%016llX %016llX %016llX %016llX %016llX  "
           "%016llX %016llX %016llX %016llX %016llX  "
           "%016llX %016llX %016llX %016llX %016llX  "
           "%016llX %016llX %016llX %016llX %016llX  ",
      a, b,
      _ll_from_u(a), _ll_from_l(a), _ll_to_l(a),
      _ll_add(a,b), _ll_addlu(a,b), _ll_addls(a,b), _ll_adduu(a,b), _ll_addss(a,b),
      _ll_sub(a,b), _ll_sublu(a,b), _ll_subls(a,b), _ll_subuu(a,b), _ll_subss(a,b),
      _ll_rsb(a,b), _ll_rsblu(a,b), _ll_rsbls(a,b), _ll_rsbuu(a,b), _ll_rsbss(a,b),
      _ll_mul(a,b), _ll_mullu(a,b), _ll_mulls(a,b), _ll_muluu(a,b), _ll_mulss(a,b));

    udr = b == 0 ? (struct udivrem) { 0, 0 } : _ll_udiv(a,b);
    printf("%016llX %016llX ", udr.q, udr.r);
    udr = a == 0 ? (struct udivrem) { 0, 0 } : _ll_urdv(a,b);
    printf("%016llX %016llX ", udr.q, udr.r);
    udr = _ll_udiv10(a);
    printf("%016llX %016llX ", udr.q, udr.r);
     dr = b == 0 ?  (struct divrem) { 0, 0 } : _ll_sdiv(a,b);
    printf("%016llX %016llX ",  dr.q,  dr.r);
     dr = a == 0 ?  (struct divrem) { 0, 0 } : _ll_srdv(a,b);
    printf("%016llX %016llX ",  dr.q,  dr.r);
     dr = _ll_sdiv10(a);
    printf("%016llX %016llX  ",  dr.q,  dr.r);

    printf("%016llX %016llX %016llX %016llX %016llX  "
           "%016llX %016llX %016llX\n",
      _ll_not(a), _ll_neg(a), _ll_and(a,b), _ll_or(a,b), _ll_eor(a,b),
      _ll_shift_l(a,b&0x3F), _ll_ushift_r(a,b&0x3F), _ll_sshift_r(a,b&0x3F));
  }
  fclose(f);
  return 0;
}
@


1.1
log
@Created cleanroom implementation of 64-bit integer support for licencing
reasons. Tested fairly thoroughly (in fact, this testing showed up a bug in
the old code which unbalanced the stack for 50% of cases where you divided a
negative long long by 10). Hopefully should work faster than the old code too!
Reapplied all relevant old tags.
@
text
@d1 15
a15 1
// Test long long support
@

