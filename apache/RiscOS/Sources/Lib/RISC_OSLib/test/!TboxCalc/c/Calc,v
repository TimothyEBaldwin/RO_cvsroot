head	1.1;
access;
symbols
	RISC_OSLib-5_97:1.1
	RISC_OSLib-5_96:1.1
	RISC_OSLib-5_95:1.1
	RISC_OSLib-5_94:1.1
	RISC_OSLib-5_93:1.1
	RISC_OSLib-5_92:1.1
	RISC_OSLib-5_91:1.1
	RISC_OSLib-5_90:1.1
	RISC_OSLib-5_89:1.1
	RISC_OSLib-5_88:1.1
	RISC_OSLib-5_87:1.1
	RISC_OSLib-5_86-1:1.1
	RISC_OSLib-5_86:1.1
	RISC_OSLib-5_85:1.1
	RISC_OSLib-5_84:1.1
	RISC_OSLib-5_83-2:1.1
	RISC_OSLib-5_83-1:1.1
	RISC_OSLib-5_83:1.1
	RISC_OSLib-5_82:1.1
	RISC_OSLib-5_81:1.1
	RISC_OSLib-5_75-2:1.1
	RISC_OSLib-5_80:1.1
	RISC_OSLib-5_79:1.1
	RISC_OSLib-5_78:1.1
	RISC_OSLib-5_75-1:1.1
	RISC_OSLib-5_77:1.1
	RISC_OSLib-5_76:1.1
	RISC_OSLib-5_75:1.1
	RISC_OSLib-5_74:1.1
	RISC_OSLib-5_73:1.1
	RISC_OSLib-5_72:1.1
	RISC_OSLib-5_71:1.1
	RISC_OSLib-5_70:1.1
	RISC_OSLib-5_69:1.1
	RISC_OSLib-5_68:1.1
	RISC_OSLib-5_67:1.1
	RISC_OSLib-5_66:1.1
	RISC_OSLib-5_65:1.1
	RISC_OSLib-5_64:1.1
	RISC_OSLib-5_63:1.1
	RISC_OSLib-5_62:1.1
	RISC_OSLib-5_61:1.1
	RISC_OSLib-5_60:1.1
	RISC_OSLib-5_59:1.1
	RISC_OSLib-5_58:1.1
	RISC_OSLib-5_57:1.1
	RISC_OSLib-5_56:1.1
	RISC_OSLib-5_55:1.1
	RISC_OSLib-5_54:1.1
	RISC_OSLib-5_53:1.1
	RISC_OSLib-5_52:1.1
	RISC_OSLib-5_51:1.1
	RO_5_07:1.1
	RISC_OSLib-5_50:1.1
	RISC_OSLib-5_49:1.1
	RISC_OSLib-5_48:1.1
	RISC_OSLib-5_47:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.01.16.12.43.34;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Misc changes.
Detail:
  * Improved lookup of application Sprites file: uses Wimp_Extend 13 (in
    Wimps that support it) to work out the appropriate resolution suffix,
    and prefixes with "<Wimp$IconTheme>" to allow a future Theme Manager
    to operate.
  * Preserves attributes of any existing file when saving sprite or text
    files.
  * Changed two null menu handles from 0 to (doucmented) -1. Despite the
    fact that the Wimp is actually happy with 0 as a null handle here,
    this was reported as a fault.
  * Changed rlib.c.version to use VersionNum, deleted thereby-obsoleted
    rlib.h.VerIntern.version file. Not that rlib.c.version seems to be used
    at the moment.
  * Added Kevin's additions to the test directory.
Admin:
  Tested briefly.

Version 5.44. Not tagged
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* title: calc.c
 *
 * Purpose: To provide Calculator specific code split neatly from the user
 * interface code.
 *
 * Created 01-Aug-1994
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "calc.h"

char operand_1[10];
char operand_2[10];
int  oper = 0;
int  op1_len;
int  op2_len;
int  op;
int  op_flag = 1;

void do_calculation(int operator, char *result)
{
  switch(operator)
  {
    case pressed_add:
    {
      sprintf(result,"%g\n",(atof(operand_1)) + (atof(operand_2)));
      break;
    }
    case pressed_minus:
    {
      sprintf(result,"%g\n",(atof(operand_1)) - (atof(operand_2)));
      break;
    }
    case pressed_mult:
    {
      sprintf(result,"%g\n",(atof(operand_1)) * (atof(operand_2)));
      break;
    }
    case pressed_divide:
    {
      if(atof(operand_2)==0)
      {
        sprintf(result,"Error\n");
      }
      else
      {
        sprintf(result,"%g\n",(atof(operand_1)) / (atof(operand_2)));
      }
      break;
    }
  }
}

int calc_construct_operand_1(int event_code)
{
  int i;

  if(event_code == pressed_0 && op1_len == 0)
    {
      return 0;
    }
    if(event_code <= pressed_9)
    {
      operand_1[op1_len] = (char) (event_code - 0x100)+48;
    }
    else
    {
      for(i=0;i<=op1_len;i++)
      {
        if(operand_1[i] == '.')
          return 1;
      }
      operand_1[op1_len] = (char) 46;
    }

    op1_len++;
    operand_1[op1_len] = '\0';
    return 1;
}

int calc_construct_operand_2(int event_code)
{
  int i;

  if(event_code == pressed_0 && op2_len == 0)
    {
      return 0;
    }
    if(event_code <= pressed_9)
    {
      operand_2[op2_len] = (char) (event_code - 0x100)+48;
    }
    else
    {
      for(i=0;i<=op2_len;i++)
      {
        if(operand_2[i] == '.')
          return 1;
      }
      operand_2[op2_len] = (char) 46;
    }

    op2_len++;
    operand_2[op2_len] = '\0';
    return 1;
}
void calc_reinit(void)
{
  op1_len = 0;
  op2_len = 0;
  operand_1[op1_len] = '\0';
  operand_2[op2_len] = '\0';
  op_flag = 1;
}

void calc_initialisation(void)
{
  op1_len = 0;
  op2_len = 0;
  operand_1[op1_len] = '\0';
  operand_2[op2_len] = '\0';
}
@
