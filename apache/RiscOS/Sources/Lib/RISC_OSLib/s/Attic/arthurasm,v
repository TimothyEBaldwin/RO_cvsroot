head	4.3;
access;
symbols
	RO_5_07:4.3
	RISC_OSLib-5_01-4_16_2_5:4.2
	RISC_OSLib-5_01-4_16_2_4:4.2
	sbrodie_RISC_OSLib-5_10-dev:4.3.0.2
	RISC_OSLib-5_01-4_16_2_3:4.2
	RISC_OSLib-5_01-4_16_2_2:4.2
	RISC_OSLib-5_01-4_16_2_1:4.2
	Bethany:4.2.0.12
	RISC_OSLib-5_05:4.2
	RISC_OSLib-5_04:4.2
	sbrodie_sedwards_16Mar2000:4.2
	RISC_OSLib-5_03:4.2
	RISC_OSLib-5_02:4.2
	RISC_OSLib-4_97-4_12_2_7:4.2.10.1
	RISC_OSLib-5_01:4.2
	RISC_OSLib-5_00:4.2
	RISC_OSLib-4_99:4.2
	RISC_OSLib-4_98:4.2
	RISC_OSLib-4_97-4_12_2_6:4.2.10.1
	RISC_OSLib-4_97-4_12_2_5:4.2.10.1
	RISC_OSLib-4_97-4_12_2_4:4.2.10.1
	RISC_OSLib-4_97-4_12_2_3:4.2.10.1
	RISC_OSLib-4_97-4_12_2_2:4.2
	sbrodie_RISC_OSLib-4_97-4_12_2_1:4.2
	kbracey_32bit:4.2.0.10
	kbracey_32bit_bp:4.2
	dcotton_autobuild_BaseSW:4.2
	RISC_OSLib-4_97:4.2
	RISC_OSLib-4_96:4.2
	RISC_OSLib-4_95:4.2
	RISC_OSLib-4_94:4.2
	RISC_OSLib-4_93:4.2
	RISC_OSLib-4_92:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	sforrest_daytona_appflash-0_31:4.2
	RISC_OSLib-4_91:4.2
	RISC_OSLib-4_90:4.2
	RISC_OSLib-4_89:4.2
	Ursula_merge:4.2
	RISC_OSLib-4_88:4.2
	RISC_OSLib-4_87:4.2
	blaughto_daytona_appflash-0_30:4.2
	rmanby_clib-4_86:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2000.05.09.14.09.42;	author kbracey;	state dead;
branches;
next	4.2;

4.2
date	97.01.21.17.13.06;	author nturton;	state Exp;
branches
	4.2.10.1;
next	4.1;

4.1
date	96.11.05.09.25.40;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.25.40;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.56.11;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.35.07;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.51.44;	author nturton;	state Exp;
branches;
next	;

4.2.10.1
date	99.11.10.14.02.35;	author kbracey;	state Exp;
branches;
next	4.2.10.2;

4.2.10.2
date	2000.05.09.13.58.56;	author kbracey;	state dead;
branches;
next	;


desc
@@


4.3
log
@32-bit work merged from kbracey_32bit branch.

Version 5.06. Tagged as 'RISC_OSLib-5_06'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >s.ArthurAsm
; Copyright (C) Acorn Computers Ltd., 1988

        GET s.h_StrongA

SWI_OP        * &ef000000 ; SWIAL  op-code

; in s.ArthurAsm ...
;  art_get()
;  art_vdu()
;  art_vduw()
;  art_mouse()
;  art_swi()
;  art_swix()

        IMPORT |x$stack_overflow|

        EXPORT $Pfx.get
        EXPORT $Pfx.vdu
        EXPORT $Pfx.vduw
        EXPORT $Pfx.mouseX
        EXPORT $Pfx.mouseY
        EXPORT $Pfx.mouseB
        EXPORT $Pfx.swi
        EXPORT $Pfx.swix


 AREA |C$$code|, CODE, READONLY

|v$codesegment|

$Pfx.get
        SWI     ReadC
        MOVS    PC,R14

$Pfx.vduw
        SWI     WriteC
        MOV     R0,R0,LSR #8
$Pfx.vdu
        SWI     WriteC
        MOVS    PC,R14

$Pfx.mouseX
        SWI     Mouse
        MOVS    PC,R14

$Pfx.mouseY
        SWI     Mouse
        MOV     R0,R1
        MOVS    PC,r14

$Pfx.mouseB
        SWI     Mouse
        MOV     R0,R2
        MOVS    PC,R14

; In : a1 contains pointer to return structure, a2 contains swi number, a3
; points to arm register structure

$Pfx.swi
        MOV     ip, sp
        STMFD   sp!, {v1-v6,fp,ip,lk,pc}
        SUB     fp, ip, #4
        CMP     sp, sl
        BLCC    |x$stack_overflow|

        BIC     a2, a2, #&ff000000      ; just in case swi number out of range!
        ORR     a2, a2, #SWI_OP         ; make into swi operation
        LDR     a4, return_inst         ; get a return instruction
        STMDB   sp!, {a2,a4}            ; then put both on the stack
  [ StrongARM
    SyncStackCode 2
  ]
        MOV     ip, a1                  ; save return pointer out of way
        LDMIA   a3, {a1-v6}             ; get user's input registers

        ADR     r14, return_hre         ; come back here
        MOV     pc, sp                  ; after executing stacked instr.
return_hre
        ADD     sp, sp, #2*4            ; tidy stack

        STMIA   ip, {a1-v6}             ; then return r0-r8 to user
        MOV     a1, ip                  ; returning it's pointer

        LDMEA   fp, {v1-v6,fp,sp,pc}^

return_inst

        MOV     pc, lk                  ; data really - for stack execution

; In : a1 contains swi number, a2
; points to arm register structure

$Pfx.swix
        MOV     ip, sp
        STMFD   sp!, {v1-v6,fp,ip,lk,pc}
        SUB     fp, ip, #4
        CMP     sp, sl
        BLCC    |x$stack_overflow|

        BIC     a1, a1, #&ff000000      ; just in case swi number out of range!
        ORR     a1, a1, #SWI_OP         ; make into swi operation
        ORR     a1, a1, #X              ; make a swi of V-error type
        LDR     a3, return_inst         ; get a return instruction
        STMDB   sp!, {a1,a3}            ; then put both on the stack
  [ StrongARM
    SyncStackCode 2
  ]
        MOV     ip, a2                  ; save return pointer out of way
        LDMIA   a2, {a1-v6}             ; get user's input registers

        ADR     r14, return_here        ; come back here
        MOV     pc, sp                  ; after executing stacked instr.
return_here
        ADD     sp, sp, #2*4            ; tidy stack

        STMIA   ip, {a1-v6}             ; then return r0-r8 to user
        MOVVC   a1, #0                  ; returning 0 if no error,
                                        ; pointer to error block if error

        LDMEA   fp, {v1-v6,fp,sp,pc}^


        END
@


4.2
log
@Version RO_3_70 taken
@
text
@@


4.2.10.1
log
@_kernel_unwind now understands SFMFD instructions in function entry.
It also copes with STFE now - it was totally broken.
32-bit stubs and corresponding LibInit SWIs created.
All rather untested.

Version 4.97, 4.12.2.3. Tagged as 'RISC_OSLib-4_97-4_12_2_3'
@
text
@d18 1
a18 1
        GET s.h_Brazil
@


4.2.10.2
log
@Features:

* APCS-32 support complete.
* APCS-A compatibility removed.
* Old ArthurLib code removed.
* _clib_version() now reports version from VersionNum.
* time() no longer does a run-time host check - I think we know we're not a BBC
  Master ARM second processor now.
* rename() now uses OS_FSControl 25 instead of *rename.
* getenv() can handle arbitrary length variables.
* Can now handle exceptions in 32-bit form of FPEmulator (on either 26 or 32
  bit systems).
* tmpnam() switches to SVC mode to access its zero page counter.
* Faster divide routines.

Admin:

  This will build all sorts of different things depending on the flags. See
  the Docs directory for details.

  As far as ROM builds are concerned, if using APCS-R, no changes are needed.
  If using APCS-32, the Shared C Library must be built as APCS-R to ensure
  compatibility with old binaries. To achieve this, pass in the option
  SCL_APCS="-APCS 3/26bit" in the Components file.

Version 4.97, 4.12.2.8. Tagged as 'RISC_OSLib-4_97-4_12_2_8'
@
text
@@


4.1
log
@Initial revision
@
text
@d18 2
d85 3
a87 1

d120 3
a122 1

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a17 2
        GET s.h_StrongA

d83 1
a83 3
  [ StrongARM
    SyncStackCode 2
  ]
d116 1
a116 3
  [ StrongARM
    SyncStackCode 2
  ]
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
