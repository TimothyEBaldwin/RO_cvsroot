head	4.3;
access;
symbols
	RISC_OSLib-5_97:4.3
	RISC_OSLib-5_96:4.3
	RISC_OSLib-5_95:4.3
	RISC_OSLib-5_94:4.3
	RISC_OSLib-5_93:4.3
	RISC_OSLib-5_92:4.3
	RISC_OSLib-5_91:4.3
	RISC_OSLib-5_90:4.3
	RISC_OSLib-5_89:4.3
	RISC_OSLib-5_88:4.3
	RISC_OSLib-5_87:4.3
	RISC_OSLib-5_86-1:4.3
	RISC_OSLib-5_86:4.3
	RISC_OSLib-5_85:4.3
	RISC_OSLib-5_84:4.3
	RISC_OSLib-5_83-2:4.3
	RISC_OSLib-5_83-1:4.3
	RISC_OSLib-5_83:4.3
	RISC_OSLib-5_82:4.3
	RISC_OSLib-5_81:4.3
	RISC_OSLib-5_75-2:4.3
	RISC_OSLib-5_80:4.3
	RISC_OSLib-5_79:4.3
	RISC_OSLib-5_78:4.3
	RISC_OSLib-5_75-1:4.3
	RISC_OSLib-5_77:4.3
	RISC_OSLib-5_76:4.3
	RISC_OSLib-5_75:4.3
	RISC_OSLib-5_74:4.3
	RISC_OSLib-5_73:4.3
	RISC_OSLib-5_72:4.3
	RISC_OSLib-5_71:4.3
	RISC_OSLib-5_70:4.3
	RISC_OSLib-5_69:4.3
	RISC_OSLib-5_68:4.3
	RISC_OSLib-5_67:4.3
	RISC_OSLib-5_66:4.3
	RISC_OSLib-5_65:4.3
	RISC_OSLib-5_64:4.3
	RISC_OSLib-5_63:4.3
	RISC_OSLib-5_62:4.3
	RISC_OSLib-5_61:4.3
	RISC_OSLib-5_60:4.3
	RISC_OSLib-5_59:4.3
	RISC_OSLib-5_58:4.3
	RISC_OSLib-5_57:4.3
	RISC_OSLib-5_56:4.3
	RISC_OSLib-5_55:4.3
	RISC_OSLib-5_54:4.3
	RISC_OSLib-5_53:4.3
	RISC_OSLib-5_52:4.3
	RISC_OSLib-5_51:4.3
	RO_5_07:4.3
	RISC_OSLib-5_50:4.3
	RISC_OSLib-5_49:4.3
	RISC_OSLib-5_46-4_64_2_1:4.2
	NoInlineAsm:4.2.0.2
	RISC_OSLib-5_48:4.2
	RISC_OSLib-5_47:4.2
	RISC_OSLib-5_46:4.2
	RISC_OSLib-5_45:4.2
	RISC_OSLib-5_44:4.2
	RISC_OSLib-5_43:4.2
	RISC_OSLib-5_42:4.2
	RISC_OSLib-5_41:4.2
	RISC_OSLib-5_40:4.2
	RISC_OSLib-5_39:4.2
	RISC_OSLib-5_38:4.1
	RISC_OSLib-5_37:4.1;
locks; strict;
comment	@# @;


4.3
date	2004.01.23.19.10.24;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2002.04.11.16.37.54;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	2002.03.21.14.36.26;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.3
log
@<ctype.h> * isblank() added.
          * isprint() now true for non-breaking spaces
<math.h>  * FP_INFINITY corrected to FP_INFINITE
          * fma(), fmal(), llrint(), llrintf(), llrintl(),
            llround(), llroundf(), llroundl(),
            remquo(), remquof(), remquol() added.
          * added inlining for remainder() and fmaf() and various
            float functions.
          * math_errhandling removed pending overhaul - it was misleading.
          * expm1() and log1p() now provide decent (< 1 ulp) accuracy,
            rather than only being marginally better than exp(x)-1 and
            log(1+x).
          * new version of copysign() with standard calling conventions.
          * some C99 functions changed to use infinity/NaNs and exceptions
            for error handling - see comments in header file about the
            changes in progress.
<stdio.h>  * output from %a now correctly rounded
<stdlib.h> * strtof() and strtold() added.
<string.h> * strerror() no longer clears _kernel_last_oserror().

Version 5.49. Tagged as 'RISC_OSLib-5_49'
@
text
@; Copyright 2002 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
FE_INVALID      * &01
FE_DIVBYZERO    * &02
FE_OVERFLOW     * &04
FE_UNDERFLOW    * &08
FE_INEXACT      * &10
FE_ALL_EXCEPT   * &1F

FE_TONEAREST    * 0

FE_Trap_pos     * 16
FE_Flag_pos     * 0

FE_DFL_ENV      * 0

FE_Default_FPSR * (FE_INVALID+FE_DIVBYZERO+FE_OVERFLOW) :SHL: FE_Trap_pos

        GET objmacs.s

        CodeArea

; int feclearexcept(int excepts)
        Function feclearexcept, leaf
        RFS     ip
        AND     a2, a1, #FE_ALL_EXCEPT
        BIC     ip, ip, a2
        WFS     ip
        BIC     a1, a1, #FE_ALL_EXCEPT
        Return  ,,LinkNotStacked

; int fegetexceptflag(fexcept_t *flagp, int excepts)
        Function fegetexceptflag, leaf
        RFS     ip
        AND     a3, a2, #FE_ALL_EXCEPT
        AND     ip, ip, a3
        STR     ip, [a1]
        BIC     a1, a2, #FE_ALL_EXCEPT
        Return  ,,LinkNotStacked

; int fesetexceptflag(const fexcept_t *flagp, int excepts)
        Function fesetexceptflag, leaf
        RFS     ip
        LDR     a1, [a1]
        AND     a3, a2, #FE_ALL_EXCEPT
        AND     a1, a1, a3
        BIC     ip, ip, a3
        ORR     ip, ip, a1
        WFS     ip
        BIC     a1, a2, #FE_ALL_EXCEPT
        Return  ,,LinkNotStacked

; int fetestexcept(int excepts);
        Function fetestexcept, leaf
        RFS     ip
        AND     a1, a1, #FE_ALL_EXCEPT
        AND     a1, ip, a1
        Return  ,,LinkNotStacked

; int fegetround(void)
        Function fegetround, leaf
        MOV     a1, #FE_TONEAREST
        Return  ,,LinkNotStacked

; int fesetround(int round)
        Function fesetround, leaf
        EOR     a1, a1, #FE_TONEAREST
        Return  ,,LinkNotStacked

;int fegetenv(fenv_t *envp)
        Function fegetenv, leaf
        RFS     ip
        STR     ip, [a1]
        Return  ,,LinkNotStacked

; int feholdexcept(fenv_t *envp)
        Function feholdexcept, leaf
        RFS     ip
        STR     ip, [a1]
        BIC     ip, ip, #FE_ALL_EXCEPT :SHL: FE_Flag_pos
        BIC     ip, ip, #FE_ALL_EXCEPT :SHL: FE_Trap_pos
        WFS     ip
        MOV     a1, #0
        Return  ,,LinkNotStacked

; int fesetenv(const fenv_t *envp)
        Function fesetenv, leaf
        TEQ     a1, #FE_DFL_ENV
        LDRNE   ip, [a1]
        MOVEQ   ip, #&00070000
        WFS     ip
        RFS     a1
        EOR     a1, a1, ip
        BIC     a1, a1, #&FF000000
        Return  ,,LinkNotStacked

; int feupdateenv(const fenv_t *envp)
        Function feupdateenv, leaf
        TEQ     a1, #FE_DFL_ENV
        LDRNE   ip, [a1]
        MOVEQ   ip, #&00070000
        RFS     a4                      ; read current status
        WFS     ip                      ; write new status
        RFS     a3                      ; check we wrote it successfully
        EOR     a3, a3, ip
        BICS    a1, a3, #&FF000000
        Return  ,,LinkNotStacked, NE    ; return nonzero if not
        AND     a1, a4, #FE_ALL_EXCEPT  ; a1 := previous exceptions
        ; fall through

; int feraiseexcept(int excepts)
        Function feraiseexcept, leaf
        ; Yuck. No easy way to do this. We need five sums that
        ; will generate each exception in turn.
        TST     a1, #FE_INVALID
        MVFNES  f0, #0
        DVFNES  f0, f0, #0
        TST     a1, #FE_DIVBYZERO
        MVFNES  f0, #1
        DVFNES  f0, f0, #0
        TST     a1, #FE_OVERFLOW
        LDFNES  f0, Huge
        MUFNES  f0, f0, #2              ; also generates inexact (allowed)
        BICNE   a1, a1, #FE_INEXACT
        TST     a1, #FE_UNDERFLOW
        LDFNES  f0, Tiny
        MUFNES  f0, f0, #0.5            ; also generates inexact (allowed)
        BICNE   a1, a1, #FE_INEXACT
        TST     a1, #FE_INEXACT
        LDFNES  f0, TwoToTwentyEight
        ADFNES  f0, f0, #1
        BIC     a1, a1, #FE_ALL_EXCEPT
        Return  ,,LinkNotStacked

TwoToTwentyEight
        DCD     &4D800000               ; 1.0 x 2^28
Tiny
        DCD     &00000001               ; smallest (subnormal) single
Huge
        DCD     &7F7FFFFF               ; largest single

        END
@


4.2
log
@* Added C99 functions floorf, ceilf, [l]rint[f], trunc[f], [l]round[f],
  nearbyint[f] and remainder[f].
* Added macros (only) for sinf, cosf, atanf.
* Requires cc 5.43

Version 5.39. Tagged as 'RISC_OSLib-5_39'
@
text
@d24 3
d29 2
d92 2
a93 2
        BIC     ip, ip, #FE_ALL_EXCEPT
        BIC     ip, ip, #FE_ALL_EXCEPT :SHL: 16
d136 1
d140 1
@


4.1
log
@Added the following C99 features:

  * snprintf(), vsnprintf(), vfscanf(), vscanf(), vsscanf()
  * hh, j, z and t printf length modifiers (indicating char, intmax_t, size_t
    and ptrdiff_t respectively)
  * Hexadecimal floating-point printing and scanning (%a/%A)
  * %F printf() specifier (upper-case form of %F)
  * Input/output of NaNs and Infinities
  * imaxdiv_t, imaxdiv(), strtoimax(), strtoumax() (simulated through macros)
  * <fenv.h>: feclearexcept(), fegetexceptflag(), feraiseexcept(),
              fesetexceptflag(), fetestexcept(), fegetround(), fesetround(),
              fegetenv(), feholdexcept(), fesetenv(), feupdateenv()
  * FLT_EVAL_METHOD, DECIMAL_DIG
  * hypot(), hypotf(), fabsf(), fdim(), fdimf(), fmax(), fmaxf(), fmin(),
    fminf()
  * INFINITY, NAN, fpclassify(), isfinite(), isinf(), isnan(), isnormal(),
    signbit(), copysign(), copysignf(), nan(), nanf(), nextafter(),
    nextafterf() isgreater(), isgreaterequal(), isless(), islessequal(),
    islessgreater(), isunordered()

This involves adding 36 new entries to the stubs. Current versions of the C
library will not fault client programs with such larger stubs, but will fill
in the extra entries with junk. Programs requiring the new functions will have
to RMEnsure this version of the Shared C Library.

This version of the C library has been fixed so that in future, any extra
unknown stubs entries will be filled in with a branch to zero, rather than
corrupted.

Requires cc 5.41 or later, both to build, and to make use of some of the extra
facilities.


Version 5.37. Tagged as 'RISC_OSLib-5_37'
@
text
@d130 1
a130 1
        MUFNES  f0, f0, #2
d133 1
a133 1
        MUFNES  f0, f0, #0.5
d143 1
a143 1
        DCD     &00000001               ; smallest denormalised single
d145 1
a145 1
        DCD     &7F7FFFFF               ; largest normalised single
@

