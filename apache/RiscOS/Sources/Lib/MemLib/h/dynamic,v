head	1.2;
access;
symbols
	MemLib-1_03:1.2
	MemLib-1_02:1.2
	dellis_autobuild_BaseSW:1.2
	dcotton_autobuild_BaseSW:1.2
	Spin_merge:1.1.2.1
	MemLib-1_01:1.2
	ahodgkin_207release:1.1.2.1
	mjrobert_MemLib_1_00:1.1.2.1
	MemLib-1_00-1_1_2_3:1.1.2.1
	MemLib-1_00-1_1_2_2:1.1.2.1
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	99.03.26.12.43.25;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	97.11.19.14.34.42;	author smiddle;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.11.19.14.34.43;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Moved to trunk.

Version 1.01. Tagged as 'MemLib-1_01'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Extras:Dynamic.h */

/* C interface to Dynamic Area routines in Risc OS 3.5 and later
 * (K) All Rites Reversed - Copy What You Like
 *
 * Authors:
 *      Peter Hartley       <peter@@ant.co.uk>
 */


#ifndef ExtrasLib_Dynamic_h
#define ExtrasLib_Dynamic_h

#ifndef __os_h
/* need os_error */
#include "os.h"
#endif

typedef struct DynamicArea *DynamicArea;    /* abstract type */

#define dynamicarea_NONE    ((DynamicArea)NULL)

/*---------------------------------------------------------------------------*
 * Create a new dynamic area                                                 *
 * Returns area number in *pAreaNumber, and a pointer to the start of the    *
 * new area.                                                                 *
 * Safe to call on earlier OS versions, but will return an error.            *
 *---------------------------------------------------------------------------*/
os_error *DynamicArea_Alloc( int nSize, const char *pAreaName,
                             DynamicArea *pArea, void **ppStart );

/*---------------------------------------------------------------------------*
 * Change the size of a dynamic area                                         *
 * On entry *pSize contains the amout to alter the size by; on exit it is    *
 * set to the actual number of bytes moved.                                  *
 *---------------------------------------------------------------------------*/
os_error *DynamicArea_Realloc( DynamicArea area, int *pSize );

/*---------------------------------------------------------------------------*
 * Remove a dynamic area completely                                          *
 * You probably want to call this from your atexit handler, as dynamic areas *
 * are NOT freed automatically when tasks quit. Also writes *pArea to NULL.  *
 *---------------------------------------------------------------------------*/
os_error *DynamicArea_Free( DynamicArea *pArea );

/*---------------------------------------------------------------------------*
 * Return system memory page size                                            *
 * Not really a dynamic area routine but in here for convenience.            *
 * Calls OS_ReadMemMapInfo.                                                  *
 *---------------------------------------------------------------------------*/
int MemoryPageSize( void );

#endif
@


1.1
log
@file dynamic was initially added on branch Spinner.
@
text
@d1 67
@


1.1.2.1
log
@Reorganised directory so that there is a standard RiscOS build for the library
with a unix build in the 'unix' directory (run mklinks first).
No source change from previous version other than adding some externs to heapintern.h

Version 1.00, 1.1.2.2. Tagged as 'MemLib-1_00-1_1_2_2'
@
text
@a0 67
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Extras:Dynamic.h */

/* C interface to Dynamic Area routines in Risc OS 3.5 and later
 * (K) All Rites Reversed - Copy What You Like
 *
 * Authors:
 *      Peter Hartley       <peter@@ant.co.uk>
 */


#ifndef ExtrasLib_Dynamic_h
#define ExtrasLib_Dynamic_h

#ifndef __os_h
/* need os_error */
#include "os.h"
#endif

typedef struct DynamicArea *DynamicArea;    /* abstract type */

#define dynamicarea_NONE    ((DynamicArea)NULL)

/*---------------------------------------------------------------------------*
 * Create a new dynamic area                                                 *
 * Returns area number in *pAreaNumber, and a pointer to the start of the    *
 * new area.                                                                 *
 * Safe to call on earlier OS versions, but will return an error.            *
 *---------------------------------------------------------------------------*/
os_error *DynamicArea_Alloc( int nSize, const char *pAreaName,
                             DynamicArea *pArea, void **ppStart );

/*---------------------------------------------------------------------------*
 * Change the size of a dynamic area                                         *
 * On entry *pSize contains the amout to alter the size by; on exit it is    *
 * set to the actual number of bytes moved.                                  *
 *---------------------------------------------------------------------------*/
os_error *DynamicArea_Realloc( DynamicArea area, int *pSize );

/*---------------------------------------------------------------------------*
 * Remove a dynamic area completely                                          *
 * You probably want to call this from your atexit handler, as dynamic areas *
 * are NOT freed automatically when tasks quit. Also writes *pArea to NULL.  *
 *---------------------------------------------------------------------------*/
os_error *DynamicArea_Free( DynamicArea *pArea );

/*---------------------------------------------------------------------------*
 * Return system memory page size                                            *
 * Not really a dynamic area routine but in here for convenience.            *
 * Calls OS_ReadMemMapInfo.                                                  *
 *---------------------------------------------------------------------------*/
int MemoryPageSize( void );

#endif
@
