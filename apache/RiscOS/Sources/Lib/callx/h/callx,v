head	1.4;
access;
symbols
	callx-0_09:1.4
	callx-0_08:1.4
	RO_5_07:1.3
	callx-0_07:1.3
	callx-0_06:1.2
	callx-0_05:1.2
	dellis_autobuild_BaseSW:1.2
	dcotton_autobuild_BaseSW:1.3
	callx-0_04:1.2
	sforrest_daytona_appflash-0_31:1.1.1.1
	callx-0_03:1.1.1.1
	blaughto_daytona_appflash-0_30:1.1.1.1
	blaughto_daytona_appflash-0_29:1.1.1.1
	blaughto_daytona_appflash-0_28:1.1.1.1
	blaughto_daytona_appflash-0_27:1.1.1.1
	blaughto_daytona_appflash-0_26:1.1.1.1
	blaughto_daytona_appflash-0_25:1.1.1.1
	blaughto_daytona_appflash-0_24:1.1.1.1
	callx-0_02-1_1_2_3:1.1.1.1
	blaughto_daytona_appflash-0_23:1.1.1.1
	blaughto_daytona_appflash-0_21:1.1.1.1
	blaughto_daytona_appflash-0_20:1.1.1.1
	blaughto_daytona_appflash-0_19:1.1.1.1
	callx-0_02-1_1_2_2:1.1.1.1
	blaughto_daytona_appflash-0_18:1.1.1.1
	blaughto_callx-0_01:1.1.1.1
	initial:1.1.1.1
	Daytona:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2011.04.11.23.10.30;	author jlee;	state Exp;
branches;
next	1.3;
commitid	Q8QM9HiGxWw18tfv;

1.3
date	2001.03.07.11.39.45;	author blaughto;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.23.17.33.59;	author blaughto;	state Exp;
branches;
next	1.1;

1.1
date	98.02.27.16.45.20;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.27.16.45.20;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add the ability for a callback to be run with interrupts disabled
Detail:
  c/callx, h/callx, s/veneer - Added new callx_add_callback_irqsoff function.
  This is identical to callx_add_callback, except the callback function will be entered with IRQs disabled.
  Using this function makes it safe to cancel callbacks from interrupts, as there's no longer the chance of a callback firing after it's been deleted.
Admin:
  Tested on rev A2 BB-xM.


Version 0.08. Tagged as 'callx-0_08'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    callx.h
 * Purpose: Interface to callx library
 * Author:  Ben Laughton
 * History:
 *
 * 1997-08-17: BAL
 * Created.
 */

#ifndef callx_h
#define callx_h

/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"




/* =============================================================================
 * Define types
 */

/* Return code not currently used.  All handlers should return NULL */
typedef _kernel_oserror* (*callx_handler_fn) (_kernel_swi_regs *  r,
                                              void *              pw,
                                              void *              handle);




/* =============================================================================
 * Declare function prototypes
 */

#ifdef __cplusplus
extern "C"
{
#endif

extern void callx_init (void *const pw);

extern _kernel_oserror *callx_add_callback (callx_handler_fn handler,
                                            void *data);

extern _kernel_oserror *callx_add_callback_irqsoff (callx_handler_fn handler,
                                            void *data);

extern _kernel_oserror *callx_remove_callback (callx_handler_fn handler,
                                               void *data);

extern _kernel_oserror *callx_remove_all_callbacks (void);

extern _kernel_oserror *callx_add_callafter (const unsigned int time,
                                             callx_handler_fn handler,
                                             void *data);

extern _kernel_oserror *callx_remove_callafter (callx_handler_fn handler,
                                                void *data);

extern _kernel_oserror *callx_remove_all_callafters (void);

extern _kernel_oserror *callx_add_callevery (const unsigned int time,
                                             callx_handler_fn handler,
                                             void *data);

extern _kernel_oserror *callx_remove_callevery (callx_handler_fn handler,
                                                void *data);

extern _kernel_oserror *callx_remove_all_calleverys (void);

#ifdef __cplusplus
}
#endif

#endif
@


1.3
log
@  * Fixed potential problem with removing an executing callback from within a
    callafter or callevery handler.
  * Performance improvements.

Detail:
  * There was a small opportunity at the start of the assembler veneer for a
    callafter or callevery to interrupt a callback that had just gone off (this
    window was only about one or two instructions).  If the callafter/callevery
    handler deleted the executing callback then once the callback resumed
    processing it would have tried to access data from the free'd callback data
    structure, and then would have tried to free this structure again.

  * Each call to add a handler used to result in malloc being called to
    allocate an internal data structure.  A few of these data structures are
    now preallocated on initialisation, hopefully avoiding the need for calls
    to malloc/free in most circumstances.

Admin:
  Tested (last summer!) using a little test-harness module, and tested today
  using AcornPOP3 test harness to fetch all the headers from my INBOX.  Seems
  to work.

  Apologies to Dan - I'd already done the 32 bit stuff but hadn't got around
  to checking this in because I wanted to do more testing.  However, I'd missed
  the fact that 32 bit PHPSEI wants a scratch register, so it wasn't in vain.

Version 0.07. Tagged as 'callx-0_07'
@
text
@d63 3
@


1.2
log
@Summary
  * Uses AsmUtils for control of interrupts.
  * Miniscule performance improvement.
Detail
  * The code in the veneer that sets up the return address before calling
    the client's handler had a redundant instruction, which has now been
    removed.  This instruction was effectively compensating for its own
    presence :).
Admin
  * Compiled and tested on a Risc PC using AcornPOP3, which uses this library.
  * Modules which use this library must now also link against AsmUtils.

Version 0.04. Tagged as 'callx-0_04'
@
text
@d41 1
@


1.1
log
@Initial revision
@
text
@a37 7
 * Define contants
 */




/* =============================================================================
d49 1
a49 1
 * Declare global variables
d52 4
a55 6



/* =============================================================================
 * Declare function prototypes
 */
d84 4
@


1.1.1.1
log
@First checkin to CVS.
@
text
@@
