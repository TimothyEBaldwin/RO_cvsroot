head	1.2;
access;
symbols
	RO_5_07:1.2
	callx-0_06:1.1.1.1
	callx-0_05:1.1.1.1
	dellis_autobuild_BaseSW:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	callx-0_04:1.1.1.1
	sforrest_daytona_appflash-0_31:1.1.1.1
	callx-0_03:1.1.1.1
	blaughto_daytona_appflash-0_30:1.1.1.1
	blaughto_daytona_appflash-0_29:1.1.1.1
	blaughto_daytona_appflash-0_28:1.1.1.1
	blaughto_daytona_appflash-0_27:1.1.1.1
	blaughto_daytona_appflash-0_26:1.1.1.1
	blaughto_daytona_appflash-0_25:1.1.1.1
	blaughto_daytona_appflash-0_24:1.1.1.1
	callx-0_02-1_1_2_3:1.1.1.1
	blaughto_daytona_appflash-0_23:1.1.1.1
	blaughto_daytona_appflash-0_21:1.1.1.1
	blaughto_daytona_appflash-0_20:1.1.1.1
	blaughto_daytona_appflash-0_19:1.1.1.1
	callx-0_02-1_1_2_2:1.1.1.1
	blaughto_daytona_appflash-0_18:1.1.1.1
	blaughto_callx-0_01:1.1.1.1
	initial:1.1.1.1
	Daytona:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2001.03.07.11.39.45;	author blaughto;	state dead;
branches;
next	1.1;

1.1
date	98.02.27.16.45.20;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.27.16.45.20;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  * Fixed potential problem with removing an executing callback from within a
    callafter or callevery handler.
  * Performance improvements.

Detail:
  * There was a small opportunity at the start of the assembler veneer for a
    callafter or callevery to interrupt a callback that had just gone off (this
    window was only about one or two instructions).  If the callafter/callevery
    handler deleted the executing callback then once the callback resumed
    processing it would have tried to access data from the free'd callback data
    structure, and then would have tried to free this structure again.

  * Each call to add a handler used to result in malloc being called to
    allocate an internal data structure.  A few of these data structures are
    now preallocated on initialisation, hopefully avoiding the need for calls
    to malloc/free in most circumstances.

Admin:
  Tested (last summer!) using a little test-harness module, and tested today
  using AcornPOP3 test harness to fetch all the headers from my INBOX.  Seems
  to work.

  Apologies to Dan - I'd already done the 32 bit stuff but hadn't got around
  to checking this in because I wanted to do more testing.  However, I'd missed
  the fact that 32 bit PHPSEI wants a scratch register, so it wasn't in vain.

Version 0.07. Tagged as 'callx-0_07'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    error.h
 * Purpose: Error handling
 * Author:  Ben Laughton
 * History: 1997-08-19: BAL: created
 */

#ifndef DaytonaHW_error_h
#define DaytonaHW_error_h

/* =============================================================================
 * Include header files
 */

/* CLib */
#include <stddef.h>




/* =============================================================================
 * Define contants
 */




/* =============================================================================
 * Define macros
 */

#define M_e_check_return(e) \
if ((e) != NULL) \
{ \
    return e; \
}




/* =============================================================================
 * Declare global variables
 */




/* =============================================================================
 * Declare function prototypes
 */

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@First checkin to CVS.
@
text
@@
