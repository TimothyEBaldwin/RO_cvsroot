head	1.3;
access;
symbols
	PRISMLib-0_03:1.2
	PRISMLib-0_02:1.2
	PRISMLib-0_01:1.1;
locks; strict;
comment	@# @;


1.3
date	2005.04.14.16.06.08;	author ahodgkin;	state dead;
branches;
next	1.2;

1.2
date	2005.04.13.09.28.43;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.11.15.09.38;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Overhaul to improve library consistency and support new naming
  conventions.
Detail:
  Extensive set of changes to follow naming conventions covered in
  PRISM/Docs/Naming and introduce a better library structure with
  more consistent file naming (important for exported headers) as
  well as function names (important for ease of use).
Admin:
  Requires header export of PRISM 0.21 or later. Used in many other
  modules tested on an Iyonix as part of a wider set of changes.

Version 0.04. Tagged as 'PRISMLib-0_04'
@
text
@/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Lists.c                                           */
/*          (C) 2005 Tematic Ltd.                             */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage doubly-linked lists. The structures given  */
/*          must have a next and prev word as the first and   */
/*          second items respectively; the list is recorded   */
/*          through a pointer to the head item.               */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 10-Mar-2005 (ADH): Imported into PRISMLib from    */
/*                             the copy in the PRISM module.  */
/**************************************************************/

#include <stdlib.h>
#include <kernel.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "PRISMLib.h"

/* Local structures */

typedef struct list
{
  struct list * next;
  struct list * prev;

  /* ... */
}
list;

/**************************************************************/
/* prismlib_l_add_to_head()                                   */
/*                                                            */
/* Add an item to the head of the given list.                 */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer,       */
/*             updated on exit;                               */
/*                                                            */
/*             Size of the item to add in bytes.              */
/**************************************************************/

_kernel_oserror * prismlib_l_add_to_head(void ** head, const size_t size)
{
  list ** lhead = (list **) head;
  list  * new;

  dprintf(("Lists", "prismlib_l_add_to_head: Called (head = &%08X, size = %d)\n", (int) head, size));

  if (head == NULL)
  {
    return prismlib_make_error(prism_ERROR_INVALID_PARAMETERS,
                               1,
                               "prismlib_l_add_to_head");
  }

  new = calloc(size, 1);
  if (new == NULL) return prismlib_make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);

  dprintf(("Lists", "prismlib_l_add_to_head: New item is at &%08X\n", (int) new));

  if (*lhead != NULL)
  {
    (*lhead)->prev = new;
    new->next      = *lhead;
  }

  *lhead = new;

  dprintf(("Lists", "prismlib_l_add_to_head: Successful\n"));

  return NULL;
}

/**************************************************************/
/* prismlib_l_add_to_tail()                                   */
/*                                                            */
/* Add an item to the tail of the given list.                 */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer, may   */
/*             be updated on exit;                            */
/*                                                            */
/*             Pointer to a void *, updated to point to the   */
/*             new item on exit;                              */
/*                                                            */
/*             Size of the item to add.                       */
/**************************************************************/

_kernel_oserror * prismlib_l_add_to_tail(void ** head, void ** added, const size_t size)
{
  list ** lhead = (list **) head;
  list  * new;

  dprintf(("Lists", "prismlib_l_add_to_tail: Called (head = &%08X, size = %d)\n", (int) head, size));

  if (head == NULL || added == NULL)
  {
    return prismlib_make_error(prism_ERROR_INVALID_PARAMETERS,
                               1,
                               "prismlib_l_add_to_tail");
  }

  new = calloc(size, 1);
  if (new == NULL) return prismlib_make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);

  dprintf(("Lists", "prismlib_l_add_to_tail: New item is at &%08X\n", (int) new));

  if (*lhead != NULL)
  {
    list * tail;

    for (tail = (*lhead); tail->next != NULL; tail = tail->next);

    tail->next = new;
    new->prev  = tail;
  }
  else
  {
    *lhead = new;
  }

  *added = new;

  dprintf(("Lists", "prismlib_l_add_to_tail: Successful\n"));

  return NULL;
}

/**************************************************************/
/* prismlib_l_add_at_given()                                  */
/*                                                            */
/* Add an item before the given one in the list.              */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer, may   */
/*             be updated on exit;                            */
/*                                                            */
/*             Pointer to a void *, updated to point to the   */
/*             new item on exit;                              */
/*                                                            */
/*             Pointer to item to add after (or NULL to add   */
/*             at the list's tail);                           */
/*                                                            */
/*             Size of the item to add.                       */
/**************************************************************/

_kernel_oserror * prismlib_l_add_at_given(void ** head, void ** added, const void * position, const size_t size)
{
  list ** lhead = (list **) head;
  list *  lpos  = (list  *) position;
  list *  new;

  dprintf(("Lists", "prismlib_l_add_at_given: Called (head = &%08X, position = &%08X, size = %d)\n", (int) head, (int) position, size));

  if (head == NULL || added == NULL)
  {
    return prismlib_make_error(prism_ERROR_INVALID_PARAMETERS,
                               1,
                               "prismlib_l_add_at_given");
  }

  if (position == NULL) return prismlib_l_add_to_tail(head, added, size);

  new = calloc(size, 1);
  if (new == NULL) return prismlib_make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);

  dprintf(("Lists", "prismlib_l_add_at_given: New item is at &%08X\n", (int) new));

  if (lpos->prev != NULL) lpos->prev->next = new;

  new->prev  = lpos->prev;
  lpos->prev = new;
  new->next  = lpos;

  *added = new;

  if (*lhead == lpos) *lhead = new;

  dprintf(("Lists", "prismlib_l_add_at_given: Successful\n"));

  return NULL;
}

/**************************************************************/
/* prismlib_l_remove()                                        */
/*                                                            */
/* Remove an item from the given list. If the item held any   */
/* pointers to any allocated memory (apart from other list    */
/* items), that memory should be freed before calling here.   */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer, may   */
/*             be updated on exit;                            */
/*                                                            */
/*             Pointer to the item to remove.                 */
/**************************************************************/

_kernel_oserror * prismlib_l_remove(void ** head, void * item)
{
  list ** lhead = (list **) head;
  list *  litem = (list *)  item;

  dprintf(("Lists", "prismlib_l_remove: Called (head = &%08X, item = &%08X)\n", (int) head, (int) item));

  if (head == NULL || item == NULL)
  {
    return prismlib_make_error(prism_ERROR_INVALID_PARAMETERS,
                               1,
                               "prismlib_l_remove");
  }

  if (litem->next != NULL) litem->next->prev = litem->prev;
  if (litem->prev != NULL) litem->prev->next = litem->next;
  else *lhead = litem->next;

  free(litem);

  dprintf(("Lists", "prismlib_l_remove: Successful\n"));

  return NULL;
}

/**************************************************************/
/* prismlib_l_remove_all()                                    */
/*                                                            */
/* Remove all items from the given list. If the items hold    */
/* any pointers to allocated memory (apart from other list    */
/* items), that memory should be freed before calling here.   */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer,       */
/*             updated on exit to be NULL.                    */
/**************************************************************/

_kernel_oserror * prismlib_l_remove_all(void ** head)
{
  list ** lhead = (list **) head;
  list  * item;

  dprintf(("Lists", "prismlib_l_remove_all: Called (head = &%08X)\n", (int) head));

  if (head == NULL)
  {
    return prismlib_make_error(prism_ERROR_INVALID_PARAMETERS,
                               1,
                               "prismlib_l_remove_all");
  }

  while (*lhead != NULL)
  {
    item = (*lhead)->next;
    free(*lhead);
    (*lhead) = item;
  }

  dprintf(("Lists", "prismlib_l_remove_all: Successful\n"));

  return NULL;
}
@


1.2
log
@  Compilation fixes, bug fixes, new features.

Detail:
  Added prismlib_make_message() and PRISMLIB_RETERR.

  Added -Wpe in Makefile to suppress warnings about non-standard includes,
  then standardised on using <name> for any exported inclusions and
  "name" for any local inclusions.

  Removed 'restrict' keyword on function pointers as CC 559 raises this
  as an error.

  Fixed heinous bug in Mechanism.c that prevents any client from properly
  registering (and therefore properly deregistering) with PRISM.

  Corrected reason code name using underscores to one that didn't as per
  latest definitions in PRISM.h for version 0.18 of the PRISM module.

Admin:
  Tested using in-development PFC Buffer module; new functions and bug fix
  perform correctly, other sundry fixes result in source that builds.

Version 0.02. Tagged as 'PRISMLib-0_02'
@
text
@@


1.1
log
@  Initial import of PRISMLib into CVS.

Detail:
  PRISMLib provides some commonly used 'C' functions for PRISM modules.
  It is a little limited by being statically linked to a physical module
  instance, where that physical module may support multiple logical
  PRISM components; without having its own concept of sessions, no code
  that carries state data related to a particular component can be
  included. Sessions may be added in future but at the moment I see them
  as an unnecessary run-time overhead and too complex given the light-
  weight approach the library tries to take.

Admin:
  Compiled. PRISM module modified to use the library, and also compiled.
  Ran it on Iyonix - *-commands worked as expected. No other testing, but
  the code is by and large copied out of existing well tested sources.


Version 0.01. Not tagged
@
text
@d32 1
a32 2

#include "kernel.h"
d40 1
a40 1
#include "debuglib/debuglib.h"
@

