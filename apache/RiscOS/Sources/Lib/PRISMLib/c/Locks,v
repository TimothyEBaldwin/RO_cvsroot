head	1.2;
access;
symbols
	PRISMLib-0_24:1.2
	PRISMLib-0_23:1.2
	PRISMLib-0_22:1.2
	PRISMLib-0_21:1.2
	PRISMLib-0_20:1.2
	PRISMLib-0_19:1.2
	PRISMLib-0_18:1.2
	PRISMLib-0_17:1.2
	PRISMLib-0_16:1.2
	PRISMLib-0_15:1.2
	PRISMLib-0_14:1.2
	PRISMLib-0_13:1.2
	PRISMLib-0_12:1.2
	PRISMLib-0_11:1.2
	PRISMLib-0_10:1.2
	PRISMLib-0_09:1.2
	PRISMLib-0_08:1.1
	PRISMLib-0_07:1.1
	PRISMLib-0_06:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.05.06.15.44.53;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.29.10.00.22;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  New functions; bug fixes; test harness.
Detail:
  New functions added in "NRArrays.c|h". Some shared kinds of function
  pointers turned into standard types and put into "FuncTypes.h" - not
  all function pointers used throughout are there, only shared ones at
  the moment (this may change in future). New test harness showed up
  a few bugs, mostly trivial (e.g. incorrect generation of an error
  message resulting in "%0" appearing instead of a parameter).
Admin:
  Tested :-) - test harness runs to completion. See Tests/!ReadMe to
  find out which things the test harness does or does not test. The
  test harness requires BuildSys 4.35.

Version 0.09. Tagged as 'PRISMLib-0_09'
@
text
@/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Locks.c                                           */
/*          (C) 2005 Tematic Ltd.                             */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Simple lock management to help functions that     */
/*          want to handle being re-entered.                  */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 29-Apr-2005 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>

#include "Interrupts.h"

#include "Locks.h"

/**************************************************************/
/* prismlib_locks_lock()                                      */
/*                                                            */
/* Check a given lock. If unlocked, lock the item and return  */
/* 'true' to indicate success. If already locked, return      */
/* 'false' to indicate failure.                               */
/*                                                            */
/* Parameters:  Pointer to a prismlib_lock_t maintained by    */
/*              the caller.                                   */
/*                                                            */
/* Returns:     'true' if successfully now locked, 'false' if */
/*              already locked (i.e. 'false' on failure).     */
/*                                                            */
/* Re-entrancy: This function is re-entrant.                  */
/*                                                            */
/* Interrupts:  This function is interrupt-safe.              */
/*                                                            */
/* Assumes:     Execution in SVC mode.                        */
/**************************************************************/

bool prismlib_locks_lock(prismlib_lock_t * lock)
{
  /* Disable interrupts */

  PRISMLIB_SVC_INT_DISABLE;

  /* Check the lock state */

  if (lock == NULL || (lock != NULL && *lock != 0))
  {
    /* The item is locked; re-enable interrupts and return a
     * indication of the problem.
     */

    PRISMLIB_SVC_INT_RESTORE;
    return false;
  }
  else
  {
    /* Set the lock, re-enable interrupts and return an indication
     * that there is no problem.
     */

    (*lock) = 1;

    PRISMLIB_SVC_INT_RESTORE;
    return true;
  }
}

/**************************************************************/
/* prismlib_locks_unlock()                                    */
/*                                                            */
/* Check a given lock. If locked, unlock the item and return  */
/* 'true' to indicate success. If already unlocked, return    */
/* 'false' to indicate failure.                               */
/*                                                            */
/* This function is re-entrant and interrupt safe. Execution  */
/* in SVC mode is assumed.                                    */
/*                                                            */
/* Parameters:  Pointer to a prismlib_lock_t maintained by    */
/*              the caller.                                   */
/*                                                            */
/* Returns:     'true' if successfully now unlocked, 'false'  */
/*              if already unlocked (i.e. 'false' on          */
/*              failure).                                     */
/*                                                            */
/* Re-entrancy: This function is re-entrant.                  */
/*                                                            */
/* Interrupts:  This function is interrupt-safe.              */
/*                                                            */
/* Assumes:     Execution in SVC mode.                        */
/**************************************************************/

bool prismlib_locks_unlock(prismlib_lock_t * lock)
{
  /* Disable interrupts */

  PRISMLIB_SVC_INT_DISABLE;

  /* Check the lock state */

  if (lock != NULL && *lock != 0)
  {
    /* Unlock, re-enable interrupts and return an indication that
     * there is no problem.
     */

    (*lock) = 0;

    PRISMLIB_SVC_INT_RESTORE;
    return true;
  }
  else
  {
    /* The item is not locked; re-enable interrupts and return an
     * indication of the problem.
     */

    PRISMLIB_SVC_INT_RESTORE;
    return false;
  }
}
@


1.1
log
@  Clarification, correction, and new functions.
Detail:
  Clarification in NRLists.c to indicate that items are zero-initialised
  on creation. Fix to Interrupts.h which was including <kernel.h> when it
  really wanted <swis.h> (which itself includes kernel.h). New functions:
  Lock.c|h implement a (very) mundane lock system which can be used to
  defend against re-entrancy. These may well be added to with more
  sophisticated facilities over time, or removed entirely if the current
  thinking on why they are needed changes.
Admin:
  Compiles, used by PFCBuffer sources, but no run-time testing yet.

Version 0.06. Tagged as 'PRISMLib-0_06'
@
text
@d38 2
a39 2
/* true to indicate success. If already locked, return false  */
/* to indicate failure.                                       */
d41 7
a47 2
/* This function is re-entrant and interrupt safe. Execution  */
/* in SVC mode is assumed.                                    */
d49 1
a49 2
/* Parameters: Pointer to a prismlib_simple_lock_t maintained */
/*             by the caller.                                 */
d51 1
a51 2
/* Returns:    true if successfully now locked, false if      */
/*             already locked (i.e. false on failure).        */
d54 1
a54 1
bool prismlib_locks_lock(prismlib_simple_lock_t * lock)
d62 1
a62 1
  if (lock != NULL && *lock != 0)
d88 2
a89 2
/* true to indicate success. If already unlocked, return      */
/* false to indicate failure.                                 */
d94 10
a103 2
/* Parameters: Pointer to a prismlib_simple_lock_t maintained */
/*             by the caller.                                 */
d105 1
a105 2
/* Returns:    true if successfully now unlocked, false if    */
/*             already unlocked (i.e. false on failure).      */
d108 1
a108 1
bool prismlib_locks_unlock(prismlib_simple_lock_t * lock)
@

