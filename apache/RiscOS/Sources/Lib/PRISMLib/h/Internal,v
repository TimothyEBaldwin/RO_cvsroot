head	1.6;
access;
symbols
	PRISMLib-0_24:1.6
	PRISMLib-0_23:1.6
	PRISMLib-0_22:1.6
	PRISMLib-0_21:1.5
	PRISMLib-0_20:1.5
	PRISMLib-0_19:1.5
	PRISMLib-0_18:1.5
	PRISMLib-0_17:1.5
	PRISMLib-0_16:1.5
	PRISMLib-0_15:1.4
	PRISMLib-0_14:1.4
	PRISMLib-0_13:1.4
	PRISMLib-0_12:1.3
	PRISMLib-0_11:1.2
	PRISMLib-0_10:1.2
	PRISMLib-0_09:1.2
	PRISMLib-0_08:1.1
	PRISMLib-0_07:1.1;
locks; strict;
comment	@# @;


1.6
date	2007.09.13.18.29.41;	author srevill;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.16.09.46.04;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.10.10.56.16;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.09.13.06.31;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.06.15.44.53;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.29.16.42.29;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  Tidy-up.
Detail:
  Made cvs version of sources match Batch One release.
Admin:
  Removed prismlib_internal_client_t structure from h.Internal.

Version 0.22. Tagged as 'PRISMLib-0_22'
@
text
@/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Internal.h                                        */
/*          (C) 2005 Tematic Ltd.                             */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Internal definitions for PRISMLib. Not exported.  */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 29-Apr-2005 (ADH): Created.                       */
/**************************************************************/

#ifndef PRISMLIB_INTERNAL_H
  #define PRISMLIB_INTERNAL_H

  /* External inclusions */

  #include <stdint.h>

  #include <PRISM/PRISM.h>

  /* PRISMLib inclusions */

  #include <PRISMLib/FuncTypes.h>

  /* Structure used by the NRArrays.c|h routines to
   * represent an array internally
   */

  struct prismlib_internal_nrarray
  {
    int                         n;
    size_t                      elem_size;
    void                      * data;
    prismlib_realloc_fn_ptr_t   realloc;
    prismlib_free_fn_ptr_t      free;
  };

  /* Structure used by the JobQueue.c|h routines to
   * represent a job queue internally
   */

  typedef struct prismlib_internal_jobqueue
  {
    size_t     entries;
    size_t     words_per_entry;

    size_t     write;
    size_t     read;
    size_t     used;

    uint32_t * queue;
  }
  prismlib_internal_jobqueue_t;

#endif /* PRISMLIB_INTERNAL_H */

/* End of file */
@


1.5
log
@  More re-entrancy, new job queue functions.
Detail:
  Errors.c is now fully re-entrant. New JobQueue.[c|h] functions, fully
  tested in the test harness, provide a fixed length queue of a fixed
  number of words per queue entry (specified at creation time). Done here
  rather than through a SWI API in e.g. PRISM as the addition function is
  inherently variable argument based, which does not translate well to
  SWIs (the alternative is to pass a pointer to a constructed queue entry
  which has to be copied in place - fiddly and less efficient). New
  function in Mechanism.h to send a PRISM service call, but this service
  call is looking like it'll be removed due to wider architecture
  revisions anyway - recommendation is to not call this new function as
  it will probably be removed soon.
Admin:
  Test harness updated to cover job queue functions.

Version 0.16. Tagged as 'PRISMLib-0_16'
@
text
@a39 24
  /* Structure used to represent clients */

  typedef struct prismlib_internal_client
  {
    /* Linked list handling */

    struct prismlib_internal_client * next;
    struct prismlib_internal_client * prev;

    /* Data for Clients routines */

    prism_id_t                        prism_id;

    /* Data for Handles routines */

    uint32_t                        * handles_array;
    uint32_t                          handles_max;

    /* IF ADDING OR MODIFYING ENTRIES, BE SURE TO UPDATE
     * FUNCTION "clients_shutdown()" IN "Clients.c" TOO!
     */
  }
  prismlib_internal_client_t;

@


1.4
log
@  Unavoidable API chanGe to NRArrays. Debug test harness build option.
Detail:
  Function was taking an optional pointer to a routine that acted in the
  same way as 'malloc'. What it really needed was a routine that acted
  in the same way as 'realloc'. Meanwhile, the test harness can be built
  to run under DDT to pinpoint the location of a failure easily.
Admin:
  Test harness updated. Debug test harness build requires BuildSys 4.37.

Version 0.13. Tagged as 'PRISMLib-0_13'
@
text
@d77 17
@


1.3
log
@  Two bug fixes.
Detail:
  NRArrays, when asked to create an array with no initial items, would
  try to allocate zero bytes with malloc, get NULL back, and assume this
  represented an out of memory condition. It would then free the partial
  array structure, but since it hadn't filled in the field for the item
  it had just been mallocing yet, would fail as free() operated on some
  undefined value. Fixed: (1) sets field to NULL initially, (2) does not
  try to malloc zero byte quantities in the first place.

  The Handles system didn't quite work; it assumed return values for
  the handle array referred to array size rather than maximum handle
  value. As a result, the Clients system, when shutting down a client
  with active handles, got stuck in an infinite loop, repeatedly trying
  to release the penultimate handle rather than the last handle. Fixed in
  Clients.c with the offending structure member renamed to make its use
  more clear elsewhere.
Admin:
  Showed up whilst writing PFCBuffer. Test harness updated to catch both,
  though it tends to 'get away with' the free() of an uninitialised value,
  so frequently misses this bug even if present. The module no longer
  shows the failures it did, though, so both bugs appear to be fixed.

Version 0.12. Tagged as 'PRISMLib-0_12'
@
text
@d70 5
a74 5
    int                        n;
    size_t                     elem_size;
    void                     * data;
    prismlib_malloc_fn_ptr_t   alloc;
    prismlib_free_fn_ptr_t     free;
@


1.2
log
@  New functions; bug fixes; test harness.
Detail:
  New functions added in "NRArrays.c|h". Some shared kinds of function
  pointers turned into standard types and put into "FuncTypes.h" - not
  all function pointers used throughout are there, only shared ones at
  the moment (this may change in future). New test harness showed up
  a few bugs, mostly trivial (e.g. incorrect generation of an error
  message resulting in "%0" appearing instead of a parameter).
Admin:
  Tested :-) - test harness runs to completion. See Tests/!ReadMe to
  find out which things the test harness does or does not test. The
  test harness requires BuildSys 4.35.

Version 0.09. Tagged as 'PRISMLib-0_09'
@
text
@d56 1
a56 1
    uint32_t                          handles_entries;
@


1.1
log
@  New functions added.
Detail:
  Clients functions: Provide client registration with PRISMLib.
  Handles functions: Provide abstraction of PRISM_Allocate|ForgetHandle.
Admin:
  Builds, but no testing whatsoever. Work in progress.

Version 0.07. Tagged as 'PRISMLib-0_07'
@
text
@d36 4
d64 13
@

