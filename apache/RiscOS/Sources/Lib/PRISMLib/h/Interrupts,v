head	1.3;
access;
symbols
	PRISMLib-0_24:1.3
	PRISMLib-0_23:1.3
	PRISMLib-0_22:1.3
	PRISMLib-0_21:1.3
	PRISMLib-0_20:1.3
	PRISMLib-0_19:1.3
	PRISMLib-0_18:1.3
	PRISMLib-0_17:1.2
	PRISMLib-0_16:1.2
	PRISMLib-0_15:1.2
	PRISMLib-0_14:1.2
	PRISMLib-0_13:1.2
	PRISMLib-0_12:1.2
	PRISMLib-0_11:1.2
	PRISMLib-0_10:1.2
	PRISMLib-0_09:1.2
	PRISMLib-0_08:1.2
	PRISMLib-0_07:1.2
	PRISMLib-0_06:1.2
	PRISMLib-0_05:1.1;
locks; strict;
comment	@# @;


1.3
date	2005.07.19.15.33.59;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.29.10.00.22;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.29.08.47.41;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Added CLI and some interrupt routines; Doxygen comments.
Detail:
  Added CLI support routines in CLI.[c|h]. Added ENABLE macros to
  Interrupts.h. Some recently modified header files include Doxygen
  comments now; a configuration file, "Doxyfile", is included to
  generate documentation from files which include it. By default
  this causes output to go to "Docs.Doxygen" - you will probably
  need to create the "Docs" directory by hand first.
Admin:
  Test harness not updated; ReadMe has been. The CLI routines are
  tested from use in other components, so are not explicitly tested
  in the local test harness.

Version 0.18. Tagged as 'PRISMLib-0_18'
@
text
@/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Interrupts.h                                      */
/*          (C) 2005 Castle Technology Ltd                    */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Simple macros to turn interrupts on and off.      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 29-Apr-2005 (ADH): Created.                       */
/**************************************************************/

#ifndef PRISMLIB_INTERRUPTS_H
  #define PRISMLIB_INTERRUPTS_H

  /* External inclusions */

  #include <stdbool.h>
  #include <swis.h>

  /* Support functions - the __swi() macro is a hint
   * to the Norcroft compiler that the function is
   * instead just a single SWI call.
   *
   * Do not call these functions directly. Instead,
   * use the macros PRISMLIB_USR_INT_DISABLE and
   * PRISMLIB_USR_INT_RESTORE.
   */

  __swi(OS_IntOn)  void prismlib_interrupts_inline_inton  (void);
  __swi(OS_IntOff) void prismlib_interrupts_inline_intoff (void);

  /* PRISMLIB_SVC_INT_DISABLE turns off interrupts,
   * recording the previous state of interrupts, in
   * a manner suitable for code running in SVC mode.
   * It relies upon setting a local scope variable
   * "prismlib_ints_were_off". The previous state of
   * interrupts should be restored using macro
   * PRISMLIB_SVC_INT_RESTORE.
   *
   * Example use:
   *
   *   PRISMLIB_SVC_INT_DISABLE;
   */

  #define PRISMLIB_SVC_INT_DISABLE \
          int prismlib_ints_were_off = _kernel_irqs_disabled(); \
          _kernel_irqs_off()

  /* PRISMLIB_SVC_INT_ENABLE turns on interrupts,
   * recording the previous state of interrupts, in
   * a manner suitable for code running in SVC mode.
   * It relies upon setting a local scope variable
   * "prismlib_ints_were_off". The previous state of
   * interrupts should be restored using macro
   * PRISMLIB_SVC_INT_RESTORE.
   *
   * Always take extreme care when forcibly enabling
   * interrupts: callers of the software component
   * doing this must be aware that interrupts may be
   * switched on.
   *
   * Example use:
   *
   *   PRISMLIB_SVC_INT_ENABLE;
   */

  #define PRISMLIB_SVC_INT_ENABLE \
          int prismlib_ints_were_off = _kernel_irqs_disabled(); \
          _kernel_irqs_on()

  /* PRISMLIB_SVC_INT_RESTORE restores interrupts to
   * the previous state, recorded when using macro
   * PRISMLIB_SVC_INT_[DISABLE|ENABLE], in a manner
   * suitable for code running in SVC mode. The
   * macro relies upon local scope boolean
   * "prismlib_ints_were_off".
   *
   * Example use:
   *
   *   PRISMLIB_SVC_INT_RESTORE;
   */

  #define PRISMLIB_SVC_INT_RESTORE \
          if (prismlib_ints_were_off == 0) _kernel_irqs_on(); \
          else                             _kernel_irqs_off()

  /* PRISMLIB_USR_INT_DISABLE turns off interrupts,
   * recording the previous state of interrupts, in
   * a manner suitable for code running in USR mode.
   * It relies upon setting a local scope variable
   * "prismlib_ints_were_off". The previous state of
   * interrupts should be restored using macro
   * PRISMLIB_USR_INT_RESTORE.
   *
   * Example use:
   *
   *   PRISMLIB_USR_INT_DISABLE;
   */

  #define PRISMLIB_USR_INT_DISABLE \
          int prismlib_ints_were_off = _kernel_irqs_disabled(); \
          prismlib_interrupts_inline_intoff()

  /* PRISMLIB_USR_INT_ENABLE turns on interrupts,
   * recording the previous state of interrupts, in
   * a manner suitable for code running in USR mode.
   * It relies upon setting a local scope variable
   * "prismlib_ints_were_off". The previous state of
   * interrupts should be restored using macro
   * PRISMLIB_USR_INT_RESTORE.
   *
   * Always take extreme care when forcibly enabling
   * interrupts: callers of the software component
   * doing this must be aware that interrupts may be
   * switched on.
   *
   * Example use:
   *
   *   PRISMLIB_USR_INT_ENABLE;
   */

  #define PRISMLIB_USR_INT_ENABLE \
          int prismlib_ints_were_off = _kernel_irqs_disabled(); \
          prismlib_interrupts_inline_inton()

  /* PRISMLIB_USR_INT_RESTORE restores interrupts to
   * the previous state, recorded when using macro
   * PRISMLIB_USR_INT_[DISABLE|ENABLE], in a manner
   * suitable for code running in USR mode. The
   * macro relies upon local scope boolean
   * "prismlib_ints_were_off".
   *
   * Example use:
   *
   *   PRISMLIB_USR_INT_RESTORE;
   */

  #define PRISMLIB_USR_INT_RESTORE \
          if (prismlib_ints_were_off == 0) prismlib_interrupts_inline_inton(); \
          else                             prismlib_interrupts_inline_intoff()

#endif /* PRISMLIB_INTERRUPTS_H */

/* End of file */
@


1.2
log
@  Clarification, correction, and new functions.
Detail:
  Clarification in NRLists.c to indicate that items are zero-initialised
  on creation. Fix to Interrupts.h which was including <kernel.h> when it
  really wanted <swis.h> (which itself includes kernel.h). New functions:
  Lock.c|h implement a (very) mundane lock system which can be used to
  defend against re-entrancy. These may well be added to with more
  sophisticated facilities over time, or removed entirely if the current
  thinking on why they are needed changes.
Admin:
  Compiles, used by PFCBuffer sources, but no run-time testing yet.

Version 0.06. Tagged as 'PRISMLib-0_06'
@
text
@d51 3
a53 1
   * "prismlib_ints_were_off".
d64 27
a90 4
  /* PRISMLIB_SVC_INT_RESTORE restores interrupts to the
   * state recorded prior to using PRISMLIB_INT_DISABLE
   * in a manner suitable for code running in SVC mode.
   * The macro relies upon access to local scope boolean
d99 2
a100 1
          if (prismlib_ints_were_off == 0) _kernel_irqs_on()
d106 3
a108 1
   * "prismlib_ints_were_off".
d117 23
a139 1
          prismlib_interrupts_inline_intoff();
d141 5
a145 4
  /* PRISMLIB_USR_INT_RESTORE restores interrupts to the
   * state recorded prior to using PRISMLIB_INT_DISABLE
   * in a manner suitable for code running in USR mode.
   * The macro relies upon access to local scope boolean
d154 2
a155 1
          if (prismlib_ints_were_off == 0) prismlib_interrupts_inline_inton();
@


1.1
log
@  New header file; 'restrict' added in NRLists.
Detail:
  NRLists.c|h can't use 'restrict' too much as it does create aliases to
  quite a few of the function parameters, but here and there it applies,
  so added it. New header file is "Interrupts.h", containing four simple
  macros to turn interrupts on and off. Makes use of Norcroft optimisation
  hack "__swi" as in RLists.c, which I don't like, but does result in code
  that's about as simple as it can be.
Admin:
  Compiled through test use in PFCBuffer's in-prorgress Session.c; DecAOF
  output from the resulting object file looks about right, but no run-time
  testing.

Version 0.05. Tagged as 'PRISMLib-0_05'
@
text
@d33 1
a33 1
  #include <kernel.h>
@

