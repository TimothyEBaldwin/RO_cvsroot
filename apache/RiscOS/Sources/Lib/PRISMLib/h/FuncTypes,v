head	1.3;
access;
symbols
	PRISMLib-0_24:1.3
	PRISMLib-0_23:1.3
	PRISMLib-0_22:1.3
	PRISMLib-0_21:1.3
	PRISMLib-0_20:1.3
	PRISMLib-0_19:1.3
	PRISMLib-0_18:1.3
	PRISMLib-0_17:1.2
	PRISMLib-0_16:1.2
	PRISMLib-0_15:1.2
	PRISMLib-0_14:1.2
	PRISMLib-0_13:1.2
	PRISMLib-0_12:1.1
	PRISMLib-0_11:1.1
	PRISMLib-0_10:1.1
	PRISMLib-0_09:1.1;
locks; strict;
comment	@# @;


1.3
date	2005.07.19.15.33.59;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.10.10.56.16;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.06.15.44.53;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Added CLI and some interrupt routines; Doxygen comments.
Detail:
  Added CLI support routines in CLI.[c|h]. Added ENABLE macros to
  Interrupts.h. Some recently modified header files include Doxygen
  comments now; a configuration file, "Doxyfile", is included to
  generate documentation from files which include it. By default
  this causes output to go to "Docs.Doxygen" - you will probably
  need to create the "Docs" directory by hand first.
Admin:
  Test harness not updated; ReadMe has been. The CLI routines are
  tested from use in other components, so are not explicitly tested
  in the local test harness.

Version 0.18. Tagged as 'PRISMLib-0_18'
@
text
@/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/*! \file FuncTypes
 *
 * (C) 2005 Castle Technology Ltd. All rights reserved.
 *
 * \brief  Function pointer types, used by various PRISMLib
 *         interfaces.
 *
 * \par    Author:
 *         A.D.Hodgkinson.
 *
 * \par    History:
 *
 *         - 06-May-2005 (ADH): Created.
 */
/**************************************************************/

#ifndef PRISMLIB_FUNCTYPES_H
  #define PRISMLIB_FUNCTYPES_H

  /* External inclusions */

  #include <stdlib.h>
  #include <stdbool.h>

  /// \name Memory management
  ///
  /// Function types for memory management.

  /************************************************************/
  /*@@{*/  /* (Magic Doxygen comment to group following items) */
  /************************************************************/

  /*! Type defining a pointer to a function to use in place of
   *  standard C library <code>malloc</code>.
   *
   *  \param  size_t  Number of bytes to allocate.
   *
   *  \return Pointer to allocated block or NULL on failure.
   *
   *  \par    Re-entrancy:
   *          The function is not expected to be re-entrant.
   *
   *  \par    Interrupts:
   *          The function may be called with interrupts on or
   *          off. Interrupt status may be changed during the
   *          function's execution, but the state on entry must
   *          be restored on exit.
   */

  typedef void * (*prismlib_malloc_fn_ptr_t) (size_t /*size*/);

  /*! Type defining a pointer to a function to use in place of
   *  standard C library <code>realloc</code>.
   *
   *  \param  void*   Pointer to base of block to resize.
   *  \param  size_t  Number of bytes to allocate.
   *
   *  \return Pointer to resized block or NULL on failure.
   *
   *  \par    Re-entrancy:
   *          The function is not expected to be re-entrant.
   *
   *  \par    Interrupts:
   *          The function may be called with interrupts on or
   *          off. Interrupt status may be changed during the
   *          function's execution, but the state on entry must
   *          be restored on exit.
   */

  typedef void * (*prismlib_realloc_fn_ptr_t)
                 (
                   void   * /*ptr*/,
                   size_t   /*size*/
                 );

  /*! Type defining a pointer to a function to use in place of
   *  standard C library <code>free</code>.
   *
   *  \param  void*  Pointer to base of block to free.
   *
   *  \par    Re-entrancy:
   *          The function is not expected to be re-entrant.
   *
   *  \par    Interrupts:
   *          The function may be called with interrupts on or
   *          off. Interrupt status may be changed during the
   *          function's execution, but the state on entry must
   *          be restored on exit.
   */

  typedef void (*prismlib_free_fn_ptr_t) (void * /*ptr*/);

  /************************************************************/
  /*@@}*/  /* (Magic Doxygen comment to end grouping of items) */
  /************************************************************/

  /// \name Data management
  ///
  /// Function types for data management.

  /************************************************************/
  /*@@{*/  /* (Magic Doxygen comment to group following items) */
  /************************************************************/

  /*! Type defining a pointer to a comparison function to pass
   *  on to functions such as standard C library <code>qsort</code>
   *  and <code>bsearch</code>.
   *
   * The precise use of the function depends upon the API to
   * which a pointer to it is passed, and therefore the context
   * in which it is called.
   *
   * \param  void*  Pointer to a first object in a list.
   * \param  void*  Pointer to a second object in a list.
   *
   * \return Zero if the items match, greater than zero if the
   *         first object is logically greater than the second,
   *         or less than zero if the first object is logically
   *         lesser than the second.
   *
   * \par    Re-entrancy:
   *         The function is not expected to be re-entrant.
   *
   * \par    Interrupts:
   *         The function may be called with interrupts on or
   *         off. Interrupt status may be changed during the
   *         function's execution, but the state on entry must
   *         be restored on exit.
   *
   * \see    prismlib_sort_fn_ptr_t
   */

  typedef int (*prismlib_compare_fn_ptr_t)
              (
                const void * /*first*/,
                const void * /*second*/
              );

  /*! Type defining a pointer similar to the compare function
   *  FuncTypes::prismlib_compare_fn_ptr_t, but intended entirely
   *  for sorting operations.
   *
   * Note the <code>restrict</code> specifiers on the parameters;
   * the pointers passed into the function cannot be aliased.
   *
   * The precise use of the function depends upon the API to
   * which a pointer to it is passed, and therefore the context
   * in which it is called.
   *
   * \param  void*  Pointer to a first object in a list.
   * \param  void*  Pointer to a second object in a list.
   *
   * \return <code>true</code> if the first object should
   *         logically appear after (later in a list than) the
   *         second object, else <code>false</code>.
   *
   * \par    Re-entrancy:
   *         The function is not expected to be re-entrant.
   *
   * \par    Interrupts:
   *         The function may be called with interrupts on or
   *         off. Interrupt status may be changed during the
   *         function's execution, but the state on entry must
   *         be restored on exit.
   *
   * \see    prismlib_compare_fn_ptr_t
   */

  typedef bool (*prismlib_sort_fn_ptr_t)
               (
                 const void * restrict /*first*/,
                 const void * restrict /*second*/
               );

  /************************************************************/
  /*@@}*/  /* (Magic Doxygen comment to end grouping of items) */
  /************************************************************/

  /// \name Event handling
  ///
  /// Function types for event handling.

  /************************************************************/
  /*@@{*/  /* (Magic Doxygen comment to group following items) */
  /************************************************************/

  /*! Type defining a pointer to a function called on some event,
   *  such as removal of an item from a re-entrant list (see
   *  RLists.h).
   *
   * The precise use of the function depends upon the API to
   * which a pointer to it is passed, and therefore the context
   * in which it is called.
   *
   * \param  void*  Pointer to an object related to the event.
   *
   * \par    Re-entrancy:
   *         The function is not expected to be re-entrant.
   *
   * \par    Interrupts:
   *         The function may be called with interrupts on or
   *         off. Interrupt status may be changed during the
   *         function's execution, but the state on entry must
   *         be restored on exit.
   *
   * \see    RLists.h
   */

  typedef void (*prismlib_onevent_fn_ptr_t) (void * /*call*/);

  /************************************************************/
  /*@@}*/  /* (Magic Doxygen comment to end grouping of items) */
  /************************************************************/

  /// \name Star command output
  ///
  /// Function types to help with star command output.

  /************************************************************/
  /*@@{*/  /* (Magic Doxygen comment to group following items) */
  /************************************************************/

  /*! Type defining a pointer to a function used to iterate over
   *  a list.
   *
   * The function takes a pointer to a pointer to an item in a
   * linked list or array, and updates it to point to the next
   * item in the list or array. For the first call, the
   * pointed-to value will be <code>NULL</code> on entry. After
   * the last item, the pointed-to value must be updated to
   * <code>NULL</code> on exit.
   *
   * \param  void**  Pointer to last returned item or
   *                 <code>NULL</code> on first call, updated on
   *                 exit with pointer to next item or
   *                 <code>NULL</code> when there are no more.
   *
   * \par    Re-entrancy:
   *         The function is not expected to be re-entrant.
   *
   * \par    Interrupts:
   *         The function may be called with interrupts on or
   *         off. Interrupt status may be changed during the
   *         function's execution, but the state on entry must
   *         be restored on exit.
   */

  typedef void (*prismlib_cli_iterate_fn_ptr_t)
               (
                 void ** restrict /*item*/
               );

  /*! Type defining a pointer to a function that prints out
   *  a known series of values according to a known format
   *  string.
   *
   * The CLI output routines will use an iterator function
   * (see FuncTypes::prismlib_cli_iterate_fn_ptr_t) to run
   * through a list of structures, then call this output
   * function to show the brief one line description of the
   * item. The function must know what data from the given
   * item to show using the given format string, because the
   * top level call used to invoke the output routines was
   * part of the same wider body of code.
   *
   * \param  void*  Pointer to the item to describe, cast to
   *                <code>void *</code>.
   * \param  char*  Pointer to the format string.
   *
   * \par    Re-entrancy:
   *         The function is not expected to be re-entrant.
   *
   * \par    Interrupts:
   *         The function may be called with interrupts on or
   *         off. Interrupt status may be changed during the
   *         function's execution, but the state on entry must
   *         be restored on exit.
   */

  typedef void (*prismlib_cli_numbers_fn_ptr_t)
               (
                 void       * restrict /*item*/,
                 const char *          /*format*/
               );

  /*! Type defining a pointer to a function that prints out
   *  extended information about a given item at a given indent
   *  level.
   *
   * The function takes a pointer to some structure, cast to
   * <code>void *</code>, and an indentation value from 0 upwards.
   * It should print textual information related to the structure
   * at the given indent level (CLI::prismlib_cli_indent() will
   * help here). The actual type of the given structure is assumed
   * within the function; the function will only be called with a
   * structure of the correct type. The top level call used to
   * invoke the output routines is usually part of the same wider
   * body of code as the implementatino of the descriptor function
   * which allows the latter to know what kind of item it has been
   * passed.
   *
   * \param  void*   Pointer to the item to describe, cast to
   *                 <code>void *</code>.
   * \param  size_t  Number of spaces from the left of the
   *                 screen by which to indent the description.
   *
   * \par    Re-entrancy:
   *         The function is not expected to be re-entrant.
   *
   * \par    Interrupts:
   *         The function may be called with interrupts on or
   *         off. Interrupt status may be changed during the
   *         function's execution, but the state on entry must
   *         be restored on exit.
   */

  typedef _kernel_oserror * (*prismlib_cli_describe_fn_ptr_t)
                            (
                              void   * restrict /*item*/,
                              size_t            /*indent*/
                            );

  /************************************************************/
  /*@@}*/  /* (Magic Doxygen comment to end grouping of items) */
  /************************************************************/

#endif /* PRISMLIB_FUNCTYPES_H */

/* End of file */
@


1.2
log
@  Unavoidable API chanGe to NRArrays. Debug test harness build option.
Detail:
  Function was taking an optional pointer to a routine that acted in the
  same way as 'malloc'. What it really needed was a routine that acted
  in the same way as 'realloc'. Meanwhile, the test harness can be built
  to run under DDT to pinpoint the location of a failure easily.
Admin:
  Test harness updated. Debug test harness build requires BuildSys 4.37.

Version 0.13. Tagged as 'PRISMLib-0_13'
@
text
@d16 14
a29 10
/* File:    FuncTypes.h                                       */
/*          (C) 2005 Tematic Ltd.                             */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Function pointer types, used by various PRISMLib  */
/*          interfaces.                                       */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 06-May-2005 (ADH): Created.                       */
d40 14
a53 2
  /* Type defining a pointer to a function to use in place of
   * standard C library 'malloc'.
d55 2
a56 1
   * Parameters: Number of bytes to allocate
d58 5
a62 1
   * Returns:    Pointer to block or NULL on failure
d67 2
a68 2
  /* Type defining a pointer to a function to use in place of
   * standard C library 'realloc'.
d70 2
a71 1
   * Parameters: Number of bytes to allocate
d73 10
a82 1
   * Returns:    Pointer to block or NULL on failure
d91 7
a97 2
  /* Type defining a pointer to a function to use in place of
   * standard C library 'free'
d99 5
a103 1
   * Parameters: Pointer to block
d108 15
a122 3
  /* Type defining a pointer to a comparison function to pass
   * on to functions such as standard C library 'qsort' and
   * 'bsearch'.
d128 2
a129 2
   * Parameters: Pointer to a first object in a list;
   *             Pointer to a second object in a list.
d131 15
a145 4
   * Returns:    Zero if the items match, greater than zero if the
   *             first object is logically greater than the second,
   *             or less than zero if the first object is logically
   *             lesser than the second.
d150 2
a151 2
                const void *,
                const void *
d154 6
a159 4
  /* Type defining a pointer similar to the compare function
   * above, but intended entirely for sorting operations. Note
   * the 'restrict' specifiers on the parameters - the pointers
   * passed into the function cannot be aliased.
d165 2
a166 2
   * Parameters: Pointer to a first object in a list;
   *             Pointer to a second object in a list.
d168 12
a179 3
   * Returns:    'true' if the first object should logically
   *             appear after (later in a list than) the second
   *             object, else 'false'.
d181 1
d186 2
a187 2
                 const void * restrict,
                 const void * restrict
d190 15
a204 3
  /* Type defining a pointer to a function called on some event,
   * such as removal of an item from a re-entrant list (see
   * RLists.h).
d210 120
a329 1
   * Parameters: Pointer to an object related to the event.
d332 9
a340 1
  typedef void (*prismlib_onevent_fn_ptr_t) (void *);
@


1.1
log
@  New functions; bug fixes; test harness.
Detail:
  New functions added in "NRArrays.c|h". Some shared kinds of function
  pointers turned into standard types and put into "FuncTypes.h" - not
  all function pointers used throughout are there, only shared ones at
  the moment (this may change in future). New test harness showed up
  a few bugs, mostly trivial (e.g. incorrect generation of an error
  message resulting in "%0" appearing instead of a parameter).
Admin:
  Tested :-) - test harness runs to completion. See Tests/!ReadMe to
  find out which things the test harness does or does not test. The
  test harness requires BuildSys 4.35.

Version 0.09. Tagged as 'PRISMLib-0_09'
@
text
@d47 14
@

