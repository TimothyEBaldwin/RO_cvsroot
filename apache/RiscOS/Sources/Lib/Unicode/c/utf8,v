head	1.10;
access;
symbols
	Unicode-0_63:1.10
	Unicode-0_62:1.10
	Unicode-0_61:1.10
	Unicode-0_60:1.10
	Unicode-0_59:1.10
	Unicode-0_58:1.10
	Unicode-0_57:1.10
	Unicode-0_56:1.10
	Unicode-0_55:1.10
	Unicode-0_54:1.10
	RO_5_07:1.10
	Unicode-0_53:1.10
	Unicode-0_52:1.10
	Unicode-0_51:1.10
	Unicode-0_50:1.10
	Unicode-0_49:1.10
	Unicode-0_48:1.10
	Unicode-0_47:1.9
	Unicode-0_46:1.8
	Unicode-0_45:1.7
	dellis_autobuild_BaseSW:1.6
	sbrodie_sedwards_16Mar2000:1.6
	Unicode-0_44:1.6
	dcotton_autobuild_BaseSW:1.8
	Unicode-0_43:1.6
	Unicode-0_42:1.6
	Unicode-0_41:1.6
	Unicode-0_40:1.5
	Unicode-0_39:1.5
	Unicode-0_38:1.5
	Unicode-0_37:1.5
	Unicode-0_36:1.5
	Unicode-0_35:1.5
	Unicode-0_34:1.5
	Unicode-0_33:1.5
	Unicode-0_32:1.4
	Unicode-0_31:1.4
	Unicode-0_30:1.4
	Unicode-0_29:1.4
	Unicode-0_28:1.4
	Unicode-0_27:1.3
	Unicode-0_26:1.3
	Unicode-0_25:1.3
	Unicode-0_24:1.3
	Unicode-0_23:1.3
	ahodgkin_207release:1.3
	Unicode-0_22:1.3
	Unicode-0_21:1.3
	Unicode-0_20:1.3
	Unicode-0_19:1.3
	Unicode-0_18:1.3
	Unicode-0_16:1.3
	Unicode-0_15:1.3
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	Unicode-0_14:1.3
	ahodgkin_133beta:1.3
	Unicode-0_13:1.3
	Unicode-0_12:1.3
	Unicode-0_10:1.3
	Unicode-0_09:1.3
	Unicode-0_08:1.3
	Unicode-0_07:1.3
	Unicode-0_06:1.3
	Unicode-0_05:1.2
	Unicode-0_04:1.2
	Unicode-0_03:1.1
	Unicode-0_02:1.1;
locks; strict;
comment	@# @;


1.10
date	2002.06.10.15.11.49;	author sbrodie;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.10.15.08.35;	author sbrodie;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.13.10.38.05;	author jberanek;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.05.14.46.35;	author jberanek;	state Exp;
branches;
next	1.6;

1.6
date	99.09.13.09.55.49;	author kbracey;	state Exp;
branches;
next	1.5;

1.5
date	99.02.24.13.33.49;	author smiddle;	state Exp;
branches;
next	1.4;

1.4
date	98.11.16.12.47.56;	author smiddle;	state Exp;
branches;
next	1.3;

1.3
date	97.11.25.15.03.33;	author smiddle;	state Exp;
branches;
next	1.2;

1.2
date	97.11.21.18.21.51;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	97.11.11.16.24.54;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.10
log
@  Removed some warnings on unused variables.
  Fixed a comparison of a plain char (signedness issue)
Admin:
  These were from NCBrowser 5.28 too - but got forgot in the last checkin :-(
  I've not tried using this library.


Version 0.48. Tagged as 'Unicode-0_48'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > utf8.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <limits.h>

#include "utf8.h"

/*
 * UCS4_to_UTF8 converts a UCS-4 code to UTF-8, storing the result
 * in the array pointed to by out. This array must be large enough
 * to store the resulting UTF-8 element (6 bytes will always be
 * sufficient). The return value is a pointer to the byte after
 * the last one written.
 */
char *UCS4_to_UTF8(char *out, UCS4 code)
{
    unsigned char *p;
    int len;

    p = (unsigned char *)out;
    if (code < 0x80u)
    {
        *p++ = (unsigned char)code;
        return (char *)p;
    }

    /* Illegal codes -> replacement character */
    if (code & 0x80000000u)
        code = 0xFFFD;

    if (code < 0x800u)
        len = 2;
    else if (code < 0x10000u)
        len = 3;
    else if (code < 0x200000u)
        len = 4;
    else if (code < 0x4000000u)
        len = 5;
    else
        len = 6;

    p = (unsigned char *)out + len - 1;

    do
    {
        *p-- = (unsigned char)(0x80u | (code & 0x3Fu));
        code >>= 6;
    }
    while (p > (unsigned char *)out);

    *p = (unsigned char)((0xFF00u >> len) | code);

    return (char *)out + len;
}

/*
 * UTF8_to_UCS4 takes a pointer to a UTF-8 sequence and outputs
 * the corresponding UCS4 code, returning the number of bytes consumed.
 */
int UTF8_to_UCS4(const char *cc, UCS4 *r)
{
    const unsigned char *c = (const unsigned char *)cc;
    UCS4 c0 = c[0];
    UCS4 ucs, cn;

    /* Easy case - is code 0xxxxxxx? If so, just return it. */
    if (c0 < 0x80u)
    {
        *r = c0;
        return 1;
    }

    /* If we have 10xxxxxx, we're broken */
    if (c0 < 0xC0u)
        goto badutf;

    /* Check second byte is 10xxxxxx */
    cn = c[1] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (c0 << 6) | cn;

    /* Check for two byte codes - 110xxxxx 10xxxxxx */
    if (c0 < 0xE0u)
    {
        /* ucs holds 00110xxx xxxxxxxx */
        ucs &=~ 0x3000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x80u)
            goto badutf;

        *r = ucs;
        return 2;
    }

    /* Check third byte is 10xxxxxx */
    cn = c[2] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 3 byte codes - 1110xxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF0u)
    {
        /* ucs holds 1110 xxxxxxxx xxxxxxxx */
        ucs &=~ 0xE0000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x800u)
            goto badutf;

        *r = ucs;
        return 3;
    }

    /* Check fourth byte is 10xxxxxx */
    cn = c[3] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 4 byte codes - 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF8u)
    {
        /* ucs holds 11 110xxxxx xxxxxxxx xxxxxxxx */
        ucs &=~ 0x3C00000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x10000u)
            goto badutf;

        *r = ucs;
        return 4;
    }

    /* Check fifth byte is 10xxxxxx */
    cn = c[4] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 5 byte codes - 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFCu)
    {
        /* ucs holds 111110xx xxxxxxxx xxxxxxxx xxxxxxxx */
        ucs &=~ 0xF8000000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x200000u)
            goto badutf;

        *r = ucs;
        return 5;
    }

    /* Check sixth byte is 10xxxxxx */
    cn = c[5] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 6 byte codes - 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFEu)
    {
        /* ucs holds 0xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx */

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x4000000u)
            goto badutf;

        *r = ucs;
        return 6;
    }

    /* If we get this far, c0 = 1111111x which is bogus, so fall through to... */

  badutf:
    *r = 0xFFFDu;
    return 1;
}

/*
 * UTF8_codelen gives the length of a UCS-4 code when converted to UTF-8
 * using UCS4_to_UTF8.
 */
int UTF8_codelen(UCS4 code)
{
    if (code < 0x80u) return 1;
    if (code < 0x800u) return 2;
    if (code < 0x10000u) return 3;
    if (code < 0x200000u) return 4;
    if (code < 0x4000000u) return 5;
    if (code < 0x80000000u) return 6;
    return 3; /* Length of replacement character */
}

/*
 * UTF8_seqlen gives the length of a UTF-8 sequence, given its first
 * byte.
 */
int UTF8_seqlen(char cc)
{
    unsigned char c = (unsigned char)cc;
    if (c < 0xC0u) return 1;
    if (c < 0xE0u) return 2;
    if (c < 0xF0u) return 3;
    if (c < 0xF8u) return 4;
    if (c < 0xFCu) return 5;
    if (c < 0xFEu) return 6;
    return 1;
}

/*
 * UTF8_next advances the pointer to the next UTF-8 code in a string.
 */
char *UTF8_next(const char *p)
{
    if (*p)
    {
        /* check for single bytes character to avoid looking at the
         * next byte which may not be in valid memory if not in a
         * null-terminated string */
        if (*(unsigned char *)p < 0xC0u)
            p++;
        else
            while ((*++p & 0xC0u) == 0x80u)
                continue;
    }

    return (char *) p;
}

/*
 * UTF8_prev reverses the pointer to the previous UTF-8 code in a string.
 */
char *UTF8_prev(const char *p)
{
    while ((*--p & 0xC0u) == 0x80u)
        continue;

    return (char *) p;
}


/*
 * Skip forward the given number of UTF8 'characters'
 */

char *UTF8_next_n(const char *p, int n_chars)
{
    const char *s = p;
    while (n_chars--)
	s = UTF8_next(s);
    return (char *)s;
}

/*
 * Count the number of utf8 'characters' in the string
 * Count only up to n_bytes or NUL.
 */

int UTF8_strlen_n(const char *p, int n_bytes)
{
    const char *p_end = p + n_bytes;
    int nchars = 0;
    while (*p && p < p_end)
    {
	p = UTF8_next(p);
	nchars++;
    }
    return nchars;
}

int UTF8_strlen(const char *p)
{
    int nchars = 0;

    while (*p)
    {
	p = UTF8_next(p);
	nchars++;
    }

    return nchars;
}

/* eof utf8.c */
@


1.9
log
@  Merge of bug fixes from NCBrowser tree.
Detail:
  Buffer overrun fixed; some buffer counting problems fixed too.  There is
    now helpful initialisation and tidyup routines you can call too (called
    encoding_initialise and encoding_tidyup)
Admin:
  I've built this with cc 5.45 in basic build environment - it built OK.
  This source code now matches that in NCBrowser 5.28.


Version 0.47. Tagged as 'Unicode-0_47'
@
text
@d263 1
a263 1
        if (*p < 0xC0u)
@


1.8
log
@  More syncronisation with Unicode lib in branched tree
Detail:
  Added some changes from Unicode lib in branched tree.  All basically
   type changes.  This appears to be because other compilers are
   more picky about types than armcc.

Admin:
  Will add 0.46 VersionNum file into branched tree, and all will be
   syncronised fully.


Version 0.46. Tagged as 'Unicode-0_46'
@
text
@d259 10
a268 2
	while ((*++p & 0xC0u) == 0x80u)
	    continue;
d299 1
a299 1
 * Count only upto n_bytes or NUL.
d316 9
a324 1
    return UTF8_strlen_n(p, INT_MAX);
@


1.7
log
@  Copyright message changes + changes from branch + Unified
   branched/non-branched builds
Detail:
  Copyright messages changed from E-14 to Pace throughout, filename
   placed at top of file throughout, instead of in just some files.

  Merged branch's fixes into our code base, plus made it possible to
   get nice debug output in branched tree, and vfprintf() to stderr in
   RISC OS tree.  Exactly same source used in branched tree now (apart
   from OS specific files riscos.c and unix.c moving into layers
   directory structure).

Admin:
  Built for branched, both Unix and RISC OS.
  Built in RISC OS tree, and compiled into TextConv.


Version 0.45. Tagged as 'Unicode-0_45'
@
text
@d41 1
a41 1
    char *p;
d44 1
d47 2
a48 2
        *out++ = code;
        return out;
d66 1
a66 1
    p = out + len - 1;
d70 1
a70 1
        *p-- = 0x80u | (code & 0x3Fu);
d73 1
a73 1
    while (p > out);
d75 1
a75 1
    *p = (0xFF00u >> len) | code;
d77 1
a77 1
    return out + len;
d84 1
a84 1
int UTF8_to_UCS4(const char *c, UCS4 *r)
d86 1
d241 1
a241 1
int UTF8_seqlen(char c)
d243 1
@


1.6
log
@SCSU encoder made aware of SIP (Supplementary Plane for Unified CJK Ideographs).
UTF-8 encoder handles out-of-space conditions correctly.
ISO 2022 encoder/decoder doesn't try to load table 7E (the null table).
encoding_new() does identify a null MIME string with auto-detect Japanese.
UnicodeData 3.0.0 imported.

Version 0.41. Tagged as 'Unicode-0_41'
@
text
@a15 9
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/
d17 10
@


1.5
log
@Added copyright messages to all source files and unified the
header #define's.

Version 0.33. Not tagged
@
text
@d40 3
d49 4
d54 7
a60 1
        *out++ = 0xC0u | (code >> 6);
d62 5
d68 2
a69 31
        if (code < 0x10000u)
            *out++ = 0xE0u | (code >> 12);
        else
        {
            if (code < 0x200000u)
                *out++ = 0xF0u | (code >> 18);
            else
            {
                if (code < 0x4000000u)
                    *out++ = 0xF8u | (code >> 24);
                else
                {
		    if (code < 0x80000000u)
		    {
			*out++ = 0xFCu | (code >> 30);
			*out++ = 0x80u | ((code >> 24) & 0x3Fu);
		    }
		    else
		    {
			/* convert all illegal sequences (except NULL_UCS4) to the
			   illegal/replacement character 0xFFFD */
			*out++ = 0xEF;
			*out++ = 0xBF;
			*out++ = 0xBD;
		    }
                }
                *out++ = 0x80u | ((code >> 18) & 0x3Fu);
            }
            *out++ = 0x80u | ((code >> 12) & 0x3Fu);
        }
        *out++ = 0x80u | ((code >> 6) & 0x3Fu);
d71 3
a73 1
    *out++ = 0x80u | (code & 0x3Fu);
d75 1
a75 1
    return out;
d230 2
a231 1
    return 6;
@


1.4
log
@Updated all the writers to ignore the NULL_UCS4 character (as had
been previously added to the iso2022_escapes case). Any new writers
should flush any pending characters they may have at this point.
Also udpated enc_UCS4.c and utf8.c to turn all illegal characeters
(top bit set) into FFFD.

Version 0.28. Tagged as 'Unicode-0_28'
@
text
@d15 10
a24 1
/* > utf8.c
a25 3
 *

 */
@


1.3
log
@Added another UTF8 function to get string lengths in terms of UTF8 characters.

Version 0.06. Tagged as 'Unicode-0_06'
@
text
@d56 13
a68 2
                    *out++ = 0xFCu | (code >> 30);
                    *out++ = 0x80u | ((code >> 24) & 0x3Fu);
@


1.2
log
@Added new file 'languages.h' with some ISO639 language codes.
Added a default language field to each encoding (using above codes).
Added a max char size field to each encoding.
Tidied up some of the reencoders behaviour when output ptr NULL.
Fixed a load of charset numbers which were wrong.
New UTF8 function to skiop multiple characters in a string.
Fixed RISC OS build which was out of date.

Version 0.04. Tagged as 'Unicode-0_04'
@
text
@d15 8
d274 22
@


1.1
log
@Initial version checked in

Version 0.01. Not tagged
@
text
@d237 3
a239 2
    while ((*++p & 0xC0u) == 0x80u)
        continue;
d254 15
@
