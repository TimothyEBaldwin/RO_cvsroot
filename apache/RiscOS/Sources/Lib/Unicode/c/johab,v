head	1.8;
access;
symbols
	Unicode-0_63:1.8
	Unicode-0_62:1.8
	Unicode-0_61:1.8
	Unicode-0_60:1.8
	Unicode-0_59:1.7
	Unicode-0_58:1.7
	Unicode-0_57:1.7
	Unicode-0_56:1.7
	Unicode-0_55:1.6
	Unicode-0_54:1.6
	RO_5_07:1.6
	Unicode-0_53:1.6
	Unicode-0_52:1.6
	Unicode-0_51:1.6
	Unicode-0_50:1.6
	Unicode-0_49:1.6
	Unicode-0_48:1.6
	Unicode-0_47:1.6
	Unicode-0_46:1.5
	Unicode-0_45:1.4
	dellis_autobuild_BaseSW:1.3
	sbrodie_sedwards_16Mar2000:1.3
	Unicode-0_44:1.3
	dcotton_autobuild_BaseSW:1.5
	Unicode-0_43:1.3
	Unicode-0_42:1.3
	Unicode-0_41:1.3
	Unicode-0_40:1.3
	Unicode-0_39:1.3
	Unicode-0_38:1.3
	Unicode-0_37:1.3
	Unicode-0_36:1.3
	Unicode-0_35:1.3
	Unicode-0_34:1.3
	Unicode-0_33:1.3;
locks; strict;
comment	@# @;


1.8
date	2013.01.06.22.32.09;	author jbell;	state Exp;
branches;
next	1.7;
commitid	mXR1bDbpHeiotczw;

1.7
date	2008.12.05.00.29.44;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.10.15.08.35;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.13.10.38.05;	author jberanek;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.05.14.46.35;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	99.02.24.13.33.48;	author smiddle;	state Exp;
branches;
next	1.2;

1.2
date	99.02.24.12.45.55;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	99.02.23.17.03.09;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Add encoding_read_in_multibyte_sequence API.
Detail:
  The new API allows the client to determine if a read codec has run
  out of input in the middle of a multibyte sequence. This permits a
  client to distinguish between the two cases in which no output
  character is generated:

    a) insufficient input has been provided to complete an output character
    b) the input consisted of a complete multibyte sequence which generates
       no output (e.g. an ISO-2022 shift sequence)
Admin:
  Tested using Iconv.


Version 0.60. Tagged as 'Unicode-0_60'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > johab.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <stdlib.h>

#include "encpriv.h"
#include "iso2022.h"

#include "johab.h"

typedef struct Johab_Encoding
{
    EncodingPriv e;
    unsigned char prev;
    encoding_table ksx1001;
} Johab_Encoding;

/*
 * Routines for encoding Johab
 * Number: 4012
 * Names: Johab
 */

static UCS4 hangul_to_ucs(unsigned int c1, unsigned int c2)
{
    /*
     * Look up a Johab Hangul, and convert to UCS.
     *
     * johab_read has already ensured the following ranges:
     *     first byte 0x84-0xD3
     *    second byte 0x41-0x7E, 0x81-0xFE
     *
     * Johab Hangul have 5 bits each for initial, medial and
     * final jamo. However, any could be "filler", and only
     * certain permutations are possible. Anything with either
     * of initial or medial filler need to be handled carefully;
     * the rest map straightforwardly to the UCS Hangul syllable
     * area.
     */

    UCS4 u = NULL_UCS2;
    int j, initial, medial, final;

    /*
     * Lookup tables from Johab 5-bit codes to UCS L,V,T index
     * numbers (as described in Unicode "Combining Jamo behaviour")
     */
    static const unsigned char initial_lookup[] = /* Add 0x1100 for UCS Jamo */
    {
           0, 0x80, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
        0x0E, 0x0F, 0x10, 0x11, 0x12
    };

    static const unsigned char medial_lookup[] = /* Add 0x1161 for UCS Jamo */
    {
           0,    0, 0x80, 0x00, 0x01, 0x02, 0x03, 0x04,
           0,    0, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
           0,    0, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
           0,    0, 0x11, 0x12, 0x13, 0x14, 0xFF, 0xFF
    };

    static const unsigned char final_lookup[] = /* Add 0x11A7 for UCS Jamo */
    {
        0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
        0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0xFF, 0x11, 0x12, 0x13, 0x14, 0x15,
        0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0xFF, 0xFF
    };

    j = (c1 << 8) | c2;

    initial = (j & 0x7C00) >> 10; /* Must be in range 0x01-0x14 */
    medial  = (j & 0x03E0) >> 5;  /* 0x02-0x07,0x0A-0x0F,0x12-0x17,0x1A-0x1F */
    final   =  j & 0x001F;        /* 0x00-0x1F */

    initial = initial_lookup[initial]; /* 0x00-0x12, or 0x80 for "fill" */
    medial  = medial_lookup[medial];   /* 0x00-0x14, or 0x80 for "fill" */
    final   = final_lookup[final];     /* 0x01-0x1B, or 0x00 for "fill" */

    if (medial == 0xFF || final == 0xFF) return NULL_UCS2;

    if (initial == 0x80) /* "fill" */
    {
        /* Hangul is -XX */

        if (medial == 0x80) /* "fill" */
        {
            /* Hangul is --X */
            static const unsigned char final_only[28] =
            {
                   0,    0,    0, 0x33,    0, 0x35, 0x36,
                   0,    0, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
                0x3F, 0x40,    0,    0, 0x44,    0,    0,
                   0,    0,    0,    0,    0,    0,    0
            };

            u = 0x3100 + final_only[final];
            if (u == 0x3100) u = NULL_UCS2;
        }
        else if (final == 0) /* "fill" */
        {
            /* Hangul is -V- */
            u = 0x314F + medial;
        }
        /* else Hangul is -VT, which is illegal */
    }
    else
    {
        /* Hangul is LXX */
        if (medial == 0x80) /* "fill" */
        {
            /* Hangul is L-X */
            if (final == 0) /* "fill" */
            {
                /* Hangul is L-- */
                static const unsigned char initial_only[19] =
                {
                    0x31, 0x32, 0x34, 0x37, 0x38, 0x39, 0x41, 0x42,
                    0x43, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B,
                    0x4C, 0x4D, 0x4E
                };

                u = 0x3100 + initial_only[initial];
            }
            /* else Hangul is L-T, which is illegal */
        }
        else
        {
            /* Hangul is LVX */
            u = 0xAC00 + (initial * 21 + medial) * 28 + final;
        }
    }

    return u;
}

static UCS4 hanja_to_ucs(const UCS2 *ksx, unsigned int c1, unsigned int c2)
{
    /*
     * Look up a Johab Hanja/symbol, and convert to UCS.
     *
     * johab_read has already ensured the following ranges:
     *     first byte 0xD8-0xDE, 0xE0-0xF9
     *    second byte 0x31-0x7E, 0x91-0xFE
     *
     */

    int row, col;

    if (c1 < 0xE0)
        row = ((int) c1 - 0xD9) * 2;      /* Map 0xD8-0xDE to (-2)-14 */
    else
        row = ((int) c1 - 0xE0) * 2 + 41; /* Map 0xE0-0xF9 to 41-91 */

    if (c2 < 0x80)
        col = (int) c2 - 0x31;            /* Map 0x31-0x7E to 0-77 */
    else
        col = (int) c2 - 0x91 + 78;       /* Map 0x91-0xFE to 78-187 */

    if (col >= 94)
    {
        row += 1;
        col -= 94;
    }

    if (row < 0)                  /* 2 rows of user-defined characters */
        return NULL_UCS2;

    if (row == 3 && col < 51)     /* These 51 Jamo should have been */
        return NULL_UCS2;         /* encoded as Johab Hangul */

    return ksx[row * 94 + col];   /* Look up in the KS X 1001:1992 table */
}

static int johab_reset(Encoding *e, int for_encoding)
{
    Johab_Encoding *je = (Johab_Encoding *) e;

    if (!je->ksx1001)
        je->ksx1001 = iso2022_find_table(94*94, 0x43);

    je->prev = 0;

    return je->ksx1001 != NULL;

    NOT_USED(for_encoding);
}

static unsigned int johab_read(Encoding *e,
			       encoding_read_callback_fn ucs_out,
                               const unsigned char *s,
                               unsigned int n,
                               void *handle)
{
    Johab_Encoding *je = (Johab_Encoding *) e;
    unsigned int count;
    const UCS2 *ksx1001 = encoding_table_ptr(je->ksx1001);

    for (count = n; count; count--)
    {
        unsigned char c = *s++;
        UCS4 u;

        if (je->prev)
        {
            if (je->prev <= 0xD3 &&
                  ((c >= 0x41 && c <= 0x7E) ||
                   (c >= 0x81 && c <= 0xFE))
               )
                u = hangul_to_ucs(je->prev, c);
            else if ((c >= 0x31 && c <= 0x7E) ||
                     (c >= 0x91 && c <= 0xFE))
                u = hanja_to_ucs(ksx1001, je->prev, c);
            else
            {
                /* Illegal second character - output a blob for the first
                 * byte and read the second byte again. */
                u = NULL_UCS2;
                s--; count++;
            }
            je->prev = 0;
        }
        else
        {
            if (c < 0x80 && c != 0x5C) /* Standard ASCII... */
                u = c;
            else if (c == 0x5C) /* ...except 0x5C, which maps to Won */
                u = 0x20A9;
            else if ((c >= 0x84 && c <= 0xD3) ||
                     (c >= 0xD8 && c <= 0xDE) ||
                     (c >= 0xE0 && c <= 0xF9))
            {
                je->prev = c;
                continue;
            }
            else
                u = NULL_UCS2;
        }

        if (u == NULL_UCS2)
            u = 0xFFFD;

        if (ucs_out)
            if (ucs_out(handle, u))
            {
                /* Character has been used, so ensure its counted */
                count--;
                break;
            }
    }

    return n - count;
}

static int johab_read_in_multibyte_sequence(EncodingPriv *e)
{
    Johab_Encoding *je = (Johab_Encoding *) e;

    return je->prev != 0;
}

static int ucs_hangul_to_johab(UCS4 u)
{
    int initial, medial, final;

    /* Lookup tables from UCS Jamo index numbers to Johab bits */

    static const unsigned char medial_lookup[] =
    {
        0x03, 0x04, 0x05, 0x06, 0x07, 0x0A, 0x0B, 0x0C,
        0x0D, 0x0E, 0x0F, 0x12, 0x13, 0x14, 0x15, 0x16,
        0x17, 0x1A, 0x1B, 0x1C, 0x1D
    };

    static const unsigned char final_lookup[] =
    {
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
        0x11, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
        0x1A, 0x1B, 0x1C, 0x1D
    };

    u -= 0xAC00;

    initial = u / (21*28);
    medial  = (u % (21*28)) / 28;
    final   = u % 28;

    initial += 2;
    medial  = medial_lookup[medial];
    final   = final_lookup[final];

    return 0x8000 | (initial << 10) | (medial << 5) | final;
}

static int ucs_jamo_to_johab(UCS4 u)
{
    /* johab_write restricts u to 0x3131-0x3163 */

    static const unsigned short jamo_lookup[] =
    {
                0x8841, 0x8C41, 0x8444, 0x9041, 0x8446, 0x8447, 0x9441,
        0x9841, 0x9C41, 0x844A, 0x844B, 0x844C, 0x844D, 0x844E, 0x844F,
        0x8450, 0xA041, 0xA441, 0xA841, 0x8454, 0xAC41, 0xB041, 0xB441,
        0xB841, 0xBC41, 0xC041, 0xC441, 0xC841, 0xCC41, 0xD041, 0x8461,
        0x8481, 0x84A1, 0x84C1, 0x84E1, 0x8541, 0x8561, 0x8581, 0x85A1,
        0x85C1, 0x85E1, 0x8641, 0x8661, 0x8681, 0x86A1, 0x86C1, 0x86E1,
        0x8741, 0x8761, 0x8781, 0x87A1
    };

    return jamo_lookup[u-0x3131];
}

static int johab_write(EncodingPriv *e, UCS4 u, unsigned char **johab, int *bufsize)
{
    Johab_Encoding *je = (Johab_Encoding *) e;
    int c = 0xFFFD;

    if (u == NULL_UCS4)
	return 0;

    if (u <= 0x7F && u != 0x5C) /* Basic Latin */
        c = u;
    else if (u == 0x20A9) /* Won Sign, mapped to 0x5C */
        c = 0x5C;
    else if (u >= 0xAC00 && u <= 0xD7A3) /* Hangul syllables */
        c = ucs_hangul_to_johab(u);
    else if (u >= 0x3131 && u <= 0x3163) /* Modern Jamo */
        c = ucs_jamo_to_johab(u);
    else
    {
        int i = encoding_lookup_in_table(u, je->ksx1001);
        if (i >= 0)
        {
            int row, col;
            row = i / 94; col = i % 94;
            if (row <= 15 || (row >= 41 && row <= 92))
            {
                if (row <= 15)
                {
                    if (row & 1) col += 94;
                    c = ((row / 2) + 0xD9) << 8;
                }
                else
                {
                    row -= 41;
                    if (row & 1) col += 94;
                    c = ((row / 2) + 0xE0) << 8;
                }

                if (col < 78)
                    c += col + 0x31;
                else
                    c += col - 78 + 0x91;
            }
        }
    }

    if (c == 0xFFFD && e->for_encoding == encoding_WRITE_STRICT)
        return -1;
    else if (c == 0xFFFD)
        c = '?';

    if ((*bufsize -= (c > 0xFF ? 2 : 1)) < 0 || !johab)
	return 0;

    if (c > 0xFF)
        *(*johab)++ = c >> 8;

    *(*johab)++ = c;

    return 1;
}

static void johab_delete(EncodingPriv *e)
{
    Johab_Encoding *je = (Johab_Encoding *) e;
    if (je->ksx1001)
	encoding_discard_map_file(je->ksx1001);
}

EncodingPriv enc_johab =
{
    johab_read,
    johab_read_in_multibyte_sequence,
    johab_reset,
    sizeof(Johab_Encoding) - sizeof(EncodingPriv),
    johab_delete,
    0,
    johab_write,
    0,
    0,
    0
};
@


1.7
log
@  Fix bugs and inconsistencies in encoding handlers.
  Fix inconsistency in handling illegal byte sequences.
  Convert surrogate codepoints and U+FFFE, U+FFFF to U+FFFD.
  Also, a few extra mappings.
Detail:
  enc_utf8.c: 0x80 is a continuation byte. Map stray ones to U+FFFD.
              Reset the count of expected continuation bytes to 0 when
              encountering illegal byte sequences. Previously, if the character
              callback returned non-zero, this count would not be reset, thus
              leaving the codec in an inconsistent state. Additionally, we no
              longer consume the illegal continuation byte: instead, we process
              it as a start byte next time round.
  encoding.c: Do not load extension tables for ISO-8859-{1,2,9,10,15,16}
              If these are needed, it's probably best that different charset
              names are used rather than overloading 8859-n.
  iso2022.c:  Permit SS2/3 escape sequences for EUC encode/decode.
              Disable C1 characters for EUC encode/decode.
              Fix G94x94 read function to handle GR 0xA0/0xFF correctly.
              Fix writing of C1 controls for 8859-n.
              Prevent dereference of NULL pointer when scanning tables.
  iso6937.c:  Replace C99 loop iterators with C89 friendly versions.
  johab.c:    Fix final_only lookup table to have entries in the right place.
              Map 0x5C to the Won sign.
              Actually pay attention to encoding_WRITE_STRICT.
  shiftjis.c: Map 0x7E to overbar rather than tilde.
  textconv.c: Fix static assignment of stdin/stdout.
  unix.c:     Perform wildcard lookup of mapping tables.
  ccsolaris/Makefile: Modify for use with GCCSDK
Admin:
  Tested with the Iconv module testsuite.
Author:
  John-Mark Bell


Version 0.56. Tagged as 'Unicode-0_56'
@
text
@d280 7
d410 1
@


1.6
log
@  Merge of bug fixes from NCBrowser tree.
Detail:
  Buffer overrun fixed; some buffer counting problems fixed too.  There is
    now helpful initialisation and tidyup routines you can call too (called
    encoding_initialise and encoding_tidyup)
Admin:
  I've built this with cc 5.45 in basic build environment - it built OK.
  This source code now matches that in NCBrowser 5.28.


Version 0.47. Tagged as 'Unicode-0_47'
@
text
@d116 4
a119 4
                   0, 0,    0, 0x33,    0, 0x35, 0x36,    0,
                   0, 0, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                0x40, 0,    0,    0, 0x44,    0,    0,    0,
                   0, 0,    0,    0
d250 1
a250 1
            if (c < 0x80)
d252 2
d335 1
a335 1
    int c = '?';
d340 1
a340 1
    if (u <= 0x7F) /* Basic Latin */
d342 2
d377 5
@


1.5
log
@  More syncronisation with Unicode lib in branched tree
Detail:
  Added some changes from Unicode lib in branched tree.  All basically
   type changes.  This appears to be because other compilers are
   more picky about types than armcc.

Admin:
  Will add 0.46 VersionNum file into branched tree, and all will be
   syncronised fully.


Version 0.46. Tagged as 'Unicode-0_46'
@
text
@d268 3
d272 1
@


1.4
log
@  Copyright message changes + changes from branch + Unified
   branched/non-branched builds
Detail:
  Copyright messages changed from E-14 to Pace throughout, filename
   placed at top of file throughout, instead of in just some files.

  Merged branch's fixes into our code base, plus made it possible to
   get nice debug output in branched tree, and vfprintf() to stderr in
   RISC OS tree.  Exactly same source used in branched tree now (apart
   from OS specific files riscos.c and unix.c moving into layers
   directory structure).

Admin:
  Built for branched, both Unix and RISC OS.
  Built in RISC OS tree, and compiled into TextConv.


Version 0.45. Tagged as 'Unicode-0_45'
@
text
@d38 1
a38 1
    char prev;
d72 1
a72 1
    static const char initial_lookup[] = /* Add 0x1100 for UCS Jamo */
d79 1
a79 1
    static const char medial_lookup[] = /* Add 0x1161 for UCS Jamo */
d87 1
a87 1
    static const char final_lookup[] = /* Add 0x11A7 for UCS Jamo */
d114 1
a114 1
            static const char final_only[28] =
d141 1
a141 1
                static const char initial_only[19] =
d216 1
a216 1
                               const char *s,
d226 1
a226 1
        char c = *s++;
d280 1
a280 1
    static const char medial_lookup[] =
d287 1
a287 1
    static const char final_lookup[] =
d326 1
a326 1
static int johab_write(EncodingPriv *e, UCS4 u, char **johab, int *bufsize)
@


1.3
log
@Added copyright messages to all source files and unified the
header #define's.

Version 0.33. Not tagged
@
text
@d15 12
a26 9
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/
d210 2
d232 2
a233 2
                  (c >= 0x41 && c <= 0x7E ||
                   c >= 0x81 && c <= 0xFE)
d236 2
a237 2
            else if (c >= 0x31 && c <= 0x7E ||
                     c >= 0x91 && c <= 0xFE)
d252 3
a254 3
            else if (c >= 0x84 && c <= 0xD3 ||
                     c >= 0xD8 && c <= 0xDE ||
                     c >= 0xE0 && c <= 0xF9)
d347 1
a347 1
            if (row <= 15 || row >= 41 && row <= 92)
d394 4
a397 1
    johab_write
@


1.2
log
@Some illegal Johab characters weren't being mapped to U+FFFD.

Version 0.33. Not tagged
@
text
@d15 10
@


1.1
log
@Added Korean Johab encoding (untested).
Reinstated use of data->data relocations.

Version 0.32. Not tagged
@
text
@d179 1
a179 1
        return NULL_UCS4;
d182 1
a182 1
        return NULL_UCS4;         /* encoded as Johab Hangul */
@
