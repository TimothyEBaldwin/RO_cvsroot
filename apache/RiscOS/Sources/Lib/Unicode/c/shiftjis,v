head	1.15;
access;
symbols
	Unicode-0_63:1.15
	Unicode-0_62:1.15
	Unicode-0_61:1.15
	Unicode-0_60:1.15
	Unicode-0_59:1.14
	Unicode-0_58:1.14
	Unicode-0_57:1.14
	Unicode-0_56:1.14
	Unicode-0_55:1.13
	Unicode-0_54:1.13
	RO_5_07:1.13
	Unicode-0_53:1.13
	Unicode-0_52:1.13
	Unicode-0_51:1.13
	Unicode-0_50:1.13
	Unicode-0_49:1.13
	Unicode-0_48:1.13
	Unicode-0_47:1.13
	Unicode-0_46:1.12
	Unicode-0_45:1.11
	dellis_autobuild_BaseSW:1.10
	sbrodie_sedwards_16Mar2000:1.10
	Unicode-0_44:1.10
	dcotton_autobuild_BaseSW:1.12
	Unicode-0_43:1.10
	Unicode-0_42:1.10
	Unicode-0_41:1.10
	Unicode-0_40:1.10
	Unicode-0_39:1.10
	Unicode-0_38:1.10
	Unicode-0_37:1.10
	Unicode-0_36:1.10
	Unicode-0_35:1.10
	Unicode-0_34:1.10
	Unicode-0_33:1.10
	Unicode-0_32:1.8
	Unicode-0_31:1.8
	Unicode-0_30:1.8
	Unicode-0_29:1.8
	Unicode-0_28:1.7
	Unicode-0_27:1.6
	Unicode-0_26:1.6
	Unicode-0_25:1.6
	Unicode-0_24:1.5
	Unicode-0_23:1.5
	ahodgkin_207release:1.3
	Unicode-0_22:1.4
	Unicode-0_21:1.3
	Unicode-0_20:1.3
	Unicode-0_19:1.3
	Unicode-0_18:1.3
	Unicode-0_16:1.3
	Unicode-0_15:1.3
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	Unicode-0_14:1.3
	ahodgkin_133beta:1.3
	Unicode-0_13:1.3
	Unicode-0_12:1.3
	Unicode-0_10:1.2
	Unicode-0_09:1.2
	Unicode-0_08:1.2
	Unicode-0_07:1.2
	Unicode-0_06:1.2
	Unicode-0_05:1.2
	Unicode-0_04:1.2
	Unicode-0_03:1.2
	Unicode-0_02:1.1;
locks; strict;
comment	@# @;


1.15
date	2013.01.06.22.32.09;	author jbell;	state Exp;
branches;
next	1.14;
commitid	mXR1bDbpHeiotczw;

1.14
date	2008.12.05.00.29.44;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.10.15.08.35;	author sbrodie;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.13.10.38.05;	author jberanek;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.05.14.46.35;	author jberanek;	state Exp;
branches;
next	1.10;

1.10
date	99.02.24.13.33.48;	author smiddle;	state Exp;
branches;
next	1.9;

1.9
date	99.02.24.12.04.24;	author smiddle;	state Exp;
branches;
next	1.8;

1.8
date	98.11.16.13.28.43;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	98.11.16.12.47.56;	author smiddle;	state Exp;
branches;
next	1.6;

1.6
date	98.10.21.16.51.59;	author smiddle;	state Exp;
branches;
next	1.5;

1.5
date	98.10.16.13.20.06;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	98.09.25.14.36.32;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	98.01.05.10.24.33;	author smiddle;	state Exp;
branches;
next	1.2;

1.2
date	97.11.12.18.11.53;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	97.11.11.16.24.51;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Add encoding_read_in_multibyte_sequence API.
Detail:
  The new API allows the client to determine if a read codec has run
  out of input in the middle of a multibyte sequence. This permits a
  client to distinguish between the two cases in which no output
  character is generated:

    a) insufficient input has been provided to complete an output character
    b) the input consisted of a complete multibyte sequence which generates
       no output (e.g. an ISO-2022 shift sequence)
Admin:
  Tested using Iconv.


Version 0.60. Tagged as 'Unicode-0_60'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > shiftjis.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <stdlib.h>

#include "encpriv.h"

#include "iso2022.h"
#include "shiftjis.h"


typedef struct ShiftJIS_Encoding
{
    EncodingPriv e;
    unsigned char prev;
    encoding_table katakana, kanji, cp932ext;
} ShiftJIS_Encoding;

/*
 * Routines for encoding Microsoft's Shift-JIS
 * Number: 17
 * Names: Shift_JIS
 *        MS_Kanji
 *        csShiftJIS
 */

static UCS4 kanji_to_ucs(const UCS2 *jis0208, const UCS2 *cp932, int c1, int c2)
{
    UCS4 u;
    int row, col, index;

    /*
     * Shift-JIS encodes kanji using byte pairs:
     *     first byte 0x81-0x9F, 0xE0-0xEF
     *    second byte 0x40-0x7E, 0x80-0xFC
     *
     * Removing the gap, and shifting to a base of 0,
     * that gives us:
     *     first byte 0-46
     *    second byte 0-187
     * And 47*188 = 8836 = 94*94... these 8836 codes
     * are those of JIS X 0208.
     *
     * Except... Shift-JIS has extra stuff:
     *     NEC Row 13 extensions
     *     IBM Kanji in Rows 89-92
     *
     * Also there are "user-defined" characters:
     *     first byte 0xF0-0xFC
     *    second byte 0x40-0x7E, 0x80-0xFC
     * These can be regarded as rows 95-120. Rows 115-119
     * contain duplicates of the IBM Kanji etc.
     *
     * We assume that c1 is in the range 0x81-0x9F, 0xE0-0xFC,
     * courtesy of range checking in shiftjis_read.
     *
     * Likewise, we assume that c2 is in the range 0x40-0x7E, 0x80-0xFC.
     */

    if (c1 >= 0xE0)
        c1 -= 0xC1;
    else
        c1 -= 0x81;

    if (c2 >= 0x80)
        c2 -= 0x41;
    else
        c2 -= 0x40;

    index = 188 * c1 + c2;

    row = index / 94;
    col = index % 94;

    /* Don't forget row and col will start at 0, not 1 */
    if (row < 94)
        u = jis0208[index];
    else
        u = NULL_UCS2;

    if (cp932)
    {
        if (row == 12)
            u = cp932[col];         /* First row of CP932 file is NEC Row 13 */
        else if (row >= 88 && row < 92)
            u = cp932[94 + 94 * (row-88) + col];  /* Followed by IBM Kanji */
        else if (index >= 94 * 114 && index < 94 * 114 + 28)
            u = cp932[94 * 5 + col];              /* IBM non-Kanji */
        else if (index >= 94 * 114 + 28 && index < 94 * 118 + 12)
            u = cp932[94 + index - (94 * 114 + 28)]; /* Repeat IBM Kanji */
    }

    return u == NULL_UCS2 ? 0xFFFD : u;
}

static int shiftjis_reset(EncodingPriv *e, int for_encoding)
{
    ShiftJIS_Encoding *sj = (ShiftJIS_Encoding *) e;

    if (!sj->katakana)
        sj->katakana = iso2022_find_table(94, 0x49);

    if (!sj->kanji)
        sj->kanji = iso2022_find_table(94*94, 0x42);

    if (!sj->cp932ext)
        sj->cp932ext = encoding_load_map_file("Microsoft" DIR_SEP "CP932");

    sj->prev = 0;

    return sj->katakana && sj->kanji;

    NOT_USED(for_encoding);
}

static unsigned int shiftjis_read(Encoding *e,
				  encoding_read_callback_fn ucs_out,
                                  const unsigned char *s,
                                  unsigned int n,
                                  void *handle)
{
    ShiftJIS_Encoding *sj = (ShiftJIS_Encoding *) e;
    unsigned int count;
    const UCS2 *kanji = encoding_table_ptr(sj->kanji);
    const UCS2 *katakana = encoding_table_ptr(sj->katakana);
    const UCS2 *cp932ext = encoding_table_ptr(sj->cp932ext);

    for (count = n; count; count--)
    {
        unsigned char c = *s++;
        UCS4 u;

        if (sj->prev)
        {
            if (c >= 0x40 && c <= 0xFC && c != 0x7F)
                u = kanji_to_ucs(kanji, cp932ext, sj->prev, c);
            else
            {
                /* Illegal second character - output a blob for the first byte
                 * and read the second byte again. */
                u = NULL_UCS2;
                s--; count++;
            }
            sj->prev = 0;
        }
        else
        {
            if (c < 0x80)
                u = c == 0x5C ? 0x00A5 : (c == 0x7E ? 0x203E : c); /* CP932 is as Basic Latin, except for yen and overbar */
            else if (c == 0x80)
                u = 0x005C; /* Backslash - a Mac extension */
            else if (c < 0xA0)
            {
                sj->prev = c;
                continue;
            }
            else if (c == 0xA0)
                u = 0xFFFD;
            else if (c < 0xE0)
                u = katakana[c - 0xA1];
            else if (c < 0xFD)
            {
                sj->prev = c;
                continue;
            }
            else if (c == 0xFD)
                u = 0x00A9; /* Copyright - a Mac extension */
            else if (c == 0xFE)
                u = 0x2122; /* Trademark - a Mac extension */
            else /* c == 0xFF */
                u = 0x2026; /* Ellipsis - a Mac extension */
        }

        if (u == NULL_UCS2)
            u = 0xFFFD;

        if (ucs_out)
            if (ucs_out(handle, u))
            {
                /* Character has been used, so ensure its counted */
                count--;
                break;
            }
    }

    return n - count;
}

static int shiftjis_read_in_multibyte_sequence(EncodingPriv *e)
{
    ShiftJIS_Encoding *sj = (ShiftJIS_Encoding *) e;

    return sj->prev != 0;
}

static int lookup_table(UCS4 u, ShiftJIS_Encoding *sj, int *index, int *table_no)
{
    int i;

    if (u >= 0x21 && u < 0x7E && u != 0x5C)  /* lower set is ASCII, except... */
    {
        *table_no = 0;
        *index = u - 0x21;
        return 1;
    }

    if (u == 0xA5) /* slot 5C is yen */
    {
        *table_no = 0;
        *index = 0x5C - 0x21;
        return 1;
    }

    if (u == 0x203E) /* slot 7E is overbar */
    {
        *table_no = 0;
        *index = 0x7E - 0x21;
        return 1;
    }

    if ((i = encoding_lookup_in_table(u, sj->katakana)) != -1)
    {
	*table_no = 1;
	*index = i;
	return 1;
    }

    if ((i = encoding_lookup_in_table(u, sj->kanji)) != -1)
    {
	*table_no = 2;
	*index = i;
	return 1;
    }

    if (sj->cp932ext && (i = encoding_lookup_in_table(u, sj->cp932ext)) != -1)
    {
	*table_no = 2;

	if (i < 94)
	    i = 12 * 94 + i; /* NEC characters in Row 13 */
	else if (i < 5 * 94)
	    i = 88 * 94 + i - 94; /* IBM characters in Row 89 onwards */
	else
	    i = 114 * 94 + i; /* Guff in Row 115 */

	*index = i;
	return 1;
    }

    return 0;
}

static int shiftjis_write(EncodingPriv *e, UCS4 u, unsigned char **sjis, int *bufsize)
{
    ShiftJIS_Encoding *sj = (ShiftJIS_Encoding *) e;
    int c = 0, cc = 0;
    int index, table;

    if (u == NULL_UCS4)
	return 0;

    /* control chars */
    if (u < 0x0021)
	c = u;

    else if (lookup_table(u, sj, &index, &table))
    {
	switch (table)
	{
	case 0:			/* roman */
	    c = index + 0x21;
	    break;

	case 1:			/* katakana */
	    c = index + 0xA1;
	    break;

	case 2:			/* kanji */
	    /* first byte 0x81-0x9F, 0xE0-0xEF
	     * second byte 0x40-0x7E, 0x80-0xFC
	     */
	    c = index / 188;
	    cc = index % 188;

	    if (c <= 0x1E)
		c += 0x81;
	    else
		c += 0xE0 - 0x1F;

	    if (cc <= 0x3E)
		cc += 0x40;
	    else
		cc += 0x80 - 0x3F;
	    break;
	}
    }

    /* single mappings */
    else if (u == 0x005C)
	c = 0x80; /* Backslash - a Mac extension */
    else if (u == 0x007F)
	c = 0x7F;
    else if (u == 0x00A9)
	c = 0xFD; /* Copyright - a Mac extension */
    else if (u == 0x2122)
	c = 0xFE; /* Trademark - a Mac extension */
    else if (u == 0x2026)
        c = 0xFF; /* Ellipsis - a Mac extension */

    else if (e->for_encoding == encoding_WRITE_STRICT)
	return -1;

    else /* if (u == 0xFFFD) */	/* bad character */
	c = '?';

    if ((*bufsize -= (cc ? 2 : 1)) < 0 || !sjis)
	return 0;

    *(*sjis)++ = c;
    if (cc)
	*(*sjis)++ = cc;

    return 1;
}

static void shiftjis_delete(EncodingPriv *e)
{
    ShiftJIS_Encoding *sj = (ShiftJIS_Encoding *) e;
    if (sj->katakana)
	encoding_discard_map_file(sj->katakana);
    if (sj->kanji)
	encoding_discard_map_file(sj->kanji);
    if (sj->cp932ext)
	encoding_discard_map_file(sj->cp932ext);
}

EncodingPriv enc_shiftjis =
{
    shiftjis_read,
    shiftjis_read_in_multibyte_sequence,
    shiftjis_reset,
    sizeof(ShiftJIS_Encoding) - sizeof(EncodingPriv),
    shiftjis_delete,
    0,				/* enable iso2022 */
    shiftjis_write,
    0,
    0,
    0
};
@


1.14
log
@  Fix bugs and inconsistencies in encoding handlers.
  Fix inconsistency in handling illegal byte sequences.
  Convert surrogate codepoints and U+FFFE, U+FFFF to U+FFFD.
  Also, a few extra mappings.
Detail:
  enc_utf8.c: 0x80 is a continuation byte. Map stray ones to U+FFFD.
              Reset the count of expected continuation bytes to 0 when
              encountering illegal byte sequences. Previously, if the character
              callback returned non-zero, this count would not be reset, thus
              leaving the codec in an inconsistent state. Additionally, we no
              longer consume the illegal continuation byte: instead, we process
              it as a start byte next time round.
  encoding.c: Do not load extension tables for ISO-8859-{1,2,9,10,15,16}
              If these are needed, it's probably best that different charset
              names are used rather than overloading 8859-n.
  iso2022.c:  Permit SS2/3 escape sequences for EUC encode/decode.
              Disable C1 characters for EUC encode/decode.
              Fix G94x94 read function to handle GR 0xA0/0xFF correctly.
              Fix writing of C1 controls for 8859-n.
              Prevent dereference of NULL pointer when scanning tables.
  iso6937.c:  Replace C99 loop iterators with C89 friendly versions.
  johab.c:    Fix final_only lookup table to have entries in the right place.
              Map 0x5C to the Won sign.
              Actually pay attention to encoding_WRITE_STRICT.
  shiftjis.c: Map 0x7E to overbar rather than tilde.
  textconv.c: Fix static assignment of stdin/stdout.
  unix.c:     Perform wildcard lookup of mapping tables.
  ccsolaris/Makefile: Modify for use with GCCSDK
Admin:
  Tested with the Iconv module testsuite.
Author:
  John-Mark Bell


Version 0.56. Tagged as 'Unicode-0_56'
@
text
@d213 7
d364 1
@


1.13
log
@  Merge of bug fixes from NCBrowser tree.
Detail:
  Buffer overrun fixed; some buffer counting problems fixed too.  There is
    now helpful initialisation and tidyup routines you can call too (called
    encoding_initialise and encoding_tidyup)
Admin:
  I've built this with cc 5.45 in basic build environment - it built OK.
  This source code now matches that in NCBrowser 5.28.


Version 0.47. Tagged as 'Unicode-0_47'
@
text
@d173 1
a173 1
                u = c == 0x5C ? 0x00A5 : c; /* CP932 is as Basic Latin, except for yen */
d217 1
a217 1
    if (u >= 0x21 && u <= 0x7E && u != 0x5C)  /* lower set is ASCII, except... */
d231 7
@


1.12
log
@  More syncronisation with Unicode lib in branched tree
Detail:
  Added some changes from Unicode lib in branched tree.  All basically
   type changes.  This appears to be because other compilers are
   more picky about types than armcc.

Admin:
  Will add 0.46 VersionNum file into branched tree, and all will be
   syncronised fully.


Version 0.46. Tagged as 'Unicode-0_46'
@
text
@d203 3
d207 1
a333 1
    sj = sj;
@


1.11
log
@  Copyright message changes + changes from branch + Unified
   branched/non-branched builds
Detail:
  Copyright messages changed from E-14 to Pace throughout, filename
   placed at top of file throughout, instead of in just some files.

  Merged branch's fixes into our code base, plus made it possible to
   get nice debug output in branched tree, and vfprintf() to stderr in
   RISC OS tree.  Exactly same source used in branched tree now (apart
   from OS specific files riscos.c and unix.c moving into layers
   directory structure).

Admin:
  Built for branched, both Unix and RISC OS.
  Built in RISC OS tree, and compiled into TextConv.


Version 0.45. Tagged as 'Unicode-0_45'
@
text
@d39 1
a39 1
    char prev;
d142 1
a142 1
                                  const char *s,
d154 1
a154 1
        char c = *s++;
d259 1
a259 1
static int shiftjis_write(EncodingPriv *e, UCS4 u, char **sjis, int *bufsize)
@


1.10
log
@Added copyright messages to all source files and unified the
header #define's.

Version 0.33. Not tagged
@
text
@d15 12
a26 9
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/
d136 2
d351 4
a354 1
    shiftjis_write
@


1.9
log
@Created new file riscos.c for RISC OS specific functions. Rest of
library should remain portable. Moved function to load a map file
into that new file. Added #defines for directory separator and
wild card characters and updated the various file names.

Version 0.33. Tagged as 'Unicode-0_33'
@
text
@d15 10
@


1.8
log
@Range check the second byte of a double-byte Shift-JIS character.

Version 0.29. Tagged as 'Unicode-0_29'
@
text
@d118 1
a118 1
        sj->cp932ext = encoding_load_map_file("Microsoft.CP932");
@


1.7
log
@Updated all the writers to ignore the NULL_UCS4 character (as had
been previously added to the iso2022_escapes case). Any new writers
should flush any pending characters they may have at this point.
Also udpated enc_UCS4.c and utf8.c to turn all illegal characeters
(top bit set) into FFFD.

Version 0.28. Tagged as 'Unicode-0_28'
@
text
@d67 2
d144 9
a152 1
            u = kanji_to_ucs(kanji, cp932ext, sj->prev, c);
d158 1
a158 1
                u = c == 0x5C ? 0x00A5 : c; /* CP932 is as ASCII, except for yen */
@


1.6
log
@Fixed bug in ShiftJIS:lookup_table replace 'i' with 'u'.

Version 0.25. Tagged as 'Unicode-0_25'
@
text
@d240 3
@


1.5
log
@Changed Shift-JIS 7-bit set to match MS CP932. It is now ASCII, except that
character &5C is yen instead of backslash.

Version 0.23. Tagged as 'Unicode-0_23'
@
text
@d188 1
a188 1
    if (i >= 0x21 && i <= 0x7E && i != 0x5C)  /* lower set is ASCII, except... */
d191 1
a191 1
        *index = i - 0x21;
d195 1
a195 1
    if (i == 0xA5) /* slot 5C is yen */
@


1.4
log
@Extended Shift-JIS to cover all of Microsoft Code Page 932.

Version 0.22. Tagged as 'Unicode-0_22'
@
text
@d27 1
a27 1
    encoding_table roman, katakana, kanji, cp932ext;
a108 3
    if (!sj->roman)
        sj->roman = iso2022_find_table(94, 0x4A);

d120 1
a120 1
    return sj->roman && sj->katakana && sj->kanji;
a130 1
    const UCS2 *roman = encoding_table_ptr(sj->roman);
d147 2
a148 6
            if (c < 0x21)
                u = c;
            else if (c < 0x80)
                u = roman[c - 0x21];
            else if (c == 0x7F)
                u = 0x007F;
d188 8
a195 1
    if ((i = encoding_lookup_in_table(u, sj->roman)) != -1)
d197 3
a199 3
	*table_no = 0;
	*index = i;
	return 1;
a307 2
    if (sj->roman)
	encoding_discard_map_file(sj->roman);
@


1.3
log
@ Fixed autojp state machine. It wasn't resetting 'state' to HAD_NONE after
changing whatcode. So basically it was lucky it ever worked. Also rewrote
the various range tests to only use one compare per case.
Changed the 'for_encoding' parameter to encoding_write() to an enumeration.
Added a new type of writing where if the character cannot be encoded then
the function returns -1 rather than writing a default character
Added the pseudo-charsets csAutodetectJP and csEUCorShiftJIS to the encoding
table so that they return the correct default language (ja).
Added function to remove unused encoding tables (must be called explicitly).
Fixed usage counting in iso2022 (I think).
When looking up encoding name try stripping 'x-' and 'X-' off the front i
can't find on first pass.

Version 0.12. Tagged as 'Unicode-0_12'
@
text
@d27 1
a27 1
    encoding_table roman, katakana, kanji;
d38 1
a38 1
static UCS4 kanji_to_ucs(const UCS2 *kanji, int c1, int c2)
d41 1
d55 4
d62 2
a63 2
     *
     * We turn all those into good ol' 0xFFFD.
a67 2
    if (c1 >= 0xF0 || c2 < 0x40 || c2 == 0x7F || c2 > 0xFC)
        return 0xFFFD;
d79 22
a100 1
    u = kanji[188 * c1 + c2];
d118 3
d137 2
a138 1
    
d146 1
a146 1
            u = kanji_to_ucs(kanji, sj->prev, c);
d217 15
d301 1
a301 1
    
d315 2
@


1.2
log
@Fixed encoding table so that modules builds will work.
Made all tables be on linked list to avoid static copies of pointers.
Removed redundant 8bit files.

Version 0.03. Tagged as 'Unicode-0_03'
@
text
@d246 3
@


1.1
log
@Initial version checked in

Version 0.01. Not tagged
@
text
@a22 2
static UCS2 *roman, *katakana, *kanji;

d27 1
d38 1
a38 1
static UCS4 kanji_to_ucs(int c1, int c2)
d85 2
a86 2
    if (!roman)
        roman = iso2022_find_table(94, 0x4A);
d88 2
a89 2
    if (!katakana)
        katakana = iso2022_find_table(94, 0x49);
d91 2
a92 2
    if (!kanji)
        kanji = iso2022_find_table(94*94, 0x42);
d96 1
a96 1
    return roman && katakana && kanji;
d107 4
a110 1

d118 1
a118 1
            u = kanji_to_ucs(sj->prev, c);
d164 1
a164 1
static int lookup_table(UCS4 u, int *index, int *table_no)
d168 1
a168 1
    if ((i = encoding_lookup_in_table(u, roman, encoding_n_table_entries(roman))) != -1)
d175 1
a175 1
    if ((i = encoding_lookup_in_table(u, katakana, encoding_n_table_entries(katakana))) != -1)
d182 1
a182 1
    if ((i = encoding_lookup_in_table(u, kanji, encoding_n_table_entries(kanji))) != -1)
d202 1
a202 1
    else if (lookup_table(u, &index, &table))
d260 11
d276 1
a276 1
    0,				/* shiftjis_delete */
@
