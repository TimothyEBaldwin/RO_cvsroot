head	1.41;
access;
symbols
	Unicode-0_63:1.41
	Unicode-0_62:1.41
	Unicode-0_61:1.41
	Unicode-0_60:1.41
	Unicode-0_59:1.40
	Unicode-0_58:1.40
	Unicode-0_57:1.40
	Unicode-0_56:1.40
	Unicode-0_55:1.39
	Unicode-0_54:1.38
	RO_5_07:1.37
	Unicode-0_53:1.37
	Unicode-0_52:1.36
	Unicode-0_51:1.35
	Unicode-0_50:1.35
	Unicode-0_49:1.34
	Unicode-0_48:1.34
	Unicode-0_47:1.33
	Unicode-0_46:1.32
	Unicode-0_45:1.31
	dellis_autobuild_BaseSW:1.30
	sbrodie_sedwards_16Mar2000:1.30
	Unicode-0_44:1.30
	dcotton_autobuild_BaseSW:1.32
	Unicode-0_43:1.30
	Unicode-0_42:1.29
	Unicode-0_41:1.28
	Unicode-0_40:1.27
	Unicode-0_39:1.26
	Unicode-0_38:1.25
	Unicode-0_37:1.24
	Unicode-0_36:1.23
	Unicode-0_35:1.22
	Unicode-0_34:1.21
	Unicode-0_33:1.20
	Unicode-0_32:1.17
	Unicode-0_31:1.16
	Unicode-0_30:1.16
	Unicode-0_29:1.15
	Unicode-0_28:1.15
	Unicode-0_27:1.14
	Unicode-0_26:1.13
	Unicode-0_25:1.13
	Unicode-0_24:1.13
	Unicode-0_23:1.13
	ahodgkin_207release:1.12
	Unicode-0_22:1.13
	Unicode-0_21:1.13
	Unicode-0_20:1.13
	Unicode-0_19:1.13
	Unicode-0_18:1.12
	Unicode-0_16:1.11
	Unicode-0_15:1.11
	ahodgkin_205release:1.10
	ahodgkin_204release:1.10
	Unicode-0_14:1.10
	ahodgkin_133beta:1.9
	Unicode-0_13:1.9
	Unicode-0_12:1.9
	Unicode-0_10:1.8
	Unicode-0_09:1.7
	Unicode-0_08:1.6
	Unicode-0_07:1.5
	Unicode-0_06:1.4
	Unicode-0_05:1.4
	Unicode-0_04:1.4
	Unicode-0_03:1.3
	Unicode-0_02:1.2;
locks; strict;
comment	@# @;


1.41
date	2013.01.06.22.32.08;	author jbell;	state Exp;
branches;
next	1.40;
commitid	mXR1bDbpHeiotczw;

1.40
date	2008.12.05.00.29.44;	author ahodgkin;	state Exp;
branches;
next	1.39;

1.39
date	2005.08.26.15.02.17;	author kbracey;	state Exp;
branches;
next	1.38;

1.38
date	2005.08.25.11.57.08;	author kbracey;	state Exp;
branches;
next	1.37;

1.37
date	2004.07.01.14.57.51;	author srevill;	state Exp;
branches;
next	1.36;

1.36
date	2004.03.05.18.16.24;	author srevill;	state Exp;
branches;
next	1.35;

1.35
date	2002.07.23.12.34.41;	author srevill;	state Exp;
branches;
next	1.34;

1.34
date	2002.06.10.15.11.49;	author sbrodie;	state Exp;
branches;
next	1.33;

1.33
date	2002.06.10.15.08.35;	author sbrodie;	state Exp;
branches;
next	1.32;

1.32
date	2000.10.13.10.38.05;	author jberanek;	state Exp;
branches;
next	1.31;

1.31
date	2000.10.05.14.46.35;	author jberanek;	state Exp;
branches;
next	1.30;

1.30
date	99.09.16.14.24.25;	author kbracey;	state Exp;
branches;
next	1.29;

1.29
date	99.09.14.16.39.44;	author kbracey;	state Exp;
branches;
next	1.28;

1.28
date	99.09.13.09.55.46;	author kbracey;	state Exp;
branches;
next	1.27;

1.27
date	99.08.04.13.49.07;	author kbracey;	state Exp;
branches;
next	1.26;

1.26
date	99.03.26.15.27.23;	author smiddle;	state Exp;
branches;
next	1.25;

1.25
date	99.03.23.11.20.39;	author smiddle;	state Exp;
branches;
next	1.24;

1.24
date	99.03.18.13.55.08;	author smiddle;	state Exp;
branches;
next	1.23;

1.23
date	99.03.12.17.09.58;	author smiddle;	state Exp;
branches;
next	1.22;

1.22
date	99.03.12.15.53.13;	author kbracey;	state Exp;
branches;
next	1.21;

1.21
date	99.03.11.17.01.23;	author kbracey;	state Exp;
branches;
next	1.20;

1.20
date	99.02.24.13.33.47;	author smiddle;	state Exp;
branches;
next	1.19;

1.19
date	99.02.24.12.04.21;	author smiddle;	state Exp;
branches;
next	1.18;

1.18
date	99.02.23.17.03.08;	author kbracey;	state Exp;
branches;
next	1.17;

1.17
date	99.02.23.13.07.27;	author kbracey;	state Exp;
branches;
next	1.16;

1.16
date	99.01.05.16.23.05;	author smiddle;	state Exp;
branches;
next	1.15;

1.15
date	98.11.16.12.47.54;	author smiddle;	state Exp;
branches;
next	1.14;

1.14
date	98.11.06.19.08.25;	author smiddle;	state Exp;
branches;
next	1.13;

1.13
date	98.09.15.14.09.45;	author kbracey;	state Exp;
branches;
next	1.12;

1.12
date	98.09.10.15.48.13;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	98.09.04.12.01.01;	author kbracey;	state Exp;
branches;
next	1.10;

1.10
date	98.03.06.16.29.34;	author kbracey;	state Exp;
branches;
next	1.9;

1.9
date	98.01.05.10.24.31;	author smiddle;	state Exp;
branches;
next	1.8;

1.8
date	97.12.18.14.56.54;	author smiddle;	state Exp;
branches;
next	1.7;

1.7
date	97.12.10.14.12.50;	author smiddle;	state Exp;
branches;
next	1.6;

1.6
date	97.12.08.17.00.28;	author smiddle;	state Exp;
branches;
next	1.5;

1.5
date	97.12.02.10.31.32;	author smiddle;	state Exp;
branches;
next	1.4;

1.4
date	97.11.21.18.21.49;	author smiddle;	state Exp;
branches;
next	1.3;

1.3
date	97.11.12.18.11.50;	author smiddle;	state Exp;
branches;
next	1.2;

1.2
date	97.11.11.17.40.50;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	97.11.11.16.24.47;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Add encoding_read_in_multibyte_sequence API.
Detail:
  The new API allows the client to determine if a read codec has run
  out of input in the middle of a multibyte sequence. This permits a
  client to distinguish between the two cases in which no output
  character is generated:

    a) insufficient input has been provided to complete an output character
    b) the input consisted of a complete multibyte sequence which generates
       no output (e.g. an ISO-2022 shift sequence)
Admin:
  Tested using Iconv.


Version 0.60. Tagged as 'Unicode-0_60'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > encoding.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "encpriv.h"
#include "enc_ascii.h"
#include "iso2022.h"
#include "shiftjis.h"
#include "iso6937.h"
#include "johab.h"
#include "bigfive.h"
#include "eightbit.h"
#include "enc_utf7.h"
#include "enc_utf8.h"
#include "enc_utf16.h"
#include "enc_ucs4.h"
#include "enc_scsu.h"
#include "enc_system.h"
#include "acorn.h"

#include "charsets.h"
#include "iso3166.h"
#include "languages.h"

#ifndef Module_Version
#  include "VersionNum"
#endif

/* ----------------------------------------------------------------------------- */

static char version[] = "Unicode library " Module_MajorVersion " " Module_Date " " Module_MinorVersion ;

/* ----------------------------------------------------------------------------- */

#define lang_ANY ""

static EncList enclist[] =
{
 {   csASCII /* 3 */, 1, "/US-ASCII/", lang_ENGLISH, &enc_ascii, NULL, NULL },
 {   csISOLatin1 /* 4 */, 1, "/ISO-8859-1/ISO-IR-100/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x41"/*\x1B\x2E\x42\x1B\x2F\x50"*/, NULL }, /* Select G1 Latin-1, G2 Latin-2, G3 supplement */
 {   csISOLatin2 /* 5 */, 1, "/ISO-8859-2/ISO-IR-101/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x42"/*\x1B\x2E\x41\x1B\x2F\x50"*/, NULL }, /* Select G1 Latin-2, G2 Latin-1, G3 supplement */
 {   csISOLatin3 /* 6 */, 1, "/ISO-8859-3/ISO-IR-109/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x43", NULL },	                /* Select Latin-3 right half */
 {   csISOLatin4 /* 7 */, 1, "/ISO-8859-4/ISO-IR-110/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x44", NULL },	                /* Select Latin-4 right half */
 {   csISOLatinCyrillic /* 8 */, 1, "/ISO-8859-5/ISO-IR-144/", lang_RUSSIAN, &enc_iso8859, "\x1B\x2D\x4C", NULL },		/* Select Cyrillic right half */
 {   csISOLatinGreek /* 10 */, 1, "/ISO-8859-7/ISO-IR-126/", lang_GREEK, &enc_iso8859, "\x1B\x2D\x46", NULL },		/* Select Greek right half */
 {   csISOLatinHebrew /* 11 */, 1, "/ISO-8859-8/ISO-IR-198/", lang_HEBREW, &enc_iso8859, "\x1B\x2D\x5E", NULL },		/* Select Hebrew right half */
 {   csISOLatin5 /* 12 */, 1, "/ISO-8859-9/ISO-IR-148/", lang_TURKISH, &enc_iso8859, "\x1B\x2D\x4D"/*\x1B\x2E\x42\x1B\x2F\x50"*/, NULL },	/* Select G1 Latin-5, G2 Latin-2, G3 supplement */
 {   csISOLatin6 /* 13 */, 1, "/ISO-8859-10/ISO-IR-157/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x56"/*\x1B\x2E\x58"*/, NULL },	/* Select Latin-6 right half, and Sami supplement as G2 */
 {   csISOLatinThai, 1, "/ISO-8859-11/ISO-IR-166/", lang_THAI, &enc_iso8859, "\x1B\x2D\x54", NULL },                          /* Select Thai right half */
 {   csISOLatin7, 1, "/ISO-8859-13/ISO-IR-179/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x59", NULL },		                /* Select Baltic Rim right half */
 {   csISOLatin8, 1, "/ISO-8859-14/ISO-IR-199/", lang_IRISH, &enc_iso8859, "\x1B\x2D\x5F", NULL },	                        /* Select Celtic right half */
 {   csISOLatin9, 1, "/ISO-8859-15/ISO-IR-203/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x62"/*\x1B\x2E\x42\x1B\x2F\x50"*/, NULL },  /* Select G1 Latin-9, G2 Latin-2, G3 supplement */
 {   csISOLatin10, 1, "/ISO-8859-16/ISO-IR-226/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x66"/*\x1B\x2E\x41\x1B\x2F\x50"*/, NULL },  /* Select G1 Latin-10, G2 Latin-1, G3 supplement */
 {   csISO6937, 2, "/ISO-IR-156/", lang_ENGLISH, &enc_iso6937, "\x1B\x2D\x52", NULL },                         /* Select ISO6937 right half */
 {   csISO6937DVB, 2, "/X-ISO-6937-DVB/X-DVB/", lang_ENGLISH, &enc_iso6937, NULL, NULL },
 {   csShiftJIS /* 17 */, 2, "/SHIFT_JIS/X-SJIS/", lang_JAPANESE, &enc_shiftjis, NULL, NULL },

     /*
     * Select G1 = JIS X 0208            (ESC $ ) B)
     *        G2 = JIS X 0201 Katakana   (ESC * I)
     *        G3 = JIS X 0212            (ESC $ + D)
     *        C1 = ISO 6429              (ESC " C)
     * Single shift range = GR           (ESC SP \)
     */
 {   csEUCPkdFmtJapanese /* 18 */, 2, "/EUC-JP/", lang_JAPANESE, &enc_iso2022_euc,
     /*"\x1B\x28\x4A" - 5Jan99 change to using ASCII (the default) */
                          "\x1B\x24\x29\x42"
                              "\x1B\x2A\x49"
                          "\x1B\x24\x2B\x44"
                              "\x1B\x22\x43"
                              "\x1B\x20\x5C", NULL },
 {   csKSC56011987, /* 36 - note this is really the same as EUC */
     2,
     "/KS_C_5601-1987/ISO-IR-149/KOREAN/KS_C_5601/KS_C_5601_1987/KS_C_5601-1989/KSC_5601/KSC5601/",
     lang_KOREAN,
     &enc_iso2022_euc,
     "\x1B\x24\x29\x43",                       /* Select G1 = KS X 1001 */
     NULL
 },
 {   csISO2022KR /* 37 */, 3, "/ISO-2022-KR/", lang_KOREAN, &enc_iso2022_shifts, NULL,
	        "\x1B\x28\x42"     /* ISO 646-IRV */
		"\x1B\x24\x29\x43" /* KS X 1001 */
		/* "\x1B\x20\x41" G0 & G1 are used. SI invokes G0, SO invokes G1 */
 },
 {   csEUCKR  /* 38 */, 2, "/EUC-KR/", lang_KOREAN, &enc_iso2022_euc,
		"\x1B\x24\x29\x43", NULL },			/* Select G1 = KS X 1001 */
 {   csISO2022JP /* 39 */, 0, "/ISO-2022-JP/JIS_Encoding/", lang_JAPANESE, &enc_iso2022_shifts, NULL,
                "\x1B\x28\x42"  /* ASCII      */
		"\x1B\x28\x4A"	/* JIS roman  */
		"\x1B\x24\x42"	/* JIS X 1983 */
		"\x1B\x24\x40"	/* JIS C 1978 */
		/* "\x1B\x20\x41"  GR is not used. G0 designation only */
 },
 {   csISO2022JP1, 0, "/ISO-2022-JP-1/", lang_JAPANESE, &enc_iso2022_shifts, NULL,
                "\x1B\x28\x42"      /* ASCII      */
		"\x1B\x28\x4A"	    /* JIS X 0201-1976 Roman */
		"\x1B\x24\x42"	    /* JIS X 0208-1983 */
		"\x1B\x24\x40"	    /* JIS X 0208-1978 */
		"\x1B\x24\x28\x44"  /* JIS X 0212-1990 */
 },
 {   csISO2022JP2 /* 40 */, 0, "/ISO-2022-JP-2/", lang_JAPANESE, &enc_iso2022_shifts, NULL,
	        "\x1B\x28\x42"     /* ISO 646-IRV */
                "\x1B\x2E\x41"     /* ISO 8859-1 (Latin1) */
                "\x1B\x2E\x46"     /* ISO 8859-7 (Greek) */
		"\x1B\x28\x4A"	   /* JIS X 0201-1976 Roman */
		"\x1B\x24\x42"	   /* JIS X 0208-1983 */
		"\x1B\x24\x40"	   /* JIS X 0208-1978 */
                "\x1B\x24\x28\x44" /* JIS X 0212-1990 */
                "\x1B\x24\x41"     /* GB 2312-80 (Chinese) */
                "\x1B\x24\x28\x43" /* KS X 1001-1992 (Korean) */
                /* "\x1B\x20\x41" GR is not used. G0 designation only */
                /* "\x1B\x20\x46" C1 is used, represented by ESC Fe */
                /* "\x1B\x20\x5A" G2 is used, invoked with SS2 */
 },
 { csISO2022CN /* 104 */, 0, "/ISO-2022-CN/", lang_CHINESE "-" country2_CHINA, &enc_iso2022_shifts, NULL,
	        "\x1B\x28\x42"     /* ISO 646-IRV */
                "\x1B\x24\x29\x41" /* GB 2312-80 */
                "\x1B\x24\x29\x47" /* CNS 11643-1 */
                "\x1B\x24\x2A\x48" /* CNS 11643-2 */
                },
 { csISO2022CN_EXT /* 105 */, 0, "/ISO-2022-CN-EXT/", lang_CHINESE "-" country2_CHINA, &enc_iso2022_shifts, NULL,
	        "\x1B\x28\x42"     /* ISO 646-IRV */
                "\x1B\x24\x29\x41" /* GB 2312-80 */
                "\x1B\x24\x29\x45" /* ISO-IR 165 */
                "\x1B\x24\x29\x47" /* CNS 11643-1 */
                "\x1B\x24\x2A\x48" /* CNS 11643-2 */
                "\x1B\x24\x2B\x49" /* CNS 11643-3 */
                "\x1B\x24\x2B\x4A" /* CNS 11643-4 */
                "\x1B\x24\x2B\x4B" /* CNS 11643-5 */
                "\x1B\x24\x2B\x4C" /* CNS 11643-6 */
                "\x1B\x24\x2B\x4D" /* CNS 11643-7 */
 },
 { csUnicode11UTF7 /* 103 */, 6, "/UTF-7/UNICODE-1-1-UTF-7/UNICODE-2-0-UTF-7/", lang_ANY, &enc_utf7, NULL, NULL },		/* More general!!! */
 { csUTF8 /* 106 */, 6, "/UTF-8/UNICODE-1-1-UTF-8/UNICODE-2-0-UTF-8/", lang_ANY, &enc_utf8, NULL, NULL },		/* More general!!! */
 { csUCS4 /* 1001 */, 8, "/ISO-10646-UCS-4/UCS-4/", lang_ANY, &enc_ucs4, NULL, NULL },
 { csUnicode11 /* 1010 */, 10, "/UTF-16/UCS-2/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", lang_ANY, &enc_utf16, NULL, NULL }, /* More general!!! */
 { 2022, 0, "/ISO-2022/", lang_ANY, &enc_iso2022, NULL, NULL },
 { csGB2312 /* 2025 */, 2, "/GB2312/CN-GB/GB_2312-80/EUC-CN/GBK/", lang_CHINESE "-" country2_CHINA, &enc_iso2022_euc,
		"\x1B\x24\x29\x41", NULL },						/* Select G1 = GB 2312-80 */
 { csBig5 /* 2026 */, 2, "/BIG5/CN-BIG5/BIG_FIVE/", lang_CHINESE "-" country2_TAIWAN, &enc_bigfive, NULL, NULL },
 { csMacintosh /* 2027 */, 1, "/MACINTOSH/X-MAC-ROMAN/MAC-ROMAN/", lang_ENGLISH, &enc_eightbit, "Apple" DIR_SEP "Roman", NULL },
 { csMacCentEuro, 1, "/X-MAC-CENTRALEURROMAN/MAC-CENTRALEURROMAN/", lang_CZECH, &enc_eightbit, "Apple" DIR_SEP "CentEuro", NULL },
 { csMacCyrillic, 1, "/X-MAC-CYRILLIC/MAC-CYRILLIC/", lang_RUSSIAN, &enc_eightbit, "Apple" DIR_SEP "Cyrillic", NULL },
 { csMacUkrainian, 1, "/X-MAC-UKRAINIAN/MAC-UKRAINIAN/", lang_UKRAINIAN, &enc_eightbit, "Apple" DIR_SEP "Ukrainian", NULL },
 { csKOI8R /* 2084 */, 1, "/KOI8-R/", lang_RUSSIAN, &enc_eightbit, "KOI8-R", NULL },
 { csIBM866 /* 2086 */, 1, "/CP866/IBM866/866/", lang_RUSSIAN, &enc_eightbit, "Microsoft" DIR_SEP "CP866", NULL },
 { csWindows1250 /* 2250 */, 1, "/WINDOWS-1250/", lang_ENGLISH, &enc_eightbit, "Microsoft" DIR_SEP "CP1250", NULL },
 { csWindows1251 /* 2251 */, 1, "/WINDOWS-1251/", lang_RUSSIAN, &enc_eightbit, "Microsoft" DIR_SEP "CP1251", NULL },
 { csWindows1252 /* 2252 */, 1, "/WINDOWS-1252/", lang_ENGLISH, &enc_eightbit, "Microsoft" DIR_SEP "CP1252", NULL },
 { csWindows1254 /* 2254 */, 1, "/WINDOWS-1254/", lang_TURKISH, &enc_eightbit, "Microsoft" DIR_SEP "CP1254", NULL },
 { csWelsh, 1, "/ISO-IR-182/", lang_WELSH, &enc_iso8859, "\x1B\x2D\x5C", NULL },			/* Select Welsh right half */
 { csSami, 1, "/ISO-IR-197/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x5D", NULL },		/* Select Sami right half */
 { csJohab, 2, "/JOHAB/", lang_KOREAN, &enc_johab, NULL, NULL },
 { csSCSU, 6, "/SCSU/", lang_ANY, &enc_scsu, NULL, NULL },
 { csAcornLatin1, 1, "/X-ACORN-LATIN1/", lang_ENGLISH, &enc_eightbit, "Acorn" DIR_SEP "Latin1", NULL },
 { csAcornFuzzy, 1, "/X-ACORN-FUZZY/", lang_ENGLISH, &enc_acorn, "Acorn" DIR_SEP "Latin1", NULL },
 { csAutodetectJP, 0, "", lang_JAPANESE, NULL, NULL, NULL },	/* entry so we can get language */
 { csEUCorShiftJIS, 0, "", lang_JAPANESE, NULL, NULL, NULL },	/* entry so we can get language */
 { csCurrent, 6, "/X-CURRENT/X-SYSTEM/", lang_ANY, &enc_system, NULL, NULL },
 { 0, 0, NULL, NULL, NULL, NULL, NULL }
};

/* ----------------------------------------------------------------------------- */

static EncList *find_enclist(int n)
{
    EncList *e;
    for (e = enclist; e->identifier; e++)
	if (e->identifier == n)
	    return e;
    return NULL;
}

Encoding *encoding_new(int n, int for_encoding)
{
    struct EncList *e;
    EncodingPriv *enc;

    if ((e = find_enclist(n)) != NULL)
    {
	int size;

	/* see if someone tries to open AutodetectJP or encoding 0 */
	if (e->encoding == NULL)
	    return NULL;

	size = sizeof(EncodingPriv) + e->encoding->ws_size;
	enc = encoding__alloc(size);
	if (!enc) return NULL;

	memset(enc, 0, size);
	*enc = *e->encoding;

	enc->list_entry = e;
	enc->for_encoding = for_encoding;
	enc->flags = 0;

	if (enc->reset && !enc->reset(enc, for_encoding))
	{
	    encoding__free(enc);
	    enc = NULL;
	}

	return enc;
    }

    return NULL;
}

void encoding_delete(Encoding *e)
{
    if (e)
    {
	if (e->delete_enc)
	    e->delete_enc(e);

	encoding__free(e);
    }
}

int encoding_reset(Encoding *e)
{
    if (!e)
	return 0;

    e->flags = 0;

    if (!e->reset)
	return 1;

    return e->reset(e, e->for_encoding);
}

unsigned encoding_read(Encoding *e, encoding_read_callback_fn ucs_out,
		   const char *s,
		   unsigned int n,
		   void *handle)
{
    if (e && e->for_encoding == encoding_READ)
    {
	return e->read(e, ucs_out, (const unsigned char *)s, n, handle);
    }
    return 0;
}

int encoding_read_in_multibyte_sequence(Encoding *e)
{
    if (e && e->for_encoding == encoding_READ)
    {
        return e->read_in_multibyte_sequence(e);
    }
    return 0;
}

int encoding_write(Encoding *e, UCS4 c, char **buf, int *bufsize)
{
    if (e && e->for_encoding != encoding_READ)
    {
	return e->write(e, c, (unsigned char **)buf, bufsize);
    }
    return 0;
}

int encoding_max_char_size(int enc_num)
{
    EncList *e = find_enclist(enc_num);
    return e ? e->max_char_size : 0;
}

const char *encoding_default_language(int enc_num)
{
    EncList *e = find_enclist(enc_num);
    return e ? e->lang : lang_ANY;
}

int encoding_default_mime_type(int enc_num, char *buf, int buf_size)
{
    EncList *e = find_enclist(enc_num);
    if ( e )
    {
	int i;
	for ( i = 0; i < buf_size; i++ )
	{
	    int c = e->names[i+1];

	    if ( c == '/' )
		c = '\0';

	    buf[i] = c;
	    if ( c == '\0' )
		break;
	}
	return 1;
    }
    return 0;
}

/* ----------------------------------------------------------------------------- */

#define DEPTH_CUTOFF	3

typedef struct table_info table_info;

struct table_info
{
    table_info *next;

    char *name;

    UCS2 *table;		/* pointer to the table */
    int n_entries;		/* number of main entries in table */

    int alloc;			/* does the pointer need freeing? */
    int usage;			/* number of current users */
};

static encoding_table enc_table_list = NULL;


UCS2 *encoding_table_ptr(encoding_table t)
{
    return t ? t->table : NULL;
}

int encoding_n_table_entries(encoding_table t)
{
    return t ? t->n_entries : 0;
}

/* Table size is number of bytes including the length word
 * Need to convert to number of 16bit entris
 */

int encoding_lookup_in_table(UCS4 u, encoding_table t)
{
    const UCS2 *tt = t->table;
    int n_entries = t->n_entries;

    if (tt)
    {
	int i;
	for (i = 0; i < n_entries; i++, tt++)
	    if ((UCS4)*tt == u)
		return i;
    }

    return -1;
}

static void encoding_table_free(encoding_table t)
{
    if (t)
    {
        encoding__free(t->name);
	if (t->alloc)
	    encoding__free(t->table);
	encoding__free(t);
    }
}

/*
 * startup and closedown funcs
 */

void encoding_initialise(void)
{
    enc_table_list = NULL;
    (void) version;
}

void encoding_tidyup(void)
{
    encoding_table t;

    t = enc_table_list;
    while (t)
    {
	encoding_table next = t->next;
        encoding_table_free(t);
	t = next;
    }

    enc_table_list = NULL;
}


/* Remove tables that are unused and are further down the list than
 * the the given 'start_depth'. */

void encoding_table_remove_unused(int from_depth)
{
    encoding_table t, prev;
    int depth;

    prev = NULL;
    t = enc_table_list;
    depth = 0;
    while (t)
    {
	encoding_table next = t->next;

	UNIDBG(("encoding_table_remove_unused: %p '%s' depth %d usage %d\n",
                t, t->name, depth, t->usage));

	if (depth >= from_depth && t->usage <= 0)
	{
	    UNIDBG(("encoding_table_remove_unused: removing %p\n", t));

	    if (prev)
		prev->next = t->next;
	    else
		enc_table_list = t->next;
	    encoding_table_free(t);
	}
	else
	{
	    prev = t;
	}

	t = next;
	depth++;
    }
}

static encoding_table look_for_table(const char *name, encoding_table *pprev)
{
    encoding_table t, prev;
    for (prev = NULL, t = enc_table_list;
	 t;
	 prev = t, t = t->next)
    {
	if (strcmp(t->name, name) == 0)
	    break;
    }

    if (pprev)
	*pprev = prev;

    return t;
}

static void add_to_list(encoding_table t)
{
    t->next = enc_table_list;
    enc_table_list = t;
}

/* ----------------------------------------------------------------------------- */

static int mime_token_char(UCS4 c)
{
    if (c < 0x21 || c > 0x7E) return 0;

    switch (c)
    {
        case '(': case ')': case '<': case '>': case '@@':
        case ',': case ';': case ':': case '\\': case '"':
        case '/': case '[': case ']': case '?': case '=':
            return 0;
        default:
            return 1;
    }
}

static int encoding__number_from_name(const char *name)
{
    const char *p = name;
    char *temp, *tp;
    struct EncList *e;
    unsigned char c;

    do
    {
        c = (unsigned char)*p++;

    } while (mime_token_char(c));

    temp = (char *) encoding__alloc(p - name + 2);
    if (!temp) return 0;

    sprintf(temp, "/%.*s/", p - name - 1, name);

    /* Yuck, but it's simple, and we're only dealing with ASCII */
    for (tp = temp; *tp; tp++)
        if (*tp >= 'a' && *tp <= 'z')
            *tp -= 0x20;

    for (e = enclist; e->identifier; e++)
        if (strstr(e->names, temp))
            break;

    encoding__free(temp);
    return e->identifier;
}

unsigned int encoding_set_flags(Encoding *e, unsigned int clear, unsigned int eor)
{
    unsigned int old = e->flags;

    e->flags = (old &~ clear) ^ eor;

    return old;
}

int encoding_number_from_name(const char *name)
{
    int e = encoding__number_from_name(name);

    if (e == 0)
    {
	/* try stripping any 'x-' prefix from the name */
	if ((name[0] == 'x' || name[0] == 'X') && name[1] == '-')
	    e = encoding__number_from_name(name + 2);
    }

    return e;
}

/* leaf is the encoding name within the encoding directory. It may
 * include directory separators as defined in encpriv.h It may also
 * include a wild card on the end, due to the way that the files in
 * the iso2022 directory are stored.
 */

encoding_table encoding_load_map_file(const char *leaf)
{
    encoding_table t, prev;

    UNIDBG(("encoding_load_map_file: '%s'\n", leaf));

    /* see if this is already in memory */
    t = look_for_table(leaf, &prev);
    if (t)
    {
	UNIDBG(("encoding_load_map_file: found %p\n", t));

	t->usage++;

	if (prev)
	{
	    UNIDBG(("encoding_load_map_file: move to top prev %p\n", prev));

	    /* take 't' out of list */
	    prev->next = t->next;

	    /* add 't' back in at head */
	    add_to_list(t);
	}
	return t;
    }

    /* allocate space for description structure */
    if ((t = encoding__alloc(sizeof(*t))) == NULL)
	return NULL;

    memset(t, 0, sizeof(*t));

    /* take copy of name */
    t->name = encoding__alloc(strlen(leaf)+1);
    if (!t->name)
    {
	encoding__free(t);
	return NULL;
    }
    strcpy(t->name, leaf);

    /* otherwise load it */
    if ( encoding__load_map_file( leaf, &t->table, &t->n_entries, &t->alloc ) )
    {
	t->usage++;
	add_to_list(t);
    }
    else
    {
	encoding__free(t->name);
	encoding__free(t);
	t = NULL;
    }

    return t;
}

void encoding_discard_map_file(encoding_table t)
{
    if (t) t->usage--;
}

encoding_alloc_fn encoding__alloc = malloc;
encoding_free_fn encoding__free = free;

void encoding_set_alloc_fns(encoding_alloc_fn alloc, encoding_free_fn free)
{
    encoding__alloc = alloc;
    encoding__free = free;
}

#ifdef LAYERS
DEFINE_DBG(uni)
#endif

/* eof encoding.c */
@


1.40
log
@  Fix bugs and inconsistencies in encoding handlers.
  Fix inconsistency in handling illegal byte sequences.
  Convert surrogate codepoints and U+FFFE, U+FFFF to U+FFFD.
  Also, a few extra mappings.
Detail:
  enc_utf8.c: 0x80 is a continuation byte. Map stray ones to U+FFFD.
              Reset the count of expected continuation bytes to 0 when
              encountering illegal byte sequences. Previously, if the character
              callback returned non-zero, this count would not be reset, thus
              leaving the codec in an inconsistent state. Additionally, we no
              longer consume the illegal continuation byte: instead, we process
              it as a start byte next time round.
  encoding.c: Do not load extension tables for ISO-8859-{1,2,9,10,15,16}
              If these are needed, it's probably best that different charset
              names are used rather than overloading 8859-n.
  iso2022.c:  Permit SS2/3 escape sequences for EUC encode/decode.
              Disable C1 characters for EUC encode/decode.
              Fix G94x94 read function to handle GR 0xA0/0xFF correctly.
              Fix writing of C1 controls for 8859-n.
              Prevent dereference of NULL pointer when scanning tables.
  iso6937.c:  Replace C99 loop iterators with C89 friendly versions.
  johab.c:    Fix final_only lookup table to have entries in the right place.
              Map 0x5C to the Won sign.
              Actually pay attention to encoding_WRITE_STRICT.
  shiftjis.c: Map 0x7E to overbar rather than tilde.
  textconv.c: Fix static assignment of stdin/stdout.
  unix.c:     Perform wildcard lookup of mapping tables.
  ccsolaris/Makefile: Modify for use with GCCSDK
Admin:
  Tested with the Iconv module testsuite.
Author:
  John-Mark Bell


Version 0.56. Tagged as 'Unicode-0_56'
@
text
@d273 9
@


1.39
log
@Added Latin10.

Version 0.55. Tagged as 'Unicode-0_55'
@
text
@d67 2
a68 2
 {   csISOLatin1 /* 4 */, 1, "/ISO-8859-1/ISO-IR-100/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x41\x1B\x2E\x42\x1B\x2F\x50", NULL }, /* Select G1 Latin-1, G2 Latin-2, G3 supplement */
 {   csISOLatin2 /* 5 */, 1, "/ISO-8859-2/ISO-IR-101/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x42\x1B\x2E\x41\x1B\x2F\x50", NULL }, /* Select G1 Latin-2, G2 Latin-1, G3 supplement */
d74 2
a75 2
 {   csISOLatin5 /* 12 */, 1, "/ISO-8859-9/ISO-IR-148/", lang_TURKISH, &enc_iso8859, "\x1B\x2D\x4D\x1B\x2E\x42\x1B\x2F\x50", NULL },	/* Select G1 Latin-5, G2 Latin-2, G3 supplement */
 {   csISOLatin6 /* 13 */, 1, "/ISO-8859-10/ISO-IR-157/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x56\x1B\x2E\x58", NULL },	/* Select Latin-6 right half, and Sami supplement as G2 */
d79 2
a80 2
 {   csISOLatin9, 1, "/ISO-8859-15/ISO-IR-203/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x62\x1B\x2E\x42\x1B\x2F\x50", NULL },  /* Select G1 Latin-9, G2 Latin-2, G3 supplement */
 {   csISOLatin10, 1, "/ISO-8859-16/ISO-IR-226/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x66\x1B\x2E\x41\x1B\x2F\x50", NULL },  /* Select G1 Latin-10, G2 Latin-1, G3 supplement */
@


1.38
log
@* Added support for ISO 6937:2001, and the variant with Euro used by DVB.
  (This isn't integrated with ISO 2022 processing though - it's standalone).
* Added a Dstroke -> Eth second-attempt conversion in various write routines,
  primarily for ISO 6937 -> Latin1 conversion (ISO 6937 unifies them).

Version 0.54. Tagged as 'Unicode-0_54'
@
text
@d80 1
@


1.37
log
@  Build changes
Detail:
  Builds on 32-bit machine even with 26-bit environment.
  Fixed c.encoding so that it builds with newer tools.
Admin:
  Works in Baseline 500 build.

Version 0.53. Tagged as 'Unicode-0_53'
@
text
@d36 1
d80 2
@


1.36
log
@Change merged from Pace repository:
> Summary:
>   Merged changes from branch tree
>   Reversed previous change
> Detail:
>
> * Merged a few changes/fixes from the Unicode library in
>  branch's tree.
>
> * Reversed Steve's change from version 0.50. The change wasn't
>  necessary, and with the changed definition of NOT_USED in this
>  version, it compiles fine with cc 5.45.
>
> * Small comment change in unix.c. It now states that the file
>  isn't equivalent to any in the branch tree.
>
> Admin:
>   Built and briefly tested using TextConv utility on Risc PC.

Version 0.52. Tagged as 'Unicode-0_52'
@
text
@d382 1
a382 1
    NOT_USED( version );
@


1.35
log
@  Fixed to build with the latest cc (5.54) compiler.
Detail:
  This version now builds with cc-5_45. Note: it has not been verified as
  actually functioning correctly.
Admin:
  Tested in DSL Baseline build.

Version 0.50. Tagged as 'Unicode-0_50'
@
text
@d51 3
a53 1
#include "VersionNum"
d95 8
a102 1

d108 1
a108 1
 {   csEUCKR  /* 38 */, 0, "/EUC-KR/", lang_KOREAN, &enc_iso2022_euc,
d382 1
a382 1
    (void) version;
@


1.34
log
@  Removed some warnings on unused variables.
  Fixed a comparison of a plain char (signedness issue)
Admin:
  These were from NCBrowser 5.28 too - but got forgot in the last checkin :-(
  I've not tried using this library.


Version 0.48. Tagged as 'Unicode-0_48'
@
text
@d373 1
a373 1
    NOT_USED( version );
@


1.33
log
@  Merge of bug fixes from NCBrowser tree.
Detail:
  Buffer overrun fixed; some buffer counting problems fixed too.  There is
    now helpful initialisation and tidyup routines you can call too (called
    encoding_initialise and encoding_tidyup)
Admin:
  I've built this with cc 5.45 in basic build environment - it built OK.
  This source code now matches that in NCBrowser 5.28.


Version 0.47. Tagged as 'Unicode-0_47'
@
text
@d373 1
@


1.32
log
@  More syncronisation with Unicode lib in branched tree
Detail:
  Added some changes from Unicode lib in branched tree.  All basically
   type changes.  This appears to be because other compilers are
   more picky about types than armcc.

Admin:
  Will add 0.46 VersionNum file into branched tree, and all will be
   syncronised fully.


Version 0.46. Tagged as 'Unicode-0_46'
@
text
@d324 1
d365 25
@


1.31
log
@  Copyright message changes + changes from branch + Unified
   branched/non-branched builds
Detail:
  Copyright messages changed from E-14 to Pace throughout, filename
   placed at top of file throughout, instead of in just some files.

  Merged branch's fixes into our code base, plus made it possible to
   get nice debug output in branched tree, and vfprintf() to stderr in
   RISC OS tree.  Exactly same source used in branched tree now (apart
   from OS specific files riscos.c and unix.c moving into layers
   directory structure).

Admin:
  Built for branched, both Unix and RISC OS.
  Built in RISC OS tree, and compiled into TextConv.


Version 0.45. Tagged as 'Unicode-0_45'
@
text
@d255 1
a255 1
	return e->read(e, ucs_out, s, n, handle);
d264 1
a264 1
	return e->write(e, c, buf, bufsize);
d448 1
a448 1
    char c;
d452 1
a452 1
        c = *p++;
@


1.30
log
@Typo in enc_scsu.c corrected.
ISO 8859-8 is now ISO-IR 198 (05/14).

Version 0.43. Tagged as 'Unicode-0_43'
@
text
@d15 12
a26 9
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/
d63 15
a77 15
 {   csASCII /* 3 */, 1, "/US-ASCII/", lang_ENGLISH, &enc_ascii, NULL },
 {   csISOLatin1 /* 4 */, 1, "/ISO-8859-1/ISO-IR-100/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x41\x1B\x2E\x42\x1B\x2F\x50" }, /* Select G1 Latin-1, G2 Latin-2, G3 supplement */
 {   csISOLatin2 /* 5 */, 1, "/ISO-8859-2/ISO-IR-101/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x42\x1B\x2E\x41\x1B\x2F\x50" }, /* Select G1 Latin-2, G2 Latin-1, G3 supplement */
 {   csISOLatin3 /* 6 */, 1, "/ISO-8859-3/ISO-IR-109/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x43" },	                /* Select Latin-3 right half */
 {   csISOLatin4 /* 7 */, 1, "/ISO-8859-4/ISO-IR-110/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x44" },	                /* Select Latin-4 right half */
 {   csISOLatinCyrillic /* 8 */, 1, "/ISO-8859-5/ISO-IR-144/", lang_RUSSIAN, &enc_iso8859, "\x1B\x2D\x4C" },		/* Select Cyrillic right half */
 {   csISOLatinGreek /* 10 */, 1, "/ISO-8859-7/ISO-IR-126/", lang_GREEK, &enc_iso8859, "\x1B\x2D\x46" },		/* Select Greek right half */
 {   csISOLatinHebrew /* 11 */, 1, "/ISO-8859-8/ISO-IR-198/", lang_HEBREW, &enc_iso8859, "\x1B\x2D\x5E" },		/* Select Hebrew right half */
 {   csISOLatin5 /* 12 */, 1, "/ISO-8859-9/ISO-IR-148/", lang_TURKISH, &enc_iso8859, "\x1B\x2D\x4D\x1B\x2E\x42\x1B\x2F\x50" },	/* Select G1 Latin-5, G2 Latin-2, G3 supplement */
 {   csISOLatin6 /* 13 */, 1, "/ISO-8859-10/ISO-IR-157/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x56\x1B\x2E\x58" },	/* Select Latin-6 right half, and Sami supplement as G2 */
 {   csISOLatinThai, 1, "/ISO-8859-11/ISO-IR-166/", lang_THAI, &enc_iso8859, "\x1B\x2D\x54" },                          /* Select Thai right half */
 {   csISOLatin7, 1, "/ISO-8859-13/ISO-IR-179/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x59" },		                /* Select Baltic Rim right half */
 {   csISOLatin8, 1, "/ISO-8859-14/ISO-IR-199/", lang_IRISH, &enc_iso8859, "\x1B\x2D\x5F" },	                        /* Select Celtic right half */
 {   csISOLatin9, 1, "/ISO-8859-15/ISO-IR-203/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x62\x1B\x2E\x42\x1B\x2F\x50" },  /* Select G1 Latin-9, G2 Latin-2, G3 supplement */
 {   csShiftJIS /* 17 */, 2, "/SHIFT_JIS/X-SJIS/", lang_JAPANESE, &enc_shiftjis },
d92 1
a92 1
                              "\x1B\x20\x5C" },
d100 1
a100 1
		"\x1B\x24\x29\x43" },			/* Select G1 = KS X 1001 */
d147 5
a151 5
 { csUnicode11UTF7 /* 103 */, 6, "/UTF-7/UNICODE-1-1-UTF-7/UNICODE-2-0-UTF-7/", lang_ANY, &enc_utf7 },		/* More general!!! */
 { csUTF8 /* 106 */, 6, "/UTF-8/UNICODE-1-1-UTF-8/UNICODE-2-0-UTF-8/", lang_ANY, &enc_utf8 },		/* More general!!! */
 { csUCS4 /* 1001 */, 8, "/ISO-10646-UCS-4/UCS-4/", lang_ANY, &enc_ucs4 },
 { csUnicode11 /* 1010 */, 10, "/UTF-16/UCS-2/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", lang_ANY, &enc_utf16 }, /* More general!!! */
 { 2022, 0, "/ISO-2022/", lang_ANY, &enc_iso2022 },
d153 22
a174 22
		"\x1B\x24\x29\x41" },						/* Select G1 = GB 2312-80 */
 { csBig5 /* 2026 */, 2, "/BIG5/CN-BIG5/BIG_FIVE/", lang_CHINESE "-" country2_TAIWAN, &enc_bigfive },
 { csMacintosh /* 2027 */, 1, "/MACINTOSH/X-MAC-ROMAN/MAC-ROMAN/", lang_ENGLISH, &enc_eightbit, "Apple" DIR_SEP "Roman" },
 { csMacCentEuro, 1, "/X-MAC-CENTRALEURROMAN/MAC-CENTRALEURROMAN/", lang_CZECH, &enc_eightbit, "Apple" DIR_SEP "CentEuro" },
 { csMacCyrillic, 1, "/X-MAC-CYRILLIC/MAC-CYRILLIC/", lang_RUSSIAN, &enc_eightbit, "Apple" DIR_SEP "Cyrillic" },
 { csMacUkrainian, 1, "/X-MAC-UKRAINIAN/MAC-UKRAINIAN/", lang_UKRAINIAN, &enc_eightbit, "Apple" DIR_SEP "Ukrainian" },
 { csKOI8R /* 2084 */, 1, "/KOI8-R/", lang_RUSSIAN, &enc_eightbit, "KOI8-R" },
 { csIBM866 /* 2086 */, 1, "/CP866/IBM866/866/", lang_RUSSIAN, &enc_eightbit, "Microsoft" DIR_SEP "CP866" },
 { csWindows1250 /* 2250 */, 1, "/WINDOWS-1250/", lang_ENGLISH, &enc_eightbit, "Microsoft" DIR_SEP "CP1250" },
 { csWindows1251 /* 2251 */, 1, "/WINDOWS-1251/", lang_RUSSIAN, &enc_eightbit, "Microsoft" DIR_SEP "CP1251" },
 { csWindows1252 /* 2252 */, 1, "/WINDOWS-1252/", lang_ENGLISH, &enc_eightbit, "Microsoft" DIR_SEP "CP1252" },
 { csWindows1254 /* 2254 */, 1, "/WINDOWS-1254/", lang_TURKISH, &enc_eightbit, "Microsoft" DIR_SEP "CP1254" },
 { csWelsh, 1, "/ISO-IR-182/", lang_WELSH, &enc_iso8859, "\x1B\x2D\x5C" },			/* Select Welsh right half */
 { csSami, 1, "/ISO-IR-197/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x5D" },		/* Select Sami right half */
 { csJohab, 2, "/JOHAB/", lang_KOREAN, &enc_johab },
 { csSCSU, 6, "/SCSU/", lang_ANY, &enc_scsu },
 { csAcornLatin1, 1, "/X-ACORN-LATIN1/", lang_ENGLISH, &enc_eightbit, "Acorn" DIR_SEP "Latin1" },
 { csAcornFuzzy, 1, "/X-ACORN-FUZZY/", lang_ENGLISH, &enc_acorn, "Acorn" DIR_SEP "Latin1" },
 { csAutodetectJP, 0, "", lang_JAPANESE, NULL, NULL },	/* entry so we can get language */
 { csEUCorShiftJIS, 0, "", lang_JAPANESE, NULL, NULL },	/* entry so we can get language */
 { csCurrent, 6, "/X-CURRENT/X-SYSTEM/", lang_ANY, &enc_system, NULL },
 { 0, 0, NULL, NULL }
d380 2
a381 1
	fdebugf(stderr, "encoding_table_remove_unused: %p '%s' depth %d usage %d\n", t, t->name, depth, t->usage);
d385 1
a385 1
	    fdebugf(stderr, "encoding_table_remove_unused: removing %p\n", t);
d507 1
a507 1
    fdebugf(stderr, "encoding_load_map_file: '%s'\n", leaf);
d513 1
a513 1
	fdebugf(stderr, "encoding_load_map_file: found %p\n", t);
d519 1
a519 1
	    fdebugf(stderr, "encoding_load_map_file: move to top prev %p\n", prev);
d574 4
@


1.29
log
@Improved SCSU "to lock or not to lock" learning.
Improved handling of SIP ideographs.
Added ISO-8859-11 (csISOLatinThai).
Renamed Latin13 to Latin7.

Version 0.42. Tagged as 'Unicode-0_42'
@
text
@d67 1
a67 1
 {   csISOLatinHebrew /* 11 */, 1, "/ISO-8859-8/ISO-IR-138/", lang_HEBREW, &enc_iso8859, "\x1B\x2D\x48" },		/* Select Hebrew right half */
@


1.28
log
@SCSU encoder made aware of SIP (Supplementary Plane for Unified CJK Ideographs).
UTF-8 encoder handles out-of-space conditions correctly.
ISO 2022 encoder/decoder doesn't try to load table 7E (the null table).
encoding_new() does identify a null MIME string with auto-detect Japanese.
UnicodeData 3.0.0 imported.

Version 0.41. Tagged as 'Unicode-0_41'
@
text
@d61 4
a64 4
 {   csISOLatin1 /* 4 */, 1, "/ISO-8859-1/ISO-IR-101/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x41\x1B\x2F\x50"		/* Select Latin-1 right half and G3 supplement */ },
 {   csISOLatin2 /* 5 */, 1, "/ISO-8859-2/ISO-IR-102/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x42\x1B\x2F\x50" },	/* Select Latin-2 right half */
 {   csISOLatin3 /* 6 */, 1, "/ISO-8859-3/ISO-IR-109/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x43\x1B\x2F\x50" },	/* Select Latin-3 right half */
 {   csISOLatin4 /* 7 */, 1, "/ISO-8859-4/ISO-IR-110/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x44\x1B\x2F\x50" },	/* Select Latin-4 right half */
d66 1
a66 1
 {   csISOLatinGreek /* 10 */, 1, "/ISO-8859-7/ISO-IR-126/", lang_GREEK, &enc_iso8859, "\x1B\x2D\x46" },			/* Select Greek right half */
d68 1
a68 1
 {   csISOLatin5 /* 12 */, 1, "/ISO-8859-9/ISO-IR-148/", lang_TURKISH, &enc_iso8859, "\x1B\x2D\x4D\x1B\x2F\x50" },	/* Select Latin-5 right half */
d70 4
a162 3
 { csISOLatin8, 1, "/ISO-8859-14/ISO-IR-199/", lang_IRISH, &enc_iso8859, "\x1B\x2D\x5F" },	/* Select Celtic right half */
 { csISOLatin9, 1, "/ISO-8859-15/ISO-IR-203/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x62" },	/* Select Latin9 right half */
/*  { 4001, "/ISO-IR-179/", &enc_baltic_rim }, */
a163 1
 { csISOLatin13, 1, "/ISO-8859-13/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x59" },		/* Select Baltic Rim right half */
@


1.27
log
@Added Windows-1254.
Changed default language of Latin-5 (ISO 8859-9) from English to Turkish.

Version 0.40. Tagged as 'Unicode-0_40'
@
text
@d168 2
a169 2
 { csAutodetectJP, 0, "//", lang_JAPANESE, NULL, NULL },	/* entry so we can get language */
 { csEUCorShiftJIS, 0, "//", lang_JAPANESE, NULL, NULL },	/* entry so we can get language */
d355 1
@


1.26
log
@Added new header file iso3166.h with list of country codes
Modified encoding.c so that Chinese encodings use the correct
country code as a secondary tag to the language code so that
we can distinguish Chinese Simplified and Traditional.

Version 0.39. Tagged as 'Unicode-0_39'
@
text
@d68 1
a68 1
 {   csISOLatin5 /* 12 */, 1, "/ISO-8859-9/ISO-IR-148/", lang_ENGLISH, &enc_iso8859, "\x1B\x2D\x4D\x1B\x2F\x50" },	/* Select Latin-5 right half */
d157 1
d197 1
a197 1
	
d381 1
a381 1
	    
@


1.25
log
@Fixed encoding_table_remove_unused() which totally failed to
work correctly would most likely crash as soon as it tried to
free any tables.
Verified that fixed version does work within branched.

Version 0.38. Tagged as 'Unicode-0_38'
@
text
@d45 1
d122 1
a122 1
 { csISO2022CN /* 104 */, 0, "/ISO-2022-CN/", lang_CHINESE, &enc_iso2022_shifts, NULL,
d128 1
a128 1
 { csISO2022CN_EXT /* 105 */, 0, "/ISO-2022-CN-EXT/", lang_CHINESE, &enc_iso2022_shifts, NULL,
d145 1
a145 1
 { csGB2312 /* 2025 */, 2, "/GB2312/CN-GB/GB_2312-80/EUC-CN/GBK/", lang_CHINESE, &enc_iso2022_euc,
d147 1
a147 1
 { csBig5 /* 2026 */, 2, "/BIG5/CN-BIG5/BIG_FIVE/", lang_CHINESE, &enc_bigfive },
@


1.24
log
@Fixed encoding_new() so that it returns NULL if an encoding is
chosen that does not have an encoding structure with it.
e.g. encoding 0 or AutoDetectJP.

Version 0.37. Tagged as 'Unicode-0_37'
@
text
@d367 4
a370 3
    for (prev = NULL, t = enc_table_list, depth = 0;
	 t;
	 prev = t, t = t->next, depth++)
d372 4
d378 2
d382 2
d386 7
@


1.23
log
@Changed encoding_table_remove_unused() so that it takes a
parameter giving the depth from which to start purging.
Fixed ISO2022 write code to free search tables.
Added unix.c for unix-targeted builds.
Updated cross-compile build.
Added unix-targeted build of library and textconv tool
in ccsolaris directory.

Version 0.36. Tagged as 'Unicode-0_36'
@
text
@d190 7
a196 1
	int size = sizeof(EncodingPriv) + e->encoding->ws_size;
@


1.22
log
@Updated ISO 2022 handling to write ISO 2022-KR and ISO 2022-CN. Fixed various
bugs.
x-Current encoding didn't work if International 1.50 wasn't loaded.
Adjusted various ISO 2022 escape sequence tables to change prioritisation.
ISO 2022 writer won't shift character set until required.

Version 0.35. Tagged as 'Unicode-0_35'
@
text
@a27 1
#include "swis.h"
d117 3
a119 3
                /* "\x1B\x20\x41" /* GR is not used. G0 designation only */
                /* "\x1B\x20\x46" /* C1 is used, represented by ESC Fe */
                /* "\x1B\x20\x5A" /* G2 is used, invoked with SS2 */
d353 4
a356 1
void encoding_table_remove_unused(void)
d359 3
a361 1
    for (prev = NULL, t = enc_table_list;
d363 1
a363 1
	 prev = t, t = t->next)
d365 1
a365 1
	if (t->usage <= 0)
a376 1
    int depth = 0;
a382 2
	else
	    depth++;
d386 1
a386 1
	*pprev = depth > DEPTH_CUTOFF ? prev : NULL;
a487 2
	/* 'prev' is returned if 't' is further than a certain number
           of levels down */
@


1.21
log
@Implemented SCSU and UTF-7.
Added encoding_set_flags().
Proper handling of byte order marks in UTF-16 and UCS-4.
Fixed UTF-16 surrogate writing.
Adjusted various MIME charset identifiers.
Incorporated latest Unicode Character Database (2.1.8).
Added "current system alphabet" encoding.
Created "TextConv" command line character set conversion utility.

Version 0.34. Tagged as 'Unicode-0_34'
@
text
@d88 4
a91 1
		"\x1B\x24\x29\x43" },
d93 2
a94 2
		"\x1B\x24\x29\x43" },			/* Select G1 = KS C 5601 */
 {   csISO2022JP /* 39 */, 0, "/ISO-2022-JP/JIS_Encoding/", lang_JAPANESE, &enc_iso2022_escapes, NULL,
d97 1
d99 1
a99 1
		"\x1B\x24\x42"	/* JIS X 1983 */
d101 1
a101 1
 {   csISO2022JP1, 0, "/ISO-2022-JP-1/", lang_JAPANESE, &enc_iso2022_escapes, NULL,
d104 1
a105 1
		"\x1B\x24\x42"	    /* JIS X 0208-1983 */
d108 1
a108 1
 {   csISO2022JP2 /* 40 */, 0, "/ISO-2022-JP-2/", lang_JAPANESE, &enc_iso2022_escapes, NULL,
d110 2
d113 1
a114 1
		"\x1B\x24\x42"	   /* JIS X 0208-1983 */
d117 22
a138 1
                "\x1B\x24\x28\x43" /* KS C 5601-1992 (Korean) */
a139 2
 { csISO2022CN /* 104 */, 0, "/ISO-2022-CN/", lang_CHINESE, &enc_iso2022 },
 { csISO2022CN_EXT /* 105 */, 0, "/ISO-2022-CN-EXT/", lang_CHINESE, &enc_iso2022 },
@


1.20
log
@Added copyright messages to all source files and unified the
header #define's.

Version 0.33. Not tagged
@
text
@d37 1
d41 2
d115 1
d117 2
a118 2
 { csUCS4 /* 1001 */, 4, "/ISO-10646-UCS-4/UCS-4/", lang_ANY, &enc_ucs4 },
 { csUnicode11 /* 1010 */, 8, "/UCS-2/UTF-16/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", lang_ANY, &enc_utf16 }, /* More general!!! */
d120 1
a120 1
 { csGB2312 /* 2025 */, 2, "/X-EUC_CN/GB2312/CN-GB/GB_2312-80", lang_CHINESE, &enc_iso2022_euc,
d122 1
a122 1
 { csBig5 /* 2026 */, 2, "/CN-BIG5/BIG5/", lang_CHINESE, &enc_bigfive },
d138 2
a139 1
 { csJohab, 2, "/JOHAB/X-JOHAB/", lang_KOREAN, &enc_johab },
d144 1
d175 1
d205 2
d417 9
@


1.19
log
@Created new file riscos.c for RISC OS specific functions. Rest of
library should remain portable. Moved function to load a map file
into that new file. Added #defines for directory separator and
wild card characters and updated the various file names.

Version 0.33. Tagged as 'Unicode-0_33'
@
text
@d15 10
@


1.18
log
@Added Korean Johab encoding (untested).
Reinstated use of data->data relocations.

Version 0.32. Not tagged
@
text
@d109 4
a112 4
 { csMacintosh /* 2027 */, 1, "/MACINTOSH/X-MAC-ROMAN/MAC-ROMAN/", lang_ENGLISH, &enc_eightbit, "Apple.Roman" },
 { csMacCentEuro, 1, "/X-MAC-CENTRALEURROMAN/MAC-CENTRALEURROMAN/", lang_CZECH, &enc_eightbit, "Apple.CentEuro" },
 { csMacCyrillic, 1, "/X-MAC-CYRILLIC/MAC-CYRILLIC/", lang_RUSSIAN, &enc_eightbit, "Apple.Cyrillic" },
 { csMacUkrainian, 1, "/X-MAC-UKRAINIAN/MAC-UKRAINIAN/", lang_UKRAINIAN, &enc_eightbit, "Apple.Ukrainian" },
d114 4
a117 4
 { csIBM866 /* 2086 */, 1, "/CP866/IBM866/866/", lang_RUSSIAN, &enc_eightbit, "Microsoft.CP866" },
 { csWindows1250 /* 2250 */, 1, "/WINDOWS-1250/", lang_ENGLISH, &enc_eightbit, "Microsoft.CP1250" },
 { csWindows1251 /* 2251 */, 1, "/WINDOWS-1251/", lang_RUSSIAN, &enc_eightbit, "Microsoft.CP1251" },
 { csWindows1252 /* 2252 */, 1, "/WINDOWS-1252/", lang_ENGLISH, &enc_eightbit, "Microsoft.CP1252" },
d125 2
a126 2
 { csAcornLatin1, 1, "/X-ACORN-LATIN1/", lang_ENGLISH, &enc_eightbit, "Acorn.Latin1" },
 { csAcornFuzzy, 1, "/X-ACORN-FUZZY/", lang_ENGLISH, &enc_acorn, "Acorn.Latin1" },
d414 5
a418 2
/* To be supplied by the application */
/* extern void encoding_leaf_to_path(char *out, const char *leaf); */
a421 4
    int ftype = 0, flen, fh, filesys;
    void *inthandle;
    char fname[256];
    _kernel_oserror *e;
a448 29
    /* otherwise load it */
    strcpy(fname, "Unicode:Encodings.");
    strncat(fname, leaf, sizeof(fname));
    fname[sizeof(fname)-1] = 0;

    /* Check it's a file, and get it's length */
    _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 23, fname, &ftype, &flen);

    fdebugf(stderr, "encoding_load_map_file: '%s' type %d len %d\n", fname, ftype, flen);

    if ((ftype & 1) == 0)
        return NULL;

    /* Open the file for input */
    e = _swix(OS_Find, _INR(0,1)|_OUT(0), 0x4F, fname, &fh);
    if (e)
        return NULL;

    /* Obtain the filing system number and internal handle */
    e = _swix(OS_FSControl, _INR(0,1)|_OUTR(1,2), 21, fh, &inthandle, &filesys);

    /* Close the file */
    _swix(OS_Find, _INR(0,1), 0, fh);

    /* return if an error after closing file */
    if (e)
        return NULL;


a461 1

d464 2
a465 25
    /* If it's ResourceFS, return a direct pointer */
    if ((filesys & 0xFF) == 46)
    {
        t->table = (UCS2 *)inthandle;
	t->n_entries = (((const int *)t->table)[-1] - 4)/2;
    }
    else
    {
	/* Otherwise, load it */
	t->table = encoding__alloc(flen);
	t->alloc = 1;
	if (t->table)
	{
	    t->n_entries = flen/2;

	    e = _swix(OS_File, _INR(0,3), 16, fname, t->table, 0);
	    if (e)
	    {
		encoding__free(t->table);
		t->table = NULL;
	    }
	}
    }

    if (t->table)
@


1.17
log
@Mac Cyrillic, Ukrainian, Central European added.
DOS code page 866 (Russian) added.

Version 0.32. Tagged as 'Unicode-0_32'
@
text
@d24 1
a42 14
#define ENC_ascii		0
#define ENC_iso8859		1
#define ENC_shiftjis		2
#define ENC_eightbit		3
#define ENC_iso2022_escapes	4
#define ENC_iso2022_euc		5
#define ENC_iso2022		6
#define ENC_bigfive		7
#define ENC_utf8		8
#define ENC_utf16		9
#define ENC_ucs4		10
#define ENC_iso2022_shifts	11
#define ENC_acorn		12

d47 11
a57 11
 {   csASCII /* 3 */, 1, "/US-ASCII/", lang_ENGLISH, (EncodingPriv *)ENC_ascii, NULL },
 {   csISOLatin1 /* 4 */, 1, "/ISO-8859-1/ISO-IR-101/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x41\x1B\x2F\x50"		/* Select Latin-1 right half and G3 supplement */ },
 {   csISOLatin2 /* 5 */, 1, "/ISO-8859-2/ISO-IR-102/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x42\x1B\x2F\x50" },	/* Select Latin-2 right half */
 {   csISOLatin3 /* 6 */, 1, "/ISO-8859-3/ISO-IR-109/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x43\x1B\x2F\x50" },	/* Select Latin-3 right half */
 {   csISOLatin4 /* 7 */, 1, "/ISO-8859-4/ISO-IR-110/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x44\x1B\x2F\x50" },	/* Select Latin-4 right half */
 {   csISOLatinCyrillic /* 8 */, 1, "/ISO-8859-5/ISO-IR-144/", lang_RUSSIAN, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x4C" },		/* Select Cyrillic right half */
 {   csISOLatinGreek /* 10 */, 1, "/ISO-8859-7/ISO-IR-126/", lang_GREEK, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x46" },			/* Select Greek right half */
 {   csISOLatinHebrew /* 11 */, 1, "/ISO-8859-8/ISO-IR-138/", lang_HEBREW, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x48" },		/* Select Hebrew right half */
 {   csISOLatin5 /* 12 */, 1, "/ISO-8859-9/ISO-IR-148/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x4D\x1B\x2F\x50" },	/* Select Latin-5 right half */
 {   csISOLatin6 /* 13 */, 1, "/ISO-8859-10/ISO-IR-157/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x56\x1B\x2E\x58" },	/* Select Latin-6 right half, and Sami supplement as G2 */
 {   csShiftJIS /* 17 */, 2, "/SHIFT_JIS/X-SJIS/", lang_JAPANESE, (EncodingPriv *)ENC_shiftjis },
d66 1
a66 1
 {   csEUCPkdFmtJapanese /* 18 */, 2, "/EUC-JP/", lang_JAPANESE, (EncodingPriv *)ENC_iso2022_euc,
d74 1
a74 1
 {   csISO2022KR /* 37 */, 3, "/ISO-2022-KR/", lang_KOREAN, (EncodingPriv *)ENC_iso2022_shifts, NULL,
d76 1
a76 1
 {   csEUCKR  /* 38 */, 0, "/EUC-KR/", lang_KOREAN, (EncodingPriv *)ENC_iso2022_euc,
d78 1
a78 1
 {   csISO2022JP /* 39 */, 0, "/ISO-2022-JP/JIS_Encoding/", lang_JAPANESE, (EncodingPriv *)ENC_iso2022_escapes, NULL,
d84 1
a84 1
 {   csISO2022JP1, 0, "/ISO-2022-JP-1/", lang_JAPANESE, (EncodingPriv *)ENC_iso2022_escapes, NULL,
d91 1
a91 1
 {   csISO2022JP2 /* 40 */, 0, "/ISO-2022-JP-2/", lang_JAPANESE, (EncodingPriv *)ENC_iso2022_escapes, NULL,
d100 7
a106 7
 { csISO2022CN /* 104 */, 0, "/ISO-2022-CN/", lang_CHINESE, (EncodingPriv *)ENC_iso2022 },
 { csISO2022CN_EXT /* 105 */, 0, "/ISO-2022-CN-EXT/", lang_CHINESE, (EncodingPriv *)ENC_iso2022 },
 { csUTF8 /* 106 */, 6, "/UTF-8/UNICODE-1-1-UTF-8/UNICODE-2-0-UTF-8/", lang_ANY, (EncodingPriv *)ENC_utf8 },		/* More general!!! */
 { csUCS4 /* 1001 */, 4, "/ISO-10646-UCS-4/UCS-4/", lang_ANY, (EncodingPriv *)ENC_ucs4 },
 { csUnicode11 /* 1010 */, 8, "/UCS-2/UTF-16/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", lang_ANY, (EncodingPriv *)ENC_utf16 }, /* More general!!! */
 { 2022, 0, "/ISO-2022/", lang_ANY, (EncodingPriv *)ENC_iso2022 },
 { csGB2312 /* 2025 */, 2, "/X-EUC_CN/GB2312/CN-GB/GB_2312-80", lang_CHINESE, (EncodingPriv *)ENC_iso2022_euc,
d108 19
a126 18
 { csBig5 /* 2026 */, 2, "/CN-BIG5/BIG5/", lang_CHINESE, (EncodingPriv *)ENC_bigfive },
 { csMacintosh /* 2027 */, 1, "/MACINTOSH/X-MAC-ROMAN/MAC-ROMAN/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Apple.Roman" },
 { csMacCentEuro, 1, "/X-MAC-CENTRALEURROMAN/MAC-CENTRALEURROMAN/", lang_CZECH, (EncodingPriv *)ENC_eightbit, "Apple.CentEuro" },
 { csMacCyrillic, 1, "/X-MAC-CYRILLIC/MAC-CYRILLIC/", lang_RUSSIAN, (EncodingPriv *)ENC_eightbit, "Apple.Cyrillic" },
 { csMacUkrainian, 1, "/X-MAC-UKRAINIAN/MAC-UKRAINIAN/", lang_UKRAINIAN, (EncodingPriv *)ENC_eightbit, "Apple.Ukrainian" },
 { csKOI8R /* 2084 */, 1, "/KOI8-R/", lang_RUSSIAN, (EncodingPriv *)ENC_eightbit, "KOI8-R" },
 { csIBM866 /* 2086 */, 1, "/CP866/IBM866/866/", lang_RUSSIAN, (EncodingPriv *)ENC_eightbit, "Microsoft.CP866" },
 { csWindows1250 /* 2250 */, 1, "/WINDOWS-1250/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Microsoft.CP1250" },
 { csWindows1251 /* 2251 */, 1, "/WINDOWS-1251/", lang_RUSSIAN, (EncodingPriv *)ENC_eightbit, "Microsoft.CP1251" },
 { csWindows1252 /* 2252 */, 1, "/WINDOWS-1252/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Microsoft.CP1252" },
 { csWelsh, 1, "/ISO-IR-182/", lang_WELSH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x5C" },			/* Select Welsh right half */
 { csISOLatin8, 1, "/ISO-8859-14/ISO-IR-199/", lang_IRISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x5F" },	/* Select Celtic right half */
 { csISOLatin9, 1, "/ISO-8859-15/ISO-IR-203/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x62" },	/* Select Latin9 right half */
/*  { 4001, "/ISO-IR-179/", (EncodingPriv *)ENC_baltic_rim }, */
 { csSami, 1, "/ISO-IR-197/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x5D" },		/* Select Sami right half */
 { csISOLatin13, 1, "/ISO-8859-13/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x59" },		/* Select Baltic Rim right half */
 { csAcornLatin1, 1, "/X-ACORN-LATIN1/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Acorn.Latin1" },
 { csAcornFuzzy, 1, "/X-ACORN-FUZZY/", lang_ENGLISH, (EncodingPriv *)ENC_acorn, "Acorn.Latin1" },
a133 58
static void fixup(void)
{
    EncList *ep;
    static int fixed = 0;

    if (fixed)
	return;

    fixed = 1;
    for (ep = enclist; ep->names ; ep++)
    {
	switch ((int)ep->encoding)
	{
	case ENC_ascii:
	    ep->encoding = &enc_ascii;
	    break;
	case ENC_iso8859:
	    ep->encoding = &enc_iso8859;
	    break;
	case ENC_shiftjis:
	    ep->encoding = &enc_shiftjis;
	    break;
	case ENC_eightbit:
	    ep->encoding = &enc_eightbit;
	    break;
	case ENC_iso2022_escapes:
	    ep->encoding = &enc_iso2022_escapes;
	    break;
	case ENC_iso2022_euc:
	    ep->encoding = &enc_iso2022_euc;
	    break;
	case ENC_iso2022:
	    ep->encoding = &enc_iso2022;
	    break;
	case ENC_bigfive:
	    ep->encoding = &enc_bigfive;
	    break;
	case ENC_utf8:
	    ep->encoding = &enc_utf8;
	    break;
	case ENC_utf16:
	    ep->encoding = &enc_utf16;
	    break;
	case ENC_ucs4:
	    ep->encoding = &enc_ucs4;
	    break;
	case ENC_iso2022_shifts:
	    ep->encoding = &enc_iso2022_shifts;
	    break;
	case ENC_acorn:
	    ep->encoding = &enc_acorn;
	    break;
	}
    }
}

/* ----------------------------------------------------------------------------- */

a146 2

    fixup();
@


1.16
log
@Changed EUC JP to use ASCII rather than JIS Roman in G0 set.

Version 0.30. Tagged as 'Unicode-0_30'
@
text
@d122 4
a125 1
 { csMacintosh /* 2027 */, 1, "/MACINTOSH/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Apple.MacRoman" },
d127 1
@


1.15
log
@Updated all the writers to ignore the NULL_UCS4 character (as had
been previously added to the iso2022_escapes case). Any new writers
should flush any pending characters they may have at this point.
Also udpated enc_UCS4.c and utf8.c to turn all illegal characeters
(top bit set) into FFFD.

Version 0.28. Tagged as 'Unicode-0_28'
@
text
@d73 1
a73 2
     * Select G0 = JIS X 0201 Roman      (ESC ( J)
     *        G1 = JIS X 0208            (ESC $ ) B)
d80 1
a80 1
			      "\x1B\x28\x4A"
@


1.14
log
@Added new function encoding_default_mime_type() which given an
encoding number returns the first mime type from the matching
entry in the table.

Version 0.27. Tagged as 'Unicode-0_27'
@
text
@d126 1
a126 1
 { csWindows1251 /* 2251 */, 1, "/WINDOWS-1251/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Microsoft.CP1251" },
@


1.13
log
@Added ISO 2022-JP-1. Faffed around with ISO 2022-JP-x table lists.

Version 0.19. Tagged as 'Unicode-0_19'
@
text
@d296 22
@


1.12
log
@MIME type changes. ISO-IR-... form added for Latin3, 4, 5, 6, Cyrillic,
Greek and Hebrew. ISO-8859-.. added for Celtic, which is renamed to
csISOLatin8 in the header file from csCeltic; csISOLatin9 added (ISO-IR-203);
csSami ISO-8859-15 MIME type form removed to not clash with csISOLatin9
(added to the header, defined as 4007 to follow on from csISOLatin8).
@
text
@d93 1
a93 1
             /* "\x1B\x28\x42"     ASCII      */
d98 7
d106 7
a112 7
	     /* "\x1B\x28\x42"        ASCII */
		"\x1B\x28\x4A"
		"\x1B\x24\x40"
		"\x1B\x24\x42"
             /* "\x1B\x24\x42"        GB 2312-80 */
             /* "\x1B\x24\x28\x43"    KS  C 1992 */
                "\x1B\x24\x28\x44" /* JIS X 1990 */
@


1.11
log
@Added entry for ISO-IR-199 (Celtic)

Version 0.15. Tagged as 'Unicode-0_15'
@
text
@d61 1
a61 1
 {   csISOLatin1 /* 4 */, 1, "/ISO-8859-1/ISO-IR-101/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x41\x1B\x2F\x50"	/* Select Latin-1 right half and G3 supplement */ },
d63 7
a69 7
 {   csISOLatin3 /* 6 */, 1, "/ISO-8859-3/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x43\x1B\x2F\x50" },		/* Select Latin-3 right half */
 {   csISOLatin4 /* 7 */, 1, "/ISO-8859-4/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x44\x1B\x2F\x50" },		/* Select Latin-4 right half */
 {   csISOLatinCyrillic /* 8 */, 1, "/ISO-8859-5/", lang_RUSSIAN, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x4C" },			/* Select Cyrillic right half */
 {   csISOLatinGreek /* 10 */, 1, "/ISO-8859-7/", lang_GREEK, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x46" },			/* Select Greek right half */
 {   csISOLatinHebrew /* 11 */, 1, "/ISO-8859-8/", lang_HEBREW, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x48" },			/* Select Hebrew right half */
 {   csISOLatin5 /* 12 */, 1, "/ISO-8859-9/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x4D\x1B\x2F\x50" },		/* Select Latin-5 right half */
 {   csISOLatin6 /* 13 */, 1, "/ISO-8859-10/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x56\x1B\x2E\x58" },		/* Select Latin-6 right half, and Sami supplement as G2 */
d122 2
a123 1
 { csCeltic, 1, "/ISO-IR-199/", lang_IRISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x5F" },			/* Select Welsh right half */
d125 1
a125 1
 { csSami, 1, "/ISO-8859-15/ISO-IR-197/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x5D" },		/* Select Sami right half */
@


1.10
log
@Added Microsoft Cyrillic (CP1251)

Version 0.14. Tagged as 'Unicode-0_14'
@
text
@d122 1
@


1.9
log
@ Fixed autojp state machine. It wasn't resetting 'state' to HAD_NONE after
changing whatcode. So basically it was lucky it ever worked. Also rewrote
the various range tests to only use one compare per case.
Changed the 'for_encoding' parameter to encoding_write() to an enumeration.
Added a new type of writing where if the character cannot be encoded then
the function returns -1 rather than writing a default character
Added the pseudo-charsets csAutodetectJP and csEUCorShiftJIS to the encoding
table so that they return the correct default language (ja).
Added function to remove unused encoding tables (must be called explicitly).
Fixed usage counting in iso2022 (I think).
When looking up encoding name try stripping 'x-' and 'X-' off the front i
can't find on first pass.

Version 0.12. Tagged as 'Unicode-0_12'
@
text
@d61 1
a61 1
 {   csISOLatin1 /* 4 */, 1, "/ISO-8859-1/ISO-IR-101/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x41\x1B\x2F\x50"	/* Select Latin-1 right half and G3 supplement */ }, 
d119 1
d207 1
a207 1
    
d219 1
a219 1
	    
d247 1
a247 1
    
d298 1
a298 1
    
d334 1
a334 1
    
d380 1
a380 1
	    
d464 1
a464 1
    
d470 1
a470 1
	
d487 1
a487 1
    
d492 1
a492 1
    
d497 1
a497 1
    
d516 1
a516 1
    
d522 1
a522 1
    
d532 1
a532 1
    
d568 1
a568 1
    
@


1.8
log
@Fixed iso2202_write_escapes() (as used by JIS encoding) so that it actually works.
It also now assumes that the first write encoding is already set up.

Version 0.10. Tagged as 'Unicode-0_10'
@
text
@d126 2
d258 1
a258 1
    if (e && !e->for_encoding)
d267 1
a267 1
    if (e && e->for_encoding)
d283 1
a283 1
    return e ? e->lang : "en";
d337 26
d406 1
a406 1
int encoding_number_from_name(const char *name)
d437 14
d573 1
a573 1
    t->alloc--;
@


1.7
log
@Changed default language for Unicode encodings to be ANY rather than english.

Version 0.09. Tagged as 'Unicode-0_09'
@
text
@d93 5
a97 4
		"\x1B\x28\x42"
		"\x1B\x28\x4A"
		"\x1B\x24\x40"
		"\x1B\x24\x42" },
d99 1
a99 1
		"\x1B\x28\x42"
d103 4
a106 2
                "\x1B\x24\x28\x43"
                "\x1B\x24\x28\x44" },
@


1.6
log
@Fixed when SS1 or SS2 followed by a set change by disallowing controlcharacters
after single shifts.
Made encoding_table_ptr and encoding_n_table_entries check for null tables.
moved 'Lm' type characters from marks to letters in mkunictype.

Version 0.08. Tagged as 'Unicode-0_08'
@
text
@d56 2
d106 4
a109 4
 { csUTF8 /* 106 */, 6, "/UTF-8/UNICODE-1-1-UTF-8/UNICODE-2-0-UTF-8/", lang_ENGLISH, (EncodingPriv *)ENC_utf8 },		/* More general!!! */
 { csUCS4 /* 1001 */, 4, "/ISO-10646-UCS-4/UCS-4/", lang_ENGLISH, (EncodingPriv *)ENC_ucs4 },
 { csUnicode11 /* 1010 */, 8, "/UCS-2/UTF-16/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", lang_ENGLISH, (EncodingPriv *)ENC_utf16 }, /* More general!!! */
 { 2022, 0, "/ISO-2022/", lang_ENGLISH, (EncodingPriv *)ENC_iso2022 },
@


1.5
log
@Recreated acorn.c to hold new encoding cdAcornFuzzy. This writes an
Acorn Latin1 encoding using fuzzy mapping to get the greatest number
of displayable characters. Reads as Acorn.Latin1.

Version 0.07. Tagged as 'Unicode-0_07'
@
text
@d302 1
a302 1
    return t->table;
d307 1
a307 1
    return t->n_entries;
@


1.4
log
@Added new file 'languages.h' with some ISO639 language codes.
Added a default language field to each encoding (using above codes).
Added a max char size field to each encoding.
Tidied up some of the reencoders behaviour when output ptr NULL.
Fixed a load of charset numbers which were wrong.
New UTF8 function to skiop multiple characters in a string.
Fixed RISC OS build which was out of date.

Version 0.04. Tagged as 'Unicode-0_04'
@
text
@d29 1
d54 1
d120 1
d174 3
@


1.3
log
@Fixed encoding table so that modules builds will work.
Made all tables be on linked list to avoid static copies of pointers.
Removed redundant 8bit files.

Version 0.03. Tagged as 'Unicode-0_03'
@
text
@d31 1
d56 11
a66 11
 {    3, "/US-ASCII/", (EncodingPriv *)ENC_ascii, NULL },
 {    4, "/ISO-8859-1/ISO-IR-101/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x41\x1B\x2F\x50"	/* Select Latin-1 right half and G3 supplement */ }, 
 {    5, "/ISO-8859-2/ISO-IR-102/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x42\x1B\x2F\x50" },	/* Select Latin-2 right half */
 {    6, "/ISO-8859-3/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x43\x1B\x2F\x50" },		/* Select Latin-3 right half */
 {    7, "/ISO-8859-4/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x44\x1B\x2F\x50" },		/* Select Latin-4 right half */
 {    8, "/ISO-8859-5/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x4C" },			/* Select Cyrillic right half */
 {   10, "/ISO-8859-7/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x46" },			/* Select Greek right half */
 {   11, "/ISO-8859-8/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x48" },			/* Select Hebrew right half */
 {   12, "/ISO-8859-9/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x4D\x1B\x2F\x50" },		/* Select Latin-5 right half */
 {   13, "/ISO-8859-10/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x56\x1B\x2E\x58" },		/* Select Latin-6 right half, and Sami supplement as G2 */
 {   17, "/SHIFT_JIS/X-SJIS/", (EncodingPriv *)ENC_shiftjis },
d76 1
a76 1
 {   18, "/EUC-JP/", (EncodingPriv *)ENC_iso2022_euc,
d84 1
a84 1
 {   37, "/ISO-2022-KR/", (EncodingPriv *)ENC_iso2022_shifts, NULL,
d86 1
a86 1
 {   38, "/EUC-KR/", (EncodingPriv *)ENC_iso2022_euc,
d88 1
a88 1
 {   39, "/ISO-2022-JP/JIS_Encoding/", (EncodingPriv *)ENC_iso2022_escapes, NULL,
d93 1
a93 1
 {   40, "/ISO-2022-JP-2/", (EncodingPriv *)ENC_iso2022_escapes, NULL,
d100 7
a106 9
 {  104, "/ISO-2022-CN/", (EncodingPriv *)ENC_iso2022
 },
 {  105, "/ISO-2022-CN-EXT/", (EncodingPriv *)ENC_iso2022
 },
 {  106, "/UTF-8/UNICODE-1-1-UTF-8/UNICODE-2-0-UTF-8/", (EncodingPriv *)ENC_utf8 },		/* More general!!! */
 { 1001, "/ISO-10646-UCS-4/UCS-4/", (EncodingPriv *)ENC_ucs4 },
 { 1010, "/UCS-2/UTF-16/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", (EncodingPriv *)ENC_utf16 }, /* More general!!! */
 { 2022, "/ISO-2022/", (EncodingPriv *)ENC_iso2022 },
 { 2025, "/X-EUC_CN/GB2312/CN-GB/GB_2312-80", (EncodingPriv *)ENC_iso2022_euc,
d108 6
a113 6
 { 2026, "/CN-BIG5/BIG5/", (EncodingPriv *)ENC_bigfive },
 { 2027, "/MACINTOSH/", (EncodingPriv *)ENC_eightbit, "Apple.MacRoman" },
 { 2084, "/KOI8-R/", (EncodingPriv *)ENC_eightbit, "KOI8-R" },
 { 2250, "/WINDOWS-1250/", (EncodingPriv *)ENC_eightbit, "Microsoft.CP1250" },
 { 2252, "/WINDOWS-1252/", (EncodingPriv *)ENC_eightbit, "Microsoft.CP1252" },
 { csWelsh, "/ISO-IR-182/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x5C" },			/* Select Welsh right half */
d115 4
a118 4
 { csSami, "/ISO-8859-15/ISO-IR-197/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x5D" },		/* Select Sami right half */
 { csISOLatin13, "/ISO-8859-13/", (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x59" },		/* Select Baltic Rim right half */
 { csAcornLatin1, "/X-ACORN-LATIN1/", (EncodingPriv *)ENC_eightbit, "Acorn.Latin1" },
 { 0, NULL, NULL }
d178 9
d189 1
a189 1
    struct EncList *e = enclist;
d194 1
a194 1
    for (e = enclist; e->identifier; e++)
d196 3
a198 5
        if (e->identifier == n)
        {
	    int size = sizeof(EncodingPriv) + e->encoding->ws_size;
            enc = encoding__alloc(size);
            if (!enc) return NULL;
d200 2
a201 2
	    memset(enc, 0, size);
            *enc = *e->encoding;
d203 2
a204 2
	    enc->list_entry = e;
	    enc->for_encoding = for_encoding;
d206 5
a210 5
	    if (enc->reset && !enc->reset(enc, for_encoding))
	    {
		encoding__free(enc);
		enc = NULL;
	    }
d212 1
a212 2
	    return enc;
        }
d259 12
@


1.2
log
@Removed used of external encoding_load_map_file(). Now references
Unicode:Encodings directly.

Version 0.02. Tagged as 'Unicode-0_02'
@
text
@d25 1
a25 4
#include "koi8r.h"
#include "microsoft.h"
#include "apple.h"
#include "acorn.h"
d34 2
d38 15
d55 11
a65 11
 {    3, "/US-ASCII/", &enc_ascii, NULL },
 {    4, "/ISO-8859-1/ISO-IR-101/", &enc_iso8859, "\x1B\x2D\x41\x1B\x2F\x50"	/* Select Latin-1 right half and G3 supplement */ }, 
 {    5, "/ISO-8859-2/ISO-IR-102/", &enc_iso8859, "\x1B\x2D\x42\x1B\x2F\x50" },	/* Select Latin-2 right half */
 {    6, "/ISO-8859-3/", &enc_iso8859, "\x1B\x2D\x43\x1B\x2F\x50" },		/* Select Latin-3 right half */
 {    7, "/ISO-8859-4/", &enc_iso8859, "\x1B\x2D\x44\x1B\x2F\x50" },		/* Select Latin-4 right half */
 {    8, "/ISO-8859-5/", &enc_iso8859, "\x1B\x2D\x4C" },			/* Select Cyrillic right half */
 {   10, "/ISO-8859-7/", &enc_iso8859, "\x1B\x2D\x46" },			/* Select Greek right half */
 {   11, "/ISO-8859-8/", &enc_iso8859, "\x1B\x2D\x48" },			/* Select Hebrew right half */
 {   12, "/ISO-8859-9/", &enc_iso8859, "\x1B\x2D\x4D\x1B\x2F\x50" },		/* Select Latin-5 right half */
 {   13, "/ISO-8859-10/", &enc_iso8859, "\x1B\x2D\x56\x1B\x2E\x58" },		/* Select Latin-6 right half, and Sami supplement as G2 */
 {   17, "/SHIFT_JIS/X-SJIS/", &enc_shiftjis },
d75 1
a75 1
 {   18, "/EUC-JP/", &enc_iso2022_euc,
d83 1
a83 1
 {   37, "/ISO-2022-KR/", &enc_iso2022_shifts, NULL,
d85 1
a85 1
 {   38, "/EUC-KR/", &enc_iso2022_euc,
d87 1
a87 1
 {   39, "/ISO-2022-JP/JIS_Encoding/", &enc_iso2022_escapes, NULL,
d92 1
a92 1
 {   40, "/ISO-2022-JP-2/", &enc_iso2022_escapes, NULL,
d99 1
a99 1
 {  104, "/ISO-2022-CN/", &enc_iso2022
d101 1
a101 1
 {  105, "/ISO-2022-CN-EXT/", &enc_iso2022
d103 5
a107 5
 {  106, "/UTF-8/UNICODE-1-1-UTF-8/UNICODE-2-0-UTF-8/", &enc_utf8 },		/* More general!!! */
 { 1001, "/ISO-10646-UCS-4/UCS-4/", &enc_ucs4 },
 { 1010, "/UCS-2/UTF-16/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", &enc_utf16 }, /* More general!!! */
 { 2022, "/ISO-2022/", &enc_iso2022 },
 { 2025, "/X-EUC_CN/GB2312/CN-GB/GB_2312-80", &enc_iso2022_euc,
d109 10
a118 10
 { 2026, "/CN-BIG5/BIG5/", &enc_bigfive },
 { 2027, "/MACINTOSH/", &enc_mac_roman },
 { 2084, "/KOI8-R/", &enc_koi8r },
 { 2250, "/WINDOWS-1250/", &enc_cp1250 },
 { 2252, "/WINDOWS-1252/", &enc_cp1252 },
 { csWelsh, "/ISO-IR-182/", &enc_iso8859, "\x1B\x2D\x5C" },			/* Select Welsh right half */
/*  { 4001, "/ISO-IR-179/", &enc_baltic_rim }, */
 { csSami, "/ISO-8859-15/ISO-IR-197/", &enc_iso8859, "\x1B\x2D\x5D" },		/* Select Sami right half */
 { csISOLatin13, "/ISO-8859-13/", &enc_iso8859, "\x1B\x2D\x59" },		/* Select Baltic Rim right half */
 { csAcornLatin1, "/X-ACORN-LATIN1/", &enc_acorn_latin1 },
d124 55
d184 2
d258 77
d384 1
a384 1
void *encoding_load_map_file(const char *leaf)
d390 1
a390 1
    void *table;
d392 26
a417 1
/*  encoding_leaf_to_path(fname, leaf); */
d425 3
a427 1
    if (ftype != 1)
d437 5
d445 14
a458 2
    /* Close the file */
    _swix(OS_Find, _INR(0,1), 0, fh);
d460 2
d464 12
a475 1
        return inthandle;
d477 8
a484 4
    /* Otherwise, load it */
    table = encoding__alloc(flen+4);
    if (!table)
        return NULL;
d486 6
a491 2
    e = _swix(OS_File, _INR(0,3), 16, fname, (char *)table+4, 0);
    if (e)
d493 3
a495 2
        encoding__free(table);
        return NULL;
d497 3
d501 3
a503 3
    *(int *)table = flen+4;
    
    return (char *)table + 4;
a512 25
}


/* Table size is number of bytes including the length word
 * Need to convert to number of 16bit entris
 */

int encoding_n_table_entries(const UCS2 *table)
{
    return table ? (((const int *)table)[-1] - 4)/2 : 0;
}

int encoding_lookup_in_table(UCS4 u, const UCS2 *table, int n_entries)
{
    const UCS2 *tt = table;

    if (tt)
    {
	int i;
	for (i = 0; i < n_entries; i++, tt++)
	    if ((UCS4)*tt == u)
		return i;
    }
    
    return -1;
@


1.1
log
@Initial version checked in

Version 0.01. Not tagged
@
text
@d234 1
a234 1
extern void encoding_leaf_to_path(char *out, const char *leaf);
d240 1
a240 1
    char fname[1024];
d244 5
a248 2
    encoding_leaf_to_path(fname, leaf);

@
