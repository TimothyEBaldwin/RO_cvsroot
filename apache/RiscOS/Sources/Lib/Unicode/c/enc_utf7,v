head	1.7;
access;
symbols
	Unicode-0_63:1.7
	Unicode-0_62:1.7
	Unicode-0_61:1.7
	Unicode-0_60:1.7
	Unicode-0_59:1.6
	Unicode-0_58:1.6
	Unicode-0_57:1.6
	Unicode-0_56:1.6
	Unicode-0_55:1.6
	Unicode-0_54:1.6
	RO_5_07:1.6
	Unicode-0_53:1.6
	Unicode-0_52:1.6
	Unicode-0_51:1.6
	Unicode-0_50:1.6
	Unicode-0_49:1.6
	Unicode-0_48:1.6
	Unicode-0_47:1.6
	Unicode-0_46:1.5
	Unicode-0_45:1.4
	dellis_autobuild_BaseSW:1.3
	sbrodie_sedwards_16Mar2000:1.3
	Unicode-0_44:1.3
	dcotton_autobuild_BaseSW:1.5
	Unicode-0_43:1.3
	Unicode-0_42:1.3
	Unicode-0_41:1.3
	Unicode-0_40:1.3
	Unicode-0_39:1.3
	Unicode-0_38:1.3
	Unicode-0_37:1.3
	Unicode-0_36:1.3
	Unicode-0_35:1.3
	Unicode-0_34:1.3
	Unicode-0_33:1.2
	Unicode-0_32:1.1
	Unicode-0_31:1.1
	Unicode-0_30:1.1
	Unicode-0_29:1.1
	Unicode-0_28:1.1
	Unicode-0_27:1.1
	Unicode-0_26:1.1
	Unicode-0_25:1.1
	Unicode-0_24:1.1
	Unicode-0_23:1.1
	ahodgkin_207release:1.1
	Unicode-0_22:1.1
	Unicode-0_21:1.1
	Unicode-0_20:1.1
	Unicode-0_19:1.1
	Unicode-0_18:1.1
	Unicode-0_16:1.1
	Unicode-0_15:1.1
	ahodgkin_205release:1.1
	ahodgkin_204release:1.1
	Unicode-0_14:1.1
	ahodgkin_133beta:1.1
	Unicode-0_13:1.1
	Unicode-0_12:1.1
	Unicode-0_10:1.1
	Unicode-0_09:1.1
	Unicode-0_08:1.1
	Unicode-0_07:1.1
	Unicode-0_06:1.1
	Unicode-0_05:1.1
	Unicode-0_04:1.1
	Unicode-0_03:1.1
	Unicode-0_02:1.1;
locks; strict;
comment	@# @;


1.7
date	2013.01.06.22.32.08;	author jbell;	state Exp;
branches;
next	1.6;
commitid	mXR1bDbpHeiotczw;

1.6
date	2002.06.10.15.08.35;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.13.10.38.05;	author jberanek;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.05.14.46.35;	author jberanek;	state Exp;
branches;
next	1.3;

1.3
date	99.03.11.17.01.22;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	99.02.24.13.33.46;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	97.11.11.16.24.45;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Add encoding_read_in_multibyte_sequence API.
Detail:
  The new API allows the client to determine if a read codec has run
  out of input in the middle of a multibyte sequence. This permits a
  client to distinguish between the two cases in which no output
  character is generated:

    a) insufficient input has been provided to complete an output character
    b) the input consisted of a complete multibyte sequence which generates
       no output (e.g. an ISO-2022 shift sequence)
Admin:
  Tested using Iconv.


Version 0.60. Tagged as 'Unicode-0_60'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > enc_utf7.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <stdlib.h>

#include "encpriv.h"

#include "enc_utf7.h"

typedef enum UTF7_State
{
    Direct,
    Shifted
} UTF7_State;

typedef struct UTF7_Encoding
{
    Encoding e;
    UCS4 surrogate;
    UCS4 buffer;
    UTF7_State state;
    int bits;
    unsigned char just_shifted;
    unsigned char written_something;
} UTF7_Encoding;

static const char *B="ABCDEFGHIJKLMNOP"
                     "QRSTUVWXYZabcdef"
                     "ghijklmnopqrstuv"
                     "wxyz0123456789+/";

static const char BValue[128] =
{
    77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,
    77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,
    77,77,77,77,77,77,77,77,77,77,77,62,77,77,77,63,
    52,53,54,55,56,57,58,59,60,61,77,77,77,77,77,77,
    77, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,
    15,16,17,18,19,20,21,22,23,24,25,77,77,77,77,77,
    77,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
    41,42,43,44,45,46,47,48,49,50,51,77,77,77,77,77
};

/* Shifting requirements array - 0=don't shift,
 * 1=may shift,2=do shift.
 */
static const char shift[128] =
{
    2,2,2,2,2,2,2,2,2,0,0,2,2,0,2,2,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
    0,1,1,1,1,1,1,0,0,0,1,2,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
    1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,1,
    1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2
};

/*
 * Routines for encoding UTF-7
 * Number: 104
 * Names: UTF-7
 */
static int utf7_reset(Encoding *e, int for_encoding)
{
    UTF7_Encoding *ue = (UTF7_Encoding *) e;

    ue->state = Direct;
    ue->surrogate = 0;

    return 1;

    NOT_USED(for_encoding);
}

static unsigned int utf7_read(Encoding *e,
                              encoding_read_callback_fn ucs_out,
                              const unsigned char *s,
                              unsigned int n,
                              void *handle)
{
    UTF7_Encoding *ue = (UTF7_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        unsigned char c = *s++;
        UCS4 u;

        if (ue->state == Direct)
        {
            if (c == '+')
            {
                ue->state = Shifted;
                ue->bits = ue->buffer = ue->written_something = 0;
                ue->just_shifted = 1;
                continue;
            }
            else
            {
                u = c < 0x80 ? c : 0xFFFD;
            }
        }
        else
        {
            if (c >= 0x80 || BValue[(unsigned int)c] >= 64)
            {
                ue->state = Direct;
                if (c == '-' && ue->just_shifted)
                    u = '+';
                else if (c < 0x80 && ue->written_something && ue->buffer == 0)
                {
                    if (c == '-')
                        continue;
                    else
                        u = c;
                }
                else
                    u = 0xFFFD; /* Must have written at least one char,
                                   and must be zero-padded */
            }
            else
            {
                ue->just_shifted = 0;
                ue->buffer = (ue->buffer << 6) | BValue[(unsigned int)c];
                if ((ue->bits += 6) >= 16)
                {
                    ue->bits -= 16;
                    u = ue->buffer >> ue->bits;
                    ue->buffer &=~ ((~0) << ue->bits);
                    ue->written_something = 1;
                }
                else
                    continue;
            }
        }

        if (ue->surrogate)
        {
            if (u < 0xDC00 || u >= 0xE000)
                u = 0xFFFD;
            else
                u = 0x10000 + ((ue->surrogate - 0xD800) << 10)
                            + u - 0xDC00;
            ue->surrogate = 0;
        }
        else if (u >= 0xD800 && u < 0xDC00)
        {
            ue->surrogate = u;
            continue;
        }
        else if (u >= 0xDC00 && u < 0xE000)
            u = 0xFFFD;

        if (ucs_out)
            if (ucs_out(handle, u))
            {
                /* Character has been used, so ensure its counted */
                count--;
                break;
            }
    }

    return n - count;
}

static int utf7_read_in_multibyte_sequence(EncodingPriv *e)
{
    UTF7_Encoding *ue = (UTF7_Encoding *) e;

    return (ue->state == Shifted && ue->bits > 0) || ue->surrogate;
}

static int output(unsigned char c, unsigned char **out, int *outsize)
{
    if ((*outsize)-- > 0)
    {
        *(*out)++ = c;
        return 1;
    }
    else
        return 0;
}

static int utf7_write(EncodingPriv *e, UCS4 u, unsigned char **utf7, int *bufsize)
{
    UTF7_Encoding *ue = (UTF7_Encoding *) e;
    UTF7_State state = ue->state;
    int bits = ue->bits;
    int buffer = ue->buffer;
    int ok = 0;
    UCS4 surrogate = 0;
    int optsetting = (ue->e.flags & encoding_FLAG_ENCODE_OPTIONAL) ? 1 : 2;

    int needshift;

    #define OUTPUT(c) output(c, utf7, bufsize)

    if (u == NULL_UCS4)
    {
        needshift = 0; /* Must unshift at end of stream */
    }
    else
    {
        if (u >= 0x110000 || (u >= 0xD800 && u < 0xE000))
        {
            if (ue->e.for_encoding == encoding_WRITE_STRICT)
                return -1;
            else
                u = 0xFFFD;
        }

        if (u >= 0x10000)
        {
            surrogate = 0xDC00 | ((u - 0x00010000) & 0x03FF);
            u = 0xD800 | ((u - 0x00010000) >> 10);
        }

      back_for_second_surrogate:

        needshift = u > 0x80 || shift[u] >= optsetting;
    }

    if (needshift && state == Direct)
    {
        ok = OUTPUT('+');
        if (u == '+')
            ok = OUTPUT('-');
        else
            state = Shifted;
    }

    if (state == Shifted)
    {
        if (needshift)
        {
            buffer = (buffer << 16) | u;
            bits += 16;
        }
        else
        {
            int padding = (6 - bits) % 6;   /* Bits must be < 6 */
            buffer = buffer << padding;
            bits += padding;
        }

        while (bits >= 6)
        {
            bits -= 6;
            ok = OUTPUT(B[buffer >> bits]);
            buffer &=~ (0x3F << bits);
        }

        if (!needshift)
        {
            if (u == NULL_UCS4 || u == '-' || BValue[u] < 64)
                ok = OUTPUT('-');
            state = Direct;
        }
    }

    if (!needshift && u != NULL_UCS4)
        ok = OUTPUT((unsigned char)u);

    if (surrogate)
    {
        u = surrogate;
        surrogate = 0;
        goto back_for_second_surrogate;
    }

    if (ok)
    {
        ue->buffer = buffer;
        ue->bits = bits;
        ue->state = state;
    }

    return ok;
}

EncodingPriv enc_utf7 =
{
    utf7_read,
    utf7_read_in_multibyte_sequence,
    utf7_reset,
    sizeof(UTF7_Encoding) - sizeof(Encoding),
    0, /* utf7_delete */
    0,
    utf7_write,
    0,
    0,
    0
};
@


1.6
log
@  Merge of bug fixes from NCBrowser tree.
Detail:
  Buffer overrun fixed; some buffer counting problems fixed too.  There is
    now helpful initialisation and tidyup routines you can call too (called
    encoding_initialise and encoding_tidyup)
Admin:
  I've built this with cc 5.45 in basic build environment - it built OK.
  This source code now matches that in NCBrowser 5.28.


Version 0.47. Tagged as 'Unicode-0_47'
@
text
@d191 7
d309 1
@


1.5
log
@  More syncronisation with Unicode lib in branched tree
Detail:
  Added some changes from Unicode lib in branched tree.  All basically
   type changes.  This appears to be because other compilers are
   more picky about types than armcc.

Admin:
  Will add 0.46 VersionNum file into branched tree, and all will be
   syncronised fully.


Version 0.46. Tagged as 'Unicode-0_46'
@
text
@d181 3
d185 1
@


1.4
log
@  Copyright message changes + changes from branch + Unified
   branched/non-branched builds
Detail:
  Copyright messages changed from E-14 to Pace throughout, filename
   placed at top of file throughout, instead of in just some files.

  Merged branch's fixes into our code base, plus made it possible to
   get nice debug output in branched tree, and vfprintf() to stderr in
   RISC OS tree.  Exactly same source used in branched tree now (apart
   from OS specific files riscos.c and unix.c moving into layers
   directory structure).

Admin:
  Built for branched, both Unix and RISC OS.
  Built in RISC OS tree, and compiled into TextConv.


Version 0.45. Tagged as 'Unicode-0_45'
@
text
@d47 2
a48 2
    char just_shifted;
    char written_something;
d102 1
a102 1
                              const char *s,
d111 1
a111 1
        char c = *s++;
d187 1
a187 1
static int output(int c, char **out, int *outsize)
d198 1
a198 1
static int utf7_write(EncodingPriv *e, UCS4 u, char **utf7, int *bufsize)
d276 1
a276 1
        ok = OUTPUT(u);
@


1.3
log
@Implemented SCSU and UTF-7.
Added encoding_set_flags().
Proper handling of byte order marks in UTF-16 and UCS-4.
Fixed UTF-16 surrogate writing.
Adjusted various MIME charset identifiers.
Incorporated latest Unicode Character Database (2.1.8).
Added "current system alphabet" encoding.
Created "TextConv" command line character set conversion utility.

Version 0.34. Tagged as 'Unicode-0_34'
@
text
@d15 12
a26 9
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/
d96 2
d130 1
a130 1
            if (c >= 0x80 || BValue[c] >= 64)
d149 1
a149 1
                ue->buffer = (ue->buffer << 6) | BValue[c];
d218 1
a218 1
        if (u >= 0x110000 || u >= 0xD800 && u < 0xE000)
d302 4
a305 1
    utf7_write
@


1.2
log
@Added copyright messages to all source files and unified the
header #define's.

Version 0.33. Not tagged
@
text
@d27 1
a27 2
#include "encoding.h"
#include "utf7.h"
a28 1
#include "iso2022.h"
d31 6
d40 6
a45 3
    char current[6];
    char *ptr;
    int count;
d48 32
d82 2
a83 3
 * Number: 103
 * Names: UNICODE-1-1-UTF-7
 *        csUnicode11UTF7
d85 1
a85 1
static void utf7_reset(Encoding *e)
d89 4
a92 1
    ue->count = 0;
d95 2
a96 2
static unsigned int utf7_read(struct Encoding *e,
                              int (*ucs_out)(void *, UCS4),
d109 1
a109 2
    retry:
        if (ue->count)
d111 1
a111 1
            if (c >= 0x80 && c <= 0xBF)
d113 4
a116 5
                *ue->ptr++ = c;
                if (--ue->count == 0)
                    UTF7_to_UCS4(ue->current, &u);
                else
                    continue;
d120 1
a120 7
                if (ucs_out)
                    if (ucs_out(handle, 0xFFFD))
                        break;

                ue->count = 0;

                goto retry;
d125 16
a140 4
            if (c <= 0x80)
                u = c;
            else if (c < 0xC0 || c >= 0xFE)
                u = 0xFFFD;
d143 13
a155 3
                ue->count = UTF7_seqlen(c) - 1;
                ue->current[0] = c;
                ue->ptr = ue->current + 1;
d157 13
a169 2
                continue;
            }
d171 2
d182 1
a182 1
static void utf7_delete(Encoding *e)
d184 104
d290 1
a290 1
Encoding enc_utf7 =
d295 3
a297 1
    utf7_delete
@


1.1
log
@Initial version checked in

Version 0.01. Not tagged
@
text
@d15 10
@

