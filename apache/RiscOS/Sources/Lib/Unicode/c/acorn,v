head	1.9;
access;
symbols
	Unicode-0_63:1.9
	Unicode-0_62:1.9
	Unicode-0_61:1.9
	Unicode-0_60:1.9
	Unicode-0_59:1.8
	Unicode-0_58:1.8
	Unicode-0_57:1.8
	Unicode-0_56:1.8
	Unicode-0_55:1.8
	Unicode-0_54:1.8
	RO_5_07:1.7
	Unicode-0_53:1.7
	Unicode-0_52:1.7
	Unicode-0_51:1.7
	Unicode-0_50:1.7
	Unicode-0_49:1.7
	Unicode-0_48:1.7
	Unicode-0_47:1.7
	Unicode-0_46:1.7
	Unicode-0_45:1.6
	dellis_autobuild_BaseSW:1.5
	sbrodie_sedwards_16Mar2000:1.5
	Unicode-0_44:1.5
	dcotton_autobuild_BaseSW:1.7
	Unicode-0_43:1.5
	Unicode-0_42:1.5
	Unicode-0_41:1.5
	Unicode-0_40:1.5
	Unicode-0_39:1.5
	Unicode-0_38:1.5
	Unicode-0_37:1.5
	Unicode-0_36:1.5
	Unicode-0_35:1.5
	Unicode-0_34:1.5
	Unicode-0_33:1.5
	Unicode-0_32:1.4
	Unicode-0_31:1.4
	Unicode-0_30:1.4
	Unicode-0_29:1.4
	Unicode-0_28:1.4
	Unicode-0_27:1.3
	Unicode-0_26:1.3
	Unicode-0_25:1.3
	Unicode-0_24:1.3
	Unicode-0_23:1.3
	ahodgkin_207release:1.3
	Unicode-0_22:1.3
	Unicode-0_21:1.3
	Unicode-0_20:1.3
	Unicode-0_19:1.3
	Unicode-0_18:1.3
	Unicode-0_16:1.3
	Unicode-0_15:1.3
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	Unicode-0_14:1.3
	ahodgkin_133beta:1.3
	Unicode-0_13:1.3
	Unicode-0_12:1.3
	Unicode-0_10:1.3
	Unicode-0_09:1.3
	Unicode-0_08:1.3
	Unicode-0_07:1.3
	Unicode-0_02:1.1;
locks; strict;
comment	@# @;


1.9
date	2013.01.06.22.32.07;	author jbell;	state Exp;
branches;
next	1.8;
commitid	mXR1bDbpHeiotczw;

1.8
date	2005.08.25.11.57.08;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.13.10.38.05;	author jberanek;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.05.14.46.35;	author jberanek;	state Exp;
branches;
next	1.5;

1.5
date	99.02.24.13.33.44;	author smiddle;	state Exp;
branches;
next	1.4;

1.4
date	98.11.16.12.47.48;	author smiddle;	state Exp;
branches;
next	1.3;

1.3
date	97.12.02.10.31.23;	author smiddle;	state Exp;
branches;
next	1.2;

1.2
date	97.11.12.18.11.47;	author smiddle;	state dead;
branches;
next	1.1;

1.1
date	97.11.11.16.24.39;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Add encoding_read_in_multibyte_sequence API.
Detail:
  The new API allows the client to determine if a read codec has run
  out of input in the middle of a multibyte sequence. This permits a
  client to distinguish between the two cases in which no output
  character is generated:

    a) insufficient input has been provided to complete an output character
    b) the input consisted of a complete multibyte sequence which generates
       no output (e.g. an ISO-2022 shift sequence)
Admin:
  Tested using Iconv.


Version 0.60. Tagged as 'Unicode-0_60'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > acorn.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <stdlib.h>

#include "encpriv.h"

#include "eightbit.h"
#include "acorn.h"

typedef struct
{
    UCS2 u;
    unsigned char c;
} key_pair;

static key_pair fuzzy_specials[] =
{
    /* exact matches */
    { 0x0174, 0x81 },
    { 0x0175, 0x82 },
    { 0x0176, 0x85 },
    { 0x0177, 0x86 },
    { 0x2026, 0x8C },
    { 0x2122, 0x8D },
    { 0x2030, 0x8E },
    { 0x2022, 0x8F },
    { 0x2018, 0x90 },
    { 0x2019, 0x91 },
    { 0x2039, 0x92 },
    { 0x203A, 0x93 },
    { 0x201C, 0x94 },
    { 0x201D, 0x95 },
    { 0x201E, 0x96 },
    { 0x2013, 0x97 },
    { 0x2014, 0x98 },
    { 0x2212, 0x99 },
    { 0x0152, 0x9A },
    { 0x0153, 0x9B },
    { 0x2020, 0x9C },
    { 0x2021, 0x9D },
    { 0xFB01, 0x9E },
    { 0xFB02, 0x9F },

    /* less exact matches */
    { 0x201A, ',' },		/* sq lower */
    { 0x0192, 'f' },		/* guilder */
    { 0x02C6, '^' },		/* circumflex */
    { 0x0160, 'S' },		/* S hacek */
    { 0x02DC, '~' },		/* tilde */
    { 0x0161, 's' },		/* s hacek */
    { 0x0110, 0xD0 },           /* D stroke -> Eth */

    { 0, 0 }
};

static int acorn_write(EncodingPriv *e, UCS4 u, unsigned char **s, int *bufsize)
{
    unsigned char c;

    if (u == NULL_UCS4)
	return 0;

    if ( --(*bufsize) < 0 || !s)
	return 0;

    if (u < 0x100)
	c = u;			/* all Latin1 go straight through */
    else
    {
	key_pair *kp;
	c = 143;		/* bullet character */
	for (kp = fuzzy_specials; kp->u; kp++)
	{
	    if (kp->u == u)
	    {
		c = kp->c;
		break;
	    }
	}
    }

    (*s)[0] = c;
    (*s)++;
    return 1;

    NOT_USED(e);
}

EncodingPriv enc_acorn =
{
    eightbit_read,
    eightbit_read_in_multibyte_sequence,
    eightbit_reset,
    sizeof(EightBit_Encoding) - sizeof(EncodingPriv),
    eightbit_delete,
    0,
    acorn_write,
    0,
    0,
    0
};
@


1.8
log
@* Added support for ISO 6937:2001, and the variant with Euro used by DVB.
  (This isn't integrated with ISO 2022 processing though - it's standalone).
* Added a Dstroke -> Eth second-attempt conversion in various write routines,
  primarily for ISO 6937 -> Latin1 conversion (ISO 6937 unifies them).

Version 0.54. Tagged as 'Unicode-0_54'
@
text
@d117 1
@


1.7
log
@  More syncronisation with Unicode lib in branched tree
Detail:
  Added some changes from Unicode lib in branched tree.  All basically
   type changes.  This appears to be because other compilers are
   more picky about types than armcc.

Admin:
  Will add 0.46 VersionNum file into branched tree, and all will be
   syncronised fully.


Version 0.46. Tagged as 'Unicode-0_46'
@
text
@d76 1
@


1.6
log
@  Copyright message changes + changes from branch + Unified
   branched/non-branched builds
Detail:
  Copyright messages changed from E-14 to Pace throughout, filename
   placed at top of file throughout, instead of in just some files.

  Merged branch's fixes into our code base, plus made it possible to
   get nice debug output in branched tree, and vfprintf() to stderr in
   RISC OS tree.  Exactly same source used in branched tree now (apart
   from OS specific files riscos.c and unix.c moving into layers
   directory structure).

Admin:
  Built for branched, both Unix and RISC OS.
  Built in RISC OS tree, and compiled into TextConv.


Version 0.45. Tagged as 'Unicode-0_45'
@
text
@d38 1
a38 1
    char c;
d80 1
a80 1
static int acorn_write(EncodingPriv *e, UCS4 u, char **s, int *bufsize)
d82 1
a82 1
    int c;
@


1.5
log
@Added copyright messages to all source files and unified the
header #define's.

Version 0.33. Not tagged
@
text
@d15 12
a26 9
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/
d86 1
a86 1
    
d105 1
a105 1
	
d109 2
d120 4
a123 1
    acorn_write
@


1.4
log
@Updated all the writers to ignore the NULL_UCS4 character (as had
been previously added to the iso2022_escapes case). Any new writers
should flush any pending characters they may have at this point.
Also udpated enc_UCS4.c and utf8.c to turn all illegal characeters
(top bit set) into FFFD.

Version 0.28. Tagged as 'Unicode-0_28'
@
text
@d15 10
@


1.3
log
@Recreated acorn.c to hold new encoding cdAcornFuzzy. This writes an
Acorn Latin1 encoding using fuzzy mapping to get the greatest number
of displayable characters. Reads as Acorn.Latin1.

Version 0.07. Tagged as 'Unicode-0_07'
@
text
@d71 3
@


1.2
log
@Fixed encoding table so that modules builds will work.
Made all tables be on linked list to avoid static copies of pointers.
Removed redundant 8bit files.

Version 0.03. Tagged as 'Unicode-0_03'
@
text
@d15 2
d19 1
a19 1
#include "koi8r.h"
d22 5
a26 5
/*
 * Routines for encoding Macintosh (Mac Roman)
 * Number: 5001
 * Names: x-acorn-latin1
 */
d28 35
a62 1
static UCS2 *acorn_latin1_table;
d64 4
a67 1
static int acorn_latin1_reset(Encoding *e, int for_encoding)
d69 1
a69 4
    EightBit_Encoding *ee = (EightBit_Encoding *) e;

    if (!acorn_latin1_table)
        acorn_latin1_table = encoding_load_map_file("Acorn.Latin1");
d71 2
a72 1
    ee->table = acorn_latin1_table;
d74 19
a92 1
    return ee->table != NULL;
d95 1
a95 1
EncodingPriv enc_acorn_latin1 =
d98 1
a98 1
    acorn_latin1_reset,
d102 1
a102 1
    eightbit_write
a103 1

@


1.1
log
@Initial version checked in

Version 0.01. Not tagged
@
text
@@
