head	1.8;
access;
symbols
	Unicode-0_63:1.8
	Unicode-0_62:1.8
	Unicode-0_61:1.7
	Unicode-0_60:1.7
	Unicode-0_59:1.7
	Unicode-0_58:1.7
	Unicode-0_57:1.7
	Unicode-0_56:1.7
	Unicode-0_55:1.7
	Unicode-0_54:1.7
	RO_5_07:1.7
	Unicode-0_53:1.7
	Unicode-0_52:1.7
	Unicode-0_51:1.7
	Unicode-0_50:1.7
	Unicode-0_49:1.7
	Unicode-0_48:1.7
	Unicode-0_47:1.7
	Unicode-0_46:1.7
	Unicode-0_45:1.6
	dellis_autobuild_BaseSW:1.5
	sbrodie_sedwards_16Mar2000:1.5
	Unicode-0_44:1.5
	dcotton_autobuild_BaseSW:1.7
	Unicode-0_43:1.5
	Unicode-0_42:1.5
	Unicode-0_41:1.5
	Unicode-0_40:1.4
	Unicode-0_39:1.4
	Unicode-0_38:1.4
	Unicode-0_37:1.4
	Unicode-0_36:1.4
	Unicode-0_35:1.4
	Unicode-0_34:1.4
	Unicode-0_33:1.3
	Unicode-0_32:1.2
	Unicode-0_31:1.2
	Unicode-0_30:1.2
	Unicode-0_29:1.2
	Unicode-0_28:1.2
	Unicode-0_27:1.2
	Unicode-0_26:1.2
	Unicode-0_25:1.2
	Unicode-0_24:1.2
	Unicode-0_23:1.2
	ahodgkin_207release:1.2
	Unicode-0_22:1.2
	Unicode-0_21:1.2
	Unicode-0_20:1.2
	Unicode-0_19:1.2
	Unicode-0_18:1.2
	Unicode-0_16:1.2
	Unicode-0_15:1.2
	ahodgkin_205release:1.2
	ahodgkin_204release:1.2
	Unicode-0_14:1.2
	ahodgkin_133beta:1.2
	Unicode-0_13:1.2
	Unicode-0_12:1.2
	Unicode-0_10:1.2
	Unicode-0_09:1.2
	Unicode-0_08:1.2
	Unicode-0_07:1.1
	Unicode-0_06:1.1
	Unicode-0_05:1.1
	Unicode-0_04:1.1
	Unicode-0_03:1.1
	Unicode-0_02:1.1;
locks; strict;
comment	@# @;


1.8
date	2016.07.09.09.07.51;	author rool;	state Exp;
branches;
next	1.7;
commitid	bqQiWOlrLCUwSCdz;

1.7
date	2000.10.13.10.38.05;	author jberanek;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.05.14.46.35;	author jberanek;	state Exp;
branches;
next	1.5;

1.5
date	99.09.13.09.55.48;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	99.03.11.17.01.24;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	99.02.24.13.33.48;	author smiddle;	state Exp;
branches;
next	1.2;

1.2
date	97.12.08.17.00.29;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	97.11.11.16.24.50;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to Unicode 3.2.0
Detail:
  Update UnicodeData from http://www.unicode.org/Public/3.2-Update/UnicodeData-3.2.0.txt which is a later (and last in the 3.x series) version of the database.
  Update unictype_is_ideograph() to match the ranges given in that version of the standard, and remove the entries that were checking if a UCS2 (16 bit) value with 0x20000 and 0x30000.
Admin:
  The updated UnicodeData is used for CharNames in !Unicode for !Chars.

Version 0.62. Tagged as 'Unicode-0_62'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > mkunictype.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

/*
 * The ideographs for unictype_is_ideograph() are derived from code
 * points listed in doc/PropList320 which are categorised as
 *   ; Ideographic                  or
 *   ; IDS_Binary_Operator          or
 *   ; IDS_Trinary_Operator         or
 *   ; Radical                      or
 *   ; Unified_Ideograph
 * and which are small enough to fit into a UCS2 argument.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "unictype.h"

#define range_UNKNOWN	0
#define range_SINGLE	1
#define range_START	2
#define range_END	3

#define cat(a,b)	(((a) << 8) | (b))

#define FILE_HDR			\
	"/* > unictype.c */\n"	\
	"/* Generated file - do not edit by hand */\n"	\
	"#include \"unictype.h\"\n"

#define FILE_FTR				\
	"int unictype_lookup(UCS2 c)\n"	\
	"{\n"					\
	" unsigned val = (unicode_type_ref[c >> 8]) [(c >> 3) & 0x1F];\n" \
	" int i = (c & 7);\n"			\
	" return ((val >> (i*4)) & 15);\n"	\
	"}\n\n"					\
	""					\
	"void unictype_init(void)\n"		\
	"{\n"					\
	"}\n\n"					\
	""					\
	"int unictype_is_ideograph(UCS2 u)\n"	\
	"{\n"					\
	" if (u < 0x2E80) return 0;\n"		\
	" if (u <= 0x2E99) return 1;\n"		\
	" if (u < 0x2E9B) return 0;\n"		\
	" if (u <= 0x2EF3) return 1;\n"		\
	" if (u < 0x2F00) return 0;\n"		\
	" if (u <= 0x2FD5) return 1;\n"		\
	" if (u < 0x2FF0) return 0;\n"		\
	" if (u <= 0x2FFB) return 1;\n"		\
	" if (u < 0x3006) return 0;\n"		\
	" if (u <= 0x3007) return 1;\n"		\
	" if (u < 0x3021) return 0;\n"		\
	" if (u <= 0x3029) return 1;\n"		\
	" if (u < 0x3038) return 0;\n"		\
	" if (u <= 0x303A) return 1;\n"		\
	" if (u < 0x3400) return 0;\n"		\
	" if (u <= 0x4DB5) return 1;\n"		\
	" if (u < 0x4E00) return 0;\n"		\
	" if (u <= 0x9FA5) return 1;\n"		\
	" if (u < 0xF900) return 0;\n"		\
	" if (u <= 0xFA2D) return 1;\n"		\
	" if (u < 0xFA0E) return 0;\n"		\
	" if (u <= 0xFA0F) return 1;\n"		\
	" if (u == 0xFA11) return 1;\n"		\
	" if (u < 0xFA13) return 0;\n"		\
	" if (u <= 0xFA14) return 1;\n"		\
	" if (u == 0xFA1F) return 1;\n"		\
	" if (u == 0xFA21) return 1;\n"		\
	" if (u < 0xFA23) return 0;\n"		\
	" if (u <= 0xFA24) return 1;\n"		\
	" if (u < 0xFA27) return 0;\n"		\
	" if (u <= 0xFA29) return 1;\n"		\
	" return 0;\n"				\
	"}\n\n"					\
	"/* eof unictype.c */\n"

#define TABLE_HDR	"static unsigned unicode_type[%d][32]={\n"
#define TABLE_ENTRY_HDR	"{\n"
#define TABLE_ENTRY	" 0x%02x%02x%02x%02x"
#define TABLE_ENTRY_FTR	"}\n"
#define TABLE_FTR	"};\n"

#define REF_HDR		"static unsigned *unicode_type_ref[256]={\n"
#define REF_ENTRY	" unicode_type[%d],\n"
#define REF_FTR		"};\n"


typedef struct
{
    unsigned int code;
    int type;
    int range;
} unicode_char_info;


static int debug = 1;

static int category_to_type(int category)
{
    switch (category)
    {
    case cat('M', 'n'):
    case cat('M', 'c'):
    case cat('M', 'e'):
	return unictype_MARK;

    case cat('N', 'd'):
    case cat('N', 'l'):
    case cat('N', 'o'):
	return unictype_NUMBER;

    case cat('C', 'c'):
    case cat('C', 'f'):
    case cat('Z', 's'):
	return unictype_SEPARATOR_SPACE;

    case cat('Z', 'l'):
    case cat('Z', 'p'):
	return unictype_SEPARATOR_PARA;

    case cat('C', 'o'):
    case cat('C', 'n'):
    case cat('C', 's'):
    case cat('L', 'u'):
    case cat('L', 'l'):
    case cat('L', 't'):
    case cat('L', 'o'):
    case cat('L', 'm'):		/* SJM: this is a spacing character not a mark */
    case cat('S', 'k'):
	return unictype_LETTER;

    case cat('P', 'd'):
	return unictype_PUNCTUATION_DASH;

    case cat('P', 's'):
    case cat('P', 'i'):
	return unictype_PUNCTUATION_OPEN;

    case cat('P', 'e'):
    case cat('P', 'o'):
    case cat('P', 'c'):
    case cat('P', 'f'):
	return unictype_PUNCTUATION_CLOSE;

    case cat('S', 'm'):
    case cat('S', 'c'):
    case cat('S', 'o'):
	return unictype_SYMBOL;
    }

    return unictype_UNKNOWN;
}

static int decode_line(char *cp, unicode_char_info *info)
{
    int c;
    int field = 0;
    char *fstart;

    if (*cp == 0)
	return 0;

    fstart = cp;
    while ((c = *cp++) != 0)
    {
	if (c == ';' || c == '\n')
	{
	    switch (field)
	    {
	    case 0:
		info->code = (int)strtoul(fstart, NULL, 16);
		if (info->code > (UCS2)~0)
		    return 0; /* Out of range for UCS2 */
		break;
	    case 1:
		if (strncmp(cp-7, "First>;", sizeof("First>;")-1) == 0)
		    info->range = range_START;
		else if (strncmp(cp-6, "Last>;", sizeof("Last>;")-1) == 0)
		    info->range = range_END;
		else
		    info->range = range_SINGLE;
		break;
	    case 2:
		info->type = category_to_type((fstart[0] << 8) | fstart[1]);
		if (info->type == unictype_UNKNOWN)
		    fprintf(stderr, "%04X: unknown category \"%c%c\"",
		                    info->code, fstart[0], fstart[1]);
		break;
	    }

	    fstart = cp;
	    field++;
	}
    }

    if (debug >= 3)
	fprintf(stderr, "%04x: %d %d\n", info->code, info->type, info->range);

    return 1;
}

static void write_nybble(unsigned char *ptr, int index, int value)
{
    unsigned char c = ptr[index/2];
    if (index & 1)
	c = (unsigned char)((c & 0x0f) | (value << 4));
    else
	c = (unsigned char)((c & 0xf0) | (value));
    ptr[index/2] = c;
}


static unsigned char *table_ptr[256];
static int table_ref[256];

int main(int argc, char *argv[])
{
    FILE *f_in = stdin;
    int i, j;
    int n_refs;
    unicode_char_info info_last;
    int first;

    if (argc == 2)
    {
	debug = atoi(argv[1]);
    }

    for (i = 0; i < 256; i++)
    {
	table_ptr[i] = calloc(128, 1);
	table_ref[i] = 0;
    }

    info_last.range = range_UNKNOWN;
    info_last.code = 0;
    info_last.type = 0;
    while (!feof(f_in) && !ferror(f_in))
    {
	char buf[512];
	unicode_char_info info;

	fgets(buf, sizeof(buf), stdin);

	if (decode_line(buf, &info))
	{
	    if (info.range == range_SINGLE)
	    {
		unsigned char *line = table_ptr[info.code >> 8];
		write_nybble(line, info.code & 0xff, info.type);
	    }
	    else if (info.range == range_START)
	    {
		info_last = info;
	    }
	    else if (info.range == range_END)
	    {
		if (info_last.range == range_START)
		{
		    for (i = info_last.code; i <= info.code; i++)
		    {
			unsigned char *line = table_ptr[i >> 8];
			write_nybble(line, i & 0xff, info.type);
		    }
		    info_last.range = range_UNKNOWN;
		}
	    }
	}
    }

    n_refs = 0;
    for (i = 0; i < 256; i++)
    {
	if (debug >= 2)
	    fprintf(stderr, "Checking table %d\n", i);

	if (table_ptr[i])
	{
	    for (j = i+1; j < 256; j++)
		if (table_ptr[j] &&
		    memcmp(table_ptr[i], table_ptr[j], 128) == 0)
		{
		    table_ref[j] = n_refs;

		    free(table_ptr[j]);
		    table_ptr[j] = 0;

		    if (debug >= 3)
			fprintf(stderr, " table %d matches\n", j);
		}

	    table_ref[i] = n_refs++;
	}
    }


    printf( FILE_HDR );

    printf( TABLE_HDR, n_refs );

    first = 1;
    for (i = 0; i < 256; i++)
    {
	unsigned char *ptr = table_ptr[i];

	if (ptr)
	{
	    if (debug >= 2)
		fprintf(stderr, "Writing table %d\n", i);

	    if (first)
		first = 0;
	    else
		printf( "," );

	    printf( TABLE_ENTRY_HDR );

	    for (j = 0; j < 128; j+=4)
	    {
#if 1
		printf( TABLE_ENTRY, ptr[j+3], ptr[j+2], ptr[j+1], ptr[j+0] );
#else
		int k;
		for (k = 0; k < 8; k++)
		{
		    printf( TABLE_ENTRY, ptr[j+k] );
		    if (k != 7)
			printf(", ");
		}
#endif
		if (j != 128 - 4)
		    printf( ",\n" );
		else
		    printf( "\n" );
	    }

	    printf( TABLE_ENTRY_FTR );
	}
    }

    printf( TABLE_FTR );

    printf( REF_HDR );

    for (i = 0; i < 256; i++)
    {
	if (debug >= 2)
	    fprintf(stderr, "Writing table ref %d to %d\n", i, table_ref[i]);

	printf( REF_ENTRY, table_ref[i] );
    }

    printf( REF_FTR );

    printf( FILE_FTR );

    if (debug)
	fprintf(stderr, "Number of tables %d\n", n_refs);

    for (i = 0; i < 256; i++)
	if (table_ptr[i])
	    free(table_ptr[i]);

    return EXIT_SUCCESS;
}

/* eof mkunictype.c */
@


1.7
log
@  More syncronisation with Unicode lib in branched tree
Detail:
  Added some changes from Unicode lib in branched tree.  All basically
   type changes.  This appears to be because other compilers are
   more picky about types than armcc.

Admin:
  Will add 0.46 VersionNum file into branched tree, and all will be
   syncronised fully.


Version 0.46. Tagged as 'Unicode-0_46'
@
text
@d29 8
a36 5
 * Make the unictype.c tables file.

 *  1) The 'Id' categories have been added by hand according to the
 *  file PROPS2.TXT

a38 1

d72 6
d79 1
a79 2
	" if (u < 0x3000) return 0;\n"		\
	" if (u == 0x3003) return 0;\n"		\
d82 2
a83 2
	" if (u <= 0x302D) return 1;\n"		\
	" if (u < 0x3037) return 0;\n"		\
a84 20
	" if (u < 0x303E) return 0;\n"		\
	" if (u <= 0x303F) return 1;\n"		\
	" if (u < 0x3041) return 0;\n"		\
	" if (u <= 0x3094) return 1;\n"		\
	" if (u < 0x3099) return 0;\n"		\
	" if (u <= 0x309E) return 1;\n"		\
	" if (u < 0x30A1) return 0;\n"		\
	" if (u <= 0x30FE) return 1;\n"		\
	" if (u < 0x3190) return 0;\n"		\
	" if (u <= 0x3243) return 1;\n"		\
	" if (u < 0x3280) return 0;\n"		\
	" if (u <= 0x32B0) return 1;\n"		\
	" if (u < 0x32C0) return 0;\n"		\
	" if (u <= 0x32CB) return 1;\n"		\
	" if (u < 0x32D0) return 0;\n"		\
	" if (u <= 0x32FE) return 1;\n"		\
	" if (u < 0x3358) return 0;\n"		\
	" if (u <= 0x337F) return 1;\n"		\
	" if (u < 0x33E0) return 0;\n"		\
	" if (u <= 0x33FE) return 1;\n"		\
d86 2
d91 11
a101 5
	" if (u == 0xFE51) return 1;\n"		\
	" if (u < 0xFF01) return 0;\n"		\
	" if (u <= 0xFF9F) return 1;\n"		\
	" if (u < 0x20000) return 0;\n"         \
	" if (u < 0x30000) return 1;\n"         \
d119 1
a119 1
    int code;
d201 2
@


1.6
log
@  Copyright message changes + changes from branch + Unified
   branched/non-branched builds
Detail:
  Copyright messages changed from E-14 to Pace throughout, filename
   placed at top of file throughout, instead of in just some files.

  Merged branch's fixes into our code base, plus made it possible to
   get nice debug output in branched tree, and vfprintf() to stderr in
   RISC OS tree.  Exactly same source used in branched tree now (apart
   from OS specific files riscos.c and unix.c moving into layers
   directory structure).

Admin:
  Built for branched, both Unix and RISC OS.
  Built in RISC OS tree, and compiled into TextConv.


Version 0.45. Tagged as 'Unicode-0_45'
@
text
@d236 1
a236 1
    int c = ptr[index/2];
d238 1
a238 1
	c = (c & 0x0f) | (value << 4);
d240 1
a240 1
	c = (c & 0xf0) | (value);
d268 2
@


1.5
log
@SCSU encoder made aware of SIP (Supplementary Plane for Unified CJK Ideographs).
UTF-8 encoder handles out-of-space conditions correctly.
ISO 2022 encoder/decoder doesn't try to load table 7E (the null table).
encoding_new() does identify a null MIME string with auto-detect Japanese.
UnicodeData 3.0.0 imported.

Version 0.41. Tagged as 'Unicode-0_41'
@
text
@d16 11
a26 9
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/
@


1.4
log
@Implemented SCSU and UTF-7.
Added encoding_set_flags().
Proper handling of byte order marks in UTF-16 and UCS-4.
Fixed UTF-16 surrogate writing.
Adjusted various MIME charset identifiers.
Incorporated latest Unicode Character Database (2.1.8).
Added "current system alphabet" encoding.
Created "TextConv" command line character set conversion utility.

Version 0.34. Tagged as 'Unicode-0_34'
@
text
@d67 2
d74 4
a77 2
	" if (u == 0x3037) return 1;\n"		\
	" if (u == 0x303F) return 1;\n"		\
d96 1
a96 1
	" if (u < 0x4E00) return 0;\n"		\
d103 2
@


1.3
log
@Added copyright messages to all source files and unified the
header #define's.

Version 0.33. Not tagged
@
text
@a28 2
 * Note the UNICDATA2.TXT file in use has been edited.

a62 3
	" int i;\n"				\
	" for (i=0; i < 256; i++)\n"		\
	"  unicode_type_ref[i] = &(unicode_type[(int)unicode_type_ref[i]][0]);\n" \
d110 1
a110 1
#define REF_ENTRY	" (unsigned *)%d,\n"
d130 1
d132 1
a132 1
	
d134 1
d137 1
a137 1
	
d139 1
d149 1
d155 1
d162 1
d167 2
d188 1
a188 1
    
d209 3
d214 1
a214 1
	    
d252 1
a252 1
    
d258 1
a258 1
    
d298 1
a298 1
	
d309 1
a309 1
		    
d322 1
a322 1
    
d362 1
a362 1
    
d366 1
a366 1
    
d374 1
a374 1
    
d381 1
a381 1
    
@


1.2
log
@Fixed when SS1 or SS2 followed by a set change by disallowing controlcharacters
after single shifts.
Made encoding_table_ptr and encoding_n_table_entries check for null tables.
moved 'Lm' type characters from marks to letters in mkunictype.

Version 0.08. Tagged as 'Unicode-0_08'
@
text
@d15 10
a24 1
/* > mkunictype.c
d26 1
a33 1
 
@


1.1
log
@Initial version checked in

Version 0.01. Not tagged
@
text
@a125 1
    case cat('L', 'm'):
d146 1
@
