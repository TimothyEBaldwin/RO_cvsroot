head	1.10;
access;
symbols
	Unicode-0_63:1.10
	Unicode-0_62:1.10
	Unicode-0_61:1.10
	Unicode-0_60:1.10
	Unicode-0_59:1.9
	Unicode-0_58:1.9
	Unicode-0_57:1.9
	Unicode-0_56:1.9
	Unicode-0_55:1.9
	Unicode-0_54:1.9
	RO_5_07:1.9
	Unicode-0_53:1.9
	Unicode-0_52:1.9
	Unicode-0_51:1.9
	Unicode-0_50:1.9
	Unicode-0_49:1.9
	Unicode-0_48:1.9
	Unicode-0_47:1.9
	Unicode-0_46:1.8
	Unicode-0_45:1.7
	dellis_autobuild_BaseSW:1.6
	sbrodie_sedwards_16Mar2000:1.6
	Unicode-0_44:1.6
	dcotton_autobuild_BaseSW:1.8
	Unicode-0_43:1.6
	Unicode-0_42:1.6
	Unicode-0_41:1.6
	Unicode-0_40:1.6
	Unicode-0_39:1.6
	Unicode-0_38:1.6
	Unicode-0_37:1.6
	Unicode-0_36:1.6
	Unicode-0_35:1.6
	Unicode-0_34:1.6
	Unicode-0_33:1.6
	Unicode-0_32:1.5
	Unicode-0_31:1.5
	Unicode-0_30:1.5
	Unicode-0_29:1.5
	Unicode-0_28:1.5
	Unicode-0_27:1.4
	Unicode-0_26:1.4
	Unicode-0_25:1.4
	Unicode-0_24:1.4
	Unicode-0_23:1.4
	ahodgkin_207release:1.4
	Unicode-0_22:1.4
	Unicode-0_21:1.4
	Unicode-0_20:1.4
	Unicode-0_19:1.4
	Unicode-0_18:1.4
	Unicode-0_16:1.4
	Unicode-0_15:1.4
	ahodgkin_205release:1.4
	ahodgkin_204release:1.4
	Unicode-0_14:1.4
	ahodgkin_133beta:1.4
	Unicode-0_13:1.4
	Unicode-0_12:1.4
	Unicode-0_10:1.3
	Unicode-0_09:1.3
	Unicode-0_08:1.3
	Unicode-0_07:1.3
	Unicode-0_06:1.2
	Unicode-0_05:1.2
	Unicode-0_04:1.1
	Unicode-0_03:1.1;
locks; strict;
comment	@# @;


1.10
date	2013.01.06.22.32.07;	author jbell;	state Exp;
branches;
next	1.9;
commitid	mXR1bDbpHeiotczw;

1.9
date	2002.06.10.15.08.35;	author sbrodie;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.13.10.38.05;	author jberanek;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.05.14.46.35;	author jberanek;	state Exp;
branches;
next	1.6;

1.6
date	99.02.24.13.33.45;	author smiddle;	state Exp;
branches;
next	1.5;

1.5
date	98.11.16.12.47.49;	author smiddle;	state Exp;
branches;
next	1.4;

1.4
date	98.01.05.10.24.30;	author smiddle;	state Exp;
branches;
next	1.3;

1.3
date	97.12.02.10.31.29;	author smiddle;	state Exp;
branches;
next	1.2;

1.2
date	97.11.24.17.15.33;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	97.11.12.18.11.49;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Add encoding_read_in_multibyte_sequence API.
Detail:
  The new API allows the client to determine if a read codec has run
  out of input in the middle of a multibyte sequence. This permits a
  client to distinguish between the two cases in which no output
  character is generated:

    a) insufficient input has been provided to complete an output character
    b) the input consisted of a complete multibyte sequence which generates
       no output (e.g. an ISO-2022 shift sequence)
Admin:
  Tested using Iconv.


Version 0.60. Tagged as 'Unicode-0_60'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > eightbit.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <stdlib.h>

#include "encpriv.h"

#include "eightbit.h"

/*
 * Routines for KOI-8R (Cyrillic)
 * Number: 2084
 * Names: KOI8-R
 *        csKOI8R
 */

int eightbit_reset(Encoding *e, int for_encoding)
{
    EightBit_Encoding *ee = (EightBit_Encoding *) e;

    if (!ee->table)
        ee->table = encoding_load_map_file(e->list_entry->preload);

    return ee->table != NULL;

    NOT_USED(for_encoding);
}

unsigned int eightbit_read(EncodingPriv *e,
			   encoding_read_callback_fn ucs_out,
                           const unsigned char *s,
                           unsigned int n,
                           void *handle)
{
    EightBit_Encoding *ee = (EightBit_Encoding *) e;
    unsigned int count;
    UCS2 *table = encoding_table_ptr(ee->table);

    for (count = n; count; count--)
    {
        unsigned char c = *s++;
        UCS4 u = c < 0x80 ? c : table[c - 0x80];

        if (u == NULL_UCS2)
            u = 0xFFFD;

        if (ucs_out)
            if (ucs_out(handle, u))
            {
                /* Character has been used, so ensure its counted */
                count--;
                break;
            }
    }

    return n - count;
}

int eightbit_read_in_multibyte_sequence(EncodingPriv *e)
{
    return 0;

    NOT_USED(e);
}

int eightbit_write(EncodingPriv *e, UCS4 u, unsigned char **s, int *bufsize)
{
    EightBit_Encoding *ee = (EightBit_Encoding *) e;
    int i, c;

    if (u == NULL_UCS4)
	return 0;

    if ( --(*bufsize) < 0 || !s)
	return 0;

    if (u < 0x80)
	c = u;
    else if ((i = encoding_lookup_in_table(u, ee->table)) != -1)
	c = i + 0x80;
    else if (e->for_encoding == encoding_WRITE_STRICT)
	return -1;
    else
	c = '?';

    (*s)[0] = c;
    (*s)++;
    return 1;
}

void eightbit_delete(EncodingPriv *e)
{
    EightBit_Encoding *ee = (EightBit_Encoding *) e;
    if (ee->table)
	encoding_discard_map_file(ee->table);
}

EncodingPriv enc_eightbit =
{
    eightbit_read,
    eightbit_read_in_multibyte_sequence,
    eightbit_reset,
    sizeof(EightBit_Encoding) - sizeof(EncodingPriv),
    eightbit_delete,
    0,
    eightbit_write,
    0,
    0,
    0
};
@


1.9
log
@  Merge of bug fixes from NCBrowser tree.
Detail:
  Buffer overrun fixed; some buffer counting problems fixed too.  There is
    now helpful initialisation and tidyup routines you can call too (called
    encoding_initialise and encoding_tidyup)
Admin:
  I've built this with cc 5.45 in basic build environment - it built OK.
  This source code now matches that in NCBrowser 5.28.


Version 0.47. Tagged as 'Unicode-0_47'
@
text
@d83 7
d125 1
@


1.8
log
@  More syncronisation with Unicode lib in branched tree
Detail:
  Added some changes from Unicode lib in branched tree.  All basically
   type changes.  This appears to be because other compilers are
   more picky about types than armcc.

Admin:
  Will add 0.46 VersionNum file into branched tree, and all will be
   syncronised fully.


Version 0.46. Tagged as 'Unicode-0_46'
@
text
@d73 3
d77 1
@


1.7
log
@  Copyright message changes + changes from branch + Unified
   branched/non-branched builds
Detail:
  Copyright messages changed from E-14 to Pace throughout, filename
   placed at top of file throughout, instead of in just some files.

  Merged branch's fixes into our code base, plus made it possible to
   get nice debug output in branched tree, and vfprintf() to stderr in
   RISC OS tree.  Exactly same source used in branched tree now (apart
   from OS specific files riscos.c and unix.c moving into layers
   directory structure).

Admin:
  Built for branched, both Unix and RISC OS.
  Built in RISC OS tree, and compiled into TextConv.


Version 0.45. Tagged as 'Unicode-0_45'
@
text
@d55 1
a55 1
                           const char *s,
d65 1
a65 1
        char c = *s++;
d79 1
a79 1
int eightbit_write(EncodingPriv *e, UCS4 u, char **s, int *bufsize)
@


1.6
log
@Added copyright messages to all source files and unified the
header #define's.

Version 0.33. Not tagged
@
text
@d15 12
a26 9
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/
d49 2
d86 1
a86 1
    
d118 4
a121 1
    eightbit_write
@


1.5
log
@Updated all the writers to ignore the NULL_UCS4 character (as had
been previously added to the iso2022_escapes case). Any new writers
should flush any pending characters they may have at this point.
Also udpated enc_UCS4.c and utf8.c to turn all illegal characeters
(top bit set) into FFFD.

Version 0.28. Tagged as 'Unicode-0_28'
@
text
@d15 10
@


1.4
log
@ Fixed autojp state machine. It wasn't resetting 'state' to HAD_NONE after
changing whatcode. So basically it was lucky it ever worked. Also rewrote
the various range tests to only use one compare per case.
Changed the 'for_encoding' parameter to encoding_write() to an enumeration.
Added a new type of writing where if the character cannot be encoded then
the function returns -1 rather than writing a default character
Added the pseudo-charsets csAutodetectJP and csEUCorShiftJIS to the encoding
table so that they return the correct default language (ja).
Added function to remove unused encoding tables (must be called explicitly).
Fixed usage counting in iso2022 (I think).
When looking up encoding name try stripping 'x-' and 'X-' off the front i
can't find on first pass.

Version 0.12. Tagged as 'Unicode-0_12'
@
text
@d69 3
@


1.3
log
@Recreated acorn.c to hold new encoding cdAcornFuzzy. This writes an
Acorn Latin1 encoding using fuzzy mapping to get the greatest number
of displayable characters. Reads as Acorn.Latin1.

Version 0.07. Tagged as 'Unicode-0_07'
@
text
@d76 2
@


1.2
log
@Fixed bug in checking the buffer size available for writing (postindex decrement
rather than preindex).
Only affected the 8bit encoders.

Version 0.05. Tagged as 'Unicode-0_05'
@
text
@a20 6
typedef struct EightBit_Encoding
{
    EncodingPriv e;
    encoding_table table; /* 128-entry table for codes 0x80-0xFF */
} EightBit_Encoding;

d28 1
a28 1
static int eightbit_reset(Encoding *e, int for_encoding)
d38 1
a38 1
static unsigned int eightbit_read(EncodingPriv *e,
d64 1
a64 1
static int eightbit_write(EncodingPriv *e, UCS4 u, char **s, int *bufsize)
d84 1
a84 1
static void eightbit_delete(EncodingPriv *e)
@


1.1
log
@Fixed encoding table so that modules builds will work.
Made all tables be on linked list to avoid static copies of pointers.
Removed redundant 8bit files.

Version 0.03. Tagged as 'Unicode-0_03'
@
text
@d75 1
a75 1
    if ( (*bufsize)-- < 0 || !s)
@
