head	1.11;
access;
symbols
	Unicode-0_63:1.11
	Unicode-0_62:1.11
	Unicode-0_61:1.11
	Unicode-0_60:1.11
	Unicode-0_59:1.10
	Unicode-0_58:1.10
	Unicode-0_57:1.10
	Unicode-0_56:1.10
	Unicode-0_55:1.10
	Unicode-0_54:1.10
	RO_5_07:1.10
	Unicode-0_53:1.10
	Unicode-0_52:1.10
	Unicode-0_51:1.10
	Unicode-0_50:1.9
	Unicode-0_49:1.9
	Unicode-0_48:1.9
	Unicode-0_47:1.9
	Unicode-0_46:1.8
	Unicode-0_45:1.8
	dellis_autobuild_BaseSW:1.7
	sbrodie_sedwards_16Mar2000:1.7
	Unicode-0_44:1.7
	dcotton_autobuild_BaseSW:1.8
	Unicode-0_43:1.7
	Unicode-0_42:1.7
	Unicode-0_41:1.7
	Unicode-0_40:1.7
	Unicode-0_39:1.7
	Unicode-0_38:1.7
	Unicode-0_37:1.7
	Unicode-0_36:1.7
	Unicode-0_35:1.6
	Unicode-0_34:1.6
	Unicode-0_33:1.5
	Unicode-0_32:1.4
	Unicode-0_31:1.4
	Unicode-0_30:1.4
	Unicode-0_29:1.4
	Unicode-0_28:1.4
	Unicode-0_27:1.4
	Unicode-0_26:1.3
	Unicode-0_25:1.3
	Unicode-0_24:1.3
	Unicode-0_23:1.3
	ahodgkin_207release:1.3
	Unicode-0_22:1.3
	Unicode-0_21:1.3
	Unicode-0_20:1.3
	Unicode-0_19:1.3
	Unicode-0_18:1.3
	Unicode-0_16:1.3
	Unicode-0_15:1.3
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	Unicode-0_14:1.3
	ahodgkin_133beta:1.3
	Unicode-0_13:1.3
	Unicode-0_12:1.3
	Unicode-0_10:1.2
	Unicode-0_09:1.2
	Unicode-0_08:1.2
	Unicode-0_07:1.2
	Unicode-0_06:1.2
	Unicode-0_05:1.2
	Unicode-0_04:1.2
	Unicode-0_03:1.1
	Unicode-0_02:1.1;
locks; strict;
comment	@# @;


1.11
date	2013.01.06.22.32.11;	author jbell;	state Exp;
branches;
next	1.10;
commitid	mXR1bDbpHeiotczw;

1.10
date	2003.07.02.15.39.16;	author rsprowson;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.10.15.08.36;	author sbrodie;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.05.14.46.36;	author jberanek;	state Exp;
branches;
next	1.7;

1.7
date	99.03.12.17.10.01;	author smiddle;	state Exp;
branches;
next	1.6;

1.6
date	99.03.11.17.01.40;	author kbracey;	state Exp;
branches;
next	1.5;

1.5
date	99.02.24.13.33.52;	author smiddle;	state Exp;
branches;
next	1.4;

1.4
date	98.11.06.19.08.26;	author smiddle;	state Exp;
branches;
next	1.3;

1.3
date	98.01.05.10.24.35;	author smiddle;	state Exp;
branches;
next	1.2;

1.2
date	97.11.21.18.21.53;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	97.11.11.16.25.12;	author smiddle;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Add encoding_read_in_multibyte_sequence API.
Detail:
  The new API allows the client to determine if a read codec has run
  out of input in the middle of a multibyte sequence. This permits a
  client to distinguish between the two cases in which no output
  character is generated:

    a) insufficient input has been provided to complete an output character
    b) the input consisted of a complete multibyte sequence which generates
       no output (e.g. an ISO-2022 shift sequence)
Admin:
  Tested using Iconv.


Version 0.60. Tagged as 'Unicode-0_60'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > encoding.h */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2003] All rights reserved.                             */
/*                                                                        */
/* This file may be included in profit making or non profit making        */
/* software on any system running any version of RISC OS, provided it was */
/* used along with a licensed binary of Unicode Lib                       */
/* It is supplied "as is" without warranty, express or implied, of        */
/* merchantability for any purpose.                                       */
/* No liability can be claimed for any direct or indirect loss            */
/**************************************************************************/

#ifndef unicode_encoding_h
#define unicode_encoding_h

#include "iso10646.h"
#include <stdlib.h>

typedef struct EncodingPriv Encoding;

typedef int (*encoding_read_callback_fn)(void *handle, UCS4 c);

/*
 * startup and close down functions
 */
extern void encoding_initialise(void);
extern void encoding_tidyup(void);

/*
 * read processes the next part of a stream. s points to the data, which
 * is n bytes long. For each UCS character found, ucs_out() will be called
 * with the character code and the value passed in handle.
 * It will cope correctly with multi-byte codes split across two calls.
 * ucs_out() may return non-zero to indicate that decoding should stop.
 * The function returns the number of bytes read - this will equal n unless
 * ucs_out() signals early termination.
 */
extern unsigned encoding_read(Encoding *e,
			      encoding_read_callback_fn ucs_out,
			      const char *s,
			      unsigned int n,
			      void *handle);

/*
 * Determine if the read codec has run out of input in the middle of 
 * a multibyte sequence. Returns true if the codec is waiting for input
 * that forms part of a multibyte sequence.
 */
extern int encoding_read_in_multibyte_sequence(Encoding *e);

/*
 * write the UCS4 character c to the specified buffer
 *
 * "buf" is a pointer to a pointer to the buffer, and "bufsize" is a
 * pointer to a variable containing the space available in the buffer.
 *
 * The buffer space remaining is updated (including becoming negative)
 * whether there is sufficient room in the buffer or not.
 *
 * The function returns 1 if there was sufficient room in the buffer, or 0
 * if the buffer was not long enough.
 *
 * Some calls may produce no output, in which case buf and bufsize will be
 * unaltered, and 1 is returned.
 *
 * The buf ptr is only updated if there was sufficient room in the buffer.
 * If there was insufficient room, the buffer may or may not contain
 * partial output.
 *
 * Some encodings are stateful, and require that you call encoding_write
 * with c = NULL_UCS4 at the end of the text to flush pending data,
 * cancel escape sequences, etc. You may also pass in NULL_UCS4 in the
 * middle of the text to force active escape sequences to be cancelled, for
 * instance at the end of each line of an e-mail.
 *
 * If you are writing two totally separate messages with one encoding
 * session, reset should be called between them to clear state.
 */
extern int encoding_write(Encoding *e, UCS4 c, char **buf, int *bufsize);

/*
 * To obtain a new decoder session, use the following calls.
 *
 * new_encoding takes an encoding number. These numbers are Internet MIB numbers.
 * for_encoding is one of four values describing whether to the encoding will be used
 * with 'read' or 'write' methods and how writing should handle encoding errors.
 */

#define encoding_READ		0 /* to UTF 8 */
#define encoding_WRITE		1 /* from UTF8, single alternate for unencodable characters */
#define encoding_WRITE_STRICT	2 /* from UTF8 and return -1 if unencodable character */
#define encoding_WRITE_LOOSE	3 /* from UTF8, alternate list for unencodable characters */

extern Encoding *encoding_new(int n, int for_encoding);

/*
 * When a decoding session has finished, call delete_encoding to free up the Encoding
 * structure and other associated workspace.
 */
extern void encoding_delete(Encoding *e);

/*
 * reset_decoder() resets the decoder to its default state. Some encodings
 * have state (eg ISO 2022's character set and UCS-2's byte ordering) - this
 * will reset to allow a stream to be rescanned or a new stream to be
 * decoded.
 */

extern int encoding_reset(Encoding *e);

/*
 * Change an encoding's options flags. How an encoding interprets these options
 * is up to it. The new flags are set to (old_flags &~ clear) ^ eor. The function
 * returns the old flags. Typically these flags would be set immediately after
 * calling encoding_new/encoding_reset.
 */

extern unsigned int encoding_set_flags(Encoding *e, unsigned int clear, unsigned int eor);

#define encoding_FLAG_LITTLE_ENDIAN   1    /* Write/assume little-endian (eg UTF-16/UCS-4) */
#define encoding_FLAG_ENCODE_OPTIONAL 2    /* Encode optionally encoded chars (eg UTF-7)   */
#define encoding_FLAG_NO_HEADER       4    /* eg no UTF-16 byte order mark                 */

/*
 * Given a MIME charset name (terminated by a character not valid in a MIME
 * charset name, so a direct pointer into the Content-Type header field will do),
 * this returns the encoding number (the Internet MIB coded value if assigned).
 * This number can be passed to new_encoding(). If the name is unknown or
 * unsupported, 0 is returned.
 */
int encoding_number_from_name(const char *name);

/*
 * Setup the memory allocators for the encoding library to use
 * Defaults to malloc and free
 */

typedef void *(*encoding_alloc_fn)(size_t size);
typedef void (*encoding_free_fn)(void *ptr);

extern void encoding_set_alloc_fns(encoding_alloc_fn alloc, encoding_free_fn free);

extern int encoding_max_char_size(int enc_num);

/*
 * Return the default language string (see languages.h) for this encoding.
 * Generic encodings such as UTF8 return ""
 */

extern const char *encoding_default_language(int enc_num);

/* Return the default mime type for this encoding number. Returns true
 * if the encoding number was one recognised by the library */

extern int encoding_default_mime_type(int enc_num, char *buf, int buf_size);

/* Scan the list of loaded tables and free any that have zero usage
 * count and are further down the list than 'start_depth'. When a
 * table is used then it is pulled to the top of the list so the least
 * recently used tables are further down. start_depth==0 will remove
 * all unused tables. start_depth==8 is a suggested value to purge
 * tables that haven't been used for a bit.

 * It is up to a client application to call this function when it
 * wishes to purge unused tables and free up some memory. Otherwise
 * all tables will be kept for ever. */

extern void encoding_table_remove_unused(int start_depth);

/*
 * Get the current alphabet (as a RISC OS alphabet number). 111 means UTF-8...
 */
extern int encoding_current_alphabet(void);

/*
 * Return a pointer to a (static) 256-word table giving the UCS values of
 * each character in the specified alphabet. Returns NULL if not available.
 */
extern const UCS4 *encoding_alphabet_ucs_table(int alphabet);

#endif
@


1.10
log
@Merged some updated constants off Kevin's local copy.
Changed (C) message ready for release with C tools.
Module form renamed to "unicodelibm".

Version 0.51. Tagged as 'Unicode-0_51'
@
text
@d61 7
@


1.9
log
@  Merge of bug fixes from NCBrowser tree.
Detail:
  Buffer overrun fixed; some buffer counting problems fixed too.  There is
    now helpful initialisation and tidyup routines you can call too (called
    encoding_initialise and encoding_tidyup)
Admin:
  I've built this with cc 5.45 in basic build environment - it built OK.
  This source code now matches that in NCBrowser 5.28.


Version 0.47. Tagged as 'Unicode-0_47'
@
text
@d19 1
a19 1
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
d21 6
a26 5
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
@


1.8
log
@  Copyright message changes + changes from branch + Unified
   branched/non-branched builds
Detail:
  Copyright messages changed from E-14 to Pace throughout, filename
   placed at top of file throughout, instead of in just some files.

  Merged branch's fixes into our code base, plus made it possible to
   get nice debug output in branched tree, and vfprintf() to stderr in
   RISC OS tree.  Exactly same source used in branched tree now (apart
   from OS specific files riscos.c and unix.c moving into layers
   directory structure).

Admin:
  Built for branched, both Unix and RISC OS.
  Built in RISC OS tree, and compiled into TextConv.


Version 0.45. Tagged as 'Unicode-0_45'
@
text
@d39 6
@


1.7
log
@Changed encoding_table_remove_unused() so that it takes a
parameter giving the depth from which to start purging.
Fixed ISO2022 write code to free search tables.
Added unix.c for unix-targeted builds.
Updated cross-compile build.
Added unix-targeted build of library and textconv tool
in ccsolaris directory.

Version 0.36. Tagged as 'Unicode-0_36'
@
text
@d15 12
a26 9
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/
@


1.6
log
@Implemented SCSU and UTF-7.
Added encoding_set_flags().
Proper handling of byte order marks in UTF-16 and UCS-4.
Fixed UTF-16 surrogate writing.
Adjusted various MIME charset identifiers.
Incorporated latest Unicode Character Database (2.1.8).
Added "current system alphabet" encoding.
Created "TextConv" command line character set conversion utility.

Version 0.34. Tagged as 'Unicode-0_34'
@
text
@d156 6
a161 3
/*
 * Scan the list of loaded tables and free any that have zero usage counr.
 */
d163 5
a167 1
extern void encoding_table_remove_unused(void);
@


1.5
log
@Added copyright messages to all source files and unified the
header #define's.

Version 0.33. Not tagged
@
text
@d51 26
a76 4
 * write a UCS4 'character' to the buffer in the encoding setup.
 * The buffer size remaining is updated whether the sequence is written or not.
 * The function returns true or false for whether the buffer was written to.
 * The buf ptr is only updated if the sequence was successfully written.
d111 13
d145 1
a145 1
 * Return the default language string (see languages.h) for this encoding. 
d161 11
@


1.4
log
@Added new function encoding_default_mime_type() which given an
encoding number returns the first mime type from the matching
entry in the table.

Version 0.27. Tagged as 'Unicode-0_27'
@
text
@d15 12
a26 2
#ifndef encoding_H
#define encoding_H
@


1.3
log
@ Fixed autojp state machine. It wasn't resetting 'state' to HAD_NONE after
changing whatcode. So basically it was lucky it ever worked. Also rewrote
the various range tests to only use one compare per case.
Changed the 'for_encoding' parameter to encoding_write() to an enumeration.
Added a new type of writing where if the character cannot be encoded then
the function returns -1 rather than writing a default character
Added the pseudo-charsets csAutodetectJP and csEUCorShiftJIS to the encoding
table so that they return the correct default language (ja).
Added function to remove unused encoding tables (must be called explicitly).
Fixed usage counting in iso2022 (I think).
When looking up encoding name try stripping 'x-' and 'X-' off the front i
can't find on first pass.

Version 0.12. Tagged as 'Unicode-0_12'
@
text
@d106 5
@


1.2
log
@Added new file 'languages.h' with some ISO639 language codes.
Added a default language field to each encoding (using above codes).
Added a max char size field to each encoding.
Tidied up some of the reencoders behaviour when output ptr NULL.
Fixed a load of charset numbers which were wrong.
New UTF8 function to skiop multiple characters in a string.
Fixed RISC OS build which was out of date.

Version 0.04. Tagged as 'Unicode-0_04'
@
text
@d52 2
d55 6
d69 6
a74 6
    /*
     * reset_decoder() resets the decoder to its default state. Some encodings
     * have state (eg ISO 2022's character set and UCS-2's byte ordering) - this
     * will reset to allow a stream to be rescanned or a new stream to be
     * decoded.
     */
d98 6
d105 6
@


1.1
log
@Initial version checked in

Version 0.01. Not tagged
@
text
@d89 3
@
