head	1.6;
access;
symbols
	Configure-0_11:1.6
	Configure-0_10:1.5
	Configure-0_09:1.4
	Configure-0_08:1.4
	Configure-0_07:1.3
	Configure-0_06:1.2
	Configure-0_01:1.2
	Ursula_merge:1.1.2.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.2.1
	Ursula_RiscPC:1.1.2.1.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.2.1
	UrsulaBuild_FinalSoftload:1.1.2.1
	rthornb_UrsulaBuild-12Aug1998:1.1.2.1
	aglover_UrsulaBuild-05Aug1998:1.1.2.1
	rthornb_UrsulaBuild-29Jul1998:1.1.2.1
	rthornb_UrsulaBuild-22Jul1998:1.1.2.1
	rthornb_UrsulaBuild-15Jul1998:1.1.2.1
	rthornb_UrsulaBuild-07Jul1998:1.1.2.1
	bavison_ConfigureLib-0_05:1.1.2.1
	bavison_ConfigureLib-0_04:1.1.2.1
	rthornb_UrsulaBuild-17Jun1998:1.1.2.1
	bavison_ConfigureLib-0_03:1.1.2.1
	rthornb_UrsulaBuild-03Jun1998:1.1.2.1
	rthornb_UrsulaBuild-27May1998:1.1.2.1
	rthornb_UrsulaBuild-21May1998:1.1.2.1
	rthornb_UrsulaBuild_01May1998:1.1.2.1
	initial:1.1.2.1
	Ursula:1.1.2;
locks; strict;
comment	@# @;


1.6
date	2014.04.17.21.27.41;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	d3SAtlvmrVOA85xx;

1.5
date	2013.01.04.08.39.44;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	l6dUEeuBCCUOVRyw;

1.4
date	2012.01.07.10.53.05;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	zZec0qV6JisZkeOv;

1.3
date	2007.05.24.15.59.26;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.24.02.05.41;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	98.04.06.11.17.59;	author bavison;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.04.06.11.40.47;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Switch round precedence of search for a default CMOS setting
This resolves a small discrepancy between the "Default CMOS" menu entry in Configure and pressing "Default" on some of the dialogues with the plugins within Configure.
Now, both use
  IF ResetCMOS is in Choices use that first
  ELSE try in the read only Hook directory for this OS (via Choices$Path)
  ELSE ask the kernel what it would do for a delete-power-on

This also allows system integrators to provide a machine specific ResetCMOS in a writeable directory (Choices$Write) to override the ROM default.
Built, but not tested.

Version 0.11. Tagged as 'Configure-0_11'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	cmos.h ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Modular Configure
Purpose:	CMOS routines shared between multiple Configure plug-ins

History:
Date		Who	Change
----------------------------------------------------------------------------
08/12/1997	BJGA	Split from Common
			Added these headers
15/01/1998	BJGA	cmos_default now reads from cmos_DEFAULT_FILE

\**************************************************************************/

/* CLib */
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
/* local headers */
#include "cmos.h"  /* includes prototypes for this file */
#include "misc.h"

/******	cmos_default() ****************************************************\

Purpose:	Returns the default setting for this CMOS item
		(This way, just the one bit of code is required for reflecting
		the current and default settings in the window)
In:		Item specifier, MFD for message file in which to find Err_NoDefCMOS token
Out:		Value

\**************************************************************************/

int cmos_default (cmos item, void *messages)
{
  static const _kernel_oserror err_nodefcmos = { 0, "Err_NoDefCMOS" };
  FILE *defaults;
  int byte;

  defaults = fopen (cmos_DEFAULT_FILE, "rb");
  if (defaults == NULL) {
    /* No file, ask the Kernel what it would use */
    if (_swix (OS_NVMemory, _INR(0,1)|_OUT(2), 6, item.cmosbyte, &byte) != NULL) {
      /* Kernel doesn't support that OS_NVMemory reason, throw an error */
      throw ((_kernel_oserror *) _swix (MessageTrans_ErrorLookup, _INR(0,7)|_RETURN(0),
          (int) &err_nodefcmos, (int) messages, 0, 0, 0, 0, 0, 0)); /* can't use message_error() */
    }
  }
  else {
    fseek (defaults, item.cmosbyte, SEEK_SET);
    byte = fgetc (defaults);
    fclose (defaults);
  }

  return (byte >> item.cmosbit) & ((1u << item.cmoslength) -1);
}

/******	cmos_read() *******************************************************\

Purpose:	Returns the current setting for this CMOS item
		(This way, just the one bit of code is required for reflecting
		the current and default settings in the window)
In:		Item specifier
Out:		Value

\**************************************************************************/

int cmos_read (cmos item, void *messages /* unused */)  /* note these calls will not span byte boundaries */
{
  (void)messages;
  return ((_swi (OS_Byte, _INR(0,1)|_RETURN(2), 161, item.cmosbyte)) >> item.cmosbit) & ((1u << item.cmoslength) -1);
}

/******	cmos_write() ******************************************************\

Purpose:	Sets the value of a CMOS item
In:		Item specifier, new value

\**************************************************************************/

void cmos_write (cmos item, int value)  /* note these calls will not span byte boundaries */
{
  int byte, ovalue;
  byte = _swi (OS_Byte, _INR(0,1)|_RETURN(2), 161, item.cmosbyte);
  ovalue = (byte >> item.cmosbit) & ((1u << item.cmoslength) -1);
  if (value != ovalue) {
    byte &= ~( ((1u << item.cmoslength) -1) << item.cmosbit ); /* clear the old bit(s) */
    value &= ((1u << item.cmoslength) -1);                     /* force new value into range */
    byte += value << item.cmosbit;
    _swi (OS_Byte, _INR(0,2), 162, item.cmosbyte, byte);
  }
}
@


1.5
log
@Prefer to ask the Kernel for a reset CMOS value
Before looking for a ResetCMOS file, try asking the Kernel, as the mapping between OS version (and hence boot hook directory) isn't as simple as it was in Acorn's time - there can be several wildly differing platforms all from the same OS version.
Part of ticket #316.

Version 0.10. Tagged as 'Configure-0_10'
@
text
@d54 5
a58 4
  if (_swix (OS_NVMemory, _INR(0,1)|_OUT(2), 6, item.cmosbyte, &byte) != NULL) {
    /* Kernel doesn't support that OS_NVMemory reason, try for the defaults file */
    defaults = fopen (cmos_DEFAULT_FILE, "rb");
    if (defaults == NULL) {
d62 2
@


1.4
log
@Allow CFLAGS to be prefixed by the thing invoking the makefile.
Permits 26 bit target even when the C compiler defaults to 32 bit output.
Swapped to use StdTools and StdRules also.

Version 0.08. Tagged as 'Configure-0_08'
@
text
@d50 1
a50 1
  static _kernel_oserror err_nodefcmos = { 0, "Err_NoDefCMOS" };
d53 11
a63 4
  defaults = fopen (cmos_DEFAULT_FILE, "rb");
  if (defaults == NULL) {
    throw ((_kernel_oserror *) _swix (MessageTrans_ErrorLookup, _INR(0,7)|_RETURN(0),
        (int) &err_nodefcmos, (int) messages, 0, 0, 0, 0, 0, 0)); /* can't use message_error() */
d65 1
a65 3
  fseek (defaults, item.cmosbyte, SEEK_SET);
  byte = fgetc (defaults);
  fclose (defaults);
@


1.3
log
@  Corrected license wording.
Detail:
  cvsmunge got confused by the fact that this component was only on the
  Ursula branch and not on TRUNK. That meant we ended up with license
  wording at the top _and_ bottom of the files.
Admin:
  As I only removed comments, there is no actual code change.

Version 0.07. Tagged as 'Configure-0_07'
@
text
@d76 1
@


1.2
log
@Merged to trunk.

Version 0.01. Tagged as 'Configure-0_01'
@
text
@@


1.1
log
@file cmos was initially added on branch Ursula.
@
text
@d1 97
@


1.1.2.1
log
@Initial checkin of ConfigureLib to CVS.
@
text
@a0 97
/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	cmos.h ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Modular Configure
Purpose:	CMOS routines shared between multiple Configure plug-ins

History:
Date		Who	Change
----------------------------------------------------------------------------
08/12/1997	BJGA	Split from Common
			Added these headers
15/01/1998	BJGA	cmos_default now reads from cmos_DEFAULT_FILE

\**************************************************************************/

/* CLib */
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
/* local headers */
#include "cmos.h"  /* includes prototypes for this file */
#include "misc.h"

/******	cmos_default() ****************************************************\

Purpose:	Returns the default setting for this CMOS item
		(This way, just the one bit of code is required for reflecting
		the current and default settings in the window)
In:		Item specifier, MFD for message file in which to find Err_NoDefCMOS token
Out:		Value

\**************************************************************************/

int cmos_default (cmos item, void *messages)
{
  static _kernel_oserror err_nodefcmos = { 0, "Err_NoDefCMOS" };
  FILE *defaults;
  int byte;
  defaults = fopen (cmos_DEFAULT_FILE, "rb");
  if (defaults == NULL) {
    throw ((_kernel_oserror *) _swix (MessageTrans_ErrorLookup, _INR(0,7)|_RETURN(0),
        (int) &err_nodefcmos, (int) messages, 0, 0, 0, 0, 0, 0)); /* can't use message_error() */
  }
  fseek (defaults, item.cmosbyte, SEEK_SET);
  byte = fgetc (defaults);
  fclose (defaults);
  return (byte >> item.cmosbit) & ((1u << item.cmoslength) -1);
}

/******	cmos_read() *******************************************************\

Purpose:	Returns the current setting for this CMOS item
		(This way, just the one bit of code is required for reflecting
		the current and default settings in the window)
In:		Item specifier
Out:		Value

\**************************************************************************/

int cmos_read (cmos item, void *messages /* unused */)  /* note these calls will not span byte boundaries */
{
  return ((_swi (OS_Byte, _INR(0,1)|_RETURN(2), 161, item.cmosbyte)) >> item.cmosbit) & ((1u << item.cmoslength) -1);
}

/******	cmos_write() ******************************************************\

Purpose:	Sets the value of a CMOS item
In:		Item specifier, new value

\**************************************************************************/

void cmos_write (cmos item, int value)  /* note these calls will not span byte boundaries */
{
  int byte, ovalue;
  byte = _swi (OS_Byte, _INR(0,1)|_RETURN(2), 161, item.cmosbyte);
  ovalue = (byte >> item.cmosbit) & ((1u << item.cmoslength) -1);
  if (value != ovalue) {
    byte &= ~( ((1u << item.cmoslength) -1) << item.cmosbit ); /* clear the old bit(s) */
    value &= ((1u << item.cmoslength) -1);                     /* force new value into range */
    byte += value << item.cmosbit;
    _swi (OS_Byte, _INR(0,2), 162, item.cmosbyte, byte);
  }
}
@
