head	1.4;
access;
symbols
	Configure-0_11:1.4
	Configure-0_10:1.4
	Configure-0_09:1.4
	Configure-0_08:1.3
	Configure-0_07:1.3
	Configure-0_06:1.2
	Configure-0_01:1.2
	Ursula_merge:1.1.1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.2
	Ursula_RiscPC:1.1.1.2.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.2
	UrsulaBuild_FinalSoftload:1.1.1.2
	rthornb_UrsulaBuild-12Aug1998:1.1.1.2
	aglover_UrsulaBuild-05Aug1998:1.1.1.2
	rthornb_UrsulaBuild-29Jul1998:1.1.1.2
	rthornb_UrsulaBuild-22Jul1998:1.1.1.2
	rthornb_UrsulaBuild-15Jul1998:1.1.1.2
	rthornb_UrsulaBuild-07Jul1998:1.1.1.2
	bavison_ConfigureLib-0_05:1.1.1.2
	bavison_ConfigureLib-0_04:1.1.1.2
	rthornb_UrsulaBuild-17Jun1998:1.1.1.2
	bavison_ConfigureLib-0_03:1.1.1.2
	rthornb_UrsulaBuild-03Jun1998:1.1.1.2
	rthornb_UrsulaBuild-27May1998:1.1.1.2
	rthornb_UrsulaBuild-21May1998:1.1.1.2
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2012.09.01.13.45.37;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	7p6WM0Xy8OfSDPiw;

1.3
date	2007.05.24.15.59.26;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.24.02.05.41;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	98.04.06.11.18.04;	author bavison;	state dead;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.06.11.40.49;	author bavison;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.05.08.16.39.14;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Makefile recreated from fragments

Version 0.09. Tagged as 'Configure-0_09'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	str.h *************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Modular Configure
Purpose:	String routines shared between multiple Configure plug-ins

History:
Date		Who	Change
----------------------------------------------------------------------------
08/12/1997	BJGA	Split from Common
			Renamed functions to str_foo convention
			Added these headers
29/04/1998	BJGA	str_cpy and str_ncpy can now cope with null source ptrs

\**************************************************************************/

#ifndef NULL
#define NULL 0
#endif
#include "str.h"

/******	str_cpy() *********************************************************\

Purpose:	Same as strcpy, but copes with control-termination
In:		Source and destination pointers
Out:		Result is null-terminated

\**************************************************************************/

char *str_cpy (char* s1, const char *s2)
{
  char *orig1;
  if (s1 == NULL) return NULL;
  
  orig1 = s1;
  
  if (s2 != NULL)
  {
    for ( ; *s2 > 31; *s1 = *s2, s1++, s2++);
  }
  
  *s1 = 0;
  
  return orig1;
}

/******	str_ncpy() ********************************************************\

Purpose:	A bit like strncpy, and copes with control-termination
In:		Source and destination pointers
		n:	the size of the buffer being copied into
Out:		Up to (n-1) characters are copied
		Result is null-terminated (even if filling the buffer)

\**************************************************************************/

char *str_ncpy (char* s1, const char *s2, int n)
{
  char *orig1;
  if (s1 == NULL) return s1;
  
  orig1 = s1;
  
  if (s2 != NULL)
  {
    for ( ; *s2 > 31 && s1 < orig1 + n - 1; *s1 = *s2, s1++, s2++);
  }
  
  *s1 = 0;
  
  return orig1;
}

/******	str_len() *********************************************************\

Purpose:	Same as strlen, but copes with control-termination
In:		String pointer
Out:		Length of string

\**************************************************************************/

int str_len (const char *s)  /*  */
{
  const char *orig;
  if (s == NULL) return 0;
  for (orig = s; (unsigned) *s > 31; s++);
  return s - orig;
}
@


1.3
log
@  Corrected license wording.
Detail:
  cvsmunge got confused by the fact that this component was only on the
  Ursula branch and not on TRUNK. That meant we ended up with license
  wording at the top _and_ bottom of the files.
Admin:
  As I only removed comments, there is no actual code change.

Version 0.07. Tagged as 'Configure-0_07'
@
text
@d34 1
@


1.2
log
@Merged to trunk.

Version 0.01. Tagged as 'Configure-0_01'
@
text
@@


1.1
log
@file str was initially added on branch Ursula.
@
text
@d1 101
@


1.1.1.1
log
@Initial checkin of ConfigureLib to CVS.
@
text
@a0 84
/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	str.h *************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Modular Configure
Purpose:	String routines shared between multiple Configure plug-ins

History:
Date		Who	Change
----------------------------------------------------------------------------
08/12/1997	BJGA	Split from Common
			Renamed functions to str_foo convention
			Added these headers

\**************************************************************************/

#ifndef NULL
#define NULL 0
#endif

/******	str_cpy() *********************************************************\

Purpose:	Same as strcpy, but copes with control-termination
In:		Source and destination pointers
Out:		Result is null-terminated

\**************************************************************************/

char *str_cpy (char* s1, const char *s2)
{
  char *orig1;
  if (s1 == NULL) return s1;
  for (orig1 = s1; *s2 > 31; *s1 = *s2, s1++, s2++);
  *s1 = 0;
  return orig1;
}

/******	str_ncpy() ********************************************************\

Purpose:	A bit like strncpy, and copes with control-termination
In:		Source and destination pointers
		n:	the size of the buffer being copied into
Out:		Up to (n-1) characters are copied
		Result is null-terminated (even if filling the buffer)

\**************************************************************************/

char *str_ncpy (char* s1, const char *s2, int n)
{
  char *orig1;
  if (s1 == NULL) return s1;
  for (orig1 = s1; *s2 > 31 && s1 < orig1 + n - 1; *s1 = *s2, s1++, s2++);
  *s1 = 0;
  return orig1;
}

/******	str_len() *********************************************************\

Purpose:	Same as strlen, but copes with control-termination
In:		String pointer
Out:		Length of string

\**************************************************************************/

int str_len (const char *s)  /*  */
{
  const char *orig;
  if (s == NULL) return 0;
  for (orig = s; (unsigned) *s > 31; s++);
  return s - orig;
}
@


1.1.1.2
log
@String handling made slightly more robust when handling null pointers.
@
text
@a26 1
29/04/1998	BJGA	str_cpy and str_ncpy can now cope with null source ptrs
d45 2
a46 9
  if (s1 == NULL) return NULL;
  
  orig1 = s1;
  
  if (s2 != NULL)
  {
    for ( ; *s2 > 31; *s1 = *s2, s1++, s2++);
  }
  
a47 1
  
d65 1
a65 8
  
  orig1 = s1;
  
  if (s2 != NULL)
  {
    for ( ; *s2 > 31 && s1 < orig1 + n - 1; *s1 = *s2, s1++, s2++);
  }
  
a66 1
  
@
