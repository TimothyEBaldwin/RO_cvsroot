head	1.5;
access;
symbols
	ModuleTask-0_05:1.5
	ModuleTask-0_04:1.5
	ModuleTask-0_03:1.5
	dellis_autobuild_BaseSW:1.5
	sbrodie_sedwards_16Mar2000:1.5
	ModuleTask-0_02:1.5
	dcotton_autobuild_BaseSW:1.5
	nturton_ModuleTask-1_3:1.3
	dcotton_moduletask-MPTBuild_30Mar1999:1.4
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.4
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	afrost_NC2_Generic:1.1.1.3
	afrost_Funai01-33:1.1.1.3
	Spinner_RCA116:1.1.1.3
	Spinner_B20_2:1.1.1.3
	Spinner_19_3:1.1.1.3
	Spinner_B18:1.1.1.3
	Spinner_B17:1.1.1.3
	Spinner_B15:1.1.1.3
	Spinner_B14:1.1.1.3
	Spinner_B13:1.1.1.3
	Spinner_B12:1.1.1.3
	Spinner_B10:1.1.1.3
	Spin_merge:1.1.1.3
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.2.0.2
	Ursula_bp:1.2
	Spinner_B7:1.1.1.3
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.2
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.5
date	99.06.18.14.02.45;	author blaughto;	state Exp;
branches;
next	1.4;

1.4
date	99.03.30.10.27.13;	author dcotton;	state Exp;
branches;
next	1.3;

1.3
date	99.01.20.13.16.42;	author nturton;	state Exp;
branches;
next	1.2;

1.2
date	97.05.21.10.52.29;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.03.18.16.19.31;	author jsmith;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.16.19.31;	author jsmith;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.03.27.16.46.10;	author jsmith;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.04.11.20.28.19;	author jsmith;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Set the task handle to zero on receipt of Service_Reset, as specified in
the PRMs.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "swis.h"

#include "Desk.Debug.h"
#include "Desk.Error.h"
#include "Desk.Str.h"

#include "ModuleTask.ModuleTask.h"

#include "Defs.h"

#include "MemCheck:MemCheck.h"


#define	TASKHANDLE	(*ModuleTask_Client.taskhandle_ptr)

char*	ModuleTask__stack	= NULL;


_kernel_oserror*	ModuleTask__ModuleInitialise( const char *cmd_tail, int podule_base, void *pw)
	{
	_kernel_oserror*	e;

	MemCheck_InitNoDebug();

	MemCheck_RegisterMiscBlock_StringCR( cmd_tail);
	/*
		{
		MemCheck_checking	oldchecking = MemCheck_SetChecking( 0, 1);
		MemCheck_RegisterMiscBlock( cmd_tail, 1+Desk_strlencr( cmd_tail));
		MemCheck_RestoreChecking( oldchecking);
		}
	*/
	Desk_Debug_Assert( ModuleTask_Client.module_initialise);

	e = ModuleTask_Client.module_initialise( cmd_tail, podule_base, pw);
	if (e)	return e;

	MemCheck_UnRegisterMiscBlock( cmd_tail);
	Desk_Debug_Assert( ModuleTask_Client.taskhandle_ptr);

	TASKHANDLE = 0;

	return NULL;
	}


_kernel_oserror*	ModuleTask__ModuleCmdHandler( const char *arg_string, int argc, int cmd_no, void* pw)
	{
	_kernel_oserror*	e = NULL;

	Desk_Debug_Printf( Desk_error_PLACE "ModuleTask__ModuleCmdHandler called, cmd_no=%i\n", cmd_no);

	MemCheck_RegisterMiscBlock_StringCR( arg_string);
	/*
		{
		MemCheck_checking	oldchecking = MemCheck_SetChecking( 0, 1);
		MemCheck_RegisterMiscBlock( arg_string, 1+Desk_strlencr( arg_string));
		MemCheck_RestoreChecking( oldchecking);
		}
	*/

	if ( cmd_no == ModuleTask_Client.command_desktop_num)	{

		int	startup = 0;

		if ( TASKHANDLE == -1)	startup = 1;
		else if ( TASKHANDLE == 0)	{
			#ifdef ModuleTask_DESKTOP
				/* Check whether wimp is active, and enter module as above if so...	*/
				int	numtasks = 0;
				_swix( Wimp_ReadSysInfo, _IN(0)|_OUT(0), 0, &numtasks);	/* Returns >0 even at F12 command line...	*/
				if ( numtasks>0)	startup = 1;
			#else
			#endif
			}

		if ( startup)	{

			Desk_Debug_Printf( Desk_error_PLACE "Just about to enter module\n");

			e = _swix( OS_Module, _IN(0)|_IN(1)|_IN(2), 2, ModuleTask_Client.module_name, arg_string);

			if ( e)	Desk_Debug_Printf(
					Desk_error_PLACE "ModuleTask__ModuleCmdHandler entering module returned 0x%i '%s'\n",
					e->errnum, e->errmess
					);
			else	Desk_Debug_Printf( Desk_error_PLACE "ModuleTask__ModuleCmdHandler entering module retunred NULL\n");
			}
		}

	else if ( ModuleTask_Client.module_commandhandler)
		return ModuleTask_Client.module_commandhandler( arg_string, argc, cmd_no, pw);

	MemCheck_UnRegisterMiscBlock( arg_string);

	return NULL;

	Desk_UNUSED( arg_string);
	Desk_UNUSED( argc);
	Desk_UNUSED( pw);
	}


#define Service_Memory          0x11
#define Service_Reset           0x27
#define Service_StartWimp       0x49
#define Service_StartedWimp     0x4A
#define	Service_Help		0x09



void	ModuleTask__ModuleService( int service_no, _kernel_swi_regs *r, void *pw)
	{
	MemCheck_RegisterMiscBlock( r, sizeof( *r));

	switch (service_no)
	{
		case Service_StartWimp:
			if ( TASKHANDLE == 0)	{
				TASKHANDLE = -1;
				r->r[0] = (int) ModuleTask_Client.command_desktop;
				r->r[1] = 0;	/* Claim service	*/
				}
			break;

		case Service_StartedWimp:
			if ( TASKHANDLE == -1)	TASKHANDLE = 0;
			break;

		case Service_Reset:
			TASKHANDLE = 0;
			break;

		/* We aren't interested in applicationspace. Used to claim Service_Memory - resulting
		in 'next' amount of app memory being used... 11 Apr 1997

		We still allow the client to claim this service call though.
		*/
		/*
		case Service_Memory:
			if ( TASKHANDLE == -1)	r->r[1]=0;
			break;
		*/


		default:
			#ifdef Desk_DEBUG
				if ( service_no == Service_Help)	{
					Desk_Debug_Printf( Desk_error_PLACE "Received service %i, client service fn = 0x%p\n",
						service_no, ModuleTask_Client.module_service
						);
					}
			#endif
			if ( ModuleTask_Client.module_service)	{
				ModuleTask_Client.module_service( service_no, r, pw);
				}
			break;
	}

	MemCheck_UnRegisterMiscBlock( r);

	Desk_UNUSED( pw );
	}


_kernel_oserror*	ModuleTask__ModuleFinalise( int fatal, int podule, void* pw)
	{
	_kernel_oserror*	e = NULL;

	/*
	static Desk_os_error	cantquit = { 0, "Task is still active"};

	if ( TASKHANDLE > 0)	{
		Desk_Debug_Printf( Desk_error_PLACE "ModuleTask__ModuleFinalise: can't quit - taskhandle is > 0 (%i)\n", TASKHANDLE);
		return &cantquit;
		}
	*/
	if ( ModuleTask_Client.module_finalise)	e = ModuleTask_Client.module_finalise( fatal, podule, pw);
	if (e)	{
		Desk_Debug_Printf( Desk_error_PLACE "ModuleTask__ModuleFinalise: can't quit - task finalise fn returned error\n");
		return e;
		}

	if ( TASKHANDLE > 0)	{
		e = _swix( Wimp_CloseDown, _INR(0,1), TASKHANDLE, /**(int*)"TASK"*/0x4b534154);
		TASKHANDLE = 0;	/* Always set taskhandle to 0, so we can always quit after a second attempt, even if the task has gone wrong	*/
		if (e)	{
			Desk_Debug_Printf( Desk_error_PLACE "ModuleTask__ModuleFinalise: Wimp_CloseDown returned error %i, '%s'\n", e->errnum, e->errmess);
			return e;
			}
		}

	if ( fatal)	{
		Desk_Debug_Printf( Desk_error_PLACE "\n");
		if ( ModuleTask__stack != NULL)	{
			Desk_Debug_Printf( Desk_error_PLACE "Freeing stack at 0x%p\n", ModuleTask__stack);
			e = _swix( OS_Module, _IN(0)|_IN(2), 7, ModuleTask__stack);
			ModuleTask__stack = NULL;
			if(e) return e;
			}
		/*
		Desk_Debug_Printf( Desk_error_PLACE "Calling OS_Exit()\n");
		_swix( OS_Exit, _IN(0)|_IN(1), NULL, 0);
		Desk_Debug_Printf( Desk_error_PLACE "Called OS_Exit()\n");
		*/
		}

	Desk_Debug_Printf( Desk_error_PLACE "returning\n");
	return NULL;
	}




extern int	disable_stack_extension;

_kernel_oserror*	ModuleTask__ModuleEnter( const char *args)
	{
	Desk_Debug_Printf( Desk_error_PLACE "ModuleTask__ModuleEnter called, taskhandle=0x%08x\n", TASKHANDLE);
	Desk_Debug_Assert( ModuleTask_Client.module_enter);
	disable_stack_extension = 1;
	if ( TASKHANDLE == -1)	{
		if ( ModuleTask_Client.module_enter)	return ModuleTask_Client.module_enter( args);
		}

	return NULL;
	}
@


1.4
log
@Altered erroneous MemCheck.MemCheck.h include to correct MemCheck:MemCheck.h include. This was causing problems with components that linked against this library wanting MemCheck libraries present.
@
text
@d119 1
d130 40
a169 31
	if ( service_no == Service_StartWimp)	{
		if ( TASKHANDLE == 0)	{
			TASKHANDLE = -1;
			r->r[0] = (int) ModuleTask_Client.command_desktop;
			r->r[1] = 0;	/* Claim service	*/
			}
		}

	else if ( service_no == Service_StartedWimp)	{
		if ( TASKHANDLE == -1)	TASKHANDLE = 0;
		}


	/* We aren't interested in applicationspace. Used to claim Service_Memory - resulting
	in 'next' amount of app memory being used... 11 Apr 1997

	We still allow the client to claim this service call though.
	*/
	/*
	else if ( service_no == Service_Memory)	{
		//if ( TASKHANDLE == -1)	r->r[1]=0;
		}
	*/


	else	{
		#ifdef Desk_DEBUG
			if ( service_no == Service_Help)	{
				Desk_Debug_Printf( Desk_error_PLACE "Received service %i, client service fn = 0x%p\n",
					service_no, ModuleTask_Client.module_service
					);
d171 2
a172 5
		#endif
		if ( ModuleTask_Client.module_service)	{
			ModuleTask_Client.module_service( service_no, r, pw);
			}
		}
@


1.3
log
@Any error encountered while freeing the task stack is now reported.
@
text
@d25 1
a25 1
#include "MemCheck.MemCheck.h"
d36 1
a36 1
	
d38 1
a38 1
	
d48 1
a48 1
	
d51 1
a51 1
	
d54 1
a54 1
	
d56 1
a56 1
	
d64 1
a64 1
	
d66 1
a66 1
	
d75 1
a75 1
	
d77 1
a77 1
		
d79 1
a79 1
		
d90 1
a90 1
		
d92 1
a92 1
			
d94 1
a94 1
			
d96 3
a98 3
			
			if ( e)	Desk_Debug_Printf( 
					Desk_error_PLACE "ModuleTask__ModuleCmdHandler entering module returned 0x%i '%s'\n", 
d104 1
a104 1
	
d107 1
a107 1
	
d109 1
a109 1
	
d111 1
a111 1
	
d128 1
a128 1
	
d136 1
a136 1
	
d140 2
a141 2
	
	
d144 1
a144 1
	
d152 2
a153 2
	
	
d157 1
a157 1
				Desk_Debug_Printf( Desk_error_PLACE "Received service %i, client service fn = 0x%p\n", 
d166 1
a166 1
	
d168 1
a168 1
	
d176 1
a176 1
	
d179 1
a179 1
	
d190 1
a190 1
	
d199 1
a199 1
	
d214 1
a214 1
	
d232 1
a232 1
	
@


1.2
log
@Spinner branch merged
@
text
@d204 1
a204 1
			_swix( OS_Module, _IN(0)|_IN(2), 7, ModuleTask__stack);
d206 1
@


1.1
log
@Initial revision
@
text
@d19 1
d25 1
d37 10
d52 1
d54 1
d56 1
d63 2
d67 9
d77 1
a80 1
		
a91 1
			_kernel_oserror*	e;
a101 2
			
			return e;
a102 1
		else		return NULL;
d105 4
a108 1
	if ( ModuleTask_Client.module_commandhandler)		return ModuleTask_Client.module_commandhandler( arg_string, argc, cmd_no, pw);
d112 3
a114 3
	Desk_UNUSED( arg_string );
	Desk_UNUSED( argc );
	Desk_UNUSED( pw );
d127 2
d141 7
d149 1
a149 1
		if ( TASKHANDLE == -1)	r->r[1]=0;
d151 2
d167 2
d192 1
a192 1
		e = _swix( Wimp_CloseDown, _INR(0,1), TASKHANDLE, *(int*)"TASK");
d225 1
@


1.1.1.1
log
@Initial import of ModuleTask library
@
text
@@


1.1.1.2
log
@Stack created for USR mode by _blib_entermodule now has a proper chunk header. Added extra diagnostics and checking.
@
text
@a18 1
#include "Desk.Str.h"
a23 1
#include "MemCheck.MemCheck.h"
a34 10
	MemCheck_InitNoDebug();
	
	MemCheck_RegisterMiscBlock_StringCR( cmd_tail);
	/*
		{
		MemCheck_checking	oldchecking = MemCheck_SetChecking( 0, 1);
		MemCheck_RegisterMiscBlock( cmd_tail, 1+Desk_strlencr( cmd_tail));
		MemCheck_RestoreChecking( oldchecking);
		}
	*/
a39 1
	MemCheck_UnRegisterMiscBlock( cmd_tail);
a40 1
	
a41 1
	
a47 2
	_kernel_oserror*	e = NULL;
	
a49 9
	MemCheck_RegisterMiscBlock_StringCR( arg_string);
	/*
		{
		MemCheck_checking	oldchecking = MemCheck_SetChecking( 0, 1);
		MemCheck_RegisterMiscBlock( arg_string, 1+Desk_strlencr( arg_string));
		MemCheck_RestoreChecking( oldchecking);
		}
	*/
	
a50 1
		
d54 1
d66 1
d77 2
d80 1
d83 1
a83 4
	else if ( ModuleTask_Client.module_commandhandler)
		return ModuleTask_Client.module_commandhandler( arg_string, argc, cmd_no, pw);
	
	MemCheck_UnRegisterMiscBlock( arg_string);
d87 3
a89 3
	Desk_UNUSED( arg_string);
	Desk_UNUSED( argc);
	Desk_UNUSED( pw);
a101 2
	MemCheck_RegisterMiscBlock( r, sizeof( *r));
	
a130 2
	MemCheck_UnRegisterMiscBlock( r);
	
d154 1
a154 1
		e = _swix( Wimp_CloseDown, _INR(0,1), TASKHANDLE, /**(int*)"TASK"*/0x4b534154);
@


1.1.1.3
log
@Fixed 'Not a heap block' error on exit from module start code. Stopped claiming Service_Memory - used to use full Next slot of app memory
@
text
@a140 7
	
	/* We aren't interested in applicationspace. Used to claim Service_Memory - resulting
	in 'next' amount of app memory being used... 11 Apr 1997
	
	We still allow the client to claim this service call though.
	*/
	/*
d142 1
a142 1
		//if ( TASKHANDLE == -1)	r->r[1]=0;
a143 2
	*/
	
a215 1
	Desk_Debug_Printf( Desk_error_PLACE "ModuleTask__ModuleEnter called, taskhandle=0x%08x\n", TASKHANDLE);
@
