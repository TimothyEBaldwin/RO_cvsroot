head	1.5;
access;
symbols
	CLXLite-2_07:1.5
	CLXLite-2_06:1.5
	CLXLite-2_05:1.5
	CLXLite-2_04:1.5
	CLXLite-2_03:1.5
	CLXLite-2_02:1.5
	CLXLite-2_01:1.5
	CLXLite-2_00:1.5
	CLX-1_35:1.5
	CLX-1_34:1.5
	CLX-1_33:1.5
	CLX-1_32:1.5
	CLX-1_31:1.5
	CLX-1_30:1.5
	CLX-1_29:1.5
	CLX-1_28:1.5
	CLX-1_27:1.5
	CLX-1_26:1.5
	CLX-1_25:1.5
	CLX-1_24:1.5
	CLX-1_23:1.5
	CLX-1_22:1.4
	CLX-1_21:1.4
	CLX-1_20:1.4
	CLX-1_19:1.3
	dellis_autobuild_BaseSW:1.2
	CLX-1_18:1.2
	CLX-1_17:1.2
	CLX-1_16:1.2
	dcotton_autobuild_BaseSW:1.5
	CLX-1_15:1.2
	CLX-1_14:1.2
	CLX-1_13:1.2
	CLX-1_12:1.2
	CLX-1_11:1.2
	CLX-1_10:1.2
	CLX-1_09:1.2
	CLX-1_08:1.2
	CLX-1_07:1.2
	CLX-1_06:1.2
	CLX-1_05:1.2
	CLX-1_04:1.1;
locks; strict;
comment	@# @;


1.5
date	2000.11.13.16.14.52;	author sbrodie;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.02.13.47.28;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.27.14.45.46;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.02.22.18.39.59;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	98.11.11.12.30.55;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  New API in hash table code.
Detail:
  hash_key returns the key used for a given HashId.  This makes it
    easy to make the associated value of a hash entry be the key itself.
Admin:
  Tested.

Version 1.23. Tagged as 'CLX-1_23'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
  Title:        Hash table implementation
  Copyright:    (C) 1987, Acorn Computers Ltd., Cambridge, England.
  $Id: hash,v 1.4 2000/10/02 13:47:28 sbrodie Exp $
*/

#include <ctype.h>
#ifdef __STDC__
#  include <stdlib.h>
#  include <string.h>
#  define VoidStar  void *
#else
extern char *malloc();
#  include <strings.h>
#  define VoidStar  char *
#  define const
#endif

#include "hash.h"

#ifndef NULL
# define NULL            0
#endif

struct hash_id {
  struct hash_id *next;
  VoidStar assoc;
  char name[1];         /* actually, as big as is needed */
};

struct hash_tab {
  unsigned int size;
  int ci;
  HashId tab[1];       /* actually, as big as needed */
};

int hash_cistrcmp(const char *s1, const char *s2)
{
  int ch1, ch2;
  for (;;) {
    ch1 = *s1++;  ch2 = *s2++;
    /* care here for portability... don't rely on ANSI spec */
    if (isupper(ch1)) ch1 = tolower(ch1);
    if (isupper(ch2)) ch2 = tolower(ch2);
    if (ch1 != ch2) return ch1-ch2;
    if (ch1 == 0) return 0;
  }
}

static unsigned int hash_hash(const char *s, unsigned int ci)
{
  unsigned int ch, hash = 0;
  for (;;) {
    ch = *s++;
    if (ch == 0) return hash;
    if (ci && isupper(ch)) ch = tolower(ch);
    /* hash = hash * 37 + ch */
    hash = (hash << 5) + (hash << 2) + hash + ch;
  }
}

int hash_enter(HashTable t, const char *name, HashId *h_id)
{
/*
 * Return non-0 if name newly entered into t.
 */
  unsigned int hash = hash_hash(name, (unsigned int)t->ci) % t->size;
  HashId h;
  int (*cmp)(/* const char *, const char * */);

  if (t->ci) cmp = hash_cistrcmp; else cmp = strcmp;
  for (h = t->tab[hash];  h != NULL;  h = h->next) {
    if (cmp(name, h->name) == 0) { *h_id =  h;  return 0;}
  }

  h = (HashId) malloc(sizeof(struct hash_id) + strlen(name));
  strcpy(h->name, name);
  h->next = t->tab[hash];
  h->assoc = 0;
  *h_id = t->tab[hash] = h;
  return 1;
}

int hash_lookup(HashTable t, const char *name, HashId *h_id)
{
/*
 * Return non-0 if name found in t.
 */
  unsigned int hash = hash_hash(name, (unsigned int)t->ci) % t->size;
  HashId h;
  int (*cmp)(/* const char *, const char * */);

  if (t->ci) cmp = hash_cistrcmp; else cmp = strcmp;
  for (h = t->tab[hash];  h != NULL;  h = h->next) {
    if (cmp(name, h->name) == 0) { *h_id = h;  return 1;}
  }
  return 0;
}

void hash_assoc(HashTable t, HashId h, const VoidStar value)
{
  t = t;
  h->assoc = (VoidStar)value;
}

VoidStar hash_value(HashTable t, HashId h)
{
  t = t;
  return h->assoc;
}

VoidStar hash_key(HashTable t, HashId h)
{
  t = t;
  return h->name;
}

static HashTable hnew(int initial_size, int ci)
{
  HashTable h = (HashTable) malloc(sizeof(struct hash_tab) +
                            initial_size * sizeof(HashId));
  h->size = initial_size;
  h->ci   = ci;
  while (initial_size--) h->tab[initial_size] = NULL;
  return h;
}

HashTable hash_new(int initial_size)
{
  return hnew(initial_size, 0);
}

HashTable hash_cinew(int initial_size)
{
  return hnew(initial_size, 1);
}

extern void hash_destroy(HashTable t, void (*destroy_fn)(VoidStar))
/*
 * Destroy all data in the hash table.  The callback function is invoked
 * with each associated value to enable those to be destroyed too.  The
 * prototype is deliberately equal to that of the "free" function.  NULL
 * means don't do anything with the values.
 */
{
  int i;

  for (i=0; i<t->size; ++i) { /* For each bucket ... */
    HashId h, next;

    for (h = t->tab[i]; h; h=next) {
      if (h->assoc && destroy_fn) {
        (*destroy_fn)(h->assoc);
      }
      next = h->next;
      free(h);
    }
  }
  free(t);
}
@


1.4
log
@  Added elf.h, updated some definitions in aof.h
  Added the thumb disassembler and symbol mapping.
  Added more functionality to bytesex and symdefs.
Detail:
  The symdefs library code can now identify a file without loading it
    into memory in its entirety - this saves the linker a lot of grief.
    A new API is available to ask CLX whether the file is a symdefs
    file or not and defer loading of the symbols until a later date
    (during the load1 phase where the linker is concerned).
  elf.h makes all the definitions per the ARM ELF specification.  The
    linker requires these definitions (even if TARGET_HAS_ELF is not
    defined).
  Some more fixes to the disassembler.
  bytesex has a new API: bytesex_reverse_auto(flag), where flag is either
    bytesex_WANT_LITTLE_ENDIAN or bytesex_WANT_BIG_ENDIAN.  This relieves
    tools of the need to mess around trying to work out the endianness of
    the host to call bytesex_reverse or not.  (bytesex_reversing can be
    called to find out if reversing is happening or not after the call
    to bytesex_reverse_auto.)
  A new macro has been added to aof.h: rel_II to construct the II field
    of a type 2 AOF relocation.
Admin:
  Required by link 5.19 and later.
  Required by objasm 3.19 and later.

Version 1.20. Tagged as 'CLX-1_20'
@
text
@d18 1
a18 1
  $Id$
d124 6
@


1.3
log
@  Added pathmacro source.
  Added hash_destroy.
Detail:
  The pathmacro source file exports a single function for resolving
    RISC OS pathnames on whatever the host system is.  For example, this
    means that provided the environment variable HdrPATH is set to point
    to the appropriate directories, then "Hdr:RISCOS" will be resolved
    to the full pathname that can be passed to fopen et al.
  hash_destroy function added to enable hash tables to be destroyed.
    Each associate value is passed to a supplied callback function to
    permit each value to be freed.  Usually this will be NULL (no action)
    or the address of the library function free unless a private allocator
    has been used by the caller.
Admin:
  Tested on RISC OS and Solaris.

Version 1.19. Tagged as 'CLX-1_19'
@
text
@d18 1
a18 1
  $Revision: 1.2 $  LDS 19-May-88
@


1.2
log
@Added missing source files to ccsolaris/Makefile. Converted some
of the source files over to ANSI definitions. Fixed wholefls
so it actually compiles on RISC OS.

Version 1.05. Tagged as 'CLX-1_05'
@
text
@d18 1
a18 1
  $Revision: 1.1 $  LDS 19-May-88
d126 1
a126 1
static HashTable new(int initial_size, int ci)
d138 1
a138 1
  return new(initial_size, 0);
d143 25
a167 1
  return new(initial_size, 1);
@


1.1
log
@* Imported host and hash header and source files from older CLX's so
  that modsqz can build.
* Makefile uses -ff to strip function names from the code areas.

Version 1.04. Tagged as 'CLX-1_04'
@
text
@d18 1
a18 1
  $Revision: 1.03 $  LDS 19-May-88
d39 1
a39 1
typedef struct hash_id {
d45 1
a45 1
typedef struct hash_tab {
d51 1
a51 2
int hash_cistrcmp(s1, s2)
const char *s1, *s2;
d64 1
a64 3
static unsigned int hash_hash(s, ci)
const char *s;
unsigned int ci;
d76 1
a76 4
int hash_enter(t, name, h_id)
HashTable t;
const char *name;
HashId *h_id;
d98 1
a98 4
int hash_lookup(t, name, h_id)
HashTable t;
const char *name;
HashId *h_id;
d114 1
a114 4
void hash_assoc(t, h, value)
HashTable t;
HashId h;
const VoidStar value;
d120 1
a120 3
VoidStar hash_value(t, h)
HashTable t;
HashId h;
d126 1
a126 3
static HashTable new(initial_size, ci)
int initial_size;
int ci;
d136 1
a136 2
HashTable hash_new(initial_size)
int initial_size;
d141 1
a141 2
HashTable hash_cinew(initial_size)
int initial_size;
@

