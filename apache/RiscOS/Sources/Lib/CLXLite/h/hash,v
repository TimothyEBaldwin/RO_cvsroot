head	1.4;
access;
symbols
	CLXLite-2_07:1.4
	CLXLite-2_06:1.4
	CLXLite-2_05:1.4
	CLXLite-2_04:1.4
	CLXLite-2_03:1.4
	CLXLite-2_02:1.4
	CLXLite-2_01:1.4
	CLXLite-2_00:1.4
	CLX-1_35:1.4
	CLX-1_34:1.4
	CLX-1_33:1.4
	CLX-1_32:1.4
	CLX-1_31:1.4
	CLX-1_30:1.4
	CLX-1_29:1.4
	CLX-1_28:1.4
	CLX-1_27:1.4
	CLX-1_26:1.4
	CLX-1_25:1.4
	CLX-1_24:1.4
	CLX-1_23:1.4
	CLX-1_22:1.3
	CLX-1_21:1.3
	CLX-1_20:1.3
	CLX-1_19:1.2
	dellis_autobuild_BaseSW:1.1
	CLX-1_18:1.1
	CLX-1_17:1.1
	CLX-1_16:1.1
	dcotton_autobuild_BaseSW:1.4
	CLX-1_15:1.1
	CLX-1_14:1.1
	CLX-1_13:1.1
	CLX-1_12:1.1
	CLX-1_11:1.1
	CLX-1_10:1.1
	CLX-1_09:1.1
	CLX-1_08:1.1
	CLX-1_07:1.1
	CLX-1_06:1.1
	CLX-1_05:1.1
	CLX-1_04:1.1;
locks; strict;
comment	@# @;


1.4
date	2000.11.13.16.14.52;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.02.13.47.28;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.27.14.45.46;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.11.11.12.30.58;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  New API in hash table code.
Detail:
  hash_key returns the key used for a given HashId.  This makes it
    easy to make the associated value of a hash entry be the key itself.
Admin:
  Tested.

Version 1.23. Tagged as 'CLX-1_23'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
  Title:        Hash table abstraction
  Status:       Portable users' interface.
  Copyright:    (C) 1987, Acorn Computers Ltd., Cambridge, England.
  $Id: hash,v 1.3 2000/10/02 13:47:28 sbrodie Exp $
*/

/*
 * NOTE: The abstraction does not fail when loaded beyond its initial
 *       table size, but may run slowly if so loaded.
 */

#ifndef __hash_h
#define __hash_h

#ifndef VoidStar
#  ifdef __STDC__
#    define VoidStar  void /**/ *
#  else
#    define VoidStar  char *
#  endif
#endif

typedef struct hash_id  *HashId;
typedef struct hash_tab *HashTable;

extern int hash_cistrcmp(const char *s1, const char*s2);
/*
 * Compare s1 and s2 ignoring case of letters.
 * Return <0, =0, >0, according to whether s1 < s2, s1 == s2, s1 > s2.
 */

extern HashTable hash_new(int initial_size);
/*
 * Create a new hash table of requested initial size.
 * Comparison of entries will be case sensitive.
 * Making initial_size too small cannot cause the abstraction
 * to fail but may cause its performance to become poor.
 */

extern HashTable hash_cinew(int initial_size);
/*
 * Create a new hash table of requested initial size.
 * Comparison of entries will be case-insensitive.
 * Making initial_size too small cannot cause the abstraction
 * to fail but may cause its performance to become poor.
 */

extern void hash_destroy(HashTable t, void (*destroy_fn)(VoidStar));
/*
 * Destroy all data in the hash table.  The callback function is invoked
 * with each associated value to enable those to be destroyed too.  The
 * prototype is deliberately equal to that of the "free" function.  NULL
 * means don't do anything with the values.
 */

extern int hash_enter(HashTable t, const char *name, HashId *hash_id);
/*
 * Create an entry in 't' keyed by 'name', returning a token for it
 * via hash_id.
 * Return non-0 if a new entry was created; 0 if an entry already existed.
 */

extern int hash_lookup(HashTable t, const char *name, HashId *hash_id);
/*
 * Look up the entry keyed by 'name' in the hash table 't'.
 * If the entry is in the table then return non-0 and return the
 * identity of the entry via hash_id. Otherwise return 0.
 */

extern void hash_assoc(HashTable t, HashId h, const void *value);
/*
 * Associate the value 'value' with the entry of table 't' which
 * is identified by 'h'. Any previous association is lost.
 */

extern VoidStar hash_key(HashTable t, HashId h);
/*
 * Return the key associated with entry 'h' of table 't'.
 */

extern VoidStar hash_value(HashTable t, HashId h);
/*
 * Return the value currently associated with entry 'h' of table 't'.
 */

#endif
@


1.3
log
@  Added elf.h, updated some definitions in aof.h
  Added the thumb disassembler and symbol mapping.
  Added more functionality to bytesex and symdefs.
Detail:
  The symdefs library code can now identify a file without loading it
    into memory in its entirety - this saves the linker a lot of grief.
    A new API is available to ask CLX whether the file is a symdefs
    file or not and defer loading of the symbols until a later date
    (during the load1 phase where the linker is concerned).
  elf.h makes all the definitions per the ARM ELF specification.  The
    linker requires these definitions (even if TARGET_HAS_ELF is not
    defined).
  Some more fixes to the disassembler.
  bytesex has a new API: bytesex_reverse_auto(flag), where flag is either
    bytesex_WANT_LITTLE_ENDIAN or bytesex_WANT_BIG_ENDIAN.  This relieves
    tools of the need to mess around trying to work out the endianness of
    the host to call bytesex_reverse or not.  (bytesex_reversing can be
    called to find out if reversing is happening or not after the call
    to bytesex_reverse_auto.)
  A new macro has been added to aof.h: rel_II to construct the II field
    of a type 2 AOF relocation.
Admin:
  Required by link 5.19 and later.
  Required by objasm 3.19 and later.

Version 1.20. Tagged as 'CLX-1_20'
@
text
@d19 1
a19 1
  $Id$
d89 5
@


1.2
log
@  Added pathmacro source.
  Added hash_destroy.
Detail:
  The pathmacro source file exports a single function for resolving
    RISC OS pathnames on whatever the host system is.  For example, this
    means that provided the environment variable HdrPATH is set to point
    to the appropriate directories, then "Hdr:RISCOS" will be resolved
    to the full pathname that can be passed to fopen et al.
  hash_destroy function added to enable hash tables to be destroyed.
    Each associate value is passed to a supplied callback function to
    permit each value to be freed.  Usually this will be NULL (no action)
    or the address of the library function free unless a private allocator
    has been used by the caller.
Admin:
  Tested on RISC OS and Solaris.

Version 1.19. Tagged as 'CLX-1_19'
@
text
@d19 1
a19 1
  $Revision: 1.1 $  LDS 19-May-88
@


1.1
log
@* Imported host and hash header and source files from older CLX's so
  that modsqz can build.
* Makefile uses -ff to strip function names from the code areas.

Version 1.04. Tagged as 'CLX-1_04'
@
text
@d19 1
a19 1
  $Revision: 1.03 $  LDS 19-May-88
d52 1
a52 1
 * to fail but may cause its performance to become poor. 
d60 9
a68 1
 * to fail but may cause its performance to become poor. 
@

