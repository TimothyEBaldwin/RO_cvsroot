head	1.1;
access;
symbols
	CLXLite-2_07:1.1
	CLXLite-2_06:1.1
	CLXLite-2_05:1.1
	CLXLite-2_04:1.1
	CLXLite-2_03:1.1
	CLXLite-2_02:1.1
	CLXLite-2_01:1.1
	CLXLite-2_00:1.1
	CLX-1_35:1.1
	CLX-1_34:1.1
	CLX-1_33:1.1
	CLX-1_32:1.1
	CLX-1_31:1.1
	CLX-1_30:1.1
	CLX-1_29:1.1
	CLX-1_28:1.1
	CLX-1_27:1.1
	CLX-1_26:1.1
	CLX-1_25:1.1
	CLX-1_24:1.1
	CLX-1_23:1.1
	CLX-1_22:1.1
	CLX-1_21:1.1
	CLX-1_20:1.1
	CLX-1_19:1.1
	dellis_autobuild_BaseSW:1.1
	CLX-1_18:1.1
	CLX-1_17:1.1
	CLX-1_16:1.1
	dcotton_autobuild_BaseSW:1.1
	CLX-1_15:1.1
	CLX-1_14:1.1
	CLX-1_13:1.1
	CLX-1_12:1.1;
locks; strict;
comment	@# @;


1.1
date	99.11.16.15.54.32;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.1
log
@    Added extra components from SrcFiler version needed to build find.
Detail:
    Added files wildcard.c and wildcard.h from SrcFiler version.
    Debug code modified slightly to use #ifdef LIB_DEBUGGING instead of
      #if LIB_DEBUGGING and #include "clxdebug.h", to be consistent with
      other code in the CVS version.
    Makefile modified to compile this code and export the header.
Admin:
    Compiled and used to build find.

Version 1.12. Tagged as 'CLX-1_12'
@
text
@/* Copyright 1999 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * WildCarding for RISC OS / Arthur / Springboard.
 *
 * Status:       C Library Extension
 * Copyright:    (C) 1988, Acorn Computers Ltd., Cambridge, England.
 * $Revision: 1.01 $  LH  2-Mar-89
 * Copyright (C) Acorn Computers Ltd., 1989.
 */

#ifndef __wildcard_h
#define __wildcard_h

/* #include "clxdebug.h" */
#include "dir.h"

#ifndef VoidStar
#  ifdef __STDC__
#    define VoidStar  void *
#  else
#    define VoidStar  char *
#  endif
#endif

/*
 * When wild_enumerate finds a match, that match may be a directory. This poses
 * the problem of what to do about the directory if any of the contents of the
 * directory may also match the wildcarding.
 * EG. match xx(*.)* with a dir structure of xx and a file xx.xx, could claim
 * that both xx and xx.xx are matches.
 * a) if there may be a match further down the directory hierarchy then ignore
 *    the intermediate match with a directory (xx.xx only) or
 * b) both the intermediate dir and the leaf be considered a match (xx and xx.xx)
 * To solve this problem, the user may decide which of the two actions is
 * required, and pass the required action into wild_enumerate.
 */

#define WILD_LEAF_MATCHES_ONLY 1
#define WILD_ALL_MATCHES       2

typedef int wild_apply_fn (char *name, VoidStar context, dir_entry entry);
/*
 * type of procedure passed into wild_enumerate: if it returns non-zero,
 * wild_enumerate will terminate else wild_enumerate will terminate when
 * there are no more wildcard matches to call the user function with.
 * The last value returned by the user function is returned from wild_enumerate
 */

#ifdef LIB_DEBUGGING
  extern void wild_debug(int level);
  /* debugging is turned on to the required level (0 is off). */
#endif

extern void wild_give_help(void);
/*
 * print wildcard pattern help to stderr.
 */

extern int wild_carded(char *name);
/*
 * Return 0 if name is not wildcarded, otherwise non zero.
 */

extern int wild_enumerate(char *name, wild_apply_fn *fn, VoidStar context, int match_action);
/*
 * for all file names (including leaf directories) which match the wildcarded
 * string 'name', call the function fn (type described above) with the
 * supplied context, and a file descriptor 'dir_entry'.
 * If there has been no system error, the last value returned by the user
 * function is returned from wild_enumerate, otherwise 1 is returned. This
 * makes all negative values usable for error codes from the user function.
 */

#endif
@
