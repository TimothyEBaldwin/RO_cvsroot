head	1.1;
access;
symbols
	CLXLite-2_07:1.1
	CLXLite-2_06:1.1
	CLXLite-2_05:1.1
	CLXLite-2_04:1.1
	CLXLite-2_03:1.1
	CLXLite-2_02:1.1
	CLXLite-2_01:1.1
	CLXLite-2_00:1.1
	CLX-1_35:1.1
	CLX-1_34:1.1
	CLX-1_33:1.1
	CLX-1_32:1.1
	CLX-1_31:1.1
	CLX-1_30:1.1
	CLX-1_29:1.1
	CLX-1_28:1.1
	CLX-1_27:1.1
	CLX-1_26:1.1
	CLX-1_25:1.1
	CLX-1_24:1.1
	CLX-1_23:1.1
	CLX-1_22:1.1
	CLX-1_21:1.1
	CLX-1_20:1.1
	CLX-1_19:1.1
	dellis_autobuild_BaseSW:1.1
	CLX-1_18:1.1
	CLX-1_17:1.1
	CLX-1_16:1.1
	dcotton_autobuild_BaseSW:1.1
	CLX-1_15:1.1
	CLX-1_14:1.1
	CLX-1_13:1.1
	CLX-1_12:1.1
	CLX-1_11:1.1
	CLX-1_10:1.1
	CLX-1_09:1.1;
locks; strict;
comment	@# @;


1.1
date	99.11.10.16.47.51;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Import of directory enumeration code from Aquarius CLX.
Detail:
  * Added dir.c and dir.h from the original CLX library.  Minor change
    required to wholefls.c & .h to get this to compile.  Two macros
    previously privately defined in the wholefls.c are now exported in the
    header.
  * Added StripDepnd call to !MkClean.
Admin:
  * Built on RiscPC.  Dir enumeration code tested on Acorn Diff.

Version 1.09. Tagged as 'CLX-1_09'
@
text
@/* Copyright 1999 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
  Title:        Dir - directory enumeration.
  Status:       C Library Extension
  Copyright:    (C) 1988, Acorn Computers Ltd., Cambridge, England.
  $Revision: 1.01 $  LDS 24-May-88
*/

/*
 * This module implements an enumeration of directories.
 */

#ifndef __dir_h
#define __dir_h

#ifdef LIB_DEBUGGING
  extern void dir_debug(int level);
  /* debugging is turned on to the required level (0 is off). */
#endif

typedef struct dir_handle {void *hidden;} *dir_handle;
typedef struct dir_entry  {void *hidden;} *dir_entry;

#define  DIR_NOTANENTRY   0
#define  DIR_INACCESSIBLE 1
#define  DIR_FILE         2
#define  DIR_DIR          3

extern void dir_init(void);
/*
 * Initialise the module.
 */

extern dir_handle dir_open(char *pathname, char *pattern);
/*
 * Open the named directory and return a handle which can be used
 * to enumerate the contents. Only those entries matching pattern
 * will be enumerated. If pattern is NULL, then all entries will be
 * enumerable.
 * Returns: dh or NULL, if the directory could not be found, or could
 *          not be opened.
 */

extern void dir_close(dir_handle dh);
/*
 * Release storage associated with dh.
 */

extern int dir_next(dir_handle dh, dir_entry *e);
/*
 * Return the next entry from the directory in e.
 * Return 1 if succeeded, 0 if there is no next entry.
 * (Designed to be used like: while(dir_next(dh, &e)) {...};)
 */

extern char *dir_entryname(dir_entry e);
/*
 * Return a pointer to the name of the entry.
 * If the name is to be used beyond the next dir_next() call
 * then it should be copied.
 */

extern int dir_entrytype(dir_entry e);
/*
 * Return the type of the entry (DIR_FILE, DIR_DIR, etc)
 */

extern unsigned long dir_entrylength(dir_entry e);
/*
 * Return the length of the entry.
 */

/*
 * The following functions are not (as) portable and their use is
 * discouraged.
 */

extern unsigned long dir_entryload(dir_entry e);
/*
 * Return the load addres of the entry.
 */

extern unsigned long dir_entryexec(dir_entry e);
/*
 * Return the exec address of the entry.
 */
#endif
@
