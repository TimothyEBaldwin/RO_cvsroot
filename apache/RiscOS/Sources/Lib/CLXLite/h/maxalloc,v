head	1.1;
access;
symbols
	CLXLite-2_07:1.1
	CLXLite-2_06:1.1
	CLXLite-2_05:1.1
	CLXLite-2_04:1.1
	CLXLite-2_03:1.1
	CLXLite-2_02:1.1
	CLXLite-2_01:1.1
	CLXLite-2_00:1.1
	CLX-1_35:1.1
	CLX-1_34:1.1
	CLX-1_33:1.1
	CLX-1_32:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.12.12.18.07.06;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Various changes from Kevin.
Detail:
  Reinstatement of old CLX library files libflfmt and maxalloc
  Ensures that at least one space follows even really long diassembled opcodes
  Bugfix to floating point rounding
  Various extra defines and structs in h.asdfmt and h.ieeeflt
Admin:
  Presumably used for C 5.53 / 5.54 releases.

Version 1.32. Tagged as 'CLX-1_32'
@
text
@/* Copyright 2003 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
  Title:        maxalloc - Grab as much memory as we can at one go.
  Status:       C Library Extension
  Copyright:    (C) 1988, Acorn Computers Ltd., Cambridge, England.
  $Revision: 1.01 $  LDS 11-Mar-88
*/

#ifndef __maxalloc_h
#define __maxalloc_h

#ifndef VoidStar
#  ifdef __STDC__
#    define VoidStar  void *
#  else
#    define VoidStar  char *
#  endif
#endif

extern VoidStar maxalloc(long *ask_get);
/*
 * One entry, *ask_get contains a requested size.
 * On exit, *ask_get is updated to contain the amount got.
 * maxalloc returns a pointer to the gotten memory.
 * In the event of error, NULL is returned and *ask_get is set to 0.
 */

#endif
@
