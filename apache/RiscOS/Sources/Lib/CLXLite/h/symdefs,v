head	1.5;
access;
symbols
	CLXLite-2_07:1.5
	CLXLite-2_06:1.5
	CLXLite-2_05:1.5
	CLXLite-2_04:1.5
	CLXLite-2_03:1.5
	CLXLite-2_02:1.5
	CLXLite-2_01:1.4
	CLXLite-2_00:1.4
	CLX-1_35:1.4
	CLX-1_34:1.4
	CLX-1_33:1.4
	CLX-1_32:1.4
	CLX-1_31:1.4
	CLX-1_30:1.4
	CLX-1_29:1.4
	CLX-1_28:1.4
	CLX-1_27:1.4
	CLX-1_26:1.4
	CLX-1_25:1.4
	CLX-1_24:1.4
	CLX-1_23:1.4
	CLX-1_22:1.4
	CLX-1_21:1.3
	CLX-1_20:1.3
	CLX-1_19:1.2
	dellis_autobuild_BaseSW:1.2
	dcotton_autobuild_BaseSW:1.4
	CLX-1_18:1.2
	CLX-1_17:1.2
	CLX-1_16:1.1;
locks; strict;
comment	@# @;


1.5
date	2010.05.19.15.03.13;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.30.13.29.41;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.02.13.47.28;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.15.13.41.53;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.14.15.10.28;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  Changes to facilitate platform independence.
Detail:
  * Added shell-script make wrapper
  * Removed Norcroft-specific options from Makefile
  * Added GCC equivalents of inline assembler
  * Force use of our kernel.h with GCC (its own one is incomplete)
  * Workarounds to allow full-fat CLX library to use shared makefiles
Admin:
  Tested by rebuilding the DDE tools

Version 2.02. Tagged as 'CLXLite-2_02'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
  Title:        symdefs - operations on symdefs files
  Status:       C Library Extension
  Copyright:    (C) 2000, Pace Micro Technology plc.
  $Id: symdefs,v 1.4 2000/10/30 13:29:41 sbrodie Exp $
 */

/*
 * The following operations on symdefs files are designed to allow two modes
 * of processing: loading an input symbol file; writing an output symbol table
 * with an optional restriction on the symbols output.
 *
 * Operations are carefully chosen to make no assumptions about how storage
 * is managed - this is left entirely to the caller, as storage management
 * is a critical aspect of achieving good performance.
 */

#ifndef __symdefs_h
#define __symdefs_h

#include <stdio.h>

#include "aof_.h"

#ifndef int32
#  define int32 long int
#endif
#ifndef unsigned32
#  define unsigned32 unsigned long
#endif

#ifndef VoidStar
#  ifdef __STDC__
#    define VoidStar  void /* fool topcc */ *
#  else
#    define VoidStar  char *
#  endif
#endif

typedef enum {
  SFOPEN_INPUT,
  SFOPEN_OUTPUT,
  SFOPEN_INPUT_IDENT_ONLY
} SymDefsOpenMode;

typedef enum {
  symdef_ARM,
  symdef_DATA,
  symdef_THUMB,
  symdef_UNKNOWN
} SymDefSymbolType;

typedef struct SymDefSymbol SymDefSymbol;
typedef struct SymDefsFile SymDefsFile;

/* This is the callback function prototype for sf_parse/sf_load.  Always return NULL */
typedef SymDefSymbol *(*SymDefCallback)(SymDefsFile *, char *, int32, SymDefSymbolType, void *);



extern SymDefsFile *sf_new(void);
/*
 * Returns a newly allocated SymDefsFile structure, or NULL if failed.
 *
 */

extern void sf_delete(SymDefsFile *sf);
/*
 * Frees up all the memory associated with a symdefs file structure.
 *
 */

extern SymDefsFile *sf_open(char *filename, SymDefsFile *sf, SymDefsOpenMode mode);
/*
 * On entry, 'filename' is the name of the file which is assumed to be a
 * symdefs file; 'sf' in an intialised SymDefsFile returned by sf_new.
 *
 * On exit, 'sf' has been initialised safely and 'sf' is returned.
 * On an I/O error and the file not being a symdefs file and mode is
 *   SFOPEN_OUTPUT, 'sf' has been initialised safely and 'sf' is returned.
 *
 * On I/O error, or the file not being a symdefs file, NULL is returned.
 *
 * If 'mode' is SFOPEN_INPUT_IDENT_ONLY, only enough of the file to identify
 * it will be read.  If the file is not a SYMDEFS file, NULL will be returned
 * otherwise 'sf' will be returned.
 *
 * (structure still must be destroyed by sf_delete even if NULL returned)
 */

extern SymDefsFile *sf_load(SymDefsFile *sf, SymDefCallback callback, void *data);
/* Allocate memory, load an input symdefs file and enter symbols into
 * destination symbol table.  'sf' was previously returned from sf_open
 * when mode was SFOPEN_INPUT_IDENT_ONLY.  Each loaded symbol is passed
 * to the callback function.  'data' is passed as the 5th parameter to the
 * callback function.
 *
 * Returns NULL if something went wrong; 'sf' otherwise.
 */

extern SymDefsFile *sf_open_inplace(char *filename, SymDefsFile *sf, char *buffer, int32 size,
  SymDefsOpenMode mode, SymDefCallback callback, void *data);
/* On entry, 'filename' is a decorative name of the file which is assumed to be
 * in a block of memory pointed to by 'buffer' of length 'size'.  It can be used
 * instead of sf_open and sf_load to initialise a SymDefsFile.  'mode' may only
 * be SFOPEN_INPUT or SFOPEN_INPUT_IDENT_ONLY.
 *
 * If the buffer does not contain a SYMDEFS file, this function returns NULL.
 * If it does, this function returns 'sf'.  If 'mode' is invalid, it returns NULL.
 *
 * If 'mode' is SFOPEN_INPUT, the file will be parsed and the callback
 * function invoked for each loaded symbol, with 'data' passed as the 5th parameter
 */

extern char *sf_readheader(SymDefsFile *sf, int32 *size);
/*
 * Read the signature line from 'sf', returning the length of the signature
 * in size and returning a pointer to the signature as the function result
 * Otherwise return NULL (on i/o error, not a chunk file, etc.).
 */

extern int sf_rewrite(SymDefsFile *sf, char *filename, char *toolsig);
/*
 * Regenerate the file referred to by 'sf' with the actual values of the
 * symbols in the structure.  toolsig is the tool's ID string to put in the
 * symdefs file.  The new filename is in 'filename' - NULL means use the
 * name originally passed to sf_open.  Do not pass NULL as 'toolsig'.
 * There is no need to put the date in 'toolsig' - it is added for you.
 *
 * If successfully written, return 0 otherwise return -1.
 */

extern int sf_parse(SymDefsFile *sf, SymDefCallback callback, void *data);
/*
 * Parse a symdef file.  Each symbol that is located in the file is passed to
 * the supplied callback function which *must* always return NULL.  (The CLX library
 * needs and uses the return value internally to preserve comments in restriction
 * specification files).  'data' is passed as the 5th parameter to the callback.
 */

extern SymDefSymbol *sf_update_symbol(SymDefsFile *sf, char *name, int32 val, SymDefSymbolType t);
/*
 * Updates a symbol's value in the symdefs file list structure.  If all global symbols are
 * being exported, the symbol will be added to the structure.  If a restricted list is being
 * used, only existing symbols will be updated.
 *
 * Returns NULL if the symbol was not added.
 */

#endif
@


1.4
log
@  New API added to enable in-memory SYMDEFS files to be processed.
Detail:
  The linker usually caches object files internally.  This means that
    you cannot use SYMDEFS files embedded inside other files (e.g. ALF
    files).  The new API allows an in-memory file to be processed.
  Several APIs changed to allow a void* parameter to be specified for
    passing to the callback function.
Admin:
  Required by link 5.22 and later.
  Tested in conjunction with link 5.22.

Version 1.22. Tagged as 'CLX-1_22'
@
text
@d19 1
a19 1
  $Id: symdefs,v 1.3 2000/10/02 13:47:28 sbrodie Exp $
d37 1
a37 1
#include "aof.h"
@


1.3
log
@  Added elf.h, updated some definitions in aof.h
  Added the thumb disassembler and symbol mapping.
  Added more functionality to bytesex and symdefs.
Detail:
  The symdefs library code can now identify a file without loading it
    into memory in its entirety - this saves the linker a lot of grief.
    A new API is available to ask CLX whether the file is a symdefs
    file or not and defer loading of the symbols until a later date
    (during the load1 phase where the linker is concerned).
  elf.h makes all the definitions per the ARM ELF specification.  The
    linker requires these definitions (even if TARGET_HAS_ELF is not
    defined).
  Some more fixes to the disassembler.
  bytesex has a new API: bytesex_reverse_auto(flag), where flag is either
    bytesex_WANT_LITTLE_ENDIAN or bytesex_WANT_BIG_ENDIAN.  This relieves
    tools of the need to mess around trying to work out the endianness of
    the host to call bytesex_reverse or not.  (bytesex_reversing can be
    called to find out if reversing is happening or not after the call
    to bytesex_reverse_auto.)
  A new macro has been added to aof.h: rel_II to construct the II field
    of a type 2 AOF relocation.
Admin:
  Required by link 5.19 and later.
  Required by objasm 3.19 and later.

Version 1.20. Tagged as 'CLX-1_20'
@
text
@d19 1
a19 1
  $Id: symdefs,v 1.2 2000/09/15 13:41:53 sbrodie Exp $
d71 1
a71 1
typedef SymDefSymbol *(*SymDefCallback)(SymDefsFile *, char *, int32, SymDefSymbolType);
d105 1
a105 1
extern SymDefsFile *sf_load(SymDefsFile *sf, SymDefCallback callback);
d109 2
a110 1
 * to the callback function.
d115 14
d147 1
a147 1
extern int sf_parse(SymDefsFile *sf, SymDefCallback callback);
d152 1
a152 1
 * specification files)
@


1.2
log
@  Minor change to symdefs file handler.
Detail:
  Only symbols that have their values updated are output during a
    call to sf_rewrite.
Admin:
  Behaviour wrt deletion of the restrict file and its replacement with
     the real output file needs to be fixed.
  Tested with test program and development version of the linker.

Version 1.17. Tagged as 'CLX-1_17'
@
text
@d19 1
a19 1
  $Id$
d56 2
a57 1
  SFOPEN_OUTPUT
d70 4
d98 4
d105 9
a130 3

/* This is the callback function prototype for sf_parse.  Always return NULL */
typedef SymDefSymbol *(*SymDefCallback)(SymDefsFile *, char *, int32, SymDefSymbolType);
@


1.1
log
@  Added symdef file support.
Detail:
  The symdefs file format is now supported by CLX.  Functions are
    exported for loading symbols tables, updating symbol values
    and regenerating output files as per the ARM documentation.
Admin:
  Tested with a small test program.
  Tested on Solarix x86 and RISC OS.

Version 1.16. Tagged as 'CLX-1_16'
@
text
@d55 5
d82 1
a82 1
extern SymDefsFile *sf_open(char *filename, SymDefsFile *sf, int for_output);
d88 2
a89 2
 * On an I/O error and the file not being a symdefs file and for_output is
 * 1, 'sf' has been initialised safely and 'sf' is returned.
@

