head	1.1;
access;
symbols
	NBLib-0_28:1.1
	dellis_autobuild_BaseSW:1.1
	dcotton_autobuild_BaseSW:1.1
	nbingham_NBLib-0_27:1.1
	NBLib-0_27:1.1
	NBLib-0_26:1.1
	NBLib-0_25:1.1
	NBLib-0_24:1.1
	NBLib-0_23:1.1
	NBLib-0_22:1.1
	NBLib-0_21:1.1
	NBLib-0_20:1.1
	NBLib-0_19:1.1
	NBLib-0_18:1.1;
locks; strict;
comment	@# @;


1.1
date	98.11.09.09.31.13;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Major improvements.  Fixed error handling that got broken in 0.13.  Added
test harness which tests non-toolbox functions.  As a result of this several
bugs fixed.  Some code duplication removed.  Updated StrongHelp docs.

Version 0.18. Tagged as 'NBLib-0_18'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    Internal.c                                                  */
/* Purpose: Code from NBInternal.c of NBLib for testing.                */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@@acorn.com>                    */
/* History: 0.01  Sun 08th November 1998                                */
/*                Created.                                              */
/************************************************************************/

#include "Main.h"
#include "Internal.h"

/* ------------------------------------------------------------------------------------------------
 * nbinternal_setup_file_paths
 * Internal routine to setup file paths for nb_files & nb_dirs.
 * Parameters: flags    - If bit 0 is set concat location & object into path with a '.' in between.
 *                        else return location in path.
 *             location - as in all nb_file* and nb_dir* functions.
 *             object   - as in all nb_file* and nb_dir* functions.
 *             path     - pointer to which memory is allocated.
 * Returns:    FALSE (error), TRUE (success).  Remeber to free the memory.
 * ------------------------------------------------------------------------------------------------
 */
int internal_setup_file_paths(unsigned int flags, char *location, char *object, char **path)
{
  /* NEVER free this pointer.  It is done by the calling function */
  char *ptr;

  if (nb_bit_set(flags, 0) == TRUE)
  {
    /* Everything in location.  Check to make sure it isn't empty */
    if ( (location == NULL) || (strcmp(location, "") == 0) )
    {
      return(FALSE);
    }
    else
    {
      /* We have data. */
      if ((ptr= malloc(strlen(location) + 2)) == NULL)
      {
        return(FALSE);
      }
      else
      {
        strcpy(ptr, location);
        *path = ptr;
        printf("**Path is: %s\n", ptr);
        return(TRUE);
      }
    }
  }
  else
  {
    /* Location & Object should both have data.  Check first, though */
    if ( ((location == NULL) || (strcmp(location, "") == 0)) ||
         ((object == NULL) || (strcmp(object, "") == 0)) )
    {
      return(FALSE);
    }
    else
    {
      /* We have data. */
      if ((ptr= malloc(strlen(location) + strlen(object) + 5)) == NULL)
      {
        return(FALSE);
      }
      else
      {
        sprintf(ptr, "%s.%s", location, object);
        *path = ptr;
        printf("**Path is: %s\n", ptr);
        return(TRUE);
      }
    }
  }
}


/* ------------------------------------------------------------------------------------------------
 * nbinternal_clear_return_code
 * Internal routine to clear the _kernel_oserror block return_code.
 *
 * Parameters: void.
 *
 * Returns:    void.
 * ------------------------------------------------------------------------------------------------
 */
void internal_clear_return_code(void)
{
  return_code.errnum = 0;
  return_code.errmess[0] = '\0';
}
@
