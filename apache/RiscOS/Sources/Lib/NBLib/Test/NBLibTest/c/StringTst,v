head	1.1;
access;
symbols
	NBLib-0_28:1.1
	dellis_autobuild_BaseSW:1.1
	dcotton_autobuild_BaseSW:1.1
	nbingham_NBLib-0_27:1.1
	NBLib-0_27:1.1
	NBLib-0_26:1.1
	NBLib-0_25:1.1
	NBLib-0_24:1.1
	NBLib-0_23:1.1
	NBLib-0_22:1.1
	NBLib-0_21:1.1
	NBLib-0_20:1.1
	NBLib-0_19:1.1
	NBLib-0_18:1.1;
locks; strict;
comment	@# @;


1.1
date	98.11.09.09.31.14;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Major improvements.  Fixed error handling that got broken in 0.13.  Added
test harness which tests non-toolbox functions.  As a result of this several
bugs fixed.  Some code duplication removed.  Updated StrongHelp docs.

Version 0.18. Tagged as 'NBLib-0_18'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    String.c                                                    */
/* Purpose: Test harness for NBLib.                                     */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@@acorn.com>                    */
/* History: 0.01  Sun 08th November 1998                                */
/*                Created.                                              */
/************************************************************************/

#include "StringTst.h"
#include "Main.h"
#include "Internal.h"


/************************************************************************/
/* nb_case_insensitive_strcmp_TEST                                      */
/*                                                                      */
/* Test of nb_case_insensitive_strcmp                                   */
/************************************************************************/
void nb_case_insensitive_strcmp_TEST(void)
{
  int result;

  display_title("nb_case_insensitive_strcmp");

  printf("String 1:  ");
  scanf("%s", &path_1);
  printf("String 2:  ");
  scanf("%s", &path_2);

  result = nb_case_insensitive_strcmp(path_1, path_2);
  printf("Result:  %d\n", result);
}


/************************************************************************/
/* nb_case_insensitive_strncmp_TEST                                     */
/*                                                                      */
/* Test of nb_case_insensitive_strncmp                                  */
/************************************************************************/
void nb_case_insensitive_strncmp_TEST(void)
{
  int len;
  int result;

  display_title("nb_case_insensitive_strncmp");

  printf("String 1:  ");
  scanf("%s", &path_1);
  printf("String 2:  ");
  scanf("%s", &path_2);
  printf("Length:    ");
  scanf("%d", &len);

  result = nb_case_insensitive_strncmp(path_1, path_2, len);
  printf("Result:  %d\n", result);
}


/************************************************************************/
/* nb_mid_string_test                                                   */
/*                                                                      */
/* Test of nb_mid_string                                                */
/************************************************************************/
void nb_mid_string_TEST(void)
{
  int start, num;

  display_title("nb_mid_string");

  printf("String:    ");
  scanf("%s", &path_1);
  printf("Start:     ");
  scanf("%d", &start);
  printf("Extract:   ");
  scanf("%d", &num);

  nb_mid_string(0, path_1, path_2, start, num);
  printf("Result:  %s\n", path_2);
}


/************************************************************************/
/* nb_right_string_test                                                 */
/*                                                                      */
/* Test of nb_right_string                                              */
/************************************************************************/
void nb_right_string_TEST(void)
{
  int num;

  display_title("nb_right_string");

  printf("String:    ");
  scanf("%s", &path_1);
  printf("Extract:   ");
  scanf("%d", &num);

  nb_right_string(0, path_1, path_2, num);
  printf("Result:  %s\n", path_2);
}



/************************************************************************/
/* nb_strcpy_malloc_test                                                */
/*                                                                      */
/* Test of nb_strcpy_malloc                                             */
/************************************************************************/
void nb_strcpy_malloc_TEST(void)
{
  char		*test;

  display_title("nb_strcpy_malloc");

  printf("String:    ");
  scanf("%s", &path_1);

  nb_strcpy_malloc(&test, path_1);

  printf("Result:  %s\n", test);
  free(test);
}
@
