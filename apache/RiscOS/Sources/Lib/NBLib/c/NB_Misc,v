head	1.7;
access;
symbols
	NBLib-0_28:1.7
	dellis_autobuild_BaseSW:1.7
	dcotton_autobuild_BaseSW:1.7
	nbingham_NBLib-0_27:1.7
	NBLib-0_27:1.7
	NBLib-0_26:1.7
	NBLib-0_25:1.7
	NBLib-0_24:1.7
	NBLib-0_23:1.7
	NBLib-0_22:1.7
	NBLib-0_21:1.6
	NBLib-0_20:1.6
	NBLib-0_19:1.6
	NBLib-0_18:1.6
	NBLib-0_17:1.5
	NBLib-0_16:1.5
	NBLib-0_15:1.5
	NBLib-0_14:1.5
	NBLib-0_13:1.4
	NBLib-0_12:1.3
	NBLib-0_11:1.2
	NBLib-0_10:1.2
	NBLib-0_09:1.2
	NBLib-0_08:1.2
	NBLib-0_07:1.2
	NBLib-0_06:1.1.1.1
	NBLib-0_05:1.1.1.1
	NBLib-0_04:1.1.1.1
	NBLib-0_03:1.1.1.1
	NBLib-0_02:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	98.11.24.21.54.25;	author nbingham;	state Exp;
branches;
next	1.6;

1.6
date	98.11.09.09.31.25;	author nbingham;	state Exp;
branches;
next	1.5;

1.5
date	98.11.06.13.21.53;	author jberanek;	state Exp;
branches;
next	1.4;

1.4
date	98.11.06.12.05.19;	author nbingham;	state Exp;
branches;
next	1.3;

1.3
date	98.11.05.11.47.48;	author nbingham;	state Exp;
branches;
next	1.2;

1.2
date	98.10.19.15.11.41;	author nbingham;	state Exp;
branches;
next	1.1;

1.1
date	98.09.24.12.30.27;	author nbingham;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.24.12.30.27;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Added string null checker code.

Version 0.22. Tagged as 'NBLib-0_22'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    Misc.c                                                      */
/* Purpose: Misc code in the library.                                   */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@@binghams.demon.co.uk>             */
/* History: 0.01  - Fri 01st August 1997                                */
/*                  Created.                                            */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "math.h"
#include "time.h"
#include "ctype.h"

#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* nb_beep                                                              */
/*                                                                      */
/* Function produces a standard error beep.                             */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_beep(void)
{
  _swix(0x107, 0);
}


/************************************************************************/
/* nb_ensure_application                                                */
/*                                                                      */
/* Function checks to see if the specified application is running.      */
/* Returns FALSE or TRUE.                                               */
/*                                                                      */
/* Parameters: flags - flags word.                                      */
/*             name  - App name as in Task Manager.                     */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_ensure_application(unsigned int flags, char *name)
{
  _kernel_swi_regs	regs;
  char			 task_name[200];
  int			 found_app = FALSE;

  struct data_storage
  {
    int  task_handle;
    char *task_name;
    int  memory;
    int  flags;
  } block;

  NB_UNUSED(flags);

  strcpy(task_name, "\0");

  regs.r[0] = 0;

  do
  {
    regs.r[1] = (int) &block;
    regs.r[2] = sizeof(block);

    _kernel_swi(TaskManager_EnumerateTasks, &regs, &regs);

    if (!(block.flags == 1))
    {
      while((*block.task_name) > 31)
      {
        sprintf(task_name, "%s%c", task_name, *block.task_name++);
      }

      if (nb_case_insensitive_strcmp(task_name, name) == 0)
      {
        /* Found app */
        found_app = TRUE;
      }
      task_name[0] = '\0';
    }
  }
  while ((regs.r[0] >= 0) && (found_app == FALSE));

  if (found_app == TRUE)
  {
    return(TRUE);
  }
  else
  {
    return(FALSE);
  }
}


/************************************************************************/
/* nb_ensure_module                                                     */
/*                                                                      */
/* Function checks to see if a Relocatable Module is running.  Returns  */
/* TRUE or FALSE.                                                       */
/*                                                                      */
/* Parameters: flags - flags word.                                      */
/*             name  - Module name.                                     */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_ensure_module(unsigned int flags, char *name)
{
  _kernel_oserror	*er = NULL;
  _kernel_swi_regs	regs;

  NB_UNUSED(flags);

  /* Check that module is present */
  regs.r[0] = 18;
  regs.r[1] = (int) name;

  er = _kernel_swi(OS_Module, &regs, &regs);

  if (er != NULL)
  {
    /* Module not present */
    return(FALSE);
  }
  else
  {
    /* Module present */
    return(TRUE);
  }
}


/************************************************************************/
/* nb_get_date                                                          */
/*                                                                      */
/* Function returns the day, month & year from the internal clock.      */
/*                                                                      */
/* Parameters: flags                                                    */
/*             day_name - day name (0 [Sunday] - 6 [Saturday]).         */
/*             day      - current day.                                  */
/*             month    - current month.                                */
/*             year     - current year.                                 */
/*                                                                      */
/* Returns:    day, month & year as pointers.                           */
/*                                                                      */
/************************************************************************/
void nb_get_date(unsigned int flags, int *day_name, int *day, int *month, int *year)
{
  struct tm 		*time_struct = NULL;
  time_t		 current_time;

  NB_UNUSED(flags);

  /* Get Current Time & Date from internal clock. */
  time(&current_time);
  time_struct = localtime(&current_time);

  /* Assign date values to pointer vars. */
  if (day_name != NULL)
  {
    *day_name = time_struct->tm_wday;
  }
  if (day != NULL)
  {
    *day = time_struct->tm_mday;
  }
  if (month != NULL)
  {
    *month = time_struct->tm_mon + 1; /* value is range 0-11 so increment */
  }

  /* Year
   * ANSI C reports the year as the number of years since 1900.  i.e. 1997 is 97, and 2001 will
   * be 101.  Therefore adding 1900 to all year values will let the box continue to run after
   * 1999.
   */
  if (year != NULL)
  {
    *year = time_struct->tm_year + 1900;
  }
}


/************************************************************************/
/* nb_get_time                                                          */
/*                                                                      */
/* Function returns the current time from the internal clock.           */
/*                                                                      */
/* Parameters: flags                                                    */
/*             hours   - pointer to current hour on internal clock.     */
/*             minutes - pointer to current mins on internal clock.     */
/*             seconds - pointer to current secs on internal clock.     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_get_time(unsigned int flags, int *hours, int *minutes, int *seconds)
{
  struct tm 		*time_struct = NULL;
  time_t		 current_time;

  NB_UNUSED(flags);

  /* Get Current Time & Date from internal clock. */
  time(&current_time);
  time_struct = localtime(&current_time);

  /* Ints in time_struct must be padded with spaces if the values are less than 10 */
  if (hours != NULL)
  {
    *hours = time_struct->tm_hour;
  }
  if (minutes != NULL)
  {
    *minutes = time_struct->tm_min;
  }
  if (seconds != NULL)
  {
    *seconds = time_struct->tm_sec;
  }
}


/************************************************************************/
/* nb_hourglass                                                         */
/*                                                                      */
/* Function turns the hourglass on and off.                             */
/*                                                                      */
/* Parameters: flags. - Bit 0 Set:   Turn hourglass on.                 */
/*                      Bit 0 Unset: Turn hourglass off.                */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_hourglass(unsigned int flags)
{
  if (nb_bit_set(flags, 0) == TRUE)
  {
    _swix(Hourglass_On, 0);
   }
  else
  {
    _swix(Hourglass_Off, 0);
  }
}


/************************************************************************/
/* nb_get_screenmode                                                    */
/*                                                                      */
/* Function returns the screen mode in x & y resolution.                */
/*                                                                      */
/* Parameters:  x     - pointer to int to store width.                  */
/*              y     - pointer to int to store height.                 */
/*                                                                      */
/* Returns:     Screenmode in Pixels.                                   */
/*                                                                      */
/************************************************************************/
void nb_get_screenmode(unsigned int flags, int *x, int *y)
{
  int xpixels = 0;
  int xeig = 0;
  int ypixels = 0;
  int yeig = 0;

  NB_UNUSED(flags);

  _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_OUT(2),-1,11,&xpixels);
  _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_OUT(2),-1,4,&xeig);
  _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_OUT(2),-1,12,&ypixels);
  _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_OUT(2),-1,5,&yeig);

  *x = (((int)(xpixels*(pow(2,xeig))) + 2) / 2);
  *y = (((int)(ypixels*(pow(2,yeig))) + 2) / 2);
}


/************************************************************************/
/* nb_demo_expired                                                      */
/*                                                                      */
/* Function will return TRUE if the date passed to the function is      */
/* is before the system clock.                                          */
/*                                                                      */
/* Parameters: day, month & year.                                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_demo_expired(int day, int month, int year)
{
  int clock_day_name = 0;
  int clock_day = 0;
  int clock_month = 0;
  int clock_year = 0;

  nb_get_date(0, &clock_day_name, &clock_day, &clock_month, &clock_year);

  /* Check year first */
  if (year < clock_year)
  {
    return(TRUE);
  }
  if (year == clock_year)
  {
    if (month > clock_month)
    {
      return(FALSE);
    }
    if (month == clock_month)
    {
      if (day > clock_day)
      {
        return(FALSE);
      }
      else
      {
        return(TRUE);
      }
    }
    else
    {
      return(TRUE);
    }
  }
  else
  {
    return(FALSE);
  }
}

@


1.6
log
@Major improvements.  Fixed error handling that got broken in 0.13.  Added
test harness which tests non-toolbox functions.  As a result of this several
bugs fixed.  Some code duplication removed.  Updated StrongHelp docs.

Version 0.18. Tagged as 'NBLib-0_18'
@
text
@d52 1
a52 1
  _swix(0x107, _IN(0));
d267 2
a268 2
    _swix(Hourglass_On, _IN(0));
  }
d271 1
a271 1
    _swix(Hourglass_Off, _IN(0));
@


1.5
log
@ * Fixed typo in !MkExport build obey file

 * Removed function declarations for exported functions out of the
   individual header files, so they are no longer duplicated in 2 header
   files.  The main build-time header file now includes the main exported
   header file "NBLib"

 * Replaced nb_bit_set function with a much more efficient macro.

 * Made nb_set_bits more efficient.


Version 0.14. Tagged as 'NBLib-0_14'
@
text
@d239 1
a239 1
    *hours = time_struct->tm_hour + 1;
d243 1
a243 1
    *minutes = time_struct->tm_min + 1;
d247 1
a247 1
    *seconds = time_struct->tm_sec + 1;
@


1.4
log
@Fixed a couple of memory leaks and tidied up a few functions.  Split up some
of the code into more logical files.  Version reporting function added.
Moved to BAL's two-stage Makefile system.

Version 0.13. Tagged as 'NBLib-0_13'
@
text
@a358 1

@


1.3
log
@Made improvements to error handling.

Version 0.12. Tagged as 'NBLib-0_12'
@
text
@a56 62
/* nb_case_insensitive_strcmp                                           */
/*                                                                      */
/* Function does a strcmp but in a case sensitive manner.               */
/*                                                                      */
/* Parameters:  string 1                                                */
/*              string 2                                                */
/*                                                                      */
/* Returns:     TRUE or FALSE.                                          */
/*                                                                      */
/************************************************************************/
int nb_case_insensitive_strcmp(const char *first, const char *second)
{
  for (;;)
  {
    unsigned int a = *first++;
    unsigned int b = *second++;

    if (a == 0) return -b;
    if (a != b)
    {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
}


/************************************************************************/
/* nb_case_insensitive_strncmp                                          */
/*                                                                      */
/* Function does a strncmp but in a case sensitive manner.              */
/*                                                                      */
/* Parameters:  string 1 -                                              */
/*              string 2 -                                              */
/*              n        - number of bytes to compare.                  */
/*                                                                      */
/* Returns:     TRUE or FALSE.                                          */
/*                                                                      */
/************************************************************************/
int nb_case_insensitive_strncmp(const char *first, const char *second, size_t limit)
{
  for (;limit;--limit)
  {
    unsigned int a = *first++;
    unsigned int b = *second++;

    if (a == 0) return -b;
    if (a != b)
    {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
  return 0;
}


/************************************************************************/
a252 68
/* nb_mid_string                                                        */
/*                                                                      */
/* Function is equilivant to Basic's MID$.  It takes a starting position*/
/* from ZERO and returns the number of chars specified including the    */
/* character at the starting position.                                  */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void nb_mid_string(unsigned int flags, char *source, char *result, int start_pos, int nchars)
{
  int			 len = 0;
  int			 count = 0;

  NB_UNUSED(flags);

  len = strlen(source);

  strcpy(result, "\0");

  if ((start_pos < len) && ((start_pos + (nchars-1)) < len))
  {
    for (count = start_pos; count <= (start_pos + nchars-1); count++)
    {
      sprintf(result, "%s%c", result, source[count]);
    }
  }
}


/************************************************************************/
/* nb_right_string                                                      */
/*                                                                      */
/* Function does the same as the basic call RIGHT$ in that it returns   */
/* the n right-most characters in the string.                           */
/*                                                                      */
/* Parameters:    flags  - flags word.                                  */
/*                source - source string.                               */
/*                result - destination string for extracted text.       */
/*                nchars - number of chars to extract.                  */
/*                                                                      */
/* Returns:       void.  Result is returned via a pointer.              */
/*                                                                      */
/************************************************************************/
void nb_right_string(unsigned int flags, char *source, char *result, int nchars)
{
  int			 len = 0;
  int			 count = 0;

  NB_UNUSED(flags);

  len = strlen(source);

  strcpy(result, "\0");

  if ((len >0) && (nchars <= len))
  {
    for (count = (len - nchars); count < len; count++)
    {
      sprintf(result, "%s%c", result, source[count]);
    }
  }
}


/************************************************************************/
a359 45
/************************************************************************/
/* nb_strcpy_malloc                                                     */
/*                                                                      */
/* Function takes the data supplied in 'data', mallocs space at the     */
/* address of 'location' and copies the data to that address.           */
/*                                                                      */
/* Parameters: location - pointer to where to store string.             */
/*             data     - data to copy.                                 */
/*                                                                      */
/* Returns:    _kernel_oserror (error), NULL (success).                 */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_strcpy_malloc(char **location, char *data)
{
  _kernel_oserror	 return_code;
  char *ptr;

  if (!data)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc failed because no source data was supplied");
    return(&return_code);
  }
  else if (*data != NULL)
  {
    if ((ptr= malloc(strlen(data) + 2)) == NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_strcpy_malloc failed due to lack of memory");
      return(&return_code);
    }
    else
    {
      strcpy(ptr, data);
      *location = ptr;
      return(NULL);
    }
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc failed because a null pointer was passed");
    return(&return_code);
  }
}
@


1.2
log
@Added code to nb_misc.c.  Updated Docs.

Version 0.07. Tagged as 'NBLib-0_07'
@
text
@d133 2
a134 2
  char			 task_name[100];
  int			 found_app=FALSE;
d199 1
a199 1
  _kernel_oserror	*er;
d239 1
a239 1
  struct tm 		*time_struct;
d289 1
a289 1
  struct tm 		*time_struct;
d328 2
a329 2
  int			 len;
  int			 count;
d363 2
a364 2
  int			 len;
  int			 count;
d419 4
a422 1
  int xpixels,xeig,ypixels,yeig;
d449 4
a452 1
  int clock_day_name, clock_day, clock_month, clock_year;
@


1.1
log
@Initial revision
@
text
@d483 46
@


1.1.1.1
log
@Initial import of NBLib.

@
text
@@
