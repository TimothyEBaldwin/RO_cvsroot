head	1.7;
access;
symbols
	NBLib-0_28:1.7
	dellis_autobuild_BaseSW:1.7
	dcotton_autobuild_BaseSW:1.7
	nbingham_NBLib-0_27:1.7
	NBLib-0_27:1.7
	NBLib-0_26:1.7
	NBLib-0_25:1.7
	NBLib-0_24:1.7
	NBLib-0_23:1.7
	NBLib-0_22:1.7
	NBLib-0_21:1.7
	NBLib-0_20:1.7
	NBLib-0_19:1.7
	NBLib-0_18:1.7
	NBLib-0_17:1.6
	NBLib-0_16:1.6
	NBLib-0_15:1.6
	NBLib-0_14:1.6
	NBLib-0_13:1.6
	NBLib-0_12:1.5
	NBLib-0_11:1.4
	NBLib-0_10:1.3
	NBLib-0_09:1.3
	NBLib-0_08:1.3
	NBLib-0_07:1.2
	NBLib-0_06:1.2
	NBLib-0_05:1.2
	NBLib-0_04:1.2
	NBLib-0_03:1.2
	NBLib-0_02:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	98.11.09.09.31.22;	author nbingham;	state Exp;
branches;
next	1.6;

1.6
date	98.11.06.12.05.15;	author nbingham;	state Exp;
branches;
next	1.5;

1.5
date	98.11.05.11.47.39;	author nbingham;	state Exp;
branches;
next	1.4;

1.4
date	98.10.22.17.37.12;	author nbingham;	state Exp;
branches;
next	1.3;

1.3
date	98.10.20.14.26.05;	author nbingham;	state Exp;
branches;
next	1.2;

1.2
date	98.09.28.13.02.12;	author nbingham;	state Exp;
branches;
next	1.1;

1.1
date	98.09.24.12.30.26;	author nbingham;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.24.12.30.26;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Major improvements.  Fixed error handling that got broken in 0.13.  Added
test harness which tests non-toolbox functions.  As a result of this several
bugs fixed.  Some code duplication removed.  Updated StrongHelp docs.

Version 0.18. Tagged as 'NBLib-0_18'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    NB_Dirs.c                                                   */
/* Purpose: File contains code to do with directory operations.         */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@@binghams.demon.co.uk>             */
/* History: 0.01  Fri 07th August 1998                                  */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/* ============================================================================================== */
/* |======================================== CREATE CODE =======================================| */
/* ============================================================================================== */


/************************************************************************/
/* nb_directory_create                                                  */
/*                                                                      */
/* Function creates the specified directory in the location supplied.   */
/*                                                                      */
/* Parameters:  flags    - Bit 0 Unset - Location contains parent dir.  */
/*                         Bit 0 Set   - dir to create is included in   */
/*                                       location.                      */
/*              location - location to create directory                 */
/*              dir_name - directory to create.                         */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_create(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror		*return_ptr = NULL;
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;
  char				*buffer = NULL;

  nbinternal_clear_return_code();

  /* Setup the file paths accordingly based on the flags word */
  if (nbinternal_setup_file_paths(flags, location, dir_name, &buffer) == FALSE)
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess, "nb_directory_create failed due to lack of memory.");
    return_ptr = &return_code;
  }
  else
  {
    regs.r[0] = 8;
    regs.r[1] = (int) buffer;
    regs.r[4] = 0;

    er = _kernel_swi(OS_File, &regs, &regs);

    if (er != NULL)
    {
      /* There was a problem creating the directory */
      return_code.errnum = er->errnum;
      strcpy(return_code.errmess, er->errmess);
      return_ptr = &return_code;
    }
  }
  free(buffer);
  return(return_ptr);
}


/************************************************************************/
/* nb_directory_exists                                                  */
/*                                                                      */
/* Function checks to see if the specified directory exists.            */
/*                                                                      */
/* Parameters:  flags     - Bit 0 Set   - location contains full path.  */
/*                          Bit 0 Unset - location contains parent dir  */
/*                                       & dir_name is dir to check.    */
/*              location  - directory location or full file path.       */
/*              dir_name  - dir to check, or NULL.                      */
/*                                                                      */
/* Returns:    _kernel_oserror: 0 - Directory doesn't exist.            */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_exists(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror		*return_ptr = NULL;
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;
  char				*buffer = NULL;

  nbinternal_clear_return_code();

  /* Setup the file paths accordingly based on the flags word */
  if (nbinternal_setup_file_paths(flags, location, dir_name, &buffer) == FALSE)
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess, "nb_directory_exists failed due to lack of memory.");
    return_ptr = &return_code;
  }
  else
  {
    regs.r[0] = 21;
    regs.r[1] = (int) buffer;

    er = _kernel_swi(OS_File, &regs, &regs);

    if (er != NULL)
    {
      return_code.errnum = er->errnum;
      strcpy(return_code.errmess, er->errmess);
      return_ptr = &return_code;
    }
    else
    {
      /* SWI returned NULL meaning something exists.  Now check to see if it is a directory */

      if(regs.r[0] != 2)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "Directory Doesn't Exist.");
        return_ptr = &return_code;
      }
    }
  }
  free(buffer);
  return(return_ptr);
}


/************************************************************************/
/* nb_directory_open                                                    */
/*                                                                      */
/* Function opens the specified direcory.                               */
/*                                                                      */
/* Parameters:  flags    - Bit 0 Set   - location contains full path.   */
/*                         Bit 0 Unset - location contains parent dir   */
/*                                       & dir_name is dir to open.     */
/*              location - location of directory.                       */
/*              dir_name - directory to open.                           */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_open(unsigned int flags, char *location, char *dir_name)
{
  char				*buffer = NULL;

  if (nb_directory_exists(1, location, NULL) == NULL)
  {
    /* Whether location is the directory, or it is the parent, the directory does exist */
    if (nb_bit_set(flags, 0) == TRUE)
    {
      /* location includes directory to open. */
      if ((buffer = malloc(strlen(location) + 20)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_open_directory failed due to lack of memory");
        return(&return_code);
      }
      else
      {
        sprintf(buffer, "filer_opendir %s", location);
        _kernel_oscli(buffer);

        free(buffer);
        return(NULL);
      }
    }
    else
    {
      /* We must add dir_name to the end of location
       * allocate memory for operation
       */
      if ((buffer = malloc(strlen(location) + strlen(dir_name) + 20)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_open_directory failed due to lack of memory");
        return(&return_code);
      }
      else
      {
        sprintf(buffer, "filer_opendir %s.%s", location, dir_name);

        /* Check that the combined dir really exists */
        if (_kernel_oscli(buffer) != TRUE)
        {
          /* There was a problem with the concetanated directory name */
          return_code.errnum = 0;
          strcpy(return_code.errmess,
                 "nb_open_directory failed because directory specified doesn't exist.");

          free(buffer);
          return(&return_code);
        }
        else
        {
          free(buffer);
          return(NULL);
        }
      }
    }
  }
  else
  {
    /* Directory doesn't exist */
    return_code.errnum = 0;
    strcpy(return_code.errmess,
           "nb_open_directory failed because specified directory doesn't exist");
    return(&return_code);
  }
}


/************************************************************************/
/* nb_directory_lock                                                    */
/*                                                                      */
/* Function sets the Lock bit of the specified directory                */
/*                                                                      */
/* Parameters:  flags     - Bit 0 Set   - location contains full path.  */
/*                          Bit 0 Unset - location contains parent dir  */
/*                                       & dir_name is directory to lock*/
/*              location  - directory location or full dir path.        */
/*              dir_name  - directory to lock or NULL.                  */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_lock(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror		*return_ptr = NULL;
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;
  char				*buffer = NULL;

  nbinternal_clear_return_code();

  /* Setup the file paths accordingly based on the flags word */
  if (nbinternal_setup_file_paths(flags, location, dir_name, &buffer) == FALSE)
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess, "nb_directory_lock failed due lack of memory");
    return_ptr = &return_code;
  }
  else
  {
    if (nb_directory_exists(1, buffer, NULL) != NULL)
    {
      return_code.errnum = 3;
      strcpy(return_code.errmess,"nb_directory_lock failed because dir doesn't exist.");
      return_ptr = &return_code;
    }
    else
    {
      regs.r[0] = 17;
      regs.r[1] = (int) buffer;

      /* OK now that paths have been setup, get the existing file flags */
      er = _kernel_swi(OS_File, &regs, &regs);

      if (er != NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess,"nb_directory_lock failed (attributes couldn't be read).");
        return_ptr = &return_code;
      }
      else
      {
        /* Update the returned flags to lock the file */
        regs.r[5] |= (1 << 3);
        regs.r[0] = 4;

        er = _kernel_swi(OS_File, &regs, &regs);

        if (er != NULL)
        {
          return_code.errnum = 2;
          strcpy(return_code.errmess,
                 "nb_directory_lock failed (file attributes couldn't be written).");
          return_ptr = &return_code;
        }
      }
    }
  }
  free(buffer);
  return(return_ptr);
}


/************************************************************************/
/* nb_directory_unlock                                                  */
/*                                                                      */
/* Function sets the Lock bit of the specified directory to be unlocked.*/
/*                                                                      */
/* Parameters:  flags     - Bit 0 Set   - location contains full path.  */
/*                          Bit 0 Unset - location contains parent dir  */
/*                                       & dir_name is the dir to unlock*/
/*              location  - directory location or full directory path.  */
/*              dir_name  - directory to unlock, or NULL.               */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_unlock(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror		*return_ptr = NULL;
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;
  char				*buffer = NULL;

  nbinternal_clear_return_code();

  /* Setup the file paths accordingly based on the flags word */
  if (nbinternal_setup_file_paths(flags, location, dir_name, &buffer) == FALSE)
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess, "nb_directory_unlock failed due lack of memory");
    return_ptr = &return_code;
  }
  else
  {
    if (nb_directory_exists(1, buffer, NULL) != NULL)
    {
      return_code.errnum = 3;
      strcpy(return_code.errmess,"nb_directory_unlock failed because dir doesn't exist.");
      return_ptr = &return_code;
    }
    else
    {
      regs.r[0] = 17;
      regs.r[1] = (int) buffer;

      /* OK now that paths have been setup, get the existing file flags */
      er = _kernel_swi(OS_File, &regs, &regs);

      if (er != NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess,"nb_directory_unlock failed (attributes couldn't be read).");
        return_ptr = &return_code;
      }
      else
      {
        /* Update the returned flags to lock the file */
        regs.r[5] &= ~(1 << 3);
        regs.r[0] = 4;

        er = _kernel_swi(OS_File, &regs, &regs);

        if (er != NULL)
        {
          return_code.errnum = 2;
          strcpy(return_code.errmess,
                 "nb_directory_unlock failed (file attributes couldn't be written).");
          return_ptr = &return_code;
        }
      }
    }
  }
  free(buffer);
  return(return_ptr);
}
@


1.6
log
@Fixed a couple of memory leaks and tidied up a few functions.  Split up some
of the code into more logical files.  Version reporting function added.
Moved to BAL's two-stage Makefile system.

Version 0.13. Tagged as 'NBLib-0_13'
@
text
@d57 1
d62 4
a65 1
  if (nb_bit_set(flags, 0) == TRUE)
d67 3
a69 5
    /* location includes directory to build.
     * Use OS_File 8 to create the directory */
    regs.r[0] = 8;
    regs.r[1] = (int) location;
    regs.r[4] = 0;
d73 7
a79 22
    /* Location contains parent directory */
    /* dir_name contains details of directory to create.  Check location actually exists. */
    er = nb_directory_exists(1, location, NULL);
    if (!er)
    {
      /* allocate memory for operation */
      if ((buffer = malloc(strlen(location) + strlen(dir_name) + 6)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_create_directory failed due to lack of memory");
        return(&return_code);
      }
      else
      {
        sprintf(buffer, "%s.%s", location, dir_name);
        /* Use OS_File 8 to create the directory */
        regs.r[0] = 8;
        regs.r[1] = (int) buffer;
        regs.r[4] = 0;
      }
    }
    else
d81 4
a84 4
      /* Parent directory didn't exist - report error */
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_create_directory failed because directory didn't exist");
      return(&return_code);
d87 2
a88 22

  /* OK now that paths have been setup, create the directory */
  er = NULL;
  er = _kernel_swi(OS_File, &regs, &regs);

  if (nb_bit_set(flags, 0) == FALSE)
    free(buffer);

  if (er != NULL)
  {
    /* There was a problem creating the directory */
    return_code.errnum = 0;
    strcpy(return_code.errmess,
           "nb_create_directory failed due to the host directory name supplied being incorrect.");

    return(&return_code);
  }
  else
  {
    /* No problem encountered */
    return(NULL);
  }
d103 1
a103 1
/* Returns:    NULL if it exists, otherwise a _kernel_oserror.          */
d108 1
d113 4
a116 1
  if (nb_bit_set(flags, 0) == TRUE)
d118 3
a120 5
    /* location includes file to check.
     * Use OS_File 21 to determine path and filetype
     */
    regs.r[0] = 21;
    regs.r[1] = (int) location;
a123 11
    /* location contains parent directory only */
    if ((buffer = malloc(strlen(location) + strlen(dir_name) + 6)) == NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_directory_exists failed due to lack of memory");
      return(&return_code);
    }
    else
    {
      sprintf(buffer, "%s.%s", location, dir_name);
    }
a125 4
  }

  /* Filepath sorted out, so check for its validity. */
  er = _kernel_swi(OS_File, &regs, &regs);
d127 1
a127 2
  if (nb_bit_set(flags, 0) == FALSE)
    free(buffer);
d129 1
a129 7
  if (er != NULL)
  {
    return(er);
  }
  else
  {
    if(regs.r[0] == 2)
d131 3
a133 2
      /* Directory Present */
      return(NULL);
d137 8
a144 3
      return_code.errnum = 0;
      strcpy(return_code.errmess, "Directory Doesn't Exist.");
      return(&return_code);
d147 2
d252 1
d257 4
a260 1
  if (nb_bit_set(flags, 0) == TRUE)
d262 7
a268 2
    /* location includes dir to lock */
    if (nb_directory_exists(1, location, NULL) == NULL)
d270 3
a272 2
      regs.r[0] = 17;
      regs.r[1] = (int) location;
d276 7
a282 13
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_directory_lock failed because directory doesn't exist");
      return(&return_code);
    }
  }
  else
  {
    /* Location contains parent directory */
    /* dir_name contains details of the file to lock.  Check file actually exists. */
    if (nb_directory_exists(0, location, dir_name) == NULL)
    {
      /* allocate memory for operation */
      if ((buffer = malloc(strlen(location) + strlen(dir_name) + 6)) == NULL)
d285 2
a286 2
        strcpy(return_code.errmess, "nb_directory_lock failed due to lack of memory");
        return(&return_code);
d290 5
a294 1
        sprintf(buffer, "%s.%s", location, dir_name);
d296 7
a302 2
        regs.r[0] = 17;
        regs.r[1] = (int) buffer;
a304 29
    else
    {
      /* Parent directory didn't exist - report error */
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_directory_lock failed because the directory doesn't exist");
      return(&return_code);
    }
  }

  /* OK now that paths have been setup, get the existing directory flags */
  _kernel_swi(OS_File, &regs, &regs);

  /* Update the returned flags to lock the file */
  regs.r[5] |= (1 << 3);
  regs.r[0] = 4;

  er = _kernel_swi(OS_File, &regs, &regs);

  if (nb_bit_set(flags, 0) == FALSE)
    free(buffer);

  if (er != NULL)
  {
    return(er);
  }
  else
  {
    /* No problem encountered */
    return(NULL);
d306 2
d327 1
d332 4
a335 1
  if (nb_bit_set(flags, 0) == TRUE)
d337 7
a343 2
    /* location includes dir to unlock */
    if (nb_directory_exists(1, location, NULL) == NULL)
d345 3
a347 2
      regs.r[0] = 17;
      regs.r[1] = (int) location;
d351 7
a357 13
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_directory_unlock failed because file doesn't exist");
      return(&return_code);
    }
  }
  else
  {
    /* Location contains parent directory */
    /* dir_name contains details of the file to unlock.  Check file actually exists. */
    if (nb_directory_exists(0, location, dir_name) == NULL)
    {
      /* allocate memory for operation */
      if ((buffer = malloc(strlen(location) + strlen(dir_name) + 6)) == NULL)
d360 2
a361 2
        strcpy(return_code.errmess, "nb_directory_unlock failed due to lack of memory");
        return(&return_code);
d365 3
a367 1
        sprintf(buffer, "%s.%s", location, dir_name);
d369 9
a377 2
        regs.r[0] = 17;
        regs.r[1] = (int) buffer;
a379 29
    else
    {
      /* Parent directory didn't exist - report error */
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_directory_unlock failed because the file doesn't exist");
      return(&return_code);
    }
  }

  /* OK now that paths have been setup, get the existing directory flags */
  _kernel_swi(OS_File, &regs, &regs);

  /* Update the returned flags to lock the dir */
  regs.r[5] &= ~(1 << 3);
  regs.r[0] = 4;

  er = _kernel_swi(OS_File, &regs, &regs);

  if (nb_bit_set(flags, 0) == FALSE)
    free(buffer);

  if (er != NULL)
  {
    return(er);
  }
  else
  {
    /* No problem encountered */
    return(NULL);
d381 2
a383 1

@


1.5
log
@Made improvements to error handling.

Version 0.12. Tagged as 'NBLib-0_12'
@
text
@d102 7
a108 1
  if (_kernel_swi(OS_File, &regs, &regs) != NULL)
d114 1
d173 3
a184 4
      if (nb_bit_set(flags, 0) == FALSE)
      {
        free(buffer);
      }
a190 4
      if (nb_bit_set(flags, 0) == FALSE)
      {
        free(buffer);
      }
d355 3
d443 3
@


1.4
log
@Removed dependencies on ErrorLib in all functions except Toolbox ones.

Version 0.11. Tagged as 'NBLib-0_11'
@
text
@d57 3
a59 4
  _kernel_oserror	*er;
  _kernel_oserror	 return_code;
  _kernel_swi_regs	 regs;
  char			*buffer;
d134 3
a136 4
  _kernel_oserror	*er;
  _kernel_oserror	 return_code;
  _kernel_swi_regs	 regs;
  char			*buffer = NULL;
d211 1
a211 2
  _kernel_oserror	 return_code;
  char			*buffer;
d295 3
a297 4
  _kernel_oserror	*er;
  _kernel_oserror	 return_code;
  _kernel_swi_regs	 regs;
  char			*buffer;
d381 3
a383 4
  _kernel_oserror	*er;
  _kernel_oserror	 return_code;
  _kernel_swi_regs	 regs;
  char			*buffer;
@


1.3
log
@Added code to allow directories to be locked.

Version 0.08. Tagged as 'NBLib-0_08'
@
text
@a166 1
  error_check(er);
d168 1
a168 1
  if(regs.r[0] == 2)
d170 1
a170 6
    /* Directory Present */
    if (nb_bit_set(flags, 0) == FALSE)
    {
      free(buffer);
    }
    return(NULL);
d174 10
a183 3
    return_code.errnum = 0;
    strcpy(return_code.errmess, "Directory Doesn't Exist.");
    if (nb_bit_set(flags, 0) == FALSE)
d185 7
a191 1
      free(buffer);
a192 1
    return(&return_code);
@


1.2
log
@Added two new functions to NB_Files.c

Version 0.03. Tagged as 'NBLib-0_03'
@
text
@d275 174
@


1.1
log
@Initial revision
@
text
@d97 1
a97 1
      strcpy(return_code.errmess, "nb_create_directory failed due to lack of memory");
@


1.1.1.1
log
@Initial import of NBLib.

@
text
@@
