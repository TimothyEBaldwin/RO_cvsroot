head	1.2;
access;
symbols
	NBLib-0_28:1.2
	dellis_autobuild_BaseSW:1.2
	dcotton_autobuild_BaseSW:1.2
	nbingham_NBLib-0_27:1.2
	NBLib-0_27:1.2
	NBLib-0_26:1.2
	NBLib-0_25:1.2
	NBLib-0_24:1.2
	NBLib-0_23:1.2
	NBLib-0_22:1.2
	NBLib-0_21:1.2
	NBLib-0_20:1.2
	NBLib-0_19:1.2
	NBLib-0_18:1.2
	NBLib-0_17:1.2
	NBLib-0_16:1.2
	NBLib-0_15:1.2
	NBLib-0_14:1.2
	NBLib-0_13:1.1.1.1
	NBLib-0_12:1.1.1.1
	NBLib-0_11:1.1.1.1
	NBLib-0_10:1.1.1.1
	NBLib-0_09:1.1.1.1
	NBLib-0_08:1.1.1.1
	NBLib-0_07:1.1.1.1
	NBLib-0_06:1.1.1.1
	NBLib-0_05:1.1.1.1
	NBLib-0_04:1.1.1.1
	NBLib-0_03:1.1.1.1
	NBLib-0_02:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.11.06.13.21.52;	author jberanek;	state Exp;
branches;
next	1.1;

1.1
date	98.09.24.12.30.26;	author nbingham;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.24.12.30.26;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.2
log
@ * Fixed typo in !MkExport build obey file

 * Removed function declarations for exported functions out of the
   individual header files, so they are no longer duplicated in 2 header
   files.  The main build-time header file now includes the main exported
   header file "NBLib"

 * Replaced nb_bit_set function with a much more efficient macro.

 * Made nb_set_bits more efficient.


Version 0.14. Tagged as 'NBLib-0_14'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    NB_Flags                                                    */
/* Purpose: Bit operations on Flags words.                              */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@@binghams.demon.co.uk>             */
/* History: 0.00  - Tue 14th October 1997                               */
/*                  Created.                                            */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include <ctype.h>

#include "Main.h"
/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/************************************************************************/
/* nb_set_bits                                                          */
/*                                                                      */
/* Function will set a flags word with the specified flags.             */
/*                                                                      */
/* Parameters: flags  - string of bits to set.                          */
/*                                                                      */
/* Returns:    Flags word.                                              */
/*                                                                      */
/************************************************************************/
int nb_set_bits(char *flags)
{
  int len, counter, return_value=0;

  len = strlen(flags);

  if (len == 0)
  {
    /* Nothing was passed so exit */
    return(0);
  }

  for (counter = 0; counter <= len-1; counter++)
  {
    if (isdigit (flags[counter]))
    {
      return_value ^= (1 << (flags[counter] - '0'));
    }
  }

  return(return_value);
}

/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ END +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */


@


1.1
log
@Initial revision
@
text
@d26 2
a29 93
#define bit_0_set 1
#define bit_1_set 2
#define bit_2_set 4
#define bit_3_set 8
#define bit_4_set 16
#define bit_5_set 32
#define bit_6_set 64
#define bit_7_set 128
#define bit_8_set 256
#define bit_9_set 512
#define bit_10_set 1024
#define bit_11_set 2048
#define bit_12_set 4096
#define bit_13_set 8192
#define bit_14_set 16384
#define bit_15_set 32768


/************************************************************************/
/* nb_bit_set                                                           */
/*                                                                      */
/* Function will check a flags word to see if the specified bit is set. */
/*                                                                      */
/* Parameters: flags  - unsigned int flags word.                        */
/*             bit    - bit to check  0 >= bit => 7                     */
/*                                                                      */
/* Returns:    TRUE or FALSE                                            */
/*                                                                      */
/************************************************************************/
int nb_bit_set(unsigned int flags, int bit)
{
  int which_bit = 0;

  if ((bit >= 0) && (bit <= 7))
  {
    /* Bit in valid range */
    switch(bit)
    {
      case(0):
      {
        which_bit = bit_0_set;
        break;
      }
      case(1):
      {
        which_bit = bit_1_set;
        break;
      }
      case(2):
      {
        which_bit = bit_2_set;
        break;
      }
      case(3):
      {
        which_bit = bit_3_set;
        break;
      }
      case(4):
      {
        which_bit = bit_4_set;
        break;
      }
      case(5):
      {
        which_bit = bit_5_set;
        break;
      }
      case(6):
      {
        which_bit = bit_6_set;
        break;
      }
      case(7):
      {
        which_bit = bit_7_set;
        break;
      }
    }

    /* Check bit */
    if ((flags & which_bit) > 0)
    {
      /* Bit set */
      return(TRUE);
    }
    else
    {
      return(FALSE);
    }
  }
  return(FALSE);
}
a43 1
  char bit;
d56 1
a56 2
    bit = flags[counter];
    switch(bit)
d58 1
a58 8
      case('0'): return_value = return_value + bit_0_set; break;
      case('1'): return_value = return_value + bit_1_set; break;
      case('2'): return_value = return_value + bit_2_set; break;
      case('3'): return_value = return_value + bit_3_set; break;
      case('4'): return_value = return_value + bit_4_set; break;
      case('5'): return_value = return_value + bit_5_set; break;
      case('6'): return_value = return_value + bit_6_set; break;
      case('7'): return_value = return_value + bit_7_set; break;
@


1.1.1.1
log
@Initial import of NBLib.

@
text
@@
