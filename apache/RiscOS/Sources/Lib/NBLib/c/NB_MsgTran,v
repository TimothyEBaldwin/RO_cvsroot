head	1.8;
access;
symbols
	NBLib-0_28:1.8
	dellis_autobuild_BaseSW:1.8
	dcotton_autobuild_BaseSW:1.8
	nbingham_NBLib-0_27:1.8
	NBLib-0_27:1.8
	NBLib-0_26:1.8
	NBLib-0_25:1.8
	NBLib-0_24:1.7
	NBLib-0_23:1.7
	NBLib-0_22:1.6
	NBLib-0_21:1.6
	NBLib-0_20:1.6
	NBLib-0_19:1.6
	NBLib-0_18:1.6
	NBLib-0_17:1.5
	NBLib-0_16:1.4
	NBLib-0_15:1.4
	NBLib-0_14:1.4
	NBLib-0_13:1.4
	NBLib-0_12:1.3
	NBLib-0_11:1.2
	NBLib-0_10:1.2
	NBLib-0_09:1.2
	NBLib-0_08:1.2
	NBLib-0_07:1.2
	NBLib-0_06:1.2
	NBLib-0_05:1.1.1.1
	NBLib-0_04:1.1.1.1
	NBLib-0_03:1.1.1.1
	NBLib-0_02:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.8
date	99.03.03.15.00.38;	author nbingham;	state Exp;
branches;
next	1.7;

1.7
date	98.11.24.22.09.53;	author rwarren;	state Exp;
branches;
next	1.6;

1.6
date	98.11.09.09.31.26;	author nbingham;	state Exp;
branches;
next	1.5;

1.5
date	98.11.06.17.34.20;	author nbingham;	state Exp;
branches;
next	1.4;

1.4
date	98.11.06.12.05.21;	author nbingham;	state Exp;
branches;
next	1.3;

1.3
date	98.11.05.11.47.51;	author nbingham;	state Exp;
branches;
next	1.2;

1.2
date	98.10.16.12.45.35;	author nbingham;	state Exp;
branches;
next	1.1;

1.1
date	98.09.24.12.30.27;	author nbingham;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.24.12.30.27;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Updates to File & MessageTrans code required for the Translator tool.
Makefile tweaked to provide more readable output, !MkClean has StripDepend
and command-line EraseCVS added.

Version 0.25. Tagged as 'NBLib-0_25'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************************/
/* File:    msghandle.c                                                   */
/* Purpose: This file contains various functions to use with MessageTrans.*/
/*          application by default.                                       */
/* Author:  Neil Bingham <mailto:neil@@binghams.demon.co.uk>               */
/* History: 0.01  - Tue 18th February 1997                                */
/*                  Created.                                              */
/*          0.02  - Mon 20th October 1997                                 */
/*                  Incorporated into NBLib                               */
/**************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* nb_messagetrans_open_file                                            */
/*                                                                      */
/* Function opens the specified MessageTrans file.  buffer must be      */
/* kept, and passed to nb_messagetrans_close_file                       */
/*                                                                      */
/* Parameters: flags    - unused.                                       */
/*             filename - file to open.                                 */
/*             file_id  - MessageTrans descriptor block.                */
/*             buffer   - buffer to store data in.                      */
/*                                                                      */
/* Returns:    _kernel_oserror:  0 - No memory for buffer.              */
/*                               1 - MessageTrans_OpenFile failed.      */
/************************************************************************/
_kernel_oserror *nb_messagetrans_open_file(unsigned int flags, char *filename, MessagesFD *file_id,
                                           char **buffer)
{
  _kernel_oserror	*return_ptr = NULL;
  _kernel_oserror	*er = NULL;
  _kernel_swi_regs	 regs;
  int			 size = 0;
  char			*ptr = NULL;

  NB_UNUSED(flags);

  nb_messagetrans_file_info(0, filename, &size);

  if ((ptr = malloc(size)) == NULL)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_messagetrans_open_file failed due to lack of memory");
    return_ptr = &return_code;
  }
  else
  {
    regs.r[0] = (int) file_id;
    regs.r[1] = (int) filename;
    regs.r[2] = (int) ptr;

    er = _kernel_swi(MessageTrans_OpenFile, &regs, &regs);

    if (er == NULL)
    {
      *buffer = ptr;
      return_ptr = NULL;
    }
    else
    {
      return_code.errnum = 1;
      strcpy(return_code.errmess, "nb_messagetrans_open_file SWI call failed");
      return_ptr = &return_code;
    }
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_messagetrans_close_file                                           */
/*                                                                      */
/* Function closes an opened MessageTrans file.                         */
/*                                                                      */
/* Parameters: flags                                                    */
/*             file_id  - Pointer to MessageTrans file.                 */
/*             buffer   - buffer used by MessageTrans.  Will be free'd. */
/*                                                                      */
/* Returns:    _kernel_oserror.                                         */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_messagetrans_close_file(unsigned int flags, MessagesFD file_id, char *buffer)
{
  _kernel_swi_regs	 regs;
  _kernel_oserror	*return_ptr = NULL;
  _kernel_oserror	*er = NULL;

  NB_UNUSED(flags);

  regs.r[0] = (int) &file_id;

  er = _kernel_swi(MessageTrans_CloseFile, &regs, &regs);
  if (er != NULL)
  {
    return_code.errnum = er->errnum;
    strcpy(return_code.errmess, er->errmess);
    return_ptr = &return_code;
  }
  else
  {
    if (buffer != NULL)
      free(buffer);
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_messagetrans_file_info                                            */
/*                                                                      */
/* Function reads the size of the MessageTrans file so that a suitable  */
/* buffer can be declared prior to calling nb_messagetrans_open_file()  */
/*                                                                      */
/* Parameters: flags                                                    */
/*             filename - filename to check.                            */
/*             size     - pointer to size of MessageTrans file.         */
/*                                                                      */
/* Returns:    _kernel_oserror.                                         */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_messagetrans_file_info(unsigned int flags, char *filename, int *filesize)
{
  _kernel_swi_regs	 regs;
  _kernel_oserror	*return_ptr = NULL;
  _kernel_oserror	*er = NULL;

  NB_UNUSED(flags);

  regs.r[1] = (int) filename;

  er = _kernel_swi(MessageTrans_FileInfo, &regs, &regs);
  if(er != NULL)
  {
    return_code.errnum = er->errnum;
    strcpy(return_code.errmess, er->errmess);
    return_ptr = &return_code;
  }
  else
  {
    *filesize = regs.r[2];
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_messagetrans_lookup                                               */
/*                                                                      */
/* Function looks up the tag specified in the specified Messages File & */
/* returns the token to the calling function.                           */
/*                                                                      */
/* Parameters: file_id  - file handle as setup by nb_messagetrans_open..*/
/*             tag      - tag in Messages to lookup.                    */
/*                                                                      */
/* Returns:    Token which matches the tag in Messages.                 */
/*                                                                      */
/************************************************************************/
char *nb_messagetrans_lookup(MessagesFD file_id, char *tag)
{
  _kernel_swi_regs  regs;

  if (!tag)
    return NULL;

  if (tag[0] == '\0')
    return NULL;

  regs.r[0] = (int) &file_id;
  regs.r[1] = (int) tag;
  regs.r[2] = 0;

  if (_kernel_swi (MessageTrans_Lookup, &regs, &regs))
    return 0;
  else
  {
    #ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock_String((char *) regs.r[2]);
    #endif
    return (char *) regs.r[2];
  }
}


/************************************************************************/
/* nb_messagetrans_token_length                                         */
/*                                                                      */
/* Function takes the supplied tag and returns the length of the        */
/* associated token.  0 is returned for invalid tokens.                 */
/*                                                                      */
/* Parameters:  file_id   - Messages file descriptor block.             */
/*              tag       - Tag to match to token.                      */
/*                                                                      */
/* Returns:     length of token (or zero).                              */
/*                                                                      */
/************************************************************************/
int nb_messagetrans_token_length(MessagesFD file_id, char *tag)
{
  _kernel_swi_regs	 regs;

  regs.r[0] = (int) &file_id;
  regs.r[1] = (int) tag;
  regs.r[2] = 0;

  if (_kernel_swi(MessageTrans_Lookup,&regs,&regs))
    return 0;
  else
    return(regs.r[3]);
}


/************************************************************************/
/* nb_messagetrans_lookup_params                                        */
/*                                                                      */
/* Function looks up the tag specified in the Messages file, substitutes*/
/* in the text of the parameters and returns the entire string.         */
/*                                                                      */
/* Parameters: file_id  - file handle as setup by nb_messagetrans_open..*/
/*             tag      - tag in Messages to lookup.                    */
/*             param_1  - Parameter 1.                                  */
/*             param_2  - Parameter 2.                                  */
/*             param_3  - Parameter 3.                                  */
/*             param_4  - Parameter 4.                                  */
/*             text     - Pointer to string area in which to place      */
/*                        substituted token, or if 0 necessary buffer   */
/*                        length is returned in "size"                  */
/*             buffer_size - Size of buffer "text"                      */
/*             nbytes   - number of bytes written into "text", or the   */
/*                        approximated size of the buffer needed        */
/*                                                                      */
/* Returns:    0 if MessageTrans lookup failed, 1 if OK.                */
/*                                                                      */
/************************************************************************/
int nb_messagetrans_lookup_params(MessagesFD *msgblock, char *tag, char *param_1, char *param_2,
                                  char *param_3, char *param_4, char *text, int buffer_size,
                                  int *nbytes)
{
  _kernel_swi_regs	regs;
  int			parsed_length;

  if (!tag)
  {
    *nbytes = 0;
    return 0;
  }

  if (tag[0] == '\0')
  {
    *nbytes = 0;
    return 0;
  }

  if (text == NULL)
  {
    /* Get size of non-substitued tag */
    regs.r[0] = (int) msgblock;
    regs.r[1] = (int) tag;
    regs.r[2] = (int) 0;

    if (_kernel_swi (MessageTrans_Lookup,&regs,&regs))
    {
      *nbytes = 0;
      return 0;
    }
    else
    {
      parsed_length = regs.r[3];
      if (param_1)
        parsed_length += strlen (param_1);

      if (param_2)
        parsed_length += strlen (param_2);

      if (param_3)
        parsed_length += strlen (param_3);

      if (param_4)
        parsed_length += strlen (param_4);

      /* Plus a NULL terminator */
      parsed_length++;

      *nbytes = parsed_length;
    }
    return 1;
  }
  else
  {
    /* Setup registers for 'real' call */
    regs.r[0] = (int) msgblock;
    regs.r[1] = (int) tag;
    regs.r[2] = (int) text;
    regs.r[3] = buffer_size;
    regs.r[4] = (int) param_1;
    regs.r[5] = (int) param_2;
    regs.r[6] = (int) param_3;
    regs.r[7] = (int) param_4;

    /* Call SWI again with a proper buffer */
    if (_kernel_swi (MessageTrans_Lookup, &regs, &regs))
    {
      *nbytes = 0;
      return 0;
    }
    else
    {
      *nbytes = regs.r[3] + 1;
      return 1;
    }
  }
}


/************************************************************************/
/* nb_messagetrans_wimp_error                                           */
/*                                                                      */
/* Function puts the token matching the passed tag into a standard wimp */
/* message error box.                                                   */
/*                                                                      */
/* Assumes:    Tag _taskname returns the program's name.                */
/*                                                                      */
/* Parameters: file_id  - MessageTrans file pointer.                    */
/*             tag      - pointer to token to use.                      */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_messagetrans_wimp_error(MessagesFD file_id, char *tag)
{
  _kernel_oserror	er;
  _kernel_oserror	*is_error = NULL;
  _kernel_swi_regs	regs;

  er.errnum = 0;
  strncpy(er.errmess, nb_messagetrans_lookup(file_id, tag), 250);

  /* Setup registers */
  regs.r[0] = (int) &er;
  regs.r[1] = 1;
  regs.r[2] = (int) nb_messagetrans_lookup(file_id, "_TaskName");

  is_error = _kernel_swi(Wimp_ReportError, &regs, &regs);
}


/************************************************************************/
/* nb_messagetrans_wimp_decide_error                                    */
/*                                                                      */
/* Function looks up the tag specified in the Messages file and then    */
/* displays the tag in a standard OS message box.                       */
/*                                                                      */
/* Parameters: file_id  - MessageTrans file pointer.                    */
/*             tag      - Tag in Messages to lookup.                    */
/*                                                                      */
/* Returns:    TRUE (OK clicked), or FALSE (Cancel clicked).            */
/*                                                                      */
/************************************************************************/
int nb_messagetrans_wimp_decide_error(MessagesFD file_id, char *token)
{
  _kernel_oserror	 er;
  _kernel_oserror	*is_error = NULL;
  _kernel_swi_regs	 regs;

  er.errnum = 0;
  strncpy(er.errmess, nb_messagetrans_lookup(file_id, token), 254);

  /* Setup registers */
  regs.r[1] = 3;
  regs.r[0] = (int) &er;
  regs.r[2] = (int) nb_messagetrans_lookup(file_id, "_TaskName");

  is_error = _kernel_swi(Wimp_ReportError, &regs, &regs);

  /* Check r1 to see what button was pressed by the user */
  if (regs.r[1] == 1)
  {
    /* OK Pressed */
    return(TRUE);
  }
  else
  {
    /* Cancel Pressed (if setup) */
    return(FALSE);
  }
}


/************************************************************************/
/* nb_messagetrans_enumerate_no                                         */
/*                                                                      */
/* Function returns the number on the end of a token returned by        */
/* MessageTrans_EnumerateToken in r2. If an invalid token is passed, the*/
/* token is returned                                                    */
/*                                                                      */
/* Parameters: flags                                                    */
/*             token  - Token to return enumerate value from            */
/*                                                                      */
/* Returns:    enumerate number.                                        */
/*                                                                      */
/************************************************************************/
char *nb_messagetrans_enumerate_no(unsigned int flags, char *token)
{
  char		enumerate_value[20];
  int		len = 0;
  int		pos = 0;

  NB_UNUSED(flags);

  enumerate_value[0] = '\0';

  len = strlen(token);
  pos = len;

  do
  {
    pos--;
  }
  while ((token[pos] != '_') && (pos >= 0));

  nb_right_string(0, token, enumerate_value, (len-pos-1));
  return(enumerate_value);
}

@


1.7
log
@Strings returned from MessageTrans are now registered with MemCheck in
MemCheck builds so they aren't faulted

Version 0.23. Tagged as 'NBLib-0_23'
@
text
@d37 57
d100 1
d105 1
a105 1
_kernel_oserror *nb_messagetrans_close_file(unsigned int flags, MessagesFD file_id)
d121 5
@


1.6
log
@Major improvements.  Fixed error handling that got broken in 0.13.  Added
test harness which tests non-toolbox functions.  As a result of this several
bugs fixed.  Some code duplication removed.  Updated StrongHelp docs.

Version 0.18. Tagged as 'NBLib-0_18'
@
text
@d135 4
d140 1
@


1.5
log
@Fixed a mistake in NBLib.h which crept in during the last checkin.

Version 0.17. Tagged as 'NBLib-0_17'
@
text
@d50 1
d62 1
a62 5
    return(&return_code);
  }
  else
  {
    return(NULL);
d64 1
d84 1
d96 1
a96 1
    return(&return_code);
a100 1
    return(NULL);
d102 1
@


1.4
log
@Fixed a couple of memory leaks and tidied up a few functions.  Split up some
of the code into more logical files.  Version reporting function added.
Moved to BAL's two-stage Makefile system.

Version 0.13. Tagged as 'NBLib-0_13'
@
text
@d189 3
a191 3
int nb_messagetrans_lookup_params (MessagesFD *msgblock, char *tag, char *param_1, char *param_2,
                                   char *param_3, char *param_4, char *text, int buffer_size,
                                   int *nbytes)
@


1.3
log
@Made improvements to error handling.

Version 0.12. Tagged as 'NBLib-0_12'
@
text
@d121 7
a127 2
  _kernel_swi_regs	 regs;
  _kernel_oserror	*er = NULL;
d133 2
a134 4
  if ((strcmp(tag, NULL) == 0) || (strcmp(tag, "") == 0))
  {
    return("");
  }
d136 1
a136 12
  {
    er = _kernel_swi(MessageTrans_Lookup,&regs,&regs);

    if (er != NULL)
    {
      return("\0");
    }
    else
    {
      return (char *) regs.r[2];
    }
  }
a154 1
  _kernel_oserror	*er = NULL;
d160 2
a161 6
  er = _kernel_swi(MessageTrans_Lookup,&regs,&regs);

  if (er != NULL)
  {
    return(0);
  }
a162 1
  {
a163 1
  }
d179 8
a186 2
/*                                                                      */
/* Returns:    Token which matches the tag in Messages.                 */
d189 3
a191 2
char *nb_messagetrans_lookup_params(MessagesFD file_id, char *tag,
                                   char *param_1, char *param_2, char *param_3, char *param_4)
d194 7
a200 2
  char			*ptr = NULL;
  int			parsed_length = 0;
d202 1
a202 2
  /* Make sure something was passed */
  if ((strcmp(tag, NULL) == 0) || (strcmp(tag, "") == 0))
d204 37
a240 1
    return("");
d244 2
a245 2
    /* Get size of parsed string so we can malloc enough memory */
    regs.r[0] = (int) &file_id;
d247 6
a252 1
    regs.r[2] = (int) 0;
d254 2
a255 2
    /* Do lookup with no buffer so size of required buffer is returned */
    if (_kernel_swi(MessageTrans_Lookup,&regs,&regs))
d257 1
d262 2
a263 52
      /* Allocate memory */
      parsed_length =( strlen( (char *)regs.r[2]) + strlen(param_1) + strlen(param_2) +
                       strlen(param_3) + strlen(param_4) + 5 // for good luck ;-)
                     );
      if ((ptr = malloc (parsed_length)) == NULL)
      {
        return("");
      }
      else
      {
        /* Setup registers for 'real' call */
        regs.r[0] = (int) &file_id;
        regs.r[1] = (int) tag;
        regs.r[2] = (int) ptr;
        regs.r[3] = parsed_length;

        /* See if param_1 has anything in it */
        if (strcmp(param_1, "") != 0)
        {
          /* it does, so put it in R4 */
          regs.r[4] = (int) param_1;
        }
        /* See if param_2 has anything in it */
        if (strcmp(param_2, "") != 0)
        {
          /* it does, so put it in R5 */
          regs.r[5] = (int) param_2;
        }
        /* See if param_3 has anything in it */
        if (strcmp(param_3, "") != 0)
        {
          /* it does, so put it in R6 */
          regs.r[6] = (int) param_3;
        }
        /* See if param_4 has anything in it */
        if (strcmp(param_4, "") != 0)
        {
          /* it does, so put it in R7 */
          regs.r[7] = (int) param_4;
        }

        /* Call SWI again with a proper buffer */
        if (_kernel_swi(MessageTrans_Lookup,&regs,&regs))
        {
          return 0;
        }

        else
        {
          return (char *) ptr;
        }
      }
a297 37
}


/************************************************************************/
/* nb_messagetrans_params_wimp_error                                    */
/*                                                                      */
/* Function looks up the tag specified in the specified Messages file,  */
/* and then displays the tag in a standard OS message box.              */
/*                                                                      */
/* Parameters: file_id  - MessageTrans file pointer.                    */
/*             tag      - Tag in Messages to lookup.                    */
/*             param_1  - Parameter 1.                                  */
/*             param_2  - Parameter 2.                                  */
/*             param_3  - Parameter 3.                                  */
/*             param_4  - Parameter 4.                                  */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void nb_messagetrans_params_wimp_error(MessagesFD file_id, char *tag, char *param_1, char *param_2,
                                       char *param_3,char *param_4)
{
  _kernel_oserror	er;
  _kernel_oserror	*is_error = NULL;
  _kernel_swi_regs	regs;

  er.errnum = 0;
  strncpy(er.errmess, nb_messagetrans_lookup_params(file_id, tag, param_1, param_2, param_3,
                                                    param_4), 250);

  /* Setup registers */
  regs.r[0] = (int) &er;
  regs.r[1] = 1;
  regs.r[2] = (int) nb_messagetrans_lookup(file_id, "_TaskName");

  is_error = _kernel_swi(Wimp_ReportError, &regs, &regs);

@


1.2
log
@Fixed bug in messagetrans lookup code.

Version 0.06. Tagged as 'NBLib-0_06'
@
text
@d50 1
a50 2
  _kernel_oserror	*er;
  _kernel_oserror	 return_code;
d86 1
a86 2
  _kernel_oserror	*er;
  _kernel_oserror	 return_code;
d122 1
a122 1
  _kernel_oserror	*er;
d163 1
a163 1
  _kernel_oserror	*er;
d202 2
a203 2
  char			*ptr;
  int			parsed_length;
d297 2
a298 1
  _kernel_oserror 	er, *is_error;
d332 2
a333 1
  _kernel_oserror 	er, *is_error;
d365 1
a365 1
  _kernel_oserror	*is_error;
d408 2
a409 2
  int		len;
  int		pos;
@


1.1
log
@Initial revision
@
text
@d303 1
a303 1
  strncpy(er.errmess, nb_messagetrans_lookup(file_id, tag), 254);
@


1.1.1.1
log
@Initial import of NBLib.

@
text
@@
