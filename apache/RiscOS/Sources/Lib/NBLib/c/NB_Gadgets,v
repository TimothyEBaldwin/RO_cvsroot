head	1.4;
access;
symbols
	NBLib-0_28:1.4
	dellis_autobuild_BaseSW:1.4
	dcotton_autobuild_BaseSW:1.4
	nbingham_NBLib-0_27:1.4
	NBLib-0_27:1.4
	NBLib-0_26:1.4
	NBLib-0_25:1.4
	NBLib-0_24:1.4
	NBLib-0_23:1.4
	NBLib-0_22:1.4
	NBLib-0_21:1.4
	NBLib-0_20:1.4
	NBLib-0_19:1.3
	NBLib-0_18:1.2
	NBLib-0_17:1.2
	NBLib-0_16:1.2
	NBLib-0_15:1.2
	NBLib-0_14:1.2
	NBLib-0_13:1.2
	NBLib-0_12:1.2
	NBLib-0_11:1.1.1.1
	NBLib-0_10:1.1.1.1
	NBLib-0_09:1.1.1.1
	NBLib-0_08:1.1.1.1
	NBLib-0_07:1.1.1.1
	NBLib-0_06:1.1.1.1
	NBLib-0_05:1.1.1.1
	NBLib-0_04:1.1.1.1
	NBLib-0_03:1.1.1.1
	NBLib-0_02:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	98.11.13.10.46.16;	author nbingham;	state Exp;
branches;
next	1.3;

1.3
date	98.11.12.18.00.38;	author nbingham;	state Exp;
branches;
next	1.2;

1.2
date	98.11.05.11.47.45;	author nbingham;	state Exp;
branches;
next	1.1;

1.1
date	98.09.24.12.30.27;	author nbingham;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.24.12.30.27;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Added a C++ Version class using the same format as the EmailLibrary.
Modified the !MKxxx files to have a larger WimpSlot to allow C++ to compile
the version code.

Version 0.20. Tagged as 'NBLib-0_20'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    NB_Gadgets.C                                                */
/* Purpose: File contains window gadget-related functions.              */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@@binghams.demon.co.uk>             */
/* History: 0.00  - Mon 17th November 1997                              */
/*                  Created.                                            */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "textarea.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */




/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- WRITABLE CODE +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- */

/************************************************************************/
/* nb_writable_is_empty                                                 */
/*                                                                      */
/* Function checks the contents of the supplied writablefield.  If it is*/
/* empty, true is returned, else false.                                 */
/*                                                                      */
/* Parameters: flags    - flags.                                        */
/*             win      - the window the writable is in.                */
/*             writable - the writable to check                         */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_writable_is_empty(unsigned int flags, ObjectId win, ComponentId writable)
{
  _kernel_oserror	*er;
  int			 nbytes = 0;

  NB_UNUSED(flags);

  er = writablefield_get_value(0, win, writable, NULL, 0, &nbytes);

  if ( (nbytes > 1) || (er != NULL) )
  {
    /* Writable isn't empty */
    return(FALSE);
  }
  else
  {
    return(TRUE);
  }
}


/************************************************************************/
/* nb_displayfield_is_empty                                             */
/*                                                                      */
/* Function checks the contents of the supplied displayfield.  If it is */
/* empty, true is returned, else false.                                 */
/*                                                                      */
/* Parameters: flags    - flags.                                        */
/*             win      - the window the displayfield is in.            */
/*             writable - the writable to check                         */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_displayfield_is_empty(unsigned int flags, ObjectId win, ComponentId writable)
{
  _kernel_oserror	*er;
  int			 nbytes = 0;

  NB_UNUSED(flags);

  er = displayfield_get_value(0, win, writable, NULL, 0, &nbytes);

  if ( (nbytes > 1) || (er != NULL) )
  {
    /* Displayfield isn't empty */
    return(FALSE);
  }
  else
  {
    return(TRUE);
  }
}

/************************************************************************/
/* nb_writable_strlen                                                   */
/*                                                                      */
/* Function returns the length of the text in a writable field.  This   */
/* will include a terminating character                                 */
/*                                                                      */
/* Parameters: flags    - flags.                                        */
/*             win      - the window the writable is in.                */
/*             writable - the writable to check                         */
/*                                                                      */
/* Returns:    length of contents.                                      */
/*                                                                      */
/************************************************************************/
int nb_writable_strlen(unsigned int flags, ObjectId win, ComponentId writable)
{
  _kernel_oserror	*er;
  int			 nbytes = 0;

  NB_UNUSED(flags);

  er = writablefield_get_value(0, win, writable, NULL, 0, &nbytes);

  if ( (nbytes <= 1) || (er != NULL) )
  {
    /* Writable is empty */
    return(0);
  }
  else
  {
    return(nbytes);
  }
}


/************************************************************************/
/* nb_displayfield_strlen                                               */
/*                                                                      */
/* Function returns the length of the text in a display field.  This    */
/* will include a terminating character                                 */
/*                                                                      */
/* Parameters: flags    - flags.                                        */
/*             win      - the window the writable is in.                */
/*             writable - the writable to check                         */
/*                                                                      */
/* Returns:    length of contents.                                      */
/*                                                                      */
/************************************************************************/
int nb_displayfield_strlen(unsigned int flags, ObjectId win, ComponentId writable)
{
  _kernel_oserror	*er;
  int			 nbytes = 0;

  NB_UNUSED(flags);

  er = displayfield_get_value(0, win, writable, NULL, 0, &nbytes);

  if ( (nbytes <= 1) || (er != NULL) )
  {
    /* Displayfield is empty */
    return(0);
  }
  else
  {
    return(nbytes);
  }
}


/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- OPTIONBUTTON CODE +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- */

/************************************************************************/
/* nb_optionbutton_selected                                             */
/*                                                                      */
/* Function checks to see if an optionbutton is selected.               */
/*                                                                      */
/* Parameters: flags - flags.                                           */
/*             win   - window containing an optionbutton.               */
/*             comp  - ComponentId of optionbutton to check             */
/*                                                                      */
/* Returns:    TRUE if selected, FALSE if unselected.                   */
/*                                                                      */
/************************************************************************/
int nb_optionbutton_selected(unsigned int flags, ObjectId win, ComponentId comp)
{
  _kernel_oserror	*er;
  int			 selected = 0;

  NB_UNUSED(flags);

  er = optionbutton_get_state(0, win, comp, &selected);

  if ( (selected == TRUE) && (er == NULL) )
  {
    return(TRUE);
  }
  else
  {
    return(FALSE);
  }
}


/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- RADIOBUTTON CODE -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- */


/************************************************************************/
/* nb_radiobutton_selected                                              */
/*                                                                      */
/* Function checks to see if a radiobutton is selected.  The function   */
/* can also return the ComponentId of the selected radio in a group.    */
/*                                                                      */
/* Parameters: flags - Bit 0 - Set:   return ComponentId of selected    */
/*                                    radio in group.                   */
/*                     Bit 0 - Unset: return whether radio is selected  */
/*             win   - window containing a radiobutton group.           */
/*             comp  - ComponentId of radiobutton to check              */
/*                                                                      */
/* Returns:    TRUE if selected, FALSE if unselected, or a component ID.*/
/*                                                                      */
/************************************************************************/
int nb_radiobutton_selected(unsigned int flags, ObjectId win, ComponentId comp)
{
  _kernel_oserror	*er;
  int			 state = 0;
  ComponentId		 selected = 0;

  er = radiobutton_get_state(0, win, comp, &state, &selected);

  if (er != NULL)
  {
    return(FALSE);
  }
  else
  {
    if (nb_bit_set(flags, 0) == TRUE)
    {
      /* Return ComponentId */
      return(selected);
    }
    else
    {
      /* Return TRUE or FALSE */
      return(state);
    }
  }
}


/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ STRINGSET CODE +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- */

/************************************************************************/
/* nb_stringset_is_empty                                                */
/*                                                                      */
/* Function checks the contents of the supplied stringset.  If it is    */
/* empty, true is returned, else false.  Call only works if stringset   */
/* has a writable field.                                                */
/*                                                                      */
/* Parameters: flags    - flags.                                        */
/*             win      - the window the stringset is in.               */
/*             sset     - the stringset to check                        */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_stringset_is_empty(unsigned int flags, ObjectId win, ComponentId sset)
{
  _kernel_oserror	*er;
  int			 nbytes = 0;
  unsigned int		 sset_flags = 0;

  er = gadget_get_flags(0, win, sset, &sset_flags);

  if (er != NULL)
  {
    return(FALSE);
  }
  else
  {
    if (nb_bit_set(flags, 1) == TRUE)
    {
      /* StringSet has writablefield */
      er = stringset_get_selected(0, win, sset, NULL, 0, &nbytes);

      if (nbytes > 1)
      {
        /* StringSet isn't empty */
        return(FALSE);
      }
      else
      {
        return(TRUE);
      }
    }
    else
    {
      return(FALSE);
    }
  }
}


/************************************************************************/
/* nb_stringset_strlen                                                  */
/*                                                                      */
/* Function returns the length of the text in a string set.  This       */
/* will include a terminating character                                 */
/*                                                                      */
/* Parameters: flags    - flags.                                        */
/*             win      - the window the stringset is in.               */
/*             sset     - the stringset to check                        */
/*                                                                      */
/* Returns:    length of contents.                                      */
/*                                                                      */
/************************************************************************/
int nb_stringset_strlen(unsigned int flags, ObjectId win, ComponentId sset)
{
  _kernel_oserror	*er;
  int			 nbytes = 0;
  unsigned int		 sset_flags = 0;

  NB_UNUSED(flags);

  er = gadget_get_flags(0, win, sset, &sset_flags);

  if (er != NULL)
  {
    return(FALSE);
  }
  else
  {
    /* StringSet has writablefield */
    er = stringset_get_selected(0, win, sset, NULL, 0, &nbytes);

    if ( (nbytes <= 1) || (er != NULL) )
    {
      /* SSet is empty */
      return(0);
    }
    else
    {
      return(nbytes);
    }
  }
}


/************************************************************************/
/* nb_scrolllist_strlen                                                 */
/*                                                                      */
/* Function returns the length of the specified index position in the   */
/* scrolllist, and will include a terminating character.                */
/*                                                                      */
/* Parameters: flags    - flags.                                        */
/*             win      - the window the scrolllist is in.              */
/*             sset     - the scrolllist to check.                      */
/*             index    - the index item to check                       */
/*                                                                      */
/* Returns:    length of contents.                                      */
/*                                                                      */
/************************************************************************/
int nb_scrolllist_strlen(unsigned int flags, ObjectId win, ComponentId sset, int index)
{
  _kernel_oserror	*er;
  int			 nbytes = 0;

  NB_UNUSED(flags);

  er = scrolllist_get_item_text(0, win, sset, NULL, 0, index, &nbytes);

  if ( (nbytes <= 1) || (er != NULL) )
  {
    /* ScrollList is empty */
    return(0);
  }
  else
  {
    return(nbytes);
  }
}


/************************************************************************/
/* nb_scrolllist_get_num_selected                                       */
/*                                                                      */
/* Function returns the number of items highlighted in the specified    */
/* ScrollList.                                                          */
/*                                                                      */
/* Parameters: win     - Window that ScrollList is in.                  */
/*             slist   - ScrollList to check.                           */
/*                                                                      */
/* Returns:    num of selections, or -1 if scrolllist doesn't exist.    */
/*                                                                      */
/************************************************************************/
int nb_scrolllist_get_num_selected(unsigned int flags, ObjectId win, ComponentId slist)
{
  _kernel_oserror	*er;
  int			 num_sel = 0;
  int			 selected = 0;

  NB_UNUSED(flags);

  er = scrolllist_get_selected(0, win, slist, -1, &selected);
  if (er != NULL)
  {
    return(-1);
  }
  else
  {
    if (selected != -1)
    {
      /* One selection, increment counter, and then check for more */
      num_sel++;

      do
      {
        scrolllist_get_selected(0, win, slist, selected, &selected);
        if (selected != -1)
        {
          num_sel++;
        }
      }
      while(selected != -1);

      return(num_sel);
    }
    else
    {
      /* No selections at all */
      return(0);
    }
  }
}


/************************************************************************/
/* nb_scrolllist_force_riscos_behaviour                                 */
/*                                                                      */
/* Function forces the ScrollList to use RiscOS behaviour.              */
/*                                                                      */
/* Parameters: flags  -                                                 */
/*             event  - Event block returned by ScrollList_Selection.   */
/*             win    - window the scrolllist is in.                    */
/*             slist  - scrolllist to check.                            */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_scrolllist_force_riscos_behaviour(unsigned int flags, ToolboxEvent *event,
                                                      ObjectId win, ComponentId slist)

{
  _kernel_oserror			*er;
  WimpGetPointerInfoBlock		 info;
  ScrollListSelectionEvent		*slist_event = (ScrollListSelectionEvent *) event;

  NB_UNUSED(flags);

  if (slist_event->flags != 2)
  {
    /* Single click */
    wimp_get_pointer_info(&info);

    if (info.button_state == 4)
    {
      /* Select Click */
      nb_scrolllist_selection(1, win, slist);
      er = scrolllist_select_item(0, win, slist, slist_event->item);

      if (er != NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "The specified ScrollList does not exist");
        return(&return_code);
      }
    }
  }
  return(NULL);
}


/************************************************************************/
/* nb_scrolllist_riscos_selection                                       */
/*                                                                      */
/* Function should be called in response to a ScrollList_Selection      */
/* event to force RiscOS behaviour.                                     */
/*                                                                      */
/* Parameters: Toolbox Event parameters.                                */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
int nb_scrolllist_riscos_selection(int event_code, ToolboxEvent *tbevent, IdBlock *id_block,
                                   void *handle)
{
  NB_UNUSED(event_code);
  NB_UNUSED(handle);

  /* Force the ScrollLists to behave in a RiscOS manner. */
  nb_scrolllist_force_riscos_behaviour(0, tbevent, id_block->self_id, id_block->self_component);

  return(TRUE);
}


/************************************************************************/
/* nb_gadget_set_int_value                                              */
/*                                                                      */
/* Function allows for the passing of an integer parameter to a display */
/* field, writablefield.                                                */
/*                                                                      */
/* Parameters: flags                                                    */
/*             win   - window containing gadget.                        */
/*             comp  - component id of gadget                           */
/*             value - integer value.                                   */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_gadget_set_int_value(unsigned int flags, ObjectId win, ComponentId comp,
                                         int value)
{
  _kernel_oserror		*er;
  char				 buffer[12];
  int				 gadget_type = 0;

  NB_UNUSED(flags);

  /* Convert int to char */
  sprintf(buffer, "%d", value);

  /* Get type */
  er = gadget_get_type(0, win, comp, &gadget_type);

  if (er != NULL)
  {
    return(er);
  }
  else
  {
    switch(gadget_type)
    {
      /* Writablefield Gadget */
      case(WritableField_Base):
      {
        er = writablefield_set_value(0, win, comp, buffer);
        break;
      }
      /* Displayfield Gadget */
      case(DisplayField_Base):
      {
        er = displayfield_set_value(0, win, comp, buffer);
        break;
      }
      case(Button_Base):
      {
        er = button_set_value(0, win, comp, buffer);
        break;
      }
    }

    if (er == NULL)
    {
      return(NULL);
    }
    else
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_gadget_set_int_value failed because Component didn't exist");
      return(&return_code);
    }
  }
}


/************************************************************************/
/* nb_actionbutton_select_click_close                                   */
/*                                                                      */
/* Function is called to check if adjust was used on the button.  If    */
/* that is the case the window should not be closed.  This can occur if */
/* the actionbutton is of type Local.                                   */
/*                                                                      */
/* Parameters:  flags      - flags.                                     */
/*              tbox_flags - flags passed in ToolBoxEvent data structure*/
/*              window     - window to close if selected was used.      */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_actionbutton_select_click_close(unsigned int flags, unsigned int tbox_flags,
                                                    ObjectId win)
{
  _kernel_oserror	*er;

  NB_UNUSED(flags);

  if (nb_bit_set(tbox_flags, 0) == FALSE)
  {
    /* Select Clicked or Enter pressed, so close window */
    er = toolbox_hide_object(0, win);
    if (er != NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_actionbutton_select_click_close failed");
      return(&return_code);
    }
  }
  return(NULL);
}


/************************************************************************/
/* nb_scrolllist_selection                                              */
/*                                                                      */
/* Function clears any highlighted entries on the scrolllist or selects */
/* all entries in the scrolllist.                                       */
/*                                                                      */
/* Parameters: flags  - Bit 0 Set:   clear selections.                  */
/*                      Bit 0 Unset: select all.                        */
/*             win    - window containing scrolllist.                   */
/*             slist  - scrolllist to alter.                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_scrolllist_selection(unsigned int flags, ObjectId win, ComponentId slist)
{
  _kernel_oserror	*er;
  int			 selection = 0;
  int			 counter = 0;

  if (nb_bit_set(flags, 0) == TRUE)
  {
    /* Bit 0 Set - Clear Selection */
    do
    {
      scrolllist_get_selected(0, win, slist, -1, &selection);
      if (selection != -1)
      {
        /* Something still selected */
        er = scrolllist_deselect_item(0, win, slist, selection);
      }
    }
    while (selection != -1);
  }
  else
  {
    /* Do a select all */
    counter = -1;
    do
    {
      counter++;
      er = scrolllist_select_item(0, win, slist, counter);
    }
    while (er == NULL);
  }
}


/************************************************************************/
/* nb_textarea_strlen                                                   */
/*                                                                      */
/* Function returns the length of the text in a TextArea gadget.  This  */
/* will include a terminating character                                 */
/*                                                                      */
/* Parameters: flags    - flags.                                        */
/*             win      - the window the writable is in.                */
/*             tarea    - the writable to check                         */
/*                                                                      */
/* Returns:    length of contents.                                      */
/*                                                                      */
/************************************************************************/
int nb_textarea_strlen(unsigned int flags, ObjectId win, ComponentId tarea)
{
  _kernel_oserror	*er;
  int			 nbytes = 0;

  NB_UNUSED(flags);

  er = textarea_get_text(0, win, tarea, NULL, 0, &nbytes);

  if ( (nbytes <= 1) || (er != NULL) )
  {
    /* TextArea is empty */
    return(0);
  }
  else
  {
    return(nbytes);
  }
}


/************************************************************************/
/* nb_stringset_get_selected_index                                      */
/*                                                                      */
/* Function returns the selected item in the stringset by index position*/
/* rather than by string.                                               */
/*                                                                      */
/* Parameters: flags.                                                   */
/*             win     - window containing stringset.                   */
/*             sset    - stringset to check.                            */
/*             index   - pointer to int to return index in.             */
/*                                                                      */
/* Returns:    _kernel_oserror block & index as pointer.                */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_stringset_get_selected_index(unsigned int flags, ObjectId win,
                                                 ComponentId sset, int *index)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	 regs;

  NB_UNUSED(flags);

  regs.r[0] = 1;
  regs.r[1] = win;
  regs.r[2] = 899;
  regs.r[3] = sset;
  regs.r[4] = 0;
  regs.r[5] = 0;
  er = _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);

  if (er == NULL)
  {
    *index = regs.r[0];
    return(NULL);
  }
  else
  {
    *index = -1;
    return_code.errnum = 0;
    strcpy(return_code.errmess, "Stringset specified does not exist");
    return(&return_code);
  }
}
@


1.3
log
@Removed unnecessary dependency on ErrorLib.

Version 0.19. Tagged as 'NBLib-0_19'
@
text
@a340 1
    error_check(er);
d342 1
a342 1
    if (nbytes <= 1)
@


1.2
log
@Made improvements to error handling.

Version 0.12. Tagged as 'NBLib-0_12'
@
text
@a62 1
  error_check(er);
d64 1
a64 1
  if (nbytes > 1)
a96 1
  error_check(er);
d98 1
a98 1
  if (nbytes > 1)
a129 1
  error_check(er);
d131 1
a131 1
  if (nbytes <= 1)
a163 1
  error_check(er);
d165 1
a165 1
  if (nbytes <= 1)
a198 1
  error_check(er);
d200 1
a200 1
  if (selected == TRUE)
a235 1
  error_check(er);
d237 1
a237 1
  if (nb_bit_set(flags, 0) == TRUE)
d239 1
a239 2
    /* Return ComponentId */
    return(selected);
d243 10
a252 2
    /* Return TRUE or FALSE */
    return(state);
a279 1
  error_check(er);
d281 5
a285 1
  if (nb_bit_set(flags, 1) == TRUE)
d287 4
a290 3
    /* StringSet has writablefield */
    er = stringset_get_selected(0, win, sset, NULL, 0, &nbytes);
    error_check(er);
d292 9
a300 4
    if (nbytes > 1)
    {
      /* StringSet isn't empty */
      return(FALSE);
d304 1
a304 1
      return(TRUE);
a306 4
  else
  {
    return(FALSE);
  }
a331 1
  error_check(er);
d333 1
a333 5
  /* StringSet has writablefield */
  er = stringset_get_selected(0, win, sset, NULL, 0, &nbytes);
  error_check(er);

  if (nbytes <= 1)
d335 1
a335 2
    /* SSet is empty */
    return(0);
d339 13
a351 1
    return(nbytes);
a377 1
  error_check(er);
d379 1
a379 1
  if (nbytes <= 1)
a541 1
  error_check(er);
d543 1
a543 1
  switch(gadget_type)
d545 5
a549 2
    /* Writablefield Gadget */
    case(WritableField_Base):
d551 17
a567 3
      er = writablefield_set_value(0, win, comp, buffer);
      error_check(er);
      break;
d569 2
a570 2
    /* Displayfield Gadget */
    case(DisplayField_Base):
d572 1
a572 3
      er = displayfield_set_value(0, win, comp, buffer);
      error_check(er);
      break;
d574 1
a574 1
    case(Button_Base):
d576 3
a578 3
      er = button_set_value(0, win, comp, buffer);
      error_check(er);
      break;
a580 11

  if (er == NULL)
  {
    return(NULL);
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_gadget_set_int_value failed because Component didn't exist");
    return(&return_code);
  }
a649 1
        error_check(er);
a688 1
  error_check(er);
d690 1
a690 1
  if (nbytes <= 1)
@


1.1
log
@Initial revision
@
text
@d58 1
a58 1
  int			 nbytes;
d93 1
a93 1
  int			 nbytes;
d127 1
a127 1
  int			 nbytes;
d162 1
a162 1
  int			 nbytes;
d198 1
a198 1
  int			 selected;
d237 2
a238 2
  int			 state;
  ComponentId		 selected;
d275 2
a276 2
  int			 nbytes;
  unsigned int		 sset_flags;
d320 2
a321 2
  int			 nbytes;
  unsigned int		 sset_flags;
d361 1
a361 1
  int			 nbytes;
d450 3
a452 4
  _kernel_oserror		*er;
  _kernel_oserror		 return_code;
  WimpGetPointerInfoBlock	 info;
  ScrollListSelectionEvent	*slist_event = (ScrollListSelectionEvent *) event;
a495 1

d520 3
a522 4
  _kernel_oserror	*er;
  _kernel_oserror        return_code;
  char			 buffer[12];
  int			gadget_type;
a587 1
  _kernel_oserror	 return_code;
d624 1
a624 1
  int			 counter;
d671 1
a671 1
  int			 nbytes;
a707 1
  _kernel_oserror	 return_code;
@


1.1.1.1
log
@Initial import of NBLib.

@
text
@@
