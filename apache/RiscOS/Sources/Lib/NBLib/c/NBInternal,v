head	1.2;
access;
symbols
	NBLib-0_28:1.2
	dellis_autobuild_BaseSW:1.2
	dcotton_autobuild_BaseSW:1.2
	nbingham_NBLib-0_27:1.2
	NBLib-0_27:1.2
	NBLib-0_26:1.2
	NBLib-0_25:1.2
	NBLib-0_24:1.1
	NBLib-0_23:1.1
	NBLib-0_22:1.1
	NBLib-0_21:1.1
	NBLib-0_20:1.1
	NBLib-0_19:1.1
	NBLib-0_18:1.1
	NBLib-0_17:1.1
	NBLib-0_16:1.1
	NBLib-0_15:1.1
	NBLib-0_14:1.1
	NBLib-0_13:1.1;
locks; strict;
comment	@# @;


1.2
date	99.01.12.09.06.54;	author nbingham;	state Exp;
branches;
next	1.1;

1.1
date	98.11.06.12.05.13;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Summary
-------
  * Added more string handling functions.
  * Completed documentation of library.
Detail
------
  * Code now fully documented using AHodgkinson's source code doc tools.
    !MKDocs produces StrongHelp & HTML versions.

Version 0.24. Not tagged
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    NBInternal.c                                                */
/* Purpose: Internal functions for NBLib.                               */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@@binghams.demon.co.uk>             */
/* History: 0.01  Fri 07th August 1998                                  */
/*                Created.                                              */
/************************************************************************/

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/* ------------------------------------------------------------------------------------------------
 * nbinternal_setup_file_paths
 * Internal routine to setup file paths for nb_files & nb_dirs.
 * Parameters: flags    - If bit 0 is set concat location & object into path with a '.' in between.
 *                        else return location in path.
 *             location - as in all nb_file* and nb_dir* functions.
 *             object   - as in all nb_file* and nb_dir* functions.
 *             path     - pointer to which memory is allocated.
 * Returns:    FALSE (error), TRUE (success).  Remeber to free the memory.
 * ------------------------------------------------------------------------------------------------
 */
int nbinternal_setup_file_paths(unsigned int flags, char *location, char *object, char **path)
{
  /* NEVER free this pointer.  It is done by the calling function */
  char *ptr;

  if (nb_bit_set(flags, 0) == TRUE)
  {
    /* Everything in location.  Check to make sure it isn't empty */
    if ( (location == NULL) || (strcmp(location, "") == 0) )
    {
      return(FALSE);
    }
    else
    {
      /* We have data. */
      if ((ptr= malloc(strlen(location) + 2)) == NULL)
      {
        return(FALSE);
      }
      else
      {
        strcpy(ptr, location);
        *path = ptr;
        return(TRUE);
      }
    }
  }
  else
  {
    /* Location & Object should both have data.  Check first, though */
    if ( ((location == NULL) || (strcmp(location, "") == 0)) ||
         ((object == NULL) || (strcmp(object, "") == 0)) )
    {
      return(FALSE);
    }
    else
    {
      /* We have data. */
      if ((ptr= malloc(strlen(location) + strlen(object) + 5)) == NULL)
      {
        return(FALSE);
      }
      else
      {
        sprintf(ptr, "%s.%s", location, object);
        *path = ptr;
        return(TRUE);
      }
    }
  }
}


/* ------------------------------------------------------------------------------------------------
 * nbinternal_clear_return_code
 * Internal routine to clear the _kernel_oserror block return_code.
 *
 * Parameters: void.
 *
 * Returns:    void.
 * ------------------------------------------------------------------------------------------------
 */
void nbinternal_clear_return_code(void)
{
  return_code.errnum = 0;
  return_code.errmess[0] = '\0';
}
@


1.1
log
@Fixed a couple of memory leaks and tidied up a few functions.  Split up some
of the code into more logical files.  Version reporting function added.
Moved to BAL's two-stage Makefile system.

Version 0.13. Tagged as 'NBLib-0_13'
@
text
@d15 8
a22 6
/*------------------------------------------------------------------------
 * File:    NBInternal.c
 * Purpose: Internal Code to NBLibn NBLib.
 *------------------------------------------------------------------------
 */

@
