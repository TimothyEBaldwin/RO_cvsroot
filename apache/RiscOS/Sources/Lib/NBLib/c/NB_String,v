head	1.6;
access;
symbols
	NBLib-0_28:1.6
	dellis_autobuild_BaseSW:1.6
	dcotton_autobuild_BaseSW:1.6
	nbingham_NBLib-0_27:1.6
	NBLib-0_27:1.6
	NBLib-0_26:1.6
	NBLib-0_25:1.6
	NBLib-0_24:1.4
	NBLib-0_23:1.4
	NBLib-0_22:1.4
	NBLib-0_21:1.3
	NBLib-0_20:1.3
	NBLib-0_19:1.3
	NBLib-0_18:1.3
	NBLib-0_17:1.2
	NBLib-0_16:1.1
	NBLib-0_15:1.1
	NBLib-0_14:1.1
	NBLib-0_13:1.1;
locks; strict;
comment	@# @;


1.6
date	99.03.03.15.00.38;	author nbingham;	state Exp;
branches;
next	1.5;

1.5
date	99.01.12.09.06.55;	author nbingham;	state Exp;
branches;
next	1.4;

1.4
date	98.11.24.21.54.26;	author nbingham;	state Exp;
branches;
next	1.3;

1.3
date	98.11.09.09.31.27;	author nbingham;	state Exp;
branches;
next	1.2;

1.2
date	98.11.06.17.34.22;	author nbingham;	state Exp;
branches;
next	1.1;

1.1
date	98.11.06.12.05.22;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Updates to File & MessageTrans code required for the Translator tool.
Makefile tweaked to provide more readable output, !MkClean has StripDepend
and command-line EraseCVS added.

Version 0.25. Tagged as 'NBLib-0_25'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    NB_String.c                                                 */
/* Purpose: String Handling Code in NBLib.                              */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@@acorn.com>                    */
/* History: 0.01  - Fri 01st August 1997                                */
/*                  Created.                                            */
/*          0.02  - Fri 06th November 1998                              */
/*                  Moved code from NB_Misc into separate file.         */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "math.h"
#include "time.h"
#include "ctype.h"

#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* nb_case_insensitive_strcmp                                           */
/*                                                                      */
/* Function does a strcmp but in a case sensitive manner.               */
/*                                                                      */
/* Parameters:  string 1                                                */
/*              string 2                                                */
/*                                                                      */
/* Returns:     TRUE or FALSE.                                          */
/*                                                                      */
/************************************************************************/
int nb_case_insensitive_strcmp(const char *first, const char *second)
{
  for (;;)
  {
    unsigned int a = *first++;
    unsigned int b = *second++;

    if (a == 0) return -b;
    if (a != b)
    {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
}


/************************************************************************/
/* nb_case_insensitive_strncmp                                          */
/*                                                                      */
/* Function does a strncmp but in a case sensitive manner.              */
/*                                                                      */
/* Parameters:  string 1 -                                              */
/*              string 2 -                                              */
/*              n        - number of bytes to compare.                  */
/*                                                                      */
/* Returns:     TRUE or FALSE.                                          */
/*                                                                      */
/************************************************************************/
int nb_case_insensitive_strncmp(const char *first, const char *second, size_t limit)
{
  for (;limit;--limit)
  {
    unsigned int a = *first++;
    unsigned int b = *second++;

    if (a == 0) return -b;
    if (a != b)
    {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
  return 0;
}


/************************************************************************/
/* nb_mid_string                                                        */
/*                                                                      */
/* Function is equilivant to Basic's MID$.  It takes a starting position*/
/* from ZERO and returns the number of chars specified including the    */
/* character at the starting position.                                  */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void nb_mid_string(unsigned int flags, char *source, char *result, int start_pos, int nchars)
{
  int			 len = 0;
  int			 count = 0;

  NB_UNUSED(flags);

  len = strlen(source);

  strcpy(result, "\0");

  if ((start_pos < len) && ((start_pos + (nchars-1)) < len))
  {
    for (count = start_pos; count <= (start_pos + nchars-1); count++)
    {
      sprintf(result, "%s%c", result, source[count]);
    }
  }
}


/************************************************************************/
/* nb_right_string                                                      */
/*                                                                      */
/* Function does the same as the basic call RIGHT$ in that it returns   */
/* the n right-most characters in the string.                           */
/*                                                                      */
/* Parameters:    flags  - flags word.                                  */
/*                source - source string.                               */
/*                result - destination string for extracted text.       */
/*                nchars - number of chars to extract.                  */
/*                                                                      */
/* Returns:       void.  Result is returned via a pointer.              */
/*                                                                      */
/************************************************************************/
void nb_right_string(unsigned int flags, char *source, char *result, int nchars)
{
  int			 len = 0;
  int			 count = 0;

  NB_UNUSED(flags);

  len = strlen(source);

  strcpy(result, "\0");

  if ((len >0) && (nchars <= len))
  {
    for (count = (len - nchars); count < len; count++)
    {
      sprintf(result, "%s%c", result, source[count]);
    }
  }
}


/************************************************************************/
/* nb_strcpy_malloc                                                     */
/*                                                                      */
/* Function takes the data supplied in 'data', mallocs space at the     */
/* address of 'location' and copies the data to that address.           */
/*                                                                      */
/* Parameters: location - pointer to where to store string.             */
/*             data     - data to copy.                                 */
/*                                                                      */
/* Returns:    _kernel_oserror (error), NULL (success).                 */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_strcpy_malloc(char **location, char *data)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr;

  if (!data)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc failed because no source data was supplied");
    return_ptr = &return_code;
  }
  else if (*data != NULL)
  {
    if ((ptr= malloc(strlen(data) + 2)) == NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_strcpy_malloc failed due to lack of memory");
      return_ptr = &return_code;
    }
    else
    {
      strcpy(ptr, data);
      *location = ptr;
    }
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc failed because a null pointer was passed");
    return_ptr = &return_code;
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_strncpy_malloc                                                    */
/*                                                                      */
/* Function takes the data supplied in 'data', mallocs space at the     */
/* address of 'location' and copies the specified number of bytes to    */
/* that address.                                                        */
/*                                                                      */
/* Parameters: location - pointer to where to store string.             */
/*             data     - data to copy.                                 */
/*             nbytes   - number of bytes to copy.                      */
/*                                                                      */
/* Returns:    _kernel_oserror (error), NULL (success).                 */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_strncpy_malloc(char **location, char *data, size_t nbytes)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr;

  if (!data)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strncpy_malloc failed because no source data was supplied");
    return_ptr = &return_code;
  }
  else if (*data != NULL)
  {
    if (nbytes != 0)
    {

      if ((ptr= malloc(nbytes + 2)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_strncpy_malloc failed due to lack of memory");
        return_ptr = &return_code;
      }
      else
      {
        strncpy(ptr, data, nbytes);
        /* Just in case strncpy() doesn't zero terminate the string */
        ptr[nbytes] = '\0';
        *location = ptr;
      }
    }
    else
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_strncpy_malloc failed because nbytes was 0");
      return_ptr = &return_code;
    }
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strncpy_malloc failed because a null pointer was passed");
    return_ptr = &return_code;
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_strcpy_malloc_buffer                                              */
/*                                                                      */
/* Function takes the data supplied in 'data', mallocs space at the     */
/* address of 'location' and copies the data to that address.  The      */
/* function mallocs 'extra' bytes more onto the end of the string.      */
/*                                                                      */
/* Parameters: location - pointer to where to store string.             */
/*             data     - data to copy.                                 */
/*             extra    - malloc = strlen(data) + extra.                */
/*                                                                      */
/* Returns:    _kernel_oserror (error), NULL (success).                 */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_strcpy_malloc_buffer(char **location, char *data, size_t extra)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr;

  if (!data)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc_buffer failed because no source data was supplied");
    return_ptr = &return_code;
  }
  else if (*data != NULL)
  {
    if ((ptr= malloc(strlen(data) + extra + 2)) == NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_strcpy_malloc_buffer failed due to lack of memory");
      return_ptr = &return_code;
    }
    else
    {
      strcpy(ptr, data);
      *location = ptr;
    }
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc_buffer failed because a null pointer was passed");
    return_ptr = &return_code;
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_strncpy_malloc_buffer                                             */
/*                                                                      */
/* Function takes the data supplied in 'data', mallocs space at the     */
/* address of 'location' and copies the specified number of bytes to    */
/* that address.  'extra' bytes malloced into buffer too.               */
/*                                                                      */
/* Parameters: location - pointer to where to store string.             */
/*             data     - data to copy.                                 */
/*             nbytes   - number of bytes to copy.                      */
/*             extra    - malloc = nbytes + extra.                      */
/*                                                                      */
/* Returns:    _kernel_oserror (error), NULL (success).                 */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_strncpy_malloc_buffer(char **location, char *data, size_t nbytes, size_t extra)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr;

  if (!data)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strncpy_malloc_buffer failed because no source data was supplied");
    return_ptr = &return_code;
  }
  else if (*data != NULL)
  {
    if (nbytes != 0)
    {

      if ((ptr= malloc(nbytes + extra + 2)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_strncpy_malloc_buffer failed due to lack of memory");
        return_ptr = &return_code;
      }
      else
      {
        strncpy(ptr, data, nbytes);
        /* Just in case strncpy() doesn't zero terminate the string */
        ptr[nbytes] = '\0';
        *location = ptr;
      }
    }
    else
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_strncpy_malloc_buffer failed because nbytes was 0");
      return_ptr = &return_code;
    }
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess,"nb_strncpy_malloc_buffer failed because a null pointer was passed");
    return_ptr = &return_code;
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_string_empty                                                      */
/*                                                                      */
/* Function returns TRUE if the passed string is either a NULL pointer  */
/* or it is empty.                                                      */
/*                                                                      */
/* Parameters: str  - string to check.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_string_empty(char *str)
{
  if (str != NULL)
  {
    if (str[0] == '\0')
      return(TRUE);
    else
      return(FALSE);
  }
  else
  {
    return(TRUE);
  }
}



/************************************************************************/
/* nb_gstrans_string                                                    */
/*                                                                      */
/* Function passes the supplied string to GSTrans.                      */
/*                                                                      */
/*                                                                      */
/* Parameters: processed  - pointer to store processed string at.       */
/*             str        - string to pass to GSTrans.                  */
/*                                                                      */
/* Returns:     _kernel_oserror: 0 - not enough memory.                 */
/*                               2 - buffer too small.                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_gstrans_string(char **processed, char *str, int buffer_size)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr = NULL;
  int			 flags = 0, len = 0;

  if ((ptr= malloc(buffer_size)) == NULL)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_gstrans_string failed due to lack of memory");
    return_ptr = &return_code;
  }
  else
  {
    if (_swix(OS_GSTrans,
              _INR(0,2) | _OUT(_FLAGS),
              str,
              ptr,
              buffer_size,
              &flags)
         || (flags & _C)
       )
    {
      return_code.errnum = 1;
      strcpy(return_code.errmess, "nb_gstrans_string failed due buffer being too small");
      return_ptr = &return_code;
    }
    else
    {
      /* Terminate the string at any control code */
      for (len = 0; len < buffer_size; len++)
      {
        if (ptr[len] < 32)
        {
          ptr[len] = 0;
          break;
        }
      }
      *processed = ptr;
      return_ptr = NULL;
    }
  }
  return(return_ptr);
}

@


1.5
log
@Summary
-------
  * Added more string handling functions.
  * Completed documentation of library.
Detail
------
  * Code now fully documented using AHodgkinson's source code doc tools.
    !MKDocs produces StrongHelp & HTML versions.

Version 0.24. Not tagged
@
text
@d416 61
@


1.4
log
@Added string null checker code.

Version 0.22. Tagged as 'NBLib-0_22'
@
text
@d220 172
@


1.3
log
@Major improvements.  Fixed error handling that got broken in 0.13.  Added
test harness which tests non-toolbox functions.  As a result of this several
bugs fixed.  Some code duplication removed.  Updated StrongHelp docs.

Version 0.18. Tagged as 'NBLib-0_18'
@
text
@d217 27
@


1.2
log
@Fixed a mistake in NBLib.h which crept in during the last checkin.

Version 0.17. Tagged as 'NBLib-0_17'
@
text
@d186 2
a187 1
  char *ptr;
d193 1
a193 1
    return(&return_code);
d201 1
a201 1
      return(&return_code);
a206 1
      return(NULL);
d213 1
a213 1
    return(&return_code);
d215 1
@


1.1
log
@Fixed a couple of memory leaks and tidied up a few functions.  Split up some
of the code into more logical files.  Version reporting function added.
Moved to BAL's two-stage Makefile system.

Version 0.13. Tagged as 'NBLib-0_13'
@
text
@a215 64


/* ------------------------------------------------------------------------------------------------
 * nbint_setup_file_paths
 * Internal routine to setup file paths for nb_files & nb_dirs.
 * Parameters: flags    - If bit 0 is set concat location & object into path with a '.' in between.
 *                        else return location in path.
 *             location - as in all nb_file* and nb_dir* functions.
 *             object   - as in all nb_file* and nb_dir* functions.
 *             path     - pointer to which memory is allocated.
 * Returns:    FALSE (error), TRUE (success).  Remeber to free the memory.
 * ------------------------------------------------------------------------------------------------
 */
int nbint_setup_file_paths(unsigned int flags, char *location, char *object, char **path)
{
  /* NEVER free this pointer.  It is done by the calling function */
  char *ptr;

  if (nb_bit_set(flags, 0) == TRUE)
  {
    /* Everything in location.  Check to make sure it isn't empty */
    if ( (location == NULL) || (strcmp(location, "") == 0) )
    {
      return(FALSE);
    }
    else
    {
      /* We have data. */
      if ((ptr= malloc(strlen(location) + 2)) == NULL)
      {
        return(FALSE);
      }
      else
      {
        strcpy(ptr, location);
        *path = ptr;
        return(TRUE);
      }
    }
  }
  else
  {
    /* Location & Object should both have data.  Check first, though */
    if ( ((location == NULL) || (strcmp(location, "") == 0)) ||
         ((object == NULL) || (strcmp(object, "") == 0)) )
    {
      return(FALSE);
    }
    else
    {
      /* We have data. */
      if ((ptr= malloc(strlen(location) + strlen(object) + 5)) == NULL)
      {
        return(FALSE);
      }
      else
      {
        sprintf(ptr, "%s.%s", location, object);
        *path = ptr;
        return(TRUE);
      }
    }
  }
}
@
