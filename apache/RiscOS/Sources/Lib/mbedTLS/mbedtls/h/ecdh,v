head	1.4;
access;
symbols
	mbedTLS-2_08:1.4
	mbedTLS-2_07:1.4
	mbedTLS-2_06:1.3
	mbedTLS-2_05:1.3
	mbedTLS-2_04:1.3
	mbedTLS-2_03:1.3
	mbedTLS-2_02:1.2
	mbedTLS-2_01:1.1.1.1
	mbedTLS-2_00:1.1.1.1
	mbedtls-2_8_0:1.1.1.1
	arm:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2018.09.22.11.42.15;	author rool;	state Exp;
branches;
next	1.3;
commitid	WfLuWhqCRRO8R5TA;

1.3
date	2018.08.21.09.45.46;	author rool;	state Exp;
branches;
next	1.2;
commitid	LUmQc7reevlXeYOA;

1.2
date	2018.08.21.09.37.16;	author rool;	state Exp;
branches;
next	1.1;
commitid	il6xFkY0G1z4cYOA;

1.1
date	2018.08.21.09.11.31;	author rool;	state Exp;
branches
	1.1.1.1;
next	;
commitid	dTlTyq49Aw8V2YOA;

1.1.1.1
date	2018.08.21.09.11.31;	author rool;	state Exp;
branches;
next	;
commitid	dTlTyq49Aw8V2YOA;


desc
@@


1.4
log
@Library update
Detail:
  This is release 2.13.0 direct from ARM, with customisations to ro_config.h/timing.c/entropy_poll.c/net_sockets.c/x509.c to port to RISC OS.
  Note the extra edit to x509.c is a temporary measure, see
  https://github.com/ARMmbed/mbedtls/issues/1907
Admin:
  Submission for TCP/IP bounty.

Version 2.07. Tagged as 'mbedTLS-2_07'
@
text
@/**
 * \file ecdh.h
 *
 * \brief This file contains ECDH definitions and functions.
 *
 * The Elliptic Curve Diffie-Hellman (ECDH) protocol is an anonymous
 * key agreement protocol allowing two parties to establish a shared
 * secret over an insecure channel. Each party must have an
 * elliptic-curve publicâ€“private key pair.
 *
 * For more information, see <em>NIST SP 800-56A Rev. 2: Recommendation for
 * Pair-Wise Key Establishment Schemes Using Discrete Logarithm
 * Cryptography</em>.
 */
/*
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of Mbed TLS (https://tls.mbed.org)
 */

#ifndef MBEDTLS_ECDH_H
#define MBEDTLS_ECDH_H

#include "ecp.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Defines the source of the imported EC key.
 */
typedef enum
{
    MBEDTLS_ECDH_OURS,   /**< Our key. */
    MBEDTLS_ECDH_THEIRS, /**< The key of the peer. */
} mbedtls_ecdh_side;

/**
 * \brief           The ECDH context structure.
 */
typedef struct mbedtls_ecdh_context
{
    mbedtls_ecp_group grp;   /*!< The elliptic curve used. */
    mbedtls_mpi d;           /*!< The private key. */
    mbedtls_ecp_point Q;     /*!< The public key. */
    mbedtls_ecp_point Qp;    /*!< The value of the public key of the peer. */
    mbedtls_mpi z;           /*!< The shared secret. */
    int point_format;        /*!< The format of point export in TLS messages. */
    mbedtls_ecp_point Vi;    /*!< The blinding value. */
    mbedtls_ecp_point Vf;    /*!< The unblinding value. */
    mbedtls_mpi _d;          /*!< The previous \p d. */
}
mbedtls_ecdh_context;

/**
 * \brief           This function generates an ECDH keypair on an elliptic
 *                  curve.
 *
 *                  This function performs the first of two core computations
 *                  implemented during the ECDH key exchange. The second core
 *                  computation is performed by mbedtls_ecdh_compute_shared().
 *
 * \see             ecp.h
 *
 * \param grp       The ECP group.
 * \param d         The destination MPI (private key).
 * \param Q         The destination point (public key).
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 *
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or
 *                  \c MBEDTLS_MPI_XXX error code on failure.
 *
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );

/**
 * \brief           This function computes the shared secret.
 *
 *                  This function performs the second of two core computations
 *                  implemented during the ECDH key exchange. The first core
 *                  computation is performed by mbedtls_ecdh_gen_public().
 *
 * \see             ecp.h
 *
 * \note            If \p f_rng is not NULL, it is used to implement
 *                  countermeasures against side-channel attacks.
 *                  For more information, see mbedtls_ecp_mul().
 *
 * \param grp       The ECP group.
 * \param z         The destination MPI (shared secret).
 * \param Q         The public key from another party.
 * \param d         Our secret exponent (private key).
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 *
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or
 *                  \c MBEDTLS_MPI_XXX error code on failure.
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng );

/**
 * \brief           This function initializes an ECDH context.
 *
 * \param ctx       The ECDH context to initialize.
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx );

/**
 * \brief           This function frees a context.
 *
 * \param ctx       The context to free.
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx );

/**
 * \brief           This function generates a public key and a TLS
 *                  ServerKeyExchange payload.
 *
 *                  This is the first function used by a TLS server for ECDHE
 *                  ciphersuites.
 *
 * \note            This function assumes that the ECP group (grp) of the
 *                  \p ctx context has already been properly set,
 *                  for example, using mbedtls_ecp_group_load().
 *
 * \see             ecp.h
 *
 * \param ctx       The ECDH context.
 * \param olen      The number of characters written.
 * \param buf       The destination buffer.
 * \param blen      The length of the destination buffer.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 *
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
 */
int mbedtls_ecdh_make_params( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng );

/**
 * \brief           This function parses and processes a TLS ServerKeyExhange
 *                  payload.
 *
 *                  This is the first function used by a TLS client for ECDHE
 *                  ciphersuites.
 *
 * \see             ecp.h
 *
 * \param ctx       The ECDH context.
 * \param buf       The pointer to the start of the input buffer.
 * \param end       The address for one Byte past the end of the buffer.
 *
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
 *
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                      const unsigned char **buf, const unsigned char *end );

/**
 * \brief           This function sets up an ECDH context from an EC key.
 *
 *                  It is used by clients and servers in place of the
 *                  ServerKeyEchange for static ECDH, and imports ECDH
 *                  parameters from the EC key information of a certificate.
 *
 * \see             ecp.h
 *
 * \param ctx       The ECDH context to set up.
 * \param key       The EC key to use.
 * \param side      Defines the source of the key: 1: Our key, or
 *                  0: The key of the peer.
 *
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
 *
 */
int mbedtls_ecdh_get_params( mbedtls_ecdh_context *ctx, const mbedtls_ecp_keypair *key,
                     mbedtls_ecdh_side side );

/**
 * \brief           This function generates a public key and a TLS
 *                  ClientKeyExchange payload.
 *
 *                  This is the second function used by a TLS client for ECDH(E)
 *                  ciphersuites.
 *
 * \see             ecp.h
 *
 * \param ctx       The ECDH context.
 * \param olen      The number of Bytes written.
 * \param buf       The destination buffer.
 * \param blen      The size of the destination buffer.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 *
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng );

/**
 * \brief       This function parses and processes a TLS ClientKeyExchange
 *              payload.
 *
 *              This is the second function used by a TLS server for ECDH(E)
 *              ciphersuites.
 *
 * \see         ecp.h
 *
 * \param ctx   The ECDH context.
 * \param buf   The start of the input buffer.
 * \param blen  The length of the input buffer.
 *
 * \return      \c 0 on success.
 * \return      An \c MBEDTLS_ERR_ECP_XXX error code on failure.
 */
int mbedtls_ecdh_read_public( mbedtls_ecdh_context *ctx,
                      const unsigned char *buf, size_t blen );

/**
 * \brief           This function derives and exports the shared secret.
 *
 *                  This is the last function used by both TLS client
 *                  and servers.
 *
 * \note            If \p f_rng is not NULL, it is used to implement
 *                  countermeasures against side-channel attacks.
 *                  For more information, see mbedtls_ecp_mul().
 *
 * \see             ecp.h
 *
 * \param ctx       The ECDH context.
 * \param olen      The number of Bytes written.
 * \param buf       The destination buffer.
 * \param blen      The length of the destination buffer.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 *
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng );

#ifdef __cplusplus
}
#endif

#endif /* ecdh.h */
@


1.3
log
@Library update
Detail:
  This is release 2.11.0 direct from ARM, with customisations to ro_config.h/timing.c/entropy_poll.c/net_sockets.c to port to RISC OS.
Admin:
  Submission for TCP/IP bounty.

Version 2.03. Tagged as 'mbedTLS-2_03'
@
text
@d55 1
a55 1
typedef struct
@


1.2
log
@Library update
Detail:
  This is release 2.9.0 direct from ARM, with customisations to ro_config.h/timing.c/entropy_poll.c/net_sockets.c to port to RISC OS.
Admin:
  Submission for TCP/IP bounty.

Version 2.02. Tagged as 'mbedTLS-2_02'
@
text
@d5 2
a6 2
 * 
 * The Elliptic Curve Diffie-Hellman (ECDH) protocol is an anonymous 
@


1.1
log
@Initial revision
@
text
@d4 5
a8 4
 * \brief The Elliptic Curve Diffie-Hellman (ECDH) protocol APIs.
 *
 * ECDH is an anonymous key agreement protocol allowing two parties to
 * establish a shared secret over an insecure channel. Each party must have an
d44 1
a44 3
 * Defines the source of the imported EC key:
 * <ul><li>Our key.</li>
 * <li>The key of the peer.</li></ul>
d48 2
a49 2
    MBEDTLS_ECDH_OURS,
    MBEDTLS_ECDH_THEIRS,
d77 2
d83 1
a83 1
 * \param p_rng     The RNG parameter.
d85 2
a86 1
 * \return          \c 0 on success, or an \c MBEDTLS_ERR_ECP_XXX or
a88 1
 * \see             ecp.h
d101 6
d112 1
a112 1
 * \param p_rng     The RNG parameter.
d114 2
a115 1
 * \return          \c 0 on success, or an \c MBEDTLS_ERR_ECP_XXX or
a116 6
 *
 * \see             ecp.h
 *
 * \note            If \p f_rng is not NULL, it is used to implement
 *                  countermeasures against potential elaborate timing
 *                  attacks. For more information, see mbedtls_ecp_mul().
d144 6
d155 1
a155 8
 * \param p_rng     The RNG parameter.
 *
 * \note            This function assumes that the ECP group (grp) of the
 *                  \p ctx context has already been properly set,
 *                  for example, using mbedtls_ecp_group_load().
 *
 * \return          \c 0 on success, or an \c MBEDTLS_ERR_ECP_XXX error code
 *                  on failure.
d157 2
a158 1
 * \see             ecp.h
d172 2
d178 2
a179 2
 * \return          \c 0 on success, or an \c MBEDTLS_ERR_ECP_XXX error code
 *                  on failure.
a180 1
 * \see             ecp.h
d192 2
d196 2
a197 3
 * \param side      Defines the source of the key:
 *                  <ul><li>1: Our key.</li>
                    <li>0: The key of the peer.</li></ul>
d199 2
a200 2
 * \return          \c 0 on success, or an \c MBEDTLS_ERR_ECP_XXX error code
 *                  on failure.
a201 1
 * \see             ecp.h
d213 2
d220 1
a220 1
 * \param p_rng     The RNG parameter.
d222 2
a223 4
 * \return          \c 0 on success, or an \c MBEDTLS_ERR_ECP_XXX error code
 *                  on failure.
 *
 * \see             ecp.h
d237 2
d243 2
a244 4
 * \return      \c 0 on success, or an \c MBEDTLS_ERR_ECP_XXX error code
 *              on failure.
 *
 * \see         ecp.h
d255 6
d266 1
a266 4
 * \param p_rng     The RNG parameter.
 *
 * \return          \c 0 on success, or an \c MBEDTLS_ERR_ECP_XXX error code
 *                  on failure.
d268 2
a269 5
 * \see             ecp.h
 *
 * \note            If \p f_rng is not NULL, it is used to implement
 *                  countermeasures against potential elaborate timing
 *                  attacks. For more information, see mbedtls_ecp_mul().
@


1.1.1.1
log
@Import of mbedTLS library
This is release 2.8.0 direct from ARM, with the files rearranged as a standard RISC OS component.
@
text
@@
