head	1.5;
access;
symbols
	mbedTLS-2_08:1.5
	mbedTLS-2_07:1.4
	mbedTLS-2_06:1.4
	mbedTLS-2_05:1.4
	mbedTLS-2_04:1.4
	mbedTLS-2_03:1.3
	mbedTLS-2_02:1.3
	mbedTLS-2_01:1.2
	mbedTLS-2_00:1.1.1.1
	mbedtls-2_8_0:1.1.1.1
	arm:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2018.11.15.08.45.59;	author rool;	state Exp;
branches;
next	1.4;
commitid	Sz0jxPSPnRga910B;

1.4
date	2018.08.21.09.55.09;	author rool;	state Exp;
branches;
next	1.3;
commitid	jETYjHoVTULfiYOA;

1.3
date	2018.08.21.09.37.08;	author rool;	state Exp;
branches;
next	1.2;
commitid	il6xFkY0G1z4cYOA;

1.2
date	2018.08.21.09.26.46;	author rool;	state Exp;
branches;
next	1.1;
commitid	NaZeDHYrTR8y8YOA;

1.1
date	2018.08.21.09.11.27;	author rool;	state Exp;
branches
	1.1.1.1;
next	;
commitid	dTlTyq49Aw8V2YOA;

1.1.1.1
date	2018.08.21.09.11.27;	author rool;	state Exp;
branches;
next	;
commitid	dTlTyq49Aw8V2YOA;


desc
@@


1.5
log
@Ack escapes for receive/send too
Detail:
  Previously only receive with timeout cleared an Escape condition.
Admin:
  Submission for TCP/IP bounty.

Version 2.08. Tagged as 'mbedTLS-2_08'
@
text
@/*
 *  TCP/IP or UDP/IP networking functions
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  Copyright (c) 2018, RISC OS Open Ltd
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */

/* Enable definition of getaddrinfo() even when compiling with -std=c99. Must
 * be set before config.h, which pulls in glibc's features.h indirectly.
 * Harmless on other platforms. */
#define _POSIX_C_SOURCE 200112L

#if !defined(MBEDTLS_CONFIG_FILE)
#include "mbedtls/config.h"
#else
#include MBEDTLS_CONFIG_FILE
#endif

#ifndef RISCOS
#error "This is a platform specific file for RISC OS only"
#endif

#if defined(MBEDTLS_NET_C)

#if defined(MBEDTLS_PLATFORM_C)
#include "mbedtls/platform.h"
#else
#include <stdlib.h>
#define mbedtls_time_t   time_t
#endif

#include "mbedtls/net_sockets.h"

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/filio.h>
#include <unistd.h>
#include <signal.h>
#include <netdb.h>
#include <socklib.h>

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "swis.h"
#include "Global/OsBytes.h"
#include "AsmUtils/callbacks.h"
#define Resolver_GetHostByName          0x046000
#define Resolver_GetHost                0x046001
#define Resolver_GetCache               0x046002
#define Resolver_CacheControl           0x046003

/*
 * Read processor mode like _kernel_processor_mode()
 */
static int arm_cpsr(void)
{
#define MODE_BITS    0xF   /* Just the mode */
#define MODE_M32_BIT 0x10  /* 32 versus 26 bit */
#define MODE_USR     0     /* USR32 or USR26 if masked with MODE_BITS */

	int procmode;

	__asm
	{
		MRS procmode, CPSR
	}

	return procmode;
}

/*
 * Prepare for using the sockets interface
 */
static int net_prepare(void)
{
	return 0;
}

/*
 * Initialize a context
 */
void mbedtls_net_init(mbedtls_net_context *ctx)
{
	ctx->fd = -1;
}

/*
 * Initiate a TCP connection with host:port and the given protocol
 */
int mbedtls_net_connect(mbedtls_net_context *ctx,
                        const char *url, const char *port, int proto)
{
	int ret;
	struct hostent     *host;
	char              **cur;
	struct sockaddr_in  addr;

	ret = net_prepare();
	if (ret != 0)
	{
		return ret;
	}

	/* No IPv6 support beneath us yet, resolve name to
	 * to IPv4 address.
	 */
	while (1)
	{
		_kernel_oserror *error;
		int errnum;

		error = _swix(Resolver_GetHost, _IN(0) | _OUTR(0,1),
		              url, &errnum, &host);
		if (error != NULL)
		{
			return MBEDTLS_ERR_NET_UNKNOWN_HOST;
		}
		if (errnum == EINPROGRESS)
		{
			if ((arm_cpsr() & MODE_BITS) != MODE_USR) usermode_donothing();
			continue;
		}
		if (errnum == 0) break;
		host = NULL; /* Some other error */
	}
	if (host == NULL)
	{
		return MBEDTLS_ERR_NET_UNKNOWN_HOST;
	}

	/* Try the sockaddrs until a connection succeeds */
	ret = MBEDTLS_ERR_NET_UNKNOWN_HOST;

	for (cur = host->h_addr_list; *cur != NULL; cur++)
	{
		ctx->fd = (int)socket(PF_INET,
		                      proto == MBEDTLS_NET_PROTO_UDP ? SOCK_DGRAM : SOCK_STREAM,
		                      proto == MBEDTLS_NET_PROTO_UDP ? IPPROTO_UDP : IPPROTO_TCP);
		if (ctx->fd < 0)
		{
			ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
			continue;
		}

		memset(&addr, 0, sizeof(addr));
		addr.sin_len = host->h_length;
		addr.sin_family = host->h_addrtype;
		addr.sin_port = htons(atoi(port));
		memcpy(&addr.sin_addr.s_addr, *cur, host->h_length);
		if (connect(ctx->fd, (struct sockaddr *)&addr, sizeof(addr)) == 0)
		{
			ret = 0;
			break;
		}

		close(ctx->fd);
		ret = MBEDTLS_ERR_NET_CONNECT_FAILED;
	}

	return ret;
}

/*
 * Create a listening socket on bind_ip:port
 */
int mbedtls_net_bind(mbedtls_net_context *ctx,
                     const char *url, const char *port, int proto)
{
	int n, ret;
	struct hostent     *host;
	char              **cur;
	struct sockaddr_in  addr;

	ret = net_prepare();
	if (ret != 0)
	{
		return ret;
	}

	/* No IPv6 support beneath us yet, resolve name to
	 * to IPv4 address.
	 */
	while (1)
	{
		_kernel_oserror *error;
		int errnum;

		error = _swix(Resolver_GetHost, _IN(0) | _OUTR(0,1),
		              url, &errnum, &host);
		if (error != NULL)
		{
			return MBEDTLS_ERR_NET_UNKNOWN_HOST;
		}
		if (errnum == EINPROGRESS)
		{
			if ((arm_cpsr() & MODE_BITS) != MODE_USR) usermode_donothing();
			continue;
		}
		if (errnum == 0) break;
		host = NULL; /* Some other error */
	}
	if (host == NULL)
	{
		return MBEDTLS_ERR_NET_UNKNOWN_HOST;
	}
	
	/* Try the sockaddrs until a binding succeeds */
	ret = MBEDTLS_ERR_NET_UNKNOWN_HOST;
	for (cur = host->h_addr_list; *cur != NULL; cur++)
	{
		ctx->fd = (int)socket(PF_INET,
		                      proto == MBEDTLS_NET_PROTO_UDP ? SOCK_DGRAM : SOCK_STREAM,
		                      proto == MBEDTLS_NET_PROTO_UDP ? IPPROTO_UDP : IPPROTO_TCP);
		if (ctx->fd < 0)
		{
			ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
			continue;
		}

		n = 1;
		if (setsockopt(ctx->fd, SOL_SOCKET, SO_REUSEADDR,
		               (const char *)&n, sizeof(n)) != 0)
		{
			close(ctx->fd);
			ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
			continue;
		}

		memset(&addr, 0, sizeof(addr));
		addr.sin_len = host->h_length;
		addr.sin_family = host->h_addrtype;
		addr.sin_port = htons(atoi(port));
		memcpy(&addr.sin_addr.s_addr, *cur, host->h_length);
		if (bind(ctx->fd, (struct sockaddr *)&addr, sizeof(addr)) != 0)
		{
			close(ctx->fd);
			ret = MBEDTLS_ERR_NET_BIND_FAILED;
			continue;
		}
		
		/* Listen only makes sense for TCP */
		if (proto == MBEDTLS_NET_PROTO_TCP)
		{
			if (listen(ctx->fd, MBEDTLS_NET_LISTEN_BACKLOG) != 0)
			{
				close(ctx->fd);
				ret = MBEDTLS_ERR_NET_LISTEN_FAILED;
				continue;
			}
		}

		/* If we ever get here, it's a success */
		ret = 0;
		break;
	}

	return ret;
}

/*
 * Check if the requested operation would be blocking on a non-blocking socket
 * and thus 'failed' with a negative return value.
 *
 * Note: on a blocking socket this function always returns 0!
 */
static int net_would_block(const mbedtls_net_context *ctx)
{
	int nbio, olderrno;

	/*
	 * Never return 'WOULD BLOCK' on a non-blocking socket
	 */
	olderrno = errno;
	socketioctl(ctx->fd, _IOR('f', 126, int) /* Read FIONBIO */, &nbio);
	errno = olderrno;
	if (!nbio)
	{
		return 0;
	}

	switch (errno)
	{
#if defined EAGAIN
		case EAGAIN:
#endif
#if defined EWOULDBLOCK && EWOULDBLOCK != EAGAIN
		case EWOULDBLOCK:
#endif
			return 1;
	}

	return 0;
}

/*
 * Accept a connection from a remote client
 */
int mbedtls_net_accept(mbedtls_net_context *bind_ctx,
                       mbedtls_net_context *client_ctx,
                       void *client_ip, size_t buf_size, size_t *ip_len)
{
	int ret;
	int type;
	struct sockaddr client_addr;
#if defined(__socklen_t_defined) || defined(_SOCKLEN_T) ||  \
    defined(_SOCKLEN_T_DECLARED) || defined(__DEFINED_socklen_t)
	socklen_t n = (socklen_t)sizeof(client_addr);
	socklen_t type_len = (socklen_t)sizeof(type);
#else
	int n = sizeof(client_addr);
	int type_len = sizeof(type);
#endif

	/* Is this a TCP or UDP socket? */
	if ((getsockopt(bind_ctx->fd, SOL_SOCKET, SO_TYPE, (void *)&type, (int *)&type_len) != 0) ||
	    (type != SOCK_STREAM && type != SOCK_DGRAM))
	{
		return MBEDTLS_ERR_NET_ACCEPT_FAILED;
	}

	if (type == SOCK_STREAM)
	{
		/* TCP: actual accept() */
		ret = client_ctx->fd = (int)accept(bind_ctx->fd,
		                                   (struct sockaddr *)&client_addr, (int *)&n);
	}
	else
	{
		/* UDP: wait for a message, but keep it in the queue */
		char buf[1] = { 0 };

		ret = (int)recvfrom(bind_ctx->fd, buf, sizeof(buf), MSG_PEEK,
		                    (struct sockaddr *)&client_addr, (int *)&n);
	}

	if (ret < 0)
	{
		if (net_would_block(bind_ctx) != 0)
		{
			return MBEDTLS_ERR_SSL_WANT_READ;
		}

		return MBEDTLS_ERR_NET_ACCEPT_FAILED;
	}

	/* UDP: hijack the listening socket to communicate with the client,
	 * then bind a new socket to accept new connections
	 */
	if (type != SOCK_STREAM)
	{
		struct sockaddr local_addr;
		int one = 1;
		
		if (connect(bind_ctx->fd, (struct sockaddr *)&client_addr, n) != 0)
		{
			return MBEDTLS_ERR_NET_ACCEPT_FAILED;
		}

		client_ctx->fd = bind_ctx->fd;
		bind_ctx->fd   = -1; /* In case we exit early */

		n = sizeof(struct sockaddr);
		if ((getsockname(client_ctx->fd, (struct sockaddr *)&local_addr, (int *)&n) != 0) ||
		    ((bind_ctx->fd = (int)socket(local_addr.sa_family,
		                                 SOCK_DGRAM, IPPROTO_UDP)) < 0) ||
		    (setsockopt(bind_ctx->fd, SOL_SOCKET, SO_REUSEADDR,
		                (const char *)&one, sizeof(one)) != 0))
		{
			return MBEDTLS_ERR_NET_SOCKET_FAILED;
		}

		if (bind(bind_ctx->fd, (struct sockaddr *)&local_addr, n) != 0)
		{
			return MBEDTLS_ERR_NET_BIND_FAILED;
		}
	}

	if (client_ip != NULL)
	{
		struct sockaddr_in *addr4 = (struct sockaddr_in *) &client_addr;
		*ip_len = sizeof(addr4->sin_addr.s_addr);

		if (buf_size < *ip_len)
		{
			return MBEDTLS_ERR_NET_BUFFER_TOO_SMALL;
		}

		memcpy(client_ip, &addr4->sin_addr.s_addr, *ip_len);
	}

	return 0;
}

/*
 * Set the socket blocking or non-blocking
 */
int mbedtls_net_set_block(mbedtls_net_context *ctx)
{
	int on = 0;

	return socketioctl(ctx->fd, FIONBIO, &on);
}

int mbedtls_net_set_nonblock(mbedtls_net_context *ctx)
{
	int on = 1;

	return socketioctl(ctx->fd, FIONBIO, &on);
}

/*
 * Portable usleep helper
 */
void mbedtls_net_usleep(unsigned long usec)
{
	struct timeval tv;
	tv.tv_sec  = usec / 1000000;
	tv.tv_usec = usec % 1000000;
	select(0, NULL, NULL, NULL, &tv);
}

/*
 * Read at most 'len' characters
 */
int mbedtls_net_recv(void *ctx, unsigned char *buf, size_t len)
{
	int ret;
	int fd = ((mbedtls_net_context *)ctx)->fd;

	if (fd < 0)
	{
		return MBEDTLS_ERR_NET_INVALID_CONTEXT;
	}

	ret = (int)read(fd, buf, len);

	if (ret < 0)
	{
		if (net_would_block(ctx) != 0)
		{
			return MBEDTLS_ERR_SSL_WANT_READ;
		}

		if (errno == EPIPE || errno == ECONNRESET)
		{
			return MBEDTLS_ERR_NET_CONN_RESET;
		}

		if (errno == EINTR)
		{
			/* Escape */
			_swix(OS_Byte, _IN(0), OsByte_AcknowledgeEscape); 
			return MBEDTLS_ERR_SSL_WANT_READ;
		}

		return MBEDTLS_ERR_NET_RECV_FAILED;
	}

	return ret;
}

/*
 * Read at most 'len' characters, blocking for at most 'timeout' ms
 */
int mbedtls_net_recv_timeout( void *ctx, unsigned char *buf,
                              size_t len, uint32_t timeout )
{
	int ret;
	struct timeval tv;
	fd_set read_fds;
	int fd = ((mbedtls_net_context *)ctx)->fd;
	
	if (fd < 0)
	{
		return MBEDTLS_ERR_NET_INVALID_CONTEXT;
	}

	FD_ZERO(&read_fds);
	FD_SET(fd, &read_fds);

	tv.tv_sec  = timeout / 1000;
	tv.tv_usec = ( timeout % 1000 ) * 1000;

	ret = select(fd + 1, &read_fds, NULL, NULL, timeout == 0 ? NULL : &tv);

	/* Zero fds ready means we timed out */
	if (ret == 0)
	{
		return MBEDTLS_ERR_SSL_TIMEOUT;
	}

	if (ret < 0)
	{
		if (errno == EINTR)
		{
			/* Escape */
			_swix(OS_Byte, _IN(0), OsByte_AcknowledgeEscape); 
			return MBEDTLS_ERR_SSL_WANT_READ;
		}

		return MBEDTLS_ERR_NET_RECV_FAILED;
	}

	/* This call will not block */
	return (mbedtls_net_recv(ctx, buf, len));
}

/*
 * Write at most 'len' characters
 */
int mbedtls_net_send(void *ctx, const unsigned char *buf, size_t len)
{
	int ret;
	int fd = ((mbedtls_net_context *)ctx)->fd;

	if (fd < 0)
	{
		return MBEDTLS_ERR_NET_INVALID_CONTEXT;
	}

	ret = (int)write(fd, buf, len);

	if (ret < 0)
	{
		if (net_would_block(ctx) != 0)
		{
			return MBEDTLS_ERR_SSL_WANT_WRITE;
		}

		if (errno == EPIPE || errno == ECONNRESET)
		{
			return MBEDTLS_ERR_NET_CONN_RESET;
		}

		if (errno == EINTR)
		{
			/* Escape */
			_swix(OS_Byte, _IN(0), OsByte_AcknowledgeEscape); 
			return MBEDTLS_ERR_SSL_WANT_WRITE;
		}

		return MBEDTLS_ERR_NET_SEND_FAILED;
	}

	return ret;
}

/*
 * Gracefully close the connection
 */
void mbedtls_net_free(mbedtls_net_context *ctx)
{
	if (ctx->fd == -1)
	{
		return;
	}

	shutdown(ctx->fd, 2);
	close(ctx->fd);

	ctx->fd = -1;
}

#endif /* MBEDTLS_NET_C */
@


1.4
log
@Library update
Detail:
  This is release 2.12.0 direct from ARM, with customisations to ro_config.h/timing.c/entropy_poll.c/net_sockets.c/x509.c to port to RISC OS.
  Note the extra edit to x509.c is a temporary measure, see
    https://github.com/ARMmbed/mbedtls/issues/1907
Admin:
  Submission for TCP/IP bounty.

Version 2.04. Tagged as 'mbedTLS-2_04'
@
text
@d472 2
d558 2
@


1.3
log
@Library update
Detail:
  This is release 2.9.0 direct from ARM, with customisations to ro_config.h/timing.c/entropy_poll.c/net_sockets.c to port to RISC OS.
Admin:
  Submission for TCP/IP bounty.

Version 2.02. Tagged as 'mbedTLS-2_02'
@
text
@d23 5
d66 1
d515 2
@


1.2
log
@Customisations for RISC OS port
Detail:
  ro_config.h: configuration selections for RISC OS
  net_sockets.c: attach to the RISC OS network stack
  timing.c: attach to the C library
  entropy_poll.c: use simple rand() implementation placeholder
Admin:
  Submission for TCP/IP bounty.

Version 2.01. Tagged as 'mbedTLS-2_01'
@
text
@d330 1
a330 1
	if ((getsockopt(bind_ctx->fd, SOL_SOCKET, SO_TYPE, (void *) &type, &type_len) != 0) ||
d340 1
a340 1
		                                   (struct sockaddr *)&client_addr, &n);
d348 1
a348 1
		                    (struct sockaddr *)&client_addr, &n);
d378 1
a378 1
		if ((getsockname(client_ctx->fd, (struct sockaddr *)&local_addr, &n) != 0) ||
d478 2
a479 2
int mbedtls_net_recv_timeout(void *ctx, unsigned char *buf, size_t len,
                             uint32_t timeout)
@


1.1
log
@Initial revision
@
text
@d5 1
d29 4
a34 5
#if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
    !defined(__APPLE__) && !defined(_WIN32)
#error "This module only works on Unix and Windows, see MBEDTLS_NET_C in config.h"
#endif

d39 1
a43 31
#include <string.h>

#if (defined(_WIN32) || defined(_WIN32_WCE)) && !defined(EFIX64) && \
    !defined(EFI32)

#ifdef _WIN32_WINNT
#undef _WIN32_WINNT
#endif
/* Enables getaddrinfo() & Co */
#define _WIN32_WINNT 0x0501
#include <ws2tcpip.h>

#include <winsock2.h>
#include <windows.h>

#if defined(_MSC_VER)
#if defined(_WIN32_WCE)
#pragma comment( lib, "ws2.lib" )
#else
#pragma comment( lib, "ws2_32.lib" )
#endif
#endif /* _MSC_VER */

#define read(fd,buf,len)        recv( fd, (char*)( buf ), (int)( len ), 0 )
#define write(fd,buf,len)       send( fd, (char*)( buf ), (int)( len ), 0 )
#define close(fd)               closesocket(fd)

static int wsa_init_done = 0;

#else /* ( _WIN32 || _WIN32_WCE ) && !EFIX64 && !EFI32 */

d48 1
d50 1
a52 1
#include <fcntl.h>
d54 1
a54 1
#include <errno.h>
d56 3
a58 1
#endif /* ( _WIN32 || _WIN32_WCE ) && !EFIX64 && !EFI32 */
d60 15
a74 7
/* Some MS functions want int and MSVC warns if we pass size_t,
 * but the standard functions use socklen_t, so cast only for MSVC */
#if defined(_MSC_VER)
#define MSVC_INT_CAST   (int)
#else
#define MSVC_INT_CAST
#endif
d76 1
a76 1
#include <stdio.h>
d78 4
a81 1
#include <time.h>
d83 2
a84 1
#include <stdint.h>
d89 1
a89 1
static int net_prepare( void )
d91 1
a91 17
#if ( defined(_WIN32) || defined(_WIN32_WCE) ) && !defined(EFIX64) && \
    !defined(EFI32)
    WSADATA wsaData;

    if( wsa_init_done == 0 )
    {
        if( WSAStartup( MAKEWORD(2,0), &wsaData ) != 0 )
            return( MBEDTLS_ERR_NET_SOCKET_FAILED );

        wsa_init_done = 1;
    }
#else
#if !defined(EFIX64) && !defined(EFI32)
    signal( SIGPIPE, SIG_IGN );
#endif
#endif
    return( 0 );
d97 1
a97 1
void mbedtls_net_init( mbedtls_net_context *ctx )
d99 1
a99 1
    ctx->fd = -1;
d105 2
a106 2
int mbedtls_net_connect( mbedtls_net_context *ctx, const char *host,
                         const char *port, int proto )
d108 66
a173 36
    int ret;
    struct addrinfo hints, *addr_list, *cur;

    if( ( ret = net_prepare() ) != 0 )
        return( ret );

    /* Do name resolution with both IPv6 and IPv4 */
    memset( &hints, 0, sizeof( hints ) );
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = proto == MBEDTLS_NET_PROTO_UDP ? SOCK_DGRAM : SOCK_STREAM;
    hints.ai_protocol = proto == MBEDTLS_NET_PROTO_UDP ? IPPROTO_UDP : IPPROTO_TCP;

    if( getaddrinfo( host, port, &hints, &addr_list ) != 0 )
        return( MBEDTLS_ERR_NET_UNKNOWN_HOST );

    /* Try the sockaddrs until a connection succeeds */
    ret = MBEDTLS_ERR_NET_UNKNOWN_HOST;
    for( cur = addr_list; cur != NULL; cur = cur->ai_next )
    {
        ctx->fd = (int) socket( cur->ai_family, cur->ai_socktype,
                            cur->ai_protocol );
        if( ctx->fd < 0 )
        {
            ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
            continue;
        }

        if( connect( ctx->fd, cur->ai_addr, MSVC_INT_CAST cur->ai_addrlen ) == 0 )
        {
            ret = 0;
            break;
        }

        close( ctx->fd );
        ret = MBEDTLS_ERR_NET_CONNECT_FAILED;
    }
d175 1
a175 3
    freeaddrinfo( addr_list );

    return( ret );
d181 2
a182 1
int mbedtls_net_bind( mbedtls_net_context *ctx, const char *bind_ip, const char *port, int proto )
d184 87
a270 64
    int n, ret;
    struct addrinfo hints, *addr_list, *cur;

    if( ( ret = net_prepare() ) != 0 )
        return( ret );

    /* Bind to IPv6 and/or IPv4, but only in the desired protocol */
    memset( &hints, 0, sizeof( hints ) );
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = proto == MBEDTLS_NET_PROTO_UDP ? SOCK_DGRAM : SOCK_STREAM;
    hints.ai_protocol = proto == MBEDTLS_NET_PROTO_UDP ? IPPROTO_UDP : IPPROTO_TCP;
    if( bind_ip == NULL )
        hints.ai_flags = AI_PASSIVE;

    if( getaddrinfo( bind_ip, port, &hints, &addr_list ) != 0 )
        return( MBEDTLS_ERR_NET_UNKNOWN_HOST );

    /* Try the sockaddrs until a binding succeeds */
    ret = MBEDTLS_ERR_NET_UNKNOWN_HOST;
    for( cur = addr_list; cur != NULL; cur = cur->ai_next )
    {
        ctx->fd = (int) socket( cur->ai_family, cur->ai_socktype,
                            cur->ai_protocol );
        if( ctx->fd < 0 )
        {
            ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
            continue;
        }

        n = 1;
        if( setsockopt( ctx->fd, SOL_SOCKET, SO_REUSEADDR,
                        (const char *) &n, sizeof( n ) ) != 0 )
        {
            close( ctx->fd );
            ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
            continue;
        }

        if( bind( ctx->fd, cur->ai_addr, MSVC_INT_CAST cur->ai_addrlen ) != 0 )
        {
            close( ctx->fd );
            ret = MBEDTLS_ERR_NET_BIND_FAILED;
            continue;
        }

        /* Listen only makes sense for TCP */
        if( proto == MBEDTLS_NET_PROTO_TCP )
        {
            if( listen( ctx->fd, MBEDTLS_NET_LISTEN_BACKLOG ) != 0 )
            {
                close( ctx->fd );
                ret = MBEDTLS_ERR_NET_LISTEN_FAILED;
                continue;
            }
        }

        /* Bind was successful */
        ret = 0;
        break;
    }

    freeaddrinfo( addr_list );

    return( ret );
d272 1
a274 12
#if ( defined(_WIN32) || defined(_WIN32_WCE) ) && !defined(EFIX64) && \
    !defined(EFI32)
/*
 * Check if the requested operation would be blocking on a non-blocking socket
 * and thus 'failed' with a negative return value.
 */
static int net_would_block( const mbedtls_net_context *ctx )
{
    ((void) ctx);
    return( WSAGetLastError() == WSAEWOULDBLOCK );
}
#else
d281 1
a281 1
static int net_would_block( const mbedtls_net_context *ctx )
d283 12
a294 10
    int err = errno;
    
    /*
     * Never return 'WOULD BLOCK' on a non-blocking socket
     */
    if( ( fcntl( ctx->fd, F_GETFL ) & O_NONBLOCK ) != O_NONBLOCK )
    {
        errno = err;
        return( 0 );
    }
d296 2
a297 2
    switch( errno = err )
    {
d299 1
a299 1
        case EAGAIN:
d302 1
a302 1
        case EWOULDBLOCK:
d304 4
a307 3
            return( 1 );
    }
    return( 0 );
a308 1
#endif /* ( _WIN32 || _WIN32_WCE ) && !EFIX64 && !EFI32 */
d313 7
a319 9
int mbedtls_net_accept( mbedtls_net_context *bind_ctx,
                        mbedtls_net_context *client_ctx,
                        void *client_ip, size_t buf_size, size_t *ip_len )
{
    int ret;
    int type;

    struct sockaddr_storage client_addr;

d322 2
a323 2
    socklen_t n = (socklen_t) sizeof( client_addr );
    socklen_t type_len = (socklen_t) sizeof( type );
d325 2
a326 2
    int n = (int) sizeof( client_addr );
    int type_len = (int) sizeof( type );
d329 73
a401 31
    /* Is this a TCP or UDP socket? */
    if( getsockopt( bind_ctx->fd, SOL_SOCKET, SO_TYPE,
                    (void *) &type, &type_len ) != 0 ||
        ( type != SOCK_STREAM && type != SOCK_DGRAM ) )
    {
        return( MBEDTLS_ERR_NET_ACCEPT_FAILED );
    }

    if( type == SOCK_STREAM )
    {
        /* TCP: actual accept() */
        ret = client_ctx->fd = (int) accept( bind_ctx->fd,
                                             (struct sockaddr *) &client_addr, &n );
    }
    else
    {
        /* UDP: wait for a message, but keep it in the queue */
        char buf[1] = { 0 };

        ret = (int) recvfrom( bind_ctx->fd, buf, sizeof( buf ), MSG_PEEK,
                        (struct sockaddr *) &client_addr, &n );

#if defined(_WIN32)
        if( ret == SOCKET_ERROR &&
            WSAGetLastError() == WSAEMSGSIZE )
        {
            /* We know buf is too small, thanks, just peeking here */
            ret = 0;
        }
#endif
    }
d403 2
a404 61
    if( ret < 0 )
    {
        if( net_would_block( bind_ctx ) != 0 )
            return( MBEDTLS_ERR_SSL_WANT_READ );

        return( MBEDTLS_ERR_NET_ACCEPT_FAILED );
    }

    /* UDP: hijack the listening socket to communicate with the client,
     * then bind a new socket to accept new connections */
    if( type != SOCK_STREAM )
    {
        struct sockaddr_storage local_addr;
        int one = 1;

        if( connect( bind_ctx->fd, (struct sockaddr *) &client_addr, n ) != 0 )
            return( MBEDTLS_ERR_NET_ACCEPT_FAILED );

        client_ctx->fd = bind_ctx->fd;
        bind_ctx->fd   = -1; /* In case we exit early */

        n = sizeof( struct sockaddr_storage );
        if( getsockname( client_ctx->fd,
                         (struct sockaddr *) &local_addr, &n ) != 0 ||
            ( bind_ctx->fd = (int) socket( local_addr.ss_family,
                                           SOCK_DGRAM, IPPROTO_UDP ) ) < 0 ||
            setsockopt( bind_ctx->fd, SOL_SOCKET, SO_REUSEADDR,
                        (const char *) &one, sizeof( one ) ) != 0 )
        {
            return( MBEDTLS_ERR_NET_SOCKET_FAILED );
        }

        if( bind( bind_ctx->fd, (struct sockaddr *) &local_addr, n ) != 0 )
        {
            return( MBEDTLS_ERR_NET_BIND_FAILED );
        }
    }

    if( client_ip != NULL )
    {
        if( client_addr.ss_family == AF_INET )
        {
            struct sockaddr_in *addr4 = (struct sockaddr_in *) &client_addr;
            *ip_len = sizeof( addr4->sin_addr.s_addr );

            if( buf_size < *ip_len )
                return( MBEDTLS_ERR_NET_BUFFER_TOO_SMALL );

            memcpy( client_ip, &addr4->sin_addr.s_addr, *ip_len );
        }
        else
        {
            struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *) &client_addr;
            *ip_len = sizeof( addr6->sin6_addr.s6_addr );

            if( buf_size < *ip_len )
                return( MBEDTLS_ERR_NET_BUFFER_TOO_SMALL );

            memcpy( client_ip, &addr6->sin6_addr.s6_addr, *ip_len);
        }
    }
d406 1
a406 1
    return( 0 );
d412 1
a412 1
int mbedtls_net_set_block( mbedtls_net_context *ctx )
d414 3
a416 7
#if ( defined(_WIN32) || defined(_WIN32_WCE) ) && !defined(EFIX64) && \
    !defined(EFI32)
    u_long n = 0;
    return( ioctlsocket( ctx->fd, FIONBIO, &n ) );
#else
    return( fcntl( ctx->fd, F_SETFL, fcntl( ctx->fd, F_GETFL ) & ~O_NONBLOCK ) );
#endif
d419 1
a419 1
int mbedtls_net_set_nonblock( mbedtls_net_context *ctx )
d421 3
a423 7
#if ( defined(_WIN32) || defined(_WIN32_WCE) ) && !defined(EFIX64) && \
    !defined(EFI32)
    u_long n = 1;
    return( ioctlsocket( ctx->fd, FIONBIO, &n ) );
#else
    return( fcntl( ctx->fd, F_SETFL, fcntl( ctx->fd, F_GETFL ) | O_NONBLOCK ) );
#endif
d429 1
a429 1
void mbedtls_net_usleep( unsigned long usec )
d431 4
a434 13
#if defined(_WIN32)
    Sleep( ( usec + 999 ) / 1000 );
#else
    struct timeval tv;
    tv.tv_sec  = usec / 1000000;
#if defined(__unix__) || defined(__unix) || \
    ( defined(__APPLE__) && defined(__MACH__) )
    tv.tv_usec = (suseconds_t) usec % 1000000;
#else
    tv.tv_usec = usec % 1000000;
#endif
    select( 0, NULL, NULL, NULL, &tv );
#endif
d440 1
a440 1
int mbedtls_net_recv( void *ctx, unsigned char *buf, size_t len )
d442 2
a443 20
    int ret;
    int fd = ((mbedtls_net_context *) ctx)->fd;

    if( fd < 0 )
        return( MBEDTLS_ERR_NET_INVALID_CONTEXT );

    ret = (int) read( fd, buf, len );

    if( ret < 0 )
    {
        if( net_would_block( ctx ) != 0 )
            return( MBEDTLS_ERR_SSL_WANT_READ );

#if ( defined(_WIN32) || defined(_WIN32_WCE) ) && !defined(EFIX64) && \
    !defined(EFI32)
        if( WSAGetLastError() == WSAECONNRESET )
            return( MBEDTLS_ERR_NET_CONN_RESET );
#else
        if( errno == EPIPE || errno == ECONNRESET )
            return( MBEDTLS_ERR_NET_CONN_RESET );
d445 23
a467 3
        if( errno == EINTR )
            return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
d469 2
a470 2
        return( MBEDTLS_ERR_NET_RECV_FAILED );
    }
d472 1
a472 1
    return( ret );
d478 2
a479 2
int mbedtls_net_recv_timeout( void *ctx, unsigned char *buf, size_t len,
                      uint32_t timeout )
d481 30
a510 30
    int ret;
    struct timeval tv;
    fd_set read_fds;
    int fd = ((mbedtls_net_context *) ctx)->fd;

    if( fd < 0 )
        return( MBEDTLS_ERR_NET_INVALID_CONTEXT );

    FD_ZERO( &read_fds );
    FD_SET( fd, &read_fds );

    tv.tv_sec  = timeout / 1000;
    tv.tv_usec = ( timeout % 1000 ) * 1000;

    ret = select( fd + 1, &read_fds, NULL, NULL, timeout == 0 ? NULL : &tv );

    /* Zero fds ready means we timed out */
    if( ret == 0 )
        return( MBEDTLS_ERR_SSL_TIMEOUT );

    if( ret < 0 )
    {
#if ( defined(_WIN32) || defined(_WIN32_WCE) ) && !defined(EFIX64) && \
    !defined(EFI32)
        if( WSAGetLastError() == WSAEINTR )
            return( MBEDTLS_ERR_SSL_WANT_READ );
#else
        if( errno == EINTR )
            return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
d512 2
a513 2
        return( MBEDTLS_ERR_NET_RECV_FAILED );
    }
d515 2
a516 2
    /* This call will not block */
    return( mbedtls_net_recv( ctx, buf, len ) );
d522 1
a522 1
int mbedtls_net_send( void *ctx, const unsigned char *buf, size_t len )
d524 2
a525 7
    int ret;
    int fd = ((mbedtls_net_context *) ctx)->fd;

    if( fd < 0 )
        return( MBEDTLS_ERR_NET_INVALID_CONTEXT );

    ret = (int) write( fd, buf, len );
d527 23
a549 16
    if( ret < 0 )
    {
        if( net_would_block( ctx ) != 0 )
            return( MBEDTLS_ERR_SSL_WANT_WRITE );

#if ( defined(_WIN32) || defined(_WIN32_WCE) ) && !defined(EFIX64) && \
    !defined(EFI32)
        if( WSAGetLastError() == WSAECONNRESET )
            return( MBEDTLS_ERR_NET_CONN_RESET );
#else
        if( errno == EPIPE || errno == ECONNRESET )
            return( MBEDTLS_ERR_NET_CONN_RESET );

        if( errno == EINTR )
            return( MBEDTLS_ERR_SSL_WANT_WRITE );
#endif
d551 2
a552 2
        return( MBEDTLS_ERR_NET_SEND_FAILED );
    }
d554 1
a554 1
    return( ret );
d560 1
a560 1
void mbedtls_net_free( mbedtls_net_context *ctx )
d562 4
a565 2
    if( ctx->fd == -1 )
        return;
d567 2
a568 2
    shutdown( ctx->fd, 2 );
    close( ctx->fd );
d570 1
a570 1
    ctx->fd = -1;
@


1.1.1.1
log
@Import of mbedTLS library
This is release 2.8.0 direct from ARM, with the files rearranged as a standard RISC OS component.
@
text
@@
