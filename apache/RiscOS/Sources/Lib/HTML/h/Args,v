head	1.1;
access;
symbols
	dellis_autobuild_BaseSW:1.1
	dcotton_autobuild_BaseSW:1.1
	dcotton_Spin_Merge:1.1.1.1
	HTML-0_02:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_NC2_Generic:1.1.1.1
	afrost_Funai01-33:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.03.18.12.18.22;	author jsmith;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.12.18.22;	author jsmith;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef __HTML_Args_h
#define __HTML_Args_h

#ifndef __Desk_DeskMem_h
	#include "Desk.DeskMem.h"
#endif


int	HTML_Args_GetEscapedLength( const char* in);
/*
Returns length of 'in' when non alpha-numeric chars are escaped.
Returned length does /not/ include terminating 0.
 */

char*	HTML_Args_GenerateEscapedTextAlloc( const char* in);
/*
Encodes 'in' with non-alnum chars encoded as '\xx'. Allocates buffer for
encoded text using Desk_DeskMem.
 */

void	HTML_Args_CatEscapedTextToBuffer( Desk_deskmem_buffer* buffer, const char* in);
/*
Puts escaped text at end of string in 'buffer'.
 */

void	HTML_Args_GenerateEscapedText( char* buffer, int bufflen, const char* in);
/*
Fills 'buffer' with escaped version of 'in'. In debug builds, a
Desk_Debug_Assert is done to ensure that the buffer is big enough.

bufflen is size of buffer pointed to by 'buffer'. Note that this should
be 1+any value returned by HTML_Args_GetEscapedLength.
 */


void	HTML_Args_ReplaceEscapedText( char *in);
/*
On entry, 'in' points to HTML string with escape sequencies. 

On exit, all html escape sequencies up to any '&' are evaluated, and the
resulting string (which will be either the same length ot shorter than
'in' on entry) terminated with a '\0'.

Eg:

'qwerty&poiu'	-> 'querty' <0> 'poiu'
'qwer\32&poiu'	-> 'qwer ' <0> '2&poiu'
 */

typedef struct	{
	char*	name;
	char*	value;
	}
	HTML_Args_variable;
/*
Info for a single variable.
 */


typedef struct	{
	int			num;
	HTML_Args_variable*	vars;
	}
	HTML_Args_variablelist;
/*
Contains info on all variables in a HTML 'get' form command.
 */

void	HTML_Args_FindHTMLVariables2( HTML_Args_variablelist* list, char* string);
/*
Makes 'list' contain info on all variables in 'string', typically from a
'post' form.

On entry, 'string' should point to a HTML argument list from a form. All
escape sequencies in 'string' are evaluated (so string is changed), and
'list' is set up with pointers into 'string'.

Note that list->vars is allocated with Desk_DeskMem_, so will need
freeing after use - use HTML_Args_FreeHTMLVariables() to do this.	
 */


void	HTML_Args_FindHTMLVariables( HTML_Args_variablelist* list, char* string);
/*
As HTML_Args_FindHTMLVariables, but only look at string after the first
'?' character. For use with 'get' forms.
 */


void	HTML_Args_FreeHTMLVariables( HTML_Args_variablelist* list);
/*
Frees memory allocated by HTML_Args_FindHTMLVariables() when making
'list'.
 */


void	HTML_Args_CheckArgs( int start, HTML_Args_variablelist* vars, ...);
/*
Checks that the argument names in 'vars', starting from number 'start',
match the list of strings specified in the stdargs (terminated by NULL
or "").

If there aren't enough vars to match, or a non-match is found, a
Desk_Error2 is raised.
 */


void	HTML_Args_CheckArgs2( HTML_Args_variablelist* vars, ...);
/*
As HTML_Args_CheckArgs, but isn't order-dependant.
 */

HTML_Args_variable*	HTML_Args_FindVar( HTML_Args_variablelist* vars, const char* name, Desk_bool caseinsensitive);
/*
Returns pointer to var matching 'name' or raises an Error2 if not found.
 */

HTML_Args_variable*	HTML_Args_FindPossibleVar( HTML_Args_variablelist* vars, const char* name, Desk_bool caseinsensitive);
/*
As HTML_Args_FindVar, but returns NULL if not found.
 */

#endif
@


1.1.1.1
log
@Initial import of HTML library
@
text
@@
