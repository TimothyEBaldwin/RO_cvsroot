head	1.1;
access;
symbols
	dellis_autobuild_BaseSW:1.1
	dcotton_autobuild_BaseSW:1.1
	dcotton_Spin_Merge:1.1.1.1
	HTML-0_02:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_NC2_Generic:1.1.1.1
	afrost_Funai01-33:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.03.18.12.18.23;	author jsmith;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.18.12.18.23;	author jsmith;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <ctype.h>
#include <string.h>

#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.DeskMem.h"

#include "HTML.Args.h"



void	HTML_Args_ReplaceEscapedText( char *in)
	{
	char*	out;
	
	for ( out=in; *in && *in!='&'; out++)	{
		
		Desk_Debug_Assert( out<=in);
		
		if ( in[0]=='%' && isxdigit( in[1]) && isxdigit( in[2]))	{
			
			char*	base16 = "0123456789abcdef";
			int	hi, lo;
			
			Desk_Debug_Assert( strchr( base16, tolower( in[1])));
			Desk_Debug_Assert( strchr( base16, tolower( in[2])));
			
			hi = strchr( base16, tolower( in[1])) - base16;
			lo = strchr( base16, tolower( in[2])) - base16;
			
			*out = (hi<<4) + lo;
			in += 3;
			}
		
		else if ( in[0]=='+')	{
			*out = ' ';
			in++;
			}
		
		else	{
			*out = *in;
			in++;
			}
		}
	
	*out = 0;
	}








void	HTML_Args_FindHTMLVariables2( HTML_Args_variablelist* list, char* string)
	{
	char*	s;
	int	i;
	
	Desk_Debug_Printf( Desk_error_PLACE "HTML_Args_FindHTMLVariables called for string '%s'\n", string);
	
	if ( string[0]==0)	{
		list->num	= 0;
		list->vars	= NULL;
		return;
		}
	
	/* Assume number of variables is number of '&' in string	*/
	for	(
		list->num = 0, s=string;
		s;
		list->num++, s=strchr( s+1, '&')
		)
		;
	
	Desk_Debug_Printf( Desk_error_PLACE "Num args=%i\n", list->num);
	
	list->vars = Desk_DeskMem_CallocType( list->num, HTML_Args_variable);
	
	for	(
		i=0, s=string;
		i<list->num;
		i++
		)
		{
		char*	next;
		char*	equals = strchr( s, '=');
		
		next = strchr( s, '&');
		if (next)	next+=1;
		
		Desk_Debug_Printf( Desk_error_PLACE "string=0x%p, next=0x%p, equals=0x%p, s=0x%p\n", string, next, equals, s);
		
		if (!equals || (next && (equals>=next)))	{
			Desk_Debug_Printf( Desk_error_PLACE "Couldn't find '=' in params '%s'\n", s+1);
			Desk_Error2_HandleTextf( "Couldn't find '=' in params");
			}
			
		Desk_Debug_Assert( s);
		
		*equals = 0;
		
		HTML_Args_ReplaceEscapedText( s);
		HTML_Args_ReplaceEscapedText( equals+1);
		
		list->vars[ i].name	= s;
		list->vars[ i].value	= equals+1;
		
		Desk_Debug_Printf( Desk_error_PLACE "var %i is name '%s', value '%s'\n", i, list->vars[ i].name, list->vars[ i].value);
		
		s = next;
		}
	
	}





void	HTML_Args_FindHTMLVariables( HTML_Args_variablelist* list, char* string)
	{
	string = strchr( string, '?');
	if ( !string)	HTML_Args_FindHTMLVariables2( list, "");
	else		HTML_Args_FindHTMLVariables2( list, string+1);
	}
@


1.1.1.1
log
@Initial import of HTML library
@
text
@@
