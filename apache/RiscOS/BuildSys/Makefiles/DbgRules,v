head	1.3;
access;
symbols
	BuildSys-7_30:1.3
	BuildSys-7_29:1.3
	BuildSys-7_28:1.3
	BuildSys-7_27:1.3
	BuildSys-7_26:1.3
	BuildSys-7_25:1.3
	BuildSys-7_24:1.3
	BuildSys-7_23:1.3
	BuildSys-7_22:1.3
	BuildSys-7_21:1.3
	BuildSys-7_20:1.3
	BuildSys-7_19:1.3
	BuildSys-7_18:1.3
	BuildSys-7_17:1.3
	BuildSys-7_16:1.3
	BuildSys-7_15:1.3
	BuildSys-7_14:1.3
	BuildSys-7_13:1.3
	BuildSys-7_12:1.3
	BuildSys-7_11:1.3
	BuildSys-7_10:1.3
	BuildSys-7_09:1.3
	BuildSys-6_00-1_142_2_10:1.3
	BuildSys-7_08:1.3
	BuildSys-7_07:1.3
	BuildSys-7_06:1.3
	BuildSys-7_05:1.3
	BuildSys-6_00-1_142_2_9:1.3
	BuildSys-7_04:1.3
	BuildSys-7_03:1.3
	BuildSys-7_02:1.3
	BuildSys-7_01:1.3
	BuildSys-7_00:1.3
	BuildSys-6_99:1.3
	BuildSys-6_98:1.3
	BuildSys-6_97:1.3
	BuildSys-6_96:1.3
	BuildSys-6_95:1.3
	BuildSys-6_94:1.3
	BuildSys-6_93:1.3
	BuildSys-6_92:1.3
	BuildSys-6_91:1.3
	BuildSys-6_90:1.3
	BuildSys-6_89:1.3
	BuildSys-6_81-1:1.3
	BuildSys-6_88:1.3
	BuildSys-6_87:1.3
	BuildSys-6_86:1.3
	BuildSys-6_85:1.3
	BuildSys-6_84:1.3
	BuildSys-6_83:1.3
	BuildSys-6_82:1.3
	BuildSys-6_81:1.3
	BuildSys-6_80:1.3
	BuildSys-6_79:1.3
	BuildSys-6_78:1.3
	BuildSys-6_77:1.3
	BuildSys-6_76:1.3
	BuildSys-6_75:1.3
	BuildSys-6_74:1.3
	BuildSys-6_73:1.3
	BuildSys-6_72:1.3
	BuildSys-6_71:1.3
	BuildSys-6_70:1.3
	BuildSys-6_69:1.3
	BuildSys-6_68:1.3
	BuildSys-6_67:1.3
	BuildSys-6_66-1:1.3
	BuildSys-6_66:1.3
	BuildSys-6_65:1.3
	BuildSys-6_00-1_142_2_8:1.3
	BuildSys-6_00-1_142_2_7:1.3
	BuildSys-6_00-1_142_2_6:1.3
	BuildSys-6_64:1.3
	BuildSys-6_63:1.3
	BuildSys-6_62:1.3
	BuildSys-6_61:1.3
	BuildSys-6_60:1.3
	BuildSys-6_59:1.3
	BuildSys-6_58:1.3
	BuildSys-6_57:1.3
	BuildSys-6_56:1.3
	BuildSys-6_55:1.3
	BuildSys-6_54:1.3
	BuildSys-6_53:1.3
	BuildSys-6_00-1_142_2_5:1.3
	BuildSys-6_52:1.3
	BuildSys-6_51:1.3
	BuildSys-6_50:1.3
	BuildSys-6_49:1.3
	BuildSys-6_48:1.3
	BuildSys-6_47:1.3
	BuildSys-6_46:1.3
	BuildSys-6_45:1.3
	BuildSys-6_44:1.3
	BuildSys-6_43:1.3
	BuildSys-6_42:1.3
	BuildSys-6_41:1.3
	BuildSys-6_40:1.3
	BuildSys-6_39:1.3
	BuildSys-6_38:1.3
	BuildSys-6_00-1_142_2_4:1.3
	BuildSys-6_37:1.3
	BuildSys-6_36:1.3
	BuildSys-6_35:1.3
	BuildSys-6_34:1.3
	BuildSys-6_33:1.3
	BuildSys-6_32:1.3
	BuildSys-6_31:1.3
	BuildSys-6_30:1.3
	BuildSys-6_29:1.3
	BuildSys-6_28:1.3
	BuildSys-6_27:1.3
	BuildSys-6_26:1.3
	BuildSys-6_25:1.3
	BuildSys-6_24:1.3
	BuildSys-6_23:1.3
	BuildSys-6_22:1.3
	BuildSys-6_21:1.3
	BuildSys-6_20:1.3
	BuildSys-6_00-1_142_2_3:1.3
	BuildSys-6_19:1.3
	BuildSys-6_18:1.3
	BuildSys-6_17:1.3
	BuildSys-6_16:1.3
	BuildSys-6_15:1.3
	BuildSys-6_14:1.3
	BuildSys-6_13:1.3
	BuildSys-6_12:1.3
	BuildSys-6_00-1_142_2_2:1.3
	BuildSys-6_11:1.3
	BuildSys-6_10:1.3
	BuildSys-6_09:1.3
	BuildSys-6_08:1.3
	BuildSys-6_07:1.3
	BuildSys-6_06:1.3
	BuildSys-6_05:1.3
	BuildSys-6_04:1.3
	BuildSys-6_03:1.3
	BuildSys-6_02:1.3
	BuildSys-6_01:1.3
	BuildSys-6_00-1_142_2_1:1.3
	RPiFreeze:1.3.0.2
	BuildSys-6_00:1.3
	BuildSys-5_99:1.3
	BuildSys-5_98:1.3
	BuildSys-5_97:1.3
	BuildSys-5_96:1.3
	BuildSys-5_95:1.3
	BuildSys-5_94:1.3
	BuildSys-5_93:1.3
	BuildSys-5_92:1.3
	BuildSys-5_91:1.3
	BuildSys-5_90:1.3
	BuildSys-5_89:1.3
	BuildSys-5_88:1.3
	BuildSys-5_87:1.3
	BuildSys-5_86:1.3
	BuildSys-5_85:1.3
	BuildSys-5_84:1.3
	BuildSys-5_83:1.3
	BuildSys-5_82:1.3
	BuildSys-5_81:1.3
	BuildSys-5_80:1.3
	BuildSys-5_79:1.3
	BuildSys-5_78:1.3
	BuildSys-5_77:1.3
	BuildSys-5_76:1.3
	BuildSys-5_75:1.3
	BuildSys-5_74:1.3
	BuildSys-5_73:1.3
	BuildSys-5_72:1.3
	BuildSys-5_71:1.3
	BuildSys-5_70:1.3
	BuildSys-5_69:1.3
	BuildSys-5_68:1.3
	BuildSys-5_67:1.3
	BuildSys-5_66:1.3
	BuildSys-5_65:1.3
	BuildSys-5_64:1.3
	BuildSys-5_63:1.3
	BuildSys-5_62:1.3
	BuildSys-5_61:1.3
	BuildSys-5_60:1.3
	BuildSys-5_59:1.3
	BuildSys-5_58:1.3
	BuildSys-5_57:1.3
	BuildSys-5_56:1.3
	BuildSys-5_55:1.3
	BuildSys-5_54:1.3
	BuildSys-5_53:1.3
	BuildSys-5_52:1.3
	BuildSys-5_51:1.3
	BuildSys-5_50:1.3
	BuildSys-5_49:1.3
	BuildSys-5_48:1.3
	BuildSys-5_47:1.3
	BuildSys-5_46:1.3
	BuildSys-5_45:1.3
	BuildSys-5_44:1.3
	BuildSys-5_43:1.3
	BuildSys-5_42:1.3
	BuildSys-5_41:1.3
	BuildSys-5_40:1.3
	BuildSys-5_39:1.3
	BuildSys-5_38:1.3
	BuildSys-5_37:1.3
	BuildSys-5_36:1.3
	BuildSys-5_35:1.3
	BuildSys-5_34:1.3
	BuildSys-5_33:1.3
	BuildSys-5_32:1.3
	BuildSys-5_31:1.3
	BuildSys-5_30:1.3
	BuildSys-5_29:1.3
	BuildSys-5_28:1.3
	BuildSys-5_27:1.3
	BuildSys-5_26:1.3
	BuildSys-5_25:1.3
	BuildSys-5_24:1.3
	BuildSys-5_23:1.3
	BuildSys-5_22:1.3
	BuildSys-5_21:1.3
	BuildSys-5_20:1.3
	BuildSys-5_19:1.3
	BuildSys-5_18:1.3
	BuildSys-5_17:1.3
	BuildSys-5_16:1.3
	BuildSys-5_15:1.3
	BuildSys-5_14:1.3
	BuildSys-5_13:1.3
	BuildSys-5_12:1.3
	BuildSys-5_11:1.2
	BuildSys-5_10:1.2
	BuildSys-5_09:1.2
	BuildSys-5_08:1.2
	BuildSys-5_07:1.2
	BuildSys-5_06:1.2
	BuildSys-5_05:1.2
	BuildSys-5_04:1.2
	BuildSys-5_03:1.2
	BuildSys-5_02:1.2
	BuildSys-5_01:1.2
	BuildSys-5_00:1.1
	BuildSys-4_99:1.1
	BuildSys-4_98:1.1
	BuildSys-4_97:1.1
	BuildSys-4_96:1.1
	BuildSys-4_95:1.1
	BuildSys-4_94:1.1
	BuildSys-4_93:1.1
	BuildSys-4_92:1.1
	BuildSys-4_91:1.1
	BuildSys-4_90:1.1
	BuildSys-4_89:1.1
	BuildSys-4_88:1.1
	BuildSys-4_87:1.1
	BuildSys-4_86:1.1
	BuildSys-4_85:1.1
	BuildSys-4_84:1.1
	BuildSys-4_83:1.1
	BuildSys-4_82:1.1
	BuildSys-4_81:1.1
	BuildSys-4_80:1.1
	BuildSys-4_79:1.1
	BuildSys-4_78:1.1
	BuildSys-4_77:1.1
	BuildSys-4_76:1.1
	BuildSys-4_75:1.1
	BuildSys-4_74:1.1
	BuildSys-4_73:1.1
	BuildSys-4_72:1.1
	BuildSys-4_71:1.1
	BuildSys-4_70:1.1
	BuildSys-4_69:1.1
	BuildSys-4_68:1.1
	BuildSys-4_67:1.1
	BuildSys-4_66:1.1
	BuildSys-4_65:1.1
	BuildSys-4_64:1.1
	BuildSys-4_63:1.1
	BuildSys-4_62:1.1
	Batch4:1.1;
locks; strict;
comment	@# @;


1.3
date	2011.03.31.00.04.06;	author bavison;	state Exp;
branches;
next	1.2;
commitid	BfewXnm4kl3lOVdv;

1.2
date	2010.05.19.14.47.58;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.14.21.29.37;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Improvements to shared makefiles
Detail:
  * Some subtle bugs can be caused by including shared makefiles in the
    wrong order. To try to prevent further problems, and simplify main
    makefiles at the same time, CApp, CLibrary and CModule now include the
    makefiles they depend upon themselves, in the correct order: generally
    speaking, all macro (re)definitions should be before rule definitions.
  * Added sentry macro definitions to each makefile. These can be used to
    avoid repeated inclusion of makefiles - particularly important now that
    CApp, CLibrary and CModule do additional includes. This removes the
    majority of cases where amu produced warnings about multiple inclusion;
    a few components remain where this is still the case, but these
    warnings are harmless. If they bother you, simply remove the
    now-superfluous include statements from the relevant main makefile.
  * Created a CUtil shared makefile, for building transient utilities. The
    'C' in the name is more for consistency with CApp/CLibrary/CModule than
    anything to do with the 'C' language, since all of these makefiles work
    equally well for assembler and 'C' - the 'C' is for historic reasons.
  * Tweaked the debug rules in CApp to avoid harmless but annoying linker
    warnings about stubs being included twice.
  * Added several new default switches to ASFLAGS. These enable us to start
    making assembler source files work under a cross-assembler, because
    statements like
        GET  Hdr:Macros
        GET  Hdr:Machine.<Machine>
    are not portable, and tweaking the cross-assembler to understand these
    types of constructs would not be pretty. Instead, with the extra
    command line switches now introduced, you can use
        GET  Macros
        GET  Machine/$Machine
Admin:
  Tested in a ROM build

Version 5.12. Tagged as 'BuildSys-5_12'
@
text
@# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Makefile fragment for defining standard debug rules for various tools

INCLUDED_DBGRULES = YES

#
# $Id: DbgRules,v 1.2 2010/05/19 14:47:58 bavison Exp $
#
#

CDFLAGS   += -gflv
C++DFLAGS += +g
ASDFLAGS  += -G
LDDFLAGS  += -d

.SUFFIXES: .i .od .odz .s .c .h .c++ .cpp

# C source files -> object files
.c.od:;         ${CC} $(filter-out ${C_NO_FNAMES},${CFLAGS}) ${CDFLAGS} -o $@@ $<
.c.odz:;        ${CC} $(filter-out ${C_NO_FNAMES},${CFLAGS}) ${CDFLAGS} ${C_MODULE} -o $@@ $<
.c.i:;          ${CPREPRO} ${CFLAGS} -C $< > $@@

# C++ source files -> object files
.c++.od:;       ${C++} $(filter-out ${C_NO_FNAMES},${C++FLAGS}) ${C++DFLAGS} -o $@@ $<
.cpp.od:;       ${C++} $(filter-out ${C_NO_FNAMES},${C++FLAGS}) ${C++DFLAGS} -o $@@ $<
.c++.odz:;      ${C++} $(filter-out ${C_NO_FNAMES},${C++FLAGS}) ${C++DFLAGS} ${C_MODULE} -o $@@ $<
.cpp.odz:;      ${C++} $(filter-out ${C_NO_FNAMES},${C++FLAGS}) ${C++DFLAGS} ${C_MODULE} -o $@@ $<
.c++.i:;        ${CPREPRO} ${C++FLAGS} -C $< > $@@
.cpp.i:;        ${CPREPRO} ${C++FLAGS} -C $< > $@@

# Assembler source files -> object files
.s.od:;         ${AS} ${ASFLAGS} ${ASDFLAGS} -o $@@ $<
.s.odz:;        ${AS} ${ASFLAGS} ${ASDFLAGS} -pd "zM SETL {TRUE}" -o $@@ $<
.s.i:;          @@${NOP}


EOFSTDMAKEFILE=$Id: DbgRules,v 1.2 2010/05/19 14:47:58 bavison Exp $
# EOF
@


1.2
log
@  Changes to facilitate platform independence.

Detail:
 CApp:
  * New variable CLEAN_DEPEND is now the preferred way to specify additional
    clean actions because GNU make doesn't have an equivalent to amu's :: rules
  * Can now indicate preference to use C++ linker options using LINK_TYPE
  * Gains install phase support:
    + INSTALLAPPFILES lists the files to be copied, effectively specified
      relative to LocalRes$Path
    + Adopted INSTTYPE concept from DDE makefiles for cases where executable
      and support files need to be installed to different locations
    + Unusual cases can override this implementation using CUSTOMINSTALLAPP
      and/or CUSTOMINSTALLTOOL

  CLibrary:
  * New variable CLEAN_DEPEND is now the preferred way to specify additional
    clean actions because GNU make doesn't have an equivalent to amu's :: rules
  * -o is no longer a mandatory argument to libfile - now in ARFLAGS rather
    than used explicitly

  DbgRules / StdRules:
  * Macroised some Norcroft-specific features

  HostTools:
  * Clean phase support was incomplete

  StdTools:
  * A few additional tool definitions
  * Added macro definitions for common C options
  * C's enable-warnings and suppress-function-name-embedding options now on by
    default because they're usually (maybe even universally?) used - it won't
    hurt if they're specified again by existing makefiles
  * C++ now has equivalent INCLUDES and DEFINES variables, and the standard C++
    headers are on the default include path
  * SEP is defined as the directory separator character and can be used from
    top-level makefiles in a platform-independent way

  Functionally equivalent versions of the following makefile fragments
  have been developed so far for executing on a Posix build host:
    AppLibs, CApp, CLibrary, DbgRules, HostTools, StdRules, StdTools
  These suport native compilers (when APCS=Host) and cross-compilers,
  and GCC (when TOOLCHAIN=GNU) and Norcroft toolchains - typically these
  environment variables would be selected by running an Env file.

Admin:
  Tested by building as many as possible of the DDE components on RISC OS
  and on Linux, using native and cross compilers, and using Norcroft and
  GNU toolchains.

Version 5.01. Tagged as 'BuildSys-5_01'
@
text
@d16 3
d20 1
a20 1
# $Id: DbgRules,v 1.1 2008/10/14 21:29:37 bavison Exp $
d50 1
a50 1
EOFSTDMAKEFILE=$Id: DbgRules,v 1.1 2008/10/14 21:29:37 bavison Exp $
@


1.1
log
@Clean reimport of the build environment directories.
This represents the version released in the Batch 4 "bbe" tarfiles.
Tagged as 'Batch4'
@
text
@d17 1
a17 1
# $Id: DbgRules,v 1.2 2007/07/02 18:30:10 bavison Exp $
d29 3
a31 3
.c.od:;         ${CC} $(filter-out -ff,${CFLAGS}) ${CDFLAGS} -o $@@ $<
.c.odz:;        ${CC} $(filter-out -ff,${CFLAGS}) ${CDFLAGS} -zM -o $@@ $<
.c.i:;          ${CC} ${CFLAGS} -E -C $< > $@@
d34 6
a39 6
.c++.od:;       ${C++} ${C++FLAGS} ${C++DFLAGS} -o $@@ $<
.cpp.od:;       ${C++} ${C++FLAGS} ${C++DFLAGS} -o $@@ $<
.c++.odz:;      ${C++} ${C++FLAGS} ${C++DFLAGS} -zM -o $@@ $<
.cpp.odz:;      ${C++} ${C++FLAGS} ${C++DFLAGS} -zM -o $@@ $<
.c++.i:;        ${C++} ${C++FLAGS} -E -C $< > $@@
.cpp.i:;        ${C++} ${C++FLAGS} -E -C $< > $@@
d47 1
a47 1
EOFSTDMAKEFILE=$Id: DbgRules,v 1.2 2007/07/02 18:30:10 bavison Exp $
@

