head	1.9;
access;
symbols
	BuildSys-7_30:1.9
	BuildSys-7_29:1.9
	BuildSys-7_28:1.9
	BuildSys-7_27:1.9
	BuildSys-7_26:1.9
	BuildSys-7_25:1.9
	BuildSys-7_24:1.9
	BuildSys-7_23:1.9
	BuildSys-7_22:1.9
	BuildSys-7_21:1.9
	BuildSys-7_20:1.9
	BuildSys-7_19:1.9
	BuildSys-7_18:1.9
	BuildSys-7_17:1.9
	BuildSys-7_16:1.9
	BuildSys-7_15:1.9
	BuildSys-7_14:1.8
	BuildSys-7_13:1.8
	BuildSys-7_12:1.8
	BuildSys-7_11:1.8
	BuildSys-7_10:1.8
	BuildSys-7_09:1.8
	BuildSys-6_00-1_142_2_10:1.5.2.4
	BuildSys-7_08:1.8
	BuildSys-7_07:1.8
	BuildSys-7_06:1.8
	BuildSys-7_05:1.8
	BuildSys-6_00-1_142_2_9:1.5.2.4
	BuildSys-7_04:1.8
	BuildSys-7_03:1.8
	BuildSys-7_02:1.8
	BuildSys-7_01:1.8
	BuildSys-7_00:1.8
	BuildSys-6_99:1.8
	BuildSys-6_98:1.8
	BuildSys-6_97:1.8
	BuildSys-6_96:1.8
	BuildSys-6_95:1.8
	BuildSys-6_94:1.8
	BuildSys-6_93:1.8
	BuildSys-6_92:1.8
	BuildSys-6_91:1.8
	BuildSys-6_90:1.8
	BuildSys-6_89:1.8
	BuildSys-6_81-1:1.8
	BuildSys-6_88:1.8
	BuildSys-6_87:1.8
	BuildSys-6_86:1.8
	BuildSys-6_85:1.8
	BuildSys-6_84:1.8
	BuildSys-6_83:1.8
	BuildSys-6_82:1.8
	BuildSys-6_81:1.8
	BuildSys-6_80:1.8
	BuildSys-6_79:1.8
	BuildSys-6_78:1.8
	BuildSys-6_77:1.8
	BuildSys-6_76:1.8
	BuildSys-6_75:1.8
	BuildSys-6_74:1.8
	BuildSys-6_73:1.8
	BuildSys-6_72:1.8
	BuildSys-6_71:1.8
	BuildSys-6_70:1.8
	BuildSys-6_69:1.8
	BuildSys-6_68:1.8
	BuildSys-6_67:1.8
	BuildSys-6_66-1:1.8
	BuildSys-6_66:1.8
	BuildSys-6_65:1.8
	BuildSys-6_00-1_142_2_8:1.5.2.3
	BuildSys-6_00-1_142_2_7:1.5.2.3
	BuildSys-6_00-1_142_2_6:1.5.2.3
	BuildSys-6_64:1.8
	BuildSys-6_63:1.8
	BuildSys-6_62:1.7
	BuildSys-6_61:1.7
	BuildSys-6_60:1.7
	BuildSys-6_59:1.6
	BuildSys-6_58:1.6
	BuildSys-6_57:1.6
	BuildSys-6_56:1.6
	BuildSys-6_55:1.6
	BuildSys-6_54:1.6
	BuildSys-6_53:1.6
	BuildSys-6_00-1_142_2_5:1.5.2.2
	BuildSys-6_52:1.6
	BuildSys-6_51:1.6
	BuildSys-6_50:1.6
	BuildSys-6_49:1.6
	BuildSys-6_48:1.6
	BuildSys-6_47:1.6
	BuildSys-6_46:1.6
	BuildSys-6_45:1.6
	BuildSys-6_44:1.6
	BuildSys-6_43:1.6
	BuildSys-6_42:1.6
	BuildSys-6_41:1.6
	BuildSys-6_40:1.6
	BuildSys-6_39:1.6
	BuildSys-6_38:1.6
	BuildSys-6_00-1_142_2_4:1.5.2.1
	BuildSys-6_37:1.6
	BuildSys-6_36:1.6
	BuildSys-6_35:1.6
	BuildSys-6_34:1.6
	BuildSys-6_33:1.6
	BuildSys-6_32:1.6
	BuildSys-6_31:1.5
	BuildSys-6_30:1.5
	BuildSys-6_29:1.5
	BuildSys-6_28:1.5
	BuildSys-6_27:1.5
	BuildSys-6_26:1.5
	BuildSys-6_25:1.5
	BuildSys-6_24:1.5
	BuildSys-6_23:1.5
	BuildSys-6_22:1.5
	BuildSys-6_21:1.5
	BuildSys-6_20:1.5
	BuildSys-6_00-1_142_2_3:1.5
	BuildSys-6_19:1.5
	BuildSys-6_18:1.5
	BuildSys-6_17:1.5
	BuildSys-6_16:1.5
	BuildSys-6_15:1.5
	BuildSys-6_14:1.5
	BuildSys-6_13:1.5
	BuildSys-6_12:1.5
	BuildSys-6_00-1_142_2_2:1.5
	BuildSys-6_11:1.5
	BuildSys-6_10:1.5
	BuildSys-6_09:1.5
	BuildSys-6_08:1.5
	BuildSys-6_07:1.5
	BuildSys-6_06:1.5
	BuildSys-6_05:1.5
	BuildSys-6_04:1.5
	BuildSys-6_03:1.5
	BuildSys-6_02:1.5
	BuildSys-6_01:1.5
	BuildSys-6_00-1_142_2_1:1.5
	RPiFreeze:1.5.0.2
	BuildSys-6_00:1.5
	BuildSys-5_99:1.5
	BuildSys-5_98:1.5
	BuildSys-5_97:1.5
	BuildSys-5_96:1.5
	BuildSys-5_95:1.5
	BuildSys-5_94:1.5
	BuildSys-5_93:1.5
	BuildSys-5_92:1.5
	BuildSys-5_91:1.5
	BuildSys-5_90:1.5
	BuildSys-5_89:1.5
	BuildSys-5_88:1.5
	BuildSys-5_87:1.5
	BuildSys-5_86:1.5
	BuildSys-5_85:1.5
	BuildSys-5_84:1.5
	BuildSys-5_83:1.5
	BuildSys-5_82:1.5
	BuildSys-5_81:1.5
	BuildSys-5_80:1.5
	BuildSys-5_79:1.5
	BuildSys-5_78:1.5
	BuildSys-5_77:1.5
	BuildSys-5_76:1.5
	BuildSys-5_75:1.5
	BuildSys-5_74:1.5
	BuildSys-5_73:1.5
	BuildSys-5_72:1.5
	BuildSys-5_71:1.5
	BuildSys-5_70:1.5
	BuildSys-5_69:1.5
	BuildSys-5_68:1.5
	BuildSys-5_67:1.5
	BuildSys-5_66:1.5
	BuildSys-5_65:1.5
	BuildSys-5_64:1.5
	BuildSys-5_63:1.5
	BuildSys-5_62:1.5
	BuildSys-5_61:1.5
	BuildSys-5_60:1.5
	BuildSys-5_59:1.5
	BuildSys-5_58:1.5
	BuildSys-5_57:1.5
	BuildSys-5_56:1.5
	BuildSys-5_55:1.5
	BuildSys-5_54:1.5
	BuildSys-5_53:1.5
	BuildSys-5_52:1.5
	BuildSys-5_51:1.5
	BuildSys-5_50:1.5
	BuildSys-5_49:1.5
	BuildSys-5_48:1.5
	BuildSys-5_47:1.5
	BuildSys-5_46:1.5
	BuildSys-5_45:1.5
	BuildSys-5_44:1.5
	BuildSys-5_43:1.5
	BuildSys-5_42:1.5
	BuildSys-5_41:1.4
	BuildSys-5_40:1.4
	BuildSys-5_39:1.4
	BuildSys-5_38:1.4
	BuildSys-5_37:1.4
	BuildSys-5_36:1.4
	BuildSys-5_35:1.4
	BuildSys-5_34:1.4
	BuildSys-5_33:1.4
	BuildSys-5_32:1.4
	BuildSys-5_31:1.4
	BuildSys-5_30:1.4
	BuildSys-5_29:1.4
	BuildSys-5_28:1.4
	BuildSys-5_27:1.4
	BuildSys-5_26:1.4
	BuildSys-5_25:1.4
	BuildSys-5_24:1.4
	BuildSys-5_23:1.4
	BuildSys-5_22:1.4
	BuildSys-5_21:1.4
	BuildSys-5_20:1.4
	BuildSys-5_19:1.4
	BuildSys-5_18:1.4
	BuildSys-5_17:1.4
	BuildSys-5_16:1.4
	BuildSys-5_15:1.4
	BuildSys-5_14:1.4
	BuildSys-5_13:1.4
	BuildSys-5_12:1.4
	BuildSys-5_11:1.3
	BuildSys-5_10:1.3
	BuildSys-5_09:1.3
	BuildSys-5_08:1.3
	BuildSys-5_07:1.3
	BuildSys-5_06:1.3
	BuildSys-5_05:1.3
	BuildSys-5_04:1.3
	BuildSys-5_03:1.3
	BuildSys-5_02:1.3
	BuildSys-5_01:1.3
	BuildSys-5_00:1.2
	BuildSys-4_99:1.2
	BuildSys-4_98:1.2
	BuildSys-4_97:1.2
	BuildSys-4_96:1.2
	BuildSys-4_95:1.2
	BuildSys-4_94:1.2
	BuildSys-4_93:1.2
	BuildSys-4_92:1.2
	BuildSys-4_91:1.2
	BuildSys-4_90:1.2
	BuildSys-4_89:1.2
	BuildSys-4_88:1.2
	BuildSys-4_87:1.2
	BuildSys-4_86:1.2
	BuildSys-4_85:1.2
	BuildSys-4_84:1.2
	BuildSys-4_83:1.2
	BuildSys-4_82:1.2
	BuildSys-4_81:1.2
	BuildSys-4_80:1.2
	BuildSys-4_79:1.2
	BuildSys-4_78:1.2
	BuildSys-4_77:1.2
	BuildSys-4_76:1.2
	BuildSys-4_75:1.2
	BuildSys-4_74:1.2
	BuildSys-4_73:1.2
	BuildSys-4_72:1.2
	BuildSys-4_71:1.2
	BuildSys-4_70:1.2
	BuildSys-4_69:1.2
	BuildSys-4_68:1.2
	BuildSys-4_67:1.2
	BuildSys-4_66:1.2
	BuildSys-4_65:1.2
	BuildSys-4_64:1.2
	BuildSys-4_63:1.2
	BuildSys-4_62:1.1
	Batch4:1.1;
locks; strict;
comment	@# @;


1.9
date	2017.09.27.20.28.28;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	t2KCSIxPmU3dlS8A;

1.8
date	2015.01.10.11.56.06;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	MbWl4KX0taVnmt5y;

1.7
date	2014.10.24.12.36.49;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	FCeT0nrCnPiO5sVx;

1.6
date	2013.11.11.00.50.38;	author bavison;	state Exp;
branches;
next	1.5;
commitid	Tr3fHk0Gie15lNcx;

1.5
date	2012.02.05.09.13.26;	author rsprowson;	state Exp;
branches
	1.5.2.1;
next	1.4;
commitid	XCR9w41JK8TYQWRv;

1.4
date	2011.03.31.00.04.06;	author bavison;	state Exp;
branches;
next	1.3;
commitid	BfewXnm4kl3lOVdv;

1.3
date	2010.05.19.14.47.58;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.16.23.55.24;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.14.21.29.37;	author bavison;	state Exp;
branches;
next	;

1.5.2.1
date	2014.02.20.21.02.48;	author rsprowson;	state Exp;
branches;
next	1.5.2.2;
commitid	HvOFwLQ3c6PzNSpx;

1.5.2.2
date	2014.10.12.10.36.30;	author rsprowson;	state Exp;
branches;
next	1.5.2.3;
commitid	tHT6hsrmkNpoOTTx;

1.5.2.3
date	2015.02.12.20.30.56;	author rsprowson;	state Exp;
branches;
next	1.5.2.4;
commitid	joerV7rvwrTd9L9y;

1.5.2.4
date	2017.02.21.08.36.59;	author rsprowson;	state Exp;
branches;
next	;
commitid	yeUPZ9XHdm2zpNGz;


desc
@@


1.9
log
@Add Access+ to the disc image, improve CLibrary makefile
Add Access+ as a utility, called out by the "Local networks" chapter of the User Guide, and missing since RISC OS 3.70 days (despite ShareFS having the functionality).
Add an install target to the CLibrary makefile, this allows the library to be installed somewhere other than the exports directory which is useful for the CTools component for example.

Version 7.15. Tagged as 'BuildSys-7_15'
@
text
@# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Makefile fragment for C and C++ libraries for applications and modules

INCLUDED_CLIBRARY = YES

#
# $Id: CLibrary,v 1.8 2015/01/10 11:56:06 rsprowson Exp $
#
# This makefile provides the following phony targets:
#
#    all_libs  export_hdrs  export_libs  install
#
#
# This fragment uses the following macros set by the master makefile.
#
#
# COMPONENT          (the name of the component)
# TARGET       (opt) (the leafname of the primary target - otherwise ${COMPONENT})
# LIBRARY      (opt) (the leafname of the application library - otherwise ${TARGET})
# LIBRARYZM    (opt) (the leafname of the module library - otherwise ${LIBRARY}zm)
# LIBRARYD     (opt) (the leafname of the debug app library - otherwise ${LIBRARY}d)
# LIBRARYDZM   (opt) (the leafname of the debug module library - otherwise ${LIBRARY}dzm)
# LIBRARIES    (opt) (libraries to build/export - otherwise ${LIBRARY} and ${LIBRARYZM})
# LIBEXT       (opt) (subdir or filename extension for library files - otherwise o)
# LIB_DEPENDS  (opt) (any extra dependencies to assert before making LIBRARIES)
# EXPDIR       (opt) (the target directory - otherwise <Lib$Dir>.${TARGET} or
#                                  for a disc install ${INSTDIR}.${TARGET})
# DIRS         (opt) (stamp object for directory creation - otherwise o._dirs)
# HDRS         (opt) (header files to export, no h. prefix - otherwise ${TARGET})
# ASMHDRS      (opt) (assembly header files to export, no Hdr. prefix - otherwise none)
# OBJS               (object files, no o. or oz. prefixes)
# DBG_OBJS     (opt) (debug build object files, no o. or oz. prefixes - otherwise ${OBJS})
# APP_OBJS     (opt) (release application object files, no o. or oz. prefixes - otherwise ${OBJS})
# APP_DBG_OBJS (opt) (debug application object files, no o. or oz. prefixes - otherwise ${DBG_OBJS})
# MOD_OBJS     (opt) (release module object files, no o. or oz. prefixes - otherwise ${OBJS})
# MOD_DBG_OBJS (opt) (debug module object files, no o. or oz. prefixes - otherwise ${DBG_OBJS})
# CUSTOMLIB    (opt) (set to "custom" to override the application library rule)
# CUSTOMLIBZM  (opt) (set to "custom" to override the module library rule)
# CUSTOMLIBD   (opt) (set to "custom" to override the debug application library rule)
# CUSTOMLIBDZM (opt) (set to "custom" to override the debug module library rule)
#
#
# It relies on the following from the build system:
#
#
# PHASE            (export phase discriminator)
#
#
# It relies on the following generic tool macros from the StdTools makefile
#
#
# CP + CPFLAGS     (copy, cp etc.)
# WIPE + WFLAGS    (recursive delete)
# RM               (non-recursive delete)
# AS + ASFLAGS     (assembler)
# MKDIR            (cdir/mkdir -p)
# ECHO
# AR + ARFLAGS     (libfile/ar)
# TOUCH            (create/touch)
# NOP
#
#
# It relies on the following from the StdRules makefile
#
#
# .c.o  .c.oz  .c++.o  .cpp.o  .c++.oz  .c++.oz  .s.o  .s.oz
#
#
# It relies on the following from the DbgRules makefile
#
#
# CDFLAGS  C++DFLAGS  ASDFLAGS
# .c.od  .c.odz  .c++.od  .cpp.od  .c++.odz  .cpp.odz  .s.od  .s.odz
#
#

LIBDIR        = <Lib$Dir>

TARGET       ?= ${COMPONENT}
LIBRARY      ?= ${TARGET}
LIBRARYZM    ?= ${LIBRARY}zm
LIBRARYD     ?= ${LIBRARY}d
LIBRARYDZM   ?= ${LIBRARY}dzm
LIBRARIES    ?= ${LIBRARYZM} ${LIBRARY}
LIBEXT       ?= o
DIRS         ?= o._dirs
HDRS         ?= ${TARGET}
ASMHDRS      ?=
DBG_OBJS     ?= ${OBJS}
APP_OBJS     ?= ${OBJS}
APP_DBG_OBJS ?= ${DBG_OBJS}
MOD_OBJS     ?= ${OBJS}
MOD_DBG_OBJS ?= ${DBG_OBJS}
APP_OBJS_     = $(addprefix o.,${APP_OBJS})
APP_DBG_OBJS_ = $(addprefix od.,${APP_DBG_OBJS})
MOD_OBJS_     = $(addprefix oz.,${MOD_OBJS})
MOD_DBG_OBJS_ = $(addprefix odz.,${MOD_DBG_OBJS})

EXPORTING_HDRS    = $(addprefix exphdr.,${HDRS})
EXPORTING_ASMHDRS = $(addprefix expasm.,${ASMHDRS})
EXPORTING_LIBS    = $(addprefix explib.,${LIBRARIES})
TARGET_LIBS       = $(addprefix ${LIBEXT}.,${LIBRARIES})

ifeq ($(filter install%,${MAKECMDGOALS}),)
EXPDIR       ?= ${LIBDIR}.${TARGET}
else
EXPDIR       ?= ${INSTDIR}.${TARGET}
endif

ifeq ("${INCLUDED_STDTOOLS}","")
include StdTools
endif

ifeq ("${INCLUDED_STDRULES}","")
include StdRules
endif
ifeq ("${INCLUDED_DBGRULES}","")
include DbgRules
endif

all_libs: ${TARGET_LIBS}
        @@${ECHO} ${COMPONENT}: library built

${DIRS} ::
        ${MKDIR} o
        ${MKDIR} oz
        ${MKDIR} od
        ${MKDIR} odz
        ${MKDIR} ${LIBEXT}
        ${TOUCH} $@@

clean ::
        @@IfThere o         Then ${ECHO} ${WIPE} o ${WFLAGS}
        @@IfThere o         Then ${WIPE} o ${WFLAGS}
        @@IfThere oz        Then ${ECHO} ${WIPE} oz ${WFLAGS}
        @@IfThere oz        Then ${WIPE} oz ${WFLAGS}
        @@IfThere od        Then ${ECHO} ${WIPE} od ${WFLAGS}
        @@IfThere od        Then ${WIPE} od ${WFLAGS}
        @@IfThere odz       Then ${ECHO} ${WIPE} odz ${WFLAGS}
        @@IfThere odz       Then ${WIPE} odz ${WFLAGS}
        @@IfThere ${LIBEXT} Then ${ECHO} ${WIPE} ${LIBEXT} ${WFLAGS}
        @@IfThere ${LIBEXT} Then ${WIPE} ${LIBEXT} ${WFLAGS}
        @@${ECHO} ${COMPONENT}: cleaned

export: export_${PHASE}
        @@${NOP}

install export_: export_libs export_hdrs
        @@${NOP}

create_exp_hdr_dirs:
        ${MKDIR} ${EXPDIR}.h
        ${MKDIR} ${EXPDIR}.Hdr

create_exp_lib_dir:
        ${MKDIR} ${EXPDIR}.${LIBEXT}

.SUFFIXES: .exphdr .expasm .explib .h .Hdr .${LIBEXT}
.h.exphdr:;         ${CP} $< ${EXPDIR}.$< ${CPFLAGS}
.Hdr.expasm:;       ${CP} $< ${EXPDIR}.$< ${CPFLAGS}
.${LIBEXT}.explib:; ${CP} $< ${EXPDIR}.$< ${CPFLAGS}

export_hdrs: ${EXPORTING_ASMHDRS} ${EXPORTING_HDRS} ${DIRS} create_exp_hdr_dirs
        @@IfThere VersionNum then ${ECHO} ${CP} VersionNum ${EXPDIR}.LibVersion ${CPFLAGS}
        @@IfThere VersionNum then ${CP} VersionNum ${EXPDIR}.LibVersion ${CPFLAGS}
        @@IfThere ${EXPDIR}.h.*   then else ${RM} ${EXPDIR}.h
        @@IfThere ${EXPDIR}.Hdr.* then else ${RM} ${EXPDIR}.Hdr
        @@${ECHO} ${COMPONENT}: header export complete

export_libs: ${EXPORTING_LIBS} ${TARGET_LIBS} ${DIRS} create_exp_lib_dir
        @@IfThere VersionNum then ${ECHO} ${CP} VersionNum ${EXPDIR}.LibVersion ${CPFLAGS}
        @@IfThere VersionNum then ${CP} VersionNum ${EXPDIR}.LibVersion ${CPFLAGS}
        @@IfThere ${EXPDIR}.${LIBEXT}.* then else ${RM} ${EXPDIR}.${LIBEXT}
        @@${ECHO} ${COMPONENT}: library export complete

${LIBEXT}.${LIBRARY}${CUSTOMLIB}: ${APP_OBJS_} ${DIRS} ${LIBDEPENDS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARY} ${APP_OBJS_}

${LIBEXT}.${LIBRARYZM}${CUSTOMLIBZM}: ${MOD_OBJS_} ${DIRS} ${LIBDEPENDS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARYZM} ${MOD_OBJS_}

${LIBEXT}.${LIBRARYD}${CUSTOMLIBD}: ${APP_DBG_OBJS_} ${DIRS} ${LIBDEPENDS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARYD} ${APP_DBG_OBJS_}

${LIBEXT}.${LIBRARYDZM}${CUSTOMLIBDZM}: ${MOD_DBG_OBJS_} ${DIRS} ${LIBDEPENDS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARYDZM} ${MOD_DBG_OBJS_}

# EOF
@


1.8
log
@Add ability to specify dependicies for CLibrary
New capability for the CLibrary shared makefile to specify arbitrary dependencies (via ${LIBDEPENDS}) required before the main event, this might be used to, for example, run a perl script or something to generate some code or headers.
Add PDEBUGLIB PRISMLIB REMOTEDBLIB TRACELIB and UNICODELIB to the AppLibs and ModuleLibs.
Repoint DDTLIB WILDLIB TRACELIB.
For the PlingSystem build, put TextGadgets in the 350 directory since it currently only supports text areas in dynamic areas.

Version 6.63. Tagged as 'BuildSys-6_63'
@
text
@d20 1
a20 1
# $Id: CLibrary,v 1.7 2014/10/24 12:36:49 rsprowson Exp $
d24 1
a24 1
#    all_libs  export_hdrs  export_libs
d39 2
a40 1
# EXPDIR       (opt) (the target directory - otherwise <Lib$Dir>.${TARGET})
a98 1
EXPDIR       ?= ${LIBDIR}.${TARGET}
d117 6
d161 1
a161 1
export_: export_libs export_hdrs
@


1.7
log
@Do 'rom_link' against the same thing you do 'rom' with
During the rom phase, ROM C modules would be linked against ${ROMCSTUBS}, ie. clib.
During the rom_link phase, they'd be linked against ${ABSSYM}, ie. clib and rlib.
As RISC_OSLib contains various wimp_ symbol names which clash with ${WIMPLIB} from the Toolbox, so you can't write a ROMmable C module which links against the Toolbox and uses the shared makefiles.

We define a new variable ROM_SYMS which is initialised to ${C_ABSSYM}, ie. just the clib to match the stubs used during the rom phase, and the ${ROMCSTUBS} is now appended to ${ROM_LIBS} so it can be overridden rather than being hardwired into the rule.
For completeness SA_LIBS can now also be overridden to remove ${CLIB} if desired.

CApp/CLibrary now use ${NOP} silently.

Version 6.60. Tagged as 'BuildSys-6_60'
@
text
@d20 1
a20 1
# $Id: CLibrary,v 1.6 2013/11/11 00:50:38 bavison Exp $
d38 1
d183 1
a183 1
${LIBEXT}.${LIBRARY}${CUSTOMLIB}: ${APP_OBJS_} ${DIRS}
d186 1
a186 1
${LIBEXT}.${LIBRARYZM}${CUSTOMLIBZM}: ${MOD_OBJS_} ${DIRS}
d189 1
a189 1
${LIBEXT}.${LIBRARYD}${CUSTOMLIBD}: ${APP_DBG_OBJS_} ${DIRS}
d192 1
a192 1
${LIBEXT}.${LIBRARYDZM}${CUSTOMLIBDZM}: ${MOD_DBG_OBJS_} ${DIRS}
@


1.6
log
@  Changes to keep GNUmakefiles and Makefiles compatible
Detail:
  Makefiles/CApp:
  * Naming of object file variables rationalised in line with CModule
  * Noted that INSTAPP_VERSION files must also be present in INSTAPP_FILES for
    compatibility with GNUmakefiles - requires changes to individual top-level
    makefiles, but not BuildSys
  Makefiles/CLibrary:
  * Naming of object file variables rationalised in line with CModule
  Makefiles/CModule:
  * Removed unused variable OBJS_
  Makefiles/StdTools:
  * Retired TIDYDESC
  GNUmakefiles/AppLibs:
  * Add CONLIB, RMVSN, SYNCLIB
  GNUmakefiles/CApp:
  * Default definition of INSTAPP
  * Naming of object file variables rationalised in line with CModule
  * CLEAN_DEPEND removed, clean made a double-colon rule (it's worth noting
    that such additional clean rules are now only executed from the component's
    top-level directory: this was not true for the old extra_clean rules that
    this replaces, in the GNUmakefiles case)
  * Rename of INSTALLAPPFILES to INSTAPP_FILES
  * Rename of INSTALLAPP_DEPEND to INSTAPP_DEPENDS
  * Insertion of component version into Desc files now done using AwkVers
    script rather than the C preprocessor (note, will require editing of Desc
    files to comply). Also supports versions in Messages and !Run files,
    controlled by new variable INSTAPP_VERSION
  GNUmakefiles/CLibrary:
  * Naming of object file variables rationalised in line with CModule
  * clean rules now only executed from the component's top-level directory, as
    with CApp
  GNUmakefiles/StdTools:
  * Added INSERTVERSION (AwkVers), retired TIDYDESC
  * Perl scripts now explicitly passed to perl - no need to chmod +x the
    scripts in RiscOS/Library
  * asasm/objasm include paths and APCS/Machine/UserIF predefines set to match
    Makefiles
Admin:
  Tested in a CTools build

Version 6.32. Tagged as 'BuildSys-6_32'
@
text
@d20 1
a20 1
# $Id: CLibrary,v 1.5 2012/02/05 09:13:26 rsprowson Exp $
d152 1
a152 1
        ${NOP}
d155 1
a155 1
        ${NOP}
@


1.5
log
@Change back to overridable clean and dirs steps.
The CLEAN_DEPEND intermediate was added because GNU make didn't support '::' notation, but GNU nake 3.81 (possibly earlier) does as described at
  http://www.gnu.org/software/make/manual/make.html#Double_002dColon
verified with two test makefiles
# This is 'makefile'
include ./other.mk
clean::
	@@echo 1
	@@echo 2
# This is 'other.mk'
CLEANALIAS = clean
${CLEANALIAS}::
	@@echo 3
	@@echo 4
which did what was required.

Version 5.42. Tagged as 'BuildSys-5_42'
@
text
@d20 1
a20 1
# $Id: CLibrary,v 1.4 2011/03/31 00:04:06 bavison Exp $
d44 4
a47 4
# APP_OBJS     (opt) (object files for application version - otherwise derived from ${OBJS})
# APP_DBG_OBJS (opt) (object files for debug app version - otherwise derived from ${DBG_OBJS})
# MOD_OBJS     (opt) (object files for module version - otherwise derived from ${OBJS})
# MOD_DBG_OBJS (opt) (object files for debug module version - otherwise derived from ${DBG_OBJS})
d102 8
a109 4
APP_OBJS     ?= $(addprefix o.,${OBJS})
APP_DBG_OBJS ?= $(addprefix od.,${DBG_OBJS})
MOD_OBJS     ?= $(addprefix oz.,${OBJS})
MOD_DBG_OBJS ?= $(addprefix odz.,${DBG_OBJS})
d182 2
a183 2
${LIBEXT}.${LIBRARY}${CUSTOMLIB}: ${APP_OBJS} ${DIRS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARY} ${APP_OBJS}
d185 2
a186 2
${LIBEXT}.${LIBRARYZM}${CUSTOMLIBZM}: ${MOD_OBJS} ${DIRS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARYZM} ${MOD_OBJS}
d188 2
a189 2
${LIBEXT}.${LIBRARYD}${CUSTOMLIBD}: ${APP_DBG_OBJS} ${DIRS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARYD} ${APP_DBG_OBJS}
d191 2
a192 2
${LIBEXT}.${LIBRARYDZM}${CUSTOMLIBDZM}: ${MOD_DBG_OBJS} ${DIRS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARYDZM} ${MOD_DBG_OBJS}
@


1.5.2.1
log
@Merge of trunk BuildSys-6_34 to branch RPiFreeze

Version 6.00, 1.142.2.4. Tagged as 'BuildSys-6_00-1_142_2_4'
@
text
@d20 1
a20 1
# $Id: CLibrary,v 1.6 2013/11/11 00:50:38 bavison Exp $
d44 4
a47 4
# APP_OBJS     (opt) (release application object files, no o. or oz. prefixes - otherwise ${OBJS})
# APP_DBG_OBJS (opt) (debug application object files, no o. or oz. prefixes - otherwise ${DBG_OBJS})
# MOD_OBJS     (opt) (release module object files, no o. or oz. prefixes - otherwise ${OBJS})
# MOD_DBG_OBJS (opt) (debug module object files, no o. or oz. prefixes - otherwise ${DBG_OBJS})
d102 4
a105 8
APP_OBJS     ?= ${OBJS}
APP_DBG_OBJS ?= ${DBG_OBJS}
MOD_OBJS     ?= ${OBJS}
MOD_DBG_OBJS ?= ${DBG_OBJS}
APP_OBJS_     = $(addprefix o.,${APP_OBJS})
APP_DBG_OBJS_ = $(addprefix od.,${APP_DBG_OBJS})
MOD_OBJS_     = $(addprefix oz.,${MOD_OBJS})
MOD_DBG_OBJS_ = $(addprefix odz.,${MOD_DBG_OBJS})
d178 2
a179 2
${LIBEXT}.${LIBRARY}${CUSTOMLIB}: ${APP_OBJS_} ${DIRS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARY} ${APP_OBJS_}
d181 2
a182 2
${LIBEXT}.${LIBRARYZM}${CUSTOMLIBZM}: ${MOD_OBJS_} ${DIRS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARYZM} ${MOD_OBJS_}
d184 2
a185 2
${LIBEXT}.${LIBRARYD}${CUSTOMLIBD}: ${APP_DBG_OBJS_} ${DIRS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARYD} ${APP_DBG_OBJS_}
d187 2
a188 2
${LIBEXT}.${LIBRARYDZM}${CUSTOMLIBDZM}: ${MOD_DBG_OBJS_} ${DIRS}
       ${AR} ${ARFLAGS} ${LIBEXT}.${LIBRARYDZM} ${MOD_DBG_OBJS_}
@


1.5.2.2
log
@Merge of BuildSys-6_52 to branch

Version 6.00, 1.142.2.5. Tagged as 'BuildSys-6_00-1_142_2_5'
@
text
@@


1.5.2.3
log
@Merge of BuildSys-6_64 to branch

Version 6.00, 1.142.2.6. Tagged as 'BuildSys-6_00-1_142_2_6'
@
text
@d20 1
a20 1
# $Id: CLibrary,v 1.8 2015/01/10 11:56:06 rsprowson Exp $
a37 1
# LIB_DEPENDS  (opt) (any extra dependencies to assert before making LIBRARIES)
d152 1
a152 1
        @@${NOP}
d155 1
a155 1
        @@${NOP}
d182 1
a182 1
${LIBEXT}.${LIBRARY}${CUSTOMLIB}: ${APP_OBJS_} ${DIRS} ${LIBDEPENDS}
d185 1
a185 1
${LIBEXT}.${LIBRARYZM}${CUSTOMLIBZM}: ${MOD_OBJS_} ${DIRS} ${LIBDEPENDS}
d188 1
a188 1
${LIBEXT}.${LIBRARYD}${CUSTOMLIBD}: ${APP_DBG_OBJS_} ${DIRS} ${LIBDEPENDS}
d191 1
a191 1
${LIBEXT}.${LIBRARYDZM}${CUSTOMLIBDZM}: ${MOD_DBG_OBJS_} ${DIRS} ${LIBDEPENDS}
@


1.5.2.4
log
@Merge of BuildSys-7_04 to branch

Version 6.00, 1.142.2.9. Tagged as 'BuildSys-6_00-1_142_2_9'
@
text
@@


1.4
log
@  Improvements to shared makefiles
Detail:
  * Some subtle bugs can be caused by including shared makefiles in the
    wrong order. To try to prevent further problems, and simplify main
    makefiles at the same time, CApp, CLibrary and CModule now include the
    makefiles they depend upon themselves, in the correct order: generally
    speaking, all macro (re)definitions should be before rule definitions.
  * Added sentry macro definitions to each makefile. These can be used to
    avoid repeated inclusion of makefiles - particularly important now that
    CApp, CLibrary and CModule do additional includes. This removes the
    majority of cases where amu produced warnings about multiple inclusion;
    a few components remain where this is still the case, but these
    warnings are harmless. If they bother you, simply remove the
    now-superfluous include statements from the relevant main makefile.
  * Created a CUtil shared makefile, for building transient utilities. The
    'C' in the name is more for consistency with CApp/CLibrary/CModule than
    anything to do with the 'C' language, since all of these makefiles work
    equally well for assembler and 'C' - the 'C' is for historic reasons.
  * Tweaked the debug rules in CApp to avoid harmless but annoying linker
    warnings about stubs being included twice.
  * Added several new default switches to ASFLAGS. These enable us to start
    making assembler source files work under a cross-assembler, because
    statements like
        GET  Hdr:Macros
        GET  Hdr:Machine.<Machine>
    are not portable, and tweaking the cross-assembler to understand these
    types of constructs would not be pretty. Instead, with the extra
    command line switches now introduced, you can use
        GET  Macros
        GET  Machine/$Machine
Admin:
  Tested in a ROM build

Version 5.12. Tagged as 'BuildSys-5_12'
@
text
@d20 1
a20 1
# $Id: CLibrary,v 1.3 2010/05/19 14:47:58 bavison Exp $
a47 1
# CLEAN_DEPEND (opt) (phony target for additional clean actions)
d134 1
a134 1
clean ::  ${CLEAN_DEPEND}
@


1.3
log
@  Changes to facilitate platform independence.

Detail:
 CApp:
  * New variable CLEAN_DEPEND is now the preferred way to specify additional
    clean actions because GNU make doesn't have an equivalent to amu's :: rules
  * Can now indicate preference to use C++ linker options using LINK_TYPE
  * Gains install phase support:
    + INSTALLAPPFILES lists the files to be copied, effectively specified
      relative to LocalRes$Path
    + Adopted INSTTYPE concept from DDE makefiles for cases where executable
      and support files need to be installed to different locations
    + Unusual cases can override this implementation using CUSTOMINSTALLAPP
      and/or CUSTOMINSTALLTOOL

  CLibrary:
  * New variable CLEAN_DEPEND is now the preferred way to specify additional
    clean actions because GNU make doesn't have an equivalent to amu's :: rules
  * -o is no longer a mandatory argument to libfile - now in ARFLAGS rather
    than used explicitly

  DbgRules / StdRules:
  * Macroised some Norcroft-specific features

  HostTools:
  * Clean phase support was incomplete

  StdTools:
  * A few additional tool definitions
  * Added macro definitions for common C options
  * C's enable-warnings and suppress-function-name-embedding options now on by
    default because they're usually (maybe even universally?) used - it won't
    hurt if they're specified again by existing makefiles
  * C++ now has equivalent INCLUDES and DEFINES variables, and the standard C++
    headers are on the default include path
  * SEP is defined as the directory separator character and can be used from
    top-level makefiles in a platform-independent way

  Functionally equivalent versions of the following makefile fragments
  have been developed so far for executing on a Posix build host:
    AppLibs, CApp, CLibrary, DbgRules, HostTools, StdRules, StdTools
  These suport native compilers (when APCS=Host) and cross-compilers,
  and GCC (when TOOLCHAIN=GNU) and Norcroft toolchains - typically these
  environment variables would be selected by running an Env file.

Admin:
  Tested by building as many as possible of the DDE components on RISC OS
  and on Linux, using native and cross compilers, and using Norcroft and
  GNU toolchains.

Version 5.01. Tagged as 'BuildSys-5_01'
@
text
@d16 3
d20 1
a20 1
# $Id: CLibrary,v 1.2 2008/10/16 23:55:24 bavison Exp $
d113 11
@


1.2
log
@Build environment updates for Batch 5

Version 4.63. Tagged as 'BuildSys-4_63'
@
text
@d17 1
a17 1
# $Id: CLibrary,v 1.1 2008/10/14 21:29:37 bavison Exp $
d45 1
d121 1
a121 1
clean ::
d166 1
a166 1
       ${AR} ${ARFLAGS} -o ${LIBEXT}.${LIBRARY} ${APP_OBJS}
d169 1
a169 1
       ${AR} ${ARFLAGS} -o ${LIBEXT}.${LIBRARYZM} ${MOD_OBJS}
d172 1
a172 1
       ${AR} ${ARFLAGS} -o ${LIBEXT}.${LIBRARYD} ${APP_DBG_OBJS}
d175 1
a175 1
       ${AR} ${ARFLAGS} -o ${LIBEXT}.${LIBRARYDZM} ${MOD_DBG_OBJS}
@


1.1
log
@Clean reimport of the build environment directories.
This represents the version released in the Batch 4 "bbe" tarfiles.
Tagged as 'Batch4'
@
text
@d17 1
a17 1
# $Id: CLibrary,v 1.2 2005/05/19 18:12:53 bavison Exp $
d97 1
a97 1
ASMHDRS      ?= ${TARGET}
d146 1
a146 1
.SUFFIXES: .exphdr .expasm .explib .h .hdr .${LIBEXT}
d151 1
a151 1
export_hdrs: ${EXPORTING_HDRS} ${DIRS} create_exp_hdr_dirs
@

