head	1.6;
access;
symbols
	BuildSys-7_30:1.6
	BuildSys-7_29:1.6
	BuildSys-7_28:1.6
	BuildSys-7_27:1.6
	BuildSys-7_26:1.6
	BuildSys-7_25:1.6
	BuildSys-7_24:1.5
	BuildSys-7_23:1.4
	BuildSys-7_22:1.4
	BuildSys-7_21:1.4
	BuildSys-7_20:1.3
	BuildSys-7_19:1.3
	BuildSys-7_18:1.3
	BuildSys-7_17:1.3
	BuildSys-7_16:1.3
	BuildSys-7_15:1.3
	BuildSys-7_14:1.3
	BuildSys-7_13:1.3
	BuildSys-7_12:1.3
	BuildSys-7_11:1.3
	BuildSys-7_10:1.3
	BuildSys-7_09:1.3
	BuildSys-6_00-1_142_2_10:1.3.2.2
	BuildSys-7_08:1.3
	BuildSys-7_07:1.3
	BuildSys-7_06:1.3
	BuildSys-7_05:1.3
	BuildSys-6_00-1_142_2_9:1.3.2.2
	BuildSys-7_04:1.3
	BuildSys-7_03:1.3
	BuildSys-7_02:1.3
	BuildSys-7_01:1.3
	BuildSys-7_00:1.3
	BuildSys-6_99:1.3
	BuildSys-6_98:1.3
	BuildSys-6_97:1.3
	BuildSys-6_96:1.3
	BuildSys-6_95:1.3
	BuildSys-6_94:1.3
	BuildSys-6_93:1.3
	BuildSys-6_92:1.3
	BuildSys-6_91:1.3
	BuildSys-6_90:1.3
	BuildSys-6_89:1.3
	BuildSys-6_81-1:1.3
	BuildSys-6_88:1.3
	BuildSys-6_87:1.3
	BuildSys-6_86:1.3
	BuildSys-6_85:1.3
	BuildSys-6_84:1.3
	BuildSys-6_83:1.3
	BuildSys-6_82:1.3
	BuildSys-6_81:1.3
	BuildSys-6_80:1.3
	BuildSys-6_79:1.3
	BuildSys-6_78:1.3
	BuildSys-6_77:1.3
	BuildSys-6_76:1.3
	BuildSys-6_75:1.3
	BuildSys-6_74:1.3
	BuildSys-6_73:1.3
	BuildSys-6_72:1.3
	BuildSys-6_71:1.3
	BuildSys-6_70:1.3
	BuildSys-6_69:1.3
	BuildSys-6_68:1.3
	BuildSys-6_67:1.3
	BuildSys-6_66-1:1.3
	BuildSys-6_66:1.3
	BuildSys-6_65:1.3
	BuildSys-6_00-1_142_2_8:1.3.2.2
	BuildSys-6_00-1_142_2_7:1.3.2.2
	BuildSys-6_00-1_142_2_6:1.3.2.2
	BuildSys-6_64:1.3
	BuildSys-6_63:1.3
	BuildSys-6_62:1.3
	BuildSys-6_61:1.3
	BuildSys-6_60:1.3
	BuildSys-6_59:1.3
	BuildSys-6_58:1.3
	BuildSys-6_57:1.3
	BuildSys-6_56:1.3
	BuildSys-6_55:1.3
	BuildSys-6_54:1.3
	BuildSys-6_53:1.3
	BuildSys-6_00-1_142_2_5:1.3.2.2
	RPiFreeze:1.3.0.2
	BuildSys-6_52:1.3
	BuildSys-6_51:1.3
	BuildSys-6_50:1.3
	BuildSys-6_49:1.1;
locks; strict;
comment	@# @;


1.6
date	2018.04.14.01.06.51;	author bavison;	state Exp;
branches;
next	1.5;
commitid	bZvAjS04et77wlyA;

1.5
date	2018.04.11.23.21.08;	author bavison;	state Exp;
branches;
next	1.4;
commitid	IH1EokSuAjoQZ4yA;

1.4
date	2018.03.12.21.44.39;	author bavison;	state Exp;
branches;
next	1.3;
commitid	k1x0Nm0F4RqwqduA;

1.3
date	2014.09.27.09.52.48;	author rsprowson;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	uznkx7MJ8Ldb3YRx;

1.2
date	2014.09.24.20.24.10;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	DA9s1M3numtWDDRx;

1.1
date	2014.09.24.20.02.55;	author bavison;	state Exp;
branches;
next	;
commitid	Vk7HFgZiKmEEwDRx;

1.3.2.1
date	2014.09.27.09.52.48;	author rsprowson;	state dead;
branches;
next	1.3.2.2;
commitid	tHT6hsrmkNpoOTTx;

1.3.2.2
date	2014.10.12.10.36.26;	author rsprowson;	state Exp;
branches;
next	;
commitid	tHT6hsrmkNpoOTTx;


desc
@@


1.6
log
@  Makefile bugfixes
Detail:
  Makefiles/AAsmModule:
  * This was the odd-one out amongst top-level shared makefiles in that it
    still required the master makefile to include StdTools explicitly - even
    the GNU version of this makefile did so. Now changed for consistency.
  GNUmakefiles/AAsmModule:
  * Fixed typo in renaming of MERGEDMDIR to MERGEDRDIR.
Admin:
  Fixes build error in latest FPEmulator


Version 7.25. Tagged as 'BuildSys-7_25'
@
text
@# Makefile fragment for assembler modules, previously built using AAsm but now using objasm
# Such modules are characterised by the use of position-independent code
# and multiple source files (if applicable) linked at the assembly stage
# (using LNK and GET directives) rather than at the link stage.

INCLUDED_AASMMODULE = YES

#
# This makefile provides the following phony targets:
#
#    all     rom           install_rom   resources
#    export  export_libs   export_hdrs   standalone         install
#    clean   debug         gpa_debug
#
#
# This fragment uses the following macros set by the master makefile.
#
#
# COMPONENT             (the name of the component)
# TARGET          (opt) (the leafname of the module - otherwise ${COMPONENT})
# ROM_MODULE      (opt) (output filename - otherwise ${TARGET})
# ROM_OBJECT      (opt) (object file for romming - otherwise ${TARGET}.o)
# ROM_LIBS        (opt) (libraries to link again ROM_OBJECT to generate ROM_MODULE)
# ROM_DEPEND      (opt) (any extra dependency to assert on ROM_MODULE)
# DBG_MODULE      (opt) (output filename for debug - otherwise ${TARGET}D
# DBG_OBJECT      (opt) (object file for debug - otherwise ${TARGET}D.o
# DBG_LIBS        (opt) (libraries to link against DBG_OBJECT to generate DBG_MODULE - otherwise ${ROM_LIBS})
# SA_MODULE       (opt) (output filename for softload - otherwise ${TARGET}SA
# SA_OBJECT       (opt) (object file for softload - otherwise ${TARGET}SA.o
# SA_LIBS         (opt) (libraries to link against SA_OBJECT to generate SA_MODULE - otherwise ${ROM_LIBS})
# SA_DEPEND       (opt) (any extra dependency to assert on SA_MODULE and DBG_MODULE)
# DIRS            (opt) (magic target to ensure object directories are present - otherwise _dirs)
# HEADER[1-3]     (opt) (leafname of file in hdr to copy to ${EXPORTDIR} on export_hdrs)
# ASMCHEADER[1-3] (opt) (C-from-assembly auto-generated header files to export, no Hdr. prefix - otherwise none)
# CHEADER[1-3]    (opt) (C header files to export - otherwise none)
# EXPORTS         (opt) (list of C and C-from-assembly headers to export)
# C_EXP_HDR       (opt) (C header target directory - otherwise ${CEXPORTDIR}/Interface)
# EXP_HDR         (opt) (directory for exported assembler interface headers)
# INSTRES_FILES   (opt) (extra resource files in addition to Messages - use InstRes specification rules)
# INSTRAM_FILES   (opt) (RAM build specific resources - otherwise ${INSTRES_FILES})
# INSTROM_FILES   (opt) (ROM build specific resources - otherwise ${INSTRES_FILES})
# INSTR??_DEPENDS (opt) (any extra dependency to assert on INSTRES/INSTRAM/INSTROM_FILES)
# INSTRES_VERSION (opt) (if set to "Messages", automatically insert version into Messages file during resources phase)
# MERGEDMSGS      (r/o) (leafname of generated Messages file)
# RESFSDIR        (opt) (actual directory to export resources to - otherwise ${RESDIR}/${TARGET})
# CUSTOMEXP       (opt) (set to "custom" to override the export rules)
# CUSTOMRES       (opt) (set to "custom" to override the resources rules, or "no" for no resources)
# CUSTOMROM       (opt) (set to "custom" to override the rom rules)
# CUSTOMSA        (opt) (set to "custom" to override the standalone rules)
# CUSTOMDBG       (opt) (set to "custom" to override the debug rules)
# CUSTOMGPA       (opt) (set to "custom" to override the GPA rules)
# SOURCES_TO_SYMLINK opt) (files which need be linked to by the link farm, in addition to contents of hdr and s directories)
#
#
# It relies on the following from the build system:
#
#
# INSTDIR          (installation directory for ROM_MODULE or disc install)
# INSTALLDIR       (if INSTDIR was not specified by the build system)
# RESDIR           (installation directory for resources - cf. RESFSDIR)
# EXPORTDIR        (export directory for assembler interface headers)
# CEXPORTDIR       (export directory for C interface headers)
# HDRDIR           (top-level export directory for assembler headers)
# CMDHELP          (optional, set to None to exclude syntax errors from Messages)
# PHASE            (export phase discriminator)
# INSERTVERSION    (awk script to substitute from VersionNum)
#
#
# It relies on the following generic tool macros from the Tools makefile
#
# CP + CPFLAGS     (copy, cp etc.)
# AS + ASFLAGS     (assembler)
# MKDIR            (cdir/mkdir -p)
# RM + WIPE        (deletions)
# ECHO
# LD               (linker)
#
#

TARGET     ?= ${COMPONENT}
INSTDIR    ?= ${INSTALLDIR}
ROM_MODULE ?= ${TARGET}${SUFFIX_MODULE}
ROM_SOURCE ?= ${TARGET}.s
ROM_OBJECT ?= ${TARGET}.o
DIRS       ?= _dirs
EXP_HDR    ?= ${EXPORTDIR}
C_EXP_HDR  ?= ${CEXPORTDIR}/Interface

SA_MODULE  ?= ${TARGET}SA${SUFFIX_MODULE}
SA_OBJECT  ?= ${TARGET}SA.o
INSTRAM_FILES   ?= ${INSTRES_FILES}
INSTRAM_DEPENDS ?= ${INSTRES_DEPENDS}
INSTROM_FILES   ?= ${INSTRES_FILES}
INSTROM_DEPENDS ?= ${INSTRES_DEPENDS}
MERGEDRDIR ?= _ResData_
MERGEDMSGS ?= ${MERGEDRDIR}/${TARGET}/Messages
RESFSDIR   ?= ${RESDIR}/${TARGET}
RESAPPDIR  ?= ${RESDIR}/../Apps/${APP}
ifeq (${CMDHELP},None)
SA_FLAGS   ?= -PD "standalone SETL {TRUE}" -PD "MergedMsgs SETS \"${MERGEDMSGS}\"" -PD "international_help SETL {FALSE}"
else
SA_FLAGS   ?= -PD "standalone SETL {TRUE}" -PD "MergedMsgs SETS \"${MERGEDMSGS}\""
endif
SA_LIBS    ?= ${ROM_LIBS}

DBG_MODULE ?= ${TARGET}D${SUFFIX_MODULE}
DBG_OBJECT ?= ${TARGET}D.o
DBG_LIBS   ?= ${ROM_LIBS}

#GPA_FILE   ?= ${TARGET}.gpa
#GPA_AIF    ?= ${TARGET}.aif

TOKENS     ?= ${HDRDIR}/Global/Tokens

TOKENSOURCE ?= TokHelpSrc.s

ifeq ($(filter rom%,${MAKECMDGOALS}),)
RES_FILES_    = ${INSTRAM_FILES}
RES_DEPENDS_  = ${INSTRAM_DEPENDS}
else
RES_FILES_    = ${INSTROM_FILES}
RES_DEPENDS_  = ${INSTROM_DEPENDS}
endif

SOURCES_TO_SYMLINK += $(wildcard h/*) $(wildcard hdr/*) $(wildcard s/*) Resources VersionNum VersionASM

ifneq (objs,$(notdir ${CURDIR}))

# Makefile invoked from same directory
# Create link farm, then execute the makefile from within it

ifeq (clean,${MAKECMDGOALS})
# With a double-colon rule which can have additional actions assigned from the
# master makefile, we'd normally need the master makefile to include the
# ${CURDIR} check to ensure that it's performed on the same invocation as us.
# However, there's no real benefit to performing clean from within the objs
# directory, and it adds an ordering problem between the different double-colon
# rules (the one that deletes the objs directory has to be last otherwise the
# cwd is invalid for the others) so to simplify things, we only ever do cleans
# from the same directory as the Makefile.
clean::
	@@echo Cleaning...
	@@rm -rf objs
	@@echo ${COMPONENT}: cleaned
else
ifneq (,${SYMLINK_EXT_FIRST})
SYMLINK_SED_PATTERN = 's,^\([^/]*\)/\(.*\),\2.\1,'
else
SYMLINK_SED_PATTERN = 's,\([^/]*\)/\([^/]*\)$$,\2.\1,'
endif
all debug export export_hdrs export_libs gpa_debug install install_rom links resources rom standalone: ${SYMLINK_DEPEND}
	$(foreach linksource,${SOURCES_TO_SYMLINK}, \
		$(shell \
			linkdest=`echo ${linksource} | sed -e ${SYMLINK_SED_PATTERN} -e 's,^,objs/,'`; \
			linkdestdir=`echo $$linkdest | sed -e 's,/[^/]*$$,,'`; \
			linkbackpath=`echo $$linkdestdir | sed -e 's,[^/]*,..,g'`; \
			[ -d ${linksource} ] || [ -L $$linkdest ] || mkdir -p $$linkdestdir; \
			[ -d ${linksource} ] || [ -L $$linkdest ] || ln -s $$linkbackpath/${linksource} $$linkdest; \
		 ) \
	)
	@@[ -L objs/Resources ] || ln -s ../Resources objs/Resources
	@@mkdir -p objs
ifneq (links,${MAKECMDGOALS})
	@@${MAKE} -C objs -f ../$(firstword ${MAKEFILE_LIST}) ${MAKECMDGOALS}
endif
endif

else

# Makefile invoked from objs subdirectory

ifeq ("${INCLUDED_STDTOOLS}","")
include StdTools
endif

all: rom debug standalone

# GNU make seems to treat any double-colon rule with no dependencies as
# always out-of-date, therefore always rebuilds it and anything which in turn
# depends on the target of the double-colon rule. So use a single-colon rule
# instead. If any cross builds need to create extra directories on a
# per-component basis, we'll cross that bridge when we get to it.
${DIRS}:
	${TOUCH} $@@

#
# ROM build rules
#
rom${CUSTOMROM}: ${ROM_MODULE}
	@@${ECHO} ${COMPONENT}: rom module built

install_rom${CUSTOMROM}: ${ROM_MODULE}
	${CP} ${ROM_MODULE} ${INSTDIR}/${TARGET} ${CPFLAGS}
	#${CP} ${ROM_MODULE}_gpa ${INSTDIR}/${TARGET}_gpa ${CPFLAGS}
	@@${ECHO} ${COMPONENT}: rom module installed

${ROM_MODULE}: ${ROM_DEPEND} ${DIRS} ${ROM_LIBS} ${ROM_OBJECT}
ifeq (GNU,${TOOLCHAIN})
	${LDBIN} $@@ ${ROM_OBJECT} ${ROM_LIBS}
else
	${LD} -rmf -o $@@ ${ROM_OBJECT} ${ROM_LIBS}
	#${LD} -aif -bin -d -Entry 0 -o ${ROM_MODULE}_aif ${ROM_OBJECT} ${ROM_LIBS}
	#${TOGPA} -s ${ROM_MODULE}_aif ${ROM_MODULE}_gpa
endif

${ROM_OBJECT}: ${DIRS} ${TOKHELPSRC} ${ROM_SOURCE}
	${AS} ${ASFLAGS} -depend $(subst .o,.d,$@@) -g -o $@@ ${ROM_SOURCE}

#
# Standalone builds
#
standalone${CUSTOMSA}: ${SA_MODULE}
	@@${ECHO} ${COMPONENT}: standalone module built

${SA_MODULE}: ${SA_DEPEND} ${DIRS} ${SA_LIBS} ${SA_OBJECT}
ifeq (GNU,${TOOLCHAIN})
	${LDBIN} $@@ ${SA_OBJECT} ${SA_LIBS}
else
	${LD} -rmf -o $@@ ${SA_OBJECT} ${SA_LIBS}
endif
	${MODSQZ} -f ${MODSQZFLAGS} $@@

${SA_OBJECT}: ${DIRS} ${TOKHELPSRC} ${MERGEDMSGS} ${ROM_SOURCE}
	${AS} ${ASFLAGS} -depend $(subst .o,.d,$@@) -o $@@ ${ROM_SOURCE} ${SA_FLAGS}

ifeq ($(filter no custom,${CUSTOMRES}),)
${MERGEDMSGS}:
	${MKDIR} ${MERGEDRDIR}/tmp
	${MKDIR} ${MERGEDRDIR}/${TARGET}
	${TOUCH} ${MERGEDRDIR}/tmp/Messages
	${TOUCH} ${MERGEDRDIR}/tmp/CmdHelp
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${MERGEDRDIR} [Messages] [CmdHelp]
	${CAT} ${MERGEDRDIR}/tmp/Messages ${MERGEDRDIR}/tmp/CmdHelp > $@@
	${WIPE} ${MERGEDRDIR}/tmp
else
${MERGEDMSGS}::
	@@${NOP}
endif

install${CUSTOMSA}: ${SA_MODULE}
	${MKDIR} ${INSTDIR}
	${CP} ${SA_MODULE} ${INSTDIR}/${TARGET} ${CPFLAGS}
	@@${ECHO} ${COMPONENT}: standalone module installed

debug${CUSTOMDBG}: ${DBG_MODULE}
	@@${ECHO} ${COMPONENT}: standalone debug module built

${DBG_MODULE}: ${DBG_OBJECT} ${DBG_LIBS} ${DIRS} ${SA_DEPEND}
ifeq (GNU,${TOOLCHAIN})
	${LDBIN} $@@ ${DBG_OBJECT} ${DBG_LIBS}
else
	${LD} -rmf -o $@@ ${DBG_OBJECT} ${DBG_LIBS}
endif

${DBG_OBJECT}: ${ROM_SOURCE} ${MERGEDMSGS} ${TOKHELPSRC} ${DIRS}
	${AS} ${ASFLAGS} ${ASDFLAGS} -g -pd "debugging SETL {TRUE}" -depend $(subst .o,.d,$@@) -o $@@ ${ROM_SOURCE} ${SA_FLAGS}

#gpa_debug${CUSTOMGPA}: ${GPA_FILE}
#	@@${ECHO} ${COMPONENT}: GPA debug listing generated
#
#${GPA_FILE}: ${GPA_AIF}
#	${TOGPA} -s ${GPA_AIF} ${GPA_FILE}
#
#${GPA_AIF}: ${DBG_OBJECT}
#	${LD} -aif -bin -d -o ${GPA_AIF} ${DBG_OBJECT}

#
# Export phases
#

export_hdrs: ${EXPORTS}
	@@if [ -e ${HEADER1}.hdr ]; then ${ECHO} ${CP} ${HEADER1}.hdr ${EXP_HDR}/${HEADER1} ${CPFLAGS}; fi
	@@if [ -e ${HEADER1}.hdr ]; then ${CP} ${HEADER1}.hdr ${EXP_HDR}/${HEADER1} ${CPFLAGS}; fi
	@@if [ -e ${HEADER2}.hdr ]; then ${ECHO} ${CP} ${HEADER2}.hdr ${EXP_HDR}/${HEADER2} ${CPFLAGS}; fi
	@@if [ -e ${HEADER2}.hdr ]; then ${CP} ${HEADER2}.hdr ${EXP_HDR}/${HEADER2} ${CPFLAGS}; fi
	@@if [ -e ${HEADER3}.hdr ]; then ${ECHO} ${CP} ${HEADER3}.hdr ${EXP_HDR}/${HEADER3} ${CPFLAGS}; fi
	@@if [ -e ${HEADER3}.hdr ]; then ${CP} ${HEADER3}.hdr ${EXP_HDR}/${HEADER3} ${CPFLAGS}; fi
	@@if [ -e ${HEADER4}.hdr ]; then ${ECHO} ${CP} ${HEADER4}.hdr ${EXP_HDR}/${HEADER4} ${CPFLAGS}; fi
	@@if [ -e ${HEADER4}.hdr ]; then ${CP} ${HEADER4}.hdr ${EXP_HDR}/${HEADER4} ${CPFLAGS}; fi
	@@if [ -e ${HEADER5}.hdr ]; then ${ECHO} ${CP} ${HEADER5}.hdr ${EXP_HDR}/${HEADER5} ${CPFLAGS}; fi
	@@if [ -e ${HEADER5}.hdr ]; then ${CP} ${HEADER5}.hdr ${EXP_HDR}/${HEADER5} ${CPFLAGS}; fi
	@@if [ -e ${HEADER6}.hdr ]; then ${ECHO} ${CP} ${HEADER6}.hdr ${EXP_HDR}/${HEADER6} ${CPFLAGS}; fi
	@@if [ -e ${HEADER6}.hdr ]; then ${CP} ${HEADER6}.hdr ${EXP_HDR}/${HEADER6} ${CPFLAGS}; fi
	@@if [ -e ${HEADER7}.hdr ]; then ${ECHO} ${CP} ${HEADER7}.hdr ${EXP_HDR}/${HEADER7} ${CPFLAGS}; fi
	@@if [ -e ${HEADER7}.hdr ]; then ${CP} ${HEADER7}.hdr ${EXP_HDR}/${HEADER7} ${CPFLAGS}; fi
	@@if [ -e ${HEADER8}.hdr ]; then ${ECHO} ${CP} ${HEADER8}.hdr ${EXP_HDR}/${HEADER8} ${CPFLAGS}; fi
	@@if [ -e ${HEADER8}.hdr ]; then ${CP} ${HEADER8}.hdr ${EXP_HDR}/${HEADER8} ${CPFLAGS}; fi
	@@if [ -e ${HEADER9}.hdr ]; then ${ECHO} ${CP} ${HEADER9}.hdr ${EXP_HDR}/${HEADER9} ${CPFLAGS}; fi
	@@if [ -e ${HEADER9}.hdr ]; then ${CP} ${HEADER9}.hdr ${EXP_HDR}/${HEADER9} ${CPFLAGS}; fi
	@@if [ -e ${HEADER10}.hdr ]; then ${ECHO} ${CP} ${HEADER10}.hdr ${EXP_HDR}/${HEADER10} ${CPFLAGS}; fi
	@@if [ -e ${HEADER10}.hdr ]; then ${CP} ${HEADER10}.hdr ${EXP_HDR}/${HEADER10} ${CPFLAGS}; fi
	@@if [ -e ${HEADER11}.hdr ]; then ${ECHO} ${CP} ${HEADER11}.hdr ${EXP_HDR}/${HEADER11} ${CPFLAGS}; fi
	@@if [ -e ${HEADER11}.hdr ]; then ${CP} ${HEADER11}.hdr ${EXP_HDR}/${HEADER11} ${CPFLAGS}; fi
	@@if [ -e ${HEADER12}.hdr ]; then ${ECHO} ${CP} ${HEADER12}.hdr ${EXP_HDR}/${HEADER12} ${CPFLAGS}; fi
	@@if [ -e ${HEADER12}.hdr ]; then ${CP} ${HEADER12}.hdr ${EXP_HDR}/${HEADER12} ${CPFLAGS}; fi
	@@if [ -e ${HEADER13}.hdr ]; then ${ECHO} ${CP} ${HEADER13}.hdr ${EXP_HDR}/${HEADER13} ${CPFLAGS}; fi
	@@if [ -e ${HEADER13}.hdr ]; then ${CP} ${HEADER13}.hdr ${EXP_HDR}/${HEADER13} ${CPFLAGS}; fi
	@@if [ -e ${HEADER14}.hdr ]; then ${ECHO} ${CP} ${HEADER14}.hdr ${EXP_HDR}/${HEADER14} ${CPFLAGS}; fi
	@@if [ -e ${HEADER14}.hdr ]; then ${CP} ${HEADER14}.hdr ${EXP_HDR}/${HEADER14} ${CPFLAGS}; fi
	@@if [ -e ${HEADER15}.hdr ]; then ${ECHO} ${CP} ${HEADER15}.hdr ${EXP_HDR}/${HEADER15} ${CPFLAGS}; fi
	@@if [ -e ${HEADER15}.hdr ]; then ${CP} ${HEADER15}.hdr ${EXP_HDR}/${HEADER15} ${CPFLAGS}; fi
	@@if [ -e ${HEADER16}.hdr ]; then ${ECHO} ${CP} ${HEADER16}.hdr ${EXP_HDR}/${HEADER16} ${CPFLAGS}; fi
	@@if [ -e ${HEADER16}.hdr ]; then ${CP} ${HEADER16}.hdr ${EXP_HDR}/${HEADER16} ${CPFLAGS}; fi
	@@${ECHO} ${COMPONENT}: header export complete

export_libs:
	@@${ECHO} ${COMPONENT}: library export complete

export${CUSTOMEXP}: export_${PHASE}
	@@${NOP}

export_:: export_hdrs export_libs
	@@${NOP}

# Need these to stop complaints about the rules below
ASMCHEADER1 ?= _!_x_!_
ASMCHEADER2 ?= _!_x_!_
ASMCHEADER3 ?= _!_x_!_
ASMCHEADER4 ?= _!_x_!_
ASMCHEADER5 ?= _!_x_!_
ASMCHEADER6 ?= _!_x_!_
ASMCHEADER7 ?= _!_x_!_
ASMCHEADER8 ?= _!_x_!_
CHEADER1    ?= _!_x_!_
CHEADER2    ?= _!_x_!_
CHEADER3    ?= _!_x_!_

${C_EXP_HDR}/${ASMCHEADER1}.h :: ${ASMCHEADER1}.hdr
	${HDR2H} ${ASMCHEADER1}.hdr $@@

${C_EXP_HDR}/${ASMCHEADER2}.h :: ${ASMCHEADER2}.hdr
	${HDR2H} ${ASMCHEADER2}.hdr $@@

${C_EXP_HDR}/${ASMCHEADER3}.h :: ${ASMCHEADER3}.hdr
	${HDR2H} ${ASMCHEADER3}.hdr $@@

${C_EXP_HDR}/${ASMCHEADER4}.h :: ${ASMCHEADER4}.hdr
	${HDR2H} ${ASMCHEADER4}.hdr $@@

${C_EXP_HDR}/${ASMCHEADER5}.h :: ${ASMCHEADER5}.hdr
	${HDR2H} ${ASMCHEADER5}.hdr $@@

${C_EXP_HDR}/${ASMCHEADER6}.h :: ${ASMCHEADER6}.hdr
	${HDR2H} ${ASMCHEADER6}.hdr $@@

${C_EXP_HDR}/${ASMCHEADER7}.h :: ${ASMCHEADER7}.hdr
	${HDR2H} ${ASMCHEADER7}.hdr $@@

${C_EXP_HDR}/${ASMCHEADER8}.h :: ${ASMCHEADER8}.hdr
	${HDR2H} ${ASMCHEADER8}.hdr $@@

${C_EXP_HDR}/${CHEADER1}.h :: ${CHEADER1}.h
	${CP} ${CHEADER1}.h $@@ ${CPFLAGS}

${C_EXP_HDR}/${CHEADER2}.h :: ${CHEADER2}.h
	${CP} ${CHEADER2}.h $@@ ${CPFLAGS}

${C_EXP_HDR}/${CHEADER3}.h :: ${CHEADER3}.h
	${CP} ${CHEADER3}.h $@@ ${CPFLAGS}

#
# Resources
#
resources${CUSTOMRES}:: resources-${CMDHELP}
	@@${ECHO} ${COMPONENT}: resources copied to Messages module

ifeq (${CUSTOMRES},no)
resources:
	@@${ECHO} ${COMPONENT}: no resources to export
endif        

resources_extra: ${RES_DEPENDS_}
ifneq (${RES_FILES_},)
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} ${RES_FILES_}
endif
ifneq (,$(filter Messages,${INSTRES_VERSION}))
	${INSERTVERSION} ${RESFSDIR}/Messages > ${RESFSDIR}/_Awk_
	${CP} ${RESFSDIR}/_Awk_ ${RESFSDIR}/Messages ${CPFLAGS}
	${RM} ${RESFSDIR}/_Awk_
endif
	@@${NOP}

resources_common:
	${MKDIR} ${RESFSDIR}
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} [Messages]

resources_cmdhelp: ${MERGEDMSGS}
	${CP} ${MERGEDMSGS} ${RESFSDIR}/Messages

resources-None: resources_common resources_extra
	@@${NOP}

resources-: resources_common resources_cmdhelp resources_extra 
	@@${NOP}

#
# Build the help tokens
#
${TOKENSOURCE}: ${TOKENS} ${HELPSRC}
	${TOKENISE} ${TOKENS} ${HELPSRC} $@@

include $(wildcard *.d)

endif

# EOF
@


1.5
log
@  Incremental step in cross-compilation support
Detail:
  ModuleDB:
  * Correct capitalisation of resgen's TARGET to match its main source file
  GNUmakefiles/AAsmModule:
  * Targets now given ,ffa filetype suffix
  * Support source directory layouts s/<subdir>/<leaf> as used by the
    kernel and printer drivers - define SYMLINK_EXT_FIRST to enable
  * Prevent relinking when running make on an up-to-date component due to
    a difference between amu and GNU make's handling of double-colon rules
  * Support linking with GNU toolchain
  * Fix installation rule (mixup between MERGEDMDIR and MERGEDRDIR)
  * Support up to 16 assembler and 8 C-from-assembler headers, up from 3
    of each (here's looking at you, kernel) - long-term, it might be worth
    changing this to a scheme like that used by CModule to remove any
    limits
  * Fix C-from-assembler exports to have .h suffix
  GNUmakefiles/AppLibs:
  * Define INCLUDE_OSLIB to permit OSLib header search paths to be
    specified in an OS-agnostic way
  GNUmakefiles/CApp:
  * Prevent relinking when running make on an up-to-date component due to
    a difference between amu and GNU make's handling of double-colon rules
  GNUmakefiles/CLibrary:
  * Prevent rearchiving when running make on an up-to-date component due
    to a difference between amu and GNU make's handling of double-colon
    rules
  * Don't use .hdr suffix on exported assembler header files
  * Correct order of dependencies for export_libs phony target
  GNUmakefiles/StdTools:
  * Definition for the module filetype suffix
  * Add LDBIN tool for GNU/Norcroft-agnostic binary link, useful for
    linking position-independent binary code, such as relocatable modules
    (i.e. ones that don't require the linker to create a __RelocCode
    function)
  * FAPPEND function now works if the same file is used for the
    destination as for one of the sources (this is used by CModule)
  GNUmakefiles/CModule, ModStdRule, ModuleLibs:
  * Finally created cross-compilation versions of the last major shared
    makefiles! Warning: these have received limited testing to date.
  Makefiles/AAsmModule:
  * Support up to 16 assembler and 8 C-from-assembler headers
  Makefiles/AppLibs, ModuleLibs:
  * Define INCLUDE_OSLIB
  Makefiles/StdTools:
  * Add LDBIN tool


Version 7.24. Tagged as 'BuildSys-7_24'
@
text
@d233 1
a233 1
	${CAT} ${MERGEDRDIR}/tmp/Messages ${MERGEDMRDIR}/tmp/CmdHelp > $@@
@


1.4
log
@  Changes to keep GNUmakefiles and Makefiles compatible
Detail:
  GNUmakefiles/AAsmModule:
  * Adopt same extensible syntax for describing resources phase files as CModule (see BuildSys 6.91)
  GNUmakefiles/AppLibs:
  * Don't permit CALLXLIB to be used for application builds (see BuildSys 6.61)
  * Reflect MODMALLOCLIB leafname change (see BuildSys 6.61)
  * Add TBOXINTLIB, TBOXINTDBGLIB, PDEBUGLIB, PRISMLIB, REMOTEDBLIB, TRACELIB, UNICODELIB and include more libs in DEBUGLIBS (see BuildSys 6.63)
  GNUmakefiles/CApp:
  * Add install_debug_app rule for debug app installations (see BuildSys 6.53)
  GNUmakefiles/CLibrary:
  * Allow additional dependencies to be specified using LIB_DEPENDS (see BuildSys 6.63)
  * Gains install target (see BuildSys 7.15)
  GNUmakefiles/StdTools:
  * Add shell implementation of FAppend (see BuildSys 6.45) - compatible except for the fact that the destination is given current timestamp
  * ${NOP} no longer implicitly includes the silent-command prefix character @@ (see BuildSys 6.50)
  * Add CPVFLAGS (see BuildSys 6.53) although it can't achieve anything as a suffix to the command
  * Add shell implementation of EraseCVS (see BuildSys 6.53)
  * Add InstViaRG tool (see BuildSys 6.70)


Version 7.21. Tagged as 'BuildSys-7_21'
@
text
@d52 1
a52 1
# SOURCES_TO_LINK (opt) (files which need be linked to by the link farm, in addition to contents of hdr and s directories)
d82 1
a82 1
ROM_MODULE ?= ${TARGET}
d89 1
a89 1
SA_MODULE  ?= ${TARGET}SA
d106 1
a106 1
DBG_MODULE ?= ${TARGET}D
d146 5
d154 1
a154 1
			linkdest=`echo ${linksource} | sed -e 's,\([^/]*\)/\([^/]*\)$$,\2.\1,' -e 's,^,objs/,'`; \
d178 6
a183 1
${DIRS} ::
d198 3
d204 1
d216 3
d220 1
d229 6
a234 5
	${TOUCH} ${MERGEDMDIR}/tmp/Messages
	${TOUCH} ${MERGEDMDIR}/tmp/CmdHelp
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${MERGEDMDIR} [Messages] [CmdHelp]
	${CAT} ${MERGEDMDIR}/tmp/Messages ${MERGEDMDIR}/tmp/CmdHelp > $@@
	${WIPE} ${MERGEDMDIR}/tmp
d249 3
d253 1
d278 26
d319 5
d328 1
a328 1
${C_EXP_HDR}/${ASMCHEADER1} :: ${ASMCHEADER1}.hdr
d331 1
a331 1
${C_EXP_HDR}/${ASMCHEADER2} :: ${ASMCHEADER2}.hdr
d334 1
a334 1
${C_EXP_HDR}.${ASMCHEADER3} :: ${ASMCHEADER3}.hdr
d337 16
a352 1
${C_EXP_HDR}.${CHEADER1}.h :: ${CHEADER1}.h
d355 1
a355 1
${C_EXP_HDR}.${CHEADER2}.h :: ${CHEADER2}.h
d358 1
a358 1
${C_EXP_HDR}.${CHEADER3}.h :: ${CHEADER3}.h
@


1.3
log
@Change less useful resources_messages for resources_sprites
GNU/AAsmModule:
 Swap round ${RESOURCEEXTRA} to come later, since otherwise the ${RESDIR} hasn't been created
AAsmModule & CModule:
 Recemtly added resources_messages was a bit pointless as resources_common did the same thing, instead add resources_sprites.
ModuleLibs:
 Debug library for internal Toolbox objects added.
Retagged as BuildSys-6_50.
@
text
@a20 1
# RESFSDIR        (opt) (actual directory to export resources to - otherwise ${RESDIR}/${TARGET})
d39 7
d66 1
a86 2
RESFSDIR   ?= ${RESDIR}/${TARGET}
RESAPPDIR  ?= ${RESDIR}/../Apps/${APP}
d91 8
a98 2
MERGEDMDIR ?= _Messages_
MERGEDMSGS ?= ${MERGEDMDIR}/${TARGET}
d117 8
d208 5
a212 4
${MERGEDMSGS}${PRIVATEMSGS}:
	${MKDIR} ${MERGEDMDIR}
	${TOUCH} ${MERGEDMDIR}.Messages
	${TOUCH} ${MERGEDMDIR}.CmdHelp
d214 6
a219 2
	${CAT} ${MERGEDMDIR}.Messages ${MERGEDMDIR}.CmdHelp > $@@
	${RM} ${MERGEDMDIR}.Messages ${MERGEDMDIR}.CmdHelp
d261 1
a261 1
	${NOP}
d264 1
a264 1
	${NOP}
d293 1
a293 1
# Resources rules
d295 1
a295 1
resources${CUSTOMRES}:: ${RESOURCEEXTRA} resources-${CMDHELP} 
d303 12
a314 1
resources-None:
d316 1
a316 3
	${MKDIR} ${MERGEDMDIR}
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} Messages
	${RM} ${MERGEDMDIR}.Messages
d318 1
a318 2
resources-: ${MERGEDMSGS}
	${MKDIR} ${RESFSDIR}
a319 6
        
resources_res::
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} Res
        
resources_sprites::
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} Sprites [Sprites11] [Sprites22]
d321 5
a325 2
resources_templates::
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} Templates
@


1.3.2.1
log
@file AAsmModule was added on branch RPiFreeze on 2014-10-12 10:36:26 +0000
@
text
@d1 308
@


1.3.2.2
log
@Merge of BuildSys-6_52 to branch

Version 6.00, 1.142.2.5. Tagged as 'BuildSys-6_00-1_142_2_5'
@
text
@a0 308
# Makefile fragment for assembler modules, previously built using AAsm but now using objasm
# Such modules are characterised by the use of position-independent code
# and multiple source files (if applicable) linked at the assembly stage
# (using LNK and GET directives) rather than at the link stage.

INCLUDED_AASMMODULE = YES

#
# This makefile provides the following phony targets:
#
#    all     rom           install_rom   resources
#    export  export_libs   export_hdrs   standalone         install
#    clean   debug         gpa_debug
#
#
# This fragment uses the following macros set by the master makefile.
#
#
# COMPONENT             (the name of the component)
# TARGET          (opt) (the leafname of the module - otherwise ${COMPONENT})
# RESFSDIR        (opt) (actual directory to export resources to - otherwise ${RESDIR}/${TARGET})
# ROM_MODULE      (opt) (output filename - otherwise ${TARGET})
# ROM_OBJECT      (opt) (object file for romming - otherwise ${TARGET}.o)
# ROM_LIBS        (opt) (libraries to link again ROM_OBJECT to generate ROM_MODULE)
# ROM_DEPEND      (opt) (any extra dependency to assert on ROM_MODULE)
# DBG_MODULE      (opt) (output filename for debug - otherwise ${TARGET}D
# DBG_OBJECT      (opt) (object file for debug - otherwise ${TARGET}D.o
# DBG_LIBS        (opt) (libraries to link against DBG_OBJECT to generate DBG_MODULE - otherwise ${ROM_LIBS})
# SA_MODULE       (opt) (output filename for softload - otherwise ${TARGET}SA
# SA_OBJECT       (opt) (object file for softload - otherwise ${TARGET}SA.o
# SA_LIBS         (opt) (libraries to link against SA_OBJECT to generate SA_MODULE - otherwise ${ROM_LIBS})
# SA_DEPEND       (opt) (any extra dependency to assert on SA_MODULE and DBG_MODULE)
# DIRS            (opt) (magic target to ensure object directories are present - otherwise _dirs)
# HEADER[1-3]     (opt) (leafname of file in hdr to copy to ${EXPORTDIR} on export_hdrs)
# ASMCHEADER[1-3] (opt) (C-from-assembly auto-generated header files to export, no Hdr. prefix - otherwise none)
# CHEADER[1-3]    (opt) (C header files to export - otherwise none)
# EXPORTS         (opt) (list of C and C-from-assembly headers to export)
# C_EXP_HDR       (opt) (C header target directory - otherwise ${CEXPORTDIR}/Interface)
# EXP_HDR         (opt) (directory for exported assembler interface headers)
# CUSTOMEXP       (opt) (set to "custom" to override the export rules)
# CUSTOMRES       (opt) (set to "custom" to override the resources rules, or "no" for no resources)
# CUSTOMROM       (opt) (set to "custom" to override the rom rules)
# CUSTOMSA        (opt) (set to "custom" to override the standalone rules)
# CUSTOMDBG       (opt) (set to "custom" to override the debug rules)
# CUSTOMGPA       (opt) (set to "custom" to override the GPA rules)
# SOURCES_TO_LINK (opt) (files which need be linked to by the link farm, in addition to contents of hdr and s directories)
#
#
# It relies on the following from the build system:
#
#
# INSTDIR          (installation directory for ROM_MODULE or disc install)
# INSTALLDIR       (if INSTDIR was not specified by the build system)
# RESDIR           (installation directory for resources - cf. RESFSDIR)
# EXPORTDIR        (export directory for assembler interface headers)
# CEXPORTDIR       (export directory for C interface headers)
# HDRDIR           (top-level export directory for assembler headers)
# CMDHELP          (optional, set to None to exclude syntax errors from Messages)
# PHASE            (export phase discriminator)
#
#
# It relies on the following generic tool macros from the Tools makefile
#
# CP + CPFLAGS     (copy, cp etc.)
# AS + ASFLAGS     (assembler)
# MKDIR            (cdir/mkdir -p)
# RM + WIPE        (deletions)
# ECHO
# LD               (linker)
#
#

TARGET     ?= ${COMPONENT}
INSTDIR    ?= ${INSTALLDIR}
ROM_MODULE ?= ${TARGET}
ROM_SOURCE ?= ${TARGET}.s
ROM_OBJECT ?= ${TARGET}.o
DIRS       ?= _dirs
EXP_HDR    ?= ${EXPORTDIR}
RESFSDIR   ?= ${RESDIR}/${TARGET}
RESAPPDIR  ?= ${RESDIR}/../Apps/${APP}
C_EXP_HDR  ?= ${CEXPORTDIR}/Interface

SA_MODULE  ?= ${TARGET}SA
SA_OBJECT  ?= ${TARGET}SA.o
MERGEDMDIR ?= _Messages_
MERGEDMSGS ?= ${MERGEDMDIR}/${TARGET}
ifeq (${CMDHELP},None)
SA_FLAGS   ?= -PD "standalone SETL {TRUE}" -PD "MergedMsgs SETS \"${MERGEDMSGS}\"" -PD "international_help SETL {FALSE}"
else
SA_FLAGS   ?= -PD "standalone SETL {TRUE}" -PD "MergedMsgs SETS \"${MERGEDMSGS}\""
endif
SA_LIBS    ?= ${ROM_LIBS}

DBG_MODULE ?= ${TARGET}D
DBG_OBJECT ?= ${TARGET}D.o
DBG_LIBS   ?= ${ROM_LIBS}

#GPA_FILE   ?= ${TARGET}.gpa
#GPA_AIF    ?= ${TARGET}.aif

TOKENS     ?= ${HDRDIR}/Global/Tokens

TOKENSOURCE ?= TokHelpSrc.s

SOURCES_TO_SYMLINK += $(wildcard h/*) $(wildcard hdr/*) $(wildcard s/*) Resources VersionNum VersionASM

ifneq (objs,$(notdir ${CURDIR}))

# Makefile invoked from same directory
# Create link farm, then execute the makefile from within it

ifeq (clean,${MAKECMDGOALS})
# With a double-colon rule which can have additional actions assigned from the
# master makefile, we'd normally need the master makefile to include the
# ${CURDIR} check to ensure that it's performed on the same invocation as us.
# However, there's no real benefit to performing clean from within the objs
# directory, and it adds an ordering problem between the different double-colon
# rules (the one that deletes the objs directory has to be last otherwise the
# cwd is invalid for the others) so to simplify things, we only ever do cleans
# from the same directory as the Makefile.
clean::
	@@echo Cleaning...
	@@rm -rf objs
	@@echo ${COMPONENT}: cleaned
else
all debug export export_hdrs export_libs gpa_debug install install_rom links resources rom standalone: ${SYMLINK_DEPEND}
	$(foreach linksource,${SOURCES_TO_SYMLINK}, \
		$(shell \
			linkdest=`echo ${linksource} | sed -e 's,\([^/]*\)/\([^/]*\)$$,\2.\1,' -e 's,^,objs/,'`; \
			linkdestdir=`echo $$linkdest | sed -e 's,/[^/]*$$,,'`; \
			linkbackpath=`echo $$linkdestdir | sed -e 's,[^/]*,..,g'`; \
			[ -d ${linksource} ] || [ -L $$linkdest ] || mkdir -p $$linkdestdir; \
			[ -d ${linksource} ] || [ -L $$linkdest ] || ln -s $$linkbackpath/${linksource} $$linkdest; \
		 ) \
	)
	@@[ -L objs/Resources ] || ln -s ../Resources objs/Resources
	@@mkdir -p objs
ifneq (links,${MAKECMDGOALS})
	@@${MAKE} -C objs -f ../$(firstword ${MAKEFILE_LIST}) ${MAKECMDGOALS}
endif
endif

else

# Makefile invoked from objs subdirectory

ifeq ("${INCLUDED_STDTOOLS}","")
include StdTools
endif

all: rom debug standalone

${DIRS} ::
	${TOUCH} $@@

#
# ROM build rules
#
rom${CUSTOMROM}: ${ROM_MODULE}
	@@${ECHO} ${COMPONENT}: rom module built

install_rom${CUSTOMROM}: ${ROM_MODULE}
	${CP} ${ROM_MODULE} ${INSTDIR}/${TARGET} ${CPFLAGS}
	#${CP} ${ROM_MODULE}_gpa ${INSTDIR}/${TARGET}_gpa ${CPFLAGS}
	@@${ECHO} ${COMPONENT}: rom module installed

${ROM_MODULE}: ${ROM_DEPEND} ${DIRS} ${ROM_LIBS} ${ROM_OBJECT}
	${LD} -rmf -o $@@ ${ROM_OBJECT} ${ROM_LIBS}
	#${LD} -aif -bin -d -Entry 0 -o ${ROM_MODULE}_aif ${ROM_OBJECT} ${ROM_LIBS}
	#${TOGPA} -s ${ROM_MODULE}_aif ${ROM_MODULE}_gpa

${ROM_OBJECT}: ${DIRS} ${TOKHELPSRC} ${ROM_SOURCE}
	${AS} ${ASFLAGS} -depend $(subst .o,.d,$@@) -g -o $@@ ${ROM_SOURCE}

#
# Standalone builds
#
standalone${CUSTOMSA}: ${SA_MODULE}
	@@${ECHO} ${COMPONENT}: standalone module built

${SA_MODULE}: ${SA_DEPEND} ${DIRS} ${SA_LIBS} ${SA_OBJECT}
	${LD} -rmf -o $@@ ${SA_OBJECT} ${SA_LIBS}
	${MODSQZ} -f ${MODSQZFLAGS} $@@

${SA_OBJECT}: ${DIRS} ${TOKHELPSRC} ${MERGEDMSGS} ${ROM_SOURCE}
	${AS} ${ASFLAGS} -depend $(subst .o,.d,$@@) -o $@@ ${ROM_SOURCE} ${SA_FLAGS}

${MERGEDMSGS}${PRIVATEMSGS}:
	${MKDIR} ${MERGEDMDIR}
	${TOUCH} ${MERGEDMDIR}.Messages
	${TOUCH} ${MERGEDMDIR}.CmdHelp
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${MERGEDMDIR} [Messages] [CmdHelp]
	${CAT} ${MERGEDMDIR}.Messages ${MERGEDMDIR}.CmdHelp > $@@
	${RM} ${MERGEDMDIR}.Messages ${MERGEDMDIR}.CmdHelp

install${CUSTOMSA}: ${SA_MODULE}
	${MKDIR} ${INSTDIR}
	${CP} ${SA_MODULE} ${INSTDIR}/${TARGET} ${CPFLAGS}
	@@${ECHO} ${COMPONENT}: standalone module installed

debug${CUSTOMDBG}: ${DBG_MODULE}
	@@${ECHO} ${COMPONENT}: standalone debug module built

${DBG_MODULE}: ${DBG_OBJECT} ${DBG_LIBS} ${DIRS} ${SA_DEPEND}
	${LD} -rmf -o $@@ ${DBG_OBJECT} ${DBG_LIBS}

${DBG_OBJECT}: ${ROM_SOURCE} ${MERGEDMSGS} ${TOKHELPSRC} ${DIRS}
	${AS} ${ASFLAGS} ${ASDFLAGS} -g -pd "debugging SETL {TRUE}" -depend $(subst .o,.d,$@@) -o $@@ ${ROM_SOURCE} ${SA_FLAGS}

#gpa_debug${CUSTOMGPA}: ${GPA_FILE}
#	@@${ECHO} ${COMPONENT}: GPA debug listing generated
#
#${GPA_FILE}: ${GPA_AIF}
#	${TOGPA} -s ${GPA_AIF} ${GPA_FILE}
#
#${GPA_AIF}: ${DBG_OBJECT}
#	${LD} -aif -bin -d -o ${GPA_AIF} ${DBG_OBJECT}

#
# Export phases
#

export_hdrs: ${EXPORTS}
	@@if [ -e ${HEADER1}.hdr ]; then ${ECHO} ${CP} ${HEADER1}.hdr ${EXP_HDR}/${HEADER1} ${CPFLAGS}; fi
	@@if [ -e ${HEADER1}.hdr ]; then ${CP} ${HEADER1}.hdr ${EXP_HDR}/${HEADER1} ${CPFLAGS}; fi
	@@if [ -e ${HEADER2}.hdr ]; then ${ECHO} ${CP} ${HEADER2}.hdr ${EXP_HDR}/${HEADER2} ${CPFLAGS}; fi
	@@if [ -e ${HEADER2}.hdr ]; then ${CP} ${HEADER2}.hdr ${EXP_HDR}/${HEADER2} ${CPFLAGS}; fi
	@@if [ -e ${HEADER3}.hdr ]; then ${ECHO} ${CP} ${HEADER3}.hdr ${EXP_HDR}/${HEADER3} ${CPFLAGS}; fi
	@@if [ -e ${HEADER3}.hdr ]; then ${CP} ${HEADER3}.hdr ${EXP_HDR}/${HEADER3} ${CPFLAGS}; fi
	@@${ECHO} ${COMPONENT}: header export complete

export_libs:
	@@${ECHO} ${COMPONENT}: library export complete

export${CUSTOMEXP}: export_${PHASE}
	${NOP}

export_:: export_hdrs export_libs
	${NOP}

# Need these to stop complaints about the rules below
ASMCHEADER1 ?= _!_x_!_
ASMCHEADER2 ?= _!_x_!_
ASMCHEADER3 ?= _!_x_!_
CHEADER1    ?= _!_x_!_
CHEADER2    ?= _!_x_!_
CHEADER3    ?= _!_x_!_

${C_EXP_HDR}/${ASMCHEADER1} :: ${ASMCHEADER1}.hdr
	${HDR2H} ${ASMCHEADER1}.hdr $@@

${C_EXP_HDR}/${ASMCHEADER2} :: ${ASMCHEADER2}.hdr
	${HDR2H} ${ASMCHEADER2}.hdr $@@

${C_EXP_HDR}.${ASMCHEADER3} :: ${ASMCHEADER3}.hdr
	${HDR2H} ${ASMCHEADER3}.hdr $@@

${C_EXP_HDR}.${CHEADER1}.h :: ${CHEADER1}.h
	${CP} ${CHEADER1}.h $@@ ${CPFLAGS}

${C_EXP_HDR}.${CHEADER2}.h :: ${CHEADER2}.h
	${CP} ${CHEADER2}.h $@@ ${CPFLAGS}

${C_EXP_HDR}.${CHEADER3}.h :: ${CHEADER3}.h
	${CP} ${CHEADER3}.h $@@ ${CPFLAGS}

#
# Resources rules
#
resources${CUSTOMRES}:: ${RESOURCEEXTRA} resources-${CMDHELP} 
	@@${ECHO} ${COMPONENT}: resources copied to Messages module

ifeq (${CUSTOMRES},no)
resources:
	@@${ECHO} ${COMPONENT}: no resources to export
endif        

resources-None:
	${MKDIR} ${RESFSDIR}
	${MKDIR} ${MERGEDMDIR}
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} Messages
	${RM} ${MERGEDMDIR}.Messages

resources-: ${MERGEDMSGS}
	${MKDIR} ${RESFSDIR}
	${CP} ${MERGEDMSGS} ${RESFSDIR}/Messages
        
resources_res::
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} Res
        
resources_sprites::
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} Sprites [Sprites11] [Sprites22]

resources_templates::
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} Templates

#
# Build the help tokens
#
${TOKENSOURCE}: ${TOKENS} ${HELPSRC}
	${TOKENISE} ${TOKENS} ${HELPSRC} $@@

include $(wildcard *.d)

endif

# EOF
@


1.2
log
@Make debug builds a bit simpler
AAsmModule:
 Remove SA_DEBUG override, instead use ASDFLAGS like CModule does.
CModule:
 If the target is 'debug' allow CMHGDFLAGS to pass extra defines into CMHG, this avoids the common problem of having to have 2 CMHG files and select between them.

Other - sync the messages token check/copying, use ${NOP} and ${FAPPEND} and ${DO}, and od.${RES_OBJ} isn't dependent on ${DIRS} since it already has that when creating o.${RES_OBJ}.

Version 6.50. Tagged as 'BuildSys-6_50'
@
text
@d271 1
a271 1
resources${CUSTOMRES}:: resources-${CMDHELP} ${RESOURCEEXTRA}
d292 2
a293 2
resources_messages::
	${INSTRES} -I Resources.${USERIF}.${LOCALE},Resources.${USERIF}.UK,Resources.${LOCALE},Resources.UK,Resources ${RESFSDIR} Messages
@


1.1
log
@  Improvements to AAsmModule shared makefile
Detail:
  * Corrected and added documentation at head of file
  * Now defines an "all" target
  * DIRS now has a default value (i.e. behaviour now matches the other shared
    makefiles) freeing the master makefile from needing to specify platform-
    specific paths
  * Added cross-compilation version
Admin:
  Tested by cross-compiling the BASIC module


Version 6.49. Tagged as 'BuildSys-6_49'
@
text
@a96 1
SA_DEBUG   ?= -g -PreDefine "debugging SETL {TRUE}"
d209 1
a209 1
	${AS} ${ASFLAGS} -depend $(subst .o,.d,$@@) -o $@@ ${ROM_SOURCE} ${SA_FLAGS} ${SA_DEBUG}
@

