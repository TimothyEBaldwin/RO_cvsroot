head	1.7;
access;
symbols
	BuildSys-7_30:1.7
	BuildSys-7_29:1.7
	BuildSys-7_28:1.7
	BuildSys-7_27:1.7
	BuildSys-7_26:1.7
	BuildSys-7_25:1.7
	BuildSys-7_24:1.7
	BuildSys-7_23:1.6
	BuildSys-7_22:1.6
	BuildSys-7_21:1.6
	BuildSys-7_20:1.5
	BuildSys-7_19:1.5
	BuildSys-7_18:1.5
	BuildSys-7_17:1.5
	BuildSys-7_16:1.5
	BuildSys-7_15:1.5
	BuildSys-7_14:1.5
	BuildSys-7_13:1.5
	BuildSys-7_12:1.5
	BuildSys-7_11:1.5
	BuildSys-7_10:1.5
	BuildSys-7_09:1.5
	BuildSys-6_00-1_142_2_10:1.3.2.2
	BuildSys-7_08:1.5
	BuildSys-7_07:1.5
	BuildSys-7_06:1.5
	BuildSys-7_05:1.5
	BuildSys-6_00-1_142_2_9:1.3.2.2
	BuildSys-7_04:1.5
	BuildSys-7_03:1.5
	BuildSys-7_02:1.5
	BuildSys-7_01:1.5
	BuildSys-7_00:1.5
	BuildSys-6_99:1.5
	BuildSys-6_98:1.5
	BuildSys-6_97:1.5
	BuildSys-6_96:1.5
	BuildSys-6_95:1.5
	BuildSys-6_94:1.5
	BuildSys-6_93:1.5
	BuildSys-6_92:1.5
	BuildSys-6_91:1.5
	BuildSys-6_90:1.5
	BuildSys-6_89:1.5
	BuildSys-6_81-1:1.5
	BuildSys-6_88:1.5
	BuildSys-6_87:1.5
	BuildSys-6_86:1.5
	BuildSys-6_85:1.5
	BuildSys-6_84:1.5
	BuildSys-6_83:1.5
	BuildSys-6_82:1.5
	BuildSys-6_81:1.5
	BuildSys-6_80:1.5
	BuildSys-6_79:1.5
	BuildSys-6_78:1.5
	BuildSys-6_77:1.5
	BuildSys-6_76:1.5
	BuildSys-6_75:1.5
	BuildSys-6_74:1.5
	BuildSys-6_73:1.5
	BuildSys-6_72:1.5
	BuildSys-6_71:1.5
	BuildSys-6_70:1.5
	BuildSys-6_69:1.5
	BuildSys-6_68:1.5
	BuildSys-6_67:1.5
	BuildSys-6_66-1:1.5
	BuildSys-6_66:1.5
	BuildSys-6_65:1.5
	BuildSys-6_00-1_142_2_8:1.3.2.2
	BuildSys-6_00-1_142_2_7:1.3.2.2
	BuildSys-6_00-1_142_2_6:1.3.2.2
	BuildSys-6_64:1.5
	BuildSys-6_63:1.5
	BuildSys-6_62:1.5
	BuildSys-6_61:1.5
	BuildSys-6_60:1.5
	BuildSys-6_59:1.5
	BuildSys-6_58:1.5
	BuildSys-6_57:1.5
	BuildSys-6_56:1.5
	BuildSys-6_55:1.5
	BuildSys-6_54:1.5
	BuildSys-6_53:1.5
	BuildSys-6_00-1_142_2_5:1.3.2.2
	BuildSys-6_52:1.5
	BuildSys-6_51:1.5
	BuildSys-6_50:1.5
	BuildSys-6_49:1.5
	BuildSys-6_48:1.5
	BuildSys-6_47:1.5
	BuildSys-6_46:1.5
	BuildSys-6_45:1.4
	BuildSys-6_44:1.4
	BuildSys-6_43:1.4
	BuildSys-6_42:1.4
	BuildSys-6_41:1.4
	BuildSys-6_40:1.4
	BuildSys-6_39:1.4
	BuildSys-6_38:1.4
	BuildSys-6_00-1_142_2_4:1.3.2.1
	BuildSys-6_37:1.4
	BuildSys-6_36:1.4
	BuildSys-6_35:1.4
	BuildSys-6_34:1.4
	BuildSys-6_33:1.4
	BuildSys-6_32:1.4
	BuildSys-6_31:1.3
	BuildSys-6_30:1.3
	BuildSys-6_29:1.3
	BuildSys-6_28:1.3
	BuildSys-6_27:1.3
	BuildSys-6_26:1.3
	BuildSys-6_25:1.3
	BuildSys-6_24:1.3
	BuildSys-6_23:1.3
	BuildSys-6_22:1.3
	BuildSys-6_21:1.3
	BuildSys-6_20:1.3
	BuildSys-6_00-1_142_2_3:1.3
	BuildSys-6_19:1.3
	BuildSys-6_18:1.3
	BuildSys-6_17:1.3
	BuildSys-6_16:1.3
	BuildSys-6_15:1.3
	BuildSys-6_14:1.3
	BuildSys-6_13:1.3
	BuildSys-6_12:1.3
	BuildSys-6_00-1_142_2_2:1.3
	BuildSys-6_11:1.3
	BuildSys-6_10:1.3
	BuildSys-6_09:1.3
	BuildSys-6_08:1.3
	BuildSys-6_07:1.3
	BuildSys-6_06:1.3
	BuildSys-6_05:1.3
	BuildSys-6_04:1.3
	BuildSys-6_03:1.3
	BuildSys-6_02:1.3
	BuildSys-6_01:1.3
	BuildSys-6_00-1_142_2_1:1.3
	RPiFreeze:1.3.0.2
	BuildSys-6_00:1.3
	BuildSys-5_99:1.3
	BuildSys-5_98:1.3
	BuildSys-5_97:1.3
	BuildSys-5_96:1.3
	BuildSys-5_95:1.3
	BuildSys-5_94:1.3
	BuildSys-5_93:1.3
	BuildSys-5_92:1.3
	BuildSys-5_91:1.3
	BuildSys-5_90:1.3
	BuildSys-5_89:1.3
	BuildSys-5_88:1.3
	BuildSys-5_87:1.3
	BuildSys-5_86:1.3
	BuildSys-5_85:1.3
	BuildSys-5_84:1.3
	BuildSys-5_83:1.3
	BuildSys-5_82:1.3
	BuildSys-5_81:1.3
	BuildSys-5_80:1.3
	BuildSys-5_79:1.3
	BuildSys-5_78:1.3
	BuildSys-5_77:1.3
	BuildSys-5_76:1.3
	BuildSys-5_75:1.3
	BuildSys-5_74:1.3
	BuildSys-5_73:1.3
	BuildSys-5_72:1.3
	BuildSys-5_71:1.3
	BuildSys-5_70:1.3
	BuildSys-5_69:1.3
	BuildSys-5_68:1.3
	BuildSys-5_67:1.3
	BuildSys-5_66:1.3
	BuildSys-5_65:1.3
	BuildSys-5_64:1.3
	BuildSys-5_63:1.3
	BuildSys-5_62:1.3
	BuildSys-5_61:1.3
	BuildSys-5_60:1.3
	BuildSys-5_59:1.3
	BuildSys-5_58:1.3
	BuildSys-5_57:1.3
	BuildSys-5_56:1.3
	BuildSys-5_55:1.3
	BuildSys-5_54:1.3
	BuildSys-5_53:1.3
	BuildSys-5_52:1.3
	BuildSys-5_51:1.3
	BuildSys-5_50:1.3
	BuildSys-5_49:1.3
	BuildSys-5_48:1.3
	BuildSys-5_47:1.3
	BuildSys-5_46:1.3
	BuildSys-5_45:1.3
	BuildSys-5_44:1.3
	BuildSys-5_43:1.3
	BuildSys-5_42:1.3
	BuildSys-5_41:1.3
	BuildSys-5_40:1.3
	BuildSys-5_39:1.3
	BuildSys-5_38:1.3
	BuildSys-5_37:1.3
	BuildSys-5_36:1.3
	BuildSys-5_35:1.3
	BuildSys-5_34:1.3
	BuildSys-5_33:1.3
	BuildSys-5_32:1.3
	BuildSys-5_31:1.3
	BuildSys-5_30:1.3
	BuildSys-5_29:1.3
	BuildSys-5_28:1.3
	BuildSys-5_27:1.3
	BuildSys-5_26:1.3
	BuildSys-5_25:1.3
	BuildSys-5_24:1.3
	BuildSys-5_23:1.3
	BuildSys-5_22:1.3
	BuildSys-5_21:1.3
	BuildSys-5_20:1.2
	BuildSys-5_19:1.2
	BuildSys-5_18:1.2
	BuildSys-5_17:1.2
	BuildSys-5_16:1.2
	BuildSys-5_15:1.2
	BuildSys-5_14:1.2
	BuildSys-5_13:1.2
	BuildSys-5_12:1.2
	BuildSys-5_11:1.2
	BuildSys-5_10:1.2
	BuildSys-5_09:1.2
	BuildSys-5_08:1.2
	BuildSys-5_07:1.2
	BuildSys-5_06:1.2
	BuildSys-5_05:1.2
	BuildSys-5_04:1.2
	BuildSys-5_03:1.2
	BuildSys-5_02:1.1
	BuildSys-5_01:1.1;
locks; strict;
comment	@# @;


1.7
date	2018.04.11.23.21.09;	author bavison;	state Exp;
branches;
next	1.6;
commitid	IH1EokSuAjoQZ4yA;

1.6
date	2018.03.12.21.44.40;	author bavison;	state Exp;
branches;
next	1.5;
commitid	k1x0Nm0F4RqwqduA;

1.5
date	2014.07.19.16.07.28;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	nA0HBUmfswSon0Jx;

1.4
date	2013.11.11.00.50.35;	author bavison;	state Exp;
branches;
next	1.3;
commitid	Tr3fHk0Gie15lNcx;

1.3
date	2011.09.12.23.00.47;	author bavison;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	mwF3dZUt3oUN7gzv;

1.2
date	2010.10.20.23.14.23;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.19.14.47.57;	author bavison;	state Exp;
branches;
next	;

1.3.2.1
date	2014.02.20.21.02.44;	author rsprowson;	state Exp;
branches;
next	1.3.2.2;
commitid	HvOFwLQ3c6PzNSpx;

1.3.2.2
date	2014.10.12.10.36.26;	author rsprowson;	state Exp;
branches;
next	;
commitid	tHT6hsrmkNpoOTTx;


desc
@@


1.7
log
@  Incremental step in cross-compilation support
Detail:
  ModuleDB:
  * Correct capitalisation of resgen's TARGET to match its main source file
  GNUmakefiles/AAsmModule:
  * Targets now given ,ffa filetype suffix
  * Support source directory layouts s/<subdir>/<leaf> as used by the
    kernel and printer drivers - define SYMLINK_EXT_FIRST to enable
  * Prevent relinking when running make on an up-to-date component due to
    a difference between amu and GNU make's handling of double-colon rules
  * Support linking with GNU toolchain
  * Fix installation rule (mixup between MERGEDMDIR and MERGEDRDIR)
  * Support up to 16 assembler and 8 C-from-assembler headers, up from 3
    of each (here's looking at you, kernel) - long-term, it might be worth
    changing this to a scheme like that used by CModule to remove any
    limits
  * Fix C-from-assembler exports to have .h suffix
  GNUmakefiles/AppLibs:
  * Define INCLUDE_OSLIB to permit OSLib header search paths to be
    specified in an OS-agnostic way
  GNUmakefiles/CApp:
  * Prevent relinking when running make on an up-to-date component due to
    a difference between amu and GNU make's handling of double-colon rules
  GNUmakefiles/CLibrary:
  * Prevent rearchiving when running make on an up-to-date component due
    to a difference between amu and GNU make's handling of double-colon
    rules
  * Don't use .hdr suffix on exported assembler header files
  * Correct order of dependencies for export_libs phony target
  GNUmakefiles/StdTools:
  * Definition for the module filetype suffix
  * Add LDBIN tool for GNU/Norcroft-agnostic binary link, useful for
    linking position-independent binary code, such as relocatable modules
    (i.e. ones that don't require the linker to create a __RelocCode
    function)
  * FAPPEND function now works if the same file is used for the
    destination as for one of the sources (this is used by CModule)
  GNUmakefiles/CModule, ModStdRule, ModuleLibs:
  * Finally created cross-compilation versions of the last major shared
    makefiles! Warning: these have received limited testing to date.
  Makefiles/AAsmModule:
  * Support up to 16 assembler and 8 C-from-assembler headers
  Makefiles/AppLibs, ModuleLibs:
  * Define INCLUDE_OSLIB
  Makefiles/StdTools:
  * Add LDBIN tool


Version 7.24. Tagged as 'BuildSys-7_24'
@
text
@# Makefile fragment for defining the various tools and their options

INCLUDED_STDTOOLS = YES

#
# These are the tool definitions for builds using either the Norcroft or GNU toolchain in a POSIX environment, targetting RISC OS.
#

ifneq (Host,${APCS})
GNUTOOLPREFIX = arm-unknown-riscos-
SUFFIX_MODULE   = ,ffa
SUFFIX_ABSOLUTE = ,ff8
SUFFIX_OBEY     = ,feb
SUFFIX_DEBIMAGE = ,fd3
endif

#
# Core toolset.
#
ifeq (GNU,${TOOLCHAIN})
AOFASM          = asasm -aof
AR              = ${GNUTOOLPREFIX}ar
AS              = asasm
CC              = ${GNUTOOLPREFIX}gcc
C++             = ${GNUTOOLPREFIX}g++
CMHG            = cmunge
CPREPRO         = gcc -E -x c
ELF2AIF         = elf2aif
ifeq (C++,${LINK_TYPE})
LD              = ${GNUTOOLPREFIX}g++
else
LD              = ${GNUTOOLPREFIX}gcc
endif
LDBIN           = ldbin () { arm-unknown-riscos-objcopy -O binary $$2 $$1; }; ldbin
ifneq (Host,${APCS})
STRIP           = @@echo > /dev/null
else
STRIP           = strip
endif
else
AOFASM          = armasm
AR              = armlib
AS              = armasm
CC              = armcc
C++             = armcpp
CMHG            = armcmhg
CPREPRO         = armcc -C++ -E
ELF2AIF         = @@echo > /dev/null
ifeq (C++,${LINK_TYPE})
LD              = armlink -c++
else
LD              = armlink
endif
LDBIN           = armlink -bin -o
STRIP           = @@echo > /dev/null
endif

BINAOF          = binaof
CAT             = cat
#DATA2AOF        = datatoaof
#DEFMOD          = defmod
DO              = 
ECHO            = echo
ERASECVS        = @@erasecvs () { echo EraseCVS $$1; find $$1 -type d -exec rm -rf '{}/CVS' \; -exec rm -f '{}/.cvstag' \; }; erasecvs
FAPPEND         = @@fappend () { echo FAppend $$@@; local temp_file=$$(mktemp); local dest=$$1; shift; cat $$@@ > $$temp_file; mv $$temp_file $$dest; }; fappend
FILTERCOMP      = perl ${TOOLSDIR}/Misc/FilterComp,102
FILTERCOMP2     = perl ${TOOLSDIR}/Misc/FilterComp2,102
GETVERSION      = perl ${TOOLSDIR}/Misc/GetVersion,102
HDR2H           = perl ${TOOLSDIR}/Build/Hdr2H,102
INSERTVERSION   = awk -f ${TOOLSDIR}/Build/AwkVers
INSTRES         = perl ${TOOLSDIR}/Build/InstRes,102
INSTVIARG       = perl ${TOOLSDIR}/Build/InstViaRG,102
MAKE            = make
MODGEN          = modgen
MODSQZ          = modsqz
NOP             = #
PERL            = perl
RESGEN          = resgen
RM              = rm -f
#SETTYPE         = settype
#SQUASH          = squash
ifneq (Host,${APCS})
SQZ             = armsqueeze
else
SQZ             = @@echo > /dev/null
endif
#STRIPDEPEND     = stripdepnd
#TOGPA           = ToGPA
#TOKENCHECK      = tokencheck
#TOKENISE        = tokenise
TOUCH           = touch
#TRANSLATE       = translate
#UNMODSQZ        = unmodsqz

AWK             = awk
CD              = cd
CHMOD           = chmod
DF              = df
DIFF            = diff
EGREP           = egrep
FIND            = find
GAWK            = gawk
#IDENT           = GNU.ident
LEX             = flex
LS              = ls
MKDIR           = mkdir -p
PWD             = pwd
RPCGEN          = rpcgen
SED             = sed
WC              = wc
YACC            = bison
ZIP             = zip -9qr
UNZIP           = unzip

#
# Standard options.  These can be added to or overridden in the
# including makefile.
#
STDTOOLOPTIONS = ${THROWBACK}

ASFLAGS     += ${STDTOOLOPTIONS} ${ASMDEFINES} ${ASMINCLUDES}
ASFLAGS     += -I${GLOBALHDRDIR} -I${EXPORTDIR}
ASFLAGS     += -PD "APCS SETS \"${APCS}\"" -PD "Machine SETS \"${MACHINE}\"" -PD "UserIF SETS \"${USERIF}\""
ifeq (GNU,${TOOLCHAIN})
ifeq (Host,${APCS})
CINCLUDES   += -I${LIBDIR}/CLib
C++INCLUDES += -I${LIBDIR}/CLib
else
# GCCSDK seems to use the CLib headers instead of its own ones, which is a bad thing unless/until they gain GCC compatibility
endif
else
CINCLUDES   += -I${LIBDIR}/CLib
C++INCLUDES += -I${LIBDIR}/CLib
endif
CINCLUDES   += -I${LIBDIR}/RISC_OSLib \
               -I${CEXPORTDIR} \
               -I${LIBDIR} \
               -I.
C++INCLUDES += -I${LIBDIR}/RISC_OSLib \
               -I${CEXPORTDIR} \
               -I${LIBDIR} \
               -I.
ifeq (GNU,${TOOLCHAIN})
ifeq (Host,${APCS})
C++INCLUDES += -I${LIBDIR}/c++lib
else
# GCCSDK seems to use the C++Lib headers instead of its own ones, which is a bad thing unless/until they gain GCC compatibility
endif
else
C++INCLUDES += -I${LIBDIR}/c++lib
endif
CFLAGS      += -c ${STDTOOLOPTIONS} ${CDEFINES} ${CINCLUDES} ${C_NO_FNAMES} ${C_WARNINGS}
C++FLAGS    += -c ${STDTOOLOPTIONS} ${C++DEFINES} ${C++INCLUDES}
CMHGFLAGS   += -p ${STDTOOLOPTIONS} ${CMHGDEFINES} ${CMHGINCLUDES}

ifeq (GNU,${TOOLCHAIN})

ARFLAGS     := r
ASFLAGS     += ${ASASM_TOOLOPTIONS}
CFLAGS      += ${GCC_TOOLOPTIONS} -O2 -std=c99
C++FLAGS    += -O2
CMHGFLAGS   += ${CMUNGE_TOOLOPTIONS}

C_WARNINGS  := -Wall -Wextra
C_OPTSIZE   := -Os
C_OPTSPEED  := -O3
C_NO_ZI     := -fno-zero-initialized-in-bss
ifeq (Host,${APCS})
GCC_TOOLOPTIONS :=
else
C_NO_STKCHK := -mno-apcs-stack-check
C_STKCHK    := -mapcs-stack-check
C_NO_FNAMES := -mno-poke-function-name
C_MODULE    := -mmodule
CFLAGS      += -mlibscl
C++FLAGS    += -mlibscl
LDFLAGS     += -mlibscl
endif

else

ARFLAGS     := -c -o
ASFLAGS     += ${OBJASM_TOOLOPTIONS} -Stamp -quit
CFLAGS      += ${NCC_TOOLOPTIONS}
CMHGFLAGS   += ${TOOLOPTIONS}

C_WARNINGS  := -fah
C_OPTSIZE   := -Ospace
C_OPTSPEED  := -Otime
C_NO_ZI     := -zz100000
C_NO_STKCHK := -zps1
C_STKCHK    := -zps0
C_NO_FNAMES := -ff
C_MODULE    := -zM

endif

#
# Recursive forced copying options.
#
#  CPFLAGS go after the arguments
#  CPPREFLAGS go before the arguments
#
CPFLAGS    =
CPVFLAGS   =
CPPREFLAGS = -afL

CP         = cp ${CPPREFLAGS}

#
# Recursive forced deletion with no errors.
#
#  WFLAGS go after the arguments
#  WPREFLAGS go before the arguments
#
WFLAGS    =
WPREFLAGS = -rf

WIPE      = rm ${WPREFLAGS}

# Alternative version (implementation differs on RISC OS).
XWIPE     = rm ${WPREFLAGS}


# Directory separator character
SEP       = /


# EOF
@


1.6
log
@  Changes to keep GNUmakefiles and Makefiles compatible
Detail:
  GNUmakefiles/AAsmModule:
  * Adopt same extensible syntax for describing resources phase files as CModule (see BuildSys 6.91)
  GNUmakefiles/AppLibs:
  * Don't permit CALLXLIB to be used for application builds (see BuildSys 6.61)
  * Reflect MODMALLOCLIB leafname change (see BuildSys 6.61)
  * Add TBOXINTLIB, TBOXINTDBGLIB, PDEBUGLIB, PRISMLIB, REMOTEDBLIB, TRACELIB, UNICODELIB and include more libs in DEBUGLIBS (see BuildSys 6.63)
  GNUmakefiles/CApp:
  * Add install_debug_app rule for debug app installations (see BuildSys 6.53)
  GNUmakefiles/CLibrary:
  * Allow additional dependencies to be specified using LIB_DEPENDS (see BuildSys 6.63)
  * Gains install target (see BuildSys 7.15)
  GNUmakefiles/StdTools:
  * Add shell implementation of FAppend (see BuildSys 6.45) - compatible except for the fact that the destination is given current timestamp
  * ${NOP} no longer implicitly includes the silent-command prefix character @@ (see BuildSys 6.50)
  * Add CPVFLAGS (see BuildSys 6.53) although it can't achieve anything as a suffix to the command
  * Add shell implementation of EraseCVS (see BuildSys 6.53)
  * Add InstViaRG tool (see BuildSys 6.70)


Version 7.21. Tagged as 'BuildSys-7_21'
@
text
@d11 1
d34 1
d54 1
d65 1
a65 1
FAPPEND         = @@fappend () { echo FAppend $$@@; local dest=$$1; shift; cat $$@@ > $$dest; }; fappend
@


1.5
log
@Drop 2 tools
tlink - a long since abandoned special tool used to link the toolbox modules against TinyStubs around RISC OS 3.50 era, no 32 bit version has ever been made, so by implication it's not being used
aasm - the sources were lost some time in the 1990's, and hasn't been supplied as part of the DDE for over a decade
Documentation updated to reflect current tools.

Version 6.46. Tagged as 'BuildSys-6_46'
@
text
@d61 2
d69 1
d73 1
a73 1
NOP             = @@#
d202 1
@


1.4
log
@  Changes to keep GNUmakefiles and Makefiles compatible
Detail:
  Makefiles/CApp:
  * Naming of object file variables rationalised in line with CModule
  * Noted that INSTAPP_VERSION files must also be present in INSTAPP_FILES for
    compatibility with GNUmakefiles - requires changes to individual top-level
    makefiles, but not BuildSys
  Makefiles/CLibrary:
  * Naming of object file variables rationalised in line with CModule
  Makefiles/CModule:
  * Removed unused variable OBJS_
  Makefiles/StdTools:
  * Retired TIDYDESC
  GNUmakefiles/AppLibs:
  * Add CONLIB, RMVSN, SYNCLIB
  GNUmakefiles/CApp:
  * Default definition of INSTAPP
  * Naming of object file variables rationalised in line with CModule
  * CLEAN_DEPEND removed, clean made a double-colon rule (it's worth noting
    that such additional clean rules are now only executed from the component's
    top-level directory: this was not true for the old extra_clean rules that
    this replaces, in the GNUmakefiles case)
  * Rename of INSTALLAPPFILES to INSTAPP_FILES
  * Rename of INSTALLAPP_DEPEND to INSTAPP_DEPENDS
  * Insertion of component version into Desc files now done using AwkVers
    script rather than the C preprocessor (note, will require editing of Desc
    files to comply). Also supports versions in Messages and !Run files,
    controlled by new variable INSTAPP_VERSION
  GNUmakefiles/CLibrary:
  * Naming of object file variables rationalised in line with CModule
  * clean rules now only executed from the component's top-level directory, as
    with CApp
  GNUmakefiles/StdTools:
  * Added INSERTVERSION (AwkVers), retired TIDYDESC
  * Perl scripts now explicitly passed to perl - no need to chmod +x the
    scripts in RiscOS/Library
  * asasm/objasm include paths and APCS/Machine/UserIF predefines set to match
    Makefiles
Admin:
  Tested in a CTools build

Version 6.32. Tagged as 'BuildSys-6_32'
@
text
@a81 1
#TLINK           = tlink
@


1.3
log
@  Fixes to shared makefiles
Detail:
  The change which permitted top-level makefiles to include only CApp,
  CModule etc accidentally broke makefiles which included HostTools (StdTools
  got included instead and overwrote the HostTools settings). Amazingly, we
  seem to have got away with this so far - but fixed now. Also, brought the
  GNUmakefiles versions in line with updates to the amu Makefiles in this
  and other respects.
Admin:
  Tested in a RISC OS ROM build, and for building cross-compiling versions
  of the tools.

Version 5.21. Tagged as 'BuildSys-5_21'
@
text
@d12 1
d61 6
a66 5
FILTERCOMP      = FilterComp,102
FILTERCOMP2     = FilterComp2,102
GETVERSION      = GetVersion,102
HDR2H           = Hdr2H,102
INSTRES         = InstRes,102
a81 1
TIDYDESC        = TidyDesc,102
d117 2
@


1.3.2.1
log
@Merge of trunk BuildSys-6_34 to branch RPiFreeze

Version 6.00, 1.142.2.4. Tagged as 'BuildSys-6_00-1_142_2_4'
@
text
@a11 1
SUFFIX_OBEY     = ,feb
d60 5
a64 6
FILTERCOMP      = perl ${TOOLSDIR}/Misc/FilterComp,102
FILTERCOMP2     = perl ${TOOLSDIR}/Misc/FilterComp2,102
GETVERSION      = perl ${TOOLSDIR}/Misc/GetVersion,102
HDR2H           = perl ${TOOLSDIR}/Build/Hdr2H,102
INSERTVERSION   = awk -f ${TOOLSDIR}/Build/AwkVers
INSTRES         = perl ${TOOLSDIR}/Build/InstRes,102
d80 1
a115 2
ASFLAGS     += -I${GLOBALHDRDIR} -I${EXPORTDIR}
ASFLAGS     += -PD "APCS SETS \"${APCS}\"" -PD "Machine SETS \"${MACHINE}\"" -PD "UserIF SETS \"${USERIF}\""
@


1.3.2.2
log
@Merge of BuildSys-6_52 to branch

Version 6.00, 1.142.2.5. Tagged as 'BuildSys-6_00-1_142_2_5'
@
text
@d82 1
@


1.2
log
@  Makefile bugfixes, and support for latest CTools build
Detail:
  * Fixed dependencies for debug builds in GNUmakefiles/CApp
  * Added -f switch to rm in GNUmakefiles/StdTools to make it fail silently
    if the file doesn't exist, like the RISC OS version
  * Fix for amu complaining if INSTTYPE is undefined in Makefiles/CApp
  * Reflected makefile changes in resgen, squeeze and xpand in CTools
    component file
  * Added a8time to ModuleDB and CTools component file
Admin:
  Tested in  a C Tools build

Version 5.03. Tagged as 'BuildSys-5_03'
@
text
@d2 3
d6 1
a6 1
# These are the tool definitions for builds using the GNU toolchain in a POSIX environment.
@


1.1
log
@  Changes to facilitate platform independence.

Detail:
 CApp:
  * New variable CLEAN_DEPEND is now the preferred way to specify additional
    clean actions because GNU make doesn't have an equivalent to amu's :: rules
  * Can now indicate preference to use C++ linker options using LINK_TYPE
  * Gains install phase support:
    + INSTALLAPPFILES lists the files to be copied, effectively specified
      relative to LocalRes$Path
    + Adopted INSTTYPE concept from DDE makefiles for cases where executable
      and support files need to be installed to different locations
    + Unusual cases can override this implementation using CUSTOMINSTALLAPP
      and/or CUSTOMINSTALLTOOL

  CLibrary:
  * New variable CLEAN_DEPEND is now the preferred way to specify additional
    clean actions because GNU make doesn't have an equivalent to amu's :: rules
  * -o is no longer a mandatory argument to libfile - now in ARFLAGS rather
    than used explicitly

  DbgRules / StdRules:
  * Macroised some Norcroft-specific features

  HostTools:
  * Clean phase support was incomplete

  StdTools:
  * A few additional tool definitions
  * Added macro definitions for common C options
  * C's enable-warnings and suppress-function-name-embedding options now on by
    default because they're usually (maybe even universally?) used - it won't
    hurt if they're specified again by existing makefiles
  * C++ now has equivalent INCLUDES and DEFINES variables, and the standard C++
    headers are on the default include path
  * SEP is defined as the directory separator character and can be used from
    top-level makefiles in a platform-independent way

  Functionally equivalent versions of the following makefile fragments
  have been developed so far for executing on a Posix build host:
    AppLibs, CApp, CLibrary, DbgRules, HostTools, StdRules, StdTools
  These suport native compilers (when APCS=Host) and cross-compilers,
  and GCC (when TOOLCHAIN=GNU) and Norcroft toolchains - typically these
  environment variables would be selected by running an Env file.

Admin:
  Tested by building as many as possible of the DDE components on RISC OS
  and on Linux, using native and cross compilers, and using Norcroft and
  GNU toolchains.

Version 5.01. Tagged as 'BuildSys-5_01'
@
text
@d68 1
a68 1
RM              = rm
@

