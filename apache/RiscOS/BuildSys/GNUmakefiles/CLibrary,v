head	1.6;
access;
symbols
	BuildSys-7_30:1.6
	BuildSys-7_29:1.6
	BuildSys-7_28:1.6
	BuildSys-7_27:1.6
	BuildSys-7_26:1.6
	BuildSys-7_25:1.6
	BuildSys-7_24:1.6
	BuildSys-7_23:1.5
	BuildSys-7_22:1.5
	BuildSys-7_21:1.5
	BuildSys-7_20:1.4
	BuildSys-7_19:1.4
	BuildSys-7_18:1.4
	BuildSys-7_17:1.4
	BuildSys-7_16:1.4
	BuildSys-7_15:1.4
	BuildSys-7_14:1.4
	BuildSys-7_13:1.4
	BuildSys-7_12:1.4
	BuildSys-7_11:1.4
	BuildSys-7_10:1.4
	BuildSys-7_09:1.4
	BuildSys-6_00-1_142_2_10:1.3.2.1
	BuildSys-7_08:1.4
	BuildSys-7_07:1.4
	BuildSys-7_06:1.4
	BuildSys-7_05:1.4
	BuildSys-6_00-1_142_2_9:1.3.2.1
	BuildSys-7_04:1.4
	BuildSys-7_03:1.4
	BuildSys-7_02:1.4
	BuildSys-7_01:1.4
	BuildSys-7_00:1.4
	BuildSys-6_99:1.4
	BuildSys-6_98:1.4
	BuildSys-6_97:1.4
	BuildSys-6_96:1.4
	BuildSys-6_95:1.4
	BuildSys-6_94:1.4
	BuildSys-6_93:1.4
	BuildSys-6_92:1.4
	BuildSys-6_91:1.4
	BuildSys-6_90:1.4
	BuildSys-6_89:1.4
	BuildSys-6_81-1:1.4
	BuildSys-6_88:1.4
	BuildSys-6_87:1.4
	BuildSys-6_86:1.4
	BuildSys-6_85:1.4
	BuildSys-6_84:1.4
	BuildSys-6_83:1.4
	BuildSys-6_82:1.4
	BuildSys-6_81:1.4
	BuildSys-6_80:1.4
	BuildSys-6_79:1.4
	BuildSys-6_78:1.4
	BuildSys-6_77:1.4
	BuildSys-6_76:1.4
	BuildSys-6_75:1.4
	BuildSys-6_74:1.4
	BuildSys-6_73:1.4
	BuildSys-6_72:1.4
	BuildSys-6_71:1.4
	BuildSys-6_70:1.4
	BuildSys-6_69:1.4
	BuildSys-6_68:1.4
	BuildSys-6_67:1.4
	BuildSys-6_66-1:1.4
	BuildSys-6_66:1.4
	BuildSys-6_65:1.4
	BuildSys-6_00-1_142_2_8:1.3.2.1
	BuildSys-6_00-1_142_2_7:1.3.2.1
	BuildSys-6_00-1_142_2_6:1.3.2.1
	BuildSys-6_64:1.4
	BuildSys-6_63:1.4
	BuildSys-6_62:1.4
	BuildSys-6_61:1.4
	BuildSys-6_60:1.4
	BuildSys-6_59:1.4
	BuildSys-6_58:1.4
	BuildSys-6_57:1.4
	BuildSys-6_56:1.4
	BuildSys-6_55:1.4
	BuildSys-6_54:1.4
	BuildSys-6_53:1.4
	BuildSys-6_00-1_142_2_5:1.3.2.1
	BuildSys-6_52:1.4
	BuildSys-6_51:1.4
	BuildSys-6_50:1.4
	BuildSys-6_49:1.4
	BuildSys-6_48:1.4
	BuildSys-6_47:1.4
	BuildSys-6_46:1.4
	BuildSys-6_45:1.4
	BuildSys-6_44:1.4
	BuildSys-6_43:1.4
	BuildSys-6_42:1.4
	BuildSys-6_41:1.4
	BuildSys-6_40:1.4
	BuildSys-6_39:1.4
	BuildSys-6_38:1.4
	BuildSys-6_00-1_142_2_4:1.3.2.1
	BuildSys-6_37:1.4
	BuildSys-6_36:1.4
	BuildSys-6_35:1.4
	BuildSys-6_34:1.4
	BuildSys-6_33:1.4
	BuildSys-6_32:1.4
	BuildSys-6_31:1.3
	BuildSys-6_30:1.3
	BuildSys-6_29:1.3
	BuildSys-6_28:1.3
	BuildSys-6_27:1.3
	BuildSys-6_26:1.3
	BuildSys-6_25:1.3
	BuildSys-6_24:1.3
	BuildSys-6_23:1.3
	BuildSys-6_22:1.3
	BuildSys-6_21:1.3
	BuildSys-6_20:1.3
	BuildSys-6_00-1_142_2_3:1.3
	BuildSys-6_19:1.3
	BuildSys-6_18:1.3
	BuildSys-6_17:1.3
	BuildSys-6_16:1.3
	BuildSys-6_15:1.3
	BuildSys-6_14:1.3
	BuildSys-6_13:1.3
	BuildSys-6_12:1.3
	BuildSys-6_00-1_142_2_2:1.3
	BuildSys-6_11:1.3
	BuildSys-6_10:1.3
	BuildSys-6_09:1.3
	BuildSys-6_08:1.3
	BuildSys-6_07:1.3
	BuildSys-6_06:1.3
	BuildSys-6_05:1.3
	BuildSys-6_04:1.3
	BuildSys-6_03:1.3
	BuildSys-6_02:1.3
	BuildSys-6_01:1.3
	BuildSys-6_00-1_142_2_1:1.3
	RPiFreeze:1.3.0.2
	BuildSys-6_00:1.3
	BuildSys-5_99:1.3
	BuildSys-5_98:1.3
	BuildSys-5_97:1.3
	BuildSys-5_96:1.3
	BuildSys-5_95:1.3
	BuildSys-5_94:1.3
	BuildSys-5_93:1.3
	BuildSys-5_92:1.3
	BuildSys-5_91:1.3
	BuildSys-5_90:1.3
	BuildSys-5_89:1.3
	BuildSys-5_88:1.3
	BuildSys-5_87:1.3
	BuildSys-5_86:1.3
	BuildSys-5_85:1.3
	BuildSys-5_84:1.3
	BuildSys-5_83:1.3
	BuildSys-5_82:1.3
	BuildSys-5_81:1.3
	BuildSys-5_80:1.3
	BuildSys-5_79:1.3
	BuildSys-5_78:1.3
	BuildSys-5_77:1.3
	BuildSys-5_76:1.3
	BuildSys-5_75:1.3
	BuildSys-5_74:1.3
	BuildSys-5_73:1.3
	BuildSys-5_72:1.3
	BuildSys-5_71:1.3
	BuildSys-5_70:1.3
	BuildSys-5_69:1.3
	BuildSys-5_68:1.3
	BuildSys-5_67:1.3
	BuildSys-5_66:1.3
	BuildSys-5_65:1.3
	BuildSys-5_64:1.3
	BuildSys-5_63:1.3
	BuildSys-5_62:1.3
	BuildSys-5_61:1.3
	BuildSys-5_60:1.3
	BuildSys-5_59:1.3
	BuildSys-5_58:1.3
	BuildSys-5_57:1.3
	BuildSys-5_56:1.3
	BuildSys-5_55:1.3
	BuildSys-5_54:1.3
	BuildSys-5_53:1.3
	BuildSys-5_52:1.3
	BuildSys-5_51:1.3
	BuildSys-5_50:1.3
	BuildSys-5_49:1.3
	BuildSys-5_48:1.3
	BuildSys-5_47:1.3
	BuildSys-5_46:1.3
	BuildSys-5_45:1.3
	BuildSys-5_44:1.3
	BuildSys-5_43:1.3
	BuildSys-5_42:1.3
	BuildSys-5_41:1.2
	BuildSys-5_40:1.2
	BuildSys-5_39:1.2
	BuildSys-5_38:1.2
	BuildSys-5_37:1.2
	BuildSys-5_36:1.2
	BuildSys-5_35:1.2
	BuildSys-5_34:1.2
	BuildSys-5_33:1.2
	BuildSys-5_32:1.2
	BuildSys-5_31:1.2
	BuildSys-5_30:1.2
	BuildSys-5_29:1.2
	BuildSys-5_28:1.2
	BuildSys-5_27:1.2
	BuildSys-5_26:1.2
	BuildSys-5_25:1.2
	BuildSys-5_24:1.2
	BuildSys-5_23:1.2
	BuildSys-5_22:1.2
	BuildSys-5_21:1.2
	BuildSys-5_20:1.1
	BuildSys-5_19:1.1
	BuildSys-5_18:1.1
	BuildSys-5_17:1.1
	BuildSys-5_16:1.1
	BuildSys-5_15:1.1
	BuildSys-5_14:1.1
	BuildSys-5_13:1.1
	BuildSys-5_12:1.1
	BuildSys-5_11:1.1
	BuildSys-5_10:1.1
	BuildSys-5_09:1.1
	BuildSys-5_08:1.1
	BuildSys-5_07:1.1
	BuildSys-5_06:1.1
	BuildSys-5_05:1.1
	BuildSys-5_04:1.1
	BuildSys-5_03:1.1
	BuildSys-5_02:1.1
	BuildSys-5_01:1.1;
locks; strict;
comment	@# @;


1.6
date	2018.04.11.23.21.08;	author bavison;	state Exp;
branches;
next	1.5;
commitid	IH1EokSuAjoQZ4yA;

1.5
date	2018.03.12.21.44.40;	author bavison;	state Exp;
branches;
next	1.4;
commitid	k1x0Nm0F4RqwqduA;

1.4
date	2013.11.11.00.50.35;	author bavison;	state Exp;
branches;
next	1.3;
commitid	Tr3fHk0Gie15lNcx;

1.3
date	2012.02.05.09.13.23;	author rsprowson;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	XCR9w41JK8TYQWRv;

1.2
date	2011.09.12.23.00.47;	author bavison;	state Exp;
branches;
next	1.1;
commitid	mwF3dZUt3oUN7gzv;

1.1
date	2010.05.19.14.47.57;	author bavison;	state Exp;
branches;
next	;

1.3.2.1
date	2014.02.20.21.02.43;	author rsprowson;	state Exp;
branches;
next	;
commitid	HvOFwLQ3c6PzNSpx;


desc
@@


1.6
log
@  Incremental step in cross-compilation support
Detail:
  ModuleDB:
  * Correct capitalisation of resgen's TARGET to match its main source file
  GNUmakefiles/AAsmModule:
  * Targets now given ,ffa filetype suffix
  * Support source directory layouts s/<subdir>/<leaf> as used by the
    kernel and printer drivers - define SYMLINK_EXT_FIRST to enable
  * Prevent relinking when running make on an up-to-date component due to
    a difference between amu and GNU make's handling of double-colon rules
  * Support linking with GNU toolchain
  * Fix installation rule (mixup between MERGEDMDIR and MERGEDRDIR)
  * Support up to 16 assembler and 8 C-from-assembler headers, up from 3
    of each (here's looking at you, kernel) - long-term, it might be worth
    changing this to a scheme like that used by CModule to remove any
    limits
  * Fix C-from-assembler exports to have .h suffix
  GNUmakefiles/AppLibs:
  * Define INCLUDE_OSLIB to permit OSLib header search paths to be
    specified in an OS-agnostic way
  GNUmakefiles/CApp:
  * Prevent relinking when running make on an up-to-date component due to
    a difference between amu and GNU make's handling of double-colon rules
  GNUmakefiles/CLibrary:
  * Prevent rearchiving when running make on an up-to-date component due
    to a difference between amu and GNU make's handling of double-colon
    rules
  * Don't use .hdr suffix on exported assembler header files
  * Correct order of dependencies for export_libs phony target
  GNUmakefiles/StdTools:
  * Definition for the module filetype suffix
  * Add LDBIN tool for GNU/Norcroft-agnostic binary link, useful for
    linking position-independent binary code, such as relocatable modules
    (i.e. ones that don't require the linker to create a __RelocCode
    function)
  * FAPPEND function now works if the same file is used for the
    destination as for one of the sources (this is used by CModule)
  GNUmakefiles/CModule, ModStdRule, ModuleLibs:
  * Finally created cross-compilation versions of the last major shared
    makefiles! Warning: these have received limited testing to date.
  Makefiles/AAsmModule:
  * Support up to 16 assembler and 8 C-from-assembler headers
  Makefiles/AppLibs, ModuleLibs:
  * Define INCLUDE_OSLIB
  Makefiles/StdTools:
  * Add LDBIN tool


Version 7.24. Tagged as 'BuildSys-7_24'
@
text
@# Makefile fragment for C and C++ libraries for applications and modules

INCLUDED_CLIBRARY = YES

#
# This makefile provides the following phony targets:
#
#    all_libs  export_hdrs  export_libs  install
#
#
# This fragment uses the following macros set by the master makefile.
#
#
# COMPONENT          (the name of the component)
# TARGET       (opt) (the leafname of the primary target - otherwise ${COMPONENT})
# LIBRARY      (opt) (the leafname of the application library - otherwise ${TARGET})
# LIBRARYZM    (opt) (the leafname of the module library - otherwise ${LIBRARY}zm)
# LIBRARYD     (opt) (the leafname of the debug app library - otherwise ${LIBRARY}d)
# LIBRARYDZM   (opt) (the leafname of the debug module library - otherwise ${LIBRARY}dzm)
# LIBRARIES    (opt) (libraries to build/export - otherwise ${LIBRARY} and ${LIBRARYZM})
# LIBEXT       (opt) (subdir or filename extension for library files - otherwise a)
# LIB_DEPENDS  (opt) (any extra dependencies to assert before making LIBRARIES)
# EXPDIR       (opt) (the target directory - otherwise ${LIBDIR}/${TARGET} or
#                                  for a disc install ${INSTDIR}/${TARGET})
# DIRS         (opt) (stamp object for directory creation - otherwise _dirs)
# HDRS         (opt) (header files to export, no h. prefix - otherwise ${TARGET})
# ASMHDRS      (opt) (assembly header files to export, no Hdr. prefix - otherwise none)
# OBJS               (object files, no o. or oz. prefixes)
# DBG_OBJS     (opt) (debug build object files, no o. or oz. prefixes - otherwise ${OBJS})
# APP_OBJS     (opt) (release application object files, no o. or oz. prefixes - otherwise ${OBJS})
# APP_DBG_OBJS (opt) (debug application object files, no o. or oz. prefixes - otherwise ${DBG_OBJS})
# MOD_OBJS     (opt) (release module object files, no o. or oz. prefixes - otherwise ${OBJS})
# MOD_DBG_OBJS (opt) (debug module object files, no o. or oz. prefixes - otherwise ${DBG_OBJS})
# CUSTOMLIB    (opt) (set to "custom" to override the application library rule)
# CUSTOMLIBZM  (opt) (set to "custom" to override the module library rule)
# CUSTOMLIBD   (opt) (set to "custom" to override the debug application library rule)
# CUSTOMLIBDZM (opt) (set to "custom" to override the debug module library rule)
# SOURCES_TO_SYMLINK (opt) (files which need be linked to by the link farm, in addition to contents of c and h directories)
#
#
# It relies on the following from the build system:
#
#
# PHASE            (export phase discriminator)
#
#
# It relies on the following generic tool macros from the StdTools makefile
#
#
# CP + CPFLAGS     (copy, cp etc.)
# WIPE + WFLAGS    (recursive delete)
# RM               (non-recursive delete)
# AS + ASFLAGS     (assembler)
# MKDIR            (cdir/mkdir -p)
# ECHO
# AR + ARFLAGS     (libfile/ar)
# TOUCH            (create/touch)
# NOP
#
#
# It relies on the following from the StdRules makefile
#
#
# .c.o  .c.oz  .c++.o  .cpp.o  .c++.oz  .c++.oz  .s.o  .s.oz
#
#
# It relies on the following from the DbgRules makefile
#
#
# CDFLAGS  C++DFLAGS  ASDFLAGS
# .c.od  .c.odz  .c++.od  .cpp.od  .c++.odz  .cpp.odz  .s.od  .s.odz
#
#

LIBDIR        = ${BUILDDIR}/Export/${APCS}/Lib

TARGET       ?= ${COMPONENT}
LIBRARY      ?= ${TARGET}
LIBRARYZM    ?= ${LIBRARY}zm
LIBRARYD     ?= ${LIBRARY}d
LIBRARYDZM   ?= ${LIBRARY}dzm
LIBRARIES    ?= ${LIBRARYZM} ${LIBRARY}
LIBEXT       ?= a
DIRS         ?= _dirs
HDRS         ?= ${TARGET}
ASMHDRS      ?=
DBG_OBJS     ?= ${OBJS}
APP_OBJS     ?= ${OBJS}
APP_DBG_OBJS ?= ${DBG_OBJS}
MOD_OBJS     ?= ${OBJS}
MOD_DBG_OBJS ?= ${DBG_OBJS}
APP_OBJS_     = $(addsuffix .o,${APP_OBJS})
APP_DBG_OBJS_ = $(addsuffix .od,${APP_DBG_OBJS})
MOD_OBJS_     = $(addsuffix .oz,${MOD_OBJS})
MOD_DBG_OBJS_ = $(addsuffix .odz,${MOD_DBG_OBJS})

EXPORTING_HDRS    = $(addsuffix .exphdr,${HDRS})
EXPORTING_ASMHDRS = $(addsuffix .expasm,${ASMHDRS})
EXPORTING_LIBS    = $(addsuffix .explib,${LIBRARIES})
TARGET_LIBS       = $(addsuffix .${LIBEXT},${LIBRARIES})

ifeq ($(filter install%,${MAKECMDGOALS}),)
EXPDIR       ?= ${LIBDIR}/${TARGET}
else
EXPDIR       ?= ${INSTDIR}/${TARGET}
endif

SOURCES_TO_SYMLINK += $(wildcard c/*) $(wildcard h/*) $(wildcard s/*)

ifneq (objs,$(notdir ${CURDIR}))

# Makefile invoked from same directory
# Create link farm, then execute the makefile from within it

ifeq (clean,${MAKECMDGOALS})
# With a double-colon rule which can have additional actions assigned from the
# master makefile, we'd normally need the master makefile to include the
# ${CURDIR} check to ensure that it's performed on the same invocation as us.
# However, there's no real benefit to performing clean from within the objs
# directory, and it adds an ordering problem between the different double-colon
# rules (the one that deletes the objs directory has to be last otherwise the
# cwd is invalid for the others) so to simplify things, we only ever do cleans
# from the same directory as the Makefile.
clean::
	@@echo Cleaning...
	@@rm -rf objs
	@@echo ${COMPONENT}: cleaned
else
all_libs export_hdrs export_libs links: ${SYMLINK_DEPEND}
	$(foreach linksource,${SOURCES_TO_SYMLINK}, \
		$(shell \
			linkdest=`echo ${linksource} | sed -e 's,\([^/]*\)/\([^/]*\)$$,\2.\1,' -e 's,^,objs/,'`; \
			linkdestdir=`echo $$linkdest | sed -e 's,/[^/]*$$,,'`; \
			linkbackpath=`echo $$linkdestdir | sed -e 's,[^/]*,..,g'`; \
			[ -d ${linksource} ] || [ -L $$linkdest ] || mkdir -p $$linkdestdir; \
			[ -d ${linksource} ] || [ -L $$linkdest ] || ln -s $$linkbackpath/${linksource} $$linkdest; \
		 ) \
	)
	@@mkdir -p objs
ifneq (links,${MAKECMDGOALS})
	@@${MAKE} -C objs -f ../$(firstword ${MAKEFILE_LIST}) ${MAKECMDGOALS}
endif
endif

else

# Makefile invoked from objs subdirectory

ifeq ("${INCLUDED_STDTOOLS}","")
include StdTools
endif

ifeq ("${INCLUDED_STDRULES}","")
include StdRules
endif
ifeq ("${INCLUDED_DBGRULES}","")
include DbgRules
endif

all_libs: ${TARGET_LIBS}
	@@${ECHO} ${COMPONENT}: library built

# GNU make seems to treat any double-colon rule with no dependencies as
# always out-of-date, therefore always rebuilds it and anything which in turn
# depends on the target of the double-colon rule. So use a single-colon rule
# instead. If any cross builds need to create extra directories on a
# per-component basis, we'll cross that bridge when we get to it.
${DIRS}:
	${TOUCH} $@@

export: export_${PHASE}
	@@${NOP}

install export_: export_libs export_hdrs
	@@${NOP}

create_exp_hdr_dirs:
	${MKDIR} ${EXPDIR}

create_exp_lib_dir:
	${MKDIR} ${EXPDIR}

.SUFFIXES: .exphdr .expasm .explib .h .Hdr .${LIBEXT}
.h.exphdr:;         ${CP} $< ${EXPDIR}/$< ${CPFLAGS}
.Hdr.expasm:;       ${CP} $< ${EXPDIR}/$* ${CPFLAGS}
.${LIBEXT}.explib:; ${CP} $< ${EXPDIR}/$< ${CPFLAGS}

export_hdrs: create_exp_hdr_dirs ${DIRS} ${EXPORTING_ASMHDRS} ${EXPORTING_HDRS}
	[ ! -f ../VersionNum ] || ${CP} ../VersionNum ${EXPDIR}/LibVersion ${CPFLAGS}
	@@${ECHO} ${COMPONENT}: header export complete

export_libs: create_exp_lib_dir ${DIRS} ${TARGET_LIBS} ${EXPORTING_LIBS}
	[ ! -f ../VersionNum ] || ${CP} ../VersionNum ${EXPDIR}/LibVersion ${CPFLAGS}
	@@${ECHO} ${COMPONENT}: library export complete

${LIBRARY}${CUSTOMLIB}.${LIBEXT}: ${LIBDEPENDS} ${DIRS} ${APP_OBJS_}
	${AR} ${ARFLAGS} ${LIBRARY}.${LIBEXT} ${APP_OBJS_}

${LIBRARYZM}${CUSTOMLIBZM}.${LIBEXT}: ${LIBDEPENDS} ${DIRS} ${MOD_OBJS_}
	${AR} ${ARFLAGS} ${LIBRARYZM}.${LIBEXT} ${MOD_OBJS_}

${LIBRARYD}${CUSTOMLIBD}.${LIBEXT}: ${LIBDEPENDS} ${DIRS} ${APP_DBG_OBJS_}
	${AR} ${ARFLAGS} ${LIBRARYD}.${LIBEXT} ${APP_DBG_OBJS_}

${LIBRARYDZM}${CUSTOMLIBDZM}.${LIBEXT}: ${LIBDEPENDS} ${DIRS} ${MOD_DBG_OBJS_}
	${AR} ${ARFLAGS} ${LIBRARYDZM}.${LIBEXT} ${MOD_DBG_OBJS_}

include $(wildcard *.d)
include $(wildcard *.dz)
include $(wildcard *.dd)
include $(wildcard *.ddz)

endif

# EOF
@


1.5
log
@  Changes to keep GNUmakefiles and Makefiles compatible
Detail:
  GNUmakefiles/AAsmModule:
  * Adopt same extensible syntax for describing resources phase files as CModule (see BuildSys 6.91)
  GNUmakefiles/AppLibs:
  * Don't permit CALLXLIB to be used for application builds (see BuildSys 6.61)
  * Reflect MODMALLOCLIB leafname change (see BuildSys 6.61)
  * Add TBOXINTLIB, TBOXINTDBGLIB, PDEBUGLIB, PRISMLIB, REMOTEDBLIB, TRACELIB, UNICODELIB and include more libs in DEBUGLIBS (see BuildSys 6.63)
  GNUmakefiles/CApp:
  * Add install_debug_app rule for debug app installations (see BuildSys 6.53)
  GNUmakefiles/CLibrary:
  * Allow additional dependencies to be specified using LIB_DEPENDS (see BuildSys 6.63)
  * Gains install target (see BuildSys 7.15)
  GNUmakefiles/StdTools:
  * Add shell implementation of FAppend (see BuildSys 6.45) - compatible except for the fact that the destination is given current timestamp
  * ${NOP} no longer implicitly includes the silent-command prefix character @@ (see BuildSys 6.50)
  * Add CPVFLAGS (see BuildSys 6.53) although it can't achieve anything as a suffix to the command
  * Add shell implementation of EraseCVS (see BuildSys 6.53)
  * Add InstViaRG tool (see BuildSys 6.70)


Version 7.21. Tagged as 'BuildSys-7_21'
@
text
@d38 1
a38 1
# SOURCES_TO_LINK (opt) (files which need be linked to by the link farm, in addition to contents of c and h directories)
d163 6
a168 1
${DIRS} ::
d185 1
a185 1
.Hdr.expasm:;       ${CP} $< ${EXPDIR}/$< ${CPFLAGS}
d192 1
a192 1
export_libs: create_exp_lib_dir ${DIRS} ${EXPORTING_LIBS} ${TARGET_LIBS}
@


1.4
log
@  Changes to keep GNUmakefiles and Makefiles compatible
Detail:
  Makefiles/CApp:
  * Naming of object file variables rationalised in line with CModule
  * Noted that INSTAPP_VERSION files must also be present in INSTAPP_FILES for
    compatibility with GNUmakefiles - requires changes to individual top-level
    makefiles, but not BuildSys
  Makefiles/CLibrary:
  * Naming of object file variables rationalised in line with CModule
  Makefiles/CModule:
  * Removed unused variable OBJS_
  Makefiles/StdTools:
  * Retired TIDYDESC
  GNUmakefiles/AppLibs:
  * Add CONLIB, RMVSN, SYNCLIB
  GNUmakefiles/CApp:
  * Default definition of INSTAPP
  * Naming of object file variables rationalised in line with CModule
  * CLEAN_DEPEND removed, clean made a double-colon rule (it's worth noting
    that such additional clean rules are now only executed from the component's
    top-level directory: this was not true for the old extra_clean rules that
    this replaces, in the GNUmakefiles case)
  * Rename of INSTALLAPPFILES to INSTAPP_FILES
  * Rename of INSTALLAPP_DEPEND to INSTAPP_DEPENDS
  * Insertion of component version into Desc files now done using AwkVers
    script rather than the C preprocessor (note, will require editing of Desc
    files to comply). Also supports versions in Messages and !Run files,
    controlled by new variable INSTAPP_VERSION
  GNUmakefiles/CLibrary:
  * Naming of object file variables rationalised in line with CModule
  * clean rules now only executed from the component's top-level directory, as
    with CApp
  GNUmakefiles/StdTools:
  * Added INSERTVERSION (AwkVers), retired TIDYDESC
  * Perl scripts now explicitly passed to perl - no need to chmod +x the
    scripts in RiscOS/Library
  * asasm/objasm include paths and APCS/Machine/UserIF predefines set to match
    Makefiles
Admin:
  Tested in a CTools build

Version 6.32. Tagged as 'BuildSys-6_32'
@
text
@d8 1
a8 1
#    all_libs  export_hdrs  export_libs
d22 3
a24 1
# EXPDIR       (opt) (the target directory - otherwise ${LIBDIR}/${TARGET})
a83 1
EXPDIR       ?= ${LIBDIR}/${TARGET}
d102 6
d167 1
a167 1
	${NOP}
d169 2
a170 2
export_: export_libs export_hdrs
	${NOP}
d191 1
a191 1
${LIBRARY}${CUSTOMLIB}.${LIBEXT}: ${DIRS} ${APP_OBJS_}
d194 1
a194 1
${LIBRARYZM}${CUSTOMLIBZM}.${LIBEXT}: ${DIRS} ${MOD_OBJS_}
d197 1
a197 1
${LIBRARYD}${CUSTOMLIBD}.${LIBEXT}: ${DIRS} ${APP_DBG_OBJS_}
d200 1
a200 1
${LIBRARYDZM}${CUSTOMLIBDZM}.${LIBEXT}: ${DIRS} ${MOD_DBG_OBJS_}
@


1.3
log
@Change back to overridable clean and dirs steps.
The CLEAN_DEPEND intermediate was added because GNU make didn't support '::' notation, but GNU nake 3.81 (possibly earlier) does as described at
  http://www.gnu.org/software/make/manual/make.html#Double_002dColon
verified with two test makefiles
# This is 'makefile'
include ./other.mk
clean::
	@@echo 1
	@@echo 2
# This is 'other.mk'
CLEANALIAS = clean
${CLEANALIAS}::
	@@echo 3
	@@echo 4
which did what was required.

Version 5.42. Tagged as 'BuildSys-5_42'
@
text
@d28 4
a31 4
# APP_OBJS     (opt) (object files for application version - otherwise derived from ${OBJS})
# APP_DBG_OBJS (opt) (object files for debug app version - otherwise derived from ${DBG_OBJS})
# MOD_OBJS     (opt) (object files for module version - otherwise derived from ${OBJS})
# MOD_DBG_OBJS (opt) (object files for debug module version - otherwise derived from ${DBG_OBJS})
d87 8
a94 4
APP_OBJS     ?= $(addsuffix .o,${OBJS})
APP_DBG_OBJS ?= $(addsuffix .od,${DBG_OBJS})
MOD_OBJS     ?= $(addsuffix .oz,${OBJS})
MOD_DBG_OBJS ?= $(addsuffix .odz,${DBG_OBJS})
d108 15
a122 2
all_libs export_hdrs export_libs clean links: ${SYMLINK_DEPEND}
ifneq (clean,${MAKECMDGOALS})
a131 1
endif
d136 1
a158 5
clean ::
	@@${ECHO} Cleaning...
	@@cd .. && ${WIPE} objs ${WFLAGS}
	@@${ECHO} ${COMPONENT}: cleaned

d184 2
a185 2
${LIBRARY}${CUSTOMLIB}.${LIBEXT}: ${DIRS} ${APP_OBJS}
	${AR} ${ARFLAGS} ${LIBRARY}.${LIBEXT} ${APP_OBJS}
d187 2
a188 2
${LIBRARYZM}${CUSTOMLIBZM}.${LIBEXT}: ${DIRS} ${MOD_OBJS}
	${AR} ${ARFLAGS} ${LIBRARYZM}.${LIBEXT} ${MOD_OBJS}
d190 2
a191 2
${LIBRARYD}${CUSTOMLIBD}.${LIBEXT}: ${DIRS} ${APP_DBG_OBJS}
	${AR} ${ARFLAGS} ${LIBRARYD}.${LIBEXT} ${APP_DBG_OBJS}
d193 2
a194 2
${LIBRARYDZM}${CUSTOMLIBDZM}.${LIBEXT}: ${DIRS} ${MOD_DBG_OBJS}
	${AR} ${ARFLAGS} ${LIBRARYDZM}.${LIBEXT} ${MOD_DBG_OBJS}
@


1.3.2.1
log
@Merge of trunk BuildSys-6_34 to branch RPiFreeze

Version 6.00, 1.142.2.4. Tagged as 'BuildSys-6_00-1_142_2_4'
@
text
@d28 4
a31 4
# APP_OBJS     (opt) (release application object files, no o. or oz. prefixes - otherwise ${OBJS})
# APP_DBG_OBJS (opt) (debug application object files, no o. or oz. prefixes - otherwise ${DBG_OBJS})
# MOD_OBJS     (opt) (release module object files, no o. or oz. prefixes - otherwise ${OBJS})
# MOD_DBG_OBJS (opt) (debug module object files, no o. or oz. prefixes - otherwise ${DBG_OBJS})
d87 4
a90 8
APP_OBJS     ?= ${OBJS}
APP_DBG_OBJS ?= ${DBG_OBJS}
MOD_OBJS     ?= ${OBJS}
MOD_DBG_OBJS ?= ${DBG_OBJS}
APP_OBJS_     = $(addsuffix .o,${APP_OBJS})
APP_DBG_OBJS_ = $(addsuffix .od,${APP_DBG_OBJS})
MOD_OBJS_     = $(addsuffix .oz,${MOD_OBJS})
MOD_DBG_OBJS_ = $(addsuffix .odz,${MOD_DBG_OBJS})
d104 2
a105 15
ifeq (clean,${MAKECMDGOALS})
# With a double-colon rule which can have additional actions assigned from the
# master makefile, we'd normally need the master makefile to include the
# ${CURDIR} check to ensure that it's performed on the same invocation as us.
# However, there's no real benefit to performing clean from within the objs
# directory, and it adds an ordering problem between the different double-colon
# rules (the one that deletes the objs directory has to be last otherwise the
# cwd is invalid for the others) so to simplify things, we only ever do cleans
# from the same directory as the Makefile.
clean::
	@@echo Cleaning...
	@@rm -rf objs
	@@echo ${COMPONENT}: cleaned
else
all_libs export_hdrs export_libs links: ${SYMLINK_DEPEND}
d115 1
a119 1
endif
d142 5
d172 2
a173 2
${LIBRARY}${CUSTOMLIB}.${LIBEXT}: ${DIRS} ${APP_OBJS_}
	${AR} ${ARFLAGS} ${LIBRARY}.${LIBEXT} ${APP_OBJS_}
d175 2
a176 2
${LIBRARYZM}${CUSTOMLIBZM}.${LIBEXT}: ${DIRS} ${MOD_OBJS_}
	${AR} ${ARFLAGS} ${LIBRARYZM}.${LIBEXT} ${MOD_OBJS_}
d178 2
a179 2
${LIBRARYD}${CUSTOMLIBD}.${LIBEXT}: ${DIRS} ${APP_DBG_OBJS_}
	${AR} ${ARFLAGS} ${LIBRARYD}.${LIBEXT} ${APP_DBG_OBJS_}
d181 2
a182 2
${LIBRARYDZM}${CUSTOMLIBDZM}.${LIBEXT}: ${DIRS} ${MOD_DBG_OBJS_}
	${AR} ${ARFLAGS} ${LIBRARYDZM}.${LIBEXT} ${MOD_DBG_OBJS_}
@


1.2
log
@  Fixes to shared makefiles
Detail:
  The change which permitted top-level makefiles to include only CApp,
  CModule etc accidentally broke makefiles which included HostTools (StdTools
  got included instead and overwrote the HostTools settings). Amazingly, we
  seem to have got away with this so far - but fixed now. Also, brought the
  GNUmakefiles versions in line with updates to the amu Makefiles in this
  and other respects.
Admin:
  Tested in a RISC OS ROM build, and for building cross-compiling versions
  of the tools.

Version 5.21. Tagged as 'BuildSys-5_21'
@
text
@a31 1
# CLEAN_DEPEND (opt) (phony target for additional clean actions)
d139 1
a139 1
${DIRS}:
d142 1
a142 1
clean :: ${CLEAN_DEPEND}
@


1.1
log
@  Changes to facilitate platform independence.

Detail:
 CApp:
  * New variable CLEAN_DEPEND is now the preferred way to specify additional
    clean actions because GNU make doesn't have an equivalent to amu's :: rules
  * Can now indicate preference to use C++ linker options using LINK_TYPE
  * Gains install phase support:
    + INSTALLAPPFILES lists the files to be copied, effectively specified
      relative to LocalRes$Path
    + Adopted INSTTYPE concept from DDE makefiles for cases where executable
      and support files need to be installed to different locations
    + Unusual cases can override this implementation using CUSTOMINSTALLAPP
      and/or CUSTOMINSTALLTOOL

  CLibrary:
  * New variable CLEAN_DEPEND is now the preferred way to specify additional
    clean actions because GNU make doesn't have an equivalent to amu's :: rules
  * -o is no longer a mandatory argument to libfile - now in ARFLAGS rather
    than used explicitly

  DbgRules / StdRules:
  * Macroised some Norcroft-specific features

  HostTools:
  * Clean phase support was incomplete

  StdTools:
  * A few additional tool definitions
  * Added macro definitions for common C options
  * C's enable-warnings and suppress-function-name-embedding options now on by
    default because they're usually (maybe even universally?) used - it won't
    hurt if they're specified again by existing makefiles
  * C++ now has equivalent INCLUDES and DEFINES variables, and the standard C++
    headers are on the default include path
  * SEP is defined as the directory separator character and can be used from
    top-level makefiles in a platform-independent way

  Functionally equivalent versions of the following makefile fragments
  have been developed so far for executing on a Posix build host:
    AppLibs, CApp, CLibrary, DbgRules, HostTools, StdRules, StdTools
  These suport native compilers (when APCS=Host) and cross-compilers,
  and GCC (when TOOLCHAIN=GNU) and Norcroft toolchains - typically these
  environment variables would be selected by running an Env file.

Admin:
  Tested by building as many as possible of the DDE components on RISC OS
  and on Linux, using native and cross compilers, and using Norcroft and
  GNU toolchains.

Version 5.01. Tagged as 'BuildSys-5_01'
@
text
@d2 3
d112 1
a112 1
			[ -d ${linksource} ] || [ -L $$linkdest ] || ${MKDIR} $$linkdestdir; \
d117 1
a117 1
	@@[ -d objs ] || ${MKDIR} objs
d126 11
@

