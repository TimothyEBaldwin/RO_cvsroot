head	1.1;
access;
symbols
	BuildSys-7_30:1.1
	BuildSys-7_29:1.1
	BuildSys-7_28:1.1
	BuildSys-7_27:1.1
	BuildSys-7_26:1.1
	BuildSys-7_25:1.1
	BuildSys-7_24:1.1
	BuildSys-7_23:1.1
	BuildSys-7_22:1.1
	BuildSys-7_21:1.1
	BuildSys-7_20:1.1
	BuildSys-7_19:1.1
	BuildSys-7_18:1.1
	BuildSys-7_17:1.1
	BuildSys-7_16:1.1
	BuildSys-7_15:1.1
	BuildSys-7_14:1.1
	BuildSys-7_13:1.1
	BuildSys-7_12:1.1
	BuildSys-7_11:1.1
	BuildSys-7_10:1.1
	BuildSys-7_09:1.1
	BuildSys-6_00-1_142_2_10:1.1
	BuildSys-7_08:1.1
	BuildSys-7_07:1.1
	BuildSys-7_06:1.1
	BuildSys-7_05:1.1
	BuildSys-6_00-1_142_2_9:1.1
	BuildSys-7_04:1.1
	BuildSys-7_03:1.1
	BuildSys-7_02:1.1
	BuildSys-7_01:1.1
	BuildSys-7_00:1.1
	BuildSys-6_99:1.1
	BuildSys-6_98:1.1
	BuildSys-6_97:1.1
	BuildSys-6_96:1.1
	BuildSys-6_95:1.1
	BuildSys-6_94:1.1
	BuildSys-6_93:1.1
	BuildSys-6_92:1.1
	BuildSys-6_91:1.1
	BuildSys-6_90:1.1
	BuildSys-6_89:1.1
	BuildSys-6_81-1:1.1
	BuildSys-6_88:1.1
	BuildSys-6_87:1.1
	BuildSys-6_86:1.1
	BuildSys-6_85:1.1
	BuildSys-6_84:1.1
	BuildSys-6_83:1.1
	BuildSys-6_82:1.1
	BuildSys-6_81:1.1
	BuildSys-6_80:1.1
	BuildSys-6_79:1.1
	BuildSys-6_78:1.1
	BuildSys-6_77:1.1
	BuildSys-6_76:1.1
	BuildSys-6_75:1.1
	BuildSys-6_74:1.1
	BuildSys-6_73:1.1
	BuildSys-6_72:1.1
	BuildSys-6_71:1.1
	BuildSys-6_70:1.1
	BuildSys-6_69:1.1
	BuildSys-6_68:1.1
	BuildSys-6_67:1.1
	BuildSys-6_66-1:1.1
	BuildSys-6_66:1.1
	BuildSys-6_65:1.1
	BuildSys-6_00-1_142_2_8:1.1
	BuildSys-6_00-1_142_2_7:1.1
	BuildSys-6_00-1_142_2_6:1.1
	BuildSys-6_64:1.1
	BuildSys-6_63:1.1
	BuildSys-6_62:1.1
	BuildSys-6_61:1.1
	BuildSys-6_60:1.1
	BuildSys-6_59:1.1
	BuildSys-6_58:1.1
	BuildSys-6_57:1.1
	BuildSys-6_56:1.1
	BuildSys-6_55:1.1
	BuildSys-6_54:1.1
	BuildSys-6_53:1.1
	BuildSys-6_00-1_142_2_5:1.1
	BuildSys-6_52:1.1
	BuildSys-6_51:1.1
	BuildSys-6_50:1.1
	BuildSys-6_49:1.1
	BuildSys-6_48:1.1
	BuildSys-6_47:1.1
	BuildSys-6_46:1.1
	BuildSys-6_45:1.1
	BuildSys-6_44:1.1
	BuildSys-6_43:1.1
	BuildSys-6_42:1.1
	BuildSys-6_41:1.1
	BuildSys-6_40:1.1
	BuildSys-6_39:1.1
	BuildSys-6_38:1.1
	BuildSys-6_00-1_142_2_4:1.1
	BuildSys-6_37:1.1
	BuildSys-6_36:1.1
	BuildSys-6_35:1.1
	BuildSys-6_34:1.1
	BuildSys-6_33:1.1
	BuildSys-6_32:1.1
	BuildSys-6_31:1.1
	BuildSys-6_30:1.1
	BuildSys-6_29:1.1
	BuildSys-6_28:1.1
	BuildSys-6_27:1.1
	BuildSys-6_26:1.1
	BuildSys-6_25:1.1
	BuildSys-6_24:1.1
	BuildSys-6_23:1.1
	BuildSys-6_22:1.1
	BuildSys-6_21:1.1
	BuildSys-6_20:1.1
	BuildSys-6_00-1_142_2_3:1.1
	BuildSys-6_19:1.1
	BuildSys-6_18:1.1
	BuildSys-6_17:1.1
	BuildSys-6_16:1.1
	BuildSys-6_15:1.1
	BuildSys-6_14:1.1
	BuildSys-6_13:1.1
	BuildSys-6_12:1.1
	BuildSys-6_00-1_142_2_2:1.1
	BuildSys-6_11:1.1
	BuildSys-6_10:1.1
	BuildSys-6_09:1.1
	BuildSys-6_08:1.1
	BuildSys-6_07:1.1
	BuildSys-6_06:1.1
	BuildSys-6_05:1.1
	BuildSys-6_04:1.1
	BuildSys-6_03:1.1
	BuildSys-6_02:1.1
	BuildSys-6_01:1.1
	BuildSys-6_00-1_142_2_1:1.1
	RPiFreeze:1.1.0.2
	BuildSys-6_00:1.1
	BuildSys-5_99:1.1
	BuildSys-5_98:1.1
	BuildSys-5_97:1.1
	BuildSys-5_96:1.1
	BuildSys-5_95:1.1
	BuildSys-5_94:1.1
	BuildSys-5_93:1.1
	BuildSys-5_92:1.1
	BuildSys-5_91:1.1
	BuildSys-5_90:1.1
	BuildSys-5_89:1.1
	BuildSys-5_88:1.1
	BuildSys-5_87:1.1
	BuildSys-5_86:1.1
	BuildSys-5_85:1.1
	BuildSys-5_84:1.1
	BuildSys-5_83:1.1
	BuildSys-5_82:1.1
	BuildSys-5_81:1.1
	BuildSys-5_80:1.1
	BuildSys-5_79:1.1
	BuildSys-5_78:1.1
	BuildSys-5_77:1.1
	BuildSys-5_76:1.1
	BuildSys-5_75:1.1
	BuildSys-5_74:1.1
	BuildSys-5_73:1.1
	BuildSys-5_72:1.1
	BuildSys-5_71:1.1
	BuildSys-5_70:1.1
	BuildSys-5_69:1.1
	BuildSys-5_68:1.1
	BuildSys-5_67:1.1
	BuildSys-5_66:1.1
	BuildSys-5_65:1.1
	BuildSys-5_64:1.1
	BuildSys-5_63:1.1
	BuildSys-5_62:1.1
	BuildSys-5_61:1.1
	BuildSys-5_60:1.1
	BuildSys-5_59:1.1
	BuildSys-5_58:1.1
	BuildSys-5_57:1.1
	BuildSys-5_56:1.1
	BuildSys-5_55:1.1
	BuildSys-5_54:1.1
	BuildSys-5_53:1.1
	BuildSys-5_52:1.1
	BuildSys-5_51:1.1
	BuildSys-5_50:1.1
	BuildSys-5_49:1.1
	BuildSys-5_48:1.1
	BuildSys-5_47:1.1
	BuildSys-5_46:1.1
	BuildSys-5_45:1.1
	BuildSys-5_44:1.1
	BuildSys-5_43:1.1
	BuildSys-5_42:1.1
	BuildSys-5_41:1.1
	BuildSys-5_40:1.1
	BuildSys-5_39:1.1
	BuildSys-5_38:1.1
	BuildSys-5_37:1.1
	BuildSys-5_36:1.1
	BuildSys-5_35:1.1
	BuildSys-5_34:1.1
	BuildSys-5_33:1.1
	BuildSys-5_32:1.1
	BuildSys-5_31:1.1
	BuildSys-5_30:1.1
	BuildSys-5_29:1.1
	BuildSys-5_28:1.1
	BuildSys-5_27:1.1
	BuildSys-5_26:1.1
	BuildSys-5_25:1.1
	BuildSys-5_24:1.1
	BuildSys-5_23:1.1
	BuildSys-5_22:1.1
	BuildSys-5_21:1.1
	BuildSys-5_20:1.1
	BuildSys-5_19:1.1
	BuildSys-5_18:1.1
	BuildSys-5_17:1.1
	BuildSys-5_16:1.1
	BuildSys-5_15:1.1
	BuildSys-5_14:1.1
	BuildSys-5_13:1.1
	BuildSys-5_12:1.1
	BuildSys-5_11:1.1
	BuildSys-5_10:1.1
	BuildSys-5_09:1.1
	BuildSys-5_08:1.1
	BuildSys-5_07:1.1
	BuildSys-5_06:1.1
	BuildSys-5_05:1.1
	BuildSys-5_04:1.1
	BuildSys-5_03:1.1
	BuildSys-5_02:1.1
	BuildSys-5_01:1.1
	BuildSys-5_00:1.1
	BuildSys-4_99:1.1
	BuildSys-4_98:1.1
	BuildSys-4_97:1.1
	BuildSys-4_96:1.1
	BuildSys-4_95:1.1
	BuildSys-4_94:1.1
	BuildSys-4_93:1.1
	BuildSys-4_92:1.1
	BuildSys-4_91:1.1
	BuildSys-4_90:1.1
	BuildSys-4_89:1.1
	BuildSys-4_88:1.1
	BuildSys-4_87:1.1
	BuildSys-4_86:1.1
	BuildSys-4_85:1.1
	BuildSys-4_84:1.1
	BuildSys-4_83:1.1
	BuildSys-4_82:1.1
	BuildSys-4_81:1.1
	BuildSys-4_80:1.1
	BuildSys-4_79:1.1
	BuildSys-4_78:1.1
	BuildSys-4_77:1.1
	BuildSys-4_76:1.1
	BuildSys-4_75:1.1
	BuildSys-4_74:1.1
	BuildSys-4_73:1.1
	BuildSys-4_72:1.1
	BuildSys-4_71:1.1
	BuildSys-4_70:1.1
	BuildSys-4_69:1.1
	BuildSys-4_68:1.1
	BuildSys-4_67:1.1
	BuildSys-4_66:1.1
	BuildSys-4_65:1.1
	BuildSys-4_64:1.1
	BuildSys-4_63:1.1
	BuildSys-4_62:1.1
	Batch4:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.10.14.21.29.39;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Clean reimport of the build environment directories.
This represents the version released in the Batch 4 "bbe" tarfiles.
Tagged as 'Batch4'
@
text
@# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Usage: newimname [options]

# NewImName
# This script generates new names for images according to the new naming
#  scheme. It is a hack of the old 'ImageName' script held in BuildSys.Perl
#  in the source repository.
# The new image name format is as follows:
# 
#  Project identifier (4 chars), eg. Laz1
#  Country variant (2 chars), eg. uk
#  Release number (2 hex chars), eg. 01
#  Minor build number (2 hex chars), eg. 00
# 
#  Hence the 4th build of the 2 release of the UK variant of the Laz1 project
#  would be Laz1uk0204




# Versions:
# 0.01 (DCotton):
#  Initial version

# Current version :
$scriptversion = '0.01';

my($dir,@@vars,%envmap);
my $minreleasenum=0;
my $minminor=0;
$var='Build$ImageName';
$datevar='Build$Date';
$envname='AutoBuild$EnvName';
$releasenvname='AutoBuild$ReleaseNumber';

my $x;
foreach $x (keys %ENV) {
  $envmap{uc $x}=$x;
};

# Option parsing
while($ARGV[0]=~/^-./) {
  my $arg=shift@@ARGV;
  if($arg=~/^--$/) {
    last;
  } elsif($arg=~/^-(newreleasenum|newminor|debug|test|query|hack_round_silly_riscosism)$/) {
    ${$1}=1;
    print "Option $1\n" if($debug);
  } elsif($arg=~/^-(mapfile|formfile|verfile|var)$/) {
    unless (defined(${$1}=shift@@ARGV)) {
      die("$0: No value for $1\n");
    };
    print "Option $1=${$1}\n" if($debug);
  } else {
    die("$0: Option not recognised: $arg\n");
  };
};

if(@@ARGV) {
  die("$0: Too many arguments\n");
};

if($test) {
  ($dir=$0)=~s/\.[^.]*$//; # The directory containing the script
  unless(-d "$dir.logs") {
    mkdir($dir.".logs",-1)||failed("mkdir $dir.logs");
  };
  system("filer_opendir $dir.logs");
} else {
  $dir="$ENV{$envmap{uc 'Build$Dir'}}.BuildSys.ImageName";
};
print "Directory: $dir\n" if($debug);
print "Version file: $verfile\n" if($debug);

# Ensure that the version file exists. If it does not, create a blank one ;*)
if (not(-e $verfile))
{
  create_initial_version_file($verfile);
}


# Read in the files.  Order is important.
read_version($verfile,$newreleasenum,$newminor);

# String it all together
$version = $ENV{$envname}.$releasenum.$minor;

# Set the variable
$ENV{$var}=$version if length($var);

if($test&&!$query) { # Create a test log file
  open(LOG,"> ${dir}.logs.$version\0")
    ||failed("open(${dir}.logs.$version");
  foreach $x (@@vars) {
    print LOG "$x=$ENV{$envmap{uc $x}}\n";
  };
  close(LOG);
};

# Set the date variable
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time);
$date = substr (('00' . $mday), -2);
$date .= ' ';
$date .= (qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec))[$mon];
$date .= ' ';
$date .= 1900 + $year;
$ENV{$datevar}=$date;

exit 0;


#
# Reads version file into $unique, $releasenum and $minor, based on $id.
sub read_version {
  my ($file,$newreleasenum,$newminor)=@@_;
  local *VERSION,*OUT;
  my $notthere;
  undef $unique;
  undef $releasenum;
  undef $minor;
  open(VERSION,"< $file\0")||($notthere=1);
  open(OUT,"> ${file}+")||failed("open(${file}+)");
  while(<VERSION>) {
    chomp;
    if(/^\s*(\w+)\s*$/) {
    } elsif(/^:(\w+):(\w+)\s*$/) {
        # If relasenum was passed, in increment releasenum and set minor back to 00
        if ($newreleasenum)
        {
          update_var('minor', 00, $newminor,'0');
        }
        else
        {
          update_var('minor',$2, $newminor,'0');
        }
        update_var('releasenum',$1, $newreleasenum,'0');
        $_=":$releasenum:$minor";
        $ENV{$releasenvname}=$releasenum;
    } elsif(/\S/) {
      die("$0: Line not recongnised in version file: $file\n  $_\n");
    };
    print OUT "$_\n"||failed("write(${file}+)\n");
  };


  if(!defined($releasenum)) {
    update_var('releasenum',$minreleasenum,undef,'0'); 
    update_var('minor',$minminor,undef,'0');
    print OUT "$id:$releasenum:$minor\n";
  };
  
  close(OUT)||failed("Close(${file}+)\n");
  close(VERSION);
  if($query) {
    unlink("${file}+")||failed("unlink(${file}+)");
  } else {
    unless($notthere) {
      unlink($file)||failed("unlink($file)");
    };
    rename("${file}+",$file)||failed("rename(${file}+,$file)");
  };
};





# Update the variable passed in by incrementing it.
sub update_var {
  my ($var,$val,$toupdate,$pad)=@@_;
  my $len=length($val);
  print "Updating $var to $val padded with $pad, toupdate=$toupdate\n"
    if($debug);

  # Convert the hex number to decimal and increment, then convert back.
  $decval = hex ($val);      
  $decval++ if($toupdate);
  $val = sprintf("%x", $decval);
#  print "val is $val, decval is $decval.\n";
  
  $minwidth{$var} = 2;
  # print "Minwidth=$minwidth{$var}, len=$len\n";
  if($len<$minwidth{$var}) {
    $len=$minwidth{$var};
  };
#   print "length of $val is ".length($val).". $len is ".$len."\n";
  if(length($val)<$len) {
#     print "Padding from ${\length($val)} to $len\n";
    $val=($pad x ($len-length($val))).$val;
  } elsif(length($val)>$len) {
    $val=substr($val,-$len,$len);
  };
  print "Result $val\n" if($debug);
  ${$var}=$val;
};

sub failed {
  die "$0: $_[0] failed\n";
};





# This routine creates a blank version file. It attempts to create the
#  directory up to the file is present.
sub create_initial_version_file 
{
  my ($verfile)=@@_;
  print "Creating a Version file at $verfile\n";  
  $pathname = $verfile;
  $pathname =~ s/.[a-zA-Z0-9!]+$//;
#  print "Pathname is $pathname\n";
  mkdir ($pathname, 0777);    # Public read/write access
  open(OUT,">"."$verfile");   # Create the file.
  print OUT ":00:00\n";       # Output an initial version number of 00:00
  close(OUT);
};

@
