head	1.1;
access;
symbols
	Library-1_93:1.1
	Library-1_92:1.1
	Library-1_91:1.1
	Library-1_90:1.1
	Library-1_89:1.1
	Library-1_88:1.1
	Library-1_87:1.1
	Library-1_86:1.1
	Library-1_85:1.1
	Library-1_84:1.1
	Library-1_83:1.1
	Library-1_82:1.1
	Library-1_81:1.1
	Library-1_80:1.1
	Library-1_79:1.1
	Library-1_78:1.1
	Library-1_77:1.1
	Library-1_76:1.1
	Library-1_75:1.1
	Library-1_74:1.1
	Library-1_73:1.1
	Library-1_72:1.1
	Library-1_71:1.1
	Library-1_70:1.1
	Library-1_69:1.1
	Library-1_68:1.1
	Library-1_67:1.1
	Library-1_66:1.1
	Library-1_65:1.1
	Library-1_64:1.1
	Library-1_63:1.1
	Library-1_62:1.1
	Library-1_61:1.1
	Library-1_60:1.1
	Library-1_59:1.1
	Library-1_58:1.1
	Library-1_57:1.1
	Library-1_56:1.1
	Library-1_55:1.1
	Library-1_54:1.1
	Library-1_53:1.1
	Library-1_52:1.1
	Library-1_51:1.1
	Library-1_50:1.1
	Library-1_49:1.1
	Library-1_48:1.1
	Library-1_47:1.1
	Library-1_46:1.1
	Library-1_45:1.1
	Library-1_44:1.1
	Library-1_43:1.1
	Library-1_42:1.1
	Library-1_41:1.1
	Library-1_40:1.1
	Library-1_39:1.1
	Library-1_38:1.1
	Library-1_37:1.1
	Library-1_36:1.1
	Library-1_35:1.1
	Library-1_34:1.1
	Library-1_33:1.1
	Library-1_32:1.1
	Batch5:1.1
	Batch4:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.10.14.21.30.21;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Clean reimport of the build environment directories.
This represents the version released in the Batch 4 "bbe" tarfiles.
Tagged as 'Batch4'
@
text
@The BinAof Tool
---------------

BinAof is a tool for creating an AOF object file from a binary data file. This
AOF file can then be linked with C / ObjAsm code.

The format of the BinAof comand is:

BinAOF <binary file> <object file> <area name> <symbol> { <option> }

Options: -C : Put the binary data in a CODE area
         -D : Put the binary data in a DATA area (default)
         -RW : Mark the area as READ WRITE
         -RO : Mark the area as READ ONLY (default)

<Binary file> is the name of the binary file to be placed in <object file>.

<Object file> is the name of the object output file to be produced.

<Area name> is the name of an AOF AREA in which the binary file is to be
placed.

<symbol> is the root of a pair of symbols to be exported defined the start
and limit (end + 1) of the data. These symbols can be used in C to access
the data. The symbols exported are <symbol>__base and <symbol>__limit.

Examples:

BinAof !Palette o.!Palette BinAof$$data palette -D -RO
BinAof Templates o.Templates BinAof$$data templates

*** IMPORTANT NOTES ***

The symbols define the base and limit of the data area, when referenced
ordinarily in C they will refernce the *contents* of the object at that
address. To get the actual address you must take the address of the symbols
as defined in C.

*** VERY IMPORTANT ***

If the data is placed in a READ ONLY area (as it is by default) *DO NOT*
compile code which references these symbols with the -zm flag. This will result
in the wrong address being calculated.

If you need to access READ ONLY BinAof'd data from code which must be compiled
-zm you must create a separate C source containing two functions which return
the address and compile this single source without -zm. This can then be linked
with the rest of your code compiled -zm.

For example:

extern int palette__base, palette__limit;

int data_base(void)
{
    return (int)&palette__base;
}

int data_limit(void)
{
    return (int)&palette__limit;
}
@
