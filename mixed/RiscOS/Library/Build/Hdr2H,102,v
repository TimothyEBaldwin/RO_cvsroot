head	1.6;
access;
symbols
	Library-1_93:1.6
	Library-1_92:1.6
	Library-1_91:1.6
	Library-1_90:1.6
	Library-1_89:1.6
	Library-1_88:1.6
	Library-1_87:1.6
	Library-1_86:1.6
	Library-1_85:1.6
	Library-1_84:1.6
	Library-1_83:1.6
	Library-1_82:1.5
	Library-1_81:1.5
	Library-1_80:1.5
	Library-1_79:1.5
	Library-1_78:1.5
	Library-1_77:1.5
	Library-1_76:1.5
	Library-1_75:1.5
	Library-1_74:1.5
	Library-1_73:1.5
	Library-1_72:1.5
	Library-1_71:1.5
	Library-1_70:1.5
	Library-1_69:1.5
	Library-1_68:1.5
	Library-1_67:1.5
	Library-1_66:1.5
	Library-1_65:1.5
	Library-1_64:1.5
	Library-1_63:1.5
	Library-1_62:1.5
	Library-1_61:1.5
	Library-1_60:1.5
	Library-1_59:1.4
	Library-1_58:1.4
	Library-1_57:1.4
	Library-1_56:1.4
	Library-1_55:1.4
	Library-1_54:1.4
	Library-1_53:1.4
	Library-1_52:1.4
	Library-1_51:1.4
	Library-1_50:1.4
	Library-1_49:1.3
	Library-1_48:1.3
	Library-1_47:1.3
	Library-1_46:1.3
	Library-1_45:1.3
	Library-1_44:1.3
	Library-1_43:1.3
	Library-1_42:1.3
	Library-1_41:1.3
	Library-1_40:1.3
	Library-1_39:1.2
	Library-1_38:1.2
	Library-1_37:1.2
	Library-1_36:1.2
	Library-1_35:1.2
	Library-1_34:1.2
	Library-1_33:1.2
	Library-1_32:1.2
	Batch5:1.1
	Batch4:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.11.29.20.40.07;	author jlee;	state Exp;
branches;
next	1.5;
commitid	VbcVel6UZpDtS1Ly;

1.5
date	2012.11.21.23.20.59;	author jlee;	state Exp;
branches;
next	1.4;
commitid	AnOwuRJewxEPditw;

1.4
date	2011.11.20.21.50.36;	author jlee;	state Exp;
branches;
next	1.3;
commitid	6q9AQjO0FhEcw7Iv;

1.3
date	2011.03.17.16.34.06;	author srevill;	state Exp;
branches;
next	1.2;
commitid	2R5McYicMyQQJdcv;

1.2
date	2009.06.07.20.51.52;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.14.21.30.17;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Improve Hdr2H to alow skipping of regions
Detail:
  Build/Hdr2H,102 - If a line starts with ";NoHdr2H{" then skip all following lines until a ";NoHdr2H}" line is found. This allows blocks which are too tricky for Hdr2H to understand, or simply irrelevant to C code, to be ignored by the tool and not added to the C header.
Admin:
  Tested with iMX6 ROM build
@
text
@#!/usr/bin/env perl
#
# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Id: Hdr2H,102,v 1.5 2012/11/21 23:20:59 jlee Exp $
#
# Hdr2H converts ARM assembler header files into .h header files that
# C programs can use.  Thus, many of the useful OS constants are made
# available to C components automatically keeping them in step with
# the master assembler header files.
#

my($dir,$script)=$0=~/^(.*)[\.:]([^.:]+)$/;
my $doswis=0;
my $debug=0;
my $infile=shift @@ARGV;
if($infile eq "-D") {
  $debug=1;
  $infile=shift @@ARGV;
}
if($infile eq "-swi") {
  $doswis=1;
  $infile=shift @@ARGV;
}
elsif($infile eq "/^\-.*/") {
  die("Unrecognised option: '$infile'\n");
}
my $outfile=shift @@ARGV;
die("Usage: $script [-swi] <infile> <outfile>\n") if @@ARGV || !defined $outfile;

my $onriscos = ($^O eq '') || ($^O eq 'riscos');
# Find the directory separator.  RISC OS Perl seems to return $^O as empty string!
my $sep=$onriscos ? '\.' : '/';

my $SYMBOL='@@';
my $TOKEN='[a-zA-Z_]\w+';
my $NUMBER='(?:-?(?:\&|0x)?\&[\da-zA-Z]+|-?\d+)';
my $STRING='"[^\"]*"';
my $BINOP="(?:(?:(?:\\:SH[LR]\\:)|(?:\\:L?AND\\:)|(?:\\:L?OR\\:)|(?:\\<\\<)|(?:\\>\\>)|(?:\\+)|(?:\\-)|(?:\\*)))";
my $OPTIONALOP="(?:\\s\*($BINOP)\\s\*($NUMBER|$TOKEN))\?";

processfile($infile, $outfile);

sub processfile {
  my($in, $out)=@@_;
  my $tmp=$out;
  if ($onriscos) {
    $tmp=~s/\.[^\.]*\Z/\.!tmp/;
  }
  else {
    $tmp.='.!tmp';
  }
  my $prefix="";
  my $current=0;
  my $do_hex=0;
  my $swiclass="";
  my $swibasesym="";
  local *F;
  print "Separator is $sep\ntmp is $tmp\n" if $debug;
  open(IN, "<$in") || die("Could not open file '$in'.\n");
  open(OUT, ">$tmp") || die("Could not open file '$tmp'.\n");
  my $define=uc "$out.h";
  if ($onriscos) {
    $define=~s/\A\<.*\>$sep//i;
    print $define . "\n" if $debug;
    $define=~s/\.H\././g;
  }
  else {
    $define=~s/${sep}H$sep/$sep/g;
  }
  print $define . "\n" if $debug;
  $define=~s/[^\w]/_/g;
  print $define . "\n" if $debug;
  print OUT <<"END";
/* Created by Hdr2H.  Do not edit.*/
#ifndef $define
#define $define

#pragma force_top_level
#pragma include_only_once

END
  while(<IN>) {
    if(/^;NoHdr2H\{/) {		# Skip blocks that we're told to skip
      while (<IN>) {
        if (/^;NoHdr2H\}/) {
          last;
        }
      }
      next;
    }
    s/\;.*//;
    next unless /\S/;
    s/\s+$//;
    while (/2\_([01]+)/) {
      my $val=&bin2dec($1);                     # Convert 2_0101010 style binaries into denary
      s/2\_([01]+)/$val/;
    }
    # The following two are for Hdr.IO.IOMD's two base 4 declarations!
    s/4\_0+\s?$/0/g;
    if (/\s4\_0+[01]\s?$/) {
      s/\s+4\_0+([01])(\s*)?$/ \1/g;
    }
    s/([\dA-Fa-f])(\<\<)(\d)/\1 \2 \3/g;	# Insert spaces in 1<<2 (--> 1 << 2)
    s/([\dA-Fa-f])(\>\>)(\d)/\1 \2 \3/g;        # As above, for >>
    s/(\:SH[RL]\:)/ \1 /g;			# Spaces around :SHR: and :SHL:
    s/(\:L?OR\:)/ \1 /g;                        # Spaces around :OR: or :LOR:
    s/(\:L?AND\:)/ \1 /g;                       # Spaces around :AND: or :LAND:
    s/\:INDEX\:\s*\@@/\@@/g;
    if(/^\s+SUBT\s+/) {         # Sub-Title
      next;
    } elsif(/^\s+TTL\s+/) {	# Title
      next;
    } elsif(/^\s+MACRO(\s+|$)/) {	# Skip macro definitions
      while (<IN>) {
        if(/^\s*MEND(\s|$)/) {
          last;
        }
      }
      next;
    } elsif(/\AOldOpt\s+SETA/) { # Assembler specific thing
      next;
    } elsif(/\A\s+OPT\s+/) {     # Assembler specific thing
      next;
    } elsif(/\A\s+[\!\|\[\]](\s|$)/) { 	# Assertions and macroey things
      next;
    } elsif(/\A\s+AddSWI\s+($TOKEN)/) {     # SWI number declaration
      my $swiname=$1;
      if ($doswis && $swiclass) {
        my $swiname = $swiclass . "_" . $swiname;
        printf(OUT "#ifndef $swiname\n#define %-40s (%s + 0x%02x)\n#endif\n", $swiname, $swibasesym, $current);
      }
      $current+=1;
      next;
    } elsif(/\A\s*SWIClass\s+SETS\s+($STRING)/) {     # Hdr:RISCOS specific thing
      $swiclass=substr($1, 1, length($1)-2);
      $swibasesym="";
      next;
    } elsif(/\A\s*SWIClass\s+SETS\s+($TOKEN)/) {     # Hdr:RISCOS specific thing
      $swibasesym="";
      next;
    } elsif(/\A\s*SWIClass\s+.*/) {
      next;
    } elsif(/\A($TOKEN)\s+[RF]N\s+/i) { # Register number alias
      next;
    } elsif(/\A\s+[AV]RegI?\s+/) { # MPEG headers
      next;
    } elsif(/\A($TOKEN)\s+([\*\#]|EQU)\s+\(?($NUMBER|$TOKEN|$SYMBOL)(?:$OPTIONALOP)\)?\Z/) {
      my($define, $type, $value, $shiftop, $places)=($1, $2, $3, $4, $5);
      my $hexconst;
      
      $value=~s/^\&/0x/;
      $places=~s/^\&/0x/;
      if (substr($value,0,2) eq "0x") {
        $value=oct($value);
        $hexconst=1;
      }
      if ($value eq $SYMBOL) {
        $value = $current;
      }
      elsif ($type ne '#') {
        $swibasesym="";
      }

      if($type eq '*' || $type eq 'EQU') {
        printf(OUT "#define %-40s (", $define);
        if ($swibasesym) {
          printf(OUT "((%s)+(0x%02x))", $swibasesym, $value);
        }
        else {
          if($hexconst) {
            printf(OUT "0x%x", $value);
          }
          else {
            printf(OUT "%s", $value);
          }
        }
        if ($shiftop) {
          printf(OUT " %s %s)\n", &binopconv($shiftop), $places);
        }
        else {
          printf(OUT ")\n");
        }
      } else {
        my $num;
        if($value!~/\A$NUMBER\Z/) {
          die("$infile:$.: Bad space definition: '$value'\n");
        }
        if ($swibasesym) {
          if($do_hex) {
           printf(OUT "#define %-40s ((%s) + 0x%x)\n", $define, $swibasesym, $current);
          } else {
            printf(OUT "#define %-40s ((%s) + %d)\n", $define, $swibasesym, $current);
          }
        } else {
          if($do_hex) {
           printf(OUT "#define %-40s (0x%x)\n", $define, $current);
          } else {
            printf(OUT "#define %-40s (%d)\n", $define, $current);
          };
        }
        $value=~s/\&/0x/;
        $current+=eval($value);
      };
      next;
    } elsif(/^\s+\^\s+($NUMBER)\s*$/) {
      my $value=$1;
      $prefix="";
      $do_hex=($value=~s/\&/0x/);
      $current=eval($value);
      $swibasesym="";
      $errorbasesym="";
      next;
    } elsif(/^\s+\^\s+($NUMBER)\s+(.*)$/) {
      my ($value, $rest)=($1, $2);
      $swibasesym="";
      $do_hex=($value=~s/\&/0x/);
      if ($rest =~ /\+\s+\(fsnumber_DeviceFS\s+\:SHL\:\s+8\)/) {
        # Special case match for Register.NewErrors
        $dohex=($value =~ s/\&/0x/);
        $errorbasesym = "(($value) + (fsnumber_DeviceFS << 8))";
        $swibasesym = $errorbasesym;
        $value='&0';
      }
      else {
        $errorbasesym="";
        die "Extra calculation on numeric $value: >>$rest<<\n";
      }
      $prefix="";
      $current=eval($value);
      next;
    } elsif(/^\s+\^\s+($TOKEN)($OPTIONALOP)?\s*$/) {
      my ($value, $op) = ($1, $2);
      if ($value =~ /^ErrorBase/) {
        $prefix=$value;
        $errorbasesym=$value;
        $current=0;
        $do_hex=1;
        if ($op) {
          $do_hex=($op=~s/\&/0x/);
          $errorbasesym = '(('.$errorbasesym.') '.$op.')';
          $swibasesym="";
        }
        else {
        }
      }
      else {
        $prefix=$value;
        $swibasesym=$value;
        $current=0;
        $do_hex=1;
        if ($op) {
          $do_hex=($op=~s/\&/0x/);
          $swibasesym = '(('.$swibasesym.') '.$op.')';
        }
        else {
        }

        #$swibasesym=$value;
        #$current=0;
        #die "Unsupported (calculated SWI base)\n$_" if $op;
      }
      next;
    } elsif(/\A\s+GBL[LSA]\s+$TOKEN\s*\Z/) { # We can ignore these
      next;
    } elsif(/\A($TOKEN)\s+SETS\s+($STRING|$TOKEN)/) {
      my ($define, $value)=($1, $2);
      printf(OUT "#define %-40s %s\n", $define, $value);
      next;
    } elsif(/\A($TOKEN)\s+SET[AL]\s+/) {
      next;
    } elsif(/\A\s+ASSERT\s+/) {
      # Ignore asserts - we assume the assembler deals with them.
      next;
    } elsif(/^\s+END\s*$/) {
      next;
#    } elsif(/RISCOS_StringConversionSWI_Base/) { # Hdr:RISCOS specific
#      next;
    } elsif (/^ErrorBase_(\S+)\s+\*\s+&00010000\s*\+\s*\(\s*(\S+)\s*\:SHL\:\s*(\S+)\s*\)\s*$/) {
      printf(OUT "#define ErrorBase_%-30s (0x00010000 + (%s << %s))\n", $1, $2, $3);
      next;
    }
    
    my ($define, $msg, $value, $optionalop);
    if(/\A\s+AddError2?\s+($TOKEN)\s*,\s*($STRING|(?:\$$TOKEN))\s*(?:,\s*($NUMBER|$TOKEN|@@)($OPTIONALOP)?\s*)?\Z/) {
      ($define, $msg, $value, $optionalop)=($1, $2, $3, $4);
      if ($value eq '@@') { $value = $current; $do_hex = 1;}
    }
    elsif(/\A\s+AddError2?\s+($TOKEN)\s*,\s*($STRING|(?:\$$TOKEN))\s*(?:,\s*($NUMBER|$TOKEN|@@)\s*(.*)\s*)?\Z/) {
      ($define, $msg, $value, $optionalop)=($1, $2, $3, $4);
      die "Matched a previously unrecognised complicated declaration:\n$define<\n$msg<\n$value<\n$optionalop<\n";
      $define = undef;
    }
    elsif(/\A\s+AddFSError\s+($TOKEN)\s*,\s*($TOKEN)\s*,\s*($TOKEN)\s*,\s*($TOKEN)\s*\Z/) {
      my ($class,$baseerr,$fsname,$fsnumber,$string,$stringb,$val)=($1,$2,$3,$4);
      $define = "$class$baseerr";
      $msg = "ErrorString_$baseerr" . "_Pre \"$fsname\" ErrorString_$baseerr" . "_Post";
      $val = "ErrorNumber_$baseerr" . "_Pre";
      $optionalop = " :AND: $value";
      $value = "((0x10000 + (($fsnumber) << 8) + ErrorNumber_$baseerr" . "_Pre))";
    }
    elsif(/^\s+\#\s+($NUMBER)\s*$/) {
      $value=$1;
      $value=~s/^\&/0x/;
      $current += eval($value);
    }
    else {
      warn("$infile:$.: Unrecognised line: $_");
      next;
    }
    
    if (defined($define)) {
      #die "Got a symbol: $msg, $define, $value, $optionalop\n" if $msg =~ /^\$/;
      $msg =~ s/^\$//;
      # print "\nAddError link:\n$define<<\n$msg<<\n$value<<\n$optionalop<<\n";
      if(defined($value)) {
        $value =~ s/\&/0x/g;
        printf(OUT "#define %-40s %s\n", "ErrorNumber_$define", $value);
      } else {
        if ($errorbasesym) {
          if($do_hex) {
            printf(OUT "#define %-40s (%s + 0x%x)\n", "ErrorNumber_$define", $errorbasesym, $current);
          } else {
            printf(OUT "#define %-40s (%s + %d)\n", "ErrorNumber_$define", $errorbasesym, $current);
          };
        }
        else {
          if($do_hex) {
            printf(OUT "#define %-40s 0x%x\n", "ErrorNumber_$define", $current);
          } else {
            printf(OUT "#define %-40s %d\n", "ErrorNumber_$define", $current);
          };
        }
        $current+=1;
      };
      $msg =~ s/^\$(.*)$/\1/;
      printf(OUT "#define %-40s %s\n", "ErrorString_$define", $msg);
      next;
    }
  };
  close(IN);
  print OUT "#endif\n";
  close(OUT);
  unlink($out);
  rename($tmp, $out)||die("Could not rename '$tmp' to '$out'\n");
};

sub binopconv {
  my $op = shift;
  $_ = $op;
  if (/\:([A-Z]{2})\:/) {
    if (/OR/) {
      return "|";
    }
  }
  elsif (/\:([A-Z]{3})\:/) {
    if (/SHL/) {
      return "<<";
    }
    elsif (/SHR/) {
      return ">>";
    }
    elsif (/AND/) {
      return "&";
    }
    elsif (/LOR/) {
      return "||";
    }
  }
  elsif (/\:([A-Z]{4})\:/) {
    if (/LAND/) {
      return "&&";
    }
  }
  elsif (/^([-+\*\/])$/) {
    return $1;
  }
  elsif (($op eq "<<") || ($op eq ">>")) {
    return $op;
  }

  die("Unknown :shift: operator '$op'\n");

  return $op;
};

#
# See Perl Cookbook, section 2.4 Converting Between Binary and Decimal
#
sub dec2bin {
  my $str = unpack("B32",  pack("n", shift));
  $str =~ s/^0+(?=\d)//;
  return $str;
};

sub bin2dec {
  return unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
};

# Local Variables:
# mode: perl
# End:
@


1.5
log
@Make Hdr2H cope with << and >> shift operators
Detail:
  Build/Hdr2H,102 - Now copes with << and >> shift operators
Admin:
  Tested with building OMAP3 ROM


Version 1.60. Tagged as 'Library-1_60'
@
text
@d17 1
a17 1
# $Id: Hdr2H,102,v 1.4 2011/11/20 21:50:36 jlee Exp $
d96 8
@


1.4
log
@Allow Hdr2H to cope with more forms of # directive
Detail:
  Build/Hdr2H,102 - Now copes with # directives which have no identifier on the left hand side.
Admin:
  Tested with building an OMAP3 ROM


Version 1.50. Tagged as 'Library-1_50'
@
text
@d17 1
a17 1
# $Id: Hdr2H,102,v 1.3 2011/03/17 16:34:06 srevill Exp $
d382 3
@


1.3
log
@Binary import of a number of components.
Tweaked InstallTools script to install the C++ libraries.
Admin: srcbuild WILL NOT WORK IN CURRENT BUILDS!!! To be addressed shortly...

Version 1.40. Tagged as 'Library-1_40'
@
text
@d17 1
a17 1
# $Id: Hdr2H,102,v 1.2 2009-06-07 20:51:52 bavison Exp $
d306 5
@


1.2
log
@  New script for copying version numbers into apps
Detail:
  Change from James Lampard:
    Several components that build desktop apps have an awk script in their
    build directory, to copy the version number from the VersionNum file into
    their final Messages file.
    Many other desktop app components currently do nothing, and rely on their
    messages file/templates being changed manually.
    It would obviously be superior to have a single script that all
    components could use in a central location. This is that script.
  Also fixed the perl scripts so they use a standard shebang (#!/usr/bin/env
  perl) before rather than after the licence header, as this is a technical
  requirement of shebangs on some systems.
Admin:
  Tested on RiscPC RO402, with modified ChangeFSI, Maestro & Alarm

Version 1.32. Tagged as 'Library-1_32'
@
text
@d17 1
a17 1
# $Id: Hdr2H,102,v 1.1 2008/10/14 21:30:17 bavison Exp $
@


1.1
log
@Clean reimport of the build environment directories.
This represents the version released in the Batch 4 "bbe" tarfiles.
Tagged as 'Batch4'
@
text
@d17 1
a17 1
# $Id: Hdr2H,102,v 1.9 2008/04/21 19:44:03 bavison Exp $
@

