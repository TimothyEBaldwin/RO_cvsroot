head	1.1;
access;
symbols
	Library-1_93:1.1
	Library-1_92:1.1
	Library-1_91:1.1
	Library-1_90:1.1
	Library-1_89:1.1
	Library-1_88:1.1
	Library-1_87:1.1
	Library-1_86:1.1
	Library-1_85:1.1
	Library-1_84:1.1
	Library-1_83:1.1
	Library-1_82:1.1
	Library-1_81:1.1
	Library-1_80:1.1
	Library-1_79:1.1
	Library-1_78:1.1
	Library-1_77:1.1
	Library-1_76:1.1
	Library-1_75:1.1
	Library-1_74:1.1
	Library-1_73:1.1
	Library-1_72:1.1
	Library-1_71:1.1
	Library-1_70:1.1
	Library-1_69:1.1
	Library-1_68:1.1
	Library-1_67:1.1
	Library-1_66:1.1
	Library-1_65:1.1
	Library-1_64:1.1
	Library-1_63:1.1
	Library-1_62:1.1
	Library-1_61:1.1
	Library-1_60:1.1
	Library-1_59:1.1
	Library-1_58:1.1
	Library-1_57:1.1
	Library-1_56:1.1
	Library-1_55:1.1
	Library-1_54:1.1
	Library-1_53:1.1
	Library-1_52:1.1
	Library-1_51:1.1
	Library-1_50:1.1
	Library-1_49:1.1
	Library-1_48:1.1
	Library-1_47:1.1
	Library-1_46:1.1
	Library-1_45:1.1
	Library-1_44:1.1
	Library-1_43:1.1
	Library-1_42:1.1
	Library-1_41:1.1
	Library-1_40:1.1
	Library-1_39:1.1
	Library-1_38:1.1
	Library-1_37:1.1
	Library-1_36:1.1
	Library-1_35:1.1
	Library-1_34:1.1
	Library-1_33:1.1
	Library-1_32:1.1
	Batch5:1.1
	Batch4:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.10.14.21.30.19;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Clean reimport of the build environment directories.
This represents the version released in the Batch 4 "bbe" tarfiles.
Tagged as 'Batch4'
@
text
@The Future:
 * Could have an UPDATE category, so that (e g) OSGBPG_DirEntries

      SWI OSGBPB_DirEntries =
         (  NUMBER 0xC,
            ENTRY
            (  R0 # 9 "Reads entries from a specified directory",
               R1 -> .String: dir_name,
               R2 = .Ref OSGBPB_StringList: name_list,
               R3 = .Int: count,
               R4 = .Int: context,
               R5 = .Int: size,
               R6 -> .String: entries
            ),
            EXIT
            (  R3 = .Int: read_count,
               R4! = .Int: context_out
         )  )

      extern os_error *xosgbpb_dir_entries (char *dir_name,
            osgbpb_string_list *name_list,
            int count,
            int context,
            int size,
            char *entries,
            int *read_count,
            int *context_out);
      extern int osgbpb_dir_entries (char *dir_name,
            osgbpb_string_list *name_list,
            int count,
            int context,
            int size,
            char *entries,
            int *read_count);

becomes

      SWI OSGBPB_DirEntries =
         (  NUMBER 0xC,
            ENTRY
            (  R0 # 9 "Reads entries from a specified directory",
               R1 -> .String: dir_name,
               R2 = .Ref OSGBPB_StringList: name_list,
               R3 = .Int: count,
               R5 = .Int: size,
               R6 -> .String: entries
            ),
            UPDATE
            (  R4 = .Int: context
            ),
            EXIT
            (  R3! = .Int: read_count,
         )  )

      extern os_error *xosgbpb_dir_entries (char *dir_name,
            osgbpb_string_list *name_list,
            int count,
            int *context,
            int size,
            char *entries,
            int *read_count);
      extern int osgbpb_dir_entries (char *dir_name,
            osgbpb_string_list *name_list,
            int count,
            int *context,
            int size,
            char *entries);

 * Could have more knowledge about buffers and buffer lengths, and
always return the buffer size, even if the SWI itself returned the |end|
pointer or the |spare| count. This would be a bit mad ...

 * Alternatively, always return the pointer to a filled-in buffer, so
you can nest calls (then |strlen (osgbpb_dir_entries ("@@", buffer, 1,
context = 0, sizeof buffer, NULL))| would return the length of the first
directory entry). (This would need care for SWI's that corrupt the
buffer pointer.)

 * It might have been nice if all reason code sets were in their own
files. This fails with the following, because they are not unique within
10 characters of the name of their parent

      ColourTransMiscOp
      FilerActionSendStartOperation
      PDriverMiscOp
      PDriverMiscOpForDriver (clash with each other)
      TaskWindowTaskInfo

Maybe when everyone has new-format discs.

 * If we used lots more types in OSLib, it would be good to have support for ENUMS, so you could go

      ENUM
         EnumType = (Value0: 0, ..., ValueN: N);

and have cross-references generated in the help files from the type name to
allowable values of that type. ENUM would be represented as an Int, and we
could also have

      SET
         SetType = (Value0: 1, ..., ValueN: %10...0);

which would be represented as a Bits value. There is a conceptual problem in
injecting ENUMS into SETS, though. Thinking ... (maybe ENUM should be Bits
too?).

 * Some SWI's have two or more registers that are equally likely to be
needed as results. Could they be persuaded to return a structure-valued
result? Under C Release 5, it's easy for the non-x case, but it would have
to work for *all* cases to be useful.

 * More info in C help (register <=> arg mappings, other notes).

 * Put the text for x and non-x forms into the same help page, indexed
by both words.

 * Rewrite HelpData.StrongHelp.* to be OSLib-specific?

 * Modify everything in sight so that when an array is sized by a manifest,
the manifest makes it through to the help text, highlighted so you can find
its value.

 * Use registers that are otherwise unused by the veneer code as an
alternative to the stack in order to save on memory accesses.

Done:
 * Emit just the 'Summary:' section with no 'Defined in:' or 'Declaration:'
parts for ABSENT SWI's.
 * Use a -o argument to specify output directory name.

Can't be done:
 * Asm help, keyed by names in mixed case. (Name clashes.)
 * Divide the main help page of each module into 'Types,' 'SWI's and SWI
reason codes', etc, and put submenus for each. Needs to index each "thing"
under "category$Thing," or we end up with name clashes: SWI$OS_Plot,
Function$os_plot would compare equal. (Zap would look for the wrong thing.)
@
