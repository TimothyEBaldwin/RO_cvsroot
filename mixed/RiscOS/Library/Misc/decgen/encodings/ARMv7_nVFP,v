head	1.1;
access;
symbols
	Library-1_93:1.1
	Library-1_92:1.1
	Library-1_91:1.1
	Library-1_90:1.1
	Library-1_89:1.1
	Library-1_88:1.1
	Library-1_87:1.1
	Library-1_86:1.1
	Library-1_85:1.1
	Library-1_84:1.1
	Library-1_83:1.1
	Library-1_82:1.1
	Library-1_81:1.1
	Library-1_80:1.1
	Library-1_79:1.1
	Library-1_78:1.1
	Library-1_77:1.1
	Library-1_76:1.1
	Library-1_75:1.1
	Library-1_74:1.1
	Library-1_73:1.1
	Library-1_72:1.1
	Library-1_71:1.1
	Library-1_70:1.1
	Library-1_69:1.1
	Library-1_68:1.1
	Library-1_67:1.1
	Library-1_66:1.1
	Library-1_65:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.11.28.00.50.14;	author jlee;	state Exp;
branches;
next	;
commitid	wCYtnM8wTVd3NYex;


desc
@@


1.1
log
@Add decgen to the misc tools
Detail:
  Misc/decgen/* - Add a copy of decgen (http://www.phlamethrower.co.uk/riscos/decgen.php) so that it can finally start being used for generating the Debugger disassembler. This is a stripped down copy of the 1.40 release containing just the bits we need.
Admin:
  Required for building Debugger-1_85


Version 1.65. Tagged as 'Library-1_65'
@
text
@# Use:
# VFP1=(cond:4) VFP2={ne(cond,15)} for ARM
# VFP1=1110 VFP2= for Thumb2

# A8.6.28 CDP, CDP2
# A1 ARMv4*, ARMv5T*, ARMv6*, ARMv7
[VFP1]1110(opc1:4)(CRn:4)(CRd:4)(coproc:4)(opc2:3)0(CRm:4)	[VFP2] {eq(band(coproc,14),10)}	CDP_CDP2_A1

# A8.6.51 LDC, LDC2 (immediate)
# A1 ARMv4*, ARMv5T*, ARMv6*, ARMv7
[VFP1]11000001(Rn:4)(CRd:4)(coproc:4)(imm8:8)	[VFP2] {eq(band(coproc,14),10)} {ne(Rn,15)}	UNDEFINED
[VFP1]110PUDW1(Rn:4)(CRd:4)(coproc:4)(imm8:8)	[VFP2] {eq(band(coproc,14),10)} {ne(Rn,15)} {lor(lor(P,U),W)}	LDC_LDC2_imm_A1

# A8.6.52 LDC, LDC2 (literal)
# A1 ARMv4*, ARMv5T*, ARMv6*, ARMv7
[VFP1]110000011111(CRd:4)(coproc:4)(imm8:8)	[VFP2] {eq(band(coproc,14),10)}	UNDEFINED
[VFP1]110PUDW11111(CRd:4)(coproc:4)(imm8:8)	[VFP2] {eq(band(coproc,14),10)} {lor(lor(P,U),W)}	LDC_LDC2_lit_A1

# A8.6.92 MCR, MCR2
# A1 ARMv5TE*, ARMv6*, ARMv7
# A1 ARMv4*, ARMv5T*, ARMv6*, ARMv7
[VFP1]1110(opc1:3)0(CRn:4)(Rt:4)(coproc:4)(opc2:3)1(CRm:4)	[VFP2] {eq(band(coproc,14),10)}	MCR_MCR2_A1

# A8.6.93 MCRR, MCRR2
# A1 ARMv5TE*, ARMv6*, ARMv7
[VFP1]11000100(Rt2:4)(Rt:4)(coproc:4)(opc1:4)(CRm:4)	[VFP2] {eq(band(coproc,14),10)}	MCRR_MCRR2_A1

# A8.6.100 MRC, MRC2
# A1 ARMv4*, ARMv5T*, ARMv6*, ARMv7
[VFP1]1110(opc1:3)1(CRn:4)(Rt:4)(coproc:4)(opc2:3)1(CRm:4)	[VFP2] {eq(band(coproc,14),10)}	MRC_MRC2_A1

# A8.6.101 MRRC, MRRC2
# A1 ARMv5TE*, ARMv6*, ARMv7
[VFP1]11000101(Rt2:4)(Rt:4)(coproc:4)(opc1:4)(CRm:4)	[VFP2] {eq(band(coproc,14),10)}	MRRC_MRRC2_A1

# A8.6.188 STC, STC2
# A1 ARMv4*, ARMv5T*, ARMv6*, ARMv7
[VFP1]11000000(Rn:4)(CRd:4)(coproc:4)(imm8:8)	[VFP2] {eq(band(coproc,14),10)}	UNDEFINED
[VFP1]110PUDW0(Rn:4)(CRd:4)(coproc:4)(imm8:8)	[VFP2] {eq(band(coproc,14),10)} {lor(lor(P,U),W)}	STC_STC2_A1
@
