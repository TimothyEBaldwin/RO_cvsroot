head	1.3;
access;
symbols
	Library-1_93:1.3
	Library-1_92:1.3
	Library-1_91:1.3
	Library-1_90:1.3
	Library-1_89:1.3
	Library-1_88:1.3
	Library-1_87:1.3
	Library-1_86:1.3
	Library-1_85:1.3
	Library-1_84:1.3
	Library-1_83:1.3
	Library-1_82:1.3
	Library-1_81:1.3
	Library-1_80:1.3
	Library-1_79:1.3
	Library-1_78:1.3
	Library-1_77:1.3
	Library-1_76:1.3
	Library-1_75:1.3
	Library-1_74:1.3
	Library-1_73:1.3
	Library-1_72:1.3
	Library-1_71:1.3
	Library-1_70:1.3
	Library-1_69:1.3
	Library-1_68:1.3
	Library-1_67:1.3
	Library-1_66:1.3
	Library-1_65:1.3
	Library-1_64:1.3
	Library-1_63:1.3
	Library-1_62:1.3
	Library-1_61:1.3
	Library-1_60:1.3
	Library-1_59:1.3
	Library-1_58:1.3
	Library-1_57:1.3
	Library-1_56:1.3
	Library-1_55:1.3
	Library-1_54:1.3
	Library-1_53:1.3
	Library-1_52:1.3
	Library-1_51:1.3
	Library-1_50:1.3
	Library-1_49:1.3
	Library-1_48:1.3
	Library-1_47:1.3
	Library-1_46:1.3
	Library-1_45:1.3
	Library-1_44:1.3
	Library-1_43:1.3
	Library-1_42:1.3
	Library-1_41:1.3
	Library-1_40:1.3
	Library-1_39:1.2
	Library-1_38:1.2
	Library-1_37:1.2
	Library-1_36:1.2
	Library-1_35:1.2
	Library-1_34:1.2
	Library-1_33:1.2
	Library-1_32:1.2
	Batch5:1.1
	Batch4:1.1;
locks; strict;
comment	@# @;


1.3
date	2011.03.17.16.34.28;	author srevill;	state Exp;
branches;
next	1.2;
commitid	2R5McYicMyQQJdcv;

1.2
date	2009.06.07.20.51.53;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.14.21.30.27;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Binary import of a number of components.
Tweaked InstallTools script to install the C++ libraries.
Admin: srcbuild WILL NOT WORK IN CURRENT BUILDS!!! To be addressed shortly...

Version 1.40. Tagged as 'Library-1_40'
@
text
@#!/usr/bin/env perl
#
# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Id: FilterComp2,102,v 1.2 2009-06-07 20:51:53 bavison Exp $
#
#############################################################################
#
# This script filters the module database file to contain only those components
# required by a particular product.  Do NOT commit the filtered output to CVS -
# or all the non-included components will be lost!
#
#
# Usage: $thisfile <components> <moduledb> <bbe components> <bbe moduledb>
#

my $script = $0;
$script  =~ s/^.*[\/:]//;
$version_file     = "VersionNum";
$usage = "Usage: $script ".
  "<components file 1> <components file 2> <module database> <bbe components 1> <bbe components 2> <bbe module database>\n" .
  "\nFilters the first three parameters into the second three parameters\n".
  "such that only the relevant entries are present in both files.\n";

#############################################################################

my ($component_file_a, $component_file_b, $moduledb, $bbe_components_a, $bbe_components_b, $bbe_moduledb) = @@ARGV;
die($usage) unless $bbe_moduledb;

# Start by reading in the ModuleDB and Components files.
my %database = &read_db($moduledb);
my %components_a = &read_components($component_file_a);
my %components_b = &read_components($component_file_b);

# Open all the files we need to process
open(BBECOMPA, '>'.$bbe_components_a) or failed("Unable to open $bbe_components_a");
open(BBECOMPB, '>'.$bbe_components_b) or failed("Unable to open $bbe_components_b");
open(BBEMDB, '>'.$bbe_moduledb) or failed("Unable to open $bbe_moduledb");
open(COMPA, '<'.$component_file_a) or failed("Unable to open $component_file_a");
open(COMPB, '<'.$component_file_b) or failed("Unable to open $component_file_b");
open(MDB, '<'.$moduledb) or failed("Unable to open $moduledb");
  printf(STDERR "Files opened\n");

$component_file_a  =~ s/^.*[\/:]//;
$component_file_b  =~ s/^.*[\/:]//;
print BBEMDB "#\n# ** ModuleDB filtered by component files $component_file_a and $component_file_b **\n#\n";

while (<MDB>) {
  if (/^\W/) {
    print BBEMDB;
    next;
  }
  if (/^(\S+)\s/) {
    print BBEMDB if ((($components_a{$1} || $components_b{$1}) && $database{$1} ne 'EXP') && ($database{$1} ne "BBE"));
    next;
  }
  
  die("Internal error: $_\n");
}

while (<COMPA>) {
  if (/^\W/) {
    print BBECOMPA;
    next;
  }
  if (/^(\S+)\s/) {
    print BBECOMPA if (($components_a{$1} && $database{$1} ne 'EXP') && ($database{$1} ne "BBE"));
    next;
  }
  
  die("Internal error: $_\n");
}
  
while (<COMPB>) {
  if (/^\W/) {
    print BBECOMPB;
    next;
  }
  if (/^(\S+)\s/) {
    print BBECOMPB if (($components_b{$1} && $database{$1} ne 'EXP') && ($database{$1} ne "BBE"));
    next;
  }
  
  die("Internal error: $_\n");
}

exit 0;

#############################################################################
# Read the components file to find the required module database entries
#
sub read_components {
  my $file = $_[0];
  my %result;
  
  open(FILE,"<$file") || &failed("cannot open $file");
  
  while (<FILE>) {
    if (/^(\w\S+)\s/) {
      my ($c,$line) = ($1, $_);
      chomp($line);
      next unless ($database{$c});
      next if ($database{$c} eq 'EXP');
      next if ($line =~ /-type\s+EXP/);
      $result{$c} = $line;
    }
  }

  return %result;
}

#############################################################################
# Read the components file to find the required module database entries
#
sub read_db {
  my $file = $_[0];
  my %result;
  
  open(FILE,"<$file") || &failed("cannot open $file");
  
  while (<FILE>) {
    if (/^(\w\S+)\s+(\S+)/) {
      $result{$1} = $2;
    }
  }

  return %result;
}

#############################################################################
# Wrap things up neatly.
#
sub failed {
  printf(STDERR "$script: $_[0] failed: $!\n");
  exit 1;
};

@


1.2
log
@  New script for copying version numbers into apps
Detail:
  Change from James Lampard:
    Several components that build desktop apps have an awk script in their
    build directory, to copy the version number from the VersionNum file into
    their final Messages file.
    Many other desktop app components currently do nothing, and rely on their
    messages file/templates being changed manually.
    It would obviously be superior to have a single script that all
    components could use in a central location. This is that script.
  Also fixed the perl scripts so they use a standard shebang (#!/usr/bin/env
  perl) before rather than after the licence header, as this is a technical
  requirement of shebangs on some systems.
Admin:
  Tested on RiscPC RO402, with modified ChangeFSI, Maestro & Alarm

Version 1.32. Tagged as 'Library-1_32'
@
text
@d17 1
a17 1
# $Id: FilterComp2,102,v 1.1 2008/10/14 21:30:27 bavison Exp $
@


1.1
log
@Clean reimport of the build environment directories.
This represents the version released in the Batch 4 "bbe" tarfiles.
Tagged as 'Batch4'
@
text
@d17 1
a17 1
# $Id: FilterComp2,102,v 1.2 2004/11/12 16:14:14 bavison Exp $
@

