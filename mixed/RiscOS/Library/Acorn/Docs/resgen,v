head	1.1;
access;
symbols
	Library-1_93:1.1
	Library-1_92:1.1
	Library-1_91:1.1
	Library-1_90:1.1
	Library-1_89:1.1
	Library-1_88:1.1
	Library-1_87:1.1
	Library-1_86:1.1
	Library-1_85:1.1
	Library-1_84:1.1
	Library-1_83:1.1
	Library-1_82:1.1
	Library-1_81:1.1
	Library-1_80:1.1
	Library-1_79:1.1
	Library-1_78:1.1
	Library-1_77:1.1
	Library-1_76:1.1
	Library-1_75:1.1
	Library-1_74:1.1
	Library-1_73:1.1
	Library-1_72:1.1
	Library-1_71:1.1
	Library-1_70:1.1
	Library-1_69:1.1
	Library-1_68:1.1
	Library-1_67:1.1
	Library-1_66:1.1
	Library-1_65:1.1
	Library-1_64:1.1
	Library-1_63:1.1
	Library-1_62:1.1
	Library-1_61:1.1
	Library-1_60:1.1
	Library-1_59:1.1
	Library-1_58:1.1
	Library-1_57:1.1
	Library-1_56:1.1
	Library-1_55:1.1
	Library-1_54:1.1
	Library-1_53:1.1
	Library-1_52:1.1
	Library-1_51:1.1
	Library-1_50:1.1
	Library-1_49:1.1
	Library-1_48:1.1
	Library-1_47:1.1
	Library-1_46:1.1
	Library-1_45:1.1
	Library-1_44:1.1
	Library-1_43:1.1
	Library-1_42:1.1
	Library-1_41:1.1
	Library-1_40:1.1
	Library-1_39:1.1
	Library-1_38:1.1
	Library-1_37:1.1
	Library-1_36:1.1
	Library-1_35:1.1
	Library-1_34:1.1
	Library-1_33:1.1
	Library-1_32:1.1
	Batch5:1.1
	Batch4:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.10.14.21.30.15;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Clean reimport of the build environment directories.
This represents the version released in the Batch 4 "bbe" tarfiles.
Tagged as 'Batch4'
@
text
@The ResGen tool
---------------

ResGen is a tool for creating resource file data in a form suitable for
use by ResourceFS from a set of input files and corresponding resource
file names.

The format of the ResGen command is:

ResGen <Area name> <Object file> { <Binary file> <Resource file> }

<Area name> is the name of an AOF AREA in which the resource file data is
to be placed. A function of this name is exported as an external symbol which
can be used in C or assembler code to access the resource data.

<Object file> is the name of the object output file to be produced.

<Binary file> is the name of a file to be included in the resource file
data.

<Resource file> is the name within the ResourceFS which is used by the
application to refer to a file within the resource file data.

A <viafile> is a file containing a list of <Binary file> <Resource file> pairs
one per line. This may be used for convenience or to circument the 256
character command line length limit.

Example usage in C
------------------

...

extern int resourcefsfiles(void);

#define ADFSPATH  "ADFSFiler$Path"
#define FILERPATH "Resources:$.Resources.ADFSFiler."

OS_ErrorBlock *init(char *envstr, int instantiation, WorkSpace **r12)
{
    ...
    s = ADFSPATH;
/* Set up ADFSFiler$Path variable which may be changed by user to point to
 * a different messages file.
 */
    if (!xos_readvarval(s, 0, -1, 0, 0))
        xos_setvarval(s, FILERPATH, sizeof(FILERPATH), 0, 0);
/* Register the block of data generated by the ResGen tool with the ResourceFS.
 * This will create a file "Resources:Resources.ADFSFiler.Messages" which
 * contains the message data.
 *
 * 'resourcefsfiles' is a function which returns the address of the resource
 * data.
 */
    xresourcefs_registerfiles(resourcefsfiles());
    ...
}

...


Extract from MakeFile to build resources
----------------------------------------

...

filer: o.adfsfiler o.messages o.lib
    link -m -o ADFSFiler o.filer o.messages o.lib

o.messages: m.messages
    resgen resourcefsfiles o.messages m.messages Resources.ADFSFiler.Messages

...
@
