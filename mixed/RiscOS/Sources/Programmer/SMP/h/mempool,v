head	1.1;
branch	1.1.1;
access;
symbols
	SMP-0_04:1.1.1.1
	SMP-0_03:1.1.1.1
	SMP-0_02:1.1.1.1
	SMP-0_01:1.1.1.1
	initial:1.1.1.1
	trunk:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2017.07.29.16.58.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	dsMOIfOFqnvf691A;

1.1.1.1
date	2017.07.29.16.58.15;	author jlee;	state Exp;
branches;
next	;
commitid	dsMOIfOFqnvf691A;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef MEMPOOL_H
#define MEMPOOL_H

typedef struct mempool_s mempool_t;

/* Create a new memory pool */
extern mempool_t *mempool_new(int itemsize, int itemcount);

/* Claim an object from the pool */
extern void *mempool_alloc(mempool_t *pool);

/* Release an object into the pool */
extern void mempool_free(mempool_t *pool, void *object);

#endif
@


1.1.1.1
log
@Import of SMP module
This is still very much alpha status, so don't expect any form of API stability yet
@
text
@@
