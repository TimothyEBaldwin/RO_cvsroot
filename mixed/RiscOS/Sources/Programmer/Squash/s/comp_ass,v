head	4.3;
access;
symbols
	Squash-0_30:4.3
	Squash-0_29:4.3
	Squash-0_28:4.2
	RO_5_07:4.2
	dellis_autobuild_BaseSW:4.2
	Ursula_merge:4.1
	Squash-0_27:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.2
	Squash-0_26:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Squash-0_25:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2009.11.29.16.03.32;	author srevill;	state Exp;
branches;
next	4.2;

4.2
date	2000.06.02.16.09.10;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.01;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.01;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.05.46;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.47.09;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.05.57;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Fixed unaligned loads problem. Also removed some build warnings.
Tested on Iyonix.

Version 0.29. Tagged as 'Squash-0_29'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; -> s.comp_ass

        GET     hdr:ListOpts
        GET     hdr:Macros
        GET     hdr:System

        GBLL    Debug
Debug   SETL    {TRUE}

        GET     hdr.debug

;       IMPORT  |x$stack_overflow|
        EXPORT  compress_store_ass

        AREA    |C$$Code|,CODE,READONLY

        GBLL    Module
Module  SETL    {TRUE}

                        GBLL    ClearOnBitIncrement
ClearOnBitIncrement     SETL    {FALSE}

                        GBLL    CheckNoCodesAfterInc
CheckNoCodesAfterInc    SETL    {TRUE}

                GBLL    CheckGap
CheckGap        SETL    {FALSE}

 [ CheckGap
ClearOnBitIncrement     SETL    :LNOT: CheckGap
CHECK_GAP       *       32768
 ]
INIT_BITS       *       9
BITS            *       12
HSIZE           *       1 :SHL: BITS
HASH_RETRY      *       5003
FIRST           *       257
CLEAR           *       256
WSOffset        *       4

        GBLL    Use_left_shift
Use_left_shift  SETL    {TRUE}

 [ Module
Use_left_shift  SETL    {TRUE}
 ]

 [ Use_left_shift
        ASSERT  BITS <= 12
 ]

        %       12      ; Pad

compress_store_ass
;
; Input:-  r0 - input
;          r1 - output
;          r2 - input_length
;          r3 - workspace (module version only)
;
; Output:- r0 - output length
;
; Internal variables
;
input           RN      r0
output          RN      r1
input_length    RN      r2
current         RN      r3
offset          RN      r4
bits            RN      r5
free_entry      RN      r6
temp            RN      r7
code            RN      r8      ; For the code table
spare           RN      lr
 [ CheckGap
checkpt         RN      r9
 ]
last_offset     RN      r10
;ip             RN      r12
;sl             RN      r10
;fp             RN      r11
previous        RN      ip
hash            RN      fp      ; For the hash table

        MOV     ip, sp
        STMFD   sp!, {r1, r3-r9, sl, fp, ip, lr, pc}    ; Store workspace pointer as well
        MOV     offset, #&1f
        STRB    offset, [output]
        MOV     offset, #&9d
        STRB    offset, [output, #1]
        MOV     offset, #&80 :EOR: BITS
        STRB    offset, [output, #2]
        MOV     offset, #0
        STRB    offset, [output, #3]
        LDRB    previous, [input], #1                   ; First byte
        SUB     input_length, input_length, #1
        AND     offset, output, #3                      ; Output position so far
        SUB     output, output, offset                  ; Keep output word aligned
        ADD     offset, offset, #3                      ; Three bytes written already (header)
        MOV     offset, offset, LSL #3                  ; Times 8
        MOV     last_offset, offset

;
; Now clear hash table
;
do_clear
        tracef "Squash: at do_clear",NL
 [ CheckGap
        MOV     checkpt, #0
 ]
        MOV     lr, #-1
        EOR     lr, lr, lr, LSR #20
 [ Module
        LDR     hash, [sp, #WSOffset]
        ADD     current, hash, #(HASH_RETRY*4) :AND: &ff
        ADD     current, current, #(HASH_RETRY*4) :AND: &ff00
 |
        ADR     hash, hash_table
        ADRL    current, hash_table + HASH_RETRY*4
 ]

clear_loop
        STR     lr, [hash], #4
        CMP     hash, current
        BLO     clear_loop
        ASSERT  FIRST = &101
        MOV     bits, #INIT_BITS
        MOV     free_entry, #1
        ADD     free_entry, free_entry, free_entry, LSL #8

main_loop
        SUBS    input_length, input_length, #1
        BCC     finished
 [ CheckGap
        ADD     checkpt, checkpt, #1
 ]
        LDRB    current, [input], #1
        ORR     spare, previous, current, LSL #BITS             ; fcode
        EOR     current, previous, current, LSL #(BITS-8)       ; hash value
;
; Note current can be recovered from spare
;
 [ Module
        LDR     hash, [sp, #WSOffset]
 |
        ADR     hash, hash_table
 ]
        LDR     hash, [hash, current, LSL #2]
 [ Use_left_shift
        TEQ     spare, hash, LSR #BITS
 |
        TEQ     hash, spare
 ]

hash_found
 [ Use_left_shift
        MOVEQ   previous, hash, LSL #(32-BITS)
        MOVEQ   previous, previous, LSR #(32-BITS)              ; Remove hash value to leave code
 |
        ADRL    code, code_table
        LDREQ   previous, [code, current, LSL #1]
        BICEQ   previous, previous, #&ff000000
        BICEQ   previous, previous, #&ff0000
 ]
        BEQ     main_loop
        CMN     hash, #1 :SHL: BITS                             ; Carry set <=> empty slot
        BCC     hash_retry

hash_empty
;
; Output the code (previous).
;
        ADD     temp, output, offset, LSR #3
;        LDMIA   temp, {hash}                                    ; Word aligned load without rotation
        ANDS    code, offset, #31
        LDRNE   hash, [temp, -code, LSR #3]!
        MOVEQ   hash, previous                                  ; If hasn't been written yet
        ORRNE   hash, hash, previous, LSL code                  ; Insert bottom bits
        RSBNE   code, code, #32
        MOVNE   previous, previous, LSR code                    ; Throw away bits inserted (if any)
        ASSERT  hash < previous
        STMIA   temp, {hash, previous}
        ADD     offset, offset, bits
;
; Now check for bits overflow on free_entry
;
        MOV     temp, #1
        CMP     free_entry, temp, LSL bits
        BCS     bits_increment

no_bits_increment
;
; Recover current from spare and place in previous
;
        MOV     previous, spare, LSR #BITS

;
; Generate new code etc and loop
;
 [ :LNOT: CheckNoCodesAfterInc
        CMP     free_entry, #1 :SHL: BITS
        BHS     no_more_codes
 ]

 [ Module
        LDR     hash, [sp, #WSOffset]
 |
        ADR     hash, hash_table
 ]
 [ :LNOT: Use_left_shift
        ADRL    code, code_table
        STR     spare, [hash, current, LSL #2]
 ]
 [ Use_left_shift
        EOR     temp, free_entry, spare, LSL #BITS             ; Combine spare and free_entry
        STR     temp, [hash, current, LSL #2]
 ]
 [ :LNOT: Use_left_shift
        STRB    free_entry, [code, current, LSL #1]
        ADD     code, code, #1
        MOV     hash, free_entry, LSR #8
        STRB    hash, [code, current, LSL #1]
 ]
        ADD     free_entry, free_entry, #1
 [ CheckNoCodesAfterInc
        CMP     free_entry, #1 :SHL: BITS
        BHS     no_more_codes
 ]
        B       main_loop

bits_increment
        tracef  "Squash: at bits_increment",NL
        CMP     bits, #BITS-1
        ADDLS   bits, bits, #1
 [ ClearOnBitIncrement
        ADR     r9, no_bits_increment
        B       clear_buffer
 |
        B       no_bits_increment
 ]

no_more_codes
 [ CheckGap
        CMP     checkpt, #CHECK_GAP
        BLT     main_loop
 |
        tracef  "Squash: at no_more_codes",NL
 ]
;
; Output CLEAR code and reset tables etc.
;
        tracef  "Squash: clearing tables",NL
        MOV     previous, #CLEAR
        ADD     temp, output, offset, LSR #3
;        LDMIA   temp, {hash}                                    ; Word aligned load without rotation
        ANDS    code, offset, #31
        LDRNE   hash, [temp, -code, LSR #3]!
        MOVEQ   hash, previous                                  ; If hasn't been written yet
        ORRNE   hash, hash, previous, LSL code                  ; Insert bottom bits
        RSBNE   code, code, #32
        MOVNE   previous, previous, LSR code                    ; Throw away bits inserted (if any)
        ASSERT  hash < previous
        STMIA   temp, {hash, previous}
        ADD     offset, offset, bits
;
; Recover current from spare and place in previous
;
        MOV     previous, spare, LSR #BITS

 [ ClearOnBitIncrement
        ADR     r9, do_clear
clear_buffer
 ]

;
; Now realign output
;
        SUB     lr, offset, last_offset
        tracef  "Bits since last CLEAR = %",NL,lr
 [ ClearOnBitIncrement
        MOV     code, #BITS                                     ; This may be replaced later by maxbits
        TST     code, #1
        MOVEQ   lr, lr, LSR #1
        TST     code, #3
        MOVEQ   lr, lr, LSR #1
        TST     code, #7
        MOVEQ   lr, lr, LSR #2
        AND     lr, lr, #7                                      ; Bottom three bits only
        ADR     temp, offsets-INIT_BITS*8
        ADD     temp, temp, bits, LSL #3
        LDRB    code, [temp, lr]
 |
        MOV     current, #BITS                                  ; This may be replaced later by maxbits
        TST     current, #1
        MOVEQ   lr, lr, LSR #1
        TST     current, #3
        MOVEQ   lr, lr, LSR #1
        TST     current, #7
        MOVEQ   lr, lr, LSR #2
        AND     lr, lr, #7                                      ; Bottom three bits only
        tracef  "table offset = %",NL,lr
  [ {TRUE}
        ADR     free_entry, offsets+(BITS-INIT_BITS)*8
  |
        ADR     free_entry, offsets-INIT_BITS*8
        ADD     free_entry, free_entry, current, LSL #3
  ]
        LDRB    current, [free_entry, lr]
        tracef  "aligned after % bits",NL,current
 ]
;
; Now clear the buffer to avoid non-determinism
;
        ADD     last_offset, offset, #7
        BIC     last_offset, last_offset, #7
 [ ClearOnBitIncrement
        ADD     offset, offset, code
        MOV     temp, #0
 |
        ADD     offset, offset, current
        MOV     bits, #0
 ]
buf_clear
 [ ClearOnBitIncrement
        STRB    temp, [output, last_offset, LSR #3]
 |
        STRB    bits, [output, last_offset, LSR #3]
 ]
        ADD     last_offset, last_offset, #8
        CMP     last_offset, offset
        BCC     buf_clear
        TST     last_offset, #&18                               ; Go for word boundary
        BNE     buf_clear
        MOV     last_offset, offset
        tracef  "new offset = %",NL,offset
 [ ClearOnBitIncrement
        MOV     pc, r9
 |
        B       do_clear
 ]

hash_retry
;
; Loop round hash table looking for free or matching entry
;
        MOV     code, #HASH_RETRY :AND: &FF
        ORR     code, code, #HASH_RETRY :AND: &FF00
        TEQ     current, #0
        MOVEQ   code, #1
        SUBNE   code, code, current                             ; Get displacement for secondary hashes

hash_retry_loop
        SUBS    current, current, code
        ADDLT   current, current, #HASH_RETRY :AND: &FF
        ADDLT   current, current, #HASH_RETRY :AND: &FF00
 [ Module
        LDR     hash, [sp, #WSOffset]
 |
        ADR     hash, hash_table
 ]
        LDR     hash, [hash, current, LSL #2]
 [ Use_left_shift
        TEQ     spare, hash, LSR #BITS
 |
        TEQ     hash, spare
        ADREQL  code, code_table
 ]
        BEQ     hash_found
        CMN     hash, #1 :SHL: BITS                             ; Carry set <=> empty slot
        BCC     hash_retry_loop
        B       hash_empty ; Deal with empty slot

finished
        tracef  "Squash: at finished",NL
        ADD     temp, output, offset, LSR #3
;        LDMIA   temp, {hash}                                    ; Word aligned load without rotation
        ANDS    code, offset, #31
        LDRNE   hash, [temp, -code, LSR #3]!
        MOVEQ   hash, previous                                  ; If hasn't been written yet
        ORRNE   hash, hash, previous, LSL code                  ; Insert bottom bits
        RSBNE   code, code, #32
        MOVNE   previous, previous, LSR code                    ; Throw away bits inserted (if any)
        ASSERT  hash < previous
        STMIA   temp, {hash, previous}
        ADD     offset, offset, bits
        ADD     offset, offset, #7
        ADD     output, output, offset, LSR #3
        LDR     r0, [sp]
        SUB     r0, output, r0
        [ {CONFIG}=26
        LDMFD   sp, {r1, r3-r9, sl, fp, sp, pc}^
        |
        LDMFD   sp, {r1, r3-r9, sl, fp, sp, pc}
        ]

;
; Tables of increments for CLEAR code
;
offsets
        =  0,  63,  54,  45,  36,  27,  18,   9                 ; ( 9 bits, offset & 7)
        =  0,  70,  60,  50,  40,  30,  20,  10                 ; (10 bits, (offset >> 1) & 7)
        =  0,  55,  22,  77,  44,  11,  66,  33                 ; (11 bits, offset & 7)
        =  0,  60,  24,  84,  48,  12,  72,  36                 ; (12 bits, (offset >> 2) & 7)
        =  0,  39,  78,  13,  52,  91,  26,  65                 ; (13 bits, offset & 7)
        =  0,  14,  28,  42,  56,  70,  84,  98                 ; (14 bits, (offset >> 1) & 7)
        =  0,  15,  30,  45,  60,  75,  90, 105                 ; (15 bits, offset & 7)
        =  0, 112,  96,  80,  64,  48,  32,  16                 ; (16 bits, (offset >> 4) & 7)

        ALIGN

;
; Data used in the compression
;
 [ :LNOT: Module
hash_table      %       HASH_RETRY*4                            ; Contains code combinations
 ]
 [ :LNOT: Use_left_shift
code_table      %       HASH_RETRY*2                            ; Contains code values
 ]

        END
@


4.2
log
@32-bit compatible

Version 0.27. Tagged as 'Squash-0_27'
@
text
@d188 1
a188 1
        LDMIA   temp, {hash}                                    ; Word aligned load without rotation
d190 1
d269 1
a269 1
        LDMIA   temp, {hash}                                    ; Word aligned load without rotation
d271 1
d390 1
a390 1
        LDMIA   temp, {hash}                                    ; Word aligned load without rotation
d392 1
@


4.1
log
@Initial revision
@
text
@d401 1
d403 3
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
