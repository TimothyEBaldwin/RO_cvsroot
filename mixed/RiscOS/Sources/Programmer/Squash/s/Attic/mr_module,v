head	4.5;
access;
symbols
	Squash-0_29:4.4
	Squash-0_28:4.4
	RO_5_07:4.4
	dellis_autobuild_BaseSW:4.4
	Ursula_merge:4.1
	Squash-0_27:4.4
	sbrodie_sedwards_16Mar2000:4.3
	dcotton_autobuild_BaseSW:4.4
	Squash-0_26:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Squash-0_25:4.2
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2014.02.15.09.08.14;	author rsprowson;	state dead;
branches;
next	4.4;
commitid	Ex4sxoAzuwZq0bpx;

4.4
date	2000.06.02.16.09.10;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.08.05.17.08.21;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	98.09.21.13.35.08;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.01;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.01;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.05.49;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.47.12;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.05.59;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Makefile recreated from fragments
compress.c: some refactoring to use symbols spat out by CMHG, local header files put into the attic.
Note, there's no RAM build option for this module now - historically it's only ever appeared in ROM but was previously cunningly arranged to look like an assembler position independent code.

Version 0.30. Tagged as 'Squash-0_30'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; -> s.mr_module
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:MsgTrans
        GET     Hdr:APCS.<APCS>

        GET     Hdr.MagicOff
        GET     Hdr.StaticDecl
        GET     VersionASM
        GET     Hdr.debug

        ; Linker symbols
        IMPORT  |Image$$RO$$Base|
        IMPORT  |Image$$RO$$Limit|
        IMPORT  |Image$$RW$$Base|
        IMPORT  |Image$$RW$$Limit|
        IMPORT  |Image$$ZI$$Base|
        IMPORT  |Image$$ZI$$Limit|
        IMPORT  |hdr$statics|

        ; extern mr_oserror *mr_module_start( mr_regset * );
        ; extern mr_oserror *mr_module_initialise( mr_regset *, int );
        ; extern mr_oserror *mr_module_finalise( mr_regset * );
        ; extern void mr_module_servicehandler( mr_regset * );
        ; extern char *mr_module_commandtable;
        ; extern int mr_module_swibase
        ; extern mr_oserror *mr_module_swihandler( mr_regset * );
        ; extern char *mr_module_swinames
        IMPORT  mr_module_start, WEAK
        IMPORT  mr_module_initialise
        IMPORT  mr_module_finalise
        IMPORT  mr_module_servicehandler
        IMPORT  mr_module_commandtable, WEAK
        IMPORT  mr_module_swibase, WEAK
        IMPORT  mr_module_swihandler, WEAK
        IMPORT  mr_module_swinames, WEAK

        EXPORT  |_Mod$Reloc$Off|    ; defined in Hdr.MagicOff
;       EXPORT  |x$stack_overflow|

        AREA    |!!!Module$$Header|,CODE,READONLY

Module_BaseAddr
        DCD     0               ; No start entry
        DCD     |_mr_module_initialise| - Module_BaseAddr
        DCD     0               ; |_mr_module_finalise| - Module_BaseAddr
        DCD     0               ; |_mr_module_servicehandler| - Module_BaseAddr
        DCD     mr_module_title - Module_BaseAddr
        DCD     mr_module_help - Module_BaseAddr
        DCD     0               ; No commands
        DCD     &42700          ; Base of SWIs
        DCD     |_mr_module_swihandler| - Module_BaseAddr
        DCD     names - Module_BaseAddr ; Swi names
        DCD     0
    [ :LNOT No32bitCode
        DCD     0 ; international messages
        DCD     mr_flags - Module_BaseAddr
    ]

NULL    *       0

mr_module_help
        DCB     "Squash",9,9,Module_MajorVersion :CC: " (" :CC: Module_Date :CC: ")", 0
mr_module_title
names   DCB "Squash",0
        DCB "Compress",0
        DCB "Decompress",0,0

        ALIGN

    [ :LNOT No32bitCode
mr_flags DCD ModuleFlag_32bit
    ]

        ; module start not implemented yet
        EXPORT  |__main|
|__main|

        MACRO
        EnterModule
        Push    "lr"
        BL      ModEntry
        MEND


|_mr_module_initialise|
        Push    "r0,r2,r3,lr"
        LDR     r2, [r12]
        TEQ     r2, #0
        BNE     %FT10

        LDR     r3, =|Image$$RW$$Limit|
        LDR     r0, =|Image$$RW$$Base|
        SUB     r3, r3, r0
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        STRVS   r0, [sp]
        Pull    "r0,r2,r3,pc",VS

        ; Attach workspace to private workspace
        STR     r2, [r12]
10
        ; Set up the magic offset for C proggies
        LDR     r0, =|Image$$RW$$Base|
        LDR     r3, =|hdr$statics|
        SUB     r0, r2, r0
        ADD     r3, r3, r0
        STR     r0, [r3]

        Pull    "r0,r2,r3,lr"
        EnterModule

        MOV     r0, #0
        STR     r0, File_Open

        ; store priv wsp for reference later
        STR     r12, Priv_Wsp

        ; call the C initialisation
        ADR     r1, Module_BaseAddr
        BL      mr_module_initialise
        B       ModExit
        LTORG

|_mr_module_swihandler|
        EnterModule
        BL      mr_module_swihandler
ModExit
        SETV
        TEQ     r0, #NULL
        CMPEQ   r0, r0            ; clear V
        STRNE   r0, [sp]
        TEQ     pc, pc
        Pull    "r0-r12,pc", EQ   ; 32-bit mode exit
        Pull    "r0-r12,pc", VC,^ ; 26-bit mode V clear exit
        Pull    "r0-r12,lr"
        ORRS    pc, lr, #V_bit    ; 26-bit mode V set exit

ModEntry
        Push    "r0-r12"
        LDR     r10, [r12]
        LDR     r0, =|hdr$statics|
        ADD     r10, r10, r0
        LDR     r0, =|Image$$RW$$Base|
        SUB     r10, r10, r0
        MOV     r0, sp
        MOV     pc, lr

        EXPORT check_address
check_address
; r0 - minimum address
; r1 - length of range to be validated
        FunctionEntry
        ADD     r1, r0, r1
        SWI     XOS_ValidateAddress
        MOVCC   r0, #0
        MOVCS   r0, #-1
        Return

accessed        * &5c ; a random value

; Internal function
msgtrans_openfile
        Push    "lr"
        ADR     r0, MsgTrans_FileData
        ADR     r1, MsgTrans_FileName
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        MOVVC   r0, #accessed
        STRVC   r0, File_Open
        Pull    "pc"

; Internal function
msgtrans_closefile
        Push    "lr"
        LDR     r0, File_Open
        TEQ     r0, #accessed
        ADREQ   r0, MsgTrans_FileData
        SWIEQ   XMessageTrans_CloseFile
        Pull    "pc"

        EXPORT error_return
error_return
; r0 - error index
; r1 - parameter
        FunctionEntry "r1-r4"
        ; Set up r4 for MessageTrans_ErrorLookup
        MOV     r3, r0
        MOV     r4, r1
        ; Make sure messages file is open
        LDR     r0, File_Open
        TEQ     r0, #accessed
        BLNE    msgtrans_openfile
        Return  "r1-r4",,VS
        ; Put address of error block into r0
        ADR     r0, Error_Table
        ADD     r0, r0, r3, LSL #2
        LDR     r1, [r0]
        ADR     r0, Module_BaseAddr
        ADD     r0, r1, r0
        ; Set up for MessageTrans_ErrorLookup
        ADR     r1, MsgTrans_FileData
        MOV     r2, #0
        MOV     r3, #0
        SWI     XMessageTrans_ErrorLookup
        Return  "r1-r4"

        [ {FALSE}
|x$stack_overflow|
        MOV     pc, lr ; No stack checking
        ]
MsgTrans_FileName = "Resources:$.Resources.Squash.Messages",0
               ALIGN
Squash_ErrorBase     *      &920
Squash_bad_SWI DCD Squash_ErrorBase
               = "BadSWI",0
               ALIGN
Squash_bad_address DCD Squash_ErrorBase+1
               = "COM1",0
               ALIGN
Squash_corrupt_input DCD Squash_ErrorBase+2
               = "COM2",0
               ALIGN
Squash_corrupt_workspace DCD Squash_ErrorBase+3
               = "COM3",0
               ALIGN
Squash_bad_parameters DCD Squash_ErrorBase+4
               = "COM4",0
               ALIGN
Error_Table
               DCD Squash_bad_SWI
               DCD Squash_bad_address
               DCD Squash_corrupt_input
               DCD Squash_corrupt_workspace
               DCD Squash_bad_parameters

        END
@


4.4
log
@32-bit compatible

Version 0.27. Tagged as 'Squash-0_27'
@
text
@@


4.3
log
@Null service call handler and finalisation code removed.

Version 0.26. Tagged as 'Squash-0_26'
@
text
@d21 1
d71 4
d87 4
a140 18
  [ {FALSE}
|_mr_module_finalise|
        EnterModule
        BL      mr_module_finalise
        TEQ     r0, #NULL
        BLEQ    msgtrans_closefile
        MOVVC   r0, #NULL
        B       ModExit

|_mr_module_servicehandler|
        ; Plug in fast service rejection here
        MOVS    pc, lr

        EnterModule
        BL      mr_module_servicehandler
        B       ModExit
  ]

d145 1
d147 1
d149 3
d153 1
a153 2
        MOVEQS  pc, lr
        ORRS    pc, lr, #V_bit
d169 1
a169 1
        Push    "lr"
d174 1
a174 1
        Pull    "pc"
d178 1
d189 1
d202 1
a202 1
        Push    "r1-r4,lr"
d210 1
a210 1
        Pull    "r1-r4,pc",VS
d222 1
a222 1
        Pull    "r1-r4,pc"
@


4.2
log
@Makefile changed to use LocalRes$Path.
Changed to use srccommit.
German resources imported.

Version 0.25. Tagged as 'Squash-0_25'
@
text
@d61 2
a62 2
        DCD     |_mr_module_finalise| - Module_BaseAddr
        DCD     |_mr_module_servicehandler| - Module_BaseAddr
d132 1
d148 1
@


4.1
log
@Initial revision
@
text
@d24 1
a24 1
        GET     s.Version
d74 1
a74 1
        DCB     "Squash",9,9,Version :CC: " (" :CC: CurrentDate :CC: ")", 0
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
