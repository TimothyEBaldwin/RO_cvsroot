head	4.11;
access;
symbols
	ChangeFSI-1_63:4.11
	ChangeFSI-1_62:4.10
	ChangeFSI-1_61:4.8
	ChangeFSI-1_60:4.8
	ChangeFSI-1_59:4.8
	ChangeFSI-1_58:4.7
	ChangeFSI-1_57:4.7
	ChangeFSI-Import-IJG8d:4.7
	ChangeFSI-1_56:4.7
	ChangeFSI-1_55:4.6
	ChangeFSI-1_54:4.6
	ChangeFSI-1_53:4.6
	ChangeFSI-1_52:4.6
	ChangeFSI-1_51:4.6
	ChangeFSI-1_50:4.6
	ChangeFSI-1_49:4.6
	ChangeFSI-1_48:4.6
	ChangeFSI-1_47:4.6
	ChangeFSI-1_46:4.6
	ChangeFSI-1_45:4.6
	ChangeFSI-1_44:4.6
	ChangeFSI-1_43:4.6
	ChangeFSI-1_42:4.6
	ChangeFSI-1_41:4.6
	ChangeFSI-1_40:4.5
	ChangeFSI-1_39:4.5
	ChangeFSI-1_38:4.5
	ChangeFSI-1_37:4.5
	ChangeFSI-1_36:4.5
	ChangeFSI-1_35:4.5
	ChangeFSI-1_34:4.5
	ChangeFSI-1_33:4.5
	ChangeFSI-1_32:4.3
	ChangeFSI-1_31:4.3
	ChangeFSI-1_30:4.3
	ChangeFSI-1_29:4.3
	ChangeFSI-1_28:4.3
	ChangeFSI-1_27:4.3
	ChangeFSI-1_26:4.3
	ChangeFSI-1_25:4.3
	ChangeFSI-1_24:4.3
	ChangeFSI-1_23:4.3
	ChangeFSI-1_22:4.3
	ChangeFSI-1_21:4.2
	ChangeFSI-1_20:4.2
	ChangeFSI-1_19:4.1.1.1
	ChangeFSI-1_18:4.1.1.1
	ChangeFSI-1_12:4.1.1.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.11
date	2018.11.16.22.58.31;	author rsprowson;	state Exp;
branches;
next	4.10;
commitid	yKRmoFQbKhQCPd0B;

4.10
date	2018.09.30.18.06.42;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	6OJyeQNOntxlG9UA;

4.9
date	2018.09.30.14.56.41;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	3uecln50CR20G8UA;

4.8
date	2016.11.04.23.02.51;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	L9m53Pgl4fzRHRsz;

4.7
date	2015.10.06.20.38.21;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	zgAq71HDHoPrB5Ey;

4.6
date	2013.12.08.09.21.30;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	FsEEpJFeopPmijgx;

4.5
date	2012.09.15.20.25.33;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	QJhiPKukX0LUoFkw;

4.4
date	2012.09.03.21.24.51;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	Ohf7voZalE3878jw;

4.3
date	2003.06.02.10.50.23;	author rsprowson;	state Exp;
branches;
next	4.2;

4.2
date	2003.01.20.10.21.51;	author rsprowson;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.18.08;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.18.08;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.16.29;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.11
log
@Add 4k and 64k sprite output options
Update ChangeFSI's 16bpp output code paths to convert to 4k and 64k sprites (as well as the pre existing 32k RISC OS 3.5 style).
Also, simplify the sprite output dialogue a little by grouping the colours together and the DPI as an option, to halve the number of radio buttons.
If ChangeFSI is run on a kernel without 4k/64k support, those two depths are greyed out in the GUI (since after processing the desktop frontend expects to SpriteOp plot them), however at the command line the 2 new depths are always available (as S12 and S16).

ChangeFSI: Add the conversion code
DesktopFE: Rework dialogue with fewer radio icons, add fading logic

Version 1.63. Tagged as 'ChangeFSI-1_63'
@
text
@============================================================================
                   ChangeFSI command line and BASIC usage
============================================================================


This file gives the command line syntax of ChangeFSI, details of options not
available from the desktop, and examples of use. It also tells you how to
use it as a BASIC library. Finally there is an important note about certain
system variables that must be set to ensure full functionality.


*ChangeFSI
==========

Changes source image to output image, with optional scaling and processing.

Syntax
------
ChangeFSI [<in file> <out file> <mode> [<scale> [<y scale>]] [<options>]]

Parameters
----------
<in file>       A valid pathname specifying the source image

<out file>      A valid pathname specifying a file to hold the output image

<mode>          The file format used to output the image. Valid modes are:
                AIM             output as AIM
                IRLAM           output as Irlam Instruments 24-bit
                JPEG[MONO]<n>   output as JPEG (JFIF); <n> sets the quality
                                of the output image in the range 0 to 100
                p1              output as pbm (black & white), ASCII encoded
                p2              output as pgm (grey), ASCII encoded
                p3              output as ppm (colour), ASCII encoded
                p4              output as pbm (black & white), binary encoded
                p5              output as pgm (grey), binary encoded
                p6              output as ppm (colour), binary encoded
                p15             output as CFSI packed portable bitmap
                S12,<x>,<y>     output as 4k colour 16bpp sprite; <x> and <y>
                                give pixels per inch in x and y directions
                S15,<x>,<y>     output as 32k colour 16bpp sprite; <x> and <y>
                                give pixels per inch in x and y directions
                S16,<x>,<y>     output as 64k colour 16bpp sprite; <x> and <y>
                                give pixels per inch in x and y directions
                S32,<x>,<y>     output as 16M colour 32bpp sprite; <x> and <y>
                                give pixels per inch in x and y directions
                <mode>[c|d|t|r] output as 1/2/4/8bpp sprite, in the given
                                mode number; suffix makes it use:
                        c       1bpp:   clustered dithering with 4×4 cell
                                2bpp:   black, cyan, magenta and yellow
                        d       1bpp:   clustered dithering with 2×2 cell
                                4bpp:   1 bit red, 1 bit green, 1 bit blue
                                8bpp:   256 level grey scale
                        t       1bpp:   clustered dithering with 3×3 cell
                                4bpp:   16 level grey scale
                                8bpp:   use table driven selection
                        r       2bpp:   devious colour matching algorithm
                                4bpp:   devious colour matching algorithm
                                8bpp:   devious colour matching algorithm
                        <none>  1bpp:   b/w dispersed dot dithering
                                2bpp:   4 level grey scale
                                4bpp:   8 level grey scale
                                8bpp:   John Bowler's colour matching
                                        algorithm (defaults to 'r' mode if
                                        not VIDC1 compatible)

<scale>,        amount to scale output by from its default size (the same as
<y scale>       that of the source, after correcting for pixel size):
                <n>:<n>         scale in ratio output size:source size
                <n>:[0]         scale to <n> pixels
                =               scale to fill output mode

<options>       Flags specifying what processing is to be applied to the
                source image:
                -info           give details of the source image
                -hist           don't process the source image, but display
                                a histogram of it instead
                -nosize         disable automatic pixel size correction for
                                source pixels only
                -noscale        disable all automatic pixel size correction
                -lock           lock picture aspect ratio
                -rotate         rotate the image by +90° (ie anti-clockwise)
                -rotate-        rotate the image by -90° (ie clockwise)
                -hflip          horizontally flip the image
                -vflip          vertically flip the image
                -range          expand the source's dynamic range to full
                                scale
                -equal          perform histogram equalisation
                -nodither       disable the error diffusion dithering
                -invert         invert the colour range of the source image
                -brighten       slightly brighten the entire image (caution:
                                this may saturate pale hues to white)
                -black[<n>]     corrects for black inked spots larger than
                                square pixels; <n> is in the range 0 (not at
                                all) to 128 (harsh), and defaults to 32
                -gamma[<n>]     apply gamma correction; <n> overrides the
                                default of 2.2
                -sharpen[<n>]   digitally sharpen the image; <n> is in the
                                range 8 (harsh) to 31 (soft), and defaults
                                to 24
                -smooth[<n>]    digitally smooth the image; <n> is in the
                                range 1 (very smooth) to 23 (hardly
                                smoothed at all), and defaults to 1
                -nomode         don't change to mode 0 while processing the
                                image
                -max<n>         set the maximum size of the output image
                                before it is output to disc
                -red<r>,        change the red, green and blue weights for
                -green<g>,      deriving monochrome luminance from their CIE
                -blue<b>        defaults of 0.299, 0.587 and 0.114

Use
---
You need to have booted the ChangeFSI application which sets up an alias for
the ChangeFSI command; and you must be running outside the desktop (e.g. by
pressing F12).

An hourglass is displayed giving the percentage processed; this may run
through twice for some of the more expensive options. The program reads the
source image from disc and builds the output in memory, having claimed some
from the system.

On machines where the OS is not shadowed in RAM, you can improve ChangeFSI's 
performance by first typing '*RMFaster BASIC'.

The -nomode option
------------------
The program selects mode 0 when doing any work in order to speed up
processing; you can disable this using -nomode.

The -max option
---------------
You can build very large output files strips at a time and send them
directly to disk using the parameter '-max'. For example:

  ChangeFSI <in> <out> 28 -max512K

will convert the file with a maximum of 512KBytes held in memory. Options 25t,
-rotate and -vflip don't work when this is being done.

The -red, -green and -blue options
----------------------------------
Conversion from colour to monochrome shades of grey is done with the CIE
luminance weights for red, green and blue (0.299, 0.587, 0.114), which is
the standard conversion for broadcast television. These values can be
altered using the -red, -green and -blue options, so you can try different
weightings for conversion to monochrome. This also allows you to separate
out some of the colours in making a black and white image (e.g. -red1
-green0 -blue0).

Other options
-------------
For details of other options, see the DesktopUse file's descriptions of the
equivalent desktop options.

Examples
--------
 Make "standard palette" versions of existing 256 colour images (for
  example the Watford digitiser plus colour board doesn't use the standard
  palette):

  changefsi in out 13p            for a coloured Watford picture

 Convert a colour picture to something you can see on a high resolution
  monochrome monitor:

  changefsi in out 18 -sharpen -info

 Convert a large monochrome picture (from a scanner, say) to something
  which can be seen:

  changefsi in out 20t 1:4 -gamma

 Convert a colour picture to grey scale for the desktop:

  changefsi in out 20

 Change a 512 by 480 image to standard format and aspect ratio:

  changefsi in out 15 640:512 512:480           or:
  changefsi in out = -range

 Change to digital r, g, b:

  changefsi in out 20d -sharpen16

 Convert a picture for printing on a 300dpi laser.

  changefsi in out 18c 300:90 -sharpen


Using ChangeFSI as a BASIC library
==================================

You can also load ChangeFSI as a BASIC function library from other BASIC
programs, thus:

  LIBRARY "<ChangeFSI$Dir>.ChangeFSI"

This gives a new function which provides the full command line functionality 
of ChangeFSI, defined as the following function:
 
  FNChangeFSI(A$,spritearea%,workspace%,worklimit%,
              oksave%,okinfo%,RETURN ram%,fast%) 

Where:

A$             the command line argument(s), see examples above
spritearea%    address for the output image
               or -1 to let ChangeFSI create a spritearea
workspace%     address for workspace start, extending up to worklimit%
               or -1 and worklimit% = 0 to use BASIC's variable workspace
               or -1 and worklimit% = end of wimp slot to use the whole slot
worklimit%     see description for workspace%
oksave%        when TRUE don't confirm file saves, assume OK
okinfo%        when TRUE output info messages during processing
ram%           returns the sprite area used for output
fast%          when TRUE will change to MODE 0 to speed processing by reducing
               the video bandwidth (only useful when no video RAM is fitted)

Returns 0   => output completed successfully
        1   => output completed successfully, some information messages shown
        100 => failed 

It may also produce an error (to whatever error handler is present) if it 
fails in a non recoverable manner.

The usefulness of workspace% = -1 and worklimit% = 0 may be limited since any
memory claimed during processing can't be released on completion (as using
the CLEAR keyword would clear the variables of the calling program too),
leading to a memory leak for multiple library calls.

When used with spritearea% = -1, the resulting sprite area can be released
after use with PROCremovearea.


System variables
================

For command line or BASIC library use, the variable ChangeFSI$Dir must be
set to the full pathname of the !ChangeFSI application, or certain
operations may fail.

For command line use, if a fatal error occurs during processing the error
message is captured in ChangeFSI$ReturnCode. This variable is cleared (unset)
if the requested operation completed successfully. 

By default ChangeFSI uses a 128K cache to speed processing; in particular,
JPEG files that fit inside the cache will be read much more quickly. You can
change the size of this cache by setting the variable ChangeFSI$Cache. For
example:

  *Set ChangeFSI$Cache 256K

You can also set the system variable ChangeFSI$PCDIndex to change the
PhotoCD resolution that is read. The default value is 3, which corresponds
to the base image.
@


4.10
log
@Further docs improvements
Output formats were only partially described, and supported
* Mention IRLAM output format switch in the CmdBasUse docs, add an example to the tests
* Explain what 'p15' is in CmdBasUse (was only explained in the input formats docs)
* Prefer S15 to S16

Delete support for C15 output. This appears to have been experimental as the resulting output had an embedded comment saying YUV but the data that followed was identical to a P15 RGB image. Also, ChangeFSI refused to load the C15 image it just wrote.
Delete support for S24 output switch. This was an undocumented alias for S32.
Add S15 as a possible output mode and prefer its use for 32k sprites - freeing up S16 for future 64k sprite support (and, logically S12 for 4k sprites).

Retagged as 'ChangeFSI-1_62'
@
text
@d39 2
d43 2
@


4.9
log
@Docs improvement
Mention how to release the sprite area when called as a library.
Use TRUE/FALSE for things that are notionally documented as booleans.

Version 1.62. Tagged as 'ChangeFSI-1_62'
@
text
@d29 1
d38 5
a42 5
                p15             output as p15
                S16,<x>,<y>     output as 16bpp sprite; <x> and <y> give
                                pixels per inch in x and y directions
                S32,<x>,<y>     output as 32bpp sprite; <x> and <y> give
                                pixels per inch in x and y directions
@


4.8
log
@[236] Adjust scaling factors to avoid righthand/bottom edge conditions
source/ChangeFSI: After rounding up the scaled output size, recalculate the div/mul factors so they produce a whole number of pixels instead of falling off the end of the input array and mixing in black.
source/DesktopFE: Remove dead variable "safe%" and change tofitx/tofity to integers.
Minor clarification in CmdBasUse documentation.

Tested with a 100x100 green sprite, scaled by 5:3/5:3 and 3:7/3:7. Fixes ticket #236.

Version 1.59. Tagged as 'ChangeFSI-1_59'
@
text
@d228 3
@


4.7
log
@Add support for type 15 (extended type) and 16 (4k colour) sprites
Sprite type 16 is now accepted as an input format, by defining the appropriate 4:4:4 colour lookup tables.
Type 15 class RGB is handled too with 1/2/4/8/12/15/16/32bpp sprites with and without RGB/BGR reversal.
Other changes:
Tighten up the check for BTPC files, it turns out BTPC 5 also exists but has an incompatible format, so rather than trying to decode them and fail, fail early.
Mention the return code in Documents/CmdBasUse.
Change real variable 'rgb' to integer since it's only holding a flag.

Tested with a variety of special sprites, and a BTPC 5 file.

Version 1.56. Tagged as 'ChangeFSI-1_56'
@
text
@d109 3
a111 3
You need to have the ChangeFSI program in the library, or on Run$Path, or to
specify its full pathname on the command line; and you must be running
outside the desktop (e.g. by pressing F12).
@


4.6
log
@Documentation updates
Not all of the formats listed and supported were in the tables.
@
text
@d236 4
@


4.5
log
@Documentation enhanced
* Working example of using ChangeFSI as a library added
* Note about not freeing memory when worklimit%=0 added to docs
Retagged as ChangeFSI-1_33.
@
text
@d236 2
a237 2
By default ChangeFSI uses a 128K cache to speed processing. For command line
or BASIC library use, any input JPEG images must fit in the cache. You can
@


4.4
log
@Documentation update to accurately describe FNChangeFSI
Quite hard to guess what to do when the REM's have been crunched out of the binary otherwise.
Retagged as ChangeFSI-1_33.
@
text
@d203 1
a203 1
A$             the command line argument(s)
d223 6
d241 1
a241 1
Set ChangeFSI$Cache 256K
@


4.3
log
@Removed another 2 debugging SWI WriteI's missed earlier.
Choices are now read from Choices: not <Choices$Write>
Changed FNChangeFSI so that -1 is used to determine where the workspace
comes from,rather than taking any -ve number.This now matches the docs.
Jiggled "output" template.

Version 1.22. Tagged as 'ChangeFSI-1_22'
@
text
@d193 1
a193 1
LIBRARY "<ChangeFSI$Dir>.ChangeFSI"
d195 24
a218 13
This gives a new function - FNChangeFSI - which provides the full command
line functionality of ChangeFSI. FNChangeFSI takes these arguments:

A$              a command line argument
spritearea%     an address, or -1 for the spritearea built by ChangeFSI
workspace%      an address, or -1 for ChangeFSI's other workspace
worklimit%      an address (unused if workspace% is -1)
fast%           TRUE for MODE 0 selection

It produces an error (to whatever error handler is present) if it fails.

It only saves the sprite to the file given in the command string if
spritearea% is equal to -1.
d220 2
@


4.2
log
@Added btpc 4.1 support,though the detection in the main program has
always been there the binary vanished sometime round 1995.
Added abridged info on BTPC to the appropriate docs,plus docs updates
to reflect interesting information which seems to have been
progressively removed with time.
Yucky sprites added,Sprites23 deleted.
The output window now remembers where it was last opened instead of
always jumping to the middle of the screen.
You no longer need to be in a specific screen depth for any operation,
before (particularly using special mode "r") it needed to read the
palette in a particular mode - now if it realises it cannot it will look
for a default palette in its Palettes directory and only then give an
error.
Reinstated 256 colour special mode "t",this has always been missing the
4096 colour lookup table and most of the support for it was removed in
about 1992 though the assembler remained leading to a "No such variable"
error when trying to use it.GenCFSIict produces the table.

Version 1.20. Tagged as 'ChangeFSI-1_20'
@
text
@d118 2
a119 1
You can improve ChangeFSI's performance by first typing '*RMFaster BASIC'.
d201 1
a201 1
worklimit%      an address (unused if workspace%<0)
@


4.1
log
@Initial revision
@
text
@d51 1
d206 1
a206 1
spritearea% is <0.
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
