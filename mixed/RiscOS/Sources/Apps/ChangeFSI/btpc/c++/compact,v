head	1.1;
access;
symbols
	ChangeFSI-1_62:1.1
	ChangeFSI-1_61:1.1
	ChangeFSI-1_60:1.1
	ChangeFSI-1_59:1.1
	ChangeFSI-1_58:1.1
	ChangeFSI-1_57:1.1
	ChangeFSI-Import-IJG8d:1.1
	ChangeFSI-1_56:1.1
	ChangeFSI-1_55:1.1
	ChangeFSI-1_54:1.1
	ChangeFSI-1_53:1.1
	ChangeFSI-1_52:1.1
	ChangeFSI-1_51:1.1
	ChangeFSI-1_50:1.1
	ChangeFSI-1_49:1.1
	ChangeFSI-1_48:1.1
	ChangeFSI-1_47:1.1
	ChangeFSI-1_46:1.1
	ChangeFSI-1_45:1.1
	ChangeFSI-1_44:1.1
	ChangeFSI-1_43:1.1
	ChangeFSI-1_42:1.1
	ChangeFSI-1_41:1.1
	ChangeFSI-1_40:1.1
	ChangeFSI-1_39:1.1
	ChangeFSI-1_38:1.1
	ChangeFSI-1_37:1.1
	ChangeFSI-1_36:1.1
	ChangeFSI-1_35:1.1
	ChangeFSI-1_34:1.1
	ChangeFSI-1_33:1.1
	ChangeFSI-1_32:1.1
	ChangeFSI-1_31:1.1
	ChangeFSI-1_30:1.1
	ChangeFSI-1_29:1.1
	ChangeFSI-1_28:1.1
	ChangeFSI-1_27:1.1
	ChangeFSI-1_26:1.1
	ChangeFSI-1_25:1.1
	ChangeFSI-1_24:1.1
	ChangeFSI-1_23:1.1
	ChangeFSI-1_22:1.1
	ChangeFSI-1_21:1.1
	ChangeFSI-1_20:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.01.20.10.21.57;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Added btpc 4.1 support,though the detection in the main program has
always been there the binary vanished sometime round 1995.
Added abridged info on BTPC to the appropriate docs,plus docs updates
to reflect interesting information which seems to have been
progressively removed with time.
Yucky sprites added,Sprites23 deleted.
The output window now remembers where it was last opened instead of
always jumping to the middle of the screen.
You no longer need to be in a specific screen depth for any operation,
before (particularly using special mode "r") it needed to read the
palette in a particular mode - now if it realises it cannot it will look
for a default palette in its Palettes directory and only then give an
error.
Reinstated 256 colour special mode "t",this has always been missing the
4096 colour lookup table and most of the support for it was removed in
about 1992 though the assembler remained leading to a "No such variable"
error when trying to use it.GenCFSIict produces the table.

Version 1.20. Tagged as 'ChangeFSI-1_20'
@
text
@#include <string.h>
#include "compact.h"
//
// Member functions for the compact data type implement a static Huffman coder.
//

void compactor::reset(void) {
	// printf("reset\n"); fflush(stdout);
	for (int i = 0; i < 256; i++)
		freq[i] = 0;
	}

void compactor::buildtree(void)
// Based on JPEG huffman algorithm
	{
	// printf("buildtree\n"); fflush(stdout);
	int i;
	int h1;
	int h2;
	int length[256];
	int descendents[256];
	for (i = 0; i < 256; i++)
		{
		length[i] = 0;
		descendents[i] = -1;
		}
	while(1) {
		h1 = -1;
		h2 = -1;
		// Find smallest non-zero frequency
		for (i = 0; i < 256; i++) {
			if (freq[i]) {
			    if (h1 == -1 || freq[i] < freq[h1]) {
				if (h2 == -1 || freq[h1] < freq[h2])
					h2 = h1;
				h1 = i;
			    } else if (h2 == -1 || freq[i] < freq[h2])
				h2 = i;
			}
		}
		if (h2 == -1) // Found the root
			break;
		// Merge the two trees
		freq[h1] += freq[h2];
		freq[h2] = 0;
		length[h1]++;
		while (descendents[h1] >= 0) {
			h1 = descendents[h1];	// Go down chain
			length[h1]++;
			}
		//  Put h2 on this chain
		descendents[h1] = h2;
		// And go down its chain
		while (descendents[h1] >= 0) {
			h1 = descendents[h1];
			length[h1]++;
			}
		}
	if (h1 == -1) // Empty tree - create dummy char
		{
		longest = 0;
		num_symbols_of_length[0] = 1;
		ordered_symbols[0] = 0;
		return;
		}
	if (length[h1] == 0)	// one symbol
		{
		longest = 0;
		num_symbols_of_length[0] = 1;
		ordered_symbols[0] = h1;
		return;
		}
	for (i = 0; i < 32; i++)
		num_symbols_of_length[i] = 0;
	for (i = 0; i < 256; i++) {
		if (length[i])
			num_symbols_of_length[length[i]]++;
			// Assume never have case of 256 equal symbols
		}
	// Reduce to TABLEBITS-sized words using JPEG algorithm
	for (i = 31; i > TABLEBITS; i--) {
		while(num_symbols_of_length[i]) {
			int j = i - 2;
			while (!num_symbols_of_length[j])
				j--;
			num_symbols_of_length[i] -= 2;
			num_symbols_of_length[i-1]++;
			num_symbols_of_length[j+1] += 2;
			num_symbols_of_length[j]--;
			}
		}
	while(num_symbols_of_length[i] == 0)
		i--;
	// i is now length of longest codeword
	longest = i;
	int k = 0;
	for (i = 1; i <= 31; i++) {
		for (int j = 0; j < 256; j++)
			if (length[j] == i)
				ordered_symbols[k++] = j;
		}
	}

// Write the Huffman tree to the output code file
void compactor::writetree(void) {
	int i;
	// printf("writetree\n"); fflush(stdout);
	pfio->putbit(longest & 0x8);
	pfio->putbit(longest & 0x4);
	pfio->putbit(longest & 0x2);
	pfio->putbit(longest & 0x1);
	// printf("longest = %d\n", longest); fflush(stdout);
	for (i = 1; i <= longest; i++)
		{
		// printf("num of length %d = %d\n",i, num_symbols_of_length[i]);
		pfio->putbyte(num_symbols_of_length[i]);
		}
	// Then the literals
	int k = 0;
	for (i = 0; i <= longest; i++) {
		for (int j = 0; j < num_symbols_of_length[i]; j++)
			{
			// printf("%d ",ordered_symbols[k]);
			pfio->putbyte(ordered_symbols[k++]);
			}
		}
	// printf("\n");
	fflush(stdout);
	maketable_encode();
	}

// Read the Huffman tree from the input code file.
void compactor::readtree(void) {
	int i;
	longest = pfio->lookbits(4,0xf);
	pfio->skipbits(4);
	//printf("longest = %d\n", longest); fflush(stdout);
	int tablesize = 1<<longest;
	longmask = tablesize - 1;
	if (!longest)
		num_symbols_of_length[0] = 1;
	else
		num_symbols_of_length[0] = 0;
	for (i = 1; i <= longest; i++) {
		num_symbols_of_length[i] = pfio->lookbits(8,0xff);
		pfio->skipbits(8);
		//printf("num of length %d = %d\n",i,num_symbols_of_length[i]);
		}
	int k = 0;
	for (i = 0; i <= longest; i++) {
		for (int j = 0; j < num_symbols_of_length[i]; j++) {
			ordered_symbols[k++] = pfio->lookbits(8,0xff);
			pfio->skipbits(8);
			//printf("%d ", ordered_symbols[k-1]);
			}
		}
	//printf("\n"); fflush(stdout);
	maketable_decode();
	}
void compactor::maketable_encode(void) {
	// Create coding tables
	// First create temporary tables ordered by code length
	//printf("maketable_encode\n"); fflush(stdout);
	unsigned char codelength[257];
	unsigned short codebits[256];
	int k = 0;
	for (int i = 1; i <= longest; i++) {
		for (int j = 0; j < num_symbols_of_length[i]; j++)
			codelength[k++] = i;
		}
	codelength[k] = 0;	// Sentinal
	int lastsymbol = k;
	int codeword = 0;
	k = 0;
	int total = codelength[0];
	while(codelength[k]) {
		while(codelength[k] == total) {
			codebits[k++] = codeword;
			codeword++;
			}
		codeword <<= 1;
		total++;
		}
	// And finally install in lookup table
	memset(enclength,0,256);	// So all unused slots will be 0
	/*
	if (!longest) {
		printf("0-bit symbol: %d\n",ordered_symbols[0]); fflush(stdout);
		}
	*/
	for (k = 0; k < lastsymbol; k++) {
		encode[ordered_symbols[k]] = codebits[k];
		enclength[ordered_symbols[k]] = codelength[k];
		/*
		printf("%d: %d bits: ",ordered_symbols[k],codelength[k]);
		for (int temp = 1; temp <= codelength[k]; temp++) {
			if (codebits[k] & (1<<(codelength[k]-temp)))
				printf("1");
			else
				printf("0");
			}
		printf("\n"); fflush(stdout);
		*/
		}
	}
void compactor::maketable_decode(void) {
	// Create coding tables
	//printf("maketable_decode\n"); fflush(stdout);
	if (!longest)	// Null table
		{
		memset(declength,0,TABLESIZE);
		memset(decode,ordered_symbols[0],TABLESIZE);
		//printf("0-bit symbol: %d\n",ordered_symbols[0]); fflush(stdout);
		return;
		}
	// First create temporary tables ordered by code length
	unsigned char codelength[257];
	unsigned short codebits[256];
	int k = 0;
	int i;
	for (i = 1; i <= longest; i++) {
		for (int j = 0; j < num_symbols_of_length[i]; j++)
			codelength[k++] = i;
		}
	codelength[k] = 0;	// Sentinal
	int lastsymbol = k;
	int codeword = 0;
	k = 0;
	int total = codelength[0];
	while(codelength[k]) {
		while(codelength[k] == total) {
			codebits[k++] = codeword;
			codeword++;
			}
		codeword <<= 1;
		total++;
		}
	// And finally install in lookup table
	k = 0;
	for (int length = 1; length <= longest; length++) {
		for (i = 1; i <= num_symbols_of_length[length]; i++) {
			int entry = codebits[k] << (longest-length);
			int j = 1 << (longest-length);
		/*
		printf("%d: %d bits: ",ordered_symbols[k],codelength[k]);
		printf("installing in table from %d to %d... ",
			entry, entry+j);
		for (int temp = 1; temp <= codelength[k]; temp++) {
			if (codebits[k] & (1<<(codelength[k]-temp)))
				printf("1");
			else
				printf("0");
			}
		printf("\n"); fflush(stdout);
		*/
			while(j--) {
				decode[entry] = ordered_symbols[k];
				declength[entry] = length;
				entry++;
				}
			k++;
			}
		}
	}
void compactor::put(int symbol)
{
	int cnt;
	if ((cnt = enclength[symbol]) != 0)
		pfio->putbits(encode[symbol],cnt);
	//if (longest && !cnt)
	//	fprintf(stderr,"Tried to code untrained symbol %d\n",symbol);
	//printf("unenc = %d, coded %d bits\n",symbol,cnt);
}
@
