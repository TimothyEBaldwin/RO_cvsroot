head	1.1;
access;
symbols
	ChangeFSI-1_63:1.1
	ChangeFSI-1_62:1.1
	ChangeFSI-1_61:1.1
	ChangeFSI-1_60:1.1
	ChangeFSI-1_59:1.1
	ChangeFSI-1_58:1.1
	ChangeFSI-1_57:1.1
	ChangeFSI-Import-IJG8d:1.1
	ChangeFSI-1_56:1.1
	ChangeFSI-1_55:1.1
	ChangeFSI-1_54:1.1
	ChangeFSI-1_53:1.1
	ChangeFSI-1_52:1.1
	ChangeFSI-1_51:1.1
	ChangeFSI-1_50:1.1
	ChangeFSI-1_49:1.1
	ChangeFSI-1_48:1.1
	ChangeFSI-1_47:1.1
	ChangeFSI-1_46:1.1
	ChangeFSI-1_45:1.1
	ChangeFSI-1_44:1.1
	ChangeFSI-1_43:1.1
	ChangeFSI-1_42:1.1
	ChangeFSI-1_41:1.1
	ChangeFSI-1_40:1.1
	ChangeFSI-1_39:1.1
	ChangeFSI-1_38:1.1
	ChangeFSI-1_37:1.1
	ChangeFSI-1_36:1.1
	ChangeFSI-1_35:1.1
	ChangeFSI-1_34:1.1
	ChangeFSI-1_33:1.1
	ChangeFSI-1_32:1.1
	ChangeFSI-1_31:1.1
	ChangeFSI-1_30:1.1
	ChangeFSI-1_29:1.1
	ChangeFSI-1_28:1.1
	ChangeFSI-1_27:1.1
	ChangeFSI-1_26:1.1
	ChangeFSI-1_25:1.1
	ChangeFSI-1_24:1.1
	ChangeFSI-1_23:1.1
	ChangeFSI-1_22:1.1
	ChangeFSI-1_21:1.1
	ChangeFSI-1_20:1.1
	ChangeFSI-1_19:1.1;
locks; strict;
comment	@# @;


1.1
date	2002.11.12.15.32.26;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Nuked a BICEQS in the shell code that got missed.
Choices now stored in choices$write not locally.
pcdtemp spool file now put in wimp$scrapdir not locally.
Removed binary stored hpcdtoppm (now built from sources).
Added tests directory which contain some useful test images for Changefsi
Port of newer "hpcdtoppm",the bits changed from the original are all
demarked by "RISCOS_TWEAK".

Version 1.19. Tagged as 'ChangeFSI-1_19'
@
text
@/* hpcdtoppm (Hadmut's pcdtoppm) v0.6
*  Copyright (c) 1992, 1993, 1994 by Hadmut Danisch (danisch@@ira.uka.de).
*  Permission to use and distribute this software and its
*  documentation for noncommercial use and without fee is hereby granted,
*  provided that the above copyright notice appear in all copies and that
*  both that copyright notice and this permission notice appear in
*  supporting documentation. It is not allowed to sell this software in 
*  any way. This software is not public domain.
*/

#include "hpcdtoppm.h"

#ifdef OWN_WRITE


static uBYTE BUF[own_BUsize];
#define BUinit {BUcount=0;BUptr=BUF;}

#define BUrgb_flush        {fwrite(BUF,BUcount*3,1,fout);BUinit; }
#define BUrgb_write(r,g,b) {if(BUcount>=own_BUsize/3) BUrgb_flush; *BUptr++ = r ; *BUptr++ = g ; *BUptr++ = b ; BUcount++;}

#define BUgreyflush        {fwrite(BUF,BUcount,1,fout);BUinit; }
#define BUgreywrite(g)     {if(BUcount>=own_BUsize) BUgreyflush;  *BUptr++ = g ;  BUcount++;}







void write_ppm(FILE *fout,dim w,dim h, 
               uBYTE *rptr,sdim rzeil,sdim rpix,  
               uBYTE *gptr,sdim gzeil,sdim gpix,  
               uBYTE *bptr,sdim bzeil,sdim bpix) 
 {register uBYTE *pr,*pg,*pb;
  dim x,y;
  static uBYTE *BUptr;
  sINT   BUcount;

  fprintf(fout,PPM_Header,w,h);
  BUinit;
  for(y=0;y<h;y++)
   {
     pr= rptr; rptr+=rzeil;
     pg= gptr; gptr+=gzeil;
     pb= bptr; bptr+=bzeil;
     for(x=0;x<w;x++) 
      {BUrgb_write(*pr,*pg,*pb);
       pr+=rpix;  pg+=gpix;  pb+=bpix;
      }
   }
  BUrgb_flush;

 }




void write_pgm(FILE *fout,dim w,dim h, uBYTE *ptr,sdim zeil,sdim pix) 
 {register uBYTE *p;
  dim x,y;
  static uBYTE *BUptr;
  sINT   BUcount;


  fprintf(fout,PGM_Header,w,h);
  BUinit;
  for(y=0;y<h;y++)
   {
    p= ptr; ptr+=zeil;

    for(x=0;x<w;x++) 
     {BUgreywrite(*p);
      p+=pix;
     }
   }
  BUgreyflush;
 }

#else
#include "ppm.h"

void write_ppm(FILE *fout,dim w,dim h, 
               uBYTE *rptr,sdim rzeil,sdim rpix,  
               uBYTE *gptr,sdim gzeil,sdim gpix,  
               uBYTE *bptr,sdim bzeil,sdim bpix) 
 {register uBYTE *pr,*pg,*pb;
  dim x,y;
  pixel *pixrow;
  register pixel* pP;


  ppm_writeppminit(fout,w,h,(pixval) 255, 0);
  pixrow = ppm_allocrow( w );
  for(y=0;y<h;y++)
   {
    pr= rptr; rptr+=rzeil;
    pg= gptr; gptr+=gzeil;
    pb= bptr; bptr+=bzeil;

    for(pP= pixrow,x=0;x<w;x++)
     {
      PPM_ASSIGN(*pP,((sINT)*pr),((sINT)*pg),((sINT)*pb));
      pP++;  pr+=rpix;  pg+=gpix;  pb+=bpix;
     }
    ppm_writeppmrow( fout, pixrow, w, (pixval) 255, 0 );
	    
   }
  pm_close(fout);

 }

void write_pgm(FILE *fout,dim w,dim h, uBYTE *ptr,sdim zeil,sdim pix)
 {register uBYTE *p;
  dim x,y;
  gray *grayrow;
  register gray* pP;


  pgm_writepgminit(fout,w,h,(pixval) 255, 0);
  grayrow = pgm_allocrow( w );
  for(y=0;y<h;y++)
   {
    p= ptr; ptr+=zeil;

    for(pP= grayrow,x=0;x<w;x++)
     {
      *pP= ((gray)*p);
      pP++;  p+=pix;
     }
    pgm_writepgmrow( fout, grayrow, w, (pixval) 255, 0 );
	    
   }
  pm_close(fout);

 }


#endif


@
