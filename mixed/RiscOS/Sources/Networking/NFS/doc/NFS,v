head	4.1;
access;
symbols
	NFS-3_27:4.1
	NFS-3_26:4.1
	NFS-3_25:4.1
	NFS-3_24:4.1
	NFS-3_23:4.1
	NFS-3_22:4.1
	NFS-3_21:4.1
	NFS-3_20:4.1
	NFS-3_19:4.1
	sbrodie_NFS_dev_merge:4.1
	NFS-3_18-4_22_2_4:4.1
	NFS-3_18-4_22_2_3:4.1
	NFS-3_18-4_22_2_2:4.1
	NFS-3_18-4_22_2_1:4.1
	sbrodie_NFS_dev:4.1.0.12
	sbrodie_NFS_dev_bp:4.1
	NFS-3_18:4.1
	NFS-3_17:4.1
	NFS-3_16:4.1
	NFS-3_15:4.1
	NFS-3_14:4.1
	NFS-3_13:4.1
	NFS-3_12:4.1
	NFS-3_11:4.1
	NFS-3_10:4.1
	NFS-3_09:4.1
	NFS-3_08:4.1
	NFS-3_07:4.1
	NFS-3_06:4.1
	NFS-3_05:4.1
	NFS-3_04:4.1
	NFS-3_02:4.1
	NFS-3_01:4.1
	NFS-3_00:4.1
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.1
date	96.11.22.14.49.34;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.34;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.07.11;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@Ran,

Work outstanding on NFS as delivered to TCP/IP:

* Fix bug: incorrect management of buffer bytes remaining in an enumerate
directory call. Both patch and fix available.

  JRS Checked 17/9/92. Fix made to NFS 1.03


* Fix deficiency: buffer size for enumeration of command arguments is too
small (64 bytes). Increase to 256 bytes done.

  JRS Checked 17/9/92. Fix made to NFS 1.03


* Fix reentrancy bug in c.Cache - static readres res; should read readres
res; - done.

  JRS Checked 17/9/92. Fix made to NFS 1.03


* Fix deficiency: in rpc.rpc.c.clnt_udp the code assumes an unsuccesful,
non-error return from select is a timeout. This is false as any select on
the system completing will complete all selects on the system. This has been
done - select complete checks the time before retransmitting.

  JRS Checked 21/9/92. Fix made to NFS 1.03

* Enhance speed - recode bcopy in unixlib to use memcpy, rather than doing
the copy byte by byte. Well over 30% of time spent in large file receptions
is spent in this routine. ~1/4 hour

  JRS 17/9/92 Done in NFS 1.03, though claimed improvement was over-optimistic.
  The improvement in overall speed is negligible. The 30% time spent is a
  fraction of the time spent in the NFS code; which is very small.

* Enhance speed - when transmitting or receiving files start many
transmits/receives and wait for the results - this relies upon the above
deficiency being fixed. This enhancement makes use of the multiple NFS
server processes running on the server machine. ~1 week

  JRS 17/9/92 Unfortunately this does not reap the great gains in performance
  hoped for, and it took much longer than one week to do! There is a modest
  improvement in speed of large transfers of about 30-50% due to better
  network utilisation. However, we seem to have hit a limit on the fileserver
  speed, at approx. 450/150Kb/s read/write rate. This compares with previous
  rates of 300/90Kb/s read/write rate.

* Enhance speed - keep a one-entry cache of where we got to last time when
enumerating a directory. This helps directory recaches. ~1 week

  JRS 17/9/92 This turned out to be not worth doing as the time taken to read
  the cached entries up to where we got to last time is negligible.
  This change has not been made

Hope this helps,
--Jonathan

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
