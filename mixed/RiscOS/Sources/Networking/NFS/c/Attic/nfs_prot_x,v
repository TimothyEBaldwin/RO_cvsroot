head	4.3;
access;
symbols
	NFS-2_37:4.2
	NFS-2_36:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.3
date	99.05.14.12.42.20;	author sbrodie;	state dead;
branches;
next	4.2;

4.2
date	98.11.27.15.58.25;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.29;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.29;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.45;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
        This rpcgen output has been adapted to flatten the processing
        of recursive lists.
*/

#include <rpc/rpc.h>
#include "nfs_prot.h"

#if 0
/* bits copied from stdio.h to keep everything happy */
typedef struct __FILE_struct
{ unsigned char *__ptr;
  int __icnt;      /* two separate _cnt fields so we can police ...        */
  int __ocnt;      /* ... restrictions that read/write are fseek separated */
  int __flag;
#ifdef __system_io
  /* AM: the following things do NOT need __ prefixes as they are          */
  /* are invisible in an ANSI-conforming program.                          */
  unsigned char *__base; /* buffer base */
  FILEHANDLE __file;     /* RISCOS/Arthur/Brazil file handle */
  long __pos;            /* position in file */
  int __bufsiz;          /* maximum buffer size */
  int __signature;       /* used with temporary files */
    struct __extradata *__extrap; /* pointer to information about stream */
#else
  int :32,:32,:32,:32,:32,:32;
#endif
} FILE;
extern FILE __iob[];
#define stderr (&__iob[2])
 #endif

bool_t
xdr_nfsstat(xdrs, objp)
        XDR *xdrs;
        nfsstat *objp;
{
        if (!xdr_enum(xdrs, (enum_t *)objp)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_ftype(xdrs, objp)
        XDR *xdrs;
        ftype *objp;
{
        if (!xdr_enum(xdrs, (enum_t *)objp)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_nfs_fh(xdrs, objp)
        XDR *xdrs;
        nfs_fh *objp;
{
        if (!xdr_opaque(xdrs, objp->data, NFS_FHSIZE)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_nfstime(xdrs, objp)
        XDR *xdrs;
        nfstime *objp;
{
        if (!xdr_u_int(xdrs, &objp->seconds)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->useconds)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_fattr(xdrs, objp)
        XDR *xdrs;
        fattr *objp;
{
        if (!xdr_ftype(xdrs, &objp->type)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->mode)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->nlink)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->uid)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->gid)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->size)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->blocksize)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->rdev)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->blocks)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->fsid)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->fileid)) {
                return (FALSE);
        }
        if (!xdr_nfstime(xdrs, &objp->atime)) {
                return (FALSE);
        }
        if (!xdr_nfstime(xdrs, &objp->mtime)) {
                return (FALSE);
        }
        if (!xdr_nfstime(xdrs, &objp->ctime)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_sattr(xdrs, objp)
        XDR *xdrs;
        sattr *objp;
{
        if (!xdr_u_int(xdrs, &objp->mode)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->uid)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->gid)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->size)) {
                return (FALSE);
        }
        if (!xdr_nfstime(xdrs, &objp->atime)) {
                return (FALSE);
        }
        if (!xdr_nfstime(xdrs, &objp->mtime)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_filename(xdrs, objp)
        XDR *xdrs;
        filename *objp;
{
        if (!xdr_string(xdrs, objp, NFS_MAXNAMLEN)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_nfspath(xdrs, objp)
        XDR *xdrs;
        nfspath *objp;
{
        if (!xdr_string(xdrs, objp, NFS_MAXPATHLEN)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_attrstat(xdrs, objp)
        XDR *xdrs;
        attrstat *objp;
{
        if (!xdr_nfsstat(xdrs, &objp->status)) {
                return (FALSE);
        }
        switch (objp->status) {
        case NFS_OK:
                if (!xdr_fattr(xdrs, &objp->attrstat_u.attributes)) {
                        return (FALSE);
                }
                break;
        }
        return (TRUE);
}




bool_t
xdr_sattrargs(xdrs, objp)
        XDR *xdrs;
        sattrargs *objp;
{
        if (!xdr_nfs_fh(xdrs, &objp->file)) {
                return (FALSE);
        }
        if (!xdr_sattr(xdrs, &objp->attributes)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_diropargs(xdrs, objp)
        XDR *xdrs;
        diropargs *objp;
{
        if (!xdr_nfs_fh(xdrs, &objp->dir)) {
                return (FALSE);
        }
        if (!xdr_filename(xdrs, &objp->name)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_diropokres(xdrs, objp)
        XDR *xdrs;
        diropokres *objp;
{
        if (!xdr_nfs_fh(xdrs, &objp->file)) {
                return (FALSE);
        }
        if (!xdr_fattr(xdrs, &objp->attributes)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_diropres(xdrs, objp)
        XDR *xdrs;
        diropres *objp;
{
        if (!xdr_nfsstat(xdrs, &objp->status)) {
                return (FALSE);
        }
        switch (objp->status) {
        case NFS_OK:
                if (!xdr_diropokres(xdrs, &objp->diropres_u.diropres)) {
                        return (FALSE);
                }
                break;
        }
        return (TRUE);
}




bool_t
xdr_readlinkres(xdrs, objp)
        XDR *xdrs;
        readlinkres *objp;
{
        if (!xdr_nfsstat(xdrs, &objp->status)) {
                return (FALSE);
        }
        switch (objp->status) {
        case NFS_OK:
                if (!xdr_nfspath(xdrs, &objp->readlinkres_u.data)) {
                        return (FALSE);
                }
                break;
        }
        return (TRUE);
}




bool_t
xdr_readargs(xdrs, objp)
        XDR *xdrs;
        readargs *objp;
{
        if (!xdr_nfs_fh(xdrs, &objp->file)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->offset)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->count)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->totalcount)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_readokres(xdrs, objp)
        XDR *xdrs;
        readokres *objp;
{
        if (!xdr_fattr(xdrs, &objp->attributes)) {
                return (FALSE);
        }
        if (!xdr_bytes(xdrs, (char **)&objp->data.data_val, (u_int *)&objp->data.data_len, NFS_MAXDATA)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_readres(xdrs, objp)
        XDR *xdrs;
        readres *objp;
{
        if (!xdr_nfsstat(xdrs, &objp->status)) {
                return (FALSE);
        }
        switch (objp->status) {
        case NFS_OK:
                if (!xdr_readokres(xdrs, &objp->readres_u.reply)) {
                        return (FALSE);
                }
                break;
        }
        return (TRUE);
}




bool_t
xdr_writeargs(xdrs, objp)
        XDR *xdrs;
        writeargs *objp;
{
        if (!xdr_nfs_fh(xdrs, &objp->file)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->beginoffset)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->offset)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->totalcount)) {
                return (FALSE);
        }
        if (!xdr_bytes(xdrs, (char **)&objp->data.data_val, (u_int *)&objp->data.data_len, NFS_MAXDATA)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_createargs(xdrs, objp)
        XDR *xdrs;
        createargs *objp;
{
        if (!xdr_diropargs(xdrs, &objp->where)) {
                return (FALSE);
        }
        if (!xdr_sattr(xdrs, &objp->attributes)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_renameargs(xdrs, objp)
        XDR *xdrs;
        renameargs *objp;
{
        if (!xdr_diropargs(xdrs, &objp->from)) {
                return (FALSE);
        }
        if (!xdr_diropargs(xdrs, &objp->to)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_linkargs(xdrs, objp)
        XDR *xdrs;
        linkargs *objp;
{
        if (!xdr_nfs_fh(xdrs, &objp->from)) {
                return (FALSE);
        }
        if (!xdr_diropargs(xdrs, &objp->to)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_symlinkargs(xdrs, objp)
        XDR *xdrs;
        symlinkargs *objp;
{
        if (!xdr_diropargs(xdrs, &objp->from)) {
                return (FALSE);
        }
        if (!xdr_nfspath(xdrs, &objp->to)) {
                return (FALSE);
        }
        if (!xdr_sattr(xdrs, &objp->attributes)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_nfscookie(xdrs, objp)
        XDR *xdrs;
        nfscookie objp;
{
        if (!xdr_opaque(xdrs, objp, NFS_COOKIESIZE)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_readdirargs(xdrs, objp)
        XDR *xdrs;
        readdirargs *objp;
{
        if (!xdr_nfs_fh(xdrs, &objp->dir)) {
                return (FALSE);
        }
        if (!xdr_nfscookie(xdrs, objp->cookie)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->count)) {
                return (FALSE);
        }
        return (TRUE);
}




/*
        non-recursive decoding of an xdr_entry
*/
bool_t
xdr_entry(xdrs, objp)
        XDR *xdrs;
        entry *objp;
{
        bool_t more_data;
        caddr_t loc;
        bool_t is_first_time_round = (TRUE);

        do {
                if (!xdr_u_int(xdrs, &objp->fileid)) {
                        return (FALSE);
                }
                if (!xdr_filename(xdrs, &objp->name)) {
                        return (FALSE);
                }
                if (!xdr_nfscookie(xdrs, objp->cookie)) {
                        return (FALSE);
                }


                more_data = (objp->nextentry != NULL);
                if (! xdr_bool(xdrs,&more_data)) {
                        return (FALSE);
                }

                loc = (caddr_t)objp;

                if (! more_data) {
                        objp->nextentry = NULL;
                } else {
                        if (xdrs->x_op == XDR_DECODE && objp->nextentry == NULL) {
                                objp->nextentry = (entry *) mem_alloc(sizeof(entry));
                                if (objp->nextentry == NULL) {
                                        (void) fprintf(stderr,
                                            "xdr_reference: out of memory\n");
                                        return (FALSE);
                                }
                                bzero(objp->nextentry, sizeof(entry));
                        }

                        objp = objp->nextentry;
                }

                if (xdrs->x_op == XDR_FREE && !is_first_time_round) {
                        mem_free(loc, sizeof(entry));
                }

                is_first_time_round = (FALSE);
        } while( more_data );

        return (TRUE);
}




bool_t
xdr_dirlist(xdrs, objp)
        XDR *xdrs;
        dirlist *objp;
{
        if (!xdr_pointer(xdrs, (char **)&objp->entries, sizeof(entry), xdr_entry)) {
                return (FALSE);
        }
        if (!xdr_bool(xdrs, &objp->eof)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_readdirres(xdrs, objp)
        XDR *xdrs;
        readdirres *objp;
{
        if (!xdr_nfsstat(xdrs, &objp->status)) {
                return (FALSE);
        }
        switch (objp->status) {
        case NFS_OK:
                if (!xdr_dirlist(xdrs, &objp->readdirres_u.reply)) {
                        return (FALSE);
                }
                break;
        }
        return (TRUE);
}




bool_t
xdr_statfsokres(xdrs, objp)
        XDR *xdrs;
        statfsokres *objp;
{
        if (!xdr_u_int(xdrs, &objp->tsize)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->bsize)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->blocks)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->bfree)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->bavail)) {
                return (FALSE);
        }
        return (TRUE);
}




bool_t
xdr_statfsres(xdrs, objp)
        XDR *xdrs;
        statfsres *objp;
{
        if (!xdr_nfsstat(xdrs, &objp->status)) {
                return (FALSE);
        }
        switch (objp->status) {
        case NFS_OK:
                if (!xdr_statfsokres(xdrs, &objp->statfsres_u.reply)) {
                        return (FALSE);
                }
                break;
        }
        return (TRUE);
}


@


4.2
log
@  Fix to free space finding routines.
  Build improvements.
Detail:
  Added missing parameter on call to xdr_string in rquota.c!  Fixes the free space
    display bug previously blamed on the compiler misbuilding rpclib.
  Added macro defining that missing parameter (value imported from Solaris NFS headers)
  Added some casts to get around type mismatches which it previously got away with
    due to the lack of proper rpclib prototypes.
  Cured some of the compile warnings.  (Unnecessary & on array name).
  Removed the large chunks of stdlib.h and stdio.h found in various places throughout
    the source.  Replaced with the appropriate #include statements instead.
Admin:
  Building this requires TCPIPLibs-5_04 (RiscOS/Sources/Lib/TCPIPLibs)
  RAM build built and tested: specifically basic functionality like mounting and file
    transfers and then previously broken things like free space displays.

Version 2.36. Tagged as 'NFS-2_36'
@
text
@@


4.1
log
@Initial revision
@
text
@d17 1
a17 1
        of recursive lists. 
d23 1
d45 1
a45 1
 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
