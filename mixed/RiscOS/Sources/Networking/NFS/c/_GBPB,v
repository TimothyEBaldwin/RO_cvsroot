head	4.6;
access;
symbols
	NFS-3_27:4.6
	NFS-3_26:4.6
	NFS-3_25:4.6
	NFS-3_24:4.5
	NFS-3_23:4.5
	NFS-3_22:4.4
	NFS-3_21:4.4
	NFS-3_20:4.4
	NFS-3_19:4.4
	sbrodie_NFS_dev_merge:4.4
	NFS-3_18-4_22_2_4:4.4
	NFS-3_18-4_22_2_3:4.4
	NFS-3_18-4_22_2_2:4.4
	NFS-3_18-4_22_2_1:4.4
	sbrodie_NFS_dev:4.4.0.2
	sbrodie_NFS_dev_bp:4.4
	NFS-3_18:4.4
	NFS-3_17:4.4
	NFS-3_16:4.4
	NFS-3_15:4.4
	NFS-3_14:4.4
	NFS-3_13:4.4
	NFS-3_12:4.4
	NFS-3_11:4.3
	NFS-3_10:4.3
	NFS-3_09:4.3
	NFS-3_08:4.3
	NFS-3_07:4.3
	NFS-3_06:4.3
	NFS-3_05:4.3
	NFS-3_04:4.3
	NFS-3_02:4.3
	NFS-3_01:4.3
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.6
date	2018.03.07.21.22.41;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	sKJZhgBEKf2WsztA;

4.5
date	2018.01.29.21.30.19;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	7TGUL0NEVVbjHOoA;

4.4
date	2000.06.26.11.54.39;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.10.13.09.53.56;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.05.14.12.42.12;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.32;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.32;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.59;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Store lxa files verbatim, without appendum
Files saved with load & exec address (as opposed to a filetype and the top nybble of load set to 0xFFF) would be extended by 8 bytes in order to hide the true load/exec for later retrieval.
While useful if only ever saving and retrieving from the RISC OS viewpoint, it would create apparently corrupt or overlong file if you wanted to do any analysis on the NFS server end. Given load/exec addresses are deprecated, change NFS to behave like LanManFS and just denote ",lxa" suffixed files with the appropriate icon in the Filer and a made up load/exec address.

pathmunge.c/_GBPB.c/V2support.c/_Args.c/_File.c/PutBytesX.c/Static.c/Changeinfo.c: Switch out 8 byte appending code. Give the file a proper date stamp instead when viewed on Unix.
_Open.c: Switch out the 8 byte appendum stuff, and use a common OS_Word 14 clock function.
Statics.h/Modulewrap.c: Compute a substitute load/exec using the same algorithm as LanManFS (the Kernel's address rounded down to 1MB). Use cmhg finalise function instead of atexit().

Also
MakeFile: pass in predefine DEBUG for debug builds.
cmhg/NFSHdr: remove *Histogram debug command except when debugging. Add finalise handler.
Commands.c/Commands.h: remove *Histogram debug command except when debugging.
Utils.c: delete unused long long support functions. Add a new time getting support function.
Utils.h: new time getting support function.

Tested with a handful of area saves using *Save, checking the file size when viewed at the server end was correct not 8 bytes longer.

Version 3.25. Tagged as 'NFS-3_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#define DO_WRITE_MANY

#ifndef __NFSNFS_H
#include "nfsheaders.h"
#endif

/*
        Get bytes from the given file to the given location
*/
_kernel_oserror *getbytes
(
        char **dest,
        nfs_file_descriptor *ndesc,
        unsigned long *start,
        int *number
)
{
        _kernel_oserror *err;
        long count;
        int data_len;
        int extent = riscos_extent( ndesc );

        if ( ndesc->desc.attr.type == NF3LNK )
        {
                return mb_not_to_a_soft_link_you_dont;
        }

        /* JRS 17/09/92 extensively modified to use nfs_readmany for datasize > NFS_MAXDATA */

        count = *number;

        if ( ((long)*start) + count > extent )
                count = extent - (long)*start; /* cannot get data beyond file extent */

        if ( count <= 0 )
        {
                err = NULL;   /* no data transferred */
                data_len = 0;
        }
        else if (count <= NFS_MAXDATA) /* all can be sent in 1 udp packet */
        {
                err = nfs_read( &data_len, *dest, ndesc->mp, &ndesc->file, *start, (int) count );
        }
        else /* multiple udp packets are handled more efficiently by readmany */
        {
                err = nfs_readmany( &data_len, *dest, ndesc->mp, &ndesc->file, *start,(int) count );
        }

        if ( !err )
        {
        /*
                update the counts/pointers.
         */
                *number -= data_len;
                *dest += data_len;
                *start += data_len;
        }
        return err;
}

/*
        Write zeros to the given file at the given location.
*/
_kernel_oserror *write_zeros
(
        nfs_file_descriptor *ndesc,
        unsigned long start,
        int number
)
{
        _kernel_oserror *err = NULL;
        unsigned count;
        int extent;
        fattr3 *ret_nattr = NULL;
        char *area_of_zeros;

        if ( ndesc->desc.attr.type == NF3LNK )
        {
                return mb_not_to_a_soft_link_you_dont;
        }

        area_of_zeros = calloc( NFS_MAXDATA, sizeof( *area_of_zeros ));
        if ( !area_of_zeros )
        {
                return mb_malloc_failed;
        }

#ifdef LXA_BY_APPENDUM
        if ( ndesc->desc.file_is_lxa )
        {
                bytes_with_appendum bwa;

                /*
                        Write zeros to a file with an appendum
                */
                extent = riscos_extent( ndesc );

                /*
                        While there is no error and there are more bytes to transfer before the
                        end of the file.
                */
                while( !err && number > 0 && start + number < extent ) /* don't extend the file */
                {
                        count = number;

                        if ( count > NFS_MAXDATA )
                                count = NFS_MAXDATA;

                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, start, area_of_zeros, count );

                        number -= count;
                        start += count;
                }

                bwa.bytes = area_of_zeros;
                bwa.bit_on_the_end.lxa.load_address = ndesc->desc.load_address;
                bwa.bit_on_the_end.lxa.execute_address = ndesc->desc.execute_address;

                /*
                        While there is no error and there are more bytes to transfer with
                        an appendum on the end.
                */
                while( !err && number > 0 ) /* now we can extend the file if necessary */
                {
                        count = number;

                        if ( count > NFS_MAXDATA - sizeof( appendum ) )
                                count = NFS_MAXDATA - sizeof( appendum );

                        err = nfs_write_with_appendum( &ret_nattr, ndesc->mp, &ndesc->file, start, &bwa, count );

                        number -= count;
                        start += count;
                }
        }
        else
#endif        
        {
                /*
                        Transfer bytes with no appendum.
                */
                while( !err && number > 0 ) /* extend the file if necessary */
                {
                        count = number;

                        if ( count > NFS_MAXDATA )
                                count = NFS_MAXDATA;

                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, start, area_of_zeros, count );

                        number -= count;
                        start += count;
                }
        }

        if ( !err && ret_nattr )
                ndesc->desc.attr = *ret_nattr;

        free( area_of_zeros );

        return err;
}

/*
        Put a number of bytes to the file.

        Will pad with zeros out to position as necessary
*/
_kernel_oserror *putbytes
(
        char **source,
        nfs_file_descriptor *ndesc,
        unsigned long *start,
        int *number
)
{
        _kernel_oserror *err = NULL;
        int count, thiscount;
        bool_t write_appendum;
        int extent = riscos_extent( ndesc );
        fattr3 *ret_nattr = NULL;

        if ( ndesc->desc.attr.type == NF3LNK )
        {
                return mb_not_to_a_soft_link_you_dont;
        }

        /*
                Pad with zeros if necessary to extend the file up to the start offset
        */
        if (*start > extent)
        {
                err = write_zeros( ndesc, extent, (int) *start - extent );
                if ( err )
                        return err;
        }

        /* JRS 17/09/92 extensively modified to use nfs_writemany for datasize > NFS_MAXDATA */

        count = *number;

#ifdef LXA_BY_APPENDUM
        if ( ndesc->desc.file_is_lxa && (*start + *number > extent) )
        {
        /*
                Extending the file.
                Subtract packetsize from count for writing 1 packet of data + appendum
        */
                write_appendum = TRUE;
                count -= NFS_MAXDATA - sizeof(appendum);
        }
        else
        {
                write_appendum = FALSE;
        }
#else
        write_appendum = write_appendum; /* Unused */        
#endif        

        /*
                write the data
        */
        if ( count <= 0 )
        {
                err = NULL;   /* no data transferred */
                count = 0;
        }

        else {
                if (count > NFS_MAXDATA)
                {
                        thiscount = NFS_MAXDATA;

#ifdef DEBUGLIB
                        if (ndesc->mp->host->nfs_version != NFS_V3) {
                          static char fhandlehex[1+2*(NFS_FHSIZE)];
                          int i;
                          for (i=0; i<NFS_FHSIZE; ++i) {
                            sprintf(fhandlehex + i*2, "%02x", ndesc->file.opaque[i]);
                          }
                          dprintf(("nfsrw_1", "(A) P_OK=%d (an NFS2 write: fhandle = %s\n",
                            ndesc->file.opaque == ndesc->file.fh3.data.data_val, fhandlehex));
                        }
#endif

                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, *start, *source, thiscount);

                        if ( !err )
                        {
                                *start += thiscount;
                                *source += thiscount;
                                *number -= thiscount;
                                count -= thiscount;
                        }

                        if (!err && count > NFS_MAXDATA)
                        {
                                thiscount = count - NFS_MAXDATA;

                                if (thiscount <= NFS_MAXDATA)
                                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, *start, *source, thiscount);
                                else
                                        err = nfs_writemany( &ret_nattr, ndesc->mp, &ndesc->file, *start, *source, thiscount);

                                if ( !err )
                                {
                                        *start += thiscount;
                                        *source += thiscount;
                                        *number -= thiscount;
                                        count -= thiscount;
                                }
                        }
                }
                if (!err && count > 0)
                {
                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, *start, *source, count);

                        if ( !err )
                        {
                                *start += count;
                                *source += count;
                                *number -= count;
                        }
                }
        }

#ifdef LXA_BY_APPENDUM
        if (!err && write_appendum)
        {
                bytes_with_appendum bwa;

                count = *number;

                bwa.bytes = *source;
                bwa.bit_on_the_end.lxa.load_address = ndesc->desc.load_address;
                bwa.bit_on_the_end.lxa.execute_address = ndesc->desc.execute_address;

                err = nfs_write_with_appendum( &ret_nattr, ndesc->mp, &ndesc->file, *start, &bwa, count );

                if ( !err )
                {
                        *start += count;
                        *source += count;
                        *number -= count;
                }
        }
#endif

        if ( !err && ret_nattr )
                ndesc->desc.attr = *ret_nattr;
        return err;
}

_kernel_oserror *fsentry_gbpb( FSEntry_GBPB_Parameter *parm )
{
        _kernel_oserror *err;
        OpenFile *of = (OpenFile *)parm->handle;
        unsigned long sfp;

        hourglass_on();

#ifdef SHOWCALLS
        printf(
                "_GBPB( %s, %d, (parm sfp=%d, of sfp=%d), %#010x, %d )\n",
                of->nfs_fd.desc.name,
                parm->reason,
                parm->sequential_file_pointer,
                of->sequential_file_pointer,
                (int)parm->address,
                parm->number );
#endif

        switch ( parm->reason )
        {
        case FSEntry_GBPB_Reason_PutMultipleBytesHere:
                err = putbytes(
                        &parm->address,
                        &of->nfs_fd,
                        &parm->sequential_file_pointer,
                        &parm->number );

                if ( !err )
                        of->sequential_file_pointer = parm->sequential_file_pointer;
                break;

        case FSEntry_GBPB_Reason_PutMultipleBytes:
                err = putbytes(
                        &parm->address,
                        &of->nfs_fd,
                        &of->sequential_file_pointer,
                        &parm->number );
                break;

        case FSEntry_GBPB_Reason_GetMultipleBytesHere:
                sfp = parm->sequential_file_pointer;
                err = getbytes(
                        &parm->address,
                        &of->nfs_fd,
                        &parm->sequential_file_pointer,
                        &parm->number );

                if ( sfp != parm->sequential_file_pointer )
                        of->sequential_file_pointer =
                                parm->sequential_file_pointer;
                break;

        case FSEntry_GBPB_Reason_GetMultipleBytes:
                err = getbytes(
                        &parm->address,
                        &of->nfs_fd,
                        &of->sequential_file_pointer,
                        &parm->number );
                break;

        default:
                dprintf(("", "Unused FSEntry_GBPB entry called! (%d)\n", parm->reason));
                return mb_nfserr_BadParameters;
                break;
        }

        hourglass_off();

        return err;
}
@


4.5
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@a87 1
        bytes_with_appendum bwa;
d102 1
d105 2
d151 1
a194 1
        bytes_with_appendum bwa;
d216 1
d230 3
d301 1
d304 2
d321 1
@


4.4
log
@  Pre-allocated 2 NFS clients to avoid critical memory failures.
  Added SILENTBOOT build option.
Detail:
  Pass OPTIONS=-DSILENTBOOT from the build system to compile out the
    echoing of the various state messages during a boot operation.
  Pre-allocate two NFS clients and then free them immediately (so they
    are cached) when a new mount is made.  This means that the client
    memory will be available for use during a command-line *Copy op
    where pre-Ursula OSes will claim all free memory for buffers.
    A better solution is to use Ursula on the build machines rather
    than spending time fixing problems caused by ancient versions of
    FileSwitch that have been fixed for years.
Admin:
  Fixes bug #1482
  Fixes *Copy on the build machines on pre-Ursula OSes.

Version 3.12. Tagged as 'NFS-3_12'
@
text
@d18 1
a18 1
#include "NFS.h"
@


4.3
log
@  Attribute cacheing preload bug fixed.
  Debugging all switched to DebugLib-style.
Detail:
  The attribute cache preloading was failing to take effect because
    the hash value generation was giving the attribute cache preload
    function different answers to those it gave any other functions.
    This has now been fixed.
  Debugging support replaced completely by DebugLib support.
  The automatically generated RPC veneers do not contain any debugging
    (although it could be added by rpcgen - a beta version of rpcgen
    exists that writes DebugLib veneers into the stubs to note all RPC
    calls made via the stubs.  These functions do not, however, unpack
    the parameters and return structures yet.  That would be a massive
    job, requiring changes to all hand-written XDR functions - rpcgen
    could arrange to generate appropriate stuff for anything it writes,
    though)
  Removed obsolete db.c and db.h files.
  TaskObey script added to build the debugging version of the module.
Admin:
  This module has been tested on desktop machines for several months.
    The massive speedup expected from the use of NFS protocol version 3
    is now being noticed on directory operations,

Version 3.01. Tagged as 'NFS-3_01'
@
text
@d242 12
@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@a20 2
#include "DebugLib/DebugLib.h"

@


4.1
log
@Initial revision
@
text
@d21 2
d30 1
a30 1
        int *start,
d35 1
a35 1
        int count;
d39 1
a39 1
        if ( (ndesc->desc.attr.mode & NFSMODE_FMT) == NFSMODE_LNK )
d48 2
a49 2
        if ( *start + count > extent )
                count = extent - *start; /* cannot get data beyond file extent */
d58 1
a58 1
                err = nfs_read( &data_len, *dest, ndesc->mp, &ndesc->file, *start, count );
d62 1
a62 1
                err = nfs_readmany( &data_len, *dest, ndesc->mp, &ndesc->file, *start, count );
d83 1
a83 1
        int start,
d91 1
a91 1
        fattr *ret_nattr = NULL;
d94 1
a94 1
        if ( (ndesc->desc.attr.mode & NFSMODE_FMT) == NFSMODE_LNK )
d186 1
a186 1
        int *start,
d195 1
a195 1
        fattr *ret_nattr = NULL;
d197 1
a197 1
        if ( (ndesc->desc.attr.mode & NFSMODE_FMT) == NFSMODE_LNK )
d207 1
a207 1
                err = write_zeros( ndesc, extent, *start - extent );
d312 1
a312 1
        int sfp;
d370 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
