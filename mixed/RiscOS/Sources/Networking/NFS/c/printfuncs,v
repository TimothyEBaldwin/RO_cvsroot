head	4.3;
access;
symbols
	NFS-3_27:4.3
	NFS-3_26:4.3
	NFS-3_25:4.3
	NFS-3_24:4.3
	NFS-3_23:4.3
	NFS-3_22:4.2
	NFS-3_21:4.2
	NFS-3_20:4.2
	NFS-3_19:4.2
	sbrodie_NFS_dev_merge:4.2
	NFS-3_18-4_22_2_4:4.2
	NFS-3_18-4_22_2_3:4.2
	NFS-3_18-4_22_2_2:4.2
	NFS-3_18-4_22_2_1:4.2
	sbrodie_NFS_dev:4.2.0.2
	sbrodie_NFS_dev_bp:4.2
	NFS-3_18:4.2
	NFS-3_17:4.2
	NFS-3_16:4.2
	NFS-3_15:4.2
	NFS-3_14:4.2
	NFS-3_13:4.2
	NFS-3_12:4.2
	NFS-3_11:4.2
	NFS-3_10:4.2
	NFS-3_09:4.2
	NFS-3_08:4.2
	NFS-3_07:4.2
	NFS-3_06:4.2
	NFS-3_05:4.2
	NFS-3_04:4.1
	NFS-3_02:4.1
	NFS-3_01:4.1
	NFS-3_00:4.1
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.3
date	2018.01.29.21.30.19;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	7TGUL0NEVVbjHOoA;

4.2
date	99.12.06.15.58.05;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.30;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.30;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.49;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
        Light-weight printf facilities.

        These exist to provide:
        1) Error return on failed prints
        2) Numbered parameter substitution

        The routines are structured as follows:

        A getfunc is defined

                _kernel_oserror *getfunc( char *next, void *environment )

        it should get the next character from the stream defined by environment
        and place it in next. If an error happens return this instead. The stream
        and how it is manipulated is defined by the getfunc writer. Place 0 into
        next when the end of stream is reached.

        A putfunc is defined

                _kernel_oserror *putfunc( char next, void *environment )

        it should put the char next to the stream defined by environment. An
        error should be returned if one happens.
*/

#ifndef __NFSNFS_H
#include "nfsheaders.h"
#endif

/*
        A getfunc for strings (ctrl/char terminated). environment points to the next char to return.
*/
_kernel_oserror *string_getfunc( char *next_char, void *environment )
{
        stringenv *env = environment;

        *next_char = **env;

        if ( *next_char )
                (*env)++;

        return NULL;
}

/*
        A slightly more complex getfunc for strings. This frees the string
        once its end has been reached. See definition of stringfreeenv
        for details of filling it in.
*/
_kernel_oserror *string_getfunc_then_free( char *next_char, void *environment )
{
        stringfreeenv *env = environment;

        if ( env->start == NULL )
        {
                *next_char = '\0';

                return NULL;
        }

        *next_char = *env->next;

        if ( *next_char )
        {
                env->next++;
        }
        else
        {
                free( env->start );
                env->start = NULL;
        }

        return NULL;
}

/*
        An example of a putfunc to a string
*/
_kernel_oserror *string_putfunc( char next_char, void *environment )
{
        stringenv *env = environment;

        **env = next_char;

        return NULL;
}

/*
        An os_wrch putfunc
*/
_kernel_oserror *wrch_putfunc( char next_char, void *environment )
{
        environment = environment;

        if ( next_char && _kernel_oswrch( next_char ) == _kernel_ERROR )
        {
                return _kernel_last_oserror();
        }
        else
        {
                return NULL;
        }
}

/*
        This routine starts processing a number for lightweight_printf.

        Will cope with bases from 2 to 16, with sufficiently short prefixes.
*/
static _kernel_oserror *start_number( format_environment *env, unsigned int value, int base, char *prefix, YesNoAnswer is_signed, int minimum_digits )
{
        stringfreeenv *sfe;
        YesNoAnswer is_negative = No;
        int prefix_index;

        /*
                Get some environment space
        */
        sfe = env->getfunc.env = malloc( sizeof( stringfreeenv ));

        if ( sfe == NULL )
                return mb_malloc_failed;

        sfe->start = malloc( 40 );      /* enough for all numbers */

        if ( sfe->start == NULL )
        {
                free( sfe );
                env->getfunc.env = NULL;
                return mb_malloc_failed;
        }

        /*
                Fill in the memory holding the expanded number from the top downwards.

                First the terminating nul is placed.
        */
        sfe->next = sfe->start + 40;

        *(--sfe->next) = '\0';

        /*
                Handle negative numbers by noting that they are negative and
                turning them positive
        */
        if ( is_signed && (signed int)value < 0 )
        {
                is_negative = Yes;
                value = (unsigned int)(-(signed int)value);
        }

        /*
                Peel off the digits into the memory area.
                do...while is used to ensure 0 gets represented as 0.
        */
        do
        {
                /*
                        Index into the string
                */
                *(--sfe->next) = "0123456789abcdef"[ value % base ];

                value /= base;
        } while( --minimum_digits > 0 || value );

        /*
                Stick the prefix onto the front
        */
        if ( prefix )
        {
                for ( prefix_index = strlen( prefix ) - 1;
                      prefix_index >= 0;
                      prefix_index-- )
                {
                        *(--sfe->next) = prefix[ prefix_index ];
                }
        }

        /*
                Stick the minus as necessary
        */
        if ( is_negative )
        {
                *(--sfe->next) = '-';
        }

        /*
                Pass back the string, then free it once read in.
        */
        env->getfunc.getfunc = string_getfunc_then_free;

        /*
                Free the getfunc's env once finished.
        */
        env->free_env_at_end = Yes;

        return NULL;
}

/*
        This getfunc does a format string with parameters.
*/
_kernel_oserror *format_getfunc( char *next_char, void *environment )
{
        format_environment *env = environment;
        _kernel_oserror *err = NULL;
        YesNoAnswer resolved = No;
        char ctrl;
        int param_number;

        /*
                resolved indicates that the next character has been found.
        */
        while ( !err && !resolved )
        {
                /*
                        The action determins what happens next. eg get a character
                        from the control string or from a getfunc.
                */
                switch( env->action )
                {
                case ReadAChar:
                        err = env->control.getfunc( next_char, env->control.env );

                        if ( err )
                                continue;

                        /*
                                Is it %<something> ?
                        */
                        if ( *next_char != FormatIntroductionChar )
                        {
                                if ( *next_char == '\n' )
                                {
                                        env->action = NewLineSecondPart;
                                        *next_char = '\r';
                                }
                                resolved = Yes;
                                continue;
                        }

                        err = env->control.getfunc( &ctrl, env->control.env );

                        if ( err )
                                continue;

                        /*
                                Is is %% ?
                        */
                        if ( ctrl == FormatIntroductionChar )
                        {
                                resolved = Yes;
                                continue;
                        }

                        /*
                                Must be %n<something>
                        */
                        param_number = ctrl - ParameterBaseCharacter;

                        /*
                                %nJT<something>

                                J is optional and indicates the type of justfication to use
                                T is not optional and indicates the type of output

                                J       Meaning
                                L       Left justify:<something> = nnnnn.<something>
                                                pads to nnnnn with spaces if T is less than nnnnn long
                                T       Left justify and truncate. As L, but if T is too long truncation occurs

                                T       Meaning
                                c       output a character (justification doesn't apply to these)
                                d       output a signed decimal number (+ is never displayed)
                                o       output an octal number (leading 0 is not displayed)
                                u       output an unsigned decimal number
                                x       output an unsigned hex number with 0x prefix.
                                X       output an unsigned hex number without 0x prefix.
                                y       output an unsigned, 8 digit hex number, with 0x prefix.
                                Y       output an unsigned, 8 digit hex number, without 0x prefix.
                                s       output a nul terminated string
                                g       output from a getfunc
                        */

                        err = env->control.getfunc( &ctrl, env->control.env );

                        if ( err )
                                continue;

                        /*
                                Check for %nL<something> or %nT<something>
                        */

                        env->truncate_this = No;

                        switch( ctrl )
                        {
                        case 'T':
                                env->truncate_this = Yes;
                        case 'J':
                                env->justify_size = 0;
                                err = env->control.getfunc( &ctrl, env->control.env );
                                break;

                        default:
                                env->justify_size = -1; /* indicate no justify */
                                break;
                        }

                        if ( err )
                                continue;

                        /*
                                Check for type of thing to output
                        */
                        switch( ctrl )
                        {
                        case 'c':
                                *next_char = env->params[ param_number ];
                                resolved = Yes;
                                continue;

                        case 'd':
                                err = start_number( env, env->params[ param_number ], 10, "", Yes, 0 );

                                if ( err )
                                        continue;

                                break;

                        case 'g':
                                /*
                                        Copy over the getfunc, and don't free its env once finished
                                */
                                env->getfunc = *(Getfunc *)(env->params[ param_number ]);
                                env->free_env_at_end = No;
                                break;

                        case 'o':
                                err = start_number( env, env->params[ param_number ], 8, "", Yes, 0 );

                                if ( err )
                                        continue;

                                break;

                        case 's':
                                env->getfunc.env = malloc( sizeof( stringenv ));

                                if ( env->getfunc.env == NULL )
                                {
                                        err = mb_malloc_failed;
                                        continue;
                                }

                                *(stringenv *)(env->getfunc.env) = (char *)( env->params[ param_number ] );
                                env->getfunc.getfunc = string_getfunc;
                                env->free_env_at_end = Yes;
                                break;

                        case 'u':
                                err = start_number( env, env->params[ param_number ], 10, "", No, 0 );

                                if ( err )
                                        continue;

                                break;

                        case 'x':
                                err = start_number( env, env->params[ param_number ], 16, "0x", No, 0 );

                                if ( err )
                                        continue;

                                break;

                        case 'X':
                                err = start_number( env, env->params[ param_number ], 16, "", No, 0 );

                                if ( err )
                                        continue;

                                break;

                        case 'y':
                                err = start_number( env, env->params[ param_number ], 16, "0x", No, 8 );

                                if ( err )
                                        continue;

                                break;

                        case 'Y':
                                err = start_number( env, env->params[ param_number ], 16, "", No, 8 );

                                if ( err )
                                        continue;

                                break;

                        default:
                                continue;
                        }

                        if ( env->justify_size == 0 )
                        {
                                do
                                {
                                        err = env->control.getfunc( &ctrl, env->control.env );

                                        if ( !err && ctrl && isdigit( ctrl ))
                                        {
                                                env->justify_size = env->justify_size * 10 + ctrl - '0';
                                        }
                                } while ( !err && ctrl && isdigit( ctrl ));
                        }

                        env->action = ReadFromGetfunc;
                        break;

                case ReadFromGetfunc:
                        err = env->getfunc.getfunc( next_char, env->getfunc.env );

                        if ( err )
                        {
                                if ( env->free_env_at_end )
                                        free( env->getfunc.env );
                                continue;
                        }

                        if ( *next_char )
                        {
                                /*
                                        Not finished so process the justification
                                */
                                env->justify_size--;

                                if ( env->truncate_this && env->justify_size == 0 )
                                {
                                        if ( env->free_env_at_end )
                                                free( env->getfunc.env );

                                        env->action = ReadAChar;
                                }

                                resolved = Yes;
                        }
                        else
                        {
                                /*
                                        Finished. Check for justification
                                */
                                if ( env->free_env_at_end )
                                        free( env->getfunc.env );

                                if ( env->justify_size > 0 )
                                {
                                        env->action = FinishJustify;
                                }
                                else
                                {
                                        env->action = ReadAChar;
                                }
                        }
                        break;

                case FinishJustify:
                        env->justify_size--;

                        if ( env->justify_size == 0 )
                                env->action = ReadAChar;

                        *next_char = ASpace;

                        resolved = Yes;

                        break;

                case NewLineSecondPart:
                        *next_char = '\n';
                        env->action = ReadAChar;
                        resolved = Yes;
                        break;

                default:
                        resolved = Yes;
                        break;
                }
        }

        return err;
}

/*
        Wrapped up formatted output to a putfunc
*/
_kernel_oserror *lightweight_formatstr( Putfunc *destination, Getfunc *control, int params[] )
{
        format_environment env;
        _kernel_oserror *err;
        char next_char;

        env.control = *control;
        env.params = params;
        env.action = ReadAChar;

        do
        {
                err = format_getfunc( &next_char, &env );

                if ( err )
                        break;

                err = destination->putfunc( next_char, destination->env );

                if ( err )
                        break;
        } while ( next_char );

        return err;
}

_kernel_oserror *lightweight_vprintf( char *control, int params[] )
{
        stringenv ctrlenv;
        Getfunc controlfunc;
        Putfunc destination;

        ctrlenv = control;
        controlfunc.getfunc = string_getfunc;
        controlfunc.env = &ctrlenv;
        destination.putfunc = wrch_putfunc;
        destination.env = NULL;

        return lightweight_formatstr( &destination, &controlfunc, params );
}

_kernel_oserror *lightweight_printf( char *control, ... )
{
        _kernel_oserror *err;

        /*
                Very nasty hack here!
        */
        err = lightweight_vprintf( control, (int *)(&control + 1));

        return err;
}
@


4.2
log
@  Now uses PCNFS version 2 to authenticate.
Detail:
  Group-writable directories should now be writable to.
  setgid directories should cause created objects to take on
    the directory group ownership instead of the user's primary
    GIF
  *NFSInfo output enhanced to list all the additional group IDs
    and the default umask being applied to each authentication.
Admin:
  Tested on normal home mount and on TWC mount.

Version 3.05. Tagged as 'NFS-3_05'
@
text
@d42 1
a42 1
#include "NFS.h"
@


4.1
log
@Initial revision
@
text
@d290 1
d352 8
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
