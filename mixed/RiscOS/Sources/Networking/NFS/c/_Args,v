head	4.7;
access;
symbols
	NFS-3_27:4.7
	NFS-3_26:4.7
	NFS-3_25:4.7
	NFS-3_24:4.6
	NFS-3_23:4.6
	NFS-3_22:4.5
	NFS-3_21:4.5
	NFS-3_20:4.5
	NFS-3_19:4.5
	sbrodie_NFS_dev_merge:4.5
	NFS-3_18-4_22_2_4:4.5
	NFS-3_18-4_22_2_3:4.5
	NFS-3_18-4_22_2_2:4.5
	NFS-3_18-4_22_2_1:4.5
	sbrodie_NFS_dev:4.5.0.2
	sbrodie_NFS_dev_bp:4.5
	NFS-3_18:4.5
	NFS-3_17:4.5
	NFS-3_16:4.5
	NFS-3_15:4.5
	NFS-3_14:4.5
	NFS-3_13:4.5
	NFS-3_12:4.5
	NFS-3_11:4.5
	NFS-3_10:4.5
	NFS-3_09:4.5
	NFS-3_08:4.4
	NFS-3_07:4.4
	NFS-3_06:4.3
	NFS-3_05:4.3
	NFS-3_04:4.3
	NFS-3_02:4.3
	NFS-3_01:4.3
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.7
date	2018.03.07.21.22.41;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	sKJZhgBEKf2WsztA;

4.6
date	2018.01.29.21.30.19;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	7TGUL0NEVVbjHOoA;

4.5
date	2000.03.20.15.52.15;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	2000.03.15.14.16.11;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.10.13.09.53.54;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.05.14.12.42.09;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.31;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.31;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.55;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Store lxa files verbatim, without appendum
Files saved with load & exec address (as opposed to a filetype and the top nybble of load set to 0xFFF) would be extended by 8 bytes in order to hide the true load/exec for later retrieval.
While useful if only ever saving and retrieving from the RISC OS viewpoint, it would create apparently corrupt or overlong file if you wanted to do any analysis on the NFS server end. Given load/exec addresses are deprecated, change NFS to behave like LanManFS and just denote ",lxa" suffixed files with the appropriate icon in the Filer and a made up load/exec address.

pathmunge.c/_GBPB.c/V2support.c/_Args.c/_File.c/PutBytesX.c/Static.c/Changeinfo.c: Switch out 8 byte appending code. Give the file a proper date stamp instead when viewed on Unix.
_Open.c: Switch out the 8 byte appendum stuff, and use a common OS_Word 14 clock function.
Statics.h/Modulewrap.c: Compute a substitute load/exec using the same algorithm as LanManFS (the Kernel's address rounded down to 1MB). Use cmhg finalise function instead of atexit().

Also
MakeFile: pass in predefine DEBUG for debug builds.
cmhg/NFSHdr: remove *Histogram debug command except when debugging. Add finalise handler.
Commands.c/Commands.h: remove *Histogram debug command except when debugging.
Utils.c: delete unused long long support functions. Add a new time getting support function.
Utils.h: new time getting support function.

Tested with a handful of area saves using *Save, checking the file size when viewed at the server end was correct not 8 bytes longer.

Version 3.25. Tagged as 'NFS-3_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __NFSNFS_h
#include "nfsheaders.h"
#endif

_kernel_oserror *fsentry_args( FSEntry_Args_Parameter *parm )
{
        _kernel_oserror *err;
        OpenFile *of = (OpenFile *)parm->handle;
        fattr3 *nattr;
        RISCOSAttributes rattr;
        int dummy_length;

        hourglass_on();

#ifdef SHOWCALLS
        printf(
                "_Args( %d, %s )\n",
                parm->reason,
                of->nfs_fd.desc.name );
#endif

        switch( parm->reason )
        {
        case FSEntry_Args_Reason_ReadSequentialFilePointer:
                parm->arg.sequential_pointer = of->sequential_file_pointer;
                err = NULL;
                break;

        case FSEntry_Args_Reason_WriteSequentialFilePointer:
                if ( of->read_only )
                {
                        err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );

                        if ( err )
                                break;

                        of->nfs_fd.desc.attr = *nattr;

#ifdef LXA_BY_APPENDUM
                        if ( ( !of->nfs_fd.desc.file_is_lxa && parm->arg.sequential_pointer > ui64_value(&nattr->size) ) ||
                                ( of->nfs_fd.desc.file_is_lxa && parm->arg.sequential_pointer > ui64_value(&nattr->size) - lsizeof( appendum ) ) )
#else
                        if ( parm->arg.sequential_pointer > ui64_value(&nattr->size) )
#endif
                        {
                                err = mb_outside_file;
                                break;
                        }
                }

                dummy_length = 0;
                err = putbytes( NULL, &of->nfs_fd, &parm->arg.sequential_pointer, &dummy_length );

                if ( err )
                        break;

                of->sequential_file_pointer = parm->arg.sequential_pointer;
                break;

        case FSEntry_Args_Reason_ReadFileExtent:
                err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );

                if ( !err )
                {
                        of->nfs_fd.desc.attr = *nattr;

                        parm->arg.extent = riscos_extent( &of->nfs_fd );
                }
                break;

        case FSEntry_Args_Reason_WriteFileExtent:
                err = change_length_given_file( &of->nfs_fd, parm->arg.extent, NULL, No );
                break;

        case FSEntry_Args_Reason_ReadSizeAllocatedToFile:
                err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );
                if ( !err )
                {
                        of->nfs_fd.desc.attr = *nattr;
                        parm->arg.extent = ui64_value_as_int(&nattr->size);
                }
                break;

        case FSEntry_Args_Reason_EOFCheck:
                err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );

                if ( !err )
                {
                        of->nfs_fd.desc.attr = *nattr;

                        parm->arg.EOF_Has_Been_Reached = of->sequential_file_pointer >= riscos_extent( &of->nfs_fd );
                }
                break;

        case FSEntry_Args_Reason_FlushFileBuffer:
                /*
                        Ignore flush commands - they mean nothing to us
                */
                err = NULL;
                break;

        case FSEntry_Args_Reason_EnsureFileSize:
                /*
                        Nothing to do here - NFS protocol does not
                        do this.
                */
                err = NULL;
                break;

        case FSEntry_Args_Reason_WriteZerosToFile:
                err = write_zeros(
                        &of->nfs_fd,
                        parm->arg.write_zeros.start,
                        parm->arg.write_zeros.number );
                break;

        case FSEntry_Args_Reason_ReadFileDateStamp:
                err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );
                if ( !err )
                {
                        of->nfs_fd.desc.attr = *nattr;

                        nfs_to_riscos_attributes( &rattr, &of->nfs_fd );

                        parm->arg.info.load_exec.load_address = (char *)rattr.load_address;
                        parm->arg.info.load_exec.execute_address = (char *)rattr.execute_address;
                }
                break;

        case 10: /* Inform of new image stamp */
                err = NULL;
                break;

        default:
                dprintf(("", "FSEntry_Args: reason code %d unknown!\n", parm->reason ));
                err = mb_nfserr_BadParameters;
                break;
        }

        hourglass_off();

        return err;
}
@


4.6
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@d54 1
d57 3
@


4.5
log
@  Access permission code overhaul.
  Supplementary group code improved.
Detail:
  *NFSInfo now shows the group names as well as the group IDs for
    both your primary and supplementary GIDs.
  access.c now uses the supplementary GIDs to help determine whether
    or not you are allowed to read/write a file.
  access.c now provides the NFS->RISC OS attribute mapping - "Owner"
    attributes being UNIX's user/group access; "Public" being the
    UNIX other access.
  The end result of these changes should be that your access rights to
    any object on the NFS server should match those you would expect
    from a UNIX shell logged in with the same ACLs as those you get
    via PCNFS.
Admin:
  Tested on Risc PC.

Version 3.09. Tagged as 'NFS-3_09'
@
text
@d17 1
a17 1
#include "NFS.h"
@


4.4
log
@  Fixed potential use of uninitialised pointer.
Detail:
  If the LOOKUP remote procedure chose not to supply the optional
    object attributes in its result, the attribute pointer would
    remain uninitialised and be treated as safe to use.  This can
    no longer occur.
  All but the unused static rcsid variable compile warnings removed.
Admin:
  Requires AsmUtils 0.06 or later.
  Requires Library 0.39 or later (for rpcgen 0.03 or later)
  Built and tested on Risc PC.

Version 3.07. Tagged as 'NFS-3_07'
@
text
@d134 1
a134 1
                        nfs_to_riscos_attributes( &rattr, &of->nfs_fd.desc );
@


4.3
log
@  Attribute cacheing preload bug fixed.
  Debugging all switched to DebugLib-style.
Detail:
  The attribute cache preloading was failing to take effect because
    the hash value generation was giving the attribute cache preload
    function different answers to those it gave any other functions.
    This has now been fixed.
  Debugging support replaced completely by DebugLib support.
  The automatically generated RPC veneers do not contain any debugging
    (although it could be added by rpcgen - a beta version of rpcgen
    exists that writes DebugLib veneers into the stubs to note all RPC
    calls made via the stubs.  These functions do not, however, unpack
    the parameters and return structures yet.  That would be a massive
    job, requiring changes to all hand-written XDR functions - rpcgen
    could arrange to generate appropriate stuff for anything it writes,
    though)
  Removed obsolete db.c and db.h files.
  TaskObey script added to build the debugging version of the module.
Admin:
  This module has been tested on desktop machines for several months.
    The massive speedup expected from the use of NFS protocol version 3
    is now being noticed on directory operations,

Version 3.01. Tagged as 'NFS-3_01'
@
text
@d91 1
a91 1
                        parm->arg.extent = ui64_value(&nattr->size);
@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@a19 2
#include "DebugLib/DebugLib.h"

@


4.1
log
@Initial revision
@
text
@d20 2
d26 1
a26 1
        fattr *nattr;
d56 2
a57 2
                        if ( ( !of->nfs_fd.desc.file_is_lxa && parm->arg.sequential_pointer > nattr->size ) ||
                                ( of->nfs_fd.desc.file_is_lxa && parm->arg.sequential_pointer > nattr->size - sizeof( appendum ) ) )
d93 1
a93 1
                        parm->arg.extent = nattr->blocksize * nattr->blocks;
d148 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
