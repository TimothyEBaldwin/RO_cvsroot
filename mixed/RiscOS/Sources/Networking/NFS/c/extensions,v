head	4.4;
access;
symbols
	NFS-3_27:4.4
	NFS-3_26:4.4
	NFS-3_25:4.4
	NFS-3_24:4.4
	NFS-3_23:4.4
	NFS-3_22:4.3
	NFS-3_21:4.3
	NFS-3_20:4.3
	NFS-3_19:4.3
	sbrodie_NFS_dev_merge:4.3
	NFS-3_18-4_22_2_4:4.3
	NFS-3_18-4_22_2_3:4.3
	NFS-3_18-4_22_2_2:4.3
	NFS-3_18-4_22_2_1:4.3
	sbrodie_NFS_dev:4.3.0.2
	sbrodie_NFS_dev_bp:4.3
	NFS-3_18:4.3
	NFS-3_17:4.3
	NFS-3_16:4.3
	NFS-3_15:4.3
	NFS-3_14:4.3
	NFS-3_13:4.3
	NFS-3_12:4.3
	NFS-3_11:4.3
	NFS-3_10:4.3
	NFS-3_09:4.3
	NFS-3_08:4.3
	NFS-3_07:4.3
	NFS-3_06:4.3
	NFS-3_05:4.3
	NFS-3_04:4.3
	NFS-3_02:4.3
	NFS-3_01:4.3
	NFS-3_00:4.3
	NFS-2_37:4.2
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.4
date	2018.01.29.21.30.19;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	7TGUL0NEVVbjHOoA;

4.3
date	99.05.14.12.42.16;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.01.06.12.02.23;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.28;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.28;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.37;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*	C.CACHE

Purpose : Utility routines for file extension mapping.

History :
Date	Who    Comments
-----------------------------------------------------------------------------
??       ??     INITIAL VERSION
6/3/95   CP     extensions_read() : Stopped routine from returning an error
	 	if extensions file not found.
19/2/96  DNW    fixed the preserved extensions bug
****************************************************************************/

#ifndef __NFSNFS_h
#include "nfsheaders.h"
#endif

/*
        Special feature Yes on to_extensions means don't add suffix if already there
        Special feature Yes on from_extensions means leave suffix
*/
typedef struct extension
{
        int filetype;
        int special_feature;
        char *extension;
        int extension_len;
}       extension;

typedef struct extensions_map
{
        int to_extensions;      /* to riscos client */
        int from_extensions;    /* from riscos client */
        extension extension[1];
}       extensions_map;

#define From_Extensions_Line "From extensions:\n"
#define To_Extensions_Line "To extensions:\n"
#define Extensions_File "InetDBase:extensions"
static extensions_map *all_extensions = NULL;

static void dirseparator_ntor_strcpy( char *dest, char *source );

_kernel_oserror *filetype_ston( int *filetype, char *string)
{
        return _swix(OS_FSControl, _INR(0,1)|_OUT(2), 31, string, filetype);
}

_kernel_oserror *extensions_read( void )
{
        _kernel_oserror *err = NULL;
        FILE *infile;
        int reading_second_half = No;
        int to_extensions = 0;
        int from_extensions = 0;
        int to_extensions_text = 0;
        int from_extensions_text = 0;
        int entry_rover = 0;
        char *texts_rover = NULL;
        char line[ 300 ];
        char filetype_s[ 9 ];
        int filetype_n;
        char extension[ 51 ];
        char special_feature[ 51 ];
        int fields_read;

        infile = fopen( Extensions_File, "r" );


/************** CP 6/3/95
Don't need to report an error if Extensions file not there.  Just return.
***************/
        if ( infile == NULL )
        {
                return NULL;
        }

        /*
                Assess how much space we'll need
        */
        while ( !err && fgets( line, sizeof( line ), infile ) )
        {
                if ( caseless_strcmp( line, From_Extensions_Line ) == 0 )
                        continue;

                if ( caseless_strcmp( line, To_Extensions_Line ) == 0 )
                {
                        reading_second_half = Yes;
                        continue;
                }


                fields_read = sscanf( line, "%8s %50s %50s", filetype_s, extension, special_feature );
                if ( ( fields_read == 2 || fields_read == 3 ) &&
                        !filetype_ston( &filetype_n, filetype_s ) )
                {
                        (*(reading_second_half?&to_extensions:&from_extensions))++;
                        *(reading_second_half?&to_extensions_text:&from_extensions_text) += strlen( extension ) + 1;
                }
                else if ( caseless_strcmp( line, To_Extensions_Line ) == 0 )
                {
                        reading_second_half = Yes;
                }
        }

        if ( (all_extensions = (extensions_map *)malloc( sizeof( *all_extensions ) + sizeof( all_extensions->extension[0] ) * ( from_extensions + to_extensions - 1 ) + from_extensions_text + to_extensions_text )) == NULL )
        {
                err = mb_malloc_failed;
        }

        if ( !err )
        {
                rewind( infile );
                entry_rover = 0;
                texts_rover = (char *)&all_extensions->extension[ from_extensions + to_extensions ];
                all_extensions->from_extensions = from_extensions;
                all_extensions->to_extensions = to_extensions;
        }

/* Now that we know how much memory we need and we've allocated it lets load the data in  */

        while ( !err && fgets( line, sizeof( line ), infile ) )
        {
                if ( caseless_strcmp( line, From_Extensions_Line ) == 0 ||
                        caseless_strcmp( line, To_Extensions_Line ) == 0 )
                {
                        continue;
                }

                fields_read = sscanf( line, "%8s %50s %50s", filetype_s, extension, special_feature );
                if ( ( fields_read == 2 || fields_read == 3 ) &&
                        !filetype_ston( &filetype_n, filetype_s ) )
                {
                        all_extensions->extension[ entry_rover ].filetype = filetype_n;
                        all_extensions->extension[ entry_rover ].extension = texts_rover;
                        all_extensions->extension[ entry_rover ].special_feature = fields_read == 3;
                        all_extensions->extension[ entry_rover ].extension_len = strlen( extension );
                        if (entry_rover < from_extensions)
                            dirseparator_ntor_strcpy( texts_rover, extension);
                        else
                            strcpy( texts_rover, extension );
                        texts_rover += all_extensions->extension[ entry_rover ].extension_len + 1;
                        entry_rover++;
                }
        }

        if ( !err && !feof( infile ))
        {
                err = _kernel_last_oserror();
        }

        fclose( infile );

        return err;
}

_kernel_oserror *extensions_dispose( void)
{
        if ( all_extensions )
        {
                free( all_extensions );
                all_extensions = NULL;
        }

        return NULL;
}

/*
        *filetype set to -1 if no extension found.

input
fred.html

output
faf
chars_to_leave = 4 if special_feature == FALSE
else = 9 if spcial_feature = TRUE

*/
void extensions_check_nfs_name_for_extension( char *nfs_name, unsigned long *filetype, int *chars_to_leave )
{
        int extno;
        int filenamelen = strlen( nfs_name );  /* length of the filename */
        extension *check_extension;   /* a pointer for tmp use  */

        *filetype = -1;   /* We don't know the file type  */

        if ( all_extensions )   /* if there are extensions to check  */
        {
                /* Loop through all of the to extensions  */
                for ( extno = 0; extno < all_extensions->to_extensions; extno++ )
                {
                        check_extension = &all_extensions->extension[ extno + all_extensions->from_extensions ];
			/* If the length of the filename >= this extensions length and
			   a caseless compare of the extention and the last extension_len chars of the filename
			   is the same  then !     */
                        if ( filenamelen >= check_extension->extension_len &&
 caseless_strcmp( &nfs_name[ filenamelen - check_extension->extension_len ], check_extension->extension ) == 0 )
                        {
                        	/* The filetype is set to the same as the extentions filetype */
                                *filetype = check_extension->filetype;
                                /* If the extension is special then we keep the whole filename */
                                if ( check_extension->special_feature )
                                {
                                        *chars_to_leave = filenamelen;
                                }
                                else
                                {       /* else we loose it */
                                        *chars_to_leave = filenamelen - check_extension->extension_len;
                                }
                                return;  /* return   */
                        }
                }
        }
}

static void dirseparator_rton_strcpy( char *dest, char *source )
{
        while( *source )
        {
                if ( *source == FileChar_NFSDirectorySeparator )
                {
                        *dest = FileChar_DirectorySeparator;
                }
                else
                {
                        *dest = *source;
                }
                source++;
                dest++;
        }

        *dest = '\0';
}

static void dirseparator_ntor_strcpy( char *dest, char *source )
{
        while( *source )
        {
                if ( *source == FileChar_DirectorySeparator )
                {
                        *dest = FileChar_NFSDirectorySeparator;
                }
                else
                {
                        *dest = *source;
                }
                source++;
                dest++;
        }

        *dest = '\0';
}

/*
        *resultant_name set to NULL if type has no corresponding extension

        fred/arc with filetype ddc goes to fred.arc (assuming a mapping ddc .arc unique)
        fred with filetype ddc goes to fred,ddc (assuming a mapping ddc .arc unique)
        fred with filetype ddc goes to fred.arc (assuming a mapping ddc .arc)
        fred "     "        "    "   " fred  ( assuming no mapping)


*/
_kernel_oserror *extensions_extend_nfs_name_with_file_type( char **resultant_name, char *unextended_name, unsigned long filetype )
{
    _kernel_oserror *err = NULL;
    int extno;
    extension *check_extension;
    int filename_len;

    *resultant_name = NULL;

    if ( all_extensions )
    {
        filename_len = strlen(unextended_name);

        for ( extno = 0; extno < all_extensions->from_extensions; extno++ )
        {
            check_extension = &all_extensions->extension[ extno ];
            if ( check_extension->filetype == filetype )
            {

             /* if it's long enough to check and it is there  */
               if ( check_extension->special_feature &&
                     filename_len >= check_extension->extension_len &&
                       caseless_strcmp( &unextended_name[ filename_len - check_extension->extension_len ], check_extension->extension )==0  )
                {
                    *resultant_name = malloc( filename_len + 1 );
                    if ( *resultant_name )
                    {
                        dirseparator_rton_strcpy( *resultant_name, unextended_name );
                    }
                    else
                    {
                        err = mb_malloc_failed;
                    }
                }
                else
                {

                    if (check_extension->special_feature)
                    	return (NULL);

                    *resultant_name = malloc( filename_len + check_extension->extension_len + 1 );
                    if ( *resultant_name )
                    {
                        dirseparator_rton_strcpy( *resultant_name, unextended_name );
                        dirseparator_rton_strcpy( *resultant_name+filename_len, check_extension->extension);
                    }
                    else
                    {
                        err = mb_malloc_failed;
                    }
                }


                return err;
            }
        }
    }

    return NULL;
}
@


4.3
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d29 1
a29 1
#include "NFS.h"
@


4.2
log
@  Fixed wrong pathname in extension handler
Detail:
  Trying to open "<InetDBase$Path>extensions" is not good.
  Now tries to open "InetDBase:extensions" instead.
Admin:
  Not tagged.
@
text
@d194 1
a194 1
void extensions_check_nfs_name_for_extension( char *nfs_name, int *filetype, int *chars_to_leave )
d279 1
a279 1
_kernel_oserror *extensions_extend_nfs_name_with_file_type( char **resultant_name, char *unextended_name, int filetype )
@


4.1
log
@Initial revision
@
text
@d53 1
a53 1
#define Extensions_File "<InetDBase$Path>extensions"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
