head	4.10;
access;
symbols
	NFS-3_27:4.10
	NFS-3_26:4.10
	NFS-3_25:4.10
	NFS-3_24:4.10
	NFS-3_23:4.10
	NFS-3_22:4.9
	NFS-3_21:4.9
	NFS-3_20:4.8
	NFS-3_19:4.8
	sbrodie_NFS_dev_merge:4.7.2.1
	NFS-3_18-4_22_2_4:4.7.2.1
	NFS-3_18-4_22_2_3:4.7.2.1
	NFS-3_18-4_22_2_2:4.7.2.1
	NFS-3_18-4_22_2_1:4.7
	sbrodie_NFS_dev:4.7.0.2
	sbrodie_NFS_dev_bp:4.7
	NFS-3_18:4.7
	NFS-3_17:4.7
	NFS-3_16:4.7
	NFS-3_15:4.7
	NFS-3_14:4.7
	NFS-3_13:4.7
	NFS-3_12:4.7
	NFS-3_11:4.7
	NFS-3_10:4.7
	NFS-3_09:4.7
	NFS-3_08:4.6
	NFS-3_07:4.5
	NFS-3_06:4.4
	NFS-3_05:4.4
	NFS-3_04:4.4
	NFS-3_02:4.4
	NFS-3_01:4.4
	NFS-3_00:4.3
	NFS-2_37:4.2
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.10
date	2018.01.29.21.30.19;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	7TGUL0NEVVbjHOoA;

4.9
date	2004.07.30.11.42.15;	author kbracey;	state Exp;
branches;
next	4.8;

4.8
date	2003.12.10.14.55.09;	author bavison;	state Exp;
branches;
next	4.7;

4.7
date	2000.03.20.15.52.16;	author sbrodie;	state Exp;
branches
	4.7.2.1;
next	4.6;

4.6
date	2000.03.16.12.13.29;	author sbrodie;	state Exp;
branches;
next	4.5;

4.5
date	2000.03.15.14.16.11;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	99.10.13.09.53.55;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.05.14.12.42.12;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.01.18.10.58.03;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.32;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.7.2.1
date	2001.06.12.13.37.41;	author sbrodie;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.22.14.49.32;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.58;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*	C._FUNC

Purpose :

Functions : nfs_riscos_rename
	    read_dir_entries
	    fsentry_func

History :
Date	Who    Comments
-----------------------------------------------------------------------------
07/05/93  ??    Initial version
12/01/95  CP    Changed get_riscosname to take an entry as a parameter
13/01/95  CP	Changed do_cat, read_dir_entries, set_nfs_access
	  	& do_ex_in_directory to use Get_NFS_Directory(...).
	  	Changed get_riscosname to take a char * as argument for name.
7/2/95    CP	Added contents listing
13/2/95   CP	Changed nature of showcalls to use a pipe
23/2/95   KSR   Activated FSEntry_Func_Reason_BootFilingSystem via nfs_boot()
20/2/96   KJB   All sorts of archaic RISC OS 2 stuff stripped out
****************************************************************************/
#ifndef ___NFS_NFS_H
#include "nfsheaders.h"
#endif

#include "enumdir.h"


static _kernel_oserror *get_riscosname( char *name, char **riscosname, nfs_file_descriptor *ndesc )
{
        fattr3 *nattr;
        _kernel_oserror *err;
        /*
                Get nfs name of object
        */
 	ndesc->desc.name = name;

        /*
                         get attributes
        */
        dprintf(("Func", "Func (get_riscosname): nfs_lookup >>%s<< (MP=%p)\n", ndesc->desc.name, ndesc->mp));
        err = nfs_lookup( &ndesc->file, &nattr, ndesc->mp, &ndesc->dir, &ndesc->desc.name, FALSE );
        if ( err )
                return err;
        ndesc->desc.attr = *nattr;
        /*
                convert nfs name to riscos name
        */
        return nfsname_to_riscos_name( riscosname, ndesc->desc.name, ndesc );
}


/*
        Do a rename
*/
static _kernel_oserror *nfs_riscos_rename
(
        char *from,
        char *to,
        YesNoAnswer *invalid
)
{
        _kernel_oserror *err;
        char *path_from;
        char *leaf_from;
        char *path_to;
        char *leaf_to;
        RISCOSAttributes rattr;
        char *to_name;
        nfs_file_descriptor from_ndesc;
        nfs_file_descriptor to_ndesc;


        /*
                Find what we're renaming from.
        */
        err = find_leaf( from, &from_ndesc, &path_from, &leaf_from );

        if ( err )
                return err;

        free( path_from );

        /*
                Find dir we're renaming to.
        */
        err = find_dir_for_leaf( to, &to_ndesc, &path_to, &leaf_to );

        if ( err )
                return err;

        /*
                Is it on the same mount point?
        */
        if ( from_ndesc.mp != to_ndesc.mp )
        {
                *invalid = Yes;
                free( path_to );
                return NULL;
        }

        /*
                Check whether we're renaming onto something
        */
        err = find_object_in_directory( &to_ndesc, leaf_to );

        if ( !err && (fh3cmp( &to_ndesc.dir, &from_ndesc.dir ) != 0 ||
                      strcmp( from_ndesc.desc.name, to_ndesc.desc.name ) != 0) )
        {
                /*
                        Destination exists and isn't the source (different directory or different name)
                */
                free( path_to );
                free( from_ndesc.desc.name );
                free( to_ndesc.desc.name );
                *invalid = Yes;
                return NULL;
        }
        else if ( err && err != mb_nfserr_noent )
        {
                /*
                        Error looking for destination
                */
                free( path_to );
                free( from_ndesc.desc.name );
                return err;
        }

        /*
                Construct the destination filename
        */
        nfs_to_riscos_attributes( &rattr, &from_ndesc );

        err = riscos_name_to_nfsname( &to_name, leaf_to, &rattr );

        free( path_to );

        if ( err )
        {
                free( from_ndesc.desc.name );
                return err;
        }

        /*
                Do the rename.
        */
        err = nfs_rename_safely( to_ndesc.mp, &to_ndesc.dir, to_name, &from_ndesc.dir, from_ndesc.desc.name );

        free( from_ndesc.desc.name );
        free( to_name );

        *invalid = No;

        return err;
}



/********** read_dir_entries ************************************************

Purpose : Generic read directory entries to location routine.  Parameters
	  seem to be closely related to those of OS_GBPB8 (SWI &0C).


Inputs :  int whichinfo     controls which info is transfered.
          char *dirname
          char *dest        Where to put the data
          int *nobjects     How many directory items to get
          int *nexttoread   Next item on directory to get (0 => start at top)
          int buffer_length Size (in bytes?) of buffer to store data


Returns : NULL if OK, pointer to error if not.
	  noobjects holds number of objects retrieved.
	  nexttoread holds number of next item in directory, or -1 in the
	  case of an overflow (eg asking for more entries than there are in
	  the directory).
	  dest holds the actual data requested.
****************************************************************************/

static _kernel_oserror *read_dir_entries(int  which_info,
        	       			 char *dirname,
        				 char *dest,
        				 int  *nobjects,
        				 int  *nexttoread,
        				 int  buffer_length)
{
        _kernel_oserror *err;
        char *path_to_leaf;
        char *leaf_position;
        int entry_count;
        char *riscos_name;
        RISCOSAttributes rattr;
        nfs_file_descriptor ndesc;
        nfs_file_descriptor ndescf;
        char *odest;
        char *ThisFileName;

	dprintf(("readdir_1", "read_dir_entries: whichinfo=%i name=%s notoread=%i nxttoread=%i bufferlength=%i\n",
		which_info, dirname, *nobjects, *nexttoread, buffer_length));

        err = find_directory_leaf( dirname, &ndesc, &path_to_leaf, &leaf_position );

        if ( err )
                return err;

        free( ndesc.desc.name );
        free( path_to_leaf );


           /* Open the directory */

	dprintf(("readdir_1", "read_dir_entries: opening directory....(MP=%p)\n", ndesc.mp));
        err = GetNFSDirEntry(ndesc.mp, &ndesc.file, *nexttoread, &ThisFileName, NULL, buffer_length);

        if ( err )
           return err; /* something went wrong */

	dprintf(("readdir_1", "First file name is %s\n", ThisFileName?ThisFileName:"<<NULL>>"));


	/* peThisEntry should now be pointing to the correct entry */

        ndescf.mp = ndesc.mp;
        fh3cpy(&ndescf.dir, &ndesc.file);

        entry_count = *nobjects;
        *nobjects = 0;

        /* While there is no error AND still need to get entries AND
           there is buffer space AND HAVE NOT reached end of directory */

        while( !err && (entry_count > 0) && (buffer_length > 0) && ThisFileName != NULL)
        {
          /*
              Read the file name
          */
          err = get_riscosname( ThisFileName, &riscos_name, &ndescf );

          if ( err )
             return err;

          /*
              If we're getting some info too
          */
          if ( which_info )
          {
              /*
                  Move dest to a word boundary
              */
              odest = dest;
              dest = (char *)( ((unsigned)dest + 3) & ~3 );
              buffer_length -= dest-odest;

              /*
                    get extended info for this file
              */
              err = nfs_lookup_extended( &ndescf, FALSE );

              if ( err )
              {
                  free( riscos_name );
                  return err;
              }

              /*
                   Convert the attributes to RISCOS form
              */
              nfs_to_riscos_attributes( &rattr, &ndescf );

              /*
                   Transfer the attributes as flagged
              */
              if ( which_info & Read_LoadAddress )
              {
                 buffer_length -= 4;

                 if ( buffer_length < 0 )
                 {
                     free( riscos_name );
                     continue;
                 }

                 *(unsigned long *)dest = rattr.load_address;
                 dest += sizeof( rattr.load_address );
              }

              if ( which_info & Read_ExecuteAddress )
              {
                  buffer_length -= 4;

                  if ( buffer_length < 0 )
                  {
                     free( riscos_name );
                     continue;
                  }

                  *(unsigned long *)dest = rattr.execute_address;
                  dest += sizeof( rattr.execute_address );
              }

              if ( which_info & Read_Length )
              {
                  buffer_length -= 4;

                  if ( buffer_length < 0 )
                  {
                      free( riscos_name );
                      continue;
                  }

                  *(int *)dest = rattr.file_length;
                  dest += sizeof( int );
              }

              if ( which_info & Read_Attributes )
              {
                 buffer_length -= 4;

                 if ( buffer_length < 0 )
                 {
                     free( riscos_name );
                     continue;
                 }

                 *(int *)dest = rattr.access;
                 dest += sizeof( int );
              }

              if ( which_info & Read_ObjectType )
              {
                   buffer_length -= 4;

                   if ( buffer_length < 0 )
                   {
                      free( riscos_name );
                      continue;
                   }

                   *(int *)dest = rattr.type;
                   dest += sizeof( int );
              }

              if ( which_info & Read_SIN )
              {
                  buffer_length -= 4;

                  if ( buffer_length < 0 )
                  {
                      free( riscos_name );
                      continue;
                  }

                  *(int *)dest = 0;
                  dest += sizeof( int );
               }

               if ( which_info & Read_DateTime )
               {
                   buffer_length -= 5;

                   if ( buffer_length < 0 )
                   {
                       free( riscos_name );
                       continue;
                   }

                   *(unsigned long *)dest = rattr.execute_address;
                   dest += sizeof( rattr.execute_address );
                   *(char *)dest = (char) (rattr.load_address & 0xfful);
                   dest += sizeof( char );
               }
          } /* endif(whichinfo)  some attributes to copy over */

          /*
              copy the name across
          */
          buffer_length -= strlen( riscos_name ) + 1;

          if ( buffer_length < 0 )
          {
              free( riscos_name );
              continue;
          }

          strcpy( dest, riscos_name );

          dest += strlen( riscos_name ) + 1;

          free( riscos_name );

          /*
                  Finished one file's transfer, count this successful
                  transfer and move on to the next.
          */
          (*nobjects)++;
          (*nexttoread)++;
          entry_count--;

           /* Get next file, don't check for cache freshness */
   	  dprintf(("readdir_1", "read_dir_entries: getting next filename..."));
          err = GetNextNFSDirEntry(&ThisFileName, NULL);

          if(err)
          	return err;

          dprintf(("readdir_1", "read_dir_entries: next filename is %s\n", ThisFileName?ThisFileName:"<<NULL>>"));

        } /* endwhile( !err && (entry_count > 0) && (buffer_length > 0) && ThisName != NULL)  */

	if(buffer_length < 0)
   		dprintf(("readdir_1", "read_dir_entries: exit reason no bufferspace left\n"));

        if (ThisFileName == NULL  && (entry_count > 0))
        {
           	/* asked for too much */
                *nexttoread = -1;
        }

        return err;
}   /* endfunction read_dir_entries */

static _kernel_oserror *canonicalise_disc_name(char *discname, char *buffer, int bufsize,
                                   char **outptr, int *reqbuf)
{
    char *canon;

    if (discname==NULL)
    {
        return mb_no_current_mount_point;
        #if 0
        /* Get the first mount */
        link=mount_point_list.forwards;
        if (link->forwards)
        {
            mp=Link_Wrapper(link);
            canon=mp->mount_point_name;
        }
        else
            canon=0;
        #endif
    }
    else
        canon=discname;

    if (buffer==NULL)
    {
        *outptr=canon;

        if (canon)
            *reqbuf=strlen(canon);
        else
            *reqbuf=0;
    }
    else
    {
        if (canon)
        {
            strncpy(buffer, canon, bufsize);
            *reqbuf=strlen(canon)-bufsize;
            *outptr=buffer;
        }
        else
        {
            *reqbuf=0;
            *outptr=NULL;
        }
    }
    return NULL;
}

_kernel_oserror *fsentry_func
(
        FSEntry_Func_Parameter *parm
)
{
        _kernel_oserror *err = NULL;

        hourglass_on();

        dprintf(("showcalls", "_Func( %d )\n", parm->reason ));

        if ( parm->reason != FSEntry_Func_Reason_CanonicaliseSpecialFieldAndDiscName
             && parm->special_field_1 )
        {
                err = mb_bad_op_on_spool;
        }

        if ( !err )
        {
                switch ( parm->reason )
                {
/* FSEntry_Func0-6 not used under RISC OS 3 */
                case FSEntry_Func_Reason_SetCurrentDirectory:
                case FSEntry_Func_Reason_SetLibraryDirectory:
                case FSEntry_Func_Reason_CatalogueDirectory:
                case FSEntry_Func_Reason_ExamineCurrentDirectory:
                case FSEntry_Func_Reason_CatalogueLibraryDirectory:
                case FSEntry_Func_Reason_ExamineLibraryDirectory:
                case FSEntry_Func_Reason_ExamineObjects:
                        dprintf(("", "Unused FSEntry_Func entry called! (%d)\n", parm->reason));
                        err = mb_nfserr_BadParameters;
                        break;

/* FSEntry_Func7 */
                case FSEntry_Func_Reason_SetFilingSystemOptions:
                        err = mb_no_opts_for_nfs;
                        break;

/* FSEntry_Func8 */
                case FSEntry_Func_Reason_RenameObject:
                        if ( parm->special_field_2 && parm->special_field_2[0] )
                        {
                                err = mb_bad_op_on_spool;
                        }
                        else
                        {
                                err = nfs_riscos_rename( parm->first_parameter.name_1, parm->second_parameter.name_2, &parm->first_parameter.rename_invalid );
                        }
                        break;

/* FSEntry_Func9 - not used */
                case FSEntry_Func_Reason_AccessObjects:
                        dprintf(("", "Unused FSEntry_Func entry called! (%d)\n", parm->reason));
                        err = mb_nfserr_BadParameters;
                        break;

/* FSEntry_Func10 */
                case FSEntry_Func_Reason_BootFilingSystem:
                        err = nfs_boot();
                        break;

/* FSEntry_Func11-13 not used */
                case FSEntry_Func_Reason_ReadNameAndBootOptionOfDisc:
                case FSEntry_Func_Reason_ReadCurrentDirectoryNameAndPrivilegeByte:
                case FSEntry_Func_Reason_ReadLibraryDirectoryNameAndPrivilegeByte:
                        dprintf(("", "Unused FSEntry_Func entry called! (%d)\n", parm->reason));
                        err = mb_nfserr_BadParameters;
                        break;

/* FSEntry_Func14 */
                case FSEntry_Func_Reason_ReadDirectoryEntries:
                        err = read_dir_entries(
                                0,
                                parm->first_parameter.name_1,
                                parm->second_parameter.destination_address,
                                &parm->third_parameter.read_number,
                                &parm->read_offset,
                                parm->buffer_length );
                        break;

/* FSEntry_Func15 */
                case FSEntry_Func_Reason_ReadDirectoriesAndInformation:
                        err = read_dir_entries(
                                Read_LoadAddress | Read_ExecuteAddress | Read_Length |
                                        Read_Attributes | Read_ObjectType,
                                parm->first_parameter.name_1,
                                parm->second_parameter.destination_address,
                                &parm->third_parameter.read_number,
                                &parm->read_offset,
                                parm->buffer_length );
                        break;

/* FSEntry_Func16 */
                case FSEntry_Func_Reason_ShutDown:
                        err = nfs_dismount_all();
                        if ( !err )
                                err = process_nfsname( User_Nobody, "" );
                        break;

/* FSEntry_Func17 */
                case FSEntry_Func_Reason_PrintStartUpBanner:
                        err = lightweight_printf( "Acorn RISC OS NFS\n" );
                        break;

/* FSEntry_Func18 */
                case FSEntry_Func_Reason_SetDirectoryContexts:
                        err = mb_func18_not_supported;
                        break;

/* FSEntry_Func19 */
                case FSEntry_Func_Reason_ReadDirectoryEntriesAndInformation:
                        err = read_dir_entries(
                                Read_LoadAddress | Read_ExecuteAddress | Read_Length |
                                        Read_Attributes | Read_ObjectType |
                                        Read_SIN | Read_DateTime,
                                parm->first_parameter.name_1,
                                parm->second_parameter.destination_address,
                                &parm->third_parameter.read_number,
                                &parm->read_offset,
                                parm->buffer_length );
                        break;

/* FSEntry_Func20 */
                case FSEntry_Func_Reason_OutputFullInformationOnObjects:
                        err = mb_func20_not_supported;
                        break;

/* FSEntry_Func23 */
                case FSEntry_Func_Reason_CanonicaliseSpecialFieldAndDiscName:
                {
                    _kernel_swi_regs *r=(_kernel_swi_regs *)parm;
                    err=
                    canonicalise_disc_name((char *)r->r[2],
                                           (char *)r->r[4],
                                           r->r[6],
                                           (char **)&r->r[2],
                                           &r->r[4]);
                    if (err)
                        break;

                    /* Pass through special field unaltered */
                    if (r->r[1])
                    {
                        if (r->r[3])
                        {
                            strncpy((char *)r->r[3], (char *)r->r[1], r->r[5]);
                            r->r[1] = r->r[3];
                            r->r[3]=strlen((char *)r->r[1]) - r->r[5];
                        }
                        else
                            r->r[3]=strlen((char *)r->r[1]);
                    }
                    else
                        r->r[3]=0;
                }
                break;

/* FSEntry_Func24 */
                case FSEntry_Func_Reason_ResolveWildcard:
                        parm->read_offset=-1;
                        break;

/* FSEntry_Func27 */
                case FSEntry_Func_Reason_ReadBootOption:
                        parm->second_parameter.parameter=0;
                        break;

                default:
                        dprintf(("", "Unknown FSEntry_Func entry called! (%d)\n", parm->reason));
                        err = mb_nfserr_BadParameters;
                        break;
                }
        }

        hourglass_off();

        return err;
}
@


4.9
log
@Fixed a memory leak that occurred in some circumstances when a non-exact
name was supplied (eg "Fred" when the server has "fred" or "Fred,ffb").

Version 3.21. Tagged as 'NFS-3_21'
@
text
@d37 1
a37 1
#include "NFS.h"
@


4.8
log
@Merged in branch sbrodie_NFS_dev.
Also added -c90 to CFLAGS so that it will build with recent compilers.
Warning: provokes compiler bugs in many recent compilers!

Version 3.19. Tagged as 'NFS-3_19'
@
text
@d56 1
a56 1
        err = nfs_lookup( &ndesc->file, &nattr, ndesc->mp, &ndesc->dir, &ndesc->desc.name );
d272 1
a272 1
              err = nfs_lookup_extended( &ndescf );
@


4.7
log
@  Access permission code overhaul.
  Supplementary group code improved.
Detail:
  *NFSInfo now shows the group names as well as the group IDs for
    both your primary and supplementary GIDs.
  access.c now uses the supplementary GIDs to help determine whether
    or not you are allowed to read/write a file.
  access.c now provides the NFS->RISC OS attribute mapping - "Owner"
    attributes being UNIX's user/group access; "Public" being the
    UNIX other access.
  The end result of these changes should be that your access rights to
    any object on the NFS server should match those you would expect
    from a UNIX shell logged in with the same ACLs as those you get
    via PCNFS.
Admin:
  Tested on Risc PC.

Version 3.09. Tagged as 'NFS-3_09'
@
text
@d56 1
a56 1
        err = nfs_lookup( &ndesc->file, &nattr, ndesc->mp, &ndesc->dir, ndesc->desc.name );
@


4.7.2.1
log
@  Fixed some cache problems.
Detail:
  Untyped and lxa files now work again.
  Routines which call nfs_lookup now provide a char * into which the Real
    NFS Leafname can be stored.  This avoids problems with type extended
    files not being found, flushed from the cache, and re-sought - even
    when the files were there anyway.  Fixes the problems with not being
    able to write or delete filetype extended files too.  This should
    speed lots of ops up since it is removing the need for another GETATTR3
    call and/or a directory search.
  I've added in some more of the attribute updating to prevent directory
    attributes being thrown out of the cache when the directory changes
    in a predictable manner (e.h. deleting a file in the directory does
    not cause the cache entries for the directory to be scrapped - simply
    updated from the attributes in the REMOVE3 result - provided the dir
    hadn't changed since the last time we read its attributes.  Fixing this
    means you can delete files on an NFS mount much more quickly now.
Notes:
  Softlinks are a complete disaster for the cache still :-(
  I'm sure it should be possible to search the lookup cache for matching
    leafnames instead of doing a directory search every time - if it is and
    is implemented, this should speed things up a lot.
Admin:
  Tested briefly, seems to work at a basic level but still undergoing testing.


Version 3.18, 4.22.2.2. Tagged as 'NFS-3_18-4_22_2_2'
@
text
@d56 1
a56 1
        err = nfs_lookup( &ndesc->file, &nattr, ndesc->mp, &ndesc->dir, &ndesc->desc.name );
@


4.6
log
@  Fixed critical bug in directory enumeration code.
Detail:
  When requesting the next chunk of directory from a server, instead of
    sending the cookie representing the last filename read, a chunk of
    the FIQ handler was being sent (null pointer dereference).  The
    server sends us an immediate EOF at that.  This only affects the
    "fast-forward" code which restarts an aborted directory search by
    skipping quickly through the directory until it gets to the restart
    point.
Admin:
  Tested on Risc PC - all 100 items in my test directory now appear
    correctly.

Version 3.08. Tagged as 'NFS-3_08'
@
text
@d146 1
a146 1
        nfs_to_riscos_attributes( &rattr, &from_ndesc.desc );
d283 1
a283 1
              nfs_to_riscos_attributes( &rattr, &ndescf.desc );
@


4.5
log
@  Fixed potential use of uninitialised pointer.
Detail:
  If the LOOKUP remote procedure chose not to supply the optional
    object attributes in its result, the attribute pointer would
    remain uninitialised and be treated as safe to use.  This can
    no longer occur.
  All but the unused static rcsid variable compile warnings removed.
Admin:
  Requires AsmUtils 0.06 or later.
  Requires Library 0.39 or later (for rpcgen 0.03 or later)
  Built and tested on Risc PC.

Version 3.07. Tagged as 'NFS-3_07'
@
text
@d233 1
a233 1
	dprintf(("readdir_1", "First file name is %s\n", ThisFileName));
@


4.4
log
@  Attribute cacheing preload bug fixed.
  Debugging all switched to DebugLib-style.
Detail:
  The attribute cache preloading was failing to take effect because
    the hash value generation was giving the attribute cache preload
    function different answers to those it gave any other functions.
    This has now been fixed.
  Debugging support replaced completely by DebugLib support.
  The automatically generated RPC veneers do not contain any debugging
    (although it could be added by rpcgen - a beta version of rpcgen
    exists that writes DebugLib veneers into the stubs to note all RPC
    calls made via the stubs.  These functions do not, however, unpack
    the parameters and return structures yet.  That would be a massive
    job, requiring changes to all hand-written XDR functions - rpcgen
    could arrange to generate appropriate stuff for anything it writes,
    though)
  Removed obsolete db.c and db.h files.
  TaskObey script added to build the debugging version of the module.
Admin:
  This module has been tested on desktop machines for several months.
    The massive speedup expected from the use of NFS protocol version 3
    is now being noticed on directory operations,

Version 3.01. Tagged as 'NFS-3_01'
@
text
@d421 1
a421 1
          dprintf(("readdir_1", "read_dir_entries: next filename is %s\n", ThisFileName));
@


4.3
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@a41 6
#include "DebugLib/DebugLib.h"

#ifdef SHOWCALLS
extern FILE *pipe_debug;
#endif

d55 1
d227 1
a227 1
	dprintf(("readdir_1", "read_dir_entries: opening directory....\n"));
@


4.2
log
@  Fixed bug which causes a leak in the system heap in FileSwitch < 2.43
Detail:
  When canonicalising disc and special field (FSFunc_Entry 23) NFS forgets
    to copy the buffer pointer supplied in R3 on entry to R1 on exit as
    required by the spec.  FileSwitch modules prior to version 2.43 then
    fail to release memory since R1 is not what it expected it to be, thus
    leaking blocks in the System Heap.
Admin:
  Tested against FileSwitch 2.42 and FileSwitch 2.43 - no leaks occur
    with either version.

Version 2.37. Tagged as 'NFS-2_37'
@
text
@d42 2
d51 1
a51 1
        fattr *nattr;
d126 1
a126 1
        if ( !err && (memcmp( &to_ndesc.dir, &from_ndesc.dir, sizeof( to_ndesc.dir )) != 0 ||
d218 2
a219 5
#if DEBUGON
printf("read_dir_entries: parameters for call...\n");
printf("whichinfo=%i name=%s notoread=%i nxttoread=%i bufferlength=%i\n", which_info, dirname, *nobjects, *nexttoread, buffer_length);
#endif

d232 2
a233 4
#if DEBUGON
printf("read_dir_entries: opening directory....");
#endif
        err = GetNFSDirEntry(ndesc.mp, ndesc.file, *nexttoread, &ThisFileName, NULL);
d238 1
a238 3
#if DEBUGON
printf("First file name is %s\n", ThisFileName);
#endif
d244 1
a244 1
        ndescf.dir = ndesc.file;
d303 2
a304 2
                 *(int *)dest = rattr.load_address;
                 dest += sizeof( int );
d317 2
a318 2
                  *(int *)dest = rattr.execute_address;
                  dest += sizeof( int );
d387 3
a389 3
                   *(int *)dest = rattr.execute_address;
                   dest += sizeof( int );
                   *(char *)dest = rattr.load_address & 0xff;
d420 5
a424 4
#if DEBUGON
printf("read_dir_entries: getting next filename...");
#endif
           err = GetNextNFSDirEntry(&ThisFileName, NULL);
d426 1
a426 5
           if(err)
              return err;
#if DEBUGON
printf("it is %s\n", ThisFileName);
#endif
d430 2
a431 4
#if DEBUGON
if(buffer_length < 0)
   printf("read_dir_entries: exit reason no bufferspace left\n");
#endif
d500 1
a500 13
#if 0
#ifdef SHOWCALLS
        fprintf(pipe_debug,
                "FSEntry_Func( %d )\n",
                parm->reason );
	fflush(pipe_debug);
#endif
#else
#ifdef SHOWCALLS
        printf("_Func( %d )\n",
                parm->reason );
#endif
#endif
d520 1
d543 1
d556 1
a621 6
#ifdef SHOWCALLS
                    if (r->r[2])
                        printf("Canonicalising '%s'\n", (char *) r->r[2]);
                    if (r->r[1])
                        printf("Special field `%s'\n", (char *) r->r[1]);
#endif
d659 1
@


4.1
log
@Initial revision
@
text
@d644 2
d662 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
