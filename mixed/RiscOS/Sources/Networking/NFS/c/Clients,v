head	4.9;
access;
symbols
	NFS-3_27:4.9
	NFS-3_26:4.9
	NFS-3_25:4.9
	NFS-3_24:4.9
	NFS-3_23:4.9
	NFS-3_22:4.8
	NFS-3_21:4.8
	NFS-3_20:4.8
	NFS-3_19:4.8
	sbrodie_NFS_dev_merge:4.8
	NFS-3_18-4_22_2_4:4.8
	NFS-3_18-4_22_2_3:4.8
	NFS-3_18-4_22_2_2:4.8
	NFS-3_18-4_22_2_1:4.8
	sbrodie_NFS_dev:4.8.0.2
	sbrodie_NFS_dev_bp:4.8
	NFS-3_18:4.8
	NFS-3_17:4.7
	NFS-3_16:4.7
	NFS-3_15:4.7
	NFS-3_14:4.7
	NFS-3_13:4.6
	NFS-3_12:4.5
	NFS-3_11:4.5
	NFS-3_10:4.5
	NFS-3_09:4.5
	NFS-3_08:4.5
	NFS-3_07:4.5
	NFS-3_06:4.4
	NFS-3_05:4.4
	NFS-3_04:4.3
	NFS-3_02:4.3
	NFS-3_01:4.3
	NFS-3_00:4.3
	NFS-2_37:4.2
	NFS-2_36:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.2
	Spin_merge:4.1.7.3
	Spinner_23Sep1998_destend:4.2
	Spinner_23Sep1998_srcend:4.1.7.3
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.2
	ARTtmp_merge:4.1.7.2
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	ARTtmp:4.1.7.2.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.9
date	2018.01.29.21.30.18;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	7TGUL0NEVVbjHOoA;

4.8
date	2000.11.15.15.19.35;	author sbrodie;	state Exp;
branches;
next	4.7;

4.7
date	2000.07.05.14.04.33;	author sbrodie;	state Exp;
branches;
next	4.6;

4.6
date	2000.06.27.14.45.03;	author sbrodie;	state Exp;
branches;
next	4.5;

4.5
date	2000.03.15.14.16.10;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	99.12.06.15.58.01;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.05.14.12.42.04;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	98.10.22.18.03.49;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.27;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.27;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.33;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.06.14.32.41;	author jfarrell;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.07.11.09.59.10;	author jfarrell;	state Exp;
branches;
next	;


desc
@@


4.9
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
        RISC OS NFS CLIENT routines. Get/Release clients and turn errors from RPCs into
        RISC OS error structures.
*/
/* Modification history
   05/05/95, RWB - commented out extern int errno
   04-Mar-97 jmf - add comments on usage of rpcnfs_to_riscos_err (was used incorrectly)
   29-Apr-97 jmf - fix bug of *NFS:timeout not taking effect for pre-alloctaed clients
 */
#ifndef __NFS_H
#include "nfsheaders.h"
#endif

#include "rpc/pmap_clnt.h"

#include "TimeOut.h"
#include "rquota.h"

_kernel_oserror *errno_to_riscos_err
(
        void
)
{
        return &_inet_error;
}

typedef int errmap( _kernel_oserror **err, int errno );

static _kernel_oserror *general_rpcthingy_to_riscos_err
(
        int *res,
        CLIENT *client,
        char *fillin_name,
        _kernel_oserror *ukerr,
        errmap errors
)
{
        _kernel_oserror *err;

        if ( res )
        {
                if ( !errors( &err, *res ) )
                {
                        err = (_kernel_oserror *)return_buffer;
                        err->errnum = ukerr->errnum;
                        sprintf( err->errmess, "%s (number %d)", ukerr->errmess, *res );
                }

                if (err)
                {
                        dprintf(("rpc_1", "RPC error: %s\n", err->errmess));
                }

                return err;
        }
        else if ( errno == EINTR )
        {
                dprintf(("rpc_1", "Escape! (%p)\n", &errno));
                return mb_escape;
        }
        else
        {
                _kernel_oserror *err = (_kernel_oserror *)return_buffer;

                err->errnum = mb_rpc_failed->errnum;
                sprintf( err->errmess, mb_rpc_failed->errmess, clnt_sperror( client, fillin_name ));

                if (err)
                {
                        dprintf(("rpc_1", "RPC error: %s\n", err->errmess));
                }

                return err;
        }
}

static int nfs_errmap(
        _kernel_oserror **err,
        int errno
)
{
        switch( errno )
        {
        case NFS3_OK:
                *err = NULL;
                return Yes;
        case NFS3ERR_PERM:
                *err = mb_nfserr_perm;
                return Yes;
        case NFS3ERR_NOENT:
                *err = mb_nfserr_noent;
                return Yes;
        case NFS3ERR_IO:
                *err = mb_nfserr_io;
                return Yes;
        case NFS3ERR_NXIO:
                *err = mb_nfserr_nxio;
                return Yes;
        case NFS3ERR_ACCES:
                *err = mb_nfserr_acces;
                return Yes;
        case NFS3ERR_EXIST:
                *err = mb_nfserr_exist;
                return Yes;
        case NFS3ERR_NODEV:
                *err = mb_nfserr_nodev;
                return Yes;
        case NFS3ERR_NOTDIR:
                *err = mb_nfserr_noent; /* Must be noent for IFSs to work */
                return Yes;
        case NFS3ERR_ISDIR:
                *err = mb_nfserr_noent; /* Must be noent for IFSs to work */
                return Yes;
        case NFS3ERR_FBIG:
                *err = mb_nfserr_fbig;
                return Yes;
        case NFS3ERR_NOSPC:
                *err = mb_nfserr_nospc;
                return Yes;
        case NFS3ERR_ROFS:
                *err = mb_nfserr_rofs;
                return Yes;
        case NFS3ERR_NAMETOOLONG:
                *err = mb_nfserr_nametoolong;
                return Yes;
        case NFS3ERR_NOTEMPTY:
                *err = mb_nfserr_notempty;
                return Yes;
        case NFS3ERR_DQUOT:
                *err = mb_nfserr_dquot;
                return Yes;
        case NFS3ERR_REMOTE:
                *err = mb_nfserr_remote;
                return Yes;
        case NFS3ERR_STALE:
                *err = mb_nfserr_stale;
                return Yes;
        case NFSERR_WFLUSH:
                *err = mb_nfserr_wflush;
                return Yes;
        case NFS3ERR_INVAL:
                *err = mb_nfserr_BadParameters;
                return Yes;
        case 79:
                *err = mb_nfs_unknown_error_79;
                return Yes;
        default:
                return No;
        }
}

/*
        Generate appropriate error blocks for failed rpc nfs calls

	'res' points to the return value of the NFS procedure, or NULL if the RPC failed.

	'mount_point' is the NFS mount on which the operation was being attempted.  This is
	used to obtain the name of the mount for inclusion in the error message for some cases.

	'nfs_client' is a pointer to the RPC client handle on which the error occurred.
	This is used to obtain the RPC error status that was stored by the RPC library.


	NOTE: There are two cases in which this routine is used:

	a) The remote NFS procedure returned an NFS error.  The error is pointed to by
	   'res', and 'nfs_client' is not used.

	b) The RPC itself failed (status != RPC_SUCCESS) and so the NFS result is
	   not set.  In this case, 'res' MUST be passed as NULL, and 'nfs_client'
	   is then used to obtain the RPC error information.

*/
_kernel_oserror *rpcnfs_to_riscos_err
(
        void *res,
        MountPoint *mount_point,
        CLIENT *nfs_client
)
{
        return general_rpcthingy_to_riscos_err( res, nfs_client, mount_point->mount_point_name, mb_nfserr_unknown, nfs_errmap );
}

/*
        Generate appropriate error blocks for failed rpc nfs calls
*/
_kernel_oserror *rpcmount_to_riscos_err
(
        void *res,
        MountPoint *mount_point,
        CLIENT *mount_client
)
{
        return general_rpcthingy_to_riscos_err( res, mount_client, mount_point->mount_point_name, mb_mounterr_unknown, nfs_errmap );
}

static _kernel_oserror *clntcreate_to_riscos_err( void )
{
        _kernel_oserror *err;

        switch ( rpc_createerr.cf_stat )
        {
        case RPC_SYSTEMERROR:
                errno = rpc_createerr.cf_error.re_errno;
                err = errno_to_riscos_err();
                break;

        default:
                err = (_kernel_oserror *)return_buffer;
                err->errnum = mb_rpc_failed->errnum;
                sprintf( err->errmess, mb_rpc_failed->errmess, clnt_sperrno( rpc_createerr.cf_stat ));
                break;
        }

        return err;
}

static int pcnfsd_pi_errmap
(
        _kernel_oserror **err,
        int errno
)
{
        switch( errno )
        {
        case PI_RES_OK:
                *err = NULL;
                return Yes;
        case PI_RES_NO_SUCH_PRINTER:
                *err = mb_no_such_printer;
                return Yes;
        case PI_RES_FAIL:
                *err = mb_print_init_failed;
                return Yes;
        default:
                return No;
        }
}

_kernel_oserror *rpcpcnfsd_pi_to_riscos_err
(
        void *res,
        CLIENT *client,
        char *mountname
)
{
        return general_rpcthingy_to_riscos_err( res, client, mountname, mb_pcnfsd_pi_err_unknown, pcnfsd_pi_errmap );
}

static int pcnfsd_ps_errmap( _kernel_oserror **err, int errno )
{
        switch( errno )
        {
        case PS_RES_OK:
        case PS_RES_NULL:
                *err = NULL;
                return Yes;
        case PS_RES_ALREADY:
                *err = mb_file_printing_already;
                return Yes;
        case PS_RES_NO_FILE:
                *err = mb_spool_file_disappeared;
                return Yes;
        case PS_RES_FAIL:
                *err = mb_spooling_failed;
                return Yes;
        default:
                return No;
        }
}

_kernel_oserror *rpcpcnfsd_ps_to_riscos_err
(
        void *res,
        CLIENT *client,
        char *mountname
)
{
        return general_rpcthingy_to_riscos_err( res, client, mountname, mb_pcnfsd_ps_err_unknown, pcnfsd_ps_errmap );
}

/*
        Release a client back to whatever pool it lies in
*/
void release_client
(
        unused_client *client
)
{
       	client->in_use = No;
}

static _kernel_oserror *allocate_client
(
        unused_client   **clientp,
        Chain_Header    *clients,
        char            *host_name,
        u_long          program,
        u_long          version,
        char            *protocol,
        AUTH            *auth
)
{
        Chain_Link *link;
        unused_client *try_client;

        dprintf(("nfs_1", "allocate_client(%s, %lu, %lu)\n", host_name, program, version));

        /*
        	Don't ever re-use mount, pcnfs or rquota clients.  If the
       		server gets rebooted the whole thing ceases to work.
        */
        if (program != NFS_PROGRAM)
        {
                junk_clients(clients);
        }


        /*
                Enumerate NFS clients, trying to find one which is available for use
        */
        for ( link = clients->forwards;
                link->forwards;
                link = link->forwards )
        {
                try_client = Link_Wrapper( link );

                if ( !try_client->in_use )
                {
                        /*
                                Found one, use it
                        */
                        try_client->in_use = Yes;

                        if ( auth )
                                try_client->client->cl_auth = auth;

			clnt_control(try_client->client, CLSET_TIMEOUT, &TIMEOUT);
        		clnt_control(try_client->client, CLSET_RETRY_TIMEOUT, &TIMERETRY);

                        *clientp = try_client;

                        try_client->program = program;
                        try_client->version = version;

                        return NULL;
                }
        }

        /*
                None available, create a new one
        */
        try_client = (unused_client *)malloc( sizeof( *try_client ));

        if ( try_client == NULL )
        {
                return mb_malloc_failed;
        }

        try_client->in_use = Yes;
        try_client->program = program;
        try_client->version = version;

        pmap_set_tot_timeout( TIMEOUT );


        try_client->client = clnt_create( host_name, program, version, protocol );


        if ( try_client->client == NULL )
        {
                free( try_client );

                return clntcreate_to_riscos_err();
        }

        clnt_control(try_client->client, CLSET_TIMEOUT, &TIMEOUT);
        clnt_control(try_client->client, CLSET_RETRY_TIMEOUT, &TIMERETRY);

        /*
                Attach it to NFS client pool for this host
        */
        insert_before_header( &try_client->link, try_client, clients );

        /*
                Set its auth for this transaction
        */
        if ( auth )
                try_client->client->cl_auth = auth;

        *clientp = try_client;


        return NULL;
}

/*
        Construct an unused nfs client for a mount point
*/
_kernel_oserror *get_nfs_client_for_mp
(
        unused_client **nfs_clientp,
        MountPoint *mount_point
)
{
        return allocate_client
        (
                nfs_clientp,
                &mount_point->host->nfs_clients,
                mount_point->host->host_name,
                NFS_PROGRAM,
                mount_point->host->nfs_version,
                NFS_PROTOCOL,
                mount_point->user->authorisation
        );
}

/*
        Construct an unused mount client for a mount point
*/
_kernel_oserror *get_mount_client_for_mp
(
        unused_client **mount_clientp,
        MountPoint *mount_point
)
{
        return allocate_client
        (
                mount_clientp,
                &mount_point->host->mount_clients,
                mount_point->host->host_name,
                MOUNTPROG,
                mount_point->host->nfs_version == NFS_V3 ? MOUNTVERS3 : MOUNTVERS,
                MOUNTPROTO,
                mount_point->user->authorisation
        );
}

/*
        Construct an unused pcnfsd client for a host
*/
_kernel_oserror *get_pcnfsd_client_for_host
(
        unused_client **pcnfsd_clientp,
        Host *host,
        u_long version
)
{
        return allocate_client
        (
                pcnfsd_clientp,
                &host->pcnfsd_clients,
                host->host_name,
                PCNFSDPROG,
                version,
                PCNFSDPROTO,
                NULL
        );
}

/*
        Get a client for a quota rpc
*/
_kernel_oserror *get_quota_client
(
        unused_client **quota_clientp,
        MountPoint *mount_point
)
{
        return allocate_client
        (
                quota_clientp,
                &mount_point->host->quota_clients,
                mount_point->host->host_name,
                RQUOTAPROG,
                RQUOTAVERS,
                RQUOTAPROTO,
                mount_point->user->authorisation
        );
}


/*
	Determine whether a remote machine supports NFS3
 */
_kernel_oserror *initialise_nfs_version
(
	Host *host
)
{
        Chain_Header chd1;
        Chain_Header chd2;
        _kernel_oserror *e;
        unused_client *uc_mnt, *uc_nfs;
        u_long version = NFS_VERSION;
        char clnt_res;
        enum clnt_stat res;

        initialise_header(&chd1);
        initialise_header(&chd2);
        e = allocate_client(&uc_mnt, &chd1, host->host_name, MOUNTPROG, MOUNTVERS3, MOUNTPROTO, authnone_create());
        if (e && rpc_createerr.cf_stat == RPC_PROGNOTREGISTERED) {
                e = NULL;
        }
        else if (e == NULL) {
        	e = allocate_client(&uc_nfs, &chd2, host->host_name, NFS_PROGRAM, NFS_V3, NFS_PROTOCOL, authnone_create());
	        if (e == NULL) {
	                res = clnt_call(uc_mnt->client, MOUNTPROC_NULL, xdr_void, NULL, xdr_void, &clnt_res, TIMEOUT);
	                dprintf(("nfs_1", "Trying mount(3) ... %d\n", res));
	                if (res == RPC_SUCCESS || res == RPC_PROGUNAVAIL || res == RPC_PROGNOTREGISTERED) {
	                        res = clnt_call(uc_nfs->client, NFSPROC3_NULL, xdr_void, NULL, xdr_void, &clnt_res, TIMEOUT);
	                        dprintf(("nfs_1", "Trying nfs(3) ... %d\n", res));
	                        if (res == RPC_SUCCESS || res == RPC_PROGUNAVAIL || res == RPC_PROGNOTREGISTERED) {
	                                version = NFS_V3;
	                        }
	                        else {
	                                e = general_rpcthingy_to_riscos_err(NULL, uc_nfs->client, "NFS version", NULL, NULL);
	                        }
	                }
	                else {
	                        e = general_rpcthingy_to_riscos_err(NULL, uc_mnt->client, "Mount version", NULL, NULL);
	                }
	                if (res == RPC_PROGVERSMISMATCH) {
	                        /* Use NFS2 */
	                        e = NULL;
	                }
	                release_client(uc_nfs);
        	}
                release_client(uc_mnt);
        }
        junk_clients(&chd1);
        junk_clients(&chd2);
        host->nfs_version = version;
        return e;
}

/*
        Determine whether a remote machine supports PCNFS2 or just PCNFS1
 */
_kernel_oserror *initialise_pcnfs_version
(
        Host *host
)
{
        Chain_Header chd1;
        _kernel_oserror *e;
        unused_client *uc_pcnfs;
        u_long version = PCNFSDVERS;

        initialise_header(&chd1);
        e = allocate_client(&uc_pcnfs, &chd1, host->host_name, PCNFSDPROG, PCNFSDV2, PCNFSDPROTO, authnone_create());
        if (e && rpc_createerr.cf_stat == RPC_PROGNOTREGISTERED) {
                e = NULL;
        }
        else if (e == NULL) {
                char clnt_res;
                enum clnt_stat stat;

                stat = clnt_call(uc_pcnfs->client, PCNFSD2_NULL, xdr_void, NULL, xdr_void, &clnt_res, TIMEOUT);
                dprintf(("nfs_1", "Trying mount(3) ... %d\n", stat));
                if (stat == RPC_SUCCESS || stat == RPC_PROGUNAVAIL || stat == RPC_PROGNOTREGISTERED) {
                        version = PCNFSDV2;
                }
                else if (stat == RPC_PROGVERSMISMATCH) {
                        /* Stick with version 1 */
                }
                else {
                        e = general_rpcthingy_to_riscos_err(NULL, uc_pcnfs->client, "PCNFS version", NULL, NULL);
                }
                release_client(uc_pcnfs);
        }
        junk_clients(&chd1);
        host->pcnfs_version = version;
        return e;
}
@


4.8
log
@  Improvement to enable directories that the NFS server refuses to
    serve to be viewed.
Detail:
  Recent versions of the NFS module are more insistent than earlier ones
    that the server divulge the object attributes for each object that
    the module finds out about *without error*.  Previously, errors were
    simply ignored.  Now they are flagged and prevent the directory
    containing the faulty object to be opened.
  The error is now ignored as it was previously.
Admin:
  Tested on desktop machine.
  Requires Filer 2.00 or later if you don't want the Filer giving weird
    error messages about unknown message file tokens when you click Menu
    over the faulty object.

Version 3.18. Tagged as 'NFS-3_18'
@
text
@d25 1
a25 1
#include "NFS.h"
@


4.7
log
@  Previous improvement to version checker broke if any target host
    did not support NFS, Mount and PCNFS.
Detail:
  The allocate_client function was throwing the RPC_PROGNOTREGISTERED
    message and not clnt_call - so I wasn't trapping that call any more
    as a result of my earlier improvements.  This error is now trapped
    too.
  Does not affect conversations with hosts which do support all three
    protocols.
Admin:
  Tested on desktop build.

Version 3.14. Tagged as 'NFS-3_14'
@
text
@d158 3
@


4.6
log
@  Changes to error handling in host record creation.
Detail:
  The functions called to establish whether a remote host supports
    PCNFSv2, Mount v3 and NFS v3 were not being very helpful with
    errors - always setting the NFS version supported to 2 on an
    error.  The functions now use clnt_call() directly so they can
    test the fn result for RPC_PROGVERSMISMATCH and only revert
    the version number in that case and generate real errors in other
    failure cases (e.g. Escape)
  Group names blanked out on creation of UserSpecification objects.
    Data was being left uninitialised if the group name was unavailable
    which screwed up the output of *NFSInfo.
Admin:
  Tested against an NFS2 only server and an NFS3 capable server.
  Correct reporting of Escape requires changes to TCPIPLibs (rpclib).
    These are ongoing.

Version 3.13. Tagged as 'NFS-3_13'
@
text
@d318 2
d513 4
a516 1
        if (e == NULL) {
d520 2
a521 1
	                if (res == RPC_SUCCESS) {
d523 2
a524 1
	                        if (res == RPC_SUCCESS) {
d563 4
a566 1
        if (e == NULL) {
d571 2
a572 1
                if (stat == RPC_SUCCESS) {
@


4.5
log
@  Fixed potential use of uninitialised pointer.
Detail:
  If the LOOKUP remote procedure chose not to supply the optional
    object attributes in its result, the attribute pointer would
    remain uninitialised and be treated as safe to use.  This can
    no longer occur.
  All but the unused static rcsid variable compile warnings removed.
Admin:
  Requires AsmUtils 0.06 or later.
  Requires Library 0.39 or later (for rpcgen 0.03 or later)
  Built and tested on Risc PC.

Version 3.07. Tagged as 'NFS-3_07'
@
text
@d72 2
a73 1
              	return mb_escape;
d495 1
a495 1
u_long initialise_nfs_version
d505 2
d514 4
a517 2
	                if (mountproc_null_3(NULL, uc_mnt->client) != NULL) {
	                        if (nfsproc3_null_3(NULL, uc_nfs->client) != NULL) {
d520 10
d538 1
a538 1
        return version;
d544 1
a544 1
u_long initialise_pcnfs_version
d557 5
a561 1
                if (pcnfsd2_null_2(NULL, uc_pcnfs->client) != NULL) {
d564 6
d574 1
a574 1
        return version;
@


4.4
log
@  Now uses PCNFS version 2 to authenticate.
Detail:
  Group-writable directories should now be writable to.
  setgid directories should cause created objects to take on
    the directory group ownership instead of the user's primary
    GIF
  *NFSInfo output enhanced to list all the additional group IDs
    and the default umask being applied to each authentication.
Admin:
  Tested on normal home mount and on TWC mount.

Version 3.05. Tagged as 'NFS-3_05'
@
text
@d63 5
d80 5
@


4.3
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d443 2
a444 1
        Host *host
d453 1
a453 1
                PCNFSDVERS,
d513 26
@


4.2
log
@Module NFSSTB committed by srcmerge.
Merged from Spin_merge to Spinner.
Merge tag prefix is Spinner_23Sep1998
@
text
@d28 2
d87 1
a87 1
        case NFS_OK:
d90 1
a90 1
        case NFSERR_PERM:
d93 1
a93 1
        case NFSERR_NOENT:
d96 1
a96 1
        case NFSERR_IO:
d99 1
a99 1
        case NFSERR_NXIO:
d102 1
a102 1
        case NFSERR_ACCES:
d105 1
a105 1
        case NFSERR_EXIST:
d108 1
a108 1
        case NFSERR_NODEV:
d111 1
a111 1
        case NFSERR_NOTDIR:
d114 1
a114 1
        case NFSERR_ISDIR:
d117 1
a117 1
        case NFSERR_FBIG:
d120 1
a120 1
        case NFSERR_NOSPC:
d123 1
a123 1
        case NFSERR_ROFS:
d126 1
a126 1
        case NFSERR_NAMETOOLONG:
d129 1
a129 1
        case NFSERR_NOTEMPTY:
d132 1
a132 1
        case NFSERR_DQUOT:
d135 1
a135 1
        case NFSERR_REMOTE:
d138 1
a138 1
        case NFSERR_STALE:
d144 1
a144 1
        case NFSERR_INVAL:
d160 2
a161 2
	'nfs_client' is a pointer to the RPC client handle on which the error occurred.  
	This is used to obtain the RPC error status that was stored by the RPC library. 
d165 1
a165 1
	
d200 1
a200 1
        
d290 1
a290 1
        client->in_use = No;
d307 9
d341 3
d359 2
d410 1
a410 1
                NFS_VERSION,
d431 1
a431 1
                MOUNTVERS,
d474 1
a474 1
                "udp",
d477 36
@


4.1
log
@Initial revision
@
text
@d21 2
d65 1
a65 1
                return mb_escape;
d152 19
d198 1
a198 1

d324 3
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Add comments on usage of rpcnfs_to_riscos_err (was used incorrectly).
@
text
@a20 1
   04-Mar-97 jmf - add comments on usage of rpcnfs_to_riscos_err (was used incorrectly)
d63 1
a63 1
              	return mb_escape;
a149 19

	'res' points to the return value of the NFS procedure, or NULL if the RPC failed.

	'mount_point' is the NFS mount on which the operation was being attempted.  This is
	used to obtain the name of the mount for inclusion in the error message for some cases.

	'nfs_client' is a pointer to the RPC client handle on which the error occurred.  
	This is used to obtain the RPC error status that was stored by the RPC library. 


	NOTE: There are two cases in which this routine is used:
	
	a) The remote NFS procedure returned an NFS error.  The error is pointed to by
	   'res', and 'nfs_client' is not used.

	b) The RPC itself failed (status != RPC_SUCCESS) and so the NFS result is
	   not set.  In this case, 'res' MUST be passed as NULL, and 'nfs_client'
	   is then used to obtain the RPC error information.

d177 1
a177 1
        
@


4.1.7.3
log
@Fix bug of *NFS:timeout not affecting pre-allocated clients.
@
text
@a21 1
   29-Apr-97 jmf - fix bug of *NFS:timeout not taking effect for pre-alloctaed clients
a322 3

			clnt_control(try_client->client, CLSET_TIMEOUT, &TIMEOUT);
        		clnt_control(try_client->client, CLSET_RETRY_TIMEOUT, &TIMERETRY);
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
