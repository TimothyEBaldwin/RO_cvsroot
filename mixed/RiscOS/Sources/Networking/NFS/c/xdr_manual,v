head	4.2;
access;
symbols
	NFS-3_27:4.2
	NFS-3_26:4.2
	NFS-3_25:4.2
	NFS-3_24:4.2
	NFS-3_23:4.2
	NFS-3_22:4.1
	NFS-3_21:4.1
	NFS-3_20:4.1
	NFS-3_19:4.1
	sbrodie_NFS_dev_merge:4.1
	NFS-3_18-4_22_2_4:4.1
	NFS-3_18-4_22_2_3:4.1
	NFS-3_18-4_22_2_2:4.1
	NFS-3_18-4_22_2_1:4.1
	sbrodie_NFS_dev:4.1.0.2
	sbrodie_NFS_dev_bp:4.1
	NFS-3_18:4.1
	NFS-3_17:4.1
	NFS-3_16:4.1
	NFS-3_15:4.1
	NFS-3_14:4.1
	NFS-3_13:4.1
	NFS-3_12:4.1
	NFS-3_11:4.1
	NFS-3_10:4.1;
locks; strict;
comment	@# @;


4.2
date	2018.01.29.21.30.19;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	7TGUL0NEVVbjHOoA;

4.1
date	2000.03.29.14.49.00;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Please do not delete this file.
 * It was NOT NOT NOT generated using rpcgen.
 */

#include <rpc/types.h>
#include <rpc/xdr.h>
#include <string.h>

#include "nfs_prot.h"

bool_t
xdr_entry(xdrs, objp)
        XDR *xdrs;
        entry *objp;
{
        bool_t more_data;
        caddr_t loc;
        bool_t is_first_time_round = (TRUE);

        do {
                if (!xdr_u_int(xdrs, &objp->fileid)) {
                        return (FALSE);
                }
                if (!xdr_filename(xdrs, &objp->name)) {
                        return (FALSE);
                }
                if (!xdr_nfscookie(xdrs, objp->cookie)) {
                        return (FALSE);
                }


                more_data = (objp->nextentry != NULL);
                if (! xdr_bool(xdrs,&more_data)) {
                        return (FALSE);
                }

                loc = (caddr_t)objp;

                if (! more_data) {
                        objp->nextentry = NULL;
                } else {
                        if (xdrs->x_op == XDR_DECODE && objp->nextentry == NULL) {
                                objp->nextentry = (entry *) mem_alloc(sizeof(entry));
                                if (objp->nextentry == NULL) {
                                        (void) fprintf(stderr,
                                            "xdr_reference: out of memory\n");
                                        return (FALSE);
                                }
                                memset(objp->nextentry, '\0', sizeof(entry));
                        }

                        objp = objp->nextentry;
                }

                if (xdrs->x_op == XDR_FREE && !is_first_time_round) {
                        mem_free(loc, sizeof(entry));
                }

                is_first_time_round = (FALSE);
        } while( more_data );

        return (TRUE);
}

bool_t
xdr_entry3(xdrs, objp)
        XDR *xdrs;
        entry3 *objp;
{
        bool_t more_data;
        caddr_t loc;
        bool_t is_first_time_round = (TRUE);

        do {
                if (!xdr_fileid3(xdrs, &objp->fileid)) {
                        return (FALSE);
                }
                if (!xdr_filename3(xdrs, &objp->name)) {
                        return (FALSE);
                }
                if (!xdr_cookie3(xdrs, &objp->cookie)) {
                        return (FALSE);
                }


                more_data = (objp->nextentry != NULL);
                if (! xdr_bool(xdrs,&more_data)) {
                        return (FALSE);
                }

                loc = (caddr_t)objp;

                if (! more_data) {
                        objp->nextentry = NULL;
                } else {
                        if (xdrs->x_op == XDR_DECODE && objp->nextentry == NULL) {
                                objp->nextentry = (entry3 *) mem_alloc(sizeof(entry3));
                                if (objp->nextentry == NULL) {
                                        (void) fprintf(stderr,
                                            "xdr_reference: out of memory\n");
                                        return (FALSE);
                                }
                                memset(objp->nextentry, '\0', sizeof(entry3));
                        }

                        objp = objp->nextentry;
                }

                if (xdrs->x_op == XDR_FREE && !is_first_time_round) {
                        mem_free(loc, sizeof(entry3));
                }

                is_first_time_round = (FALSE);
        } while( more_data );

        return (TRUE);
}

bool_t
xdr_entryplus3(xdrs, objp)
        XDR *xdrs;
        entryplus3 *objp;
{
        bool_t more_data;
        caddr_t loc;
        bool_t is_first_time_round = (TRUE);

        do {
                if (!xdr_fileid3(xdrs, &objp->fileid)) {
                        return (FALSE);
                }
                if (!xdr_filename3(xdrs, &objp->name)) {
                        return (FALSE);
                }
                if (!xdr_cookie3(xdrs, &objp->cookie)) {
                        return (FALSE);
                }
                if (!xdr_post_op_attr(xdrs, &objp->name_attributes)) {
                        return (FALSE);
                }
                if (!xdr_post_op_fh3(xdrs, &objp->name_handle)) {
                        return (FALSE);
                }


                more_data = (objp->nextentry != NULL);
                if (! xdr_bool(xdrs,&more_data)) {
                        return (FALSE);
                }

                loc = (caddr_t)objp;

                if (! more_data) {
                        objp->nextentry = NULL;
                } else {
                        if (xdrs->x_op == XDR_DECODE && objp->nextentry == NULL) {
                                objp->nextentry = (entryplus3 *) mem_alloc(sizeof(entryplus3));
                                if (objp->nextentry == NULL) {
                                        (void) fprintf(stderr,
                                            "xdr_reference: out of memory\n");
                                        return (FALSE);
                                }
                                memset(objp->nextentry, '\0', sizeof(entryplus3));
                        }

                        objp = objp->nextentry;
                }

                if (xdrs->x_op == XDR_FREE && !is_first_time_round) {
                        mem_free(loc, sizeof(entryplus3));
                }

                is_first_time_round = (FALSE);
        } while( more_data );

        return (TRUE);
}
@


4.1
log
@  Flattened some of the automatically generated XDR routines.
  More debugging added to the NFS2 compatibility directory reading code.
Detail:
  Ever since I reverted to using the automatically generated XDR code for
    the NFS, Mount, PCNFS and rquota protocols, NFS2 support has been
    problematic.  This has been traced to an SVC stack overflow due to
    the recursive implementation of the directory entry encode/decode
    functions.  NFS 2.xx had an iterative replacement, presumably to
    solve just this problem.  NFS 3.xx now has iterative versions of
    xdr_entry, xdr_entry3 and xdr_entryplus3 in xdr_manual.c, and the
    Makefile will post-process nfs_prot_xdr.c to remove the definitions
    before the file is compiled, in order to avoid duplicated symbols.
  NFS2 directory enumeration code has much more debugging, plus the
    same null pointer to cookie fixes that went in a recent version of
    the NFS3 directory enumeration code.
Admin:
  Tested against NFS2 server which caused the machine to stiff with
    earlier versions: it now works.

Version 3.10. Tagged as 'NFS-3_10'
@
text
@d24 1
a24 1
#include "h.nfs_prot"
@

