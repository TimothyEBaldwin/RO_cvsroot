head	4.4;
access;
symbols
	NFS-3_27:4.4
	NFS-3_26:4.4
	NFS-3_25:4.4
	NFS-3_24:4.3
	NFS-3_23:4.3
	NFS-3_22:4.2
	NFS-3_21:4.2
	NFS-3_20:4.2
	NFS-3_19:4.2
	sbrodie_NFS_dev_merge:4.2
	NFS-3_18-4_22_2_4:4.2
	NFS-3_18-4_22_2_3:4.2
	NFS-3_18-4_22_2_2:4.2
	NFS-3_18-4_22_2_1:4.2
	sbrodie_NFS_dev:4.2.0.2
	sbrodie_NFS_dev_bp:4.2
	NFS-3_18:4.2
	NFS-3_17:4.2
	NFS-3_16:4.2
	NFS-3_15:4.2
	NFS-3_14:4.2
	NFS-3_13:4.2
	NFS-3_12:4.2
	NFS-3_11:4.2
	NFS-3_10:4.2
	NFS-3_09:4.2
	NFS-3_08:4.2
	NFS-3_07:4.2
	NFS-3_06:4.2
	NFS-3_05:4.2
	NFS-3_04:4.2
	NFS-3_02:4.2
	NFS-3_01:4.2
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.4
date	2018.03.07.21.22.40;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	sKJZhgBEKf2WsztA;

4.3
date	2018.01.29.21.30.18;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	7TGUL0NEVVbjHOoA;

4.2
date	99.05.14.12.42.07;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.30;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.30;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.50;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Store lxa files verbatim, without appendum
Files saved with load & exec address (as opposed to a filetype and the top nybble of load set to 0xFFF) would be extended by 8 bytes in order to hide the true load/exec for later retrieval.
While useful if only ever saving and retrieving from the RISC OS viewpoint, it would create apparently corrupt or overlong file if you wanted to do any analysis on the NFS server end. Given load/exec addresses are deprecated, change NFS to behave like LanManFS and just denote ",lxa" suffixed files with the appropriate icon in the Filer and a made up load/exec address.

pathmunge.c/_GBPB.c/V2support.c/_Args.c/_File.c/PutBytesX.c/Static.c/Changeinfo.c: Switch out 8 byte appending code. Give the file a proper date stamp instead when viewed on Unix.
_Open.c: Switch out the 8 byte appendum stuff, and use a common OS_Word 14 clock function.
Statics.h/Modulewrap.c: Compute a substitute load/exec using the same algorithm as LanManFS (the Kernel's address rounded down to 1MB). Use cmhg finalise function instead of atexit().

Also
MakeFile: pass in predefine DEBUG for debug builds.
cmhg/NFSHdr: remove *Histogram debug command except when debugging. Add finalise handler.
Commands.c/Commands.h: remove *Histogram debug command except when debugging.
Utils.c: delete unused long long support functions. Add a new time getting support function.
Utils.h: new time getting support function.

Tested with a handful of area saves using *Save, checking the file size when viewed at the server end was correct not 8 bytes longer.

Version 3.25. Tagged as 'NFS-3_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*	PUTBYTESX

Purpose :

History :
Date	Who    Comments
-----------------------------------------------------------------------------

10/02/95  CP    Added code to increment network access counter

****************************************************************************/

#ifndef __NFSNFS_H
#include "nfsheaders.h"
#endif

#ifdef NETACCESSCOUNT
extern unsigned int NetAccessCountG;
#endif

/* static struct timeval TIMEOUT = { 25, 0 };  */
#include "TimeOut.h"

#ifdef LXA_BY_APPENDUM
/*
 * XDR counted bytes with appendum on end.
 * *cpp is a pointer to the struct, *sizep is the count.
 */
static bool_t xdr_bytes_with_appendum
(
        XDR *xdrs,
        bytes_with_appendum **cpp,
        u_int *sizep,
        u_int maxsize
)
{
        bytes_with_appendum *bwa;
        static bytes_with_appendum retstruct;
        char transfer_buffer[ BYTES_PER_XDR_UNIT + sizeof( appendum ) ];
        u_int nodesize;
#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 3;     /* entering NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif

        switch( xdrs->x_op )
        {
        case XDR_ENCODE:
                bwa = *cpp;

                /*
                        Size too much?
                */
                if ( *sizep > maxsize )
                        return FALSE;

                /*
                        nodesize is the total size of the bytes with the appendum
                */
                nodesize = *sizep + sizeof( appendum );

                /*
                        Transfer the nodesize
                */
                if ( !xdr_u_int( xdrs, &nodesize ) )
                        return FALSE;

                /*
                        Transfer the bulk in one lump as a whole multplie of the XDR unit size.
                        This will ensure no packing is placed between the bytes and the appendum.
                */
#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* returning to other people's code */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                if ( !xdr_opaque( xdrs, bwa->bytes, *sizep & ~(BYTES_PER_XDR_UNIT-1) ) )
                        return FALSE;

#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 3;     /* entering NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                /*
                        Copy the remainder of the bytes to the transfer buffer
                */
                memcpy( &transfer_buffer[ 0 ],
                        bwa->bytes + (*sizep & ~(BYTES_PER_XDR_UNIT-1)),
                        *sizep & (BYTES_PER_XDR_UNIT-1) );

                /*
                        Copy the appendum to the transfer buffer
                */
                memcpy( &transfer_buffer[ *sizep & (BYTES_PER_XDR_UNIT-1) ],
                        &bwa->bit_on_the_end,
                        sizeof( appendum ));

                /*
                        Encode the transfer buffer, which may have some packing on the end
                */
#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* returning to other people's code */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                if ( !xdr_opaque( xdrs, transfer_buffer, (*sizep & (BYTES_PER_XDR_UNIT-1)) + sizeof( appendum )) )
                        return FALSE;

                return TRUE;
                break;

        case XDR_DECODE:
                *cpp = bwa = &retstruct;

                /*
                        Get the total number of bytes
                */
                if ( !xdr_u_int( xdrs, &nodesize ) )
                        return FALSE;

                *sizep = nodesize - sizeof( appendum );

                if ( *sizep > maxsize )
                        return FALSE;

                /*
                        Get some memory to put the bytes
                */
                if ( (bwa->bytes = (char *)mem_alloc( *sizep )) == NULL )
                        return FALSE;

                /*
                        Get the bulk of the opaque data, as a number of XDR units to circumvent packing problems
                */
                if ( !xdr_opaque( xdrs, bwa->bytes, *sizep & ~(BYTES_PER_XDR_UNIT-1) ) )
                        return FALSE;

                /*
                        Get the rest of the data into the transfer buffer
                */
                if ( !xdr_opaque( xdrs, transfer_buffer, (*sizep & (BYTES_PER_XDR_UNIT-1)) + sizeof( appendum ) ) )
                        return FALSE;

                /*
                        Move the bytes residue to the required destination
                */
                memcpy( bwa->bytes + (*sizep & ~(BYTES_PER_XDR_UNIT-1)), transfer_buffer, (*sizep & (BYTES_PER_XDR_UNIT-1)) );
                /*
                        Move the appendum to the required location
                */
                memcpy( &bwa->bit_on_the_end, transfer_buffer + (*sizep & (BYTES_PER_XDR_UNIT-1)), sizeof( appendum ) );

#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* leaving NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                return TRUE;
                break;

        case XDR_FREE:
                bwa = *cpp;

                if ( bwa->bytes )
                {
                        mem_free( bwa->bytes, *sizep );
                        bwa->bytes = NULL;
                }

#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* leaving NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                return TRUE;
                break;
        }

#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* leaving NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
        return FALSE;
}

bool_t xdr_writeargs_with_appendum
(
        XDR *xdrs,
        writeargs_with_appendum *objp
)
{
        if (!xdr_nfs_fh(xdrs, &objp->file)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->beginoffset)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->offset)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->totalcount)) {
                return (FALSE);
        }
        if (!xdr_bytes_with_appendum(xdrs, (bytes_with_appendum **)&objp->data.data_val, (u_int *)&objp->data.data_len, NFS_MAXDATA)) {
                return (FALSE);
        }
        return (TRUE);
}

static bool_t xdr_WRITE3args_with_appendum
(
        XDR *xdrs,
        WRITE3args_with_appendum *objp
)
{
	if (!xdr_nfs_fh3(xdrs, &objp->file)) {
	 	return (FALSE);
	}
	if (!xdr_offset3(xdrs, &objp->offset)) {
	 	return (FALSE);
	}
	if (!xdr_count3(xdrs, &objp->count)) {
	 	return (FALSE);
	}
 	if (!xdr_stable_how(xdrs, &objp->stable)) {
		return (FALSE);
	}
        if (!xdr_bytes_with_appendum(xdrs, (bytes_with_appendum **)&objp->data.data_val, (u_int *)&objp->data.data_len, NFS_MAXDATA)) {
                return (FALSE);
        }
        return (TRUE);
}

WRITE3res *nfsproc3_write_with_appendum_3
(
        WRITE3args_with_appendum *argp,
        unused_client *nfs_client
)
{
        static WRITE3res res;
        CLIENT *clnt = nfs_client->client;

        bzero(&res, sizeof(res));

        if (nfs_client->version != NFS_V3) {
                return nfs2_em_write_with_appendum_3( argp, clnt );
        }

#ifdef NETACCESSCOUNT
NetAccessCountG++;
#endif

        if (clnt_call(
                clnt,
                NFSPROC3_WRITE,
                xdr_WRITE3args_with_appendum,
                argp,
                xdr_WRITE3res,
                &res,
                TIMEOUT) != RPC_SUCCESS)
        {
                return (NULL);
        }

        return (&res);
}
#endif
@


4.3
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@d38 1
a38 1

a264 2


d298 1
@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d28 1
a28 1
#include "NFS.h"
@


4.1
log
@Initial revision
@
text
@d217 1
a217 1
static bool_t xdr_writeargs_with_appendum
d241 24
d266 2
a267 1
attrstat *nfsproc_write_with_appendum_2
d269 2
a270 2
        writeargs_with_appendum *argp,
        CLIENT                  *clnt
d273 2
a274 1
        static attrstat res;
d278 4
d288 2
a289 2
                NFSPROC_WRITE,
                xdr_writeargs_with_appendum,
d291 1
a291 1
                xdr_attrstat,
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
