head	4.5;
access;
symbols
	NFS-3_27:4.5
	NFS-3_26:4.5
	NFS-3_25:4.5
	NFS-3_24:4.5
	NFS-3_23:4.5
	NFS-3_22:4.4
	NFS-3_21:4.4
	NFS-3_20:4.4
	NFS-3_19:4.4
	sbrodie_NFS_dev_merge:4.4
	NFS-3_18-4_22_2_4:4.4
	NFS-3_18-4_22_2_3:4.4
	NFS-3_18-4_22_2_2:4.4
	NFS-3_18-4_22_2_1:4.4
	sbrodie_NFS_dev:4.4.0.2
	sbrodie_NFS_dev_bp:4.4
	NFS-3_18:4.4
	NFS-3_17:4.4
	NFS-3_16:4.4
	NFS-3_15:4.3
	NFS-3_14:4.3
	NFS-3_13:4.3
	NFS-3_12:4.3
	NFS-3_11:4.3
	NFS-3_10:4.3
	NFS-3_09:4.3
	NFS-3_08:4.2
	NFS-3_07:4.2
	NFS-3_06:4.2
	NFS-3_05:4.2
	NFS-3_04:4.2
	NFS-3_02:4.2
	NFS-3_01:4.2
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.5
date	2018.01.30.09.05.21;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	Hg37nwvmck2nxSoA;

4.4
date	2000.07.10.11.24.25;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	2000.03.20.15.52.16;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.05.14.12.42.14;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.26;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.26;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.28;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Build fix
Some lingering references to renamed header NFS.h remained in nested headers, renamed.
Retagged as NFS-3_23.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* check object access permissions
 *
 * 28/7/92 by JRS
 */


#include "nfsheaders.h"
#include "access.h"

bool_t access_Icanread(MountPoint *mount, fattr3 *attrib)
{
        mode3 mode = attrib->mode;

        dprintf(("access_1", "access_Icanread: %lo (uid %ld %ld) (gid %ld %ld)\n",
                mode, mount->user->uid, attrib->uid,
                mount->user->gid, attrib->gid));

        if (mount->user->uid == attrib->uid)
                return (bool_t) (mode&NFSMODE_USER_READ);

        else if (mount->user->gid == attrib->gid)
                return (bool_t) (mode&NFSMODE_GROUP_READ);

        else if (mount->user->len > 0)
        {
                int i;

                for ( i = 0; i < mount->user->len ; ++i )
                        if ( attrib->gid == mount->user->gids[ i ] )
                                return (bool_t) (mode&NFSMODE_GROUP_READ);
        }

        return (bool_t) (mode&NFSMODE_OTHERS_READ);
}

bool_t access_Icanwrite(MountPoint *mount, fattr3 *attrib)
{
        mode3 mode = attrib->mode;

        dprintf(("access_1", "access_Icanwrite: %lo (uid %ld %ld) (gid %ld %ld)\n",
                mode, mount->user->uid, attrib->uid,
                mount->user->gid, attrib->gid));

        if (mount->user->uid == attrib->uid)
                return (bool_t) (mode&NFSMODE_USER_WRITE);

        else if (mount->user->gid == attrib->gid)
                return (bool_t) (mode&NFSMODE_GROUP_WRITE);

        else if (mount->user->len > 0)
        {
                int i;

                for ( i = 0; i < mount->user->len ; ++i )
                        if ( attrib->gid == mount->user->gids[ i ] )
                                return (bool_t) (mode&NFSMODE_GROUP_WRITE);
        }

        return (bool_t) (mode&NFSMODE_OTHERS_WRITE);
}

int access_nfs_to_riscos(MountPoint *mount, fattr3 *attrib)
{
        mode3 mode = attrib->mode;
        int roattr = 0, matched_ownership = 0;

        if (mount->user->uid == attrib->uid)
        {
                matched_ownership = 1;
                if (mode & NFSMODE_USER_READ)  roattr |= FileAccess_OwnerRead;
                if (mode & NFSMODE_USER_WRITE) roattr |= FileAccess_OwnerWrite;
        }

        else if (mount->user->gid == attrib->gid)
        {
                matched_ownership = 1;
                if (mode & NFSMODE_GROUP_READ)  roattr |= FileAccess_OwnerRead;
                if (mode & NFSMODE_GROUP_WRITE) roattr |= FileAccess_OwnerWrite;
        }

        else if (mount->user->len > 0)
        {
                int i;

                for ( i = 0; i < mount->user->len ; ++i )
                        if ( attrib->gid == mount->user->gids[ i ] )
                        {
                                matched_ownership = 1;
                                if (mode & NFSMODE_GROUP_READ)  roattr |= FileAccess_OwnerRead;
                                if (mode & NFSMODE_GROUP_WRITE) roattr |= FileAccess_OwnerWrite;
                        }
        }

        if ( !matched_ownership )
        {
                if (mode & NFSMODE_OTHERS_READ)  roattr |= FileAccess_OwnerRead;
                if (mode & NFSMODE_OTHERS_WRITE) roattr |= FileAccess_OwnerWrite;
        }

        if (mode & NFSMODE_OTHERS_READ)  roattr |= FileAccess_PublicRead;
        if (mode & NFSMODE_OTHERS_WRITE) roattr |= FileAccess_PublicWrite;

        return roattr;
}
@


4.4
log
@  Fixed RISC OS Owner permission settings.
Detail:
  The RISC OS Owner permission settings are now taken from the World
    attribute settings if none of the user or group ownerships match.
    Thus the RISC OS owner permissions more accurately reflect what
    the user can do with the object.
Admin:
  Tested briefly.

Version 3.16. Tagged as 'NFS-3_16'
@
text
@d21 1
@


4.3
log
@  Access permission code overhaul.
  Supplementary group code improved.
Detail:
  *NFSInfo now shows the group names as well as the group IDs for
    both your primary and supplementary GIDs.
  access.c now uses the supplementary GIDs to help determine whether
    or not you are allowed to read/write a file.
  access.c now provides the NFS->RISC OS attribute mapping - "Owner"
    attributes being UNIX's user/group access; "Public" being the
    UNIX other access.
  The end result of these changes should be that your access rights to
    any object on the NFS server should match those you would expect
    from a UNIX shell logged in with the same ACLs as those you get
    via PCNFS.
Admin:
  Tested on Risc PC.

Version 3.09. Tagged as 'NFS-3_09'
@
text
@d78 1
a78 1
        int roattr = 0;
d82 1
d89 1
d101 1
d105 6
@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d27 4
d37 10
a46 2
        else
                return (bool_t) (mode&NFSMODE_OTHERS_READ);
d53 4
d63 45
a107 2
        else
                return (bool_t) (mode&NFSMODE_OTHERS_WRITE);
@


4.1
log
@Initial revision
@
text
@d23 1
a23 1
bool_t access_Icanread(MountPoint *mount, fattr *attrib)
d25 1
a25 1
        unsigned mode = attrib->mode;
d28 1
a28 1
                return (mode&NFSMODE_USER_READ);
d31 1
a31 1
                return (mode&NFSMODE_GROUP_READ);
d34 1
a34 1
                return (mode&NFSMODE_OTHERS_READ);
d37 1
a37 1
bool_t access_Icanwrite(MountPoint *mount, fattr *attrib)
d39 1
a39 1
        unsigned mode = attrib->mode;
d42 1
a42 1
                return (mode&NFSMODE_USER_WRITE);
d45 1
a45 1
                return (mode&NFSMODE_GROUP_WRITE);
d48 1
a48 1
                return (mode&NFSMODE_OTHERS_WRITE);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
