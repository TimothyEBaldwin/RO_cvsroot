head	4.3;
access;
symbols
	NFS-3_27:4.3
	NFS-3_26:4.3
	NFS-3_25:4.3
	NFS-3_24:4.3
	NFS-3_23:4.3
	NFS-3_22:4.2
	NFS-3_21:4.2
	NFS-3_20:4.2
	NFS-3_19:4.2
	sbrodie_NFS_dev_merge:4.2
	NFS-3_18-4_22_2_4:4.2
	NFS-3_18-4_22_2_3:4.2
	NFS-3_18-4_22_2_2:4.2
	NFS-3_18-4_22_2_1:4.2
	sbrodie_NFS_dev:4.2.0.2
	sbrodie_NFS_dev_bp:4.2
	NFS-3_18:4.2
	NFS-3_17:4.2
	NFS-3_16:4.2
	NFS-3_15:4.2
	NFS-3_14:4.2
	NFS-3_13:4.2
	NFS-3_12:4.2
	NFS-3_11:4.2
	NFS-3_10:4.2
	NFS-3_09:4.2
	NFS-3_08:4.2
	NFS-3_07:4.2
	NFS-3_06:4.2
	NFS-3_05:4.2
	NFS-3_04:4.2
	NFS-3_02:4.1
	NFS-3_01:4.1
	NFS-3_00:4.1;
locks; strict;
comment	@# @;


4.3
date	2018.01.29.21.30.19;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	7TGUL0NEVVbjHOoA;

4.2
date	99.11.29.13.39.34;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	99.05.14.12.42.18;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:    memory.c
 * Purpose: Memory allocation for Toolbox module
 * Author:  Kevin Bracey
 * History: 22-Nov-96: KJB:   created
 *          21-Apr-99: SNB:   adapted for NFS module
 *
 */


#include <string.h>
#include <stddef.h>
#include <stdlib.h>
#include "swis.h"
#include "kernel.h"

#include "memory.h"
#include "AsmUtils/heapswis.h"

#include "rpc/types.h"

/* Declare the maximum dynamic area size.
 */
#define MAX_DA_SIZE	(8*1024*1024)

static int da_number;
static void *da_addr;
static int da_size;
static int page_size;

static _kernel_oserror *extend_heap(int req);
static void shrink_heap(void);

static _kernel_oserror *_nfs_memory_alloc(size_t size, void **pp);
static _kernel_oserror *_nfs_memory_free(void *p);

/****************************************************************************
 * memory_initialise
 *
 * Prepare the memory library for use - if DAs are available, create a
 * DA for our use.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    Page size >= 16 bytes
 *
 */
_kernel_oserror *memory_initialise(void)
{
    _kernel_oserror *e;

    da_number=-1;
    da_addr=0;
    da_size=0;

    /* Check whether we have DAs by trying an enumerate */

    if (_swix(OS_DynamicArea, _INR(0,1), 3, -1))
        return NULL;

    if ((e = _swix(OS_ReadMemMapInfo, _OUT(0), &page_size)) != NULL)
        return e;

    e = _swix(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3),
                                   0,    /* Create DA */
                                   -1,   /* Any number */
                                   page_size, /* One page initially */
                                   -1,   /* Any address */
                                   128,  /* Not draggable */
                                   MAX_DA_SIZE,
                                   0, 0, /* No handler routine */
                                   "NFS workspace",
                                   &da_number,
                                   &da_addr);

	if (e == NULL) {
	        da_size = page_size;
        	if ((e = xosheap_initialise(da_addr, da_size)) != NULL)
	        {
	            memory_finalise();
	        }
	}

    return e;
}

/****************************************************************************
 * memory_finalise
 *
 * This function shuts down the memory library, and frees our dynamic
 * area.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    Heap structure still as described in PRM
 *
 */
_kernel_oserror *memory_finalise(void)
{
    if (da_addr)
    {
            da_addr = NULL;
            return _swix(OS_DynamicArea, _INR(0,1), 1, da_number);
    }

    return NULL;
}

/****************************************************************************
 * _rpclib_malloc
 * _rpclib_free
 *
 * Parameters:
 *    As malloc and free
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    none
 *
 */
void *_rpclib_malloc(size_t size)
{
    void *p;

    return _nfs_memory_alloc(size, &p) ? NULL : p;
}

void _rpclib_free(void *p)
{
    (void) _nfs_memory_free(p);
}

/****************************************************************************
 * _nfs_memory_alloc
 *
 * This function allocates a block of memory from the RMA or our DA,
 * and zero-initialises it
 *
 * Parameters:
 *    size - the amount of memory required
 *    pp   - the result pointer to be filled in
 *
 * Result:
 *    If allocation successful, pp filled in.
 *    If unsuccessful, either pp set to zero, or an error returned
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_nfs_memory_alloc(size_t size, void **pp)
{
    void *p;
    _kernel_oserror *e;

    if (!da_addr)
    {
        *pp = calloc(size, 1);
        return NULL;
    }

    e = xosheap_alloc(da_addr, size, &p);
    if (e && e->errnum != 0x184)
        return e;

    if (e)
    {
        e = extend_heap(size);
        if (e)
            return e;

        e = xosheap_alloc(da_addr, size, &p);

        shrink_heap();

        if (e)
            return e;
    }
    if (p)
        memset(p, 0, size);

    *pp = p;

    return NULL;
}

/****************************************************************************
 * _nfs_memory_free
 *
 * This function frees a block of memory
 *
 * Parameters:
 *    p   - the block to free
 *
 * Result:
 *    If the block isn't ours, an error may be returned
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_nfs_memory_free(void *p)
{
    _kernel_oserror *e;

    if (!da_addr)
    {
        free(p);
        return NULL;
    }

    e = xosheap_free(da_addr, p);
    if (e)
        return e;

    shrink_heap();

    return NULL;
}

/****************************************************************************
 * extend_heap
 *
 * This function extends the dynamic area/heap enough to allocate at least
 * req bytes
 *
 * Parameters:
 *    req - the space we want to allocate
 *
 * Result:
 *    Returns an error if unable to allocate enough space, else
 *    the heap/dynamic area is stretched enough to fit at least for bytes
 *
 * Assumptions:
 *    The heap and da are the same size
 *
 */
static _kernel_oserror *extend_heap(int req)
{
    int heapbase = ((int *)da_addr)[2];
    _kernel_oserror *e;
    int by;
    int size = req - (da_size-heapbase) + 4;

    e = _swix(OS_ChangeDynamicArea, _INR(0,1)|_OUT(1), da_number, size, &by);
    if (e) {
        return e;
    }

    if (size < 0) {
            by = -by;
    }

    e = xosheap_resize(da_addr, by);
    if (e)
    {
        shrink_heap();
        return e;
    }

    da_size += by;

    return NULL;
}

/****************************************************************************
 * shrink_heap
 *
 * This function shrinks the dynamic area/heap as much as possible
 *
 * Parameters:
 *    none
 *
 * Result:
 *    DA shrunk
 *
 * Assumptions:
 *    The heap and da are the same size, page_size is a power of 2
 *
 */
static void shrink_heap(void)
{
    int by;
    int heapbase = ((int *)da_addr)[2];

    by = (da_size - heapbase) & ~(page_size-1);

    if (!by)
        return;

    xosheap_resize(da_addr, -by);
    _swix(OS_ChangeDynamicArea, _INR(0,1), da_number, -by);

    da_size -= by;
}

/****************************************************************************
 * mem_base_addr
 *
 * This function returns the base address of the memory allocation pool.
 * All allocated pointers will be no more than 64M beyond this address.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    memory base address
 *
 * Assumptions:
 *    none
 *
 */
void *mem_base_address(void)
{
    return da_addr;
}

/****************************************************************************
 * memory_renumber_da
 *
 *  This function is called whenever Service_DynamicAreaRenumber is received
 *  since we need to know if it was our DA that was renumbered
 *
 * Parameters:
 *    DA being renumbered
 *    New number for the DA
 *
 * Result:
 *    da_number updated.
 *
 * Assumptions:
 *    none
 */
void memory_renumber_da(int old_da, int new_da)
{
        if (old_da != da_number) return;
	da_number = new_da;
}
@


4.2
log
@  32-bit compatibility added.
  Removed obsolete assembler sources
Detail:
  Now imports assembler stuff from AsmUtils.
Admin:
  Built RAM build.
  Requires AsmUtils 0.02 or later.

Version 3.03. Tagged as 'NFS-3_03'
@
text
@d31 1
a31 1
#include "heapswis.h"
@


4.1
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d31 1
@

