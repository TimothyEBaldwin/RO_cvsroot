head	4.6;
access;
symbols
	NFS-3_27:4.6
	NFS-3_26:4.6
	NFS-3_25:4.6
	NFS-3_24:4.5
	NFS-3_23:4.5
	NFS-3_22:4.4
	NFS-3_21:4.4
	NFS-3_20:4.4
	NFS-3_19:4.4
	sbrodie_NFS_dev_merge:4.4
	NFS-3_18-4_22_2_4:4.4
	NFS-3_18-4_22_2_3:4.4
	NFS-3_18-4_22_2_2:4.4
	NFS-3_18-4_22_2_1:4.4
	sbrodie_NFS_dev:4.4.0.2
	sbrodie_NFS_dev_bp:4.4
	NFS-3_18:4.4
	NFS-3_17:4.4
	NFS-3_16:4.4
	NFS-3_15:4.4
	NFS-3_14:4.4
	NFS-3_13:4.4
	NFS-3_12:4.4
	NFS-3_11:4.4
	NFS-3_10:4.4
	NFS-3_09:4.4
	NFS-3_08:4.3
	NFS-3_07:4.3
	NFS-3_06:4.2
	NFS-3_05:4.2
	NFS-3_04:4.2
	NFS-3_02:4.2
	NFS-3_01:4.2
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.6
date	2018.03.07.21.22.40;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	sKJZhgBEKf2WsztA;

4.5
date	2018.01.29.21.30.18;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	7TGUL0NEVVbjHOoA;

4.4
date	2000.03.20.15.52.14;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	2000.03.15.14.16.10;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.05.14.12.42.03;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.26;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.26;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.32;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Store lxa files verbatim, without appendum
Files saved with load & exec address (as opposed to a filetype and the top nybble of load set to 0xFFF) would be extended by 8 bytes in order to hide the true load/exec for later retrieval.
While useful if only ever saving and retrieving from the RISC OS viewpoint, it would create apparently corrupt or overlong file if you wanted to do any analysis on the NFS server end. Given load/exec addresses are deprecated, change NFS to behave like LanManFS and just denote ",lxa" suffixed files with the appropriate icon in the Filer and a made up load/exec address.

pathmunge.c/_GBPB.c/V2support.c/_Args.c/_File.c/PutBytesX.c/Static.c/Changeinfo.c: Switch out 8 byte appending code. Give the file a proper date stamp instead when viewed on Unix.
_Open.c: Switch out the 8 byte appendum stuff, and use a common OS_Word 14 clock function.
Statics.h/Modulewrap.c: Compute a substitute load/exec using the same algorithm as LanManFS (the Kernel's address rounded down to 1MB). Use cmhg finalise function instead of atexit().

Also
MakeFile: pass in predefine DEBUG for debug builds.
cmhg/NFSHdr: remove *Histogram debug command except when debugging. Add finalise handler.
Commands.c/Commands.h: remove *Histogram debug command except when debugging.
Utils.c: delete unused long long support functions. Add a new time getting support function.
Utils.h: new time getting support function.

Tested with a handful of area saves using *Save, checking the file size when viewed at the server end was correct not 8 bytes longer.

Version 3.25. Tagged as 'NFS-3_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __NFSNFS_h
#include "nfsheaders.h"
#endif
#include "access.h"

static const u_int64_t UToR_Offset = { UToR_DateOffset_Lo, UToR_DateOffset_Hi };

/*
        Convert a UNIX date (GM time in seconds and nseconds) to
        a RISC OS date (5 byte format in centiseconds).
*/
static void unix_date_to_riscos_date
(
        /*unsigned int *riscos_date_lo,
        unsigned int *riscos_date_hi,
        unsigned int useconds,
        unsigned int seconds*/
	u_int64_t *riscos, const nfstime3 *nfs
)
{
        u_int64_t nfs_micro;
        ui64_create(&nfs_micro, nfs->nseconds / 10000000);
        ui64_multiply_uu(riscos, nfs->seconds, 100);
        ui64_add_u64u64(riscos, riscos, &nfs_micro);
        ui64_add_u64u64(riscos, riscos, &UToR_Offset);

}


/*
        Convert a RISC OS date (5 byte format in centiseconds) to
        a UNIX date (GM time in seconds and useconds).
*/
static void riscos_date_to_unix_date
(
        /*unsigned int *useconds,
        unsigned int *seconds,
        unsigned int riscos_date_lo,
        unsigned int riscos_date_hi*/
        nfstime3 *nfs, const u_int64_t *riscos
)
{
        unsigned long a, b;
        u_int64_t tmp;

        /*
                Remove the offset between the two date schemes
        */
        ui64_subtract_u64u64(&tmp, riscos, &UToR_Offset);

        /*
                Take the 5-byte value in tmp
                and divide it into two 20 bit chunks.
                Process each chunk separately, then re-combine:

        */
        /* split into top and bottom 20 bits */
        a = (tmp.high << 12) | (tmp.low >> 20);
        b = tmp.low & 0xfffff;

        /* (a<<20 + b)%100 * 10000 */
        nfs->nseconds = (( ((a%100)<<20) + b )%100) * 10000000;

        /* (a<<20 + b)/100 */
        nfs->seconds = ((a/100)<<20) + (((a%100)<<20) + b)/100;

        /* Round up to the nearest second to get copy newer to work vaguely reasonably */
        if ( nfs->nseconds )
        {
                nfs->seconds++;
                nfs->nseconds = 0;
        }
}

void nfs_to_riscos_attributes
(
        RISCOSAttributes *rattr,
        nfs_file_descriptor *nfd
)
{
        u_int64_t riscos_date;
        nfs_file_description *ndesc = &nfd->desc;
        int dummy;

        /*
                Transfer the size
        */
        rattr->file_length = ui64_value_as_int(&ndesc->attr.size);

        switch( ndesc->attr.type )
        {
        case NF3REG:
                /*
                        Regular file processing
                */
                extensions_check_nfs_name_for_extension( ndesc->name, &rattr->load_address, &dummy );
                if ( rattr->load_address != -1UL )
                {
                        /*
                                Typed file specified by user suffix
                        */

                        /*
                                Pick up the date
                        */
                        unix_date_to_riscos_date( &riscos_date, &ndesc->attr.mtime );

                        /*
                                Combine the date and type
                        */
                        rattr->load_address = 0xfff00000 | (rattr->load_address << FileType_Shift) | (int)(riscos_date.high & 0xff );
                        rattr->execute_address = riscos_date.low;
                }
                else if ( ndesc->name[ ndesc->chars_before_suffix ] == FileChar_TypedNamePrefix )
                {
                        if ( strcmp( &ndesc->name[ ndesc->chars_before_suffix + 1 ], FileString_DeadFile ) == 0 )
                        {
                                /*
                                        Dead file
                                */
                                rattr->load_address = 0xdeaddead;
                                rattr->execute_address = 0xdeaddead;
                        }
                        else if ( strcmp( &ndesc->name[ ndesc->chars_before_suffix + 1 ], FileString_UntypedFile ) == 0 )
                        {
                                /*
                                        Untyped file
                                */
                                rattr->load_address = ndesc->load_address;
                                rattr->execute_address = ndesc->execute_address;
#ifdef LXA_BY_APPENDUM
                                rattr->file_length -= sizeof( appendum );
#endif
                                /*
                                        A little bit of paranoia
                                */
                                if ( rattr->file_length < 0 )
                                        rattr->file_length = 0;
                        }
                        else
                        {
                                /*
                                        Typed file (only isn't if an internal inconsistency has crept in)
                                */

                                /*
                                        Pick up the date
                                */
                                unix_date_to_riscos_date( &riscos_date, &ndesc->attr.mtime );

                                /*
                                        Extract the type from the file name
                                */
                                sscanf( &ndesc->name[ ndesc->chars_before_suffix + 1 ], "%3x", &rattr->load_address );

                                /*
                                        Combine the date and type
                                */
                                rattr->load_address = 0xfff00000 | (rattr->load_address << FileType_Shift) | (int)(riscos_date.high & 0xff );
                                rattr->execute_address = riscos_date.low;
                        }
                }
                else
                {
                        /*
                                File without suffix - text or UNIXExecutable
                        */

                        /*
                                Pick up the date
                        */
                        unix_date_to_riscos_date( &riscos_date, &ndesc->attr.mtime );

                        /*
                                Choose between text or unix_ex
                        */
                        rattr->load_address =
                                ((ndesc->attr.mode & (NFSMODE_USER_EXECUTE | NFSMODE_GROUP_EXECUTE | NFSMODE_OTHERS_EXECUTE)) != 0) ?
                                        FileType_UNIXExecutable :
                                        FileType_Text;

                        /*
                                Combine the date and type.
                        */
                        rattr->load_address = 0xfff00000 | (rattr->load_address << FileType_Shift) | (int)(riscos_date.high & 0xff );
                        rattr->execute_address = riscos_date.low;
                }
                break;

        case NF3LNK:
                /*
                        Soft links get reflected as soft links.
                */
                unix_date_to_riscos_date( &riscos_date, &ndesc->attr.mtime );

                rattr->load_address = 0xfff00000UL | (FileType_SoftLink << FileType_Shift) | (riscos_date.high & 0xffUL );
                rattr->execute_address = riscos_date.low;
                break;

        default:
                /*
                        Non regular file nor soft link. Typically this means directories.
                */

                /*
                        Pick up the date
                */
                unix_date_to_riscos_date( &riscos_date, &ndesc->attr.mtime );

                /*
                        Combine the date and type, type is given as UNIX executable.
                */
                rattr->load_address = 0xfff00000UL | (FileType_UNIXExecutable << FileType_Shift) | (riscos_date.high & 0xffUL );
                rattr->execute_address = riscos_date.low;
        }

        /*
                Transfer the access
        */
        rattr->access = access_nfs_to_riscos( nfd->mp, &ndesc->attr );

        /*
                Choose which FileType to use - these aren't supported:
                character special type
                block special type
                named socket
        */
        switch( ndesc->attr.type )
        {
        case NF3REG:
        case NF3LNK:
                rattr->type = FileType_File;
                break;

        case NF3DIR:
                if ( !(ndesc->attr.mode & NFSMODE_OTHERS_EXECUTE) )
                        rattr->access |= FileAccess_Locked;
                rattr->type = FileType_Directory;
                break;

        default:
                rattr->type = FileType_None;
                break;
        }
}

/*
        Translate from a fattr3 to RISCOS file attributes.

        Caller reponsible for freeing constructed rdesc.
*/
static _kernel_oserror *nfs_to_riscos_description
(
        riscos_file_description *rdesc,
        nfs_file_descriptor     *ndesc
)
{
        _kernel_oserror *err;

        /*
                Copy the name across
        */
        err = nfsname_to_riscos_name( &rdesc->name, ndesc->desc.name, ndesc );

        if ( err )
                return err;

        nfs_to_riscos_attributes( &rdesc->attr, ndesc );

        return NULL;
}

/*
        Converts from riscos to nfs file description.
        Only these field of the fattr3 in ndesc are filled in:
                mode;
                uid;
                gid;
                size;
                atime;
                mtime;
*/
_kernel_oserror *riscos_to_nfs_description
(
        nfs_file_description    *ndesc,
        riscos_file_description *rdesc
)
{
        _kernel_oserror *err;
        u_int64_t riscos_date;
        YesNoAnswer is_executable = No;

        /*
                Generate a nfs name
        */
        err = riscos_name_to_nfsname( &ndesc->name, rdesc->name, &rdesc->attr );

        if ( err )
                return err;

        ndesc->chars_before_suffix = strlen( rdesc->name );

        /*
                Generate lxa information.
                If (its a file) and (its stamped obviously or load=exec) and (its not dead) then its lxa
        */
        if ( (rdesc->attr.type & FileType_File) &&
             (
                 (   rdesc->attr.load_address & 0xfff00000) != 0xfff00000 ||
                     rdesc->attr.load_address == rdesc->attr.execute_address
             ) &&
             (
                     rdesc->attr.load_address != 0xdeaddead ||
                     rdesc->attr.execute_address != 0xdeaddead
             ))
        {
                ndesc->file_is_lxa = Yes;
                ndesc->load_address = rdesc->attr.load_address;
                ndesc->execute_address = rdesc->attr.execute_address;
        }
        else
        {
                ndesc->file_is_lxa = No;
        }

        /*
                Fill in the attr
        */
        ndesc->attr.mode = 0;
        if ( rdesc->attr.type == FileType_Directory )
        {
                ndesc->attr.type = NF3DIR;
                ui64_create2(&ndesc->attr.size, -1UL, -1UL);  /* -1 as an unsigned long constant? Know your C standard! */
        }
        else if ( (rdesc->attr.type & FileType_File) &&
                        ((rdesc->attr.load_address >> FileType_Shift) & FileType_Mask) == FileType_SoftLink )
        {
                ndesc->attr.type = NF3LNK;
                ui64_create2(&ndesc->attr.size, -1UL, -1UL);
        }
        else
        {
                ndesc->attr.type = NF3REG;

                if ( (rdesc->attr.load_address & 0xffffff00) == (0xfff00000 | (FileType_UNIXExecutable << FileType_Shift)) )
                {
                        is_executable = Yes;
                }

                ui64_create2(&ndesc->attr.size, rdesc->attr.file_length, 0);

#ifdef LXA_BY_APPENDUM
                if ( ndesc->file_is_lxa )
                {
                        ui64_add(&ndesc->attr.size, sizeof( appendum ) );
                }
#endif                
        }

        if ( rdesc->attr.access & FileAccess_OwnerRead )
        {
                ndesc->attr.mode |= is_executable ? (NFSMODE_USER_EXECUTE | NFSMODE_USER_READ) : NFSMODE_USER_READ;
        }

        if ( rdesc->attr.access & FileAccess_OwnerWrite )
        {
                ndesc->attr.mode |= NFSMODE_USER_WRITE;
        }

        if ( rdesc->attr.access & FileAccess_PublicRead )
        {
                ndesc->attr.mode |=
                        is_executable ?
                                (NFSMODE_OTHERS_EXECUTE | NFSMODE_OTHERS_READ | NFSMODE_GROUP_EXECUTE | NFSMODE_GROUP_READ) :
                                (NFSMODE_OTHERS_READ | NFSMODE_GROUP_READ);
        }

        if ( rdesc->attr.access & FileAccess_PublicWrite )
        {
                ndesc->attr.mode |= NFSMODE_OTHERS_WRITE | NFSMODE_GROUP_WRITE;
        }

        if ( rdesc->attr.type == FileType_Directory )
        {
                ndesc->attr.mode |= NFSMODE_USER_EXECUTE | NFSMODE_USER_READ | NFSMODE_USER_WRITE;

                if ( !( rdesc->attr.access & FileAccess_Locked ) )
                        ndesc->attr.mode |= NFSMODE_OTHERS_EXECUTE | NFSMODE_GROUP_EXECUTE;
        }

        ndesc->attr.uid = -1;
        ndesc->attr.gid = -1;

        /*
                Convert the date.
        */
#ifdef LXA_BY_APPENDUM
        ui64_create2(&riscos_date, rdesc->attr.execute_address, rdesc->attr.load_address & 0xfful);
#else
        if ( ndesc->file_is_lxa )
        {
                unsigned long load, exec;

                /* Give a sensible Unix time stamp, discard load & exec */
                utils_setnowcs( &load, &exec );
                ui64_create2( &riscos_date, exec, load & 0xfful );
        }
        else
        {
                ui64_create2( &riscos_date, rdesc->attr.execute_address, rdesc->attr.load_address & 0xfful );
        }
#endif
        riscos_date_to_unix_date( &ndesc->attr.mtime, &riscos_date );

        ndesc->attr.atime = ndesc->attr.mtime;

        return NULL;
}

/*
        Change the info on a particular file
*/
_kernel_oserror *change_info_given_file
(
        nfs_file_descriptor *ndesc,
        unsigned long *load_address,
        unsigned long *execute_address,
        int *access
)
{
        _kernel_oserror *err;
        riscos_file_description rdesc;
        sattr3 snattr;
        nfs_file_description new_file_desc;
        fattr3 *nattr;
        mode3 old_mode = ndesc->desc.attr.mode;
        ftype3 old_type = ndesc->desc.attr.type;

        if ( ndesc->desc.attr.type == NF3LNK )
        {
                return mb_not_to_a_soft_link_you_dont;
        }

        /*
                Convert the info and adjust the bits which need changing
        */
        err = nfs_to_riscos_description( &rdesc, ndesc );

        if ( err )
                return err;

        if ( load_address )
                rdesc.attr.load_address = *load_address;
        if ( execute_address )
                rdesc.attr.execute_address = *execute_address;
        if ( access )
                rdesc.attr.access = *access;

        err = riscos_to_nfs_description( &new_file_desc, &rdesc );

        free( rdesc.name );

        if ( err )
                return err;

        /*
                Leave owner read/write bits alone on directories
        */
        if ( old_type == NF3DIR )
        {
                new_file_desc.attr.mode =
                        (new_file_desc.attr.mode & ~(NFSMODE_USER_READ | NFSMODE_USER_WRITE)) |
                        (old_mode & (NFSMODE_USER_READ | NFSMODE_USER_WRITE));
        }

        /*
                Set up most of the fields of snattr for a set attributes
        */
        if ( access )
        {
                snattr.mode.set_mode3_u.mode = new_file_desc.attr.mode;
                snattr.mode.set_it = TRUE;
        }
        else
        {
                snattr.mode.set_it = FALSE;
        }
        snattr.uid.set_it = FALSE;
        snattr.gid.set_it = FALSE;
        snattr.size.set_it = FALSE;
        snattr.atime.set_it = SET_TO_CLIENT_TIME;
        snattr.atime.set_atime_u.atime = new_file_desc.attr.atime;
        snattr.mtime.set_it = snattr.atime.set_it;
        snattr.mtime.set_mtime_u.mtime = new_file_desc.attr.mtime;

        /*
                Check for change in LXA status
        */
        if ( new_file_desc.file_is_lxa &&
                ( !ndesc->desc.file_is_lxa ||
                ndesc->desc.load_address != new_file_desc.load_address ||
                ndesc->desc.execute_address != new_file_desc.execute_address ) )
        {
#ifdef LXA_BY_APPENDUM
                appendum bit_on_the_end_of_the_file;
                /*
                        New attributes indicate file will be an lxa form and
                        either the file wasn't lxa before or the load or exec
                        address has changed. This means an appendum needs to
                        be written out.
                */

                /*
                        Append (changed) lxa to end of file.
                */
                bit_on_the_end_of_the_file.lxa.load_address = new_file_desc.load_address;
                bit_on_the_end_of_the_file.lxa.execute_address = new_file_desc.execute_address;

                err = nfs_write(
                        &nattr,
                        ndesc->mp,
                        &ndesc->file,
                        riscos_extent( ndesc ),
                        (char *)&bit_on_the_end_of_the_file,
                        sizeof( appendum ) );

                if ( err )
                {
                        free( new_file_desc.name );
                        return err;
                }
#endif
                ndesc->desc.file_is_lxa = Yes;
                ndesc->desc.load_address = new_file_desc.load_address;
                ndesc->desc.execute_address = new_file_desc.execute_address;

                ndesc->desc.attr = *nattr;
        }
        else if ( !new_file_desc.file_is_lxa && ndesc->desc.file_is_lxa )
        {
                ndesc->desc.file_is_lxa = No;

#ifdef LXA_BY_APPENDUM
                /*
                        Shorten file to remove lxa - gets performed in change attributes below.
                */
                snattr.size.set_size3_u.size = new_file_desc.attr.size;
                snattr.size.set_it = TRUE;
#endif
        }

        /*
                Don't allow non-owners to explicitly adjust the date stamps
        */
        if ( ndesc->desc.attr.uid != ndesc->mp->user->uid )
        {
                snattr.atime.set_it = DONT_CHANGE;
                snattr.mtime.set_it = DONT_CHANGE;
        }

        /*
                Change the nfs attributes
        */
        err = nfs_setattr( &nattr, ndesc->mp, &ndesc->file, &snattr );

        if ( err )
        {
                free( new_file_desc.name );
                return err;
        }

        ndesc->desc.attr = *nattr;

        /******************************************************************

        This window is open when the file has been truncated for becoming
        dated, but hasn't yet been renamed.

        ******************************************************************/

        /*
                Check for change in name.
        */
        if ( strcmp( new_file_desc.name, ndesc->desc.name ) != 0 )
        {
                /*
                        Rename to new name.
                */
                err = nfs_rename_safely( ndesc->mp, &ndesc->dir, new_file_desc.name, &ndesc->dir, ndesc->desc.name );

                if ( err )
                {
                        free( new_file_desc.name );
                        return err;
                }
        }

        free( ndesc->desc.name );
        ndesc->desc.name = new_file_desc.name;
        ndesc->desc.chars_before_suffix = new_file_desc.chars_before_suffix;

        return err;
}

_kernel_oserror *change_info
(
        char *name,
        unsigned long *load_address,
        unsigned long *execute_address,
        int *access
)
{
        _kernel_oserror *err;
        nfs_file_descriptor ndesc;
        char *path_to_leaf;
        char *leaf_position;

        err = find_leaf( name, &ndesc, &path_to_leaf, &leaf_position );

        if ( err )
                return err;

        free( path_to_leaf );

        err = change_info_given_file( &ndesc, load_address, execute_address, access );

        free( ndesc.desc.name );

        return err;
}

/*
        Changes the length of the file and
        fills with the filling if fill_it is true
*/
_kernel_oserror *change_length_given_file
(
        nfs_file_descriptor     *ndesc,
        int                     wanted_length,
        char                    *filling,
        bool_t                  fill_it    /* JRS 7/92 added because filling can be 0 and still valid! */
)
{
        _kernel_oserror *err = NULL;
        sattr3 nattr;
        fattr3 *nattrres;
        int current_length = riscos_extent( ndesc );
        unsigned long start;
        int len;

        if ( ndesc->desc.attr.type == NF3LNK )
        {
                return mb_not_to_a_soft_link_you_dont;
        }

        /*
                Truncate the file as necessary
        */
        if ( current_length > wanted_length )
        {
                nattr.mode.set_it = FALSE;
	        nattr.uid.set_it = FALSE;
        	nattr.gid.set_it = FALSE;
	        nattr.size.set_it = TRUE;
        	nattr.atime.set_it = DONT_CHANGE;
                nattr.mtime.set_it = DONT_CHANGE;
                ui64_create(&nattr.size.set_size3_u.size, wanted_length);
                ndesc->desc.attr.size = nattr.size.set_size3_u.size;

#ifdef LXA_BY_APPENDUM
                /*
                        Write the bit on the end if necessary.
                */
                if ( ndesc->desc.file_is_lxa )
                {
                        appendum bit_on_the_end;

                        bit_on_the_end.lxa.load_address = ndesc->desc.load_address;
                        bit_on_the_end.lxa.execute_address = ndesc->desc.execute_address;
                        err = nfs_write( &nattrres, ndesc->mp, &ndesc->file, 0, (char *)&bit_on_the_end, sizeof( appendum ));

                        if ( err )
                        {
                                free( ndesc->desc.name );

                                return err;
                        }

                        ndesc->desc.attr = *nattrres;

                        ui64_add(&nattr.size.set_size3_u.size, 8);
                }
#endif

                /*
                        Shorten the file (to the bit on the end perhaps)
                */
                err = nfs_setattr( &nattrres, ndesc->mp, &ndesc->file, &nattr );

                if ( err )
                {
                        free( ndesc->desc.name );

                        return err;
                }

                ndesc->desc.attr = *nattrres;
        }

        /*
                Write out the filling or extend the file as necessary
        */
        if ( fill_it )
        {
                start = 0;
                len = wanted_length;
                err = putbytes( &filling, ndesc, &start, &len );
        }
        else if ( current_length < wanted_length )
        {
                err = write_zeros( ndesc, wanted_length - 1UL, 1 );
        }

        return err;
}

int riscos_extent
(
        nfs_file_descriptor *ndesc
)
{
#ifdef LXA_BY_APPENDUM
        if ( ndesc->desc.file_is_lxa )
                return (int) ui64_value(&ndesc->desc.attr.size) - sizeof( appendum );
        else
                return (int) ui64_value(&ndesc->desc.attr.size);
#else
        return (int) ui64_value(&ndesc->desc.attr.size);
#endif
}
@


4.5
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@d146 1
a146 1

d148 1
a148 1

d367 1
d372 1
d412 1
d414 14
a450 1
        appendum bit_on_the_end_of_the_file;
d519 2
d547 1
a547 1

d558 1
d564 1
a660 1
        appendum bit_on_the_end;
d685 1
d691 2
d708 1
a708 1

d747 1
d752 3
@


4.4
log
@  Access permission code overhaul.
  Supplementary group code improved.
Detail:
  *NFSInfo now shows the group names as well as the group IDs for
    both your primary and supplementary GIDs.
  access.c now uses the supplementary GIDs to help determine whether
    or not you are allowed to read/write a file.
  access.c now provides the NFS->RISC OS attribute mapping - "Owner"
    attributes being UNIX's user/group access; "Public" being the
    UNIX other access.
  The end result of these changes should be that your access rights to
    any object on the NFS server should match those you would expect
    from a UNIX shell logged in with the same ACLs as those you get
    via PCNFS.
Admin:
  Tested on Risc PC.

Version 3.09. Tagged as 'NFS-3_09'
@
text
@d17 1
a17 1
#include "NFS.h"
@


4.3
log
@  Fixed potential use of uninitialised pointer.
Detail:
  If the LOOKUP remote procedure chose not to supply the optional
    object attributes in its result, the attribute pointer would
    remain uninitialised and be treated as safe to use.  This can
    no longer occur.
  All but the unused static rcsid variable compile warnings removed.
Admin:
  Requires AsmUtils 0.06 or later.
  Requires Library 0.39 or later (for rpcgen 0.03 or later)
  Built and tested on Risc PC.

Version 3.07. Tagged as 'NFS-3_07'
@
text
@d19 1
d93 1
a93 1
        nfs_file_description *ndesc
d97 1
d235 1
a235 9
        rattr->access = 0;
        if ( ndesc->attr.mode & NFSMODE_USER_READ )
                rattr->access |= FileAccess_OwnerRead;
        if ( ndesc->attr.mode & NFSMODE_USER_WRITE )
                rattr->access |= FileAccess_OwnerWrite;
        if ( ndesc->attr.mode & NFSMODE_OTHERS_READ )
                rattr->access |= FileAccess_PublicRead;
        if ( ndesc->attr.mode & NFSMODE_OTHERS_WRITE )
                rattr->access |= FileAccess_PublicWrite;
d283 1
a283 1
        nfs_to_riscos_attributes( &rdesc->attr, &ndesc->desc );
@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d101 1
a101 1
        rattr->file_length = ui64_value(&ndesc->attr.size);
@


4.1
log
@Initial revision
@
text
@d20 2
d23 1
a23 1
        Convert a UNIX date (GM time in seconds and useconds) to
d28 1
a28 1
        unsigned int *riscos_date_lo,
d31 2
a32 1
        unsigned int seconds
d35 5
a39 3
        very_long_multiply( riscos_date_lo, riscos_date_hi, seconds, 0, 100, 0 );
        very_long_add( riscos_date_lo, riscos_date_hi, *riscos_date_lo, *riscos_date_hi, useconds / 10000, 0 );
        very_long_add( riscos_date_lo, riscos_date_hi, *riscos_date_lo, *riscos_date_hi, UToR_DateOffset_Lo, UToR_DateOffset_Hi );
d50 1
a50 1
        unsigned int *useconds,
d53 2
a54 1
        unsigned int riscos_date_hi
d57 2
a58 2
        unsigned int a;
        unsigned int b;
d63 1
a63 1
        very_long_subtract( useconds, seconds, riscos_date_lo, riscos_date_hi, UToR_DateOffset_Lo, UToR_DateOffset_Hi );
d66 1
a66 1
                Take the 5-byte value in *seconds and *useconds
d72 2
a73 2
        a = (*seconds << 12) | (*useconds >> 20);
        b = *useconds & 0xfffff;
d76 1
a76 1
        *useconds = (( ((a%100)<<20) + b )%100) * 10000;
d79 1
a79 1
        *seconds = ((a/100)<<20) + (((a%100)<<20) + b)/100;
d82 1
a82 1
        if ( *useconds )
d84 2
a85 2
                (*seconds)++;
                *useconds = 0;
d95 1
a95 2
        unsigned int riscos_date_lo;
        unsigned int riscos_date_hi;
d101 1
a101 1
        rattr->file_length = ndesc->attr.size;
d103 1
a103 1
        switch( ndesc->attr.mode & NFSMODE_FMT )
d105 1
a105 1
        case NFSMODE_REG:
d110 1
a110 1
                if ( rattr->load_address >= 0 )
d119 1
a119 1
                        unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );
d124 2
a125 2
                        rattr->load_address = 0xfff00000 | (rattr->load_address << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                        rattr->execute_address = riscos_date_lo;
d162 1
a162 1
                                unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );
d172 2
a173 2
                                rattr->load_address = 0xfff00000 | (rattr->load_address << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                                rattr->execute_address = riscos_date_lo;
d185 1
a185 1
                        unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );
d198 2
a199 2
                        rattr->load_address = 0xfff00000 | (rattr->load_address << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                        rattr->execute_address = riscos_date_lo;
d203 1
a203 1
        case NFSMODE_LNK:
d207 1
a207 1
                unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );
d209 2
a210 2
                rattr->load_address = 0xfff00000 | (FileType_SoftLink << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                rattr->execute_address = riscos_date_lo;
d221 1
a221 1
                unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );
d226 2
a227 2
                rattr->load_address = 0xfff00000 | (FileType_UNIXExecutable << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                rattr->execute_address = riscos_date_lo;
d249 1
a249 1
        switch( ndesc->attr.mode & NFSMODE_FMT )
d251 2
a252 2
        case NFSMODE_REG:
        case NFSMODE_LNK:
d256 1
a256 1
        case NFSMODE_DIR:
d269 1
a269 1
        Translate from a fattr to RISCOS file attributes.
d296 1
a296 1
        Only these field of the fattr in ndesc are filled in:
d311 1
d350 1
d353 2
a354 2
                ndesc->attr.mode = NFSMODE_DIR;
                ndesc->attr.size = -1;
d359 2
a360 2
                ndesc->attr.mode = NFSMODE_LNK;
                ndesc->attr.size = -1;
d364 1
a364 1
                ndesc->attr.mode = NFSMODE_REG;
d371 1
a371 1
                ndesc->attr.size = rdesc->attr.file_length;
d374 3
a376 1
                        ndesc->attr.size += sizeof( appendum );
d416 2
a417 1
        riscos_date_to_unix_date( &ndesc->attr.mtime.useconds, &ndesc->attr.mtime.seconds, rdesc->attr.execute_address, rdesc->attr.load_address & 0xff );
d430 2
a431 2
        int *load_address,
        int *execute_address,
d437 1
a437 1
        sattr snattr;
d439 1
a439 1
        fattr *nattr;
d441 2
a442 1
        int old_mode = ndesc->desc.attr.mode;
d444 1
a444 1
        if ( (ndesc->desc.attr.mode & NFSMODE_FMT) == NFSMODE_LNK )
d474 1
a474 1
        if ( (old_mode & NFSMODE_FMT) == NFSMODE_DIR )
d485 4
a488 1
                snattr.mode = new_file_desc.attr.mode;
d490 10
a499 6
                snattr.mode = -1;
        snattr.uid = -1;
        snattr.gid = -1;
        snattr.size = -1;
        snattr.atime = new_file_desc.attr.atime;
        snattr.mtime = new_file_desc.attr.mtime;
d549 2
a550 1
                snattr.size = new_file_desc.attr.size;
d554 1
a554 1
                Don't allow non-owners to explicitely adjust the date stamps
d558 2
a559 4
                snattr.atime.seconds =
                snattr.atime.useconds =
                snattr.mtime.seconds =
                snattr.mtime.useconds = -1;
d609 2
a610 2
        int *load_address,
        int *execute_address,
d646 1
a646 1
        sattr nattr;
d648 1
a648 1
        fattr *nattrres;
d650 1
a650 1
        int start;
d653 1
a653 1
        if ( (ndesc->desc.attr.mode & NFSMODE_FMT) == NFSMODE_LNK )
d663 8
a670 10
                nattr.mode = -1;
                nattr.uid = -1;
                nattr.gid = -1;
                nattr.size = wanted_length;
                nattr.atime.seconds = -1;
                nattr.atime.useconds = -1;
                nattr.mtime.seconds = -1;
                nattr.mtime.useconds = -1;

                ndesc->desc.attr.size = wanted_length;
d690 1
a690 1
                        nattr.size += 8;
d720 1
a720 1
                err = write_zeros( ndesc, wanted_length - 1, 1 );
d732 1
a732 1
                return ndesc->desc.attr.size - sizeof( appendum );
d734 1
a734 1
                return ndesc->desc.attr.size;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
