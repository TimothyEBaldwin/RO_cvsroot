head	4.6;
access;
symbols
	NFS-3_27:4.6
	NFS-3_26:4.6
	NFS-3_25:4.6
	NFS-3_24:4.5
	NFS-3_23:4.5
	NFS-3_22:4.4
	NFS-3_21:4.4
	NFS-3_20:4.4
	NFS-3_19:4.4
	sbrodie_NFS_dev_merge:4.4
	NFS-3_18-4_22_2_4:4.4
	NFS-3_18-4_22_2_3:4.4
	NFS-3_18-4_22_2_2:4.4
	NFS-3_18-4_22_2_1:4.4
	sbrodie_NFS_dev:4.4.0.2
	sbrodie_NFS_dev_bp:4.4
	NFS-3_18:4.4
	NFS-3_17:4.4
	NFS-3_16:4.4
	NFS-3_15:4.4
	NFS-3_14:4.4
	NFS-3_13:4.4
	NFS-3_12:4.4
	NFS-3_11:4.4
	NFS-3_10:4.4
	NFS-3_09:4.4
	NFS-3_08:4.3
	NFS-3_07:4.3
	NFS-3_06:4.3
	NFS-3_05:4.3
	NFS-3_04:4.2
	NFS-3_02:4.2
	NFS-3_01:4.2
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.6
date	2018.03.07.21.22.41;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	sKJZhgBEKf2WsztA;

4.5
date	2018.01.29.21.30.19;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	7TGUL0NEVVbjHOoA;

4.4
date	2000.03.20.15.52.15;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.12.06.15.58.04;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.05.14.12.42.11;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.31;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.31;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.06.56;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Store lxa files verbatim, without appendum
Files saved with load & exec address (as opposed to a filetype and the top nybble of load set to 0xFFF) would be extended by 8 bytes in order to hide the true load/exec for later retrieval.
While useful if only ever saving and retrieving from the RISC OS viewpoint, it would create apparently corrupt or overlong file if you wanted to do any analysis on the NFS server end. Given load/exec addresses are deprecated, change NFS to behave like LanManFS and just denote ",lxa" suffixed files with the appropriate icon in the Filer and a made up load/exec address.

pathmunge.c/_GBPB.c/V2support.c/_Args.c/_File.c/PutBytesX.c/Static.c/Changeinfo.c: Switch out 8 byte appending code. Give the file a proper date stamp instead when viewed on Unix.
_Open.c: Switch out the 8 byte appendum stuff, and use a common OS_Word 14 clock function.
Statics.h/Modulewrap.c: Compute a substitute load/exec using the same algorithm as LanManFS (the Kernel's address rounded down to 1MB). Use cmhg finalise function instead of atexit().

Also
MakeFile: pass in predefine DEBUG for debug builds.
cmhg/NFSHdr: remove *Histogram debug command except when debugging. Add finalise handler.
Commands.c/Commands.h: remove *Histogram debug command except when debugging.
Utils.c: delete unused long long support functions. Add a new time getting support function.
Utils.h: new time getting support function.

Tested with a handful of area saves using *Save, checking the file size when viewed at the server end was correct not 8 bytes longer.

Version 3.25. Tagged as 'NFS-3_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __NFSNFS_H
#include "nfsheaders.h"
#endif

#include "access.h"

/*
        Create a directory
*/
static _kernel_oserror *create_nfs_directory
(
        char *riscos_name
)
{
        _kernel_oserror *err;
        char *path_to_leaf;
        char *leaf_position;
        sattr3 snattr;
        fattr3 *nattr;
        nfs_file_descriptor ndesc;
        riscos_file_description rdesc;
        int cr_access;
        gid_t gid;

        err = find_dir_for_leaf(
                riscos_name,
                &ndesc,
                &path_to_leaf,
                &leaf_position );

        if ( err )
                return err;

        err = nfs_getattr(&nattr, ndesc.mp, &ndesc.dir);

        if ( err )
                return err;

        if ( nattr->mode & 0x400 )
        {
                gid = nattr->gid;
        }
        else
        {
                gid = ndesc.mp->user->gid;
        }

        rdesc.attr.access = FileAccess_OwnerRead | FileAccess_OwnerWrite;
        rdesc.attr.type = FileType_Directory;
        rdesc.name = leaf_position;

        /*
                Load and Exec set up to be stamped now
        */

        rdesc.attr.load_address = NewDirectory_DefaultLoad;

        err = utils_setnowcs( &rdesc.attr.load_address, &rdesc.attr.execute_address );

        if ( err )
        {
                free( path_to_leaf );
                return err;
        }

        err = riscos_to_nfs_description( &ndesc.desc, &rdesc );

        free( path_to_leaf );

        if ( err )
                return err;

        /*
                Use UMASK if there instead.
        */
        cr_access = utils_getcreateaccess(&ndesc);
        if ( cr_access >= 0)
        {
                ndesc.desc.attr.mode =
                        ( ndesc.desc.attr.mode &
                                ~( NFSMODE_OTHERS_WRITE | NFSMODE_OTHERS_READ |
                                   NFSMODE_GROUP_WRITE | NFSMODE_GROUP_READ |
                                   NFSMODE_USER_WRITE | NFSMODE_USER_READ ))
                        | cr_access;

                if ( ndesc.desc.attr.mode & NFSMODE_USER_READ )
                        ndesc.desc.attr.mode |= NFSMODE_USER_EXECUTE;

                if ( ndesc.desc.attr.mode & NFSMODE_GROUP_READ )
                        ndesc.desc.attr.mode |= NFSMODE_GROUP_EXECUTE;

                if ( ndesc.desc.attr.mode & NFSMODE_OTHERS_READ )
                        ndesc.desc.attr.mode |= NFSMODE_OTHERS_EXECUTE;
        }

        snattr.mode.set_it = TRUE;
        snattr.uid.set_it = TRUE;
        snattr.gid.set_it = TRUE;
        snattr.size.set_it = FALSE;
        snattr.atime.set_it = SET_TO_CLIENT_TIME;
        snattr.mtime.set_it = SET_TO_CLIENT_TIME;
        snattr.mode.set_mode3_u.mode = ndesc.desc.attr.mode;
        snattr.uid.set_uid3_u.uid = ndesc.mp->user->uid;
        snattr.gid.set_gid3_u.gid = gid;
        snattr.atime.set_atime_u.atime = ndesc.desc.attr.atime;
        snattr.mtime.set_mtime_u.mtime = ndesc.desc.attr.mtime;

        err = nfs_mkdir( &ndesc.file, &nattr, ndesc.mp, &ndesc.dir, ndesc.desc.name, &snattr );

        free( ndesc.desc.name );

        if ( err == mb_nfserr_exist )
                err = NULL;

        return err;
}

_kernel_oserror *fsentry_file( FSEntry_File_Parameter *parm )
{
        _kernel_oserror *err;
        char *path_to_leaf;
        char *leaf_position;
        unsigned long start;
        int len;
        RISCOSAttributes rattr;
        nfs_file_descriptor ndesc;

        hourglass_on();

#ifdef DEBUGLIB
        if ( parm->special_field )
                dprintf(("File_2",
                        "_File( %d, %s, %s )\n",
                        parm->reason,
                        parm->special_field,
                        parm->name ));
        else
                dprintf(("File_2",
                        "_File( %d, %s )\n",
                        parm->reason,
                        parm->name ));
#endif

        if ( parm->special_field )
        {
                if ( caseless_strcmp( parm->special_field, Spooling_SpecialField ) != 0 )
                {
                        err = mb_bad_special_field;
                }
                else
                {
                        switch( parm->reason )
                        {
                        case FSEntry_File_Reason_ReadCatalogueInformation:
                                parm->reason = (FSEntry_File_Reason) FileType_None;
                                err = NULL;
                                break;

                        default:
                                err = mb_bad_op_on_spool;
                                break;
                        }
                }
        }
        else
        {
                switch ( parm->reason )
                {
                case FSEntry_File_Reason_LoadFile:
                        err = find_regular_leaf( parm->name, &ndesc, &path_to_leaf, &leaf_position );

                        if ( err )
                                break;

                        free( path_to_leaf );

                        /* JRS 7/92 check we have read access to file */
                        if ( !access_Icanread(ndesc.mp, &ndesc.desc.attr) )
                        {
                                err = mb_nfserr_acces;
                                break;
                        }

                        nfs_to_riscos_attributes( &rattr, &ndesc );

                        start = 0;
                        len = rattr.file_length;
                        err = getbytes(
                                &parm->info.load_exec.load_address,
                                &ndesc,
                                &start,
                                &len );

                        if ( err )
                                break;

                        parm->special_field = (char *)return_buffer;
                        strcpy( parm->special_field, ndesc.desc.name );
                        free( ndesc.desc.name );

                        parm->info.load_exec.load_address = (char *)rattr.load_address;
                        parm->info.load_exec.execute_address = (char *)rattr.execute_address;
                        parm->extras.info.length = rattr.file_length;
                        parm->extras.info.attributes = rattr.access;
                        break;

                case FSEntry_File_Reason_CreateFile:
                case FSEntry_File_Reason_SaveFile:
                        len = parm->extras.location.end - parm->extras.location.start;

                        err = create_nfs_file(
                                &ndesc,
                                parm->name,
                                &len,
                                (unsigned long *)&parm->info.load_exec.load_address,
                                (unsigned long *)&parm->info.load_exec.execute_address,
                                NULL,
                                parm->extras.location.start,
                                parm->reason == FSEntry_File_Reason_SaveFile );

                        if ( err )
                                break;

                        move_nfsname_to_riscos_name( return_buffer, ndesc.desc.name, &ndesc );

                        free( ndesc.desc.name );

                        parm->special_field = (char *)return_buffer;
                        break;

                case FSEntry_File_Reason_WriteCatalogueInformation:
                        err = change_info(
                                parm->name,
                                (unsigned long *)&parm->info.load_exec.load_address,
                                (unsigned long *)&parm->info.load_exec.execute_address,
                                &parm->extras.info.attributes );
                        break;

                case FSEntry_File_Reason_WriteLoadAddress:
                        err = change_info(
                                parm->name,
                                (unsigned long *)&parm->info.load_exec.load_address,
                                NULL,
                                NULL );
                        break;

                case FSEntry_File_Reason_WriteExecutionAddress:
                        err = change_info(
                                parm->name,
                                NULL,
                                (unsigned long *)&parm->info.load_exec.execute_address,
                                NULL );
                        break;

                case FSEntry_File_Reason_WriteAttributes:
                        err = change_info(
                                parm->name,
                                NULL,
                                NULL,
                                &parm->extras.info.attributes );
                        break;

                case FSEntry_File_Reason_ReadCatalogueInformationNoLength:
                case FSEntry_File_Reason_ReadCatalogueInformation:
                        err = find_leaf(
                                parm->name,
                                &ndesc,
                                &path_to_leaf,
                                &leaf_position );

                        if ( !err )
                        {
                                free( path_to_leaf );

                                nfs_to_riscos_attributes( &rattr, &ndesc );

                                free( ndesc.desc.name );

                                parm->info.load_exec.load_address = (char *)rattr.load_address;
                                parm->info.load_exec.execute_address = (char *)rattr.execute_address;

                                if ( parm->reason != FSEntry_File_Reason_ReadCatalogueInformationNoLength )
                                        parm->extras.info.length = rattr.file_length;

                                parm->extras.info.attributes = rattr.access;
                                parm->reason = (FSEntry_File_Reason) rattr.type;
                        }
                        else if ( err == mb_nfserr_noent
                                || err == mb_no_mount_point_found )
                        {
                                parm->reason = (FSEntry_File_Reason) FileType_None;
                                err = NULL;
                        }
                        break;

                case FSEntry_File_Reason_DeleteObject:
                        err = find_leaf( parm->name, &ndesc, &path_to_leaf, &leaf_position );

                        if ( err )
                        {
                                /*
                                        Doesn't exist already
                                */
                                if ( err == mb_nfserr_noent )
                                {
                                        parm->reason = (FSEntry_File_Reason) 0; /* not found */
                                        parm->extras.info.length = 0;
                                        err = NULL;
                                }

                                break;
                        }

                        free( path_to_leaf );

                        nfs_to_riscos_attributes( &rattr, &ndesc );

                        if ( rattr.type == FileType_Directory )
                        {
                                err = nfs_rmdir( ndesc.mp, &ndesc.dir, ndesc.desc.name );
                        }
                        else
                        {
                                err = nfs_remove( ndesc.mp, &ndesc.dir, ndesc.desc.name );
                        }

                        /*
                                If it didn't exists before we tried to delete it then that's cool
                        */
                        if ( err == mb_nfserr_noent )
                                err = NULL;

                        if ( !err )
                        {
                                parm->reason = (FSEntry_File_Reason) rattr.type;
                                parm->info.load_exec.load_address = (char *)rattr.load_address;
                                parm->info.load_exec.execute_address = (char *)rattr.execute_address;
                                parm->extras.info.length = rattr.file_length;
                                parm->extras.info.attributes = rattr.access;
                        }
                        break;

                case FSEntry_File_Reason_CreateDirectory:
                        err = create_nfs_directory( parm->name );
                        break;

                default:
                        return mb_nfserr_BadParameters;
                        break;
                }
        }

        hourglass_off();

        if (err != NULL) {
                dprintf(("File", "File error: %s\n", err->errmess));
        }

        return err;
}
@


4.5
log
@Export our own SWIs as a header
Use the shared makefiles to export Interface/NFS.h and Hdr:NFS.
Remove local copy NFS.h which confuses the dependency checking, now called nfsheaders.h instead.
Delete unused UID/GID pair.
Tested on a mount from FreeBSD 11.1-RELEASE-p4.

Version 3.23. Tagged as 'NFS-3_23'
@
text
@a30 1
        char time_result[ 5 ];
a37 1
        int success;
a69 1
        time_result[0] = Word_ReadRealTime5ByteFormat;
d71 1
a71 1
        success = _kernel_osword(Word_DateAndTime, (int *) time_result);
d73 3
a75 1
        if ( success == _kernel_ERROR )
a76 1
                err=_kernel_last_oserror();
a80 3
        rdesc.attr.load_address = NewDirectory_DefaultLoad | time_result[4];
        rdesc.attr.execute_address = *(int *)time_result;

@


4.4
log
@  Access permission code overhaul.
  Supplementary group code improved.
Detail:
  *NFSInfo now shows the group names as well as the group IDs for
    both your primary and supplementary GIDs.
  access.c now uses the supplementary GIDs to help determine whether
    or not you are allowed to read/write a file.
  access.c now provides the NFS->RISC OS attribute mapping - "Owner"
    attributes being UNIX's user/group access; "Public" being the
    UNIX other access.
  The end result of these changes should be that your access rights to
    any object on the NFS server should match those you would expect
    from a UNIX shell logged in with the same ACLs as those you get
    via PCNFS.
Admin:
  Tested on Risc PC.

Version 3.09. Tagged as 'NFS-3_09'
@
text
@d17 1
a17 1
#include "NFS.h"
@


4.3
log
@  Now uses PCNFS version 2 to authenticate.
Detail:
  Group-writable directories should now be writable to.
  setgid directories should cause created objects to take on
    the directory group ownership instead of the user's primary
    GIF
  *NFSInfo output enhanced to list all the additional group IDs
    and the default umask being applied to each authentication.
Admin:
  Tested on normal home mount and on TWC mount.

Version 3.05. Tagged as 'NFS-3_05'
@
text
@d150 1
a150 1
#ifdef SHOWCALLS
d152 1
a152 1
                printf(
d156 1
a156 1
                        parm->name );
d158 1
a158 1
                printf(
d161 1
a161 1
                        parm->name );
d204 1
a204 1
                        nfs_to_riscos_attributes( &rattr, &ndesc.desc );
d295 1
a295 1
                                nfs_to_riscos_attributes( &rattr, &ndesc.desc );
d336 1
a336 1
                        nfs_to_riscos_attributes( &rattr, &ndesc.desc );
d374 4
@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d40 1
d51 14
d124 1
a124 1
        snattr.gid.set_gid3_u.gid = ndesc.mp->user->gid;
@


4.1
log
@Initial revision
@
text
@d34 2
a35 2
        sattr snattr;
        fattr *nattr;
d101 11
a111 6
        snattr.mode = ndesc.desc.attr.mode;
        snattr.uid = ndesc.mp->user->uid;
        snattr.gid = ndesc.mp->user->gid;
        snattr.atime = ndesc.desc.attr.atime;
        snattr.mtime = ndesc.desc.attr.mtime;
        snattr.size = -1;
d128 1
a128 1
        int start;
d160 1
a160 1
                                parm->reason = FileType_None;
d220 2
a221 2
                                (int *)&parm->info.load_exec.load_address,
                                (int *)&parm->info.load_exec.execute_address,
d239 2
a240 2
                                (int *)&parm->info.load_exec.load_address,
                                (int *)&parm->info.load_exec.execute_address,
d247 1
a247 1
                                (int *)&parm->info.load_exec.load_address,
d256 1
a256 1
                                (int *)&parm->info.load_exec.execute_address,
d291 1
a291 1
                                parm->reason = rattr.type;
d296 1
a296 1
                                parm->reason = FileType_None;
d311 1
a311 1
                                        parm->reason = 0; /* not found */
d340 1
a340 1
                                parm->reason = rattr.type;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
