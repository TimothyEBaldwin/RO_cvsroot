head	4.2;
access;
symbols
	NFS-3_27:4.2
	NFS-3_26:4.2
	NFS-3_25:4.2
	NFS-3_24:4.2
	NFS-3_23:4.2
	NFS-3_22:4.2
	NFS-3_21:4.2
	NFS-3_20:4.2
	NFS-3_19:4.2
	sbrodie_NFS_dev_merge:4.2
	NFS-3_18-4_22_2_4:4.2
	NFS-3_18-4_22_2_3:4.2
	NFS-3_18-4_22_2_2:4.2
	NFS-3_18-4_22_2_1:4.2
	sbrodie_NFS_dev:4.2.0.2
	sbrodie_NFS_dev_bp:4.2
	NFS-3_18:4.2
	NFS-3_17:4.2
	NFS-3_16:4.2
	NFS-3_15:4.2
	NFS-3_14:4.2
	NFS-3_13:4.2
	NFS-3_12:4.2
	NFS-3_11:4.2
	NFS-3_10:4.2
	NFS-3_09:4.2
	NFS-3_08:4.2
	NFS-3_07:4.2
	NFS-3_06:4.2
	NFS-3_05:4.2
	NFS-3_04:4.2
	NFS-3_02:4.2
	NFS-3_01:4.2
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.2
date	99.05.14.12.42.39;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.41;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.41;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.07.48;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef __veneers_h
#define __veneers_h

#ifndef _kernel_HOST_UNDEFINED
#include "kernel.h"
#endif

typedef int FileSwitchHandle;
typedef int FileSystemHandle;

typedef union Information_Fields
{
        struct
        {
                char                    *load_address;
                char                    *execute_address;
        }       load_exec;
        struct
        {
                int                     part_1;
                int                     part_2;
        }       date_type;
}       Information_Fields;

typedef enum FSEntry_Open_Reason
{
        FSEntry_Open_Reason_OpenRead = 0,
        FSEntry_Open_Reason_CreateUpdate = 1,
        FSEntry_Open_Reason_Update = 2
}       FSEntry_Open_Reason;

#define InformationWord_WritePermitted                  0x80000000
#define InformationWord_ReadPermitted                   0x40000000
#define InformationWord_ObjectIsDirectory               0x20000000
#define InformationWord_UnbufferedOS_GBPBSupported      0x10000000
#define InformationWord_StreamIsInteractive             0x08000000

typedef union FSEntry_Open_Parameter
{
        struct  open_definition
        {
                FSEntry_Open_Reason     reason;
                char                    *filename;
                int                     padding_1;
                FileSwitchHandle        handle;
                int                     padding_4;
                int                     padding_5;
                char                    *special_field;
        }       open_definition;
        struct  open_result
        {
                int                     information_word;
                FileSystemHandle        handle;
                int                     buffer_size;
                int                     file_extent;
                int                     allocated_space;
        }       open_result;
}       FSEntry_Open_Parameter;
typedef _kernel_oserror *(FSEntry_Open_Function)( FSEntry_Open_Parameter * );

typedef union FSEntry_GetBytes_Parameter
{
        struct
        {
                int                     filler;
                FileSystemHandle        handle;
                char                    *destination_start;
                int                     bytes_to_read;
                unsigned long           file_offset_to_get_data_from;
        }       getbytes_definition;
        struct
        {
                char                    byte_got;
                char                    filler_1;
                char                    filler_2;
                char                    filler_3;
                YesNoAnswer             got_the_byte;
        }       getbytes_result;
}       FSEntry_GetBytes_Parameter;
typedef _kernel_oserror *(FSEntry_GetBytes_Function)( FSEntry_GetBytes_Parameter * );

typedef struct FSEntry_PutBytes_Parameter
{
        char                            byte_to_put;
        char                            filler_1;
        char                            filler_2;
        char                            filler_3;
        FileSystemHandle                handle;
        char                            *source_start;
        int                             bytes_to_write;
        unsigned long                   file_offset_to_put_data_to;
}       FSEntry_PutBytes_Parameter;
typedef _kernel_oserror *(FSEntry_PutBytes_Function)( FSEntry_PutBytes_Parameter * );

typedef enum FSEntry_Args_Reason
{
        FSEntry_Args_Reason_ReadSequentialFilePointer = 0,
        FSEntry_Args_Reason_WriteSequentialFilePointer = 1,
        FSEntry_Args_Reason_ReadFileExtent = 2,
        FSEntry_Args_Reason_WriteFileExtent = 3,
        FSEntry_Args_Reason_ReadSizeAllocatedToFile = 4,
        FSEntry_Args_Reason_EOFCheck = 5,
        FSEntry_Args_Reason_FlushFileBuffer = 6,
        FSEntry_Args_Reason_EnsureFileSize = 7,
        FSEntry_Args_Reason_WriteZerosToFile = 8,
        FSEntry_Args_Reason_ReadFileDateStamp = 9
}       FSEntry_Args_Reason;

typedef struct FSEntry_Args_Parameter
{
        FSEntry_Args_Reason             reason;
        FileSystemHandle                handle;
        union
        {
                unsigned long           sequential_pointer;
                int                     extent;
                int                     allocation_size;
                YesNoAnswer             EOF_Has_Been_Reached;
                Information_Fields      info;
                struct
                {
                        unsigned long   start;
                        int             number;
                }       write_zeros;
        }       arg;
}       FSEntry_Args_Parameter;
typedef _kernel_oserror *(FSEntry_Args_Function)( FSEntry_Args_Parameter * );

typedef struct FSEntry_Close_Parameter
{
        int                             padding;
        FileSystemHandle                handle;
        Information_Fields              info;
}       FSEntry_Close_Parameter;
typedef _kernel_oserror *(FSEntry_Close_Function)( FSEntry_Close_Parameter * );

typedef enum FSEntry_File_Reason
{
        FSEntry_File_Reason_LoadFile = 0xff,
        FSEntry_File_Reason_SaveFile = 0,
        FSEntry_File_Reason_WriteCatalogueInformation = 1,
        FSEntry_File_Reason_WriteLoadAddress = 2,
        FSEntry_File_Reason_WriteExecutionAddress = 3,
        FSEntry_File_Reason_WriteAttributes = 4,
        FSEntry_File_Reason_ReadCatalogueInformation = 5,
        FSEntry_File_Reason_DeleteObject = 6,
        FSEntry_File_Reason_CreateFile = 7,
        FSEntry_File_Reason_CreateDirectory = 8,
        FSEntry_File_Reason_ReadCatalogueInformationNoLength = 9,
        FSEntry_File_Reason_ReadBlockSize = 10
}       FSEntry_File_Reason;

typedef struct FSEntry_File_Parameter
{
        FSEntry_File_Reason             reason;
        char                            *name;
        Information_Fields              info;
        union
        {
                struct
                {
                        int             length;
                        int             attributes;
                }       info;
                struct
                {
                        char            *start;
                        char            *end;
                }       location;
        }       extras;
        char                            *special_field;
}       FSEntry_File_Parameter;
typedef _kernel_oserror *(FSEntry_File_Function)( FSEntry_File_Parameter * );

typedef enum FSEntry_Func_Reason
{
        FSEntry_Func_Reason_SetCurrentDirectory = 0,
        FSEntry_Func_Reason_SetLibraryDirectory = 1,
        FSEntry_Func_Reason_CatalogueDirectory = 2,
        FSEntry_Func_Reason_ExamineCurrentDirectory = 3,
        FSEntry_Func_Reason_CatalogueLibraryDirectory = 4,
        FSEntry_Func_Reason_ExamineLibraryDirectory = 5,
        FSEntry_Func_Reason_ExamineObjects = 6,
        FSEntry_Func_Reason_SetFilingSystemOptions = 7,
        FSEntry_Func_Reason_RenameObject = 8,
        FSEntry_Func_Reason_AccessObjects = 9,
        FSEntry_Func_Reason_BootFilingSystem = 10,
        FSEntry_Func_Reason_ReadNameAndBootOptionOfDisc = 11,
        FSEntry_Func_Reason_ReadCurrentDirectoryNameAndPrivilegeByte = 12,
        FSEntry_Func_Reason_ReadLibraryDirectoryNameAndPrivilegeByte = 13,
        FSEntry_Func_Reason_ReadDirectoryEntries = 14,
        FSEntry_Func_Reason_ReadDirectoriesAndInformation = 15,
        FSEntry_Func_Reason_ShutDown = 16,
        FSEntry_Func_Reason_PrintStartUpBanner = 17,
        FSEntry_Func_Reason_SetDirectoryContexts = 18,
        FSEntry_Func_Reason_ReadDirectoryEntriesAndInformation = 19,
        FSEntry_Func_Reason_OutputFullInformationOnObjects = 20,
        FSEntry_Func_Reason_CanonicaliseSpecialFieldAndDiscName = 23,
        FSEntry_Func_Reason_ResolveWildcard = 24,
        FSEntry_Func_Reason_ReadBootOption = 27
}       FSEntry_Func_Reason;

typedef struct FSEntry_Func_Parameter
{
        FSEntry_Func_Reason             reason;
        union
        {
                char                    *name_1;
                FileSystemHandle        csd;
                YesNoAnswer             rename_invalid;
        }       first_parameter;
        union
        {
                char                    *name_2;
                int                     parameter;
                char                    *access_string;
                char                    *destination_address;
                FileSystemHandle        urd;
        }       second_parameter;
        union
        {
                int                     read_number;
                FileSystemHandle        library;
        }       third_parameter;
        int                             read_offset;
        int                             buffer_length;
        char                            *special_field_1;
        char                            *special_field_2;
}       FSEntry_Func_Parameter;
typedef _kernel_oserror *(FSEntry_Func_Function)( FSEntry_Func_Parameter * );

typedef enum FSEntry_GBPB_Reason
{
        FSEntry_GBPB_Reason_PutMultipleBytesHere = 1,
        FSEntry_GBPB_Reason_PutMultipleBytes = 2,
        FSEntry_GBPB_Reason_GetMultipleBytesHere = 3,
        FSEntry_GBPB_Reason_GetMultipleBytes = 4
}       FSEntry_GBPB_Reason;

typedef struct FSEntry_GBPB_Paratemer
{
        FSEntry_GBPB_Reason             reason;
        FileSystemHandle                handle;
        char                            *address;
        int                             number;
        unsigned long                   sequential_file_pointer;
}       FSEntry_GBPB_Parameter;
typedef _kernel_oserror *(FSEntry_GBPB_Function)( FSEntry_GBPB_Parameter * );
#endif
@


4.1
log
@Initial revision
@
text
@d83 1
a83 1
                int                     file_offset_to_get_data_from;
d105 1
a105 1
        int                             file_offset_to_put_data_to;
d129 1
a129 1
                int                     sequential_pointer;
d136 1
a136 1
                        int             start;
d260 1
a260 1
        int                             sequential_file_pointer;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
