head	4.3;
access;
symbols
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.4
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.3
date	98.10.22.18.03.56;	author nturton;	state dead;
branches;
next	4.2;

4.2
date	98.03.25.18.59.35;	author pwombwel;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.39;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.39;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.07.36;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Module NFSSTB committed by srcmerge.
Merged from Spin_merge to Spinner.
Merge tag prefix is Spinner_23Sep1998
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Created by cmhg vsn 5.15 [Feb 14 1997]
 */

#ifndef __cmhg_nfscmhg_h
#define __cmhg_nfscmhg_h

#ifndef __kernel_h
#include "kernel.h"
#endif

#define CMHG_VERSION 515

#define Module_Title                     "NFS"
#define Module_Help                      "RISC OS NFS"
#define Module_VersionString             "2.32"
#define Module_VersionNumber             232
#define Module_Date                      "11 Mar 1998"


/*
 * Initialisation code
 * ===================
 *
 * Return NULL if your initialisation succeeds; otherwise return a pointer
 * to an error block. cmd_tail points to the string of arguments with which
 * the module is invoked (may be "").
 * podule_base is 0 unless the code has been invoked from a podule.
 * pw is the 'R12' value established by module initialisation. You may
 * assume nothing about its value (in fact it points to some RMA space
 * claimed and used by the module veneers). All you may do is pass it back
 * for your module veneers via an intermediary such as SWI OS_CallEvery
 * (use _swix() to issue the SWI call).
 */
_kernel_oserror *nfs_initialise(char *cmd_tail, int podule_base, void *pw);


/*
 * Service call handler
 * ====================
 *
 * Return values should be poked directly into r->r[n]; the right
 * value/register to use depends on the service number (see the relevant
 * RISC OS Programmer's Reference Manual section for details).
 * pw is the private word (the 'R12' value).
 */
void nfs_service(int service_number, _kernel_swi_regs *r, void *pw);


/*
 * Command handler
 * ===============
 *
 * If cmd_no identifies a command, then arg_string gives the command tail
 * (which you may not overwrite), and argc is the number of parameters.
 * Return NULL if the command has been successfully handled; otherwise
 * return a pointer to an erro block describing the failure (in this
 * case, the veneer code will set the 'V' bit).
 *
 * If cmd_no identifies a *Help entry, then arg_string denotes a buffer
 * that you can assemble your output into. cmd_handler must return
 * NULL, an error pointer or help_PRINT_BUFFER (if help_PRINT_BUFFER)
 * is returned, the NUL-terminated buffer will be printed).
 *
 * If cmd_no identifies a *Configure option, then arg_string gives the
 * command tail, and argc the number of parameters. Return NULL, an error
 * pointer, or one of the four special values defined below. If arg_string
 * is set to arg_CONFIGURE_SYNTAX, the user has typed *Configure with no
 * parameter; simply print your syntax string. If arg_string is set to
 * arg_STATUS, print your current configured status. Otherwise use
 * arg_string and argc to set the *Configure option.
 *
 * pw is the private word pointer ('R12') value passed into the entry
 * veneer
 */
#define help_PRINT_BUFFER         ((_kernel_oserror *) arg_string)
#define arg_CONFIGURE_SYNTAX      ((char *) 0)
#define arg_STATUS                ((char *) 1)
#define configure_BAD_OPTION      ((_kernel_oserror *) -1)
#define configure_NUMBER_NEEDED   ((_kernel_oserror *) 1)
#define configure_TOO_LARGE       ((_kernel_oserror *) 2)
#define configure_TOO_MANY_PARAMS ((_kernel_oserror *) 3)

#define CMD_NFS                         0
#define CMD_NFSInfo                     1
#define CMD_NFSBoot                     2
#define CMD_Logon                       3
#define CMD_Mount                       4
#define CMD_Dismount                    5
#define CMD_Bye                         6
#define CMD_Free                        7
#define CMD_CacheTime                   8
#define CMD_CacheSize                   9
#define CMD_Timeout                     10
#define CMD_PacketSize                  11

_kernel_oserror *nfs_command(char *arg_string, int argc, int cmd_no, void *pw);


/*
 * SWI handler code
 * ================
 *
 * Return NULL if the SWI is handled successfully; otherwise return
 * a pointer to an error block which describes the error.
 * The veneer code sets the 'V' bit if the returned value is non-NULL.
 * The special value error_BAD_SWI may be returned if you do not
 * implement a SWI; the veneer will arrange for the appropriate
 * standard internationalised error 'SWI value out of range for
 * module NFS' to be returned.
 * The handler may update any of its input registers (R0-R9).
 * pw is the private word pointer ('R12') value passed into the
 * SWI handler entry veneer.
 */
#define NFS_00                          0x0410c0
#ifndef NFS_Mount
#define NFS_Mount                       0x0410c0
#define NFS_MountList                   0x0410c1
#define NFS_SetUser                     0x0410c2
#define NFS_Dismount                    0x0410c3
#define NFS_MountInfo                   0x0410c4
#define NFS_FreeSpace                   0x0410c5
#endif

#define error_BAD_SWI ((_kernel_oserror *) -1)

_kernel_oserror *nfs_swi(int swi_no, _kernel_swi_regs *r, void *pw);

#endif
@


4.2
log
@auto-generated h files from cmhg
@
text
@@


4.1
log
@Initial revision
@
text
@d16 1
a16 1
 * Created by cmhg vsn 5.00 [Jan 11 1995]
d19 2
a20 2
#ifndef __cmhg_defs_h
#define __cmhg_defs_h
d22 120
a141 19
#define  NFS_00                0x0410c0
#define  NFS_Mount             0x0410c0
#define  NFS_MountList         0x0410c1
#define  NFS_SetUser           0x0410c2
#define  NFS_Dismount          0x0410c3
#define  NFS_MountInfo         0x0410c4
#define  NFS_FreeSpace         0x0410c5

#define  CMD_NFS               0
#define  CMD_NFSInfo           1
#define  CMD_NFSBoot           2
#define  CMD_Logon             3
#define  CMD_Mount             4
#define  CMD_Dismount          5
#define  CMD_Bye               6
#define  CMD_Free              7
#define  CMD_CacheTime         8
#define  CMD_CacheSize         9
#define  CMD_Timeout           10
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
