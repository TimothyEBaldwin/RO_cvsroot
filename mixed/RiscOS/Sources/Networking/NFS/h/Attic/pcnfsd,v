head	4.2;
access;
symbols
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.2
date	99.05.14.12.42.38;	author sbrodie;	state dead;
branches;
next	4.1;

4.1
date	96.11.22.14.49.39;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.39;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.07.40;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#define MAXPATHLEN 1023
#define MAXNAMLEN 255
/*#define PCNFSDPROTO "udp"*/
#define PCNFSDPROTO ((char *) 17)

enum arstat {
        AUTH_RES_OK = 0,
        AUTH_RES_FAKE = 1,
        AUTH_RES_FAIL = 2
};
typedef enum arstat arstat;
bool_t xdr_arstat();


enum pirstat {
        PI_RES_OK = 0,
        PI_RES_NO_SUCH_PRINTER = 1,
        PI_RES_FAIL = 2
};
typedef enum pirstat pirstat;
bool_t xdr_pirstat();


enum psrstat {
        PS_RES_OK = 0,
        PS_RES_ALREADY = 1,
        PS_RES_NULL = 2,
        PS_RES_NO_FILE = 3,
        PS_RES_FAIL = 4
};
typedef enum psrstat psrstat;
bool_t xdr_psrstat();


struct auth_args {
        char *aa_ident;
        char *aa_password;
};
typedef struct auth_args auth_args;
bool_t xdr_auth_args();


struct auth_results {
        enum arstat ar_stat;
        long ar_uid;
        long ar_gid;
};
typedef struct auth_results auth_results;
bool_t xdr_auth_results();


struct pr_init_args {
        char *pia_client;
        char *pia_printername;
};
typedef struct pr_init_args pr_init_args;
bool_t xdr_pr_init_args();


struct pr_init_results {
        enum pirstat pir_stat;
        char *pir_spooldir;
};
typedef struct pr_init_results pr_init_results;
bool_t xdr_pr_init_results();


struct pr_start_args {
        char *psa_client;
        char *psa_printername;
        char *psa_username;
        char *psa_filename;
        char *psa_options;
};
typedef struct pr_start_args pr_start_args;
bool_t xdr_pr_start_args();


struct pr_start_results {
        enum psrstat psr_stat;
};
typedef struct pr_start_results pr_start_results;
bool_t xdr_pr_start_results();


#define PCNFSDPROG ((u_long)150001)
#define PCNFSDVERS ((u_long)1)
#define PCNFSD_NULL ((u_long)0)
extern void *pcnfsd_null_1();
#define PCNFSD_AUTH ((u_long)1)
extern auth_results *pcnfsd_auth_1();
#define PCNFSD_PR_INIT ((u_long)2)
extern pr_init_results *pcnfsd_pr_init_1();
#define PCNFSD_PR_START ((u_long)3)
extern pr_start_results *pcnfsd_pr_start_1();

@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
