head	4.2;
access;
symbols
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.2
date	99.05.14.12.42.36;	author sbrodie;	state dead;
branches;
next	4.1;

4.1
date	96.11.22.14.49.41;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.41;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.07.38;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#define NFS_PORT 2049
#ifdef PACKETSIZE_COMMAND
extern int NFS_MAXDATA;
#else
#define NFS_MAXDATA 8192
#endif
#define NFS_MAXPATHLEN 1024
#define NFS_MAXNAMLEN 255
#define NFS_FHSIZE 32
#define NFS_COOKIESIZE 4
#define NFS_FIFO_DEV -1
#define NFSMODE_FMT 0170000
#define NFSMODE_DIR 0040000
#define NFSMODE_CHR 0020000
#define NFSMODE_BLK 0060000
#define NFSMODE_REG 0100000
#define NFSMODE_LNK 0120000
#define NFSMODE_SOCK 0140000
#define NFSMODE_FIFO 0010000

enum nfsstat {
        NFS_OK = 0,
        NFSERR_PERM = 1,
        NFSERR_NOENT = 2,
        NFSERR_IO = 5,
        NFSERR_NXIO = 6,
        NFSERR_ACCES = 13,
        NFSERR_EXIST = 17,
        NFSERR_NODEV = 19,
        NFSERR_NOTDIR = 20,
        NFSERR_ISDIR = 21,
        NFSERR_FBIG = 27,
        NFSERR_NOSPC = 28,
        NFSERR_ROFS = 30,
        NFSERR_NAMETOOLONG = 63,
        NFSERR_NOTEMPTY = 66,
        NFSERR_DQUOT = 69,
        NFSERR_STALE = 70,
        NFSERR_REMOTE = 71,
        NFSERR_WFLUSH = 99
};
typedef enum nfsstat nfsstat;
bool_t xdr_nfsstat();


enum ftype {
        NFNON = 0,
        NFREG = 1,
        NFDIR = 2,
        NFBLK = 3,
        NFCHR = 4,
        NFLNK = 5,
        NFSOCK = 6,
        NFBAD = 7,
        NFFIFO = 8
};
typedef enum ftype ftype;
bool_t xdr_ftype();


struct nfs_fh {
        char data[NFS_FHSIZE];
};
typedef struct nfs_fh nfs_fh;
bool_t xdr_nfs_fh();


struct nfstime {
        u_int seconds;
        u_int useconds;
};
typedef struct nfstime nfstime;
bool_t xdr_nfstime();


struct fattr {
        ftype type;
        u_int mode;
        u_int nlink;
        u_int uid;
        u_int gid;
        u_int size;
        u_int blocksize;
        u_int rdev;
        u_int blocks;
        u_int fsid;
        u_int fileid;
        nfstime atime;
        nfstime mtime;
        nfstime ctime;
};
typedef struct fattr fattr;
bool_t xdr_fattr();


struct sattr {
        u_int mode;
        u_int uid;
        u_int gid;
        u_int size;
        nfstime atime;
        nfstime mtime;
};
typedef struct sattr sattr;
bool_t xdr_sattr();


typedef char *filename;
bool_t xdr_filename();


typedef char *nfspath;
bool_t xdr_nfspath();


struct attrstat {
        nfsstat status;
        union {
                fattr attributes;
        } attrstat_u;
};
typedef struct attrstat attrstat;
bool_t xdr_attrstat();


struct sattrargs {
        nfs_fh file;
        sattr attributes;
};
typedef struct sattrargs sattrargs;
bool_t xdr_sattrargs();


struct diropargs {
        nfs_fh dir;
        filename name;
};
typedef struct diropargs diropargs;
bool_t xdr_diropargs();


struct diropokres {
        nfs_fh file;
        fattr attributes;
};
typedef struct diropokres diropokres;
bool_t xdr_diropokres();


struct diropres {
        nfsstat status;
        union {
                diropokres diropres;
        } diropres_u;
};
typedef struct diropres diropres;
bool_t xdr_diropres();


struct readlinkres {
        nfsstat status;
        union {
                nfspath data;
        } readlinkres_u;
};
typedef struct readlinkres readlinkres;
bool_t xdr_readlinkres();


struct readargs {
        nfs_fh file;
        u_int offset;
        u_int count;
        u_int totalcount;
};
typedef struct readargs readargs;
bool_t xdr_readargs();


struct readokres {
        fattr attributes;
        struct {
                u_int data_len;
                char *data_val;
        } data;
};
typedef struct readokres readokres;
bool_t xdr_readokres();


struct readres {
        nfsstat status;
        union {
                readokres reply;
        } readres_u;
};
typedef struct readres readres;
bool_t xdr_readres();


struct writeargs {
        nfs_fh file;
        u_int beginoffset;
        u_int offset;
        u_int totalcount;
        struct {
                u_int data_len;
                char *data_val;
        } data;
};
typedef struct writeargs writeargs;
bool_t xdr_writeargs();


struct createargs {
        diropargs where;
        sattr attributes;
};
typedef struct createargs createargs;
bool_t xdr_createargs();


struct renameargs {
        diropargs from;
        diropargs to;
};
typedef struct renameargs renameargs;
bool_t xdr_renameargs();


struct linkargs {
        nfs_fh from;
        diropargs to;
};
typedef struct linkargs linkargs;
bool_t xdr_linkargs();


struct symlinkargs {
        diropargs from;
        nfspath to;
        sattr attributes;
};
typedef struct symlinkargs symlinkargs;
bool_t xdr_symlinkargs();


typedef char nfscookie[NFS_COOKIESIZE];
bool_t xdr_nfscookie();


struct readdirargs {
        nfs_fh dir;
        nfscookie cookie;
        u_int count;
};
typedef struct readdirargs readdirargs;
bool_t xdr_readdirargs();


struct entry {
        u_int fileid;
        filename name;
        nfscookie cookie;
        struct entry *nextentry;
};
typedef struct entry entry;
bool_t xdr_entry();


struct dirlist {
        entry *entries;
        bool_t eof;
};
typedef struct dirlist dirlist;
bool_t xdr_dirlist();


struct readdirres {
        nfsstat status;
        union {
                dirlist reply;
        } readdirres_u;
};
typedef struct readdirres readdirres;
bool_t xdr_readdirres();


struct statfsokres {
        u_int tsize;
        u_int bsize;
        u_int blocks;
        u_int bfree;
        u_int bavail;
};
typedef struct statfsokres statfsokres;
bool_t xdr_statfsokres();


struct statfsres {
        nfsstat status;
        union {
                statfsokres reply;
        } statfsres_u;
};
typedef struct statfsres statfsres;
bool_t xdr_statfsres();


#define NFS_PROGRAM ((u_long)100003)
#define NFS_VERSION ((u_long)2)
#define NFSPROC_NULL ((u_long)0)
extern void *nfsproc_null_2();
#define NFSPROC_GETATTR ((u_long)1)
extern attrstat *nfsproc_getattr_2();
#define NFSPROC_SETATTR ((u_long)2)
extern attrstat *nfsproc_setattr_2();
#define NFSPROC_ROOT ((u_long)3)
extern void *nfsproc_root_2();
#define NFSPROC_LOOKUP ((u_long)4)
extern diropres *nfsproc_lookup_2();
#define NFSPROC_READLINK ((u_long)5)
extern readlinkres *nfsproc_readlink_2();
#define NFSPROC_READ ((u_long)6)
extern readres *nfsproc_read_2();
#define NFSPROC_WRITECACHE ((u_long)7)
extern void *nfsproc_writecache_2();
#define NFSPROC_WRITE ((u_long)8)
extern attrstat *nfsproc_write_2();
#define NFSPROC_CREATE ((u_long)9)
extern diropres *nfsproc_create_2();
#define NFSPROC_REMOVE ((u_long)10)
extern nfsstat *nfsproc_remove_2();
#define NFSPROC_RENAME ((u_long)11)
extern nfsstat *nfsproc_rename_2();
#define NFSPROC_LINK ((u_long)12)
extern nfsstat *nfsproc_link_2();
#define NFSPROC_SYMLINK ((u_long)13)
extern nfsstat *nfsproc_symlink_2();
#define NFSPROC_MKDIR ((u_long)14)
extern diropres *nfsproc_mkdir_2();
#define NFSPROC_RMDIR ((u_long)15)
extern nfsstat *nfsproc_rmdir_2();
#define NFSPROC_READDIR ((u_long)16)
extern readdirres *nfsproc_readdir_2();
#define NFSPROC_STATFS ((u_long)17)
extern statfsres *nfsproc_statfs_2();

@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
