head	4.4;
access;
symbols
	NFS-3_27:4.4
	NFS-3_26:4.4
	NFS-3_25:4.4
	NFS-3_24:4.4
	NFS-3_23:4.4
	NFS-3_22:4.4
	NFS-3_21:4.4
	NFS-3_20:4.3
	NFS-3_19:4.3
	sbrodie_NFS_dev_merge:4.2.2.2
	NFS-3_18-4_22_2_4:4.2.2.2
	NFS-3_18-4_22_2_3:4.2.2.1
	NFS-3_18-4_22_2_2:4.2.2.1
	NFS-3_18-4_22_2_1:4.2
	sbrodie_NFS_dev:4.2.0.2
	sbrodie_NFS_dev_bp:4.2
	NFS-3_18:4.2
	NFS-3_17:4.2
	NFS-3_16:4.2
	NFS-3_15:4.2
	NFS-3_14:4.2
	NFS-3_13:4.2
	NFS-3_12:4.2
	NFS-3_11:4.2
	NFS-3_10:4.2
	NFS-3_09:4.2
	NFS-3_08:4.2
	NFS-3_07:4.2
	NFS-3_06:4.2
	NFS-3_05:4.2
	NFS-3_04:4.2
	NFS-3_02:4.2
	NFS-3_01:4.2
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.4
date	2004.07.30.11.42.15;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2003.12.10.14.55.10;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	99.05.14.12.42.24;	author sbrodie;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.22.14.49.36;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2001.06.12.13.37.42;	author sbrodie;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2001.07.02.11.04.35;	author sbrodie;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.22.14.49.36;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.07.20;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Fixed a memory leak that occurred in some circumstances when a non-exact
name was supplied (eg "Fred" when the server has "fred" or "Fred,ffb").

Version 3.21. Tagged as 'NFS-3_21'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*	H.CACHE

Purpose : RISC OS NFS rpc wrappers to support cacheing of information.

History :
Date	Who    Comments
-----------------------------------------------------------------------------
07/09/92 ??    Initial version
13/1/95  CP    Added prototype for cancel_all_caches_by_fhandle
****************************************************************************/

#ifndef __NFSCACHE_H
#define __NFSCACHE_H
#ifndef __NFSTYPES_H
#include "NFSTypes.h"
#endif

extern int get_cache_size(void);
extern void free_cache(void);
extern void show_histogram(void);
extern _kernel_oserror *set_cache_size( int size);

extern void cancel_all_caches_by_mount_point( MountPoint * );
extern void cancel_all_caches_by_fhandle( RO_nfs_fh3 *fhandle );

extern _kernel_oserror *nfs_getattr( fattr3 **, MountPoint *, RO_nfs_fh3 * );
extern _kernel_oserror *nfs_setattr( fattr3 **, MountPoint *, RO_nfs_fh3 *, sattr3 * );
extern _kernel_oserror *nfs_lookup( RO_nfs_fh3 *, fattr3 **, MountPoint *, RO_nfs_fh3 *, char **, bool_t );

extern void nfs_internal_dirplus_update
(
        MountPoint *mount_point,
        RO_nfs_fh3 *dir,
        RO_nfs_fh3 *file,
        char *filename,
	fattr3 *nattr
);


/*
        Read up to NFS_MAXDATA (=8K) from a file
 */
extern _kernel_oserror *nfs_read(
        int *readres_len,
        char *readres_data,
        MountPoint *mount_point,
        RO_nfs_fh3 *fhandle,
        unsigned long offset,
        int count);


/*
        Read many bytes (no limit on number) from a file. This sends multiple requests
        to allow interleaving of packets for better throughput.
*/
extern _kernel_oserror *nfs_readmany(
        int *readres_len,
        char *readres_data,
        MountPoint *mount_point,
        RO_nfs_fh3 *fhandle,
        unsigned long offset,
        int count);

/*
        Write up to NFS_MAXDATA (=8K) to a file
 */
extern _kernel_oserror *nfs_write(
        fattr3 **nattr,
        MountPoint *mount_point,
        RO_nfs_fh3 *fhandle,
        unsigned long offset,
        char *data,
        int count);

/*
        Write many bytes (no limit on number) to a file. This sends multiple requests
        to allow interleaving of packets for better throughput.
*/
extern _kernel_oserror *nfs_writemany(
        fattr3 **nattr,
        MountPoint *mount_point,
        RO_nfs_fh3 *fhandle,
        unsigned long offset,
        char *data,
        int count);

extern _kernel_oserror *nfs_write_with_appendum( fattr3 **, MountPoint *, RO_nfs_fh3 *, unsigned long, bytes_with_appendum *, unsigned );
extern _kernel_oserror *nfs_create( RO_nfs_fh3 *, fattr3 **, MountPoint *, RO_nfs_fh3 *, char *, sattr3 * );
extern _kernel_oserror *nfs_remove( MountPoint *, RO_nfs_fh3 *, char * );
extern _kernel_oserror *nfs_rename( MountPoint *, RO_nfs_fh3 *, char *, RO_nfs_fh3 *, char * );
extern _kernel_oserror *nfs_mkdir( RO_nfs_fh3 *, fattr3 **, MountPoint *, RO_nfs_fh3 *, char *, sattr3 * );
extern _kernel_oserror *nfs_rmdir( MountPoint *, RO_nfs_fh3 *, char * );
extern _kernel_oserror *nfs_readdir( MountPoint *, RO_nfs_fh3 *, cookie3, int, dirlist ** );

#endif
@


4.3
log
@Merged in branch sbrodie_NFS_dev.
Also added -c90 to CFLAGS so that it will build with recent compilers.
Warning: provokes compiler bugs in many recent compilers!

Version 3.19. Tagged as 'NFS-3_19'
@
text
@d42 1
a42 1
extern _kernel_oserror *nfs_lookup( RO_nfs_fh3 *, fattr3 **, MountPoint *, RO_nfs_fh3 *, char ** );
@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d34 1
d42 1
a42 1
extern _kernel_oserror *nfs_lookup( RO_nfs_fh3 *, fattr3 **, MountPoint *, RO_nfs_fh3 *, char * );
@


4.2.2.1
log
@  Fixed some cache problems.
Detail:
  Untyped and lxa files now work again.
  Routines which call nfs_lookup now provide a char * into which the Real
    NFS Leafname can be stored.  This avoids problems with type extended
    files not being found, flushed from the cache, and re-sought - even
    when the files were there anyway.  Fixes the problems with not being
    able to write or delete filetype extended files too.  This should
    speed lots of ops up since it is removing the need for another GETATTR3
    call and/or a directory search.
  I've added in some more of the attribute updating to prevent directory
    attributes being thrown out of the cache when the directory changes
    in a predictable manner (e.h. deleting a file in the directory does
    not cause the cache entries for the directory to be scrapped - simply
    updated from the attributes in the REMOVE3 result - provided the dir
    hadn't changed since the last time we read its attributes.  Fixing this
    means you can delete files on an NFS mount much more quickly now.
Notes:
  Softlinks are a complete disaster for the cache still :-(
  I'm sure it should be possible to search the lookup cache for matching
    leafnames instead of doing a directory search every time - if it is and
    is implemented, this should speed things up a lot.
Admin:
  Tested briefly, seems to work at a basic level but still undergoing testing.


Version 3.18, 4.22.2.2. Tagged as 'NFS-3_18-4_22_2_2'
@
text
@d41 1
a41 1
extern _kernel_oserror *nfs_lookup( RO_nfs_fh3 *, fattr3 **, MountPoint *, RO_nfs_fh3 *, char ** );
@


4.2.2.2
log
@  *Histogram filesystem command added to dump out the cache histograms.
Detail:
  Works - shows the distribution of the cache entries in the hash table.
Admin:
  Builds.


Version 3.18, 4.22.2.4. Tagged as 'NFS-3_18-4_22_2_4'
@
text
@a33 1
extern void show_histogram(void);
@


4.1
log
@Initial revision
@
text
@d37 1
a37 1
extern void cancel_all_caches_by_fhandle( nfs_fh *fhandle );
d39 12
a50 3
extern _kernel_oserror *nfs_getattr( fattr **, MountPoint *, nfs_fh * );
extern _kernel_oserror *nfs_setattr( fattr **, MountPoint *, nfs_fh *, sattr * );
extern _kernel_oserror *nfs_lookup( nfs_fh *, fattr **, MountPoint *, nfs_fh *, char * );
d60 2
a61 2
        nfs_fh *fhandle,
        unsigned offset,
d73 2
a74 2
        nfs_fh *fhandle,
        unsigned offset,
d81 1
a81 1
        fattr **nattr,
d83 2
a84 2
        nfs_fh *fhandle,
        unsigned offset,
d93 1
a93 1
        fattr **nattr,
d95 2
a96 2
        nfs_fh *fhandle,
        unsigned offset,
d100 7
a106 7
extern _kernel_oserror *nfs_write_with_appendum( fattr **, MountPoint *, nfs_fh *, unsigned, bytes_with_appendum *, unsigned );
extern _kernel_oserror *nfs_create( nfs_fh *, fattr **, MountPoint *, nfs_fh *, char *, sattr * );
extern _kernel_oserror *nfs_remove( MountPoint *, nfs_fh *, char * );
extern _kernel_oserror *nfs_rename( MountPoint *, nfs_fh *, char *, nfs_fh *, char * );
extern _kernel_oserror *nfs_mkdir( nfs_fh *, fattr **, MountPoint *, nfs_fh *, char *, sattr * );
extern _kernel_oserror *nfs_rmdir( MountPoint *, nfs_fh *, char * );
extern _kernel_oserror *nfs_readdir( MountPoint *, nfs_fh *, nfscookie, int, dirlist ** );
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
