head	4.6;
access;
symbols
	NFS-3_27:4.6
	NFS-3_26:4.6
	NFS-3_25:4.6
	NFS-3_24:4.6
	NFS-3_23:4.6
	NFS-3_22:4.6
	NFS-3_21:4.5
	NFS-3_20:4.5
	NFS-3_19:4.5
	sbrodie_NFS_dev_merge:4.5
	NFS-3_18-4_22_2_4:4.5
	NFS-3_18-4_22_2_3:4.5
	NFS-3_18-4_22_2_2:4.5
	NFS-3_18-4_22_2_1:4.5
	sbrodie_NFS_dev:4.5.0.2
	sbrodie_NFS_dev_bp:4.5
	NFS-3_18:4.5
	NFS-3_17:4.5
	NFS-3_16:4.5
	NFS-3_15:4.5
	NFS-3_14:4.5
	NFS-3_13:4.5
	NFS-3_12:4.5
	NFS-3_11:4.5
	NFS-3_10:4.5
	NFS-3_09:4.5
	NFS-3_08:4.4
	NFS-3_07:4.4
	NFS-3_06:4.4
	NFS-3_05:4.4
	NFS-3_04:4.3
	NFS-3_02:4.2
	NFS-3_01:4.2
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.6
date	2018.01.29.21.25.19;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	m4PdBzvfqs9AFOoA;

4.5
date	2000.03.20.15.52.18;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	99.12.06.15.58.06;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.11.29.13.39.37;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.05.14.12.42.30;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.40;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.22.14.49.40;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.07.46;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Makefile recreated from fragments
Use Push/Pull macros in the assembler to reduce single reg warnings.
Fix up headers from AsmUtils.

Version 3.22. Tagged as 'NFS-3_22'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*	H.TYPES

Purpose : Structures and types used by RISC OS NFS

History :
Date	   Who    Comments
-----------------------------------------------------------------------------
Sept 1992  ??     Original version
12/1/95    CP     Added new struct/type NFS_Directory_T to contain a
	    	  complete directory of information.
	    	  Commented out original version 'dirstep'
	    	  Added type BOOL (= int).
05/05/95   RWB    Copied mount.h into local h directory as against rpcsrv.output
****************************************************************************/


#ifndef __NFSTYPES_H
#define __NFSTYPES_H

#ifndef __RPC_HEADER__
#include "rpc/rpc.h"
#endif
#ifndef NFSPROC_NULL
#include "nfs_prot.h"
#endif
#ifndef MOUNTPROC_NULL
#include "mount.h"  /* Changed Fri 05th May 1995 */
#endif
#ifndef PCNFSD_NULL
#include "pcnfsd.h"
#endif
#ifndef SIXTYFOUR_HEADER
#define NO_SIXTYFOUR_TYPE_DECLS
#include "AsmUtils/SixtyFour.h"
#endif

/* Crafty (crufty? :-) macro taken from March 1999 issue of C Vu (http://www.accu.org/)
 * for compile-phase assertions.  Should the (compile-time constant) conditional
 * be untrue, a bad array declaration is made causing the compiler to throw an
 * error stopping the compilation.
 */
#define COMPILE_TIME_ASSERT(condition)\
{ void *_assertion_check_[-1+2*!!(condition)]; (void) _assertion_check_; }


/* This structure is used to hold a self-consistent NFS3 filehandle.  The pointer in
 * the fh3 member is always set to point to the opaque member, and in this way we
 * can ensure that the data walks around with the filehandle and doesn't leak when an
 * automatic nfs_fh3 variable goes out of scope.
 *
 * However, it is IMPERATIVE that the fh3xxx functions below are used to manipulate
 * these - particular for copy and comparison operations, to ensure that the pointer
 * is kept pointing at the opaque field.  NFS2 filehandles can be held by this
 * structure too because we know they have a constant length (and NFS_FHSIZE < NFS3_FHSIZE)
 */
typedef struct RO_nfs_fh3
{
        nfs_fh3                 fh3;
        char                    opaque[NFS3_FHSIZE];
}       RO_nfs_fh3;

/* Provide abstract copy and compare operation */
extern int fh3cmp(const RO_nfs_fh3 *, const RO_nfs_fh3 *);
extern RO_nfs_fh3 *fh3cpy(RO_nfs_fh3 *, const RO_nfs_fh3 *);
extern RO_nfs_fh3 *fh3cpy_from_xdr(RO_nfs_fh3 *, const nfs_fh3 *);

/* Upcasting and downcasting functions for filehandles */
extern nfs_fh3 *fh3cpy_from_fhandle(nfs_fh3 *, const nfs_fh *);
extern nfs_fh *fh2cpy_from_fh3(nfs_fh *, const nfs_fh3 *);

typedef int YesNoAnswer;

typedef int BOOL;

typedef struct Chain_Link
{
        struct Chain_Link       *forwards;
        struct Chain_Link       *backwards;
        int                     wrapper;
}       Chain_Link;

typedef struct Chain_Header
{
        Chain_Link              *forwards;
        Chain_Link              *header_indicator;      /* = NULL to indicate this is a header */
        Chain_Link              *backwards;
}       Chain_Header;

typedef struct Host
{
        char                    *host_name;
        Chain_Header            nfs_clients;
        Chain_Header            mount_clients;
        Chain_Header            pcnfsd_clients;
        Chain_Header            quota_clients;
        int                     usage_count;
        u_long                  nfs_version;
        u_long                  pcnfs_version;
        Chain_Link              link;
        Chain_Header            mount_points;
}       Host;

typedef struct unused_client
{
        Chain_Link              link;
        YesNoAnswer             in_use;
        CLIENT                  *client;
        u_long                  program;
        u_long                  version;
}       unused_client;

typedef struct UserGroupNames
{
        char                    name[USERNAMELEN];
}       UserGroupNames;

typedef struct UserSpecification
{
        char                    *name;
        Host                    *host;
        int                     usage_count;
        Chain_Link              link;
        uid3                    uid;
        gid3                    gid;
        int                     len;
        int                     umask;
        gid3                    gids[NGRPS];
        AUTH                    *authorisation;
        UserGroupNames          gnames[NGRPS+1];
}       UserSpecification;

typedef struct MountPoint
{
        char                    *mount_point_name;
        Host                    *host;
        char                    *mount_path;
        RO_nfs_fh3              fhandle;
        UserSpecification       *user;
        Chain_Header            open_files;
        YesNoAnswer             being_dismounted;
        Chain_Link              all_mount_points_link;
        Chain_Link              mount_points_per_host_link;
}       MountPoint;

typedef enum RISCOSFileType
{
        FileType_None           = 0,
        FileType_File           = 1,
        FileType_Directory      = 2,
        FileType_Image          = 3
}       RISCOSFileType;

typedef struct RISCOSAttributes
{
        unsigned long           execute_address;        /* This must preceed load_address */
        unsigned long           load_address;           /* so that 5-byte time conversions works */
        int                     file_length;
        int                     access;
        RISCOSFileType          type;
}       RISCOSAttributes;

typedef struct nfs_file_description
{
        fattr3                  attr;
        char                   *name;
        int                     chars_before_suffix;
        unsigned long           load_address;
        unsigned long           execute_address;
        int                     file_is_lxa:1;
}       nfs_file_description;

typedef struct nfs_file_descriptor
{
        MountPoint             *mp;
        RO_nfs_fh3              dir;
        RO_nfs_fh3              file;
        nfs_file_description    desc;
}       nfs_file_descriptor;

typedef struct riscos_file_description
{
        RISCOSAttributes        attr;
        char                    *name;
}       riscos_file_description;

typedef struct SpoolFileDetails
{
        char                    *printername;
        char                    *username;
        char                    *options;
}       SpoolFileDetails;

typedef struct OpenFile
{
        int                     fileswitch_handle;
        unsigned long           sequential_file_pointer;
        SpoolFileDetails        *spool_details;
        YesNoAnswer             read_only;
        nfs_file_descriptor     nfs_fd;
        Chain_Link              link;
}       OpenFile;

typedef struct DirectoryPoint
{
        MountPoint              *mount_point;
        char                    *full_path;
}       DirectoryPoint;


/********* disabled by CP 12/1/95 **********************************

typedef struct dirstep
{
        MountPoint              *mount_point;
        nfs_fh3                  dir;
        entry                   dummy_start;
        entry                   *this;
        YesNoAnswer             eof_after_last;
}       dirstep;

*******************************************************************/

typedef union appendum
{
        struct
        {
                unsigned long load_address;
                unsigned long execute_address;
        }       lxa;
        char    appendum[ 8 ];
}       appendum;

#define lsizeof(object) ((unsigned long)sizeof(object))

typedef struct bytes_with_appendum
{
        char *bytes;
        appendum bit_on_the_end;
}       bytes_with_appendum;

typedef struct writeargs_with_appendum {
        nfs_fh file;
        u_int beginoffset;
        u_int offset;
        u_int totalcount;
        struct {
                u_int data_len;
                bytes_with_appendum *data_val;
        } data;
} writeargs_with_appendum;

typedef struct WRITE3args_with_appendum {
        nfs_fh3 file;
        offset3 offset;
        count3 count;
        stable_how stable;
        struct {
                u_int data_len;
                bytes_with_appendum *data_val;
        } data;
} WRITE3args_with_appendum;

#endif
@


4.5
log
@  Access permission code overhaul.
  Supplementary group code improved.
Detail:
  *NFSInfo now shows the group names as well as the group IDs for
    both your primary and supplementary GIDs.
  access.c now uses the supplementary GIDs to help determine whether
    or not you are allowed to read/write a file.
  access.c now provides the NFS->RISC OS attribute mapping - "Owner"
    attributes being UNIX's user/group access; "Public" being the
    UNIX other access.
  The end result of these changes should be that your access rights to
    any object on the NFS server should match those you would expect
    from a UNIX shell logged in with the same ACLs as those you get
    via PCNFS.
Admin:
  Tested on Risc PC.

Version 3.09. Tagged as 'NFS-3_09'
@
text
@d48 1
a48 1
#include "SixtyFour.h"
@


4.4
log
@  Now uses PCNFS version 2 to authenticate.
Detail:
  Group-writable directories should now be writable to.
  setgid directories should cause created objects to take on
    the directory group ownership instead of the user's primary
    GIF
  *NFSInfo output enhanced to list all the additional group IDs
    and the default umask being applied to each authentication.
Admin:
  Tested on normal home mount and on TWC mount.

Version 3.05. Tagged as 'NFS-3_05'
@
text
@d126 4
d143 1
@


4.3
log
@  32-bit compatibility added.
  Removed obsolete assembler sources
Detail:
  Now imports assembler stuff from AsmUtils.
Admin:
  Built RAM build.
  Requires AsmUtils 0.02 or later.

Version 3.03. Tagged as 'NFS-3_03'
@
text
@d112 1
d135 3
@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d47 1
@


4.1
log
@Initial revision
@
text
@d46 37
a101 7
typedef struct unused_client
{
        Chain_Link              link;
        YesNoAnswer             in_use;
        CLIENT                  *client;
}       unused_client;

d110 1
d115 10
d131 2
a132 2
        unsigned int            uid;
        unsigned int            gid;
d141 1
a141 1
        nfs_fh                  fhandle;
d159 2
a160 2
        int                     execute_address;        /* This must preceed load_address */
        int                     load_address;           /* so that 5-byte time conversions works */
d168 1
a168 1
        fattr                   attr;
d171 2
a172 2
        int                     load_address;
        int                     execute_address;
d179 2
a180 2
        nfs_fh                  dir;
        nfs_fh                  file;
d200 1
a200 1
        int                     sequential_file_pointer;
d219 1
a219 1
        nfs_fh                  dir;
d231 2
a232 2
                int     load_address;
                int     execute_address;
d237 2
d256 10
a265 10

/* Added by CP, 12/1/95 */

typedef struct NFS_Directory_S
{
   MountPoint *pmpMountpoint;    /* where the directory is mounted */
   nfs_fh     fhHandle;       	 /* NFS handle to directory */
   entry      *peFirstEntry;     /* first entry in linked list */
} NFS_Directory_T;

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
