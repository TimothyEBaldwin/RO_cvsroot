head	4.6;
access;
symbols
	NFS-3_27:4.6
	NFS-3_26:4.6
	NFS-3_25:4.6
	NFS-3_24:4.5
	NFS-3_23:4.5
	NFS-3_22:4.5
	NFS-3_21:4.5
	NFS-3_20:4.5
	NFS-3_19:4.5
	sbrodie_NFS_dev_merge:4.4.2.1
	NFS-3_18-4_22_2_4:4.4.2.1
	NFS-3_18-4_22_2_3:4.4.2.1
	NFS-3_18-4_22_2_2:4.4
	NFS-3_18-4_22_2_1:4.4
	sbrodie_NFS_dev:4.4.0.2
	sbrodie_NFS_dev_bp:4.4
	NFS-3_18:4.4
	NFS-3_17:4.4
	NFS-3_16:4.4
	NFS-3_15:4.4
	NFS-3_14:4.4
	NFS-3_13:4.4
	NFS-3_12:4.3
	NFS-3_11:4.3
	NFS-3_10:4.3
	NFS-3_09:4.3
	NFS-3_08:4.3
	NFS-3_07:4.3
	NFS-3_06:4.3
	NFS-3_05:4.3
	NFS-3_04:4.2
	NFS-3_02:4.2
	NFS-3_01:4.2
	NFS-3_00:4.2
	NFS-2_37:4.1
	NFS-2_36:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	NFS-2_35:4.1
	Spin_merge:4.1.7.1
	Spinner_23Sep1998_destend:4.1
	Spinner_23Sep1998_srcend:4.1.7.1
	Spinner_23Sep1998_srcbegin:4.1.7.1
	Spinner_23Sep1998_destbegin:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_13May1998_bp:4.1
	Ursula_13May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	pwombwel_2_32:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.6
date	2018.03.07.21.22.46;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	sKJZhgBEKf2WsztA;

4.5
date	2003.12.10.14.55.10;	author bavison;	state Exp;
branches;
next	4.4;

4.4
date	2000.06.27.14.45.03;	author sbrodie;	state Exp;
branches
	4.4.2.1;
next	4.3;

4.3
date	99.12.06.15.58.06;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.05.14.12.42.31;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.22.14.49.40;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.4.2.1
date	2001.06.18.12.31.26;	author sbrodie;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.22.14.49.40;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.07.47;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Store lxa files verbatim, without appendum
Files saved with load & exec address (as opposed to a filetype and the top nybble of load set to 0xFFF) would be extended by 8 bytes in order to hide the true load/exec for later retrieval.
While useful if only ever saving and retrieving from the RISC OS viewpoint, it would create apparently corrupt or overlong file if you wanted to do any analysis on the NFS server end. Given load/exec addresses are deprecated, change NFS to behave like LanManFS and just denote ",lxa" suffixed files with the appropriate icon in the Filer and a made up load/exec address.

pathmunge.c/_GBPB.c/V2support.c/_Args.c/_File.c/PutBytesX.c/Static.c/Changeinfo.c: Switch out 8 byte appending code. Give the file a proper date stamp instead when viewed on Unix.
_Open.c: Switch out the 8 byte appendum stuff, and use a common OS_Word 14 clock function.
Statics.h/Modulewrap.c: Compute a substitute load/exec using the same algorithm as LanManFS (the Kernel's address rounded down to 1MB). Use cmhg finalise function instead of atexit().

Also
MakeFile: pass in predefine DEBUG for debug builds.
cmhg/NFSHdr: remove *Histogram debug command except when debugging. Add finalise handler.
Commands.c/Commands.h: remove *Histogram debug command except when debugging.
Utils.c: delete unused long long support functions. Add a new time getting support function.
Utils.h: new time getting support function.

Tested with a handful of area saves using *Save, checking the file size when viewed at the server end was correct not 8 bytes longer.

Version 3.25. Tagged as 'NFS-3_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
        RISC OS NFS utilities
*/

#ifndef __NFSUTILS_H
#define __NFSUTILS_H
#ifndef __NFSTYPES_H
#include "NFSTypes.h"
#endif

extern void space_reduce( char *source );
extern _kernel_oserror *new_user( UserSpecification **, char *, Host *, unsigned int, unsigned int , AUTH *, u_int, gid3 *, int);
extern _kernel_oserror *release_user( UserSpecification * );
extern _kernel_oserror *readargs_getstring( char **, int *, int );
extern _kernel_oserror *new_host( Host **, char * );
extern _kernel_oserror *askfor_password( char ** );
extern _kernel_oserror *release_host( Host * );
extern void junk_clients ( Chain_Header * );
extern _kernel_oserror *initialise_nfs_version ( Host * );
extern _kernel_oserror *initialise_pcnfs_version ( Host * );
extern _kernel_oserror *utils_setnowcs(unsigned long *, unsigned long *);

extern MountPoint *find_mount( char * );

typedef struct {
        u_long   usage;         /* current usage (if quota active) */
        u_long   slim;          /* soft limit (if quota active) */
        u_long   hlim;          /* hard limit (if quota active) */
        u_long   bsize;         /* block size (if quota active, for space only) */
        u_long   timeleft;      /* time left for over quota */
        } utils_quotastr;

typedef struct {
        bool_t   active_quota;  /* indicates whether quota is active */

        union {
                struct {
                        utils_quotastr space,   /* quota on disc space */
                                       files;   /* quota on number of files */
                       } quota;

                struct {
        /* careful multiplying the numbers by bsize. They are so large they can go negative */
                        u_long  bsize;          /* size of a block on the filing system */
                        u_long  blocks;         /* total number of bsize blocks on the filing system */
                        u_long  bfree;          /* total number of bsize blocks on the filing system */
                        u_long  bavail;         /* the number of bsize blocks available to non-privileged users */
                       } statfs;
               } sp;
} utils_spacestr;

/*
        Get the space quota information for the mount point
        [usage] [quota] and [limit] are as displayed by quota - v
        if quotas are not defined on this mount then it returns the statfs info.
*/
extern _kernel_oserror *utils_getfsspace(
                        utils_spacestr   *space,         /* values filled in on return */
                                  char   *mount_name );  /* input mount name */

/*
   Get the create access for the current mount point if there is a special one
   defined by variable "NFS$CreateAccess_foo" where foo is the mount point name,
   else get the value of variable "NFS$CreateAccess".
   If that isn't defined return -1.
   The returned value, if not -1 will only have valid access bits set:
        NFSMODE_OTHERS_WRITE
        NFSMODE_OTHERS_READ
        NFSMODE_GROUP_WRITE
        NFSMODE_GROUP_READ
        NFSMODE_USER_WRITE
        NFSMODE_USER_READ
*/
extern int utils_getcreateaccess(nfs_file_descriptor *ndesc);

#endif
@


4.5
log
@Merged in branch sbrodie_NFS_dev.
Also added -c90 to CFLAGS so that it will build with recent compilers.
Warning: provokes compiler bugs in many recent compilers!

Version 3.19. Tagged as 'NFS-3_19'
@
text
@d35 1
@


4.4
log
@  Changes to error handling in host record creation.
Detail:
  The functions called to establish whether a remote host supports
    PCNFSv2, Mount v3 and NFS v3 were not being very helpful with
    errors - always setting the NFS version supported to 2 on an
    error.  The functions now use clnt_call() directly so they can
    test the fn result for RPC_PROGVERSMISMATCH and only revert
    the version number in that case and generate real errors in other
    failure cases (e.g. Escape)
  Group names blanked out on creation of UserSpecification objects.
    Data was being left uninitialised if the group name was unavailable
    which screwed up the output of *NFSInfo.
Admin:
  Tested against an NFS2 only server and an NFS3 capable server.
  Correct reporting of Escape requires changes to TCPIPLibs (rpclib).
    These are ongoing.

Version 3.13. Tagged as 'NFS-3_13'
@
text
@d41 2
a42 1
        u_long   hlim;        /* hard limit (if quota active) */
@


4.4.2.1
log
@  Added new SWI NFS_FreeSpace64
Detail:
  This SWI provides 64-bit free space information to external users.
    It's SWI number is &41506.  It's register usage is identical to
    that of the Free module's reason code 4 (PRM 5a-257)
  If NFS$NoQuotas is set, you will always be shown the disc parameters in
    preference to the quota information.
Admin:
  Desktop builds require Free 0.37 or later to use this new SWI.
  Tested with softloaded Free and NFS - it reports sol's /export/home
    statistics correctly.


Version 3.18, 4.22.2.3. Tagged as 'NFS-3_18-4_22_2_3'
@
text
@d41 1
a41 2
        u_long   hlim;          /* hard limit (if quota active) */
        u_long   bsize;         /* block size (if quota active, for space only) */
@


4.3
log
@  Now uses PCNFS version 2 to authenticate.
Detail:
  Group-writable directories should now be writable to.
  setgid directories should cause created objects to take on
    the directory group ownership instead of the user's primary
    GIF
  *NFSInfo output enhanced to list all the additional group IDs
    and the default umask being applied to each authentication.
Admin:
  Tested on normal home mount and on TWC mount.

Version 3.05. Tagged as 'NFS-3_05'
@
text
@d33 2
a34 2
extern u_long initialise_nfs_version ( Host * );
extern u_long initialise_pcnfs_version ( Host * );
@


4.2
log
@  Now supports NFS version 3.
Detail:
  All client-server calls now use the superior NFS3 protocol.
  This particularly benefits directory enumeration and *NFSInfo
    is now reporting 80%+ cache hit rates which is a significant
    improvement (over 5% better - some hosts report 85%+)
  Hashing algorithms improved to increase cache hits (the cache
    algorithm doesn't use parts of names after a comma, so that
    the hash value for !Run is the same as the hash value for
    !Run,feb - which helps the cache hit rate a lot).   Directory
    browsing on the desktop appears noticably faster too.
  The module now has the original protocol (.x) files defining
    the RPC protocols being used (NFS, mount, pcnfs, rquota)
    and uses them to generate header files, XDR implementations,
    and client stubs automatically, instead of having hand
    written versions.
  NFS workspace comes from a dynamic area where possible.
Admin:
  Supporting documentation:
    Acorn NFS Software Functional Specification (1215,250/FS)
    RFC1014, RFC1057, RFC1094, RFC1813
  Tested in several desktop machines for everyday use against
    both NFS2 and NFS3 servers.
  Requires rpcgen 0.01 or later
    (CVS source: Tools/Sources/rpcgen  tag: rpcgen-0_01 or later)
    (CVS binary: RiscOS/Library  tag: Library-0_19 or later)
  Requires TCPIPLibs 5.13 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs  tag: TCPIPLibs-5_13)

Version 3.00. Tagged as 'NFS-3_00'
@
text
@d26 1
a26 1
extern _kernel_oserror *new_user( UserSpecification **, char *, Host *, unsigned int, unsigned int , AUTH * );
d34 1
@


4.1
log
@Initial revision
@
text
@d32 3
a35 3
extern void very_long_add( unsigned int *, unsigned int *, unsigned int, unsigned int, unsigned int, unsigned int );
extern void very_long_multiply( unsigned int *, unsigned int *, unsigned int, unsigned int, unsigned int, unsigned int );
extern void very_long_subtract( unsigned int *, unsigned int *, unsigned int, unsigned int, unsigned int, unsigned int );
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
