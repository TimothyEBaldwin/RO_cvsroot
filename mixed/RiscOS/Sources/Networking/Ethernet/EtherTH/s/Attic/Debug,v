head	1.2;
access;
symbols
	EtherTH-0_25:1.1.1.1
	EtherTH-0_24:1.1.1.1
	EtherTH-0_23:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.03.11.00.12.59;	author jballance;	state dead;
branches;
next	1.1;
commitid	EKCvCR7DacKJ24Jz;

1.1
date	2016.11.28.22.57.40;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O4jKLeG7FCv9UWvz;

1.1.1.1
date	2016.11.28.22.57.40;	author jballance;	state Exp;
branches;
next	;
commitid	O4jKLeG7FCv9UWvz;


desc
@@


1.2
log
@    Convert to C based component with import of re-written module form Colin Granville
Detail:
Admin:
    tested in iMx6

Version 0.26. Tagged as 'EtherTH-0_26'
@
text
@; Copyright 2016 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
 [ Debug
; subroutine to dump mbuf chain to serial port
; in a1-> start of mbuf chain
PrintMBUF
        Entry   "a1-a4, v1-v4"
        mov     v4, a1
2       ldr     v2, [v4, #mbdoffset-mbufstruct]
        add     v2, v2, v4
;        DebugReg v2, "srce "
        ldr     v3, [v4, #mbdlen-mbufstruct]
        DebugRegNCR v3, "length "
1       ldrb    a1, [v2]
        mov     a1, a1, lsr #4
        and     a1, a1, #&f
        cmp     a1, #&9
        add     a1, a1, #&30
        addgt   a1, a1, #&07
        bl      DebugTX
        ldrb    a1, [v2], #1
        and     a1, a1, #&f
        cmp     a1, #&9
        add     a1, a1, #&30
        addgt   a1, a1, #&07
        bl      DebugTX
        mov     a1, #&20
        bl      DebugTX
        subs    v3, v3, #1
        bgt     %bt1
        ldr     a1, [v4, #mbnextptr-mbufstruct]
        teq     a1, #0
        movne   v4, a1
        bne     %bt2
        mov     a1, #&0d
        bl      DebugTX
        mov     a1, #&0a
        bl      DebugTX
        EXIT

PrintMACAddr                            ; print mac address from pointer a1
                                        ; first 4 bytes ar ptr
                                        ; last 2 at ptr+4
        Entry   "a1-a4, v1-v5"
        mov     v1, a1           ; pointer
        ADR     v3, hextab
        mov     v5, #6
09      ldrb    v2, [v1], #1
        mov     v2, v2, lsl #24
        MOV     v4, #2
10      LDRB    a1, [v3, v2, LSR #28]
        bl      DebugTX
        MOV     v2, v2, LSL #4
        SUBS    v4, v4, #1
        BNE     %BT10
        MOV     a1, #':'
        bl      DebugTX
        subs    v5, v5, #1
        bgt     %bt09
        MOV     a1, #' '
        bl      DebugTX

        EXIT
; No initialisation; assumes the serial
; port is already set up

; In all cases, sb(r12) must be HAL workspace ptr

; in: a1 = character to TX
DebugHALPrint
        Push    "a1-a4,v1"
        MOV     v1, lr
10      LDRB    a1, [v1], #1
        TEQ     a1, #0
        BEQ     %FT20
        BL      DebugTX
        B       %BT10
20      ADD     v1, v1, #3
        BIC     lr, v1, #3
        Pull    "a1-a4,v1"
        MOV     pc, lr

DebugHALPrintReg ; Output number on top of stack to the serial port
        Push    "a1-a4,v1-v4,lr"
        LDR     v2, [sp,#9*4]
        ADR     v3, hextab
        MOV     v4, #8
10      LDRB    a1, [v3, v2, LSR #28]
        bl      DebugTX
        MOV     v2, v2, LSL #4
        SUBS    v4, v4, #1
        BNE     %BT10
        MOV     a1, #13
        bl      DebugTX
        MOV     a1, #10
        bl      DebugTX

        Pull    "a1-a4,v1-v4,lr"
        ADD     sp, sp, #4
        MOV     pc, lr

DebugHALPrintRegNCR ; Output number on top of stack to the serial port, no CR
        Push    "a1-a4,v1-v4,lr"
        LDR     v2, [sp,#9*4]
        ADR     v3, hextab
        MOV     v4, #8
10      LDRB    a1, [v3, v2, LSR #28]
        bl      DebugTX
        MOV     v2, v2, LSL #4
        SUBS    v4, v4, #1
        BNE     %BT10
        MOV     a1, #&20
        bl      DebugTX

        Pull    "a1-a4,v1-v4,lr"
        ADD     sp, sp, #4
        MOV     pc, lr

ScreenPrintRegNCR ; Output number on top of stack to the screen, no CR
        Push    "a1-a4,v1-v4,lr"
        LDR     v2, [sp,#9*4]
        ADR     v3, hextab
        MOV     v4, #8
10      LDRB    a1, [v3, v2, LSR #28]
        SWI     XOS_WriteC
        MOV     v2, v2, LSL #4
        SUBS    v4, v4, #1
        BNE     %BT10
        MOV     a1, #&20
        SWI     XOS_WriteC

        Pull    "a1-a4,v1-v4,lr"
        ADD     sp, sp, #4
        MOV     pc, lr

ScreenPrintReg ; Output number on top of stack to the screen
        Push    "a1-a4,v1-v4,lr"
        LDR     v2, [sp,#9*4]
        ADR     v3, hextab
        MOV     v4, #8
10      LDRB    a1, [v3, v2, LSR #28]
        SWI     XOS_WriteC
        MOV     v2, v2, LSL #4
        SUBS    v4, v4, #1
        BNE     %BT10
        MOV     a1, #&20
        SWI     XOS_WriteC
        MOV     a1, #13
        SWI     XOS_WriteC
        MOV     a1, #10
        SWI     XOS_WriteC

        Pull    "a1-a4,v1-v4,lr"
        ADD     sp, sp, #4
        MOV     pc, lr

hextab  DCB "0123456789abcdef"

DebugHALPrintB  ; output number at TOS as a hex byte
        Push    "a1-a4,v1-v4,lr"
        LDR     v2, [sp,#9*4]
        ADR     v3, hextab
        MOV     v4, #2
        mov     v2, v2, lsl #24
10      LDRB    a1, [v3, v2, LSR #28]
        bl      DebugTX
        MOV     v2, v2, LSL #4
        SUBS    v4, v4, #1
        BNE     %BT10
        MOV     a1, #&20
        bl      DebugTX

        Pull    "a1-a4,v1-v4,lr"
        ADD     sp, sp, #4
        MOV     pc, lr

ScreenPrintB    ; output number at TOS as a hex byte
        Push    "a1-a4,v1-v4,lr"
        LDR     v2, [sp,#9*4]
        ADR     v3, hextab
        MOV     v4, #2
        mov     v2, v2, lsl #24
10      LDRB    a1, [v3, v2, LSR #28]
        SWI     XOS_WriteC
        MOV     v2, v2, LSL #4
        SUBS    v4, v4, #1
        BNE     %BT10
        MOV     a1, #&20
        SWI     XOS_WriteC

        Pull    "a1-a4,v1-v4,lr"
        ADD     sp, sp, #4
        MOV     pc, lr

DebugTX
       stmfd    r13!,{r0,r8,r9,lr}
       mov      r8,#0
       mov      r9, #86   ; HAL_DebugTX
       SWI      XOS_Hardware
       ldmfd    r13!,{r0,r8,r9,pc}


 ]
       END
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@   Initial import of EtherTH module
@
text
@@
