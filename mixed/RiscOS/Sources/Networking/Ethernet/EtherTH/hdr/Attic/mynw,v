head	1.2;
access;
symbols
	EtherTH-0_25:1.1.1.1
	EtherTH-0_24:1.1.1.1
	EtherTH-0_23:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.03.11.00.12.56;	author jballance;	state dead;
branches;
next	1.1;
commitid	EKCvCR7DacKJ24Jz;

1.1
date	2016.11.28.22.57.40;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O4jKLeG7FCv9UWvz;

1.1.1.1
date	2016.11.28.22.57.40;	author jballance;	state Exp;
branches;
next	;
commitid	O4jKLeG7FCv9UWvz;


desc
@@


1.2
log
@    Convert to C based component with import of re-written module form Colin Granville
Detail:
Admin:
    tested in iMx6

Version 0.26. Tagged as 'EtherTH-0_26'
@
text
@; Copyright 2016 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; networking defines in one place
;
        [       :LNOT: :DEF: __ETH_NW_HDR__
        GBLL    __ETH_NW_HDR__

; MBuf manager stuff
; MBufManager module SWIs
SWIClass SETS   "Mbuf"
        ^      &4a580
        AddSWI OpenSession
        AddSWI CloseSession
        AddSWI Memory
        AddSWI Statistic
        AddSWI Control

; MbufManager Service Calls
Service_MbufManagerStatus_Started   * 0     ; Can call MBuf SWIs
Service_MbufManagerStatus_Stopping  * 1     ; Note: no open sessions
Service_MbufManagerStatus_Scavenge  * 2     ; Try to freeup mbufs.

; MBuf packet types...
MBUF_MT_FREE       *    0       ; On free list
MBUF_MT_DATA       *    1       ; Data
MBUF_MT_HEADER     *    2       ; Header
MBUF_MT_LRXDATA    *    15      ; Large Data

; MBuf sizes
MBUF_Big        *       1536
MBUF_Small      *       128

; MBuf allocation flags
MBC_Default     *       0
MBC_Unsafe      *       (1<<0)          ; allocate as unsafe
MBC_Single      *       (1<<1)          ; allocate as single mbuf
MBC_Clear       *       (1<<2)          ; clear underlying storage

; MbufManager structures
MBUF            RN      r3
; mbuf
                ^       0, r3
mbufstruct      #       0
mbnextptr       #       4       ; -> next mbuf in chain
mblistptr       #       4       ; -> next mbufchain in list
mbdoffset       #       4       ; offset to data from mbuf
mbdlen          #       4       ; data byte count
mbinitdoff      #       4       ; initial offset to data from mbuf(const)
mbinitdlen      #       4       ; initial byte count
mbtype          #       1       ; private to client
mbsys1          #       1       ; private to mbuf manager
mbsys2          #       1       ; private to mbuf manager
mbflags         #       1       ; private to client
mbpkthdrlen     #       4       ; } client private total packet length
mbpkthdrptr     #       4       ; }                ptr to data
mbufend         #       0
mbuflen         *       mbufend-mbufstruct


MBUFCTL         RN      v2
; mbuf_ctl
                ^       0, v2
mbufctlstruct   #       0
; private.. never read or write
opaque          #       4       ;
; client initialises before session
mbcsize         #       4       ; size of this structure
mbcvers         #       4       ; version of mbuf spec used
sflags          #       4       ;
advminubs       #       4       ; advisory min underlying block size
advmaxubs       #       4       ; advisory max underlying block size
mincontig       #       4       ; client required min ensure contiguous
spare1          #       4       ; 0
; mbuf manager initialises the rest
minubs          #       4       ; Min underlying block
maxubs          #       4       ; Max underlying block
maxcontig       #       4       ; Max contig block
spare2          #       4       ; reserved
; allocation routine pointers
alloc           #       4       ;
alloc_g         #       4       ;
alloc_u         #       4       ;
alloc_s         #       4       ;
alloc_c         #       4       ;
; ensure routine pointers
ensure_safe     #       4       ;
ensure_contig   #       4       ;
; free routine pointers
free            #       4       ;
freem           #       4       ;
dtom_free       #       4       ;
dtom_freem      #       4       ;
; support routines
dtom            #       4       ;
any_unsafe      #       4       ;
this_unsafe     #       4       ;
count_bytes     #       4       ;
cat             #       4       ;
trim            #       4       ;
copy            #       4       ;
copy_p          #       4       ;
copy_u          #       4       ;
import          #       4       ;
export          #       4       ;

mbufctlend      #       0
mbufctllen      *       mbufctlend-mbufctlstruct


; Inquire SWI flag bits
Flag_MulticastRx        *       (1<<0 )
Flag_Promiscuous        *       (1<<1 )
Flag_RxsOwnPkts         *       (1<<2 )
Flag_StationNoReq       *       (1<<3 )
Flag_RcvsErrPkts        *       (1<<4 )
Flag_HasHWAddr          *       (1<<5 )
Flag_CanAlterHWAddr     *       (1<<6 )
Flag_IFPtPlink          *       (1<<7 )
Flag_StandardStats      *       (1<<8 )
Flag_ExtendedStats      *       (1<<9 )
Flag_IsVirtual          *       (1<<10)
Flag_VirtualIsSW        *       (1<<11)
Flag_MulticastAvailable *       (1<<12)
Flag_FastIPSum          *       (1<<13)

; Frame claim buffer
                ^       0
FrameClaimBuffer #      0
FrameClaimNext  #       4       ; pointer to next frame claim buf or null
                                ; MUST be first word of buf to permit linkinf
FrameClType     #       4       ; frame type claimed (0 if its IEEE)
FrameClFlags    #       4       ; flags relating
                                ; bits 3..0 frametype
                                ; 1 = E2 specific
                                ; 2 = E2 Sink
                                ; 3 = E2 Monitor
                                ; 4 = IEEE
                                ; bits 11..8 address level
                                ; 0 = specific
                                ; 1 = normal
                                ; 2 = multicast
                                ; 3 = promiscuous
                                ; bits 19..16 error level
                                ; 0 = errored frames discarded
                                ; 1 = errored frames passed too
FrameClMbuf     #       4       ; mbuf list to hand over (temp)
FrameClHandler  #       4       ; handler to call
FrameClPWP      #       4       ; pwp to use
ClaimBufSize    #       0
; Max number of claimable frames we handle
MaxClaimedFrames * 10

; TXQueue buffer
                ^       0
TXQNext         #       4       ; -> next TXQueue buffer or null
TXQR0           #       4       ; r0  for QueueForTX
TXQR1           #       4       ; r1
TXQR2           #       4       ; r2
TXQR3           #       4       ; r3
TXQR4           #       4       ; r4
TXQR5           #       4       ; r5
TXQR12          #       4       ; r12 or 0 if buffer not in use
TXQBlen         #       0
TXQBMaxBufs     *       16      ; allow for 16 of these

        ]
        END
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@   Initial import of EtherTH module
@
text
@@
