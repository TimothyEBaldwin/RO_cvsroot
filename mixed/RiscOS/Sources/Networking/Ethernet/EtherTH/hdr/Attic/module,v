head	1.2;
access;
symbols
	EtherTH-0_26:1.1.1.1
	EtherTH-0_25:1.1.1.1
	EtherTH-0_24:1.1.1.1
	EtherTH-0_23:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.03.11.00.16.12;	author jballance;	state dead;
branches;
next	1.1;
commitid	sLaSFWzGB0jW34Jz;

1.1
date	2016.11.28.22.57.40;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O4jKLeG7FCv9UWvz;

1.1.1.1
date	2016.11.28.22.57.40;	author jballance;	state Exp;
branches;
next	;
commitid	O4jKLeG7FCv9UWvz;


desc
@@


1.2
log
@Remove remaining asm source items


Version 0.26. Not tagged
@
text
@; Copyright 2016 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
        GBLL    Debug
Debug   SETL    {FALSE};{TRUE};


EtherTHSWI_Base *       &59500
                GBLS    EtherTHDCIName
EtherTHDCIName  SETS    "eth"
EtherTHVersion  *       404
EtherTHMinUBS   *       0
EtherTHMaxUBS   *       0
EtherTHMinContig *      0


; 3 macros to provide safe entry to service mode from anywhere..
; ToSVCEIRQOff enters and turns off IRQs
; ToSVCE       enters without changing IRQ mode
; reg 1 < reg 2.. .. 2 work registers, preserved and not passed into code

        MACRO
        ToSVCEIRQOff    $reg1,$reg2
        STMFD   r13!,{r$reg1,r$reg2,lr} ; remember work regs & current mode
                                        ; on current mode stack
        MRS     r$reg1, CPSR            ; remember mode & flags
        ORR     r$reg2, r$reg1, #&83    ; IRQ26->SVC26, IRQ32->SVC32 ,IRQ off
        MSR     CPSR_c, r$reg2

        MOV     r0,r0
        MOV     r0,r0
        MOV     r0,r0
        MOV     r$reg2,lr               ; remember svce lr
        STMFD   r13!,{r$reg1,r$reg2}    ; on svce stack
                                        ; and continue.. reg1 is i/p mode status
                                        ;                reg2 is ip mode lr
        MEND

; go to service mode without effecting IRQ mode
; reg 1 < reg 2.. and not passed into code following this
        MACRO
        ToSVCE  $reg1,$reg2
        STMFD   r13!,{r$reg1,r$reg2,lr} ; remember work regs & current mode
                                        ; on current mode stack
        MRS     r$reg1, CPSR            ; remember mode & flags
        ORR     r$reg2, r$reg1, #&3    ; IRQ26->SVC26, IRQ32->SVC32
        MSR     CPSR_c, r$reg2

        MOV     r0,r0
        MOV     r0,r0
        MOV     r0,r0
        MOV     r$reg2,lr               ; remember svce lr
        STMFD   r13!,{r$reg1,r$reg2}    ; on svce stack
                                        ; and continue.. reg1 is i/p mode status
                                        ;                reg2 is ip mode lr
        MEND

; reg1,reg2 are same regs as provided to ToSVCE.. they will be restored on exit
        MACRO
        FromSVCE $reg1,$reg2
        LDMFD   r13!,{r$reg1,lr}        ; recover i/p mode + flags,  svce lr
        MSR     CPSR_c, r$reg1
        MOV     r0,r0
        MOV     r0,r0
        MOV     r0,r0
        LDMFD   r13!,{r$reg1,r$reg2,lr} ; restore r0,r1,lr in old mode
        MEND

; reg1,reg2 are same regs as provided to ToSVCE.. they will be restored on exit
; returns to {lr}
        MACRO
        FromSVCERet $reg1,$reg2
        LDMFD   r13!,{r$reg1,lr}        ; recover i/p mode + flags,  svce lr
        MSR     CPSR_c, r$reg1
        MOV     r0,r0
        MOV     r0,r0
        MOV     r0,r0
        LDMFD   r13!,{r$reg1,r$reg2,pc} ; restore r0,r1,lr in old mode
        MEND

; Diagnostics macros

        MACRO
        DebugMAC $rreg
    [ Debug
     Push "a1"
     mov        a1, $rreg
     bl  PrintMACAddr
     Pull "a1"
    ]
        MEND

        MACRO
        DebugReg $reg, $str
    [ Debug
     Push "$reg"
     [ "$str" <> ""
        BL      DebugHALPrint
        =       "$str", 0
        ALIGN
     ]
     bl  DebugHALPrintReg
    ]
        MEND

        MACRO
        DebugRegNCR $reg, $str
    [ Debug
     Push "$reg"
     [ "$str" <> ""
        BL      DebugHALPrint
        =       "$str", 0
        ALIGN
     ]
     bl  DebugHALPrintRegNCR
    ]
        MEND

        MACRO
        DebugByteReg $reg, $str
    [ Debug
     Push "$reg"
     [ "$str" <> ""
        BL      DebugHALPrint
        =       "$str", 0
        ALIGN
     ]
     bl  DebugHALPrintB
    ]
        MEND

        MACRO
        DebugTX $str
    [ Debug
        BL      DebugHALPrint
        =       "$str", 13,10,00
        ALIGN
    ]
        MEND

        MACRO
        DebugTXS $str
    [ Debug
        BL      DebugHALPrint
        =       "$str",00
        ALIGN
    ]
        MEND

        MACRO
        ScreenTX $str
    [ Debug
        swi     XOS_WriteS
        =       "$str",10,13,00
        ALIGN
    ]
        MEND

        MACRO
        ScreenTXS $str
    [ Debug
        swi     XOS_WriteS
        =       "$str",00
        ALIGN
    ]
        MEND

        MACRO
        ScreenReg $reg, $str
    [ Debug
     Push "$reg"
     [ "$str" <> ""
        SWI    XOS_WriteS
        =       "$str", 0
        ALIGN
     ]
     bl  ScreenPrintReg
    ]
        MEND

        MACRO
        ScreenRegNCR $reg, $str
    [ Debug
     Push "$reg"
     [ "$str" <> ""
        SWI    XOS_WriteS
        =       "$str", 0
        ALIGN
     ]
     bl  ScreenPrintRegNCR
    ]
        MEND

        MACRO
        ScreenByteReg $reg, $str
    [ Debug
     Push "$reg"
     [ "$str" <> ""
        SWI    XOS_WriteS
        =       "$str", 0
        ALIGN
     ]
     bl  ScreenPrintB
    ]
        MEND



; Memory barrier (for writes only)
; Calls an ARMop located in the kernel, and so deals with the PL310 write buffer
        MACRO
        DMB_Write
        Push    "r0"                    ; ARMops can corrupt r0
        MOV     lr, pc
        LDR     pc, ARMop_DMB_Write_p
        Pull    "r0"
        MEND


        END
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@   Initial import of EtherTH module
@
text
@@
