head	1.5;
access;
symbols
	EtherK-0_25:1.5
	EtherK-0_24:1.5
	EtherK-0_23:1.5
	EtherK-0_22:1.5
	EtherK-0_21:1.5
	EtherK-0_20:1.5
	EtherK-0_19:1.5
	EtherK-0_18:1.5
	EtherK-0_17:1.5
	EtherK-0_16:1.5
	EtherK-0_15:1.5
	EtherK-0_14:1.5
	RO_5_07:1.5
	EtherK-0_13:1.5
	EtherK-0_12:1.4
	EtherK-0_11:1.3
	EtherK-0_10:1.3
	EtherK-0_09:1.2
	EtherK-0_08:1.1;
locks; strict;
comment	@# @;


1.5
date	2004.09.06.13.27.25;	author jbyrne;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.02.19.08.22;	author jbyrne;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.18.22.09.50;	author jbyrne;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.20.16.04.07;	author jbyrne;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.19.20.52;	author jbyrne;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  Update BSD-derived code to version 1.7.35 of the FreeBSD driver sources.
  Rewrite and improve test code.
Detail:
  if_em.c, if_em_hw.c, if_em.h, if_em_hw.h and if_em_osdep.h have all
  been updated to version 1.7.35 of the FreeBSD sources. This version of
  the FreeBSD source tarball is now in the Original directory and earlier
  ones have been removed. The main effect of the changes is to add support
  for later Intel controllers. Note that workaround code required to
  support the 82544 when running on a PCIX bus, and to support the 82547EI
  has not been included to remove unnecessary complication. If support for
  these controllers is ever required (unlikely), this would need to be
  added back in.
  The test code has been rewritten and is now in a new file, test.c.
  Loopback code from the Linux driver is located in the loopback.c file
  and can optionally be compiled in by changing the #define at the top of
  test.c, but since this is GPL code it cannot be included in any
  distributed module. Also, although the test will work, it does not
  restore everything correctly so the link stays down afterwards until the
  module is reinitialised.
  AutoSense/EtherK has been updated to recognise all supported cards.
  doc/UserGuide has been updated.
Admin:
  Basic testing has been carried out, but more testing is required.
  Note that the updated AutoSense and UserGuide files need to be
  included in future distributions including this module.


Version 0.13. Tagged as 'EtherK-0_13'
@
text
@EtherK User Guide
=================

EtherK is the device driver module that supports the Intel PRO/1000 Ethernet
controller on the Iyonix motherboard. It can also support Intel PRO/1000
Ethernet adapter PCI cards. For information on supported cards, see Appendix A.

Overview
========
The Intel PRO/1000 Ethernet controllers supported by EtherK can operate at
10Mbps half-duplex/full-duplex, 100Mbps half-duplex/full-duplex and 1000Mbps
full-duplex. By default all configuration is automatic, and when a cable is
connected the system will automatically detect the correct speed and duplex
settings, and also whether or not a crossover link is required. This feature
means that you can directly connect two computers together without needing a
special crossover cable or a hub. Simply connect an ordinary cable and the
system will automatically determine whether a crossover link is required.

Each network interface on your computer that is supported by EtherK is given a
unit name beginning with 'ek'. The first unit (e.g. the one on the Iyonix
motherboard) is called 'ek0'. Additional network cards will be called 'ek1',
'ek2' and so on. You need to use the unit name to specify the unit when using
commands such as 'IFConfig'. When using *Commands provided by the EtherK module
itself, you only need to specify the unit number. This is always the first
parameter to any command.

*Commands
=========

*EKInfo
-------
Displays information about Ethernet interfaces.

Syntax: *EKInfo [<unit number>] [-verbose]

*EKInfo displays information about the Ethernet interfaces driven by EtherK. If
no unit number is specified, information on all supported units is displayed.
If '-verbose' is specified, much more detailed statistics and driver
information is shown.

A full explanation of all the items displayed by *EKInfo is contained in
Appendix B.

*EKLog
------
Displays any messages that have been logged by the device driver.

Syntax: *EKLog [<unit number>]

*EKLog is used to display any messages that have been logged by the device
driver. If no unit number is specified, the message logs for all the supported
units are shown.

Messages are added to the message log when the driver is initialised, when the
link status changes, and when a driver error occurs.

*EKTest
-------
Starts a self-test for a given unit.

Syntax: *EKTest <unit number>

*EKTest is used to start a self-test for the given unit. A number of tests are
carried out, and the result of each one ('passed' or 'failed') is displayed.
The first test is the 'Link test' and this will fail if a valid link is not
present (if there is no cable connected, for example). The other tests all
relate to the hardware, so if any of the other tests fail, it may indicate a
hardware fault.

*Configure EKLink
-----------------
Sets the speed and duplex settings for a given unit.

Syntax: *Configure EKLink <unit number> Auto | 10 Half|Full | 100 Half|Full

*Configure EKLink is used to set the speed and duplex settings for the given
unit. The default setting is 'Auto' which means that the speed and duplex
settings are determined by auto-negotiation with the link partner. Under normal
circumstances it is recommended that you do not change this setting, but if
necessary it is possible to force the speed to either 10Mbps half-duplex,
10Mbps full-duplex, 100Mbps half-duplex or 100Mbps full-duplex.

When the link settings are forced, note that if the link partner is not also
forced to the same setting, a valid link may not be established. If the link
partner uses auto-negotiation, and you want to force selection of particular
speed/duplex settings, it is better to use *Configure EKAdvertise (see below)
to reduce the speed/duplex combinations available for auto-negotiation to the
ones that you want. It is not possible to force operation at 1000Mbps - this
must be auto-negotiated.

Note that if you disable auto-negotiation by forcing the speed/duplex setting,
automatic crossover detection will also be disabled.

When this command is entered the link settings are changed immediately. There
may then be a delay of up to four seconds while the system waits for the link
to be established.

*Configure EKAdvertise
----------------------
Sets which speed and duplex combinations are advertised for auto-negotiation by
a given unit.

Syntax: *Configure EKAdvertise <unit number> [10 [Half] [Full]] [100 [Half]
[Full]] [1000]

*Configure EKAdvertise is used to set which speed and duplex combinations are
advertised for auto-negotiation by the given unit. At least one speed/duplex
combination must be specified. If neither 'Half' nor 'Full' is specified after
'10' or '100', both duplex combinations are made available. For 1000Mbps
operation, only full-duplex is supported, so the duplex specification is not
needed.

The default state is that all valid combinations are advertised. These are
10Mbps half-duplex, 10Mbps full-duplex, 100Mbps half-duplex, 100Mbps full-
duplex and 1000Mbps full-duplex. This can be set by entering:

*Configure EKAdvertise <unit number> 10 Half Full 100 Half Full 1000

or

*Configure EKAdvertise <unit number> 10 100 1000

Note that changing this setting will not have an effect until the link is next
renegotiated. If you want to force renegotiation after changing this setting,
enter the command:

*Configure EKLink <unit number> Auto

*Configure EKFlowControl
------------------------
Controls whether a given unit automatically generates and/or responds to
Ethernet PAUSE frames.

Syntax: *Configure EKFlowControl <unit number> None | Generate | Respond | Full

*Configure EKFlowControl controls whether the given unit automatically
generates and/or responds to Ethernet PAUSE frames. By enabling interfaces to
adjust packet transmission, flow control helps prevent dropped packets.

If the setting is 'Generate' or 'Full' the interface will generate flow control
frames when the receive queue reaches a pre-defined limit. This signals the
transmitter to slow transmission.

If the setting is 'Respond' or 'Full' the interface will respond to flow
control frames by pausing packet transmission for the time specified in the
flow control frame.

To benefit from this feature, the link partner must also support flow control.

The default setting is 'Full'.

Appendix A - Supported Adapters
===============================

The EtherK device driver is software compatible with any Intel Ether PRO/1000
network adapter with an 82540, 82541, 82542, 82543, 82544, 82545, 82546 or
82547GI controller. 82547EI controllers are not currently supported.

In addition to the Iyonix motherboard controller, this driver is known to work
with the Intel PRO/1000 MT Desktop Adapter PCI card, but hardware compatibility
testing of other cards with the Iyonix motherboard has not been carried out at
this time, so you should confirm hardware compatibility before attempting to
use any other card.

Information on identifying Intel network cards, including which controller is
fitted to a particular card, can be found in the Network Adapter & Driver
Identification Guide at:

http://support.intel.com/support/network/adapter/index.htm

Appendix B - *EKInfo Statistics
===============================

The *EKInfo command displays a large number of items of information. This
appendix gives a brief explanation of each item in the order in which they are
displayed. Items that only appear when the '-verbose' parameter is specified
are enclosed in square brackets.

Note that in the 'Driver statistics' and 'Hardware statistics' sections,
statistics with a value of zero are not displayed. As some of the statistics
only relate to certain configurations, or only occur in rare circumstances, you
may not see many of the items listed here in normal operation.

Ethernet address
  The Ethernet (MAC) address of the interface.

[Controller]
  The part number of the Ethernet controller.

[Bus type]
  The type, speed and width of the bus to which the controller is connected.

[Media type]
  Shows the type of connector - either 'Copper' or 'Fibre'.

Link status
  Shows the link status ('up' or 'down') and the speed and duplex setting of
the current link.

Controller mode
  Shows the level of hardware packet filtering currently in force. The
possibilities are 'Disabled' (the interface is not currently active),
'Specific' (only packets addressed to this interface are accepted), 'Normal'
(specific and broadcast packets are accepted), 'Multicast' (specific, broadcast
and multicast packets are accepted), and 'Promiscuous' (all packets are
accepted).

[TBI compatibility]
  Whether or not TBI compatibility is enabled. This only applies to 1000Mbps
copper connections with the 82543 controller.

Frame types claimed
  Lists the frame types which protocol modules have registered an interest in,
together with the filter level for each frame type. Received frames which are
not of a recognised type, or do not match the filtering level for the given
type, will be discarded.

Hardware statistics summary
  Shows the total number of transmitted frames and bytes, the total number of
received frames and bytes, and the total number of transmit and receive errors
that have occurred since the driver was initialised.

Driver statistics

  Frames received
    The total number of frames received from the hardware by the driver.

  Dropped frames
    The total number of frames accepted by the hardware but rejected by the
driver due to errors. Normally the hardware will filter out packets with
errors, so this counter should not increase.

  Unwanted frames
    The total number of valid frames that were rejected because they did not
match any of the current filters shown in the 'Frame types claimed' list.

  Mbuf allocations failed
    The total number of valid frames which were rejected because there were no
free Mbufs available. The RISC OS network stack relies on a central pool of
memory blocks called 'Mbufs', and if these are all in use, it is not possible
for the device driver to pass data to a protocol module.

  Transmit Descriptors not available
    The number of times a packet failed to be transmitted because there were no
free transmit descriptors. The means that the transmit queue is full. This may
be because the system is attempting to transmit data faster than the hardware
can send it out.

  Oversized transmit frames
    The number of packets for transmission that were rejected by the driver
because they were too large.

  Transmit re-entrancy failures
    The number of times packets could not be transmitted because the transmit
function was re-entered or called while interrupt processing was taking place.
This should not normally happen. If this item appears, please report it to
Technical Support.

  Watchdog resets
    A watchdog reset occurs if the hardware stops transmitting data for some
reason. In normal use this should never happen. If it does occur, a message
will also be recorded in the message log. Please report this to Technical
Support.

  [Maximum transmit descriptors used]
    The highest number of transmit descriptors that have ever been in use at
once.

[Hardware configuration]
  This section displays some information on the internal configuration of the
Ethernet controller. This is only useful for diagnostic purposes.

[Full hardware statistics]
  This section displays the contents of all the controller's hardware
statistics. For the receive statistics note that a packet is counted as
received if it passes the current filter and is placed in the controller's
packet buffer. A packet does not have to be transferred to host memory in order
to be counted as received.

  [Receive counters]
    This section displays counters relating to data received by the interface.

    [Total Octets Received]
      The total number of octets received. All octets received will be counted
here, including those in flow control packets.

    [Total Packets Received]
      The total number of packets received. All packets are counted here,
regardless of their length, whether they have errors, or whether they are flow
control packets.

    [Good Octets Received]
      The total number of good octets received. This does not include octets of
received flow control packets.

    [Good Packets Received]
      The number of good packets received of any legal length. This only
includes packets that pass address filtering and does not include packets
counted in the Missed Packet Count or received flow control packets. The
following six counters break this total down by packet length.

      [Packets Received (64 bytes)]
        The number of good packets received that are exactly 64 bytes in
length, including CRC.
  
      [Packets Received (65-127 bytes)]
        The number of good packets received that are 65-127 bytes in length,
including CRC.
  
      [Packets Received (128-255 bytes)]
        The number of good packets received that are 128-255 bytes in length,
including CRC.
  
      [Packets Received (255-511 bytes)]
        The number of good packets received that are 256-511 bytes in length,
including CRC.
  
      [Packets Received (512-1023 bytes)]
        The number of good packets received that are 512-1023 bytes in length,
including CRC.
  
      [Packets Received (1024-1522 bytes)]
        The number of good packets received that are 1024-1522 bytes in length,
including CRC.

    [Broadcast Packets Received]
      The number of good broadcast packets received. Broadcast packets are not
counted if the hardware filter level is set to 'Specific'.
      
    [Multicast Packets Received]
      The number of good multicast packets received. This does not include
received flow control packets. Multicast packets are not counted if the
hardware filter level is set to 'Specific' or 'Normal'.

  [Transmit counters]
    This section displays counters relating to data transmitted by the
interface.

    [Total Octets Transmitted]
      The total number of octets transmitted. All octets transmitted will be
counted here, including those in flow control packets. Octets from partial
packet transmissions (e.g. collisions in half-duplex mode) are not counted.

    [Total Packets Transmitted]
      The total number of packets transmitted. All packets transmitted will be
counted here, regardless of their length or whether they are flow control
packets. Partial packet transmissions (e.g. collisions in half-duplex mode) are
not counted.
    
    [Good Octets Transmitted]
      The total number of octets sucessfully transmitted. This does not include
octets of transmitted flow control packets.
      
    [Good Packets Transmitted]
      The number of packets sucessfully transmitted of any legal length. This
does not include transmitted flow control packets. The following six counters
break this total down by packet length.

      [Packets Transmitted (64 bytes)]
        The number of packets successfully transmitted that are exactly 64
bytes in length, including CRC.
  
      [Packets Transmitted (65-127 bytes)]
        The number of packets successfully transmitted that are 65-127 bytes in
length, including CRC.
  
      [Packets Transmitted (128-255 bytes)]
        The number of packets successfully transmitted that are 128-255 bytes
in length, including CRC.
  
      [Packets Transmitted (256-511 bytes)]
        The number of packets successfully transmitted that are 256-511 bytes
in length, including CRC.
  
      [Packets Transmitted (512-1023 bytes)]
        The number of packets successfully transmitted that are 512-1023 bytes
in length, including CRC.
  
      [Packets Transmitted (1024-1522 Bytes)]
        The number of packets successfully transmitted that are 1024-1522 bytes
in length, including CRC.

    [Multicast Packets Transmitted]
      The number of multicast packets transmitted. This counter does not
include transmitted flow control packets.
      
    [Broadcast Packets Transmitted]
      The number of broadcast packets transmitted.

  [Flow control]
    This section displays counters relating to flow control packets.

    [XON Received]
      The number of XON packets received. XON packets can occur when Flow
Control is enabled and both the adapter and its link partner are configured to
use it.

    [XON Transmitted]
      The number of XON packets transmitted. XON packets can occur when Flow
Control is enabled and both the adapter and its link partner are configured to
use it.

    [XOFF Received]
      The number of XOFF packets received. XOFF packets can occur when Flow
Control is enabled and both the adapter and its link partner are configured to
use it.

    [XOFF Transmitted]
      The number of XOFF packets transmitted. XOFF packets can occur when Flow
Control is enabled and both the adapter and its link partner are configured to
use it.

    [Flow Control Receive Unsupported]
      The number of unsupported flow control frames that are received. This
counter will increment when a flow control packet is received which has a vlid
address but an incorrect opcode field. This counter is not expected to
increment.

  [Receive error counters]
    This section displays counters relating to packets received with errors.

    [Missed Packets]
      The number of missed packets. Packets are missed when the hardware
receive FIFO has insufficient space to store the incoming packet. This could be
because all of the receive buffers are full, or because there is insufficient
bandwidth on the PCI bus. These packets will also be counted in the Total
Packets Received counter as well as in Total Octets Received.

    [Receive No Buffers]
      The number of times that packets were received when there were no
available buffers in host memory to store those packets. The packet will still
be received if there is space in the hardware FIFO. This counter does not
include received flow control packets.

    [Receive Errors]
      The number of received packets where the PHY indicated a receive error.
For a packet to be counted here, it must pass address filtering and be at least
64 bytes in length, including CRC. For fibre connections, this counter will
increment on the reception of /V/ codes.

    [Alignment Errors]
      The number of received packets with alignment errors (i.e. the packet is
not an integer number of bytes in length). For a packet to be counted here, it
must pass address filtering and be at least 64 bytes in length, including CRC.
This is valid only during 10/100 Mbps operation.

    [CRC Errors]
      The number of received packets with CRC errors. For a packet to be
counted here, it must pass address filtering and be at least 64 bytes in
length, including CRC.

    [Receive Length Errors]
      The total number of receive length errors. A length error occurs if the
length, including CRC, of an incoming packet is undersized (less than 64 bytes)
or oversized (greater than 1522 bytes). Only packets that pass address
filtering are counted. The following four counters give more detail on these
errors.

      [Receive Undersize]
        The number of received packets that were less than the minimum size (64
bytes) and had a valid CRC.

      [Receive Fragment]
        The number of received packets that were less than the minimum size (64
bytes) but had an incorrect CRC.

      [Receive Oversize]
        The number of received packets that were greater than the maximum size
(1522 bytes) and had a valid CRC.

      [Receive Jabber]
        The number of received packets that were greater than the maximum size
(1522 bytes) but had an incorrect CRC.

    [Carrier Extension Errors]
      The number of packets received in which the carrier extension error was
signaled across the PHY interface. The PHY propagates carrier extension errors
to the MAC when an error is detected during the carrier extended time of packet
reception. This will only increment if the device is operating at 1000Mbps.

  [Receive information counters]
    This section displays counters relating to reception problems, but which
are not counted as packet reception errors.

    [Symbol Errors]
      The number of symbol errors between reads. The count increases for every
bad symbol received, whether or not a packet is currently being received and
whether or not the link is up. This only applies to fibre connections. This
statistic will increment along with the Sequence Error count when the fibre
cable is either disconnected or the connector is not seated correctly. This
statistic will also increment minimally when the driver is being initialised.
      
    [Sequence Errors]
      Describes receive sequence error events. This only applies to fibre
connections. This counter will increment when an illegal sequence of symbols is
received. This will increment along with the Symbol Error count when the fibre
cable is either disconnected or the connector is not seated correctly.

  [Transmit error counters]
    This section displays counters relating to packets with transmission errors.

    [Excessive Collisions]
      This counter increments when 16 or more collisions have occurred on a
packet. This only occurs if the device is in half-duplex mode.

    [Late Collisions]
      This describes collisions that occur after 64-byte time into the
transmission of the packet. This only occurs if the device is in half-duplex
mode.

  [Transmit information counters]
    This section displays counters relating to transmission problems, but which
are not transmission errors.

    [Single Collisions]
      The number of times that a transmitted packet encountered a single
collision. This only occurs if the device is in half-duplex mode.
      
    [Multiple Collisions]
      The number of times that a transmitted packet encountered more than one
collision but less than 16. This only occurs if the device is in half-duplex
mode.

    [Total Collisions]
      The total number of collisions seen by the transmitter excluding late
collisions. These only occur if the device is in half-duplex mode.

    [Defer Count]
      Describes transmit defer events. A defer event occurs when the
transmitter cannot immediately send a packet due to the medium being busy
either because another device is transmitting, because data is being received
in half-duplex mode, because an XOFF packet has been received or because the
link is not up.

    [Transmit with no CRS]
      Counts the number of successful packet transmissions in which the Carrier
Sense input from the PHY was not asserted within one slot time of start of
transmission. The PHY should assert Carrier Sense during every transmission.
Failure to do so may indicate that the link has failed, or the PHY has an
incorrect link configuration. This counter is not valid for fibre connections,
and is only valid when the device is operating at full duplex.

[PHY information]
  This section displays some extra information about the cable and connection.
It not shown for fibre connections.

  [Extended 10BaseT distance]
    Indicates whether or not the extended 10BaseT distance feature (for cables
longer than 100m) is enabled.

  [Polarity correction]
    Indicates whether or not the polarity correction feature is enabled.

  [Cable polarity]
    Identifies the +/- properties of the send and receive twisted pair wires
found in an Ethernet cable. If these properties are not correctly set up, the
interface will auto-correct and report the polarity as 'Reversed'.

  [MDI-X mode]
    Shows whether the cable attached to the interface has a straight-through
(MDI) or crossover (MDI-X) configuration.

  [Cable length]
    This is only shown when the link speed is 1000Mbps.
    Gives an estimate of the length of the cable between the interface and its
link partner. If this appears to be significantly different from the actual
cable length, it may indicate a cable fault. 

  [Local receiver status]
    This is only shown when the link speed is 1000Mbps.
    Identifies whether the cable connector attached to the interface is capable
of handling traffic. If the status is 'Not OK', check the connector for breaks
or mis-wirings. 

  [Remote receiver status]
    This is only shown when the link speed is 1000Mbps.
    Shows whether the cable connector attached to the link partner passes or
fails the set of operability tests. If the status is 'Not OK', check the
connector for breaks or mis-wirings. 

  [Receive errors]
    This is only shown when the link speed is 1000Mbps.
    Receive Errors occur when the adapter detects an unrecognisable
transmission on the wire. Receive Error counts naturally increment when the
adapter establishes communication with the network, (connecting the cable to
the adapter or restarting the computer) or when the adapter restarts after auto-
negotiation. If the Idle Error count reaches approximately 65,000 within five
minutes, there is a link quality issue. To resolve link quality issues, try re-
connecting the cable or using a different cable.

  [Idle errors]
    This is only shown when the link speed is 1000Mbps.
    Idle Errors increment when the adapter receives an unrecognisable
transmission on the wire. Unlike Receive Errors, Idle Errors are detected when
the adapter is not actively receiving packets. Idle Error counts naturally
occur when the adapter establishes communication with the network, (connecting
the cable to the adapter or restarting the computer) or when the adapter
restarts after auto-negotiation. If the Idle Error count reaches 255 within one
minute, there is a link quality issue. To resolve link quality issues, try re-
connecting the cable or use a different cable.

Appendix C - License
====================
The EtherK device driver includes software developed by Intel Corporation. This
comes with the following message:

Copyright (c) 2001-2003, Intel Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 3. Neither the name of the Intel Corporation nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
@


1.4
log
@  Restructure and tidy up.
Detail:
  This version has no functional changes, but has been considerably
  tidied up to improve commenting and modularity. In particular the
  information printing routines, filtering routines and message
  logging routines have been split out into separate source files.
  The filtering routines have also been re-worked to be more
  comprehensible. Hopefully this will provide a useful base for
  developing future network drivers.
Admin:
  Requires an up-to-date version of BuildSys to build all variants.
  Basic testing indicates it still works, but more long term testing
  to confirm that nothing has been accidentally broken is required.


Version 0.12. Tagged as 'EtherK-0_12'
@
text
@d6 1
a6 1
Ethernet adapter PCI cards. For a full list of supported cards, see Appendix A.
d155 13
a167 4
The following Intel network adapters are software compatible with the EtherK
device driver. Hardware compatiblity testing with the Iyonix motherboard has
not been carried out at this time, so you should confirm compatibility before
attempting to use any of these cards.
d169 1
a169 38
   Controller  Adapter Name                         Board IDs
   ----------  ------------                         ---------

   82542       PRO/1000 Gigabit Server Adapter      700262-xxx, 717037-xxx

   82543       PRO/1000 F Server Adapter            738640-xxx, A38888-xxx,
                                                    A06512-xxx

   82543       PRO/1000 T Server Adapter            A19845-xxx, A33948-xxx

   82544       PRO/1000 XT Server Adapter           A51580-xxx

   82544       PRO/1000 XF Server Adapter           A50484-xxx

   82544       PRO/1000 T Desktop Adapter           A62947-xxx

   82540       PRO/1000 MT Desktop Adapter          A78708-xxx

   82545       PRO/1000 MT Server Adapter           A92165-xxx

   82545       PRO/1000 MF Server Adapter           A91622-xxx

   82545       PRO/1000 MF Server Adapter(LX)       A91624-xxx

   82546       PRO/1000 MT Dual Port Server Adapter A92111-xxx

   82546       PRO/1000 MF Dual Port Server Adapter A91620-xxx


To check the type of an Intel network card, find the board ID number on the
adapter. Look for a label that has a barcode and a number in the format of
123456-001 (six digits hyphen three digits). Match this to the list of numbers
above.

More information on how to identify adapters can be found in the Adapter &
Driver ID Guide on the Intel web site at:

    http://support.intel.com/support/network/adapter/pro100/21397.htm
d607 1
a607 1
Copyright (c) 2001-2002, Intel Corporation
d617 1
a617 1
    notice, this list of conditions and the following disclaimer in the 
@


1.3
log
@Lots of changes due to new code from Intel,this removes lots of
useless code from the driver - smaller and faster?
Now implements blocking if someone (eg.NetFS) tries to transmit before
the link is up.If noone is trying to transmit then the link will
come up in the background.

Version 0.10. Tagged as 'EtherK-0_10'
@
text
@d4 3
a6 1
EtherK is the device driver module that supports the Intel PRO/1000 Ethernet controller on the Iyonix motherboard. It can also support Intel PRO/1000 Ethernet adapter PCI cards. For a full list of supported cards, see Appendix A.
d10 16
a25 3
The Intel PRO/1000 Ethernet controllers supported by EtherK can operate at 10Mbps half-duplex/full-duplex, 100Mbps half-duplex/full-duplex and 1000Mbps full-duplex. By default all configuration is automatic, and when a cable is connected the system will automatically detect the correct speed and duplex settings, and also whether or not a crossover link is required. This feature means that you can directly connect two computers together without needing a special crossover cable or a hub. Simply connect an ordinary cable and the system will automatically determine whether a crossover link is required.

Each network interface on your computer that is supported by EtherK is given a unit name beginning with 'ek'. The first unit (e.g. the one on the Iyonix motherboard) is called 'ek0'. Additional network cards will be called 'ek1', 'ek2' and so on. You need to use the unit name to specify the unit when using commands such as 'IFConfig'. When using *Commands provided by the EtherK module itself, you only need to specify the unit number. This is always the first parameter to any command.
d36 4
a39 1
*EKInfo displays information about the Ethernet interfaces driven by EtherK. If no unit number is specified, information on all supported units is displayed. If '-verbose' is specified, much more detailed statistics and driver information is shown.
d41 2
a42 1
A full explanation of all the items displayed by *EKInfo is contained in Appendix B.
d50 3
a52 1
*EKLog is used to display any messages that have been logged by the device driver. If no unit number is specified, the message logs for all the supported units are shown.
d54 2
a55 1
Messages are added to the message log when the driver is initialised, when the link status changes, and when a driver error occurs.
d63 6
a68 1
*EKTest is used to start a self-test for the given unit. A number of tests are carried out, and the result of each one ('passed' or 'failed') is displayed. The first test is the 'Link test' and this will fail if a valid link is not present (if there is no cable connected, for example). The other tests all relate to the hardware, so if any of the other tests fail, it may indicate a hardware fault.
d77 20
a96 7
unit. The default setting is 'Auto' which means that the speed and duplex settings are determined by auto-negotiation with the link partner. Under normal circumstances it is recommended that you do not change this setting, but if necessary it is possible to force the speed to either 10Mbps half-duplex, 10Mbps full-duplex, 100Mbps half-duplex or 100Mbps full-duplex.

When the link settings are forced, note that if the link partner is not also forced to the same setting, a valid link may not be established. If the link partner uses auto-negotiation, and you want to force selection of particular speed/duplex settings, it is better to use *Configure EKAdvertise (see below) to reduce the speed/duplex combinations available for auto-negotiation to the ones that you want. It is not possible to force operation at 1000Mbps - this must be auto-negotiated.

Note that if you disable auto-negotiation by forcing the speed/duplex setting, automatic crossover detection will also be disabled.

When this command is entered the link settings are changed immediately. There may then be a delay of up to four seconds while the system waits for the link to be established.
d100 2
a101 1
Sets which speed and duplex combinations are advertised for auto-negotiation by a given unit.
d103 2
a104 1
Syntax: *Configure EKAdvertise <unit number> [10 [Half] [Full]] [100 [Half] [Full]] [1000]
d106 10
a115 3
*Configure EKAdvertise is used to set which speed and duplex combinations are advertised for auto-negotiation by the given unit. At least one speed/duplex combination must be specified. If neither 'Half' nor 'Full' is specified after '10' or '100', both duplex combinations are made available. For 1000Mbps operation, only full-duplex is supported, so the duplex specification is not needed.

The default state is that all valid combinations are advertised. These are 10Mbps half-duplex, 10Mbps full-duplex, 100Mbps half-duplex, 100Mbps full-duplex and 1000Mbps full-duplex. This can be set by entering:
d123 3
a125 1
Note that changing this setting will not have an effect until the link is next renegotiated. If you want to force renegotiation after changing this setting, enter the command:
d131 2
a132 1
Controls whether a given unit automatically generates and/or responds to Ethernet PAUSE frames.
d136 11
a146 5
*Configure EKFlowControl controls whether the given unit automatically generates and/or responds to Ethernet PAUSE frames. By enabling interfaces to adjust packet transmission, flow control helps prevent dropped packets.

If the setting is 'Generate' or 'Full' the interface will generate flow control frames when the receive queue reaches a pre-defined limit. This signals the transmitter to slow transmission.

If the setting is 'Respond' or 'Full' the interface will respond to flow control frames by pausing packet transmission for the time specified in the flow control frame.
d155 4
a158 1
The following Intel network adapters are software compatible with the EtherK device driver. Hardware compatiblity testing with the Iyonix motherboard has not been carried out at this time, so you should confirm compatibility before attempting to use any of these cards.
d189 4
a192 1
To check the type of an Intel network card, find the board ID number on the adapter. Look for a label that has a barcode and a number in the format of 123456-001 (six digits hyphen three digits). Match this to the list of numbers above.
d202 9
a210 3
The *EKInfo command displays a large number of items of information. This appendix gives a brief explanation of each item in the order in which they are displayed. Items that only appear when the '-verbose' parameter is specified are enclosed in square brackets.

Note that in the 'Driver statistics' and 'Hardware statistics' sections, statistics with a value of zero are not displayed. As some of the statistics only relate to certain configurations, or only occur in rare circumstances, you may not see many of the items listed here in normal operation.
d225 2
a226 1
  Shows the link status ('up' or 'down') and the speed and duplex setting of the current link.
d229 6
a234 1
  Shows the level of hardware packet filtering currently in force. The possibilities are 'Disabled' (the interface is not currently active), 'Specific' (only packets addressed to this interface are accepted), 'Normal' (specific and broadcast packets are accepted), 'Multicast' (specific, broadcast and multicast packets are accepted), and 'Promiscuous' (all packets are accepted).
d237 2
a238 1
  Whether or not TBI compatibility is enabled. This only applies to 1000Mbps copper connections with the 82543 controller.
d241 4
a244 1
  Lists the frame types which protocol modules have registered an interest in, together with the filter level for each frame type. Received frames which are not of a recognised type, or do not match the filtering level for the given type, will be discarded.
d247 3
a249 1
  Shows the total number of transmitted frames and bytes, the total number of received frames and bytes, and the total number of transmit and receive errors that have occurred since the driver was initialised.
d257 3
a259 1
    The total number of frames accepted by the hardware but rejected by the driver due to errors. Normally the hardware will filter out packets with errors, so this counter should not increase.
d262 2
a263 1
    The total number of valid frames that were rejected because they did not match any of the current filters shown in the 'Frame types claimed' list.
d266 4
a269 1
    The total number of valid frames which were rejected because there were no free Mbufs available. The RISC OS network stack relies on a central pool of memory blocks called 'Mbufs', and if these are all in use, it is not possible for the device driver to pass data to a protocol module.
d272 4
a275 1
    The number of times a packet failed to be transmitted because there were no free transmit descriptors. The means that the transmit queue is full. This may be because the system is attempting to transmit data faster than the hardware can send it out.
d278 2
a279 1
    The number of packets for transmission that were rejected by the driver because they were too large.
d282 4
a285 1
    The number of times packets could not be transmitted because the transmit function was re-entered or called while interrupt processing was taking place. This should not normally happen. If this item appears, please report it to Technical Support.
d288 4
a291 1
    A watchdog reset occurs if the hardware stops transmitting data for some reason. In normal use this should never happen. If it does occur, a message will also be recorded in the message log. Please report this to Technical Support.
d294 2
a295 1
    The highest number of transmit descriptors that have ever been in use at once.
d298 2
a299 1
  This section displays some information on the internal configuration of the Ethernet controller. This is only useful for diagnostic purposes.
d302 5
a306 1
  This section displays the contents of all the controller's hardware statistics. For the receive statistics note that a packet is counted as received if it passes the current filter and is placed in the controller's packet buffer. A packet does not have to be transferred to host memory in order to be counted as received.
d312 2
a313 1
      The total number of octets received. All octets received will be counted here, including those in flow control packets.
d316 3
a318 1
      The total number of packets received. All packets are counted here, regardless of their length, whether they have errors, or whether they are flow control packets.
d321 2
a322 1
      The total number of good octets received. This does not include octets of received flow control packets.
d325 4
a328 1
      The number of good packets received of any legal length. This only includes packets that pass address filtering and does not include packets counted in the Missed Packet Count or received flow control packets. The following six counters break this total down by packet length.
d331 2
a332 1
        The number of good packets received that are exactly 64 bytes in length, including CRC.
d335 2
a336 1
        The number of good packets received that are 65-127 bytes in length, including CRC.
d339 2
a340 1
        The number of good packets received that are 128-255 bytes in length, including CRC.
d343 2
a344 1
        The number of good packets received that are 256-511 bytes in length, including CRC.
d347 2
a348 1
        The number of good packets received that are 512-1023 bytes in length, including CRC.
d351 2
a352 1
        The number of good packets received that are 1024-1522 bytes in length, including CRC.
d355 2
a356 1
      The number of good broadcast packets received. Broadcast packets are not counted if the hardware filter level is set to 'Specific'.
d359 3
a361 1
      The number of good multicast packets received. This does not include received flow control packets. Multicast packets are not counted if the hardware filter level is set to 'Specific' or 'Normal'.
d364 2
a365 1
    This section displays counters relating to data transmitted by the interface.
d368 3
a370 1
      The total number of octets transmitted. All octets transmitted will be counted here, including those in flow control packets. Octets from partial packet transmissions (e.g. collisions in half-duplex mode) are not counted.
d373 4
a376 1
      The total number of packets transmitted. All packets transmitted will be counted here, regardless of their length or whether they are flow control packets. Partial packet transmissions (e.g. collisions in half-duplex mode) are not counted.
d379 2
a380 1
      The total number of octets sucessfully transmitted. This does not include octets of transmitted flow control packets.
d383 3
a385 1
      The number of packets sucessfully transmitted of any legal length. This does not include transmitted flow control packets. The following six counters break this total down by packet length.
d388 2
a389 1
        The number of packets successfully transmitted that are exactly 64 bytes in length, including CRC.
d392 2
a393 1
        The number of packets successfully transmitted that are 65-127 bytes in length, including CRC.
d396 2
a397 1
        The number of packets successfully transmitted that are 128-255 bytes in length, including CRC.
d400 2
a401 1
        The number of packets successfully transmitted that are 256-511 bytes in length, including CRC.
d404 2
a405 1
        The number of packets successfully transmitted that are 512-1023 bytes in length, including CRC.
d408 2
a409 1
        The number of packets successfully transmitted that are 1024-1522 bytes in length, including CRC.
d412 2
a413 1
      The number of multicast packets transmitted. This counter does not include transmitted flow control packets.
d422 3
a424 1
      The number of XON packets received. XON packets can occur when Flow Control is enabled and both the adapter and its link partner are configured to use it.
d427 3
a429 1
      The number of XON packets transmitted. XON packets can occur when Flow Control is enabled and both the adapter and its link partner are configured to use it.
d432 3
a434 1
      The number of XOFF packets received. XOFF packets can occur when Flow Control is enabled and both the adapter and its link partner are configured to use it.
d437 3
a439 1
      The number of XOFF packets transmitted. XOFF packets can occur when Flow Control is enabled and both the adapter and its link partner are configured to use it.
d442 4
a445 1
      The number of unsupported flow control frames that are received. This counter will increment when a flow control packet is received which has a vlid address but an incorrect opcode field. This counter is not expected to increment.
d451 5
a455 1
      The number of missed packets. Packets are missed when the hardware receive FIFO has insufficient space to store the incoming packet. This could be because all of the receive buffers are full, or because there is insufficient bandwidth on the PCI bus. These packets will also be counted in the Total Packets Received counter as well as in Total Octets Received.
d458 4
a461 1
      The number of times that packets were received when there were no available buffers in host memory to store those packets. The packet will still be received if there is space in the hardware FIFO. This counter does not include received flow control packets.
d464 4
a467 1
      The number of received packets where the PHY indicated a receive error. For a packet to be counted here, it must pass address filtering and be at least 64 bytes in length, including CRC. For fibre connections, this counter will increment on the reception of /V/ codes.
d470 4
a473 1
      The number of received packets with alignment errors (i.e. the packet is not an integer number of bytes in length). For a packet to be counted here, it must pass address filtering and be at least 64 bytes in length, including CRC. This is valid only during 10/100 Mbps operation.
d476 3
a478 1
      The number of received packets with CRC errors. For a packet to be counted here, it must pass address filtering and be at least 64 bytes in length, including CRC.
d481 5
a485 1
      The total number of receive length errors. A length error occurs if the length, including CRC, of an incoming packet is undersized (less than 64 bytes) or oversized (greater than 1522 bytes). Only packets that pass address filtering are counted. The following four counters give more detail on these errors.
d488 2
a489 1
        The number of received packets that were less than the minimum size (64 bytes) and had a valid CRC.
d492 2
a493 1
        The number of received packets that were less than the minimum size (64 bytes) but had an incorrect CRC.
d496 2
a497 1
        The number of received packets that were greater than the maximum size (1522 bytes) and had a valid CRC.
d500 2
a501 1
        The number of received packets that were greater than the maximum size (1522 bytes) but had an incorrect CRC.
d504 4
a507 1
      The number of packets received in which the carrier extension error was signaled across the PHY interface. The PHY propagates carrier extension errors to the MAC when an error is detected during the carrier extended time of packet reception. This will only increment if the device is operating at 1000Mbps.
d510 2
a511 1
    This section displays counters relating to reception problems, but which are not counted as packet reception errors.
d514 6
a519 1
      The number of symbol errors between reads. The count increases for every bad symbol received, whether or not a packet is currently being received and whether or not the link is up. This only applies to fibre connections. This statistic will increment along with the Sequence Error count when the fibre cable is either disconnected or the connector is not seated correctly. This statistic will also increment minimally when the driver is being initialised.
d522 4
a525 1
      Describes receive sequence error events. This only applies to fibre connections. This counter will increment when an illegal sequence of symbols is received. This will increment along with the Symbol Error count when the fibre cable is either disconnected or the connector is not seated correctly.
d531 2
a532 1
      This counter increments when 16 or more collisions have occurred on a packet. This only occurs if the device is in half-duplex mode.
d535 3
a537 1
      This describes collisions that occur after 64-byte time into the transmission of the packet. This only occurs if the device is in half-duplex mode.
d540 2
a541 1
    This section displays counters relating to transmission problems, but which are not transmission errors.
d544 2
a545 1
      The number of times that a transmitted packet encountered a single collision. This only occurs if the device is in half-duplex mode.
d548 3
a550 1
      The number of times that a transmitted packet encountered more than one collision but less than 16. This only occurs if the device is in half-duplex mode.
d553 2
a554 1
      The total number of collisions seen by the transmitter excluding late collisions. These only occur if the device is in half-duplex mode.
d557 5
a561 1
      Describes transmit defer events. A defer event occurs when the transmitter cannot immediately send a packet due to the medium being busy either because another device is transmitting, because data is being received in half-duplex mode, because an XOFF packet has been received or because the link is not up.
d564 6
a569 1
      Counts the number of successful packet transmissions in which the Carrier Sense input from the PHY was not asserted within one slot time of start of transmission. The PHY should assert Carrier Sense during every transmission.Failure to do so may indicate that the link has failed, or the PHY has an incorrect link configuration. This counter is not valid for fibre connections, and is only valid when the device is operating at full duplex.
d572 2
a573 1
  This section displays some extra information about the cable and connection. It not shown for fibre connections.
d576 2
a577 1
    Indicates whether or not the extended 10BaseT distance feature (for cables longer than 100m) is enabled.
d583 3
a585 1
    Identifies the +/- properties of the send and receive twisted pair wires found in an Ethernet cable. If these properties are not correctly set up, the interface will auto-correct and report the polarity as 'Reversed'.
d588 2
a589 1
    Shows whether the cable attached to the interface has a straight-through (MDI) or crossover (MDI-X) configuration.
d593 3
a595 1
    Gives an estimate of the length of the cable between the interface and its link partner. If this appears to be significantly different from the actual cable length, it may indicate a cable fault. 
d599 3
a601 1
    Identifies whether the cable connector attached to the interface is capable of handling traffic. If the status is 'Not OK', check the connector for breaks or mis-wirings. 
d605 3
a607 1
    Shows whether the cable connector attached to the link partner passes or fails the set of operability tests. If the status is 'Not OK', check the connector for breaks or mis-wirings. 
d611 7
a617 1
    Receive Errors occur when the adapter detects an unrecognisable transmission on the wire. Receive Error counts naturally increment when the adapter establishes communication with the network, (connecting the cable to the adapter or restarting the computer) or when the adapter restarts after auto-negotiation. If the Idle Error count reaches approximately 65,000 within five minutes, there is a link quality issue. To resolve link quality issues, try re-connecting the cable or using a different cable.
d621 8
a628 1
    Idle Errors increment when the adapter receives an unrecognisable transmission on the wire. Unlike Receive Errors, Idle Errors are detected when the adapter is not actively receiving packets. Idle Error counts naturally occur when the adapter establishes communication with the network, (connecting the cable to the adapter or restarting the computer) or when the adapter restarts after auto-negotiation. If the Idle Error count reaches 255 within one minute, there is a link quality issue. To resolve link quality issues, try re-connecting the cable or use a different cable.
d632 2
a633 1
The EtherK device driver includes software developed by Intel Corporation. This comes with the following message:
@


1.2
log
@Adds reentrancy checks to the transmit routine.
Change to spl macros to disable *all* interrupts rather than just the
line relating to the device vector number.
User guide tweak.

Version 0.09. Tagged as 'EtherK-0_09'
@
text
@a185 3
  Transmit Buffers not available
    This is very similar to 'Transmit Descriptors not available'. Since the number of free transmit buffers is the same as the number of free transmit descriptors, this counter should never increase.

d401 1
a401 1
    Receive Errors occur when the adapter detects an unrecognizable transmission on the wire. Receive Error counts naturally increment when the adapter establishes communication with the network, (connecting the cable to the adapter or restarting the computer) or when the adapter restarts after auto-negotiation. If the Idle Error count reaches approximately 65,000 within five minutes, there is a link quality issue. To resolve link quality issues, try re-connecting the cable or using a different cable.
d405 34
a438 1
    Idle Errors increment when the adapter receives an unrecognizable transmission on the wire. Unlike Receive Errors, Idle Errors are detected when the adapter is not actively receiving packets. Idle Error counts naturally occur when the adapter establishes communication with the network, (connecting the cable to the adapter or restarting the computer) or when the adapter restarts after auto-negotiation. If the Idle Error count reaches 255 within one minute, there is a link quality issue. To resolve link quality issues, try re-connecting the cable or use a different cable.
@


1.1
log
@Tidy up syntax messages
Addition of user guide
Rearrange ekinfo output
Function names stripped to save ROM space
Add link failures and polarity statistics

Version 0.08. Tagged as 'EtherK-0_08'
@
text
@d192 3
@

