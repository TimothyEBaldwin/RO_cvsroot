head	1.5;
access;
symbols
	EtherK-0_25:1.5
	EtherK-0_24:1.5
	EtherK-0_23:1.5
	EtherK-0_22:1.5
	EtherK-0_21:1.5
	EtherK-0_20:1.5
	EtherK-0_19:1.5
	EtherK-0_18:1.5
	EtherK-0_17:1.5
	EtherK-0_16:1.5
	EtherK-0_15:1.5
	EtherK-0_14:1.5
	RO_5_07:1.5
	EtherK-0_13:1.5
	EtherK-0_12:1.4
	EtherK-0_11:1.4
	EtherK-0_10:1.4
	EtherK-0_09:1.4
	EtherK-0_08:1.4
	EtherK-0_07:1.3
	EtherK-0_06:1.3
	EtherK-0_05:1.2
	EtherK-0_04:1.1.1.1
	EtherK-0_03:1.1.1.1
	EtherK-0_02:1.1.1.1
	EtherK-0_01:1.1.1.1
	EtherK-0_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2004.09.06.13.27.26;	author jbyrne;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.18.19.20.53;	author jbyrne;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.11.19.14.06;	author jbyrne;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.04.16.19.11;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.09.19.21.38;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.09.19.21.38;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  Update BSD-derived code to version 1.7.35 of the FreeBSD driver sources.
  Rewrite and improve test code.
Detail:
  if_em.c, if_em_hw.c, if_em.h, if_em_hw.h and if_em_osdep.h have all
  been updated to version 1.7.35 of the FreeBSD sources. This version of
  the FreeBSD source tarball is now in the Original directory and earlier
  ones have been removed. The main effect of the changes is to add support
  for later Intel controllers. Note that workaround code required to
  support the 82544 when running on a PCIX bus, and to support the 82547EI
  has not been included to remove unnecessary complication. If support for
  these controllers is ever required (unlikely), this would need to be
  added back in.
  The test code has been rewritten and is now in a new file, test.c.
  Loopback code from the Linux driver is located in the loopback.c file
  and can optionally be compiled in by changing the #define at the top of
  test.c, but since this is GPL code it cannot be included in any
  distributed module. Also, although the test will work, it does not
  restore everything correctly so the link stays down afterwards until the
  module is reinitialised.
  AutoSense/EtherK has been updated to recognise all supported cards.
  doc/UserGuide has been updated.
Admin:
  Basic testing has been carried out, but more testing is required.
  Note that the updated AutoSense and UserGuide files need to be
  included in future distributions including this module.


Version 0.13. Tagged as 'EtherK-0_13'
@
text
@/**************************************************************************

Copyright (c) 2001-2003, Intel Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 3. Neither the name of the Intel Corporation nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

***************************************************************************/

/*$FreeBSD: src/sys/dev/em/if_em_osdep.h,v 1.1.2.6 2002/08/25 01:54:53 pdeuskar Exp $*/

#ifndef _FREEBSD_OS_H_
#define _FREEBSD_OS_H_

#include <sys/types.h>
#include <sys/param.h>
#ifndef RISCOS
#include <sys/systm.h>
#endif
#include <sys/mbuf.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#ifndef RISCOS
#include <sys/malloc.h>
#endif
#include <sys/kernel.h>
#ifndef RISCOS
#include <sys/bus.h>
#include <machine/bus.h>
#include <sys/rman.h>
#include <machine/resource.h>
#include <vm/vm.h>
#include <vm/pmap.h>
#include <machine/clock.h>
#if __FreeBSD_version >= 502000
#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#else
#include <pci/pcivar.h>
#include <pci/pcireg.h>
#endif
#else
#include <stdbool.h>
#include "pcireg.h"
#endif


#define ASSERT(x) if(!(x)) panic("EM: x")

#ifndef RISCOS
/* The happy-fun DELAY macro is defined in /usr/src/sys/i386/include/clock.h */
#define usec_delay(x) DELAY(x)
#define msec_delay(x) DELAY(1000*(x))

#define MSGOUT(S, A, B)     printf(S "\n", A, B)
#endif
#define DEBUGFUNC(F)        DEBUGOUT(F);
#if defined(RISCOS) && defined(DEBUGLIB)
	#define DEBUGOUT(S)         _dprintf("HW", S "\n")
	#define DEBUGOUT1(S,A)      _dprintf("HW", S "\n",A)
	#define DEBUGOUT2(S,A,B)    _dprintf("HW", S "\n",A,B)
	#define DEBUGOUT3(S,A,B,C)  _dprintf("HW", S "\n",A,B,C)
	#define DEBUGOUT7(S,A,B,C,D,E,F,G)  _dprintf("HW", S "\n",A,B,C,D,E,F,G)
#else
#if DBG
	#define DEBUGOUT(S)         printf(S "\n")
	#define DEBUGOUT1(S,A)      printf(S "\n",A)
	#define DEBUGOUT2(S,A,B)    printf(S "\n",A,B)
	#define DEBUGOUT3(S,A,B,C)  printf(S "\n",A,B,C)
	#define DEBUGOUT7(S,A,B,C,D,E,F,G)  printf(S "\n",A,B,C,D,E,F,G)
#else
	#define DEBUGOUT(S)
	#define DEBUGOUT1(S,A)
	#define DEBUGOUT2(S,A,B)
	#define DEBUGOUT3(S,A,B,C)
	#define DEBUGOUT7(S,A,B,C,D,E,F,G)
#endif
#endif

#define FALSE               0
#define TRUE                1
#define CMD_MEM_WRT_INVALIDATE          0x0010  /* BIT_4 */
#define PCI_COMMAND_REGISTER            PCIR_COMMAND

#ifdef RISCOS
#include <DebugLib/DebugLib.h>
#endif

struct em_osdep
{
#ifndef RISCOS
	bus_space_tag_t    mem_bus_space_tag;
	bus_space_handle_t mem_bus_space_handle;
#endif
	struct device     *dev;
};

#ifndef RISCOS

#define E1000_WRITE_FLUSH(a) E1000_READ_REG(a, STATUS)

/* Read from an absolute offset in the adapter's memory space */
#define E1000_READ_OFFSET(hw, offset) \
    bus_space_read_4( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
                      ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
                      offset)

/* Write to an absolute offset in the adapter's memory space */
#define E1000_WRITE_OFFSET(hw, offset, value) \
    bus_space_write_4( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
                       ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
                       offset, \
                       value)
#else

/* RISC OS PCI read/write macros - just read and write directly - simple */

#define E1000_WRITE_FLUSH(a) {volatile uint32_t dummy=E1000_READ_REG(a, STATUS);(void)dummy;}

#define E1000_READ_OFFSET(hw, offset) \
   (*((volatile uint32_t *)((hw)->hw_addr + offset)))

#define E1000_WRITE_OFFSET(hw, offset, value) \
   (*((volatile uint32_t *)((hw)->hw_addr + offset)) = value)

#endif

/* Convert a register name to its offset in the adapter's memory space */
#define E1000_REG_OFFSET(hw, reg) \
    ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg)

#define E1000_READ_REG(hw, reg) \
    E1000_READ_OFFSET(hw, E1000_REG_OFFSET(hw, reg))

#define E1000_WRITE_REG(hw, reg, value) \
    E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg), value)

#define E1000_READ_REG_ARRAY(hw, reg, index) \
    E1000_READ_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2))

#define E1000_WRITE_REG_ARRAY(hw, reg, index, value) \
    E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2), value)


#endif  /* _FREEBSD_OS_H_ */

@


1.4
log
@Tidy up syntax messages
Addition of user guide
Rearrange ekinfo output
Function names stripped to save ROM space
Add link failures and polarity statistics

Version 0.08. Tagged as 'EtherK-0_08'
@
text
@d3 1
a3 1
Copyright (c) 2001-2002, Intel Corporation
d59 4
d65 1
d71 1
d78 2
d81 1
a108 3
#define MSGOUT(S, A, B)     printf(S "\n", A, B)
#define DEBUGFUNC(F)        DEBUGOUT(F);

d126 12
a137 39
#define E1000_READ_REG(a, reg) (\
 ((a)->mac_type >= em_82543) ? \
   bus_space_read_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
                     ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
                     E1000_##reg): \
   bus_space_read_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
                      ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
                       E1000_82542_##reg))


#define E1000_WRITE_REG(a, reg, value) (\
 ((a)->mac_type >= em_82543) ? \
   bus_space_write_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
                     ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
                     E1000_##reg, value): \
   bus_space_write_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
                      ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
                       E1000_82542_##reg, value))


#define E1000_READ_REG_ARRAY(a, reg, offset) (\
 ((a)->mac_type >= em_82543) ? \
   bus_space_read_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
                     ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
                     (E1000_##reg + ((offset) << 2))): \
   bus_space_read_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
                      ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
                       (E1000_82542_##reg + ((offset) << 2))))


#define E1000_WRITE_REG_ARRAY(a, reg, offset, value) (\
  ((a)->mac_type >= em_82543) ? \
      bus_space_write_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
                      ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
                      (E1000_##reg + ((offset) << 2)), value): \
      bus_space_write_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
                      ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
                      (E1000_82542_##reg + ((offset) << 2)), value))

d144 2
a145 4
#define E1000_READ_REG(a, reg) (\
 ((a)->mac_type >= em_82543) ? \
   (*((volatile uint32_t *)((a)->hw_addr + E1000_##reg))): \
   (*((volatile uint32_t *)((a)->hw_addr + E1000_82542_##reg))))
d147 2
d150 1
a150 4
#define E1000_WRITE_REG(a, reg, value) (\
 ((a)->mac_type >= em_82543) ? \
   (*((volatile uint32_t *)((a)->hw_addr + E1000_##reg)) = value): \
   (*((volatile uint32_t *)((a)->hw_addr + E1000_82542_##reg)) = value))
d152 3
d156 2
a157 4
#define E1000_READ_REG_ARRAY(a, reg, offset) (\
 ((a)->mac_type >= em_82543) ? \
   (*((volatile uint32_t *)((a)->hw_addr + E1000_##reg + ((offset) << 2)))): \
   (*((volatile uint32_t *)((a)->hw_addr + E1000_82542_##reg + ((offset) << 2)))))
d159 2
d162 2
a163 4
#define E1000_WRITE_REG_ARRAY(a, reg, offset, value) (\
 ((a)->mac_type >= em_82543) ? \
   (*((volatile uint32_t *)((a)->hw_addr + E1000_##reg + ((offset) << 2))) = value): \
   (*((volatile uint32_t *)((a)->hw_addr + E1000_82542_##reg + ((offset) << 2))) = value))
d165 2
a167 1
#endif
@


1.3
log
@Merge in changes from the latest BSD driver. EtherK is now based on
version 1.4.7 of the FreeBSD 'em' device driver.
Merge in changes from the latest BSD driver. EtherK is now based on version

Version 0.06. Tagged as 'EtherK-0_06'
@
text
@a72 3

#define MSGOUT(S, A, B)     printf(S "\n", A, B)
#define DEBUGFUNC(F)        DEBUGOUT(F);
a73 1
	#include <DebugLib/DebugLib.h>
d99 7
@


1.2
log
@Addition of support for *CONFIGURE eklink to allow forceable setting of speed
Fix to link list handler so multiple 82540's are supported at once

Version 0.05. Tagged as 'EtherK-0_05'
@
text
@d3 1
a3 1
Copyright (c) 2001-2002 Intel Corporation
d6 9
a14 11
Redistribution and use in source and binary forms of the Software, with or
without modification, are permitted provided that the following conditions
are met:

 1. Redistributions of source code of the Software may retain the above
    copyright notice, this list of conditions and the following disclaimer.

 2. Redistributions in binary form of the Software may reproduce the above
    copyright notice, this list of conditions and the following disclaimer
    in the documentation and/or other materials provided with the
    distribution.
d17 2
a18 2
    contributors shall be used to endorse or promote products derived from
    this Software without specific prior written permission.
d23 8
a30 8
ARE DISCLAIMED. IN NO EVENT SHALL THE INTEL OR ITS CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
d34 1
a34 1
/*$FreeBSD$*/
d41 3
a43 1
//#include <sys/systm.h>
d47 3
a49 1
//#include <sys/malloc.h>
d51 11
a61 9
//#include <sys/bus.h>
//#include <machine/bus.h>
//#include <sys/rman.h>
//#include <machine/resource.h>
//#include <vm/vm.h>
//#include <vm/pmap.h>
//#include <machine/clock.h>
//#include <pci/pcivar.h>
//#include <pci/pcireg.h>
d64 1
a64 1

d107 2
a108 2
    bus_space_tag_t    mem_bus_space_tag;
    bus_space_handle_t mem_bus_space_handle;
d110 1
a110 1
    struct device     *dev;
d115 2
d159 2
@


1.1
log
@Initial revision
@
text
@d72 8
d92 1
@


1.1.1.1
log
@Initial import from James Byrne

@
text
@@
