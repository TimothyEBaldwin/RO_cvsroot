head	1.9;
access;
symbols
	EtherK-0_25:1.9
	EtherK-0_24:1.9
	EtherK-0_23:1.9
	EtherK-0_22:1.9
	EtherK-0_21:1.9
	EtherK-0_20:1.9
	EtherK-0_19:1.9
	EtherK-0_18:1.9
	EtherK-0_17:1.9
	EtherK-0_16:1.9
	EtherK-0_15:1.9
	EtherK-0_14:1.9
	RO_5_07:1.9
	EtherK-0_13:1.9
	EtherK-0_12:1.8
	EtherK-0_11:1.8
	EtherK-0_10:1.8
	EtherK-0_09:1.7
	EtherK-0_08:1.6
	EtherK-0_07:1.6
	EtherK-0_06:1.6
	EtherK-0_05:1.5
	EtherK-0_04:1.4
	EtherK-0_03:1.3
	EtherK-0_02:1.2
	EtherK-0_01:1.1.1.1
	EtherK-0_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2004.09.06.13.27.26;	author jbyrne;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.18.22.09.50;	author jbyrne;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.20.16.04.07;	author jbyrne;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.11.19.14.05;	author jbyrne;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.04.16.19.11;	author rsprowson;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.21.08.37.51;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.14.23.17.21;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.09.19.54.05;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.09.19.21.37;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.09.19.21.37;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.9
log
@  Update BSD-derived code to version 1.7.35 of the FreeBSD driver sources.
  Rewrite and improve test code.
Detail:
  if_em.c, if_em_hw.c, if_em.h, if_em_hw.h and if_em_osdep.h have all
  been updated to version 1.7.35 of the FreeBSD sources. This version of
  the FreeBSD source tarball is now in the Original directory and earlier
  ones have been removed. The main effect of the changes is to add support
  for later Intel controllers. Note that workaround code required to
  support the 82544 when running on a PCIX bus, and to support the 82547EI
  has not been included to remove unnecessary complication. If support for
  these controllers is ever required (unlikely), this would need to be
  added back in.
  The test code has been rewritten and is now in a new file, test.c.
  Loopback code from the Linux driver is located in the loopback.c file
  and can optionally be compiled in by changing the #define at the top of
  test.c, but since this is GPL code it cannot be included in any
  distributed module. Also, although the test will work, it does not
  restore everything correctly so the link stays down afterwards until the
  module is reinitialised.
  AutoSense/EtherK has been updated to recognise all supported cards.
  doc/UserGuide has been updated.
Admin:
  Basic testing has been carried out, but more testing is required.
  Note that the updated AutoSense and UserGuide files need to be
  included in future distributions including this module.


Version 0.13. Tagged as 'EtherK-0_13'
@
text
@/**************************************************************************

Copyright (c) 2001-2003, Intel Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 3. Neither the name of the Intel Corporation nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

***************************************************************************/

/*$FreeBSD$*/

#ifndef _EM_H_DEFINED_
#define _EM_H_DEFINED_


#include <sys/param.h>
#ifndef RISCOS
#include <sys/systm.h>
#endif
#include <sys/mbuf.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#ifndef RISCOS
#include <sys/malloc.h>
#endif
#include <sys/kernel.h>
#include <sys/sockio.h>

#include <net/if.h>
#include <net/if_arp.h>
#include <net/ethernet.h>
#include <net/if_dl.h>
#ifndef RISCOS
#include <net/if_media.h>

#include <net/bpf.h>
#endif
#include <net/if_types.h>
#ifndef RISCOS
#include <net/if_vlan_var.h>
#endif

#include <netinet/in_systm.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>

#ifndef RISCOS
#include <sys/bus.h>
#include <machine/bus.h>
#include <sys/rman.h>
#include <machine/resource.h>
#include <vm/vm.h>
#include <vm/pmap.h>
#include <machine/clock.h>
#if __FreeBSD_version >= 502000
#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#else
#include <pci/pcivar.h>
#include <pci/pcireg.h>
#endif
#include <sys/proc.h>
#include <sys/sysctl.h>
#include "opt_bdg.h"
#else
#include <sys/queue.h>
#endif

#ifndef RISCOS
#ifdef LM
#include "if_em_hw.h"
#else
#include <dev/em/if_em_hw.h>
#endif
#else
#include "if_em_hw.h"
#endif

/* Tunables */

/*
 * EM_MAX_TXD: Maximum number of Transmit Descriptors
 * Valid Range: 80-256 for 82542 and 82543-based adapters
 *              80-4096 for others
 * Default Value: 256
 *   This value is the number of transmit descriptors allocated by the driver.
 *   Increasing this value allows the driver to queue more transmits. Each
 *   descriptor is 16 bytes.
 */
#define EM_MAX_TXD                      256

/*
 * EM_MAX_RXD - Maximum number of receive Descriptors
 * Valid Range: 80-256 for 82542 and 82543-based adapters
 *              80-4096 for others
 * Default Value: 256
 *   This value is the number of receive descriptors allocated by the driver.
 *   Increasing this value allows the driver to buffer more incoming packets.
 *   Each descriptor is 16 bytes.  A receive buffer is also allocated for each
 *   descriptor. The maximum MTU size is 16110.
 *
 */
#ifndef RISCOS
#define EM_MAX_RXD                      256
#else
#define EM_MAX_RXD                      80
#endif

/*
 * EM_TIDV - Transmit Interrupt Delay Value 
 * Valid Range: 0-65535 (0=off)
 * Default Value: 64
 *   This value delays the generation of transmit interrupts in units of
 *   1.024 microseconds. Transmit interrupt reduction can improve CPU
 *   efficiency if properly tuned for specific network traffic. If the
 *   system is reporting dropped transmits, this value may be set too high
 *   causing the driver to run out of available transmit descriptors.
 */
#define EM_TIDV                         64

/*
 * EM_TADV - Transmit Absolute Interrupt Delay Value (Not valid for 82542/82543/82544)
 * Valid Range: 0-65535 (0=off)
 * Default Value: 64
 *   This value, in units of 1.024 microseconds, limits the delay in which a
 *   transmit interrupt is generated. Useful only if EM_TIDV is non-zero,
 *   this value ensures that an interrupt is generated after the initial
 *   packet is sent on the wire within the set amount of time.  Proper tuning,
 *   along with EM_TIDV, may improve traffic throughput in specific
 *   network conditions.
 */
#define EM_TADV                         64

/*
 * EM_RDTR - Receive Interrupt Delay Timer (Packet Timer) 
 * Valid Range: 0-65535 (0=off)
 * Default Value: 0
 *   This value delays the generation of receive interrupts in units of 1.024
 *   microseconds.  Receive interrupt reduction can improve CPU efficiency if
 *   properly tuned for specific network traffic. Increasing this value adds
 *   extra latency to frame reception and can end up decreasing the throughput
 *   of TCP traffic. If the system is reporting dropped receives, this value
 *   may be set too high, causing the driver to run out of available receive
 *   descriptors.
 *
 *   CAUTION: When setting EM_RDTR to a value other than 0, adapters
 *            may hang (stop transmitting) under certain network conditions.
 *            If this occurs a WATCHDOG message is logged in the system event log.
 *            In addition, the controller is automatically reset, restoring the
 *            network connection. To eliminate the potential for the hang
 *            ensure that EM_RDTR is set to 0.
 */
#define EM_RDTR                         0

/*
 * Receive Interrupt Absolute Delay Timer (Not valid for 82542/82543/82544)
 * Valid Range: 0-65535 (0=off)
 * Default Value: 64
 *   This value, in units of 1.024 microseconds, limits the delay in which a
 *   receive interrupt is generated. Useful only if EM_RDTR is non-zero,
 *   this value ensures that an interrupt is generated after the initial
 *   packet is received within the set amount of time.  Proper tuning,
 *   along with EM_RDTR, may improve traffic throughput in specific network
 *   conditions.
 */
#define EM_RADV                         64


/*
 * This parameter controls the maximum no of times the driver will loop
 * in the isr.
 *           Minimum Value = 1
 */
#define EM_MAX_INTR                     3

/*
 * Inform the stack about transmit checksum offload capabilities.
 */
#define EM_CHECKSUM_FEATURES            (CSUM_TCP | CSUM_UDP)

/*
 * This parameter controls the duration of transmit watchdog timer.
 */
#define EM_TX_TIMEOUT                   5    /* set to 5 seconds */

/*
 * This parameter controls when the driver calls the routine to reclaim
 * transmit descriptors.
 */
#define EM_TX_CLEANUP_THRESHOLD         EM_MAX_TXD / 8

/*
 * This parameter controls whether or not autonegotation is enabled.
 *              0 - Disable autonegotiation
 *              1 - Enable  autonegotiation
 */
#define DO_AUTO_NEG                     1

/*
 * This parameter control whether or not the driver will wait for
 * autonegotiation to complete.
 *              1 - Wait for autonegotiation to complete
 *              0 - Don't wait for autonegotiation to complete
 */
#define WAIT_FOR_AUTO_NEG_DEFAULT       0

/*
 * EM_MASTER_SLAVE is only defined to enable a workaround for a known compatibility issue
 * with 82541/82547 devices and some switches.  See the "Known Limitations" section of 
 * the README file for a complete description and a list of affected switches.
 *     
 *              0 = Hardware default
 *              1 = Master mode
 *              2 = Slave mode
 *              3 = Auto master/slave
 */ 
/* #define EM_MASTER_SLAVE	2 */

/* Tunables -- End */

#define AUTONEG_ADV_DEFAULT             (ADVERTISE_10_HALF | ADVERTISE_10_FULL | \
                                         ADVERTISE_100_HALF | ADVERTISE_100_FULL | \
                                         ADVERTISE_1000_FULL)

#define EM_VENDOR_ID                    0x8086
#define EM_MMBA                         0x0010 /* Mem base address */
#define EM_ROUNDUP(size, unit) (((size) + (unit) - 1) & ~((unit) - 1))

#define EM_JUMBO_PBA                    0x00000028
#define EM_DEFAULT_PBA                  0x00000030
#define EM_SMARTSPEED_DOWNSHIFT         3
#define EM_SMARTSPEED_MAX               15


#define MAX_NUM_MULTICAST_ADDRESSES     128
#define PCI_ANY_ID                      (~0U)
#define ETHER_ALIGN                     2

/* Defines for printing debug information */
#if defined(RISCOS) && defined(DEBUGLIB)

#include <DebugLib/DebugLib.h>
#define INIT_DEBUGOUT(S)            _dprintf("BSD", S "\n")
#define INIT_DEBUGOUT1(S, A)        _dprintf("BSD", S "\n", A)
#define INIT_DEBUGOUT2(S, A, B)     _dprintf("BSD", S "\n", A, B)
#define IOCTL_DEBUGOUT(S)           _dprintf("BSD", S "\n")
#define IOCTL_DEBUGOUT1(S, A)       _dprintf("BSD", S "\n", A)
#define IOCTL_DEBUGOUT2(S, A, B)    _dprintf("BSD", S "\n", A, B)
#define HW_DEBUGOUT(S)              _dprintf("BSD", S "\n")
#define HW_DEBUGOUT1(S, A)          _dprintf("BSD", S "\n", A)
#define HW_DEBUGOUT2(S, A, B)       _dprintf("BSD", S "\n", A, B)

#else

#define DEBUG_INIT  0
#define DEBUG_IOCTL 0
#define DEBUG_HW    0

#define INIT_DEBUGOUT(S)            if (DEBUG_INIT)  printf(S "\n")
#define INIT_DEBUGOUT1(S, A)        if (DEBUG_INIT)  printf(S "\n", A)
#define INIT_DEBUGOUT2(S, A, B)     if (DEBUG_INIT)  printf(S "\n", A, B)
#define IOCTL_DEBUGOUT(S)           if (DEBUG_IOCTL) printf(S "\n")
#define IOCTL_DEBUGOUT1(S, A)       if (DEBUG_IOCTL) printf(S "\n", A)
#define IOCTL_DEBUGOUT2(S, A, B)    if (DEBUG_IOCTL) printf(S "\n", A, B)
#define HW_DEBUGOUT(S)              if (DEBUG_HW) printf(S "\n")
#define HW_DEBUGOUT1(S, A)          if (DEBUG_HW) printf(S "\n", A)
#define HW_DEBUGOUT2(S, A, B)       if (DEBUG_HW) printf(S "\n", A, B)

#endif


/* Supported RX Buffer Sizes */
#define EM_RXBUFFER_2048        2048
#define EM_RXBUFFER_4096        4096
#define EM_RXBUFFER_8192        8192
#define EM_RXBUFFER_16384      16384


#ifdef __alpha__
	#undef vtophys
	#define vtophys(va)     alpha_XXX_dmamap((vm_offset_t)(va))
#endif /* __alpha__ */

/* ******************************************************************************
 * vendor_info_array
 *
 * This array contains the list of Subvendor/Subdevice IDs on which the driver
 * should load.
 *
 * ******************************************************************************/
typedef struct _em_vendor_info_t {
	unsigned int vendor_id;
	unsigned int device_id;
	unsigned int subvendor_id;
	unsigned int subdevice_id;
	unsigned int index;
} em_vendor_info_t;


#ifndef RISCOS
struct em_buffer {
	struct mbuf    *m_head;
};
#else
struct em_tx_buffer {
	u_int32_t      start_time;
	u_int32_t      buffer_addr;
	u_int8_t       buffer[ETHER_ALIGN + ETHER_HDR_LEN + ETHERMTU];
};

struct em_rx_buffer {
	u_int8_t       buffer[EM_RXBUFFER_2048 + ETHER_ALIGN];
};
#endif


typedef enum _XSUM_CONTEXT_T {
	OFFLOAD_NONE,
	OFFLOAD_TCP_IP,
	OFFLOAD_UDP_IP
} XSUM_CONTEXT_T;

struct adapter;
struct em_int_delay_info {
        struct adapter *adapter;        /* Back-pointer to the adapter struct */
        int offset;                     /* Register offset to read/write */
        int value;                      /* Current value in usecs */
};

/* For 82544 PCIX  Workaround */
typedef struct _ADDRESS_LENGTH_PAIR
{
    u_int64_t   address;
    u_int32_t   length;
} ADDRESS_LENGTH_PAIR, *PADDRESS_LENGTH_PAIR;

typedef struct _DESCRIPTOR_PAIR 
{
    ADDRESS_LENGTH_PAIR descriptor[4];
    u_int32_t   elements;
} DESC_ARRAY, *PDESC_ARRAY;
  
/* Our adapter structure */
struct adapter {
	struct arpcom   interface_data;
	struct adapter *next;
	struct adapter *prev;
	struct em_hw    hw;

	/* FreeBSD operating-system-specific structures */
	struct em_osdep osdep;
	struct device   *dev;
#ifndef RISCOS
	struct resource *res_memory;
	struct resource *res_ioport;
	struct resource *res_interrupt;
	void            *int_handler_tag;
	struct ifmedia  media;
	struct callout_handle timer_handle;
	struct callout_handle tx_fifo_timer_handle;
#else
	struct em_phy_stats phy_stats; /* Missing from BSD driver */
	u_int32_t       diag_icr;      /* For interrupt test */
	u_int32_t       init_start_time;
#endif
	int             io_rid;
	u_int8_t        unit;

	/* Info about the board itself */
	u_int32_t       part_num;
	u_int8_t        link_active;
	u_int16_t       link_speed;
	u_int16_t       link_duplex;
	u_int32_t       smartspeed;
	struct em_int_delay_info tx_int_delay;
        struct em_int_delay_info tx_abs_int_delay;
        struct em_int_delay_info rx_int_delay;
        struct em_int_delay_info rx_abs_int_delay;

	XSUM_CONTEXT_T  active_checksum_context;

	/*
         * Transmit definitions
         *
         * We have an array of num_tx_desc descriptors (handled
         * by the controller) paired with an array of tx_buffers
         * (at tx_buffer_area).
         * The index of the next available descriptor is next_avail_tx_desc.
         * The number of remaining tx_desc is num_tx_desc_avail.
         */
        struct em_tx_desc *tx_desc_base;
        u_int32_t          next_avail_tx_desc;
	u_int32_t          oldest_used_tx_desc;
        volatile u_int16_t num_tx_desc_avail;
        u_int16_t          num_tx_desc;
        u_int32_t          txd_cmd;
#ifndef RISCOS
        struct em_buffer   *tx_buffer_area;
#else
        struct em_tx_buffer *tx_buffer_area;
#endif

	/* 
	 * Receive definitions
         *
         * we have an array of num_rx_desc rx_desc (handled by the
         * controller), and paired with an array of rx_buffers
         * (at rx_buffer_area).
         * The next pair to check on receive is at offset next_rx_desc_to_check
         */
        struct em_rx_desc *rx_desc_base;
        u_int32_t          next_rx_desc_to_check;
        u_int16_t          num_rx_desc;
        u_int32_t          rx_buffer_len;
#ifndef RISCOS
        struct em_buffer   *rx_buffer_area;
#else
        struct em_rx_buffer *rx_buffer_area;
#endif

#ifndef RISCOS
	/* Jumbo frame */
	struct mbuf        *fmp;
	struct mbuf        *lmp;

	struct sysctl_ctx_list sysctl_ctx;
        struct sysctl_oid *sysctl_tree;
#endif

	/* Misc stats maintained by the driver */
	unsigned long   dropped_pkts;
	unsigned long   mbuf_alloc_failed;
	unsigned long   mbuf_cluster_failed;
	unsigned long   no_tx_desc_avail1;
	unsigned long   no_tx_desc_avail2;

	/* Used in for 82547 10Mb Half workaround */
	#define EM_PBA_BYTES_SHIFT	0xA
	#define EM_TX_HEAD_ADDR_SHIFT	7
	#define EM_PBA_TX_MASK		0xFFFF0000
	#define EM_FIFO_HDR              0x10

	#define EM_82547_PKT_THRESH      0x3e0

	u_int32_t       tx_fifo_size;
	u_int32_t       tx_fifo_head;
	u_int32_t       tx_fifo_head_addr;
	u_int64_t       tx_fifo_reset_cnt;
	u_int64_t       tx_fifo_wrk_cnt;
	u_int32_t       tx_head_addr;

	/* For 82544 PCIX Workaround */
	boolean_t pcix_82544;
	boolean_t in_detach;

#ifdef DBG_STATS
	unsigned long   no_pkts_avail;
	unsigned long   clean_tx_interrupts;

#endif
#ifdef RISCOS
	u_int32_t       rx_pkts;
	u_int32_t       max_txd_used;
	u_int32_t       oversize_tx_pkts;
	u_int32_t       watchdog_resets;
	u_int32_t       tx_re_ent_fails;
#ifdef DBG_STATS
	u_int32_t       max_rx_pkts;
	u_int32_t       rx_interrupts;
	u_int32_t       non_rx_interrupts;
	u_int32_t       rx_irq_time;
	u_int32_t       non_rx_irq_time;
	u_int32_t       max_rx_irq_time;
	u_int32_t       max_non_rx_irq_time;
	u_int32_t       tx_calls;
	u_int32_t       tx_call_errors;
	u_int32_t       tx_time;
	u_int32_t       max_tx_time;
#endif
#endif
	struct em_hw_stats stats;
};

#endif                                                  /* _EM_H_DEFINED_ */
@


1.8
log
@Lots of changes due to new code from Intel,this removes lots of
useless code from the driver - smaller and faster?
Now implements blocking if someone (eg.NetFS) tries to transmit before
the link is up.If noone is trying to transmit then the link will
come up in the background.

Version 0.10. Tagged as 'EtherK-0_10'
@
text
@d3 1
a3 1
Copyright (c) 2001-2002, Intel Corporation
d81 4
d87 3
d96 3
d100 1
d108 1
a108 10
 * FlowControl
 * Valid Range: 0-3 (0=none, 1=Rx only, 2=Tx only, 3=Rx&Tx)
 * Default: Read flow control settings from the EEPROM
 *   This parameter controls the automatic generation(Tx) and response(Rx) to
 *   Ethernet PAUSE frames.
 */


/*
 * TxDescriptors
d110 1
a110 1
 *            80-4096 for 82540, 82544, 82545, and 82546-based adapters
d119 1
a119 1
 * RxDescriptors
d121 1
a121 1
 *            80-4096 for 82540, 82544, 82545, and 82546-based adapters
d136 1
a136 1
 * TxIntDelay
d148 1
a148 1
 * TxAbsIntDelay (82540, 82545, and 82546-based adapters only)
d152 1
a152 1
 *   transmit interrupt is generated. Useful only if TxIntDelay is non-zero,
d155 1
a155 1
 *   along with TxIntDelay, may improve traffic throughput in specific
d161 1
a161 1
 * RxIntDelay
d172 1
a172 1
 *   CAUTION: When setting RxIntDelay to a value other than 0, adapters
d177 1
a177 1
 *            ensure that RxIntDelay is set to 0.
d182 1
a182 1
 * RxAbsIntDelay (82540, 82545, and 82546-based adapters only)
d186 1
a186 1
 *   receive interrupt is generated. Useful only if RxIntDelay is non-zero,
d189 1
a189 1
 *   along with RxIntDelay, may improve traffic throughput in specific network
a201 10

/*
 * This parameter determines when the hardware will report that it is
 * done with the packet.
 *           0 - "Done" is reported when the packet has been sent on the wire
 *           1 - "Done" is reported when the packet has been DMA'ed and is on chip.
 *           2 -  Determine the best method.
 */
#define EM_REPORT_TX_EARLY              2

a230 3
#ifndef RISCOS
#define WAIT_FOR_AUTO_NEG_DEFAULT       1
#else
d232 12
a243 1
#endif
d254 1
d257 3
a260 1
#define IOCTL_CMD_TYPE                  u_long
a262 2

#ifndef ETHER_ALIGN
a263 3
#endif

#define QTAG_TYPE                       0x8100
d304 1
d349 20
d386 1
d400 5
a404 4
	u_int32_t       tx_int_delay;
	u_int32_t       tx_abs_int_delay;
	u_int32_t       rx_int_delay;
	u_int32_t       rx_abs_int_delay;
d447 1
a447 1

d449 2
a450 2
	struct mbuf     *fmp;
	struct mbuf     *lmp;
d452 3
d462 20
a506 1

@


1.7
log
@Adds reentrancy checks to the transmit routine.
Change to spl macros to disable *all* interrupts rather than just the
line relating to the device vector number.
User guide tweak.

Version 0.09. Tagged as 'EtherK-0_09'
@
text
@d94 1
a94 1
/* Tunables -- Begin */
d143 14
a156 1
#define EM_TIDV                         128
d179 13
d239 3
d243 1
a243 1

d250 1
d260 2
d263 2
d299 1
a326 2
struct em_tx_buffer {
	STAILQ_ENTRY(em_tx_buffer) em_tx_entry;
d328 1
d330 1
d332 1
a332 1
	struct em_tx_desc *used_tx_desc;
a333 1
	/* For RISC OS, we put the actual buffer itself here */
a335 1
#endif
a337 4
/* ******************************************************************************
 * This structure stores information about the 2k aligned receive buffer
 * into which the E1000 DMA's frames.
 * ******************************************************************************/
a338 7
	STAILQ_ENTRY(em_rx_buffer) em_rx_entry;
	struct mbuf    *m_head;
#ifndef RISCOS
	u_int64_t      buffer_addr;
#else
	u_int32_t      buffer_addr;
	/* For RISC OS, we put the actual buffer itself here */
d340 1
d342 1
a342 1
};
d370 1
d381 1
d383 1
d387 39
a425 21
	/* Transmit definitions */
	struct em_tx_desc *first_tx_desc;
	struct em_tx_desc *last_tx_desc;
	struct em_tx_desc *next_avail_tx_desc;
	struct em_tx_desc *tx_desc_base;
	volatile u_int16_t num_tx_desc_avail;
	u_int16_t       num_tx_desc;
	u_int32_t       txd_cmd;
	struct em_tx_buffer   *tx_buffer_area;
	STAILQ_HEAD(__em_tx_buffer_free, em_tx_buffer)  free_tx_buffer_list;
	STAILQ_HEAD(__em_tx_buffer_used, em_tx_buffer)  used_tx_buffer_list;

	/* Receive definitions */
	struct em_rx_desc *first_rx_desc;
	struct em_rx_desc *last_rx_desc;
	struct em_rx_desc *next_rx_desc_to_check;
	struct em_rx_desc *rx_desc_base;
	u_int16_t       num_rx_desc;
	u_int32_t       rx_buffer_len;
	struct em_rx_buffer   *rx_buffer_area;
	STAILQ_HEAD(__em_rx_buffer, em_rx_buffer)  rx_buffer_list;
a437 2
	unsigned long   no_tx_buffer_avail1;
	unsigned long   no_tx_buffer_avail2;
@


1.6
log
@Merge in changes from the latest BSD driver. EtherK is now based on
version 1.4.7 of the FreeBSD 'em' device driver.
Merge in changes from the latest BSD driver. EtherK is now based on version

Version 0.06. Tagged as 'EtherK-0_06'
@
text
@d406 1
@


1.5
log
@Addition of support for *CONFIGURE eklink to allow forceable setting of speed
Fix to link list handler so multiple 82540's are supported at once

Version 0.05. Tagged as 'EtherK-0_05'
@
text
@d3 1
a3 1
Copyright (c) 2001-2002 Intel Corporation
d6 9
a14 11
Redistribution and use in source and binary forms of the Software, with or
without modification, are permitted provided that the following conditions
are met:

 1. Redistributions of source code of the Software may retain the above
    copyright notice, this list of conditions and the following disclaimer.

 2. Redistributions in binary form of the Software may reproduce the above
    copyright notice, this list of conditions and the following disclaimer
    in the documentation and/or other materials provided with the
    distribution.
d17 2
a18 2
    contributors shall be used to endorse or promote products derived from
    this Software without specific prior written permission.
d23 8
a30 8
ARE DISCLAIMED. IN NO EVENT SHALL THE INTEL OR ITS CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
d41 3
a43 1
//#include <sys/systm.h>
d47 3
a49 1
//#include <sys/malloc.h>
d57 2
a58 1
//#include <net/if_media.h>
d60 2
a61 1
//#include <net/bpf.h>
d63 3
a65 1
//#include <net/if_vlan_var.h>
d73 1
a73 4
#ifdef RISCOS
//#include <net/if_arp.h>
#include <sys/queue.h>
#else
d84 2
d88 3
a90 1
#ifdef RISCOS
a91 2
#else
#include <dev/em/if_em_hw.h>
d94 33
a126 2
/* Tunables */
#define MAX_TXD                         256
d128 1
a128 1
#define MAX_RXD                         256
d130 1
a130 1
#define MAX_RXD                         80
d132 50
a181 8
#define TX_CLEANUP_THRESHOLD            MAX_TXD / 8
#define TIDV                            128
#define RIDV                            28
#define DO_AUTO_NEG                     1
#define WAIT_FOR_AUTO_NEG_DEFAULT       1
#define AUTONEG_ADV_DEFAULT             (ADVERTISE_10_HALF | ADVERTISE_10_FULL | \
                                         ADVERTISE_100_HALF | ADVERTISE_100_FULL | \
                                         ADVERTISE_1000_FULL)
d183 4
d188 4
a191 1
#define EM_MAX_INTR                     3
d194 23
d218 3
a264 1

d283 1
a283 2
typedef struct _em_vendor_info_t
{
a295 1
	u_int32_t       num_tx_desc_used;
d297 2
a304 1

d346 1
a364 1
	struct em_tx_desc *oldest_used_tx_desc;
d392 2
a393 2
	unsigned long   xmit_pullup;
	unsigned long   no_tx_desc_avail;
d405 1
@


1.4
log
@New code drop from James
Adds AutoSense program to integrate with !Configure
Debugging support added to IRQ handlers
Messages tweaked to allow better compression in ROM

Version 0.04. Tagged as 'EtherK-0_04'
@
text
@d123 15
d152 2
d295 2
a296 1
#ifdef IRQ_STATS
d304 4
@


1.3
log
@New drop from James Byrne
Resources capable of being ROMmed and tokenised
Makefile changes
Fix for declaring the wrong MAC address which confused some switches

Version 0.03. Tagged as 'EtherK-0_03'
@
text
@a275 2
	u_int32_t       interrupts;
	u_int32_t       rx_interrupts;
a276 1
	u_int32_t       max_rxd_used;
d278 9
@


1.2
log
@Messages placed in messages file
Improvements to shared interrupt handling
Makefile updated
Tidied logging

Version 0.02. Tagged as 'EtherK-0_02'
@
text
@d91 1
d93 3
d276 5
a280 1
	unsigned long   interrupts;
@


1.1
log
@Initial revision
@
text
@d214 2
d270 3
@


1.1.1.1
log
@Initial import from James Byrne

@
text
@@
