head	1.13;
access;
symbols
	EtherK-0_25:1.13
	EtherK-0_24:1.13
	EtherK-0_23:1.13
	EtherK-0_22:1.12
	EtherK-0_21:1.12
	EtherK-0_20:1.12
	EtherK-0_19:1.12
	EtherK-0_18:1.12
	EtherK-0_17:1.12
	EtherK-0_16:1.12
	EtherK-0_15:1.12
	EtherK-0_14:1.12
	RO_5_07:1.12
	EtherK-0_13:1.12
	EtherK-0_12:1.11
	EtherK-0_11:1.10
	EtherK-0_10:1.10
	EtherK-0_09:1.10
	EtherK-0_08:1.9
	EtherK-0_07:1.8
	EtherK-0_06:1.7
	EtherK-0_05:1.6
	EtherK-0_04:1.5
	EtherK-0_03:1.4
	EtherK-0_02:1.3
	EtherK-0_01:1.2
	EtherK-0_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2012.02.05.22.38.19;	author jlee;	state Exp;
branches;
next	1.12;
commitid	IbuCtBQH8ng7j1Sv;

1.12
date	2004.09.06.13.27.26;	author jbyrne;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.02.19.08.23;	author jbyrne;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.20.16.04.07;	author jbyrne;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.18.19.20.53;	author jbyrne;	state Exp;
branches;
next	1.8;

1.8
date	2002.12.13.17.55.55;	author jbyrne;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.11.19.14.05;	author jbyrne;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.04.16.19.11;	author rsprowson;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.21.08.37.51;	author rsprowson;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.14.23.17.21;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.09.19.54.05;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.09.19.38.11;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.09.19.21.37;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.09.19.21.37;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Fix rom_link errors
Detail:
  c/ekmodule, c/em_riscos, c/info, c/log, c/msgs, c/test, h/em_riscos, h/msgs
  After the makefile rewrite the rom_link phase has started complaining about msgs_init and msgs_lookup being multiply defined (in EtherK & clib)
  I'm not sure how the original makefile sidestepped the issue, but a simple search and replace of msgs_ -> messages_ fixes the issue
Admin:
  rom_link phase now completes without errors
  Module not tested at runtime


Version 0.23. Tagged as 'EtherK-0_23'
@
text
@/* Copyright 2002 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    em_riscos.h                                       */
/*                                                            */
/* Purpose: RISC OS specific interface routines to the BSD    */
/*          driver code for the EtherK device driver.         */
/*                                                            */
/* Author:  J.R.Byrne. Some routines (mainly filtering) were  */
/*          adapted from Ether1 and EtherI.                   */
/**************************************************************/

#ifndef EtherK_em_riscos_h
#define EtherK_em_riscos_h

#include <stdint.h>
#include <stdbool.h>

#include <kernel.h>

#include <sys/types.h>

/* Nastiness. We want the definitions in sys/malloc.h, but not the  */
/* alternative definitions of malloc() and free(). We should see if */
/* we can tidy this up some day if possible.                        */
#undef KERNEL
#include <sys/malloc.h>
#define KERNEL

#include <sys/mbuf.h>
#include <sys/dcistructs.h>

/* Types */

typedef bool boolean_t;

struct adapter; /* Forward declaration - defined in if_em.h */
struct device;  /* Forward declaration - defined in em_device.h */
typedef struct device *device_t;

#include "if_em_hw.h"
#include "filter.h"

/* NVRAM settings */
typedef union
{
   uint32_t value;
   struct
   {
      uint32_t link   : 3;
      uint32_t mdix   : 2;
      uint32_t fc     : 2;
      uint32_t unused : 1;
   } fields;
} NVRAMData;

typedef enum
{
    link_auto = 0,
    link_1000,
    link_100_half,
    link_100_full,
    link_10_half,
    link_10_full,
    link_max
} ConfigLink;

/* Structure for keeping message log */

/* Size of buffer must be at least 255 + 1 + 5 + 1 */
#define MSGLOG_BUFSIZE 640

typedef struct
{
    unsigned    messages_logged;/* Total number of messages logged */
    int         last_msg_end;   /* Offset to byte after final byte of last entry written */
    int         top_msg_start;  /* Offset to first byte of last message in buffer */
    uint8_t     buffer[MSGLOG_BUFSIZE];
} MessageLog;

/* Macros */

#define device_set_desc_copy(a, b)

#define contigmalloc(size, type, flags, low, high, alignment, boundary) \
    em_ro_pci_memalloc(size, alignment, boundary)

#define contigfree(address, size, type) \
    em_ro_pci_memfree(address)

#define msec_delay(x) usec_delay(1000*(x))

/*#define splimp(a) em_ro_disable_dev_irq(adapter->dev)*/
/*#define splx(a) {if ((a) != 0) em_ro_enable_dev_irq(adapter->dev);}*/
#include <AsmUtils/irqs.h>
#define splimp(a) ensure_irqs_off()
#define splx(a) restore_irqs(a)

#define MAX(a,b) (((a)>(b))?(a):(b))

/* Function prototypes for if_em.c */

int  em_probe (device_t dev);
int  em_attach (device_t dev);
int  em_detach (device_t dev);
void em_stop (struct adapter * adapter);
int  em_intr (struct adapter * adapter);
void em_local_timer (struct adapter * adapter);
void em_update_stats_counters (struct adapter * adapter);
void em_clean_transmit_interrupts (struct adapter * adapter);
void em_print_link_status (struct adapter * adapter);
int  em_init (struct adapter * adapter);
int  em_setup_transmit_structures (struct adapter *);
int  em_setup_receive_structures (struct adapter *);
void em_free_transmit_structures (struct adapter *);
void em_free_receive_structures (struct adapter *);

/* Function prototypes for test.c */

void test_run (device_t dev);

/* Function prototypes for em_asm.s */

void em_asm_irq_trampoline (void);
void em_asm_callproto (DibRef dib, struct mbuf * frames, void (*fs_handler)(), uint32_t fs_pwptr);

/* Function prototypes for em_riscos.c */

void usec_delay(uint32_t delay);
void pci_write_config(device_t dev, int reg, uint32_t val, int width);
uint32_t pci_read_config(device_t dev, int reg, int width);
uint32_t vtophys (vm_offset_t v);
int  em_ro_start (device_t dev);
void em_ro_restart (device_t dev);
int  em_ro_irq_handler(_kernel_swi_regs *r, void *pw);
void em_ro_flush_wb (void);
void em_ro_init_supported_stats (struct stats * supported);
void em_ro_init_stats (device_t dev);
void em_ro_update_stats (device_t dev);
_kernel_oserror * em_ro_change_link (device_t dev, ConfigLink link, uint8_t mdix);
_kernel_oserror * em_ro_set_advertise(device_t dev, uint8_t setting);
_kernel_oserror * em_ro_set_flow(device_t dev, em_fc_type setting);
void em_ro_read_configuration (device_t dev);
void em_ro_check_options (device_t dev);
void em_ro_update_addrlevel (device_t dev);
void * em_ro_pci_memalloc (size_t size, uint32_t alignment, uint32_t boundary);
void em_ro_pci_memfree (void * address);
int em_ro_disable_dev_irq (device_t dev);
void em_ro_enable_dev_irq (device_t dev);
bool em_ro_get_pci_hw_address (device_t dev, uint8_t ** result);
bool em_ro_get_pci_io_address (device_t dev, uint32_t address_index, uint32_t * result);
bool em_ro_setup_intr (device_t dev);
void em_ro_teardown_intr(device_t dev);
void em_ro_filter_packet(struct adapter * adapter, uint8_t * packet, uint32_t len,
    struct mbuf ** m_head_ptr, FilterSingleRef * current_filter);
int em_ro_transmit (device_t dev, struct mbuf * m_head, int num_packets, uint8_t * edst, uint8_t * esrc, uint16_t type);
int af_reject(uint32_t level, uint8_t *pack_hdr, uint8_t *mac_addr);
void em_ro_watchdog(device_t dev, uint32_t now);
#ifdef DBG_STATS
void em_ro_init_dbg_stats (void);
uint32_t em_ro_get_time (void);
#endif

#endif
@


1.12
log
@  Update BSD-derived code to version 1.7.35 of the FreeBSD driver sources.
  Rewrite and improve test code.
Detail:
  if_em.c, if_em_hw.c, if_em.h, if_em_hw.h and if_em_osdep.h have all
  been updated to version 1.7.35 of the FreeBSD sources. This version of
  the FreeBSD source tarball is now in the Original directory and earlier
  ones have been removed. The main effect of the changes is to add support
  for later Intel controllers. Note that workaround code required to
  support the 82544 when running on a PCIX bus, and to support the 82547EI
  has not been included to remove unnecessary complication. If support for
  these controllers is ever required (unlikely), this would need to be
  added back in.
  The test code has been rewritten and is now in a new file, test.c.
  Loopback code from the Linux driver is located in the loopback.c file
  and can optionally be compiled in by changing the #define at the top of
  test.c, but since this is GPL code it cannot be included in any
  distributed module. Also, although the test will work, it does not
  restore everything correctly so the link stays down afterwards until the
  module is reinitialised.
  AutoSense/EtherK has been updated to recognise all supported cards.
  doc/UserGuide has been updated.
Admin:
  Basic testing has been carried out, but more testing is required.
  Note that the updated AutoSense and UserGuide files need to be
  included in future distributions including this module.


Version 0.13. Tagged as 'EtherK-0_13'
@
text
@d87 1
a87 1
    unsigned    msgs_logged;    /* Total number of messages logged */
@


1.11
log
@  Restructure and tidy up.
Detail:
  This version has no functional changes, but has been considerably
  tidied up to improve commenting and modularity. In particular the
  information printing routines, filtering routines and message
  logging routines have been split out into separate source files.
  The filtering routines have also been re-worked to be more
  comprehensible. Hopefully this will provide a useful base for
  developing future network drivers.
Admin:
  Requires an up-to-date version of BuildSys to build all variants.
  Basic testing indicates it still works, but more long term testing
  to confirm that nothing has been accidentally broken is required.


Version 0.12. Tagged as 'EtherK-0_12'
@
text
@d130 1
a130 1
/* Function prototypes for e1000_idiag.c */
d132 1
a132 1
void e1000_diag_run (device_t dev);
@


1.10
log
@Adds reentrancy checks to the transmit routine.
Change to spl macros to disable *all* interrupts rather than just the
line relating to the device vector number.
User guide tweak.

Version 0.09. Tagged as 'EtherK-0_09'
@
text
@d15 10
d54 1
a54 37

/* Structures for holding a unit's filtering information */
typedef struct filtersingle
{
    uint32_t    fs_addrlevel;
    uint32_t    fs_errlevel;
    void        (*fs_handler)();
    uint32_t    fs_pwptr;
} FilterSingle, *FilterSingleRef;

typedef struct filterchain
{
    struct filterchain * fc_next;   /* Must be the first field [see do_chainfilter()] */
    uint32_t             fc_type;
    FilterSingle         fc_filter;
} FilterChain, *FilterChainRef;

#define fc_addrlevel	fc_filter.fs_addrlevel
#define fc_errlevel	fc_filter.fs_errlevel
#define fc_handler	fc_filter.fs_handler
#define fc_pwptr	fc_filter.fs_pwptr

/* Typedef for pointer to filter function */
typedef int (*AddressFilter)(uint32_t level, uint8_t * pack_hdr, uint8_t * mac_addr);

/* Structure for keeping message log */

/* Size of buffer must be at least 255 + 1 + 5 + 1 */
#define MSGLOG_BUFSIZE 640

typedef struct
{
    unsigned    msgs_logged;    /* Total number of messages logged */
    int         last_msg_end;   /* Offset to byte after final byte of last entry written */
    int         top_msg_start;  /* Offset to first byte of last message in buffer */
    uint8_t     buffer[MSGLOG_BUFSIZE];
} MessageLog;
d80 12
a110 5
/*
 * Checks for valid filter parameters
 */
#define check_errlevel(x)	((x) == ERRLVL_NO_ERRORS)

a144 4
#pragma -v1   /* hint to the compiler to check f/s/printf format */
void em_ro_log_message(device_t dev, const char * format, ...);
#pragma -v0   /* back to default */
void em_ro_log_error(device_t dev, _kernel_oserror * e);
a151 7
void em_ro_info_indent(int indent);
void em_ro_info_print(int indent, const char * token, int nparams, ...);
#pragma -v1   /* hint to the compiler to check f/s/printf format */
void em_ro_info_printf(int indent, const char * token, const char * format, ...);
#pragma -v0   /* back to default */
_kernel_oserror * em_ro_info (device_t dev, bool verbose);
_kernel_oserror * em_ro_log (device_t dev);
@


1.9
log
@Tidy up syntax messages
Addition of user guide
Rearrange ekinfo output
Function names stripped to save ROM space
Add link failures and polarity statistics

Version 0.08. Tagged as 'EtherK-0_08'
@
text
@d119 5
a123 3
#define splimp(a) em_ro_disable_dev_irq(adapter->dev)

#define splx(a) {if ((a) != 0) em_ro_enable_dev_irq(adapter->dev);}
@


1.8
log
@Interrupt handling got broken in 0.06 so although packets were being
received noone ever saw them.
Change to DCI flags.
Addition of new Configure keywords (EkAdvertise and EkFlowControl).
Improvement to the interrupt handler so interrupts are turned off for
slightly less time.

Version 0.07. Tagged as 'EtherK-0_07'
@
text
@a129 6
/* Definitions */

/*#ifndef OS_Hardware
#define OS_Hardware (0x7a)
#endif*/

d168 1
@


1.7
log
@Merge in changes from the latest BSD driver. EtherK is now based on
version 1.4.7 of the FreeBSD 'em' device driver.
Merge in changes from the latest BSD driver. EtherK is now based on version

Version 0.06. Tagged as 'EtherK-0_06'
@
text
@d43 2
d88 4
a91 2
      uint32_t link : 3;
      uint32_t unused : 5;
d185 3
a187 1
_kernel_oserror * em_ro_change_link (device_t dev, ConfigLink link);
@


1.6
log
@Addition of support for *CONFIGURE eklink to allow forceable setting of speed
Fix to link list handler so multiple 82540's are supported at once

Version 0.05. Tagged as 'EtherK-0_05'
@
text
@d137 1
a137 1
void em_stop(struct adapter * adapter);
d139 1
a139 1
void em_watchdog (struct adapter * adapter);
d143 9
a151 1
int  em_init(struct adapter * adapter);
d169 1
d197 1
@


1.5
log
@New code drop from James
Adds AutoSense program to integrate with !Configure
Debugging support added to IRQ handlers
Messages tweaked to allow better compression in ROM

Version 0.04. Tagged as 'EtherK-0_04'
@
text
@d80 23
a104 2
#define __P(a) a

d128 1
a128 1
#ifndef OS_Hardware
d130 1
a130 1
#endif
d172 3
d188 2
a189 2
#ifdef IRQ_STATS
void em_ro_init_irq_stats (void);
@


1.4
log
@New drop from James Byrne
Resources capable of being ROMmed and tokenised
Makefile changes
Fix for declaring the wrong MAC address which confused some switches

Version 0.03. Tagged as 'EtherK-0_03'
@
text
@d164 4
@


1.3
log
@Messages placed in messages file
Improvements to shared interrupt handling
Makefile updated
Tidied logging

Version 0.02. Tagged as 'EtherK-0_02'
@
text
@a120 1
void em_print_hw_stats (struct adapter * adapter);
@


1.2
log
@em_disable_intr fudged to disable ALL interrupts
PreReset attempt

Version 0.01. Tagged as 'EtherK-0_01'
@
text
@d37 1
a37 1
typedef bool    boolean_t;
d43 1
a43 3
/*
 * Structures for holding a unit's filtering information
 */
d64 1
a64 3
/*
 * Typedef for pointer to filter function
 */
d67 13
a115 1
int  em_shutdown (device_t dev);
a124 1

a131 1

d136 4
d141 1
a141 2
void em_ro_set_receive_level (device_t dev, int addrlevel);
void em_ro_flush_wb (void * p, size_t size);
d145 7
a151 1
void em_ro_info (device_t dev);
a160 1
void em_ro_copy_error (device_t dev, _kernel_oserror *e);
d163 1
a163 2
int  em_ro_transmit (device_t dev, struct mbuf * m_head, int num_packets, uint8_t * edst, uint8_t * esrc, uint16_t type);

@


1.1
log
@Initial revision
@
text
@d107 1
@


1.1.1.1
log
@Initial import from James Byrne

@
text
@@
