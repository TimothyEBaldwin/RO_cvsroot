head	1.3;
access;
symbols
	EtherK-0_25:1.3
	EtherK-0_24:1.3
	EtherK-0_23:1.3
	EtherK-0_22:1.3
	EtherK-0_21:1.3
	EtherK-0_20:1.3
	EtherK-0_19:1.3
	EtherK-0_18:1.3
	EtherK-0_17:1.3
	EtherK-0_16:1.3
	EtherK-0_15:1.3
	EtherK-0_14:1.3
	RO_5_07:1.3
	EtherK-0_13:1.3
	EtherK-0_12:1.3
	EtherK-0_11:1.2
	EtherK-0_10:1.2
	EtherK-0_09:1.2
	EtherK-0_08:1.2
	EtherK-0_07:1.2
	EtherK-0_06:1.2
	EtherK-0_05:1.2
	EtherK-0_04:1.2
	EtherK-0_03:1.2
	EtherK-0_02:1.2
	EtherK-0_01:1.1.1.1
	EtherK-0_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.03.02.19.08.22;	author jbyrne;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.09.19.54.04;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.09.19.21.37;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.09.19.21.37;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Restructure and tidy up.
Detail:
  This version has no functional changes, but has been considerably
  tidied up to improve commenting and modularity. In particular the
  information printing routines, filtering routines and message
  logging routines have been split out into separate source files.
  The filtering routines have also been re-worked to be more
  comprehensible. Hopefully this will provide a useful base for
  developing future network drivers.
Admin:
  Requires an up-to-date version of BuildSys to build all variants.
  Basic testing indicates it still works, but more long term testing
  to confirm that nothing has been accidentally broken is required.


Version 0.12. Tagged as 'EtherK-0_12'
@
text
@/* Copyright 2002 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    mbuf.c                                            */
/*                                                            */
/* Purpose: Interface to MbufManager.                         */
/**************************************************************/

#include <swis.h>

#include <sys/param.h>
#include <sys/mbuf.h>
#include <net/ethernet.h>

#include "mbuf.h"

/* Static variables */

struct mbctl MBCTL =
{
    0,                    /* opaque */
    sizeof(struct mbctl), /* mbcsize */
    MBUF_MANAGER_VERSION, /* mbcvers */
    0ul,                  /* flags */
    MINCONTIG,            /* advminubs */
    ETHERMTU,             /* advmaxubs */
    MINCONTIG,            /* mincontig */
    0ul,                  /* spare1 */
    /* Rest of the structure gets initialised to */
    /* zeroes due to the trailing comma.         */
};

/**************************************************************/
/* mbuf_present()                                             */
/*                                                            */
/* This returns whether or not the mbuf manager is present.   */
/*                                                            */
/* Returns: True if the mbuf manager is present.              */
/**************************************************************/

bool mbuf_present(void)
{
    /* The control SWI with reason code 0 should *always* */
    /* succeed if the mbuf manager is loaded.             */

    return (_swix(Mbuf_Control, _IN(0), 0) == NULL);
}

/**************************************************************/
/* mbuf_open_session()                                        */
/*                                                            */
/* This is called to establish a session with the mbuf        */
/* manager.                                                   */
/*                                                            */
/* Returns: Error pointer.                                    */
/**************************************************************/

_kernel_oserror * mbuf_open_session(void)
{
    return _swix(Mbuf_OpenSession, _IN(0), &MBCTL);
}

/**************************************************************/
/* mbuf_close_session()                                       */
/*                                                            */
/* This is called to close a session with the mbuf manager.   */
/*                                                            */
/* Returns: Error pointer.                                    */
/**************************************************************/

_kernel_oserror * mbuf_close_session(void)
{
    return _swix(Mbuf_CloseSession, _IN(0), &MBCTL);
}
@


1.2
log
@Messages placed in messages file
Improvements to shared interrupt handling
Makefile updated
Tidied logging

Version 0.02. Tagged as 'EtherK-0_02'
@
text
@d15 7
a21 2
#include "kernel.h"
#include "swis.h"
a23 1
#include <sys/errno.h>
d25 1
d27 1
a27 4
#include <netinet/in.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/if_ether.h>
d29 1
a29 1
#include "mbuf.h"
d33 10
a42 12
	0,				/* opaque */
	sizeof(struct mbctl),		/* mbcsize */
	MBUF_MANAGER_VERSION,		/* mbcvers */
	0ul,				/* flags */
	MINCONTIG,			/* advminubs */
	ETHERMTU,			/* advmaxubs */
	MINCONTIG,			/* mincontig */
	0ul,				/* spare1 */
	/*
	 * Rest of the structure gets initialised
	 * to zeroes due to the trailing comma
	 */
d45 7
a51 1
/**********************************************************************/
d53 1
a53 1
extern _kernel_oserror *mb_entryinit(void)
d55 4
a58 1
    return _swix(Mbuf_OpenSession, _IN(0), &MBCTL);
d61 8
a68 1
/**********************************************************************/
d70 1
a70 6
/*
 * mb_present - check whether the mbuf manager is present or not,
 * using the Mbuf_Control SWI to do so.  returns 1 if manager
 * present, else 0.
 */
extern int mb_present(void)
d72 1
a72 5
    /*
     * the control SWI with reason code 0 should *always*
     * succeed if the mbuf manager is loaded.
     */
    return((_swix(Mbuf_Control, _IN(0), 0) == NULL) ? 1 : 0);
d75 7
a81 1
/**********************************************************************/
d83 1
a83 1
extern _kernel_oserror *mb_closesession(void)
a86 4

/**********************************************************************/

/* EOF mbuf.c */
@


1.1
log
@Initial revision
@
text
@a28 11
#ifdef DBGMBUF
static void df(char *s)
{
    _kernel_swi_regs r;
    _kernel_swi(OS_WriteI+4, &r, &r);

    printf(s);
}
#endif


@


1.1.1.1
log
@Initial import from James Byrne

@
text
@@
