head	4.11;
access;
symbols
	Internet-5_65:4.11
	Internet-5_64:4.11
	Internet-5_63:4.11
	Internet-5_62:4.11
	Internet-5_61:4.11
	Internet-5_60:4.10
	Internet-5_59:4.10
	Internet-5_58:4.10
	Internet-5_57:4.10
	Internet-5_56:4.10
	Internet-5_55:4.10
	Internet-5_54:4.10
	Internet-5_53:4.10
	Internet-5_52:4.10
	Internet-5_51:4.10
	Internet-5_50:4.10
	RO_5_07:4.10
	Internet-5_49:4.10
	Internet-5_48:4.10
	Internet-5_47:4.10
	Internet-5_46:4.10
	Internet-5_45:4.10
	Internet-5_44:4.9
	Internet-5_43:4.8
	Internet-5_42:4.7
	Internet-5_41:4.7
	Internet-5_40:4.7
	Internet-5_39:4.7
	Internet-5_38:4.7
	Internet-5_37:4.7
	Internet-5_36:4.6
	Internet-5_35:4.6
	Internet-5_34:4.6
	Internet-5_33:4.5
	Internet-5_32:4.5
	Internet-5_31:4.5
	Internet-5_30:4.5
	Internet-5_29:4.5
	Internet-5_27:4.5
	Internet-5_26:4.5
	Internet-5_25:4.4
	Internet-5_24:4.3
	Internet-5_23:4.3
	Internet-5_22:4.3
	Internet-5_21:4.3
	Internet-5_20:4.3
	Internet-5_19:4.3
	Internet-5_18:4.2
	Internet-5_17:4.2
	Internet-5_16:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	Internet-5_15:4.2
	Internet-5_14:4.2
	Internet-5_13:4.2
	sforrest_daytona_appflash-0_31:4.2
	Internet-5_12:4.2
	Internet-5_11:4.2
	celkins_Internet-5_10:4.2
	nicke_Internat_25-9-98:4.2
	Internet-5_09:4.2
	blaughto_daytona_appflash-0_30:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rwarren_Internet-5_08:4.2
	Spinner:4.2
	Internet_5_07:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	celkins_Internet_506:4.2
	afrost_NC2_Generic:4.1.3.1.2.1
	afrost_Funai01-33:4.1.3.1.2.1
	Internet_505:4.2
	Spinner_RCA116:4.1.3.1.2.1
	Spinner_B20_2:4.1.3.1.2.1
	Spinner_19_3:4.1.3.1.2.1
	Spinner_B18:4.1.3.1.2.1
	Spinner_B17:4.1.3.1.2.1
	Spinner_B15:4.1.3.1.2.1
	Spinner_B14:4.1.3.1.2.1
	Spinner_B13:4.1.3.1.2.1
	Spinner_B12:4.1.3.1.2.1
	Spinner_B10:4.1.3.1.2.1
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Spin_merge:4.1.3.1.2.1
	Spinner_B7:4.1.3.1.2.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.11
date	2015.06.17.22.13.53;	author rsprowson;	state Exp;
branches;
next	4.10;
commitid	BrpcmgDoEfJnHPpy;

4.10
date	2001.09.06.14.19.39;	author kbracey;	state Exp;
branches;
next	4.9;

4.9
date	2000.07.13.10.39.41;	author ahodgkin;	state Exp;
branches;
next	4.8;

4.8
date	2000.07.05.14.48.26;	author kbracey;	state Exp;
branches;
next	4.7;

4.7
date	99.10.14.14.42.45;	author kbracey;	state Exp;
branches;
next	4.6;

4.6
date	99.07.28.12.00.05;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	99.06.25.13.40.09;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	99.06.23.13.10.26;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.02.12.14.57.13;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.12.22.58.20;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.22.25.49;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.05.22.25.49;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	;

4.1.3.1.2.1
date	97.04.11.10.06.15;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.11
log
@Have Internet look after its own messages
Remove faulty logic for Service_MessageFileClosed, MessageTrans reopens the file, so no need to do it again locally.
Usual register/deregister/reregister code for ResourceFS.
Sort the SWI veneers into order, add veneers for ResourceFS in the RAM case.

Version 5.61. Tagged as 'Internet-5_61'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef __kernel_h
#include "kernel.h"
#endif
#ifndef __sys_dcistructs_h
#include "sys/dcistructs.h"
#endif

typedef struct machinetime
{
    unsigned int l,h;
} machinetime;

extern _kernel_oserror *mbuf_open_session(struct mbctl *);
extern _kernel_oserror *mbufcontrol_version(int *);
extern _kernel_oserror *mbuf_close_session(struct mbctl *);
extern _kernel_oserror *messagetrans_file_info(const char *filename);
extern _kernel_oserror *messagetrans_open_file(u_long *fd, const char *filename,
                                               char *buffer);
extern void             messagetrans_close_file(u_long *fd);
extern _kernel_oserror *messagetrans_lookup(u_long *fd, const char *token,
                                            char *buffer, int size,
                                            char **result);
extern _kernel_oserror *resourcefs_register_files(void *resarea);
extern _kernel_oserror *resourcefs_deregister_files(void *resarea);
extern void             service_dci_protocol_status(void *wsp, int status,
                                                    int ver, const u_char *title);
extern void             service_internetstatus_address_changed(void);
extern void             service_internetstatus_interface_updown(int state, const char *name,
                                                                const void *dib);
extern int              service_internetstatus_dynamicboot_start(const char *name, const void *dib,
                                                                 char *pkt, int len, int eoo,
                                                                 unsigned int *error);
extern int              service_internetstatus_dynamicboot_reply(const char *name, const void *dib,
                                                                 char *pkt, int len);
extern int              service_internetstatus_dynamicboot_inform(char *pkt, int len);
extern int              service_internetstatus_duplicate_ip_address(const char *name, const void *dib,
                                                                    struct in_addr ia, u_char *ha);
extern _kernel_oserror *service_enumerate_network_drivers(ChDibRef *);
extern void            *osmodule_claim(size_t);
extern void             osmodule_free(void *);
extern u_long           os_read_monotonic_time(void);
extern _kernel_oserror *os_generate_event(int, int, int, int);
extern _kernel_oserror *os_claim(int, void (*fun)(void), void *);
extern void             os_release(int, void (*fun)(void), void *);
extern _kernel_oserror *os_add_call_back(void (*fun)(void), void *);
extern void             os_remove_call_back(void (*fun)(void), void *);
extern struct mbuf     *econet_inet_rx_direct(int, struct mbuf *,
                                              struct sockaddr *, char *,
                                              int, int, struct mbuf *);
extern _kernel_oserror *taskwindow_task_info(int, int *);
extern int              os_upcall(int, volatile void *);
extern void             osword_read_realtime(machinetime *);
extern u_int            osreadsysinfo_hardware0(void);
extern void             osreadsysinfo_machineid(unsigned int *);
extern void             portable_idle(void);
extern u_int            portable_read_features(void);
extern int              os_read_escape_state(void);
@


4.10
log
@Removed escape acknowledgement again.

This was a bad solution to the problem - acknowledging the escape says that
the module has dealt with it and the calling environment shouldn't take
escape actions. The C library is broken in that when the escape condition
is cleared/acknowledged, it still proceeds to call its SIGINT handler.
Compare this to the correct behaviour of the BASIC run-time; the problem
was originally noticed when calling *Debug, which you have to press Escape
to exit, and it acknowledges that escape, but C still throws SIGINT. When
the C library is fixed (as it shortly will be), if the Internet module
acknowledges escapes, socket calls will return EINTR but not actually
generate SIGINT.

The change was originally made for NFS, whose central code (in common with
most Unix code) retried calls returning EINTR. The problem was that the
escape condition remained unacknowledged so it got stuck in an infinite
loop. The correct fix will be to make sure that any supervisor mode code
such as NFS making blocking socket calls takes appropriate action when EINTR
is returned, or ensures that escape is disabled. Until it is fixed, NFS will
show lock-up symptoms again with this module. Applications will function as
expected, as the C run-time will call the SIGINT handler on exit from the
socket SWI (and acknowledge the escape) - if the signal handler returns the
foreground code can retry the call.

Version 5.45. Tagged as 'Internet-5_45'
@
text
@d37 2
@


4.9
log
@  Econet_InetRxDirect interface extended.
Detail:
  Previously, the SWI didn't care about any return values. The Internet
  module would either free the MBuf passed or send it on to the socket,
  depending on the value of m_len on exit from the SWI. This still works,
  but SWI handlers can now set R1 to zero on exit to claim ownership of
  the MBuf. In this case, the item is neither freed nor passed on to the
  socket, and the new owner must be very careful to make sure that they
  do an appropriate m_free later.
Admin:
  This change was implemented to allow UDPV to point the MPEG system
  directly to the data in the MBuf chains it was passed rather than taking
  a local copy. It has been tested with both new and old UDPV versions and
  both work as expected. Note that any module using the new interface will
  absolutely require it to be present (new UDPV modules built to use the
  interface extension will refuse to start if Internet is too old).

Version 5.44. Tagged as 'Internet-5_44'
@
text
@a69 1
extern void             osbyte_acknowledge_escape(void);
@


4.8
log
@Restored DELAY_EVENTS functionality.

Detail:
VideoControl was having a nasty reentrancy problem inside its event handler;
we've been sending out events at points where a BSD Unix system wouldn't and
exposing a number of potential problems. Fixed by restoring the delayed event
scheme used in earlier versions of Internet 5, but with an extra event send
inside the packet input loop which should alleviate the high load problems
seen with the NEC video client.

Seems to work fine, but we've been unable to get the NEC video client to
work at all, let alone test it on this Internet module. Doesn't matter for
now because we're not shipping it :)

Version 5.43. Tagged as 'Internet-5_43'
@
text
@d59 1
a59 1
extern void             econet_inet_rx_direct(int, struct mbuf *,
@


4.7
log
@Added power-saving - calls Portable_Idle when waiting for a network operation
to complete.

Version 5.37. Tagged as 'Internet-5_37'
@
text
@d69 2
@


4.6
log
@microtime() now returns microsecond accuracy.
Random number generator now seeded from microtime(), machine ID and
hardware addresses of DCI drivers.
Some previously untested debugging code fixed to compile.

Version 5.34. Tagged as 'Internet-5_34'
@
text
@d63 1
a63 1
extern void             os_upcall(int, volatile void *);
d67 2
@


4.5
log
@Added Service_InternetStatus_DuplicateIPAddress to allow graceful behaviour
in the event of a DHCP address clash.
When configuring an interface as a result of DHCP/BOOTP - do a two stage
ARP transmission - first a "gentle" probe from 0.0.0.0 to check, then a
broadcast ARP reply to update everyone's ARP caches if there is no response.
If the probe shows a duplicate, the DHCP module can catch the service call
and send a DHCPDECLINE.
Changed to not respond to ICMP or ARP packets on an interface in the process
of DHCP/BOOTP/RevARP booting. Solves problem of DHCP server probing the
address it wants to give us and having us respond, making it think it's in
use.

Version 5.26. Tagged as 'Internet-5_26'
@
text
@d22 5
d51 1
d60 2
a61 2
					      struct sockaddr *, char *,
					      int, int, struct mbuf *);
d64 3
@


4.4
log
@  Added new service call sub-reason code and support for DHCPINFORM.
  Bug fix for packet pointers.
Detail:
  A new flag has been introduced in the DHCP private ioctl interface
    to request that the Internet module does not fiddle with the
    addresses of interfaces but only sets the system variables in
    response to the content of the DHCPACK message.  The DHCP module
    will pass the DHCPACK message if and when it gets a response to
    an earlier DHCPINFORM that it originated.
  When the bootp_udp_input routine was split into two, the packet
    was passed as a pointer to the packet parser and one reference to
    &pkt hadn't been replaced with just pkt, hence completely wrong
    values were being passed around in the DynamicBootReply service
    call.
  The DynamicBootStart sub-reason code has also been modified to support
    claimers setting R2 to be the errno to be returned to the ioctl
    caller.  This means that modules such as DHCP can return errno
    values back via the Internet module instead of requiring clients to
    know to read the interface status from the DHCP module.
Admin:
  Requires TCPIPLibs 5.18 and later.
  Required by DHCP 0.05 and later.
  Required by IPConfig 0.19 and later.
  TCPIPLibs 5.18's LibraryDoc contains details of the service call.

Version 5.25. Tagged as 'Internet-5_25'
@
text
@d43 2
@


4.3
log
@  New service calls at the point of BOOTP requests and replies to allow
    external software to add things to requests and to extract answers
    from replies.
Detail:
  Prior to sending a request, InternetStatus_DynamicBootStart is issued.
    If this call is claimed, then the request is not placed on the network.
    When the reply comes back, Internet processes it as normal, sets the
    system variables it usually sets and then issues the service call
    InternetStatus_DynamicBootReply to allow other modules to extract any
    configuration that they want but that Internet does not know about.
    If the service call is claimed, Internet reprocesses the packet.
    RiscOS/Sources/Lib/TCPIPLibs/LibraryDoc contains full details.
Admin:
  Requires TCPIPLibs 5.06 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs   tag: TCPIPLibs-5_06)

Version 5.19. Tagged as 'Internet-5_19'
@
text
@d38 2
a39 1
                                                                 char *pkt, int len, int eoo);
d42 1
@


4.2
log
@Version Spinner_B7 taken
@
text
@d37 4
@


4.1
log
@Initial revision
@
text
@d35 2
d41 7
a47 5
extern _kernel_oserror *os_claim(int, int (*fun)(), void *);
extern void             os_release(int, int (*fun)(), void *);
extern _kernel_oserror *os_add_callback(int (*fun)(), void *);
extern void             os_remove_callback(int (*fun)(), void *);
extern void             econet_inet_rx_direct(int, int, int, int, int, int, int);
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.1.2.1
log
@Internet 5.04 merged from Internet 5.03 on Networking source tree with
Internet 4.08 BOOTP extensions from Spinner.
@
text
@a34 2
extern void             service_internetstatus_interface_updown(int state, const char *name,
                                                                const void *dib);
d39 5
a43 7
extern _kernel_oserror *os_claim(int, void (*fun)(void), void *);
extern void             os_release(int, void (*fun)(void), void *);
extern _kernel_oserror *os_add_call_back(void (*fun)(void), void *);
extern void             os_remove_call_back(void (*fun)(void), void *);
extern void             econet_inet_rx_direct(int, struct mbuf *,
					      struct sockaddr *, char *,
					      int, int, struct mbuf *);
@
