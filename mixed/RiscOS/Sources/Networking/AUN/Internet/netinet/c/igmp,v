head	4.6;
access;
symbols
	Internet-5_65:4.6
	Internet-5_64:4.6
	Internet-5_63:4.6
	Internet-5_62:4.6
	Internet-5_61:4.6
	Internet-5_60:4.6
	Internet-5_59:4.6
	Internet-5_58:4.6
	Internet-5_57:4.6
	Internet-5_56:4.6
	Internet-5_55:4.6
	Internet-5_54:4.6
	Internet-5_53:4.6
	Internet-5_52:4.6
	Internet-5_51:4.6
	Internet-5_50:4.6
	RO_5_07:4.6
	Internet-5_49:4.6
	Internet-5_48:4.6
	Internet-5_47:4.6
	Internet-5_46:4.6
	Internet-5_45:4.6
	Internet-5_44:4.6
	Internet-5_43:4.6
	Internet-5_42:4.6
	Internet-5_41:4.6
	Internet-5_40:4.6
	Internet-5_39:4.6
	Internet-5_38:4.6
	Internet-5_37:4.6
	Internet-5_36:4.6
	Internet-5_35:4.6
	Internet-5_34:4.6
	Internet-5_33:4.6
	Internet-5_32:4.6
	Internet-5_31:4.6
	Internet-5_30:4.5
	Internet-5_29:4.5
	Internet-5_27:4.5
	Internet-5_26:4.4
	Internet-5_25:4.4
	Internet-5_24:4.4
	Internet-5_23:4.4
	Internet-5_22:4.4
	Internet-5_21:4.4
	Internet-5_20:4.4
	Internet-5_19:4.4
	Internet-5_18:4.4
	Internet-5_17:4.4
	Internet-5_16:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.4
	Ursula_RiscPC:4.4.0.4
	Internet-5_15:4.4
	Internet-5_14:4.4
	Internet-5_13:4.4
	sforrest_daytona_appflash-0_31:4.4
	Internet-5_12:4.4
	Internet-5_11:4.4
	celkins_Internet-5_10:4.4
	nicke_Internat_25-9-98:4.4
	Internet-5_09:4.4
	blaughto_daytona_appflash-0_30:4.4
	rthornb_UrsulaBuild-19Aug1998:4.4
	UrsulaBuild_FinalSoftload:4.4
	rthornb_UrsulaBuild-12Aug1998:4.4
	aglover_UrsulaBuild-05Aug1998:4.4
	rthornb_UrsulaBuild-29Jul1998:4.4
	rthornb_UrsulaBuild-22Jul1998:4.4
	rwarren_Internet-5_08:4.4
	Spinner:4.4
	Internet_5_07:4.4
	rthornb_UrsulaBuild-15Jul1998:4.4
	rthornb_UrsulaBuild-07Jul1998:4.4
	rthornb_UrsulaBuild-17Jun1998:4.4
	rthornb_UrsulaBuild-03Jun1998:4.4
	rthornb_UrsulaBuild-27May1998:4.4
	rthornb_UrsulaBuild-21May1998:4.4
	Ursula_bp:4.4
	Ursula:4.4.0.2
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	celkins_Internet_506:4.4
	afrost_NC2_Generic:4.1.3.1.2.1
	afrost_Funai01-33:4.1.3.1.2.1
	Internet_505:4.3
	Spinner_RCA116:4.1.3.1.2.1
	Spinner_B20_2:4.1.3.1.2.1
	Spinner_19_3:4.1.3.1.2.1
	Spinner_B18:4.1.3.1.2.1
	Spinner_B17:4.1.3.1.2.1
	Spinner_B15:4.1.3.1.2.1
	Spinner_B14:4.1.3.1.2.1
	Spinner_B13:4.1.3.1.2.1
	Spinner_B12:4.1.3.1.2.1
	Spinner_B10:4.1.3.1.2.1
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Spin_merge:4.1.3.1.2.1
	Spinner_B7:4.1.3.1.2.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.6
date	99.07.13.11.12.45;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	99.06.30.13.15.34;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	98.04.22.22.00.25;	author celkins;	state Exp;
branches;
next	4.3;

4.3
date	98.03.24.17.02.29;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.05.12.22.58.41;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.22.27.37;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.05.22.27.37;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	;

4.1.3.1.2.1
date	97.04.11.10.06.39;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Added new FreeBSD sysctl handling using linker magic.
A few new sysctls added as a result.
SO_TIMESTAMP now gives real time, not Internet's internal time.
DHCP/BOOTP parsing picks up URL option and pops it into Inet$URL.
Requires TCPIPLibs 5.25 and link 5.12.

Version 5.31. Tagged as 'Internet-5_31'
@
text
@/*
 * Copyright (c) 1988 Stephen Deering.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Stephen Deering of Stanford University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * Internet Group Management Protocol (IGMP) routines.
 *
 * Written by Steve Deering, Stanford, May 1988.
 * Modified by Rosen Sharma, Stanford, Aug 1994.
 * Modified by Bill Fenner, Xerox PARC, Feb 1995.
 * Modified to fully comply to IGMPv2 by Bill Fenner, Oct 1995.
 *
 * MULTICAST Revision: 3.5.1.4
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/kernel.h>
#include <sys/sysctl.h>

#include <net/if.h>
#include <net/route.h>

#include <netinet/in.h>
#include <netinet/in_var.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/igmp.h>
#include <netinet/igmp_var.h>

#include "debug.h"
#include "module.h"

static struct router_info *find_rti(struct ifnet *ifp);

struct igmpstat igmpstat;
SYSCTL_STRUCT(_net_inet_igmp, IGMPCTL_STATS, stats, CTLFLAG_RD,
	&igmpstat, igmpstat, "");

static int igmp_forceleave = 0;
SYSCTL_INT(_net_inet_igmp, IGMPCTL_FORCELEAVE, forceleave, CTLFLAG_WR,
	&igmp_forceleave, 0, "Always send IGMP Leave Group messages");

static int igmp_timers_are_running;
static u_long igmp_all_hosts_group;
static u_long igmp_all_rtrs_group;
static struct mbuf *router_alert;
static struct router_info *Head;

static void igmp_sendpkt(struct in_multi *, int, unsigned long);

extern int rand(void);

void
igmp_init()
{
	struct ipoption *ra;

	/*
	 * To avoid byte-swapping the same value over and over again.
	 */
	igmp_all_hosts_group = htonl(INADDR_ALLHOSTS_GROUP);
	igmp_all_rtrs_group = htonl(INADDR_ALLRTRS_GROUP);

	igmp_timers_are_running = 0;

	/*
	 * Construct a Router Alert option to use in outgoing packets
	 */
	MGET(router_alert, M_DONTWAIT, MT_DATA);
	ra = mtod(router_alert, struct ipoption *);
	ra->ipopt_dst.s_addr = 0;
	ra->ipopt_list[0] = IPOPT_RA;	/* Router Alert Option */
	ra->ipopt_list[1] = 0x04;	/* 4 bytes long */
	ra->ipopt_list[2] = 0x00;
	ra->ipopt_list[3] = 0x00;
	router_alert->m_len = sizeof(ra->ipopt_dst) + ra->ipopt_list[1];

	Head = (struct router_info *) 0;
}

static struct router_info *
find_rti(ifp)
	struct ifnet *ifp;
{
        register struct router_info *rti = Head;

#ifdef IGMP_DEBUG
	printf("[igmp.c, _find_rti] --> entering \n");
#endif
        while (rti) {
                if (rti->rti_ifp == ifp) {
#ifdef IGMP_DEBUG
			printf("[igmp.c, _find_rti] --> found old entry \n");
#endif
                        return rti;
                }
                rti = rti->rti_next;
        }
	MALLOC(rti, struct router_info *, sizeof *rti, M_MRTABLE, M_NOWAIT);
        rti->rti_ifp = ifp;
        rti->rti_type = IGMP_V2_ROUTER;
        rti->rti_time = 0;
        rti->rti_next = Head;
        Head = rti;
#ifdef IGMP_DEBUG
	printf("[igmp.c, _find_rti] --> created an entry \n");
#endif
        return rti;
}

void
igmp_input(m, iphlen)
	register struct mbuf *m;
	register int iphlen;
{
	register struct igmp *igmp;
	register struct ip *ip;
	register int igmplen;
	register struct ifnet *ifp = m->m_pkthdr.rcvif;
	register int minlen;
	register struct in_multi *inm;
	register struct in_ifaddr *ia;
	struct in_multistep step;
	struct router_info *rti;

	int timer; /** timer value in the igmp query header **/

	++igmpstat.igps_rcv_total;

	ip = mtod(m, struct ip *);
	igmplen = ip->ip_len;

	/*
	 * Validate lengths
	 */
	if (igmplen < IGMP_MINLEN) {
		++igmpstat.igps_rcv_tooshort;
		m_freem(m);
		return;
	}
	minlen = iphlen + IGMP_MINLEN;
	if ((/*m->m_flags & M_EXT || */m->m_len < minlen) &&
	    (m = m_pullup(m, minlen)) == 0) {
		++igmpstat.igps_rcv_tooshort;
		return;
	}

	/*
	 * Validate checksum
	 */
	m->m_off += iphlen;
	m->m_len -= iphlen;
	igmp = mtod(m, struct igmp *);
	if (in_cksum(m, igmplen)) {
		++igmpstat.igps_rcv_badsum;
		m_freem(m);
		return;
	}
	m->m_off -= iphlen;
	m->m_len += iphlen;

	ip = mtod(m, struct ip *);
	rti = find_rti(ifp);

	/*
	 * In the IGMPv2 specification, there are 3 states and a flag.
	 *
	 * In Non-Member state, we simply don't have a membership record.
	 * In Delaying Member state, our timer is running (inm->inm_timer)
	 * In Idle Member state, our timer is not running (inm->inm_timer==0)
	 *
	 * The flag is inm->inm_state, it is set to IGMP_OTHERMEMBER if
	 * we have heard a report from another member, or IGMP_IREPORTEDLAST
	 * if I sent the last report.
	 */
	switch (igmp->igmp_type) {

	case IGMP_MEMBERSHIP_QUERY:
		++igmpstat.igps_rcv_queries;

		if (ifp->if_flags & IFF_LOOPBACK)
			break;

		if (igmp->igmp_code == 0) {
			/*
			 * Old router.  Remember that the querier on this
			 * interface is old, and set the timer to the
			 * value in RFC 1112.
			 */


			rti->rti_type = IGMP_V1_ROUTER;
			rti->rti_time = 0;

			timer = IGMP_MAX_HOST_REPORT_DELAY * PR_FASTHZ;

			if (ip->ip_dst.s_addr != igmp_all_hosts_group ||
			    igmp->igmp_group.s_addr != 0) {
				++igmpstat.igps_rcv_badqueries;
				m_freem(m);
				return;
			}
		} else {
			/*
			 * New router.  Simply do the new validity check.
			 */

			timer = igmp->igmp_code * PR_FASTHZ / IGMP_TIMER_SCALE;
			if (timer == 0)
				timer = 1;
			if (igmp->igmp_group.s_addr != 0 &&
			    !IN_MULTICAST(ntohl(igmp->igmp_group.s_addr))) {
				++igmpstat.igps_rcv_badqueries;
				m_freem(m);
				return;
			}
		}

		/*
		 * - Start the timers in all of our membership records
		 *   that the query applies to for the interface on
		 *   which the query arrived excl. those that belong
		 *   to the "all-hosts" group (224.0.0.1).
		 * - Restart any timer that is already running but has
		 *   a value longer than the requested timeout.
		 * - Use the value specified in the query message as
		 *   the maximum timeout.
		 */
		IN_FIRST_MULTI(step, inm);
		while (inm != NULL) {
			if (inm->inm_ifp == ifp &&
			    inm->inm_addr.s_addr != igmp_all_hosts_group &&
			    (igmp->igmp_group.s_addr == 0 ||
			     igmp->igmp_group.s_addr == inm->inm_addr.s_addr)) {
				if (inm->inm_timer == 0 ||
				    inm->inm_timer > timer) {
					inm->inm_timer =
						IGMP_RANDOM_DELAY(timer);
					igmp_timers_are_running = 1;
				}
			}
			IN_NEXT_MULTI(step, inm);
		}

		break;

	case IGMP_V1_MEMBERSHIP_REPORT:
	case IGMP_V2_MEMBERSHIP_REPORT:
		/*
		 * For fast leave to work, we have to know that we are the
		 * last person to send a report for this group.  Reports
		 * can potentially get looped back if we are a multicast
		 * router, so discard reports sourced by me.
		 */
		IFP_TO_IA(ifp, ia);
		if (ia && ip->ip_src.s_addr == IA_SIN(ia)->sin_addr.s_addr)
			break;

		++igmpstat.igps_rcv_reports;

		if (ifp->if_flags & IFF_LOOPBACK)
			break;

		if (!IN_MULTICAST(ntohl(igmp->igmp_group.s_addr))) {
			++igmpstat.igps_rcv_badreports;
			m_freem(m);
			return;
		}

		/*
		 * KLUDGE: if the IP source address of the report has an
		 * unspecified (i.e., zero) subnet number, as is allowed for
		 * a booting host, replace it with the correct subnet number
		 * so that a process-level multicast routing demon can
		 * determine which subnet it arrived from.  This is necessary
		 * to compensate for the lack of any way for a process to
		 * determine the arrival interface of an incoming packet.
		 */
		if ((ntohl(ip->ip_src.s_addr) & IN_CLASSA_NET) == 0)
			if (ia) ip->ip_src.s_addr = htonl(ia->ia_subnet);

		/*
		 * If we belong to the group being reported, stop
		 * our timer for that group.
		 */
		IN_LOOKUP_MULTI(igmp->igmp_group, ifp, inm);

		if (inm != NULL) {
			inm->inm_timer = 0;
			++igmpstat.igps_rcv_ourreports;

			inm->inm_state = IGMP_OTHERMEMBER;
		}

		break;
	}

	/*
	 * Pass all valid IGMP packets up to any process(es) listening
	 * on a raw IGMP socket.
	 */
	rip_input(m);
}

void
igmp_joingroup(inm)
	struct in_multi *inm;
{
	if (inm->inm_addr.s_addr == igmp_all_hosts_group
	    || inm->inm_ifp->if_flags & IFF_LOOPBACK) {
		inm->inm_timer = 0;
		inm->inm_state = IGMP_OTHERMEMBER;
	} else {
		inm->inm_rti = find_rti(inm->inm_ifp);
		igmp_sendpkt(inm, inm->inm_rti->rti_type, 0);
		inm->inm_timer = IGMP_RANDOM_DELAY(
					IGMP_MAX_HOST_REPORT_DELAY*PR_FASTHZ);
		inm->inm_state = IGMP_IREPORTEDLAST;
		igmp_timers_are_running = 1;
	}
}

void
igmp_leavegroup(inm)
	struct in_multi *inm;
{
	/* The second line of the following logic added 27/3/98 RCE
	 * with a view to a partial solution to SourceNet's issue of
	 * IGMP leaves not always being sent; this could be useful for
	 * other cases using multicast for video distribution.
	 */
	if (((inm->inm_state == IGMP_IREPORTEDLAST) ||
	     ((inm->inm_state == IGMP_OTHERMEMBER) && (igmp_forceleave != 0))) &&
	    (inm->inm_addr.s_addr != igmp_all_hosts_group) &&
	    !(inm->inm_ifp->if_flags & IFF_LOOPBACK) &&
	    (inm->inm_rti->rti_type != IGMP_V1_ROUTER))
		igmp_sendpkt(inm, IGMP_V2_LEAVE_GROUP, igmp_all_rtrs_group);
}

void
igmp_fasttimo()
{
	register struct in_multi *inm;
	struct in_multistep step;

	/*
	 * Quick check to see if any work needs to be done, in order
	 * to minimize the overhead of fasttimo processing.
	 */

	if (!igmp_timers_are_running)
		return;

	igmp_timers_are_running = 0;
	IN_FIRST_MULTI(step, inm);
	while (inm != NULL) {
		if (inm->inm_timer == 0) {
			/* do nothing */
		} else if (--inm->inm_timer == 0) {
			igmp_sendpkt(inm, inm->inm_rti->rti_type, 0);
			inm->inm_state = IGMP_IREPORTEDLAST;
		} else {
			igmp_timers_are_running = 1;
		}
		IN_NEXT_MULTI(step, inm);
	}
}

void
igmp_slowtimo()
{
	register struct router_info *rti =  Head;

#ifdef IGMP_DEBUG
	printf("[igmp.c,_slowtimo] -- > entering \n");
#endif
	while (rti) {
	    if (rti->rti_type == IGMP_V1_ROUTER) {
		rti->rti_time++;
		if (rti->rti_time >= IGMP_AGE_THRESHOLD) {
			rti->rti_type = IGMP_V2_ROUTER;
		}
	    }
	    rti = rti->rti_next;
	}
#ifdef IGMP_DEBUG
	printf("[igmp.c,_slowtimo] -- > exiting \n");
#endif
}

static struct route igmprt;

static void
igmp_sendpkt(inm, type, addr)
	struct in_multi *inm;
	int type;
	unsigned long addr;
{
        struct mbuf *m;
        struct igmp *igmp;
        struct ip *ip;
        struct ip_moptions imo;

        MGETHDR(m, M_DONTWAIT, MT_HEADER);
        if (m == NULL)
                return;

	m->m_pkthdr.rcvif = loif;
	m->m_pkthdr.len = sizeof(struct ip) + IGMP_MINLEN;
	MH_ALIGN(m, IGMP_MINLEN + sizeof(struct ip));
	m->m_off += sizeof(struct ip);
        m->m_len = IGMP_MINLEN;
        igmp = mtod(m, struct igmp *);
        igmp->igmp_type   = type;
        igmp->igmp_code   = 0;
        igmp->igmp_group  = inm->inm_addr;
        igmp->igmp_cksum  = 0;
        igmp->igmp_cksum  = in_cksum(m, IGMP_MINLEN);

        m->m_off -= sizeof(struct ip);
        m->m_len += sizeof(struct ip);
        ip = mtod(m, struct ip *);
        ip->ip_tos        = IPTOS_RELIABILITY;
        ip->ip_len        = sizeof(struct ip) + IGMP_MINLEN;
        ip->ip_off        = 0;
        ip->ip_p          = IPPROTO_IGMP;
        ip->ip_src.s_addr = INADDR_ANY;
        ip->ip_dst.s_addr = addr ? addr : igmp->igmp_group.s_addr;

        imo.imo_multicast_ifp  = inm->inm_ifp;
        imo.imo_multicast_ttl  = 1;
	imo.imo_multicast_vif  = -1;
        /*
         * Request loopback of the report if we are acting as a multicast
         * router, so that the process-level routing demon can hear it.
         */
        imo.imo_multicast_loop = (ip_mrouter != NULL);

	/*
	 * XXX
	 * Do we have to worry about reentrancy here?  Don't think so.
	 */
        ip_output(m, router_alert, &igmprt, 0, &imo);

        ++igmpstat.igps_snd_reports;
}
@


4.5
log
@* Fixed bug introduced by tentative ARP probe - a typo made arp_ifinit() fail to
  set up the interface route structure properly.
* Divide-by-zero when an IGMP membership query with a time of 1 received fixed
  (from FreeBSD).
* IGMP messages now sent with TOS set to "maximum reliability".
* tcp_output.c updated from FreeBSD - in particular path_mtu_discovery sysctl
  now available.
* A few other FreeBSD structural changes and bug fixes integrated.
* Put UDP checksum in BOOTP packets.
* Null pointer dereferencing fixed in whoami.c. Address setting now done with
  SIOCDIFADDR and SIOCAIFADDR. Don't set the netmask if asked not to.
* Output BOOTP packets with the source address in ciaddr
Note that various structural changes mean that the support tools (in particular
InetStat) will need to be recompiled.
Requires TCPIPLibs 5.20

Version 5.27. Tagged as 'Internet-5_27'
@
text
@d76 6
a81 1
int igmp_forceleave = 0;
a485 19
}

int
igmp_sysctl(int *name, u_int namelen, void *oldp, size_t *oldlenp,
	    void *newp, size_t newlen)
{
	/* All sysctl names at this level are terminal. */
	if (namelen != 1)
		return ENOTDIR;	/* XXX overloaded */

	switch(name[0]) {
	case IGMPCTL_STATS:
		return sysctl_rdstruct(oldp, oldlenp, newp, &igmpstat,
				       sizeof igmpstat);
	case IGMPCTL_FORCELEAVE:
		return (sysctl_int(oldp, oldlenp, newp, newlen, &igmp_forceleave));
	default:
		return ENOPROTOOPT;
	}
@


4.4
log
@Internet module (RISC OS version 5.06)

C.Elkins - added a sysctl interface to control IGMPv2 'fast leave'
	optimisation, so that Internet can be forced to always send
	the leave message (default - implement fast leave as per rfc 2236)
	Note:
	should be used in conjunction with corresponding headers and binaries
	(sysctl and inetstat).
@
text
@a197 1
	timer = igmp->igmp_code * PR_FASTHZ / IGMP_TIMER_SCALE;
d213 1
a213 1
	case IGMP_HOST_MEMBERSHIP_QUERY:
d243 3
d458 1
a458 1
        ip->ip_tos        = 0;
@


4.3
log
@Internet 5.05. IGMPv2 (RFC2236) implemented from FreeBSD source.
SB_MAX increased to 256K. Nasty memory leak when sending large
UDP packets fixed.
@
text
@d76 1
d360 8
a367 2
	if (inm->inm_state == IGMP_IREPORTEDLAST &&
	    inm->inm_addr.s_addr != igmp_all_hosts_group &&
d369 1
a369 1
	    inm->inm_rti->rti_type != IGMP_V1_ROUTER)
d493 2
@


4.2
log
@Version Spinner_B7 taken
@
text
@d45 1
d47 1
a47 1
 * MULTICAST Revision: 3.3.1.2
d52 1
d56 1
a56 4
#include <sys/proc.h>		/* XXX needed for sysctl.h */
#ifndef __riscos
#include <vm/vm.h>		/* XXX needed for sysctl.h */
#endif
d73 2
d79 2
a80 5
#if 1
static struct in_addr igmp_all_routers_group;
#endif
static u_long igmp_local_group;
static u_long igmp_local_group_mask;
d83 1
a83 2
static void igmp_sendpkt(struct in_multi *, int);
static void igmp_sendleave(struct in_multi *);
d90 2
d96 1
a96 5
#if 1
	igmp_all_routers_group.s_addr = htonl(INADDR_ALLRTRS_GROUP);
#endif
	igmp_local_group = htonl(0xe0000000);		/* 224.0.0.0 */
	igmp_local_group_mask = htonl(0xffffff00);	/* ........^ */
d100 12
d115 1
a115 36
int
fill_rti(inm)
	struct in_multi *inm;
{
	register struct router_info *rti = Head;

#ifdef IGMP_DEBUG
	printf("[igmp.c, _fill_rti] --> entering \n");
#endif
	while (rti) {
		if (rti->ifp == inm->inm_ifp) {
			inm->inm_rti  = rti;
#ifdef IGMP_DEBUG
			printf("[igmp.c, _fill_rti] --> found old entry \n");
#endif
			if (rti->type == IGMP_OLD_ROUTER)
				return IGMP_HOST_MEMBERSHIP_REPORT;
			else
				return IGMP_HOST_NEW_MEMBERSHIP_REPORT;
		}
		rti = rti->next;
	}
	MALLOC(rti, struct router_info *, sizeof *rti, M_MRTABLE, M_NOWAIT);
	rti->ifp = inm->inm_ifp;
	rti->type = IGMP_NEW_ROUTER;
	rti->time = IGMP_AGE_THRESHOLD;
	rti->next = Head;
	Head = rti;
	inm->inm_rti = rti;
#ifdef IGMP_DEBUG
	printf("[igmp.c, _fill_rti] --> created new entry \n");
#endif
	return IGMP_HOST_NEW_MEMBERSHIP_REPORT;
}

struct router_info *
d125 1
a125 1
                if (rti->ifp == ifp) {
d131 1
a131 1
                rti = rti->next;
d134 4
a137 4
        rti->ifp = ifp;
        rti->type = IGMP_NEW_ROUTER;
        rti->time = IGMP_AGE_THRESHOLD;
        rti->next = Head;
d200 11
d220 5
a225 1
			rti->type = IGMP_OLD_ROUTER; rti->time = 0;
d227 4
a230 3
			/*
			** Do exactly as RFC 1112 says
			*/
d232 2
a233 1
			if (ip->ip_dst.s_addr != igmp_all_hosts_group) {
d238 1
a238 1

d240 1
a240 4
			 * Start the timers in all of our membership records for
			 * the interface on which the query arrived, except those
			 * that are  already running and those that belong to a
			 * "local" group (224.0.0.X).
a241 11
			IN_FIRST_MULTI(step, inm);
			while (inm != NULL) {
				if (inm->inm_ifp == ifp
				    && inm->inm_timer == 0
				    && ((inm->inm_addr.s_addr
					 & igmp_local_group_mask)
					!= igmp_local_group)) {

					inm->inm_state = IGMP_DELAYING_MEMBER;
					inm->inm_timer = IGMP_RANDOM_DELAY(
				IGMP_MAX_HOST_REPORT_DELAY * PR_FASTHZ );
d243 5
a247 3
					igmp_timers_are_running = 1;
				}
				IN_NEXT_MULTI(step, inm);
d249 1
a249 4
		} else {
		    /*
		    ** New Router
		    */
d251 12
a262 18
		    if (!(m->m_flags & M_MCAST)) {
			++igmpstat.igps_rcv_badqueries;
			m_freem(m);
			return;
		    }

		    /*
		     * - Start the timers in all of our membership records
		     *   that the query applies to for the interface on
		     *   which the query arrived excl. those that belong
		     *   to a "local" group (224.0.0.X)
		     * - For timers already running check if they need to
		     *   be reset.
		     * - Use the igmp->igmp_code field as the maximum
		     *   delay possible
		     */
		    IN_FIRST_MULTI(step, inm);
		    while (inm != NULL) {
d264 8
a271 17
			    (inm->inm_addr.s_addr & igmp_local_group_mask) !=
				igmp_local_group &&
			    (ip->ip_dst.s_addr == igmp_all_hosts_group ||
			     ip->ip_dst.s_addr == inm->inm_addr.s_addr)) {
			    switch(inm->inm_state) {
			      case IGMP_IDLE_MEMBER:
			      case IGMP_LAZY_MEMBER:
			      case IGMP_AWAKENING_MEMBER:
				    inm->inm_timer = IGMP_RANDOM_DELAY(timer);
				    igmp_timers_are_running = 1;
				    inm->inm_state = IGMP_DELAYING_MEMBER;
				    break;
			      case IGMP_DELAYING_MEMBER:
				if (inm->inm_timer > timer) {
				    inm->inm_timer = IGMP_RANDOM_DELAY(timer);
				    igmp_timers_are_running = 1;
				    inm->inm_state = IGMP_DELAYING_MEMBER;
a272 5
				break;
			      case IGMP_SLEEPING_MEMBER:
				inm->inm_state = IGMP_AWAKENING_MEMBER;
				break;
			    }
a275 1
	    }
d279 2
a280 1
	case IGMP_HOST_MEMBERSHIP_REPORT:
d282 4
a285 1
		 * an old report
d287 4
d296 1
a296 2
		if (!IN_MULTICAST(ntohl(igmp->igmp_group.s_addr)) ||
		    igmp->igmp_group.s_addr != ip->ip_dst.s_addr) {
d311 1
a311 2
		if ((ntohl(ip->ip_src.s_addr) & IN_CLASSA_NET) == 0) {
			IFP_TO_IA(ifp, ia);
a312 1
		}
d321 2
a322 2
		  inm->inm_timer = 0;
		  ++igmpstat.igps_rcv_ourreports;
d324 1
a324 14
		  switch(inm->inm_state){
		  case IGMP_IDLE_MEMBER:
		  case IGMP_LAZY_MEMBER:
		  case IGMP_AWAKENING_MEMBER:
		  case IGMP_SLEEPING_MEMBER:
		    inm->inm_state = IGMP_SLEEPING_MEMBER;
		    break;
		  case IGMP_DELAYING_MEMBER:
		    if (inm->inm_rti->type == IGMP_OLD_ROUTER)
			inm->inm_state = IGMP_LAZY_MEMBER;
		    else
			inm->inm_state = IGMP_SLEEPING_MEMBER;
		    break;
		  }
a327 66

	      case IGMP_HOST_NEW_MEMBERSHIP_REPORT:
		/*
		 * a new report
		 */

		/*
		 * We can get confused and think there's someone
		 * else out there if we are a multicast router.
		 * For fast leave to work, we have to know that
		 * we are the only member.
		 */
		IFP_TO_IA(ifp, ia);
		if (ia && ip->ip_src.s_addr == IA_SIN(ia)->sin_addr.s_addr)
			break;

		++igmpstat.igps_rcv_reports;

		if (ifp->if_flags & IFF_LOOPBACK)
		  break;

		if (!IN_MULTICAST(ntohl(igmp->igmp_group.s_addr)) ||
		    igmp->igmp_group.s_addr != ip->ip_dst.s_addr) {
		  ++igmpstat.igps_rcv_badreports;
		  m_freem(m);
		  return;
		}

		/*
		 * KLUDGE: if the IP source address of the report has an
		 * unspecified (i.e., zero) subnet number, as is allowed for
		 * a booting host, replace it with the correct subnet number
		 * so that a process-level multicast routing demon can
		 * determine which subnet it arrived from.  This is necessary
		 * to compensate for the lack of any way for a process to
		 * determine the arrival interface of an incoming packet.
		 */
		if ((ntohl(ip->ip_src.s_addr) & IN_CLASSA_NET) == 0) {
/* #ifndef MROUTING XXX - I don't think the ifdef is necessary */
		  IFP_TO_IA(ifp, ia);
/* #endif */
		  if (ia) ip->ip_src.s_addr = htonl(ia->ia_subnet);
		}

		/*
		 * If we belong to the group being reported, stop
		 * our timer for that group.
		 */
		IN_LOOKUP_MULTI(igmp->igmp_group, ifp, inm);
		if (inm != NULL) {
		  inm->inm_timer = 0;
		  ++igmpstat.igps_rcv_ourreports;

		  switch(inm->inm_state){
		  case IGMP_DELAYING_MEMBER:
		  case IGMP_IDLE_MEMBER:
		    inm->inm_state = IGMP_LAZY_MEMBER;
		    break;
		  case IGMP_AWAKENING_MEMBER:
		    inm->inm_state = IGMP_LAZY_MEMBER;
		    break;
		  case IGMP_LAZY_MEMBER:
		  case IGMP_SLEEPING_MEMBER:
		    break;
		  }
		}
d341 2
a342 9
#ifdef DEBUG
	if (DODEBUG(DBGIGMP))
		Printf("igmp_joingroup(%x)\n", inm);
#endif

	inm->inm_state = IGMP_IDLE_MEMBER;

	if ((inm->inm_addr.s_addr & igmp_local_group_mask) == igmp_local_group
	    || inm->inm_ifp->if_flags & IFF_LOOPBACK)
d344 4
a347 2
	else {
		igmp_sendpkt(inm,fill_rti(inm));
d350 1
a350 1
		inm->inm_state = IGMP_DELAYING_MEMBER;
d359 5
a363 14
         switch(inm->inm_state) {
	 case IGMP_DELAYING_MEMBER:
	 case IGMP_IDLE_MEMBER:
	   if (((inm->inm_addr.s_addr & igmp_local_group_mask)
		!= igmp_local_group)
	       && !(inm->inm_ifp->if_flags & IFF_LOOPBACK))
	       if (inm->inm_rti->type != IGMP_OLD_ROUTER)
		   igmp_sendleave(inm);
	   break;
	 case IGMP_LAZY_MEMBER:
	 case IGMP_AWAKENING_MEMBER:
	 case IGMP_SLEEPING_MEMBER:
	   break;
	 }
d386 2
a387 7
		  if (inm->inm_state == IGMP_DELAYING_MEMBER) {
		    if (inm->inm_rti->type == IGMP_OLD_ROUTER)
			igmp_sendpkt(inm, IGMP_HOST_MEMBERSHIP_REPORT);
		    else
			igmp_sendpkt(inm, IGMP_HOST_NEW_MEMBERSHIP_REPORT);
		    inm->inm_state = IGMP_IDLE_MEMBER;
		  }
d404 4
a407 4
		rti->time ++;
		if (rti->time >= IGMP_AGE_THRESHOLD){
			rti->type = IGMP_NEW_ROUTER;
			rti->time = IGMP_AGE_THRESHOLD;
d409 2
a410 1
		rti = rti->next;
d420 1
a420 1
igmp_sendpkt(inm, type)
d423 1
d428 1
a428 1
        struct ip_moptions *imo;
a433 6
	MALLOC(imo, struct ip_moptions *, sizeof *imo, M_IPMOPTS, M_DONTWAIT);
	if (!imo) {
		m_free(m);
		return;
	}

d454 1
a454 7
#if 0
        ip->ip_dst        = igmp->igmp_group;
#else
	/* KJB fix */
	ip->ip_dst	  = (type != IGMP_HOST_LEAVE_MESSAGE) ? igmp->igmp_group :
							        igmp_all_routers_group;
#endif
d456 3
a458 3
        imo->imo_multicast_ifp  = inm->inm_ifp;
        imo->imo_multicast_ttl  = 1;
	imo->imo_multicast_vif  = -1;
d463 1
a463 1
        imo->imo_multicast_loop = (ip_mrouter != NULL);
d465 5
a469 1
        ip_output(m, (struct mbuf *)0, &igmprt, 0, imo);
a470 1
	FREE(imo, M_IPMOPTS);
a471 7
}

static void
igmp_sendleave(inm)
	struct in_multi *inm;
{
	igmp_sendpkt(inm, IGMP_HOST_LEAVE_MESSAGE);
@


4.1
log
@Initial revision
@
text
@a36 2
 *	@@(#)igmp.c	8.1 (Berkeley) 7/19/93
 * $Id: igmp.c,v 1.11.4.1 1995/09/06 10:31:29 davidg Exp $
d87 2
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.1.2.1
log
@Internet 5.04 merged from Internet 5.03 on Networking source tree with
Internet 4.08 BOOTP extensions from Spinner.
@
text
@d37 2
a88 2

extern int rand(void);
@
