head	4.5;
access;
symbols
	Internet-5_65:4.5
	Internet-5_64:4.5
	Internet-5_63:4.5
	Internet-5_62:4.5
	Internet-5_61:4.5
	Internet-5_60:4.5
	Internet-5_59:4.5
	Internet-5_58:4.5
	Internet-5_57:4.5
	Internet-5_56:4.4
	Internet-5_55:4.4
	Internet-5_54:4.4
	Internet-5_53:4.4
	Internet-5_52:4.4
	Internet-5_51:4.4
	Internet-5_50:4.4
	RO_5_07:4.4
	Internet-5_49:4.4
	Internet-5_48:4.4
	Internet-5_47:4.4
	Internet-5_46:4.4
	Internet-5_45:4.4
	Internet-5_44:4.4
	Internet-5_43:4.4
	Internet-5_42:4.4
	Internet-5_41:4.4
	Internet-5_40:4.4
	Internet-5_39:4.4
	Internet-5_38:4.4
	Internet-5_37:4.4
	Internet-5_36:4.4
	Internet-5_35:4.4
	Internet-5_34:4.4
	Internet-5_33:4.4
	Internet-5_32:4.4
	Internet-5_31:4.4
	Internet-5_30:4.3
	Internet-5_29:4.3
	Internet-5_27:4.3
	Internet-5_26:4.3
	Internet-5_25:4.3
	Internet-5_24:4.3
	Internet-5_23:4.3
	Internet-5_22:4.3
	Internet-5_21:4.3
	Internet-5_20:4.3
	Internet-5_19:4.3
	Internet-5_18:4.3
	Internet-5_17:4.3
	Internet-5_16:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	Ursula_RiscPC:4.3.0.4
	Internet-5_15:4.3
	Internet-5_14:4.3
	Internet-5_13:4.3
	sforrest_daytona_appflash-0_31:4.3
	Internet-5_12:4.3
	Internet-5_11:4.3
	celkins_Internet-5_10:4.3
	nicke_Internat_25-9-98:4.3
	Internet-5_09:4.3
	blaughto_daytona_appflash-0_30:4.3
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rwarren_Internet-5_08:4.3
	Spinner:4.3
	Internet_5_07:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.2
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	celkins_Internet_506:4.3
	afrost_NC2_Generic:4.1.4.1
	afrost_Funai01-33:4.1.4.1
	Internet_505:4.3
	Spin_old:4.1.7
	Spinner_RCA116:4.1.4.1
	Spinner_B20_2:4.1.4.1
	Spinner_19_3:4.1.4.1
	Spinner_B18:4.1.4.1
	Spinner_B17:4.1.4.1
	Spinner_B15:4.1.4.1
	Spinner_B14:4.1.4.1
	Spinner_B13:4.1.4.1
	Spinner_B12:4.1.4.1
	Spinner_B10:4.1.4.1
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Spin_merge_12May97:4.1.7.2
	Spinner_B7:4.1.4.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.2
	nturton_inet_4_9:4.1.7.3
	nturton_inet_4_8:4.1.7.2
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	ARTtmp:4.1.7.2.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.4.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2012.08.26.19.53.23;	author jlee;	state Exp;
branches;
next	4.4;
commitid	WbuxJGoZAqKXR5iw;

4.4
date	99.07.13.11.12.49;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	98.03.27.12.36.36;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.05.12.22.58.45;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.28.07;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.28.07;	author nturton;	state Exp;
branches;
next	4.1.1.2;

4.1.1.2
date	96.11.05.16.20.03;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.22.27.49;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.04.11.10.06.43;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.22.14.56.18;	author nturton;	state Exp;
branches;
next	4.1.5.2;

4.1.5.2
date	96.11.25.15.06.39;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.59.32;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	96.12.02.20.38.24;	author nturton;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.04.09.15.27.19;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Fix routes not being cleaned up properly when an interface changes its address
Detail:
  This is the Internet-side part of the fix, incorporating the following changes from FreeBSD:
  net/c/route - http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/net/route.c.diff?r1=1.59.2.1;r2=1.59.2.2;f=h
  netinet/c/in - http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/netinet/in.c.diff?r1=1.44.2.2;r2=1.44.2.3;f=h
  netinet/c/in_rmx - http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/netinet/in_rmx.c.diff?r1=1.37;r2=1.37.2.1;f=h
  netinet/c/raw_ip - http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/netinet/raw_ip.c.diff?r1=1.64.2.4;r2=1.64.2.5;f=h
  net/c/if - http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/net/if.c.diff?r1=1.43;r2=1.44;f=h
  This provides us with the fix for this bug:
  http://www.freebsd.org/cgi/query-pr.cgi?pr=20785
  Other required changes:
  netiniet/c/in_proto - Hooked up rip_ctlinput to appropriate handlers
  Also fixed build/Makefile to count the module as a dependency for rom_link phase
Admin:
  Tested on Raspberry Pi
  Requires TCPIPLibs-5_56
  Fixes issue reported on forums with ShareFS not always working:
  http://www.riscosopen.org/forum/forums/5/topics/1193


Version 5.57. Tagged as 'Internet-5_57'
@
text
@/*
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/domain.h>
#include <sys/protosw.h>
#include <sys/queue.h>
#include <sys/sysctl.h>

#include <net/if.h>
#include <net/radix.h>
#include <net/route.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/ip_icmp.h>
#include <netinet/in_pcb.h>
#include <netinet/igmp_var.h>
#include <netinet/tcp.h>
#include <netinet/tcp_fsm.h>
#include <netinet/tcp_seq.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>
#include <netinet/tcpip.h>
#ifdef TCPDEBUG
#include <netinet/tcp_debug.h>
#endif
#include <netinet/udp.h>
#include <netinet/udp_var.h>
/*
 * TCP/IP protocol family: IP, ICMP, UDP, TCP.
 */

#ifdef NSIP
void	idpip_input(), nsip_ctlinput();
#endif

#ifdef TPIP
void	tpip_input(), tpip_ctlinput(), tp_ctloutput();
int	tp_init(), tp_slowtimo(), tp_drain(), tp_usrreq();
#endif

#ifdef EON
void	eoninput(), eonctlinput(), eonprotoinit();
#endif /* EON */

void rsvp_input(struct mbuf *, int);
void ipip_input(struct mbuf *, int);

extern	struct domain inetdomain;

struct protosw inetsw[] = {
{ 0,		&inetdomain,	0,		0,
  0,		ip_output,	0,		0,
  0,
  ip_init,	0,		ip_slowtimo,	ip_drain,
},
{ SOCK_DGRAM,	&inetdomain,	IPPROTO_UDP,	PR_ATOMIC|PR_ADDR,
  udp_input,	0,		udp_ctlinput,	ip_ctloutput,
  udp_usrreq,
  udp_init,	0,		0,		0,
},
{ SOCK_STREAM,	&inetdomain,	IPPROTO_TCP,
	PR_CONNREQUIRED|PR_IMPLOPCL|PR_WANTRCVD,
  tcp_input,	0,		tcp_ctlinput,	tcp_ctloutput,
  tcp_usrreq,
  tcp_init,	tcp_fasttimo,	tcp_slowtimo,	tcp_drain
},
{ SOCK_RAW,	&inetdomain,	IPPROTO_RAW,	PR_ATOMIC|PR_ADDR,
  rip_input,	rip_output,	rip_ctlinput,	rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
{ SOCK_RAW,	&inetdomain,	IPPROTO_ICMP,	PR_ATOMIC|PR_ADDR,
  icmp_input,	rip_output,	rip_ctlinput,	rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
#ifdef MULTICAST
{ SOCK_RAW,	&inetdomain,	IPPROTO_IGMP,	PR_ATOMIC|PR_ADDR,
  igmp_input,	rip_output,	rip_ctlinput,	rip_ctloutput,
  rip_usrreq,
  igmp_init,	igmp_fasttimo,	igmp_slowtimo,	0,
},
#endif
#ifdef MROUTING
{ SOCK_RAW,	&inetdomain,	IPPROTO_RSVP,	PR_ATOMIC|PR_ADDR,
  rsvp_input,	rip_output,	rip_ctlinput,	rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
{ SOCK_RAW,	&inetdomain,	IPPROTO_IPIP,	PR_ATOMIC|PR_ADDR,
  ipip_input,	rip_output, 	rip_ctlinput,	rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
#endif
#ifdef TPIP
{ SOCK_SEQPACKET,&inetdomain,	IPPROTO_TP,	PR_CONNREQUIRED|PR_WANTRCVD,
  tpip_input,	0,		tpip_ctlinput,	tp_ctloutput,
  tp_usrreq,
  tp_init,	0,		tp_slowtimo,	tp_drain,
},
#endif
/* EON (ISO CLNL over IP) */
#ifdef EON
{ SOCK_RAW,	&inetdomain,	IPPROTO_EON,	0,
  eoninput,	0,		eonctlinput,		0,
  0,
  eonprotoinit,	0,		0,		0,
},
#endif
#ifdef NSIP
{ SOCK_RAW,	&inetdomain,	IPPROTO_IDP,	PR_ATOMIC|PR_ADDR,
  idpip_input,	rip_output,	nsip_ctlinput,	0,
  rip_usrreq,
  0,		0,		0,		0,
},
#endif
	/* raw wildcard */
{ SOCK_RAW,	&inetdomain,	0,		PR_ATOMIC|PR_ADDR,
  rip_input,	rip_output,	rip_ctlinput,	rip_ctloutput,
  rip_usrreq,
  rip_init,	0,		0,		0,
},
};

extern int in_inithead(void **, int);

struct domain inetdomain =
    { AF_INET, "internet", 0, 0, 0,
      inetsw, &inetsw[sizeof(inetsw)/sizeof(inetsw[0])], 0,
      in_inithead, 32, sizeof(struct sockaddr_in)
    };

#ifndef __riscos
DOMAIN_SET(inet);
#endif

SYSCTL_NODE(_net,      PF_INET,		inet,	CTLFLAG_RW, 0,
	"Internet Family");

SYSCTL_NODE(_net_inet, IPPROTO_IP,	ip,	CTLFLAG_RW, 0,	"IP");
SYSCTL_NODE(_net_inet, IPPROTO_ICMP,	icmp,	CTLFLAG_RW, 0,	"ICMP");
SYSCTL_NODE(_net_inet, IPPROTO_UDP,	udp,	CTLFLAG_RW, 0,	"UDP");
SYSCTL_NODE(_net_inet, IPPROTO_TCP,	tcp,	CTLFLAG_RW, 0,	"TCP");
SYSCTL_NODE(_net_inet, IPPROTO_IGMP,	igmp,	CTLFLAG_RW, 0,	"IGMP");
SYSCTL_NODE(_net_inet, IPPROTO_RAW,	raw,	CTLFLAG_RW, 0,	"RAW");
#ifdef IPDIVERT
SYSCTL_NODE(_net_inet, IPPROTO_DIVERT,	div,	CTLFLAG_RW, 0,	"DIVERT");
#endif

#include "imp.h"
#if NIMP > 0
extern	struct domain impdomain;
int	rimp_output(), hostslowtimo();

struct protosw impsw[] = {
{ SOCK_RAW,	&impdomain,	0,		PR_ATOMIC|PR_ADDR,
  0,		rimp_output,	0,		0,
  rip_usrreq,
  0,		0,		hostslowtimo,	0,
},
};

struct domain impdomain =
    { AF_IMPLINK, "imp", 0, 0, 0,
      impsw, &impsw[sizeof (impsw)/sizeof(impsw[0])] };

#ifndef __riscos
DOMAIN_SET(imp);
#endif

#endif

#if 0
#include "hy.h"
#if NHY > 0
/*
 * HYPERchannel protocol family: raw interface.
 */
int	rhy_output();
extern	struct domain hydomain;

struct protosw hysw[] = {
{ SOCK_RAW,	&hydomain,	0,		PR_ATOMIC|PR_ADDR,
  0,		rhy_output,	0,		0,
  rip_usrreq,
  0,		0,		0,		0,
},
};

struct domain hydomain =
    { AF_HYLINK, "hy", 0, 0, 0, hysw, &hysw[sizeof (hysw)/sizeof(hysw[0])] };

DOMAIN_SET(hy);
#endif
#endif
@


4.4
log
@Added new FreeBSD sysctl handling using linker magic.
A few new sysctls added as a result.
SO_TIMESTAMP now gives real time, not Internet's internal time.
DHCP/BOOTP parsing picks up URL option and pops it into Inet$URL.
Requires TCPIPLibs 5.25 and link 5.12.

Version 5.31. Tagged as 'Internet-5_31'
@
text
@d105 1
a105 1
  rip_input,	rip_output,	0,		rip_ctloutput,
d110 1
a110 1
  icmp_input,	rip_output,	0,		rip_ctloutput,
d116 1
a116 1
  igmp_input,	rip_output,	0,		rip_ctloutput,
d123 1
a123 1
  rsvp_input,	rip_output,	0,		rip_ctloutput,
d128 1
a128 1
  ipip_input,	rip_output, 	0,		rip_ctloutput,
d157 1
a157 1
  rip_input,	rip_output,	0,		rip_ctloutput,
@


4.3
log
@Missed some changes in the last checkin
@
text
@d38 1
a39 2
#include <sys/domain.h>
#include <sys/mbuf.h>
d41 1
d91 1
a91 1
  ip_init,	0,		ip_slowtimo,	ip_drain,	ip_sysctl
d96 1
a96 1
  udp_init,	0,		0,		0,		udp_sysctl
d102 1
a102 1
  tcp_init,	tcp_fasttimo,	tcp_slowtimo,	tcp_drain,	tcp_sysctl
d112 1
a112 1
  0,		0,		0,		0,		icmp_sysctl
d118 1
a118 1
  igmp_init,	igmp_fasttimo,	igmp_slowtimo,	0,		igmp_sysctl
d173 13
@


4.2
log
@Version Spinner_B7 taken
@
text
@d88 1
a88 1
{ 0,		0,		0,		0,
d93 1
a93 1
{ SOCK_DGRAM,	0,		IPPROTO_UDP,	PR_ATOMIC|PR_ADDR,
d98 1
a98 1
{ SOCK_STREAM,	0,		IPPROTO_TCP,
d104 1
a104 1
{ SOCK_RAW,	0,		IPPROTO_RAW,	PR_ATOMIC|PR_ADDR,
d109 1
a109 1
{ SOCK_RAW,	0,		IPPROTO_ICMP,	PR_ATOMIC|PR_ADDR,
d115 1
a115 1
{ SOCK_RAW,	0,		IPPROTO_IGMP,	PR_ATOMIC|PR_ADDR,
d122 1
a122 1
{ SOCK_RAW,	0,		IPPROTO_RSVP,	PR_ATOMIC|PR_ADDR,
d127 1
a127 1
{ SOCK_RAW,	0,		IPPROTO_IPIP,	PR_ATOMIC|PR_ADDR,
d134 1
a134 1
{ SOCK_SEQPACKET,0,		IPPROTO_TP,	PR_CONNREQUIRED|PR_WANTRCVD,
d142 1
a142 1
{ SOCK_RAW,	0,		IPPROTO_EON,	0,
d149 1
a149 1
{ SOCK_RAW,	0,		IPPROTO_IDP,	PR_ATOMIC|PR_ADDR,
d156 1
a156 1
{ SOCK_RAW,	0,		0,		PR_ATOMIC|PR_ADDR,
d167 1
a167 1
      0, 0, 0,
d181 1
a181 1
{ SOCK_RAW,	0,		0,		PR_ATOMIC|PR_ADDR,
d190 1
a190 1
      0, 0 };
a219 24
#endif

#ifdef __riscos
/*
 * RISC OS modules cannot have data pointers in static init data :-(
 */
void
in_proto_init()
{
	int i;

	for (i=0; i < sizeof(inetsw)/sizeof(inetsw[0]); i++)
		inetsw[i].pr_domain = &inetdomain;

	inetdomain.dom_protosw = inetsw;
	inetdomain.dom_protoswNPROTOSW = &inetsw[sizeof(inetsw)/sizeof(inetsw[0])];

#if NIMP > 0
	impsw[0].pr_domain = &impdomain;

	impdomain.dom_protosw = impsw;
	impdomain.dom_protoswNPROTOSW = &impsw[1];
#endif
}
@


4.1
log
@Initial revision
@
text
@d1 3
a3 1
/* -*-C-*-
d5 15
a19 2
 * $Header: /ax/networking:Internet/netinet/in_proto.c:networking  1.1  $
 * $Source: /ax/networking:Internet/netinet/in_proto.c: $
d21 11
a31 1
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
a32 4
 * $Log:	in_proto.c,v $
 * Revision 1.1  94/12/02  11:15:01  kwelton
 * Initial revision
 * 
d34 31
d66 1
a66 15
 * Copyright (c) 1983, 1986 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
a67 5
#include "sys/param.h"
#include "sys/socket.h"
#include "sys/protosw.h"
#include "sys/domain.h"
#include "sys/mbuf.h"
d69 12
a80 2
#include "netinet/in.h"
#include "netinet/in_systm.h"
d82 2
a83 14
/*
 * TCP/IP protocol family: IP, ICMP, UDP, TCP.
 */
int	ip_output(),ip_ctloutput();
int	ip_init(),ip_slowtimo(),ip_drain();
int	icmp_input();
int	udp_input(),udp_ctlinput();
int	udp_usrreq();
int	udp_init();
int	tcp_input(),tcp_ctlinput();
int	tcp_usrreq(),tcp_ctloutput();
int	tcp_init(),tcp_fasttimo(),tcp_slowtimo(),tcp_drain();
int	raw_init(), rip_input(),rip_output(),rip_ctloutput();
extern	int raw_usrreq();
a84 1
#ifdef __unix
d88 1
a88 1
{ 0,		&inetdomain,	0,		0,
d91 1
a91 1
  ip_init,	0,		ip_slowtimo,	ip_drain,
d93 1
a93 1
{ SOCK_DGRAM,	&inetdomain,	IPPROTO_UDP,	PR_ATOMIC|PR_ADDR,
d96 1
a96 1
  udp_init,	0,		0,		0,
d98 2
a99 1
{ SOCK_STREAM,	&inetdomain,	IPPROTO_TCP,	PR_CONNREQUIRED|PR_WANTRCVD,
d102 1
a102 1
  tcp_init,	tcp_fasttimo,	tcp_slowtimo,	tcp_drain,
d104 1
a104 1
{ SOCK_RAW,	&inetdomain,	IPPROTO_RAW,	PR_ATOMIC|PR_ADDR,
d106 1
a106 1
  raw_usrreq,
d109 1
a109 1
{ SOCK_RAW,	&inetdomain,	IPPROTO_ICMP,	PR_ATOMIC|PR_ADDR,
d111 2
a112 2
  raw_usrreq,
  raw_init,	       0,	       0,	       0,
d114 41
d156 1
a156 1
{ SOCK_RAW,	&inetdomain,	0,		PR_ATOMIC|PR_ADDR,
d158 2
a159 2
  raw_usrreq,
  0,		0,		0,		0,
d163 2
d167 47
a213 2
      inetsw, &inetsw[sizeof(inetsw)/sizeof(inetsw[0])] };
#else
d215 2
a216 2
struct protosw inetsw[6] = { 0 };
struct domain inetdomain = { 0 };
d218 9
d229 4
a232 2
	struct protosw *p;
	struct domain *d;
d234 2
a235 100
	p = &inetsw[0];
	p->pr_type = 0;
	p->pr_domain = &inetdomain;
	p->pr_protocol = 0;
	p->pr_flags = 0;
	p->pr_input = 0;
	p->pr_output = ip_output;
	p->pr_ctlinput = 0;
	p->pr_ctloutput = 0;
	p->pr_usrreq = 0;
	p->pr_init = ip_init;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = ip_slowtimo;
	p->pr_drain = ip_drain;

	p = &inetsw[1];
	p->pr_type = SOCK_DGRAM;
	p->pr_domain = &inetdomain;
	p->pr_protocol = IPPROTO_UDP;
	p->pr_flags = PR_ATOMIC|PR_ADDR;
	p->pr_input = udp_input;
	p->pr_output = 0;
	p->pr_ctlinput = udp_ctlinput;
	p->pr_ctloutput = ip_ctloutput;
	p->pr_usrreq = udp_usrreq;
	p->pr_init = udp_init;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = 0;
	p->pr_drain = 0;

	p = &inetsw[2];
	p->pr_type = SOCK_STREAM;
	p->pr_domain = &inetdomain;
	p->pr_protocol = IPPROTO_TCP;
	p->pr_flags = PR_CONNREQUIRED|PR_WANTRCVD;
	p->pr_input = tcp_input;
	p->pr_output = 0;
	p->pr_ctlinput = tcp_ctlinput;
	p->pr_ctloutput = tcp_ctloutput;
	p->pr_usrreq = tcp_usrreq;
	p->pr_init = tcp_init;
	p->pr_fasttimo = tcp_fasttimo;
	p->pr_slowtimo = tcp_slowtimo;
	p->pr_drain = tcp_drain;

	p = &inetsw[3];
	p->pr_type = SOCK_RAW;
	p->pr_domain = &inetdomain;
	p->pr_protocol = IPPROTO_RAW;
	p->pr_flags = PR_ATOMIC|PR_ADDR;
	p->pr_input = rip_input;
	p->pr_output = rip_output;
	p->pr_ctlinput = 0;
	p->pr_ctloutput = rip_ctloutput;
	p->pr_usrreq = raw_usrreq;
	p->pr_init = 0;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = 0;
	p->pr_drain = 0;

	p = &inetsw[4];
	p->pr_type = SOCK_RAW;
	p->pr_domain = &inetdomain;
	p->pr_protocol = IPPROTO_ICMP;
	p->pr_flags = PR_ATOMIC|PR_ADDR;
	p->pr_input = icmp_input;
	p->pr_output = rip_output;
	p->pr_ctlinput = 0;
	p->pr_ctloutput = rip_ctloutput;
	p->pr_usrreq = raw_usrreq;
	p->pr_init = raw_init;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = 0;
	p->pr_drain = 0;

	p = &inetsw[5];
	p->pr_type = SOCK_RAW;
	p->pr_domain = &inetdomain;
	p->pr_protocol = 0;
	p->pr_flags = PR_ATOMIC|PR_ADDR;
	p->pr_input = rip_input;
	p->pr_output = rip_output;
	p->pr_ctlinput = 0;
	p->pr_ctloutput = rip_ctloutput;
	p->pr_usrreq = raw_usrreq;
	p->pr_init = 0;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = 0;
	p->pr_drain = 0;

	d = &inetdomain;
	d->dom_family = AF_INET;
	d->dom_name = "internet";
	d->dom_init = 0;
	d->dom_externalize = 0;
	d->dom_dispose = 0;
	d->dom_protosw = inetsw;
	d->dom_protoswNPROTOSW = &inetsw[sizeof(inetsw)/sizeof(inetsw[0])];
	d->dom_next = 0;
}
d237 2
a238 1
#endif UNIX
d240 5
a244 1
/* EOF in_proto.c */
@


4.1.4.1
log
@Internet 5.04 merged from Internet 5.03 on Networking source tree with
Internet 4.08 BOOTP extensions from Spinner.
@
text
@d1 12
d14 2
a15 18
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d17 11
a27 11
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d30 8
a38 30
#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/domain.h>
#include <sys/mbuf.h>
#include <sys/queue.h>

#include <net/if.h>
#include <net/radix.h>
#include <net/route.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/ip_icmp.h>
#include <netinet/in_pcb.h>
#include <netinet/igmp_var.h>
#include <netinet/tcp.h>
#include <netinet/tcp_fsm.h>
#include <netinet/tcp_seq.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>
#include <netinet/tcpip.h>
#ifdef TCPDEBUG
#include <netinet/tcp_debug.h>
#endif
#include <netinet/udp.h>
#include <netinet/udp_var.h>
d42 11
d54 1
a54 16
#ifdef NSIP
void	idpip_input(), nsip_ctlinput();
#endif

#ifdef TPIP
void	tpip_input(), tpip_ctlinput(), tp_ctloutput();
int	tp_init(), tp_slowtimo(), tp_drain(), tp_usrreq();
#endif

#ifdef EON
void	eoninput(), eonctlinput(), eonprotoinit();
#endif /* EON */

void rsvp_input(struct mbuf *, int);
void ipip_input(struct mbuf *, int);

d58 1
a58 1
{ 0,		0,		0,		0,
d61 1
a61 1
  ip_init,	0,		ip_slowtimo,	ip_drain,	ip_sysctl
d63 1
a63 1
{ SOCK_DGRAM,	0,		IPPROTO_UDP,	PR_ATOMIC|PR_ADDR,
d66 1
a66 1
  udp_init,	0,		0,		0,		udp_sysctl
d68 1
a68 2
{ SOCK_STREAM,	0,		IPPROTO_TCP,
	PR_CONNREQUIRED|PR_IMPLOPCL|PR_WANTRCVD,
d71 1
a71 1
  tcp_init,	tcp_fasttimo,	tcp_slowtimo,	tcp_drain,	tcp_sysctl
d73 1
a73 1
{ SOCK_RAW,	0,		IPPROTO_RAW,	PR_ATOMIC|PR_ADDR,
d75 1
a75 1
  rip_usrreq,
d78 1
a78 1
{ SOCK_RAW,	0,		IPPROTO_ICMP,	PR_ATOMIC|PR_ADDR,
d80 2
a81 2
  rip_usrreq,
  0,		0,		0,		0,		icmp_sysctl
a82 41
#ifdef MULTICAST
{ SOCK_RAW,	0,		IPPROTO_IGMP,	PR_ATOMIC|PR_ADDR,
  igmp_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  igmp_init,	igmp_fasttimo,	igmp_slowtimo,	0,		igmp_sysctl
},
#endif
#ifdef MROUTING
{ SOCK_RAW,	0,		IPPROTO_RSVP,	PR_ATOMIC|PR_ADDR,
  rsvp_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
{ SOCK_RAW,	0,		IPPROTO_IPIP,	PR_ATOMIC|PR_ADDR,
  ipip_input,	rip_output, 	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
#endif
#ifdef TPIP
{ SOCK_SEQPACKET,0,		IPPROTO_TP,	PR_CONNREQUIRED|PR_WANTRCVD,
  tpip_input,	0,		tpip_ctlinput,	tp_ctloutput,
  tp_usrreq,
  tp_init,	0,		tp_slowtimo,	tp_drain,
},
#endif
/* EON (ISO CLNL over IP) */
#ifdef EON
{ SOCK_RAW,	0,		IPPROTO_EON,	0,
  eoninput,	0,		eonctlinput,		0,
  0,
  eonprotoinit,	0,		0,		0,
},
#endif
#ifdef NSIP
{ SOCK_RAW,	0,		IPPROTO_IDP,	PR_ATOMIC|PR_ADDR,
  idpip_input,	rip_output,	nsip_ctlinput,	0,
  rip_usrreq,
  0,		0,		0,		0,
},
#endif
d84 1
a84 1
{ SOCK_RAW,	0,		0,		PR_ATOMIC|PR_ADDR,
d86 2
a87 2
  rip_usrreq,
  rip_init,	0,		0,		0,
a90 2
extern int in_inithead(void **, int);

d93 2
a94 47
      0, 0, 0,
      in_inithead, 32, sizeof(struct sockaddr_in)
    };

#ifndef __riscos
DOMAIN_SET(inet);
#endif

#include "imp.h"
#if NIMP > 0
extern	struct domain impdomain;
int	rimp_output(), hostslowtimo();

struct protosw impsw[] = {
{ SOCK_RAW,	0,		0,		PR_ATOMIC|PR_ADDR,
  0,		rimp_output,	0,		0,
  rip_usrreq,
  0,		0,		hostslowtimo,	0,
},
};

struct domain impdomain =
    { AF_IMPLINK, "imp", 0, 0, 0,
      0, 0 };

#ifndef __riscos
DOMAIN_SET(imp);
#endif

#endif

#if 0
#include "hy.h"
#if NHY > 0
/*
 * HYPERchannel protocol family: raw interface.
 */
int	rhy_output();
extern	struct domain hydomain;

struct protosw hysw[] = {
{ SOCK_RAW,	&hydomain,	0,		PR_ATOMIC|PR_ADDR,
  0,		rhy_output,	0,		0,
  rip_usrreq,
  0,		0,		0,		0,
},
};
d96 2
a97 2
struct domain hydomain =
    { AF_HYLINK, "hy", 0, 0, 0, hysw, &hysw[sizeof (hysw)/sizeof(hysw[0])] };
a98 9
DOMAIN_SET(hy);
#endif
#endif

#ifdef __riscos
/*
 * RISC OS modules cannot have data pointers in static init data :-(
 */
void
d101 2
a102 1
	int i;
d104 100
a203 2
	for (i=0; i < sizeof(inetsw)/sizeof(inetsw[0]); i++)
		inetsw[i].pr_domain = &inetdomain;
d205 1
a205 2
	inetdomain.dom_protosw = inetsw;
	inetdomain.dom_protoswNPROTOSW = &inetsw[sizeof(inetsw)/sizeof(inetsw[0])];
d207 1
a207 8
#if NIMP > 0
	impsw[0].pr_domain = &impdomain;

	impdomain.dom_protosw = impsw;
	impdomain.dom_protoswNPROTOSW = &impsw[1];
#endif
}
#endif
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@RCS log keyword removed
@
text
@d8 1
a8 1
 * :RCS Log discontinued:
@


4.1.7.3
log
@BootP patch incorporated
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.5.2
log
@RCS Log keyword removed
@
text
@d8 1
a8 1
 * :RCS Log discontinued:
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d1 12
d14 2
a15 18
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d17 11
a27 11
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
a28 2
 *	From: @@(#)in_proto.c	8.1 (Berkeley) 6/10/93
 *	$Id: in_proto.c,v 1.15.4.1 1995/09/06 10:31:34 davidg Exp $
d30 8
a38 30
#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/domain.h>
#include <sys/mbuf.h>
#include <sys/queue.h>

#include <net/if.h>
#include <net/radix.h>
#include <net/route.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/ip_icmp.h>
#include <netinet/in_pcb.h>
#include <netinet/igmp_var.h>
#include <netinet/tcp.h>
#include <netinet/tcp_fsm.h>
#include <netinet/tcp_seq.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>
#include <netinet/tcpip.h>
#ifdef TCPDEBUG
#include <netinet/tcp_debug.h>
#endif
#include <netinet/udp.h>
#include <netinet/udp_var.h>
d42 11
d54 1
a54 16
#ifdef NSIP
void	idpip_input(), nsip_ctlinput();
#endif

#ifdef TPIP
void	tpip_input(), tpip_ctlinput(), tp_ctloutput();
int	tp_init(), tp_slowtimo(), tp_drain(), tp_usrreq();
#endif

#ifdef EON
void	eoninput(), eonctlinput(), eonprotoinit();
#endif /* EON */

void rsvp_input(struct mbuf *, int);
void ipip_input(struct mbuf *, int);

d58 1
a58 1
{ 0,		0,		0,		0,
d61 1
a61 1
  ip_init,	0,		ip_slowtimo,	ip_drain,	ip_sysctl
d63 1
a63 1
{ SOCK_DGRAM,	0,		IPPROTO_UDP,	PR_ATOMIC|PR_ADDR,
d66 1
a66 1
  udp_init,	0,		0,		0,		udp_sysctl
d68 1
a68 2
{ SOCK_STREAM,	0,		IPPROTO_TCP,
	PR_CONNREQUIRED|PR_IMPLOPCL|PR_WANTRCVD,
d71 1
a71 1
  tcp_init,	tcp_fasttimo,	tcp_slowtimo,	tcp_drain,	tcp_sysctl
d73 1
a73 1
{ SOCK_RAW,	0,		IPPROTO_RAW,	PR_ATOMIC|PR_ADDR,
d75 1
a75 1
  rip_usrreq,
d78 1
a78 1
{ SOCK_RAW,	0,		IPPROTO_ICMP,	PR_ATOMIC|PR_ADDR,
d80 2
a81 2
  rip_usrreq,
  0,		0,		0,		0,		icmp_sysctl
a82 39
#ifdef MULTICAST
{ SOCK_RAW,	0,		IPPROTO_IGMP,	PR_ATOMIC|PR_ADDR,
  igmp_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  igmp_init,	igmp_fasttimo,	igmp_slowtimo,	0,		igmp_sysctl
},
{ SOCK_RAW,	0,		IPPROTO_RSVP,	PR_ATOMIC|PR_ADDR,
  rsvp_input,	rip_output,	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
{ SOCK_RAW,	0,		IPPROTO_IPIP,	PR_ATOMIC|PR_ADDR,
  ipip_input,	rip_output, 	0,		rip_ctloutput,
  rip_usrreq,
  0,		0,		0,		0,
},
#endif
#ifdef TPIP
{ SOCK_SEQPACKET,0,		IPPROTO_TP,	PR_CONNREQUIRED|PR_WANTRCVD,
  tpip_input,	0,		tpip_ctlinput,	tp_ctloutput,
  tp_usrreq,
  tp_init,	0,		tp_slowtimo,	tp_drain,
},
#endif
/* EON (ISO CLNL over IP) */
#ifdef EON
{ SOCK_RAW,	0,		IPPROTO_EON,	0,
  eoninput,	0,		eonctlinput,		0,
  0,
  eonprotoinit,	0,		0,		0,
},
#endif
#ifdef NSIP
{ SOCK_RAW,	0,		IPPROTO_IDP,	PR_ATOMIC|PR_ADDR,
  idpip_input,	rip_output,	nsip_ctlinput,	0,
  rip_usrreq,
  0,		0,		0,		0,
},
#endif
d84 1
a84 1
{ SOCK_RAW,	0,		0,		PR_ATOMIC|PR_ADDR,
d86 2
a87 2
  rip_usrreq,
  rip_init,	0,		0,		0,
a90 2
extern int in_inithead(void **, int);

d93 2
a94 47
      0, 0, 0,
      in_inithead, 32, sizeof(struct sockaddr_in)
    };

#ifndef __riscos
DOMAIN_SET(inet);
#endif

#include "imp.h"
#if NIMP > 0
extern	struct domain impdomain;
int	rimp_output(), hostslowtimo();

struct protosw impsw[] = {
{ SOCK_RAW,	0,		0,		PR_ATOMIC|PR_ADDR,
  0,		rimp_output,	0,		0,
  rip_usrreq,
  0,		0,		hostslowtimo,	0,
},
};

struct domain impdomain =
    { AF_IMPLINK, "imp", 0, 0, 0,
      0, 0 };

#ifndef __riscos
DOMAIN_SET(imp);
#endif

#endif

#if 0
#include "hy.h"
#if NHY > 0
/*
 * HYPERchannel protocol family: raw interface.
 */
int	rhy_output();
extern	struct domain hydomain;

struct protosw hysw[] = {
{ SOCK_RAW,	&hydomain,	0,		PR_ATOMIC|PR_ADDR,
  0,		rhy_output,	0,		0,
  rip_usrreq,
  0,		0,		0,		0,
},
};
d96 2
a97 2
struct domain hydomain =
    { AF_HYLINK, "hy", 0, 0, 0, hysw, &hysw[sizeof (hysw)/sizeof(hysw[0])] };
a98 9
DOMAIN_SET(hy);
#endif
#endif

#ifdef __riscos
/*
 * RISC OS modules cannot have data pointers in static init data :-(
 */
void
d101 2
a102 1
	int i;
d104 100
a203 2
	for (i=0; i < sizeof(inetsw)/sizeof(inetsw[0]); i++)
		inetsw[i].pr_domain = &inetdomain;
d205 1
a205 2
	inetdomain.dom_protosw = inetsw;
	inetdomain.dom_protoswNPROTOSW = &inetsw[sizeof(inetsw)/sizeof(inetsw[0])];
d207 1
a207 8
#if NIMP > 0
	impsw[0].pr_domain = &impdomain;

	impdomain.dom_protosw = impsw;
	impdomain.dom_protoswNPROTOSW = &impsw[1];
#endif
}
#endif
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@


4.1.1.2
log
@Log keyword removed
@
text
@d8 1
a8 1
 * :RCS Log discontinued:
@
