head	4.4;
access;
symbols
	Internet-5_65:4.4
	Internet-5_64:4.4
	Internet-5_63:4.4
	Internet-5_62:4.4
	Internet-5_61:4.4
	Internet-5_60:4.4
	Internet-5_59:4.4
	Internet-5_58:4.4
	Internet-5_57:4.4
	Internet-5_56:4.4
	Internet-5_55:4.4
	Internet-5_54:4.4
	Internet-5_53:4.4
	Internet-5_52:4.4
	Internet-5_51:4.4
	Internet-5_50:4.4
	RO_5_07:4.4
	Internet-5_49:4.4
	Internet-5_48:4.4
	Internet-5_47:4.4
	Internet-5_46:4.4
	Internet-5_45:4.3
	Internet-5_44:4.3
	Internet-5_43:4.3
	Internet-5_42:4.3
	Internet-5_41:4.3
	Internet-5_40:4.3
	Internet-5_39:4.3
	Internet-5_38:4.3
	Internet-5_37:4.3
	Internet-5_36:4.3
	Internet-5_35:4.3
	Internet-5_34:4.3
	Internet-5_33:4.3
	Internet-5_32:4.3
	Internet-5_31:4.3
	Internet-5_30:4.2
	Internet-5_29:4.2
	Internet-5_27:4.1.3.1
	Internet-5_26:4.1.3.1
	Internet-5_25:4.1.3.1
	Internet-5_24:4.1.3.1
	Internet-5_23:4.1.3.1
	Internet-5_22:4.1.3.1
	Internet-5_21:4.1.3.1
	Internet-5_20:4.1.3.1
	Internet-5_19:4.1.3.1
	Internet-5_18:4.1.3.1
	Internet-5_17:4.1.3.1
	Internet-5_16:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.2
	Internet-5_15:4.1.3.1
	Internet-5_14:4.1.3.1
	Internet-5_13:4.1.3.1
	sforrest_daytona_appflash-0_31:4.1.3.1
	Internet-5_12:4.1.3.1
	Internet-5_11:4.1.3.1
	celkins_Internet-5_10:4.1.3.1
	nicke_Internat_25-9-98:4.1.3.1
	Internet-5_09:4.1.3.1
	blaughto_daytona_appflash-0_30:4.1.3.1
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rwarren_Internet-5_08:4.1.3.1
	Spinner:4.1.3.1
	Internet_5_07:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	Ursula_bp:4.1.3.1
	Ursula:4.1.3.1.0.10
	Ursula_13May1998_bp:4.1.3.1
	Ursula_13May1998:4.1.3.1.0.6
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	celkins_Internet_506:4.1.3.1
	afrost_NC2_Generic:4.1.3.1
	afrost_Funai01-33:4.1.3.1
	Internet_505:4.1.3.1
	Spinner_RCA116:4.1.3.1
	Spinner_B20_2:4.1.3.1
	Spinner_19_3:4.1.3.1
	Spinner_B18:4.1.3.1
	Spinner_B17:4.1.3.1
	Spinner_B15:4.1.3.1
	Spinner_B14:4.1.3.1
	Spinner_B13:4.1.3.1
	Spinner_B12:4.1.3.1
	Spinner_B10:4.1.3.1
	Daytona:4.1.3.1.0.8
	Daytona_bp:4.1.3.1
	Spin_merge:4.1.3.1
	Spinner_B7:4.1.3.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.4
date	2003.11.13.18.02.11;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	99.07.13.11.12.38;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	99.07.08.15.25.26;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.22.27.07;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.05.22.27.07;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Commit of two years' worth of changes.
Upped version number, because it's about time it was.

Version 5.46. Tagged as 'Internet-5_46'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>
#include <string.h>

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/sysctl.h>

#include <net/if.h>
#include <net/route.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/ip_icmp.h>
#include <netinet/ip_mroute.h>
#include <netinet/icmp_var.h>
#include <netinet/igmp_var.h>
#include <netinet/udp.h>
#include <netinet/udp_var.h>
#include <netinet/tcp.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>

#include <nlist.h>
#include <kvm.h>

static struct nlist nl[] = {
	{ "_icmpstat", N_ABS },
	{ "_ifnet", N_ABS },
#ifdef MULTICAST
	{ "_ip_mrtproto", N_ABS },
#endif
	{ "_ipstat", N_ABS },
#ifdef MROUTING
	{ "_mfctable", N_ABS },
#endif
#ifdef MULTICAST
	{ "_mrtstat", N_ABS },
#endif
	{ "_rt_tables", N_ABS },
	{ "_rtstat", N_ABS },
	{ "_tcb", N_ABS },
	{ "_tcpstat", N_ABS },
	{ "_udb", N_ABS },
	{ "_udpstat", N_ABS },
#ifdef MROUTING
	{ "_viftable", N_ABS },
#endif
};

extern u_int ip_mrtproto;
extern struct mrtstat mrtstat;
extern struct mbuf *mfctable[];
extern struct vif viftable[];

void
kvm_init()
{
	struct nlist *np = nl;
	(np++)->n_value = (u_long) &icmpstat;
	(np++)->n_value = (u_long) &ifnet;
#ifdef MULTICAST
	(np++)->n_value = (u_long) &ip_mrtproto;
#endif
	(np++)->n_value = (u_long) &ipstat;
#ifdef MROUTING
	(np++)->n_value = (u_long) mfctable;
#endif
#ifdef MULTICAST
	(np++)->n_value = (u_long) &mrtstat;
#endif
	(np++)->n_value = (u_long) rt_tables;
	(np++)->n_value = (u_long) &rtstat;
	(np++)->n_value = (u_long) &tcb;
	(np++)->n_value = (u_long) &tcpstat;
	(np++)->n_value = (u_long) &udb;
	(np++)->n_value = (u_long) &udpstat;
#ifdef MROUTING
	(np++)->n_value = (u_long) viftable;
#endif
}

static int
nlist_compare(a, b)
	const void *a, *b;
{
	return (strcmp(((const struct nlist *)a)->n_name,
	               ((const struct nlist *)b)->n_name));
}

struct kvm_nlist_args {
	kvm_t *kvmd;
	struct nlist *nl;
};
int
_kvm_nlist(uap, retval)
	register struct kvm_nlist_args *uap;
	int *retval;
{
	register struct nlist *key;
	struct nlist *found;
	register int nvalid = 0;

	for (key=uap->nl; key->n_name && key->n_name[0]; ++key) {
		found = (struct nlist *)bsearch(key, nl,
				sizeof(nl)/sizeof(nl[0]), sizeof(nl[0]),
				nlist_compare);
		if (found==0)
			continue;
		++nvalid;
		key->n_type = found->n_type;
		key->n_value = found->n_value;
	}

	*retval = ((key - uap->nl) - nvalid);
	return (0);
}
@


4.3
log
@Added new FreeBSD sysctl handling using linker magic.
A few new sysctls added as a result.
SO_TIMESTAMP now gives real time, not Internet's internal time.
DHCP/BOOTP parsing picks up URL option and pops it into Inet$URL.
Requires TCPIPLibs 5.25 and link 5.12.

Version 5.31. Tagged as 'Internet-5_31'
@
text
@d35 1
@


4.2
log
@* Dynamic ports now assigned in range 49152-65535.
* IP_RECVDSTADDR works for non-unicast packets.
* SO_TIMESTAMP added.
* IP_RECVIF added.
* Various other internal changes merged in from FreeBSD sources.

Version 5.29. Tagged as 'Internet-5_29'
@
text
@d18 3
d25 1
a49 1
	{ "_igmpstat", N_ABS },
a81 1
	(np++)->n_value = (u_long) &igmpstat;
@


4.1
log
@Initial revision
@
text
@d19 1
d21 1
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
