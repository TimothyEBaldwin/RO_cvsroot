head	4.15;
access;
symbols
	Internet-5_65:4.15
	Internet-5_64:4.15
	Internet-5_63:4.15
	Internet-5_62:4.15
	Internet-5_61:4.15
	Internet-5_60:4.14
	Internet-5_59:4.14
	Internet-5_58:4.14
	Internet-5_57:4.13
	Internet-5_56:4.13
	Internet-5_55:4.13
	Internet-5_54:4.13
	Internet-5_53:4.13
	Internet-5_52:4.11
	Internet-5_51:4.11
	Internet-5_50:4.11
	RO_5_07:4.11
	Internet-5_49:4.11
	Internet-5_48:4.11
	Internet-5_47:4.11
	Internet-5_46:4.11
	Internet-5_45:4.11
	Internet-5_44:4.10
	Internet-5_43:4.9
	Internet-5_42:4.8
	Internet-5_41:4.8
	Internet-5_40:4.8
	Internet-5_39:4.8
	Internet-5_38:4.8
	Internet-5_37:4.7
	Internet-5_36:4.6
	Internet-5_35:4.6
	Internet-5_34:4.6
	Internet-5_33:4.5
	Internet-5_32:4.5
	Internet-5_31:4.5
	Internet-5_30:4.5
	Internet-5_29:4.5
	Internet-5_27:4.5
	Internet-5_26:4.5
	Internet-5_25:4.4
	Internet-5_24:4.3
	Internet-5_23:4.3
	Internet-5_22:4.3
	Internet-5_21:4.3
	Internet-5_20:4.3
	Internet-5_19:4.3
	Internet-5_18:4.2
	Internet-5_17:4.2
	Internet-5_16:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	Internet-5_15:4.2
	Internet-5_14:4.2
	Internet-5_13:4.2
	sforrest_daytona_appflash-0_31:4.2
	Internet-5_12:4.2
	Internet-5_11:4.2
	celkins_Internet-5_10:4.2
	nicke_Internat_25-9-98:4.2
	Internet-5_09:4.2
	blaughto_daytona_appflash-0_30:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rwarren_Internet-5_08:4.2
	Spinner:4.2
	Internet_5_07:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.6
	Ursula_13May1998_bp:4.2
	Ursula_13May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	celkins_Internet_506:4.2
	afrost_NC2_Generic:4.1.3.1.2.1
	afrost_Funai01-33:4.1.3.1.2.1
	Internet_505:4.2
	Spinner_RCA116:4.1.3.1.2.1
	Spinner_B20_2:4.1.3.1.2.1
	Spinner_19_3:4.1.3.1.2.1
	Spinner_B18:4.1.3.1.2.1
	Spinner_B17:4.1.3.1.2.1
	Spinner_B15:4.1.3.1.2.1
	Spinner_B14:4.1.3.1.2.1
	Spinner_B13:4.1.3.1.2.1
	Spinner_B12:4.1.3.1.2.1
	Spinner_B10:4.1.3.1.2.1
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Spin_merge:4.1.3.1.2.1
	Spinner_B7:4.1.3.1.2.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.15
date	2015.06.17.22.13.58;	author rsprowson;	state Exp;
branches;
next	4.14;
commitid	BrpcmgDoEfJnHPpy;

4.14
date	2013.09.29.08.22.35;	author rsprowson;	state Exp;
branches;
next	4.13;
commitid	NEUcUdhWgmAQdj7x;

4.13
date	2011.12.15.22.20.12;	author rsprowson;	state Exp;
branches;
next	4.12;
commitid	TVCPLXal0LzsSkLv;

4.12
date	2011.12.15.22.14.03;	author rsprowson;	state Exp;
branches;
next	4.11;
commitid	HZIJ91eGy2SeQkLv;

4.11
date	2001.09.06.14.19.39;	author kbracey;	state Exp;
branches;
next	4.10;

4.10
date	2000.07.13.10.39.41;	author ahodgkin;	state Exp;
branches;
next	4.9;

4.9
date	2000.07.05.14.48.27;	author kbracey;	state Exp;
branches;
next	4.8;

4.8
date	99.11.11.15.19.00;	author kbracey;	state Exp;
branches;
next	4.7;

4.7
date	99.10.14.14.42.50;	author kbracey;	state Exp;
branches;
next	4.6;

4.6
date	99.07.28.12.00.18;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	99.06.25.13.40.16;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	99.06.23.13.10.27;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.02.12.14.57.14;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.12.22.59.12;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.22.30.47;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.05.22.30.47;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	;

4.1.3.1.2.1
date	97.04.11.10.07.12;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.15
log
@Have Internet look after its own messages
Remove faulty logic for Service_MessageFileClosed, MessageTrans reopens the file, so no need to do it again locally.
Usual register/deregister/reregister code for ResourceFS.
Sort the SWI veneers into order, add veneers for ResourceFS in the RAM case.

Version 5.61. Tagged as 'Internet-5_61'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:APCS.<APCS>
        GET     Hdr:ModHand
        GET     Hdr:MsgTrans
        GET     Hdr:Services
        GET     Hdr:OsWords
        GET     Hdr:ResourceFS
        GET     Hdr:Portable
        GET     Hdr:TaskWindow
        GET     Hdr:Econet

XMbuf_OpenSession               *       &6A580
XMbuf_CloseSession              *       &6A581
XMbuf_Control                   *       &6A584

InternetStatus_AddressChanged   *       0
InternetStatus_InterfaceUpDown  *       2
InternetStatus_DynamicBootStart *       3
InternetStatus_DynamicBootReply *       4
InternetStatus_DynamicBootInform *      7
InternetStatus_DuplicateIPAddress *     8

        EXPORT  econet_inet_rx_direct
        EXPORT  mbufcontrol_version
        EXPORT  mbuf_close_session
        EXPORT  mbuf_open_session
        EXPORT  messagetrans_close_file
        EXPORT  messagetrans_file_info
        EXPORT  messagetrans_lookup
        EXPORT  messagetrans_open_file
        EXPORT  osmodule_claim
        EXPORT  osmodule_free
        EXPORT  osreadsysinfo_hardware0
        EXPORT  osreadsysinfo_machineid
        EXPORT  osword_read_realtime
        EXPORT  os_add_call_back
        EXPORT  os_claim
        EXPORT  os_generate_event
        EXPORT  os_read_escape_state
        EXPORT  os_read_monotonic_time
        EXPORT  os_release
        EXPORT  os_remove_call_back
        EXPORT  os_upcall
        EXPORT  portable_idle
        EXPORT  portable_read_features
        EXPORT  resourcefs_register_files
        EXPORT  resourcefs_deregister_files
        EXPORT  service_dci_protocol_status
        EXPORT  service_enumerate_network_drivers
        EXPORT  service_internetstatus_address_changed
        EXPORT  service_internetstatus_duplicate_ip_address
        EXPORT  service_internetstatus_dynamicboot_inform
        EXPORT  service_internetstatus_dynamicboot_reply
        EXPORT  service_internetstatus_dynamicboot_start
        EXPORT  service_internetstatus_interface_updown
        EXPORT  taskwindow_task_info

        AREA    swiveneers,CODE,READONLY,PIC

; _kernel_oserror *mbuf_open_session(struct mbctl *);
        ROUT
mbuf_open_session
        MOV     ip,lr
        SWI     XMbuf_OpenSession
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *mbufcontrol_version(int *version_out);
        ROUT
mbufcontrol_version
        MOV     ip,lr
        STR     a1,[sp,#-4]!
        MOV     a1,#0
        SWI     XMbuf_Control
        BVS     %F01
        LDR     lr,[sp]
        TEQS    lr,#0
        STRNE   a1,[lr]
        MOV     a1,#0
01      ADD     sp,sp,#4
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *mbuf_close_session(struct mbctl *);
        ROUT
mbuf_close_session
        MOV     ip,lr
        SWI     XMbuf_CloseSession
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *messagetrans_file_info(const char *filename);
        ROUT
messagetrans_file_info
        MOV     ip,lr
        MOV     a2,a1
        SWI     XMessageTrans_FileInfo
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *messagetrans_open_file(u_long *fd, const char *filename, char *buffer);
        ROUT
messagetrans_open_file
        MOVS    ip,lr
        SWI     XMessageTrans_OpenFile
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *messagetrans_lookup(u_long *fd, const char *token, char *buffer, int size, char **result);
        ROUT
messagetrans_lookup
        MOV     ip,sp
        FunctionEntry "v1-v4"
        MOV     v1,#0
        MOV     v2,#0
        MOV     v3,#0
        MOV     v4,#0
        SWI     XMessageTrans_Lookup
        Return  "v1-v4",,VS
        LDR     lr,[ip]
        TEQS    lr,#0
        STRNE   a3,[lr]
        MOV     a1,#0
        Return  "v1-v4"

; void messagetrans_close_file(u_long *fd);
        ROUT
messagetrans_close_file
        MOVS    ip,lr
        SWI     XMessageTrans_CloseFile
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *resourcefs_register_files(void *resarea);
        ROUT
resourcefs_register_files
        MOV     ip,lr
        SWI     XResourceFS_RegisterFiles
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *resourcefs_deregister_files(void *resarea);
        ROUT
resourcefs_deregister_files
        MOV     ip,lr
        SWI     XResourceFS_DeregisterFiles
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; void service_dci_protocol_status(void *wsp, int status, int ver, const char *title)
        ROUT
service_dci_protocol_status
        FunctionEntry "v1"
        MOV     v1,a4
        MOV     a4,a3
        MOV     a3,a2
        MOV     a2,#Service_DCIProtocolStatus
        SWI     XOS_ServiceCall
        Return  "v1"

; void service_internetstatus_address_changed(void)
        ROUT
service_internetstatus_address_changed
        MOV     ip,lr
        MOV     a1,#InternetStatus_AddressChanged
        MOV     a2,#Service_InternetStatus
        SWI     XOS_ServiceCall
        Return  ,LinkNotStacked,,ip

; void service_internetstatus_interface_updown(int state, const char *name, const void *dib)
        ROUT
service_internetstatus_interface_updown
        FunctionEntry "v1"
        MOV     v1,a3
        MOV     a4,a2
        MOV     a3,a1
        MOV     a2,#Service_InternetStatus
        MOV     a1,#InternetStatus_InterfaceUpDown
        SWI     XOS_ServiceCall
        Return  "v1"

; int service_internetstatus_dynamicboot_start(const char *name, const void *dib, char *pkt, int len,
; int eoo, int *error_code)
        ROUT
service_internetstatus_dynamicboot_start
        MOV     ip, sp
        FunctionEntry "a1-a4,v1-v6"
        Pull    "a3-a4,v1,v2"
        Push    "ip"
        LDR     v3, [ip]
        MOV     a2,#Service_InternetStatus
        MOV     a1,#InternetStatus_DynamicBootStart
        SWI     XOS_ServiceCall
        Pull    "ip"
        LDR     a4, [ip, #4]
        STRVC   a3, [a4]
        MOVVS   a1, #0
        STRVS   a1, [a4]
        MOVVC   a1, a2
        Return  "v1-v6"

; int service_internetstatus_dynamicboot_reply(const char *name, const void *dib, char *pkt, int len)
        ROUT
service_internetstatus_dynamicboot_reply
        FunctionEntry "a1-a4,v1-v6"
        Pull    "a3-a4,v1,v2"
        MOV     a2,#Service_InternetStatus
        MOV     a1,#InternetStatus_DynamicBootReply
        SWI     XOS_ServiceCall
        MOVVS   a1, #Service_InternetStatus
        MOVVC   a1, a2
        Return  "v1-v6"

; int service_internetstatus_dynamicboot_inform(char *pkt, int len)
        ROUT
service_internetstatus_dynamicboot_inform
        FunctionEntry "v1-v6"
        MOV     a4, a2
        MOV     a3, a1
        MOV     a2,#Service_InternetStatus
        MOV     a1,#InternetStatus_DynamicBootReply
        SWI     XOS_ServiceCall
        MOVVS   a1, #Service_InternetStatus
        MOVVC   a1, a2
        Return  "v1-v6"

; int service_internetstatus_duplicate_ip_address(const char *name, const void *dib, struct in_addr addr, u_char *hwaddr)
        ROUT
service_internetstatus_duplicate_ip_address
        FunctionEntry "v1-v2"
        MOV     v2,a4
        MOV     v1,a3
        MOV     a4,a2
        MOV     a3,a1
        MOV     a2,#Service_InternetStatus
        MOV     a1,#InternetStatus_DuplicateIPAddress
        SWI     XOS_ServiceCall
        MOVVC   a1, a2
        Return  "v1-v2"

; void service_enumerate_network_drivers(ChDibRef *)
        ROUT
service_enumerate_network_drivers
        MOV     ip,lr
        MOV     a4,a1
        MOV     a1,#0
        MOV     a2,#Service_EnumerateNetworkDrivers
        SWI     XOS_ServiceCall
        STRVC   a1,[a4]
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; void *osmodule_claim(size_t size)
        ROUT
osmodule_claim
        MOV     ip,lr
        MOV     a4,a1
        MOV     a1,#ModHandReason_Claim
        SWI     XOS_Module
        MOVVC   a1,a3
        MOVVS   a1,#0
        Return  ,LinkNotStacked,,ip

; void osmodule_free(void *)
        ROUT
osmodule_free
        MOV     ip,lr
        MOV     a3,a1
        MOV     a1,#ModHandReason_Free
        SWI     XOS_Module
        Return  ,LinkNotStacked,,ip

; u_long os_read_monotonic_time(void)
        ROUT
os_read_monotonic_time
        MOV     ip,lr
        SWI     XOS_ReadMonotonicTime
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *os_generate_event(int, int, int, int)
        ROUT
os_generate_event
        MOV     ip,lr
        SWI     XOS_GenerateEvent
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *os_claim(int, int (*fun)(), void *)
        ROUT
os_claim
        MOV     ip,lr
        SWI     XOS_Claim
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; void os_release(int, int (*fun)(), void *)
        ROUT
os_release
        MOV     ip,lr
        SWI     XOS_Release
        Return  ,LinkNotStacked,,ip

; _kernel_oserror *os_add_call_back(int (*fun)(), void *)
        ROUT
os_add_call_back
        MOV     ip,lr
        SWI     XOS_AddCallBack
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; void os_remove_call_back(int (*fun)(), void *)
        ROUT
os_remove_call_back
        MOV     ip,lr
        SWI     XOS_RemoveCallBack
        Return  ,LinkNotStacked,,ip

; int econet_inet_rx_direct(int, int, int, int, int, int, int)
        ROUT
econet_inet_rx_direct
        MOV     ip,sp
        FunctionEntry "v1-v3"
        LDMIA   ip,{v1-v3}
        SWI     XEconet_InetRxDirect
        MOV     a1,a2
        Return  "v1-v3"

; _kernel_oserror *taskwindow_task_info(int, int *)
        ROUT
taskwindow_task_info
        MOV     ip,lr
        MOV     a4,a2
        SWI     XTaskWindow_TaskInfo
        STRVC   a1,[a4]
        MOVVC   a1,#0
        Return  ,LinkNotStacked,,ip

; int os_upcall(int, volatile void *)
        ROUT
os_upcall
        MOV     ip,lr
        SWI     XOS_UpCall
        Return  ,LinkNotStacked,,ip

; unsigned osreadsysinfo_hardware0(void)
        ROUT
osreadsysinfo_hardware0
        FunctionEntry "v1"
        MOV     a1,#2
        SWI     XOS_ReadSysInfo
        MOVVS   a1,#0
        Return  "v1"

; void osreadsysinfo_machineid(unsigned int *mac)
        ROUT
osreadsysinfo_machineid
        FunctionEntry "v1"
        MOV     ip,a1
        MOV     a1,#2
        SWI     XOS_ReadSysInfo
        STMVCIA ip,{a4,v1}
        Return  "v1"

; void osword_read_realtime(machinetime *mt)
        ROUT
osword_read_realtime
        MOV     ip,lr
        MOV     a2,a1
        MOV     a1,#OsWord_ReadRealTimeClock
        MOV     lr,#OWReadRTC_5ByteInt
        STRB    lr,[a2]
        SWI     XOS_Word
        Return  ,LinkNotStacked,,ip

; unsigned portable_read_features(void)
        ROUT
portable_read_features
        MOV     ip,lr
        SWI     XPortable_ReadFeatures          ; Returns features mask in R1
        BVC     %FT01
        MOV     a1,#0                           ; Not available - may be an A4.
        MVN     a2,#0                           ; See if we have Portable_Speed.
        SWI     XPortable_Speed
        MOVVC   a2,#PortableFeature_Speed
        MOVVS   a2,#0
01      MOV     a1,a2
        Return  ,LinkNotStacked,,ip

; void portable_idle(void)
        ROUT
portable_idle
        MOV     ip,lr
        SWI     XPortable_Idle
        Return  ,LinkNotStacked,,ip

; int os_read_escape_state(void)
        ROUT
os_read_escape_state
        MOV     ip,lr
        SWI     XOS_ReadEscapeState
        MOVCC   a1,#0
        MOVCS   a1,#1
        Return  ,LinkNotStacked,,ip

        END
@


4.14
log
@Correction to swiveneers for {CONFIG}=26
The LDMRet macro had an extra comma before the circumflex, but since these are also defined as macros in the APCS headers, change to using those instead.
Tested on a Risc PC with RISC OS 4.02 in {CONFIG}=26.

Version 5.58. Tagged as 'Internet-5_58'
@
text
@d24 1
d40 1
a40 1
        EXPORT  mbuf_open_session
d43 2
d46 1
d48 1
a48 10
        EXPORT  messagetrans_lookup
        EXPORT  messagetrans_close_file
        EXPORT  service_dci_protocol_status
        EXPORT  service_internetstatus_address_changed
        EXPORT  service_internetstatus_interface_updown
        EXPORT  service_internetstatus_dynamicboot_start
        EXPORT  service_internetstatus_dynamicboot_reply
        EXPORT  service_internetstatus_dynamicboot_inform
        EXPORT  service_internetstatus_duplicate_ip_address
        EXPORT  service_enumerate_network_drivers
d50 7
a56 1
        EXPORT  osmodule_claim
a57 2
        EXPORT  os_generate_event
        EXPORT  os_claim
a58 1
        EXPORT  os_add_call_back
a59 1
        EXPORT  taskwindow_task_info
d61 1
a61 4
        EXPORT  econet_inet_rx_direct
        EXPORT  osreadsysinfo_hardware0
        EXPORT  osreadsysinfo_machineid
        EXPORT  osword_read_realtime
d63 11
a73 2
        EXPORT  portable_idle
        EXPORT  os_read_escape_state
d149 16
@


4.13
log
@Delete local user_mode_donothing() and replace with usermode_donothing() from AsmUtils.
Makefilse uses ModuleLibs too.
Lots of STM/LDM replaced with Push and Pull macros.
Local definitions in 'swiveneers' replaced with header files.

Version 5.53. Tagged as 'Internet-5_53'
@
text
@d22 2
a31 3
Service_EnumerateNetworkDrivers *       &9B
Service_DCIProtocolStatus       *       &9F
Service_InternetStatus          *       &B0
a71 18
        MACRO
        MOVRet  $lr,$cond
        [ {CONFIG}=26
        MOV$cond.S    pc,$lr
        |
        MOV$cond      pc,$lr
        ]
        MEND

        MACRO
        LDMRet  $regs,$cond
        [ {CONFIG}=26
        LDM$cond.FD   sp!, { $regs },^
        |             
        LDM$cond.FD   sp!, { $regs }
        ]
        MEND

d80 1
a80 1
        MOVRet  ip
d95 1
a95 1
        MOVRet  ip
d103 1
a103 1
        MOVRet  ip
d112 1
a112 1
        MOVRet  ip
d120 1
a120 1
        MOVRet  ip
d126 1
a126 1
        Push    "v1-v4,lr"
d132 1
a132 1
        LDMRet  "v1-v4,pc",VS
d137 1
a137 1
        LDMRet  "v1-v4,pc"
d144 1
a144 1
        MOVRet  ip
d149 1
a149 1
        Push    "v1,lr"
d155 1
a155 1
        LDMRet  "v1,pc"
d164 1
a164 1
        MOVRet  ip
d169 1
a169 1
        Push    "v1,lr"
d176 1
a176 1
        LDMRet  "v1,pc"
d183 1
a183 1
        Push    "a1-a4,v1-v6,lr"
d196 1
a196 1
        LDMRet  "v1-v6,pc"
d201 1
a201 1
        Push    "a1-a4,v1-v6,lr"
d208 1
a208 1
        LDMRet  "v1-v6,pc"
d213 1
a213 1
        Push    "v1-v6,lr"
d221 1
a221 1
        LDMRet  "v1-v6,pc"
d226 1
a226 1
        Push    "v1-v2,lr"
d235 1
a235 1
        LDMRet  "v1-v2,pc"
d247 1
a247 1
        MOVRet  ip
d258 1
a258 1
        MOVRet  ip
d267 1
a267 1
        MOVRet  ip
d274 1
a274 1
        MOVRet  ip
d282 1
a282 1
        MOVRet  ip
d290 1
a290 1
        MOVRet  ip
d297 1
a297 1
        MOVRet  ip
d305 1
a305 1
        MOVRet  ip
d312 1
a312 1
        MOVRet  ip
d318 1
a318 1
        Push    "v1-v3,lr"
d322 1
a322 1
        LDMRet  "v1-v3,pc"
d332 1
a332 1
        MOVRet  ip
d339 1
a339 1
        MOVRet  ip
d344 1
a344 1
        Push    "v1,lr"
d348 1
a348 1
        LDMRet  "v1,pc"
d353 1
a353 1
        Push    "v1,lr"
d358 1
a358 1
        LDMRet  "v1,pc"
d365 2
a366 2
        MOV     a1,#14
        MOV     lr,#3
d369 1
a369 1
        MOVRet  ip
d383 1
a383 1
        MOVRet  ip
d390 1
a390 1
        MOVRet  ip
d399 1
a399 1
        MOVRet  ip
@


4.12
log
@Retab assembler to reduce diffs.
Not tagged.
@
text
@d15 11
a25 24
XOS_Byte                        *       &20006
XOS_Word                        *       &20007
XOS_Module                      *       &2001E
ModHandReason_Claim             *       6
ModHandReason_Free              *       7
XOS_Claim                       *       &2001F
XOS_Release                     *       &20020
XOS_GenerateEvent               *       &20022
XOS_ReadEscapeState             *       &2002C
XOS_ServiceCall                 *       &20030
XOS_UpCall                      *       &20033
XOS_ReadMonotonicTime           *       &20042
XOS_AddCallBack                 *       &20054
XOS_ReadSysInfo                 *       &20058
XOS_RemoveCallBack              *       &2005F
XEconet_InetRxDirect            *       &6001D
XMessageTrans_FileInfo          *       &61500
XMessageTrans_OpenFile          *       &61501
XMessageTrans_Lookup            *       &61502
XMessageTrans_CloseFile         *       &61504
XPortable_Speed                 *       &62FC0
XPortable_ReadFeatures          *       &62FC5
XPortable_Idle                  *       &62FC6
XTaskWindow_TaskInfo            *       &63380
d85 3
a87 3
        LDM$cond.FD   sp!,{$regs,pc}^
        |
        LDM$cond.FD   sp!,{$regs,pc}
d145 1
a145 1
        STMFD   sp!,{v1-v4,lr}
d151 1
a151 1
        LDMRet  "v1-v4",VS
d156 1
a156 1
        LDMRet  "v1-v4"
d168 1
a168 1
        STMFD   sp!,{v1,lr}
d174 1
a174 1
        LDMRet  "v1"
d188 1
a188 1
        STMFD   sp!,{v1,lr}
d195 1
a195 1
        LDMRet  "v1"
d202 3
a204 3
        STMFD   sp!,{a1-a4,v1-v6,lr}
        LDMFD   sp!,{a3-a4,v1,v2}
        STMFD   sp!, {ip}
d209 1
a209 1
        LDMFD   sp!, {ip}
d215 1
a215 1
        LDMRet  "v1-v6"
d220 2
a221 2
        STMFD   sp!,{a1-a4,v1-v6,lr}
        LDMFD   sp!,{a3-a4,v1,v2}
d227 1
a227 1
        LDMRet  "v1-v6"
d232 1
a232 1
        STMFD   sp!,{v1-v6,lr}
d240 1
a240 1
        LDMRet  "v1-v6"
d245 1
a245 1
        STMFD   sp!,{v1-v2,lr}
d254 1
a254 1
        LDMRet  "v1-v2"
d337 1
a337 1
        STMFD   sp!,{v1-v3,lr}
d341 1
a341 1
        LDMRet  "v1-v3"
d363 1
a363 1
        STMFD   sp!,{v1,lr}
d367 1
a367 1
        LDMRet  "v1"
d372 1
a372 1
        STMFD   sp!,{v1,lr}
d377 1
a377 1
        LDMRet  "v1"
a389 4
PortableFeature_Speed           *       1 :SHL: 0
PortableFeature_Idle            *       1 :SHL: 4
PortableFeature_Stop            *       1 :SHL: 5

@


4.11
log
@Removed escape acknowledgement again.

This was a bad solution to the problem - acknowledging the escape says that
the module has dealt with it and the calling environment shouldn't take
escape actions. The C library is broken in that when the escape condition
is cleared/acknowledged, it still proceeds to call its SIGINT handler.
Compare this to the correct behaviour of the BASIC run-time; the problem
was originally noticed when calling *Debug, which you have to press Escape
to exit, and it acknowledges that escape, but C still throws SIGINT. When
the C library is fixed (as it shortly will be), if the Internet module
acknowledges escapes, socket calls will return EINTR but not actually
generate SIGINT.

The change was originally made for NFS, whose central code (in common with
most Unix code) retried calls returning EINTR. The problem was that the
escape condition remained unacknowledged so it got stuck in an infinite
loop. The correct fix will be to make sure that any supervisor mode code
such as NFS making blocking socket calls takes appropriate action when EINTR
is returned, or ensures that escape is disabled. Until it is fixed, NFS will
show lock-up symptoms again with this module. Applications will function as
expected, as the C run-time will call the SIGINT handler on exit from the
socket SWI (and acknowledge the escape) - if the signal handler returns the
foreground code can retry the call.

Version 5.45. Tagged as 'Internet-5_45'
@
text
@d16 7
a22 7
XOS_Word			*	&20007
XOS_Module			*	&2001E
ModHandReason_Claim		*	6
ModHandReason_Free		*	7
XOS_Claim			*	&2001F
XOS_Release			*	&20020
XOS_GenerateEvent		*	&20022
d24 24
a47 24
XOS_ServiceCall			*	&20030
XOS_UpCall			*	&20033
XOS_ReadMonotonicTime		*	&20042
XOS_AddCallBack			*	&20054
XOS_ReadSysInfo			*	&20058
XOS_RemoveCallBack		*	&2005F
XEconet_InetRxDirect		*	&6001D
XMessageTrans_FileInfo		*	&61500
XMessageTrans_OpenFile		*	&61501
XMessageTrans_Lookup		*	&61502
XMessageTrans_CloseFile		*	&61504
XPortable_Speed			*	&62FC0
XPortable_ReadFeatures		*	&62FC5
XPortable_Idle			*	&62FC6
XTaskWindow_TaskInfo		*	&63380
XMbuf_OpenSession		*	&6A580
XMbuf_CloseSession		*	&6A581
XMbuf_Control			*	&6A584

Service_EnumerateNetworkDrivers	*	&9B
Service_DCIProtocolStatus	*	&9F
Service_InternetStatus		*	&B0
InternetStatus_AddressChanged	*	0
InternetStatus_InterfaceUpDown	*	2
d53 10
a62 10
	EXPORT	mbuf_open_session
	EXPORT	mbufcontrol_version
	EXPORT	mbuf_close_session
	EXPORT	messagetrans_file_info
	EXPORT	messagetrans_open_file
	EXPORT	messagetrans_lookup
	EXPORT	messagetrans_close_file
	EXPORT	service_dci_protocol_status
	EXPORT	service_internetstatus_address_changed
	EXPORT	service_internetstatus_interface_updown
d67 17
a83 17
	EXPORT	service_enumerate_network_drivers
	EXPORT	osmodule_free
	EXPORT	osmodule_claim
	EXPORT	os_read_monotonic_time
	EXPORT	os_generate_event
	EXPORT	os_claim
	EXPORT	os_release
	EXPORT	os_add_call_back
	EXPORT	os_remove_call_back
	EXPORT	taskwindow_task_info
	EXPORT	os_upcall
	EXPORT	econet_inet_rx_direct
	EXPORT	osreadsysinfo_hardware0
	EXPORT	osreadsysinfo_machineid
	EXPORT	osword_read_realtime
	EXPORT	portable_read_features
	EXPORT	portable_idle
d104 1
a104 1
	AREA	swiveneers,CODE,READONLY,PIC
d107 1
a107 1
	ROUT
d109 3
a111 3
	MOV	ip,lr
	SWI	XMbuf_OpenSession
	MOVVC	a1,#0
d115 1
a115 1
	ROUT
d117 1
a117 1
	MOV	ip,lr
d119 8
a126 8
	MOV	a1,#0
	SWI	XMbuf_Control
	BVS	%F01
	LDR	lr,[sp]
	TEQS	lr,#0
	STRNE	a1,[lr]
	MOV	a1,#0
01	ADD	sp,sp,#4
d130 1
a130 1
	ROUT
d132 3
a134 3
	MOV	ip,lr
	SWI	XMbuf_CloseSession
	MOVVC	a1,#0
d138 1
a138 1
	ROUT
d140 4
a143 4
	MOV	ip,lr
	MOV	a2,a1
	SWI	XMessageTrans_FileInfo
	MOVVC	a1,#0
d147 1
a147 1
	ROUT
d149 3
a151 3
	MOVS	ip,lr
	SWI	XMessageTrans_OpenFile
	MOVVC	a1,#0
d155 1
a155 1
	ROUT
d157 7
a163 7
	MOV	ip,sp
	STMFD	sp!,{v1-v4,lr}
	MOV	v1,#0
	MOV	v2,#0
	MOV	v3,#0
	MOV	v4,#0
	SWI	XMessageTrans_Lookup
d165 4
a168 4
	LDR	lr,[ip]
	TEQS	lr,#0
	STRNE	a3,[lr]
	MOV	a1,#0
d172 1
a172 1
	ROUT
d174 2
a175 2
	MOVS	ip,lr
	SWI	XMessageTrans_CloseFile
d179 1
a179 1
	ROUT
d181 6
a186 6
	STMFD	sp!,{v1,lr}
	MOV	v1,a4
	MOV	a4,a3
	MOV	a3,a2
	MOV	a2,#Service_DCIProtocolStatus
	SWI	XOS_ServiceCall
d190 1
a190 1
	ROUT
d192 4
a195 4
	MOV	ip,lr
	MOV	a1,#InternetStatus_AddressChanged
	MOV	a2,#Service_InternetStatus
	SWI	XOS_ServiceCall
d199 1
a199 1
	ROUT
d201 7
a207 7
	STMFD	sp!,{v1,lr}
	MOV	v1,a3
	MOV	a4,a2
	MOV	a3,a1
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_InterfaceUpDown
	SWI	XOS_ServiceCall
d212 1
a212 1
	ROUT
d214 14
a227 14
	MOV	ip, sp
	STMFD	sp!,{a1-a4,v1-v6,lr}
	LDMFD	sp!,{a3-a4,v1,v2}
	STMFD	sp!, {ip}
        LDR	v3, [ip]
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_DynamicBootStart
	SWI	XOS_ServiceCall
	LDMFD	sp!, {ip}
	LDR	a4, [ip, #4]
	STRVC	a3, [a4]
	MOVVS	a1, #0
	STRVS	a1, [a4]
	MOVVC	a1, a2
d231 1
a231 1
	ROUT
d233 7
a239 7
	STMFD	sp!,{a1-a4,v1-v6,lr}
	LDMFD	sp!,{a3-a4,v1,v2}
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_DynamicBootReply
	SWI	XOS_ServiceCall
	MOVVS	a1, #Service_InternetStatus
	MOVVC	a1, a2
d243 1
a243 1
	ROUT
d245 8
a252 8
	STMFD	sp!,{v1-v6,lr}
	MOV	a4, a2
	MOV	a3, a1
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_DynamicBootReply
	SWI	XOS_ServiceCall
	MOVVS	a1, #Service_InternetStatus
	MOVVC	a1, a2
d256 1
a256 1
	ROUT
d258 1
a258 1
	STMFD	sp!,{v1-v2,lr}
d263 4
a266 4
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_DuplicateIPAddress
	SWI	XOS_ServiceCall
	MOVVC	a1, a2
d270 1
a270 1
	ROUT
d272 7
a278 7
	MOV	ip,lr
	MOV	a4,a1
	MOV	a1,#0
	MOV	a2,#Service_EnumerateNetworkDrivers
	SWI	XOS_ServiceCall
	STRVC	a1,[a4]
	MOVVC	a1,#0
d282 1
a282 1
	ROUT
d284 6
a289 6
	MOV	ip,lr
	MOV	a4,a1
	MOV	a1,#ModHandReason_Claim
	SWI	XOS_Module
	MOVVC	a1,a3
	MOVVS	a1,#0
d293 1
a293 1
	ROUT
d295 4
a298 4
	MOV	ip,lr
	MOV	a3,a1
	MOV	a1,#ModHandReason_Free
	SWI	XOS_Module
d302 1
a302 1
	ROUT
d304 2
a305 2
	MOV	ip,lr
	SWI	XOS_ReadMonotonicTime
d309 1
a309 1
	ROUT
d311 3
a313 3
	MOV	ip,lr
	SWI	XOS_GenerateEvent
	MOVVC	a1,#0
d317 1
a317 1
	ROUT
d319 3
a321 3
	MOV	ip,lr
	SWI	XOS_Claim
	MOVVC	a1,#0
d325 1
a325 1
	ROUT
d327 2
a328 2
	MOV	ip,lr
	SWI	XOS_Release
d332 1
a332 1
	ROUT
d334 3
a336 3
	MOV	ip,lr
	SWI	XOS_AddCallBack
	MOVVC	a1,#0
d340 1
a340 1
	ROUT
d342 2
a343 2
	MOV	ip,lr
	SWI	XOS_RemoveCallBack
d347 1
a347 1
	ROUT
d349 5
a353 5
	MOV	ip,sp
	STMFD	sp!,{v1-v3,lr}
	LDMIA	ip,{v1-v3}
	SWI	XEconet_InetRxDirect
	MOV	a1,a2
d357 1
a357 1
	ROUT
d359 5
a363 5
	MOV	ip,lr
	MOV	a4,a2
	SWI	XTaskWindow_TaskInfo
	STRVC	a1,[a4]
	MOVVC	a1,#0
d367 1
a367 1
	ROUT
d369 2
a370 2
	MOV	ip,lr
	SWI	XOS_UpCall
d374 1
a374 1
	ROUT
d376 4
a379 4
	STMFD	sp!,{v1,lr}
	MOV	a1,#2
	SWI	XOS_ReadSysInfo
	MOVVS	a1,#0
d383 1
a383 1
	ROUT
d385 5
a389 5
	STMFD	sp!,{v1,lr}
	MOV	ip,a1
	MOV	a1,#2
	SWI	XOS_ReadSysInfo
	STMVCIA	ip,{a4,v1}
d393 1
a393 1
	ROUT
d395 6
a400 6
	MOV	ip,lr
	MOV	a2,a1
	MOV	a1,#14
	MOV	lr,#3
	STRB	lr,[a2]
	SWI	XOS_Word
d408 1
a408 1
	ROUT
d410 9
a418 9
	MOV	ip,lr
	SWI	XPortable_ReadFeatures		; Returns features mask in R1
	BVC	%FT01
	MOV	a1,#0				; Not available - may be an A4.
	MVN	a2,#0				; See if we have Portable_Speed.
	SWI	XPortable_Speed
	MOVVC	a2,#PortableFeature_Speed
	MOVVS	a2,#0
01	MOV	a1,a2
d422 1
a422 1
	ROUT
d424 2
a425 2
	MOV	ip,lr
	SWI	XPortable_Idle
d437 1
a437 1
	END
@


4.10
log
@  Econet_InetRxDirect interface extended.
Detail:
  Previously, the SWI didn't care about any return values. The Internet
  module would either free the MBuf passed or send it on to the socket,
  depending on the value of m_len on exit from the SWI. This still works,
  but SWI handlers can now set R1 to zero on exit to claim ownership of
  the MBuf. In this case, the item is neither freed nor passed on to the
  socket, and the new owner must be very careful to make sure that they
  do an appropriate m_free later.
Admin:
  This change was implemented to allow UDPV to point the MPEG system
  directly to the data in the MBuf chains it was passed rather than taking
  a local copy. It has been tested with both new and old UDPV versions and
  both work as expected. Note that any module using the new interface will
  absolutely require it to be present (new UDPV modules built to use the
  interface extension will refuse to start if Internet is too old).

Version 5.44. Tagged as 'Internet-5_44'
@
text
@a84 1
        EXPORT  osbyte_acknowledge_escape
a434 8
        MOVRet  ip

; void osbyte_acknowledge_escape(void)
        ROUT
osbyte_acknowledge_escape
        MOV     ip,lr
        MOV     a1,#126
        SWI     XOS_Byte
@


4.9
log
@Restored DELAY_EVENTS functionality.

Detail:
VideoControl was having a nasty reentrancy problem inside its event handler;
we've been sending out events at points where a BSD Unix system wouldn't and
exposing a number of potential problems. Fixed by restoring the delayed event
scheme used in earlier versions of Internet 5, but with an extra event send
inside the packet input loop which should alleviate the high load problems
seen with the NEC video client.

Seems to work fine, but we've been unable to get the NEC video client to
work at all, let alone test it on this Internet module. Doesn't matter for
now because we're not shipping it :)

Version 5.43. Tagged as 'Internet-5_43'
@
text
@d347 1
a347 1
; void econet_inet_rx_direct(int, int, int, int, int, int, int)
d354 1
@


4.8
log
@Now 32-bit compatible, in a suitable build environment. In the standard
26-bit build environment it is unchanged, except for a fix in the "Module
Internet cannot be RAM loaded" checker.

Version 5.38. Tagged as 'Internet-5_38'
@
text
@d15 1
d23 1
d84 2
d426 17
@


4.7
log
@Added power-saving - calls Portable_Idle when waiting for a network operation
to complete.

Version 5.37. Tagged as 'Internet-5_37'
@
text
@d83 18
d109 1
a109 1
	MOVS	pc,ip
d115 1
a115 1
	STMFD	sp!,{a1}
d124 1
a124 1
	MOVS	pc,ip
d132 1
a132 1
	MOVS	pc,ip
d141 1
a141 1
	MOVS	pc,ip
d149 1
a149 1
	MOVS	pc,ip
d161 1
a161 1
	LDMVSFD	sp!,{v1-v4,pc}^
d166 1
a166 1
01	LDMFD	sp!,{v1-v4,pc}^
d173 1
a173 1
	MOVS	pc,ip
d184 1
a184 1
	LDMFD	sp!,{v1,pc}^
d193 1
a193 1
	MOVS	pc,ip
d205 1
a205 1
	LDMFD	sp!,{v1,pc}^
d225 1
a225 1
	LDMFD	sp!,{v1-v6,pc}^
d237 1
a237 1
	LDMFD	sp!,{v1-v6,pc}^
d250 1
a250 1
	LDMFD	sp!,{v1-v6,pc}^
d264 1
a264 1
	LDMFD	sp!,{v1-v2,pc}^
d276 1
a276 1
	MOVS	pc,ip
d287 1
a287 1
	MOVS	pc,ip
d296 1
a296 1
	MOVS	pc,ip
d303 1
a303 1
	MOVS	pc,ip
d311 1
a311 1
	MOVS	pc,ip
d319 1
a319 1
	MOVS	pc,ip
d326 1
a326 1
	MOVS	pc,ip
d334 1
a334 1
	MOVS	pc,ip
d341 1
a341 1
	MOVS	pc,ip
d350 1
a350 1
	LDMFD	sp!,{v1-v3,pc}^
d360 1
a360 1
	MOVS	pc,ip
d367 1
a367 1
	MOVS	pc,ip
d376 1
a376 1
	LDMFD	sp!,{v1,pc}^
d386 1
a386 1
	LDMFD	sp!,{v1,pc}^
d397 1
a397 1
	MOVS	pc,ip
d415 1
a415 1
	MOVS	pc,ip
d422 1
a422 1
	MOVS	pc,ip
@


4.6
log
@microtime() now returns microsecond accuracy.
Random number generator now seeded from microtime(), machine ID and
hardware addresses of DCI drivers.
Some previously untested debugging code fixed to compile.

Version 5.34. Tagged as 'Internet-5_34'
@
text
@d33 3
d80 2
d344 1
a344 1
; void os_upcall(int, volatile void *)
d380 26
a405 1
;
@


4.5
log
@Added Service_InternetStatus_DuplicateIPAddress to allow graceful behaviour
in the event of a DHCP address clash.
When configuring an interface as a result of DHCP/BOOTP - do a two stage
ARP transmission - first a "gentle" probe from 0.0.0.0 to check, then a
broadcast ARP reply to update everyone's ARP caches if there is no response.
If the probe shows a duplicate, the DHCP module can catch the service call
and send a DHCPDECLINE.
Changed to not respond to ICMP or ARP packets on an interface in the process
of DHCP/BOOTP/RevARP booting. Solves problem of DHCP server probing the
address it wants to give us and having us respond, making it think it's in
use.

Version 5.26. Tagged as 'Internet-5_26'
@
text
@d15 1
d17 1
d26 1
d64 1
d74 3
d255 11
d346 1
a346 3
	[ {TRUE}
	EXPORT osmodule_claim
; void *osmodule_claim(int size)
d348 20
a367 1
osmodule_claim
d369 5
a373 5
	MOV	a4,a1
	MOV	a1,#6
	SWI	XOS_Module
	MOVVC	a1,a3
	MOVVS	a1,#0
d375 1
a375 2
	]

@


4.4
log
@  Added new service call sub-reason code and support for DHCPINFORM.
  Bug fix for packet pointers.
Detail:
  A new flag has been introduced in the DHCP private ioctl interface
    to request that the Internet module does not fiddle with the
    addresses of interfaces but only sets the system variables in
    response to the content of the DHCPACK message.  The DHCP module
    will pass the DHCPACK message if and when it gets a response to
    an earlier DHCPINFORM that it originated.
  When the bootp_udp_input routine was split into two, the packet
    was passed as a pointer to the packet parser and one reference to
    &pkt hadn't been replaced with just pkt, hence completely wrong
    values were being passed around in the DynamicBootReply service
    call.
  The DynamicBootStart sub-reason code has also been modified to support
    claimers setting R2 to be the errno to be returned to the ioctl
    caller.  This means that modules such as DHCP can return errno
    values back via the Internet module instead of requiring clients to
    know to read the interface status from the DHCP module.
Admin:
  Requires TCPIPLibs 5.18 and later.
  Required by DHCP 0.05 and later.
  Required by IPConfig 0.19 and later.
  TCPIPLibs 5.18's LibraryDoc contains details of the service call.

Version 5.25. Tagged as 'Internet-5_25'
@
text
@d42 2
a43 1
InternetStatus_DynamicBootInform *       7
d58 1
d221 14
@


4.3
log
@  New service calls at the point of BOOTP requests and replies to allow
    external software to add things to requests and to extract answers
    from replies.
Detail:
  Prior to sending a request, InternetStatus_DynamicBootStart is issued.
    If this call is claimed, then the request is not placed on the network.
    When the reply comes back, Internet processes it as normal, sets the
    system variables it usually sets and then issues the service call
    InternetStatus_DynamicBootReply to allow other modules to extract any
    configuration that they want but that Internet does not know about.
    If the service call is claimed, Internet reprocesses the packet.
    RiscOS/Sources/Lib/TCPIPLibs/LibraryDoc contains full details.
Admin:
  Requires TCPIPLibs 5.06 or later
    (CVS: RiscOS/Sources/Lib/TCPIPLibs   tag: TCPIPLibs-5_06)

Version 5.19. Tagged as 'Internet-5_19'
@
text
@d42 1
d56 1
d175 2
a176 1
; int service_internetstatus_dynamicboot_start(const char *name, const void *dib, char *pkt, int len, int eoo)
d182 1
d187 3
d191 1
d200 13
@


4.2
log
@Version Spinner_B7 taken
@
text
@d40 2
d53 2
d172 26
@


4.1
log
@Initial revision
@
text
@d39 1
d50 1
d156 12
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.1.2.1
log
@Internet 5.04 merged from Internet 5.03 on Networking source tree with
Internet 4.08 BOOTP extensions from Spinner.
@
text
@a38 1
InternetStatus_InterfaceUpDown	*	2
a48 1
	EXPORT	service_internetstatus_interface_updown
a153 12

; void service_internetstatus_interface_updown(int state, const char *name, const void *dib)
	ROUT
service_internetstatus_interface_updown
	STMFD	sp!,{v1,lr}
	MOV	v1,a3
	MOV	a4,a2
	MOV	a3,a1
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_InterfaceUpDown
	SWI	XOS_ServiceCall
	LDMFD	sp!,{v1,pc}^
@
