head	4.2;
access;
symbols
	RO_5_07:4.2
	afrost_NC2_Generic:4.1.3.1
	afrost_Funai01-33:4.1.3.1
	Spinner_RCA116:4.1.3.1
	Spinner_B20_2:4.1.3.1
	Spinner_19_3:4.1.3.1
	Spinner_B18:4.1.3.1
	Spinner_B17:4.1.3.1
	Spinner_B15:4.1.3.1
	Spinner_B14:4.1.3.1
	Spinner_B13:4.1.3.1
	Spinner_B12:4.1.3.1
	Spinner_B10:4.1.3.1
	Spin_merge:4.1.3.1
	Spinner_B7:4.1.3.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.2
date	97.04.11.10.07.09;	author kbracey;	state dead;
branches;
next	4.1;

4.1
date	96.11.05.22.30.45;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.05.22.30.45;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Internet 5.04 merged from Internet 5.03 on Networking source tree with
Internet 4.08 BOOTP extensions from Spinner.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "kernel.h"
#include "swis.h"
#include "sys/types.h"
#include "sys/dcistructs.h"
#include "sys/mbuf.h"

_kernel_oserror *mbuf_open_session(struct mbctl *mc)
{
    _swix(Mbuf_OpenSession, _IN(0), mc);
    return 0;
}

_kernel_oserror *mbufcontrol_version(int *version_out)
{
    _swix(Mbuf_Control, _IN(0)|_OUT(0), 0, version_out);
    return 0;
}

_kernel_oserror *mbuf_close_session(struct mbctl *mc)
{
    _swix(Mbuf_CloseSession, _IN(0), mc);
    return 0;
}

_kernel_oserror *messagetrans_file_info(const char *filename)
{
    return _swix(MessageTrans_FileInfo, _IN(1), filename);
}

_kernel_oserror *messagetrans_open_file(u_long *fd, const char *filename, char *buffer)
{
    return _swix(MessageTrans_OpenFile, _INR(0,2), fd, filename, buffer);
}

_kernel_oserror *messagetrans_lookup(u_long *fd, const char *token, char *buffer, int size, char **result)
{
    return _swix(MessageTrans_Lookup, _INR(0,7)|_OUT(2),
                                      fd, token, buffer, result,
                                      0, 0, 0, 0,
                                      result);
}

void messagetrans_close_file(u_long *fd)
{
    _swix(MessageTrans_CloseFile, _IN(0), fd);
}

void service_dci_protocol_status(void *wsp, int status, int ver, const char *title)
{
    _swix(OS_ServiceCall, _INR(0,4), wsp, Service_DCIProtocolStatus, status, ver, title);
}

void service_internetstatus_address_changed(void)
{
    _swix(OS_ServiceCall, _INR(0,1), InternetStatus_AddressChanged, Service_InternetStatus);
}

void service_enumerate_network_drivers(ChDibRef *chd)
{
    _swix(OS_ServiceCall, _INR(0,1)|_OUT(0), 0, Service_EnumerateNetworkDrivers, chd);
}

void osmodule_free(void *p)
{
    _swix(OS_Module, _IN(0)|_IN(2), 7, p);
}

u_long os_read_monotonic_time(void)
{
    int a;
    _swix(OS_ReadMonotonicTime, _OUT(0), &a);
    return a;
}

_kernel_oserror *os_generate_event(int a, int b, int c, int d)
{
    return _swix(OS_GenerateEvent, _INR(0,3), a, b, c, d);
}

_kernel_oserror *os_claim(int n, int (*fun)(), void *h)
{
    return _swix(OS_Claim, _INR(0,2), n, fun, h);
}

_kernel_oserror *os_release(int n, int (*fun)(), void *h)
{
    return _swix(OS_Release, _INR(0,2), n, fun, h);
}

_kernel_oserror *os_add_call_back(int (*fun)(), void *h)
{
    return _swix(OS_AddCallBack, _INR(0,1), fun, h);
}

_kernel_oserror *os_remove_call_back(int (*fun)(), void *h)
{
    return _swix(OS_RemoveCallBack, _INR(0,1), fun, h);
}

void econet_inet_rx_direct(int a, int b, int c, int d, int e, int f, int g)
{
    _swix(Econet_InetRxDirect, _INR(0,6), a, b, c, d, e, f, g);
}

_kernel_oserror *taskwindow_task_info(int a, int *b)
{
    return _swix(TaskWindow_TaskInfo, _IN(0)|_OUT(0), a, b);
}

void os_upcall(int a, volatile void *p)
{
    _swix(OS_UpCall, _INR(0,1), a, p);
}
@


4.1
log
@Initial revision
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
