head	1.9;
access;
symbols
	VFPSupport-0_13:1.9
	VFPSupport-0_12:1.8
	VFPSupport-0_11:1.7
	VFPSupport-0_10:1.6
	VFPSupport-0_09:1.5
	VFPSupport-0_08:1.4
	VFPSupport-0_07:1.3
	VFPSupport-0_06:1.2
	VFPSupport-0_05:1.1;
locks; strict;
comment	@# @;


1.9
date	2018.02.20.00.23.45;	author jlee;	state Exp;
branches;
next	1.8;
commitid	ZRXEvgsdnifZYwrA;

1.8
date	2017.02.20.20.54.29;	author jlee;	state Exp;
branches;
next	1.7;
commitid	ti7rjotWgWqBwJGz;

1.7
date	2016.02.29.10.03.57;	author bavison;	state Exp;
branches;
next	1.6;
commitid	i11A9M0H6ZMToNWy;

1.6
date	2015.02.08.22.44.37;	author jlee;	state Exp;
branches;
next	1.5;
commitid	1KgrX5G5wgC61g9y;

1.5
date	2015.02.03.21.34.42;	author jlee;	state Exp;
branches;
next	1.4;
commitid	ZLCfp0zBOKH5NB8y;

1.4
date	2014.11.02.14.50.13;	author jlee;	state Exp;
branches;
next	1.3;
commitid	n6rHhGXFjGaFxCWx;

1.3
date	2014.10.25.08.36.04;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	aw8RNXgmLClgJyVx;

1.2
date	2014.02.08.15.27.24;	author jlee;	state Exp;
branches;
next	1.1;
commitid	x9VDVmUDNhCwkjox;

1.1
date	2014.02.08.14.50.32;	author jlee;	state Exp;
branches;
next	;
commitid	K7Sd3I9WjpbR7jox;


desc
@@


1.9
log
@Add support for reporting the ARMv8 MVFR2 register. Improve safety of context switches.
Detail:
  hdr/VFPSupport - Define VFPSupport_Features reason code 3, for reading extra feature registers
  s/Macros - Use ELIF to shorten myVMRS & myVMSR macros. Add MVFR2 support to myVMRS.
  s/Module - Implement VFPSupport_Features 3, for reading MVFR2 (and three other values reserved for future proofing). Since there doesn't seem to be an easy way of detecting the presence of MVFR2, we fall back on a list of known-good FPSID values, like with MVFR0/MVFR1 on pre-VFPv3 systems. Also update VFPSupport_ChangeContext to do a dummy load from the new VFP context, to help trap bad contexts before we've updated our state to indicate that that context is active.
  Test/features,ffb - Add VFPSupport_Features 3 output
Admin:
  Tested on Raspberry Pi 1, 2, 3


Version 0.13. Tagged as 'VFPSupport-0_13'
@
text
@/* (0.13)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.13
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                20 Feb 2018

#define Module_MajorVersion             "0.13"
#define Module_Version                  13
#define Module_MinorVersion             ""
#define Module_Date                     "20 Feb 2018"

#define Module_ApplicationDate          "20-Feb-18"

#define Module_ComponentName            "VFPSupport"
#define Module_ComponentPath            "mixed/RiscOS/Sources/HWSupport/VFPSupport"

#define Module_FullVersion              "0.13"
#define Module_HelpVersion              "0.13 (20 Feb 2018)"
#define Module_LibraryVersionInfo       "0:13"
@


1.8
log
@Don't claim to support software emulation of short vectors if the FPSCR doesn't implement the LEN/STRIDE fields
Detail:
  In ARMv8, VFP short vectors are completely obsolete, to the point where implementations aren't even required to implement the FPSCR fields that control their operation.
  Our software short vector emulation relies on the hardware taking the undefined instruction vector when a VFP data processing op is executed with the LEN/STRIDE fields set to non-zero values; if those fields are hard-wired to zero then our emulation can never be run.
  File changes:
  - s/Module - Check whether FPSCR LEN+STRIDE fields are implemented before deciding whether to install the short vector support code
  - Test/test7,ffb - Refuse to run if short vectors aren't supported (whether hardware or software). Bail out early if we spot an FPSCR inconsistency.
Admin:
  Tested on Cortex-A53, Cortex-A7


Version 0.12. Tagged as 'VFPSupport-0_12'
@
text
@d1 1
a1 1
/* (0.12)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.12
d9 1
a9 1
#define Module_Date_CMHG                20 Feb 2017
d11 2
a12 2
#define Module_MajorVersion             "0.12"
#define Module_Version                  12
d14 1
a14 1
#define Module_Date                     "20 Feb 2017"
d16 1
a16 1
#define Module_ApplicationDate          "20-Feb-17"
d21 3
a23 3
#define Module_FullVersion              "0.12"
#define Module_HelpVersion              "0.12 (20 Feb 2017)"
#define Module_LibraryVersionInfo       "0:12"
@


1.7
log
@  Support ARMv8 (and potentially some ARMv7) cores.
Detail:
  Replace conditionally executed undefined instructions with branches over
  on opposite condition.
Admin:
  Tested on Raspberry Pi 3.

Version 0.11. Tagged as 'VFPSupport-0_11'
@
text
@d1 1
a1 1
/* (0.11)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.11
d9 1
a9 1
#define Module_Date_CMHG                29 Feb 2016
d11 2
a12 2
#define Module_MajorVersion             "0.11"
#define Module_Version                  11
d14 1
a14 1
#define Module_Date                     "29 Feb 2016"
d16 1
a16 1
#define Module_ApplicationDate          "29-Feb-16"
d21 3
a23 3
#define Module_FullVersion              "0.11"
#define Module_HelpVersion              "0.11 (29 Feb 2016)"
#define Module_LibraryVersionInfo       "0:11"
@


1.6
log
@Add support for Cortex-A7 & Cortex-A15 FPUs. Add short vector mode emulation for Cortex-A7, A9, A15
Detail:
  Makefile - Simplify decision about whether to include support code. More hardware needs it than not, so have a list of machine types which don't need it rather than a list of machine types which do.
  hdr/VFPSupport - Add definitions for new VFPSupport_Features reason code
  hdr/shared - Add some comments for extra clarity
  s/Instructions - Add support for emulating VFPv3 'VMOV immediate' instruction
  s/Module - Update hardware detection & support handlers to deal with Cortex-A7, Cortex-A9 and Cortex-A15, all of which report different subarchitectures and differ in method of reporting exceptions despite the fact they basically all have the same requirements as far as support code is concerned (support code only required if we want short vector emulation). Implement the new VFPSupport_Features reason code, which returns information about whether short vectors are supported.
  s/SupportCode - Extend support code to cope with Cortex-A7, A9, A15 & VMOV imm emulation.
  Test/features,ffb - Simple test of VFPSupport_Features SWI
  Test/test7,ffb - Test for VFPv3 'VMOV immediate' handling in scalar & vector mode (HW scalar implementation tested against SW vector implementation)
Admin:
  Tested on ARM1176JZF-S, Cortex-A7, Cortex-A8, Cortex-A9
  Cortex-A15 supported tested 'in theory' by forcing appropriate support code to be installed on Cortex-A9


Version 0.10. Tagged as 'VFPSupport-0_10'
@
text
@d1 1
a1 1
/* (0.10)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.10
d9 1
a9 1
#define Module_Date_CMHG                08 Feb 2015
d11 2
a12 2
#define Module_MajorVersion             "0.10"
#define Module_Version                  10
d14 1
a14 1
#define Module_Date                     "08 Feb 2015"
d16 1
a16 1
#define Module_ApplicationDate          "08-Feb-15"
d21 3
a23 3
#define Module_FullVersion              "0.10"
#define Module_HelpVersion              "0.10 (08 Feb 2015)"
#define Module_LibraryVersionInfo       "0:10"
@


1.5
log
@Fix Raspberry Pi build to include (VFPv2) support code
Detail:
  Makefile - Update makefile to correctly detect the new RPi machine type as needing support code
Admin:
  Tested on Raspberry Pi model B


Version 0.09. Tagged as 'VFPSupport-0_09'
@
text
@d1 1
a1 1
/* (0.09)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.09
d9 1
a9 1
#define Module_Date_CMHG                03 Feb 2015
d11 2
a12 2
#define Module_MajorVersion             "0.09"
#define Module_Version                  9
d14 1
a14 1
#define Module_Date                     "03 Feb 2015"
d16 1
a16 1
#define Module_ApplicationDate          "03-Feb-15"
d21 3
a23 3
#define Module_FullVersion              "0.09"
#define Module_HelpVersion              "0.09 (03 Feb 2015)"
#define Module_LibraryVersionInfo       "0:9"
@


1.4
log
@Disable compiler bug workarounds when using latest compiler version
Detail:
  softfloat/softfloat-macros, softfloat/c/softfloat - The latest version of norcroft fixes the compiler bugs that have workarounds for here. So, insert a version check so that the workarounds are only used on old compiler versions.
Admin:
  Tested on Raspberry Pi
  VFP build of testfloat passes all tests at -level 2


Version 0.08. Tagged as 'VFPSupport-0_08'
@
text
@d1 1
a1 1
/* (0.08)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.08
d9 1
a9 1
#define Module_Date_CMHG                02 Nov 2014
d11 2
a12 2
#define Module_MajorVersion             "0.08"
#define Module_Version                  8
d14 1
a14 1
#define Module_Date                     "02 Nov 2014"
d16 1
a16 1
#define Module_ApplicationDate          "02-Nov-14"
d21 3
a23 3
#define Module_FullVersion              "0.08"
#define Module_HelpVersion              "0.08 (02 Nov 2014)"
#define Module_LibraryVersionInfo       "0:8"
@


1.3
log
@Build fix
Update for BuildSys-6_60. No need to force things in ModuleLibs to blank now.

Version 0.07. Tagged as 'VFPSupport-0_07'
@
text
@d1 1
a1 1
/* (0.07)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.07
d9 1
a9 1
#define Module_Date_CMHG                25 Oct 2014
d11 2
a12 2
#define Module_MajorVersion             "0.07"
#define Module_Version                  7
d14 1
a14 1
#define Module_Date                     "25 Oct 2014"
d16 1
a16 1
#define Module_ApplicationDate          "25-Oct-14"
d21 3
a23 3
#define Module_FullVersion              "0.07"
#define Module_HelpVersion              "0.07 (25 Oct 2014)"
#define Module_LibraryVersionInfo       "0:7"
@


1.2
log
@Add VFPv2 support code
Detail:
  This update adds the support code necessary to allow the VFPv2 coprocessor in the Raspberry Pi to be used in its full IEEE-compliant mode, and to add support for the generation of errors on VFP match exceptions (division by zero, etc.)
  SoftFloat Release 2b (http://www.jhauser.us/arithmetic/SoftFloat.html) is used to perform the floating point calculations in software, ensuring their accuracy.
  As with FPEmulator, the support code will only be included on machines which require it; at the moment this decision is handled by the makefile, based around the target machine type.
  Note that the current version of the support code does not implement default NaN or flush-to-zero mode, so it is not a fully accurate emulation of the hardware.
  Also added a new SWI, VFPSupport_ExceptionDump, for creating and reading a VFP context exception dump, and a new reason code to VFPSupport_Features to query which exception enable bits are supported
  File changes:
  - Makefile - Rewritten to use the CModule fragment, and to add the necessary rules for (optionally) building the support code.
  - Licences - File summarising the different licences used by different portions of the code
  - Test/test2c,ffb, Test/test3,ffb, Test/test4,ffb, Test/test5,ffb, Test/test6src,ffb - Several test programs for validating behaviour of the support code, mainly focused around unusual causes of exceptions and validating instruction decoding and short vector support
  - actions/ARMv7_VFP, arctions/common, c/head, cache/classify - decgen files for building the instruction decoder. This decoder is only used for synchronous exceptions, to determine whether the instruction is or isn't a valid VFP instruction. Asynchronous exceptions utilise a simpler, hand-crafted decoder in the assembler sources.
  - h/classify - Header for the decgen decoder
  - hdr/shared - Header with some definitions shared between the C and assembler sources (will be Hdr2H'd to generate the C header)
  - hdr/VFPSupport - Updated with new error numbers, SWI definitions
  - s/CSupport - Math support functions from the C library sources, required by SoftFloat
  - s/Errors - Added new error definitions
  - s/GetAll - Include support code if necessary. Add debug switch, plus optimisation switch for machines with 16 D registers
  - s/Instructions - Core data processing instruction emulation code. This file is included twice, once for single precision and once for double precision. The code calls through to the SoftFloat routines to perform the calculations.
  - s/Module - Adjust handling of undefined instruction vector to allow the support code to be installed instead of OldHandler if necessary. Initialise the support code as necessary. Add new SWIs & reason codes.
  - s/SupportCode - Undefined instruction handler which controls the rest of the support code. Also raises RISC OS errors as necessary (division by zero, etc.)
  - softfloat/* - The SoftFloat library sources. It's been tweaked in a few places for integration with the assembler support code, but otherwise no changes to the core logic were necessary.
  - Resources/UK/Messages - Updated with new error text
Admin:
  Tested on Raspberry Pi & BB-xM
  Support code tested using the supplied test routines and the TestFloat tool (http://www.jhauser.us/arithmetic/TestFloat.html)


Version 0.06. Tagged as 'VFPSupport-0_06'
@
text
@d1 1
a1 1
/* (0.06)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.06
d9 1
a9 1
#define Module_Date_CMHG                08 Feb 2014
d11 2
a12 2
#define Module_MajorVersion             "0.06"
#define Module_Version                  6
d14 1
a14 1
#define Module_Date                     "08 Feb 2014"
d16 1
a16 1
#define Module_ApplicationDate          "08-Feb-14"
d21 3
a23 3
#define Module_FullVersion              "0.06"
#define Module_HelpVersion              "0.06 (08 Feb 2014)"
#define Module_LibraryVersionInfo       "0:6"
@


1.1
log
@Move VFPSupport to 'mixed' folder
Detail:
  This is a copy of VFPSupport-0_05 from bsd/RiscOS/Sources/HWSupport
  It's being moved to the 'mixed' folder as the next version will contain sources using several different licences
Admin:
  Untested


Version 0.05. Retagged as 'VFPSupport-0_05'
@
text
@d1 1
a1 1
/* (0.05)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.05
d9 1
a9 1
#define Module_Date_CMHG                19 Oct 2012
d11 2
a12 2
#define Module_MajorVersion             "0.05"
#define Module_Version                  5
d14 1
a14 1
#define Module_Date                     "19 Oct 2012"
d16 1
a16 1
#define Module_ApplicationDate          "19-Oct-12"
d19 1
a19 1
#define Module_ComponentPath            "bsd/RiscOS/Sources/HWSupport/VFPSupport"
d21 3
a23 3
#define Module_FullVersion              "0.05"
#define Module_HelpVersion              "0.05 (19 Oct 2012)"
#define Module_LibraryVersionInfo       "0:5"
@

