head	1.2;
access;
symbols
	VFPSupport-0_13:1.2
	VFPSupport-0_12:1.1
	VFPSupport-0_11:1.1
	VFPSupport-0_10:1.1
	VFPSupport-0_09:1.1
	VFPSupport-0_08:1.1
	VFPSupport-0_07:1.1
	VFPSupport-0_06:1.1
	VFPSupport-0_05:1.1;
locks; strict;
comment	@# @;


1.2
date	2018.02.20.00.23.54;	author jlee;	state Exp;
branches;
next	1.1;
commitid	ZRXEvgsdnifZYwrA;

1.1
date	2014.02.08.14.50.50;	author jlee;	state Exp;
branches;
next	;
commitid	K7Sd3I9WjpbR7jox;


desc
@@


1.2
log
@Add support for reporting the ARMv8 MVFR2 register. Improve safety of context switches.
Detail:
  hdr/VFPSupport - Define VFPSupport_Features reason code 3, for reading extra feature registers
  s/Macros - Use ELIF to shorten myVMRS & myVMSR macros. Add MVFR2 support to myVMRS.
  s/Module - Implement VFPSupport_Features 3, for reading MVFR2 (and three other values reserved for future proofing). Since there doesn't seem to be an easy way of detecting the presence of MVFR2, we fall back on a list of known-good FPSID values, like with MVFR0/MVFR1 on pre-VFPv3 systems. Also update VFPSupport_ChangeContext to do a dummy load from the new VFP context, to help trap bad contexts before we've updated our state to indicate that that context is active.
  Test/features,ffb - Add VFPSupport_Features 3 output
Admin:
  Tested on Raspberry Pi 1, 2, 3


Version 0.13. Tagged as 'VFPSupport-0_13'
@
text
@; 
; Copyright (c) 2010, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 

; Macros to make up for the fact that objasm doesn't support the required instructions yet

; Instruction Synchronisation Barrier - required on ARMv6+ to ensure the effects of the following are visible to following instructions:
; * Completed cache, TLB & branch predictor maintenance operations
; * CP14/CP15 writes
; This version will only work on ARMv6+!
        MACRO
        myISB $cond,$temp
       [ NoARMv7
        ; ARMv6 support required, use legacy MCR op
        MOV$cond $temp,#0
        MCR$cond p15,0,$temp,c7,c5,4
       |
        ; ARMv7+, use ISB instruction (saves on temp register, but instruction is unconditional)
        ; Shouldn't hurt too much if we just ignore the condition code
        DCI &F57FF06F ; ISB SY
       ]
        MEND

; VMRS
        MACRO
        myVMRS $cond,$reg,$fpreg
      [ "$fpreg" = "FPSID"
        MRC$cond p10,7,$reg,c0,c0,0
      ELIF "$fpreg" = "FPSCR"
        MRC$cond p10,7,$reg,c1,c0,0
      ELIF "$fpreg" = "MVFR2"
        MRC$cond p10,7,$reg,c5,c0,0
      ELIF "$fpreg" = "MVFR1"
        MRC$cond p10,7,$reg,c6,c0,0
      ELIF "$fpreg" = "MVFR0"
        MRC$cond p10,7,$reg,c7,c0,0
      ELIF "$fpreg" = "FPEXC"
        MRC$cond p10,7,$reg,c8,c0,0
      ELIF "$fpreg" = "FPINST"
        MRC$cond p10,7,$reg,c9,c0,0
      |
        ASSERT "$fpreg" = "FPINST2"
        MRC$cond p10,7,$reg,c10,c0,0
      ]
        MEND

; VMSR
        MACRO
        myVMSR $cond,$fpreg,$reg
      [ "$fpreg" = "FPSID"
        MCR$cond p10,7,$reg,c0,c0,0
      ELIF "$fpreg" = "FPSCR"
        MCR$cond p10,7,$reg,c1,c0,0
      ELIF "$fpreg" = "FPEXC"
        MCR$cond p10,7,$reg,c8,c0,0
      ELIF "$fpreg" = "FPINST"
        MCR$cond p10,7,$reg,c9,c0,0
      |
        ASSERT "$fpreg" = "FPINST2"
        MCR$cond p10,7,$reg,c10,c0,0
      ]
        MEND


        END
@


1.1
log
@Move VFPSupport to 'mixed' folder
Detail:
  This is a copy of VFPSupport-0_05 from bsd/RiscOS/Sources/HWSupport
  It's being moved to the 'mixed' folder as the next version will contain sources using several different licences
Admin:
  Untested


Version 0.05. Retagged as 'VFPSupport-0_05'
@
text
@d51 1
a51 1
 [ "$fpreg" = "FPSID"
d53 1
a53 2
 |
  [ "$fpreg" = "FPSCR"
d55 3
a57 2
  |
   [ "$fpreg" = "MVFR1"
d59 1
a59 2
   |
    [ "$fpreg" = "MVFR0"
d61 1
a61 2
    |
     [ "$fpreg" = "FPEXC"
d63 1
a63 2
     |
      [ "$fpreg" = "FPINST"
a68 5
     ]
    ]
   ]
  ]
 ]
d74 1
a74 1
   [ "$fpreg" = "FPSID"
d76 1
a76 2
   |
    [ "$fpreg" = "FPSCR"
d78 1
a78 2
    |
     [ "$fpreg" = "FPEXC"
d80 1
a80 2
     |
      [ "$fpreg" = "FPINST"
a85 3
     ]
    ]
   ]
@

