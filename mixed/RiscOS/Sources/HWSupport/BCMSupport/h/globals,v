head	1.1;
access;
symbols
	BCMSupport-0_08:1.1
	BCMSupport-0_07:1.1
	BCMSupport-0_06:1.1
	BCMSupport-0_05:1.1
	BCMSupport-0_04:1.1
	BCMSupport-0_03:1.1;
locks; strict;
comment	@# @;


1.1
date	2016.03.25.20.10.43;	author jlee;	state Exp;
branches;
next	;
commitid	sX9Z7lEzyKL7X30z;


desc
@@


1.1
log
@Implement BCMSupport module
Detail:
  The BCMSupport module provides the following functionality:
  * A SWI interface which allows multiple clients to send and receive messages via the ARM<->GPU mailbox
  * A higher-level SWI interface to make dealing with the mailbox property interface easier
  * A CPU clock device for controlling the ARM clock rate and measuring the SoC temperature
  The implementation is mostly in C and aims to be thread/multicore safe
Admin:
  Tested on Raspberry Pi 1B/2B/3B


Version 0.03. Tagged as 'BCMSupport-0_03'
@
text
@/*
 * Copyright (c) 2016, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef GLOBALS_H
#define GLOBALS_H

#include <stdint.h>
#include <stdbool.h>

#include "DebugLib/DebugLib.h"
#include "SyncLib/synclib.h"
#include "toolbox.h"

#include "Interface/BCMSupport.h"

extern MessagesFD messages;

extern void *private_word;
extern int instance;

/* Response callback definiton */
typedef struct
{
	uint32_t r0;
	void *r1;
	void *r12;
	void *pc;
} Callback_t;

extern void invoke_callback(const Callback_t *callback);
extern void dsb(void);
extern uint32_t halcall_1(uint32_t r0, void *sb, void *pc);

extern void *hal_sb;
extern void *hal_irqenable;
extern void *hal_irqdisable;
extern void *hal_irqclear;

static inline void HAL_IRQEnable(uint32_t dev)
{
	halcall_1(dev, hal_sb, hal_irqenable);
}

static inline void HAL_IRQDisable(uint32_t dev)
{
	halcall_1(dev, hal_sb, hal_irqdisable);
}

static inline void HAL_IRQClear(uint32_t dev)
{
	halcall_1(dev, hal_sb, hal_irqclear);
}

/* Retry the given function (with given parameters) until it returns true
   Function may be called with IRQs disabled! */
typedef bool (*tryfn)(void *a, void *b);
typedef void (*retryfn)(void *a, void *b, tryfn func);
extern retryfn retry;

extern void retry_cp15(void *a, void *b, tryfn func);
extern void retry_wfe(void *a, void *b, tryfn func);

#endif
@
