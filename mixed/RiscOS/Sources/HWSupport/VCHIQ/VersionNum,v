head	1.11;
access;
symbols
	VCHIQ-0_10:1.11
	VCHIQ-0_09:1.10
	VCHIQ-0_08:1.9
	VCHIQ-0_07:1.8
	VCHIQ-0_06:1.7
	VCHIQ-0_05:1.6
	VCHIQ-0_04:1.5
	VCHIQ-0_03:1.4
	VCHIQ-0_02:1.3
	VCHIQ-0_01:1.2;
locks; strict;
comment	@# @;


1.11
date	2017.10.15.20.40.44;	author rsprowson;	state Exp;
branches;
next	1.10;
commitid	ZghA3rTNNgyzPbbA;

1.10
date	2016.07.17.16.48.04;	author jlee;	state Exp;
branches;
next	1.9;
commitid	v4bsc1BvDdhwaHez;

1.9
date	2015.08.08.08.30.51;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	WYS8YntY7Gpvtrwy;

1.8
date	2014.03.16.12.49.24;	author jlee;	state Exp;
branches;
next	1.7;
commitid	R4wsjsDCzOhAiVsx;

1.7
date	2014.01.31.02.13.12;	author jlee;	state Exp;
branches;
next	1.6;
commitid	mnzIlCCaIIL0cdnx;

1.6
date	2013.03.03.20.22.45;	author jlee;	state Exp;
branches;
next	1.5;
commitid	uNS7q3oyxvlpXnGw;

1.5
date	2012.08.26.20.05.10;	author jlee;	state Exp;
branches;
next	1.4;
commitid	jtIV6yBbKCi3W5iw;

1.4
date	2012.08.22.18.48.06;	author jlee;	state Exp;
branches;
next	1.3;
commitid	iYDy3ShocY6ADzhw;

1.3
date	2012.08.20.22.16.37;	author jlee;	state Exp;
branches;
next	1.2;
commitid	ZKWcPOk3LMs6Rkhw;

1.2
date	2012.08.19.23.32.58;	author jlee;	state Exp;
branches;
next	1.1;
commitid	QqbCOQ1O2rQgjdhw;

1.1
date	2012.08.19.23.22.00;	author jlee;	state Exp;
branches;
next	;
commitid	285IgjzQleWwfdhw;


desc
@@


1.11
log
@Fix potential memory leak on malloc failure
Free the previous allocation should the 2nd fail.
Ref https://www.riscosopen.org/forum/forums/4/topics/9503

Version 0.10. Tagged as 'VCHIQ-0_10'
@
text
@/* (0.10)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.10
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                15 Oct 2017

#define Module_MajorVersion             "0.10"
#define Module_Version                  10
#define Module_MinorVersion             ""
#define Module_Date                     "15 Oct 2017"

#define Module_ApplicationDate          "15-Oct-17"

#define Module_ComponentName            "VCHIQ"
#define Module_ComponentPath            "mixed/RiscOS/Sources/HWSupport/VCHIQ"

#define Module_FullVersion              "0.10"
#define Module_HelpVersion              "0.10 (15 Oct 2017)"
#define Module_LibraryVersionInfo       "0:10"
@


1.10
log
@Add SWI for vchi_bulk_queue_receive
Detail:
  c/swis, cmhg/VCHIQHdr, hdr/VCHIQ - Add SWI VCHIQ_BulkQueueReceive, to complement VCHIQ_BulkQueueTransmit
  h/VCHIQWrap - Add wrapper for the new SWI
Admin:
  Builds, untested
  Based on code supplied by Lee Noar


Version 0.09. Tagged as 'VCHIQ-0_09'
@
text
@d1 1
a1 1
/* (0.09)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.09
d9 1
a9 1
#define Module_Date_CMHG                17 Jul 2016
d11 2
a12 2
#define Module_MajorVersion             "0.09"
#define Module_Version                  9
d14 1
a14 1
#define Module_Date                     "17 Jul 2016"
d16 1
a16 1
#define Module_ApplicationDate          "17-Jul-16"
d21 3
a23 3
#define Module_FullVersion              "0.09"
#define Module_HelpVersion              "0.09 (17 Jul 2016)"
#define Module_LibraryVersionInfo       "0:9"
@


1.9
log
@Build fix
Default RESFSDIR, RES_PATH, CMHGFILE.
Fixes problem with RAM build resources being in the wrong directory, but ROM build ones being OK.
Resources/standalone manually run, but no runtime testing.

Version 0.08. Tagged as 'VCHIQ-0_08'
@
text
@d1 1
a1 1
/* (0.08)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.08
d9 1
a9 1
#define Module_Date_CMHG                08 Aug 2015
d11 2
a12 2
#define Module_MajorVersion             "0.08"
#define Module_Version                  8
d14 1
a14 1
#define Module_Date                     "08 Aug 2015"
d16 1
a16 1
#define Module_ApplicationDate          "08-Aug-15"
d21 3
a23 3
#define Module_FullVersion              "0.08"
#define Module_HelpVersion              "0.08 (08 Aug 2015)"
#define Module_LibraryVersionInfo       "0:8"
@


1.8
log
@Fix dubious struct initialisation
Detail:
  h/riscosbits - ATOMIC_INIT() is used to initialise a struct, so we should use {}
Admin:
  Tested on Raspberry Pi


Version 0.07. Tagged as 'VCHIQ-0_07'
@
text
@d1 1
a1 1
/* (0.07)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.07
d9 1
a9 1
#define Module_Date_CMHG                16 Mar 2014
d11 2
a12 2
#define Module_MajorVersion             "0.07"
#define Module_Version                  7
d14 1
a14 1
#define Module_Date                     "16 Mar 2014"
d16 1
a16 1
#define Module_ApplicationDate          "16-Mar-14"
d21 3
a23 3
#define Module_FullVersion              "0.07"
#define Module_HelpVersion              "0.07 (16 Mar 2014)"
#define Module_LibraryVersionInfo       "0:7"
@


1.7
log
@Fix occasional hang on boot initialising SoundDMA
Detail:
  c/cmodule - A race condition in remote_event_signal could lead to us not ringing the VC doorbell when we should, resulting in the VC not receiving whatever message has just been placed in the buffers (or at least not receiving it until we send another message).
  This can then lead to a hang if the sender decides to block and wait for a response from the GPU.
  It looks like the original Linux version of remote_event_signal had the same race condition, but then it was fixed in one of the updates (see current version in vc04_services/interface/vchiq_arm/c/vchiq_2835_arm). However I must have missed that change when updating to the newer sources, so the bug remained in our version.
Admin:
  Tested on Raspberry Pi, survived 3+ hours of continuous reboots
  Might also fix sound cutting out randomly after X amount of time?


Version 0.06. Tagged as 'VCHIQ-0_06'
@
text
@d1 1
a1 1
/* (0.06)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.06
d9 1
a9 1
#define Module_Date_CMHG                31 Jan 2014
d11 2
a12 2
#define Module_MajorVersion             "0.06"
#define Module_Version                  6
d14 1
a14 1
#define Module_Date                     "31 Jan 2014"
d16 1
a16 1
#define Module_ApplicationDate          "31-Jan-14"
d21 3
a23 3
#define Module_FullVersion              "0.06"
#define Module_HelpVersion              "0.06 (31 Jan 2014)"
#define Module_LibraryVersionInfo       "0:6"
@


1.6
log
@Update to latest version of VCHIQ sources
Detail:
  This updates our VCHIQ sources to rev 95009dbb77 of the official sources from the Raspberry Pi Linux github repo.
  From our perspective, the important changes are:
  * Provides compatbility with the latest firmware
  * Not compatible with older firmware (older than around Nov 2012?), including the firmware we've typically been using until now
  * Clients of the module now need to specify the version number of the service they're communicating with
  * Source is dual BSD/GPL licenced, with us opting to use the BSD license in order to allow the module to be included in ROM instead of as a softload on disc
  * Ability to build softload version has been removed from the makefile, as it's now a redundant option
  File changes:
  - !MkRom - enable throwback
  - Makefile - Update for building latest sources. Remove special softload rules. Enable ability to build ROM version.
  - c/vchiq_riscos, s/asm - Update RISC OS compatbility layer to directly emulate the corresponding Linux calls now that the VCOS abstraction layer has been removed from the VCHIQ sources
  - h/VCHIQ, h/VCHIQWrap, hdr/VCHIQ - Add the service version number entries to the vchiq_service_t/SERVICE_CREATION_T structs
  - vc04_services/* - Updated to latest official sources, with relevant changes to allow compilation for RISC OS
Admin:
  Tested on Raspberry Pi
  Updated GPU firmware will likely be required!


Version 0.05. Tagged as 'VCHIQ-0_05'
@
text
@d1 1
a1 1
/* (0.05)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.05
d9 1
a9 1
#define Module_Date_CMHG                03 Mar 2013
d11 2
a12 2
#define Module_MajorVersion             "0.05"
#define Module_Version                  5
d14 1
a14 1
#define Module_Date                     "03 Mar 2013"
d16 1
a16 1
#define Module_ApplicationDate          "03-Mar-13"
d21 3
a23 3
#define Module_FullVersion              "0.05"
#define Module_HelpVersion              "0.05 (03 Mar 2013)"
#define Module_LibraryVersionInfo       "0:5"
@


1.5
log
@Add dummy !Run file to softload folder
Detail:
  Makefile, Resources/!Run,feb - Add dummy !Run file to softload folder, so predesk folder booting doesn't bail once it reaches VCHIQ
Admin:
  Tested on Raspberry Pi


Version 0.04. Tagged as 'VCHIQ-0_04'
@
text
@d1 1
a1 1
/* (0.04)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.04
d9 1
a9 1
#define Module_Date_CMHG                26 Aug 2012
d11 2
a12 2
#define Module_MajorVersion             "0.04"
#define Module_Version                  4
d14 1
a14 1
#define Module_Date                     "26 Aug 2012"
d16 1
a16 1
#define Module_ApplicationDate          "26-Aug-12"
d21 3
a23 3
#define Module_FullVersion              "0.04"
#define Module_HelpVersion              "0.04 (26 Aug 2012)"
#define Module_LibraryVersionInfo       "0:4"
@


1.4
log
@Update softload install rule to allow either module source or a written offer to be installed
Detail:
  Makefile - When installing a softload (with SOFTLOAD=TRUE), specify SOURCES=TRUE to also install a copy of the module source code. Otherwise a written offer for the sources will be installed.
  Resources/!ReadMe - Written offer of source code
  !MkClean,fd7 - Removed spurious line
Admin:
  Tested with building of disc image


Version 0.03. Tagged as 'VCHIQ-0_03'
@
text
@d1 1
a1 1
/* (0.03)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.03
d9 1
a9 1
#define Module_Date_CMHG                22 Aug 2012
d11 2
a12 2
#define Module_MajorVersion             "0.03"
#define Module_Version                  3
d14 1
a14 1
#define Module_Date                     "22 Aug 2012"
d16 1
a16 1
#define Module_ApplicationDate          "22-Aug-12"
d21 3
a23 3
#define Module_FullVersion              "0.03"
#define Module_HelpVersion              "0.03 (22 Aug 2012)"
#define Module_LibraryVersionInfo       "0:3"
@


1.3
log
@Add softload script for using in Raspberry Pi disc image
Detail:
  Makefile - Running the install phase with the SOFTLOAD=TRUE option will install the softload script, module, and a copy of the GPL licence text in the indicated location (intended to be PreDesk folder)
  Resources/!!VCHIQ,feb - Softload script to softload VCHIQ and give the sound modules a kick. Does nothing if not running on a Pi (DWCDriver not present) or VCHIQ already loaded.
Admin:
  Tested on Raspberry Pi


Version 0.02. Tagged as 'VCHIQ-0_02'
@
text
@d1 1
a1 1
/* (0.02)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.02
d9 1
a9 1
#define Module_Date_CMHG                20 Aug 2012
d11 2
a12 2
#define Module_MajorVersion             "0.02"
#define Module_Version                  2
d14 1
a14 1
#define Module_Date                     "20 Aug 2012"
d16 1
a16 1
#define Module_ApplicationDate          "20-Aug-12"
d21 3
a23 3
#define Module_FullVersion              "0.02"
#define Module_HelpVersion              "0.02 (20 Aug 2012)"
#define Module_LibraryVersionInfo       "0:2"
@


1.2
log
@Add initial version of VCHIQ driver
Detail:
  This is a port of the VCHIQ Linux driver, using sources from the Raspberry Pi github
  The Linux version of the driver compiles to two seperate libraries - the kernel library/module and a user-space library for linking with programs. Communication between the two involves ioctl calls to a file in /dev/
  The RISC OS version takes a slightly different route, omitting the ioctl interface and instead using the 'vchiq_shim' code to talk directly to the kernel code, using an API identical to the Linux user space one.
  Programs are able to communicate with the module via SWIs which provide a close match for the C APIs. The module also exports a C header containing wrapper functions to convert the SWIs back to the C API, aiding porting of existing code.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Code is currently dual licensed BSD+GPL, with the GPL code (in vc04_services) being the dominant licence.


Version 0.01. Tagged as 'VCHIQ-0_01'
@
text
@d1 1
a1 1
/* (0.01)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.01
d11 2
a12 2
#define Module_MajorVersion             "0.01"
#define Module_Version                  1
d21 3
a23 3
#define Module_FullVersion              "0.01"
#define Module_HelpVersion              "0.01 (20 Aug 2012)"
#define Module_LibraryVersionInfo       "0:1"
@


1.1
log
@created by srccommit.
@
text
@d1 1
a1 1
/* (0.00)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.00
d11 2
a12 2
#define Module_MajorVersion             "0.00"
#define Module_Version                  0
d21 3
a23 3
#define Module_FullVersion              "0.00"
#define Module_HelpVersion              "0.00 (20 Aug 2012)"
#define Module_LibraryVersionInfo       "0:0"
@

