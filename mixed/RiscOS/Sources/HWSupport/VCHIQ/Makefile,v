head	1.6;
access;
symbols
	VCHIQ-0_10:1.6
	VCHIQ-0_09:1.6
	VCHIQ-0_08:1.6
	VCHIQ-0_07:1.5
	VCHIQ-0_06:1.5
	VCHIQ-0_05:1.5
	VCHIQ-0_04:1.4
	VCHIQ-0_03:1.3
	VCHIQ-0_02:1.2
	VCHIQ-0_01:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.08.08.08.30.51;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	WYS8YntY7Gpvtrwy;

1.5
date	2013.03.03.20.22.44;	author jlee;	state Exp;
branches;
next	1.4;
commitid	uNS7q3oyxvlpXnGw;

1.4
date	2012.08.26.20.05.10;	author jlee;	state Exp;
branches;
next	1.3;
commitid	jtIV6yBbKCi3W5iw;

1.3
date	2012.08.22.18.48.06;	author jlee;	state Exp;
branches;
next	1.2;
commitid	iYDy3ShocY6ADzhw;

1.2
date	2012.08.20.22.16.36;	author jlee;	state Exp;
branches;
next	1.1;
commitid	ZKWcPOk3LMs6Rkhw;

1.1
date	2012.08.19.23.32.58;	author jlee;	state Exp;
branches;
next	;
commitid	QqbCOQ1O2rQgjdhw;


desc
@@


1.6
log
@Build fix
Default RESFSDIR, RES_PATH, CMHGFILE.
Fixes problem with RAM build resources being in the wrong directory, but ROM build ones being OK.
Resources/standalone manually run, but no runtime testing.

Version 0.08. Tagged as 'VCHIQ-0_08'
@
text
@# 
# Copyright (c) 2012, RISC OS Open Ltd
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of RISC OS Open Ltd nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# 
# Makefile for Broadcom VCHIQ driver
#
# $Id: Makefile,v 1.5 2013/03/03 20:22:44 jlee Exp $

DEBUG ?= FALSE

ifeq ($(DEBUG),TRUE)
CFLAGS += -DDEBUGLIB
CMHGFLAGS += -DDEBUGLIB
LIBS = ${DEBUGLIBS} ${NET5LIBS}
endif

COMPONENT       = VCHIQ
ASMHDRS         = VCHIQ
ASMCHDRS        = VCHIQ
OBJS            = cmodule vchiq_riscos asm swis errors
HDRS            = VCHIQWrap
LIBS           += ${ASMUTILS}

CINCLUDES       = -Itbox:
CFLAGS          += -ff -wp -wc
CMHGDEFINES     = -DCOMPONENT=${COMPONENT}
CMHGDEPENDS     = cmodule swis
RAMCDEFINES     = -DSTANDALONE

RES_OBJ         = messages

# VCHIQ bits
VPATH = vc04_services.interface.vchiq_arm
# vc04_services.interface.vcos.generic vc04_services.interface.vcos.riscos
OBJS += vchiq_core vchiq_shim vchiq_util vchiq_kern_lib
#OBJS += vcos_generic_event_flags vcos_logcat vcos_mem_from_malloc vcos_cmd
CFLAGS += -DVCOS_VERIFY_BKPTS=1 -DUSE_VCHIQ_ARM -D__VCCOREVER__=0x04000000 -Ivc04_services
# -Ivc04_services.interface.vcos.riscos

include CModule

# Dynamic dependencies:
@


1.5
log
@Update to latest version of VCHIQ sources
Detail:
  This updates our VCHIQ sources to rev 95009dbb77 of the official sources from the Raspberry Pi Linux github repo.
  From our perspective, the important changes are:
  * Provides compatbility with the latest firmware
  * Not compatible with older firmware (older than around Nov 2012?), including the firmware we've typically been using until now
  * Clients of the module now need to specify the version number of the service they're communicating with
  * Source is dual BSD/GPL licenced, with us opting to use the BSD license in order to allow the module to be included in ROM instead of as a softload on disc
  * Ability to build softload version has been removed from the makefile, as it's now a redundant option
  File changes:
  - !MkRom - enable throwback
  - Makefile - Update for building latest sources. Remove special softload rules. Enable ability to build ROM version.
  - c/vchiq_riscos, s/asm - Update RISC OS compatbility layer to directly emulate the corresponding Linux calls now that the VCOS abstraction layer has been removed from the VCHIQ sources
  - h/VCHIQ, h/VCHIQWrap, hdr/VCHIQ - Add the service version number entries to the vchiq_service_t/SERVICE_CREATION_T structs
  - vc04_services/* - Updated to latest official sources, with relevant changes to allow compilation for RISC OS
Admin:
  Tested on Raspberry Pi
  Updated GPU firmware will likely be required!


Version 0.05. Tagged as 'VCHIQ-0_05'
@
text
@d30 1
a30 1
# $Id: Makefile,v 1.4 2012/08/26 20:05:10 jlee Exp $
a43 1
CMHGFILE        = modhead
d53 1
a53 3
RESFSDIR = ${RESDIR}.VCHIQ
RES_PATH = Resources.VCHIQ.Messages
RES_OBJ = messages
@


1.4
log
@Add dummy !Run file to softload folder
Detail:
  Makefile, Resources/!Run,feb - Add dummy !Run file to softload folder, so predesk folder booting doesn't bail once it reaches VCHIQ
Admin:
  Tested on Raspberry Pi


Version 0.04. Tagged as 'VCHIQ-0_04'
@
text
@d30 1
a30 1
# $Id: Makefile,v 1.3 2012/08/22 18:48:06 jlee Exp $
d59 2
a60 1
VPATH = vc04_services.interface.vchiq_arm vc04_services.interface.vcos.generic vc04_services.interface.vcos.riscos
d63 2
a64 9
CFLAGS += -DVCOS_VERIFY_BKPTS=1 -DUSE_VCHIQ_ARM -D__VCCOREVER__=0x04000000 -Ivc04_services -Ivc04_services.interface.vcos.riscos

# Prevent building of ROM version until everthing is BSD
ROM_OBJS = nope

# Softload script rules
ifeq ($(SOFTLOAD),TRUE)
CUSTOMSA = custom
endif
a67 37
# Softload script rules
ifeq ($(SOFTLOAD),TRUE)

ifeq ($(SOURCES),TRUE)

# Include sources with softload
install: rm.${SA_TARGET} Resources.!!VCHIQ vc04_services.COPYING Resources.!Run
        ${MKDIR} ${INSTDIR}
        ${CP} Resources.!!VCHIQ ${INSTDIR}.!!VCHIQ ${CPFLAGS}
        ${MKDIR} ${INSTDIR}.VCHIQ
        ${CP} rm.${SA_TARGET} ${INSTDIR}.VCHIQ.${TARGET} ${CPFLAGS}
        ${CP} Resources.!Run ${INSTDIR}.VCHIQ.!Run ${CPFLAGS}
        ${CP} vc04_services.COPYING ${INSTDIR}.VCHIQ.COPYING ${CPFLAGS}
        ${MKDIR} ${INSTDIR}.VCHIQ.Source
        ${CP} @@ ${INSTDIR}.VCHIQ.Source ${CPFLAGS}
        dir ${INSTDIR}.VCHIQ.Source
        amu clean
        stripdepnd
        back
        @@${ECHO} ${COMPONENT}: softload version installed
else

# Include written offer with softload
install: rm.${SA_TARGET} Resources.!!VCHIQ vc04_services.COPYING Resources.!ReadMe
        ${MKDIR} ${INSTDIR}
        ${CP} Resources.!!VCHIQ ${INSTDIR}.!!VCHIQ ${CPFLAGS}
        ${MKDIR} ${INSTDIR}.VCHIQ
        ${CP} rm.${SA_TARGET} ${INSTDIR}.VCHIQ.${TARGET} ${CPFLAGS}
        ${CP} Resources.!Run ${INSTDIR}.VCHIQ.!Run ${CPFLAGS}
        ${CP} vc04_services.COPYING ${INSTDIR}.VCHIQ.COPYING ${CPFLAGS}
        ${CP} Resources.!ReadMe ${INSTDIR}.VCHIQ.!ReadMe ${CPFLAGS}
        @@${ECHO} ${COMPONENT}: softload version installed

endif

endif

@


1.3
log
@Update softload install rule to allow either module source or a written offer to be installed
Detail:
  Makefile - When installing a softload (with SOFTLOAD=TRUE), specify SOURCES=TRUE to also install a copy of the module source code. Otherwise a written offer for the sources will be installed.
  Resources/!ReadMe - Written offer of source code
  !MkClean,fd7 - Removed spurious line
Admin:
  Tested with building of disc image


Version 0.03. Tagged as 'VCHIQ-0_03'
@
text
@d30 1
a30 1
# $Id: Makefile,v 1.1 2012/08/19 23:32:58 jlee Exp $
d80 1
a80 1
install: rm.${SA_TARGET} Resources.!!VCHIQ
d85 2
d102 1
@


1.2
log
@Add softload script for using in Raspberry Pi disc image
Detail:
  Makefile - Running the install phase with the SOFTLOAD=TRUE option will install the softload script, module, and a copy of the GPL licence text in the indicated location (intended to be PreDesk folder)
  Resources/!!VCHIQ,feb - Softload script to softload VCHIQ and give the sound modules a kick. Does nothing if not running on a Pi (DWCDriver not present) or VCHIQ already loaded.
Admin:
  Tested on Raspberry Pi


Version 0.02. Tagged as 'VCHIQ-0_02'
@
text
@d76 20
a95 1
install: rm.${SA_TARGET} Resources.!!VCHIQ vc04_services.COPYING
d101 1
d103 3
@


1.1
log
@Add initial version of VCHIQ driver
Detail:
  This is a port of the VCHIQ Linux driver, using sources from the Raspberry Pi github
  The Linux version of the driver compiles to two seperate libraries - the kernel library/module and a user-space library for linking with programs. Communication between the two involves ioctl calls to a file in /dev/
  The RISC OS version takes a slightly different route, omitting the ioctl interface and instead using the 'vchiq_shim' code to talk directly to the kernel code, using an API identical to the Linux user space one.
  Programs are able to communicate with the module via SWIs which provide a close match for the C APIs. The module also exports a C header containing wrapper functions to convert the SWIs back to the C API, aiding porting of existing code.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Code is currently dual licensed BSD+GPL, with the GPL code (in vc04_services) being the dominant licence.


Version 0.01. Tagged as 'VCHIQ-0_01'
@
text
@d30 1
a30 1
# $Id: Makefile,v 1.1 2011/11/20 22:59:15 jlee Exp $
d67 5
d74 11
@

