head	1.3;
access;
symbols
	VCHIQ-0_10:1.3
	VCHIQ-0_09:1.3
	VCHIQ-0_08:1.2
	VCHIQ-0_07:1.2
	VCHIQ-0_06:1.2
	VCHIQ-0_05:1.2
	VCHIQ-0_04:1.1
	VCHIQ-0_03:1.1
	VCHIQ-0_02:1.1
	VCHIQ-0_01:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.07.17.16.48.14;	author jlee;	state Exp;
branches;
next	1.2;
commitid	v4bsc1BvDdhwaHez;

1.2
date	2013.03.03.20.23.00;	author jlee;	state Exp;
branches;
next	1.1;
commitid	uNS7q3oyxvlpXnGw;

1.1
date	2012.08.19.23.33.09;	author jlee;	state Exp;
branches;
next	;
commitid	QqbCOQ1O2rQgjdhw;


desc
@@


1.3
log
@Add SWI for vchi_bulk_queue_receive
Detail:
  c/swis, cmhg/VCHIQHdr, hdr/VCHIQ - Add SWI VCHIQ_BulkQueueReceive, to complement VCHIQ_BulkQueueTransmit
  h/VCHIQWrap - Add wrapper for the new SWI
Admin:
  Builds, untested
  Based on code supplied by Lee Noar


Version 0.09. Tagged as 'VCHIQ-0_09'
@
text
@/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef INTERFACE_VCHIQWRAP_H
#define INTERFACE_VCHIQWRAP_H

#include <stdint.h>
#include <stdbool.h>

/* Datatypes and wrappers around SWIs to provide an API similar to that which would be available via a VCHIQ C library */

typedef uint32_t VCHI_INSTANCE_T;
typedef uint32_t VCHI_SERVICE_HANDLE_T;
typedef uint32_t VCHI_FLAGS_T;
typedef uint32_t VCHI_CONNECTION_T;

struct vchi_version {
  uint32_t version;
  uint32_t version_min;
};
#define VCHI_VERSION(v_) { v_, v_ }
#define VCHI_VERSION_EX(v_, m_) { v_, m_ }

typedef struct vchi_msg_vector
{
  const void *vec_base; /* Address of message data */
  int32_t vec_len; /* Length of message data */
  /* Note: Negative length can be used to link to another vector list (pointed
     to by vec_base), containing -vec_len entries */
} VCHI_MSG_VECTOR_T;

typedef struct
{
  struct vchi_version version;
  uint32_t service_id; /* fourcc, big endian. E.g. 'AUDS' = 0x41554453 */
  uint32_t reserved_0; /* Reserved, must be 0 */
  uint32_t rx_fifo_size;
  uint32_t tx_fifo_size;
  void (*callback)(void); /* Assuming this is will be set to call a CMHG veneer
                             Veneer function will be called with:
                             r0 = callback_param
                             r1 = reason (VCHI_CALLBACK_...)
                             r2 = handle
                             r12 = private_word (from vchi_initialise) */
  void *callback_param;
  uint32_t want_unaligned_bulk_rx; /* 0/1 */
  uint32_t want_unaligned_bulk_tx; /* 0/1 */
  uint32_t want_crc; /* 0/1 */
} SERVICE_CREATION_T;

#define vchi_error_is_retry(e) (e && (e->errnum == ErrorNumber_VCHIQ_Retry))

/* Note addition of private_word, this gets passed to service callbacks in r12 (see above) */
static inline _kernel_oserror *vchi_initialise(VCHI_INSTANCE_T *instance,
                                               void *private_word)
{
  return _swix(VCHIQ_Initialise,_IN(0)|_OUT(0),private_word,instance);
}

static inline _kernel_oserror *vchi_connect(VCHI_CONNECTION_T **connections,
                                            uint32_t num_connections,
                                            VCHI_INSTANCE_T instance_handle)
{
  return _swix(VCHIQ_Connect,_INR(0,2),connections,num_connections,instance_handle);
}

static inline _kernel_oserror *vchi_disconnect(VCHI_INSTANCE_T instance)
{
  return _swix(VCHIQ_Disconnect,_IN(0),instance);
}

static inline _kernel_oserror *vchi_bulk_queue_transmit(VCHI_SERVICE_HANDLE_T handle,
                                                        const void *data_src,
                                                        uint32_t data_size,
                                                        VCHI_FLAGS_T flags,
                                                        void *bulk_handle)
{
  return _swix(VCHIQ_BulkQueueTransmit,_INR(0,4),handle,data_src,data_size,flags,bulk_handle);
}

static inline _kernel_oserror *vchi_bulk_queue_receive(VCHI_SERVICE_HANDLE_T handle,
                                                        const void *data_dst,
                                                        uint32_t data_size,
                                                        VCHI_FLAGS_T flags,
                                                        void *bulk_handle)
{
  return _swix(VCHIQ_BulkQueueReceive,_INR(0,4),handle,data_dst,data_size,flags,bulk_handle);
}

static inline _kernel_oserror *vchi_msg_dequeue(VCHI_SERVICE_HANDLE_T handle,
                                                void *data,
                                                uint32_t max_data_size_to_read,
                                                uint32_t *actual_msg_size,
                                                VCHI_FLAGS_T flags)
{
  return _swix(VCHIQ_MsgDequeue,_INR(0,3)|_OUT(2),handle,data,max_data_size_to_read,flags,actual_msg_size);
}

static inline _kernel_oserror *vchi_msg_queue(VCHI_SERVICE_HANDLE_T handle,
                                              void *data,
                                              uint32_t data_size,
                                              VCHI_FLAGS_T flags,
                                              void *msg_handle)
{
  return _swix(VCHIQ_MsgQueue,_INR(0,4),handle,data,data_size,flags,msg_handle);
}

static inline _kernel_oserror *vchi_msg_queuev(VCHI_SERVICE_HANDLE_T handle,
                                               VCHI_MSG_VECTOR_T *vector,
                                               uint32_t count,
                                               VCHI_FLAGS_T flags,
                                               void *msg_handle)
{
  return _swix(VCHIQ_MsgQueueV,_INR(0,4),handle,vector,count,flags,msg_handle);
}

static inline _kernel_oserror *vchi_msg_peek(VCHI_SERVICE_HANDLE_T handle,
                                             void **data,
                                             uint32_t *msg_size,
                                             VCHI_FLAGS_T flags)
{
  return _swix(VCHIQ_MsgPeek,_INR(0,1)|_OUTR(0,1),handle,flags,data,msg_size);
}

static inline _kernel_oserror *vchi_msg_remove(VCHI_SERVICE_HANDLE_T handle)
{
  return _swix(VCHIQ_MsgRemove,_IN(0),handle);
}

static inline _kernel_oserror *vchi_service_close(VCHI_SERVICE_HANDLE_T handle)
{
  return _swix(VCHIQ_ServiceClose,_IN(0),handle);
}

static inline _kernel_oserror *vchi_service_open(VCHI_INSTANCE_T instance,
                                                 SERVICE_CREATION_T *setup,
                                                 VCHI_SERVICE_HANDLE_T *handle)
{
  return _swix(VCHIQ_ServiceOpen,_INR(0,1)|_OUT(0),instance,setup,handle);
}

static inline _kernel_oserror *vchi_service_create(VCHI_INSTANCE_T instance,
                                                   SERVICE_CREATION_T *setup,
                                                   VCHI_SERVICE_HANDLE_T *handle)
{
  return _swix(VCHIQ_ServiceCreate,_INR(0,1)|_OUT(0),instance,setup,handle);
}

static inline _kernel_oserror *vchi_service_destroy(VCHI_SERVICE_HANDLE_T handle)
{
  return _swix(VCHIQ_ServiceDestroy,_IN(0),handle);
}

static inline _kernel_oserror *vchi_service_use(VCHI_SERVICE_HANDLE_T handle)
{
  return _swix(VCHIQ_ServiceUse,_IN(0),handle);
}

static inline _kernel_oserror *vchi_service_release(VCHI_SERVICE_HANDLE_T handle)
{
  return _swix(VCHIQ_ServiceRelease,_IN(0),handle);
}

#endif
@


1.2
log
@Update to latest version of VCHIQ sources
Detail:
  This updates our VCHIQ sources to rev 95009dbb77 of the official sources from the Raspberry Pi Linux github repo.
  From our perspective, the important changes are:
  * Provides compatbility with the latest firmware
  * Not compatible with older firmware (older than around Nov 2012?), including the firmware we've typically been using until now
  * Clients of the module now need to specify the version number of the service they're communicating with
  * Source is dual BSD/GPL licenced, with us opting to use the BSD license in order to allow the module to be included in ROM instead of as a softload on disc
  * Ability to build softload version has been removed from the makefile, as it's now a redundant option
  File changes:
  - !MkRom - enable throwback
  - Makefile - Update for building latest sources. Remove special softload rules. Enable ability to build ROM version.
  - c/vchiq_riscos, s/asm - Update RISC OS compatbility layer to directly emulate the corresponding Linux calls now that the VCOS abstraction layer has been removed from the VCHIQ sources
  - h/VCHIQ, h/VCHIQWrap, hdr/VCHIQ - Add the service version number entries to the vchiq_service_t/SERVICE_CREATION_T structs
  - vc04_services/* - Updated to latest official sources, with relevant changes to allow compilation for RISC OS
Admin:
  Tested on Raspberry Pi
  Updated GPU firmware will likely be required!


Version 0.05. Tagged as 'VCHIQ-0_05'
@
text
@d105 9
@


1.1
log
@Add initial version of VCHIQ driver
Detail:
  This is a port of the VCHIQ Linux driver, using sources from the Raspberry Pi github
  The Linux version of the driver compiles to two seperate libraries - the kernel library/module and a user-space library for linking with programs. Communication between the two involves ioctl calls to a file in /dev/
  The RISC OS version takes a slightly different route, omitting the ioctl interface and instead using the 'vchiq_shim' code to talk directly to the kernel code, using an API identical to the Linux user space one.
  Programs are able to communicate with the module via SWIs which provide a close match for the C APIs. The module also exports a C header containing wrapper functions to convert the SWIs back to the C API, aiding porting of existing code.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Code is currently dual licensed BSD+GPL, with the GPL code (in vc04_services) being the dominant licence.


Version 0.01. Tagged as 'VCHIQ-0_01'
@
text
@d41 7
d58 1
@

