head	1.2;
access;
symbols
	VCHIQ-0_10:1.2
	VCHIQ-0_09:1.2
	VCHIQ-0_08:1.2
	VCHIQ-0_07:1.2
	VCHIQ-0_06:1.2
	VCHIQ-0_05:1.2
	VCHIQ-0_04:1.1
	VCHIQ-0_03:1.1
	VCHIQ-0_02:1.1
	VCHIQ-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.03.20.23.06;	author jlee;	state Exp;
branches;
next	1.1;
commitid	uNS7q3oyxvlpXnGw;

1.1
date	2012.08.19.23.33.13;	author jlee;	state Exp;
branches;
next	;
commitid	QqbCOQ1O2rQgjdhw;


desc
@@


1.2
log
@Update to latest version of VCHIQ sources
Detail:
  This updates our VCHIQ sources to rev 95009dbb77 of the official sources from the Raspberry Pi Linux github repo.
  From our perspective, the important changes are:
  * Provides compatbility with the latest firmware
  * Not compatible with older firmware (older than around Nov 2012?), including the firmware we've typically been using until now
  * Clients of the module now need to specify the version number of the service they're communicating with
  * Source is dual BSD/GPL licenced, with us opting to use the BSD license in order to allow the module to be included in ROM instead of as a softload on disc
  * Ability to build softload version has been removed from the makefile, as it's now a redundant option
  File changes:
  - !MkRom - enable throwback
  - Makefile - Update for building latest sources. Remove special softload rules. Enable ability to build ROM version.
  - c/vchiq_riscos, s/asm - Update RISC OS compatbility layer to directly emulate the corresponding Linux calls now that the VCOS abstraction layer has been removed from the VCHIQ sources
  - h/VCHIQ, h/VCHIQWrap, hdr/VCHIQ - Add the service version number entries to the vchiq_service_t/SERVICE_CREATION_T structs
  - vc04_services/* - Updated to latest official sources, with relevant changes to allow compilation for RISC OS
Admin:
  Tested on Raspberry Pi
  Updated GPU firmware will likely be required!


Version 0.05. Tagged as 'VCHIQ-0_05'
@
text
@; 
; Copyright (c) 2012, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 

        GET     Hdr:ListOpts
        GET     Hdr:CPU.Arch
        GET     Hdr:CPU.Generic32
        GET     Hdr:Proc
        GET     Hdr:Macros

        AREA    |C$$code|, CODE, READONLY

        EXPORT  dsb
        EXPORT  wmb
        EXPORT  rmb
        EXPORT  asm_call_callback
        EXPORT  atomic_read
        EXPORT  atomic_set
        EXPORT  atomic_inc_return
        EXPORT  atomic_dec_return
        EXPORT  atomic_xchg
        EXPORT  atomic_cmpxchg
        EXPORT  spin_lock
        EXPORT  spin_unlock

        MACRO
        myDSB
        ; pre-ARMv7, use legacy MCR op
        MCR     p15,0,a1,c7,c10,4
        MEND
        
; void dsb(void)
; void wmb(void)
; void rmb(void)
dsb
wmb
rmb
        myDSB
        MOV     pc, lr

; int32_t atomic_read(atomic_t *a)
atomic_read
        LDR     a1, [a1]
        MOV     pc, lr

; void atomic_set(atomic_t *a, int32_t i)
atomic_set
        STR     a2, [a1]
        MOV     pc, lr

; int32_t atomic_inc_return(atomic_t *a)
atomic_inc_return
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        LDR     a2, [a1]
        ADD     a2, a2, #1
        STR     a2, [a1]
        MSR     CPSR_c, a4
        MOV     a1, a2
        MOV     pc, lr

; int32_t atomic_dec_return(atomic_t *a)
atomic_dec_return
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        LDR     a2, [a1]
        SUB     a2, a2, #1
        STR     a2, [a1]
        MSR     CPSR_c, a4
        MOV     a1, a2
        MOV     pc, lr
        
; int32_t atomic_xchg(atomic_t *a, int32_t i)
atomic_xchg
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        LDR     a3, [a1]
        STR     a2, [a1]
        MSR     CPSR_c, a4
        MOV     a1, a3
        MOV     pc, lr

; int32_t atomic_cmpxchg(atomic_t *a, int32_t old, int32_t new)
atomic_cmpxchg
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        LDR     ip, [a1]
        CMP     ip, a2
        STREQ   a3, [a1]
        MSR     CPSR_c, a4
        MOV     a1, ip
        MOV     pc, lr

; void asm_call_callback(void *callback_param,VCHI_CALLBACK_REASON_T reason,void *handle,void *private_word,VCHI_CALLBACK_T func)
asm_call_callback
        ; Drop from SYS into SVC mode so any CMHG veneers don't get confused
        Entry   "v1-v2"
        LDR     v1, [sp, #12]
        MRS     v2, CPSR
        BIC     lr, v2, #M32_bits
        ORR     lr, lr, #SVC32_mode
        MSR     CPSR_c, lr
        Push    "lr"
        MOV     r12, r3
        MOV     lr, pc
        MOV     pc, v1
        Pull    "lr"
        MSR     CPSR_c, v2
        EXIT

; void spin_lock(spinlock_t *s)
spin_lock
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        STR     a4, [a1]
        MOV     pc, lr

; void spin_unlock(spinlock_t *s)
spin_unlock
        LDR     a1, [a1]
        MSR     CPSR_c, a1
        MOV     pc, lr

        END
@


1.1
log
@Add initial version of VCHIQ driver
Detail:
  This is a port of the VCHIQ Linux driver, using sources from the Raspberry Pi github
  The Linux version of the driver compiles to two seperate libraries - the kernel library/module and a user-space library for linking with programs. Communication between the two involves ioctl calls to a file in /dev/
  The RISC OS version takes a slightly different route, omitting the ioctl interface and instead using the 'vchiq_shim' code to talk directly to the kernel code, using an API identical to the Linux user space one.
  Programs are able to communicate with the module via SWIs which provide a close match for the C APIs. The module also exports a C header containing wrapper functions to convert the SWIs back to the C API, aiding porting of existing code.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Code is currently dual licensed BSD+GPL, with the GPL code (in vc04_services) being the dominant licence.


Version 0.01. Tagged as 'VCHIQ-0_01'
@
text
@d37 3
a39 6
        EXPORT  vcos_wmb
        EXPORT  vcos_rmb
        EXPORT  vcos_atomic_flags_create
        EXPORT  vcos_atomic_flags_or
        EXPORT  vcos_atomic_flags_get_and_clear
        EXPORT  vcos_atomic_flags_delete
d41 8
d56 6
a61 4
; void vcos_wmb(volatile void *addr)
; void vcos_rmb(void)
vcos_wmb
vcos_rmb
d65 3
a67 3
; VCOS_STATUS_T vcos_atomic_flags_create(VCOS_ATOMIC_FLAGS_T *atomic_flags)
vcos_atomic_flags_create
        MOV     a1, #0
d70 13
a82 4
; void vcos_atomic_flags_or(VCOS_ATOMIC_FLAGS_T *atomic_flags, uint32_t flags)
vcos_atomic_flags_or
        MRS     a3, CPSR
        ORR     a4, a3, #I32_bit
d84 1
a84 4
        LDR     a4, [a1]
        ORR     a4, a4, a2
        STR     a4, [a1]
        MSR     CPSR_c, a3
d87 8
a94 4
; uint32_t vcos_atomic_flags_get_and_clear(VCOS_ATOMIC_FLAGS_T *atomic_flags)
vcos_atomic_flags_get_and_clear
        MRS     a3, CPSR
        ORR     a4, a3, #I32_bit
d96 9
a104 2
        LDR     a4, [a1]
        MOV     a2, #0
d106 2
a107 2
        MSR     CPSR_c, a3
        MOV     a1, a4
d110 10
a119 2
; void vcos_atomic_flags_delete(VCOS_ATOMIC_FLAGS_T *atomic_flags)
vcos_atomic_flags_delete
d138 15
a152 1
        
@

