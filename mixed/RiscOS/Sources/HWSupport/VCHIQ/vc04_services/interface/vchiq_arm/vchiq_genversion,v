head	1.1;
access;
symbols
	VCHIQ-0_10:1.1
	VCHIQ-0_09:1.1
	VCHIQ-0_08:1.1
	VCHIQ-0_07:1.1
	VCHIQ-0_06:1.1
	VCHIQ-0_05:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.03.03.20.23.23;	author jlee;	state Exp;
branches;
next	;
commitid	uNS7q3oyxvlpXnGw;


desc
@@


1.1
log
@Update to latest version of VCHIQ sources
Detail:
  This updates our VCHIQ sources to rev 95009dbb77 of the official sources from the Raspberry Pi Linux github repo.
  From our perspective, the important changes are:
  * Provides compatbility with the latest firmware
  * Not compatible with older firmware (older than around Nov 2012?), including the firmware we've typically been using until now
  * Clients of the module now need to specify the version number of the service they're communicating with
  * Source is dual BSD/GPL licenced, with us opting to use the BSD license in order to allow the module to be included in ROM instead of as a softload on disc
  * Ability to build softload version has been removed from the makefile, as it's now a redundant option
  File changes:
  - !MkRom - enable throwback
  - Makefile - Update for building latest sources. Remove special softload rules. Enable ability to build ROM version.
  - c/vchiq_riscos, s/asm - Update RISC OS compatbility layer to directly emulate the corresponding Linux calls now that the VCOS abstraction layer has been removed from the VCHIQ sources
  - h/VCHIQ, h/VCHIQWrap, hdr/VCHIQ - Add the service version number entries to the vchiq_service_t/SERVICE_CREATION_T structs
  - vc04_services/* - Updated to latest official sources, with relevant changes to allow compilation for RISC OS
Admin:
  Tested on Raspberry Pi
  Updated GPU firmware will likely be required!


Version 0.05. Tagged as 'VCHIQ-0_05'
@
text
@#!/usr/bin/perl -w

use strict;

#
# Generate a version from available information
#

my $prefix = shift @@ARGV;
my $root = shift @@ARGV;


if ( not defined $root ) {
	die "usage: $0 prefix root-dir\n";
}

if ( ! -d $root ) {
	die "root directory $root not found\n";
}

my $version = "unknown";
my $tainted = "";

if ( -d "$root/.git" ) {
	# attempt to work out git version. only do so
	# on a linux build host, as cygwin builds are
	# already slow enough

	if ( -f "/usr/bin/git" || -f "/usr/local/bin/git" ) {
		if (not open(F, "git --git-dir $root/.git rev-parse --verify HEAD|")) {
			$version = "no git version";
		}
		else {
			$version = <F>;
			$version =~ s/[ \r\n]*$//;     # chomp may not be enough (cygwin).
			$version =~ s/^[ \r\n]*//;     # chomp may not be enough (cygwin).
		}

		if (open(G, "git --git-dir $root/.git status --porcelain|")) {
			$tainted = <G>;
			$tainted =~ s/[ \r\n]*$//;     # chomp may not be enough (cygwin).
			$tainted =~ s/^[ \r\n]*//;     # chomp may not be enough (cygwin).
			if (length $tainted) {
   			$version = join ' ', $version, "(tainted)";
   		}
   		else {
   			$version = join ' ', $version, "(clean)";
         }   		
		}
	}
}

my $hostname = `hostname`;
$hostname =~ s/[ \r\n]*$//;     # chomp may not be enough (cygwin).
$hostname =~ s/^[ \r\n]*//;     # chomp may not be enough (cygwin).


print STDERR "Version $version\n";
print <<EOF;
#include "${prefix}_build_info.h"
#include <linux/broadcom/vc_debug_sym.h>

VC_DEBUG_DECLARE_STRING_VAR( ${prefix}_build_hostname, "$hostname" );
VC_DEBUG_DECLARE_STRING_VAR( ${prefix}_build_version, "$version" );
VC_DEBUG_DECLARE_STRING_VAR( ${prefix}_build_time,    __TIME__ );
VC_DEBUG_DECLARE_STRING_VAR( ${prefix}_build_date,    __DATE__ );

const char *vchiq_get_build_hostname( void )
{
   return vchiq_build_hostname;
}

const char *vchiq_get_build_version( void )
{
   return vchiq_build_version;
}

const char *vchiq_get_build_date( void )
{
   return vchiq_build_date;
}

const char *vchiq_get_build_time( void )
{
   return vchiq_build_time;
}
EOF


@
