head	1.2;
access;
symbols
	VCHIQ-0_10:1.2
	VCHIQ-0_09:1.2
	VCHIQ-0_08:1.2
	VCHIQ-0_07:1.2
	VCHIQ-0_06:1.2
	VCHIQ-0_05:1.2
	VCHIQ-0_04:1.1
	VCHIQ-0_03:1.1
	VCHIQ-0_02:1.1
	VCHIQ-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.03.20.23.27;	author jlee;	state Exp;
branches;
next	1.1;
commitid	uNS7q3oyxvlpXnGw;

1.1
date	2012.08.19.23.33.29;	author jlee;	state Exp;
branches;
next	;
commitid	QqbCOQ1O2rQgjdhw;


desc
@@


1.2
log
@Update to latest version of VCHIQ sources
Detail:
  This updates our VCHIQ sources to rev 95009dbb77 of the official sources from the Raspberry Pi Linux github repo.
  From our perspective, the important changes are:
  * Provides compatbility with the latest firmware
  * Not compatible with older firmware (older than around Nov 2012?), including the firmware we've typically been using until now
  * Clients of the module now need to specify the version number of the service they're communicating with
  * Source is dual BSD/GPL licenced, with us opting to use the BSD license in order to allow the module to be included in ROM instead of as a softload on disc
  * Ability to build softload version has been removed from the makefile, as it's now a redundant option
  File changes:
  - !MkRom - enable throwback
  - Makefile - Update for building latest sources. Remove special softload rules. Enable ability to build ROM version.
  - c/vchiq_riscos, s/asm - Update RISC OS compatbility layer to directly emulate the corresponding Linux calls now that the VCOS abstraction layer has been removed from the VCHIQ sources
  - h/VCHIQ, h/VCHIQWrap, hdr/VCHIQ - Add the service version number entries to the vchiq_service_t/SERVICE_CREATION_T structs
  - vc04_services/* - Updated to latest official sources, with relevant changes to allow compilation for RISC OS
Admin:
  Tested on Raspberry Pi
  Updated GPU firmware will likely be required!


Version 0.05. Tagged as 'VCHIQ-0_05'
@
text
@/**
 * Copyright (c) 2010-2012 Broadcom. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions, and the following disclaimer,
 *    without modification.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The names of the above-listed copyright holders may not be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * ALTERNATIVELY, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") version 2, as published by the Free
 * Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* ---- Include Files ---------------------------------------------------- */

#ifndef __riscos
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/mutex.h>
#else
#include "riscosbits.h"
#endif

#include "vchiq_core.h"
#include "vchiq_arm.h"

/* ---- Public Variables ------------------------------------------------- */

/* ---- Private Constants and Types -------------------------------------- */

struct bulk_waiter_node {
	struct bulk_waiter bulk_waiter;
	int pid;
	struct list_head list;
};

struct vchiq_instance_struct {
	VCHIQ_STATE_T *state;

	int connected;

	struct list_head bulk_waiter_list;
	struct mutex bulk_waiter_list_mutex;

#ifdef __riscos
	void *private_word;
#endif
};

static VCHIQ_STATUS_T
vchiq_blocking_bulk_transfer(VCHIQ_SERVICE_HANDLE_T handle, void *data,
	int size, VCHIQ_BULK_DIR_T dir);

/****************************************************************************
*
*   vchiq_initialise
*
***************************************************************************/
#define VCHIQ_INIT_RETRIES 10
VCHIQ_STATUS_T vchiq_initialise(VCHIQ_INSTANCE_T *instanceOut
#ifdef __riscos
				, void *private_word
#endif
				)
{
	VCHIQ_STATUS_T status = VCHIQ_ERROR;
	VCHIQ_STATE_T *state;
	VCHIQ_INSTANCE_T instance = NULL;
        int i;

	vchiq_log_trace(vchiq_core_log_level, "%s called", __func__);

        /* VideoCore may not be ready due to boot up timing.
           It may never be ready if kernel and firmware are mismatched, so don't block forever. */
        for (i=0; i<VCHIQ_INIT_RETRIES; i++) {
		state = vchiq_get_state();
		if (state)
			break;
		udelay(500);
	}
	if (i==VCHIQ_INIT_RETRIES) {
		vchiq_log_error(vchiq_core_log_level,
			"%s: videocore not initialized\n", __func__);
		goto failed;
	} else if (i>0) {
		vchiq_log_warning(vchiq_core_log_level,
			"%s: videocore initialized after %d retries\n", __func__, i);
	}

	instance = kzalloc(sizeof(*instance), GFP_KERNEL);
	if (!instance) {
		vchiq_log_error(vchiq_core_log_level,
			"%s: error allocating vchiq instance\n", __func__);
		goto failed;
	}

	instance->connected = 0;
	instance->state = state;
	mutex_init(&instance->bulk_waiter_list_mutex);
	INIT_LIST_HEAD(&instance->bulk_waiter_list);
#ifdef __riscos
	instance->private_word = private_word;
#endif

	*instanceOut = instance;

	status = VCHIQ_SUCCESS;

failed:
	vchiq_log_trace(vchiq_core_log_level,
		"%s(%p): returning %d", __func__, instance, status);

	return status;
}
EXPORT_SYMBOL(vchiq_initialise);

/****************************************************************************
*
*   vchiq_shutdown
*
***************************************************************************/

VCHIQ_STATUS_T vchiq_shutdown(VCHIQ_INSTANCE_T instance)
{
	VCHIQ_STATUS_T status;
	VCHIQ_STATE_T *state = instance->state;

	vchiq_log_trace(vchiq_core_log_level,
		"%s(%p) called", __func__, instance);

	if (mutex_lock_interruptible(&state->mutex) != 0)
		return VCHIQ_RETRY;

	/* Remove all services */
	status = vchiq_shutdown_internal(state, instance);

	mutex_unlock(&state->mutex);

	vchiq_log_trace(vchiq_core_log_level,
		"%s(%p): returning %d", __func__, instance, status);

	if (status == VCHIQ_SUCCESS) {
		struct list_head *pos, *next;
		list_for_each_safe(pos, next,
				&instance->bulk_waiter_list) {
			struct bulk_waiter_node *waiter;
			waiter = list_entry(pos,
					struct bulk_waiter_node,
					list);
			list_del(pos);
			vchiq_log_info(vchiq_arm_log_level,
					"bulk_waiter - cleaned up %x "
					"for pid %d",
					(unsigned int)waiter, waiter->pid);
			kfree(waiter);
		}
		kfree(instance);
	}

	return status;
}
EXPORT_SYMBOL(vchiq_shutdown);

/****************************************************************************
*
*   vchiq_is_connected
*
***************************************************************************/

int vchiq_is_connected(VCHIQ_INSTANCE_T instance)
{
	return instance->connected;
}

/****************************************************************************
*
*   vchiq_connect
*
***************************************************************************/

VCHIQ_STATUS_T vchiq_connect(VCHIQ_INSTANCE_T instance)
{
	VCHIQ_STATUS_T status;
	VCHIQ_STATE_T *state = instance->state;

	vchiq_log_trace(vchiq_core_log_level,
		"%s(%p) called", __func__, instance);

	if (mutex_lock_interruptible(&state->mutex) != 0) {
		vchiq_log_trace(vchiq_core_log_level,
			"%s: call to mutex_lock failed", __func__);
		status = VCHIQ_RETRY;
		goto failed;
	}
	status = vchiq_connect_internal(state, instance);

	if (status == VCHIQ_SUCCESS)
		instance->connected = 1;

	mutex_unlock(&state->mutex);

failed:
	vchiq_log_trace(vchiq_core_log_level,
		"%s(%p): returning %d", __func__, instance, status);

	return status;
}
EXPORT_SYMBOL(vchiq_connect);

/****************************************************************************
*
*   vchiq_add_service
*
***************************************************************************/

VCHIQ_STATUS_T vchiq_add_service(
	VCHIQ_INSTANCE_T              instance,
	const VCHIQ_SERVICE_PARAMS_T *params,
	VCHIQ_SERVICE_HANDLE_T       *phandle)
{
	VCHIQ_STATUS_T status;
	VCHIQ_STATE_T *state = instance->state;
	VCHIQ_SERVICE_T *service = NULL;
	int srvstate;

	vchiq_log_trace(vchiq_core_log_level,
		"%s(%p) called", __func__, instance);

	*phandle = VCHIQ_SERVICE_HANDLE_INVALID;

	srvstate = vchiq_is_connected(instance)
		? VCHIQ_SRVSTATE_LISTENING
		: VCHIQ_SRVSTATE_HIDDEN;

	service = vchiq_add_service_internal(
		state,
		params,
		srvstate,
		instance);

	if (service) {
		*phandle = service->handle;
		status = VCHIQ_SUCCESS;
	} else
		status = VCHIQ_ERROR;

	vchiq_log_trace(vchiq_core_log_level,
		"%s(%p): returning %d", __func__, instance, status);

	return status;
}
EXPORT_SYMBOL(vchiq_add_service);

/****************************************************************************
*
*   vchiq_open_service
*
***************************************************************************/

VCHIQ_STATUS_T vchiq_open_service(
	VCHIQ_INSTANCE_T              instance,
	const VCHIQ_SERVICE_PARAMS_T *params,
	VCHIQ_SERVICE_HANDLE_T       *phandle)
{
	VCHIQ_STATUS_T   status = VCHIQ_ERROR;
	VCHIQ_STATE_T   *state = instance->state;
	VCHIQ_SERVICE_T *service = NULL;

	vchiq_log_trace(vchiq_core_log_level,
		"%s(%p) called", __func__, instance);

	*phandle = VCHIQ_SERVICE_HANDLE_INVALID;

	if (!vchiq_is_connected(instance))
		goto failed;

	service = vchiq_add_service_internal(state,
		params,
		VCHIQ_SRVSTATE_OPENING,
		instance);

	if (service) {
		status = vchiq_open_service_internal(service, current->pid);
		if (status == VCHIQ_SUCCESS)
			*phandle = service->handle;
		else
			vchiq_remove_service(service->handle);
	}

failed:
	vchiq_log_trace(vchiq_core_log_level,
		"%s(%p): returning %d", __func__, instance, status);

	return status;
}
EXPORT_SYMBOL(vchiq_open_service);

VCHIQ_STATUS_T
vchiq_queue_bulk_transmit(VCHIQ_SERVICE_HANDLE_T handle,
	const void *data, int size, void *userdata)
{
	return vchiq_bulk_transfer(handle,
		VCHI_MEM_HANDLE_INVALID, (void *)data, size, userdata,
		VCHIQ_BULK_MODE_CALLBACK, VCHIQ_BULK_TRANSMIT);
}
EXPORT_SYMBOL(vchiq_queue_bulk_transmit);

VCHIQ_STATUS_T
vchiq_queue_bulk_receive(VCHIQ_SERVICE_HANDLE_T handle, void *data, int size,
	void *userdata)
{
	return vchiq_bulk_transfer(handle,
		VCHI_MEM_HANDLE_INVALID, data, size, userdata,
		VCHIQ_BULK_MODE_CALLBACK, VCHIQ_BULK_RECEIVE);
}
EXPORT_SYMBOL(vchiq_queue_bulk_receive);

VCHIQ_STATUS_T
vchiq_bulk_transmit(VCHIQ_SERVICE_HANDLE_T handle, const void *data, int size,
	void *userdata, VCHIQ_BULK_MODE_T mode)
{
	VCHIQ_STATUS_T status;

	switch (mode) {
	case VCHIQ_BULK_MODE_NOCALLBACK:
	case VCHIQ_BULK_MODE_CALLBACK:
		status = vchiq_bulk_transfer(handle,
			VCHI_MEM_HANDLE_INVALID, (void *)data, size, userdata,
			mode, VCHIQ_BULK_TRANSMIT);
		break;
	case VCHIQ_BULK_MODE_BLOCKING:
		status = vchiq_blocking_bulk_transfer(handle,
			(void *)data, size, VCHIQ_BULK_TRANSMIT);
		break;
	default:
		return VCHIQ_ERROR;
	}

	return status;
}
EXPORT_SYMBOL(vchiq_bulk_transmit);

VCHIQ_STATUS_T
vchiq_bulk_receive(VCHIQ_SERVICE_HANDLE_T handle, void *data, int size,
	void *userdata, VCHIQ_BULK_MODE_T mode)
{
	VCHIQ_STATUS_T status;

	switch (mode) {
	case VCHIQ_BULK_MODE_NOCALLBACK:
	case VCHIQ_BULK_MODE_CALLBACK:
		status = vchiq_bulk_transfer(handle,
			VCHI_MEM_HANDLE_INVALID, data, size, userdata,
			mode, VCHIQ_BULK_RECEIVE);
		break;
	case VCHIQ_BULK_MODE_BLOCKING:
		status = vchiq_blocking_bulk_transfer(handle,
			(void *)data, size, VCHIQ_BULK_RECEIVE);
		break;
	default:
		return VCHIQ_ERROR;
	}

	return status;
}
EXPORT_SYMBOL(vchiq_bulk_receive);

static VCHIQ_STATUS_T
vchiq_blocking_bulk_transfer(VCHIQ_SERVICE_HANDLE_T handle, void *data,
	int size, VCHIQ_BULK_DIR_T dir)
{
	VCHIQ_INSTANCE_T instance;
	VCHIQ_SERVICE_T *service;
	VCHIQ_STATUS_T status;
	struct bulk_waiter_node *waiter = NULL;
	struct list_head *pos;

	service = find_service_by_handle(handle);
	if (!service)
		return VCHIQ_ERROR;

	instance = service->instance;

	unlock_service(service);

	mutex_lock(&instance->bulk_waiter_list_mutex);
	list_for_each(pos, &instance->bulk_waiter_list) {
		if (list_entry(pos, struct bulk_waiter_node,
				list)->pid == current->pid) {
			waiter = list_entry(pos,
				struct bulk_waiter_node,
				list);
			list_del(pos);
			break;
		}
	}
	mutex_unlock(&instance->bulk_waiter_list_mutex);

	if (waiter) {
		VCHIQ_BULK_T *bulk = waiter->bulk_waiter.bulk;
		if (bulk) {
			/* This thread has an outstanding bulk transfer. */
			if ((bulk->data != data) ||
				(bulk->size != size)) {
				/* This is not a retry of the previous one.
				** Cancel the signal when the transfer
				** completes. */
				spin_lock(&bulk_waiter_spinlock);
				bulk->userdata = NULL;
				spin_unlock(&bulk_waiter_spinlock);
			}
		}
	}

	if (!waiter) {
		waiter = kzalloc(sizeof(struct bulk_waiter_node), GFP_KERNEL);
		if (!waiter) {
			vchiq_log_error(vchiq_core_log_level,
				"%s - out of memory", __func__);
			return VCHIQ_ERROR;
		}
	}

	status = vchiq_bulk_transfer(handle, VCHI_MEM_HANDLE_INVALID,
		data, size, &waiter->bulk_waiter, VCHIQ_BULK_MODE_BLOCKING,
		dir);
	if ((status != VCHIQ_RETRY) || fatal_signal_pending(current) ||
		!waiter->bulk_waiter.bulk) {
		VCHIQ_BULK_T *bulk = waiter->bulk_waiter.bulk;
		if (bulk) {
			/* Cancel the signal when the transfer
			 ** completes. */
			spin_lock(&bulk_waiter_spinlock);
			bulk->userdata = NULL;
			spin_unlock(&bulk_waiter_spinlock);
		}
		kfree(waiter);
	} else {
		waiter->pid = current->pid;
		mutex_lock(&instance->bulk_waiter_list_mutex);
		list_add(&waiter->list, &instance->bulk_waiter_list);
		mutex_unlock(&instance->bulk_waiter_list_mutex);
		vchiq_log_info(vchiq_arm_log_level,
				"saved bulk_waiter %x for pid %d",
				(unsigned int)waiter, current->pid);
	}

	return status;
}
 
#ifdef __riscos
/****************************************************************************
*
*   vchiq_get_private_word
*
***************************************************************************/

void *vchiq_get_private_word(VCHIQ_INSTANCE_T instance)
{
	return instance->private_word;
}
#endif
@


1.1
log
@Add initial version of VCHIQ driver
Detail:
  This is a port of the VCHIQ Linux driver, using sources from the Raspberry Pi github
  The Linux version of the driver compiles to two seperate libraries - the kernel library/module and a user-space library for linking with programs. Communication between the two involves ioctl calls to a file in /dev/
  The RISC OS version takes a slightly different route, omitting the ioctl interface and instead using the 'vchiq_shim' code to talk directly to the kernel code, using an API identical to the Linux user space one.
  Programs are able to communicate with the module via SWIs which provide a close match for the C APIs. The module also exports a C header containing wrapper functions to convert the SWIs back to the C API, aiding porting of existing code.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Code is currently dual licensed BSD+GPL, with the GPL code (in vc04_services) being the dominant licence.


Version 0.01. Tagged as 'VCHIQ-0_01'
@
text
@d1 32
a32 13
/*****************************************************************************
* Copyright 2001 - 2011 Broadcom Corporation.  All rights reserved.
*
* Unless you and Broadcom execute a separate written software license
* agreement governing use of this software, this software is licensed to you
* under the terms of the GNU General Public License version 2, available at
* http://www.broadcom.com/licenses/GPLv2.php (the "GPL").
*
* Notwithstanding the above, under no circumstances may you combine this
* software in any way with any other Broadcom software provided under a
* license other than the GPL, without Broadcom's express prior written
* consent.
*****************************************************************************/
d39 1
d41 1
a41 6
#include <stdlib.h>
#define __init
#define __exit
#define printk(...) (void) 0
#define kzalloc(X,Y) malloc(X)
#define kfree free
a45 1
#include "interface/vcos/vcos_logging.h"
d49 1
a49 2
extern VCOS_LOG_CAT_T vchiq_core_log_category;
#define  VCOS_LOG_CATEGORY (&vchiq_core_log_category)
d51 5
a55 1
/* ---- Private Constants and Types -------------------------------------- */
d58 1
a58 1
   VCHIQ_STATE_T *state;
d60 4
a63 1
   int connected;
d66 1
a66 1
   void *private_word;
d70 4
d79 2
a80 2

VCHIQ_STATUS_T vchiq_initialise( VCHIQ_INSTANCE_T *instanceOut
d82 1
a82 1
                                 , void *private_word
d84 1
a84 1
                               )
d86 35
a120 22
   VCHIQ_STATUS_T status = VCHIQ_ERROR;
   VCHIQ_STATE_T *state;
   VCHIQ_INSTANCE_T instance = NULL;

   vcos_log_trace( "%s called", __func__ );

   state = vchiq_get_state();
   if (!state)
   {
      printk( KERN_ERR "%s: videocore not initialized\n", __func__ );
      goto failed;
   }

   instance = kzalloc( sizeof(*instance), GFP_KERNEL );
   if( !instance )
   {
      printk( KERN_ERR "%s: error allocating vchiq instance\n", __func__ );
      goto failed;
   }

   instance->connected = 0;
   instance->state = state;
d122 1
a122 1
   instance->private_word = private_word;
d125 3
a127 3
   *instanceOut = instance;
   
   status = VCHIQ_SUCCESS;
d130 2
a131 1
   vcos_log_trace( "%s(%p): returning %d", __func__, instance, status );
d133 1
a133 1
   return status;
d135 1
d143 1
a143 1
VCHIQ_STATUS_T vchiq_shutdown( VCHIQ_INSTANCE_T instance )
d145 2
a146 4
   VCHIQ_STATUS_T status;
   VCHIQ_STATE_T *state = instance->state;

   vcos_log_trace( "%s(%p) called", __func__, instance );
d148 2
a149 1
   vcos_mutex_lock(&state->mutex);
d151 2
a152 2
   /* Remove all services */
   status = vchiq_shutdown_internal(state, instance);
d154 25
a178 1
   vcos_mutex_unlock(&state->mutex);
d180 1
a180 6
   if (status == VCHIQ_SUCCESS)
      kfree(instance);

   vcos_log_trace( "%s(%p): returning %d", __func__, instance, status );

   return status;
d182 1
d192 1
a192 1
   return instance->connected;
d203 2
a204 2
   VCHIQ_STATUS_T status;
   VCHIQ_STATE_T *state = instance->state;
d206 2
a207 1
   vcos_log_trace( "%s(%p) called", __func__, instance );
d209 7
a215 6
   if (vcos_mutex_lock(&state->mutex) != VCOS_SUCCESS) {
      vcos_log_trace( "%s: call to vcos_mutex_lock failed", __func__ );
      status = VCHIQ_RETRY;
      goto failed;
   }
   status = vchiq_connect_internal(state, instance);
d217 2
a218 2
   if (status == VCHIQ_SUCCESS)
      instance->connected = 1;
d220 1
a220 1
   vcos_mutex_unlock(&state->mutex);
d223 2
a224 1
   vcos_log_trace( "%s(%p): returning %d", __func__, instance, status );
d226 1
a226 1
   return status;
d228 1
d237 29
a265 13
   VCHIQ_INSTANCE_T        instance,
   int                     fourcc,
   VCHIQ_CALLBACK_T        callback,
   void                   *userdata,
   VCHIQ_SERVICE_HANDLE_T *pservice)
{
   VCHIQ_SERVICE_PARAMS_T params;

   params.fourcc        = fourcc;
   params.callback      = callback;
   params.userdata      = userdata;
   params.version       = 0;
   params.version_min   = 0;
d267 4
a270 1
   return vchiq_add_service_params(instance, &params, pservice);
d272 1
d281 32
a312 13
   VCHIQ_INSTANCE_T        instance,
   int                     fourcc,
   VCHIQ_CALLBACK_T        callback,
   void                   *userdata,
   VCHIQ_SERVICE_HANDLE_T *pservice)
{
   VCHIQ_SERVICE_PARAMS_T params;

   params.fourcc        = fourcc;
   params.callback      = callback;
   params.userdata      = userdata;
   params.version       = 0;
   params.version_min   = 0;
d314 1
a314 1
   return vchiq_open_service_params(instance, &params, pservice);
d316 1
d318 9
a326 5
/****************************************************************************
*
*   vchiq_add_service_params
*
***************************************************************************/
d328 7
a334 41
VCHIQ_STATUS_T vchiq_add_service_params(
   VCHIQ_INSTANCE_T              instance,
   const VCHIQ_SERVICE_PARAMS_T *params,
   VCHIQ_SERVICE_HANDLE_T       *pservice)
{
   VCHIQ_STATUS_T status;
   VCHIQ_STATE_T *state = instance->state;
   VCHIQ_SERVICE_T *service;
   int srvstate;

   vcos_log_trace( "%s(%p) called", __func__, instance );

   *pservice = NULL;

   srvstate = vchiq_is_connected( instance )
      ? VCHIQ_SRVSTATE_LISTENING
      : VCHIQ_SRVSTATE_HIDDEN;

   vcos_mutex_lock(&state->mutex);

   service = vchiq_add_service_internal(
      state,
      params,
      srvstate,
      instance);

   vcos_mutex_unlock(&state->mutex);

   if ( service  )
   {
      *pservice = &service->base;
      status = VCHIQ_SUCCESS;
   }
   else
   {
      status = VCHIQ_ERROR;
   }

   vcos_log_trace( "%s(%p): returning %d", __func__, instance, status );

   return status;
d336 1
d338 3
a340 10
/****************************************************************************
*
*   vchiq_open_service_params
*
***************************************************************************/

VCHIQ_STATUS_T vchiq_open_service_params(
   VCHIQ_INSTANCE_T              instance,
   const VCHIQ_SERVICE_PARAMS_T *params,
   VCHIQ_SERVICE_HANDLE_T       *pservice)
d342 1
a342 3
   VCHIQ_STATUS_T   status = VCHIQ_ERROR;
   VCHIQ_STATE_T   *state = instance->state;
   VCHIQ_SERVICE_T *service;
d344 14
a357 1
   vcos_log_trace( "%s(%p) called", __func__, instance );
d359 3
a361 1
   *pservice = NULL;
d363 5
a367 2
   if (!vchiq_is_connected(instance))
      goto failed;
d369 14
a382 1
   vcos_mutex_lock(&state->mutex);
d384 3
a386 4
   service = vchiq_add_service_internal(state,
      params,
      VCHIQ_SRVSTATE_OPENING,
      instance);
d388 79
a466 1
   vcos_mutex_unlock(&state->mutex);
d468 1
a468 17
   if ( service  )
   {
#ifndef __riscos
      status = vchiq_open_service_internal(service, current->pid);
#else
      status = vchiq_open_service_internal(service, 0);
#endif
      if ( status == VCHIQ_SUCCESS )
         *pservice = &service->base;
      else
         vchiq_remove_service(&service->base);
   }

failed:
   vcos_log_trace( "%s(%p): returning %d", __func__, instance, status );

   return status;
d470 1
a470 1

d480 1
a480 1
   return instance->private_word;
a482 10

#ifndef __riscos
EXPORT_SYMBOL(vchiq_initialise);
EXPORT_SYMBOL(vchiq_shutdown);
EXPORT_SYMBOL(vchiq_connect);
EXPORT_SYMBOL(vchiq_add_service);
EXPORT_SYMBOL(vchiq_open_service);
EXPORT_SYMBOL(vchiq_add_service_params);
EXPORT_SYMBOL(vchiq_open_service_params);
#endif
@

