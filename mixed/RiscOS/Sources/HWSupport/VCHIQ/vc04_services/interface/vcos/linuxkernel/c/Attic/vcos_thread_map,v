head	1.2;
access;
symbols
	VCHIQ-0_04:1.1
	VCHIQ-0_03:1.1
	VCHIQ-0_02:1.1
	VCHIQ-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.03.20.24.06;	author jlee;	state dead;
branches;
next	1.1;
commitid	uNS7q3oyxvlpXnGw;

1.1
date	2012.08.19.23.33.53;	author jlee;	state Exp;
branches;
next	;
commitid	QqbCOQ1O2rQgjdhw;


desc
@@


1.2
log
@Update to latest version of VCHIQ sources
Detail:
  This updates our VCHIQ sources to rev 95009dbb77 of the official sources from the Raspberry Pi Linux github repo.
  From our perspective, the important changes are:
  * Provides compatbility with the latest firmware
  * Not compatible with older firmware (older than around Nov 2012?), including the firmware we've typically been using until now
  * Clients of the module now need to specify the version number of the service they're communicating with
  * Source is dual BSD/GPL licenced, with us opting to use the BSD license in order to allow the module to be included in ROM instead of as a softload on disc
  * Ability to build softload version has been removed from the makefile, as it's now a redundant option
  File changes:
  - !MkRom - enable throwback
  - Makefile - Update for building latest sources. Remove special softload rules. Enable ability to build ROM version.
  - c/vchiq_riscos, s/asm - Update RISC OS compatbility layer to directly emulate the corresponding Linux calls now that the VCOS abstraction layer has been removed from the VCHIQ sources
  - h/VCHIQ, h/VCHIQWrap, hdr/VCHIQ - Add the service version number entries to the vchiq_service_t/SERVICE_CREATION_T structs
  - vc04_services/* - Updated to latest official sources, with relevant changes to allow compilation for RISC OS
Admin:
  Tested on Raspberry Pi
  Updated GPU firmware will likely be required!


Version 0.05. Tagged as 'VCHIQ-0_05'
@
text
@/*****************************************************************************
* Copyright 2009 - 2010 Broadcom Corporation.  All rights reserved.
*
* Unless you and Broadcom execute a separate written software license
* agreement governing use of this software, this software is licensed to you
* under the terms of the GNU General Public License version 2, available at
* http://www.broadcom.com/licenses/GPLv2.php (the "GPL").
*
* Notwithstanding the above, under no circumstances may you combine this
* software in any way with any other Broadcom software provided under a
* license other than the GPL, without Broadcom's express prior written
* consent.
*****************************************************************************/

/** Support to allow VCOS thread-related functions to be called from
  * threads that were not created by VCOS.
  */

#include <linux/semaphore.h>
#include <linux/vmalloc.h>
#include <linux/list.h>
#include <linux/sched.h>

#include "vcos_thread_map.h"
#include "interface/vcos/vcos_logging.h"

/*
 * Store the vcos_thread pointer at the end of
 * current kthread stack, right after the thread_info
 * structure.
 *
 * I belive we should be safe here to steal these 4 bytes
 * from the stack, as long as the vcos thread does not use up
 * all the stack available
 *
 * NOTE: This scheme will not work on architectures with stack growing up
 */

/* Shout, if we are not being compiled for ARM kernel */

#ifndef CONFIG_ARM
#error " **** The vcos kthread implementation may not work for non-ARM kernel ****"
#endif

static inline void *to_current_vcos_thread(void)
{
   unsigned long *vcos_data;

   vcos_data = (unsigned long *)((char *)current_thread_info() + sizeof(struct thread_info));

   return (void *)vcos_data;
}


static inline void *to_vcos_thread(struct task_struct *tsk)
{
   unsigned long *vcos_data;

   vcos_data = (unsigned long *)((char *)tsk->stack + sizeof(struct thread_info));

   return (void *)vcos_data;
}

/**
   @@fn uint32_t vcos_add_thread(THREAD_MAP_T *vcos_thread);
*/
uint32_t vcos_add_thread(VCOS_THREAD_T *vcos_thread)
{
   VCOS_THREAD_T **vcos_thread_storage = (VCOS_THREAD_T **)to_current_vcos_thread();

   *vcos_thread_storage = vcos_thread;

   return(0);
}


/**
   @@fn uint32_t vcos_remove_thread(struct task_struct * thread_id);
*/
uint32_t vcos_remove_thread(struct task_struct *thread_id)
{
   /* Remove thread_id -> VCOS_THREAD_T relationship */
   VCOS_THREAD_T **vcos_thread_storage;

   /*
    * We want to be able to build vcos as a loadable module, which
    * means that we can't call get_task_struct. So we assert if we're
    * ever called with thread_id != current.
    */

   BUG_ON( thread_id != current );

   vcos_thread_storage = (VCOS_THREAD_T **)to_vcos_thread(thread_id);

   *(unsigned long *)vcos_thread_storage = 0xCAFEBABE;

   return(0);
}


VCOS_THREAD_T *vcos_kthread_current(void)
{
   VCOS_THREAD_T **vcos_thread_storage = (VCOS_THREAD_T **)to_current_vcos_thread();

   /* If we find this, either the thread is already dead or stack pages of a
    * dead vcos thread are re-allocated to this one.
    *
    * Since there's no way to differentiate between these 2 cases, we just dump
    * the current task name to the log.
    *
    * If the current thread is created using VCOS API, you should *never* see this
    * print.
    * 
    * If its a non-VCOS thread, just let it go ...
    *
    * To debug VCOS, uncomment printk's under the "if" condition below
    *
    */
   if (*vcos_thread_storage == (void *)0xCAFEBABE)
   {
     #if 0
      printk(KERN_DEBUG"****************************************************\n");
      printk(KERN_DEBUG"%s : You have a problem, if \"%s\" is a VCOS thread\n",__func__, current->comm);
      printk(KERN_DEBUG"****************************************************\n");
     #endif
   }

   return *vcos_thread_storage;
}
@


1.1
log
@Add initial version of VCHIQ driver
Detail:
  This is a port of the VCHIQ Linux driver, using sources from the Raspberry Pi github
  The Linux version of the driver compiles to two seperate libraries - the kernel library/module and a user-space library for linking with programs. Communication between the two involves ioctl calls to a file in /dev/
  The RISC OS version takes a slightly different route, omitting the ioctl interface and instead using the 'vchiq_shim' code to talk directly to the kernel code, using an API identical to the Linux user space one.
  Programs are able to communicate with the module via SWIs which provide a close match for the C APIs. The module also exports a C header containing wrapper functions to convert the SWIs back to the C API, aiding porting of existing code.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Code is currently dual licensed BSD+GPL, with the GPL code (in vc04_services) being the dominant licence.


Version 0.01. Tagged as 'VCHIQ-0_01'
@
text
@@

