head	1.2;
access;
symbols
	VCHIQ-0_04:1.1
	VCHIQ-0_03:1.1
	VCHIQ-0_02:1.1
	VCHIQ-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.03.20.24.13;	author jlee;	state dead;
branches;
next	1.1;
commitid	uNS7q3oyxvlpXnGw;

1.1
date	2012.08.19.23.33.57;	author jlee;	state Exp;
branches;
next	;
commitid	QqbCOQ1O2rQgjdhw;


desc
@@


1.2
log
@Update to latest version of VCHIQ sources
Detail:
  This updates our VCHIQ sources to rev 95009dbb77 of the official sources from the Raspberry Pi Linux github repo.
  From our perspective, the important changes are:
  * Provides compatbility with the latest firmware
  * Not compatible with older firmware (older than around Nov 2012?), including the firmware we've typically been using until now
  * Clients of the module now need to specify the version number of the service they're communicating with
  * Source is dual BSD/GPL licenced, with us opting to use the BSD license in order to allow the module to be included in ROM instead of as a softload on disc
  * Ability to build softload version has been removed from the makefile, as it's now a redundant option
  File changes:
  - !MkRom - enable throwback
  - Makefile - Update for building latest sources. Remove special softload rules. Enable ability to build ROM version.
  - c/vchiq_riscos, s/asm - Update RISC OS compatbility layer to directly emulate the corresponding Linux calls now that the VCOS abstraction layer has been removed from the VCHIQ sources
  - h/VCHIQ, h/VCHIQWrap, hdr/VCHIQ - Add the service version number entries to the vchiq_service_t/SERVICE_CREATION_T structs
  - vc04_services/* - Updated to latest official sources, with relevant changes to allow compilation for RISC OS
Admin:
  Tested on Raspberry Pi
  Updated GPU firmware will likely be required!


Version 0.05. Tagged as 'VCHIQ-0_05'
@
text
@/* 
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef VCOS_PLATFORM_H
#define VCOS_PLATFORM_H

#include <stdio.h>
#include "kernel.h"

#define VCOS_HAVE_RTOS         1
#define VCOS_HAVE_SEMAPHORE    1
#define VCOS_HAVE_EVENT        1
#define VCOS_HAVE_QUEUE        0
#define VCOS_HAVE_LEGACY_ISR   0
#define VCOS_HAVE_TIMER        1
#define VCOS_HAVE_CANCELLATION_SAFE_TIMER 0
#define VCOS_HAVE_MEMPOOL      0
#define VCOS_HAVE_ISR          0
#define VCOS_HAVE_ATOMIC_FLAGS 1
#define VCOS_HAVE_BLOCK_POOL   0
#define VCOS_HAVE_ONCE         1
#define VCOS_HAVE_FILE         0
#define VCOS_HAVE_USER_BUF     0
#define VCOS_HAVE_CFG          1
#define VCOS_HAVE_SPINLOCK     0
#define VCOS_HAVE_CMD          1
#define VCOS_HAVE_EVENT_FLAGS  1

/* Exclude many VCOS classes which don't have predicates */
#define VCOS_TLS_H
#define VCOS_NAMED_MUTEX_H
#define VCOS_REENTRANT_MUTEX_H
#define VCOS_NAMED_SEMAPHORE_H
#define VCOS_QUICKSLOW_MUTEX_H
/*#define VCOS_INIT_H */
/*#define VCOS_MEM_H */
/*#define VCOS_STRING_H */

/* unimplemented stuff */
typedef int VCOS_SEMAPHORE_T;
typedef int VCOS_ONCE_T;
typedef int VCOS_TIMER_T;
typedef int VCOS_THREAD_ATTR_T;

typedef unsigned int          VCOS_UNSIGNED;
typedef unsigned int          VCOS_OPTION;

typedef enum
{
    VCOS_O_RDONLY   = 0,
    VCOS_O_WRONLY   = 1,
    VCOS_O_RDWR     = 2,
    VCOS_O_TRUNC    = 4,
} VCOS_FILE_FLAGS_T;

typedef FILE *VCOS_FILE_T;

#define VCOS_THREAD_PRI_MIN   1
#define VCOS_THREAD_PRI_MAX   255

#define VCOS_THREAD_PRI_INCREASE -1
#define VCOS_THREAD_PRI_HIGHEST  VCOS_THREAD_PRI_MIN
#define VCOS_THREAD_PRI_LOWEST   VCOS_THREAD_PRI_MAX
#define VCOS_THREAD_PRI_NORMAL ((VCOS_THREAD_PRI_MAX+VCOS_THREAD_PRI_MIN)/2)
#define VCOS_THREAD_PRI_ABOVE_NORMAL (VCOS_THREAD_PRI_NORMAL + VCOS_THREAD_PRI_INCREASE)
#define VCOS_THREAD_PRI_REALTIME VCOS_THREAD_PRI_HIGHEST

#define _VCOS_AFFINITY_DEFAULT 0
#define _VCOS_AFFINITY_CPU0 0
#define _VCOS_AFFINITY_CPU1 0
#define _VCOS_AFFINITY_MASK 0
#define VCOS_CAN_SET_STACK_ADDR  0

#define VCOS_TICKS_PER_SECOND 100

typedef int VCOS_ATOMIC_FLAGS_T;
typedef struct
{
	uint32_t pollword; /* 1 if free, 0 if claimed */
	uint32_t rt_handle; /* Current owner. Not really needed, but might be useful for debugging? */
} VCOS_MUTEX_T;

typedef struct
{
	uint32_t pollword; /* 1 if signalled, 0 if unsignalled */
} VCOS_EVENT_T;

#include "interface/vcos/generic/vcos_generic_event_flags.h"

/* Threads */

//VCOS_INLINE_DECL void _vcos_thread_sem_wait(void);
//VCOS_INLINE_DECL void _vcos_thread_sem_post(VCOS_THREAD_T *);

typedef struct
{
	uint32_t rt_handle;
	bool stop;
	void *retval;
	uint32_t stopped;
	_kernel_stack_chunk *stack;

	VCOS_THREAD_ENTRY_FN_T thread_function;
	void *data;
} VCOS_THREAD_T;

/* Logging */

VCOSPRE_ const char * VCOSPOST_ _vcos_log_level(void);
#define _VCOS_LOG_LEVEL() _vcos_log_level()

#define __FUNCTION__ __func__

/* Memory barriers */

extern void vcos_wmb(volatile void *);
extern void vcos_rmb(void);

#include "interface/vcos/generic/vcos_common.h"

#endif
@


1.1
log
@Add initial version of VCHIQ driver
Detail:
  This is a port of the VCHIQ Linux driver, using sources from the Raspberry Pi github
  The Linux version of the driver compiles to two seperate libraries - the kernel library/module and a user-space library for linking with programs. Communication between the two involves ioctl calls to a file in /dev/
  The RISC OS version takes a slightly different route, omitting the ioctl interface and instead using the 'vchiq_shim' code to talk directly to the kernel code, using an API identical to the Linux user space one.
  Programs are able to communicate with the module via SWIs which provide a close match for the C APIs. The module also exports a C header containing wrapper functions to convert the SWIs back to the C API, aiding porting of existing code.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Code is currently dual licensed BSD+GPL, with the GPL code (in vc04_services) being the dominant licence.


Version 0.01. Tagged as 'VCHIQ-0_01'
@
text
@@

