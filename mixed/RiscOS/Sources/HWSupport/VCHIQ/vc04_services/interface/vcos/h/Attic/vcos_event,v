head	1.2;
access;
symbols
	VCHIQ-0_04:1.1
	VCHIQ-0_03:1.1
	VCHIQ-0_02:1.1
	VCHIQ-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.03.20.23.58;	author jlee;	state dead;
branches;
next	1.1;
commitid	uNS7q3oyxvlpXnGw;

1.1
date	2012.08.19.23.33.45;	author jlee;	state Exp;
branches;
next	;
commitid	QqbCOQ1O2rQgjdhw;


desc
@@


1.2
log
@Update to latest version of VCHIQ sources
Detail:
  This updates our VCHIQ sources to rev 95009dbb77 of the official sources from the Raspberry Pi Linux github repo.
  From our perspective, the important changes are:
  * Provides compatbility with the latest firmware
  * Not compatible with older firmware (older than around Nov 2012?), including the firmware we've typically been using until now
  * Clients of the module now need to specify the version number of the service they're communicating with
  * Source is dual BSD/GPL licenced, with us opting to use the BSD license in order to allow the module to be included in ROM instead of as a softload on disc
  * Ability to build softload version has been removed from the makefile, as it's now a redundant option
  File changes:
  - !MkRom - enable throwback
  - Makefile - Update for building latest sources. Remove special softload rules. Enable ability to build ROM version.
  - c/vchiq_riscos, s/asm - Update RISC OS compatbility layer to directly emulate the corresponding Linux calls now that the VCOS abstraction layer has been removed from the VCHIQ sources
  - h/VCHIQ, h/VCHIQWrap, hdr/VCHIQ - Add the service version number entries to the vchiq_service_t/SERVICE_CREATION_T structs
  - vc04_services/* - Updated to latest official sources, with relevant changes to allow compilation for RISC OS
Admin:
  Tested on Raspberry Pi
  Updated GPU firmware will likely be required!


Version 0.05. Tagged as 'VCHIQ-0_05'
@
text
@/*
 * Copyright (c) 2010-2011 Broadcom. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*=============================================================================
VideoCore OS Abstraction Layer - public header file for events
=============================================================================*/

#ifndef VCOS_EVENT_H
#define VCOS_EVENT_H

#ifdef __cplusplus
extern "C" {
#endif

#include "interface/vcos/vcos_types.h"
#include "vcos_platform.h"

/** 
  * \file
  *
  * An event is akin to the Win32 auto-reset event.
  *
  *
  * Signalling an event will wake up one waiting thread only. Once one
  * thread has been woken the event atomically returns to the unsignalled
  * state.
  * 
  * If no threads are waiting on the event when it is signalled it remains
  * signalled.
  *
  * This is almost, but not quite, completely unlike the "event flags"
  * object based on Nucleus event groups and ThreadX event flags.
  *
  * In particular, it should be similar in speed to a semaphore, unlike
  * the event flags.
  */

/**
  * Create an event instance.
  *
  * @@param event  Filled in with constructed event.
  * @@param name   Name of the event (for debugging)
  *
  * @@return VCOS_SUCCESS on success, or error code.
  */
VCOS_INLINE_DECL
VCOS_STATUS_T vcos_event_create(VCOS_EVENT_T *event, const char *name);

#ifndef vcos_event_signal

/**
  * Signal the event. The event will return to being unsignalled
  * after exactly one waiting thread has been woken up. If no
  * threads are waiting it remains signalled.
  *
  * @@param event The event to signal
  */
VCOS_INLINE_DECL
void vcos_event_signal(VCOS_EVENT_T *event);

/**
  * Wait for the event.
  *
  * @@param event The event to wait for
  * @@return VCOS_SUCCESS on success, VCOS_EAGAIN if the wait was interrupted.
  */
VCOS_INLINE_DECL
VCOS_STATUS_T vcos_event_wait(VCOS_EVENT_T *event);

/**
  * Try event, but don't block.
  *
  * @@param event The event to try
  * @@return VCOS_SUCCESS on success, VCOS_EAGAIN if the event is not currently signalled
  */
VCOS_INLINE_DECL
VCOS_STATUS_T vcos_event_try(VCOS_EVENT_T *event);

#endif

/*
 * Destroy an event.
 */
VCOS_INLINE_DECL
void vcos_event_delete(VCOS_EVENT_T *event);

#ifdef __cplusplus
}
#endif

#endif


@


1.1
log
@Add initial version of VCHIQ driver
Detail:
  This is a port of the VCHIQ Linux driver, using sources from the Raspberry Pi github
  The Linux version of the driver compiles to two seperate libraries - the kernel library/module and a user-space library for linking with programs. Communication between the two involves ioctl calls to a file in /dev/
  The RISC OS version takes a slightly different route, omitting the ioctl interface and instead using the 'vchiq_shim' code to talk directly to the kernel code, using an API identical to the Linux user space one.
  Programs are able to communicate with the module via SWIs which provide a close match for the C APIs. The module also exports a C header containing wrapper functions to convert the SWIs back to the C API, aiding porting of existing code.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Code is currently dual licensed BSD+GPL, with the GPL code (in vc04_services) being the dominant licence.


Version 0.01. Tagged as 'VCHIQ-0_01'
@
text
@@

