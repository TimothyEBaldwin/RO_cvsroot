head	1.2;
access;
symbols
	NetBSD-1_19:1.2
	NetBSD-1_18:1.2
	NetBSD-1_17:1.2
	NetBSD-1_16:1.2
	NetBSD-1_15:1.2
	NetBSD-1_14:1.2
	NetBSD-1_13:1.2
	NetBSD-1_12:1.2
	NetBSD-1_09-1:1.2
	NetBSD-1_11:1.2
	NetBSD-1_10:1.2
	NetBSD-1_09:1.2
	NetBSD-1_08:1.2
	NetBSD-1_07:1.2
	NetBSD-1_06:1.2
	NetBSD-1_05:1.2
	NetBSD-1_04:1.2
	NetBSD-1_03:1.2
	NetBSD-1_02:1.2
	NetBSD-1_01:1.2
	NetBSD-1_00:1.2
	NetBSD-0_99:1.2
	NetBSD-0_98:1.2
	NetBSD-0_97:1.2
	NetBSD-0_96:1.2
	NetBSD-0_95:1.2
	NetBSD-0_94:1.2
	NetBSD-0_93:1.2
	NetBSD-0_92:1.2
	NetBSD-0_91:1.2
	NetBSD-0_90:1.2
	NetBSD-0_89:1.2
	NetBSD-0_88:1.2
	NetBSD-0_87:1.2
	NetBSD-0_86:1.2
	NetBSD-0_85:1.2
	NetBSD-0_84:1.2
	NetBSD-0_83:1.2
	NetBSD-0_82:1.2
	NetBSD-0_81:1.2
	NetBSD-0_80:1.2
	NetBSD-0_79:1.2
	NetBSD-0_78:1.2
	NetBSD-0_77:1.2
	NetBSD-0_76:1.2
	NetBSD-0_75:1.2
	NetBSD-0_74:1.2
	NetBSD-0_73:1.2
	NetBSD-0_72:1.2
	NetBSD-0_71:1.2
	NetBSD-0_70:1.2
	NetBSD-0_69:1.2
	NetBSD-0_68:1.2
	NetBSD-0_67:1.2
	NetBSD-0_66:1.2
	NetBSD-0_65:1.2
	NetBSD-0_64:1.2
	NetBSD-0_63:1.2
	NetBSD-0_62:1.2
	NetBSD-0_61:1.2
	NetBSD-0_60:1.2
	NetBSD-0_59:1.2
	NetBSD-0_58:1.2
	NetBSD-0_57:1.2
	NetBSD-0_56:1.2
	NetBSD-0_55:1.2
	NetBSD-0_54:1.2
	NetBSD-0_53:1.2
	NetBSD-0_52:1.2
	NetBSD-0_51:1.1
	NetBSD-0_50:1.1
	NetBSD-0_49:1.1
	NetBSD-0_48:1.1
	NetBSD-0_47:1.1
	NetBSD-0_46:1.1
	NetBSD-0_45:1.1
	NetBSD-0_44:1.1
	NetBSD-0_43:1.1
	NetBSD-0_42:1.1
	NetBSD-0_41:1.1
	NetBSD-0_40:1.1
	NetBSD-0_39:1.1
	NetBSD-0_38:1.1
	NetBSD-0_37:1.1
	NetBSD-0_36:1.1
	NetBSD-0_35:1.1
	NetBSD-0_34:1.1
	NetBSD-0_33:1.1
	NetBSD-0_32:1.1
	NetBSD-0_31:1.1
	NetBSD-0_30:1.1
	NetBSD-0_29:1.1
	RO_5_07:1.1
	NetBSD-0_28:1.1
	NetBSD-0_27:1.1
	NetBSD-0_26:1.1
	NetBSD-0_25:1.1
	NetBSD-0_24:1.1
	NetBSD-0_23:1.1
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.1
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2010.07.21.23.57.23;	author jlee;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.19;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@/* $NetBSD: wsconsio.h,v 1.92 2009/12/31 05:08:05 macallan Exp $ */

/*
 * Copyright (c) 1996, 1997 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_WSCONS_WSCONSIO_H_
#define	_DEV_WSCONS_WSCONSIO_H_

/*
 * WSCONS (wsdisplay, wskbd, wsmouse) exported interfaces.
 *
 * Ioctls are all in group 'W'.  Ioctl number space is partitioned like:
 *	0-31	keyboard ioctls (WSKBDIO)
 *	32-63	mouse ioctls (WSMOUSEIO)
 *	64-95	display ioctls (WSDISPLAYIO)
 *	96-127	mux ioctls (WSMUXIO)
 *	128-255	reserved for future use
 */

#include <sys/types.h>
#include <sys/ioccom.h>
#ifndef __riscos
#include <dev/wscons/wsksymvar.h>
#endif


/*
 * Common event structure (used by keyboard and mouse)
 */
struct wscons_event {
	u_int		type;
	int		value;
	struct timespec	time;
};
#define WSEVENT_VERSION	1

/* Event type definitions.  Comment for each is information in value. */
#define	WSCONS_EVENT_KEY_UP		1	/* key code */
#define	WSCONS_EVENT_KEY_DOWN		2	/* key code */
#define	WSCONS_EVENT_ALL_KEYS_UP	3	/* void */
#define	WSCONS_EVENT_MOUSE_UP		4	/* button # (leftmost = 0) */
#define	WSCONS_EVENT_MOUSE_DOWN		5	/* button # (leftmost = 0)  */
#define	WSCONS_EVENT_MOUSE_DELTA_X	6	/* X delta amount */
#define	WSCONS_EVENT_MOUSE_DELTA_Y	7	/* Y delta amount */
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_X	8	/* X location */
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_Y	9	/* Y location */
#define	WSCONS_EVENT_MOUSE_DELTA_Z	10	/* Z delta amount */
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_Z	11	/* Z location */
#define	WSCONS_EVENT_SCREEN_SWITCH	12	/* New screen number */
#define	WSCONS_EVENT_ASCII		13	/* key code is already ascii */
#define	WSCONS_EVENT_MOUSE_DELTA_W	14	/* W delta amount */
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_W	15	/* W location */


/*
 * Keyboard ioctls (0 - 31)
 */

/* Get keyboard type. */
#define	WSKBDIO_GTYPE		_IOR('W', 0, u_int)
#define	WSKBD_TYPE_LK201	1	/* lk-201 */
#define	WSKBD_TYPE_LK401	2	/* lk-401 */
#define	WSKBD_TYPE_PC_XT	3	/* PC-ish, XT scancode */
#define	WSKBD_TYPE_PC_AT	4	/* PC-ish, AT scancode */
#define	WSKBD_TYPE_USB		5	/* USB, XT scancode */
#define	WSKBD_TYPE_NEXT		6	/* NeXT keyboard */
#define	WSKBD_TYPE_HPC_KBD	7	/* HPC bultin keyboard */
#define	WSKBD_TYPE_HPC_BTN	8	/* HPC/PsPC buttons */
#define	WSKBD_TYPE_ARCHIMEDES	9	/* Archimedes keyboard */
#define	WSKBD_TYPE_RISCPC	10	/* RiscPC keyboard, resembling AT codes */
#define	WSKBD_TYPE_ADB		11	/* ADB */
#define	WSKBD_TYPE_HIL		12	/* HIL keyboard */
#define	WSKBD_TYPE_AMIGA	13	/* Amiga keyboard */
#define	WSKBD_TYPE_MAPLE	14	/* Dreamcast Maple keyboard */
#define	WSKBD_TYPE_ATARI	15	/* Atari keyboard */
#define	WSKBD_TYPE_SUN		16	/* Sun Type3/4 */
#define	WSKBD_TYPE_SUN5		17	/* Sun Type5 */
#define	WSKBD_TYPE_SGI		18	/* SGI keyboard */
#define	WSKBD_TYPE_MATRIXKP	19	/* Matrix keypads/buttons */
#define	WSKBD_TYPE_EWS4800	20	/* NEC EWS4800 */
#define	WSKBD_TYPE_BLUETOOTH	21	/* Bluetooth keyboard */
#define	WSKBD_TYPE_ZAURUS	22	/* Sharp Zaurus keyboard */

/* Manipulate the keyboard bell. */
struct wskbd_bell_data {
	u_int	which;				/* values to get/set */
#define	WSKBD_BELL_DOPITCH	0x1		/* get/set pitch */
#define	WSKBD_BELL_DOPERIOD	0x2		/* get/set period */
#define	WSKBD_BELL_DOVOLUME	0x4		/* get/set volume */
#define	WSKBD_BELL_DOALL	0x7		/* all of the above */
	u_int	pitch;				/* pitch, in Hz */
	u_int	period;				/* period, in milliseconds */
	u_int	volume;				/* percentage of max volume */
};

#define	WSKBDIO_BELL		_IO('W', 1)
#define	WSKBDIO_COMPLEXBELL	_IOW('W', 2, struct wskbd_bell_data)
#define	WSKBDIO_SETBELL		_IOW('W', 3, struct wskbd_bell_data)
#define	WSKBDIO_GETBELL		_IOR('W', 4, struct wskbd_bell_data)
#define	WSKBDIO_SETDEFAULTBELL	_IOW('W', 5, struct wskbd_bell_data)
#define	WSKBDIO_GETDEFAULTBELL	_IOR('W', 6, struct wskbd_bell_data)

/* Manipulate the emulation key repeat settings. */
struct wskbd_keyrepeat_data {
	u_int	which;				/* values to get/set */
#define	WSKBD_KEYREPEAT_DODEL1	0x1		/* get/set del1 */
#define	WSKBD_KEYREPEAT_DODELN	0x2		/* get/set delN */
#define	WSKBD_KEYREPEAT_DOALL	0x3		/* all of the above */
	u_int	del1;				/* delay before first, ms */
	u_int	delN;				/* delay before rest, ms */
};

#define	WSKBDIO_SETKEYREPEAT	_IOW('W', 7, struct wskbd_keyrepeat_data)
#define	WSKBDIO_GETKEYREPEAT	_IOR('W', 8, struct wskbd_keyrepeat_data)
#define	WSKBDIO_SETDEFAULTKEYREPEAT _IOW('W', 9, struct wskbd_keyrepeat_data)
#define	WSKBDIO_GETDEFAULTKEYREPEAT _IOR('W', 10, struct wskbd_keyrepeat_data)

/* Get/set keyboard leds */
#define	WSKBD_LED_CAPS		0x01
#define	WSKBD_LED_NUM		0x02
#define	WSKBD_LED_SCROLL	0x04
#define	WSKBD_LED_COMPOSE	0x08

#define	WSKBDIO_SETLEDS		_IOW('W', 11, int)
#define	WSKBDIO_GETLEDS		_IOR('W', 12, int)

/* Manipulate keysym groups. */
struct wskbd_map_data {
	u_int	maplen;				/* number of entries in map */
#define	WSKBDIO_MAXMAPLEN	65536
	struct wscons_keymap *map;		/* map to get or set */
};
#define	WSKBDIO_GETMAP		_IOWR('W', 13, struct wskbd_map_data)
#define	WSKBDIO_SETMAP		_IOW('W', 14, struct wskbd_map_data)
#define	WSKBDIO_GETENCODING	_IOR('W', 15, kbd_t)
#define	WSKBDIO_SETENCODING	_IOW('W', 16, kbd_t)

/* internal use only */
#define	WSKBDIO_SETMODE		_IOW('W', 19, int)
#define	WSKBDIO_GETMODE		_IOR('W', 20, int)
#define	WSKBD_TRANSLATED	0
#define	WSKBD_RAW		1

#define	WSKBDIO_SETKEYCLICK	_IOW('W', 21, int)
#define	WSKBDIO_GETKEYCLICK	_IOR('W', 22, int)

/* Manipulate the scrolling modifiers and mode */
struct wskbd_scroll_data {
	u_int		which;
#define	WSKBD_SCROLL_DOMODIFIER		0x01
#define	WSKBD_SCROLL_DOMODE		0x02
#define	WSKBD_SCROLL_DOALL		0x03
	u_int		mode;
#define	WSKBD_SCROLL_MODE_NORMAL	0x00
#define	WSKBD_SCROLL_MODE_HOLD		0x01
	u_int		modifier;
};

#define	WSKBDIO_GETSCROLL	_IOR('W', 23, struct wskbd_scroll_data)
#define	WSKBDIO_SETSCROLL	_IOW('W', 24, struct wskbd_scroll_data)

/* Set event struct version */
#define WSKBDIO_SETVERSION	_IOW('W', 25, int)
#define WSKBDIO_EVENT_VERSION	WSEVENT_VERSION

/*
 * Mouse ioctls (32 - 63)
 */

/* Get mouse type */
#define	WSMOUSEIO_GTYPE		_IOR('W', 32, u_int)
#define	WSMOUSE_TYPE_VSXXX	1	/* DEC serial */
#define	WSMOUSE_TYPE_PS2	2	/* PS/2-compatible */
#define	WSMOUSE_TYPE_USB	3	/* USB mouse */
#define	WSMOUSE_TYPE_LMS	4	/* Logitech busmouse */
#define	WSMOUSE_TYPE_MMS	5	/* Microsoft InPort mouse */
#define	WSMOUSE_TYPE_TPANEL	6	/* Generic Touch Panel */
#define	WSMOUSE_TYPE_NEXT	7	/* NeXT mouse */
#define	WSMOUSE_TYPE_ARCHIMEDES	8	/* Archimedes mouse */
#define	WSMOUSE_TYPE_HIL	9	/* HIL mouse */
#define	WSMOUSE_TYPE_AMIGA	10	/* Amiga mouse */
#define	WSMOUSE_TYPE_MAXINE	11	/* DEC maxine mouse */
#define	WSMOUSE_TYPE_MAPLE	12	/* Dreamcast Maple mouse */
#define	WSMOUSE_TYPE_SGI	13	/* SGI mouse */
#define	WSMOUSE_TYPE_BLUETOOTH	14	/* Bluetooth mouse */
#define WSMOUSE_TYPE_ADB	15	/* ADB mouse or touchpad */
#define WSMOUSE_TYPE_PSEUDO	16	/* not actually a mouse */

/* Set resolution.  Not applicable to all mouse types. */
#define	WSMOUSEIO_SRES		_IOW('W', 33, u_int)
#define	WSMOUSE_RES_MIN		0
#define	WSMOUSE_RES_DEFAULT	75
#define	WSMOUSE_RES_MAX		100

/* Set scale factor (num / den).  Not applicable to all mouse types. */
#define	WSMOUSEIO_SSCALE	_IOW('W', 34, u_int[2])

/* Set sample rate.  Not applicable to all mouse types. */
#define	WSMOUSEIO_SRATE		_IOW('W', 35, u_int)
#define	WSMOUSE_RATE_MIN	0
#define	WSMOUSE_RATE_DEFAULT	50
#define	WSMOUSE_RATE_MAX	100

/* Set/get sample coordinates for calibration */
#define	WSMOUSE_CALIBCOORDS_MAX		16
#define	WSMOUSE_CALIBCOORDS_RESET	-1
struct wsmouse_calibcoords {
	int minx, miny;		/* minimum value of X/Y */
	int maxx, maxy;		/* maximum value of X/Y */
	int samplelen;		/* number of samples available or
				   WSMOUSE_CALIBCOORDS_RESET for raw mode */
	struct wsmouse_calibcoord {
		int rawx, rawy;	/* raw coordinate */
		int x, y;	/* translated coordinate */
	} samples[WSMOUSE_CALIBCOORDS_MAX];	/* sample coordinates */
};
#define	WSMOUSEIO_SCALIBCOORDS	_IOW('W', 36, struct wsmouse_calibcoords)
#define	WSMOUSEIO_GCALIBCOORDS	_IOR('W', 37, struct wsmouse_calibcoords)

/* get device id for calibration */
struct wsmouse_id {
	u_int type;
#define	WSMOUSE_ID_TYPE_UIDSTR	0	/* ID string (null terminated) */
	u_int length;
#define	WSMOUSE_ID_MAXLEN	256
	u_char data[WSMOUSE_ID_MAXLEN];
};
#define	WSMOUSEIO_GETID		_IOWR('W', 38, struct wsmouse_id)

/* Get/set button repeating. */
struct wsmouse_repeat {
	unsigned long	wr_buttons;
	unsigned int	wr_delay_first;
	unsigned int	wr_delay_decrement;
	unsigned int	wr_delay_minimum;
};
#define WSMOUSEIO_GETREPEAT	_IOR('W', 39, struct wsmouse_repeat)
#define WSMOUSEIO_SETREPEAT	_IOW('W', 40, struct wsmouse_repeat)

#define WSMOUSEIO_SETVERSION	_IOW('W', 41, int)
#define WSMOUSE_EVENT_VERSION	WSEVENT_VERSION

/*
 * Display ioctls (64 - 95)
 */

/* Get display type */
#define	WSDISPLAYIO_GTYPE	_IOR('W', 64, u_int)
#define	WSDISPLAY_TYPE_UNKNOWN	0	/* unknown */
#define	WSDISPLAY_TYPE_PM_MONO	1	/* DEC [23]100 mono */
#define	WSDISPLAY_TYPE_PM_COLOR	2	/* DEC [23]100 color */
#define	WSDISPLAY_TYPE_CFB	3	/* DEC TC CFB (CX) */
#define	WSDISPLAY_TYPE_XCFB	4	/* DEC `maxine' onboard fb */
#define	WSDISPLAY_TYPE_MFB	5	/* DEC TC MFB (MX) */
#define	WSDISPLAY_TYPE_SFB	6	/* DEC TC SFB (HX) */
#define	WSDISPLAY_TYPE_ISAVGA	7	/* (generic) ISA VGA */
#define	WSDISPLAY_TYPE_PCIVGA	8	/* (generic) PCI VGA */
#define	WSDISPLAY_TYPE_TGA	9	/* DEC PCI TGA */
#define	WSDISPLAY_TYPE_SFBP	10	/* DEC TC SFB+ (HX+) */
#define	WSDISPLAY_TYPE_PCIMISC	11	/* (generic) PCI misc. disp. */
#define	WSDISPLAY_TYPE_NEXTMONO	12	/* NeXT mono display */
#define	WSDISPLAY_TYPE_PX	13	/* DEC TC PX */
#define	WSDISPLAY_TYPE_PXG	14	/* DEC TC PXG */
#define	WSDISPLAY_TYPE_TX	15	/* DEC TC TX */
#define	WSDISPLAY_TYPE_HPCFB	16	/* Handheld/PalmSize PC */
#define	WSDISPLAY_TYPE_VIDC	17	/* Acorn/ARM VIDC */
#define	WSDISPLAY_TYPE_SPX	18	/* DEC SPX (VS3100/VS4000) */
#define	WSDISPLAY_TYPE_GPX	19	/* DEC GPX (uVAX/VS2K/VS3100 */
#define	WSDISPLAY_TYPE_LCG	20	/* DEC LCG (VS4000) */
#define	WSDISPLAY_TYPE_VAX_MONO	21	/* DEC VS2K/VS3100 mono */
#define	WSDISPLAY_TYPE_SB_P9100	22	/* Tadpole SPARCbook P9100 */
#define	WSDISPLAY_TYPE_EGA	23	/* (generic) EGA */
#define	WSDISPLAY_TYPE_DCPVR	24	/* Dreamcast PowerVR */
#define	WSDISPLAY_TYPE_GATOR	25	/* HP Gator */
#define	WSDISPLAY_TYPE_TOPCAT	26	/* HP TopCat */
#define	WSDISPLAY_TYPE_RENAISSANCE	27	/* HP Renaissance */
#define	WSDISPLAY_TYPE_CATSEYE	28	/* HP CatsEye */
#define	WSDISPLAY_TYPE_DAVINCI	29	/* HP DaVinci */
#define	WSDISPLAY_TYPE_TIGER	30	/* HP Tiger */
#define	WSDISPLAY_TYPE_HYPERION	31	/* HP Hyperion */
#define	WSDISPLAY_TYPE_AMIGACC	32	/* Amiga custom chips */
#define	WSDISPLAY_TYPE_SUN24	33	/* Sun 24 bit framebuffers */
#define	WSDISPLAY_TYPE_NEWPORT	34	/* SGI Newport */
#define	WSDISPLAY_TYPE_GR2	35	/* SGI GR2 */
#define	WSDISPLAY_TYPE_SUNCG12	36	/* Sun cgtwelve */
#define	WSDISPLAY_TYPE_SUNCG14	37	/* Sun cgfourteen */
#define	WSDISPLAY_TYPE_SUNTCX	38	/* Sun TCX */
#define	WSDISPLAY_TYPE_SUNFFB	39	/* Sun creator FFB */
#define	WSDISPLAY_TYPE_STI	40	/* HP STI framebuffers */
#define	WSDISPLAY_TYPE_HDLCD	41	/* Hitachi HD44780 based LCDs */
#define	WSDISPLAY_TYPE_VESA	42	/* VESA BIOS framebuffer */
#define	WSDISPLAY_TYPE_XILFB 	43 	/* Xilinx TFT cores */
#define WSDISPLAY_TYPE_LIGHT	44	/* SGI Light (a.k.a. Entry/Starter) */
#define WSDISPLAY_TYPE_GENFB	45	/* generic nondescript framebuffer */
#define WSDISPLAY_TYPE_CRIME	46	/* SGI O2 */
#define WSDISPLAY_TYPE_PXALCD	47	/* PXA2x0 LCD controller */
#define WSDISPLAY_TYPE_AG10	48	/* Fujitsu AG-10e */
#define WSDISPLAY_TYPE_DL	49	/* DisplayLink DL-1x0/DL-1x5 */
#define WSDISPLAY_TYPE_XVR1000	50	/* Sun XVR-1000 */

/* Basic display information.  Not applicable to all display types. */
struct wsdisplay_fbinfo {
	u_int	height;				/* height in pixels */
	u_int	width;				/* width in pixels */
	u_int	depth;				/* bits per pixel */
	u_int	cmsize;				/* color map size (entries) */
};
#define	WSDISPLAYIO_GINFO	_IOR('W', 65, struct wsdisplay_fbinfo)

/* Colormap operations.  Not applicable to all display types. */
struct wsdisplay_cmap {
	u_int	index;				/* first element (0 origin) */
	u_int	count;				/* number of elements */
	u_char	*red;				/* red color map elements */
	u_char	*green;				/* green color map elements */
	u_char	*blue;				/* blue color map elements */
};
#define	WSDISPLAYIO_GETCMAP	_IOW('W', 66, struct wsdisplay_cmap)
#define	WSDISPLAYIO_PUTCMAP	_IOW('W', 67, struct wsdisplay_cmap)

/* Video control.  Not applicable to all display types. */
#define	WSDISPLAYIO_GVIDEO	_IOR('W', 68, u_int)
#define	WSDISPLAYIO_SVIDEO	_IOW('W', 69, u_int)
#define	WSDISPLAYIO_VIDEO_OFF	0	/* video off */
#define	WSDISPLAYIO_VIDEO_ON	1	/* video on */

/* Cursor control.  Not applicable to all display types. */
struct wsdisplay_curpos {			/* cursor "position" */
	u_int x, y;
};

struct wsdisplay_cursor {
	u_int	which;				/* values to get/set */
#define	WSDISPLAY_CURSOR_DOCUR		0x01	/* get/set enable */
#define	WSDISPLAY_CURSOR_DOPOS		0x02	/* get/set pos */
#define	WSDISPLAY_CURSOR_DOHOT		0x04	/* get/set hot spot */
#define	WSDISPLAY_CURSOR_DOCMAP		0x08	/* get/set cmap */
#define	WSDISPLAY_CURSOR_DOSHAPE	0x10	/* get/set img/mask */
#define	WSDISPLAY_CURSOR_DOALL		0x1f	/* all of the above */
	u_int	enable;				/* enable/disable */
	struct wsdisplay_curpos pos;		/* position */
	struct wsdisplay_curpos hot;		/* hot spot */
	struct wsdisplay_cmap cmap;		/* color map info */
	struct wsdisplay_curpos size;		/* bit map size */
	u_char *image;				/* image data */
	u_char *mask;				/* mask data */
};

/* Cursor control: get and set position */
#define	WSDISPLAYIO_GCURPOS	_IOR('W', 70, struct wsdisplay_curpos)
#define	WSDISPLAYIO_SCURPOS	_IOW('W', 71, struct wsdisplay_curpos)

/* Cursor control: get maximum size */
#define	WSDISPLAYIO_GCURMAX	_IOR('W', 72, struct wsdisplay_curpos)

/* Cursor control: get/set cursor attributes/shape */
#define	WSDISPLAYIO_GCURSOR	_IOWR('W', 73, struct wsdisplay_cursor)
#define	WSDISPLAYIO_SCURSOR	_IOW('W', 74, struct wsdisplay_cursor)

/* Display mode: Emulation (text) vs. Mapped (graphics) mode */
#define	WSDISPLAYIO_GMODE	_IOR('W', 75, u_int)
#define	WSDISPLAYIO_SMODE	_IOW('W', 76, u_int)
#define	WSDISPLAYIO_MODE_EMUL	0	/* emulation (text) mode */
#define	WSDISPLAYIO_MODE_MAPPED	1	/* mapped (graphics) mode */
#define	WSDISPLAYIO_MODE_DUMBFB	2	/* mapped (graphics) fb mode */


/*
 * XXX WARNING
 * XXX The following wsdisplay definitions are very preliminary and are likely
 * XXX to be changed without care about backwards compatibility!
 */
struct wsdisplay_font {
	const char *name;
	int firstchar, numchars;
	int encoding;
#define	WSDISPLAY_FONTENC_ISO 0
#define	WSDISPLAY_FONTENC_IBM 1
#define	WSDISPLAY_FONTENC_PCVT 2
#define	WSDISPLAY_FONTENC_ISO7 3 /* greek */
#define	WSDISPLAY_FONTENC_ISO2 4 /* east european */
	u_int fontwidth, fontheight, stride;
#define	WSDISPLAY_MAXFONTSZ	(512*1024)
	int bitorder, byteorder;
#define	WSDISPLAY_FONTORDER_KNOWN 0	/* i.e, no need to convert */
#define	WSDISPLAY_FONTORDER_L2R 1
#define	WSDISPLAY_FONTORDER_R2L 2
	void *data;
};
#define	WSDISPLAYIO_LDFONT	_IOW('W', 77, struct wsdisplay_font)

struct wsdisplay_addscreendata {
	int idx; /* screen index */
	char *screentype;
	char *emul;
};
#define	WSDISPLAYIO_ADDSCREEN	_IOW('W', 78, struct wsdisplay_addscreendata)

struct wsdisplay_delscreendata {
	int idx; /* screen index */
	int flags;
#define	WSDISPLAY_DELSCR_FORCE 1
};
#define	WSDISPLAYIO_DELSCREEN	_IOW('W', 79, struct wsdisplay_delscreendata)

struct wsdisplay_usefontdata {
	char *name;
};
#define	WSDISPLAYIO_SFONT	_IOW('W', 80, struct wsdisplay_usefontdata)

/* Obsolete, replaced by WSMUXIO_{ADD,REMOVE}_DEVICE */
struct wsdisplay_kbddata {
	int op;
#define	_O_WSDISPLAY_KBD_ADD 0
#define	_O_WSDISPLAY_KBD_DEL 1
	int idx;
};
#define	_O_WSDISPLAYIO_SETKEYBOARD	_IOWR('W', 81, struct wsdisplay_kbddata)

/* Misc control.  Not applicable to all display types. */
struct wsdisplay_param {
	int param;
#define	WSDISPLAYIO_PARAM_BACKLIGHT	1
#define	WSDISPLAYIO_PARAM_BRIGHTNESS	2
#define	WSDISPLAYIO_PARAM_CONTRAST	3
	int min, max, curval;
	int reserved[4];
};
#define	WSDISPLAYIO_GETPARAM	_IOWR('W', 82, struct wsdisplay_param)
#define	WSDISPLAYIO_SETPARAM	_IOWR('W', 83, struct wsdisplay_param)

#define	WSDISPLAYIO_GETACTIVESCREEN	_IOR('W', 84, int)

/* Character functions */
struct wsdisplay_char {
	int row, col;
	uint16_t letter;
	uint8_t background, foreground;
	char flags;
#define	WSDISPLAY_CHAR_BRIGHT 1
#define	WSDISPLAY_CHAR_BLINK  2
};
#define	WSDISPLAYIO_GETWSCHAR	_IOWR('W', 85, struct wsdisplay_char)
#define	WSDISPLAYIO_PUTWSCHAR	_IOWR('W', 86, struct wsdisplay_char)

/* Manipulate the scrolling values (how many lines to scroll) */

struct wsdisplay_scroll_data {
	u_int		which;
#define	WSDISPLAY_SCROLL_DOFASTLINES	0x01
#define	WSDISPLAY_SCROLL_DOSLOWLINES	0x02
#define	WSDISPLAY_SCROLL_DOALL		0x03
	u_int		fastlines;
	u_int		slowlines;
};

#define	WSDISPLAYIO_DGSCROLL	_IOR('W', 87, struct wsdisplay_scroll_data)
#define	WSDISPLAYIO_DSSCROLL	_IOW('W', 88, struct wsdisplay_scroll_data)

struct wsdisplay_msgattrs {
	int default_attrs, default_bg, default_fg;
	int kernel_attrs, kernel_bg, kernel_fg;
};

#define	WSDISPLAYIO_GMSGATTRS	_IOR('W', 89, struct wsdisplay_msgattrs)
#define	WSDISPLAYIO_SMSGATTRS	_IOW('W', 90, struct wsdisplay_msgattrs)

#define	WSDISPLAYIO_GBORDER	_IOR('W', 91, int)
#define	WSDISPLAYIO_SBORDER	_IOW('W', 92, int)

/* Splash screen control */
#define	WSDISPLAYIO_SSPLASH	_IOW('W', 93, int)
#define	WSDISPLAYIO_SPROGRESS	_IOW('W', 94, int)

/* XXX NOT YET DEFINED */
/* Mapping information retrieval. */

/* Display information: number of bytes per row, may be same as pixels */
#define	WSDISPLAYIO_LINEBYTES	_IOR('W', 95, u_int)

/* WSMUXIO_OINJECTEVENT	was 96, but does not conflict because arg sizes */

#define WSDISPLAYIO_SETVERSION	_IOW('W', 96, int)
#define WSDISPLAYIO_EVENT_VERSION	WSEVENT_VERSION

/*
 * Mux ioctls (97 - 127)
 */

struct wsmux_device {
	int type;
#define	WSMUX_MOUSE	1
#define	WSMUX_KBD	2
#define	WSMUX_MUX	3
	int idx;
};
#define	WSMUXIO_ADD_DEVICE	_IOW('W', 97, struct wsmux_device)
#define	WSMUX_ADD_DEVICE	WSMUXIO_ADD_DEVICE /* XXX compat */
#define	WSMUXIO_REMOVE_DEVICE	_IOW('W', 98, struct wsmux_device)
#define	WSMUX_REMOVE_DEVICE	WSMUXIO_REMOVE_DEVICE /* XXX compat */

#define	WSMUX_MAXDEV 32
struct wsmux_device_list {
	int ndevices;
	struct wsmux_device devices[WSMUX_MAXDEV];
};
#define	WSMUXIO_LIST_DEVICES	_IOWR('W', 99, struct wsmux_device_list)
#define	WSMUX_LIST_DEVICES	WSMUXIO_LIST_DEVICES /* XXX compat */

#define	WSMUXIO_INJECTEVENT	_IOW('W', 100, struct wscons_event)
#define	WSMUX_INJECTEVENT	WSMUXIO_INJECTEVENT /* XXX compat */

#endif /* _DEV_WSCONS_WSCONSIO_H_ */
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/* $NetBSD: wsconsio.h,v 1.31.2.1 2000/07/07 09:49:17 hannken Exp $ */
d43 2
a44 1
 *	96-255	reserved for future use
d49 3
a51 1
//#include <dev/wscons/wsksymvar.h>
d62 1
d76 4
d88 22
a109 9
#define		WSKBD_TYPE_LK201	1	/* lk-201 */
#define		WSKBD_TYPE_LK401	2	/* lk-401 */
#define		WSKBD_TYPE_PC_XT	3	/* PC-ish, XT scancode */
#define		WSKBD_TYPE_PC_AT	4	/* PC-ish, AT scancode */
#define		WSKBD_TYPE_USB		5	/* USB, XT scancode */
#define		WSKBD_TYPE_NEXT		6	/* NeXT keyboard */
#define		WSKBD_TYPE_HPC_KBD	7	/* HPC bultin keyboard */
#define		WSKBD_TYPE_HPC_BTN	8	/* HPC/PsPC buttons */
#define		WSKBD_TYPE_ARCHIMEDES	9	/* Archimedes keyboard */
d114 4
a121 4
#define		WSKBD_BELL_DOPITCH	0x1		/* get/set pitch */
#define		WSKBD_BELL_DOPERIOD	0x2		/* get/set period */
#define		WSKBD_BELL_DOVOLUME	0x4		/* get/set volume */
#define		WSKBD_BELL_DOALL	0x7		/* all of the above */
d133 3
a138 3
#define		WSKBD_KEYREPEAT_DODEL1	0x1		/* get/set del1 */
#define		WSKBD_KEYREPEAT_DODELN	0x2		/* get/set delN */
#define		WSKBD_KEYREPEAT_DOALL	0x3		/* all of the above */
d142 2
a143 4
#define	WSKBDIO_SETDEFAULTKEYREPEAT \
	    _IOW('W', 9, struct wskbd_keyrepeat_data)
#define	WSKBDIO_GETDEFAULTKEYREPEAT \
	    _IOR('W', 10, struct wskbd_keyrepeat_data)
d146 4
a149 4
#define		WSKBD_LED_CAPS		0x01
#define		WSKBD_LED_NUM		0x02
#define		WSKBD_LED_SCROLL	0x04
#define		WSKBD_LED_COMPOSE	0x08
d157 1
d160 4
a163 4
#define WSKBDIO_GETMAP		_IOWR('W', 13, struct wskbd_map_data)
#define WSKBDIO_SETMAP		_IOW('W', 14, struct wskbd_map_data)
#define WSKBDIO_GETENCODING	_IOR('W', 15, kbd_t)
#define WSKBDIO_SETENCODING	_IOW('W', 16, kbd_t)
d166 26
a191 4
#define WSKBDIO_SETMODE		_IOW('W', 19, int)
#define WSKBDIO_GETMODE		_IOR('W', 20, int)
#define		WSKBD_TRANSLATED	0
#define		WSKBD_RAW		1
d199 16
a214 8
#define		WSMOUSE_TYPE_VSXXX	1	/* DEC serial */
#define		WSMOUSE_TYPE_PS2	2	/* PS/2-compatible */
#define		WSMOUSE_TYPE_USB	3	/* USB mouse */
#define		WSMOUSE_TYPE_LMS	4	/* Logitech busmouse */
#define		WSMOUSE_TYPE_MMS	5	/* Microsoft InPort mouse */
#define		WSMOUSE_TYPE_TPANEL	6	/* Generic Touch Panel */
#define 	WSMOUSE_TYPE_NEXT	7	/* NeXT mouse */
#define		WSMOUSE_TYPE_ARCHIMEDES	8	/* Archimedes mouse */
d217 4
a220 4
#define	WSMOUSEIO_SRES		_IOR('W', 33, u_int)
#define		WSMOUSE_RES_MIN		0
#define		WSMOUSE_RES_DEFAULT	75
#define		WSMOUSE_RES_MAX		100
d223 1
a223 1
#define	WSMOUSEIO_SSCALE	_IOR('W', 34, u_int[2])
d226 4
a229 4
#define	WSMOUSEIO_SRATE		_IOR('W', 35, u_int)
#define		WSMOUSE_RATE_MIN	0
#define		WSMOUSE_RATE_DEFAULT	50
#define		WSMOUSE_RATE_MAX	100
d232 2
a233 2
#define WSMOUSE_CALIBCOORDS_MAX		16
#define WSMOUSE_CALIBCOORDS_RESET	-1
d247 23
d276 51
a326 24
#define		WSDISPLAY_TYPE_UNKNOWN	0	/* unknown */
#define		WSDISPLAY_TYPE_PM_MONO	1	/* DEC [23]100 mono */
#define		WSDISPLAY_TYPE_PM_COLOR	2	/* DEC [23]100 color */
#define		WSDISPLAY_TYPE_CFB	3	/* DEC TC CFB (CX) */
#define		WSDISPLAY_TYPE_XCFB	4	/* DEC `maxine' onboard fb */
#define		WSDISPLAY_TYPE_MFB	5	/* DEC TC MFB (MX) */
#define		WSDISPLAY_TYPE_SFB	6	/* DEC TC SFB (HX) */
#define		WSDISPLAY_TYPE_ISAVGA	7	/* (generic) ISA VGA */
#define		WSDISPLAY_TYPE_PCIVGA	8	/* (generic) PCI VGA */
#define		WSDISPLAY_TYPE_TGA	9	/* DEC PCI TGA */
#define		WSDISPLAY_TYPE_SFBP	10	/* DEC TC SFB+ (HX+) */
#define		WSDISPLAY_TYPE_PCIMISC	11	/* (generic) PCI misc. disp. */
#define		WSDISPLAY_TYPE_NEXTMONO	12	/* NeXT mono display */
#define		WSDISPLAY_TYPE_PX	13	/* DEC TC PX */
#define		WSDISPLAY_TYPE_PXG	14	/* DEC TC PXG */
#define		WSDISPLAY_TYPE_TX	15	/* DEC TC TX */
#define		WSDISPLAY_TYPE_HPCFB	16	/* Handheld/PalmSize PC */
#define		WSDISPLAY_TYPE_VIDC	17	/* Acorn/ARM VIDC */
#define		WSDISPLAY_TYPE_SPX	18	/* DEC SPX (VS3100/VS4000) */
#define		WSDISPLAY_TYPE_GPX	19	/* DEC GPX (uVAX/VS2K/VS3100 */
#define		WSDISPLAY_TYPE_LCG	20	/* DEC LCG (VS4000) */
#define		WSDISPLAY_TYPE_VAX_MONO	21	/* DEC VS2K/VS3100 mono */
#define		WSDISPLAY_TYPE_SB_P9100	22	/* Tadpole SPARCbook P9100 */
#define		WSDISPLAY_TYPE_EGA	23	/* (generic) EGA */
d345 2
a346 2
#define WSDISPLAYIO_GETCMAP	_IOW('W', 66, struct wsdisplay_cmap)
#define WSDISPLAYIO_PUTCMAP	_IOW('W', 67, struct wsdisplay_cmap)
d351 2
a352 2
#define		WSDISPLAYIO_VIDEO_OFF	0	/* video off */
#define		WSDISPLAYIO_VIDEO_ON	1	/* video on */
d361 6
a374 6
#define		WSDISPLAY_CURSOR_DOCUR		0x01	/* get/set enable */
#define		WSDISPLAY_CURSOR_DOPOS		0x02	/* get/set pos */
#define		WSDISPLAY_CURSOR_DOHOT		0x04	/* get/set hot spot */
#define		WSDISPLAY_CURSOR_DOCMAP		0x08	/* get/set cmap */
#define		WSDISPLAY_CURSOR_DOSHAPE	0x10	/* get/set img/mask */
#define		WSDISPLAY_CURSOR_DOALL		0x1f	/* all of the above */
d390 4
a393 2
#define		WSDISPLAYIO_MODE_EMUL	0	/* emulation (text) mode */
#define		WSDISPLAYIO_MODE_MAPPED	1	/* mapped (graphics) mode */
d397 1
a397 1
 * XXX The following definitions are very preliminary and are likely
d401 1
a401 1
	char *name;
d404 7
a410 4
#define WSDISPLAY_FONTENC_ISO 0
#define WSDISPLAY_FONTENC_IBM 1
#define WSDISPLAY_FONTENC_PCVT 2
	int fontwidth, fontheight, stride;
d412 1
a412 1
#define	WSDISPLAY_FONTORDER_KNOWN 0		/* i.e, no need to convert */
d417 1
a417 1
#define WSDISPLAYIO_LDFONT	_IOW('W', 77, struct wsdisplay_font)
d424 1
a424 1
#define WSDISPLAYIO_ADDSCREEN _IOW('W', 78, struct wsdisplay_addscreendata)
d429 1
a429 1
#define WSDISPLAY_DELSCR_FORCE 1
d431 1
a431 1
#define WSDISPLAYIO_DELSCREEN _IOW('W', 79, struct wsdisplay_delscreendata)
d436 1
a436 1
#define WSDISPLAYIO_USEFONT	_IOW('W', 80, struct wsdisplay_usefontdata)
d438 1
a438 1
/* Replaced by WSMUX_{ADD,REMOVE}_DEVICE */
d441 2
a442 2
#define _O_WSDISPLAY_KBD_ADD 0
#define _O_WSDISPLAY_KBD_DEL 1
d445 56
a500 1
#define _O_WSDISPLAYIO_SETKEYBOARD _IOWR('W', 81, struct wsdisplay_kbddata)
d505 11
a515 2
/* Mux ioctls (96 - 127) */
#define WSMUX_INJECTEVENT	_IOW('W', 96, struct wscons_event)
d519 3
a521 3
#define WSMUX_MOUSE	1
#define WSMUX_KBD	2
#define WSMUX_MUX	3
d524 4
a527 2
#define WSMUX_ADD_DEVICE	_IOW('W', 97, struct wsmux_device)
#define WSMUX_REMOVE_DEVICE	_IOW('W', 98, struct wsmux_device)
d529 1
a529 1
#define WSMUX_MAXDEV 32
d534 5
a538 1
#define WSMUX_LIST_DEVICES	_IOWR('W', 99, struct wsmux_device_list)
@

