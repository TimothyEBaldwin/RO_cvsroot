head	1.3;
access;
symbols
	NetBSD-1_19:1.3
	NetBSD-1_18:1.3
	NetBSD-1_17:1.3
	NetBSD-1_16:1.3
	NetBSD-1_15:1.3
	NetBSD-1_14:1.3
	NetBSD-1_13:1.3
	NetBSD-1_12:1.3
	NetBSD-1_09-1:1.3
	NetBSD-1_11:1.3
	NetBSD-1_10:1.3
	NetBSD-1_09:1.3
	NetBSD-1_08:1.3
	NetBSD-1_07:1.3
	NetBSD-1_06:1.3
	NetBSD-1_05:1.3
	NetBSD-1_04:1.3
	NetBSD-1_03:1.3
	NetBSD-1_02:1.3
	NetBSD-1_01:1.3
	NetBSD-1_00:1.3
	NetBSD-0_99:1.3
	NetBSD-0_98:1.3
	NetBSD-0_97:1.3
	NetBSD-0_96:1.3
	NetBSD-0_95:1.3
	NetBSD-0_94:1.3
	NetBSD-0_93:1.3
	NetBSD-0_92:1.3
	NetBSD-0_91:1.3
	NetBSD-0_90:1.3
	NetBSD-0_89:1.3
	NetBSD-0_88:1.3
	NetBSD-0_87:1.3
	NetBSD-0_86:1.3
	NetBSD-0_85:1.3
	NetBSD-0_84:1.3
	NetBSD-0_83:1.3
	NetBSD-0_82:1.3
	NetBSD-0_81:1.3
	NetBSD-0_80:1.3
	NetBSD-0_79:1.3
	NetBSD-0_78:1.3
	NetBSD-0_77:1.3
	NetBSD-0_76:1.3
	NetBSD-0_75:1.3
	NetBSD-0_74:1.3
	NetBSD-0_73:1.3
	NetBSD-0_72:1.3
	NetBSD-0_71:1.3
	NetBSD-0_70:1.3
	NetBSD-0_69:1.3
	NetBSD-0_68:1.3
	NetBSD-0_67:1.3
	NetBSD-0_66:1.3
	NetBSD-0_65:1.3
	NetBSD-0_64:1.3
	NetBSD-0_63:1.3
	NetBSD-0_62:1.3
	NetBSD-0_61:1.3
	NetBSD-0_60:1.3
	NetBSD-0_59:1.3
	NetBSD-0_58:1.3
	NetBSD-0_57:1.3
	NetBSD-0_56:1.3
	NetBSD-0_55:1.3
	NetBSD-0_54:1.3
	NetBSD-0_53:1.3
	NetBSD-0_52:1.3
	NetBSD-0_51:1.2
	NetBSD-0_50:1.2
	NetBSD-0_49:1.2
	NetBSD-0_48:1.2
	NetBSD-0_47:1.2
	NetBSD-0_46:1.2
	NetBSD-0_45:1.2
	NetBSD-0_44:1.2
	NetBSD-0_43:1.2
	NetBSD-0_42:1.2
	NetBSD-0_41:1.2
	NetBSD-0_40:1.2
	NetBSD-0_39:1.2
	NetBSD-0_38:1.1
	NetBSD-0_37:1.1
	NetBSD-0_36:1.1
	NetBSD-0_35:1.1
	NetBSD-0_34:1.1
	NetBSD-0_33:1.1
	NetBSD-0_32:1.1
	NetBSD-0_31:1.1;
locks; strict;
comment	@# @;


1.3
date	2010.07.21.23.57.16;	author jlee;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.24.23.13.53;	author jballance;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.30.02.34.19;	author jballance;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@#! /usr/bin/awk -f
#	$NetBSD: devlist2h.awk,v 1.14 2005/12/11 12:24:00 christos Exp $
#
# RISC OS version JB 20041213
#
#
# Copyright (c) 1995, 1996 Christopher G. Demetriou
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#      This product includes software developed by Christopher G. Demetriou.
# 4. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
BEGIN {
	nproducts = nvendors = blanklines = 0
        if (os="RISC_OS") {
        dfile="^.dev.usb.h.usbdevs_data"
        hfile="^.dev.usb.h.usbdevs"
        }else{
	dfile="usbdevs_data.h"
	hfile="usbdevs.h"
	}
}
NR == 1 {
	VERSION = $0
	gsub("\\$", "", VERSION)
	gsub(/ $/, "", VERSION)

	if (os == "NetBSD")
		printf("/*\t$NetBSD" "$\t*/\n\n") > dfile
	else if (os == "FreeBSD")
		printf("/*\t$FreeBSD" "$\t*/\n\n") > dfile
	else if (os == "OpenBSD")
		printf("/*\t$OpenBSD" "$\t*/\n\n") > dfile
        else if (os == "RISC_OS")
                printf("/*\t$RISC OS" "$\t*/\n\n") > dfile
	else
		printf("/* ??? */\n\n") > dfile
	printf("/*\n") > dfile
	printf(" * THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT EDIT.\n") \
	    > dfile
	printf(" *\n") > dfile
	printf(" * generated from:\n") > dfile
	printf(" *\t%s\n", VERSION) > dfile
	printf(" */\n") > dfile

	if (os == "NetBSD")
		printf("/*\t$NetBSD" "$\t*/\n\n") > hfile
	else if (os == "FreeBSD")
		printf("/*\t$FreeBSD" "$\t*/\n\n") > hfile
	else if (os == "OpenBSD")
		printf("/*\t$OpenBSD" "$\t*/\n\n") > hfile
        else if (os == "RISC_OS")
                printf("/*\t$RISC OS" "$\t*/\n\n") > hfile
	else
		printf("/* ??? */\n\n") > hfile
	printf("/*\n") > hfile
	printf(" * THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT EDIT.\n") \
	    > hfile
	printf(" *\n") > hfile
	printf(" * generated from:\n") > hfile
	printf(" *\t%s\n", VERSION) > hfile
	printf(" */\n") > hfile

	next
}
NF > 0 && $1 == "vendor" {
	nvendors++

	vendorindex[$2] = nvendors;		# record index for this name, for later.
	vendors[nvendors, 1] = $2;		# name
	vendors[nvendors, 2] = $3;		# id
	printf("#define\tUSB_VENDOR_%s\t%s\t", vendors[nvendors, 1],
	    vendors[nvendors, 2]) > hfile

	i = 3; f = 4;

	# comments
	ocomment = oparen = 0
	if (f <= NF) {
		printf("\t/* ") > hfile
		ocomment = 1;
	}
	while (f <= NF) {
		if ($f == "#") {
			printf("(") > hfile
			oparen = 1
			f++
			continue
		}
		if (oparen) {
			printf("%s", $f) > hfile
			if (f < NF)
				printf(" ") > hfile
			f++
			continue
		}
		vendors[nvendors, i] = $f
		printf("%s", vendors[nvendors, i]) > hfile
		if (f < NF)
			printf(" ") > hfile
		i++; f++;
	}
	if (oparen)
		printf(")") > hfile
	if (ocomment)
		printf(" */") > hfile
	printf("\n") > hfile

	next
}
NF > 0 && $1 == "product" {
	nproducts++

	products[nproducts, 1] = $2;		# vendor name
	products[nproducts, 2] = $3;		# product id
	products[nproducts, 3] = $4;		# id
	printf("#define\tUSB_PRODUCT_%s_%s\t%s\t", products[nproducts, 1],
	    products[nproducts, 2], products[nproducts, 3]) > hfile

	i=4; f = 5;

	# comments
	ocomment = oparen = 0
	if (f <= NF) {
		printf("\t/* ") > hfile
		ocomment = 1;
	}
	while (f <= NF) {
		if ($f == "#") {
			printf("(") > hfile
			oparen = 1
			f++
			continue
		}
		if (oparen) {
			printf("%s", $f) > hfile
			if (f < NF)
				printf(" ") > hfile
			f++
			continue
		}
		products[nproducts, i] = $f
		printf("%s", products[nproducts, i]) > hfile
		if (f < NF)
			printf(" ") > hfile
		i++; f++;
	}
	if (oparen)
		printf(")") > hfile
	if (ocomment)
		printf(" */") > hfile
	printf("\n") > hfile

	next
}
{
	if ($0 == "")
		blanklines++
	print $0 > hfile
	if (blanklines < 2)
		print $0 > dfile
}
END {
	# print out the match tables

	printf("\n") > dfile

	printf("const struct usb_vendor usb_vendors[] = {\n") > dfile
	for (i = 1; i <= nvendors; i++) {
		printf("\t{\n") > dfile
		printf("\t    USB_VENDOR_%s,\n", vendors[i, 1]) \
		    > dfile

		printf("\t    \"") > dfile
		j = 3;
		needspace = 0;
		while ((i, j) in vendors) {
			if (needspace)
				printf(" ") > dfile
			printf("%s", vendors[i, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
		printf("\t},\n") > dfile
	}
	printf("};\n") > dfile
	printf("const int usb_nvendors = %d;\n", nvendors) > dfile

	printf("\n") > dfile

	printf("const struct usb_product usb_products[] = {\n") > dfile
	for (i = 1; i <= nproducts; i++) {
		printf("\t{\n") > dfile
		printf("\t    USB_VENDOR_%s, USB_PRODUCT_%s_%s,\n",
		    products[i, 1], products[i, 1], products[i, 2]) \
		    > dfile

		printf("\t    \"") > dfile
		j = 4;
		needspace = 0;
		while ((i, j) in products) {
			if (needspace)
				printf(" ") > dfile
			printf("%s", products[i, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
		printf("\t},\n") > dfile
	}
	printf("};\n") > dfile
	printf("const int usb_nproducts = %d;\n", nproducts) > dfile

	close(dfile)
	close(hfile)
}
@


1.2
log
@	Update of NetBSD elements (except c.ohci) to track NetBSD current
	from mid April 2005.
	Inclusion of Mods to c.ehci (from Dan) to correctly handle low
	speed interrupt devices beyond USB2 hubs (i.e. keyboards and mice).
	Mod to EHCI resetting in service call handler to better cope with
	USBDriver being restarted 'underneath' it.
Detail:
Admin:
	Castle, Dan Ellis, NetBSD added IP. Tested at Castle. Will be
	beta tested at this revision level before full release.


Version 0.39. Tagged as 'NetBSD-0_39'
@
text
@d2 1
a2 1
#	$NetBSD: devlist2h.awk,v 1.13 2005/03/04 05:03:19 mycroft Exp $
d43 1
a43 1
}
@


1.1
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d2 1
a2 1
#	$NetBSD: devlist2h.awk,v 1.11 2003/12/15 07:32:21 jmc Exp $
d37 4
a40 4
	if (os="RISC_OS") {
	dfile="^.dev.usb.h.usbdevs_data"
	hfile="^.dev.usb.h.usbdevs"
	}else{
d43 1
a43 1
	}
d48 1
d56 2
a57 2
	else if (os == "RISC_OS")
		printf("/*\t$RISC OS" "$\t*/\n\n") > dfile
d74 2
a75 2
	else if (os == "RISC_OS")
		printf("/*\t$RISC OS" "$\t*/\n\n") > hfile
d190 2
a191 2
	printf("const struct usb_knowndev usb_knowndevs[] = {\n") > dfile
	for (i = 1; i <= nproducts; i++) {
d193 1
a193 2
		printf("\t    USB_VENDOR_%s, USB_PRODUCT_%s_%s,\n",
		    products[i, 1], products[i, 1], products[i, 2]) \
a194 3
		printf("\t    ") > dfile
		printf("0") > dfile
		printf(",\n") > dfile
a195 1
		vendi = vendorindex[products[i, 1]];
d199 1
a199 1
		while ((vendi, j) in vendors) {
d202 1
a202 1
			printf("%s", vendors[vendi, j]) > dfile
d207 13
a233 21
	for (i = 1; i <= nvendors; i++) {
		printf("\t{\n") > dfile
		printf("\t    USB_VENDOR_%s, 0,\n", vendors[i, 1]) \
		    > dfile
		printf("\t    USB_KNOWNDEV_NOPROD,\n") \
		    > dfile
		printf("\t    \"") > dfile
		j = 3;
		needspace = 0;
		while ((i, j) in vendors) {
			if (needspace)
				printf(" ") > dfile
			printf("%s", vendors[i, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
		printf("\t    NULL,\n") > dfile
		printf("\t},\n") > dfile
	}
	printf("\t{ 0, 0, 0, NULL, NULL, }\n") > dfile
d235 2
@

