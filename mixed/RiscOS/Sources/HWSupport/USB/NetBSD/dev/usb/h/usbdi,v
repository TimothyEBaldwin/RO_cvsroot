head	1.8;
access;
symbols
	NetBSD-1_19:1.8
	NetBSD-1_18:1.8
	NetBSD-1_17:1.8
	NetBSD-1_16:1.8
	NetBSD-1_15:1.8
	NetBSD-1_14:1.8
	NetBSD-1_13:1.8
	NetBSD-1_12:1.8
	NetBSD-1_09-1:1.8
	NetBSD-1_11:1.8
	NetBSD-1_10:1.8
	NetBSD-1_09:1.8
	NetBSD-1_08:1.8
	NetBSD-1_07:1.8
	NetBSD-1_06:1.8
	NetBSD-1_05:1.8
	NetBSD-1_04:1.8
	NetBSD-1_03:1.8
	NetBSD-1_02:1.8
	NetBSD-1_01:1.8
	NetBSD-1_00:1.8
	NetBSD-0_99:1.8
	NetBSD-0_98:1.8
	NetBSD-0_97:1.8
	NetBSD-0_96:1.8
	NetBSD-0_95:1.8
	NetBSD-0_94:1.8
	NetBSD-0_93:1.8
	NetBSD-0_92:1.8
	NetBSD-0_91:1.8
	NetBSD-0_90:1.8
	NetBSD-0_89:1.8
	NetBSD-0_88:1.8
	NetBSD-0_87:1.8
	NetBSD-0_86:1.8
	NetBSD-0_85:1.8
	NetBSD-0_84:1.8
	NetBSD-0_83:1.8
	NetBSD-0_82:1.8
	NetBSD-0_81:1.8
	NetBSD-0_80:1.8
	NetBSD-0_79:1.8
	NetBSD-0_78:1.8
	NetBSD-0_77:1.8
	NetBSD-0_76:1.8
	NetBSD-0_75:1.8
	NetBSD-0_74:1.8
	NetBSD-0_73:1.8
	NetBSD-0_72:1.8
	NetBSD-0_71:1.8
	NetBSD-0_70:1.8
	NetBSD-0_69:1.8
	NetBSD-0_68:1.8
	NetBSD-0_67:1.8
	NetBSD-0_66:1.8
	NetBSD-0_65:1.8
	NetBSD-0_64:1.8
	NetBSD-0_63:1.8
	NetBSD-0_62:1.8
	NetBSD-0_61:1.8
	NetBSD-0_60:1.8
	NetBSD-0_59:1.8
	NetBSD-0_58:1.8
	NetBSD-0_57:1.8
	NetBSD-0_56:1.8
	NetBSD-0_55:1.8
	NetBSD-0_54:1.8
	NetBSD-0_53:1.8
	NetBSD-0_52:1.8
	NetBSD-0_51:1.7
	NetBSD-0_50:1.7
	NetBSD-0_49:1.7
	NetBSD-0_48:1.7
	NetBSD-0_47:1.7
	NetBSD-0_46:1.7
	NetBSD-0_45:1.7
	NetBSD-0_44:1.7
	NetBSD-0_43:1.7
	NetBSD-0_42:1.7
	NetBSD-0_41:1.7
	NetBSD-0_40:1.7
	NetBSD-0_39:1.7
	NetBSD-0_38:1.7
	NetBSD-0_37:1.7
	NetBSD-0_36:1.7
	NetBSD-0_35:1.7
	NetBSD-0_34:1.7
	NetBSD-0_33:1.7
	NetBSD-0_32:1.6
	NetBSD-0_31:1.6
	NetBSD-0_30:1.5
	NetBSD-0_29:1.5
	RO_5_07:1.5
	NetBSD-0_28:1.5
	NetBSD-0_27:1.4
	NetBSD-0_26:1.3
	NetBSD-0_25:1.2
	NetBSD-0_24:1.2
	NetBSD-0_23:1.2
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.2
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.8
date	2010.07.21.23.57.21;	author jlee;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.21.22.30.19;	author jballance;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.30.02.34.22;	author jballance;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.12.14.47.42;	author jballance;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.01.18.10.37;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.30.14.50.37;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.21.20.49.20;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.18;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@/*      $NetBSD: usbdi.h,v 1.64 2004/10/23 13:26:34 augustss Exp $      */
/*      $FreeBSD: src/sys/dev/usb/usbdi.h,v 1.18 1999/11/17 22:33:49 n_hibma Exp $      */

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _USBDI_H_
#define _USBDI_H_

#ifdef __riscos
#include <sys/cdefs.h>
#endif
typedef struct usbd_bus		*usbd_bus_handle;
typedef struct usbd_device	*usbd_device_handle;
typedef struct usbd_interface	*usbd_interface_handle;
typedef struct usbd_pipe	*usbd_pipe_handle;
typedef struct usbd_xfer	*usbd_xfer_handle;
typedef void			*usbd_private_handle;

typedef enum {		/* keep in sync with usbd_status_msgs */
	USBD_NORMAL_COMPLETION = 0, /* must be 0 */
	USBD_IN_PROGRESS,	/* 1 */
	/* errors */
	USBD_PENDING_REQUESTS,	/* 2 */
	USBD_NOT_STARTED,	/* 3 */
	USBD_INVAL,		/* 4 */
	USBD_NOMEM,		/* 5 */
	USBD_CANCELLED,		/* 6 */
	USBD_BAD_ADDRESS,	/* 7 */
	USBD_IN_USE,		/* 8 */
	USBD_NO_ADDR,		/* 9 */
	USBD_SET_ADDR_FAILED,	/* 10 */
	USBD_NO_POWER,		/* 11 */
	USBD_TOO_DEEP,		/* 12 */
	USBD_IOERROR,		/* 13 */
	USBD_NOT_CONFIGURED,	/* 14 */
	USBD_TIMEOUT,		/* 15 */
	USBD_SHORT_XFER,	/* 16 */
	USBD_STALLED,		/* 17 */
	USBD_INTERRUPTED,	/* 18 */

	USBD_ERROR_MAX		/* must be last */
} usbd_status;

typedef void (*usbd_callback)(usbd_xfer_handle, usbd_private_handle,
			      usbd_status);

/* Open flags */
#define USBD_EXCLUSIVE_USE	0x01

/* Use default (specified by ep. desc.) interval on interrupt pipe */
#define USBD_DEFAULT_INTERVAL	(-1)

/* Request flags */
#define USBD_NO_COPY		0x01	/* do not copy data to DMA buffer */
#define USBD_SYNCHRONOUS	0x02	/* wait for completion */
/* in usb.h #define USBD_SHORT_XFER_OK	0x04*/	/* allow short reads */
#define USBD_FORCE_SHORT_XFER	0x08	/* force last short packet on write */

#define USBD_NO_TIMEOUT 0
#define USBD_DEFAULT_TIMEOUT 5000 /* ms = 5 s */

#if defined(__FreeBSD__)
#define USB_CDEV_MAJOR 108
#endif

usbd_status usbd_open_pipe(usbd_interface_handle, u_int8_t,
			   u_int8_t, usbd_pipe_handle *);
usbd_status usbd_close_pipe(usbd_pipe_handle);
usbd_status usbd_transfer(usbd_xfer_handle);
usbd_xfer_handle usbd_alloc_xfer(usbd_device_handle);
usbd_status usbd_free_xfer(usbd_xfer_handle);
void usbd_setup_xfer(usbd_xfer_handle, usbd_pipe_handle,
		     usbd_private_handle, void *,
		     u_int32_t, u_int16_t, u_int32_t,
		     usbd_callback);
void usbd_setup_default_xfer(usbd_xfer_handle, usbd_device_handle,
			     usbd_private_handle, u_int32_t,
			     usb_device_request_t *, void *,
			     u_int32_t, u_int16_t, usbd_callback);
void usbd_setup_isoc_xfer(usbd_xfer_handle, usbd_pipe_handle,
			  usbd_private_handle, u_int16_t *,
			  u_int32_t, u_int16_t, usbd_callback);
void usbd_get_xfer_status(usbd_xfer_handle, usbd_private_handle *,
			  void **, u_int32_t *, usbd_status *);
usb_endpoint_descriptor_t *usbd_interface2endpoint_descriptor
			(usbd_interface_handle, u_int8_t);
usbd_status usbd_abort_pipe(usbd_pipe_handle);
usbd_status usbd_clear_endpoint_stall(usbd_pipe_handle);
usbd_status usbd_clear_endpoint_stall_async(usbd_pipe_handle);
void usbd_clear_endpoint_toggle(usbd_pipe_handle);
usbd_status usbd_endpoint_count(usbd_interface_handle, u_int8_t *);
usbd_status usbd_interface_count(usbd_device_handle, u_int8_t *);
void usbd_interface2device_handle(usbd_interface_handle,
					 usbd_device_handle *);
usbd_status usbd_device2interface_handle(usbd_device_handle,
			      u_int8_t, usbd_interface_handle *);

usbd_device_handle usbd_pipe2device_handle(usbd_pipe_handle);
void *usbd_alloc_buffer(usbd_xfer_handle, u_int32_t);
void usbd_free_buffer(usbd_xfer_handle);
void *usbd_get_buffer(usbd_xfer_handle);
usbd_status usbd_sync_transfer(usbd_xfer_handle);
usbd_status usbd_open_pipe_intr(usbd_interface_handle, u_int8_t,
				u_int8_t, usbd_pipe_handle *,
				usbd_private_handle, void *,
				u_int32_t, usbd_callback, int);
usbd_status usbd_do_request(usbd_device_handle, usb_device_request_t *, void *);
usbd_status usbd_do_request_async(usbd_device_handle,
				  usb_device_request_t *, void *);
usbd_status usbd_do_request_flags(usbd_device_handle, usb_device_request_t *,
				  void *, u_int16_t, int*, u_int32_t);
usbd_status usbd_do_request_flags_pipe(usbd_device_handle, usbd_pipe_handle,
	usb_device_request_t *, void *, u_int16_t, int *, u_int32_t);
usb_interface_descriptor_t *usbd_get_interface_descriptor
				(usbd_interface_handle);
usb_config_descriptor_t *usbd_get_config_descriptor(usbd_device_handle);
usb_device_descriptor_t *usbd_get_device_descriptor(usbd_device_handle);
usbd_status usbd_set_interface(usbd_interface_handle, int);
int usbd_get_no_alts(usb_config_descriptor_t *, int);
usbd_status  usbd_get_interface(usbd_interface_handle, u_int8_t *);
void usbd_fill_deviceinfo(usbd_device_handle, struct usb_device_info *, int);
int usbd_get_interface_altindex(usbd_interface_handle);

usb_interface_descriptor_t *usbd_find_idesc(usb_config_descriptor_t *,
					    int, int);
usb_endpoint_descriptor_t *usbd_find_edesc(usb_config_descriptor_t *,
					   int, int, int);

void usbd_dopoll(usbd_interface_handle);
void usbd_set_polling(usbd_device_handle, int);

const char *usbd_errstr(usbd_status);

void usbd_add_dev_event(int, usbd_device_handle);
void usbd_add_drv_event(int, usbd_device_handle, device_ptr_t);

void usbd_devinfo(usbd_device_handle, int, char *, size_t);
const struct usbd_quirks *usbd_get_quirks(usbd_device_handle);
usb_endpoint_descriptor_t *usbd_get_endpoint_descriptor
			(usbd_interface_handle, u_int8_t);

usbd_status usbd_reload_device_desc(usbd_device_handle);

int usbd_ratecheck(struct timeval *);

#ifndef __riscos
usbd_status usbd_get_string(usbd_device_handle dev, int si, char *buf);
#endif

/* An iterator for descriptors. */
typedef struct {
	const uByte *cur;
	const uByte *end;
} usbd_desc_iter_t;
void usb_desc_iter_init(usbd_device_handle, usbd_desc_iter_t *);
const usb_descriptor_t *usb_desc_iter_next(usbd_desc_iter_t *);

/*
 * The usb_task structs form a queue of things to run in the USB event
 * thread.  Normally this is just device discovery when a connect/disconnect
 * has been detected.  But it may also be used by drivers that need to
 * perform (short) tasks that must have a process context.
 */
struct usb_task {
	TAILQ_ENTRY(usb_task) next;
	void (*fun)(void *);
	void *arg;
	char onqueue;
};

void usb_add_task(usbd_device_handle, struct usb_task *);
void usb_rem_task(usbd_device_handle, struct usb_task *);
#define usb_init_task(t, f, a) ((t)->fun = (f), (t)->arg = (a), (t)->onqueue = 0)

struct usb_devno {
	u_int16_t ud_vendor;
	u_int16_t ud_product;
};
#ifndef __riscos
const struct usb_devno *usb_match_device(const struct usb_devno *tbl,
	u_int nentries, u_int sz, u_int16_t vendor, u_int16_t product);
#define usb_lookup(tbl, vendor, product) \
	usb_match_device((const struct usb_devno *)(tbl), sizeof (tbl) / sizeof ((tbl)[0]), sizeof ((tbl)[0]), (vendor), (product))
#endif
#define	USB_PRODUCT_ANY		0xffff

/* NetBSD attachment information */

/* Attach data */
struct usb_attach_arg {
	int			port;
	int			configno;
	int			ifaceno;
	int			vendor;
	int			product;
	int			release;
	int			matchlvl;
	usbd_device_handle	device;	/* current device */
	usbd_interface_handle	iface; /* current interface */
	int			usegeneric;
	usbd_interface_handle  *ifaces;	/* all interfaces */
	int			nifaces; /* number of interfaces */
};
#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(__riscos)
/* Match codes. */
/* First five codes is for a whole device. */
#define UMATCH_VENDOR_PRODUCT_REV			14
#define UMATCH_VENDOR_PRODUCT				13
#define UMATCH_VENDOR_DEVCLASS_DEVPROTO			12
#define UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO		11
#define UMATCH_DEVCLASS_DEVSUBCLASS			10
/* Next six codes are for interfaces. */
#define UMATCH_VENDOR_PRODUCT_REV_CONF_IFACE		 9
#define UMATCH_VENDOR_PRODUCT_CONF_IFACE		 8
#define UMATCH_VENDOR_IFACESUBCLASS_IFACEPROTO		 7
#define UMATCH_VENDOR_IFACESUBCLASS			 6
#define UMATCH_IFACECLASS_IFACESUBCLASS_IFACEPROTO	 5
#define UMATCH_IFACECLASS_IFACESUBCLASS			 4
#define UMATCH_IFACECLASS				 3
#define UMATCH_IFACECLASS_GENERIC			 2
/* Generic driver */
#define UMATCH_GENERIC					 1
/* No match */
#define UMATCH_NONE					 0

#elif defined(__FreeBSD__)
/* FreeBSD needs values less than zero */
#define UMATCH_VENDOR_PRODUCT_REV			(-10)
#define UMATCH_VENDOR_PRODUCT				(-20)
#define UMATCH_VENDOR_DEVCLASS_DEVPROTO			(-30)
#define UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO		(-40)
#define UMATCH_DEVCLASS_DEVSUBCLASS			(-50)
#define UMATCH_VENDOR_PRODUCT_REV_CONF_IFACE		(-60)
#define UMATCH_VENDOR_PRODUCT_CONF_IFACE		(-70)
#define UMATCH_VENDOR_IFACESUBCLASS_IFACEPROTO		(-80)
#define UMATCH_VENDOR_IFACESUBCLASS			(-90)
#define UMATCH_IFACECLASS_IFACESUBCLASS_IFACEPROTO	(-100)
#define UMATCH_IFACECLASS_IFACESUBCLASS			(-110)
#define UMATCH_IFACECLASS				(-120)
#define UMATCH_IFACECLASS_GENERIC			(-130)
#define UMATCH_GENERIC					(-140)
#define UMATCH_NONE					(ENXIO)

#endif

#if defined(__FreeBSD__)
int usbd_driver_load(module_t mod, int what, void *arg);
#endif

/* XXX Perhaps USB should have its own levels? */
#ifdef USB_USE_SOFTINTR
#ifdef __HAVE_GENERIC_SOFT_INTERRUPTS
#define splusb splsoftnet
#else
#define	splusb splsoftclock
#endif /* __HAVE_GENERIC_SOFT_INTERRUPTS */
#else
#define splusb splbio
#endif /* USB_USE_SOFTINTR */
#define splhardusb splbio
#define IPL_USB IPL_BIO

#endif /* _USBDI_H_ */
@


1.7
log
@        Stack brought up to date with NetBSD sources as at 20050121.
        USB2 further debugged.
Detail:
        Check in prior to second beta release. Improvements also to
        softloading of replacement modules.
Admin:
        Checked with JB .. further crosschecking is still needed for rhenium.
        Castle/D Ellis added ip from NetBSD sources


Version 0.33. Tagged as 'NetBSD-0_33'
@
text
@d41 3
d102 1
a102 1
                           u_int8_t, usbd_pipe_handle *);
d108 2
a109 2
                     usbd_private_handle, void *,
                     u_int32_t, u_int16_t, u_int32_t,
d112 3
a114 3
                             usbd_private_handle, u_int32_t,
                             usb_device_request_t *, void *,
                             u_int32_t, u_int16_t, usbd_callback);
d116 2
a117 2
                          usbd_private_handle, u_int16_t *,
                          u_int32_t, u_int16_t, usbd_callback);
d119 1
a119 1
                          void **, u_int32_t *, usbd_status *);
d121 1
a121 1
                        (usbd_interface_handle, u_int8_t);
d129 1
a129 1
                                         usbd_device_handle *);
d131 1
a131 1
                              u_int8_t, usbd_interface_handle *);
d139 3
a141 3
                                u_int8_t, usbd_pipe_handle *,
                                usbd_private_handle, void *,
                                u_int32_t, usbd_callback, int);
d144 1
a144 1
                                  usb_device_request_t *, void *);
d146 1
a146 1
                                  void *, u_int16_t, int*, u_int32_t);
d148 1
a148 1
        usb_device_request_t *, void *, u_int16_t, int *, u_int32_t);
d150 1
a150 1
                                (usbd_interface_handle);
d160 1
a160 1
                                            int, int);
d162 1
a162 1
                                           int, int, int);
d175 1
a175 1
                        (usbd_interface_handle, u_int8_t);
d179 1
a179 1
int usbd_ratecheck(struct timeval *last);
d187 2
a188 2
        const uByte *cur;
        const uByte *end;
d190 2
a191 2
void usb_desc_iter_init(usbd_device_handle dev, usbd_desc_iter_t *iter);
const usb_descriptor_t *usb_desc_iter_next(usbd_desc_iter_t *iter);
d297 2
@


1.6
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d41 1
d43 1
d98 4
a101 4
usbd_status usbd_open_pipe(usbd_interface_handle iface, u_int8_t address,
			   u_int8_t flags, usbd_pipe_handle *pipe);
usbd_status usbd_close_pipe(usbd_pipe_handle pipe);
usbd_status usbd_transfer(usbd_xfer_handle req);
d103 4
a106 4
usbd_status usbd_free_xfer(usbd_xfer_handle xfer);
void usbd_setup_xfer(usbd_xfer_handle xfer, usbd_pipe_handle pipe,
		     usbd_private_handle priv, void *buffer,
		     u_int32_t length, u_int16_t flags, u_int32_t timeout,
d108 9
a116 9
void usbd_setup_default_xfer(usbd_xfer_handle xfer, usbd_device_handle dev,
			     usbd_private_handle priv, u_int32_t timeout,
			     usb_device_request_t *req, void *buffer,
			     u_int32_t length, u_int16_t flags, usbd_callback);
void usbd_setup_isoc_xfer(usbd_xfer_handle xfer, usbd_pipe_handle pipe,
			  usbd_private_handle priv, u_int16_t *frlengths,
			  u_int32_t nframes, u_int16_t flags, usbd_callback);
void usbd_get_xfer_status(usbd_xfer_handle xfer, usbd_private_handle *priv,
			  void **buffer, u_int32_t *count, usbd_status *status);
d118 11
a128 11
			(usbd_interface_handle iface, u_int8_t address);
usbd_status usbd_abort_pipe(usbd_pipe_handle pipe);
usbd_status usbd_clear_endpoint_stall(usbd_pipe_handle pipe);
usbd_status usbd_clear_endpoint_stall_async(usbd_pipe_handle pipe);
void usbd_clear_endpoint_toggle(usbd_pipe_handle pipe);
usbd_status usbd_endpoint_count(usbd_interface_handle dev, u_int8_t *count);
usbd_status usbd_interface_count(usbd_device_handle dev, u_int8_t *count);
void usbd_interface2device_handle(usbd_interface_handle iface,
					 usbd_device_handle *dev);
usbd_status usbd_device2interface_handle(usbd_device_handle dev,
			      u_int8_t ifaceno, usbd_interface_handle *iface);
d131 15
a145 19
void *usbd_alloc_buffer(usbd_xfer_handle xfer, u_int32_t size);
void usbd_free_buffer(usbd_xfer_handle xfer);
void *usbd_get_buffer(usbd_xfer_handle xfer);
usbd_status usbd_sync_transfer(usbd_xfer_handle req);
usbd_status usbd_open_pipe_intr(usbd_interface_handle iface, u_int8_t address,
				u_int8_t flags, usbd_pipe_handle *pipe,
				usbd_private_handle priv, void *buffer,
				u_int32_t length, usbd_callback, int);
usbd_status usbd_do_request(usbd_device_handle pipe, usb_device_request_t *req,
			    void *data);
usbd_status usbd_do_request_async(usbd_device_handle pipe,
				  usb_device_request_t *req, void *data);
usbd_status usbd_do_request_flags(usbd_device_handle pipe,
				  usb_device_request_t *req,
				  void *data, u_int16_t flags, int*, u_int32_t);
usbd_status usbd_do_request_flags_pipe(
	usbd_device_handle dev, usbd_pipe_handle pipe,
	usb_device_request_t *req, void *data, u_int16_t flags, int *actlen,
	u_int32_t);
d147 3
a149 3
				(usbd_interface_handle iface);
usb_config_descriptor_t *usbd_get_config_descriptor(usbd_device_handle dev);
usb_device_descriptor_t *usbd_get_device_descriptor(usbd_device_handle dev);
d152 1
a152 1
usbd_status  usbd_get_interface(usbd_interface_handle iface, u_int8_t *aiface);
d154 1
a154 1
int usbd_get_interface_altindex(usbd_interface_handle iface);
d156 4
a159 5
usb_interface_descriptor_t *usbd_find_idesc(usb_config_descriptor_t *cd,
					    int iindex, int ano);
usb_endpoint_descriptor_t *usbd_find_edesc(usb_config_descriptor_t *cd,
					   int ifaceidx, int altidx,
					   int endptidx);
d162 1
a162 1
void usbd_set_polling(usbd_device_handle iface, int on);
d164 1
a164 1
const char *usbd_errstr(usbd_status err);
d172 1
a172 1
			(usbd_interface_handle iface, u_int8_t address);
d178 12
d203 2
a204 2
void usb_add_task(usbd_device_handle dev, struct usb_task *task);
void usb_rem_task(usbd_device_handle dev, struct usb_task *task);
d211 1
d216 1
a235 1

@


1.5
log
@  Extensive changes and bug fixes to usb and ohci ..
  'blocked' several holes that could cause freezes with awkward
  usb devices.  Added latest changes from Dan Ellis too , especially for USB2
Detail:
 many
Admin:
 Tested in ROM at Castle, and beta tested with users


Version 0.28. Tagged as 'NetBSD-0_28'
@
text
@d1 2
a2 2
/*      $NetBSD: usbdi.c,v 1.103 2002/09/27 15:37:38 provos Exp $       */
/*      $FreeBSD: src/sys/dev/usb/usbdi.c,v 1.28 1999/11/17 22:33:49 n_hibma Exp $      */
@


1.4
log
@More John fixes.

Version 0.27. Tagged as 'NetBSD-0_27'
@
text
@d1 2
a2 2
/*	$NetBSD: usbdi.h,v 1.62 2002/07/11 21:14:35 augustss Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/usbdi.h,v 1.18 1999/11/17 22:33:49 n_hibma Exp $	*/
d41 1
d172 1
a172 1
void usbd_devinfo(usbd_device_handle, int, char *);
@


1.3
log
@Latest stuff from John - mainly Rhenium improvements.

Version 0.26. Tagged as 'NetBSD-0_26'
@
text
@a68 1
	USBD_SHORT_XFER_DONE,	/* 19 */
@


1.2
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d69 1
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/*	$NetBSD: usbdi.h,v 1.43 2000/06/01 14:29:02 augustss Exp $	*/
d50 1
a50 1
	USBD_IN_PROGRESS,
d52 17
a68 17
	USBD_PENDING_REQUESTS,
	USBD_NOT_STARTED,
	USBD_INVAL,
	USBD_NOMEM,
	USBD_CANCELLED,
	USBD_BAD_ADDRESS,
	USBD_IN_USE,
	USBD_NO_ADDR,
	USBD_SET_ADDR_FAILED,
	USBD_NO_POWER,
	USBD_TOO_DEEP,
	USBD_IOERROR,
	USBD_NOT_CONFIGURED,
	USBD_TIMEOUT,
	USBD_SHORT_XFER,
	USBD_STALLED,
	USBD_INTERRUPTED,
a87 3
/* XXX Temporary hack XXX */
#define USBD_NO_TSLEEP		0x80	/* XXX use busy wait */

d119 1
d122 1
a122 1
usbd_status usbd_interface2device_handle(usbd_interface_handle iface,
d128 2
a129 2
void *usbd_alloc_buffer(usbd_xfer_handle req, u_int32_t size);
void usbd_free_buffer(usbd_xfer_handle req);
d142 5
a146 1
				  void *data, u_int16_t flags, int *);
d154 1
a154 1
void usbd_fill_deviceinfo(usbd_device_handle dev, struct usb_device_info *di);
d172 1
a172 1
struct usbd_quirks *usbd_get_quirks(usbd_device_handle);
d180 27
d217 1
d271 8
a278 7
/*
 * XXX
 * splusb MUST be the lowest level interrupt so that within USB callbacks
 * the level can be raised the appropriate level.
 * XXX Should probably use a softsplusb.
 */
/* XXX */
d280 1
a282 1
/* XXX */
@

