head	1.3;
access;
symbols
	NetBSD-1_19:1.3
	NetBSD-1_18:1.3
	NetBSD-1_17:1.3
	NetBSD-1_16:1.3
	NetBSD-1_15:1.3
	NetBSD-1_14:1.3
	NetBSD-1_13:1.3
	NetBSD-1_12:1.3
	NetBSD-1_09-1:1.3
	NetBSD-1_11:1.3
	NetBSD-1_10:1.3
	NetBSD-1_09:1.3
	NetBSD-1_08:1.3
	NetBSD-1_07:1.3
	NetBSD-1_06:1.3
	NetBSD-1_05:1.3
	NetBSD-1_04:1.3
	NetBSD-1_03:1.3
	NetBSD-1_02:1.3
	NetBSD-1_01:1.3
	NetBSD-1_00:1.3
	NetBSD-0_99:1.3
	NetBSD-0_98:1.3
	NetBSD-0_97:1.3
	NetBSD-0_96:1.3
	NetBSD-0_95:1.3
	NetBSD-0_94:1.3
	NetBSD-0_93:1.3
	NetBSD-0_92:1.3
	NetBSD-0_91:1.3
	NetBSD-0_90:1.3
	NetBSD-0_89:1.3
	NetBSD-0_88:1.3
	NetBSD-0_87:1.3
	NetBSD-0_86:1.3
	NetBSD-0_85:1.3
	NetBSD-0_84:1.3
	NetBSD-0_83:1.3
	NetBSD-0_82:1.3
	NetBSD-0_81:1.3
	NetBSD-0_80:1.3
	NetBSD-0_79:1.3
	NetBSD-0_78:1.3
	NetBSD-0_77:1.3
	NetBSD-0_76:1.3
	NetBSD-0_75:1.3
	NetBSD-0_74:1.3
	NetBSD-0_73:1.3
	NetBSD-0_72:1.3
	NetBSD-0_71:1.3
	NetBSD-0_70:1.3
	NetBSD-0_69:1.3
	NetBSD-0_68:1.3
	NetBSD-0_67:1.3
	NetBSD-0_66:1.3
	NetBSD-0_65:1.3
	NetBSD-0_64:1.3
	NetBSD-0_63:1.3
	NetBSD-0_62:1.3
	NetBSD-0_61:1.3
	NetBSD-0_60:1.3
	NetBSD-0_59:1.3
	NetBSD-0_58:1.3
	NetBSD-0_57:1.3
	NetBSD-0_56:1.3
	NetBSD-0_55:1.3
	NetBSD-0_54:1.3
	NetBSD-0_53:1.3
	NetBSD-0_52:1.2
	NetBSD-0_51:1.2
	NetBSD-0_50:1.2
	NetBSD-0_49:1.2
	NetBSD-0_48:1.2
	NetBSD-0_47:1.2
	NetBSD-0_46:1.2
	NetBSD-0_45:1.2
	NetBSD-0_44:1.2
	NetBSD-0_43:1.2
	NetBSD-0_42:1.2
	NetBSD-0_41:1.2
	NetBSD-0_40:1.2
	NetBSD-0_39:1.2
	NetBSD-0_38:1.2
	NetBSD-0_37:1.2
	NetBSD-0_36:1.2
	NetBSD-0_35:1.2
	NetBSD-0_34:1.2
	NetBSD-0_33:1.2
	NetBSD-0_32:1.2
	NetBSD-0_31:1.2
	NetBSD-0_30:1.2
	NetBSD-0_29:1.2
	RO_5_07:1.2
	NetBSD-0_28:1.2
	NetBSD-0_27:1.2
	NetBSD-0_26:1.2
	NetBSD-0_25:1.2
	NetBSD-0_24:1.2
	NetBSD-0_23:1.2
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.2
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.3
date	2010.09.14.21.07.45;	author jlee;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.21.20.49.20;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.18;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update hid.c, ums.c to latest (ish), update usbmouse.c, add TouchBook touchpad fix
Detail:
  dev/usb/c/hid, dev/usb/h/hid, dev/usb/c/ums - Updated to latest NetBSD versions (actually the version that was used for the recent core/EHCI update, so not 100% latest)
  build/c/usbmouse, dev/wscons/h/wsmousevar - Updated RISC OS USB mouse driver to be similar to the new NetBSD version. Also reformatted file to use tab char instead of inconsistent numbers of spaces for indentation.
  build/c/usbmouse, dev/usb/usbdevs - Added fix for broken TouchBook touchpad behaviour.
Admin:
  Tested with various mice on a beagleboard, and with the TouchBook touchpad.
  We should now have support for the W axis of mice, but that code is untested since I don't have any suitable mice to hand.


Version 0.53. Tagged as 'NetBSD-0_53'
@
text
@/*	$NetBSD: hid.h,v 1.13 2010/05/12 18:44:49 plunky Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/hid.h,v 1.7 1999/11/17 22:33:40 n_hibma Exp $ */

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

enum hid_kind {
	hid_input,
	hid_output,
	hid_feature,
	hid_collection,
	hid_endcollection,
	hid_none
};

struct hid_location {
	u_int32_t size;
	u_int32_t count;
	u_int32_t pos;
};

struct hid_item {
	/* Global */
	int32_t _usage_page;
	int32_t logical_minimum;
	int32_t logical_maximum;
	int32_t physical_minimum;
	int32_t physical_maximum;
	int32_t unit_exponent;
	int32_t unit;
	int32_t report_ID;
	/* Local */
	int32_t usage;
	int32_t usage_minimum;
	int32_t usage_maximum;
	int32_t designator_index;
	int32_t designator_minimum;
	int32_t designator_maximum;
	int32_t string_index;
	int32_t string_minimum;
	int32_t string_maximum;
	int32_t set_delimiter;
	/* Misc */
	int32_t collection;
	int collevel;
	enum hid_kind kind;
	u_int32_t flags;
	/* Location */
	struct hid_location loc;
	/* */
	struct hid_item *next;
};

struct hid_data *hid_start_parse(const void *, int, enum hid_kind);
void hid_end_parse(struct hid_data *);
int hid_get_item(struct hid_data *, struct hid_item *);
int hid_report_size(const void *, int, enum hid_kind, u_int8_t);
int hid_locate(const void *, int, u_int32_t, u_int8_t, enum hid_kind,
    struct hid_location *, u_int32_t *);
long hid_get_data(const u_char *, const struct hid_location *);
u_long hid_get_udata(const u_char *, const struct hid_location *);
int hid_is_collection(const void *, int, u_int8_t, u_int32_t);
@


1.2
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d1 1
a1 1
/*	$NetBSD: hid.h,v 1.8 2002/07/11 21:14:25 augustss Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d81 9
a89 8
struct hid_data *hid_start_parse(void *d, int len, enum hid_kind kind);
void hid_end_parse(struct hid_data *s);
int hid_get_item(struct hid_data *s, struct hid_item *h);
int hid_report_size(void *buf, int len, enum hid_kind k, u_int8_t id);
int hid_locate(void *desc, int size, u_int32_t usage, u_int8_t id,
	       enum hid_kind kind, struct hid_location *loc, u_int32_t *flags);
u_long hid_get_data(u_char *buf, struct hid_location *loc);
int hid_is_collection(void *desc, int size, u_int8_t id, u_int32_t usage);
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/*	$NetBSD: hid.h,v 1.6 2000/06/01 14:28:57 augustss Exp $	*/
d41 7
a47 2
enum hid_kind { 
	hid_input, hid_output, hid_feature, hid_collection, hid_endcollection
d88 1
a88 1
struct hid_data *hid_start_parse(void *d, int len, int kindset);
d91 3
a93 3
int hid_report_size(void *buf, int len, enum hid_kind k, u_int8_t *id);
int hid_locate(void *desc, int size, u_int32_t usage, enum hid_kind kind,
	       struct hid_location *loc, u_int32_t *flags);
d95 1
a95 1
int hid_is_collection(void *desc, int size, u_int32_t usage);
@

