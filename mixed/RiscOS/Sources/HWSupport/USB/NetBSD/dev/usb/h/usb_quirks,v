head	1.6;
access;
symbols
	NetBSD-1_19:1.6
	NetBSD-1_18:1.6
	NetBSD-1_17:1.6
	NetBSD-1_16:1.6
	NetBSD-1_15:1.6
	NetBSD-1_14:1.6
	NetBSD-1_13:1.6
	NetBSD-1_12:1.6
	NetBSD-1_09-1:1.6
	NetBSD-1_11:1.6
	NetBSD-1_10:1.6
	NetBSD-1_09:1.6
	NetBSD-1_08:1.6
	NetBSD-1_07:1.6
	NetBSD-1_06:1.6
	NetBSD-1_05:1.6
	NetBSD-1_04:1.6
	NetBSD-1_03:1.6
	NetBSD-1_02:1.5
	NetBSD-1_01:1.5
	NetBSD-1_00:1.5
	NetBSD-0_99:1.5
	NetBSD-0_98:1.5
	NetBSD-0_97:1.5
	NetBSD-0_96:1.5
	NetBSD-0_95:1.5
	NetBSD-0_94:1.5
	NetBSD-0_93:1.5
	NetBSD-0_92:1.5
	NetBSD-0_91:1.5
	NetBSD-0_90:1.5
	NetBSD-0_89:1.5
	NetBSD-0_88:1.5
	NetBSD-0_87:1.5
	NetBSD-0_86:1.5
	NetBSD-0_85:1.5
	NetBSD-0_84:1.5
	NetBSD-0_83:1.5
	NetBSD-0_82:1.5
	NetBSD-0_81:1.5
	NetBSD-0_80:1.5
	NetBSD-0_79:1.5
	NetBSD-0_78:1.5
	NetBSD-0_77:1.5
	NetBSD-0_76:1.5
	NetBSD-0_75:1.5
	NetBSD-0_74:1.5
	NetBSD-0_73:1.5
	NetBSD-0_72:1.5
	NetBSD-0_71:1.5
	NetBSD-0_70:1.5
	NetBSD-0_69:1.5
	NetBSD-0_68:1.5
	NetBSD-0_67:1.5
	NetBSD-0_66:1.5
	NetBSD-0_65:1.5
	NetBSD-0_64:1.5
	NetBSD-0_63:1.5
	NetBSD-0_62:1.5
	NetBSD-0_61:1.5
	NetBSD-0_60:1.5
	NetBSD-0_59:1.5
	NetBSD-0_58:1.5
	NetBSD-0_57:1.5
	NetBSD-0_56:1.5
	NetBSD-0_55:1.5
	NetBSD-0_54:1.5
	NetBSD-0_53:1.5
	NetBSD-0_52:1.5
	NetBSD-0_51:1.4
	NetBSD-0_50:1.4
	NetBSD-0_49:1.4
	NetBSD-0_48:1.4
	NetBSD-0_47:1.4
	NetBSD-0_46:1.4
	NetBSD-0_45:1.4
	NetBSD-0_44:1.4
	NetBSD-0_43:1.4
	NetBSD-0_42:1.4
	NetBSD-0_41:1.4
	NetBSD-0_40:1.4
	NetBSD-0_39:1.4
	NetBSD-0_38:1.3
	NetBSD-0_37:1.3
	NetBSD-0_36:1.3
	NetBSD-0_35:1.3
	NetBSD-0_34:1.3
	NetBSD-0_33:1.3
	NetBSD-0_32:1.3
	NetBSD-0_31:1.3
	NetBSD-0_30:1.2
	NetBSD-0_29:1.2
	RO_5_07:1.2
	NetBSD-0_28:1.2
	NetBSD-0_27:1.2
	NetBSD-0_26:1.2
	NetBSD-0_25:1.2
	NetBSD-0_24:1.2
	NetBSD-0_23:1.2
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.2
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.09.17.16.03.52;	author rool;	state Exp;
branches;
next	1.5;
commitid	bTEnXVoCvWq6HCBy;

1.5
date	2010.07.21.23.57.21;	author jlee;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.24.23.13.54;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.30.02.34.21;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.21.20.49.20;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.18;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update table of device quirks
Detail:
  From NetBSD usb_quirks.c revision 1.81.
  usbmodule: NULL is for pointer types, not ints.
  usb_quirks: Group the RISC OS specific ones together, disable the non applicable UQ_APPLE_ISO ones, UQ_LOST_CS_DESC doesn't apply either but is only used for USB modem drivers not ported here. Untangle ifdefs around usbd_find_quirk().
Admin:
  Removed unused source file ums.c

Version 1.03. Tagged as 'NetBSD-1_03'
@
text
@/*	$NetBSD: usb_quirks.h,v 1.24 2010/06/27 10:41:26 kardel Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/usb_quirks.h,v 1.9 1999/11/12 23:31:03 n_hibma Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

struct usbd_quirks {
	u_int32_t uq_flags;	/* Device problems: */
#define UQ_NO_SET_PROTO	0x0001	/* cannot handle SET PROTOCOL. */
#define UQ_SWAP_UNICODE	0x0002	/* has some Unicode strings swapped. */
#define UQ_MS_REVZ	0x0004	/* mouse has Z-axis reversed */
#define UQ_NO_STRINGS	0x0008	/* string descriptors are broken. */
#define UQ_BAD_ADC	0x0010	/* bad audio spec version number. */
#define UQ_BUS_POWERED	0x0020	/* device is bus powered, despite claim */
#define UQ_BAD_AUDIO	0x0040	/* device claims audio class, but isn't */
#define UQ_SPUR_BUT_UP	0x0080	/* spurious mouse button up events */
#define UQ_AU_NO_XU	0x0100	/* audio device has broken extension unit */
#define UQ_POWER_CLAIM	0x0200	/* hub lies about power status */
#define UQ_AU_NO_FRAC	0x0400	/* don't adjust for fractional samples */
#define UQ_AU_INP_ASYNC	0x0800	/* input is async despite claim of adaptive */
#define UQ_ASSUME_CM_OVER_DATA 0x1000 /* modem device breaks on cm over data */
#define UQ_BROKEN_BIDIR	0x2000	/* printer has broken bidir mode */
#define UQ_HID_IGNORE	0x4000	/* device should be ignored by hid class */
#define UQ_NO_UNION_NRM 0x8000  /* has no normal UNION descriptor */
#define UQ_LOST_CS_DESC 0x10000 /* look everywhere for the CS descriptors */
};

extern const struct usbd_quirks usbd_no_quirk;

const struct usbd_quirks *usbd_find_quirk(usb_device_descriptor_t *);
/* format of a quirk .. keep synchronised with entry in dev.usb.usb_quirks */
typedef struct usbd_quirk_entry {
	u_int16_t idVendor;
	u_int16_t idProduct;
	u_int16_t bcdDevice;
	struct usbd_quirks quirks;
} usbd_quirk_entry;


#ifdef __riscos
#define MAX_EXTRA_QUIRKS 30
extern void * extra_quirks;
#endif
@


1.5
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@d59 1
a76 4


extern const struct usbd_quirks * usbd_find_builtin_quirk(usb_device_descriptor_t *d, const struct usbd_quirk_entry *t);

@


1.4
log
@	Update of NetBSD elements (except c.ohci) to track NetBSD current
	from mid April 2005.
	Inclusion of Mods to c.ehci (from Dan) to correctly handle low
	speed interrupt devices beyond USB2 hubs (i.e. keyboards and mice).
	Mod to EHCI resetting in service call handler to better cope with
	USBDriver being restarted 'underneath' it.
Detail:
Admin:
	Castle, Dan Ellis, NetBSD added IP. Tested at Castle. Will be
	beta tested at this revision level before full release.


Version 0.39. Tagged as 'NetBSD-0_39'
@
text
@d1 2
a2 2
/*      $NetBSD: usb_quirks.h,v 1.20 2001/04/15 09:38:01 augustss Exp $ */
/*      $FreeBSD: src/sys/dev/usb/usb_quirks.h,v 1.9 1999/11/12 23:31:03 n_hibma Exp $  */
d57 2
@


1.3
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d1 2
a2 2
/*	$NetBSD: usb_quirks.h,v 1.20 2001/04/15 09:38:01 augustss Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/usb_quirks.h,v 1.9 1999/11/12 23:31:03 n_hibma Exp $	*/
@


1.2
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d62 17
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/*	$NetBSD: usb_quirks.h,v 1.12 2000/06/01 14:29:02 augustss Exp $	*/
d43 14
a56 8
#define UQ_NO_SET_PROTO	0x01	/* cannot handle SET PROTOCOL. */
#define UQ_SWAP_UNICODE	0x02	/* has some Unicode strings swapped. */
#define UQ_MS_REVZ	0x04	/* mouse has Z-axis reversed */
#define UQ_NO_STRINGS	0x08	/* string descriptors are broken. */
#define UQ_BAD_ADC	0x10	/* bad audio spec version number. */
#define UQ_BUS_POWERED	0x20	/* device is bus powered, despite claim */
#define UQ_BAD_AUDIO	0x40	/* device claims audio class, but isn't */
#define UQ_SPUR_BUT_UP	0x80	/* spurious mouse button up events */
d59 1
a59 1
extern struct usbd_quirks usbd_no_quirk;
d61 1
a61 1
struct usbd_quirks *usbd_find_quirk(usb_device_descriptor_t *);
@

