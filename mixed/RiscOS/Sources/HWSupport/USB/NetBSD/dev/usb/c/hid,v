head	1.7;
access;
symbols
	NetBSD-1_19:1.7
	NetBSD-1_18:1.7
	NetBSD-1_17:1.7
	NetBSD-1_16:1.7
	NetBSD-1_15:1.7
	NetBSD-1_14:1.7
	NetBSD-1_13:1.7
	NetBSD-1_12:1.7
	NetBSD-1_09-1:1.7
	NetBSD-1_11:1.7
	NetBSD-1_10:1.7
	NetBSD-1_09:1.7
	NetBSD-1_08:1.7
	NetBSD-1_07:1.7
	NetBSD-1_06:1.7
	NetBSD-1_05:1.7
	NetBSD-1_04:1.7
	NetBSD-1_03:1.7
	NetBSD-1_02:1.7
	NetBSD-1_01:1.7
	NetBSD-1_00:1.7
	NetBSD-0_99:1.7
	NetBSD-0_98:1.7
	NetBSD-0_97:1.7
	NetBSD-0_96:1.7
	NetBSD-0_95:1.7
	NetBSD-0_94:1.7
	NetBSD-0_93:1.7
	NetBSD-0_92:1.7
	NetBSD-0_91:1.7
	NetBSD-0_90:1.7
	NetBSD-0_89:1.7
	NetBSD-0_88:1.7
	NetBSD-0_87:1.7
	NetBSD-0_86:1.7
	NetBSD-0_85:1.7
	NetBSD-0_84:1.7
	NetBSD-0_83:1.7
	NetBSD-0_82:1.7
	NetBSD-0_81:1.7
	NetBSD-0_80:1.7
	NetBSD-0_79:1.7
	NetBSD-0_78:1.7
	NetBSD-0_77:1.7
	NetBSD-0_76:1.7
	NetBSD-0_75:1.7
	NetBSD-0_74:1.7
	NetBSD-0_73:1.7
	NetBSD-0_72:1.7
	NetBSD-0_71:1.7
	NetBSD-0_70:1.7
	NetBSD-0_69:1.7
	NetBSD-0_68:1.7
	NetBSD-0_67:1.7
	NetBSD-0_66:1.7
	NetBSD-0_65:1.7
	NetBSD-0_64:1.7
	NetBSD-0_63:1.7
	NetBSD-0_62:1.7
	NetBSD-0_61:1.7
	NetBSD-0_60:1.7
	NetBSD-0_59:1.7
	NetBSD-0_58:1.6
	NetBSD-0_57:1.6
	NetBSD-0_56:1.6
	NetBSD-0_55:1.6
	NetBSD-0_54:1.6
	NetBSD-0_53:1.6
	NetBSD-0_52:1.5
	NetBSD-0_51:1.5
	NetBSD-0_50:1.5
	NetBSD-0_49:1.5
	NetBSD-0_48:1.5
	NetBSD-0_47:1.5
	NetBSD-0_46:1.5
	NetBSD-0_45:1.5
	NetBSD-0_44:1.5
	NetBSD-0_43:1.5
	NetBSD-0_42:1.5
	NetBSD-0_41:1.5
	NetBSD-0_40:1.5
	NetBSD-0_39:1.5
	NetBSD-0_38:1.5
	NetBSD-0_37:1.5
	NetBSD-0_36:1.5
	NetBSD-0_35:1.5
	NetBSD-0_34:1.5
	NetBSD-0_33:1.5
	NetBSD-0_32:1.4
	NetBSD-0_31:1.4
	NetBSD-0_30:1.3
	NetBSD-0_29:1.3
	RO_5_07:1.3
	NetBSD-0_28:1.3
	NetBSD-0_27:1.3
	NetBSD-0_26:1.3
	NetBSD-0_25:1.3
	NetBSD-0_24:1.2
	NetBSD-0_23:1.2
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.2
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.7
date	2011.05.22.20.22.42;	author jlee;	state Exp;
branches;
next	1.6;
commitid	Ye1jVWDlKivFSIkv;

1.6
date	2010.09.14.21.07.42;	author jlee;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.21.22.30.19;	author jballance;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.30.02.34.20;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.06.15.50.22;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.21.20.49.19;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.17;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Add the ability to build the USB drivers as HAL-compatible static libraries
Detail:
  build/Makefile, build/OBJEHCIDriver, build/OBJOHCIDriver, build/OBJUSBDriver - Modified makefiles to build the HAL libs during the export libs phase
  build/!MkHAL,fd7 - Handy script for building the HAL libs
  build/Hdr/usbhal - Header containing definitions for the assembler code. Also gets exported so that HALs know how much workspace to reserve.
  build/c/usbhal - HAL version of usbmodule.c & port.c. Also contains the keyboard scan code, adapted from the code in the Tungsten HAL.
  build/s/porthal - Assembler versions of some port.c routines that were easier to do in assembler than C
  build/s/halheap - OS_Heap code that's been adapted for use in the HAL. Could easily be changed into a standalone library instead of being part of the HAL USB libs. Supports memory-efficient allocation of aligned blocks.
  build/c/ehcihal - HAL version of ehcimodule.c. Currently only supports EHCI controllers exposed via HAL_USBControllerInfo (i.e. no PCI support)
  build/c/ehcimodule, build/c/ohcimodule, build/c/port - Moved riscos_irq_clear into port.c. Removed unused microtime() function.
  build/c/usbmouse - Strip out some debug-related code in non-debug builds
  build/Version - Updated version numbers
  dev/usb/c/ehci, dev/usb/h/ehcivar - Adapted to add support for the HAL build. Apart from the base changes, the code has also been tweaked to significantly reduce the amount of memory used at runtime by the HAL version of the driver.
  dev/usb/c/hid, dev/usb/c/uhub, dev/usb/c/usb, dev/usb/c/usb_quirks, dev/usb/c/usb_subr, dev/usb/c/usbdi, dev/usb/c/usbdi_util, dev/usb/c/usbroothub_subr - Changes to support HAL builds. Mainly disabling bits that won't work in the HAL or disabling bits for RISC OS in general if they weren't being used in the first place.
  dev/usb/c/ohci, dev/usb/h/ohcivar - Basic changes to support HAL builds. However HAL OHCI support is still incomplete.
  dev/usb/h/usb_port - Added support for the HAL build. Also tweaked logprintf definition to get rid of logprintf calls entirely in non-debug builds.
  dev/usb/h/usbdivar - Added support for the HAL build.
  dev/usb/h/usbhal - New header used by the HAL build. Gets included by every C file to ensure the compiler doesn't use sb, and contains structs/macros to allow access to the shared workspace.
Admin:
  HAL & non-HAL builds tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook.
  Non-HAL builds tested with Iyonix ROM softload.
  Needs latest Kernel source for OSEntries.h export.


Version 0.59. Tagged as 'NetBSD-0_59'
@
text
@/*	$NetBSD: hid.c,v 1.30 2010/05/14 17:32:57 plunky Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/hid.c,v 1.11 1999/11/17 22:33:39 n_hibma Exp $ */

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef __riscos
#include <dev/usb/usbhal.h>
#endif
#include <sys/cdefs.h>
#ifndef __riscos
__KERNEL_RCSID(0, "$NetBSD: hid.c,v 1.30 2010/05/14 17:32:57 plunky Exp $");
#endif

#include <sys/param.h>
#include <sys/systm.h>
#if defined(__NetBSD__)
#include <sys/kernel.h>
#endif
#include <sys/malloc.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbhid.h>

#include <dev/usb/hid.h>

#ifdef UHIDEV_DEBUG
#define DPRINTF(x)	if (uhidevdebug) logprintf x
#define DPRINTFN(n,x)	if (uhidevdebug>(n)) logprintf x
extern int uhidevdebug = 0;
#else
#define DPRINTF(x)
#define DPRINTFN(n,x)
#endif
#ifdef __riscos
#define printf logprintf
#endif
Static void hid_clear_local(struct hid_item *);

#define MAXUSAGE 256
struct hid_data {
	const u_char *start;
	const u_char *end;
	const u_char *p;
	struct hid_item cur;
	int32_t usages[MAXUSAGE];
	int nu;
	int minset;
	int multi;
	int multimax;
	enum hid_kind kind;
};

Static void
hid_clear_local(struct hid_item *c)
{

	DPRINTFN(5,("hid_clear_local\n"));
	c->usage = 0;
	c->usage_minimum = 0;
	c->usage_maximum = 0;
	c->designator_index = 0;
	c->designator_minimum = 0;
	c->designator_maximum = 0;
	c->string_index = 0;
	c->string_minimum = 0;
	c->string_maximum = 0;
	c->set_delimiter = 0;
}

struct hid_data *
hid_start_parse(const void *d, int len, enum hid_kind kind)
{
	struct hid_data *s;

	s = malloc(sizeof *s, M_TEMP, M_WAITOK|M_ZERO);
#ifdef __riscos
        /* M_ZERO does nothing on RISC OS, so we do it explicitly here */
	memset(s, 0, sizeof *s);
#endif
	s->start = s->p = d;
	s->end = ((const u_char *)d) + len;
	s->kind = kind;
	return (s);
}

void
hid_end_parse(struct hid_data *s)
{

	while (s->cur.next != NULL) {
		struct hid_item *hi = s->cur.next->next;
		free(s->cur.next, M_TEMP);
		s->cur.next = hi;
	}
	free(s, M_TEMP);
}

int
hid_get_item(struct hid_data *s, struct hid_item *h)
{
	struct hid_item *c = &s->cur;
	unsigned int bTag, bType, bSize;
	u_int32_t oldpos;
	const u_char *data;
	int32_t dval;
	const u_char *p;
	struct hid_item *hi;
	int i;
	enum hid_kind retkind;

 top:
	DPRINTFN(5,("hid_get_item: multi=%d multimax=%d\n",
		    s->multi, s->multimax));
	if (s->multimax != 0) {
		if (s->multi < s->multimax) {
			c->usage = s->usages[min(s->multi, s->nu-1)];
			s->multi++;
			*h = *c;
			c->loc.pos += c->loc.size;
			h->next = NULL;
			DPRINTFN(5,("return multi\n"));
			return (1);
		} else {
			c->loc.count = s->multimax;
			s->multimax = 0;
			s->nu = 0;
			hid_clear_local(c);
		}
	}
	for (;;) {
		p = s->p;
		if (p >= s->end)
			return (0);

		bSize = *p++;
		if (bSize == 0xfe) {
			/* long item */
			bSize = *p++;
			bSize |= *p++ << 8;
			bTag = *p++;
			data = p;
			p += bSize;
			bType = 0xff; /* XXX what should it be */
		} else {
			/* short item */
			bTag = bSize >> 4;
			bType = (bSize >> 2) & 3;
			bSize &= 3;
			if (bSize == 3) bSize = 4;
			data = p;
			p += bSize;
		}
		s->p = p;
		switch(bSize) {
		case 0:
			dval = 0;
			break;
		case 1:
			dval = /*(int8_t)*/ *data++;
			break;
		case 2:
			dval = *data++;
			dval |= *data++ << 8;
			dval = /*(int16_t)*/ dval;
			break;
		case 4:
			dval = *data++;
			dval |= *data++ << 8;
			dval |= *data++ << 16;
			dval |= *data++ << 24;
			break;
		default:
			printf("BAD LENGTH %d\n", bSize);
			continue;
		}

		DPRINTFN(5,("hid_get_item: bType=%d bTag=%d dval=%d\n",
			 bType, bTag, dval));
		switch (bType) {
		case 0:			/* Main */
			switch (bTag) {
			case 8:		/* Input */
				retkind = hid_input;
			ret:
				if (s->kind != retkind) {
					s->minset = 0;
					s->nu = 0;
					hid_clear_local(c);
					continue;
				}
				c->kind = retkind;
				c->flags = dval;
				if (c->flags & HIO_VARIABLE) {
					s->multimax = c->loc.count;
					s->multi = 0;
					c->loc.count = 1;
					if (s->minset) {
						for (i = c->usage_minimum;
						     i <= c->usage_maximum;
						     i++) {
							s->usages[s->nu] = i;
							if (s->nu < MAXUSAGE-1)
								s->nu++;
						}
						s->minset = 0;
					}
					goto top;
				} else {
					c->usage = c->_usage_page; /* XXX */
					*h = *c;
					h->next = NULL;
					c->loc.pos +=
					    c->loc.size * c->loc.count;
					s->minset = 0;
					s->nu = 0;
					hid_clear_local(c);
					return (1);
				}
			case 9:		/* Output */
				retkind = hid_output;
				goto ret;
			case 10:	/* Collection */
				c->kind = hid_collection;
				c->collection = dval;
				c->collevel++;
				*h = *c;
				hid_clear_local(c);
				s->nu = 0;
				return (1);
			case 11:	/* Feature */
				retkind = hid_feature;
				goto ret;
			case 12:	/* End collection */
				c->kind = hid_endcollection;
				c->collevel--;
				*h = *c;
				s->nu = 0;
				return (1);
			default:
				printf("Main bTag=%d\n", bTag);
				break;
			}
			break;
		case 1:		/* Global */
			switch (bTag) {
			case 0:
				c->_usage_page = dval << 16;
				break;
			case 1:
				c->logical_minimum = dval;
				break;
			case 2:
				c->logical_maximum = dval;
				break;
			case 3:
				c->physical_maximum = dval;
				break;
			case 4:
				c->physical_maximum = dval;
				break;
			case 5:
				c->unit_exponent = dval;
				break;
			case 6:
				c->unit = dval;
				break;
			case 7:
				c->loc.size = dval;
				break;
			case 8:
				c->report_ID = dval;
				c->loc.pos = 0;
				break;
			case 9:
				c->loc.count = dval;
				break;
			case 10: /* Push */
				hi = malloc(sizeof *hi, M_TEMP, M_WAITOK);
				*hi = *c;
				c->next = hi;
				break;
			case 11: /* Pop */
				hi = c->next;
				oldpos = c->loc.pos;
				*c = *hi;
				c->loc.pos = oldpos;
				free(hi, M_TEMP);
				break;
			default:
				printf("Global bTag=%d\n", bTag);
				break;
			}
			break;
		case 2:		/* Local */
			switch (bTag) {
			case 0:
				if (bSize == 1)
					dval = c->_usage_page | (dval&0xff);
				else if (bSize == 2)
					dval = c->_usage_page | (dval&0xffff);
				c->usage = dval;
				if (s->nu < MAXUSAGE)
					s->usages[s->nu++] = dval;
				/* else XXX */
				break;
			case 1:
				s->minset = 1;
				if (bSize == 1)
					dval = c->_usage_page | (dval&0xff);
				else if (bSize == 2)
					dval = c->_usage_page | (dval&0xffff);
				c->usage_minimum = dval;
				break;
			case 2:
				if (bSize == 1)
					dval = c->_usage_page | (dval&0xff);
				else if (bSize == 2)
					dval = c->_usage_page | (dval&0xffff);
				c->usage_maximum = dval;
				break;
			case 3:
				c->designator_index = dval;
				break;
			case 4:
				c->designator_minimum = dval;
				break;
			case 5:
				c->designator_maximum = dval;
				break;
			case 7:
				c->string_index = dval;
				break;
			case 8:
				c->string_minimum = dval;
				break;
			case 9:
				c->string_maximum = dval;
				break;
			case 10:
				c->set_delimiter = dval;
				break;
			default:
				printf("Local bTag=%d\n", bTag);
				break;
			}
			break;
		default:
			printf("default bType=%d\n", bType);
			break;
		}
	}
}

int
hid_report_size(const void *buf, int len, enum hid_kind k, u_int8_t id)
{
	struct hid_data *d;
	struct hid_item h;
	int lo, hi;

	h.report_ID = 0;
	lo = hi = -1;
	DPRINTFN(2,("hid_report_size: kind=%d id=%d\n", k, id));
	for (d = hid_start_parse(buf, len, k); hid_get_item(d, &h); ) {
		DPRINTFN(2,("hid_report_size: item kind=%d id=%d pos=%d "
			    "size=%d count=%d\n",
			    h.kind, h.report_ID, h.loc.pos, h.loc.size,
			    h.loc.count));
		if (h.report_ID == id && h.kind == k) {
			if (lo < 0) {
				lo = h.loc.pos;
#ifdef DIAGNOSTIC
				if (lo != 0) {
					printf("hid_report_size: lo != 0\n");
				}
#endif
			}
			hi = h.loc.pos + h.loc.size * h.loc.count;
			DPRINTFN(2,("hid_report_size: lo=%d hi=%d\n", lo, hi));
		}
	}
	hid_end_parse(d);
	return ((hi - lo + 7) / 8);
}

int
hid_locate(const void *desc, int size, u_int32_t u, u_int8_t id, enum hid_kind k,
	   struct hid_location *loc, u_int32_t *flags)
{
	struct hid_data *d;
	struct hid_item h;

	h.report_ID = 0;
	DPRINTFN(5,("hid_locate: enter usage=0x%x kind=%d id=%d\n", u, k, id));
	for (d = hid_start_parse(desc, size, k); hid_get_item(d, &h); ) {
		DPRINTFN(5,("hid_locate: usage=0x%x kind=%d id=%d flags=0x%x\n",
			    h.usage, h.kind, h.report_ID, h.flags));
		if (h.kind == k && !(h.flags & HIO_CONST) &&
		    h.usage == u && h.report_ID == id) {
			if (loc != NULL)
				*loc = h.loc;
			if (flags != NULL)
				*flags = h.flags;
			hid_end_parse(d);
			return (1);
		}
	}
	hid_end_parse(d);
	loc->size = 0;
	return (0);
}

long
hid_get_data(const u_char *buf, const struct hid_location *loc)
{
	u_int hsize = loc->size;
	u_long data;

	if (hsize == 0)
		return (0);

	data = hid_get_udata(buf, loc);
	if (data < (1 << (hsize - 1)))
		return (data);
	return data - (1 << hsize);
}

u_long
hid_get_udata(const u_char *buf, const struct hid_location *loc)
{
	u_int hpos = loc->pos;
	u_int hsize = loc->size;
	u_int i, num, off;
	u_long data;

	if (hsize == 0)
		return (0);

	data = 0;
	off = hpos / 8;
	num = (hpos + hsize + 7) / 8 - off;

	for (i = 0; i < num; i++)
		data |= buf[off + i] << (i * 8);

	data >>= hpos % 8;
	data &= (1 << hsize) - 1;

	DPRINTFN(10,("hid_get_udata: loc %d/%d = %lu\n", hpos, hsize, data));
	return (data);
}

/*
 * hid_is_collection(desc, size, id, usage)
 *
 * This function is broken in the following way.
 *
 * It is used to discover if the given 'id' is part of 'usage' collection
 * in the descriptor in order to match report id against device type.
 *
 * The semantics of hid_start_parse() means though, that only a single
 * kind of report is considered. The current HID code that uses this for
 * matching is actually only looking for input reports, so this works
 * for now.
 * 
 * This function could try all report kinds (input, output and feature)
 * consecutively if necessary, but it may be better to integrate the
 * libusbhid code which can consider multiple report kinds simultaneously
 *
 * Needs some thought.
 */
int
hid_is_collection(const void *desc, int size, u_int8_t id, u_int32_t usage)
{
	struct hid_data *hd;
	struct hid_item hi;
	u_int32_t coll_usage = ~0;

	hd = hid_start_parse(desc, size, hid_input);
	if (hd == NULL)
		return (0);

	DPRINTFN(2,("hid_is_collection: id=%d usage=0x%x\n", id, usage));
	while (hid_get_item(hd, &hi)) {
		DPRINTFN(2,("hid_is_collection: kind=%d id=%d usage=0x%x"
			    "(0x%x)\n",
			    hi.kind, hi.report_ID, hi.usage, coll_usage));

		if (hi.kind == hid_collection &&
		    hi.collection == HCOLL_APPLICATION)
			coll_usage = hi.usage;

		if (hi.kind == hid_endcollection)
			coll_usage = ~0;

		if (hi.kind == hid_input &&
		    coll_usage == usage &&
		    hi.report_ID == id) {
			DPRINTFN(2,("hid_is_collection: found\n"));
			hid_end_parse(hd);
			return (1);
		}
	}
	DPRINTFN(2,("hid_is_collection: not found\n"));
	hid_end_parse(hd);
	return (0);
}
@


1.6
log
@Update hid.c, ums.c to latest (ish), update usbmouse.c, add TouchBook touchpad fix
Detail:
  dev/usb/c/hid, dev/usb/h/hid, dev/usb/c/ums - Updated to latest NetBSD versions (actually the version that was used for the recent core/EHCI update, so not 100% latest)
  build/c/usbmouse, dev/wscons/h/wsmousevar - Updated RISC OS USB mouse driver to be similar to the new NetBSD version. Also reformatted file to use tab char instead of inconsistent numbers of spaces for indentation.
  build/c/usbmouse, dev/usb/usbdevs - Added fix for broken TouchBook touchpad behaviour.
Admin:
  Tested with various mice on a beagleboard, and with the TouchBook touchpad.
  We should now have support for the W axis of mice, but that code is untested since I don't have any suitable mice to hand.


Version 0.53. Tagged as 'NetBSD-0_53'
@
text
@d34 3
d38 1
a38 1
#ifndef __riscos__
@


1.5
log
@        Stack brought up to date with NetBSD sources as at 20050121.
        USB2 further debugged.
Detail:
        Check in prior to second beta release. Improvements also to
        softloading of replacement modules.
Admin:
        Checked with JB .. further crosschecking is still needed for rhenium.
        Castle/D Ellis added ip from NetBSD sources


Version 0.33. Tagged as 'NetBSD-0_33'
@
text
@d1 1
a1 1
/*	$NetBSD: hid.c,v 1.23 2002/07/11 21:14:25 augustss Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d35 3
a37 1
//__KERNEL_RCSID(0, "$NetBSD: hid.c,v 1.23 2002/07/11 21:14:25 augustss Exp $");
d66 3
a68 3
	u_char *start;
	u_char *end;
	u_char *p;
d96 1
a96 1
hid_start_parse(void *d, int len, enum hid_kind kind)
d106 1
a106 1
	s->end = (void*) ((char *)d + len);
d129 1
a129 1
	u_char *data;
d131 1
a131 1
	u_char *p;
d198 1
a198 1
                        printf("BAD LENGTH %d\n", bSize);
d265 1
a265 1
                                printf("Main bTag=%d\n", bTag);
d304 1
a304 1
				*hi = s->cur;
d310 1
a310 1
				s->cur = *hi;
d315 1
a315 1
                                printf("Global bTag=%d\n", bTag);
d368 1
a368 1
                                printf("Local bTag=%d\n", bTag);
d373 1
a373 1
                        printf("default bType=%d\n", bType);
d380 1
a380 1
hid_report_size(void *buf, int len, enum hid_kind k, u_int8_t id)
d399 1
a399 1
                                        printf("hid_report_size: lo != 0\n");
d412 1
a412 1
hid_locate(void *desc, int size, u_int32_t u, u_int8_t id, enum hid_kind k,
d438 15
d454 1
a454 1
hid_get_data(u_char *buf, struct hid_location *loc)
d458 2
a459 4
	u_int32_t data;
	int i, s;

	DPRINTFN(10, ("hid_get_data: loc %d/%d\n", hpos, hsize));
d465 6
a470 3
	s = hpos / 8;
	for (i = hpos; i < hpos+hsize; i += 8)
		data |= buf[i / 8] << ((i / 8 - s) * 8);
d473 2
a474 5
	hsize = 32 - hsize;
	/* Sign extend */
	data = ((int32_t)data << hsize) >> hsize;
	DPRINTFN(10,("hid_get_data: loc %d/%d = %lu\n",
		    loc->pos, loc->size, (long)data));
d478 19
d498 1
a498 1
hid_is_collection(void *desc, int size, u_int8_t id, u_int32_t usage)
d504 1
a504 1
	hd = hid_start_parse(desc, size, hid_none);
d513 1
d517 5
a521 1
		if (hi.kind == hid_endcollection &&
@


1.4
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d64 3
a66 1

d203 1
a203 1
			logprintf("BAD LENGTH %d\n", bSize);
d270 1
a270 1
				logprintf("Main bTag=%d\n", bTag);
d320 1
a320 1
				logprintf("Global bTag=%d\n", bTag);
d373 1
a373 1
				logprintf("Local bTag=%d\n", bTag);
d378 1
a378 1
			logprintf("default bType=%d\n", bType);
d404 1
a404 1
					logprintf("hid_report_size: lo != 0\n");
@


1.3
log
@  New versions from John.
Detail:
  * All modules will now rmkill/rmload more reliably
  * Keyboard driver disables kernel debounce on new enough kernels, needed
    for many PS2-USB adaptors, bar code scanners etc
  * Mouse driver will scroll wheel scroll any windows that do respond to
    scroll events, otherwise it issues PointerReason_WheelChange (9) to an
    external WimpScroll module
  * Several bugs and an interrupt hole resolved
Admin:
  Tested at Framlingham.

Version 0.25. Tagged as 'NetBSD-0_25'
@
text
@d42 1
a42 1
__KERNEL_RCSID(0, "$NetBSD: hid.c,v 1.23 2002/07/11 21:14:25 augustss Exp $");
@


1.2
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d59 1
a59 1
extern int uhidevdebug;
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/*	$NetBSD: hid.c,v 1.16 2000/06/01 14:28:57 augustss Exp $	*/
d41 3
d56 4
a59 4
#ifdef UHID_DEBUG
#define DPRINTF(x)	if (usbdebug) logprintf x
#define DPRINTFN(n,x)	if (usbdebug>(n)) logprintf x
extern int usbdebug;
d67 1
a67 1
#define MAXUSAGE 100
d78 1
a78 1
	int kindset;
d85 1
d99 1
a99 1
hid_start_parse(void *d, int len, int kindset)
d103 3
a105 1
	s = malloc(sizeof *s, M_TEMP, M_WAITOK);
d107 1
d109 2
a110 2
	s->end = (u_char *)d + len;
	s->kindset = kindset;
d137 1
d140 2
d148 2
a149 1
			h->next = 0;
d187 1
a187 1
			dval = (int8_t)*data++;
d192 1
a192 1
			dval = (int16_t)dval;
d205 2
d211 6
a216 1
				if (!(s->kindset & (1 << hid_input)))
d218 2
a219 1
				c->kind = hid_input;
a220 1
			ret:
d237 1
d239 1
a239 1
					h->next = 0;
d241 3
a243 1
						c->loc.size * c->loc.count;
a244 1
					s->minset = 0;
d248 1
a248 4
				if (!(s->kindset & (1 << hid_output)))
					continue;
				c->kind = hid_output;
				c->flags = dval;
d259 1
a259 4
				if (!(s->kindset & (1 << hid_feature)))
					continue;
				c->kind = hid_feature;
				c->flags = dval;
a264 1
				hid_clear_local(c);
d300 1
d383 1
a383 1
hid_report_size(void *buf, int len, enum hid_kind k, u_int8_t *idp)
d387 1
a387 1
	int size, id;
d389 21
a409 4
	id = 0;
	for (d = hid_start_parse(buf, len, 1<<k); hid_get_item(d, &h); )
		if (h.report_ID != 0)
			id = h.report_ID;
d411 1
a411 8
	size = h.loc.pos;
	if (id != 0) {
		size += 8;
//		*idp = id;	/* XXX wrong */
		*idp = 1;       /* kludge to get some devices working */
	} else
		*idp = 0;
	return ((size + 7) / 8);
d415 1
a415 1
hid_locate(void *desc, int size, u_int32_t u, enum hid_kind k,
d421 7
a427 2
	for (d = hid_start_parse(desc, size, 1<<k); hid_get_item(d, &h); ) {
		if (h.kind == k && !(h.flags & HIO_CONST) && h.usage == u) {
d469 1
a469 1
hid_is_collection(void *desc, int size, u_int32_t usage)
d473 1
a473 3
	int err;

	DPRINTFN(10, ("HID is collection\n"));
d475 1
a475 1
	hd = hid_start_parse(desc, size, hid_input);
d479 17
a495 3
	err = hid_get_item(hd, &hi) &&
	    hi.kind == hid_collection &&
	    hi.usage == usage;
d497 1
a497 2
	DPRINTFN(10, ("returning %d\n", err));
	return (err);
@

