head	1.4;
access;
symbols
	NetBSD-1_19:1.4
	NetBSD-1_18:1.4
	NetBSD-1_17:1.4
	NetBSD-1_16:1.4
	NetBSD-1_15:1.4
	NetBSD-1_14:1.4
	NetBSD-1_13:1.4
	NetBSD-1_12:1.4
	NetBSD-1_09-1:1.4
	NetBSD-1_11:1.4
	NetBSD-1_10:1.4
	NetBSD-1_09:1.4
	NetBSD-1_08:1.4
	NetBSD-1_07:1.4
	NetBSD-1_06:1.4
	NetBSD-1_05:1.4
	NetBSD-1_04:1.4
	NetBSD-1_03:1.4
	NetBSD-1_02:1.4
	NetBSD-1_01:1.4
	NetBSD-1_00:1.4
	NetBSD-0_99:1.4
	NetBSD-0_98:1.4
	NetBSD-0_97:1.4
	NetBSD-0_96:1.4
	NetBSD-0_95:1.4
	NetBSD-0_94:1.4
	NetBSD-0_93:1.4
	NetBSD-0_92:1.4
	NetBSD-0_91:1.4
	NetBSD-0_90:1.3
	NetBSD-0_89:1.3
	NetBSD-0_88:1.3
	NetBSD-0_87:1.3
	NetBSD-0_86:1.3
	NetBSD-0_85:1.3
	NetBSD-0_84:1.3
	NetBSD-0_83:1.2
	NetBSD-0_82:1.2
	NetBSD-0_81:1.2
	NetBSD-0_80:1.2
	NetBSD-0_79:1.2
	NetBSD-0_78:1.2
	NetBSD-0_77:1.2
	NetBSD-0_76:1.2
	NetBSD-0_75:1.2
	NetBSD-0_74:1.2
	NetBSD-0_73:1.2
	NetBSD-0_72:1.2
	NetBSD-0_71:1.2
	NetBSD-0_70:1.2
	NetBSD-0_69:1.2
	NetBSD-0_68:1.2
	NetBSD-0_67:1.2
	NetBSD-0_66:1.2
	NetBSD-0_65:1.2
	NetBSD-0_64:1.2
	NetBSD-0_63:1.2
	NetBSD-0_62:1.2
	NetBSD-0_61:1.1
	NetBSD-0_60:1.1
	NetBSD-0_59:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.01.01.14.59.01;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	1ZqmNuZnVfz5Fk4y;

1.3
date	2014.05.27.19.31.39;	author jlee;	state Exp;
branches;
next	1.2;
commitid	wb2RWYxDipk3ddCx;

1.2
date	2011.08.22.22.38.23;	author jlee;	state Exp;
branches;
next	1.1;
commitid	DX6w1a2oIxQTFywv;

1.1
date	2011.05.22.20.22.46;	author jlee;	state Exp;
branches;
next	;
commitid	Ye1jVWDlKivFSIkv;


desc
@@


1.4
log
@Use KbdFlags from OSEntries header
Exposed possible return with reserved bit 8 set when enter was pressed.

Version 0.91. Tagged as 'NetBSD-0_91'
@
text
@/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Extra bits needed to allow us to compile the USB drivers as a static lib for
   linking with the HAL */
#ifdef USBHAL
__global_reg(6) void *hal_sb;

#include <sys/types.h>
#include <sys/device.h>

typedef struct {
	void (*cbfunc)(void *);
	void *param;
} usbhal_callback;

/* USBHAL workspace structure - must match Hdr.usbhal */
typedef struct {
	void *heap_normal; /* Heap structure for malloc & free */
	void *heap_ncnb; /* Heap structure for malloc_contig & free_contig */
	struct devicelist allbuses; /* List of registered buses */
	int usbbus_no; /* Next number to use */
	uint32_t monotonictime; /* Centisecond counter equivalent to OS_ReadMonotonicTime */
	struct callout *callouts; /* Head of callout list; i.e. the callout to execute next */
	uint32_t irqsema; /* nonzero whenever we're processing interrupts */
	struct callout *rediscover; /* re_discover callout */
	/* tsleep/wakeup stuff */
	void **t_handles;
	int *t_locks;
	int nhandles;
	/* Keyboard scan */
	uint32_t kbdflags; /* Sticky keyboard scan bits */
	/* Callbacks */
	usbhal_callback *callbacks; /* Array of callbacks, handled as circular buffer */
	int nextcb; /* Index of next callback to run */
	int numcb; /* Number of callbacks */
	int cbs_needed; /* True if callbacks need processing */
} usbhal_ws;

extern int USBHAL_WorkspaceOffset;
extern int USBHAL_OSentriesOffset;

#define USBHALWS ((usbhal_ws *)(((int)hal_sb)+((int)&USBHAL_WorkspaceOffset)))
#define OSentries ((int *)(((int)hal_sb)+((int)&USBHAL_OSentriesOffset)))

extern void HAL_IRQClear(int device);
#define riscos_irqclear HAL_IRQClear

/* Initialise workspace, heaps & core USB code */
extern void USBHAL_Init(void *heapbase,uint32_t heapsize,void *ncnbbase,uint32_t ncnbsize);

/* Process keyboard scan */
extern uint32_t USBHAL_KbdScan(void);

/* Process keyboard scan interrupt. Returns -1 if IRQ handled, or 'irq' if not. */
extern int USBHAL_KbdScanInterrupt(int irq);

/* Finish keyboard scan and shut everything down */
extern void USBHAL_Shutdown(void);

/* Callback interface */
extern void USBHAL_AddCallback(void (*cbfunc)(void *),void *param);
extern void USBHAL_RemoveCallback(void (*cbfunc)(void *),void *param);

#endif
@


1.3
log
@Fixes to callback implementation used by HAL drivers
Detail:
  build/c/usbhal - Restructured triggercbs() so that it doesn't use irqsema to prevent callbacks triggering recursively, as this behaviour can be required sometimes (e.g. xfer timeout callback for a blocking xfer that's being performed within the bus explore callback).
  Instead, a 'callbacks needed' flag is used to decide whether callbacks should be processed, which operates in a similar way to the kernel's CBack_VectorReq flag - once a triggercbs() instance starts processing callbacks, no other calls will process them until a new callback is inserted.
  Also fixed indexing of the callback array within triggercbs() to correctly deal with wrap-around
  build/Hdr/usbhal, dev/usb/h/usbhal - Add cbs_needed to workspace
Admin:
  Tested on BB-xM with high processor vectors
  Fixes hang during boot time keyboard scan that was seen when certain devices were connected


Version 0.84. Tagged as 'NetBSD-0_84'
@
text
@a59 13
/* Keyboard scan flags
   TODO - Should be in Kernel.Hdr.HALEntries */

#define HAL_KbdScan_Ctrl        (1u<<0)
#define HAL_KbdScan_Shift       (1u<<1)
#define HAL_KbdScan_R           (1u<<4)
#define HAL_KbdScan_T           (1u<<5)
#define HAL_KbdScan_Delete      (1u<<6)
#define HAL_KbdScan_End         (1u<<7)
#define HAL_KbdScan_Return      (1u<<8)
#define HAL_KbdScan_Present     (1u<<30)
#define HAL_KbdScan_Complete    (1u<<31)

@


1.2
log
@Update HAL USB code for new HAL_KbdScanInterrupt behaviour. Fix data aborts during keyboard scanning.
Detail:
  build/c/usbhal, build/h/usbhal - Updated USBHAL_KbdScanInterrupt to behave the same way HAL_KbdScanInterrupt is now expected to behave.
  build/c/ehci, build/c/ohci - Fixed some root hub emulation code which was writing to a global structure before copying it into the destination buffer. Although this works fine in ROM modules it was causing data aborts in the USB HAL libraries due to lack of automatic RW data relocation by the compiler.
  build/Version - Updated version numbers
Admin:
  Tested on rev C2 BB.


Version 0.62. Tagged as 'NetBSD-0_62'
@
text
@d48 1
@


1.1
log
@Add the ability to build the USB drivers as HAL-compatible static libraries
Detail:
  build/Makefile, build/OBJEHCIDriver, build/OBJOHCIDriver, build/OBJUSBDriver - Modified makefiles to build the HAL libs during the export libs phase
  build/!MkHAL,fd7 - Handy script for building the HAL libs
  build/Hdr/usbhal - Header containing definitions for the assembler code. Also gets exported so that HALs know how much workspace to reserve.
  build/c/usbhal - HAL version of usbmodule.c & port.c. Also contains the keyboard scan code, adapted from the code in the Tungsten HAL.
  build/s/porthal - Assembler versions of some port.c routines that were easier to do in assembler than C
  build/s/halheap - OS_Heap code that's been adapted for use in the HAL. Could easily be changed into a standalone library instead of being part of the HAL USB libs. Supports memory-efficient allocation of aligned blocks.
  build/c/ehcihal - HAL version of ehcimodule.c. Currently only supports EHCI controllers exposed via HAL_USBControllerInfo (i.e. no PCI support)
  build/c/ehcimodule, build/c/ohcimodule, build/c/port - Moved riscos_irq_clear into port.c. Removed unused microtime() function.
  build/c/usbmouse - Strip out some debug-related code in non-debug builds
  build/Version - Updated version numbers
  dev/usb/c/ehci, dev/usb/h/ehcivar - Adapted to add support for the HAL build. Apart from the base changes, the code has also been tweaked to significantly reduce the amount of memory used at runtime by the HAL version of the driver.
  dev/usb/c/hid, dev/usb/c/uhub, dev/usb/c/usb, dev/usb/c/usb_quirks, dev/usb/c/usb_subr, dev/usb/c/usbdi, dev/usb/c/usbdi_util, dev/usb/c/usbroothub_subr - Changes to support HAL builds. Mainly disabling bits that won't work in the HAL or disabling bits for RISC OS in general if they weren't being used in the first place.
  dev/usb/c/ohci, dev/usb/h/ohcivar - Basic changes to support HAL builds. However HAL OHCI support is still incomplete.
  dev/usb/h/usb_port - Added support for the HAL build. Also tweaked logprintf definition to get rid of logprintf calls entirely in non-debug builds.
  dev/usb/h/usbdivar - Added support for the HAL build.
  dev/usb/h/usbhal - New header used by the HAL build. Gets included by every C file to ensure the compiler doesn't use sb, and contains structs/macros to allow access to the shared workspace.
Admin:
  HAL & non-HAL builds tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook.
  Non-HAL builds tested with Iyonix ROM softload.
  Needs latest Kernel source for OSEntries.h export.


Version 0.59. Tagged as 'NetBSD-0_59'
@
text
@d78 2
a79 2
/* Process keyboard scan interrupt */
extern void USBHAL_KbdScanInterrupt(void);
@

