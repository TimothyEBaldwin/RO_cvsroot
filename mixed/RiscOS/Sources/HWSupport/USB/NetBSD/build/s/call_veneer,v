head	1.6;
access;
symbols
	NetBSD-1_19:1.6
	NetBSD-1_18:1.6
	NetBSD-1_17:1.6
	NetBSD-1_16:1.6
	NetBSD-1_15:1.6
	NetBSD-1_14:1.6
	NetBSD-1_13:1.6
	NetBSD-1_12:1.6
	NetBSD-1_09-1:1.6
	NetBSD-1_11:1.6
	NetBSD-1_10:1.6
	NetBSD-1_09:1.6
	NetBSD-1_08:1.6
	NetBSD-1_07:1.6
	NetBSD-1_06:1.6
	NetBSD-1_05:1.6
	NetBSD-1_04:1.6
	NetBSD-1_03:1.6
	NetBSD-1_02:1.6
	NetBSD-1_01:1.6
	NetBSD-1_00:1.6
	NetBSD-0_99:1.6
	NetBSD-0_98:1.6
	NetBSD-0_97:1.6
	NetBSD-0_96:1.6
	NetBSD-0_95:1.6
	NetBSD-0_94:1.6
	NetBSD-0_93:1.6
	NetBSD-0_92:1.6
	NetBSD-0_91:1.6
	NetBSD-0_90:1.6
	NetBSD-0_89:1.6
	NetBSD-0_88:1.6
	NetBSD-0_87:1.6
	NetBSD-0_86:1.6
	NetBSD-0_85:1.6
	NetBSD-0_84:1.6
	NetBSD-0_83:1.6
	NetBSD-0_82:1.6
	NetBSD-0_81:1.6
	NetBSD-0_80:1.6
	NetBSD-0_79:1.6
	NetBSD-0_78:1.6
	NetBSD-0_77:1.6
	NetBSD-0_76:1.6
	NetBSD-0_75:1.6
	NetBSD-0_74:1.6
	NetBSD-0_73:1.6
	NetBSD-0_72:1.6
	NetBSD-0_71:1.6
	NetBSD-0_70:1.5
	NetBSD-0_69:1.5
	NetBSD-0_68:1.5
	NetBSD-0_67:1.5
	NetBSD-0_66:1.5
	NetBSD-0_65:1.5
	NetBSD-0_64:1.5
	NetBSD-0_63:1.5
	NetBSD-0_62:1.5
	NetBSD-0_61:1.5
	NetBSD-0_60:1.5
	NetBSD-0_59:1.5
	NetBSD-0_58:1.5
	NetBSD-0_57:1.5
	NetBSD-0_56:1.5
	NetBSD-0_55:1.5
	NetBSD-0_54:1.5
	NetBSD-0_53:1.5
	NetBSD-0_52:1.5
	NetBSD-0_51:1.5
	NetBSD-0_50:1.5
	NetBSD-0_49:1.5
	NetBSD-0_48:1.4
	NetBSD-0_47:1.4
	NetBSD-0_46:1.4
	NetBSD-0_45:1.4
	NetBSD-0_44:1.4
	NetBSD-0_43:1.4
	NetBSD-0_42:1.4
	NetBSD-0_41:1.4
	NetBSD-0_40:1.4
	NetBSD-0_39:1.4
	NetBSD-0_38:1.4
	NetBSD-0_37:1.4
	NetBSD-0_36:1.4
	NetBSD-0_35:1.4
	NetBSD-0_34:1.4
	NetBSD-0_33:1.4
	NetBSD-0_32:1.4
	NetBSD-0_31:1.4
	NetBSD-0_30:1.4
	NetBSD-0_29:1.3
	RO_5_07:1.3
	NetBSD-0_28:1.3
	NetBSD-0_27:1.2
	NetBSD-0_26:1.2
	NetBSD-0_25:1.1
	NetBSD-0_24:1.1
	NetBSD-0_23:1.1
	NetBSD-0_21-1_22_2_1:1.1.2.1
	NetBSD-0_22:1.1
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.6
date	2012.06.07.00.11.10;	author jlee;	state Exp;
branches;
next	1.5;
commitid	LkYeKFZjKWlNTH7w;

1.5
date	2009.10.02.20.59.02;	author jlee;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.25.00.54.53;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.12.14.47.40;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.30.14.50.36;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.16;	author dellis;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.16.15.38.42;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Make RHENIUM build switch go away. Misc housekeeping
Detail:
  build/Makefile, build/!MkDebug,fd7 - Debug versions of the modules can now be built just by passing "DEBUG=TRUE" to amu
  build/!MkRhenium,fd7 - Deleted obsolete file
  build/Version - Increased version numbers
  build/c/ehcihal, build/c/ehcimodule, build/c/ohcimodule - Only accept USB controllers if HAL_USBControllerInfo says the struct size is an exact match with what we expect. Rework USB controller enumeration to allow modules to properly support both PCI and HAL controllers being available on the same machine, and without RHENIUM switch (module sources only).
  build/c/ehcimodule - Get rid of remaining RHENIUM bits; RHENIUM flag no longer needed for 32bit wide register reads/writes to be supported
  build/c/ohcimodule, build/cmhg/ohcimodhead, dev/usb/c/ohci - Get rid of remaining RHENIUM bits; RHENIUM flag no longer needed for HAL port power controls to be supported.
  build/c/usbhal, build/c/usbmodule, dev/usb/c/uhub, dev/usb/h/usb_port - Get rid of empty riscos_failed_device function
  build/s/call_veneer, build/s/triggercbs - Use Entry/EXIT macros to avoid single-reg LDM/STM performance warnings. Convert tabs to spaces.
  dev/usb/h/usb - Get rid of RHENIUM switch on USB_PORT_RESET_DELAY. Now always uses non-RHENIUM value of 100ms.
Admin:
  Tested on rev A2 BB-xM, Iyonix, Raspberry Pi


Version 0.71. Tagged as 'NetBSD-0_71'
@
text
@; Copyright 2003 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; little assembler stub to call an interrupt handler with an argument i r12
        GET     Hdr:ListOpts
        OPT     OptNoList
        GET     Hdr:Macros              ; system wide macro definitions
        GET     Hdr:System              ; swis and hardware declarations
        GET     Hdr:Proc


        AREA    |C$$code|, CODE, READONLY
        EXPORT  init_veneer
        IMPORT  memcpy

init_veneer
        Entry

        ; claim memory for block, exit with NULL on error
        MOV     r0, #6
        MOV     r3, #magic_end - magic_start
        SWI     XOS_Module
        MOVVS   a1, #0
        EXIT    VS

        ; memcpy the existing block
        MOV     a1, r2
        ADR     a2, magic_start
        MOV     a3, #magic_end - magic_start
        BL      memcpy

        ; poke the magic words
        SUB     sl, sl, #540
        LDMIA   sl, {a2,a3}
        STMIA   a1, {a2,a3}
        ADD     sl, sl, #540

        ; Flush the cache!
        MOV     a2, a1
        ADD     a3, a2, #magic_end - magic_start
        MOV     a1, #1
        SWI     XOS_SynchroniseCodeAreas
        MOV     a1, a2

        ; return pointing to the block
        EXIT

magic_start
mwords  DCD     0
        DCD     0

common  Entry   "v1,v2,fp"
        SUB     sl, sl, #540
        LDMIA   sl, {v1,v2}
        ADR     fp, mwords
        LDMIA   fp, {fp,lr}
        STMIA   sl, {fp,lr}
        ADD     sl, sl, #540
        MOV     fp, #0
        MOV     lr, pc
        MOV     pc, ip
        SUB     sl, sl, #540
        STMIA   sl, {v1,v2}
        ADD     sl, sl, #540
        EXIT
magic_end

; hal_veneer(code, ws)  up to 2 arguments supported
        EXPORT  hal_veneer2

hal_veneer2
        Entry   "r9"
        MOV     ip, a1
        MOV     r9, a2
        MOV     a1, a3
        MOV     a2, a4
        MOV     lr, pc
        MOV     pc, ip
        EXIT



        END
@


1.5
log
@Fix EHCIDriver & OHCIDriver to sync the caches properly when setting up assembler veneers
Detail:
  init_veneer and build_veneer weren't calling OS_SynchroniseCodeAreas to properly sync the I+D caches after writing the assembler veneers to RMA. In some cases this was causing random crashes on boot. This should now be fixed.
Admin:
  Tested on rev C2 beagleboard


Version 0.49. Tagged as 'NetBSD-0_49'
@
text
@d18 4
a21 3
	OPT	OptNoList
        GET     Hdr:Macros		; system wide macro definitions
        GET     Hdr:System		; swis and hardware declarations
d24 3
a26 3
	AREA	|C$$code|, CODE, READONLY
    	EXPORT	init_veneer
	IMPORT	memcpy
d29 1
a29 1
        STMFD   sp!, {lr}
d32 5
a36 5
	MOV	r0, #6
	MOV	r3, #magic_end - magic_start
        SWI	XOS_Module
	MOVVS	a1, #0
	LDMVSFD	sp!, {pc}
d39 4
a42 4
	MOV	a1, r2
	ADR	a2, magic_start
	MOV	a3, #magic_end - magic_start
	BL	memcpy
d45 11
a55 11
        SUB	sl, sl, #540
	LDMIA	sl, {a2,a3}
	STMIA	a1, {a2,a3}
	ADD	sl, sl, #540

	; Flush the cache!
	MOV	a2, a1
	ADD	a3, a2, #magic_end - magic_start
	MOV	a1, #1
	SWI	XOS_SynchroniseCodeAreas
	MOV	a1, a2
d58 1
a58 1
        LDMFD   sp!, {pc}
d64 14
a77 14
common  STMFD	sp!, {v1,v2,fp,lr}
        SUB	sl, sl, #540
	LDMIA	sl, {v1,v2}
	ADR	fp, mwords
	LDMIA	fp, {fp,lr}
	STMIA	sl, {fp,lr}
	ADD	sl, sl, #540
	MOV	fp, #0
	MOV	lr, pc
	MOV	pc, ip
	SUB	sl, sl, #540
	STMIA	sl, {v1,v2}
	ADD	sl, sl, #540
	LDMFD	sp!, {v1,v2,fp,pc}
d84 1
a84 1
        STMFD   sp!,{r9,lr}
d91 1
a91 1
        LDMFD   sp!,{r9,pc}
d95 1
a95 1
	END
@


1.4
log
@       change to OHCIModule to pay heed to number of OHCI i/f reported
       by HAL (in Rhenium).. various other small adjustments to improve
       softloadability, both in OHCI and EHCI drivers.
Detail:
Admin:
    tested on iyonix and on rhenium
    castle added IP


Version 0.30. Tagged as 'NetBSD-0_30'
@
text
@d49 7
@


1.3
log
@  Extensive changes and bug fixes to usb and ohci ..
  'blocked' several holes that could cause freezes with awkward
  usb devices.  Added latest changes from Dan Ellis too , especially for USB2
Detail:
 many
Admin:
 Tested in ROM at Castle, and beta tested with users


Version 0.28. Tagged as 'NetBSD-0_28'
@
text
@d72 14
@


1.2
log
@Latest stuff from John - mainly Rhenium improvements.

Version 0.26. Tagged as 'NetBSD-0_26'
@
text
@a71 12
; hal_veneer(code, ws)  up to 2 arguments supported
        EXPORT  hal_veneer2

hal_veneer2
        STMFD   sp!,{r9,lr}
        MOV     ip, a1
        MOV     r9, a2
        MOV     a1, a3
        MOV     a2, a4
        MOV     lr, pc
        MOV     pc, ip
        LDMFD   sp!,{r9,pc}
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d72 13
@


1.1.2.1
log
@Added support for HAL USB devices.
Attempted interrupt hole fix.

Version 0.21, 1.22.2.1. Tagged as 'NetBSD-0_21-1_22_2_1'
@
text
@a71 13
; hal_veneer(code, ws)  up to 2 arguments supported
        EXPORT  hal_veneer2

hal_veneer2
        STMFD   sp!,{r9,lr}
        MOV     ip, a1
        MOV     r9, a2
        MOV     a1, a3
        MOV     a2, a4
        MOV     lr, pc
        MOV     pc, ip
        LDMFD   sp!,{r9,pc}

@

