head	1.2;
access;
symbols
	NetBSD-1_19:1.2
	NetBSD-1_18:1.2
	NetBSD-1_17:1.2
	NetBSD-1_16:1.2
	NetBSD-1_15:1.2
	NetBSD-1_14:1.2
	NetBSD-1_13:1.2
	NetBSD-1_12:1.2
	NetBSD-1_09-1:1.2
	NetBSD-1_11:1.2
	NetBSD-1_10:1.2
	NetBSD-1_09:1.2
	NetBSD-1_08:1.2
	NetBSD-1_07:1.2
	NetBSD-1_06:1.2
	NetBSD-1_05:1.2
	NetBSD-1_04:1.2
	NetBSD-1_03:1.2
	NetBSD-1_02:1.2
	NetBSD-1_01:1.2
	NetBSD-1_00:1.2
	NetBSD-0_99:1.2
	NetBSD-0_98:1.2
	NetBSD-0_97:1.1
	NetBSD-0_96:1.1
	NetBSD-0_95:1.1
	NetBSD-0_94:1.1
	NetBSD-0_93:1.1
	NetBSD-0_92:1.1
	NetBSD-0_91:1.1
	NetBSD-0_90:1.1
	NetBSD-0_89:1.1
	NetBSD-0_88:1.1
	NetBSD-0_87:1.1
	NetBSD-0_86:1.1
	NetBSD-0_85:1.1
	NetBSD-0_84:1.1
	NetBSD-0_83:1.1
	NetBSD-0_82:1.1
	NetBSD-0_81:1.1
	NetBSD-0_80:1.1
	NetBSD-0_79:1.1
	NetBSD-0_78:1.1
	NetBSD-0_77:1.1
	NetBSD-0_76:1.1
	NetBSD-0_75:1.1
	NetBSD-0_74:1.1
	NetBSD-0_73:1.1
	NetBSD-0_72:1.1
	NetBSD-0_71:1.1
	NetBSD-0_70:1.1
	NetBSD-0_69:1.1
	NetBSD-0_68:1.1
	NetBSD-0_67:1.1
	NetBSD-0_66:1.1
	NetBSD-0_65:1.1
	NetBSD-0_64:1.1
	NetBSD-0_63:1.1
	NetBSD-0_62:1.1
	NetBSD-0_61:1.1
	NetBSD-0_60:1.1
	NetBSD-0_59:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.08.21.19.51.28;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	3lgmD2gy1Wc2Payy;

1.1
date	2011.05.22.20.22.38;	author jlee;	state Exp;
branches;
next	;
commitid	Ye1jVWDlKivFSIkv;


desc
@@


1.2
log
@Trim unused headers
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Assembler version of port.c, for use with HAL version of the USB drivers
; See also usbhal.c for some bits which were easier done in C.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr.usbhal

sb              RN      9

        AREA    |C$$code|, CODE, READONLY

        ; External interfaces to HAL code
        IMPORT  USBHAL_WorkspaceOffset
        IMPORT  HAL_CounterDelay
        IMPORT  snprintf
        IMPORT  printf

        ; Internal interfaces to rest of HAL USB code
        EXPORT  spltty
        EXPORT  splx
        EXPORT  splbio
        EXPORT  delay
        EXPORT  selrecord
        EXPORT  selwakeup
        EXPORT  config_deactivate
        EXPORT  uiomove
        EXPORT  psignal
        EXPORT  kthread_create
        EXPORT  kthread_create1
        EXPORT  kthread_exit
        EXPORT  device_probe_and_attach
        EXPORT  ratecheck
        EXPORT  malloc_contig
        EXPORT  free_contig
        EXPORT  min
        EXPORT  logprintf
        EXPORT  cold
        EXPORT  hz
        EXPORT  _snprintf
        EXPORT  malloc
        EXPORT  free

        IMPORT  HALHeap_GetArea
        IMPORT  HALHeap_GetAreaAligned
        IMPORT  HALHeap_FreeArea

cold
        DCD     0
hz
        DCD     1000

spltty
        MRS     a1, CPSR
        AND     a1, a1, #I32_bit
        MOV     pc, lr

splx
        TST     a1, #I32_bit
        MRSEQ   a2, CPSR
        BICEQ   a2, a2, #I32_bit
        MSREQ   CPSR_c, a2
        MOV     pc, lr

splbio
        MRS     a1, CPSR
        ORR     a2, a1, #I32_bit
        AND     a1, a1, #I32_bit
        MSR     CPSR_c, a2
        MOV     pc, lr

delay
        B       HAL_CounterDelay

logprintf
        B       printf

kthread_create1
config_deactivate
uiomove
kthread_create
ratecheck
        MOV     a1, #0
selrecord
selwakeup
psignal
kthread_exit
device_probe_and_attach
        MOV     pc, lr

min
        CMP     a1, a2
        MOVGT   a1, a2
        MOV     pc, lr

_snprintf
        B       snprintf

malloc
        ; Note that this is a vanilla implementation, i.e. no M_ZERO support
        ; (but the usbdriver sources already deal with that)
        MOV     r1, r0
        LDR     r2, =USBHAL_WorkspaceOffset+USBHAL_WS_Heap_Normal
        LDR     r0, [sb, r2]
        B       HALHeap_GetArea

free
        MOV     r1, r0
        LDR     r2, =USBHAL_WorkspaceOffset+USBHAL_WS_Heap_Normal
        LDR     r0, [sb, r2]
        B       HALHeap_FreeArea

malloc_contig
        ; R0 = length
        ; R1 = alignment
        ADD     r0, r0, #3 ; Make size multiple of 4 for easy memset
        BIC     r0, r0, #3
        Push    "r0,lr"
        LDR     r3, =USBHAL_WorkspaceOffset+USBHAL_WS_Heap_NCNB
        MOV     r2, r1
        MOV     r1, r0
        LDR     r0, [sb, r3]
        BL      HALHeap_GetAreaAligned
        Pull    "r1,lr"
        CMP     r0, #0
        MOVEQ   pc, lr
        ; Zero the memory
        MOV     ip, #0
10
        SUBS    r1, r1, #4
        STR     ip, [r0, r1]
        BGT     %BT10
        MOV     pc, lr

free_contig
        ; R0 = pointer to pointer
        LDR     r2, =USBHAL_WorkspaceOffset+USBHAL_WS_Heap_NCNB
        LDR     r1, [r0]
        LDR     r0, [sb, r2]
        B       HALHeap_FreeArea

        END
@


1.1
log
@Add the ability to build the USB drivers as HAL-compatible static libraries
Detail:
  build/Makefile, build/OBJEHCIDriver, build/OBJOHCIDriver, build/OBJUSBDriver - Modified makefiles to build the HAL libs during the export libs phase
  build/!MkHAL,fd7 - Handy script for building the HAL libs
  build/Hdr/usbhal - Header containing definitions for the assembler code. Also gets exported so that HALs know how much workspace to reserve.
  build/c/usbhal - HAL version of usbmodule.c & port.c. Also contains the keyboard scan code, adapted from the code in the Tungsten HAL.
  build/s/porthal - Assembler versions of some port.c routines that were easier to do in assembler than C
  build/s/halheap - OS_Heap code that's been adapted for use in the HAL. Could easily be changed into a standalone library instead of being part of the HAL USB libs. Supports memory-efficient allocation of aligned blocks.
  build/c/ehcihal - HAL version of ehcimodule.c. Currently only supports EHCI controllers exposed via HAL_USBControllerInfo (i.e. no PCI support)
  build/c/ehcimodule, build/c/ohcimodule, build/c/port - Moved riscos_irq_clear into port.c. Removed unused microtime() function.
  build/c/usbmouse - Strip out some debug-related code in non-debug builds
  build/Version - Updated version numbers
  dev/usb/c/ehci, dev/usb/h/ehcivar - Adapted to add support for the HAL build. Apart from the base changes, the code has also been tweaked to significantly reduce the amount of memory used at runtime by the HAL version of the driver.
  dev/usb/c/hid, dev/usb/c/uhub, dev/usb/c/usb, dev/usb/c/usb_quirks, dev/usb/c/usb_subr, dev/usb/c/usbdi, dev/usb/c/usbdi_util, dev/usb/c/usbroothub_subr - Changes to support HAL builds. Mainly disabling bits that won't work in the HAL or disabling bits for RISC OS in general if they weren't being used in the first place.
  dev/usb/c/ohci, dev/usb/h/ohcivar - Basic changes to support HAL builds. However HAL OHCI support is still incomplete.
  dev/usb/h/usb_port - Added support for the HAL build. Also tweaked logprintf definition to get rid of logprintf calls entirely in non-debug builds.
  dev/usb/h/usbdivar - Added support for the HAL build.
  dev/usb/h/usbhal - New header used by the HAL build. Gets included by every C file to ensure the compiler doesn't use sb, and contains structs/macros to allow access to the shared workspace.
Admin:
  HAL & non-HAL builds tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook.
  Non-HAL builds tested with Iyonix ROM softload.
  Needs latest Kernel source for OSEntries.h export.


Version 0.59. Tagged as 'NetBSD-0_59'
@
text
@a21 2
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
@

