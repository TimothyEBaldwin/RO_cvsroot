head	1.3;
access;
symbols
	NetBSD-0_84:1.2
	NetBSD-0_83:1.2
	NetBSD-0_82:1.2
	NetBSD-0_81:1.2
	NetBSD-0_80:1.2
	NetBSD-0_79:1.2
	NetBSD-0_78:1.2
	NetBSD-0_77:1.2
	NetBSD-0_76:1.2
	NetBSD-0_75:1.2
	NetBSD-0_74:1.2
	NetBSD-0_73:1.2
	NetBSD-0_72:1.2
	NetBSD-0_71:1.2
	NetBSD-0_70:1.2
	NetBSD-0_69:1.2
	NetBSD-0_68:1.2
	NetBSD-0_67:1.2
	NetBSD-0_66:1.2
	NetBSD-0_65:1.2
	NetBSD-0_64:1.2
	NetBSD-0_63:1.2
	NetBSD-0_62:1.2
	NetBSD-0_61:1.2
	NetBSD-0_60:1.2
	NetBSD-0_59:1.2
	NetBSD-0_58:1.2
	NetBSD-0_57:1.2
	NetBSD-0_56:1.2
	NetBSD-0_55:1.2
	NetBSD-0_54:1.2
	NetBSD-0_53:1.2
	NetBSD-0_52:1.2
	NetBSD-0_51:1.2
	NetBSD-0_50:1.2
	NetBSD-0_49:1.2
	NetBSD-0_48:1.2
	NetBSD-0_47:1.2
	NetBSD-0_46:1.2
	NetBSD-0_45:1.2
	NetBSD-0_44:1.2
	NetBSD-0_43:1.2
	NetBSD-0_42:1.2
	NetBSD-0_41:1.2
	NetBSD-0_40:1.2
	NetBSD-0_39:1.2
	NetBSD-0_38:1.2
	NetBSD-0_37:1.2
	NetBSD-0_36:1.2
	NetBSD-0_35:1.2
	NetBSD-0_34:1.2
	NetBSD-0_33:1.2
	NetBSD-0_32:1.2
	NetBSD-0_31:1.2
	NetBSD-0_30:1.2
	NetBSD-0_29:1.2
	RO_5_07:1.2
	NetBSD-0_28:1.2
	NetBSD-0_27:1.2
	NetBSD-0_26:1.2
	NetBSD-0_25:1.2
	NetBSD-0_24:1.2
	NetBSD-0_23:1.2
	NetBSD-0_21-1_22_2_1:1.2
	NetBSD-0_22:1.2
	USB1:1.2.0.2
	NetBSD-0_21:1.2
	NetBSD-0_20:1.2
	NetBSD-0_19:1.2
	NetBSD-0_18:1.2
	NetBSD-0_17:1.2
	NetBSD-0_16:1.2
	NetBSD-0_15:1.2
	NetBSD-0_14:1.2
	NetBSD-0_13:1.2
	NetBSD-0_12:1.2
	NetBSD-0_11:1.2
	NetBSD-0_10:1.2
	NetBSD-0_09:1.2
	NetBSD-0_08:1.2
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.3
date	2014.06.01.13.51.42;	author jlee;	state dead;
branches;
next	1.2;
commitid	Vazl1SQGmZpsaPCx;

1.2
date	2003.03.02.17.05.52;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.15;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Tidy up exported USBDevFS.h
Detail:
  build/h/USBDevFS - Added extra #ifdef guard to allow USBDevFS.h to be safely included by software that uses the BSD USB headers. Add the DeviceFS_CallDevice codes that USBDriver uses.
  build/h/service - Removed redundant secondary definition of the service call structures which the drivers were using internally
  build/c/ehcihal - Removed redundant #includes
  build/c/ehcidriver, build/c/ohcidriver - Use USBDevFS.h instead of service.h
  build/c/usbmodule - Use USBDevFS.h instead of service.h. Get rid of local DeviceCall definitions and use the ones which are now in USBDevFS.h. Also switched over to using Interface/DevicsFS.h for the main DevicsFS call reason codes, to match the naming convention used by USBDevFS.h (as opposed to the OSLib naming convention that was used previously). Stripped the unused OBSOLETE_SERVICE_CALLS code.
  build/Makefile - Add usbdi_util.h to the header exports
Admin:
  Tested with building OMAP3, Tungsten & BCM2835 ROMs
  Builds to binary-identical modules as previous version.


Version 0.85. Tagged as 'NetBSD-0_85'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef __usb_service_h
#define __usb_service_h

#include "dev/usb/usb.h"

#define Service_USBDriver                   0xD2
#define Service_USBDriver_Attach            0x00
#define Service_USBDriver_Connected         0x01
#define Service_USBDriver_Detach            0x02
#define Service_USBDriver_Starting          0x03
#define Service_USBDriver_Dying             0x04

/* Allow for the obsolete service call interface that Castle adapted from
   some vague thoughts I had a couple of years ago */
#define   OBSOLETE_SERVICE_CALLS 1
#undef    OBSOLETE_SERVICE_CALLS

#ifdef OBSOLETE_SERVICE_CALLS
/*
   The following definitions are a combination of some ideas I had a couple
   of years ago (which hadn't been fully thought through) with some extensions
   by Castle. Hopefully they won't still be around more than a couple of years!
   DRE Fri 29th November 2002
*/

typedef struct USBDevFSDevice USBDevFSDevice; // rest of definition below

typedef struct USBDevFSEndpoint{
 USBDevFSDevice*            dev;            // the device containing this
 uint8_t                   ifc;             // primary interface number
 uint8_t                   altifc;          // alternate interface number
 usb_endpoint_descriptor_t*     ep;         // endpoint
 int                        device_handle;  // device and stream handles
 int                        stream_handle;  // for this endpoint
 char                       device_name[20];// device name
} USBDevFSEndpoint;

struct USBDevFSDevice{                      // part defined above
 uint8_t                    address;        // USB address of device
 usb_port_status_t          port_status;    // status bits
 USBDevFSEndpoint           ep_default;     // structure for default endpoint
 usb_device_descriptor_t    dev;            // Device Descriptor from device
 usb_config_descriptor_t    *config;        // points to the Config recovered
 usb_interface_descriptor_t **ifcs;         // array if interface structures
 USBDevFSEndpoint         **eps;            // array of endpoint structures
 uint32_t                   str_default;    // default stream
 char                       name[20];       // device name
};

typedef struct USBServiceCall{
USBDevFSDevice          dev;         // root device
USBDevFSEndpoint      * ep;          // pointer to base of an array
usb_endpoint_descriptor_t * epd;     // pointer to base of an array
usb_interface_descriptor_t* ifc;     // pointer to base of an array
uint16_t                neps;        // number of endpoints in the array
uint16_t                nifs;        // number of interfaces in the array
uint8_t                 hostaddr;    // usb address of upstream (hub)device
uint8_t                 hostport;    // which port on the hub
uint8_t                 bus;         // to achieve word alignment again
uint8_t                 spare2;      // to achieve word alignment again
void                  * end;         // marker for end of this structure
}USBServiceCall;

#else

typedef struct USBServiceCall {
 uint16_t                sclen;       // length, incl length bytes
 uint16_t                descoff;     // offset to descriptors
 char                    devname[20]; // e.g.USBD37  NULL terminated
 uint8_t                 bus;         // bus num, 0-255
 uint8_t                 devaddr;     // usb addr,1-127
 uint8_t                 hostaddr;    // usb addr of upstream port 0-127
 uint8_t                 hostport;    // port on host addr
 uint8_t                 speed;       // 0:full speed, 1:low speed, 2:hi speed
 uint8_t                 spare1;      // spare, set NULL
 uint8_t                 spare2;      // spare, set NULL
 uint8_t                 spare3;      // spare, set NULL
 usb_device_descriptor_t ddesc;       // std device descriptor
                                      // followed immediately by the entire
                                      // config string from the device
                                      // (with no word alignment gaps)
                                      // 1 or more NULLs to achieve word alignment
} USBServiceCall;

#endif

// and a linked list element for use when a client inquires what devices
// are enumerated so far
typedef struct  USBServiceAnswer USBServiceAnswer;
struct  USBServiceAnswer{
USBServiceAnswer     * link;         // pointer to next chunk
USBServiceCall         svc;          // a copy of the information
};

#endif
@


1.2
log
@Found a "busses" lingering in the messages file,also removed a \n which
must have been copied from a printf somewhere.
Old service call detail removed from c.port as it's defined in another
file differently!
USBDiscover is now only available for debugging purposes.
Internationalised the mouse name (default is still "USB mouse").

Version 0.08. Tagged as 'NetBSD-0_08'
@
text
@@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d27 1
a27 1
/* allow for the obsolete service call interface that Castle adapted from
d29 2
a30 1
//#define OBSOLETE_SERVICE_CALLS 1
d33 1
a33 1
/*
d43 6
a48 6
 USBDevFSDevice*            dev;           // the device containing this
 uint8_t                   ifc;           // primary interface number
 uint8_t                   altifc;        // alternate interface number
 usb_endpoint_descriptor_t*     ep;            // endpoint
 int                        device_handle; // device and stream handles
 int                        stream_handle; // for this endpoint
d57 2
a58 2
 usb_config_descriptor_t    *config;         // points to the Config recovered
 usb_interface_descriptor_t **ifcs;           // array if interface structures
d96 1
a96 1
                            // 1 or more NULLs to achieve word alignment
@

