head	1.4;
access;
symbols
	NetBSD-1_19:1.4
	NetBSD-1_18:1.4
	NetBSD-1_17:1.4
	NetBSD-1_16:1.4
	NetBSD-1_15:1.4
	NetBSD-1_14:1.4
	NetBSD-1_13:1.4
	NetBSD-1_12:1.4
	NetBSD-1_09-1:1.4
	NetBSD-1_11:1.4
	NetBSD-1_10:1.4
	NetBSD-1_09:1.4
	NetBSD-1_08:1.4
	NetBSD-1_07:1.4
	NetBSD-1_06:1.4
	NetBSD-1_05:1.4
	NetBSD-1_04:1.4
	NetBSD-1_03:1.4
	NetBSD-1_02:1.4
	NetBSD-1_01:1.4
	NetBSD-1_00:1.4
	NetBSD-0_99:1.4
	NetBSD-0_98:1.4
	NetBSD-0_97:1.4
	NetBSD-0_96:1.4
	NetBSD-0_95:1.4
	NetBSD-0_94:1.4
	NetBSD-0_93:1.4
	NetBSD-0_92:1.4
	NetBSD-0_91:1.4
	NetBSD-0_90:1.4
	NetBSD-0_89:1.4
	NetBSD-0_88:1.4
	NetBSD-0_87:1.4
	NetBSD-0_86:1.3
	NetBSD-0_85:1.3
	NetBSD-0_84:1.2
	NetBSD-0_83:1.2
	NetBSD-0_82:1.2
	NetBSD-0_81:1.2
	NetBSD-0_80:1.2
	NetBSD-0_79:1.2
	NetBSD-0_78:1.2
	NetBSD-0_77:1.2
	NetBSD-0_76:1.2
	NetBSD-0_75:1.2
	NetBSD-0_74:1.2
	NetBSD-0_73:1.2
	NetBSD-0_72:1.2
	NetBSD-0_71:1.2
	NetBSD-0_70:1.2
	NetBSD-0_69:1.1
	NetBSD-0_68:1.1
	NetBSD-0_67:1.1
	NetBSD-0_66:1.1
	NetBSD-0_65:1.1
	NetBSD-0_64:1.1
	NetBSD-0_63:1.1
	NetBSD-0_62:1.1
	NetBSD-0_61:1.1
	NetBSD-0_60:1.1
	NetBSD-0_59:1.1
	NetBSD-0_58:1.1
	NetBSD-0_57:1.1
	NetBSD-0_56:1.1
	NetBSD-0_55:1.1
	NetBSD-0_54:1.1
	NetBSD-0_53:1.1
	NetBSD-0_52:1.1
	NetBSD-0_51:1.1
	NetBSD-0_50:1.1
	NetBSD-0_49:1.1
	NetBSD-0_48:1.1
	NetBSD-0_47:1.1
	NetBSD-0_46:1.1
	NetBSD-0_45:1.1
	NetBSD-0_44:1.1
	NetBSD-0_43:1.1
	NetBSD-0_42:1.1
	NetBSD-0_41:1.1
	NetBSD-0_40:1.1
	NetBSD-0_39:1.1
	NetBSD-0_38:1.1
	NetBSD-0_37:1.1
	NetBSD-0_36:1.1
	NetBSD-0_35:1.1
	NetBSD-0_34:1.1
	NetBSD-0_33:1.1
	NetBSD-0_32:1.1
	NetBSD-0_31:1.1
	NetBSD-0_30:1.1
	NetBSD-0_29:1.1
	RO_5_07:1.1
	NetBSD-0_28:1.1
	NetBSD-0_27:1.1
	NetBSD-0_26:1.1
	NetBSD-0_25:1.1
	NetBSD-0_24:1.1
	NetBSD-0_23:1.1
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.1
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1;
locks; strict;
comment	@# @;


1.4
date	2014.08.12.19.02.14;	author jlee;	state Exp;
branches;
next	1.3;
commitid	FNxPAvpghRgvz6Mx;

1.3
date	2014.06.01.13.51.42;	author jlee;	state Exp;
branches;
next	1.2;
commitid	Vazl1SQGmZpsaPCx;

1.2
date	2012.05.14.22.13.29;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	JbOfrksR4zMjZJ4w;

1.1
date	2003.05.14.16.43.49;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Include device speed in *USBDevInfo output. Corrections to header export.
Detail:
  build/c/usbmodule - Improve *USBDevInfo to display the devices connection speed
  build/h/USBDevFS - Correct device speed listing to match reality
  build/Version - Bump USBDriver version number
Admin:
  Tested on Raspberry Pi


Version 0.87. Tagged as 'NetBSD-0_87'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*****************************************************************************
* Purpose:  Data structures pertinent to the DeviceFS USB interface for
*           RISC OS. Authors should consult the other documentation for a
*           full explanation of the terms used, as this header file is
*           not primarly intended to document the API.
*
*           Note that these data structures are ARM architecture dependant,
*           ie. 32-bit little endian
* ----------------------------------------------------------------------------
* Revision: 0.75 (08 Mar 2003)
* History:  See source control system log
*
*****************************************************************************/

#ifndef __USBDevFS
#define __USBDevFS

/*****************************************************************************
* Macros defining types for the compiler
*****************************************************************************/

#ifndef __stdint_h
#ifndef uint8_t
 #define uint8_t unsigned char
#endif
#ifndef int8_t
 #define int8_t  signed char
#endif
#ifndef uint16_t
 #define uint16_t unsigned short
#endif
#ifndef int16_t
 #define int16_t signed short
#endif
#ifndef uint32_t
 #define uint32_t unsigned int
#endif
#ifndef int32_t
 #define int32_t signed int
#endif
#endif

/*****************************************************************************
* Service call definitions issued when USB system events occur
*****************************************************************************/

#ifndef Service_USB
#define Service_USB                         0xD2
#endif
#define Service_USB_Attach                  0x00
        /* Used to report the addition of a new USB device to the system
           On entry: R0 =  0x00
                     R1 =  0xD2
                     R2 -> USBServiceCall block as defined below
           On exit:  Do not claim this call, it is for information only */
#define Service_USB_Connected               0x01
        /* Issued with OS_ServiceCall by any application or module which
           wishes to get information on all of the currently connected
           devices without needing to keep track of Attach and Detach
           On entry: R0 =  0x01
                     R1 =  0xD2
           On exit:  R2 -> Linked list of USBServiceCall blocks as defined below
                     Do not claim this call, other USB drivers in the module chain
                     may wish to add further blocks to the list */
#define Service_USB_Detach                  0x02
        /* Unused
           When a device detaches, DeviceFS will report it with a
           Service_DeviceDead message */
#define Service_USB_USBDriverStarting       0x03
        /* Used to notify the (re)starting of the USB system and for any
           clients of USBDriver to (re)register themselves
           On entry: R0 =  0x03
                     R1 =  0xD2
           On exit:  Do not claim this call, it is for information only */
#define Service_USB_USBDriverDying          0x04
        /* Used to notify that the USB system is shutting down
           On entry: R0 =  0x04
                     R1 =  0xD2
           On exit:  Do not claim this call, it is for information only */

#ifndef _USB_H_ /* Avoid conflicts if NetBSD USB headers included */
/*****************************************************************************
* USB descriptor types as C structures
*****************************************************************************/

#define  UDESC_DEVICE           0x01
#define  UDESC_CONFIG           0x02
#define  UDESC_STRING           0x03
#define  UDESC_INTERFACE        0x04
#define  UDESC_ENDPOINT         0x05
/* 0x06  Reserved for high speed device qualifers
   0x07  Reserved for 'other' speed configuration info, layout per UDESC_CONFIG
   0x08  Reserved for interface power info
   Other Reserved */
#define  UDESC_OTG              0x09
#define  UDESC_CS_DEVICE        0x21 /* class specific */
#define  UDESC_CS_CONFIG        0x22
#define  UDESC_CS_STRING        0x23
#define  UDESC_CS_INTERFACE     0x24
#define  UDESC_CS_ENDPOINT      0x25
#define  UDESC_HUB              0x29

/* Device (descriptor type 0x01) */
typedef __packed struct {
        uint8_t         bLength;
        uint8_t         bDescriptorType;
        uint16_t        bcdUSB;
        uint8_t         bDeviceClass;
        uint8_t         bDeviceSubClass;
        uint8_t         bDeviceProtocol;
        uint8_t         bMaxPacketSize;
        uint16_t        idVendor;
        uint16_t        idProduct;
        uint16_t        bcdDevice;
        uint8_t         iManufacturer;
        uint8_t         iProduct;
        uint8_t         iSerialNumber;
        uint8_t         bNumConfigurations;
} usb_device_descriptor_t;
#define USB_DEVICE_DESCRIPTOR_SIZE 18

/* Configuration (descriptor type 0x02) */
typedef __packed struct {
        uint8_t         bLength;
        uint8_t         bDescriptorType;
        uint16_t        wTotalLength;
        uint8_t         bNumInterface;
        uint8_t         bConfigurationValue;
        uint8_t         iConfiguration;
        uint8_t         bmAttributes;
        uint8_t         bMaxPower; /* max current in 2 mA units */
} usb_config_descriptor_t;
#define USB_CONFIG_DESCRIPTOR_SIZE 9

/* String (descriptor type 0x03) */
typedef __packed struct {
        uint8_t         bLength;
        uint8_t         bDescriptorType;
        uint16_t        bString[127];
} usb_string_descriptor_t;
#define USB_MAX_STRING_LEN 128

/* Interface (descriptor type 0x04) */
typedef __packed struct {
        uint8_t         bLength;
        uint8_t         bDescriptorType;
        uint8_t         bInterfaceNumber;
        uint8_t         bAlternateSetting;
        uint8_t         bNumEndpoints;
        uint8_t         bInterfaceClass;
        uint8_t         bInterfaceSubClass;
        uint8_t         bInterfaceProtocol;
        uint8_t         iInterface;
} usb_interface_descriptor_t;
#define USB_INTERFACE_DESCRIPTOR_SIZE 9

/* Endpoint (descriptor type 0x05) */
typedef __packed struct {
        uint8_t         bLength;
        uint8_t         bDescriptorType;
        uint8_t         bEndpointAddress;
        uint8_t         bmAttributes;
        uint16_t        wMaxPacketSize;
        uint8_t         bInterval;
} usb_endpoint_descriptor_t;
#define USB_ENDPOINT_DESCRIPTOR_SIZE 7

/* Hub (descriptor type 0x29) */
typedef __packed struct {
        uint8_t         bDescLength;
        uint8_t         bDescriptorType;
        uint8_t         bNbrPorts;
        uint16_t        wHubCharacteristics;
        uint8_t         bPwrOn2PwrGood; /* delay in 2 ms units */
        uint8_t         bHubContrCurrent;
        uint8_t         DeviceRemovable[32]; /* max 255 ports */
        uint8_t         PortPowerCtrlMask[1]; /* deprecated */
} usb_hub_descriptor_t;
#define USB_HUB_DESCRIPTOR_SIZE 9

/* The following struct allows you to cast then extract the length and type */
typedef __packed struct {
        uint8_t         bLength;
        uint8_t         bDescriptorType;
        uint8_t         bDescriptorSubtype; /* optional */
} usb_descriptor_t;
#endif /* _USB_H_ */

/*****************************************************************************
* Service call format as a C structure
*****************************************************************************/

/* A USB device is completely described by the block (or list of blocks)
   pointed to by R2 in the USB service calls defined above
   The USBServiceCall includes a copy of the device descriptor, followed
   immediately by zero or more descriptors. A length byte of zero marks the
   end of the block, which is then padded with zeros to achieve word
   alignment */

typedef struct USBServiceCall {
uint16_t                sclen;       // sum length of the block including
                                     // the appended descriptors
uint16_t                descoff;     // offset to the descriptors
char                    devname[20]; // device name as appears in DeviceFS
                                     // e.g.USB37  NULL terminated
uint8_t                 bus;         // bus number, 0-255
uint8_t                 devaddr;     // usb address,1-127
uint8_t                 hostaddr;    // usb address of upstream port 0-127
uint8_t                 hostport;    // port on host address
uint8_t                 speed;       // device speed
                                     // 1:     low speed (1.5Mbps)
                                     // 2:     full speed (12Mbps)
                                     // 3:     hi speed (480Mbps)
                                     // others:reserved
                                     // Note: Old versions of USBDriver
                                     // (version < 0.27 with date <= 07 Jan
                                     // 2004) used a different scheme:
                                     // 0:     low speed (1.5Mbps)
                                     // 1:     full speed (12Mbps)
uint8_t                 spare1;      // spare, set NULL
uint8_t                 spare2;      // spare, set NULL
uint8_t                 spare3;      // spare, set NULL
usb_device_descriptor_t ddesc;       // device descriptor
                                     // followed immediately by zero or more
                                     // descriptors (with no word alignment
                                     // gaps)
} USBServiceCall;

typedef struct USBServiceAnswer USBServiceAnswer;
struct USBServiceAnswer {
USBServiceAnswer     * link;         // pointer to next, or NULL for no more
USBServiceCall         svc;          // data as per 'Attach' service call
};

/*****************************************************************************
* DeviceFS_CallDevice codes
*****************************************************************************/

#define DeviceCall_USB_USBRequest       0x80000000
#define DeviceCall_USB_BufferSpace      0x80000002
#define DeviceCall_USB_GetHandles       0x80000003
#define DeviceCall_USB_GetLocation      0x80000004
#define DeviceCall_USB_ClearStall       0x80000005
#define DeviceCall_USB_TransferInfo     0x80000006
#define DeviceCall_USB_GetHandles2      0x80000007
#define DeviceCall_USB_GetSetOptions    0x80000008

#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
@


1.3
log
@Tidy up exported USBDevFS.h
Detail:
  build/h/USBDevFS - Added extra #ifdef guard to allow USBDevFS.h to be safely included by software that uses the BSD USB headers. Add the DeviceFS_CallDevice codes that USBDriver uses.
  build/h/service - Removed redundant secondary definition of the service call structures which the drivers were using internally
  build/c/ehcihal - Removed redundant #includes
  build/c/ehcidriver, build/c/ohcidriver - Use USBDevFS.h instead of service.h
  build/c/usbmodule - Use USBDevFS.h instead of service.h. Get rid of local DeviceCall definitions and use the ones which are now in USBDevFS.h. Also switched over to using Interface/DevicsFS.h for the main DevicsFS call reason codes, to match the naming convention used by USBDevFS.h (as opposed to the OSLib naming convention that was used previously). Stripped the unused OBSOLETE_SERVICE_CALLS code.
  build/Makefile - Add usbdi_util.h to the header exports
Admin:
  Tested with building OMAP3, Tungsten & BCM2835 ROMs
  Builds to binary-identical modules as previous version.


Version 0.85. Tagged as 'NetBSD-0_85'
@
text
@d219 1
a219 1
                                     // e.g.USBD37  NULL terminated
a224 1
                                     // 0:     full speed (12Mbps)
d226 2
a227 1
                                     // 2:     hi speed (480bps)
d229 5
@


1.2
log
@Added the class specific device descriptors to the exported header file.
Internally they're already in "usb.h" but possibly useful elsewhere.

Version 0.70. Tagged as 'NetBSD-0_70'
@
text
@d95 1
d201 1
d244 13
@


1.1
log
@  Support for SCSISoftUSB, and some tidying up.
Detail:
  * Errors now use the allocated error number base, &819000, instead of a
    base in the private range, &50000000. "USB transfer failed" errors now
    have use a sub-range of error numbers from &819020; the original BSD
    error number can be retrieved from the bottom 5 bits of the RISC OS
    error number.
  * Service_USB 1 now returns the list in the order in which the devices,
    rather than in the reverse order as previous versions of the module did.
  * A little tweaking of h/usb_port to reduce compiler warnings.
  * Some compiler-satisfying changes to allow use of packed structures.
    (However, the compiler doesn't seem to work correctly yet, so this is
    currently switched out using -DDISABLE_PACKED on the command line.)
  * Added full stops to end of star command help strings for consistency
    with rest of OS.
  * New exports: USBDevFS (moved here from ^.h) and a few files in dev/usb/h
    and sys/h.
Admin:
  Error number overhaul and new exports are both required by SCSISoftUSB.

Version 0.16. Tagged as 'NetBSD-0_16'
@
text
@d108 6
@

