head	1.8;
access;
symbols
	NetBSD-1_19:1.8
	NetBSD-1_18:1.8
	NetBSD-1_17:1.8
	NetBSD-1_16:1.8
	NetBSD-1_15:1.8
	NetBSD-1_14:1.8
	NetBSD-1_13:1.7
	NetBSD-1_12:1.7
	NetBSD-1_09-1:1.7
	NetBSD-1_11:1.7
	NetBSD-1_10:1.7
	NetBSD-1_09:1.7
	NetBSD-1_08:1.7
	NetBSD-1_07:1.7
	NetBSD-1_06:1.7
	NetBSD-1_05:1.7
	NetBSD-1_04:1.7
	NetBSD-1_03:1.7
	NetBSD-1_02:1.7
	NetBSD-1_01:1.7
	NetBSD-1_00:1.7
	NetBSD-0_99:1.7
	NetBSD-0_98:1.7
	NetBSD-0_97:1.7
	NetBSD-0_96:1.7
	NetBSD-0_95:1.7
	NetBSD-0_94:1.7
	NetBSD-0_93:1.7
	NetBSD-0_92:1.7
	NetBSD-0_91:1.7
	NetBSD-0_90:1.6
	NetBSD-0_89:1.6
	NetBSD-0_88:1.6
	NetBSD-0_87:1.6
	NetBSD-0_86:1.6
	NetBSD-0_85:1.6
	NetBSD-0_84:1.6
	NetBSD-0_83:1.5
	NetBSD-0_82:1.5
	NetBSD-0_81:1.5
	NetBSD-0_80:1.5
	NetBSD-0_79:1.5
	NetBSD-0_78:1.5
	NetBSD-0_77:1.5
	NetBSD-0_76:1.5
	NetBSD-0_75:1.5
	NetBSD-0_74:1.5
	NetBSD-0_73:1.5
	NetBSD-0_72:1.5
	NetBSD-0_71:1.5
	NetBSD-0_70:1.4
	NetBSD-0_69:1.4
	NetBSD-0_68:1.3
	NetBSD-0_67:1.2
	NetBSD-0_66:1.2
	NetBSD-0_65:1.2
	NetBSD-0_64:1.2
	NetBSD-0_63:1.2
	NetBSD-0_62:1.2
	NetBSD-0_61:1.1
	NetBSD-0_60:1.1
	NetBSD-0_59:1.1;
locks; strict;
comment	@# @;


1.8
date	2016.05.06.21.39.17;	author jlee;	state Exp;
branches;
next	1.7;
commitid	AKEXdAKJY2tU5t5z;

1.7
date	2015.01.01.14.58.58;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	1ZqmNuZnVfz5Fk4y;

1.6
date	2014.05.27.19.31.37;	author jlee;	state Exp;
branches;
next	1.5;
commitid	wb2RWYxDipk3ddCx;

1.5
date	2012.06.07.00.11.05;	author jlee;	state Exp;
branches;
next	1.4;
commitid	LkYeKFZjKWlNTH7w;

1.4
date	2012.02.20.20.57.07;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	SAJJ0xbfbjtvgWTv;

1.3
date	2012.02.18.15.36.17;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	tTFWWR62eUupyETv;

1.2
date	2011.08.22.22.38.16;	author jlee;	state Exp;
branches;
next	1.1;
commitid	DX6w1a2oIxQTFywv;

1.1
date	2011.05.22.20.22.34;	author jlee;	state Exp;
branches;
next	;
commitid	Ye1jVWDlKivFSIkv;


desc
@@


1.8
log
@Use HAL_TimerIRQClear in HAL library
Detail:
  build/c/usbhal - Don't assume HAL_IRQClear will clear the timer interrupt, use HAL_TimerIRQClear as well.
Admin:
  Tested on BB-xM


Version 1.14. Tagged as 'NetBSD-1_14'
@
text
@/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This file is the HAL equivalent of usbmodule.c, with a few routines from
   port.c thrown in for good measure.
*/

#include <dev/usb/usbhal.h>

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "DebugLib/DebugLib.h"
#include "swis.h"
#include <sys/callout.h>
#include "sys/time.h"
#include "Global/HALEntries.h"

#include "dev/usb/usb.h"
#include "dev/usb/usbdi.h"
#include "dev/usb/usbdi_util.h"
#include "dev/usb/usbdivar.h"

#define MAX_TSLEEP_HANDLES 32 /* Should be plenty? */
#define MAX_CALLBACKS 16

//#define DEBUG_HAL

#ifdef DEBUG_HAL
#define hdprintf printf
#else
#define hdprintf(...) 0
#endif

extern void HALHeap_InitHeap(void *heap,uint32_t size);
extern uint32_t HAL_CounterRead(void);
extern uint32_t HAL_CounterPeriod(void);
extern int HAL_TimerDevice(int timer);
extern void HAL_TimerIRQClear(int timer);
extern int HAL_IRQEnable(int device);
extern int HAL_IRQDisable(int device);
extern int HAL_IRQSource(void);
extern void HAL_IRQClear(int device);
extern void HAL_DebugTX(int c);

extern void panic (const char* str, ...);

/* this is defined in usb.c by the macro USB_DECLARE_DRIVER */
extern const struct cfattach usb_ca;
extern const struct cfattach uhub_uhub_ca;
extern struct usbd_bus *usb_getbus(device_ptr_t self);
extern int usbioctl(int devt, u_long cmd, void* data, int flag, void *p);

static void re_discover(void *param);

#if 0
/* Some heap validation code, since I got rid of the code in halheap.s */
void dumpheap(uint32_t *heap)
{
    int s = splbio();
    printf("heap @@ %p:\nmag %x\nfree %x\nbase %x\nend %x\n",heap,heap[0],heap[1],heap[2],heap[3]);
    uint32_t free = heap[1];
    uint32_t next = 16;
    if(free)
        free += 4;
    while(free)
    {
        if(free > next)
        {
            printf("allocs between %x and %x:\n",next,free);
            do {
                printf("%x: alloc size %x\n",next,heap[next>>2]);
                if((heap[next>>2] > heap[2]) || (heap[next>>2]+next > heap[2]) || (heap[next>>2]&3) || !heap[next>>2])
                {
                    printf("bad block, skipping rest\n");
                    break;
                }
                next += heap[next>>2];
            } while(free>next);
            if(free!=next)
                printf("alloc mismatch! next=%x\n",next);
        }
        printf("%x: free size %x next %x\n",free,heap[(free+4)>>2],heap[free>>2]);
        if(heap[(free+4)>>2] == heap[free>>2])
            printf("consecutive free blocks!\n");
        next = free+heap[(free+4)>>2];
        if((heap[free>>2] & 3) || (heap[free>>2] >= heap[2]) || (heap[free>>2]+free >= heap[2]))
        {
            printf("bad next ptr\n");
            do {} while(1);
        }
        if((heap[(free+4)>>2] & 3) || (heap[(free+4)>>2] >= heap[2]) || (heap[(free+4)>>2]+free >= heap[2]))
        {
            printf("bad size\n");
            do {} while(1);
        }
        if(!heap[free>>2])
        {
            printf("end of free list\n");
            break;
        }
        free = free+heap[free>>2];
        if(free<next)
        {
            printf("next free is inside current?\n");
            do {} while(1);
        }
    }
    if(free > heap[2])
    {
        printf("free list extends beyond heap end\n");
    }
    if(next > heap[2])
    {
        printf("next ptr beyond heap end\n");
    }
    printf("end allocs:\n");
    while(next < heap[2])
    {
        printf("%x: alloc size %x\n",next,heap[next>>2]);
        if((heap[next>>2] > heap[2]) || (heap[next>>2]+next > heap[2]) || (heap[next>>2]&3) || !heap[next>>2])
        {
            printf("bad block, skipping rest\n");
            break;
        }
        next += heap[next>>2];
    }
    printf("end\n");
    splx(s);
}
#endif

/*
 * Keyboard code
 */

#define NKEYCODE 6

struct ukbd_data {
    uint8_t modifiers;
    uint8_t reserved;
    uint8_t keycode[NKEYCODE];
};

struct ukbd_softc {
    USBBASEDEVICE           sc_dev;
    usbd_device_handle      sc_udev;
    usbd_interface_handle   sc_iface;       /* interface */
    usbd_pipe_handle        sc_intrpipe;    /* interrupt pipe */
    int                     sc_ep_addr;

    struct ukbd_data        data;
};

void ukbd_intr(usbd_xfer_handle xfer, usbd_private_handle addr, usbd_status ustatus)
{
    struct ukbd_softc *sc = addr;
    struct ukbd_data * data = &sc->data;

    if (ustatus) {
        hdprintf("ukbd_intr: status=%d\n", ustatus);
        if (ustatus != USBD_CANCELLED)
        {
            usbd_clear_endpoint_stall_async(sc->sc_intrpipe);
        }
        return;
    }

    /* Minimal decoding, as per Tungsten HAL */
    uint32_t result = KbdFlag_Present;
    if (data->modifiers & ((1<<0) | (1<<4)))
        result |= KbdFlag_Ctrl;
    if (data->modifiers & ((1<<1) | (1<<5)))
        result |= KbdFlag_Shift;

    for (int i = 0; i < NKEYCODE; ++i)
    {
        switch (data->keycode[i])
        {
        case 0x15: result |= KbdFlag_R; break;
        case 0x17: result |= KbdFlag_T; break;
        case 0x4c: result |= KbdFlag_Delete; break;
        case 0x4d: result |= KbdFlag_Copy; break;
        }
    }
    result |= KbdFlag_Done;
    int s = splbio();
    USBHALWS->kbdflags |= result;
    splx(s);
}

struct device* attach_keyboard (struct device* parent, void* aux)
{
    struct ukbd_softc* softc;
    struct usb_attach_arg *uaa = aux;
    usb_interface_descriptor_t *id;
    usb_endpoint_descriptor_t *ed;

    /* First see if we match */
    /* Check that this is a keyboard that speaks the boot protocol. */
    if (uaa->iface == NULL)
    {
       return (UMATCH_NONE);
    }
    id = usbd_get_interface_descriptor(uaa->iface);
    if (id == NULL ||
        id->bInterfaceClass != UICLASS_HID ||
        id->bInterfaceSubClass != UISUBCLASS_BOOT ||
        id->bInterfaceProtocol != UIPROTO_BOOT_KEYBOARD)
    {
       return (UMATCH_NONE);
    }

    /* If so, allocate memory for the device and attach ourselves. */
    softc = malloc (sizeof *softc);
    if (softc == NULL) {
        return NULL;
    }
    memset(softc,0,sizeof(*softc));
    strcpy (softc->sc_dev.dv_xname, "USBK");
    softc->sc_dev.dv_cfdata = (void*) 4; // keyboard

    softc->sc_udev = uaa->device;
    softc->sc_iface = uaa->iface;

    ed = usbd_interface2endpoint_descriptor(uaa->iface, 0);
    if (ed == NULL) {
        hdprintf("kbd: Could not read endpoint descriptor\n");
        return NULL;
    }

    if (usbd_set_protocol(uaa->iface, 0)) {
        hdprintf("kbd: Set protocol failed\n");
        return NULL;
    }

    softc->sc_ep_addr = ed->bEndpointAddress;


    hdprintf("USB keyboard enabled\n");
    int s = splbio();
    USBHALWS->kbdflags |= KbdFlag_Present;
    splx(s);

    /* set idle rate to 0 */
    usbd_set_idle (softc->sc_iface, 0, 0);

    /* Set up interrupt pipe. */
    usbd_open_pipe_intr(softc->sc_iface, softc->sc_ep_addr,
        USBD_SHORT_XFER_OK, &softc->sc_intrpipe, softc,
        &softc->data, sizeof(softc->data), ukbd_intr,
        USBD_DEFAULT_INTERVAL);

    return (struct device*) softc;
}

int detach_keyboard (struct device* kb)
{
    struct ukbd_softc* sc = (struct ukbd_softc*) kb;
    usbd_abort_pipe(sc->sc_intrpipe);
    usbd_close_pipe(sc->sc_intrpipe);
    free (kb);
    return 0;
}

/*
 * HAL interface bits
 */

void triggercbs (void)
{
    if(!USBHALWS->irqsema)
    {
        if(!USBHALWS->cbs_needed)
            return;

        int s = splbio();
        /* Prevent nested calls to triggercbs() needlessly processing the callback chain when we're already in the middle of it. Effectively matches behaviour of CBack_VectorReq flag in kernel. */
        USBHALWS->cbs_needed = false;
        /* Trigger all pending callbacks */
        while(USBHALWS->numcb)
        {
            int idx = USBHALWS->nextcb & (MAX_CALLBACKS-1);
            void (*cbfunc)(void *) = USBHALWS->callbacks[idx].cbfunc;
            void *param = USBHALWS->callbacks[idx].param;
            USBHALWS->numcb--;
            USBHALWS->nextcb++;
            hdprintf("cb %p %p\n",cbfunc,param);
            if(cbfunc)
            {
                cbfunc(param);
                splbio(); /* Make sure IRQs remain off */
            }
        }
        splx(s);
    }
}

void USBHAL_Init(void *heapbase,uint32_t heapsize,void *ncnbbase,uint32_t ncnbsize)
{
    /* Init heaps so malloc/free will work */
    USBHALWS->heap_normal = heapbase;
    USBHALWS->heap_ncnb = ncnbbase;
    HALHeap_InitHeap(USBHALWS->heap_normal,heapsize);
    HALHeap_InitHeap(USBHALWS->heap_ncnb,ncnbsize);
    /* Init rest of workspace */
    TAILQ_INIT(&(USBHALWS->allbuses));
    USBHALWS->usbbus_no = 1;
    USBHALWS->monotonictime = 0;
    USBHALWS->callouts = NULL;
    USBHALWS->irqsema = 0;
    USBHALWS->t_handles = malloc(MAX_TSLEEP_HANDLES*4);
    USBHALWS->t_locks = malloc(MAX_TSLEEP_HANDLES*4);
    USBHALWS->nhandles = 0;
    USBHALWS->kbdflags = 0;
    USBHALWS->callbacks = malloc(sizeof(usbhal_callback)*MAX_CALLBACKS);
    USBHALWS->nextcb = 0;
    USBHALWS->numcb = 0;
    USBHALWS->cbs_needed = false;
    /* The centisecond timer will be running, but the interrupt won't. Enable it. */
    HAL_IRQEnable(HAL_TimerDevice(0));
    /* Start rediscover callout. Half second interval should do it. */
    USBHALWS->rediscover = malloc(sizeof(struct callout));
    callout_init(USBHALWS->rediscover,0);
    callout_reset(USBHALWS->rediscover,500,re_discover,NULL);
}

uint32_t USBHAL_KbdScan(void)
{
    /* Return sticky flags */
    return USBHALWS->kbdflags;
}

int USBHAL_KbdScanInterrupt(int irq)
{
    USBHALWS->irqsema++;
    hdprintf("i%d\n",irq);
    if(irq == HAL_TimerDevice(0))
    {
        /* Timer interrupt */
        HAL_TimerIRQClear(0);
        HAL_IRQClear(irq);
        USBHALWS->monotonictime++;
        while(USBHALWS->callouts && (USBHALWS->monotonictime >= USBHALWS->callouts->c_time))
        {
            /* Trigger callout */
            void (*f)(void *) = USBHALWS->callouts->c_func;
            void *v = USBHALWS->callouts->c_arg;
            USBHALWS->callouts = USBHALWS->callouts->c_next;
            hdprintf("co %p %p\n",f,v);
            if(f)
            {
                f(v);
            }
            /* Make sure IRQs are still off */
            splbio();
        }
        irq = -1;
    }
    else if(irq != -1)
    {
        /* Process controller IRQs */
        struct device* dev;
        TAILQ_FOREACH(dev, &USBHALWS->allbuses, dv_list)
        {
            struct usbd_bus *bus = usb_getbus(dev);
            if(bus->methods->do_intr(bus,irq))
            {
                irq = -1;
                goto done;
            }
        }
        hdprintf("?\n");
    }
done:
    USBHALWS->irqsema--;
    /* Trigger any pending callbacks */
    triggercbs();
    hdprintf("I\n");
    return irq;
}

void USBHAL_Shutdown(void)
{
#if 0
    dumpheap(USBHALWS->heap_normal);
    dumpheap(USBHALWS->heap_ncnb);
#endif
    callout_stop(USBHALWS->rediscover);
    /* RISC OS calls this with interrupts off, but we probably want them on */
    splx(0);
    /* Shut down all host controllers */
    struct device* dev;
    TAILQ_FOREACH(dev, &USBHALWS->allbuses, dv_list)
    {
        /* Trigger any pending callbacks */
        triggercbs();
        
        (*usb_ca.ca_detach)(dev, 0);

        /* Should we be doing this before or after? */
        struct usbd_bus *bus = usb_getbus(dev);
        bus->methods->shutdown(bus);
        
        free (dev);
    }
    /* Trigger any pending callbacks */
    triggercbs();
    /* Now stop the timer IRQ */
    HAL_IRQDisable(HAL_TimerDevice(0));
    /* Done! */
    /* TODO - Clear up memory allocations? */
    splbio();
}

void USBHAL_AddCallback(void (*cbfunc)(void *),void *param)
{
    int s = splbio();
    if(USBHALWS->numcb == MAX_CALLBACKS)
        panic("Ran out of callbacks!");
    int idx = (USBHALWS->numcb+USBHALWS->nextcb) & (MAX_CALLBACKS-1);
    USBHALWS->callbacks[idx].cbfunc = cbfunc;
    USBHALWS->callbacks[idx].param = param;
    USBHALWS->numcb++;
    USBHALWS->cbs_needed = true;
    splx(s);
}

void USBHAL_RemoveCallback(void (*cbfunc)(void *),void *param)
{
    int s = splbio();
    for(int i=0;i<USBHALWS->numcb;i++)
    {
        int idx = (i+USBHALWS->nextcb) & (MAX_CALLBACKS-1);
        if((USBHALWS->callbacks[idx].cbfunc == cbfunc) && (USBHALWS->callbacks[idx].param == param))
        {
            /* Do it the easy way */
            USBHALWS->callbacks[idx].cbfunc = NULL;
            splx(s);
            return;
        }
    }
    splx(s);
}

/*
 * usbmodule.c routines:
 */

device_ptr_t register_bus(device_ptr_t bus)
{
    device_ptr_t softc;
    /* initialise device structure */
    softc = malloc (usb_ca.ca_devsize);
    if (softc == NULL) return NULL;
    memset(softc,0,usb_ca.ca_devsize);
    TAILQ_INSERT_TAIL (&(USBHALWS->allbuses), softc, dv_list);
    hdprintf("adding bus %p using %p size %x\n", bus,softc,usb_ca.ca_devsize);

    /* abuse the device structure a bit */
    bus->dv_unit = softc->dv_unit = (USBHALWS->usbbus_no++);

    /* set the flag to make it explore immediately */
    softc->dv_cfdata = &(struct cfdata) { .cf_flags = 1 };;

    strcpy (softc->dv_xname, "USBDriver");

    (*usb_ca.ca_attach)(0, softc, bus);

    return softc;
}

/*---------------------------------------------------------------------------*/

void deregister_bus (device_ptr_t bus)
{
    hdprintf ("removing bus %p\n", bus);
    (*usb_ca.ca_detach)(bus, 0);
    hdprintf ("finished removing bus %p\n", bus);
    TAILQ_REMOVE (&(USBHALWS->allbuses), (device_ptr_t) bus, dv_list);
    free (bus);
}

/*---------------------------------------------------------------------------*/

struct device* get_softc (int unit)
{
    struct device* dev;
    TAILQ_FOREACH(dev, &(USBHALWS->allbuses), dv_list)
    {
        if (dev->dv_unit == ((unit >> 16) & 0xff))
            return dev;
    }

    hdprintf ("couldn't find unit %x\n", unit);
    return NULL;
}

/*---------------------------------------------------------------------------*/

extern void usb_discover (void*);

void discover_callback (void* sc)
{
    struct usbd_bus* bus = sc;
    struct device* dev;
    hdprintf ("bus discover %p\n",bus);
    TAILQ_FOREACH(dev, &USBHALWS->allbuses, dv_list)
    {
        /* XXX this is dodgy, because in the case where the OHCIDriver module
           has removed its memory, 'bus' is no longer a valid pointer, and
           could either cause an abort or accidentally contain a valid usbctl */
     hdprintf("dev:%p uctl:%p \n",dev,bus->usbctl);
        if (dev == (struct device*) bus->usbctl)
            goto valid;
    }

    hdprintf ("bus %p has been removed\n",bus);
    if(bus) bus->callbacks=0;
    return;

valid:
    /* This is a standard callx callback, so we want IRQs on */
    splx(0);
    hdprintf ("discovering %p\n",dev);
    do {
        usb_discover (bus->usbctl);
    } while (--bus->callbacks);
    hdprintf ("finished callbacks\n");
}

/*---------------------------------------------------------------------------*/
  
void usb_needs_explore_callback (void* h) {
    struct usbd_bus* bus = h;
    if (bus->callbacks>9) bus->callbacks=9;
    if (bus->callbacks++ == 0)
    {
        hdprintf ("Adding explore callback on bus %p\n",h);
        USBHAL_AddCallback (discover_callback, h);
    }
    else
        hdprintf ("deferring callback on bus %p - %d callbacks queued\n",bus, bus->callbacks);
}

/*---------------------------------------------------------------------------*/

struct device* attach_hub (struct device* parent, void* aux)
{
    struct device* softc;
    struct usb_attach_arg* uaa = aux;

    /* don't match generic */
    if (uaa->usegeneric) return NULL;

    hdprintf ("Trying match on usb hub\n");

    /* First see if we match */
    if ((*uhub_uhub_ca.ca_match) (0, 0, aux) == UMATCH_NONE)
    {
       hdprintf ("Failed to match\n");
       return NULL;
    }

    /* If so, allocate memory for the device and attach ourselves. */
    softc = malloc (uhub_uhub_ca.ca_devsize);
    if (softc == NULL) {
        hdprintf ("Couldn't allocate memory for hub device\n");
        return NULL;
    }
    memset (softc, 0, uhub_uhub_ca.ca_devsize);
    strcpy (softc->dv_xname,"USBHub");
    softc->dv_cfdata = (void*) 1; // hub

    (*uhub_uhub_ca.ca_attach) (parent, softc, aux);

    hdprintf ("Matched hub\n");

    return softc;
}

/*---------------------------------------------------------------------------*/

int detach_hub (struct device* hub)
{
    (*uhub_uhub_ca.ca_detach) (hub, 0);
    free (hub);
    return 0;
}

/*---------------------------------------------------------------------------*/

struct device* riscos_usb_attach
(
    void* dev,
    struct device*  parent,
    void* aux
) {
    struct device* ret = attach_hub(parent,aux);
    if(!ret)
        ret = attach_keyboard(parent,aux);
    return ret;
}

/*---------------------------------------------------------------------------*/

int config_detach (struct device* dev, int n)
{
    hdprintf ("config detach %p, %d, type %d\n",
        dev, n, (int) dev->dv_cfdata);
    /* catch case of config_detach called from config_found above */
    if (dev == (void*) 1)
    {
        return 0;
    }

    switch ((int) (dev->dv_cfdata))
    {
    case 1: return detach_hub (dev);
    case 4: return detach_keyboard (dev);
    }

//    free (dev);
    return 0;
}

/*---------------------------------------------------------------------------*/

void uhub_activate (void)
{}

/*---------------------------------------------------------------------------*/

static void re_discover(void *param)
{
    (void)param;
    for (int i = 1; i < USBHALWS->usbbus_no; i++)
    {
        if (get_softc (i << 16) != NULL)
        {
            hdprintf("rediscover bus %d\n",i);
            usbioctl (i << 16, USB_DISCOVER, 0, 0, 0);
        }
    }
    callout_reset(USBHALWS->rediscover,500,re_discover,NULL);
}

/*
 * port.c routines:
 */

extern uint64_t gettime (void);

uint64_t gettime (void)
{
    uint32_t cs;
    uint32_t ns_factor;
    uint32_t max_count = HAL_CounterPeriod();

    /* conversion to ns, assume counter is for 1 cs */
    ns_factor = 10000000u / max_count;

    cs = USBHALWS->monotonictime;
    return (uint64_t) (max_count - HAL_CounterRead()) * ns_factor +
        ((uint64_t) cs) * 10000000 /* 1e7 */;
}

/*
 * Callouts
 */
void
callout_init (struct callout* c,int ignored)
{
    (void)ignored;
    memset (c, 0, sizeof c);
}

void
callout_stop (struct callout *c) {
    int s = splbio();
    struct callout **c2 = &(USBHALWS->callouts);
    while(*c2)
    {
        if(*c2 == c)
        {
            *c2 = c->c_next;
            splx(s);
            return;
        }
        c2 = &((*c2)->c_next);
    }
    splx(s);
}

void
callout_reset (struct callout *c, int i, void (*f)(void *), void *v) {
    int s = splbio();
    callout_stop(c);
    if (i <= 0) i = 1;
    c->c_arg = v;
    c->c_func = f;
    c->c_time = (((uint32_t)(i+9))/10u) + USBHALWS->monotonictime;
    /* Find insertion pos */
    struct callout **c2 = &(USBHALWS->callouts);
    while((*c2) && ((*c2)->c_time < c->c_time))
        c2 = &((*c2)->c_next);
    c->c_next = *c2;
    *c2 = c;
    splx(s);
}

int tsleep (void* ident, int priority, const char* wmesg, int timo, int noblock)
{
    int i;
    int s = splbio();
    uint64_t t0, t1, t2;

    hdprintf(">ts %p\n",ident);

    t1 = t0 = gettime();
    t1 += ((uint64_t) timo) * 1000000;

    for (i = 0; i < USBHALWS->nhandles && USBHALWS->t_handles[i] && USBHALWS->t_handles[i] != ident; ++i);

    if (i == USBHALWS->nhandles) {
        USBHALWS->nhandles = i + 1;
        if (USBHALWS->nhandles >= MAX_TSLEEP_HANDLES)
        {
            panic ("run out of thread handles...");
        }
    }

    USBHALWS->t_handles[i] = ident;
    USBHALWS->t_locks[i] = 0;

    /* wait until the lock is free */
    /* TODO - May want to limit max wait to 5 seconds to ensure boot doesn't hang? */
    splx(0);
    if (timo) {
        do {
            triggercbs ();
            t2 = gettime ();
        }
        while ((USBHALWS->t_locks[i] == 0) && (t2 < t1));
    }
    else
    {
        while (USBHALWS->t_locks[i] == 0)
        {
            triggercbs ();
        }
    }
    splbio();

    USBHALWS->t_handles[i] = 0;

    hdprintf("<ts\n");

    splx(s);

    return 0;
}

int wakeup (void* ident) {
    int i;
    hdprintf("wu %p\n",ident);

    /* Find the index of the handle passed */
    for (i = 0; i < USBHALWS->nhandles && USBHALWS->t_handles[i] != ident; ++i);

    /* unlock it */
    if (USBHALWS->t_handles[i] == ident)
    {
      USBHALWS->t_locks[i] = 1;
      USBHALWS->t_handles[i] =NULL; /* TODO - Could cause handle to be reused before tsleep is able to wake up? */
    }  
    return 0;
}

void usbd_devinfo_vp(usbd_device_handle dev, char* v, size_t vl, char* p, size_t pl, int usedev)
{
#ifdef DEBUG_HAL
    usb_device_descriptor_t *udd = &dev->ddesc;
    snprintf(v, vl, "Vendor ID %04X", UGETW(udd->idVendor));
    snprintf(p, pl, "Product ID %04X", UGETW(udd->idProduct));
#else
    *v = *p = NULL;
#endif
}
@


1.7
log
@Use KbdFlags from OSEntries header
Exposed possible return with reserved bit 8 set when enter was pressed.

Version 0.91. Tagged as 'NetBSD-0_91'
@
text
@d52 1
d354 1
@


1.6
log
@Fixes to callback implementation used by HAL drivers
Detail:
  build/c/usbhal - Restructured triggercbs() so that it doesn't use irqsema to prevent callbacks triggering recursively, as this behaviour can be required sometimes (e.g. xfer timeout callback for a blocking xfer that's being performed within the bus explore callback).
  Instead, a 'callbacks needed' flag is used to decide whether callbacks should be processed, which operates in a similar way to the kernel's CBack_VectorReq flag - once a triggercbs() instance starts processing callbacks, no other calls will process them until a new callback is inserted.
  Also fixed indexing of the callback array within triggercbs() to correctly deal with wrap-around
  build/Hdr/usbhal, dev/usb/h/usbhal - Add cbs_needed to workspace
Admin:
  Tested on BB-xM with high processor vectors
  Fixes hang during boot time keyboard scan that was seen when certain devices were connected


Version 0.84. Tagged as 'NetBSD-0_84'
@
text
@d182 1
a182 1
    uint32_t result = HAL_KbdScan_Present;
d184 1
a184 1
        result |= HAL_KbdScan_Ctrl;
d186 1
a186 1
        result |= HAL_KbdScan_Shift;
d192 4
a195 5
        case 0x15: result |= HAL_KbdScan_R; break;
        case 0x17: result |= HAL_KbdScan_T; break;
        case 0x4c: result |= HAL_KbdScan_Delete; break;
        case 0x4d: result |= HAL_KbdScan_End; break;
        case 0x28: result |= HAL_KbdScan_Return; break;
d198 1
a198 1
    result |= HAL_KbdScan_Complete;
d254 1
a254 1
    USBHALWS->kbdflags |= HAL_KbdScan_Present;
@


1.5
log
@Make RHENIUM build switch go away. Misc housekeeping
Detail:
  build/Makefile, build/!MkDebug,fd7 - Debug versions of the modules can now be built just by passing "DEBUG=TRUE" to amu
  build/!MkRhenium,fd7 - Deleted obsolete file
  build/Version - Increased version numbers
  build/c/ehcihal, build/c/ehcimodule, build/c/ohcimodule - Only accept USB controllers if HAL_USBControllerInfo says the struct size is an exact match with what we expect. Rework USB controller enumeration to allow modules to properly support both PCI and HAL controllers being available on the same machine, and without RHENIUM switch (module sources only).
  build/c/ehcimodule - Get rid of remaining RHENIUM bits; RHENIUM flag no longer needed for 32bit wide register reads/writes to be supported
  build/c/ohcimodule, build/cmhg/ohcimodhead, dev/usb/c/ohci - Get rid of remaining RHENIUM bits; RHENIUM flag no longer needed for HAL port power controls to be supported.
  build/c/usbhal, build/c/usbmodule, dev/usb/c/uhub, dev/usb/h/usb_port - Get rid of empty riscos_failed_device function
  build/s/call_veneer, build/s/triggercbs - Use Entry/EXIT macros to avoid single-reg LDM/STM performance warnings. Convert tabs to spaces.
  dev/usb/h/usb - Get rid of RHENIUM switch on USB_PORT_RESET_DELAY. Now always uses non-RHENIUM value of 100ms.
Admin:
  Tested on rev A2 BB-xM, Iyonix, Raspberry Pi


Version 0.71. Tagged as 'NetBSD-0_71'
@
text
@a284 1
    int s = splbio();
d287 6
a292 2
        /* Prevent recusrive callbacks */
        USBHALWS->irqsema++;
d296 3
a298 2
            void (*cbfunc)(void *) = USBHALWS->callbacks[USBHALWS->nextcb].cbfunc;
            void *param = USBHALWS->callbacks[USBHALWS->nextcb].param;
d308 1
a308 1
        USBHALWS->irqsema--;
a309 1
    splx(s);
d332 1
d426 1
a426 1
}    
d437 1
@


1.4
log
@Use the passed buffer limit rather than 255.
Avoids potential buffer overrun, since the actual buffers are 128 at the moment.

Version 0.69. Tagged as 'NetBSD-0_69'
@
text
@a640 6
void riscos_failed_device (void* p)
{
}

/*---------------------------------------------------------------------------*/

@


1.3
log
@Add some more usbdevs from the NetBSD sources.
In particular, the SMSC ethernet controller and hub on the Beagleboard
xm.
Changed pointer assignments & comparisons with 0 to be NULL for clarity.
Implement a left trim function for any printed out strings obtained from
the device (to mirror usbd_trim_spaces) so that when dopey manufacturers
use a space instead of their company name everything lines up still.

Version 0.68. Tagged as 'NetBSD-0_68'
@
text
@d800 1
a800 1
    *v = *p = 0;
@


1.2
log
@Update HAL USB code for new HAL_KbdScanInterrupt behaviour. Fix data aborts during keyboard scanning.
Detail:
  build/c/usbhal, build/h/usbhal - Updated USBHAL_KbdScanInterrupt to behave the same way HAL_KbdScanInterrupt is now expected to behave.
  build/c/ehci, build/c/ohci - Fixed some root hub emulation code which was writing to a global structure before copying it into the destination buffer. Although this works fine in ROM modules it was causing data aborts in the USB HAL libraries due to lack of automatic RW data relocation by the compiler.
  build/Version - Updated version numbers
Admin:
  Tested on rev C2 BB.


Version 0.62. Tagged as 'NetBSD-0_62'
@
text
@d229 1
a229 1
    if (softc == 0) {
d574 1
a574 1
    if (softc == 0) {
@


1.1
log
@Add the ability to build the USB drivers as HAL-compatible static libraries
Detail:
  build/Makefile, build/OBJEHCIDriver, build/OBJOHCIDriver, build/OBJUSBDriver - Modified makefiles to build the HAL libs during the export libs phase
  build/!MkHAL,fd7 - Handy script for building the HAL libs
  build/Hdr/usbhal - Header containing definitions for the assembler code. Also gets exported so that HALs know how much workspace to reserve.
  build/c/usbhal - HAL version of usbmodule.c & port.c. Also contains the keyboard scan code, adapted from the code in the Tungsten HAL.
  build/s/porthal - Assembler versions of some port.c routines that were easier to do in assembler than C
  build/s/halheap - OS_Heap code that's been adapted for use in the HAL. Could easily be changed into a standalone library instead of being part of the HAL USB libs. Supports memory-efficient allocation of aligned blocks.
  build/c/ehcihal - HAL version of ehcimodule.c. Currently only supports EHCI controllers exposed via HAL_USBControllerInfo (i.e. no PCI support)
  build/c/ehcimodule, build/c/ohcimodule, build/c/port - Moved riscos_irq_clear into port.c. Removed unused microtime() function.
  build/c/usbmouse - Strip out some debug-related code in non-debug builds
  build/Version - Updated version numbers
  dev/usb/c/ehci, dev/usb/h/ehcivar - Adapted to add support for the HAL build. Apart from the base changes, the code has also been tweaked to significantly reduce the amount of memory used at runtime by the HAL version of the driver.
  dev/usb/c/hid, dev/usb/c/uhub, dev/usb/c/usb, dev/usb/c/usb_quirks, dev/usb/c/usb_subr, dev/usb/c/usbdi, dev/usb/c/usbdi_util, dev/usb/c/usbroothub_subr - Changes to support HAL builds. Mainly disabling bits that won't work in the HAL or disabling bits for RISC OS in general if they weren't being used in the first place.
  dev/usb/c/ohci, dev/usb/h/ohcivar - Basic changes to support HAL builds. However HAL OHCI support is still incomplete.
  dev/usb/h/usb_port - Added support for the HAL build. Also tweaked logprintf definition to get rid of logprintf calls entirely in non-debug builds.
  dev/usb/h/usbdivar - Added support for the HAL build.
  dev/usb/h/usbhal - New header used by the HAL build. Gets included by every C file to ensure the compiler doesn't use sb, and contains structs/macros to allow access to the shared workspace.
Admin:
  HAL & non-HAL builds tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook.
  Non-HAL builds tested with Iyonix ROM softload.
  Needs latest Kernel source for OSEntries.h export.


Version 0.59. Tagged as 'NetBSD-0_59'
@
text
@d343 1
a343 1
void USBHAL_KbdScanInterrupt(void)
a345 1
    int irq = HAL_IRQSource();
d366 1
d376 2
d379 1
a381 1
        HAL_IRQClear(irq);
d388 1
@

