head	1.7;
access;
symbols
	NetBSD-1_19:1.7
	NetBSD-1_18:1.7
	NetBSD-1_17:1.7
	NetBSD-1_16:1.7
	NetBSD-1_15:1.7
	NetBSD-1_14:1.7
	NetBSD-1_13:1.7
	NetBSD-1_12:1.7
	NetBSD-1_09-1:1.7
	NetBSD-1_11:1.7
	NetBSD-1_10:1.7
	NetBSD-1_09:1.7
	NetBSD-1_08:1.7
	NetBSD-1_07:1.7
	NetBSD-1_06:1.7
	NetBSD-1_05:1.6
	NetBSD-1_04:1.5
	NetBSD-1_03:1.5
	NetBSD-1_02:1.5
	NetBSD-1_01:1.5
	NetBSD-1_00:1.5
	NetBSD-0_99:1.5
	NetBSD-0_98:1.5
	NetBSD-0_97:1.5
	NetBSD-0_96:1.5
	NetBSD-0_95:1.5
	NetBSD-0_94:1.5
	NetBSD-0_93:1.5
	NetBSD-0_92:1.5
	NetBSD-0_91:1.5
	NetBSD-0_90:1.5
	NetBSD-0_89:1.5
	NetBSD-0_88:1.5
	NetBSD-0_87:1.3
	NetBSD-0_86:1.3
	NetBSD-0_85:1.3
	NetBSD-0_84:1.2
	NetBSD-0_83:1.2
	NetBSD-0_82:1.2
	NetBSD-0_81:1.2
	NetBSD-0_80:1.2
	NetBSD-0_79:1.2
	NetBSD-0_78:1.2
	NetBSD-0_77:1.2
	NetBSD-0_76:1.2
	NetBSD-0_75:1.2
	NetBSD-0_74:1.2
	NetBSD-0_73:1.2
	NetBSD-0_72:1.2
	NetBSD-0_71:1.2
	NetBSD-0_70:1.1
	NetBSD-0_69:1.1
	NetBSD-0_68:1.1
	NetBSD-0_67:1.1
	NetBSD-0_66:1.1
	NetBSD-0_65:1.1
	NetBSD-0_64:1.1
	NetBSD-0_63:1.1
	NetBSD-0_62:1.1
	NetBSD-0_61:1.1
	NetBSD-0_60:1.1
	NetBSD-0_59:1.1;
locks; strict;
comment	@# @;


1.7
date	2015.11.09.02.56.58;	author bavison;	state Exp;
branches;
next	1.6;
commitid	FHc9TaQL9YzzDmIy;

1.6
date	2015.11.04.22.20.03;	author rool;	state Exp;
branches;
next	1.5;
commitid	HzbqOzFGVg8xePHy;

1.5
date	2014.08.29.21.20.14;	author jlee;	state Exp;
branches;
next	1.4;
commitid	avKmF8Wh0bm0NiOx;

1.4
date	2014.08.29.19.26.16;	author jlee;	state Exp;
branches;
next	1.3;
commitid	f6ArfsGGibMS9iOx;

1.3
date	2014.06.01.13.51.39;	author jlee;	state Exp;
branches;
next	1.2;
commitid	Vazl1SQGmZpsaPCx;

1.2
date	2012.06.07.00.11.04;	author jlee;	state Exp;
branches;
next	1.1;
commitid	LkYeKFZjKWlNTH7w;

1.1
date	2011.05.22.20.22.34;	author jlee;	state Exp;
branches;
next	;
commitid	Ye1jVWDlKivFSIkv;


desc
@@


1.7
log
@  Fix HAL breakages caused by HAL_USBPortPower calls
Detail:
  In version 1.05, the USB library which is exported for the use of the HAL
  keyboard scan code unconditionally required the HAL_USBPortPower symbol.
  Not all HALs provide that entry point; for those that didn't, they would
  no longer link. Fixed by use of a bit of magic assembler.
Admin:
  Verified that OMAP3 ROM now builds again.

Version 1.06. Tagged as 'NetBSD-1_06'
@
text
@/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* HAL version of ehcimodule.c */
#include <dev/usb/usbhal.h>

#include <string.h>
#include <stdlib.h>
#include <limits.h>
#include <machine/bus.h>

#include <sys/queue.h>
#include <sys/types.h>
#include <sys/systm.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>
#include <dev/usb/ehcireg.h>
#include <dev/usb/ehcivar.h>

#include "Global/RISCOS.h"
#include "Global/Services.h"
#include "Global/HALEntries.h"

/* Have to avoid including stdio as there's a clash with the BSD stuff */
#define __stdio_h

#include "DebugLib/DebugLib.h"

typedef struct
{
    int type;
    int flags;
    void *hw;
    int devno;
} usbinfo;

extern size_t HAL_USBControllerInfo(int idx,usbinfo *info,size_t size);
extern int HAL_IRQEnable(int device);
extern int HAL_IRQDisable(int device);
extern void HAL_IRQClear(int device);
extern int (*GetHAL_USBPortPower(void))(int idx,int port,int state);
extern device_ptr_t register_bus(device_ptr_t bus);

static void init_device(usbinfo *info,int idx)
{
	ehci_softc_t *ehci = malloc(sizeof(ehci_softc_t));
	memset(ehci,0,sizeof(ehci_softc_t));
	sprintf(ehci->sc_bus.bdev.dv_xname,"EHCI%d",idx);
	ehci->sc_irqdevno = info->devno;
	ehci->sc_ncomp = 2;
	/* Abuse iot & ioh members to store base addr & flags */
	ehci->iot = (bus_space_tag_t) info->hw;
	ehci->ioh = (bus_space_handle_t) info->flags;
	if(info->flags & HALUSBControllerFlag_EHCI_ETTF)
		ehci->sc_flags |= EHCIF_ETTF;
	ehci_init(ehci);
	/* Enable IRQ */
	HAL_IRQEnable(ehci->sc_irqdevno);
	/* Register with USBDriver */
	register_bus((device_ptr_t) ehci);
	/* Switch on the ports (if under HAL control) */
	if(info->flags & HALUSBControllerFlag_HAL_Port_Power && GetHAL_USBPortPower() != NULL)
	{
		for (int i = 0; i < ehci->sc_noport; i++)
		{
			GetHAL_USBPortPower()(idx, i, 1);
		}
	}
}

void USBHAL_EHCIDriver_Init(void)
{
	/* Find and initialise all controllers. Note that this currently only
	   supports controllers exposed via HAL_USBControllerInfo */
	int idx=0;
	do {
		usbinfo info;
		size_t usbinfolen = HAL_USBControllerInfo(idx,&info,sizeof(info));
		if((usbinfolen == sizeof(info)) && (info.type == HALUSBControllerType_EHCI))
			init_device(&info,idx);
		else if(!usbinfolen)
			return;
		idx++;
	} while(1);
}

int usbhal_ehci_do_intr(struct usbd_bus *bus,int irqdevno)
{
	ehci_softc_t *sc = (ehci_softc_t *)bus;
	if(irqdevno != sc->sc_irqdevno)
		return 0;
	int ret = ehci_intr(sc);
	return ret;
}

void usbhal_ehci_shutdown(struct usbd_bus *bus)
{
	ehci_softc_t *sc = (ehci_softc_t *)bus;
	/* Disable IRQ */
	HAL_IRQDisable(sc->sc_irqdevno);
	/* Reset controller */
	EOWRITE4(sc, EHCI_USBCMD, 0);
	EOWRITE4(sc, EHCI_USBCMD, EHCI_CMD_HCRESET);
	EOREAD4(sc, EHCI_USBCMD);/* flush the command */
	/* Wait a bit */
	delay(1000);
	/* Clear any lingering IRQ */
	HAL_IRQClear(sc->sc_irqdevno);
}

/* #define these because I'm feeling lazy */
#define ehci_base ((volatile int *)iot)
#define registers_32bit (((int)ioh) & HALUSBControllerFlag_32bit_Regs)

void bus_space_write_4 (bus_space_tag_t iot, bus_space_handle_t ioh, int o, int x)
{
    ehci_base[o>>2] = x;
}

int bus_space_read_4 (bus_space_tag_t iot, bus_space_handle_t ioh, int o)
{
    return ehci_base[o>>2];
}

void bus_space_write_2 (bus_space_tag_t iot, bus_space_handle_t ioh, int o, int x)
{
    if (registers_32bit)
    {
      x &= 0xFFFF;
      if (o&2)
        ehci_base[o>>2]=(ehci_base[o>>2]&0xFFFF)|(x<<16);
      else
        ehci_base[o>>2]=(ehci_base[o>>2]&0xFFFF0000)|x;
    }
    else
      ((uint16_t*) ehci_base)[o>>1] = x;
}

int bus_space_read_2 (bus_space_tag_t iot, bus_space_handle_t ioh, int o)
{
    if (registers_32bit)
    {
      if (o&2)
        return ((uint32_t*)ehci_base)[o>>2]>>16;
      else
        return ((uint32_t*)ehci_base)[o>>2]&0xFFFF;
    }
    return ((uint16_t*) ehci_base)[o>>1];
}

void bus_space_write_1 (bus_space_tag_t iot, bus_space_handle_t ioh, int o, int x)
{
    if (registers_32bit)
    {
      x &= 0xFF;
      int t = ehci_base[o>>2];
      t &= ~(0xFF<<((o&3)*8));
      t |= x<<((o&3)*8);
      ehci_base[o>>2] = t;
    }
    else
      ((uint8_t*) ehci_base)[o] = x;
}

int bus_space_read_1 (bus_space_tag_t iot, bus_space_handle_t ioh, int o)
{
    if (registers_32bit)
      return (((uint32_t*)ehci_base)[o/4]>>((o&3)*8))&0xff;
    return ((uint8_t*) ehci_base)[o];
}
@


1.6
log
@Add support for HAL_USBPortPower to EHCI host controller
Detail:
  When signalled as a feature of the HAL device, call HAL_USBPortPower to turn on the port.
Admin:
  Submission from Willi Theiss.

Version 1.05. Tagged as 'NetBSD-1_05'
@
text
@d55 1
a55 1
extern int HAL_USBPortPower(int idx,int port,int state);
d76 1
a76 1
	if(info->flags & HALUSBControllerFlag_HAL_Port_Power)
d80 1
a80 1
			HAL_USBPortPower(idx, i, 1);
@


1.5
log
@HAL library build fix
Detail:
  build/c/ehcihal - Corrected EHCIF_ETTF flag
Admin:
  Tested on BB-xM


Version 0.88. Retagged as 'NetBSD-0_88'
@
text
@d55 1
d75 8
@


1.4
log
@Merge in some EHCI fixes from NetBSD. Other minor changes.
Detail:
  build/Version - Bump EHCIDriver version number
  build/c/ehcihal, build/c/ehcimodule, build/c/ohcimodule - Use the HAL USB controller type & flag definitions from Hdr:HALEntries instead of using magic numbers
  build/c/ehcimodule - Avoid double-read of hardware register in debug version of bus_space_read_4(); ensures that we report the value that's actually returned to the driver
  dev/usb/c/ehci - Merge in the following revisions from NetBSD:
  - 1.172, 1.173, 1.178, 1.193 - Support for controllers with embedded transaction translators
  - 1.174 - alloc_sqtd_chain() fix for short packets that end on page boundaries
  - 1.179 - ehci_set_qh_qtd() fixed to terminate alternate next qTD pointer with EHCI_NULL, not 0
  dev/usb/h/ehcireg - Updated to latest NetBSD version (1.34)
  dev/usb/h/ehcivar - Merge in revision 1.38 (ETTF support)
Admin:
  Tested on BB-xM


Version 0.88. Tagged as 'NetBSD-0_88'
@
text
@d68 1
a68 1
		ehci->sc_flags |= EHCI_ETTF;
@


1.3
log
@Tidy up exported USBDevFS.h
Detail:
  build/h/USBDevFS - Added extra #ifdef guard to allow USBDevFS.h to be safely included by software that uses the BSD USB headers. Add the DeviceFS_CallDevice codes that USBDriver uses.
  build/h/service - Removed redundant secondary definition of the service call structures which the drivers were using internally
  build/c/ehcihal - Removed redundant #includes
  build/c/ehcidriver, build/c/ohcidriver - Use USBDevFS.h instead of service.h
  build/c/usbmodule - Use USBDevFS.h instead of service.h. Get rid of local DeviceCall definitions and use the ones which are now in USBDevFS.h. Also switched over to using Interface/DevicsFS.h for the main DevicsFS call reason codes, to match the naming convention used by USBDevFS.h (as opposed to the OSLib naming convention that was used previously). Stripped the unused OBSOLETE_SERVICE_CALLS code.
  build/Makefile - Add usbdi_util.h to the header exports
Admin:
  Tested with building OMAP3, Tungsten & BCM2835 ROMs
  Builds to binary-identical modules as previous version.


Version 0.85. Tagged as 'NetBSD-0_85'
@
text
@d67 2
d84 1
a84 1
		if((usbinfolen == sizeof(info)) && (info.type == 1))
d118 1
a118 1
#define registers_32bit (((int)ioh) & 8)
@


1.2
log
@Make RHENIUM build switch go away. Misc housekeeping
Detail:
  build/Makefile, build/!MkDebug,fd7 - Debug versions of the modules can now be built just by passing "DEBUG=TRUE" to amu
  build/!MkRhenium,fd7 - Deleted obsolete file
  build/Version - Increased version numbers
  build/c/ehcihal, build/c/ehcimodule, build/c/ohcimodule - Only accept USB controllers if HAL_USBControllerInfo says the struct size is an exact match with what we expect. Rework USB controller enumeration to allow modules to properly support both PCI and HAL controllers being available on the same machine, and without RHENIUM switch (module sources only).
  build/c/ehcimodule - Get rid of remaining RHENIUM bits; RHENIUM flag no longer needed for 32bit wide register reads/writes to be supported
  build/c/ohcimodule, build/cmhg/ohcimodhead, dev/usb/c/ohci - Get rid of remaining RHENIUM bits; RHENIUM flag no longer needed for HAL port power controls to be supported.
  build/c/usbhal, build/c/usbmodule, dev/usb/c/uhub, dev/usb/h/usb_port - Get rid of empty riscos_failed_device function
  build/s/call_veneer, build/s/triggercbs - Use Entry/EXIT macros to avoid single-reg LDM/STM performance warnings. Convert tabs to spaces.
  dev/usb/h/usb - Get rid of RHENIUM switch on USB_PORT_RESET_DELAY. Now always uses non-RHENIUM value of 100ms.
Admin:
  Tested on rev A2 BB-xM, Iyonix, Raspberry Pi


Version 0.71. Tagged as 'NetBSD-0_71'
@
text
@a41 2
#include "service.h"
#include "oslib/devicefs.h"
@


1.1
log
@Add the ability to build the USB drivers as HAL-compatible static libraries
Detail:
  build/Makefile, build/OBJEHCIDriver, build/OBJOHCIDriver, build/OBJUSBDriver - Modified makefiles to build the HAL libs during the export libs phase
  build/!MkHAL,fd7 - Handy script for building the HAL libs
  build/Hdr/usbhal - Header containing definitions for the assembler code. Also gets exported so that HALs know how much workspace to reserve.
  build/c/usbhal - HAL version of usbmodule.c & port.c. Also contains the keyboard scan code, adapted from the code in the Tungsten HAL.
  build/s/porthal - Assembler versions of some port.c routines that were easier to do in assembler than C
  build/s/halheap - OS_Heap code that's been adapted for use in the HAL. Could easily be changed into a standalone library instead of being part of the HAL USB libs. Supports memory-efficient allocation of aligned blocks.
  build/c/ehcihal - HAL version of ehcimodule.c. Currently only supports EHCI controllers exposed via HAL_USBControllerInfo (i.e. no PCI support)
  build/c/ehcimodule, build/c/ohcimodule, build/c/port - Moved riscos_irq_clear into port.c. Removed unused microtime() function.
  build/c/usbmouse - Strip out some debug-related code in non-debug builds
  build/Version - Updated version numbers
  dev/usb/c/ehci, dev/usb/h/ehcivar - Adapted to add support for the HAL build. Apart from the base changes, the code has also been tweaked to significantly reduce the amount of memory used at runtime by the HAL version of the driver.
  dev/usb/c/hid, dev/usb/c/uhub, dev/usb/c/usb, dev/usb/c/usb_quirks, dev/usb/c/usb_subr, dev/usb/c/usbdi, dev/usb/c/usbdi_util, dev/usb/c/usbroothub_subr - Changes to support HAL builds. Mainly disabling bits that won't work in the HAL or disabling bits for RISC OS in general if they weren't being used in the first place.
  dev/usb/c/ohci, dev/usb/h/ohcivar - Basic changes to support HAL builds. However HAL OHCI support is still incomplete.
  dev/usb/h/usb_port - Added support for the HAL build. Also tweaked logprintf definition to get rid of logprintf calls entirely in non-debug builds.
  dev/usb/h/usbdivar - Added support for the HAL build.
  dev/usb/h/usbhal - New header used by the HAL build. Gets included by every C file to ensure the compiler doesn't use sb, and contains structs/macros to allow access to the shared workspace.
Admin:
  HAL & non-HAL builds tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook.
  Non-HAL builds tested with Iyonix ROM softload.
  Needs latest Kernel source for OSEntries.h export.


Version 0.59. Tagged as 'NetBSD-0_59'
@
text
@d84 1
a84 1
		if((usbinfolen >= sizeof(info)) && (info.type == 1))
@

