head	1.8;
access;
symbols
	XHCIDriver-0_27:1.8
	XHCIDriver-0_26:1.8
	XHCIDriver-0_25:1.8
	XHCIDriver-0_24:1.8
	XHCIDriver-0_23:1.7
	XHCIDriver-0_22:1.7
	XHCIDriver-0_21:1.7
	XHCIDriver-0_20:1.7
	XHCIDriver-0_19:1.7
	XHCIDriver-0_18:1.6
	XHCIDriver-0_17:1.5
	XHCIDriver-0_16:1.4
	XHCIDriver-0_15:1.4
	XHCIDriver-0_14:1.4
	XHCIDriver-0_13:1.4
	XHCIDriver-0_12:1.3
	XHCIDriver-0_11:1.2
	XHCIDriver-0_10:1.1.1.1
	XHCIDriver-0_09:1.1.1.1
	XHCIDriver-0_08:1.1.1.1
	XHCIDriver-0_00:1.1.1.1
	elesar:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2018.01.27.09.44.07;	author rool;	state Exp;
branches;
next	1.7;
commitid	E19GEi5ntQr2RuoA;

1.7
date	2017.07.13.15.46.07;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	zMf6aZor46HMd5Zz;

1.6
date	2017.06.30.09.29.41;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	wq4Kuh3Up4lzynXz;

1.5
date	2016.12.18.08.51.03;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	WaJhkDru5xTWzryz;

1.4
date	2016.06.03.11.51.25;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	Phipd5QnE8rqW09z;

1.3
date	2016.03.27.01.38.12;	author jlee;	state Exp;
branches;
next	1.2;
commitid	yeIbWZmNzHWxJd0z;

1.2
date	2016.03.25.22.12.01;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	DEqsDG8kk3KNC40z;

1.1
date	2015.11.15.09.57.09;	author rool;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qyF6VTf5kJgELaJy;

1.1.1.1
date	2015.11.15.09.57.09;	author rool;	state Exp;
branches;
next	;
commitid	qyF6VTf5kJgELaJy;


desc
@@


1.8
log
@Defined return on error
Detail:
  Ensure the returned status is defined if USBDriver_InsertTransfer fails (because USBDriver has gone).
  See similar in DWCDriver-0_34.

Version 0.24. Tagged as 'XHCIDriver-0_24'
@
text
@/*
 * Copyright (c) 2014, Elesar Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Elesar Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "Global/OSRSI6.h"
#include "Global/HALEntries.h"
#include "Interface/USBDriver.h"
#include "Interface/RTSupport.h"

#include "AsmUtils/clz.h"
#include "AsmUtils/callbacks.h"
#include "AsmUtils/irqs.h"
#include "SyncLib/synclib.h"
#include "callx/callx.h"

#include "machine/bus.h"

#include "sys/param.h"
#include "sys/systm.h"
#include "sys/types.h"
#include "sys/kmem.h"
#include "sys/pool.h"

#include "dev/usb/usb.h"
#include "dev/usb/usbdi.h"
#include "dev/usb/usbdivar.h"

#include "glue.h"

#include "USB/USBDevFS.h"
#include "DebugLib/DebugLib.h"

/*
 * Memory pools
 */
typedef struct
{
	uint64_t   alloc;
	void      *mem;
	size_t     log2each;
#define POOL_GUARD 0x4C4F4F50
	uint32_t   guard;
} pool_cache_private_t;

pool_cache_t pool_cache_init(size_t size, u_int align, u_int align_offset, u_int flags,
                             const char *name, struct pool_allocator *palloc, int ipl,
                             int (*ctor)(void *, void *, int),
                             void (*dtor)(void *, void *),
                             void *arg)
{
	pool_cache_private_t *p;
	void    *store;
	uint32_t each;
	_kernel_oserror *e;

	/* Pretty crude emulation, check our assumptions hold water */
	if ((align != 0) || (align_offset != 0) || (palloc != NULL) ||
	    (ctor != NULL) || (dtor != NULL))
	{
		dprintf(("", "pool_cache_init asserted\n"));
		return NULL;
	}

	/* Round size up to the next power of 2, and keep a pool
	 * of 64 of them so allocation can be bitmask fiddling.
	 * Although current only xfer structs are allocated from this pool,
	 * we'll use PCI_RAMAlloc to meet the alignment requirements and any
	 * future use that might involve DMA.
	 */
	each = 1u << (31 - clz(size + (size - 1)));
	dprintf(("", "Pool items are %u each (from %u)\n", each, size));
	e = _swix(PCI_RAMAlloc, _INR(0,2) | _OUT(0), each * 64, each, 0, &store);
	if ((e != NULL) || (store == NULL))
	{
		dprintf(("", "Couldn't get a pool of %u bytes\n", each * 64));
		return NULL;
	}
	p = malloc(sizeof(pool_cache_private_t));
	p->alloc = 0;
	p->mem = store;
	p->log2each = 31 - clz(each);
	p->guard = POOL_GUARD;

	UNUSED(arg);
	UNUSED(ipl);
	UNUSED(name);
	UNUSED(flags);

	return (pool_cache_t)p;
}

void pool_cache_destroy(pool_cache_t pc)
{
	pool_cache_private_t *p = (pool_cache_private_t *)pc;

	if (p->guard != POOL_GUARD) return;

	/* Invalidate the pool, then free it */
	p->guard = 0;
	_swix(PCI_RAMFree, _IN(0), p->mem);
	free(p);
}

void *pool_cache_get(pool_cache_t pc, int flags)
{
	pool_cache_private_t *p = (pool_cache_private_t *)pc;
	int    state;
	size_t i;
	uint64_t alloc;

	if (p->guard != POOL_GUARD) return NULL;
	state = ensure_irqs_off();

	/* Find a free bit */
	alloc = p->alloc;
	for (i = 0; i < 64; i++)
	{
//TODO! Track high watermark, incase 64 isn't enough?
		if (((uint32_t)alloc & 1) == 0)
		{
			p->alloc |= (1uLL<<i);
			restore_irqs(state);
			return (void *)((i << p->log2each) + (uintptr_t)p->mem);
		}
		alloc = alloc >> 1;
	}
	restore_irqs(state);

	UNUSED(flags);

	return NULL;
}

void pool_cache_put(pool_cache_t pc, void *object)
{
	pool_cache_private_t *p = (pool_cache_private_t *)pc;
	int    state;
	size_t i;

	if (p->guard != POOL_GUARD) return;
	i = ((uintptr_t)object - (uintptr_t)p->mem) >> p->log2each;

	state = ensure_irqs_off();

	/* Return to the pool */
	if (i < 64) p->alloc &= ~(1uLL<<i);

	restore_irqs(state);
}

void *malloc_contig(int len, int alignment)
{
	void *p;
	_kernel_oserror *e;

	e = _swix(PCI_RAMAlloc, _INR(0,2) | _OUT(0), len, alignment, 0, &p);
	if ((e != NULL) || (p == NULL))
	{
		dprintf(("", "Failed to allocate %d bytes at %d alignment -> %s\n",
		             len, alignment, (e == NULL) ? "OK" : e->errmess));
		return NULL;
	}

	memset(p, '\0', len);

	return p;
}

void free_contig(void **mem)
{
	_swix(PCI_RAMFree, _IN(0), *mem);
}

void *kmem_zalloc(size_t size, km_flag_t kmflags)
{
	UNUSED(kmflags);

	return calloc(size, 1);
}

void kmem_free(void *p, size_t size)
{
	UNUSED(size);

	free(p);
}

/*
 * Callouts 
 */
static _kernel_oserror *callout_handler(_kernel_swi_regs *r, void *pw, void *arg)
{
	struct callout *c = (struct callout *)arg;

	/* Called by the callx library, recover the NetBSD callout details and pass on */
	if (c->c_func != NULL) c->c_func(c->c_arg);
	UNUSED(r);
	UNUSED(pw);

	return NULL;
}

void callout_stop(struct callout *c)
{
	c->c_func = NULL;
	callx_remove_callafter(callout_handler, c);
}

void callout_reset(struct callout *c, int i, void (*f)(void *), void *v)
{
	if ((c->c_arg == v) && (c->c_func == f))
	{
		/* Reschedule existing (cancel then rebook) */
		callout_stop(c);
	}
	c->c_arg = v;
	c->c_func = f;

	/* Given milliseconds, want (at least 1) centiseconds for callx */
	if (i <= 0) i = 1;
	callx_add_callafter((i + 9) / 10, callout_handler, c);
}

/*
 * Emulate usb_init_task/usb_add_task for pipe timeouts
 */
void glue_abort_pipe(struct usb_task *task, void (*fun)(void *), void *arg)
{
	extern void *g_pw;
	static const int pollword = 1;

	/* Schedule the task at callback after interrupt level */
	task->fun = fun;
	task->arg = arg;
	_swix(RT_Register, _INR(0,7)|_OUT(0),
	      0, /* Flags */
	      glue_rt_entry, *((uint32_t **)g_pw)+1, task, &pollword, NULL, NULL,
	      "XHCIAbortPipe:50",
	      (int *)&task->next /* Repurpose TAILQ for keeping a handle */);
}

void glue_clear_endpoint_stall(struct usb_task *task, void (*fun)(void *), void *arg)
{
	extern void *g_pw;
	static const int pollword = 1;

	/* Schedule the task at callback after interrupt level */
	task->fun = fun;
	task->arg = arg;
	_swix(RT_Register, _INR(0,7)|_OUT(0),
	      0, /* Flags */
	      glue_rt_entry, *((uint32_t **)g_pw)+1, task, &pollword, NULL, NULL,
	      "XHCIClearStall:50",
	      (int *)&task->next /* Repurpose TAILQ for keeping a handle */);
}

int glue_rt_handler(void *arg)
{
	const struct usb_task *task = arg;

	task->fun(task->arg);

	/* Task returned, kill it */
	_swix(RT_Deregister, _INR(0,1), 0, *(int *)&task->next);

	return 0;
}

/*
 * Semaphores
 */
void cv_init(kcondvar_t *cv, const char *wmesg)
{
	*cv = 0; /* No signal to start */
	UNUSED(wmesg);
}

void cv_destroy(kcondvar_t *cv)
{
	UNUSED(cv);
}

void cv_signal(kcondvar_t *cv)
{
	*cv = 1; /* Signal */
}

int cv_timedwait(kcondvar_t *cv, kmutex_t *mtx, int ticks)
{
	kcondvar_t result;
	bool forever = (ticks == 0);

	/* There's only one signal/timedwait pair in the code, so this just
	 * reduces to a simple semaphore.
	 */
	while (*cv == 0)
	{
		usb_delay_ms(NULL, 1);
		ticks--;
		if (!forever && (ticks == 0))
		{
			dprintf(("", "CV timed out!"));
			break;
		}
	}

	/* Clear the signal for next time */
	result = *cv;
	*cv = 0;

	UNUSED(mtx);

	return result ? 0 : EWOULDBLOCK;
}

/*
 * Little helpers
 */
int ffs(int value)
{
	/* Find first set, bits are numbered 1-32 */
	if (value) return 1 + ctz(value);
	return 0;
}

/*
 * USB daemon leaf functions
 */
void usb_delay_ms(usbd_bus_handle h, u_int d)
{
	static int *irqsema = NULL;
	uint32_t    micros;

	if (irqsema == NULL)
	{
		/* One time lookup of IRQ semaphore location */
		_swix(OS_ReadSysInfo, _INR(0,2) | _OUT(2),
		      6, 0, OSRSI6_IRQsema, &irqsema);
	}
	micros = d * 1000;
	while (micros)
	{
		/* Wait 100us, do some callbacks, wait again */
		_swix(OS_Hardware, _IN(0) | _INR(8,9), 100,
		      OSHW_CallHAL, EntryNo_HAL_CounterDelay);
		if (*irqsema == 0) usermode_donothing();
		micros -= 100;
	}

	UNUSED(h);
}

const char *usbd_errstr(usbd_status s)
{
	UNUSED(s);
	return "!";
}

void usb_schedsoftintr(struct usbd_bus *sc)
{
	_swix(USBDriver_ScheduleSoftInterrupt, _IN(0), sc);
}

usbd_status usb_insert_transfer(usbd_xfer_handle xfer)
{
	usbd_status status = USBD_CANCELLED; /* Should _swix() error */

	_swix(USBDriver_InsertTransfer, _IN(0) | _OUT(0), xfer, &status);

	return status;
}

void usb_transfer_complete(usbd_xfer_handle xfer)
{
	_swix(USBDriver_TransferComplete, _IN(0), xfer);
}

/*
 * Bus space
 */
int bus_space_subregion(bus_space_tag_t space, bus_space_handle_t handle,
                        bus_size_t offset, bus_size_t size, bus_space_handle_t *nhandlep)
{
	/* The HAL mapped in the whole register set, so this just needs to
	 * derive a new handle (logical address) for use with read_4 and write_4.
	 */
	*nhandlep = (bus_space_handle_t)(offset + (uintptr_t)handle);
	UNUSED(space);
	UNUSED(size);

	return 0;
}

void bus_write_4(bus_space_handle_t space, bus_size_t offset, uint32_t value)
{
	volatile uint32_t *base;

	base = (volatile uint32_t *)space;
	base[offset >> 2] = value;
}

uint32_t bus_read_4(bus_space_handle_t space, bus_size_t offset)
{
	volatile uint32_t *base;

	base = (volatile uint32_t *)space;

	return base[offset >> 2];
}

/*
 * Virtual to physical
 */
int vtophys(void *v)
{
	struct
	{
		size_t page;
		void  *logical;
		void  *physical;
	} block;
	block.logical = v;
	_swix(OS_Memory, _INR(0,2), (1<<9) + (1<<13), &block, 1);

	return (int)block.physical;
}

/*
 * Dummy function
 */
void aprint_normal(void *fmt, ...)
{
	UNUSED(fmt);
}
@


1.7
log
@Improve transfer callout handling
xhci.c: Merge changes from NetBSD 1.28.2.51; previously timeouts were only applied to control transfers and were cancelled post transfer complete, now all transfer types are covered and are called prior to usbd_transfer_complete() being called.
glue.c: More faithfully implement callout_reset(). The spec for this function is supposed to extend a callout for ones that are already running, but since the callx library ultimately uses OS_CallAfter what actually happened was two callafters were scheduled. This caused a NULL pointer exception if USBDriver cancelled a transaction before the timeout completed (because the cancel caused a 2nd OS_CallAfter to be scheduled, but the cancel caused usbd_transfer_complete() to consume then free the xfer, then the 2nd OS_CallAfter fired and passed a free'd list to usbd_transfer_complete()).

Also removed redundant headers usb_mem.h and usb_quirks.h.
Tested over 3 weeks on a Titanium (waiting for the right sequence of events to cause 2 OS_CallAfters to trigger took several days each!).

Version 0.19. Tagged as 'XHCIDriver-0_19'
@
text
@d393 1
a393 1
	usbd_status status;
@


1.6
log
@Use RTSupport for both stalls and aborts
Implement the 'todo' note to use RTSupport instead of a callback. This means if the OS is stuck somewhere in SVC mode and no callbacks are happening the pipe is aborted, plus the state is held in the xfer struct rather than a single shared variable.

Version 0.18. Tagged as 'XHCIDriver-0_18'
@
text
@a53 2
#include "dev/usb/usb_mem.h"
#include "dev/usb/usb_quirks.h"
d232 1
d238 5
a379 2
const struct usbd_quirks usbd_no_quirk = { 0 };

@


1.5
log
@Build fix
The addition of min() macro to usb_port.h in NetBSD-1_18 causes the same name function here to no longer compile.

Version 0.17. Tagged as 'XHCIDriver-0_17'
@
text
@d250 1
a250 3
static void (*abort_pipe_fn)(void *);

static _kernel_oserror *glue_abort_pipe_callback(_kernel_swi_regs *r, void *pw, void *arg)
d252 2
a253 3
	abort_pipe_fn(arg);
	UNUSED(r);
	UNUSED(pw);
d255 8
a262 8
	return NULL;
}

void glue_abort_pipe(void (*fn)(void *), void *xfer)
{
//TODO! Could rationalise this to use RTSupport too?
	abort_pipe_fn = fn;
	callx_add_callback(glue_abort_pipe_callback, xfer);
@


1.4
log
@Catch babbling devices, mark as stalled
xhci.c: If a device babbles (sends more bytes than were requested of it) make sure this completion event code is caught, otherwise USB_TransferComplete is called with potentially bad data. From NetBSD revision 1.28.2.19.
glue.c: OS_Memory page numbers are just numbers, not pointers.

Version 0.13. Tagged as 'XHCIDriver-0_13'
@
text
@a351 5
int min(int a, int b)
{
	return (a > b) ? b : a;
}

@


1.3
log
@Don't pretend to mess with cacheability of pages
Detail:
  c/glue - Fix vtophys requesting that pages are made uncacheable. They're already uncacheable (all allocated via PCI_RAMAlloc), and once we're done with the pages we never do a 'make cacheable' call to balance it out
Admin:
  Builds, untested


Version 0.12. Tagged as 'XHCIDriver-0_12'
@
text
@d451 3
a453 3
		void *page;
		void *logical;
		void *physical;
@


1.2
log
@Fix for stall clear stalling when called from umass
Since SCSISoftUSB relies on devices stalling (rather than doing a test unit ready), stalls occur when a card reader with no card present is queried.
The port of umass ends up trying to add something to the control transfer queue, but enters with interrupts disabled, so the clear endpoint stall just times out having not done anything (other callers have interrupts enabled so do clear the stall).
Apply change of policy that NetBSD made in revision 1.28.2.19 where the clear endpoint stall is cleared asynchronously rather than being left around until the next transfer is queued.
Since we don't have threads on RISC OS, and callbacks wouldn't happen either, we schedule a one shot RTSupport to trigger the clear at CBAI level.
Apply change from NetBSD 1.28.2.37 to remove the old clear code too.

Version 0.11. Tagged as 'XHCIDriver-0_11'
@
text
@d456 1
a456 1
	_swix(OS_Memory, _INR(0,2), (1<<9) + (1<<13) + (2<<14), &block, 1);
@


1.1
log
@Initial revision
@
text
@d35 1
d263 1
d268 27
@


1.1.1.1
log
@Import of XHCIDriver
@
text
@@
