head	1.6;
access;
symbols
	XHCIDriver-0_27:1.6
	XHCIDriver-0_26:1.6
	XHCIDriver-0_25:1.6
	XHCIDriver-0_24:1.6
	XHCIDriver-0_23:1.6
	XHCIDriver-0_22:1.5
	XHCIDriver-0_21:1.5
	XHCIDriver-0_20:1.5
	XHCIDriver-0_19:1.5
	XHCIDriver-0_18:1.5
	XHCIDriver-0_17:1.4
	XHCIDriver-0_16:1.3
	XHCIDriver-0_15:1.3
	XHCIDriver-0_14:1.2
	XHCIDriver-0_13:1.2
	XHCIDriver-0_12:1.2
	XHCIDriver-0_11:1.2
	XHCIDriver-0_10:1.1.1.1
	XHCIDriver-0_09:1.1.1.1
	XHCIDriver-0_08:1.1.1.1
	XHCIDriver-0_00:1.1.1.1
	elesar:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2017.10.07.09.13.44;	author rool;	state Exp;
branches;
next	1.5;
commitid	pTxD0SIyyh7Ph6aA;

1.5
date	2017.06.30.09.29.45;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	wq4Kuh3Up4lzynXz;

1.4
date	2016.12.18.11.12.02;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	IW6DRwnT1zu7msyz;

1.3
date	2016.06.06.08.16.54;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	bjtxjLEqXFvPEn9z;

1.2
date	2016.03.25.22.12.04;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	DEqsDG8kk3KNC40z;

1.1
date	2015.11.15.09.57.09;	author rool;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qyF6VTf5kJgELaJy;

1.1.1.1
date	2015.11.15.09.57.09;	author rool;	state Exp;
branches;
next	;
commitid	qyF6VTf5kJgELaJy;


desc
@@


1.6
log
@Build fix
Detail:
  Duplicate type declaration for device_t, now in usb_port.h.
Admin:
  Requires USBDriver-1_23 for the corresponding usb_port.h.

Version 0.23. Tagged as 'XHCIDriver-0_23'
@
text
@/*
 * Copyright (c) 2014, Elesar Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Elesar Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef GLUE_H
#define GLUE_H

/* Porting types */
typedef int pmf_qual_t;             /* No power management functions */

/* Porting definitions */
#define KASSERT(k)                  /* Nothing */
#define KASSERTMSG(k,m)             /* Nothing */
#define UNUSED(k)                   (k)=(k)
#define USBHIST_FUNC()              /* Nothing */
#define USBHIST_CALLED(a)           /* Nothing */
#define USBHIST_LOGN(a,b,c,d,e,f,g) /* Nothing */
#define device_private(k)           (struct xhci_softc *)(k)
#define __diagused                  /* Nothing */
#define __printflike(a,b)           /* Nothing */
#define PRIx64                      "llx"
#define PRIx32                      "lx"
#define xhcidebug                   0   /* Needed as USB_DEBUG also undefined */
#define IPL_BIO                     0   /* Unused pool cache argument */
#define htole64(a)                  (a) /* ARM little endian */
#define le64toh(a)                  (a) /* ARM little endian */
#define roundup2(v,r)               (((v)+((r)-1)) & ~((r)-1))
#define mstohz(a)                   (a) /* Just give us the ms directly */

/* Bus space */
uint32_t bus_read_4(bus_space_handle_t, bus_size_t);
void bus_write_4(bus_space_handle_t, bus_size_t, uint32_t);
int bus_space_subregion(bus_space_tag_t, bus_space_handle_t,
                        bus_size_t, bus_size_t, bus_space_handle_t *);
#define bus_space_read_4(a,b,c)     bus_read_4(b,c)
#define bus_space_write_4(a,b,c,d)  bus_write_4(b,c,d)
#define BUS_SPACE_XHCI_OFFSET       0x10000
#define BUS_SPACE_WRAPPER_OFFSET    0

/* Semaphores */
#define mutex_spin_enter(a)         /* Chance it */
#define mutex_spin_exit(a)          /* Chance it */
#define mutex_enter(a)
#define mutex_exit(a)
#define mutex_init(a,b,c)
#define mutex_destroy(a)
typedef volatile int kmutex_t;
typedef volatile int kcondvar_t;
void cv_destroy(kcondvar_t *);
void cv_init(kcondvar_t *, const char *);
void cv_signal(kcondvar_t *);
int cv_timedwait(kcondvar_t *, kmutex_t *, int);

/* Abort pipe and clear stall tasks */
void glue_abort_pipe(struct usb_task *, void (*fn)(void *), void *xfer);
void glue_clear_endpoint_stall(struct usb_task *, void (*fn)(void *), void *xfer);
int glue_rt_entry(void *);
int glue_rt_handler(void *);

/* Little helpers */
int ffs(int);
const char *intl_lookup(const char *);

/* Logging */
void aprint_normal(void *, ...);
#define aprint_error_dev        aprint_normal
#define aprint_normal_dev       aprint_normal
#define aprint_verbose_dev      aprint_normal
#define aprint_debug_dev        aprint_normal

#endif
@


1.5
log
@Use RTSupport for both stalls and aborts
Implement the 'todo' note to use RTSupport instead of a callback. This means if the OS is stuck somewhere in SVC mode and no callbacks are happening the pipe is aborted, plus the state is held in the xfer struct rather than a single shared variable.

Version 0.18. Tagged as 'XHCIDriver-0_18'
@
text
@a31 4
typedef struct
{
	int unused;
} *device_t;                        /* Any old pointer will do */
@


1.4
log
@Build fix
The addition of min() macro to usb_port.h in NetBSD-1_18 causes the same name function here to no longer compile.

Version 0.17. Tagged as 'XHCIDriver-0_17'
@
text
@d82 1
a85 1
void glue_abort_pipe(void (*fn)(void *), void *xfer);
@


1.3
log
@Stop the endpoint when software's finished with it
Tell the controller when a pipe is closed, so it doesn't need to schedule time to look at endpoints we're not using any more. Also guards against packets arriving which USBDriver isn't expecting to receive.
From NetBSD revision 1.28.2.19.

Version 0.15. Tagged as 'XHCIDriver-0_15'
@
text
@a88 1
int min(int, int);
@


1.2
log
@Fix for stall clear stalling when called from umass
Since SCSISoftUSB relies on devices stalling (rather than doing a test unit ready), stalls occur when a card reader with no card present is queried.
The port of umass ends up trying to add something to the control transfer queue, but enters with interrupts disabled, so the clear endpoint stall just times out having not done anything (other callers have interrupts enabled so do clear the stall).
Apply change of policy that NetBSD made in revision 1.28.2.19 where the clear endpoint stall is cleared asynchronously rather than being left around until the next transfer is queued.
Since we don't have threads on RISC OS, and callbacks wouldn't happen either, we schedule a one shot RTSupport to trigger the clear at CBAI level.
Apply change from NetBSD 1.28.2.37 to remove the old clear code too.

Version 0.11. Tagged as 'XHCIDriver-0_11'
@
text
@d40 1
@


1.1
log
@Initial revision
@
text
@d80 4
a83 1
/* Timeout abort pipe */
@


1.1.1.1
log
@Import of XHCIDriver
@
text
@@
