head	1.9;
access;
symbols
	MUSBDriver-0_35:1.9
	MUSBDriver-0_34:1.9
	MUSBDriver-0_33:1.8
	MUSBDriver-0_32:1.8
	MUSBDriver-0_31:1.7
	MUSBDriver-0_30:1.7
	MUSBDriver-0_29:1.7
	MUSBDriver-0_28:1.7
	MUSBDriver-0_27:1.6
	MUSBDriver-0_26:1.6
	MUSBDriver-0_25:1.6
	MUSBDriver-0_24:1.6
	MUSBDriver-0_23:1.6
	MUSBDriver-0_22:1.5
	MUSBDriver-0_21:1.4
	MUSBDriver-0_20:1.4
	MUSBDriver-0_19:1.4
	MUSBDriver-0_18:1.4
	MUSBDriver-0_17:1.4
	MUSBDriver-0_16:1.4
	MUSBDriver-0_15:1.3
	MUSBDriver-0_14:1.2
	MUSBDriver-0_13:1.2
	MUSBDriver-0_12:1.2
	MUSBDriver-0_11:1.1;
locks; strict;
comment	@# @;


1.9
date	2017.11.25.09.53.03;	author rool;	state Exp;
branches;
next	1.8;
commitid	SGxBNziFzcLEVogA;

1.8
date	2017.09.23.09.01.54;	author rool;	state Exp;
branches;
next	1.7;
commitid	6rXidvVzktBEFi8A;

1.7
date	2016.12.17.10.42.20;	author rool;	state Exp;
branches;
next	1.6;
commitid	CYGmihDmIHN6ekyz;

1.6
date	2015.08.21.20.09.38;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	AR6BOUEtVfUgVayy;

1.5
date	2014.06.01.13.58.16;	author jlee;	state Exp;
branches;
next	1.4;
commitid	8OjtcW0RnvIJcPCx;

1.4
date	2011.12.04.19.19.11;	author jlee;	state Exp;
branches;
next	1.3;
commitid	a8y12AqmzdBneUJv;

1.3
date	2011.08.22.22.43.50;	author jlee;	state Exp;
branches;
next	1.2;
commitid	XF0NP2x7l03QHywv;

1.2
date	2011.05.22.20.32.28;	author jlee;	state Exp;
branches;
next	1.1;
commitid	ojDCXEOv6C57WIkv;

1.1
date	2011.04.11.23.25.35;	author jlee;	state Exp;
branches;
next	;
commitid	6pcEoJPvdLzddtfv;


desc
@@


1.9
log
@Root hub interval correction
Detail:
  HSHUBSTT use 12 (see DWCDriver-0_33).
Admin:
  Found by pattern matching.

Version 0.34. Tagged as 'MUSBDriver-0_34'
@
text
@/*
 * Copyright (c) 2004, 2009 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net), Charles M. Hannum, and
 * Jeffrey Lee (me@@phlamethrower.co.uk)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "modhead.h"
#include "swis.h"
#include "callx/callx.h"
#include <limits.h>
#include <machine/bus.h>

#include <sys/malloc.h>
#include <sys/queue.h>
#include <sys/types.h>
#include <sys/systm.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>

#include "Global/RISCOS.h"
#include "Global/HALEntries.h"
#include "cmodule.h"
#include "tboxlibint/messages.h"

/* Have to avoid including stdio as there's a clash with the BSD stuff */
#define __stdio_h

#include "musb.h"
#include "musb_util.h"
#include "musb_usb.h"

/*

				Software root hub

*/

static const usb_device_descriptor_t musb_devd = {
	USB_DEVICE_DESCRIPTOR_SIZE,
	UDESC_DEVICE,		/* type */
	{0x00, 0x02},		/* USB version */
	UDCLASS_HUB,		/* class */
	UDSUBCLASS_HUB,		/* subclass */
	UDPROTO_HSHUBSTT,	/* protocol */
	64,			/* max packet */
	{0},{0},{0x00,0x01},	/* device id */
	1,2,0,			/* string indicies */
	1			/* # of configurations */
};

static const usb_device_qualifier_t musb_odevd = {
	USB_DEVICE_DESCRIPTOR_SIZE,
	UDESC_DEVICE_QUALIFIER,	/* type */
	{0x00, 0x02},		/* USB version */
	UDCLASS_HUB,		/* class */
	UDSUBCLASS_HUB,		/* subclass */
	UDPROTO_FSHUB,		/* protocol */
	64,			/* max packet */
	1,			/* # of configurations */
	0
};

static const usb_config_descriptor_t musb_confd = {
	USB_CONFIG_DESCRIPTOR_SIZE,
	UDESC_CONFIG,
	{USB_CONFIG_DESCRIPTOR_SIZE +
	 USB_INTERFACE_DESCRIPTOR_SIZE +
	 USB_ENDPOINT_DESCRIPTOR_SIZE},
	1,
	1,
	0,
	UC_SELF_POWERED,
	0			/* max power */
};

static const usb_interface_descriptor_t musb_ifcd = {
	USB_INTERFACE_DESCRIPTOR_SIZE,
	UDESC_INTERFACE,
	0,
	0,
	1,
	UICLASS_HUB,
	UISUBCLASS_HUB,
	UIPROTO_HSHUBSTT,
	0
};

static const usb_endpoint_descriptor_t musb_endpd = {
	USB_ENDPOINT_DESCRIPTOR_SIZE,
	UDESC_ENDPOINT,
	UE_DIR_IN | MUSB_INTR_ENDPT,
	UE_INTERRUPT,
	{8, 0},			/* max packet */
	12
};

static const usb_hub_descriptor_t musb_hubd = {
	USB_HUB_DESCRIPTOR_SIZE,
	UDESC_HUB,
	0,
	{0,0},
	0,
	0,
	{0},
};

usbd_status
musb_root_ctrl_transfer(usbd_xfer_handle xfer)
{
	usbd_status err;

	/* Insert last in queue. */
	err = usb_insert_transfer(xfer);
	if (err)
		return (err);

	/* Pipe isn't running, start first */
	return (musb_root_ctrl_start(SIMPLEQ_FIRST(&xfer->pipe->queue)));
}

usbd_status
musb_root_ctrl_start(usbd_xfer_handle xfer)
{
	musb_softc_t *sc = (musb_softc_t *)xfer->pipe->device->bus;
	usb_device_request_t *req;
	void *buf = NULL;
	int s, len, value, index, l, totlen = 0;
	usb_port_status_t ps;
	usb_hub_descriptor_t hubd;
	usb_device_descriptor_t devd;
	usb_config_descriptor_t confd;
	usbd_status err;
	int devctl,power;
	char name[USB_MAX_STRING_LEN];
	volatile musb_regs *musb_base = sc->musb_base;

#ifdef DIAGNOSTIC
	if (!(xfer->rqflags & URQ_REQUEST))
		/* XXX panic */
		return (USBD_INVAL);
#endif
	req = &xfer->request;

        DPRINTFN(4,("musb_root_ctrl_start: type=0x%02x request=%02x\n",
		    req->bmRequestType, req->bRequest));

	len = UGETW(req->wLength);
	value = UGETW(req->wValue);
	index = UGETW(req->wIndex);

	if (len != 0)
		buf = KERNADDR(&xfer->dmabuf, 0);

#define C(x,y) ((x) | ((y) << 8))
	switch(C(req->bRequest, req->bmRequestType)) {
	case C(UR_CLEAR_FEATURE, UT_WRITE_DEVICE):
	case C(UR_CLEAR_FEATURE, UT_WRITE_INTERFACE):
	case C(UR_CLEAR_FEATURE, UT_WRITE_ENDPOINT):
		/*
		 * DEVICE_REMOTE_WAKEUP and ENDPOINT_HALT are no-ops
		 * for the integrated root hub.
		 */
		break;
	case C(UR_GET_CONFIG, UT_READ_DEVICE):
		if (len > 0) {
			*(u_int8_t *)buf = sc->sc_conf;
			totlen = 1;
		}
		break;
	case C(UR_GET_DESCRIPTOR, UT_READ_DEVICE):
                DPRINTFN(8,("musb_root_ctrl_start: wValue=0x%04x\n", value));
		switch(value >> 8) {
		case UDESC_DEVICE:
			if ((value & 0xff) != 0) {
				err = USBD_IOERROR;
				goto ret;
			}
			devd = musb_devd;
			USETW(devd.idVendor, sc->sc_id_vendor);
			totlen = l = min(len, USB_DEVICE_DESCRIPTOR_SIZE);
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
			memcpy(buf, (void*) &devd, l);
#else
			memcpy(buf, &devd, l);
#endif
			break;
		/*
		 * We can't really operate at another speed, but the spec says
		 * we need this descriptor.
		 */
		case UDESC_DEVICE_QUALIFIER:
			if ((value & 0xff) != 0) {
				err = USBD_IOERROR;
				goto ret;
			}
			totlen = l = min(len, USB_DEVICE_DESCRIPTOR_SIZE);
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
			memcpy(buf, (void*) &musb_odevd, l);
#else
			memcpy(buf, &musb_odevd, l);
#endif
			break;
		/*
		 * We can't really operate at another speed, but the spec says
		 * we need this descriptor.
		 */
		case UDESC_OTHER_SPEED_CONFIGURATION:
		case UDESC_CONFIG:
			if ((value & 0xff) != 0) {
				err = USBD_IOERROR;
				goto ret;
			}
			confd = musb_confd;
			confd.bDescriptorType = value >> 8;
			totlen = l = min(len, USB_CONFIG_DESCRIPTOR_SIZE);
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
			memcpy(buf, (void*) &confd, l);
#else
			memcpy(buf, &confd, l);
#endif
			buf = (char *)buf + l;
			len -= l;
			l = min(len, USB_INTERFACE_DESCRIPTOR_SIZE);
			totlen += l;
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
			memcpy(buf, (void*) &musb_ifcd, l);
#else
			memcpy(buf, &musb_ifcd, l);
#endif
			buf = (char *)buf + l;
			len -= l;
			l = min(len, USB_ENDPOINT_DESCRIPTOR_SIZE);
			totlen += l;
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
			memcpy(buf, (void*)&musb_endpd, l);
#else
			memcpy(buf, &musb_endpd, l);
#endif
			break;
		case UDESC_STRING:
			if (len == 0)
				break;
			*(u_int8_t *)buf = 0;
			totlen = 1;
			switch (value & 0xff) {
                        case 0: /* Language table */
                                totlen = musb_str(buf, len, "\001");
                                break;
			case 1: /* Vendor */
				totlen = musb_str(buf, len, sc->sc_vendor);
				break;
			case 2: /* Product */
				value = sizeof(name);
				messages_file_lookup("RHub", name, &value, 0);
				totlen = musb_str(buf, len, name);
				break;
			}
			break;
		default:
			err = USBD_IOERROR;
			goto ret;
		}
		break;
	case C(UR_GET_INTERFACE, UT_READ_INTERFACE):
		if (len > 0) {
			*(u_int8_t *)buf = 0;
			totlen = 1;
		}
		break;
	case C(UR_GET_STATUS, UT_READ_DEVICE):
		if (len > 1) {
			USETW(((usb_status_t *)buf)->wStatus,UDS_SELF_POWERED);
			totlen = 2;
		}
		break;
	case C(UR_GET_STATUS, UT_READ_INTERFACE):
	case C(UR_GET_STATUS, UT_READ_ENDPOINT):
		if (len > 1) {
			USETW(((usb_status_t *)buf)->wStatus, 0);
			totlen = 2;
		}
		break;
	case C(UR_SET_ADDRESS, UT_WRITE_DEVICE):
		if (value >= USB_MAX_DEVICES) {
			err = USBD_IOERROR;
			goto ret;
		}
		sc->sc_addr = value;
		break;
	case C(UR_SET_CONFIG, UT_WRITE_DEVICE):
		if (value != 0 && value != 1) {
			err = USBD_IOERROR;
			goto ret;
		}
		sc->sc_conf = value;
		break;
	case C(UR_SET_DESCRIPTOR, UT_WRITE_DEVICE):
		break;
	case C(UR_SET_FEATURE, UT_WRITE_DEVICE):
	case C(UR_SET_FEATURE, UT_WRITE_INTERFACE):
	case C(UR_SET_FEATURE, UT_WRITE_ENDPOINT):
		err = USBD_IOERROR;
		goto ret;
	case C(UR_SET_INTERFACE, UT_WRITE_INTERFACE):
		break;
	case C(UR_SYNCH_FRAME, UT_WRITE_ENDPOINT):
		break;
	/* Hub requests */
	case C(UR_CLEAR_FEATURE, UT_WRITE_CLASS_DEVICE):
		break;
	case C(UR_CLEAR_FEATURE, UT_WRITE_CLASS_OTHER):
                DPRINTFN(8, ("musb_root_ctrl_start: UR_CLEAR_PORT_FEATURE "
			     "port=%d feature=%d\n",
			     index, value));
		if (index != 1) {
			err = USBD_IOERROR;
			goto ret;
		}
		switch(value) {
		case UHF_PORT_ENABLE:
			break;
		case UHF_PORT_SUSPEND:
			// todo
			break;
		case UHF_PORT_POWER:
			// todo
			break;
		case UHF_PORT_TEST:
                        DPRINTFN(2,("musb_root_ctrl_start: clear port test "
				    "%d\n", index));
			break;
		case UHF_PORT_INDICATOR:
                        DPRINTFN(2,("musb_root_ctrl_start: clear port ind "
				    "%d\n", index));
			break;
		case UHF_C_PORT_CONNECTION:
			break;
		case UHF_C_PORT_ENABLE:
			break;
		case UHF_C_PORT_SUSPEND:
			/* how? */
			break;
		case UHF_C_PORT_OVER_CURRENT:
			break;
		case UHF_C_PORT_RESET:
			break;
		default:
			err = USBD_IOERROR;
			goto ret;
		}
		sc->port_status &= ~(1 << value);
		break;
	case C(UR_GET_DESCRIPTOR, UT_READ_CLASS_DEVICE):
                if ((value & 0xff) != 0) {
			err = USBD_IOERROR;
			goto ret;
		}
		hubd = musb_hubd;
		hubd.bNbrPorts = 1;
		USETW(hubd.wHubCharacteristics,UHD_PWR_INDIVIDUAL | UHD_OC_NONE);
		hubd.bPwrOn2PwrGood = 5;
		hubd.DeviceRemovable[0] = 0;
		hubd.bDescLength = USB_HUB_DESCRIPTOR_SIZE + 1;
		l = min(len, hubd.bDescLength);
		totlen = l;
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
		memcpy(buf, (void*) &hubd, l);
#else
		memcpy(buf, &hubd, l);
#endif
		break;
	case C(UR_GET_STATUS, UT_READ_CLASS_DEVICE):
		if (len != 4) {
			err = USBD_IOERROR;
			goto ret;
		}
		memset(buf, 0, len); /* ? XXX */
		totlen = len;
		break;
	case C(UR_GET_STATUS, UT_READ_CLASS_OTHER):
                DPRINTFN(8,("musb_root_ctrl_start: get port status i=%d\n",
			    index));
		if (index != 1) {
			err = USBD_IOERROR;
			goto ret;
		}
		if (len != 4) {
			err = USBD_IOERROR;
			goto ret;
		}
		/* Deduce the port status */
		devctl = musb_base->devctl;
		power = musb_base->common.power;
		sc->port_status = musb_calc_port_status(devctl,power,sc->port_status);
		DPRINTFN(8,("musb_root_ctrl_start: Status %04x change %04x\n",sc->port_status&0xffff,sc->port_status>>16));
		USETW(ps.wPortStatus, sc->port_status);
		USETW(ps.wPortChange, sc->port_status>>16);
		l = min(len, sizeof ps);
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
		memcpy(buf, (void*) &ps, l);
#else
		memcpy(buf, &ps, l);
#endif
		totlen = l;
		break;
	case C(UR_SET_DESCRIPTOR, UT_WRITE_CLASS_DEVICE):
		err = USBD_IOERROR;
		goto ret;
	case C(UR_SET_FEATURE, UT_WRITE_CLASS_DEVICE):
		break;
	case C(UR_SET_FEATURE, UT_WRITE_CLASS_OTHER):
		if (index != 1) {
			err = USBD_IOERROR;
			goto ret;
		}
//		port = EHCI_PORTSC(index);
//		v = EOREAD4(sc, port) &~ EHCI_PS_CLEAR;
		switch(value) {
		case UHF_PORT_ENABLE:
//			EOWRITE4(sc, port, v | EHCI_PS_PE);
			break;
		case UHF_PORT_SUSPEND:
//			EOWRITE4(sc, port, v | EHCI_PS_SUSP);
			break;
		case UHF_PORT_RESET:
                        DPRINTFN(5,("musb_root_ctrl_start: reset port %d\n",
				    index));
			/* Begin reset signalling */
			if(musb_base->devctl & DEVCTL_HOSTMODE)
			{
				musb_base->common.power |= POWER_RESET | POWER_HSEN; /* todo - should usb driver control HSEN? */
				/* Wait 20ms for reset to occur */
				delay(20000);
				/* Now clear the reset bit, and all should be good */
				musb_base->common.power &= ~POWER_RESET;
				DPRINTF(("musb port %d reset\n", index));
				sc->port_status |= 1 << UHF_C_PORT_RESET;
			}
			else
			{
				DPRINTF(("musb port %d reset ignored - not in host mode!\n", index));
				err = USBD_IOERROR;
				goto ret;
			}
			break;
		case UHF_PORT_POWER:
                        DPRINTFN(2,("musb_root_ctrl_start: set port power "
				    "%d\n", index));
//			EOWRITE4(sc, port, v | EHCI_PS_PP);
			break;
		case UHF_PORT_TEST:
                        DPRINTFN(2,("musb_root_ctrl_start: set port test "
				    "%d\n", index));
			break;
		case UHF_PORT_INDICATOR:
                        DPRINTFN(2,("musb_root_ctrl_start: set port ind "
				    "%d\n", index));
//			EOWRITE4(sc, port, v | EHCI_PS_PIC);
			break;
		default:
			err = USBD_IOERROR;
			goto ret;
		}
//		sc->port_status |= (1 << value);
		break;
	case C(UR_CLEAR_TT_BUFFER, UT_WRITE_CLASS_OTHER):
	case C(UR_RESET_TT, UT_WRITE_CLASS_OTHER):
	case C(UR_GET_TT_STATE, UT_READ_CLASS_OTHER):
	case C(UR_STOP_TT, UT_WRITE_CLASS_OTHER):
		break;
	default:
		err = USBD_IOERROR;
		goto ret;
	}
	xfer->actlen = totlen;
	err = USBD_NORMAL_COMPLETION;
ret:
	xfer->status = err;
	s = splusb();
	usb_transfer_complete(xfer);
	splx(s);
	return (USBD_IN_PROGRESS);
}
#undef C

/* Abort a root control request. */
void
musb_root_ctrl_abort(usbd_xfer_handle xfer)
{
	/* Nothing to do, all transfers are synchronous. */
	NOTUSED(xfer);
}

/* Close the root pipe. */
void
musb_root_ctrl_close(usbd_pipe_handle pipe)
{
	DPRINTF(("musb_root_ctrl_close\n"));
	/* Nothing to do. */
	NOTUSED(pipe);
}

void
musb_root_intr_done(usbd_xfer_handle xfer)
{
	xfer->hcpriv = NULL;
}

usbd_status
musb_root_intr_transfer(usbd_xfer_handle xfer)
{
	usbd_status err;

	/* Insert last in queue. */
	err = usb_insert_transfer(xfer);
	if (err)
		return (err);

	/* Pipe isn't running, start first */
	return (musb_root_intr_start(SIMPLEQ_FIRST(&xfer->pipe->queue)));
}

usbd_status
musb_root_intr_start(usbd_xfer_handle xfer)
{
	usbd_pipe_handle pipe = xfer->pipe;
	musb_softc_t *sc = (musb_softc_t *)pipe->device->bus;

	sc->sc_intrxfer = xfer;

	return (USBD_IN_PROGRESS);
}

/* Abort a root interrupt request. */
void
musb_root_intr_abort(usbd_xfer_handle xfer)
{
	int s;

	if (xfer->pipe->intrxfer == xfer) {
		DPRINTF(("musb_root_intr_abort: remove\n"));
		xfer->pipe->intrxfer = NULL;
	}
	xfer->status = USBD_CANCELLED;
	s = splusb();
	usb_transfer_complete(xfer);
	splx(s);
}

/* Close the root pipe. */
void
musb_root_intr_close(usbd_pipe_handle pipe)
{
	musb_softc_t *sc = (musb_softc_t *)pipe->device->bus;

	DPRINTF(("musb_root_intr_close\n"));

	sc->sc_intrxfer = NULL;
}

void
musb_root_ctrl_done(usbd_xfer_handle xfer)
{
	xfer->hcpriv = NULL;
}

@


1.8
log
@Remove HAL library variant
Detail:
  Simplify the makefile by not building a HAL variant.
  cmodule.c: 2 fewer warnings
  musb.c/musb_debug.c/musb_peri.c/musb_root.c/musb_util.c/tps.c: remove usbhal.h include
  cmodule.h/musb_usb.c: USBHAL is no longer defined
  CMHG file changed to make Makefile
Admin:
  Submission for USB bounty.

Version 0.32. Tagged as 'MUSBDriver-0_32'
@
text
@d127 1
a127 1
	255
@


1.7
log
@Internationalised
Detail:
  Add support for standalone messages registration, and actually use the messages rather than just exporting them in ROM builds.
  Changed to use allocated error bases rather than 0.
  Sync with other HC for ease of comparison where possible.
Admin:
  Submission for USB bounty.
  Tested on a BBxM.

Version 0.28. Tagged as 'MUSBDriver-0_28'
@
text
@a37 3
#ifdef USBHAL
#include <dev/usb/usbhal.h>
#else
a40 1
#endif
a53 1
#include "Global/Services.h"
@


1.6
log
@Don't reach into USBDriver's back pocket
cmodule.c:
  Use USBDriver.h from interface exports
Makefile:
  Remove duplicated libs from debug build
  Remove relative reference to NetBSD component from VPATH
!MkDebug:
  Select debug target so the right compiler switches are used
musb.c/musb_debug.c/musb_peri.c/musb_root.c/musb_usb.c/musb_util.c/tps.c:
  Unused reference to USBDriver.h removed
Built, but not tested.

Version 0.23. Tagged as 'MUSBDriver-0_23'
@
text
@d172 1
d291 3
a293 1
				totlen = musb_str(buf, len, "MUSBMHDRC root hub");
@


1.5
log
@Fix to allow building against NetBSD-0_85
Detail:
  c/cmodule - Don't use NetBSD/build/service.h, it no longer exists. Use the exported USB/USBDevFS.h instead. Fix service call reason codes to use USBDevFS names.
  c/musb, c/musb_debug, c/musb_hal, c/musb_peri, c/musb_root, c/musb_usb, c/musb_util, c/tps - Strip redundant #includes
Admin:
  Tested in OMAP3 ROM build
  Build output is binary-identical to previous version
  Requires NetBSD-0_85


Version 0.22. Tagged as 'MUSBDriver-0_22'
@
text
@a44 1
#include "../../NetBSD/build/USBDriver.h"
@


1.4
log
@Fix memory overwrites in root hub emulation
Detail:
  c/musb_root - Fixed device descriptor and config descriptor reads writing outside the destination buffer if the buffer was small enough.
Admin:
  Tested in OMAP3 ROM


Version 0.16. Tagged as 'MUSBDriver-0_16'
@
text
@a66 2
#include "../../NetBSD/build/service.h"

@


1.3
log
@Fix data aborts in HAL build
Detail:
  c/musb_peri, c/musb_root - Fixed some code in the root hub emulation that was writing to a global struct before copying it into the destination buffer. Although this works fine in ROM modules, it was causing data aborts in the HAL build due to lack of automatic RW data relocation by the compiler.
  c/musb - Removed reference to an old extern variable
Admin:
  Tested on rev C2 BB


Version 0.15. Tagged as 'MUSBDriver-0_15'
@
text
@d171 2
d218 2
d222 1
a222 1
			memcpy(buf, (void*) &musb_devd, l);
d224 1
a224 1
			memcpy(buf, &musb_devd, l);
a225 1
			USETW(((usb_device_descriptor_t *) buf)->idVendor, sc->sc_id_vendor);
d253 2
d257 1
a257 1
			memcpy(buf, (void*) &musb_confd, l);
d259 1
a259 1
			memcpy(buf, &musb_confd, l);
a260 2
			((usb_config_descriptor_t *)buf)->bDescriptorType =
				value >> 8;
@


1.2
log
@Add support for HAL builds of MUSBDriver
Detail:
  Makefile - Now builds a HAL-compatible static library during the export libs phase
  !MkHAL,fd7 - Handy script for building the HAL lib
  c/musb_hal - HAL version of cmodule.c
  c/musb, c/musb_debug, c/musb_peri, c/musb_root, c/musb_usb, c/musb_util, c/tps, h/cmodule, h/musb, h/musb_util, h/tps - Changed to support the HAL build. Biggest change was getting rid of all global vars; everything is now done via the bus ptr instead.
  c/port - Removed microtime and moved riscos_irq_clear here, to match change made in main USB drivers
Admin:
  HAL & non-HAL versions tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook
  Needs latest Kernel & NetBSD USB drivers


Version 0.12. Tagged as 'MUSBDriver-0_12'
@
text
@d79 1
a79 1
static usb_device_descriptor_t musb_devd = {
d92 1
a92 1
static usb_device_qualifier_t musb_odevd = {
d104 1
a104 1
static usb_config_descriptor_t musb_confd = {
d117 1
a117 1
static usb_interface_descriptor_t musb_ifcd = {
d129 1
a129 1
static usb_endpoint_descriptor_t musb_endpd = {
d138 1
a138 1
static usb_hub_descriptor_t musb_hubd = {
a216 1
			USETW(musb_devd.idVendor, sc->sc_id_vendor);
d222 1
@


1.1
log
@Restructure MUSBDriver source code, rework host mode endpoint handling, plus other misc changes
Detail:
  c/musb_debug - New file containing debug code.
  c/musb_peri - Contains the code for handling peripheral mode, taken from c/musb
  c/musb_root - Contains the code for handling the USBDriver-required 'soft' hub, taken from c/musb
  c/musb_usb - Contains initialisation code and other misc USBDriver-related code, mostly taken from c/musb
  c/musb_util - Misc utility functions from c/musb
  h/musb_util, h/musb_usb - A couple of new header files to help with breaking things up. Might make sense to break h/musb_usb down further (or just consolidate everything back into h/musb)
  c/musb - Stripped out pretty much everything except code related to host-mode endpoint and interrupt handling. Instances of the new musb_multiplexer struct are used to handle endpoint allocation, and allocation is now performed on a per-usbd_xfer basis instead of on a per-pipe basis. This should allow the code to cope better with situations where the number of pipes is greater than the number of physical endpoints, although much work is still required.
  c/cmodule, c/port, c/tps, h/cmodule, h/musb - Misc tweaks and changes
Admin:
  Tested on rev A2 BB-xM.


Version 0.11. Tagged as 'MUSBDriver-0_11'
@
text
@d37 4
d42 3
a45 1
#include "swis.h"
a60 1
#include "callx/callx.h"
a67 1
#include "oslib/devicefs.h"
d173 1
@

