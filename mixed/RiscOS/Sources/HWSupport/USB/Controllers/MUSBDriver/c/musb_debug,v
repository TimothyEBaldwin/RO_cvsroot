head	1.7;
access;
symbols
	MUSBDriver-0_35:1.7
	MUSBDriver-0_34:1.7
	MUSBDriver-0_33:1.7
	MUSBDriver-0_32:1.7
	MUSBDriver-0_31:1.6
	MUSBDriver-0_30:1.6
	MUSBDriver-0_29:1.6
	MUSBDriver-0_28:1.6
	MUSBDriver-0_27:1.5
	MUSBDriver-0_26:1.5
	MUSBDriver-0_25:1.5
	MUSBDriver-0_24:1.5
	MUSBDriver-0_23:1.5
	MUSBDriver-0_22:1.4
	MUSBDriver-0_21:1.3
	MUSBDriver-0_20:1.3
	MUSBDriver-0_19:1.3
	MUSBDriver-0_18:1.3
	MUSBDriver-0_17:1.3
	MUSBDriver-0_16:1.3
	MUSBDriver-0_15:1.3
	MUSBDriver-0_14:1.3
	MUSBDriver-0_13:1.3
	MUSBDriver-0_12:1.2
	MUSBDriver-0_11:1.1;
locks; strict;
comment	@# @;


1.7
date	2017.09.23.09.01.54;	author rool;	state Exp;
branches;
next	1.6;
commitid	6rXidvVzktBEFi8A;

1.6
date	2016.12.17.10.40.24;	author rool;	state Exp;
branches;
next	1.5;
commitid	RYu6RVCw6APddkyz;

1.5
date	2015.08.21.20.09.38;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	AR6BOUEtVfUgVayy;

1.4
date	2014.06.01.13.58.15;	author jlee;	state Exp;
branches;
next	1.3;
commitid	8OjtcW0RnvIJcPCx;

1.3
date	2011.07.11.20.15.55;	author jlee;	state Exp;
branches;
next	1.2;
commitid	Bnjdl5h4idKMe9rv;

1.2
date	2011.05.22.20.32.28;	author jlee;	state Exp;
branches;
next	1.1;
commitid	ojDCXEOv6C57WIkv;

1.1
date	2011.04.11.23.25.35;	author jlee;	state Exp;
branches;
next	;
commitid	6pcEoJPvdLzddtfv;


desc
@@


1.7
log
@Remove HAL library variant
Detail:
  Simplify the makefile by not building a HAL variant.
  cmodule.c: 2 fewer warnings
  musb.c/musb_debug.c/musb_peri.c/musb_root.c/musb_util.c/tps.c: remove usbhal.h include
  cmodule.h/musb_usb.c: USBHAL is no longer defined
  CMHG file changed to make Makefile
Admin:
  Submission for USB bounty.

Version 0.32. Tagged as 'MUSBDriver-0_32'
@
text
@/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "modhead.h"
#include "swis.h"
#include "callx/callx.h"
#include <stdlib.h>
#include <string.h>
#include <stdlib.h>
#include <limits.h>
#include <stddef.h>
#include <machine/bus.h>

#include <sys/queue.h>
#include <sys/types.h>
#include <sys/systm.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>

#include "Global/RISCOS.h"
#include "Global/HALEntries.h"
#include "cmodule.h"

/* Have to avoid including stdio as there's a clash with the BSD stuff */
#define __stdio_h

#include "DebugLib/DebugLib.h"

#include "musb.h"

#ifdef MUSB_DEBUG
int musbdebug=20;
extern musb_softc_t musb_soft;

char *musb_dump_regs(char *buf)
{
	volatile musb_regs *musb_base = musb_soft.musb_base;
	buf += sprintf(buf,"FADDR: %02x\n",musb_base->common.faddr);
	buf += sprintf(buf,"POWER: %02x\n",musb_base->common.power);
	buf += sprintf(buf,"FRAME: %04x\n",musb_base->common.frame);
	buf += sprintf(buf,"INDEX: %02x\n",musb_base->common.index);
	buf += sprintf(buf,"TESTMODE: %02x\n",musb_base->common.testmode);
	buf += sprintf(buf,"DEVCTL: %02x\n",musb_base->devctl);
	buf += sprintf(buf,"ULPIVBUSCONTROL: %02x\n",musb_base->ulpivbuscontrol);
	buf += sprintf(buf,"ULPIUTMICONTROL: %02x\n",musb_base->ulpiutmicontrol);
	buf += sprintf(buf,"ULPIINTMASK: %02x\n",musb_base->ulpiintmask);
	buf += sprintf(buf,"ULPIINTSRC: %02x\n",musb_base->ulpiintsrc);
	buf += sprintf(buf,"OTG_REVISION: %08x\n",musb_base->otg_revision);
	buf += sprintf(buf,"OTG_SYSCONFIG: %08x\n",musb_base->otg_sysconfig);
	buf += sprintf(buf,"OTG_SYSSTATUS: %08x\n",musb_base->otg_sysstatus);
	buf += sprintf(buf,"OTG_INTERFSEL: %08x\n",musb_base->otg_interfsel);
	buf += sprintf(buf,"OTG_FORCESTDBY: %08x\n",musb_base->otg_forcestdby);
	buf += sprintf(buf,"EP TXMAXP TXCSR TXTYPE TXINTERVAL RXMAXP RXCSR RXCOUNT RXTYPE RXINTERVAL\n");
	for(int i=0;i<16;i++)
		buf += sprintf(buf,"%2d %04x   %04x  %02x     %02x         %04x   %04x  %04x    %02x     %02x\n",i,musb_base->csr.host_ep[i].txmaxp,musb_base->csr.host_ep[i].host_txcsr,musb_base->csr.host_ep[i].host_txtype,musb_base->csr.host_ep[i].host_txinterval,musb_base->csr.host_ep[i].rxmaxp,musb_base->csr.host_ep[i].host_rxcsr,musb_base->csr.host_ep[i].rxcount,musb_base->csr.host_ep[i].host_rxtype,musb_base->csr.host_ep[i].host_rxinterval);
	return buf;
}

char *musb_dump_pipe(char *buf,struct musb_pipe *epipe)
{
	buf += sprintf(buf,"  Pipe %p run %d ep %d toggle %d xfer %p null_packet %d remain %d buf %p\n",epipe,epipe->running,epipe->ep,epipe->toggle,SIMPLEQ_FIRST(&epipe->pipe.queue),epipe->null_packet,epipe->remain,epipe->buf);
	epipe = SIMPLEQ_NEXT(epipe,multiq);
	if(epipe)
		return musb_dump_pipe(buf,epipe);
	return buf;
}

char *musb_dump_mp(char *buf,const char *name,struct musb_multiplexer *mp)
{
	struct musb_pipe *epipe = SIMPLEQ_FIRST(&mp->waitq);
	buf += sprintf(buf,"mp %p tx %d idle %04x interval %d queue %p\n",mp,mp->tx,mp->idle_mask,mp->interval,epipe);
	if(epipe)
		return musb_dump_pipe(buf,epipe);
	return buf;
}

char *musb_dump_state(char *buf)
{
	static const char *peri_ep0_state[] = { "Idle","TX","RX","Status","Error" };
	static const char *host_ep0_state[] = { "Idle","Setup","In data","Out data","In status","Out status" };
	volatile musb_regs *musb_base = musb_soft.musb_base;
	int devctl = musb_base->devctl;
	int isbdevice = devctl & DEVCTL_BDEVICE;
	int ishost = devctl & DEVCTL_HOSTMODE;
	buf += sprintf(buf,"DEVCTL: %02x (%c %s)\n",devctl,(isbdevice?'B':'A'),(ishost?"Host":"Peripheral"));
	buf += sprintf(buf,"Port status: %04x change %04x (Speed: %s)\n\n",musb_soft.port_status&0xffff,musb_soft.port_status>>16,(musb_soft.port_status&UPS_HIGH_SPEED?"High":(musb_soft.port_status&UPS_LOW_SPEED?"Low":"Full")));
	buf += sprintf(buf,"Peripheral mode:\nState %d (%s)\nAddress %02x%s\n\n",musb_soft.peri_ep0_state,peri_ep0_state[musb_soft.peri_ep0_state],musb_soft.peri_addr,(musb_soft.peri_addr_pending?" (pending)":""));
	buf += sprintf(buf,"Host mode: EP 0 state %d (%s)\n",musb_soft.host_ep0_state,host_ep0_state[musb_soft.host_ep0_state]);
	for(int i=0;i<16;i++)
	{
		if(musb_soft.host_tx[i])
		{
			buf += sprintf(buf,"EP%d TX = pipe %p mp %p\n",i,musb_soft.host_tx[i],musb_soft.host_tx[i]->multiplexer);
			buf = musb_dump_pipe(buf,musb_soft.host_tx[i]);
		}
		if(musb_soft.host_rx[i])
		{
			buf += sprintf(buf,"EP%d RX = pipe %p mp %p\n",i,musb_soft.host_rx[i],musb_soft.host_rx[i]->multiplexer);
			buf = musb_dump_pipe(buf,musb_soft.host_rx[i]);
		}
	}
	buf = musb_dump_mp(buf,"mp_ep0",&musb_soft.mp_ep0);
	buf = musb_dump_mp(buf,"mp_bulktx",&musb_soft.mp_bulktx);
	buf = musb_dump_mp(buf,"mp_bulkrx",&musb_soft.mp_bulkrx);
	buf = musb_dump_mp(buf,"mp_iitx",&musb_soft.mp_iitx);
	buf = musb_dump_mp(buf,"mp_iirx",&musb_soft.mp_iirx);
	return buf;
}

void musb_assert_fail(const char *file,int line,const char *reason)
{
	int s = _kernel_irqs_disabled();
	_kernel_irqs_off();
	static char buf[32768];
	char *bufpos = buf;
	bufpos += sprintf(bufpos,"*** Assertion failed ***\nFile %s\nLine %d\nReason %s\n",file,line,reason);
	bufpos += sprintf(bufpos,"IRQs %d\n\nHardware regs:\n",s);
	bufpos = musb_dump_regs(bufpos);
	bufpos += sprintf(bufpos,"\nState:\n");
	bufpos = musb_dump_state(bufpos);
	bufpos += sprintf(bufpos,"\nDebug log:\n");
	/* Dump it out over the serial port */
	bufpos = buf;
	while(*bufpos)
	{
		_swix(OS_Hardware,_IN(0)|_INR(8,9), *bufpos, 0, EntryNo_HAL_DebugTX);
		bufpos++;
	}
	_swix(OS_CLI,_IN(0),"*dadprint");
	/* Die */
	while(1) {};
}

#endif
@


1.6
log
@Remove unused include
Admin:
  Fewer depends. Not tagged.
@
text
@a15 3
#ifdef USBHAL
#include <dev/usb/usbhal.h>
#else
a18 1
#endif
a34 1
#include "Global/Services.h"
@


1.5
log
@Don't reach into USBDriver's back pocket
cmodule.c:
  Use USBDriver.h from interface exports
Makefile:
  Remove duplicated libs from debug build
  Remove relative reference to NetBSD component from VPATH
!MkDebug:
  Select debug target so the right compiler switches are used
musb.c/musb_debug.c/musb_peri.c/musb_root.c/musb_usb.c/musb_util.c/tps.c:
  Unused reference to USBDriver.h removed
Built, but not tested.

Version 0.23. Tagged as 'MUSBDriver-0_23'
@
text
@a41 1
#include "tboxlibint/messages.h"
@


1.4
log
@Fix to allow building against NetBSD-0_85
Detail:
  c/cmodule - Don't use NetBSD/build/service.h, it no longer exists. Use the exported USB/USBDevFS.h instead. Fix service call reason codes to use USBDevFS names.
  c/musb, c/musb_debug, c/musb_hal, c/musb_peri, c/musb_root, c/musb_usb, c/musb_util, c/tps - Strip redundant #includes
Admin:
  Tested in OMAP3 ROM build
  Build output is binary-identical to previous version
  Requires NetBSD-0_85


Version 0.22. Tagged as 'MUSBDriver-0_22'
@
text
@a22 1
#include "../../NetBSD/build/USBDriver.h"
@


1.3
log
@Fix NAK timeout handling
Detail:
  c/musb, c/musb_debug, h/musb - Fixed NAK timeouts to not be treated as errors. Attempted to make use of NAK timeouts for yielding to other pending transfers, but ran into difficulties getting the timeout condition to clear properly. Disabling NAK intervals/timeouts entirely seems to be the safest option for now.
Admin:
  Tested on rev C2 BB, rev A2 BB-xM


Version 0.13. Tagged as 'MUSBDriver-0_13'
@
text
@a48 2
#include "../../NetBSD/build/service.h"
#include "oslib/devicefs.h"
@


1.2
log
@Add support for HAL builds of MUSBDriver
Detail:
  Makefile - Now builds a HAL-compatible static library during the export libs phase
  !MkHAL,fd7 - Handy script for building the HAL lib
  c/musb_hal - HAL version of cmodule.c
  c/musb, c/musb_debug, c/musb_peri, c/musb_root, c/musb_usb, c/musb_util, c/tps, h/cmodule, h/musb, h/musb_util, h/tps - Changed to support the HAL build. Biggest change was getting rid of all global vars; everything is now done via the bus ptr instead.
  c/port - Removed microtime and moved riscos_irq_clear here, to match change made in main USB drivers
Admin:
  HAL & non-HAL versions tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook
  Needs latest Kernel & NetBSD USB drivers


Version 0.12. Tagged as 'MUSBDriver-0_12'
@
text
@d84 1
a84 1
	buf += sprintf(buf,"  Pipe %p run %d ep %d toggle %d xfer %p null_packet %d remain %d buf %p nakremain %d\n",epipe,epipe->running,epipe->ep,epipe->toggle,SIMPLEQ_FIRST(&epipe->pipe.queue),epipe->null_packet,epipe->remain,epipe->buf,epipe->nakremain);
@


1.1
log
@Restructure MUSBDriver source code, rework host mode endpoint handling, plus other misc changes
Detail:
  c/musb_debug - New file containing debug code.
  c/musb_peri - Contains the code for handling peripheral mode, taken from c/musb
  c/musb_root - Contains the code for handling the USBDriver-required 'soft' hub, taken from c/musb
  c/musb_usb - Contains initialisation code and other misc USBDriver-related code, mostly taken from c/musb
  c/musb_util - Misc utility functions from c/musb
  h/musb_util, h/musb_usb - A couple of new header files to help with breaking things up. Might make sense to break h/musb_usb down further (or just consolidate everything back into h/musb)
  c/musb - Stripped out pretty much everything except code related to host-mode endpoint and interrupt handling. Instances of the new musb_multiplexer struct are used to handle endpoint allocation, and allocation is now performed on a per-usbd_xfer basis instead of on a per-pipe basis. This should allow the code to cope better with situations where the number of pipes is greater than the number of physical endpoints, although much work is still required.
  c/cmodule, c/port, c/tps, h/cmodule, h/musb - Misc tweaks and changes
Admin:
  Tested on rev A2 BB-xM.


Version 0.11. Tagged as 'MUSBDriver-0_11'
@
text
@d15 4
d20 3
a23 1
#include "swis.h"
a41 1
#include "callx/callx.h"
d56 1
d60 1
d104 1
@

