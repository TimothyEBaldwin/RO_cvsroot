head	1.9;
access;
symbols
	MUSBDriver-0_35:1.9
	MUSBDriver-0_34:1.9
	MUSBDriver-0_33:1.9
	MUSBDriver-0_32:1.9
	MUSBDriver-0_31:1.8
	MUSBDriver-0_30:1.8
	MUSBDriver-0_29:1.8
	MUSBDriver-0_28:1.8
	MUSBDriver-0_27:1.7
	MUSBDriver-0_26:1.7
	MUSBDriver-0_25:1.7
	MUSBDriver-0_24:1.7
	MUSBDriver-0_23:1.7
	MUSBDriver-0_22:1.6
	MUSBDriver-0_21:1.5
	MUSBDriver-0_20:1.5
	MUSBDriver-0_19:1.5
	MUSBDriver-0_18:1.5
	MUSBDriver-0_17:1.4
	MUSBDriver-0_16:1.4
	MUSBDriver-0_15:1.4
	MUSBDriver-0_14:1.4
	MUSBDriver-0_13:1.4
	MUSBDriver-0_12:1.4
	MUSBDriver-0_11:1.3
	MUSBDriver-0_10:1.2
	MUSBDriver-0_09:1.2
	MUSBDriver-0_08:1.2
	MUSBDriver-0_07:1.2
	MUSBDriver-0_06:1.2
	MUSBDriver-0_05:1.1
	MUSBDriver-0_04:1.1
	MUSBDriver-0_03:1.1
	MUSBDriver-0_02:1.1;
locks; strict;
comment	@# @;


1.9
date	2017.09.23.09.01.54;	author rool;	state Exp;
branches;
next	1.8;
commitid	6rXidvVzktBEFi8A;

1.8
date	2016.12.17.10.40.24;	author rool;	state Exp;
branches;
next	1.7;
commitid	RYu6RVCw6APddkyz;

1.7
date	2015.08.21.20.09.38;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	AR6BOUEtVfUgVayy;

1.6
date	2014.06.01.13.58.16;	author jlee;	state Exp;
branches;
next	1.5;
commitid	8OjtcW0RnvIJcPCx;

1.5
date	2012.09.23.23.13.15;	author jlee;	state Exp;
branches;
next	1.4;
commitid	ZUic5Ks4MdeL4Ilw;

1.4
date	2011.05.22.20.32.28;	author jlee;	state Exp;
branches;
next	1.3;
commitid	ojDCXEOv6C57WIkv;

1.3
date	2011.04.11.23.25.35;	author jlee;	state Exp;
branches;
next	1.2;
commitid	6pcEoJPvdLzddtfv;

1.2
date	2010.06.28.21.12.38;	author jlee;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.06.20.51.04;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove HAL library variant
Detail:
  Simplify the makefile by not building a HAL variant.
  cmodule.c: 2 fewer warnings
  musb.c/musb_debug.c/musb_peri.c/musb_root.c/musb_util.c/tps.c: remove usbhal.h include
  cmodule.h/musb_usb.c: USBHAL is no longer defined
  CMHG file changed to make Makefile
Admin:
  Submission for USB bounty.

Version 0.32. Tagged as 'MUSBDriver-0_32'
@
text
@/*
 * Copyright (c) 2004, 2009 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net), Charles M. Hannum, and
 * Jeffrey Lee (me@@phlamethrower.co.uk)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "modhead.h"
#include "swis.h"
#include <limits.h>
#include <machine/bus.h>

#include <sys/malloc.h>
#include <sys/queue.h>
#include <sys/types.h>
#include <sys/systm.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>

#include "Global/RISCOS.h"
#include "Global/HALEntries.h"
#include "cmodule.h"

/* Have to avoid including stdio as there's a clash with the BSD stuff */
#define __stdio_h

#include "musb.h"
#include "tps.h"

/* Bits of bad code in this file:
   - HFCLK_FREQ in PM_MASTER_CFG_BOOT is initialised here, using the BeagleBoard value of 26MHz. Really the HAL should initialise this clock for us.
   - This entire file obviously assumes that a TPS65950/TWL4030 is present on IIC bus 0
   - Potential for reentry in tps_ticker() if IIC is too slow?
   */

extern void delay(int d);

// Read n bytes
static int tps_read(tps_state *state,int tpsreg,void *buf,int count)
{
	iic_transfer tran[2];
	state->lastreg = tpsreg;
	memset(tran,0,sizeof(tran));
	tran[0].addr = tpsreg>>8;
	tran[0].retry = 1;
	tran[0].d.data = &tpsreg;
	tran[0].len = 1;
	tran[1].addr = (tpsreg>>8) | 1;
	tran[1].d.data = buf;
	tran[1].len = count;
	return do_iicop(tran,2);
}

#if 0
// Write n bytes
static int tps_write(tps_state *state,int tpsreg,void *buf,int count)
{
	iic_transfer tran[2];
	state->lastreg = tpsreg;
	memset(tran,0,sizeof(tran));
	tran[0].addr = tpsreg>>8;
	tran[0].retry = 1;
	tran[0].d.data = &tpsreg;
	tran[0].len = 1;
	tran[1].addr = tpsreg>>8;
	tran[1].nostart = 1;
	tran[1].d.data = buf;
	tran[1].len = count;
	return do_iicop(tran,2);
}
#endif

// Write 0-4 bytes from int
static int tps_writeval(tps_state *state,int tpsreg,int val,int count)
{
	iic_transfer tran[2];
	state->lastreg = tpsreg;
	memset(tran,0,sizeof(tran));
	tran[0].addr = tpsreg>>8;
	tran[0].retry = 1;
	tran[0].d.data = &tpsreg;
	tran[0].len = 1;
	tran[1].addr = tpsreg>>8;
	tran[1].nostart = 1;
	tran[1].d.data = &val;
	tran[1].len = count;
	return do_iicop(tran,2);
}

static void tps_enableclock(tps_state *state)
{
	if(state->dpll_clk_state++)
		return;
	tps_writeval(state,TPS_USB_PHY_CLK_CTRL,7,1); /* ULPI register clock gating enabled, 32KHz clock enabled, request IIC clock */ 
	/* wait for clocks */
	int count=100;
	while(count--)
	{
		int val;
		delay(1000);
		if(tps_read(state,TPS_USB_PHY_CLK_CTRL_STS,&val,1) && (val&1))
			return;
	}
	/* Else timeout waiting for PHY DPLL! */
	DPRINTF(("tps_enableclock: Timeout!\n"));
}

static void tps_disableclock(tps_state *state)
{
	if(state->dpll_clk_state)
	{
		state->dpll_clk_state--;
		if(!state->dpll_clk_state)
			tps_writeval(state,TPS_USB_PHY_CLK_CTRL,6,1);
	}
}

static void tps_ticker(void *h)
{
	tps_state *state = (tps_state *) h;
	/* Read STS_HW_CONDITIONS to find the state of VBUS & ID */
	int val;
	int s;
	if(!tps_read(state,TPS_PM_MASTER_STS_HW_CONDITIONS,&val,1))
	{
		/* Oh noes! IIC op failed. This probably shouldn't happen, unless it's possible for callbacks to trigger inside OS_IICOp?
		   For the moment just ignore the problem, there'll be another ticker event soon enough
		*/
		DPRINTF(("tps_ticker: STS_HW_CONDITIONS read failed! panic!\n"));
		goto ret;
	}
	/* Work out what state we're in */
	s = splbio();
	DPRINTFN(15,("tps_ticker: STS_HW_CONDITIONS = %02x\n",val&0xff));
	if((val & 0x84) == 0x4)
	{
		/* If just the ID pin is present, we poke the MUSB controller to begin a session, waking it from sleep and causing it to enter host mode (which will later trigger a nice host-mode CONNECT interrupt)
		   We also reset the vbus overcurrent retry counter, which may or may not be a good thing to do... */
		DPRINTF(("tps_ticker: ID pin present, waking MUSB\n"));
		state->retry_counter = 3;
		state->musb->musb_base->devctl |= DEVCTL_SESSION;
	}
	else if(((val & 0x4) == 0) && ((state->musb->musb_base->devctl & (DEVCTL_BDEVICE|DEVCTL_SESSION)) == DEVCTL_SESSION))
	{
		/* The ID pin isn't present, but we're acting as an A device. Clear the session bit to switch back to B mode */
		DPRINTF(("tps_ticker: ID pin vanished, cancelling host-mode session\n"));
		state->musb->musb_base->devctl = 0; /* Only HOSTREQ & SESSION are writeable, and we want neither */
	} 
	splx(s);
ret:
	/* Wake up again in 1 second */
	callout_reset(&(state->ticker),1000,tps_ticker,state);
}

void tps_init(tps_state *state,struct musb_softc *musb)
{
	int val;
	state->dpll_clk_state = 0;
	state->lastreg = -1;
	state->retry_counter = 3;
	state->musb = musb;
	callout_init(&(state->ticker),0);
	/* Enable writing to power config registers */
	if(!tps_writeval(state,TPS_PM_MASTER_PROTECT_KEY,0xC0,1)) goto err2;
	if(!tps_writeval(state,TPS_PM_MASTER_PROTECT_KEY,0x0C,1)) goto err2;
	/* Check if HFCLK_FREQ has been configured yet. If not, host mode won't work! */
	if(!tps_read(state,TPS_PM_MASTER_CFG_BOOT,&val,1)) goto err2;
	if(!(val & 0x3))
	{
		if(!tps_writeval(state,TPS_PM_MASTER_CFG_BOOT,val | 0x2,1)) goto err2; /* Configure for 26MHz HFCLKIN (as used by BeagleBoard) */
		/* Note that DEFAULT_MADC_CLK_EN might need changing if HFCLKIN is not 26MHz on some machines (page 120, swcu050d.pdf) */
	}
	/* Put VUSB3V1 LDO in active state */
	if(!tps_writeval(state,TPS_PM_RECEIVER_VUSB_DEDICATED2,0,1)) goto err2;
	/* Set VBAT as VUSB3V1 input */
	if(!tps_writeval(state,TPS_PM_RECEIVER_VUSB_DEDICATED1,0x14,1)) goto err2;
	/* Turn on 3.1V, 1.5V, 1.8V regulators */
	if(!tps_writeval(state,TPS_PM_RECEIVER_VUSB3V1_DEV_GRP,0x20,1)) goto err2;
	if(!tps_writeval(state,TPS_PM_RECEIVER_VUSB3V1_TYPE,0,1)) goto err2;
	if(!tps_writeval(state,TPS_PM_RECEIVER_VUSB1V5_DEV_GRP,0x20,1)) goto err2;
	if(!tps_writeval(state,TPS_PM_RECEIVER_VUSB1V5_TYPE,0,1)) goto err2;
	if(!tps_writeval(state,TPS_PM_RECEIVER_VUSB1V8_DEV_GRP,0x20,1)) goto err2;
	if(!tps_writeval(state,TPS_PM_RECEIVER_VUSB1V8_TYPE,0,1)) goto err2;
	/* Disable access to power config registers */
	tps_writeval(state,TPS_PM_MASTER_PROTECT_KEY,0,1);

	/* Clear the power-down bit from PHY_PWR_CTRL */
	if(!tps_read(state,TPS_USB_PHY_PWR_CTRL,&val,1)) goto err3;
	if(!tps_writeval(state,TPS_USB_PHY_PWR_CTRL,val&~1,1)) goto err3;

	/* Now the USB module has power, we can properly configure it */
	tps_enableclock(state);

	/* Configure TPS USB for mode 1 (USB ULPI) */
	if(!tps_writeval(state,TPS_USB_MCPC_CTRL2_CLR,1,1)) goto err;
	// OTHER_IFC_CTRL must come before IFC_CTRL to avoid 'an unexpected serial mode' according to the manual
	if(!tps_writeval(state,TPS_USB_OTHER_IFC_CTRL_CLR,0x7c,1)) goto err;
	if(!tps_writeval(state,TPS_USB_IFC_CTRL_CLR,6,1)) goto err;
	if(!tps_writeval(state,TPS_USB_CARKIT_CTRL_CLR,0x7d,1)) goto err;
	if(!tps_writeval(state,TPS_USB_CARKIT_PLS_CTRL_CLR,0x7,1)) goto err;
//	if(!tps_writeval(state,TPS_USB_OTHER_IFC_CTRL_CLR,0x7c,1)) goto err; (moved up, see note above)
	if(!tps_writeval(state,TPS_USB_MCPC_CTRL_CLR,0x7d,1)) goto err;
	if(!tps_writeval(state,TPS_USB_MCPC_IO_CTRL_CLR,0x38,1)) goto err;
	if(!tps_writeval(state,TPS_USB_MCPC_IO_CTRL_SET,0x4,1)) goto err;
	if(!tps_writeval(state,TPS_USB_OTHER_IFC_CTRL2_CLR,0xc,1)) goto err;
	/* Ensure it's actually powered up */
	if(!tps_writeval(state,TPS_USB_POWER_CTRL_SET,0x20,1)) goto err;
	if(!tps_writeval(state,TPS_USB_FUNC_CTRL_CLR,0x1b,1)) goto err;

	/* We're now done with the USB registers */
	tps_disableclock(state);

	/* todo - we should wait here until the VBUS & ID comparators have warmed up? */

	/* Check the initial state of the ID pin
	   This will also start the ticker running periodically */
	tps_ticker(state);

	DPRINTF(("tps_init: Done\n"));
	return;
err3:
	DPRINTF(("tps_init: Error, last reg = %04x\n",state->lastreg));
	return;
err2:
	DPRINTF(("tps_init: Error, last reg = %04x\n",state->lastreg));
	tps_writeval(state,TPS_PM_MASTER_PROTECT_KEY,0,1);
	return;
err:
	DPRINTF(("tps_init: Error, last reg = %04x\n",state->lastreg));
	tps_disableclock(state);
	return;
}

void tps_shutdown(tps_state *state)
{
	/* Get rid of ticker event */
	callout_stop(&(state->ticker));

	/* TODO - Shutdown power */
}
@


1.8
log
@Remove unused include
Admin:
  Fewer depends. Not tagged.
@
text
@a36 3
#ifdef USBHAL
#include <dev/usb/usbhal.h>
#else
a38 1
#endif
a51 1
#include "Global/Services.h"
@


1.7
log
@Don't reach into USBDriver's back pocket
cmodule.c:
  Use USBDriver.h from interface exports
Makefile:
  Remove duplicated libs from debug build
  Remove relative reference to NetBSD component from VPATH
!MkDebug:
  Select debug target so the right compiler switches are used
musb.c/musb_debug.c/musb_peri.c/musb_root.c/musb_usb.c/musb_util.c/tps.c:
  Unused reference to USBDriver.h removed
Built, but not tested.

Version 0.23. Tagged as 'MUSBDriver-0_23'
@
text
@a58 1
#include "tboxlibint/messages.h"
@


1.6
log
@Fix to allow building against NetBSD-0_85
Detail:
  c/cmodule - Don't use NetBSD/build/service.h, it no longer exists. Use the exported USB/USBDevFS.h instead. Fix service call reason codes to use USBDevFS names.
  c/musb, c/musb_debug, c/musb_hal, c/musb_peri, c/musb_root, c/musb_usb, c/musb_util, c/tps - Strip redundant #includes
Admin:
  Tested in OMAP3 ROM build
  Build output is binary-identical to previous version
  Requires NetBSD-0_85


Version 0.22. Tagged as 'MUSBDriver-0_22'
@
text
@a42 1
#include "../../NetBSD/build/USBDriver.h"
@


1.5
log
@Perform some missing PHY initialisation
Detail:
  c/tps - Added some extra PHY initialisation steps that are needed to get things working on Pandora
Admin:
  Tested on Pandora


Version 0.18. Tagged as 'MUSBDriver-0_18'
@
text
@a64 2
#include "../../NetBSD/build/service.h"

@


1.4
log
@Add support for HAL builds of MUSBDriver
Detail:
  Makefile - Now builds a HAL-compatible static library during the export libs phase
  !MkHAL,fd7 - Handy script for building the HAL lib
  c/musb_hal - HAL version of cmodule.c
  c/musb, c/musb_debug, c/musb_peri, c/musb_root, c/musb_usb, c/musb_util, c/tps, h/cmodule, h/musb, h/musb_util, h/tps - Changed to support the HAL build. Biggest change was getting rid of all global vars; everything is now done via the bus ptr instead.
  c/port - Removed microtime and moved riscos_irq_clear here, to match change made in main USB drivers
Admin:
  HAL & non-HAL versions tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook
  Needs latest Kernel & NetBSD USB drivers


Version 0.12. Tagged as 'MUSBDriver-0_12'
@
text
@d246 3
d278 2
@


1.3
log
@Restructure MUSBDriver source code, rework host mode endpoint handling, plus other misc changes
Detail:
  c/musb_debug - New file containing debug code.
  c/musb_peri - Contains the code for handling peripheral mode, taken from c/musb
  c/musb_root - Contains the code for handling the USBDriver-required 'soft' hub, taken from c/musb
  c/musb_usb - Contains initialisation code and other misc USBDriver-related code, mostly taken from c/musb
  c/musb_util - Misc utility functions from c/musb
  h/musb_util, h/musb_usb - A couple of new header files to help with breaking things up. Might make sense to break h/musb_usb down further (or just consolidate everything back into h/musb)
  c/musb - Stripped out pretty much everything except code related to host-mode endpoint and interrupt handling. Instances of the new musb_multiplexer struct are used to handle endpoint allocation, and allocation is now performed on a per-usbd_xfer basis instead of on a per-pipe basis. This should allow the code to cope better with situations where the number of pipes is greater than the number of physical endpoints, although much work is still required.
  c/cmodule, c/port, c/tps, h/cmodule, h/musb - Misc tweaks and changes
Admin:
  Tested on rev A2 BB-xM.


Version 0.11. Tagged as 'MUSBDriver-0_11'
@
text
@d37 3
d41 2
a43 4
#include "swis.h"
//#include <stdlib.h>
//#include <string.h>
//#include <stdlib.h>
a58 1
#include "callx/callx.h"
a65 1
#include "oslib/devicefs.h"
a75 1
extern int musbdebug;
a77 16
typedef struct iic_transfer
{
	unsigned addr:8;
	unsigned :21;
	unsigned retry:1;
	unsigned checksumonly:1;
	unsigned nostart:1;
	union {
		unsigned checksum;
		void *data;
	} d;
	unsigned len;
} iic_transfer;

static int lastreg = -1;

d79 1
a79 1
static int tps_read(int tpsreg,void *buf,int count)
d82 1
a82 2
	_kernel_oserror *e;
	lastreg = tpsreg;
d91 1
a91 2
	e = _swix(OS_IICOp,_INR(0,1), tran, 2);
	return (e==0);
d96 1
a96 1
static int tps_write(int tpsreg,void *buf,int count)
d99 1
a99 2
	_kernel_oserror *e;
	lastreg = tpsreg;
d109 1
a109 2
	e = _swix(OS_IICOp,_INR(0,1), tran, 2);
	return (e==0);
d114 1
a114 1
static int tps_writeval(int tpsreg,int val,int count)
d117 1
a117 2
	_kernel_oserror *e;
	lastreg = tpsreg;
d127 1
a127 2
	e = _swix(OS_IICOp,_INR(0,1), tran, 2);
	return (e==0);
d130 1
a130 4
/* Re-entrancy will likely cause this to fail */
static int dpll_clk_state = 0;

static void tps_enableclock(void)
d132 1
a132 1
	if(dpll_clk_state++)
d134 1
a134 1
	tps_writeval(TPS_USB_PHY_CLK_CTRL,7,1); /* ULPI register clock gating enabled, 32KHz clock enabled, request IIC clock */ 
d141 1
a141 1
		if(tps_read(TPS_USB_PHY_CLK_CTRL_STS,&val,1) && (val&1))
d148 1
a148 1
static void tps_disableclock(void)
d150 1
a150 1
	if(dpll_clk_state)
d152 3
a154 3
		dpll_clk_state--;
		if(!dpll_clk_state)
			tps_writeval(TPS_USB_PHY_CLK_CTRL,6,1);
d158 1
a158 3
extern int retry_counter;

static _kernel_oserror* tps_ticker(_kernel_swi_regs *r,void *pw,void *h)
d160 1
a160 3
	NOTUSED(r);
	NOTUSED(pw);
	NOTUSED(h);
d163 2
a164 1
	if(!tps_read(TPS_PM_MASTER_STS_HW_CONDITIONS,&val,1))
d170 1
a170 1
		return NULL;
d173 1
a173 2
	int s = _kernel_irqs_disabled();
	_kernel_irqs_off();
d180 2
a181 2
		retry_counter = 3;
		musb_base->devctl |= DEVCTL_SESSION;
d183 1
a183 1
	else if(((val & 0x4) == 0) && ((musb_base->devctl & (DEVCTL_BDEVICE|DEVCTL_SESSION)) == DEVCTL_SESSION))
d187 1
a187 1
		musb_base->devctl = 0; /* Only HOSTREQ & SESSION are writeable, and we want neither */
d189 4
a192 3
	if(s==0)
		_kernel_irqs_on();
	return NULL;
d195 1
a195 1
void tps_init(void *pw)
a196 1
	NOTUSED(pw);
d198 5
d204 2
a205 2
	if(!tps_writeval(TPS_PM_MASTER_PROTECT_KEY,0xC0,1)) goto err2;
	if(!tps_writeval(TPS_PM_MASTER_PROTECT_KEY,0x0C,1)) goto err2;
d207 1
a207 1
	if(!tps_read(TPS_PM_MASTER_CFG_BOOT,&val,1)) goto err2;
d210 1
a210 1
		if(!tps_writeval(TPS_PM_MASTER_CFG_BOOT,val | 0x2,1)) goto err2; /* Configure for 26MHz HFCLKIN (as used by BeagleBoard) */
d214 1
a214 1
	if(!tps_writeval(TPS_PM_RECEIVER_VUSB_DEDICATED2,0,1)) goto err2;
d216 1
a216 1
	if(!tps_writeval(TPS_PM_RECEIVER_VUSB_DEDICATED1,0x14,1)) goto err2;
d218 6
a223 6
	if(!tps_writeval(TPS_PM_RECEIVER_VUSB3V1_DEV_GRP,0x20,1)) goto err2;
	if(!tps_writeval(TPS_PM_RECEIVER_VUSB3V1_TYPE,0,1)) goto err2;
	if(!tps_writeval(TPS_PM_RECEIVER_VUSB1V5_DEV_GRP,0x20,1)) goto err2;
	if(!tps_writeval(TPS_PM_RECEIVER_VUSB1V5_TYPE,0,1)) goto err2;
	if(!tps_writeval(TPS_PM_RECEIVER_VUSB1V8_DEV_GRP,0x20,1)) goto err2;
	if(!tps_writeval(TPS_PM_RECEIVER_VUSB1V8_TYPE,0,1)) goto err2;
d225 1
a225 1
	tps_writeval(TPS_PM_MASTER_PROTECT_KEY,0,1);
d228 2
a229 2
	if(!tps_read(TPS_USB_PHY_PWR_CTRL,&val,1)) goto err3;
	if(!tps_writeval(TPS_USB_PHY_PWR_CTRL,val&~1,1)) goto err3;
d232 1
a232 1
	tps_enableclock();
d235 1
a235 1
	if(!tps_writeval(TPS_USB_MCPC_CTRL2_CLR,1,1)) goto err;
d237 9
a245 9
	if(!tps_writeval(TPS_USB_OTHER_IFC_CTRL_CLR,0x7c,1)) goto err;
	if(!tps_writeval(TPS_USB_IFC_CTRL_CLR,6,1)) goto err;
	if(!tps_writeval(TPS_USB_CARKIT_CTRL_CLR,0x7d,1)) goto err;
	if(!tps_writeval(TPS_USB_CARKIT_PLS_CTRL_CLR,0x7,1)) goto err;
//	if(!tps_writeval(TPS_USB_OTHER_IFC_CTRL_CLR,0x7c,1)) goto err; (moved up, see note above)
	if(!tps_writeval(TPS_USB_MCPC_CTRL_CLR,0x7d,1)) goto err;
	if(!tps_writeval(TPS_USB_MCPC_IO_CTRL_CLR,0x38,1)) goto err;
	if(!tps_writeval(TPS_USB_MCPC_IO_CTRL_SET,0x4,1)) goto err;
	if(!tps_writeval(TPS_USB_OTHER_IFC_CTRL2_CLR,0xc,1)) goto err;
d248 1
a248 1
	tps_disableclock();
d252 3
a254 4
	/* Check the initial state of the ID pin */
	tps_ticker(NULL,NULL,NULL);
	/* Register a ticker event to recheck the ID pin at regular intervals */
	callx_add_callevery(100,tps_ticker,NULL);
d259 1
a259 1
	DPRINTF(("tps_init: Error, last reg = %04x\n",lastreg));
d262 2
a263 2
	DPRINTF(("tps_init: Error, last reg = %04x\n",lastreg));
	tps_writeval(TPS_PM_MASTER_PROTECT_KEY,0,1);
d266 2
a267 2
	DPRINTF(("tps_init: Error, last reg = %04x\n",lastreg));
	tps_disableclock();
d271 1
a271 1
void tps_shutdown(void *pw)
a272 1
	NOTUSED(pw);
d274 1
a274 1
	callx_remove_callevery(tps_ticker,NULL);
@


1.2
log
@Improve reliability of OTG cable detection, add support for USBD_FORCE_SHORT_XFER, tidy code a bit
Detail:
  c/musb, h/musb - Added support for USBD_FORCE_SHORT_XFER flag. Also tidied the source a bit to use bools instead of ints for storing flags.
  c/tps, cmhg/modhead - Made OTG cable detection 100% reliable by getting rid of the USB_PRES interrupt code and instead using a ticker event to poll the STS_HW_CONDITIONS.STS_USB bit at regular intervals
Admin:
  Tested on rev C2 beagleboard


Version 0.06. Tagged as 'MUSBDriver-0_06'
@
text
@a70 8
#ifdef MUSB_DEBUG
#define DPRINTF(X) if(musbdebug) logprintf X
#define DPRINTFN(A,X) if(musbdebug>(A)) logprintf X
#else
#define DPRINTF(X)
#define DPRINTFN(A,X)
#endif

d97 1
a97 1
int tps_read(int tpsreg,void *buf,int count)
d114 1
d116 1
a116 1
int tps_write(int tpsreg,void *buf,int count)
d133 1
d136 1
a136 1
int tps_writeval(int tpsreg,int val,int count)
d157 1
a157 1
void tps_enableclock(void)
d175 1
a175 1
void tps_disableclock(void)
d187 1
a187 1
_kernel_oserror* tps_ticker(_kernel_swi_regs *r,void *pw,void *h)
d189 3
d227 1
d300 1
@


1.1
log
@Initial version of USB host support for MUSBDriver
Detail:
  c/tps, h/tps, Makefile - Some rather rough code to wake up the MUSB controller and cause it to enter host mode when the OTG cable is detected. Needs some tidying up and improvement to deal with any other drivers that need to interact with the TWL/TPS.
  c/musb, h/musb - Initial host-mode support for MUSBDriver. Control, bulk & interrupt endpoints are implemented. Isochronous is not. Lots of bits need improving, but it's stable enough for owners of rev B beagleboards to make use of.
  cmhg/modhead, c/cmodule - Improved debugging code
Admin:
  Tested on rev C2 beagleboard


Version 0.02. Tagged as 'MUSBDriver-0_02'
@
text
@d82 1
a82 13
   - Plus it assumes that the host processor is on interrupt line 1 from the TPS, and that the corresponding CPU-side IRQ is #7
   - Plus it assumes that this is the first piece of code to enable interrupts for the TPS, and as a result of this assumption it disables all interrupts except the ones it's interested in (really a seperate module or HAL device should be written to handle TPS interrupts, to take into account the problems associated with using IIC to determine and service the interrupts)
   - Hardcoding of TPS_IRQ_NUMBER
   - The whole ID pin monitoring is a bit dodgy:
     - MUSB doesn't wake the first time you plug a cable into the board (if the cable was not connected at boot)
       - But it does wake fine the second time, even with nothing connected to the cable
     - the USB_PRES interrupt seems to be triggered when the value of (STS_VBUS | STS_USB) changes
       - Which means that in the situations where MUSB wakes and enters host mode, with nothing at the other end of the cable, we can't use the interrupt to detect the removal of the cable because VBUS will still be on
       - But if the cable did have something connected, we should work OK since we can clear the SESSION bit when we get the MUSB disconnect IRQ
         - Except then we'll be stuck in the state where ID is detected and VBUS is off, giving us no chance to wake MUSB again
     - plus the whole method of dealing with the interrupts is nasty
     - so better approach to everything may be to use a simple CallEvery to probe STS_HW_CONDITIONS?
       - or if the USBDriver sends regular packets to query our device state, we can use those to poll the ID pin and decide when to try turning VBUS on/off   
a84 2
#define TPS_IRQ_NUMBER 7 /* On the beagleboard, the TPS is attached to sys_nirq0 (IRQ #7) */

d193 1
a193 1
_kernel_oserror* tps_callback(_kernel_swi_regs *r,void *pw,void *h)
d195 1
a195 2
	/* We're now in a callback, so IIC should be safe
	   Read STS_HW_CONDITIONS to find the state of VBUS & ID */
a196 1
	DPRINTF(("tps_callback\n"));
d200 1
a200 2
		   For the moment just silently fail horribly
		   Later on we should probably register another callback (OS_CallAfter with 1 sec delay?) and retry then.
d202 1
a202 1
		DPRINTF(("STS_HW_CONDITIONS read failed! panic!\n"));
d206 3
a208 1
	DPRINTF(("STS_HW_CONDITIONS = %02x\n",val&0xff));
d213 1
a213 1
		DPRINTF(("ID pin present, waking MUSB\n"));
d217 1
a217 2
	/* Now we can clear the IRQ state from PWR_ISR1 */
	if(!tps_writeval(TPS_POWERINT_PWR_ISR1,0xff,1))
d219 6
a224 5
		DPRINTF(("TPS_POWERINT_PWR_ISR1 write failed! panic!\n"));
		return NULL;
	}
	/* Re-enable the interrupt */
	_swix(OS_Hardware, _IN(0)|_INR(8,9), TPS_IRQ_NUMBER, 0, EntryNo_HAL_IRQEnable);
a227 12
int tps_irq_handler(_kernel_swi_regs *r,void *pw)
{
	/* We've received a TPS IRQ (or a fake one during init)
	   Except the TPS is attached via IIC, which could be quite slow/tricky to use during an interrupt handler
	   So since the USB interrupt isn't critical, we'll just disable the interrupt and set up a callback that will do the real work */
	_swix(OS_Hardware, _IN(0)|_INR(8,9), TPS_IRQ_NUMBER, 0, EntryNo_HAL_IRQDisable);
	_swix(OS_Hardware, _IN(0)|_INR(8,9), TPS_IRQ_NUMBER, 0, EntryNo_HAL_IRQClear); /* todo - We must clear the interrupt even after disable it according to my debug code - is that right? */
	DPRINTF(("tps_irq_handler\n"));
	callx_add_callback(tps_callback,0);
	return 0;
}

a277 10
	/* We use the USB_PRES interrupt to detect VBUS/ID sense changes
	   So first program the POWERINT module to generate the right interrupts for us */
	if(!tps_writeval(TPS_POWERINT_PWR_EDR1,0xff,1)) goto err; /* Rising & falling edge */
	if(!tps_writeval(TPS_POWERINT_PWR_IMR1,0xfb,1)) goto err; /* Enable USB_PRES interrupt */
	if(!tps_writeval(TPS_POWERINT_PWR_SIH_CTRL,0,1)) goto err; /* Disable clear-on-read, disable exclusivity */

	/* Now enable the power management interrupt (and only the power management interrupt!) in the primary interrupt handler */
	if(!tps_writeval(TPS_PIH_PIH_SIR,0,1)) goto err; /* Clear any software-triggered interrupts */
	if(!tps_writeval(TPS_PIH_PIH_ISR_P1,0xdf,1)) goto err; /* Enable power interrupts */

d280 4
a283 4
	/* Register the interrupt handler with RISC OS */
	_swix(OS_ClaimDeviceVector, _INR(0,4), TPS_IRQ_NUMBER | (1u<<31), tps_irq_entry, pw, 0, 0);
	/* Perform a dummy IRQ. This will set the initial host/peripheral state, as well as enable the IRQ for us */
	tps_irq_handler(0,pw);
d302 2
a303 2
	/* Get rid of IRQ handler */
	_swix (OS_ReleaseDeviceVector, _INR(0,4), TPS_IRQ_NUMBER | (1u<<31), tps_irq_entry, pw, 0, 0);
@

