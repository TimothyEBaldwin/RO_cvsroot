head	1.8;
access;
symbols
	MUSBDriver-0_31:1.7
	MUSBDriver-0_30:1.7
	MUSBDriver-0_29:1.7
	MUSBDriver-0_28:1.7
	MUSBDriver-0_27:1.7
	MUSBDriver-0_26:1.6
	MUSBDriver-0_25:1.5
	MUSBDriver-0_24:1.5
	MUSBDriver-0_23:1.5
	MUSBDriver-0_22:1.5
	MUSBDriver-0_21:1.5
	MUSBDriver-0_20:1.5
	MUSBDriver-0_19:1.4
	MUSBDriver-0_18:1.4
	MUSBDriver-0_17:1.4
	MUSBDriver-0_16:1.4
	MUSBDriver-0_15:1.4
	MUSBDriver-0_14:1.4
	MUSBDriver-0_13:1.3
	MUSBDriver-0_12:1.3
	MUSBDriver-0_11:1.2
	MUSBDriver-0_10:1.1
	MUSBDriver-0_09:1.1
	MUSBDriver-0_08:1.1
	MUSBDriver-0_07:1.1
	MUSBDriver-0_06:1.1
	MUSBDriver-0_05:1.1
	MUSBDriver-0_04:1.1
	MUSBDriver-0_03:1.1
	MUSBDriver-0_02:1.1;
locks; strict;
comment	@# @;


1.8
date	2017.09.23.08.54.56;	author rool;	state dead;
branches;
next	1.7;
commitid	qcGeJbCDtonLCi8A;

1.7
date	2016.05.02.19.11.10;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	yC6Kkcs3WTf4pW4z;

1.6
date	2016.03.26.23.49.38;	author jlee;	state Exp;
branches;
next	1.5;
commitid	tTloQaDczIFj8d0z;

1.5
date	2014.05.06.20.31.57;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	C9iEShBekVSBdwzx;

1.4
date	2011.08.05.00.06.15;	author jlee;	state Exp;
branches;
next	1.3;
commitid	XLVfaQiiOY4ZJfuv;

1.3
date	2011.05.22.20.32.28;	author jlee;	state Exp;
branches;
next	1.2;
commitid	ojDCXEOv6C57WIkv;

1.2
date	2011.04.11.23.25.35;	author jlee;	state Exp;
branches;
next	1.1;
commitid	6pcEoJPvdLzddtfv;

1.1
date	2009.07.02.20.15.46;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Common up NetBSD supporting functions
Detail:
  port.c -> bsd_fns.c, and use the copy from EHCI/OHCI driver, minus the bus access functions not needed here.
Admin:
  Submission for USB bounty.
  Not tagged, part 2 follows shortly.
@
text
@/* Copyright 2009 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stddef.h>
#include <string.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdarg.h>

#include "DebugLib/DebugLib.h"
#include "callx/callx.h"
#include "swis.h"
#include "sys/callout.h"
#include "sys/time.h"
#include "Global/HALEntries.h"

#include "cmodule.h"

#ifdef USB_DEBUG
extern int usbdebug;
int total_sleep;
#endif

extern uint32_t hal_veneer2(uint32_t (*)(void), void*, ...);
extern uint64_t gettime (void);

uint64_t gettime (void)
{
    uint32_t cs;
    static uint32_t (*readcode) (void);
    static void* ws;
    static uint32_t ns_factor;
    static uint32_t max_count;
    if (readcode == NULL)
    {
        _swix (OS_Hardware, _INR(8,9)|_OUTR(0,1),
            1, EntryNo_HAL_CounterRead,
            &readcode, &ws);

        _swix (OS_Hardware, _INR(8,9)| _OUT(0),
            0, EntryNo_HAL_CounterPeriod,
            &max_count);

#if 0 // fixed in RISC OS 5.03
        /* bug here - force 2000000 */
        max_count = 2000000;
#endif

        /* conversion to ns, assume counter is for 1 cs */
        ns_factor = 10000000 / max_count;
    }

    _swix (OS_ReadMonotonicTime, _OUT(0), &cs);
    return (uint64_t) (max_count - hal_veneer2(readcode,ws)) * ns_factor +
        ((uint64_t) cs) * 10000000 /* 1e7 */;
}

int hz = 1000;

/* disable interrupt for input */
int spltty (void)
{
    return _kernel_irqs_disabled ();
}

void splx (int s)
{
    if (s == 0) _kernel_irqs_on ();
//    dprintf (("", "int on\n"));
}

int splbio (void)
{
    int s = _kernel_irqs_disabled ();
    _kernel_irqs_off ();
//    dprintf (("", "int off\n"));
    return s;
}


char panic_string[255];

void panic (const char* str, ...)
{
    va_list p;
    va_start (p, str);
    /* aargh! */
    dprintf (("Port", "panicking:"));
    dvprintf (("Port", str, p));
    vsnprintf(panic_string, sizeof panic_string, str, p);
    va_end (p);
}

void
delay (int d)
{
#ifdef USB_DEBUG0
    if (usbdebug > 19)
    {
        time_t t;
        time (&t);
        dprintf (("Port", "wait for %dus at %s", d, ctime(&t)));
    }
#endif
    _swix (OS_Hardware, _IN(0)|_INR(8,9), d, 0, EntryNo_HAL_CounterDelay);
}

void
microtime(struct timeval *thetime)
{
    uint64_t t = gettime ();
    thetime->tv_sec = (unsigned long) (t / 1000000000);
    thetime->tv_usec = (unsigned long) ((t / 1000) % 1000000);
}

/*
 * Callouts
 */
extern void callout_veneer (void);

void
callout_init (struct callout* c)
{
#ifdef USB_DEBUG0
    if (usbdebug > 15) dprintf (("Port", "callout init %p\n", c));
#endif
    memset (c, 0, sizeof (*c));
}

_kernel_oserror*
callout_handler (_kernel_swi_regs* r, void* pw, void* _c) {
    struct callout* c = _c;
#ifdef USB_DEBUG0
    if (usbdebug > 15) dprintf (("Port", "callout2 %p called\n", c));
#endif
    if(c->c_func)c->c_func (c->c_arg);
    return NULL;
}

void
callout_stop (struct callout *c) {
#ifdef USB_DEBUG0
    if (usbdebug > 15) dprintf (("Port", "callout stop %p\n", c));
#endif
    callx_remove_callafter (callout_handler, c);
}

void
callout_reset (struct callout *c, int i, void (*f)(void *), void *v) {
    if (i <= 0) i = 1;
    c->c_arg = v;
    c->c_func = f;
    c->c_next = (void*) private_word; /* hacky thing to get handler to work */
#ifdef USB_DEBUG0
    if (usbdebug > 15) dprintf (("Port", "callout %p reset %dms\n", c, i));
#endif
    callx_add_callafter ((i + 9) / 10, callout_handler, c);
}

void* t_handles[100];
int t_locks[100];
int nhandles = 0;

extern void triggercbs (void);

int tsleep (void* ident, int priority, const char* wmesg, int timo, int noblock)
{
    int i;
    int s = _kernel_irqs_disabled ();
    uint64_t t0, t1, t2;

    _kernel_irqs_off ();                       // lets play safe

    t1 = t0 = gettime();
    t1 += ((uint64_t) timo) * 1000000;
#ifdef USB_DEBUG

    int sema = *(int*)(0x108);
    char bbf[32];strncpy( bbf, wmesg, 31);bbf[31]=0;
    dprintf(("","enter sleep:%s                  irqstate:%d\n",bbf,sema));
#endif

#ifdef USB_DEBUG0
    int cs0, cs1;
    _swix (OS_ReadMonotonicTime, _OUT(0), &cs0);
    if (usbdebug > 19)
        dprintf (("Port", "%s sleeping on %p at priority %d for %dms\n"
                      "from %lu.%.09lu\n"
                      "til  %lu.%.09lu\n",
            wmesg, ident, priority, timo,
            (uint32_t) (t0 / 1000000000), (uint32_t) (t0 % 1000000000),
            (uint32_t) (t1 / 1000000000), (uint32_t) (t1 % 1000000000)));
#endif

    for (i = 0; i < nhandles && t_handles[i] && t_handles[i] != ident; ++i);

    if (i == nhandles) {
        nhandles = i + 1;
        if (nhandles >= sizeof t_handles / sizeof *t_handles)
        {
            if (s == 0) _kernel_irqs_on ();
            panic ("run out of thread handles...");
            return 1;
        }
    }

    t_handles[i] = ident;
    t_locks[i] = 0;

    /* wait until the lock is free */
    _kernel_irqs_on ();

    if (timo) {
        do {
            triggercbs ();
            t2 = gettime ();
        }
        while ((t_locks[i] == 0) && (t2 < t1));
    }
    else
    {
        while (t_locks[i] == 0)
        {
            triggercbs ();
        }
#ifdef USB_DEBUG0
        t2 = gettime ();
#endif
    }
    _kernel_irqs_off ();

    t_handles[i] = 0;

#ifdef USB_DEBUG0
    if (usbdebug > 19)
      dprintf (("", "now  %lu.%09lu\n",
        (uint32_t) (t2 / 100000000), (uint32_t) (t2 % 1000000000)));
    t2 -= t0;
    _swix (OS_ReadMonotonicTime, _OUT(0), &cs1);
    total_sleep += cs1 - cs0;
    if (usbdebug > 10)
        dprintf (("", "slept for %lu.%.09lu seconds (timo = %dms), %d cs\n",
            (uint32_t) (t2 / 100000000), (uint32_t) (t2 % 1000000000),
            timo, cs1 - cs0));
#endif
#ifdef USB_DEBUG
    dprintf(("","leave sleep:%s                  irqstate:%d\n",bbf,sema));
#endif

    if (s == 0) _kernel_irqs_on ();

    return 0;
}

int wakeup (void* ident) {
    int i;
#ifdef USB_DEBUG0
    if (usbdebug > 10) dprintf (("", "waking up %p\n", ident));
#endif

    /* Find the index of the handle passed */
    for (i = 0; i < nhandles && t_handles[i] != ident; ++i);

    /* unlock it */
    if (t_handles[i] == ident)
    {
      t_locks[i] = 1;
      t_handles[i] =NULL;
    }  
    return 0;
}

int min (int a, int b)
{
    if (a < b) return a;
    return b;
}

void logprintf (char* format, ...)
{
    va_list p;
    va_start (p, format);
    dvprintf (("Log", format, p));
    va_end (p);
}

void riscos_irqclear(int devno)
{
    _swix(OS_Hardware, _IN(0)|_INR(8,9), devno, 0, EntryNo_HAL_IRQClear);
}
@


1.7
log
@Fix for too short a memset
Found by pattern matching, this is the same change as DWCDriver-0_27.

Version 0.27. Tagged as 'MUSBDriver-0_27'
@
text
@@


1.6
log
@Delete unused code
Detail:
  c/port - Less code, less bugs
Admin:
  Builds, untested


Version 0.26. Tagged as 'MUSBDriver-0_26'
@
text
@d140 1
a140 1
    memset (c, 0, sizeof c);
@


1.5
log
@Missing va_end() added

Version 0.20. Tagged as 'MUSBDriver-0_20'
@
text
@a36 4

extern void detach_hub (struct device*);
extern void detach_device (struct device*);

a128 42
void
selrecord(struct proc *selector, struct selinfo *selinfo)
{
    dprintf (("Port", "selecting record\n"));
}

void
selwakeup(struct selinfo *selinfo)
{
    dprintf (("Port", "selwakeup called\n"));
}

typedef int devclass_t;
typedef int caddr_t;

void*
devclass_get_softc (devclass_t dc, int unit)
{
    return 0; /* TODO make this return something that won't make it crash.. */
}

int
config_deactivate (struct device* dev)
{
    dprintf (("Port", "deactivating device\n"));
    return 0;
}

struct uio;

int
uiomove(caddr_t poo, int wobble, struct uio * fred)
{
    dprintf (("Port", "uiomove\n"));
    return 0;
}

void
psignal(unsigned sig, const char *s) {
    dprintf (("Port", "wow - we've received signal %d: %s\n", sig, s));
}

a172 19
int kthread_create (void (f) (void*), void* h) {
    (void) f;
    (void) h;
//    dprintf (("Port", "creating thread\n"));

    return 0;
}

int kthread_create1 (int (f) (void*), void* a, void* b, char* c, char* d)
{
    (void) f;
    (void) a;
    (void) b;
    (void) c;
    (void) d;

    return 0;
}

a285 70
void kthread_exit (void) {
//    dprintf (("Port", "exit thread\n"));
}

void device_probe_and_attach (void) {
//    dprintf (("Port", "probing device\n"));
}

/*
 * usbd_ratecheck() can limit the number of error messages that occurs.
 * When a device is unplugged it may take up to 0.25s for the hub driver
 * to notice it.  If the driver continuosly tries to do I/O operations
 * this can generate a large number of messages.
 */
int
ratecheck (void* a, void* b)
{
    return 0;
}

void* usbd_print;

void* vtophys (void** v)
{
#ifndef EMULATE
    struct {
        void*   page;
        void*   logical;
        void*   physical;
    } block;
    block.logical = v;
    _swix (OS_Memory, _INR (0, 2), (1<<9) + (1<<13) + (2<<14), &block, 1);

    return block.physical;
#else
//    dprintf (("Port", "Converting physical address %p\n", *v));
    return v; // return actual address for the moment
#endif
}

void* malloc_contig(int len, int alignment)
{
    void* p;
    _kernel_oserror* e;

    e = _swix(PCI_RAMAlloc, _INR(0,2)|_OUT(0), len, alignment, 0, &p);
    if (e || !p)
    {
        dprintf (("", "failed to allocate %d bytes at %d alignment err = '%s'\n",
            len, alignment, e?e->errmess:""));

        return NULL;
    }

    memset(p, 0, len);

    return p;
}

void free_contig (void **mem)
{
    _swix(PCI_RAMFree, _IN(0), *mem);
}

char*
device_get_nameunit (void)
{
    return "OHCI USB device";
}

a299 27
#ifdef USB_USE_SOFTINTR
void* softintr_establish(int pri, void (*f) (void*), void* h)
{
    void** p = malloc (3 * sizeof *p);
    if (p == NULL) return p;

    p[0] = 0;
    p[1] = h;
    p[2] = (void*) f;

    _swix (CBAI_RegisterPollWord, _INR(0, 2), p, pri, private_word);
    return p;
}

//void softintr_schedule (void** p)
//{
//    dprintf (("", "Setting pollword to %p\n", p[2]));
//    p[0] = p[2];
//}

void softintr_disestablish (void* p)
{
    _swix (CBAI_DeregisterPollWord, _IN(0), p);
    free (p);
}
#endif

@


1.4
log
@Update to work with zero page relocation. Remove ability to cancel transfers by pressing escape
Detail:
  c/cmodule - Rework driver init/shutdown code to avoid null pointer dereference during Service_PreReset/USBDriver_Dying
  c/port - Removed ability to cancel transfers by pressing escape. Too dangerous for things like mass storage devices, and the code won't work anyway for the common case of being in the wimp
  s/triggercbs - Try using OS_ReadSysInfo 6 to get IRQsema ptr before falling back on legacy address
Admin:
  Tested on rev A2 BB-xM


Version 0.14. Tagged as 'MUSBDriver-0_14'
@
text
@d108 1
d432 1
@


1.3
log
@Add support for HAL builds of MUSBDriver
Detail:
  Makefile - Now builds a HAL-compatible static library during the export libs phase
  !MkHAL,fd7 - Handy script for building the HAL lib
  c/musb_hal - HAL version of cmodule.c
  c/musb, c/musb_debug, c/musb_peri, c/musb_root, c/musb_usb, c/musb_util, c/tps, h/cmodule, h/musb, h/musb_util, h/tps - Changed to support the HAL build. Biggest change was getting rid of all global vars; everything is now done via the bus ptr instead.
  c/port - Removed microtime and moved riscos_irq_clear here, to match change made in main USB drivers
Admin:
  HAL & non-HAL versions tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook
  Needs latest Kernel & NetBSD USB drivers


Version 0.12. Tagged as 'MUSBDriver-0_12'
@
text
@d288 1
a288 1
    int flags = 0;
a289 1
    _kernel_irqs_on ();
a293 1
            _swix (OS_ReadEscapeState, _OUT(_FLAGS), &flags);
d295 1
a295 1
        while ((t_locks[i] == 0) && (t2 < t1) && ((flags & _C) == 0));
d299 1
a299 1
        while (t_locks[i] == 0 && (flags & _C) == 0)
a300 3
            /* allow foreground process to function while we're waiting */
/*            if (noblock) _swix (OS_UpCall, _INR(0,1), 6, &t_locks[i]);*/
/*//            _swix (OS_UpCall, _INR(0,1), 6, &t_locks[i]);*/
a301 1
            _swix (OS_ReadEscapeState, _OUT(_FLAGS), &flags);
a308 5
    if (flags & _C)
    {
        _kernel_osbyte (126, 0, 0);
    }

@


1.2
log
@Restructure MUSBDriver source code, rework host mode endpoint handling, plus other misc changes
Detail:
  c/musb_debug - New file containing debug code.
  c/musb_peri - Contains the code for handling peripheral mode, taken from c/musb
  c/musb_root - Contains the code for handling the USBDriver-required 'soft' hub, taken from c/musb
  c/musb_usb - Contains initialisation code and other misc USBDriver-related code, mostly taken from c/musb
  c/musb_util - Misc utility functions from c/musb
  h/musb_util, h/musb_usb - A couple of new header files to help with breaking things up. Might make sense to break h/musb_usb down further (or just consolidate everything back into h/musb)
  c/musb - Stripped out pretty much everything except code related to host-mode endpoint and interrupt handling. Instances of the new musb_multiplexer struct are used to handle endpoint allocation, and allocation is now performed on a per-usbd_xfer basis instead of on a per-pipe basis. This should allow the code to cope better with situations where the number of pipes is greater than the number of physical endpoints, although much work is still required.
  c/cmodule, c/port, c/tps, h/cmodule, h/musb - Misc tweaks and changes
Admin:
  Tested on rev A2 BB-xM.


Version 0.11. Tagged as 'MUSBDriver-0_11'
@
text
@d470 5
@


1.1
log
@Add initial version of MUSBDriver module

- Interfaces with main USBDriver module and implements software part of root hub
- Interfaces with Mentor MUSBMHDRC USB OTG controller, providing basic peripheral-mode support
@
text
@d30 2
a74 3
/* turn off cold starting */
int cold = 0;

a176 1
extern int private_word;
@

