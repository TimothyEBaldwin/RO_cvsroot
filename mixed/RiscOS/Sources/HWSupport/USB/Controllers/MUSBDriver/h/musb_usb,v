head	1.1;
access;
symbols
	MUSBDriver-0_35:1.1
	MUSBDriver-0_34:1.1
	MUSBDriver-0_33:1.1
	MUSBDriver-0_32:1.1
	MUSBDriver-0_31:1.1
	MUSBDriver-0_30:1.1
	MUSBDriver-0_29:1.1
	MUSBDriver-0_28:1.1
	MUSBDriver-0_27:1.1
	MUSBDriver-0_26:1.1
	MUSBDriver-0_25:1.1
	MUSBDriver-0_24:1.1
	MUSBDriver-0_23:1.1
	MUSBDriver-0_22:1.1
	MUSBDriver-0_21:1.1
	MUSBDriver-0_20:1.1
	MUSBDriver-0_19:1.1
	MUSBDriver-0_18:1.1
	MUSBDriver-0_17:1.1
	MUSBDriver-0_16:1.1
	MUSBDriver-0_15:1.1
	MUSBDriver-0_14:1.1
	MUSBDriver-0_13:1.1
	MUSBDriver-0_12:1.1
	MUSBDriver-0_11:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.04.11.23.25.39;	author jlee;	state Exp;
branches;
next	;
commitid	6pcEoJPvdLzddtfv;


desc
@@


1.1
log
@Restructure MUSBDriver source code, rework host mode endpoint handling, plus other misc changes
Detail:
  c/musb_debug - New file containing debug code.
  c/musb_peri - Contains the code for handling peripheral mode, taken from c/musb
  c/musb_root - Contains the code for handling the USBDriver-required 'soft' hub, taken from c/musb
  c/musb_usb - Contains initialisation code and other misc USBDriver-related code, mostly taken from c/musb
  c/musb_util - Misc utility functions from c/musb
  h/musb_util, h/musb_usb - A couple of new header files to help with breaking things up. Might make sense to break h/musb_usb down further (or just consolidate everything back into h/musb)
  c/musb - Stripped out pretty much everything except code related to host-mode endpoint and interrupt handling. Instances of the new musb_multiplexer struct are used to handle endpoint allocation, and allocation is now performed on a per-usbd_xfer basis instead of on a per-pipe basis. This should allow the code to cope better with situations where the number of pipes is greater than the number of physical endpoints, although much work is still required.
  c/cmodule, c/port, c/tps, h/cmodule, h/musb - Misc tweaks and changes
Admin:
  Tested on rev A2 BB-xM.


Version 0.11. Tagged as 'MUSBDriver-0_11'
@
text
@/*
 * Copyright (c) 2009 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jeffrey Lee (me@@phlamethrower.co.uk)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef MUSBDRIVER_USB_H
#define MUSBDRIVER_USB_H

#include "musb.h"

/* USBDriver interfaces */

extern usbd_status musb_init(musb_softc_t *sc);
extern int musb_intr(musb_softc_t *sc);

extern void musb_abort_xfer(usbd_xfer_handle xfer,usbd_status status);

/* musb_root.c */

extern usbd_status	musb_root_ctrl_transfer(usbd_xfer_handle);
extern usbd_status	musb_root_ctrl_start(usbd_xfer_handle);
extern void		musb_root_ctrl_abort(usbd_xfer_handle);
extern void		musb_root_ctrl_close(usbd_pipe_handle);
extern void		musb_root_ctrl_done(usbd_xfer_handle);

extern usbd_status	musb_root_intr_transfer(usbd_xfer_handle);
extern usbd_status	musb_root_intr_start(usbd_xfer_handle);
extern void		musb_root_intr_abort(usbd_xfer_handle);
extern void		musb_root_intr_close(usbd_pipe_handle);
extern void		musb_root_intr_done(usbd_xfer_handle);

/* musb.c */

extern usbd_status	musb_device_transfer(usbd_xfer_handle);
extern usbd_status	musb_device_start(usbd_xfer_handle);
extern void		musb_device_abort(usbd_xfer_handle);
extern void		musb_device_close(usbd_pipe_handle);
extern void		musb_device_clear_toggle(usbd_pipe_handle);
extern void		musb_device_done(usbd_xfer_handle);

#endif
@
