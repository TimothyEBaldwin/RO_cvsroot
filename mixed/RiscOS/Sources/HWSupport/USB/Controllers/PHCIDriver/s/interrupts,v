head	1.3;
access;
symbols
	PHCIDriver-0_11:1.3
	PHCIDriver-0_10:1.3
	PHCIDriver-0_09:1.3
	PHCIDriver-0_08:1.3
	PHCIDriver-0_07:1.3
	PHCIDriver-0_06:1.2
	PHCIDriver-0_05:1.2
	PHCIDriver-0_04:1.2
	PHCIDriver-0_03:1.1;
locks; strict;
comment	@# @;


1.3
date	2001.11.13.11.18.19;	author dellis;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.19.17.54.37;	author dellis;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.14.14.47.35;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  - Support added for overcurrent detection
  - Code added for supporting device side of controller
  - Better error detection and recovery

Detail:
  Analogue overcurrent detection has been switched on in the hardware
configuration.

  Code has been added to support the device side of the controller, although
this is by default switched out.  It hasn't been tested, but is included for
completeness.

  Error recovery is now much more robust and there is now an assembly option
to add a null packet to the end of the payload buffer.  This prevents
multiple transaction attempts on interrupt endpoints.

Admin:
  Tested extensively on a RiscPC.  The device controller code has been tested
at all (but isn't by default included).


Version 0.07. Tagged as 'PHCIDriver-0_07'
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

SVC_Mode        *       3

usb_data
                = &00, &08          ; blank except for active bit
                = &08, &1c          ; max packet 16, last PTD, low speed, endpoint 1
                = &08, &08          ; 16 bytes, out
                = &05, &00          ; address 5

                = 0,   0,   0,   0
                = 0,   0,   0,   0
                = 0,   0,   0,   0
                = 0,   0,   0,   0
usb_data_end

; Increment a location in workspace, using lr as a temporary register
                MACRO
                TSTIRQ  $irq
                TST     R4, #$irq
                LDRNE   lr, $irq.Count
                ADDNE   lr, lr, #1
                STRNE   lr, $irq.Count
                BLNE    $irq._handler
                MEND

interrupt_handler
                EntryS  "R0-R2,R4,R11"
                LDR     R11, BaseAddress
 [ SafeSVC
                MRS     r2, CPSR                ; get hold of the flags (or NOP)
                ORR     r1, r2, #SVC_Mode       ; force SVC mode (preserve 32-bitness)
                MSR     CPSR_c, r1              ; switch mode, preserve flags
                MOV     r1, r14_svc
 ]
                ; Read and Acknowledge interrupts as soon as possible
                MOV     R0, #HcuPInterrupt
                HCLDRH  R4, R0
                HCSTRH  R4, R0

                ; Dispatch interrupts
                TSTIRQ  ClkReady
                TSTIRQ  HCSuspended
                TSTIRQ  OPR_Reg
                TSTIRQ  AllEOTInt
                TSTIRQ  ATLInt
                TSTIRQ  SOFITLInt
 [ SafeSVC
                MOV     r14_svc, r1
                MSR     CPSR_c, r2
 ]
                EXITS


ClkReady_handler
HCSuspended_handler
                MOV     pc, lr

OPR_Reg_handler
                Entry "R4"
                ; Read, and acknowledge immediately.
                MOV     R0, #HcInterruptStatus
                HCLDR   R4, R0
                HCSTR   R4, R0

                ; Scheduling overrun
                TST     R4, #OHCI_SO

                ; There is no writeback done head for PHCI

                ; Start of frame
                TST     R4, #OHCI_SF

                ; Resume detected
                TST     R4, #OHCI_RD

                ; Unrecoverable error
                TST     R4, #OHCI_UE

                ; Frame number overflow
                TST     R4, #OHCI_FNO

                ; Root hub status change
                TST     R4, #OHCI_RHSC
                BLNE    OHCI_RHSC_handler

                ; Ownership change
                TST     R4, #OHCI_OC

                EXIT

OHCI_RHSC_handler
                Entry "R0-R3"
                ; Build up the change bits
                MOV     R2, #0

                ; Check the root hub for changes
                MOV     R0, #HcRhStatus
                HCLDR   R1, R0
                TST     R1, #&30000
                ORRNE   R2, R2, #1

                ; Check ports for changes
                MOV     R0, #HcRhPortStatus1
                HCLDR   R1, R0
                TST     R1, #&1f0000
                ORRNE   R2, R2, #2

                MOV     R0, #HcRhPortStatus2
                HCLDR   R1, R0
                TST     R1, #&1f0000
                ORRNE   R2, R2, #4

                ; If there's any change, put it in the buffer
                TEQ     R2, #0
                EXIT    EQ

                ; Insert byte into buffer
                MOV     R0, #BufferReason_InsertByte
                LDR     R3, RHInterrupt
                LDR     R1, [R3, #:INDEX:ep_buffer_priv]
                Debug   module, "byte, buffer", R2, R1
                CallBuffMan
                EXIT

AllEOTInt_handler
                MOV     pc, lr
ATLInt_handler
                Entry   "r0-r2"

                ; Don't proceed if in test mode
                LDR     r0, Flags
                TST     r0, #flag_Testing
                EXIT    NE

; Read from the ATL buffer
                MOV     R0, #HcTransferCounter
                LDR     R1, ATLBufferSize
; [ DummyLastPTD
;                SUB     R1, R1, #8
; ]
                HCSTRH  R1, R0

                ADR     R2, SoftATLBuffer

                MOV     R0, #HcATLBufferPort
                STR     R0, HCCommand
10
                LDR     R0, HCData
                STRB    R0, [R2], #1
                MOV     R0, R0, LSR#8
                STRB    R0, [R2], #1
                SUBS    R1, R1, #2
                BHI     %b10

                LDR     r0, Flags
                BIC     r0, r0, #flag_ATLBufferFilled
                STR     r0, Flags

                BL      parse_atl_buffer
                BL      _write_atl_buffer
                EXIT

SOFITLInt_handler
                Entry   "r0, r1"

                ; Only fill a buffer if the pending flag is set and a buffer isn't already full
                LDR     r0, Flags
                AND     r1, r0, #flag_ATLBufferFilled:OR:flag_ATLBufferPending:OR:flag_Testing
                TEQ     r1, #flag_ATLBufferPending
                EXIT    NE

                BIC     r0, r0, #flag_ATLBufferPending
                STR     r0, Flags

                BL      _write_atl_buffer

                ; Test: disable interrupt now.
;                MOV     r0, #HcuPInterruptEnable
;                MOV     r1, #0
;                HCSTRH  r1, r0
                EXIT

_write_atl_buffer
                Entry   "r0-r2"
                BL      build_atl_buffer
                STR     r0, ATLBufferSize
                TEQ     r0, #0
                DebugIf EQ, module, "no more data to write"
                EXIT    EQ

;                Debug   module, "ATL buffer size ", r0

                MOV     R1, #HcTransferCounter
                HCSTRH  R0, R1

                MOV     R1, #HcATLBufferPort:OR:&80
                STR     R1, HCCommand

                ADR     R2, SoftATLBuffer
20
                LDR     R1, [R2], #2
                STR     R1, HCData
                SUBS    R0, R0, #2
                BHI     %b20

                LDR     r0, Flags
                ORR     r0, r0, #flag_ATLBufferFilled
                STR     r0, Flags

                EXIT

                END
@


1.2
log
@  Much more functional driver.

Detail:
  The driver now implements a root hub, and can support interrupt, bulk and
control transfers.  Connections are made by opening the phci device in
devicefs with a special field specifying the endpoint number and type.

  DevDesc has been enhanced to print out on the command line if no address is
given.

Admin:
  Tested extensively on RiscPC and STB.  Still awaiting the writing of a
Spec.

Version 0.04. Tagged as 'PHCIDriver-0_04'
@
text
@d152 3
@


1.1
log
@  Initial import of PHCIDriver

Detail:
  The driver is currently fairly limited.  It sets up the hardware, and
supplies some * commands.

  It has been commited primarily for TestTask to make use of

Admin:
  Tested with TestTask on a STB, and quite extensively on a RiscPC.  The
* command PHCIDevDesc has been observed to put the chip into a confused state
after something of the order of 1000 repeats.



Version 0.03. Tagged as 'PHCIDriver-0_03'
@
text
@d16 2
d41 1
a41 1
                EntryS  "R0,R4,R11"
d43 6
a48 1

d61 4
a64 1

a78 5
;                MOV     R0, #138
;                LDR     R1, RHInterruptBuffer
;                MOV     R2, R4
;                SWI     XOS_Byte

d106 1
a106 1
                Entry
d133 3
a135 1
                LDR     R1, RHInterruptBuffer
d140 1
d142 1
a142 8
SOFITLInt_handler
                MOV     pc, lr






d144 4
d151 1
a151 1
                MOV     R1, #usb_data_end - usb_data
d154 2
d160 3
d166 40
a205 4
; Write to the ATL buffer
                MOV     R0, #HcTransferCounter
                MOV     R1, #usb_data_end - usb_data
                HCSTRH  R1, R0
d207 2
a208 2
                MOV     R0, #HcATLBufferPort:OR:&80
                STR     R0, HCCommand
d210 1
a210 1
                ADR     R2, usb_data
d212 3
a214 3
                LDR     R0, [R2], #2
                STR     R0, HCData
                SUBS    R1, R1, #2
d217 3
a219 11
                ; If there are any interrupts pending, disable them, as we've run out of CPU time
;                MOV     R0, #HcuPInterrupt
;                HCLDRH  R1, R0
;                TST     R1, #1
;                EXITS   EQ

;                MOV     R0, #HcuPInterruptEnable
;                MOV     R1, #0
;                HCSTRH  R1, R0

;                EXITS
d221 1
@

