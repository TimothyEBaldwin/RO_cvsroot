head	1.5;
access;
symbols
	PHCIDriver-0_11:1.5
	PHCIDriver-0_10:1.4
	PHCIDriver-0_09:1.4
	PHCIDriver-0_08:1.4
	PHCIDriver-0_07:1.4
	PHCIDriver-0_06:1.3
	PHCIDriver-0_05:1.2
	PHCIDriver-0_04:1.2
	PHCIDriver-0_03:1.1;
locks; strict;
comment	@# @;


1.5
date	2002.05.01.09.08.54;	author mboura;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.13.11.18.19;	author dellis;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.13.57.27;	author dellis;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.19.17.54.37;	author dellis;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.14.14.47.35;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  Now dies if it doesn't find the hardware
Detail:
  Correct flag now checked.
  Cleans up correctly if hardware_claim fails
  Returns BadHard = "Hardware not supported" error.
Admin:
  Multiple RMLoad works as expected with and without the hardware check succedding. Tested on STB.

Version 0.11. Tagged as 'PHCIDriver-0_11'
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; RISC OS configuration
podule_number           *   0
 [ Machine="STB400"
USB_Podule_DevNo        *   8
 |
USB_Podule_DevNo        *   IOMD_Podule_DevNo
 ]
isp1161_offset          *   &800000


pinfo           RN 5

                ^ 0, pinfo
easi_space      # 4
irq_request     # 4
irq_mask        # 4
irq_bitmask     # 4
pinfo_size      * :INDEX:@@

pinfo_request   * Podule_ReadInfo_EASILogical:OR:Podule_ReadInfo_IntRequest:OR:Podule_ReadInfo_IntMask:OR:Podule_ReadInfo_IntValue

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Initialise the hardware
;

all_ones
                DCB     &ff
                ALIGN

hardware_claim
                Entry "R0-R5",pinfo_size

                ; Get info for podule
                LDR     R0, =pinfo_request
                MOV     R1, sp
                MOV     R2, #pinfo_size
                MOV     R3, #podule_number
                SWI     XPodule_ReadInfo
                BVS     %f99
                MOV     R5, R1

                ; Record base address
                LDR     R11, easi_space
                ADD     R11, R11, #isp1161_offset
                STR     R11, BaseAddress

                ; We need fast access to the chip
                MOV     R3, #podule_number
                MOV     R0, #Podule_Speed_TypeC
                SWI     XPodule_SetSpeed
                BVS     %f99

                ; Is the chip there?  Read the top byte of the chip id (allowing for a few changes)
                MOV     R0, #HcChipID
                HCLDRH  R1, R0
                AND     R1, R1, #&ff00
                TEQ     R1, #&6100
                ADRNEL  r0, ErrorBlock_BadHard
                BLNE    make_error
                BVS     %f99
                
                ; Turn IOMD interrupt off
                LDR     R3, irq_mask
 [ Machine="STB400"
                MOV     R2, #1
 |
                LDR     R2, irq_bitmask
 ]
                PHPSEI
                LDRB    R0, [R3]
                BIC     R0, R0, R2
                STRB    R0, [R3]
                PLP

                ; Turn HC interrupts off
                MOV     R0, #HcuPInterruptEnable
                MOV     R1, #0
                HCSTRH  R1, R0

                MOV     R0, #HcInterruptDisable
                MOV     R1, #-1
                HCSTR   R1, R0

                ; Claim the interrupt
 [ Machine="STB400"
                MOV     R4, #1
                ADR     R3, all_ones
 |
                LDR     R4, irq_bitmask
                LDR     R3, irq_request
 ]
                MOV     R2, R12
                ADR     R1, interrupt_handler
                MOV     R0, #USB_Podule_DevNo
                SWI     XOS_ClaimDeviceVector
                BVS     %f99

                ; Set up hardware correctly.
                MOV     r0, #HcControl
                MOV     r1, #0
                HCSTR   r1, r0

                MOV     r0, #HcHardwareConfiguration
                LDR     r1, =AnalogOCEnable:OR:HcHardConfReserved:OR:EOTInputPolarity:OR:DataBusWidth:OR:InterruptOutputPolarity:OR:InterruptPinEnable
                HCSTRH  r1, r0

                MOV     r0, #HcFmInterval   ; set fs largest packet - needed for low speed as well
                LDR     r1, =&20002edf
                HCSTR   r1, r0

                ; Set up device hardware properly
                MOV     r0, #WCONF
                LDR     r1, =NOLAZY:OR:(3 * CKDIV):OR:DRQPOL:OR:INTPOL
                DCSTRH  r1, r0

                ; Turn off power
                MOV     r0, #HcRhStatus
                MOV     r1, #&1
                HCSTR   r1, r0

                ; Turn off port power
                MOV     r1, #&200
                MOV     r0, #HcRhPortStatus1
                HCSTR   r1, r0
                MOV     r0, #HcRhPortStatus2
                HCSTR   r1, r0

                ; set descriptor to have per port power
                MOV     r0, #HcRhDescriptorA
                LDR     r1, =&1000901   ; per port power
                HCSTR   r1, r0

                ; set all ports as ganged
                LDR     r1, =&40004
                MOV     r0, #HcRhDescriptorB
                HCSTR   r1, r0

                ; Set ATL buffer to max
                MOV     r0, #HcATLBufferLength
                MOV     r1, #&1000
                HCSTRH  r1, r0

                ; Zero the ATL buffer
                MOV     r0, #HcTransferCounter
                HCSTRH  r1, r0
                MOV     r0, #HcATLBufferPort:OR:&80
                STR     r0, HCCommand
                MOV     r2, #0
10              STR     r2, HCData
                SUBS    r1, r1, #2
                BHI     %b10

                ; Reenable IOMD interrupt
                LDR     R3, irq_mask
 [ Machine="STB400"
                MOV     R2, #1
 |
                LDR     R2, irq_bitmask
 ]
                PHPSEI
                LDRB    R0, [R3]
                ORR     R0, R0, R2
                STRB    R0, [R3]
                PLP

                ; Start the controller.  We use repeated writes until it's ready (maybe we should use the ClkReady IRQ?)
                MOV     R3, #HcControl
                SWI     OS_ReadMonotonicTime
                ADD     R2, R0, #100
20
                MOV     R1, #&80
                HCSTR   R1, R3
                SWI     OS_ReadMonotonicTime
                CMP     R0, R2
                MOV     R0, #6
                MOV     R1, #0
                SWILE   XOS_UpCall
                BGT     %f30
                HCLDR   R1, R3
                TEQ     R1, #&80
                BNE     %b20
30
                Debug   module, "Last read from HcControl: ", R1

                ; Clear all interrupts
                MOV     R0, #HcuPInterrupt
                HCLDRH  R1, R0
                HCSTRH  R1, R0

                ; Turn HC interrupts on
                PHPSEI
                MOV     R0, #HcuPInterruptEnable
                MOV     R1, #HCAllInts
                HCSTRH  R1, R0
                PLP

                EXIT
99
                STR     R0, [sp, #Proc_RegOffset]
                EXIT

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Shutdown the hardware
;

hardware_release
                Entry   "R0-R5", pinfo_size
                LDR     R11, BaseAddress

                ; Turn HC interrupts off
                MOV     R0, #HcuPInterruptEnable
                MOV     R1, #0
                HCSTRH  R1, R0

                ; Release the interrupt
 [ Machine="STB400"
                MOV     R4, #1
                ADR     R3, all_ones
 |
                ; Get info for podule
                LDR     R0, =pinfo_request
                MOV     R1, sp
                MOV     R2, #pinfo_size
                MOV     R3, #podule_number
                SWI     XPodule_ReadInfo
                BVS     %f99
                MOV     R5, R1

                LDR     R4, irq_bitmask
                LDR     R3, irq_request
 ]
                MOV     R2, R12
                ADR     R1, interrupt_handler
                MOV     R0, #USB_Podule_DevNo
                SWI     XOS_ReleaseDeviceVector

                EXIT

99
                STR     R0, [sp, #Proc_RegOffset]
                EXIT

                END
@


1.4
log
@  - Support added for overcurrent detection
  - Code added for supporting device side of controller
  - Better error detection and recovery

Detail:
  Analogue overcurrent detection has been switched on in the hardware
configuration.

  Code has been added to support the device side of the controller, although
this is by default switched out.  It hasn't been tested, but is included for
completeness.

  Error recovery is now much more robust and there is now an assembly option
to add a null packet to the end of the payload buffer.  This prevents
multiple transaction attempts on interrupt endpoints.

Admin:
  Tested extensively on a RiscPC.  The device controller code has been tested
at all (but isn't by default included).


Version 0.07. Tagged as 'PHCIDriver-0_07'
@
text
@d74 4
a77 2
                EXIT    NE              ; die silently if not present

@


1.3
log
@  Overcurrent detection fixed.

Detail:
  Analogue overcurrent detection bit wasn't being set.

Admin:
  Tested on STB


Version 0.06. Tagged as 'PHCIDriver-0_06'
@
text
@d122 1
a122 1
                LDR     r1, =&8002edf
d147 2
a148 2
                ; set all ports as per port
                LDR     r1, =&60006
@


1.2
log
@  Much more functional driver.

Detail:
  The driver now implements a root hub, and can support interrupt, bulk and
control transfers.  Connections are made by opening the phci device in
devicefs with a special field specifying the endpoint number and type.

  DevDesc has been enhanced to print out on the command line if no address is
given.

Admin:
  Tested extensively on RiscPC and STB.  Still awaiting the writing of a
Spec.

Version 0.04. Tagged as 'PHCIDriver-0_04'
@
text
@d118 1
a118 1
                LDR     r1, =HcHardConfReserved:OR:EOTInputPolarity:OR:DataBusWidth:OR:InterruptOutputPolarity:OR:InterruptPinEnable
d144 1
a144 2
                HCLDR   r1, r0
                ORR     r1, r1, #1:SHL:8 ; per port power
d147 2
a148 3
                ; set all ports as per port power control
                MVN     r1, #0
                MOV     r1, r1, LSL#16
@


1.1
log
@  Initial import of PHCIDriver

Detail:
  The driver is currently fairly limited.  It sets up the hardware, and
supplies some * commands.

  It has been commited primarily for TestTask to make use of

Admin:
  Tested with TestTask on a STB, and quite extensively on a RiscPC.  The
* command PHCIDevDesc has been observed to put the chip into a confused state
after something of the order of 1000 repeats.



Version 0.03. Tagged as 'PHCIDriver-0_03'
@
text
@d69 7
d94 4
a111 2


d122 1
a122 1
                LDR     r1, =&20002edf
d130 1
a130 1
                ; Turn on power
d132 20
a151 1
                MOV     r1, #&10000
d182 1
a182 6
                ; Turn HC interrupts on
                MOV     R0, #HcuPInterruptEnable
                MOV     R1, #HCAllInts
                HCSTRH  R1, R0

                ; Start the controller
d191 3
d199 14
d217 2
@

