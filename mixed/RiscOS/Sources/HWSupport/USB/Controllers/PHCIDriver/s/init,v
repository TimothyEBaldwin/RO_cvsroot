head	1.5;
access;
symbols
	PHCIDriver-0_11:1.4
	PHCIDriver-0_10:1.4
	PHCIDriver-0_09:1.4
	PHCIDriver-0_08:1.4
	PHCIDriver-0_07:1.4
	PHCIDriver-0_06:1.3
	PHCIDriver-0_05:1.3
	PHCIDriver-0_04:1.2
	PHCIDriver-0_03:1.1;
locks; strict;
comment	@# @;


1.5
date	2009.06.11.22.11.30;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.13.11.18.19;	author dellis;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.22.17.06.53;	author dellis;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.19.17.54.37;	author dellis;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.14.14.47.35;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.11. Not tagged
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
; 		Copyright 2001 Pace Microtechnology plc
;

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Global header files
;
                GET     Hdr:ListOpts
		OPT	OptNoList
                GET     Hdr:NdrDebug		; definition of true
                GET     Hdr:DDVMacros
                GET     Hdr:Macros		; system wide macro definitions
                GET     Hdr:System		; swis and hardware declarations
		GET	Hdr:Machine.<Machine>	; for machine-specific flags
                GET     Hdr:ModHand		; Module handler reason codes
                GET     Hdr:FSNumbers           ; for NewErrors
                GET     Hdr:NewErrors           ; for global errors
                GET     Hdr:HighFSI		; high level filing system
                GET     Hdr:DevNos		; device no for new IRQ handling
                GET     Hdr:Services		; service call info
                GET     Hdr:Symbols		; constants TRUE, FALSE, VFlag
                GET     Hdr:MsgTrans		; MessageTrans constants
                GET     Hdr:Proc                ; ENTRY and EXIT macros
		GET	Hdr:Buffer
                GET     Hdr:ResourceFS
                GET     Hdr:DeviceFS		; reason code definitions
                GET     Hdr:Podule
		GET     Hdr:IO.IOEB
                GET     <Lib$Dir>.USB.Hdr.OHCIReg
		$GetIO				; I need IOMD declarations etc

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Global variables
;
		OPT 	OptList
                        GBLL    test
 		 	GBLL	debug
		 	GBLL	border_handshake
			GBLL	counting
                        GBLL    SafeSVC
                        GBLL    USBDevice
                        GBLL    DummyLastPTD
 [ :DEF:debugging
debug                   SETL    true
 ]
test                    SETL    true    ; include test *commands
debug_module            SETL    true    ; use debug it output
border_handshake 	SETL	false	; to flash border when handshaking
counting		SETL	false	; to count stuff
SafeSVC                 SETL    true    ; only drop into SVC around buffman
USBDevice               SETL    true    ; support the Device side of the ISP1161
DummyLastPTD            SETL    true   ; add a dummy last PTD to avoid multiple interrupt transaction attempts

devicecall              SETD    true
module                  SETD    false
atlbuffer               SETD    false
roothub                 SETD    false
device                  SETD    false
interrupt               SETD    true
control                 SETD    true

XDebugIt_WriteC     *   0x4ba82 + Auto_Error_SWI_bit

PTD_MaxErrorCount   *   4              ; number of errors in a row before reporting


                GBLL    standalonemessages
 [ :DEF: standalone
standalonemessages SETL standalone
 |
standalonemessages SETL {FALSE}
 ]


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; User header files
;

                GET     VersionASM
                GET     Hdr.Registers
		GET 	errors.s	; error handling stuff
		GET	macros.s	; some useful macros
                GET     main.s		; module interfaces
		GET 	hardware.s	; hardware detection and irq stuff
		GET 	interrupts.s	; handle irqs
		GET	hostcall.s 	; handle devicefs stuff for host
;		GET	devicecall.s 	; handle devicefs stuff for device
;               GET     swis.s
                GET     root_hub.s

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Debug routine code
;
 [ debug
                ALIGN
      		InsertNDRDebugRoutines     ; ensure this is after module header !
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                END
@


1.4
log
@  - Support added for overcurrent detection
  - Code added for supporting device side of controller
  - Better error detection and recovery

Detail:
  Analogue overcurrent detection has been switched on in the hardware
configuration.

  Code has been added to support the device side of the controller, although
this is by default switched out.  It hasn't been tested, but is included for
completeness.

  Error recovery is now much more robust and there is now an assembly option
to add a null packet to the end of the payload buffer.  This prevents
multiple transaction attempts on interrupt endpoints.

Admin:
  Tested extensively on a RiscPC.  The device controller code has been tested
at all (but isn't by default included).


Version 0.07. Tagged as 'PHCIDriver-0_07'
@
text
@d98 9
a106 9
		GET 	s.errors	; error handling stuff
		GET	s.macros	; some useful macros
                GET     s.main		; module interfaces
		GET 	s.hardware	; hardware detection and irq stuff
		GET 	s.interrupts	; handle irqs
		GET	s.hostcall 	; handle devicefs stuff for host
;		GET	s.devicecall 	; handle devicefs stuff for device
;                GET     s.swis
                GET     s.root_hub
@


1.3
log
@  - Fix to control transfers
  - Clarification of root hub interrupts
  - Error returns from USB Requests

Detail:
  Control transfers weren't properly counting the data portion across
multiple frames.  This is now properly counted.

  Root hub interrupts were only being turned on during reads.  They are now
on for the duration of the stream being open.

  If a control transfer fails during device call &80000000 (USB Request) then
the completion code is returned with an error message.

Admin:
  Tested on a STB and RiscPC.  It has been impossible to find a setting
of FSLargestDataPacket which is mutually compatible for full speed and low
speed devices.  Most low speed devices work with the setting &800 but some
mice appear not to, and only start working if the setting is changed to
&2000, however then printing stops working.

Version 0.05. Tagged as 'PHCIDriver-0_05'
@
text
@d26 1
d57 5
a63 2
;debug_file              SETS    "$.debug"
;debug 		 	SETL	true	; to include debug macros
d67 2
d70 7
a76 10
                        GBLL    debugdevicecall
                        GBLL    debugmodule
                        GBLL    debugatlbuffer
                        GBLL    debugroothub
                        GBLL    debuginterrupt
debugdevicecall         SETL    true
debugmodule             SETL    true
debugatlbuffer          SETL    true
debugroothub            SETL    false
debuginterrupt          SETL    false    ; interrupt related debugging
d80 2
a81 12
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Debug header files
;
		GBLS	conditional_get
 [ :DEF:debugging
debug           SETL    true
conditional_get	SETS	"GET 	Hdr:Debug"		; Standard debug macros
 |
conditional_get SETS	""
 ]
		$conditional_get
d103 2
a104 1
		GET	s.devicecall 	; handle devicefs stuff
@


1.2
log
@  Much more functional driver.

Detail:
  The driver now implements a root hub, and can support interrupt, bulk and
control transfers.  Connections are made by opening the phci device in
devicefs with a special field specifying the endpoint number and type.

  DevDesc has been enhanced to print out on the command line if no address is
given.

Admin:
  Tested extensively on RiscPC and STB.  Still awaiting the writing of a
Spec.

Version 0.04. Tagged as 'PHCIDriver-0_04'
@
text
@d69 1
a69 1
debugdevicecall         SETL    false
d71 1
a71 1
debugatlbuffer          SETL    false
@


1.1
log
@  Initial import of PHCIDriver

Detail:
  The driver is currently fairly limited.  It sets up the hardware, and
supplies some * commands.

  It has been commited primarily for TestTask to make use of

Admin:
  Tested with TestTask on a STB, and quite extensively on a RiscPC.  The
* command PHCIDevDesc has been observed to put the chip into a confused state
after something of the order of 1000 repeats.



Version 0.03. Tagged as 'PHCIDriver-0_03'
@
text
@d51 1
d55 5
a59 4
                        GBLL    debug_devicecall
                        GBLL    debugmodule

debug 		 	SETL	false	; to include debug macros
d62 8
a69 2
debug_module            SETL    true
debug_devicecall        SETL    true
d71 3
d111 2
d119 1
@

