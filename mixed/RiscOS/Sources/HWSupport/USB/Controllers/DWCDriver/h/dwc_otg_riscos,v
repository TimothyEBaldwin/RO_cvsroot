head	1.6;
access;
symbols
	DWCDriver-0_35:1.6
	DWCDriver-0_34:1.6
	DWCDriver-0_33:1.6
	DWCDriver-0_32:1.6
	DWCDriver-0_31:1.6
	DWCDriver-0_30:1.6
	DWCDriver-0_29:1.6
	DWCDriver-0_28:1.6
	DWCDriver-0_27:1.6
	DWCDriver-0_26:1.6
	DWCDriver-0_24-1:1.6
	DWCDriver-0_25:1.5
	DWCDriver-0_24:1.4
	DWCDriver-0_23:1.4
	DWCDriver-0_22:1.4
	DWCDriver-0_21:1.4
	DWCDriver-0_20:1.4
	DWCDriver-0_19:1.4
	DWCDriver-0_18:1.4
	DWCDriver-0_17:1.4
	DWCDriver-0_16:1.4
	DWCDriver-0_15:1.3
	DWCDriver-0_14:1.2
	DWCDriver-0_13:1.2
	DWCDriver-0_12:1.2
	DWCDriver-0_11:1.2
	DWCDriver-0_10:1.2
	DWCDriver-0_09:1.2
	DWCDriver-0_08:1.1
	DWCDriver-0_07:1.1
	DWCDriver-0_06:1.1
	DWCDriver-0_05:1.1
	DWCDriver-0_04:1.1
	DWCDriver-0_03:1.1
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.6
date	2016.03.04.20.54.30;	author rool;	state Exp;
branches;
next	1.5;
commitid	MvG9A9da0K4NQmXy;

1.5
date	2016.03.04.01.33.42;	author jballance;	state Exp;
branches;
next	1.4;
commitid	WvfwatlEQwEQrgXy;

1.4
date	2014.07.08.22.17.40;	author jlee;	state Exp;
branches;
next	1.3;
commitid	Dy0m80d21vUhMCHx;

1.3
date	2014.06.19.21.31.16;	author jlee;	state Exp;
branches;
next	1.2;
commitid	Q5Tr8KszgORb8bFx;

1.2
date	2012.09.17.16.35.20;	author jlee;	state Exp;
branches;
next	1.1;
commitid	DXVFy2WJjyak3Ukw;

1.1
date	2012.06.03.15.14.36;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.6
log
@Revert accidental commits
Admin:
  These changes are currently subject to rework via the normal submissions channel.
@
text
@/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef DWC_OTG_HCD_RISCOS_H
#define DWC_OTG_HCD_RISCOS_H

#include <stdbool.h>

#include "dwc/driver/dwc_otg_driver.h"

struct dwc_otg_core_if;
struct dwc_otg_hcd;
struct dwc_otg_hcd_urb;

struct dwc_softc_xfer {
	struct usbd_xfer xfer; /* Base USBDriver struct */
};

struct dwc_softc_pipe {
	struct usbd_pipe pipe; /* Base USBDriver struct */

	void *dwc_priv; /* DWC endpoint handle */

	struct dwc_otg_hcd_urb *urb; /* DWC urb; one per pipe instead of one per xfer, since the BSD layer likes to manage urb/xfer scheduling itself */

	struct dwc_softc_xfer *xfer; /* Active xfer (i.e. the one that filled in the urb details) */

	usb_device_request_t *request; /* DMA buffer for control endpoint requests */
	dwc_dma_t dma_req; /* DMA addr of request */
};

/* Bus struct we register with USBDriver */
typedef struct dwc_softc {
	struct usbd_bus sc_bus; /* Base USBDriver struct */

	int device_number; /* Current IRQ device number (USB or MPHI) */
	int usb_device_number;
	int mphi_device_number;

	/* USBDriver bits */

	usbd_xfer_handle sc_intrxfer; /* Interrupt xfer for root hub; used to notify of port status changes */

	SIMPLEQ_HEAD(, usbd_xfer) sc_free_xfers; /* free xfers */

	u_int8_t sc_addr; /* Address assigned to us */
	u_int8_t sc_conf; /* Device configuration */
	char sc_vendor[16];		/* vendor string for root hub (doesn't get set anywhere?) */
	int sc_id_vendor;		/* vendor ID for root hub (doesn't get set anywhere?) */

	/* DWC bits */
	dwc_otg_device_t dwc_dev; /* DWC driver device struct */

	bool hcd_on; /* Is HCD initialised yet? */

	u_int32_t port; /* HCD port number */
} dwc_softc_t;

#define DWC_SOFTC_INTR_ENDPT 1

extern bool reclaim_fiq_vector;
extern bool own_fiq_vector;

extern _kernel_oserror *dwc_otg_riscos_init(const uint32_t *hw_base,const uint8_t *mphi_base,int usb_device_number,int mphi_device_number,dwc_softc_t *softc);
extern void dwc_otg_riscos_shutdown(dwc_softc_t *softc);

extern int dwc_otg_riscos_irq(dwc_softc_t *softc);

extern void dwc_otg_riscos_try_use_fiqs(dwc_softc_t *softc, bool need_to_claim);
extern void dwc_otg_riscos_release_fiq(dwc_softc_t *softc);

/* softc_root.c */

extern usbd_status softc_root_ctrl_transfer(usbd_xfer_handle);
extern usbd_status softc_root_ctrl_start(usbd_xfer_handle);
extern void softc_root_ctrl_abort(usbd_xfer_handle);
extern void softc_root_ctrl_close(usbd_pipe_handle);
extern void softc_root_ctrl_done(usbd_xfer_handle);

extern usbd_status softc_root_intr_transfer(usbd_xfer_handle);
extern usbd_status softc_root_intr_start(usbd_xfer_handle);
extern void softc_root_intr_abort(usbd_xfer_handle);
extern void softc_root_intr_close(usbd_pipe_handle);
extern void softc_root_intr_done(usbd_xfer_handle);

/* softc_device.c */

extern usbd_status softc_device_transfer(usbd_xfer_handle);
extern usbd_status softc_device_start(usbd_xfer_handle);
extern void softc_device_abort(usbd_xfer_handle);
extern void softc_device_close(usbd_pipe_handle);
extern void softc_device_clear_toggle(usbd_pipe_handle);
extern void softc_device_done(usbd_xfer_handle);

extern void softc_abort_xfer(usbd_xfer_handle xfer,usbd_status status);

#define MS_TO_TICKS(ms) (ms)

#ifdef DWCDRIVER_DEBUG
extern int dwcdebug;
#define DPRINTF(X) if(dwcdebug) logprintf X
#define DPRINTFN(A,X) if(dwcdebug>(A)) logprintf X
#else
#define DPRINTF(X)
#define DPRINTFN(A,X)
#endif

#endif
@


1.5
log
@ Fixes to get isochronous transfer in DWCDriver (Raspberry Pi)`
Detail:

Changes to the RISC OS part of the DWCDriver (Raspberry Pi) necessary to get isochronous transfers working on a pi.

DWCDriver.c.cmodule
DWCDriver.c.dwc_otg_riscos
DWCDriver.c.softc_device
DWCDriver.h.dwc_otg_riscos

Admin:
submitted by Colin Granville
tested on pi

Version 0.25. Tagged as 'DWCDriver-0_25'
@
text
@a38 1

a40 3

	struct dwc_otg_hcd_urb* urb; /* DWC urb */
	int			active; /* Xfer active flag */
d48 4
@


1.4
log
@Enable part two of the FIQ fix
Detail:
  This enables support for the code which handles split transactions in the FIQ handler. This requires some extra logic to allow the FIQ handler to gracefully terminate its state machine when we need to release our hold on the FIQ vector.
  c/dwc_otg_riscos - Update FIQ claim/release functions to initialise and terminate fiq_split_enable. Make FIQ usage bools static const as nothing needs to change them at runtime.
  h/dwc_otg_riscos - Remove unused use_fiq_fix extern
  dwc/driver/c/dwc_otg_hcd_intr - Modify fiq_hcintr_handle() to allow for graceful termination - when terminating, suppress adding new xfers to the schedule and instead force the IRQ handler to deal with them
Admin:
  Tested on Raspberry Pi
  Thrashing Service_ClaimFIQ/Service_ReleaseFIQ didn't result in any obvious problems while split xfers were occuring


Version 0.16. Tagged as 'DWCDriver-0_16'
@
text
@d39 1
d42 3
a51 4
	struct dwc_otg_hcd_urb *urb; /* DWC urb; one per pipe instead of one per xfer, since the BSD layer likes to manage urb/xfer scheduling itself */

	struct dwc_softc_xfer *xfer; /* Active xfer (i.e. the one that filled in the urb details) */

@


1.3
log
@Enable part one of the FIQ fix
Detail:
  This change enables the basic 'FIQ fix', where SOF interrupts are handled by a FIQ handler and all other interrupts are delegated to IRQ.
  During testing it was observed that when the FIQ fix was enabled, what appears to be the host-side VCHIQ process would randomly die. It could take anywhere from several seconds (including during ROM init) or several hours for this to happen.
  After much investigation it looks like the cause was the use of the MPHI peripheral as a mechanism to trigger an IRQ from the FIQ handler. Changing the code in dwc_otg_hcd_handle_intr() so that it 'flushes' MPHI more often (after every interrupt instead of after every 60) seemed to reduce the problem, while changing the IRQ generation mechanism to use a different IRQ source (e.g. timer) made the crash go away entirely
  In the end I've settled on the compromise of using the MPHI peripheral, but in a way in which we only need to poke it once on startup, instead of once for every desired IRQ. Once we have it generating an IRQ we then rely on masking/unmasking the IRQ in the interrupt controller to get the desired effect of downgrading FIQs to IRQs. See the RISCOS_FIQ_DOWNGRADE #define.
  Changed files:
  - c/cmodule - Use symbolic constant for the USB controller ID instead of a magic number. Get the MPHI details from HAL_USBControllerInfo. Pay attention to Service_ClaimFIQ/Service_ReleaseFIQ and enable/disable the FIQ fix as appropriate.
  - c/dwc_common_riscos - Disable some debug functions which were accidentally left in non-debug builds. Change work queue/tasklet thread initialisation to fix a deadlock issue seen on reboot.
  - c/dwc_otg_riscos - Set up the MPHI and enable/disable the FIQ handler as required
  - cmhg/modhead - Pay attention to Service_ClaimFIQ/Service_ReleaseFIQ
  - dwc/driver/c/dwc_otg_hcd_intr, dwc/driver/h/dwc_otg_mphi_fix - RISCOS_FIQ_DOWNGRADE code
  - dwc/dwc_common_port/h/dwc_os - Make sure __DWC_WARN, __DWC_ERROR, DWC_EXCEPTION are compiled out in non-debug builds
  - h/dwc_otg_riscos - declare extra functions/variables related to FIQ fix
  - s/regaccess - Routine to install the FIQ handler on the FIQ vector, and simple HAL call wrapper
Admin:
  Tested on Raspberry Pi
  Requires Kernel-5_35-4_79_2_227, BCM2835-0_34


Version 0.15. Tagged as 'DWCDriver-0_15'
@
text
@a84 1
extern bool use_fiq_fix;
@


1.2
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@d60 3
a62 1
	int device_number; /* IRQ device number */
d85 5
a89 1
extern _kernel_oserror *dwc_otg_riscos_init(const uint32_t *hw_base,int device_number,dwc_softc_t *softc);
d94 3
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@d33 2
d74 1
a74 2
	struct dwc_otg_core_if *core_if; /* CIL instance */
	struct dwc_otg_hcd *hcd; /* HCD instance */
@

