head	1.6;
access;
symbols
	DWCDriver-0_35:1.6
	DWCDriver-0_34:1.6
	DWCDriver-0_33:1.6
	DWCDriver-0_32:1.6
	DWCDriver-0_31:1.5
	DWCDriver-0_30:1.5
	DWCDriver-0_29:1.5
	DWCDriver-0_28:1.4
	DWCDriver-0_27:1.4
	DWCDriver-0_26:1.4
	DWCDriver-0_24-1:1.4
	DWCDriver-0_25:1.4
	DWCDriver-0_24:1.4
	DWCDriver-0_23:1.4
	DWCDriver-0_22:1.4
	DWCDriver-0_21:1.4
	DWCDriver-0_20:1.4
	DWCDriver-0_19:1.4
	DWCDriver-0_18:1.4
	DWCDriver-0_17:1.4
	DWCDriver-0_16:1.4
	DWCDriver-0_15:1.4
	DWCDriver-0_14:1.4
	DWCDriver-0_13:1.4
	DWCDriver-0_12:1.4
	DWCDriver-0_11:1.4
	DWCDriver-0_10:1.4
	DWCDriver-0_09:1.4
	DWCDriver-0_08:1.3
	DWCDriver-0_07:1.3
	DWCDriver-0_06:1.3
	DWCDriver-0_05:1.3
	DWCDriver-0_04:1.2
	DWCDriver-0_03:1.1
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.6
date	2017.09.19.20.28.46;	author rool;	state Exp;
branches;
next	1.5;
commitid	wjT6lLDJh1HeBQ7A;

1.5
date	2016.12.17.10.22.21;	author rool;	state Exp;
branches;
next	1.4;
commitid	cEIxPCqCTT2e7kyz;

1.4
date	2012.09.17.16.35.19;	author jlee;	state Exp;
branches;
next	1.3;
commitid	DXVFy2WJjyak3Ukw;

1.3
date	2012.07.21.19.22.57;	author jlee;	state Exp;
branches;
next	1.2;
commitid	5Kpl2qWWr4efRsdw;

1.2
date	2012.06.24.21.42.04;	author jlee;	state Exp;
branches;
next	1.1;
commitid	7BXP9gA386QIu0aw;

1.1
date	2012.06.03.15.14.35;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.6
log
@Remove some part finished HAL support
Detail:
  A few sections of code guarded by USBHAL defines carried over from MUSBDriver, but were never finished due to the complexity of DWCDriver.
  These are no longer needed now the kernel scans for keys, so remove them.
Admin:
  Couple of warnings in cmodule.c also attended to.
  Submission for USB bounty.

Version 0.32. Tagged as 'DWCDriver-0_32'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef DWCDRIVER_CMODULE_H
#define DWCDRIVER_CMODULE_H

#define NOTUSED(V) ((V)=(V))

#define ErrorBase_DWCDriver 0x820AC0
#define ErrorNumber_DWC_NoReinit     (ErrorBase_DWCDriver+0)
#define ErrorNumber_DWC_NoDWC        (ErrorBase_DWCDriver+1)
#define ErrorNumber_DWC_ClaimVeneer  (ErrorBase_DWCDriver+2)
#define ErrorNumber_DWC_USBTooOld    (ErrorBase_DWCDriver+3)
                                     /* Skip a few for common HC errors */
#define ErrorNumber_DWC_FailInitHCD  (ErrorBase_DWCDriver+8)
#define ErrorNumber_DWC_FailStartHCD (ErrorBase_DWCDriver+9)
#define ErrorNumber_DWC_BadDevParms  (ErrorBase_DWCDriver+10)

extern void* private_word;
extern void build_veneer (int* vn, int* st, size_t sz);

extern int dma_offset;

extern _kernel_oserror *endpoint_disable_cb(_kernel_swi_regs *r,void *pw,void *handle);


extern void riscos_cancel_abort_pipe (void* v);

#ifdef DEBUGLIB
extern int address_valid(void *addr,int align);
#endif

#endif
@


1.5
log
@Internationalised
Detail:
  Add support for standalone messages registration, and actually use the messages rather than just exporting them in ROM builds.
  Changed to use allocated error bases rather than 0.
  Sync controller hunting loop with other HC for ease of comparison.
Admin:
  Submission for USB bounty.
  Tested on a Pi 2.

Version 0.29. Tagged as 'DWCDriver-0_29'
@
text
@a29 1
#ifndef USBHAL
a31 1
#endif
a37 9
#ifdef USBHAL
/* HAL interface */
extern void USBHAL_MUSBDriver_Init(void);
extern void abort_pipe(void *addr);
#define riscos_abort_pipe(ADDR) USBHAL_AddCallback(abort_pipe,ADDR)
#define riscos_cancel_abort_pipe(ADDR) USBHAL_RemoveCallback(abort_pipe,ADDR)
extern int usbhal_musb_do_intr(struct usbd_bus *,int irqdevno);
extern void usbhal_musb_shutdown(struct usbd_bus *);
#else
a38 1
#endif
@


1.4
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@d20 10
@


1.3
log
@Track latest developments on Raspberry Pi github
Detail:
  Makefile, c/cmodule, h/module, dwc/driver/c/dwc_otg_driver, dwc/driver/c/dwc_otg_hcd, dwc/driver/c/dwc_otg_hcd_ddma, dwc/driver/c/dwc_otg_hcd_intr, dwc/driver/c/dwc_otg_hcd_linex, dwc/driver/h/dwc_otg_hcd, dwc/dwc_common_port/c/dwc_common_linux - Track latest developments on Raspberry Pi github. Includes fixes for buffer overruns when unexpectedly receiving too much data, and changes to allow SOF interrupt spam to be reduced.
  c/dwc_common_riscos - Make sure we always round up delay values when converting from msec to csec. Avoids issues with high frequency timers (e.g. SOF re-enable timer) hogging all the CPU time. May be the cause of some other bad behaviour that I've experienced in the past?
Admin:
  Tested on Raspberry Pi with high processor vectors
  Note - SOF fix is currently disabled, as it was causing too many interrupt packets (e.g. mouse clicks) to be lost. Probable cause is that we're running the SOF re-enable timer at 100Hz instead of 1kHz. May be worth investigating moving all timer/thread scheduling over to a HAL timer which can provide us a 1kHz ticker interrupt.


Version 0.05. Tagged as 'DWCDriver-0_05'
@
text
@a28 4
#ifdef SOF_FIX
extern int sof_setting(void);
#endif

@


1.2
log
@Update to latest code from Raspberry Pi github. Improve debugging. Fix race condition that could lead to timeout callbacks inappropriately firing.
Detail:
  Makefile, dwc/* - Updated to latest code from Raspberry Pi github. Tweaks specific to Broadcom hardware have been placed in BCM2835 #ifdef's to allow them to easily be identified/controlled if we need the driver to support different SoCs in future
  c/cmodule, c/dwc_common_riscos, c/port, c/softc_device, h/cmodule - Improved debugging code
  c/softc_device - Schedule timeout before starting transfer instead of after. Fixes issue where a transfer that completes inbetween dwc_otg_hcd_urb_enqueue() and callout_reset() would result in the timeout being enabled even though the transfer is already complete
  s/triggercbs - Synced with latest USBDriver version for consistency
Admin:
  Tested on Raspberry Pi with high processor vectors
  Fixes some, if not all, stability issues


Version 0.04. Tagged as 'DWCDriver-0_04'
@
text
@d29 4
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@d42 4
@

