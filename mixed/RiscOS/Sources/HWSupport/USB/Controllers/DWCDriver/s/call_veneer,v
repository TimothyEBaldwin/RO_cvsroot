head	1.2;
access;
symbols
	DWCDriver-0_35:1.2
	DWCDriver-0_34:1.2
	DWCDriver-0_33:1.2
	DWCDriver-0_32:1.2
	DWCDriver-0_31:1.2
	DWCDriver-0_30:1.2
	DWCDriver-0_29:1.2
	DWCDriver-0_28:1.2
	DWCDriver-0_27:1.2
	DWCDriver-0_26:1.2
	DWCDriver-0_24-1:1.2
	DWCDriver-0_25:1.2
	DWCDriver-0_24:1.2
	DWCDriver-0_23:1.2
	DWCDriver-0_22:1.2
	DWCDriver-0_21:1.2
	DWCDriver-0_20:1.2
	DWCDriver-0_19:1.2
	DWCDriver-0_18:1.2
	DWCDriver-0_17:1.2
	DWCDriver-0_16:1.2
	DWCDriver-0_15:1.2
	DWCDriver-0_14:1.2
	DWCDriver-0_13:1.2
	DWCDriver-0_12:1.2
	DWCDriver-0_11:1.2
	DWCDriver-0_10:1.2
	DWCDriver-0_09:1.2
	DWCDriver-0_08:1.2
	DWCDriver-0_07:1.2
	DWCDriver-0_06:1.2
	DWCDriver-0_05:1.2
	DWCDriver-0_04:1.2
	DWCDriver-0_03:1.2
	DWCDriver-0_02:1.2
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.06.06.23.46.51;	author jlee;	state Exp;
branches;
next	1.1;
commitid	BGSuwmc37QAuLH7w;

1.1
date	2012.06.03.15.14.41;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.2
log
@Misc housekeeping
Detail:
  Makefile, !MkDebug,fd7 - Debug version of module can now be built just be passing "DEBUG=TRUE" to amu
  c/cmodule - Only accept USB controllers if HAL_USBControllerInfo says the struct size is an exact match with what we expect
  c/dwc_otg_riscos - Remove incorrect comment; both dwc_dma_alloc and malloc_contig zero memory
  s/bufman - Delete unused file
  s/call_veneer, s/triggercbs - Use Entry/EXIT macros to avoid single-reg LDM/STM performance warnings. Convert tabs to spaces.
Admin:
  Tested in BCM2835 ROM


Version 0.02. Tagged as 'DWCDriver-0_02'
@
text
@; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; little assembler stub to call an interrupt handler with an argument i r12
        GET     Hdr:ListOpts
        OPT     OptNoList
        GET     Hdr:Macros              ; system wide macro definitions
        GET     Hdr:System              ; swis and hardware declarations
        GET     Hdr:Proc


        AREA    |C$$code|, CODE, READONLY
        EXPORT  init_veneer
        IMPORT  memcpy

init_veneer
        Entry

        ; claim memory for block, exit with NULL on error
        MOV     r0, #6
        MOV     r3, #magic_end - magic_start
        SWI     XOS_Module
        MOVVS   a1, #0
        EXIT    VS

        ; memcpy the existing block
        MOV     a1, r2
        ADR     a2, magic_start
        MOV     a3, #magic_end - magic_start
        BL      memcpy

        ; poke the magic words
        SUB     sl, sl, #540
        LDMIA   sl, {a2,a3}
        STMIA   a1, {a2,a3}
        ADD     sl, sl, #540

        ; Flush the cache!
        MOV     a2, a1
        ADD     a3, a2, #magic_end - magic_start
        MOV     a1, #1
        SWI     XOS_SynchroniseCodeAreas
        MOV     a1, a2

        ; return pointing to the block
        EXIT

magic_start
mwords  DCD     0
        DCD     0

common  Entry   "v1,v2,fp"
        SUB     sl, sl, #540
        LDMIA   sl, {v1,v2}
        ADR     fp, mwords
        LDMIA   fp, {fp,lr}
        STMIA   sl, {fp,lr}
        ADD     sl, sl, #540
        MOV     fp, #0
        MOV     lr, pc
        MOV     pc, ip
        SUB     sl, sl, #540
        STMIA   sl, {v1,v2}
        ADD     sl, sl, #540
        EXIT
magic_end

; hal_veneer(code, ws)  up to 2 arguments supported
        EXPORT  hal_veneer2

hal_veneer2
        Entry   "r9"
        MOV     ip, a1
        MOV     r9, a2
        MOV     a1, a3
        MOV     a2, a4
        MOV     lr, pc
        MOV     pc, ip
        EXIT



        END
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@d18 4
a21 3
	OPT	OptNoList
        GET     Hdr:Macros		; system wide macro definitions
        GET     Hdr:System		; swis and hardware declarations
d24 3
a26 3
	AREA	|C$$code|, CODE, READONLY
    	EXPORT	init_veneer
	IMPORT	memcpy
d29 1
a29 1
        STMFD   sp!, {lr}
d32 5
a36 5
	MOV	r0, #6
	MOV	r3, #magic_end - magic_start
        SWI	XOS_Module
	MOVVS	a1, #0
	LDMVSFD	sp!, {pc}
d39 4
a42 4
	MOV	a1, r2
	ADR	a2, magic_start
	MOV	a3, #magic_end - magic_start
	BL	memcpy
d45 11
a55 11
        SUB	sl, sl, #540
	LDMIA	sl, {a2,a3}
	STMIA	a1, {a2,a3}
	ADD	sl, sl, #540

	; Flush the cache!
	MOV	a2, a1
	ADD	a3, a2, #magic_end - magic_start
	MOV	a1, #1
	SWI	XOS_SynchroniseCodeAreas
	MOV	a1, a2
d58 1
a58 1
        LDMFD   sp!, {pc}
d64 14
a77 14
common  STMFD	sp!, {v1,v2,fp,lr}
        SUB	sl, sl, #540
	LDMIA	sl, {v1,v2}
	ADR	fp, mwords
	LDMIA	fp, {fp,lr}
	STMIA	sl, {fp,lr}
	ADD	sl, sl, #540
	MOV	fp, #0
	MOV	lr, pc
	MOV	pc, ip
	SUB	sl, sl, #540
	STMIA	sl, {v1,v2}
	ADD	sl, sl, #540
	LDMFD	sp!, {v1,v2,fp,pc}
d84 1
a84 1
        STMFD   sp!,{r9,lr}
d91 1
a91 1
        LDMFD   sp!,{r9,pc}
d95 1
a95 1
	END
@

