head	1.5;
access;
symbols
	DWCDriver-0_35:1.5
	DWCDriver-0_34:1.5
	DWCDriver-0_33:1.5
	DWCDriver-0_32:1.5
	DWCDriver-0_31:1.4
	DWCDriver-0_30:1.4
	DWCDriver-0_29:1.4
	DWCDriver-0_28:1.3
	DWCDriver-0_27:1.3
	DWCDriver-0_26:1.3
	DWCDriver-0_24-1:1.3
	DWCDriver-0_25:1.3
	DWCDriver-0_24:1.3
	DWCDriver-0_23:1.3
	DWCDriver-0_22:1.3
	DWCDriver-0_21:1.3
	DWCDriver-0_20:1.3
	DWCDriver-0_19:1.3
	DWCDriver-0_18:1.3
	DWCDriver-0_17:1.3
	DWCDriver-0_16:1.3
	DWCDriver-0_15:1.3
	DWCDriver-0_14:1.2
	DWCDriver-0_13:1.2
	DWCDriver-0_12:1.2
	DWCDriver-0_11:1.2
	DWCDriver-0_10:1.2
	DWCDriver-0_09:1.2
	DWCDriver-0_08:1.2
	DWCDriver-0_07:1.1
	DWCDriver-0_06:1.1
	DWCDriver-0_05:1.1
	DWCDriver-0_04:1.1
	DWCDriver-0_03:1.1
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.5
date	2017.09.19.20.28.43;	author rool;	state Exp;
branches;
next	1.4;
commitid	wjT6lLDJh1HeBQ7A;

1.4
date	2016.12.17.10.22.18;	author rool;	state Exp;
branches;
next	1.3;
commitid	cEIxPCqCTT2e7kyz;

1.3
date	2014.06.19.21.31.05;	author jlee;	state Exp;
branches;
next	1.2;
commitid	Q5Tr8KszgORb8bFx;

1.2
date	2012.08.04.14.31.25;	author jlee;	state Exp;
branches;
next	1.1;
commitid	znlbEiHiIsNmNefw;

1.1
date	2012.06.03.15.12.56;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.5
log
@Remove some part finished HAL support
Detail:
  A few sections of code guarded by USBHAL defines carried over from MUSBDriver, but were never finished due to the complexity of DWCDriver.
  These are no longer needed now the kernel scans for keys, so remove them.
Admin:
  Couple of warnings in cmodule.c also attended to.
  Submission for USB bounty.

Version 0.32. Tagged as 'DWCDriver-0_32'
@
text
@; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
#include "Global/RISCOS.h"
#include "Global/Services.h"
#include "../VersionNum"

initialisation-code:	module_init

finalisation-code:  	module_final

service-call-handler:	module_services Service_USB,
                                        Service_PreReset,
                                        Service_ModulePostFinal,
                                        Service_ClaimFIQ,
                                        Service_ReleaseFIQ,
                                        Service_ResourceFSStarting

title-string:		Module_ComponentName

help-string:		Module_ComponentName Module_MajorVersion_CMHG

date-string:	    	Module_Date_CMHG

international-help-file: "Resources:$.Resources.DWCDriver.Messages"

#ifdef DWCDRIVER_DEBUG
command-keyword-table:	module_commands
DWCDebug(  min-args:2, max-args:2,
           help-text: "*DWCDebug sets the debug level for debuglib output and DWC output.\n",
           add-syntax:, invalid-syntax: "Syntax: DWCDebug <debuglib> <DWC>")
#endif

vector-handlers:    	usb_irq_entry/usb_irq_handler
@


1.4
log
@Internationalised
Detail:
  Add support for standalone messages registration, and actually use the messages rather than just exporting them in ROM builds.
  Changed to use allocated error bases rather than 0.
  Sync controller hunting loop with other HC for ease of comparison.
Admin:
  Submission for USB bounty.
  Tested on a Pi 2.

Version 0.29. Tagged as 'DWCDriver-0_29'
@
text
@d30 1
a30 1
title-string:	        COMPONENT
d32 1
a32 1
help-string:	     	COMPONENT     Module_MajorVersion_CMHG
@


1.3
log
@Enable part one of the FIQ fix
Detail:
  This change enables the basic 'FIQ fix', where SOF interrupts are handled by a FIQ handler and all other interrupts are delegated to IRQ.
  During testing it was observed that when the FIQ fix was enabled, what appears to be the host-side VCHIQ process would randomly die. It could take anywhere from several seconds (including during ROM init) or several hours for this to happen.
  After much investigation it looks like the cause was the use of the MPHI peripheral as a mechanism to trigger an IRQ from the FIQ handler. Changing the code in dwc_otg_hcd_handle_intr() so that it 'flushes' MPHI more often (after every interrupt instead of after every 60) seemed to reduce the problem, while changing the IRQ generation mechanism to use a different IRQ source (e.g. timer) made the crash go away entirely
  In the end I've settled on the compromise of using the MPHI peripheral, but in a way in which we only need to poke it once on startup, instead of once for every desired IRQ. Once we have it generating an IRQ we then rely on masking/unmasking the IRQ in the interrupt controller to get the desired effect of downgrading FIQs to IRQs. See the RISCOS_FIQ_DOWNGRADE #define.
  Changed files:
  - c/cmodule - Use symbolic constant for the USB controller ID instead of a magic number. Get the MPHI details from HAL_USBControllerInfo. Pay attention to Service_ClaimFIQ/Service_ReleaseFIQ and enable/disable the FIQ fix as appropriate.
  - c/dwc_common_riscos - Disable some debug functions which were accidentally left in non-debug builds. Change work queue/tasklet thread initialisation to fix a deadlock issue seen on reboot.
  - c/dwc_otg_riscos - Set up the MPHI and enable/disable the FIQ handler as required
  - cmhg/modhead - Pay attention to Service_ClaimFIQ/Service_ReleaseFIQ
  - dwc/driver/c/dwc_otg_hcd_intr, dwc/driver/h/dwc_otg_mphi_fix - RISCOS_FIQ_DOWNGRADE code
  - dwc/dwc_common_port/h/dwc_os - Make sure __DWC_WARN, __DWC_ERROR, DWC_EXCEPTION are compiled out in non-debug builds
  - h/dwc_otg_riscos - declare extra functions/variables related to FIQ fix
  - s/regaccess - Routine to install the FIQ handler on the FIQ vector, and simple HAL call wrapper
Admin:
  Tested on Raspberry Pi
  Requires Kernel-5_35-4_79_2_227, BCM2835-0_34


Version 0.15. Tagged as 'DWCDriver-0_15'
@
text
@d27 2
a28 1
                                        Service_ReleaseFIQ
@


1.2
log
@Fix aborts on reset/*rmkill USBDriver
Detail:
  c/cmodule, cmhg/modhead - Don't shutdown DWC layer during Service_USBDriver_Dying. Instead, only do it during Service_ModulePostFinal/Service_PreReset(/module finialisation). Also during Service_PreReset, deregister with USBDriver. This ensures we're deregistered with USBDriver before we shut down the DWC layer, and so don't have to worry about receiving events from USBDriver after the DWC layer is shut down.
  c/dwc_common_riscos, c/dwc_otg_riscos, h/dwc_common_riscos - Improve handling of DWC endpoint disable callbacks. The memory block for the endpoint now has a flag set in its header when a callback is pending, allowing us to avoid double-free situations if both ourselves and the DWC layer decide to free the endpoint.
  c/softc_root - Correct some debug messages
  dwc/driver/c/dwc_otg_hcd - Fix qh_list_free to use DWC_LIST_FOREACH_SAFE (as dwc_otg_hcd_qh_remove_and_free will remove entries from the list) - fixes potential double-free if a non-empty list is being freed
  dwc/driver/c/dwc_otg_hcd_intr - Fix building of debug builds
Admin:
  Tested in Pi ROM with high processor vectors
  Resets and killing/reiniting USBDriver now works properly


Version 0.08. Tagged as 'DWCDriver-0_08'
@
text
@d25 3
a27 1
                                        Service_ModulePostFinal
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@d24 2
a25 1
                                        Service_PreReset
@

