head	1.3;
access;
symbols
	DWCDriver-0_35:1.3
	DWCDriver-0_34:1.3
	DWCDriver-0_33:1.3
	DWCDriver-0_32:1.3
	DWCDriver-0_31:1.3
	DWCDriver-0_30:1.3
	DWCDriver-0_29:1.3
	DWCDriver-0_28:1.3
	DWCDriver-0_27:1.3
	DWCDriver-0_26:1.3
	DWCDriver-0_24-1:1.3
	DWCDriver-0_25:1.3
	DWCDriver-0_24:1.3
	DWCDriver-0_23:1.3
	DWCDriver-0_22:1.3
	DWCDriver-0_21:1.3
	DWCDriver-0_20:1.2
	DWCDriver-0_19:1.2
	DWCDriver-0_18:1.2
	DWCDriver-0_17:1.2
	DWCDriver-0_16:1.2
	DWCDriver-0_15:1.2
	DWCDriver-0_14:1.2
	DWCDriver-0_13:1.2
	DWCDriver-0_12:1.2
	DWCDriver-0_11:1.2
	DWCDriver-0_10:1.1
	DWCDriver-0_09:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.10.07.21.00.05;	author jlee;	state Exp;
branches;
next	1.2;
commitid	qck3WWYzKpNMGdEy;

1.2
date	2014.04.26.18.18.11;	author jlee;	state Exp;
branches;
next	1.1;
commitid	3PdzN60cJJ3zNdyx;

1.1
date	2012.09.17.16.34.43;	author jlee;	state Exp;
branches;
next	;
commitid	DXVFy2WJjyak3Ukw;


desc
@@


1.3
log
@Update to 'FIQ FSM' USB driver
Detail:
  Makefile, dwc/* - Updated to latest-ish code from Raspberry Pi github (rev c8baa9702c). Includes the 'FIQ FSM' USB driver, which replaces the older 'FIQ fix'. Note that many files appear to have no functional changes - just trailing whitespace removal to keep things in sync with github.
  Makefile - add DEBUGLIBS back into the debug libs listing to fix debug builds
  c/cmodule - Update to work with new FIQ FSM flags
  c/dwc_otg_riscos - Update to work with new FIQ FSM flags. Update initialisation procedure. Change IRQ handling to try both the HCD & CIL interrupt handlers (HCD can claim interrupt is handled when there's still a CIL interrupt pending). Disable support for falling back to IRQ if the FIQ vector is claimed by someone else - will need new implementation to cope with starting & stopping the FIQ FSM.
  s/regaccess - Update FIQ veneer & install routine to allow operation with either the dwc_otg_fiq_fsm or dwc_otg_fiq_nop functions.
Admin:
  Tested on Raspberry Pi 1 & 2


Version 0.21. Tagged as 'DWCDriver-0_21'
@
text
@#ifndef _DWC_OS_DEP_H_
#define _DWC_OS_DEP_H_

/**
 * @@file
 *
 * This file contains OS dependent structures.
 *
 */

#ifdef __riscos

/* Define dummy kernel version so Norcroft doesn't barf on KERNEL_VERSION(...) */
#define KERNEL_VERSION(X,Y,Z) ((X<<16)+(Y<<8)+(Z))
#define LINUX_VERSION_CODE KERNEL_VERSION(4,1,25) /* Current kernel driver was taken from */

typedef struct os_dependent {
	int dummy;
} os_dependent_t;

#else

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/init.h>
#include <linux/device.h>
#include <linux/errno.h>
#include <linux/types.h>
#include <linux/slab.h>
#include <linux/list.h>
#include <linux/interrupt.h>
#include <linux/ctype.h>
#include <linux/string.h>
#include <linux/dma-mapping.h>
#include <linux/jiffies.h>
#include <linux/delay.h>
#include <linux/timer.h>
#include <linux/workqueue.h>
#include <linux/stat.h>
#include <linux/pci.h>

#include <linux/version.h>

#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20)
# include <linux/irq.h>
#endif

#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,21)
# include <linux/usb/ch9.h>
#else
# include <linux/usb_ch9.h>
#endif

#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
# include <linux/usb/gadget.h>
#else
# include <linux/usb_gadget.h>
#endif

#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,20)
# include <asm/irq.h>
#endif

#ifdef PCI_INTERFACE
# include <asm/io.h>
#endif

#ifdef LM_INTERFACE
# include <asm/unaligned.h>
# include <asm/sizes.h>
# include <asm/param.h>
# include <asm/io.h>
# if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,30))
#  include <asm/arch/hardware.h>
#  include <asm/arch/lm.h>
#  include <asm/arch/irqs.h>
#  include <asm/arch/regs-irq.h>
# else
/* in 2.6.31, at least, we seem to have lost the generic LM infrastructure -
   here we assume that the machine architecture provides definitions
   in its own header
*/
#  include <mach/lm.h>
#  include <mach/hardware.h>
# endif
#endif

#ifdef PLATFORM_INTERFACE
#include <linux/platform_device.h>
#include <asm/mach/map.h>
#endif

/** The OS page size */
#define DWC_OS_PAGE_SIZE	PAGE_SIZE

#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,14)
typedef int gfp_t;
#endif

#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,18)
# define IRQF_SHARED SA_SHIRQ
#endif

typedef struct os_dependent {
	/** Base address returned from ioremap() */
	void *base;

	/** Register offset for Diagnostic API */
	uint32_t reg_offset;

	/** Base address for MPHI peripheral */
	void *mphi_base;

#ifdef LM_INTERFACE
	struct lm_device *lmdev;
#elif  defined(PCI_INTERFACE)
	struct pci_dev *pcidev;

	/** Start address of a PCI region */
	resource_size_t rsrc_start;

	/** Length address of a PCI region */
	resource_size_t rsrc_len;
#elif  defined(PLATFORM_INTERFACE)
	struct platform_device *platformdev;
#endif

} os_dependent_t;

#ifdef __cplusplus
}
#endif



/* Type for the our device on the chosen bus */
#if   defined(LM_INTERFACE)
typedef struct lm_device       dwc_bus_dev_t;
#elif defined(PCI_INTERFACE)
typedef struct pci_dev         dwc_bus_dev_t;
#elif defined(PLATFORM_INTERFACE)
typedef struct platform_device dwc_bus_dev_t;
#endif

/* Helper macro to retrieve drvdata from the device on the chosen bus */
#if    defined(LM_INTERFACE)
#define DWC_OTG_BUSDRVDATA(_dev) lm_get_drvdata(_dev)
#elif  defined(PCI_INTERFACE)
#define DWC_OTG_BUSDRVDATA(_dev) pci_get_drvdata(_dev)
#elif  defined(PLATFORM_INTERFACE)
#define DWC_OTG_BUSDRVDATA(_dev) platform_get_drvdata(_dev)
#endif

/**
 * Helper macro returning the otg_device structure of a given struct device
 *
 * c.f. static dwc_otg_device_t *dwc_otg_drvdev(struct device *_dev)
 */
#ifdef LM_INTERFACE
#define DWC_OTG_GETDRVDEV(_var, _dev) do { \
                struct lm_device *lm_dev = \
                        container_of(_dev, struct lm_device, dev); \
                _var = lm_get_drvdata(lm_dev); \
        } while (0)

#elif defined(PCI_INTERFACE)
#define DWC_OTG_GETDRVDEV(_var, _dev) do { \
                _var = dev_get_drvdata(_dev); \
        } while (0)

#elif defined(PLATFORM_INTERFACE)
#define DWC_OTG_GETDRVDEV(_var, _dev) do { \
                struct platform_device *platform_dev = \
                        container_of(_dev, struct platform_device, dev); \
                _var = platform_get_drvdata(platform_dev); \
        } while (0)
#endif


/**
 * Helper macro returning the struct dev of the given struct os_dependent
 *
 * c.f. static struct device *dwc_otg_getdev(struct os_dependent *osdep)
 */
#ifdef LM_INTERFACE
#define DWC_OTG_OS_GETDEV(_osdep) \
        ((_osdep).lmdev == NULL? NULL: &(_osdep).lmdev->dev)
#elif defined(PCI_INTERFACE)
#define DWC_OTG_OS_GETDEV(_osdep) \
        ((_osdep).pci_dev == NULL? NULL: &(_osdep).pci_dev->dev)
#elif defined(PLATFORM_INTERFACE)
#define DWC_OTG_OS_GETDEV(_osdep) \
        ((_osdep).platformdev == NULL? NULL: &(_osdep).platformdev->dev)
#endif


#endif /* !defined(__riscos) */

#endif /* _DWC_OS_DEP_H_ */
@


1.2
log
@Update to latest code from Raspberry Pi github
Detail:
  Makefile, dwc/* - Updated to latest code from Raspberry Pi github (rev e0001dd59d). Includes the fabled 'FIQ fix' code, although the code isn't yet enabled in the RISC OS version of the driver.
  c/cmodule - Add extra flags for controlling driver behaviour, as required by the new core code
  c/dwc_otg_riscos - Add some missing driver parameters (although we leave them at default). Handle DWC_E_SHUTDOWN xfer errors, which will now be produced when the driver is shutting down
  c/softc_device - Disable interrupts around dwc_otg_hcd_urb_enqueue, to mirror behaviour of Linux code (previously, it was the responsibility of the DWC code to disable interrupts for the appropriate part of the operation)
  s/regaccess - Add some extra IRQ/memory barrier functions required by the new code (mainly the FIQ fix). Make DWC_MODIFY_REG32 operate atomicly (mirrors change in Linux version)
Admin:
  Tested on Raspberry Pi


Version 0.11. Tagged as 'DWCDriver-0_11'
@
text
@d15 1
a15 1
#define LINUX_VERSION_CODE KERNEL_VERSION(3,2,27) /* Current kernel driver was taken from */
d122 1
a122 1
	
@


1.1
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@d112 3
@

