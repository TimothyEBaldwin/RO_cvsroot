head	1.2;
access;
symbols
	DWCDriver-0_08:1.1
	DWCDriver-0_07:1.1
	DWCDriver-0_06:1.1
	DWCDriver-0_05:1.1
	DWCDriver-0_04:1.1
	DWCDriver-0_03:1.1
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.09.17.16.34.58;	author jlee;	state dead;
branches;
next	1.1;
commitid	DXVFy2WJjyak3Ukw;

1.1
date	2012.06.03.15.14.21;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.2
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Synopsys DWC Portability and Common Library for UWB: dwc_crypto.c File Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
    <li><a href="dirs.html"><span>Directories</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>Globals</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c13d72e45af28cdc461a5f284d3d36fc.html">dwc_common_port</a></div>
<h1>dwc_crypto.c File Reference</h1><hr><a name="_details"></a><h2>Detailed Description</h2>
This file contains the WUSB cryptographic routines. 
<p>

<p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="324bdad74366c72c0b42483dd8c3c538"></a><!-- doxytag: member="dwc_crypto.c::dump_bytes" ref="324bdad74366c72c0b42483dd8c3c538" args="(char *name, uint8_t *bytes, int len)" -->
static void&nbsp;</td><td class="memItemRight" valign="bottom"><b>dump_bytes</b> (char *name, uint8_t *bytes, int len)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ea0e019e3f682dec4bb775a274196e45"></a><!-- doxytag: member="dwc_crypto.c::show_block" ref="ea0e019e3f682dec4bb775a274196e45" args="(const u8 *blk, const char *prefix, const char *suffix, int a)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><b>show_block</b> (const u8 *blk, const char *prefix, const char *suffix, int a)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="dwc__crypto_8c.html#b4591bca19d2bfc173d3f38d8a0f04e7">dwc_wusb_aes_encrypt</a> (u8 *src, u8 *key, u8 *dst)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Encrypts an array of bytes using the AES encryption engine.  <a href="#b4591bca19d2bfc173d3f38d8a0f04e7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="dwc__crypto_8c.html#ebd0a4f3d48e8a5131125b080d402389">dwc_wusb_cmf</a> (u8 *key, u8 *nonce, char *label, u8 *bytes, int len, u8 *result)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The CCM-MAC-FUNCTION described in section 6.5 of the WUSB spec.  <a href="#ebd0a4f3d48e8a5131125b080d402389"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="dwc__crypto_8c.html#a44578803c21449b5d98e6275e4a6f5f">dwc_wusb_prf</a> (int prf_len, u8 *key, u8 *nonce, char *label, u8 *bytes, int len, u8 *result)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The PRF function described in section 6.5 of the WUSB spec.  <a href="#a44578803c21449b5d98e6275e4a6f5f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="dwc__crypto_8c.html#74ae8ea78ee10c708d7c3e0c12665b0d">dwc_wusb_fill_ccm_nonce</a> (uint16_t haddr, uint16_t daddr, uint8_t *tkid, uint8_t *nonce)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Fills in CCM Nonce per the WUSB spec.  <a href="#74ae8ea78ee10c708d7c3e0c12665b0d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="dwc__crypto_8c.html#79af51f4e6140e5a251041879b40ad03">dwc_wusb_gen_nonce</a> (uint16_t addr, uint8_t *nonce)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Generates a 16-byte cryptographic-grade random number for the Host/Device Nonce.  <a href="#79af51f4e6140e5a251041879b40ad03"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="dwc__crypto_8c.html#18f5b99bd27d2397550fbd340d39600a">dwc_wusb_gen_key</a> (uint8_t *ccm_nonce, uint8_t *mk, uint8_t *hnonce, uint8_t *dnonce, uint8_t *kck, uint8_t *ptk)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Generates the Session Key (PTK) and Key Confirmation Key (KCK) per the WUSB spec.  <a href="#18f5b99bd27d2397550fbd340d39600a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="dwc__crypto_8c.html#ab0a16ae4126032ca99e1fbcaaa7c248">dwc_wusb_gen_mic</a> (uint8_t *ccm_nonce, uint8_t *kck, uint8_t *data, uint8_t *mic)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Generates the Message Integrity Code over the Handshake data per the WUSB spec.  <a href="#ab0a16ae4126032ca99e1fbcaaa7c248"></a><br></td></tr>
</table>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="b4591bca19d2bfc173d3f38d8a0f04e7"></a><!-- doxytag: member="dwc_crypto.c::dwc_wusb_aes_encrypt" ref="b4591bca19d2bfc173d3f38d8a0f04e7" args="(u8 *src, u8 *key, u8 *dst)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int dwc_wusb_aes_encrypt           </td>
          <td>(</td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>dst</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Encrypts an array of bytes using the AES encryption engine. 
<p>
If <code>dst</code> == <code>src</code>, then the bytes will be encrypted in-place.<p>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, negative error code on error. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ebd0a4f3d48e8a5131125b080d402389"></a><!-- doxytag: member="dwc_crypto.c::dwc_wusb_cmf" ref="ebd0a4f3d48e8a5131125b080d402389" args="(u8 *key, u8 *nonce, char *label, u8 *bytes, int len, u8 *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dwc_wusb_cmf           </td>
          <td>(</td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>nonce</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>label</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>result</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The CCM-MAC-FUNCTION described in section 6.5 of the WUSB spec. 
<p>
This function takes a data string and returns the encrypted CBC Counter-mode MIC.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>key</em>&nbsp;</td><td>The 128-bit symmetric key. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nonce</em>&nbsp;</td><td>The CCM nonce. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>label</em>&nbsp;</td><td>The unique 14-byte ASCII text label. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bytes</em>&nbsp;</td><td>The byte array to be encrypted. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>len</em>&nbsp;</td><td>Length of the byte array. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>result</em>&nbsp;</td><td>Byte array to receive the 8-byte encrypted MIC. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="a44578803c21449b5d98e6275e4a6f5f"></a><!-- doxytag: member="dwc_crypto.c::dwc_wusb_prf" ref="a44578803c21449b5d98e6275e4a6f5f" args="(int prf_len, u8 *key, u8 *nonce, char *label, u8 *bytes, int len, u8 *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dwc_wusb_prf           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>prf_len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>nonce</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>label</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>result</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The PRF function described in section 6.5 of the WUSB spec. 
<p>
This function concatenates MIC values returned from dwc_cmf() to create a value of the requested length.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>prf_len</em>&nbsp;</td><td>Length of the PRF function in bits (64, 128, or 256). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>key,nonce,label,bytes,len</em>&nbsp;</td><td>Same as for dwc_cmf(). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>result</em>&nbsp;</td><td>Byte array to receive the result. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="74ae8ea78ee10c708d7c3e0c12665b0d"></a><!-- doxytag: member="dwc_crypto.c::dwc_wusb_fill_ccm_nonce" ref="74ae8ea78ee10c708d7c3e0c12665b0d" args="(uint16_t haddr, uint16_t daddr, uint8_t *tkid, uint8_t *nonce)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dwc_wusb_fill_ccm_nonce           </td>
          <td>(</td>
          <td class="paramtype">uint16_t&nbsp;</td>
          <td class="paramname"> <em>haddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&nbsp;</td>
          <td class="paramname"> <em>daddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>tkid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>nonce</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Fills in CCM Nonce per the WUSB spec. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>haddr</em>&nbsp;</td><td>Host address. </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>daddr</em>&nbsp;</td><td>Device address. </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>tkid</em>&nbsp;</td><td>Session Key(PTK) identifier. </td></tr>
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>nonce</em>&nbsp;</td><td>Pointer to where the CCM Nonce output is to be written. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="79af51f4e6140e5a251041879b40ad03"></a><!-- doxytag: member="dwc_crypto.c::dwc_wusb_gen_nonce" ref="79af51f4e6140e5a251041879b40ad03" args="(uint16_t addr, uint8_t *nonce)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dwc_wusb_gen_nonce           </td>
          <td>(</td>
          <td class="paramtype">uint16_t&nbsp;</td>
          <td class="paramname"> <em>addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>nonce</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Generates a 16-byte cryptographic-grade random number for the Host/Device Nonce. 
<p>

</div>
</div><p>
<a class="anchor" name="18f5b99bd27d2397550fbd340d39600a"></a><!-- doxytag: member="dwc_crypto.c::dwc_wusb_gen_key" ref="18f5b99bd27d2397550fbd340d39600a" args="(uint8_t *ccm_nonce, uint8_t *mk, uint8_t *hnonce, uint8_t *dnonce, uint8_t *kck, uint8_t *ptk)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dwc_wusb_gen_key           </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>ccm_nonce</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>mk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>hnonce</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>dnonce</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>kck</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>ptk</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Generates the Session Key (PTK) and Key Confirmation Key (KCK) per the WUSB spec. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ccm_nonce</em>&nbsp;</td><td>Pointer to CCM Nonce. </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>mk</em>&nbsp;</td><td>Master Key to derive the session from </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>hnonce</em>&nbsp;</td><td>Pointer to Host Nonce. </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>dnonce</em>&nbsp;</td><td>Pointer to Device Nonce. </td></tr>
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>kck</em>&nbsp;</td><td>Pointer to where the KCK output is to be written. </td></tr>
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>ptk</em>&nbsp;</td><td>Pointer to where the PTK output is to be written. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="ab0a16ae4126032ca99e1fbcaaa7c248"></a><!-- doxytag: member="dwc_crypto.c::dwc_wusb_gen_mic" ref="ab0a16ae4126032ca99e1fbcaaa7c248" args="(uint8_t *ccm_nonce, uint8_t *kck, uint8_t *data, uint8_t *mic)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dwc_wusb_gen_mic           </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>ccm_nonce</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>kck</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>mic</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Generates the Message Integrity Code over the Handshake data per the WUSB spec. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ccm_nonce</em>&nbsp;</td><td>Pointer to CCM Nonce. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>kck</em>&nbsp;</td><td>Pointer to Key Confirmation Key. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>Pointer to Handshake data to be checked. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>mic</em>&nbsp;</td><td>Pointer to where the MIC output is to be written. </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr size="1"><address style="align: right;"><small>Generated on Tue May 5 02:22:50 2009 for Synopsys DWC Portability and Common Library for UWB by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@@

