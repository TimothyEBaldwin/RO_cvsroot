head	1.2;
access;
symbols
	DWCDriver-0_08:1.1
	DWCDriver-0_07:1.1
	DWCDriver-0_06:1.1
	DWCDriver-0_05:1.1
	DWCDriver-0_04:1.1
	DWCDriver-0_03:1.1
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.09.17.16.34.00;	author jlee;	state dead;
branches;
next	1.1;
commitid	DXVFy2WJjyak3Ukw;

1.1
date	2012.06.03.15.13.47;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.2
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>DesignWare USB 2.0 OTG Controller (DWC_otg) Device Driver: </title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
    <li><a href="files.html"><span>Files</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
The following parameters may be specified when starting the module.<p>
These parameters define how the DWC_otg controller should be configured. Parameter values are passed to the CIL initialization function dwc_otg_cil_init<p>
Example: <code>modprobe dwc_otg speed=1 otg_cap=1</code><p>
<table border="1" cellspacing="3" cellpadding="3">
<tr>
<td>Parameter Name</td><td>Meaning<p>
</td></tr>
<tr>
<td>otg_cap </td><td>Specifies the OTG capabilities. The driver will automatically detect the value for this parameter if none is specified.<ul>
<li>0: HNP and SRP capable (default, if available)</li><li>1: SRP Only capable</li><li>2: No HNP/SRP capable </li></ul>
<p>
</td></tr>
<tr>
<td>dma_enable </td><td>Specifies whether to use slave or DMA mode for accessing the data FIFOs. The driver will automatically detect the value for this parameter if none is specified.<ul>
<li>0: Slave</li><li>1: DMA (default, if available) </li></ul>
<p>
</td></tr>
<tr>
<td>dma_burst_size </td><td>The DMA Burst size (applicable only for External DMA Mode).<ul>
<li>Values: 1, 4, 8 16, 32, 64, 128, 256 (default 32) </li></ul>
<p>
</td></tr>
<tr>
<td>speed </td><td>Specifies the maximum speed of operation in host and device mode. The actual speed depends on the speed of the attached device and the value of phy_type.<ul>
<li>0: High Speed (default)</li><li>1: Full Speed </li></ul>
<p>
</td></tr>
<tr>
<td>host_support_fs_ls_low_power </td><td>Specifies whether low power mode is supported when attached to a Full Speed or Low Speed device in host mode.<ul>
<li>0: Don't support low power mode (default)</li><li>1: Support low power mode </li></ul>
<p>
</td></tr>
<tr>
<td>host_ls_low_power_phy_clk </td><td>Specifies the PHY clock rate in low power mode when connected to a Low Speed device in host mode. This parameter is applicable only if HOST_SUPPORT_FS_LS_LOW_POWER is enabled.<ul>
<li>0: 48 MHz (default)</li><li>1: 6 MHz </li></ul>
<p>
</td></tr>
<tr>
<td>enable_dynamic_fifo </td><td>Specifies whether FIFOs may be resized by the driver software.<ul>
<li>0: Use cC FIFO size parameters</li><li>1: Allow dynamic FIFO sizing (default) </li></ul>
<p>
</td></tr>
<tr>
<td>data_fifo_size </td><td>Total number of 4-byte words in the data FIFO memory. This memory includes the Rx FIFO, non-periodic Tx FIFO, and periodic Tx FIFOs.<ul>
<li>Values: 32 to 32768 (default 8192)</li></ul>
<p>
Note: The total FIFO memory depth in the FPGA configuration is 8192. <p>
</td></tr>
<tr>
<td>dev_rx_fifo_size </td><td>Number of 4-byte words in the Rx FIFO in device mode when dynamic FIFO sizing is enabled.<ul>
<li>Values: 16 to 32768 (default 1064) </li></ul>
<p>
</td></tr>
<tr>
<td>dev_nperio_tx_fifo_size </td><td>Number of 4-byte words in the non-periodic Tx FIFO in device mode when dynamic FIFO sizing is enabled.<ul>
<li>Values: 16 to 32768 (default 1024) </li></ul>
<p>
</td></tr>
<tr>
<td>dev_perio_tx_fifo_size_n (n = 1 to 15) </td><td>Number of 4-byte words in each of the periodic Tx FIFOs in device mode when dynamic FIFO sizing is enabled.<ul>
<li>Values: 4 to 768 (default 256) </li></ul>
<p>
</td></tr>
<tr>
<td>host_rx_fifo_size </td><td>Number of 4-byte words in the Rx FIFO in host mode when dynamic FIFO sizing is enabled.<ul>
<li>Values: 16 to 32768 (default 1024) </li></ul>
<p>
</td></tr>
<tr>
<td>host_nperio_tx_fifo_size </td><td>Number of 4-byte words in the non-periodic Tx FIFO in host mode when dynamic FIFO sizing is enabled in the core.<ul>
<li>Values: 16 to 32768 (default 1024) </li></ul>
<p>
</td></tr>
<tr>
<td>host_perio_tx_fifo_size </td><td>Number of 4-byte words in the host periodic Tx FIFO when dynamic FIFO sizing is enabled.<ul>
<li>Values: 16 to 32768 (default 1024) </li></ul>
<p>
</td></tr>
<tr>
<td>max_transfer_size </td><td>The maximum transfer size supported in bytes.<ul>
<li>Values: 2047 to 65,535 (default 65,535) </li></ul>
<p>
</td></tr>
<tr>
<td>max_packet_count </td><td>The maximum number of packets in a transfer.<ul>
<li>Values: 15 to 511 (default 511) </li></ul>
<p>
</td></tr>
<tr>
<td>host_channels </td><td>The number of host channel registers to use.<ul>
<li>Values: 1 to 16 (default 12)</li></ul>
<p>
Note: The FPGA configuration supports a maximum of 12 host channels. <p>
</td></tr>
<tr>
<td>dev_endpoints </td><td>The number of endpoints in addition to EP0 available for device mode operations.<ul>
<li>Values: 1 to 15 (default 6 IN and OUT)</li></ul>
<p>
Note: The FPGA configuration supports a maximum of 6 IN and OUT endpoints in addition to EP0. <p>
</td></tr>
<tr>
<td>phy_type </td><td>Specifies the type of PHY interface to use. By default, the driver will automatically detect the phy_type.<ul>
<li>0: Full Speed</li><li>1: UTMI+ (default, if available)</li><li>2: ULPI </li></ul>
<p>
</td></tr>
<tr>
<td>phy_utmi_width </td><td>Specifies the UTMI+ Data Width. This parameter is applicable for a phy_type of UTMI+. Also, this parameter is applicable only if the OTG_HSPHY_WIDTH cC parameter was set to "8 and 16 bits", meaning that the core has been configured to work at either data path width.<ul>
<li>Values: 8 or 16 bits (default 16) </li></ul>
<p>
</td></tr>
<tr>
<td>phy_ulpi_ddr </td><td>Specifies whether the ULPI operates at double or single data rate. This parameter is only applicable if phy_type is ULPI.<ul>
<li>0: single data rate ULPI interface with 8 bit wide data bus (default)</li><li>1: double data rate ULPI interface with 4 bit wide data bus </li></ul>
<p>
</td></tr>
<tr>
<td>i2c_enable </td><td>Specifies whether to use the I2C interface for full speed PHY. This parameter is only applicable if PHY_TYPE is FS.<ul>
<li>0: Disabled (default)</li><li>1: Enabled </li></ul>
<p>
</td></tr>
<tr>
<td>otg_en_multiple_tx_fifo </td><td>Specifies whether dedicatedto tx fifos are enabled for non periodic IN EPs. The driver will automatically detect the value for this parameter if none is specified.<ul>
<li>0: Disabled</li><li>1: Enabled (default, if available) </li></ul>
<p>
</td></tr>
<tr>
<td>dev_tx_fifo_size_n (n = 1 to 15) </td><td>Number of 4-byte words in each of the Tx FIFOs in device mode when dynamic FIFO sizing is enabled.<ul>
<li>Values: 4 to 768 (default 256) </li></ul>
<p>
</td></tr>
<tr>
<td>tx_thr_length </td><td>Transmit Threshold length in 32 bit double words<ul>
<li>Values: 8 to 128 (default 64) </li></ul>
<p>
</td></tr>
<tr>
<td>rx_thr_length </td><td>Receive Threshold length in 32 bit double words<ul>
<li>Values: 8 to 128 (default 64) </li></ul>
<p>
</td></tr>
<tr>
<td>thr_ctl </td><td>Specifies whether to enable Thresholding for Device mode. Bits 0, 1, 2 of this parmater specifies if thresholding is enabled for non-Iso Tx, Iso Tx and Rx transfers accordingly. The driver will automatically detect the value for this parameter if none is specified.<ul>
<li>Values: 0 to 7 (default 0) Bit values indicate:</li><li>0: Thresholding disabled</li><li>1: Thresholding enabled </li></ul>
<p>
</td></tr>
<tr>
<td>dma_desc_enable </td><td>Specifies whether to enable Descriptor DMA mode. The driver will automatically detect the value for this parameter if none is specified.<ul>
<li>0: Descriptor DMA disabled</li><li>1: Descriptor DMA (default, if available) </li></ul>
<p>
</td></tr>
<tr>
<td>mpi_enable </td><td>Specifies whether to enable MPI enhancement mode. The driver will automatically detect the value for this parameter if none is specified.<ul>
<li>0: MPI disabled (default)</li><li>1: MPI enable </li></ul>
<p>
</td></tr>
<tr>
<td>pti_enable </td><td>Specifies whether to enable PTI enhancement support. The driver will automatically detect the value for this parameter if none is specified.<ul>
<li>0: PTI disabled (default)</li><li>1: PTI enable </li></ul>
<p>
</td></tr>
<tr>
<td>lpm_enable </td><td>Specifies whether to enable LPM support. The driver will automatically detect the value for this parameter if none is specified.<ul>
<li>0: LPM disabled</li><li>1: LPM enable (default, if available) </li></ul>
<p>
</td></tr>
<tr>
<td>ahb_thr_ratio </td><td>Specifies AHB Threshold ratio.<ul>
<li>Values: 0 to 3 (default 0)  </li></ul>
</td></tr>
</table>
<hr size="1"><address style="align: right;"><small>Generated on Tue May 5 02:22:49 2009 for DesignWare USB 2.0 OTG Controller (DWC_otg) Device Driver by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@@

