head	1.2;
access;
symbols
	DWCDriver-0_08:1.1
	DWCDriver-0_07:1.1
	DWCDriver-0_06:1.1
	DWCDriver-0_05:1.1
	DWCDriver-0_04:1.1
	DWCDriver-0_03:1.1
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.09.17.16.34.00;	author jlee;	state dead;
branches;
next	1.1;
commitid	DXVFy2WJjyak3Ukw;

1.1
date	2012.06.03.15.13.47;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.2
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>DesignWare USB 2.0 OTG Controller (DWC_otg) Device Driver: </title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
    <li><a href="files.html"><span>Files</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
The Linux module attributes feature is used to provide the Linux Diagnostic Interface.<p>
These attributes are accessed through sysfs. The diagnostic interface will provide access to the controller for bringing up the hardware and testing.<p>
The following table shows the attributes. <table border="1" cellspacing="3" cellpadding="3">
<tr>
<td><b> Name</b> </td><td><b> Description</b> </td><td><b> Access</b> <p>
</td></tr>
<tr>
<td>mode  </td><td>Returns the current mode: 0 for device mode, 1 for host mode </td><td>Read <p>
</td></tr>
<tr>
<td>hnpcapable  </td><td>Gets or sets the "HNP-capable" bit in the Core USB Configuraton Register. Read returns the current value. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>srpcapable  </td><td>Gets or sets the "SRP-capable" bit in the Core USB Configuraton Register. Read returns the current value. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>hsic_connect  </td><td>Gets or sets the "HSIC-Connect" bit in the GLPMCFG Register. Read returns the current value. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>inv_sel_hsic  </td><td>Gets or sets the "Invert Select HSIC" bit in the GLPMFG Register. Read returns the current value. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>hnp  </td><td>Initiates the Host Negotiation Protocol. Read returns the status. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>srp  </td><td>Initiates the Session Request Protocol. Read returns the status. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>buspower  </td><td>Gets or sets the Power State of the bus (0 - Off or 1 - On) </td><td>Read/Write <p>
</td></tr>
<tr>
<td>bussuspend  </td><td>Suspends the USB bus. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>busconnected  </td><td>Gets the connection status of the bus </td><td>Read <p>
</td></tr>
<tr>
<td>gotgctl  </td><td>Gets or sets the Core Control Status Register. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>gusbcfg  </td><td>Gets or sets the Core USB Configuration Register </td><td>Read/Write <p>
</td></tr>
<tr>
<td>grxfsiz  </td><td>Gets or sets the Receive FIFO Size Register </td><td>Read/Write <p>
</td></tr>
<tr>
<td>gnptxfsiz  </td><td>Gets or sets the non-periodic Transmit Size Register </td><td>Read/Write <p>
</td></tr>
<tr>
<td>gpvndctl  </td><td>Gets or sets the PHY Vendor Control Register </td><td>Read/Write <p>
</td></tr>
<tr>
<td>ggpio  </td><td>Gets the value in the lower 16-bits of the General Purpose IO Register or sets the upper 16 bits. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>guid  </td><td>Gets or sets the value of the User ID Register </td><td>Read/Write <p>
</td></tr>
<tr>
<td>gsnpsid  </td><td>Gets the value of the Synopsys ID Regester </td><td>Read <p>
</td></tr>
<tr>
<td>devspeed  </td><td>Gets or sets the device speed setting in the DCFG register </td><td>Read/Write <p>
</td></tr>
<tr>
<td>enumspeed  </td><td>Gets the device enumeration Speed. </td><td>Read <p>
</td></tr>
<tr>
<td>hptxfsiz  </td><td>Gets the value of the Host Periodic Transmit FIFO </td><td>Read <p>
</td></tr>
<tr>
<td>hprt0  </td><td>Gets or sets the value in the Host Port Control and Status Register </td><td>Read/Write <p>
</td></tr>
<tr>
<td>regoffset  </td><td>Sets the register offset for the next Register Access </td><td>Read/Write <p>
</td></tr>
<tr>
<td>regvalue  </td><td>Gets or sets the value of the register at the offset in the regoffset attribute. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>remote_wakeup  </td><td>On read, shows the status of Remote Wakeup. On write, initiates a remote wakeup of the host. When bit 0 is 1 and Remote Wakeup is enabled, the Remote Wakeup signalling bit in the Device Control Register is set for 1 milli-second. </td><td>Read/Write <p>
</td></tr>
<tr>
<td>regdump  </td><td>Dumps the contents of core registers. </td><td>Read <p>
</td></tr>
<tr>
<td>spramdump  </td><td>Dumps the contents of core registers. </td><td>Read <p>
</td></tr>
<tr>
<td>hcddump  </td><td>Dumps the current HCD state. </td><td>Read <p>
</td></tr>
<tr>
<td>hcd_frrem  </td><td>Shows the average value of the Frame Remaining field in the Host Frame Number/Frame Remaining register when an SOF interrupt occurs. This can be used to determine the average interrupt latency. Also shows the average Frame Remaining value for start_transfer and the "a" and "b" sample points. The "a" and "b" sample points may be used during debugging bto determine how long it takes to execute a section of the HCD code. </td><td>Read <p>
</td></tr>
<tr>
<td>rd_reg_test  </td><td>Displays the time required to read the GNPTXFSIZ register many times (the output shows the number of times the register is read). </td><td>Read <p>
</td></tr>
<tr>
<td>wr_reg_test  </td><td>Displays the time required to write the GNPTXFSIZ register many times (the output shows the number of times the register is written). </td><td>Read <p>
</td></tr>
<tr>
<td>lpm_response  </td><td>Gets or sets lpm_response mode. Applicable only in device mode. </td><td>Write <p>
</td></tr>
<tr>
<td>sleep_local_dev  </td><td>Generetates sleep signaling. Applicable only in host mode. </td><td>Write <p>
</td></tr>
<tr>
<td>sleep_status  </td><td>Shows sleep status of device. </td><td>Read <p>
</td></tr>
</table>
<p>
Example usage: To get the current mode: cat /sys/devices/lm0/mode<p>
To power down the USB: echo 0 &gt; /sys/devices/lm0/buspower <hr size="1"><address style="align: right;"><small>Generated on Tue May 5 02:22:49 2009 for DesignWare USB 2.0 OTG Controller (DWC_otg) Device Driver by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@@

