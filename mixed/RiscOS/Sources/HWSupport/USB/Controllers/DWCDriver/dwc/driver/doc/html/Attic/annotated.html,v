head	1.2;
access;
symbols
	DWCDriver-0_08:1.1
	DWCDriver-0_07:1.1
	DWCDriver-0_06:1.1
	DWCDriver-0_05:1.1
	DWCDriver-0_04:1.1
	DWCDriver-0_03:1.1
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.09.17.16.33.03;	author jlee;	state dead;
branches;
next	1.1;
commitid	DXVFy2WJjyak3Ukw;

1.1
date	2012.06.03.15.13.13;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.2
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>DesignWare USB 2.0 OTG Controller (DWC_otg) Device Driver: Data Structures</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
    <li><a href="files.html"><span>Files</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li id="current"><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
    <li><a href="functions.html"><span>Data&nbsp;Fields</span></a></li>
  </ul></div>
<h1>DesignWare USB 2.0 OTG Controller (DWC_otg) Device Driver Data Structures</h1>Here are the data structures with brief descriptions:<table>
  <tr><td class="indexkey"><a class="el" href="struct__ddma__align__buffer__setup.html">_ddma_align_buffer_setup</a></td><td class="indexvalue">Descriptor DMA Alignment Buffer setup structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="struct__ddma__concat__buffer__setup.html">_ddma_concat_buffer_setup</a></td><td class="indexvalue">Descriptor DMA Concatenation Buffer setup structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="struct__ddma__concat__buffer__setup__hdr.html">_ddma_concat_buffer_setup_hdr</a></td><td class="indexvalue">Descriptor DMA Concatenation Buffer setup structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="struct__ddma__sg__buffer__setup.html">_ddma_sg_buffer_setup</a></td><td class="indexvalue">Descriptor DMA SG Buffer setup structure (SG buffer) </td></tr>
  <tr><td class="indexkey"><a class="el" href="struct__rx__fifo__size__setup.html">_rx_fifo_size_setup</a></td><td class="indexvalue">Transmit FIFO Size setup structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="struct__tx__fifo__size__setup.html">_tx_fifo_size_setup</a></td><td class="indexvalue">Transmit FIFO Size setup structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="structcfi__all__features__header.html">cfi_all_features_header</a></td><td class="indexvalue">This structure is the header of the Core Features dataset returned to the Host </td></tr>
  <tr><td class="indexkey"><a class="el" href="structcfi__dma__buff.html">cfi_dma_buff</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="structcfi__ep.html">cfi_ep</a></td><td class="indexvalue">The CFI wrapper of the enabled and activated <a class="el" href="structdwc__otg__pcd__ep.html">dwc_otg_pcd_ep</a> structures </td></tr>
  <tr><td class="indexkey"><a class="el" href="structcfi__feature__desc__header.html">cfi_feature_desc_header</a></td><td class="indexvalue">This structure is a header of the Core Feature descriptor dataset returned to the Host after the VEN_CORE_GET_FEATURES request </td></tr>
  <tr><td class="indexkey"><a class="el" href="structcfi__ops.html">cfi_ops</a></td><td class="indexvalue">This is the interface for the CFI operations </td></tr>
  <tr><td class="indexkey"><a class="el" href="structcfi__string.html">cfi_string</a></td><td class="indexvalue">This structure describes a NULL terminated string referenced by its id field </td></tr>
  <tr><td class="indexkey"><a class="el" href="structcfi__usb__ctrlrequest.html">cfi_usb_ctrlrequest</a></td><td class="indexvalue">Struct <a class="el" href="structcfi__usb__ctrlrequest.html">cfi_usb_ctrlrequest</a> - the CFI implementation of the struct usb_ctrlrequest This structure encapsulates the standard usb_ctrlrequest and adds a pointer to the data returned in the data stage of a 3-stage Control Write requests </td></tr>
  <tr><td class="indexkey"><a class="el" href="structcfiobject.html">cfiobject</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondaint__data.html">daint_data</a></td><td class="indexvalue">This union represents the bit fields in the Device All EP Interrupt and Mask Registers </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondcfg__data.html">dcfg_data</a></td><td class="indexvalue">This union represents the bit fields in the Device Configuration Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondctl__data.html">dctl_data</a></td><td class="indexvalue">This union represents the bit fields in the Device Control Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondepctl__data.html">depctl_data</a></td><td class="indexvalue">This union represents the bit fields in the Device EP Control Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondeptsiz0__data.html">deptsiz0_data</a></td><td class="indexvalue">This union represents the bit fields in the Device EP 0 Transfer Size Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondeptsiz__data.html">deptsiz_data</a></td><td class="indexvalue">This union represents the bit fields in the Device EP Transfer Size Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondev__dma__desc__sts.html">dev_dma_desc_sts</a></td><td class="indexvalue">This union represents the bit fields in the DMA Descriptor status quadlet </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondevice__grxsts__data.html">device_grxsts_data</a></td><td class="indexvalue">This union represents the bit fields in the Device Receive Status Read and Pop Registers (GRXSTSR, GRXSTSP) Read the register into the <em>d32</em> element then read out the bits using the <em>b</em>it elements </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondiepint__data.html">diepint_data</a></td><td class="indexvalue">This union represents the bit fields in the Device IN EP Interrupt Register and the Device IN EP Common Mask Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondoepint__data.html">doepint_data</a></td><td class="indexvalue">This union represents the bit fields in the Device OUT EP Interrupt Registerand Device OUT EP Common Interrupt Mask Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondsts__data.html">dsts_data</a></td><td class="indexvalue">This union represents the bit fields in the Device Status Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondthrctl__data.html">dthrctl_data</a></td><td class="indexvalue">This union represents Threshold control Register<ul>
<li>Read and write the register into the <em>d32</em> member </li></ul>
</td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondtknq1__data.html">dtknq1_data</a></td><td class="indexvalue">This union represents the bit fields in the Device IN Token Queue Read Registers </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondtxfsts__data.html">dtxfsts_data</a></td><td class="indexvalue">This union represents the bit fields in the Transmit FIFO Status Register (DTXFSTS) </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__ep.html">dwc_ep</a></td><td class="indexvalue">The <code><a class="el" href="structdwc__ep.html">dwc_ep</a></code> structure represents the state of a single endpoint when acting in device mode </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__hc.html">dwc_hc</a></td><td class="indexvalue">Host channel descriptor </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__cil__callbacks.html">dwc_otg_cil_callbacks</a></td><td class="indexvalue">DWC_otg CIL callback structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__core__global__regs.html">dwc_otg_core_global_regs</a></td><td class="indexvalue">DWC_otg Core registers </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__core__if.html">dwc_otg_core_if</a></td><td class="indexvalue">The <code><a class="el" href="structdwc__otg__core__if.html">dwc_otg_core_if</a></code> structure contains information needed to manage the DWC_otg controller acting in either host or device mode </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__core__params.html">dwc_otg_core_params</a></td><td class="indexvalue">The following parameters may be specified when starting the module </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__dev__dma__desc.html">dwc_otg_dev_dma_desc</a></td><td class="indexvalue">DMA Descriptor structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__dev__global__regs.html">dwc_otg_dev_global_regs</a></td><td class="indexvalue">Device Global Registers </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__dev__if.html">dwc_otg_dev_if</a></td><td class="indexvalue">The <a class="el" href="structdwc__otg__dev__if.html">dwc_otg_dev_if</a> structure contains information needed to manage the DWC_otg controller acting in device mode </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__dev__in__ep__regs.html">dwc_otg_dev_in_ep_regs</a></td><td class="indexvalue">Device Logical IN Endpoint-Specific Registers </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__dev__out__ep__regs.html">dwc_otg_dev_out_ep_regs</a></td><td class="indexvalue">Device Logical OUT Endpoint-Specific Registers </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__device.html">dwc_otg_device</a></td><td class="indexvalue">This structure is a wrapper that encapsulates the driver components used to manage a single DWC_otg controller </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__driver__module__params.html">dwc_otg_driver_module_params</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__hc__regs.html">dwc_otg_hc_regs</a></td><td class="indexvalue">Host Channel Specific Registers </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__hcd.html">dwc_otg_hcd</a></td><td class="indexvalue">This structure holds the state of the HCD, including the non-periodic and periodic schedules </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniondwc__otg__hcd_1_1dwc__otg__hcd__internal__flags.html">dwc_otg_hcd::dwc_otg_hcd_internal_flags</a></td><td class="indexvalue">Internal DWC HCD Flags </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__hcd__function__ops.html">dwc_otg_hcd_function_ops</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__hcd__iso__packet__desc.html">dwc_otg_hcd_iso_packet_desc</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__hcd__pipe__info.html">dwc_otg_hcd_pipe_info</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__hcd__urb.html">dwc_otg_hcd_urb</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__host__dma__desc.html">dwc_otg_host_dma_desc</a></td><td class="indexvalue">Host-mode DMA Descriptor structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__host__global__regs.html">dwc_otg_host_global_regs</a></td><td class="indexvalue">The Host Global Registers structure defines the size and relative field offsets for the Host Mode Global Registers </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__host__if.html">dwc_otg_host_if</a></td><td class="indexvalue">OTG Host Interface Structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__pcd.html">dwc_otg_pcd</a></td><td class="indexvalue">DWC_otg PCD Structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__pcd__ep.html">dwc_otg_pcd_ep</a></td><td class="indexvalue">PCD EP structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__pcd__function__ops.html">dwc_otg_pcd_function_ops</a></td><td class="indexvalue">Function Driver Ops Data Structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__pcd__request.html">dwc_otg_pcd_request</a></td><td class="indexvalue">DWC_otg request structure </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__qh.html">dwc_otg_qh</a></td><td class="indexvalue">A Queue Head (QH) holds the static characteristics of an endpoint and maintains a list of transfers (QTDs) for that endpoint </td></tr>
  <tr><td class="indexkey"><a class="el" href="structdwc__otg__qtd.html">dwc_otg_qtd</a></td><td class="indexvalue">A Queue Transfer Descriptor (QTD) holds the state of a bulk, control, interrupt, or isochronous transfer </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionfifosize__data.html">fifosize_data</a></td><td class="indexvalue">This union represents the bit fields in the FIFO Size Registers (HPTXFSIZ, GNPTXFSIZ, DPTXFSIZn, DIEPTXFn) </td></tr>
  <tr><td class="indexkey"><a class="el" href="structgadget__wrapper.html">gadget_wrapper</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="uniongahbcfg__data.html">gahbcfg_data</a></td><td class="indexvalue">This union represents the bit fields of the Core AHB Configuration Register (GAHBCFG) </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniongi2cctl__data.html">gi2cctl_data</a></td><td class="indexvalue">This union represents the bit fields in the I2C Control Register (I2CCTL) </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniongintmsk__data.html">gintmsk_data</a></td><td class="indexvalue">This union represents the bit fields of the Core Interrupt Mask Register (GINTMSK) </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniongintsts__data.html">gintsts_data</a></td><td class="indexvalue">This union represents the bit fields of the Core Interrupt Register (GINTSTS) </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionglpmctl__data.html">glpmctl_data</a></td><td class="indexvalue">This union represents the bit fields of the Core LPM Configuration Register (GLPMCFG) </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniongnptxsts__data.html">gnptxsts_data</a></td><td class="indexvalue">This union represents the bit fields in the Non-Periodic Transmit FIFO/Queue Status Register (GNPTXSTS) </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniongotgctl__data.html">gotgctl_data</a></td><td class="indexvalue">This union represents the bit fields of the Core OTG Control and Status Register (GOTGCTL) </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniongotgint__data.html">gotgint_data</a></td><td class="indexvalue">This union represents the bit fields of the Core OTG Interrupt Register (GOTGINT) </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniongrstctl__data.html">grstctl_data</a></td><td class="indexvalue">This union represents the bit fields of the Core Reset Register (GRSTCTL) </td></tr>
  <tr><td class="indexkey"><a class="el" href="uniongusbcfg__data.html">gusbcfg_data</a></td><td class="indexvalue">This union represents the bit fields of the Core USB Configuration Register (GUSBCFG) </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhaint__data.html">haint_data</a></td><td class="indexvalue">This union represents the bit fields in the Host All Interrupt Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhaintmsk__data.html">haintmsk_data</a></td><td class="indexvalue">This union represents the bit fields in the Host All Interrupt Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhcchar__data.html">hcchar_data</a></td><td class="indexvalue">This union represents the bit fields in the Host Channel Characteristics Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhcdma__data.html">hcdma_data</a></td><td class="indexvalue">This union represents the bit fields in the Host DMA Address Register used in Descriptor DMA mode </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhcfg__data.html">hcfg_data</a></td><td class="indexvalue">This union represents the bit fields in the Host Configuration Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhcint__data.html">hcint_data</a></td><td class="indexvalue">This union represents the bit fields in the Host All Interrupt Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhcintmsk__data.html">hcintmsk_data</a></td><td class="indexvalue">This union represents the bit fields in the Host Channel Interrupt Mask Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhcsplt__data.html">hcsplt_data</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhctsiz__data.html">hctsiz_data</a></td><td class="indexvalue">This union represents the bit fields in the Host Channel Transfer Size Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhfir__data.html">hfir_data</a></td><td class="indexvalue">This union represents the bit fields in the Host Frame Remaing/Number Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhfnum__data.html">hfnum_data</a></td><td class="indexvalue">This union represents the bit fields in the Host Frame Remaing/Number Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhost__dma__desc__sts.html">host_dma_desc_sts</a></td><td class="indexvalue">This union represents the bit fields in the DMA Descriptor status quadlet for host mode </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhost__grxsts__data.html">host_grxsts_data</a></td><td class="indexvalue">This union represents the bit fields in the Host Receive Status Read and Pop Registers (GRXSTSR, GRXSTSP) Read the register into the <em>d32</em> element then read out the bits using the <em>b</em>it elements </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhprt0__data.html">hprt0_data</a></td><td class="indexvalue">This union represents the bit fields in the Host Port Control and Status Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhptxsts__data.html">hptxsts_data</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhwcfg1__data.html">hwcfg1_data</a></td><td class="indexvalue">This union represents the bit fields in the User HW Config1 Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhwcfg2__data.html">hwcfg2_data</a></td><td class="indexvalue">This union represents the bit fields in the User HW Config2 Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhwcfg3__data.html">hwcfg3_data</a></td><td class="indexvalue">This union represents the bit fields in the User HW Config3 Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionhwcfg4__data.html">hwcfg4_data</a></td><td class="indexvalue">This union represents the bit fields in the User HW Config4 Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="structiso__pkt__info.html">iso_pkt_info</a></td><td class="indexvalue">Information for each ISOC packet </td></tr>
  <tr><td class="indexkey"><a class="el" href="unionpcgcctl__data.html">pcgcctl_data</a></td><td class="indexvalue">This union represents the bit fields in the Power and Clock Gating Control Register </td></tr>
  <tr><td class="indexkey"><a class="el" href="structwrapper__priv__data.html">wrapper_priv_data</a></td><td class="indexvalue"></td></tr>
  <tr><td class="indexkey"><a class="el" href="structzero__dev.html">zero_dev</a></td><td class="indexvalue"></td></tr>
</table>
<hr size="1"><address style="align: right;"><small>Generated on Tue May 5 02:22:49 2009 for DesignWare USB 2.0 OTG Controller (DWC_otg) Device Driver by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@@

