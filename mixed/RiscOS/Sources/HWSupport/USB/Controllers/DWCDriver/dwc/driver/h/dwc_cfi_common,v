head	1.2;
access;
symbols
	DWCDriver-0_35:1.2
	DWCDriver-0_34:1.2
	DWCDriver-0_33:1.2
	DWCDriver-0_32:1.2
	DWCDriver-0_31:1.2
	DWCDriver-0_30:1.2
	DWCDriver-0_29:1.2
	DWCDriver-0_28:1.2
	DWCDriver-0_27:1.2
	DWCDriver-0_26:1.2
	DWCDriver-0_24-1:1.2
	DWCDriver-0_25:1.2
	DWCDriver-0_24:1.2
	DWCDriver-0_23:1.2
	DWCDriver-0_22:1.2
	DWCDriver-0_21:1.2
	DWCDriver-0_20:1.1
	DWCDriver-0_19:1.1
	DWCDriver-0_18:1.1
	DWCDriver-0_17:1.1
	DWCDriver-0_16:1.1
	DWCDriver-0_15:1.1
	DWCDriver-0_14:1.1
	DWCDriver-0_13:1.1
	DWCDriver-0_12:1.1
	DWCDriver-0_11:1.1
	DWCDriver-0_10:1.1
	DWCDriver-0_09:1.1
	DWCDriver-0_08:1.1
	DWCDriver-0_07:1.1
	DWCDriver-0_06:1.1
	DWCDriver-0_05:1.1
	DWCDriver-0_04:1.1
	DWCDriver-0_03:1.1
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.10.07.21.00.03;	author jlee;	state Exp;
branches;
next	1.1;
commitid	qck3WWYzKpNMGdEy;

1.1
date	2012.06.03.15.14.07;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.2
log
@Update to 'FIQ FSM' USB driver
Detail:
  Makefile, dwc/* - Updated to latest-ish code from Raspberry Pi github (rev c8baa9702c). Includes the 'FIQ FSM' USB driver, which replaces the older 'FIQ fix'. Note that many files appear to have no functional changes - just trailing whitespace removal to keep things in sync with github.
  Makefile - add DEBUGLIBS back into the debug libs listing to fix debug builds
  c/cmodule - Update to work with new FIQ FSM flags
  c/dwc_otg_riscos - Update to work with new FIQ FSM flags. Update initialisation procedure. Change IRQ handling to try both the HCD & CIL interrupt handlers (HCD can claim interrupt is handled when there's still a CIL interrupt pending). Disable support for falling back to IRQ if the FIQ vector is claimed by someone else - will need new implementation to cope with starting & stopping the FIQ FSM.
  s/regaccess - Update FIQ veneer & install routine to allow operation with either the dwc_otg_fiq_fsm or dwc_otg_fiq_nop functions.
Admin:
  Tested on Raspberry Pi 1 & 2


Version 0.21. Tagged as 'DWCDriver-0_21'
@
text
@/* ==========================================================================
 * Synopsys HS OTG Linux Software Driver and documentation (hereinafter,
 * "Software") is an Unsupported proprietary work of Synopsys, Inc. unless
 * otherwise expressly agreed to in writing between Synopsys and you.
 *
 * The Software IS NOT an item of Licensed Software or Licensed Product under
 * any End User Software License Agreement or Agreement for Licensed Product
 * with Synopsys or any supplement thereto. You are permitted to use and
 * redistribute this Software in source and binary forms, with or without
 * modification, provided that redistributions of source code must retain this
 * notice. You may not view, use, disclose, copy or distribute this file or
 * any information contained herein except pursuant to this license grant from
 * Synopsys. If you do not agree with this notice, including the disclaimer
 * below, then you are not authorized to use the Software.
 *
 * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 * ========================================================================== */

#if !defined(__DWC_CFI_COMMON_H__)
#define __DWC_CFI_COMMON_H__

//#include <linux/types.h>

/**
 * @@file
 *
 * This file contains the CFI specific common constants, interfaces
 * (functions and macros) and structures for Linux. No PCD specific
 * data structure or definition is to be included in this file.
 *
 */

/** This is a request for all Core Features */
#define VEN_CORE_GET_FEATURES		0xB1

/** This is a request to get the value of a specific Core Feature */
#define VEN_CORE_GET_FEATURE		0xB2

/** This command allows the host to set the value of a specific Core Feature */
#define VEN_CORE_SET_FEATURE		0xB3

/** This command allows the host to set the default values of
 * either all or any specific Core Feature
 */
#define VEN_CORE_RESET_FEATURES		0xB4

/** This command forces the PCD to write the deferred values of a Core Features */
#define VEN_CORE_ACTIVATE_FEATURES	0xB5

/** This request reads a DWORD value from a register at the specified offset */
#define VEN_CORE_READ_REGISTER		0xB6

/** This request writes a DWORD value into a register at the specified offset */
#define VEN_CORE_WRITE_REGISTER		0xB7

/** This structure is the header of the Core Features dataset returned to
 *  the Host
 */
struct cfi_all_features_header {
/** The features header structure length is */
#define CFI_ALL_FEATURES_HDR_LEN		8
	/**
	 * The total length of the features dataset returned to the Host
	 */
	uint16_t wTotalLen;

	/**
	 * CFI version number inBinary-Coded Decimal (i.e., 1.00 is 100H).
	 * This field identifies the version of the CFI Specification with which
	 * the device is compliant.
	 */
	uint16_t wVersion;

	/** The ID of the Core */
	uint16_t wCoreID;
#define CFI_CORE_ID_UDC		1
#define CFI_CORE_ID_OTG		2
#define CFI_CORE_ID_WUDEV	3

	/** Number of features returned by VEN_CORE_GET_FEATURES request */
	uint16_t wNumFeatures;
} UPACKED;

typedef struct cfi_all_features_header cfi_all_features_header_t;

/** This structure is a header of the Core Feature descriptor dataset returned to
 *  the Host after the VEN_CORE_GET_FEATURES request
 */
struct cfi_feature_desc_header {
#define CFI_FEATURE_DESC_HDR_LEN	8

	/** The feature ID */
	uint16_t wFeatureID;

	/** Length of this feature descriptor in bytes - including the
	 * length of the feature name string
	 */
	uint16_t wLength;

	/** The data length of this feature in bytes */
	uint16_t wDataLength;

	/**
	 * Attributes of this features
	 * D0: Access rights
	 * 0 - Read/Write
	 * 1 - Read only
	 */
	uint8_t bmAttributes;
#define CFI_FEATURE_ATTR_RO		1
#define CFI_FEATURE_ATTR_RW		0

	/** Length of the feature name in bytes */
	uint8_t bNameLen;

	/** The feature name buffer */
	//uint8_t *name;
} UPACKED;

typedef struct cfi_feature_desc_header cfi_feature_desc_header_t;

/**
 * This structure describes a NULL terminated string referenced by its id field.
 * It is very similar to usb_string structure but has the id field type set to 16-bit.
 */
struct cfi_string {
	uint16_t id;
	const uint8_t *s;
};
typedef struct cfi_string cfi_string_t;

#endif
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@d5 1
a5 1
 * 
d15 1
a15 1
 * 
d35 1
a35 1
 * @@file 
d52 2
a53 2
/** This command allows the host to set the default values of 
 * either all or any specific Core Feature 
d66 1
a66 1
/** This structure is the header of the Core Features dataset returned to 
d73 1
a73 1
	 * The total length of the features dataset returned to the Host 
d79 1
a79 1
	 * This field identifies the version of the CFI Specification with which 
d96 1
a96 1
/** This structure is a header of the Core Feature descriptor dataset returned to 
d113 2
a114 2
	/** 
	 * Attributes of this features 
@

