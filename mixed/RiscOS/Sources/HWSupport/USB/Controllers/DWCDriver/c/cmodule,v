head	1.20;
access;
symbols
	DWCDriver-0_35:1.20
	DWCDriver-0_34:1.20
	DWCDriver-0_33:1.19
	DWCDriver-0_32:1.19
	DWCDriver-0_31:1.18
	DWCDriver-0_30:1.18
	DWCDriver-0_29:1.18
	DWCDriver-0_28:1.16
	DWCDriver-0_27:1.16
	DWCDriver-0_26:1.16
	DWCDriver-0_24-1:1.16
	DWCDriver-0_25:1.15
	DWCDriver-0_24:1.14
	DWCDriver-0_23:1.14
	DWCDriver-0_22:1.13
	DWCDriver-0_21:1.13
	DWCDriver-0_20:1.12
	DWCDriver-0_19:1.11
	DWCDriver-0_18:1.11
	DWCDriver-0_17:1.11
	DWCDriver-0_16:1.11
	DWCDriver-0_15:1.11
	DWCDriver-0_14:1.10
	DWCDriver-0_13:1.9
	DWCDriver-0_12:1.9
	DWCDriver-0_11:1.8
	DWCDriver-0_10:1.7
	DWCDriver-0_09:1.6
	DWCDriver-0_08:1.5
	DWCDriver-0_07:1.4
	DWCDriver-0_06:1.4
	DWCDriver-0_05:1.4
	DWCDriver-0_04:1.3
	DWCDriver-0_03:1.2
	DWCDriver-0_02:1.2
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.20
date	2018.01.27.09.36.14;	author rool;	state Exp;
branches;
next	1.19;
commitid	YqmCwqmeVvmkOuoA;

1.19
date	2017.09.19.20.28.40;	author rool;	state Exp;
branches;
next	1.18;
commitid	wjT6lLDJh1HeBQ7A;

1.18
date	2016.12.17.10.22.16;	author rool;	state Exp;
branches;
next	1.17;
commitid	cEIxPCqCTT2e7kyz;

1.17
date	2016.12.10.12.58.58;	author rool;	state Exp;
branches;
next	1.16;
commitid	Z4aKvGTXdtkJcrxz;

1.16
date	2016.03.04.20.54.26;	author rool;	state Exp;
branches;
next	1.15;
commitid	MvG9A9da0K4NQmXy;

1.15
date	2016.03.04.01.33.39;	author jballance;	state Exp;
branches;
next	1.14;
commitid	WvfwatlEQwEQrgXy;

1.14
date	2015.11.18.22.45.43;	author rsprowson;	state Exp;
branches;
next	1.13;
commitid	daIXdDYiDc7uVCJy;

1.13
date	2015.10.07.20.59.49;	author jlee;	state Exp;
branches;
next	1.12;
commitid	qck3WWYzKpNMGdEy;

1.12
date	2015.08.21.20.05.24;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	LQa6fu9V2RLPTayy;

1.11
date	2014.06.19.21.31.02;	author jlee;	state Exp;
branches;
next	1.10;
commitid	Q5Tr8KszgORb8bFx;

1.10
date	2014.06.01.14.01.48;	author jlee;	state Exp;
branches;
next	1.9;
commitid	W2L9CKguSZ7XdPCx;

1.9
date	2014.04.29.13.14.13;	author bavison;	state Exp;
branches;
next	1.8;
commitid	Csp8Zk53w6vo1Ayx;

1.8
date	2014.04.26.18.17.59;	author jlee;	state Exp;
branches;
next	1.7;
commitid	3PdzN60cJJ3zNdyx;

1.7
date	2013.03.30.23.35.37;	author jlee;	state Exp;
branches;
next	1.6;
commitid	p5nj8B3j62iL9SJw;

1.6
date	2012.09.17.16.32.53;	author jlee;	state Exp;
branches;
next	1.5;
commitid	DXVFy2WJjyak3Ukw;

1.5
date	2012.08.04.14.31.23;	author jlee;	state Exp;
branches;
next	1.4;
commitid	znlbEiHiIsNmNefw;

1.4
date	2012.07.21.19.22.48;	author jlee;	state Exp;
branches;
next	1.3;
commitid	5Kpl2qWWr4efRsdw;

1.3
date	2012.06.24.21.41.47;	author jlee;	state Exp;
branches;
next	1.2;
commitid	7BXP9gA386QIu0aw;

1.2
date	2012.06.06.23.46.48;	author jlee;	state Exp;
branches;
next	1.1;
commitid	BGSuwmc37QAuLH7w;

1.1
date	2012.06.03.15.12.52;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.20
log
@Improve response USBDriver finalisation
Detail:
  Listen for Service_USB_USBDriverDead then shut down the driver, rather than Service_ModulePostFinal.
  Ensure the returned status is defined if USBDriver_InsertTransfer fails (because USBDriver has gone).
Admin:
  Submission from Colin Granville.

Version 0.34. Tagged as 'DWCDriver-0_34'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "modhead.h"
#include "swis.h"
#include <stdlib.h>
#include <string.h>
#include <stdlib.h>
#include <limits.h>
#include <stddef.h>
#include <machine/bus.h>

#include <sys/queue.h>
#include <sys/types.h>
#include <sys/systm.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>

#include "Global/RISCOS.h"
#include "Global/Services.h"
#include "Global/HALEntries.h"
#include "Interface/USBDriver.h"
#include "callx/callx.h"
#include "cmodule.h"
#include "tboxlibint/messages.h"

/* Have to avoid including stdio as there's a clash with the BSD stuff */
#define __stdio_h

#include "DebugLib/DebugLib.h"
#include "USB/USBDevFS.h"

#include "dwc_common_riscos.h"
#include "dwc_os.h"
#include "dwc_otg_riscos.h"

#include "dwc/driver/dwc_otg_hcd_if.h"
#include "dwc/driver/dwc_otg_regs.h"
#include "dwc/driver/dwc_otg_fiq_fsm.h"

/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/

/* this function is generated by resgen from the resource files */
extern void* resource_files (void);

/*****************************************************************************
* Module management
*****************************************************************************/

void* private_word; /* Module private word ptr */
static int instance = 0; /* Module instance no. */

static int* veneer_code = NULL; /* Pointer to USBDriver call veneer code */

static int hal_device = -1; /* Index of USB device in HAL */
static int usb_device_number; /* USB IRQ number */
static void *dwc_base=NULL; /* HW registers */
static void *mphi_base=NULL; /* MPHI registers */
static int mphi_device_number; /* MPHI IRQ number */
int dma_offset; /* ARM phys addr -> DMA addr offset */

static dwc_softc_t dwc_soft; /* Bus device we register with USBDriver */
static struct device * usb_soft=NULL; /* Device handle from USBDriver */
static bool driver_init=false; /* True/false for whether DWC layer is initialised */
static bool registering=false; /* True/false for whether we're in the middle of registering. Avoids nested registration attempt during ROM init. */

#ifdef DWCDRIVER_DEBUG
int dwcdebug; /* Debug level */
#endif

bool microframe_schedule = true;

extern int * init_veneer (void);

static _kernel_oserror* register_bus(void *in,struct device **out)
{
    *out = NULL;
    /* Check USBDriver is new enough */
    int version;
    _kernel_oserror *e = _swix(USBDriver_Version,_OUT(0),&version);
    if(e)
        return e;
    if(version < RISCOS_USBDRIVER_API_VERSION)
    {
        return make_error(ErrorNumber_DWC_USBTooOld, 0);
    }

    /* Now attempt to register */
    registering = true;
    e = _swix(USBDriver_RegisterBus, _INR(0,1)|_OUT(0),in,RISCOS_USBDRIVER_API_VERSION,out);
    if(e) *out = NULL;
    registering = false;
    return e;
}

void build_veneer (int* vn, int* st, size_t sz)
{
    int i;
    dprintf (("", "writing veneer from %p at %p\n", st, vn));
    int* entry_table = vn + sz / sizeof (void*);
    for (i = 0; i < sz / sizeof (void*); ++i) {
        int* entry = entry_table + 2 * i;

        /* if the method isn't implemented, don't veneer it */
        if (st[i] == NULL) continue;

        /* copy function pointer into veneer */
        vn[i] = st[i];

        /* copy new pointer into structure */
        st[i] = (int) entry;

        /* LDR ip, function[i] */
        entry[0] = 0xe51fC000       /* LDR ip, [pc, #-0] */
                  + 8               /* go back to current instruction */
                  + i * 8           /* go back to beginning of veneers */
                  + sz              /* go back to beginning of struct */
                  - i * 4;          /* go to func pointer */

        /* B common */
        entry[1] = 0xea000000       /* B here + 8 */
                  | ((veneer_code - entry - 1) & 0x00ffffff);
                                    /* branch to diff */
    }
    _swix(OS_SynchroniseCodeAreas, _INR(0,2), 1,
                                   entry_table,
                                   entry_table + 2 * (sz / sizeof (void*)) - 1);
}

static _kernel_oserror* new_instance (_kernel_swi_regs* r, void* pw, void* h)
{
    _kernel_oserror * e;

    (void) r;
    (void) pw;
    (void) h;


    /* register with the usbdriver module if it's already resident */
    dprintf (("", "Registering with USB driver\n"));
    e = register_bus(&dwc_soft, &usb_soft);
    if (e)
    {
        dprintf (("", "Failed to register: %s\n", e->errmess));
    }
    else
    {
        dprintf (("", "Registering with USB driver-done\n"));
    }

    // allow enough space for name, % and number, then space, and
    // another number
    char name[sizeof Module_Title + 1 + 12 + 1 + 12];
    sprintf (name, Module_Title"%%%d %d", instance + 1, hal_device+1);
    dprintf (("", "Trying to start %s\n", name));
    e = _swix (OS_Module, _INR(0,1), 14, name);

    if (e)
    {
        dprintf (("", "Failed to start %s: %s\n", name, e->errmess));
    }

    return NULL;
}

static _kernel_oserror *init_driver(void)
{
    if(driver_init)
        return NULL;

    dprintf (("", "Initialising dwc_common\n"));
    _kernel_oserror *e = dwc_common_riscos_init();
    if(e)
        return e;

    e = dwc_otg_riscos_init((const uint32_t *) dwc_base, (const uint8_t *) mphi_base, usb_device_number, mphi_device_number, &dwc_soft);
    if(e)
    {
        dwc_common_riscos_shutdown();
        return e;
    }    

    driver_init = true;

    return NULL;
}

static void shutdown_driver(void)
{
    if(!driver_init)
        return;

    dwc_otg_riscos_shutdown(&dwc_soft);

    dwc_common_riscos_shutdown();

    callx_remove_all_callbacks ();
    callx_remove_all_callafters ();
    callx_remove_all_calleverys ();

    driver_init = false;
}

_kernel_oserror* module_init (const char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror* e = 0;

    callx_init (pw);

    /* set up debugging */
    debug_initialise (Module_Title, "", "");
    debug_set_device(DADEBUG_OUTPUT);
    debug_set_unbuffered_files (TRUE);

#ifdef DWCDRIVER_DEBUG
    const char *c = getenv("dwcdebug");
    dwcdebug = (c?atoi(c):0);
#endif


    private_word = pw;
    instance = podule_base;


    /* if we're the first instance, then start searching from device # 0,
       otherwise the device to start searching from was passed as a string
       in the command tail */

    if (podule_base != 0)
    {
        char* endptr;
        hal_device = (int) strtol (cmd_tail, &endptr, 0);
        if (endptr == cmd_tail)
        {
            struct
            {
                int errnum;
                char errtok[8];
            } err_noreinit = { ErrorNumber_DWC_NoReinit, "NumParm" };

            return _swix (MessageTrans_ErrorLookup, _INR(0,2),
                          &err_noreinit, 0 /* Global messages */, 0 /* Internal buffer */);
        }
    }
    else
    {
#ifndef ROM
        /* Only first instance registers the messages in ResourceFS */
        e = _swix (ResourceFS_RegisterFiles, _IN (0), resource_files ());
        if (e != NULL) return e;
#endif
    }

    e = messages_file_open (Module_MessagesFile);
    if (e) goto error_dereg;

    /* find the next possible controller */
    do {
        struct
        {
            int type;
            int flags;
            void *hw;
            int devno;
            int dmaoffset;
            void *hw_mphi;
            int devno_mphi;
        } usbinfo;
        size_t usbinfolen;

        hal_device++;

        e = _swix(OS_Hardware, _INR(0,2)|_INR(8,9)|_OUT(0),
                               hal_device, &usbinfo, sizeof usbinfo,
                               0, EntryNo_HAL_USBControllerInfo,
                               &usbinfolen);
        if (!e && (usbinfolen == sizeof(usbinfo)) && usbinfo.type == HALUSBControllerType_SynopsysDWC)
        {
            usb_device_number = usbinfo.devno;
            dwc_base = usbinfo.hw;
            dma_offset = usbinfo.dmaoffset;
            mphi_base = usbinfo.hw_mphi;
            mphi_device_number = usbinfo.devno_mphi;
            break;
        }
        if(e || !usbinfolen)
        {
            /* Reached end of list */
            e = make_error (ErrorNumber_DWC_NoDWC, 0);
            goto error;
        }
    } while (1);

    dprintf (("", "Found DWC controller at %08x IRQ %d on device %d\n", dwc_base, usb_device_number, hal_device));

    if ((veneer_code = init_veneer ()) == NULL)
    {
        e = make_error (ErrorNumber_DWC_ClaimVeneer, 0);
        goto error;
    }
    dprintf (("", "veneer_code at %p\n", veneer_code));

    e = init_driver();

    if(e)
    {
        dprintf (("", "Failed to initialise driver: %s\n", e->errmess));
        return e;
    }

    dprintf (("", "Finished module initialisation\n"));

    /* try and start a new instance to catch any more controllers on the bus */

    callx_add_callback (new_instance, 0);

    return NULL;

error:
    dprintf (("", "Failed initialisation: %s\n", e->errmess));
    messages_file_close ();
error_dereg:
#ifndef ROM
    if (podule_base == 0) _swix (ResourceFS_DeregisterFiles, _IN(0), resource_files ());
#endif
    return e;    
}

_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
    NOTUSED(podule);
    NOTUSED(fatal);
    NOTUSED(pw);
    
    if (usb_soft != NULL)
    {
        _swix (USBDriver_DeregisterBus, _IN(0), usb_soft);
        usb_soft=NULL;
    }

    shutdown_driver();

    if (veneer_code) _swix (OS_Module, _IN(0)|_IN(2), 7, veneer_code);

    messages_file_close ();

#ifndef ROM
    /* only remove files for last instantiation */
    if (podule == 0)
    {
        _swix (ResourceFS_DeregisterFiles, _IN(0), resource_files ());
    }
#endif
    return NULL;
}

void module_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    dprintf (("", "svce %x reason %x\n",service_number,r->r[0]));
    NOTUSED(pw);
    switch (service_number)
    {
      case Service_USB:
        switch (r->r[0])
        {
           case Service_USB_USBDriverStarting:
             if ((usb_soft == NULL) && !registering)
             {
                 _kernel_oserror *e = init_driver();
                 if(e)
                 {
                   dprintf (("", "Failed to init driver: %s\n", e->errmess));
                   return;
                 }
                 dprintf (("", "Registering with USB driver from svcecall\n"));
                 e = register_bus(&dwc_soft,&usb_soft);
                 if(e)
                 {
                     dprintf (("", "Failed to register: %s\n", e->errmess));
                 }
                 else
                 {
                     dprintf (("", "Registering with USB driver from svcecall-done\n"));
                 }
             }
             break;
           case Service_USB_USBDriverDead:
             dprintf (("", "USB driver is dead, shutting down\n"));
             usb_soft = NULL;
             shutdown_driver();
             break;
           default:
             break;
         }
        break;
      case Service_PreReset:
        dprintf (("", "Svce prereset %x %x\n",Service_PreReset,service_number));
        if (usb_soft != NULL)
        {
            _swix (USBDriver_DeregisterBus, _IN(0), usb_soft);
            usb_soft=NULL;
        }
        shutdown_driver();
        break;
      case Service_ClaimFIQ:
        if(own_fiq_vector)
        {
          /* Someone is kicking us off the FIQ vector. How rude. */
          dprintf(("","Service_ClaimFIQ\n"));
          dwc_otg_riscos_release_fiq(&dwc_soft);
          r->r[1] = Service_Serviced;
        }
        break;
      case Service_ReleaseFIQ:
        if(reclaim_fiq_vector)
        {
          dprintf(("","Service_ReleaseFIQ\n"));
          dwc_otg_riscos_try_use_fiqs(&dwc_soft,false);
          if(own_fiq_vector)
          {
            r->r[1] = Service_Serviced;
          }
        }
        break;
#ifndef ROM
      case Service_ResourceFSStarting:
        /* Re-register the messages */
        (*(void (*)(void *, void *, void *, void *))r->r[2]) (resource_files (), 0, 0, (void *)r->r[3]);
        break;
#endif
    }
}

#ifdef DWCDRIVER_DEBUG
_kernel_oserror *module_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    switch (cmd_no) {
    case CMD_DWCDebug:
        {
        char* ptr;
        dwcdebug = (int) strtoul (arg_string, &ptr, 0);
extern uint32_t g_dbg_lvl;
        g_dbg_lvl = (int) strtoul (ptr, &ptr, 16);
        }
        break;
    }

    return 0;

    NOTUSED(pw);
    NOTUSED(argc);
}
#endif


int usb_irq_handler(_kernel_swi_regs *r, void *pw)
{
    int ret;

#ifdef RISCOS_FIQ_DOWNGRADE
    if(fiq_enable)
    {
      /* Flag to the FIQ routine that we want the IRQ to be off */
      fiq_downgrade.irq_masked = true;
    }
#endif

    /* Prevent recursion by masking the IRQ while we handle the interrupt */
    _swix(OS_Hardware, _IN(0)|_INR(8,9), dwc_soft.device_number, 0, EntryNo_HAL_IRQDisable);

    ret = dwc_otg_riscos_irq(&dwc_soft);

#ifdef RISCOS_FIQ_DOWNGRADE
    if(fiq_enable)
    {
      /* Flag to the FIQ routine that it can enable the IRQ again */
      fiq_downgrade.irq_masked = false;
      /* Re-enable the IRQ if we still have more work to do */
      if(!fiq_downgrade.fiq_trigger)
      {
        return 0;        
      }
      ret = 0;
    }
#endif

    if(!ret)
    {
      _swix(OS_Hardware, _IN(0)|_INR(8,9), dwc_soft.device_number, 0, EntryNo_HAL_IRQClear);
      _swix(OS_Hardware, _IN(0)|_INR(8,9), dwc_soft.device_number, 0, EntryNo_HAL_IRQEnable);
    }
    else
    {
      dprintf(("","******** Panic! unhandled IRQ ********\n"));
    }

    NOTUSED(r);
    NOTUSED(pw);

    return ret;
}

/*****************************************************************************/

usbd_status usb_insert_transfer(usbd_xfer_handle xfer)
{
    usbd_status status = USBD_CANCELLED; /* Should _swix() error */
    _swix (USBDriver_InsertTransfer, _IN (0) | _OUT (0), xfer, &status);
    return status;
}

void usb_transfer_complete(usbd_xfer_handle xfer)
{
    _swix (USBDriver_TransferComplete, _IN (0), xfer);
}

static _kernel_oserror*_riscos_abort_pipe (_kernel_swi_regs * r, void* pw, void* v)
{
    NOTUSED(r);
    NOTUSED(pw);
    softc_abort_xfer (v, USBD_TIMEOUT);
    return NULL;
}

void
riscos_abort_pipe (void* v)
{
    callx_add_callback_irqsoff (_riscos_abort_pipe, v);
}

void
riscos_cancel_abort_pipe (void* v)
{
    callx_remove_callback (_riscos_abort_pipe, v);
}

_kernel_oserror *endpoint_disable_cb(_kernel_swi_regs *r,void *pw,void *handle)
{
    DPRINTFN(15,("endpoint_disable_cb: %08x\n",handle));
    dwc_otg_hcd_endpoint_disable(dwc_soft.dwc_dev.hcd,handle,250);
    return NULL;
}

#ifdef DEBUGLIB
int address_valid(void *addr,int align)
{
    if(!addr || (((int)addr) & align))
        return 0;
    if(_swi(OS_ValidateAddress,_INR(0,1)|_RETURN(_FLAGS),addr,((int)addr)+1) & _C)
        return 0;
    return 1;
}
#endif
@


1.19
log
@Remove some part finished HAL support
Detail:
  A few sections of code guarded by USBHAL defines carried over from MUSBDriver, but were never finished due to the complexity of DWCDriver.
  These are no longer needed now the kernel scans for keys, so remove them.
Admin:
  Couple of warnings in cmodule.c also attended to.
  Submission for USB bounty.

Version 0.32. Tagged as 'DWCDriver-0_32'
@
text
@d402 2
a403 7
#if 0 /* Don't shutdown the driver here, wait for ModulePostFinal. This avoids us having to deal with USBDriver calling us to close pipes and cancel transfers after we've shutdown the DWC layer */
           case Service_USB_USBDriverDying:
             dprintf (("", "Deregistering with USB driver\n"));
             /* USBDriver will do the deregistering at this point, since
                it's SWIs are not active anymore */
//             ehci_detach(&ehci_soft,0);
//             ehci_shutdown(&ehci_soft);
d407 2
a408 2
#endif
           default:break;
a419 8
      case Service_ModulePostFinal:
        if(!strcmp((const char *) r->r[2],"USBDriver"))
        {
          dprintf(("","Svce postfinal USBDriver\n"));
          usb_soft = NULL;
          shutdown_driver();
        }
        break;
d522 1
a522 1
    usbd_status status;
@


1.18
log
@Internationalised
Detail:
  Add support for standalone messages registration, and actually use the messages rather than just exporting them in ROM builds.
  Changed to use allocated error bases rather than 0.
  Sync controller hunting loop with other HC for ease of comparison.
Admin:
  Submission for USB bounty.
  Tested on a Pi 2.

Version 0.29. Tagged as 'DWCDriver-0_29'
@
text
@d181 1
a181 1
static _kernel_oserror *init_driver()
d203 1
a203 1
static void shutdown_driver()
@


1.17
log
@Build fix
Admin:
  Requires NetBSD-1_17
@
text
@d38 1
d70 1
a70 1
static int hal_device = 0; /* Index of USB device in HAL */
d99 4
a102 1
        return (_kernel_oserror*)"\0\0\0\0USBDriver too old";
d250 8
a257 2
            return (_kernel_oserror*)
                "\1\0\0\0"Module_Title" can't be reinitialised";
d260 8
d269 2
d272 1
a272 1
    // find the next possible controller
d286 2
d301 6
a306 5
        else
            hal_device++;
        if(e) return e;
        if(!usbinfolen)
            return (_kernel_oserror*) "\0\0\0\0No DWC devices found";
d313 2
a314 1
        return (_kernel_oserror*) "\0\0\0\0Couldn't claim veneer memory";
d332 10
a341 1
    return 0;
d360 9
d453 6
a458 2
          
      default:break;
@


1.16
log
@Revert accidental commits
Admin:
  These changes are currently subject to rework via the normal submissions channel.
@
text
@d319 1
a319 1
        _swix (USBDriver_DeRegisterBus, _IN(0), usb_soft);
d378 1
a378 1
            _swix (USBDriver_DeRegisterBus, _IN(0), usb_soft);
@


1.15
log
@ Fixes to get isochronous transfer in DWCDriver (Raspberry Pi)`
Detail:

Changes to the RISC OS part of the DWCDriver (Raspberry Pi) necessary to get isochronous transfers working on a pi.

DWCDriver.c.cmodule
DWCDriver.c.dwc_otg_riscos
DWCDriver.c.softc_device
DWCDriver.h.dwc_otg_riscos

Admin:
submitted by Colin Granville
tested on pi

Version 0.25. Tagged as 'DWCDriver-0_25'
@
text
@a495 1
    ((struct dwc_softc_xfer*) xfer)->active = 0;
@


1.14
log
@Don't build a veneer that points to nothing
Copy of the change in NetBSD-1_09.

Version 0.23. Tagged as 'DWCDriver-0_23'
@
text
@d496 1
@


1.13
log
@Update to 'FIQ FSM' USB driver
Detail:
  Makefile, dwc/* - Updated to latest-ish code from Raspberry Pi github (rev c8baa9702c). Includes the 'FIQ FSM' USB driver, which replaces the older 'FIQ fix'. Note that many files appear to have no functional changes - just trailing whitespace removal to keep things in sync with github.
  Makefile - add DEBUGLIBS back into the debug libs listing to fix debug builds
  c/cmodule - Update to work with new FIQ FSM flags
  c/dwc_otg_riscos - Update to work with new FIQ FSM flags. Update initialisation procedure. Change IRQ handling to try both the HCD & CIL interrupt handlers (HCD can claim interrupt is handled when there's still a CIL interrupt pending). Disable support for falling back to IRQ if the FIQ vector is claimed by someone else - will need new implementation to cope with starting & stopping the FIQ FSM.
  s/regaccess - Update FIQ veneer & install routine to allow operation with either the dwc_otg_fiq_fsm or dwc_otg_fiq_nop functions.
Admin:
  Tested on Raspberry Pi 1 & 2


Version 0.21. Tagged as 'DWCDriver-0_21'
@
text
@d115 3
@


1.12
log
@Don't reach into USBDriver's back pocket
cmodule.c:
  Use USBDriver.h from interface exports
Makefile:
  Remove duplicated libs from debug build
  Remove relative reference to NetBSD component from VPATH
!MkDebug:
  Select debug target so the right compiler switches are used
Built, but not tested.

Version 0.20. Tagged as 'DWCDriver-0_20'
@
text
@d51 1
a51 1
#include "dwc/driver/dwc_otg_mphi_fix.h"
a85 3
bool nak_holdoff_enable = true;
bool fiq_fix_enable = false;
bool fiq_split_enable = false;
d440 1
a440 1
    if(fiq_fix_enable)
d453 1
a453 1
    if(fiq_fix_enable)
@


1.11
log
@Enable part one of the FIQ fix
Detail:
  This change enables the basic 'FIQ fix', where SOF interrupts are handled by a FIQ handler and all other interrupts are delegated to IRQ.
  During testing it was observed that when the FIQ fix was enabled, what appears to be the host-side VCHIQ process would randomly die. It could take anywhere from several seconds (including during ROM init) or several hours for this to happen.
  After much investigation it looks like the cause was the use of the MPHI peripheral as a mechanism to trigger an IRQ from the FIQ handler. Changing the code in dwc_otg_hcd_handle_intr() so that it 'flushes' MPHI more often (after every interrupt instead of after every 60) seemed to reduce the problem, while changing the IRQ generation mechanism to use a different IRQ source (e.g. timer) made the crash go away entirely
  In the end I've settled on the compromise of using the MPHI peripheral, but in a way in which we only need to poke it once on startup, instead of once for every desired IRQ. Once we have it generating an IRQ we then rely on masking/unmasking the IRQ in the interrupt controller to get the desired effect of downgrading FIQs to IRQs. See the RISCOS_FIQ_DOWNGRADE #define.
  Changed files:
  - c/cmodule - Use symbolic constant for the USB controller ID instead of a magic number. Get the MPHI details from HAL_USBControllerInfo. Pay attention to Service_ClaimFIQ/Service_ReleaseFIQ and enable/disable the FIQ fix as appropriate.
  - c/dwc_common_riscos - Disable some debug functions which were accidentally left in non-debug builds. Change work queue/tasklet thread initialisation to fix a deadlock issue seen on reboot.
  - c/dwc_otg_riscos - Set up the MPHI and enable/disable the FIQ handler as required
  - cmhg/modhead - Pay attention to Service_ClaimFIQ/Service_ReleaseFIQ
  - dwc/driver/c/dwc_otg_hcd_intr, dwc/driver/h/dwc_otg_mphi_fix - RISCOS_FIQ_DOWNGRADE code
  - dwc/dwc_common_port/h/dwc_os - Make sure __DWC_WARN, __DWC_ERROR, DWC_EXCEPTION are compiled out in non-debug builds
  - h/dwc_otg_riscos - declare extra functions/variables related to FIQ fix
  - s/regaccess - Routine to install the FIQ handler on the FIQ vector, and simple HAL call wrapper
Admin:
  Tested on Raspberry Pi
  Requires Kernel-5_35-4_79_2_227, BCM2835-0_34


Version 0.15. Tagged as 'DWCDriver-0_15'
@
text
@a15 1
#include "../../NetBSD/build/USBDriver.h"
d35 1
@


1.10
log
@Fix to allow building against NetBSD-0_85
Detail:
  c/cmodule - Don't use NetBSD/build/service.h, it no longer exists. Use the exported USB/USBDevFS.h instead. Fix service call reason codes to use USBDevFS names.
Admin:
  Tested in BCM2835 ROM build
  Build output is binary-identical to previous version
  Requires NetBSD-0_85


Version 0.14. Tagged as 'DWCDriver-0_14'
@
text
@d50 2
d70 1
a70 1
static int device_number; /* IRQ number */
d72 2
d187 1
a187 1
    e = dwc_otg_riscos_init((const uint32_t *) dwc_base, device_number, &dwc_soft);
d261 2
d270 1
a270 1
        if (!e && (usbinfolen == sizeof(usbinfo)) && usbinfo.type == 3)
d272 1
a272 1
            device_number = usbinfo.devno;
d275 2
d286 1
a286 1
    dprintf (("", "Found DWC controller at %08x IRQ %d on device %d\n", dwc_base, device_number, hal_device));
d390 22
d442 8
d451 1
a451 1
    _swix(OS_Hardware, _IN(0)|_INR(8,9), device_number, 0, EntryNo_HAL_IRQDisable);
d455 14
d471 2
a472 2
      _swix(OS_Hardware, _IN(0)|_INR(8,9), device_number, 0, EntryNo_HAL_IRQClear);
      _swix(OS_Hardware, _IN(0)|_INR(8,9), device_number, 0, EntryNo_HAL_IRQEnable);
@


1.9
log
@Remove unnecessary build dependence upon tboxlibint

Version 0.12. Tagged as 'DWCDriver-0_12'
@
text
@d43 1
a43 2
#include "../../NetBSD/build/service.h"
#include "oslib/devicefs.h"
d331 1
a331 1
           case Service_USBDriver_Starting:
d353 1
a353 1
           case Service_USBDriver_Dying:
@


1.8
log
@Update to latest code from Raspberry Pi github
Detail:
  Makefile, dwc/* - Updated to latest code from Raspberry Pi github (rev e0001dd59d). Includes the fabled 'FIQ fix' code, although the code isn't yet enabled in the RISC OS version of the driver.
  c/cmodule - Add extra flags for controlling driver behaviour, as required by the new core code
  c/dwc_otg_riscos - Add some missing driver parameters (although we leave them at default). Handle DWC_E_SHUTDOWN xfer errors, which will now be produced when the driver is shutting down
  c/softc_device - Disable interrupts around dwc_otg_hcd_urb_enqueue, to mirror behaviour of Linux code (previously, it was the responsibility of the DWC code to disable interrupts for the appropriate part of the operation)
  s/regaccess - Add some extra IRQ/memory barrier functions required by the new code (mainly the FIQ fix). Make DWC_MODIFY_REG32 operate atomicly (mirrors change in Linux version)
Admin:
  Tested on Raspberry Pi


Version 0.11. Tagged as 'DWCDriver-0_11'
@
text
@a37 1
#include "tboxlibint/messages.h"
@


1.7
log
@Fix hang on boot
Detail:
  c/cmodule - Add a re-entrancy check to USB driver initialisation; due to recent kernel changes we're now getting the "USBDriver has started" service call during the middle of our call to USBDriver_Register (called from our own initialisation callback). Without the re-entrancy check the system was getting confused and sending a duff transfer request to DWCDriver, resulting in a hang somewhere in the driver logic.
Admin:
  Tested on Raspberry Pi
  Machine no longer stops after "mod init done" is displayed


Version 0.10. Tagged as 'DWCDriver-0_10'
@
text
@d84 3
@


1.6
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@d77 1
d98 1
d101 1
d331 1
a331 1
             if (usb_soft == NULL)
@


1.5
log
@Fix aborts on reset/*rmkill USBDriver
Detail:
  c/cmodule, cmhg/modhead - Don't shutdown DWC layer during Service_USBDriver_Dying. Instead, only do it during Service_ModulePostFinal/Service_PreReset(/module finialisation). Also during Service_PreReset, deregister with USBDriver. This ensures we're deregistered with USBDriver before we shut down the DWC layer, and so don't have to worry about receiving events from USBDriver after the DWC layer is shut down.
  c/dwc_common_riscos, c/dwc_otg_riscos, h/dwc_common_riscos - Improve handling of DWC endpoint disable callbacks. The memory block for the endpoint now has a flag set in its header when a callback is pending, allowing us to avoid double-free situations if both ourselves and the DWC layer decide to free the endpoint.
  c/softc_root - Correct some debug messages
  dwc/driver/c/dwc_otg_hcd - Fix qh_list_free to use DWC_LIST_FOREACH_SAFE (as dwc_otg_hcd_qh_remove_and_free will remove entries from the list) - fixes potential double-free if a non-empty list is being freed
  dwc/driver/c/dwc_otg_hcd_intr - Fix building of debug builds
Admin:
  Tested in Pi ROM with high processor vectors
  Resets and killing/reiniting USBDriver now works properly


Version 0.08. Tagged as 'DWCDriver-0_08'
@
text
@d82 2
d465 2
a466 2
    dprintf(("","endpoint_disable_cb: %08x\n",handle));
    dwc_otg_hcd_endpoint_disable(dwc_soft.hcd,handle,250);
a479 7

#ifdef SOF_FIX
int sof_setting(void)
{
    return 1;
}
#endif
@


1.4
log
@Track latest developments on Raspberry Pi github
Detail:
  Makefile, c/cmodule, h/module, dwc/driver/c/dwc_otg_driver, dwc/driver/c/dwc_otg_hcd, dwc/driver/c/dwc_otg_hcd_ddma, dwc/driver/c/dwc_otg_hcd_intr, dwc/driver/c/dwc_otg_hcd_linex, dwc/driver/h/dwc_otg_hcd, dwc/dwc_common_port/c/dwc_common_linux - Track latest developments on Raspberry Pi github. Includes fixes for buffer overruns when unexpectedly receiving too much data, and changes to allow SOF interrupt spam to be reduced.
  c/dwc_common_riscos - Make sure we always round up delay values when converting from msec to csec. Avoids issues with high frequency timers (e.g. SOF re-enable timer) hogging all the CPU time. May be the cause of some other bad behaviour that I've experienced in the past?
Admin:
  Tested on Raspberry Pi with high processor vectors
  Note - SOF fix is currently disabled, as it was causing too many interrupt packets (e.g. mouse clicks) to be lost. Probable cause is that we're running the SOF re-enable timer at 100Hz instead of 1kHz. May be worth investigating moving all timer/thread scheduling over to a HAL timer which can provide us a 1kHz ticker interrupt.


Version 0.05. Tagged as 'DWCDriver-0_05'
@
text
@d346 1
d356 1
d362 6
a367 1
        shutdown_driver(); /* Should be safe to do this without deregistering the bus */
d369 7
d463 1
@


1.3
log
@Update to latest code from Raspberry Pi github. Improve debugging. Fix race condition that could lead to timeout callbacks inappropriately firing.
Detail:
  Makefile, dwc/* - Updated to latest code from Raspberry Pi github. Tweaks specific to Broadcom hardware have been placed in BCM2835 #ifdef's to allow them to easily be identified/controlled if we need the driver to support different SoCs in future
  c/cmodule, c/dwc_common_riscos, c/port, c/softc_device, h/cmodule - Improved debugging code
  c/softc_device - Schedule timeout before starting transfer instead of after. Fixes issue where a transfer that completes inbetween dwc_otg_hcd_urb_enqueue() and callout_reset() would result in the timeout being enabled even though the transfer is already complete
  s/triggercbs - Synced with latest USBDriver version for consistency
Admin:
  Tested on Raspberry Pi with high processor vectors
  Fixes some, if not all, stability issues


Version 0.04. Tagged as 'DWCDriver-0_04'
@
text
@d463 7
@


1.2
log
@Misc housekeeping
Detail:
  Makefile, !MkDebug,fd7 - Debug version of module can now be built just be passing "DEBUG=TRUE" to amu
  c/cmodule - Only accept USB controllers if HAL_USBControllerInfo says the struct size is an exact match with what we expect
  c/dwc_otg_riscos - Remove incorrect comment; both dwc_dma_alloc and malloc_contig zero memory
  s/bufman - Delete unused file
  s/call_veneer, s/triggercbs - Use Entry/EXIT macros to avoid single-reg LDM/STM performance warnings. Convert tabs to spaces.
Admin:
  Tested in BCM2835 ROM


Version 0.02. Tagged as 'DWCDriver-0_02'
@
text
@d217 2
a218 2
    dwcdebug = atoi(getenv("dwcdebug"));
    dwcdebug = 11;
d452 11
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@d258 1
a258 1
        if (!e && (usbinfolen >= sizeof(usbinfo)) && usbinfo.type == 3)
@

