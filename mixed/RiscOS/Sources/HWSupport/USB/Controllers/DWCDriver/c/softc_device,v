head	1.8;
access;
symbols
	DWCDriver-0_35:1.8
	DWCDriver-0_34:1.8
	DWCDriver-0_33:1.8
	DWCDriver-0_32:1.7
	DWCDriver-0_31:1.7
	DWCDriver-0_30:1.7
	DWCDriver-0_29:1.7
	DWCDriver-0_28:1.7
	DWCDriver-0_27:1.7
	DWCDriver-0_26:1.7
	DWCDriver-0_24-1:1.7
	DWCDriver-0_25:1.6
	DWCDriver-0_24:1.5
	DWCDriver-0_23:1.5
	DWCDriver-0_22:1.5
	DWCDriver-0_21:1.5
	DWCDriver-0_20:1.5
	DWCDriver-0_19:1.5
	DWCDriver-0_18:1.4
	DWCDriver-0_17:1.4
	DWCDriver-0_16:1.4
	DWCDriver-0_15:1.4
	DWCDriver-0_14:1.4
	DWCDriver-0_13:1.4
	DWCDriver-0_12:1.4
	DWCDriver-0_11:1.4
	DWCDriver-0_10:1.3
	DWCDriver-0_09:1.3
	DWCDriver-0_08:1.2
	DWCDriver-0_07:1.2
	DWCDriver-0_06:1.2
	DWCDriver-0_05:1.2
	DWCDriver-0_04:1.2
	DWCDriver-0_03:1.1
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.8
date	2017.11.25.09.49.31;	author rool;	state Exp;
branches;
next	1.7;
commitid	krukx1U3qlvrUogA;

1.7
date	2016.03.04.20.54.27;	author rool;	state Exp;
branches;
next	1.6;
commitid	MvG9A9da0K4NQmXy;

1.6
date	2016.03.04.01.33.39;	author jballance;	state Exp;
branches;
next	1.5;
commitid	WvfwatlEQwEQrgXy;

1.5
date	2015.03.28.20.48.30;	author jlee;	state Exp;
branches;
next	1.4;
commitid	ILCg2z4T1KyAPpfy;

1.4
date	2014.04.26.18.18.00;	author jlee;	state Exp;
branches;
next	1.3;
commitid	3PdzN60cJJ3zNdyx;

1.3
date	2012.09.17.16.32.53;	author jlee;	state Exp;
branches;
next	1.2;
commitid	DXVFy2WJjyak3Ukw;

1.2
date	2012.06.24.21.41.47;	author jlee;	state Exp;
branches;
next	1.1;
commitid	7BXP9gA386QIu0aw;

1.1
date	2012.06.03.15.12.53;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.8
log
@Fix to device descriptor interval handling
Detail:
  For high speed interrupt endpoints, and full/high speed isochronous, the bInterval value is held in log2 form. Take this into account.
  Correct the built in root hub device descriptor similarly - 255 is not valid for a HSHUBSTT (USB 2.0 errata 07-Dec-2000 corrected the mistake on page 412 of the USB 2.0 spec).
Admin:
  Based on a submission from Colin Granville, with edits.

Version 0.33. Tagged as 'DWCDriver-0_33'
@
text
@/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdarg.h>
#include <stdlib.h>
#include <stdbool.h>
#include "kernel.h"
#include "swis.h"
#include "cmodule.h"
#include "modhead.h"
#include "Global/HALEntries.h"

#include <sys/callout.h>
#include <sys/queue.h>

#include <machine/bus.h>
#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>

#include "dwc_os.h"
#include "dwc_otg_riscos.h"

#include "dwc/driver/dwc_otg_hcd_if.h"
#include "dwc/driver/dwc_otg_dbg.h"
#include "dwc/driver/dwc_otg_driver.h"

#include "dwc/driver/dwc_otg_hcd.h"

static void softc_device_timeout(void *addr)
{
	DPRINTFN(10,("softc_device_timeout: %p\n",addr));
	riscos_abort_pipe(addr);
}

usbd_status softc_device_transfer(usbd_xfer_handle xfer)
{
	dwc_assert(address_valid(xfer,3),"Bad xfer handle %08x",xfer);
	usbd_status err;

	DPRINTFN(10,("softc_device_transfer: xfer=%p pipe=%p\n",xfer,xfer->pipe));

#ifdef DWCDRIVER_DEBUG
	usbd_pipe_handle pipe = xfer->pipe;
	usbd_xfer_handle xfer2;
	SIMPLEQ_FOREACH(xfer2, &pipe->queue, next) {
                dwc_assert(xfer != xfer2,"xfer already in queue!");
	}
#endif
	/* Add transfer to queue */
	err = usb_insert_transfer(xfer);
	if (err)
		return err;

	/* Pipe isn't running, start first xfer */
	return softc_device_start(SIMPLEQ_FIRST(&xfer->pipe->queue));
}

usbd_status softc_device_start(usbd_xfer_handle xfer)
{
	dwc_assert(address_valid(xfer,3),"Bad xfer handle %08x",xfer);
	struct dwc_softc_xfer *ex = (struct dwc_softc_xfer *) xfer;
	struct dwc_softc_pipe *epipe = (struct dwc_softc_pipe *)xfer->pipe;
	dwc_softc_t *sc = (dwc_softc_t *)epipe->pipe.device->bus;
	usb_endpoint_descriptor_t *ed = epipe->pipe.endpoint->edesc;
	struct usbd_device *dev = epipe->pipe.device;

	DPRINTFN(10,("softc_device_start: xfer=%p pipe=%p urb=%p\n",xfer,xfer->pipe,epipe->urb));

	dwc_assert(!epipe->xfer,"Pipe should be idle here");

	/* DWCTODO - Hack - reset urb params
	   DWC layer doesn't (properly) support reuse of urbs, so we must reset
	   certain key parameters ourselves */
	epipe->urb->actual_length = 0;
	epipe->urb->error_count = 0;
	epipe->urb->status = 0;
	memset(epipe->urb->iso_descs,0,sizeof(struct dwc_otg_hcd_iso_packet_desc)*epipe->urb->packet_count);

	if((ed->bmAttributes & UE_XFERTYPE) == UE_CONTROL)
	{
		/* Set up pipe info. Direction needs to come from request packet instead of pipe. */
		dwc_otg_hcd_urb_set_pipeinfo(epipe->urb,dev->address,UE_GET_ADDR(ed->bEndpointAddress),UE_GET_XFERTYPE(ed->bmAttributes),ex->xfer.request.bmRequestType & UT_READ,UE_GET_SIZE(UGETW(ed->wMaxPacketSize)));

		/* Copy request packet to our DMA buffer */
		memcpy(epipe->request,&ex->xfer.request,sizeof(usb_device_request_t));
		DPRINTF(("type %02x req %02x val %04x idx %04x len %04x\n",ex->xfer.request.bmRequestType,ex->xfer.request.bRequest,UGETW(ex->xfer.request.wValue),UGETW(ex->xfer.request.wIndex),UGETW(ex->xfer.request.wLength)));
	}

	uint32_t flags = 0;
	if((ex->xfer.flags & USBD_FORCE_SHORT_XFER) && !(ex->xfer.length % UGETW(ed->wMaxPacketSize)))
		flags |= URB_SEND_ZERO_PACKET;

	/* Get DMA addr of buffer */
	void *buf = KERNADDR(&ex->xfer.dmabuf,0);
	dwc_dma_t dma_addr = ((dwc_dma_t) vtophys(buf)) + dma_offset;

	DPRINTF(("xfer len %08x buf %08x -> %08x\n",ex->xfer.length,buf,dma_addr));

	/* Set urb parameters for this xfer */
	uint32_t interval = ed->bInterval;
	if (UE_GET_XFERTYPE(ed->bmAttributes) == UE_ISOCHRONOUS ||
	    (UE_GET_XFERTYPE(ed->bmAttributes) == UE_INTERRUPT && xfer->pipe->device->speed == USB_SPEED_HIGH))
	{
		interval = min(interval - 1, 15); /* USB 2.0, Table 9-13 */
		interval = 1 << interval;
	}

	dwc_otg_hcd_urb_set_params(epipe->urb,ex,buf,dma_addr,ex->xfer.length,epipe->request,epipe->dma_req,flags,interval);

	/* DWCTODO - Set isoc desc params */

	/* Queue and start the urb */
	epipe->xfer = ex;

	bool timeout = ex->xfer.timeout && !sc->sc_bus.use_polling;

	dwc_irqflags_t irqflags;
	DWC_SPINLOCK_IRQSAVE(sc->dwc_dev.hcd->lock, &irqflags);

	if(timeout) {
		DPRINTFN(10,("-> set timeout %d on %x\n",ex->xfer.timeout,ex));
		callout_reset(&(ex->xfer.timeout_handle), (MS_TO_TICKS(ex->xfer.timeout)), (softc_device_timeout), (ex));
	}

	int ret = dwc_otg_hcd_urb_enqueue(sc->dwc_dev.hcd,epipe->urb,&epipe->dwc_priv,0);

	if(ret)
	{
		dprintf(("","urb_enqueue failed, %d\n",ret));
		if(timeout) {
			callout_stop(&(ex->xfer.timeout_handle));
			/* Just in case... */
			riscos_cancel_abort_pipe(xfer);
		}
	}

	DWC_SPINUNLOCK_IRQRESTORE(sc->dwc_dev.hcd->lock, irqflags);

	if(!ret)
	{
		return USBD_IN_PROGRESS;
	}

	epipe->xfer = NULL;

	/* If we've failed to start we must mark the request as complete, with the appropriate error code */
	usbd_status err;
	switch(ret)
	{
	case -DWC_E_NO_DEVICE:
		err = USBD_BAD_ADDRESS; /*?*/
		break;
	case -DWC_E_NO_MEMORY:
		err = USBD_NOMEM;
		break;
	default:
		err = USBD_IOERROR;
		break;
	}
	xfer->status = err;
	usb_transfer_complete(xfer);
	/* xfer may have been deleted now */
	return err;
}

void softc_device_abort(usbd_xfer_handle xfer)
{
	dwc_assert(address_valid(xfer,3),"Bad xfer handle %08x",xfer);

	DPRINTF(("softc_device_abort: xfer=%p\n",xfer));
	softc_abort_xfer(xfer,USBD_CANCELLED);
}

void softc_device_close(usbd_pipe_handle pipe)
{
	dwc_assert(address_valid(pipe,3),"Bad pipe handle %08x",pipe);

	struct dwc_softc_pipe *epipe = (struct dwc_softc_pipe *) pipe;
	dwc_softc_t *sc = (dwc_softc_t *)epipe->pipe.device->bus;
	DPRINTF(("softc_device_close: pipe=%p\n",epipe));

	dwc_assert(!epipe->xfer,"Pipe should be idle here");

	/* Free endpoint */
	dwc_otg_hcd_endpoint_disable(sc->dwc_dev.hcd,epipe->dwc_priv,250);

	/* Free urb */
	dwc_free(NULL,epipe->urb);

	/* Free request buffer */
	if(epipe->request)
		dwc_dma_free(NULL,sizeof(usb_device_request_t),epipe->request,epipe->dma_req);
}

void softc_device_clear_toggle(usbd_pipe_handle pipe)
{
	dwc_assert(address_valid(pipe,3),"Bad pipe handle %08x",pipe);

	DPRINTF(("softc_device_clear_toggle: pipe=%p\n",pipe));
	/* DWCTODO - no way of controlling toggle? maybe have to disable endpoint? */
}

void softc_device_done(usbd_xfer_handle xfer)
{
	dwc_assert(address_valid(xfer,3),"Bad xfer handle %08x",xfer);

	DPRINTFN(10,("softc_device_done: xfer=%p, length=%d, repeat=%d\n", xfer,xfer->actlen,xfer->pipe->repeat));
	/* If it's a repeating xfer, we put it back on the list */
	if(xfer->pipe->repeat)
		softc_device_start(xfer);
}

void softc_abort_xfer(usbd_xfer_handle xfer,usbd_status status)
{
	dwc_assert(address_valid(xfer,3),"Bad xfer handle %08x",xfer);

	struct dwc_softc_xfer *ex = (struct dwc_softc_xfer *) xfer;
	struct dwc_softc_pipe *epipe = (struct dwc_softc_pipe *) xfer->pipe;
	dwc_softc_t *sc = (dwc_softc_t *)epipe->pipe.device->bus;
	DPRINTFN(10,("softc_abort_xfer: xfer %p status %d\n",xfer,status));

	if(epipe->xfer == ex)
	{
		DPRINTFN(10,("dequeing urb\n"));
		/* Cancel the urb */
		dwc_otg_hcd_urb_dequeue(sc->dwc_dev.hcd,epipe->urb);

		/* Mark pipe as idle */
		epipe->xfer = NULL;

		DPRINTFN(10,("urb dequeued\n"));
	}

	/* Set status */
	xfer->status = status;
	int s = splusb();

	/* Cancel any timeout */
	callout_stop(&(xfer->timeout_handle));
	/* And cancel the associated callback */
	riscos_cancel_abort_pipe(xfer);

	/* Tell USBDriver */
	usb_transfer_complete(xfer);

	splx(s);
}

@


1.7
log
@Revert accidental commits
Admin:
  These changes are currently subject to rework via the normal submissions channel.
@
text
@d125 7
d133 1
a133 1
	dwc_otg_hcd_urb_set_params(epipe->urb,ex,buf,dma_addr,ex->xfer.length,epipe->request,epipe->dma_req,flags,ed->bInterval);
@


1.6
log
@ Fixes to get isochronous transfer in DWCDriver (Raspberry Pi)`
Detail:

Changes to the RISC OS part of the DWCDriver (Raspberry Pi) necessary to get isochronous transfers working on a pi.

DWCDriver.c.cmodule
DWCDriver.c.dwc_otg_riscos
DWCDriver.c.softc_device
DWCDriver.h.dwc_otg_riscos

Admin:
submitted by Colin Granville
tested on pi

Version 0.25. Tagged as 'DWCDriver-0_25'
@
text
@a75 8

	/* to get contiguous isochronous transfers start xfer immediately */
	if (UE_GET_XFERTYPE(xfer->pipe->endpoint->edesc->bmAttributes) == UE_ISOCHRONOUS) {
		if (err && err != USBD_IN_PROGRESS)
			return err;
		return softc_device_start(xfer);
	}

d92 1
a92 2
	/* Stop attempts to start an xfer that is already started */
	if (ex->active) return USBD_IN_PROGRESS;
d94 1
a94 6
	if (ex->urb == NULL) {
		ex->urb = dwc_otg_hcd_urb_alloc(sc->dwc_dev.hcd,xfer->nframes,0);
		if (ex->urb ==NULL) return USBD_NOMEM;
	}

	DPRINTFN(10,("softc_device_start: xfer=%p pipe=%p urb=%p\n",xfer,xfer->pipe,ex->urb));
a95 1
           
d99 4
a102 10
	ex->urb->actual_length = 0;
	ex->urb->error_count = 0;
	ex->urb->status = 0;
	ex->urb->packet_count = xfer->nframes;
	memset(ex->urb->iso_descs, 0, sizeof(struct dwc_otg_hcd_iso_packet_desc) * xfer->nframes);

	int i,offset;
	for (i = 0, offset = 0; i < xfer->nframes; offset += xfer->frlengths[i], i++) {
		dwc_otg_hcd_urb_set_iso_desc_params(ex->urb, i,offset,xfer->frlengths[i]);
	}
d104 2
a105 1
	if((ed->bmAttributes & UE_XFERTYPE) == UE_CONTROL) {
d107 1
a107 5
		dwc_otg_hcd_urb_set_pipeinfo(ex->urb,dev->address,
						UE_GET_ADDR(ed->bEndpointAddress),
						UE_GET_XFERTYPE(ed->bmAttributes),
						ex->xfer.request.bmRequestType & UT_READ,
						UE_GET_SIZE(UGETW(ed->wMaxPacketSize)));
d111 1
a111 11
		DPRINTF(("type %02x req %02x val %04x idx %04x len %04x\n",ex->xfer.request.bmRequestType,
									ex->xfer.request.bRequest,
									UGETW(ex->xfer.request.wValue),
									UGETW(ex->xfer.request.wIndex),
									UGETW(ex->xfer.request.wLength)));
	} else {
		dwc_otg_hcd_urb_set_pipeinfo(ex->urb,dev->address,
					UE_GET_ADDR(ed->bEndpointAddress),
					UE_GET_XFERTYPE(ed->bmAttributes),
					UE_GET_DIR(ed->bEndpointAddress),
					UE_GET_SIZE(UGETW(ed->wMaxPacketSize)));
a113 1

a114 1

d122 1
a122 1
	DPRINTF(("xfer len %08x buf %08x -> %08x\n",ex->xfer.length, buf, dma_addr));
d126 1
a126 1
	int interval = ed->bInterval;
d128 4
a131 6
	if (UE_GET_XFERTYPE(ed->bmAttributes) == UE_ISOCHRONOUS ||
	    (UE_GET_XFERTYPE(ed->bmAttributes) == UE_INTERRUPT && xfer->pipe->device->speed == USB_SPEED_HIGH)) {
		interval = (1 << (interval - 1));
	}
	
	dwc_otg_hcd_urb_set_params(ex->urb,ex,buf,dma_addr,ex->xfer.length,epipe->request,epipe->dma_req,flags,interval);
d143 1
a143 1
	int ret = dwc_otg_hcd_urb_enqueue(sc->dwc_dev.hcd,ex->urb,&epipe->dwc_priv,0);
d145 2
a146 1
	if(ret) {
d150 1
a150 1
			/* Just in case ... */
d157 2
a158 2
	if (!ret) {
		ex->active = 1;
a160 3
        
	ex->active = 0;

d162 1
a162 1
	/* If we failed to start we must mark the request as complete, with the appropriate error code */
d164 1
a177 1
        
d200 2
d205 3
d239 12
a250 6
       
	/* 
	 * dwc_otg_hcd_urb_dequeue causes big problems if passed a urb that has already
	 * been dequeued. ex->active introduced to solve this.
	 */
	if (ex->active != 0) dwc_otg_hcd_urb_dequeue(sc->dwc_dev.hcd,ex->urb);
@


1.5
log
@Fix error handling when transfers fail to start
Detail:
  c/softc_device - Fix softc_device_start() to call usb_transfer_complete() with the appropriate status code if a transfer fails to start - returning the status to the caller isn't enough. Also tweak debug output and add extra safety checks to timeout cancellation.
Admin:
  Tested on Raspberry Pi


Version 0.19. Tagged as 'DWCDriver-0_19'
@
text
@d76 8
d100 2
a101 1
	DPRINTFN(10,("softc_device_start: xfer=%p pipe=%p urb=%p\n",xfer,xfer->pipe,epipe->urb));
d103 6
a108 1
	dwc_assert(!epipe->xfer,"Pipe should be idle here");
d110 1
d114 10
a123 4
	epipe->urb->actual_length = 0;
	epipe->urb->error_count = 0;
	epipe->urb->status = 0;
	memset(epipe->urb->iso_descs,0,sizeof(struct dwc_otg_hcd_iso_packet_desc)*epipe->urb->packet_count);
d125 1
a125 2
	if((ed->bmAttributes & UE_XFERTYPE) == UE_CONTROL)
	{
d127 5
a131 1
		dwc_otg_hcd_urb_set_pipeinfo(epipe->urb,dev->address,UE_GET_ADDR(ed->bEndpointAddress),UE_GET_XFERTYPE(ed->bmAttributes),ex->xfer.request.bmRequestType & UT_READ,UE_GET_SIZE(UGETW(ed->wMaxPacketSize)));
d135 11
a145 1
		DPRINTF(("type %02x req %02x val %04x idx %04x len %04x\n",ex->xfer.request.bmRequestType,ex->xfer.request.bRequest,UGETW(ex->xfer.request.wValue),UGETW(ex->xfer.request.wIndex),UGETW(ex->xfer.request.wLength)));
d148 1
d150 1
d158 1
a158 1
	DPRINTF(("xfer len %08x buf %08x -> %08x\n",ex->xfer.length,buf,dma_addr));
d162 1
a162 1
	dwc_otg_hcd_urb_set_params(epipe->urb,ex,buf,dma_addr,ex->xfer.length,epipe->request,epipe->dma_req,flags,ed->bInterval);
d164 6
a169 4
	/* DWCTODO - Set isoc desc params */

	/* Queue and start the urb */
	epipe->xfer = ex;
d181 1
a181 1
	int ret = dwc_otg_hcd_urb_enqueue(sc->dwc_dev.hcd,epipe->urb,&epipe->dwc_priv,0);
d183 1
a183 2
	if(ret)
	{
d187 1
a187 1
			/* Just in case... */
d194 2
a195 2
	if(!ret)
	{
d198 3
d202 1
a202 1
	epipe->xfer = NULL;
a203 1
	/* If we've failed to start we must mark the request as complete, with the appropriate error code */
d217 1
a239 2
	dwc_assert(!epipe->xfer,"Pipe should be idle here");

a242 3
	/* Free urb */
	dwc_free(NULL,epipe->urb);

d274 6
a279 12

	if(epipe->xfer == ex)
	{
		DPRINTFN(10,("dequeing urb\n"));
		/* Cancel the urb */
		dwc_otg_hcd_urb_dequeue(sc->dwc_dev.hcd,epipe->urb);

		/* Mark pipe as idle */
		epipe->xfer = NULL;

		DPRINTFN(10,("urb dequeued\n"));
	}
@


1.4
log
@Update to latest code from Raspberry Pi github
Detail:
  Makefile, dwc/* - Updated to latest code from Raspberry Pi github (rev e0001dd59d). Includes the fabled 'FIQ fix' code, although the code isn't yet enabled in the RISC OS version of the driver.
  c/cmodule - Add extra flags for controlling driver behaviour, as required by the new core code
  c/dwc_otg_riscos - Add some missing driver parameters (although we leave them at default). Handle DWC_E_SHUTDOWN xfer errors, which will now be produced when the driver is shutting down
  c/softc_device - Disable interrupts around dwc_otg_hcd_urb_enqueue, to mirror behaviour of Linux code (previously, it was the responsibility of the DWC code to disable interrupts for the appropriate part of the operation)
  s/regaccess - Add some extra IRQ/memory barrier functions required by the new code (mainly the FIQ fix). Make DWC_MODIFY_REG32 operate atomicly (mirrors change in Linux version)
Admin:
  Tested on Raspberry Pi


Version 0.11. Tagged as 'DWCDriver-0_11'
@
text
@d122 1
a122 1
	DPRINTF(("xfer len %08x\n",ex->xfer.length));
d150 2
d157 4
d162 4
a167 2
	case 0:
		return USBD_IN_PROGRESS;
d169 2
a170 2
		epipe->xfer = NULL;
		return USBD_BAD_ADDRESS; /*?*/
d172 2
a173 2
		epipe->xfer = NULL;
		return USBD_NOMEM;
d175 2
a176 2
		epipe->xfer = NULL;
		return USBD_IOERROR;
d178 4
@


1.3
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@d135 3
d153 2
@


1.2
log
@Update to latest code from Raspberry Pi github. Improve debugging. Fix race condition that could lead to timeout callbacks inappropriately firing.
Detail:
  Makefile, dwc/* - Updated to latest code from Raspberry Pi github. Tweaks specific to Broadcom hardware have been placed in BCM2835 #ifdef's to allow them to easily be identified/controlled if we need the driver to support different SoCs in future
  c/cmodule, c/dwc_common_riscos, c/port, c/softc_device, h/cmodule - Improved debugging code
  c/softc_device - Schedule timeout before starting transfer instead of after. Fixes issue where a transfer that completes inbetween dwc_otg_hcd_urb_enqueue() and callout_reset() would result in the timeout being enabled even though the transfer is already complete
  s/triggercbs - Synced with latest USBDriver version for consistency
Admin:
  Tested on Raspberry Pi with high processor vectors
  Fixes some, if not all, stability issues


Version 0.04. Tagged as 'DWCDriver-0_04'
@
text
@d140 1
a140 1
	int ret = dwc_otg_hcd_urb_enqueue(sc->hcd,epipe->urb,&epipe->dwc_priv);
d186 1
a186 1
	dwc_otg_hcd_endpoint_disable(sc->hcd,epipe->dwc_priv,250);
d189 1
a189 1
	dwc_free(epipe->urb);
d193 1
a193 1
		dwc_dma_free(sizeof(usb_device_request_t),epipe->request,epipe->dma_req);
d227 1
a227 1
		dwc_otg_hcd_urb_dequeue(sc->hcd,epipe->urb);
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@d62 1
d67 7
d85 1
d133 7
d145 3
a149 5
	/* Handle timeout */
	if(!ret && ex->xfer.timeout && !sc->sc_bus.use_polling) {
		DPRINTFN(10,("-> set timeout %d on %x\n",ex->xfer.timeout,ex));
		callout_reset(&(ex->xfer.timeout_handle), (MS_TO_TICKS(ex->xfer.timeout)), (softc_device_timeout), (ex));
	}
d169 2
d177 2
d198 2
d206 2
d216 2
@

