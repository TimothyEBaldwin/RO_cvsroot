head	1.9;
access;
symbols
	DWCDriver-0_35:1.9
	DWCDriver-0_34:1.9
	DWCDriver-0_33:1.9
	DWCDriver-0_32:1.9
	DWCDriver-0_31:1.9
	DWCDriver-0_30:1.9
	DWCDriver-0_29:1.9
	DWCDriver-0_28:1.9
	DWCDriver-0_27:1.9
	DWCDriver-0_26:1.9
	DWCDriver-0_24-1:1.9
	DWCDriver-0_25:1.9
	DWCDriver-0_24:1.9
	DWCDriver-0_23:1.9
	DWCDriver-0_22:1.9
	DWCDriver-0_21:1.9
	DWCDriver-0_20:1.9
	DWCDriver-0_19:1.9
	DWCDriver-0_18:1.9
	DWCDriver-0_17:1.9
	DWCDriver-0_16:1.9
	DWCDriver-0_15:1.9
	DWCDriver-0_14:1.8
	DWCDriver-0_13:1.8
	DWCDriver-0_12:1.7
	DWCDriver-0_11:1.7
	DWCDriver-0_10:1.7
	DWCDriver-0_09:1.7
	DWCDriver-0_08:1.6
	DWCDriver-0_07:1.5
	DWCDriver-0_06:1.4
	DWCDriver-0_05:1.4
	DWCDriver-0_04:1.3
	DWCDriver-0_03:1.2
	DWCDriver-0_02:1.1
	DWCDriver-0_01:1.1;
locks; strict;
comment	@# @;


1.9
date	2014.06.19.21.31.02;	author jlee;	state Exp;
branches;
next	1.8;
commitid	Q5Tr8KszgORb8bFx;

1.8
date	2014.05.06.20.32.38;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	8io8KmS4EHAQdwzx;

1.7
date	2012.09.17.16.32.53;	author jlee;	state Exp;
branches;
next	1.6;
commitid	DXVFy2WJjyak3Ukw;

1.6
date	2012.08.04.14.31.23;	author jlee;	state Exp;
branches;
next	1.5;
commitid	znlbEiHiIsNmNefw;

1.5
date	2012.08.02.00.49.33;	author jlee;	state Exp;
branches;
next	1.4;
commitid	JikpcJFANfgqjUew;

1.4
date	2012.07.21.19.22.48;	author jlee;	state Exp;
branches;
next	1.3;
commitid	5Kpl2qWWr4efRsdw;

1.3
date	2012.06.24.21.41.47;	author jlee;	state Exp;
branches;
next	1.2;
commitid	7BXP9gA386QIu0aw;

1.2
date	2012.06.15.00.09.09;	author jlee;	state Exp;
branches;
next	1.1;
commitid	5whdJrlaDMQcDJ8w;

1.1
date	2012.06.03.15.12.52;	author jlee;	state Exp;
branches;
next	;
commitid	ZZ9X1FvMWAU11h7w;


desc
@@


1.9
log
@Enable part one of the FIQ fix
Detail:
  This change enables the basic 'FIQ fix', where SOF interrupts are handled by a FIQ handler and all other interrupts are delegated to IRQ.
  During testing it was observed that when the FIQ fix was enabled, what appears to be the host-side VCHIQ process would randomly die. It could take anywhere from several seconds (including during ROM init) or several hours for this to happen.
  After much investigation it looks like the cause was the use of the MPHI peripheral as a mechanism to trigger an IRQ from the FIQ handler. Changing the code in dwc_otg_hcd_handle_intr() so that it 'flushes' MPHI more often (after every interrupt instead of after every 60) seemed to reduce the problem, while changing the IRQ generation mechanism to use a different IRQ source (e.g. timer) made the crash go away entirely
  In the end I've settled on the compromise of using the MPHI peripheral, but in a way in which we only need to poke it once on startup, instead of once for every desired IRQ. Once we have it generating an IRQ we then rely on masking/unmasking the IRQ in the interrupt controller to get the desired effect of downgrading FIQs to IRQs. See the RISCOS_FIQ_DOWNGRADE #define.
  Changed files:
  - c/cmodule - Use symbolic constant for the USB controller ID instead of a magic number. Get the MPHI details from HAL_USBControllerInfo. Pay attention to Service_ClaimFIQ/Service_ReleaseFIQ and enable/disable the FIQ fix as appropriate.
  - c/dwc_common_riscos - Disable some debug functions which were accidentally left in non-debug builds. Change work queue/tasklet thread initialisation to fix a deadlock issue seen on reboot.
  - c/dwc_otg_riscos - Set up the MPHI and enable/disable the FIQ handler as required
  - cmhg/modhead - Pay attention to Service_ClaimFIQ/Service_ReleaseFIQ
  - dwc/driver/c/dwc_otg_hcd_intr, dwc/driver/h/dwc_otg_mphi_fix - RISCOS_FIQ_DOWNGRADE code
  - dwc/dwc_common_port/h/dwc_os - Make sure __DWC_WARN, __DWC_ERROR, DWC_EXCEPTION are compiled out in non-debug builds
  - h/dwc_otg_riscos - declare extra functions/variables related to FIQ fix
  - s/regaccess - Routine to install the FIQ handler on the FIQ vector, and simple HAL call wrapper
Admin:
  Tested on Raspberry Pi
  Requires Kernel-5_35-4_79_2_227, BCM2835-0_34


Version 0.15. Tagged as 'DWCDriver-0_15'
@
text
@/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdarg.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "Global/HALEntries.h"
#include "AsmUtils/irqs.h"
#include "Interface/RTSupport.h"
#include "callx/callx.h"

#include <sys/callout.h>
#include <sys/queue.h>

#include <machine/bus.h>
#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>

#include "cmodule.h"
#include "dwc_os.h"
#include "dwc_common_riscos.h"
#include "dwc_otg_riscos.h"

extern uint32_t g_dbg_lvl;
uint32_t g_dbg_lvl = 0;

static const int dummy_pollword_1 = 1;
static const int dummy_pollword_0 = 0;

typedef struct {
	uint32_t flags;
	uint32_t *pollword;
	uint32_t timeout;
} RT_routine_result_t;

dwc_bool_t DWC_IN_IRQ(void)
{
	return ((_swi(RT_ReadInfo,_IN(0)|_RETURN(0),RTReadInfo_Handle) == -1)?YES:NO);
}

dwc_bool_t DWC_IN_BH(void)
{
	return NO;
}

/* Diagnostic messages */

#ifdef DEBUG
void __DWC_WARN(char *format,...)
{
	va_list a;
	va_start(a,format);
	dvprintf(("",format,a));
	va_end(a);
}

void __DWC_ERROR(char *format,...)
{
	va_list a;
	va_start(a,format);
	dvprintf(("",format,a));
	va_end(a);
}

void DWC_EXCEPTION(char *format,...)
{
	ensure_irqs_off();
	va_list a;
	va_start(a,format);
	dvprintf(("",format,a));
	va_end(a);
	_swix(0x531C1,0); /* DADebug_Print */
	/* Halt */
	while(1) {};
}

void __DWC_DEBUG(char *format,...)
{
	va_list a;
	va_start(a,format);
	dvprintf(("",format,a));
	va_end(a);
}
#endif

/* Memory management */

void *__DWC_DMA_ALLOC(void *dma_ctx, uint32_t size, dwc_dma_t *dma_addr)
{
	(void) dma_ctx;
	void *mem;
	_kernel_oserror *e = _swix(PCI_RAMAlloc,_INR(0,2)|_OUTR(0,1),size,0,0,&mem,dma_addr);
	if(e)
		return NULL;
	if(mem)
	{
		memset(mem,0,size);
		/* Convert ARM phys addr to DMA addr */
		*dma_addr += dma_offset;
	}
	return mem;
}

void *__DWC_DMA_ALLOC_ATOMIC(void *dma_ctx, uint32_t size, dwc_dma_t *dma_addr)
{
	/* TODO - probably want to be clever about this */
	return __DWC_DMA_ALLOC(dma_ctx,size,dma_addr);
}

void __DWC_DMA_FREE(void *dma_ctx, uint32_t size, void *virt_addr, dwc_dma_t dma_addr)
{
	(void) dma_ctx;
	(void) size;
	(void) dma_addr;
	_swix(PCI_RAMFree,_IN(0),virt_addr);
}

/* The DWC driver can make memory allocations on quite a regular basis, and
   doesn't always seem to cope very well if the allocations fail.
   To reduce the load on the heap manager we'll use a simple bucket and chain
   system to collect together all the 'free' memory blocks, so that they can
   be quickly and easily reused for future transfers. This somewhat mimics
   the way the BSD code recycles their xfer structs */

#define MAX_BUCKET_SIZE 1024 /* Maximum block size that will be placed into a bucket */
#define BUCKET_GRANULARITY 32 /* Size that OS_Module rounds RMA allocations to */
struct mem_chain {
	union {
		struct mem_chain *next; /* Free blocks point at the next block in the chain */
		struct mem_chain **bucket; /* Allocated blocks point at the bucket they belong in */
		uint32_t flags; /* Allocated blocks also have two flag bits in their bottom word */
	} u;
};

#define BUCKET_FLAG_PENDING_CB 1 /* an endpoint_disable_cb is pending for this alloc. This flags avoids us having multiple pending disable callbacks for the same endpoint, and allows us to cancel our callback if DWC decides to free the endpoint before we do */

static struct mem_chain *mem_buckets[MAX_BUCKET_SIZE/BUCKET_GRANULARITY];

void *__DWC_ALLOC(void *mem_ctx, uint32_t size)
{
	(void) mem_ctx;
	/* Round allocation size to bucket size
	   We need 8 bytes of overhead: 4 for the 'bucket' ptr in allocated blocks, and 4 bytes for the size field the heap manager's size field
	   If we were feeling naughty we could peek at the heap manager's size field to work out which bucket an allocated block belongs in, but for now let's do it by the book */
	size += (BUCKET_GRANULARITY-1)+8;
	size &= ~(BUCKET_GRANULARITY-1);

	struct mem_chain **bucket = NULL;
	struct mem_chain *block;

	if(size < MAX_BUCKET_SIZE)
		bucket = &mem_buckets[size/BUCKET_GRANULARITY];

	int irqs = ensure_irqs_off();
	if(!bucket || !*bucket)
	{
		restore_irqs(irqs);
		block = malloc(size-4); /* Subtract 4 bytes for heap block header */
		if(!block)
		{
			dwc_debug("Failed to allocate %d bytes",size-4);
			return NULL;
		}
	}
	else
	{
		block = *bucket;
		*bucket = block->u.next;
		restore_irqs(irqs);
	}
	block->u.bucket = bucket;
	memset(block+1,0,size-8); /* Subtract 8 bytes for heap block header and our header */
	DPRINTFN(20,("dwc_alloc -> %08x\n",block+1));
	return block+1;
}

void *__DWC_ALLOC_ATOMIC(void *mem_ctx, uint32_t size)
{
	/* Heap manager is atomic */
	return __DWC_ALLOC(mem_ctx,size);
}

void __DWC_FREE(void *mem_ctx, void *addr)
{
	(void) mem_ctx;
	if(!addr)
		return;
	DPRINTFN(20,("dwc_free -> %08x\n",addr));
	struct mem_chain *block = ((struct mem_chain *) addr)-1;
	uint32_t flags = block->u.flags & 0x3;
	block->u.flags &= ~flags;
	if(flags & BUCKET_FLAG_PENDING_CB)
	{
		DPRINTFN(15,("cancelling endpoint_disable_cb\n"));
		callx_remove_callback(endpoint_disable_cb,addr);
	}
	struct mem_chain **bucket = block->u.bucket;
	if(!bucket)
	{
		free(block);
		return;
	}
	/* Add this block back onto the chain */
	int irqs = ensure_irqs_off();
	block->u.next = *bucket;
	*bucket = block;
	restore_irqs(irqs);
}

char *DWC_STRDUP(char const *str)
{
	char *c = DWC_ALLOC(strlen(str)+1);
	if(c)
		strcpy(c,str);
	return c;
}

void register_endpoint_disable_cb(void *addr)
{
	if(!addr)
		return;
	struct mem_chain *block = ((struct mem_chain *) addr)-1;
	DPRINTFN(15,("register_endpoint_disable_cb: %08x %d\n",addr,block->u.flags & BUCKET_FLAG_PENDING_CB));
	if(block->u.flags & BUCKET_FLAG_PENDING_CB)
		return;
	block->u.flags |= BUCKET_FLAG_PENDING_CB;
	callx_add_callback(endpoint_disable_cb,addr);
}

/* Wait queues */

struct dwc_waitq_entry
{
	uint32_t pollword;
	LIST_ENTRY(dwc_waitq_entry) list;
};

struct dwc_waitq
{
	LIST_HEAD(,dwc_waitq_entry) list;
};

dwc_waitq_t *DWC_WAITQ_ALLOC(void)
{
	dwc_waitq_t *q = DWC_ALLOC(sizeof(dwc_waitq_t));
	LIST_INIT(&q->list);
	return q;
}

void DWC_WAITQ_FREE(dwc_waitq_t *wq)
{
	DWC_FREE(wq);
}

static int32_t check_wait_result(_kernel_oserror *e,struct dwc_waitq_entry *entry,int irq)
{
	uint32_t result = entry->pollword;
	if(e)
	{
		LIST_REMOVE(entry,list);
		result = 3;
	}
	restore_irqs(irq);
	DWC_FREE(entry);
	switch(result)
	{
	case 0:
		return -DWC_E_TIMEOUT;
	case 1:
		return 0;
	case 2:
		return -DWC_E_ABORT;
	case 3:
	default:
		return -DWC_E_UNKNOWN;
	}
}

int32_t DWC_WAITQ_WAIT(dwc_waitq_t *wq, dwc_waitq_condition_t condition, void *data)
{
	if(condition(data))
		return 1;
	/* Add ourselves to the queue */
	/* Must alloc entry from heap, since we might be using the shared SVC stack */
	struct dwc_waitq_entry *entry = DWC_ALLOC(sizeof(struct dwc_waitq_entry));
	if(!entry)
		return -DWC_E_UNKNOWN;
	entry->pollword = 0;
	/* Atomic insert and yield */
	int irq = ensure_irqs_off();
	LIST_INSERT_HEAD(&wq->list,entry,list);
	_kernel_oserror *e = _swix(RT_Yield,_IN(1),&entry->pollword);
	return check_wait_result(e,entry,irq);
}

int32_t DWC_WAITQ_WAIT_TIMEOUT(dwc_waitq_t *wq, dwc_waitq_condition_t condition, void *data, int32_t msecs)
{
	if(condition(data))
		return 1;
	/* Add ourselves to the queue */
	/* Must alloc entry from heap, since we might be using the shared SVC stack */
	struct dwc_waitq_entry *entry = DWC_ALLOC(sizeof(struct dwc_waitq_entry));
	if(!entry)
		return -DWC_E_UNKNOWN;
	entry->pollword = 0;
	int32_t csecs = (msecs+9)/10;
	/* Atomic insert and yield */
	int irq = ensure_irqs_off();
	LIST_INSERT_HEAD(&wq->list,entry,list);
	_kernel_oserror *e = _swix(RT_TimedYield,_INR(1,2),&entry->pollword,csecs+_swi(OS_ReadMonotonicTime,_RETURN(0)));
	return check_wait_result(e,entry,irq);
}

static void wait_trigger(dwc_waitq_t *wq,int status)
{
	int irq = ensure_irqs_off();
	struct dwc_waitq_entry *entry = LIST_FIRST(&wq->list);
	int yield = (int) entry;
	while(entry)
	{
		entry->pollword = status;
		LIST_REMOVE(entry,list);
		entry = LIST_FIRST(&wq->list);
	}
	restore_irqs(irq);
	/* Only yield if there was something to wake up */
	if(yield)
		_swix(RT_Yield,_IN(1),&dummy_pollword_1);
}

void DWC_WAITQ_TRIGGER(dwc_waitq_t *wq)
{
	wait_trigger(wq,1);
}

void DWC_WAITQ_ABORT(dwc_waitq_t *wq)
{
	wait_trigger(wq,2);
}

/* Threads */

#define THREAD_STACK_SIZE 16384

struct dwc_thread
{
	LIST_ENTRY(dwc_thread) list;

	uint32_t rt_handle;
	dwc_bool_t stop;
	int retval;
	uint32_t stopped;
	_kernel_stack_chunk *stack;

	dwc_thread_function_t thread_function;
	char *name;
	void *data;
};

static LIST_HEAD(thread_list, dwc_thread) thread_list = LIST_HEAD_INITIALIZER(thread_list);

static void thread_wrapper(dwc_thread_t *t)
{
	/* Initialise t->rt_handle */
	_swix(RT_ReadInfo,_IN(0)|_OUT(0),RTReadInfo_Handle,&t->rt_handle);
	if(!t->stop)
		t->retval = t->thread_function(t->data);
	ensure_irqs_off();
	t->stopped = 1;
	_swix(RT_Deregister,_INR(0,1),0,t->rt_handle);
}

dwc_thread_t *DWC_THREAD_RUN(dwc_thread_function_t thread_function, char *name, void *data)
{
	dwc_thread_t *t = DWC_ALLOC(sizeof(dwc_thread_t));
	if(!t)
		return NULL;
	_kernel_stack_chunk *stack = DWC_ALLOC(THREAD_STACK_SIZE);
	if(!stack)
	{
		DWC_FREE(t);
		return NULL;
	}
	t->stop = NO;
	t->retval = -DWC_E_ABORT;
	t->stack = stack;
	stack->sc_mark = 0xF60690FF;
	stack->sc_size = THREAD_STACK_SIZE;
	memcpy(stack+1, _kernel_current_stack_chunk()+1, 28);

	t->thread_function = thread_function;
	t->name = DWC_STRDUP(name);
	t->data = data;

	int irq = ensure_irqs_off();
	LIST_INSERT_HEAD(&thread_list,t,list);
	_kernel_oserror *e = _swix(RT_Register,_INR(0,7)|_OUT(0),0,thread_wrapper,t,private_word,&dummy_pollword_1, ((int) stack) + 560, ((int) stack) + THREAD_STACK_SIZE, "DWCDriver:144",&t->rt_handle);
	if(e)
	{
		LIST_REMOVE(t,list);
		restore_irqs(irq);
		DWC_FREE(t->name);
		DWC_FREE(t);
		DWC_FREE(stack);
		return NULL;
	}
	restore_irqs(irq);
	return t;
}

int DWC_THREAD_STOP(dwc_thread_t *thread)
{
	if(!thread)
		return -DWC_E_ABORT;
	/* DWCTODO - Assuming that DWC_THREAD_STOP will only be called once for each thread
	   Could handle multiple stop calls by using a counter within the thread? Then whoever is last is the one to free the memory */
	thread->stop = YES;
	_swix(RT_Yield,_IN(1),&thread->stopped);
	int ret = thread->retval;
	int irq = ensure_irqs_off();
	LIST_REMOVE(thread,list);
	restore_irqs(irq);
	DWC_FREE(thread->name);
	DWC_FREE(thread->stack);
	DWC_FREE(thread);
	return ret;
}

dwc_bool_t DWC_THREAD_SHOULD_STOP(dwc_thread_t *thread)
{
	return thread->stop;
}

/* Work queues */

struct dwc_workq_entry
{
	union {
		STAILQ_ENTRY(dwc_workq_entry) list;
		dwc_workq_t *queue;
	} u;

	dwc_work_callback_t work_cb;
	void *data;
	char *name;
};

struct dwc_workq
{
	uint32_t stop; /* 1 if we want the queue to stop */
	uint32_t stopped; /* 1 if queue has stopped */
	uint32_t pollword; /* 1 if we want the queue to wake */
	uint32_t pending; /* total count of pending work (including delayed ones) */
	uint32_t idle; /* 1 if (pending == 0) */
	_kernel_stack_chunk *stack;

	STAILQ_HEAD(, dwc_workq_entry) list;
	char *name;
};

static __value_in_regs RT_routine_result_t workq_wrapper(dwc_workq_t *q)
{
	ensure_irqs_off();
	struct dwc_workq_entry *e = STAILQ_FIRST(&q->list);
	while(e)
	{
		STAILQ_REMOVE_HEAD(&q->list,u.list);
		ensure_irqs_on();
		e->work_cb(e->data);
		DWC_FREE(e->name);
		DWC_FREE(e);
		ensure_irqs_off();
		e = STAILQ_FIRST(&q->list);
		q->pending--;
	}
	if(q->stop && !q->pending)
	{
		uint32_t rt_handle;
		_swix(RT_ReadInfo,_IN(0)|_OUT(0),RTReadInfo_Handle,&rt_handle);
		q->stopped = 1;
		_swix(RT_Deregister,_INR(0,1),0,rt_handle);
	}
	q->pollword = 0;
	q->idle = !q->pending;
	return (RT_routine_result_t) { 0, 0, 0 };
}

dwc_workq_t *DWC_WORKQ_ALLOC(char *name)
{
	dwc_workq_t *q = DWC_ALLOC(sizeof(dwc_workq_t));
	if(!q)
		return NULL;
	_kernel_stack_chunk *stack = DWC_ALLOC(THREAD_STACK_SIZE);
	if(!stack)
	{
		DWC_FREE(q);
		return NULL;
	}
	q->idle = 0;
	q->pollword = 1; /* Give it a kick on startup so that it can disable interrupts. If interrupts are left enabled it can cause problems when we try and shut down during Service_PreReset */
	q->name = (name?DWC_STRDUP(name):0);
	q->stack = stack;
	stack->sc_mark = 0xF60690FF;
	stack->sc_size = THREAD_STACK_SIZE;
	memcpy(stack+1, _kernel_current_stack_chunk()+1, 28);
	STAILQ_INIT(&q->list);

	_kernel_oserror *e = _swix(RT_Register,_INR(0,7),0,workq_wrapper,q,private_word,&q->pollword, ((int) stack) + 560, ((int) stack) + THREAD_STACK_SIZE, "DWCDriver:144");
	if(e)
	{
		DWC_FREE(q->name);
		DWC_FREE(q);
		DWC_FREE(stack);
		return NULL;
	}
	_swix(RT_Yield,_IN(1),&q->idle);
	return q;
}

void DWC_WORKQ_FREE(dwc_workq_t *workq)
{
	/* DWCTODO - Assuming that DWC_WORKQ_FREE will only be called once for each queue */
	workq->stop = 1;
	workq->pollword = 1;
	_swix(RT_Yield,_IN(1),&workq->stopped);
	DWC_FREE(workq->name);
	DWC_FREE(workq->stack);
	DWC_FREE(workq);
}

void DWC_WORKQ_SCHEDULE(dwc_workq_t *workq, dwc_work_callback_t work_cb, void *data, char *format, ...)
{
	va_list a;
	va_start(a,format);
	char buf[128];
	if(format)
		vsnprintf(buf,sizeof(buf),format,a);
	else
		buf[0] = 0;
	va_end(a);
	struct dwc_workq_entry *e = DWC_ALLOC(sizeof(struct dwc_workq_entry)+strlen(buf)+1);
	if(!e)
		return;
	e->name = (char *) (e+1);
	strcpy(e->name,buf);
	e->data = data;
	e->work_cb = work_cb;
	int irq = ensure_irqs_off();
	STAILQ_INSERT_TAIL(&workq->list,e,u.list);
	workq->pollword = 1;
	workq->pending++;
	workq->idle = 0;
	restore_irqs(irq);
	/* Assume the fact that it's being inserted into a work queue means that we don't want to perform the work immediately */
	/* i.e. don't yield */
}

static _kernel_oserror *delayed_workq_wrapper(_kernel_swi_regs *r,void *pw,void *handle)
{
	(void) r;
	(void) pw;
	struct dwc_workq_entry *e = (struct dwc_workq_entry *) handle;
	dwc_workq_t *q = e->u.queue;
	STAILQ_INSERT_TAIL(&q->list,e,u.list);
	q->pollword = 1;
	return NULL;
}

void DWC_WORKQ_SCHEDULE_DELAYED(dwc_workq_t *workq, dwc_work_callback_t work_cb, void *data, uint32_t time, char *format, ...)
{
	va_list a;
	va_start(a,format);
	char buf[128];
	if(format)
		vsnprintf(buf,sizeof(buf),format,a);
	else
		buf[0] = 0;
	va_end(a);
	struct dwc_workq_entry *e = DWC_ALLOC(sizeof(struct dwc_workq_entry)+strlen(buf)+1);
	if(!e)
		return;
	e->name = (char *) (e+1);
	strcpy(e->name,buf);
	e->data = data;
	e->work_cb = work_cb;
	e->u.queue = workq;
	int irq = ensure_irqs_off();
	workq->pending++;
	workq->idle = 0;
	restore_irqs(irq);
	/* Register a ticker event that will schedule this task for us */
	callx_add_callafter((time+9)/10,delayed_workq_wrapper,e);
}

int DWC_WORKQ_PENDING(dwc_workq_t *workq)
{
	return workq->pending;
}

int DWC_WORKQ_WAIT_WORK_DONE(dwc_workq_t *workq,int timeout)
{
	if(workq->idle)
		return 0;
	timeout = ((timeout+9)/10)+1+_swi(OS_ReadMonotonicTime,_RETURN(0));
	_swix(RT_TimedYield,_INR(1,2),&workq->idle,timeout);
	return (workq->idle?0:-1);
}

/* Tasklets */

/* Tasklets are implemented using a simplified workq that runs at a higher priority level */

struct dwc_tasklet
{
	LIST_ENTRY(dwc_tasklet) list;

	dwc_tasklet_callback_t cb;
	void *data;
	uint32_t count;
};

struct tasklet_state
{
	uint32_t stop;
	uint32_t stopped;
	uint32_t pollword;
	uint32_t idle;

	LIST_HEAD(, dwc_tasklet) list;
};

static struct tasklet_state tasklets;
static char tasklet_stack[THREAD_STACK_SIZE];

static __value_in_regs RT_routine_result_t tasklet_wrapper(struct tasklet_state *s)
{
	struct dwc_tasklet *t = LIST_FIRST(&s->list);
	while(t)
	{
		while(t->count)
		{
			ensure_irqs_on();
			t->cb(t->data);
			ensure_irqs_off();
			t->count--;
		}
		LIST_REMOVE(t,list);
		t = LIST_FIRST(&s->list);
	}
	if(s->stop)
	{
		uint32_t rt_handle;
		_swix(RT_ReadInfo,_IN(0)|_OUT(0),RTReadInfo_Handle,&rt_handle);
		s->stopped = 1;
		_swix(RT_Deregister,_INR(0,1),0,rt_handle);
	}
	s->idle = 1;
	s->pollword = 0;
	return (RT_routine_result_t) { 0, 0, 0 };
}

dwc_tasklet_t *DWC_TASK_ALLOC(char *name, dwc_tasklet_callback_t cb, void *data)
{
	(void) name;
	dwc_tasklet_t *t = DWC_ALLOC(sizeof(dwc_tasklet_t));
	if(!t)
		return NULL;
	t->cb = cb;
	t->data = data;
	t->count = 0;
	return t;
}

void DWC_TASK_FREE(dwc_tasklet_t *t)
{
	/* Ensure task isn't running */
	int irq = ensure_irqs_off();
	if(t->count)
	{
		_swix(RT_Yield,_IN(1),&tasklets.idle);
	}
	restore_irqs(irq);
	DWC_FREE(t);
}

void DWC_TASK_SCHEDULE(dwc_tasklet_t *t)
{
	int irq = ensure_irqs_off();
	if(!(t->count++))
	{
		LIST_INSERT_HEAD(&tasklets.list,t,list);
		tasklets.pollword = 1;
		tasklets.idle = 0;
	}
	restore_irqs(irq);
	/* don't bother yielding (we'll likely be in IRQ context) */
}

/* Timers */

/* Judging by the Linux implementation timers don't appear to require a thread context, so we'll implement them as OS_CallAfter's */

struct dwc_timer
{
	dwc_timer_callback_t cb;
	void *data;
	char *name;
	uint32_t scheduled;
};

dwc_timer_t *DWC_TIMER_ALLOC(char *name, dwc_timer_callback_t cb, void *data)
{
	dwc_timer_t *t = DWC_ALLOC(sizeof(dwc_timer_t)+strlen(name)+1);
	if(!t)
		return NULL;
	t->cb = cb;
	t->data = data;
	t->name = (char *) (t+1);
	strcpy(t->name,name);
	return t;
}

static _kernel_oserror *timer_wrapper(_kernel_swi_regs *r,void *pw,void *handle)
{
	(void) r;
	(void) pw;
	dwc_timer_t *t = (dwc_timer_t *) handle;
	t->scheduled = 0;
	t->cb(t->data);
	return NULL;
}

void DWC_TIMER_FREE(dwc_timer_t *timer)
{
	if(timer->scheduled)
		callx_remove_callafter(timer_wrapper,timer);
	DWC_FREE(timer);
}

void DWC_TIMER_SCHEDULE(dwc_timer_t *timer, uint32_t time)
{
	int irqs = ensure_irqs_off();
	if(timer->scheduled)
	{
		callx_remove_callafter(timer_wrapper,timer);
	}
	timer->scheduled = 1;
	callx_add_callafter((time+9)/10,timer_wrapper,timer);
	restore_irqs(irqs);
}

void DWC_TIMER_CANCEL(dwc_timer_t *timer)
{
	int irqs = ensure_irqs_off();
	if(timer->scheduled)
		callx_remove_callafter(timer_wrapper,timer);
	timer->scheduled = 0;
	restore_irqs(irqs);
}

/* Spinlocks */

struct dwc_spinlock
{
	int irq;
};

dwc_spinlock_t *DWC_SPINLOCK_ALLOC(void)
{
	return (dwc_spinlock_t *) DWC_ALLOC(sizeof(struct dwc_spinlock));
}

void DWC_SPINLOCK_FREE(dwc_spinlock_t *lock)
{
	DWC_FREE(lock);
}

void DWC_SPINLOCK_IRQSAVE(dwc_spinlock_t *lock, dwc_irqflags_t *flags)
{
	(void) lock;
	*flags = ensure_irqs_off();
}

void DWC_SPINUNLOCK_IRQRESTORE(dwc_spinlock_t *lock, dwc_irqflags_t flags)
{
	(void) lock;
	restore_irqs((int)flags);
}

void DWC_SPINLOCK(dwc_spinlock_t *lock)
{
	((struct dwc_spinlock *) lock)->irq = ensure_irqs_off();
}

void DWC_SPINUNLOCK(dwc_spinlock_t *lock)
{
	restore_irqs(((struct dwc_spinlock *) lock)->irq);
}

/* non-IRQSAVE/IRQRESTORE versions aren't used */

/* Mutexes */

/* Linux implementation uses mutexes that don't support recursive locks
   We'll use a simple implementation that doesn't attempt to guarantee fariness if multiple threads are waiting on the mutex */

struct dwc_mutex
{
	uint32_t pollword; /* 1 if free, 0 if claimed */
	uint32_t rt_handle; /* Current owner. Not really needed, but might be useful for debugging? */
};

dwc_mutex_t *DWC_MUTEX_ALLOC(void)
{
	dwc_mutex_t *m = DWC_ALLOC(sizeof(dwc_mutex_t));
	if(m)
		m->pollword = 1;
	return m;
}

void DWC_MUTEX_FREE(dwc_mutex_t *mutex)
{
	/* Ensure current holder is done with it
	   Although this won't guarantee that the mutex is free if multiple threads are waiting */
	uint32_t rt_handle = _swi(RT_ReadInfo,_IN(0)|_RETURN(0),RTReadInfo_Handle);
	int irqs = ensure_irqs_off();
	while(!mutex->pollword && (mutex->rt_handle != rt_handle))
	{
		_swix(RT_Yield,_IN(1),&mutex->pollword);
	}
	restore_irqs(irqs);
	DWC_FREE(mutex);
}

void DWC_MUTEX_LOCK(dwc_mutex_t *mutex)
{
	uint32_t rt_handle = _swi(RT_ReadInfo,_IN(0)|_RETURN(0),RTReadInfo_Handle);
	int irqs = ensure_irqs_off();
	while(!mutex->pollword && (mutex->rt_handle != rt_handle))
	{
		_swix(RT_Yield,_IN(1),&mutex->pollword);
	}
	mutex->pollword = 0;
	mutex->rt_handle = rt_handle;
	restore_irqs(irqs);
}

int DWC_MUTEX_TRYLOCK(dwc_mutex_t *mutex)
{
	uint32_t rt_handle = _swi(RT_ReadInfo,_IN(0)|_RETURN(0),RTReadInfo_Handle);
	int irqs = ensure_irqs_off();
	if(!mutex->pollword && (mutex->rt_handle != rt_handle))
	{
		restore_irqs(irqs);
		return 0;
	}
	mutex->pollword = 0;
	mutex->rt_handle = rt_handle;
	restore_irqs(irqs);
	return 1;
}

void DWC_MUTEX_UNLOCK(dwc_mutex_t *mutex)
{
	mutex->pollword = 1;
	/* Wake up any waiting threads */
	_swix(RT_Yield,_IN(1),&dummy_pollword_1);
}

/* Time */

void DWC_UDELAY(uint32_t usecs)
{
	/* DWCTODO - Direct HAL call */
	_swix(OS_Hardware, _IN(0)|_INR(8,9), usecs, 0, EntryNo_HAL_CounterDelay);
}

void DWC_MDELAY(uint32_t msecs)
{
	/* DWCTODO - Direct HAL call */
	_swix(OS_Hardware, _IN(0)|_INR(8,9), msecs*1000, 0, EntryNo_HAL_CounterDelay);
}

void DWC_MSLEEP(uint32_t msecs)
{
	uint32_t csecs = (msecs+9)/10;
	_swix(RT_TimedYield,_INR(1,2),&dummy_pollword_0,csecs+_swi(OS_ReadMonotonicTime,_RETURN(0)));
}

/* Init/shutdown of OS layer */

static dwc_bool_t dwc_common_init = NO;

_kernel_oserror *dwc_common_riscos_init(void)
{
	/* Init tasklet thread */
	LIST_INIT(&tasklets.list);
	tasklets.stop = 0;
	tasklets.stopped = 0;
	tasklets.idle = 0;
	tasklets.pollword = 1; /* Give it a kick on startup so that it can disable interrupts. If interrupts are left enabled it can cause problems when we try and shut down during Service_PreReset */
	_kernel_stack_chunk *stack = (_kernel_stack_chunk *) tasklet_stack;
	stack->sc_mark = 0xF60690FF;
	stack->sc_size = THREAD_STACK_SIZE;
	memcpy(stack+1, _kernel_current_stack_chunk()+1, 28);
	_kernel_oserror *e = _swix(RT_Register,_INR(0,7),0,tasklet_wrapper,&tasklets,private_word,&tasklets.pollword, ((int) stack) + 560, ((int) stack) + THREAD_STACK_SIZE, "DWCDriver_Tasklet:145");
	if(!e)
		_swix(RT_Yield,_IN(1),&tasklets.idle);
	dwc_common_init = (e?NO:YES);
	return e;
}

void dwc_common_riscos_shutdown(void)
{
	if(dwc_common_init == YES)
	{
		/* Shutdown tasklet thread */
		tasklets.stop = 1;
		tasklets.pollword = 1;
		_swix(RT_Yield,_IN(1),&tasklets.stopped);

		/* Free all memory blocks */
		for(int i=0;i<MAX_BUCKET_SIZE/BUCKET_GRANULARITY;i++)
		{
			struct mem_chain *block = mem_buckets[i];
			while(block)
			{
				struct mem_chain *next = block->u.next;
				free(block);
				block = next;
			}
		}
		memset(mem_buckets,0,sizeof(mem_buckets)); /* Just in case */
	}
	dwc_common_init = NO;
}
@


1.8
log
@Missing va_end()'s added

Version 0.13. Tagged as 'DWCDriver-0_13'
@
text
@d74 1
a90 1
#ifdef DEBUG
d525 2
d542 1
d926 2
a927 1
	tasklets.idle = 1;
d933 2
@


1.7
log
@Update to version 3.00 of DWC_otg
Detail:
  This big batch of changes brings us in line with rev 70428950df of the Raspberry Pi Linux github.
  Briefly:
  * Deleted HTML docs as they're a waste of space
  * Dropped the SOF fix (which we never used anyway)
  * Dropped our implementation of the microframe scheduling patch, in favour of their implementation
  * Updated to version 3.00 of the DWC sources. Hard to tell what useful changes this brings, due to API tweaks resulting in pretty much every file being littered with changes.
Admin:
  Tested on Raspberry Pi with high processor vectors
  This new version seems like it might be a bit more sensitive to insufficient power supplies. Beware!


Version 0.09. Tagged as 'DWCDriver-0_09'
@
text
@d79 1
d87 1
d97 1
d108 1
d563 1
d601 1
@


1.6
log
@Fix aborts on reset/*rmkill USBDriver
Detail:
  c/cmodule, cmhg/modhead - Don't shutdown DWC layer during Service_USBDriver_Dying. Instead, only do it during Service_ModulePostFinal/Service_PreReset(/module finialisation). Also during Service_PreReset, deregister with USBDriver. This ensures we're deregistered with USBDriver before we shut down the DWC layer, and so don't have to worry about receiving events from USBDriver after the DWC layer is shut down.
  c/dwc_common_riscos, c/dwc_otg_riscos, h/dwc_common_riscos - Improve handling of DWC endpoint disable callbacks. The memory block for the endpoint now has a flag set in its header when a callback is pending, allowing us to avoid double-free situations if both ourselves and the DWC layer decide to free the endpoint.
  c/softc_root - Correct some debug messages
  dwc/driver/c/dwc_otg_hcd - Fix qh_list_free to use DWC_LIST_FOREACH_SAFE (as dwc_otg_hcd_qh_remove_and_free will remove entries from the list) - fixes potential double-free if a non-empty list is being freed
  dwc/driver/c/dwc_otg_hcd_intr - Fix building of debug builds
Admin:
  Tested in Pi ROM with high processor vectors
  Resets and killing/reiniting USBDriver now works properly


Version 0.08. Tagged as 'DWCDriver-0_08'
@
text
@d37 7
a43 1
#include "sys/queue.h"
d48 1
d67 5
d110 1
a110 1
void *__DWC_DMA_ALLOC(uint32_t size, dwc_dma_t *dma_addr)
d112 1
d126 1
a126 1
void *__DWC_DMA_ALLOC_ATOMIC(uint32_t size, dwc_dma_t *dma_addr)
d129 1
a129 1
	return __DWC_DMA_ALLOC(size,dma_addr);
d132 1
a132 1
void __DWC_DMA_FREE(uint32_t size, void *virt_addr, dwc_dma_t dma_addr)
d134 1
d161 1
a161 1
void *__DWC_ALLOC(uint32_t size)
d163 1
d195 1
a195 1
	dprintf(("","dwc_alloc -> %08x\n",block+1));
d199 1
a199 1
void *__DWC_ALLOC_ATOMIC(uint32_t size)
d202 1
a202 1
	return __DWC_ALLOC(size);
d205 1
a205 1
void __DWC_FREE(void *addr)
d207 1
d210 1
a210 1
	dprintf(("","dwc_free -> %08x\n",addr));
d216 1
a216 1
		dprintf(("","cancelling endpoint_disable_cb\n"));
d245 1
a245 1
	dprintf(("","register_endpoint_disable_cb: %08x %d\n",addr,block->u.flags & BUCKET_FLAG_PENDING_CB));
d451 1
a451 1
dwc_bool_t DWC_THREAD_SHOULD_STOP(void)
d453 1
a453 16
	uint32_t rt_handle;
	_swix(RT_ReadInfo,_IN(0)|_OUT(0),RTReadInfo_Handle,&rt_handle);
	/* Icky linear search */
	dwc_thread_t *t;
	int irq = ensure_irqs_off();
	LIST_FOREACH(t,&thread_list,list)
	{
		if(t->rt_handle == rt_handle)
		{
			restore_irqs(irq);
			return t->stop;
		}
	}
	restore_irqs(irq);
	dwc_assert(0,"Thread not found");
	return YES;
d679 1
a679 1
dwc_tasklet_t *DWC_TASK_ALLOC(dwc_tasklet_callback_t cb, void *data)
d681 1
d780 5
d787 1
a787 1
	return (dwc_spinlock_t *) 1;
d792 5
d798 1
d801 1
a801 1
void DWC_SPINLOCK_IRQSAVE(dwc_spinlock_t *lock, uint64_t *flags)
d804 1
a804 1
	*((int *) flags) = ensure_irqs_off();
d807 1
a807 1
void DWC_SPINUNLOCK_IRQRESTORE(dwc_spinlock_t *lock, uint64_t flags)
d809 6
a814 2
	(void) lock;
	restore_irqs((int) flags);
@


1.5
log
@Fix mutex implementation
Detail:
  c/dwc_common_riscos - Mutex lock/trylock functions had defective logic that would have resulted in them ignoring the lock state of the mutex and claiming it while it was still in use by another thread.
Admin:
  Tested on Raspberry Pi with high processor vectors


Version 0.07. Tagged as 'DWCDriver-0_07'
@
text
@d139 1
d143 2
d180 1
d194 1
d196 7
d224 12
@


1.4
log
@Track latest developments on Raspberry Pi github
Detail:
  Makefile, c/cmodule, h/module, dwc/driver/c/dwc_otg_driver, dwc/driver/c/dwc_otg_hcd, dwc/driver/c/dwc_otg_hcd_ddma, dwc/driver/c/dwc_otg_hcd_intr, dwc/driver/c/dwc_otg_hcd_linex, dwc/driver/h/dwc_otg_hcd, dwc/dwc_common_port/c/dwc_common_linux - Track latest developments on Raspberry Pi github. Includes fixes for buffer overruns when unexpectedly receiving too much data, and changes to allow SOF interrupt spam to be reduced.
  c/dwc_common_riscos - Make sure we always round up delay values when converting from msec to csec. Avoids issues with high frequency timers (e.g. SOF re-enable timer) hogging all the CPU time. May be the cause of some other bad behaviour that I've experienced in the past?
Admin:
  Tested on Raspberry Pi with high processor vectors
  Note - SOF fix is currently disabled, as it was causing too many interrupt packets (e.g. mouse clicks) to be lost. Probable cause is that we're running the SOF re-enable timer at 100Hz instead of 1kHz. May be worth investigating moving all timer/thread scheduling over to a HAL timer which can provide us a 1kHz ticker interrupt.


Version 0.05. Tagged as 'DWCDriver-0_05'
@
text
@d803 1
a803 1
	if(!mutex->pollword && (mutex->rt_handle != rt_handle))
d815 1
a815 1
	if(!mutex->pollword && (mutex->rt_handle == rt_handle))
d828 1
a828 1
	if(!mutex->pollword && (mutex->rt_handle == rt_handle))
@


1.3
log
@Update to latest code from Raspberry Pi github. Improve debugging. Fix race condition that could lead to timeout callbacks inappropriately firing.
Detail:
  Makefile, dwc/* - Updated to latest code from Raspberry Pi github. Tweaks specific to Broadcom hardware have been placed in BCM2835 #ifdef's to allow them to easily be identified/controlled if we need the driver to support different SoCs in future
  c/cmodule, c/dwc_common_riscos, c/port, c/softc_device, h/cmodule - Improved debugging code
  c/softc_device - Schedule timeout before starting transfer instead of after. Fixes issue where a transfer that completes inbetween dwc_otg_hcd_urb_enqueue() and callout_reset() would result in the timeout being enabled even though the transfer is already complete
  s/triggercbs - Synced with latest USBDriver version for consistency
Admin:
  Tested on Raspberry Pi with high processor vectors
  Fixes some, if not all, stability issues


Version 0.04. Tagged as 'DWCDriver-0_04'
@
text
@d288 1
a288 3
	int32_t csecs = msecs/10;
	if(csecs*10 != msecs)
		csecs++;
d584 1
a584 1
	callx_add_callafter(time/10,delayed_workq_wrapper,e);
d596 1
a596 1
	timeout = (timeout/10)+1+_swi(OS_ReadMonotonicTime,_RETURN(0));
d739 1
a739 1
	callx_add_callafter(time/10,timer_wrapper,timer);
d862 1
a862 3
	uint32_t csecs = msecs/10;
	if(csecs*10 != msecs)
		csecs++;
@


1.2
log
@Add memory barriers to register reads/writes. Reduce frequency of memory allocations.
Detail:
  s/regaccess - New file containing assembler register access routines, with memory barriers to protect against the BCM2835 AXI bus returning device loads out-of-order
  Makefile, dwc/dwc_common_port/h/dwc_os - Updated to use register access functions instead of inline code
  c/dwc_common_riscos - Added a simple bucket-and-chain data structure to dwc_alloc/dwc_free, to collect free memory blocks and allow them to be reused later, to reduce the load on the heap manager.
Admin:
  Tested in BCM2835 ROM


Version 0.03. Tagged as 'DWCDriver-0_03'
@
text
@d76 1
d79 1
d83 3
a85 1
	/* DWCTODO - halt */
a87 1
#ifdef DEBUG
d113 6
d164 2
d167 1
d498 1
a498 1
	q->name = DWC_STRDUP(name);
d532 4
a535 1
	vsnprintf(buf,sizeof(buf),format,a);
d569 4
a572 1
	vsnprintf(buf,sizeof(buf),format,a);
@


1.1
log
@Add initial version of DWCDriver - USB driver for Synopsys DWC OTG controllers
Detail:
  A fairly simple wrapper for Synopsys's open source "DWC_otg" Linux driver, based around a GPL-free version of the DWC_otg 2.90a sources received from the Raspberry Pi foundation.
  Instead of interfacing with the Linux USB stack a new host interface layer has been implemented to allow it to talk to the standard BSD-derived RISC OS stack.
  RTSupport is used to provide the threading functionality that the DWC driver relies upon.
  Interesting files:
  - c/cmodule, h/cmodule - Main module frontend
  - c/dwc_common_riscos, h/dwc_common_riscos - Implementation of the OS support layer required by the DWC driver
  - c/dwc_otg_riscos, h/dwc_otg_riscos - Core code for the BSD driver implementation, driver init/shutdown, and for handling calls from the DWC host driver to us
  - c/port - Some support functions required by BSD-style code inherited from the other USB drivers
  - c/softc_device - Code to handle requests from the BSD layer to attached USB devices
  - c/softc_root - Code to handle requests from the BSD layer to the controller root hub
  - dwc/doc/* - Original Synopsys release notes & user guide pdfs
  - dwc/driver/*, dwc/dwc_common_port/* - Synopsys code and documentation. A few tweaks were required to allow it to compile under Norcroft, but otherwise it's functionally equivalent to the original sources.
Admin:
  Tested in BCM2835 ROM
  There are a few loose ends still to tidy up (search for "DWCTODO"), mainly regarding implementation of Isochronous support, but otherwise the driver seems stable enough for daily use.


Version 0.01. Tagged as 'DWCDriver-0_01'
@
text
@d117 18
d137 29
a165 4
	void *p = malloc(size);
	if(p)
		memset(p,0,size);
	return p;
d176 14
a189 1
	free(addr);
d880 13
@

