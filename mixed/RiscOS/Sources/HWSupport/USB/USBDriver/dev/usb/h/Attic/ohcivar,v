head	1.6;
access;
symbols
	USBDriver-1_22:1.5
	USBDriver-1_21:1.5
	USBDriver-1_20:1.5
	USBDriver-1_19:1.5
	NetBSD-1_19:1.5
	NetBSD-1_18:1.5
	NetBSD-1_17:1.5
	NetBSD-1_16:1.5
	NetBSD-1_15:1.5
	NetBSD-1_14:1.5
	NetBSD-1_13:1.5
	NetBSD-1_12:1.5
	NetBSD-1_09-1:1.5
	NetBSD-1_11:1.5
	NetBSD-1_10:1.5
	NetBSD-1_09:1.5
	NetBSD-1_08:1.5
	NetBSD-1_07:1.5
	NetBSD-1_06:1.5
	NetBSD-1_05:1.5
	NetBSD-1_04:1.5
	NetBSD-1_03:1.5
	NetBSD-1_02:1.5
	NetBSD-1_01:1.5
	NetBSD-1_00:1.5
	NetBSD-0_99:1.5
	NetBSD-0_98:1.5
	NetBSD-0_97:1.5
	NetBSD-0_96:1.5
	NetBSD-0_95:1.5
	NetBSD-0_94:1.5
	NetBSD-0_93:1.5
	NetBSD-0_92:1.5
	NetBSD-0_91:1.5
	NetBSD-0_90:1.5
	NetBSD-0_89:1.5
	NetBSD-0_88:1.5
	NetBSD-0_87:1.5
	NetBSD-0_86:1.5
	NetBSD-0_85:1.5
	NetBSD-0_84:1.5
	NetBSD-0_83:1.5
	NetBSD-0_82:1.5
	NetBSD-0_81:1.5
	NetBSD-0_80:1.5
	NetBSD-0_79:1.5
	NetBSD-0_78:1.5
	NetBSD-0_77:1.5
	NetBSD-0_76:1.5
	NetBSD-0_75:1.5
	NetBSD-0_74:1.5
	NetBSD-0_73:1.5
	NetBSD-0_72:1.5
	NetBSD-0_71:1.5
	NetBSD-0_70:1.5
	NetBSD-0_69:1.5
	NetBSD-0_68:1.5
	NetBSD-0_67:1.5
	NetBSD-0_66:1.5
	NetBSD-0_65:1.5
	NetBSD-0_64:1.5
	NetBSD-0_63:1.5
	NetBSD-0_62:1.5
	NetBSD-0_61:1.5
	NetBSD-0_60:1.5
	NetBSD-0_59:1.5
	NetBSD-0_58:1.4
	NetBSD-0_57:1.4
	NetBSD-0_56:1.4
	NetBSD-0_55:1.4
	NetBSD-0_54:1.4
	NetBSD-0_53:1.4
	NetBSD-0_52:1.4
	NetBSD-0_51:1.4
	NetBSD-0_50:1.4
	NetBSD-0_49:1.4
	NetBSD-0_48:1.4
	NetBSD-0_47:1.4
	NetBSD-0_46:1.4
	NetBSD-0_45:1.4
	NetBSD-0_44:1.4
	NetBSD-0_43:1.4
	NetBSD-0_42:1.4
	NetBSD-0_41:1.4
	NetBSD-0_40:1.4
	NetBSD-0_39:1.4
	NetBSD-0_38:1.4
	NetBSD-0_37:1.4
	NetBSD-0_36:1.4
	NetBSD-0_35:1.4
	NetBSD-0_34:1.4
	NetBSD-0_33:1.4
	NetBSD-0_32:1.3
	NetBSD-0_31:1.3
	NetBSD-0_30:1.2
	NetBSD-0_29:1.2
	RO_5_07:1.2
	NetBSD-0_28:1.2
	NetBSD-0_27:1.2
	NetBSD-0_26:1.2
	NetBSD-0_25:1.2
	NetBSD-0_24:1.2
	NetBSD-0_23:1.2
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.2
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.6
date	2017.10.07.09.08.50;	author rool;	state dead;
branches;
next	1.5;
commitid	Qzw5gnXY6CB2g6aA;

1.5
date	2011.05.22.20.22.46;	author jlee;	state Exp;
branches;
next	1.4;
commitid	Ye1jVWDlKivFSIkv;

1.4
date	2005.01.21.22.30.19;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.30.02.34.21;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.21.20.49.20;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.18;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Clear up duplicate/unused OHCI/EHCI source files
Detail:
  Remove the (now) unused sources from when this component produced multiple targets. See Controllers/OHCIDriver & Controllers/EHCIDriver for the live copies.
  Remove unset USBHAL defines.
  Simplify the Makefile and !Mk* scripts.
  No longer export usbroothub_subr.h.
  Add a porting type "device_t" to usb_port.h.
Admin:
  Submission for USB bounty.

Version 1.23. Tagged as 'USBDriver-1_23'
@
text
@/*      $NetBSD: ohcivar.h,v 1.35 2005/01/11 07:45:34 imp Exp $ */
/*	$FreeBSD: src/sys/dev/usb/ohcivar.h,v 1.13 1999/11/17 22:33:41 n_hibma Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

typedef struct ohci_soft_ed {
	ohci_ed_t ed;
	struct ohci_soft_ed *next;
	ohci_physaddr_t physaddr;
} ohci_soft_ed_t;
#define OHCI_SED_SIZE ((sizeof (struct ohci_soft_ed) + OHCI_ED_ALIGN - 1) / OHCI_ED_ALIGN * OHCI_ED_ALIGN)
#define OHCI_SED_CHUNK 128


typedef struct ohci_soft_td {
	ohci_td_t td;
	struct ohci_soft_td *nexttd; /* mirrors nexttd in TD */
	struct ohci_soft_td *dnext; /* next in done list */
	ohci_physaddr_t physaddr;
	LIST_ENTRY(ohci_soft_td) hnext;
	usbd_xfer_handle xfer;
	u_int16_t len;
	u_int16_t flags;
#define OHCI_CALL_DONE	0x0001
#define OHCI_ADD_LEN	0x0002
} ohci_soft_td_t;
#define OHCI_STD_SIZE ((sizeof (struct ohci_soft_td) + OHCI_TD_ALIGN - 1) / OHCI_TD_ALIGN * OHCI_TD_ALIGN)
#define OHCI_STD_CHUNK 128


typedef struct ohci_soft_itd {
	ohci_itd_t itd;
	struct ohci_soft_itd *nextitd; /* mirrors nexttd in ITD */
	struct ohci_soft_itd *dnext; /* next in done list */
	ohci_physaddr_t physaddr;
	LIST_ENTRY(ohci_soft_itd) hnext;
	usbd_xfer_handle xfer;
	u_int16_t flags;
#ifdef DIAGNOSTIC
	char isdone;
#endif
} ohci_soft_itd_t;
#define OHCI_SITD_SIZE ((sizeof (struct ohci_soft_itd) + OHCI_ITD_ALIGN - 1) / OHCI_ITD_ALIGN * OHCI_ITD_ALIGN)
#define OHCI_SITD_CHUNK 64


#define OHCI_NO_EDS (2*OHCI_NO_INTRS-1)

#define OHCI_HASH_SIZE 128

typedef struct ohci_softc {
	struct usbd_bus sc_bus;		/* base device */
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	bus_size_t sc_size;

	usb_dma_t sc_hccadma;
	struct ohci_hcca *sc_hcca;
	ohci_soft_ed_t *sc_eds[OHCI_NO_EDS];
	u_int sc_bws[OHCI_NO_INTRS];

	u_int32_t sc_eintrs;
	ohci_soft_ed_t *sc_isoc_head;
	ohci_soft_ed_t *sc_ctrl_head;
	ohci_soft_ed_t *sc_bulk_head;

	LIST_HEAD(, ohci_soft_td)  sc_hash_tds[OHCI_HASH_SIZE];
	LIST_HEAD(, ohci_soft_itd) sc_hash_itds[OHCI_HASH_SIZE];

	int sc_noport;
	u_int8_t sc_addr;		/* device address */
	u_int8_t sc_conf;		/* device configuration */

#ifdef USB_USE_SOFTINTR
	char sc_softwake;
#endif /* USB_USE_SOFTINTR */

#ifdef __riscos
        ohci_soft_ed_t *sc_reclaimeds;
        ohci_soft_ed_t *sc_pausededs;
#endif
	ohci_soft_ed_t *sc_freeeds;
	ohci_soft_td_t *sc_freetds;
	ohci_soft_itd_t *sc_freeitds;

	SIMPLEQ_HEAD(, usbd_xfer) sc_free_xfers; /* free xfers */

	usbd_xfer_handle sc_intrxfer;

	ohci_soft_itd_t *sc_sidone;
	ohci_soft_td_t  *sc_sdone;

	char sc_vendor[16];
	int sc_id_vendor;

#if defined(__NetBSD__) || defined(__OpenBSD__)
	void *sc_powerhook;		/* cookie from power hook */
	void *sc_shutdownhook;		/* cookie from shutdown hook */
#endif
	u_int32_t sc_control;		/* Preserved during suspend/standby */
	u_int32_t sc_intre;

	u_int sc_overrun_cnt;
	struct timeval sc_overrun_ntc;

	usb_callout_t sc_tmo_rhsc;
#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(__riscos)
	device_ptr_t sc_child;
#endif
	char sc_dying;
#ifdef __NetBSD__
        struct usb_dma_reserve sc_dma_reserve;
#endif

#ifdef __riscos
	int sc_irqdevno; /* IRQ device number */
#endif
} ohci_softc_t;

struct ohci_xfer {
	struct usbd_xfer xfer;
	struct usb_task	abort_task;
};

#ifdef __riscos
#define OXFER(xfer) ((struct ehci_xfer *)(xfer))
#endif

usbd_status	ohci_init(ohci_softc_t *);
int		ohci_intr(void *);
#ifdef __riscos
void		ohci_softintr(void *);
#endif
#if defined(__NetBSD__) || defined(__OpenBSD__)
int		ohci_detach(ohci_softc_t *, int);
int		ohci_activate(device_ptr_t, enum devact);
#endif

#ifdef __riscos
#define MS_TO_TICKS(ms) ((ms) * hz / 1000)
#endif
@


1.5
log
@Add the ability to build the USB drivers as HAL-compatible static libraries
Detail:
  build/Makefile, build/OBJEHCIDriver, build/OBJOHCIDriver, build/OBJUSBDriver - Modified makefiles to build the HAL libs during the export libs phase
  build/!MkHAL,fd7 - Handy script for building the HAL libs
  build/Hdr/usbhal - Header containing definitions for the assembler code. Also gets exported so that HALs know how much workspace to reserve.
  build/c/usbhal - HAL version of usbmodule.c & port.c. Also contains the keyboard scan code, adapted from the code in the Tungsten HAL.
  build/s/porthal - Assembler versions of some port.c routines that were easier to do in assembler than C
  build/s/halheap - OS_Heap code that's been adapted for use in the HAL. Could easily be changed into a standalone library instead of being part of the HAL USB libs. Supports memory-efficient allocation of aligned blocks.
  build/c/ehcihal - HAL version of ehcimodule.c. Currently only supports EHCI controllers exposed via HAL_USBControllerInfo (i.e. no PCI support)
  build/c/ehcimodule, build/c/ohcimodule, build/c/port - Moved riscos_irq_clear into port.c. Removed unused microtime() function.
  build/c/usbmouse - Strip out some debug-related code in non-debug builds
  build/Version - Updated version numbers
  dev/usb/c/ehci, dev/usb/h/ehcivar - Adapted to add support for the HAL build. Apart from the base changes, the code has also been tweaked to significantly reduce the amount of memory used at runtime by the HAL version of the driver.
  dev/usb/c/hid, dev/usb/c/uhub, dev/usb/c/usb, dev/usb/c/usb_quirks, dev/usb/c/usb_subr, dev/usb/c/usbdi, dev/usb/c/usbdi_util, dev/usb/c/usbroothub_subr - Changes to support HAL builds. Mainly disabling bits that won't work in the HAL or disabling bits for RISC OS in general if they weren't being used in the first place.
  dev/usb/c/ohci, dev/usb/h/ohcivar - Basic changes to support HAL builds. However HAL OHCI support is still incomplete.
  dev/usb/h/usb_port - Added support for the HAL build. Also tweaked logprintf definition to get rid of logprintf calls entirely in non-debug builds.
  dev/usb/h/usbdivar - Added support for the HAL build.
  dev/usb/h/usbhal - New header used by the HAL build. Gets included by every C file to ensure the compiler doesn't use sb, and contains structs/macros to allow access to the shared workspace.
Admin:
  HAL & non-HAL builds tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook.
  Non-HAL builds tested with Iyonix ROM softload.
  Needs latest Kernel source for OSEntries.h export.


Version 0.59. Tagged as 'NetBSD-0_59'
@
text
@@


1.4
log
@        Stack brought up to date with NetBSD sources as at 20050121.
        USB2 further debugged.
Detail:
        Check in prior to second beta release. Improvements also to
        softloading of replacement modules.
Admin:
        Checked with JB .. further crosschecking is still needed for rhenium.
        Castle/D Ellis added ip from NetBSD sources


Version 0.33. Tagged as 'NetBSD-0_33'
@
text
@d149 4
@


1.3
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d1 1
a1 1
/*      $NetBSD: ohcivar.h,v 1.33 2004/07/17 20:24:15 mycroft Exp $     */
d142 1
a142 1

d144 1
a144 1

d146 3
d156 1
d158 1
d170 1
d172 1
@


1.2
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d1 1
a1 1
/*	$NetBSD: ohcivar.h,v 1.31 2002/09/30 16:36:20 augustss Exp $	*/
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/*	$NetBSD: ohcivar.h,v 1.24 2000/06/01 14:28:58 augustss Exp $	*/
a44 4
#ifdef __riscos
        u_int32_t flags;
#define OHCI_PAUSED     0x00000001
#endif
d109 4
a112 1
	ohci_soft_ed_t *sc_freeeds;
d114 2
a115 2
	ohci_soft_ed_t *sc_reclaimeds;
	ohci_soft_ed_t *sc_pausededs;
d117 1
d135 5
d148 7
d157 3
@

