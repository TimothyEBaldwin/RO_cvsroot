head	1.7;
access;
symbols
	USBDriver-1_29:1.7
	USBDriver-1_28:1.7
	USBDriver-1_27:1.7
	USBDriver-1_26:1.7
	USBDriver-1_25:1.7
	USBDriver-1_24:1.7
	USBDriver-1_23:1.7
	USBDriver-1_22:1.7
	USBDriver-1_21:1.7
	USBDriver-1_20:1.7
	USBDriver-1_19:1.7
	NetBSD-1_19:1.7
	NetBSD-1_18:1.7
	NetBSD-1_17:1.7
	NetBSD-1_16:1.7
	NetBSD-1_15:1.7
	NetBSD-1_14:1.7
	NetBSD-1_13:1.7
	NetBSD-1_12:1.7
	NetBSD-1_09-1:1.7
	NetBSD-1_11:1.7
	NetBSD-1_10:1.7
	NetBSD-1_09:1.7
	NetBSD-1_08:1.7
	NetBSD-1_07:1.7
	NetBSD-1_06:1.7
	NetBSD-1_05:1.7
	NetBSD-1_04:1.7
	NetBSD-1_03:1.7
	NetBSD-1_02:1.7
	NetBSD-1_01:1.7
	NetBSD-1_00:1.7
	NetBSD-0_99:1.7
	NetBSD-0_98:1.7
	NetBSD-0_97:1.7
	NetBSD-0_96:1.7
	NetBSD-0_95:1.7
	NetBSD-0_94:1.7
	NetBSD-0_93:1.7
	NetBSD-0_92:1.7
	NetBSD-0_91:1.7
	NetBSD-0_90:1.7
	NetBSD-0_89:1.7
	NetBSD-0_88:1.7
	NetBSD-0_87:1.7
	NetBSD-0_86:1.7
	NetBSD-0_85:1.7
	NetBSD-0_84:1.7
	NetBSD-0_83:1.7
	NetBSD-0_82:1.7
	NetBSD-0_81:1.7
	NetBSD-0_80:1.7
	NetBSD-0_79:1.7
	NetBSD-0_78:1.7
	NetBSD-0_77:1.7
	NetBSD-0_76:1.7
	NetBSD-0_75:1.7
	NetBSD-0_74:1.7
	NetBSD-0_73:1.7
	NetBSD-0_72:1.7
	NetBSD-0_71:1.7
	NetBSD-0_70:1.7
	NetBSD-0_69:1.7
	NetBSD-0_68:1.7
	NetBSD-0_67:1.7
	NetBSD-0_66:1.7
	NetBSD-0_65:1.7
	NetBSD-0_64:1.7
	NetBSD-0_63:1.7
	NetBSD-0_62:1.7
	NetBSD-0_61:1.7
	NetBSD-0_60:1.7
	NetBSD-0_59:1.7
	NetBSD-0_58:1.7
	NetBSD-0_57:1.7
	NetBSD-0_56:1.7
	NetBSD-0_55:1.7
	NetBSD-0_54:1.7
	NetBSD-0_53:1.7
	NetBSD-0_52:1.7
	NetBSD-0_51:1.7
	NetBSD-0_50:1.7
	NetBSD-0_49:1.7
	NetBSD-0_48:1.7
	NetBSD-0_47:1.7
	NetBSD-0_46:1.7
	NetBSD-0_45:1.7
	NetBSD-0_44:1.7
	NetBSD-0_43:1.7
	NetBSD-0_42:1.7
	NetBSD-0_41:1.7
	NetBSD-0_40:1.7
	NetBSD-0_39:1.7
	NetBSD-0_38:1.6
	NetBSD-0_37:1.6
	NetBSD-0_36:1.6
	NetBSD-0_35:1.6
	NetBSD-0_34:1.6
	NetBSD-0_33:1.6
	NetBSD-0_32:1.5
	NetBSD-0_31:1.5
	NetBSD-0_30:1.4
	NetBSD-0_29:1.4
	RO_5_07:1.4
	NetBSD-0_28:1.4
	NetBSD-0_27:1.3
	NetBSD-0_26:1.3
	NetBSD-0_25:1.3
	NetBSD-0_24:1.3
	NetBSD-0_23:1.3
	NetBSD-0_21-1_22_2_1:1.2
	NetBSD-0_22:1.3
	USB1:1.2.0.2
	NetBSD-0_21:1.2
	NetBSD-0_20:1.2
	NetBSD-0_19:1.2
	NetBSD-0_18:1.2
	NetBSD-0_17:1.2
	NetBSD-0_16:1.2
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.7
date	2005.04.24.23.13.54;	author jballance;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.21.22.30.19;	author jballance;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.30.02.34.22;	author jballance;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.12.14.47.42;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.21.20.49.20;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.14.16.43.52;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.18;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.7
log
@	Update of NetBSD elements (except c.ohci) to track NetBSD current
	from mid April 2005.
	Inclusion of Mods to c.ehci (from Dan) to correctly handle low
	speed interrupt devices beyond USB2 hubs (i.e. keyboards and mice).
	Mod to EHCI resetting in service call handler to better cope with
	USBDriver being restarted 'underneath' it.
Detail:
Admin:
	Castle, Dan Ellis, NetBSD added IP. Tested at Castle. Will be
	beta tested at this revision level before full release.


Version 0.39. Tagged as 'NetBSD-0_39'
@
text
@/*      $NetBSD: usbdi_util.h,v 1.33 2005/04/12 13:10:14 itohy Exp $    */

/*
 * Copyright (c) 1998, 2004 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

usbd_status	usbd_get_desc(usbd_device_handle dev, int type,
			      int index, int len, void *desc);
usbd_status	usbd_get_config_desc(usbd_device_handle, int,
				     usb_config_descriptor_t *);
usbd_status	usbd_get_config_desc_full(usbd_device_handle, int, void *, int);
usbd_status	usbd_get_device_desc(usbd_device_handle dev,
				     usb_device_descriptor_t *d);
usbd_status	usbd_set_address(usbd_device_handle dev, int addr);
usbd_status	usbd_get_port_status(usbd_device_handle,
				     int, usb_port_status_t *);
usbd_status	usbd_set_hub_feature(usbd_device_handle dev, int);
usbd_status	usbd_clear_hub_feature(usbd_device_handle, int);
usbd_status	usbd_set_port_feature(usbd_device_handle dev, int, int);
usbd_status	usbd_clear_port_feature(usbd_device_handle, int, int);
usbd_status	usbd_get_device_status(usbd_device_handle, usb_status_t *);
usbd_status	usbd_get_hub_status(usbd_device_handle, usb_hub_status_t *);
usbd_status	usbd_get_protocol(usbd_interface_handle dev, u_int8_t *report);
usbd_status	usbd_set_protocol(usbd_interface_handle dev, int report);
usbd_status	usbd_get_report_descriptor(usbd_device_handle dev, int ifcno,
					   int size, void *d);
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
__packed
#endif
struct usb_hid_descriptor *usbd_get_hid_descriptor(usbd_interface_handle ifc);
usbd_status	usbd_set_report(usbd_interface_handle iface, int type, int id,
				void *data,int len);
usbd_status	usbd_set_report_async(usbd_interface_handle iface, int type,
				      int id, void *data, int len);
usbd_status	usbd_get_report(usbd_interface_handle iface, int type, int id,
				void *data, int len);
usbd_status	usbd_set_idle(usbd_interface_handle iface, int duration,int id);
usbd_status	usbd_read_report_desc(usbd_interface_handle ifc, void **descp,
				       int *sizep, usb_malloc_type mem);
usbd_status	usbd_get_config(usbd_device_handle dev, u_int8_t *conf);
usbd_status	usbd_get_string_desc(usbd_device_handle dev, int sindex,
                                     int langid,usb_string_descriptor_t *sdesc,
                                     int *sizep);
void		usbd_delay_ms(usbd_device_handle, u_int);


usbd_status usbd_set_config_no(usbd_device_handle dev, int no, int msg);
usbd_status usbd_set_config_index(usbd_device_handle dev, int index, int msg);

usbd_status usbd_bulk_transfer(usbd_xfer_handle xfer, usbd_pipe_handle pipe,
			       u_int16_t flags, u_int32_t timeout, void *buf,
			       u_int32_t *size, char *lbl);
usbd_status usbd_intr_transfer(usbd_xfer_handle xfer, usbd_pipe_handle pipe,
                               u_int16_t flags, u_int32_t timeout, void *buf,
                               u_int32_t *size, char *lbl);

void usb_detach_wait(device_ptr_t);
void usb_detach_wakeup(device_ptr_t);
#ifdef __riscos
usb_descriptor_t *usb_find_desc(usbd_device_handle dev, int type);
usb_descriptor_t *usb_find_desc_if(usbd_device_handle dev, int type,
                                         int subtype,
                                         usb_interface_descriptor_t *id);
#else
const usb_descriptor_t *usb_find_desc(usbd_device_handle dev, int type,
                                      int subtype);
const usb_descriptor_t *usb_find_desc_if(usbd_device_handle dev, int type,
                                         int subtype,
                                         usb_interface_descriptor_t *id);
#endif
#define USBD_SUBTYPE_ANY (~0)
@


1.6
log
@        Stack brought up to date with NetBSD sources as at 20050121.
        USB2 further debugged.
Detail:
        Check in prior to second beta release. Improvements also to
        softloading of replacement modules.
Admin:
        Checked with JB .. further crosschecking is still needed for rhenium.
        Castle/D Ellis added ip from NetBSD sources


Version 0.33. Tagged as 'NetBSD-0_33'
@
text
@d1 1
a1 1
/*      $NetBSD: usbdi_util.h,v 1.31 2004/12/03 08:53:40 augustss Exp $ */
d4 1
a4 1
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
d94 3
d100 3
@


1.5
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d75 2
a76 1
				     int langid,usb_string_descriptor_t *sdesc, int *sizep);
d92 1
a92 1

d94 5
@


1.4
log
@  Extensive changes and bug fixes to usb and ohci ..
  'blocked' several holes that could cause freezes with awkward
  usb devices.  Added latest changes from Dan Ellis too , especially for USB2
Detail:
 many
Admin:
 Tested in ROM at Castle, and beta tested with users


Version 0.28. Tagged as 'NetBSD-0_28'
@
text
@d1 1
a1 2
/*	$NetBSD: usbdi_util.h,v 1.28 2002/07/11 21:14:36 augustss Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/usbdi_util.h,v 1.9 1999/11/17 22:33:50 n_hibma Exp $	*/
d85 3
@


1.3
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d76 1
a76 1
				     int langid,usb_string_descriptor_t *sdesc);
@


1.2
log
@  Support for SCSISoftUSB, and some tidying up.
Detail:
  * Errors now use the allocated error number base, &819000, instead of a
    base in the private range, &50000000. "USB transfer failed" errors now
    have use a sub-range of error numbers from &819020; the original BSD
    error number can be retrieved from the bottom 5 bits of the RISC OS
    error number.
  * Service_USB 1 now returns the list in the order in which the devices,
    rather than in the reverse order as previous versions of the module did.
  * A little tweaking of h/usb_port to reduce compiler warnings.
  * Some compiler-satisfying changes to allow use of packed structures.
    (However, the compiler doesn't seem to work correctly yet, so this is
    currently switched out using -DDISABLE_PACKED on the command line.)
  * Added full stops to end of star command help strings for consistency
    with rest of OS.
  * New exports: USBDevFS (moved here from ^.h) and a few files in dev/usb/h
    and sys/h.
Admin:
  Error number overhaul and new exports are both required by SCSISoftUSB.

Version 0.16. Tagged as 'NetBSD-0_16'
@
text
@d1 1
a1 1
/*	$NetBSD: usbdi_util.h,v 1.22 2000/06/01 14:37:52 augustss Exp $	*/
d41 1
a41 1
usbd_status	usbd_get_desc(usbd_device_handle dev, int type, 
d43 1
a43 1
usbd_status	usbd_get_config_desc(usbd_device_handle, int, 
d49 1
a49 1
usbd_status	usbd_get_port_status(usbd_device_handle, 
d55 1
a55 1
usbd_status	usbd_get_device_status(usbd_device_handle,usb_status_t*);
d57 1
d60 1
a60 1
					   int repid, int size, void *d);
d72 1
a72 1
usbd_status	usbd_alloc_report_desc(usbd_interface_handle ifc, void **descp,
d90 1
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d60 3
@

