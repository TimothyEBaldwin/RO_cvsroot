head	1.11;
access;
symbols
	USBDriver-1_29:1.11
	USBDriver-1_28:1.11
	USBDriver-1_27:1.11
	USBDriver-1_26:1.11
	USBDriver-1_25:1.11
	USBDriver-1_24:1.11
	USBDriver-1_23:1.11
	USBDriver-1_22:1.10
	USBDriver-1_21:1.10
	USBDriver-1_20:1.10
	USBDriver-1_19:1.10
	NetBSD-1_19:1.10
	NetBSD-1_18:1.10
	NetBSD-1_17:1.10
	NetBSD-1_16:1.10
	NetBSD-1_15:1.10
	NetBSD-1_14:1.10
	NetBSD-1_13:1.10
	NetBSD-1_12:1.10
	NetBSD-1_09-1:1.10
	NetBSD-1_11:1.10
	NetBSD-1_10:1.10
	NetBSD-1_09:1.10
	NetBSD-1_08:1.10
	NetBSD-1_07:1.10
	NetBSD-1_06:1.10
	NetBSD-1_05:1.10
	NetBSD-1_04:1.10
	NetBSD-1_03:1.10
	NetBSD-1_02:1.9
	NetBSD-1_01:1.9
	NetBSD-1_00:1.9
	NetBSD-0_99:1.9
	NetBSD-0_98:1.9
	NetBSD-0_97:1.9
	NetBSD-0_96:1.9
	NetBSD-0_95:1.9
	NetBSD-0_94:1.9
	NetBSD-0_93:1.9
	NetBSD-0_92:1.9
	NetBSD-0_91:1.9
	NetBSD-0_90:1.9
	NetBSD-0_89:1.9
	NetBSD-0_88:1.9
	NetBSD-0_87:1.9
	NetBSD-0_86:1.9
	NetBSD-0_85:1.8
	NetBSD-0_84:1.8
	NetBSD-0_83:1.8
	NetBSD-0_82:1.8
	NetBSD-0_81:1.8
	NetBSD-0_80:1.8
	NetBSD-0_79:1.8
	NetBSD-0_78:1.8
	NetBSD-0_77:1.8
	NetBSD-0_76:1.8
	NetBSD-0_75:1.8
	NetBSD-0_74:1.8
	NetBSD-0_73:1.8
	NetBSD-0_72:1.8
	NetBSD-0_71:1.8
	NetBSD-0_70:1.8
	NetBSD-0_69:1.8
	NetBSD-0_68:1.8
	NetBSD-0_67:1.8
	NetBSD-0_66:1.8
	NetBSD-0_65:1.8
	NetBSD-0_64:1.8
	NetBSD-0_63:1.8
	NetBSD-0_62:1.8
	NetBSD-0_61:1.8
	NetBSD-0_60:1.8
	NetBSD-0_59:1.8
	NetBSD-0_58:1.7
	NetBSD-0_57:1.7
	NetBSD-0_56:1.7
	NetBSD-0_55:1.7
	NetBSD-0_54:1.7
	NetBSD-0_53:1.7
	NetBSD-0_52:1.7
	NetBSD-0_51:1.6
	NetBSD-0_50:1.6
	NetBSD-0_49:1.6
	NetBSD-0_48:1.6
	NetBSD-0_47:1.6
	NetBSD-0_46:1.6
	NetBSD-0_45:1.6
	NetBSD-0_44:1.6
	NetBSD-0_43:1.6
	NetBSD-0_42:1.6
	NetBSD-0_41:1.6
	NetBSD-0_40:1.6
	NetBSD-0_39:1.6
	NetBSD-0_38:1.5
	NetBSD-0_37:1.5
	NetBSD-0_36:1.5
	NetBSD-0_35:1.5
	NetBSD-0_34:1.5
	NetBSD-0_33:1.4
	NetBSD-0_32:1.4
	NetBSD-0_31:1.4
	NetBSD-0_30:1.3
	NetBSD-0_29:1.3
	RO_5_07:1.3
	NetBSD-0_28:1.3
	NetBSD-0_27:1.2
	NetBSD-0_26:1.2
	NetBSD-0_25:1.2
	NetBSD-0_24:1.2
	NetBSD-0_23:1.2
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.2
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.11
date	2017.10.07.09.08.47;	author rool;	state Exp;
branches;
next	1.10;
commitid	Qzw5gnXY6CB2g6aA;

1.10
date	2015.09.17.16.03.50;	author rool;	state Exp;
branches;
next	1.9;
commitid	bTEnXVoCvWq6HCBy;

1.9
date	2014.06.01.14.32.10;	author jlee;	state Exp;
branches;
next	1.8;
commitid	oHh05566cwiloPCx;

1.8
date	2011.05.22.20.22.42;	author jlee;	state Exp;
branches;
next	1.7;
commitid	Ye1jVWDlKivFSIkv;

1.7
date	2010.07.21.23.57.19;	author jlee;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.24.23.13.54;	author jballance;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.31.13.45.35;	author jballance;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.30.02.34.20;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.12.14.47.41;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.21.20.49.19;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.17;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Clear up duplicate/unused OHCI/EHCI source files
Detail:
  Remove the (now) unused sources from when this component produced multiple targets. See Controllers/OHCIDriver & Controllers/EHCIDriver for the live copies.
  Remove unset USBHAL defines.
  Simplify the Makefile and !Mk* scripts.
  No longer export usbroothub_subr.h.
  Add a porting type "device_t" to usb_port.h.
Admin:
  Submission for USB bounty.

Version 1.23. Tagged as 'USBDriver-1_23'
@
text
@/*	$NetBSD: usb_quirks.c,v 1.81 2014/09/12 16:40:38 skrll Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/usb_quirks.c,v 1.30 2003/01/02 04:15:55 imp Exp $	*/

/*
 * Copyright (c) 1998, 2004 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/cdefs.h>
#ifndef __riscos
__KERNEL_RCSID(0, "$NetBSD: usb_quirks.c,v 1.81 2014/09/12 16:40:38 skrll Exp $");

#ifdef _KERNEL_OPT
#include "opt_usb.h"
#endif
#endif

#include <sys/param.h>
#include <sys/systm.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdevs.h>
#include <dev/usb/usb_quirks.h>

#ifdef USB_DEBUG
extern int usbdebug;
#endif

#define ANY 0xffff

#ifdef __riscos
void *extra_quirks; /* Quirk list added to at runtime */
static const struct usbd_quirks *
usbd_find_builtin_quirk(usb_device_descriptor_t *, const struct usbd_quirk_entry *);

Static const struct usbd_quirk_entry  usb_quirks[] = {
#else
Static const struct usbd_quirk_entry {
	u_int16_t idVendor;
	u_int16_t idProduct;
	u_int16_t bcdDevice;
	struct usbd_quirks quirks;
} usb_quirks[] = {
#endif
 /* Devices which should be ignored by uhid */
 { USB_VENDOR_APC, USB_PRODUCT_APC_UPS,		    ANY,   { UQ_HID_IGNORE }},
 { USB_VENDOR_CYBERPOWER, USB_PRODUCT_CYBERPOWER_UPS, ANY, { UQ_HID_IGNORE }},
 { USB_VENDOR_MGE, USB_PRODUCT_MGE_UPS1,	    ANY,   { UQ_HID_IGNORE }},
 { USB_VENDOR_MGE, USB_PRODUCT_MGE_UPS2,	    ANY,   { UQ_HID_IGNORE }},
 { USB_VENDOR_MICROCHIP,  USB_PRODUCT_MICROCHIP_PICKIT1,
	ANY,	{ UQ_HID_IGNORE }},
 { USB_VENDOR_TRIPPLITE2, ANY,			    ANY,   { UQ_HID_IGNORE }},
 { USB_VENDOR_MISC, USB_PRODUCT_MISC_WISPY_24X, ANY, { UQ_HID_IGNORE }},
 { USB_VENDOR_WELTREND, USB_PRODUCT_WELTREND_HID,   ANY,   { UQ_HID_IGNORE }},

 { USB_VENDOR_KYE, USB_PRODUCT_KYE_NICHE,	    0x100, { UQ_NO_SET_PROTO}},
 { USB_VENDOR_INSIDEOUT, USB_PRODUCT_INSIDEOUT_EDGEPORT4,
   						    0x094, { UQ_SWAP_UNICODE}},
 { USB_VENDOR_DALLAS, USB_PRODUCT_DALLAS_J6502,	    0x0a2, { UQ_BAD_ADC }},
 { USB_VENDOR_DALLAS, USB_PRODUCT_DALLAS_J6502,	    0x0a2, { UQ_AU_NO_XU }},
 { USB_VENDOR_ALTEC, USB_PRODUCT_ALTEC_ADA70,	    0x103, { UQ_BAD_ADC }},
 { USB_VENDOR_ALTEC, USB_PRODUCT_ALTEC_ASC495,      0x000, { UQ_BAD_AUDIO }},
 { USB_VENDOR_SONY, USB_PRODUCT_SONY_PS2EYETOY4,    0x000, { UQ_BAD_AUDIO }},
 { USB_VENDOR_SONY, USB_PRODUCT_SONY_PS2EYETOY5,    0x000, { UQ_BAD_AUDIO }},
 { USB_VENDOR_PHILIPS, USB_PRODUCT_PHILIPS_PCVC740K,  ANY, { UQ_BAD_AUDIO }},
 { USB_VENDOR_LOGITECH, USB_PRODUCT_LOGITECH_QUICKCAMPRONB,
	0x000, { UQ_BAD_AUDIO }},
 { USB_VENDOR_LOGITECH, USB_PRODUCT_LOGITECH_QUICKCAMPRO4K,
	0x000, { UQ_BAD_AUDIO }},
 { USB_VENDOR_LOGITECH, USB_PRODUCT_LOGITECH_QUICKCAMMESS,
	0x100, { UQ_BAD_ADC }},
 { USB_VENDOR_QTRONIX, USB_PRODUCT_QTRONIX_980N,    0x110, { UQ_SPUR_BUT_UP }},
 { USB_VENDOR_ALCOR2, USB_PRODUCT_ALCOR2_KBD_HUB,   0x001, { UQ_SPUR_BUT_UP }},
 { USB_VENDOR_METRICOM, USB_PRODUCT_METRICOM_RICOCHET_GS,
 	0x100, { UQ_ASSUME_CM_OVER_DATA }},
 { USB_VENDOR_SANYO, USB_PRODUCT_SANYO_SCP4900,
 	0x000, { UQ_ASSUME_CM_OVER_DATA }},
 { USB_VENDOR_MOTOROLA2, USB_PRODUCT_MOTOROLA2_T720C,
 	0x001, { UQ_ASSUME_CM_OVER_DATA }},
 { USB_VENDOR_EICON, USB_PRODUCT_EICON_DIVA852,
        0x100, { UQ_ASSUME_CM_OVER_DATA }},
 { USB_VENDOR_SIEMENS2, USB_PRODUCT_SIEMENS2_MC75,
        0x000, { UQ_ASSUME_CM_OVER_DATA }},
 { USB_VENDOR_TELEX, USB_PRODUCT_TELEX_MIC1,	    0x009, { UQ_AU_NO_FRAC }},
 { USB_VENDOR_SILICONPORTALS, USB_PRODUCT_SILICONPORTALS_YAPPHONE,
   						    0x100, { UQ_AU_INP_ASYNC }},
 { USB_VENDOR_AVANCELOGIC, USB_PRODUCT_AVANCELOGIC_USBAUDIO,
   						    0x101, { UQ_AU_INP_ASYNC }},
 { USB_VENDOR_PLANTRONICS, USB_PRODUCT_PLANTRONICS_HEADSET,
   						    0x004, { UQ_AU_INP_ASYNC }},
 /* XXX These should have a revision number, but I don't know what they are. */
 { USB_VENDOR_HP, USB_PRODUCT_HP_895C,		    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_880C,		    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_815C,		    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_810C,		    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_830C,		    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_885C,		    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_840C,		    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_816C,		    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_959C,		    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_MTK, USB_PRODUCT_MTK_GPS_RECEIVER,    ANY,   { UQ_NO_UNION_NRM }},
 { USB_VENDOR_NEC, USB_PRODUCT_NEC_PICTY900,	    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_NEC, USB_PRODUCT_NEC_PICTY760,	    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_NEC, USB_PRODUCT_NEC_PICTY920,	    ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_NEC, USB_PRODUCT_NEC_PICTY800,	    ANY,   { UQ_BROKEN_BIDIR }},

 { USB_VENDOR_HP, USB_PRODUCT_HP_1220C,		    ANY,   { UQ_BROKEN_BIDIR }},

#ifndef __riscos
 /* Apple internal notebook ISO keyboards have swapped keys */
 { USB_VENDOR_APPLE, USB_PRODUCT_APPLE_FOUNTAIN_ISO,
	ANY, { UQ_APPLE_ISO }},
 { USB_VENDOR_APPLE, USB_PRODUCT_APPLE_GEYSER_ISO,
	ANY, { UQ_APPLE_ISO }},
#endif

 /* HID and audio are both invalid on iPhone/iPod Touch */
 { USB_VENDOR_APPLE, USB_PRODUCT_APPLE_IPHONE,
	ANY, { UQ_HID_IGNORE | UQ_BAD_AUDIO }},
 { USB_VENDOR_APPLE, USB_PRODUCT_APPLE_IPOD_TOUCH,
	ANY, { UQ_HID_IGNORE | UQ_BAD_AUDIO }},
 { USB_VENDOR_APPLE, USB_PRODUCT_APPLE_IPOD_TOUCH_4G,
	ANY, { UQ_HID_IGNORE | UQ_BAD_AUDIO }},
 { USB_VENDOR_APPLE, USB_PRODUCT_APPLE_IPHONE_3G,
	ANY, { UQ_HID_IGNORE | UQ_BAD_AUDIO }},
 { USB_VENDOR_APPLE, USB_PRODUCT_APPLE_IPHONE_3GS,
	ANY, { UQ_HID_IGNORE | UQ_BAD_AUDIO }},

 { USB_VENDOR_QUALCOMM, USB_PRODUCT_QUALCOMM_CDMA_MSM,
	ANY, { UQ_ASSUME_CM_OVER_DATA }},
 { USB_VENDOR_QUALCOMM2, USB_PRODUCT_QUALCOMM2_CDMA_MSM,
	ANY, { UQ_ASSUME_CM_OVER_DATA }},
 { USB_VENDOR_HYUNDAI, USB_PRODUCT_HYUNDAI_UM175,
	ANY, { UQ_ASSUME_CM_OVER_DATA }},
 { USB_VENDOR_ZOOM, USB_PRODUCT_ZOOM_3095,
	ANY, { UQ_LOST_CS_DESC }},
#ifdef __riscos
 /* The power quirks have been obsoleted by NetBSD (see usb_quirks.c revision 1.55) */
 { USB_VENDOR_TI, USB_PRODUCT_TI_UTUSB41,	    0x110, { UQ_POWER_CLAIM }},
 { USB_VENDOR_NEC, USB_PRODUCT_NEC2_HUB2_0,	    0x100, { UQ_POWER_CLAIM }},
 { USB_VENDOR_MCT, USB_PRODUCT_MCT_HUB0100,         0x102, { UQ_BUS_POWERED }},
 { USB_VENDOR_MCT, USB_PRODUCT_MCT_USB232,          0x102, { UQ_BUS_POWERED }},
 { USB_VENDOR_OLYMPUS, USB_PRODUCT_OLYMPUS_C700,    ANY,   { UQ_BUS_POWERED }},

 /* The strings quirk has been obsoleted by NetBSD (see usb_quirks.c revision 1.50) */
 { USB_VENDOR_BTC, USB_PRODUCT_BTC_BTC7932,	    0x100, { UQ_NO_STRINGS }},
 { USB_VENDOR_ADS, USB_PRODUCT_ADS_UBS10BT,	    0x002, { UQ_NO_STRINGS }},
 { USB_VENDOR_PERACOM, USB_PRODUCT_PERACOM_SERIAL1, 0x101, { UQ_NO_STRINGS }},
 { USB_VENDOR_WACOM, USB_PRODUCT_WACOM_CT0405U,     0x101, { UQ_NO_STRINGS }},
 { USB_VENDOR_ACERP, USB_PRODUCT_ACERP_ACERSCAN_320U,
						    0x000, { UQ_NO_STRINGS }},
#endif
 { 0, 0, 0, { 0 } }
};

const struct usbd_quirks usbd_no_quirk = { 0 };

const struct usbd_quirks *
usbd_find_quirk(usb_device_descriptor_t *d)
{
#ifdef __riscos
	const struct usbd_quirks *q;
	if (extra_quirks) {
		q = usbd_find_builtin_quirk(d, extra_quirks);
		if (q) return q;
	}
	return usbd_find_builtin_quirk(d, usb_quirks); /* Try as a builtin one */
}

static const struct usbd_quirks *
usbd_find_builtin_quirk(usb_device_descriptor_t *d, const struct usbd_quirk_entry *t)
{
#else
	const struct usbd_quirk_entry *t;
#endif
	u_int16_t vendor = UGETW(d->idVendor);
	u_int16_t product = UGETW(d->idProduct);
	u_int16_t revision = UGETW(d->bcdDevice);

#ifdef __riscos
	for (; t->idVendor != 0; t++) {
#else
	for (t = usb_quirks; t->idVendor != 0; t++) {
#endif
		if (t->idVendor  == vendor &&
		    (t->idProduct == ANY || t->idProduct == product) &&
		    (t->bcdDevice == ANY || t->bcdDevice == revision))
			break;
	}
#ifdef USB_DEBUG
	if (usbdebug && t->quirks.uq_flags)
		printf("usbd_find_quirk 0x%04x/0x%04x/%x: %d\n",
			  UGETW(d->idVendor), UGETW(d->idProduct),
			  UGETW(d->bcdDevice), t->quirks.uq_flags);
#endif
	return (&t->quirks);
}
@


1.10
log
@Update table of device quirks
Detail:
  From NetBSD usb_quirks.c revision 1.81.
  usbmodule: NULL is for pointer types, not ints.
  usb_quirks: Group the RISC OS specific ones together, disable the non applicable UQ_APPLE_ISO ones, UQ_LOST_CS_DESC doesn't apply either but is only used for USB modem drivers not ported here. Untangle ifdefs around usbd_find_quirk().
Admin:
  Removed unused source file ums.c

Version 1.03. Tagged as 'NetBSD-1_03'
@
text
@a33 4
#ifdef __riscos
#include <dev/usb/usbhal.h>
#define printf  logprintf
#endif
d186 1
a186 1
#if defined(__riscos) && !defined(USBHAL)
d205 1
a205 1
#if defined(__riscos) && !defined(USBHAL)
@


1.9
log
@Updated to latest usbdevs file from NetBSD
Detail:
  dev/usb/usbdevs - Updated to the latest version from the NetBSD CVS, mainly for several new DisplayLink product IDs. Merged in our TouchBook definitions from rev 1.5, and commented out a couple of duplicate products.
  dev/usb/c/usb_quirks - Updated to cope with MetaGeek vendor being renamed to Misc
  build/Version - Bump USBDriver version number
Admin:
  Tested in OMAP3 ROM build


Version 0.86. Tagged as 'NetBSD-0_86'
@
text
@d1 1
a1 1
/*	$NetBSD: usb_quirks.c,v 1.67 2010/06/27 10:41:26 kardel Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d36 1
d40 5
a44 1
__KERNEL_RCSID(0, "$NetBSD: usb_quirks.c,v 1.67 2010/06/27 10:41:26 kardel Exp $");
a50 1

d60 5
d66 8
d81 1
a81 3
 { USB_VENDOR_TRIPPLITE2, USB_PRODUCT_TRIPPLITE2_UPS,	    
	ANY,   { UQ_HID_IGNORE }},

d83 1
a87 4
 { USB_VENDOR_BTC, USB_PRODUCT_BTC_BTC7932,	    0x100, { UQ_NO_STRINGS }},
 { USB_VENDOR_ADS, USB_PRODUCT_ADS_UBS10BT,	    0x002, { UQ_NO_STRINGS }},
 { USB_VENDOR_PERACOM, USB_PRODUCT_PERACOM_SERIAL1, 0x101, { UQ_NO_STRINGS }},
 { USB_VENDOR_WACOM, USB_PRODUCT_WACOM_CT0405U,     0x101, { UQ_NO_STRINGS }},
a102 2
 { USB_VENDOR_MCT, USB_PRODUCT_MCT_HUB0100,         0x102, { UQ_BUS_POWERED }},
 { USB_VENDOR_MCT, USB_PRODUCT_MCT_USB232,          0x102, { UQ_BUS_POWERED }},
a112 5
 { USB_VENDOR_TI, USB_PRODUCT_TI_UTUSB41,	    0x110, { UQ_POWER_CLAIM }},
 /* JB added */
 { USB_VENDOR_NEC, USB_PRODUCT_NEC2_HUB2_0,	    0x100, { UQ_POWER_CLAIM }},
 { USB_VENDOR_ACERP, USB_PRODUCT_ACERP_ACERSCAN_320U,
						    0x000, { UQ_NO_STRINGS }},
d138 8
d151 2
d164 8
a171 1
 /* JB added */
d173 9
a185 2
#if defined(__riscos) && !defined(USBHAL)
void * extra_quirks;
d187 2
a188 1
const struct usbd_quirks * usbd_find_quirk(usb_device_descriptor_t *d)
d190 7
a196 3
  const struct usbd_quirks * q;
  if(extra_quirks) if(q=usbd_find_builtin_quirk(d,extra_quirks),q) return q;
  return usbd_find_builtin_quirk(d,NULL);  // try as a builtin one
d199 2
a200 5
#endif

const struct usbd_quirks *
#if defined(__riscos) && !defined(USBHAL)
usbd_find_builtin_quirk(usb_device_descriptor_t *d,const struct usbd_quirk_entry *t)
a201 1
	if(!t) t = usb_quirks;
a202 2
usbd_find_quirk(usb_device_descriptor_t *d)
{
d215 1
a215 1
		    t->idProduct == product &&
d221 1
a221 1
		logprintf("usbd_find_quirk 0x%04x/0x%04x/%x: %d\n",
@


1.8
log
@Add the ability to build the USB drivers as HAL-compatible static libraries
Detail:
  build/Makefile, build/OBJEHCIDriver, build/OBJOHCIDriver, build/OBJUSBDriver - Modified makefiles to build the HAL libs during the export libs phase
  build/!MkHAL,fd7 - Handy script for building the HAL libs
  build/Hdr/usbhal - Header containing definitions for the assembler code. Also gets exported so that HALs know how much workspace to reserve.
  build/c/usbhal - HAL version of usbmodule.c & port.c. Also contains the keyboard scan code, adapted from the code in the Tungsten HAL.
  build/s/porthal - Assembler versions of some port.c routines that were easier to do in assembler than C
  build/s/halheap - OS_Heap code that's been adapted for use in the HAL. Could easily be changed into a standalone library instead of being part of the HAL USB libs. Supports memory-efficient allocation of aligned blocks.
  build/c/ehcihal - HAL version of ehcimodule.c. Currently only supports EHCI controllers exposed via HAL_USBControllerInfo (i.e. no PCI support)
  build/c/ehcimodule, build/c/ohcimodule, build/c/port - Moved riscos_irq_clear into port.c. Removed unused microtime() function.
  build/c/usbmouse - Strip out some debug-related code in non-debug builds
  build/Version - Updated version numbers
  dev/usb/c/ehci, dev/usb/h/ehcivar - Adapted to add support for the HAL build. Apart from the base changes, the code has also been tweaked to significantly reduce the amount of memory used at runtime by the HAL version of the driver.
  dev/usb/c/hid, dev/usb/c/uhub, dev/usb/c/usb, dev/usb/c/usb_quirks, dev/usb/c/usb_subr, dev/usb/c/usbdi, dev/usb/c/usbdi_util, dev/usb/c/usbroothub_subr - Changes to support HAL builds. Mainly disabling bits that won't work in the HAL or disabling bits for RISC OS in general if they weren't being used in the first place.
  dev/usb/c/ohci, dev/usb/h/ohcivar - Basic changes to support HAL builds. However HAL OHCI support is still incomplete.
  dev/usb/h/usb_port - Added support for the HAL build. Also tweaked logprintf definition to get rid of logprintf calls entirely in non-debug builds.
  dev/usb/h/usbdivar - Added support for the HAL build.
  dev/usb/h/usbhal - New header used by the HAL build. Gets included by every C file to ensure the compiler doesn't use sb, and contains structs/macros to allow access to the shared workspace.
Admin:
  HAL & non-HAL builds tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook.
  Non-HAL builds tested with Iyonix ROM softload.
  Needs latest Kernel source for OSEntries.h export.


Version 0.59. Tagged as 'NetBSD-0_59'
@
text
@d74 1
a74 1
 { USB_VENDOR_METAGEEK, USB_PRODUCT_METAGEEK_WISPY_24X, ANY, { UQ_HID_IGNORE }},
@


1.7
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@d41 3
d162 1
a162 1
#ifdef __riscos
d175 1
a175 1
#ifdef __riscos
d188 1
a188 1
#ifdef __riscos
@


1.6
log
@	Update of NetBSD elements (except c.ohci) to track NetBSD current
	from mid April 2005.
	Inclusion of Mods to c.ehci (from Dan) to correctly handle low
	speed interrupt devices beyond USB2 hubs (i.e. keyboards and mice).
	Mod to EHCI resetting in service call handler to better cope with
	USBDriver being restarted 'underneath' it.
Detail:
Admin:
	Castle, Dan Ellis, NetBSD added IP. Tested at Castle. Will be
	beta tested at this revision level before full release.


Version 0.39. Tagged as 'NetBSD-0_39'
@
text
@d1 2
a2 2
/*      $NetBSD: usb_quirks.c,v 1.52 2005/03/02 11:37:27 mycroft Exp $  */
/*      $FreeBSD: src/sys/dev/usb/usb_quirks.c,v 1.30 2003/01/02 04:15:55 imp Exp $     */
d42 3
a44 1
//__KERNEL_RCSID(0, "$NetBSD: usb_quirks.c,v 1.52 2005/03/02 11:37:27 mycroft Exp $");
d61 12
d86 1
d88 1
a88 1
        0x000, { UQ_BAD_AUDIO }},
d90 3
a92 1
        0x000, { UQ_BAD_AUDIO }},
d98 1
a98 1
        0x100, { UQ_ASSUME_CM_OVER_DATA }},
d100 1
a100 1
        0x000, { UQ_ASSUME_CM_OVER_DATA }},
d102 1
a102 1
        0x001, { UQ_ASSUME_CM_OVER_DATA }},
d105 2
d116 1
a116 1
                                                    0x101, { UQ_AU_INP_ASYNC }},
d118 1
a118 1
                                                    0x004, { UQ_AU_INP_ASYNC }},
d125 28
a152 10
 { USB_VENDOR_HP, USB_PRODUCT_HP_885C,              ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_840C,              ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_816C,              ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_HP, USB_PRODUCT_HP_959C,              ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_NEC, USB_PRODUCT_NEC_PICTY900,        ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_NEC, USB_PRODUCT_NEC_PICTY760,        ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_NEC, USB_PRODUCT_NEC_PICTY920,        ANY,   { UQ_BROKEN_BIDIR }},
 { USB_VENDOR_NEC, USB_PRODUCT_NEC_PICTY800,        ANY,   { UQ_BROKEN_BIDIR }},

 { USB_VENDOR_HP, USB_PRODUCT_HP_1220C,             ANY,   { UQ_BROKEN_BIDIR }},
@


1.5
log
@Summary:  Minor tweaks to USBDriver and EHCI prior to USB2 release
          resulting from beta testing
Detail:
Admin:    castle and d ellis added IP beyond that in NetBSD sources


Version 0.34. Tagged as 'NetBSD-0_34'
@
text
@d1 1
a1 1
/*      $NetBSD: usb_quirks.c,v 1.50 2004/06/23 02:30:52 mycroft Exp $  */
d5 1
a5 1
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
d42 1
a42 1
//__KERNEL_RCSID(0, "$NetBSD: usb_quirks.c,v 1.50 2004/06/23 02:30:52 mycroft Exp $");
d70 2
@


1.4
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d87 2
d114 1
@


1.3
log
@  Extensive changes and bug fixes to usb and ohci ..
  'blocked' several holes that could cause freezes with awkward
  usb devices.  Added latest changes from Dan Ellis too , especially for USB2
Detail:
 many
Admin:
 Tested in ROM at Castle, and beta tested with users


Version 0.28. Tagged as 'NetBSD-0_28'
@
text
@d1 2
a2 2
/*	$NetBSD: usb_quirks.c,v 1.41 2002/08/26 21:34:28 uwe Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/usb_quirks.c,v 1.13 1999/11/17 22:33:47 n_hibma Exp $	*/
d42 1
a42 1
//__KERNEL_RCSID(0, "$NetBSD: usb_quirks.c,v 1.41 2002/08/26 21:34:28 uwe Exp $");
d58 1
a58 6
Static const struct usbd_quirk_entry {
	u_int16_t idVendor;
	u_int16_t idProduct;
	u_int16_t bcdDevice;
	struct usbd_quirks quirks;
} usb_quirks[] = {
d117 2
d120 8
@


1.2
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d75 4
d84 7
a90 1
 	0x100, { UQ_ASSUME_CM_OVER_DATA | UQ_NO_STRINGS }},
d97 4
a100 1
 { USB_VENDOR_NEODIO, USB_PRODUCT_NEODIO_ND5010,    0x100, { UQ_NO_STRINGS }},
d107 8
d116 2
d123 1
d125 5
d133 1
d138 3
d142 1
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/*	$NetBSD: usb_quirks.c,v 1.27 2000/06/01 14:29:01 augustss Exp $	*/
d41 3
d46 1
a46 1
 
d56 3
a58 1
Static struct usbd_quirk_entry {
d65 1
a65 1
 { USB_VENDOR_INSIDEOUT,USB_PRODUCT_INSIDEOUT_EDGEPORT4, 
d72 1
d76 1
d79 16
d98 1
a98 1
struct usbd_quirks usbd_no_quirk = { 0 };
d100 1
a100 1
struct usbd_quirks *
d103 4
a106 1
	struct usbd_quirk_entry *t;
d109 3
a111 3
		if (t->idVendor  == UGETW(d->idVendor) &&
		    t->idProduct == UGETW(d->idProduct) &&
		    t->bcdDevice == UGETW(d->bcdDevice))
d116 1
a116 1
		logprintf("usbd_find_quirk 0x%04x/0x%04x/%x: %d\n", 
@

