head	1.12;
access;
symbols
	USBDriver-1_22:1.11
	USBDriver-1_21:1.11
	USBDriver-1_20:1.11
	USBDriver-1_19:1.11
	NetBSD-1_19:1.11
	NetBSD-1_18:1.11
	NetBSD-1_17:1.11
	NetBSD-1_16:1.11
	NetBSD-1_15:1.11
	NetBSD-1_14:1.11
	NetBSD-1_13:1.11
	NetBSD-1_12:1.11
	NetBSD-1_09-1:1.11
	NetBSD-1_11:1.10
	NetBSD-1_10:1.10
	NetBSD-1_09:1.9
	NetBSD-1_08:1.9
	NetBSD-1_07:1.9
	NetBSD-1_06:1.9
	NetBSD-1_05:1.9
	NetBSD-1_04:1.9
	NetBSD-1_03:1.9
	NetBSD-1_02:1.9
	NetBSD-1_01:1.9
	NetBSD-1_00:1.9
	NetBSD-0_99:1.9
	NetBSD-0_98:1.9
	NetBSD-0_97:1.9
	NetBSD-0_96:1.9
	NetBSD-0_95:1.9
	NetBSD-0_94:1.9
	NetBSD-0_93:1.9
	NetBSD-0_92:1.9
	NetBSD-0_91:1.9
	NetBSD-0_90:1.9
	NetBSD-0_89:1.9
	NetBSD-0_88:1.8
	NetBSD-0_87:1.7
	NetBSD-0_86:1.7
	NetBSD-0_85:1.7
	NetBSD-0_84:1.7
	NetBSD-0_83:1.7
	NetBSD-0_82:1.7
	NetBSD-0_81:1.7
	NetBSD-0_80:1.7
	NetBSD-0_79:1.7
	NetBSD-0_78:1.7
	NetBSD-0_77:1.7
	NetBSD-0_76:1.7
	NetBSD-0_75:1.7
	NetBSD-0_74:1.7
	NetBSD-0_73:1.7
	NetBSD-0_72:1.7
	NetBSD-0_71:1.7
	NetBSD-0_70:1.7
	NetBSD-0_69:1.7
	NetBSD-0_68:1.7
	NetBSD-0_67:1.7
	NetBSD-0_66:1.7
	NetBSD-0_65:1.7
	NetBSD-0_64:1.7
	NetBSD-0_63:1.7
	NetBSD-0_62:1.7
	NetBSD-0_61:1.7
	NetBSD-0_60:1.7
	NetBSD-0_59:1.7
	NetBSD-0_58:1.6
	NetBSD-0_57:1.6
	NetBSD-0_56:1.6
	NetBSD-0_55:1.6
	NetBSD-0_54:1.6
	NetBSD-0_53:1.6
	NetBSD-0_52:1.6
	NetBSD-0_51:1.5
	NetBSD-0_50:1.5
	NetBSD-0_49:1.5
	NetBSD-0_48:1.5
	NetBSD-0_47:1.5
	NetBSD-0_46:1.5
	NetBSD-0_45:1.5
	NetBSD-0_44:1.5
	NetBSD-0_43:1.5
	NetBSD-0_42:1.5
	NetBSD-0_41:1.5
	NetBSD-0_40:1.5
	NetBSD-0_39:1.5
	NetBSD-0_38:1.4
	NetBSD-0_37:1.4
	NetBSD-0_36:1.4
	NetBSD-0_35:1.4
	NetBSD-0_34:1.4
	NetBSD-0_33:1.4
	NetBSD-0_32:1.3
	NetBSD-0_31:1.3
	NetBSD-0_30:1.2
	NetBSD-0_29:1.1
	RO_5_07:1.1
	NetBSD-0_28:1.1
	NetBSD-0_27:1.1
	NetBSD-0_26:1.1
	NetBSD-0_25:1.1
	NetBSD-0_24:1.1
	NetBSD-0_23:1.1
	NetBSD-0_22:1.1;
locks; strict;
comment	@# @;


1.12
date	2017.10.07.09.08.50;	author rool;	state dead;
branches;
next	1.11;
commitid	Qzw5gnXY6CB2g6aA;

1.11
date	2016.03.04.20.54.46;	author rool;	state Exp;
branches;
next	1.10;
commitid	MvG9A9da0K4NQmXy;

1.10
date	2016.03.04.01.30.15;	author jballance;	state Exp;
branches;
next	1.9;
commitid	NFICmxi3aahBqgXy;

1.9
date	2014.10.25.18.43.45;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	SYXBVhhWAW5D5CVx;

1.8
date	2014.08.29.19.26.21;	author jlee;	state Exp;
branches;
next	1.7;
commitid	f6ArfsGGibMS9iOx;

1.7
date	2011.05.22.20.22.45;	author jlee;	state Exp;
branches;
next	1.6;
commitid	Ye1jVWDlKivFSIkv;

1.6
date	2010.07.21.23.57.21;	author jlee;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.24.23.13.54;	author jballance;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.21.22.30.19;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.30.02.34.21;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.25.00.54.53;	author jballance;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.21.20.49.20;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Clear up duplicate/unused OHCI/EHCI source files
Detail:
  Remove the (now) unused sources from when this component produced multiple targets. See Controllers/OHCIDriver & Controllers/EHCIDriver for the live copies.
  Remove unset USBHAL defines.
  Simplify the Makefile and !Mk* scripts.
  No longer export usbroothub_subr.h.
  Add a porting type "device_t" to usb_port.h.
Admin:
  Submission for USB bounty.

Version 1.23. Tagged as 'USBDriver-1_23'
@
text
@/*      $NetBSD: ehcivar.h,v 1.17 2005/01/11 07:45:34 imp Exp $ */

/*
 * Copyright (c) 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef USBHAL
/* We have little memory available in the HAL, so allocate in smaller chunks */
#define EHCI_SMALL_PAGE_SIZE 512
#else
#define EHCI_SMALL_PAGE_SIZE EHCI_PAGE_SIZE
#endif
#ifdef __riscos
/* EHCI could use SyncLib for mutex, but for now, just wing it */
#define mutex_init(a,b,c)
#define mutex_destroy(a)
#define mutex_enter(a)
#define mutex_exit(a)
typedef struct { int a; } kmutex_t;
#endif

typedef struct ehci_soft_qtd {
	ehci_qtd_t qtd;
	struct ehci_soft_qtd *nextqtd; /* mirrors nextqtd in TD */
	ehci_physaddr_t physaddr;
	usb_dma_t dma;                  /* qTD's DMA infos */
	int offs;                       /* qTD's offset in usb_dma_t */
	usbd_xfer_handle xfer;
	LIST_ENTRY(ehci_soft_qtd) hnext;
	u_int16_t len;
} ehci_soft_qtd_t;
#define EHCI_SQTD_SIZE ((sizeof (struct ehci_soft_qtd) + EHCI_QTD_ALIGN - 1) / EHCI_QTD_ALIGN * EHCI_QTD_ALIGN)
#define EHCI_SQTD_CHUNK (EHCI_SMALL_PAGE_SIZE / EHCI_SQTD_SIZE)

typedef struct ehci_soft_qh {
	ehci_qh_t qh;
	struct ehci_soft_qh *next;
	struct ehci_soft_qtd *sqtd;
	ehci_physaddr_t physaddr;
	usb_dma_t dma;                  /* QH's DMA infos */
	int offs;                       /* QH's offset in usb_dma_t */
	int islot;
} ehci_soft_qh_t;
#define EHCI_SQH_SIZE ((sizeof (struct ehci_soft_qh) + EHCI_QH_ALIGN - 1) / EHCI_QH_ALIGN * EHCI_QH_ALIGN)
#define EHCI_SQH_CHUNK (EHCI_SMALL_PAGE_SIZE / EHCI_SQH_SIZE)

typedef struct ehci_soft_itd {
	ehci_itd_t itd;
	union {
		struct {
			/* soft_itds links in a periodic frame*/
			struct ehci_soft_itd *next;
			struct ehci_soft_itd *prev;
		} frame_list;
		/* circular list of free itds */
		LIST_ENTRY(ehci_soft_itd) free_list;
	} u;
	struct ehci_soft_itd *xfer_next; /* Next soft_itd in xfer */
	ehci_physaddr_t physaddr;
	usb_dma_t dma;
	int offs;
	int slot;
	struct timeval t; /* store free time */
} ehci_soft_itd_t;
#define EHCI_ITD_SIZE ((sizeof(struct ehci_soft_itd) + EHCI_QH_ALIGN - 1) / EHCI_ITD_ALIGN * EHCI_ITD_ALIGN)
#define EHCI_ITD_CHUNK (EHCI_SMALL_PAGE_SIZE / EHCI_ITD_SIZE)

struct ehci_xfer {
	struct usbd_xfer xfer;
	struct usb_task	abort_task;
	TAILQ_ENTRY(ehci_xfer) inext; /* list of active xfers */
	ehci_soft_qtd_t *sqtdstart;
	ehci_soft_qtd_t *sqtdend;
	ehci_soft_itd_t *itdstart;
	ehci_soft_itd_t *itdend;
	u_int isoc_len;
	int isdone;	/* used only when DIAGNOSTIC is defined */
};
#define EXFER(xfer) ((struct ehci_xfer *)(xfer))

/* Information about an entry in the interrupt list. */
struct ehci_soft_islot {
	ehci_soft_qh_t *sqh;	/* Queue Head. */
};

#define EHCI_FRAMELIST_MAXCOUNT	1024
#ifdef USBHAL
#define EHCI_IPOLLRATES		3 /* Full poll list uses too much memory for HAL. See if this works. */
#else
#define EHCI_IPOLLRATES		8 /* Poll rates (1ms, 2, 4, 8 .. 128) */
#endif
#define EHCI_INTRQHS		((1 << EHCI_IPOLLRATES) - 1)
#define EHCI_MAX_POLLRATE	(1 << (EHCI_IPOLLRATES - 1))
#define EHCI_IQHIDX(lev, pos) \
	((((pos) & ((1 << (lev)) - 1)) | (1 << (lev))) - 1)
#define EHCI_ILEV_IVAL(lev)	(1 << (lev))


#define EHCI_HASH_SIZE 128
#define EHCI_COMPANION_MAX 8

#define EHCI_FREE_LIST_INTERVAL 100

typedef struct ehci_softc {
	struct usbd_bus sc_bus;		/* base device */
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	bus_size_t sc_size;
	u_int sc_offs;			/* offset to operational regs */
	int sc_flags;			/* misc flags */
#define EHCIF_DROPPED_INTR_WORKAROUND	0x01
#define EHCIF_ETTF			0x02 /* Emb. Transaction Translater func. */

	char sc_vendor[32];		/* vendor string for root hub */
	int sc_id_vendor;		/* vendor ID for root hub */

	u_int32_t sc_cmd;		/* shadow of cmd reg during suspend */

	u_int sc_ncomp;
	u_int sc_npcomp;
	struct usbd_bus *sc_comps[EHCI_COMPANION_MAX];

	usb_dma_t sc_fldma;
	ehci_link_t *sc_flist;
	u_int sc_flsize;
	u_int sc_rand;			/* XXX need proper intr scheduling */

	struct ehci_soft_islot sc_islots[EHCI_INTRQHS];

	/* jcmm - an array matching sc_flist, but with software pointers,
	 * not hardware address pointers
	 */
	struct ehci_soft_itd **sc_softitds;

	TAILQ_HEAD(, ehci_xfer) sc_intrhead;
	kmutex_t sc_intrhead_lock;

	ehci_soft_qh_t *sc_freeqhs;
	ehci_soft_qtd_t *sc_freeqtds;
	LIST_HEAD(sc_freeitds, ehci_soft_itd) sc_freeitds;

	int sc_noport;
	u_int8_t sc_hasppc;		/* has Port Power Control */
	u_int8_t sc_addr;		/* device address */
	u_int8_t sc_conf;		/* device configuration */
	usbd_xfer_handle sc_intrxfer;
	char sc_isreset[EHCI_MAX_PORTS];
#ifdef USB_USE_SOFTINTR
	char sc_softwake;
#endif /* USB_USE_SOFTINTR */

	u_int32_t sc_eintrs;
	ehci_soft_qh_t *sc_async_head;

	SIMPLEQ_HEAD(, usbd_xfer) sc_free_xfers; /* free xfers */

	kmutex_t sc_doorbell_lock;

	struct callout sc_tmo_intrlist;

	device_ptr_t sc_child; /* /dev/usb# device */
	char sc_dying;
#ifdef __NetBSD__
	struct usb_dma_reserve sc_dma_reserve;
#endif

#ifdef __riscos
	int sc_irqdevno; /* IRQ device number */
#endif
} ehci_softc_t;

#define EREAD1(sc, a) bus_space_read_1((sc)->iot, (sc)->ioh, (a))
#define EREAD2(sc, a) bus_space_read_2((sc)->iot, (sc)->ioh, (a))
#define EREAD4(sc, a) bus_space_read_4((sc)->iot, (sc)->ioh, (a))
#define EWRITE1(sc, a, x) bus_space_write_1((sc)->iot, (sc)->ioh, (a), (x))
#define EWRITE2(sc, a, x) bus_space_write_2((sc)->iot, (sc)->ioh, (a), (x))
#define EWRITE4(sc, a, x) bus_space_write_4((sc)->iot, (sc)->ioh, (a), (x))
#define EOREAD1(sc, a) bus_space_read_1((sc)->iot, (sc)->ioh, (sc)->sc_offs+(a))
#define EOREAD2(sc, a) bus_space_read_2((sc)->iot, (sc)->ioh, (sc)->sc_offs+(a))
#define EOREAD4(sc, a) bus_space_read_4((sc)->iot, (sc)->ioh, (sc)->sc_offs+(a))
#define EOWRITE1(sc, a, x) bus_space_write_1((sc)->iot, (sc)->ioh, (sc)->sc_offs+(a), (x))
#define EOWRITE2(sc, a, x) bus_space_write_2((sc)->iot, (sc)->ioh, (sc)->sc_offs+(a), (x))
#define EOWRITE4(sc, a, x) bus_space_write_4((sc)->iot, (sc)->ioh, (sc)->sc_offs+(a), (x))

usbd_status	ehci_init(ehci_softc_t *);
int		ehci_intr(void *);
int		ehci_detach(ehci_softc_t *, int);
int		ehci_activate(device_ptr_t, enum devact);
#define MS_TO_TICKS(ms) ((ms) * hz / 1000)
#ifdef __riscos
extern void		ehci_softintr(void *);
extern bool		ehci_shutdown(void *);
#endif
@


1.11
log
@Revert accidental commits
Admin:
  These changes are currently subject to rework via the normal submissions channel.
@
text
@@


1.10
log
@  Fixes for Isochronous data transfer
Detail:
Frontend
========

NetBSD.build.c.usbmodule
	frontend isochronous changes
	forces reads to always be multiple of maxpacket
NetBSD.dev.usb.c.usb_subr
	datatoggle fix
	panic fix
NetBSD.dev.usb.c.usbdi
	usbd_transfer changed so that bufrem is passed the xfer pointer instead of the buffer pointer
	fixed missing braces in usbd_clear_endpoint_stall

EHCI
====

The HS (USB2) isochronous as been rewritten and isochronous split transactions - FS (USB1) over a HS Connection - has been added

NetBSD.dev.usb.c.ehci
NetBSD.dev.usb.h.ehcireg
NetBSD.dev.usb.h.ehcivar

OHCI
====

Changes to the NetBSD backend to get isochronous transfers working on a OHCI device. While it did have isochronous support it wasn't working properly.

NetBSD.dev.usb.c.ohci

Admin:
  Submitted by Colin Granville
Tested in iMx6

Version 1.10. Tagged as 'NetBSD-1_10'
@
text
@d80 1
a80 4
	union {
		ehci_itd_t itd;
		ehci_sitd_t sitd;
	}td;
@


1.9
log
@Update to use rationalised power and overcurrent API
OHCIDriver (only) had sketchy support for a HAL based scheme for controlling the port power and monitor overcurrent. However the implementation was limited to supporting the single port required for an embedded product (aka Rhenium in the CVS history). The change makes it follow a model much more akin to the HAL_TimerDevice/HAL_TimerIRQStatus/HAL_TimerIRQClear set of functions.
Version:
  Bumped OHCIDriver and USBDriver version numbers.
ohcimodule.c:
  Use some defines from OsBytes.h.
  Group the debug variables within the OHCI_DEBUG define so they go away in the release case.
  Allow for up to 15 ports to be controlled via the revised HAL API, and pass something other than a hardwired controller of 0 when controlling/monitoring power.
  Enumerate the device numbers for overcurrent monitoring on startup.
  Deal with the possibility of one (or more) of the device numbers being shared interrupts.
  Squash a few trivial compiler warnings.
ohcimodhead.cmhg:
  rename the handler/entry to reflect their use for overcurrent
ohci.c:
  Allow for up to 15 ports to be controlled by passing in the port index where needed.
usb_subr.c/usbdivar.h:
  Remove a RISC OS-ism in datatoggle, to converge with NetBSD a bit.
ehcivar.h/usb_port.h:
  Relocate the overrides for mutex_ functions here since this is the only controller using them. Previously when in "usb_port.h" they would indirectly get dragged in ia the nested include in "usb.h". The could in fact now be implemented using SyncLib, an exercise left to the reader.
usb.h
  Merge some of the device classes and other allocations from NetBSD.

While it's not been possible to test the revised API, due to not having sight of the original platform on which it was implemented, none of the actively maintained HALs currently use the HAL based power and overcurrent scheme anyway, so the new code never gets called. In that respect, it's no more broken then the previous single port-single controller version.

Version 0.89. Tagged as 'NetBSD-0_89'
@
text
@d80 4
a83 1
	ehci_itd_t itd;
@


1.8
log
@Merge in some EHCI fixes from NetBSD. Other minor changes.
Detail:
  build/Version - Bump EHCIDriver version number
  build/c/ehcihal, build/c/ehcimodule, build/c/ohcimodule - Use the HAL USB controller type & flag definitions from Hdr:HALEntries instead of using magic numbers
  build/c/ehcimodule - Avoid double-read of hardware register in debug version of bus_space_read_4(); ensures that we report the value that's actually returned to the driver
  dev/usb/c/ehci - Merge in the following revisions from NetBSD:
  - 1.172, 1.173, 1.178, 1.193 - Support for controllers with embedded transaction translators
  - 1.174 - alloc_sqtd_chain() fix for short packets that end on page boundaries
  - 1.179 - ehci_set_qh_qtd() fixed to terminate alternate next qTD pointer with EHCI_NULL, not 0
  dev/usb/h/ehcireg - Updated to latest NetBSD version (1.34)
  dev/usb/h/ehcivar - Merge in revision 1.38 (ETTF support)
Admin:
  Tested on BB-xM


Version 0.88. Tagged as 'NetBSD-0_88'
@
text
@d45 8
@


1.7
log
@Add the ability to build the USB drivers as HAL-compatible static libraries
Detail:
  build/Makefile, build/OBJEHCIDriver, build/OBJOHCIDriver, build/OBJUSBDriver - Modified makefiles to build the HAL libs during the export libs phase
  build/!MkHAL,fd7 - Handy script for building the HAL libs
  build/Hdr/usbhal - Header containing definitions for the assembler code. Also gets exported so that HALs know how much workspace to reserve.
  build/c/usbhal - HAL version of usbmodule.c & port.c. Also contains the keyboard scan code, adapted from the code in the Tungsten HAL.
  build/s/porthal - Assembler versions of some port.c routines that were easier to do in assembler than C
  build/s/halheap - OS_Heap code that's been adapted for use in the HAL. Could easily be changed into a standalone library instead of being part of the HAL USB libs. Supports memory-efficient allocation of aligned blocks.
  build/c/ehcihal - HAL version of ehcimodule.c. Currently only supports EHCI controllers exposed via HAL_USBControllerInfo (i.e. no PCI support)
  build/c/ehcimodule, build/c/ohcimodule, build/c/port - Moved riscos_irq_clear into port.c. Removed unused microtime() function.
  build/c/usbmouse - Strip out some debug-related code in non-debug builds
  build/Version - Updated version numbers
  dev/usb/c/ehci, dev/usb/h/ehcivar - Adapted to add support for the HAL build. Apart from the base changes, the code has also been tweaked to significantly reduce the amount of memory used at runtime by the HAL version of the driver.
  dev/usb/c/hid, dev/usb/c/uhub, dev/usb/c/usb, dev/usb/c/usb_quirks, dev/usb/c/usb_subr, dev/usb/c/usbdi, dev/usb/c/usbdi_util, dev/usb/c/usbroothub_subr - Changes to support HAL builds. Mainly disabling bits that won't work in the HAL or disabling bits for RISC OS in general if they weren't being used in the first place.
  dev/usb/c/ohci, dev/usb/h/ohcivar - Basic changes to support HAL builds. However HAL OHCI support is still incomplete.
  dev/usb/h/usb_port - Added support for the HAL build. Also tweaked logprintf definition to get rid of logprintf calls entirely in non-debug builds.
  dev/usb/h/usbdivar - Added support for the HAL build.
  dev/usb/h/usbhal - New header used by the HAL build. Gets included by every C file to ensure the compiler doesn't use sb, and contains structs/macros to allow access to the shared workspace.
Admin:
  HAL & non-HAL builds tested on rev C2 BB, rev A2 BB-xM, rev C1 TouchBook.
  Non-HAL builds tested with Iyonix ROM softload.
  Needs latest Kernel source for OSEntries.h export.


Version 0.59. Tagged as 'NetBSD-0_59'
@
text
@d136 1
@


1.6
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@d39 7
d57 1
a57 1
#define EHCI_SQTD_CHUNK (EHCI_PAGE_SIZE / EHCI_SQTD_SIZE)
d69 1
a69 1
#define EHCI_SQH_CHUNK (EHCI_PAGE_SIZE / EHCI_SQH_SIZE)
d90 1
a90 1
#define EHCI_ITD_CHUNK (EHCI_PAGE_SIZE / EHCI_ITD_SIZE)
d111 3
d115 1
d189 4
@


1.5
log
@	Update of NetBSD elements (except c.ohci) to track NetBSD current
	from mid April 2005.
	Inclusion of Mods to c.ehci (from Dan) to correctly handle low
	speed interrupt devices beyond USB2 hubs (i.e. keyboards and mice).
	Mod to EHCI resetting in service call handler to better cope with
	USBDriver being restarted 'underneath' it.
Detail:
Admin:
	Castle, Dan Ellis, NetBSD added IP. Tested at Castle. Will be
	beta tested at this revision level before full release.


Version 0.39. Tagged as 'NetBSD-0_39'
@
text
@d43 2
d57 3
a59 1
        int islot;
d64 21
d88 1
a88 1
	LIST_ENTRY(ehci_xfer) inext; /* list of active xfers */
d91 4
a94 3
#ifdef DIAGNOSTIC
	int isdone;
#endif
d100 1
a100 1
	ehci_soft_qh_t *sqh;		/* Queue Head. */
a102 1

d104 1
a104 1
#define EHCI_IPOLLRATES         8 /* Poll rates (1ms, 2, 4, 8 .. 128) */
d106 3
a108 2
#define EHCI_IQHIDX(lev, pos)	\
    ((((pos) & ((1 << (lev)) - 1)) | (1 << (lev))) - 1)
d111 1
d115 2
d123 2
d126 1
a126 1
	char sc_vendor[16];		/* vendor string for root hub */
a129 2
	void *sc_powerhook;		/* cookie from power hook */
	void *sc_shutdownhook;		/* cookie from shutdown hook */
d138 1
a138 1
        u_int sc_rand;                  /* XXX need proper intr scheduling */
d142 7
a148 1
	LIST_HEAD(, ehci_xfer) sc_intrhead;
d152 1
d155 1
d159 1
a159 1
	char sc_isreset;
d169 1
a169 1
	struct lock sc_doorbell_lock;
d171 1
a171 1
	usb_callout_t sc_tmo_pcd;
d173 1
a173 3
#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(__riscos)
	device_ptr_t sc_child;		/* /dev/usb# device */
#endif
d176 1
a176 1
        struct usb_dma_reserve sc_dma_reserve;
d200 1
a200 1
extern void             ehci_shutdown(void *);
a201 1

@


1.4
log
@        Stack brought up to date with NetBSD sources as at 20050121.
        USB2 further debugged.
Detail:
        Check in prior to second beta release. Improvements also to
        softloading of replacement modules.
Admin:
        Checked with JB .. further crosschecking is still needed for rhenium.
        Castle/D Ellis added ip from NetBSD sources


Version 0.33. Tagged as 'NetBSD-0_33'
@
text
@d123 1
a123 1
//#ifdef USB_USE_SOFTINTR
d125 1
a125 1
//#endif /* USB_USE_SOFTINTR */
d136 1
d138 1
a138 1

@


1.3
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d1 1
a1 1
/*      $NetBSD: ehcivar.h,v 1.15 2004/10/22 10:38:17 augustss Exp $ */
a87 2
#define EHCI_SCFLG_DONEINIT	0x0001	/* ehci_init() has been called. */

d139 3
@


1.2
log
@       change to OHCIModule to pay heed to number of OHCI i/f reported
       by HAL (in Rhenium).. various other small adjustments to improve
       softloadability, both in OHCI and EHCI drivers.
Detail:
Admin:
    tested on iyonix and on rhenium
    castle added IP


Version 0.30. Tagged as 'NetBSD-0_30'
@
text
@d1 1
a1 1
/*	$NetBSD: ehcivar.h,v 1.12 2001/12/31 12:16:57 augustss Exp $	*/
d55 1
d72 12
d88 2
d100 1
d109 1
d111 3
d125 1
d127 1
d158 3
d162 2
a163 2
void		ehci_softintr(void *);
void		ehci_shutdown(void *v);
d165 1
a165 2
int		ehci_detach(ehci_softc_t *, int);
int		ehci_activate(device_ptr_t, enum devact);
@


1.1
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d138 1
@

