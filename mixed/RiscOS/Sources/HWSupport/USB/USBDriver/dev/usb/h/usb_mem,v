head	1.5;
access;
symbols
	USBDriver-1_29:1.5
	USBDriver-1_28:1.5
	USBDriver-1_27:1.5
	USBDriver-1_26:1.5
	USBDriver-1_25:1.5
	USBDriver-1_24:1.5
	USBDriver-1_23:1.5
	USBDriver-1_22:1.5
	USBDriver-1_21:1.5
	USBDriver-1_20:1.5
	USBDriver-1_19:1.5
	NetBSD-1_19:1.5
	NetBSD-1_18:1.5
	NetBSD-1_17:1.5
	NetBSD-1_16:1.5
	NetBSD-1_15:1.5
	NetBSD-1_14:1.5
	NetBSD-1_13:1.5
	NetBSD-1_12:1.5
	NetBSD-1_09-1:1.5
	NetBSD-1_11:1.5
	NetBSD-1_10:1.5
	NetBSD-1_09:1.5
	NetBSD-1_08:1.5
	NetBSD-1_07:1.5
	NetBSD-1_06:1.5
	NetBSD-1_05:1.5
	NetBSD-1_04:1.5
	NetBSD-1_03:1.5
	NetBSD-1_02:1.5
	NetBSD-1_01:1.5
	NetBSD-1_00:1.5
	NetBSD-0_99:1.5
	NetBSD-0_98:1.5
	NetBSD-0_97:1.5
	NetBSD-0_96:1.5
	NetBSD-0_95:1.5
	NetBSD-0_94:1.5
	NetBSD-0_93:1.5
	NetBSD-0_92:1.5
	NetBSD-0_91:1.5
	NetBSD-0_90:1.5
	NetBSD-0_89:1.5
	NetBSD-0_88:1.5
	NetBSD-0_87:1.5
	NetBSD-0_86:1.5
	NetBSD-0_85:1.5
	NetBSD-0_84:1.5
	NetBSD-0_83:1.5
	NetBSD-0_82:1.5
	NetBSD-0_81:1.5
	NetBSD-0_80:1.5
	NetBSD-0_79:1.5
	NetBSD-0_78:1.5
	NetBSD-0_77:1.5
	NetBSD-0_76:1.5
	NetBSD-0_75:1.5
	NetBSD-0_74:1.5
	NetBSD-0_73:1.5
	NetBSD-0_72:1.5
	NetBSD-0_71:1.5
	NetBSD-0_70:1.5
	NetBSD-0_69:1.5
	NetBSD-0_68:1.5
	NetBSD-0_67:1.5
	NetBSD-0_66:1.5
	NetBSD-0_65:1.5
	NetBSD-0_64:1.5
	NetBSD-0_63:1.5
	NetBSD-0_62:1.5
	NetBSD-0_61:1.5
	NetBSD-0_60:1.5
	NetBSD-0_59:1.5
	NetBSD-0_58:1.5
	NetBSD-0_57:1.5
	NetBSD-0_56:1.5
	NetBSD-0_55:1.5
	NetBSD-0_54:1.5
	NetBSD-0_53:1.5
	NetBSD-0_52:1.5
	NetBSD-0_51:1.4
	NetBSD-0_50:1.4
	NetBSD-0_49:1.4
	NetBSD-0_48:1.4
	NetBSD-0_47:1.4
	NetBSD-0_46:1.4
	NetBSD-0_45:1.4
	NetBSD-0_44:1.4
	NetBSD-0_43:1.4
	NetBSD-0_42:1.4
	NetBSD-0_41:1.4
	NetBSD-0_40:1.4
	NetBSD-0_39:1.4
	NetBSD-0_38:1.4
	NetBSD-0_37:1.4
	NetBSD-0_36:1.4
	NetBSD-0_35:1.4
	NetBSD-0_34:1.4
	NetBSD-0_33:1.4
	NetBSD-0_32:1.3
	NetBSD-0_31:1.3
	NetBSD-0_30:1.2
	NetBSD-0_29:1.2
	RO_5_07:1.2
	NetBSD-0_28:1.2
	NetBSD-0_27:1.2
	NetBSD-0_26:1.2
	NetBSD-0_25:1.2
	NetBSD-0_24:1.2
	NetBSD-0_23:1.2
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.2
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.5
date	2010.07.21.23.57.21;	author jlee;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.21.22.30.19;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.30.02.34.21;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.21.20.49.20;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.18;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@/*	$NetBSD: usb_mem.h,v 1.27 2008/06/28 17:42:53 bouyer Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/usb_mem.h,v 1.9 1999/11/17 22:33:47 n_hibma Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#if defined(__NetBSD__) || defined(__OpenBSD__)
typedef struct usb_dma_block {
	bus_dma_tag_t tag;
	bus_dmamap_t map;
        void *kaddr;
        bus_dma_segment_t segs[1];
        int nsegs;
        size_t size;
        size_t align;
	int flags;
#define USB_DMA_FULLBLOCK	0x0001
#define USB_DMA_RESERVE		0x0002
	LIST_ENTRY(usb_dma_block) next;
} usb_dma_block_t;

#define DMAADDR(dma, o) ((dma)->block->map->dm_segs[0].ds_addr + (dma)->offs + (o))
#define KERNADDR(dma, o) \
	((void *)((char *)(dma)->block->kaddr + (dma)->offs + (o)))

usbd_status	usb_allocmem(usbd_bus_handle,size_t,size_t, usb_dma_t *);
void		usb_freemem(usbd_bus_handle, usb_dma_t *);
void		usb_syncmem(usb_dma_t *, bus_addr_t, bus_size_t, int ops);

#ifdef __NetBSD__
struct extent;

struct usb_dma_reserve {
	bus_dma_tag_t dtag;
	bus_dmamap_t map;
	void *vaddr;
	bus_addr_t paddr;
	size_t size;
	struct extent *extent;
	device_t dv;
};

#if defined(_KERNEL_OPT)
#include "opt_usb_mem_reserve.h"
#endif

#ifndef USB_MEM_RESERVE
#define USB_MEM_RESERVE (256 * 1024)
#endif

usbd_status usb_reserve_allocm(struct usb_dma_reserve *, usb_dma_t *,
				u_int32_t);
int usb_setup_reserve(device_t, struct usb_dma_reserve *, bus_dma_tag_t, size_t);
void usb_reserve_freem(struct usb_dma_reserve *, usb_dma_t *);

#endif

#elif defined(__FreeBSD__)

/*
 * FreeBSD does not have special functions for DMA memory, so let's keep it
 * simple for now.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/queue.h>
#include <sys/proc.h>
#include <sys/bio.h>
#include <sys/buf.h>
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <vm/vm.h>
#include <vm/pmap.h>

#include <machine/pmap.h>       /* for vtophys */

#define		usb_allocmem(t,s,a,p)	(*(p) = malloc(s, M_USB, M_NOWAIT), (*(p) == NULL? USBD_NOMEM: USBD_NORMAL_COMPLETION))
#define		usb_freemem(t,p)	(free(*(p), M_USB))

#ifdef __alpha__
#define DMAADDR(dma, o)	(alpha_XXX_dmamap((vm_offset_t) *(dma) + (o)))
#else
#define DMAADDR(dma, o)	(vtophys(*(dma) + (o)))
#endif
#define KERNADDR(dma, o)	((void *) ((char *)*(dma) + (o)))
#endif /* __FreeBSD__ */

@


1.4
log
@        Stack brought up to date with NetBSD sources as at 20050121.
        USB2 further debugged.
Detail:
        Check in prior to second beta release. Improvements also to
        softloading of replacement modules.
Admin:
        Checked with JB .. further crosschecking is still needed for rhenium.
        Castle/D Ellis added ip from NetBSD sources


Version 0.33. Tagged as 'NetBSD-0_33'
@
text
@d1 1
a1 1
/*      $NetBSD: usb_mem.h,v 1.22 2004/12/21 19:49:56 fvdl Exp $        */
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d38 1
a38 1
        caddr_t kaddr;
d43 3
a45 3
        int flags;
#define USB_DMA_FULLBLOCK       0x0001
#define USB_DMA_RESERVE         0x0002
d51 1
a51 1
	((void *)((char *)((dma)->block->kaddr + (dma)->offs) + (o)))
d55 1
d61 7
a67 7
        bus_dma_tag_t dtag;
        bus_dmamap_t map;
        caddr_t vaddr;
        bus_addr_t paddr;
        size_t size;
        struct extent *extent;
        void *softc;
d79 2
a80 2
                                u_int32_t);
int usb_setup_reserve(void *, struct usb_dma_reserve *, bus_dma_tag_t, size_t);
d88 1
a88 1
 * FreeBSD does not have special functions for dma memory, so let's keep it
@


1.3
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d1 1
a1 1
/*      $NetBSD: usb_mem.h,v 1.20 2003/05/03 18:11:42 wiz Exp $ */
d50 3
a52 1
	int fullblock;
d63 28
d106 2
a107 2
//#include <vm/vm.h>
//#include <vm/pmap.h>
d109 1
a109 1
//#include <machine/pmap.h>       /* for vtophys */
@


1.2
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d1 1
a1 1
/*	$NetBSD: usb_mem.h,v 1.19 2002/07/11 21:14:34 augustss Exp $	*/
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/*	$NetBSD: usb_mem.h,v 1.14 2000/06/01 14:29:01 augustss Exp $	*/
d40 1
d54 3
a56 2
#define DMAADDR(dma) ((dma)->block->map->dm_segs[0].ds_addr + (dma)->offs)
#define KERNADDR(dma) ((void *)((dma)->block->kaddr + (dma)->offs))
d72 1
d85 1
a85 1
#define DMAADDR(dma)	(alpha_XXX_dmamap((vm_offset_t) *(dma)))
d87 1
a87 3
#define DMAADDR(dma)	(vtophys(*(dma)))
#endif
#define KERNADDR(dma)	((void *) *(dma))
d89 2
@

