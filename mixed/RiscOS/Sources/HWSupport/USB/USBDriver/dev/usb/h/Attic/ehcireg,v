head	1.10;
access;
symbols
	USBDriver-1_22:1.9
	USBDriver-1_21:1.9
	USBDriver-1_20:1.9
	USBDriver-1_19:1.9
	NetBSD-1_19:1.9
	NetBSD-1_18:1.9
	NetBSD-1_17:1.9
	NetBSD-1_16:1.9
	NetBSD-1_15:1.9
	NetBSD-1_14:1.9
	NetBSD-1_13:1.9
	NetBSD-1_12:1.9
	NetBSD-1_09-1:1.9
	NetBSD-1_11:1.8
	NetBSD-1_10:1.8
	NetBSD-1_09:1.7
	NetBSD-1_08:1.7
	NetBSD-1_07:1.7
	NetBSD-1_06:1.7
	NetBSD-1_05:1.7
	NetBSD-1_04:1.7
	NetBSD-1_03:1.7
	NetBSD-1_02:1.7
	NetBSD-1_01:1.7
	NetBSD-1_00:1.7
	NetBSD-0_99:1.7
	NetBSD-0_98:1.7
	NetBSD-0_97:1.7
	NetBSD-0_96:1.7
	NetBSD-0_95:1.7
	NetBSD-0_94:1.7
	NetBSD-0_93:1.7
	NetBSD-0_92:1.7
	NetBSD-0_91:1.7
	NetBSD-0_90:1.7
	NetBSD-0_89:1.7
	NetBSD-0_88:1.7
	NetBSD-0_87:1.6
	NetBSD-0_86:1.6
	NetBSD-0_85:1.6
	NetBSD-0_84:1.6
	NetBSD-0_83:1.6
	NetBSD-0_82:1.6
	NetBSD-0_81:1.6
	NetBSD-0_80:1.6
	NetBSD-0_79:1.6
	NetBSD-0_78:1.6
	NetBSD-0_77:1.6
	NetBSD-0_76:1.6
	NetBSD-0_75:1.6
	NetBSD-0_74:1.6
	NetBSD-0_73:1.6
	NetBSD-0_72:1.6
	NetBSD-0_71:1.6
	NetBSD-0_70:1.6
	NetBSD-0_69:1.6
	NetBSD-0_68:1.6
	NetBSD-0_67:1.6
	NetBSD-0_66:1.6
	NetBSD-0_65:1.6
	NetBSD-0_64:1.6
	NetBSD-0_63:1.6
	NetBSD-0_62:1.6
	NetBSD-0_61:1.6
	NetBSD-0_60:1.6
	NetBSD-0_59:1.6
	NetBSD-0_58:1.6
	NetBSD-0_57:1.6
	NetBSD-0_56:1.6
	NetBSD-0_55:1.6
	NetBSD-0_54:1.6
	NetBSD-0_53:1.6
	NetBSD-0_52:1.6
	NetBSD-0_51:1.5
	NetBSD-0_50:1.5
	NetBSD-0_49:1.5
	NetBSD-0_48:1.5
	NetBSD-0_47:1.5
	NetBSD-0_46:1.5
	NetBSD-0_45:1.5
	NetBSD-0_44:1.5
	NetBSD-0_43:1.5
	NetBSD-0_42:1.5
	NetBSD-0_41:1.5
	NetBSD-0_40:1.5
	NetBSD-0_39:1.5
	NetBSD-0_38:1.4
	NetBSD-0_37:1.4
	NetBSD-0_36:1.4
	NetBSD-0_35:1.4
	NetBSD-0_34:1.4
	NetBSD-0_33:1.4
	NetBSD-0_32:1.4
	NetBSD-0_31:1.4
	NetBSD-0_30:1.3
	NetBSD-0_29:1.3
	RO_5_07:1.3
	NetBSD-0_28:1.3
	NetBSD-0_27:1.2
	NetBSD-0_26:1.2
	NetBSD-0_25:1.1
	NetBSD-0_24:1.1
	NetBSD-0_23:1.1
	NetBSD-0_22:1.1;
locks; strict;
comment	@# @;


1.10
date	2017.10.07.09.08.50;	author rool;	state dead;
branches;
next	1.9;
commitid	Qzw5gnXY6CB2g6aA;

1.9
date	2016.03.04.20.54.45;	author rool;	state Exp;
branches;
next	1.8;
commitid	MvG9A9da0K4NQmXy;

1.8
date	2016.03.04.01.30.15;	author jballance;	state Exp;
branches;
next	1.7;
commitid	NFICmxi3aahBqgXy;

1.7
date	2014.08.29.19.26.21;	author jlee;	state Exp;
branches;
next	1.6;
commitid	f6ArfsGGibMS9iOx;

1.6
date	2010.07.21.23.57.21;	author jlee;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.24.23.13.54;	author jballance;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.30.02.34.21;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.12.14.47.42;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.30.14.50.37;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.21.20.49.20;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Clear up duplicate/unused OHCI/EHCI source files
Detail:
  Remove the (now) unused sources from when this component produced multiple targets. See Controllers/OHCIDriver & Controllers/EHCIDriver for the live copies.
  Remove unset USBHAL defines.
  Simplify the Makefile and !Mk* scripts.
  No longer export usbroothub_subr.h.
  Add a porting type "device_t" to usb_port.h.
Admin:
  Submission for USB bounty.

Version 1.23. Tagged as 'USBDriver-1_23'
@
text
@/*	$NetBSD: ehcireg.h,v 1.34 2012/11/04 12:01:55 matt Exp $	*/

/*
 * Copyright (c) 2001, 2004 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * The EHCI 0.96 spec can be found at
 * http://developer.intel.com/technology/usb/download/ehci-r096.pdf
 * and the USB 2.0 spec at
 * http://www.usb.org/developers/data/usb_20.zip
 */

#ifndef _DEV_PCI_EHCIREG_H_
#define _DEV_PCI_EHCIREG_H_

/*** PCI config registers ***/

#define PCI_CBMEM		0x10	/* configuration base MEM */

#define PCI_INTERFACE_EHCI	0x20

#define PCI_USBREV		0x60	/* RO USB protocol revision */
#define  PCI_USBREV_MASK	0xff
#define  PCI_USBREV_PRE_1_0	0x00
#define  PCI_USBREV_1_0		0x10
#define  PCI_USBREV_1_1		0x11
#define  PCI_USBREV_2_0		0x20

#define PCI_EHCI_FLADJ		0x61	/*RW Frame len adj, SOF=59488+6*fladj */

#define PCI_EHCI_PORTWAKECAP	0x62	/* RW Port wake caps (opt)  */

/* Regs at EECP + offset */
#define PCI_EHCI_USBLEGSUP	0x00
#define  EHCI_LEG_HC_OS_OWNED		0x01000000
#define  EHCI_LEG_HC_BIOS_OWNED		0x00010000
#define PCI_EHCI_USBLEGCTLSTS	0x04
#define  EHCI_LEG_EXT_SMI_BAR		0x80000000
#define  EHCI_LEG_EXT_SMI_PCICMD	0x40000000
#define  EHCI_LEG_EXT_SMI_OS_CHANGE	0x20000000

#define EHCI_CAP_GET_ID(cap) ((cap) & 0xff)
#define EHCI_CAP_GET_NEXT(cap) (((cap) >> 8) & 0xff)
#define EHCI_CAP_ID_LEGACY 1

/*** EHCI capability registers ***/

#define EHCI_CAPLENGTH		0x00	/*RO Capability register length field */
/* reserved			0x01 */
#define EHCI_HCIVERSION		0x02	/* RO Interface version number */

#define EHCI_HCSPARAMS		0x04	/* RO Structural parameters */
#define  EHCI_HCS_N_TT(x)	(((x) >> 20) & 0xf) /* # of xacts xlater ETTF */
#define  EHCI_HCS_N_PTT(x)	(((x) >> 20) & 0xf) /* ports per xlater ETTF */
#define  EHCI_HCS_DEBUGPORT(x)	(((x) >> 20) & 0xf)
#define  EHCI_HCS_P_INDICATOR(x) ((x) & 0x10000)
#define  EHCI_HCS_N_CC(x)	(((x) >> 12) & 0xf) /* # of companion ctlrs */
#define  EHCI_HCS_N_PCC(x)	(((x) >> 8) & 0xf) /* # of ports per comp. */
#define  EHCI_HCS_PPC(x)	((x) & 0x10) /* port power control */
#define  EHCI_HCS_N_PORTS(x)	((x) & 0xf) /* # of ports */

#define EHCI_HCCPARAMS		0x08	/* RO Capability parameters */
#define  EHCI_HCC_EECP(x)	(((x) >> 8) & 0xff) /* extended ports caps */
#define  EHCI_HCC_IST(x)	(((x) >> 4) & 0xf) /* isoc sched threshold */
#define  EHCI_HCC_ASPC(x)	((x) & 0x4) /* async sched park cap */
#define  EHCI_HCC_PFLF(x)	((x) & 0x2) /* prog frame list flag */
#define  EHCI_HCC_64BIT(x)	((x) & 0x1) /* 64 bit address cap */

#define EHCI_HCSP_PORTROUTE	0x0c	/*RO Companion port route description */

/* EHCI operational registers.  Offset given by EHCI_CAPLENGTH register */
#define EHCI_USBCMD		0x00	/* RO, RW, WO Command register */
#define  EHCI_CMD_ITC_M		0x00ff0000 /* RW interrupt threshold ctrl */
#define   EHCI_CMD_ITC_1	0x00010000
#define   EHCI_CMD_ITC_2	0x00020000
#define   EHCI_CMD_ITC_4	0x00040000
#define   EHCI_CMD_ITC_8	0x00080000
#define   EHCI_CMD_ITC_16	0x00100000
#define   EHCI_CMD_ITC_32	0x00200000
#define   EHCI_CMD_ITC_64	0x00400000
#define  EHCI_CMD_ASPME		0x00000800 /* RW/RO async park enable */
#define  EHCI_CMD_ASPMC		0x00000300 /* RW/RO async park count */
#define  EHCI_CMD_LHCR		0x00000080 /* RW light host ctrl reset */
#define  EHCI_CMD_IAAD		0x00000040 /* RW intr on async adv door bell */
#define  EHCI_CMD_ASE		0x00000020 /* RW async sched enable */
#define  EHCI_CMD_PSE		0x00000010 /* RW periodic sched enable */
#define  EHCI_CMD_FLS_M		0x0000000c /* RW/RO frame list size */
#define  EHCI_CMD_FLS(x)	(((x) >> 2) & 3) /* RW/RO frame list size */
#define  EHCI_CMD_HCRESET	0x00000002 /* RW reset */
#define  EHCI_CMD_RS		0x00000001 /* RW run/stop */

#define EHCI_USBSTS		0x04	/* RO, RW, RWC Status register */
#define  EHCI_STS_ASS		0x00008000 /* RO async sched status */
#define  EHCI_STS_PSS		0x00004000 /* RO periodic sched status */
#define  EHCI_STS_REC		0x00002000 /* RO reclamation */
#define  EHCI_STS_HCH		0x00001000 /* RO host controller halted */
#define  EHCI_STS_IAA		0x00000020 /* RWC interrupt on async adv */
#define  EHCI_STS_HSE		0x00000010 /* RWC host system error */
#define  EHCI_STS_FLR		0x00000008 /* RWC frame list rollover */
#define  EHCI_STS_PCD		0x00000004 /* RWC port change detect */
#define  EHCI_STS_ERRINT	0x00000002 /* RWC error interrupt */
#define  EHCI_STS_INT		0x00000001 /* RWC interrupt */
#define  EHCI_STS_INTRS(x)	((x) & 0x3f)

#define EHCI_NORMAL_INTRS (EHCI_STS_IAA | EHCI_STS_HSE | EHCI_STS_PCD | EHCI_STS_ERRINT | EHCI_STS_INT)

#define EHCI_USBINTR		0x08	/* RW Interrupt register */
#define EHCI_INTR_IAAE		0x00000020 /* interrupt on async advance ena */
#define EHCI_INTR_HSEE		0x00000010 /* host system error ena */
#define EHCI_INTR_FLRE		0x00000008 /* frame list rollover ena */
#define EHCI_INTR_PCIE		0x00000004 /* port change ena */
#define EHCI_INTR_UEIE		0x00000002 /* USB error intr ena */
#define EHCI_INTR_UIE		0x00000001 /* USB intr ena */

#define EHCI_FRINDEX		0x0c	/* RW Frame Index register */

#define EHCI_CTRLDSSEGMENT	0x10	/* RW Control Data Structure Segment */

#define EHCI_PERIODICLISTBASE	0x14	/* RW Periodic List Base */
#define EHCI_ASYNCLISTADDR	0x18	/* RW Async List Base */

#define EHCI_CONFIGFLAG		0x40	/* RW Configure Flag register */
#define  EHCI_CONF_CF		0x00000001 /* RW configure flag */

#define EHCI_PORTSC(n)		(0x40+4*(n)) /* RO, RW, RWC Port Status reg */
#define  EHCI_PS_PSPD		0x0C000000 /* RO port speed (ETTF) */
#define  EHCI_PS_PSPD_FS	0x00000000 /* Full speed (ETTF) */
#define  EHCI_PS_PSPD_LS	0x04000000 /* Low speed (ETTF) */
#define  EHCI_PS_PSPD_HS	0x08000000 /* High speed (ETTF) */
#define  EHCI_PS_WKOC_E		0x00400000 /* RW wake on over current ena */
#define  EHCI_PS_WKDSCNNT_E	0x00200000 /* RW wake on disconnect ena */
#define  EHCI_PS_WKCNNT_E	0x00100000 /* RW wake on connect ena */
#define  EHCI_PS_PTC		0x000f0000 /* RW port test control */
#define  EHCI_PS_PIC		0x0000c000 /* RW port indicator control */
#define  EHCI_PS_PO		0x00002000 /* RW port owner */
#define  EHCI_PS_PP		0x00001000 /* RW,RO port power */
#define  EHCI_PS_LS		0x00000c00 /* RO line status */
#define  EHCI_PS_IS_LOWSPEED(x)	(((x) & EHCI_PS_LS) == 0x00000400)
#define  EHCI_PS_PR		0x00000100 /* RW port reset */
#define  EHCI_PS_SUSP		0x00000080 /* RW suspend */
#define  EHCI_PS_FPR		0x00000040 /* RW force port resume */
#define  EHCI_PS_OCC		0x00000020 /* RWC over current change */
#define  EHCI_PS_OCA		0x00000010 /* RO over current active */
#define  EHCI_PS_PEC		0x00000008 /* RWC port enable change */
#define  EHCI_PS_PE		0x00000004 /* RW port enable */
#define  EHCI_PS_CSC		0x00000002 /* RWC connect status change */
#define  EHCI_PS_CS		0x00000001 /* RO connect status */
#define  EHCI_PS_CLEAR		(EHCI_PS_OCC|EHCI_PS_PEC|EHCI_PS_CSC)

#define EHCI_PORT_RESET_COMPLETE 2 /* ms */

#define	EHCI_USBMODE		0xa8		/* USB Device mode */
#define	  EHCI_USBMODE_SDIS	__BIT(4)	/* Stream disable mode 1=act */
#define	  EHCI_USBMODE_SLOM	__BIT(3)	/* setup lockouts on */
#define	  EHCI_USBMODE_ES	__BIT(2)	/* Endian Select ES=1 */
#define	  EHCI_USBMODE_CM	__BITS(1,0)	/* Controller Mode */
#define	  EHCI_USBMODE_CM_IDLE	0x00		/* Idle (combo host/device) */
#define	  EHCI_USBMODE_CM_DEV	0x02		/* Device Controller */
#define	  EHCI_USBMODE_CM_HOST	0x03		/* Host Controller */

#define EHCI_FLALIGN_ALIGN	0x1000
#define EHCI_MAX_PORTS		16 /* only 4 bits available in EHCI_HCS_N_PORTS */

/* No data structure may cross a page boundary. */
#define EHCI_PAGE_SIZE 0x1000
#define EHCI_PAGE(x) ((x) &~ 0xfff)
#define EHCI_PAGE_OFFSET(x) ((x) & 0xfff)

typedef u_int32_t ehci_link_t;
#define EHCI_LINK_TERMINATE	0x00000001
#define EHCI_LINK_TYPE(x)	((x) & 0x00000006)
#define  EHCI_LINK_ITD		0x0
#define  EHCI_LINK_QH		0x2
#define  EHCI_LINK_SITD		0x4
#define  EHCI_LINK_FSTN		0x6
#define EHCI_LINK_ADDR(x)	((x) &~ 0x1f)

typedef u_int32_t ehci_physaddr_t;

typedef u_int32_t ehci_isoc_trans_t;
typedef u_int32_t ehci_isoc_bufr_ptr_t;

/* Isochronous Transfer Descriptor */
#define EHCI_ITD_NUFRAMES USB_UFRAMES_PER_FRAME
#define EHCI_ITD_NBUFFERS 7
typedef struct {
	volatile ehci_link_t		itd_next;
	volatile ehci_isoc_trans_t	itd_ctl[EHCI_ITD_NUFRAMES];
#define EHCI_ITD_GET_STATUS(x) (((x) >> 28) & 0xf)
#define EHCI_ITD_SET_STATUS(x) (((x) & 0xf) << 28)
#define EHCI_ITD_ACTIVE		0x80000000
#define EHCI_ITD_BUF_ERR	0x40000000
#define EHCI_ITD_BABBLE		0x20000000
#define EHCI_ITD_ERROR		0x10000000
#define EHCI_ITD_GET_LEN(x) (((x) >> 16) & 0xfff)
#define EHCI_ITD_SET_LEN(x) (((x) & 0xfff) << 16)
#define EHCI_ITD_IOC		0x8000
#define EHCI_ITD_GET_IOC(x) (((x) >> 15) & 1)
#define EHCI_ITD_SET_IOC(x) (((x) << 15) & EHCI_ITD_IOC)
#define EHCI_ITD_GET_PG(x) (((x) >> 12) & 0x7)
#define EHCI_ITD_SET_PG(x) (((x) & 0x7) << 12)
#define EHCI_ITD_GET_OFFS(x) (((x) >> 0) & 0xfff)
#define EHCI_ITD_SET_OFFS(x) (((x) & 0xfff) << 0)
	volatile ehci_isoc_bufr_ptr_t	itd_bufr[EHCI_ITD_NBUFFERS];
#define EHCI_ITD_GET_BPTR(x) ((x) & 0xfffff000)
#define EHCI_ITD_SET_BPTR(x) ((x) & 0xfffff000)
#define EHCI_ITD_GET_EP(x) (((x) >> 8) & 0xf)
#define EHCI_ITD_SET_EP(x) (((x) & 0xf) << 8)
#define EHCI_ITD_GET_DADDR(x) ((x) & 0x7f)
#define EHCI_ITD_SET_DADDR(x) ((x) & 0x7f)
#define EHCI_ITD_GET_DIR(x) (((x) >> 11) & 1)
#define EHCI_ITD_SET_DIR(x) (((x) & 1) << 11)
#define EHCI_ITD_GET_MAXPKT(x) ((x) & 0x7ff)
#define EHCI_ITD_SET_MAXPKT(x) ((x) & 0x7ff)
#define EHCI_ITD_GET_MULTI(x) ((x) & 0x3)
#define EHCI_ITD_SET_MULTI(x) ((x) & 0x3)
	volatile ehci_isoc_bufr_ptr_t	itd_bufr_hi[EHCI_ITD_NBUFFERS];
} ehci_itd_t;
#define EHCI_ITD_ALIGN 32

/* Split Transaction Isochronous Transfer Descriptor */
typedef struct {
	volatile ehci_link_t	sitd_next;
	/* XXX many more */
} ehci_sitd_t;
#define EHCI_SITD_ALIGN 32

/* Queue Element Transfer Descriptor */
#define EHCI_QTD_NBUFFERS 5
typedef struct {
	volatile ehci_link_t	qtd_next;
	volatile ehci_link_t	qtd_altnext;
	volatile u_int32_t	qtd_status;
#define EHCI_QTD_GET_STATUS(x)	(((x) >>  0) & 0xff)
#define EHCI_QTD_SET_STATUS(x)	((x) <<  0)
#define  EHCI_QTD_ACTIVE	0x80
#define  EHCI_QTD_HALTED	0x40
#define  EHCI_QTD_BUFERR	0x20
#define  EHCI_QTD_BABBLE	0x10
#define  EHCI_QTD_XACTERR	0x08
#define  EHCI_QTD_MISSEDMICRO	0x04
#define  EHCI_QTD_SPLITXSTATE	0x02
#define  EHCI_QTD_PINGSTATE	0x01
#define  EHCI_QTD_STATERRS	0x3c
#define EHCI_QTD_GET_PID(x)	(((x) >>  8) & 0x3)
#define EHCI_QTD_SET_PID(x)	((x) <<  8)
#define  EHCI_QTD_PID_OUT	0x0
#define  EHCI_QTD_PID_IN	0x1
#define  EHCI_QTD_PID_SETUP	0x2
#define EHCI_QTD_GET_CERR(x)	(((x) >> 10) &  0x3)
#define EHCI_QTD_SET_CERR(x)	((x) << 10)
#define EHCI_QTD_GET_C_PAGE(x)	(((x) >> 12) &  0x7)
#define EHCI_QTD_SET_C_PAGE(x)	((x) << 12)
#define EHCI_QTD_GET_IOC(x)	(((x) >> 15) &  0x1)
#define EHCI_QTD_IOC		0x00008000
#define EHCI_QTD_GET_BYTES(x)	(((x) >> 16) &  0x7fff)
#define EHCI_QTD_SET_BYTES(x)	((x) << 16)
#define EHCI_QTD_GET_TOGGLE(x)	(((x) >> 31) &  0x1)
#define	EHCI_QTD_SET_TOGGLE(x)	((x) << 31)
#define EHCI_QTD_TOGGLE_MASK	0x80000000
	volatile ehci_physaddr_t qtd_buffer[EHCI_QTD_NBUFFERS];
	volatile ehci_physaddr_t qtd_buffer_hi[EHCI_QTD_NBUFFERS];
} ehci_qtd_t;
#define EHCI_QTD_ALIGN 32

/* Queue Head */
typedef struct {
	volatile ehci_link_t	qh_link;
	volatile u_int32_t	qh_endp;
#define EHCI_QH_GET_ADDR(x)	(((x) >>  0) & 0x7f) /* endpoint addr */
#define EHCI_QH_SET_ADDR(x)	(x)
#define EHCI_QH_ADDRMASK	0x0000007f
#define EHCI_QH_GET_INACT(x)	(((x) >>  7) & 0x01) /* inactivate on next */
#define EHCI_QH_INACT		0x00000080
#define EHCI_QH_GET_ENDPT(x)	(((x) >>  8) & 0x0f) /* endpoint no */
#define EHCI_QH_SET_ENDPT(x)	((x) <<  8)
#define EHCI_QH_GET_EPS(x)	(((x) >> 12) & 0x03) /* endpoint speed */
#define EHCI_QH_SET_EPS(x)	((x) << 12)
#define  EHCI_QH_SPEED_FULL	0x0
#define  EHCI_QH_SPEED_LOW	0x1
#define  EHCI_QH_SPEED_HIGH	0x2
#define EHCI_QH_GET_DTC(x)	(((x) >> 14) & 0x01) /* data toggle control */
#define EHCI_QH_DTC		0x00004000
#define EHCI_QH_GET_HRECL(x)	(((x) >> 15) & 0x01) /* head of reclamation */
#define EHCI_QH_HRECL		0x00008000
#define EHCI_QH_GET_MPL(x)	(((x) >> 16) & 0x7ff) /* max packet len */
#define EHCI_QH_SET_MPL(x)	((x) << 16)
#define EHCI_QH_MPLMASK		0x07ff0000
#define EHCI_QH_GET_CTL(x)	(((x) >> 27) & 0x01) /* control endpoint */
#define EHCI_QH_CTL		0x08000000
#define EHCI_QH_GET_NRL(x)	(((x) >> 28) & 0x0f) /* NAK reload */
#define EHCI_QH_SET_NRL(x)	((x) << 28)
	volatile u_int32_t	qh_endphub;
#define EHCI_QH_GET_SMASK(x)	(((x) >>  0) & 0xff) /* intr sched mask */
#define EHCI_QH_SET_SMASK(x)	((x) <<  0)
#define EHCI_QH_GET_CMASK(x)	(((x) >>  8) & 0xff) /* split completion mask */
#define EHCI_QH_SET_CMASK(x)	((x) <<  8)
#define EHCI_QH_GET_HUBA(x)	(((x) >> 16) & 0x7f) /* hub address */
#define EHCI_QH_SET_HUBA(x)	((x) << 16)
#define EHCI_QH_GET_PORT(x)	(((x) >> 23) & 0x7f) /* hub port */
#define EHCI_QH_SET_PORT(x)	((x) << 23)
#define EHCI_QH_GET_MULT(x)	(((x) >> 30) & 0x03) /* pipe multiplier */
#define EHCI_QH_SET_MULT(x)	((x) << 30)
	volatile ehci_link_t	qh_curqtd;
	ehci_qtd_t		qh_qtd;
} ehci_qh_t;
#define EHCI_QH_ALIGN 32

/* Periodic Frame Span Traversal Node */
typedef struct {
	volatile ehci_link_t	fstn_link;
	volatile ehci_link_t	fstn_back;
} ehci_fstn_t;
#define EHCI_FSTN_ALIGN 32

/* Debug Port */
#define PCI_CAP_DEBUGPORT_OFFSET __BITS(28,16)
#define PCI_CAP_DEBUGPORT_BAR	__BITS(31,29)
/* Debug Port Registers, offset into DEBUGPORT_BAR at DEBUGPORT_OFFSET */
#define EHCI_DEBUG_SC		0x00
/* Status/Control Register */
#define  EHCI_DSC_DATA_LENGTH	__BITS(3,0)
#define  EHCI_DSC_WRITE		__BIT(4)
#define  EHCI_DSC_GO		__BIT(5)
#define  EHCI_DSC_ERROR		__BIT(6)
#define  EHCI_DSC_EXCEPTION	__BITS(9,7)
#define   EHCI_DSC_EXCEPTION_NONE	0
#define   EHCI_DSC_EXCEPTION_XACT	1
#define   EHCI_DSC_EXCEPTION_HW		2
#define  EHCI_DSC_IN_USE	__BIT(10)
#define  EHCI_DSC_DONE		__BIT(16)
#define  EHCI_DSC_ENABLED	__BIT(28)
#define  EHCI_DSC_OWNER		__BIT(30)
#define EHCI_DEBUG_UPR		0x04
/* USB PIDs Register */
#define  EHCI_DPR_TOKEN		__BITS(7,0)
#define  EHCI_DPR_SEND		__BITS(15,8)
#define  EHCI_DPR_RECEIVED	__BITS(23,16)
/* Data Registers */
#define EHCI_DEBUG_DATA0123	0x08
#define EHCI_DEBUG_DATA4567	0x0c
#define EHCI_DEBUG_DAR		0x10
/* Device Address Register */
#define  EHCI_DAR_ENDPOINT	__BITS(3,0)
#define  EHCI_DAR_ADDRESS	__BITS(14,8)

#endif /* _DEV_PCI_EHCIREG_H_ */
@


1.9
log
@Revert accidental commits
Admin:
  These changes are currently subject to rework via the normal submissions channel.
@
text
@@


1.8
log
@  Fixes for Isochronous data transfer
Detail:
Frontend
========

NetBSD.build.c.usbmodule
	frontend isochronous changes
	forces reads to always be multiple of maxpacket
NetBSD.dev.usb.c.usb_subr
	datatoggle fix
	panic fix
NetBSD.dev.usb.c.usbdi
	usbd_transfer changed so that bufrem is passed the xfer pointer instead of the buffer pointer
	fixed missing braces in usbd_clear_endpoint_stall

EHCI
====

The HS (USB2) isochronous as been rewritten and isochronous split transactions - FS (USB1) over a HS Connection - has been added

NetBSD.dev.usb.c.ehci
NetBSD.dev.usb.h.ehcireg
NetBSD.dev.usb.h.ehcivar

OHCI
====

Changes to the NetBSD backend to get isochronous transfers working on a OHCI device. While it did have isochronous support it wasn't working properly.

NetBSD.dev.usb.c.ohci

Admin:
  Submitted by Colin Granville
Tested in iMx6

Version 1.10. Tagged as 'NetBSD-1_10'
@
text
@d250 1
a250 50
	volatile u_int32_t	sitd_endp;
#define EHCI_SITD_GET_ADDR(x)	(((x) >>  0) & 0x7f) /* device address */
#define EHCI_SITD_SET_ADDR(x)	(x)
#define EHCI_SITD_ADDRMASK	0x0000007f
#define EHCI_SITD_GET_ENDPT(x)	(((x) >>  8) & 0x0f) /* endpoint no */
#define EHCI_SITD_SET_ENDPT(x)	((x) <<  8)
#define EHCI_SITD_GET_HUBA(x)	(((x) >> 16) & 0x7f) /* hub address */
#define EHCI_SITD_SET_HUBA(x)	((x) << 16)
#define EHCI_SITD_GET_PORT(x)	(((x) >> 24) & 0x7f) /* hub port */
#define EHCI_SITD_SET_PORT(x)	((x) << 24)
#define EHCI_SITD_GET_IO(x)	((x) >> 31)
#define EHCI_SITD_SET_IO(x)	((x) << 31)          /* endpoint direction */    
	volatile u_int32_t	sitd_mask;
#define EHCI_SITD_GET_SMASK(x)	(((x) >>  0) & 0xff) /* split start mask */
#define EHCI_SITD_SET_SMASK(x)	((x) <<  0)
#define EHCI_SITD_GET_CMASK(x)	(((x) >>  8) & 0xff) /* split completion mask */
#define EHCI_SITD_SET_CMASK(x)	((x) <<  8)
	volatile u_int32_t	sitd_status;
#define EHCI_SITD_GET_STATUS(x)	(((x) >>  0) & 0xff)
#define EHCI_SITD_SET_STATUS(x)	((x) <<  0)
#define  EHCI_SITD_ACTIVE	0x80
#define  EHCI_SITD_ERR		0x40
#define  EHCI_SITD_BUFERR	0x20
#define  EHCI_SITD_BABBLE	0x10
#define  EHCI_SITD_XACTERR	0x08
#define  EHCI_SITD_MISSEDMICRO	0x04
#define  EHCI_SITD_SPLITXSTATE	0x02
/* Bit 0  reserved */
#define  EHCI_SITD_STATERRS	0x7c
#define EHCI_SITD_GET_CPMASK(x)	(((x) >> 8) &  0x7f)   /* C-PROG mask */
#define EHCI_SITD_SET_CPMASK(x)	((x) << 8)
#define EHCI_SITD_GET_LEN(x)	(((x) >> 16) &  0x3ff) /* bytes to transfer */
#define EHCI_SITD_SET_LEN(x)	((x) << 16)
#define EHCI_SITD_GET_PSEL(x)	(((x) >> 30) & 1)      /* page select */
#define EHCI_SITD_SET_PSEL(x)	(x << 30)
#define EHCI_SITD_GET_IOC(x)	((x) >> 31)
#define EHCI_SITD_SET_IOC(x)	((x) << 31)
#define EHCI_SITD_IOC		(1 << 31)
#define EHCI_SITD_BUFFERS	2
	volatile ehci_isoc_bufr_ptr_t	sitd_buffer[EHCI_SITD_BUFFERS];
#define EHCI_SITD_SET_TCNT(x)	((x) << 0)
#define EHCI_SITD_GET_TCNT(x)	(((x) >> 0) & 7)
#define EHCI_SITD_SET_TPOS(x)	((x) << 3)
#define EHCI_SITD_GET_TPOS(x)	(((x) >> 3) & 3)
#define   EHCI_SITD_TPOS_ALL	0
#define   EHCI_SITD_TPOS_BEGIN	1
#define   EHCI_SITD_TPOS_MID	2
#define   EHCI_SITD_TPOS_END	3
	volatile ehci_link_t		sitd_back;
	volatile ehci_isoc_bufr_ptr_t	sitd_buffer_hi[EHCI_SITD_BUFFERS];
@


1.7
log
@Merge in some EHCI fixes from NetBSD. Other minor changes.
Detail:
  build/Version - Bump EHCIDriver version number
  build/c/ehcihal, build/c/ehcimodule, build/c/ohcimodule - Use the HAL USB controller type & flag definitions from Hdr:HALEntries instead of using magic numbers
  build/c/ehcimodule - Avoid double-read of hardware register in debug version of bus_space_read_4(); ensures that we report the value that's actually returned to the driver
  dev/usb/c/ehci - Merge in the following revisions from NetBSD:
  - 1.172, 1.173, 1.178, 1.193 - Support for controllers with embedded transaction translators
  - 1.174 - alloc_sqtd_chain() fix for short packets that end on page boundaries
  - 1.179 - ehci_set_qh_qtd() fixed to terminate alternate next qTD pointer with EHCI_NULL, not 0
  dev/usb/h/ehcireg - Updated to latest NetBSD version (1.34)
  dev/usb/h/ehcivar - Merge in revision 1.38 (ETTF support)
Admin:
  Tested on BB-xM


Version 0.88. Tagged as 'NetBSD-0_88'
@
text
@d250 50
a299 1
	/* XXX many more */
@


1.6
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@d1 1
a1 1
/*	$NetBSD: ehcireg.h,v 1.31 2010/06/02 18:53:39 jakllsch Exp $	*/
d79 2
d152 4
d178 9
d364 1
a364 1
#define  EHCI_DPR_RECIEVED	__BITS(23,16)
@


1.5
log
@	Update of NetBSD elements (except c.ohci) to track NetBSD current
	from mid April 2005.
	Inclusion of Mods to c.ehci (from Dan) to correctly handle low
	speed interrupt devices beyond USB2 hubs (i.e. keyboards and mice).
	Mod to EHCI resetting in service call handler to better cope with
	USBDriver being restarted 'underneath' it.
Detail:
Admin:
	Castle, Dan Ellis, NetBSD added IP. Tested at Castle. Will be
	beta tested at this revision level before full release.


Version 0.39. Tagged as 'NetBSD-0_39'
@
text
@d1 1
a1 1
/*      $NetBSD: ehcireg.h,v 1.20 2005/03/02 11:37:27 mycroft Exp $     */
a17 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d59 1
a59 1
/* Regs ar EECP + offset */
d61 2
d64 7
d173 1
d191 3
d195 2
d198 31
a228 2
	ehci_link_t	itd_next;
	/* XXX many more */
d234 1
a234 1
	ehci_link_t	sitd_next;
d242 3
a244 3
	ehci_link_t	qtd_next;
	ehci_link_t	qtd_altnext;
	u_int32_t	qtd_status;
d246 1
a246 1
#define EHCI_QTD_SET_STATUS(x) ((x) <<  0)
d255 1
a255 1
#define  EHCI_QTD_STATERRS	0x7c
d270 4
a273 4
#define EHCI_QTD_SET_TOGGLE(x)  ((x) << 31)
#define EHCI_QTD_TOGGLE_MASK    0x80000000
	ehci_physaddr_t	qtd_buffer[EHCI_QTD_NBUFFERS];
        ehci_physaddr_t qtd_buffer_hi[EHCI_QTD_NBUFFERS];
d279 2
a280 2
	ehci_link_t	qh_link;
	u_int32_t	qh_endp;
d299 2
a300 2
#define EHCI_QH_MPLMASK         0x07ff0000
#define EHCI_QH_GET_CTL(x)      (((x) >> 27) & 0x01) /* control endpoint */
d304 1
a304 1
	u_int32_t	qh_endphub;
d315 2
a316 2
	ehci_link_t	qh_curqtd;
	ehci_qtd_t	qh_qtd;
d322 2
a323 2
	ehci_link_t	fstn_link;
	ehci_link_t	fstn_back;
d327 31
@


1.4
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d1 1
a1 1
/*      $NetBSD: ehcireg.h,v 1.19 2004/10/25 08:53:38 augustss Exp $    */
d4 1
a4 1
 * Copyright (c) 2001 The NetBSD Foundation, Inc.
@


1.3
log
@  Extensive changes and bug fixes to usb and ohci ..
  'blocked' several holes that could cause freezes with awkward
  usb devices.  Added latest changes from Dan Ellis too , especially for USB2
Detail:
 many
Admin:
 Tested in ROM at Castle, and beta tested with users


Version 0.28. Tagged as 'NetBSD-0_28'
@
text
@d1 1
a1 1
/*      $NetBSD: ehcireg.h,v 1.17 2004/06/23 06:45:56 mycroft Exp $     */
d78 1
a78 1
#define  EHCI_HCS_P_INCICATOR(x) ((x) & 0x10000)
d209 1
@


1.2
log
@Latest stuff from John - mainly Rhenium improvements.

Version 0.26. Tagged as 'NetBSD-0_26'
@
text
@d1 1
a1 1
/*      $NetBSD: ehcireg.h,v 1.14 2003/10/13 00:05:10 enami Exp $       */
d232 2
a233 1
#define EHCI_QTD_TOGGLE		0x80000000
d261 2
a262 2
#define EHCI_QG_MPLMASK		0x07ff0000
#define EHCI_QH_GET_CTL(x)	(((x) >> 26) & 0x01) /* control endpoint */
@


1.1
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d1 1
a1 1
/*	$NetBSD: ehcireg.h,v 1.13 2001/11/23 01:16:27 augustss Exp $	*/
d234 1
@

