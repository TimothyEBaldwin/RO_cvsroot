head	1.6;
access;
symbols
	NetBSD-1_02:1.5
	NetBSD-1_01:1.5
	NetBSD-1_00:1.5
	NetBSD-0_99:1.5
	NetBSD-0_98:1.5
	NetBSD-0_97:1.5
	NetBSD-0_96:1.5
	NetBSD-0_95:1.5
	NetBSD-0_94:1.5
	NetBSD-0_93:1.5
	NetBSD-0_92:1.5
	NetBSD-0_91:1.5
	NetBSD-0_90:1.5
	NetBSD-0_89:1.5
	NetBSD-0_88:1.5
	NetBSD-0_87:1.5
	NetBSD-0_86:1.5
	NetBSD-0_85:1.5
	NetBSD-0_84:1.5
	NetBSD-0_83:1.5
	NetBSD-0_82:1.5
	NetBSD-0_81:1.5
	NetBSD-0_80:1.5
	NetBSD-0_79:1.5
	NetBSD-0_78:1.5
	NetBSD-0_77:1.5
	NetBSD-0_76:1.5
	NetBSD-0_75:1.5
	NetBSD-0_74:1.5
	NetBSD-0_73:1.5
	NetBSD-0_72:1.5
	NetBSD-0_71:1.5
	NetBSD-0_70:1.5
	NetBSD-0_69:1.5
	NetBSD-0_68:1.5
	NetBSD-0_67:1.5
	NetBSD-0_66:1.5
	NetBSD-0_65:1.5
	NetBSD-0_64:1.5
	NetBSD-0_63:1.5
	NetBSD-0_62:1.5
	NetBSD-0_61:1.5
	NetBSD-0_60:1.5
	NetBSD-0_59:1.5
	NetBSD-0_58:1.5
	NetBSD-0_57:1.5
	NetBSD-0_56:1.5
	NetBSD-0_55:1.5
	NetBSD-0_54:1.5
	NetBSD-0_53:1.5
	NetBSD-0_52:1.4
	NetBSD-0_51:1.4
	NetBSD-0_50:1.4
	NetBSD-0_49:1.4
	NetBSD-0_48:1.4
	NetBSD-0_47:1.4
	NetBSD-0_46:1.4
	NetBSD-0_45:1.4
	NetBSD-0_44:1.4
	NetBSD-0_43:1.4
	NetBSD-0_42:1.4
	NetBSD-0_41:1.4
	NetBSD-0_40:1.4
	NetBSD-0_39:1.4
	NetBSD-0_38:1.4
	NetBSD-0_37:1.4
	NetBSD-0_36:1.4
	NetBSD-0_35:1.4
	NetBSD-0_34:1.4
	NetBSD-0_33:1.4
	NetBSD-0_32:1.4
	NetBSD-0_31:1.4
	NetBSD-0_30:1.3
	NetBSD-0_29:1.3
	RO_5_07:1.3
	NetBSD-0_28:1.3
	NetBSD-0_27:1.3
	NetBSD-0_26:1.3
	NetBSD-0_25:1.3
	NetBSD-0_24:1.3
	NetBSD-0_23:1.3
	NetBSD-0_21-1_22_2_1:1.2
	NetBSD-0_22:1.3
	USB1:1.2.0.2
	NetBSD-0_21:1.2
	NetBSD-0_20:1.2
	NetBSD-0_19:1.2
	NetBSD-0_18:1.2
	NetBSD-0_17:1.2
	NetBSD-0_16:1.2
	NetBSD-0_15:1.2
	NetBSD-0_14:1.2
	NetBSD-0_13:1.2
	NetBSD-0_12:1.2
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.09.17.16.03.50;	author rool;	state dead;
branches;
next	1.5;
commitid	bTEnXVoCvWq6HCBy;

1.5
date	2010.09.14.21.07.42;	author jlee;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.30.02.34.20;	author jballance;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.21.20.49.19;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.11.09.17.44;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.17;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update table of device quirks
Detail:
  From NetBSD usb_quirks.c revision 1.81.
  usbmodule: NULL is for pointer types, not ints.
  usb_quirks: Group the RISC OS specific ones together, disable the non applicable UQ_APPLE_ISO ones, UQ_LOST_CS_DESC doesn't apply either but is only used for USB modem drivers not ported here. Untangle ifdefs around usbd_find_quirk().
Admin:
  Removed unused source file ums.c

Version 1.03. Tagged as 'NetBSD-1_03'
@
text
@/*	$NetBSD: ums.c,v 1.80 2010/01/14 09:30:39 matthias Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * HID spec: http://www.usb.org/developers/devclass_docs/HID1_11.pdf
 */

#include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: ums.c,v 1.80 2010/01/14 09:30:39 matthias Exp $");

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <sys/select.h>
#include <sys/proc.h>
#include <sys/vnode.h>
#include <sys/poll.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbhid.h>

#include <dev/usb/usbdi.h>
#include <dev/usb/usbdi_util.h>
#include <dev/usb/usbdevs.h>
#include <dev/usb/usb_quirks.h>
#include <dev/usb/uhidev.h>
#include <dev/usb/hid.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsmousevar.h>

#ifdef USB_DEBUG
#define DPRINTF(x)	if (umsdebug) logprintf x
#define DPRINTFN(n,x)	if (umsdebug>(n)) logprintf x
int	umsdebug = 0;
#else
#define DPRINTF(x)
#define DPRINTFN(n,x)
#endif

#define UMS_BUT(i) ((i) == 1 || (i) == 2 ? 3 - (i) : i)

#define UMSUNIT(s)	(minor(s))

#define PS2LBUTMASK	x01
#define PS2RBUTMASK	x02
#define PS2MBUTMASK	x04
#define PS2BUTMASK 0x0f

#define MAX_BUTTONS	31	/* must not exceed size of sc_buttons */

struct ums_softc {
	struct uhidev sc_hdev;

	struct hid_location sc_loc_x, sc_loc_y, sc_loc_z, sc_loc_w;
	struct hid_location sc_loc_btn[MAX_BUTTONS];

	int sc_enabled;

	int flags;		/* device configuration */
#define UMS_Z		0x01	/* z direction available */
#define UMS_SPUR_BUT_UP	0x02	/* spurious button up events */
#define UMS_REVZ	0x04	/* Z-axis is reversed */
#define UMS_W		0x08	/* w direction/tilt available */
#define UMS_ABS		0x10	/* absolute position, touchpanel */

	int nbuttons;

	u_int32_t sc_buttons;	/* mouse button status */
	device_t sc_wsmousedev;

	char			sc_dying;
};

#define MOUSE_FLAGS_MASK (HIO_CONST|HIO_RELATIVE)

Static void ums_intr(struct uhidev *addr, void *ibuf, u_int len);

Static int	ums_enable(void *);
Static void	ums_disable(void *);
Static int	ums_ioctl(void *, u_long, void *, int, struct lwp * );

const struct wsmouse_accessops ums_accessops = {
	ums_enable,
	ums_ioctl,
	ums_disable,
};

int ums_match(device_t, cfdata_t, void *);
void ums_attach(device_t, device_t, void *);
void ums_childdet(device_t, device_t);
int ums_detach(device_t, int);
int ums_activate(device_t, enum devact);
extern struct cfdriver ums_cd;
CFATTACH_DECL2_NEW(ums, sizeof(struct ums_softc), ums_match, ums_attach,
    ums_detach, ums_activate, NULL, ums_childdet);

int
ums_match(device_t parent, cfdata_t match, void *aux)
{
	struct uhidev_attach_arg *uha = aux;
	int size;
	void *desc;

	/*
	 * Some (older) Griffin PowerMate knobs may masquerade as a
	 * mouse, avoid treating them as such, they have only one axis.
	 */
	if (uha->uaa->vendor == USB_VENDOR_GRIFFIN &&
	    uha->uaa->product == USB_PRODUCT_GRIFFIN_POWERMATE)
		return (UMATCH_NONE);

	uhidev_get_report_desc(uha->parent, &desc, &size);
	if (!hid_is_collection(desc, size, uha->reportid,
			       HID_USAGE2(HUP_GENERIC_DESKTOP, HUG_MOUSE)) &&
	    !hid_is_collection(desc, size, uha->reportid,
			       HID_USAGE2(HUP_GENERIC_DESKTOP, HUG_POINTER)))
		return (UMATCH_NONE);

	return (UMATCH_IFACECLASS);
}

void
ums_attach(device_t parent, device_t self, void *aux)
{
	struct ums_softc *sc = device_private(self);
	struct uhidev_attach_arg *uha = aux;
	struct wsmousedev_attach_args a;
	int size;
	void *desc;
	u_int32_t flags, quirks;
	int i, hl;
	struct hid_location *zloc;
	struct hid_location loc_btn;

	aprint_naive("\n");

	sc->sc_hdev.sc_dev = self;
	sc->sc_hdev.sc_intr = ums_intr;
	sc->sc_hdev.sc_parent = uha->parent;
	sc->sc_hdev.sc_report_id = uha->reportid;

	quirks = usbd_get_quirks(uha->parent->sc_udev)->uq_flags;
	if (quirks & UQ_MS_REVZ)
		sc->flags |= UMS_REVZ;
	if (quirks & UQ_SPUR_BUT_UP)
		sc->flags |= UMS_SPUR_BUT_UP;

	uhidev_get_report_desc(uha->parent, &desc, &size);

	if (!pmf_device_register(self, NULL, NULL))
		aprint_error_dev(self, "couldn't establish power handler\n");

	if (!hid_locate(desc, size, HID_USAGE2(HUP_GENERIC_DESKTOP, HUG_X),
	       uha->reportid, hid_input, &sc->sc_loc_x, &flags)) {
		aprint_error("\n%s: mouse has no X report\n",
		       USBDEVNAME(sc->sc_hdev.sc_dev));
		USB_ATTACH_ERROR_RETURN;
	}
	switch (flags & MOUSE_FLAGS_MASK) {
	case 0:
		sc->flags |= UMS_ABS;
		break;
	case HIO_RELATIVE:
		break;
	default:
		aprint_error("\n%s: X report 0x%04x not supported\n",
		       USBDEVNAME(sc->sc_hdev.sc_dev), flags);
		USB_ATTACH_ERROR_RETURN;
	}

	if (!hid_locate(desc, size, HID_USAGE2(HUP_GENERIC_DESKTOP, HUG_Y),
	       uha->reportid, hid_input, &sc->sc_loc_y, &flags)) {
		aprint_error("\n%s: mouse has no Y report\n",
		       USBDEVNAME(sc->sc_hdev.sc_dev));
		USB_ATTACH_ERROR_RETURN;
	}
	switch (flags & MOUSE_FLAGS_MASK) {
	case 0:
		sc->flags |= UMS_ABS;
		break;
	case HIO_RELATIVE:
		break;
	default:
		aprint_error("\n%s: Y report 0x%04x not supported\n",
		       USBDEVNAME(sc->sc_hdev.sc_dev), flags);
		USB_ATTACH_ERROR_RETURN;
	}

	/* Try the wheel first as the Z activator since it's tradition. */
	hl = hid_locate(desc, 
			size, 
			HID_USAGE2(HUP_GENERIC_DESKTOP, HUG_WHEEL), 
			uha->reportid, 
			hid_input, 
			&sc->sc_loc_z, 
			&flags);

	zloc = &sc->sc_loc_z;
	if (hl) {
		if ((flags & MOUSE_FLAGS_MASK) != HIO_RELATIVE) {
			aprint_verbose("\n%s: Wheel report 0x%04x not "
			    "supported\n", USBDEVNAME(sc->sc_hdev.sc_dev),
			    flags);
			sc->sc_loc_z.size = 0;	/* Bad Z coord, ignore it */
		} else {
			sc->flags |= UMS_Z;
			/* Wheels need the Z axis reversed. */
			sc->flags ^= UMS_REVZ;
			/* Put Z on the W coordinate */
			zloc = &sc->sc_loc_w;
		}
	}

	hl = hid_locate(desc, 
			size, 
			HID_USAGE2(HUP_GENERIC_DESKTOP, HUG_Z),
			uha->reportid,
			hid_input,
			zloc,
			&flags);

	/*
	 * The horizontal component of the scrollball can also be given by
	 * Application Control Pan in the Consumer page, so if we didnt see
	 * any Z then check that.
	 */
	if (!hl) {
		hl = hid_locate(desc, 
				size, 
				HID_USAGE2(HUP_CONSUMER, HUC_AC_PAN), 
				uha->reportid,
				hid_input,
				zloc,
				&flags);
	}

	if (hl) {
		if ((flags & MOUSE_FLAGS_MASK) != HIO_RELATIVE) {
			aprint_verbose("\n%s: Z report 0x%04x not supported\n",
			       USBDEVNAME(sc->sc_hdev.sc_dev), flags);
			zloc->size = 0;	/* Bad Z coord, ignore it */
		} else {
			if (sc->flags & UMS_Z)
				sc->flags |= UMS_W;
			else
				sc->flags |= UMS_Z;
		}
	}

	/*
	 * The Microsoft Wireless Laser Mouse 6000 v2.0 reports a bad
	 * position for the wheel and wheel tilt controls -- should be
	 * in bytes 3 & 4 of the report.  Fix this if necessary.
	 */
	if (uha->uaa->vendor == USB_VENDOR_MICROSOFT &&
	    (uha->uaa->product == USB_PRODUCT_MICROSOFT_24GHZ_XCVR10 ||
	     uha->uaa->product == USB_PRODUCT_MICROSOFT_24GHZ_XCVR20)) {	
		if ((sc->flags & UMS_Z) && sc->sc_loc_z.pos == 0)
			sc->sc_loc_z.pos = 24;
		if ((sc->flags & UMS_W) && sc->sc_loc_w.pos == 0)
			sc->sc_loc_w.pos = sc->sc_loc_z.pos + 8;
	}

	/* figure out the number of buttons */
	for (i = 1; i <= MAX_BUTTONS; i++)
		if (!hid_locate(desc, size, HID_USAGE2(HUP_BUTTON, i),
			uha->reportid, hid_input, &loc_btn, 0))
			break;
	sc->nbuttons = i - 1;

	aprint_normal(": %d button%s%s%s%s\n",
	    sc->nbuttons, sc->nbuttons == 1 ? "" : "s",
	    sc->flags & UMS_W ? ", W" : "",
	    sc->flags & UMS_Z ? " and Z dir" : "",
	    sc->flags & UMS_W ? "s" : "");

	for (i = 1; i <= sc->nbuttons; i++)
		hid_locate(desc, size, HID_USAGE2(HUP_BUTTON, i),
			   uha->reportid, hid_input,
			   &sc->sc_loc_btn[i-1], 0);

#ifdef USB_DEBUG
	DPRINTF(("ums_attach: sc=%p\n", sc));
	DPRINTF(("ums_attach: X\t%d/%d\n",
		 sc->sc_loc_x.pos, sc->sc_loc_x.size));
	DPRINTF(("ums_attach: Y\t%d/%d\n",
		 sc->sc_loc_y.pos, sc->sc_loc_y.size));
	if (sc->flags & UMS_Z)
		DPRINTF(("ums_attach: Z\t%d/%d\n",
			 sc->sc_loc_z.pos, sc->sc_loc_z.size));
	if (sc->flags & UMS_W)
		DPRINTF(("ums_attach: W\t%d/%d\n",
			 sc->sc_loc_w.pos, sc->sc_loc_w.size));
	for (i = 1; i <= sc->nbuttons; i++) {
		DPRINTF(("ums_attach: B%d\t%d/%d\n",
			 i, sc->sc_loc_btn[i-1].pos,sc->sc_loc_btn[i-1].size));
	}
#endif

	a.accessops = &ums_accessops;
	a.accesscookie = sc;

	sc->sc_wsmousedev = config_found(self, &a, wsmousedevprint);

	USB_ATTACH_SUCCESS_RETURN;
}

int
ums_activate(device_ptr_t self, enum devact act)
{
	struct ums_softc *sc = device_private(self);

	switch (act) {
	case DVACT_DEACTIVATE:
		sc->sc_dying = 1;
		return 0;
	default:
		return EOPNOTSUPP;
	}
}

void
ums_childdet(device_t self, device_t child)
{
	struct ums_softc *sc = device_private(self);

	KASSERT(sc->sc_wsmousedev == child);
	sc->sc_wsmousedev = NULL;
}

int
ums_detach(device_t self, int flags)
{
	struct ums_softc *sc = device_private(self);
	int rv = 0;

	DPRINTF(("ums_detach: sc=%p flags=%d\n", sc, flags));

	/* No need to do reference counting of ums, wsmouse has all the goo. */
	if (sc->sc_wsmousedev != NULL)
		rv = config_detach(sc->sc_wsmousedev, flags);

	pmf_device_deregister(self);

	return (rv);
}

void
ums_intr(struct uhidev *addr, void *ibuf, u_int len)
{
	struct ums_softc *sc = (struct ums_softc *)addr;
	int dx, dy, dz, dw;
	u_int32_t buttons = 0;
	int i, flags, s;

	DPRINTFN(5,("ums_intr: len=%d\n", len));

	flags = WSMOUSE_INPUT_DELTA;	/* equals 0 */

	dx =  hid_get_data(ibuf, &sc->sc_loc_x);
	if (sc->flags & UMS_ABS) {
		flags |= (WSMOUSE_INPUT_ABSOLUTE_X | WSMOUSE_INPUT_ABSOLUTE_Y);
		dy = hid_get_data(ibuf, &sc->sc_loc_y);
	} else
		dy = -hid_get_data(ibuf, &sc->sc_loc_y);
	dz =  hid_get_data(ibuf, &sc->sc_loc_z);
	dw =  hid_get_data(ibuf, &sc->sc_loc_w);

	if (sc->flags & UMS_REVZ)
		dz = -dz;
	for (i = 0; i < sc->nbuttons; i++)
		if (hid_get_data(ibuf, &sc->sc_loc_btn[i]))
			buttons |= (1 << UMS_BUT(i));

	if (dx != 0 || dy != 0 || dz != 0 || dw != 0 ||
	    buttons != sc->sc_buttons) {
		DPRINTFN(10, ("ums_intr: x:%d y:%d z:%d w:%d buttons:0x%x\n",
			dx, dy, dz, dw, buttons));
		sc->sc_buttons = buttons;
		if (sc->sc_wsmousedev != NULL) {
			s = spltty();
			wsmouse_input(sc->sc_wsmousedev, buttons, dx, dy, dz,
			    dw, flags);
			splx(s);
		}
	}
}

Static int
ums_enable(void *v)
{
	struct ums_softc *sc = v;

	DPRINTFN(1,("ums_enable: sc=%p\n", sc));

	if (sc->sc_dying)
		return (EIO);

	if (sc->sc_enabled)
		return (EBUSY);

	sc->sc_enabled = 1;
	sc->sc_buttons = 0;

	return (uhidev_open(&sc->sc_hdev));
}

Static void
ums_disable(void *v)
{
	struct ums_softc *sc = v;

	DPRINTFN(1,("ums_disable: sc=%p\n", sc));
#ifdef DIAGNOSTIC
	if (!sc->sc_enabled) {
		printf("ums_disable: not enabled\n");
		return;
	}
#endif

	sc->sc_enabled = 0;
	uhidev_close(&sc->sc_hdev);
}

Static int
ums_ioctl(void *v, u_long cmd, void *data, int flag,
    struct lwp * p)

{
	struct ums_softc *sc = v;

	switch (cmd) {
	case WSMOUSEIO_GTYPE:
		if (sc->flags & UMS_ABS)
			*(u_int *)data = WSMOUSE_TYPE_TPANEL;
		else
			*(u_int *)data = WSMOUSE_TYPE_USB;
		return (0);
	}

	return (EPASSTHROUGH);
}
@


1.5
log
@Update hid.c, ums.c to latest (ish), update usbmouse.c, add TouchBook touchpad fix
Detail:
  dev/usb/c/hid, dev/usb/h/hid, dev/usb/c/ums - Updated to latest NetBSD versions (actually the version that was used for the recent core/EHCI update, so not 100% latest)
  build/c/usbmouse, dev/wscons/h/wsmousevar - Updated RISC OS USB mouse driver to be similar to the new NetBSD version. Also reformatted file to use tab char instead of inconsistent numbers of spaces for indentation.
  build/c/usbmouse, dev/usb/usbdevs - Added fix for broken TouchBook touchpad behaviour.
Admin:
  Tested with various mice on a beagleboard, and with the TouchBook touchpad.
  We should now have support for the W axis of mice, but that code is untested since I don't have any suitable mice to hand.


Version 0.53. Tagged as 'NetBSD-0_53'
@
text
@@


1.4
log
@        Update of EHCIDriver to current NetBSD, together with needed changes
        in both OHCIDriver and USBDriver.


Detail:
        Code may change before formal release .. will be beta released
        ... Entered to CVS to get new version numbers, and for
        the record.
Admin:
        Castle/netbsd added IP .. will be tested more fully before
        formal release. Still to be verified on Rhenium.


Version 0.31. Tagged as 'NetBSD-0_31'
@
text
@d1 1
a1 1
/*      $NetBSD: ums.c,v 1.60 2003/03/11 16:44:00 augustss Exp $        */
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d38 1
a38 1
__KERNEL_RCSID(0, "$NetBSD: ums.c,v 1.60 2003/03/11 16:44:00 augustss Exp $");
a45 1
#include <sys/tty.h>
d83 1
a83 1
#define MAX_BUTTONS	7	/* must not exceed size of sc_buttons */
d88 1
a88 1
	struct hid_location sc_loc_x, sc_loc_y, sc_loc_z;
d97 2
d103 1
a103 1
	struct device *sc_wsmousedev;
a108 1
#define MOUSE_FLAGS (HIO_RELATIVE)
d114 1
a114 1
Static int	ums_ioctl(void *, u_long, caddr_t, int, usb_proc_ptr );
d122 8
a129 1
USB_DECLARE_DRIVER(ums);
d132 1
a132 1
ums_match(struct device *parent, struct cfdata *match, void *aux)
d138 8
d148 3
a150 1
			       HID_USAGE2(HUP_GENERIC_DESKTOP, HUG_MOUSE)))
d157 1
a157 1
ums_attach(struct device *parent, struct device *self, void *aux)
d159 1
a159 1
	struct ums_softc *sc = (struct ums_softc *)self;
d165 2
a166 1
	int i, wheel;
d169 3
d184 3
d189 1
a189 1
		printf("\n%s: mouse has no X report\n",
d193 8
a200 2
	if ((flags & MOUSE_FLAGS_MASK) != MOUSE_FLAGS) {
		printf("\n%s: X report 0x%04x not supported\n",
d207 1
a207 1
		printf("\n%s: mouse has no Y report\n",
d211 8
a218 2
	if ((flags & MOUSE_FLAGS_MASK) != MOUSE_FLAGS) {
		printf("\n%s: Y report 0x%04x not supported\n",
d223 15
a237 8
	/* Try to guess the Z activator: first check Z, then WHEEL. */
	wheel = 0;
	if (hid_locate(desc, size, HID_USAGE2(HUP_GENERIC_DESKTOP, HUG_Z),
	       uha->reportid, hid_input, &sc->sc_loc_z, &flags) ||
	    (wheel = hid_locate(desc, size, HID_USAGE2(HUP_GENERIC_DESKTOP,
						       HUG_WHEEL),
	       uha->reportid, hid_input, &sc->sc_loc_z, &flags))) {
		if ((flags & MOUSE_FLAGS_MASK) != MOUSE_FLAGS) {
d242 3
a244 2
			if (wheel)
				sc->flags ^= UMS_REVZ;
d248 50
d305 1
a305 1
	printf(": %d button%s%s\n",
d307 3
a309 1
	    sc->flags & UMS_Z ? " and Z dir." : "");
d325 3
d345 1
a345 2
	struct ums_softc *sc = (struct ums_softc *)self;
	int rv = 0;
a347 3
	case DVACT_ACTIVATE:
		return (EOPNOTSUPP);

a348 2
		if (sc->sc_wsmousedev != NULL)
			rv = config_deactivate(sc->sc_wsmousedev);
d350 3
a352 1
		break;
d354 9
a362 1
	return (rv);
d366 1
a366 1
ums_detach(struct device *self, int flags)
d368 1
a368 1
	struct ums_softc *sc = (struct ums_softc *)self;
d377 2
d386 1
a386 1
	int dx, dy, dz;
d388 1
a388 2
	int i;
	int s;
d392 2
d395 5
a399 1
	dy = -hid_get_data(ibuf, &sc->sc_loc_y);
d401 2
d409 4
a412 3
	if (dx != 0 || dy != 0 || dz != 0 || buttons != sc->sc_buttons) {
		DPRINTFN(10, ("ums_intr: x:%d y:%d z:%d buttons:0x%x\n",
			dx, dy, dz, buttons));
d417 1
a417 1
				      WSMOUSE_INPUT_DELTA);
d460 2
a461 1
ums_ioctl(void *v, u_long cmd, caddr_t data, int flag, usb_proc_ptr p)
d464 2
d468 4
a471 1
		*(u_int *)data = WSMOUSE_TYPE_USB;
@


1.3
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d1 1
a1 1
/*	$NetBSD: ums.c,v 1.59 2002/09/23 05:59:01 simonb Exp $	*/
d41 1
a41 1
 * HID spec: http://www.usb.org/developers/data/devclass/hid1_1.pdf
d45 1
a45 1
__KERNEL_RCSID(0, "$NetBSD: ums.c,v 1.59 2002/09/23 05:59:01 simonb Exp $");
@


1.2
log
@Nicked a few hub related fixes from later NetBSD versions.
Added stuff to delete the DeviceFS$USB*$Options variables when the module is
RMkilled.

Version 0.12. Tagged as 'NetBSD-0_12'
@
text
@d1 1
a1 1
/*	$NetBSD: ums.c,v 1.44 2000/06/01 14:29:01 augustss Exp $	*/
d14 1
a14 1
 * 1. Redistributions of source code must retain the above copyrights
d41 1
a41 1
 * HID spec: http://www.usb.org/developers/data/usbhid10.pdf
d44 2
a45 1
/* XXX complete SPUR_UP change */
d67 1
a76 2
extern int usbdebug;
extern int ohcidebug;
d91 2
d94 2
a95 9
	USBBASEDEVICE sc_dev;		/* base device */
	usbd_device_handle sc_udev;
	usbd_interface_handle sc_iface;	/* interface */
	usbd_pipe_handle sc_intrpipe;	/* interrupt pipe */
	int sc_ep_addr;

	u_char *sc_ibuf;
	u_int8_t sc_iid;
	int sc_isize;
d97 1
a97 1
	struct hid_location *sc_loc_btn;
a106 1
#define MAX_BUTTONS	31	/* chosen because sc_buttons is u_int32_t */
d117 1
a117 1
Static void ums_intr(usbd_xfer_handle, usbd_private_handle, usbd_status);
d121 1
a121 1
Static int	ums_ioctl(void *, u_long, caddr_t, int, struct proc *);
d131 2
a132 1
USB_MATCH(ums)
d134 2
a135 3
	USB_MATCH_START(ums, uaa);
	usb_interface_descriptor_t *id;
	int size, ret;
a136 11
	usbd_status err;

        DPRINTF(("Trying ums attach\n"));
	if (uaa->iface == NULL)
		return (UMATCH_NONE);
	id = usbd_get_interface_descriptor(uaa->iface);
	if (id == NULL || id->bInterfaceClass != UICLASS_HID)
	{
	        DPRINTF(("failed class match: id == %p\n", id));
		return (UMATCH_NONE);
	}
d138 3
a140 4
	err = usbd_alloc_report_desc(uaa->iface, &desc, &size, M_TEMP);
	if (err)
	{
	        DPRINTF(("failed to get report\n"));
a141 1
	}
d143 1
a143 9
	if (hid_is_collection(desc, size,
			      HID_USAGE2(HUP_GENERIC_DESKTOP, HUG_MOUSE)))
		ret = UMATCH_IFACECLASS;
	else
		ret = UMATCH_NONE;

	free(desc, M_TEMP);
        DPRINTF(("ums attach returning: %d\n", ret));
	return (ret);
d146 2
a147 1
USB_ATTACH(ums)
d149 2
a150 4
	USB_ATTACH_START(ums, sc, uaa);
	usbd_interface_handle iface = uaa->iface;
	usb_interface_descriptor_t *id;
	usb_endpoint_descriptor_t *ed;
a153 2
	usbd_status err;
	char devinfo[1024];
d158 3
a160 29
	sc->sc_udev = uaa->device;
	sc->sc_iface = iface;
	id = usbd_get_interface_descriptor(iface);
	usbd_devinfo(uaa->device, 0, devinfo);
	USB_ATTACH_SETUP;
	DPRINTF(("%s: %s, iclass %d/%d\n", USBDEVNAME(sc->sc_dev),
	       devinfo, id->bInterfaceClass, id->bInterfaceSubClass));
	ed = usbd_interface2endpoint_descriptor(iface, 0);
	if (ed == NULL) {
		logprintf("%s: could not read endpoint descriptor\n",
		       USBDEVNAME(sc->sc_dev));
		USB_ATTACH_ERROR_RETURN;
	}

	DPRINTFN(10,("ums_attach: bLength=%d bDescriptorType=%d "
		     "bEndpointAddress=%d-%s bmAttributes=%d wMaxPacketSize=%d"
		     " bInterval=%d\n",
		     ed->bLength, ed->bDescriptorType,
		     ed->bEndpointAddress & UE_ADDR,
		     UE_GET_DIR(ed->bEndpointAddress)==UE_DIR_IN? "in" : "out",
		     ed->bmAttributes & UE_XFERTYPE,
		     UGETW(ed->wMaxPacketSize), ed->bInterval));

	if (UE_GET_DIR(ed->bEndpointAddress) != UE_DIR_IN ||
	    (ed->bmAttributes & UE_XFERTYPE) != UE_INTERRUPT) {
		logprintf("%s: unexpected endpoint\n",
		       USBDEVNAME(sc->sc_dev));
		USB_ATTACH_ERROR_RETURN;
	}
d162 1
a162 1
	quirks = usbd_get_quirks(uaa->device)->uq_flags;
d168 1
a168 3
	err = usbd_alloc_report_desc(uaa->iface, &desc, &size, M_TEMP);
	if (err)
		USB_ATTACH_ERROR_RETURN;
d171 3
a173 2
		       hid_input, &sc->sc_loc_x, &flags)) {
		logprintf("%s: mouse has no X report\n", USBDEVNAME(sc->sc_dev));
d177 2
a178 2
		logprintf("%s: X report 0x%04x not supported\n",
		       USBDEVNAME(sc->sc_dev), flags);
d183 3
a185 2
		       hid_input, &sc->sc_loc_y, &flags)) {
		logprintf("%s: mouse has no Y report\n", USBDEVNAME(sc->sc_dev));
d189 2
a190 2
		logprintf("%s: Y report 0x%04x not supported\n",
		       USBDEVNAME(sc->sc_dev), flags);
d197 1
a197 1
		       hid_input, &sc->sc_loc_z, &flags) ||
d200 1
a200 1
		       hid_input, &sc->sc_loc_z, &flags))) {
d214 1
a214 1
				hid_input, &loc_btn, 0))
a216 6
	sc->sc_loc_btn = malloc(sizeof(struct hid_location)*sc->nbuttons,
				M_USBDEV, M_NOWAIT);
	if (!sc->sc_loc_btn) {
		logprintf("%s: no memory\n", USBDEVNAME(sc->sc_dev));
		USB_ATTACH_ERROR_RETURN;
	}
d218 3
a220 2
	DPRINTF(("%s: %d buttons%s\n", USBDEVNAME(sc->sc_dev),
	       sc->nbuttons, sc->flags & UMS_Z ? " and Z dir." : ""));
d224 2
a225 12
				hid_input, &sc->sc_loc_btn[i-1], 0);

	sc->sc_isize = hid_report_size(desc, size, hid_input, &sc->sc_iid);
	sc->sc_ibuf = malloc(sc->sc_isize, M_USBDEV, M_NOWAIT);
	if (sc->sc_ibuf == NULL) {
		logprintf("%s: no memory\n", USBDEVNAME(sc->sc_dev));
		free(sc->sc_loc_btn, M_USBDEV);
		USB_ATTACH_ERROR_RETURN;
	}

	sc->sc_ep_addr = ed->bEndpointAddress;
	free(desc, M_TEMP);
a239 1
	DPRINTF(("ums_attach: size=%d, id=%d\n", sc->sc_isize, sc->sc_iid));
d245 1
a245 4
	sc->sc_wsmousedev = (void*) config_found(self, &a, wsmousedevprint);

	usbd_add_drv_event(USB_EVENT_DRIVER_ATTACH, sc->sc_udev,
			   USBDEV(sc->sc_dev));
a258 1
		break;
d269 2
a270 1
USB_DETACH(ums)
d272 1
a272 1
	USB_DETACH_START(ums, sc);
a276 9
#ifdef __riscos
	/* Disable interrupts. */
	if (sc->sc_intrpipe != NULL) {
		usbd_abort_pipe(sc->sc_intrpipe);
		usbd_close_pipe(sc->sc_intrpipe);
		sc->sc_intrpipe = NULL;
	}
#endif

a279 7
	if (rv == 0) {
		free(sc->sc_loc_btn, M_USBDEV);
		free(sc->sc_ibuf, M_USBDEV);
	}

	usbd_add_drv_event(USB_EVENT_DRIVER_DETACH, sc->sc_udev,
			   USBDEV(sc->sc_dev));
d285 1
a285 1
ums_intr(usbd_xfer_handle xfer, usbd_private_handle addr, usbd_status status)
d287 1
a287 2
	struct ums_softc *sc = addr;
	u_char *ibuf;
d293 1
a293 3
	DPRINTFN(5, ("ums_intr: sc=%p status=%d\n", sc, status));
	DPRINTFN(5, ("ums_intr: data = %02x %02x %02x\n",
		     sc->sc_ibuf[0], sc->sc_ibuf[1], sc->sc_ibuf[2]));
a294 14
	if (status == USBD_CANCELLED)
		return;

	if (status) {
		DPRINTF(("ums_intr: status=%d\n", status));
		usbd_clear_endpoint_stall_async(sc->sc_intrpipe);
		return;
	}

	ibuf = sc->sc_ibuf;
	if (sc->sc_iid != 0) {
		if (*ibuf++ != sc->sc_iid)
			return;
	}
d302 1
a302 6
#ifdef __riscos
        /* RISC OS has the buttons the right way round */
		    buttons |= (1 << i);
#else
		    buttons |= (1 << UMS_BUT(i));
#endif
a321 2
	usbd_status err;

d333 1
a333 17
	/* Set up interrupt pipe. */
#ifndef USB_DEBUG
	err = usbd_open_pipe_intr(sc->sc_iface, sc->sc_ep_addr,
		  USBD_SHORT_XFER_OK, &sc->sc_intrpipe, sc,
		  sc->sc_ibuf, sc->sc_isize, ums_intr, USBD_DEFAULT_INTERVAL);
#else
	err = usbd_open_pipe_intr(sc->sc_iface, sc->sc_ep_addr,
		  USBD_SHORT_XFER_OK, &sc->sc_intrpipe, sc,
		  sc->sc_ibuf, sc->sc_isize, ums_intr, 1);
#endif
	if (err) {
		DPRINTF(("ums_enable: usbd_open_pipe_intr failed, error=%d\n",
			 err));
		sc->sc_enabled = 0;
		return (EIO);
	}
	return (0);
d344 1
a344 1
		logprintf("ums_disable: not enabled\n");
a348 4
	/* Disable interrupts. */
	usbd_abort_pipe(sc->sc_intrpipe);
	usbd_close_pipe(sc->sc_intrpipe);

d350 1
d354 1
a354 1
ums_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p)
d363 1
a363 1
	return (-1);
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d303 1
a303 1
		 sc->sc_loc_x.pos, sc->sc_loc_x.size));
@

