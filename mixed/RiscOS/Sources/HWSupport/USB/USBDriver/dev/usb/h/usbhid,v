head	1.4;
access;
symbols
	USBDriver-1_29:1.4
	USBDriver-1_28:1.4
	USBDriver-1_27:1.4
	USBDriver-1_26:1.4
	USBDriver-1_25:1.4
	USBDriver-1_24:1.4
	USBDriver-1_23:1.4
	USBDriver-1_22:1.4
	USBDriver-1_21:1.4
	USBDriver-1_20:1.4
	USBDriver-1_19:1.4
	NetBSD-1_19:1.4
	NetBSD-1_18:1.4
	NetBSD-1_17:1.4
	NetBSD-1_16:1.4
	NetBSD-1_15:1.4
	NetBSD-1_14:1.4
	NetBSD-1_13:1.4
	NetBSD-1_12:1.4
	NetBSD-1_09-1:1.4
	NetBSD-1_11:1.4
	NetBSD-1_10:1.4
	NetBSD-1_09:1.4
	NetBSD-1_08:1.4
	NetBSD-1_07:1.4
	NetBSD-1_06:1.4
	NetBSD-1_05:1.4
	NetBSD-1_04:1.4
	NetBSD-1_03:1.4
	NetBSD-1_02:1.4
	NetBSD-1_01:1.4
	NetBSD-1_00:1.4
	NetBSD-0_99:1.4
	NetBSD-0_98:1.4
	NetBSD-0_97:1.4
	NetBSD-0_96:1.4
	NetBSD-0_95:1.4
	NetBSD-0_94:1.4
	NetBSD-0_93:1.4
	NetBSD-0_92:1.4
	NetBSD-0_91:1.4
	NetBSD-0_90:1.4
	NetBSD-0_89:1.4
	NetBSD-0_88:1.4
	NetBSD-0_87:1.4
	NetBSD-0_86:1.4
	NetBSD-0_85:1.4
	NetBSD-0_84:1.4
	NetBSD-0_83:1.4
	NetBSD-0_82:1.4
	NetBSD-0_81:1.4
	NetBSD-0_80:1.4
	NetBSD-0_79:1.4
	NetBSD-0_78:1.4
	NetBSD-0_77:1.4
	NetBSD-0_76:1.4
	NetBSD-0_75:1.4
	NetBSD-0_74:1.4
	NetBSD-0_73:1.4
	NetBSD-0_72:1.4
	NetBSD-0_71:1.4
	NetBSD-0_70:1.4
	NetBSD-0_69:1.4
	NetBSD-0_68:1.4
	NetBSD-0_67:1.4
	NetBSD-0_66:1.4
	NetBSD-0_65:1.4
	NetBSD-0_64:1.4
	NetBSD-0_63:1.4
	NetBSD-0_62:1.4
	NetBSD-0_61:1.4
	NetBSD-0_60:1.4
	NetBSD-0_59:1.4
	NetBSD-0_58:1.4
	NetBSD-0_57:1.4
	NetBSD-0_56:1.4
	NetBSD-0_55:1.4
	NetBSD-0_54:1.4
	NetBSD-0_53:1.4
	NetBSD-0_52:1.4
	NetBSD-0_51:1.3
	NetBSD-0_50:1.3
	NetBSD-0_49:1.3
	NetBSD-0_48:1.3
	NetBSD-0_47:1.3
	NetBSD-0_46:1.3
	NetBSD-0_45:1.3
	NetBSD-0_44:1.3
	NetBSD-0_43:1.3
	NetBSD-0_42:1.3
	NetBSD-0_41:1.3
	NetBSD-0_40:1.3
	NetBSD-0_39:1.3
	NetBSD-0_38:1.3
	NetBSD-0_37:1.3
	NetBSD-0_36:1.3
	NetBSD-0_35:1.3
	NetBSD-0_34:1.3
	NetBSD-0_33:1.3
	NetBSD-0_32:1.3
	NetBSD-0_31:1.3
	NetBSD-0_30:1.3
	NetBSD-0_29:1.3
	RO_5_07:1.3
	NetBSD-0_28:1.3
	NetBSD-0_27:1.3
	NetBSD-0_26:1.3
	NetBSD-0_25:1.3
	NetBSD-0_24:1.2
	NetBSD-0_23:1.2
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.2
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.4
date	2010.07.21.23.57.21;	author jlee;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.06.15.50.23;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.21.20.49.20;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.18;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@/*	$NetBSD: usbhid.h,v 1.13 2008/04/28 20:24:01 martin Exp $	*/
/*	$FreeBSD: src/sys/dev/usb/usbhid.h,v 1.7 1999/11/17 22:33:51 n_hibma Exp $ */

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef _USBHID_H_
#define _USBHID_H_

#define UR_GET_HID_DESCRIPTOR	0x06
#define  UDESC_HID		0x21
#define  UDESC_REPORT		0x22
#define  UDESC_PHYSICAL		0x23
#define UR_SET_HID_DESCRIPTOR	0x07
#define UR_GET_REPORT		0x01
#define UR_SET_REPORT		0x09
#define UR_GET_IDLE		0x02
#define UR_SET_IDLE		0x0a
#define UR_GET_PROTOCOL		0x03
#define UR_SET_PROTOCOL		0x0b

typedef struct usb_hid_descriptor {
	uByte		bLength;
	uByte		bDescriptorType;
	uWord		bcdHID;
	uByte		bCountryCode;
	uByte		bNumDescriptors;

#if defined(__CC_NORCROFT) && defined(DISABLE_PACKED)
        uByte         bHIDDescriptorType;
        uWord           wDescriptorLength;
#else
	struct {
		uByte		bDescriptorType;
		uWord		wDescriptorLength;
	} descrs[1];
#endif
} UPACKED usb_hid_descriptor_t;
#define USB_HID_DESCRIPTOR_SIZE(n) (9+(n)*3)

/* Usage pages */
#define HUP_UNDEFINED		0x0000
#define HUP_GENERIC_DESKTOP	0x0001
#define HUP_SIMULATION		0x0002
#define HUP_VR_CONTROLS		0x0003
#define HUP_SPORTS_CONTROLS	0x0004
#define HUP_GAMING_CONTROLS	0x0005
#define HUP_KEYBOARD		0x0007
#define HUP_LEDS		0x0008
#define HUP_BUTTON		0x0009
#define HUP_ORDINALS		0x000a
#define HUP_TELEPHONY		0x000b
#define HUP_CONSUMER		0x000c
#define HUP_DIGITIZERS		0x000d
#define HUP_PHYSICAL_IFACE	0x000e
#define HUP_UNICODE		0x0010
#define HUP_ALPHANUM_DISPLAY	0x0014
#define HUP_MONITOR		0x0080
#define HUP_MONITOR_ENUM_VAL	0x0081
#define HUP_VESA_VC		0x0082
#define HUP_VESA_CMD		0x0083
#define HUP_POWER		0x0084
#define HUP_BATTERY_SYSTEM	0x0085
#define HUP_BARCODE_SCANNER	0x008b
#define HUP_SCALE		0x008c
#define HUP_CAMERA_CONTROL	0x0090
#define HUP_ARCADE		0x0091
#define HUP_MICROSOFT		0xff00

/* Usages, generic desktop */
#define HUG_POINTER		0x0001
#define HUG_MOUSE		0x0002
#define HUG_JOYSTICK		0x0004
#define HUG_GAME_PAD		0x0005
#define HUG_KEYBOARD		0x0006
#define HUG_KEYPAD		0x0007
#define HUG_X			0x0030
#define HUG_Y			0x0031
#define HUG_Z			0x0032
#define HUG_RX			0x0033
#define HUG_RY			0x0034
#define HUG_RZ			0x0035
#define HUG_SLIDER		0x0036
#define HUG_DIAL		0x0037
#define HUG_WHEEL		0x0038
#define HUG_HAT_SWITCH		0x0039
#define HUG_COUNTED_BUFFER	0x003a
#define HUG_BYTE_COUNT		0x003b
#define HUG_MOTION_WAKEUP	0x003c
#define HUG_VX			0x0040
#define HUG_VY			0x0041
#define HUG_VZ			0x0042
#define HUG_VBRX		0x0043
#define HUG_VBRY		0x0044
#define HUG_VBRZ		0x0045
#define HUG_VNO			0x0046
#define HUG_SYSTEM_CONTROL	0x0080
#define HUG_SYSTEM_POWER_DOWN	0x0081
#define HUG_SYSTEM_SLEEP	0x0082
#define HUG_SYSTEM_WAKEUP	0x0083
#define HUG_SYSTEM_CONTEXT_MENU	0x0084
#define HUG_SYSTEM_MAIN_MENU	0x0085
#define HUG_SYSTEM_APP_MENU	0x0086
#define HUG_SYSTEM_MENU_HELP	0x0087
#define HUG_SYSTEM_MENU_EXIT	0x0088
#define HUG_SYSTEM_MENU_SELECT	0x0089
#define HUG_SYSTEM_MENU_RIGHT	0x008a
#define HUG_SYSTEM_MENU_LEFT	0x008b
#define HUG_SYSTEM_MENU_UP	0x008c
#define HUG_SYSTEM_MENU_DOWN	0x008d

/* Usages Digitizers */
#define HUD_UNDEFINED		0x0000
#define HUD_TIP_PRESSURE	0x0030
#define HUD_BARREL_PRESSURE	0x0031
#define HUD_IN_RANGE		0x0032
#define HUD_TOUCH		0x0033
#define HUD_UNTOUCH		0x0034
#define HUD_TAP			0x0035
#define HUD_QUALITY		0x0036
#define HUD_DATA_VALID		0x0037
#define HUD_TRANSDUCER_INDEX	0x0038
#define HUD_TABLET_FKEYS	0x0039
#define HUD_PROGRAM_CHANGE_KEYS	0x003a
#define HUD_BATTERY_STRENGTH	0x003b
#define HUD_INVERT		0x003c
#define HUD_X_TILT		0x003d
#define HUD_Y_TILT		0x003e
#define HUD_AZIMUTH		0x003f
#define HUD_ALTITUDE		0x0040
#define HUD_TWIST		0x0041
#define HUD_TIP_SWITCH		0x0042
#define HUD_SEC_TIP_SWITCH	0x0043
#define HUD_BARREL_SWITCH	0x0044
#define HUD_ERASER		0x0045
#define HUD_TABLET_PICK		0x0046

/* Usages LEDs */
#define HUD_LED_NUM_LOCK	0x0001
#define HUD_LED_CAPS_LOCK	0x0002
#define HUD_LED_SCROLL_LOCK	0x0003
#define HUD_LED_COMPOSE		0x0004
#define HUD_LED_KANA		0x0005

/* Usages, Consumer */
#define HUC_AC_PAN		0x0238

#define HID_USAGE2(p, u) (((p) << 16) | u)
#define HID_GET_USAGE(u) ((u) & 0xffff)
#define HID_GET_USAGE_PAGE(u) (((u) >> 16) & 0xffff)

#define UHID_INPUT_REPORT 0x01
#define UHID_OUTPUT_REPORT 0x02
#define UHID_FEATURE_REPORT 0x03

#define HCOLL_PHYSICAL		0
#define HCOLL_APPLICATION	1
#define HCOLL_LOGICAL		2

/* Bits in the input/output/feature items */
#define HIO_CONST	0x001
#define HIO_VARIABLE	0x002
#define HIO_RELATIVE	0x004
#define HIO_WRAP	0x008
#define HIO_NONLINEAR	0x010
#define HIO_NOPREF	0x020
#define HIO_NULLSTATE	0x040
#define HIO_VOLATILE	0x080
#define HIO_BUFBYTES	0x100

#endif /* _USBHID_H_ */
@


1.3
log
@  New versions from John.
Detail:
  * All modules will now rmkill/rmload more reliably
  * Keyboard driver disables kernel debounce on new enough kernels, needed
    for many PS2-USB adaptors, bar code scanners etc
  * Mouse driver will scroll wheel scroll any windows that do respond to
    scroll events, otherwise it issues PointerReason_WheelChange (9) to an
    external WimpScroll module
  * Several bugs and an interrupt hole resolved
Admin:
  Tested at Framlingham.

Version 0.25. Tagged as 'NetBSD-0_25'
@
text
@d1 1
a1 1
/*	$NetBSD: usbhid.h,v 1.11 2001/12/28 00:20:24 augustss Exp $	*/
d180 3
@


1.2
log
@Merge of Dan Ellis's USB2 sources.

Version 0.22. Tagged as 'NetBSD-0_22'
@
text
@d64 1
a64 1
#ifdef __riscos
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/*	$NetBSD: usbhid.h,v 1.8 2000/05/30 10:10:18 augustss Exp $	*/
d63 1
d65 2
a66 2
        uByte		bHIDDescriptorType;
	uWord		wDescriptorLength;
d77 1
d80 4
d86 3
d90 14
d148 1
d156 5
d173 10
a182 1
#define HID_USAGE2(p,u) (((p) << 16) | u)
d187 4
@

