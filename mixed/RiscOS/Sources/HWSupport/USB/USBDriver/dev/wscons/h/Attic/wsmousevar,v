head	1.4;
access;
symbols
	USBDriver-1_19:1.3
	NetBSD-1_19:1.3
	NetBSD-1_18:1.3
	NetBSD-1_17:1.3
	NetBSD-1_16:1.3
	NetBSD-1_15:1.3
	NetBSD-1_14:1.3
	NetBSD-1_13:1.3
	NetBSD-1_12:1.3
	NetBSD-1_09-1:1.3
	NetBSD-1_11:1.3
	NetBSD-1_10:1.3
	NetBSD-1_09:1.3
	NetBSD-1_08:1.3
	NetBSD-1_07:1.3
	NetBSD-1_06:1.3
	NetBSD-1_05:1.3
	NetBSD-1_04:1.3
	NetBSD-1_03:1.3
	NetBSD-1_02:1.3
	NetBSD-1_01:1.3
	NetBSD-1_00:1.3
	NetBSD-0_99:1.3
	NetBSD-0_98:1.3
	NetBSD-0_97:1.3
	NetBSD-0_96:1.3
	NetBSD-0_95:1.3
	NetBSD-0_94:1.3
	NetBSD-0_93:1.3
	NetBSD-0_92:1.3
	NetBSD-0_91:1.3
	NetBSD-0_90:1.3
	NetBSD-0_89:1.3
	NetBSD-0_88:1.3
	NetBSD-0_87:1.3
	NetBSD-0_86:1.3
	NetBSD-0_85:1.3
	NetBSD-0_84:1.3
	NetBSD-0_83:1.3
	NetBSD-0_82:1.3
	NetBSD-0_81:1.3
	NetBSD-0_80:1.3
	NetBSD-0_79:1.3
	NetBSD-0_78:1.3
	NetBSD-0_77:1.3
	NetBSD-0_76:1.3
	NetBSD-0_75:1.3
	NetBSD-0_74:1.3
	NetBSD-0_73:1.3
	NetBSD-0_72:1.3
	NetBSD-0_71:1.3
	NetBSD-0_70:1.3
	NetBSD-0_69:1.3
	NetBSD-0_68:1.3
	NetBSD-0_67:1.3
	NetBSD-0_66:1.3
	NetBSD-0_65:1.3
	NetBSD-0_64:1.3
	NetBSD-0_63:1.3
	NetBSD-0_62:1.3
	NetBSD-0_61:1.3
	NetBSD-0_60:1.3
	NetBSD-0_59:1.3
	NetBSD-0_58:1.3
	NetBSD-0_57:1.3
	NetBSD-0_56:1.3
	NetBSD-0_55:1.3
	NetBSD-0_54:1.3
	NetBSD-0_53:1.3
	NetBSD-0_52:1.2
	NetBSD-0_51:1.1
	NetBSD-0_50:1.1
	NetBSD-0_49:1.1
	NetBSD-0_48:1.1
	NetBSD-0_47:1.1
	NetBSD-0_46:1.1
	NetBSD-0_45:1.1
	NetBSD-0_44:1.1
	NetBSD-0_43:1.1
	NetBSD-0_42:1.1
	NetBSD-0_41:1.1
	NetBSD-0_40:1.1
	NetBSD-0_39:1.1
	NetBSD-0_38:1.1
	NetBSD-0_37:1.1
	NetBSD-0_36:1.1
	NetBSD-0_35:1.1
	NetBSD-0_34:1.1
	NetBSD-0_33:1.1
	NetBSD-0_32:1.1
	NetBSD-0_31:1.1
	NetBSD-0_30:1.1
	NetBSD-0_29:1.1
	RO_5_07:1.1
	NetBSD-0_28:1.1
	NetBSD-0_27:1.1
	NetBSD-0_26:1.1
	NetBSD-0_25:1.1
	NetBSD-0_24:1.1
	NetBSD-0_23:1.1
	NetBSD-0_21-1_22_2_1:1.1
	NetBSD-0_22:1.1
	USB1:1.1.0.2
	NetBSD-0_21:1.1
	NetBSD-0_20:1.1
	NetBSD-0_19:1.1
	NetBSD-0_18:1.1
	NetBSD-0_17:1.1
	NetBSD-0_16:1.1
	NetBSD-0_15:1.1
	NetBSD-0_14:1.1
	NetBSD-0_13:1.1
	NetBSD-0_12:1.1
	NetBSD-0_11:1.1
	NetBSD-0_10:1.1
	NetBSD-0_09:1.1
	NetBSD-0_08:1.1
	NetBSD-0_07:1.1
	NetBSD-0_06:1.1
	NetBSD-0_05:1.1
	NetBSD-0_04:1.1
	NetBSD-0_03:1.1
	NetBSD-0_02:1.1
	NetBSD-0_01:1.1;
locks; strict;
comment	@# @;


1.4
date	2017.07.30.11.37.20;	author rool;	state dead;
branches;
next	1.3;
commitid	0fHS8wSWQgNvif1A;

1.3
date	2010.09.14.21.07.48;	author jlee;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.21.23.57.23;	author jlee;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.28.09.55.19;	author dellis;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove OHCIDriver & EHCIDriver as targets
Detail:
  Makefile and !Mk* updated, and corresponding unused files put in the attic.
  Add an interim OHCIHALLib and EHCIHALLib target so that the HAL library variant still builds.
  Split messages into CmdHelp and Messages per a normal C component.
  Remove unused wsconsio/wsmousevar porting headers, no longer used.
Admin:
  Submission for USB bounty.
  Note, the version number of the resulting module will jump to match the top level VersionNum file.

Version 1.20. Tagged as 'USBDriver-1_20'
@
text
@/* $NetBSD: wsmousevar.h,v 1.11 2009/05/12 14:47:55 cegger Exp $ */

/*
 * Copyright (c) 1996, 1997 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * WSMOUSE interfaces.
 */

/*
 * Mouse access functions (must be provided by all mice).
 *
 * There is a "void *" cookie provided by the mouse driver associated
 * with these functions, which is passed to them when they are invoked.
 */
struct wsmouse_accessops {
	int	(*enable)(void *);
	int	(*ioctl)(void *, u_long, void *, int, struct lwp *);
	void	(*disable)(void *);
};

/*
 * Attachment information provided by wsmousedev devices when attaching
 * wsmouse units.
 */
struct wsmousedev_attach_args {
	const struct wsmouse_accessops *accessops;	/* access ops */
	void	*accesscookie;				/* access cookie */
};

#ifndef __riscos
#include "locators.h"

#define	wsmousedevcf_mux	cf_loc[WSMOUSEDEVCF_MUX]
#endif

/*
 * Autoconfiguration helper functions.
 */
int	wsmousedevprint(void *, const char *);

/*
 * Callbacks from the mouse driver to the wsmouse interface driver.
 */
#define WSMOUSE_INPUT_DELTA		0
#define WSMOUSE_INPUT_ABSOLUTE_X	(1<<0)
#define WSMOUSE_INPUT_ABSOLUTE_Y	(1<<1)
#define WSMOUSE_INPUT_ABSOLUTE_Z	(1<<2)
#define WSMOUSE_INPUT_ABSOLUTE_W	(1<<3)
#ifndef __riscos
void	wsmouse_input(device_t, u_int, int, int, int, int, u_int);
#endif
@


1.3
log
@Update hid.c, ums.c to latest (ish), update usbmouse.c, add TouchBook touchpad fix
Detail:
  dev/usb/c/hid, dev/usb/h/hid, dev/usb/c/ums - Updated to latest NetBSD versions (actually the version that was used for the recent core/EHCI update, so not 100% latest)
  build/c/usbmouse, dev/wscons/h/wsmousevar - Updated RISC OS USB mouse driver to be similar to the new NetBSD version. Also reformatted file to use tab char instead of inconsistent numbers of spaces for indentation.
  build/c/usbmouse, dev/usb/usbdevs - Added fix for broken TouchBook touchpad behaviour.
Admin:
  Tested with various mice on a beagleboard, and with the TouchBook touchpad.
  We should now have support for the W axis of mice, but that code is untested since I don't have any suitable mice to hand.


Version 0.53. Tagged as 'NetBSD-0_53'
@
text
@@


1.2
log
@Update EHCI driver to NetBSD latest (as of 10/07/2010), improve DeviceFS interface
Detail:
  EHCI driver update:
    dev/usb/c/ehci - Updated to latest NetBSD version, except for revisions 1.134 and 1.135 which are too invasive to merge in without updating the rest of the USB stack. This new version brings lots of bug fixes, and adds (untested on RISC OS) support for EHCI isochronous transfers.
    dev/usb/h/ehcivar - Updated to latest NetBSD version, except for the sc_bus splitting that was held back from the ehci.c update
    dev/usb/h/usb, dev/usb/h/usbdi, dev/usb/usbdivar - partial update to latest as required/possible
    dev/usb/c/usb_quirks, dev/usb/h/ehcireg, dev/usb/h/usb_mem, dev/usb/h/usb_quirks, dev/usb/h/usbhid, dev/usb/usbdevs, dev/usb/devlist2h.awk, dev/wscons/h/wsconsio, dev/wscons/h/wsmousevar - Updated to latest NetBSD versions
    dev/usb/c/usbroothub_subr, dev/usb/h/usbroothub_subr - New files brought in from NetBSD sources for use with new EHCI driver
    build/objehcidriver - Added usbroorhub_subr to EHCI driver
    dev/usb/h/usb_port - Added extra dummy functions as required by new EHCI driver
    dev/build/c/port - Added extra parameter to callout_init as required by new EHCI driver
  DeviceFS improvements:
    build/c/usbmodule - Added DeviceFSCallDevice_GetHandles2 as a replacement for Thomas Milius's backwards-incompatible GetHandles changes. Added DeviceFSCallDevice_GetSetOptions call to control RX padding and TX force-short-xfer features. These features can also be controlled at endpoint creation time by new fields in the filename. Also fixed packet padding to not fill the buffer with garbage or potentially crash when the padded area is more than one packet in length.
  New bus registration API:
    Changes made to the data structures that are shared between the modules means that new checks are needed to ensure USB modules with incompatible APIs are not used with one another.
    build/h/usbdivar - Since this seems to be the file containing the main structures that are shared, it now has a #define at the top indicating the first version of the USBDriver module that implemented the data structures within. This version number is used to check that the driver modules are compatible.
    build/cmhg/usbmodhead, build/h/usbdriver, build/c/usbmodule - Add a new SWI, USBDriver_Version, to return the version number of the USBDriver module. Used for both intra-stack API version checks and can be useful for external code that wants to query DeviceFS feature availability.
    build/c/usbmodule, build/c/ehcimodule, build/c/ohcimodule - Updated USBDriver_RegisterBus SWI and the code that calls it to pass the API version number (as defined in usbdivar.h) to USBDriver when attempting to reigster the bus. USBDriver then ensures the version matches that of itself, and if not refuses to allow the bus to register. EHCI & OHCI modules also check that USBDriver is new enough to implement this behaviour via the USBDriver_Version SWI.
  And finally:
    build/version - Incremented module version numbers.
    build/doc/usb - Updated with details of new features
Admin:
  Tested in ROM softload on Iyonix & beagleboard. Beagleboard hub issues seem to be resolved, and there are no new bugs that I can see.


Version 0.52. Tagged as 'NetBSD-0_52'
@
text
@d77 1
d79 1
@


1.1
log
@Import of USB driver suitable for generic PCI based OHCI controllers.
Correction of spelling of busses to buses (noun plural).
OHCIdriver only responds to PCI service call to lookup vendor name when
the device is of class OHCI controller.

Version 0.01. Tagged as 'NetBSD-0_01'
@
text
@d1 1
a1 1
/* $NetBSD: wsmousevar.h,v 1.4 2000/01/08 02:57:24 takemura Exp $ */
d44 3
a46 4
	int	(*enable) __P((void *));
	int	(*ioctl) __P((void *v, u_long cmd, caddr_t data, int flag,
		    struct proc *p));
	void	(*disable) __P((void *));
d58 2
a59 1
//#include "locators.h"
d61 2
a62 1
//#define	wsmousedevcf_mux	cf_loc[WSMOUSEDEVCF_MUX]
d67 1
a67 1
int	wsmousedevprint __P((void *, const char *));
d76 2
a77 2
void	wsmouse_input __P((struct device *kbddev, u_int btns,
			   int x, int y, int z, u_int flags));
@

