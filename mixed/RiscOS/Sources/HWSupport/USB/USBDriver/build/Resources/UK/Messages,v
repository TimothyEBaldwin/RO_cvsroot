head	1.2;
access;
symbols
	USBDriver-1_29:1.2
	USBDriver-1_28:1.1
	USBDriver-1_27:1.1
	USBDriver-1_26:1.1
	USBDriver-1_25:1.1
	USBDriver-1_24:1.1
	USBDriver-1_23:1.1
	USBDriver-1_22:1.1
	USBDriver-1_21:1.1
	USBDriver-1_20:1.1;
locks; strict;
comment	@# @;


1.2
date	2018.05.19.08.36.05;	author rool;	state Exp;
branches;
next	1.1;
commitid	TZl4zRwaa8mtSSCA;

1.1
date	2017.07.30.11.37.10;	author rool;	state Exp;
branches;
next	;
commitid	0fHS8wSWQgNvif1A;


desc
@@


1.2
log
@Fix for alternate selection
Detail:
  1) If the alt setting had been changed from 0 it couldn't be changed back to 0.
  2) The alt value that usbd_set_interface takes should be an index into
     the number of alternate settings (altidx) not idesc->bAlternateSetting.
  3) usbd_set_interface returns an error (USBD_IN_USE) if pipes are open
     on the interface when you try to change it. We should return this error
     if the alternate setting can't be changed as the alternate setting would
     be wrong.
  Replace uses of usbd_set_interface() with a new function which correctly maps alternate number to alternate index, and propagates errors back to the caller.
Admin:
  Submission from Colin Granville.

Version 1.29. Tagged as 'USBDriver-1_29'
@
text
@#{Default}
# CCxx errors mustn't be tokenised
CC00:Normal Completion
CC01:In Progress
CC02:Pending requests
CC03:Not started
CC04:Invalid value
CC05:No memory
CC06:Cancelled
CC07:Bad address
CC08:In use
CC09:No address
CC10:Set address failed
CC11:No power
CC12:Too deep
CC13:IO Error
CC14:Not configured
CC15:Timeout
CC16:Short transfer
CC17:Stalled
CC18:Interrupted

#{DictTokens}
NoDevice:No such USB device
NoInterface:Couldn't find interface
NoEndpoint:Cannot find a valid endpoint
NoAlternate:Alternate setting could not be selected
EndpointUsed:Endpoint in use
BadPipe:Couldn't open pipe
BadXfer:Couldn't allocate transfer
NoStream:No such stream
BadRequest:Bad request
NotRootP:Can't reset root hub
BadDevice:USB device failed to enumerate
IncVers:Incompatible USBDriver version
XferFailed:USB transfer failed: %0
QuirkCmd:Unrecognised quirk operation
NoSuchQuirk:Quirk not found
QuirkMem:Too many existing quirks
DefVID:Vendor ID %0
DefPID:Product ID %0
DevHdr:No._Bus_Dev_Class_Description
QrkHdr:Vendor_Product_Device_Flags
BusHdr:Bus_Control_Isochronous_Bulk_Interrupt
BusTxf:Transfers (%0 buses)

DILen:----LONGEST----
DIRel:USB release
DICls:Device class
DISub:Device subclass
DIPrt:Device protocol
DIMxP:Max packet size
DIVid:Vendor ID
DIPid:Product ID
DIDid:Device ID
DICfg:# of configs
DIMfg:Manufacturer
DIPrd:Product
DISer:Serial number
DISpd:Speed

CILen:----LONGEST----
CICur:Current config
CIQty:# of interfaces
CICfg:Config value
CINom:Name
CIPwr:Maximum power
CIAtt:Attributes

IFace:Interface
IEndp:Endpoint
IHidd:Human interface device

ECtrl:Control
EIsoY:Isochronous asynchronous
EIsoA:Isochronous adaptive
EIsoS:Isochronous synchronous
EBulk:Bulk
EIntr:Interrupt

Att80:Bus powered
Att40:Self powered
Att20:Remote wakeup

UByt:bytes
UFrm:frames
UHTy:HID descriptor type
UCls:class
ULen:length
UCcd:country
UDsc:Descriptor

Spd1:Low
Spd2:Full
Spd3:High
Spd4:Super
Spd?:Unknown

Mouse:USB mouse
@


1.1
log
@Remove OHCIDriver & EHCIDriver as targets
Detail:
  Makefile and !Mk* updated, and corresponding unused files put in the attic.
  Add an interim OHCIHALLib and EHCIHALLib target so that the HAL library variant still builds.
  Split messages into CmdHelp and Messages per a normal C component.
  Remove unused wsconsio/wsmousevar porting headers, no longer used.
Admin:
  Submission for USB bounty.
  Note, the version number of the resulting module will jump to match the top level VersionNum file.

Version 1.20. Tagged as 'USBDriver-1_20'
@
text
@d27 1
@

