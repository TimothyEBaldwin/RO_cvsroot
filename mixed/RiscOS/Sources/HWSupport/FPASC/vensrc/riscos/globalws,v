head	4.5;
access;
symbols
	FPASC-4_36:4.5
	FPASC-4_35:4.5
	FPASC-4_34:4.5
	FPASC-4_33-1:4.5
	FPASC-4_33:4.5
	FPASC-4_32:4.5
	FPASC-4_31:4.4
	FPASC-4_30:4.4
	FPASC-4_29:4.4
	FPASC-4_28-2:4.4
	FPASC-4_28:4.4
	FPASC-4_27:4.4
	FPASC-4_26:4.4
	FPASC-4_25:4.4
	FPASC-4_24:4.4
	FPASC-4_23:4.4
	RO_5_07:4.4
	FPASC-4_22:4.4
	FPASC-4_21:4.4
	FPASC-4_20:4.4
	FPASC-4_19:4.4
	FPASC-4_18:4.4
	FPASC-4_17:4.4
	FPASC-4_16:4.4
	FPASC-4_15:4.4
	FPASC-4_14:4.4
	dellis_autobuild_BaseSW:4.3
	FPASC-4_13:4.3
	FPASC-4_12:4.3
	FPASC-4_10-4_3_2_2:4.2.2.1
	sbrodie_sedwards_16Mar2000:4.2
	kbracey_32bit_merge:4.2
	FPASC-4_11:4.2
	FPASC-4_10-4_3_2_1:4.2
	kbracey_32bit:4.2.0.2
	dcotton_autobuild_BaseSW:4.4
	FPASC-4_10:4.2
	Ursula_merge:4.1.4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	nicke_FPASC-4_05:4.1.7.1
	FPASC-4_09:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2013.05.31.19.00.21;	author jlee;	state Exp;
branches;
next	4.4;
commitid	MkHF99Q2X6ELDORw;

4.4
date	2000.10.02.16.02.01;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2000.03.24.10.53.17;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	99.08.03.17.57.02;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.35.56;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.35.56;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.25.12;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	98.03.27.10.35.19;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.52.03;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.46.48;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Fix interaction with undefined instruction environment handler in pre-RISC OS 3.5 builds
Detail:
  Code restructuring performed in FPASC-4_12 resulted in an unintentional change in behaviour on ARM2/ARM3 systems when FPEmulator attempts to pass on an abort to the next claimant of the undefined instruction vector.
  Specifically, FPEmulator's startup code was making a note of the address of the current undef environment handler, instead of the address of the pointer to the current handler. This meant that if OS_ChangeEnvironment was used to change the handler once FPEmulator had been loaded, the new handler would never get called - only the old handler would get called.
  On later systems this bug didn't occur as (a) the kernel has a veneer around the undef environment handler (instead of branching straight to the current claimant from the undef vector), and (b) OS_ClaimProcessorVector tells FPEmulator directly where to go next instead of the module having to try and guess for itself.
  File changes:
  - vensrc/riscos/start: Adjust handling of "LDR PC,xxx" undef vector so that the address being loaded from is cached instead of the contents of the address. Construct special code to use when the FPEmulator context is disabled and we want to immediately pass along the abort.
  - vensrc/riscos/globalws: Reserve workspace for storing the passalong code
Admin:
  Tested on RISC OS 3.1 under ArcEm
  ARM3 detection routines which rely on the undef environment handler now work correctly instead of failing with undefined instruction errors
  No impact on builds targeting RISC OS 3.5+ as all changes are wrapped in [ :LNOT: Arm600 ]


Version 4.32. Tagged as 'FPASC-4_32'
@
text
@; >riscos.globalws
;
; Copyright (c) 1993 Acorn Computers Ltd., Cambridge, England.
;
; Assembler source for FPA support code and emulator
; ==================================================
; Global workspace declarations
;

UIHandler       #       4               ; LDR PC,CoreVector (or VeneerVector)
   [ Arm600 :LAND: {CONFIG}=26
VeneerVector    #       4               ; UI_veneer (or = OldVector if removed)
VeneerOutVector #       4               ; PassAlong_Veneer
   ]
CoreVector      #       4               ; FPASC's handler (or = OldVector if removed)
OldVector       #       4               ; original UI handler

   [ :LNOT: Arm600
LDRPassalong    #       20              ; passalong code for when our vector removed and original instr was LDR PC form
LDRPassalongDest #      4               ; address the original LDR was loading
OldUIInstr      #       4               ; original instruction at &00000004
   ]

SVCStack        #       4               ; top of SVC stack


SysIs32bit      #       1               ; system is 32-bit
Unused		#	3

   [ Arm600 :LAND: {CONFIG}=26
SavedLR         #       4               ; used in undef32 -> svc26 conversion
SavedPSR        #       4               ;  ""  ""    ""   ""  ""       ""
   ]

MessageBlock    #       16              ; MessageTrans descriptor

FPExceptionDump #       4+8*12          ; FP register dump on exceptions
    [ MultipleContexts
DefaultContext	#	ContextLength	; default context created on startup
    ]


        END

;
; EOF veneer.globalws
;
@


4.4
log
@* Fixes to allow correct builds for 26-bit systems (RISC OS 3.1) and 32-bit
  systems using the 32-bit core (RISC OS 3.5-3.7).

Version 4.14. Tagged as 'FPASC-4_14'
@
text
@d19 2
@


4.3
log
@  Multiple context version of FP emulator and FPA support code - FP in
  callbacks and interrupts can now be yours.

  Exception dumps now available (integer and FP).

Detail:
* Changed to multiple-context version of the core. This will allow floating-
  point to be used safely in callbacks and interrupt routines (as long as
  you call the appropriate context changing SWIs). This activates the
  dormant SWIs FPEmulator_ChangeContext, FPEmulator_ContextLength and
  FPEmulator_InitContext. FPEmulator_DeactivateContext and
  FPEmulator_ActivateContext now have full functionality.

* Added new SWI interfaces to core: FPEmulator_Abort, FPEmulator_LoadContext
  and FPEmulator_SaveContext.

* On FP exceptions, integer registers are copied into the exception dump area.
  (TO DO: registers are USR mode ones - should take pains to figure out
  SVC or IRQ ones as required).

* The FPEmulator now has an exception dump area for floating point registers -
  a suitable version of Debugger will show these with *ShowFPRegs.

* FPEmulator_ChangeContext and FPEmulator_DeactivateContext now return -1
  for the default context.

* Run time detection of SVC stack position added.

* No longer creates a MessageTrans descriptor on the stack.

* Removed broken STM^ fudge from the FPA veneer, as the only StrongARMs that
  need it can't use the FPA.

* Fixed a typo in core_abort.

* Stopped continuous emulation runs crossing 4K page boundaries, with a view
  to improving abort handling.

* Use of DREG debugging macros fixed (line endings were being inserted in the
  wrong place).

* Prototype code to catch aborts inside the emulator and change the registers
  to make it look like the emulated instruction aborted. This is cute, but
  causes problems with anything like Ursula's lazy task-swapping. Really this
  needs to be done only on fatal aborts. Compiled out for now.

Version 4.12. Tagged as 'FPASC-4_12'
@
text
@d10 5
a14 1
UIHandler       #       4               ; LDR PC,CoreVector
d28 1
a28 3
    [ Arm600
      [ {CONFIG}=26

d31 1
a31 2
      ]
    ]
@


4.2
log
@Ursula branch merged. This contains:
  Use of UMULL (compiled out).
  Service call table.
  Runs in UND32 mode (requires latest Kernel), giving a speed boost.

Version 4.10. Tagged as 'FPASC-4_10'
@
text
@d10 12
a21 3
UIVector        #       4               ; original Undef. Instr. vector
OnVector	#	1		; module is installed on undefined
					; instruction vector
a24 2
CoreVector      #       4               ; address of core's UI handler

a25 1
UnwantedAddr    #       4               ; address of PassAlong_veneer routine
a29 2
    |
UIBranchDest    #       4               ; target for B <addr> type vector
d32 3
@


4.1
log
@Initial revision
@
text
@d11 3
a13 1
FPAFlags	#	4		; flag bits
d18 1
d23 1
d28 4
a31 5
;
; bits within flags word
;
OnVector	*	(1 :SHL: 0)	; module is installed on undefined
					; instruction vector
@


4.1.4.1
log
@incorporate KBracey changes:
  Use long multiply (assumes long multiply; won't work on ARM 610,710)
  Compile with 32-bit APCS for better efficiency (requires Ursula kernel)
  Also compile for soft FP only (suit SA110)
update module format to Ursula service handler table
@
text
@d11 1
a11 3
OnVector	#	1		; module is installed on undefined
					; instruction vector
Unused		#	3
a15 1
      [ {CONFIG}=26
a19 1
      ]
d24 5
a28 4
    [ MultipleContexts
DefaultContext	#	ContextLength	; default context created on startup
    ]

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
