head	1.6;
access;
symbols
	SCSISoftUSB-0_25-1:1.6
	SCSISoftUSB-0_25:1.6
	SCSISoftUSB-0_24:1.6
	SCSISoftUSB-0_23:1.6
	SCSISoftUSB-0_22:1.6
	SCSISoftUSB-0_21:1.6
	SCSISoftUSB-0_20:1.6
	SCSISoftUSB-0_19:1.6
	SCSISoftUSB-0_18:1.6
	SCSISoftUSB-0_17:1.6
	SCSISoftUSB-0_16:1.6
	SCSISoftUSB-0_15:1.5
	SCSISoftUSB-0_14:1.5
	SCSISoftUSB-0_13:1.4
	SCSISoftUSB-0_12:1.4
	SCSISoftUSB-0_11:1.4
	SCSISoftUSB-0_10:1.3
	SCSISoftUSB-0_09:1.3
	SCSISoftUSB-0_08:1.3
	SCSISoftUSB-0_07:1.3
	SCSISoftUSB-0_06:1.3
	SCSISoftUSB-0_05:1.2
	SCSISoftUSB-0_04:1.2
	SCSISoftUSB-0_03:1.2
	SCSISoftUSB-0_02:1.1.1.1
	SCSISoftUSB-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2012.06.03.14.25.59;	author jlee;	state Exp;
branches;
next	1.5;
commitid	tugyl8mcBbH3Lg7w;

1.5
date	2011.07.24.22.09.38;	author jlee;	state Exp;
branches;
next	1.4;
commitid	hW9XzNMbX8MQrPsv;

1.4
date	2009.10.22.01.19.58;	author jlee;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.05.00.44.42;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.03.10.46.37;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.14.16.49.27;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.14.16.49.27;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fix temporary RMA corruption while inside RTSupport routine
Detail:
  Previously the RTSupport routine would execute in SYS mode, and use assembler veneers to make direct calls to the buffer manager.
  Despite being against the buffer manager spec (only IRQ or SVC should be used, according to PRM 5a), the buffer manager was coping with SYS mode calls fine. However the buffer manager would call DeviceFS, and DeviceFS would then call USBDriver, entering the module via one of CMHG's generic veneers.
  These veneers attempt to switch to SVC mode on entry, but they do so by only interacting with the bottom two bits of the PSR - so the CPU was remaining in SYS mode.
  Although this isn't a problem in and of itself, immediately after the mode change comes some code to set up the static relocation offsets at the SVC stack limit.
  This is done by aligning the stack pointer to a MB boundary. If we were in SVC mode this would be fine, but since we're still in SYS mode we're using a stack that was allocated by SCSISoftUSB and isn't aligned to a boundary at all; thus resulting in two words of RMA being swapped out with something completely different while the USBDriver code executes.
  With RTSupport in ROM this will most likely end up being the first two words of the heap - which is enough to stop OS_Module from manipulating the heap (the heap manager will see it as corrupt), but without causing any lasting damage.
  To solve this issue we now run the entire routine in SVC mode, using the MB-aligned SVC stack that RTSupport provides for us.
  File changes:
  c/global, c/cmodule, h/global - Get rid of the SYS mode stack since we no longer need it
  c/glue, h/glue - Extern RTSupportWrapper so it can be called from the assembler veneer. Tweak RT_Register parameters to pass in the relocation offsets (and no SYS stack)
  s/asm, h/asm - Added asm_RTSupportWrapper to get us into and out of SVC mode around the call to RTSupportWrapper. Also sets up our stack limit & relocation offsets within the SVC stack.
Admin:
  Tested in BCM2835 ROM


Version 0.16. Tagged as 'SCSISoftUSB-0_16'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#if !defined(SCSISOFTUSB_GLUE_H) /* file used if not already included */
#define SCSISOFTUSB_GLUE_H
/*****************************************************************************
* $Id: glue,v 1.5 2011/07/24 22:09:38 jlee Exp $
* $Name: HEAD $
*
* Author(s):  Ben Avison
* Project(s): 
*
* ----------------------------------------------------------------------------
* Purpose: Glue between RISC OS world and BSD code
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdint.h>


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* glue_AttachDevice
*
* Makes a mass storage USB interface ready for use.
*
* Assumptions
*  NONE
*
* Inputs
*  device: struct describing the interface to attach
*
* Outputs
*  maxlun: maximum USB logical unit number of device
*
* Returns
*  true if attached succesfully
*****************************************************************************/
extern bool glue_AttachDevice(my_usb_device_t *device, uint8_t *maxlun);

/*****************************************************************************
* glue_DetachDevice
*
* Closes down a mass storage USB interface.
*
* Assumptions
*  device is already delinked (so the stream closed service call won't re-open it)
*
* Inputs
*  device: struct describing the interface to detach
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void glue_DetachDevice(my_usb_device_t *device);

/* extern void glue_ResetBus(my_usb_device_t *device); */

/*****************************************************************************
* glue_ResetDevice
*
* Initiates a reset of a mass storage USB interface.
* Callback is called for any active command.
* Might someday return before the reset is complete.
*
* Assumptions
*  NONE
*
* Inputs
*  device: struct describing the interface to reset
*  reason: 0 => timeout, 1 => escape, 2 => aborted
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void glue_ResetDevice(my_usb_device_t *device, int reason);

/*****************************************************************************
* glue_DoCommand
*
* Initiates a SCSI command addressed to a mass storage USB interface.
* Can return before the command is complete.
*
* Assumptions
*  NONE
*
* Inputs
*  device:               struct describing the interface to address
*  lun:                  logical unit number (at the USB transport layer) to address
*  direction:            direction code in bits 24/25, as for SCSI_Op
*  control_block:        pointer to SCSI control block
*  control_block_length: length of SCSI control block
*  scatter_list:         pointer to scatter list describing data
*  transfer_length:      total amount of data to transfer
*  callback:             address of callback routine
*  callback_pw:          R5 (private word) for callback
*  callback_wp:          R12 (workspace pointer) for callback
*
* Outputs
*  NONE
*
* Returns
*  RISC OS error pointer (eg if previous command is still active) or NULL
*****************************************************************************/
extern _kernel_oserror *glue_DoCommand(my_usb_device_t *device, uint32_t lun, uint32_t data_direction, const char *control_block, size_t control_block_length, scatter_entry_t *scatter_list, size_t transfer_length, void (*callback)(void), void *callback_pw, void *callback_wp);

/*****************************************************************************
* glue_Tick
*
* Background processing entry point to handle a specific device.
*
* Assumptions
*  Interrupts are disabled
*
* Inputs
*  device: struct describing the interface to process
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void glue_Tick(my_usb_device_t *device);

/*****************************************************************************
* glue_ReopenStream
*
* Try to cope with our streams having been closed
*
* Assumptions
*  NONE
*
* Inputs
*  file_handle: handle of stream which has been closed
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void glue_ReopenStream(uint32_t file_handle);

/*****************************************************************************
* glue_BufferThresholdCheck
*
* Decide whether we should wake up glue_Tick
*
* Assumptions
*  NONE
*
* Inputs
*  buffer: Buffer handle that's sent a filling/emptying upcall
*  filling: True if it's a filling upcall, false if emptying
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void glue_BufferThresholdCheck(uint32_t buffer,bool filling);

/*****************************************************************************
* RTSupportWrapper
*
* Wrapper function that sits between the RTSupport module and
* module_TickerVHandler
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  Time of next execution. May not return at all if the RTSupport callback is
*  no longer needed.
*****************************************************************************/
__value_in_regs rtsupport_routine_result RTSupportWrapper(void);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
@


1.5
log
@Fix null pointer access
Detail:
  c/glue - Not all operations make use of device->current_pipe, but glue_DoCommand was accessing the pipe pointer regardless of whether the maxpacket value was needed or not. This causes the code to fail if zero page is relocated.
  c/global, c/glue, c/module, c/umass, c/umass_quirks, cmhg/modhdr, h/asm, h/global, h/glue, h/resmess, h/umass_quirks, h/umassvar, s/asm - CVS has decided to update all the $Name$ tags. Not entirely sure why, but it probably won't hurt.
Admin:
  Tested on rev C2 BB.


Version 0.14. Tagged as 'SCSISoftUSB-0_14'
@
text
@d18 1
a18 1
* $Id: glue,v 1.4 2009/10/22 01:19:58 jlee Exp $
d212 21
@


1.4
log
@Update SCSISoftUSB to use RTSupport where possible, for much better USB performance
Detail:
  On initialisation SCSISoftUSB now checks if a suitable version of the RTSupport module is loaded (0.05 or above), and if so, will use RTSupport in preference to TickerV to schedule USB transfers. When combined with tweaked DeviceFS buffer thresholds and some extra code to listen out for buffer filling/emptying upcalls, this allows for significant performance improvements for USB 2.0 devices.
  If at any point RTSupport becomes unavailable or the RT_Register SWI fails (or if a suitable version of RTSupport is not present) the code will (potentially temporarily) fall back to using TickerV to ensure the filesystem remains functional.
Admin:
  Tested on RISC OS 5.15 rev C2 beagleboard & RISC OS 5.12 Iyonix with & without RTSupport 0.05.


Version 0.11. Tagged as 'SCSISoftUSB-0_11'
@
text
@d18 1
a18 1
* $Id: glue,v 1.3 2005/03/05 00:44:42 jballance Exp $
@


1.3
log
@   	Numerous updates to improve working.
	Re-synced with NetBSD mass storage
	Added part sector fill/ignore needed by SCSIFS

Detail:
Admin:  tested at castle.. to go to beta site.. Castle added IP


Version 0.06. Tagged as 'SCSISoftUSB-0_06'
@
text
@d18 2
a19 2
* $Id: glue,v 1.2 2003/06/03 10:46:37 bavison Exp $
* $Name: SCSISoftUSB-0_05 $
d192 20
@


1.2
log
@  Brought into line with latest version of SCSISoft spec.
Detail:
  * Returns separate error numbers for the different "cancel background
    operation" reasons
  * Reports that it supports scatter lists
  * Debugging output is LF-CR terminated, not CR-LF
Admin:
  Tested briefly.

Version 0.03. Tagged as 'SCSISoftUSB-0_03'
@
text
@d18 2
a19 2
* $Id: glue,v 1.1.1.1 2003/05/14 16:49:27 bavison Exp $
* $Name:  $
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
* $Id:  $
d115 1
d123 1
a123 1
extern void glue_ResetDevice(my_usb_device_t *device);
@


1.1.1.1
log
@Initial import of SCSISoftUSB, a driver for USB mass storage devices that
use a SCSI command set over bulk-only or control-bulk-interrupt protocols.
@
text
@@
