head	1.6;
access;
symbols
	SCSISoftUSB-0_25-1:1.6
	SCSISoftUSB-0_25:1.6
	SCSISoftUSB-0_24:1.6
	SCSISoftUSB-0_23:1.5
	SCSISoftUSB-0_22:1.5
	SCSISoftUSB-0_21:1.5
	SCSISoftUSB-0_20:1.5
	SCSISoftUSB-0_19:1.5
	SCSISoftUSB-0_18:1.5
	SCSISoftUSB-0_17:1.5
	SCSISoftUSB-0_16:1.5
	SCSISoftUSB-0_15:1.4
	SCSISoftUSB-0_14:1.4
	SCSISoftUSB-0_13:1.3
	SCSISoftUSB-0_12:1.3
	SCSISoftUSB-0_11:1.3
	SCSISoftUSB-0_10:1.3
	SCSISoftUSB-0_09:1.3
	SCSISoftUSB-0_08:1.3
	SCSISoftUSB-0_07:1.3
	SCSISoftUSB-0_06:1.3
	SCSISoftUSB-0_05:1.2
	SCSISoftUSB-0_04:1.2
	SCSISoftUSB-0_03:1.2
	SCSISoftUSB-0_02:1.2
	SCSISoftUSB-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2018.07.01.15.10.29;	author jballance;	state Exp;
branches;
next	1.5;
commitid	ZD5QQ5eGMub5GrIA;

1.5
date	2012.06.03.14.25.59;	author jlee;	state Exp;
branches;
next	1.4;
commitid	tugyl8mcBbH3Lg7w;

1.4
date	2011.07.24.22.09.38;	author jlee;	state Exp;
branches;
next	1.3;
commitid	hW9XzNMbX8MQrPsv;

1.3
date	2005.03.05.00.44.42;	author jballance;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.23.18.37.56;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.14.16.49.27;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.14.16.49.27;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  Tuned previous commit and resolved potential interlock issue
Detail:
  More precise detection of sense status error condition, and blocked
  reentrancy possible condition at start of Glue_Tick().
  Previous fix didn't always fix offending device.
Admin:
  Tested on iMx6

Version 0.24. Tagged as 'SCSISoftUSB-0_24'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#if !defined(SCSISOFTUSB_ASM_H) /* file used if not already included */
#define SCSISOFTUSB_ASM_H
/*****************************************************************************
* $Id: asm,v 1.5 2012/06/03 14:25:59 jlee Exp $
* $Name: HEAD $
*
* Author(s):  Ben Avison
* Project(s): 
*
* ----------------------------------------------------------------------------
* Purpose: Assembler stubs
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdint.h>
#include "kernel.h"


/*****************************************************************************
* MACROS
*****************************************************************************/
#define INSERT_BLOCK(buffer_id, block, length) do { asm_CallBufferManager(1, buffer_id, block, length, static_BufManWS, static_BufManRout); } while(0)
#define REMOVE_BLOCK(buffer_id, block, length) do { asm_CallBufferManager(3, buffer_id, block, length, static_BufManWS, static_BufManRout); } while(0)
#define USED_SPACE(buffer_id) asm_CallBufferManager(6, buffer_id, 0, 0, static_BufManWS, static_BufManRout)
#define FREE_SPACE(buffer_id) asm_CallBufferManager(7, buffer_id, 0, 0, static_BufManWS, static_BufManRout)
#define PURGE_SPACE(buffer_id) asm_CallBufferManager(8, buffer_id, 0, 0, static_BufManWS, static_BufManRout)


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* asm_DoTransferCompleteCallback
*
* Calls back to SCSIDriver when a transfer has finished.
*
* Assumptions
*  NONE
*
* Inputs
*  Various parameters required by the callback, and the address to call.
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void asm_DoTransferCompleteCallback(_kernel_oserror *error, uint32_t status_byte, void (*callback)(void), size_t amount_not_transferred, void *priv, void *workspace);

/*****************************************************************************
* asm_CallBufferManager
*
* Wrapper to Buffer Manager direct-access routines. Use the above macros instead.
*
* Assumptions
*  NONE
*
* Inputs
*  Parameters to routine, and address of routine.
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern uint32_t asm_CallBufferManager(uint32_t reason, uint32_t buffer_id, void *block, size_t length, void *ws, void (*rout)(void));

/*****************************************************************************
* asm_UpCallHandler
*
* A transiently-installed routine to catch the registers in UpCall 10.
* Not designed to be called directly from C.
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void asm_UpCallHandler(void);

/*****************************************************************************
* asm_RTSupportWrapper
*
* Wrapper for RTSupportWrapper, to get us out of SYS mode and into SVC mode
* (required so we can safely use the other asm calls)
*
* Assumptions
*  NONE
*
* Inputs
*  Pointer to relocation offsets
*
* Outputs
*  NONE
*
* Returns
*  Details of next call, from RTSupportWrapper
*****************************************************************************/
extern void asm_RTSupportWrapper(uint32_t *reloc);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
@


1.5
log
@Fix temporary RMA corruption while inside RTSupport routine
Detail:
  Previously the RTSupport routine would execute in SYS mode, and use assembler veneers to make direct calls to the buffer manager.
  Despite being against the buffer manager spec (only IRQ or SVC should be used, according to PRM 5a), the buffer manager was coping with SYS mode calls fine. However the buffer manager would call DeviceFS, and DeviceFS would then call USBDriver, entering the module via one of CMHG's generic veneers.
  These veneers attempt to switch to SVC mode on entry, but they do so by only interacting with the bottom two bits of the PSR - so the CPU was remaining in SYS mode.
  Although this isn't a problem in and of itself, immediately after the mode change comes some code to set up the static relocation offsets at the SVC stack limit.
  This is done by aligning the stack pointer to a MB boundary. If we were in SVC mode this would be fine, but since we're still in SYS mode we're using a stack that was allocated by SCSISoftUSB and isn't aligned to a boundary at all; thus resulting in two words of RMA being swapped out with something completely different while the USBDriver code executes.
  With RTSupport in ROM this will most likely end up being the first two words of the heap - which is enough to stop OS_Module from manipulating the heap (the heap manager will see it as corrupt), but without causing any lasting damage.
  To solve this issue we now run the entire routine in SVC mode, using the MB-aligned SVC stack that RTSupport provides for us.
  File changes:
  c/global, c/cmodule, h/global - Get rid of the SYS mode stack since we no longer need it
  c/glue, h/glue - Extern RTSupportWrapper so it can be called from the assembler veneer. Tweak RT_Register parameters to pass in the relocation offsets (and no SYS stack)
  s/asm, h/asm - Added asm_RTSupportWrapper to get us into and out of SVC mode around the call to RTSupportWrapper. Also sets up our stack limit & relocation offsets within the SVC stack.
Admin:
  Tested in BCM2835 ROM


Version 0.16. Tagged as 'SCSISoftUSB-0_16'
@
text
@d18 1
a18 1
* $Id: asm,v 1.4 2011/07/24 22:09:38 jlee Exp $
d48 1
@


1.4
log
@Fix null pointer access
Detail:
  c/glue - Not all operations make use of device->current_pipe, but glue_DoCommand was accessing the pipe pointer regardless of whether the maxpacket value was needed or not. This causes the code to fail if zero page is relocated.
  c/global, c/glue, c/module, c/umass, c/umass_quirks, cmhg/modhdr, h/asm, h/global, h/glue, h/resmess, h/umass_quirks, h/umassvar, s/asm - CVS has decided to update all the $Name$ tags. Not entirely sure why, but it probably won't hurt.
Admin:
  Tested on rev C2 BB.


Version 0.14. Tagged as 'SCSISoftUSB-0_14'
@
text
@d18 1
a18 1
* $Id: asm,v 1.3 2005/03/05 00:44:42 jballance Exp $
d127 20
@


1.3
log
@   	Numerous updates to improve working.
	Re-synced with NetBSD mass storage
	Added part sector fill/ignore needed by SCSIFS

Detail:
Admin:  tested at castle.. to go to beta site.. Castle added IP


Version 0.06. Tagged as 'SCSISoftUSB-0_06'
@
text
@d18 2
a19 2
* $Id: asm,v 1.2 2003/05/23 18:37:56 bavison Exp $
* $Name: SCSISoftUSB-0_05 $
@


1.2
log
@  Various changes to get it up to a releasable standard.
Detail:
  * Unplugging of devices is now reliable.
  * Stall handling now works (requires USBDriver 0.17).
  * We now do max LUN checking, since devices don't seem to do it reliably
    themselves.
  * Unknown SCSI driver handler reason codes now return an error.
  * Scatter list handling improvements - eg individual transfers can now be
    bigger than the DeviceFS buffer size (accounting for the last.
Admin:
  Tested with various mass storage devices.

Version 0.02. Tagged as 'SCSISoftUSB-0_02'
@
text
@d18 2
a19 2
* $Id: asm,v 1.1.1.1 2003/05/14 16:49:27 bavison Exp $
* $Name:  $
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
* $Id:  $
d47 1
a47 1
#define FREE_SPACE(buffer_id) asm_CallBufferManager(6, buffer_id, 0, 0, static_BufManWS, static_BufManRout)
@


1.1.1.1
log
@Initial import of SCSISoftUSB, a driver for USB mass storage devices that
use a SCSI command set over bulk-only or control-bulk-interrupt protocols.
@
text
@@
