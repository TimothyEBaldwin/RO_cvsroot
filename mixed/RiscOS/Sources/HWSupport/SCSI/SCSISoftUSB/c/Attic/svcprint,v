head	1.4;
access;
symbols
	SCSISoftUSB-0_14:1.3
	SCSISoftUSB-0_13:1.3
	SCSISoftUSB-0_12:1.3
	SCSISoftUSB-0_11:1.3
	SCSISoftUSB-0_10:1.3
	SCSISoftUSB-0_09:1.3
	SCSISoftUSB-0_08:1.3
	SCSISoftUSB-0_07:1.3
	SCSISoftUSB-0_06:1.3
	SCSISoftUSB-0_05:1.3
	SCSISoftUSB-0_04:1.3
	SCSISoftUSB-0_03:1.3
	SCSISoftUSB-0_02:1.2
	SCSISoftUSB-0_01:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2011.11.27.18.16.08;	author jlee;	state dead;
branches;
next	1.3;
commitid	x66KzEa2j2aH60Jv;

1.3
date	2003.06.03.10.46.37;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.14.17.09.46;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.14.16.49.27;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.14.16.49.27;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Tidy source a bit
Detail:
  Makefile, !MkDebug,fd7 - Rewritten to use makefile fragments
  c/svcprint, h/debug - Removed obsolete svcprint code
  c/module - Collapse MESSAGES option. Use STANDALONE #define instead of ROM_MODULE to decide whether resources are embedded or not.
Admin:
  Tested in softload on Iyonix


Version 0.15. Tagged as 'SCSISoftUSB-0_15'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * svcprint.c
 *
 * print debugging information down the TML tube link.
 *
 * provides:
 *           %s - string
 *           %C - character in range 20->7F (space printed if outside range)
 *           %c - any character
 *           %X - reverses order of bytes if >2 (or >4) specified as width
 *           %x - hex
 *           %B - reverses order of bytes if >2 (or >4) specified as width
 *           %b - binary
 *           %D - reverses order of bytes if >2 (or >4) specified as width
 *           %d - decimal
 *
 * field width can be specified by placing a decimal number after the "%"
 * character... if the width is started by a "0" then numbers are padded
 * with "0"...
 *
 * standard format specifiers o,u,e,f and g are NOT supported
 */

#include "kernel.h"
#include "swis.h"
#include "debug.h"

#ifndef NO_SVCPRINT

#ifndef NULL
# define NULL	((void *)0)
#endif

/**********************************************************************/

static unsigned short ntohs(unsigned short n)
{
    return(((n << 8) & 0xff00) | ((n >> 8) & 0x00ff));
}

/**********************************************************************/

static unsigned long ntohl(unsigned long n)
{
    return(((n >> 24) & 0x000000ff) | ((n >> 8) & 0x0000ff00) |
	   ((n << 8) & 0x00ff0000) | ((n << 24) & 0xff000000) );
}

/**********************************************************************/

/*
 * call processor mode independant character output routine
 */
static void oswrch(unsigned char ch)
{
    _kernel_swi_regs regset;

    /*
     * use HostFS_WriteC (SWI 0x40102) to print the character
     */
    regset.r[0] = ch;
    (void)_kernel_swi(0x40102, &regset, &regset);
}

/**********************************************************************/

/*
 * Printn prints a number n in base b, minimum width w adding pad chars
 * if needed.
 */
static void printn(unsigned n, unsigned b, int w, char pad)
{
    if( n >= b )
    {
	printn(n / b, b, --w, pad);
	oswrch("0123456789abcdef"[n % b]);
    }
    else
    {
	while (--w > 0)
	    oswrch(pad);

	oswrch("0123456789abcdef"[n]);
    }
}

/**********************************************************************/

static void prf(char *format, unsigned *argp, ...)
{
    register int b; /* base to be used when displaying numbers */
    register int c; /* current character read from format string */
    register int w; /* field width */
    char pad;       /* field padding character */
    unsigned val;   /* value of argument */

  loop:
    val = *argp;
    w = 0;
    pad = ' ';

    while( (c = *format++) != '%' )
    {
	if( c == '\0' )
	    return;
	if( c == '\n' )
	{
	    oswrch('\n');
	    oswrch('\r');
	}
	else
	{
	    oswrch(c);
	}
    }

  again:
    /*
     * we have a special format command
     */
    c = *format++;
    switch( c )
    {
      case 's':
        {
	    /* string */
	    char *p = (char *)*argp++;
	    int  width = 0;

	    if (p != NULL)
	    {
                /* NOT a NULL pointer */
                while (*p)
		{
		    oswrch(*p++);
		    width++;
		}
	    }

	    while( width++ < w )
		oswrch(' ');
	    goto loop;
	}

      case 'C':
	if( (*argp < ' ') || (*argp > '~') )
	{
	    oswrch(' ');
	    argp++;
	    goto loop;
	}

      case 'c':
	/* character */
	oswrch(*argp++);
	goto loop;

      case '0':
	if (w == 0)
	    pad = '0';

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
	/* field width */
	w = (w * 10) + ((int) c - '0');
	goto again;

      case 'X':
	/* hex number */
	if (w > 4)
	    val = (unsigned)ntohl(val);
	else
	{
	    if (w > 2)
		val = (unsigned)ntohs(val);
	}

	/*
	 * NB
	 *
	 * fall through to set base
	 */

      case 'x':
	/* hex number */
	b = 16;
	goto number;

      case 'B':
	/* binary number */
	if (w > 4)
	    val = (unsigned)ntohl(val);
	else
	{
	    if( w > 2 )
		val = (unsigned)ntohs(val);
	}

	/*
	 * NB
	 *
	 * fall through to set base
	 */

      case 'b':
	/* binary number */
	b = 2;
	goto number;

      case 'D':
	/* decimal number */
	if (w > 4)
	    val = (unsigned)ntohl(val);
	else
	{
	    if (w > 2)
		val = (unsigned)ntohs(val);
	}

	/*
	 * NB
	 *
	 * fall through to set base
	 */

      case 'd':
	b = 10;
	/*
	 * NB
	 *
	 * fall through to write number
	 */

      number:
	printn(val,b,w,pad);
	argp++;

	break;
    } /* switch */

    goto loop;
}

/**********************************************************************/

#if 0
# define USETUBE
#endif /* 0/1 */

void Printf(char *format, ...)
{
    unsigned *argp = (unsigned *)&format;

#ifdef USETUBE
    _kernel_swi_regs reglist;
    _kernel_oserror *err;

    reglist.r[0] = (int)"HostVDU";
    if( (err = _kernel_swi(OS_CLI, &reglist, &reglist)) != NULL )
    {
	prf("HostVDU: ", 0);
	prf(err->errmess, 0);
	return;
    }
#endif /* USETUBE */

    prf(format, (argp + 1));

#ifdef USETUBE
    reglist.r[0] = (int)"TubeVDU";
    if( (err = _kernel_swi(OS_CLI, &reglist, &reglist)) != NULL )
    {
	prf("TubeVDU: ", 0);
	prf(err->errmess, 0);
	return;
    }
#endif /* USETUBE */
}

#endif

/**********************************************************************/

/* EOF svcprint.c */
@


1.3
log
@  Brought into line with latest version of SCSISoft spec.
Detail:
  * Returns separate error numbers for the different "cancel background
    operation" reasons
  * Reports that it supports scatter lists
  * Debugging output is LF-CR terminated, not CR-LF
Admin:
  Tested briefly.

Version 0.03. Tagged as 'SCSISoftUSB-0_03'
@
text
@@


1.2
log
@Neatened up the debug a bit - removes warning.
Retagged as 'SCSISoftUSB-0_01'
@
text
@d122 2
d125 5
a129 1
	oswrch(c);
@


1.1
log
@Initial revision
@
text
@d43 2
d295 2
@


1.1.1.1
log
@Initial import of SCSISoftUSB, a driver for USB mass storage devices that
use a SCSI command set over bulk-only or control-bulk-interrupt protocols.
@
text
@@
