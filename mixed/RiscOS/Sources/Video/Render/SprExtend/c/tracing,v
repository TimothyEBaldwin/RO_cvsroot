head	4.4;
access;
symbols
	SprExtend-1_83:4.4
	SprExtend-1_82:4.4
	SprExtend-1_81:4.4
	SprExtend-1_80:4.4
	SprExtend-1_79:4.4
	SprExtend-1_78:4.4
	SprExtend-1_77:4.4
	SprExtend-1_76:4.4
	SprExtend-1_75:4.4
	SprExtend-1_74:4.4
	SprExtend-1_73:4.4
	SprExtend-1_72:4.4
	SprExtend-1_71-nocfsi:4.4
	SprExtend-1_71:4.4
	SprExtend-1_70-tracef:4.4
	SprExtend-1_70-headers:4.3
	SprExtend-1_70:4.3
	SprExtend-1_69:4.3
	SprExtend-1_68:4.3
	SprExtend-1_67:4.3
	SprExtend-1_66:4.3
	SprExtend-1_65:4.3
	SprExtend-1_64:4.3
	SprExtend-1_63:4.3
	SprExtend-1_62:4.3
	SprExtend-1_61:4.3
	SprExtend-1_60:4.3
	SprExtend-1_59:4.3
	SprExtend-1_58:4.3
	SprExtend-1_57:4.3
	SprExtend-1_56:4.3
	SprExtend-1_55:4.3
	SprExtend-1_54:4.2
	SprExtend-1_53:4.2
	SprExtend-1_52:4.2
	SprExtend-1_51:4.2
	SprExtend-1_50:4.2
	SprExtend-1_38-1_35_2_16:4.2.2.3
	SprExtend-1_49:4.2
	SprExtend-1_48:4.2
	SprExtend-1_47:4.2
	SprExtend-1_38-1_35_2_15:4.2.2.3
	SprExtend-1_46:4.2
	SprExtend-1_45:4.2
	SprExtend-1_44:4.2
	SprExtend-1_43:4.2
	SprExtend-1_42:4.2
	SprExtend-1_41:4.2
	SprExtend-1_38-1_35_2_14:4.2.2.3
	SprExtend-1_40:4.2
	SprExtend-1_38-1_35_2_13:4.2.2.3
	SprExtend-1_38-1_35_2_12:4.2.2.3
	SprExtend-1_38-1_35_2_11:4.2.2.3
	SprExtend-1_38-1_35_2_10:4.2.2.3
	SprExtend-1_38-1_35_2_9:4.2.2.3
	SprExtend-1_38-1_35_2_8:4.2.2.2
	SprExtend-1_39:4.2
	SprExtend-1_38-1_35_2_7:4.2.2.1
	SprExtend-1_38-1_35_2_6:4.2.2.1
	SprExtend-1_38-1_35_2_5:4.2
	SprExtend-1_38-1_35_2_4:4.2
	SprExtend-1_38-1_35_2_3:4.2
	SprExtend-1_38-1_35_2_2:4.2
	SprExtend-1_38-1_35_2_1:4.2
	MigrateIJG8b:4.2.0.2
	SprExtend-1_38:4.2
	SprExtend-1_37:4.2
	SprExtend-1_36:4.2
	SprExtend-1_35:4.2
	SprExtend-1_34:4.2
	SprExtend-1_33:4.2
	SprExtend-1_32:4.2
	SprExtend-1_31:4.1
	SprExtend-1_30:4.1;
locks; strict;
comment	@# @;


4.4
date	2016.05.21.13.37.18;	author rool;	state Exp;
branches;
next	4.3;
commitid	TvdqzFBJfCe7Wl7z;

4.3
date	2013.10.07.00.39.09;	author jlee;	state Exp;
branches;
next	4.2;
commitid	HcUKy3PafwqToi8x;

4.2
date	2010.10.13.20.26.21;	author rsprowson;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	2010.09.29.21.05.30;	author rsprowson;	state Exp;
branches;
next	;

4.2.2.1
date	2011.01.09.10.42.59;	author rsprowson;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2011.01.13.21.12.20;	author rsprowson;	state Exp;
branches;
next	4.2.2.3;

4.2.2.3
date	2011.01.22.17.58.30;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Replace tracef debug calls
Detail:
  Change tracef() to use the double brackets trick rather than _ for , substitution
Admin:
  Debug build built, but not tested. Non debug build functions as before.
  Submission for the JPEG bounty.
  Tagged as SprExtend-1_70-tracef
@
text
@/* Copyright 2010 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tracing.c - output debug similar to full blown DebugLib */

/* Low-level debugging output routine */
extern int asm_writech(char c); /* provided in assembler - handles newline */
                                /* Returns < 0 if trace output is being ignored right now. */

/* Output to output stream */
static void writech(char **dest, char c)
{
  if (dest == 0 || *dest == 0) asm_writech(c); else {*(*dest)++ = c; **dest = 0;}
}
#ifdef TESTDEBUG
static void writes(char **d, char *c) {while(*c != 0) writech(d, *c++);}
#endif
static void writehex(char **d, int i, int width)
{
  int j;
  for (j = 4*(width-1); j >= 0; j-=4) writech(d, "0123456789abcdef"[(i>>j)&15]);
}
static void cwritech(char **d, int *column, char c) {writech(d, c); *column = c == '\n' ? 0 : *column+1;}
static void cwrites(char **d, int *column, char *c) {if (c != 0) {while (*c != 0) cwritech(d, column, *c++);}}
static void cwritehex(char **d, int *column, int i, int width) {*column += width; writehex(d, i, width);}

static void do_vprintf(char *d, const char *format, va_list args)
{
  /* Only %% for %, %s for string, %c for character,
   * %i for integer, %x for hex, %t<column> for tab implemented
   */
  int ch;
  int column = 0;

  asm_writech(4);
  while ((ch = *format++) != 0)
  {
    if (ch == '%')
    {
      int width = 8; /* default width for hex output */

      while (*format == '0') format++;
      if (*format >= '1' && *format <= '9') width = *format-'0'; /* probably only one digit! */
      while (*format >= '0' && *format <= '9') format++; /* read over width specifier - better than gagging! */

      switch (*format++)
      {
      case '%': cwritech(&d, &column, '%'); break;
      case 's': cwrites(&d, &column, va_arg(args, char*)); break;
      case 'c': cwritech(&d, &column, va_arg(args, int)); break;
      case 'd':
      case 'i':
                {
                  int i = va_arg(args, int);
                  int j = 16;
                  BOOL neg = FALSE;
                  char c[16];
                  int ten = 10;

                  if (i < 0) {neg = TRUE; i = -i;}
                  if (i < 0)
                    cwrites(&d, &column, "0x80000000"); /* minint - probably more useful in hex! */
                  else
                  {
                    c[--j] = 0;
                    while (i >= 10)
                    {
                      c[--j] = '0' + (i % ten);
                      i = i / ten;
                    }
                    c[--j] = '0' + i;
                    if (neg) c[--j] = '-';
                    cwrites(&d, &column, &c[j]);
                  }
                }
                break;
      case 'x': cwritehex(&d, &column, va_arg(args, int), width);
                break;
      case 't': /* tab to specific column */
                {
                  int n = 0;
                  while (*format >= '0' && *format <= '9') n = n * 10 + (*format++ - '0');
                  while (column < n) cwritech(&d, &column, ' ');
                }
                break;
      }
      if (*format == '.') format++; /* terminator for esc sequence. */
    }
    else
      cwritech(&d, &column, ch);
  }
  asm_writech(0xd);
}

/* As conventional printf & sprintf */
void do_printf(const char *unused, const char *format, ...)
{
  va_list args;
  va_start(args, format);
  do_vprintf(NULL, format, args);
  va_end(args);
  UNUSED(unused);
}

void do_sprintf(char *d, const char *format, ...)
{
  va_list args;
  va_start(args, format);
  do_vprintf(d, format, args);
  va_end(args);
}

/* As conventional strcat */
char *strcat(char *aa, const char *b)
{
  char *a = aa;

  while (*a != 0) a++; /* find end of string */
  while (*b != 0) *a++ = *b++;
  *a = 0;
  return aa;
}

/* The assert macro calls this with one that outputs into the trace */
void do_assert(const char *file, int line, BOOL arg, int error, const char *describe)
{
  if (arg == 0)
  {
    dprintf(("", "ASSERTION FAILED (%s line %i): %s\n", file, line, describe));
    exit_erl(error, line);
  }
}

/* Inject a comment into the output assembly */
void do_comment(const char *text)
{
  dprintf(("", "%t20; %s\n", text));
}

/* Is it or isn't it */
static char *whether(BOOL p)
{
  return p ? "YES" : "NO";
}
@


4.3
log
@Add support for blended sprite & JPEG rendering - alpha masks, alpha channels, and translucency
Detail:
  This big set of changes adds support for the following user-facing APIs, as per ROL's specs:
  - OS_SpriteOp 52 (PutSpriteScaled) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - OS_SpriteOp 56 (PutSpriteTransformed) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - JPEG_Plot[File]Scaled colourmapping & translucency blending
  - JPEG_Plot[File]Transformed colourmapping & translucency blending
  Sources/CFSI-JPEG, Sources/PutScaled:
  - Added exit_oserror exit routine for use by C code.
  - For SpriteExtend this allows the C code to cause OS_SpriteOp to exit with a given OS error block.
  - For CFSI-JPEG the error block is returned and ERROR_FATAL is returned to ChangeFSI.
  Sources/CSupport:
  - Add definitions for some error codes (matches existing definitions from h/commondefs)
  Sources/PutScaled:
  - Stripped out code to look for identity translation tables; now handled by preparettr routine in Sources/SprOp
  Sources/SWIs, Hdr/SprExtend:
  - JPEG SWIs updated to add support for alpha-blended and colour mapped JPEG rendering, following ROL's APIs
  Sources/SprExtend:
  - Stripped out lots of old build flags which haven't been touched in years.
  - Strip out assembler SprTrans code generator.
  - Add new definitions needed for blending & colour mapping.
  Sources/SprOp:
  - Updated PutScaled frontend to deal with blending and colour mapping.
  - Disabled code which was bodging coordinates when dealing with double-pixel modes - it seems to cause a few issues, and the code generator mostly had proper double-pixel support anyway.
  - Translation table verification and fiddling code rewritten and consolidated into the preparettr routine. C code is now explicitly told what table type is in use and whether it can safely be ignored in favour of using the sprite palette.
  - Removed code from CheckSpriteArea which was deliberately throwing an error upon seeing alpha-masked sprites; I think the bug that was hiding has been fixed now
  Sources/SprTrans
  - Removed the assembler version of the code generator.
  - Updated to add support for blending and colour mapping
  c/PutScaled:
  - Old test code removed.
  - Updated to add support for blending & colour mapping
  - Assorted bugs fixed.
  - A few extra architecture-specific optimisations added.
  - Some workspace setup code moved to c/asmcore to allow sharing with SprTrans.
  c/asmcore:
  - Register allocation code rewritten. Instead of allocating on a first-come, first-served basis, the code now builds a list of which logical registers are needed (and which 'banks' they fall into) and then attempts to allocate them in a more intelligent manner. It still has some failings (e.g. reusing R12 as a general purpose register is currently impossible) but it's a lot more flexible and reliable than the old code.
  - Core pixel transformation code updated to add support for blending & colour mapping
  - Added some extra architecture-specific optimisations
  c/rojpeg:
  - JPEG option handling updated to avoid trashing any colour mapping descriptor that may have been passed in
  c/sprtrans:
  - Updated to add support for blending & colour mapping
  c/tracing:
  - Debug assert messages now show filename as well as line number
  h/commondefs:
  - Removed old #define's that related to old assembler switches.
  h/putscaled:
  - Workspace definition updated to match assembler version.
  - SprTrans stack workspace structure moved here from c/sprtrans
Admin:
  Tested on BB-xM plotting all major sprite & JPEG types into all modes with all major options


Version 1.55. Tagged as 'SprExtend-1_55'
@
text
@d15 1
a15 1
/* c.tracing - output debug */
d17 1
a17 8
/* For macros taking variable argument packs */
#define _ ,

/* Low-level debugging output routines */
#ifdef DEBUG_TML
#define HostFS_WriteC 0x00040102
#define asm_writech(c) _swix(HostFS_WriteC, _IN(0), c)
#else
a19 1
#endif
d21 1
a21 1
/* Output to string or to output stream */
d38 1
a38 2
/* As conventional sprintf */
static void do_sprintf(char *d, char *format, ...)
a42 1
  va_list args;
a46 1
  va_start(args, format);
d103 18
a121 1
  asm_writech(0xd);
d136 1
a136 1
static void do_assert(const char *file, int line, BOOL arg, int error, char *describe)
d140 1
a140 1
    tracef("ASSERTION FAILED (%s line %i): %s\n" _ file _ line _ describe);
d146 1
a146 1
static void do_comment(char *text)
d148 1
a148 1
  tracef("%t20; %s\n" _ text);
@


4.2
log
@Paper and fill some JPEG cracks.
The exit_c function was repeatedly being called with the line number argument and error code the wrong way round and since only bits 0-2 of the error code are inspected on exit any fatal exits from the ported JPEG library code would either report the wrong error or fail silently (depending on the line number) - example a 12 bits per sample JPEG would be rendered without fault into a screen full of random memory garbage.
Assembling/compiling with the 'jpeg' switch off didn't work, fixed, and also now zeros out the SWI decode values in the module header.
Moved include of 'yuvtabs.s' into the colour conversion code.
Deleted panic_exit, it did nothing useful but trace a value then exit, so it now just calls exit() like everyone else.
Removed excess call to find_image_dims(), this was needed just to get the workspace requirements when the JPEG had already been sized up by asm_find_image_dims() earlier. Side effect of removing the pilot JPEG code earlier is that this call can now only get to the JPEG code from a JPEG_ SWI. Changed to just pass the workspace requirements into 'c.PutScaled' and save a duplicate scan.
Fatal exits from the assembler huffman decoder now report a sensible error.
Trimmed out all the JPEG assessment code from 'c.PutScaled' and moved it into 'c.rojpeg' so the put scaled is only concerned with putting things scaled.
Sanitised the #includes a bit.
Fixed on last check of wp->save_mode looking at the wrong bits for the mode number.
Resolved all the warning in the genhdr/genyuvtabs/genpalette utilities by casting a bit harder.[A[B
Added new more descriptive error messages to the messages file (not currently used), and made the 'not supported by' ones consistent so the tokeniser might crunch the file a bit more.
In looks_like_jpeg() changed a bitwise to logical or.
Fixed longstanding problem of not being able to render JPEGs at a scale of less than 1/6 in any greyscale mode, because, err, there was no code to do it - only the colour case was checked for. Implemented for 8bpp grey and 32bpp grey (which gets dithered for other lower modes) by just converting the luma channel into an equally weighted RGB value or replicating it for 256 greys.
Tested in all 8 colour depths on a Risc PC using sampling ratios of 1x1; 2x1; 1x2; 2x2 of the IJG test image scaled in !Draw by 0.16.

Version 1.32. Tagged as 'SprExtend-1_32'
@
text
@d130 1
a130 1
static void do_assert(int line, BOOL arg, int error, char *describe)
d134 1
a134 1
    tracef("ASSERTION FAILED (line %i): %s\n" _ line _ describe);
@


4.2.2.1
log
@Create assembler equivalents of C colour conversions, approx 10% speed up.
Add new switch ASMCOLOR to select which to use, C or assembler.
Remove FILE_ exit trace concept, just use __FILE__ instead in exit_erl.
Add some comments to exit_erl and friends.
A few bits of cinfo setup moved into start_pass_huff_decoder() or eliminated.
Bumped up the precision of SCALE_BITS in the C colour handling so FIX() uses more bits of an int.
Deleted the unused remenants of light dithering in the 8bpp colour converter - saves a few cycles.
colour_convert_8 and colour_convert_16 no longer save entry registers the C compiler doesn't care about.
Update genyuvtabs to EXPORT the table bases.
Split out the compilation of IJG files as separate objects in the make file, rather than including them from within rojpeg, which is itself included from putscaled.

Version 1.38, 1.35.2.6. Tagged as 'SprExtend-1_38-1_35_2_6'
@
text
@d135 1
a135 1
    exit_erl(error, line, describe);
@


4.2.2.2
log
@Use USAT in 150 occurrences of colour clamping for ARMv6 and later.
Some IDCT renaming.
Shock addition of some documentation on how it all works.
Mirror fix from 1.39 on the trunk.
Debug
 Made DEBUG version compile again, earlier header shuffling was preventing it.
 Replaced the ' _ ' method of variadic macro emulation with more familiar double brackets for tracef().
 Eliminated IFDEBUG macro and just used #ifdef DEBUG/#endif or tracef() directly.
 Don't bother passing the line number and file name to exit() when in the non DEBUG case.

Version 1.38, 1.35.2.8. Tagged as 'SprExtend-1_38-1_35_2_8'
@
text
@d17 2
a18 3
#include "commondefs.h"
#include <string.h>
#include <stdarg.h>
d29 2
a30 3
#ifdef DEBUG
/* Conversion primitives */
static void cwritech(int *column, char c)
d32 1
a32 1
  asm_writech(c); *column = c == '\n' ? 0 : *column+1;
d34 4
a37 7

static void cwrites(int *column, char *c)
{
  if (c != NULL) while (*c != 0) cwritech(column, *c++);
}

static void cwritehex(int *column, int i, int width)
d40 1
a40 20
  
  *column += width;
  for (j = 4*(width-1); j >= 0; j-=4) asm_writech("0123456789abcdef"[(i>>j)&15]);
}

/* Is it or isn't it */
char *whether(BOOL p)
{
  return p ? "YES" : "NO";
}

/* As conventional strcat */
char *strcat(char *aa, const char *b)
{
  char *a = aa;

  while (*a != 0) a++; /* find end of string */
  while (*b != 0) *a++ = *b++;
  *a = 0;
  return aa;
d42 3
d46 2
a47 2
/* As conventional printf but routed through NDRDebug */
void do_dprintf(char *format, ...)
d70 3
a72 3
      case '%': cwritech(&column, '%'); break;
      case 's': cwrites(&column, va_arg(args, char*)); break;
      case 'c': cwritech(&column, va_arg(args, int)); break;
d84 1
a84 1
                    cwrites(&column, "0x80000000"); /* minint - probably more useful in hex! */
d95 1
a95 1
                    cwrites(&column, &c[j]);
d99 1
a99 1
      case 'x': cwritehex(&column, va_arg(args, int), width);
d105 1
a105 1
                  while (column < n) cwritech(&column, ' ');
d112 1
a112 1
      cwritech(&column, ch);
d118 11
d130 1
a130 1
void do_assert(int line, BOOL arg, int error, char *describe)
d132 1
a132 1
  if (!arg)
d134 1
a134 1
    tracef(("ASSERTION FAILED (line %i): %s\n", line, describe));
d140 1
a140 1
void do_comment(char *text)
d142 7
a148 1
  tracef(("%t20; %s\n", text));
a149 1
#endif
@


4.2.2.3
log
@New jerror.h taken from IJG8b.
Swap to using JERR_ numbers, deleted E_ numbers.
Modify genjhdr to pass some defines to the assembler code, so jdcolor can clarify use of DCTSIZE and DCTSIZE2.
Added chart of possible subsampling ratios to documentation.

Version 1.38, 1.35.2.9. Tagged as 'SprExtend-1_38-1_35_2_9'
@
text
@d51 1
a51 1
char *whether(boolean p)
d99 1
a99 1
                  boolean neg = FALSE;
d140 1
a140 1
void do_assert(int line, boolean arg, int error, char *describe)
@


4.1
log
@Remove pilot JPEG code.
During the original development (referred to in the docs as Sprite Extend 2) JPEG data was briefly wrapped inside a sprite file before the JPEG_ swis were introduced. Within SpriteExtend some code still remained to fake a mode 20 sprite header with the JPEG output sized adjusted as though it was 4bpp, then later undo the faking by checking for a mode 20 sprite with is_it_jpeg set.
This version removes all of the code looking out for pilot JPEGs, and rationalises the fake sprite header to just report the true X/Y size.
Fix bug where r4 would be corrupted on exit from JPEG_PlotScaled if an error occurred, and generally rationalised the exit cases a bit more sensibly.
Made the JPEG_ swi despatch a bit more simple to follow.
Corrected a comment in the NSM_bpptable.
Deleted unused 'ecfspace' from the workspace.
Hid the 'macroword' from the C code as it's now an assembler only value.
Cut the initial comments from c/putscaled and placed in Docs.
Cut the debug tracing code (a notable %age) from c/putscaled and placed in tracing support file.
Simplified the entry to putscaled_compiler() now we don't have to look out for pilot format JPEGs within sprites any more.
Sprinkled in some block comments to make navigating the c/putscaled file a bit easier.

Version 1.30. Tagged as 'SprExtend-1_30'
@
text
@d135 1
a135 1
    exit_c(line, error);
@

