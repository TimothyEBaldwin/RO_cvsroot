head	4.6;
access;
symbols
	SprExtend-1_83:4.6
	SprExtend-1_82:4.6
	SprExtend-1_81:4.6
	SprExtend-1_80:4.6
	SprExtend-1_79:4.6
	SprExtend-1_78:4.6
	SprExtend-1_77:4.6
	SprExtend-1_76:4.6
	SprExtend-1_75:4.6
	SprExtend-1_74:4.6
	SprExtend-1_73:4.6
	SprExtend-1_72:4.6
	SprExtend-1_71-nocfsi:4.6
	SprExtend-1_71:4.6
	SprExtend-1_70-tracef:4.5
	SprExtend-1_70-headers:4.5
	SprExtend-1_70:4.4
	SprExtend-1_69:4.4
	SprExtend-1_68:4.4
	SprExtend-1_67:4.4
	SprExtend-1_66:4.4
	SprExtend-1_65:4.4
	SprExtend-1_64:4.4
	SprExtend-1_63:4.4
	SprExtend-1_62:4.4
	SprExtend-1_61:4.4
	SprExtend-1_60:4.4
	SprExtend-1_59:4.4
	SprExtend-1_58:4.4
	SprExtend-1_57:4.4
	SprExtend-1_56:4.4
	SprExtend-1_55:4.4
	SprExtend-1_54:4.4
	SprExtend-1_53:4.4
	SprExtend-1_52:4.4
	SprExtend-1_51:4.4
	SprExtend-1_50:4.4
	SprExtend-1_38-1_35_2_16:4.3.2.7
	SprExtend-1_49:4.3
	SprExtend-1_48:4.3
	SprExtend-1_47:4.3
	SprExtend-1_38-1_35_2_15:4.3.2.7
	SprExtend-1_46:4.3
	SprExtend-1_45:4.3
	SprExtend-1_44:4.3
	SprExtend-1_43:4.3
	SprExtend-1_42:4.3
	SprExtend-1_41:4.3
	SprExtend-1_38-1_35_2_14:4.3.2.7
	SprExtend-1_40:4.3
	SprExtend-1_38-1_35_2_13:4.3.2.6
	SprExtend-1_38-1_35_2_12:4.3.2.5
	SprExtend-1_38-1_35_2_11:4.3.2.5
	SprExtend-1_38-1_35_2_10:4.3.2.4
	SprExtend-1_38-1_35_2_9:4.3.2.3
	SprExtend-1_38-1_35_2_8:4.3.2.2
	SprExtend-1_39:4.3
	SprExtend-1_38-1_35_2_7:4.3.2.2
	SprExtend-1_38-1_35_2_6:4.3.2.2
	SprExtend-1_38-1_35_2_5:4.3.2.1
	SprExtend-1_38-1_35_2_4:4.3.2.1
	SprExtend-1_38-1_35_2_3:4.3.2.1
	SprExtend-1_38-1_35_2_2:4.3.2.1
	SprExtend-1_38-1_35_2_1:4.3.2.1
	MigrateIJG8b:4.3.0.2
	SprExtend-1_38:4.3
	SprExtend-1_37:4.3
	SprExtend-1_36:4.3
	SprExtend-1_35:4.3
	SprExtend-1_34:4.3
	SprExtend-1_33:4.3
	SprExtend-1_32:4.3
	SprExtend-1_31:4.2
	SprExtend-1_30:4.2
	SprExtend-1_29:4.2
	SprExtend-1_28:4.2
	SprExtend-1_27:4.1
	SprExtend-1_26:4.1
	SprExtend-1_25:4.1
	SprExtend-1_24:4.1;
locks; strict;
comment	@# @;


4.6
date	2016.05.21.13.44.38;	author rool;	state Exp;
branches;
next	4.5;
commitid	ZDqmsyNiMhv6Zl7z;

4.5
date	2016.05.21.13.32.20;	author rool;	state Exp;
branches;
next	4.4;
commitid	yTqS85yKh7k8Ul7z;

4.4
date	2012.07.28.15.23.41;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	b5jdybqzJ3Wdjlew;

4.3
date	2010.10.13.20.26.21;	author rsprowson;	state Exp;
branches
	4.3.2.1;
next	4.2;

4.2
date	2010.09.25.12.19.23;	author rsprowson;	state Exp;
branches;
next	4.1;

4.1
date	2010.09.01.20.48.54;	author rsprowson;	state Exp;
branches;
next	;

4.3.2.1
date	2011.01.04.21.18.07;	author rsprowson;	state Exp;
branches;
next	4.3.2.2;

4.3.2.2
date	2011.01.09.10.42.59;	author rsprowson;	state Exp;
branches;
next	4.3.2.3;

4.3.2.3
date	2011.01.22.17.58.30;	author rsprowson;	state Exp;
branches;
next	4.3.2.4;

4.3.2.4
date	2011.01.22.18.01.49;	author rsprowson;	state Exp;
branches;
next	4.3.2.5;

4.3.2.5
date	2011.01.29.10.03.39;	author rsprowson;	state Exp;
branches;
next	4.3.2.6;

4.3.2.6
date	2011.02.05.09.56.53;	author rsprowson;	state Exp;
branches;
next	4.3.2.7;

4.3.2.7
date	2011.02.15.20.58.02;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Import of IJG8d library sources
Detail:
  Using the decoder in "example.c" as a starting point, we try to follow that sequence more closely even if in our embedded implementation some of the functions don't do much.
  Uses the default colour backend for 32bpp BGR output for most of the unusual cases.
  The most common 2x2 subsampling case uses a custom merged upsampler and colour converter, with colour output directly in RISC OS format for the respective screen mode.
Admin:
  Submission for the JPEG bounty.

Version 1.71. Tagged as 'SprExtend-1_71'
@
text
@/* Copyright 2010 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* c.genjhdr - simple program to make suitable assembler header
files from certain C structure defintions, to make sharing of those
structures between C and assembler a little bit easier. */

#include <stdio.h>
#include <stddef.h>

#include "jpeglib.h"

int main(void)
{
  printf("; s.jhdr, generated by genjhdr %s %s.\n\n", __DATE__, __TIME__);

  /* Defined constants */
  printf("DCTSIZE * %i\n", DCTSIZE);
  printf("DCTSIZE2 * %i\n", DCTSIZE2);
  printf("\n");

  /* Exposed bits of jpeg_decompress_struct */
  printf("cinfo_jpeg_buffer * %i\n", offsetof(struct jpeg_decompress_struct, jpeg_buffer));
  printf("cinfo_jpeg_buffer_size * %i\n", offsetof(struct jpeg_decompress_struct, jpeg_buffer_size));
  printf("cinfo_workspace_size * %i\n", offsetof(struct jpeg_decompress_struct, workspace_size));
  printf("\n");

  printf("\n        END\n\n");

  return 0;
}
@


4.5
log
@Update headers to stock copy
Detail:
  Added headers jerror, jmorecfg, jpegint from IJG8d. Removed jpegdata header.
  Bulk rename of structure members to match newer headers, some RISCOS-isms wrapped in #ifdef RISCOS, retained for the time being.
  Assembler code now gets cinfo member offsets from jhdr.s derived from the C header rather than keeping its own dangerous copy of the offsets.
Admin
  Note: this has broken CFSI-jpeg as it expects the error values to be at the top of cinfo.
  Submission for the JPEG bounty.
  Tagged as SprExtend-1_70-headers.
@
text
@a32 7
  /* For jdhuff */
  printf("huff_tbl_maxcode * %i\n", offsetof(JHUFF_TBL, maxcode[0]));
  printf("huff_tbl_valptr * %i\n", offsetof(JHUFF_TBL, valptr[0]));
  printf("huff_tbl_huffval * %i\n", offsetof(JHUFF_TBL, huffval[0]));
  printf("huff_tbl_shortcut * %i\n", offsetof(JHUFF_TBL, shortcut[0]));
  printf("\n");

a33 3
  printf("cinfo_next_input_byte * %i\n", offsetof(struct jpeg_decompress_struct, next_input_byte));
  printf("cinfo_get_buffer * %i\n", offsetof(struct jpeg_decompress_struct, get_buffer));
  printf("cinfo_bits_left * %i\n", offsetof(struct jpeg_decompress_struct, bits_left));
d35 1
a35 1
  printf("cinfo_jpeg_size * %i\n", offsetof(struct jpeg_decompress_struct, jpeg_size));
@


4.4
log
@Adopt colour conversions from MigrateIJG8b branch
Now for every colour conversion there is a corresponding C function, allowing swapping between them for test purposes.
Here, 'ASMCOLOR' is selected and the C functions not even referenced in the makefile, see branch for use.
Permits use of USAT, for a small 1.5% speedup and smaller code.
Some other typedefs and comment shuffling copied over - should be harmless.

Version 1.50. Tagged as 'SprExtend-1_50'
@
text
@d22 1
a22 2
#define BOOL int
#include "jinclude.h"
d34 4
a37 4
  printf("huff_tbl_maxcode * %i\n", offsetof(HUFF_TBL, maxcode[0]));
  printf("huff_tbl_valptr * %i\n", offsetof(HUFF_TBL, valptr[0]));
  printf("huff_tbl_huffval * %i\n", offsetof(HUFF_TBL, huffval[0]));
  printf("huff_tbl_shortcut * %i\n", offsetof(HUFF_TBL, shortcut[0]));
d41 6
a46 5
  printf("cinfo_next_input_byte * %i\n", offsetof(struct decompress_info_struct, next_input_byte));
  printf("cinfo_get_buffer * %i\n", offsetof(struct decompress_info_struct, get_buffer));
  printf("cinfo_bits_left * %i\n", offsetof(struct decompress_info_struct, bits_left));
  printf("cinfo_jpeg_buffer * %i\n", offsetof(struct decompress_info_struct, jpeg_buffer));
  printf("cinfo_jpeg_size * %i\n", offsetof(struct decompress_info_struct, jpeg_size));
@


4.3
log
@Paper and fill some JPEG cracks.
The exit_c function was repeatedly being called with the line number argument and error code the wrong way round and since only bits 0-2 of the error code are inspected on exit any fatal exits from the ported JPEG library code would either report the wrong error or fail silently (depending on the line number) - example a 12 bits per sample JPEG would be rendered without fault into a screen full of random memory garbage.
Assembling/compiling with the 'jpeg' switch off didn't work, fixed, and also now zeros out the SWI decode values in the module header.
Moved include of 'yuvtabs.s' into the colour conversion code.
Deleted panic_exit, it did nothing useful but trace a value then exit, so it now just calls exit() like everyone else.
Removed excess call to find_image_dims(), this was needed just to get the workspace requirements when the JPEG had already been sized up by asm_find_image_dims() earlier. Side effect of removing the pilot JPEG code earlier is that this call can now only get to the JPEG code from a JPEG_ SWI. Changed to just pass the workspace requirements into 'c.PutScaled' and save a duplicate scan.
Fatal exits from the assembler huffman decoder now report a sensible error.
Trimmed out all the JPEG assessment code from 'c.PutScaled' and moved it into 'c.rojpeg' so the put scaled is only concerned with putting things scaled.
Sanitised the #includes a bit.
Fixed on last check of wp->save_mode looking at the wrong bits for the mode number.
Resolved all the warning in the genhdr/genyuvtabs/genpalette utilities by casting a bit harder.[A[B
Added new more descriptive error messages to the messages file (not currently used), and made the 'not supported by' ones consistent so the tokeniser might crunch the file a bit more.
In looks_like_jpeg() changed a bitwise to logical or.
Fixed longstanding problem of not being able to render JPEGs at a scale of less than 1/6 in any greyscale mode, because, err, there was no code to do it - only the colour case was checked for. Implemented for 8bpp grey and 32bpp grey (which gets dithered for other lower modes) by just converting the luma channel into an equally weighted RGB value or replicating it for 256 greys.
Tested in all 8 colour depths on a Risc PC using sampling ratios of 1x1; 2x1; 1x2; 2x2 of the IJG test image scaled in !Draw by 0.16.

Version 1.32. Tagged as 'SprExtend-1_32'
@
text
@a19 1
#include <string.h>
d29 6
a38 1

d41 1
d45 3
a47 1
  printf("cinfo_buffer_end * %i\n", offsetof(struct decompress_info_struct, buffer_end));
@


4.3.2.1
log
@Push some redundant files into the attic.
@
text
@d24 1
a24 1
#include "jpeglib.h"
d30 4
a33 4
  printf("huff_tbl_maxcode * %i\n", offsetof(JHUFF_TBL, maxcode[0]));
  printf("huff_tbl_valptr * %i\n", offsetof(JHUFF_TBL, valptr[0]));
  printf("huff_tbl_huffval * %i\n", offsetof(JHUFF_TBL, huffval[0]));
  printf("huff_tbl_shortcut * %i\n", offsetof(JHUFF_TBL, shortcut[0]));
d37 4
a40 4
  printf("cinfo_next_input_byte * %i\n", offsetof(struct jpeg_decompress_struct, next_input_byte));
  printf("cinfo_get_buffer * %i\n", offsetof(struct jpeg_decompress_struct, get_buffer));
  printf("cinfo_bits_left * %i\n", offsetof(struct jpeg_decompress_struct, bits_left));
  printf("cinfo_buffer_end * %i\n", offsetof(struct jpeg_decompress_struct, buffer_end));
@


4.3.2.2
log
@Create assembler equivalents of C colour conversions, approx 10% speed up.
Add new switch ASMCOLOR to select which to use, C or assembler.
Remove FILE_ exit trace concept, just use __FILE__ instead in exit_erl.
Add some comments to exit_erl and friends.
A few bits of cinfo setup moved into start_pass_huff_decoder() or eliminated.
Bumped up the precision of SCALE_BITS in the C colour handling so FIX() uses more bits of an int.
Deleted the unused remenants of light dithering in the 8bpp colour converter - saves a few cycles.
colour_convert_8 and colour_convert_16 no longer save entry registers the C compiler doesn't care about.
Update genyuvtabs to EXPORT the table bases.
Split out the compilation of IJG files as separate objects in the make file, rather than including them from within rojpeg, which is itself included from putscaled.

Version 1.38, 1.35.2.6. Tagged as 'SprExtend-1_38-1_35_2_6'
@
text
@d23 1
@


4.3.2.3
log
@New jerror.h taken from IJG8b.
Swap to using JERR_ numbers, deleted E_ numbers.
Modify genjhdr to pass some defines to the assembler code, so jdcolor can clarify use of DCTSIZE and DCTSIZE2.
Added chart of possible subsampling ratios to documentation.

Version 1.38, 1.35.2.9. Tagged as 'SprExtend-1_38-1_35_2_9'
@
text
@d20 1
a22 1
#define JPEG_INTERNALS
a28 7
  printf("DCTSIZE * %i\n", DCTSIZE);
  printf("DCTSIZE2 * %i\n", DCTSIZE2);
  printf("JWRN_HUFF_BAD_CODE * %i\n", JWRN_HUFF_BAD_CODE);
  printf("JWRN_TOO_MUCH_DATA * %i\n", JWRN_TOO_MUCH_DATA);
  
  printf("\n");

a36 4
  printf("cinfo_buffer_end * %i\n", offsetof(struct jpeg_decompress_struct, buffer_end));

  printf("\n");

d39 1
@


4.3.2.4
log
@Huffman decode adjusted to accept quantisation tables of 16 or 32 bit values (though use of LDAH macro).
IJG 8b uses UINT16 values now, but there's no measurable speed difference despite one/two extra instructions per AC component.

Version 1.38, 1.35.2.10. Tagged as 'SprExtend-1_38-1_35_2_10'
@
text
@a26 2
  JQUANT_TBL table;
  
a32 2
  printf("sizeof_quantval * %i\n", sizeof(table.quantval[0]));
  UNUSED(table);
d37 1
a37 1
  printf("huff_tbl_valoffset * %i\n", offsetof(JHUFF_TBL, valoffset[0]));
@


4.3.2.5
log
@Remap return results for CFSI-JPEG to match new cinfo structure.
Tested with a handful of JPEGs and !ChangeFSI.

Version 1.38, 1.35.2.11. Tagged as 'SprExtend-1_38-1_35_2_11'
@
text
@a30 1
  /* Defined constants */
d37 1
a39 3
  /* For jdhuff */
  printf("cinfo_get_buffer * %i\n", offsetof(struct jpeg_decompress_struct, get_buffer));
  printf("cinfo_bits_left * %i\n", offsetof(struct jpeg_decompress_struct, bits_left));
a43 1
  printf("\n");
a44 8
  /* Exposed bits of jpeg_decompress_struct */
  printf("cinfo_workspace_size * %i\n", offsetof(struct jpeg_decompress_struct, workspace_size));
  printf("cinfo_error_code * %i\n", offsetof(struct jpeg_decompress_struct, error_code));
  printf("cinfo_error_argument1 * %i\n", offsetof(struct jpeg_decompress_struct, error_argument1));
  printf("cinfo_error_argument2 * %i\n", offsetof(struct jpeg_decompress_struct, error_argument2));
  printf("cinfo_image_width * %i\n", offsetof(struct jpeg_decompress_struct, image_width));
  printf("cinfo_image_height * %i\n", offsetof(struct jpeg_decompress_struct, image_height));
  printf("cinfo_jpeg_color_space * %i\n", offsetof(struct jpeg_decompress_struct, jpeg_color_space));
a46 1
  /* For jdatasrc */
d49 1
d52 3
@


4.3.2.6
log
@Reorganise data input.
Fill in INPUT_VARS and INPUT_SYNC so it uses register variables.
Make use of data source manager (cinfo->src).
Calculate bytes_in_buffer when restoring the huffman position.
Swap process_restart() for the one now in jdmarker.

Version 1.38, 1.35.2.13. Tagged as 'SprExtend-1_38-1_35_2_13'
@
text
@d60 2
a61 2
  printf("cinfo_next_input_byte * %i\n", offsetof(struct jpeg_decompress_struct, s_source_mgr.next_input_byte));
  printf("cinfo_bytes_in_buffer * %i\n", offsetof(struct jpeg_decompress_struct, s_source_mgr.bytes_in_buffer));
@


4.3.2.7
log
@Abstract entropy decoding.
Currently still only support Huffman, but now agnostic, there are two functions 'decode_mcu()' which does the full DC+AC decode of a full MCU worth of data, and 'skip_mcu()' which just does DC and consumes but discards the AC coefficients.
Apply fix from 1.40 trunk version for monochrome output in a 8bpp greyscale mode.
Restore name of DCTFIX() macro to FIX(), no longer needed now the constituent parts are compiled seperately rather than #included.
Fix CFSIjpeg to assemble even though it doesn't have a module base (the recently added 'relocatefn()' was breaking it).

Version 1.38, 1.35.2.14. Tagged as 'SprExtend-1_38-1_35_2_14'
@
text
@d41 2
a42 2
  printf("cinfo_get_buffer * %i\n", offsetof(struct jpeg_decompress_struct, s_entropy_decoder.bitstate.get_buffer));
  printf("cinfo_bits_left * %i\n", offsetof(struct jpeg_decompress_struct, s_entropy_decoder.bitstate.bits_left));
@


4.2
log
@Remove postprocessing step of C code.
Since 2001 this module has been using objasm, but still using the C compiler to output (via -S) assembly code which is then passed through 'sed' and included via GET into the assembler code.
Changed to compile the C code into object files, and use the linker to patch up the unresolved references - this has required some reordering of the C code to make sure static functions now appear in the object file, and some reordering of the header files to ensure both the module and the CFSI version still compile without conflicts.
Minor fix to 'swiv2', the label was in the wrong place for _swi() though it's not used in this module so didn't affect the _swix() case.
Makefile cut down a bit. Unixify some path names.
Test code moved to 'Test/c' directory.
Tested in both debug and non debug cases via softloaded module. Oddly, it's 4 bytes longer than the previous version.

Version 1.28. Tagged as 'SprExtend-1_28'
@
text
@d26 1
a26 1
int main(int argc, char **argv)
@


4.1
log
@Clean up pass.
Trim 200+ lines of changes dating back to 1987, combine with non duplicates in the 'BlackLog'.
Use 'offsetof' macro in genjhdr to avoid warnings about uninitialised variables, rename from makejhdr so all the utils are clearly demarked.
Add throwback to MkCFSI-j.
Replace reason codes passed to SWIs with textual equivalents from the respective header files.
Speed up SWI despatch a bit by making the first few debug instructions depend on 'debuggs'.
Qualify all of the debug switches with the global 'debug' one.
Eliminate single use of 'pullx' macro.
Make do_branch() take an unsigned opcode so 50% of the branches don't result in implied cast warnings.
Added an UNUSED() macro to reduce a few of the legitimate warnings (the remainder are either in the original JPEG code or ones that it is worth checking the logic of.
Unixify one last filename.

Version 1.24. Tagged as 'SprExtend-1_24'
@
text
@d23 1
@

