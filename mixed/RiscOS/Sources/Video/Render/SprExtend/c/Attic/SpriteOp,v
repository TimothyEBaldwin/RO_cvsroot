head	4.3;
access;
symbols
	SprExtend-1_26:4.2
	SprExtend-1_25:4.2
	SprExtend-1_24:4.2
	SprExtend-1_23:4.2
	SprExtend-1_22:4.2
	SprExtend-1_21:4.2
	SprExtend-1_20:4.2
	SprExtend-1_19:4.2
	SprExtend-1_18:4.2
	SprExtend-1_17:4.2
	RO_5_07:4.2
	SprExtend-1_16:4.2
	SprExtend-1_15:4.2
	SprExtend-1_14:4.2
	SprExtend-1_13:4.2
	SprExtend-1_12:4.2
	SprExtend-1_11:4.2
	SprExtend-1_10:4.1
	SprExtend-1_09:4.1
	SprExtend-1_08:4.1
	dellis_autobuild_BaseSW:4.1
	SprExtend-1_07:4.1
	SprExtend-1_06:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	SprExtend-1_05:4.1
	Ursula_merge:4.1
	nturton_SprExtend-1_04:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SprExtend-0_99:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2010.09.19.09.11.17;	author rsprowson;	state dead;
branches;
next	4.2;

4.2
date	2002.11.06.13.20.30;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.45.06;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.45.06;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.41.13;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.57.42;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.20.22;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Panel beat with hammer of sanity.
Deleted c.SpriteOp to untangle it from c.rojpeg to draw boundary around JPEG code.
Moved all the OS_SpriteOp code out of SprExtend into a new file SprOp, so the main file just contains the usual macros/includes/module heading.
Added new 'debugso' switch for debugging SpriteOps, was previously using 'debuggs' which is supposed to be for JPEG leading to reams of confusing debug.
TestForMaskAtDepth was rejecting 8bpp sprites with masks due to testing against log2bpp (4) instead of sprite type (5).
NSM_bpptable re-encoded in bytes rather than words, accesses ammended accordingly.
Took fresh copy of swiv2 from RISCOS_Lib revision 4.7.
SpriteV interception made a bit simpler (& faster).
Fixes to validate sprite (SpriteOp 17):
 Was looking at the wrong bits of the mode word to test for old mode words.
 Added new test for DPI values being non zero.
 Algorithm more closely follows PRM.

Version 1.27. Tagged as 'SprExtend-1_27'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef CFSI
static int check_sprite_area(char *SpriteArea)
{
  int   SizeOfArea = *(int *)(SpriteArea);
  int   NumberOfSprites = *(int *)(SpriteArea+4);
  int   OffsetToSprite = *(int *)(SpriteArea+8);
  int   OffsetToFreeWord = *(int *)(SpriteArea+12);
  char  *CurrentPos = SpriteArea;
  int   loop,
        bpp;

  tracef("CurrentPos = %x\n\n" _ CurrentPos);
  tracef("SizeOfArea = %d number of sprites = %d\n" _ SizeOfArea _ NumberOfSprites);
  tracef("offset to first sprite = %d, offset to free word = %d\n" _ OffsetToSprite _ OffsetToFreeWord);
  if (OffsetToSprite > OffsetToFreeWord) return(1);
  if (OffsetToFreeWord > SizeOfArea) return(1);

  CurrentPos = SpriteArea + OffsetToSprite;
  tracef("CurrentPos = %x\n" _ CurrentPos);
  for (loop = 0;loop < NumberOfSprites;loop++)
  {
/*    char *CurrentSprite = CurrentPos;*/
    int NextOffset = *(int *)(CurrentPos);
#ifdef DEBUG
    char *SpriteName = CurrentPos+4;
#endif
    int width = *(int *)(CurrentPos+16);
    int height = *(int *)(CurrentPos+20);
    int FirstBit = *(int *)(CurrentPos+24);
    int LastBit = *(int *)(CurrentPos+28);
    int OffsetToSprite = *(int *)(CurrentPos+32);
    int OffsetToMask = *(int *)(CurrentPos+36);
    int ModeWord = *(int *)(CurrentPos+40);

    tracef("Current Sprite = %x, Next offset = %d\n" _ CurrentPos _ NextOffset);
    tracef("Sprite Name = %s\nwidth = %d, height = %d\n" _ SpriteName _ width _ height);
    tracef("First bit used = %d, Last bit = %d\n" _ FirstBit _ LastBit);
    tracef("Offset to sprite = %d, mask = %d\n" _ OffsetToSprite _ OffsetToMask);
    tracef("Mode Word = %x\n" _ ModeWord);
    if (NextOffset < 0 /* JRF: Fix for -ve lengths */ ||
        (NextOffset + (int)CurrentPos) > ((int)SpriteArea + SizeOfArea)) return(1);
    tracef("passed next sprite within 'used' check\n");
    if (FirstBit > 31) return(1);
    if (LastBit > 31) return(1);
    tracef("passed First and Last bit checks\n");
    if ((OffsetToSprite + (int)CurrentPos) > ((int)SpriteArea + SizeOfArea)) return(1);
    tracef("passed sprite still in area check\n");
    if ((OffsetToMask + (int)CurrentPos) > ((int)SpriteArea + SizeOfArea)) return(1);
    tracef("passed mask still in area check\n");
    if ((ModeWord >> 24) > 0)
    {
      tracef("New format sprite!!\n");
      if (FirstBit != 0) return(1);
    }
    tracef("passed first bit == 0 for new sprites check\n");
    if (OffsetToSprite != OffsetToMask)
    {
      tracef("sprite has mask\n");
      if ((width+1)*(height+1)*4 + OffsetToSprite > OffsetToMask) return(1);
      tracef("passed width*height <= size check\n");
      if ((ModeWord >> 24) == 0)
      {
        if ((width+1)*(height+1)*4 + OffsetToMask > NextOffset) return(1);
        tracef("passed mask width*height <= size check\n");
        if (NextOffset-OffsetToMask != OffsetToMask-OffsetToSprite) return(1);
        tracef("passed size of mask == size of sprite check\n");
      }
      else
      {
        _kernel_oserror *e;

        tracef("New format sprite!! => 1bpp mask\n");
        if ((ModeWord > 255) && ((ModeWord & 1) == 0)) return(1);
        tracef("Passed valid mode check\n");
        e = _swix(OS_ReadModeVariable, _IN(0) | _IN(1) | _OUT(2), ModeWord, 9, &bpp);
        if (e != NULL) return(1);
        if (  (((((width << (5-bpp)) + (LastBit+1>>bpp)) + 31) & ~31) >> 3) *
             (height+1) + OffsetToMask != NextOffset           ) return(1);
        tracef("passed 1bpp mask width*height == size check\n");
      }
    }
    else
    {
      tracef("sprite has no mask\n");
      if ((width+1)*(height+1)*4 + OffsetToSprite > NextOffset) return(1);
      tracef("passed width*height <= size check\n");
    }
    if (((NextOffset | OffsetToSprite | OffsetToMask) & 3) != 0) return(1);
    tracef("passed offsets word aligned check\n");
    CurrentPos += NextOffset;
    if ((loop+1 < NumberOfSprites) && ((int)CurrentPos+44) > ((int)SpriteArea + SizeOfArea)) return(1);
  }
  tracef("passed all checks\n");
  return(0);
}
#endif
@


4.2
log
@A couple of 32-bit fixes.
Used to interpret negative translation table pointers as "none"; now just 0
as per documentation.
Plotting 16bpp sprites into 32bpp modes now correctly sets the 3 least
significant bits of each channel - used to be set to 0 due to a typo.
Build option (currently set to on) to use SMULL instructions.

Version 1.11. Tagged as 'SprExtend-1_11'
@
text
@@


4.1
log
@Initial revision
@
text
@d51 1
a51 1
    tracef("Fisrt bit used = %d, Last bit = %d\n" _ FirstBit _ LastBit);
d54 2
a55 1
    if ((NextOffset + (int)CurrentPos) > ((int)SpriteArea + SizeOfArea)) return(1);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
