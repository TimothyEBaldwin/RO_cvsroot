head	4.5;
access;
symbols
	SprExtend-1_83:4.5
	SprExtend-1_82:4.5
	SprExtend-1_81:4.5
	SprExtend-1_80:4.5
	SprExtend-1_79:4.5
	SprExtend-1_78:4.5
	SprExtend-1_77:4.5
	SprExtend-1_76:4.5
	SprExtend-1_75:4.5
	SprExtend-1_74:4.5
	SprExtend-1_73:4.5
	SprExtend-1_72:4.5
	SprExtend-1_71-nocfsi:4.5
	SprExtend-1_71:4.5
	SprExtend-1_70-tracef:4.5
	SprExtend-1_70-headers:4.5
	SprExtend-1_70:4.5
	SprExtend-1_69:4.5
	SprExtend-1_68:4.5
	SprExtend-1_67:4.5
	SprExtend-1_66:4.5
	SprExtend-1_65:4.5
	SprExtend-1_64:4.5
	SprExtend-1_63:4.5
	SprExtend-1_62:4.5
	SprExtend-1_61:4.5
	SprExtend-1_60:4.5
	SprExtend-1_59:4.5
	SprExtend-1_58:4.5
	SprExtend-1_57:4.5
	SprExtend-1_56:4.5
	SprExtend-1_55:4.5
	SprExtend-1_54:4.5
	SprExtend-1_53:4.5
	SprExtend-1_52:4.5
	SprExtend-1_51:4.5
	SprExtend-1_50:4.4
	SprExtend-1_38-1_35_2_16:4.4
	SprExtend-1_49:4.4
	SprExtend-1_48:4.4
	SprExtend-1_47:4.4
	SprExtend-1_38-1_35_2_15:4.4
	SprExtend-1_46:4.4
	SprExtend-1_45:4.4
	SprExtend-1_44:4.4
	SprExtend-1_43:4.4
	SprExtend-1_42:4.4
	SprExtend-1_41:4.4
	SprExtend-1_38-1_35_2_14:4.4
	SprExtend-1_40:4.4
	SprExtend-1_38-1_35_2_13:4.4
	SprExtend-1_38-1_35_2_12:4.4
	SprExtend-1_38-1_35_2_11:4.4
	SprExtend-1_38-1_35_2_10:4.4
	SprExtend-1_38-1_35_2_9:4.4
	SprExtend-1_38-1_35_2_8:4.4
	SprExtend-1_39:4.4
	SprExtend-1_38-1_35_2_7:4.4
	SprExtend-1_38-1_35_2_6:4.4
	SprExtend-1_38-1_35_2_5:4.4
	SprExtend-1_38-1_35_2_4:4.4
	SprExtend-1_38-1_35_2_3:4.4
	SprExtend-1_38-1_35_2_2:4.4
	SprExtend-1_38-1_35_2_1:4.4
	MigrateIJG8b:4.4.0.2
	SprExtend-1_38:4.4
	SprExtend-1_37:4.4
	SprExtend-1_36:4.4
	SprExtend-1_35:4.4
	SprExtend-1_34:4.4
	SprExtend-1_33:4.4
	SprExtend-1_32:4.4
	SprExtend-1_31:4.4
	SprExtend-1_30:4.4
	SprExtend-1_29:4.4
	SprExtend-1_28:4.4
	SprExtend-1_27:4.4
	SprExtend-1_26:4.4
	SprExtend-1_25:4.4
	SprExtend-1_24:4.4
	SprExtend-1_23:4.4
	SprExtend-1_22:4.4
	SprExtend-1_21:4.4
	SprExtend-1_20:4.4
	SprExtend-1_19:4.4
	SprExtend-1_18:4.4
	SprExtend-1_17:4.4
	RO_5_07:4.3
	SprExtend-1_16:4.3
	SprExtend-1_15:4.3
	SprExtend-1_14:4.3
	SprExtend-1_13:4.3
	SprExtend-1_12:4.3
	SprExtend-1_11:4.3
	SprExtend-1_10:4.3
	SprExtend-1_09:4.3
	SprExtend-1_08:4.3
	dellis_autobuild_BaseSW:4.2
	SprExtend-1_07:4.2
	SprExtend-1_06:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	SprExtend-1_05:4.1
	Ursula_merge:4.1
	nturton_SprExtend-1_04:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SprExtend-0_99:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2012.08.10.21.21.58;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	2YHsqEnypOzgS2gw;

4.4
date	2004.12.07.15.46.55;	author jbyrne;	state Exp;
branches;
next	4.3;

4.3
date	2001.05.15.10.57.00;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.12.12.59.05;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.45.16;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.45.16;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.42.42;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.58.26;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.20.59;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Add support for self registered resources (standalone)
* Listen for ResourceFS starting service call
* De/Register files appropriately
* Refactor makefile to have two possible install targets
* Simplify the ColourTrans RMEnsure

Version 1.51. Tagged as 'SprExtend-1_51'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; OSS Message file handling code, created for Internationalisation.
; I can't use the workspace in Sprite Extend as R12 does not always point at
; the workspace.
;
;
; Amusing rant censored by Big Brother at ROOL - sorry folks!
;
;
;

; The problem with all this is that "Sprite doesn't exist" is a very
; heavily used error. The Wimp uses it when searching through its different
; sprite pools (RAM and ROM). The Filer uses it when displaying small
; icons. In fact, it is so heavily used that it needs to be as fast as
; possible, so it is cached. All the other errors are real genuine errors
; and there is no problem with them being a bit slow.


; OSS Free the cached "Sprite doesn't exist" error block.
; MUST preserve R0 and the V flag.

free_sprite_doesnt_exist_error EntryS "r0-r2"
        LDR     r2, sprite_doesnt_exist_error
        TEQ     r2, #0                          ; Check if it needs freeing
        EXITS   EQ                              ; Doesn't need freeing
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module                      ; Free it
        MOV     r2, #0
        STR     r2, sprite_doesnt_exist_error   ; Ensure not freed again
        EXITS                                   ; Ignore errors


; OSS Cache (or re-cache) the "Sprite doesn't exist" error block

cache_sprite_doesnt_exist_error Entry "r0-r7"
        BL      free_sprite_doesnt_exist_error  ; Free it if already cached
        BLVC    open_message_file_stack         ; Open file on stack
        STRVS   r0, [sp]
        EXIT    VS                              ; We got an error

; From here on remember to unwind stack (ie. call close) on error

        ADR     r0, ErrorBlock_DoesntExist      ; Pointer to error block
        MOV     r1, sp                          ; Pointer to file handle
        MOV     r2, #0                          ; Use internal buffer
        addr    r4, Title                       ; %0 -> Module title
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_ErrorLookup
        LDR     r1, [r0]                        ; Get returned error number
        LDR     r2, ErrorBlock_DoesntExist      ; Get expected error number
        TEQ     r1, r2                          ; Did MessageTrans return an error?
        BNE     error_while_file_open           ; Note: V flag is still set from SWI return

        ADD     r3, r0, #4                      ; Find end of error block
00
        LDRB    r1, [r3], #1
        CMP     r1, #0
        BNE     %BT00
        SUB     r3, r3, r0                      ; R3 is length of error block
        ADD     r3, r3, #3
        BIC     r3, r3, #3                      ; Round up to word multiple
        MOV     r4, r0

        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        BVS     error_while_file_open
        STR     r2, sprite_doesnt_exist_error   ; Save pointer to block
01
        LDR     r0, [r4], #4                    ; Copy from MessageTrans buffer to block
        STR     r0, [r2], #4
        SUBS    r3, r3, #4
        BNE     %BT01

        BL      close_message_file_stack        ; Close and unwind stack
        EXIT


; OSS Both of the functions called here preserve R0 and the V bit.

error_while_file_open
        BL      free_sprite_doesnt_exist_error  ; Free block if necessary
        BL      close_message_file_stack        ; Close and unwind stack
        STR     r0, [sp]                        ; Original error into stack R0
        EXIT


; OSS Special error block with a long meaningful token. This is in case
; we fail to cache it so the token returned is fairly helpful.

ErrorBlock_DoesntExist
        DCD     ErrorNumber_Sprite_DoesntExist
        DCB     "NoSprit", 0
        ALIGN


; OSS Function to return a "Sprite doesn't exist" error block. In the case
; that it is not cached, there was an error earlier. We do NOT try to
; re-cache it, because we will almost certainly get the same error again.
; Instead we return a pointer to the token error block. It is important
; that this error is ALWAYS returned with the correct error number, even
; when the Messages file is missing and similar problems. Otherwise the
; Wimp does not move onto the ROM sprite pool and hence the pointer and
; half the icons on the icon bar disappear! Fortunately this is not a problem,
; as the cached error always has the correct number and the default
; error block returned in the case it isn't cached (ie. file/token not
; found) has the correct error number in too.

get_sprite_doesnt_exist_error ROUT
        LDR     r0, sprite_doesnt_exist_error   ; Cached block
        TEQ     r0, #0
        ADREQ   r0, ErrorBlock_DoesntExist      ; Token block
        SETV
        MOV     pc, lr


; OSS Translate an error block, with one substituted parameter.

; In:   r0 -> Error block containing the token
;       r1 -> %0 parameter to substitute

; Out:  r0 -> Translated error block or another error (token no found etc.)
;       All other registers preserved, V always set, other flags undefined

copy_error_one Entry "r2-r7"
        MOV     r4, r1                          ; Move input %0
        BL      open_message_file_stack         ; Open the file
        EXIT    VS                              ; Return the error

        MOV     r1, sp                          ; Messages file handle on stack
        MOV     r2, #0                          ; Use MessageTrans buffer
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_ErrorLookup       ; Always sets the V flag

        MOV     r1, r4                          ; Preserve input r1
        BL      close_message_file_stack        ; Close the file
        EXIT


message_filename
        DCB     "Resources:$.Resources.SprExtend.Messages", 0
        ALIGN


; Carve the message file block off the stack, open the Messages file,
; and exit with the open file block on the stack unless there was an error.
; Preserves r0 (token to be looked up) unless error. Trashes R1, R2, R6, R7.

open_message_file_stack ROUT
        MOV     r7, lr                  ; Save LR
        MOV     r6, r0                  ; Save token/error block
        SUB     sp, sp, #16             ; Carve message file handle off stack

        MOV     r0, sp                  ; File handle on stack
        ADR     r1, message_filename    ; Filename
        MOV     r2, #0                  ; Direct access/buffer in RMA
        SWI     XMessageTrans_OpenFile  ; Open the file

        ADDVS   sp, sp, #16             ; Error - put stack back
        MOVVC   r0, r6                  ; Not error - restore token block
        MOV     pc, r7                  ; Return


; Close the message file block on the stack, restore the stack, and return.
; Preserves R0 (error block) and V bit. Trashes R5-R7.

close_message_file_stack ROUT
        [ :LNOT: No32bitCode
        SavePSR r5                      ; Save CPSR
        ]
        MOV     r7, lr                  ; Save LR (and V bit)
        MOV     r6, r0                  ; Save translated error block

        MOV     r0, sp                  ; Message file block is on stack
        SWI     XMessageTrans_CloseFile ; Close the file (ignore error)

        ADD     sp, sp, #16             ; Put stack back
        MOV     r0, r6                  ; Restore translated error
        [ No32bitCode
        MOVS    pc, r7                  ; Return and preserve V bit
        |
        RestPSR r5,,f                   ; Preserve V bit
        MOV     pc, r7                  ; Return
        ]


        END
@


4.4
log
@  Fix bug where "Sprite doesn't exist" error message was being truncated.
Detail:
  cache_sprite_doesnt_exist_error routine in MsgCode failed to take into
  account the fact that the messages file might be tokenised. Calling
  MessageTrans_Lookup with R2=0 gives you the length of the unexpanded
  message in R3. Now fixed to work in a better way.
  Also rename fp to r11 in swiv2 file to avoid assembler warnings.
Admin:
  Soft-loaded module tested. Problem seems to be solved.


Version 1.17. Tagged as 'SprExtend-1_17'
@
text
@a158 3
        [ localmessages
        DCB     "LocalRes:Messages", 0
        |
a159 1
        ]
@


4.3
log
@  Now uses objasm throughout instead of aasm.
Detail:
  The build structure for this module is not nice - I've sanitised it a
    bit, but it's still not nice.
Admin:
   Built and tested with the test program briefly - the test sprite seems
     to scale and rotate properly.  ChangeFSI not tested.


Version 1.08. Tagged as 'SprExtend-1_08'
@
text
@d58 4
a61 4
        MOV     r0, sp                          ; Pointer to file handle
        ADR     r1, ErrorBlock_DoesntExist+4    ; Pointer to token
        MOV     r2, #0                          ; No buffer - direct pointer
        MOV     r4, #0                          ; No %0 (should be Title)
d65 15
a79 7
        SWI     XMessageTrans_Lookup
        BVS     error_while_file_open

; R3 is now length not including termination. Need to add 1 for terminator,
; another 4 for the error number, subtract 2 for the %0, and add the length
; of the module title which will go in place of the %0. 1+4-2+title =
; 3+length of module title.
a80 1
        ADD     r3, r3, #(3+EndTitle-Title)
d85 5
a89 11

        LDR     r0, ErrorBlock_DoesntExist      ; Get error number
        STR     r0, [r2]                        ; Put number in new block
        ADD     r2, r2, #4                      ; Skip past error number
        SUB     r3, r3, #4                      ; Reduce length for number

        MOV     r0, sp                          ; Pointer to file handle
        ADR     r1, ErrorBlock_DoesntExist+4    ; Pointer to token
        addr    r4, Title                       ; %0 -> Module title
        SWI     XMessageTrans_Lookup
        BVS     error_while_file_open           ; Implies got length wrong
d146 1
a146 1
        MOV     r1, sp                          ; Messages file handl on stack
@


4.2
log
@32-bit compatible. Tagged as SprExtend-1_06
@
text
@d50 1
a50 1
cache_sprite_doesnt_exist_error ENTRY "r0-r7"
d159 1
a159 1
        DCB     "Resources.<Locale>.Messages", 0
d190 1
a190 1
        mrs    ,r5, CPSR                ; Save CPSR
d203 1
a203 1
        msr    ,CPSR_f, r5              ; Preserve V bit
@


4.1
log
@Initial revision
@
text
@d37 1
a37 1
free_sprite_doesnt_exist_error ENTRY "r0-r2" 
d128 2
a129 1
        ORRS    pc, lr, #V_bit                  ; Return and set V bit
d143 1
a143 1
        EXIT    VS                              ; Return the error 
d186 1
a186 1
; Preserves R0 (error block) and V bit. Trashes R6 and R7.
d189 3
d200 1
d202 4
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
