head	4.9;
access;
symbols
	SprExtend-1_83:4.9
	SprExtend-1_82:4.9
	SprExtend-1_81:4.9
	SprExtend-1_80:4.9
	SprExtend-1_79:4.9
	SprExtend-1_78:4.9
	SprExtend-1_77:4.9
	SprExtend-1_76:4.9
	SprExtend-1_75:4.9
	SprExtend-1_74:4.9
	SprExtend-1_73:4.9
	SprExtend-1_72:4.9
	SprExtend-1_71-nocfsi:4.9
	SprExtend-1_71:4.9
	SprExtend-1_70-tracef:4.8
	SprExtend-1_70-headers:4.8
	SprExtend-1_70:4.8
	SprExtend-1_69:4.8
	SprExtend-1_68:4.8
	SprExtend-1_67:4.8
	SprExtend-1_66:4.8
	SprExtend-1_65:4.8
	SprExtend-1_64:4.8
	SprExtend-1_63:4.8
	SprExtend-1_62:4.8
	SprExtend-1_61:4.8
	SprExtend-1_60:4.8
	SprExtend-1_59:4.8
	SprExtend-1_58:4.8
	SprExtend-1_57:4.8
	SprExtend-1_56:4.8
	SprExtend-1_55:4.8
	SprExtend-1_54:4.7
	SprExtend-1_53:4.7
	SprExtend-1_52:4.7
	SprExtend-1_51:4.7
	SprExtend-1_50:4.7
	SprExtend-1_38-1_35_2_16:4.7.2.1
	SprExtend-1_49:4.7
	SprExtend-1_48:4.7
	SprExtend-1_47:4.7
	SprExtend-1_38-1_35_2_15:4.7.2.1
	SprExtend-1_46:4.7
	SprExtend-1_45:4.7
	SprExtend-1_44:4.7
	SprExtend-1_43:4.7
	SprExtend-1_42:4.7
	SprExtend-1_41:4.7
	SprExtend-1_38-1_35_2_14:4.7.2.1
	SprExtend-1_40:4.7
	SprExtend-1_38-1_35_2_13:4.7.2.1
	SprExtend-1_38-1_35_2_12:4.7.2.1
	SprExtend-1_38-1_35_2_11:4.7
	SprExtend-1_38-1_35_2_10:4.7
	SprExtend-1_38-1_35_2_9:4.7
	SprExtend-1_38-1_35_2_8:4.7
	SprExtend-1_39:4.7
	SprExtend-1_38-1_35_2_7:4.7
	SprExtend-1_38-1_35_2_6:4.7
	SprExtend-1_38-1_35_2_5:4.7
	SprExtend-1_38-1_35_2_4:4.7
	SprExtend-1_38-1_35_2_3:4.7
	SprExtend-1_38-1_35_2_2:4.7
	SprExtend-1_38-1_35_2_1:4.7
	MigrateIJG8b:4.7.0.2
	SprExtend-1_38:4.7
	SprExtend-1_37:4.7
	SprExtend-1_36:4.6
	SprExtend-1_35:4.6
	SprExtend-1_34:4.6
	SprExtend-1_33:4.6
	SprExtend-1_32:4.6
	SprExtend-1_31:4.6
	SprExtend-1_30:4.6
	SprExtend-1_29:4.6
	SprExtend-1_28:4.5
	SprExtend-1_27:4.4
	SprExtend-1_26:4.4
	SprExtend-1_25:4.4
	SprExtend-1_24:4.4
	SprExtend-1_23:4.4
	SprExtend-1_22:4.4
	SprExtend-1_21:4.4
	SprExtend-1_20:4.4
	SprExtend-1_19:4.4
	SprExtend-1_18:4.4
	SprExtend-1_17:4.4
	RO_5_07:4.4
	SprExtend-1_16:4.4
	SprExtend-1_15:4.3
	SprExtend-1_14:4.3
	SprExtend-1_13:4.3
	SprExtend-1_12:4.3
	SprExtend-1_11:4.3
	SprExtend-1_10:4.3
	SprExtend-1_09:4.3
	SprExtend-1_08:4.3
	dellis_autobuild_BaseSW:4.2
	SprExtend-1_07:4.2
	SprExtend-1_06:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	SprExtend-1_05:4.1
	Ursula_merge:4.1
	nturton_SprExtend-1_04:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SprExtend-0_99:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.9
date	2016.05.21.13.44.32;	author rool;	state Exp;
branches;
next	4.8;
commitid	ZDqmsyNiMhv6Zl7z;

4.8
date	2013.10.07.00.39.06;	author jlee;	state Exp;
branches;
next	4.7;
commitid	HcUKy3PafwqToi8x;

4.7
date	2010.12.22.08.22.28;	author rsprowson;	state Exp;
branches
	4.7.2.1;
next	4.6;

4.6
date	2010.09.25.21.38.24;	author rsprowson;	state Exp;
branches;
next	4.5;

4.5
date	2010.09.25.12.19.17;	author rsprowson;	state Exp;
branches;
next	4.4;

4.4
date	2004.03.03.14.45.52;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2001.05.15.10.56.59;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.12.12.59.05;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.45.12;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.7.2.1
date	2011.01.29.10.05.52;	author rsprowson;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.45.12;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.42.00;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.58.09;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.20.42;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.9
log
@Import of IJG8d library sources
Detail:
  Using the decoder in "example.c" as a starting point, we try to follow that sequence more closely even if in our embedded implementation some of the functions don't do much.
  Uses the default colour backend for 32bpp BGR output for most of the unusual cases.
  The most common 2x2 subsampling case uses a custom merged upsampler and colour converter, with colour output directly in RISC OS format for the respective screen mode.
Admin:
  Submission for the JPEG bounty.

Version 1.71. Tagged as 'SprExtend-1_71'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.CSupport

        EXPORT  |__rt_sdiv|
        EXPORT  |__rt_udiv|
        EXPORT  |__rt_divtest|
        EXPORT  |memcpy|
        EXPORT  |memset|
        EXPORT  |relocate_func|
        EXPORT  |relocate_data|

; Error flags returned by exit_erl

ERROR_NO_MEMORY     * 1
ERROR_BAD_JPEG      * 2
ERROR_FATAL         * 4
ERROR_UNSUPP_JPEG   * 8
ERROR_PROG_JPEG_ERR * 16
ERROR_BAD_SPR_TYPE  * 32
ERROR_BAD_COLMAP    * 64

|x$divide|
|__rt_sdiv|
|_kernel_sdiv|
; Signed divide of a2 by a1: returns quotient in a1, remainder in a2
; Quotient is truncated (rounded towards zero).
; Sign of remainder = sign of dividend.
; Destroys a3, a4 and ip
; Negates dividend and divisor, then does an unsigned divide; signs
; get sorted out again at the end.
; Code mostly as for udiv, except that the justification part is slightly
; simplified by knowledge that the dividend is in the range [0..#x80000000]
; (one register may be gained thereby).

        MOVS    ip, a1
        BEQ     dividebyzero
        RSBMI   a1, a1, #0              ; absolute value of divisor
        EOR     ip, ip, a2
        ANDS    a4, a2, #&80000000
        ORR     ip, a4, ip, LSR #1
        ; ip bit 31  sign of dividend (= sign of remainder)
        ;    bit 30  sign of dividend EOR sign of divisor (= sign of quotient)
        RSBNE   a2, a2, #0              ; absolute value of dividend

        MOV     a3, a1
        MOV     a4, #0
s_loop
        CMP     a2, a3, ASL #0
        BLS     s_shifted0mod8
        CMP     a2, a3, ASL #1
        BLS     s_shifted1mod8
        CMP     a2, a3, ASL #2
        BLS     s_shifted2mod8
        CMP     a2, a3, ASL #3
        BLS     s_shifted3mod8
        CMP     a2, a3, ASL #4
        BLS     s_shifted4mod8
        CMP     a2, a3, ASL #5
        BLS     s_shifted5mod8
        CMP     a2, a3, ASL #6
        BLS     s_shifted6mod8
        CMP     a2, a3, ASL #7
        MOVHI   a3, a3, ASL #8
        BHI     s_loop
s_loop2
        CMP     a2, a3, ASL #7
        ADC     a4, a4, a4
        SUBHS   a2, a2, a3, ASL #7
        CMP     a2, a3, ASL #6
s_shifted6mod8
        ADC     a4, a4, a4
        SUBHS   a2, a2, a3, ASL #6
        CMP     a2, a3, ASL #5
s_shifted5mod8
        ADC     a4, a4, a4
        SUBHS   a2, a2, a3, ASL #5
        CMP     a2, a3, ASL #4
s_shifted4mod8
        ADC     a4, a4, a4
        SUBHS   a2, a2, a3, ASL #4
        CMP     a2, a3, ASL #3
s_shifted3mod8
        ADC     a4, a4, a4
        SUBHS   a2, a2, a3, ASL #3
        CMP     a2, a3, ASL #2
s_shifted2mod8
        ADC     a4, a4, a4
        SUBHS   a2, a2, a3, ASL #2
        CMP     a2, a3, ASL #1
s_shifted1mod8
        ADC     a4, a4, a4
        SUBHS   a2, a2, a3, ASL #1
        CMP     a2, a3, ASL #0
s_shifted0mod8
        ADC     a4, a4, a4
        SUBHS   a2, a2, a3, ASL #0
        CMP     a1, a3, LSR #1
        MOVLS   a3, a3, LSR #8
        BLS     s_loop2
        MOV     a1, a4
        TST     ip, #&40000000
        RSBNE   a1, a1, #0
        TST     ip, #&80000000
        RSBNE   a2, a2, #0
        MOV     pc, r14

; Signed remainder of a2 by a1: returns remainder in a1

|_kernel_srem|
        STR     r14, [sp, #-4]!
        BL      |_kernel_sdiv|
        MOV     a1, a2
        LDR     pc, [sp], #4

|x$udivide|
|__rt_udiv|
|_kernel_udiv|
; Unsigned divide of a2 by a1: returns quotient in a1, remainder in a2
; Destroys a3 and ip

        MOV     a3, #0
        RSBS    ip, a1, a2, LSR #3
        BCC     u_sh2
        RSBS    ip, a1, a2, LSR #8
        BCC     u_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&FF000000
        RSBS    ip, a1, a2, LSR #4
        BCC     u_sh3
        RSBS    ip, a1, a2, LSR #8
        BCC     u_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&00FF0000
        RSBS    ip, a1, a2, LSR #8
        MOVCS   a1, a1, LSL #8
        ORRCS   a3, a3, #&0000FF00
        RSBS    ip, a1, a2, LSR #4
        BCC     u_sh3
        RSBS    ip, a1, #0
        BCS     dividebyzero
u_loop  MOVCS   a1, a1, LSR #8
u_sh7   RSBS    ip, a1, a2, LSR #7
        SUBCS   a2, a2, a1, LSL #7
        ADC     a3, a3, a3
u_sh6   RSBS    ip, a1, a2, LSR #6
        SUBCS   a2, a2, a1, LSL #6
        ADC     a3, a3, a3
u_sh5   RSBS    ip, a1, a2, LSR #5
        SUBCS   a2, a2, a1, LSL #5
        ADC     a3, a3, a3
u_sh4   RSBS    ip, a1, a2, LSR #4
        SUBCS   a2, a2, a1, LSL #4
        ADC     a3, a3, a3
u_sh3   RSBS    ip, a1, a2, LSR #3
        SUBCS   a2, a2, a1, LSL #3
        ADC     a3, a3, a3
u_sh2   RSBS    ip, a1, a2, LSR #2
        SUBCS   a2, a2, a1, LSL #2
        ADC     a3, a3, a3
u_sh1   RSBS    ip, a1, a2, LSR #1
        SUBCS   a2, a2, a1, LSL #1
        ADC     a3, a3, a3
u_sh0   RSBS    ip, a1, a2
        SUBCS   a2, a2, a1
        ADCS    a3, a3, a3
        BCS     u_loop
        MOV     a1, a3
        MOV     pc, r14

|__rt_divtest|
|x$divtest|
; Check for divide by zero prior to the real division
        TEQ     a1, #0
        MOVNE   pc, lr
        B       dividebyzero
        
|memcpy|
; extern void *memcpy(void *a1, const void *a2, size_t a3)
        TEQ     a3, #0
        MOVNE   ip, a1
mc_0
        LDRNEB  a4, [a2], #1
        STRNEB  a4, [ip], #1
        SUBNES  a3, a3, #1
        BNE     mc_0
        MOV     pc, lr
        
|memset|
; extern void *memset(void *a1, int a2, size_t a3)
        TEQ     a3, #0
        MOVNE   ip, a1
ms_0
        STRNEB  a2, [ip], #1
        SUBNES  a3, a3, #1
        BNE     ms_0
        MOV     pc, lr

|relocate_func|
|relocate_data|
; extern void (*relocate_func(void (*)(void)))(void)
; extern void *relocate_data(void *)
        ADRL    r1, Module_BaseAddr - &8000
        ADD     r0, r1, r0
        MOV     pc, lr

        END
@


4.8
log
@Add support for blended sprite & JPEG rendering - alpha masks, alpha channels, and translucency
Detail:
  This big set of changes adds support for the following user-facing APIs, as per ROL's specs:
  - OS_SpriteOp 52 (PutSpriteScaled) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - OS_SpriteOp 56 (PutSpriteTransformed) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - JPEG_Plot[File]Scaled colourmapping & translucency blending
  - JPEG_Plot[File]Transformed colourmapping & translucency blending
  Sources/CFSI-JPEG, Sources/PutScaled:
  - Added exit_oserror exit routine for use by C code.
  - For SpriteExtend this allows the C code to cause OS_SpriteOp to exit with a given OS error block.
  - For CFSI-JPEG the error block is returned and ERROR_FATAL is returned to ChangeFSI.
  Sources/CSupport:
  - Add definitions for some error codes (matches existing definitions from h/commondefs)
  Sources/PutScaled:
  - Stripped out code to look for identity translation tables; now handled by preparettr routine in Sources/SprOp
  Sources/SWIs, Hdr/SprExtend:
  - JPEG SWIs updated to add support for alpha-blended and colour mapped JPEG rendering, following ROL's APIs
  Sources/SprExtend:
  - Stripped out lots of old build flags which haven't been touched in years.
  - Strip out assembler SprTrans code generator.
  - Add new definitions needed for blending & colour mapping.
  Sources/SprOp:
  - Updated PutScaled frontend to deal with blending and colour mapping.
  - Disabled code which was bodging coordinates when dealing with double-pixel modes - it seems to cause a few issues, and the code generator mostly had proper double-pixel support anyway.
  - Translation table verification and fiddling code rewritten and consolidated into the preparettr routine. C code is now explicitly told what table type is in use and whether it can safely be ignored in favour of using the sprite palette.
  - Removed code from CheckSpriteArea which was deliberately throwing an error upon seeing alpha-masked sprites; I think the bug that was hiding has been fixed now
  Sources/SprTrans
  - Removed the assembler version of the code generator.
  - Updated to add support for blending and colour mapping
  c/PutScaled:
  - Old test code removed.
  - Updated to add support for blending & colour mapping
  - Assorted bugs fixed.
  - A few extra architecture-specific optimisations added.
  - Some workspace setup code moved to c/asmcore to allow sharing with SprTrans.
  c/asmcore:
  - Register allocation code rewritten. Instead of allocating on a first-come, first-served basis, the code now builds a list of which logical registers are needed (and which 'banks' they fall into) and then attempts to allocate them in a more intelligent manner. It still has some failings (e.g. reusing R12 as a general purpose register is currently impossible) but it's a lot more flexible and reliable than the old code.
  - Core pixel transformation code updated to add support for blending & colour mapping
  - Added some extra architecture-specific optimisations
  c/rojpeg:
  - JPEG option handling updated to avoid trashing any colour mapping descriptor that may have been passed in
  c/sprtrans:
  - Updated to add support for blending & colour mapping
  c/tracing:
  - Debug assert messages now show filename as well as line number
  h/commondefs:
  - Removed old #define's that related to old assembler switches.
  h/putscaled:
  - Workspace definition updated to match assembler version.
  - SprTrans stack workspace structure moved here from c/sprtrans
Admin:
  Tested on BB-xM plotting all major sprite & JPEG types into all modes with all major options


Version 1.55. Tagged as 'SprExtend-1_55'
@
text
@d19 1
d22 2
d183 7
d211 8
@


4.7
log
@Reorganise rojpeg.
Aside from moving blocks around and adding comments, decisions about numcomponents use switch/case statements to allow CMYK support in the future.
Split out (some of the) Huffman decoding to allow arithmetic support in the future.
Moved memcpy() and memset() into CSupport.
Tested in all colour depths with 1x1; 1x2; 2x1; 2x2 sampling & ChangeFSI.
Tighten up check on cinfo being NULL (was previously only checked in the colour decoder, not the monochrome).

Version 1.37. Tagged as 'SprExtend-1_37'
@
text
@d22 10
@


4.7.2.1
log
@Migrate to jdmarker from IJG 8b.
ERREXIT's in jdhuff now use JERR_ numbers (missed earlier because it's switched out by default).

Version 1.38, 1.35.2.12. Tagged as 'SprExtend-1_38-1_35_2_12'
@
text
@a20 1
        EXPORT  |relocatefn|
a190 7
|relocatefn|
; extern void (*relocatefn(void (*)(void)))(void)
        ADRL    r1, Module_BaseAddr
        SUB     r0, r0, #&8000
        ADD     r0, r1, r0
        MOV     pc, lr

@


4.6
log
@Copy 'n' paste of an EXPORT twice corrected.
Retagged as SprExtend-1_29.
@
text
@d19 2
d170 21
@


4.5
log
@Remove postprocessing step of C code.
Since 2001 this module has been using objasm, but still using the C compiler to output (via -S) assembly code which is then passed through 'sed' and included via GET into the assembler code.
Changed to compile the C code into object files, and use the linker to patch up the unresolved references - this has required some reordering of the C code to make sure static functions now appear in the object file, and some reordering of the header files to ensure both the module and the CFSI version still compile without conflicts.
Minor fix to 'swiv2', the label was in the wrong place for _swi() though it's not used in this module so didn't affect the _swix() case.
Makefile cut down a bit. Unixify some path names.
Test code moved to 'Test/c' directory.
Tested in both debug and non debug cases via softloaded module. Oddly, it's 4 bytes longer than the previous version.

Version 1.28. Tagged as 'SprExtend-1_28'
@
text
@d18 1
a18 1
        EXPORT  |__rt_sdiv|
@


4.4
log
@Added __rt_udiv to Sources.CSupport. This is needed when built with a newer
C compiler that spots signed divisions of known-positive quantities (eg in
this case (<char>*254)/100), and does them as unsigned instead.

Version 1.16. Tagged as 'SprExtend-1_16'
@
text
@d15 4
a18 46
; Things that compiled C needs when included as AAsm source.
; Must appear before any included C output.

; Branches out of this code go to: dividebyzero.

; --------------------------------------------------------------------------

; Arrange to ignore spurious stack overflow warnings.
; sl register contains garbage, so ignore stack overflow.
; Just hope we have enough stack - we don't use much, so should be OK.
|x$stack_overflow|
|x$stack_overflow_1|
|__main|
        MOV     PC,LR
; We also define __main to allow for the spurious B to it at
; the front of the compiled code.

; These are the C register usages - the other ones are already
; defined. They're reproduced here because some code (eg. the divide
; routine) uses them. They must be deleted in some way from the
; assembler that the C compiler generates.
a1 RN 0
a2 RN 1
a3 RN 2
a4 RN 3
v1 RN 4
v2 RN 5
v3 RN 6
v4 RN 7
v5 RN 8
v6 RN 9
;sl RN 10
v8 RN 11
;ip RN 12
;sp RN 13
;lr RN 14
;pc RN 15

; --------------------------------------------------------------------------
; Signed divide, extracted directly from AppSource.RISC_OSLib.kernel.s.k_body,
; where it's called _kernel_sdiv. I use this rather than the conventional
; assembler version because I know it's precisely what C code expects.

;      [ debug
; Only used in printing numbers, in the code as it is at the moment!
; No, JPEG stuff ends up using it a little.
a20 1
;v5 of C compiler uses new name for _kernel_sdiv. __rt_sdiv
d113 1
a115 1
|x$udivide|
@


4.3
log
@  Now uses objasm throughout instead of aasm.
Detail:
  The build structure for this module is not nice - I've sanitised it a
    bit, but it's still not nice.
Admin:
   Built and tested with the test program briefly - the test sprite seems
     to scale and rotate properly.  ChangeFSI not tested.


Version 1.08. Tagged as 'SprExtend-1_08'
@
text
@d151 1
a151 1
        STMFD   sp!, {r14}
d154 56
a209 1
        LDMFD   sp!, {pc}
@


4.2
log
@32-bit compatible. Tagged as SprExtend-1_06
@
text
@a20 10
; Arrange to ignore spurious ObjAsm directives
        MACRO
        IMPORT  $a
        MEND
        MACRO
        AREA    $a,$b,$c
        MEND
        MACRO
        EXPORT  $a
        MEND
@


4.1
log
@Initial revision
@
text
@d38 1
a38 1
        MOVS    PC,LR
d57 1
a57 1
;fp RN 11
d156 1
a156 1
        MOVS    pc, r14
d164 1
a164 1
        LDMFD   sp!, {pc}^
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
