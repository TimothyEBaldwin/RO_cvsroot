head	4.15;
access;
symbols
	SprExtend-1_71:4.14
	SprExtend-1_70-tracef:4.13
	SprExtend-1_70-headers:4.13
	SprExtend-1_70:4.13
	SprExtend-1_69:4.12
	SprExtend-1_68:4.12
	SprExtend-1_67:4.12
	SprExtend-1_66:4.12
	SprExtend-1_65:4.12
	SprExtend-1_64:4.12
	SprExtend-1_63:4.12
	SprExtend-1_62:4.12
	SprExtend-1_61:4.12
	SprExtend-1_60:4.12
	SprExtend-1_59:4.12
	SprExtend-1_58:4.12
	SprExtend-1_57:4.12
	SprExtend-1_56:4.12
	SprExtend-1_55:4.12
	SprExtend-1_54:4.11
	SprExtend-1_53:4.11
	SprExtend-1_52:4.11
	SprExtend-1_51:4.10
	SprExtend-1_50:4.10
	SprExtend-1_38-1_35_2_16:4.9.2.8
	SprExtend-1_49:4.9
	SprExtend-1_48:4.9
	SprExtend-1_47:4.9
	SprExtend-1_38-1_35_2_15:4.9.2.7
	SprExtend-1_46:4.9
	SprExtend-1_45:4.9
	SprExtend-1_44:4.9
	SprExtend-1_43:4.9
	SprExtend-1_42:4.9
	SprExtend-1_41:4.9
	SprExtend-1_38-1_35_2_14:4.9.2.6
	SprExtend-1_40:4.9
	SprExtend-1_38-1_35_2_13:4.9.2.5
	SprExtend-1_38-1_35_2_12:4.9.2.4
	SprExtend-1_38-1_35_2_11:4.9.2.4
	SprExtend-1_38-1_35_2_10:4.9.2.3
	SprExtend-1_38-1_35_2_9:4.9.2.3
	SprExtend-1_38-1_35_2_8:4.9.2.2
	SprExtend-1_39:4.9
	SprExtend-1_38-1_35_2_7:4.9.2.2
	SprExtend-1_38-1_35_2_6:4.9.2.2
	SprExtend-1_38-1_35_2_5:4.9.2.1
	SprExtend-1_38-1_35_2_4:4.9
	SprExtend-1_38-1_35_2_3:4.9
	SprExtend-1_38-1_35_2_2:4.9
	SprExtend-1_38-1_35_2_1:4.9
	MigrateIJG8b:4.9.0.2
	SprExtend-1_38:4.9
	SprExtend-1_37:4.9
	SprExtend-1_36:4.9
	SprExtend-1_35:4.9
	SprExtend-1_34:4.8
	SprExtend-1_33:4.8
	SprExtend-1_32:4.8
	SprExtend-1_31:4.7
	SprExtend-1_30:4.7
	SprExtend-1_29:4.7
	SprExtend-1_28:4.7
	SprExtend-1_27:4.6
	SprExtend-1_26:4.6
	SprExtend-1_25:4.6
	SprExtend-1_24:4.6
	SprExtend-1_23:4.5
	SprExtend-1_22:4.5
	SprExtend-1_21:4.5
	SprExtend-1_20:4.4
	SprExtend-1_19:4.4
	SprExtend-1_18:4.3
	SprExtend-1_17:4.3
	RO_5_07:4.3
	SprExtend-1_16:4.3
	SprExtend-1_15:4.3
	SprExtend-1_14:4.3
	SprExtend-1_13:4.3
	SprExtend-1_12:4.3
	SprExtend-1_11:4.3
	SprExtend-1_10:4.3
	SprExtend-1_09:4.3
	SprExtend-1_08:4.3
	dellis_autobuild_BaseSW:4.2
	SprExtend-1_07:4.2
	SprExtend-1_06:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	SprExtend-1_05:4.1
	Ursula_merge:4.1
	nturton_SprExtend-1_04:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SprExtend-0_99:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.15
date	2016.05.21.13.48.14;	author rool;	state dead;
branches;
next	4.14;
commitid	F2CfxJ1XTlg50m7z;

4.14
date	2016.05.21.13.44.32;	author rool;	state Exp;
branches;
next	4.13;
commitid	ZDqmsyNiMhv6Zl7z;

4.13
date	2016.03.12.10.25.07;	author rool;	state Exp;
branches;
next	4.12;
commitid	cdOKhcORM5Eb8lYy;

4.12
date	2013.10.07.00.39.06;	author jlee;	state Exp;
branches;
next	4.11;
commitid	HcUKy3PafwqToi8x;

4.11
date	2013.08.07.23.39.02;	author jlee;	state Exp;
branches;
next	4.10;
commitid	OCG6UovOcK9SZz0x;

4.10
date	2012.07.28.15.23.38;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	b5jdybqzJ3Wdjlew;

4.9
date	2010.11.14.10.42.34;	author rsprowson;	state Exp;
branches
	4.9.2.1;
next	4.8;

4.8
date	2010.10.13.20.26.17;	author rsprowson;	state Exp;
branches;
next	4.7;

4.7
date	2010.09.25.12.19.17;	author rsprowson;	state Exp;
branches;
next	4.6;

4.6
date	2010.09.01.20.48.51;	author rsprowson;	state Exp;
branches;
next	4.5;

4.5
date	2009.06.11.22.12.54;	author bavison;	state Exp;
branches;
next	4.4;

4.4
date	2009.04.24.00.48.33;	author srevill;	state Exp;
branches;
next	4.3;

4.3
date	2001.05.15.10.56.59;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.12.12.59.04;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.45.11;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.9.2.1
date	2011.01.04.22.13.05;	author rsprowson;	state Exp;
branches;
next	4.9.2.2;

4.9.2.2
date	2011.01.09.10.42.55;	author rsprowson;	state Exp;
branches;
next	4.9.2.3;

4.9.2.3
date	2011.01.22.17.58.26;	author rsprowson;	state Exp;
branches;
next	4.9.2.4;

4.9.2.4
date	2011.01.29.10.03.35;	author rsprowson;	state Exp;
branches;
next	4.9.2.5;

4.9.2.5
date	2011.02.05.09.56.50;	author rsprowson;	state Exp;
branches;
next	4.9.2.6;

4.9.2.6
date	2011.02.15.20.57.58;	author rsprowson;	state Exp;
branches;
next	4.9.2.7;

4.9.2.7
date	2011.08.06.10.44.29;	author rsprowson;	state Exp;
branches;
next	4.9.2.8;
commitid	gAycmEnWp5AVeruv;

4.9.2.8
date	2012.07.28.14.42.48;	author rsprowson;	state Exp;
branches;
next	;
commitid	Ny6vV3CHXwee5lew;

4.1.1.1
date	96.11.05.09.45.11;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.41.59;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.58.07;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.20.41;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.15
log
@Removed CFSI-JPEG support
Detail:
  ChangeFSI now makes its own helper plugin which just calls the JPEG SWIs of the host OS, so there's no need for SpriteExtend to be complicated by this now.
Admin:
  Submission for the JPEG bounty.
  Tagged as SprExtend-1_71-nocfsi
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.CFSI-JPEG

; This makes an image of assembler code that can be loaded in by ChangeFSI
; and then called, to decode a JPEG file.
;
; At the start of the image are defined entrypoints.
; Conditions for entering these are:
;   lr = return address
;   sp -> a useable stack
;   r0..r3 = arguments (could be more on stack)
; On exit:
;   r0 will contain a returned result, if defined
;   r1..r3, lr will be trashed
;   all other registers will be preserved
;
; We cope with the whole 26/32-bit thing thus:
; All our C code is APCS-32. The routines like newline() and assert() called
; from our C thus are 32-bit. We don't know about the person using the generated
; CFSI-JPEG file, so we do a run-time check for whether to do a ^ or not on
; return, depending on current mode, in the outer wrapper.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:CPU.Arch
        GET     Hdr:ColourTran
        GET     Hdr:Sprite
        GET     Hdr:VduExt

        IMPORT  do_jpeg_scan_file_16
        IMPORT  do_jpeg_scan_file_32
        IMPORT  jpeg_find_line
        IMPORT  jpeg_find_image_dims
        EXPORT  exit
        EXPORT  exit_erl
        EXPORT  exit_oserror
        EXPORT  dividebyzero
        
        AREA    |!!!ChangeFSISupport$$Code|, CODE, READONLY, PIC

        B       cfsi_jpeg_scan_file_32
        B       cfsi_jpeg_find_line
        B       cfsi_find_image_dims
        B       cfsi_jpeg_scan_file_16
        DCD     3                     ; version number

cfsi_jpeg_scan_file_32
; Entry conditions: r0 -> space (word-aligned)
;                   r1 = size of space (bytes)
;                   r2 -> file image in store
;                   r3 = file image length
; On exit, the workspace has some interesting fields at the front
;    [space+0]  int error_code;                 /* Returned err code, 0 if no error */
;    [space+4]  int error_argument1;            /* Supplementary error data */
;    [space+8]  int error_argument2;            /* Supplementary error data */
;    [space+12] int a;                          /* Padding to retain compatibility with IJG 4 library */
;    [space+16] int b;                          /* Padding to retain compatibility with IJG 4 library */
;    [space+20] JDIMENSION image_width;         /* Overall image width */
;    [space+24] JDIMENSION image_height;        /* Overall image height */
;    [space+28] J_COLOR_SPACE jpeg_color_space; /* Colorspace of JPEG file (1 for greyscale, 3 for YUV) */
; All registers preserved except r0. r0=error code, 0 for OK or other for some error.
        STMDB   sp!,{r1-r12,lr}
        MOV     sl,sp                 ; used to remember panic exit point

        BL      do_jpeg_scan_file_32

        TEQ     pc,pc
        TEQ     pc,pc
        LDMNEIA sp!,{r1-r12,pc}^      ; 26-bit: safe
        LDMIA   sp!,{r1-r12,pc}

cfsi_jpeg_scan_file_16
; Simply call this instead of cfsi_jpeg_scan_file_32, and subsequent calls to
; cfsi_jpeg_find_line will generate pointers to lines of 16bpp pixels, instead
; of 32bpp ones.
; Entry conditions: r0 -> space (word-aligned)
;                   r1 = size of space (bytes)
;                   r2 -> file image in store
;                   r3 = file image length
        STMDB   sp!,{r1-r12,lr}
        MOV     sl,sp                 ; used to remember panic exit point

        BL      do_jpeg_scan_file_16

        TEQ     pc,pc
        TEQ     pc,pc
        LDMNEIA sp!,{r1-r12,pc}^      ; 26-bit: safe
        LDMIA   sp!,{r1-r12,pc}

cfsi_jpeg_find_line
; Entry conditions: r0 -> workspace
;                   r1 = required y coordinate (in 0..image_size-1)
; On exit r0 will point to the required scan line, as 16bpp or 32bpp VIDC20 RGB pixels.
        STMDB   sp!,{r1-r12,lr}
        MOV     sl,sp                 ; used to remember panic exit point

        BL      jpeg_find_line

        TEQ     pc,pc
        TEQ     pc,pc
        LDMNEIA sp!,{r1-r12,pc}^      ; 26-bit: safe
        LDMIA   sp!,{r1-r12,pc}

cfsi_find_image_dims
; Entry conditions: r0 -> JPEG data
;                   r1 -> word in which to put image width
;                   r2 -> word in which to put image height
;                   r3 -> word in which to put image type - 1=mono, 3=YUV or RGB, 4=CMYK or YCCK
;                   r4 -> word in which to put recommended size of workspace for jpeg_scan_file
; On exit, r0=0 if everything is OK, r0!=0 if this data does not look
; like JPEG.
        STMDB   sp!,{r1-r12,lr}
        MOV     sl,sp                 ; used to remember panic exit point
        SUB     sp,sp,#5*4
        MOV     r2,sp                 ; a word for the workspace recommendation
        ADD     r1,sp,#4              ; and 4 words for the result structure

        BL      jpeg_find_image_dims

        LDMIA   sp!,{r5-r9}           ; slurp image_dims_info struct into registers
        LDMIA   sp!,{r1-r4}           ; result addresses
        STR     r7,[r1]
        STR     r8,[r2]
        AND     r6,r6,#7              ; just the monochrome/colour bits
        STR     r6,[r3]
        STR     r5,[r4]

        TEQ     pc,pc
        TEQ     pc,pc
        LDMNEIA sp!,{r5-r12,pc}^      ; 26-bit: safe
        LDMIA   sp!,{r5-r12,pc}

exit_oserror
        MOV     r0, #ERROR_FATAL
exit
exit_erl
dividebyzero
; Panic exit from C code. we rely on sl being preserved through
; the c code, and use it to fetch back our call registers.
; On entry here r0 has a panic code.
        SUBS    sp,sl,#0              ; sp := sl, set C for next instruction!
        TEQ     pc,pc                 ; sets Z if in 32-bit mode
        LDMNEIA sp!,{r1-r12,pc}^      ; 26-bit: safe
        LDMIA   sp!,{r1-r12,pc}

newline
assert
Module_BaseAddr
; Hope the asserts are OK!
        MOV     pc,lr

        GBLL    cfsi_jpeg
cfsi_jpeg SETL  {TRUE}

        GET     Sources.CSupport
        GET     jhdr.s
;; TODO -       GET     Sources.jidctfst
;; TODO -       GET     Sources.jdcolor
        GET     Sources.diffuse

        END
@


4.14
log
@Import of IJG8d library sources
Detail:
  Using the decoder in "example.c" as a starting point, we try to follow that sequence more closely even if in our embedded implementation some of the functions don't do much.
  Uses the default colour backend for 32bpp BGR output for most of the unusual cases.
  The most common 2x2 subsampling case uses a custom merged upsampler and colour converter, with colour output directly in RISC OS format for the respective screen mode.
Admin:
  Submission for the JPEG bounty.

Version 1.71. Tagged as 'SprExtend-1_71'
@
text
@@


4.13
log
@Rewrite of find_image_dims
Detail:
  Now handles 0xFF padding, previously acceptable encoded images including padding were incorrectly rejected.
  Calculate the workspace for greyscale images correctly, the itype flags included the density (and latterly the SOF) flags, but the workspace calculation assumed it only contained 1 or 3 (for colour components).
  Exit cases now made common and propagate file errors correctly.
  Minor changes to the assembler that uses find_image_dims to handle 4 colour component return (now a 3 bit return value).
  Merge the other M_THING enum from IJG8d so we don't need our own copy.
  Fix signed pointer comparison.
  Use symbolic defines from Global & Interface headers where possible.
  The jdata pointer arg is now treated as const.
Admin:
  Submission for the JPEG bounty.

Version 1.70. Tagged as 'SprExtend-1_70'
@
text
@a47 1
        IMPORT  panic_trace
d170 3
a172 3
        GET     Sources.jdhuff
        GET     Sources.jidctfst
        GET     Sources.jdcolor
@


4.12
log
@Add support for blended sprite & JPEG rendering - alpha masks, alpha channels, and translucency
Detail:
  This big set of changes adds support for the following user-facing APIs, as per ROL's specs:
  - OS_SpriteOp 52 (PutSpriteScaled) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - OS_SpriteOp 56 (PutSpriteTransformed) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - JPEG_Plot[File]Scaled colourmapping & translucency blending
  - JPEG_Plot[File]Transformed colourmapping & translucency blending
  Sources/CFSI-JPEG, Sources/PutScaled:
  - Added exit_oserror exit routine for use by C code.
  - For SpriteExtend this allows the C code to cause OS_SpriteOp to exit with a given OS error block.
  - For CFSI-JPEG the error block is returned and ERROR_FATAL is returned to ChangeFSI.
  Sources/CSupport:
  - Add definitions for some error codes (matches existing definitions from h/commondefs)
  Sources/PutScaled:
  - Stripped out code to look for identity translation tables; now handled by preparettr routine in Sources/SprOp
  Sources/SWIs, Hdr/SprExtend:
  - JPEG SWIs updated to add support for alpha-blended and colour mapped JPEG rendering, following ROL's APIs
  Sources/SprExtend:
  - Stripped out lots of old build flags which haven't been touched in years.
  - Strip out assembler SprTrans code generator.
  - Add new definitions needed for blending & colour mapping.
  Sources/SprOp:
  - Updated PutScaled frontend to deal with blending and colour mapping.
  - Disabled code which was bodging coordinates when dealing with double-pixel modes - it seems to cause a few issues, and the code generator mostly had proper double-pixel support anyway.
  - Translation table verification and fiddling code rewritten and consolidated into the preparettr routine. C code is now explicitly told what table type is in use and whether it can safely be ignored in favour of using the sprite palette.
  - Removed code from CheckSpriteArea which was deliberately throwing an error upon seeing alpha-masked sprites; I think the bug that was hiding has been fixed now
  Sources/SprTrans
  - Removed the assembler version of the code generator.
  - Updated to add support for blending and colour mapping
  c/PutScaled:
  - Old test code removed.
  - Updated to add support for blending & colour mapping
  - Assorted bugs fixed.
  - A few extra architecture-specific optimisations added.
  - Some workspace setup code moved to c/asmcore to allow sharing with SprTrans.
  c/asmcore:
  - Register allocation code rewritten. Instead of allocating on a first-come, first-served basis, the code now builds a list of which logical registers are needed (and which 'banks' they fall into) and then attempts to allocate them in a more intelligent manner. It still has some failings (e.g. reusing R12 as a general purpose register is currently impossible) but it's a lot more flexible and reliable than the old code.
  - Core pixel transformation code updated to add support for blending & colour mapping
  - Added some extra architecture-specific optimisations
  c/rojpeg:
  - JPEG option handling updated to avoid trashing any colour mapping descriptor that may have been passed in
  c/sprtrans:
  - Updated to add support for blending & colour mapping
  c/tracing:
  - Debug assert messages now show filename as well as line number
  h/commondefs:
  - Removed old #define's that related to old assembler switches.
  h/putscaled:
  - Workspace definition updated to match assembler version.
  - SprTrans stack workspace structure moved here from c/sprtrans
Admin:
  Tested on BB-xM plotting all major sprite & JPEG types into all modes with all major options


Version 1.55. Tagged as 'SprExtend-1_55'
@
text
@d47 1
a47 1
        IMPORT  find_image_dims
d123 1
a123 1
;                   r3 -> word in which to put image type - 1=mono, 3=YUV
d133 1
a133 1
        BL      find_image_dims
d139 1
a139 1
        AND     r6,r6,#3              ; just the monochrome/colour bits
@


4.11
log
@Fixup CFSI-JPEG
Detail:
  Sources/CFSI-JPEG - Add an extra GET for mode flag definitions used by jdcolor
  c/rojpeg - Use standard 555 TBGR colour conversion function when producing 16bpp output for CFSI-JPEG
Admin:
  ChangeFSI JPEG output tested on RISC OS 3.7, 5.17, 5.21
  3.7 works fine, but 5.XX fails to convert JPEGs correctly for <256 colour output - to be investigated


Version 1.52. Retagged as 'SprExtend-1_52'
@
text
@d51 1
d148 2
@


4.10
log
@Adopt colour conversions from MigrateIJG8b branch
Now for every colour conversion there is a corresponding C function, allowing swapping between them for test purposes.
Here, 'ASMCOLOR' is selected and the C functions not even referenced in the makefile, see branch for use.
Permits use of USAT, for a small 1.5% speedup and smaller code.
Some other typedefs and comment shuffling copied over - should be harmless.

Version 1.50. Tagged as 'SprExtend-1_50'
@
text
@d42 1
@


4.9
log
@API enhancement and space saving refactoring.
Setting bit 1 of r0 in JPEG_FileInfo and JPEG_Info will now return the SOF type of the JPEG in question in bits 3-6 of the info flags in r0 on exit.
Took this opportunity to refactor find_image_dims to take a structure pointer rather than lots of individual pointers (CFSI-JPEG ammended to match). Untangled the return codes a bit so it is only necessary to inspect r0 on exit from C to determine the outcome. Values of 1 & 2 are translated in the assembler code into more specific error messages than just "Incomplete or corrupt JPEG".
Fix bug where unknown density marker would leave the file open in JPEG_FileInfo.
Don't bother ADRL'ing r1 for error messages that don't have a %0 in them.
Added all the input & output flag definitions to the exported header file so other callers can use them too.
More functionality, fewer bugs, about 200 bytes smaller too.

Version 1.35. Tagged as 'SprExtend-1_35'
@
text
@d16 1
d39 1
a42 1
        IMPORT  do_jpeg_scan_file
d44 1
d47 1
a47 1
        IMPORT  assembler_panic
d49 1
d54 1
a54 1
        B       cfsi_jpeg_scan_file
d60 1
a60 1
cfsi_jpeg_scan_file
d65 9
a74 21
; On exit the workspace has some interesting fields at the front:
; struct decompress_info_struct {
;         int error_code;         /* Returned err code, 0 if no error */
;         int error_argument1;    /* Supplementary error data */
;         int error_argument2;    /* Supplementary error data */
;         int a;                        /* don't touch this */
;         int b;                        /* don't touch this */
;         int /*long*/ image_width;     /* overall image width */
;         int /*long*/ image_height;    /* overall image height */
;         COLOR_SPACE jpeg_color_space; /* colorspace of JPEG file (1 for greyscale, 3 for YUV) */
;         ... never mind about the rest
; If all is well on exit then error_code will be 0.
; Otherwise it (and r0) is one of:
; #define E_PRE_NOT_8         1            /* Data precision not 8 */
; #define E_RESTART           2            /* Restart interval not 0 */
; #define E_MULTI_SCAN        3            /* Multi-scan file */
; #define E_TOO_HIGH          4            /* Image too high, max is %i pixels */
; #define E_BAD_SAMPLE        5            /* Bad sample factor */
; #define E_COLOUR            8            /* Bad colour space (%i), not grey or YUV */
; #define E_COMPONENTS        9            /* Bad number (%i) of components, only 1 or 3 allowed */
; #define E_TOO_WIDE          10           /* Image too wide, max is %i pixels */
d78 1
a78 1
        BL      do_jpeg_scan_file
d86 1
a86 1
; Simply call this instead of cfsi_jpeg_scan_file, and subsequent calls to
d106 1
a106 1
; On exit r0 will point to the required scan line, one word per pixel, as VIDC20 RGB pixels.
d147 1
d159 1
d166 5
a170 5
        GET     sources.CSupport
        GET     sources.jdhuff
        GET     sources.jrevdct
        GET     sources.jcconv
        GET     sources.diffuse
@


4.9.2.1
log
@Fix CFSIjpeg due to earlier rename of jidctfst
Rename remaining files to match IJG 8b.

Version 1.38, 1.35.2.5. Tagged as 'SprExtend-1_38-1_35_2_5'
@
text
@a15 1

d175 2
a176 2
        GET     sources.jidctfst
        GET     sources.jdcolor
@


4.9.2.2
log
@Create assembler equivalents of C colour conversions, approx 10% speed up.
Add new switch ASMCOLOR to select which to use, C or assembler.
Remove FILE_ exit trace concept, just use __FILE__ instead in exit_erl.
Add some comments to exit_erl and friends.
A few bits of cinfo setup moved into start_pass_huff_decoder() or eliminated.
Bumped up the precision of SCALE_BITS in the C colour handling so FIX() uses more bits of an int.
Deleted the unused remenants of light dithering in the 8bpp colour converter - saves a few cycles.
colour_convert_8 and colour_convert_16 no longer save entry registers the C compiler doesn't care about.
Update genyuvtabs to EXPORT the table bases.
Split out the compilation of IJG files as separate objects in the make file, rather than including them from within rojpeg, which is itself included from putscaled.

Version 1.38, 1.35.2.6. Tagged as 'SprExtend-1_38-1_35_2_6'
@
text
@d46 1
a46 1
        IMPORT  panic_trace
a47 1
        EXPORT  exit_erl
a156 1
exit_erl
@


4.9.2.3
log
@New jerror.h taken from IJG8b.
Swap to using JERR_ numbers, deleted E_ numbers.
Modify genjhdr to pass some defines to the assembler code, so jdcolor can clarify use of DCTSIZE and DCTSIZE2.
Added chart of possible subsampling ratios to documentation.

Version 1.38, 1.35.2.9. Tagged as 'SprExtend-1_38-1_35_2_9'
@
text
@a38 1
        GET     Hdr:CPU.Arch
d76 10
a85 1
; If all is well on exit then error_code will be 0, otherwise it (and r0) is a JERR code.
a176 1
        GET     jhdr.s
@


4.9.2.4
log
@Remap return results for CFSI-JPEG to match new cinfo structure.
Tested with a handful of JPEGs and !ChangeFSI.

Version 1.38, 1.35.2.11. Tagged as 'SprExtend-1_38-1_35_2_11'
@
text
@d54 1
a54 1
        B       cfsi_jpeg_scan_file_32
d60 1
a60 1
cfsi_jpeg_scan_file_32
a64 9
; On exit, the workspace has some interesting fields at the front
;    [space+0]  int error_code;                 /* Returned err code, 0 if no error */
;    [space+4]  int error_argument1;            /* Supplementary error data */
;    [space+8]  int error_argument2;            /* Supplementary error data */
;    [space+12] int a;                          /* Padding to retain compatibility with IJG 4 library */
;    [space+16] int b;                          /* Padding to retain compatibility with IJG 4 library */
;    [space+20] JDIMENSION image_width;         /* Overall image width */
;    [space+24] JDIMENSION image_height;        /* Overall image height */
;    [space+28] J_COLOR_SPACE jpeg_color_space; /* Colorspace of JPEG file (1 for greyscale, 3 for YUV) */
d66 12
a79 1
        MOV     r4,r0                 ; used to remember where 'space' is
a82 9
        LDR     r2,[r4,#cinfo_error_code]
        LDR     r3,[r4,#cinfo_error_argument1]
        LDR     r5,[r4,#cinfo_error_argument2]
                                      ; r6 & r7 padding
        LDR     r8,[r4,#cinfo_image_width]
        LDR     r9,[r4,#cinfo_image_height]
        LDR     r10,[r4,#cinfo_jpeg_color_space]
        STMIA   r4,{r2,r3,r5,r6-r10}  ; reorganise IJG 8b to IJG 4
                        
d109 1
a109 1
; On exit r0 will point to the required scan line, as 16bpp or 32bpp VIDC20 RGB pixels.
@


4.9.2.5
log
@Reorganise data input.
Fill in INPUT_VARS and INPUT_SYNC so it uses register variables.
Make use of data source manager (cinfo->src).
Calculate bytes_in_buffer when restoring the huffman position.
Swap process_restart() for the one now in jdmarker.

Version 1.38, 1.35.2.13. Tagged as 'SprExtend-1_38-1_35_2_13'
@
text
@d175 1
a175 1
        GET     Sources.CSupport
d177 4
a180 4
        GET     Sources.jdhuff
        GET     Sources.jidctfst
        GET     Sources.jdcolor
        GET     Sources.diffuse
@


4.9.2.6
log
@Abstract entropy decoding.
Currently still only support Huffman, but now agnostic, there are two functions 'decode_mcu()' which does the full DC+AC decode of a full MCU worth of data, and 'skip_mcu()' which just does DC and consumes but discards the AC coefficients.
Apply fix from 1.40 trunk version for monochrome output in a 8bpp greyscale mode.
Restore name of DCTFIX() macro to FIX(), no longer needed now the constituent parts are compiled seperately rather than #included.
Fix CFSIjpeg to assemble even though it doesn't have a module base (the recently added 'relocatefn()' was breaking it).

Version 1.38, 1.35.2.14. Tagged as 'SprExtend-1_38-1_35_2_14'
@
text
@d43 1
a44 1
        IMPORT  do_jpeg_scan_file_32
d79 1
a79 1
        BL      do_jpeg_scan_file_32
d96 1
a96 1
; Simply call this instead of cfsi_jpeg_scan_file_32, and subsequent calls to
a168 1
Module_BaseAddr
@


4.9.2.7
log
@Push recent changes on the trunk to the IJG8b branch.
Tested briefly, still works.

Version 1.38, 1.35.2.15. Tagged as 'SprExtend-1_38-1_35_2_15'
@
text
@a177 1
        GET     Sources.jdarith
@


4.9.2.8
log
@Sync with trunk
Sources/SprOp - revision 4.10 copied
Sources/SprTrans - revision 4.16 copied
Sources/jdhuff - revision 4.7 copied
Also:
 DCI changed to instruction mnemonic for objasm 4
 Makefile excess '-c' removed
 Util.mk double inclusion of rules removed

Version 1.38, 1.35.2.16. Tagged as 'SprExtend-1_38-1_35_2_16'
@
text
@d178 1
@


4.8
log
@Paper and fill some JPEG cracks.
The exit_c function was repeatedly being called with the line number argument and error code the wrong way round and since only bits 0-2 of the error code are inspected on exit any fatal exits from the ported JPEG library code would either report the wrong error or fail silently (depending on the line number) - example a 12 bits per sample JPEG would be rendered without fault into a screen full of random memory garbage.
Assembling/compiling with the 'jpeg' switch off didn't work, fixed, and also now zeros out the SWI decode values in the module header.
Moved include of 'yuvtabs.s' into the colour conversion code.
Deleted panic_exit, it did nothing useful but trace a value then exit, so it now just calls exit() like everyone else.
Removed excess call to find_image_dims(), this was needed just to get the workspace requirements when the JPEG had already been sized up by asm_find_image_dims() earlier. Side effect of removing the pilot JPEG code earlier is that this call can now only get to the JPEG code from a JPEG_ SWI. Changed to just pass the workspace requirements into 'c.PutScaled' and save a duplicate scan.
Fatal exits from the assembler huffman decoder now report a sensible error.
Trimmed out all the JPEG assessment code from 'c.PutScaled' and moved it into 'c.rojpeg' so the put scaled is only concerned with putting things scaled.
Sanitised the #includes a bit.
Fixed on last check of wp->save_mode looking at the wrong bits for the mode number.
Resolved all the warning in the genhdr/genyuvtabs/genpalette utilities by casting a bit harder.[A[B
Added new more descriptive error messages to the messages file (not currently used), and made the 'not supported by' ones consistent so the tokeniser might crunch the file a bit more.
In looks_like_jpeg() changed a bitwise to logical or.
Fixed longstanding problem of not being able to render JPEGs at a scale of less than 1/6 in any greyscale mode, because, err, there was no code to do it - only the colour case was checked for. Implemented for 8bpp grey and 32bpp grey (which gets dithered for other lower modes) by just converting the luma channel into an equally weighted RGB value or replicating it for 256 greys.
Tested in all 8 colour depths on a Risc PC using sampling ratios of 1x1; 2x1; 1x2; 2x2 of the IJG test image scaled in !Draw by 0.16.

Version 1.32. Tagged as 'SprExtend-1_32'
@
text
@d15 1
a15 1
; Sources.CFSI-JPEG
d18 1
a18 1

d28 6
d55 1
a55 8
        DCD     3                        ; version number.

; We cope with the whole 26/32-bit thing thus:

; All our C code is APCS-32. The routines like newline() and assert() called
; from our C thus are 32-bit. We don't know about the person using the generated
; CFSI-JPEG file, so we do a run-time check for whether to do a ^ or not on
; return, depending on current mode, in the outer wrapper.
d62 22
d86 1
d88 3
a90 2
        TEQ     pc, pc
        TEQ     pc, pc
a92 23
; All registers preserved except r0. r0=error code, 0 for OK or other for some error.
; On exit the workspace has some interesting fields at the front:
;struct decompress_info_struct {
;        int error_code;         /* Returned err code, 0 if no error */
;        int error_argument1;    /* Supplementary error data */
;        int error_argument2;    /* Supplementary error data */
;        int a;                        /* don't touch this */
;        int b;                        /* don't touch this */
;        int /*long*/ image_width;     /* overall image width */
;        int /*long*/ image_height;    /* overall image height */
;        COLOR_SPACE jpeg_color_space; /* colorspace of JPEG file */
; ... never mind about the rest
; If all is well on exit then error_code will be 0.
; Otherwise it (and r0) is one of:
;#define E_PRE_NOT_8         1            /* Data precision not 8 */
;#define E_RESTART           2            /* Restart interval not 0 */
;#define E_MULTI_SCAN        3            /* Multi-scan file */
;#define E_TOO_HIGH          4            /* Image too high, max is %i pixels */
;#define E_BAD_SAMPLE        5            /* Bad sample factor */
;#define E_COLOUR            8            /* Bad colour space (%i), not grey or YUV */
;#define E_COMPONENTS        9            /* Bad number (%i) of components, only 1 or 3 allowed */
;#define E_TOO_WIDE          10           /* Image too wide, max is %i pixels */
; The colour space will be 1 for greyscale, 3 for YUV.
d95 3
d104 1
d106 3
a108 2
        TEQ     pc, pc
        TEQ     pc, pc
a110 3
; Simply call this instead of cfsi_jpeg_scan_file, and subsequent calls to
; cfsi_jpeg_find_line will generate pointers to lines of 16bpp pixels, instead
; of 32bpp ones.
d115 1
d118 1
d120 3
a122 2
        TEQ     pc, pc
        TEQ     pc, pc
a124 1
; On exit r0 will point to the required scan line, one word per pixel, as VIDC20 RGB pixels.
d132 1
a132 1
; On exit, r0=0 if everything is OK, r0=1 if this data does not look
d136 4
a139 1
        STMDB   sp!,{r4}              ; fifth arg to C, placed on stack
a140 5
        ADD     sp,sp,#4
        TEQ     pc, pc
        TEQ     pc, pc
        LDMNEIA sp!,{r1-r12,pc}^      ; 26-bit: safe
        LDMIA   sp!,{r1-r12,pc}
d142 15
a159 2
exit
dividebyzero
a164 1
; Hope the asserts are OK!
d167 1
a169 5
; ----------------------------------------------------------------------------------------------

        GET     sources.CSupport

; Now the actual included stuff
d173 1
@


4.7
log
@Remove postprocessing step of C code.
Since 2001 this module has been using objasm, but still using the C compiler to output (via -S) assembly code which is then passed through 'sed' and included via GET into the assembler code.
Changed to compile the C code into object files, and use the linker to patch up the unresolved references - this has required some reordering of the C code to make sure static functions now appear in the object file, and some reordering of the header files to ensure both the module and the CFSI version still compile without conflicts.
Minor fix to 'swiv2', the label was in the wrong place for _swi() though it's not used in this module so didn't affect the _swix() case.
Makefile cut down a bit. Unixify some path names.
Test code moved to 'Test/c' directory.
Tested in both debug and non debug cases via softloaded module. Oddly, it's 4 bytes longer than the previous version.

Version 1.28. Tagged as 'SprExtend-1_28'
@
text
@a39 1
        IMPORT  panic_exit
@


4.6
log
@Clean up pass.
Trim 200+ lines of changes dating back to 1987, combine with non duplicates in the 'BlackLog'.
Use 'offsetof' macro in genjhdr to avoid warnings about uninitialised variables, rename from makejhdr so all the utils are clearly demarked.
Add throwback to MkCFSI-j.
Replace reason codes passed to SWIs with textual equivalents from the respective header files.
Speed up SWI despatch a bit by making the first few debug instructions depend on 'debuggs'.
Qualify all of the debug switches with the global 'debug' one.
Eliminate single use of 'pullx' macro.
Make do_branch() take an unsigned opcode so 50% of the branches don't result in implied cast warnings.
Added an UNUSED() macro to reduce a few of the legitimate warnings (the remainder are either in the original JPEG code or ones that it is worth checking the logic of.
Unixify one last filename.

Version 1.24. Tagged as 'SprExtend-1_24'
@
text
@d29 15
a51 7
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ColourTran
        GET     Hdr:Sprite
        GET     sources.csupport

d156 5
a160 1
; now the actual included stuff
a167 1
        GET     rojpeg.s
@


4.5
log
@  GET file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both objasm and asasm.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 1.20. Not tagged
@
text
@d41 1
@


4.4
log
@Performance improvement and code tidy-up.

Removed local definition of XOS_CLI and XColourTrans_SelectTable, replaced
with header file.

Delete swiv2_old (moved to _old directory)

Changed to use {TRUE} and {FALSE} built in objasm variables.

Label dividebyzero fall through had code in the way for debug = {TRUE}.

Trimmed some dead code and definitions.

Stopped thrashing OS_CLI every time a JPEG plot is required to check
ColourTrans version, this is now done once at startup and a flag kept
instead.

Author: Rob Sprowson

Version 1.19. Tagged as 'SprExtend-1_19'
@
text
@d155 1
a155 1
        GET     s.rojpeg
@


4.3
log
@  Now uses objasm throughout instead of aasm.
Detail:
  The build structure for this module is not nice - I've sanitised it a
    bit, but it's still not nice.
Admin:
   Built and tested with the test program briefly - the test sprite seems
     to scale and rotate properly.  ChangeFSI not tested.


Version 1.08. Tagged as 'SprExtend-1_08'
@
text
@d37 4
a153 1
XOS_CLI                  * &5     + (1:SHL:17)
@


4.2
log
@32-bit compatible. Tagged as SprExtend-1_06
@
text
@d29 2
a36 37
R0 RN 0
R1 RN 1
R2 RN 2
R3 RN 3
R4 RN 4
R5 RN 5
R6 RN 6
R7 RN 7
R8 RN 8
R9 RN 9
R10 RN 10
R11 RN 11
R12 RN 12
SP RN 13
LR RN 14
PC RN 15

r0 RN 0
r1 RN 1
r2 RN 2
r3 RN 3
r4 RN 4
r5 RN 5
r6 RN 6
r7 RN 7
r8 RN 8
r9 RN 9
r10 RN 10
r11 RN 11
r12 RN 12
r14 RN 14
sl RN 10
fp RN 11
ip RN 12
sp RN 13
lr RN 14
pc RN 15
a37 1
        GET     sources.psrstuff
d54 3
a56 4
        MOV     r1,#0
        mrs    ,r1,CPSR
        TST     r1,#2_11100
        LDMEQIA sp!,{r1-r12,pc}^
d90 3
a92 4
        MOV     r1,#0
        mrs    ,r1,CPSR
        TST     r1,#2_11100
        LDMEQIA sp!,{r1-r12,pc}^
d104 3
a106 4
        MOV     r1,#0
        mrs    ,r1,CPSR
        TST     r1,#2_11100
        LDMEQIA sp!,{r1-r12,pc}^
d123 3
a125 4
        MOV     r1,#0
        mrs    ,r1,CPSR
        TST     r1,#2_11100
        LDMEQIA sp!,{r1-r12,pc}^
d133 3
a135 5
        MOV     sp,sl
        MOV     r1,#0
        mrs    ,r1,CPSR
        TST     r1,#2_11100
        LDMEQIA sp!,{r1-r12,pc}^
@


4.1
log
@Initial revision
@
text
@d73 8
d90 5
a94 1
        LDMIA   sp!,{r1-r12,pc}^
d127 5
a131 1
        LDMIA   sp!,{r1-r12,pc}^
d142 5
a146 1
        LDMIA   sp!,{r1-r12,pc}^
d162 5
a166 1
        LDMIA   sp!,{r1-r12,pc}^
d174 4
d183 1
a183 1
        MOVS    pc,lr
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
