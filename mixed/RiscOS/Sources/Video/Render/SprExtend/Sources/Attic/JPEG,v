head	4.2;
access;
symbols
	SprExtend-1_22:4.1
	SprExtend-1_21:4.1
	SprExtend-1_20:4.1
	SprExtend-1_19:4.1
	SprExtend-1_18:4.1
	SprExtend-1_17:4.1
	RO_5_07:4.1
	SprExtend-1_16:4.1
	SprExtend-1_15:4.1
	SprExtend-1_14:4.1
	SprExtend-1_13:4.1
	SprExtend-1_12:4.1
	SprExtend-1_11:4.1
	SprExtend-1_10:4.1
	SprExtend-1_09:4.1
	SprExtend-1_08:4.1
	dellis_autobuild_BaseSW:4.1
	SprExtend-1_07:4.1
	SprExtend-1_06:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	SprExtend-1_05:4.1
	Ursula_merge:4.1
	nturton_SprExtend-1_04:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SprExtend-0_99:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2010.08.29.08.36.04;	author rsprowson;	state dead;
branches;
next	4.1;

4.1
date	96.11.05.09.45.14;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.45.14;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.42.21;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.58.19;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.20.52;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@A few small fixes.
Sources/PutScaled:
 Sync comment with C code.
Sources/SprExtend:
 Debug switch 'debuggs' had been left on, which left in some unnecessary code, but turning it off pulled in code with a stack imbalance. Now off.
 Ensured a terminator at the end of the RMEnsure.
 Colour translation tables passed to SetPointerShape that were in top bit set addresses were being interpreted as though no tt was supplied. Now tested against zero to match docs.
Sources/SprTrans:
 Switches pre 0.60 collapsed.
Sources/diffuse:
 The C code was corrupting r12 workspace pointer so the check of the flag 'ctrans_recent' sometimes failed leading to a duff table lookup.
 Small optimisation to checking of guard word.
c/PutScaled:
 Change paths to be Unix friendly.
rojpeg:
 Put assembler_panic in the header file to shut the compiler up.
3x unused files deleted.

Version 1.23. Tagged as 'SprExtend-1_23'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Sources.JPEG
;   14th September 1993 WRS - started
;    1st November  1993 WRS - modified to simplify memory allocation interface
; Some parts of JPEG decoding are done in C, code in Sources.PutScaled
; provides assistance for debugging output.

      [ jpeg

; ----------------------------------------------------------------------
; R1->sprite
; Preserve all registers
; Need to set up, for entry into the C code:
; static int jpeg_scan_file(
;   decompress_info_ptr cinfo,      in r0
;   char *file_image,                  r1
;   int image_length,                  r2
;   int xmin,                          r3
;   int xmax,                          [sp,#0]
;   int width,                         [sp,#4]
;   int height,                        [sp,#6]
;   BOOL dc_only);                     [sp,#8]
;   lr = wp value from the assembler
;   On exit the stack arguments will have been removed for us.
;jpeg_scan
;        Push    "R0-R12,LR"
;        ; get ready to call C code
;        MOV     SL,R12                           ; will be left alone by compiled C - for debug routines above.
;        ADRL    R3,ccompiler_sp
;        ADD     R2,SP,#4*14                      ; calling SP value
;        STR     R2,[R3]                          ; in case of unexpected exit
;        ; R1 = sprite

;        ; set up the fetchroutine, for use by any subsequent compiled code.
;        ADR     R2,jpeg_fetchroutine
;        STR     R2,fetchroutine

;        ; set up the band buffer pointer and size in the jpeg workspace:
;        ; see h.jpegdata for details of the workspace layout,
;        MOV     R4,R1                            ; keep sprite pointer - R0-R3 trashed by calling C code
;        BL      jpeg_workspace_size              ; call C: R0 = size needed in bytes
;        MOV     R12,SL                           ; R12 is ip to a C prog, will have been trampled on - restore it.
;        ADRL    R1,jpeg_space                    ; base of workspace - a decompress_info_struct
;        ADD     R0,R0,R1                         ; R0 = spare space - the band buffer
;        ADRL    R2,jpeg_band_buffer
;        STR     R0,[R2]                          ; store band buffer pointer
;        ADRL    R2,jpeg_end
;        SUB     R0,R2,R0                         ; band buffer size in bytes
;        MOV     R0,R0,LSR #2                     ; size in words
;        BIC     R0,R0,#15                        ; round down to multiple of 16
;        ADRL    R2,jpeg_band_buffer_size
;        STR     R0,[R2]                          ; store band buffer size
;        MOV     R1,R4                            ; keep hold of sprite pointer

;        STR      R1,save_sprite
;        Pull    "R0-R12,PC"

; ----------------------------------------------------------------------
jpeg_fetchroutine
; This is called every line by compiled code from PutSpriteScaled, when the
; source is JPEG compressed data.
; Entry:
;   r0 = y coordinate
;   r12 = wp
; Exit:
;   r0 = initial address to get RGB data from for this line, based on wp->in_x and given y coord.
;   all other registers preserved.
; This works by calling the C proc jpeg_find_line, defined in h.rojpeg, as:
;   static int *jpeg_find_line(decompress_info_ptr cinfo, int ycoord);

        Push    "R1-R3,R10-R12,LR"               ; r4-r9 are preserved by C code.

        MOV     R1,R0                            ; arg2 - int y coord
        ADRL    R0,jpeg_space                    ; arg1 - decompress_info_ptr cinfo

        ; get ready to call C code
        MOV     SL,R12                           ; will be left alone by compiled C - for debug routines above.

        ; and call
        BL      jpeg_find_line                   ; base of that line in R0 on return
        MOV     R12,SL                           ; R12 is ip to a C prog, will have been trampled on - restore it.

        ; returned value is int* for base of line.
        ; now add in the initial source X coordinate.
        LDR     R1,in_x                          ; x offset, as word count
        ;Debug   cc,"x offset to add",R1
        ADD     R0,R0,R1,LSL #2                  ; add word offset

        Pull    "R1-R3,R10-R12,PC"               ; restore registers and return to compiled code.

      ]

        END
@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
