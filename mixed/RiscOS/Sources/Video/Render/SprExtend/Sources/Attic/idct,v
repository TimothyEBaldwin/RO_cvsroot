head	4.2;
access;
symbols
	SprExtend-1_49:4.1
	SprExtend-1_48:4.1
	SprExtend-1_47:4.1
	SprExtend-1_46:4.1
	SprExtend-1_45:4.1
	SprExtend-1_44:4.1
	SprExtend-1_43:4.1
	SprExtend-1_42:4.1
	SprExtend-1_41:4.1
	SprExtend-1_40:4.1
	SprExtend-1_39:4.1
	MigrateIJG8b:4.1.0.2
	SprExtend-1_38:4.1
	SprExtend-1_37:4.1
	SprExtend-1_36:4.1
	SprExtend-1_35:4.1
	SprExtend-1_34:4.1
	SprExtend-1_33:4.1
	SprExtend-1_32:4.1
	SprExtend-1_31:4.1
	SprExtend-1_30:4.1
	SprExtend-1_29:4.1
	SprExtend-1_28:4.1
	SprExtend-1_27:4.1
	SprExtend-1_26:4.1
	SprExtend-1_25:4.1
	SprExtend-1_24:4.1
	SprExtend-1_23:4.1
	SprExtend-1_22:4.1
	SprExtend-1_21:4.1
	SprExtend-1_20:4.1
	SprExtend-1_19:4.1
	SprExtend-1_18:4.1
	SprExtend-1_17:4.1
	RO_5_07:4.1
	SprExtend-1_16:4.1
	SprExtend-1_15:4.1
	SprExtend-1_14:4.1
	SprExtend-1_13:4.1
	SprExtend-1_12:4.1
	SprExtend-1_11:4.1
	SprExtend-1_10:4.1
	SprExtend-1_09:4.1
	SprExtend-1_08:4.1
	dellis_autobuild_BaseSW:4.1
	SprExtend-1_07:4.1
	SprExtend-1_06:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	SprExtend-1_05:4.1
	Ursula_merge:4.1
	nturton_SprExtend-1_04:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SprExtend-0_99:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2012.07.28.15.23.38;	author rsprowson;	state dead;
branches;
next	4.1;
commitid	b5jdybqzJ3Wdjlew;

4.1
date	96.11.05.09.45.12;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.2.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.45.12;	author nturton;	state Exp;
branches;
next	;

4.1.2.1
date	2011.01.04.21.18.03;	author rsprowson;	state dead;
branches;
next	;

4.1.3.1
date	96.11.06.02.42.06;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.58.12;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.20.46;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Adopt colour conversions from MigrateIJG8b branch
Now for every colour conversion there is a corresponding C function, allowing swapping between them for test purposes.
Here, 'ASMCOLOR' is selected and the C functions not even referenced in the makefile, see branch for use.
Permits use of USAT, for a small 1.5% speedup and smaller code.
Some other typedefs and comment shuffling copied over - should be harmless.

Version 1.50. Tagged as 'SprExtend-1_50'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; sources.idct - Ian Rickard's amazing new 5-multiply DCT.
; Thanks to Ian Rickards of ARM Ltd.
; Thanks also to Arai, Agui, Nakajima who actually invented the algorithm.

; Quick hack for now, to experiment with the new DCT core.

; ------------------------------------------------------------------------------
; on entry:
;   takes coeff array in r0-r7
;   contains coeffs 0, 4, 2, 6, 5, 1, 7, 3 in r0-r7 respectively
;   uses r8-r9 as scratch
; total 43 data processing instructions

        MACRO
        DCTransform
; permute the inputs
         MOV     r8,r3
         MOV     r3,r6
         MOV     r6,r7
         MOV     r7,r8
         MOV     r8,r4
         MOV     r4,r5
         MOV     r5,r1
         MOV     r1,r8

; Now shift the numbers up by 8 so that the inputs are unscaled, but
; the output is shifted up by 8 - exactly like the existing code.
;        MOV     r0,r0,LSL #8
;        MOV     r1,r1,LSL #8
;        MOV     r2,r2,LSL #8
;        MOV     r3,r3,LSL #8
;        MOV     r4,r4,LSL #8
;        MOV     r5,r5,LSL #8
;        MOV     r6,r6,LSL #8
;        MOV     r7,r7,LSL #8

; Now start the DCT proper.

; starts
        ADD     r5,r5,r6
        SUB     r6,r5,r6,ASL #1
        SUB     r4,r4,r7
        ADD     r7,r4,r7,ASL #1
        SUB     r5,r5,r7
        ADD     r7,r5,r7,ASL #1
        ADD     r2,r2,r3
        SUB     r3,r2,r3,ASL #1
        ADD     r8,r4,r6

; mul r8 by 0.383 (or 392.2/1024)
        SUB     r8,r8,r8,ASR #3  ;  =  448/512
        SUB     r8,r8,r8,ASR #3  ;  =  392/512
; leave pending ASR #1 until instruction marked FIX_a5

; mul r2 by 0.707 (or 724.0/1024)
        SUB     r9,r2,r2,ASR #4  ;  =  960/1024
        ADD     r9,r9,r9,ASR #2  ;  = 1200/1024
        SUB     r2,r2,r9,ASR #2  ;  =  724/1024

        ADD     r0,r0,r1
        SUB     r1,r0,r1,ASL #1
        ADD     r3,r2,r3

; mul r4 by 0.541 (or 554.0/1024)
        ADD     r9,r4,r4,ASR #1  ;  =  768/512
        SUB     r9,r9,r9,ASR #3  ;  =  672/512
        ADD     r4,r4,r9,ASR #4  ;  =  554/512
; leave ASR #1 until instruction marked FIX_a2

; mul r5 by 0.707 (or 724.0/1024)
        SUB     r9,r5,r5,ASR #4  ;  =  960/1024
        ADD     r9,r9,r9,ASR #2  ;  = 1200/1024
        SUB     r5,r5,r9,ASR #2  ;  =  724/1024

; mul r6 by 1.307 (or 1338.4/1024)
        ADD     r9,r6,r6,ASR #1  ;  = 1536/1024
        SUB     r6,r9,r9,ASR #3  ;  = 1344/1024
        SUB     r6,r6,r9,ASR #8  ;  = 1338/1024

        ADD     r0,r0,r3
        SUB     r3,r0,r3,ASL #1
        ADD     r1,r1,r2
        SUB     r2,r1,r2,ASL #1
        ADD     r4,r4,r8         ;  FIX_a2 & FIX_a5 => FIX_r4 below
        SUB     r6,r6,r8,ASR #1  ;  FIX_a5
        ADD     r7,r6,r7
        ADD     r6,r5,r6
        ADD     r5,r5,r4,ASR #1  ;  FIX_r4
        ADD     r0,r0,r7
        SUB     r7,r0,r7,ASL #1
        ADD     r1,r1,r6
        SUB     r6,r1,r6,ASL #1
        ADD     r2,r2,r5
        SUB     r5,r2,r5,ASL #1
        ADD     r3,r3,r4,ASR #1  ;  FIX_r4
        SUB     r4,r3,r4         ;  FIX_r4
; ends

;        MOV     r0,r0,ASR #4
;        MOV     r1,r1,ASR #4
;        MOV     r2,r2,ASR #4
;        MOV     r3,r3,ASR #4
;        MOV     r4,r4,ASR #4
;        MOV     r5,r5,ASR #4
;        MOV     r6,r6,ASR #4
;        MOV     r7,r7,ASR #4

        MEND
; -------------------------------------------------------------------------------------------------


; r0=cinfo (unused)
; r1=data ptr
; r2=count
asm_j_rev_dct                             ; extern void asm_j_rev_dct(decompress_info_ptr cinfo, DCTBLOCK data, int count);

        CMP     r2,#0                     ; if count=0, do nothing
        MOVLE   pc,lr

        STMDB   sp!,{r1,r2,r4-r12,lr}     ; save state - count is at [sp,#4], r3 need not be preserved

dct_loop                                  ; for each block

        MOV     r11,#8                     ; loop counter for rows
        MOV     r12,r1                     ; data pointer

; First do the rows
dctrow_loop
        LDMIA   r12,{r0-r7}                ; get this row

        ORRS    r8,r0,r1
        ORREQS  r8,r2,r3
        ORREQS  r8,r4,r5
        ORREQS  r8,r6,r7
        BEQ     dctrow_skip
        DCTransform

        STMIA   r12,{r0-r7}                ; put this row
dctrow_skip
        ADD     r12,r12,#8*4                ; increment output pointer
        SUBS    r11,r11,#1
        BNE     dctrow_loop

; now to do the columns, very similar but the loads/stores are spaced
; out more.
;        LDR     r12,[sp]                   ; reload data pointer
        SUB     r12,r12,#8*8*4              ; reset data pointer
        SUB     r11,r12,#8*8*4              ; set up output pointer
dctcol_loop
        ; load the data values, spaced 8 words apart.
        LDR     r0,[r12,#8*4*0]
        LDR     r1,[r12,#8*4*1]
        LDR     r2,[r12,#8*4*2]
        LDR     r3,[r12,#8*4*3]
        LDR     r4,[r12,#8*4*4]
        LDR     r5,[r12,#8*4*5]
        LDR     r6,[r12,#8*4*6]
        LDR     r7,[r12,#8*4*7]

        DCTransform

        STMIA   r11,{r0-r7}                ; store in row order, in the block below the original input
dctcol_inc
        ADD     r11,r11,#8*4                ; advance output pointer
        ADD     r12,r12,#4                  ; advance input pointer
        SUB     r10,r12,r11                 ; terminate based on the difference between them
        CMP     r10,#8*4                  ; until then the difference will be bigger
        BGT     dctcol_loop               ; loop

        LDMIA   sp!,{r1,r2}               ; get block pointer, count back
        SUBS    r2,r2,#1                  ; decrement count
        LDMLEIA sp!,{r4-r12,pc}^          ; exit
        ; 'count' says that we do another block
        ADD     r1,r1,#64*4               ; advance pointer to next block
        STMDB   sp!,{r1,r2}               ; push pointer and count back on stack
        B       dct_loop                  ; and do another block


        END
@


4.1
log
@Initial revision
@
text
@@


4.1.2.1
log
@Push some redundant files into the attic.
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
