head	4.1;
access;
symbols
	SprExtend-1_83:4.1
	SprExtend-1_82:4.1
	SprExtend-1_81:4.1
	SprExtend-1_80:4.1
	SprExtend-1_79:4.1
	SprExtend-1_78:4.1
	SprExtend-1_77:4.1
	SprExtend-1_76:4.1
	SprExtend-1_75:4.1
	SprExtend-1_74:4.1
	SprExtend-1_73:4.1
	SprExtend-1_72:4.1
	SprExtend-1_71-nocfsi:4.1
	SprExtend-1_71:4.1
	SprExtend-1_70-tracef:4.1
	SprExtend-1_70-headers:4.1
	SprExtend-1_70:4.1
	SprExtend-1_69:4.1
	SprExtend-1_68:4.1
	SprExtend-1_67:4.1
	SprExtend-1_66:4.1
	SprExtend-1_65:4.1
	SprExtend-1_64:4.1
	SprExtend-1_63:4.1
	SprExtend-1_62:4.1
	SprExtend-1_61:4.1
	SprExtend-1_60:4.1
	SprExtend-1_59:4.1
	SprExtend-1_58:4.1
	SprExtend-1_57:4.1
	SprExtend-1_56:4.1
	SprExtend-1_55:4.1
	SprExtend-1_54:4.1
	SprExtend-1_53:4.1
	SprExtend-1_52:4.1
	SprExtend-1_51:4.1
	SprExtend-1_50:4.1
	SprExtend-1_38-1_35_2_16:4.1
	SprExtend-1_49:4.1
	SprExtend-1_48:4.1
	SprExtend-1_47:4.1
	SprExtend-1_38-1_35_2_15:4.1
	SprExtend-1_46:4.1
	SprExtend-1_45:4.1
	SprExtend-1_44:4.1
	SprExtend-1_43:4.1
	SprExtend-1_42:4.1
	SprExtend-1_41:4.1
	SprExtend-1_38-1_35_2_14:4.1
	SprExtend-1_40:4.1
	SprExtend-1_38-1_35_2_13:4.1
	SprExtend-1_38-1_35_2_12:4.1
	SprExtend-1_38-1_35_2_11:4.1
	SprExtend-1_38-1_35_2_10:4.1
	SprExtend-1_38-1_35_2_9:4.1
	SprExtend-1_38-1_35_2_8:4.1
	SprExtend-1_39:4.1
	SprExtend-1_38-1_35_2_7:4.1
	SprExtend-1_38-1_35_2_6:4.1
	SprExtend-1_38-1_35_2_5:4.1
	SprExtend-1_38-1_35_2_4:4.1
	SprExtend-1_38-1_35_2_3:4.1
	SprExtend-1_38-1_35_2_2:4.1
	SprExtend-1_38-1_35_2_1:4.1
	MigrateIJG8b:4.1.0.2
	SprExtend-1_38:4.1
	SprExtend-1_37:4.1
	SprExtend-1_36:4.1
	SprExtend-1_35:4.1
	SprExtend-1_34:4.1
	SprExtend-1_33:4.1
	SprExtend-1_32:4.1
	SprExtend-1_31:4.1
	SprExtend-1_30:4.1
	SprExtend-1_29:4.1
	SprExtend-1_28:4.1
	SprExtend-1_27:4.1
	SprExtend-1_26:4.1
	SprExtend-1_25:4.1
	SprExtend-1_24:4.1
	SprExtend-1_23:4.1
	SprExtend-1_22:4.1
	SprExtend-1_21:4.1
	SprExtend-1_20:4.1
	SprExtend-1_19:4.1
	SprExtend-1_18:4.1
	SprExtend-1_17:4.1
	RO_5_07:4.1
	SprExtend-1_16:4.1
	SprExtend-1_15:4.1
	SprExtend-1_14:4.1
	SprExtend-1_13:4.1
	SprExtend-1_12:4.1
	SprExtend-1_11:4.1
	SprExtend-1_10:4.1
	SprExtend-1_09:4.1
	SprExtend-1_08:4.1
	dellis_autobuild_BaseSW:4.1
	SprExtend-1_07:4.1
	SprExtend-1_06:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	SprExtend-1_05:4.1
	Ursula_merge:4.1
	nturton_SprExtend-1_04:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_SprExtend-0_99:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.45.07;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.45.07;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.41.27;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.57.47;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.20.26;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@

Accuracy of PutSpriteTransformed:

Consider a destination screen area of 5000 by 5000 pixels. This has to be stored internally
as 1/256ths of pixels, i.e. the width is 5000*256=&138800. Next stage is to evaluate the
determinant (area) of the destination:                             
                                                     
Consider a destination rectangle of 0,0 to 5000,5000 pixels.

  Input destination coords use an 8 bit mantissa.
  Destination size of 5000 by 5000 pixels gives:
  Determinant of matrix (=area) = 5000*256 * 5000*256 = &17D78400000 (16 bit mantissa)
                (Store as 18.14, which loses 2 bits off the bottom. It could also lose 10 more...)
  Inverting gives &ABCC706 / (1<<52).
                (Store as 16.48, which loses 22 bits off the bottom)
  Multiplying by xchange or ychange (5000*256) gives &D1B70F2/(1<<32)
                (Store as 32.32, which loses 24 bits off the bottom)
  Multiplying by sprite size gives: size * &D1B70F2 / (1<<24) = increment
                (Store as 16.16, which is pretty accurate, as specified below)

   Xsize      Ysize     Sprite x size   Sprite Y size    Inc Xx     Inc Yy
    5         5000          4                  4          4/5        4/5000
   50         5000          4                  4          4/50       4/5000
   500        5000          4                  4          4/500      4/5000
   5000       5000          4                  4          4/5000     4/5000

Obviously sprite_x_size/Xsize goes between 4000/5=800 to 4/5000=0.0008
These values are stored to 16 bit mantissa accuracy. The table below gives
percentage errors for a range of values:
   Scale factor        Increment             Percentage error (optimal)
     0.00001            100000               0.00000005 %
      0.0001            10000                0.00000014 %
      0.001             1000                 0.00000154 %
       0.01             100                  0.00001527 %
       0.1              10                   0.0001526  %
        1               1                    0.00152588 %
       10               0.1                  0.01525879 %
      100               0.01                 0.15258789 %
      1000              0.001                1.52587891 %
     10000              0.0001               15.2587891 %
     100000             0.00001              152.587891 %
    1000000             0.000001             1525.87891 %
  [Calculated with the formula ((value*65536+1)/(value*65536)-1)*100]

These errors will be produce bad results if the number of pixels to plot (X or Y), multiplied
by the percentage error, gives a value of a pixel on the source sprite (for large sprites)
e.g. Error at edge of sprite (sprite pixels) = error in increment * number of display pixels
              
As it happens, the source size seems to drop out of the equation here. The error turns out
at <destination size>/65536 pixels in the source by the time it reaches the end

Read the following table for more information on the maximum errors attainable:    

   Destination size                     Worst possible error in source pixels
         5                                              0.0000763
         10                                             0.0001526
         50                                             0.0007629
        100                                             0.0015259
        500                                             0.0076294
       1000                                             0.0152588
       5000                                             0.0762939
      10000                                             0.1525879

[ The largest output possible is 32767 pixels ]
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
