head	1.4;
access;
symbols
	SprExtend-1_83:1.4
	SprExtend-1_82:1.4
	SprExtend-1_81:1.4
	SprExtend-1_80:1.4
	SprExtend-1_79:1.4
	SprExtend-1_78:1.4
	SprExtend-1_77:1.4
	SprExtend-1_76:1.4
	SprExtend-1_75:1.4
	SprExtend-1_74:1.4
	SprExtend-1_73:1.4
	SprExtend-1_72:1.4
	SprExtend-1_71-nocfsi:1.4
	SprExtend-1_71:1.4
	SprExtend-1_70-tracef:1.3
	SprExtend-1_70-headers:1.3
	SprExtend-1_70:1.3
	SprExtend-1_69:1.2
	SprExtend-1_38-1_35_2_16:1.1.2.1
	SprExtend-1_38-1_35_2_15:1.1.2.1
	SprExtend-1_38-1_35_2_14:1.1.2.1
	SprExtend-1_38-1_35_2_13:1.1.2.1
	SprExtend-1_38-1_35_2_12:1.1.2.1
	SprExtend-1_38-1_35_2_11:1.1.2.1
	SprExtend-1_38-1_35_2_10:1.1.2.1
	SprExtend-1_38-1_35_2_9:1.1.2.1
	SprExtend-1_38-1_35_2_8:1.1.2.1
	MigrateIJG8b:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2016.05.21.13.44.29;	author rool;	state Exp;
branches;
next	1.3;
commitid	ZDqmsyNiMhv6Zl7z;

1.3
date	2016.03.12.10.25.04;	author rool;	state Exp;
branches;
next	1.2;
commitid	cdOKhcORM5Eb8lYy;

1.2
date	2015.10.09.19.02.40;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	L3YZadxhOtdtYsEy;

1.1
date	2011.01.13.21.12.12;	author rsprowson;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.01.13.21.12.12;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Import of IJG8d library sources
Detail:
  Using the decoder in "example.c" as a starting point, we try to follow that sequence more closely even if in our embedded implementation some of the functions don't do much.
  Uses the default colour backend for 32bpp BGR output for most of the unusual cases.
  The most common 2x2 subsampling case uses a custom merged upsampler and colour converter, with colour output directly in RISC OS format for the respective screen mode.
Admin:
  Submission for the JPEG bounty.

Version 1.71. Tagged as 'SprExtend-1_71'
@
text
@2x2 order
=========
The array accesses for un-JPEGing some pixels is a bit mind bending, so the accompanying diagram, which shows the most common 2x2 case might help.

Say a !Draw window containing a JPEG needs repainting, so some rectangles need un-JPEGing. Here's roughly what happens:

1. Call to JPEG_PlotTransformed
-------------------------------
Or JPEG_PlotScaled, which other than the front end checking being a bit simpler is handled much the same. The JPEG data is validated via jpeg_find_image_dims() and the call then switches to the same rails that the train for OS_SpriteOp 56 is on.

The putscaled_compiler notes that a JPEG is being plotted and performs various library initialisation by calling
  jpeg_decompressor_opts()
  jpeg_scan_file()
to set everything up.

At the point where a raster is needed by the blitter instead of fetching pixels from the sprite area, a call to jpeg_find_line() is made. This has a preallocated 'band buffer' of height 8 or 16 lines by however wide the JPEG is.

If the y coordinate is in the band buffer already a memory copy is made and the blitter code carries on as though it was reading from a sprite.
If the y coordinate is not in the band buffer (ie. passed into a different multiple of 8 or 16) some decompression is needed.

2. Decompression
----------------
There are a pile of pointers to offsets within the compressed data to allow fast seeking within the JPEG. The nearest pointer is found then the entropy decoding expands some more data (how much? see below).

3. Inverse DCT
--------------
Except for DC only plots, this is then passed through the inverse DCT to arrive at some 8x8 blocks of samples, these are DCTSIZE x DCTSIZE, or DCTSIZE2.

All samples are arranged to be 32 bit quantities for convenience of LDR and STR, other implementations use 16 bit samples and only expand when needed for fixed point calculations.

Samples are in what is described in the code as 'row order', so neighbouring words in memory are doing a vertical strip of rows, see the numbering in the diagram.

4. Colours
----------
Lastly, the samples are converted back to greyscales or RGB (as appropriate) into the band buffer in RISC OS pixel format.

Supported input formats are
 * YUV samples (a colour JPEG)
 * Y only samples (a greyscale JPEG)
those with RGB and CMYK and YCCK data are not currently supported.

Supported output formats are
 * 32bpp ie. true colour words of &0BGR
 * 16bpp ie. true colour half words of 555/565/444 colour
 * 8bpp 256 entry VIDC colours
 * 8bpp linear greyscale
 * Less than 8bpp are output as 32bpp and the blitter dithers them for us

The output band buffer is always width * 4 bytes long
                                 8 or 16 lines high
when output is requested in something other than 32bpp the band buffer is not resized, the sprite data is just squashed up in the top left corner. Therefore, loop iterations in the 8bpp code (for example) will always increment by outoffset * 4 bytes even though they only output a quarter of that data.

How many and what?
==================
On entry to a colour conversion routine a JCOEF pointer is passed which is the base of some DCTSIZE2 blocks in memory.

Supported sampling ratios are
 * "1x1" (8x8 luma pixels for each 8x8 chroma, best looking, bigger file)
 * "1x2" (8x16 luma pixels for each 8x8 chroma)
 * "2x1" (16x8 luma pixels for each 8x8 chroma)
 * "2x2" (16x16 luma pixel for each 8x8 chroma, most common, smallest file)
Note U and V must always be sampled at the same rate in this implementation.

There are 4 cases to consider:

1. Mono, DC conversion
When the JPEG is scaled very small a shortcut is taken to only use the DC value for each 8x8 tile because the actual 8 pixels would be too small to see anyway.
IDCT is not performed.
One DC value -> a line of 8 output pixels. The 8 rows are formed by address fiddling rather than actually outputting all 64 values since they're identical.

2. Mono
One inverse DCT is performed, to yield one 8x8 block of luma data.
Output is either 8bpp greyscale, or 32bpp greyscale.

3. Colour, DC conversion
       Y[0]  Y[1]  Y[2]  Y[3]  U     V
1x1 => Ydc   junk  junk  junk  Udc   Vdc
1x2 => Ydc   Ydc   junk  junk  Udc   Vdc
2x1 => Ydc   Ydc   junk  junk  Udc   Vdc
2x2 => Ydc   Ydc   Ydc   Ydc   Udc   Vdc

If outputting greyscales, the U and V values are discarded. The Y sample is simply duplicated (for both 8bpp and 32bpp) to fill as many 8x8 output patches as the sampling ratio implies.
If outputting colour (up to) 4 Y samples and UV are converted to RGB.
The process repeats until the scan line limit is reached, and 8 or 16 rows have been output.

4. Colour
       blk1  blk2  blk3  blk4  blk5  blk6
1x1 => 8x8Y  junk  junk  junk  8x8U  8x8V
1x2 => 8x8Y  8x8Y  junk  junk  8x8U  8x8V
2x1 => 8x8Y  8x8Y  junk  junk  8x8U  8x8V
2x2 => 8x8Y  8x8Y  8x8Y  8x8Y  8x8U  8x8V

If outputting greyscales, the U and V values are discarded. The Y samples are expanded to output a patch of 64 to 256 pixels as the sampling ratio implies.
If outputting colour, the 1x1; 1x2; 2x1 ratios are always converted to 32bpp format. For fewer colours a dither is optionally available.
The 2x2 sampling ratio is dealt with specially since it is the most frequently occurring and hence should be fastest.
 * 32bpp directly converts YUV to RGB for the 8 or 16 rows requested
 * 16bpp uses an ordered dither on 8:8:8 RGB data to get a 5:5:5 pixel block
 * 8bpp works by looking up the VIDC pixel in a big YUV table, then looking
   up the VIDC colour number in a big YUV table, subtracting the two
   values (to get the error) and scattering the error into the neighbouring
   pixels in a 'u' shaped dance. Optionally full error diffused dithering
   can be requested by the user, but is slower
anything less than 8bpp is dithered by the blitter, as it will look pretty
poor whatever technique you choose.

Dancing
=======
The 8bpp 'u' shaped dance needs to map from row order data to scan line order and do a little dance. The following BASIC illustrates this
 FORj=0TO7
   FORi=0TO31
     p=i AND 3
     PRINTi,j,((j<<1)AND7)+(((p-1)AND2)>>1)+(((i AND15)>>1)*8),j+((i>>2)*8)
   NEXT
 NEXT
the inner loop, i, can be thought of as counting output pixels, ie. 2 rows of 16 pixels. The outer loop, j, counts row pairs, therefore 8 pairs give the 16 scan lines expected. 
   @


1.3
log
@Rewrite of find_image_dims
Detail:
  Now handles 0xFF padding, previously acceptable encoded images including padding were incorrectly rejected.
  Calculate the workspace for greyscale images correctly, the itype flags included the density (and latterly the SOF) flags, but the workspace calculation assumed it only contained 1 or 3 (for colour components).
  Exit cases now made common and propagate file errors correctly.
  Minor changes to the assembler that uses find_image_dims to handle 4 colour component return (now a 3 bit return value).
  Merge the other M_THING enum from IJG8d so we don't need our own copy.
  Fix signed pointer comparison.
  Use symbolic defines from Global & Interface headers where possible.
  The jdata pointer arg is now treated as const.
Admin:
  Submission for the JPEG bounty.

Version 1.70. Tagged as 'SprExtend-1_70'
@
text
@d11 5
d40 1
a40 1
Those with RGB and CMYK data are not currently supported.
d43 2
a44 2
 * 32bpp ie. words of &0BGR unpaletted colours
 * 16bpp ie. half words of 5:5:5 colour
d51 1
a51 1
when output is requested in something other than 32bpp the band buffer is not resized, the sprite data is just squashed up in the top left corner. Therefore, loop itterations in the 8bpp code (for example) will always increment by outoffset * 4 bytes even though they only output a quarter of that data.
@


1.2
log
@Copy docs
Two bits of documention copied to the trunk so they're not lost.
Not tagged.
@
text
@d9 1
a9 1
Or JPEG_PlotScaled, which other than the front end checking being a bit simpler is handled much the same. The JPEG data is validated via find_image_dims() and the call then switches to the same rails that the train for OS_SpriteOp 56 is on.
@


1.1
log
@file 2x2Order was initially added on branch MigrateIJG8b.
@
text
@d1 111
@


1.1.2.1
log
@Use USAT in 150 occurrences of colour clamping for ARMv6 and later.
Some IDCT renaming.
Shock addition of some documentation on how it all works.
Mirror fix from 1.39 on the trunk.
Debug
 Made DEBUG version compile again, earlier header shuffling was preventing it.
 Replaced the ' _ ' method of variadic macro emulation with more familiar double brackets for tracef().
 Eliminated IFDEBUG macro and just used #ifdef DEBUG/#endif or tracef() directly.
 Don't bother passing the line number and file name to exit() when in the non DEBUG case.

Version 1.38, 1.35.2.8. Tagged as 'SprExtend-1_38-1_35_2_8'
@
text
@a0 110
2x2 order
=========
The array accesses for un-JPEGing some pixels is a bit mind bending, so the accompanying diagram, which shows the most common 2x2 case might help.

Say a !Draw window containing a JPEG needs repainting, so some rectangles need un-JPEGing. Here's roughly what happens:

1. Call to JPEG_PlotTransformed
-------------------------------
Or JPEG_PlotScaled, which other than the front end checking being a bit simpler is handled much the same. The JPEG data is validated, and the call then switches to the same rails that the train for OS_SpriteOp 56 is on.

At the point where a raster is needed by the blitter instead of fetching pixels from the sprite area, a call to jpeg_find_lines() is made. This has a preallocated 'band buffer' of height 8 or 16 lines by however wide the JPEG is.

If the y coordinate is in the band buffer already a memory copy is made and the blitter code carries on as though it was reading from a sprite.
If the y coordinate is not in the band buffer (ie. passed into a different multiple of 8 or 16) some decompression is needed.

2. Decompression
----------------
There are a pile of pointers to offsets within the compressed data to allow fast seeking within the JPEG. The nearest pointer is found the the entropy decoding expands some more data (how much? see below).

3. Inverse DCT
--------------
Except for DC only plots, this is then passed through the inverse DCT to arrive at some 8x8 blocks of samples, these are DCTSIZE x DCTSIZE, or DCTSIZE2.

All samples are arranged to be 32 bit quantities for convenience of LDR and STR, other implementations use 16 bit samples and only expand when needed for fixed point calculations.

Samples are in what is described in the code as 'row order', so neighbouring words in memory are doing a vertical strip of rows, see the numbering in the diagram.

4. Colours
----------
Lastly, the samples are converted back to greyscales or RGB (as appropriate) into the band buffer in RISC OS pixel format.

Supported input formats are
 * YUV samples (a colour JPEG)
 * Y only samples (a greyscale JPEG)
Those with RGB and CMYK data are not currently supported.

Supported output formats are
 * 32bpp ie. words of &0BGR unpaletted colours
 * 16bpp ie. half words of 5:5:5 colour
 * 8bpp 256 entry VIDC colours
 * 8bpp linear greyscale
 * Less than 8bpp are output as 32bpp and the blitter dithers them for us

The output band buffer is always width * 4 bytes long
                                 8 or 16 lines high
when output is requested in something other than 32bpp the band buffer is not resized, the sprite data is just squashed up in the top left corner. Therefore, loop itterations in the 8bpp code (for example) will always increment by outoffset * 4 bytes even though they only output a quarter of that data.

How many and what?
==================
On entry to a colour conversion routine a JCOEF pointer is passed which is the base of some DCTSIZE2 blocks in memory.

Supported sampling ratios are
 * "1x1" (8x8 luma pixels for each 8x8 chroma, best looking, bigger file)
 * "1x2" (8x16 luma pixels for each 8x8 chroma)
 * "2x1" (16x8 luma pixels for each 8x8 chroma)
 * "2x2" (16x16 luma pixel for each 8x8 chroma, most common, smallest file)
Note U and V must always be sampled at the same rate in this implementation.

There are 4 cases to consider:

1. Mono, DC conversion
When the JPEG is scaled very small a shortcut is taken to only use the DC value for each 8x8 tile because the actual 8 pixels would be too small to see anyway.
IDCT is not performed.
One DC value -> a line of 8 output pixels. The 8 rows are formed by address fiddling rather than actually outputting all 64 values since they're identical.

2. Mono
One inverse DCT is performed, to yield one 8x8 block of luma data.
Output is either 8bpp greyscale, or 32bpp greyscale.

3. Colour, DC conversion
       Y[0]  Y[1]  Y[2]  Y[3]  U     V
1x1 => Ydc   junk  junk  junk  Udc   Vdc
1x2 => Ydc   Ydc   junk  junk  Udc   Vdc
2x1 => Ydc   Ydc   junk  junk  Udc   Vdc
2x2 => Ydc   Ydc   Ydc   Ydc   Udc   Vdc

If outputting greyscales, the U and V values are discarded. The Y sample is simply duplicated (for both 8bpp and 32bpp) to fill as many 8x8 output patches as the sampling ratio implies.
If outputting colour (up to) 4 Y samples and UV are converted to RGB.
The process repeats until the scan line limit is reached, and 8 or 16 rows have been output.

4. Colour
       blk1  blk2  blk3  blk4  blk5  blk6
1x1 => 8x8Y  junk  junk  junk  8x8U  8x8V
1x2 => 8x8Y  8x8Y  junk  junk  8x8U  8x8V
2x1 => 8x8Y  8x8Y  junk  junk  8x8U  8x8V
2x2 => 8x8Y  8x8Y  8x8Y  8x8Y  8x8U  8x8V

If outputting greyscales, the U and V values are discarded. The Y samples are expanded to output a patch of 64 to 256 pixels as the sampling ratio implies.
If outputting colour, the 1x1; 1x2; 2x1 ratios are always converted to 32bpp format. For fewer colours a dither is optionally available.
The 2x2 sampling ratio is dealt with specially since it is the most frequently occurring and hence should be fastest.
 * 32bpp directly converts YUV to RGB for the 8 or 16 rows requested
 * 16bpp uses an ordered dither on 8:8:8 RGB data to get a 5:5:5 pixel block
 * 8bpp works by looking up the VIDC pixel in a big YUV table, then looking
   up the VIDC colour number in a big YUV table, subtracting the two
   values (to get the error) and scattering the error into the neighbouring
   pixels in a 'u' shaped dance. Optionally full error diffused dithering
   can be requested by the user, but is slower
anything less than 8bpp is dithered by the blitter, as it will look poor anyway.

Dancing
=======
The 8bpp 'u' shaped dance needs to map from row order data to scan line order and do a little dance. The following BASIC illustrates this
 FORj=0TO7
   FORi=0TO31
     p=i AND 3
     PRINTi,j,((j<<1)AND7)+(((p-1)AND2)>>1)+(((i AND15)>>1)*8),j+((i>>2)*8)
   NEXT
 NEXT
the inner loop, i, can be thought of as counting output pixels, ie. 2 rows of 16 pixels. The outer loop, j, counts row pairs, therefore 8 pairs give the 16 scan lines expected. 
   @

