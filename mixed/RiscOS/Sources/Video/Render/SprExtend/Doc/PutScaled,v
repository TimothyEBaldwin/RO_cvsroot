head	1.1;
access;
symbols
	SprExtend-1_83:1.1
	SprExtend-1_82:1.1
	SprExtend-1_81:1.1
	SprExtend-1_80:1.1
	SprExtend-1_79:1.1
	SprExtend-1_78:1.1
	SprExtend-1_77:1.1
	SprExtend-1_76:1.1
	SprExtend-1_75:1.1
	SprExtend-1_74:1.1
	SprExtend-1_73:1.1
	SprExtend-1_72:1.1
	SprExtend-1_71-nocfsi:1.1
	SprExtend-1_71:1.1
	SprExtend-1_70-tracef:1.1
	SprExtend-1_70-headers:1.1
	SprExtend-1_70:1.1
	SprExtend-1_69:1.1
	SprExtend-1_68:1.1
	SprExtend-1_67:1.1
	SprExtend-1_66:1.1
	SprExtend-1_65:1.1
	SprExtend-1_64:1.1
	SprExtend-1_63:1.1
	SprExtend-1_62:1.1
	SprExtend-1_61:1.1
	SprExtend-1_60:1.1
	SprExtend-1_59:1.1
	SprExtend-1_58:1.1
	SprExtend-1_57:1.1
	SprExtend-1_56:1.1
	SprExtend-1_55:1.1
	SprExtend-1_54:1.1
	SprExtend-1_53:1.1
	SprExtend-1_52:1.1
	SprExtend-1_51:1.1
	SprExtend-1_50:1.1
	SprExtend-1_38-1_35_2_16:1.1
	SprExtend-1_49:1.1
	SprExtend-1_48:1.1
	SprExtend-1_47:1.1
	SprExtend-1_38-1_35_2_15:1.1
	SprExtend-1_46:1.1
	SprExtend-1_45:1.1
	SprExtend-1_44:1.1
	SprExtend-1_43:1.1
	SprExtend-1_42:1.1
	SprExtend-1_41:1.1
	SprExtend-1_38-1_35_2_14:1.1
	SprExtend-1_40:1.1
	SprExtend-1_38-1_35_2_13:1.1
	SprExtend-1_38-1_35_2_12:1.1
	SprExtend-1_38-1_35_2_11:1.1
	SprExtend-1_38-1_35_2_10:1.1
	SprExtend-1_38-1_35_2_9:1.1
	SprExtend-1_38-1_35_2_8:1.1
	SprExtend-1_39:1.1
	SprExtend-1_38-1_35_2_7:1.1
	SprExtend-1_38-1_35_2_6:1.1
	SprExtend-1_38-1_35_2_5:1.1
	SprExtend-1_38-1_35_2_4:1.1
	SprExtend-1_38-1_35_2_3:1.1
	SprExtend-1_38-1_35_2_2:1.1
	SprExtend-1_38-1_35_2_1:1.1
	MigrateIJG8b:1.1.0.2
	SprExtend-1_38:1.1
	SprExtend-1_37:1.1
	SprExtend-1_36:1.1
	SprExtend-1_35:1.1
	SprExtend-1_34:1.1
	SprExtend-1_33:1.1
	SprExtend-1_32:1.1
	SprExtend-1_31:1.1
	SprExtend-1_30:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.09.29.21.05.23;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Remove pilot JPEG code.
During the original development (referred to in the docs as Sprite Extend 2) JPEG data was briefly wrapped inside a sprite file before the JPEG_ swis were introduced. Within SpriteExtend some code still remained to fake a mode 20 sprite header with the JPEG output sized adjusted as though it was 4bpp, then later undo the faking by checking for a mode 20 sprite with is_it_jpeg set.
This version removes all of the code looking out for pilot JPEGs, and rationalises the fake sprite header to just report the true X/Y size.
Fix bug where r4 would be corrupted on exit from JPEG_PlotScaled if an error occurred, and generally rationalised the exit cases a bit more sensibly.
Made the JPEG_ swi despatch a bit more simple to follow.
Corrected a comment in the NSM_bpptable.
Deleted unused 'ecfspace' from the workspace.
Hid the 'macroword' from the C code as it's now an assembler only value.
Cut the initial comments from c/putscaled and placed in Docs.
Cut the debug tracing code (a notable %age) from c/putscaled and placed in tracing support file.
Simplified the entry to putscaled_compiler() now we don't have to look out for pilot format JPEGs within sprites any more.
Sprinkled in some block comments to make navigating the c/putscaled file a bit easier.

Version 1.30. Tagged as 'SprExtend-1_30'
@
text
@02 Aug 93 WRS started
25 Aug 93 WRS basic stuff, with 2-at-a-time loop, seems to work.
              simple 16bpp and 32bpp cases have been shown to work.
              PlotMaskScaled coded but doesn't work yet.
              double-pixel sprites mysteriously wrong.
              old compiler taken out - module now 30K (was 18K when I started...)
27 Aug 93 WRS checking for unit translation table moved into assembler (in Sources.PutScaled)
 1 Sep 93 WRS optimised loop for inner loop just being a block transfer (in Sources.PutScaled)
28 Sep 93 WRS JPEG decompression, with assembler DCT/colour conv/huffman, works.

PlotMask - precise meaning of the ECF pointers etc.?
eg. shadows in DragASprite seem to come out cyan, should be black - but I feel
there are F pixels in the ECF pattern, where do the 7 pixels come from? Confused.
ECF plotting - ignoring the EOR word at the moment.

double-pixel sprites - mystery of apparently random behaviour.

Are there times when a 16bit pixel is better off in the
top half of r_pixel? Not thought through yet.

When a pixel is masked, I generate a B around the fetch/xlate/put
code. This is often around 2 or 3 instructions - would be better
to make those instructions conditional.
  Are they always conditionalisable? Not thought through.

At the moment I don't believe the inner loop can spill its registers. If it
does, the most effective short-term measure is for temp1 and temp2 to be
overlaid with something, and STM..LDM to surround their use. Bank switching
is a more powerful general technique, but requires STM,LDM every time you
switch banks. If it comes to this I'd victimise masks first as a thing to
slow down, especially 1BPP masks which are quite expensive.

-------------------------------------------

Other misc things to do/check:

test prog needs doing!
Want TPSS to run in any mode. Generate an xlation table if the modes aren't
compatible - is there a SWI to do this?

>>> I have moved to using PL and MI for the add/div sums, so that I can do
it all as constants. Is this OK? What if it isn't? Needs add/div to be
very big in order to matter, should at least check for this.
(actually do I need this, or is CS/CC still correct after fragmentary
unsigned add/sub? no!)
After all, in the assembler the coordinate is multiplied by xdiv,
divided by xadd - is all this really going to work if xdiv/xadd are
close to 32 bits big?

>>> Initial loading in the compiled code is all off R12 - for an x loop with
max variables, isn't this used? Then it will be trampled on before y vars
are loaded. Can this happen? If so, consider loading all off R14 instead.
At least put in asserts to guard against this.
  If used in one-bank case, surely the very last load loads the last register
declared so there's no problem? Again, check for this carefully.

Augst 93 WRS: I've worked on custom code for scale-up and scale-down along
an x line, but it scarely seems worth it. You end up saving one or two
instructions per source/dest pixel (whichever there is fewer of!). Custom
2:1 would probably be more effective, but is it really important? Abandoned.

---------------------------------------------------------

GPS - Inner loop spills a register when plotting 16bpp sprite with mask and
dithering (ie Scaling up and losing depth)
    FIX - Stopped r12(wp) from being overwritten until after all variables
          had been moved to the stack.

GPS - Plot corrupted when left hand side of sprite obscured.
    FIX - Mask shift was being stored in top 5 bits of register but not
          shifted down when originally used in mask_word rotate.

/* BEWARE 10000 VOLTS (this park will never fail, the TRex will never get
 * out, etc) - This code is not linked with the C library so any high-level
 * functions it uses must be implemented here too. Any static variables must
 * go in the 'workspace' structure definition (as opposed to using the 'static' C keyword).
 */

/* BEWARE 20000 VOLTS - The PlotMaskScaled code has to continue to use the kernel's
 * internal ECF pattern for the foreground and background colours. This is because when
 * performing a PaintCharScaled of the delete character the kernel temporarily swaps the
 * foreground patter with the background one to make it work! Change this at your own
 * risk... GPS (after having to change it all!) 23/3/95
 */

/* Most of the code generation is split into several areas: fetching a
pixel, writing a pixel, advancing source pointer, advancing destination
pointer, handling the x loop, handling the y loop. For each of these
register declarations, initialisation, and actually doing it are presented
separately. */

/* r_inword rotates right, so that the 'current' pixel is at the least
significant end. r_inshift contains the number of bits it still has to
rotate before we have used all the input pixels. r_outword and r_outshift
behave similarly. */

/* If doing PLOTMASK then r_inptr points at the ECF pattern, r_inword holds
data from the ECF pattern and rotates with r_outshift.
r_maskinword/ptr/shift are used to get the mask data. */

@
