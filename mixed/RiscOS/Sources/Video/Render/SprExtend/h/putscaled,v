head	4.9;
access;
symbols
	SprExtend-1_83:4.9
	SprExtend-1_82:4.9
	SprExtend-1_81:4.9
	SprExtend-1_80:4.9
	SprExtend-1_79:4.9
	SprExtend-1_78:4.9
	SprExtend-1_77:4.9
	SprExtend-1_76:4.9
	SprExtend-1_75:4.9
	SprExtend-1_74:4.9
	SprExtend-1_73:4.9
	SprExtend-1_72:4.9
	SprExtend-1_71-nocfsi:4.8
	SprExtend-1_71:4.8
	SprExtend-1_70-tracef:4.8
	SprExtend-1_70-headers:4.8
	SprExtend-1_70:4.7
	SprExtend-1_69:4.7
	SprExtend-1_68:4.7
	SprExtend-1_67:4.7
	SprExtend-1_66:4.7
	SprExtend-1_65:4.7
	SprExtend-1_64:4.7
	SprExtend-1_63:4.7
	SprExtend-1_62:4.7
	SprExtend-1_61:4.7
	SprExtend-1_60:4.6
	SprExtend-1_59:4.6
	SprExtend-1_58:4.6
	SprExtend-1_57:4.6
	SprExtend-1_56:4.6
	SprExtend-1_55:4.6
	SprExtend-1_54:4.5
	SprExtend-1_53:4.5
	SprExtend-1_52:4.5
	SprExtend-1_51:4.4
	SprExtend-1_50:4.4
	SprExtend-1_38-1_35_2_16:4.4.2.3
	SprExtend-1_49:4.4
	SprExtend-1_48:4.4
	SprExtend-1_47:4.4
	SprExtend-1_38-1_35_2_15:4.4.2.3
	SprExtend-1_46:4.4
	SprExtend-1_45:4.4
	SprExtend-1_44:4.4
	SprExtend-1_43:4.4
	SprExtend-1_42:4.4
	SprExtend-1_41:4.4
	SprExtend-1_38-1_35_2_14:4.4.2.3
	SprExtend-1_40:4.4
	SprExtend-1_38-1_35_2_13:4.4.2.3
	SprExtend-1_38-1_35_2_12:4.4.2.3
	SprExtend-1_38-1_35_2_11:4.4.2.3
	SprExtend-1_38-1_35_2_10:4.4.2.3
	SprExtend-1_38-1_35_2_9:4.4.2.3
	SprExtend-1_38-1_35_2_8:4.4.2.2
	SprExtend-1_39:4.4
	SprExtend-1_38-1_35_2_7:4.4.2.1
	SprExtend-1_38-1_35_2_6:4.4.2.1
	SprExtend-1_38-1_35_2_5:4.4.2.1
	SprExtend-1_38-1_35_2_4:4.4.2.1
	SprExtend-1_38-1_35_2_3:4.4.2.1
	SprExtend-1_38-1_35_2_2:4.4.2.1
	SprExtend-1_38-1_35_2_1:4.4
	MigrateIJG8b:4.4.0.2
	SprExtend-1_38:4.4
	SprExtend-1_37:4.4
	SprExtend-1_36:4.4
	SprExtend-1_35:4.4
	SprExtend-1_34:4.4
	SprExtend-1_33:4.4
	SprExtend-1_32:4.3
	SprExtend-1_31:4.2
	SprExtend-1_30:4.2
	SprExtend-1_29:4.1
	SprExtend-1_28:4.1;
locks; strict;
comment	@# @;


4.9
date	2016.05.21.14.03.51;	author rool;	state Exp;
branches;
next	4.8;
commitid	4BquZHousteH5m7z;

4.8
date	2016.05.21.13.32.23;	author rool;	state Exp;
branches;
next	4.7;
commitid	yTqS85yKh7k8Ul7z;

4.7
date	2014.03.04.20.45.09;	author jlee;	state Exp;
branches;
next	4.6;
commitid	6KWofF44yd1Fjqrx;

4.6
date	2013.10.07.00.39.12;	author jlee;	state Exp;
branches;
next	4.5;
commitid	HcUKy3PafwqToi8x;

4.5
date	2013.08.06.23.16.27;	author jlee;	state Exp;
branches;
next	4.4;
commitid	z9XOph7zDZQ2Ur0x;

4.4
date	2010.10.17.09.01.39;	author rsprowson;	state Exp;
branches
	4.4.2.1;
next	4.3;

4.3
date	2010.10.13.20.26.25;	author rsprowson;	state Exp;
branches;
next	4.2;

4.2
date	2010.09.29.21.05.33;	author rsprowson;	state Exp;
branches;
next	4.1;

4.1
date	2010.09.25.12.19.26;	author rsprowson;	state Exp;
branches;
next	;

4.4.2.1
date	2011.01.04.21.28.36;	author rsprowson;	state Exp;
branches;
next	4.4.2.2;

4.4.2.2
date	2011.01.13.21.12.25;	author rsprowson;	state Exp;
branches;
next	4.4.2.3;

4.4.2.3
date	2011.01.22.17.58.34;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


4.9
log
@Transcode arithmetics
Detail:
  Import of the raw coefficient Huffman entropy compressor elements of the IJG8d library.
  We don't need a full compressor (ala JCompMod) since there's never a need to go all the way through IDCT/upsampling/colour conversion only to reverse the whole process; it's sufficient only to collect up the raw coefficients and recompress them as a baseline JPEG.
  Two extra (temporary) dynamic areas are introduced, once to hold the raw coefficients and the other to act as a scratch file to make the JPEG in. See Doc/JPEGMmgr.
Admin:
  Submission for the JPEG bounty.

Version 1.72. Tagged as 'SprExtend-1_72'
@
text
@/* Copyright 2010 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* h.PutScaled
   More interface between core code and SpriteExtend innards.
   started: 12 Sep 93 WRS
*/

#ifndef putscaled_h_
#define putscaled_h_

/**************************************************************************
*                                                                         *
*    Pertinent structures.                                                *
*                                                                         *
**************************************************************************/

/* A sprite header, copied from RISC_OSLib */
typedef struct
{
 int next;
 char name[12];
 int width;
 int height;
 int lbit;
 int rbit;
 int image;
 int mask;
 int mode;
} sprite_header;

/* Printer calibration table - definition internal to ColourTrans,
 * colour printer drivers.
 */
typedef struct
{
  int version;            /* table version number - must be 0 */
  int idealblack;         /* if not 0, need to do colour skewing */
  int idealwhite;         /* if not &FFFFFF00, need to do colour skewing */
  int postprocessSWI;     /* if not 0, need to call ColourTrans */
  /* If idealblack==0, idealwhite==&ffffff00, postprocessSWI==0 then we can do the
   * colour calibration by doing thee lookups. Otherwise, you have to call ColourTrans for
   * each pixel.
   */
  int tablecount;         /* number of tables (1 or 3) */
  char redtable[256];     /* if tablecount==1 this is blue and green tables too */
  char greentable[256];   /* translate 24-bit colour values by doing a lookup for each colour */
  char bluetable[256];
} calibration_table;

/**************************************************************************
*                                                                         *
*    Assembler Workspace declarations.                                    *
*                                                                         *
**************************************************************************/

/* These correspond to the assembler workspace. Changes to either must
 * be synchronised.
 */
typedef struct
{
  #define WP_FIRST_FIELD save_outoffset
  int    save_outoffset;  /* #       4       ; reloaded from R12 */
  int    save_inoffset;   /* #       4 */
  int *  save_inptr;      /* #       4 */
  int *  save_outptr;     /* #       4 */
  int    save_ydiv;       /* #       4 */
  int    save_yadd;       /* #       4 */
  int    save_ysize;      /* #       4 */
  int    save_ycount;     /* #       4 */


  int    save_inshift;    /* #       4 */
  int    save_xsize;      /* #       4 */
  int    save_xcount;     /* #       4 */
  int    save_ecfptr;     /* #       4 */
  int    save_ecflimit;   /* #       4 */
  int    save_xdiv;       /* #       4 */
  int    save_xadd;       /* #       4 */

  int    save_masko;      /* #       4 */
  int    save_xcoord;     /* #       4 */
  int    save_ycoord;     /* #       4 */
  int    save_inputxsize; /* #       4 */
  int    save_inputysize; /* #       4 */
  int    save_xmag;       /* #       4 */
  int    save_ymag;       /* #       4 */

  int    save_inlog2bpp;  /* #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled */
  int    save_inlog2bpc;  /* #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled */
  int    save_inbpp;      /* #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled */
  int    save_inmodeflags; /* #      4 ; <- updated by readspritevars, SWIJPEG_PlotScaled */
  int    save_inncolour;  /* #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled */
  int    save_mode;       /* #       4 ; input sprite mode word, only used by putscaled_compiler */
  int    save_spr_type;   /* #       4 ; top 5 bits of sprite mode word, a bit useless if RISC OS 5 sprite mode word */

  int    save_maskinshift; /* #      4 */
  int    save_maskinptr;  /* #       4 */
  int    save_maskinoffset; /* #     4 */

  int    inmode;          /* #       4 ; <- updated by readspritevars, SWIPJEG_PlotScaled */
  int    inlog2px;        /* #       4 ; <- updated by readspritevars, SWIPJEG_PlotScaled */
  int    inlog2py;        /* #       4 ; <- updated by readspritevars, SWIPJEG_PlotScaled */
  int    ColourTTR;       /* #       4 */
  int    TTRType;         /* #       4 ; Type of ColourTTR */
#define TTRType_None      0
#define TTRType_Normal    1 // byte lookup table for converting <=8bpp to <=8bpp
#define TTRType_Wide      2 // wide lookup table for converting <=8bpp to >=16bpp, repacked to be one word per entry
#define TTRType_32K       3 // 32K-style table for converting >=16bpp to <=8bpp
#define TTRType_ColourMap 4 // Colour mapping descriptor for >=16bpp source
#define TTRType_Palette   5 // Using the sprite palette
#define TTRType_Optional  8 // Extra flag: translation is optional, can use palette if we wish 

  int    changedbox;      /* #       4 */

  int    spritecode;      /* #       4 ; SpriteOp reason code we were called with */

  int    trns_flags2;     /* #       4      ; Added when merged with 0.62 (GPS)*/

  int    log2px;          /* #       4 ; <- updated by readvduvars */
  int    log2py;          /* #       4 ; <- updated by readvduvars */
  int    Log2bpp;         /* #       4 ; <- updated by readvduvars */
  int    Log2bpc;         /* #       4 ; <- updated by readvduvars */
  int    orgx;            /* #       4 ; <- updated by readvduvars */
  int    orgy;            /* #       4 ; <- updated by readvduvars */
  int    gwx0;            /* #       4 ; <- updated by readvduvars, tweaked elsewhere for double pixel modes */
  int    gwy0;            /* #       4 ; <- updated by readvduvars */
  int    gwx1;            /* #       4 ; <- updated by readvduvars, tweaked elsewhere for double pixel modes */
  int    gwy1;            /* #       4 ; <- updated by readvduvars */
  int    linelength;      /* #       4 ; <- updated by readvduvars */
  int    screenstart;     /* #       4 ; <- updated by readvduvars */
  int    ywindlimit;      /* #       4 ; <- updated by readvduvars */
  int    modeflags;       /* #       4 ; <- updated by readvduvars */
  int    ncolour;         /* #       4 ; <- updated by readvduvars */
  int    BPC;             /* #       4 ; <- updated by readvduvars */
  int    BPP;             /* #       4 ; <- updated by readvduvars */

  int    ccompiler_bitblockmove; /* # 4     ; routine for C to call back into assembler. */
  calibration_table * cal_table; /* # 4     ; printer calibration table */

#ifdef ASMjpeg
  BOOL   is_it_jpeg;      /* #       4 */
  BOOL   ctrans_recent;   /* #       4 */
  int    in_x;            /* #       4       ; initial x coord in input sprite */
  int    in_y;            /* #       4       ; initial y coord in input sprite */
  int    fetchroutine;    /* #       4       ; routine for compiled code to call to get line of JPEG data. */
  j_decompress_ptr jpeg_info_ptr; /* #       4       ; pointer to JPEG workspace */
  int    area_numbers[3]; /* #       4*3     ; dynamic area numbers*/
#endif
  sprite_header * save_sprite;     /* #       4       ; the actual source sprite */

  int    save_PdriverIntercept; /* #  4       ; Flags used to determine if the pdriver is*/


  BOOL   dither_truecolour; /* #   4       ; do we dither true colour images when reducing BPP? */
  int    blending;          /* #   4       ; b0: translucency blending, b1: alpha mask/channel blending */
  int    ecfyoffset_ptr;    /* #   4       ; pointer to Kernel's ECF offset & shift values, required for dithering */
  int    ecfshift_ptr;      /* #   4 */

  int    CPUFlags;          /* #   4       ; Flags about which instructions we can use */
#define CPUFlag_LDRH  1     // LDRH/STRH available
#define CPUFlag_BLX   2     // BLX available
#define CPUFlag_T2    4     // ARMv6 Thumb2 instructions available: MOVW,MOVT,UBFX,BFC,BFI,etc.
#define CPUFlag_REV   8     // REV available
#define CPUFlag_NoUnaligned 16 // Unaligned load/store not allowed

  int    blendtables[6];  /* #       4*6     ; Blending tables */
  int    screenpalette;   /* #       4       ; Screen palette fetched via InverseTable, if required */
  int    inversetable;    /* #       4       ; Inverse screen palette fetched via InverseTable, if necessary */


  int    newtranstable[256];   /*   #       256 *4                  ; buffer for pixel translation table */
} asm_workspace;

/* Stack workspace (for sprtrans) */
typedef struct
{
  int trns_spr_xcoords[4];           /* #       16      ;       Four x coordinates */
  int trns_spr_ycoords[4];           /* #       16      ;       Four y coordinates */
  int trns_comp_spr_left;            /* #       4       ;       Sprite left hand edge (bottom 16 bits) */
  int trns_comp_spr_start;           /* #       4       ;       Sprite start (accounting for internal coord block top) */
  int trns_comp_spr_byte_width;      /* #       4       ;       Sprite byte width << (3-sprite bpp) i.e. row pitch in pixels */
  int trns_comp_spr_height;          /* #       4       ;       Sprite height (top 16 bits) and right hand edge (bottom 16) */
  int trns_comp_spr_ttr;             /* #       4       ;       Translation table (if required) */
  int trns_comp_spr_masko;           /* #       4       ;       Sprite mask offset from image << (3-sprite bpp) */
  int trns_comp_ecf_ora;             /* #       4       ;       ECF OR word */
  int trns_comp_ecf_eor;             /* #       4       ;       ECF EOR word */
  int trns_codebuffer;               /* #       4       ;       Pointer to codebuffer */
  int trns_spr_X_x0_y;               /* #       4       ;       Sprite X,Y at top coordinate of area */
  int trns_spr_Y_x0_y;               /* #       4       ;            in 16.16 fixed point */
  int trns_spr_inc_X_x;              /* #       4       ;       Sprite increments */
  int trns_spr_inc_Y_x;              /* #       4       ;          ( change induced by single */
  int trns_spr_inc_Y_y;              /* #       4       ;            increments in screen x,y on */
  int trns_spr_inc_X_y;              /* #       4       ;            sprite X,Y ) */
  int trns_spr_lineptr;              /* #       4       ;       Line to output onto */
  int trns_spr_edgeblock[6*4];       /* #       6*4*4   ;       Edge blocks, in format as below */
  int trns_spr_edgeblock_end[6];     /* #       4*6     ;        -1, to denote end of edge block */
  int trns_ecf_ptr;                  /* #       4       ;       Ecf pointer */
  int trns_masking_word;             /* #       4       ;       Masking word for > eight bit per pixel */
  int trns_comp_mask_offset;         /* #       4       ;       used to point at 1bpp mask data */
  int trns_comp_spr_mask_width;      /* #       4       ;       1bpp mask equivalent of spr_width */
  int trns_comp_mask_base;           /* #       4       ;       1bpp mask adjustment to mask data */
  int trns_asm_workspace;            /* #       4       ;       assembler R12 */
} stack_ws;

/**************************************************************************
*                                                                         *
*    Exported C functions (called by the assembler part of SpriteExtend)  *
*                                                                         *
**************************************************************************/

typedef void (*blitter)(asm_workspace *wp);

#endif
@


4.8
log
@Update headers to stock copy
Detail:
  Added headers jerror, jmorecfg, jpegint from IJG8d. Removed jpegdata header.
  Bulk rename of structure members to match newer headers, some RISCOS-isms wrapped in #ifdef RISCOS, retained for the time being.
  Assembler code now gets cinfo member offsets from jhdr.s derived from the C header rather than keeping its own dangerous copy of the offsets.
Admin
  Note: this has broken CFSI-jpeg as it expects the error values to be at the top of cinfo.
  Submission for the JPEG bounty.
  Tagged as SprExtend-1_70-headers.
@
text
@d159 1
a159 1
  int    area_number;     /* #       4      ; dynamic area number*/
@


4.7
log
@Update to work with new "32K+" colour translation tables
Detail:
  Sources/SWIs, Sources/SprExtend, Sources/SprOp, c/PutScaled, c/sprtrans, h/putscaled - Cache the sprite NColour value in the save_* workspace
  Sources/SprOp - Update preparettr to perform extra validation on 32K-style translation tables (old "32K." or new "32K+"). Although we could potentially accept any format table, to cut down on the number of plotter combinations we currently require that the table matches the format that ColourTrans will create when given the source sprite.
  c/PutScaled, c/sprtrans - Update comments relating to determining input format of TTRType_32K tables
Admin:
  Tested on BB-xM
  Requires Colours-1_89


Version 1.61. Tagged as 'SprExtend-1_61'
@
text
@d158 1
a158 1
  decompress_info_ptr jpeg_info_ptr; /* #       4       ; pointer to JPEG workspace */
@


4.6
log
@Add support for blended sprite & JPEG rendering - alpha masks, alpha channels, and translucency
Detail:
  This big set of changes adds support for the following user-facing APIs, as per ROL's specs:
  - OS_SpriteOp 52 (PutSpriteScaled) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - OS_SpriteOp 56 (PutSpriteTransformed) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - JPEG_Plot[File]Scaled colourmapping & translucency blending
  - JPEG_Plot[File]Transformed colourmapping & translucency blending
  Sources/CFSI-JPEG, Sources/PutScaled:
  - Added exit_oserror exit routine for use by C code.
  - For SpriteExtend this allows the C code to cause OS_SpriteOp to exit with a given OS error block.
  - For CFSI-JPEG the error block is returned and ERROR_FATAL is returned to ChangeFSI.
  Sources/CSupport:
  - Add definitions for some error codes (matches existing definitions from h/commondefs)
  Sources/PutScaled:
  - Stripped out code to look for identity translation tables; now handled by preparettr routine in Sources/SprOp
  Sources/SWIs, Hdr/SprExtend:
  - JPEG SWIs updated to add support for alpha-blended and colour mapped JPEG rendering, following ROL's APIs
  Sources/SprExtend:
  - Stripped out lots of old build flags which haven't been touched in years.
  - Strip out assembler SprTrans code generator.
  - Add new definitions needed for blending & colour mapping.
  Sources/SprOp:
  - Updated PutScaled frontend to deal with blending and colour mapping.
  - Disabled code which was bodging coordinates when dealing with double-pixel modes - it seems to cause a few issues, and the code generator mostly had proper double-pixel support anyway.
  - Translation table verification and fiddling code rewritten and consolidated into the preparettr routine. C code is now explicitly told what table type is in use and whether it can safely be ignored in favour of using the sprite palette.
  - Removed code from CheckSpriteArea which was deliberately throwing an error upon seeing alpha-masked sprites; I think the bug that was hiding has been fixed now
  Sources/SprTrans
  - Removed the assembler version of the code generator.
  - Updated to add support for blending and colour mapping
  c/PutScaled:
  - Old test code removed.
  - Updated to add support for blending & colour mapping
  - Assorted bugs fixed.
  - A few extra architecture-specific optimisations added.
  - Some workspace setup code moved to c/asmcore to allow sharing with SprTrans.
  c/asmcore:
  - Register allocation code rewritten. Instead of allocating on a first-come, first-served basis, the code now builds a list of which logical registers are needed (and which 'banks' they fall into) and then attempts to allocate them in a more intelligent manner. It still has some failings (e.g. reusing R12 as a general purpose register is currently impossible) but it's a lot more flexible and reliable than the old code.
  - Core pixel transformation code updated to add support for blending & colour mapping
  - Added some extra architecture-specific optimisations
  c/rojpeg:
  - JPEG option handling updated to avoid trashing any colour mapping descriptor that may have been passed in
  c/sprtrans:
  - Updated to add support for blending & colour mapping
  c/tracing:
  - Debug assert messages now show filename as well as line number
  h/commondefs:
  - Removed old #define's that related to old assembler switches.
  h/putscaled:
  - Workspace definition updated to match assembler version.
  - SprTrans stack workspace structure moved here from c/sprtrans
Admin:
  Tested on BB-xM plotting all major sprite & JPEG types into all modes with all major options


Version 1.55. Tagged as 'SprExtend-1_55'
@
text
@d104 1
@


4.5
log
@Add support for new sprite types & screen modes
Detail:
  Makefile - Updated to fix a couple of dependency issues and to make c/asmcore the main C file, not c/putscaled
  Sources/PutScaled - Add a utility routine that's used by the C code to get information about pixel formats
  Sources/SprAdjSize - Add support for wide masks & RISC OS 5 style sprite mode words
  Sources/SprExtend - Tidy up workspace by removing lots of unused bits and moving other bits within sight of the C code. Add flag to control whether C or assembler version of SprTrans is used. Query kernel for ECFYOffset/ECHShift locations instead of using hardcoded values in putscaled code. Add fix for garbage debug strings in softloaded debug versions of the module.
  Sources/SprOp - Add support for wide masks & RISC OS 5 style sprite mode words. Update makepalette16bpp to cope with all the new 16bpp modes. Flag_* -> ModeFlag_* renaming. Move some translation table handling code into a new routine, 'preparettr'. Update checktrans/converttrans to deal with new pixel formats.
  Sources/SprTrans - If the C version of SprTrans is enabled, disable all of these assembler bits except for the outer loop which steps over each row of the screen
  Sources/jdcolor - Updated to deal with new pixel formats. 16bpp conversion code split off into new file, Sources/jdcolor16.
  Sources/jdcolor16 - New file containing the guts of the YUV -> 16bpp conversion code. Gets included multiple times with different options to generate the different conversion routines (code is too big for a macro).
  c/asmcore - New file containing lots of common code ripped out of c/PutScaled - e.g. workspace definition, main functions for register assignment & instruction generation, and code for pixel format conversion. Pixel format conversion code rewritten to cope with new pixel formats, and code buffer key word generation rewritten to fix a couple of bugs (e.g. some issues with dithering options were observed)
  c/PutScaled - Ripped out lots of code that's now in c/asmcore. Now just deals with things that are PutScaled-specific, e.g. main plotter loop containing pixel read/write code. Code extended to cope with new pixel formats
  c/rojpeg, h/jinclude, h/jpegdata - Code extended to cope with new 16bpp conversion routines
  c/sprtrans - New C implementation of the core per-row transformed sprite plotting code generator. Allows reuse of the extensive pixel conversion code in c/asmcore, and allows for better code generation than the assembler original.
  h/putscaled - Worksapce definition updated to match assembler version
Admin:
  Tested on BB-xM, plotting lots of different sprites in lots of different modes
  Plotting of wide mask sprites not supported yet
  C version of YUV -> 16bpp code currently only deals with traditional &BGR 555 pixel format - code is aware of this and will do conversion to desired format if applicable (although quality may be reduced)
  Part of an implementation of the Extended Framebuffer Format spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification


Version 1.52. Tagged as 'SprExtend-1_52'
@
text
@d103 1
a110 12
#ifdef ASMmultibuffer
  int    pc_ecflimit0[ASMnbuffers];     /* #       nbuffers :SHL: 2              ; addresses inside macro code */
  int    pc_outoffset0[ASMnbuffers];    /* #       nbuffers :SHL: 2 */
  int    thisslot;         /* #       4 */
  int    calladdr20[ASMnbuffers];       /* #       nbuffers :SHL: 2               */
  int    calladdr0[ASMnbuffers];        /* #       nbuffers :SHL: 2 */
#else
  int    pc_ecflimit;     /* #       4                       ; addresses inside macro code */
  int    pc_outoffset;    /* #       4 */
#endif


d115 8
d128 1
a128 6
#ifdef ASMignore_ttr
  int    trns_palette;    /* #       4 */
#endif
#ifdef ASMflagbit
  int    trns_flags2;      /* #       4      ; Added when merged with 0.62 (GPS)*/
#endif
a156 1
  sprite_header * save_sprite;     /* #       4       ; the actual source sprite */
d160 1
d166 1
d173 7
a179 1
#define CPUFlag_MOVW  4     // MOVW available
d185 31
@


4.4
log
@Change memory management strategy.
There's no need for the C code to know which pool of memory it's using, so simplify it to just use malloc() and realloc(), the assembler implementation can then select whether the RMA or a dynamic area is in use based on the 'dynamicarea' switch.
Be more careful about area_number when it is zero, since we use that to denote the area is not yet set up but area zero is a valid dynamic area number!
Trim out some unused workspace.
Variable ccompiler_errptr had '# 0' bytes assigned, resulting in writes off the end of the workspace.
Retire DUMPVAL[N]() macro.
Remove M_SOF9 as one of the SOF markers accepted - this is allocated to arithmetic JPEGs which aren't currently supported.
Save a few words by: changing arbitrary constants (eg. safety margins) to be a power of two so they can be register immediates; numerous loads and stores of R12 relative variables changed to not use ADRL; jpeg_fetchroutine similarly simplified.

Version 1.33. Tagged as 'SprExtend-1_33'
@
text
@d84 7
a90 10
  int    save_inshift;    /* #       4       ; <---!   this data is copied onto the stack */
  int    save_outword;    /* #       4       ;     !   so that R12 can be re-used */
  int    save_outmask;    /* #       4       ;     ! */
  int    save_xsize;      /* #       4       ;     ! */
  int    save_xcount;     /* #       4       ;     ! */
  int    save_ecfptr;     /* #       4       ;   --!   up to here is reloaded using LDMIA */
  int    save_ecflimit;   /* #       4       ;     ! */
  int    save_vcount;     /* #       4       ;     ! */
  int    save_xdiv;       /* #       4       ;     ! */
  int    save_xadd;       /* #       4       ; <---! */
a96 3
  int    save_tempxsize;  /* #       4 */
  int    save_tempysize;  /* #       4 */
  int    save_xftimesyf;  /* #       4 */
d100 5
a104 6
  int    save_inflags;    /* #       4      */
  int    save_inlog2bpp;  /* #       4 */
  int    save_inlog2bpc;  /* #       4 */
  int    save_inbpp;      /* #       4 */
  int    save_mode;       /* #       4               ; used in PaintChar */
  int    save_spr_type;   /* #       4 */
d122 3
a124 3
  int    inmode;          /* #       4 */
  int    inlog2px;        /* #       4 */
  int    inlog2py;        /* #       4 */
a126 8
  int    nextrowdata[3];     /* #       12 */
  int    nextcoldata[3];     /* #       12 */
  int    TOTAL;           /* #       4 */
  int    XTOTAL;          /* #       4 */

  int    vduspritepars[2];   /* #       4+4         ; sprite code, areaCBptr ... */
  int    vduspritename[3];   /* #       12          ; ... name */

d129 1
a129 3
  int    spritecode;      /* #       4 */

                /* ; things MOVED to let ccompiler get at them. */
d138 17
a154 2
  int    BPC;             /* #       4 */
  int    BPP;             /* #       4 */
d167 1
a167 1
  int    area_number;       /* #       4      ; dynamic area number*/
a169 1
  int    bgcolour;            /* #       4       ; background colour, for plotting mask. */
d173 9
a181 1
  BOOL   dither_truecolour;    /* #       4       ; do we dither true colour images when reducing BPP? */
@


4.4.2.1
log
@Missed the header files out of the last commit. Try again.

Version 1.38, 1.35.2.2. Tagged as 'SprExtend-1_38-1_35_2_2'
@
text
@d168 1
a168 1
  j_decompress_ptr jpeg_info_ptr; /* #       4       ; pointer to JPEG workspace */
@


4.4.2.2
log
@Use USAT in 150 occurrences of colour clamping for ARMv6 and later.
Some IDCT renaming.
Shock addition of some documentation on how it all works.
Mirror fix from 1.39 on the trunk.
Debug
 Made DEBUG version compile again, earlier header shuffling was preventing it.
 Replaced the ' _ ' method of variadic macro emulation with more familiar double brackets for tracef().
 Eliminated IFDEBUG macro and just used #ifdef DEBUG/#endif or tracef() directly.
 Don't bother passing the line number and file name to exit() when in the non DEBUG case.

Version 1.38, 1.35.2.8. Tagged as 'SprExtend-1_38-1_35_2_8'
@
text
@d161 1
d170 1
@


4.4.2.3
log
@New jerror.h taken from IJG8b.
Swap to using JERR_ numbers, deleted E_ numbers.
Modify genjhdr to pass some defines to the assembler code, so jdcolor can clarify use of DCTSIZE and DCTSIZE2.
Added chart of possible subsampling ratios to documentation.

Version 1.38, 1.35.2.9. Tagged as 'SprExtend-1_38-1_35_2_9'
@
text
@d32 9
a40 9
  int next;
  char name[12];
  int width;
  int height;
  int lbit;
  int rbit;
  int image;
  int mask;
  int mode;
d74 42
a115 42
  int     save_outoffset;               /* reloaded from R12 */
  int     save_inoffset;
  int    *save_inptr;
  int    *save_outptr;     
  int     save_ydiv;       
  int     save_yadd;       
  int     save_ysize;      
  int     save_ycount;     


  int     save_inshift;                 /* <---!   this data is copied onto the stack */
  int     save_outword;                 /*     !   so that R12 can be re-used */
  int     save_outmask;                 /*     ! */
  int     save_xsize;                   /*     ! */
  int     save_xcount;                  /*     ! */
  int     save_ecfptr;                  /*   --!   up to here is reloaded using LDMIA */
  int     save_ecflimit;                /*     ! */
  int     save_vcount;                  /*     ! */
  int     save_xdiv;                    /*     ! */
  int     save_xadd;                    /* <---! */

  int     save_masko;
  int     save_xcoord;     
  int     save_ycoord;     
  int     save_inputxsize; 
  int     save_inputysize; 
  int     save_tempxsize;  
  int     save_tempysize;  
  int     save_xftimesyf;  
  int     save_xmag;       
  int     save_ymag;       

  int     save_inflags;    
  int     save_inlog2bpp;  
  int     save_inlog2bpc;  
  int     save_inbpp;      
  int     save_mode;                    /* used in PaintChar */
  int     save_spr_type;   

  int     save_maskinshift; 
  int     save_maskinptr;   
  int     save_maskinoffset;
d118 5
a122 5
  int     pc_ecflimit0[ASMnbuffers];    /* addresses inside macro code */
  int     pc_outoffset0[ASMnbuffers];    
  int     thisslot;
  int     calladdr20[ASMnbuffers];
  int     calladdr0[ASMnbuffers];        
d124 2
a125 2
  int     pc_ecflimit;                  /* addresses inside macro code */
  int     pc_outoffset;
d129 18
a146 16
  int     inmode;          
  int     inlog2px;        
  int     inlog2py;        
  int     ColourTTR;       
          
  int     nextrowdata[3];  
  int     nextcoldata[3];  
  int     TOTAL;           
  int     XTOTAL;          
          
  int     vduspritepars[2];             /* sprite code, areaCBptr ... */
  int     vduspritename[3];             /* ... name */
          
  int     changedbox;      
          
  int     spritecode;      
d149 2
a150 1
  int     trns_palette;    
d152 1
a152 2
  int     trns_flags2;                  /* Added when merged with 0.62 (GPS)*/
#endif
d155 2
a156 2
  int     BPC;             
  int     BPP;             
d158 2
a159 2
  int     ccompiler_bitblockmove;       /* routine for C to call back into assembler. */
  calibration_table * cal_table;        /* printer calibration table */
d161 8
a168 8
  boolean is_it_jpeg;    
  boolean ctrans_recent; 
  int     in_x;                         /* initial x coord in input sprite */
  int     in_y;                         /* initial y coord in input sprite */
  int     fetchroutine;                 /* routine for compiled code to call to get line of JPEG data. */
  sprite_header * save_sprite;          /* the actual source sprite */
  j_decompress_ptr jpeg_info_ptr;       /* pointer to JPEG workspace */
  int     area_number;                  /* dynamic area number*/
d170 2
a171 2
  int     bgcolour;                     /* background colour, for plotting mask. */
  int     save_PdriverIntercept;        /* Flags used to determine if the pdriver is*/
d174 1
a174 1
  boolean dither_truecolour;            /* do we dither true colour images when reducing BPP? */
d176 1
a176 1
  int     newtranstable[256];           /* buffer for pixel translation table */
@


4.3
log
@Paper and fill some JPEG cracks.
The exit_c function was repeatedly being called with the line number argument and error code the wrong way round and since only bits 0-2 of the error code are inspected on exit any fatal exits from the ported JPEG library code would either report the wrong error or fail silently (depending on the line number) - example a 12 bits per sample JPEG would be rendered without fault into a screen full of random memory garbage.
Assembling/compiling with the 'jpeg' switch off didn't work, fixed, and also now zeros out the SWI decode values in the module header.
Moved include of 'yuvtabs.s' into the colour conversion code.
Deleted panic_exit, it did nothing useful but trace a value then exit, so it now just calls exit() like everyone else.
Removed excess call to find_image_dims(), this was needed just to get the workspace requirements when the JPEG had already been sized up by asm_find_image_dims() earlier. Side effect of removing the pilot JPEG code earlier is that this call can now only get to the JPEG code from a JPEG_ SWI. Changed to just pass the workspace requirements into 'c.PutScaled' and save a duplicate scan.
Fatal exits from the assembler huffman decoder now report a sensible error.
Trimmed out all the JPEG assessment code from 'c.PutScaled' and moved it into 'c.rojpeg' so the put scaled is only concerned with putting things scaled.
Sanitised the #includes a bit.
Fixed on last check of wp->save_mode looking at the wrong bits for the mode number.
Resolved all the warning in the genhdr/genyuvtabs/genpalette utilities by casting a bit harder.[A[B
Added new more descriptive error messages to the messages file (not currently used), and made the 'not supported by' ones consistent so the tokeniser might crunch the file a bit more.
In looks_like_jpeg() changed a bitwise to logical or.
Fixed longstanding problem of not being able to render JPEGs at a scale of less than 1/6 in any greyscale mode, because, err, there was no code to do it - only the colour case was checked for. Implemented for 8bpp grey and 32bpp grey (which gets dithered for other lower modes) by just converting the luma channel into an equally weighted RGB value or replicating it for 256 greys.
Tested in all 8 colour depths on a Risc PC using sampling ratios of 1x1; 2x1; 1x2; 2x2 of the IJG test image scaled in !Draw by 0.16.

Version 1.32. Tagged as 'SprExtend-1_32'
@
text
@d161 1
a161 1
#if 1
@


4.2
log
@Remove pilot JPEG code.
During the original development (referred to in the docs as Sprite Extend 2) JPEG data was briefly wrapped inside a sprite file before the JPEG_ swis were introduced. Within SpriteExtend some code still remained to fake a mode 20 sprite header with the JPEG output sized adjusted as though it was 4bpp, then later undo the faking by checking for a mode 20 sprite with is_it_jpeg set.
This version removes all of the code looking out for pilot JPEGs, and rationalises the fake sprite header to just report the true X/Y size.
Fix bug where r4 would be corrupted on exit from JPEG_PlotScaled if an error occurred, and generally rationalised the exit cases a bit more sensibly.
Made the JPEG_ swi despatch a bit more simple to follow.
Corrected a comment in the NSM_bpptable.
Deleted unused 'ecfspace' from the workspace.
Hid the 'macroword' from the C code as it's now an assembler only value.
Cut the initial comments from c/putscaled and placed in Docs.
Cut the debug tracing code (a notable %age) from c/putscaled and placed in tracing support file.
Simplified the entry to putscaled_compiler() now we don't have to look out for pilot format JPEGs within sprites any more.
Sprinkled in some block comments to make navigating the c/putscaled file a bit easier.

Version 1.30. Tagged as 'SprExtend-1_30'
@
text
@d183 1
a183 1
*    Exported C functions (called by the assembler part of SpriteExtend   *
a187 1
blitter putscaled_compiler(asm_workspace *wp, workspace *ws, workspace *ws_end, int gcol);
@


4.1
log
@Remove postprocessing step of C code.
Since 2001 this module has been using objasm, but still using the C compiler to output (via -S) assembly code which is then passed through 'sed' and included via GET into the assembler code.
Changed to compile the C code into object files, and use the linker to patch up the unresolved references - this has required some reordering of the C code to make sure static functions now appear in the object file, and some reordering of the header files to ensure both the module and the CFSI version still compile without conflicts.
Minor fix to 'swiv2', the label was in the wrong place for _swi() though it's not used in this module so didn't affect the _swix() case.
Makefile cut down a bit. Unixify some path names.
Test code moved to 'Test/c' directory.
Tested in both debug and non debug cases via softloaded module. Oddly, it's 4 bytes longer than the previous version.

Version 1.28. Tagged as 'SprExtend-1_28'
@
text
@d25 1
a25 1
*    Assembler Workspace declarations.                                    *
a28 9
/* These correspond to the assembler workspace. Changes to either must
be synchronised. */

/* variables in the assembler source */
#define ASMnbuffers 8
#undef ASMmultibuffer
#define ASMignorettr
#define ASMflagbit

d43 4
a46 2
typedef struct /* printer calibration table - definition internal to ColourTrans,
                  colour printer drivers. */
d52 4
a60 3
/* If idealblack==0, idealwhite==&ffffff00, postprocessSWI==0 then we can do the
colour calibration by doing thee lookups. Otherwise, you have to call ColourTrans for
each pixel. */
d62 9
d83 1
a83 1
  /*int    save_block;*/      /* #       0 */
a105 1
                      /* [ Version >= 047 */
a106 1
                      /* ] */
a116 5
  int    save_calladdr;   /* #       4               ; points to 'l_start' */
  int    save_calladdr2;  /* #       4               ; points to 'l_putword' */

/* UNUSED */  int    macroword;       /* #       4 */

d146 1
a146 2
/* Things moved in the assembler source so I can get at them,
without duplicating the whole of the rest of the assembler workspace... */
d148 1
a148 1
#ifdef ASMignorettr
d154 1
a169 4
#if 0
  char * jpeg_data;       /* #       4       ; the start of the JPEG data */
  int    jpeg_data_size;  /* #       4       ; length of JPEG data in bytes */
#endif
d174 2
d177 1
d181 6
a186 9
/* Notes about some of these:
macroword - used internally by the old compiler, to record essential characteristics
  of the compiled code. Used to see if existing code is OK.
  Bit 6 (transformed) - never set.
*/

extern void *realloc_delta(void *pointer, size_t size);
/* Like realloc, but a change in size rather than an absolute new size:
what the underlying RMA calls can most naturally support. */
a188 1
/* Used by SpriteExtend assembler code */
@

