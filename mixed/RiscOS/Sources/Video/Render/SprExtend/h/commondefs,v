head	4.10;
access;
symbols
	SprExtend-1_83:4.10
	SprExtend-1_82:4.10
	SprExtend-1_81:4.10
	SprExtend-1_80:4.10
	SprExtend-1_79:4.10
	SprExtend-1_78:4.10
	SprExtend-1_77:4.10
	SprExtend-1_76:4.10
	SprExtend-1_75:4.10
	SprExtend-1_74:4.10
	SprExtend-1_73:4.10
	SprExtend-1_72:4.10
	SprExtend-1_71-nocfsi:4.9
	SprExtend-1_71:4.8
	SprExtend-1_70-tracef:4.7
	SprExtend-1_70-headers:4.7
	SprExtend-1_70:4.6
	SprExtend-1_69:4.6
	SprExtend-1_68:4.6
	SprExtend-1_67:4.6
	SprExtend-1_66:4.6
	SprExtend-1_65:4.6
	SprExtend-1_64:4.6
	SprExtend-1_63:4.6
	SprExtend-1_62:4.6
	SprExtend-1_61:4.6
	SprExtend-1_60:4.6
	SprExtend-1_59:4.6
	SprExtend-1_58:4.6
	SprExtend-1_57:4.6
	SprExtend-1_56:4.6
	SprExtend-1_55:4.6
	SprExtend-1_54:4.5
	SprExtend-1_53:4.5
	SprExtend-1_52:4.5
	SprExtend-1_51:4.4
	SprExtend-1_50:4.4
	SprExtend-1_38-1_35_2_16:4.4.2.3
	SprExtend-1_49:4.4
	SprExtend-1_48:4.4
	SprExtend-1_47:4.4
	SprExtend-1_38-1_35_2_15:4.4.2.3
	SprExtend-1_46:4.4
	SprExtend-1_45:4.4
	SprExtend-1_44:4.4
	SprExtend-1_43:4.4
	SprExtend-1_42:4.4
	SprExtend-1_41:4.4
	SprExtend-1_38-1_35_2_14:4.4.2.3
	SprExtend-1_40:4.4
	SprExtend-1_38-1_35_2_13:4.4.2.3
	SprExtend-1_38-1_35_2_12:4.4.2.3
	SprExtend-1_38-1_35_2_11:4.4.2.3
	SprExtend-1_38-1_35_2_10:4.4.2.3
	SprExtend-1_38-1_35_2_9:4.4.2.3
	SprExtend-1_38-1_35_2_8:4.4.2.2
	SprExtend-1_39:4.4
	SprExtend-1_38-1_35_2_7:4.4.2.1
	SprExtend-1_38-1_35_2_6:4.4.2.1
	SprExtend-1_38-1_35_2_5:4.4
	SprExtend-1_38-1_35_2_4:4.4
	SprExtend-1_38-1_35_2_3:4.4
	SprExtend-1_38-1_35_2_2:4.4
	SprExtend-1_38-1_35_2_1:4.4
	MigrateIJG8b:4.4.0.2
	SprExtend-1_38:4.4
	SprExtend-1_37:4.4
	SprExtend-1_36:4.4
	SprExtend-1_35:4.4
	SprExtend-1_34:4.4
	SprExtend-1_33:4.4
	SprExtend-1_32:4.3
	SprExtend-1_31:4.2
	SprExtend-1_30:4.2
	SprExtend-1_29:4.1
	SprExtend-1_28:4.1;
locks; strict;
comment	@# @;


4.10
date	2016.05.21.14.03.51;	author rool;	state Exp;
branches;
next	4.9;
commitid	4BquZHousteH5m7z;

4.9
date	2016.05.21.13.48.19;	author rool;	state Exp;
branches;
next	4.8;
commitid	F2CfxJ1XTlg50m7z;

4.8
date	2016.05.21.13.44.42;	author rool;	state Exp;
branches;
next	4.7;
commitid	ZDqmsyNiMhv6Zl7z;

4.7
date	2016.05.21.13.32.23;	author rool;	state Exp;
branches;
next	4.6;
commitid	yTqS85yKh7k8Ul7z;

4.6
date	2013.10.07.00.39.12;	author jlee;	state Exp;
branches;
next	4.5;
commitid	HcUKy3PafwqToi8x;

4.5
date	2013.08.06.23.16.26;	author jlee;	state Exp;
branches;
next	4.4;
commitid	z9XOph7zDZQ2Ur0x;

4.4
date	2010.10.17.09.01.39;	author rsprowson;	state Exp;
branches
	4.4.2.1;
next	4.3;

4.3
date	2010.10.13.20.26.25;	author rsprowson;	state Exp;
branches;
next	4.2;

4.2
date	2010.09.29.21.05.33;	author rsprowson;	state Exp;
branches;
next	4.1;

4.1
date	2010.09.25.12.19.26;	author rsprowson;	state Exp;
branches;
next	;

4.4.2.1
date	2011.01.09.10.43.03;	author rsprowson;	state Exp;
branches;
next	4.4.2.2;

4.4.2.2
date	2011.01.13.21.12.24;	author rsprowson;	state Exp;
branches;
next	4.4.2.3;

4.4.2.3
date	2011.01.22.17.58.34;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Transcode arithmetics
Detail:
  Import of the raw coefficient Huffman entropy compressor elements of the IJG8d library.
  We don't need a full compressor (ala JCompMod) since there's never a need to go all the way through IDCT/upsampling/colour conversion only to reverse the whole process; it's sufficient only to collect up the raw coefficients and recompress them as a baseline JPEG.
  Two extra (temporary) dynamic areas are introduced, once to hold the raw coefficients and the other to act as a scratch file to make the JPEG in. See Doc/JPEGMmgr.
Admin:
  Submission for the JPEG bounty.

Version 1.72. Tagged as 'SprExtend-1_72'
@
text
@/* Copyright 2010 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* h.commondefs
   Don't endlessly define these everywhere
*/

#ifndef commondefs_h_
#define commondefs_h_

/**************************************************************************
*                                                                         *
*    Common definitions.                                                  *
*                                                                         *
**************************************************************************/

#define BOOL      int

#define UNUSED(k) (k)=(k)   /* When compiler warnings get in the way of quality */
#undef MAX
#define MAX(a,b)  ((a) > (b) ? (a) : (b))
#undef MIN
#define MIN(a,b)  ((a) < (b) ? (a) : (b))

#define CMTOINCH_NUM        254
#define CMTOINCH_DEN        100
#define STANDARDDPI         90

#define ERROR_NO_MEMORY     1
#define ERROR_BAD_JPEG      2
#define ERROR_FATAL         4
#define ERROR_UNSUPP_JPEG   8
#define ERROR_PROG_JPEG_ERR 16
#define ERROR_BAD_SPR_TYPE  32
#define ERROR_BAD_COLMAP    64

/**************************************************************************
*                                                                         *
*    Switches.                                                            *
*                                                                         *
**************************************************************************/

#undef  DEBUG               /* Define this (along with switch 'debug' in the assembler) to get the dprintf() output */
#define ASMjpeg             /* Defines which mirror the equivalent GBLL in the assembler code */
#undef  ASMdoublepixel_bodge

/**************************************************************************
*                                                                         *
*    Low-level debugging output.                                          *
*                                                                         *
**************************************************************************/

#ifdef DEBUG
 void do_printf(const char *, const char *, ...);
 void do_sprintf(char *, const char *, ...);
 void do_assert(const char *, int, BOOL, int, const char *);
 void do_comment(const char *);
 #define dprintf(args)    do_printf args
 #define dsprintf(args)   do_sprintf args
 #define assert(x, y)     do_assert(__FILE__, __LINE__, x, y, #x)
 #define comment(ws,text) do_comment(text)
 #define newline()        dprintf(("", "\n"));
 #define EXIT_OSERROR(e)  { dprintf(("", "error %08x %s at %s %d\n", e->errnum, e->errmess, __FILE__, __LINE__)); exit_oserror(e); }
#else
 #define dprintf(args)    /* Nothing */
 #define dsprintf(args)   /* Nothing */
 #define assert(x, y)     {if (!(x)) exit_erl(y, __LINE__);}
 #define comment(ws,text) /* Nothing */
 #define newline()        /* Nothing */
 #define EXIT_OSERROR     exit_oserror
#endif

/**************************************************************************
*                                                                         *
*    Assembler functions (provided in Sources.PutScaled)                  *
*                                                                         *
**************************************************************************/

extern void exit(int reason);
extern void exit_erl(int reason, int line);
extern void exit_oserror(_kernel_oserror *err);
typedef enum { AREA_COEF = 0, AREA_TRAN, AREA_WKSP0 } area_t;
extern void *area_resize(area_t, size_t *, size_t);
extern void area_remove(area_t);

#endif
@


4.9
log
@Removed CFSI-JPEG support
Detail:
  ChangeFSI now makes its own helper plugin which just calls the JPEG SWIs of the host OS, so there's no need for SpriteExtend to be complicated by this now.
Admin:
  Submission for the JPEG bounty.
  Tagged as SprExtend-1_71-nocfsi
@
text
@d93 3
@


4.8
log
@Import of IJG8d library sources
Detail:
  Using the decoder in "example.c" as a starting point, we try to follow that sequence more closely even if in our embedded implementation some of the functions don't do much.
  Uses the default colour backend for 32bpp BGR output for most of the unusual cases.
  The most common 2x2 subsampling case uses a custom merged upsampler and colour converter, with colour output directly in RISC OS format for the respective screen mode.
Admin:
  Submission for the JPEG bounty.

Version 1.71. Tagged as 'SprExtend-1_71'
@
text
@a54 1
#undef  DEBUG_TML           /* Extra output via HostFS too */
d65 4
d72 1
a73 2
 #define comment(ws,text) do_comment(text)
 #include "tracing.c"
d76 6
a81 15
 #ifdef SOURCE_IS_rojpeg
  #define CFSI
  #define dprintf(args)    /* Nothing */
  #define dsprintf(args)   /* Nothing */
  #define assert(x, y)     {if (!(x)) exit(y);}
  #define newline()        /* Nothing */
  #define comment(ws,text) /* Nothing */
 #else
  #define dprintf(args)    /* Nothing */
  #define dsprintf(args)   /* Nothing */
  #define assert(x, y)     {if (!(x)) exit_erl(y, __LINE__);}
  #define newline()        /* Nothing */
  #define comment(ws,text) /* Nothing */
  #define EXIT_OSERROR     exit_oserror
 #endif
@


4.7
log
@Update headers to stock copy
Detail:
  Added headers jerror, jmorecfg, jpegint from IJG8d. Removed jpegdata header.
  Bulk rename of structure members to match newer headers, some RISCOS-isms wrapped in #ifdef RISCOS, retained for the time being.
  Assembler code now gets cinfo member offsets from jhdr.s derived from the C header rather than keeping its own dangerous copy of the offsets.
Admin
  Note: this has broken CFSI-jpeg as it expects the error values to be at the top of cinfo.
  Submission for the JPEG bounty.
  Tagged as SprExtend-1_70-headers.
@
text
@d54 1
a54 1
#undef  DEBUG               /* Define this (along with switch 'debug' in the assembler) to get the tracef() output */
d61 32
@


4.6
log
@Add support for blended sprite & JPEG rendering - alpha masks, alpha channels, and translucency
Detail:
  This big set of changes adds support for the following user-facing APIs, as per ROL's specs:
  - OS_SpriteOp 52 (PutSpriteScaled) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - OS_SpriteOp 56 (PutSpriteTransformed) colour mapping, translucency blending, and alpha mask/alpha channel blending
  - JPEG_Plot[File]Scaled colourmapping & translucency blending
  - JPEG_Plot[File]Transformed colourmapping & translucency blending
  Sources/CFSI-JPEG, Sources/PutScaled:
  - Added exit_oserror exit routine for use by C code.
  - For SpriteExtend this allows the C code to cause OS_SpriteOp to exit with a given OS error block.
  - For CFSI-JPEG the error block is returned and ERROR_FATAL is returned to ChangeFSI.
  Sources/CSupport:
  - Add definitions for some error codes (matches existing definitions from h/commondefs)
  Sources/PutScaled:
  - Stripped out code to look for identity translation tables; now handled by preparettr routine in Sources/SprOp
  Sources/SWIs, Hdr/SprExtend:
  - JPEG SWIs updated to add support for alpha-blended and colour mapped JPEG rendering, following ROL's APIs
  Sources/SprExtend:
  - Stripped out lots of old build flags which haven't been touched in years.
  - Strip out assembler SprTrans code generator.
  - Add new definitions needed for blending & colour mapping.
  Sources/SprOp:
  - Updated PutScaled frontend to deal with blending and colour mapping.
  - Disabled code which was bodging coordinates when dealing with double-pixel modes - it seems to cause a few issues, and the code generator mostly had proper double-pixel support anyway.
  - Translation table verification and fiddling code rewritten and consolidated into the preparettr routine. C code is now explicitly told what table type is in use and whether it can safely be ignored in favour of using the sprite palette.
  - Removed code from CheckSpriteArea which was deliberately throwing an error upon seeing alpha-masked sprites; I think the bug that was hiding has been fixed now
  Sources/SprTrans
  - Removed the assembler version of the code generator.
  - Updated to add support for blending and colour mapping
  c/PutScaled:
  - Old test code removed.
  - Updated to add support for blending & colour mapping
  - Assorted bugs fixed.
  - A few extra architecture-specific optimisations added.
  - Some workspace setup code moved to c/asmcore to allow sharing with SprTrans.
  c/asmcore:
  - Register allocation code rewritten. Instead of allocating on a first-come, first-served basis, the code now builds a list of which logical registers are needed (and which 'banks' they fall into) and then attempts to allocate them in a more intelligent manner. It still has some failings (e.g. reusing R12 as a general purpose register is currently impossible) but it's a lot more flexible and reliable than the old code.
  - Core pixel transformation code updated to add support for blending & colour mapping
  - Added some extra architecture-specific optimisations
  c/rojpeg:
  - JPEG option handling updated to avoid trashing any colour mapping descriptor that may have been passed in
  c/sprtrans:
  - Updated to add support for blending & colour mapping
  c/tracing:
  - Debug assert messages now show filename as well as line number
  h/commondefs:
  - Removed old #define's that related to old assembler switches.
  h/putscaled:
  - Workspace definition updated to match assembler version.
  - SprTrans stack workspace structure moved here from c/sprtrans
Admin:
  Tested on BB-xM plotting all major sprite & JPEG types into all modes with all major options


Version 1.55. Tagged as 'SprExtend-1_55'
@
text
@a28 2
#define FALSE     0         /* Values of boolean */
#define TRUE      (!FALSE)
d31 4
@


4.5
log
@Add support for new sprite types & screen modes
Detail:
  Makefile - Updated to fix a couple of dependency issues and to make c/asmcore the main C file, not c/putscaled
  Sources/PutScaled - Add a utility routine that's used by the C code to get information about pixel formats
  Sources/SprAdjSize - Add support for wide masks & RISC OS 5 style sprite mode words
  Sources/SprExtend - Tidy up workspace by removing lots of unused bits and moving other bits within sight of the C code. Add flag to control whether C or assembler version of SprTrans is used. Query kernel for ECFYOffset/ECHShift locations instead of using hardcoded values in putscaled code. Add fix for garbage debug strings in softloaded debug versions of the module.
  Sources/SprOp - Add support for wide masks & RISC OS 5 style sprite mode words. Update makepalette16bpp to cope with all the new 16bpp modes. Flag_* -> ModeFlag_* renaming. Move some translation table handling code into a new routine, 'preparettr'. Update checktrans/converttrans to deal with new pixel formats.
  Sources/SprTrans - If the C version of SprTrans is enabled, disable all of these assembler bits except for the outer loop which steps over each row of the screen
  Sources/jdcolor - Updated to deal with new pixel formats. 16bpp conversion code split off into new file, Sources/jdcolor16.
  Sources/jdcolor16 - New file containing the guts of the YUV -> 16bpp conversion code. Gets included multiple times with different options to generate the different conversion routines (code is too big for a macro).
  c/asmcore - New file containing lots of common code ripped out of c/PutScaled - e.g. workspace definition, main functions for register assignment & instruction generation, and code for pixel format conversion. Pixel format conversion code rewritten to cope with new pixel formats, and code buffer key word generation rewritten to fix a couple of bugs (e.g. some issues with dithering options were observed)
  c/PutScaled - Ripped out lots of code that's now in c/asmcore. Now just deals with things that are PutScaled-specific, e.g. main plotter loop containing pixel read/write code. Code extended to cope with new pixel formats
  c/rojpeg, h/jinclude, h/jpegdata - Code extended to cope with new 16bpp conversion routines
  c/sprtrans - New C implementation of the core per-row transformed sprite plotting code generator. Allows reuse of the extensive pixel conversion code in c/asmcore, and allows for better code generation than the assembler original.
  h/putscaled - Worksapce definition updated to match assembler version
Admin:
  Tested on BB-xM, plotting lots of different sprites in lots of different modes
  Plotting of wide mask sprites not supported yet
  C version of YUV -> 16bpp code currently only deals with traditional &BGR 555 pixel format - code is aware of this and will do conversion to desired format if applicable (although quality may be reduced)
  Part of an implementation of the Extended Framebuffer Format spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification


Version 1.52. Tagged as 'SprExtend-1_52'
@
text
@d54 2
a55 9
#undef  TEST_DEBUG          /* Used to validate the debug tracing facilities */
#undef  ASMmultibuffer      /* Defines which mirror the equivalent GBLL in the assembler code */
#define ASMnbuffers         8
#define ASMignore_ttr
#define ASMflagbit
#define ASMwidetrans
#define ASMjpeg

//#define DEBUG
d65 1
@


4.4
log
@Change memory management strategy.
There's no need for the C code to know which pool of memory it's using, so simplify it to just use malloc() and realloc(), the assembler implementation can then select whether the RMA or a dynamic area is in use based on the 'dynamicarea' switch.
Be more careful about area_number when it is zero, since we use that to denote the area is not yet set up but area zero is a valid dynamic area number!
Trim out some unused workspace.
Variable ccompiler_errptr had '# 0' bytes assigned, resulting in writes off the end of the workspace.
Retire DUMPVAL[N]() macro.
Remove M_SOF9 as one of the SOF markers accepted - this is allocated to arithmetic JPEGs which aren't currently supported.
Save a few words by: changing arbitrary constants (eg. safety margins) to be a power of two so they can be register immediates; numerous loads and stores of R12 relative variables changed to not use ADRL; jpeg_fetchroutine similarly simplified.

Version 1.33. Tagged as 'SprExtend-1_33'
@
text
@d62 2
@


4.4.2.1
log
@Create assembler equivalents of C colour conversions, approx 10% speed up.
Add new switch ASMCOLOR to select which to use, C or assembler.
Remove FILE_ exit trace concept, just use __FILE__ instead in exit_erl.
Add some comments to exit_erl and friends.
A few bits of cinfo setup moved into start_pass_huff_decoder() or eliminated.
Bumped up the precision of SCALE_BITS in the C colour handling so FIX() uses more bits of an int.
Deleted the unused remenants of light dithering in the 8bpp colour converter - saves a few cycles.
colour_convert_8 and colour_convert_16 no longer save entry registers the C compiler doesn't care about.
Update genyuvtabs to EXPORT the table bases.
Split out the compilation of IJG files as separate objects in the make file, rather than including them from within rojpeg, which is itself included from putscaled.

Version 1.38, 1.35.2.6. Tagged as 'SprExtend-1_38-1_35_2_6'
@
text
@a63 47
*    Low-level debugging output.                                          *
*                                                                         *
**************************************************************************/

#ifdef DEBUG
#define tracef(args)     do_sprintf(0, args)
#define assert(x, y)     do_assert(__LINE__, x, y, NULL)
#define newline()        tracef("\n");
#define comment(ws,text) do_comment(text)
#define IFDEBUG(a) a
#include "tracing.c"
#else
#define tracef(args)     /* Nothing */
#define assert(x, y)     {if (!(x)) exit_erl(y, __LINE__, __FILE__);}
#define newline()        /* Nothing */
#define comment(ws,text) /* Nothing */
#define IFDEBUG(a)       /* Nothing */
#endif

/* Macros to simplify using the error and trace message stuff */
/* The first parameter is generally cinfo->emethods, left undisturbed in
   c.jrdjfif but not used here. */
#define ERREXIT(emeth,msg) {tracef("Error:"); tracef(msg); newline(); EXIT}
#define ERREXIT1(emeth,msg,p1) {tracef("Error:"); tracef(msg _ p1); newline(); EXIT}
#define ERREXIT2(emeth,msg,p1,p2) {tracef("Error:"); tracef(msg _ p1 _ p2); newline(); EXIT}
#define ERREXIT3(emeth,msg,p1,p2,p3) {tracef("Error:"); tracef(msg _ p1 _ p2 _ p3); newline(); EXIT}
#define ERREXIT4(emeth,msg,p1,p2,p3,p4) {tracef("Error:"); tracef(msg _ p1 _ p2 _ p3 _ p4); newline(); EXIT}
#ifdef DEBUG
  #define TRACEMS(emeth,lvl,msg) {do_sprintf(0, msg); newline();}
  #define TRACEMS1(emeth,lvl,msg,p1) {do_sprintf(0, msg,p1); newline();}
  #define TRACEMS2(emeth,lvl,msg,p1,p2) {do_sprintf(0, msg,p1,p2); newline();}
  #define TRACEMS3(emeth,lvl,msg,p1,p2,p3) {do_sprintf(0, msg,p1,p2,p3); newline();}
  #define TRACEMS4(emeth,lvl,msg,p1,p2,p3,p4) {do_sprintf(0, msg,p1,p2,p3,p4); newline();}
  #define TRACEMS8(emeth,lvl,msg,p1,p2,p3,p4,p5,p6,p7,p8) {do_sprintf(0, msg,p1,p2,p3,p4,p5,p6,p7,p8); newline();}
  #define EXIT exit_erl(ERROR_BAD_JPEG, __LINE__, __FILE__);
#else
  #define TRACEMS(emeth,lvl,msg)
  #define TRACEMS1(emeth,lvl,msg,p1)
  #define TRACEMS2(emeth,lvl,msg,p1,p2)
  #define TRACEMS3(emeth,lvl,msg,p1,p2,p3)
  #define TRACEMS4(emeth,lvl,msg,p1,p2,p3,p4)
  #define TRACEMS8(emeth,lvl,msg,p1,p2,p3,p4,p5,p6,p7,p8)
  #define EXIT exit(ERROR_BAD_JPEG);
#endif

/**************************************************************************
*                                                                         *
d69 1
a69 1
extern void exit_erl(int reason, int line, const char *file);
@


4.4.2.2
log
@Use USAT in 150 occurrences of colour clamping for ARMv6 and later.
Some IDCT renaming.
Shock addition of some documentation on how it all works.
Mirror fix from 1.39 on the trunk.
Debug
 Made DEBUG version compile again, earlier header shuffling was preventing it.
 Replaced the ' _ ' method of variadic macro emulation with more familiar double brackets for tracef().
 Eliminated IFDEBUG macro and just used #ifdef DEBUG/#endif or tracef() directly.
 Don't bother passing the line number and file name to exit() when in the non DEBUG case.

Version 1.38, 1.35.2.8. Tagged as 'SprExtend-1_38-1_35_2_8'
@
text
@d69 3
a71 3
#define tracef(args)     do_dprintf args
#define assert(x, y)     do_assert(__LINE__, x, y, __FILE__)
#define newline()        do_dprintf("\n");
d73 2
d77 1
a77 1
#define assert(x, y)     {if (!(x)) exit(y);}
d80 1
d83 8
a90 12
/* The tracing functions */
extern void do_dprintf(char *format, ...);
extern void do_assert(int line, BOOL arg, int error, char *describe);
extern void do_comment(char *text);
extern char *whether(BOOL p);

/* Macros to simplify using the error and trace message stuff (first parameter, cinfog->emethods, unused) */
#define ERREXIT(emeth,msg) {tracef(("Error:")); tracef((msg)); newline(); EXIT}
#define ERREXIT1(emeth,msg,p1) {tracef(("Error:")); tracef((msg, p1)); newline(); EXIT}
#define ERREXIT2(emeth,msg,p1,p2) {tracef(("Error:")); tracef((msg, p1, p2)); newline(); EXIT}
#define ERREXIT3(emeth,msg,p1,p2,p3) {tracef(("Error:")); tracef((msg, p1, p2, p3)); newline(); EXIT}
#define ERREXIT4(emeth,msg,p1,p2,p3,p4) {tracef(("Error:")); tracef((msg, p1, p2, p3, p4)); newline(); EXIT}
d92 6
a97 6
  #define TRACEMS(emeth,lvl,msg) {do_dprintf(msg); newline();}
  #define TRACEMS1(emeth,lvl,msg,p1) {do_dprintf(msg,p1); newline();}
  #define TRACEMS2(emeth,lvl,msg,p1,p2) {do_dprintf(msg,p1,p2); newline();}
  #define TRACEMS3(emeth,lvl,msg,p1,p2,p3) {do_dprintf(msg,p1,p2,p3); newline();}
  #define TRACEMS4(emeth,lvl,msg,p1,p2,p3,p4) {do_dprintf(msg,p1,p2,p3,p4); newline();}
  #define TRACEMS8(emeth,lvl,msg,p1,p2,p3,p4,p5,p6,p7,p8) {do_dprintf(msg,p1,p2,p3,p4,p5,p6,p7,p8); newline();}
@


4.4.2.3
log
@New jerror.h taken from IJG8b.
Swap to using JERR_ numbers, deleted E_ numbers.
Modify genjhdr to pass some defines to the assembler code, so jdcolor can clarify use of DCTSIZE and DCTSIZE2.
Added chart of possible subsampling ratios to documentation.

Version 1.38, 1.35.2.9. Tagged as 'SprExtend-1_38-1_35_2_9'
@
text
@d28 3
a30 4
#define FALSE               0
#define TRUE                (!FALSE)
typedef int boolean;
#define HAVE_BOOLEAN        /* So JPEG headers don't redefine it */
d54 1
a54 1
#undef  DEBUG_TEST          /* Used to validate the debug tracing facilities */
d69 4
a72 4
#define tracef(args)        do_dprintf args
#define assert(x, y)        do_assert(__LINE__, x, y, __FILE__)
#define newline()           do_dprintf("\n");
#define comment(ws,text)    do_comment(text)
d74 4
a77 4
#define tracef(args)        /* Nothing */
#define assert(x, y)        {if (!(x)) exit(y);}
#define newline()           /* Nothing */
#define comment(ws,text)    /* Nothing */
d82 1
a82 1
extern void do_assert(int line, boolean arg, int error, char *describe);
d84 31
a114 1
extern char *whether(boolean p);
a115 1
/* Fatal returns (in Sources.PutScaled) */
@


4.3
log
@Paper and fill some JPEG cracks.
The exit_c function was repeatedly being called with the line number argument and error code the wrong way round and since only bits 0-2 of the error code are inspected on exit any fatal exits from the ported JPEG library code would either report the wrong error or fail silently (depending on the line number) - example a 12 bits per sample JPEG would be rendered without fault into a screen full of random memory garbage.
Assembling/compiling with the 'jpeg' switch off didn't work, fixed, and also now zeros out the SWI decode values in the module header.
Moved include of 'yuvtabs.s' into the colour conversion code.
Deleted panic_exit, it did nothing useful but trace a value then exit, so it now just calls exit() like everyone else.
Removed excess call to find_image_dims(), this was needed just to get the workspace requirements when the JPEG had already been sized up by asm_find_image_dims() earlier. Side effect of removing the pilot JPEG code earlier is that this call can now only get to the JPEG code from a JPEG_ SWI. Changed to just pass the workspace requirements into 'c.PutScaled' and save a duplicate scan.
Fatal exits from the assembler huffman decoder now report a sensible error.
Trimmed out all the JPEG assessment code from 'c.PutScaled' and moved it into 'c.rojpeg' so the put scaled is only concerned with putting things scaled.
Sanitised the #includes a bit.
Fixed on last check of wp->save_mode looking at the wrong bits for the mode number.
Resolved all the warning in the genhdr/genyuvtabs/genpalette utilities by casting a bit harder.[A[B
Added new more descriptive error messages to the messages file (not currently used), and made the 'not supported by' ones consistent so the tokeniser might crunch the file a bit more.
In looks_like_jpeg() changed a bitwise to logical or.
Fixed longstanding problem of not being able to render JPEGs at a scale of less than 1/6 in any greyscale mode, because, err, there was no code to do it - only the colour case was checked for. Implemented for 8bpp grey and 32bpp grey (which gets dithered for other lower modes) by just converting the luma channel into an equally weighted RGB value or replicating it for 256 greys.
Tested in all 8 colour depths on a Risc PC using sampling ratios of 1x1; 2x1; 1x2; 2x2 of the IJG test image scaled in !Draw by 0.16.

Version 1.32. Tagged as 'SprExtend-1_32'
@
text
@d34 4
a54 1
#define DYNAMIC_AREA        /* Otherwise uses the RMA */
a67 2
extern void *realloc_delta(void *pointer, size_t size);
extern int create_dynamic_area(int size);
@


4.2
log
@Remove pilot JPEG code.
During the original development (referred to in the docs as Sprite Extend 2) JPEG data was briefly wrapped inside a sprite file before the JPEG_ swis were introduced. Within SpriteExtend some code still remained to fake a mode 20 sprite header with the JPEG output sized adjusted as though it was 4bpp, then later undo the faking by checking for a mode 20 sprite with is_it_jpeg set.
This version removes all of the code looking out for pilot JPEGs, and rationalises the fake sprite header to just report the true X/Y size.
Fix bug where r4 would be corrupted on exit from JPEG_PlotScaled if an error occurred, and generally rationalised the exit cases a bit more sensibly.
Made the JPEG_ swi despatch a bit more simple to follow.
Corrected a comment in the NSM_bpptable.
Deleted unused 'ecfspace' from the workspace.
Hid the 'macroword' from the C code as it's now an assembler only value.
Cut the initial comments from c/putscaled and placed in Docs.
Cut the debug tracing code (a notable %age) from c/putscaled and placed in tracing support file.
Simplified the entry to putscaled_compiler() now we don't have to look out for pilot format JPEGs within sprites any more.
Sprinkled in some block comments to make navigating the c/putscaled file a bit easier.

Version 1.30. Tagged as 'SprExtend-1_30'
@
text
@d22 36
a57 3
#define BOOL int
#define FALSE   0               /* values of boolean */
#define TRUE    1
d67 2
a68 1
extern void exit_c(int reason, int error);
@


4.1
log
@Remove postprocessing step of C code.
Since 2001 this module has been using objasm, but still using the C compiler to output (via -S) assembly code which is then passed through 'sed' and included via GET into the assembler code.
Changed to compile the C code into object files, and use the linker to patch up the unresolved references - this has required some reordering of the C code to make sure static functions now appear in the object file, and some reordering of the header files to ensure both the module and the CFSI version still compile without conflicts.
Minor fix to 'swiv2', the label was in the wrong place for _swi() though it's not used in this module so didn't affect the _swix() case.
Makefile cut down a bit. Unixify some path names.
Test code moved to 'Test/c' directory.
Tested in both debug and non debug cases via softloaded module. Oddly, it's 4 bytes longer than the previous version.

Version 1.28. Tagged as 'SprExtend-1_28'
@
text
@d26 10
@

