head	4.2;
access;
symbols
	SprExtend-1_83:4.2
	SprExtend-1_82:4.2
	SprExtend-1_81:4.2
	SprExtend-1_80:4.2
	SprExtend-1_79:4.2
	SprExtend-1_78:4.2
	SprExtend-1_77:4.2
	SprExtend-1_76:4.2
	SprExtend-1_75:4.2
	SprExtend-1_74:4.2
	SprExtend-1_73:4.2
	SprExtend-1_72:4.2
	SprExtend-1_71-nocfsi:4.2
	SprExtend-1_71:4.2
	SprExtend-1_70-tracef:4.1
	SprExtend-1_70-headers:4.1
	SprExtend-1_38-1_35_2_16:1.1.2.8
	SprExtend-1_38-1_35_2_15:1.1.2.8
	SprExtend-1_38-1_35_2_14:1.1.2.8
	SprExtend-1_38-1_35_2_13:1.1.2.7
	SprExtend-1_38-1_35_2_12:1.1.2.6
	SprExtend-1_38-1_35_2_11:1.1.2.5
	SprExtend-1_38-1_35_2_10:1.1.2.5
	SprExtend-1_38-1_35_2_9:1.1.2.4
	SprExtend-1_38-1_35_2_8:1.1.2.3
	SprExtend-1_38-1_35_2_7:1.1.2.2
	SprExtend-1_38-1_35_2_6:1.1.2.1
	MigrateIJG8b:1.1.0.2;
locks; strict;
comment	@# @;


4.2
date	2016.05.21.13.44.42;	author rool;	state Exp;
branches;
next	4.1;
commitid	ZDqmsyNiMhv6Zl7z;

4.1
date	2016.05.21.13.32.23;	author rool;	state Exp;
branches;
next	1.1;
commitid	yTqS85yKh7k8Ul7z;

1.1
date	2011.01.09.10.43.04;	author rsprowson;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.01.09.10.43.04;	author rsprowson;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2011.01.09.10.56.48;	author rsprowson;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2011.01.13.21.12.24;	author rsprowson;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2011.01.22.17.58.34;	author rsprowson;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2011.01.22.18.01.53;	author rsprowson;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2011.01.29.10.05.59;	author rsprowson;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2011.02.05.09.56.57;	author rsprowson;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2011.02.15.20.58.06;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Import of IJG8d library sources
Detail:
  Using the decoder in "example.c" as a starting point, we try to follow that sequence more closely even if in our embedded implementation some of the functions don't do much.
  Uses the default colour backend for 32bpp BGR output for most of the unusual cases.
  The most common 2x2 subsampling case uses a custom merged upsampler and colour converter, with colour output directly in RISC OS format for the respective screen mode.
Admin:
  Submission for the JPEG bounty.

Version 1.71. Tagged as 'SprExtend-1_71'
@
text
@/*
 * jpegint.h
 *
 * Copyright (C) 1991-1997, Thomas G. Lane.
 * Modified 1997-2011 by Guido Vollbeding.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides common declarations for the various JPEG modules.
 * These declarations are considered internal to the JPEG library; most
 * applications using the library shouldn't need to include this file.
 */


/* Declarations for both compression & decompression */

typedef enum {			/* Operating modes for buffer controllers */
	JBUF_PASS_THRU,		/* Plain stripwise operation */
	/* Remaining modes require a full-image buffer to have been created */
	JBUF_SAVE_SOURCE,	/* Run source subobject only, save output */
	JBUF_CRANK_DEST,	/* Run dest subobject only, using saved data */
	JBUF_SAVE_AND_PASS	/* Run both subobjects, save output */
} J_BUF_MODE;

/* Values of global_state field (jdapi.c has some dependencies on ordering!) */
#define CSTATE_START	100	/* after create_compress */
#define CSTATE_SCANNING	101	/* start_compress done, write_scanlines OK */
#define CSTATE_RAW_OK	102	/* start_compress done, write_raw_data OK */
#define CSTATE_WRCOEFS	103	/* jpeg_write_coefficients done */
#define DSTATE_START	200	/* after create_decompress */
#define DSTATE_INHEADER	201	/* reading header markers, no SOS yet */
#define DSTATE_READY	202	/* found SOS, ready for start_decompress */
#define DSTATE_PRELOAD	203	/* reading multiscan file in start_decompress*/
#define DSTATE_PRESCAN	204	/* performing dummy pass for 2-pass quant */
#define DSTATE_SCANNING	205	/* start_decompress done, read_scanlines OK */
#define DSTATE_RAW_OK	206	/* start_decompress done, read_raw_data OK */
#define DSTATE_BUFIMAGE	207	/* expecting jpeg_start_output */
#define DSTATE_BUFPOST	208	/* looking for SOS/EOI in jpeg_finish_output */
#define DSTATE_RDCOEFS	209	/* reading file in jpeg_read_coefficients */
#define DSTATE_STOPPING	210	/* looking for EOI in jpeg_finish_decompress */


/* Declarations for compression modules */

/* Master control module */
struct jpeg_comp_master {
  JMETHOD(void, prepare_for_pass, (j_compress_ptr cinfo));
  JMETHOD(void, pass_startup, (j_compress_ptr cinfo));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean call_pass_startup;	/* True if pass_startup must be called */
  boolean is_last_pass;		/* True during last pass */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_c_main_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_compress_ptr cinfo,
			       JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			       JDIMENSION in_rows_avail));
};

/* Compression preprocessing (downsampling input buffer control) */
struct jpeg_c_prep_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, pre_process_data, (j_compress_ptr cinfo,
				   JSAMPARRAY input_buf,
				   JDIMENSION *in_row_ctr,
				   JDIMENSION in_rows_avail,
				   JSAMPIMAGE output_buf,
				   JDIMENSION *out_row_group_ctr,
				   JDIMENSION out_row_groups_avail));
};

/* Coefficient buffer control */
struct jpeg_c_coef_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(boolean, compress_data, (j_compress_ptr cinfo,
				   JSAMPIMAGE input_buf));
};

/* Colorspace conversion */
struct jpeg_color_converter {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, color_convert, (j_compress_ptr cinfo,
				JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
				JDIMENSION output_row, int num_rows));
};

/* Downsampling */
struct jpeg_downsampler {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, downsample, (j_compress_ptr cinfo,
			     JSAMPIMAGE input_buf, JDIMENSION in_row_index,
			     JSAMPIMAGE output_buf,
			     JDIMENSION out_row_group_index));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Forward DCT (also controls coefficient quantization) */
typedef JMETHOD(void, forward_DCT_ptr,
		(j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
		 JDIMENSION start_row, JDIMENSION start_col,
		 JDIMENSION num_blocks));

struct jpeg_forward_dct {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  /* It is useful to allow each component to have a separate FDCT method. */
  forward_DCT_ptr forward_DCT[MAX_COMPONENTS];
};

/* Entropy encoding */
struct jpeg_entropy_encoder {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, boolean gather_statistics));
  JMETHOD(boolean, encode_mcu, (j_compress_ptr cinfo, JBLOCKROW *MCU_data));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
};

/* Marker writing */
struct jpeg_marker_writer {
  JMETHOD(void, write_file_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_frame_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_scan_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_file_trailer, (j_compress_ptr cinfo));
  JMETHOD(void, write_tables_only, (j_compress_ptr cinfo));
  /* These routines are exported to allow insertion of extra markers */
  /* Probably only COM and APPn markers should be written this way */
  JMETHOD(void, write_marker_header, (j_compress_ptr cinfo, int marker,
				      unsigned int datalen));
  JMETHOD(void, write_marker_byte, (j_compress_ptr cinfo, int val));
};


/* Declarations for decompression modules */

/* Master control module */
struct jpeg_decomp_master {
  JMETHOD(void, prepare_for_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_output_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean is_dummy_pass;	/* True during 1st pass for 2-pass quant */
#ifdef RISCOS /* Decision made public too */
  boolean using_merged_upsample;
#endif
};

/* Input control module */
struct jpeg_input_controller {
  JMETHOD(int, consume_input, (j_decompress_ptr cinfo));
  JMETHOD(void, reset_input_controller, (j_decompress_ptr cinfo));
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_input_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean has_multiple_scans;	/* True if file has multiple scans */
  boolean eoi_reached;		/* True when EOI has been consumed */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_d_main_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_decompress_ptr cinfo,
			       JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			       JDIMENSION out_rows_avail));
};

/* Coefficient buffer control */
struct jpeg_d_coef_controller {
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, consume_data, (j_decompress_ptr cinfo));
  JMETHOD(void, start_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, decompress_data, (j_decompress_ptr cinfo,
				 JSAMPIMAGE output_buf));
  /* Pointer to array of coefficient virtual arrays, or NULL if none */
  jvirt_barray_ptr *coef_arrays;
};

/* Decompression postprocessing (color quantization buffer control) */
struct jpeg_d_post_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, post_process_data, (j_decompress_ptr cinfo,
				    JSAMPIMAGE input_buf,
				    JDIMENSION *in_row_group_ctr,
				    JDIMENSION in_row_groups_avail,
				    JSAMPARRAY output_buf,
				    JDIMENSION *out_row_ctr,
				    JDIMENSION out_rows_avail));
};

/* Marker reading & parsing */
struct jpeg_marker_reader {
  JMETHOD(void, reset_marker_reader, (j_decompress_ptr cinfo));
  /* Read markers until SOS or EOI.
   * Returns same codes as are defined for jpeg_consume_input:
   * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
   */
  JMETHOD(int, read_markers, (j_decompress_ptr cinfo));
  /* Read a restart marker --- exported for use by entropy decoder only */
  jpeg_marker_parser_method read_restart_marker;

  /* State of marker reader --- nominally internal, but applications
   * supplying COM or APPn handlers might like to know the state.
   */
  boolean saw_SOI;		/* found SOI? */
  boolean saw_SOF;		/* found SOF? */
  int next_restart_num;		/* next restart number expected (0-7) */
  unsigned int discarded_bytes;	/* # of bytes skipped looking for a marker */
};

/* Entropy decoding */
struct jpeg_entropy_decoder {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(boolean, decode_mcu, (j_decompress_ptr cinfo,
				JBLOCKROW *MCU_data));
};

/* Inverse DCT (also performs dequantization) */
typedef JMETHOD(void, inverse_DCT_method_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col));

struct jpeg_inverse_dct {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  /* It is useful to allow each component to have a separate IDCT method. */
  inverse_DCT_method_ptr inverse_DCT[MAX_COMPONENTS];
};

/* Upsampling (note that upsampler must also call color converter) */
struct jpeg_upsampler {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, upsample, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf,
			   JDIMENSION *in_row_group_ctr,
			   JDIMENSION in_row_groups_avail,
			   JSAMPARRAY output_buf,
			   JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Colorspace conversion */
struct jpeg_color_deconverter {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, color_convert, (j_decompress_ptr cinfo,
				JSAMPIMAGE input_buf, JDIMENSION input_row,
				JSAMPARRAY output_buf, int num_rows));
};

/* Color quantization or color precision reduction */
struct jpeg_color_quantizer {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, boolean is_pre_scan));
  JMETHOD(void, color_quantize, (j_decompress_ptr cinfo,
				 JSAMPARRAY input_buf, JSAMPARRAY output_buf,
				 int num_rows));
  JMETHOD(void, finish_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, new_color_map, (j_decompress_ptr cinfo));
};


/* Miscellaneous useful macros */

#undef MAX
#define MAX(a,b)	((a) > (b) ? (a) : (b))
#undef MIN
#define MIN(a,b)	((a) < (b) ? (a) : (b))


/* We assume that right shift corresponds to signed division by 2 with
 * rounding towards minus infinity.  This is correct for typical "arithmetic
 * shift" instructions that shift in copies of the sign bit.  But some
 * C compilers implement >> with an unsigned shift.  For these machines you
 * must define RIGHT_SHIFT_IS_UNSIGNED.
 * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.
 * It is only applied with constant shift counts.  SHIFT_TEMPS must be
 * included in the variables of any routine using RIGHT_SHIFT.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define SHIFT_TEMPS	INT32 shift_temp;
#define RIGHT_SHIFT(x,shft)  \
	((shift_temp = (x)) < 0 ? \
	 (shift_temp >> (shft)) | ((~((INT32) 0)) << (32-(shft))) : \
	 (shift_temp >> (shft)))
#else
#define SHIFT_TEMPS
#define RIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jinit_compress_master	jICompress
#define jinit_c_master_control	jICMaster
#define jinit_c_main_controller	jICMainC
#define jinit_c_prep_controller	jICPrepC
#define jinit_c_coef_controller	jICCoefC
#define jinit_color_converter	jICColor
#define jinit_downsampler	jIDownsampler
#define jinit_forward_dct	jIFDCT
#define jinit_huff_encoder	jIHEncoder
#define jinit_arith_encoder	jIAEncoder
#define jinit_marker_writer	jIMWriter
#define jinit_master_decompress	jIDMaster
#define jinit_d_main_controller	jIDMainC
#define jinit_d_coef_controller	jIDCoefC
#define jinit_d_post_controller	jIDPostC
#define jinit_input_controller	jIInCtlr
#define jinit_marker_reader	jIMReader
#define jinit_huff_decoder	jIHDecoder
#define jinit_arith_decoder	jIADecoder
#define jinit_inverse_dct	jIIDCT
#define jinit_upsampler		jIUpsampler
#define jinit_color_deconverter	jIDColor
#define jinit_1pass_quantizer	jI1Quant
#define jinit_2pass_quantizer	jI2Quant
#define jinit_merged_upsampler	jIMUpsampler
#define jinit_memory_mgr	jIMemMgr
#define jdiv_round_up		jDivRound
#define jround_up		jRound
#define jzero_far		jZeroFar
#define jcopy_sample_rows	jCopySamples
#define jcopy_block_row		jCopyBlocks
#define jpeg_zigzag_order	jZIGTable
#define jpeg_natural_order	jZAGTable
#define jpeg_natural_order7	jZAG7Table
#define jpeg_natural_order6	jZAG6Table
#define jpeg_natural_order5	jZAG5Table
#define jpeg_natural_order4	jZAG4Table
#define jpeg_natural_order3	jZAG3Table
#define jpeg_natural_order2	jZAG2Table
#define jpeg_aritab		jAriTab
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays
 * and coefficient-block arrays.  This won't work on 80x86 because the arrays
 * are FAR and we're assuming a small-pointer memory model.  However, some
 * DOS compilers provide far-pointer versions of memcpy() and memset() even
 * in the small-model libraries.  These will be used if USE_FMEM is defined.
 * Otherwise, the routines in jutils.c do it the hard way.
 */

#ifndef NEED_FAR_POINTERS	/* normal case, same as regular macro */
#define FMEMZERO(target,size)	MEMZERO(target,size)
#else				/* 80x86 case */
#ifdef USE_FMEM
#define FMEMZERO(target,size)	_fmemset((void FAR *)(target), 0, (size_t)(size))
#else
EXTERN(void) jzero_far JPP((void FAR * target, size_t bytestozero));
#define FMEMZERO(target,size)	jzero_far(target, size)
#endif
#endif


/* Compression module initialization routines */
EXTERN(void) jinit_compress_master JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_c_master_control JPP((j_compress_ptr cinfo,
					 boolean transcode_only));
EXTERN(void) jinit_c_main_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_c_prep_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_c_coef_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_color_converter JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_downsampler JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_forward_dct JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_huff_encoder JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_arith_encoder JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_marker_writer JPP((j_compress_ptr cinfo));
/* Decompression module initialization routines */
EXTERN(void) jinit_master_decompress JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_d_main_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_d_coef_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_d_post_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_input_controller JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_marker_reader JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_huff_decoder JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_arith_decoder JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_inverse_dct JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_upsampler JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_color_deconverter JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_1pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_2pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_merged_upsampler JPP((j_decompress_ptr cinfo));
/* Memory manager initialization */
EXTERN(void) jinit_memory_mgr JPP((j_common_ptr cinfo));

/* Utility routines in jutils.c */
EXTERN(long) jdiv_round_up JPP((long a, long b));
EXTERN(long) jround_up JPP((long a, long b));
EXTERN(void) jcopy_sample_rows JPP((JSAMPARRAY input_array, int source_row,
				    JSAMPARRAY output_array, int dest_row,
				    int num_rows, JDIMENSION num_cols));
EXTERN(void) jcopy_block_row JPP((JBLOCKROW input_row, JBLOCKROW output_row,
				  JDIMENSION num_blocks));
/* Constant tables in jutils.c */
#if 0				/* This table is not actually needed in v6a */
extern const int jpeg_zigzag_order[]; /* natural coef order to zigzag order */
#endif
#ifdef RISCOS /* More compact form */
extern const char jpeg_natural_order[]; /* zigzag coef order to natural order */
extern const char jpeg_natural_order7[]; /* zz to natural order for 7x7 block */
extern const char jpeg_natural_order6[]; /* zz to natural order for 6x6 block */
extern const char jpeg_natural_order5[]; /* zz to natural order for 5x5 block */
extern const char jpeg_natural_order4[]; /* zz to natural order for 4x4 block */
extern const char jpeg_natural_order3[]; /* zz to natural order for 3x3 block */
extern const char jpeg_natural_order2[]; /* zz to natural order for 2x2 block */
#else
extern const int jpeg_natural_order[]; /* zigzag coef order to natural order */
extern const int jpeg_natural_order7[]; /* zz to natural order for 7x7 block */
extern const int jpeg_natural_order6[]; /* zz to natural order for 6x6 block */
extern const int jpeg_natural_order5[]; /* zz to natural order for 5x5 block */
extern const int jpeg_natural_order4[]; /* zz to natural order for 4x4 block */
extern const int jpeg_natural_order3[]; /* zz to natural order for 3x3 block */
extern const int jpeg_natural_order2[]; /* zz to natural order for 2x2 block */
#endif

/* Arithmetic coding probability estimation tables in jaricom.c */
extern const INT32 jpeg_aritab[];

/* Suppress undefined-structure complaints if necessary. */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef AM_MEMORY_MANAGER	/* only jmemmgr.c defines these */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
#endif
#endif /* INCOMPLETE_TYPES_BROKEN */
@


4.1
log
@Update headers to stock copy
Detail:
  Added headers jerror, jmorecfg, jpegint from IJG8d. Removed jpegdata header.
  Bulk rename of structure members to match newer headers, some RISCOS-isms wrapped in #ifdef RISCOS, retained for the time being.
  Assembler code now gets cinfo member offsets from jhdr.s derived from the C header rather than keeping its own dangerous copy of the offsets.
Admin
  Note: this has broken CFSI-jpeg as it expects the error values to be at the top of cinfo.
  Submission for the JPEG bounty.
  Tagged as SprExtend-1_70-headers.
@
text
@d146 3
d411 9
d427 1
@


1.1
log
@file jpegint was initially added on branch MigrateIJG8b.
@
text
@d1 426
@


1.1.2.1
log
@Create assembler equivalents of C colour conversions, approx 10% speed up.
Add new switch ASMCOLOR to select which to use, C or assembler.
Remove FILE_ exit trace concept, just use __FILE__ instead in exit_erl.
Add some comments to exit_erl and friends.
A few bits of cinfo setup moved into start_pass_huff_decoder() or eliminated.
Bumped up the precision of SCALE_BITS in the C colour handling so FIX() uses more bits of an int.
Deleted the unused remenants of light dithering in the 8bpp colour converter - saves a few cycles.
colour_convert_8 and colour_convert_16 no longer save entry registers the C compiler doesn't care about.
Update genyuvtabs to EXPORT the table bases.
Split out the compilation of IJG files as separate objects in the make file, rather than including them from within rojpeg, which is itself included from putscaled.

Version 1.38, 1.35.2.6. Tagged as 'SprExtend-1_38-1_35_2_6'
@
text
@a0 43
#ifdef RISCOS
/* Relics of IJG 4 waiting to be renamed */

/* temp */
extern void asm_colour_convert_block_8(JBLOCK jblock, char *outptr, int outoffset);
extern void asm_colour_convert_block_16(JBLOCK jblock, short *outptr, int outoffset);

/* jdmarker */
GLOBAL(boolean)
read_scan_header (j_decompress_ptr cinfo);
GLOBAL(void)
read_file_header (j_decompress_ptr cinfo);

/* jdcolor */
extern int mono_convert_pixel(int pix);
extern void mono_convert_pixels(int *y);
extern void colour_convert_unusual_block(JCOEF *yuv, int *outptr, int outoffset,
                                         int wide, int high);
extern void colour_convert_pixels(int *y, int u, int v);
extern void mono_convert_block(JBLOCK jblock, int *outptr, int outoffset);
extern void mono_convert_block_8(JBLOCK jblock, int *outptr, int outoffset);
extern void colour_convert_block(JBLOCK jblock, int *outptr, int outoffset);
extern void colour_convert_block_8(JBLOCK jblock, char *outptr, int outoffset);
extern void colour_convert_block_16(JBLOCK jblock, short *outptr, int outoffset);

/* jdhuff */
GLOBAL(void)
start_pass_huff_decoder (j_decompress_ptr cinfo);
GLOBAL(void)
fix_huff_tbl (j_decompress_ptr cinfo, JHUFF_TBL * htbl);
extern void huff_decode_blocks(j_decompress_ptr cinfo, JBLOCK block,
                               JHUFF_TBL *dctbl, JHUFF_TBL *actbl, JQUANT_TBL *quanttbl,
                               JCOEF *last_dc_val, int nblocks);
extern void huff_skip_blocks(j_decompress_ptr cinfo, JBLOCK block,
                             JHUFF_TBL *dctbl, JHUFF_TBL *actbl, JQUANT_TBL *quanttbl,
                             JCOEF *last_dc_val, int nblocks);

/* jidctffst */
extern void j_rev_dct(j_decompress_ptr cinfo, JBLOCK block, int count);

/* The buffer contains the entire file */
#define JGETC(cinfo) (int) ((cinfo)->next_input_byte >= (cinfo)->buffer_end ? 255 : *(cinfo)->next_input_byte++)
#endif
@


1.1.2.2
log
@For completeness, implement the 2x2->8bpp and 2x2->16bpp colour conversions in C too.
While slower than their assembler equivalents it makes the whacky address generation a bit easier to follow.
Fix MakeFile to not stop when trying to deleted an empty directory.

Version 1.38, 1.35.2.7. Tagged as 'SprExtend-1_38-1_35_2_7'
@
text
@d4 4
@


1.1.2.3
log
@Use USAT in 150 occurrences of colour clamping for ARMv6 and later.
Some IDCT renaming.
Shock addition of some documentation on how it all works.
Mirror fix from 1.39 on the trunk.
Debug
 Made DEBUG version compile again, earlier header shuffling was preventing it.
 Replaced the ' _ ' method of variadic macro emulation with more familiar double brackets for tracef().
 Eliminated IFDEBUG macro and just used #ifdef DEBUG/#endif or tracef() directly.
 Don't bother passing the line number and file name to exit() when in the non DEBUG case.

Version 1.38, 1.35.2.8. Tagged as 'SprExtend-1_38-1_35_2_8'
@
text
@d35 1
a35 1
extern void jpeg_idct_ifast(j_decompress_ptr cinfo, JBLOCK block, int count);
@


1.1.2.4
log
@New jerror.h taken from IJG8b.
Swap to using JERR_ numbers, deleted E_ numbers.
Modify genjhdr to pass some defines to the assembler code, so jdcolor can clarify use of DCTSIZE and DCTSIZE2.
Added chart of possible subsampling ratios to documentation.

Version 1.38, 1.35.2.9. Tagged as 'SprExtend-1_38-1_35_2_9'
@
text
@a12 2
extern void mono_convert_block(JBLOCK jblock, int *outptr, int outoffset);
extern void mono_convert_block_8(JBLOCK jblock, int *outptr, int outoffset);
d16 3
a20 1
extern void colour_convert_block32(JBLOCK jblock, int *outptr, int outoffset);
d34 1
a34 1
/* jidctfst */
a36 2
extern const int *jpeg_natural_order_base(void);

a37 1
#ifndef JGETC
a39 1
#endif
@


1.1.2.5
log
@Huffman decode adjusted to accept quantisation tables of 16 or 32 bit values (though use of LDAH macro).
IJG 8b uses UINT16 values now, but there's no measurable speed difference despite one/two extra instructions per AC component.

Version 1.38, 1.35.2.10. Tagged as 'SprExtend-1_38-1_35_2_10'
@
text
@d37 1
a37 1
extern const char *jpeg_natural_order_base(void);
@


1.1.2.6
log
@Migrate to jdmarker from IJG 8b.
ERREXIT's in jdhuff now use JERR_ numbers (missed earlier because it's switched out by default).

Version 1.38, 1.35.2.12. Tagged as 'SprExtend-1_38-1_35_2_12'
@
text
@d2 1
d4 5
a8 21
/* For fixup of RMA addresses */
const char *jpeg_natural_order_base(void);
void (*relocatefn(void (*)(void)))(void);
#ifndef RELOCATE
#define RELOCATE(k) relocatefn((void(*)(void))(k))
#endif

/* For jdmarker */
void jinit_marker_reader (j_decompress_ptr cinfo);

/* For jdcolor */
int mono_convert_pixel(int pix);
void mono_convert_pixels(int *y);
void mono_convert_block(JBLOCK jblock, int *outptr, int outoffset);
void mono_convert_block_8(JBLOCK jblock, int *outptr, int outoffset);
void colour_convert_unusual_block(JCOEF *yuv, int *outptr, int outoffset,
                                  int wide, int high);
void colour_convert_pixels(int *y, int u, int v);
void colour_convert_block_8(JBLOCK jblock, char *outptr, int outoffset);
void colour_convert_block_16(JBLOCK jblock, short *outptr, int outoffset);
void colour_convert_block_32(JBLOCK jblock, int *outptr, int outoffset);
d10 11
a20 1
#// Relics of IJG 4 waiting to be renamed
d24 1
a24 1
jinit_huff_decoder (j_decompress_ptr cinfo);
d26 1
a26 1
start_pass_huff_decoder (j_decompress_ptr cinfo);
d37 2
a42 1

@


1.1.2.7
log
@Reorganise data input.
Fill in INPUT_VARS and INPUT_SYNC so it uses register variables.
Make use of data source manager (cinfo->src).
Calculate bytes_in_buffer when restoring the huffman position.
Swap process_restart() for the one now in jdmarker.

Version 1.38, 1.35.2.13. Tagged as 'SprExtend-1_38-1_35_2_13'
@
text
@d42 5
@


1.1.2.8
log
@Abstract entropy decoding.
Currently still only support Huffman, but now agnostic, there are two functions 'decode_mcu()' which does the full DC+AC decode of a full MCU worth of data, and 'skip_mcu()' which just does DC and consumes but discards the AC coefficients.
Apply fix from 1.40 trunk version for monochrome output in a 8bpp greyscale mode.
Restore name of DCTFIX() macro to FIX(), no longer needed now the constituent parts are compiled seperately rather than #included.
Fix CFSIjpeg to assemble even though it doesn't have a module base (the recently added 'relocatefn()' was breaking it).

Version 1.38, 1.35.2.14. Tagged as 'SprExtend-1_38-1_35_2_14'
@
text
@d1 1
a1 3

#ifndef jpegint_h_
#define jpegint_h_
d6 1
d8 1
d11 1
a11 4
void jinit_marker_reader(j_decompress_ptr cinfo);

/* For jdhuff */
void jinit_huff_decoder(j_decompress_ptr cinfo);
d25 1
a25 5
#ifdef ASMIDCT
/* Optionally assembler coded IDCT stuff */
#define jpeg_idct_ifast(i,b,c)            asm_jpeg_idct_ifast(i,b,c)
void asm_jpeg_idct_ifast(j_decompress_ptr cinfo, JBLOCK block, int count);
#endif
d27 11
a37 34
#ifdef ASMHUFF
/* Optionally assembler coded Huffman stuff */
#define huff_decode_blocks(a,b,c,d,e,f,g) asm_huff_decode_blocks(a,b,c,d,e,f,g)
#define huff_skip_blocks(a,b,c,d,e,f,g)   asm_huff_skip_blocks(a,b,c,d,e,f,g)
void asm_huff_decode_blocks(j_decompress_ptr cinfo, JBLOCK block,
                            JHUFF_TBL *dctbl, JHUFF_TBL *actbl, JQUANT_TBL *quanttbl,
                            JCOEF *last_dc_val, int nblocks);
void asm_huff_skip_blocks(j_decompress_ptr cinfo, JBLOCK block,
                          JHUFF_TBL *dctbl, JHUFF_TBL *actbl, JQUANT_TBL *quanttbl,
                          JCOEF *last_dc_val, int nblocks);
#endif

#ifdef ASMCOLOR
/* Optionally assembler coded colour conversion stuff */
#define mono_convert_pixel(p)             asm_mono_convert_pixel(p)
#define mono_convert_pixels(y)            asm_mono_convert_pixels(y)
#define mono_convert_block(j,o,f)         asm_mono_convert_block(j,o,f)
#define mono_convert_block_8(j,o,f)       asm_mono_convert_block_8(j,o,f)
#define colour_convert_block_8(j,o,f)     asm_colour_convert_block_8(j,o,f)
#define colour_convert_block_16(j,o,f)    asm_colour_convert_block_16(j,o,f)  
#define colour_convert_block_32(j,o,f)    asm_colour_convert_block_32(j,o,f)
#define colour_convert_unusual_block(a,b,c,d,e) asm_colour_convert_unusual_block(a,b,c,d,e)
#define colour_convert_pixels(y,u,v)      asm_colour_convert_pixels(y,u,v)
int asm_mono_convert_pixel(int pix);
void asm_mono_convert_pixels(int *y);
void asm_mono_convert_block(JBLOCK jblock, int *outptr, int outoffset);
void asm_mono_convert_block_8(JBLOCK jblock, int *outptr, int outoffset);
void asm_colour_convert_unusual_block(JCOEF *yuv, int *outptr, int outoffset,
                                      int wide, int high);
void asm_colour_convert_pixels(int *y, int u, int v);
void asm_colour_convert_block_8(JBLOCK jblock, char *outptr, int outoffset);
void asm_colour_convert_block_16(JBLOCK jblock, short *outptr, int outoffset);
void asm_colour_convert_block_32(JBLOCK jblock, int *outptr, int outoffset);
#endif
a38 1
#// Relics of IJG 4 waiting to be refactored
@


