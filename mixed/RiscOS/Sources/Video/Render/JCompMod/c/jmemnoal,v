head	4.2;
access;
symbols
	JCompMod-0_08:4.2
	JCompMod-0_07:4.2
	JCompMode-0_06-CleanConfig:4.2
	JCompMod-0_06-IJG5RefPoint:4.2
	JCompMod-0_06:4.1.1.1
	JCompMod-0_05:4.1.1.1
	RO_3_71:4.1.3.1
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2015.10.20.21.11.56;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	EKhZi83w9H0ajTFy;

4.1
date	96.11.05.09.44.39;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.44.39;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.39.01;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.56.43;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.19.12;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Sync back with IJG reference version
Along the way the original IJG library code has gained some needless diffs, like commenting out unused functions one line at a time, whitespace, addition of unused headers, that sort of thing. Put back the reference version, and switch the changes using the preprocessor (ifdef RISCOS).
Remove the Thomas Lane attribution for "jmemnoal.c", this doesn't appear in IJG5 nor any earlier version, so falls under the Castle licence.
This commit probably doesn't build, it's just a reference point.

Tagged as JCompMod-0_06-IJG5RefPoint.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * jmemnoal.c
 *
 * All allocation is done by calling process.
 * Note that the max_memory_to_use option is ignored by this implementation.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
#endif


/*
 * Memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL void *
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
//printf("cinfo = %x, confo->workspace = %x\n", cinfo, cinfo->workspace);
  if (cinfo->workspace == 0)
  {
//printf("mallocing %d bytes\n", sizeofobject);
    return (void *) malloc(sizeofobject);
  }else{
//printf("workspace = %x, total allocation = %d\n", cinfo->workspace,  cinfo->memory_used);
//printf("sml giving %d bytes of buffer, at location %x\n", sizeofobject, (cinfo->workspace + cinfo->memory_used));
    cinfo->memory_used += sizeofobject;
    if (cinfo->memory_used > cinfo->workspace_size) ERREXIT(cinfo, JERR_BUFFER_SIZE);
    return ((void *) (cinfo->workspace + cinfo->memory_used - sizeofobject));
  }
}

GLOBAL void
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  if (cinfo->workspace == 0)
    free(object);
}


/*
 * "Large" objects are treated the same as "small" ones.
 * NB: although we include FAR keywords in the routine declarations,
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL void FAR *
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  if (cinfo->workspace == 0)
  {
//printf("mallocing %d bytes\n", sizeofobject);
    return (void *) malloc(sizeofobject);
  }else{
//printf("workspace = %x, total allocation = %d\n", cinfo->workspace,  cinfo->memory_used);
//printf("large giving %d bytes of buffer, at location %x\n", sizeofobject, (cinfo->workspace + cinfo->memory_used));
    cinfo->memory_used += sizeofobject;
    if (cinfo->memory_used > cinfo->workspace_size) ERREXIT(cinfo, JERR_BUFFER_SIZE);
    return ((void *) (cinfo->workspace + cinfo->memory_used - sizeofobject));
  }
}

GLOBAL void
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  if (cinfo->workspace == 0)
    free(object);
}


/*
 * This routine computes the total memory space available for allocation.
 * Here we always say, "we got all you want bud!"
 */

GLOBAL long
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}


/*
 * Backing store (temporary file) management.
 * Since jpeg_mem_available always promised the moon,
 * this should never be called and we can just error out.
 */

GLOBAL void
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  Here, there isn't any.
 */

GLOBAL long
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}

GLOBAL void
jpeg_mem_term (j_common_ptr cinfo)
{
  /* no work */
}
@


4.1
log
@Initial revision
@
text
@d18 1
a18 5
 * Copyright (C) 1992-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * All alocation is done by calling process.
a31 1
//#include "jmemmgr.h"
a112 1

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
