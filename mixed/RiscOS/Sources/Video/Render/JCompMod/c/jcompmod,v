head	4.3;
access;
symbols
	JCompMod-0_08:4.3
	JCompMod-0_07:4.2
	JCompMode-0_06-CleanConfig:4.1.1.1
	JCompMod-0_06-IJG5RefPoint:4.1.1.1
	JCompMod-0_06:4.1.1.1
	JCompMod-0_05:4.1.1.1
	RO_3_71:4.1.3.1
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.10.20.21.32.52;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	yFwWYn2daszhsTFy;

4.2
date	2015.10.20.21.29.17;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	Sls7UCiWXdI1rTFy;

4.1
date	96.11.05.09.44.37;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.44.37;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.38.44;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.56.34;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.19.03;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Add support for CompressJPEG_Comment tag injection
You can now annotate the JPEGs you create with this handy pocket sized SWI. The maximum comment length of 65000 comes from the 'wrjpgcom' utility from the IJG library of the same vintage.
Tested briefly with a modified version of ChangeFSI to put my name in, and cross check the result on http://regex.info/exif.cgi

Version 0.08. Tagged as 'JCompMod-0_08'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * jcompmod.c
 *
 *  compression from raster to JPEG file
 */

#include <stdlib.h>
#include "swis.h"
#include "kernel.h"
#include "trace.h"
#include "JCompModHdr.h"

/*
 * Include file for users of JPEG library.
 * You will need to have included system headers that define at least
 * the typedefs FILE and size_t before you can include jpeglib.h.
 * (stdio.h is sufficient on ANSI-conforming systems.)
 * You may also wish to include "jerror.h".
 */

#include "jpeglib.h"

/*
 * <setjmp.h> is used for the optional error recovery mechanism shown in
 * the second part of the example.
 */

#include <setjmp.h>

typedef struct jpeg_var_struct {
        int   width;
        int   height;
        int   quality;
        int   components;
        int   horizontal_dpi;
        int   vertical_dpi;
      } jpeg_var_type;

struct my_error_mgr {
  struct jpeg_error_mgr pub;	/* "public" fields */

  jmp_buf setjmp_buffer;	/* for return to caller */
};

typedef struct {
        int errnum;
        char errtoken[8];
} _kernel_intlerror;

#define ErrorBase_CompressJPEG                  0x8183C0
#define ErrorNumber_CompressJPEG_BadBPP         ErrorBase_CompressJPEG + 0 /* RISC OS Select */
#define ErrorNumber_CompressJPEG_BadNoOfLines   ErrorBase_CompressJPEG + 1 /* RISC OS Select */
#define ErrorNumber_CompressJPEG_BadWorkspace   ErrorBase_CompressJPEG + 2 /* RISC OS Select */
#define ErrorNumber_CompressJPEG_BadWidthHeight ErrorBase_CompressJPEG + 3 /* RISC OS Select */
#define ErrorNumber_CompressJPEG_NoMemory       ErrorBase_CompressJPEG + 4
#define ErrorNumber_CompressJPEG_CommentTooLong ErrorBase_CompressJPEG + 5

#define UNUSED(k) (void)(k)

#ifndef MAX_COM_LENGTH
#define MAX_COM_LENGTH 65000L	/* must be <= 65533 in any case */
#endif

typedef struct my_error_mgr * my_error_ptr;

//static FILE  *TraceFile;
/*
 * Here's the routine that will replace the standard error_exit method:
 */

METHODDEF void
my_error_exit (j_common_ptr cinfo)
{
  /* cinfo->err really points to a my_error_mgr struct, so coerce pointer */
  my_error_ptr myerr = (my_error_ptr) cinfo->err;

tracef("my_error exit called....\n");
  /* Always display the message. */
  /* We could postpone this until after returning, if we chose. */
/* don't output_mesage from module!
    (*cinfo->err->output_message) (cinfo);  */

  /* Return control to the setjmp point */
  longjmp(myerr->setjmp_buffer, 1);
}

/******************** JPEG COMPRESSION SAMPLE INTERFACE *******************/

/* This half of the example shows how to feed data into the JPEG compressor.
 * We present a minimal version that does not worry about refinements such
 * as error recovery (the JPEG code will just exit() if it gets an error).
 */


/*
 * IMAGE DATA FORMATS:
 *
 * The standard input image format is a rectangular array of pixels, with
 * each pixel having the same number of "component" values (color channels).
 * Each pixel row is an array of JSAMPLEs (which typically are unsigned chars).
 * If you are working with color data, then the color values for each pixel
 * must be adjacent in the row; for example, R,G,B,R,G,B,R,G,B,... for 24-bit
 * RGB color.
 *
 * For this example, we'll assume that this data structure matches the way
 * our application has stored the image in memory, so we can just pass a
 * pointer to our image buffer.  In particular, let's say that the image is
 * RGB color and is described by:
 */

/*
 * Sample routine for JPEG compression.  We assume that the target file name
 * and a compression quality factor are passed in.
 */

static struct jpeg_compress_struct *start_compression(unsigned char *buffer, long buf_size,
                                                jpeg_var_type *vars, unsigned char *workspace,
                                                long workspace_size, struct my_error_mgr *jerr)
{
  /* This struct contains the JPEG compression parameters and pointers to
   * working space (which is allocated as needed by the JPEG library).
   * It is possible to have several such structures, representing multiple
   * compression/decompression processes, in existence at once.  We refer
   * to any one struct (and its associated working data) as a "JPEG object".
   */
  static struct jpeg_compress_struct cinfo;
  /* This struct represents a JPEG error handler.  It is declared separately
   * because applications often want to supply a specialized error handler
   * (see the second half of this file for an example).  But here we just
   * take the easy way out and use the standard error handler, which will
   * print a message on stderr and call exit() if compression fails.
   */
  /* More stuff */

tracef("start compression called\nbuf_size = %d\n" _ buf_size);
//  cinfo = (struct jpeg_compress_struct *)malloc(sizeof(struct jpeg_compress_struct));
//  if (cinfo == NULL)
//    return(0);
//  jerr = (my_error_ptr)malloc(sizeof(struct my_error_mgr));
//  if (jerr == NULL)
//  {
//    free(cinfo);
//    return(0);
//  }
  /* Step 1: allocate and initialize JPEG compression object */

  /* We have to set up the error handler first, in case the initialization
   * step fails.  (Unlikely, but it could happen if you are out of memory.)
   * This routine fills in the contents of struct jerr, and returns jerr's
   * address which we place into the link field in cinfo.
   */
//   vars->quality = 75;  /*temp easure...*/
tracef("vars are: width = %d, height = %d\n" _ vars->width _ vars->height);
tracef("          quality = %d, components = %d\n" _ vars->quality _ vars->components);
tracef("          h_dpi = %d, v_dpi = %d\n" _ vars->horizontal_dpi _ vars->vertical_dpi);
  cinfo.err = jpeg_std_error(&(jerr->pub));
  jerr->pub.error_exit = my_error_exit;
tracef("std_error returned ok\n");
  /* Now we can initialize the JPEG compression object. */
  cinfo.workspace = workspace;
  cinfo.memory_used = 0;
  cinfo.workspace_size = workspace_size;
tracef("cinfo = %x\n" _ &cinfo);
tracef("workspace = %x, used = %d, size = %d\n" _ cinfo.workspace _ cinfo.memory_used _ cinfo.workspace_size);
  jpeg_create_compress(&cinfo);
tracef("creat_compress returned ok\n");
  /* Step 2: specify data destination (eg, a file) */
  /* Note: steps 2 and 3 can be done in either order. */

  /* Here we use the library-supplied code to send compressed data to a
   * stdio stream.  You can also write your own code to do something else.
   * VERY IMPORTANT: use "b" option to fopen() if you are on a machine that
   * requires it in order to write binary files.
   */
  jpeg_mem_dest(&cinfo, buffer, buf_size);
tracef("mem_dest returned ok\n");

  /* Step 3: set parameters for compression */

  /* First we supply a description of the input image.
   * Four fields of the cinfo struct must be filled in:
   */
  cinfo.image_width = vars->width; 	/* image width and height, in pixels */
  cinfo.image_height = vars->height;
  cinfo.input_components = vars->components;		/* # of color components per pixel */
  if (vars->components == 1)
    cinfo.in_color_space = JCS_GRAYSCALE; 	/* colorspace of input image */
  else
    cinfo.in_color_space = JCS_RGB; 	/* colorspace of input image */
  /* Now use the library's routine to set default compression parameters.
   * (You must set at least cinfo.in_color_space before calling this,
   * since the defaults depend on the source color space.)
   */
tracef("cinfo vars set up ok\n");
  jpeg_set_defaults(&cinfo);
tracef("set defaults returned ok\n");
  if (vars->horizontal_dpi != 0)
  {
    cinfo.X_density = vars->horizontal_dpi;
    cinfo.Y_density = vars->vertical_dpi;
    cinfo.density_unit = 1;
  }
  else
  {
    cinfo.X_density = 1;
    cinfo.Y_density = 1;
    cinfo.density_unit = 0;
  }
  /* Now you can set any non-default parameters you wish to.
   * Here we just illustrate the use of quality (quantization table) scaling:
   */
  jpeg_set_quality(&cinfo, vars->quality, TRUE /* limit to baseline-JPEG values */);
tracef("set quality returned ok\n");

/*  cinfo->dct_method = JDCT_IFAST;*/
  /* Step 4: Start compressor */

  /* TRUE ensures that we will write a complete interchange-JPEG file.
   * Pass TRUE unless you are very sure of what you're doing.
   */
  jpeg_start_compress(&cinfo, TRUE);
tracef("start compress returned ok\n");
  return(&cinfo);
}

static int
finish_compression(struct jpeg_compress_struct *cinfo)
{
  long         size;
  mem_dest_ptr dest;

  dest = (mem_dest_ptr) cinfo->dest;
  /* Step 6: Finish compression */
  jpeg_finish_compress(cinfo);

  size = dest->buffer_size - dest->pub.free_in_buffer;
  /* Step 7: release JPEG compression object */

  /* This is an important step since it will release a good deal of memory. */
  jpeg_destroy_compress((j_compress_ptr)cinfo);
  free(cinfo->err);
  free(cinfo);
  return((int)size);
}


/*
 * SOME FINE POINTS:
 *
 * In the above loop, we ignored the return value of jpeg_write_scanlines,
 * which is the number of scanlines actually written.  We could get away
 * with this because we were only relying on the value of cinfo.next_scanline,
 * which will be incremented correctly.  If you maintain additional loop
 * variables then you should be careful to increment them properly.
 * Actually, for output to a stdio stream you needn't worry, because
 * then jpeg_write_scanlines will write all the lines passed (or else exit
 * with a fatal error).  Partial writes can only occur if you use a data
 * destination module that can demand suspension of the compressor.
 * (If you don't know what that's for, you don't need it.)
 *
 * If the compressor requires full-image buffers (for entropy-coding
 * optimization or a noninterleaved JPEG file), it will create temporary
 * files for anything that doesn't fit within the maximum-memory setting.
 * (Note that temp files are NOT needed if you use the default parameters.)
 * On some systems you may need to set up a signal handler to ensure that
 * temporary files are deleted if the program is interrupted.  See libjpeg.doc.
 *
 * Scanlines MUST be supplied in top-to-bottom order if you want your JPEG
 * files to be compatible with everyone else's.  If you cannot readily read
 * your data in that order, you'll need an intermediate array to hold the
 * image.  See rdtarga.c or rdbmp.c for examples of handling bottom-to-top
 * source data using the JPEG code's internal virtual-array mechanisms.
 */

_kernel_oserror *main_initialise (const char *tail, int podule_base,
      void *workspace)
{
  _kernel_oserror *error = NULL;
//  static FILE *TraceFile;
  trace_initialise("tracetype");

//  TraceFile = fopen("$.foo","w");
  UNUSED(tail);
  UNUSED(podule_base);
  UNUSED(workspace);
  
  return(error);
}

_kernel_oserror *main_terminate(int fatal, int instance, void *workspace)
{
  _kernel_oserror *error = NULL;
  trace_terminate();
//  fclose(TraceFile);
  UNUSED(fatal);
  UNUSED(instance);
  UNUSED(workspace);

  return(error);
}

_kernel_oserror *main_swi(int swi, _kernel_swi_regs *regs, void *workspace)
{
  static struct my_error_mgr  jerr;
  static const _kernel_intlerror errnomem = { ErrorNumber_CompressJPEG_NoMemory, "NoMem" };
  static const _kernel_intlerror errstroflo = { ErrorNumber_CompressJPEG_CommentTooLong, "StrOFlo" };
  
  switch (swi)
  {
    case CompressJPEG_Start - CompressJPEG_00:
    {
      struct jpeg_compress_struct  *cinfo = NULL;

      if (setjmp(jerr.setjmp_buffer))
      {
        /* If we get here, the JPEG code has signalled an error.
         * We need to clean up the JPEG object, close the input file, and return.
         */
        if (cinfo != NULL) jpeg_destroy_compress(cinfo);
        tracef("I've longjmped, returning...\n");
        return _swix(MessageTrans_ErrorLookup, _INR(0,2) | _INR(4,7), &errnomem, 0, 0,
                                                                      0, 0, 0, 0);
      }
      else
      {
        cinfo = start_compression((unsigned char *)regs->r[0], regs->r[1],
                                (jpeg_var_type *)regs->r[2], (unsigned char *)regs->r[3],
                                regs->r[4], &jerr);
        tracef("cinfo = %x\n" _ cinfo);
        regs->r[0] = (int)cinfo;
      }
      tracef("returning from start_compression\n");
    }
    break;

    case CompressJPEG_WriteLine - CompressJPEG_00:
    {
      int   lines;
      struct jpeg_compress_struct  *cinfo = (struct jpeg_compress_struct *)regs->r[0];

      if (setjmp(jerr.setjmp_buffer))
      {
        /* If we get here, the JPEG code has signalled an error.
         * We need to clean up the JPEG object, close the input file, and return.
         */
        tracef("error returned to CompressJPEG_WriteLine\n");
        jpeg_destroy_compress(cinfo);
        tracef("I've longjmped, returning...\n");
        return _swix(MessageTrans_ErrorLookup, _INR(0,2) | _INR(4,7), &errnomem, 0, 0,
                                                                      0, 0, 0, 0);
      }
      else
      {
        tracef("writeline compression called, calling jpeg_write_scanlines\n");
        lines = jpeg_write_scanlines(cinfo, (JSAMPROW *)&(regs->r[1]), 1);
        tracef("writeline compression returned. lines = %d\n" _ lines);
      }
      tracef("writeline compression finished\n");
    }
    break;

    case CompressJPEG_Finish - CompressJPEG_00:
    {
      int  bytes_used;

      tracef("finish compression called\n");
      bytes_used = finish_compression((struct jpeg_compress_struct *)regs->r[0]);
      regs->r[0] = bytes_used;
    }
    break;

    case CompressJPEG_Comment - CompressJPEG_00:
    {
      unsigned int length;
      const JOCTET *string = (const JOCTET *)regs->r[2];
      struct jpeg_compress_struct  *cinfo = (struct jpeg_compress_struct *)regs->r[0];

      if (regs->r[1] & 1)
      {
        /* Control terminated string, count it */
        const JOCTET *end = string;

        while ((*end >= ' ') || (*end == 10) || (*end == 9) /* Allow NL and TAB */)
        {
          end++;
        }
        length = (unsigned int)(end - string);
      }
      else
      {
        /* Verbatim, length given */
        length = regs->r[3];
      }
      if (length >= MAX_COM_LENGTH)
      {
        return _swix(MessageTrans_ErrorLookup, _INR(0,2) | _INR(4,7), &errstroflo, 0, 0,
                                                                      0, 0, 0, 0);
      }
      jpeg_write_marker(cinfo, JPEG_COM, string, length);
      tracef("jpeg write marker finished\n");
    }
    break;
    
    default:
      return error_BAD_SWI;
  }
  UNUSED(workspace);

  return(NULL);
}
@


4.2
log
@Makefile recreated from fragments
!MkInstall:
   Fixed to install the module in the right place.
jcompmod.c:
   Use defines generated from CMHG.
   Use the correct error base.
   Keep our international errors in compact (const) form, rather than using _kernel_oserror structs.
   Update function prototypes to match CMHG.
trace.c:
   Remove use of SKIP macro, so we don't depend on OSLib headers for just that.
JCompModHdr:
   Updated to use the date and version from VersionNum
   Renamed for shared makefiles

Version 0.07. Tagged as 'JCompMod-0_07'
@
text
@d74 4
d386 32
@


4.1
log
@Initial revision
@
text
@a20 1
//#include <stdio.h>
d25 1
a25 4

#define CompressJPEG_Start            0x49a00
#define CompressJPEG_WriteLine        0x49a01
#define CompressJPEG_Finish           0x49a02
d59 15
d126 1
a126 1
struct jpeg_compress_struct *start_compression(unsigned char *buffer, long buf_size,
d236 1
a236 1
GLOBAL int
d285 1
a285 1
_kernel_oserror *main_initialise (char *tail, int podule_base,
d293 4
d300 1
a300 1
_kernel_oserror *main_terminate(boolean fatal, int instance, void *workspace)
d305 4
a313 1
  _kernel_oserror             *error = NULL;
d315 3
a317 1

d320 1
a320 1
    case CompressJPEG_Start & 0x3F:
d322 1
a322 1
      struct jpeg_compress_struct  *cinfo;
d326 1
a326 2
        _kernel_oserror errorblock = {1, "NoMem"};
        /* If we get here, the JPEG code has signaled an error.
d328 1
a328 1
        */
d331 2
a332 3
        error = _swix(MessageTrans_ErrorLookup, _IN(0) | _IN(1) | _IN(2) |
                       _IN(4) | _IN(5) | _IN(6) | _IN(7), &errorblock, 0, 0, 0, 0, 0, 0);
        return(error);
d346 1
a346 1
    case CompressJPEG_WriteLine & 0x3F:
d353 1
a353 2
        _kernel_oserror errorblock = {1, "NoMem"};
        /* If we get here, the JPEG code has signaled an error.
d355 1
a355 1
        */
d359 2
a360 3
        error = _swix(MessageTrans_ErrorLookup, _IN(0) | _IN(1) | _IN(2) |
                       _IN(4) | _IN(5) | _IN(6) | _IN(7), &errorblock, 0, 0, 0, 0, 0, 0);
        return(error);
d365 1
a365 2
        lines = jpeg_write_scanlines((struct jpeg_compress_struct *)regs->r[0],
                           (JSAMPROW *)&(regs->r[1]), 1);
d368 1
a368 1
    tracef("writeline compression finished\n");
d372 1
a372 1
    case CompressJPEG_Finish & 0x3F:
d376 1
a376 1
tracef("finish compression called\n");
d383 1
a383 3
/*      error = riscos_error_lookup (error_NO_SUCH_SWI, "BadSwi",
               "ColourPicker");*/
    break;
d385 2
a386 1
//tracef("returning from swi handler\n");
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
