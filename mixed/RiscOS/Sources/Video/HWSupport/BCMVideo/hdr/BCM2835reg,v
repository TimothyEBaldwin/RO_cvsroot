head	1.7;
access;
symbols
	BCMVideo-0_53:1.7
	BCMVideo-0_52:1.7
	BCMVideo-0_51:1.7
	BCMVideo-0_50-1_50_2_1:1.7
	RPiFreeze:1.7.0.2
	BCMVideo-0_50:1.7
	BCMVideo-0_49:1.7
	BCMVideo-0_48:1.6
	BCMVideo-0_47:1.6
	BCMVideo-0_46:1.6
	BCMVideo-0_45:1.6
	BCMVideo-0_44:1.6
	BCMVideo-0_43:1.6
	BCMVideo-0_42:1.6
	BCMVideo-0_41:1.6
	BCMVideo-0_40:1.6
	BCMVideo-0_39:1.6
	BCMVideo-0_38:1.6
	BCMVideo-0_37:1.6
	BCMVideo-0_36:1.5
	BCMVideo-0_35:1.5
	BCMVideo-0_34:1.5
	BCMVideo-0_33:1.5
	BCMVideo-0_32:1.5
	BCMVideo-0_31:1.5
	BCMVideo-0_30:1.5
	BCMVideo-0_29:1.4
	BCMVideo-0_28:1.4
	BCMVideo-0_27:1.4
	BCMVideo-0_26:1.4
	BCMVideo-0_25:1.4
	BCMVideo-0_24:1.4
	BCMVideo-0_23:1.4
	BCMVideo-0_22:1.4
	BCMVideo-0_21:1.4
	BCMVideo-0_20:1.4
	BCMVideo-0_19:1.4
	BCMVideo-0_18:1.3
	BCMVideo-0_17:1.3
	BCMVideo-0_16:1.3
	BCMVideo-0_15:1.2
	BCMVideo-0_14:1.2
	BCMVideo-0_13:1.2
	BCMVideo-0_12:1.2
	BCMVideo-0_11:1.2
	BCMVideo-0_10:1.2
	BCMVideo-0_09:1.2
	BCMVideo-0_08:1.2
	BCMVideo-0_07:1.2
	BCMVideo-0_06:1.1
	BCMVideo-0_05:1.1
	BCMVideo-0_04:1.1;
locks; strict;
comment	@# @;


1.7
date	2018.02.02.20.37.36;	author jlee;	state Exp;
branches;
next	1.6;
commitid	aDAuPtQqF7MfhkpA;

1.6
date	2016.03.25.20.15.20;	author jlee;	state Exp;
branches;
next	1.5;
commitid	65QlxlgxPV3NY30z;

1.5
date	2015.02.02.15.36.48;	author bavison;	state Exp;
branches;
next	1.4;
commitid	dsG4rJhYyVQhQr8y;

1.4
date	2014.02.19.21.25.32;	author jlee;	state Exp;
branches;
next	1.3;
commitid	VOdJLv4tprtsXKpx;

1.3
date	2014.01.01.16.38.12;	author jlee;	state Exp;
branches;
next	1.2;
commitid	hv7JxPX2J7fxWqjx;

1.2
date	2012.09.18.13.55.46;	author jlee;	state Exp;
branches;
next	1.1;
commitid	Apt88JppQEvt91lw;

1.1
date	2012.09.03.18.17.29;	author jlee;	state Exp;
branches;
next	;
commitid	1L1YnMpXkWl957jw;


desc
@@


1.7
log
@Implement gamma support for true-colour modes
Detail:
  hdr/BCM2835reg - Add some HVS / scaler register addresses. Remove unused FlushDataCache macros.
  s/BCMVideo - Add code for programming the HVS gamma table
  s/GraphicsV - Hook up gamma programming to GraphicsV palette handlers
Admin:
  Tested on Raspberry Pi 1 & 3, TV & HDMI output


Version 0.49. Tagged as 'BCMVideo-0_49'
@
text
@;
; Copyright (c) 2012, RISC OS Open Ltd
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
IO_Base_BCM2835 *       &20000000
IO_Base_BCM2836 *       &3F000000
IO_Size         *       &01000000
SCALER          *       &00400000
SMICS           *       &00600000
ARM_Timer_Base  *       &0000b400
iDev_GPU_SMI        *     48
iDev_ARM_Timer      *     64

                                      
; mem barrier operation; ensures all explicit mem operations completed before
; instruction exits.
; (value 4 is all instructions, value 5 is just mem instructions)
; zeroes $r
        MACRO
$label  DataSyncBarrier $r, $cond
$label  MOV$cond $r, #0
      [ {UAL}
        MCR$cond p15, #0, $r, c7, c10, #4
      |
        MCR$cond p15, 0, $r, c7, c10,4
      ]
        MEND
        MACRO
$label  DoMemBarrier $r, $cond
$label  MOV$cond $r, #0
      [ {UAL}
        MCR$cond p15, #0, $r, c7, c10, #5
      |
        MCR$cond p15, 0, $r, c7, c10,5
      ]
        MEND

; ARM timer registers
                     ^ 0
ARMTimer_Load        # 4
ARMTimer_Value       # 4
ARMTimer_Control     # 4
ARMTimer_IRQClear    # 4
ARMTimer_IRQRAW      # 4
ARMTimer_IRQMasked   # 4
ARMTimer_Reload      # 4
ARMTimer_Predivider  # 4
ARMTimer_Counter     # 4

ARMTimer_Control_32bit         * 1<<1
ARMTimer_Control_PrescaleMask  * 3<<2
ARMTimer_Control_IRQEnable     * 1<<5
ARMTimer_Control_Enable        * 1<<7
ARMTimer_Control_CounterEnable * 1<<9
ARMTimer_Control_PredividerMask * 255<<16
ARMTimer_Control_PredividerShift * 16

; Scaler registers
SCALER_DISPCTRL0   * &40
SCALER_DISPBKGND0  * &44
SCALER_DISPCTRL1   * &50
SCALER_DISPBKGND1  * &54
SCALER_DISPCTRL2   * &60
SCALER_DISPBKGND2  * &64
SCALER_DISPGAMADR  * &78
SCALER_DISPGAMDAT  * &e0

        END
@


1.6
log
@Use BCMSupport for mailbox access
Detail:
  hdr/BCM2835reg - Remove mailbox definitions which are now exported by BCMSupport in its header
  s/BCMVideo, s/GraphicsV - Remove manual mailbox access and replace with equivalent calls to BCMSupport. Some tag buffer definitons moved in order to allow Entry macro to reference their size.
Admin:
  Tested on Raspberry Pi 1B, 2B, 3B
  Requires BCMSupport 0.03


Version 0.37. Tagged as 'BCMVideo-0_37'
@
text
@d31 1
a59 19
        MACRO
$label  FlushDataCache $r, $cond
$label  MOV$cond $r, #0
      [ {UAL}
        MCR$cond p15, #0, $r, c7, c14, #0
      |
        MCR$cond p15, 0, $r, c7, c14,0
      ]
        MEND
        MACRO
$label  FlushDataCacheRange $startaddr,$endaddr,$cond
$label  BIC$cond $startaddr, $startaddr, #&1f
        BIC$cond $endaddr,   $endaddr,   #&1f        
      [ {UAL}
        MCRR$cond p15, #0, $endaddr, $startaddr, c14
      |
        MCRR$cond p15, 0, $endaddr, $startaddr, c14
      ]
        MEND
d81 10
@


1.5
log
@  Add Raspberry Pi 2 support
Detail:
  BCMVideo isn't a good citizen in the sense that it has hard-coded knowledge
  of the physical address space rather than asking the HAL, so equivalent
  checks for wether we're running on a Pi 1 or Pi 2 were needed here. There
  was also a significant bug in that BCMVideo wasn't translating ARM physical
  addresses to GPU physical addresses before programming the DMA controller.
  It seems we "got away with it" on Pi 1 at the expense of hammering the
  GPU's L1 cache, but with the different attachment of L2 caches on Pi 2
  due to the presence of the Cortex-A7 CPU, there were major cache coherency
  problems leading to failure to do tiled plots or block-moves.
Admin:
  Tested on Pi 1 and 2.

Version 0.30. Tagged as 'BCMVideo-0_30'
@
text
@a34 108
;
; Mailbox
;
; There are two mailboxes; we write to mailbox 1 and read from mailbox 0
;
MB_Base        *       &0000b800     ; offset from IO space start
MB_DBell0      *       &40           ; doorbell 0 (VCHIQ VC -> ARM)
MB_DBell1      *       &44           ; doorbell 1
MB_DBell2      *       &48           ; doorbell 2 (VCHIQ ARM -> VC)
MB_DBell3      *       &4c           ; doorbell 3
MB_ChRd        *       &80           ; normal read - offset from MB_Base
MB_ChWr        *       &a0           ; normal write
MB_ChRWTop     *       &8c           ; 4 word read or write
MB_Pol         *       &90           ; NonPOP read
MB_Snd         *       &94           ; sender read (bottom 2 bits)
MB_Sta         *       &98           ; status read
MB_Cnf         *       &9c           ; config r/w
;
; mailbox register bits
;
; MB_Sta
MB_Sta_Full    *       &80000000     ; mailbox full
MB_Sta_Empty   *       &40000000     ; mailbox empty
MB_Sta_Level   *       &000000ff     ; mailbox content count
; MB_Cnf
MB_Cnf_HDIrqEn *       &00000001     ; mailbox has-data irq enable
MB_Cnf_HSIrqEn *       &00000002     ; mailbox has-space irq enable
MB_Cnf_OpIrqEn *       &00000004     ; mailbox Opp irq en
MB_Cnf_MBClr   *       &00000008     ; write 1 then 0 to clear mailbox
MB_Cnf_HDIrq   *       &00000010     ; mailbox has-data irq pending
MB_Cnf_HSIrq   *       &00000020     ; mailbox has-space irq pending
MB_Cnf_OpIrq   *       &00000040     ; mailbox Opp irq pending
; these flags are reset on any write to this register
MB_Cnf_ErNone  *       &00000100     ; none read error
MB_Cnf_ErWFull *       &00000200     ; Write to full mailbox
MB_Cnf_ErREmty *       &00000400     ; read from empty mailbox
;
; mailbox channel numbers
MB_Chan_Pwr    *       0             ; Power channel
MB_Chan_FB     *       1             ; Frame Buffer channel
MB_Chan_VUart  *       2             ; Virtual UART channel
MB_Chan_VCHIQ  *       3             ; VCHIQ channel
MB_Chan_LEDS   *       4             ; LEDS channel
MB_Chan_Btn    *       5             ; Buttons channel
MB_Chan_TSc    *       6             ; TouchScreen channel
MB_Chan_ARM2VC *       8             ; ARM -> VC property channel
MB_Chan_VC2ARM *       9             ; VC -> ARM property channel
; far end replies on the same channel when command done.. e.g.
; command c0000001 gets 00000001 (ie channel1) reply
; Power channel bits
MB_Pwr_SDCard       *  0
MB_Pwr_UART         *  1
MB_Pwr_MiniUART     *  2
MB_Pwr_USB          *  3
MB_Pwr_I2C0         *  4
MB_Pwr_I2C1_MASK    *  5
MB_Pwr_I2C2_MASK    *  6
MB_Pwr_SPI_MASK     *  7
MB_Pwr_CCP2TX_MASK  *  8
; ARM2VC tags
; see https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface
ARM2VC_Tag_End                   * &00000000 ; End of tag list
ARM2VC_Tag_GetFirmwareVersion    * &00000001 ; return 4 byte firmware version
ARM2VC_Tag_GetBoardModel         * &00010001 ; return 4 byte model
ARM2VC_Tag_GetBoardRevision      * &00010002 ; return 4 byte revision
ARM2VC_Tag_GetBoardMAC           * &00010003 ; return 6 byte MAC
ARM2VC_Tag_GetBoardSerial        * &00010004 ; return 8 byte serial
ARM2VC_Tag_GetARMMemory          * &00010005 ; return ARM mem base + size
ARM2VC_Tag_GetVCMemory           * &00010006 ; return VC mem base + size
ARM2VC_Tag_GetClocks             * &00010007 ; return clock tree
ARM2VC_Tag_GetConfig             * &00050001 ; get kernel boot args string
ARM2VC_Tag_GetDMAChannels        * &00060001 ; get mask of DMA channels usable by ARM
ARM2VC_Tag_GetPowerState         * &00020001 ; get power state of specified MB_Pwr_ device
ARM2VC_Tag_GetPowerTiming        * &00020002 ; get microsecond delay required after power on for indicated device
ARM2VC_Tag_SetPowerState         * &00028001 ; set power state of device
ARM2VC_Tag_GetClockState         * &00030001 ; get power state of clock
ARM2VC_Tag_SetClockState         * &00038001 ; set power state of clock
ARM2VC_Tag_GetClockRate          * &00030002 ; get rate of clock
ARM2VC_Tag_SetClockRate          * &00038002 ; set rate of clock
ARM2VC_Tag_GetEDID               * &00030020 ; return 128 byte EDID block
ARM2VC_Tag_FBAlloc               * &00040001 ; alloc framebuffer at given alignment
ARM2VC_Tag_FBRelease             * &00048001 ; release framebuffer
ARM2VC_Tag_FBBlank               * &00040002 ; blank screen
ARM2VC_Tag_FBGetPhysDimension    * &00040003 ; get physical display width/height
ARM2VC_Tag_FBTestPhysDimension   * &00044003 ; test physical display w/h
ARM2VC_Tag_FBSetPhysDimension    * &00048003 ; set physical display w/h
ARM2VC_Tag_FBGetVirtDimension    * &00040004 ; get virtual display w/h
ARM2VC_Tag_FBTestVirtDimension   * &00044004 ; test virtual display w/h
ARM2VC_Tag_FBSetVirtDimension    * &00048004 ; set virtual display w/h
ARM2VC_Tag_FBGetDepth            * &00040005 ; get display BPP
ARM2VC_Tag_FBTestDepth           * &00044005 ; test display BPP
ARM2VC_Tag_FBSetDepth            * &00048005 ; set display BPP
ARM2VC_Tag_FBGetPixelOrder       * &00040006 ; get RGB/BGR order
ARM2VC_Tag_FBTestPixelOrder      * &00044006 ; test RGB/BGR order
ARM2VC_Tag_FBSetPixelOrder       * &00048006 ; set RGB/BGR order
ARM2VC_Tag_FBGetAlphaMode        * &00040007 ; get alpha mode
ARM2VC_Tag_FBTestAlphaMode       * &00044007 ; test alpha mode
ARM2VC_Tag_FBSetAlphaMode        * &00048007 ; set alpha mode
ARM2VC_Tag_FBGetPitch            * &00040008 ; get row pitch
ARM2VC_Tag_FBGetVirtOffset       * &00040009 ; get X/Y offset of virtual display
ARM2VC_Tag_FBTestVirtOffset      * &00044009 ; test X/Y offset
ARM2VC_Tag_FBSetVirtOffset       * &00048009 ; set X/Y offset
ARM2VC_Tag_FBGetOverscan         * &0004000a ; get overscan values
ARM2VC_Tag_FBTestOverscan        * &0004400a ; test overscan values
ARM2VC_Tag_FBSetOverscan         * &0004800a ; set overscan values
ARM2VC_Tag_FBGetPalette          * &0004000b ; get full palette table
ARM2VC_Tag_FBTestPalette         * &0004400b ; test ranged update of table
ARM2VC_Tag_FBSetPalette          * &0004800b ; do ranged update of table
@


1.4
log
@Improve screen bank and palette handling
Detail:
  This change removes support for the BCMVideo$ScreenBanksEnabled system variable and replaces it with a new, single scheme for handling screen banks and palette updates
  Under the new scheme, screen bank and palette changes are deferred until somewhere halfway through the frame, at which point a single message sequence is sent to the GPU to update both the screen bank/display offset and the palette.
  Merging the screen bank and palette updates into one message sequence avoids the GPU taking two frames to process them (as it seems it has a habit of processing only one message sequence per frame), and sending the messages halfway through the frame ensures they're acted on before the start of the next frame (sending them when we receive a VSync interrupt is too late).
  The ARM timer is used to generate the interrupt that occurs halfway through the frame; this leaves HAL timer 1 free for other code. The required timer countdown value is recalculated each frame, so it should be mostly immune to any problems caused by the source clock frequency changing.
  File changes:
  - hdr/BCM2835reg - Added definitions for the ARM timer registers
  - s/BCMVideo - Remove ScreenBanksEnabled code. Disable the software pointer, as we're now guaranteed to have VCHIQ in ROM. Implement new screen bank & palette update code.
Admin:
  Tested on Raspberry Pi
  Test program shows palette updates are now in sync with screen bank changes, and if code follows the standard "wait for VSync, flip buffers" approach then there's only 1 frame of lag with no blocking, unlike the old code which could block and cut the system to half framerate or have 2+ frames of lag.


Version 0.19. Tagged as 'BCMVideo-0_19'
@
text
@d28 2
a29 1
IO_Base         *       &20000000
@


1.3
log
@Add support for GraphicsV_IICOp (EDID reading only)
Detail:
  hdr/BCM2835reg, s/BCMVideo - Add definition for the EDID read messagebox tag
  s/GraphicsV - Add an implementation of GraphicsV_IICOp which uses the message box interface to request EDID blocks from the GPU as required
Admin:
  Tested on Raspberry Pi


Version 0.16. Tagged as 'BCMVideo-0_16'
@
text
@d31 1
d33 1
d186 20
@


1.2
log
@Add GraphicsV_Render implementation. Allow utilisation of new fake_vsync_isr config.txt option for generating VSync interrupts.
Detail:
  hdr/DMA, s/BCMVideo, s/GraphicsV - Added GraphicsV_Render implementation. Uses one of the 2D-capable DMA channels to accelerate block copies/moves. Rectangle fill acceleration currently not supported.
  hdr/BCM2835reg, s/BCMVideo, s/GraphicsV - Add code to detect whether the new fake_vsync_isr firmware option (https://github.com/raspberrypi/firmware/issues/67) is enabled and if so, use it as our VSync IRQ source.
  s/HWPointer - Add toggle for hardware pointer debug to reduce debug spam
Admin:
  Tested on Raspberry Pi with high processor vectors & various firmware versions


Version 0.07. Tagged as 'BCMVideo-0_07'
@
text
@d111 1
@


1.1
log
@Add missing header file
Detail:
  hdr/BCM2835reg - New header file missing from previous commit
Admin:
  Should now build properly!


Version 0.04. Tagged as 'BCMVideo-0_04'
@
text
@d30 2
@

