head	1.5;
access;
symbols
	BCMVideo-0_53:1.5
	BCMVideo-0_52:1.5
	BCMVideo-0_51:1.5
	BCMVideo-0_50-1_50_2_1:1.5
	RPiFreeze:1.5.0.2
	BCMVideo-0_50:1.5
	BCMVideo-0_49:1.5
	BCMVideo-0_48:1.5
	BCMVideo-0_47:1.5
	BCMVideo-0_46:1.5
	BCMVideo-0_45:1.5
	BCMVideo-0_44:1.5
	BCMVideo-0_43:1.5
	BCMVideo-0_42:1.5
	BCMVideo-0_41:1.5
	BCMVideo-0_40:1.5
	BCMVideo-0_39:1.4
	BCMVideo-0_38:1.4
	BCMVideo-0_37:1.4
	BCMVideo-0_36:1.4
	BCMVideo-0_35:1.4
	BCMVideo-0_34:1.4
	BCMVideo-0_33:1.4
	BCMVideo-0_32:1.3
	BCMVideo-0_31:1.3
	BCMVideo-0_30:1.3
	BCMVideo-0_29:1.3
	BCMVideo-0_28:1.3
	BCMVideo-0_27:1.3
	BCMVideo-0_26:1.3
	BCMVideo-0_25:1.3
	BCMVideo-0_24:1.3
	BCMVideo-0_23:1.3
	BCMVideo-0_22:1.3
	BCMVideo-0_21:1.3
	BCMVideo-0_20:1.3
	BCMVideo-0_19:1.3
	BCMVideo-0_18:1.3
	BCMVideo-0_17:1.3
	BCMVideo-0_16:1.3
	BCMVideo-0_15:1.3
	BCMVideo-0_14:1.3
	BCMVideo-0_13:1.3
	BCMVideo-0_12:1.3
	BCMVideo-0_11:1.3
	BCMVideo-0_10:1.3
	BCMVideo-0_09:1.3
	BCMVideo-0_08:1.3
	BCMVideo-0_07:1.3
	BCMVideo-0_06:1.3
	BCMVideo-0_05:1.3
	BCMVideo-0_04:1.3
	BCMVideo-0_03:1.3
	BCMVideo-0_02:1.2
	BCMVideo-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2016.12.10.17.01.49;	author jlee;	state Exp;
branches;
next	1.4;
commitid	zybtuuARus1hysxz;

1.4
date	2015.08.03.07.19.33;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	q0i6lcLJlus0fNvy;

1.3
date	2012.09.02.20.13.27;	author jlee;	state Exp;
branches;
next	1.2;
commitid	Eobp7iVtciTWKZiw;

1.2
date	2012.07.23.09.31.39;	author jballance;	state Exp;
branches;
next	1.1;
commitid	xBCTlHsHqcFtwFdw;

1.1
date	2012.07.22.13.15.48;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	CVhEuMVXjStaNydw;

1.1.1.1
date	2012.07.22.13.15.48;	author jballance;	state Exp;
branches;
next	;
commitid	CVhEuMVXjStaNydw;


desc
@@


1.5
log
@Add support for GPU mode changes, vcgencmd implementation, and fix some issues with rotated displays
Detail:
  With recent firmware (~Aug 10th and newer) it's possible to issue a hdmi_timings command via vcgencmd to define custom mode timings on the fly. Make use of this feature (if available) to allow the OS to feed mode timings to the GPU instead of relying on the GPU to scale the framebuffer to the mode that was selected at boot.
  As an off-shoot of this we also get a vcgencmd *-command that's roughly equivalent to the vcgencmd command that's available under Linux
  File changes:
  - Makefile, Resources/UK/CmdHelp - *vcgencmd help text
  - s/BCMVideo - Add a few option switches to control the new behaviour. Add some generic code for interacting with VCHIQ services. Fix some issues with rotated displays (mainly 90 / 270 degree rotation)
  - s/Debug - Fix debug routines corrupting some registers
  - s/GraphicsV - Disable GraphicsV_StartupMode implementation if the builtin MDF is disabled (-> GPU mode changes are enabled)
  - s/HWPointer - Update to use the generic VCHIQ service code from s/BCMVideo
  - s/GenCmd - vcgencmd implementation. On initialisation, use it to read some of the GPU state & limits.
  - s/TVService - basic TV service implementation; enough to read the GPU state and perform mode changes
  - s/GPUMode - GPU mode change handling.
Admin:
  Tested on Raspberry Pi 1, 2, 3 with old & new firmware


Version 0.40. Tagged as 'BCMVideo-0_40'
@
text
@# Copyright 2012 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Makefile for BCMVideo

COMPONENT = BCMVideo
TARGET	  = BCMVideo
	
# By default, the shared makefiles do a lot of the work of installing a
# Messages file in ResourceFS. This is how to overrides it:
#CUSTOMRES = custom 

# By default, the shared makefiles assume you want to use CMHG to create
# your module header. This is how to override it:
CMHGFILE =

# Header export phase
#ASMHDRS   = 
#ASMCHDRS  = 
HDRS      =
OBJS     = BCMVideo

# CModule is equally useful for assembler modules. Its advantages over the
# AAmModule makefile are that you can use multiple source files (permitting
# more encapsulation, which is good programing practice) and it allows you
# to use non-postion-independent code, provided you do BL __RelocCode early
# in module initialisation.
include CModule


# Dynamic dependencies:
@


1.4
log
@Build fix
Don't set RES_OBJ to an empty string.

Version 0.33. Tagged as 'BCMVideo-0_33'
@
text
@d22 1
a22 1
CUSTOMRES = custom 
@


1.3
log
@First working version of video driver
Detail:
  This version of the driver supports 8bpp & 32bpp screen modes, and uses a software mouse pointer.
  Startup mode is forced to 1080p, 32bpp (via code in the HAL). After that, RISC OS is free to do as it pleases.
  Makefile, s/BCMVideo - Added Castle licence text
  Resources/RPIMon - Simple MDF that gets loaded on startup. Contains simple 1080p & 720p mode definitions, plus copies of definitions for numbered modes from AKF50 MDF (to ensure RISC OS doesn't freak out due to not having any fallback modes available)
  s/BCMVideo - Main bulk of video driver
  s/Debug - Debug routines
  s/GraphicsV - GraphicsV handler
  s/SWPointer - Basic software mouse pointer implementation
Admin:
  Tested on Raspberry Pi with high processor vectors
  Still a few rough edges to iron out, but code seems stable enough


Version 0.03. Tagged as 'BCMVideo-0_03'
@
text
@d21 2
a22 2
# Mesages file in ResourceFS. This is how to overrides it:
RES_OBJ = 
@


1.2
log
@Detail: corrected build issue in makefile
Admin:


Version 0.02. Tagged as 'BCMVideo-0_02'
@
text
@d1 14
d18 2
a19 1

d22 1
a22 1
RES_OBJ =
d32 1
a40 1
OBJS = BCMVideo
@


1.1
log
@Initial revision
@
text
@d13 5
d25 2
@


1.1.1.1
log
@Initial import of stub for BCMVideo module


@
text
@@
