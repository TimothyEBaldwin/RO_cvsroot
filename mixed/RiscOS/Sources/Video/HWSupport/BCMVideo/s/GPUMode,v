head	1.5;
access;
symbols
	BCMVideo-0_53:1.5
	BCMVideo-0_52:1.5
	BCMVideo-0_51:1.5
	BCMVideo-0_50-1_50_2_1:1.4
	RPiFreeze:1.4.0.2
	BCMVideo-0_50:1.4
	BCMVideo-0_49:1.3
	BCMVideo-0_48:1.3
	BCMVideo-0_47:1.3
	BCMVideo-0_46:1.3
	BCMVideo-0_45:1.3
	BCMVideo-0_44:1.2
	BCMVideo-0_43:1.2
	BCMVideo-0_42:1.2
	BCMVideo-0_41:1.2
	BCMVideo-0_40:1.1;
locks; strict;
comment	@# @;


1.5
date	2018.07.01.12.32.40;	author jlee;	state Exp;
branches;
next	1.4;
commitid	SZDeyIEUJXdXNqIA;

1.4
date	2018.04.06.23.01.20;	author jlee;	state Exp;
branches;
next	1.3;
commitid	SXoBJ1pI9Xh03rxA;

1.3
date	2017.04.13.20.32.19;	author jlee;	state Exp;
branches;
next	1.2;
commitid	qbk5tk8H0BClJpNz;

1.2
date	2016.12.15.19.43.57;	author jlee;	state Exp;
branches;
next	1.1;
commitid	AAbMoLgplY7Vh7yz;

1.1
date	2016.12.10.17.01.54;	author jlee;	state Exp;
branches;
next	;
commitid	zybtuuARus1hysxz;


desc
@@


1.5
log
@Add support for the GraphicsV overlay API and alpha-blended screen modes. Allow gamma table use to be disabled via adding 'disable_gamma' to cmdline.txt
Detail:
  s/BCMVideo - Update workspace for the new features. On startup, check to see if 'disable_gamma' is included in the firmware-managed kernel command line (i.e. from cmdline.txt in the bootloader partition), and if so disable all use of the hardware gamma tables. Update mode vet & set to allow alpha-blending in 32bpp modes.
  s/Dispmanx, s/HWPointer - Move the dispmanx-related routines out of s/HWPointer and into their own file, for re-use by the GraphicsV overlay code
  s/GPUMode - Move the command line scanning code into s/BCMVideo so it's still available if the GPUMode build switch is disabled
  s/GenCmd - Tweak how GenCmd_GetConfigInt returns values so that zero-value variables can be distinguished from errors. Check the framebuffer_ignore_alpha variable to determine if the GPU will pay attention to the FBSetAlphaMode property tag.
  s/GraphicsV - Hook up the GraphicsV overlay entries. Fix determination of whether hardware pointer is fully supported to also check the screen height.
  s/GVOverlay - Initial support for the GraphicsV hardware overlay API. It's best used in 32bpp alpha-blended screen modes, so that the overlays can be placed behind the desktop. Rotated/flipped overlays aren't supported yet.
Admin:
  Tested on Raspberry Pi 1 & 3
  Requires BCMSupport-0_08
  disable_gamma should allow people who are frequently affected by https://www.riscosopen.org/forum/forums/11/topics/10346 to use their systems, pending a proper fix once the root cause has been determined.
  Note that options in cmdline.txt should be space-separated, so to disable both GPU mode changes & gamma table use you'll want 'disable_gamma disable_mode_changes'.


Version 0.51. Tagged as 'BCMVideo-0_51'
@
text
@; Copyright 2016 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

GPUMode_Init ROUT
        Entry   "r0-r3"
        ; Mark GPU mode changes as being available if:
        ; * The user hasn't disabled them in the command line
        BL      CheckGPUModeDisable
        EXIT    VS
        ; * The display is not rotated by 90 / 270 degrees (need to teach the OS how to specify rotation in the VIDC list)
        LDR     r0, DisplayRotate
        TST     r0, #DisplayRotate_90
        EXIT    NE
        ; * TV service is available, and DVI/HDMI output is in use
        LDR     r0, TVService
        CMP     r0, #0
        EXIT    EQ
        BL      TVService_GetState
        EXIT    VS
        AND     r0, r0, #12
        CMP     r0, #4
        CMPNE   r0, #8
        EXIT    NE
        ; * hdmi_timings command (+ vcgencmd) is available
        ADR     r0, HDMITimings
        MOV     r1, #13
        SUB     sp, sp, #128
        MOV     r2, sp
        MOV     r3, #128
        BL      GenCmd_Send
        LDR     r0, [sp], #128
        EXIT    VS
        CMP     r0, #0
        EXIT    NE
      [ Debug
        BL      DebugTXStrInline
        DCB     "GPU mode changes available",10,13,0
        ALIGN
      ]
        ; Mark GPU mode changes as being available
        MOV     r0, #DisplayStatus_Changing
        MOV     r1, #Service_DisplayStatus
        LDRB    r2, GVinstance
        CMP     r2, #255
        SWINE   XOS_ServiceCall
        STR     pc, GPUModeAvailable
        CMP     r2, #255
        MOV     r0, #DisplayStatus_Changed
        SWINE   XOS_ServiceCall
        CLRV
        EXIT

GPUMode_Finalise ROUT
        Entry   "r0-r2"
        LDR     r0, GPUModeAvailable
        CMP     r0, #0
        EXIT    EQ
        ; Mark GPU mode changes as being unavailable
        MOV     r0, #DisplayStatus_Changing
        MOV     r1, #Service_DisplayStatus
        LDRB    r2, GVinstance
        CMP     r2, #255
        SWINE   XOS_ServiceCall
        MOV     r0, #0
        STR     r0, GPUModeAvailable
        CMP     r2, #255
        MOVNE   r0, #DisplayStatus_Changed
        MOVNE   r1, #Service_DisplayStatus
        SWINE   XOS_ServiceCall
        CLRV
        EXIT
        
HDMITimings
        = "hdmi_timings"
        ASSERT  . - HDMITimings = HDMITimings_Len
        = 0
        ALIGN

; In: R6 -> VIDCList
;     R8 = interlace control list item
; Out: R0 = 0 if mode OK
GPUMode_Vet ROUT
        Entry   "r1-r2"
        LDR     r0, GPUModeAvailable
        CMP     r0, #0
        EXIT    EQ ; If GPU mode changes aren't available, we don't care what the VIDC list says, so don't object to it
        ; Do a basic sanity check on the timing parameters to allow us to
        ; detect fake modes where only width + height were given
        LDR     r1, [r6, #VIDCList3_HorizSyncWidth]
        CMP     r1, #0
        LDRNE   r1, [r6, #VIDCList3_VertiSyncWidth]
        CMPNE   r1, #0
        BEQ     %FT999
        LDR     r1, [r6, #VIDCList3_HorizBackPorch]
        LDR     r2, [r6, #VIDCList3_HorizLeftBorder]
        ADD     r1, r1, r2
        LDR     r2, [r6, #VIDCList3_HorizRightBorder]
        ADD     r1, r1, r2
        LDR     r2, [r6, #VIDCList3_HorizFrontPorch]
        ADD     r1, r1, r2
        CMP     r1, #0
        BEQ     %FT999
        LDR     r1, [r6, #VIDCList3_VertiBackPorch]
        LDR     r2, [r6, #VIDCList3_VertiTopBorder]
        ADD     r1, r1, r2
        LDR     r2, [r6, #VIDCList3_VertiBottomBorder]
        ADD     r1, r1, r2
        LDR     r2, [r6, #VIDCList3_VertiFrontPorch]
        ADD     r1, r1, r2
        CMP     r1, #0
        BEQ     %FT999
        ; Interlace not supported yet
        CMP     r8, #0
        BNE     %FT999
        ; Vet against the configured GPU limits
        LDR     r1, [r6, #VIDCList3_PixelRate]
        MOV     lr, #1000
        MUL     r1, lr, r1
        LDR     r0, MinPixelClock
        CMP     r1, r0
        BLO     %FT999
        LDR     r0, MaxPixelClock
        CMP     r1, r0
        BHI     %FT999
        MOV     r0, #0
        EXIT
999
        MOV     r0, #1
        EXIT

; R1 -> buffer (GPUMode_BufLen length, word aligned)
; R6 -> VIDCList
SetGPUModeFromVIDCList ROUT
        Entry   "r0-r7"
        ; Make sure GPU mode changes are available
        LDR     r0, GPUModeAvailable
        CMP     r0, #0
        EXIT    EQ
        ; Build the hdmi_timings command
        ADR     r0, HDMITimings
        ASSERT  HDMITimings_Len = 12
        LDMIA   r0, {r2-r4}
        STMIA   r1!, {r2-r4}
        MOV     r2, #GPUMode_BufLen-HDMITimings_Len
        LDR     r0, [r6, #VIDCList3_HorizDisplaySize]
        MOV     r3, r0
        BL      AppendNumber
        LDR     r4, [r6, #VIDCList3_SyncPol]
        ASSERT  SyncPol_InvertHSync = 1
        AND     r0, r4, #SyncPol_InvertHSync
        RSB     r0, r0, #1
        BL      AppendNumber
        LDR     r0, [r6, #VIDCList3_HorizFrontPorch]
        LDR     lr, [r6, #VIDCList3_HorizRightBorder]
        ADD     r0, r0, lr
        ADD     r3, r3, r0
        BL      AppendNumber
        LDR     r0, [r6, #VIDCList3_HorizSyncWidth]
        ADD     r3, r3, r0
        BL      AppendNumber
        LDR     r0, [r6, #VIDCList3_HorizBackPorch]
        LDR     lr, [r6, #VIDCList3_HorizLeftBorder]
        ADD     r0, r0, lr
        ADD     r3, r3, r0
        BL      AppendNumber
        LDR     r0, [r6, #VIDCList3_VertiDisplaySize]
        MOV     r5, r0
        BL      AppendNumber
        ASSERT  SyncPol_InvertVSync = 2
        AND     r0, r4, #SyncPol_InvertVSync
        MOV     r0, r0, LSR #1
        RSB     r0, r0, #1
        BL      AppendNumber
        LDR     r0, [r6, #VIDCList3_VertiFrontPorch]
        LDR     lr, [r6, #VIDCList3_VertiBottomBorder]
        ADD     r0, r0, lr
        ADD     r5, r5, r0
        BL      AppendNumber
        LDR     r0, [r6, #VIDCList3_VertiSyncWidth]
        ADD     r5, r5, r0
        BL      AppendNumber
        LDR     r0, [r6, #VIDCList3_VertiBackPorch]
        LDR     lr, [r6, #VIDCList3_VertiTopBorder]
        ADD     r0, r0, lr
        ADD     r5, r5, r0
        BL      AppendNumber
        ; Interlace sync offsets (not supported yet)
        MOV     r0, #0
        BL      AppendNumber
        BL      AppendNumber
        ; Pixel repetition (not supported yet)
        BL      AppendNumber
        ; Frame rate (not sure why the GPU needs this!)
        MUL     r3, r5, r3
        LDR     r5, [r6, #VIDCList3_PixelRate]
        MOV     lr, #1000
        MUL     r5, lr, r5
        MOV     r7, r5
        DivRem  r0, r5, r3, lr, norem
        BL      AppendNumber
        ; Interlace flag (not supported yet)
        MOV     r0, #0
        BL      AppendNumber
        ; Pixel rate
        MOV     r0, r7
        BL      AppendNumber
        ; Aspect ratio
        ; Currently the OS doesn't tell us the intended aspect ratio, so we
        ; just have to guess (assume square pixels)
        ; Note that we could also just set it to 0 to let the monitor work it
        ; out for itself
        LDR     r5, [r6, #VIDCList3_HorizDisplaySize]
        LDR     r3, [r6, #VIDCList3_VertiDisplaySize]
        MOV     r5, r5, LSL #16
        DivRem  r7, r5, r3, lr, norem
        ADR     r3, Aspects
        MOV     r4, #0
        MOV     r5, #-1
10
        LDR     lr, [r3, r4, LSL #2]
        ADD     r4, r4, #1
        CMP     lr, #-1
        BEQ     %FT20
        SUBS    lr, lr, r7
        RSBLT   lr, lr, #0
        CMP     lr, r5
        MOVLO   r5, lr
        MOVLO   r0, r4
        B       %BT10
20
        BL      AppendNumber
        ; Check if this is the same as the last setting
        FRAMLDR r0,,r1
      [ Debug
        Push    "r0-r1"
        MOV     r1, r0
        BL      DebugTXS
        bl      DebugTXStrInline
        DCB     10,13,0
        ALIGN
        Pull    "r0-r1"
      ]
        ADD     r0, r0, #HDMITimings_Len
        ADRL    r2, LastGPUMode
        MOV     r3, #0
30
        LDRB    r4, [r0], #1
        LDRB    r5, [r2], #1
        EORS    r5, r5, r4
        ORR     r3, r3, r5
        STRNEB  r4, [r2, #-1]
        CMP     r4, #0
        BNE     %BT30
        CMP     r3, #0
        EXIT    EQ ; Same timings command as before, so assume the GPU is currently set to the correct mode
        FRAMLDR r0,,r1
        ; Issue the command
        SUB     r1, r1, r0
        MOV     r2, r0
        ADD     r1, r1, #1
        MOV     r3, #GPUMode_BufLen
        BL      GenCmd_Send
        EXIT    VS
        LDR     r0, [r2]
        CMP     r0, #0
        EXIT    NE
      [ Debug
        bl      DebugTXStrInline
        DCB     "hdmi_timings OK",10,13,0
        ALIGN
      ]
        ; Now switch mode
        BL      TVService_GetState
        EXIT    VS
      [ Debug
        BL      DebugHexTX4
        Push    "r0"
        MOV     r0, r1
        BL      DebugHexTX4
        MOV     r0, r2
        BL      DebugHexTX4
        Pull    "r0"
        bl      DebugTXStrInline
        DCB     "state flags",10,13,0
        ALIGN
      ]
        AND     r0, r0, #3<<2
        MOVS    r0, r0, LSR #2
        EXIT    EQ ; HDMI not on (must be TV or LCD output?), leave GPU mode alone
      [ HWPointer
        ; Changing the GPU mode will break the hardware pointer (dispmanx loses
        ; all resources?), so shut it down first
        BL      HWP_Finalise
      ]
        BL      Dispmanx_Finalise
        ; By default the mode will be group 2 mode 87
        ; However if hdmi_group=1 is specified in config.txt, it will be group 1 mode 65
        LDR     r1, ConfigHDMIGroup
        CMP     r1, #1
        MOVEQ   r2, #65
        MOVNE   r1, #2
        MOVNE   r2, #87
        BL      TVService_SetMode
      [ Debug
        BL      DebugHexTX4
        bl      DebugTXStrInline
        DCB     "mode change result",10,13,0
        ALIGN
      ]
        EXIT


        MACRO
        Aspect  $X, $Y
        DCD     ($X:SHL:16)/$Y
        MEND

Aspects
        Aspect 4, 3
        Aspect 14, 9
        Aspect 16, 9
        Aspect 5, 4
        Aspect 16, 10
        Aspect 15, 9
        Aspect 21, 9
        Aspect 64, 27
        DCD     -1

; In:
; R0 = number
; R1 -> buffer
; R2 = remaining space
; Out:
; " " + <number> + null appended to buffer
; R1, R2 updated
AppendNumber ROUT
        Entry   "r0"
        CMP     r2, #1
        MOVGT   lr, #32
        STRGTB  lr, [r1], #1
        SUBGT   r2, r2, #1
        SWI     XOS_ConvertInteger4
        EXIT

; Out:
; VS if GPU mode changes have been disabled in the kernel/OS command line
CheckGPUModeDisable ROUT
        Entry   "r6"
        ADR     r6, disable_str
        BL      CheckCmdlineTxt
        EXIT

disable_str = "disable_mode_changes", 0
        ALIGN

        END
@


1.4
log
@Avoid redundant GPU mode changes
Detail:
  s/BCMVideo - Reserve some workspace for storing the last hdmi_timings command
  s/GPUMode - Avoid changing the GPU mode if the last hdmi_timings we configured are identical to the new ones. Push hardware pointer shutdown to later in the mode change sequence as well, to avoid situations where that could be redundantly shut down.
Admin:
  Tested on Raspberry Pi 1


Version 0.50. Tagged as 'BCMVideo-0_50'
@
text
@d307 1
d360 3
a362 65
        Entry   "r0-r5"
        ; Build up a mailbox message
        MOV     r5, sp
        MOV     r4, #ARM2VC_Tag_End
        Push    "r4"                    ; End tag
cmdlinelen * 1024 ; The firmware will put a bunch of stuff on the command line by default, so be cautious with the length
        SUB     sp, sp, #cmdlinelen     ; String buffer
        LDR     r0, =ARM2VC_Tag_GetConfig
        MOV     r1, #cmdlinelen
        MOV     r2, #0
        Push    "r0-r2"                 ; Command line tag
        SUB     r0, r5, sp
        ADD     r0, r0, #8
        MOV     r1, #0
        Push    "r0-r1"                 ; Tag block header
        MOV     r0, sp
        MOV     r1, sp
        MOV     r2, #0
        SWI     XBCMSupport_SendTempPropertyBuffer
        BVS     %FT90
        ; Check success
        LDR     r0, [sp, #4]
        CMP     r0, #&80000000
        BNE     %FT90
        LDR     r0, [sp, #16]!
        TST     r0, #&80000000
        BEQ     %FT90
        BIC     r0, r0, #&80000000
        CMP     r0, #cmdlinelen
        MOVHI   r0, #cmdlinelen
        ADD     sp, sp, #4
        MOV     r1, #0
        STRB    r1, [sp, r0] ; Ensure null terminated, to simplify logic
        ; Scan the string
        MOV     r1, sp
05
        ADR     r2, disable_str
        MOV     r14, #0
10
        LDRB    r3, [r1, r14]
        LDRB    r4, [r2, r14]
        CMP     r4, #0
        BNE     %FT20
        ; Require space or null at end
        CMP     r3, #0
        CMPNE   r3, #' '
        BNE     %FT30
        SETV
        MOV     sp, r5
        EXIT
20
        CMP     r3, r4
        ADDEQ   r14, r14, #1
        BEQ     %BT10
30
        ; No match. Scan forwards until we find a space.
        LDRB    r3, [r1], #1
        CMP     r3, #' '
        BEQ     %BT05
        CMP     r3, #0
        BNE     %BT30
90
        ; Failed to find the string, exit V clear
        CLRV
        MOV     sp, r5
@


1.3
log
@Fix GPU mode changes with hdmi_group=1
Detail:
  s/GPUMode - If config.txt specifies hdmi_group=1, the custom mode created via hdmi_timings will be added as group 1 mode 65 instead of the usual group 2 mode 87. Make sure we use the appropriate settings when selecting the mode.
  s/BCMVideo, s/GenCmd - Add hdmi_group to the list of settings to read during startup
Admin:
  Tested on Raspberry Pi 1
  Fixes hang on boot when GPU mode changes are enabled and hdmi_group=1 is specified in config.txt


Version 0.45. Tagged as 'BCMVideo-0_45'
@
text
@d87 1
a87 1
        ASSERT  . - HDMITimings = 12 ; LDMIA used within SetGPUModeFromVIDCList
a150 5
      [ HWPointer
        ; Changing the GPU mode will break the hardware pointer (dispmanx loses
        ; all resources?), so shut it down first
        BL      HWP_Finalise
      ]
d153 1
d156 1
a156 1
        MOV     r2, #GPUMode_BufLen-12
d244 1
a244 1
        ; Issue the command
d255 15
d302 5
@


1.2
log
@Allow GPU mode change support to be disabled via the 'kernel' command line
Detail:
  s/GPUMode - If there's a 'disable_mode_changes' string in the command line provided by the firmware (i.e. cmdline.txt file), disable GPU mode changes
  s/BCMVideo - Fix to GPUMode {FALSE} rejecting all screen modes. Reduce max screen bank count again, after seeing an issue with 720x576x16bpp.
Admin:
  Tested on Raspberry Pi
  Should give Pi-Top users a solution for GPU mode changes breaking things:
  https://www.riscosopen.org/forum/forums/4/topics/6792


Version 0.41. Tagged as 'BCMVideo-0_41'
@
text
@d291 7
a297 2
        MOV     r1, #2
        MOV     r2, #87
@


1.1
log
@Add support for GPU mode changes, vcgencmd implementation, and fix some issues with rotated displays
Detail:
  With recent firmware (~Aug 10th and newer) it's possible to issue a hdmi_timings command via vcgencmd to define custom mode timings on the fly. Make use of this feature (if available) to allow the OS to feed mode timings to the GPU instead of relying on the GPU to scale the framebuffer to the mode that was selected at boot.
  As an off-shoot of this we also get a vcgencmd *-command that's roughly equivalent to the vcgencmd command that's available under Linux
  File changes:
  - Makefile, Resources/UK/CmdHelp - *vcgencmd help text
  - s/BCMVideo - Add a few option switches to control the new behaviour. Add some generic code for interacting with VCHIQ services. Fix some issues with rotated displays (mainly 90 / 270 degree rotation)
  - s/Debug - Fix debug routines corrupting some registers
  - s/GraphicsV - Disable GraphicsV_StartupMode implementation if the builtin MDF is disabled (-> GPU mode changes are enabled)
  - s/HWPointer - Update to use the generic VCHIQ service code from s/BCMVideo
  - s/GenCmd - vcgencmd implementation. On initialisation, use it to read some of the GPU state & limits.
  - s/TVService - basic TV service implementation; enough to read the GPU state and perform mode changes
  - s/GPUMode - GPU mode change handling.
Admin:
  Tested on Raspberry Pi 1, 2, 3 with old & new firmware


Version 0.40. Tagged as 'BCMVideo-0_40'
@
text
@d19 3
d335 73
@

