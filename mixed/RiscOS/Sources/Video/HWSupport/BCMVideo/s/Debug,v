head	1.3;
access;
symbols
	BCMVideo-0_53:1.3
	BCMVideo-0_52:1.3
	BCMVideo-0_51:1.3
	BCMVideo-0_50-1_50_2_1:1.3
	RPiFreeze:1.3.0.2
	BCMVideo-0_50:1.3
	BCMVideo-0_49:1.3
	BCMVideo-0_48:1.3
	BCMVideo-0_47:1.3
	BCMVideo-0_46:1.3
	BCMVideo-0_45:1.3
	BCMVideo-0_44:1.3
	BCMVideo-0_43:1.3
	BCMVideo-0_42:1.3
	BCMVideo-0_41:1.3
	BCMVideo-0_40:1.3
	BCMVideo-0_39:1.2
	BCMVideo-0_38:1.2
	BCMVideo-0_37:1.2
	BCMVideo-0_36:1.2
	BCMVideo-0_35:1.2
	BCMVideo-0_34:1.2
	BCMVideo-0_33:1.2
	BCMVideo-0_32:1.2
	BCMVideo-0_31:1.2
	BCMVideo-0_30:1.2
	BCMVideo-0_29:1.2
	BCMVideo-0_28:1.2
	BCMVideo-0_27:1.2
	BCMVideo-0_26:1.2
	BCMVideo-0_25:1.2
	BCMVideo-0_24:1.2
	BCMVideo-0_23:1.2
	BCMVideo-0_22:1.2
	BCMVideo-0_21:1.2
	BCMVideo-0_20:1.2
	BCMVideo-0_19:1.2
	BCMVideo-0_18:1.2
	BCMVideo-0_17:1.2
	BCMVideo-0_16:1.2
	BCMVideo-0_15:1.2
	BCMVideo-0_14:1.2
	BCMVideo-0_13:1.2
	BCMVideo-0_12:1.1
	BCMVideo-0_11:1.1
	BCMVideo-0_10:1.1
	BCMVideo-0_09:1.1
	BCMVideo-0_08:1.1
	BCMVideo-0_07:1.1
	BCMVideo-0_06:1.1
	BCMVideo-0_05:1.1
	BCMVideo-0_04:1.1
	BCMVideo-0_03:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.12.10.17.01.54;	author jlee;	state Exp;
branches;
next	1.2;
commitid	zybtuuARus1hysxz;

1.2
date	2013.04.14.14.39.32;	author jlee;	state Exp;
branches;
next	1.1;
commitid	a1V39UmGJTFXHKLw;

1.1
date	2012.09.02.20.13.33;	author jlee;	state Exp;
branches;
next	;
commitid	Eobp7iVtciTWKZiw;


desc
@@


1.3
log
@Add support for GPU mode changes, vcgencmd implementation, and fix some issues with rotated displays
Detail:
  With recent firmware (~Aug 10th and newer) it's possible to issue a hdmi_timings command via vcgencmd to define custom mode timings on the fly. Make use of this feature (if available) to allow the OS to feed mode timings to the GPU instead of relying on the GPU to scale the framebuffer to the mode that was selected at boot.
  As an off-shoot of this we also get a vcgencmd *-command that's roughly equivalent to the vcgencmd command that's available under Linux
  File changes:
  - Makefile, Resources/UK/CmdHelp - *vcgencmd help text
  - s/BCMVideo - Add a few option switches to control the new behaviour. Add some generic code for interacting with VCHIQ services. Fix some issues with rotated displays (mainly 90 / 270 degree rotation)
  - s/Debug - Fix debug routines corrupting some registers
  - s/GraphicsV - Disable GraphicsV_StartupMode implementation if the builtin MDF is disabled (-> GPU mode changes are enabled)
  - s/HWPointer - Update to use the generic VCHIQ service code from s/BCMVideo
  - s/GenCmd - vcgencmd implementation. On initialisation, use it to read some of the GPU state & limits.
  - s/TVService - basic TV service implementation; enough to read the GPU state and perform mode changes
  - s/GPUMode - GPU mode change handling.
Admin:
  Tested on Raspberry Pi 1, 2, 3 with old & new firmware


Version 0.40. Tagged as 'BCMVideo-0_40'
@
text
@; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
 [ Debug
; a2-> null terminated string
DebugTXS    ROUT
        STMFD   sp!, {a1-a2,lr}
        SUB     a2,a2,#1
1       LDRB    a1, [a2,#1]!
        TEQ     a1, #&0
        LDMEQFD sp!, {a1-a2,pc}
        BL      DebugTX
        B       %BT1

DebugHexTX
       stmfd    r13!, {r0-r3,lr}
       b        jbdt1
DebugHexTX2
       stmfd    r13!, {r0-r3,lr}
       b        jbdt2
DebugHexTX4
       stmfd    r13!, {r0-r3,lr}
       mov      r0,r0,ror #24          ; hi byte
       bl       jbdtxh
       mov      r0,r0,ror #24
       bl       jbdtxh
jbdt2
       mov      r0,r0,ror #24
       bl       jbdtxh
       mov      r0,r0,ror #24
jbdt1
       bl       jbdtxh
       mov      r0,#' '
       bl       DebugTX
       ldmfd    r13!, {r0-r3,pc}

DebugTXStrInline
       stmfd    r13!, {r0-r3}          ; lr points to prinstring, immediately
                                       ; following call, null terminated
       sub      r3,lr,#1
1      ldrb     r0,[r3,#1]!            ; pop next char, auto incr
       teq      r0,#0                  ; terminating null
       biceq    lr,r3,#3               ; round down address
       ldmeqfd  r13!,{r0-r3}
       addeq    pc,lr,#4               ; return to next word
       bl       DebugTX            ; else send, then
       b        %bt1                   ; loop

jbdtxh stmfd    r13!,{r0-r3,lr}        ; print byte as hex
       and      a4,a1,#&f              ; get low nibble
       and      a1,a1,#&f0             ; get hi nibble
       mov      a1,a1,lsr #4           ; shift to low nibble
       cmp      a1,#&9                 ; 9?
       addle    a1,a1,#&30
       addgt    a1,a1,#&37             ; convert letter if needed
       bl       DebugTX
       cmp      a4,#9
       addle    a1,a4,#&30
       addgt    a1,a4,#&37
       bl       DebugTX
       ldmfd    r13!,{r0-r3,pc}

DebugTX
     [ Debug_DADebug
       ldr      pc, dadebug_writec
     |
       stmfd    r13!,{r0-r3,r8,r9,lr}
       mov      r8, #OSHW_CallHAL
       mov      r9, #EntryNo_HAL_DebugTX
       SWI      XOS_Hardware
       ldmfd    r13!,{r0-r3,r8,r9,pc}
     ]

 ]
       END
@


1.2
log
@Rewrite message box handling to allow multiple messages to be outstanding
Detail:
  s/BCMVideo - Rewritten message box handling. The buffer in which the messages are stored is now treated as a circular buffer, allowing multiple messages to be outstanding and awaiting processing by the GPU. This means the system only needs to block waiting for a response if the sender requires a response or the buffer becomes full. In practice, this means that setting BCMVideo$ScreenBanksEnabled to 2 to disable waiting for Vinit changes will allow software to use multiple screen banks and palette updates without any blocking occuring (assuming the software doesn't generate so many messages that the buffer overflows)
  s/Debug, s/BCMVideo - Added option for debug code to use DADebug instead of HAL_DebugTX
Admin:
  Tested on Raspberry Pi


Version 0.13. Tagged as 'BCMVideo-0_13'
@
text
@d19 1
a19 1
        STMFD   sp!, {a1,lr}
d23 1
a23 1
        LDMEQFD sp!, {a2,pc}
d79 1
a79 1
       stmfd    r13!,{r0,r8,r9,lr}
d83 1
a83 1
       ldmfd    r13!,{r0,r8,r9,pc}
@


1.1
log
@First working version of video driver
Detail:
  This version of the driver supports 8bpp & 32bpp screen modes, and uses a software mouse pointer.
  Startup mode is forced to 1080p, 32bpp (via code in the HAL). After that, RISC OS is free to do as it pleases.
  Makefile, s/BCMVideo - Added Castle licence text
  Resources/RPIMon - Simple MDF that gets loaded on startup. Contains simple 1080p & 720p mode definitions, plus copies of definitions for numbered modes from AKF50 MDF (to ensure RISC OS doesn't freak out due to not having any fallback modes available)
  s/BCMVideo - Main bulk of video driver
  s/Debug - Debug routines
  s/GraphicsV - GraphicsV handler
  s/SWPointer - Basic software mouse pointer implementation
Admin:
  Tested on Raspberry Pi with high processor vectors
  Still a few rough edges to iron out, but code seems stable enough


Version 0.03. Tagged as 'BCMVideo-0_03'
@
text
@d76 3
d80 2
a81 2
       mov      r8,#0
       mov      r9, #86   ; HAL_DebugTX
d84 1
@

