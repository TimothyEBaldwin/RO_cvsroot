head	1.11;
access;
symbols
	NVidia-0_50:1.11
	NVidia-0_49:1.11
	NVidia-0_48:1.10
	NVidia-0_47:1.10
	NVidia-0_46:1.10
	NVidia-0_45:1.9
	NVidia-0_44:1.8
	NVidia-0_43:1.8
	NVidia-0_42:1.7
	NVidia-0_41:1.6
	NVidia-0_40:1.5
	NVidia-0_39:1.4
	NVidia-0_38:1.4
	NVidia-0_37:1.3
	NVidia-0_36:1.2
	NVidia-0_35:1.1
	NVidia-0_34:1.1
	NVidia-0_33:1.1
	NVidia-0_32:1.1
	NVidia-0_31:1.1;
locks; strict;
comment	@# @;


1.11
date	2014.11.02.17.26.57;	author jlee;	state Exp;
branches;
next	1.10;
commitid	wCD4tbSr1gvppDWx;

1.10
date	2014.08.04.19.28.24;	author jlee;	state Exp;
branches;
next	1.9;
commitid	kydZP8ACsfXrY4Lx;

1.9
date	2014.07.20.14.57.11;	author jlee;	state Exp;
branches;
next	1.8;
commitid	faPPUrGbHtviX7Jx;

1.8
date	2014.04.06.19.42.21;	author jlee;	state Exp;
branches;
next	1.7;
commitid	uYPRXPmN9kKlUEvx;

1.7
date	2014.03.09.17.47.24;	author jlee;	state Exp;
branches;
next	1.6;
commitid	dcVLr0SY3jBKa3sx;

1.6
date	2013.12.19.21.56.00;	author jlee;	state Exp;
branches;
next	1.5;
commitid	MvcWqBM7V1Os7Nhx;

1.5
date	2013.12.15.23.08.40;	author jlee;	state Exp;
branches;
next	1.4;
commitid	e012MULDG3xlEhhx;

1.4
date	2012.07.05.00.28.05;	author jlee;	state Exp;
branches;
next	1.3;
commitid	fmCm0StKxd1R5jbw;

1.3
date	2012.07.04.20.03.39;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	PbDH2TKmQtv8Dhbw;

1.2
date	2012.02.25.16.51.31;	author jlee;	state Exp;
branches;
next	1.1;
commitid	8arIXbrpxE0jKyUv;

1.1
date	2008.10.17.00.40.19;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Prepare for new Aemulor version
Detail:
  h/DriverInterface, s/GraphicsV, s/Module - Adjust the AemulorSupport code so that it only activates the compatibility hacks if it detects a version of Aemulor <= 2.34; the plan is for the next released version to contain proper support for the new GraphicsV calls
Admin:
  Tested on Iyonix


Version 0.49. Tagged as 'NVidia-0_49'
@
text
@; Copyright 2008 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        MACRO
        GVEntry $name
        ASSERT  . - GraphicsV_Table = GraphicsV_$name * 4
        B       GV_$name
        MEND

        MACRO
        RIEntry $name
        ASSERT  . - ReadInfo_Table = GVReadInfo_$name * 4
        B       RI_$name
        MEND

; => R4 = b0-15 reason code
;       = b16-23 head (only used for IICOp at present)
;       = b24-31 display number (default 0)
GraphicsV_Handler
        Push    "lr"
        LDRB    lr, GVinstance       ; may need another if more than 1 graphics module
        EOR     lr, r4, lr, LSL #24  ; If not our display, the check below will fail
        BIC     lr, lr, #&FF:SHL:16
        CMP     lr, #(GraphicsV_TableEnd - GraphicsV_Table) / 4
        ADDLO   pc, pc, lr, LSL #2
        Pull    "pc"
GraphicsV_Table
        Pull    "pc"                 ;   
        Pull    "pc"                 ; GV_VSync irq occurred                    
        GVEntry SetMode              ; GV_SetMode                 
        Pull    "pc"                 ; GV_SetInterlace
        GVEntry SetBlank             ; GV_SetBlank                
        GVEntry UpdatePointer        ; GV_UpdatePointer           
        GVEntry SetDMAAddress        ; GV_SetAddress              
        GVEntry VetMode              ; GV_VetMode                 
        GVEntry DisplayFeatures      ; GV_Features                
        GVEntry FramestoreAddress    ; GV_FramestoreAddress
        GVEntry WritePaletteEntry    ; GV_WritePaletteEntry       
        GVEntry WritePaletteEntries  ; GV_WritePaletteEntries     
        Pull    "pc"                 ; GV_ReadPaletteEntry
        GVEntry Render               ; GV_Render                  
        GVEntry IICOp                ; GV_IICOp                
        GVEntry SelectHead           ; GV_SelectHead
        Pull    "pc"                 ; GV_StartupMode
        GVEntry PixelFormats         ; GV_PixelFormats       
        GVEntry ReadInfo             ; GV_ReadInfo
GraphicsV_TableEnd

GV_SetMode
        Push    "r2"
        LDR     lr, [r0, #0]
        TEQ     lr, #3
        Pull    "r2,pc", NE
        BL      SetModeFromVIDCList
        MOV     r4, #1
        STR     r4, OurMode

        MOV     r4, #255*4
        ADR     lr, PaletteCache
10
        STR     r4, [lr, r4]            ; invalidate the PaletteCache by clearing all its bit 0's
        SUBS    r4, r4, #4
        BPL     %BT10

        MOV     r4, #0
        Pull    "r2,pc"

GV_SetBlank
        BL      SetBlankState
        MOV     r4, #0
        Pull    "pc"

GV_SelectHead
        BL      SelectHead
        MOV     r4, #0
        Pull    "pc"

GV_UpdatePointer
        Push    "r0-r3"
        LDR     lr, OurMode
        TEQ     lr, #0
        BEQ     %FT90
        ; check enable bit
        LDRB    r4, cursor1
        AND     r3, r4, #&FE
        AND     lr, r0, #&01
        ORR     r1, r3, lr
        TEQ     r1, r4
        STRNEB  r1, cursor1
        MOVNE   r0, #NVCRTCX_CURCTL0
        BLNE    WriteCRTC
        LDR     r0, [sp]
        TST     r1, #1
        BEQ     %FT80
        ; set position (if enabled)
        LDMFD   sp, {r0, r1}
        LDRB    r3, CurrentHead
        TST     r3, #1
        LDREQ   r3, PRAMDAC
        LDRNE   r3, PRAMDAC2
;        LDR     r3, PRAMDAC
        MOV     r2, r2, LSL #16
        MOV     r1, r1, LSL #16
        ORR     lr, r2, r1, LSR #16
        STR     lr, [r3,#&300]          ;NVDAC_CURPOS
        TST     r0, #2
        BEQ     %FT80
        LDR     r0, [sp, #12]
        LDR     r3, [r0, #4]
        LDRB    r2, [r0, #1]
        STR     r3, Cursor2bpp
        STRB    r2, CursorHeight
        BL      ChangePointerShape
80
        MOV     r4, #0
90
        Pull    "r0-r3,pc"

        MACRO
        CursorRBSwap $word, $temp1, $temp2, $temp3
        MOV     $temp3, #&001f
        ORR     $temp3, $temp3, $temp3, LSL #16 
        AND     $temp1, $word, $temp3
        AND     $temp2, $word, $temp3, LSL #10
        BIC     $word, $word, $temp3
        BIC     $word, $word, $temp3, LSL #10
        ORR     $word, $word, $temp1, LSL #10
        ORR     $word, $word, $temp2, LSR #10
        MEND
        
; We assume it's 32 pixels wide
ChangePointerShape
        Push    "r5-r11,lr"
        ldrb    r9, RBSwapMode
        ldr     r8, psCardType
        LDR     r1, CURSOR      ; r1 -> output buffer
        ADR     r5, CursorPalette
        LDRB    lr, CursorHeight
        LDR     r3, Cursor2bpp
        
; using the internal cursor buffer (rather than frame buffer)...
; type 1 cursor has normal addressing ..  pixel words accessed thus
; 0..8, 8..15, 16..23, 24..31
; type1 found on NV10 at least     
; type 2 cursor has funny addressing ..  pixel words accessed thus
; 8..15, 0..8, 24..31, 16..23
; type2 found on NV18 at least      
        MOVS    lr, lr, LSL #1  ; lr = words of data
        BEQ     %FT30
05      LDR     r2, [r3], #4
        MOV     r4, #32
10      AND     r0, r2, #2_0011
        AND     r6, r2, #2_1100
        MOV     r0, r0, LSL #1
        MOV     r6, r6, LSR #1
        LDRH    r0, [r5, r0]
        LDRH    r6, [r5, r6]
        MOV     r2, r2, LSR #4
        ORR     r0, r0, r6, LSL #16
        cmp     r8, #NV15
        cmpne   r8, #NV17
        cmpne   r8, #NV17M
        cmpne   r8, #NV18
        cmpne   r8, #NV18M
        movne   r7, r1
        bne     %ft15
        tst     r1, #&10
        addeq   r7, r1, #&10
        subne   r7, r1, #&10
15      add     r1, r1, #4
        teq     r9, #0             ; r/b cursor colour swap needed?
        beq     %ft16
        CursorRBSwap r0, r6, r10, r11
16      STR     r0, [r7]
        SUBS    r4, r4, #4
        BNE     %BT10
        SUBS    lr, lr, #1
        BNE     %BT05
        ; CURSOR is &800 aligned (and &800 in size)
30      MOV     r0, #0
35      MOVS    lr, r1, LSL #21
        STRNE   r0, [r1], #4
        BNE     %BT35
        Pull    "r5-r11,pc"

GV_SetDMAAddress
        CMP     r0, #0                  ; sets C
        TEQNE   r0, #12,2               ; = 3, clears C
        Pull    "pc", NE
        Push    "r0"                    ; GV_SetRenderAddress relies on this
        LDR     lr, OurMode
        TEQ     lr, #0
        BEQ     %FT90
        LDR     r0, FrameBufferPhys
        MOV     r4, #0
        SUB     r0, r1, r0             ; now an offset into the frame buffer
        ADR     lr, %FT90
        BCS     SetStartAddress
        BCC     SetRenderAddress
90
        Pull    "r0, pc"

GV_VetMode      ROUT
        ; Minimal mode vetting - just throw away unknown list formats,
        ; pixel formats or invalid control list items
        MOV     r4,#0
        Push    "r5-r7"
        LDR     r5,[r0,#0]
        CMP     r5,#3
        Pull    "r5-r7,pc",NE
        LDR     r5,[r0,#VIDCList3_PixelDepth]
        CMP     r5,#3
        CMPNE   r5,#4
        CMPNE   r5,#5
        Pull    "r5-r7,pc",NE
        ; Convert pixel depth to expected NColour value
        MOV     r6,#1
        MOV     r5,r6,LSL r5 ; log2bpp -> bpp
        RSB     r5,r6,r6,LSL r5 ; bpp -> ncolour
05
        ADD     r6,r0,#VIDCList3_ControlList
10        
        LDR     r7,[r6],#4
        CMP     r7,#-1
        MOVEQ   r0,#0
        Pull    "r5-r7,pc",EQ
        LDR     r14,[r6],#4
        TEQ     r7,#ControlList_ExtraBytes
        BNE     %FT20
        CMP     r14,#&800
        Pull    "r5-r7,pc",HS
        B       %BT10
20
        TEQ     r7,#ControlList_NColour
        BNE     %FT30
        CMP     r14,r5
        Pull    "r5-r7,pc",NE
        B       %BT10
30
        TEQ     r7,#ControlList_ModeFlags
        BNE     %FT40
        ; Calculate the expected ModeFlags value - look up the right entry in our pixel format list
        ADRL    r7,GVPixelFormats+4 ; 8bpp
        TEQ     r5,#255 ; EQ -> 8bpp, NE -> 16bpp, MI -> 32bpp
        ADDNE   r7,r7,#12 ; 16bpp
        ADDMI   r7,r7,#12*2 ; 32bpp
        LDR     r7,[r7]
        CMP     r7,r14
        BEQ     %BT10
        ; Extra check for 64K modes
        TEQ     r5,#255
        Pull    "r5-r7,pc",MI
        ORRNE   r7,r7,#ModeFlag_64k
        CMP     r7,r14
        Pull    "r5-r7,pc",NE
        B       %BT10
40
        TEQ     r7,#ControlList_Interlaced
        BNE     %BT10
        TEQ     r14,#0
        Pull    "r5-r7,pc",NE
        B       %BT10        

GV_DisplayFeatures
        MOV     r0, #GVDisplayFeature_HardwarePointer+GVDisplayFeature_InterlaceWithProgressiveFramestore+GVDisplayFeature_SeparateFramestore+GVDisplayFeature_CopyRectangleIsFast
        LDRB    lr, Config
        MOV     r1,     #2_001000       ; 8bpp always supported
        TST     lr, #Config_Swap16bpp
        ORREQ   r1, r1, #2_010000       ; VIDC style 16bpp supported
        TST     lr, #Config_Swap32bpp
        ORREQ   r1, r1, #2_100000       ; VIDC style 32bpp supported
      [ AemulorSupport
        ; If an old version of Aemulor is loaded, we must claim we support the
        ; standard 16bpp & 32bpp modes otherwise things may not work correctly
        ; (e.g. crash when selecting 16bpp modes)
        LDRB    lr, OldAemulor
        TEQ     lr, #0
        ORRNE   r1, r1, #2_110000
      ]
        MOV     r2, #4                  ; framestore must be word aligned
        MOV     r4, #0
        Pull    "pc"

GV_FramestoreAddress
        LDR     r1, RAMAmount
        LDR     r0, FrameBufferPhys
        MOV     r4, #0
        SUB     r1, r1, #1*1024*1024
        Pull    "pc"

GV_WritePaletteEntry ROUT
        LDR     r4, OurMode
        TEQ     r4, #0
        MOV     r4, #GraphicsV_WritePaletteEntry
        Pull    "pc", EQ
        TEQ     r0, #2                               ; sub reason code for pointer palette
        BEQ     GV_WritePaletteEntry_Pointer
        TEQ     r0, #0
        Pull    "pc", NE                             ; border palette ignored on GeForce 2
GV_WritePaletteEntry_Normal
        CMP     r2, #255
        Pull    "pc", HI
        Push    "r3"

        BIC     r4, r1, #255
        ADR     r3, PaletteCache
        LDR     lr, [r3, r2, LSL#2]
        TST     lr, #1                               ; has anyone ever written this cache entry?
        BEQ     %FT80
        BIC     lr, lr, #255
        TEQ     lr, r4
        MOVEQ   r4, #0
        Pull    "r3,pc",EQ                           ; no change,don't bother

80
        ORR     r4, r1, #1                           ; supremacy not used,so make bit 0 a flag
        STR     r4, [r3, r2, LSL#2]
        Push    "r5"
;        LDR     r3, PDIO
        LDRB    r3, CurrentHead
        TST     r3, #1
        LDREQ   r3, PDIO
        LDRNE   r3, PDIO2
        MRS     lr, CPSR
        ORR     r4, lr, #I32_bit                     ; disable IRQs
        MSR     CPSR_c, r4
        STRB    r2, [r3, #VGADACWriteAddr]
        LDRB    r5, RBSwapMode
        TEQ     r5, #0
        MOVEQ   r4, r1, LSR #24
        MOVNE   r4, r1, LSR #8
        STRB    r4, [r3, #VGADACData]
        MOV     r4, r1, LSR #16
        STRB    r4, [r3, #VGADACData]
        MOVEQ   r4, r1, LSR #8
        MOVNE   r4, r1, LSR #24
        STRB    r4, [r3, #VGADACData]                ; dribble out the entry in 8 bit slices
        MSR     CPSR_c, lr
        MOV     r4, #0
        Pull    "r5"
        Pull    "r3,pc"


GV_WritePaletteEntry_Pointer
        CMP     r2, #1
        Pull    "pc", LO                             
        CMP     r2, #3
        Pull    "pc", HI                             
        Push    "r0-r3"
        ADR     r4, CursorPalette
        ADD     r4, r4, r2, LSL #1
        AND     r0, r1, #&F8000000
        AND     r2, r1, #&0000F800
        AND     r1, r1, #&00F80000
        MOV     r2, r2, LSR #11
        ORR     r2, r2, r1, LSR #14
        ORR     r2, r2, r0, LSR #17
        ORR     r2, r2, #&8000
        STRH    r2, [r4]
        LDRB    r4, cursor1
        TST     r4, #&01
        BLNE    ChangePointerShape
        MOV     r4, #0
        Pull    "r0-r3,pc"


GV_WritePaletteEntries ROUT
        LDR     r4, OurMode
        TEQ     r4, #0
        MOV     r4, #GraphicsV_WritePaletteEntries
        Pull    "pc", EQ                             
        TEQ     r0, #2                               ; sub reason code for pointer palette
        BEQ     GV_WritePaletteEntries_Pointer
        TEQ     r0, #0
        Pull    "pc", NE                             ; border palette ignored on GeForce 2
GV_WritePaletteEntries_Normal
        CMP     r2, #255
        Pull    "pc", HI
        Push    "r1,r3,r5-r8"

        ADD     r5, r2, r3
        CMP     r5, #256
        MOVHI   r5, #256                             ; no,the palette is only 256 entries silly
        CMP     r2, r5
        BHS     %FT80

;        LDR     r3, PDIO
        LDRB    r3, CurrentHead
        TST     r3, #1
        LDREQ   r3, PDIO
        LDRNE   r3, PDIO2
        ADR     r6, PaletteCache
        LDRB    r8, RBSwapMode

        MRS     lr, CPSR
        ORR     r4, lr, #I32_bit                     ; disable IRQs
        MSR     CPSR_c, r4

10
        LDR     r12, [r1], #4                        ; palette data to write
        LDR     r4, [r6, r2, LSL#2]
        TST     r4, #1
        BEQ     %FT15                                ; unseen cache entry

        BIC     r4, r4, #255
        BIC     r7, r12, #255
        TEQ     r4, r7
        BEQ     %FT20                                ; no change,don't bother
15
        STRB    r2, [r3, #VGADACWriteAddr]           ; although the addr is autoincrementing,our palette
        TEQ     r8, #0                          
        MOVEQ   r4, r12, LSR #24                     ; cache means we may skip quite a few entries
        MOVNE   r4, r12, LSR #8                      ; cache means we may skip quite a few entries
        STRB    r4, [r3, #VGADACData]
        MOV     r4, r12, LSR #16
        STRB    r4, [r3, #VGADACData]
        MOVEQ   r4, r12, LSR #8
        MOVNE   r4, r12, LSR #24
        STRB    r4, [r3, #VGADACData]                ; dribble out the entry in 8 bit slices
        ORR     r12, r12, #1                         ; supremacy not used,so make bit 0 a flag
        STR     r12, [r6, r2, LSL#2]
20
        ADD     r2, r2, #1
        CMP     r2, r5
        BLO     %BT10
        MSR     CPSR_c, lr
80      MOV     r4,#0

        Pull    "r1,r3,r5-r8,pc"


GV_WritePaletteEntries_Pointer
        CMP     r2, #3
        Pull    "pc", HI                             
        Push    "r0-r3,r5"
        ADR     r4, CursorPalette
        ADD     r4, r4, r2, LSL #1
        ADD     r3, r2, r3
10      CMP     r2, r3
        BHS     %FT80
        LDR     r0, [r1], #4
        CMP     r2, #1
        BLO     %FT60
        AND     r5, r0, #&F8000000
        AND     lr, r0, #&0000F800
        AND     r0, r0, #&00F80000
        MOV     lr, lr, LSR #11
        ORR     lr, lr, r0, LSR #14
        ORR     lr, lr, r5, LSR #17
        ORR     lr, lr, #&8000
        STRH    lr, [r4]
60      ADD     r4, r4, #2
        ADD     r2, r2, #1
        B       %BT10
80      LDRB    r4, cursor1
        TST     r4, #&01
        BLNE    ChangePointerShape
        MOV     r4, #0
        Pull    "r0-r3,r5,pc"

GV_IICOp
        Push    "r3"
        LDRB    r3, CurrentHead
        EOR     r3, r3, r4, LSR #16
        AND     r3, r3, #1              ; Head (using the same SelectHead aliasing AND)
        BL      DoI2COp
        MOV     r4, #0
        Pull    "r3,pc"

GV_PixelFormats
        ADRL    r0, GVPixelFormats
        MOV     r1, #4
        MOV     r4, #0
 [ AemulorSupport
        ; Old versions of Aemulor don't know about the new GV_PixelFormats
        ; call, which stops their low colour mode emulation from working
        ; because they only override the BPP flags returned by
        ; GV_DisplayFeatures. If we detected that an old version is running,
        ; adjust the list of returned modes to include all the low colour ones
        LDRB    lr, OldAemulor
        TEQ     lr, #0
        ADDNE   r1, r1, #3              ; Adjust list to include low colour modes
 ]
        Pull    "pc"

GV_ReadInfo ROUT
        Push    "r0-r4"
        CMP     r0, #(ReadInfo_TableEnd - ReadInfo_Table) / 4
        SUBLO   sp, sp, #256
        ADDLO   pc, pc, r0, LSL #2
        Pull    "r0-r4,pc"
ReadInfo_Table
        RIEntry Version
        RIEntry ModuleName
        RIEntry DriverName
        RIEntry HardwareName
        RIEntry ControlListItems
ReadInfo_TableEnd

        GBLA    VersionBCD
VersionBCD SETBCD Module_Version

VersionBCDVal DCD VersionBCD<<8

ControlListItems
        DCD     ControlList_Interlaced
        DCD     ControlList_ExtraBytes
        DCD     ControlList_NColour
        DCD     ControlList_ModeFlags
        DCD     ControlList_Terminator        
ControlListItems_End

RI_Version
        ADR     r3, VersionBCDVal
        MOV     r4, #4
        B       %FT10

RI_ModuleName
        ; Either NVidia%Base or NVidia%<instance>
        ADRL    r3, ModuleTitle
        MOV     r4, #0
01
        LDRB    r0, [r3, r4]
        CMP     r0, #0
        MOVEQ   r0, #'%'
        STRB    r0, [sp, r4]
        ADD     r4, r4, #1
        BNE     %BT01
        LDRB    r0, instance
        CMP     r0, #0
        ADDNE   r0, r0, #'0'
        MOVEQ   r0, #'B'
        STRB    r0, [sp, r4]
        ADD     r4, r4, #1
        MOVEQ   r0, #'a'
        STREQB  r0, [sp, r4]
        ADDEQ   r4, r4, #1
        MOVEQ   r0, #'s'
        STREQB  r0, [sp, r4]
        ADDEQ   r4, r4, #1
        MOVEQ   r0, #'e'
        STREQB  r0, [sp, r4]
        ADDEQ   r4, r4, #1
        MOV     r0, #0
        STRB    r0, [sp, r4]
        ADD     r4, r4, #1
        MOV     r3, sp
        B       %FT10

RI_DriverName
        ADRL    r3, ModuleTitle
        MOV     r4, #0
02
        LDRB    r0, [r3, r4]
        ADD     r4, r4, #1
        TEQ     r0, #0
        BNE     %BT02
        B       %FT10

RI_HardwareName
        LDR     r0, =PCI_ReadInfo_Description+PCI_ReadInfo_Vendor
        ADD     r1, sp, #256-8
        MOV     r2, #8
        LDR     r3, PCIHandle
        SWI     XPCI_ReadInfo
        MOVVS   r2, #0
        CMP     r2, #8
        ADDNE   sp, sp, #256
        Pull    "r0-r4,pc", NE
        MOV     r4, #0
        ; Copy vendor name if provided
        ASSERT  PCI_ReadInfo_Vendor > PCI_ReadInfo_Description
        LDR     r3, [sp, #256-4]
        CMP     r3, #0
        BEQ     %FT04
03
        LDRB    r0, [r3, r4]
        CMP     r4, #128
        CMPNE   r0, #0
        MOVEQ   r0, #32
        STRB    r0, [sp, r4]
        ADD     r4, r4, #1
        BNE     %BT03
        ; Copy device description
04
        LDR     r3, [sp, #256-8]
05
        LDRB    r0, [r3], #1
        CMP     r4, #255
        MOVEQ   r0, #0
        STRB    r0, [sp, r4]
        ADD     r4, r4, #1
        CMP     r0, #0
        BNE     %BT05
        LDR     r1, [sp, #4+256]
        LDR     r2, [sp, #8+256]
        MOV     r3, sp
        B       %FT10

RI_ControlListItems
        ADRL    r3, ControlListItems
        MOV     r4, #ControlListItems_End-ControlListItems
10
        TEQ     r4, #0
        ADDEQ   sp, sp, #256
        Pull    "r0-r4,pc", EQ
        CMP     r4, r2
        SUB     lr, r2, r4
        MOVLT   r2, r4
        STR     lr, [sp, #8+256]
20
        SUBS    r2, r2, #1
        LDRGEB  r0, [r3], #1
        STRGEB  r0, [r1], #1
        BGT     %BT20
        ADD     sp, sp, #256
        MOV     r4, #0
        STR     r4, [sp, #16]
        Pull    "r0-r4,pc"

        END
@


1.10
log
@Add GraphicsV_ReadInfo implementation
Detail:
  s/GraphicsV - Added GraphicsV_ReadInfo implementation
Admin:
  Tested on Iyonix


Version 0.46. Tagged as 'NVidia-0_46'
@
text
@a276 9
      [ AemulorSupport
        ; Aemulor doesn't seem to cope correctly if we claim we don't support
        ; standard 16bpp modes (selecting a 16bpp mode will cause a crash)
        ; So when running in compatibility mode, always claim we support 16bpp,
        ; even if it's inconsistent with what GV_PixelFormats says (for the
        ; case where Aemulor isn't loaded). Our Vet call (unless intercepted by
        ; Aemulor) will still discard the mode if we don't really support it.
        MOV     r1, #2_111000
      |
d283 7
d486 1
a486 1
        ; Current versions of Aemulor don't know about the new GV_PixelFormats
d489 4
a492 12
        ; GV_DisplayFeatures. To keep these old versions of Aemulor working,
        ; call GV_DisplayFeatures on ourselves to check if we're being
        ; intercepted. If we are, adjust the list of returned modes to include
        ; all the low colour ones.
        Push    "r0-r2,r4,r9"
        LDR     r4, GVinstance
        MOV     r9, #GraphicsV
        MOV     r4, r4, LSL #24
        ORR     r4, r4, #GraphicsV_DisplayFeatures
        SWI     XOS_CallAVector
        TST     r1, #7                  ; Any of 1, 2, 4bpp supported?
        Pull    "r0-r2,r4,r9"
@


1.9
log
@Revise Interlace handling. Add support for EDID reads which require the segment pointer to be set.
Detail:
  s/Driver - Update DoI2COp to automatically write the EDID segment pointer when accessing EDID addresses >= 256. Remove IIC stop between writing the EDID offset & reading the data - was unnecessary and would cause the segment pointer to reset.
  s/GraphicsV - Remove GraphicsV_SetInterlace implementation, didn't do anything useful and is now deprecated. Make GraphicsV_SetMode reject any interlaced modes. Tweak GraphicsV_IICOp to treat head 0 as the current head and head 1 as the opposite head - makes behaviour slightly more sensible considering that there are only a couple of interfaces which support multiple heads and no way of reading the current head.
Admin:
  Tested on Iyonix


Version 0.45. Tagged as 'NVidia-0_45'
@
text
@d21 6
d57 1
d507 135
@


1.8
log
@Allow configuration of red/blue swapping
Detail:
  This change adds support for using "*Configure NVidia" to control red/blue swapping of 8bpp, 16bpp and 32bpp screen modes, on a per-card basis.
  By default 'auto' mode is used, which will use the same red/blue swapping logic as the previous version of the module
  Configuration settings are stored in our private CMOS area as returned by the PCI module
  File changes:
  - Makefile, Resources/UK/CmdHelp, Resources/UK/Messages - Added messages files. Only the CmdHelp file is used at the moment, but a main messages file is included to keep the build system happy.
  - s/Module - Add code to read and write settings from CMOS and handling for the NVidia configure item. Standalone messages handling fixed up to work the way the CModule makefile fragment expects.
  - s/Driver - Use configuration settings to decide whether to red/blue swap on a per-mode basis
  - s/GraphicsV - Updated to use a pixel format list held in workspace instead of the fixed ones that were defined here
  - s/MsgCode - Use our messages file, not the PCI modules!
  - h/DriverInterface - Updated C workspace struct to match assembler workspace definition
Admin:
  Tested in Iyonix ROM softload
  Requires Kernel-5_35-4_79_2_216 to build, and Colours-1_91 and Tungsten-0_49 to run correctly


Version 0.43. Tagged as 'NVidia-0_43'
@
text
@d36 1
a36 1
        GVEntry SetInterlace         ; GV_SetInterlace            
d245 1
a245 1
        BNE     %BT10
d261 6
a266 1
        
a466 6
; R0= 0(off)or 1(on)
GV_SetInterlace
        BL      DoSetInterlace
        MOV     r4, #0
        Pull    "pc"

d469 2
a470 1
        MOV     r3, r4, LSR #16
@


1.7
log
@Advertise GVRender_CopyRectangle as being fast
Detail:
  s/GraphicsV - Update GraphicsV_DisplayFeatures implementation to flag that CopyRectangle is fast, so that OS_SpriteOp 65 will prefer to use it over rendering all the sprite tiles manually
Admin:
  Tested on Iyonix
  Requires Kernel-5_35-4_79_2_210


Version 0.42. Tagged as 'NVidia-0_42'
@
text
@d138 1
a138 2
        ldr     r9, dacgenctrl
        and     r9, r9, #NVDAC_GENCTRL_RBSwapBit
d246 2
a247 1
        ; Calculate the expected ModeFlags value
d249 3
a251 5
        MOVEQ   r7,#ModeFlag_FullPalette
        LDRNE   r7,dacgenctrl
        ASSERT  NVDAC_GENCTRL_RBSwapBit = ModeFlag_DataFormatSub_RGB ; Convenient!
        ANDNE   r7,r7,#NVDAC_GENCTRL_RBSwapBit
        MOVMI   r7,#0                   ; Must be after NE case
d274 6
a279 4
        LDR     r1, dacgenctrl
        TST     r1, #NVDAC_GENCTRL_RBSwapBit
        MOVEQ   r1, #2_111000           ; 8,16,32bpp supported
        MOVNE   r1, #2_101000           ; New card without hardware mod for red/blue swapping; 32bpp is swapped by the card but 16bpp isn't
d329 2
a330 2
        ldr     r5, dacgenctrl
        ands    r5, r5, #NVDAC_GENCTRL_RBSwapBit
d394 1
a394 1
        ldr     r8, dacgenctrl
d412 1
a412 1
        ands    r8, r8, #NVDAC_GENCTRL_RBSwapBit
d477 1
a477 1
        LDR     r0, dacgenctrl
a478 1
        TST     r0, #NVDAC_GENCTRL_RBSwapBit
a479 2
        ADREQ   r0, PixelFormats_BGR
        ADRNE   r0, PixelFormats_RGB
a499 27
        ASSERT  GVPixelFormat_NColour = 0
        ASSERT  GVPixelFormat_ModeFlags = 4
        ASSERT  GVPixelFormat_Log2BPP = 8
        ASSERT  GVPixelFormat_Size = 12

PixelFormats_BGR
        DCD     255,ModeFlag_FullPalette,3
        DCD     65535,0,4
        DCD     65535,ModeFlag_64k,4
        DCD     -1,0,5
 [ AemulorSupport
        DCD     1,0,0
        DCD     3,0,1
        DCD     15,0,2
 ]

PixelFormats_RGB
        DCD     255,ModeFlag_FullPalette,3
        DCD     65535,ModeFlag_DataFormatSub_RGB,4
        DCD     65535,ModeFlag_64k+ModeFlag_DataFormatSub_RGB,4
        DCD     -1,0,5
 [ AemulorSupport
        DCD     1,0,0
        DCD     3,0,1
        DCD     15,0,2
 ]

@


1.6
log
@Add compatibility code for Aemulor's low colour mode emulation
Detail:
  s/GetAll, s/GraphicsV - Add a compatibility hack to detect if Aemulor is intercepting our GraphicsV calls, and if so, include 1-4bpp in the list of pixel formats we claim we support. This is enough to get the low colour mode emulation of existing Aemulor versions working again with the recent GraphicsV changes. The code can easily be disabled in the future once it's no longer needed.
Admin:
  Tested in Iyonix ROM softload with and without Aemulor Pro 2.34 loaded


Version 0.41. Tagged as 'NVidia-0_41'
@
text
@d266 1
a266 1
        MOV     r0, #GVDisplayFeature_HardwarePointer+GVDisplayFeature_InterlaceWithProgressiveFramestore+GVDisplayFeature_SeparateFramestore
@


1.5
log
@Update to use new GraphicsV registration process. Add 64K colour mode support. Advertise correct red/blue swap state in 16bpp modes depending on card type. Remove VIDC20 16bpp gamma demangle code.
Detail:
  h/DriverInterface, s/Module - Updated workspace definition
  s/Driver, s/GetAll - Remove local VIDC list type 3 definition, use Hdr:VIDCList instead. Update mode set code to add support for 64K colour modes.
  s/GraphicsV - Check for the right GraphicsV driver number. Add VetMode and PixelFormats implementations. VetMode checks for correct pixel formats and ExtraBytes control list item values, while PixelFormats returns a different list depending on whether red/blue swapping is handled by the card or by hardware mod (assuming the hardware mod has been made). Remove 16bpp gamma table demangling, the OS now supplies the data in a sensible format.
  s/Interrupts - Use correct GraphicsV driver number when sending VSync events to the OS
  s/Module - Update to use new GraphicsV registration process.
  s/NVidiaHW - Update NVDAC_GENCTRL_Mask to reflect the fact we write to the 565 mode flag.
  s/Tables - Add new register tables for 16bpp modes, based around the settings in the C sources
Admin:
  Tested in Tungsten ROM softload with FX 5500 card
  Requires HdrSrc-2_38 and Kernel-5_35-4_79_2_203


Version 0.40. Tagged as 'NVidia-0_40'
@
text
@d267 9
d280 1
d483 18
d513 5
d524 5
@


1.4
log
@Fix GraphicsV_IICOp
Detail:
  s/Driver - Fixed iicsendack to set SCL low, to match the behaviour of all the other IIC functions, thus ensuring the ack is correctly sent. Removed SPSR reference in I2CRead comment.
  s/GraphicsV - Ensure GraphicsV_IICOp preserves R3
Admin:
  Tested in Iyonix ROM softload
  Reading EDID data in blocks now works again


Version 0.38. Tagged as 'NVidia-0_38'
@
text
@d26 1
a26 1
        LDRB    lr, instance         ; may need another if more than 1 graphics module
d40 1
a40 1
        Pull    "pc"                 ; GV_VetMode                 
d45 1
a45 1
        Pull    "pc"                 ;                            
d48 3
a50 1
        GVEntry SelectHead           ; GV_SelectHead       
a68 11
        MOV     r4, #31*4
        ADRL    lr, ThirtyTwoLUT
20
        MOV     r2, r4, LSL#3     -2
        ADD     r2, r2, r4, LSR#2 +2
        ORR     r2, r2, r2, LSL#8
        ORR     r2, r2, r2, LSL#8
        STR     r2, [lr, r4]            ; initialise the 16bpp LUT to match that which the hardware sets up
        SUBS    r4, r4, #4
        BPL     %BT20

d208 57
d266 5
a270 6
        MOV     r0, #2_00010            ; 10000 .. Doesn't generate VSync IRQ
                                        ; 01000 .. separate frame buffer
                                        ; 00100 .. interlace w progressive fb
                                        ; 00010 .. have hardware pointer
                                        ; 00001 .. hardware scroll
        MOV     r1, #2_111000           ; 8,16,32bpp supported
d293 1
a293 4
        Pull    "pc", HI                             
        LDRB    r4, bpp
        TEQ     r4, #16                              ; 16bpp writes are a special case due to IOMD fudgery
        BEQ     GV_WritePaletteEntry_16bpp
a356 90
GV_WritePaletteEntry_16bpp
        Push    "r1,r3"
        SUB     r13, r13, #4
        STR     r1, [r13]
        MOV     r1, r13
        MOV     r3, #1
        ADR     lr, %ft1
        Push    "lr"
        B       GV_WritePaletteEntries_Normal
1       ADD     r13, r13, #4
        Pull    "r1,r3,pc"

GV_WritePaletteEntries_16bpp ROUT

        MACRO
        AdjPalette16 $mask, $shift, $lut, $index, $temp, $entry
        TST     $index, #255-$mask
        MOV     $entry, $entry, LSR#8
        ANDEQ   $temp, $index, #$mask
        MOVEQ   $temp, $temp, LSL#$shift
        ADDEQ   $temp, $temp, #$shift
        STREQB  $entry, [$lut, $temp]
        MEND

        ; In: r3 = count
        ;     r2 = start entry
        ;     r1 ->entries
        Push    "r1-r3,r5-r7"

        ADD     r5, r2, r3
        CMP     r5, #256
        SUBHI   r7, r5, #256                         ; no,the palette is only 256 entries silly
        SUBHI   r3, r3, r7
        ADDHI   r5, r2, r3                           ; recalculate clipped limit
        CMP     r2, r5
        BHS     %FT40

        ADRL    r5, ThirtyTwoLUT
        ADRL    r6, OldThirtyTwoLUT
        MOV     r4, #31
10
        ; First,take a copy for diffing
        LDR     r7, [r5, r4, LSL#2]
        STR     r7, [r6, r4, LSL#2]
        SUBS    r4, r4, #1
        BPL     %BT10
20
        ; Now,loop over the given entries
        LDR     r4, [r1], #4

        AdjPalette16 &1F, 2, r5, r2, r7, r4          ; red
        AdjPalette16 &3E, 1, r5, r2, r7, r4          ; green
        AdjPalette16 &7C, 0, r5, r2, r7, r4          ; blue

        ADD     r2, r2, #1
        SUBS    r3, r3, #1
        BNE     %BT20

        MRS     lr, CPSR
        ORR     r4, lr, #I32_bit                     ; disable IRQs
        MSR     CPSR_c, r4

        MOV     r4, #31
        LDRB    r3, CurrentHead
        TST     r3, #1
        LDREQ   r3, PDIO
        LDRNE   r3, PDIO2
;        LDR     r3, PDIO
30
        ; Lastly,see which entries got affected and poke them
        LDR     r7, [r5, r4, LSL#2]
        LDR     r2, [r6, r4, LSL#2]
        TEQ     r2, r7

        MOVNE   r2, r4, LSL#3
        ADDNE   r2, r2, r4, LSR#2
        STRNEB  r2, [r3, #VGADACWriteAddr]           ; although the addr is autoincrementing,
        STRNEB  r7, [r3, #VGADACData]                ; not all the entries may have changed
        MOVNE   r7, r7, LSR#8
        STRNEB  r7, [r3, #VGADACData]
        MOVNE   r7, r7, LSR#8
        STRNEB  r7, [r3, #VGADACData]                ; dribble out the entry in 8 bit slices

        SUBS    r4, r4, #1
        BPL     %BT30

        MSR     CPSR_c, lr
40
        MOV     r4, #0
        Pull    "r1-r3,r5-r7,pc"
d369 1
a369 4
        Pull    "pc", HI                             
        LDRB    r4, bpp
        TEQ     r4, #16                              ; 16bpp writes are a special case due to IOMD fudgery
        BEQ     GV_WritePaletteEntries_16bpp
d466 26
@


1.3
log
@Rework of GraphicsV 14
In the despatcher bits 16-23 are cleared (the head number), then in GV_IICOp they are inspected properly. The GV_SelectHead just does an aliasing AND operation, so any of 2 billion odd numbers will select head 1 and any of 2 billion even numbers will select head 0.
The register use in DoI2COp was eyewatering, it sort of looks like ATPCS but then passes return results in R4 (?!).
Untested due to lack of hardware, might need more work.

Version 0.37. Tagged as 'NVidia-0_37'
@
text
@d508 1
d513 1
a513 1
        Pull    "pc"
@


1.2
log
@Search for STRAP data in the new "NVidia STRAP data" HAL device. Tweak GraphicsV handler.
Detail:
  s/GetAll, s/Module - Try getting STRAP data from the "NVidia STRAP data" HAL device before resorting to the backup table held within the module. The addition of the HAL device allows STRAP data to be poked directly into compressed ROM images without any need for decompression first.
  s/GraphicsV - Tweak GraphicsV handler. Old code would have wiped the display number from R4 if the call was for this module instance but the call was left unclaimed, leading to problems if multiple display drivers are present.
Admin:
  Tested in Tungsten ROM softload


Version 0.36. Tagged as 'NVidia-0_36'
@
text
@d21 3
a23 1
; Reason code is in R4 lower bytes. bits 31..24 = display number, default 0
d28 1
a48 7
 [ {FALSE}
        B       CopyRect
        B       FillRect
        B       SetClip
        B       Sync
        B       DrawLine
 ]
a500 35
 [ {FALSE}
CopyRect
        Push    "r0-r3,r5"
        LDMIA   r0,{r0-r5}
        BL      ScreenToScreen
        MOV     r4,#0
        Pull    "r0-r3,r5,pc"

FillRect
        Push    "r0-r3"
        LDMIA   r0,{r0-r4}
        BL      RectangleFill
        MOV     r4,#0
        Pull    "r0-r3,pc"

SetClip
        Push    "r0-r3"
        LDMIA   r0,{r0-r3}
        BL      SetClipping
        MOV     r4,#0
        Pull    "r0-r3,pc"

Sync
        BL      SyncAccel
        MOV     r4, #0
        Pull    "pc"

DrawLine
        Push    "r0-r3"
        LDMIA   r0,{r0-r4}
        BL      DrawSolidLine
        MOV     r4,#0
        Pull    "r0-r3,pc"
 ]

d508 2
a513 2


@


1.1
log
@  Clean reimport of NVidia module.
Detail:
  All sources now cleared for release; should be no functional change from
  version 0.30.
Admin:
  Untested.

Version 0.31. Tagged as 'NVidia-0_31'
@
text
@d25 3
a27 5
        TEQ     lr, R4, LSR #24      ; our display?
        Pull    "pc", NE
        BIC     r4, r4, #&ff000000   ; clear display number
        CMP     r4, #(GraphicsV_TableEnd - GraphicsV_Table) / 4
        ADDLO   pc, pc, r4, LSL #2
@

