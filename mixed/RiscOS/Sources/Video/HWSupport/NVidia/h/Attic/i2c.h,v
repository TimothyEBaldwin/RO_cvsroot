head	1.2;
access;
symbols
	NVidia-0_33:1.1
	NVidia-0_32:1.1
	NVidia-0_31:1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.02.04.11.07.13;	author rsprowson;	state dead;
branches;
next	1.1;
commitid	17Pc7muxcwd1wPRv;

1.1
date	2008.10.17.00.40.19;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Change to use CModule shared makefile.
Removed the SED script preprocessing step as this only affected
nv_info.c, the script was translating unaligned reads of UINT32 and
UINT16 types - instead this one file now uses the 'memaccess' switch to
split these into LDRB's.
Delete PostAsm.s, no longer needed because of the above. MicroDelay
transplanted to use the existing delay code via an alternate entry.
NOP in fast service table changed to MOV R0,R0 as NOP is now a value v7
instruction.
Deprecated Pull sequence split out in the Service_PCI code.
Set the CPU switch to 5TE so the PLD instructions don't result in a
warning.
Compiles, but not functionally tested.

Version 0.34. Tagged as 'NVidia-0_34'
@
text
@/*
	Copyright (c) 2003, Thomas Kurschel


	Part of DDC driver
		
	I2C protocoll
*/

#ifndef _I2C_H
#define _I2C_H

#include <OS.h>

// timing for i2c bus
typedef struct i2c_timing {
	// general timing as defined by standard 
	// (in microseconds for 100kHz/400kHz mode)
	int buf;		// bus free between start and stop (4.7/1.3)
	int hd_sta;		// hold time start condition (4.0/0.6)
	int low;		// low period of clock (4.7/1.3)
	int high;		// high period of clock (4.0/0.6)
	int su_sta;		// setup time of repeated start condition (4.7/0.6)
	int hd_dat;		// hold time data (5.0/- for CBUS, 0/0 for I2C)
	int su_dat;		// setup time data (0.250/0.100)
	int r;			// maximum raise time of clock and data signal (1.0/0.3)
	int f;			// maximum fall time of clock and data signal (0.3/0.3)
	int su_sto;		// setup time for stop condition (4.0/0.6)
	
	// clock stretching limits, not part of i2c standard
	int start_timeout;	// max. delay of start condition
	int byte_timeout;	// max. delay of first bit of byte
	int bit_timeout;	// max. delay of one bit within a byte transmission
	int ack_start_timeout;	// max. delay of acknowledge start
	
	// other timeouts, not part of i2c standard
	int ack_timeout;	// timeout of waiting for acknowledge
} i2c_timing;


// set signals on bus
typedef status_t (*i2c_set_signals)( void *cookie, int scl, int sda );
// read signals from bus
typedef status_t (*i2c_get_signals)( void *cookie, int *scl, int *sda );


// i2c bus definition
typedef struct i2c_bus {
	void *cookie;					// user-defined cookie
	i2c_set_signals set_signals;	// callback to set signals
	i2c_get_signals get_signals;	// callback to detect signals
} i2c_bus;


// send and receive data via i2c bus
status_t i2c_send_receive( const i2c_bus *bus, const i2c_timing *timing,
	int slave_address, 
	const uint8 *write_buffer, size_t write_len, 
	uint8 *read_buffer, size_t read_len );

	
// fill <timing> with standard 100kHz bus timing
void i2c_get100k_timing( i2c_timing *timing );

// fill <timing> with standard 400kHz bus timing
// (as timing resolution is 1 microsecond, we cannot reach full speed!)
void i2c_get400k_timing( i2c_timing *timing );

#endif
@


1.1
log
@  Clean reimport of NVidia module.
Detail:
  All sources now cleared for release; should be no functional change from
  version 0.30.
Admin:
  Untested.

Version 0.31. Tagged as 'NVidia-0_31'
@
text
@@

