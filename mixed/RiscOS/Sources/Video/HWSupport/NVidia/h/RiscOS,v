head	1.3;
access;
symbols
	NVidia-0_50:1.3
	NVidia-0_49:1.3
	NVidia-0_48:1.3
	NVidia-0_47:1.3
	NVidia-0_46:1.3
	NVidia-0_45:1.3
	NVidia-0_44:1.3
	NVidia-0_43:1.3
	NVidia-0_42:1.3
	NVidia-0_41:1.3
	NVidia-0_40:1.3
	NVidia-0_39:1.3
	NVidia-0_38:1.3
	NVidia-0_37:1.3
	NVidia-0_36:1.3
	NVidia-0_35:1.3
	NVidia-0_34:1.2
	NVidia-0_33:1.1
	NVidia-0_32:1.1
	NVidia-0_31:1.1;
locks; strict;
comment	@# @;


1.3
date	2012.02.06.21.11.47;	author jlee;	state Exp;
branches;
next	1.2;
commitid	1bEadkJsLwPqN8Sv;

1.2
date	2012.02.04.11.07.13;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	17Pc7muxcwd1wPRv;

1.1
date	2008.10.17.00.40.19;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fix NVidia module
Detail:
  Makefile, h/RiscOS - Reintroduced use of RomOffsets script, since the compiler isn't smart enough to know that arbitrary uint32 or uint16 pointers may be misaligned. However now using inline functions instead of assembler ones (should be slightly better performance than assembler?)
  h/RiscOS - Make delay() multiply n by 10 before calling MicroDelay. Original nDelay function was using a granularity of 10us, not 1
Admin:
  Tungsten ROMs now work again


Version 0.35. Tagged as 'NVidia-0_35'
@
text
@/* Copyright 2008 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef _RISCOS_HDR_
#define _RISCOS_HDR_

// RiscOS specific h things
#include "swis.h"
#include <stdbool.h>
#include <stdlib.h>
// a few types
#define uint8  unsigned char
#define uint16 unsigned short
#define uint   unsigned int
#define uint32 unsigned int
#define uint64 unsigned long long

#define vuint8  volatile unsigned char
#define vuint16 volatile unsigned short
#define vuint32 volatile unsigned int
#define vuint64 volatile unsigned long long

#define int8   char
#define int16  short
#define int32  int
#define int64  long long

// not sure about length needed.. but need something
#define B_FILE_NAME_LENGTH 32

typedef int32  status_t;
typedef int32  ssize_t;

//#define LOG(n,x)
//#define LOG(n,x)    printf x
//#define LOG(n,x) if(n<4)printf x

enum{
	B_ERROR = -1,
	B_OK = 0,
	B_NO_ERROR = 0
};

// general purpose method of passing in si
#ifdef __riscos
#define hRPTR shared_info* si
#define hRPTR1 , shared_info* si
#define RPTR si
#define RPTR1 ,si
#define RPTRp si->
#define Float uint32
#else
#define hRPTR  void
#define hRPTR1
#define RPTR
#define RPTR1
#define RPTRp
#define Float float
#endif

/* Macros for convenient accesses to the NV chips */
#define NV_REG8(r_)    ((vuint8  *)si->MMIO)[(r_)]
#define NV_REG16(r_)   ((vuint16 *)si->MMIO)[(r_) >> 1]
#define NV_REG32(r_)   ((vuint32 *)si->MMIO)[(r_) >> 2]

/* read and write to PCI config space */
extern uint32 RdCfg(int add, uint32 PCIHandle);
extern uint32 WrCfg(int add, uint32 PCIHandle, uint32 value);
#define CFGR(A)    RdCfg(A,si->PCIHandle)
#define CFGW(A,B)  WrCfg(A,si->PCIHandle,B)

/* dual head access routines */
extern void CWriteATTR(int addr, uint32 value, uint32 value1);
extern void CWriteCRTC(int addr, uint32 value, uint32 value1);
extern uint32 CReadCRTC(int addr, uint32 value);
extern void CWriteATTR2(int addr, uint32 value, uint32 value1);
extern void CWriteCRTC2(int addr, uint32 value, uint32 value1);
extern uint32 CReadCRTC2(int addr, uint32 value);
/* read and write from CRTC indexed registers */
#define CRTCW(A,B) CWriteCRTC(NVCRTCX_##A,B,(uint32)si)
#define CRTCR(A)   CReadCRTC(NVCRTCX_##A,(uint32)si)

/* read and write from second CRTC indexed registers */
#define CRTC2W(A,B) CWriteCRTC2(NVCRTCX_##A,B,(uint32)si)
#define CRTC2R(A)   CReadCRTC2(NVCRTCX_##A,(uint32)si)


static inline uint16 MemRead16(uint8 *c)
{
  return ((uint16)c[0]) | ((uint16)(c[1]<<8));
}

static inline uint32 MemRead32(uint8 *c)
{
  return ((uint32)c[0]) | ((uint32)(c[1]<<8)) | ((uint32)(c[2]<<16)) | ((uint32)(c[3]<<24));
}
#define ROMREAD16(n) MemRead16(rom+n)
#define ROMREAD32(n) MemRead32(rom+n)

extern void Delay(int ms);
extern void MicroDelay(int us);
#define delay(n) MicroDelay((n)*10)
#define snooze delay

#define ROMSHADOW  NVCFG_ROMBASE

#define DEVID 0

#ifdef CDEBUG
#define XDebugIt_WriteC  0x6ba82
extern void PReg(unsigned int );
extern void PStr(char* );
extern void PChar(char);
#define PrReg(a) PReg(a)
#define PrStr(a) PStr(a)
#define PrChar(a) PChar(a)
#else
#define PrReg(a)
#define PrStr(a)
#define PrChar(a)
#endif

#include "DriverInterface.h"

#include "nv_globals.h"

#endif

@


1.2
log
@Change to use CModule shared makefile.
Removed the SED script preprocessing step as this only affected
nv_info.c, the script was translating unaligned reads of UINT32 and
UINT16 types - instead this one file now uses the 'memaccess' switch to
split these into LDRB's.
Delete PostAsm.s, no longer needed because of the above. MicroDelay
transplanted to use the existing delay code via an alternate entry.
NOP in fast service table changed to MOV R0,R0 as NOP is now a value v7
instruction.
Deprecated Pull sequence split out in the Service_PCI code.
Set the CPU switch to 5TE so the PLD instructions don't result in a
warning.
Compiles, but not functionally tested.

Version 0.34. Tagged as 'NVidia-0_34'
@
text
@d99 11
d113 1
a113 1
#define delay(n) MicroDelay(n)
@


1.1
log
@  Clean reimport of NVidia module.
Detail:
  All sources now cleared for release; should be no functional change from
  version 0.30.
Admin:
  Untested.

Version 0.31. Tagged as 'NVidia-0_31'
@
text
@a71 9

// macros to access rom space when we need word alignment (ARM)
extern uint16 MemRead16(uint8*);
extern uint32 MemRead32(uint8*);
#define ROMREAD16(n) MemRead16(rom+n)
#define ROMREAD32(n) MemRead32(rom+n)
//#define ROMREAD16(n) (rom[n] + (rom[n+1]<<8))
//#define ROMREAD32(n) (ROMREAD16(n) + (ROMREAD16(n+2)<<16))

d101 2
a102 2
extern void nDelay(int us);
#define delay(n) nDelay(n)
@

