head	1.5;
access;
symbols
	NVidia-0_50:1.5
	NVidia-0_49:1.5
	NVidia-0_48:1.5
	NVidia-0_47:1.4
	NVidia-0_46:1.4
	NVidia-0_45:1.4
	NVidia-0_44:1.4
	NVidia-0_43:1.4
	NVidia-0_42:1.3
	NVidia-0_41:1.3
	NVidia-0_40:1.3
	NVidia-0_39:1.3
	NVidia-0_38:1.3
	NVidia-0_37:1.3
	NVidia-0_36:1.3
	NVidia-0_35:1.3
	NVidia-0_34:1.2
	NVidia-0_33:1.1
	NVidia-0_32:1.1
	NVidia-0_31:1.1;
locks; strict;
comment	@# @;


1.5
date	2014.10.25.08.31.11;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	UVz7KNftjTqAHyVx;

1.4
date	2014.04.06.19.42.13;	author jlee;	state Exp;
branches;
next	1.3;
commitid	uYPRXPmN9kKlUEvx;

1.3
date	2012.02.06.21.11.41;	author jlee;	state Exp;
branches;
next	1.2;
commitid	1bEadkJsLwPqN8Sv;

1.2
date	2012.02.04.11.07.08;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	17Pc7muxcwd1wPRv;

1.1
date	2008.10.17.00.40.19;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Build fix
Update for BuildSys-6_60. No need to force things in ModuleLibs to blank now.

Version 0.48. Tagged as 'NVidia-0_48'
@
text
@# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Makefile for NVidia
#

COMPONENT = NVidia
OBJS      = nv_globals nv_dac nv_dac2 nv_crtc nv_crtc2 \
            nv_general _nv_info_ GetAll NewPost CLib CLibAsm
CMHGFILE  =
HDRS      =
RAMASMDEFINES += -PD "standalone SETL {TRUE}" -PD "MergedMsgs SETS \"${MERGEDMSGS}\""

include CModule

#
# Ensure that the SharedCLibrary is not used
#
ROM_LIBS  =
SA_LIBS   =
ROM_SYMS  =

#
# Ensure v5TE processor instruction set
#
ASFLAGS  += ${OPTIONS} -cpu 5TE
CFLAGS   += ${DFLAGS} ${C_NO_STKCHK} -cpu 5TE -apcs /nofp

#
# Static dependency to ensure no unaligned loads
#
_nv_info_.c: nv_info.c
        ${SED} -f scripts.RomOffsets < c.nv_info > $@@

_nv_info_.o: _nv_info_.c
        ${CC} ${CFLAGS} -o $@@ _nv_info_.c

clean::
        ${WIPE} c._nv_info_ ${WFLAGS}

# Dynamic dependencies:
@


1.4
log
@Allow configuration of red/blue swapping
Detail:
  This change adds support for using "*Configure NVidia" to control red/blue swapping of 8bpp, 16bpp and 32bpp screen modes, on a per-card basis.
  By default 'auto' mode is used, which will use the same red/blue swapping logic as the previous version of the module
  Configuration settings are stored in our private CMOS area as returned by the PCI module
  File changes:
  - Makefile, Resources/UK/CmdHelp, Resources/UK/Messages - Added messages files. Only the CmdHelp file is used at the moment, but a main messages file is included to keep the build system happy.
  - s/Module - Add code to read and write settings from CMOS and handling for the NVidia configure item. Standalone messages handling fixed up to work the way the CModule makefile fragment expects.
  - s/Driver - Use configuration settings to decide whether to red/blue swap on a per-mode basis
  - s/GraphicsV - Updated to use a pixel format list held in workspace instead of the fixed ones that were defined here
  - s/MsgCode - Use our messages file, not the PCI modules!
  - h/DriverInterface - Updated C workspace struct to match assembler workspace definition
Admin:
  Tested in Iyonix ROM softload
  Requires Kernel-5_35-4_79_2_216 to build, and Colours-1_91 and Tungsten-0_49 to run correctly


Version 0.43. Tagged as 'NVidia-0_43'
@
text
@d30 3
a32 3
CLIB      =
ROMCSTUBS =
ABSSYM    =
@


1.3
log
@Fix NVidia module
Detail:
  Makefile, h/RiscOS - Reintroduced use of RomOffsets script, since the compiler isn't smart enough to know that arbitrary uint32 or uint16 pointers may be misaligned. However now using inline functions instead of assembler ones (should be slightly better performance than assembler?)
  h/RiscOS - Make delay() multiply n by 10 before calling MicroDelay. Original nDelay function was using a granularity of 10us, not 1
Admin:
  Tungsten ROMs now work again


Version 0.35. Tagged as 'NVidia-0_35'
@
text
@a20 2
RES_OBJ   =
CUSTOMRES = custom
d23 1
a51 3
resources:
        @@${ECHO} ${COMPONENT}: no resources

@


1.2
log
@Change to use CModule shared makefile.
Removed the SED script preprocessing step as this only affected
nv_info.c, the script was translating unaligned reads of UINT32 and
UINT16 types - instead this one file now uses the 'memaccess' switch to
split these into LDRB's.
Delete PostAsm.s, no longer needed because of the above. MicroDelay
transplanted to use the existing delay code via an alternate entry.
NOP in fast service table changed to MOV R0,R0 as NOP is now a value v7
instruction.
Deprecated Pull sequence split out in the Service_PCI code.
Set the CPU switch to 5TE so the PLD instructions don't result in a
warning.
Compiles, but not functionally tested.

Version 0.34. Tagged as 'NVidia-0_34'
@
text
@d20 1
a20 1
            nv_general nv_info GetAll NewPost CLib CLibAsm
d44 8
a51 2
nv_info.o:
        ${CC} ${CFLAGS} -memaccess -L41 -o $@@ nv_info.c
@


1.1
log
@  Clean reimport of NVidia module.
Detail:
  All sources now cleared for release; should be no functional change from
  version 0.30.
Admin:
  Untested.

Version 0.31. Tagged as 'NVidia-0_31'
@
text
@a16 5
# ***********************************
# ***    C h a n g e   L i s t    ***
# ***********************************
# Date       Name         Description
# ----       ----         -----------
d19 8
a26 2
RAM_MODULE = rm.${COMPONENT}
ROM_MODULE = aof.${COMPONENT}
d29 1
a29 1
# Program specific options:
d31 3
a33 2
CHEADER1  = ${COMPONENT}
HEADER1   = ${COMPONENT}
d35 5
a39 50
#TOKHELPSRC = ${TOKENSOURCE}
#HELPSRC    = HelpTexts

RAM_OBJS  = o.GetAll ${OBJS}  

ROM_OBJS  = o.GetAll ${OBJS}

S_OBJS    = Post.s                                   

OBJS     =  o.nv_globals o.nv_dac o.nv_dac2 o.nv_crtc o.nv_crtc2 o.nv_general o.nv_info o.NewPost o.CLib o.CLibAsm

# o.nv_acc o.nv_support                     

ASFLAGS    = ${OPTIONS} -cpu 4
CFLAGS     = ${CDEBUG}
#LDFLAGS    = -MAP -Xref

# my rules
.SUFFIXES:
.SUFFIXES: .o .oj .h .s .cmhg .c
#.c.o:;      ${CC}   ${CFLAGS} -o $@@ $<
#.c.o:;     ${SED}  -f scripts.RomOffsets < $< > $<C1
#           ${SED}  -f scripts.RomOffsets < $<C1 > $<C2
#           ${SED}  -f scripts.RomOffsets < $<C2 > $<C3
.c.o:;     ${SED}  -f scripts.RomOffsets < $< > $<C3
           ${CC}   ${CDEBUG} -depend !Depend -c -ff -cpu 5TE -zps1 -apcs /nofp $<C3 -o $@@ 
#           ${RM}   $<C1
#           ${RM}   $<C2
#            ${RM}   $<C3
.s.o:;      ${AS}   ${ASFLAGS} $< $@@
.s.oj:;     ${AS}   ${ASFLAGS} $< $@@
.cmhg.h:;   ${CMHG} ${CMHGFLAGS} -d $@@ $<
.cmhg.o:;   ${CMHG} ${CMHGFLAGS} -o $@@ $<

#            ${SED}  -f scripts.UniqueMsg1 < $<C1 > $<C2
#            ${SED}  -f scripts.UniqueMsg2 < $<C2 > $<C3


include StdTools
#include ModStdRule
include RAMCModule
include ROMCModule

#Post.s: Post.c
#        ${CC} ${CDEBUG} -s -depend !Depend -ff -cpu 5TE -zps1 c.Post -o s.PostC
#        ${SED} -e "/DCQ/s/DCQ     \&00000000/DCW      0\n        DCW      \&/g" -e /IMPORT/d -e /EXPORT/d -e /codeseg/d -e /AREA/d < s.PostC > s.Post
#         ${RM} s.PostC

#o.GetAll: ${S_OBJS}
o.GetAll: ${OBJS} 
a40 2
#        ${SED} -e /IMPORT/d -e /EXPORT/d -e /codeseg/d -e /AREA/d < s.PostC > s.Post
#        ${SED} -e "/DCQ/s/DCQ     \&00000000/DCW      0\n        DCW      \&/g" -e /IMPORT/d -e /EXPORT/d -e /codeseg/d -e /AREA/d < s.PostC > s.Post
d42 1
a42 1
# Generic rules:
d44 2
a45 7
clean::
        ${WIPE} o.* ${WFLAGS}
        ${WIPE} rm ${WFLAGS}
        ${WIPE} aof ${WFLAGS}
        ${RM} s.Post
        ${WIPE} c.*C3 ${WFLAGS}
        @@echo ${COMPONENT}: cleaned 
d47 2
@

