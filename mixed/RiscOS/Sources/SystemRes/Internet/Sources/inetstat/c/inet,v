head	1.6;
access;
symbols
	Internet-5_66:1.6
	Internet-5_65:1.6
	Internet-5_64:1.6
	Internet-5_63:1.6
	Internet-5_62:1.6
	Internet-5_61:1.6
	Internet-5_60:1.6
	Internet-5_59:1.6
	Internet-5_58:1.6
	Internet-5_57:1.6
	Internet-5_56:1.6
	Internet-5_55:1.6
	Internet-5_54:1.6
	Internet-5_53:1.6
	Internet-5_52:1.6
	Internet-5_51:1.6
	Internet-5_50:1.5
	Internet-5_49:1.5
	Internet-5_48:1.5
	Internet-5_47:1.5
	Internet-5_46:1.5
	RO_5_07:1.5
	Internet-5_45:1.5
	Internet-5_44:1.5
	Internet-5_43b:1.5
	Internet-5_43a:1.5
	Internet-5_43:1.5
	Internet-5_42:1.4
	Internet-5_41:1.4
	Internet-5_40:1.4
	Internet-5_39:1.4
	Internet-5_38:1.4
	Internet-5_37:1.4
	Internet-5_36:1.4
	Internet-5_35:1.4
	Internet-5_34:1.4
	Internet-5_33:1.4
	Internet-5_32:1.4
	Internet-5_31:1.4
	Internet-5_30:1.4
	kbracey_Internet_000204:1.4
	nbingham_Internet_991119:1.4
	nbingham_Internet_991007:1.4
	nturton_Internet-0_00:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.4
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	Ursula:1.1.1.1.0.2
	Ursula_bp:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2013.05.26.17.53.31;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	7OUqgdybSpkMqaRw;

1.5
date	2003.12.03.18.17.17;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	99.07.13.11.35.29;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	99.07.08.16.50.18;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	99.07.01.12.10.02;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	98.07.06.13.39.00;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.07.06.13.39.00;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Build fixes for cc 5.70
The built in headers with cc 5.70 include new non-ANSI defines in <errno.h> which clash with some of the names in TCPIPLibs:sys/errno.h
This change extends the practice in some of the disc based utils to not include <errno.h> when __unix is not defined (since the symbol for errno is also declared as extern at the top of the TCPIPLibs copy) to avoid the duplication and hence the clash.
Built with cc 5.70, but no runtime testing.

Version 5.51. Tagged as 'Internet-5_51'
@
text
@/*
 * Copyright (c) 1983, 1988, 1993, 1995
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
/*
static char sccsid[] = "@@(#)inet.c	8.5 (Berkeley) 5/24/95";
*/
static const char rcsid[] =
	"$Id: inet,v 1.5 2003/12/03 18:17:17 bavison Exp $";
#endif /* not lint */

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/sysctl.h>
#include <sys/protosw.h>

#include <net/route.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/in_pcb.h>
#include <netinet/ip_icmp.h>
#include <netinet/icmp_var.h>
#include <netinet/igmp_var.h>
#include <netinet/ip_var.h>
#include <netinet/tcp.h>
#include <netinet/tcpip.h>
#include <netinet/tcp_seq.h>
#define TCPSTATES
#include <netinet/tcp_fsm.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>
#include <netinet/tcp_debug.h>
#include <netinet/udp.h>
#include <netinet/udp_var.h>

#include <arpa/inet.h>
#include <err.h>
#ifdef __unix
#include <errno.h>
#endif
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef __riscos
#include <sys/errno.h>
#include <unixlib.h>
#else
#include <unistd.h>
#endif
#include "netstat.h"

struct	inpcb inpcb;
struct	tcpcb tcpcb;
struct	socket sockb;

char	*inetname(struct in_addr *);
void	inetprint(struct in_addr *, int, char *, int);
extern void trimdomain(char *cp);
/*
 * Print a summary of connections related to an Internet
 * protocol.  For TCP, also give state of connection.
 * Listening processes (aflag) are suppressed unless the
 * -a (all) flag is specified.
 */
void
protopr(u_long proto, char *name)
{
	int istcp;
	static int first = 1;
	char *buf;
	const char *mibvar;
	struct tcpcb *tp;
	struct inpcb *inp;
	struct xinpgen *xig, *oxig;
	struct xsocket *so;
	size_t len;

	istcp = 0;
	switch (proto) {
	case IPPROTO_TCP:
		istcp = 1;
		mibvar = "net.inet.tcp.pcblist";
		break;
	case IPPROTO_UDP:
		mibvar = "net.inet.udp.pcblist";
		break;
	case IPPROTO_DIVERT:
		mibvar = "net.inet.divert.pcblist";
		break;
	default:
		mibvar = "net.inet.raw.pcblist";
		break;
	}
	len = 0;
	if (sysctlbyname(mibvar, 0, &len, 0, 0) < 0) {
		if (errno != ENOENT)
			warn("sysctl: %s", mibvar);
		return;
	}
	if ((buf = malloc(len)) == 0) {
		warn("malloc %lu bytes", (u_long)len);
		return;
	}
	if (sysctlbyname(mibvar, buf, &len, 0, 0) < 0) {
		warn("sysctl: %s", mibvar);
		free(buf);
		return;
	}

	oxig = xig = (struct xinpgen *)buf;
	for (xig = (struct xinpgen *)((char *)xig + xig->xig_len);
	     xig->xig_len > sizeof(struct xinpgen);
	     xig = (struct xinpgen *)((char *)xig + xig->xig_len)) {
		if (istcp) {
			tp = &((struct xtcpcb *)xig)->xt_tp;
			inp = &((struct xtcpcb *)xig)->xt_inp;
			so = &((struct xtcpcb *)xig)->xt_socket;
		} else {
			inp = &((struct xinpcb *)xig)->xi_inp;
			so = &((struct xinpcb *)xig)->xi_socket;
		}

		/* Ignore sockets for protocols other than the desired one. */
		if (so->xso_protocol != proto)
			continue;

		/* Ignore PCBs which were freed during copyout. */
		if (inp->inp_gencnt > oxig->xig_gen)
			continue;

		if (!aflag && inet_lnaof(inp->inp_laddr) == INADDR_ANY)
			continue;

		if (first) {
			printf("Active Internet connections");
			if (aflag)
				printf(" (including servers)");
			putchar('\n');
			if (Aflag)
				printf("%-8.8s ", "Socket");
			printf(Aflag ?
				"%-5.5s %-6.6s %-6.6s  %-18.18s %-18.18s %s\n" :
				"%-5.5s %-6.6s %-6.6s  %-22.22s %-22.22s %s\n",
				"Proto", "Recv-Q", "Send-Q",
				"Local Address", "Foreign Address", "(state)");
			first = 0;
		}
		if (Aflag) {
			if (istcp)
				printf("%8lx ", (u_long)inp->inp_ppcb);
			else
				printf("%8lx ", (u_long)so->so_pcb);
		}
		printf("%-5.5s %6ld %6ld ", name, so->so_rcv.sb_cc,
			so->so_snd.sb_cc);
		if (nflag) {
			inetprint(&inp->inp_laddr, (int)inp->inp_lport,
			    name, 1);
			inetprint(&inp->inp_faddr, (int)inp->inp_fport,
			    name, 1);
		} else if (inp->inp_flags & INP_ANONPORT) {
			inetprint(&inp->inp_laddr, (int)inp->inp_lport,
			    name, 1);
			inetprint(&inp->inp_faddr, (int)inp->inp_fport,
			    name, 0);
		} else {
			inetprint(&inp->inp_laddr, (int)inp->inp_lport,
			    name, 0);
			inetprint(&inp->inp_faddr, (int)inp->inp_fport,
			    name, inp->inp_lport != inp->inp_fport);
		}
		if (istcp) {
			if (tp->t_state < 0 || tp->t_state >= TCP_NSTATES)
				printf(" %d", tp->t_state);
                      else {
				printf(" %s", tcpstates[tp->t_state]);
#if defined(TF_NEEDSYN) && defined(TF_NEEDFIN)
                              /* Show T/TCP `hidden state' */
                              if (tp->t_flags & (TF_NEEDSYN|TF_NEEDFIN))
                                      putchar('*');
#endif /* defined(TF_NEEDSYN) && defined(TF_NEEDFIN) */
                      }
		}
		putchar('\n');
	}
	if (xig != oxig && xig->xig_gen != oxig->xig_gen) {
		if (oxig->xig_count > xig->xig_count) {
			printf("Some %s sockets may have been deleted.\n",
			       name);
		} else if (oxig->xig_count < xig->xig_count) {
			printf("Some %s sockets may have been created.\n",
			       name);
		} else {
			printf("Some %s sockets may have been created or deleted",
			       name);
		}
	}
	free(buf);
}

/*
 * Dump TCP statistics structure.
 */
void
tcp_stats(u_long off, char *name)
{
	struct tcpstat tcpstat;
	size_t len = sizeof tcpstat;

	if (sysctlbyname("net.inet.tcp.stats", &tcpstat, &len, 0, 0) < 0) {
		warn("sysctl: net.inet.tcp.stats");
		return;
	}

	printf ("%s:\n", name);

#define	p(f, m) if (tcpstat.f || sflag <= 1) \
    printf(m, tcpstat.f, plural(tcpstat.f))
#define	p1a(f, m) if (tcpstat.f || sflag <= 1) \
    printf(m, tcpstat.f)
#define	p2(f1, f2, m) if (tcpstat.f1 || tcpstat.f2 || sflag <= 1) \
    printf(m, tcpstat.f1, plural(tcpstat.f1), tcpstat.f2, plural(tcpstat.f2))
#define	p2a(f1, f2, m) if (tcpstat.f1 || tcpstat.f2 || sflag <= 1) \
    printf(m, tcpstat.f1, plural(tcpstat.f1), tcpstat.f2)
#define	p3(f, m) if (tcpstat.f || sflag <= 1) \
    printf(m, tcpstat.f, plurales(tcpstat.f))

	p(tcps_sndtotal, "        %lu packet%s sent\n");
	p2(tcps_sndpack,tcps_sndbyte,
		"                %lu data packet%s (%lu byte%s)\n");
	p2(tcps_sndrexmitpack, tcps_sndrexmitbyte,
		"                %lu data packet%s (%lu byte%s) retransmitted\n");
	p(tcps_mturesent, "                %lu resend%s initiated by MTU discovery\n");
	p2a(tcps_sndacks, tcps_delack,
		"                %lu ack-only packet%s (%lu delayed)\n");
	p(tcps_sndurg, "                %lu URG only packet%s\n");
	p(tcps_sndprobe, "                %lu window probe packet%s\n");
	p(tcps_sndwinup, "                %lu window update packet%s\n");
	p(tcps_sndctrl, "                %lu control packet%s\n");
	p(tcps_rcvtotal, "        %lu packet%s received\n");
	p2(tcps_rcvackpack, tcps_rcvackbyte, "                %lu ack%s (for %lu byte%s)\n");
	p(tcps_rcvdupack, "                %lu duplicate ack%s\n");
	p(tcps_rcvacktoomuch, "                %lu ack%s for unsent data\n");
	p2(tcps_rcvpack, tcps_rcvbyte,
		"                %lu packet%s (%lu byte%s) received in-sequence\n");
	p2(tcps_rcvduppack, tcps_rcvdupbyte,
		"                %lu completely duplicate packet%s (%lu byte%s)\n");
	p(tcps_pawsdrop, "                %lu old duplicate packet%s\n");
	p2(tcps_rcvpartduppack, tcps_rcvpartdupbyte,
		"                %lu packet%s with some dup. data (%lu byte%s duped)\n");
	p2(tcps_rcvoopack, tcps_rcvoobyte,
		"                %lu out-of-order packet%s (%lu byte%s)\n");
	p2(tcps_rcvpackafterwin, tcps_rcvbyteafterwin,
		"                %lu packet%s (%lu byte%s) of data after window\n");
	p(tcps_rcvwinprobe, "                %lu window probe%s\n");
	p(tcps_rcvwinupd, "                %lu window update packet%s\n");
	p(tcps_rcvafterclose, "                %lu packet%s received after close\n");
	p(tcps_rcvbadsum, "                %lu discarded for bad checksum%s\n");
	p(tcps_rcvbadoff, "                %lu discarded for bad header offset field%s\n");
	p1a(tcps_rcvshort, "                %lu discarded because packet too short\n");
	p(tcps_connattempt, "        %lu connection request%s\n");
	p(tcps_accepts, "        %lu connection accept%s\n");
	p(tcps_badsyn, "        %lu bad connection attempt%s\n");
	p(tcps_listendrop, "        %lu listen queue overflow%s\n");
	p(tcps_connects, "        %lu connection%s established (including accepts)\n");
	p2(tcps_closed, tcps_drops,
		"        %lu connection%s closed (including %lu drop%s)\n");
	p(tcps_cachedrtt, "                %lu connection%s updated cached RTT on close\n");
	p(tcps_cachedrttvar,
	  "                %lu connection%s updated cached RTT variance on close\n");
	p(tcps_cachedssthresh,
	  "                %lu connection%s updated cached ssthresh on close\n");
	p(tcps_conndrops, "        %lu embryonic connection%s dropped\n");
	p2(tcps_rttupdated, tcps_segstimed,
		"        %lu segment%s updated rtt (of %lu attempt%s)\n");
	p(tcps_rexmttimeo, "        %lu retransmit timeout%s\n");
	p(tcps_timeoutdrop, "                %lu connection%s dropped by rexmit timeout\n");
	p(tcps_persisttimeo, "        %lu persist timeout%s\n");
	p(tcps_persistdrop, "                %lu connection%s dropped by persist timeout\n");
	p(tcps_keeptimeo, "        %lu keepalive timeout%s\n");
	p(tcps_keepprobe, "                %lu keepalive probe%s sent\n");
	p(tcps_keepdrops, "                %lu connection%s dropped by keepalive\n");
	p(tcps_predack, "        %lu correct ACK header prediction%s\n");
	p(tcps_preddat, "        %lu correct data packet header prediction%s\n");
#undef p
#undef p1a
#undef p2
#undef p2a
#undef p3
}

/*
 * Dump UDP statistics structure.
 */
void
udp_stats(u_long off, char *name)
{
	struct udpstat udpstat;
	size_t len = sizeof udpstat;
	u_long delivered;

	if (sysctlbyname("net.inet.udp.stats", &udpstat, &len, 0, 0) < 0) {
		warn("sysctl: net.inet.udp.stats");
		return;
	}

	printf("%s:\n", name);
#define	p(f, m) if (udpstat.f || sflag <= 1) \
    printf(m, udpstat.f, plural(udpstat.f))
#define	p1a(f, m) if (udpstat.f || sflag <= 1) \
    printf(m, udpstat.f)
	p(udps_ipackets, "        %lu datagram%s received\n");
	p1a(udps_hdrops, "        %lu with incomplete header\n");
	p1a(udps_badlen, "        %lu with bad data length field\n");
	p1a(udps_badsum, "        %lu with bad checksum\n");
	p1a(udps_noport, "        %lu dropped due to no socket\n");
	p(udps_noportbcast,
	    "        %lu broadcast/multicast datagram%s dropped due to no socket\n");
	p1a(udps_fullsock, "        %lu dropped due to full socket buffers\n");
#if 0
	p1a(udpps_pcbhashmiss, "        %lu not for hashed pcb\n");
#endif
	delivered = udpstat.udps_ipackets -
		    udpstat.udps_hdrops -
		    udpstat.udps_badlen -
		    udpstat.udps_badsum -
		    udpstat.udps_noport -
		    udpstat.udps_noportbcast -
		    udpstat.udps_fullsock;
	if (delivered || sflag <= 1)
		printf("        %lu delivered\n", delivered);
	p(udps_opackets, "        %lu datagram%s output\n");
#undef p
#undef p1a
}

/*
 * Dump IP statistics structure.
 */
void
ip_stats(u_long off, char *name)
{
	struct ipstat ipstat;
	size_t len = sizeof ipstat;

	if (sysctlbyname("net.inet.ip.stats", &ipstat, &len, 0, 0) < 0) {
		warn("sysctl: net.inet.ip.stats");
		return;
	}

	printf("%s:\n", name);

#define	p(f, m) if (ipstat.f || sflag <= 1) \
    printf(m, ipstat.f, plural(ipstat.f))
#define	p1a(f, m) if (ipstat.f || sflag <= 1) \
    printf(m, ipstat.f)

	p(ips_total, "        %lu total packet%s received\n");
	p(ips_badsum, "        %lu bad header checksum%s\n");
	p1a(ips_toosmall, "        %lu with size smaller than minimum\n");
	p1a(ips_tooshort, "        %lu with data size < data length\n");
	p1a(ips_badhlen, "        %lu with header length < data size\n");
	p1a(ips_badlen, "        %lu with data length < header length\n");
	p1a(ips_badoptions, "        %lu with bad options\n");
	p1a(ips_badvers, "        %lu with incorrect version number\n");
	p(ips_fragments, "        %lu fragment%s received\n");
	p(ips_fragdropped, "        %lu fragment%s dropped (dup or out of space)\n");
	p(ips_fragtimeout, "        %lu fragment%s dropped after timeout\n");
	p(ips_reassembled, "        %lu packet%s reassembled ok\n");
	p(ips_delivered, "        %lu packet%s for this host\n");
	p(ips_noproto, "        %lu packet%s for unknown/unsupported protocol\n");
	p(ips_forward, "        %lu packet%s forwarded");
#if 0
	p(ips_fastforward, " (%lu packet%s fast forwarded)");
#endif
	if (ipstat.ips_forward || sflag <= 1)
		putchar('\n');
	p(ips_cantforward, "        %lu packet%s not forwardable\n");
	p(ips_notmember,
	  "        %lu packet%s received for unknown multicast group\n");
	p(ips_redirectsent, "        %lu redirect%s sent\n");
	p(ips_localout, "        %lu packet%s sent from this host\n");
	p(ips_rawout, "        %lu packet%s sent with fabricated ip header\n");
	p(ips_odropped,
	  "        %lu output packet%s dropped due to no bufs, etc.\n");
	p(ips_noroute, "        %lu output packet%s discarded due to no route\n");
	p(ips_fragmented, "        %lu output datagram%s fragmented\n");
	p(ips_ofragments, "        %lu fragment%s created\n");
	p(ips_cantfrag, "        %lu datagram%s that can't be fragmented\n");
#undef p
#undef p1a
}

static	char *icmpnames[] = {
	"echo reply",
	"#1",
	"#2",
	"destination unreachable",
	"source quench",
	"routing redirect",
	"#6",
	"#7",
	"echo",
	"router advertisement",
	"router solicitation",
	"time exceeded",
	"parameter problem",
	"time stamp",
	"time stamp reply",
	"information request",
	"information request reply",
	"address mask request",
	"address mask reply",
};

/*
 * Dump ICMP statistics.
 */
void
icmp_stats(u_long off, char *name)
{
	struct icmpstat icmpstat;
	int i, first;
	int mib[4];		/* CTL_NET + PF_INET + IPPROTO_ICMP + req */
	size_t len;

	mib[0] = CTL_NET;
	mib[1] = PF_INET;
	mib[2] = IPPROTO_ICMP;
	mib[3] = ICMPCTL_STATS;

	len = sizeof icmpstat;
	memset(&icmpstat, 0, len);
	if (sysctl(mib, 4, &icmpstat, &len, (void *)0, 0) < 0)
		return;		/* XXX should complain, but not traditional */

	printf("%s:\n", name);

#define	p(f, m) if (icmpstat.f || sflag <= 1) \
    printf(m, icmpstat.f, plural(icmpstat.f))
#define	p1a(f, m) if (icmpstat.f || sflag <= 1) \
    printf(m, icmpstat.f)

	p(icps_error, "        %lu call%s to icmp_error\n");
	p(icps_oldicmp,
	    "        %lu error%s not generated 'cuz old message was icmp\n");
	for (first = 1, i = 0; i < ICMP_MAXTYPE + 1; i++)
		if (icmpstat.icps_outhist[i] != 0) {
			if (first) {
				printf("        Output histogram:\n");
				first = 0;
			}
			printf("                %s: %lu\n", icmpnames[i],
				icmpstat.icps_outhist[i]);
		}
	p(icps_badcode, "        %lu message%s with bad code fields\n");
	p(icps_tooshort, "        %lu message%s < minimum length\n");
	p(icps_checksum, "        %lu bad checksum%s\n");
	p(icps_badlen, "        %lu message%s with bad length\n");
#if 0
	p1a(icps_bmcastecho, "        %lu multicast echo requests ignored\n");
	p1a(icps_bmcasttstamp, "        %lu multicast timestamp requests ignored\n");
#endif
	for (first = 1, i = 0; i < ICMP_MAXTYPE + 1; i++)
		if (icmpstat.icps_inhist[i] != 0) {
			if (first) {
				printf("        Input histogram:\n");
				first = 0;
			}
			printf("                %s: %lu\n", icmpnames[i],
				icmpstat.icps_inhist[i]);
		}
	p(icps_reflect, "        %lu message response%s generated\n");
#undef p
#undef p1a
	mib[3] = ICMPCTL_MASKREPL;
	len = sizeof i;
	if (sysctl(mib, 4, &i, &len, (void *)0, 0) < 0)
		return;
	printf("        ICMP address mask responses are %sabled\n",
	       i ? "en" : "dis");
}

/*
 * Dump IGMP statistics structure.
 */
void
igmp_stats(u_long off, char *name)
{
	struct igmpstat igmpstat;
	size_t len = sizeof igmpstat;

	if (sysctlbyname("net.inet.igmp.stats", &igmpstat, &len, 0, 0) < 0) {
		warn("sysctl: net.inet.igmp.stats");
		return;
	}

	printf("%s:\n", name);

#define	p(f, m) if (igmpstat.f || sflag <= 1) \
    printf(m, igmpstat.f, plural(igmpstat.f))
#define	py(f, m) if (igmpstat.f || sflag <= 1) \
    printf(m, igmpstat.f, igmpstat.f != 1 ? "ies" : "y")
	p(igps_rcv_total, "        %u message%s received\n");
        p(igps_rcv_tooshort, "        %u message%s received with too few bytes\n");
        p(igps_rcv_badsum, "        %u message%s received with bad checksum\n");
        py(igps_rcv_queries, "        %u membership quer%s received\n");
        py(igps_rcv_badqueries, "        %u membership quer%s received with invalid field(s)\n");
        p(igps_rcv_reports, "        %u membership report%s received\n");
        p(igps_rcv_badreports, "        %u membership report%s received with invalid field(s)\n");
        p(igps_rcv_ourreports, "        %u membership report%s received for groups to which we belong\n");
        p(igps_snd_reports, "        %u membership report%s sent\n");
#undef p
#undef py
}

/*
 * Pretty print an Internet address (net address + port).
 */
void
inetprint(register struct in_addr *in, int port, char *proto,
          int numeric)
{
	struct servent *sp = 0;
	char line[80], *cp;
	int width;

	sprintf(line, "%.*s.", (Aflag && !numeric) ? 12 : 16, inetname(in));
	cp = index(line, '\0');
	if (!numeric && port)
		sp = getservbyport((int)port, proto);
	if (sp || port == 0)
		sprintf(cp, "%.15s", sp ? sp->s_name : "*");
	else
		sprintf(cp, "%d", ntohs((u_short)port));
	width = Aflag ? 18 : 22;
	printf(" %-*.*s", width, width, line);
}

/*
 * Construct an Internet address representation.
 * If the nflag has been supplied, give
 * numeric value, otherwise try for symbolic name.
 */
char *
inetname(struct in_addr *inp)
{
	register char *cp;
	static char line[MAXHOSTNAMELEN + 1];
	struct hostent *hp;
	struct netent *np;

	cp = 0;
	if (!nflag && inp->s_addr != INADDR_ANY) {
		int net = inet_netof(*inp);
		int lna = inet_lnaof(*inp);

		if (lna == INADDR_ANY) {
			np = getnetbyaddr(net, AF_INET);
			if (np)
				cp = np->n_name;
		}
		if (cp == 0) {
			hp = gethostbyaddr((char *)inp, sizeof (*inp), AF_INET);
			if (hp) {
				cp = hp->h_name;
				trimdomain(cp);
			}
		}
	}
	if (inp->s_addr == INADDR_ANY)
		strcpy(line, "*");
	else if (cp) {
		strncpy(line, cp, sizeof(line) - 1);
		line[sizeof(line) - 1] = '\0';
	} else {
		inp->s_addr = ntohl(inp->s_addr);
#define C(x)	((u_int)((x) & 0xff))
		sprintf(line, "%u.%u.%u.%u", C(inp->s_addr >> 24),
		    C(inp->s_addr >> 16), C(inp->s_addr >> 8), C(inp->s_addr));
	}
	return (line);
}
@


1.5
log
@ANSIized.

Version 5.43. Tagged as 'Internet-5_43'
@
text
@d39 1
a39 1
	"$Id: inet,v 1.4 1999/07/13 11:35:29 kbracey Exp $";
d71 1
d73 1
@


1.4
log
@New inetstat that uses sysctl instead of kvm_nread. Main visible difference
is that raw sockets are listed, and there is no danger of garbage being
printed if a socket opens or closes while running.

New sysctl that handles Internet 5.31's new sysctl code. No longer has any
hard-coded knowledge of any sysctls.
@
text
@d39 1
a39 1
	"$Id: inet.c,v 1.31 1999/03/10 17:25:42 des Exp $";
d90 1
a90 1

d98 1
a98 3
protopr(proto, name)
	u_long proto;		/* for sysctl version we pass proto # */
	char *name;
d237 1
a237 3
tcp_stats(off, name)
	u_long off;
	char *name;
d328 1
a328 3
udp_stats(off, name)
	u_long off;
	char *name;
d373 1
a373 3
ip_stats(off, name)
	u_long off;
	char *name;
d452 1
a452 3
icmp_stats(off, name)
	u_long off;
	char *name;
d520 1
a520 3
igmp_stats(off, name)
	u_long off;
	char *name;
d553 2
a554 5
inetprint(in, port, proto,numeric)
	register struct in_addr *in;
	int port;
	char *proto;
	int numeric;
d578 1
a578 2
inetname(inp)
	struct in_addr *inp;
@


1.3
log
@Tweaks for latest Internet/TCPIPLibs.
InetStat can now tell which ports are dynamically assigned and doesn't attempt
to look up their names.
@
text
@d77 1
d98 2
a99 2
protopr(off, name)
	u_long off;
a101 2
	struct inpcbhead head;
	register struct inpcb *prev, *next;
d104 7
a110 3
#ifdef __riscos
	struct inpcb *inp = &inpcb; /* Transitional hack */
#endif
d112 29
a140 1
	if (off == 0)
d142 1
d144 11
a154 8
	istcp = strcmp(name, "tcp") == 0;
	kread(off, (char *)&head, sizeof (struct inpcbhead));
	prev = (struct inpcb *)off;

	for (next = head.lh_first; next != NULL; next = inpcb.inp_list.le_next) {
		if (kread((u_long)next, (char *)&inpcb, sizeof (inpcb))) {
			printf("???\n");
			break;
d156 10
a165 3
		if (!aflag &&
		  inet_lnaof(inpcb.inp_laddr) == INADDR_ANY) {
			prev = next;
d167 1
a167 12
		}
		if (kread((u_long)inpcb.inp_socket, (char *)&sockb, sizeof (sockb))) {
			printf("???\n");
			break;
		};
		if (istcp) {
			if (kread((u_long)inpcb.inp_ppcb,
			    (char *)&tcpcb, sizeof (tcpcb))) {
				printf("???\n");
				break;
			};
		}
d184 1
a184 1
				printf("%8lx ", (u_long)inpcb.inp_ppcb);
d186 1
a186 1
				printf("%8lx ", (u_long)next);
d188 2
a189 2
		printf("%-5.5s %6ld %6ld ", name, sockb.so_rcv.sb_cc,
			sockb.so_snd.sb_cc);
d207 2
a208 2
			if (tcpcb.t_state < 0 || tcpcb.t_state >= TCP_NSTATES)
				printf(" %d", tcpcb.t_state);
d210 1
a210 1
				printf(" %s", tcpstates[tcpcb.t_state]);
d213 1
a213 1
                              if (tcpcb.t_flags & (TF_NEEDSYN|TF_NEEDFIN))
a218 1
		prev = next;
d220 13
d244 1
d246 2
a247 1
	if (off == 0)
d249 2
a251 1
	kread(off, (char *)&tcpstat, sizeof (tcpstat));
d337 1
d340 2
a341 1
	if (off == 0)
d343 2
a344 1
	kread(off, (char *)&udpstat, sizeof (udpstat));
d384 1
d386 2
a387 1
	if (off == 0)
d389 2
a390 1
	kread(off, (char *)&ipstat, sizeof (ipstat));
d535 1
d537 2
a538 1
	if (off == 0)
d540 2
a541 1
	kread(off, (char *)&igmpstat, sizeof (igmpstat));
@


1.2
log
@InetStat and Route updated from FreeBSD. Particular items of note:
   Extra stats from InetStat, such as unwanted multicasts.
   Route now allows syntax like "route add 136.170.33/24 hobbit".
   InetStat -r now shows netmasks like 136.170.128/21.
More updates will be incorporated if/when Internet gets more updates.
@
text
@d105 3
a158 1
#if 0
a174 4
#else
		inetprint(&inpcb.inp_laddr, (int)inpcb.inp_lport, name, nflag);
		inetprint(&inpcb.inp_faddr, (int)inpcb.inp_fport, name, nflag);
#endif
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1983, 1988, 1993
d35 5
a39 1
static char sccsid[] = "@@(#)inet.c	8.4 (Berkeley) 4/20/94";
a41 3
#ifdef __riscos
#include <sys/time.h>
#endif
d43 1
d46 1
a46 1
#include <sys/mbuf.h>
a47 1
#include <sys/queue.h>
d70 2
d74 1
d88 1
a88 1
void	inetprint(struct in_addr *, int, char *);
d140 1
a140 1
				printf("%-8.8s ", "PCB");
d148 1
a148 1
		if (Aflag)
d150 1
a150 1
				printf("%8x ", inpcb.inp_ppcb);
d152 3
a154 2
				printf("%8x ", next);
		printf("%-5.5s %6d %6d ", name, sockb.so_rcv.sb_cc,
d156 21
a176 2
		inetprint(&inpcb.inp_laddr, (int)inpcb.inp_lport, name);
		inetprint(&inpcb.inp_faddr, (int)inpcb.inp_fport, name);
d211 2
d215 2
d220 1
a220 1
	p(tcps_sndtotal, "        %d packet%s sent\n");
d222 1
a222 1
		"                %d data packet%s (%d byte%s)\n");
d224 12
a235 11
		"                %d data packet%s (%d byte%s) retransmitted\n");
	p2(tcps_sndacks, tcps_delack,
		"                %d ack-only packet%s (%d delayed)\n");
	p(tcps_sndurg, "                %d URG only packet%s\n");
	p(tcps_sndprobe, "                %d window probe packet%s\n");
	p(tcps_sndwinup, "                %d window update packet%s\n");
	p(tcps_sndctrl, "                %d control packet%s\n");
	p(tcps_rcvtotal, "        %d packet%s received\n");
	p2(tcps_rcvackpack, tcps_rcvackbyte, "                %d ack%s (for %d byte%s)\n");
	p(tcps_rcvdupack, "                %d duplicate ack%s\n");
	p(tcps_rcvacktoomuch, "                %d ack%s for unsent data\n");
d237 1
a237 1
		"                %d packet%s (%d byte%s) received in-sequence\n");
d239 2
a240 2
		"                %d completely duplicate packet%s (%d byte%s)\n");
	p(tcps_pawsdrop, "                %d old duplicate packet%s\n");
d242 1
a242 1
		"                %d packet%s with some dup. data (%d byte%s duped)\n");
d244 1
a244 1
		"                %d out-of-order packet%s (%d byte%s)\n");
d246 12
a257 10
		"                %d packet%s (%d byte%s) of data after window\n");
	p(tcps_rcvwinprobe, "                %d window probe%s\n");
	p(tcps_rcvwinupd, "                %d window update packet%s\n");
	p(tcps_rcvafterclose, "                %d packet%s received after close\n");
	p(tcps_rcvbadsum, "                %d discarded for bad checksum%s\n");
	p(tcps_rcvbadoff, "                %d discarded for bad header offset field%s\n");
	p(tcps_rcvshort, "                %d discarded because packet too short\n");
	p(tcps_connattempt, "        %d connection request%s\n");
	p(tcps_accepts, "        %d connection accept%s\n");
	p(tcps_connects, "        %d connection%s established (including accepts)\n");
d259 2
a260 2
		"        %d connection%s closed (including %d drop%s)\n");
	p(tcps_cachedrtt, "                %d connection%s updated cached RTT on close\n");
d262 1
a262 1
	  "                %d connection%s updated cached RTT variance on close\n");
d264 2
a265 2
	  "                %d connection%s updated cached ssthresh on close\n");
	p(tcps_conndrops, "        %d embryonic connection%s dropped\n");
d267 10
a276 10
		"        %d segment%s updated rtt (of %d attempt%s)\n");
	p(tcps_rexmttimeo, "        %d retransmit timeout%s\n");
	p(tcps_timeoutdrop, "                %d connection%s dropped by rexmit timeout\n");
	p(tcps_persisttimeo, "        %d persist timeout%s\n");
	p(tcps_persistdrop, "                %d connection%s dropped by persist timeout\n");
	p(tcps_keeptimeo, "        %d keepalive timeout%s\n");
	p(tcps_keepprobe, "                %d keepalive probe%s sent\n");
	p(tcps_keepdrops, "                %d connection%s dropped by keepalive\n");
	p(tcps_predack, "        %d correct ACK header prediction%s\n");
	p(tcps_preddat, "        %d correct data packet header prediction%s\n");
d278 1
d280 1
d301 13
a313 7
	p(udps_ipackets, "        %u datagram%s received\n");
	p(udps_hdrops, "        %u with incomplete header\n");
	p(udps_badlen, "        %u with bad data length field\n");
	p(udps_badsum, "        %u with bad checksum\n");
	p(udps_noport, "        %u dropped due to no socket\n");
	p(udps_noportbcast, "        %u broadcast/multicast datagram%s dropped due to no socket\n");
	p(udps_fullsock, "        %u dropped due to full socket buffers\n");
d322 2
a323 2
		printf("        %u delivered\n", delivered);
	p(udps_opackets, "        %u datagram%s output\n");
d325 1
d345 2
d348 32
a379 24
	p(ips_total, "        %u total packet%s received\n");
	p(ips_badsum, "        %u bad header checksum%s\n");
	p(ips_toosmall, "        %u with size smaller than minimum\n");
	p(ips_tooshort, "        %u with data size < data length\n");
	p(ips_badhlen, "        %u with header length < data size\n");
	p(ips_badlen, "        %u with data length < header length\n");
	p(ips_badoptions, "        %u with bad options\n");
	p(ips_badvers, "        %u with incorrect version number\n");
	p(ips_fragments, "        %u fragment%s received\n");
	p(ips_fragdropped, "        %u fragment%s dropped (dup or out of space)\n");
	p(ips_fragtimeout, "        %u fragment%s dropped after timeout\n");
	p(ips_reassembled, "        %u packet%s reassembled ok\n");
	p(ips_delivered, "        %u packet%s for this host\n");
	p(ips_noproto, "        %u packet%s for unknown/unsupported protocol\n");
	p(ips_forward, "        %u packet%s forwarded\n");
	p(ips_cantforward, "        %u packet%s not forwardable\n");
	p(ips_redirectsent, "        %u redirect%s sent\n");
	p(ips_localout, "        %u packet%s sent from this host\n");
	p(ips_rawout, "        %u packet%s sent with fabricated ip header\n");
	p(ips_odropped, "        %u output packet%s dropped due to no bufs, etc.\n");
	p(ips_noroute, "        %u output packet%s discarded due to no route\n");
	p(ips_fragmented, "        %u output datagram%s fragmented\n");
	p(ips_ofragments, "        %u fragment%s created\n");
	p(ips_cantfrag, "        %u datagram%s that can't be fragmented\n");
d381 1
d415 13
a427 1
	register int i, first;
a428 3
	if (off == 0)
		return;
	kread(off, (char *)&icmpstat, sizeof (icmpstat));
d433 2
d436 1
a436 1
	p(icps_error, "        %u call%s to icmp_error\n");
d438 1
a438 1
	    "        %u error%s not generated 'cuz old message was icmp\n");
d445 1
a445 1
			printf("                %s: %u\n", icmpnames[i],
d448 8
a455 4
	p(icps_badcode, "        %u message%s with bad code fields\n");
	p(icps_tooshort, "        %u message%s < minimum length\n");
	p(icps_checksum, "        %u bad checksum%s\n");
	p(icps_badlen, "        %u message%s with bad length\n");
d462 1
a462 1
			printf("                %s: %u\n", icmpnames[i],
d465 1
a465 1
	p(icps_reflect, "        %u message response%s generated\n");
d467 7
a509 1
 * If the nflag was specified, use numbers instead of names.
d512 1
a512 1
inetprint(in, port, proto)
d516 1
d522 1
a522 1
	sprintf(line, "%.*s.", (Aflag && !nflag) ? 12 : 16, inetname(in));
d524 1
a524 1
	if (!nflag && port)
d527 1
a527 1
		sprintf(cp, "%.8s", sp ? sp->s_name : "*");
d544 1
a544 1
	static char line[50];
a546 2
	static char domain[MAXHOSTNAMELEN + 1];
	static int first = 1;
a547 8
	if (first && !nflag) {
		first = 0;
		if (gethostname(domain, MAXHOSTNAMELEN) == 0 &&
		    (cp = index(domain, '.')))
			(void) strcpy(domain, cp + 1);
		else
			domain[0] = 0;
	}
a560 3
				if ((cp = index(hp->h_name, '.')) &&
				    !strcmp(cp + 1, domain))
					*cp = 0;
d562 1
d568 4
a571 3
	else if (cp)
		strcpy(line, cp);
	else {
d573 1
a573 1
#define C(x)	((x) & 0xff)
@


1.1.1.1
log
@Import of source code for Internet support binaries and utilities.
@
text
@@
