head	1.7;
access;
symbols
	Internet-5_66:1.7
	Internet-5_65:1.7
	Internet-5_64:1.7
	Internet-5_63:1.7
	Internet-5_62:1.7
	Internet-5_61:1.7
	Internet-5_60:1.6
	Internet-5_59:1.6
	Internet-5_58:1.6
	Internet-5_57:1.6
	Internet-5_56:1.6
	Internet-5_55:1.6
	Internet-5_54:1.6
	Internet-5_53:1.6
	Internet-5_52:1.6
	Internet-5_51:1.6
	Internet-5_50:1.5
	Internet-5_49:1.5
	Internet-5_48:1.5
	Internet-5_47:1.5
	Internet-5_46:1.5
	RO_5_07:1.5
	Internet-5_45:1.5
	Internet-5_44:1.5
	Internet-5_43b:1.5
	Internet-5_43a:1.5
	Internet-5_43:1.5
	Internet-5_42:1.4
	Internet-5_41:1.4
	Internet-5_40:1.4
	Internet-5_39:1.4
	Internet-5_38:1.3
	Internet-5_37:1.3
	Internet-5_36:1.3
	Internet-5_35:1.3
	Internet-5_34:1.3
	Internet-5_33:1.3
	Internet-5_32:1.3
	Internet-5_31:1.3
	Internet-5_30:1.3
	kbracey_Internet_000204:1.3
	nbingham_Internet_991119:1.3
	nbingham_Internet_991007:1.3
	nturton_Internet-0_00:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.4
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	Ursula:1.1.1.1.0.2
	Ursula_bp:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2018.03.23.22.24.52;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	0KXR3UzruywliDvA;

1.6
date	2013.05.26.17.53.31;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	7OUqgdybSpkMqaRw;

1.5
date	2003.12.03.18.17.17;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.17.19.53.22;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	99.07.13.11.35.31;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	99.07.01.12.10.03;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	98.07.06.13.39.00;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.07.06.13.39.00;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fixes from static analysis
Ref https://www.riscosopen.org/forum/forums/4/topics/9503#posts-72595 and subsequent offline checks.

arp: missing return from non-void delete() (from FreeBSD 13977)
ifconfig: undefined variable m (from FreeBSD revision 13145)
          correct return types to void for xxx_getaddr() (from FreeBSD revision 19914)
inetstat: dead array variable buf2[] removed
ipvars: missing return value from main()
map-mbone: missing va_end (from NetBSD revision 1.8)
md5: file handle leak on error (from FreeBSD revision 292955)
mrinfo: missing va_end (from NetBSD revision 1.12)
mtrace: missing va_end (from NetBSD revision 1.18)
newfiler: add comment for apparent missing return
sysctl: fix QUAD variable type (from FreeBSD revision 88696)
        though academic since Internet doesn't have any quad_t variables explicit function return types added in PathConf.c
BootNet: change RMIfThere alias to use temporary variable from its own namespace

Version 5.61. Tagged as 'Internet-5_61'
@
text
@/*
 * Copyright (c) 1983, 1988, 1993
 *	Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1983, 1988, 1993\n\
	Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
static char sccsid[] = "@@(#)main.c	8.4 (Berkeley) 3/1/94";
#endif /* not lint */

#include <sys/param.h>
#include <sys/file.h>
#include <sys/protosw.h>
#include <sys/socket.h>

#include <netinet/in.h>

#include <ctype.h>
#include <err.h>
#ifdef __unix
#include <errno.h>
#endif
#include <kvm.h>
#include <limits.h>
#include <netdb.h>
#include <nlist.h>
#include <paths.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#ifdef __riscos
#include <unixlib.h>
#include <riscos.h>
const char *__progname = "inetstat";
#endif
#define EXTERN /* store globals in this file */
#include "netstat.h"

struct nlist nl[] = {
#define	N_IPSTAT	0
	{ "_ipstat" },
#define	N_MBSTAT	1
	{ "_mbstat" },
#define	N_TCB		2
	{ "_tcb" },
#define	N_TCPSTAT	3
	{ "_tcpstat" },
#define	N_UDB		4
	{ "_udb" },
#define	N_UDPSTAT	5
	{ "_udpstat" },
#define	N_IFNET		6
	{ "_ifnet" },
#define	N_IMP		7
	{ "_imp_softc" },
#define	N_ICMPSTAT	8
	{ "_icmpstat" },
#define	N_RTSTAT	9
	{ "_rtstat" },
#define	N_UNIXSW	10
	{ "_localsw" },
#define N_IDP		11
	{ "_nspcb"},
#define N_IDPSTAT	12
	{ "_idpstat"},
#define N_SPPSTAT	13
	{ "_spp_istat"},
#define N_NSERR		14
	{ "_ns_errstat"},
#define	N_CLNPSTAT	15
	{ "_clnp_stat"},
#define	IN_NOTUSED	16
	{ "_tp_inpcb" },
#define	ISO_TP		17
	{ "_tp_refinfo" },
#define	N_TPSTAT	18
	{ "_tp_stat" },
#define	N_ESISSTAT	19
	{ "_esis_stat"},
#define N_NIMP		20
	{ "_nimp"},
#define N_RTREE		21
	{ "_rt_tables"},
#define N_CLTP		22
	{ "_cltb"},
#define N_CLTPSTAT	23
	{ "_cltpstat"},
#define	N_NFILE		24
	{ "_nfile" },
#define	N_FILE		25
	{ "_file" },
#define N_IGMPSTAT	26
	{ "_igmpstat" },
#define N_MRTPROTO	27
	{ "_ip_mrtproto" },
#define N_MRTSTAT	28
	{ "_mrtstat" },
#define N_MFCTABLE	29
	{ "_mfctable" },
#define N_VIFTABLE	30
	{ "_viftable" },
	"",
};

struct protox {
	u_char	pr_index;		/* index into nlist of cb head */
	u_char	pr_sindex;		/* index into nlist of stat block */
	u_char	pr_wanted;		/* 1 if wanted, 0 otherwise */
	void	(*pr_cblocks)();	/* control blocks printing routine */
	void	(*pr_stats)();		/* statistics printing routine */
	char	*pr_name;		/* well-known name */
	int	pr_usesysctl;		/* true if we use sysctl, not kvm */
} protox[] = {
	{ N_TCB,	N_TCPSTAT,	1,	protopr,
	  tcp_stats,	"tcp",		IPPROTO_TCP },
	{ N_UDB,	N_UDPSTAT,	1,	protopr,
	  udp_stats,	"udp",		IPPROTO_UDP },
	{ -1,		N_IPSTAT,	1,	protopr,
	  ip_stats,	"ip",		IPPROTO_RAW },
	{ -1,		N_ICMPSTAT,	1,	protopr,
	  icmp_stats,	"icmp",		IPPROTO_ICMP },
	{ -1,		N_IGMPSTAT,	1,	protopr,
	  igmp_stats,	"igmp",		IPPROTO_IGMP },
	{ -1,		-1,		0,	0,
	  0,		0 }
};

#ifndef __riscos
struct protox nsprotox[] = {
	{ N_IDP,	N_IDPSTAT,	1,	nsprotopr,
	  idp_stats,	"idp" },
	{ N_IDP,	N_SPPSTAT,	1,	nsprotopr,
	  spp_stats,	"spp" },
	{ -1,		N_NSERR,	1,	0,
	  nserr_stats,	"ns_err" },
	{ -1,		-1,		0,	0,
	  0,		0 }
};

struct protox isoprotox[] = {
	{ ISO_TP,	N_TPSTAT,	1,	iso_protopr,
	  tp_stats,	"tp" },
	{ N_CLTP,	N_CLTPSTAT,	1,	iso_protopr,
	  cltp_stats,	"cltp" },
	{ -1,		N_CLNPSTAT,	1,	 0,
	  clnp_stats,	"clnp"},
	{ -1,		N_ESISSTAT,	1,	 0,
	  esis_stats,	"esis"},
	{ -1,		-1,		0,	0,
	  0,		0 }
};
#endif

#ifdef __riscos
struct protox *protoprotox[] = { protox, NULL };
#else
struct protox *protoprotox[] = { protox, nsprotox, isoprotox, NULL };
#endif

static void printproto(struct protox *, char *);
static void usage(void);
static struct protox *name2protox(char *);
static struct protox *knownname(char *);

kvm_t *kvmd;

int
main(int argc, char *argv[])
{
	extern char *optarg;
	extern int optind;
	register struct protoent *p;
	register struct protox *tp;	/* for printing cblocks & stats */
	register char *cp;
	int ch;
	char *nlistf = NULL, *memf = NULL;
	char buf[_POSIX2_LINE_MAX];

	if (cp = rindex(argv[0], '/'))
		prog = cp + 1;
	else
		prog = argv[0];
	af = AF_UNSPEC;

	while ((ch = getopt(argc, argv, "Aabdf:ghI:iM:mN:np:rstuw:")) != EOF)
		switch(ch) {
		case 'A':
			Aflag = 1;
			break;
		case 'a':
			aflag = 1;
			break;
		case 'b':
			bflag = 1;
			break;
		case 'd':
			dflag = 1;
			break;
		case 'f':
			if (strcmp(optarg, "ns") == 0)
				af = AF_NS;
			else if (strcmp(optarg, "inet") == 0)
				af = AF_INET;
			else if (strcmp(optarg, "unix") == 0)
				af = AF_UNIX;
			else if (strcmp(optarg, "iso") == 0)
				af = AF_ISO;
			else {
				errx(1, "%s: unknown address family", optarg);
			}
			break;
		case 'g':
			gflag = 1;
			break;
		case 'I': {
			char *cp;

			iflag = 1;
			for (cp = interface = optarg; isalpha(*cp); cp++)
				continue;
			unit = atoi(cp);
			break;
		}
		case 'i':
			iflag = 1;
			break;
		case 'M':
			memf = optarg;
			break;
		case 'm':
			mflag = 1;
			break;
		case 'N':
			nlistf = optarg;
			break;
		case 'n':
			nflag = 1;
			break;
		case 'p':
			if ((tp = name2protox(optarg)) == NULL) {
				errx(1,
				     "%s: unknown or uninstrumented protocol",
				     optarg);
			}
			pflag = 1;
			break;
		case 'r':
			rflag = 1;
			break;
		case 's':
			++sflag;
			break;
		case 't':
			tflag = 1;
			break;
		case 'u':
			af = AF_UNIX;
			break;
		case 'w':
			interval = atoi(optarg);
			iflag = 1;
			break;
		case '?':
		default:
			usage();
		}
	argv += optind;
	argc -= optind;

#define	BACKWARD_COMPATIBILITY
#ifdef	BACKWARD_COMPATIBILITY
	if (*argv) {
		if (isdigit(**argv)) {
			interval = atoi(*argv);
			if (interval <= 0)
				usage();
			++argv;
			iflag = 1;
		}
		if (*argv) {
			nlistf = *argv;
			if (*++argv)
				memf = *argv;
		}
	}
#endif

#ifdef __unix
	/*
	 * Discard setgid privileges if not the running kernel so that bad
	 * guys can't print interesting stuff from kernel memory.
	 */
	if (nlistf != NULL || memf != NULL)
		setgid(getgid());
#endif

	kvmd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, buf);
	if (kvmd == NULL) {
		errx(1, "kvm_open: %s", buf);
	}
	if (kvm_nlist(kvmd, nl) < 0) {
		if(nlistf)
			errx(1, "%s: kvm_nlist: %s", nlistf, kvm_geterr(kvmd));
		else
			errx(1, "kvm_nlist: %s", kvm_geterr(kvmd));
	}

	if (nl[0].n_type == 0) {
		if(nlistf)
			errx(1, "%s: no namelist", nlistf);
		else
			errx(1, "no namelist");
	}
#ifndef __riscos
	if (mflag) {
		mbpr(nl[N_MBSTAT].n_value);
		exit(0);
	}
#endif
	if (pflag) {
		if (!tp->pr_stats) {
			printf("%s: no stats routine\n", tp->pr_name);
			exit(0);
		}
		if (tp->pr_usesysctl) {
			(*tp->pr_stats)(tp->pr_usesysctl, tp->pr_name);
		} else {
			kread(0, 0, 0);
			(*tp->pr_stats)(nl[tp->pr_sindex].n_value,
					tp->pr_name);
		}
		exit(0);
	}
	/*
	 * Keep file descriptors open to avoid overhead
	 * of open/close on each call to get* routines.
	 */
	sethostent(1);
	setnetent(1);
	if (iflag) {
		intpr(interval, nl[N_IFNET].n_value);
		exit(0);
	}
	if (rflag) {
		if (sflag)
			rt_stats(nl[N_RTSTAT].n_value);
		else
			routepr(nl[N_RTREE].n_value);
		exit(0);
	}
	if (gflag) {
		if (sflag)
			mrt_stats(nl[N_MRTPROTO].n_value,
			    nl[N_MRTSTAT].n_value);
		else
			mroutepr(nl[N_MRTPROTO].n_value,
			    nl[N_MFCTABLE].n_value,
			    nl[N_VIFTABLE].n_value);
		exit(0);
	}
	if (af == AF_INET || af == AF_UNSPEC) {
		setprotoent(1);
		setservent(1);
		/* ugh, this is O(MN) ... why do we do this? */
		while (p = getprotoent()) {
			for (tp = protox; tp->pr_name; tp++)
				if (strcmp(tp->pr_name, p->p_name) == 0)
					break;
			if (tp->pr_name == 0 || tp->pr_wanted == 0)
				continue;
			printproto(tp, p->p_name);
		}
		endprotoent();
	}
#ifndef __riscos
	if (af == AF_NS || af == AF_UNSPEC)
		for (tp = nsprotox; tp->pr_name; tp++)
			printproto(tp, tp->pr_name);
	if (af == AF_ISO || af == AF_UNSPEC)
		for (tp = isoprotox; tp->pr_name; tp++)
			printproto(tp, tp->pr_name);
	if ((af == AF_UNIX || af == AF_UNSPEC) && !sflag)
		unixpr(nl[N_UNIXSW].n_value);
#endif
	exit(0);
}

/*
 * Print out protocol statistics or control blocks (per sflag).
 * If the interface was not specifically requested, and the symbol
 * is not in the namelist, ignore this one.
 */
static void
printproto(register struct protox *tp, char *name)
{
	void (*pr)();
	u_long off;

	if (sflag) {
		pr = tp->pr_stats;
		off = tp->pr_usesysctl ? tp->pr_usesysctl
			: nl[tp->pr_sindex].n_value;
	} else {
		pr = tp->pr_cblocks;
		off = tp->pr_usesysctl ? tp->pr_usesysctl
			: nl[tp->pr_index].n_value;
	}
	if (pr != NULL && (off || af != AF_UNSPEC))
		(*pr)(off, name);
}

/*
 * Read kernel memory, return 0 on success.
 */
int
kread(u_long addr, char *buf, int size)
{

	if (kvm_read(kvmd, addr, buf, size) != size) {
		warnx("%s", kvm_geterr(kvmd));
		return (-1);
	}
	return (0);
}

char *
plural(int n)
{
	return (n != 1 ? "s" : "");
}

char *
plurales(int n)
{
	return (n != 1 ? "es" : "");
}

/*
 * Find the protox for the given "well-known" name.
 */
static struct protox *
knownname(char *name)
{
	struct protox **tpp, *tp;

	for (tpp = protoprotox; *tpp; tpp++)
		for (tp = *tpp; tp->pr_name; tp++)
			if (strcmp(tp->pr_name, name) == 0)
				return (tp);
	return (NULL);
}

/*
 * Find the protox corresponding to name.
 */
static struct protox *
name2protox(char *name)
{
	struct protox *tp;
	char **alias;			/* alias from p->aliases */
	struct protoent *p;

	/*
	 * Try to find the name in the list of "well-known" names. If that
	 * fails, check if name is an alias for an Internet protocol.
	 */
	if (tp = knownname(name))
		return (tp);

	setprotoent(1);			/* make protocol lookup cheaper */
	while (p = getprotoent()) {
		/* assert: name not same as p->name */
		for (alias = p->p_aliases; *alias; alias++)
			if (strcmp(name, *alias) == 0) {
				endprotoent();
				return (knownname(p->p_name));
			}
	}
	endprotoent();
	return (NULL);
}

static void
usage(void)
{
	(void)fprintf(stderr,"Usage:   inetstat [-Aan] [-f <address_family>] [-M <core>] [-N <system>]\n");
	(void)fprintf(stderr,"         inetstat [-bdghimnrs] [-f <address_family>] [-M <core>] [-N <system>]\n");
	(void)fprintf(stderr,"         inetstat [-bdn] [-I <interface>] [-M <core>] [-N <system>] [-w <wait>]\n");
	(void)fprintf(stderr,"         inetstat [-M <core>] [-N <system>] [-p <protocol>]\n");
	(void)fprintf(stderr,"         shows network status\n");
	(void)fprintf(stderr,"Options: -A  show addresses of protocol control blocks associated with sockets\n");
	(void)fprintf(stderr,"         -a  show the state of all sockets\n");
	(void)fprintf(stderr,"         -b  show the number of bytes in and out\n");
	(void)fprintf(stderr,"         -d  show the number of dropped packets\n");
	(void)fprintf(stderr,"         -g  show information relating to group address (multicast)\n");
	(void)fprintf(stderr,"         -h  show the state of the IMP host table\n");
	(void)fprintf(stderr,"         -i  show the state of interfaces which have been autoconfigured\n");
	(void)fprintf(stderr,"         -m  show statistics recorded by the memory management routines\n");
	(void)fprintf(stderr,"         -n  do not attempt to lookup names using DNS\n");
	(void)fprintf(stderr,"         -r  show routing tables\n");
	(void)fprintf(stderr,"         -f  limit statistics to the given address family\n");
	(void)fprintf(stderr,"         -M  extract values associated with the name list from the given core\n");
	(void)fprintf(stderr,"         -N  extract the namelist from the given system\n");
	(void)fprintf(stderr,"         -I  show information about the specified interface only\n");
	(void)fprintf(stderr,"         -w  show statistics at intervals of wait seconds\n");
	(void)fprintf(stderr,"         -p  show only statistics for the named protocol\n");
	(void)fprintf(stderr,"         -s  show per protocol statistics\n");
	exit(1);
}

void
trimdomain(char *cp)
{
	static char domain[MAXHOSTNAMELEN + 1];
	static int first = 1;
	char *s;

	if (first) {
		first = 0;
		if (gethostname(domain, MAXHOSTNAMELEN) == 0 &&
		    (s = strchr(domain, '.')))
			(void) strcpy(domain, s + 1);
		else
			domain[0] = 0;
	}

	if (domain[0]) {
		while ((cp = strchr(cp, '.'))) {
			if (!strcasecmp(cp + 1, domain)) {
				*cp = 0;	/* hit it */
				break;
			} else {
				cp++;
			}
		}
	}
}

@


1.6
log
@Build fixes for cc 5.70
The built in headers with cc 5.70 include new non-ANSI defines in <errno.h> which clash with some of the names in TCPIPLibs:sys/errno.h
This change extends the practice in some of the disc based utils to not include <errno.h> when __unix is not defined (since the symbol for errno is also declared as extern at the top of the TCPIPLibs copy) to avoid the duplication and hence the clash.
Built with cc 5.70, but no runtime testing.

Version 5.51. Tagged as 'Internet-5_51'
@
text
@a211 1
	char buf2[_POSIX2_LINE_MAX];
@


1.5
log
@ANSIized.

Version 5.43. Tagged as 'Internet-5_43'
@
text
@d53 1
d55 1
@


1.4
log
@Updated version numbers in an assortment of places to 5.39
Added freebsd disclaimer to !Help
added gethost produced from sources
Deleted ANT gethost and host binaries
Added useful help to all the utilities

Version 5.39. Tagged as 'Internet-5_39'
@
text
@d68 1
d200 1
a200 3
main(argc, argv)
	int argc;
	char *argv[];
d427 1
a427 3
printproto(tp, name)
	register struct protox *tp;
	char *name;
d449 1
a449 4
kread(addr, buf, size)
	u_long addr;
	char *buf;
	int size;
d460 1
a460 2
plural(n)
	int n;
d466 1
a466 2
plurales(n)
	int n;
d475 1
a475 2
knownname(name)
	char *name;
d490 1
a490 2
name2protox(name)
	char *name;
d517 1
a517 1
usage()
d538 1
a538 1
	(void)fprintf(stderr,"         -w  show statistics at intervals of wait seconds\n"); 
d545 1
a545 2
trimdomain(cp)
	char *cp;
@


1.3
log
@New inetstat that uses sysctl instead of kvm_nread. Main visible difference
is that raw sockets are listed, and there is no danger of garbage being
printed if a socket opens or closes while running.

New sysctl that handles Internet 5.31's new sysctl code. No longer has any
hard-coded knowledge of any sysctls.
@
text
@d66 1
a66 1
const char *__progname = "InetStat";
d529 22
a550 8
	(void)fprintf(stderr,
"usage: %s [-Aan] [-f address_family] [-M core] [-N system]\n", prog);
	(void)fprintf(stderr,
"       %s [-bdghimnrs] [-f address_family] [-M core] [-N system]\n", prog);
	(void)fprintf(stderr,
"       %s [-bdn] [-I interface] [-M core] [-N system] [-w wait]\n", prog);
	(void)fprintf(stderr,
"       %s [-M core] [-N system] [-p protocol]\n", prog);
@


1.2
log
@InetStat and Route updated from FreeBSD. Particular items of note:
   Extra stats from InetStat, such as unwanted multicasts.
   Route now allows syntax like "route add 136.170.33/24 hobbit".
   InetStat -r now shows netmasks like 136.170.128/21.
More updates will be incorporated if/when Internet gets more updates.
@
text
@d143 1
d146 1
a146 1
	  tcp_stats,	"tcp" },
d148 7
a154 7
	  udp_stats,	"udp" },
	{ -1,		N_IPSTAT,	1,	0,
	  ip_stats,	"ip" },
	{ -1,		N_ICMPSTAT,	1,	0,
	  icmp_stats,	"icmp" },
	{ -1,		N_IGMPSTAT,	1,	0,
	  igmp_stats,	"igmp" },
d355 8
a362 1
		if (tp->pr_stats)
d364 2
a365 3
				tp->pr_name);
		else
			printf("%s: no stats routine\n", tp->pr_name);
d437 2
a438 1
		off = nl[tp->pr_sindex].n_value;
d441 2
a442 1
		off = nl[tp->pr_index].n_value;
@


1.1
log
@Initial revision
@
text
@d52 1
a62 1
#include <err.h>
d530 30
@


1.1.1.1
log
@Import of source code for Internet support binaries and utilities.
@
text
@@
