head	1.3;
access;
symbols
	Internet-5_66:1.3
	Internet-5_65:1.3
	Internet-5_64:1.3
	Internet-5_63:1.3
	Internet-5_62:1.3
	Internet-5_61:1.3
	Internet-5_60:1.3
	Internet-5_59:1.3
	Internet-5_58:1.3
	Internet-5_57:1.3
	Internet-5_56:1.3
	Internet-5_55:1.3
	Internet-5_54:1.3
	Internet-5_53:1.3
	Internet-5_52:1.3
	Internet-5_51:1.3
	Internet-5_50:1.2
	Internet-5_49:1.2
	Internet-5_48:1.2
	Internet-5_47:1.2
	Internet-5_46:1.2
	RO_5_07:1.2
	Internet-5_45:1.2
	Internet-5_44:1.2
	Internet-5_43b:1.2
	Internet-5_43a:1.2
	Internet-5_43:1.2
	Internet-5_42:1.1
	Internet-5_41:1.1
	Internet-5_40:1.1
	Internet-5_39:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.05.26.17.53.26;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	7OUqgdybSpkMqaRw;

1.2
date	2003.12.03.18.17.11;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.17.19.53.14;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Build fixes for cc 5.70
The built in headers with cc 5.70 include new non-ANSI defines in <errno.h> which clash with some of the names in TCPIPLibs:sys/errno.h
This change extends the practice in some of the disc based utils to not include <errno.h> when __unix is not defined (since the symbol for errno is also declared as extern at the top of the TCPIPLibs copy) to avoid the duplication and hence the clash.
Built with cc 5.70, but no runtime testing.

Version 5.51. Tagged as 'Internet-5_51'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* gethost uses gethostbyname2(3) and gethostbyaddr(3) for name
   and address lookups */
/* Version 0.03 */
/* 05/Jul/2002 reed@@reedmedia.net */
/* 29/Mar/2002 reed@@reedmedia.net */
/* This is partially based on a program sent to me
   from Bruce Ediger on 20 Apr 2001 */

#ifdef RISCOS_TWEAK
#include <sys/errno.h>
#else
#include <errno.h>
#endif
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "sys/types.h"
#include "netdb.h"       /* gethostbyname() and related */
#include "netinet/in.h"
#include "arpa/inet.h"
#include "sys/socket.h"  /* AF_INET manifest constant */
#include "sys/time.h"    /* struct timeval */

int  resolve_it(int addrtype, int reverse, char *hostname, int time_it);
#ifdef RISCOS_TWEAK
void showhelp(void);
#endif

float elapsed_time(struct timeval before, struct timeval after);

int main(int argc, char *argv[])
{
  char *hostname = NULL;
  int addrtype = AF_INET;
  int rval = 0, time_it = 0, reverse = 0;

  if (argc == 1) {
#ifndef RISCOS_TWEAK
    fprintf (stderr, "gethost: neither action flags nor hostname given\n");
#else
    showhelp();
#endif
    exit(1);
  }

  while (*++argv) {
    if (*argv[0] == '-') {
      if (!strcmp(*argv, "-x")) {
        reverse = 1;
        continue;
      }
#ifndef RISCOS_TWEAK
      else if (!strcmp(*argv, "-6")) {
        addrtype = AF_INET6;
        continue;
      }
#else
      else if (!strcmp(*argv, "-help")) {
       showhelp();
       exit(0);
      }
#endif
      else if (!strcmp(*argv, "-t")) {
        time_it = 1;
        continue;
      }
      else {
        fprintf (stderr, "gethost: illegal option\n");
        exit(1);
      }
    }

    hostname = (char *)malloc(strlen(*argv) + 1);
    if (hostname) {
      strncpy(hostname, *argv, strlen(*argv));
      hostname[strlen(*argv)] = '\0';

      if (strchr(hostname, ':')) {
         addrtype = AF_INET6;
         reverse = 1; /* assume they want a reverse lookup */
      }

      rval = resolve_it(addrtype, reverse, hostname, time_it);

      free(hostname);

      printf("\n");
      /* reset to defaults */
      addrtype = AF_INET;
      reverse = 0;
      time_it = 0;
    }
    else {
      fprintf(stderr, "No memory\n");
      exit (1);
    }
  }

  return(rval);
}

#ifdef RISCOS_TWEAK
void showhelp(void)
{
  /* Stolen from the man pages */
  fprintf(stderr, "Usage:   gethost [-t] [-x] <hostname>\n");
  fprintf(stderr, "         the gethost utility does hostname and IP lookups\n");
  fprintf(stderr, "Options: -t  show the elapsed time of the lookup in fractional seconds\n");
  fprintf(stderr, "         -x  do a reverse lookup; find a hostname from an IP address\n");
}
#endif

int
resolve_it(int addrtype, int reverse, char *hostname, int time_it)
{
#ifndef RISCOS_TWEAK
  union {
    struct in6_addr in6;
    struct in_addr in;
  } addrbuf;
#else
  union {
    struct in_addr in6;
    struct in_addr in;
  } addrbuf;
#endif
  char buf[128];
  struct hostent *h;
  int rval;
  struct timeval before, after;
  float et;

  rval = 0; /* last error is lost -- and return value reflects last lookup */

  if (reverse && 1 != inet_pton(addrtype, hostname, &addrbuf)) {
#ifndef RISCOS_TWEAK
    fprintf(stderr,
            "Invalid address: \"%s\" : %s\n", hostname, strerror(errno));
#else
    fprintf(stderr,
            "Invalid address \"%s\"\n", hostname);
#endif
    rval = 2;
  }
  else {

    if (time_it) gettimeofday(&before, NULL);

    if (reverse)
      h = gethostbyaddr(
        addrtype == AF_INET ? (char *)&addrbuf.in : (char *)&addrbuf.in6,
        addrtype == AF_INET ? sizeof(addrbuf.in) : sizeof(addrbuf.in6),
        addrtype);
#ifndef RISCOS_TWEAK
    else h = gethostbyname2(hostname, addrtype);
#else
    /* Only do 4 byte lookups with RISC OS Internet stack */
    else h = gethostbyname(hostname);
#endif

    if (time_it) gettimeofday(&after, NULL);

    if (h) {
      int idx = 0;

      printf("Hostname: %s\n", h->h_name);
      while (h->h_aliases[idx])
        printf("Alias:    %s\n", h->h_aliases[idx++]);
      switch (h->h_addrtype) {
        case AF_INET:
        case AF_INET6:
          for (idx = 0; h->h_addr_list[idx]; ++idx) {
            if (inet_ntop(addrtype, h->h_addr_list[idx], buf, sizeof(buf)))
#ifndef RISCOS_TWEAK
              printf("Address:  %s\n", buf);
#else
              {
              printf("Address:  %s\n", buf);
              printf("   type:  %d\n", h->h_addrtype);
              printf(" length:  %d\n", h->h_length);
              }
#endif
            else { /* does this really matter? */
              fprintf(stderr,
                "inet_ntop() system error: %s\n", strerror(errno));
              rval = 4;
            }
          }
          break;
        default:
          break;
      }
    } else {
      /* not all OSes have h_errno & hstrerror() - Solaris doesn't */
#ifndef RISCOS_TWEAK
       fprintf(stderr,
             "Problem looking up \"%s\": %s\n", hostname, hstrerror(h_errno));
#else
       fprintf(stderr,
             "Failed to look up \"%s\"\n", hostname);
#endif
       rval = 3;
    }

    if (time_it) {
      et = elapsed_time(before, after);
      if (reverse) fprintf(stderr, "gethostbyaddr");
#ifndef RISCOS_TWEAK
      else fprintf(stderr, "gethostbyname2");
#else
      else fprintf(stderr, "gethostbyname");
#endif
      fprintf(stderr, "() took %.3f seconds\n", et);
    }

  }

  return(rval);

}


float
elapsed_time(struct timeval before, struct timeval after)
{
        float r = (float)-1.0;

        if (before.tv_usec > after.tv_usec)
        {
                after.tv_usec += 1000000;
                --after.tv_sec;
        }

        r = ((float)after.tv_sec - (float)before.tv_sec)
         + (((float)after.tv_usec - (float)before.tv_usec)/(float)1000000.0);

        return r;
}

@


1.2
log
@ANSIized.

Version 5.43. Tagged as 'Internet-5_43'
@
text
@d23 3
d27 1
@


1.1
log
@Updated version numbers in an assortment of places to 5.39
Added freebsd disclaimer to !Help
added gethost produced from sources
Deleted ANT gethost and host binaries
Added useful help to all the utilities

Version 5.39. Tagged as 'Internet-5_39'
@
text
@d42 1
a42 3
int main(argc, argv)
  int argc;
  char *argv[];
@

