head	1.7;
access;
symbols
	Internet-5_66:1.7
	Internet-5_65:1.7
	Internet-5_64:1.7
	Internet-5_63:1.7
	Internet-5_62:1.7
	Internet-5_61:1.7
	Internet-5_60:1.6
	Internet-5_59:1.6
	Internet-5_58:1.6
	Internet-5_57:1.6
	Internet-5_56:1.6
	Internet-5_55:1.6
	Internet-5_54:1.6
	Internet-5_53:1.6
	Internet-5_52:1.6
	Internet-5_51:1.6
	Internet-5_50:1.5
	Internet-5_49:1.5
	Internet-5_48:1.5
	Internet-5_47:1.5
	Internet-5_46:1.5
	RO_5_07:1.5
	Internet-5_45:1.5
	Internet-5_44:1.5
	Internet-5_43b:1.5
	Internet-5_43a:1.5
	Internet-5_43:1.5
	Internet-5_42:1.4
	Internet-5_41:1.4
	Internet-5_40:1.4
	Internet-5_39:1.4
	Internet-5_38:1.3
	Internet-5_37:1.3
	Internet-5_36:1.3
	Internet-5_35:1.3
	Internet-5_34:1.3
	Internet-5_33:1.3
	Internet-5_32:1.3
	Internet-5_31:1.3
	Internet-5_30:1.3
	kbracey_Internet_000204:1.3
	nbingham_Internet_991119:1.3
	nbingham_Internet_991007:1.3
	nturton_Internet-0_00:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.4
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	Ursula:1.1.1.1.0.2
	Ursula_bp:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2018.03.23.22.25.09;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	0KXR3UzruywliDvA;

1.6
date	2013.05.26.17.53.41;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	7OUqgdybSpkMqaRw;

1.5
date	2003.12.03.18.17.25;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.17.19.53.27;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	99.07.13.14.31.40;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	99.07.13.11.35.42;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	98.07.06.13.39.15;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.07.06.13.39.15;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fixes from static analysis
Ref https://www.riscosopen.org/forum/forums/4/topics/9503#posts-72595 and subsequent offline checks.

arp: missing return from non-void delete() (from FreeBSD 13977)
ifconfig: undefined variable m (from FreeBSD revision 13145)
          correct return types to void for xxx_getaddr() (from FreeBSD revision 19914)
inetstat: dead array variable buf2[] removed
ipvars: missing return value from main()
map-mbone: missing va_end (from NetBSD revision 1.8)
md5: file handle leak on error (from FreeBSD revision 292955)
mrinfo: missing va_end (from NetBSD revision 1.12)
mtrace: missing va_end (from NetBSD revision 1.18)
newfiler: add comment for apparent missing return
sysctl: fix QUAD variable type (from FreeBSD revision 88696)
        though academic since Internet doesn't have any quad_t variables explicit function return types added in PathConf.c
BootNet: change RMIfThere alias to use temporary variable from its own namespace

Version 5.61. Tagged as 'Internet-5_61'
@
text
@/*
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)from: sysctl.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] =
	"$Id: SysCtl,v 1.6 2013/05/26 17:53:41 rsprowson Exp $";
#endif /* not lint */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/sysctl.h>
#include <sys/resource.h>

#include <ctype.h>
#include <err.h>
#ifdef __unix
#include <errno.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#ifdef __riscos
#include <sys/errno.h>
#include <unixlib.h>
#include <riscos.h>
char *__progname = "sysctl";
static int	errvarflag;
#endif

static int	Aflag, aflag, bflag, dflag, nflag, wflag, Xflag;

static int	oidfmt(int *, int, char *, u_int *);
static void	parse(char *);
static int	show_var(int *, int);
static int	sysctl_all (int *oid, int len);
static int	name2oid(char *, int *);

static void
usage(void)
{

	(void)fprintf(stderr, "Usage:   sysctl [-bden] <variable> ...\n");
	(void)fprintf(stderr, "         sysctl [-bne] -w <variable>=<value> ...\n");
	(void)fprintf(stderr, "         sysctl [-bden] -a\n");
	(void)fprintf(stderr, "         sysctl [-bden] -A\n");
	(void)fprintf(stderr, "         sysctl [-bden] -X\n");
	(void)fprintf(stderr, "Options: -b  output the variables in raw binary mode\n");
	(void)fprintf(stderr, "         -d  display the description rather than its value\n");
	(void)fprintf(stderr, "         -n  suppress the printing of the field name\n");
	(void)fprintf(stderr, "         -w  set the MIB to the given value\n");
	(void)fprintf(stderr, "         -a  list all the current string and integer variables\n");
	(void)fprintf(stderr, "         -A  list all the known MIB names including opaques\n");
	(void)fprintf(stderr, "         -X  same as -A except opaque values are hex dumped\n");
	(void)fprintf(stderr, "         -e  write any error to Inet$Error\n");
exit(1);
}

int
main(int argc, char **argv)
{
	int ch;
	setbuf(stdout,0);
	setbuf(stderr,0);

#ifdef __riscos
	while ((ch = getopt(argc, argv, "AabdenwXh")) != -1) {
#else
	while ((ch = getopt(argc, argv, "AabdnwX")) != -1) {
#endif
		switch (ch) {
		case 'A': Aflag = 1; break;
		case 'a': aflag = 1; break;
		case 'b': bflag = 1; break;
		case 'd': dflag = 1; break;
		case 'n': nflag = 1; break;
		case 'w': wflag = 1; break;
		case 'X': Xflag = Aflag = 1; break;
#ifdef __riscos
		case 'e': err_set_silent(1); errvarflag = 1; break;
#endif
                case 'h':
		default: usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (wflag && (Aflag || aflag || dflag))
		usage();
	if (Aflag || aflag)
		exit (sysctl_all(0, 0));
	if (argc == 0)
		usage();
	while (argc-- > 0)
		parse(*argv++);
	exit(0);
}

/*
 * Parse a name into a MIB entry.
 * Lookup and print out the MIB entry if it exists.
 * Set a new value if requested.
 */
static void
parse(char *string)
{
	int len, i, j;
	void *newval = 0;
	int intval, newsize = 0;
	quad_t quadval;
	int mib[CTL_MAXNAME];
	char *cp, *bufp, buf[BUFSIZ];
	u_int kind;

	bufp = buf;
#ifdef __riscos
	strncpy(buf, string, BUFSIZ);
#else
	snprintf(buf, BUFSIZ, "%s", string);
#endif
	if ((cp = strchr(string, '=')) != NULL) {
		if (!wflag)
			errx(2, "must specify -w to set variables");
		*strchr(buf, '=') = '\0';
		*cp++ = '\0';
		while (isspace(*cp))
			cp++;
		newval = cp;
		newsize = strlen(cp);
	} else {
		if (wflag)
			usage();
	}
	len = name2oid(bufp, mib);

	if (len < 0)
		errx(1, "unknown oid '%s'", bufp);

	if (oidfmt(mib, len, 0, &kind))
		err(1, "couldn't find format of oid '%s'", bufp);

	if (!wflag) {
		if ((kind & CTLTYPE) == CTLTYPE_NODE) {
			sysctl_all(mib, len);
		} else {
			i = show_var(mib, len);
			if (!i && !bflag)
				putchar('\n');
		}
	} else {
		if ((kind & CTLTYPE) == CTLTYPE_NODE)
			errx(1, "oid '%s' isn't a leaf node", bufp);

		if (!(kind&CTLFLAG_WR))
			errx(1, "oid '%s' is read only", bufp);

		switch (kind & CTLTYPE) {
			case CTLTYPE_INT:
				intval = atoi(newval);
				newval = &intval;
				newsize = sizeof intval;
				break;
			case CTLTYPE_STRING:
				break;
			case CTLTYPE_QUAD:
#ifdef __riscos
				sscanf(newval, "%ld", &quadval);
#else
				sscanf(newval, "%qd", &quadval);
#endif
				newval = &quadval;
				newsize = sizeof quadval;
				break;
			default:
				errx(1, "oid '%s' is type %d,"
					" cannot set that", bufp,
					kind & CTLTYPE);
		}

#ifdef __riscos
		if (!errvarflag)
#endif
		i = show_var(mib, len);
		if (sysctl(mib, len, 0, 0, newval, newsize) == -1) {
#ifdef __riscos
		if (!errvarflag)
#endif
			if (!i && !bflag)
				putchar('\n');
			switch (errno) {
			case EOPNOTSUPP:
				errx(1, "%s: value is not available",
					string);
			case ENOTDIR:
				errx(1, "%s: specification is incomplete",
					string);
			case ENOMEM:
				errx(1, "%s: type is unknown to this program",
					string);
			default:
				warn("%s", string);
				return;
			}
		}
#ifdef __riscos
		if (!errvarflag)
#endif
		if (!bflag)
			printf(" -> ");
		i = nflag;
		nflag = 1;
#ifdef __riscos
		if (!errvarflag) {
#endif
		j = show_var(mib, len);
		if (!j && !bflag)
			putchar('\n');
#ifdef __riscos
		}
#endif
		nflag = i;
	}
}

/* These functions will dump out various interesting structures. */

#ifndef __riscos
static int
S_clockinfo(int l2, void *p)
{
	struct clockinfo *ci = (struct clockinfo*)p;
	if (l2 != sizeof *ci)
		err(1, "S_clockinfo %d != %d", l2, sizeof *ci);
	printf("{ hz = %d, tick = %d, tickadj = %d, profhz = %d, stathz = %d }",
		ci->hz, ci->tick, ci->tickadj, ci->profhz, ci->stathz);
	return (0);
}

static int
S_loadavg(int l2, void *p)
{
	struct loadavg *tv = (struct loadavg*)p;

	if (l2 != sizeof *tv)
		err(1, "S_loadavg %d != %d", l2, sizeof *tv);

	printf("{ %.2f %.2f %.2f }",
		(double)tv->ldavg[0]/(double)tv->fscale,
		(double)tv->ldavg[1]/(double)tv->fscale,
		(double)tv->ldavg[2]/(double)tv->fscale);
	return (0);
}
#endif

static int
S_timeval(int l2, void *p)
{
	struct timeval *tv = (struct timeval*)p;
	time_t tv_sec;
	char *p1, *p2;

	if (l2 != sizeof *tv)
		err(1, "S_timeval %d != %d", l2, sizeof *tv);
	printf("{ sec = %ld, usec = %ld } ",
		tv->tv_sec, tv->tv_usec);
	tv_sec = tv->tv_sec;
	p1 = strdup(ctime(&tv_sec));
	for (p2=p1; *p2 ; p2++)
		if (*p2 == '\n')
			*p2 = '\0';
	fputs(p1, stdout);
	return (0);
}

static int
T_dev_t(int l2, void *p)
{
	dev_t *d = (dev_t *)p;
	if (l2 != sizeof *d)
		err(1, "T_dev_T %d != %d", l2, sizeof *d);
	printf("{ major = %d, minor = %d }",
		major(*d), minor(*d));
	return (0);
}

/*
 * These functions uses a presently undocumented interface to the kernel
 * to walk the tree and get the type so it can print the value.
 * This interface is under work and consideration, and should probably
 * be killed with a big axe by the first person who can find the time.
 * (be aware though, that the proper interface isn't as obvious as it
 * may seem, there are various conflicting requirements.
 */

static int
name2oid(char *name, int *oidp)
{
	int oid[2];
	int i;
	size_t j;

	oid[0] = 0;
	oid[1] = 3;

	j = CTL_MAXNAME * sizeof (int);
	i = sysctl(oid, 2, oidp, &j, name, strlen(name));
	if (i < 0)
		return i;
	j /= sizeof (int);
	return (j);
}

static int
oidfmt(int *oid, int len, char *fmt, u_int *kind)
{
	int qoid[CTL_MAXNAME+2];
	u_char buf[BUFSIZ];
	int i;
	size_t j;

	qoid[0] = 0;
	qoid[1] = 4;
	memcpy(qoid + 2, oid, len * sizeof(int));

	j = sizeof buf;
	i = sysctl(qoid, len + 2, buf, &j, 0, 0);
	if (i)
		err(1, "sysctl fmt %d %d %d", i, j, errno);

	if (kind)
		*kind = *(u_int *)buf;

	if (fmt)
		strcpy(fmt, (char *)(buf + sizeof(u_int)));
	return 0;
}

/*
 * This formats and outputs the value of one variable
 *
 * Returns zero if anything was actually output.
 * Returns one if didn't know what to do with this.
 * Return minus one if we had errors.
 */

static int
show_var(int *oid, int nlen)
{
	u_char buf[BUFSIZ], *val, *p;
	char name[BUFSIZ], descr[BUFSIZ], *fmt;
	int qoid[CTL_MAXNAME+2];
	int i;
	size_t j, len;
	u_int kind;
	int (*func)(int, void *) = 0;

	qoid[0] = 0;
	memcpy(qoid + 2, oid, nlen * sizeof(int));

	qoid[1] = 1;
	j = sizeof name;
	i = sysctl(qoid, nlen + 2, name, &j, 0, 0);
	if (i || !j)
		err(1, "sysctl name %d %d %d", i, j, errno);

	if (dflag) {
		qoid[1] = 5;
		j = sizeof descr;
		i = sysctl(qoid, nlen + 2, descr, &j, 0, 0);
		if (i || !j)
			err(1, "sysctl name %d %d %d", i, j, errno);
		if (!nflag)
			printf("%s: ", name);
		printf("%s", descr[0] ? descr : "[no description]");
		return (0);
	}

	/* find an estimate of how much we need for this var */
	j = 0;
	i = sysctl(oid, nlen, 0, &j, 0, 0);
	j += j; /* we want to be sure :-) */

#ifdef __riscos
	val = malloc(j); /* Yuck :) */
#else
	val = alloca(j);
#endif
	len = j;
	i = sysctl(oid, nlen, val, &len, 0, 0);
	if (i || !len)
		return (1);

	if (bflag) {
		fwrite(val, 1, len, stdout);
		return (0);
	}

	qoid[1] = 4;
	j = sizeof buf;
	i = sysctl(qoid, nlen + 2, buf, &j, 0, 0);
	if (i || !j)
		err(1, "sysctl fmt %d %d %d", i, j, errno);

	kind = *(u_int *)buf;

	fmt = (char *)(buf + sizeof(u_int));

	p = val;
	switch (*fmt) {
	case 'A':
		if (!nflag)
			printf("%s: ", name);
		printf("%s", p);
		return (0);

	case 'I':
		if (!nflag)
			printf("%s: ", name);
		val = (u_char *) "";
		while (len >= sizeof(int)) {
			printf("%s%d", val, *(int *)p);
			val = (u_char *) " ";
			len -= sizeof (int);
			p += sizeof (int);
		}
		return (0);

	case 'L':
		if (!nflag)
			printf("%s: ", name);
		printf("%ld", *(long *)p);
		return (0);

	case 'P':
		if (!nflag)
			printf("%s: ", name);
		printf("%p", *(void **)p);
		return (0);

	case 'T':
	case 'S':
		i = 0;
#ifdef __riscos
		if (!strcmp(fmt, "S,timeval"))	func = S_timeval;
#else
		if (!strcmp(fmt, "S,clockinfo"))	func = S_clockinfo;
		else if (!strcmp(fmt, "S,timeval"))	func = S_timeval;
		else if (!strcmp(fmt, "S,loadavg"))	func = S_loadavg;
#endif
		else if (!strcmp(fmt, "T,dev_t"))	func = T_dev_t;
		if (func) {
			if (!nflag)
				printf("%s: ", name);
			return ((*func)(len, p));
		}
		/* FALL THROUGH */
	default:
		if (!Aflag)
			return (1);
		if (!nflag)
			printf("%s: ", name);
		printf("Format:%s Length:%d Dump:0x", fmt, len);
		while (len--) {
			printf("%02x", *p++);
			if (Xflag || p < val+16)
				continue;
			printf("...");
			break;
		}
		return (0);
	}
	return (1);
}

static int
sysctl_all (int *oid, int len)
{
	int name1[22], name2[22];
	int i, j;
	size_t l1, l2;

	name1[0] = 0;
	name1[1] = 2;
	l1 = 2;
	if (len) {
		memcpy(name1+2, oid, len*sizeof (int));
		l1 += len;
	} else {
		name1[2] = 1;
		l1++;
	}
	while (1) {
		l2 = sizeof name2;
		j = sysctl(name1, l1, name2, &l2, 0, 0);
		if (j < 0)
			if (errno == ENOENT)
				return 0;
			else
				err(1, "sysctl(getnext) %d %d", j, l2);

		l2 /= sizeof (int);

		if (l2 < len)
			return 0;

		for (i = 0; i < len; i++)
			if (name2[i] != oid[i])
				return 0;

		i = show_var(name2, l2);
		if (!i && !bflag)
			putchar('\n');

		memcpy(name1+2, name2, l2*sizeof (int));
		l1 = 2 + l2;
	}
}
@


1.6
log
@Build fixes for cc 5.70
The built in headers with cc 5.70 include new non-ANSI defines in <errno.h> which clash with some of the names in TCPIPLibs:sys/errno.h
This change extends the practice in some of the disc based utils to not include <errno.h> when __unix is not defined (since the symbol for errno is also declared as extern at the top of the TCPIPLibs copy) to avoid the duplication and hence the clash.
Built with cc 5.70, but no runtime testing.

Version 5.51. Tagged as 'Internet-5_51'
@
text
@d45 1
a45 1
	"$Id: SysCtl,v 1.5 2003/12/03 18:17:25 bavison Exp $";
a203 1
				break;
a206 1
				break;
@


1.5
log
@ANSIized.

Version 5.43. Tagged as 'Internet-5_43'
@
text
@d45 1
a45 1
	"$Id: SysCtl,v 1.4 2003/01/17 19:53:27 rsprowson Exp $";
d55 1
d57 1
@


1.4
log
@Updated version numbers in an assortment of places to 5.39
Added freebsd disclaimer to !Help
added gethost produced from sources
Deleted ANT gethost and host binaries
Added useful help to all the utilities

Version 5.39. Tagged as 'Internet-5_39'
@
text
@d45 1
a45 1
	"$Id: SysCtl,v 1.3 1999/07/13 14:31:40 kbracey Exp $";
d460 1
a460 1
		val = "";
d463 1
a463 1
			val = " ";
@


1.3
log
@Made sure no output with -e flag
@
text
@d45 1
a45 1
	"$Id: SysCtl,v 1.2 1999/07/13 11:35:42 kbracey Exp $";
d65 1
a65 1
char *__progname = "SysCtl";
d81 14
a94 7
	(void)fprintf(stderr, "%s\n%s\n%s\n%s\n%s\n",
		"usage: sysctl [-bdn] variable ...",
		"       sysctl [-bn] -w variable=value ...",
		"       sysctl [-bdn] -a",
		"       sysctl [-bdn] -A",
		"       sysctl [-bdn] -X");
	exit(1);
d105 1
a105 1
	while ((ch = getopt(argc, argv, "AabdenwX")) != -1) {
d120 1
@


1.2
log
@New inetstat that uses sysctl instead of kvm_nread. Main visible difference
is that raw sockets are listed, and there is no danger of garbage being
printed if a socket opens or closes while running.

New sysctl that handles Internet 5.31's new sysctl code. No longer has any
hard-coded knowledge of any sysctls.
@
text
@d45 1
a45 1
	"$Id: sysctl.c,v 1.20 1999/01/10 02:10:08 des Exp $";
d66 1
d111 1
a111 1
		case 'e': err_set_silent(1); break;
d213 3
d218 3
d238 3
d245 3
d251 3
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
static char copyright[] =
d41 3
a43 1
/*static char sccsid[] = "From: @@(#)sysctl.c	8.1 (Berkeley) 6/6/93"; */
d45 1
a45 1
	"$Id: sysctl.c,v 1.7 1995/06/11 19:32:58 rgrimes Exp $";
d48 1
a48 4
#include <sys/param.h>
#ifdef __unix
#include <sys/gmon.h>
#endif
d51 1
a51 5
#include <sys/socket.h>
#ifdef __unix
#include <vm/vm_param.h>
#include <machine/cpu.h>
#endif
d53 3
a55 15
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <netinet/icmp_var.h>
#include <netinet/ip_var.h>
#include <netinet/udp.h>
#include <netinet/udp_var.h>
#include <netinet/tcp.h>
#include <netinet/tcp_seq.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>
#include <netinet/igmp_var.h>

#include <sys/errno.h>
d59 1
d62 2
d65 1
a65 1
char *__progname = "Sysctl";
d68 1
a68 15
struct ctlname topname[] = CTL_NAMES;
#ifdef __unix
struct ctlname kernname[] = CTL_KERN_NAMES;
struct ctlname vmname[] = CTL_VM_NAMES;
#endif
struct ctlname netname[] = CTL_NET_NAMES;
#ifdef __unix
struct ctlname hwname[] = CTL_HW_NAMES;
struct ctlname username[] = CTL_USER_NAMES;
#endif
struct ctlname debugname[CTL_DEBUG_MAXID];
#ifdef CTL_MACHDEP_NAMES
struct ctlname machdepname[] = CTL_MACHDEP_NAMES;
#endif
char names[BUFSIZ];
d70 5
a74 34
struct list {
	struct	ctlname *list;
	int	size;
};
struct list toplist = { topname, CTL_MAXID };
struct list secondlevel[] = {
	{ 0, 0 },			/* CTL_UNSPEC */
#ifdef __unix
	{ kernname, KERN_MAXID },	/* CTL_KERN */
	{ vmname, VM_MAXID },		/* CTL_VM */
#else
	{ 0, 0 },			/* CTL_KERN */
	{ 0, 0 },			/* CTL_VM */
#endif
	{ 0, 0 },			/* CTL_FS */
	{ netname, NET_MAXID },		/* CTL_NET */
#ifdef __unix
	{ 0, CTL_DEBUG_MAXID },		/* CTL_DEBUG */
	{ hwname, HW_MAXID },		/* CTL_HW */
#else
	{ 0, 0 },			/* CTL_DEBUG */
	{ 0, 0 },			/* CTL_HW */
#endif
#ifdef CTL_MACHDEP_NAMES
	{ machdepname, CPU_MAXID },	/* CTL_MACHDEP */
#else
	{ 0, 0 },			/* CTL_MACHDEP */
#endif
#ifdef __unix
	{ username, USER_MAXID },	/* CTL_USER_NAMES */
#else
	{ 0, 0 },			/* CTL_USER_NAMES */
#endif
};
d76 3
a78 1
int	Aflag, aflag, nflag, wflag, errvarflag;
d80 8
a87 7
/*
 * Variables requiring special processing.
 */
#define	CLOCK		0x00000001
#define	BOOTTIME	0x00000002
#define	CONSDEV		0x00000004
#define DUMPDEV		0x00000008
d90 5
a94 7
main(argc, argv)
	int argc;
	char *argv[];
{
	extern char *optarg;
	extern int optind;
	int ch, lvl1;
d96 5
a100 1
	while ((ch = getopt(argc, argv, "Aaenw")) != EOF) {
d102 11
a112 23

		case 'A':
			Aflag = 1;
			break;

		case 'a':
			aflag = 1;
			break;

		case 'e':
			errvarflag = 1;
			break;

		case 'n':
			nflag = 1;
			break;

		case 'w':
			wflag = 1;
			break;

		default:
			usage();
d118 4
a121 6
	if (Aflag || aflag) {
		debuginit();
		for (lvl1 = 1; lvl1 < CTL_MAXID; lvl1++)
			listall(topname[lvl1].ctl_name, &secondlevel[lvl1]);
		exit(0);
	}
d125 1
a125 1
		parse(*argv, 1);
a129 23
 * List all variables known to the system.
 */
listall(prefix, lp)
	char *prefix;
	struct list *lp;
{
	int lvl2;
	char *cp, name[BUFSIZ];

	if (lp->list == 0)
		return;
	strcpy(name, prefix);
	cp = &name[strlen(name)];
	*cp++ = '.';
	for (lvl2 = 0; lvl2 < lp->size; lvl2++) {
		if (lp->list[lvl2].ctl_name == 0)
			continue;
		strcpy(cp, lp->list[lvl2].ctl_name);
		parse(name, Aflag);
	}
}

/*
d134 2
a135 3
parse(string, flags)
	char *string;
	int flags;
d137 1
a137 2
	int indx, type, state, size, len;
	int special = 0;
a140 1
	struct list *lp;
d142 2
a143 1
	char *cp, *bufp, buf[BUFSIZ], strval[BUFSIZ];
d152 2
a153 7
		if (!wflag) {
			if (errvarflag)
				_kernel_setenv("Inet$Error", "Must specify -w to set variables");
			else
				fprintf(stderr, "%s\n", "Must specify -w to set variables");
			exit(2);
		}
d160 3
d164 1
a164 65
	if ((indx = findname(string, "top", &bufp, &toplist)) == -1)
		return;
	mib[0] = indx;
	if (indx == CTL_DEBUG)
		debuginit();
	lp = &secondlevel[indx];
	if (lp->list == 0) {
		fprintf(stderr, "%s: class is not implemented\n",
		    topname[indx].ctl_name);
		return;
	}
	if (bufp == NULL) {
		listall(topname[indx].ctl_name, lp);
		return;
	}
	if ((indx = findname(string, "second", &bufp, lp)) == -1)
		return;
	mib[1] = indx;
	type = lp->list[indx].ctl_type;
	len = 2;
	switch (mib[0]) {

#ifdef __unix
	case CTL_KERN:
		switch (mib[1]) {
		case KERN_PROF:
			mib[2] = GPROF_STATE;
			size = sizeof state;
			if (sysctl(mib, 3, &state, &size, NULL, 0) < 0) {
				if (flags == 0)
					return;
				if (!nflag)
					fprintf(stdout, "%s: ", string);
				fprintf(stderr,
				    "kernel is not compiled for profiling\n");
				return;
			}
			if (!nflag)
				fprintf(stdout, "%s: %s\n", string,
				    state == GMON_PROF_OFF ? "off" : "running");
			return;
		case KERN_VNODE:
		case KERN_FILE:
			if (flags == 0)
				return;
			fprintf(stderr,
			    "Use pstat to view %s information\n", string);
			return;
		case KERN_PROC:
			if (flags == 0)
				return;
			fprintf(stderr,
			    "Use ps to view %s information\n", string);
			return;
		case KERN_CLOCKRATE:
			special |= CLOCK;
			break;
		case KERN_BOOTTIME:
			special |= BOOTTIME;
			break;
		case KERN_DUMPDEV:
			special |= DUMPDEV;
			break;
		}
		break;
d166 2
a167 2
	case CTL_HW:
		break;
d169 2
a170 3
	case CTL_VM:
		if (mib[1] == VM_LOADAVG) {
			double loads[3];
d172 30
a201 12
			getloadavg(loads, 3);
			if (!nflag)
				fprintf(stdout, "%s: ", string);
			fprintf(stdout, "%.2f %.2f %.2f\n",
			    loads[0], loads[1], loads[2]);
			return;
		}
		if (flags == 0)
			return;
		fprintf(stderr,
		    "Use vmstat or systat to view %s information\n", string);
		return;
d203 2
a204 6

	case CTL_NET:
		if (mib[1] == PF_INET) {
			len = sysctl_inet(string, &bufp, mib, flags, &type,
					  &special);
			if (len >= 0)
d206 24
a229 1
			return;
d231 8
a238 27
		if (flags == 0)
			return;
		fprintf(stderr, "Use netstat to view %s information\n", string);
		return;

#ifdef __unix
	case CTL_DEBUG:
		mib[2] = CTL_DEBUG_VALUE;
		len = 3;
		break;

	case CTL_MACHDEP:
#ifdef CPU_CONSDEV
		if (mib[1] == CPU_CONSDEV)
			special |= CONSDEV;
#endif
		break;

	case CTL_FS:
	case CTL_USER:
		break;
#endif

	default:
		fprintf(stderr, "Illegal top level value: %d\n", mib[0]);
		return;

d240 1
a240 11
	if (bufp) {
		fprintf(stderr, "name %s in %s is unknown\n", bufp, string);
		return;
	}
	if (newsize > 0) {
		switch (type) {
		case CTLTYPE_INT:
			intval = atoi(newval);
			newval = &intval;
			newsize = sizeof intval;
			break;
d242 1
a242 33
#ifdef __unix
		case CTLTYPE_QUAD:
			sscanf(newval, "%qd", &quadval);
			newval = &quadval;
			newsize = sizeof quadval;
			break;
#endif
		}
	}
	size = BUFSIZ;
	if (sysctl(mib, len, buf, &size, newsize ? newval : 0, newsize) == -1) {
		if (flags == 0)
			return;
		switch (errno) {
		case EOPNOTSUPP:
			fprintf(stderr, "%s: value is not available\n", string);
			return;
		case ENOTDIR:
			fprintf(stderr, "%s: specification is incomplete\n",
			    string);
			return;
		case ENOMEM:
			fprintf(stderr, "%s: type is unknown to this program\n",
			    string);
			return;
		default:
			perror(string);
			return;
		}
	}
#ifdef __unix
	if (special & CLOCK) {
		struct clockinfo *clkp = (struct clockinfo *)buf;
d244 11
a254 9
		if (!nflag)
			fprintf(stdout, "%s: ", string);
		fprintf(stdout,
		    "hz = %d, tick = %d, profhz = %d, stathz = %d\n",
		    clkp->hz, clkp->tick, clkp->profhz, clkp->stathz);
		return;
	}
	if (special & BOOTTIME) {
		struct timeval *btp = (struct timeval *)buf;
d256 4
a259 9
		if (!nflag)
			fprintf(stdout, "%s = %s", string,
			    ctime(&btp->tv_sec));
		else
			fprintf(stdout, "%d\n", btp->tv_sec);
		return;
	}
	if (special & (CONSDEV | DUMPDEV)) {
		dev_t dev = *(dev_t *)buf;
d261 2
a262 28
		if ((special & DUMPDEV) && dev == NODEV && !nflag) {
			printf("%s = disabled\n", string);
			return;
		}
		if (!nflag)
			fprintf(stdout, "%s = %s\n", string,
			    devname(dev,
				    (special & CONSDEV) ? S_IFCHR : S_IFBLK));
		else
			fprintf(stdout, "0x%x\n", dev);
		return;
	}
#endif
	switch (type) {
	case CTLTYPE_INT:
	    if (!errvarflag) {
		if (newsize == 0) {
			if (!nflag)
				fprintf(stdout, "%s = ", string);
			fprintf(stdout, "%d\n", *(int *)buf);
		} else {
			if (!nflag)
				fprintf(stdout, "%s: %d -> ", string,
				    *(int *)buf);
			fprintf(stdout, "%d\n", *(int *)newval);
		}
	    }
		return;
d264 6
a269 25
	case CTLTYPE_STRING:
		if (newsize == 0) {
			if (!nflag)
				fprintf(stdout, "%s = ", string);
			fprintf(stdout, "%s\n", buf);
		} else {
			if (!nflag)
				fprintf(stdout, "%s: %s -> ", string, buf);
			fprintf(stdout, "%s\n", newval);
		}
		return;

#ifdef __unix
	case CTLTYPE_QUAD:
		if (newsize == 0) {
			if (!nflag)
				fprintf(stdout, "%s = ", string);
			fprintf(stdout, "%qd\n", *(quad_t *)buf);
		} else {
			if (!nflag)
				fprintf(stdout, "%s: %qd -> ", string,
				    *(quad_t *)buf);
			fprintf(stdout, "%qd\n", *(quad_t *)newval);
		}
		return;
d272 19
a290 4
	case CTLTYPE_STRUCT:
		fprintf(stderr, "%s: unknown structure returned\n",
		    string);
		return;
d292 9
a300 6
	default:
	case CTLTYPE_NODE:
		fprintf(stderr, "%s: unknown type returned\n",
		    string);
		return;
	}
d304 6
a309 1
 * Initialize the set of debugging names
d311 3
a313 1
debuginit()
d315 6
a320 1
	int mib[3], size, loc, i;
d322 6
a327 14
	if (secondlevel[CTL_DEBUG].list != 0)
		return;
	secondlevel[CTL_DEBUG].list = debugname;
	mib[0] = CTL_DEBUG;
	mib[2] = CTL_DEBUG_NAME;
	for (loc = 0, i = 0; i < CTL_DEBUG_MAXID; i++) {
		mib[1] = i;
		size = BUFSIZ - loc;
		if (sysctl(mib, 3, &names[loc], &size, NULL, 0) == -1)
			continue;
		debugname[i].ctl_name = &names[loc];
		debugname[i].ctl_type = CTLTYPE_INT;
		loc += size;
	}
d330 7
a336 27
struct ctlname inetname[] = CTL_IPPROTO_NAMES;
struct ctlname ipname[] = IPCTL_NAMES;
struct ctlname icmpname[] = ICMPCTL_NAMES;
struct ctlname udpname[] = UDPCTL_NAMES;
struct ctlname tcpname[] = TCPCTL_NAMES;
struct ctlname igmpname[] = IGMPCTL_NAMES;
struct list inetlist = { inetname, IPPROTO_MAXID };
struct list inetvars[] = {
	{ ipname, IPCTL_MAXID },	/* ip */
	{ icmpname, ICMPCTL_MAXID },	/* icmp */
	{ igmpname, IGMPCTL_MAXID },	/* igmp */
	{ 0, 0 },			/* ggp */
	{ 0, 0 },			/* ipencap */
	{ 0, 0 },
	{ tcpname, TCPCTL_MAXID },	/* tcp */
	{ 0, 0 },
	{ 0, 0 },			/* egp */
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },			/* pup */
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },
	{ udpname, UDPCTL_MAXID },	/* udp */
};
d338 15
a352 40
/*
 * handle internet requests
 */
int
sysctl_inet(string, bufpp, mib, flags, typep, specialp)
	char *string;
	char **bufpp;
	int mib[];
	int flags;
	int *typep;
	int *specialp;
{
	struct list *lp;
	int indx;

	if (*bufpp == NULL) {
		listall(string, &inetlist);
		return (-1);
	}
	if ((indx = findname(string, "third", bufpp, &inetlist)) == -1)
		return (-1);
	mib[2] = indx;
	if (indx <= IPPROTO_UDP && inetvars[indx].list != NULL)
		lp = &inetvars[indx];
	else if (!flags)
		return (-1);
	else {
		fprintf(stderr, "%s: no variables defined for this protocol\n",
		    string);
		return (-1);
	}
	if (*bufpp == NULL) {
		listall(string, lp);
		return (-1);
	}
	if ((indx = findname(string, "fourth", bufpp, lp)) == -1)
		return (-1);
	mib[3] = indx;
	*typep = lp->list[indx].ctl_type;
	return (4);
d356 5
a360 1
 * Scan a list of names searching for a particular name.
d362 3
a364 5
findname(string, level, bufp, namelist)
	char *string;
	char *level;
	char **bufp;
	struct list *namelist;
d366 3
a368 1
	char *name;
d370 24
d395 18
a412 3
	if (namelist->list == 0 || (name = strsep(bufp, ".")) == NULL) {
		fprintf(stderr, "%s: incomplete specification\n", string);
		return (-1);
d414 71
a484 3
	for (i = 0; i < namelist->size; i++)
		if (namelist->list[i].ctl_name != NULL &&
		    strcmp(name, namelist->list[i].ctl_name) == 0)
d486 2
a487 4
	if (i == namelist->size) {
		fprintf(stderr, "%s level name %s in %s is invalid\n",
		    level, name, string);
		return (-1);
d489 1
a489 1
	return (i);
d492 2
a493 1
usage()
d495 24
d520 14
a533 4
	(void)fprintf(stderr, "usage:  %s\n        %s\n        %s\n        %s\n",
	    "sysctl [-n] variable ...", "sysctl [-en] -w variable=value ...",
	    "sysctl [-n] -a", "sysctl [-n] -A");
	exit(1);
@


1.1.1.1
log
@Import of source code for Internet support binaries and utilities.
@
text
@@
