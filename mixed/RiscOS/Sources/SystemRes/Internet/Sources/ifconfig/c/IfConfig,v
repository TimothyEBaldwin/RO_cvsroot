head	1.6;
access;
symbols
	Internet-5_66:1.6
	Internet-5_65:1.6
	Internet-5_64:1.6
	Internet-5_63:1.6
	Internet-5_62:1.6
	Internet-5_61:1.6
	Internet-5_60:1.5
	Internet-5_59:1.5
	Internet-5_58:1.5
	Internet-5_57:1.5
	Internet-5_56:1.5
	Internet-5_55:1.5
	Internet-5_54:1.5
	Internet-5_53:1.5
	Internet-5_52:1.5
	Internet-5_51:1.5
	Internet-5_50:1.5
	Internet-5_49:1.5
	Internet-5_48:1.5
	Internet-5_47:1.5
	Internet-5_46:1.5
	RO_5_07:1.5
	Internet-5_45:1.5
	Internet-5_44:1.5
	Internet-5_43b:1.5
	Internet-5_43a:1.5
	Internet-5_43:1.4
	Internet-5_42:1.3
	Internet-5_41:1.3
	Internet-5_40:1.3
	Internet-5_39:1.3
	Internet-5_38:1.2
	Internet-5_37:1.2
	Internet-5_36:1.2
	Internet-5_35:1.2
	Internet-5_34:1.2
	Internet-5_33:1.2
	Internet-5_32:1.2
	Internet-5_31:1.2
	Internet-5_30:1.2
	kbracey_Internet_000204:1.2
	nbingham_Internet_991119:1.2
	nbingham_Internet_991007:1.2
	nturton_Internet-0_00:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.4
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	Ursula:1.1.1.1.0.2
	Ursula_bp:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2018.03.23.22.24.49;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	0KXR3UzruywliDvA;

1.5
date	2004.01.16.17.17.51;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.03.18.17.13;	author bavison;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.17.19.53.20;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	99.07.08.16.50.16;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	98.07.06.13.38.54;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.07.06.13.38.54;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fixes from static analysis
Ref https://www.riscosopen.org/forum/forums/4/topics/9503#posts-72595 and subsequent offline checks.

arp: missing return from non-void delete() (from FreeBSD 13977)
ifconfig: undefined variable m (from FreeBSD revision 13145)
          correct return types to void for xxx_getaddr() (from FreeBSD revision 19914)
inetstat: dead array variable buf2[] removed
ipvars: missing return value from main()
map-mbone: missing va_end (from NetBSD revision 1.8)
md5: file handle leak on error (from FreeBSD revision 292955)
mrinfo: missing va_end (from NetBSD revision 1.12)
mtrace: missing va_end (from NetBSD revision 1.18)
newfiler: add comment for apparent missing return
sysctl: fix QUAD variable type (from FreeBSD revision 88696)
        though academic since Internet doesn't have any quad_t variables explicit function return types added in PathConf.c
BootNet: change RMIfThere alias to use temporary variable from its own namespace

Version 5.61. Tagged as 'Internet-5_61'
@
text
@/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
static char sccsid[] = "@@(#)ifconfig.c	8.2 (Berkeley) 2/16/94";
#endif /* not lint */

#include <sys/param.h>
#include <sys/socket.h>
#include <sys/ioctl.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_dl.h>
#include <netinet/in.h>
#include <netinet/in_var.h>
#include <arpa/inet.h>

#define	NSIP
#include <netns/ns.h>
#include <netns/ns_if.h>
#include <netdb.h>

#define EON
#include <netiso/iso.h>
#include <netiso/iso_var.h>
#include <sys/protosw.h>

#include <ctype.h>
#include <err.h>
#include <sys/errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <nlist.h>
#include <kvm.h>
#ifdef __riscos
#include <sys/fcntl.h>
#include <riscos.h>
#include "swis.h"
#include "socklib.h"
#include "unixlib.h"
const char *__progname = "ifconfig";
#else
#include <fcntl.h>
#endif

struct	ifreq		ifr, ridreq;
struct	ifaliasreq	addreq;
struct	iso_ifreq	iso_ridreq;
struct	iso_aliasreq	iso_addreq;
struct	sockaddr_in	netmask;

char	name[30];
int	flags;
int	metric;
int	mtu;
int	nsellength = 1;
int	setaddr;
int	setipdst;
int	doalias;
int	clearaddr;
int	newaddr = 1;
int	s = -1;
kvm_t	*kvmd;
extern	int errno;
int	errvarflag;

void	setifflags();
void    setifaddr();
void    setifdstaddr();
void    setifnetmask();
void	setifmetric();
void    setifmtu();
void    setifbroadaddr();
void    setifipdst();
void	notealias();
void    setsnpaoffset();
void    setnsellength();
void Perror(char *cmd);
void status(void);
void adjust_nsellength(void);
void printb(char *s, register unsigned short v, register char *bits);
#ifdef __riscos
char   *gstrans(const char *s);
#endif

#define	NEXTARG		0xffffff

struct	cmd {
	char	*c_name;
	int	c_parameter;		/* NEXTARG means next argv */
	void	(*c_func)();
} cmds[] = {
	{ "up",		IFF_UP,		setifflags } ,
	{ "down",	-IFF_UP,	setifflags },
	{ "arp",	-IFF_NOARP,	setifflags },
	{ "-arp",	IFF_NOARP,	setifflags },
	{ "debug",	IFF_DEBUG,	setifflags },
	{ "-debug",	-IFF_DEBUG,	setifflags },
	{ "alias",	IFF_UP,		notealias },
	{ "-alias",	-IFF_UP,	notealias },
	{ "delete",	-IFF_UP,	notealias },
#ifdef notdef
#define	EN_SWABIPS	0x1000
	{ "swabips",	EN_SWABIPS,	setifflags },
	{ "-swabips",	-EN_SWABIPS,	setifflags },
#endif
	{ "netmask",	NEXTARG,	setifnetmask },
	{ "metric",	NEXTARG,	setifmetric },
	{ "broadcast",	NEXTARG,	setifbroadaddr },
	{ "ipdst",	NEXTARG,	setifipdst },
	{ "snpaoffset",	NEXTARG,	setsnpaoffset },
	{ "nsellength",	NEXTARG,	setnsellength },
	{ "link0",	IFF_LINK0,	setifflags },
	{ "-link0",	-IFF_LINK0,	setifflags },
	{ "link1",	IFF_LINK1,	setifflags },
	{ "-link1",	-IFF_LINK1,	setifflags },
	{ "link2",	IFF_LINK2,	setifflags },
	{ "-link2",	-IFF_LINK2,	setifflags },
	{ "normal",	-IFF_LINK0,	setifflags },
	{ "compress",	IFF_LINK0,	setifflags },
	{ "noicmp",	IFF_LINK1,	setifflags },
	{ "mtu",	NEXTARG,	setifmtu },
	{ 0,		0,		setifaddr },
	{ 0,		0,		setifdstaddr },
};

/*
 * XNS support liberally adapted from code written at the University of
 * Maryland principally by James O'Toole and Chris Torek.
 */
void	in_status();
void	in_getaddr();
void	xns_status();
void	xns_getaddr();
void	iso_status();
void	iso_getaddr();
void	ether_status();

/* Known address families */
struct afswtch {
	char *af_name;
	short af_af;
	void (*af_status)();
	void (*af_getaddr)();
	int af_difaddr;
	int af_aifaddr;
	caddr_t af_ridreq;
	caddr_t af_addreq;
} afs[] = {
#define C(x) ((caddr_t) &x)
	{ "inet", AF_INET, in_status, in_getaddr,
	     SIOCDIFADDR, SIOCAIFADDR, C(ridreq), C(addreq) },
	{ "ns", AF_NS, xns_status, xns_getaddr,
	     SIOCDIFADDR, SIOCAIFADDR, C(ridreq), C(addreq) },
	{ "iso", AF_ISO, iso_status, iso_getaddr,
	     SIOCDIFADDR_ISO, SIOCAIFADDR_ISO, C(iso_ridreq), C(iso_addreq) },
	{ "ether", AF_INET, ether_status, NULL },
	{ 0,	0,	    0,		0 }
};

struct afswtch *afp;	/*the address family being set or asked about*/

int ifconfig(int argc, char *argv[], int af, struct afswtch *rafp, int flag);

#ifdef __riscos
static void
sock_close(void)
{
	if (s >= 0)
		socketclose(s);
	s = -1;
}
#endif

static void
printhelp(void)
{
	printf("Usage:   ifconfig [-ea] <interface> [address [dest_addr]] [parameters]\n");
	printf("         configures network interface parameters\n");
	printf("Options: -e  write any errors to Inet$Error\n");
	printf("         -a  list all present interfaces.\n");
	printf("Parameters:\n");
    	printf("up               Mark an interface up\n");
   	printf("down             Mark an interface down\n");
    	printf("arp              Enable the use of ARP\n");
    	printf("-arp             Disable the use of ARP\n");
    	printf("metric <n>       Set the routing metric to n (default 0)\n");
    	printf("netmask <mask>   Set the interface netmask to mask\n");
    	printf("broadcast <addr> Set the network broadcast to addr\n");
    	printf("alias <addr>     Set an additional interface address\n");
    	printf("delete <addr>    Remove an interface address\n");
    	printf("mtu <n>          Set the interface maximum transmission unit to n\n");
}


int main(int argc, char *argv[])
{
	int af = AF_INET;
	register struct afswtch *rafp;

#ifdef __riscos
	atexit(sock_close);
#endif
	if (argc > 1 && (strcmp(argv[1], "-help") == 0 || strcmp(argv[1], "-h") == 0)) {
		printhelp();
		exit(0);
	}
	argc--, argv++;
	if (argc > 0 && strcmp(*argv, "-e") == 0) {
		errvarflag = 1;
		argc--; argv++;
	}
	if (argc < 1) {
		printhelp();
		exit(1);
	}
#ifdef __riscos
	strncpy(name, gstrans(*argv), sizeof(name));
#else
	strncpy(name, *argv, sizeof(name));
#endif
	strncpy(ifr.ifr_name, name, sizeof(ifr.ifr_name));
	argc--, argv++;
	if (argc > 0) {
		for (afp = rafp = afs; rafp->af_name; rafp++)
			if (strcmp(rafp->af_name, *argv) == 0) {
				afp = rafp; argc--; argv++;
				break;
			}
		rafp = afp;
		af = ifr.ifr_addr.sa_family = rafp->af_af;
	}
	s = socket(af, SOCK_DGRAM, 0);
	if (s < 0) {
		Perror("ifconfig: socket");
	}
	if (strstr(name, "-a")) {
		struct ifconf ifc;
#define MAX_INTERFACES 50	/* Yeah right. */
		char buffer[MAX_INTERFACES * sizeof(struct ifreq)];
		struct ifreq *ifptr, *end;
		int ifflags, selectflag = -1;

		if (strstr(name, "-au"))
			selectflag = 1;
		if (strstr(name, "-ad"))
			selectflag = 0;
		ifc.ifc_len = sizeof(buffer);
		ifc.ifc_buf = buffer;
		if (ioctl(s, SIOCGIFCONF, (char *) &ifc) < 0) {
			Perror("SIOCGIFCONF");
		}
		ifflags = ifc.ifc_req->ifr_flags;
		end = (struct ifreq *) (ifc.ifc_buf + ifc.ifc_len);
		ifptr = ifc.ifc_req;
		while (ifptr < end) {
			sprintf(ifr.ifr_name,"%s",ifptr->ifr_name);
			sprintf(name,"%s",ifptr->ifr_name);
			close(s);
			if ((s = socket(af, SOCK_DGRAM, 0)) < 0) {
				Perror("socket");
			}
			if (ifptr->ifr_flags == ifflags)
				ifconfig(argc,argv,af,rafp,selectflag);
			if(ifptr->ifr_addr.sa_len)	/* Dohw! */
				ifptr = (struct ifreq *) ((caddr_t) ifptr +
				ifptr->ifr_addr.sa_len -
				sizeof(struct sockaddr));
			ifptr++;
		}
	} else
		ifconfig(argc,argv,af,rafp, -1);

	exit (0);
}



int ifconfig(int argc, char *argv[], int af, struct afswtch *rafp,
         int flag)
{
	if (ioctl(s, SIOCGIFFLAGS, (caddr_t)&ifr) < 0) {
		Perror("ioctl (SIOCGIFFLAGS)");
		exit(1);
	}

	switch(flag) {
	case 0:
		if (ifr.ifr_flags & IFF_UP)
			return(0);
		break;
	case 1:
		if (!(ifr.ifr_flags & IFF_UP))
			return(0);
		break;
	case -1:
	default:
		break;
	}

	strncpy(ifr.ifr_name, name, sizeof ifr.ifr_name);
	flags = ifr.ifr_flags;
	if (ioctl(s, SIOCGIFMETRIC, (caddr_t)&ifr) < 0)
		Perror("ioctl (SIOCGIFMETRIC)");
	else
		metric = ifr.ifr_metric;
	if (ioctl(s, SIOCGIFMTU, (caddr_t)&ifr) < 0)
		Perror("ioctl (SIOCGIFMTU)");
	else
		mtu = ifr.ifr_mtu;
	if (argc == 0) {
		status();
		return(0);
	}
	while (argc > 0) {
		register struct cmd *p;

		for (p = cmds; p->c_name; p++)
			if (strcmp(*argv, p->c_name) == 0)
				break;
		if (p->c_name == 0 && setaddr)
			p++;	/* got src, do dst */
		if (p->c_func) {
			if (p->c_parameter == NEXTARG) {
				if (argv[1] == NULL)
					errx(1, "'%s' requires argument",
					    p->c_name);
				(*p->c_func)(argv[1]);
				argc--, argv++;
			} else
				(*p->c_func)(*argv, p->c_parameter);
		}
		argc--, argv++;
	}
	if (af == AF_ISO)
		adjust_nsellength();
	if (setipdst && af==AF_NS) {
		struct nsip_req rq;
		int size = sizeof(rq);

		rq.rq_ns = addreq.ifra_addr;
		rq.rq_ip = addreq.ifra_dstaddr;

		if (setsockopt(s, 0, SO_NSIP_ROUTE, &rq, size) < 0)
			Perror("Encapsulation Routing");
	}
	if (clearaddr) {
		int ret;
		strncpy(rafp->af_ridreq, name, sizeof ifr.ifr_name);
		if ((ret = ioctl(s, rafp->af_difaddr, rafp->af_ridreq)) < 0) {
			if (errno == EADDRNOTAVAIL && (doalias >= 0)) {
				/* means no previous address for interface */
			} else
				Perror("ioctl (SIOCDIFADDR)");
		}
	}
	if (newaddr) {
		strncpy(rafp->af_addreq, name, sizeof ifr.ifr_name);
		if (ioctl(s, rafp->af_aifaddr, rafp->af_addreq) < 0)
			Perror("ioctl (SIOCAIFADDR)");
	}
	return(0);
}
#define RIDADDR 0
#define ADDR	1
#define MASK	2
#define DSTADDR	3

/*ARGSUSED*/
void setifaddr(char *addr, int param)
{
	/*
	 * Delay the ioctl to set the interface addr until flags are all set.
	 * The address interpretation may depend on the flags,
	 * and the flags may change when the address is set.
	 */
	setaddr++;
	if (doalias == 0)
		clearaddr = 1;
	(*afp->af_getaddr)(addr, (doalias >= 0 ? ADDR : RIDADDR));
}

void setifnetmask(char *addr)
{
	/*
	 * 950504 KWelton
	 *
	 * allow a special netmask of "default", which lets the Internet module
	 * set a default netmask as if this cmd line option was never supplied
	 */
#ifdef __riscos
	/*
	 * gstrans() copies data into a static area - use our
	 * own buffer to avoid problems when gstrans() is
	 * called from in_getaddr()
	 */
	char addrbuf[16];

	addr = strncpy(addrbuf, gstrans(addr), sizeof(addrbuf) - 1);
	if (strcasecmp(addr, "default"))
#endif
	(*afp->af_getaddr)(addr, MASK);
}

void setifbroadaddr(char *addr)
{
	(*afp->af_getaddr)(addr, DSTADDR);
}

void setifipdst(char *addr)
{
	in_getaddr(addr, DSTADDR);
	setipdst++;
	clearaddr = 0;
	newaddr = 0;
}
#define rqtosa(x) (&(((struct ifreq *)(afp->x))->ifr_addr))
/*ARGSUSED*/
void notealias(char *addr, int param)
{
	if (setaddr && doalias == 0 && param < 0)
		bcopy((caddr_t)rqtosa(af_addreq),
		      (caddr_t)rqtosa(af_ridreq),
		      rqtosa(af_addreq)->sa_len);
	doalias = param;
	if (param < 0) {
		clearaddr = 1;
		newaddr = 0;
	} else
		clearaddr = 0;
}

/*ARGSUSED*/
void setifdstaddr(char *addr, int param)
{
	(*afp->af_getaddr)(addr, DSTADDR);
}

void setifflags(char *vname, int value)
{
	value = (short) value;
	if (ioctl(s, SIOCGIFFLAGS, (caddr_t)&ifr) < 0) {
		Perror("ioctl (SIOCGIFFLAGS)");
		exit(1);
	}
	strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
	flags = ifr.ifr_flags;

	if (value < 0) {
		value = -value;
		flags &= ~value;
	} else
		flags |= value;
	ifr.ifr_flags = flags;
	if (ioctl(s, SIOCSIFFLAGS, (caddr_t)&ifr) < 0)
		Perror(vname);
}

void setifmetric(char *val)
{
	strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
	ifr.ifr_metric = atoi(val);
	if (ioctl(s, SIOCSIFMETRIC, (caddr_t)&ifr) < 0)
		Perror("ioctl (set metric)");
}

void setifmtu(char *val)
{
	strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
	ifr.ifr_mtu = atoi(val);
	if (ioctl(s, SIOCSIFMTU, (caddr_t)&ifr) < 0)
		Perror("ioctl (set mtu)");
}

void setsnpaoffset(char *val)
{
	iso_addreq.ifra_snpaoffset = atoi(val);
}

#define	IFFBITS \
"\020\1UP\2BROADCAST\3DEBUG\4LOOPBACK\5POINTOPOINT\6SMART\7RUNNING"\
"\10NOARP\11PROMISC\12ALLMULTI\13OACTIVE\14SIMPLEX\15LINK0\16LINK1\17LINK2"\
"\20MULTICAST"

/*
 * Print the status of the interface.  If an address family was
 * specified, show it and it only; otherwise, show them all.
 */
void status(void)
{
	register struct afswtch *p = afp;
	short af = ifr.ifr_addr.sa_family;

	printf("%s: ", name);
	printb("flags", flags, IFFBITS);
	if (metric)
		printf(" metric %d", metric);
	if (mtu)
		printf(" mtu %d", mtu);
	putchar('\n');
	if ((p = afp) != NULL) {
		(*p->af_status)(1);
	} else for (p = afs; p->af_name; p++) {
		ifr.ifr_addr.sa_family = p->af_af;
		(*p->af_status)(0);
	}
}

void in_status(int force)
{
	struct sockaddr_in *sin;
	char *inet_ntoa();

	strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
	if (ioctl(s, SIOCGIFADDR, (caddr_t)&ifr) < 0) {
		if (errno == EADDRNOTAVAIL || errno == EAFNOSUPPORT) {
			if (!force)
				return;
			bzero((char *)&ifr.ifr_addr, sizeof(ifr.ifr_addr));
		} else
			Perror("ioctl (SIOCGIFADDR)");
	}
	sin = (struct sockaddr_in *)&ifr.ifr_addr;
	printf("        inet %s ", inet_ntoa(sin->sin_addr));
	strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
	if (ioctl(s, SIOCGIFNETMASK, (caddr_t)&ifr) < 0) {
		if (errno != EADDRNOTAVAIL)
			Perror("ioctl (SIOCGIFNETMASK)");
		bzero((char *)&ifr.ifr_addr, sizeof(ifr.ifr_addr));
	} else
		netmask.sin_addr =
		    ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr;
	if (flags & IFF_POINTOPOINT) {
		if (ioctl(s, SIOCGIFDSTADDR, (caddr_t)&ifr) < 0) {
			if (errno == EADDRNOTAVAIL)
			    bzero((char *)&ifr.ifr_addr, sizeof(ifr.ifr_addr));
			else
			    Perror("ioctl (SIOCGIFDSTADDR)");
		}
		strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
		sin = (struct sockaddr_in *)&ifr.ifr_dstaddr;
		printf("--> %s ", inet_ntoa(sin->sin_addr));
	}
	printf("netmask 0x%x ", ntohl(netmask.sin_addr.s_addr));
	if (flags & IFF_BROADCAST) {
		if (ioctl(s, SIOCGIFBRDADDR, (caddr_t)&ifr) < 0) {
			if (errno == EADDRNOTAVAIL)
			    bzero((char *)&ifr.ifr_addr, sizeof(ifr.ifr_addr));
			else
			    Perror("ioctl (SIOCGIFADDR)");
		}
		strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
		sin = (struct sockaddr_in *)&ifr.ifr_addr;
		if (sin->sin_addr.s_addr != 0)
			printf("broadcast %s", inet_ntoa(sin->sin_addr));
	}
	putchar('\n');
}


void xns_status(int force)
{
	struct sockaddr_ns *sns;

	close(s);
	s = socket(AF_NS, SOCK_DGRAM, 0);
	if (s < 0) {
		if (errno == EPROTONOSUPPORT)
			return;
		Perror("socket");
	}
	if (ioctl(s, SIOCGIFADDR, (caddr_t)&ifr) < 0) {
		if (errno == EADDRNOTAVAIL || errno == EAFNOSUPPORT) {
			if (!force)
				return;
			bzero((char *)&ifr.ifr_addr, sizeof(ifr.ifr_addr));
		} else
			Perror("ioctl (SIOCGIFADDR)");
	}
	strncpy(ifr.ifr_name, name, sizeof ifr.ifr_name);
	sns = (struct sockaddr_ns *)&ifr.ifr_addr;
	printf("        ns %s ", ns_ntoa(sns->sns_addr));
	if (flags & IFF_POINTOPOINT) { /* by W. Nesheim@@Cornell */
		if (ioctl(s, SIOCGIFDSTADDR, (caddr_t)&ifr) < 0) {
			if (errno == EADDRNOTAVAIL)
			    bzero((char *)&ifr.ifr_addr, sizeof(ifr.ifr_addr));
			else
			    Perror("ioctl (SIOCGIFDSTADDR)");
		}
		strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
		sns = (struct sockaddr_ns *)&ifr.ifr_dstaddr;
		printf("--> %s ", ns_ntoa(sns->sns_addr));
	}
	putchar('\n');
}

void iso_status(int force)
{
	struct sockaddr_iso *siso;
	struct iso_ifreq ifr;

	close(s);
	s = socket(AF_ISO, SOCK_DGRAM, 0);
	if (s < 0) {
		if (errno == EPROTONOSUPPORT)
			return;
		Perror("socket");
	}
	bzero((caddr_t)&ifr, sizeof(ifr));
	strncpy(ifr.ifr_name, name, sizeof(ifr.ifr_name));
	if (ioctl(s, SIOCGIFADDR_ISO, (caddr_t)&ifr) < 0) {
		if (errno == EADDRNOTAVAIL || errno == EAFNOSUPPORT) {
			if (!force)
				return;
			bzero((char *)&ifr.ifr_Addr, sizeof(ifr.ifr_Addr));
		} else {
			Perror("ioctl (SIOCGIFADDR_ISO)");
		}
	}
	strncpy(ifr.ifr_name, name, sizeof ifr.ifr_name);
	siso = &ifr.ifr_Addr;
	printf("        iso %s ", iso_ntoa(&siso->siso_addr));
	if (ioctl(s, SIOCGIFNETMASK_ISO, (caddr_t)&ifr) < 0) {
		if (errno != EADDRNOTAVAIL)
			Perror("ioctl (SIOCGIFNETMASK_ISO)");
	} else {
		printf(" netmask %s ", iso_ntoa(&siso->siso_addr));
	}
	if (flags & IFF_POINTOPOINT) {
		if (ioctl(s, SIOCGIFDSTADDR_ISO, (caddr_t)&ifr) < 0) {
			if (errno == EADDRNOTAVAIL)
			    bzero((char *)&ifr.ifr_Addr, sizeof(ifr.ifr_Addr));
			else
			    Perror("ioctl (SIOCGIFDSTADDR_ISO)");
		}
		strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
		siso = &ifr.ifr_Addr;
		printf("--> %s ", iso_ntoa(&siso->siso_addr));
	}
	putchar('\n');
}

int kread(u_long addr, char *buf, int size)
{

        if (kvm_read(kvmd, addr, buf, size) != size)
                return (-1);
        return (0);
}

/* Unashamedly stolen from netstat -- maybe someday we can us sysctl() */
void ether_status(void)
{
	struct nlist nl[] = { { "_ifnet" } , "" };
	u_long addr, addr2;
	struct ifnet ifnet;
	union {
		struct ifaddr ifa;
		struct in_ifaddr in;
		struct ns_ifaddr ns;
		struct iso_ifaddr iso;
	} ifaddr;
	char *cp;
	struct sockaddr *sa;
	struct sockaddr_dl *sdl;
	int n;
	char ifacename[IFNAMSIZ];

	/*
	 * If we fail here it probably means we don't have permission to
	 * read /dev/kmem. Best to just silently bail out. If we have
	 * an error *after* we succeed in opening /dev/kmem, then we
	 * should report it.
	 */
	if ((kvmd = kvm_open(NULL,NULL,NULL,O_RDONLY,NULL)) == NULL)
		return;
	if (kvm_nlist(kvmd, nl) < 0 || nl[0].n_type == 0) {
		Perror("ifconfig: kvm_nlist()");
		return;
	}
	if (kread(nl[0].n_value, (char *)&addr, sizeof(addr))) {
		Perror("_ifnet");
		return;
	}
	addr2 = 0;
	while (addr || addr2) {
		if (addr2 == 0) {
                        if (kread(addr, (char *)&ifnet, sizeof ifnet) ||
                           kread((u_long)ifnet.if_name, ifacename, IFNAMSIZ)){
					Perror("ifconfig: kvm_read()");
					return;
			}
			addr = (u_long)ifnet.if_next;
			addr2 = (u_long)ifnet.if_addrlist;
		}
		if (kread(addr2, (char *)&ifaddr, sizeof ifaddr)) {
			addr2 = 0;
                        continue;
                }
		sprintf(ifacename,"%s%d",ifacename, ifnet.if_unit);
		if (!strncmp(name, ifacename, strlen(name))) {
#define CP(x) ((char *)(x))
			cp = (CP(ifaddr.ifa.ifa_addr) - CP(addr2)) +
				CP(&ifaddr); sa = (struct sockaddr *)cp;
			if (sa->sa_family == AF_LINK) {
				sdl = (struct sockaddr_dl *)sa;
				cp = (char *)LLADDR(sdl);
				if ((n = sdl->sdl_alen) > 0) {
					printf ("        ether ");
                               		while (--n >= 0)
						printf("%02x%c",
							*cp++ & 0xff,
							n > 0 ? ':' : ' ');
					putchar('\n');
				}
				break;
			}
		}
		addr2 = (u_long)ifaddr.ifa.ifa_next;
	}
	kvm_close(kvmd);
}

void Perror(char *cmd)
{
	extern int errno;
	const char *errmess;
	char errtext[128];

	switch (errno) {

	case ENXIO:
		errmess = "no such interface";
		break;

	case EPERM:
		errmess = "permission denied";
		break;

	default:
		errmess = _inet_error.errmess;
	}
	if (!errvarflag)
		fprintf(stderr, "%s: %s: %s\n", __progname, cmd, errmess);
	else
	{
		sprintf(errtext, "%s: %s: %s", __progname, cmd, errmess);
		_kernel_setenv("Inet$Error", errtext);
	}
	exit(1);
}

struct	in_addr inet_makeaddr();

#define SIN(x) ((struct sockaddr_in *) &(x))
struct sockaddr_in *sintab[] = {
SIN(ridreq.ifr_addr), SIN(addreq.ifra_addr),
SIN(addreq.ifra_mask), SIN(addreq.ifra_broadaddr)};

void in_getaddr(char *s, int which)
{
	register struct sockaddr_in *sin = sintab[which];
	struct hostent *hp;
	struct netent *np;
	int val;

#ifdef __riscos
	s = gstrans(s);
#endif
	sin->sin_len = sizeof(*sin);
	if (which != MASK)
		sin->sin_family = AF_INET;

	if (inet_aton(s, &sin->sin_addr))
		;
	else if (hp = gethostbyname(s))
		bcopy(hp->h_addr, (char *)&sin->sin_addr, hp->h_length);
	else if (np = getnetbyname(s))
		sin->sin_addr = inet_makeaddr(np->n_net, INADDR_ANY);
	else
		errx(1, "%s: bad value", s);
}

/*
 * Print a value a la the %b format of the kernel's printf
 */
void printb(char *s, register unsigned short v, register char *bits)
{
	register int i, any = 0;
	register char c;

	if (bits && *bits == 8)
		printf("%s=%o", s, v);
	else
		printf("%s=%x", s, v);
	bits++;
	if (bits) {
		putchar('<');
		while (i = *bits++) {
			if (v & (1 << (i-1))) {
				if (any)
					putchar(',');
				any = 1;
				for (; (c = *bits) > 32; bits++)
					putchar(c);
			} else
				for (; *bits > 32; bits++)
					;
		}
		putchar('>');
	}
}

#define SNS(x) ((struct sockaddr_ns *) &(x))
struct sockaddr_ns *snstab[] = {
SNS(ridreq.ifr_addr), SNS(addreq.ifra_addr),
SNS(addreq.ifra_mask), SNS(addreq.ifra_broadaddr)};

void xns_getaddr(char *addr, int which)
{
	struct sockaddr_ns *sns = snstab[which];
	struct ns_addr ns_addr();

	sns->sns_family = AF_NS;
	sns->sns_len = sizeof(*sns);
	sns->sns_addr = ns_addr(addr);
	if (which == MASK)
		printf("Attempt to set XNS netmask will be ineffectual\n");
}

#define SISO(x) ((struct sockaddr_iso *) &(x))
struct sockaddr_iso *sisotab[] = {
SISO(iso_ridreq.ifr_Addr), SISO(iso_addreq.ifra_addr),
SISO(iso_addreq.ifra_mask), SISO(iso_addreq.ifra_dstaddr)};

void iso_getaddr(char *addr, int which)
{
	register struct sockaddr_iso *siso = sisotab[which];
	struct iso_addr *iso_addr();
	siso->siso_addr = *iso_addr(addr);

	if (which == MASK) {
		siso->siso_len = TSEL(siso) - (caddr_t)(siso);
		siso->siso_nlen = 0;
	} else {
		siso->siso_len = sizeof(*siso);
		siso->siso_family = AF_ISO;
	}
}

void setnsellength(char *val)
{
	nsellength = atoi(val);
	if (nsellength < 0)
		errx(1, "Negative NSEL length is absurd");
	if (afp == 0 || afp->af_af != AF_ISO)
		errx(1, "Setting NSEL length valid only for iso");
}

void fixnsel(register struct sockaddr_iso *s)
{
	if (s->siso_family == 0)
		return;
	s->siso_tlen = nsellength;
}

void adjust_nsellength(void)
{
	fixnsel(sisotab[RIDADDR]);
	fixnsel(sisotab[ADDR]);
	fixnsel(sisotab[DSTADDR]);
}

#ifdef __riscos
char *
gstrans(const char *s)
{
	static char gstbuf[256];
	int len;

	gstbuf[0] = 0;
	_swix(OS_GSTrans, _INR(0,2)|_OUT(2), s, gstbuf, sizeof(gstbuf), &len);
	gstbuf[len] = 0;
	return (gstbuf);
}
#endif
@


1.5
log
@Minor changes required in order to build with cc 5.55.

Tagged as 'Internet-5_43a'
@
text
@d171 1
a171 1
int     in_getaddr();
d173 1
a173 1
int     xns_getaddr();
d175 1
a175 1
int     iso_getaddr();
d183 1
a183 1
	int (*af_getaddr)();
d705 1
a705 1
	int n,m;
d750 1
a750 1
						m += printf("%02x%c",
d799 1
a799 1
int in_getaddr(char *s, int which)
d858 1
a858 1
int xns_getaddr(char *addr, int which)
d875 1
a875 1
int iso_getaddr(char *addr, int which)
@


1.4
log
@ANSIized.

Version 5.43. Tagged as 'Internet-5_43'
@
text
@d409 1
a409 1
void setifaddr(char *addr, short param)
d478 1
a478 1
void setifflags(char *vname, short value)
d480 5
a484 4
 	if (ioctl(s, SIOCGIFFLAGS, (caddr_t)&ifr) < 0) {
 		Perror("ioctl (SIOCGIFFLAGS)");
 		exit(1);
 	}
d486 1
a486 1
 	flags = ifr.ifr_flags;
@


1.3
log
@Updated version numbers in an assortment of places to 5.39
Added freebsd disclaimer to !Help
added gethost produced from sources
Deleted ANT gethost and host binaries
Added useful help to all the utilities

Version 5.39. Tagged as 'Internet-5_39'
@
text
@d78 2
d106 15
a120 3
int	setifflags(), setifaddr(), setifdstaddr(), setifnetmask();
int	setifmetric(), setifmtu(), setifbroadaddr(), setifipdst();
int	notealias(), setsnpaoffset(), setnsellength();
d130 1
a130 1
	int	(*c_func)();
d170 7
a176 4
int	in_status(), in_getaddr();
int	xns_status(), xns_getaddr();
int	iso_status(), iso_getaddr();
int	ether_status();
d182 1
a182 1
	int (*af_status)();
d202 2
d206 1
a206 1
sock_close()
d215 1
a215 1
printhelp()
d235 1
a235 3
main(argc, argv)
	int argc;
	char *argv[];
d318 2
a319 6
ifconfig(argc,argv,af,rafp,flag)
	int argc;
	char *argv[];
	int af;
	struct afswtch *rafp;
	int flag;
d409 1
a409 3
setifaddr(addr, param)
	char *addr;
	short param;
d422 1
a422 2
setifnetmask(addr)
	char *addr;
d444 1
a444 2
setifbroadaddr(addr)
	char *addr;
d449 1
a449 2
setifipdst(addr)
	char *addr;
d458 1
a458 2
notealias(addr, param)
	char *addr;
d473 1
a473 3
setifdstaddr(addr, param)
	char *addr;
	int param;
d478 1
a478 3
setifflags(vname, value)
	char *vname;
	short value;
d497 1
a497 2
setifmetric(val)
	char *val;
d505 1
a505 2
setifmtu(val)
	char *val;
d513 1
a513 2
setsnpaoffset(val)
	char *val;
d527 1
a527 1
status()
d547 1
a547 2
in_status(force)
	int force;
d599 1
a599 2
xns_status(force)
	int force;
d635 1
a635 2
iso_status(force)
	int force;
d681 1
a681 4
kread(addr, buf, size)
        u_long addr;
        char *buf;
        int size;
d690 1
a690 1
ether_status()
d762 1
a762 2
Perror(cmd)
	char *cmd;
d798 1
a798 2
in_getaddr(s, which)
	char *s;
d825 1
a825 4
printb(s, v, bits)
	char *s;
	register char *bits;
	register unsigned short v;
d857 1
a857 2
xns_getaddr(addr, which)
char *addr;
d874 1
a874 2
iso_getaddr(addr, which)
char *addr;
d889 1
a889 2
setnsellength(val)
	char *val;
d898 1
a898 2
fixnsel(s)
register struct sockaddr_iso *s;
d905 1
a905 1
adjust_nsellength()
d914 1
a914 2
gstrans(s)
	const char *s;
@


1.2
log
@Tweaks for latest Internet/TCPIPLibs.
InetStat can now tell which ports are dynamically assigned and doesn't attempt
to look up their names.
@
text
@d78 1
a78 2
const char *__progname = "IfConfig";
static char    *versionstring = "IfConfig version 2.00 [02 May 1996]:";
d198 5
a202 7
	printf("Command format:-\n\n");
	printf("IfConfig [-ea] interface [address [dest_addr]] [parameters]\n\n");
        printf("address may be a name or an internet address.\n\n");
	printf("Options:-\n\n");
	printf("-e    write error report to Inet$Error.\n");
	printf("-a    list all present interfaces.\n\n");
	printf("Parameters:-\n\n");
d204 9
a212 9
   	printf("down             Mark an interface down.\n");
    	printf("arp              Enable the use of ARP.\n");
    	printf("-arp             Disable the use of ARP.\n");
    	printf("metric n	 Set the routing metric to n (dflt 0).\n");
    	printf("netmask mask     Set the interface netmask to mask.\n");
    	printf("broadcast addr   Set the network broadcast to addr.\n");
    	printf("alias addr       Set an additional interface address.\n");
    	printf("delete addr      Remove an interface address.\n");
    	printf("mtu n            Set the interface maximum transmission unit to n.\n");
a226 2
		printf("%s\n", versionstring);
		printf("Configure network interface parameters\n\n");
a235 1
		printf("IfConfig: Invalid number of command arguments\n\n");
@


1.1
log
@Initial revision
@
text
@d49 1
d107 1
a107 1
int	notealias(), setsnpaoffset(), setnsellength(), notrailers();
a120 2
	{ "trailers",	-1,		notrailers },
	{ "-trailers",	1,		notrailers },
a471 8
notrailers(vname, value)
	char *vname;
	int value;
{
	printf("Note: trailers are no longer sent, but always received\n");
}

/*ARGSUSED*/
d525 3
a527 2
"\020\1UP\2BROADCAST\3DEBUG\4LOOPBACK\5POINTOPOINT\6NOTRAILERS\7RUNNING\10NOARP\
\11PROMISC\12ALLMULTI\13OACTIVE\14SIMPLEX\15LINK0\16LINK1\17LINK2\20MULTICAST"
@


1.1.1.1
log
@Import of source code for Internet support binaries and utilities.
@
text
@@
