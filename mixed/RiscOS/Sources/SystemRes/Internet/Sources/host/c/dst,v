head	1.2;
access;
symbols
	Internet-5_66:1.2
	Internet-5_65:1.2
	Internet-5_64:1.2
	Internet-5_63:1.2
	Internet-5_62:1.2
	Internet-5_61:1.2
	Internet-5_60:1.2
	Internet-5_59:1.2
	Internet-5_58:1.2
	Internet-5_57:1.2
	Internet-5_56:1.2
	Internet-5_55:1.2
	Internet-5_54:1.2
	Internet-5_53:1.2
	Internet-5_52:1.2
	Internet-5_51:1.2
	Internet-5_50:1.2
	Internet-5_49:1.2
	Internet-5_48:1.2
	Internet-5_47:1.2
	Internet-5_46:1.2
	RO_5_07:1.2
	Internet-5_45:1.2
	Internet-5_44:1.2
	Internet-5_43b:1.2
	Internet-5_43a:1.2
	Internet-5_43:1.2
	Internet-5_42:1.2
	Internet-5_41:1.1;
locks; strict;
comment	@# @;


1.2
date	2003.11.12.20.46.30;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.03.15.19.58;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Brought up-to-date with respect to Tungsten ROM releases - sources from
Kevin's hard disc.
Also automated version numbering of !Run/!Boot/!Help/AUNMap.

Version 5.42. Tagged as 'Internet-5_42'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* DST functions */

#include "sys/types.h"

#define NOTUSED(k) k=k;

typedef struct dst_key {
        char    *dk_key_name;   /* name of the key */
        int     dk_key_size;    /* this is the size of the key in bits */
        int     dk_proto;       /* what protocols this key can be used for */
        int     dk_alg;         /* algorithm number from key record */
        u_int32_t dk_flags;     /* and the flags of the public key */
        u_int16_t dk_id;        /* identifier of the key */
} DST_KEY;

extern DST_KEY *dst_dnskey_to_key(const char *in_name, /* KEY record name */
                                  const u_char *key,   /* KEY RDATA */
                                  const int len);      /* size of input buffer*/
extern void dst_init(void);
extern int dst_verify_data(const int mode,       /* specifies INIT/UPDATE/FINAL/ALL */
                    DST_KEY *in_key,     /* the key to use */
                    void **context,      /* pointer to state structure */
                    const u_char *data,  /* data to be verified */
                    const int len,       /* length of input data */
                    const u_char *signature,/* buffer containing signature */
                    const int sig_len);  /* length of signature */
extern DST_KEY *dst_free_key(DST_KEY *f_key);
extern int getaddrinfo(char *,int *,void *,void *);
extern void freeaddrinfo(void *);
extern int __dn_skipname (const u_char *a, const u_char *b);
extern int __dn_expand (const u_char *a, const u_char *b, const u_char *c,
                               char *d, int e);

DST_KEY *dst_dnskey_to_key(const char *in_name, /* KEY record name */
                           const u_char *key,   /* KEY RDATA */
                           const int len)       /* size of input buffer*/
{
(void)len;
(void)in_name;
(void)key;

return 0;
}

void dst_init()
{
}

int dst_verify_data(const int mode,       /* specifies INIT/UPDATE/FINAL/ALL */
                    DST_KEY *in_key,     /* the key to use */
                    void **context,      /* pointer to state structure */
                    const u_char *data,  /* data to be verified */
                    const int len,       /* length of input data */
                    const u_char *signature,/* buffer containing signature */
                    const int sig_len)
{
return 0;
}

DST_KEY *dst_free_key(DST_KEY *f_key)
{
return 0;
}

int getaddrinfo(char *a,int *b,void *c,void *d)
{
return 0;
}

void freeaddrinfo(void *a)
{
}

int __dn_skipname (const u_char *a, const u_char *b)
{
return 0;
}

int __dn_expand (const u_char *a, const u_char *b, const u_char *c,
                               char *d, int e)
{
return 0;
}
@


1.1
log
@Finally got sick of changing the version number in !Boot and !Run and AunMap
so now only !Help tells you the version.
Added lots of "-Dlint"s as previously the (un)lucky developer who checked
the source out got their name stamped in the released binaries.
#if'd out a bum switch which only makes sense for FreeBSD.
A bit more of 'host' imported,probably not worth finishing.

Version 5.41. Tagged as 'Internet-5_41'
@
text
@d15 1
a15 2
/* Domain Signature Tools functions */
/* These functions do nothing */
d18 1
d30 17
a46 13
/*
 *  dst_dnskey_to_public_key
 *      This function converts the contents of a DNS KEY RR into a DST
 *      key structure.
 *  Paramters
 *      len      Length of the RDATA of the KEY RR RDATA
 *      rdata    A pointer to the the KEY RR RDATA.
 *      in_name  Key name to be stored in key structure.
 *  Returns
 *      NULL        Failure
 *      NON-NULL        Success.  Pointer to key structure.
 *                      Caller's responsibility to free() it.
 */
d56 1
a56 1
return NULL;
a58 9
/*
 *  dst_init
 *      This function initializes the Digital Signature Toolkit.
 *      Right now, it just checks the DSTKEYPATH environment variable.
 *  Parameters
 *      none
 *  Returns
 *      none
 */
a62 26
/*
 *  dst_verify_data
 *      An incremental verify function.  Data is verified in steps.
 *      First the context must be initialized (SIG_MODE_INIT).
 *      Then data is hashed (SIG_MODE_UPDATE).  Finally the signature
 *      is verified (SIG_MODE_FINAL).  This function can be called
 *      once with INIT, UPDATE and FINAL modes all set, or it can be
 *      called separately with a different mode set for each step.  The
 *      UPDATE step can be repeated.
 *  Parameters
 *      mode    Operations to perform this time.
 *                    SIG_MODE_INIT       1   Initialize digest
 *                    SIG_MODE_UPDATE     2   add data to digest
 *                    SIG_MODE_FINAL      4   verify signature
 *                    SIG_MODE_ALL
 *                        (SIG_MODE_INIT,SIG_MODE_UPDATE,SIG_MODE_FINAL)
 *      data    Data to pass through the hash function.
 *      len     Length of the data in bytes.
 *      in_key      Key for verification.
 *      signature   Location of signature.
 *      sig_len     Length of the signature in bytes.
 *  Returns
 *      0          Verify success
 *      Non-Zero   Verify Failure
 */

d71 6
a76 9
NOTUSED(in_key)
NOTUSED(context)
(void)data;
(void)len;
(void)signature;
(void)sig_len;
(void)mode;

return -1;
d79 4
a82 6
/*
 *  dst_free_key
 *      Release all data structures pointed to by a key structure.
 *  Parameters
 *      f_key   Key structure to be freed.
 */
d84 1
a84 1
DST_KEY *dst_free_key(DST_KEY *f_key)
d86 1
a86 1
NOTUSED(f_key)
d88 3
a90 1
return (NULL);
d93 5
@

