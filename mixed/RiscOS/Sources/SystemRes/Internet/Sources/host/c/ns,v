head	1.3;
access;
symbols
	Internet-5_66:1.3
	Internet-5_65:1.3
	Internet-5_64:1.3
	Internet-5_63:1.3
	Internet-5_62:1.3
	Internet-5_61:1.3
	Internet-5_60:1.3
	Internet-5_59:1.3
	Internet-5_58:1.3
	Internet-5_57:1.3
	Internet-5_56:1.3
	Internet-5_55:1.3
	Internet-5_54:1.3
	Internet-5_53:1.3
	Internet-5_52:1.3
	Internet-5_51:1.3
	Internet-5_50:1.3
	Internet-5_49:1.3
	Internet-5_48:1.3
	Internet-5_47:1.3
	Internet-5_46:1.3
	RO_5_07:1.3
	Internet-5_45:1.3
	Internet-5_44:1.3
	Internet-5_43b:1.3
	Internet-5_43a:1.3
	Internet-5_43:1.3
	Internet-5_42:1.3
	Internet-5_41:1.2
	Internet-5_40:1.1
	Internet-5_39:1.1;
locks; strict;
comment	@# @;


1.3
date	2003.11.12.20.46.30;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.03.15.19.59;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.17.19.53.16;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Brought up-to-date with respect to Tungsten ROM releases - sources from
Kevin's hard disc.
Also automated version numbering of !Run/!Boot/!Help/AUNMap.

Version 5.42. Tagged as 'Internet-5_42'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Name server related functions required by host */

#include "sys/types.h"

#define NOTUSED(k) k=k;

extern u_int ns_get16(const u_char *);
extern u_long ns_get32(const u_char *);
extern void ns_put16(u_int,u_char *);
extern int ns_name_unpack(const u_char *,const u_char *,const u_char *, u_char *, size_t);
extern int ns_name_ntol(const u_char *, u_char *, size_t);
extern int ns_samename (const char *, const char *);
extern void ns_put16(u_int,u_char *);
extern int __b64_ntop (u_char const *, size_t, char *, size_t);

int __b64_ntop (u_char const * a, size_t b, char * c, size_t d)
{
return 0;
}

void ns_put16(u_int a,u_char * b)
{
NOTUSED(a)
NOTUSED(b)
}

u_int ns_get16(const u_char *a)
{
NOTUSED(a)
return 0;
}

u_long ns_get32(const u_char *a)
{
NOTUSED(a)
return 0;
}

int ns_name_unpack(const u_char *a,const u_char *b,const u_char *c, u_char *d, size_t e)
{
NOTUSED(a)
NOTUSED(b)
NOTUSED(c)
NOTUSED(d)
NOTUSED(e)
return 0;
}

int ns_name_ntol(const u_char *a, u_char *b, size_t c)
{
NOTUSED(a)
NOTUSED(b)
NOTUSED(c)
return 0;
}

int ns_samename (const char *a, const char *b)
{
NOTUSED(a)
NOTUSED(b)
return 0;
}
@


1.2
log
@Finally got sick of changing the version number in !Boot and !Run and AunMap
so now only !Help tells you the version.
Added lots of "-Dlint"s as previously the (un)lucky developer who checked
the source out got their name stamped in the released binaries.
#if'd out a bum switch which only makes sense for FreeBSD.
A bit more of 'host' imported,probably not worth finishing.

Version 5.41. Tagged as 'Internet-5_41'
@
text
@d15 1
a15 1
/* Name server related functions required by Host */
a17 2
#include "sys/param.h"
#include "sys/socket.h"
d19 1
a19 3
#include "netinet/in.h"
#include "arpa/inet.h"
#include "arpa/nameser.h"
d21 8
a28 6
#include "ctype.h"
#include "netdb.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "unistd.h"
d30 1
a30 41
#include "memory.h"
#include "sys/errno.h"
#include "sys/stat.h"
#include "dst.h"

#include "resolv.h"

#include "port_after.h"

/*
 * Inline versions of get/put short/long.  Pointer is advanced.
 */
#define NS_GET16(s, cp) { \
        register u_char *t_cp = (u_char *)(cp); \
        (s) = ((u_int16_t)t_cp[0] << 8) \
            | ((u_int16_t)t_cp[1]) \
            ; \
        (cp) += NS_INT16SZ; \
}

#define NS_GET32(l, cp) { \
        register u_char *t_cp = (u_char *)(cp); \
        (l) = ((u_int32_t)t_cp[0] << 24) \
            | ((u_int32_t)t_cp[1] << 16) \
            | ((u_int32_t)t_cp[2] << 8) \
            | ((u_int32_t)t_cp[3]) \
            ; \
        (cp) += NS_INT32SZ; \
}

#define NS_PUT16(s, cp) { \
        register u_int16_t t_s = (u_int16_t)(s); \
        register u_char *t_cp = (u_char *)(cp); \
        *t_cp++ = t_s >> 8; \
        *t_cp   = t_s; \
        (cp) += NS_INT16SZ; \
}

static const char	digits[] = "0123456789";

void ns_put16(u_int src,u_char * dst)
d32 1
a32 84
 NS_PUT16(src, dst);
}

u_int ns_get16(const u_char *src)
{
 u_int dst;
 NS_GET16(dst, src);
 return (dst);
}

u_long ns_get32(const u_char *src)
{
 u_long dst;
 NS_GET32(dst, src);
 return (dst);
}

static int
decode_bitstring(const char **cpp, char *dn, const char *eom)
{
        const char *cp = *cpp;
        char *beg = dn, tc;
        int b, blen, plen;

        if ((blen = (*cp & 0xff)) == 0)
                blen = 256;
        plen = (blen + 3) / 4;
        plen += sizeof("\\[x/]") + (blen > 99 ? 3 : (blen > 9) ? 2 : 1);
        if (dn + plen >= eom)
                return(-1);

        cp++;
        dn += sprintf(dn, "\\[x");
        for (b = blen; b > 7; b -= 8, cp++)
                dn += sprintf(dn, "%02x", *cp & 0xff);
        if (b > 4) {
                tc = *cp++;
                dn += sprintf(dn, "%02x", tc & (0xff << (8 - b)));
        } else if (b > 0) {
                tc = *cp++;
                dn += sprintf(dn, "%1x",
                               ((tc >> 4) & 0x0f) & (0x0f << (4 - b))); 
        }
        dn += sprintf(dn, "/%d]", blen);

        *cpp = cp;
        return(dn - beg);
}

/*
 * special(ch)
 *      Thinking in noninternationalized USASCII (per the DNS spec),
 *      is this characted special ("in need of quoting") ?
 * return:
 *      boolean.
 */
static int
special(int ch) {
        switch (ch) {
        case 0x22: /* '"' */
        case 0x2E: /* '.' */
        case 0x3B: /* ';' */
        case 0x5C: /* '\\' */
        case 0x28: /* '(' */
        case 0x29: /* ')' */
        /* Special modifiers in zone files. */
        case 0x40: /* '@@' */
        case 0x24: /* '$' */
                return (1);
        default:
                return (0);
        }
}

/*
 * printable(ch)
 *      Thinking in noninternationalized USASCII (per the DNS spec),
 *      is this character visible and not a space when printed ?
 * return:
 *      boolean.
 */
static int
printable(int ch) {
        return (ch > 0x20 && ch < 0x7f);
d35 1
a35 2
static int
labellen(const u_char *lp)
d37 2
a38 17
        int bitlen;
        u_char l = *lp;

        if ((l & NS_CMPRSFLGS) == NS_CMPRSFLGS) {
                /* should be avoided by the caller */
                return(-1);
        }

        if ((l & NS_CMPRSFLGS) == NS_TYPE_ELT) {
                if (l == DNS_LABELTYPE_BITSTRING) {
                        if ((bitlen = *(lp + 1)) == 0)
                                bitlen = 256;
                        return((bitlen + 7 ) / 8 + 1);
                }
                return(-1);     /* unknwon ELT */
        }
        return(l);
d41 1
a41 11
/*
 * ns_name_ntol(src, dst, dstsiz)
 *      Convert a network strings labels into all lowercase.
 * return:
 *      Number of bytes written to buffer, or -1 (with errno set)
 * notes:
 *      Enforces label and domain length limits.
 */

int
ns_name_ntol(const u_char *src, u_char *dst, size_t dstsiz)
d43 2
a44 39
        const u_char *cp;
        u_char *dn, *eom;
        u_char c;
        u_int n;
        int l;

        cp = src;
        dn = dst;
        eom = dst + dstsiz;

        if (dn >= eom) {
                errno = EMSGSIZE;
                return (-1);
        }
        while ((n = *cp++) != 0) {
                if ((n & NS_CMPRSFLGS) == NS_CMPRSFLGS) {
                        /* Some kind of compression pointer. */
                        errno = EMSGSIZE;
                        return (-1);
                }
                *dn++ = n;
                if ((l = labellen(cp - 1)) < 0) {
                        errno = EMSGSIZE;
                        return (-1);
                }
                if (dn + l >= eom) {
                        errno = EMSGSIZE;
                        return (-1);
                }
                for ((void)NULL; l > 0; l--) {
                        c = *cp++;
                        if (isupper(c))
                                *dn++ = tolower(c);
                        else
                                *dn++ = c;
                }
        }
        *dn++ = '\0';
        return (dn - dst);
d47 1
a47 9
/*
 * ns_name_unpack(msg, eom, src, dst, dstsiz)
 *      Unpack a domain name from a message, source may be compressed.
 * return:
 *      -1 if it fails, or consumed octets if it succeeds.
 */
int
ns_name_unpack(const u_char *msg, const u_char *eom, const u_char *src,
               u_char *dst, size_t dstsiz)
d49 2
a50 68
        const u_char *srcp, *dstlim;
        u_char *dstp;
        int n, len, checked, l;

        len = -1;
        checked = 0;
        dstp = dst;
        srcp = src;
        dstlim = dst + dstsiz;
        if (srcp < msg || srcp >= eom) {
                errno = EMSGSIZE;
                return (-1);
        }
        /* Fetch next label in domain name. */
        while ((n = *srcp++) != 0) {
                /* Check for indirection. */
                switch (n & NS_CMPRSFLGS) {
                case 0:
                case NS_TYPE_ELT:
                        /* Limit checks. */
                        if ((l = labellen(srcp - 1)) < 0) {
                                errno = EMSGSIZE;
                                return(-1);
                        }
                        if (dstp + l + 1 >= dstlim || srcp + l >= eom) {
                                errno = EMSGSIZE;
                                return (-1);
                        }
                        checked += l + 1;
                        *dstp++ = n;
                        memcpy(dstp, srcp, l);
                        dstp += l;
                        srcp += l;
                        break;

                case NS_CMPRSFLGS:
                        if (srcp >= eom) {
                                errno = EMSGSIZE;
                                return (-1);
                        }
                        if (len < 0)
                                len = srcp - src + 1;
                        srcp = msg + (((n & 0x3f) << 8) | (*srcp & 0xff));
                        if (srcp < msg || srcp >= eom) {  /* Out of range. */
                                errno = EMSGSIZE;
                                return (-1);
                        }
                        checked += 2;
                        /*
                         * Check for loops in the compressed name;
                         * if we've looked at the whole message,
                         * there must be a loop.
                         */
                        if (checked >= eom - msg) {
                                errno = EMSGSIZE;
                                return (-1);
                        }
                        break;

                default:
                        errno = EMSGSIZE;
                        return (-1);                    /* flag error */
                }
        }
        *dstp = '\0';
        if (len < 0)
                len = srcp - src;
        return (len);
d53 1
a53 66
/*
 * int
 * ns_makecanon(src, dst, dstsize)
 *      make a canonical copy of domain name "src"
 * notes:
 *      foo -> foo.
 *      foo. -> foo.
 *      foo.. -> foo.
 *      foo\. -> foo\..
 *      foo\\. -> foo\\.
 */

int
ns_makecanon(const char *src, char *dst, size_t dstsize) {
        size_t n = strlen(src);

        if (n + sizeof "." + 1 > dstsize) {
                errno = EMSGSIZE;
                return (-1);
        }
        strcpy(dst, src);
        while (n > 0 && dst[n - 1] == '.')              /* Ends in "." */
                if (n > 1 && dst[n - 2] == '\\' &&      /* Ends in "\." */
                    (n < 2 || dst[n - 3] != '\\'))      /* But not "\\." */
                        break;
                else
                        dst[--n] = '\0';
        dst[n++] = '.';
        dst[n] = '\0';
        return (0);
}

/*
 * int
 * ns_samename(a, b)
 *      determine whether domain name "a" is the same as domain name "b"
 * return:
 *      -1 on error
 *      0 if names differ
 *      1 if names are the same
 */

int
ns_samename(const char *a, const char *b) {
        char ta[NS_MAXDNAME], tb[NS_MAXDNAME];

        if (ns_makecanon(a, ta, sizeof ta) < 0 ||
            ns_makecanon(b, tb, sizeof tb) < 0)
                return (-1);
        if (strcasecmp(ta, tb) == 0)
                return (1);
        else
                return (0);
}

/*
 * ns_name_ntop(src, dst, dstsiz)
 *      Convert an encoded domain name to printable ascii as per RFC1035.
 * return:
 *      Number of bytes written to buffer, or -1 (with errno set)
 * notes:
 *      The root is returned as "."
 *      All other domains are returned in non absolute form
 */
int
ns_name_ntop(const u_char *src, char *dst, size_t dstsiz)
d55 6
a60 87
        const u_char *cp;
        char *dn, *eom;
        u_char c;
        u_int n;
        int l;

        cp = src;
        dn = dst;
        eom = dst + dstsiz;

        while ((n = *cp++) != 0) {
                if ((n & NS_CMPRSFLGS) == NS_CMPRSFLGS) {
                        /* Some kind of compression pointer. */
                        errno = EMSGSIZE;
                        return (-1);
                }
                if (dn != dst) {
                        if (dn >= eom) {
                                errno = EMSGSIZE;
                                return (-1);
                        }
                        *dn++ = '.';
                }
                if ((l = labellen(cp - 1)) < 0) {
                        errno = EMSGSIZE; /* XXX */
                        return(-1);
                }
                if (dn + l >= eom) {
                        errno = EMSGSIZE;
                        return (-1);
                }
                if ((n & NS_CMPRSFLGS) == NS_TYPE_ELT) {
                        int m;

                        if (n != DNS_LABELTYPE_BITSTRING) {
                                /* XXX: labellen should reject this case */
                                errno = EINVAL;
                                return(-1);
                        }
                        if ((m = decode_bitstring((const char **)&cp, dn, eom)) < 0)
                        {
                                errno = EMSGSIZE;
                                return(-1);
                        }
                        dn += m; 
                        continue;
                }
                for ((void)NULL; l > 0; l--) {
                        c = *cp++;
                        if (special(c)) {
                                if (dn + 1 >= eom) {
                                        errno = EMSGSIZE;
                                        return (-1);
                                }
                                *dn++ = '\\';
                                *dn++ = (char)c;
                        } else if (!printable(c)) {
                                if (dn + 3 >= eom) {
                                        errno = EMSGSIZE;
                                        return (-1);
                                }
                                *dn++ = '\\';
                                *dn++ = digits[c / 100];
                                *dn++ = digits[(c % 100) / 10];
                                *dn++ = digits[c % 10];
                        } else {
                                if (dn >= eom) {
                                        errno = EMSGSIZE;
                                        return (-1);
                                }
                                *dn++ = (char)c;
                        }
                }
        }
        if (dn == dst) {
                if (dn >= eom) {
                        errno = EMSGSIZE;
                        return (-1);
                }
                *dn++ = '.';
        }
        if (dn >= eom) {
                errno = EMSGSIZE;
                return (-1);
        }
        *dn++ = '\0';
        return (dn - dst);
d63 1
a63 11
/*
 * ns_name_uncompress(msg, eom, src, dst, dstsiz)
 *      Expand compressed domain name to presentation format.
 * return:
 *      Number of bytes read out of `src', or -1 (with errno set).
 * note:
 *      Root domain returns as "." not "".
 */
int
ns_name_uncompress(const u_char *msg, const u_char *eom, const u_char *src,
                   char *dst, size_t dstsiz)
d65 4
a68 8
        u_char tmp[NS_MAXCDNAME];
        int n;
        
        if ((n = ns_name_unpack(msg, eom, src, tmp, sizeof tmp)) == -1)
                return (-1);
        if (ns_name_ntop(tmp, dst, dstsiz) == -1)
                return (-1);
        return (n);
d71 1
a71 8
/*
 * ns_name_skip(ptrptr, eom)
 *      Advance *ptrptr to skip over the compressed name it points at.
 * return:
 *      0 on success, -1 (with errno set) on failure.
 */
int
ns_name_skip(const u_char **ptrptr, const u_char *eom)
d73 3
a75 33
        const u_char *cp;
        u_int n;
        int l;

        cp = *ptrptr;
        while (cp < eom && (n = *cp++) != 0) {
                /* Check for indirection. */
                switch (n & NS_CMPRSFLGS) {
                case 0:                 /* normal case, n == len */
                        cp += n;
                        continue;
                case NS_TYPE_ELT: /* EDNS0 extended label */
                        if ((l = labellen(cp - 1)) < 0) {
                                errno = EMSGSIZE; /* XXX */
                                return(-1);
                        }
                        cp += l;
                        continue;
                case NS_CMPRSFLGS:      /* indirection */
                        cp++;
                        break;
                default:                /* illegal type */
                        errno = EMSGSIZE;
                        return (-1);
                }
                break;
        }
        if (cp > eom) {
                errno = EMSGSIZE;
                return (-1);
        }
        *ptrptr = cp;
        return (0);
@


1.1
log
@Updated version numbers in an assortment of places to 5.39
Added freebsd disclaimer to !Help
added gethost produced from sources
Deleted ANT gethost and host binaries
Added useful help to all the utilities

Version 5.39. Tagged as 'Internet-5_39'
@
text
@d15 1
a15 1
/* Name server related functions required by host */
d18 2
d21 3
a23 1
#define NOTUSED(k) k=k;
d25 6
a30 7
extern u_int ns_get16(const u_char *);
extern u_long ns_get32(const u_char *);
extern void ns_put16(u_int,u_char *);
extern int ns_name_unpack(const u_char *,const u_char *,const u_char *, u_char *, size_t);
extern int ns_name_ntol(const u_char *, u_char *, size_t);
extern int ns_samename (const char *, const char *);
extern void ns_put16(u_int,u_char *);
d32 41
a72 1
void ns_put16(u_int a,u_char * b)
d74 1
a74 2
NOTUSED(a)
NOTUSED(b)
d77 1
a77 1
u_int ns_get16(const u_char *a)
d79 3
a81 2
NOTUSED(a)
return 0;
d84 1
a84 1
u_long ns_get32(const u_char *a)
d86 3
a88 2
NOTUSED(a)
return 0;
d91 2
a92 1
int ns_name_unpack(const u_char *a,const u_char *b,const u_char *c, u_char *d, size_t e)
d94 27
a120 6
NOTUSED(a)
NOTUSED(b)
NOTUSED(c)
NOTUSED(d)
NOTUSED(e)
return 0;
d123 70
a192 1
int ns_name_ntol(const u_char *a, u_char *b, size_t c)
d194 39
a232 4
NOTUSED(a)
NOTUSED(b)
NOTUSED(c)
return 0;
d235 9
a243 1
int ns_samename (const char *a, const char *b)
d245 290
a534 3
NOTUSED(a)
NOTUSED(b)
return 0;
@

