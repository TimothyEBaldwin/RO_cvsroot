head	1.3;
access;
symbols
	Internet-5_66:1.3
	Internet-5_65:1.3
	Internet-5_64:1.3
	Internet-5_63:1.3
	Internet-5_62:1.3
	Internet-5_61:1.3
	Internet-5_60:1.3
	Internet-5_59:1.3
	Internet-5_58:1.3
	Internet-5_57:1.3
	Internet-5_56:1.3
	Internet-5_55:1.3
	Internet-5_54:1.3
	Internet-5_53:1.3
	Internet-5_52:1.3
	Internet-5_51:1.3
	Internet-5_50:1.3
	Internet-5_49:1.3
	Internet-5_48:1.3
	Internet-5_47:1.3
	Internet-5_46:1.3
	RO_5_07:1.3
	Internet-5_45:1.3
	Internet-5_44:1.3
	Internet-5_43b:1.3
	Internet-5_43a:1.3
	Internet-5_43:1.3
	Internet-5_42:1.3
	Internet-5_41:1.2
	Internet-5_40:1.1
	Internet-5_39:1.1;
locks; strict;
comment	@# @;


1.3
date	2003.11.12.20.46.31;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.03.15.20.00;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.17.19.53.17;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Brought up-to-date with respect to Tungsten ROM releases - sources from
Kevin's hard disc.
Also automated version numbering of !Run/!Boot/!Help/AUNMap.

Version 5.42. Tagged as 'Internet-5_42'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* RISC OS path seperator */
#define PATH_SEP '.'

/* Need some renamed magic constants from "TCPIPLibs:arpa.h.nameser" */
#define NS_MAXDNAME  MAXDNAME
#define NS_MAXCDNAME MAXCDNAME
#define NS_INT32SZ   INT32SZ
#define NS_INT16SZ   INT16SZ
#define NS_IN6ADDRSZ IN6ADDRSZ
#define NS_INADDRSZ  INADDRSZ

/* Flags & misc functions */
#include "addrinfo.h"
#include "unixlib.h"

/* Stuff implemented elsewhere */
extern int getaddrinfo(char *,int *,void *,void *); //?
extern void freeaddrinfo(void *); //?
extern u_int ns_get16(const u_char *);
extern u_long ns_get32(const u_char *);
extern void ns_put16(u_int,u_char *);
extern int ns_name_unpack(const u_char *,const u_char *,const u_char *, u_char *, size_t);
extern int ns_name_ntol(const u_char *, u_char *, size_t);
extern int ns_samename (const char *, const char *);

extern const struct res_sym __p_default_section_syms[];
extern const struct res_sym __p_update_section_syms[];
extern const struct res_sym __p_key_syms[];
extern const struct res_sym __p_rcode_syms[];
extern const struct res_sym __p_cert_syms[];
extern const struct res_sym __p_type_syms[];
extern const struct res_sym __p_class_syms[];

extern char * __progname;

/* Macro */
#define NOTUSED(k) k=k;

/* Accessor macros - this is part of the public interface. */
#define ns_rr_name(rr)  (((rr).name[0] != '\0') ? (rr).name : ".")
#define ns_rr_type(rr)  ((ns_type)((rr).type + 0))
#define ns_rr_class(rr) ((ns_class)((rr).rr_class + 0))
#define ns_rr_ttl(rr)   ((rr).ttl + 0)
#define ns_rr_rdlen(rr) ((rr).rdlength + 0)
#define ns_rr_rdata(rr) ((rr).rdata + 0)

/* The Algorithm field of the KEY and SIG RR's is an integer, {1..254} */
#define NS_ALG_MD5RSA           1       /* MD5 with RSA */
#define NS_ALG_DH               2       /* Diffie Hellman KEY */
#define NS_ALG_DSA              3       /* DSA KEY */
#define NS_ALG_DSS              NS_ALG_DSA
#define NS_ALG_EXPIRE_ONLY      253     /* No alg, no security */
#define NS_ALG_PRIVATE_OID      254     /* Key begins with OID giving alg */

#define S_ZONE		ns_s_zn
#define S_PREREQ	ns_s_pr
#define S_UPDATE	ns_s_ud
#define S_ADDT		ns_s_ar

#define C_NONE		ns_c_none

/* More magic constants,all stolen from "nameser.h" */
typedef enum __ns_type {
        ns_t_invalid = 0,       /* Cookie. */
        ns_t_a = 1,             /* Host address. */
        ns_t_ns = 2,            /* Authoritative server. */
        ns_t_md = 3,            /* Mail destination. */
        ns_t_mf = 4,            /* Mail forwarder. */
        ns_t_cname = 5,         /* Canonical name. */
        ns_t_soa = 6,           /* Start of authority zone. */
        ns_t_mb = 7,            /* Mailbox domain name. */
        ns_t_mg = 8,            /* Mail group member. */
        ns_t_mr = 9,            /* Mail rename name. */
        ns_t_null = 10,         /* Null resource record. */
        ns_t_wks = 11,          /* Well known service. */
        ns_t_ptr = 12,          /* Domain name pointer. */
        ns_t_hinfo = 13,        /* Host information. */
        ns_t_minfo = 14,        /* Mailbox information. */
        ns_t_mx = 15,           /* Mail routing information. */
        ns_t_txt = 16,          /* Text strings. */
        ns_t_rp = 17,           /* Responsible person. */
        ns_t_afsdb = 18,        /* AFS cell database. */
        ns_t_x25 = 19,          /* X_25 calling address. */
        ns_t_isdn = 20,         /* ISDN calling address. */
        ns_t_rt = 21,           /* Router. */
        ns_t_nsap = 22,         /* NSAP address. */
        ns_t_nsap_ptr = 23,     /* Reverse NSAP lookup (deprecated). */
        ns_t_sig = 24,          /* Security signature. */
        ns_t_key = 25,          /* Security key. */
        ns_t_px = 26,           /* X.400 mail mapping. */
        ns_t_gpos = 27,         /* Geographical position (withdrawn). */
        ns_t_aaaa = 28,         /* Ip6 Address. */
        ns_t_loc = 29,          /* Location Information. */
        ns_t_nxt = 30,          /* Next domain (security). */
        ns_t_eid = 31,          /* Endpoint identifier. */
        ns_t_nimloc = 32,       /* Nimrod Locator. */
        ns_t_srv = 33,          /* Server Selection. */
        ns_t_atma = 34,         /* ATM Address */
        ns_t_naptr = 35,        /* Naming Authority PoinTeR */
        ns_t_kx = 36,           /* Key Exchange */
        ns_t_cert = 37,         /* Certification record */
        ns_t_a6 = 38,           /* IPv6 address (deprecates AAAA) */
        ns_t_dname = 39,        /* Non-terminal DNAME (for IPv6) */
        ns_t_sink = 40,         /* Kitchen sink (experimentatl) */
        ns_t_opt = 41,          /* EDNS0 option (meta-RR) */
        ns_t_tkey = 249,        /* Transaction key */
        ns_t_tsig = 250,        /* Transaction signature. */
        ns_t_ixfr = 251,        /* Incremental zone transfer. */
        ns_t_axfr = 252,        /* Transfer zone of authority. */
        ns_t_mailb = 253,       /* Transfer mailbox records. */
        ns_t_maila = 254,       /* Transfer mail agent records. */
        ns_t_any = 255,         /* Wildcard match. */
        ns_t_zxfr = 256,        /* BIND-specific, nonstandard. */
        ns_t_max = 65536
} ns_type;

typedef enum __ns_class {
        ns_c_invalid = 0,       /* Cookie. */
        ns_c_in = 1,            /* Internet. */
        ns_c_2 = 2,             /* unallocated/unsupported. */
        ns_c_chaos = 3,         /* MIT Chaos-net. */
        ns_c_hs = 4,            /* MIT Hesiod. */
        /* Query class values which do not appear in resource records */
        ns_c_none = 254,        /* for prereq. sections in update requests */
        ns_c_any = 255,         /* Wildcard match. */
        ns_c_max = 65536
} ns_class;

typedef enum __ns_opcode {
        ns_o_query = 0,         /* Standard query. */
        ns_o_iquery = 1,        /* Inverse query (deprecated/unsupported). */
        ns_o_status = 2,        /* Name server status query (unsupported). */
                                /* Opcode 3 is undefined/reserved. */
        ns_o_notify = 4,        /* Zone change notification. */
        ns_o_update = 5,        /* Zone update message. */
        ns_o_max = 6
} ns_opcode;

typedef enum __ns_rcode {
        ns_r_noerror = 0,       /* No error occurred. */
        ns_r_formerr = 1,       /* Format error. */
        ns_r_servfail = 2,      /* Server failure. */
        ns_r_nxdomain = 3,      /* Name error. */
        ns_r_notimpl = 4,       /* Unimplemented. */
        ns_r_refused = 5,       /* Operation refused. */
        /* these are for BIND_UPDATE */
        ns_r_yxdomain = 6,      /* Name exists */
        ns_r_yxrrset = 7,       /* RRset exists */
        ns_r_nxrrset = 8,       /* RRset does not exist */
        ns_r_notauth = 9,       /* Not authoritative for zone */
        ns_r_notzone = 10,      /* Zone of record different from zone section */
        ns_r_max = 11,
        /* The following are EDNS extended rcodes */
        ns_r_badvers = 16,
        /* The following are TSIG errors */
        ns_r_badsig = 16,
        ns_r_badkey = 17,
        ns_r_badtime = 18
} ns_rcode;

typedef enum __ns_cert_types {
        cert_t_pkix = 1,        /* PKIX (X.509v3) */
        cert_t_spki = 2,        /* SPKI */
        cert_t_pgp  = 3,        /* PGP */
        cert_t_url  = 253,      /* URL private type */
        cert_t_oid  = 254       /* OID private type */
} ns_cert_types;

typedef enum __ns_sect {
        ns_s_qd = 0,            /* Query: Question. */
        ns_s_zn = 0,            /* Update: Zone. */
        ns_s_an = 1,            /* Query: Answer. */
        ns_s_pr = 1,            /* Update: Prerequisites. */
        ns_s_ns = 2,            /* Query: Name servers. */
        ns_s_ud = 2,            /* Update: Update. */
        ns_s_ar = 3,            /* Query|Update: Additional records. */
        ns_s_max = 4
} ns_sect;

typedef enum __ns_flag {
        ns_f_qr,                /* Question/Response. */
        ns_f_opcode,            /* Operation code. */
        ns_f_aa,                /* Authoritative Answer. */
        ns_f_tc,                /* Truncation occurred. */
        ns_f_rd,                /* Recursion Desired. */
        ns_f_ra,                /* Recursion Available. */
        ns_f_z,                 /* MBZ. */
        ns_f_ad,                /* Authentic Data (DNSSEC). */
        ns_f_cd,                /* Checking Disabled (DNSSEC). */
        ns_f_rcode,             /* Response code. */
        ns_f_max
} ns_flag;
@


1.2
log
@Finally got sick of changing the version number in !Boot and !Run and AunMap
so now only !Help tells you the version.
Added lots of "-Dlint"s as previously the (un)lucky developer who checked
the source out got their name stamped in the released binaries.
#if'd out a bum switch which only makes sense for FreeBSD.
A bit more of 'host' imported,probably not worth finishing.

Version 5.41. Tagged as 'Internet-5_41'
@
text
@a25 5
/* Other magic numbers from around the world */
#define NS_CMPRSFLGS 0xc0 /* Flag bits indicating name compression. */
#define NS_TYPE_ELT                     0x40 /* EDNS0 extended label type */
#define DNS_LABELTYPE_BITSTRING         0x41

d30 3
a32 10
/* Stuff implemented in files external to the Host */
extern int getaddrinfo(const char *,const char *,const struct addrinfo *,struct addrinfo **);
extern void freeaddrinfo(struct addrinfo *);
extern u_int ns_get16(const u_char *);
extern u_long ns_get32(const u_char *);
extern void ns_put16(u_int,u_char *);
extern int ns_name_unpack(const u_char *,const u_char *,const u_char *, u_char *, size_t);
extern int ns_name_ntol(const u_char *, u_char *, size_t);
extern int ns_samename (const char *, const char *);
extern int ns_name_ntop(const u_char *, char *, size_t);
a38 19
extern int ns_name_skip(const u_char **, const u_char *);
extern int ns_name_uncompress(const u_char *, const u_char *, const u_char *,char *, size_t);
extern void ns_put16(u_int,u_char *);
extern int ns_makecanon(const char *, char *, size_t);
extern DST_KEY *dst_dnskey_to_key(const char *in_name, /* KEY record name */
                                  const u_char *key,   /* KEY RDATA */
                                  const int len);      /* size of input buffer*/
extern void dst_init(void);
extern int dst_verify_data(const int mode,       /* specifies INIT/UPDATE/FINAL/ALL */
                    DST_KEY *in_key,     /* the key to use */
                    void **context,      /* pointer to state structure */
                    const u_char *data,  /* data to be verified */
                    const int len,       /* length of input data */
                    const u_char *signature,/* buffer containing signature */
                    const int sig_len);  /* length of signature */
extern DST_KEY *dst_free_key(DST_KEY *f_key);
extern int __dn_skipname (const u_char *a, const u_char *b);
extern int __dn_expand (const u_char *a, const u_char *b, const u_char *c,
                               char *d, int e);
a39 1
/* Lots of symbols */
a47 1
/* Keep unixlib quiet */
@


1.1
log
@Updated version numbers in an assortment of places to 5.39
Added freebsd disclaimer to !Help
added gethost produced from sources
Deleted ANT gethost and host binaries
Added useful help to all the utilities

Version 5.39. Tagged as 'Internet-5_39'
@
text
@d26 5
d35 10
a44 3
/* Stuff implemented elsewhere */
extern int getaddrinfo(char *,int *,void *,void *); //?
extern void freeaddrinfo(void *); //?
d51 19
d71 1
d80 1
@

