head	1.5;
access;
symbols
	Internet-5_66:1.5
	Internet-5_65:1.5
	Internet-5_64:1.5
	Internet-5_63:1.5
	Internet-5_62:1.5
	Internet-5_61:1.5
	Internet-5_60:1.5
	Internet-5_59:1.5
	Internet-5_58:1.4
	Internet-5_57:1.4
	Internet-5_56:1.4
	Internet-5_55:1.4
	Internet-5_54:1.4
	Internet-5_53:1.4
	Internet-5_52:1.4
	Internet-5_51:1.4
	Internet-5_50:1.4
	Internet-5_49:1.4
	Internet-5_48:1.4
	Internet-5_47:1.4
	Internet-5_46:1.4
	RO_5_07:1.4
	Internet-5_45:1.4
	Internet-5_44:1.4
	Internet-5_43b:1.4
	Internet-5_43a:1.4
	Internet-5_43:1.4
	Internet-5_42:1.3
	Internet-5_41:1.3
	Internet-5_40:1.2
	Internet-5_39:1.2
	Internet-5_38:1.1.1.1
	Internet-5_37:1.1.1.1
	Internet-5_36:1.1.1.1
	Internet-5_35:1.1.1.1
	Internet-5_34:1.1.1.1
	Internet-5_33:1.1.1.1
	Internet-5_32:1.1.1.1
	Internet-5_31:1.1.1.1
	Internet-5_30:1.1.1.1
	kbracey_Internet_000204:1.1.1.1
	nbingham_Internet_991119:1.1.1.1
	nbingham_Internet_991007:1.1.1.1
	nturton_Internet-0_00:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.4
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	Ursula:1.1.1.1.0.2
	Ursula_bp:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2017.05.11.19.48.23;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	922cuEulQ2nsA0Rz;

1.4
date	2003.12.03.18.17.14;	author bavison;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.03.15.20.04;	author rsprowson;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.17.19.53.21;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	98.07.06.13.38.57;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.07.06.13.38.57;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Spelling correction
netmark->netmask

Version 5.59. Tagged as 'Internet-5_59'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * ifrconfig.c
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"

#include "net/if.h"
#include "netinet/in.h"

#include "sys/errno.h"
#include "netdb.h"
#include "riscos.h"

#include "inetlib.h"
#include "socklib.h"
#include "unixlib.h"

static struct	ifreq ifr;
static struct	sockaddr_in netmask = { AF_INET };
static char	name[30] = { 0 };
static int	flags;
static int	metric;
static int	s = -1;
static int	errvarflag = 0;

static char errbuf[128];

static const char errvar[] = "Inet$Error";

void do_whoamiaddr(), do_whoamimask();

char *gstrans();

static struct cmd {
	char	*c_name;
	int	c_parameter;
	void	(*c_func)();
} cmds[] = {
	{ "revarp",	SIOCGWHOIAMR,	do_whoamiaddr},
	{ "bootp",	SIOCGWHOIAMB,	do_whoamiaddr},
	{ "netmask",	SIOCGWHOIAMM,	do_whoamimask},
	{ 0,		 0,		  0},
};

void printhelp(void);
void Perror(char *cmd);
void status(void);
void setifflags(short value);
int gethname(void);
void sethname(void);
void printb(char *s, register unsigned short v, register char *bits);
void SetVar(const char *var, char *str);
void in_status(void);

static int identcmd = 0;
static int maskcmd = 0;

static void tidyup(void)
{
    if( s >= 0 )
    {
	close(s);
	s = -1;
    }
}

int main(int argc, char *argv[])
{
	int af = AF_INET;

	if (argc > 1 && strcmp(argv[1], "-help") == 0) {
		printhelp();
		exit(0);
	}
	argc--, argv++;
	if (argc > 0 && strcmp(*argv, "-e") == 0) {
		errvarflag = 1;
		argc--; argv++;
	}
	if (argc < 1)
	{
	    printhelp();
	    exit(1);
	}

	strncpy(name, gstrans(*argv), sizeof(name));
	strncpy(ifr.ifr_name, name, sizeof(ifr.ifr_name));
	argc--, argv++;

	/*
	 * set exit handler to close the socket if necessary
	 */
#ifdef __riscos
	if( atexit(tidyup) != 0 )
	    Perror("cannot set exit handler");
#endif

	if( (s = socket(af, SOCK_DGRAM, 0)) < 0 )
	{
	    sprintf(errbuf, "socket: %s (error %d)",
		    _inet_error.errmess, _inet_error.errnum);
	    Perror(errbuf);
	}

	if( ioctl(s, SIOCGIFFLAGS, (caddr_t)&ifr) < 0 )
	    Perror("interface name not known");

	strncpy(ifr.ifr_name, name, sizeof ifr.ifr_name);
	flags = ifr.ifr_flags;
	if (ioctl(s, SIOCGIFMETRIC, (caddr_t)&ifr) < 0) {
		sprintf(errbuf, "metric not found: %s (error %d)",
			_inet_error.errmess, _inet_error.errnum);
		Perror(errbuf);
	}
	else
		metric = ifr.ifr_metric;
	if (argc == 0) {
		status();
		close(s);
		s = -1;
		exit(0);
	}

	while (argc > 0) {
		register struct cmd *p;

		for (p = cmds; p->c_name; p++)
			if (strcmp(*argv, p->c_name) == 0)
			{
			    (*p->c_func) (p->c_parameter);
			    break;
			}

		argc--, argv++;
	}

	strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
	if (socketioctl(s, SIOCGIFADDR, (caddr_t)&ifr) < 0) {
	    if (identcmd)
	    {
		int tries;

		for (tries = 0; tries < 3; tries++)
		{
		    strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
		    if (ioctl(s, identcmd, (caddr_t)&ifr) >= 0)
			break;
		}
		if (tries == 3)
		{
		    close(s);
		    s = -1;
		    sprintf(errbuf,
			    "internet address not found: %s (error %d)",
			    _inet_error.errmess, _inet_error.errnum);
		    Perror(errbuf);
		}
	    }

	    if (maskcmd)
	    {
		strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
		if (ioctl(s, maskcmd, (caddr_t)&ifr) < 0)
		{
		    close(s);
		    s = -1;
		    sprintf(errbuf, "netmask not found: %s (error %d)",
			    _inet_error.errmess, _inet_error.errnum);
		    Perror(errbuf);
		}
	    }
	    if (identcmd)
	    {
		setifflags(-IFF_UP);
		setifflags(IFF_UP);
	    }
	}
	if (!gethname())
	    sethname();

	close(s);
	s = -1;
	exit(0);
}

void do_whoamiaddr(int cmd)
{
    identcmd = cmd;
}

void do_whoamimask(int cmd)
{
    maskcmd = cmd;
}

void setifflags(short value)
{
	if (ioctl(s, SIOCGIFFLAGS, (caddr_t)&ifr) < 0) {
		sprintf(errbuf, "cannot read flags: %s (error %d)",
			_inet_error.errmess, _inet_error.errnum);
		Perror(errbuf);
	}
	strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
	flags = ifr.ifr_flags;

	if (value < 0) {
		value = -value;
		flags &= ~value;
	} else
		flags |= value;
	ifr.ifr_flags = flags;

	if (ioctl(s, SIOCSIFFLAGS, (caddr_t)&ifr) < 0)
	{
	    sprintf(errbuf, "cannot set flags: %s (error %d)",
		    _inet_error.errmess, _inet_error.errnum);
	    Perror(errbuf);
	}
}

#define IFFBITS \
"\020\1UP\2BROADCAST\3DEBUG\4LOOPBACK\5POINTOPOINT\6NOTRAILERS\7RUNNING\10NOARP\
"

/*
 * Print the status of the interface.  If an address family was
 * specified, show it and it only; otherwise, show them all.
 */
void status(void)
{
	printf("%s: ", name);
	printb("flags", flags, IFFBITS);
	if (metric)
		printf(" metric %d", metric);
	putchar('\n');
	in_status();
}

void in_status(void)
{
	struct sockaddr_in *sin;
	char *inet_ntoa();

	strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
	if (ioctl(s, SIOCGIFADDR, (caddr_t)&ifr) < 0) {
		if (errno == EADDRNOTAVAIL || errno == EAFNOSUPPORT) {
			return;
		} else {
			sprintf(errbuf,
				"cannot read internet address: %s (error %d)",
				_inet_error.errmess, _inet_error.errnum);
			Perror(errbuf);
		}
	}
	sin = (struct sockaddr_in *)&ifr.ifr_addr;
	printf("\tinet %s ", inet_ntoa(sin->sin_addr));
	strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
	if (ioctl(s, SIOCGIFNETMASK, (caddr_t)&ifr) < 0) {
		if (errno != EADDRNOTAVAIL)
		{
		    sprintf(errbuf, "cannot read netmask: %s (error %d)",
			    _inet_error.errmess, _inet_error.errnum);
		    Perror(errbuf);
		}
		bzero((char *)&ifr.ifr_addr, sizeof(ifr.ifr_addr));
	} else
		netmask.sin_addr =
		    ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr;
	printf("netmask %lx ", ntohl(netmask.sin_addr.s_addr));
	if (flags & IFF_BROADCAST) {
		if (ioctl(s, SIOCGIFBRDADDR, (caddr_t)&ifr) < 0) {
			if (errno == EADDRNOTAVAIL)
			    bzero((char *)&ifr.ifr_addr, sizeof(ifr.ifr_addr));
			else {
			    sprintf(errbuf,
				    "cannot read broadcast "
				    "address: %s (error %d)",
				    _inet_error.errmess, _inet_error.errnum);
			    Perror(errbuf);
			}
		}
		strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
		sin = (struct sockaddr_in *)&ifr.ifr_addr;
		if (sin->sin_addr.s_addr != 0)
			printf("broadcast %s", inet_ntoa(sin->sin_addr));
	}
	putchar('\n');
}

#include <kernel.h>
#include <swis.h>

void Perror(char *cmd)
{
    char errmess[128];

    if( name[0] )
	sprintf(errmess, "ifrconfig error when accessing interface %s: %s",
		name, cmd);
    else
	sprintf(errmess, "ifrconfig: %s", cmd);

    if (!errvarflag)
	fprintf(stderr, "%s\n", errmess);
    else
	SetVar(errvar, errmess);

    if( s != -1 )
    {
	close(s);
	s = -1;
    }

    exit(1);
}

static char gstbuf[256];

char *gstrans(char *s)
{
    _kernel_swi_regs rin, rout;
    int len;

    gstbuf[0] = 0;
    rin.r[0] = (int)s;
    rin.r[1] = (int)gstbuf;
    rin.r[2] = sizeof(gstbuf);
    (void)_kernel_swi(XOS_Bit | OS_GSTrans, &rin, &rout);
    len = rout.r[2];
    gstbuf[len] = 0;
    return(gstbuf);
}

void SetVar(const char *var, char *str)
{
	_kernel_oserror *e;
	_kernel_swi_regs rin, rout;

	rin.r[0] = (int)var;
	rin.r[1] = (int)str;
	rin.r[2] = strlen(str)+1;
	rin.r[3] = 0;
	rin.r[4] = 0;
	e = _kernel_swi(XOS_Bit | OS_SetVarVal, &rin, &rout);
}

/*
 * Print a value a la the %b format
 */
void printb(char *s, register unsigned short v, register char *bits)
{
	register int i, any = 0;
	register char c;

	if (bits && *bits == 8)
		printf("%s=%o", s, v);
	else
		printf("%s=%x", s, v);
	bits++;
	if (bits) {
		putchar('<');
		while (i = *bits++) {
			if (v & (1 << (i-1))) {
				if (any)
					putchar(',');
				any = 1;
				for (; (c = *bits) > 32; bits++)
					putchar(c);
			} else
				for (; *bits > 32; bits++)
					;
		}
		putchar('>');
	}
}

void printhelp(void)
{
    printf("Usage:   ifrconfig [-e] <interface> [ revarp | bootp ] [ netmask ]\n");
    printf("         configure network interface address and netmask via Reverse ARP or BOOTP\n");
    printf("Options: -e  write any errors to Inet$Error\n");
}

int gethname(void)
{
    int nread;
    _kernel_swi_regs rin, rout;
    _kernel_oserror *e;
    char namebuf[32];

    rin.r[0] = (int)"Inet$HostName";
    rin.r[1] = (int)namebuf;
    rin.r[2] = 32;
    rin.r[3] = 0;
    rin.r[4] = 0;
    e = _kernel_swi(XOS_Bit | OS_ReadVarVal, &rin, &rout);
    if (e != 0)
	return (0);
    nread = rout.r[2];
    namebuf[nread] = 0;
    return (nread);
}

void sethname(void)
{
    char namebuf[32];
    struct sockaddr_in *sin;
    struct hostent *hp;

    strncpy(ifr.ifr_name, name, sizeof (ifr.ifr_name));
    if (ioctl(s, SIOCGIFADDR, (caddr_t)&ifr) < 0)
	strcpy(namebuf, "ARM_NoName");
    else {
	sin = (struct sockaddr_in *)&ifr.ifr_addr;
	hp = gethostbyaddr((void *) &sin->sin_addr, sizeof(u_long), AF_INET);
	if (hp != 0)
	    sprintf(namebuf, "%s", hp->h_name);
	else
	    sprintf(namebuf, "ARM%08lx", ntohl(sin->sin_addr.s_addr));
    }
    SetVar("Inet$HostName", namebuf);
}

/* EOF ifrconfig.c */
@


1.4
log
@ANSIized.

Version 5.43. Tagged as 'Internet-5_43'
@
text
@d404 1
a404 1
    printf("         configure network interface address and netmark via Reverse ARP\n");
@


1.3
log
@Finally got sick of changing the version number in !Boot and !Run and AunMap
so now only !Help tells you the version.
Added lots of "-Dlint"s as previously the (un)lucky developer who checked
the source out got their name stamped in the released binaries.
#if'd out a bum switch which only makes sense for FreeBSD.
A bit more of 'host' imported,probably not worth finishing.

Version 5.41. Tagged as 'Internet-5_41'
@
text
@d22 1
d24 1
d54 1
a54 1
int do_whoamiaddr(), do_whoamimask();
d61 1
a61 1
	int	(*c_func)();
d69 10
d91 1
a91 3
main(argc, argv)
	int argc;
	char *argv[];
d210 1
a210 1
do_whoamiaddr(int cmd)
d215 1
a215 1
do_whoamimask(int cmd)
d220 1
a220 2
setifflags(value)
short value;
d253 1
a253 1
status()
d263 1
a263 1
in_status()
d317 1
a317 1
Perror(char *cmd)
d358 1
a358 2
SetVar(var, str)
	char *var, *str;
d374 1
a374 4
printb(s, v, bits)
	char *s;
	register char *bits;
	register unsigned short v;
d401 1
a401 1
printhelp()
d408 1
a408 1
int gethname()
d428 1
a428 1
sethname()
d439 1
a439 1
	hp = gethostbyaddr(&sin->sin_addr, sizeof(u_long), AF_INET);
@


1.2
log
@Updated version numbers in an assortment of places to 5.39
Added freebsd disclaimer to !Help
added gethost produced from sources
Deleted ANT gethost and host binaries
Added useful help to all the utilities

Version 5.39. Tagged as 'Internet-5_39'
@
text
@a16 3
 * $Header: /home/cvs/RiscOS/Sources/SystemRes/Internet/Sources/ifrconfig/c/IfRConfig,v 1.1.1.1 1998/07/06 13:38:57 sbrodie Exp $
 * $Source: /home/cvs/RiscOS/Sources/SystemRes/Internet/Sources/ifrconfig/c/IfRConfig,v $
 *
a19 7
 *
 * $Log: IfRConfig,v $
 * Revision 1.1.1.1  1998/07/06 13:38:57  sbrodie
 * Import of source code for Internet support binaries and utilities.
 *
 * Revision 1.1  95/09/18  18:01:06  kwelton
 * Initial revision
@


1.1
log
@Initial revision
@
text
@d17 2
a18 2
 * $Header: /ax/networking:Apps/ifrconfig.c:networking  1.1  $
 * $Source: /ax/networking:Apps/ifrconfig.c: $
d24 4
a27 1
 * $Log:	ifrconfig.c,v $
a49 2
static char    *versionstring = "ifrconfig version 1.04 [18 Sep 1995]:";

a95 3
		printf("%s\n", versionstring);
		printf("configure network interface address and netmask\n");
		printf("via Reverse ARP.\n\n");
a105 1
	    printf("ifconfig: invalid number of command arguments");
d408 3
a410 4
    printf("Command format:-\n\n");
    printf("ifrconfig [-e] interface [ revarp | bootp ] [ netmask ]\n\n");
    printf("Option:-\n\n");
    printf("-e	  write error report to Inet$Error\n");
@


1.1.1.1
log
@Import of source code for Internet support binaries and utilities.
@
text
@@
