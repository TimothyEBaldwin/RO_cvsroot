head	1.3;
access;
symbols
	Internet-5_66:1.3
	Internet-5_65:1.3
	Internet-5_64:1.3
	Internet-5_63:1.3
	Internet-5_62:1.3
	Internet-5_61:1.3
	Internet-5_60:1.2
	Internet-5_59:1.2
	Internet-5_58:1.2
	Internet-5_57:1.2
	Internet-5_56:1.2
	Internet-5_55:1.1;
locks; strict;
comment	@# @;


1.3
date	2018.03.23.22.24.59;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	0KXR3UzruywliDvA;

1.2
date	2014.11.03.23.14.02;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	ciG9npdSRsS5iNWx;

1.1
date	2014.09.06.19.48.21;	author rsprowson;	state Exp;
branches;
next	;
commitid	ZkA8J33l2UVs1kPx;


desc
@@


1.3
log
@Fixes from static analysis
Ref https://www.riscosopen.org/forum/forums/4/topics/9503#posts-72595 and subsequent offline checks.

arp: missing return from non-void delete() (from FreeBSD 13977)
ifconfig: undefined variable m (from FreeBSD revision 13145)
          correct return types to void for xxx_getaddr() (from FreeBSD revision 19914)
inetstat: dead array variable buf2[] removed
ipvars: missing return value from main()
map-mbone: missing va_end (from NetBSD revision 1.8)
md5: file handle leak on error (from FreeBSD revision 292955)
mrinfo: missing va_end (from NetBSD revision 1.12)
mtrace: missing va_end (from NetBSD revision 1.18)
newfiler: add comment for apparent missing return
sysctl: fix QUAD variable type (from FreeBSD revision 88696)
        though academic since Internet doesn't have any quad_t variables explicit function return types added in PathConf.c
BootNet: change RMIfThere alias to use temporary variable from its own namespace

Version 5.61. Tagged as 'Internet-5_61'
@
text
@/* mdXhl.c * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <phk@@FreeBSD.org> wrote this file.  As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 * ----------------------------------------------------------------------------
 */

#include <sys/cdefs.h>
#ifndef RISCOS_TWEAK
__FBSDID("$FreeBSD$");
#endif

#include <sys/types.h>
#include <sys/stat.h>
#ifdef RISCOS_TWEAK
#include "sys/fcntl.h"
#include "sys/param.h" /* For MIN() */
#else
#include <fcntl.h>
#include <unistd.h>
#endif

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>

#include "mdX.h"

char *
MDXEnd(MDX_CTX *ctx, char *buf)
{
	int i;
	unsigned char digest[LENGTH];
	static const char hex[]="0123456789abcdef";

	if (!buf)
		buf = malloc(2*LENGTH + 1);
	if (!buf)
		return 0;
	MDXFinal(digest, ctx);
	for (i = 0; i < LENGTH; i++) {
		buf[i+i] = hex[digest[i] >> 4];
		buf[i+i+1] = hex[digest[i] & 0x0f];
	}
	buf[i+i] = '\0';
	return buf;
}

char *
MDXFile(const char *filename, char *buf)
{
	return (MDXFileChunk(filename, buf, 0, 0));
}

char *
MDXFileChunk(const char *filename, char *buf, off_t ofs, off_t len)
{
	unsigned char buffer[BUFSIZ];
	MDX_CTX ctx;
	struct stat stbuf;
	int f, i, e;
	off_t n;

#ifdef RISCOS_TWEAK
	FILE *handle;

	MDXInit(&ctx);
	handle = fopen(filename, "rb");
	if (handle == NULL)
		return NULL;
	if (fseek(handle, 0, SEEK_END) != 0) {
		i = -1;
		goto error;
	}
	stbuf.st_size = ftell(handle);
#else
	MDXInit(&ctx);
	f = open(filename, O_RDONLY);
	if (f < 0)
		return 0;
	if (fstat(f, &stbuf) < 0) {
		i = -1;
		goto error;
	}
#endif
	if (ofs > stbuf.st_size)
		ofs = stbuf.st_size;
	if ((len == 0) || (len > stbuf.st_size - ofs))
		len = stbuf.st_size - ofs;
#ifdef RISCOS_TWEAK
	if (fseek(handle, ofs, SEEK_SET) != 0) {
		i = -1;
		goto error;
	}
#else
	if (lseek(f, ofs, SEEK_SET) < 0) {
		i = -1;
		goto error;
	}
#endif
	n = len;
	i = 0;
	while (n > 0) {
#ifdef RISCOS_TWEAK
		i = MIN(n, sizeof(buffer));
		if (fread(buffer, sizeof(unsigned char), i, handle) != i) {
			i = -1;
			break;
		}
#else
		if (n > sizeof(buffer))
			i = read(f, buffer, sizeof(buffer));
		else
			i = read(f, buffer, n);
		if (i < 0) 
			break;
#endif
		MDXUpdate(&ctx, buffer, i);
		n -= i;
	} 
error:
	e = errno;
#ifdef RISCOS_TWEAK
	fclose(handle);
#else
	close(f);
#endif
	errno = e;
	if (i < 0)
		return 0;
	return (MDXEnd(&ctx, buf));
}

char *
MDXData (const void *data, unsigned int len, char *buf)
{
	MDX_CTX ctx;

	MDXInit(&ctx);
	MDXUpdate(&ctx,data,len);
	return (MDXEnd(&ctx, buf));
}
@


1.2
log
@Pass back errno if fread fails
To more accurately mimic open() with fopen() we need to make i negative so errno gets reported.
Trim unnecessary library from MD5 makefile
@
text
@d72 4
a75 2
	if (fseek(handle, 0, SEEK_END) != 0)
		return NULL;
d82 4
a85 2
	if (fstat(f, &stbuf) < 0)
		return 0;
d92 4
a95 2
	if (fseek(handle, ofs, SEEK_SET) != 0)
		return NULL;
d97 4
a100 2
	if (lseek(f, ofs, SEEK_SET) < 0)
		return 0;
d122 1
@


1.1
log
@Add md5 utility A port of the FreeBSD tool of the same name, md5
calculates a long check sequence to see if the file has been transported across the internet without error.
Specifically, this is a snapshot of
  /lib/libmd/md5c.c revision 154479
  /lib/libmd/mdXhl.c revision 154479
  /sbin/md5/md5.c revision 238964
with a few tweaks for RISC OS.
Tested by comparing the MD5 sum of a few downloads from the downloads page.

Version 5.55. Tagged as 'Internet-5_55'
@
text
@d99 2
a100 1
		if (fread(buffer, sizeof(unsigned char), i, handle) != i)
d102 1
@

