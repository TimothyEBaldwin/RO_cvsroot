head	1.1;
branch	1.1.1;
access;
symbols
	Internet-5_66:1.1.1.1
	Internet-5_65:1.1.1.1
	Internet-5_64:1.1.1.1
	Internet-5_63:1.1.1.1
	Internet-5_62:1.1.1.1
	Internet-5_61:1.1.1.1
	Internet-5_60:1.1.1.1
	Internet-5_59:1.1.1.1
	Internet-5_58:1.1.1.1
	Internet-5_57:1.1.1.1
	Internet-5_56:1.1.1.1
	Internet-5_55:1.1.1.1
	Internet-5_54:1.1.1.1
	Internet-5_53:1.1.1.1
	Internet-5_52:1.1.1.1
	Internet-5_51:1.1.1.1
	Internet-5_50:1.1.1.1
	Internet-5_49:1.1.1.1
	Internet-5_48:1.1.1.1
	Internet-5_47:1.1.1.1
	Internet-5_46:1.1.1.1
	RO_5_07:1.1.1.1
	Internet-5_45:1.1.1.1
	Internet-5_44:1.1.1.1
	Internet-5_43b:1.1.1.1
	Internet-5_43a:1.1.1.1
	Internet-5_43:1.1.1.1
	Internet-5_42:1.1.1.1
	Internet-5_41:1.1.1.1
	Internet-5_40:1.1.1.1
	Internet-5_39:1.1.1.1
	Internet-5_38:1.1.1.1
	Internet-5_37:1.1.1.1
	Internet-5_36:1.1.1.1
	Internet-5_35:1.1.1.1
	Internet-5_34:1.1.1.1
	Internet-5_33:1.1.1.1
	Internet-5_32:1.1.1.1
	Internet-5_31:1.1.1.1
	Internet-5_30:1.1.1.1
	kbracey_Internet_000204:1.1.1.1
	nbingham_Internet_991119:1.1.1.1
	nbingham_Internet_991007:1.1.1.1
	nturton_Internet-0_00:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.4
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	Ursula:1.1.1.1.0.2
	Ursula_bp:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.07.06.13.39.17;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.07.06.13.39.17;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@Tue Dec 27 06:24:24 PST 1988

Traceroute is a system administrators utility to trace the route
ip packets from the current system take in getting to some
destination system.  See the comments at the front of the
program for a description of its use.

This program 

 a) can only be run by root (it uses raw ip sockets).

 b) REQUIRES A KERNEL MOD to the raw ip output code to run.

If you want to hack on your kernel, my modified version of the
routine rip_output (in file /sys/netinet/raw_ip.c) is attached.
This code may or may not resemble the code in your kernel.
It may offer you a place to start but I make no promises.
If you do hack your kernel, remember to test everything that uses
raw ip sockets (e.g., ping and egpup/gated) & make sure they still
work.  I wish you the best of luck and you're on your own.

If your system has the ttl bug mentioned in the source, you
might want to fix it while you're in the kernel.  (This bug
appears in all releases of BSD up to but not including 4.3tahoe.
If your version of netinet/ip_icmp.c is any earlier than 7.3
(April, '87), it has the bug.)  The fix is just to add the line
	ip->ip_ttl = MAXTTL;
after the line
	ip->ip_src = t;
(or anywhere before the call to icmp_send) in routine icmp_reflect.

If you're running this on a pre-4.3bsd system (e.g., Sun 3.x,
Ultrix) that strips ip headers from icmp messages, add -DARCHAIC
to CFLAGS in the Makefile.  Also note that rip_output contains
a conditional for a 4.2/4.3 change in the location of a raw
socket's protocol number.  I've checked this under 4.3 & Sun OS
3.5 but you should double-check your system to make sure the
appropriate branch of the #if is taken (check the line that
assigned to ip->ip_p in your system's original rip_output).

A couple of awk programs to massage the traceroute output are
included.  "mean.awk" and "median.awk" compute the mean and median
time to each hop, respectively.  I've found that something like

	traceroute -q 7 foo.somewhere >t
	awk -f median.awk t | graph

can give you a quick picture of the bad spots on a long
path (median is usually a better noise filter than mean).

Enjoy.

 - Van Jacobson (van@@helios.ee.lbl.gov)

-------------------- rip_output from /sys/netinet/raw_ip.c
rip_output(m, so)
	register struct mbuf *m;
	struct socket *so;
{
	register struct ip *ip;
	int error;
	struct rawcb *rp = sotorawcb(so);
	struct sockaddr_in *sin;
#if BSD>=43
	short proto = rp->rcb_proto.sp_protocol;
#else
	short proto = so->so_proto->pr_protocol;
#endif
	/*
	 * if the protocol is IPPROTO_RAW, the user handed us a 
	 * complete IP packet.  Otherwise, allocate an mbuf for a
	 * header and fill it in as needed.
	 */
	if (proto != IPPROTO_RAW) {
		/*
		 * Calculate data length and get an mbuf
		 * for IP header.
		 */
		int len = 0;
		struct mbuf *m0;

		for (m0 = m; m; m = m->m_next)
			len += m->m_len;

		m = m_get(M_DONTWAIT, MT_HEADER);
		if (m == 0) {
			m = m0;
			error = ENOBUFS;
			goto bad;
		}
		m->m_off = MMAXOFF - sizeof(struct ip);
		m->m_len = sizeof(struct ip);
		m->m_next = m0;

		ip = mtod(m, struct ip *);
		ip->ip_tos = 0;
		ip->ip_off = 0;
		ip->ip_p = proto;
		ip->ip_len = sizeof(struct ip) + len;
		ip->ip_ttl = MAXTTL;
	} else
		ip = mtod(m, struct ip *);

	if (rp->rcb_flags & RAW_LADDR) {
		sin = (struct sockaddr_in *)&rp->rcb_laddr;
		if (sin->sin_family != AF_INET) {
			error = EAFNOSUPPORT;
			goto bad;
		}
		ip->ip_src.s_addr = sin->sin_addr.s_addr;
	} else
		ip->ip_src.s_addr = 0;

	ip->ip_dst = ((struct sockaddr_in *)&rp->rcb_faddr)->sin_addr;

#if BSD>=43
	return (ip_output(m, rp->rcb_options, &rp->rcb_route, 
	   (so->so_options & SO_DONTROUTE) | IP_ALLOWBROADCAST));
#else
	return (ip_output(m, (struct mbuf *)0, &rp->rcb_route, 
	   (so->so_options & SO_DONTROUTE) | IP_ALLOWBROADCAST));
#endif
bad:
	m_freem(m);
	return (error);
}
@


1.1.1.1
log
@Import of source code for Internet support binaries and utilities.
@
text
@@
