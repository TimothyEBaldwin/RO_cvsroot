head	1.4;
access;
symbols
	iMx6-1_01:1.4
	iMx6-1_00:1.4
	iMx6-0_99:1.4
	iMx6-0_98:1.4
	iMx6-0_97:1.4
	iMx6-0_96-1_4_2_12:1.1.1.1.2.2
	iMx6-0_96:1.4
	iMx6-0_90-1_4_2_11:1.1.1.1.2.2
	iMx6-0_95:1.4
	iMx6-0_94:1.4
	iMx6-0_93:1.4
	iMx6-0_92:1.4
	iMx6-0_91:1.4
	iMx6-0_90-1_4_2_10:1.1.1.1.2.2
	iMx6-0_90:1.4
	iMx6-0_87-1_4_2_9:1.1.1.1.2.2
	iMx6-0_89:1.4
	iMx6-0_87-1_4_2_8:1.1.1.1.2.1
	iMx6-0_88:1.3
	iMx6-0_87-1_4_2_7:1.1.1.1.2.1
	iMx6-0_87:1.3
	iMx6-0_82-1_4_2_6:1.1.1.1.2.1
	iMx6-0_86:1.3
	iMx6-0_82-1_4_2_5:1.1.1.1.2.1
	iMx6-0_85:1.3
	iMx6-0_82-1_4_2_4:1.1.1.1.2.1
	iMx6-0_84:1.3
	iMx6-0_83:1.3
	iMx6-0_82-1_4_2_3:1.1.1.1.2.1
	iMx6-0_82:1.3
	iMx6-0_81:1.3
	iMx6-0_80-1_4_2_2:1.1.1.1.2.1
	iMx6-0_80-1_4_2_1:1.1.1.1.2.1
	iMx6-0_80:1.3
	iMx6-0_79:1.2
	SMP:1.1.1.1.0.2
	SMP_bp:1.1.1.1
	iMx6-0_78:1.1.1.1
	iMx6-0_77:1.1.1.1
	iMx6-0_76:1.1.1.1
	iMx6-0_75:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2017.12.31.12.14.30;	author jballance;	state Exp;
branches;
next	1.3;
commitid	TEKmVX6WRzZpy2lA;

1.3
date	2017.07.26.07.36.53;	author jballance;	state Exp;
branches;
next	1.2;
commitid	CyZP0iPCrYQ36I0A;

1.2
date	2017.07.18.12.58.16;	author jballance;	state Exp;
branches;
next	1.1;
commitid	uFhk8BbHvz6h8IZz;

1.1
date	2017.01.20.01.46.53;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	SZe1LdhMuDPoaECz;

1.1.1.1
date	2017.01.20.01.46.53;	author jballance;	state Exp;
branches
	1.1.1.1.2.1;
next	;
commitid	SZe1LdhMuDPoaECz;

1.1.1.1.2.1
date	2017.07.29.12.02.16;	author jlee;	state Exp;
branches;
next	1.1.1.1.2.2;
commitid	dFmrZN3Yw5D7t71A;

1.1.1.1.2.2
date	2017.12.31.17.47.42;	author jballance;	state Exp;
branches;
next	;
commitid	D8i9Xfa5xWMJo4lA;


desc
@@


1.4
log
@Improved GPIO isolation
Detail:
Occasional misstarts of EtherTH in RevD boards resolved to GPIO issues.
Barrier instructions added.
Admin:


Version 0.89. Tagged as 'iMx6-0_89'
@
text
@; Copyright 2017 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO
        GET     Hdr:Proc

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.iMx6q
        GET     hdr.StaticWS
        GET     HALDevice
        GET     GPIODevice
        GET     hdr.GPIO

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  GPIO_Init
        EXPORT  GPIO_SetAsOutput
        EXPORT  GPIO_SetAsInput
        EXPORT  GPIO_WriteBit
        EXPORT  GPIO_ReadBit
        EXPORT  GPIO_SetAndEnableIRQ
        EXPORT  GPIO_DisableIRQ
        EXPORT  GPIO_IRQClear
        EXPORT  GPIO_DeviceNumber
        EXPORT  GPIO_ReadBitAddr
        EXPORT  GPIO_DeviceInit
        IMPORT  TPSRead
        IMPORT  TPSWrite
        IMPORT  memcpy
        IMPORT  IIC_DoOp_Poll
 [ Debug
        IMPORT  DebugHALPrint
        IMPORT  DebugHALPrintReg
 ]

        MACRO
        CallOS  $entry, $tailcall
        ASSERT  $entry <= HighestOSEntry
 [ "$tailcall"=""
        MOV     lr, pc
 |
   [ "$tailcall"<>"tailcall"
        ! 0, "Unrecognised parameter to CallOS"
   ]
 ]
        LDR     pc, OSentries + 4*$entry
        MEND

;  These routines handle 'stuff' to do with the GPIO registers
;  No effort is made here to handle signal multiplexing to get the
;  'bit' routed to the GPIO port.
;
;
GPIO_Init
; Don't bother resetting - just make sure no IRQs are enabled
        ldr     a1, GPIO_Log
        mov     a2, #7
        mov     a3, #0
10      str     a3, [a1, #GPIO_IMR]               ; mask
        str     a3, [a1, #GPIO_EDGE_SEL]          ; irq edge override
        add     a1, a1, #GPIO2_BASE_ADDR-GPIO1_BASE_ADDR
        subs    a2, a2, #1
        bgt     %bt10
        mov     pc, lr

GPIO_DeviceInit
        Entry   "a1 - a3, v1"
        ADRL    v1, GPIO_Device
        MOV     a1, v1
        ADR     a2, GPIODeviceTemplate
        MOV     a3, #HALDevice_GPIO_Size
        BL      memcpy
        ldr     a1, SRC_Log
        ldr     a1, [a1, #SRC_SBMR_OFFSET]
        tst     a1, #1<<27       ; check whether rev B1 or C1
        moveq   a1, #GPIORevision_iMx6Q_WBrevB
        streq   a1, [v1, #GPIORev-GPIODeviceTemplate]
        ldr     a1, GPIO_Log
        str     a1, [v1, #GPIOadr-GPIODeviceTemplate]
        MOV     a1, #0
        MOV     a2, v1
        CallOS  OS_AddDevice
; DebugTX "Device added "
        EXIT


; set GPIO bit as an output
; a1 = GPIO#<<5 (1-7) + bitno (0-31) + initial state<<8
GPIO_SetAsOutput
        Entry   "a1-a4"
; DebugReg a1, "GPSetAsOP "
        ldr     a4, GPIO_Log
        mov     a2, a1, lsr #5
        and     a2, a2, #7      ; clear out the state bit
        sub     a2, a2, #1
        mov     a3, #GPIO2_BASE_ADDR-GPIO1_BASE_ADDR
        mul     a2, a3, a2
        add     a4, a4, a2      ; locate relevant GPIO
        mov     a3, a1, lsr #8  ; get the iobit state
        and     a3, a3, #1
        and     a1, a1, #&1f    ; get bit number
        mov     a2, #1
        mov     a2, a2, lsl a1
        ldr     a1, [a4, #GPIO_DR]
        teq     a3, #0
        biceq   a1, a1, a2
        orrne   a1, a1, a2
        str     a1, [a4, #GPIO_DR]    ; set bit state
        ldr     a1, [a4, #GPIO_GDIR]
        orr     a1, a1, a2
        str     a1, [a4, #GPIO_GDIR]  ; set as output
        DMB     ST
        EXIT

        ; a1 = GPIO#<<5 (1-7) + bitno (0-31)
GPIO_SetAsInput
        Entry   "a1-a4"
; DebugReg a1, "GPSetAsIP "
        ldr     a4, GPIO_Log
        mov     a2, a1, lsr #5
        and     a2, a2, #7
        sub     a2, a2, #1
        mov     a3, #GPIO2_BASE_ADDR-GPIO1_BASE_ADDR
        mul     a2, a3, a2
        add     a4, a4, a2      ; locate relevant GPIO
        and     a1, a1, #&1f    ; get bit number
        mov     a2, #1
        mov     a2, a2, lsl a1
        ldr     a1, [a4, #GPIO_GDIR]
        bic     a1, a1, a2
        str     a1, [a4, #GPIO_GDIR]  ; set as input
        DMB     ST
        EXIT

        ; a1 = GPIO#<<5 (1-7) + bitno (0-31) + state<<8
GPIO_WriteBit
        Entry   "a1-a4"
; DebugReg a1, "writeBit "
        ldr     a4, GPIO_Log
        mov     a2, a1, lsr #5
        and     a2, a2, #7      ; clear out the state bit
        sub     a2, a2, #1
        mov     a3, #GPIO2_BASE_ADDR-GPIO1_BASE_ADDR
        mul     a2, a3, a2
        add     a4, a4, a2      ; locate relevant GPIO
        tst     a1, #1<<8       ; test the state bit
        mov     a3, #1
        and     a1, a1, #&1f    ; get bit number
        mov     a3, a3, lsl a1
        ldr     a1, [a4, #GPIO_DR]
        biceq   a1, a1, a3
        orrne   a1, a1, a3
        str     a1, [a4, #GPIO_DR]    ; set bit state
        DMB     ST
        EXIT

        ; a1 = GPIO#<<5 (1-7) + bitno (0-31)
        ; This clears the irq status bit in GPIO. HAL_IRQClr still needs calling
GPIO_IRQClear
        Entry   "a1-a4"
; DebugRegNCR a1, "GPIRQClr "
        ldr     a4, GPIO_Log
        mov     a2, a1, lsr #5
        and     a2, a2, #7      ; clear out the state bit
        sub     a2, a2, #1
        mov     a3, #GPIO2_BASE_ADDR-GPIO1_BASE_ADDR
        mul     a2, a3, a2
        add     a4, a4, a2      ; locate relevant GPIO
        mov     a3, #1
        and     a1, a1, #&1f    ; get bit number
        mov     a3, a3, lsl a1
; DebugReg a3, "GPIRQClr bit "
        str     a3, [a4, #GPIO_ISR]    ; Write bit to clear
        DMB     ST
        EXIT

        ; a1 = GPIO#<<5 (1-7) + bitno (0-31)
        ; returns address of the bit in a1
GPIO_ReadBitAddr
        Entry   "a2-a4"
; DebugRegNCR a1, "GPReadBitAddr "
        ldr     a4, GPIO_Log
        mov     a2, a1, lsr #5
        and     a2, a2, #7
        sub     a2, a2, #1
        mov     a3, #GPIO2_BASE_ADDR-GPIO1_BASE_ADDR
        mul     a2, a3, a2
        add     a4, a4, a2      ; locate relevant GPIO
        add     a1, a4, #GPIO_DR
        EXIT

        ; a1 = GPIO#<<5 (1-7) + bitno (0-31)
        ; returns a1 = 0 or 1
GPIO_ReadBit
        Entry   "a2-a4"
; DebugRegNCR a1, "GPReadBit "
        ldr     a4, GPIO_Log
        mov     a2, a1, lsr #5
        and     a2, a2, #7
        sub     a2, a2, #1
        mov     a3, #GPIO2_BASE_ADDR-GPIO1_BASE_ADDR
        mul     a2, a3, a2
        add     a4, a4, a2      ; locate relevant GPIO
        and     a1, a1, #&1f
        ldr     a3, [a4, #GPIO_DR]
;  DebugRegNCR a3,"got "
        mov     a1, a3, lsr a1
        and     a1, a1, #1
;  DebugReg a1,"gave "
        EXIT

        ; a1 = GPIO#<<5 (1-7) + bitno (0-31)
        ; +  IRQ type flags <<8
        ;      (0<<8) = LEVELDETECT0
        ;      (1<<8) = LEVELDETECT1
        ;      (2<<8) = RISINGDETECT
        ;      (3<<8) = FALLINGDETECT
GPIO_SetAndEnableIRQ
        Entry   "a1-a4"
; DebugReg a1, "GPSet&EnableIRQ "
        mov     a2, a1, lsr #8
        and     a2, a2, #3
        and     a1, a1, #&ff
        mov     a4, a1, lsr #5
        sub     a4, a4, #1      ; get to 0-6
        mov     a3, #GPIO2_BASE_ADDR-GPIO1_BASE_ADDR
        mul     lr, a3, a4
        ldr     a4, GPIO_Log
        add     a4, a4, lr      ; locate relevant GPIO
        mov     a3, #1
        and     a1, a1, #&1f    ; get bit number
        mov     a3, a3, lsl a1
        ldr     lr, [a4, #GPIO_IMR]
        orr     lr, lr, a3
        str     lr, [a4, #GPIO_IMR]    ; set bit state
        ; now set the edge/level stuff from value in a2
        ; first sort the bit
        add     a1, a1, a1      ; 2 bits
        tst     a1, #1<<5       ; above 32?
        addne   a4, a4, #4      ; yes.. go to second reg
        bicne   a1, a1, #1<<5
; DebugReg a1, "use bit-"
        ldr     lr, [a4, #GPIO_ICR1]
        mov     a3, #3
        bic     lr, lr, a3, lsl a1
        orr     lr, lr, a2, lsl a1
        str     lr, [a4, #GPIO_ICR1]
        DMB     ST
        EXIT

        ; a1 = GPIO#<<5 (1-7) + bitno (0-31) + possible stuff <<8
GPIO_DisableIRQ
        Entry   "a1-a4"
; DebugReg a1, "GPDisable irq "
        ldr     a4, GPIO_Log
        and     a1, a1, #&ff
        mov     a2, a1, lsr #5
        sub     a2, a2, #1
        mov     a3, #GPIO2_BASE_ADDR-GPIO1_BASE_ADDR
        mul     a2, a3, a2
        add     a4, a4, a2      ; locate relevant GPIO
        mov     a3, #1
        and     a1, a1, #&1f    ; get bit number
        mov     a3, a3, lsl a1
        ldr     a1, [a4, #GPIO_IMR]
        bic     a1, a1, a3
        str     a1, [a4, #GPIO_IMR]    ; clr bit state
        DMB     ST
        EXIT

; return a1=Device no (IRQ no) for specified GPIO bit
; a1 = GPIO#<<5 (1-7) + bitno (0-31)
GPIO_DeviceNumber
        Entry   "a2"
        sub     a1, a1, #1<<5   ; move GPIO range to 0-6
        cmp     a1, #8
        bgt     %ft1
        adrl    a2, GPIO_GDTab1
        ldr     a1, [a2, a1, lsl #2]
        EXIT
1       mov     a1, a1, lsr #4  ; div 16
        adrl    a2, GPIO_GDTab2
        ldr     a1, [a2, a1, lsl #2]
        EXIT


GPIO_GDTab1
        DCD     IMX_INT_GPIO1_INT7
        DCD     IMX_INT_GPIO1_INT6
        DCD     IMX_INT_GPIO1_INT5
        DCD     IMX_INT_GPIO1_INT4
        DCD     IMX_INT_GPIO1_INT3
        DCD     IMX_INT_GPIO1_INT2
        DCD     IMX_INT_GPIO1_INT1
        DCD     IMX_INT_GPIO1_INT0
GPIO_GDTab2
        DCD     IMX_INT_GPIO1_INT15_0
        DCD     IMX_INT_GPIO1_INT31_16
        DCD     IMX_INT_GPIO2_INT15_0
        DCD     IMX_INT_GPIO2_INT31_16
        DCD     IMX_INT_GPIO3_INT15_0
        DCD     IMX_INT_GPIO3_INT31_16
        DCD     IMX_INT_GPIO4_INT15_0
        DCD     IMX_INT_GPIO4_INT31_16
        DCD     IMX_INT_GPIO5_INT15_0
        DCD     IMX_INT_GPIO5_INT31_16
        DCD     IMX_INT_GPIO6_INT15_0
        DCD     IMX_INT_GPIO6_INT31_16
        DCD     IMX_INT_GPIO7_INT15_0
        DCD     IMX_INT_GPIO7_INT31_16


; Generic HAL device used for all board types
GPIODeviceTemplate
        DCW     HALDeviceType_Comms + HALDeviceComms_GPIO
        DCW     HALDeviceID_GPIO_IMX6
        DCD     HALDeviceBus_Sys + HALDeviceSysBus_AXI
        DCD     1               ; API version 0.1
        DCD     GPIODesc        ; Description
GPIOadr DCD     0               ; Address (filled in later)
        %       12              ; Reserved
        DCD     GPIOActivate
        DCD     GPIODeactivate
        DCD     GPIOReset
        DCD     GPIOSleep
        DCD     -1              ; Device (none)
        DCD     0               ; TestIRQ
        DCD     0               ; ClearIRQ
        %       4
        ASSERT  (.-GPIODeviceTemplate) = HALDeviceSize
GPIOType DCD    GPIOType_iMx6Q
GPIORev DCD     GPIORevision_iMx6Q_WBrevC1
        ASSERT  (.-GPIODeviceTemplate) = HALDevice_GPIO_Size
; extra bits for API 0.1
        DCD     GPIO_ReadBit
        DCD     GPIO_WriteBit
        DCD     GPIO_SetAsInput
        DCD     GPIO_SetAsOutput
        DCD     GPIO_SetAndEnableIRQ
        DCD     GPIO_IRQClear
        DCD     GPIO_DisableIRQ
        DCD     GPIO_ReadBitAddr
        DCD     GPIO_DeviceNumber
        DCD     0;GPIO_ReservedAPI1
        ASSERT  (.-GPIODeviceTemplate) =HALDevice_GPIO_Size_0_1














GPIODesc
        =       "iMX6 GPIO interface", 0
        ALIGN

        ; These don't do much
GPIOActivate
        MOV     a1, #1
GPIODeactivate
GPIOReset
        MOV     pc, lr

GPIOSleep
        MOV     a1, #0
        MOV     pc, lr



        END
@


1.3
log
@   Resolve I2C differences between RevB and C boards and RevD
Detail:
   RevD boards have put the HDMI EDID I2C lines on I2C2 instead of
   I2C1. This conflicts with the CMOS RAM. A routine has been created
   to detect the RevD board (by the presence of a power swithch on the
   Ethernet Phy), so the HAL can set up appropriately.
Admin:
   Tested on Rev B and Rev D iMx6 boards


Version 0.80. Tagged as 'iMx6-0_80'
@
text
@d131 1
d151 1
d173 1
d193 1
d267 1
d287 1
@


1.2
log
@  Added routine to control Ethernet Phy power and reset pins
Detail:
  HAL_EtherDevice now gives access to a routine to control the
  Ethernet Phy power and reset pins. This updated device is present if the
  hal workspace pointer is non zero (bug fix) and GPIO_WriteBit routine
  now writes correctly in all cases.
Admin:
  tested on iMx6 revC2 and revD1


Version 0.79. Tagged as 'iMx6-0_79'
@
text
@d149 1
a149 1
        str     a1, [a4, #GPIO_GDIR]  ; set as output
@


1.1
log
@Initial revision
@
text
@a121 1
        mov     a3, a3, lsl a1
d125 2
a126 2
        biceq   a1, a1, a3
        orrne   a1, a1, a3
@


1.1.1.1
log
@Initial import of iMx6 HAL
@
text
@@


1.1.1.1.2.1
log
@Merge in HEAD
Detail:
  Merge in iMx6-0_80 to keep SMP branch up to date
  Files changed: hdr/StaticWS, hdr/iMx6qboard, s/Audio, s/EtherDrv, s/GPIO, s/I2C, s/RTC, s/iMx6qboard
Admin:
  Untested


Version 0.80, 1.4.2.1. Tagged as 'iMx6-0_80-1_4_2_1'
@
text
@d122 1
d126 2
a127 2
        biceq   a1, a1, a2
        orrne   a1, a1, a2
d150 1
a150 1
        str     a1, [a4, #GPIO_GDIR]  ; set as input
@


1.1.1.1.2.2
log
@Track changes in non SMP HAL
Detail:
Admin:


Version 0.87, 1.4.2.9. Tagged as 'iMx6-0_87-1_4_2_9'
@
text
@a130 1
        DMB     ST
a149 1
        DMB     ST
a170 1
        DMB     ST
a189 1
        DMB     ST
a262 1
        DMB     ST
a281 1
        DMB     ST
@


