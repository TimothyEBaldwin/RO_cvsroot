head	1.2;
access;
symbols
	iMx6-1_01:1.2
	iMx6-1_00:1.2
	iMx6-0_99:1.2
	iMx6-0_98:1.2
	iMx6-0_97:1.2
	iMx6-0_96-1_4_2_12:1.1.2.1
	iMx6-0_90-1_4_2_11:1.1.2.1
	iMx6-0_90-1_4_2_10:1.1.2.1
	iMx6-0_87-1_4_2_9:1.1.2.1
	iMx6-0_87-1_4_2_8:1.1.2.1
	iMx6-0_87-1_4_2_7:1.1.2.1
	iMx6-0_82-1_4_2_6:1.1.2.1
	iMx6-0_82-1_4_2_5:1.1.2.1
	iMx6-0_82-1_4_2_4:1.1.2.1
	iMx6-0_82-1_4_2_3:1.1.2.1
	iMx6-0_80-1_4_2_2:1.1.2.1
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2018.07.07.16.28.56;	author jlee;	state Exp;
branches;
next	1.1;
commitid	b8EPc9OxtyZ1VdJA;

1.1
date	2017.07.29.12.11.20;	author jlee;	state dead;
branches
	1.1.2.1;
next	;
commitid	hRleSHqgdP6dw71A;

1.1.2.1
date	2017.07.29.12.11.20;	author jlee;	state Exp;
branches;
next	;
commitid	hRleSHqgdP6dw71A;


desc
@@


1.2
log
@Merge SMP branch to trunk
Detail:
  Makefile, s/DBell - Add doorbell HAL device implementation, using GIC SGIs
  h/irq_numbers, hdr/iMx6IRQs - Increase IMX_INTERRUPT_COUNT. Core 0 private interrupts are 0-31, core 1 160-191, core 2 192-223, core 3 224-255. Shared interrupts are 32-159.
  hdr/StaticWS - Reserve space for doorbell device & storing last SGI for each core
  hdr/iMx6q - Tidy things up a bit by removing the DebugInterrupts code
  s/Boot - Implement SMP HAL entry points
  s/Interrupts - Tidy up interrupt handling and implement new HAL IRQ calls
  s/Top - Enable cache/TLB maintenance op broadcast, and add some silicion errata workarounds
Admin:
  Untested
  Requires Kernel-6_09


Version 0.97. Tagged as 'iMx6-0_97'
@
text
@;
; Copyright (c) 2016, RISC OS Open Ltd
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;

        IMPORT  memcpy

        GET     Hdr:ListOpts
        GET     Hdr:CPU.Arch
        GET     Hdr:Macros
        GET     Hdr:Proc
        GET     Hdr:OSEntries
        GET     hdr.iMx6q
        GET     hdr.StaticWS

sb      RN      9

        EXPORT  DBell_InitDevices

        AREA    |Asm$$Code|, CODE, READONLY, PIC

DBell_InitDevices ROUT
        Entry
        ADRL    a1, DBellDevice
        ADR     a2, DBellTemplate
        MOV     a3, #HALDevice_DBell_Size
        BL      memcpy
        ADRL    a2, DBellDevice
        LDR     a1, IRQDi_Log
        STR     a1, [a2, #HALDevice_Address]
        MOV     a1, #0
        MOV     lr, pc
        LDR     pc, OSentries+4*OS_AddDevice
        EXIT

        MACRO
$class  HALDeviceField $field, $value
        LCLS    myvalue
      [ "$value" = ""
myvalue SETS    "$field"
      |
myvalue SETS    "$value"
      ]
        ASSERT  . - %A0 = HALDevice_$class$field
     [ ?HALDevice_$class$field = 2
        DCW     $myvalue
   ELIF ?HALDevice_$class$field = 4
        DCD     $myvalue
      |
        %       ?HALDevice_$class$field
      ]
        MEND

DBellTemplate
0
        HALDeviceField Type,               HALDeviceType_Comms + HALDeviceComms_ARMDBell
        HALDeviceField ID,                 HALDeviceID_ARMDBell_GIC
        HALDeviceField Location,           HALDeviceBus_Sys + HALDeviceSysBus_AXI
        HALDeviceField Version,            0
        HALDeviceField Description,        DBell_Description
        HALDeviceField Address,            0
        HALDeviceField Reserved1,          0
        HALDeviceField Activate,           DBell_Activate
        HALDeviceField Deactivate,         DBell_Deactivate
        HALDeviceField Reset,              DBell_Reset
        HALDeviceField Sleep,              DBell_Sleep
        HALDeviceField Device,             -1 ; IRQ numbers vary by core, use DBell_GetIRQ
        HALDeviceField TestIRQ,            DBell_TestIRQ
        HALDeviceField ClearIRQ,           DBell_ClearIRQ
        HALDeviceField Reserved2,          0
        ASSERT  . - %A0 = HALDeviceSize
DBell   HALDeviceField GetIRQ,             DBell_GetIRQ
DBell   HALDeviceField Ring,               DBell_Ring
        ASSERT  . - %A0 = HALDevice_DBell_Size
          
DBell_Description
        DCB     "GIC SGI doorbell", 0
        ALIGN

DBell_Activate
DBell_TestIRQ
        MOV     a1, #1
DBell_Deactivate
DBell_Reset
        MOV     pc, lr

DBell_Sleep
        MOV     a1, #0
        MOV     pc, lr

DBell_GetIRQ
        ; In: a2 = core number
        MOVS    a1, a2, LSL #5 ; IRQ 0???
        ADDNE   a1, a1, #GIC_INTERRUPT_COUNT-32 ; -32 so core 1 gets #GIC_INTERRUPT_COUNT
        MOV     pc, lr

DBell_ClearIRQ
        MOV     pc, lr
        
DBell_Ring
        ; In: a2 = mask of CPU cores
        LDR     a1, [a1, #HALDevice_Address]
        MOV     a2, a2, LSL #16
        STR     a2, [a1, #ICDSGIR-IC_DISTRIBUTOR_BASE_ADDR]
        MOV     pc, lr
        
        END

@


1.1
log
@file DBell was initially added on branch SMP.
@
text
@d1 131
@


1.1.2.1
log
@Initial SMP support
Detail:
  s/DBell, Makefile - Implement doorbell HAL device
  h/irq_numbers, hdr/iMx6IRQs - Reserve space for core 1-3 private interrupts with bases 160, 192, 224
  s/Interrupts - Remove DebugInterrupts code to make things easier to follow. Adjust IRQ entry points for SMP-ness and implement the new entry points.
  hdr/StaticWS - Remove DebugInterrupts code. Reserve space for doorbell device and SGI interrupt tracking.
  hdr/iMx6q - Remove DebugInterrupts code.
  s/Boot - Implement new SMP-related HAL entry points
  s/Top - Implement some Cortex-A9 errata workarounds. Ensure smp_enable enables cache/TLB maintenance broadcast.
Admin:
  Tested on wandboard B1


Version 0.80, 1.4.2.2. Tagged as 'iMx6-0_80-1_4_2_2'
@
text
@a0 131
;
; Copyright (c) 2016, RISC OS Open Ltd
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;

        IMPORT  memcpy

        GET     Hdr:ListOpts
        GET     Hdr:CPU.Arch
        GET     Hdr:Macros
        GET     Hdr:Proc
        GET     Hdr:OSEntries
        GET     hdr.iMx6q
        GET     hdr.StaticWS

sb      RN      9

        EXPORT  DBell_InitDevices

        AREA    |Asm$$Code|, CODE, READONLY, PIC

DBell_InitDevices ROUT
        Entry
        ADRL    a1, DBellDevice
        ADR     a2, DBellTemplate
        MOV     a3, #HALDevice_DBell_Size
        BL      memcpy
        ADRL    a2, DBellDevice
        LDR     a1, IRQDi_Log
        STR     a1, [a2, #HALDevice_Address]
        MOV     a1, #0
        MOV     lr, pc
        LDR     pc, OSentries+4*OS_AddDevice
        EXIT

        MACRO
$class  HALDeviceField $field, $value
        LCLS    myvalue
      [ "$value" = ""
myvalue SETS    "$field"
      |
myvalue SETS    "$value"
      ]
        ASSERT  . - %A0 = HALDevice_$class$field
     [ ?HALDevice_$class$field = 2
        DCW     $myvalue
   ELIF ?HALDevice_$class$field = 4
        DCD     $myvalue
      |
        %       ?HALDevice_$class$field
      ]
        MEND

DBellTemplate
0
        HALDeviceField Type,               HALDeviceType_Comms + HALDeviceComms_ARMDBell
        HALDeviceField ID,                 HALDeviceID_ARMDBell_GIC
        HALDeviceField Location,           HALDeviceBus_Sys + HALDeviceSysBus_AXI
        HALDeviceField Version,            0
        HALDeviceField Description,        DBell_Description
        HALDeviceField Address,            0
        HALDeviceField Reserved1,          0
        HALDeviceField Activate,           DBell_Activate
        HALDeviceField Deactivate,         DBell_Deactivate
        HALDeviceField Reset,              DBell_Reset
        HALDeviceField Sleep,              DBell_Sleep
        HALDeviceField Device,             -1 ; IRQ numbers vary by core, use DBell_GetIRQ
        HALDeviceField TestIRQ,            DBell_TestIRQ
        HALDeviceField ClearIRQ,           DBell_ClearIRQ
        HALDeviceField Reserved2,          0
        ASSERT  . - %A0 = HALDeviceSize
DBell   HALDeviceField GetIRQ,             DBell_GetIRQ
DBell   HALDeviceField Ring,               DBell_Ring
        ASSERT  . - %A0 = HALDevice_DBell_Size
          
DBell_Description
        DCB     "GIC SGI doorbell", 0
        ALIGN

DBell_Activate
DBell_TestIRQ
        MOV     a1, #1
DBell_Deactivate
DBell_Reset
        MOV     pc, lr

DBell_Sleep
        MOV     a1, #0
        MOV     pc, lr

DBell_GetIRQ
        ; In: a2 = core number
        MOVS    a1, a2, LSL #5 ; IRQ 0???
        ADDNE   a1, a1, #GIC_INTERRUPT_COUNT-32 ; -32 so core 1 gets #GIC_INTERRUPT_COUNT
        MOV     pc, lr

DBell_ClearIRQ
        MOV     pc, lr
        
DBell_Ring
        ; In: a2 = mask of CPU cores
        LDR     a1, [a1, #HALDevice_Address]
        MOV     a2, a2, LSL #16
        STR     a2, [a1, #ICDSGIR-IC_DISTRIBUTOR_BASE_ADDR]
        MOV     pc, lr
        
        END

@

