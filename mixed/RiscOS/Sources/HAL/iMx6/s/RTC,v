head	1.4;
access;
symbols
	iMx6-1_01:1.4
	iMx6-1_00:1.4
	iMx6-0_99:1.4
	iMx6-0_98:1.4
	iMx6-0_97:1.4
	iMx6-0_96-1_4_2_12:1.1.1.1.2.2
	iMx6-0_96:1.4
	iMx6-0_90-1_4_2_11:1.1.1.1.2.2
	iMx6-0_95:1.4
	iMx6-0_94:1.4
	iMx6-0_93:1.3
	iMx6-0_92:1.3
	iMx6-0_91:1.3
	iMx6-0_90-1_4_2_10:1.1.1.1.2.1
	iMx6-0_90:1.2
	iMx6-0_87-1_4_2_9:1.1.1.1.2.1
	iMx6-0_89:1.2
	iMx6-0_87-1_4_2_8:1.1.1.1.2.1
	iMx6-0_88:1.2
	iMx6-0_87-1_4_2_7:1.1.1.1.2.1
	iMx6-0_87:1.2
	iMx6-0_82-1_4_2_6:1.1.1.1.2.1
	iMx6-0_86:1.2
	iMx6-0_82-1_4_2_5:1.1.1.1.2.1
	iMx6-0_85:1.2
	iMx6-0_82-1_4_2_4:1.1.1.1.2.1
	iMx6-0_84:1.2
	iMx6-0_83:1.2
	iMx6-0_82-1_4_2_3:1.1.1.1.2.1
	iMx6-0_82:1.2
	iMx6-0_81:1.2
	iMx6-0_80-1_4_2_2:1.1.1.1.2.1
	iMx6-0_80-1_4_2_1:1.1.1.1.2.1
	iMx6-0_80:1.2
	iMx6-0_79:1.1.1.1
	SMP:1.1.1.1.0.2
	SMP_bp:1.1.1.1
	iMx6-0_78:1.1.1.1
	iMx6-0_77:1.1.1.1
	iMx6-0_76:1.1.1.1
	iMx6-0_75:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2018.06.21.22.48.50;	author jballance;	state Exp;
branches;
next	1.3;
commitid	9Tz7jQFUenjgxcHA;

1.3
date	2018.05.13.22.24.00;	author jballance;	state Exp;
branches;
next	1.2;
commitid	nRyVYjPRWnosEbCA;

1.2
date	2017.07.26.07.36.53;	author jballance;	state Exp;
branches;
next	1.1;
commitid	CyZP0iPCrYQ36I0A;

1.1
date	2017.01.20.01.46.53;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	SZe1LdhMuDPoaECz;

1.1.1.1
date	2017.01.20.01.46.53;	author jballance;	state Exp;
branches
	1.1.1.1.2.1;
next	;
commitid	SZe1LdhMuDPoaECz;

1.1.1.1.2.1
date	2017.07.29.12.02.16;	author jlee;	state Exp;
branches;
next	1.1.1.1.2.2;
commitid	dFmrZN3Yw5D7t71A;

1.1.1.1.2.2
date	2018.06.29.10.00.26;	author jballance;	state Exp;
branches;
next	;
commitid	nkjno4wPSfzG1aIA;


desc
@@


1.4
log
@  complete clock mods for pcf8523 and get I2C working for second variant
Detail:
Admin:
   tested on iMx6


Version 0.94. Tagged as 'iMx6-0_94'
@
text
@; Copyright 2017 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        $GetIO
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     Hdr:HALDevice
        GET     Hdr:RTCDevice
        GET     hdr:iMx6q
        GET     Hdr:iMx6qboard
        GET     hdr.StaticWS

        EXPORT  RTC_Init

        IMPORT  memcpy


        MACRO
        CallOS  $entry, $tailcall
        ASSERT  $entry <= HighestOSEntry
 [ "$tailcall"=""
        MOV     lr, pc
 |
   [ "$tailcall"<>"tailcall"
        ! 0, "Unrecognised parameter to CallOS"
   ]
 ]
        LDR     pc, OSentries + 4*$entry
        MEND

RTCAddressDAL   * &D0
                ^ 0
RTC_Public         # HALDevice_RTC_Size
RTCDeviceHAL_SB    # 4
RTCDevice_RTC_Size # 0

; HAL code for the DS1307 real time clock

        AREA    |Asm$$Code|, CODE, READONLY, PIC

RTC_Init ROUT
        Push    "lr"
        SUB     sp, sp, #12+12+8

        MOV     a1, sp
        MOV     a2, #RTCAddressDAL + 1  ; read op
        ADD     a3, sp, #12             ; -> data block
        MOV     a4, #1                  ; data block size
        STMIA   a1, {a2-a4}

        MOV     a2, #1                  ; 1 transfer
        ADD     a2, a2, #RTC_I2CNum<<24
        CallOS  OS_IICOpV
        TEQ     a1, #IICStatus_Completed
        BNE     %FT10                   ; some failure => no RTC device

        ADD     a1, sp, #12
        MOV     a2, #RTCAddressDAL + 1  ; read op
        ADD     a3, sp, #12+12+0        ; -> data block
 [ CuBox
        MOV     a4, #3                  ; data block size
 |
        MOV     a4, #1                  ; data block size
 ]
        STMIA   a1, {a2-a4}

        MOV     a2, #RTCAddressDAL
        ORR     a2, a2, #1:SHL:29       ; write op with retry
        ADD     a3, sp, #12+12+4        ; -> data block for write
        MOV     a4, #0
        STRB    a4, [a3]                ; start from register 0
        MOV     a4, #1                  ; data block size
        STMDB   a1!, {a2-a4}

        MOV     a2, #2                  ; 2 transfers
        ADD     a2, a2, #RTC_I2CNum<<24
        CallOS  OS_IICOpV

        LDR     a4, [sp, #12+12+0]      ; remember hi byte is reg start address
 [ CuBox
        TST     a4, #1:SHL:5            ; is the clock halted?
        TSTEQ   a4, #1:SHL:23           ; or possibly in powerdown
 |
        TST     a4, #1:SHL:7            ; is the clock halted?
 ]
        BEQ     %FT05

        MOV     a1, sp
        MOV     a2, #RTCAddressDAL
        ORR     a2, a2, #1:SHL:29       ; write op with retry
        ADD     a3, sp, #12             ; -> data block
 [ CuBox
        BIC     a4, a4, #1:SHL:5
        BIC     a4, a4, #1:SHL:23       ; hi order bit of PM bits
        BIC     a4, a4, #&ff:SHL:24
 |
        MOV     a4, #0
 ]
        STR     a4, [a3]                ; clear clock halt bit (and seconds)
 [ CuBox
        MOV     a4, #4                  ; data block size .. include PM bits
 |
        MOV     a4, #2                  ; data block size
 ]
        STMIA   a1, {a2-a4}

        MOV     a2, #1                  ; 1 transfer
        ADD     a2, a2, #RTC_I2CNum<<24
        CallOS  OS_IICOpV
05
        ADRL    a1, RTCDeviceStruct
        ADR     a2, RTCTemplate
        MOV     a3, #RTCDevice_RTC_Size
        BL      memcpy                  ; softcopy needed to append SB to

        STR     sb, [a1, #RTCDeviceHAL_SB]

        MOV     a2, a1                  ; device
        MOV     a1, #0                  ; flags
        CallOS  OS_AddDevice
10
        ADD     sp, sp, #12+12+8
        Pull    "pc"

RTCTemplate
        ; Public interface
        DCW     HALDeviceType_SysPeri + HALDeviceSysPeri_RTC
 [ CuBox
        DCW     HALDeviceID_RTC_PCF8523
 |
        DCW     HALDeviceID_RTC_DS1307
 ]
        DCD     HALDeviceBus_Ser + HALDeviceSerBus_IIC
        DCD     0                       ; API version
        DCD     RTCDesc
        DCD     0                       ; Address - N/A
        %       12                      ; Reserved
        DCD     RTCActivate
        DCD     RTCDeactivate
        DCD     RTCReset
        DCD     RTCSleep
        DCD     -1                      ; Interrupt N/A
        DCD     0
        %       8
        ; Specifics for an RTC
        DCB     RTCTimeFormat_BCD
        DCB     RTCFormatFlags_BCD_1BasedDay + \
                RTCFormatFlags_BCD_1BasedMonth + \
                RTCFormatFlags_BCD_NeedsYearHelp + \
                RTCFormatFlags_BCD_YearLOIsGood
        %       2
        DCD     RTCReadTime
        DCD     RTCWriteTime
        ASSERT  (.-RTCTemplate) = HALDevice_RTC_Size
        ; RTC's private data from here onwards
        DCD     0                       ; Copy of HAL's SB
        ASSERT  (.-RTCTemplate) = RTCDevice_RTC_Size
        ASSERT  ?RTCDeviceStruct = RTCDevice_RTC_Size

RTCDesc
 [ CuBox
        DCB     "PCF8523 real-time clock", 0
 |
        DCB     "DS1307 real-time clock", 0
 ]
        ALIGN

RTCActivate
        MOV     a1, #1
RTCDeactivate
RTCReset
        MOV     pc, lr
RTCSleep
        MOV     a1, #0                  ; Previously at full power
        MOV     pc, lr

        ; int RTCReadTime(struct rtcdevice *rtc, struct rtctime *time)
        ; Returns an RTCRetCode
RTCReadTime ROUT
        Push    "sb, v1, lr"

        MOV     v1, a2
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        SUB     sp, sp, #12+12+8

        ADD     a1, sp, #12
        MOV     a2, #RTCAddressDAL + 1  ; read op
        ADD     a3, sp, #12+12+0        ; -> data block
        MOV     a4, #7                  ; data block size
        STMIA   a1, {a2-a4}

        MOV     a2, #RTCAddressDAL
        ORR     a2, a2, #1:SHL:29       ; write op with retry
        ADD     a3, sp, #12+12+7        ; -> data block
 [ CuBox
        MOV     a4, #3                  ; start from register 3
 |
        MOV     a4, #0                  ; start from register 0
 ]
        STRB    a4, [a3]                
        MOV     a4, #1                  ; data block size
        STMDB   a1!, {a2-a4}

        MOV     a2, #2                  ; 2 transfers
        ADD     a2, a2, #RTC_I2CNum<<24
        CallOS  OS_IICOpV
        TEQ     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        BNE     %FT10

        ASSERT  RTCTimeStruct_BCD_Centiseconds = 0
        ASSERT  RTCTimeStruct_BCD_Seconds = 1
        ASSERT  RTCTimeStruct_BCD_Minutes = 2
        ASSERT  RTCTimeStruct_BCD_Hours = 3
    [ CuBox
        LDRB    a3, [sp, #12+12+3]      ; swap d-o-w and d-o-m order
        LDRB    a1, [sp, #12+12+4]
        STRB    a3, [sp, #12+12+4]
        STRB    a1, [sp, #12+12+3]
    ]
        LDR     a3, [sp, #12+12+0]
        MOV     a3, a3, LSL #8          ; zero centiseconds, discard d-o-w
        STR     a3, [v1, #0]

        ASSERT  RTCTimeStruct_BCD_DayOfMonth = 4
        ASSERT  RTCTimeStruct_BCD_Month = 5
        ASSERT  RTCTimeStruct_BCD_YearLO = 6
        LDR     a3, [sp, #12+12+4]
        BIC     a3, a3, #&FF:SHL:24     ; chip regs match struct
        STR     a3, [v1, #4]

        MOV     a1, #RTCRetCode_OK
10
        ADD     sp, sp, #12+12+8
        Pull    "sb, v1, pc"

        ; int RTCWriteTime(struct rtcdevice *rtc, const struct rtctime *time)
        ; Returns an RTCRetCode
RTCWriteTime
        Push    "sb, v1-v2, lr"

        ASSERT  RTCTimeStruct_BCD_Size = 8
        LDMIA   a2, {v1-v2}

        LDR     sb, [a1, #RTCDeviceHAL_SB]
        SUB     sp, sp, #12+12

        ADD     ip, sp, #12+3           ; -> data block

        CMP     v1, #-1
 [ CuBox
        MOVNE   a4, #3                  ; start from time register
        MOVEQ   a4, #6                  ; start from d-o-w register
 |
        MOVNE   a4, #0                  ; start from time register
        MOVEQ   a4, #4                  ; start from d-o-w register
 ]
        STRB    a4, [ip], #1
        ASSERT  RTCTimeStruct_BCD_Centiseconds = 0
        ASSERT  RTCTimeStruct_BCD_Seconds = 1
        ASSERT  RTCTimeStruct_BCD_Minutes = 2
        ASSERT  RTCTimeStruct_BCD_Hours = 3
        MOVNE   v1, v1, LSR #8          ; no cs
        ORRNE   v1, v1, #1:SHL:24
        STRNE   v1, [ip], #4            ; s,m,h,any d-o-w

        CMP     v2, #-1
        ASSERT  RTCTimeStruct_BCD_DayOfMonth = 4
        ASSERT  RTCTimeStruct_BCD_Month = 5
        ASSERT  RTCTimeStruct_BCD_YearLO = 6
        STRNE   v2, [ip], #3            ; dom,mon,ylo
    [ CuBox
        TEQ     a4, #3
        LDREQB  a3, [ip, #-4]          ; swap weekday and date order
        LDREQB  a1, [ip, #-3]          ; full string
        STREQB  a1, [ip, #-4]
        STREQB  a3, [ip, #-3]

        ADDNE   ip, ip, #1
        LDRNEB  a3, [ip, #-2]           ; reposition for chip order
        STRNEB  a3, [ip, #-1]     
        LDRNEB  a3, [ip, #-3]     
        STRNEB  a3, [ip, #-2]     
    ]

        MOV     a1, sp
        MOV     a2, #RTCAddressDAL
        ORR     a2, a2, #1:SHL:29       ; write op with retry
        ADD     a3, sp, #12+3           ; -> data block
        SUB     a4, ip, a3              ; data block size
        STMIA   a1, {a2-a4}

        MOV     a2, #1                  ; 1 transfer
        ADD     a2, a2, #RTC_I2CNum<<24
        CallOS  OS_IICOpV
        TEQ     a1, #IICStatus_Completed
        ASSERT  IICStatus_Completed = RTCRetCode_OK
        MOVNE   a1, #RTCRetCode_Error

        ADD     sp, sp, #12+12
        Pull    "sb, v1-v2, pc"

        END

@


1.3
log
@  Initial awareness of additional board variant
Detail:
Admin:


Version 0.91. Tagged as 'iMx6-0_91'
@
text
@d57 1
a57 1
        SUB     sp, sp, #12+12+4
d74 3
d78 1
d83 1
a83 1
        ADD     a3, sp, #12+12+1        ; -> data block
d93 1
a93 1
        LDRB    a4, [sp, #12+12+0]
d96 1
d108 2
d114 3
d118 1
d136 1
a136 1
        ADD     sp, sp, #12+12+4
d229 6
d267 1
a267 1
        MOVEQ   a4, #7                  ; start from date register
d270 1
a270 1
        MOVEQ   a4, #4                  ; start from date register
d286 13
@


1.2
log
@   Resolve I2C differences between RevB and C boards and RevD
Detail:
   RevD boards have put the HDMI EDID I2C lines on I2C2 instead of
   I2C1. This conflicts with the CMOS RAM. A routine has been created
   to detect the RevD board (by the presence of a power swithch on the
   Ethernet Phy), so the HAL can set up appropriately.
Admin:
   Tested on Rev B and Rev D iMx6 boards


Version 0.80. Tagged as 'iMx6-0_80'
@
text
@a56 1

d66 1
a66 1
        ADD     a2, a2, #RTC_I2CNum
d86 1
a86 1
        ADD     a2, a2, #RTC_I2CNum
d90 3
d94 1
d101 3
d105 1
d111 1
a111 1
        ADD     a2, a2, #RTC_I2CNum
d131 3
d135 1
d164 3
d168 1
d198 6
a203 2
        MOV     a4, #0
        STRB    a4, [a3]                ; start from register 0
d208 1
a208 1
        ADD     a2, a2, #RTC_I2CNum
d248 4
d254 1
d278 1
a278 1
        ADD     a2, a2, #RTC_I2CNum
@


1.1
log
@Initial revision
@
text
@d23 2
a24 1

d66 2
a67 1
        MOV     a2, #1                  ; 1 transfer on bus 0
d71 1
a71 1
        
d86 2
a87 1
        MOV     a2, #2                  ; 2 transfers on bus 0
d103 2
a104 1
        MOV     a2, #1                  ; 1 transfer on bus 0
d113 1
a113 1
        
d151 1
a151 1
          
d169 1
a169 1
        
d188 2
a189 1
        MOV     a2, #2                  ; 2 transfers on bus 0
d219 1
a219 1
        
d253 2
a254 1
        MOV     a2, #1                  ; 1 transfer on bus 0
@


1.1.1.1
log
@Initial import of iMx6 HAL
@
text
@@


1.1.1.1.2.1
log
@Merge in HEAD
Detail:
  Merge in iMx6-0_80 to keep SMP branch up to date
  Files changed: hdr/StaticWS, hdr/iMx6qboard, s/Audio, s/EtherDrv, s/GPIO, s/I2C, s/RTC, s/iMx6qboard
Admin:
  Untested


Version 0.80, 1.4.2.1. Tagged as 'iMx6-0_80-1_4_2_1'
@
text
@d23 1
a23 2
        GET     hdr:iMx6q
        GET     Hdr:iMx6qboard
d65 1
a65 2
        MOV     a2, #1                  ; 1 transfer
        ADD     a2, a2, #RTC_I2CNum
d69 1
a69 1

d84 1
a84 2
        MOV     a2, #2                  ; 2 transfers
        ADD     a2, a2, #RTC_I2CNum
d100 1
a100 2
        MOV     a2, #1                  ; 1 transfer
        ADD     a2, a2, #RTC_I2CNum
d109 1
a109 1

d147 1
a147 1

d165 1
a165 1

d184 1
a184 2
        MOV     a2, #2                  ; 2 transfers
        ADD     a2, a2, #RTC_I2CNum
d214 1
a214 1

d248 1
a248 2
        MOV     a2, #1                  ; 1 transfer
        ADD     a2, a2, #RTC_I2CNum
@


1.1.1.1.2.2
log
@  Patch in recent HAL modifications
Detail:
  Bring up to date with HEAD version 0.96
Admin:
  Tested in iMx6

Version 0.90, 1.4.2.11. Tagged as 'iMx6-0_90-1_4_2_11'
@
text
@d57 2
a58 1
        SUB     sp, sp, #12+12+8
d67 1
a67 1
        ADD     a2, a2, #RTC_I2CNum<<24
a74 3
 [ CuBox
        MOV     a4, #3                  ; data block size
 |
a75 1
 ]
d80 1
a80 1
        ADD     a3, sp, #12+12+4        ; -> data block for write
d87 1
a87 1
        ADD     a2, a2, #RTC_I2CNum<<24
d90 1
a90 5
        LDR     a4, [sp, #12+12+0]      ; remember hi byte is reg start address
 [ CuBox
        TST     a4, #1:SHL:5            ; is the clock halted?
        TSTEQ   a4, #1:SHL:23           ; or possibly in powerdown
 |
a91 1
 ]
a97 5
 [ CuBox
        BIC     a4, a4, #1:SHL:5
        BIC     a4, a4, #1:SHL:23       ; hi order bit of PM bits
        BIC     a4, a4, #&ff:SHL:24
 |
a98 1
 ]
a99 3
 [ CuBox
        MOV     a4, #4                  ; data block size .. include PM bits
 |
a100 1
 ]
d104 1
a104 1
        ADD     a2, a2, #RTC_I2CNum<<24
d118 1
a118 1
        ADD     sp, sp, #12+12+8
a123 3
 [ CuBox
        DCW     HALDeviceID_RTC_PCF8523
 |
a124 1
 ]
a152 3
 [ CuBox
        DCB     "PCF8523 real-time clock", 0
 |
a153 1
 ]
d183 2
a184 6
 [ CuBox
        MOV     a4, #3                  ; start from register 3
 |
        MOV     a4, #0                  ; start from register 0
 ]
        STRB    a4, [a3]                
d189 1
a189 1
        ADD     a2, a2, #RTC_I2CNum<<24
a198 6
    [ CuBox
        LDRB    a3, [sp, #12+12+3]      ; swap d-o-w and d-o-m order
        LDRB    a1, [sp, #12+12+4]
        STRB    a3, [sp, #12+12+4]
        STRB    a1, [sp, #12+12+3]
    ]
a228 4
 [ CuBox
        MOVNE   a4, #3                  ; start from time register
        MOVEQ   a4, #6                  ; start from d-o-w register
 |
d230 1
a230 2
        MOVEQ   a4, #4                  ; start from d-o-w register
 ]
a244 13
    [ CuBox
        TEQ     a4, #3
        LDREQB  a3, [ip, #-4]          ; swap weekday and date order
        LDREQB  a1, [ip, #-3]          ; full string
        STREQB  a1, [ip, #-4]
        STREQB  a3, [ip, #-3]

        ADDNE   ip, ip, #1
        LDRNEB  a3, [ip, #-2]           ; reposition for chip order
        STRNEB  a3, [ip, #-1]     
        LDRNEB  a3, [ip, #-3]     
        STRNEB  a3, [ip, #-2]     
    ]
d254 1
a254 1
        ADD     a2, a2, #RTC_I2CNum<<24
@


