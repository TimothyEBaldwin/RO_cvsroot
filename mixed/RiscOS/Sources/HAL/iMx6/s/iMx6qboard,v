head	1.4;
access;
symbols
	iMx6-1_01:1.4
	iMx6-1_00:1.4
	iMx6-0_99:1.4
	iMx6-0_98:1.4
	iMx6-0_97:1.4
	iMx6-0_96-1_4_2_12:1.1.1.1.2.4
	iMx6-0_96:1.4
	iMx6-0_90-1_4_2_11:1.1.1.1.2.3
	iMx6-0_95:1.4
	iMx6-0_94:1.4
	iMx6-0_93:1.4
	iMx6-0_92:1.4
	iMx6-0_91:1.4
	iMx6-0_90-1_4_2_10:1.1.1.1.2.2
	iMx6-0_90:1.3
	iMx6-0_87-1_4_2_9:1.1.1.1.2.2
	iMx6-0_89:1.3
	iMx6-0_87-1_4_2_8:1.1.1.1.2.2
	iMx6-0_88:1.3
	iMx6-0_87-1_4_2_7:1.1.1.1.2.2
	iMx6-0_87:1.3
	iMx6-0_82-1_4_2_6:1.1.1.1.2.2
	iMx6-0_86:1.3
	iMx6-0_82-1_4_2_5:1.1.1.1.2.2
	iMx6-0_85:1.3
	iMx6-0_82-1_4_2_4:1.1.1.1.2.2
	iMx6-0_84:1.3
	iMx6-0_83:1.3
	iMx6-0_82-1_4_2_3:1.1.1.1.2.2
	iMx6-0_82:1.3
	iMx6-0_81:1.2
	iMx6-0_80-1_4_2_2:1.1.1.1.2.1
	iMx6-0_80-1_4_2_1:1.1.1.1.2.1
	iMx6-0_80:1.2
	iMx6-0_79:1.1.1.1
	SMP:1.1.1.1.0.2
	SMP_bp:1.1.1.1
	iMx6-0_78:1.1.1.1
	iMx6-0_77:1.1.1.1
	iMx6-0_76:1.1.1.1
	iMx6-0_75:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2018.05.13.22.24.00;	author jballance;	state Exp;
branches;
next	1.3;
commitid	nRyVYjPRWnosEbCA;

1.3
date	2017.08.04.17.14.41;	author jballance;	state Exp;
branches;
next	1.2;
commitid	kUu5oRdZtEsk0V1A;

1.2
date	2017.07.26.07.36.53;	author jballance;	state Exp;
branches;
next	1.1;
commitid	CyZP0iPCrYQ36I0A;

1.1
date	2017.01.20.01.46.52;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	SZe1LdhMuDPoaECz;

1.1.1.1
date	2017.01.20.01.46.52;	author jballance;	state Exp;
branches
	1.1.1.1.2.1;
next	;
commitid	SZe1LdhMuDPoaECz;

1.1.1.1.2.1
date	2017.07.29.12.02.16;	author jlee;	state Exp;
branches;
next	1.1.1.1.2.2;
commitid	dFmrZN3Yw5D7t71A;

1.1.1.1.2.2
date	2017.08.08.18.30.46;	author jlee;	state Exp;
branches;
next	1.1.1.1.2.3;
commitid	60vgLLklxfzsir2A;

1.1.1.1.2.3
date	2018.06.29.10.00.27;	author jballance;	state Exp;
branches;
next	1.1.1.1.2.4;
commitid	nkjno4wPSfzG1aIA;

1.1.1.1.2.4
date	2018.07.07.16.18.11;	author jlee;	state Exp;
branches;
next	;
commitid	UfrPnz2V1LPlRdJA;


desc
@@


1.4
log
@  Initial awareness of additional board variant
Detail:
Admin:


Version 0.91. Tagged as 'iMx6-0_91'
@
text
@; Copyright 2017 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Set up logical addresses of all interesting board hardware


        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors

        GET     hdr:iMx6q
        GET     HDR:Timers
        GET     hdr.StaticWS
        AREA    |Asm$$Code|, CODE, READONLY, PIC
 [ Debug
        IMPORT  DebugHALPrint
        IMPORT  DebugHALPrintReg
        IMPORT  DebugHALPrintByte
 ]
        EXPORT  HWLogicalInit

        IMPORT  ENET_CheckForPhy

        ALIGN
; CPUIOBase, PCIeBase,  and MainIOBase are already initialised
; v1-> logical address of hal pre-mmu work space
HWLogicalInit
        Push    "lr"
; first anything related to CPUIOBase
        LDR     a1, CPUIOBase              ; new logical address
                                           ; 0x0 -> 0x00cfffff
        sub     a1, a1, #CPU_IOBase        ; convert to offset

 [ A9Timers
        ; Timers in CPU Space
        LDR     a2, = Timer3_Base
        ADD     a2, a1, a2
        STR     a2, Timers_Log +12         ; new logical address
        LDR     a2, = Timer4_Base
        ADD     a2, a1, a2
        STR     a2, Timers_Log +16         ; new logical address
 ]

        LDR     a2, = SCU_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, SCU_Log             ; System Control Unit base address

        LDR     a2, = IC_DISTRIBUTOR_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, IRQDi_Log             ; Interrupt Distributor base address

        LDR     a2, = IC_INTERFACES_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, IRQC_Log             ; Interrupt controller base address

        LDR     a2, = HDMI_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, HDMI_Log             ; HDMI base address

; Then anything to do with PCIeBase
        LDR     a1, PCIeBase              ; new logical address
                                          ; 0x01000000->0x01ffffff
        sub     a1, a1, #PCIe_Base        ; convert to offset


; then stuff to do with MainIOBase
        LDR     a1, MainIOBase            ; new logical address
                                          ; 0x02000000->0x02bfffff
        sub     a1, a1, #Main_IOBase      ; convert to offset
; UART and Debug Uart   (which may well be the same)
        mov     a3, #UART_Count
        add     a4, v1, #:INDEX:UART_Base
        adrl    lr, UART_Base
11
        LDR     a2, [a4], #4
        ADD     a2, a1, a2                ; adjust for new logical address
        STR     a2, [lr], #4              ; updated
        subs    a3, a3, #1
        bgt     %bt11
        LDR     a2, [v1,#:INDEX:DebugUART]
        ADD     a2, a1, a2                ; adjust for new logical address
        STR     a2, DebugUART             ; updated
        ADRL    a4, UART_IRQ
        mov     a2, #UART1_IRQ
        str     a2, [a4], #4
        mov     a2, #UART2_IRQ
        str     a2, [a4], #4
        mov     a2, #UART3_IRQ
        str     a2, [a4], #4
        mov     a2, #UART4_IRQ
        str     a2, [a4], #4
        mov     a2, #UART5_IRQ
        str     a2, [a4], #4
; config fuses
        ldr     a2, = OCOTP_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, OCOTP_Log             ; new logical address
; DebugReg a2, "OCOTP_Log: "


; CCM
        ldr     a3, [v1,#:INDEX:CCM_Base]
        ADD     a3, a1, a3
        str     a3, CCM_Base                ; updated
; IOMUX
        ldr     a4, [v1,#:INDEX:IOMUXC_Base]
        ADD     a4, a1, a4
        str     a4, IOMUXC_Base             ; updated

; Timers in MainIO space
        LDR     a2, = Timer0_Base
        ADD     a2, a1, a2
        STR     a2, Timers_Log             ; new logical address
        LDR     a2, = Timer1_Base
        ADD     a2, a1, a2
        STR     a2, Timers_Log +4          ; new logical address
        LDR     a2, = Timer2_Base
        ADD     a2, a1, a2
        STR     a2, Timers_Log +8          ; new logical address


; SRC controller
        LDR     a2, = SRC_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, SRC_Log             ; new logical address

        LDR     a2, = IPU1_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, IPU1_Log             ; new logical address
; DebugReg a2, "IPU1_Log: "

        LDR     a2, = IPU2_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, IPU2_Log             ; new logical address
; DebugReg a2, "IPU2_Log: "

        LDR     a2, = CCM_ANALOG_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, CCMAn_Log             ; new logical address

        LDR     a2, = GPC_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, GPC_Log             ; new logical address

        LDR     a2, = ENET_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, ENET_Log             ; new logical address

        LDR     a2, = GPIO1_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, GPIO_Log             ; new logical address


        LDR     a2, = SATA_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, SATA_Log             ; new logical address

        LDR     a2, = USBOH3_USB_IPS_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, USB_Log             ; new logical address

        LDR     a2, = IP2APB_USBPHY1_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, USBPHY_Log             ; new logical address

        LDR     a2, = WDOG1_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, WDOG1_Log              ; new logical address

        LDR     a2, = WDOG2_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, WDOG2_Log              ; new logical address

        LDR     a2, = USDHC1_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, SDIO_Log              ; new logical address

        LDR     a2, = SDMA_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, SDMA_Log              ; new logical address

        LDR     a2, = ECSPI1_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, SPI_Log               ; new logical address

        LDR     a2, = AUDMUX_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, AudMux_Log

        LDR     a2, = SSI1_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, SSI_Log

        LDR     a2, = SSI2_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, SSI_Log + 4

        LDR     a2, = SSI3_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, SSI_Log + 8

; this check uses GPIO and CCM so they must already be set up above
; sb should be correct at this point (!!)
        BL      ENET_CheckForPhy         ; lets see if we can check board type

; I2C busses ; swap bus order here to put I2C clk and ram on riscos bus 0 for
; earlier RevB and C wandboards
; CuBox maps I2C2 to bus 0 and I2C3 to bus 1. Only reports 2 busses
 [ CuBox
        ADRL    a4, I2C_Table + I2C_XHW - I2CBlockBase     ; I2C_XHW
        LDR     a2, = I2C2_BASE_ADDR
        MOV     a3, #1                   ; first bus (in BI2CRTable)
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW] ; for error recovery later
        ADD     a2, a1, a2
        MOV     a3, #0                   ; first logical bus
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; interface number
        STR     a2, [a4], #I2CBlockSize  ; new logical address
        LDR     a2, = I2C3_BASE_ADDR
        MOV     a3, #2                   ; 2nd bus
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW]
        ADD     a2, a1, a2
        MOV     a3, #1                   ; second logical bus
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; bus number
        STR     a2, [a4]                 ; new logical address
        ADRL    a4, I2C_Table + I2C_XIRQ-I2CBlockBase
        MOV     a2, #I2C2_IRQ
        STR     a2, [a4], #I2CBlockSize ; IRQ number
        MOV     a2, #I2C3_IRQ
        STR     a2, [a4]                 ;
 |
        LDR     a4, BoardDetectInfo
        TST     a4, #1
        ADRL    a4, I2C_Table + I2C_XHW - I2CBlockBase     ; I2C_XHW
        LDRNE   a2, = I2C1_BASE_ADDR
        MOVNE   a3, #1
        LDREQ   a2, = I2C2_BASE_ADDR
        MOVEQ   a3, #2
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW] ; for error recovery later
        ADD     a2, a1, a2
        MOV     a3, #1                   ; first bus RevBC uses I2C2
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; interface number
        STR     a2, [a4], #I2CBlockSize  ; new logical address
        LDRNE   a2, = I2C2_BASE_ADDR
        MOVNE   a3, #2                   ; remember actual physical channel used
        LDREQ   a2, = I2C1_BASE_ADDR
        MOVEQ   a3, #1
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW]
        ADD     a2, a1, a2
        MOV     a3, #0                   ; second bus RevBC uses I2C1
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; bus number
        STR     a2, [a4], #I2CBlockSize  ; new logical address
        LDR     a2, = I2C3_BASE_ADDR
        MOV     a3, #3
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW]
        ADD     a2, a1, a2
        MOV     a3, #2                   ; Third bus uses I2C3
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; bus number
        STR     a2, [a4]                 ; new logical address
        ADRL    a4, I2C_Table + I2C_XIRQ-I2CBlockBase
        MOVNE   a2, #I2C1_IRQ
        MOVEQ   a2, #I2C2_IRQ
        STR     a2, [a4], #I2CBlockSize ; IRQ number
        MOVNE   a2, #I2C2_IRQ
        MOVEQ   a2, #I2C1_IRQ
        STR     a2, [a4], #I2CBlockSize ;
        MOV     a2, #I2C3_IRQ
        STR     a2, [a4]                 ;
 ]


        Pull    "pc"






        END
@


1.3
log
@  Resolve I2C error recovery abort
Detail:
  The code for unlocking stuck I2C transaction failed to get the base
  address of the I2C GPIO port. This had caused an AODT if the I2C transaction
  failed. Issue corrected
Admin:


Version 0.82. Tagged as 'iMx6-0_82'
@
text
@d88 1
a88 1
        sub     a1, a1, #Main_IOBase        ; convert to offset
d95 2
a96 2
        ADD     a2, a1, a2                  ; adjust for new logical address
        STR     a2, [lr], #4               ; updated
d100 2
a101 2
        ADD     a2, a1, a2                  ; adjust for new logical address
        STR     a2, DebugUART               ; updated
d226 24
a249 1
; earlier RevB and C boards
d287 1
@


1.2
log
@   Resolve I2C differences between RevB and C boards and RevD
Detail:
   RevD boards have put the HDMI EDID I2C lines on I2C2 instead of
   I2C1. This conflicts with the CMOS RAM. A routine has been created
   to detect the RevD board (by the presence of a power swithch on the
   Ethernet Phy), so the HAL can set up appropriately.
Admin:
   Tested on Rev B and Rev D iMx6 boards


Version 0.80. Tagged as 'iMx6-0_80'
@
text
@d231 1
d233 2
d240 1
d242 2
d249 2
@


1.1
log
@Initial revision
@
text
@d41 2
d140 1
a140 24
; I2C busses ; swap bus order here to put I2C clk and ram on riscos bus 0
        ADRL    a4, I2C_Table + I2C_XHW - I2CBlockBase     ; I2C_XHW
        LDR     a2, = I2C2_BaseAddr
        ADD     a2, a1, a2
        MOV     a3, #1                   ; first bus uses I2C2
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; interface number
        STR     a2, [a4], #I2CBlockSize  ; new logical address
        LDR     a2, = I2C1_BaseAddr
        ADD     a2, a1, a2
        MOV     a3, #0                   ; second bus uses I2C1
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; bus number
        STR     a2, [a4], #I2CBlockSize  ; new logical address
        LDR     a2, = I2C3_BaseAddr
        ADD     a2, a1, a2
        MOV     a3, #2                   ; Third bus uses I2C3
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; bus number
        STR     a2, [a4]                 ; new logical address
        ADRL    a4, I2C_Table + I2C_XIRQ-I2CBlockBase
        MOV     a2, #I2C2_IRQ
        STR     a2, [a4], #I2CBlockSize ; IRQ number
        MOV     a2, #I2C1_IRQ
        STR     a2, [a4], #I2CBlockSize ;
        MOV     a2, #I2C3_IRQ
        STR     a2, [a4]                 ;
d168 5
a184 4
        LDR     a2, = GPIO1_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, GPIO_Log              ; new logical address

d220 38
@


1.1.1.1
log
@Initial import of iMx6 HAL
@
text
@@


1.1.1.1.2.1
log
@Merge in HEAD
Detail:
  Merge in iMx6-0_80 to keep SMP branch up to date
  Files changed: hdr/StaticWS, hdr/iMx6qboard, s/Audio, s/EtherDrv, s/GPIO, s/I2C, s/RTC, s/iMx6qboard
Admin:
  Untested


Version 0.80, 1.4.2.1. Tagged as 'iMx6-0_80-1_4_2_1'
@
text
@a40 2
        IMPORT  ENET_CheckForPhy

d138 24
a161 1

a188 5
        LDR     a2, = GPIO1_BASE_ADDR
        ADD     a2, a1, a2
        STR     a2, GPIO_Log             ; new logical address


d201 4
a239 38

; this check uses GPIO and CCM so they must already be set up above
; sb should be correct at this point (!!)
        BL      ENET_CheckForPhy         ; lets see if we can check board type

; I2C busses ; swap bus order here to put I2C clk and ram on riscos bus 0 for
; earlier RevB and C boards
        LDR     a4, BoardDetectInfo
        TST     a4, #1
        ADRL    a4, I2C_Table + I2C_XHW - I2CBlockBase     ; I2C_XHW
        LDRNE   a2, = I2C1_BASE_ADDR
        LDREQ   a2, = I2C2_BASE_ADDR
        ADD     a2, a1, a2
        MOV     a3, #1                   ; first bus RevBC uses I2C2
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; interface number
        STR     a2, [a4], #I2CBlockSize  ; new logical address
        LDRNE   a2, = I2C2_BASE_ADDR
        LDREQ   a2, = I2C1_BASE_ADDR
        ADD     a2, a1, a2
        MOV     a3, #0                   ; second bus RevBC uses I2C1
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; bus number
        STR     a2, [a4], #I2CBlockSize  ; new logical address
        LDR     a2, = I2C3_BASE_ADDR
        ADD     a2, a1, a2
        MOV     a3, #2                   ; Third bus uses I2C3
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; bus number
        STR     a2, [a4]                 ; new logical address
        ADRL    a4, I2C_Table + I2C_XIRQ-I2CBlockBase
        MOVNE   a2, #I2C1_IRQ
        MOVEQ   a2, #I2C2_IRQ
        STR     a2, [a4], #I2CBlockSize ; IRQ number
        MOVNE   a2, #I2C2_IRQ
        MOVEQ   a2, #I2C1_IRQ
        STR     a2, [a4], #I2CBlockSize ;
        MOV     a2, #I2C3_IRQ
        STR     a2, [a4]                 ;


@


1.1.1.1.2.2
log
@Merge in changes since iMx6-0_80

Version 0.82, 1.4.2.3. Tagged as 'iMx6-0_82-1_4_2_3'
@
text
@a230 1
        MOVNE   a3, #1
a231 2
        MOVEQ   a3, #2
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW] ; for error recovery later
a236 1
        MOVNE   a3, #2                   ; remember actual physical channel used
a237 2
        MOVEQ   a3, #1
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW]
a242 2
        MOV     a3, #3
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW]
@


1.1.1.1.2.3
log
@  Patch in recent HAL modifications
Detail:
  Bring up to date with HEAD version 0.96
Admin:
  Tested in iMx6

Version 0.90, 1.4.2.11. Tagged as 'iMx6-0_90-1_4_2_11'
@
text
@d226 1
a226 24
; earlier RevB and C wandboards
; CuBox maps I2C2 to bus 0 and I2C3 to bus 1. Only reports 2 busses
 [ CuBox
        ADRL    a4, I2C_Table + I2C_XHW - I2CBlockBase     ; I2C_XHW
        LDR     a2, = I2C2_BASE_ADDR
        MOV     a3, #1                   ; first bus (in BI2CRTable)
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW] ; for error recovery later
        ADD     a2, a1, a2
        MOV     a3, #0                   ; first logical bus
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; interface number
        STR     a2, [a4], #I2CBlockSize  ; new logical address
        LDR     a2, = I2C3_BASE_ADDR
        MOV     a3, #2                   ; 2nd bus
        STR     a3, [a4, #I2C_XACTIONum-I2C_XHW]
        ADD     a2, a1, a2
        MOV     a3, #1                   ; second logical bus
        STR     a3, [a4, #I2C_XIONum-I2C_XHW] ; bus number
        STR     a2, [a4]                 ; new logical address
        ADRL    a4, I2C_Table + I2C_XIRQ-I2CBlockBase
        MOV     a2, #I2C2_IRQ
        STR     a2, [a4], #I2CBlockSize ; IRQ number
        MOV     a2, #I2C3_IRQ
        STR     a2, [a4]                 ;
 |
a263 1
 ]
@


1.1.1.1.2.4
log
@Merge in latest changes from HEAD

Version 0.96, 1.4.2.12. Tagged as 'iMx6-0_96-1_4_2_12'
@
text
@d88 1
a88 1
        sub     a1, a1, #Main_IOBase      ; convert to offset
d95 2
a96 2
        ADD     a2, a1, a2                ; adjust for new logical address
        STR     a2, [lr], #4              ; updated
d100 2
a101 2
        ADD     a2, a1, a2                ; adjust for new logical address
        STR     a2, DebugUART             ; updated
@


