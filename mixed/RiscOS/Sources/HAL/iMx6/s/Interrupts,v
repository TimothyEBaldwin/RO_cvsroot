head	1.2;
access;
symbols
	iMx6-1_01:1.2
	iMx6-1_00:1.2
	iMx6-0_99:1.2
	iMx6-0_98:1.2
	iMx6-0_97:1.2
	iMx6-0_96-1_4_2_12:1.1.1.1.2.1
	iMx6-0_96:1.1.1.1
	iMx6-0_90-1_4_2_11:1.1.1.1.2.1
	iMx6-0_95:1.1.1.1
	iMx6-0_94:1.1.1.1
	iMx6-0_93:1.1.1.1
	iMx6-0_92:1.1.1.1
	iMx6-0_91:1.1.1.1
	iMx6-0_90-1_4_2_10:1.1.1.1.2.1
	iMx6-0_90:1.1.1.1
	iMx6-0_87-1_4_2_9:1.1.1.1.2.1
	iMx6-0_89:1.1.1.1
	iMx6-0_87-1_4_2_8:1.1.1.1.2.1
	iMx6-0_88:1.1.1.1
	iMx6-0_87-1_4_2_7:1.1.1.1.2.1
	iMx6-0_87:1.1.1.1
	iMx6-0_82-1_4_2_6:1.1.1.1.2.1
	iMx6-0_86:1.1.1.1
	iMx6-0_82-1_4_2_5:1.1.1.1.2.1
	iMx6-0_85:1.1.1.1
	iMx6-0_82-1_4_2_4:1.1.1.1.2.1
	iMx6-0_84:1.1.1.1
	iMx6-0_83:1.1.1.1
	iMx6-0_82-1_4_2_3:1.1.1.1.2.1
	iMx6-0_82:1.1.1.1
	iMx6-0_81:1.1.1.1
	iMx6-0_80-1_4_2_2:1.1.1.1.2.1
	iMx6-0_80-1_4_2_1:1.1.1.1
	iMx6-0_80:1.1.1.1
	iMx6-0_79:1.1.1.1
	SMP:1.1.1.1.0.2
	SMP_bp:1.1.1.1
	iMx6-0_78:1.1.1.1
	iMx6-0_77:1.1.1.1
	iMx6-0_76:1.1.1.1
	iMx6-0_75:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2018.07.07.16.28.56;	author jlee;	state Exp;
branches;
next	1.1;
commitid	b8EPc9OxtyZ1VdJA;

1.1
date	2017.01.20.01.46.52;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	SZe1LdhMuDPoaECz;

1.1.1.1
date	2017.01.20.01.46.52;	author jballance;	state Exp;
branches
	1.1.1.1.2.1;
next	;
commitid	SZe1LdhMuDPoaECz;

1.1.1.1.2.1
date	2017.07.29.12.11.20;	author jlee;	state Exp;
branches;
next	;
commitid	hRleSHqgdP6dw71A;


desc
@@


1.2
log
@Merge SMP branch to trunk
Detail:
  Makefile, s/DBell - Add doorbell HAL device implementation, using GIC SGIs
  h/irq_numbers, hdr/iMx6IRQs - Increase IMX_INTERRUPT_COUNT. Core 0 private interrupts are 0-31, core 1 160-191, core 2 192-223, core 3 224-255. Shared interrupts are 32-159.
  hdr/StaticWS - Reserve space for doorbell device & storing last SGI for each core
  hdr/iMx6q - Tidy things up a bit by removing the DebugInterrupts code
  s/Boot - Implement SMP HAL entry points
  s/Interrupts - Tidy up interrupt handling and implement new HAL IRQ calls
  s/Top - Enable cache/TLB maintenance op broadcast, and add some silicion errata workarounds
Admin:
  Untested
  Requires Kernel-6_09


Version 0.97. Tagged as 'iMx6-0_97'
@
text
@; Copyright 2017 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.iMx6q
        GET     hdr.StaticWS
        GET     hdr.Timers
        GET     hdr.CoPro15ops

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  Interrupt_Init
        EXPORT  HAL_IRQEnable
        EXPORT  HAL_IRQDisable
        EXPORT  HAL_IRQClear
        EXPORT  HAL_IRQSource
        EXPORT  HAL_IRQStatus
        EXPORT  HAL_FIQEnable
        EXPORT  HAL_FIQDisable
        EXPORT  HAL_FIQDisableAll
        EXPORT  HAL_FIQClear
        EXPORT  HAL_FIQSource
        EXPORT  HAL_FIQStatus
        EXPORT  HAL_IRQMax
        EXPORT  HAL_IRQProperties
        EXPORT  HAL_IRQSetCores
        EXPORT  HAL_IRQGetCores

Interrupt_Init
; mov a4,lr
; DebugReg a1,"HIRQ init "
; mov lr,a4
        ; 1. disable Distributor Controller
        LDR     a1, IRQDi_Log
        MOV     a2, #0          ; disable ICDDCR
        STR     a2, [a1, #(ICDDCR - IC_DISTRIBUTOR_BASE_ADDR)]

        ; 2. set all global interrupts to be level triggered, active low
        ADD     a3, a1, #ICDICFR -IC_DISTRIBUTOR_BASE_ADDR
        ADD     a3, a3, #8
        MOV     a4, #GIC_INTERRUPT_COUNT
        MOV     ip, #32
10
        STR     a2, [a3], #4
        ADD     ip, ip, #16
        CMP     ip, a4
        BNE     %BT10

        ; 3. set all global interrupts to this CPU only
        ADD     a3, a1, #(ICDIPTR + 32  -IC_DISTRIBUTOR_BASE_ADDR)
        MOV     ip, #32
        MOV     a2, #1
        ORR     a2, a2, a2, LSL #8
        ORR     a2, a2, a2, LSL #16
20
        STR     a2, [a3], #4
        ADD     ip, ip, #4
        CMP     ip, a4
        BNE     %BT20

        ; 4. set priority on all interrupts
        ADD     a3, a1, #(ICDIPR + 32 -IC_DISTRIBUTOR_BASE_ADDR)
        MOV     ip, #32
        MOV     a2, #&A0
        ORR     a2, a2, a2, LSL #8
        ORR     a2, a2, a2, LSL #16
30
        STR     a2, [a3], #4
        ADD     ip, ip, #4
        CMP     ip, a4
        BNE     %BT30

        ; 5. disable all interrupts
        ADD     a3, a1, #ICDICER  -IC_DISTRIBUTOR_BASE_ADDR
        MOV     ip, #32
        MOV     a2, #-1
40
        STR     a2, [a3], #4
        ADD     ip, ip, #32
        CMP     ip, a4
        BNE     %BT40

        ; 6. enable Distributor Controller
        MOV     a2, #ICDDCR_ENABLE
        STR     a2, [a1, #(ICDDCR-IC_DISTRIBUTOR_BASE_ADDR)]

        ; 7. set PRIMASK in CPU interface
        LDR     a1, IRQC_Log
        MOV     a2, #&F0
        STR     a2, [a1, #(ICCPMR-IC_INTERFACES_BASE_ADDR)]

        ; 8. enable CPU interface
        MOV     a2, #ICCICR_ENABLE
        STR     a2, [a1, #(ICCICR - IC_INTERFACES_BASE_ADDR)]
        ; ... and everything else looks good?
        MOV     pc, lr

HAL_IRQEnable
        CMP     a1, #IMX_INTERRUPT_COUNT
        MOVHS   a1, #0
        MOVHS   pc, lr
        ; Unmask the interrupt
        CMP     a1, #GIC_INTERRUPT_COUNT
        LDR     a3, IRQDi_Log
        ANDHS   a1, a1, #31     ; map to GIC interrupt number
        ADD     ip, a3, #(ICDISER - IC_DISTRIBUTOR_BASE_ADDR)
        AND     a2, a1, #31     ; bit   = intno % 32
        MOV     a1, a1, LSR #5  ; index = intno / 32
        ADD     ip, ip, a1, LSL #2
        MOV     a1, #1
        MOV     a2, a1, LSL a2  ; mask = (1 << bit)
        LDR     a1, [ip, #0]    ; get old state
        STR     a2, [ip, #0]    ; set new state
        AND     a1, a1, a2      ; Test if it was enabled or not
        MOV     pc, lr

HAL_IRQDisable
        CMP     a1, #IMX_INTERRUPT_COUNT
        MOVHS   a1, #0
        MOVHS   pc, lr
        CMP     a1, #GIC_INTERRUPT_COUNT
        LDR     a3, IRQDi_Log
        ANDHS   a1, a1, #31     ; map to GIC interrupt number
        ADD     ip, a3, #(ICDICER - IC_DISTRIBUTOR_BASE_ADDR)
        AND     a2, a1, #31     ; bit   = intno % 32
        MOV     a4, a1, LSR #5  ; index = intno / 32
        ADD     ip, ip, a4, LSL #2
        MOV     a4, #1
        MOV     a2, a4, LSL a2  ; mask = (1 << bit)
        LDR     a4, [ip, #0]    ; get old state
        STR     a2, [ip, #0]    ; mask the interrupt
        ; Was it active?
        LDR     ip, [ip, #(ICDABR - ICDICER)]
        TST     ip, a2
        BEQ     %FT90
        CMP     a1, #16 ; check to see if SGI
        BHS     %FT80
        ; Look up the last SGI that was received for this core, it should correspond to the one we need to clear
        MRC     p15, 0, ip, c0, c0, 5
        ADR     a1, LastSGI
        AND     ip, ip, #3
        LDR     a1, [a1, ip, LSL #2]
80
        STR     a1, [a3, #(ICCEOIR - IC_DISTRIBUTOR_BASE_ADDR)]
90
        AND     a1, a4, a2      ; Test if it was enabled or not
        DSB     SY
        MOV     pc, lr

HAL_IRQClear
        ; This routine is used to clear the vsync interrupt
        ; It must also restart the INTC priority sorting, as it is called after every
        ; OS IRQ handler silences the interrupting device
              ;;;;;;;;;;  CODE NEEDS DONE
 [ VideoInHAL
        CMP     a1, #VIDEO_IRQ
        BEQ     %FT20
 ]
10
        CMP     a1, #GIC_INTERRUPT_COUNT
        ANDHS   a1, a1, #31     ; map to GIC interrupt number
        CMP     a1, #16 ; check for SGI
        LDR     a2, IRQC_Log
        BHS     %FT15
        ; Look up the last SGI that was received for this core, it should correspond to the one we need to clear
        MRC     p15, 0, ip, c0, c0, 5
        ADR     a1, LastSGI
        AND     ip, ip, #3
        LDR     a1, [a1, ip, LSL #2]
15
        ; signal End Of Interrupt
        STR     a1, [a2, #(ICCEOIR -IC_INTERFACES_BASE_ADDR)]
        ; Data synchronisation barrier to make sure INTC gets the message
        myDSB
        MOV     pc, lr

 [ VideoInHAL
20
        LDR     a2, IPU1_Log
        ADD     a2, a2, #IPU_REGISTERS_OFFSET
        MVN     a3, #0
        STR     a3, [a2, #IPU_IPU_INT_STAT_15_OFFSET-IPU_REGISTERS_OFFSET]
        B       %BT10
 ]

HAL_IRQSource
        LDR     a2, IRQC_Log
        LDR     a3, [a2, #(ICCIAR - IC_INTERFACES_BASE_ADDR)]
        BIC     a1, a3, #ICCIAR_CPUID
        CMP     a1, #GIC_INTERRUPT_COUNT
        MOVHS   a1, #-1            ; Spurious interrupt, ignore it
        CMPLO   a1, #32
        MOVHS   pc, lr
        ; Private interrupt, remap it
        MRC     p15, 0, a4, c0, c0, 5
        ANDS    a4, a4, #3
        ADDNE   a1, a1, #GIC_INTERRUPT_COUNT-32
        ADDNE   a1, a1, a4, LSL #5
        ; If it's an SGI, make a note of the ICCIAR value so we can clear the IRQ correctly in HAL_IRQClear
        TST     a3, #16
        ADREQ   a2, LastSGI
        STREQ   a3, [a2, a4, LSL #2]
        MOV     pc, lr

HAL_IRQStatus
        ; Test if IRQ is firing, irrespective of mask state
        CMP     a1, #IMX_INTERRUPT_COUNT
        MOVHS   a1, #0
        MOVHS   pc, lr
        CMP     a1, #GIC_INTERRUPT_COUNT
        LDR     a2, IRQDi_Log
        ANDHS   a1, a1, #31     ; map to GIC interrupt number
        ADD     ip, a2, #(ICDABR -IC_DISTRIBUTOR_BASE_ADDR)
        MOV     a3, a1, LSR #5  ; index = intno / 32
        ADD     ip, ip, a3, LSL #2
        LDR     a3, [ip, #0]    ; get old state
        AND     a1, a1, #31     ; bit   = intno % 32
        MOV     a1, a3, LSR a1  ; Shift and invert so 1=active
        AND     a1, a1, #1      ; 0 = not firing, 1 = firing
; mov a4,lr
; DebugReg a1,"HIRQ status no:"
; mov lr,a4
        MOV     pc, lr


HAL_IRQMax
        MOV     a1, #IMX_INTERRUPT_COUNT
        MOV     pc, lr

; In: a1 = device number
; Out: a1 = IRQ mask
;      a2 = FIQ mask
;           bits 0-29 of each register give cores that the interrupt can be
;           assigned to
;           bit 30 = private flag
;           bit 31 = interrupt can be routed to multiple cores at once
HAL_IRQProperties
        ; 0-31 for core 0
        ; 32-159 shared
        ; 160-191 for core 1
        ; 192-223 for core 2
        ; 224-255 for core 3
        CMP     a1, #IMX_INTERRUPT_COUNT
        MOV     a2, #0
        MOVHS   pc, lr
        CMP     a1, #32
        MOVLO   a1, #1 + HALIRQProperty_Private
        MOVLO   pc, lr
        SUBS    a1, a1, #GIC_INTERRUPT_COUNT
        MOVLT   a1, #&f + HALIRQProperty_Multicore
        MOVLT   pc, lr
        ; Core 1/2/3 private
        MOV     a1, a1, LSR #5 ; Core number, minus one
        MOV     a3, #2
        MOV     a1, a3, LSL a1
        ORR     a1, a1, #HALIRQProperty_Private
        MOV     pc, lr

; In: a1 = device number
;     a2 = desired core mask
; Out: a1 = actual core mask
HAL_IRQSetCores
        CMP     a1, #GIC_INTERRUPT_COUNT
        BHS     %FT10
        CMP     a1, #32
        BLO     %FT20
        LDR     a3, IRQDi_Log
        ADD     a3, a3, #ICDIPTR-IC_DISTRIBUTOR_BASE_ADDR
        ADD     a3, a3, a1
        AND     a1, a2, #&f
        STRB    a1, [a3] ; Update mapping
        MOV     pc, lr

HAL_IRQGetCores ; read-only version of IRQSetCores
        CMP     a1, #GIC_INTERRUPT_COUNT
        BHS     %FT10
        CMP     a1, #32
        BLO     %FT20
        LDR     a3, IRQDi_Log
        ADD     a3, a3, #ICDIPTR-IC_DISTRIBUTOR_BASE_ADDR
        LDRB    a1, [a3, a1] ; Get mapping
        MOV     pc, lr

10
        CMP     a1, #IMX_INTERRUPT_COUNT
        MOVHS   a1, #0
        MOVHS   pc, lr
        SUB     a1, a1, #GIC_INTERRUPT_COUNT
        MOV     a1, a1, LSR #5 ; Core number, minus one
        MOV     a3, #2
        MOV     a1, a3, LSL a1        
        MOV     pc, lr

20
        MOV     a1, #1
        MOV     pc, lr

;
; ToDo: do we have FIQs
;

HAL_FIQEnable
        MOV     a1, #0
        MOV     pc, lr

HAL_FIQDisable
        MOV     a1, #0
        MOV     pc, lr

HAL_FIQDisableAll
        MOV     pc, lr

HAL_FIQClear
        MOV     pc, lr

HAL_FIQStatus
        MOV     a1, #0
        MOV     pc, lr

HAL_FIQSource
        MOV     a1, #0
        MOV     pc, lr

        END
@


1.1
log
@Initial revision
@
text
@d23 1
d45 3
a47 12

 [ DebugInterrupts
        IMPORT  DebugHALPrint
        IMPORT  DebugHALPrintReg
        IMPORT  DebugHALPrintByte
 ]

; Debug flag to cause the DebugInterrupts noncleared IRQ detection code to disable the source
; of the noncleared interrupt. This can be useful in debugging issues that cause the
; nonclearance of the IRQ, e.g. if an IRQ handler aborts before it's able to call IRQClear.
                        GBLL    DebugDisablePrevious
DebugDisablePrevious    SETL    {FALSE}
d61 1
a61 1
        MOV     a4, #IMX_INTERRUPT_COUNT
a115 10
 [ DebugInterrupts
        MOV     a1, #-1
        STR     a1, LastInterrupt_IRQ
        STR     a1, LastInterrupt_FIQ
  [ ExtraDebugInterrupts
        MOV     a1, #0
        STR     a1, ExtraDebugIRQEnabled
        str     a2, tickertimer
  ]
 ]
a118 10
; teq   a1, #IMX_INT_UART1;Timer0_IRQ;IMX_INT_USBOH3_UH1   ; all but timer..
; teqne a1, #IMX_INT_UART2;IMX_INT_SDMA
; teqne a1, #IMX_INT_UART3;IMX_INT_IPU1_FUNC
;; teqne a1, #IMX_INT_I2C2
;; teqne a1, #IMX_INT_SATA
; bne %ft001
; mov a4,lr
; DebugReg a1,"HIRQ EN no:"
; mov lr,a4
;001
a121 4
        ; Disable interrupts while we update the controller
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
d123 1
d125 1
a133 6
; mov a4,lr
; DebugReg a1,"HIRQ old reg value:"
;  LDR     a1, [ip, #0]    ; get old state
; DebugReg a1,"HIRQ now reg value:"
; mov lr,a4
        MSR     CPSR_c, a4      ; Re-enable interrupts
a137 10
; teq   a1, #IMX_INT_UART1;Timer0_IRQ;IMX_INT_USBOH3_UH1   ; all but timer..
; teqne a1, #IMX_INT_UART2;IMX_INT_SDMA
; teqne a1, #IMX_INT_UART3;IMX_INT_IPU1_FUNC
;; teqne a1, #IMX_INT_I2C2
;; teqne a1, #IMX_INT_SATA
; bne %ft001
; mov a4,lr
; DebugReg a1,"HIRQ Dis no:"
; mov lr,a4
;001
d141 1
a141 7
        Push    "lr"
        ; Disable interrupts while we update the controller
        ; (not necessarily needed for disabling them?)
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ; Check if this is actually an IRQ
d143 1
a143 8
;       ASSERT  INTCPS_ILR_SIZE = 4
;       ADD     a2, a3, a1, LSL #2
;       LDR     a2, [a2, #INTCPS_ILR]
;       TST     a2, #1
;       MOVNE   a1, #0 ; This is an FIQ, so don't disable it
;       MSRNE   CPSR_c, a4
;       Pull    "pc", NE
        ; Now mask the interrupt
d146 5
a150 6
        MOV     lr, a1, LSR #5  ; index = intno / 32
        ADD     ip, ip, lr, LSL #2
        MOV     lr, #1
        MOV     a2, lr, LSL a2  ; mask = (1 << bit)
        SUB     lr, ip, #(ICDICER - ICDISER)
        LDR     lr, [lr, #0]    ; get old state (from ENABLE_SET reg)
a151 12
  [ {FALSE} ; reading ICCIAR has side effects on the interrupt system !?
        ; Check if we just disabled the active interrupt ( interfaces and distributor addresses in same logical space)
        LDR     ip, [a3, #(ICCIAR -IC_INTERFACES_BASE_ADDR -(IC_DISTRIBUTOR_BASE_ADDR - IC_INTERFACES_BASE_ADDR))]
        CMP     ip, a1
        STREQ   ip, [a3, #(ICCEOIR -IC_INTERFACES_BASE_ADDR -(IC_DISTRIBUTOR_BASE_ADDR - IC_INTERFACES_BASE_ADDR))]
    [ DebugInterrupts
        MOVEQ   ip, #-1
        STREQ   ip, LastInterrupt_IRQ
    ]
  |
        ; Clear any pending state of this source
        STR     a2, [ip, #(ICDICPR - ICDICER)]
d155 14
a168 12
        STRNE   a1, [a3, #(ICCEOIR - IC_DISTRIBUTOR_BASE_ADDR)]
    [ DebugInterrupts
        MOVNE   ip, #-1
        STRNE   ip, LastInterrupt_IRQ
    ]
  ]
        MSR     CPSR_c, a4      ; Re-enable interrupts
        AND     a1, lr, a2      ; Test if it was enabled or not
; mov a4,lr
; DebugReg a1,"HIRQ old reg value "
; mov lr,a4
        Pull    "pc"
a170 10
; teq   a1, #IMX_INT_UART1;Timer0_IRQ;IMX_INT_USBOH3_UH1   ; all but timer..
; teqne a1, #IMX_INT_UART2;IMX_INT_SDMA
; teqne a1, #IMX_INT_UART3;IMX_INT_IPU1_FUNC
;; teqne a1, #IMX_INT_I2C2
;; teqne a1, #IMX_INT_SATA
; bne %ft001
;  mov a4,lr
;  DebugReg a1,"HIRQ CLR no:"
;  mov lr,a4
;001
d174 1
a174 9
 [ ExtraDebugInterrupts
        LDR     a2, ExtraDebugIRQEnabled
        CMP     a2, #0
        BEQ     %FT101
        Push    "lr"
        DebugReg a1, "HAL_IRQClear: "
        Pull    "lr"
101
 ]              ;;;;;;;;;;  CODE NEEDS DONE
d180 11
a191 1
        LDR     a2, IRQC_Log
a194 4
 [ DebugInterrupts
        MOV     a1, #-1
        STR     a1, LastInterrupt_IRQ
 ]
d207 2
a208 41
; mov a4,lr
; DebugTX "HIRQ src chk"
; mov lr,a4
 [ DebugInterrupts :LAND: {FALSE}
        LDR     a1, LastInterrupt_IRQ
        CMP     a1, #0
        BLT     %FT10
        Push    "lr"
        DebugReg a1, "HAL_IRQSource: Previous IRQ not cleared: "
  [ DebugDisablePrevious
        BL      HAL_IRQDisable
  ]
  [ ExtraDebugInterrupts
    [ :LNOT: DebugDisablePrevious ; Doesn't play nice with this since it'll just spam the HAL_IRQClear messages
        STR     pc, ExtraDebugIRQEnabled ; any nonzero value will do
    ]
        MOV     lr, pc ; BL to the main routine so we can get the exit code
        B       %FT05
        DebugReg a1, "HAL_IRQSource: New IRQ: "
        Pull    "pc"
05
  |
        Pull    "lr"
  ]
10
 ]
        ; Does the ARM think an interrupt is occuring?
        MRC     p15, 0, a1, c12, c1, 0
        TST     a1, #I32_bit
        MOVEQ   a1, #-1
 [ DebugInterrupts
        bne     %ft01
        STREQ   a1, LastInterrupt_IRQ
        mov a2,lr
        DebugTX "arm not being irq"
        mov lr,a2
        teq a2,a2
 ]
        MOVEQ   pc, lr
01      LDR     a2, IRQC_Log
        LDR     a3, [a2, #(ICCIAR -IC_INTERFACES_BASE_ADDR)] ; int ack reg.. read only
d210 13
a222 27
; teq   a1, #IMX_INT_UART1;Timer0_IRQ;IMX_INT_USBOH3_UH1   ; all but timer..
; teqne a1, #IMX_INT_UART2;IMX_INT_SDMA
; teqne a1, #IMX_INT_UART3;IMX_INT_IPU1_FUNC
;; teqne a1, #IMX_INT_I2C2
;; teqne a1, #IMX_INT_SATA
; bne %ft001
; mov a4,lr
; DebugReg a1,"HIRQ src is:"
; mov lr,a4
;001

        CMP     a1, #IMX_INTERRUPT_COUNT
 [ DebugInterrupts
        STRLO   a1, LastInterrupt_IRQ
 ]
        MOVLO   pc, lr                          ; ret irq no
        ; Authentic spurious interrupt - restart INTC and return -1
        STR     a3, [a2, #(ICCEOIR -IC_INTERFACES_BASE_ADDR)]  ; ack the spurious irq srce
        ; Data synchronisation barrier to make sure INTC gets the message
        myDSB
; mov a4,lr
; DebugReg a1,"HIRQ spurious:"
; mov lr,a4
        MOV     a1, #-1
 [ DebugInterrupts
        STR     a1, LastInterrupt_IRQ
 ]
d230 1
a230 2

        ; First we need to make sure this is an IRQ, not an FIQ?
d232 2
a233 3
        ; Now check if it's firing

        ADD     ip, a2, #(ICDABR -IC_INTERFACES_BASE_ADDR)
d250 68
@


1.1.1.1
log
@Initial import of iMx6 HAL
@
text
@@


1.1.1.1.2.1
log
@Initial SMP support
Detail:
  s/DBell, Makefile - Implement doorbell HAL device
  h/irq_numbers, hdr/iMx6IRQs - Reserve space for core 1-3 private interrupts with bases 160, 192, 224
  s/Interrupts - Remove DebugInterrupts code to make things easier to follow. Adjust IRQ entry points for SMP-ness and implement the new entry points.
  hdr/StaticWS - Remove DebugInterrupts code. Reserve space for doorbell device and SGI interrupt tracking.
  hdr/iMx6q - Remove DebugInterrupts code.
  s/Boot - Implement new SMP-related HAL entry points
  s/Top - Implement some Cortex-A9 errata workarounds. Ensure smp_enable enables cache/TLB maintenance broadcast.
Admin:
  Tested on wandboard B1


Version 0.80, 1.4.2.2. Tagged as 'iMx6-0_80-1_4_2_2'
@
text
@a22 1
        GET     Hdr:HALEntries
d44 12
a55 3
        EXPORT  HAL_IRQProperties
        EXPORT  HAL_IRQSetCores
        EXPORT  HAL_IRQGetCores
d69 1
a69 1
        MOV     a4, #GIC_INTERRUPT_COUNT
d124 10
d137 10
d150 4
a154 1
        CMP     a1, #GIC_INTERRUPT_COUNT
a155 1
        ANDHS   a1, a1, #31     ; map to GIC interrupt number
d164 6
d174 10
d187 7
a193 1
        CMP     a1, #GIC_INTERRUPT_COUNT
d195 8
a202 1
        ANDHS   a1, a1, #31     ; map to GIC interrupt number
d205 6
a210 5
        MOV     a4, a1, LSR #5  ; index = intno / 32
        ADD     ip, ip, a4, LSL #2
        MOV     a4, #1
        MOV     a2, a4, LSL a2  ; mask = (1 << bit)
        LDR     a4, [ip, #0]    ; get old state
d212 12
d227 12
a238 14
        BEQ     %FT90
        CMP     a1, #16 ; check to see if SGI
        BHS     %FT80
        ; Look up the last SGI that was received for this core, it should correspond to the one we need to clear
        MRC     p15, 0, ip, c0, c0, 5
        ADR     a1, LastSGI
        AND     ip, ip, #3
        LDR     a1, [a1, ip, LSL #2]
80
        STR     a1, [a3, #(ICCEOIR - IC_DISTRIBUTOR_BASE_ADDR)]
90
        AND     a1, a4, a2      ; Test if it was enabled or not
        DSB     SY
        MOV     pc, lr
d241 10
d254 9
a262 1
              ;;;;;;;;;;  CODE NEEDS DONE
d268 1
a268 3
        CMP     a1, #GIC_INTERRUPT_COUNT
        ANDHS   a1, a1, #31     ; map to GIC interrupt number
        CMP     a1, #16 ; check for SGI
a269 8
        BHS     %FT15
        ; Look up the last SGI that was received for this core, it should correspond to the one we need to clear
        MRC     p15, 0, ip, c0, c0, 5
        ADR     a1, LastSGI
        AND     ip, ip, #3
        LDR     a1, [a1, ip, LSL #2]
15
        ; signal End Of Interrupt
d273 4
d289 41
a329 2
        LDR     a2, IRQC_Log
        LDR     a3, [a2, #(ICCIAR - IC_INTERFACES_BASE_ADDR)]
d331 27
a357 13
        CMP     a1, #GIC_INTERRUPT_COUNT
        MOVHS   a1, #-1            ; Spurious interrupt, ignore it
        CMPLO   a1, #32
        MOVHS   pc, lr
        ; Private interrupt, remap it
        MRC     p15, 0, a4, c0, c0, 5
        ANDS    a4, a4, #3
        ADDNE   a1, a1, #GIC_INTERRUPT_COUNT-32
        ADDNE   a1, a1, a4, LSL #5
        ; If it's an SGI, make a note of the ICCIAR value so we can clear the IRQ correctly in HAL_IRQClear
        TST     a3, #16
        ADREQ   a2, LastSGI
        STREQ   a3, [a2, a4, LSL #2]
d365 2
a366 1
        CMP     a1, #GIC_INTERRUPT_COUNT
d368 3
a370 2
        ANDHS   a1, a1, #31     ; map to GIC interrupt number
        ADD     ip, a2, #(ICDABR -IC_DISTRIBUTOR_BASE_ADDR)
a386 68
; In: a1 = device number
; Out: a1 = IRQ mask
;      a2 = FIQ mask
;           bits 0-29 of each register give cores that the interrupt can be
;           assigned to
;           bit 30 = private flag
;           bit 31 = interrupt can be routed to multiple cores at once
HAL_IRQProperties
        ; 0-31 for core 0
        ; 32-159 shared
        ; 160-191 for core 1
        ; 192-223 for core 2
        ; 224-255 for core 3
        CMP     a1, #IMX_INTERRUPT_COUNT
        MOV     a2, #0
        MOVHS   pc, lr
        CMP     a1, #32
        MOVLO   a1, #1 + HALIRQProperty_Private
        MOVLO   pc, lr
        SUBS    a1, a1, #GIC_INTERRUPT_COUNT
        MOVLT   a1, #&f + HALIRQProperty_Multicore
        MOVLT   pc, lr
        ; Core 1/2/3 private
        MOV     a1, a1, LSR #5 ; Core number, minus one
        MOV     a3, #2
        MOV     a1, a3, LSL a1
        ORR     a1, a1, #HALIRQProperty_Private
        MOV     pc, lr

; In: a1 = device number
;     a2 = desired core mask
; Out: a1 = actual core mask
HAL_IRQSetCores
        CMP     a1, #GIC_INTERRUPT_COUNT
        BHS     %FT10
        CMP     a1, #32
        BLO     %FT20
        LDR     a3, IRQDi_Log
        ADD     a3, a3, #ICDIPTR-IC_DISTRIBUTOR_BASE_ADDR
        ADD     a3, a3, a1
        AND     a1, a2, #&f
        STRB    a1, [a3] ; Update mapping
        MOV     pc, lr

HAL_IRQGetCores ; read-only version of IRQSetCores
        CMP     a1, #GIC_INTERRUPT_COUNT
        BHS     %FT10
        CMP     a1, #32
        BLO     %FT20
        LDR     a3, IRQDi_Log
        ADD     a3, a3, #ICDIPTR-IC_DISTRIBUTOR_BASE_ADDR
        LDRB    a1, [a3, a1] ; Get mapping
        MOV     pc, lr

10
        CMP     a1, #IMX_INTERRUPT_COUNT
        MOVHS   a1, #0
        MOVHS   pc, lr
        SUB     a1, a1, #GIC_INTERRUPT_COUNT
        MOV     a1, a1, LSR #5 ; Core number, minus one
        MOV     a3, #2
        MOV     a1, a3, LSL a1        
        MOV     pc, lr

20
        MOV     a1, #1
        MOV     pc, lr

@

