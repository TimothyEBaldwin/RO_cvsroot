head	1.1;
branch	1.1.1;
access;
symbols
	iMx6-1_01:1.1.1.1
	iMx6-1_00:1.1.1.1
	iMx6-0_99:1.1.1.1
	iMx6-0_98:1.1.1.1
	iMx6-0_97:1.1.1.1
	iMx6-0_96-1_4_2_12:1.1.1.1
	iMx6-0_96:1.1.1.1
	iMx6-0_90-1_4_2_11:1.1.1.1
	iMx6-0_95:1.1.1.1
	iMx6-0_94:1.1.1.1
	iMx6-0_93:1.1.1.1
	iMx6-0_92:1.1.1.1
	iMx6-0_91:1.1.1.1
	iMx6-0_90-1_4_2_10:1.1.1.1
	iMx6-0_90:1.1.1.1
	iMx6-0_87-1_4_2_9:1.1.1.1
	iMx6-0_89:1.1.1.1
	iMx6-0_87-1_4_2_8:1.1.1.1
	iMx6-0_88:1.1.1.1
	iMx6-0_87-1_4_2_7:1.1.1.1
	iMx6-0_87:1.1.1.1
	iMx6-0_82-1_4_2_6:1.1.1.1
	iMx6-0_86:1.1.1.1
	iMx6-0_82-1_4_2_5:1.1.1.1
	iMx6-0_85:1.1.1.1
	iMx6-0_82-1_4_2_4:1.1.1.1
	iMx6-0_84:1.1.1.1
	iMx6-0_83:1.1.1.1
	iMx6-0_82-1_4_2_3:1.1.1.1
	iMx6-0_82:1.1.1.1
	iMx6-0_81:1.1.1.1
	iMx6-0_80-1_4_2_2:1.1.1.1
	iMx6-0_80-1_4_2_1:1.1.1.1
	iMx6-0_80:1.1.1.1
	iMx6-0_79:1.1.1.1
	SMP:1.1.1.1.0.2
	SMP_bp:1.1.1.1
	iMx6-0_78:1.1.1.1
	iMx6-0_77:1.1.1.1
	iMx6-0_76:1.1.1.1
	iMx6-0_75:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2017.01.20.01.46.52;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	SZe1LdhMuDPoaECz;

1.1.1.1
date	2017.01.20.01.46.52;	author jballance;	state Exp;
branches;
next	;
commitid	SZe1LdhMuDPoaECz;


desc
@@



1.1
log
@Initial revision
@
text
@; Copyright 2017 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
; Secure mode monitor required for turning on L2 cache in respose to SMC #0
; service call
;
;
; no GETs needed.. we are included using a GET
;
;        AREA    |Asm$$Code|, CODE, READONLY, PIC
;        EXPORT SecureInit

        ALIGN   32
SecureBase
        nop                      ; reset          not used
        nop                      ; undef          not used
        B       SMCCode
        nop                      ; prefetch       can be used
        nop                      ; data abort     can be used
        nop                      ; reserved
        nop                      ; irq            can be used
        nop                      ; fiq            can be used
        = "qqwweerrtt"
        ALIGN
; code run in secure mode as response to SMC #0 opcode
; runs in secure monitor mode, so can access L2 Cache controller enable bit
SMCCode
        ; assume a1 = enable/disable flag, a2 = PL310 address
        teq     a1, #0
        beq     %ft50

        ; L2 cache enable sequence:
        ; https://community.freescale.com/docs/DOC-94572
        ; First configure the cache
        ldr     a1, =&132
        str     a1, [a2, #PL310_REG1_TAG_RAM_CONTROL]
        str     a1, [a2, #PL310_REG1_DATA_RAM_CONTROL]
        ; N.B. not enabling double linefill due to errata 752271
        ; ldr     a1, =&40800000
        ; str     a1, [a1, #PL310_REG15_PREFETCH_CTRL]
        ; Invalidate
        ldr     a1, =&ffff
        str     a1, [a2, #PL310_REG7_INV_WAY]
        ; Wait for completion
10
        ldr     a1, [a2, #PL310_REG7_CACHE_SYNC]
        tst     a1, #1
        bne     %bt10
        ; Enable
        mov     a1, #1
        str     a1, [a2, #PL310_REG1_CONTROL] ; Enable cache
        ; Wait for completion
20
        ldr     a1, [a2, #PL310_REG7_CACHE_SYNC]
        tst     a1, #1
        bne     %bt20
        movs    pc, lr           ; exit, restoring state

50
        ; cache disable sequence
        ; Clean
        ldr     a1, =&ffff
        str     a1, [a2, #PL310_REG7_CLEAN_WAY]
        ; Wait for completion
60
        ldr     a1, [a2, #PL310_REG7_CLEAN_WAY]
        teq     a1, #0
        bne     %bt60
        ; Sync
        mov     a1, #0
        str     a1, [a2, #PL310_REG7_CACHE_SYNC]
70
        ldr     a1, [a2, #PL310_REG7_CACHE_SYNC]
        tst     a1, #1
        bne     %bt70
        ; Disable
        mov     a1, #0
        str     a1, [a2, #PL310_REG1_CONTROL]
        DSB     SY
        movs    pc, lr           ; exit, restoring state

; code to initialise this all and set it going
; this is set up before the MMU is on, we'll avoid using it until afterwards
;
; ****** ASSUMPTION******
;  it is assumed that the HAL starts on a megabyte boundary, and does not exceed
;  256 k in length.
;  it is also assumed that the logical HAL start address is &fc000000
;   (this address is defined in the components file, and KernelWS header file
;   in kernel)
SecureInit
        MRS     r1, CPSR          ; remember our mode
        MSR     CPSR_c, #F32_bit+I32_bit+(MON32_mode);   can we do this?
        adr     r0,SecureBase
        bic     r0,r0,#&03fc0000   ; clear any bits that are not needed
        orr     r0,r0,#&fc000000   ; bear in mind that we are at top of ram now
        MCR     p15,0,r0,c12,c0,1  ; set the Mon Mode vector base to us here
        MSR     CPSR_c, r1         ; and will be mapped to FC000000 and up
        mov     pc, lr

        END
@


1.1.1.1
log
@Initial import of iMx6 HAL
@
text
@@
