head	1.13;
access;
symbols
	BCM2835-0_75-1:1.12
	BCM2835-0_76:1.13
	BCM2835-0_75-1_70_2_4:1.11.2.2
	BCM2835-0_75:1.12
	BCM2835-0_74:1.12
	BCM2835-0_73-1_70_2_3:1.11.2.2
	BCM2835-0_73:1.12
	BCM2835-0_72:1.12
	BCM2835-0_71-1_70_2_2:1.11.2.1
	BCM2835-0_71:1.11
	BCM2835-0_70-1_70_2_1:1.11.2.1
	SMP:1.11.0.2
	SMP_bp:1.11
	BCM2835-0_70:1.11
	BCM2835-0_69:1.11
	BCM2835-0_68:1.11
	BCM2835-0_67:1.11
	BCM2835-0_66:1.11
	BCM2835-0_65:1.11
	BCM2835-0_64:1.11
	BCM2835-0_63:1.11
	BCM2835-0_62:1.11
	BCM2835-0_61:1.11
	BCM2835-0_60:1.11
	BCM2835-0_59:1.11
	BCM2835-0_58:1.11
	BCM2835-0_57:1.11
	BCM2835-0_56:1.11
	BCM2835-0_55:1.11
	BCM2835-0_53:1.11
	BCM2835-0_52:1.11
	BCM2835-0_51:1.11
	BCM2835-0_50:1.11
	BCM2835-0_49:1.10
	BCM2835-0_48:1.10
	BCM2835-0_47:1.10
	BCM2835-0_46:1.10
	BCM2835-0_45:1.10
	BCM2835-0_44:1.9
	BCM2835-0_43:1.9
	BCM2835-0_42:1.9
	BCM2835-0_41:1.9
	BCM2835-0_40:1.9
	BCM2835-0_39:1.9
	BCM2835-0_38:1.9
	BCM2835-0_37:1.9
	BCM2835-0_36:1.9
	BCM2835-0_35:1.9
	BCM2835-0_34:1.9
	BCM2835-0_33:1.9
	BCM2835-0_32:1.9
	BCM2835-0_31:1.9
	BCM2835-0_30:1.8
	BCM2835-0_29:1.8
	BCM2835-0_28:1.8
	BCM2835-0_27:1.8
	BCM2835-0_26:1.8
	BCM2835-0_25:1.8
	BCM2835-0_24:1.8
	BCM2835-0_23:1.8
	BCM2835-0_22:1.8
	BCM2835-0_21:1.8
	BCM2835-0_20:1.7
	BCM2835-0_19:1.6
	BCM2835-0_18:1.6
	BCM2835-0_17:1.6
	BCM2835-0_16:1.5
	BCM2835-0_15:1.5
	BCM2835-0_14:1.5
	BCM2835-0_13:1.4
	BCM2835-0_12:1.4
	BCM2835-0_11:1.4
	BCM2835-0_10:1.3
	BCM2835-0_09:1.3
	BCM2835-0_08:1.2
	BCM2835-0_07:1.2
	BCM2835-0_06:1.2
	BCM2835-0_05:1.2
	BCM2835-0_04:1.2
	BCM2835-0_03:1.1.1.1
	BCM2835-0_02:1.1.1.1
	BCM2835-0_01:1.1.1.1
	initial:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2018.07.07.14.26.18;	author jlee;	state Exp;
branches;
next	1.12;
commitid	VQCRRsJLbDt0fdJA;

1.12
date	2017.09.09.11.03.31;	author rool;	state Exp;
branches;
next	1.11;
commitid	APWc8oJjayEiNv6A;

1.11
date	2015.11.15.00.09.48;	author jlee;	state Exp;
branches
	1.11.2.1;
next	1.10;
commitid	oJ6rSmtkg3Ajw7Jy;

1.10
date	2015.07.26.18.57.56;	author jlee;	state Exp;
branches;
next	1.9;
commitid	n3kZvFwWGn3xmPuy;

1.9
date	2013.12.19.01.29.09;	author jlee;	state Exp;
branches;
next	1.8;
commitid	9aIOPJd7daoBkGhx;

1.8
date	2012.09.02.20.03.38;	author jlee;	state Exp;
branches;
next	1.7;
commitid	FetF3i2OxxUzHZiw;

1.7
date	2012.08.28.23.12.39;	author bavison;	state Exp;
branches;
next	1.6;
commitid	BMUpqstey7aoUmiw;

1.6
date	2012.08.02.00.43.27;	author jlee;	state Exp;
branches;
next	1.5;
commitid	p73b1WEma91lhUew;

1.5
date	2012.07.19.10.29.17;	author jballance;	state Exp;
branches;
next	1.4;
commitid	7w2Uohftp8BdY9dw;

1.4
date	2012.07.07.19.46.20;	author jlee;	state Exp;
branches;
next	1.3;
commitid	qeOmpWpRzmnerFbw;

1.3
date	2012.06.15.14.40.12;	author bavison;	state Exp;
branches;
next	1.2;
commitid	GozidpkBTrLSrO8w;

1.2
date	2012.05.23.21.45.04;	author bavison;	state Exp;
branches;
next	1.1;
commitid	dyGUTwLbAf3ExT5w;

1.1
date	2012.05.10.14.53.40;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	9gwxHjLZncMLBb4w;

1.11.2.1
date	2017.07.29.11.37.38;	author jlee;	state Exp;
branches;
next	1.11.2.2;
commitid	leIbdlwVfACHk71A;

1.11.2.2
date	2017.09.10.11.28.52;	author jlee;	state Exp;
branches;
next	;
commitid	4Ldk9lS2jPl0UD6A;

1.1.1.1
date	2012.05.10.14.53.40;	author bavison;	state Exp;
branches;
next	;
commitid	9gwxHjLZncMLBb4w;


desc
@@


1.13
log
@Merge SMP branch to trunk
Detail:
  hdr/StaticWS - Reserve workspace for QA7 peripheral address, HAL-wide spinlock, and doorbell device
  Makefile, s/DBell - Add doorbell device implementation
  hdr/BCM2835 - Clean up dead macros, add new macros for spinlock claim/release and basic CPU detection. Define new IRQ numbers for the "QA7" peripheral.
  hdr/CastleMacros, s/Top - Generate two HAL descriptors and entry point tables: One for single-core machines and one for multi-core machines. This avoids some MP-related overheads on ARM11 models of Pi. Implement SMP HAL entry points.
  s/Interrupts - Add support for the QA7 interrupts. Although some interrupts can be flexibly routed to different cores, we currently stick with a static scheme.
  s/Messaging - Use CPUDetect macro
Admin:
  Untested
  Requires Kernel-6_09


Version 0.76. Tagged as 'BCM2835-0_76'
@
text
@# Copyright 2012 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Makefile for BCM2835 HAL
#

COMPONENT = BCM2835 HAL
TARGET = BCM2835
OBJS = Top CLib CMOS Debug Interrupts SDIO Timers UART USB Video DMA Messaging GPIO VCHIQ IIC RTC SPI Touch KbdScan DBell

HDRS =
CMHGFILE =
CUSTOMRES = custom
CUSTOMROM = custom
ROM_TARGET = custom
LNK_TARGET = custom
AIFDBG    = aif._BCM2835

#include StdRules
#include StdTools
include CModule

CCFLAGS += -ff -APCS 3/32bit/nofp/noswst
ASFLAGS += -APCS 3/nofp/noswst
AASMFLAGS += -APCS 3/nofp/noswst

resources:
        @@${ECHO} ${COMPONENT}: no resources

rom: aof.${TARGET}
        @@${ECHO} ${COMPONENT}: rom module built

_debug: ${GPADBG}
        @@echo ${COMPONENT}: debug image built

install_rom: linked.${TARGET}
        ${CP} linked.${TARGET} ${INSTDIR}.${TARGET} ${CPFLAGS}
        @@echo ${COMPONENT}: rom module installed

aof.${TARGET}: ${ROM_OBJS_} ${ROM_LIBS} ${DIRS} ${ROM_DEPEND}
        ${LD} -o $@@ -aof ${ROM_OBJS_} ${ROM_LIBS}

linked.${TARGET}: aof.${TARGET}
        ${LD} ${LDFLAGS} ${LDLINKFLAGS} -o $@@ -bin -base 0xFC000000 aof.${TARGET}

${AIFDBG}: ${ROM_OBJS_} ${ROM_LIBS}
        ${MKDIR} aif
        ${LD} -aif -bin -d -o ${AIFDBG} ${ROM_OBJS_} ${ROM_LIBS}

#${GPADBG}: ${AIFDBG}
#        ToGPA -s ${AIFDBG} ${GPADBG}

# Dynamic dependencies:
@


1.12
log
@Participate in keyboard scan dependencies
Detail:
  Add keyboard scan code with list of modules that the kernel needs to do the same.
  Reorder the HALEntries to match Kernel-5_89.
  Remove unused stub functions (now KbdScan exists).
Admin:
  Submission for USB bounty.

Version 0.72. Tagged as 'BCM2835-0_72'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Interrupts SDIO Timers UART USB Video DMA Messaging GPIO VCHIQ IIC RTC SPI Touch KbdScan
@


1.11
log
@Add basic HAL device for the official DSI display/touchscreen. Delete superfluous code.
Detail:
  Makefile, s/Touch - Basic HAL device for the official touchscreen, which just exposes the address of the buffer which the GPU periodically fills with a register dump of the touchscreen controller.
  hdr/BCM2835 - Remove old comment. Add new tag for getting the touchscreen buffer address.
  hdr/StaticWS - Remove old workspace entries. Add new entries for touchscreen.
  s/Messaging - Remove the messagebox tags which set a screen mode on startup (BCMVideo will handle that for us), and just blank the screen instead (to stop the GPU displaying a coloured square). Add tag to get the touchscreen buffer address.
  s/Top - Register touchscreen HAL device during HAL_InitDevices. Remove more old code.
Admin:
  Tested on Raspberry Pi 1 B


Version 0.50. Tagged as 'BCM2835-0_50'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Interrupts SDIO Stubs Timers UART USB Video DMA Messaging GPIO VCHIQ IIC RTC SPI Touch
@


1.11.2.1
log
@Initial SMP support
Detail:
  hdr/BCM2835 - Delete unused timer macros. Add basic spinlock claim/release macros. Add CPUDetect macro to encapsulate ARM11 vs. A7/A53 detection. Add definitions for the "QA7" interrupts.
  Makefile, s/DBell - Add doorbell device driver
  hdr/StaticWS - Reserve workspace for doorbell device, QA7 interrupt controller ptr, spinlock
  s/Top, hdr/CastleMacros - Generate two HAL entry point tables, one for ARM11, one for A7/A53. Use CPUDetect macro. Implement new SMP-related HAL entry points.
  s/Interrupts - Implement support for the QA7 interrupt controller and the new IRQ-related HAL entry points
  s/Messaging - Use CPUDetect macro
Admin:
  Tested on Raspberry Pi 1, 2, 3


Version 0.70, 1.70.2.1. Tagged as 'BCM2835-0_70-1_70_2_1'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Interrupts SDIO Stubs Timers UART USB Video DMA Messaging GPIO VCHIQ IIC RTC SPI Touch DBell
@


1.11.2.2
log
@Merge latest changes from main branch

Version 0.73, 1.70.2.3. Tagged as 'BCM2835-0_73-1_70_2_3'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Interrupts SDIO Timers UART USB Video DMA Messaging GPIO VCHIQ IIC RTC SPI Touch KbdScan DBell
@


1.10
log
@Add basic HAL devices for the SPI controllers
Detail:
  s/SPI - Basic HAL devices for the 3 SPI controllers. These expose the register addresses & IRQ numbers, and (for SPI1 & SPI2) deal with enabling/disabling the hardware and the shared IRQ line. GPIO mapping currently isn't dealt with - we don't know which pin group to use (SPI0 can use two different sets on the compute) or how many chip select lines are desired.
  Makefile - Add SPI source
  hdr/BCM2835 - Add aux SPI registers
  hdr/StaticWS - Reserve workspace for the HAL devices
  s/Top - Register new devices in HAL_InitDevices
Admin:
  Tested on Raspberry Pi B & 2 B


Version 0.45. Tagged as 'BCM2835-0_45'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Interrupts SDIO Stubs Timers UART USB Video DMA Messaging GPIO VCHIQ IIC RTC SPI
@


1.9
log
@Add RTC HAL device
Detail:
  CJE's RTC module uses a DS1307-compatible RTC chip similar to the one used in the Iyonix. Previously the kernel handled talking to it, but now that low-level RTC handling has been moved out of the kernel we need an RTC HAL device in the BCM2835 HAL instead.
  s/RTC - A copy of s.RTC from the Tungsten HAL, relicensed as BSD with permission from Rob Sprowson
  Makefile, hdr/StaticWS, s/Top - Additional changes needed to hook the code into the HAL
Admin:
  Tested on Raspberry Pi, but without an RTC module fitted
  However the similarity of the clock chip to the one in the Iyonix should mean there's little chance of this code failing to work correctly when an RTC is fitted


Version 0.31. Tagged as 'BCM2835-0_31'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Interrupts SDIO Stubs Timers UART USB Video DMA Messaging GPIO VCHIQ IIC RTC
@


1.8
log
@Strip out video code & on-screen debug
Detail:
  Makefile, s/Display - Deleted on-screen debug code
  hdr/BCM2835, hdr/StaticWS, s/IIC, s/Messaging, s/Stubs, s/Top, s/UART - Strip out calls to on-screen debug code, and a few bits of video code
  s/Video - Video code removed and replaced with stub functions similar to other HALs. Only remaining useful code is HAL_Video_StartupMode, which in time should probably be moved to BCMVideo as well.
Admin:
  Tested on Raspberry Pi with high processor vectors


Version 0.21. Tagged as 'BCM2835-0_21'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Interrupts SDIO Stubs Timers UART USB Video DMA Messaging GPIO VCHIQ IIC
@


1.7
log
@  Addition of I2C support
Detail:
  Implementation of the high-level HAL IIC interface provided by Dave Higton.
Admin:
  Checked it builds and runs at ROOL.

Version 0.20. Tagged as 'BCM2835-0_20'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Display Interrupts SDIO Stubs Timers UART USB Video DMA Messaging GPIO VCHIQ IIC
@


1.6
log
@Add GPIO & VCHIQ HAL devices. Fix FlushDataCache macro to perform a clean & invalidate instead of just an invalidate.
Detail:
  s/GPIO - Basic implementation of the GPIO HAL device to allow the GPIO module to detect the board type
  s/VCHIQ, hdr/StaticWS - New VCHIQ HAL device which exposes the functionality required by the work-in-progress VCHIQ driver.
  Makefile, s/Top - Hook up the new files/devices
  hdr/BCM2835 - Make the FlushDataCache macro perform a clean & invalidate, to match the behaviour of FlushDataCacheRange
Admin:
  Tested on Raspberry Pi with high processor vectors


Version 0.17. Tagged as 'BCM2835-0_17'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Display Interrupts SDIO Stubs Timers UART USB Video DMA Messaging GPIO VCHIQ
@


1.5
log
@
	Various updates to do with the messaging channel, HAL_MachineID, and HAL_Reset

Detail:
	HAL_Reset now causes a complete reboot of the machiine. It isnt yet properly called from
	the kernel.. I've not investigated why yet. Behaviour tested using OS_Hardware call

	HAL_MachineID, with the github start.elf from 18 July 2012 will provide a valid MAC address ..
	i.e. that specific to this machine. The a1 value in HAL_ExtendedID needs to be set 0 for this to be reported
	by OS_ReadSysInfo .. unfortunately, again at this stage, it stalls the boot when set 0, so just for now
	the committed value for a1 in HAL_ExtendedID is not 0 .

	centralised messaging routine added. This is used a fair bit in acquiring the operating environment
	Not yet used in the DMA stuff. probably ought to be. At present the messaging channel this mainly
	handles is not complete, so information from this code is still WIP

Admin:
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)


Version 0.14. Tagged as 'BCM2835-0_14'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Display Interrupts SDIO Stubs Timers UART USB Video DMA Messaging
@


1.4
log
@Add DMA driver
Detail:
  s/DMA, hdr/DMA, Makefile - DMA driver, as an implementation of the DMA controller and list type DMA channel HAL devices
  hdr/StaticWS - Added DMA workspace definition
  hdr/BCM2835 - Removed DMA control block definition (now in hdr/DMA). Add definitions for the mailbox property interface, which should be supported by the GPU firmware sometime soon.
  s/Top - Export a couple of the debug functions. Store logical & physical address of NCNB workspace instead of hackily getting phys addr of the (cacheable) HAL workspace. Call DMA_InitDevices in HAL_InitDevices.
Admin:
  Tested in BCM2835 ROM
  DMA driver hasn't received large amounts of testing, lacks support for finite-length circular transfers, and currently only has one DMA channel enabled
  More DMA channels should be available once the mailbox property interface is functional and we know which channels the GPU does and doesn't use.


Version 0.11. Tagged as 'BCM2835-0_11'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Display Interrupts SDIO Stubs Timers UART USB Video DMA
@


1.3
log
@  SD support, and miscellaneous other changes
Detail:
  * Bugfix to HAL_FIQDisableAll - it wasn't clearing the FIQ register (would
    only have caused trouble in practice if the same device was subsequently
    enabled as an IRQ).
  * Added a load of memory barriers to s.Interrupts and s.Timers to conform
    to the requirement stated in 1.3 of the datasheet.
  * Added a HAL device for the Arasan SDHCI controller. Note that this does
    not currently work reliably, and results vary from card to card. High
    speed support is currently disabled until we are able to verify that it
    works reliably.
  * Added a sprinkling of "GET Hdr:ListOpts" because the space reserved for
    the SDHCI HAL device in hdr.StaticWS is determined by including
    Hdr:HALDevice and Hdr:SDHCIDevice, which need it.
  * When support for saving "CMOS" to the SD card is added, the ROM image
    file (kernel.img) is the only one we can count on the bootloader
    installing in memory, so I think we're going to have to work using the
    table in s.CMOS. Broadcom seems to like messing around with the space
    just after the processor vector table, so rather than adding a pointer
    to the table there, I've opted to mark it using a magic word.
Admin:
  Tested on a Raspberry Pi - as noted above, there are reliability issues.

Version 0.09. Tagged as 'BCM2835-0_09'
@
text
@d20 1
a20 1
OBJS = Top CLib CMOS Debug Display Interrupts SDIO Stubs Timers UART USB Video
@


1.2
log
@  Complete rework of timer and interrupt code
Detail:
 * Moved interrupt and timer code out of s.Stubs - they're not stubs any more.
 * Rewrote timer and counter code to use GPU system timer 1 for our Timer0
   rather than the ARM timer. This is recommended in the Broadcom datasheet
   because it's driven from the APB clock and so its speed will vary in
   reduced or low power mode.
 * HAL_CounterDelay now, well, does a delay!
 * Added a Timer1, driven from GPU system timer 3 - common code with Timer0.
 * Reshuffled device numbers so the GPU interrupts are at the bottom. This
   works better for FIQs and makes Timer0 the lowest priority interrupt.
 * Higher device numbers are now consistently treated as higher priority.
 * Stopped using bits 8-31 of the basic interrupt registers. These can't be
   masked, so they cause the kernel to lock up if generated, which happens
   if the GPU interrupt which they alias is generated (which appears to
   include the timers even though this is not documented).
 * Added definitions for all the interrupts, including those redacted from the
   datasheet - we need them at least for timers, USB and SD.
 * Stopped HAL_IRQClear from doing anything - this interrupt controller
   doesn't do latching. To acknowledge timer interrupts, you should use
   HAL_TimerIRQClear (and HAL_IRQClear too for compatibility with other ports).
 * Implemented HAL_IRQStatus and all the FIQ control routines.
 * Offsets to interrupt controller registers now use symbolic names.
 * Replaced some hard spaces in sources with normal ones.
Admin:
  Tested on a beta Raspberry Pi. Confirmed that interrupt handlers for both
  ARM and GPU sources can both be operational simultaneuosly. However, the FIQ
  code has not been tested. Timer0 is verified as running at the correct
  speed and reporting a count *down* in the correct range (not a count up as
  some previous versions did). HAL_CounterDelay appears correct also.

Version 0.04. Tagged as 'BCM2835-0_04'
@
text
@d20 1
a20 1
OBJS = Top CMOS Debug Display Interrupts Stubs Timers UART USB Video
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
OBJS = Top CMOS Debug Display Stubs UART USB Video
@


1.1.1.1
log
@  Initial import of BCM2835 (Raspberry Pi) HAL
Detail:
  Covers the basic functionality, but does require a customised start.elf
  to function. The vast majority is an entirely new implementation and is
  BSD licenced, but 4% (the Makefile and a handful of simple macros) are
  copied from pre-existing Castle-licenced code, so it lives under the
  "mixed" hierarchy. If other HALs are anything to go by, we'll end up
  having to add more Castle code (at least some C runtime functions) so it's
  probably juast as well.
Admin:
  Code received from Adrian Lees
@
text
@@
