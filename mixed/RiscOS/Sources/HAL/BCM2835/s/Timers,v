head	1.3;
access;
symbols
	BCM2835-0_75-1:1.3
	BCM2835-0_76:1.3
	BCM2835-0_75-1_70_2_4:1.3
	BCM2835-0_75:1.3
	BCM2835-0_74:1.3
	BCM2835-0_73-1_70_2_3:1.3
	BCM2835-0_73:1.3
	BCM2835-0_72:1.3
	BCM2835-0_71-1_70_2_2:1.3
	BCM2835-0_71:1.3
	BCM2835-0_70-1_70_2_1:1.3
	SMP:1.3.0.2
	SMP_bp:1.3
	BCM2835-0_70:1.3
	BCM2835-0_69:1.3
	BCM2835-0_68:1.3
	BCM2835-0_67:1.3
	BCM2835-0_66:1.3
	BCM2835-0_65:1.3
	BCM2835-0_64:1.3
	BCM2835-0_63:1.3
	BCM2835-0_62:1.3
	BCM2835-0_61:1.3
	BCM2835-0_60:1.3
	BCM2835-0_59:1.3
	BCM2835-0_58:1.3
	BCM2835-0_57:1.3
	BCM2835-0_56:1.3
	BCM2835-0_55:1.3
	BCM2835-0_53:1.3
	BCM2835-0_52:1.3
	BCM2835-0_51:1.3
	BCM2835-0_50:1.3
	BCM2835-0_49:1.3
	BCM2835-0_48:1.3
	BCM2835-0_47:1.3
	BCM2835-0_46:1.3
	BCM2835-0_45:1.3
	BCM2835-0_44:1.3
	BCM2835-0_43:1.3
	BCM2835-0_42:1.3
	BCM2835-0_41:1.3
	BCM2835-0_40:1.3
	BCM2835-0_39:1.3
	BCM2835-0_38:1.3
	BCM2835-0_37:1.3
	BCM2835-0_36:1.3
	BCM2835-0_35:1.3
	BCM2835-0_34:1.3
	BCM2835-0_33:1.2
	BCM2835-0_32:1.2
	BCM2835-0_31:1.2
	BCM2835-0_30:1.2
	BCM2835-0_29:1.2
	BCM2835-0_28:1.2
	BCM2835-0_27:1.2
	BCM2835-0_26:1.2
	BCM2835-0_25:1.2
	BCM2835-0_24:1.2
	BCM2835-0_23:1.2
	BCM2835-0_22:1.2
	BCM2835-0_21:1.2
	BCM2835-0_20:1.2
	BCM2835-0_19:1.2
	BCM2835-0_18:1.2
	BCM2835-0_17:1.2
	BCM2835-0_16:1.2
	BCM2835-0_15:1.2
	BCM2835-0_14:1.2
	BCM2835-0_13:1.2
	BCM2835-0_12:1.2
	BCM2835-0_11:1.2
	BCM2835-0_10:1.2
	BCM2835-0_09:1.2
	BCM2835-0_08:1.1
	BCM2835-0_07:1.1
	BCM2835-0_06:1.1
	BCM2835-0_05:1.1
	BCM2835-0_04:1.1;
locks; strict;
comment	@# @;


1.3
date	2014.06.19.21.03.18;	author jlee;	state Exp;
branches;
next	1.2;
commitid	EcK8j6AjJmkFYaFx;

1.2
date	2012.06.15.14.40.20;	author bavison;	state Exp;
branches;
next	1.1;
commitid	GozidpkBTrLSrO8w;

1.1
date	2012.05.23.21.45.10;	author bavison;	state Exp;
branches;
next	;
commitid	dyGUTwLbAf3ExT5w;


desc
@@


1.3
log
@Add support code required for DWCDriver 'FIQ fix'
Detail:
  hdr/BCM2835, hdr/USB, s/USB - Update HAL_USBControllerInfo to return the MPHI address & IRQ number
  s/Interrupts - Add some missing memory barriers. Change FIQ enable/disable calls to not alter IRQ masking of the interrupt - simplifies the code and avoids any ordering issues with code that switches interrupts between IRQ & FIQ
  s/Timers - Add missing memory barrier
Admin:
  Tested on Raspberry Pi
  Requires Kernel-5_35-4_79_2_227 to build


Version 0.34. Tagged as 'BCM2835-0_34'
@
text
@;
; Copyright (c) 2012, RISC OS Open Ltd
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;

        EXPORT  Timer_Init
        EXPORT  HAL_Timers
        EXPORT  HAL_TimerDevice
        EXPORT  HAL_CounterRate
        EXPORT  HAL_TimerGranularity
        EXPORT  HAL_TimerMaxPeriod
        EXPORT  HAL_TimerSetPeriod
        EXPORT  HAL_CounterPeriod
        EXPORT  HAL_TimerPeriod
        EXPORT  HAL_CounterRead
        EXPORT  HAL_TimerReadCountdown
        EXPORT  HAL_TimerIRQClear
        EXPORT  HAL_CounterDelay

; The BCM2835 has timers on both the GPU and ARM side, but the ARM timer speed
; varies in power saving mode, making it practically useless, except perhaps as
; a cycle counter for code optimisation?
;
; The datasheet recommends the use of the GPU side timer (system timer), but to
; be unhelpful, all 4 interrupts from the system timer are officially reserved
; for VideoCore use. There's no way we can do without a reliable monotonic
; interrupt, so we have no option but to steal one or more of the channels from
; VideoCore.
;
; By inspection, at the time of writing, start.elf appears to only use Timer0
; and Timer2. In fact Timer0 even seems to be a centisecond interrupt, but we
; need our own version, partly because NetTime will want to bend the exact
; interrupt interval.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        
        GET     hdr.BCM2835
        GET     hdr.StaticWS


        ; Given a logical timer number in $timer, place a pointer to the
        ; workspace for that timer in $ws
        MACRO
$lab    TimerWs $ws, $timer, $tmp
        ASSERT  TimerWsSize = 16
$lab    ADR     $tmp, Timer00000000Ws
        ADD     $ws, $tmp, $timer, LSL #4
        MEND


        AREA    |ARM$$code|, CODE, READONLY, PIC
        ARM     ; to allow PUSH and POP without warnings


; One-time initialisation
        
Timer_Init ROUT
        MOV     a1, #0
        LDR     a2, PeriBase
        ADD     a2, a2, #Timer_Base
        GBLS    PDigit
Timer   SETA    0
        WHILE   Timer < NumTimers
PDigit  SETS    :STR:TimerPhysFromLog$Timer:RIGHT:1
        STR     a1, [sb, #:INDEX: Timer$Timer.Ws + Timer_Reload]
        ADD     a3, a2, #ST_C$PDigit
        STR     a3, [sb, #:INDEX: Timer$Timer.Ws + Timer_Register]
        MOV     a3, #iDev_GPU_Timer0 + TimerPhysFromLog$Timer
        STR     a3, [sb, #:INDEX: Timer$Timer.Ws + Timer_Device]
Timer   SETA    Timer + 1
        WEND
        MOV     pc, lr


HAL_Timers ROUT
        MOV     a1, #NumTimers
        MOV     pc, lr

        
HAL_TimerDevice ROUT
        CMP     a1, #NumTimers
        MOVCS   a1, #-1 ; invalid timer parameter
        MOVCS   pc, lr
        TimerWs a1, a1, ip
        LDR     a1, [a1, #Timer_Device]
        MOV     pc, lr


HAL_CounterRate
HAL_TimerGranularity ROUT
        LDR     a1, =TIMER_RATE
        MOV     pc, lr


HAL_TimerMaxPeriod ROUT
        ; Technically this could be anything up to 2^32 - 1, but we risk sign
        ; confusion with periods of 2^31 or more. To allow for interrupt
        ; latency, it probably wants to be even less than that, but even a
        ; factor of 2 less is still over 17 minutes, much longer than most
        ; other platforms permit.
        MOV     a1, #&40000000
        MOV     pc, lr


HAL_TimerSetPeriod ROUT
        CMP     a1, #NumTimers
        MOVCS   pc, lr ; invalid timer parameter
        PUSH    {lr}
        DoMemBarrier lr
        TimerWs a1, a1, ip
        LDR     lr, PeriBase
        LDR     ip, [a1, #Timer_Register]
        ADD     lr, lr, #Timer_Base
        
        MRS     a4, CPSR
        ORR     a3, a4, #I32_bit
        MSR     CPSR_c, a3              ; IRQs off
        
        LDR     a3, [a1, #Timer_Reload]
        STR     a2, [a1, #Timer_Reload]
        TEQ     a3, #0                          ; if timer was disabled then
        LDREQ   a3, [lr, #ST_CLO]               ; start counting from now,
        ADDEQ   a3, a3, a2                      ; otherwise leave time of next
        STREQ   a3, [ip]                        ; interrupt unchanged
        STREQ   a3, [a1, #Timer_Compare]
        
        MSR     CPSR_c, a4              ; IRQs restored
        DoMemBarrier lr
        POP     {pc}


HAL_CounterPeriod
        MOV     a1, #0
HAL_TimerPeriod ROUT
        CMP     a1, #NumTimers
        MOVCS   a1, #0 ; invalid timer parameter
        MOVCS   pc, lr
        TimerWs a1, a1, ip
        LDR     a1, [a1, #Timer_Reload]
        MOV     pc, lr


HAL_CounterRead
        MOV     a1, #0
HAL_TimerReadCountdown ROUT
        CMP     a1, #NumTimers
        BCS     %F90 ; invalid timer parameter
        DoMemBarrier ip
        TimerWs a1, a1, ip
        LDR     a4, PeriBase
        ADD     a4, a4, #Timer_Base
        ASSERT  Timer_Reload = 0 :LAND: Timer_Compare = 4
        LDMIA   a1, {a2, a3}
        LDR     a4, [a4, #ST_CLO]
        TEQ     a2, #0
        BEQ     %F90 ; timer disabled
        SUBS    a1, a3, a4
         ; Keep adding the reload value (to account for not-yet-serviced timer
         ; interrupts) until result is back in range - hopefully this will rarely
         ; need to happen more than once so no need to optimise with a division
01      ADDSMI  a1, a1, a2
        BMI     %B01
        MOVEQ   a1, a2
        DoMemBarrier ip
        MOV     pc, lr

        ; Read failed
90      MOV     a1, #0
        DoMemBarrier ip
        MOV     pc, lr


HAL_TimerIRQClear ROUT
        CMP     a1, #NumTimers
        MOVCS   pc, lr ; invalid timer parameter
        PUSH    {v1, lr}
        DoMemBarrier lr
        TimerWs a1, a1, ip
        LDR     lr, PeriBase
        LDR     ip, [a1, #Timer_Register]
        ADD     lr, lr, #Timer_Base
        
        MRS     v1, CPSR
        ORR     a4, v1, #I32_bit
        MSR     CPSR_c, a4              ; IRQs off
        
        LDR     a2, [a1, #Timer_Device]
        MOV     a3, #1
        AND     a2, a2, #3              ; physical timer number
        MOV     a3, a3, LSL a2
        STR     a3, [lr, #ST_CS]        ; ack the interrupt in the timer peripheral
        ASSERT  Timer_Reload = 0 :LAND: Timer_Compare = 4
        LDMIA   a1, {a2, a3}
01      ADD     a3, a3, a2
        STR     a3, [ip]
        STR     a3, [a1, #Timer_Compare]
        DoMemBarrier a4                 ; ensure compare register is written before we read count
        LDR     a4, [lr, #ST_CLO]
        CMP     a3, a4
        BMI     %B01                    ; loop only happens if it took over a tick to service last IRQ
        BEQ     %B01                    ; and it's necessary to ensure we don't wait for the counter
                                        ; to wrap (over an hour) before getting the next one
        MSR     CPSR_c, v1              ; IRQs restored
        DoMemBarrier lr
        POP     {v1, pc}


HAL_CounterDelay ROUT
        ASSERT  TIMER_RATE = 1000000
        ; The counter is already measured in microseconds and is modulo 2^32,
        ; which makes this very easy to implement
        DoMemBarrier ip
        LDR     a2, PeriBase
        ADD     a2, a2, #Timer_Base
        LDR     a3, [a2, #ST_CLO]
        ADD     a3, a3, #1      ; time until first tick is < 1 us, so waste it
        ADD     a3, a3, a1
01      LDR     a4, [a2, #ST_CLO]
        CMP     a4, a3
        BMI     %B01            ; MI means we don't have to worry about signedness or wrap
        DoMemBarrier ip
        MOV     pc, lr


        END
@


1.2
log
@  SD support, and miscellaneous other changes
Detail:
  * Bugfix to HAL_FIQDisableAll - it wasn't clearing the FIQ register (would
    only have caused trouble in practice if the same device was subsequently
    enabled as an IRQ).
  * Added a load of memory barriers to s.Interrupts and s.Timers to conform
    to the requirement stated in 1.3 of the datasheet.
  * Added a HAL device for the Arasan SDHCI controller. Note that this does
    not currently work reliably, and results vary from card to card. High
    speed support is currently disabled until we are able to verify that it
    works reliably.
  * Added a sprinkling of "GET Hdr:ListOpts" because the space reserved for
    the SDHCI HAL device in hdr.StaticWS is determined by including
    Hdr:HALDevice and Hdr:SDHCIDevice, which need it.
  * When support for saving "CMOS" to the SD card is added, the ROM image
    file (kernel.img) is the only one we can count on the bootloader
    installing in memory, so I think we're going to have to work using the
    table in s.CMOS. Broadcom seems to like messing around with the space
    just after the processor vector table, so rather than adding a pointer
    to the table there, I've opted to mark it using a magic word.
Admin:
  Tested on a Raspberry Pi - as noted above, there are reliability issues.

Version 0.09. Tagged as 'BCM2835-0_09'
@
text
@d194 1
@


1.1
log
@  Complete rework of timer and interrupt code
Detail:
 * Moved interrupt and timer code out of s.Stubs - they're not stubs any more.
 * Rewrote timer and counter code to use GPU system timer 1 for our Timer0
   rather than the ARM timer. This is recommended in the Broadcom datasheet
   because it's driven from the APB clock and so its speed will vary in
   reduced or low power mode.
 * HAL_CounterDelay now, well, does a delay!
 * Added a Timer1, driven from GPU system timer 3 - common code with Timer0.
 * Reshuffled device numbers so the GPU interrupts are at the bottom. This
   works better for FIQs and makes Timer0 the lowest priority interrupt.
 * Higher device numbers are now consistently treated as higher priority.
 * Stopped using bits 8-31 of the basic interrupt registers. These can't be
   masked, so they cause the kernel to lock up if generated, which happens
   if the GPU interrupt which they alias is generated (which appears to
   include the timers even though this is not documented).
 * Added definitions for all the interrupts, including those redacted from the
   datasheet - we need them at least for timers, USB and SD.
 * Stopped HAL_IRQClear from doing anything - this interrupt controller
   doesn't do latching. To acknowledge timer interrupts, you should use
   HAL_TimerIRQClear (and HAL_IRQClear too for compatibility with other ports).
 * Implemented HAL_IRQStatus and all the FIQ control routines.
 * Offsets to interrupt controller registers now use symbolic names.
 * Replaced some hard spaces in sources with normal ones.
Admin:
  Tested on a beta Raspberry Pi. Confirmed that interrupt handlers for both
  ARM and GPU sources can both be operational simultaneuosly. However, the FIQ
  code has not been tested. Timer0 is verified as running at the correct
  speed and reporting a count *down* in the correct range (not a count up as
  some previous versions did). HAL_CounterDelay appears correct also.

Version 0.04. Tagged as 'BCM2835-0_04'
@
text
@d134 1
d153 1
d173 1
d189 1
d201 1
d228 1
d236 1
d245 1
@

