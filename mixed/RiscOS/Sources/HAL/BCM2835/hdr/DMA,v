head	1.1;
access;
symbols
	BCM2835-0_75-1:1.1
	BCM2835-0_76:1.1
	BCM2835-0_75-1_70_2_4:1.1
	BCM2835-0_75:1.1
	BCM2835-0_74:1.1
	BCM2835-0_73-1_70_2_3:1.1
	BCM2835-0_73:1.1
	BCM2835-0_72:1.1
	BCM2835-0_71-1_70_2_2:1.1
	BCM2835-0_71:1.1
	BCM2835-0_70-1_70_2_1:1.1
	SMP:1.1.0.2
	SMP_bp:1.1
	BCM2835-0_70:1.1
	BCM2835-0_69:1.1
	BCM2835-0_68:1.1
	BCM2835-0_67:1.1
	BCM2835-0_66:1.1
	BCM2835-0_65:1.1
	BCM2835-0_64:1.1
	BCM2835-0_63:1.1
	BCM2835-0_62:1.1
	BCM2835-0_61:1.1
	BCM2835-0_60:1.1
	BCM2835-0_59:1.1
	BCM2835-0_58:1.1
	BCM2835-0_57:1.1
	BCM2835-0_56:1.1
	BCM2835-0_55:1.1
	BCM2835-0_53:1.1
	BCM2835-0_52:1.1
	BCM2835-0_51:1.1
	BCM2835-0_50:1.1
	BCM2835-0_49:1.1
	BCM2835-0_48:1.1
	BCM2835-0_47:1.1
	BCM2835-0_46:1.1
	BCM2835-0_45:1.1
	BCM2835-0_44:1.1
	BCM2835-0_43:1.1
	BCM2835-0_42:1.1
	BCM2835-0_41:1.1
	BCM2835-0_40:1.1
	BCM2835-0_39:1.1
	BCM2835-0_38:1.1
	BCM2835-0_37:1.1
	BCM2835-0_36:1.1
	BCM2835-0_35:1.1
	BCM2835-0_34:1.1
	BCM2835-0_33:1.1
	BCM2835-0_32:1.1
	BCM2835-0_31:1.1
	BCM2835-0_30:1.1
	BCM2835-0_29:1.1
	BCM2835-0_28:1.1
	BCM2835-0_27:1.1
	BCM2835-0_26:1.1
	BCM2835-0_25:1.1
	BCM2835-0_24:1.1
	BCM2835-0_23:1.1
	BCM2835-0_22:1.1
	BCM2835-0_21:1.1
	BCM2835-0_20:1.1
	BCM2835-0_19:1.1
	BCM2835-0_18:1.1
	BCM2835-0_17:1.1
	BCM2835-0_16:1.1
	BCM2835-0_15:1.1
	BCM2835-0_14:1.1
	BCM2835-0_13:1.1
	BCM2835-0_12:1.1
	BCM2835-0_11:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.07.07.19.46.23;	author jlee;	state Exp;
branches;
next	;
commitid	qeOmpWpRzmnerFbw;


desc
@@


1.1
log
@Add DMA driver
Detail:
  s/DMA, hdr/DMA, Makefile - DMA driver, as an implementation of the DMA controller and list type DMA channel HAL devices
  hdr/StaticWS - Added DMA workspace definition
  hdr/BCM2835 - Removed DMA control block definition (now in hdr/DMA). Add definitions for the mailbox property interface, which should be supported by the GPU firmware sometime soon.
  s/Top - Export a couple of the debug functions. Store logical & physical address of NCNB workspace instead of hackily getting phys addr of the (cacheable) HAL workspace. Call DMA_InitDevices in HAL_InitDevices.
Admin:
  Tested in BCM2835 ROM
  DMA driver hasn't received large amounts of testing, lacks support for finite-length circular transfers, and currently only has one DMA channel enabled
  More DMA channels should be available once the mailbox property interface is functional and we know which channels the GPU does and doesn't use.


Version 0.11. Tagged as 'BCM2835-0_11'
@
text
@;
; Copyright (c) 2012, RISC OS Open Ltd
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;

; General registers, from DMA_Base
DMA_INT_STATUS  * &fe0
DMA_ENABLE      * &ff0

; DMA control block

                ^ 0
DMACB_TI        # 4
DMACB_SOURCE_AD # 4
DMACB_DEST_AD   # 4
DMACB_TXFR_LEN  # 4
DMACB_STRIDE    # 4
DMACB_NEXTCONBK # 4
DMACB_RESERVED  # 8

DMACB_SIZE      * @@
DMACB_ALIGN     * 32

; DMA channel register map

                ^ 0
DMACH_CS        # 4 ; RW
DMACH_CONBLK_AD # 4 ; RW
DMACH_TI        # 4 ; RO
DMACH_SOURCE_AD # 4 ; RO
DMACH_DEST_AD   # 4 ; RO
DMACH_TXFR_LEN  # 4 ; RO
DMACH_STRIDE    # 4 ; RO
DMACH_NEXTCONBK # 4 ; RO (RW when paused)
DMACH_DEBUG     # 4 ; RW

; Stride of 256 bytes between each channel
DMA_CH_STRIDE   * &100

; Register/CB bits

DMA_CS_RESET                          * 1<<31
DMA_CS_ABORT                          * 1<<30
DMA_CS_DISDEBUG                       * 1<<29
DMA_CS_WAIT_FOR_OUTSTANDING_WRITES    * 1<<28
DMA_CS_PANIC_PRIORITY_SHIFT           * 20
DMA_CS_PANIC_PRIORITY_MASK            * &F
DMA_CS_PRIORITY_SHIFT                 * 16
DMA_CS_PRIORITY_MASK                  * &F
DMA_CS_ERROR                          * 1<<8
DMA_CS_WAITING_FOR_OUTSTANDING_WRITES * 1<<6
DMA_CS_DREQ_STOPS_DMA                 * 1<<5
DMA_CS_PAUSED                         * 1<<4
DMA_CS_DREQ                           * 1<<3
DMA_CS_INT                            * 1<<2
DMA_CS_END                            * 1<<1
DMA_CS_ACTIVE                         * 1<<0

DMA_TI_NO_WIDE_BURSTS                 * 1<<26
DMA_TI_WAITS_SHIFT                    * 21
DMA_TI_WAITS_MASK                     * &F
DMA_TI_PERMAP_SHIFT                   * 16
DMA_TI_PERMAP_MASK                    * &1F
DMA_TI_BURST_LENGTH_SHIFT             * 12
DMA_TI_BURST_LENGTH_MASK              * &F
DMA_TI_SRC_IGNORE                     * 1<<11
DMA_TI_SRC_DREQ                       * 1<<10
DMA_TI_SRC_WIDTH                      * 1<<9
DMA_TI_SRC_INC                        * 1<<8
DMA_TI_DEST_IGNORE                    * 1<<7
DMA_TI_DEST_DREQ                      * 1<<6
DMA_TI_DEST_WIDTH                     * 1<<5
DMA_TI_DEST_INC                       * 1<<4
DMA_TI_WAIT_RESP                      * 1<<3
DMA_TI_TDMODE                         * 1<<1 ; Not in lite channels
DMA_TI_INTEN                          * 1<<0

DMA_TXFR_LEN_YLENGTH_SHIFT            * 16    ; Not in lite channels
DMA_TXFR_LEN_YLENGTH_MASK             * &3FFF
DMA_TXFR_LEN_XLENGTH_SHIFT            * 0
DMA_TXFR_LEN_XLENGTH_MASK             * &FFFF

DMA_TXFR_LEN_D_STRIDE_SHIFT           * 16
DMA_TXFR_LEN_D_STRIDE_MASK            * &FFFF
DMA_TXFR_LEN_S_STRIDE_SHIFT           * 16
DMA_TXFR_LEN_S_STRIDE_MASK            * &FFFF

DMA_DEBUG_LITE                        * 1<<28
DMA_DEBUG_VERSION_SHIFT               * 25
DMA_DEBUG_VERSION_MASK                * &7
DMA_DEBUG_DMA_STATE_SHIFT             * 16
DMA_DEBUG_DMA_STATE_MASK              * &FF
DMA_DEBUG_DMA_ID_SHIFT                * 8
DMA_DEBUG_DMA_ID_MASK                 * &FF
DMA_DEBUG_OUTSTANDING_WRITES_SHIFT    * 4
DMA_DEBUG_OUTSTANDING_WRITES_MASK     * &F
DMA_DEBUG_READ_ERROR                  * 1<<2
DMA_DEBUG_FIFO_ERROR                  * 1<<1
DMA_DEBUG_READ_LAST_NOT_SET_ERROR     * 1<<0

; Peripheral DREQ values
DREQ_NONE              * 0
DREQ_DSI1              * 1
DREQ_PCM_TX            * 2
DREQ_PCM_RX            * 3
DREQ_SMI               * 4
DREQ_PWM               * 5
DREQ_SPI_TX            * 6
DREQ_SPI_RX            * 7
DREQ_BSC_SPI_SLAVE_TX  * 8
DREQ_BSC_SPI_SLAVE_RX  * 9
DREQ_EMMC              * 11
DREQ_UART_TX           * 12
DREQ_SD_HOST           * 13
DREQ_UART_RX           * 14
DREQ_DSI2              * 15
DREQ_SLIMBUS_MC_TX     * 16
DREQ_HDMI              * 17
DREQ_SLIMBUS_MC_RX     * 18
DREQ_SLIMBUS_DC0       * 19
DREQ_SLIMBUS_DC1       * 20
DREQ_SLIMBUS_DC2       * 21
DREQ_SLIMBUS_DC3       * 22
DREQ_SLIMBUS_DC4       * 23
DREQ_SCALER_FIFO_0_SMI * 24
DREQ_SCALER_FIFO_1_SMI * 25
DREQ_SCALER_FIFO_2_SMI * 26
DREQ_SLIMBUS_DC5       * 27
DREQ_SLIMBUS_DC6       * 28
DREQ_SLIMBUS_DC7       * 29
DREQ_SLIMBUS_DC8       * 30
DREQ_SLIMBUS_DC9       * 31

; Channels 7-14 are lite channels
DMA_CH_is_lite         * &7F80

        END
@
